// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 69 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 5 , 4 , 5 , 4 , 2 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 5
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 4
  26: PPUSH
  27: LD_INT 2
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 46610 0 9
// if debug then
  43: LD_EXP 3
  47: IFFALSE 56
// FogOff ( 3 ) ;
  49: LD_INT 3
  51: PPUSH
  52: CALL_OW 344
// PrepareOmikron ;
  56: CALL 3209 0 0
// PrepareRussians ;
  60: CALL 233 0 0
// MissionIntro ;
  64: CALL 6997 0 0
// end ;
  68: END
// export comArrayTmp ; export comArray ; export debug , prevMissionPrefix , currentMissionPrefix ; export meetBelkovBrother , cratesResources , oilResources , vehiclesPreviousMission , kurinOpinion , platonovOpinion , vehiclesToSave ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinVehNeeded ; export canDestroyBeriaBase ; export enableOmicronAI ; export kirovCanCaptureVehicles ; export endCutscene ; export VehNeeded ; export OmiRunB ; export kaganek ; export enemySkillLevel ; export KirovCurrentAttacker ; function Init ; begin
  69: LD_INT 0
  71: PPUSH
// debug := false ;
  72: LD_ADDR_EXP 3
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// prevMissionPrefix := 02_ ;
  80: LD_ADDR_EXP 4
  84: PUSH
  85: LD_STRING 02_
  87: ST_TO_ADDR
// currentMissionPrefix := 03_ ;
  88: LD_ADDR_EXP 5
  92: PUSH
  93: LD_STRING 03_
  95: ST_TO_ADDR
// counterIndex := 1 ;
  96: LD_ADDR_EXP 89
 100: PUSH
 101: LD_INT 1
 103: ST_TO_ADDR
// KirovCurrentAttacker := 1 ;
 104: LD_ADDR_EXP 43
 108: PUSH
 109: LD_INT 1
 111: ST_TO_ADDR
// KurinVehNeeded := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
 112: LD_ADDR_EXP 34
 116: PUSH
 117: LD_INT 1
 119: PUSH
 120: LD_INT 2
 122: PUSH
 123: LD_INT 3
 125: PUSH
 126: LD_INT 4
 128: PUSH
 129: EMPTY
 130: LIST
 131: LIST
 132: LIST
 133: LIST
 134: PUSH
 135: LD_OWVAR 67
 139: ARRAY
 140: ST_TO_ADDR
// timeToPrepareAttack := [ 20 20$0 , 17 17$0 , 15 15$0 , 12 12$30 ] [ Difficulty ] ;
 141: LD_ADDR_EXP 92
 145: PUSH
 146: LD_INT 42000
 148: PUSH
 149: LD_INT 35700
 151: PUSH
 152: LD_INT 31500
 154: PUSH
 155: LD_INT 26250
 157: PUSH
 158: EMPTY
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: PUSH
 164: LD_OWVAR 67
 168: ARRAY
 169: ST_TO_ADDR
// timeToArabAttack := [ 80 80$00 , 70 70$00 , 60 60$00 , 50 50$00 ] [ Difficulty ] ;
 170: LD_ADDR_EXP 93
 174: PUSH
 175: LD_INT 168000
 177: PUSH
 178: LD_INT 147000
 180: PUSH
 181: LD_INT 126000
 183: PUSH
 184: LD_INT 105000
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: PUSH
 193: LD_OWVAR 67
 197: ARRAY
 198: ST_TO_ADDR
// enemySkillLevel = [ 2 , 3 , 4 , 5 ] [ Difficulty ] ;
 199: LD_ADDR_EXP 42
 203: PUSH
 204: LD_INT 2
 206: PUSH
 207: LD_INT 3
 209: PUSH
 210: LD_INT 4
 212: PUSH
 213: LD_INT 5
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: LD_OWVAR 67
 226: ARRAY
 227: ST_TO_ADDR
// end ; end_of_file
 228: LD_VAR 0 1
 232: RET
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Benko , Kuklajs ; export otherBeriaUnits , beriaBase , beriaDepot , beriaVehs ; export Kurin , Popov ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot , kirovLab , kirovBarracks , kirovWorkshop , kirovBunkersArray ; export Grishko , Gaydar , Bukov , Scholtze , Scholtze2 ; export burlakTeam , kirovEngs ; export function PrepareRussians ; var un ; begin
 233: LD_INT 0
 235: PPUSH
 236: PPUSH
// PrepareHeroes ;
 237: CALL 254 0 0
// PrepareBeriaBase ;
 241: CALL 957 0 0
// PrepareKirovBase ;
 245: CALL 1396 0 0
// end ;
 249: LD_VAR 0 1
 253: RET
// function PrepareHeroes ; var un ; begin
 254: LD_INT 0
 256: PPUSH
 257: PPUSH
// uc_side := 6 ;
 258: LD_ADDR_OWVAR 20
 262: PUSH
 263: LD_INT 6
 265: ST_TO_ADDR
// otherBeriaUnits := CreateCharacterSet ( 02_burlakTeam ) ;
 266: LD_ADDR_EXP 52
 270: PUSH
 271: LD_STRING 02_burlakTeam
 273: PPUSH
 274: CALL_OW 31
 278: ST_TO_ADDR
// uc_side := 3 ;
 279: LD_ADDR_OWVAR 20
 283: PUSH
 284: LD_INT 3
 286: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
 287: LD_ADDR_EXP 44
 291: PUSH
 292: LD_STRING Burlak
 294: PPUSH
 295: LD_EXP 3
 299: NOT
 300: PPUSH
 301: LD_EXP 4
 305: PPUSH
 306: CALL 13139 0 3
 310: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
 311: LD_ADDR_EXP 45
 315: PUSH
 316: LD_STRING Gnyevko
 318: PPUSH
 319: LD_EXP 3
 323: NOT
 324: PPUSH
 325: LD_EXP 4
 329: PPUSH
 330: CALL 13139 0 3
 334: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , ( not debug ) , prevMissionPrefix ) ;
 335: LD_ADDR_EXP 47
 339: PUSH
 340: LD_STRING Kovalyuk
 342: PPUSH
 343: LD_EXP 3
 347: NOT
 348: PPUSH
 349: LD_EXP 4
 353: PPUSH
 354: CALL 13139 0 3
 358: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
 359: LD_ADDR_EXP 46
 363: PUSH
 364: LD_STRING Kirilenkova
 366: PPUSH
 367: LD_EXP 3
 371: NOT
 372: PPUSH
 373: LD_EXP 4
 377: PPUSH
 378: CALL 13139 0 3
 382: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
 383: LD_ADDR_EXP 48
 387: PUSH
 388: LD_STRING Belkov
 390: PPUSH
 391: LD_EXP 3
 395: NOT
 396: PPUSH
 397: LD_EXP 4
 401: PPUSH
 402: CALL 13139 0 3
 406: ST_TO_ADDR
// Benko := PrepareUnit ( Benko , ( not debug ) , prevMissionPrefix ) ;
 407: LD_ADDR_EXP 50
 411: PUSH
 412: LD_STRING Benko
 414: PPUSH
 415: LD_EXP 3
 419: NOT
 420: PPUSH
 421: LD_EXP 4
 425: PPUSH
 426: CALL 13139 0 3
 430: ST_TO_ADDR
// Kuklajs := PrepareUnit ( Kuklajs , ( not debug ) , prevMissionPrefix ) ;
 431: LD_ADDR_EXP 51
 435: PUSH
 436: LD_STRING Kuklajs
 438: PPUSH
 439: LD_EXP 3
 443: NOT
 444: PPUSH
 445: LD_EXP 4
 449: PPUSH
 450: CALL 13139 0 3
 454: ST_TO_ADDR
// uc_side := 6 ;
 455: LD_ADDR_OWVAR 20
 459: PUSH
 460: LD_INT 6
 462: ST_TO_ADDR
// Kurin := NewCharacter ( Kurin ) ;
 463: LD_ADDR_EXP 56
 467: PUSH
 468: LD_STRING Kurin
 470: PPUSH
 471: CALL_OW 25
 475: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
 476: LD_ADDR_EXP 57
 480: PUSH
 481: LD_STRING Popov
 483: PPUSH
 484: CALL_OW 25
 488: ST_TO_ADDR
// Grishko := NewCharacter ( Grishko ) ;
 489: LD_ADDR_EXP 66
 493: PUSH
 494: LD_STRING Grishko
 496: PPUSH
 497: CALL_OW 25
 501: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
 502: LD_ADDR_EXP 67
 506: PUSH
 507: LD_STRING Gaydar
 509: PPUSH
 510: CALL_OW 25
 514: ST_TO_ADDR
// Bukov := NewCharacter ( Bukov ) ;
 515: LD_ADDR_EXP 68
 519: PUSH
 520: LD_STRING Bukov
 522: PPUSH
 523: CALL_OW 25
 527: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
 528: LD_EXP 44
 532: PUSH
 533: LD_EXP 45
 537: PUSH
 538: LD_EXP 47
 542: PUSH
 543: EMPTY
 544: LIST
 545: LIST
 546: LIST
 547: PPUSH
 548: LD_INT 3
 550: PPUSH
 551: CALL_OW 336
// SetClass ( Kirilenkova , 4 ) ;
 555: LD_EXP 46
 559: PPUSH
 560: LD_INT 4
 562: PPUSH
 563: CALL_OW 336
// PlaceUnitXY ( Kurin , 153 , 103 , false ) ;
 567: LD_EXP 56
 571: PPUSH
 572: LD_INT 153
 574: PPUSH
 575: LD_INT 103
 577: PPUSH
 578: LD_INT 0
 580: PPUSH
 581: CALL_OW 48
// AddComHold ( Kurin ) ;
 585: LD_EXP 56
 589: PPUSH
 590: CALL_OW 200
// AddComTurnXY ( Kurin , 155 , 106 ) ;
 594: LD_EXP 56
 598: PPUSH
 599: LD_INT 155
 601: PPUSH
 602: LD_INT 106
 604: PPUSH
 605: CALL_OW 178
// PlaceUnitXY ( Popov , 131 , 49 , false ) ;
 609: LD_EXP 57
 613: PPUSH
 614: LD_INT 131
 616: PPUSH
 617: LD_INT 49
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL_OW 48
// AddComHold ( Popov ) ;
 627: LD_EXP 57
 631: PPUSH
 632: CALL_OW 200
// AddComTurnXY ( Popov , 131 , 31 ) ;
 636: LD_EXP 57
 640: PPUSH
 641: LD_INT 131
 643: PPUSH
 644: LD_INT 31
 646: PPUSH
 647: CALL_OW 178
// PlaceUnitXY ( Gaydar , 91 , 15 , false ) ;
 651: LD_EXP 67
 655: PPUSH
 656: LD_INT 91
 658: PPUSH
 659: LD_INT 15
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: CALL_OW 48
// AddComHold ( Gaydar ) ;
 669: LD_EXP 67
 673: PPUSH
 674: CALL_OW 200
// AddComTurnXY ( Gaydar , 131 , 31 ) ;
 678: LD_EXP 67
 682: PPUSH
 683: LD_INT 131
 685: PPUSH
 686: LD_INT 31
 688: PPUSH
 689: CALL_OW 178
// PlaceUnitXY ( Bukov , 86 , 17 , false ) ;
 693: LD_EXP 68
 697: PPUSH
 698: LD_INT 86
 700: PPUSH
 701: LD_INT 17
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: CALL_OW 48
// AddComHold ( Bukov ) ;
 711: LD_EXP 68
 715: PPUSH
 716: CALL_OW 200
// AddComTurnXY ( Bukov , 94 , 32 ) ;
 720: LD_EXP 68
 724: PPUSH
 725: LD_INT 94
 727: PPUSH
 728: LD_INT 32
 730: PPUSH
 731: CALL_OW 178
// PlaceUnitXY ( Belkov , 155 , 106 , false ) ;
 735: LD_EXP 48
 739: PPUSH
 740: LD_INT 155
 742: PPUSH
 743: LD_INT 106
 745: PPUSH
 746: LD_INT 0
 748: PPUSH
 749: CALL_OW 48
// AddComHold ( Belkov ) ;
 753: LD_EXP 48
 757: PPUSH
 758: CALL_OW 200
// AddComTurnUnit ( Belkov , Kurin ) ;
 762: LD_EXP 48
 766: PPUSH
 767: LD_EXP 56
 771: PPUSH
 772: CALL_OW 179
// PlaceUnitXY ( Burlak , 154 , 106 , false ) ;
 776: LD_EXP 44
 780: PPUSH
 781: LD_INT 154
 783: PPUSH
 784: LD_INT 106
 786: PPUSH
 787: LD_INT 0
 789: PPUSH
 790: CALL_OW 48
// AddComHold ( Burlak ) ;
 794: LD_EXP 44
 798: PPUSH
 799: CALL_OW 200
// AddComTurnUnit ( Burlak , Kurin ) ;
 803: LD_EXP 44
 807: PPUSH
 808: LD_EXP 56
 812: PPUSH
 813: CALL_OW 179
// burlakTeam := [ Gnyevko , Kovalyuk , Kirilenkova ] ;
 817: LD_ADDR_EXP 71
 821: PUSH
 822: LD_EXP 45
 826: PUSH
 827: LD_EXP 47
 831: PUSH
 832: LD_EXP 46
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: LIST
 841: ST_TO_ADDR
// for un in otherBeriaUnits do
 842: LD_ADDR_VAR 0 2
 846: PUSH
 847: LD_EXP 52
 851: PUSH
 852: FOR_IN
 853: IFFALSE 895
// begin PlaceUnitArea ( un , kirovSpawn , false ) ;
 855: LD_VAR 0 2
 859: PPUSH
 860: LD_INT 4
 862: PPUSH
 863: LD_INT 0
 865: PPUSH
 866: CALL_OW 49
// AddComHold ( un ) ;
 870: LD_VAR 0 2
 874: PPUSH
 875: CALL_OW 200
// AddComTurnUnit ( un , Kurin ) ;
 879: LD_VAR 0 2
 883: PPUSH
 884: LD_EXP 56
 888: PPUSH
 889: CALL_OW 179
// end ;
 893: GO 852
 895: POP
 896: POP
// for un in BurlakTeam do
 897: LD_ADDR_VAR 0 2
 901: PUSH
 902: LD_EXP 71
 906: PUSH
 907: FOR_IN
 908: IFFALSE 950
// begin PlaceUnitArea ( un , kirovSpawn , false ) ;
 910: LD_VAR 0 2
 914: PPUSH
 915: LD_INT 4
 917: PPUSH
 918: LD_INT 0
 920: PPUSH
 921: CALL_OW 49
// AddComHold ( un ) ;
 925: LD_VAR 0 2
 929: PPUSH
 930: CALL_OW 200
// AddComTurnUnit ( un , Kurin ) ;
 934: LD_VAR 0 2
 938: PPUSH
 939: LD_EXP 56
 943: PPUSH
 944: CALL_OW 179
// end ;
 948: GO 907
 950: POP
 951: POP
// end ;
 952: LD_VAR 0 1
 956: RET
// export function PrepareBeriaBase ; var i , veh , bonusResources , beriaDepot ; begin
 957: LD_INT 0
 959: PPUSH
 960: PPUSH
 961: PPUSH
 962: PPUSH
 963: PPUSH
// beriaBase := LoadVariable ( 02_Beria , [ ] ) ;
 964: LD_ADDR_EXP 53
 968: PUSH
 969: LD_STRING 02_Beria
 971: PPUSH
 972: EMPTY
 973: PPUSH
 974: CALL_OW 30
 978: ST_TO_ADDR
// beriaVehs := LoadVariable ( 02_VehiclesCount , [ ] ) ;
 979: LD_ADDR_EXP 55
 983: PUSH
 984: LD_STRING 02_VehiclesCount
 986: PPUSH
 987: EMPTY
 988: PPUSH
 989: CALL_OW 30
 993: ST_TO_ADDR
// uc_side := 3 ;
 994: LD_ADDR_OWVAR 20
 998: PUSH
 999: LD_INT 3
1001: ST_TO_ADDR
// uc_nation := 3 ;
1002: LD_ADDR_OWVAR 21
1006: PUSH
1007: LD_INT 3
1009: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
1010: LD_ADDR_OWVAR 37
1014: PUSH
1015: LD_INT 21
1017: ST_TO_ADDR
// vc_control = control_manual ;
1018: LD_ADDR_OWVAR 38
1022: PUSH
1023: LD_INT 1
1025: ST_TO_ADDR
// vc_engine = engine_combustion ;
1026: LD_ADDR_OWVAR 39
1030: PUSH
1031: LD_INT 1
1033: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
1034: LD_ADDR_OWVAR 40
1038: PUSH
1039: LD_INT 42
1041: ST_TO_ADDR
// for i := 1 to beriaBase do
1042: LD_ADDR_VAR 0 2
1046: PUSH
1047: DOUBLE
1048: LD_INT 1
1050: DEC
1051: ST_TO_ADDR
1052: LD_EXP 53
1056: PUSH
1057: FOR_TO
1058: IFFALSE 1217
// begin bc_type := beriaBase [ i ] [ 1 ] ;
1060: LD_ADDR_OWVAR 42
1064: PUSH
1065: LD_EXP 53
1069: PUSH
1070: LD_VAR 0 2
1074: ARRAY
1075: PUSH
1076: LD_INT 1
1078: ARRAY
1079: ST_TO_ADDR
// bc_level := beriaBase [ i ] [ 2 ] ;
1080: LD_ADDR_OWVAR 43
1084: PUSH
1085: LD_EXP 53
1089: PUSH
1090: LD_VAR 0 2
1094: ARRAY
1095: PUSH
1096: LD_INT 2
1098: ARRAY
1099: ST_TO_ADDR
// if bc_type = b_lab then
1100: LD_OWVAR 42
1104: PUSH
1105: LD_INT 6
1107: EQUAL
1108: IFFALSE 1126
// begin bc_kind1 := b_lab_basic ;
1110: LD_ADDR_OWVAR 44
1114: PUSH
1115: LD_INT 9
1117: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
1118: LD_ADDR_OWVAR 45
1122: PUSH
1123: LD_INT 9
1125: ST_TO_ADDR
// end ; if beriaBase [ i ] [ 4 ] < 70 then
1126: LD_EXP 53
1130: PUSH
1131: LD_VAR 0 2
1135: ARRAY
1136: PUSH
1137: LD_INT 4
1139: ARRAY
1140: PUSH
1141: LD_INT 70
1143: LESS
1144: IFFALSE 1154
// uc_nation := 1 ;
1146: LD_ADDR_OWVAR 21
1150: PUSH
1151: LD_INT 1
1153: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 3 ] + 46 , beriaBase [ i ] [ 4 ] , beriaBase [ i ] [ 5 ] ) ;
1154: LD_EXP 53
1158: PUSH
1159: LD_VAR 0 2
1163: ARRAY
1164: PUSH
1165: LD_INT 3
1167: ARRAY
1168: PUSH
1169: LD_INT 46
1171: PLUS
1172: PPUSH
1173: LD_EXP 53
1177: PUSH
1178: LD_VAR 0 2
1182: ARRAY
1183: PUSH
1184: LD_INT 4
1186: ARRAY
1187: PPUSH
1188: LD_EXP 53
1192: PUSH
1193: LD_VAR 0 2
1197: ARRAY
1198: PUSH
1199: LD_INT 5
1201: ARRAY
1202: PPUSH
1203: CALL_OW 47
// uc_nation := 3 ;
1207: LD_ADDR_OWVAR 21
1211: PUSH
1212: LD_INT 3
1214: ST_TO_ADDR
// end ;
1215: GO 1057
1217: POP
1218: POP
// for i := 1 to beriaVehs do
1219: LD_ADDR_VAR 0 2
1223: PUSH
1224: DOUBLE
1225: LD_INT 1
1227: DEC
1228: ST_TO_ADDR
1229: LD_EXP 55
1233: PUSH
1234: FOR_TO
1235: IFFALSE 1299
// begin vc_fuel_battery = [ 20 , 35 , 50 , 80 ] [ Rand ( 1 , 4 ) ] ;
1237: LD_ADDR_OWVAR 41
1241: PUSH
1242: LD_INT 20
1244: PUSH
1245: LD_INT 35
1247: PUSH
1248: LD_INT 50
1250: PUSH
1251: LD_INT 80
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: PUSH
1260: LD_INT 1
1262: PPUSH
1263: LD_INT 4
1265: PPUSH
1266: CALL_OW 12
1270: ARRAY
1271: ST_TO_ADDR
// veh = CreateVehicle ;
1272: LD_ADDR_VAR 0 3
1276: PUSH
1277: CALL_OW 45
1281: ST_TO_ADDR
// PlaceUnitArea ( veh , beriaBaseArea , false ) ;
1282: LD_VAR 0 3
1286: PPUSH
1287: LD_INT 11
1289: PPUSH
1290: LD_INT 0
1292: PPUSH
1293: CALL_OW 49
// end ;
1297: GO 1234
1299: POP
1300: POP
// beriaDepot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1301: LD_ADDR_VAR 0 5
1305: PUSH
1306: LD_INT 22
1308: PUSH
1309: LD_INT 3
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: PUSH
1316: LD_INT 30
1318: PUSH
1319: LD_INT 0
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: PUSH
1326: EMPTY
1327: LIST
1328: LIST
1329: PPUSH
1330: CALL_OW 69
1334: PUSH
1335: LD_INT 1
1337: ARRAY
1338: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1339: LD_VAR 0 5
1343: PPUSH
1344: LD_STRING beria
1346: PPUSH
1347: CALL_OW 500
// SetResourceType ( GetBase ( beriaDepot ) , 1 , 100 ) ;
1351: LD_VAR 0 5
1355: PPUSH
1356: CALL_OW 274
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: LD_INT 100
1366: PPUSH
1367: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , 2 , 20 ) ;
1371: LD_VAR 0 5
1375: PPUSH
1376: CALL_OW 274
1380: PPUSH
1381: LD_INT 2
1383: PPUSH
1384: LD_INT 20
1386: PPUSH
1387: CALL_OW 277
// end ;
1391: LD_VAR 0 1
1395: RET
// export function PrepareKirovBase ; var i , un , tmp , buildings , x , b , bonusResources ; begin
1396: LD_INT 0
1398: PPUSH
1399: PPUSH
1400: PPUSH
1401: PPUSH
1402: PPUSH
1403: PPUSH
1404: PPUSH
1405: PPUSH
// kirovBase := LoadVariable ( 02_Kirov , [ ] ) ;
1406: LD_ADDR_EXP 59
1410: PUSH
1411: LD_STRING 02_Kirov
1413: PPUSH
1414: EMPTY
1415: PPUSH
1416: CALL_OW 30
1420: ST_TO_ADDR
// uc_side := 6 ;
1421: LD_ADDR_OWVAR 20
1425: PUSH
1426: LD_INT 6
1428: ST_TO_ADDR
// uc_nation := 3 ;
1429: LD_ADDR_OWVAR 21
1433: PUSH
1434: LD_INT 3
1436: ST_TO_ADDR
// kirovBunkersArray := [ [ b_breastwork , 146 , 106 , 1 ] , [ b_breastwork , 175 , 123 , 5 ] , [ b_breastwork , 179 , 118 , 4 ] , [ b_breastwork , 144 , 99 , 1 ] ] ;
1437: LD_ADDR_EXP 65
1441: PUSH
1442: LD_INT 31
1444: PUSH
1445: LD_INT 146
1447: PUSH
1448: LD_INT 106
1450: PUSH
1451: LD_INT 1
1453: PUSH
1454: EMPTY
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 31
1462: PUSH
1463: LD_INT 175
1465: PUSH
1466: LD_INT 123
1468: PUSH
1469: LD_INT 5
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: PUSH
1478: LD_INT 31
1480: PUSH
1481: LD_INT 179
1483: PUSH
1484: LD_INT 118
1486: PUSH
1487: LD_INT 4
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: PUSH
1496: LD_INT 31
1498: PUSH
1499: LD_INT 144
1501: PUSH
1502: LD_INT 99
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: ST_TO_ADDR
// for i := 1 to kirovBunkersArray do
1520: LD_ADDR_VAR 0 2
1524: PUSH
1525: DOUBLE
1526: LD_INT 1
1528: DEC
1529: ST_TO_ADDR
1530: LD_EXP 65
1534: PUSH
1535: FOR_TO
1536: IFFALSE 1616
// PrepareBuilding ( 6 , 3 , 5 , kirovBunkersArray [ i ] [ 1 ] , kirovBunkersArray [ i ] [ 2 ] , kirovBunkersArray [ i ] [ 3 ] , kirovBunkersArray [ i ] [ 4 ] , false ) ;
1538: LD_INT 6
1540: PPUSH
1541: LD_INT 3
1543: PPUSH
1544: LD_INT 5
1546: PPUSH
1547: LD_EXP 65
1551: PUSH
1552: LD_VAR 0 2
1556: ARRAY
1557: PUSH
1558: LD_INT 1
1560: ARRAY
1561: PPUSH
1562: LD_EXP 65
1566: PUSH
1567: LD_VAR 0 2
1571: ARRAY
1572: PUSH
1573: LD_INT 2
1575: ARRAY
1576: PPUSH
1577: LD_EXP 65
1581: PUSH
1582: LD_VAR 0 2
1586: ARRAY
1587: PUSH
1588: LD_INT 3
1590: ARRAY
1591: PPUSH
1592: LD_EXP 65
1596: PUSH
1597: LD_VAR 0 2
1601: ARRAY
1602: PUSH
1603: LD_INT 4
1605: ARRAY
1606: PPUSH
1607: LD_INT 0
1609: PPUSH
1610: CALL 53667 0 8
1614: GO 1535
1616: POP
1617: POP
// otherKirovUnits := CreateCharacterSet ( 02_kirovTeam ) ;
1618: LD_ADDR_EXP 58
1622: PUSH
1623: LD_STRING 02_kirovTeam
1625: PPUSH
1626: CALL_OW 31
1630: ST_TO_ADDR
// for i := 1 to kirovBase do
1631: LD_ADDR_VAR 0 2
1635: PUSH
1636: DOUBLE
1637: LD_INT 1
1639: DEC
1640: ST_TO_ADDR
1641: LD_EXP 59
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1796
// begin bc_type := kirovBase [ i ] [ 1 ] ;
1649: LD_ADDR_OWVAR 42
1653: PUSH
1654: LD_EXP 59
1658: PUSH
1659: LD_VAR 0 2
1663: ARRAY
1664: PUSH
1665: LD_INT 1
1667: ARRAY
1668: ST_TO_ADDR
// bc_level := kirovBase [ i ] [ 2 ] ;
1669: LD_ADDR_OWVAR 43
1673: PUSH
1674: LD_EXP 59
1678: PUSH
1679: LD_VAR 0 2
1683: ARRAY
1684: PUSH
1685: LD_INT 2
1687: ARRAY
1688: ST_TO_ADDR
// x := kirovBase [ i ] [ 3 ] + 46 ;
1689: LD_ADDR_VAR 0 6
1693: PUSH
1694: LD_EXP 59
1698: PUSH
1699: LD_VAR 0 2
1703: ARRAY
1704: PUSH
1705: LD_INT 3
1707: ARRAY
1708: PUSH
1709: LD_INT 46
1711: PLUS
1712: ST_TO_ADDR
// if x < 140 then
1713: LD_VAR 0 6
1717: PUSH
1718: LD_INT 140
1720: LESS
1721: IFFALSE 1733
// uc_side := 3 else
1723: LD_ADDR_OWVAR 20
1727: PUSH
1728: LD_INT 3
1730: ST_TO_ADDR
1731: GO 1741
// uc_side := 6 ;
1733: LD_ADDR_OWVAR 20
1737: PUSH
1738: LD_INT 6
1740: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 3 ] + 46 , kirovBase [ i ] [ 4 ] , kirovBase [ i ] [ 5 ] ) ;
1741: LD_EXP 59
1745: PUSH
1746: LD_VAR 0 2
1750: ARRAY
1751: PUSH
1752: LD_INT 3
1754: ARRAY
1755: PUSH
1756: LD_INT 46
1758: PLUS
1759: PPUSH
1760: LD_EXP 59
1764: PUSH
1765: LD_VAR 0 2
1769: ARRAY
1770: PUSH
1771: LD_INT 4
1773: ARRAY
1774: PPUSH
1775: LD_EXP 59
1779: PUSH
1780: LD_VAR 0 2
1784: ARRAY
1785: PUSH
1786: LD_INT 5
1788: ARRAY
1789: PPUSH
1790: CALL_OW 47
// end ;
1794: GO 1646
1796: POP
1797: POP
// kirovDepot := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1798: LD_ADDR_EXP 60
1802: PUSH
1803: LD_INT 22
1805: PUSH
1806: LD_INT 6
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: PUSH
1813: LD_INT 30
1815: PUSH
1816: LD_INT 0
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PPUSH
1827: CALL_OW 69
1831: PUSH
1832: LD_INT 1
1834: ARRAY
1835: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
1836: LD_EXP 60
1840: PPUSH
1841: LD_STRING kirov
1843: PPUSH
1844: CALL_OW 500
// for i := 1 to 2 do
1848: LD_ADDR_VAR 0 2
1852: PUSH
1853: DOUBLE
1854: LD_INT 1
1856: DEC
1857: ST_TO_ADDR
1858: LD_INT 2
1860: PUSH
1861: FOR_TO
1862: IFFALSE 1888
// SetResourceType ( GetBase ( kirovDepot ) , i , 500 ) ;
1864: LD_EXP 60
1868: PPUSH
1869: CALL_OW 274
1873: PPUSH
1874: LD_VAR 0 2
1878: PPUSH
1879: LD_INT 500
1881: PPUSH
1882: CALL_OW 277
1886: GO 1861
1888: POP
1889: POP
// tmp := otherKirovUnits ;
1890: LD_ADDR_VAR 0 4
1894: PUSH
1895: LD_EXP 58
1899: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_breastwork ] ] ] ) ;
1900: LD_ADDR_VAR 0 5
1904: PUSH
1905: LD_INT 22
1907: PUSH
1908: LD_INT 6
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: PUSH
1915: LD_INT 21
1917: PUSH
1918: LD_INT 3
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PUSH
1925: LD_INT 3
1927: PUSH
1928: LD_INT 30
1930: PUSH
1931: LD_INT 31
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: LIST
1946: PPUSH
1947: CALL_OW 69
1951: ST_TO_ADDR
// repeat b := buildings [ 1 ] ;
1952: LD_ADDR_VAR 0 7
1956: PUSH
1957: LD_VAR 0 5
1961: PUSH
1962: LD_INT 1
1964: ARRAY
1965: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 1 ] , b ) ;
1966: LD_VAR 0 4
1970: PUSH
1971: LD_INT 1
1973: ARRAY
1974: PPUSH
1975: LD_VAR 0 7
1979: PPUSH
1980: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
1984: LD_ADDR_VAR 0 4
1988: PUSH
1989: LD_VAR 0 4
1993: PPUSH
1994: LD_INT 1
1996: PPUSH
1997: CALL_OW 3
2001: ST_TO_ADDR
// if UnitsInside ( b ) = 3 then
2002: LD_VAR 0 7
2006: PPUSH
2007: CALL_OW 313
2011: PUSH
2012: LD_INT 3
2014: EQUAL
2015: IFFALSE 2035
// buildings := Delete ( buildings , 1 ) ;
2017: LD_ADDR_VAR 0 5
2021: PUSH
2022: LD_VAR 0 5
2026: PPUSH
2027: LD_INT 1
2029: PPUSH
2030: CALL_OW 3
2034: ST_TO_ADDR
// until not buildings or not tmp ;
2035: LD_VAR 0 5
2039: NOT
2040: PUSH
2041: LD_VAR 0 4
2045: NOT
2046: OR
2047: IFFALSE 1952
// if tmp then
2049: LD_VAR 0 4
2053: IFFALSE 2093
// begin for i in tmp do
2055: LD_ADDR_VAR 0 2
2059: PUSH
2060: LD_VAR 0 4
2064: PUSH
2065: FOR_IN
2066: IFFALSE 2091
// PlaceUnitXYR ( i , 164 , 109 , 4 , false ) ;
2068: LD_VAR 0 2
2072: PPUSH
2073: LD_INT 164
2075: PPUSH
2076: LD_INT 109
2078: PPUSH
2079: LD_INT 4
2081: PPUSH
2082: LD_INT 0
2084: PPUSH
2085: CALL_OW 50
2089: GO 2065
2091: POP
2092: POP
// end ; end ;
2093: LD_VAR 0 1
2097: RET
// export function UpgradeKirovBase ; var i , un , kirovBuildingArray , kirovBunkers ; begin
2098: LD_INT 0
2100: PPUSH
2101: PPUSH
2102: PPUSH
2103: PPUSH
2104: PPUSH
// kirovBuildingArray := [ [ b_bunker , 146 , 106 , 1 ] , [ b_bunker , 175 , 123 , 5 ] , [ b_bunker , 179 , 118 , 4 ] , [ b_bunker , 170 , 101 , 3 ] , [ b_bunker , 172 , 104 , 4 ] , [ b_oil_power , 159 , 96 , 3 ] ] ;
2105: LD_ADDR_VAR 0 4
2109: PUSH
2110: LD_INT 32
2112: PUSH
2113: LD_INT 146
2115: PUSH
2116: LD_INT 106
2118: PUSH
2119: LD_INT 1
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: PUSH
2128: LD_INT 32
2130: PUSH
2131: LD_INT 175
2133: PUSH
2134: LD_INT 123
2136: PUSH
2137: LD_INT 5
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: LIST
2144: LIST
2145: PUSH
2146: LD_INT 32
2148: PUSH
2149: LD_INT 179
2151: PUSH
2152: LD_INT 118
2154: PUSH
2155: LD_INT 4
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: PUSH
2164: LD_INT 32
2166: PUSH
2167: LD_INT 170
2169: PUSH
2170: LD_INT 101
2172: PUSH
2173: LD_INT 3
2175: PUSH
2176: EMPTY
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: PUSH
2182: LD_INT 32
2184: PUSH
2185: LD_INT 172
2187: PUSH
2188: LD_INT 104
2190: PUSH
2191: LD_INT 4
2193: PUSH
2194: EMPTY
2195: LIST
2196: LIST
2197: LIST
2198: LIST
2199: PUSH
2200: LD_INT 26
2202: PUSH
2203: LD_INT 159
2205: PUSH
2206: LD_INT 96
2208: PUSH
2209: LD_INT 3
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: LIST
2216: LIST
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: LIST
2225: ST_TO_ADDR
// kirovEngs := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
2226: LD_ADDR_EXP 72
2230: PUSH
2231: LD_INT 22
2233: PUSH
2234: LD_INT 6
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: PUSH
2241: LD_INT 21
2243: PUSH
2244: LD_INT 1
2246: PUSH
2247: EMPTY
2248: LIST
2249: LIST
2250: PUSH
2251: LD_INT 25
2253: PUSH
2254: LD_INT 2
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: LIST
2265: PPUSH
2266: CALL_OW 69
2270: ST_TO_ADDR
// kirovLab := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
2271: LD_ADDR_EXP 62
2275: PUSH
2276: LD_INT 22
2278: PUSH
2279: LD_INT 6
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: LD_INT 21
2288: PUSH
2289: LD_INT 3
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: PUSH
2296: LD_INT 30
2298: PUSH
2299: LD_INT 6
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: LIST
2310: PPUSH
2311: CALL_OW 69
2315: PUSH
2316: LD_INT 1
2318: ARRAY
2319: ST_TO_ADDR
// kirovBarracks := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_armoury ] ] ) ;
2320: LD_ADDR_EXP 63
2324: PUSH
2325: LD_INT 22
2327: PUSH
2328: LD_INT 6
2330: PUSH
2331: EMPTY
2332: LIST
2333: LIST
2334: PUSH
2335: LD_INT 21
2337: PUSH
2338: LD_INT 3
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: PUSH
2345: LD_INT 30
2347: PUSH
2348: LD_INT 4
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: PPUSH
2360: CALL_OW 69
2364: ST_TO_ADDR
// kirovWorkshop := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_workshop ] ] ) [ 1 ] ;
2365: LD_ADDR_EXP 64
2369: PUSH
2370: LD_INT 22
2372: PUSH
2373: LD_INT 6
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: PUSH
2380: LD_INT 21
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: PUSH
2390: LD_INT 30
2392: PUSH
2393: LD_INT 2
2395: PUSH
2396: EMPTY
2397: LIST
2398: LIST
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: LIST
2404: PPUSH
2405: CALL_OW 69
2409: PUSH
2410: LD_INT 1
2412: ARRAY
2413: ST_TO_ADDR
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] ] ) ;
2414: LD_ADDR_VAR 0 3
2418: PUSH
2419: LD_INT 22
2421: PUSH
2422: LD_INT 6
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PUSH
2429: LD_INT 21
2431: PUSH
2432: LD_INT 1
2434: PUSH
2435: EMPTY
2436: LIST
2437: LIST
2438: PUSH
2439: LD_INT 25
2441: PUSH
2442: LD_INT 3
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: LIST
2453: PPUSH
2454: CALL_OW 69
2458: ST_TO_ADDR
// ComExitBuilding ( un ) ;
2459: LD_VAR 0 3
2463: PPUSH
2464: CALL_OW 122
// AddComEnterUnit ( un , kirovWorkshop ) ;
2468: LD_VAR 0 3
2472: PPUSH
2473: LD_EXP 64
2477: PPUSH
2478: CALL_OW 180
// wait ( 0 0$1 ) ;
2482: LD_INT 35
2484: PPUSH
2485: CALL_OW 67
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] ] ) ;
2489: LD_ADDR_VAR 0 3
2493: PUSH
2494: LD_INT 22
2496: PUSH
2497: LD_INT 6
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 21
2506: PUSH
2507: LD_INT 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 25
2516: PUSH
2517: LD_INT 4
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 69
2533: ST_TO_ADDR
// AddComEnterUnit ( un , kirovLab ) ;
2534: LD_VAR 0 3
2538: PPUSH
2539: LD_EXP 62
2543: PPUSH
2544: CALL_OW 180
// kirovBunkers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) ;
2548: LD_ADDR_VAR 0 5
2552: PUSH
2553: LD_INT 22
2555: PUSH
2556: LD_INT 6
2558: PUSH
2559: EMPTY
2560: LIST
2561: LIST
2562: PUSH
2563: LD_INT 21
2565: PUSH
2566: LD_INT 3
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: PUSH
2573: LD_INT 30
2575: PUSH
2576: LD_INT 31
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: LIST
2587: PPUSH
2588: CALL_OW 69
2592: ST_TO_ADDR
// for i in kirovBunkersArray do
2593: LD_ADDR_VAR 0 2
2597: PUSH
2598: LD_EXP 65
2602: PUSH
2603: FOR_IN
2604: IFFALSE 2685
// begin RemoveUnit ( kirovBunkers [ 1 ] ) ;
2606: LD_VAR 0 5
2610: PUSH
2611: LD_INT 1
2613: ARRAY
2614: PPUSH
2615: CALL_OW 64
// kirovBunkers := Delete ( kirovBunkers , 1 ) ;
2619: LD_ADDR_VAR 0 5
2623: PUSH
2624: LD_VAR 0 5
2628: PPUSH
2629: LD_INT 1
2631: PPUSH
2632: CALL_OW 3
2636: ST_TO_ADDR
// PrepareBuilding ( 6 , 3 , 5 , b_bunker , i [ 2 ] , i [ 3 ] , i [ 4 ] , true ) ;
2637: LD_INT 6
2639: PPUSH
2640: LD_INT 3
2642: PPUSH
2643: LD_INT 5
2645: PPUSH
2646: LD_INT 32
2648: PPUSH
2649: LD_VAR 0 2
2653: PUSH
2654: LD_INT 2
2656: ARRAY
2657: PPUSH
2658: LD_VAR 0 2
2662: PUSH
2663: LD_INT 3
2665: ARRAY
2666: PPUSH
2667: LD_VAR 0 2
2671: PUSH
2672: LD_INT 4
2674: ARRAY
2675: PPUSH
2676: LD_INT 1
2678: PPUSH
2679: CALL 53667 0 8
// end ;
2683: GO 2603
2685: POP
2686: POP
// for i in kirovBuildingArray do
2687: LD_ADDR_VAR 0 2
2691: PUSH
2692: LD_VAR 0 4
2696: PUSH
2697: FOR_IN
2698: IFFALSE 2747
// begin AddComBuild ( kirovEngs , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2700: LD_EXP 72
2704: PPUSH
2705: LD_VAR 0 2
2709: PUSH
2710: LD_INT 1
2712: ARRAY
2713: PPUSH
2714: LD_VAR 0 2
2718: PUSH
2719: LD_INT 2
2721: ARRAY
2722: PPUSH
2723: LD_VAR 0 2
2727: PUSH
2728: LD_INT 3
2730: ARRAY
2731: PPUSH
2732: LD_VAR 0 2
2736: PUSH
2737: LD_INT 4
2739: ARRAY
2740: PPUSH
2741: CALL_OW 205
// end ;
2745: GO 2697
2747: POP
2748: POP
// comArray := [ kirovLab , kirovBarracks [ 1 ] , kirovBarracks [ 2 ] , kirovDepot , kirovWorkshop , ] ;
2749: LD_ADDR_EXP 2
2753: PUSH
2754: LD_EXP 62
2758: PUSH
2759: LD_EXP 63
2763: PUSH
2764: LD_INT 1
2766: ARRAY
2767: PUSH
2768: LD_EXP 63
2772: PUSH
2773: LD_INT 2
2775: ARRAY
2776: PUSH
2777: LD_EXP 60
2781: PUSH
2782: LD_EXP 64
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: LIST
2791: LIST
2792: LIST
2793: ST_TO_ADDR
// end ;
2794: LD_VAR 0 1
2798: RET
// export function PrepareScholtze ; begin
2799: LD_INT 0
2801: PPUSH
// uc_side := 5 ;
2802: LD_ADDR_OWVAR 20
2806: PUSH
2807: LD_INT 5
2809: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
2810: LD_ADDR_EXP 69
2814: PUSH
2815: LD_STRING Scholtze
2817: PPUSH
2818: CALL_OW 25
2822: ST_TO_ADDR
// Scholtze2 := NewCharacter ( Scholtze ) ;
2823: LD_ADDR_EXP 70
2827: PUSH
2828: LD_STRING Scholtze
2830: PPUSH
2831: CALL_OW 25
2835: ST_TO_ADDR
// PlaceUnitArea ( Scholtze , ScholtzeSpawnArea , true ) ;
2836: LD_EXP 69
2840: PPUSH
2841: LD_INT 12
2843: PPUSH
2844: LD_INT 1
2846: PPUSH
2847: CALL_OW 49
// end ;
2851: LD_VAR 0 1
2855: RET
// export function KirovAttackOmicron ; begin
2856: LD_INT 0
2858: PPUSH
// if KirovCurrentAttacker = Length ( kirovAttackVehicles ) then
2859: LD_EXP 43
2863: PUSH
2864: LD_EXP 94
2868: PPUSH
2869: CALL 53645 0 1
2873: EQUAL
2874: IFFALSE 2884
// KirovCurrentAttacker = 1 ;
2876: LD_ADDR_EXP 43
2880: PUSH
2881: LD_INT 1
2883: ST_TO_ADDR
// AgressiveMove ( kirovAttackVehicles [ KirovCurrentAttacker ] , [ [ 34 , 38 ] ] ) ;
2884: LD_EXP 94
2888: PUSH
2889: LD_EXP 43
2893: ARRAY
2894: PPUSH
2895: LD_INT 34
2897: PUSH
2898: LD_INT 38
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: PUSH
2905: EMPTY
2906: LIST
2907: PPUSH
2908: CALL 52524 0 2
// end ; end_of_file
2912: LD_VAR 0 1
2916: RET
// export omicronSquad , Omikron , omikronDepot ; export amIntroUnits , omiBunerArray ; export amConvoyGroups , amFreeSols ; export amLabs , amBarracks , amFactory , amVehs ; export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
2917: LD_INT 0
2919: PPUSH
2920: PPUSH
2921: PPUSH
2922: PPUSH
// amIntroUnits = [ ] ;
2923: LD_ADDR_EXP 76
2927: PUSH
2928: EMPTY
2929: ST_TO_ADDR
// uc_side = 1 ;
2930: LD_ADDR_OWVAR 20
2934: PUSH
2935: LD_INT 1
2937: ST_TO_ADDR
// uc_nation = nation_american ;
2938: LD_ADDR_OWVAR 21
2942: PUSH
2943: LD_INT 1
2945: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
2946: LD_ADDR_OWVAR 37
2950: PUSH
2951: LD_INT 3
2953: ST_TO_ADDR
// vc_control = control_manual ;
2954: LD_ADDR_OWVAR 38
2958: PUSH
2959: LD_INT 1
2961: ST_TO_ADDR
// vc_engine = engine_combustion ;
2962: LD_ADDR_OWVAR 39
2966: PUSH
2967: LD_INT 1
2969: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2970: LD_ADDR_OWVAR 40
2974: PUSH
2975: LD_INT 3
2977: ST_TO_ADDR
// vc_fuel_battery = 100 ;
2978: LD_ADDR_OWVAR 41
2982: PUSH
2983: LD_INT 100
2985: ST_TO_ADDR
// veh = CreateVehicle ;
2986: LD_ADDR_VAR 0 3
2990: PUSH
2991: CALL_OW 45
2995: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2996: LD_VAR 0 3
3000: PPUSH
3001: LD_INT 4
3003: PPUSH
3004: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
3008: LD_ADDR_EXP 76
3012: PUSH
3013: LD_EXP 76
3017: PUSH
3018: LD_VAR 0 3
3022: ADD
3023: ST_TO_ADDR
// PlaceUnitArea ( veh , AmTroopsSpawnIntro , false ) ;
3024: LD_VAR 0 3
3028: PPUSH
3029: LD_INT 7
3031: PPUSH
3032: LD_INT 0
3034: PPUSH
3035: CALL_OW 49
// for i := 1 to 3 do
3039: LD_ADDR_VAR 0 2
3043: PUSH
3044: DOUBLE
3045: LD_INT 1
3047: DEC
3048: ST_TO_ADDR
3049: LD_INT 3
3051: PUSH
3052: FOR_TO
3053: IFFALSE 3174
// begin hc_name :=  ;
3055: LD_ADDR_OWVAR 26
3059: PUSH
3060: LD_STRING 
3062: ST_TO_ADDR
// hc_gallery :=  ;
3063: LD_ADDR_OWVAR 33
3067: PUSH
3068: LD_STRING 
3070: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel ) ;
3071: LD_INT 0
3073: PPUSH
3074: LD_EXP 42
3078: PPUSH
3079: CALL_OW 381
// human = CreateHuman ;
3083: LD_ADDR_VAR 0 4
3087: PUSH
3088: CALL_OW 44
3092: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
3093: LD_ADDR_EXP 76
3097: PUSH
3098: LD_EXP 76
3102: PUSH
3103: LD_VAR 0 4
3107: ADD
3108: ST_TO_ADDR
// if i < 3 then
3109: LD_VAR 0 2
3113: PUSH
3114: LD_INT 3
3116: LESS
3117: IFFALSE 3136
// PlaceUnitArea ( human , AmTroopsSpawnIntro , false ) else
3119: LD_VAR 0 4
3123: PPUSH
3124: LD_INT 7
3126: PPUSH
3127: LD_INT 0
3129: PPUSH
3130: CALL_OW 49
3134: GO 3172
// begin PrepareMechanic ( false , enemySkillLevel ) ;
3136: LD_INT 0
3138: PPUSH
3139: LD_EXP 42
3143: PPUSH
3144: CALL_OW 383
// human = CreateHuman ;
3148: LD_ADDR_VAR 0 4
3152: PUSH
3153: CALL_OW 44
3157: ST_TO_ADDR
// PlaceHumanInUnit ( human , veh ) ;
3158: LD_VAR 0 4
3162: PPUSH
3163: LD_VAR 0 3
3167: PPUSH
3168: CALL_OW 52
// end ; end ;
3172: GO 3052
3174: POP
3175: POP
// HiddenCamera ( 120 , 36 , 3 ) ;
3176: LD_INT 120
3178: PPUSH
3179: LD_INT 36
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: CALL_OW 244
// ComMoveXY ( amIntroUnits , 26 , 34 ) ;
3189: LD_EXP 76
3193: PPUSH
3194: LD_INT 26
3196: PPUSH
3197: LD_INT 34
3199: PPUSH
3200: CALL_OW 111
// end ;
3204: LD_VAR 0 1
3208: RET
// export function PrepareOmikron ; var i , un , tmp , veh , omiBuildingArray ; begin
3209: LD_INT 0
3211: PPUSH
3212: PPUSH
3213: PPUSH
3214: PPUSH
3215: PPUSH
3216: PPUSH
// amConvoyGroups := [ [ [ 1 , 2 , 3 , 5 ] [ Difficulty ] , [ 0 , 0 , 1 , 1 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] ] , [ [ 1 , 2 , 3 , 4 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 6 , 7 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 1 , 3 ] [ Difficulty ] ] ] ;
3217: LD_ADDR_EXP 78
3221: PUSH
3222: LD_INT 1
3224: PUSH
3225: LD_INT 2
3227: PUSH
3228: LD_INT 3
3230: PUSH
3231: LD_INT 5
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: LIST
3238: LIST
3239: PUSH
3240: LD_OWVAR 67
3244: ARRAY
3245: PUSH
3246: LD_INT 0
3248: PUSH
3249: LD_INT 0
3251: PUSH
3252: LD_INT 1
3254: PUSH
3255: LD_INT 1
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: PUSH
3264: LD_OWVAR 67
3268: ARRAY
3269: PUSH
3270: LD_INT 1
3272: PUSH
3273: LD_INT 1
3275: PUSH
3276: LD_INT 2
3278: PUSH
3279: LD_INT 2
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: PUSH
3288: LD_OWVAR 67
3292: ARRAY
3293: PUSH
3294: LD_INT 1
3296: PUSH
3297: LD_INT 1
3299: PUSH
3300: LD_INT 1
3302: PUSH
3303: LD_INT 2
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: PUSH
3312: LD_OWVAR 67
3316: ARRAY
3317: PUSH
3318: LD_INT 0
3320: PUSH
3321: LD_INT 1
3323: PUSH
3324: LD_INT 1
3326: PUSH
3327: LD_INT 2
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: PUSH
3336: LD_OWVAR 67
3340: ARRAY
3341: PUSH
3342: EMPTY
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 3
3351: PUSH
3352: LD_INT 4
3354: PUSH
3355: LD_INT 5
3357: PUSH
3358: LD_INT 6
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: PUSH
3367: LD_OWVAR 67
3371: ARRAY
3372: PUSH
3373: LD_INT 0
3375: PUSH
3376: LD_INT 1
3378: PUSH
3379: LD_INT 1
3381: PUSH
3382: LD_INT 2
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: PUSH
3391: LD_OWVAR 67
3395: ARRAY
3396: PUSH
3397: LD_INT 1
3399: PUSH
3400: LD_INT 1
3402: PUSH
3403: LD_INT 2
3405: PUSH
3406: LD_INT 3
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: PUSH
3415: LD_OWVAR 67
3419: ARRAY
3420: PUSH
3421: LD_INT 1
3423: PUSH
3424: LD_INT 1
3426: PUSH
3427: LD_INT 2
3429: PUSH
3430: LD_INT 3
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: PUSH
3439: LD_OWVAR 67
3443: ARRAY
3444: PUSH
3445: LD_INT 1
3447: PUSH
3448: LD_INT 1
3450: PUSH
3451: LD_INT 2
3453: PUSH
3454: LD_INT 3
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: PUSH
3463: LD_OWVAR 67
3467: ARRAY
3468: PUSH
3469: EMPTY
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: PUSH
3476: LD_INT 1
3478: PUSH
3479: LD_INT 2
3481: PUSH
3482: LD_INT 3
3484: PUSH
3485: LD_INT 4
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: LIST
3492: LIST
3493: PUSH
3494: LD_OWVAR 67
3498: ARRAY
3499: PUSH
3500: LD_INT 1
3502: PUSH
3503: LD_INT 1
3505: PUSH
3506: LD_INT 1
3508: PUSH
3509: LD_INT 2
3511: PUSH
3512: EMPTY
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: PUSH
3518: LD_OWVAR 67
3522: ARRAY
3523: PUSH
3524: LD_INT 1
3526: PUSH
3527: LD_INT 1
3529: PUSH
3530: LD_INT 2
3532: PUSH
3533: LD_INT 2
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: PUSH
3542: LD_OWVAR 67
3546: ARRAY
3547: PUSH
3548: LD_INT 1
3550: PUSH
3551: LD_INT 1
3553: PUSH
3554: LD_INT 1
3556: PUSH
3557: LD_INT 2
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: PUSH
3566: LD_OWVAR 67
3570: ARRAY
3571: PUSH
3572: LD_INT 1
3574: PUSH
3575: LD_INT 1
3577: PUSH
3578: LD_INT 1
3580: PUSH
3581: LD_INT 2
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: LIST
3588: LIST
3589: PUSH
3590: LD_OWVAR 67
3594: ARRAY
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: PUSH
3603: LD_INT 3
3605: PUSH
3606: LD_INT 4
3608: PUSH
3609: LD_INT 6
3611: PUSH
3612: LD_INT 7
3614: PUSH
3615: EMPTY
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: PUSH
3621: LD_OWVAR 67
3625: ARRAY
3626: PUSH
3627: LD_INT 1
3629: PUSH
3630: LD_INT 1
3632: PUSH
3633: LD_INT 1
3635: PUSH
3636: LD_INT 2
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: PUSH
3645: LD_OWVAR 67
3649: ARRAY
3650: PUSH
3651: LD_INT 1
3653: PUSH
3654: LD_INT 1
3656: PUSH
3657: LD_INT 2
3659: PUSH
3660: LD_INT 3
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: PUSH
3669: LD_OWVAR 67
3673: ARRAY
3674: PUSH
3675: LD_INT 1
3677: PUSH
3678: LD_INT 1
3680: PUSH
3681: LD_INT 2
3683: PUSH
3684: LD_INT 3
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: PUSH
3693: LD_OWVAR 67
3697: ARRAY
3698: PUSH
3699: LD_INT 1
3701: PUSH
3702: LD_INT 1
3704: PUSH
3705: LD_INT 1
3707: PUSH
3708: LD_INT 3
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: PUSH
3717: LD_OWVAR 67
3721: ARRAY
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: LIST
3734: LIST
3735: ST_TO_ADDR
// omiBuildingArray := [ [ b_warehouse , 20 , 33 , 2 ] , [ b_oil_mine , 38 , 30 , 5 ] , [ b_barracks , 34 , 25 , 4 ] , [ b_barracks , 35 , 45 , 4 ] , [ b_lab , 15 , 23 , 1 ] , [ b_solar_power , 7 , 8 , 1 ] , [ b_solar_power , 10 , 8 , 1 ] , [ b_solar_power , 13 , 8 , 1 ] , [ b_oil_power , 23 , 42 , 4 ] , [ b_factory , 13 , 14 , 1 ] , [ b_ext_noncombat , 10 , 11 , 2 ] , [ b_ext_gun , 9 , 14 , 1 ] , [ b_ext_track , 13 , 17 , 0 ] ] ;
3736: LD_ADDR_VAR 0 6
3740: PUSH
3741: LD_INT 1
3743: PUSH
3744: LD_INT 20
3746: PUSH
3747: LD_INT 33
3749: PUSH
3750: LD_INT 2
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: LIST
3757: LIST
3758: PUSH
3759: LD_INT 29
3761: PUSH
3762: LD_INT 38
3764: PUSH
3765: LD_INT 30
3767: PUSH
3768: LD_INT 5
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: PUSH
3777: LD_INT 5
3779: PUSH
3780: LD_INT 34
3782: PUSH
3783: LD_INT 25
3785: PUSH
3786: LD_INT 4
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: PUSH
3795: LD_INT 5
3797: PUSH
3798: LD_INT 35
3800: PUSH
3801: LD_INT 45
3803: PUSH
3804: LD_INT 4
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: PUSH
3813: LD_INT 6
3815: PUSH
3816: LD_INT 15
3818: PUSH
3819: LD_INT 23
3821: PUSH
3822: LD_INT 1
3824: PUSH
3825: EMPTY
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: PUSH
3831: LD_INT 27
3833: PUSH
3834: LD_INT 7
3836: PUSH
3837: LD_INT 8
3839: PUSH
3840: LD_INT 1
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_INT 27
3851: PUSH
3852: LD_INT 10
3854: PUSH
3855: LD_INT 8
3857: PUSH
3858: LD_INT 1
3860: PUSH
3861: EMPTY
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: PUSH
3867: LD_INT 27
3869: PUSH
3870: LD_INT 13
3872: PUSH
3873: LD_INT 8
3875: PUSH
3876: LD_INT 1
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 26
3887: PUSH
3888: LD_INT 23
3890: PUSH
3891: LD_INT 42
3893: PUSH
3894: LD_INT 4
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: PUSH
3903: LD_INT 3
3905: PUSH
3906: LD_INT 13
3908: PUSH
3909: LD_INT 14
3911: PUSH
3912: LD_INT 1
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: PUSH
3921: LD_INT 19
3923: PUSH
3924: LD_INT 10
3926: PUSH
3927: LD_INT 11
3929: PUSH
3930: LD_INT 2
3932: PUSH
3933: EMPTY
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: PUSH
3939: LD_INT 17
3941: PUSH
3942: LD_INT 9
3944: PUSH
3945: LD_INT 14
3947: PUSH
3948: LD_INT 1
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: PUSH
3957: LD_INT 16
3959: PUSH
3960: LD_INT 13
3962: PUSH
3963: LD_INT 17
3965: PUSH
3966: LD_INT 0
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: LIST
3973: LIST
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: LIST
3985: LIST
3986: LIST
3987: LIST
3988: LIST
3989: ST_TO_ADDR
// omiBunerArray := [ [ b_bunker , 25 , 8 , 5 ] , [ b_bunker , 37 , 35 , 4 ] , [ b_bunker , 42 , 45 , 4 ] , [ b_bunker , 29 , 17 , 4 ] , [ b_bunker , 30 , 53 , 0 ] , [ b_bunker , 42 , 56 , 4 ] , [ b_bunker , 30 , 20 , 4 ] ] ;
3990: LD_ADDR_EXP 77
3994: PUSH
3995: LD_INT 32
3997: PUSH
3998: LD_INT 25
4000: PUSH
4001: LD_INT 8
4003: PUSH
4004: LD_INT 5
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: PUSH
4013: LD_INT 32
4015: PUSH
4016: LD_INT 37
4018: PUSH
4019: LD_INT 35
4021: PUSH
4022: LD_INT 4
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: PUSH
4031: LD_INT 32
4033: PUSH
4034: LD_INT 42
4036: PUSH
4037: LD_INT 45
4039: PUSH
4040: LD_INT 4
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: PUSH
4049: LD_INT 32
4051: PUSH
4052: LD_INT 29
4054: PUSH
4055: LD_INT 17
4057: PUSH
4058: LD_INT 4
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: PUSH
4067: LD_INT 32
4069: PUSH
4070: LD_INT 30
4072: PUSH
4073: LD_INT 53
4075: PUSH
4076: LD_INT 0
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: PUSH
4085: LD_INT 32
4087: PUSH
4088: LD_INT 42
4090: PUSH
4091: LD_INT 56
4093: PUSH
4094: LD_INT 4
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: PUSH
4103: LD_INT 32
4105: PUSH
4106: LD_INT 30
4108: PUSH
4109: LD_INT 20
4111: PUSH
4112: LD_INT 4
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: LIST
4129: ST_TO_ADDR
// omicronSquad := [ ] ;
4130: LD_ADDR_EXP 73
4134: PUSH
4135: EMPTY
4136: ST_TO_ADDR
// for i in omiBuildingArray do
4137: LD_ADDR_VAR 0 2
4141: PUSH
4142: LD_VAR 0 6
4146: PUSH
4147: FOR_IN
4148: IFFALSE 4204
// PrepareBuilding ( 1 , 1 , 5 , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
4150: LD_INT 1
4152: PPUSH
4153: LD_INT 1
4155: PPUSH
4156: LD_INT 5
4158: PPUSH
4159: LD_VAR 0 2
4163: PUSH
4164: LD_INT 1
4166: ARRAY
4167: PPUSH
4168: LD_VAR 0 2
4172: PUSH
4173: LD_INT 2
4175: ARRAY
4176: PPUSH
4177: LD_VAR 0 2
4181: PUSH
4182: LD_INT 3
4184: ARRAY
4185: PPUSH
4186: LD_VAR 0 2
4190: PUSH
4191: LD_INT 4
4193: ARRAY
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL 53667 0 8
4202: GO 4147
4204: POP
4205: POP
// omikronDepot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4206: LD_ADDR_EXP 75
4210: PUSH
4211: LD_INT 22
4213: PUSH
4214: LD_INT 1
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PUSH
4221: LD_INT 30
4223: PUSH
4224: LD_INT 1
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: PPUSH
4235: CALL_OW 69
4239: PUSH
4240: LD_INT 1
4242: ARRAY
4243: ST_TO_ADDR
// SetBName ( omikronDepot , omikron ) ;
4244: LD_EXP 75
4248: PPUSH
4249: LD_STRING omikron
4251: PPUSH
4252: CALL_OW 500
// amBarracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
4256: LD_ADDR_EXP 81
4260: PUSH
4261: LD_INT 22
4263: PUSH
4264: LD_INT 1
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PUSH
4271: LD_INT 30
4273: PUSH
4274: LD_INT 5
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: PUSH
4281: EMPTY
4282: LIST
4283: LIST
4284: PPUSH
4285: CALL_OW 69
4289: ST_TO_ADDR
// amLabs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab ] ] ) ;
4290: LD_ADDR_EXP 80
4294: PUSH
4295: LD_INT 22
4297: PUSH
4298: LD_INT 1
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: LD_INT 30
4307: PUSH
4308: LD_INT 6
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PPUSH
4319: CALL_OW 69
4323: ST_TO_ADDR
// amFactory := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4324: LD_ADDR_EXP 82
4328: PUSH
4329: LD_INT 22
4331: PUSH
4332: LD_INT 1
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: PUSH
4339: LD_INT 30
4341: PUSH
4342: LD_INT 3
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: PPUSH
4353: CALL_OW 69
4357: PUSH
4358: LD_INT 1
4360: ARRAY
4361: ST_TO_ADDR
// end ;
4362: LD_VAR 0 1
4366: RET
// export function UpgradeOmicron ; var i , un , amBunkers ; begin
4367: LD_INT 0
4369: PPUSH
4370: PPUSH
4371: PPUSH
4372: PPUSH
// for i := 1 to 2 do
4373: LD_ADDR_VAR 0 2
4377: PUSH
4378: DOUBLE
4379: LD_INT 1
4381: DEC
4382: ST_TO_ADDR
4383: LD_INT 2
4385: PUSH
4386: FOR_TO
4387: IFFALSE 4413
// SetResourceType ( GetBase ( omikronDepot ) , i , 100 ) ;
4389: LD_EXP 75
4393: PPUSH
4394: CALL_OW 274
4398: PPUSH
4399: LD_VAR 0 2
4403: PPUSH
4404: LD_INT 100
4406: PPUSH
4407: CALL_OW 277
4411: GO 4386
4413: POP
4414: POP
// uc_side := 1 ;
4415: LD_ADDR_OWVAR 20
4419: PUSH
4420: LD_INT 1
4422: ST_TO_ADDR
// uc_nation := 1 ;
4423: LD_ADDR_OWVAR 21
4427: PUSH
4428: LD_INT 1
4430: ST_TO_ADDR
// amBunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
4431: LD_ADDR_VAR 0 4
4435: PUSH
4436: LD_INT 22
4438: PUSH
4439: LD_INT 1
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: PUSH
4446: LD_INT 30
4448: PUSH
4449: LD_INT 31
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PPUSH
4460: CALL_OW 69
4464: ST_TO_ADDR
// PrepareBuilding ( 1 , 1 , 5 , omiBunerArray [ 1 ] [ 1 ] , omiBunerArray [ 1 ] [ 2 ] , omiBunerArray [ 1 ] [ 3 ] , omiBunerArray [ 1 ] [ 4 ] , false ) ;
4465: LD_INT 1
4467: PPUSH
4468: LD_INT 1
4470: PPUSH
4471: LD_INT 5
4473: PPUSH
4474: LD_EXP 77
4478: PUSH
4479: LD_INT 1
4481: ARRAY
4482: PUSH
4483: LD_INT 1
4485: ARRAY
4486: PPUSH
4487: LD_EXP 77
4491: PUSH
4492: LD_INT 1
4494: ARRAY
4495: PUSH
4496: LD_INT 2
4498: ARRAY
4499: PPUSH
4500: LD_EXP 77
4504: PUSH
4505: LD_INT 1
4507: ARRAY
4508: PUSH
4509: LD_INT 3
4511: ARRAY
4512: PPUSH
4513: LD_EXP 77
4517: PUSH
4518: LD_INT 1
4520: ARRAY
4521: PUSH
4522: LD_INT 4
4524: ARRAY
4525: PPUSH
4526: LD_INT 0
4528: PPUSH
4529: CALL 53667 0 8
// omiBunerArray := Delete ( omiBunerArray , 1 ) ;
4533: LD_ADDR_EXP 77
4537: PUSH
4538: LD_EXP 77
4542: PPUSH
4543: LD_INT 1
4545: PPUSH
4546: CALL_OW 3
4550: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
4551: LD_ADDR_VAR 0 2
4555: PUSH
4556: LD_INT 22
4558: PUSH
4559: LD_INT 1
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: LD_INT 2
4568: PUSH
4569: LD_INT 30
4571: PUSH
4572: LD_INT 32
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: LD_INT 30
4581: PUSH
4582: LD_INT 31
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: LIST
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: PPUSH
4598: CALL_OW 69
4602: PUSH
4603: FOR_IN
4604: IFFALSE 4723
// begin PrepareHuman ( sex_male , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4606: LD_INT 1
4608: PPUSH
4609: LD_INT 1
4611: PPUSH
4612: LD_INT 3
4614: PUSH
4615: LD_INT 4
4617: PUSH
4618: LD_INT 5
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: LIST
4625: PUSH
4626: LD_OWVAR 67
4630: ARRAY
4631: PPUSH
4632: CALL_OW 380
// un := CreateHuman ;
4636: LD_ADDR_VAR 0 3
4640: PUSH
4641: CALL_OW 44
4645: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
4646: LD_ADDR_EXP 73
4650: PUSH
4651: LD_EXP 73
4655: PUSH
4656: LD_VAR 0 3
4660: UNION
4661: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
4662: LD_VAR 0 3
4666: PPUSH
4667: LD_VAR 0 2
4671: PPUSH
4672: CALL_OW 254
4676: PUSH
4677: LD_INT 3
4679: MINUS
4680: PPUSH
4681: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
4685: LD_VAR 0 3
4689: PPUSH
4690: LD_VAR 0 2
4694: PPUSH
4695: CALL_OW 52
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , areaOmicron ) ) ;
4699: LD_VAR 0 2
4703: PPUSH
4704: LD_VAR 0 2
4708: PPUSH
4709: LD_INT 8
4711: PPUSH
4712: CALL 23243 0 2
4716: PPUSH
4717: CALL_OW 431
// end ;
4721: GO 4603
4723: POP
4724: POP
// end ;
4725: LD_VAR 0 1
4729: RET
// export amConvoyTroops ; export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , vehs ; begin
4730: LD_INT 0
4732: PPUSH
4733: PPUSH
4734: PPUSH
4735: PPUSH
4736: PPUSH
4737: PPUSH
4738: PPUSH
4739: PPUSH
4740: PPUSH
4741: PPUSH
// uc_side := 1 ;
4742: LD_ADDR_OWVAR 20
4746: PUSH
4747: LD_INT 1
4749: ST_TO_ADDR
// uc_nation := 1 ;
4750: LD_ADDR_OWVAR 21
4754: PUSH
4755: LD_INT 1
4757: ST_TO_ADDR
// hc_name :=  ;
4758: LD_ADDR_OWVAR 26
4762: PUSH
4763: LD_STRING 
4765: ST_TO_ADDR
// hc_gallery :=  ;
4766: LD_ADDR_OWVAR 33
4770: PUSH
4771: LD_STRING 
4773: ST_TO_ADDR
// amFreeSols := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_outside ] ] ) ;
4774: LD_ADDR_EXP 79
4778: PUSH
4779: LD_INT 22
4781: PUSH
4782: LD_INT 1
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 21
4791: PUSH
4792: LD_INT 1
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PUSH
4799: LD_INT 25
4801: PUSH
4802: LD_INT 1
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 56
4811: PUSH
4812: EMPTY
4813: LIST
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: PPUSH
4821: CALL_OW 69
4825: ST_TO_ADDR
// for i := 1 to soldiersAmount do
4826: LD_ADDR_VAR 0 8
4830: PUSH
4831: DOUBLE
4832: LD_INT 1
4834: DEC
4835: ST_TO_ADDR
4836: LD_VAR 0 1
4840: PUSH
4841: FOR_TO
4842: IFFALSE 4917
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4844: LD_INT 0
4846: PPUSH
4847: LD_EXP 42
4851: PPUSH
4852: CALL_OW 381
// un = CreateHuman ;
4856: LD_ADDR_VAR 0 9
4860: PUSH
4861: CALL_OW 44
4865: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4866: LD_ADDR_EXP 84
4870: PUSH
4871: LD_EXP 84
4875: PUSH
4876: LD_VAR 0 9
4880: ADD
4881: ST_TO_ADDR
// sols := sols ^ un ;
4882: LD_ADDR_VAR 0 12
4886: PUSH
4887: LD_VAR 0 12
4891: PUSH
4892: LD_VAR 0 9
4896: ADD
4897: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4898: LD_VAR 0 9
4902: PPUSH
4903: LD_VAR 0 6
4907: PPUSH
4908: LD_INT 0
4910: PPUSH
4911: CALL_OW 49
// end ;
4915: GO 4841
4917: POP
4918: POP
// for i := 1 to engsAmount do
4919: LD_ADDR_VAR 0 8
4923: PUSH
4924: DOUBLE
4925: LD_INT 1
4927: DEC
4928: ST_TO_ADDR
4929: LD_VAR 0 2
4933: PUSH
4934: FOR_TO
4935: IFFALSE 5010
// begin PrepareEngineer ( false , enemySkillLevel ) ;
4937: LD_INT 0
4939: PPUSH
4940: LD_EXP 42
4944: PPUSH
4945: CALL_OW 382
// un = CreateHuman ;
4949: LD_ADDR_VAR 0 9
4953: PUSH
4954: CALL_OW 44
4958: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4959: LD_ADDR_EXP 84
4963: PUSH
4964: LD_EXP 84
4968: PUSH
4969: LD_VAR 0 9
4973: ADD
4974: ST_TO_ADDR
// engs := engs ^ un ;
4975: LD_ADDR_VAR 0 13
4979: PUSH
4980: LD_VAR 0 13
4984: PUSH
4985: LD_VAR 0 9
4989: ADD
4990: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4991: LD_VAR 0 9
4995: PPUSH
4996: LD_VAR 0 6
5000: PPUSH
5001: LD_INT 0
5003: PPUSH
5004: CALL_OW 49
// end ;
5008: GO 4934
5010: POP
5011: POP
// for i := 1 to mechsAmount do
5012: LD_ADDR_VAR 0 8
5016: PUSH
5017: DOUBLE
5018: LD_INT 1
5020: DEC
5021: ST_TO_ADDR
5022: LD_VAR 0 3
5026: PUSH
5027: FOR_TO
5028: IFFALSE 5103
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5030: LD_INT 0
5032: PPUSH
5033: LD_EXP 42
5037: PPUSH
5038: CALL_OW 383
// un = CreateHuman ;
5042: LD_ADDR_VAR 0 9
5046: PUSH
5047: CALL_OW 44
5051: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
5052: LD_ADDR_EXP 84
5056: PUSH
5057: LD_EXP 84
5061: PUSH
5062: LD_VAR 0 9
5066: ADD
5067: ST_TO_ADDR
// mechs := mechs ^ un ;
5068: LD_ADDR_VAR 0 14
5072: PUSH
5073: LD_VAR 0 14
5077: PUSH
5078: LD_VAR 0 9
5082: ADD
5083: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5084: LD_VAR 0 9
5088: PPUSH
5089: LD_VAR 0 6
5093: PPUSH
5094: LD_INT 0
5096: PPUSH
5097: CALL_OW 49
// end ;
5101: GO 5027
5103: POP
5104: POP
// for i := 1 to scientistsAmount do
5105: LD_ADDR_VAR 0 8
5109: PUSH
5110: DOUBLE
5111: LD_INT 1
5113: DEC
5114: ST_TO_ADDR
5115: LD_VAR 0 4
5119: PUSH
5120: FOR_TO
5121: IFFALSE 5196
// begin PrepareScientist ( false , enemySkillLevel ) ;
5123: LD_INT 0
5125: PPUSH
5126: LD_EXP 42
5130: PPUSH
5131: CALL_OW 384
// un = CreateHuman ;
5135: LD_ADDR_VAR 0 9
5139: PUSH
5140: CALL_OW 44
5144: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
5145: LD_ADDR_EXP 84
5149: PUSH
5150: LD_EXP 84
5154: PUSH
5155: LD_VAR 0 9
5159: ADD
5160: ST_TO_ADDR
// scis := scis ^ un ;
5161: LD_ADDR_VAR 0 15
5165: PUSH
5166: LD_VAR 0 15
5170: PUSH
5171: LD_VAR 0 9
5175: ADD
5176: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5177: LD_VAR 0 9
5181: PPUSH
5182: LD_VAR 0 6
5186: PPUSH
5187: LD_INT 0
5189: PPUSH
5190: CALL_OW 49
// end ;
5194: GO 5120
5196: POP
5197: POP
// for i := 1 to vehiclesAmount do
5198: LD_ADDR_VAR 0 8
5202: PUSH
5203: DOUBLE
5204: LD_INT 1
5206: DEC
5207: ST_TO_ADDR
5208: LD_VAR 0 5
5212: PUSH
5213: FOR_TO
5214: IFFALSE 5396
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5216: LD_ADDR_OWVAR 40
5220: PUSH
5221: LD_INT 2
5223: PUSH
5224: LD_INT 4
5226: PUSH
5227: LD_INT 3
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: LIST
5234: PUSH
5235: LD_INT 1
5237: PPUSH
5238: LD_INT 3
5240: PPUSH
5241: CALL_OW 12
5245: ARRAY
5246: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
5247: LD_ADDR_OWVAR 37
5251: PUSH
5252: LD_INT 3
5254: ST_TO_ADDR
// vc_control = control_manual ;
5255: LD_ADDR_OWVAR 38
5259: PUSH
5260: LD_INT 1
5262: ST_TO_ADDR
// vc_engine = engine_combustion ;
5263: LD_ADDR_OWVAR 39
5267: PUSH
5268: LD_INT 1
5270: ST_TO_ADDR
// veh = CreateVehicle ;
5271: LD_ADDR_VAR 0 10
5275: PUSH
5276: CALL_OW 45
5280: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
5281: LD_ADDR_EXP 84
5285: PUSH
5286: LD_EXP 84
5290: PUSH
5291: LD_VAR 0 10
5295: ADD
5296: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
5297: LD_VAR 0 10
5301: PPUSH
5302: LD_VAR 0 6
5306: PPUSH
5307: LD_INT 0
5309: PPUSH
5310: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
5314: LD_INT 0
5316: PPUSH
5317: LD_EXP 42
5321: PPUSH
5322: CALL_OW 383
// un = CreateHuman ;
5326: LD_ADDR_VAR 0 9
5330: PUSH
5331: CALL_OW 44
5335: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
5336: LD_ADDR_EXP 84
5340: PUSH
5341: LD_EXP 84
5345: PUSH
5346: LD_VAR 0 9
5350: ADD
5351: ST_TO_ADDR
// amVehs := amVehs ^ veh ;
5352: LD_ADDR_EXP 83
5356: PUSH
5357: LD_EXP 83
5361: PUSH
5362: LD_VAR 0 10
5366: ADD
5367: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5368: LD_VAR 0 9
5372: PPUSH
5373: LD_VAR 0 10
5377: PPUSH
5378: CALL_OW 52
// SetFuel ( veh , 100 ) ;
5382: LD_VAR 0 10
5386: PPUSH
5387: LD_INT 100
5389: PPUSH
5390: CALL_OW 240
// end ;
5394: GO 5213
5396: POP
5397: POP
// ComAgressiveMove ( amConvoyTroops , 25 , 31 ) ;
5398: LD_EXP 84
5402: PPUSH
5403: LD_INT 25
5405: PPUSH
5406: LD_INT 31
5408: PPUSH
5409: CALL_OW 114
// AgressiveMove ( amVehs , [ [ 95 , 44 ] ] ) ;
5413: LD_EXP 83
5417: PPUSH
5418: LD_INT 95
5420: PUSH
5421: LD_INT 44
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PUSH
5428: EMPTY
5429: LIST
5430: PPUSH
5431: CALL 52524 0 2
// AddComEnterUnit ( sols , [ amBarracks [ 1 ] , amBarracks [ 2 ] ] [ Rand ( 1 , 2 ) ] ) ;
5435: LD_VAR 0 12
5439: PPUSH
5440: LD_EXP 81
5444: PUSH
5445: LD_INT 1
5447: ARRAY
5448: PUSH
5449: LD_EXP 81
5453: PUSH
5454: LD_INT 2
5456: ARRAY
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: PUSH
5462: LD_INT 1
5464: PPUSH
5465: LD_INT 2
5467: PPUSH
5468: CALL_OW 12
5472: ARRAY
5473: PPUSH
5474: CALL_OW 180
// AddComEnterUnit ( engs , omikronDepot ) ;
5478: LD_VAR 0 13
5482: PPUSH
5483: LD_EXP 75
5487: PPUSH
5488: CALL_OW 180
// AddComEnterUnit ( mechs , amFactory ) ;
5492: LD_VAR 0 14
5496: PPUSH
5497: LD_EXP 82
5501: PPUSH
5502: CALL_OW 180
// AddComEnterUnit ( scis , [ amLabs [ 1 ] , amLabs [ 2 ] ] [ Rand ( 1 , 2 ) ] ) ;
5506: LD_VAR 0 15
5510: PPUSH
5511: LD_EXP 80
5515: PUSH
5516: LD_INT 1
5518: ARRAY
5519: PUSH
5520: LD_EXP 80
5524: PUSH
5525: LD_INT 2
5527: ARRAY
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PUSH
5533: LD_INT 1
5535: PPUSH
5536: LD_INT 2
5538: PPUSH
5539: CALL_OW 12
5543: ARRAY
5544: PPUSH
5545: CALL_OW 180
// amConvoyTroops :=  ;
5549: LD_ADDR_EXP 84
5553: PUSH
5554: LD_STRING 
5556: ST_TO_ADDR
// sols :=  ;
5557: LD_ADDR_VAR 0 12
5561: PUSH
5562: LD_STRING 
5564: ST_TO_ADDR
// engs :=  ;
5565: LD_ADDR_VAR 0 13
5569: PUSH
5570: LD_STRING 
5572: ST_TO_ADDR
// mechs :=  ;
5573: LD_ADDR_VAR 0 14
5577: PUSH
5578: LD_STRING 
5580: ST_TO_ADDR
// scis :=  ;
5581: LD_ADDR_VAR 0 15
5585: PUSH
5586: LD_STRING 
5588: ST_TO_ADDR
// end ;
5589: LD_VAR 0 7
5593: RET
// export function PrepareAttackOnRus ( ) ; var i ; begin
5594: LD_INT 0
5596: PPUSH
5597: PPUSH
// for i := 1 to amVehs do
5598: LD_ADDR_VAR 0 2
5602: PUSH
5603: DOUBLE
5604: LD_INT 1
5606: DEC
5607: ST_TO_ADDR
5608: LD_EXP 83
5612: PUSH
5613: FOR_TO
5614: IFFALSE 5657
// begin if GetType ( i ) = unit_vehicle then
5616: LD_VAR 0 2
5620: PPUSH
5621: CALL_OW 247
5625: PUSH
5626: LD_INT 2
5628: EQUAL
5629: IFFALSE 5643
// SetFuel ( i , 100 ) ;
5631: LD_VAR 0 2
5635: PPUSH
5636: LD_INT 100
5638: PPUSH
5639: CALL_OW 240
// SetLives ( i , 1000 ) ;
5643: LD_VAR 0 2
5647: PPUSH
5648: LD_INT 1000
5650: PPUSH
5651: CALL_OW 234
// end ;
5655: GO 5613
5657: POP
5658: POP
// for i := 1 to amIntroUnits do
5659: LD_ADDR_VAR 0 2
5663: PUSH
5664: DOUBLE
5665: LD_INT 1
5667: DEC
5668: ST_TO_ADDR
5669: LD_EXP 76
5673: PUSH
5674: FOR_TO
5675: IFFALSE 5718
// begin if GetType ( i ) = unit_vehicle then
5677: LD_VAR 0 2
5681: PPUSH
5682: CALL_OW 247
5686: PUSH
5687: LD_INT 2
5689: EQUAL
5690: IFFALSE 5704
// SetFuel ( i , 100 ) ;
5692: LD_VAR 0 2
5696: PPUSH
5697: LD_INT 100
5699: PPUSH
5700: CALL_OW 240
// SetLives ( i , 1000 ) ;
5704: LD_VAR 0 2
5708: PPUSH
5709: LD_INT 1000
5711: PPUSH
5712: CALL_OW 234
// end ;
5716: GO 5674
5718: POP
5719: POP
// for i := 1 to amFreeSols do
5720: LD_ADDR_VAR 0 2
5724: PUSH
5725: DOUBLE
5726: LD_INT 1
5728: DEC
5729: ST_TO_ADDR
5730: LD_EXP 79
5734: PUSH
5735: FOR_TO
5736: IFFALSE 5752
// begin SetLives ( i , 1000 ) ;
5738: LD_VAR 0 2
5742: PPUSH
5743: LD_INT 1000
5745: PPUSH
5746: CALL_OW 234
// end ;
5750: GO 5735
5752: POP
5753: POP
// AgressiveMove ( amFreeSols , [ [ 65 , 91 ] , [ 116 , 97 ] ] ) ;
5754: LD_EXP 79
5758: PPUSH
5759: LD_INT 65
5761: PUSH
5762: LD_INT 91
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: PUSH
5769: LD_INT 116
5771: PUSH
5772: LD_INT 97
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PUSH
5779: EMPTY
5780: LIST
5781: LIST
5782: PPUSH
5783: CALL 52524 0 2
// AgressiveMove ( amIntroUnits , [ [ 65 , 91 ] , [ 116 , 97 ] ] ) ;
5787: LD_EXP 76
5791: PPUSH
5792: LD_INT 65
5794: PUSH
5795: LD_INT 91
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: PUSH
5802: LD_INT 116
5804: PUSH
5805: LD_INT 97
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PPUSH
5816: CALL 52524 0 2
// AgressiveMove ( amVehs , [ [ 65 , 91 ] , [ 109 , 97 ] ] ) ;
5820: LD_EXP 83
5824: PPUSH
5825: LD_INT 65
5827: PUSH
5828: LD_INT 91
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: PUSH
5835: LD_INT 109
5837: PUSH
5838: LD_INT 97
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PUSH
5845: EMPTY
5846: LIST
5847: LIST
5848: PPUSH
5849: CALL 52524 0 2
// end ; end_of_file end_of_file
5853: LD_VAR 0 1
5857: RET
// on EnterBuilding ( building , un ) do begin if GetSide ( un ) = 1 and building = amBarracks [ 1 ] or building = amBarracks [ 2 ] then
5858: LD_VAR 0 2
5862: PPUSH
5863: CALL_OW 255
5867: PUSH
5868: LD_INT 1
5870: EQUAL
5871: PUSH
5872: LD_VAR 0 1
5876: PUSH
5877: LD_EXP 81
5881: PUSH
5882: LD_INT 1
5884: ARRAY
5885: EQUAL
5886: AND
5887: PUSH
5888: LD_VAR 0 1
5892: PUSH
5893: LD_EXP 81
5897: PUSH
5898: LD_INT 2
5900: ARRAY
5901: EQUAL
5902: OR
5903: IFFALSE 5909
// begin UpgradeOmicron ;
5905: CALL 4367 0 0
// end ; end ;
5909: PPOPN 2
5911: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( fac ) = 3 then
5912: LD_VAR 0 2
5916: PPUSH
5917: CALL_OW 255
5921: PUSH
5922: LD_INT 3
5924: EQUAL
5925: IFFALSE 5935
// counterEnable := true ;
5927: LD_ADDR_EXP 88
5931: PUSH
5932: LD_INT 1
5934: ST_TO_ADDR
// end ;
5935: PPOPN 2
5937: END
// on BuildingComplete ( building ) do var un , i , bunkers , sols , labT1 , kaganReady ;
5938: LD_INT 0
5940: PPUSH
5941: PPUSH
5942: PPUSH
5943: PPUSH
5944: PPUSH
5945: PPUSH
// begin if GetSide ( building ) = 6 and ( GetBType ( building ) = b_bunker or GetBType ( building ) = b_armoury ) then
5946: LD_VAR 0 1
5950: PPUSH
5951: CALL_OW 255
5955: PUSH
5956: LD_INT 6
5958: EQUAL
5959: PUSH
5960: LD_VAR 0 1
5964: PPUSH
5965: CALL_OW 266
5969: PUSH
5970: LD_INT 32
5972: EQUAL
5973: PUSH
5974: LD_VAR 0 1
5978: PPUSH
5979: CALL_OW 266
5983: PUSH
5984: LD_INT 4
5986: EQUAL
5987: OR
5988: AND
5989: IFFALSE 6130
// begin sols := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) ;
5991: LD_ADDR_VAR 0 5
5995: PUSH
5996: LD_INT 22
5998: PUSH
5999: LD_INT 6
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: PUSH
6006: LD_INT 21
6008: PUSH
6009: LD_INT 1
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: PUSH
6016: LD_INT 25
6018: PUSH
6019: LD_INT 1
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: LIST
6030: PPUSH
6031: CALL_OW 69
6035: ST_TO_ADDR
// for un in sols do
6036: LD_ADDR_VAR 0 2
6040: PUSH
6041: LD_VAR 0 5
6045: PUSH
6046: FOR_IN
6047: IFFALSE 6098
// begin if GetBType ( IsInUnit ( un ) ) = b_bunker then
6049: LD_VAR 0 2
6053: PPUSH
6054: CALL_OW 310
6058: PPUSH
6059: CALL_OW 266
6063: PUSH
6064: LD_INT 32
6066: EQUAL
6067: IFFALSE 6071
// continue ;
6069: GO 6046
// ComExit ( un ) ;
6071: LD_VAR 0 2
6075: PPUSH
6076: CALL 50316 0 1
// AddComEnterUnit ( un , building ) ;
6080: LD_VAR 0 2
6084: PPUSH
6085: LD_VAR 0 1
6089: PPUSH
6090: CALL_OW 180
// break ;
6094: GO 6098
// end ;
6096: GO 6046
6098: POP
6099: POP
// if labT1 = false then
6100: LD_VAR 0 6
6104: PUSH
6105: LD_INT 0
6107: EQUAL
6108: IFFALSE 6130
// begin labT1 = true ;
6110: LD_ADDR_VAR 0 6
6114: PUSH
6115: LD_INT 1
6117: ST_TO_ADDR
// AddComUpgradeLab ( kirovLab , b_lab_weapon ) ;
6118: LD_EXP 62
6122: PPUSH
6123: LD_INT 10
6125: PPUSH
6126: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and kaganReady = false then
6130: LD_VAR 0 1
6134: PPUSH
6135: CALL_OW 255
6139: PUSH
6140: LD_INT 3
6142: EQUAL
6143: PUSH
6144: LD_VAR 0 1
6148: PPUSH
6149: CALL_OW 266
6153: PUSH
6154: LD_INT 0
6156: EQUAL
6157: AND
6158: PUSH
6159: LD_VAR 0 7
6163: PUSH
6164: LD_INT 0
6166: EQUAL
6167: AND
6168: IFFALSE 6190
// begin SetBName ( building , kagan ) ;
6170: LD_VAR 0 1
6174: PPUSH
6175: LD_STRING kagan
6177: PPUSH
6178: CALL_OW 500
// kaganReady = true ;
6182: LD_ADDR_VAR 0 7
6186: PUSH
6187: LD_INT 1
6189: ST_TO_ADDR
// end ; end ;
6190: PPOPN 7
6192: END
// on UnitDestroyed ( un ) do begin if un = Burlak then
6193: LD_VAR 0 1
6197: PUSH
6198: LD_EXP 44
6202: EQUAL
6203: IFFALSE 6212
// YouLost ( Burlak ) ;
6205: LD_STRING Burlak
6207: PPUSH
6208: CALL_OW 104
// if un = beriaDepot then
6212: LD_VAR 0 1
6216: PUSH
6217: LD_EXP 54
6221: EQUAL
6222: IFFALSE 6231
// YouLost ( Omicron ) ;
6224: LD_STRING Omicron
6226: PPUSH
6227: CALL_OW 104
// end ;
6231: PPOPN 1
6233: END
// on UpgradeComplete ( building ) do var i , un , weapon , maleSci , maleOthers , extraBunkers ;
6234: LD_INT 0
6236: PPUSH
6237: PPUSH
6238: PPUSH
6239: PPUSH
6240: PPUSH
6241: PPUSH
// begin if GetSide ( building ) = 3 and dialog_workshop = false then
6242: LD_VAR 0 1
6246: PPUSH
6247: CALL_OW 255
6251: PUSH
6252: LD_INT 3
6254: EQUAL
6255: PUSH
6256: LD_EXP 16
6260: PUSH
6261: LD_INT 0
6263: EQUAL
6264: AND
6265: IFFALSE 6702
// begin dialog_workshop = true ;
6267: LD_ADDR_EXP 16
6271: PUSH
6272: LD_INT 1
6274: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
6275: LD_INT 22
6277: PUSH
6278: LD_INT 3
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PUSH
6285: LD_INT 30
6287: PUSH
6288: LD_INT 26
6290: PUSH
6291: EMPTY
6292: LIST
6293: LIST
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: PPUSH
6299: CALL_OW 69
6303: NOT
6304: IFFALSE 6693
// begin CenterNowOnUnits ( building ) ;
6306: LD_VAR 0 1
6310: PPUSH
6311: CALL_OW 87
// DialogueOn ;
6315: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
6319: LD_EXP 44
6323: PPUSH
6324: LD_STRING D3aa-Bur-1
6326: PPUSH
6327: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
6331: LD_EXP 69
6335: PPUSH
6336: CALL_OW 302
6340: PUSH
6341: LD_EXP 69
6345: PPUSH
6346: CALL_OW 255
6350: PUSH
6351: LD_INT 3
6353: EQUAL
6354: AND
6355: IFFALSE 6371
// Say ( Scholtze , D3aa-Sch-1 ) else
6357: LD_EXP 69
6361: PPUSH
6362: LD_STRING D3aa-Sch-1
6364: PPUSH
6365: CALL_OW 88
6369: GO 6677
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
6371: LD_ADDR_VAR 0 5
6375: PUSH
6376: LD_INT 22
6378: PUSH
6379: LD_INT 3
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 21
6388: PUSH
6389: LD_INT 1
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PUSH
6396: LD_INT 25
6398: PUSH
6399: LD_INT 4
6401: PUSH
6402: EMPTY
6403: LIST
6404: LIST
6405: PUSH
6406: LD_INT 26
6408: PUSH
6409: LD_INT 1
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PUSH
6416: LD_INT 50
6418: PUSH
6419: EMPTY
6420: LIST
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: PPUSH
6429: CALL_OW 69
6433: PUSH
6434: LD_EXP 44
6438: PUSH
6439: LD_EXP 45
6443: PUSH
6444: LD_EXP 47
6448: PUSH
6449: LD_EXP 48
6453: PUSH
6454: LD_EXP 49
6458: PUSH
6459: EMPTY
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: DIFF
6466: ST_TO_ADDR
// if maleSci then
6467: LD_VAR 0 5
6471: IFFALSE 6491
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
6473: LD_VAR 0 5
6477: PUSH
6478: LD_INT 1
6480: ARRAY
6481: PPUSH
6482: LD_STRING D3aa-Sci1-1
6484: PPUSH
6485: CALL_OW 88
6489: GO 6677
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
6491: LD_ADDR_VAR 0 6
6495: PUSH
6496: LD_INT 22
6498: PUSH
6499: LD_INT 3
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: PUSH
6506: LD_INT 21
6508: PUSH
6509: LD_INT 1
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: PUSH
6516: LD_INT 26
6518: PUSH
6519: LD_INT 1
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: LD_INT 50
6528: PUSH
6529: EMPTY
6530: LIST
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: PPUSH
6538: CALL_OW 69
6542: PUSH
6543: LD_EXP 44
6547: PUSH
6548: LD_EXP 45
6552: PUSH
6553: LD_EXP 47
6557: PUSH
6558: LD_EXP 48
6562: PUSH
6563: LD_EXP 49
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: DIFF
6575: ST_TO_ADDR
// if maleOthers then
6576: LD_VAR 0 6
6580: IFFALSE 6600
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) else
6582: LD_VAR 0 6
6586: PUSH
6587: LD_INT 1
6589: ARRAY
6590: PPUSH
6591: LD_STRING D3aa-Sci1-1
6593: PPUSH
6594: CALL_OW 88
6598: GO 6677
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
6600: LD_ADDR_VAR 0 6
6604: PUSH
6605: LD_INT 22
6607: PUSH
6608: LD_INT 3
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: PUSH
6615: LD_INT 21
6617: PUSH
6618: LD_INT 1
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 26
6627: PUSH
6628: LD_INT 1
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: LD_INT 50
6637: PUSH
6638: EMPTY
6639: LIST
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: PPUSH
6647: CALL_OW 69
6651: PUSH
6652: LD_EXP 44
6656: PUSH
6657: EMPTY
6658: LIST
6659: DIFF
6660: ST_TO_ADDR
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) ;
6661: LD_VAR 0 6
6665: PUSH
6666: LD_INT 1
6668: ARRAY
6669: PPUSH
6670: LD_STRING D3aa-Sci1-1
6672: PPUSH
6673: CALL_OW 88
// end ; end ; end ; Say ( Burlak , D3aa-Bur-2 ) ;
6677: LD_EXP 44
6681: PPUSH
6682: LD_STRING D3aa-Bur-2
6684: PPUSH
6685: CALL_OW 88
// DialogueOff ;
6689: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
6693: LD_STRING M3
6695: PPUSH
6696: CALL_OW 337
// exit ;
6700: GO 6958
// end ; if GetSide ( building ) = 6 and Length ( comArray ) > 0 then
6702: LD_VAR 0 1
6706: PPUSH
6707: CALL_OW 255
6711: PUSH
6712: LD_INT 6
6714: EQUAL
6715: PUSH
6716: LD_EXP 2
6720: PPUSH
6721: CALL 53645 0 1
6725: PUSH
6726: LD_INT 0
6728: GREATER
6729: AND
6730: IFFALSE 6820
// begin if comArray [ 1 ] = kirovLab then
6732: LD_EXP 2
6736: PUSH
6737: LD_INT 1
6739: ARRAY
6740: PUSH
6741: LD_EXP 62
6745: EQUAL
6746: IFFALSE 6766
// AddComUpgradeLab ( comArray [ 1 ] , b_lab_weapon ) else
6748: LD_EXP 2
6752: PUSH
6753: LD_INT 1
6755: ARRAY
6756: PPUSH
6757: LD_INT 10
6759: PPUSH
6760: CALL_OW 207
6764: GO 6779
// AddComUpgrade ( comArray [ 1 ] ) ;
6766: LD_EXP 2
6770: PUSH
6771: LD_INT 1
6773: ARRAY
6774: PPUSH
6775: CALL_OW 206
// comArray := comArray diff comArray [ 1 ] ;
6779: LD_ADDR_EXP 2
6783: PUSH
6784: LD_EXP 2
6788: PUSH
6789: LD_EXP 2
6793: PUSH
6794: LD_INT 1
6796: ARRAY
6797: DIFF
6798: ST_TO_ADDR
// wait ( 0 0$1 ) ;
6799: LD_INT 35
6801: PPUSH
6802: CALL_OW 67
// AddComComplete ( kirovEngs , building ) ;
6806: LD_EXP 72
6810: PPUSH
6811: LD_VAR 0 1
6815: PPUSH
6816: CALL 21096 0 2
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_factory or GetBType ( building ) = b_workshop then
6820: LD_VAR 0 1
6824: PPUSH
6825: CALL_OW 255
6829: PUSH
6830: LD_INT 6
6832: EQUAL
6833: PUSH
6834: LD_VAR 0 1
6838: PPUSH
6839: CALL_OW 266
6843: PUSH
6844: LD_INT 3
6846: EQUAL
6847: AND
6848: PUSH
6849: LD_VAR 0 1
6853: PPUSH
6854: CALL_OW 266
6858: PUSH
6859: LD_INT 2
6861: EQUAL
6862: OR
6863: IFFALSE 6958
// begin un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) ;
6865: LD_ADDR_VAR 0 3
6869: PUSH
6870: LD_INT 22
6872: PUSH
6873: LD_INT 6
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: LD_INT 21
6882: PUSH
6883: LD_INT 3
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: PUSH
6890: LD_INT 30
6892: PUSH
6893: LD_INT 32
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: LIST
6904: PPUSH
6905: CALL_OW 69
6909: ST_TO_ADDR
// for i in un do
6910: LD_ADDR_VAR 0 2
6914: PUSH
6915: LD_VAR 0 3
6919: PUSH
6920: FOR_IN
6921: IFFALSE 6956
// AddComPlaceWeapon ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ Rand ( 1 , 2 ) ] ) ;
6923: LD_VAR 0 2
6927: PPUSH
6928: LD_INT 42
6930: PUSH
6931: LD_INT 43
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 1
6940: PPUSH
6941: LD_INT 2
6943: PPUSH
6944: CALL_OW 12
6948: ARRAY
6949: PPUSH
6950: CALL_OW 208
6954: GO 6920
6956: POP
6957: POP
// end ; end ;
6958: PPOPN 7
6960: END
// on BuildingStarted ( building , hum ) do var un , i ;
6961: LD_INT 0
6963: PPUSH
6964: PPUSH
// begin if GetSide ( building ) = 6 then
6965: LD_VAR 0 1
6969: PPUSH
6970: CALL_OW 255
6974: PUSH
6975: LD_INT 6
6977: EQUAL
6978: IFFALSE 6994
// AddComComplete ( kirovEngs , building ) ;
6980: LD_EXP 72
6984: PPUSH
6985: LD_VAR 0 1
6989: PPUSH
6990: CALL 21096 0 2
// end ; end_of_file
6994: PPOPN 4
6996: END
// export currentTeam , kirovBaseUnits , bukovMsg ; export counterEnable , counterIndex , ticks , convoyTime , timeToPrepareAttack , timeToArabAttack ; export kirovAttackVehicles ; export function MissionIntro ; var i , un , selectedPeople ; begin
6997: LD_INT 0
6999: PPUSH
7000: PPUSH
7001: PPUSH
7002: PPUSH
// if not debug then
7003: LD_EXP 3
7007: NOT
7008: IFFALSE 7014
// InGameOn ;
7010: CALL_OW 8
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
7014: LD_EXP 44
7018: PUSH
7019: LD_EXP 56
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: PPUSH
7028: CALL_OW 87
// convoyTime := [ 1 1$00 , 15 15$00 , 20 20$00 , 25 25$00 ] ;
7032: LD_ADDR_EXP 91
7036: PUSH
7037: LD_INT 2100
7039: PUSH
7040: LD_INT 31500
7042: PUSH
7043: LD_INT 42000
7045: PUSH
7046: LD_INT 52500
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: ST_TO_ADDR
// bukovMsg := [ D3a-RSol1-1 , D3b-RSol1-1 ] ;
7055: LD_ADDR_EXP 87
7059: PUSH
7060: LD_STRING D3a-RSol1-1
7062: PUSH
7063: LD_STRING D3b-RSol1-1
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: ST_TO_ADDR
// if not Belkov then
7070: LD_EXP 48
7074: NOT
7075: IFFALSE 7151
// begin Say ( Kurin , D1a-Kur-1 ) ;
7077: LD_EXP 56
7081: PPUSH
7082: LD_STRING D1a-Kur-1
7084: PPUSH
7085: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
7089: LD_EXP 44
7093: PPUSH
7094: LD_STRING D1a-Bur-1
7096: PPUSH
7097: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
7101: LD_EXP 56
7105: PPUSH
7106: LD_STRING D1a-Kur-2
7108: PPUSH
7109: CALL_OW 88
// Say ( Kurin , D1a-Kur-2a ) ;
7113: LD_EXP 56
7117: PPUSH
7118: LD_STRING D1a-Kur-2a
7120: PPUSH
7121: CALL_OW 88
// Say ( Kurin , D1a-Kur-2b ) ;
7125: LD_EXP 56
7129: PPUSH
7130: LD_STRING D1a-Kur-2b
7132: PPUSH
7133: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
7137: LD_EXP 44
7141: PPUSH
7142: LD_STRING D1a-Bur-2
7144: PPUSH
7145: CALL_OW 88
// end else
7149: GO 7187
// begin Say ( Kurin , D1b-Kur-1 ) ;
7151: LD_EXP 56
7155: PPUSH
7156: LD_STRING D1b-Kur-1
7158: PPUSH
7159: CALL_OW 88
// Say ( Belkov , D1b-Bel-1 ) ;
7163: LD_EXP 48
7167: PPUSH
7168: LD_STRING D1b-Bel-1
7170: PPUSH
7171: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
7175: LD_EXP 56
7179: PPUSH
7180: LD_STRING D1b-Kur-2
7182: PPUSH
7183: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
7187: LD_EXP 56
7191: PPUSH
7192: LD_STRING D2-Kur-1
7194: PPUSH
7195: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
7199: LD_EXP 44
7203: PPUSH
7204: LD_STRING D2-Bur-1
7206: PPUSH
7207: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
7211: LD_EXP 56
7215: PPUSH
7216: LD_STRING D2-Kur-2
7218: PPUSH
7219: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
7223: LD_EXP 44
7227: PPUSH
7228: LD_STRING D2-Bur-2
7230: PPUSH
7231: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
7235: LD_EXP 56
7239: PPUSH
7240: LD_STRING D2-Kur-3
7242: PPUSH
7243: CALL_OW 88
// PrepareAmericansMissionIntro ;
7247: CALL 2917 0 0
// SetAttitude ( 1 , 6 , att_friend , true ) ;
7251: LD_INT 1
7253: PPUSH
7254: LD_INT 6
7256: PPUSH
7257: LD_INT 1
7259: PPUSH
7260: LD_INT 1
7262: PPUSH
7263: CALL_OW 80
// RevealFogArea ( 3 , RevealMapPartArea ) ;
7267: LD_INT 3
7269: PPUSH
7270: LD_INT 5
7272: PPUSH
7273: CALL_OW 332
// CenterNowOnUnits ( [ Popov , Gaydar ] ) ;
7277: LD_EXP 57
7281: PUSH
7282: LD_EXP 67
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PPUSH
7291: CALL_OW 87
// wait ( 0 0$3 ) ;
7295: LD_INT 105
7297: PPUSH
7298: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
7302: LD_EXP 57
7306: PPUSH
7307: LD_STRING D2-Pop-3
7309: PPUSH
7310: CALL_OW 94
// wait ( 0 0$0.3 ) ;
7314: LD_INT 10
7316: PPUSH
7317: CALL_OW 67
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
7321: LD_EXP 44
7325: PUSH
7326: LD_EXP 56
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: PPUSH
7335: CALL_OW 87
// Say ( Kurin , D2-Kur-4 ) ;
7339: LD_EXP 56
7343: PPUSH
7344: LD_STRING D2-Kur-4
7346: PPUSH
7347: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
7351: LD_EXP 44
7355: PPUSH
7356: LD_STRING D2-Bur-4
7358: PPUSH
7359: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
7363: LD_EXP 56
7367: PPUSH
7368: LD_STRING D2-Kur-5
7370: PPUSH
7371: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
7375: LD_EXP 44
7379: PPUSH
7380: LD_STRING D2-Bur-5
7382: PPUSH
7383: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
7387: LD_EXP 56
7391: PPUSH
7392: LD_STRING D2-Kur-6
7394: PPUSH
7395: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
7399: LD_EXP 44
7403: PPUSH
7404: LD_STRING D2-Bur-4
7406: PPUSH
7407: CALL_OW 88
// kirovBaseUnits = otherKirovUnits ;
7411: LD_ADDR_EXP 86
7415: PUSH
7416: LD_EXP 58
7420: ST_TO_ADDR
// kirovBaseUnits = kirovBaseUnits ^ otherBeriaUnits ;
7421: LD_ADDR_EXP 86
7425: PUSH
7426: LD_EXP 86
7430: PUSH
7431: LD_EXP 52
7435: ADD
7436: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 3 , 3 , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , Belkov , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ kirovBaseUnits ^ [ sel_dont_change_class , sel_not_changeable , Kurin , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
7437: LD_ADDR_VAR 0 4
7441: PUSH
7442: LD_STRING text
7444: PPUSH
7445: LD_INT 3
7447: PPUSH
7448: LD_INT 3
7450: PPUSH
7451: LD_INT -5
7453: PUSH
7454: LD_EXP 44
7458: PUSH
7459: LD_EXP 45
7463: PUSH
7464: LD_EXP 47
7468: PUSH
7469: LD_EXP 46
7473: PUSH
7474: LD_EXP 48
7478: PUSH
7479: LD_INT -6
7481: PUSH
7482: LD_INT -2
7484: PUSH
7485: LD_INT -3
7487: PUSH
7488: LD_INT -5
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: PUSH
7503: LD_EXP 86
7507: ADD
7508: PUSH
7509: LD_INT -6
7511: PUSH
7512: LD_INT -4
7514: PUSH
7515: LD_EXP 56
7519: PUSH
7520: LD_EXP 57
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: ADD
7531: PPUSH
7532: LD_INT 1
7534: PUSH
7535: LD_INT 3
7537: PUSH
7538: LD_INT 2
7540: PUSH
7541: LD_INT 1
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PUSH
7548: LD_INT 4
7550: PUSH
7551: LD_INT 1
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: PPUSH
7564: CALL_OW 42
7568: ST_TO_ADDR
// SetSide ( kirovBaseUnits , 6 ) ;
7569: LD_EXP 86
7573: PPUSH
7574: LD_INT 6
7576: PPUSH
7577: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
7581: LD_VAR 0 4
7585: PPUSH
7586: LD_INT 3
7588: PPUSH
7589: CALL_OW 235
// AddComMoveXY ( Popov , 135 , 67 ) ;
7593: LD_EXP 57
7597: PPUSH
7598: LD_INT 135
7600: PPUSH
7601: LD_INT 67
7603: PPUSH
7604: CALL_OW 171
// AddComMoveXY ( Gaydar , 209 , 164 ) ;
7608: LD_EXP 67
7612: PPUSH
7613: LD_INT 209
7615: PPUSH
7616: LD_INT 164
7618: PPUSH
7619: CALL_OW 171
// kirovBarracks := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) ;
7623: LD_ADDR_EXP 63
7627: PUSH
7628: LD_INT 22
7630: PUSH
7631: LD_INT 6
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_INT 30
7640: PUSH
7641: LD_INT 4
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: PPUSH
7652: CALL_OW 69
7656: ST_TO_ADDR
// kirovBaseUnits := kirovBaseUnits diff selectedPeople ;
7657: LD_ADDR_EXP 86
7661: PUSH
7662: LD_EXP 86
7666: PUSH
7667: LD_VAR 0 4
7671: DIFF
7672: ST_TO_ADDR
// SetClass ( kirovBaseUnits [ 1 ] , 2 ) ;
7673: LD_EXP 86
7677: PUSH
7678: LD_INT 1
7680: ARRAY
7681: PPUSH
7682: LD_INT 2
7684: PPUSH
7685: CALL_OW 336
// for i := 2 to 3 do
7689: LD_ADDR_VAR 0 2
7693: PUSH
7694: DOUBLE
7695: LD_INT 2
7697: DEC
7698: ST_TO_ADDR
7699: LD_INT 3
7701: PUSH
7702: FOR_TO
7703: IFFALSE 7725
// SetClass ( kirovBaseUnits [ i ] , 3 ) ;
7705: LD_EXP 86
7709: PUSH
7710: LD_VAR 0 2
7714: ARRAY
7715: PPUSH
7716: LD_INT 3
7718: PPUSH
7719: CALL_OW 336
7723: GO 7702
7725: POP
7726: POP
// for un in selectedPeople do
7727: LD_ADDR_VAR 0 3
7731: PUSH
7732: LD_VAR 0 4
7736: PUSH
7737: FOR_IN
7738: IFFALSE 7751
// ComExitBuilding ( un ) ;
7740: LD_VAR 0 3
7744: PPUSH
7745: CALL_OW 122
7749: GO 7737
7751: POP
7752: POP
// currentTeam := selectedPeople union [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] ;
7753: LD_ADDR_EXP 85
7757: PUSH
7758: LD_VAR 0 4
7762: PUSH
7763: LD_EXP 44
7767: PUSH
7768: LD_EXP 45
7772: PUSH
7773: LD_EXP 47
7777: PUSH
7778: LD_EXP 48
7782: PUSH
7783: LD_EXP 46
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: UNION
7795: ST_TO_ADDR
// AddComMoveXY ( currentTeam , 113 , 97 ) ;
7796: LD_EXP 85
7800: PPUSH
7801: LD_INT 113
7803: PPUSH
7804: LD_INT 97
7806: PPUSH
7807: CALL_OW 171
// for un in kirovBaseUnits do
7811: LD_ADDR_VAR 0 3
7815: PUSH
7816: LD_EXP 86
7820: PUSH
7821: FOR_IN
7822: IFFALSE 7859
// begin if IsInUnit ( un ) = 0 then
7824: LD_VAR 0 3
7828: PPUSH
7829: CALL_OW 310
7833: PUSH
7834: LD_INT 0
7836: EQUAL
7837: IFFALSE 7857
// ComEnterUnit ( un , kirovBarracks [ 1 ] ) ;
7839: LD_VAR 0 3
7843: PPUSH
7844: LD_EXP 63
7848: PUSH
7849: LD_INT 1
7851: ARRAY
7852: PPUSH
7853: CALL_OW 120
// end ;
7857: GO 7821
7859: POP
7860: POP
// ChangeMissionObjectives ( M1 ) ;
7861: LD_STRING M1
7863: PPUSH
7864: CALL_OW 337
// Query ( QReadyInfo ) ;
7868: LD_STRING QReadyInfo
7870: PPUSH
7871: CALL_OW 97
// SaveForQuickRestart ;
7875: CALL_OW 22
// wait ( 0 0$8 ) ;
7879: LD_INT 280
7881: PPUSH
7882: CALL_OW 67
// InGameOff ;
7886: CALL_OW 9
// spawnCrates := true ;
7890: LD_ADDR_EXP 13
7894: PUSH
7895: LD_INT 1
7897: ST_TO_ADDR
// for un in kirovBaseUnits do
7898: LD_ADDR_VAR 0 3
7902: PUSH
7903: LD_EXP 86
7907: PUSH
7908: FOR_IN
7909: IFFALSE 7962
// begin if IsInUnit ( un ) = 0 and not GetClass ( un ) = 2 then
7911: LD_VAR 0 3
7915: PPUSH
7916: CALL_OW 310
7920: PUSH
7921: LD_INT 0
7923: EQUAL
7924: PUSH
7925: LD_VAR 0 3
7929: PPUSH
7930: CALL_OW 257
7934: PUSH
7935: LD_INT 2
7937: EQUAL
7938: NOT
7939: AND
7940: IFFALSE 7960
// ComEnterUnit ( un , kirovBarracks [ 2 ] ) ;
7942: LD_VAR 0 3
7946: PPUSH
7947: LD_EXP 63
7951: PUSH
7952: LD_INT 2
7954: ARRAY
7955: PPUSH
7956: CALL_OW 120
// end ;
7960: GO 7908
7962: POP
7963: POP
// UpgradeKirovBase ;
7964: CALL 2098 0 0
// end ;
7968: LD_VAR 0 1
7972: RET
// every 0 0$1 do
7973: GO 7975
7975: DISABLE
// begin timeToArabAttack = timeToArabAttack - 0 0$01 ;
7976: LD_ADDR_EXP 93
7980: PUSH
7981: LD_EXP 93
7985: PUSH
7986: LD_INT 35
7988: MINUS
7989: ST_TO_ADDR
// end ;
7990: END
// every 0 0$1 trigger counterEnable do var veh , hum , i ;
7991: LD_EXP 88
7995: IFFALSE 8379
7997: GO 7999
7999: DISABLE
8000: LD_INT 0
8002: PPUSH
8003: PPUSH
8004: PPUSH
// begin enable ;
8005: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) ;
8006: LD_ADDR_VAR 0 1
8010: PUSH
8011: LD_INT 22
8013: PUSH
8014: LD_INT 3
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: PUSH
8021: LD_INT 21
8023: PUSH
8024: LD_INT 2
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: PUSH
8031: LD_INT 3
8033: PUSH
8034: LD_INT 34
8036: PUSH
8037: LD_INT 51
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: LIST
8052: PPUSH
8053: CALL_OW 69
8057: ST_TO_ADDR
// hum = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + kurinVehNeeded ;
8058: LD_ADDR_VAR 0 2
8062: PUSH
8063: LD_INT 22
8065: PUSH
8066: LD_INT 3
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PUSH
8073: LD_INT 21
8075: PUSH
8076: LD_INT 1
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PPUSH
8087: CALL_OW 69
8091: PUSH
8092: LD_EXP 34
8096: PLUS
8097: ST_TO_ADDR
// ticks = ticks + 0 0$01 ;
8098: LD_ADDR_EXP 90
8102: PUSH
8103: LD_EXP 90
8107: PUSH
8108: LD_INT 35
8110: PLUS
8111: ST_TO_ADDR
// VehNeeded = hum - veh ;
8112: LD_ADDR_EXP 39
8116: PUSH
8117: LD_VAR 0 2
8121: PUSH
8122: LD_VAR 0 1
8126: MINUS
8127: ST_TO_ADDR
// if VehNeeded < 0 then
8128: LD_EXP 39
8132: PUSH
8133: LD_INT 0
8135: LESS
8136: IFFALSE 8148
// enoughVehsForKirov = true else
8138: LD_ADDR_EXP 95
8142: PUSH
8143: LD_INT 1
8145: ST_TO_ADDR
8146: GO 8156
// enoughVehsForKirov = false ;
8148: LD_ADDR_EXP 95
8152: PUSH
8153: LD_INT 0
8155: ST_TO_ADDR
// case counterIndex of 1 :
8156: LD_EXP 89
8160: PUSH
8161: LD_INT 1
8163: DOUBLE
8164: EQUAL
8165: IFTRUE 8169
8167: GO 8252
8169: POP
// begin if VehNeeded <= 0 then
8170: LD_EXP 39
8174: PUSH
8175: LD_INT 0
8177: LESSEQUAL
8178: IFFALSE 8206
// display_strings = [ #Ru03-5a ] ^ [ #Ru03-4 , timeToPrepareAttack ] else
8180: LD_ADDR_OWVAR 47
8184: PUSH
8185: LD_STRING #Ru03-5a
8187: PUSH
8188: EMPTY
8189: LIST
8190: PUSH
8191: LD_STRING #Ru03-4
8193: PUSH
8194: LD_EXP 92
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: ADD
8203: ST_TO_ADDR
8204: GO 8236
// display_strings = [ #Ru03-5 , VehNeeded ] ^ [ #Ru03-4 , timeToPrepareAttack ] ;
8206: LD_ADDR_OWVAR 47
8210: PUSH
8211: LD_STRING #Ru03-5
8213: PUSH
8214: LD_EXP 39
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: PUSH
8223: LD_STRING #Ru03-4
8225: PUSH
8226: LD_EXP 92
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: ADD
8235: ST_TO_ADDR
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ;
8236: LD_ADDR_EXP 92
8240: PUSH
8241: LD_EXP 92
8245: PUSH
8246: LD_INT 35
8248: MINUS
8249: ST_TO_ADDR
// end ; 2 :
8250: GO 8379
8252: LD_INT 2
8254: DOUBLE
8255: EQUAL
8256: IFTRUE 8260
8258: GO 8294
8260: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
8261: LD_ADDR_OWVAR 47
8265: PUSH
8266: LD_STRING #Ru03-1
8268: PUSH
8269: LD_EXP 23
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
8278: LD_ADDR_EXP 23
8282: PUSH
8283: LD_EXP 23
8287: PUSH
8288: LD_INT 35
8290: MINUS
8291: ST_TO_ADDR
// end ; 3 :
8292: GO 8379
8294: LD_INT 3
8296: DOUBLE
8297: EQUAL
8298: IFTRUE 8302
8300: GO 8336
8302: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
8303: LD_ADDR_OWVAR 47
8307: PUSH
8308: LD_STRING #Ru03-2
8310: PUSH
8311: LD_EXP 23
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
8320: LD_ADDR_EXP 23
8324: PUSH
8325: LD_EXP 23
8329: PUSH
8330: LD_INT 35
8332: MINUS
8333: ST_TO_ADDR
// end ; 4 :
8334: GO 8379
8336: LD_INT 4
8338: DOUBLE
8339: EQUAL
8340: IFTRUE 8344
8342: GO 8378
8344: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
8345: LD_ADDR_OWVAR 47
8349: PUSH
8350: LD_STRING #Ru03-3
8352: PUSH
8353: LD_EXP 22
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
8362: LD_ADDR_EXP 22
8366: PUSH
8367: LD_EXP 22
8371: PUSH
8372: LD_INT 35
8374: MINUS
8375: ST_TO_ADDR
// end ; end ;
8376: GO 8379
8378: POP
// end ;
8379: PPOPN 3
8381: END
// every 0 0$1 do
8382: GO 8384
8384: DISABLE
// begin enable ;
8385: ENABLE
// if tick = convoyTime [ 1 ] then
8386: LD_OWVAR 1
8390: PUSH
8391: LD_EXP 91
8395: PUSH
8396: LD_INT 1
8398: ARRAY
8399: EQUAL
8400: IFFALSE 8659
// begin SayRadio ( Bukov , bukovMsg [ 1 ] ) ;
8402: LD_EXP 68
8406: PPUSH
8407: LD_EXP 87
8411: PUSH
8412: LD_INT 1
8414: ARRAY
8415: PPUSH
8416: CALL_OW 94
// PrepareAmericanConvoy ( amConvoyGroups [ 1 ] [ 1 ] , amConvoyGroups [ 1 ] [ 2 ] , amConvoyGroups [ 1 ] [ 3 ] , amConvoyGroups [ 1 ] [ 4 ] , amConvoyGroups [ 1 ] [ 5 ] , AmTroopsSpawn ) ;
8420: LD_EXP 78
8424: PUSH
8425: LD_INT 1
8427: ARRAY
8428: PUSH
8429: LD_INT 1
8431: ARRAY
8432: PPUSH
8433: LD_EXP 78
8437: PUSH
8438: LD_INT 1
8440: ARRAY
8441: PUSH
8442: LD_INT 2
8444: ARRAY
8445: PPUSH
8446: LD_EXP 78
8450: PUSH
8451: LD_INT 1
8453: ARRAY
8454: PUSH
8455: LD_INT 3
8457: ARRAY
8458: PPUSH
8459: LD_EXP 78
8463: PUSH
8464: LD_INT 1
8466: ARRAY
8467: PUSH
8468: LD_INT 4
8470: ARRAY
8471: PPUSH
8472: LD_EXP 78
8476: PUSH
8477: LD_INT 1
8479: ARRAY
8480: PUSH
8481: LD_INT 5
8483: ARRAY
8484: PPUSH
8485: LD_INT 6
8487: PPUSH
8488: CALL 4730 0 6
// if bukovMsg [ 1 ] = D3a-RSol1-1 then
8492: LD_EXP 87
8496: PUSH
8497: LD_INT 1
8499: ARRAY
8500: PUSH
8501: LD_STRING D3a-RSol1-1
8503: EQUAL
8504: IFFALSE 8608
// begin SayRadio ( Burlak , D3a-Bur-1 ) ;
8506: LD_EXP 44
8510: PPUSH
8511: LD_STRING D3a-Bur-1
8513: PPUSH
8514: CALL_OW 94
// if IsOk ( Gnyevko ) then
8518: LD_EXP 45
8522: PPUSH
8523: CALL_OW 302
8527: IFFALSE 8541
// Say ( Gnyevko , D3b-Gny-1 ) ;
8529: LD_EXP 45
8533: PPUSH
8534: LD_STRING D3b-Gny-1
8536: PPUSH
8537: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
8541: LD_EXP 44
8545: PPUSH
8546: LD_STRING D3b-Bur-1
8548: PPUSH
8549: CALL_OW 88
// if IsOK ( Kovalyuk ) then
8553: LD_EXP 47
8557: PPUSH
8558: CALL_OW 302
8562: IFFALSE 8576
// Say ( Kovalyuk , D3b-Kov-1 ) ;
8564: LD_EXP 47
8568: PPUSH
8569: LD_STRING D3b-Kov-1
8571: PPUSH
8572: CALL_OW 88
// SayRadio ( Bukov , D3b-Rsol1-2 ) ;
8576: LD_EXP 68
8580: PPUSH
8581: LD_STRING D3b-Rsol1-2
8583: PPUSH
8584: CALL_OW 94
// bukovMsg := bukovMsg diff bukovMsg [ 1 ] ;
8588: LD_ADDR_EXP 87
8592: PUSH
8593: LD_EXP 87
8597: PUSH
8598: LD_EXP 87
8602: PUSH
8603: LD_INT 1
8605: ARRAY
8606: DIFF
8607: ST_TO_ADDR
// end ; PrepareAttackOnRus ( ) ;
8608: CALL 5594 0 0
// wait ( 0 0$1 ) ;
8612: LD_INT 35
8614: PPUSH
8615: CALL_OW 67
// amConvoyGroups := amConvoyGroups diff amConvoyGroups [ 1 ] ;
8619: LD_ADDR_EXP 78
8623: PUSH
8624: LD_EXP 78
8628: PUSH
8629: LD_EXP 78
8633: PUSH
8634: LD_INT 1
8636: ARRAY
8637: DIFF
8638: ST_TO_ADDR
// convoyTime := convoyTime diff convoyTime [ 1 ] ;
8639: LD_ADDR_EXP 91
8643: PUSH
8644: LD_EXP 91
8648: PUSH
8649: LD_EXP 91
8653: PUSH
8654: LD_INT 1
8656: ARRAY
8657: DIFF
8658: ST_TO_ADDR
// end ; end ;
8659: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
8660: LD_INT 78
8662: PPUSH
8663: LD_INT 112
8665: PPUSH
8666: LD_INT 3
8668: PPUSH
8669: CALL_OW 440
8673: IFFALSE 8727
8675: GO 8677
8677: DISABLE
// begin CenterOnXY ( 78 , 112 ) ;
8678: LD_INT 78
8680: PPUSH
8681: LD_INT 112
8683: PPUSH
8684: CALL_OW 84
// DialogueOn ;
8688: CALL_OW 6
// SayRadio ( Burlak , D2a-Bur-1 ) ;
8692: LD_EXP 44
8696: PPUSH
8697: LD_STRING D2a-Bur-1
8699: PPUSH
8700: CALL_OW 94
// SayRadio ( Kurin , D2a-Kur-1 ) ;
8704: LD_EXP 56
8708: PPUSH
8709: LD_STRING D2a-Kur-1
8711: PPUSH
8712: CALL_OW 94
// DialogueOff ;
8716: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8720: LD_STRING M2
8722: PPUSH
8723: CALL_OW 337
// end ;
8727: END
// every 0 0$1 trigger UnitFilter ( amVehs , [ f_not , [ f_lives , 700 ] ] ) or UnitFilter ( amIntroUnits , [ f_not , [ f_lives , 700 ] ] ) do var i ;
8728: LD_EXP 83
8732: PPUSH
8733: LD_INT 3
8735: PUSH
8736: LD_INT 24
8738: PUSH
8739: LD_INT 700
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PPUSH
8750: CALL_OW 72
8754: PUSH
8755: LD_EXP 76
8759: PPUSH
8760: LD_INT 3
8762: PUSH
8763: LD_INT 24
8765: PUSH
8766: LD_INT 700
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PPUSH
8777: CALL_OW 72
8781: OR
8782: IFFALSE 9029
8784: GO 8786
8786: DISABLE
8787: LD_INT 0
8789: PPUSH
// begin enable ;
8790: ENABLE
// for i := 1 to amVehs do
8791: LD_ADDR_VAR 0 1
8795: PUSH
8796: DOUBLE
8797: LD_INT 1
8799: DEC
8800: ST_TO_ADDR
8801: LD_EXP 83
8805: PUSH
8806: FOR_TO
8807: IFFALSE 8850
// begin if GetLives ( amVehs [ i ] ) <= 700 then
8809: LD_EXP 83
8813: PUSH
8814: LD_VAR 0 1
8818: ARRAY
8819: PPUSH
8820: CALL_OW 256
8824: PUSH
8825: LD_INT 700
8827: LESSEQUAL
8828: IFFALSE 8848
// ComMoveToArea ( amVehs [ i ] , amRetreatArea ) ;
8830: LD_EXP 83
8834: PUSH
8835: LD_VAR 0 1
8839: ARRAY
8840: PPUSH
8841: LD_INT 10
8843: PPUSH
8844: CALL_OW 113
// end ;
8848: GO 8806
8850: POP
8851: POP
// for i := 1 to amIntroUnits and GetLives ( i ) <= 700 do
8852: LD_ADDR_VAR 0 1
8856: PUSH
8857: DOUBLE
8858: LD_INT 1
8860: DEC
8861: ST_TO_ADDR
8862: LD_EXP 76
8866: PUSH
8867: LD_VAR 0 1
8871: PPUSH
8872: CALL_OW 256
8876: PUSH
8877: LD_INT 700
8879: LESSEQUAL
8880: AND
8881: PUSH
8882: FOR_TO
8883: IFFALSE 8926
// begin if GetLives ( amIntroUnits [ i ] ) <= 700 then
8885: LD_EXP 76
8889: PUSH
8890: LD_VAR 0 1
8894: ARRAY
8895: PPUSH
8896: CALL_OW 256
8900: PUSH
8901: LD_INT 700
8903: LESSEQUAL
8904: IFFALSE 8924
// ComMoveToArea ( amIntroUnits [ i ] , amRetreatArea ) ;
8906: LD_EXP 76
8910: PUSH
8911: LD_VAR 0 1
8915: ARRAY
8916: PPUSH
8917: LD_INT 10
8919: PPUSH
8920: CALL_OW 113
// end ;
8924: GO 8882
8926: POP
8927: POP
// for i in amIntroUnits do
8928: LD_ADDR_VAR 0 1
8932: PUSH
8933: LD_EXP 76
8937: PUSH
8938: FOR_IN
8939: IFFALSE 8984
// begin if IsInArea ( i , amRetreatArea ) and GetLives ( i ) <= 700 then
8941: LD_VAR 0 1
8945: PPUSH
8946: LD_INT 10
8948: PPUSH
8949: CALL_OW 308
8953: PUSH
8954: LD_VAR 0 1
8958: PPUSH
8959: CALL_OW 256
8963: PUSH
8964: LD_INT 700
8966: LESSEQUAL
8967: AND
8968: IFFALSE 8982
// SetLives ( i , 1000 ) ;
8970: LD_VAR 0 1
8974: PPUSH
8975: LD_INT 1000
8977: PPUSH
8978: CALL_OW 234
// end ;
8982: GO 8938
8984: POP
8985: POP
// for i in amVehs do
8986: LD_ADDR_VAR 0 1
8990: PUSH
8991: LD_EXP 83
8995: PUSH
8996: FOR_IN
8997: IFFALSE 9027
// begin if IsInArea ( i , amRetreatArea ) then
8999: LD_VAR 0 1
9003: PPUSH
9004: LD_INT 10
9006: PPUSH
9007: CALL_OW 308
9011: IFFALSE 9025
// SetLives ( i , 1000 ) ;
9013: LD_VAR 0 1
9017: PPUSH
9018: LD_INT 1000
9020: PPUSH
9021: CALL_OW 234
// end ;
9025: GO 8996
9027: POP
9028: POP
// end ;
9029: PPOPN 1
9031: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
9032: LD_EXP 18
9036: NOT
9037: IFFALSE 9245
9039: GO 9041
9041: DISABLE
9042: LD_INT 0
9044: PPUSH
// begin enable ;
9045: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
9046: LD_ADDR_VAR 0 1
9050: PUSH
9051: LD_INT 22
9053: PUSH
9054: LD_INT 3
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: PUSH
9061: LD_INT 21
9063: PUSH
9064: LD_INT 2
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: PUSH
9071: LD_INT 23
9073: PUSH
9074: LD_INT 3
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: PUSH
9081: LD_INT 2
9083: PUSH
9084: LD_INT 31
9086: PUSH
9087: LD_INT 21
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: PUSH
9094: LD_INT 31
9096: PUSH
9097: LD_INT 23
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: LIST
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: PPUSH
9115: CALL_OW 69
9119: PUSH
9120: FOR_IN
9121: IFFALSE 9243
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
9123: LD_VAR 0 1
9127: PPUSH
9128: LD_INT 48
9130: PPUSH
9131: LD_INT 81
9133: PPUSH
9134: CALL_OW 297
9138: PUSH
9139: LD_INT 7
9141: LESS
9142: IFFALSE 9241
// begin dialog_track = true ;
9144: LD_ADDR_EXP 18
9148: PUSH
9149: LD_INT 1
9151: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
9152: LD_INT 48
9154: PPUSH
9155: LD_INT 81
9157: PPUSH
9158: CALL_OW 86
// DialogueOn ;
9162: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
9166: LD_EXP 44
9170: PPUSH
9171: LD_STRING D5a-Bur-1
9173: PPUSH
9174: CALL_OW 88
// DialogueOff ;
9178: CALL_OW 7
// if GetTech ( 82 , 3 ) = state_disabled then
9182: LD_INT 82
9184: PPUSH
9185: LD_INT 3
9187: PPUSH
9188: CALL_OW 321
9192: PUSH
9193: LD_INT 0
9195: EQUAL
9196: IFFALSE 9211
// SetTech ( 82 , 3 , state_enabled ) ;
9198: LD_INT 82
9200: PPUSH
9201: LD_INT 3
9203: PPUSH
9204: LD_INT 1
9206: PPUSH
9207: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
9211: LD_INT 84
9213: PPUSH
9214: LD_INT 3
9216: PPUSH
9217: LD_INT 1
9219: PPUSH
9220: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
9224: LD_INT 16
9226: PPUSH
9227: LD_INT 3
9229: PPUSH
9230: LD_INT 1
9232: PPUSH
9233: CALL_OW 324
// exit ;
9237: POP
9238: POP
9239: GO 9245
// end ;
9241: GO 9120
9243: POP
9244: POP
// end ;
9245: PPOPN 1
9247: END
// every 5 5$30 do
9248: GO 9250
9250: DISABLE
// begin PrepareScholtze ;
9251: CALL 2799 0 0
// wait ( 0 0$2 ) ;
9255: LD_INT 70
9257: PPUSH
9258: CALL_OW 67
// DialogueOn ;
9262: CALL_OW 6
// SayNoFaceRadio ( Scholtze2 , D4-Sch-1 ) ;
9266: LD_EXP 70
9270: PPUSH
9271: LD_STRING D4-Sch-1
9273: PPUSH
9274: CALL 53773 0 2
// SayRadio ( Burlak , D4-Bur-1 ) ;
9278: LD_EXP 44
9282: PPUSH
9283: LD_STRING D4-Bur-1
9285: PPUSH
9286: CALL_OW 94
// DialogueOff ;
9290: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
9294: LD_STRING M4
9296: PPUSH
9297: CALL_OW 337
// ComHold ( Scholtze ) ;
9301: LD_EXP 69
9305: PPUSH
9306: CALL_OW 140
// scholtzeSpawned = true ;
9310: LD_ADDR_EXP 14
9314: PUSH
9315: LD_INT 1
9317: ST_TO_ADDR
// end ;
9318: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and scholtzeSpawned and not scholtzeSaved do
9319: LD_INT 3
9321: PPUSH
9322: LD_EXP 69
9326: PPUSH
9327: CALL_OW 292
9331: PUSH
9332: LD_EXP 14
9336: AND
9337: PUSH
9338: LD_EXP 15
9342: NOT
9343: AND
9344: IFFALSE 9510
9346: GO 9348
9348: DISABLE
// begin scholtzeSaved = true ;
9349: LD_ADDR_EXP 15
9353: PUSH
9354: LD_INT 1
9356: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
9357: LD_EXP 69
9361: PPUSH
9362: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
9366: LD_EXP 69
9370: PPUSH
9371: LD_INT 3
9373: PPUSH
9374: CALL_OW 235
// DialogueOn ;
9378: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
9382: LD_EXP 69
9386: PPUSH
9387: LD_STRING D4a-Sch-1
9389: PPUSH
9390: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
9394: LD_EXP 44
9398: PPUSH
9399: LD_STRING D4a-Bur-1
9401: PPUSH
9402: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
9406: LD_EXP 69
9410: PPUSH
9411: LD_STRING D4a-Sch-2
9413: PPUSH
9414: CALL_OW 88
// DialogueOff ;
9418: CALL_OW 7
// ChangeMissionObjectives ( MScholtzeOut ) ;
9422: LD_STRING MScholtzeOut
9424: PPUSH
9425: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
9429: LD_INT 49
9431: PPUSH
9432: LD_INT 3
9434: PPUSH
9435: LD_INT 1
9437: PPUSH
9438: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
9442: LD_INT 51
9444: PPUSH
9445: LD_INT 3
9447: PPUSH
9448: LD_INT 1
9450: PPUSH
9451: CALL_OW 322
// if GetTech ( 82 , 3 ) = state_disabled then
9455: LD_INT 82
9457: PPUSH
9458: LD_INT 3
9460: PPUSH
9461: CALL_OW 321
9465: PUSH
9466: LD_INT 0
9468: EQUAL
9469: IFFALSE 9484
// SetTech ( 82 , 3 , state_enabled ) ;
9471: LD_INT 82
9473: PPUSH
9474: LD_INT 3
9476: PPUSH
9477: LD_INT 1
9479: PPUSH
9480: CALL_OW 322
// SetTech ( 83 , 3 , state_enabled ) ;
9484: LD_INT 83
9486: PPUSH
9487: LD_INT 3
9489: PPUSH
9490: LD_INT 1
9492: PPUSH
9493: CALL_OW 322
// SetRestrict ( b_ext_noncombat , 3 , state_enabled ) ;
9497: LD_INT 19
9499: PPUSH
9500: LD_INT 3
9502: PPUSH
9503: LD_INT 1
9505: PPUSH
9506: CALL_OW 324
// end ;
9510: END
// every 5 5$0 trigger scholtzeSpawned and not scholtzeSaved do
9511: LD_EXP 14
9515: PUSH
9516: LD_EXP 15
9520: NOT
9521: AND
9522: IFFALSE 9607
9524: GO 9526
9526: DISABLE
// begin DialogueOn ;
9527: CALL_OW 6
// SayNoFaceRadio ( Scholtze , D4b-Sch-1 ) ;
9531: LD_EXP 69
9535: PPUSH
9536: LD_STRING D4b-Sch-1
9538: PPUSH
9539: CALL 53773 0 2
// SayRadioNoFace ( Scholtze2 , D4b-Sol1-1 ) ;
9543: LD_EXP 70
9547: PPUSH
9548: LD_STRING D4b-Sol1-1
9550: PPUSH
9551: CALL_OW 586
// SayRadioNoFace ( Scholtze2 , D4b-Sol2-1 ) ;
9555: LD_EXP 70
9559: PPUSH
9560: LD_STRING D4b-Sol2-1
9562: PPUSH
9563: CALL_OW 586
// SayNoFaceRadio ( Scholtze , D4b-Sch-2 ) ;
9567: LD_EXP 69
9571: PPUSH
9572: LD_STRING D4b-Sch-2
9574: PPUSH
9575: CALL 53773 0 2
// Say ( Burlak , D4b-Bur-2 ) ;
9579: LD_EXP 44
9583: PPUSH
9584: LD_STRING D4b-Bur-2
9586: PPUSH
9587: CALL_OW 88
// DialogueOff ;
9591: CALL_OW 7
// SetLives ( Scholtze , 0 ) ;
9595: LD_EXP 69
9599: PPUSH
9600: LD_INT 0
9602: PPUSH
9603: CALL_OW 234
// end ;
9607: END
// every 0 0$30 trigger spawnCrates do
9608: LD_EXP 13
9612: IFFALSE 9639
9614: GO 9616
9616: DISABLE
// begin enable ;
9617: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesSpawn , true ) ;
9618: LD_INT 3
9620: PPUSH
9621: LD_INT 5
9623: PPUSH
9624: CALL_OW 12
9628: PPUSH
9629: LD_INT 15
9631: PPUSH
9632: LD_INT 1
9634: PPUSH
9635: CALL_OW 55
// end ;
9639: END
// every 1 trigger not meetNearOmicronBase do var i , unit , randDialog , currentDist , tmpDist , nearUnit , index ;
9640: LD_EXP 27
9644: NOT
9645: IFFALSE 9940
9647: GO 9649
9649: DISABLE
9650: LD_INT 0
9652: PPUSH
9653: PPUSH
9654: PPUSH
9655: PPUSH
9656: PPUSH
9657: PPUSH
9658: PPUSH
// begin enable ;
9659: ENABLE
// for unit in FilterUnitsInArea ( areaOmicron , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
9660: LD_ADDR_VAR 0 2
9664: PUSH
9665: LD_INT 8
9667: PPUSH
9668: LD_INT 22
9670: PUSH
9671: LD_INT 1
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 2
9680: PUSH
9681: LD_INT 21
9683: PUSH
9684: LD_INT 1
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 21
9693: PUSH
9694: LD_INT 2
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: PUSH
9701: LD_INT 21
9703: PUSH
9704: LD_INT 3
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: PPUSH
9721: CALL_OW 70
9725: PUSH
9726: FOR_IN
9727: IFFALSE 9938
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
9729: LD_VAR 0 2
9733: PPUSH
9734: LD_INT 22
9736: PUSH
9737: LD_INT 3
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 2
9746: PUSH
9747: LD_INT 21
9749: PUSH
9750: LD_INT 1
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PUSH
9757: LD_INT 21
9759: PUSH
9760: LD_INT 2
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: LIST
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PPUSH
9776: CALL_OW 69
9780: PPUSH
9781: LD_VAR 0 2
9785: PPUSH
9786: CALL_OW 74
9790: PPUSH
9791: CALL_OW 296
9795: PUSH
9796: LD_INT 17
9798: LESS
9799: IFFALSE 9936
// begin ComMoveXY ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) , 114 , 98 ) ;
9801: LD_INT 22
9803: PUSH
9804: LD_INT 3
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: LD_INT 2
9813: PUSH
9814: LD_INT 21
9816: PUSH
9817: LD_INT 1
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PUSH
9824: LD_INT 21
9826: PUSH
9827: LD_INT 2
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: LIST
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PPUSH
9843: CALL_OW 69
9847: PPUSH
9848: LD_VAR 0 2
9852: PPUSH
9853: CALL_OW 74
9857: PPUSH
9858: LD_INT 114
9860: PPUSH
9861: LD_INT 98
9863: PPUSH
9864: CALL_OW 111
// if not dialog_stop then
9868: LD_EXP 19
9872: NOT
9873: IFFALSE 9936
// begin dialog_stop = true ;
9875: LD_ADDR_EXP 19
9879: PUSH
9880: LD_INT 1
9882: ST_TO_ADDR
// if not IsOK ( Gnyevko ) then
9883: LD_EXP 45
9887: PPUSH
9888: CALL_OW 302
9892: NOT
9893: IFFALSE 9909
// SayRadio ( Kurin , D11-Kur-1 ) else
9895: LD_EXP 56
9899: PPUSH
9900: LD_STRING D11-Kur-1
9902: PPUSH
9903: CALL_OW 94
9907: GO 9921
// Say ( Gnyevko , D11-Gny-1 ) ;
9909: LD_EXP 45
9913: PPUSH
9914: LD_STRING D11-Gny-1
9916: PPUSH
9917: CALL_OW 88
// wait ( 0 0$5 ) ;
9921: LD_INT 175
9923: PPUSH
9924: CALL_OW 67
// dialog_stop = false ;
9928: LD_ADDR_EXP 19
9932: PUSH
9933: LD_INT 0
9935: ST_TO_ADDR
// end ; end ;
9936: GO 9726
9938: POP
9939: POP
// end ;
9940: PPOPN 7
9942: END
// every 1 trigger SeeArea ( 3 , areaKirov ) >= 6 and counterEnable do var unit ;
9943: LD_INT 3
9945: PPUSH
9946: LD_INT 13
9948: PPUSH
9949: CALL_OW 294
9953: PUSH
9954: LD_INT 6
9956: GREATEREQUAL
9957: PUSH
9958: LD_EXP 88
9962: AND
9963: IFFALSE 10134
9965: GO 9967
9967: DISABLE
9968: LD_INT 0
9970: PPUSH
// begin enable ;
9971: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
9972: LD_ADDR_VAR 0 1
9976: PUSH
9977: LD_INT 22
9979: PUSH
9980: LD_INT 3
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: PUSH
9987: LD_INT 2
9989: PUSH
9990: LD_INT 21
9992: PUSH
9993: LD_INT 1
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PUSH
10000: LD_INT 21
10002: PUSH
10003: LD_INT 2
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: LIST
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PPUSH
10019: CALL_OW 69
10023: PUSH
10024: FOR_IN
10025: IFFALSE 10132
// if IsInArea ( unit , areaKirov ) and ( UnitFilter ( unit , [ f_type , unit_human ] ) or UnitsInside ( unit ) ) then
10027: LD_VAR 0 1
10031: PPUSH
10032: LD_INT 13
10034: PPUSH
10035: CALL_OW 308
10039: PUSH
10040: LD_VAR 0 1
10044: PPUSH
10045: LD_INT 21
10047: PUSH
10048: LD_INT 1
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PPUSH
10055: CALL_OW 72
10059: PUSH
10060: LD_VAR 0 1
10064: PPUSH
10065: CALL_OW 313
10069: OR
10070: AND
10071: IFFALSE 10130
// begin ComMoveXY ( unit , 120 , 98 ) ;
10073: LD_VAR 0 1
10077: PPUSH
10078: LD_INT 120
10080: PPUSH
10081: LD_INT 98
10083: PPUSH
10084: CALL_OW 111
// if not dialog_stop then
10088: LD_EXP 19
10092: NOT
10093: IFFALSE 10130
// begin dialog_stop = true ;
10095: LD_ADDR_EXP 19
10099: PUSH
10100: LD_INT 1
10102: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
10103: LD_EXP 56
10107: PPUSH
10108: LD_STRING D12-Kur-1
10110: PPUSH
10111: CALL_OW 88
// wait ( 0 0$5 ) ;
10115: LD_INT 175
10117: PPUSH
10118: CALL_OW 67
// dialog_stop = false ;
10122: LD_ADDR_EXP 19
10126: PUSH
10127: LD_INT 0
10129: ST_TO_ADDR
// end ; end ;
10130: GO 10024
10132: POP
10133: POP
// end ;
10134: PPOPN 1
10136: END
// every 0 0$1 trigger IsSelected ( Kurin ) do
10137: LD_EXP 56
10141: PPUSH
10142: CALL_OW 306
10146: IFFALSE 10354
10148: GO 10150
10150: DISABLE
// begin if true then
10151: LD_INT 1
10153: IFFALSE 10353
// begin case Query ( QReadyToAttack ) of 1 :
10155: LD_STRING QReadyToAttack
10157: PPUSH
10158: CALL_OW 97
10162: PUSH
10163: LD_INT 1
10165: DOUBLE
10166: EQUAL
10167: IFTRUE 10171
10169: GO 10241
10171: POP
// begin DeselectUnits ( Kurin ) ;
10172: LD_EXP 56
10176: PPUSH
10177: CALL_OW 491
// SelectUnits ( Burlak ) ;
10181: LD_EXP 44
10185: PPUSH
10186: CALL_OW 490
// Say ( Burlak , D6a-Bur-1 ) ;
10190: LD_EXP 44
10194: PPUSH
10195: LD_STRING D6a-Bur-1
10197: PPUSH
10198: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
10202: LD_EXP 56
10206: PPUSH
10207: LD_STRING D6a-Kur-1
10209: PPUSH
10210: CALL_OW 94
// meetNearOmicronBase = true ;
10214: LD_ADDR_EXP 27
10218: PUSH
10219: LD_INT 1
10221: ST_TO_ADDR
// kurinCheckVehicles = true ;
10222: LD_ADDR_EXP 26
10226: PUSH
10227: LD_INT 1
10229: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
10230: LD_ADDR_EXP 23
10234: PUSH
10235: LD_INT 4200
10237: ST_TO_ADDR
// disable ;
10238: DISABLE
// end ; 2 :
10239: GO 10353
10241: LD_INT 2
10243: DOUBLE
10244: EQUAL
10245: IFTRUE 10249
10247: GO 10323
10249: POP
// begin DeselectUnits ( Kurin ) ;
10250: LD_EXP 56
10254: PPUSH
10255: CALL_OW 491
// SelectUnits ( Burlak ) ;
10259: LD_EXP 44
10263: PPUSH
10264: CALL_OW 490
// Say ( Burlak , D6b-Bur-1 ) ;
10268: LD_EXP 44
10272: PPUSH
10273: LD_STRING D6b-Bur-1
10275: PPUSH
10276: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
10280: LD_EXP 56
10284: PPUSH
10285: LD_STRING D6b-Kur-1
10287: PPUSH
10288: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
10292: LD_EXP 44
10296: PPUSH
10297: LD_STRING D6b-Bur-2
10299: PPUSH
10300: CALL_OW 88
// timeToArrive = 2 2$00 ;
10304: LD_ADDR_EXP 23
10308: PUSH
10309: LD_INT 4200
10311: ST_TO_ADDR
// meetNearOmicronBase = true ;
10312: LD_ADDR_EXP 27
10316: PUSH
10317: LD_INT 1
10319: ST_TO_ADDR
// disable ;
10320: DISABLE
// end ; 3 :
10321: GO 10353
10323: LD_INT 3
10325: DOUBLE
10326: EQUAL
10327: IFTRUE 10331
10329: GO 10352
10331: POP
// begin DeselectUnits ( Kurin ) ;
10332: LD_EXP 56
10336: PPUSH
10337: CALL_OW 491
// SelectUnits ( Burlak ) ;
10341: LD_EXP 44
10345: PPUSH
10346: CALL_OW 490
// end ; end ;
10350: GO 10353
10352: POP
// end ; enable ;
10353: ENABLE
// end ;
10354: END
// export enoughVehsForKirov ; every 0 0$1 trigger timeToPrepareAttack < 0 0$01 do
10355: LD_EXP 92
10359: PUSH
10360: LD_INT 35
10362: LESS
10363: IFFALSE 10599
10365: GO 10367
10367: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
10368: LD_EXP 56
10372: PPUSH
10373: CALL_OW 87
// InGameOn ;
10377: CALL_OW 8
// DialogueOn ;
10381: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
10385: LD_EXP 56
10389: PPUSH
10390: LD_STRING D5-Kur-1
10392: PPUSH
10393: CALL_OW 94
// case Query ( QVehicles ) of 1 :
10397: LD_STRING QVehicles
10399: PPUSH
10400: CALL_OW 97
10404: PUSH
10405: LD_INT 1
10407: DOUBLE
10408: EQUAL
10409: IFTRUE 10413
10411: GO 10464
10413: POP
// begin SayRadio ( Burlak , D6a-Bur-1 ) ;
10414: LD_EXP 44
10418: PPUSH
10419: LD_STRING D6a-Bur-1
10421: PPUSH
10422: CALL_OW 94
// SayRadio ( Kurin , D6a-Kur-1 ) ;
10426: LD_EXP 56
10430: PPUSH
10431: LD_STRING D6a-Kur-1
10433: PPUSH
10434: CALL_OW 94
// meetNearOmicronBase = true ;
10438: LD_ADDR_EXP 27
10442: PUSH
10443: LD_INT 1
10445: ST_TO_ADDR
// kurinCheckVehicles = true ;
10446: LD_ADDR_EXP 26
10450: PUSH
10451: LD_INT 1
10453: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
10454: LD_ADDR_EXP 23
10458: PUSH
10459: LD_INT 4200
10461: ST_TO_ADDR
// end ; 2 :
10462: GO 10591
10464: LD_INT 2
10466: DOUBLE
10467: EQUAL
10468: IFTRUE 10472
10470: GO 10519
10472: POP
// begin SayRadio ( Burlak , D6b-Bur-1 ) ;
10473: LD_EXP 44
10477: PPUSH
10478: LD_STRING D6b-Bur-1
10480: PPUSH
10481: CALL_OW 94
// SayRadio ( Kurin , D6b-Kur-1 ) ;
10485: LD_EXP 56
10489: PPUSH
10490: LD_STRING D6b-Kur-1
10492: PPUSH
10493: CALL_OW 94
// SayRadio ( Burlak , D6b-Bur-2 ) ;
10497: LD_EXP 44
10501: PPUSH
10502: LD_STRING D6b-Bur-2
10504: PPUSH
10505: CALL_OW 94
// meetNearOmicronBase = true ;
10509: LD_ADDR_EXP 27
10513: PUSH
10514: LD_INT 1
10516: ST_TO_ADDR
// end ; 3 :
10517: GO 10591
10519: LD_INT 3
10521: DOUBLE
10522: EQUAL
10523: IFTRUE 10527
10525: GO 10590
10527: POP
// begin SayRadio ( Burlak , D6c-Bur-1 ) ;
10528: LD_EXP 44
10532: PPUSH
10533: LD_STRING D6c-Bur-1
10535: PPUSH
10536: CALL_OW 94
// SayRadio ( Kurin , D6c-Kur-1 ) ;
10540: LD_EXP 56
10544: PPUSH
10545: LD_STRING D6c-Kur-1
10547: PPUSH
10548: CALL_OW 94
// SayRadio ( Burlak , D6c-Bur-2 ) ;
10552: LD_EXP 44
10556: PPUSH
10557: LD_STRING D6c-Bur-2
10559: PPUSH
10560: CALL_OW 94
// kurinGiveMoreTime = true ;
10564: LD_ADDR_EXP 21
10568: PUSH
10569: LD_INT 1
10571: ST_TO_ADDR
// kurinOpinion = 0 ;
10572: LD_ADDR_EXP 10
10576: PUSH
10577: LD_INT 0
10579: ST_TO_ADDR
// counterIndex = 4 ;
10580: LD_ADDR_EXP 89
10584: PUSH
10585: LD_INT 4
10587: ST_TO_ADDR
// end ; end ;
10588: GO 10591
10590: POP
// InGameOff ;
10591: CALL_OW 9
// DialogueOff ;
10595: CALL_OW 7
// end ;
10599: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
10600: LD_EXP 22
10604: PUSH
10605: LD_INT 35
10607: LESS
10608: PUSH
10609: LD_EXP 21
10613: AND
10614: IFFALSE 10655
10616: GO 10618
10618: DISABLE
// begin DialogueOn ;
10619: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
10623: LD_EXP 56
10627: PPUSH
10628: LD_STRING D6c-Kur-2
10630: PPUSH
10631: CALL_OW 94
// DialogueOff ;
10635: CALL_OW 7
// timeToArrive = 2 2$00 ;
10639: LD_ADDR_EXP 23
10643: PUSH
10644: LD_INT 4200
10646: ST_TO_ADDR
// meetNearOmicronBase = true ;
10647: LD_ADDR_EXP 27
10651: PUSH
10652: LD_INT 1
10654: ST_TO_ADDR
// end ;
10655: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs , beriaUnits , freeVehs ;
10656: LD_EXP 27
10660: IFFALSE 11159
10662: GO 10664
10664: DISABLE
10665: LD_INT 0
10667: PPUSH
10668: PPUSH
10669: PPUSH
10670: PPUSH
10671: PPUSH
10672: PPUSH
10673: PPUSH
// begin mechs = [ ] ;
10674: LD_ADDR_VAR 0 3
10678: PUSH
10679: EMPTY
10680: ST_TO_ADDR
// vehs = [ ] ;
10681: LD_ADDR_VAR 0 4
10685: PUSH
10686: EMPTY
10687: ST_TO_ADDR
// freeVehs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) - FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
10688: LD_ADDR_VAR 0 7
10692: PUSH
10693: LD_INT 22
10695: PUSH
10696: LD_INT 3
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: PUSH
10703: LD_INT 21
10705: PUSH
10706: LD_INT 2
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PUSH
10713: LD_INT 23
10715: PUSH
10716: LD_INT 3
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: PUSH
10723: LD_INT 3
10725: PUSH
10726: LD_INT 34
10728: PUSH
10729: LD_INT 51
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: PPUSH
10746: CALL_OW 69
10750: PUSH
10751: LD_INT 22
10753: PUSH
10754: LD_INT 3
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 21
10763: PUSH
10764: LD_INT 1
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PPUSH
10775: CALL_OW 69
10779: MINUS
10780: ST_TO_ADDR
// haveVehs = 0 ;
10781: LD_ADDR_VAR 0 5
10785: PUSH
10786: LD_INT 0
10788: ST_TO_ADDR
// uc_side = 6 ;
10789: LD_ADDR_OWVAR 20
10793: PUSH
10794: LD_INT 6
10796: ST_TO_ADDR
// uc_nation = 3 ;
10797: LD_ADDR_OWVAR 21
10801: PUSH
10802: LD_INT 3
10804: ST_TO_ADDR
// for i := 1 to freeVehs do
10805: LD_ADDR_VAR 0 1
10809: PUSH
10810: DOUBLE
10811: LD_INT 1
10813: DEC
10814: ST_TO_ADDR
10815: LD_VAR 0 7
10819: PUSH
10820: FOR_TO
10821: IFFALSE 10892
// begin PrepareMechanic ( false , 2 ) ;
10823: LD_INT 0
10825: PPUSH
10826: LD_INT 2
10828: PPUSH
10829: CALL_OW 383
// mech = CreateHuman ;
10833: LD_ADDR_VAR 0 2
10837: PUSH
10838: CALL_OW 44
10842: ST_TO_ADDR
// mechs = mechs ^ mech ;
10843: LD_ADDR_VAR 0 3
10847: PUSH
10848: LD_VAR 0 3
10852: PUSH
10853: LD_VAR 0 2
10857: ADD
10858: ST_TO_ADDR
// PlaceUnitArea ( mech , kirovSpawn , false ) ;
10859: LD_VAR 0 2
10863: PPUSH
10864: LD_INT 4
10866: PPUSH
10867: LD_INT 0
10869: PPUSH
10870: CALL_OW 49
// ComExitBuilding ( mech ) ;
10874: LD_VAR 0 2
10878: PPUSH
10879: CALL_OW 122
// wait ( 0 0$1 ) ;
10883: LD_INT 35
10885: PPUSH
10886: CALL_OW 67
// end ;
10890: GO 10820
10892: POP
10893: POP
// if enoughVehsForKirov and freeVehs > 0 then
10894: LD_EXP 95
10898: PUSH
10899: LD_VAR 0 7
10903: PUSH
10904: LD_INT 0
10906: GREATER
10907: AND
10908: IFFALSE 11126
// begin vehs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) ;
10910: LD_ADDR_VAR 0 4
10914: PUSH
10915: LD_INT 22
10917: PUSH
10918: LD_INT 3
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PUSH
10925: LD_INT 21
10927: PUSH
10928: LD_INT 2
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 23
10937: PUSH
10938: LD_INT 3
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: PUSH
10945: LD_INT 3
10947: PUSH
10948: LD_INT 34
10950: PUSH
10951: LD_INT 51
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PUSH
10962: LD_INT 3
10964: PUSH
10965: LD_INT 59
10967: PUSH
10968: EMPTY
10969: LIST
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: PPUSH
10982: CALL_OW 69
10986: ST_TO_ADDR
// for i := 1 to freeVehs do
10987: LD_ADDR_VAR 0 1
10991: PUSH
10992: DOUBLE
10993: LD_INT 1
10995: DEC
10996: ST_TO_ADDR
10997: LD_VAR 0 7
11001: PUSH
11002: FOR_TO
11003: IFFALSE 11029
// kirovAttackVehicles = kirovAttackVehicles ^ vehs [ i ] ;
11005: LD_ADDR_EXP 94
11009: PUSH
11010: LD_EXP 94
11014: PUSH
11015: LD_VAR 0 4
11019: PUSH
11020: LD_VAR 0 1
11024: ARRAY
11025: ADD
11026: ST_TO_ADDR
11027: GO 11002
11029: POP
11030: POP
// SetSide ( kirovAttackVehicles , 6 ) ;
11031: LD_EXP 94
11035: PPUSH
11036: LD_INT 6
11038: PPUSH
11039: CALL_OW 235
// produceMoreVehicles = true ;
11043: LD_ADDR_EXP 24
11047: PUSH
11048: LD_INT 1
11050: ST_TO_ADDR
// for i := 1 to freeVehs do
11051: LD_ADDR_VAR 0 1
11055: PUSH
11056: DOUBLE
11057: LD_INT 1
11059: DEC
11060: ST_TO_ADDR
11061: LD_VAR 0 7
11065: PUSH
11066: FOR_TO
11067: IFFALSE 11097
// AddComEnterUnit ( mechs [ i ] , kirovAttackVehicles [ i ] ) ;
11069: LD_VAR 0 3
11073: PUSH
11074: LD_VAR 0 1
11078: ARRAY
11079: PPUSH
11080: LD_EXP 94
11084: PUSH
11085: LD_VAR 0 1
11089: ARRAY
11090: PPUSH
11091: CALL_OW 180
11095: GO 11066
11097: POP
11098: POP
// if kurinCheckVehicles and not kurinOpinion = 0 then
11099: LD_EXP 26
11103: PUSH
11104: LD_EXP 10
11108: PUSH
11109: LD_INT 0
11111: EQUAL
11112: NOT
11113: AND
11114: IFFALSE 11124
// kurinOpinion = 1 ;
11116: LD_ADDR_EXP 10
11120: PUSH
11121: LD_INT 1
11123: ST_TO_ADDR
// end else
11124: GO 11159
// begin if kurinCheckVehicles then
11126: LD_EXP 26
11130: IFFALSE 11159
// begin DialogueOn ;
11132: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
11136: LD_EXP 56
11140: PPUSH
11141: LD_STRING D6d-Kur-1
11143: PPUSH
11144: CALL_OW 94
// DialogueOff ;
11148: CALL_OW 7
// YouLost ( Vehicles ) ;
11152: LD_STRING Vehicles
11154: PPUSH
11155: CALL_OW 104
// end ; end ; end ;
11159: PPOPN 7
11161: END
// every 0 0$1 trigger meetNearOmicronBase do var i ;
11162: LD_EXP 27
11166: IFFALSE 11305
11168: GO 11170
11170: DISABLE
11171: LD_INT 0
11173: PPUSH
// begin spawnCrates = false ;
11174: LD_ADDR_EXP 13
11178: PUSH
11179: LD_INT 0
11181: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
11182: LD_INT 6
11184: PPUSH
11185: LD_INT 1
11187: PPUSH
11188: LD_INT 2
11190: PPUSH
11191: LD_INT 1
11193: PPUSH
11194: CALL_OW 80
// SetRestrict ( b_depot , 3 , false ) ;
11198: LD_INT 0
11200: PPUSH
11201: LD_INT 3
11203: PPUSH
11204: LD_INT 0
11206: PPUSH
11207: CALL_OW 324
// ChangeMissionObjectives ( M3a ) ;
11211: LD_STRING M3a
11213: PPUSH
11214: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
11218: LD_STRING M5
11220: PPUSH
11221: CALL_OW 337
// SetAreaMapShow ( MeetArea , 1 ) ;
11225: LD_INT 14
11227: PPUSH
11228: LD_INT 1
11230: PPUSH
11231: CALL_OW 424
// for i := 1 to kirovAttackVehicles do
11235: LD_ADDR_VAR 0 1
11239: PUSH
11240: DOUBLE
11241: LD_INT 1
11243: DEC
11244: ST_TO_ADDR
11245: LD_EXP 94
11249: PUSH
11250: FOR_TO
11251: IFFALSE 11276
// ComMoveXY ( kirovAttackVehicles [ i ] , 75 , 38 ) ;
11253: LD_EXP 94
11257: PUSH
11258: LD_VAR 0 1
11262: ARRAY
11263: PPUSH
11264: LD_INT 75
11266: PPUSH
11267: LD_INT 38
11269: PPUSH
11270: CALL_OW 111
11274: GO 11250
11276: POP
11277: POP
// counterIndex = 2 ;
11278: LD_ADDR_EXP 89
11282: PUSH
11283: LD_INT 2
11285: ST_TO_ADDR
// if not kurinOpinion = 0 then
11286: LD_EXP 10
11290: PUSH
11291: LD_INT 0
11293: EQUAL
11294: NOT
11295: IFFALSE 11305
// kurinOpinion = 1 ;
11297: LD_ADDR_EXP 10
11301: PUSH
11302: LD_INT 1
11304: ST_TO_ADDR
// end ;
11305: PPOPN 1
11307: END
// every 0 0$1 trigger ( timeToArrive <= 0 and counterIndex = 2 ) do
11308: LD_EXP 23
11312: PUSH
11313: LD_INT 0
11315: LESSEQUAL
11316: PUSH
11317: LD_EXP 89
11321: PUSH
11322: LD_INT 2
11324: EQUAL
11325: AND
11326: IFFALSE 11375
11328: GO 11330
11330: DISABLE
// begin DialogueOn ;
11331: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
11335: LD_EXP 56
11339: PPUSH
11340: LD_STRING D7a-Kur-1
11342: PPUSH
11343: CALL_OW 94
// DialogueOff ;
11347: CALL_OW 7
// counterIndex = 3 ;
11351: LD_ADDR_EXP 89
11355: PUSH
11356: LD_INT 3
11358: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
11359: LD_ADDR_EXP 23
11363: PUSH
11364: LD_INT 4200
11366: ST_TO_ADDR
// kurinOpinion = 0 ;
11367: LD_ADDR_EXP 10
11371: PUSH
11372: LD_INT 0
11374: ST_TO_ADDR
// end ;
11375: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 3 do
11376: LD_EXP 23
11380: PUSH
11381: LD_INT 35
11383: LESS
11384: PUSH
11385: LD_EXP 89
11389: PUSH
11390: LD_INT 3
11392: EQUAL
11393: AND
11394: IFFALSE 11406
11396: GO 11398
11398: DISABLE
// YouLost ( Delay ) ;
11399: LD_STRING Delay
11401: PPUSH
11402: CALL_OW 104
11406: END
// export startTheAttack ; every 0 0$1 trigger meetNearOmicronBase and FilterUnitsExceptArea ( MeetArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
11407: LD_EXP 27
11411: PUSH
11412: LD_INT 14
11414: PPUSH
11415: LD_INT 22
11417: PUSH
11418: LD_INT 3
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 21
11427: PUSH
11428: LD_INT 1
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PPUSH
11439: CALL_OW 71
11443: PUSH
11444: LD_INT 0
11446: EQUAL
11447: AND
11448: IFFALSE 11537
11450: GO 11452
11452: DISABLE
// begin counterEnable = false ;
11453: LD_ADDR_EXP 88
11457: PUSH
11458: LD_INT 0
11460: ST_TO_ADDR
// startTheAttack = true ;
11461: LD_ADDR_EXP 96
11465: PUSH
11466: LD_INT 1
11468: ST_TO_ADDR
// Display_strings = [ ] ;
11469: LD_ADDR_OWVAR 47
11473: PUSH
11474: EMPTY
11475: ST_TO_ADDR
// SetAreaMapShow ( MeetArea , 0 ) ;
11476: LD_INT 14
11478: PPUSH
11479: LD_INT 0
11481: PPUSH
11482: CALL_OW 424
// canExitBattlefield = false ;
11486: LD_ADDR_EXP 32
11490: PUSH
11491: LD_INT 0
11493: ST_TO_ADDR
// DialogueOn ;
11494: CALL_OW 6
// SayRadio ( Burlak , D7-Bur-1 ) ;
11498: LD_EXP 44
11502: PPUSH
11503: LD_STRING D7-Bur-1
11505: PPUSH
11506: CALL_OW 94
// SayRadio ( Kurin , D7-Kur-1 ) ;
11510: LD_EXP 56
11514: PPUSH
11515: LD_STRING D7-Kur-1
11517: PPUSH
11518: CALL_OW 94
// DialogueOff ;
11522: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
11526: LD_STRING M5a
11528: PPUSH
11529: CALL_OW 337
// KirovAttackOmicron ;
11533: CALL 2856 0 0
// end ;
11537: END
// every 0 0$1 trigger ( UnitFilter ( kirovAttackVehicles [ KirovCurrentAttacker ] , [ f_not , [ f_lives , 700 ] ] ) and startTheAttack ) or not IsBusy ( kirovAttackVehicles [ KirovCurrentAttacker ] ) do var i ;
11538: LD_EXP 94
11542: PUSH
11543: LD_EXP 43
11547: ARRAY
11548: PPUSH
11549: LD_INT 3
11551: PUSH
11552: LD_INT 24
11554: PUSH
11555: LD_INT 700
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PPUSH
11566: CALL_OW 72
11570: PUSH
11571: LD_EXP 96
11575: AND
11576: PUSH
11577: LD_EXP 94
11581: PUSH
11582: LD_EXP 43
11586: ARRAY
11587: PPUSH
11588: CALL_OW 315
11592: NOT
11593: OR
11594: IFFALSE 11698
11596: GO 11598
11598: DISABLE
11599: LD_INT 0
11601: PPUSH
// begin enable ;
11602: ENABLE
// if GetLives ( kirovAttackVehicles [ KirovCurrentAttacker ] ) <= 700 then
11603: LD_EXP 94
11607: PUSH
11608: LD_EXP 43
11612: ARRAY
11613: PPUSH
11614: CALL_OW 256
11618: PUSH
11619: LD_INT 700
11621: LESSEQUAL
11622: IFFALSE 11698
// begin ComMoveToArea ( kirovAttackVehicles [ KirovCurrentAttacker ] , MeetAreaRetreat ) ;
11624: LD_EXP 94
11628: PUSH
11629: LD_EXP 43
11633: ARRAY
11634: PPUSH
11635: LD_INT 16
11637: PPUSH
11638: CALL_OW 113
// AddComRepairVehicleAndReturn ( IsDrivenBy ( kirovAttackVehicles [ KirovCurrentAttacker ] ) ) ;
11642: LD_EXP 94
11646: PUSH
11647: LD_EXP 43
11651: ARRAY
11652: PPUSH
11653: CALL_OW 311
11657: PPUSH
11658: CALL 51740 0 1
// SetFuel ( kirovAttackVehicles [ KirovCurrentAttacker ] , 100 ) ;
11662: LD_EXP 94
11666: PUSH
11667: LD_EXP 43
11671: ARRAY
11672: PPUSH
11673: LD_INT 100
11675: PPUSH
11676: CALL_OW 240
// KirovCurrentAttacker = KirovCurrentAttacker + 1 ;
11680: LD_ADDR_EXP 43
11684: PUSH
11685: LD_EXP 43
11689: PUSH
11690: LD_INT 1
11692: PLUS
11693: ST_TO_ADDR
// KirovAttackOmicron ;
11694: CALL 2856 0 0
// end ; end ;
11698: PPOPN 1
11700: END
// export omicronNotDestroyed ; every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 5 and startTheAttack do var i , tmpUs , tmpRu , building , beriaBuildings , nearBuilding , turrets , nearTurrets , emptyVehicles ;
11701: LD_INT 22
11703: PUSH
11704: LD_INT 1
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 21
11713: PUSH
11714: LD_INT 1
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: PPUSH
11725: CALL_OW 69
11729: PUSH
11730: LD_INT 5
11732: LESS
11733: PUSH
11734: LD_EXP 96
11738: AND
11739: IFFALSE 12482
11741: GO 11743
11743: DISABLE
11744: LD_INT 0
11746: PPUSH
11747: PPUSH
11748: PPUSH
11749: PPUSH
11750: PPUSH
11751: PPUSH
11752: PPUSH
11753: PPUSH
11754: PPUSH
// begin omicronSurrender = true ;
11755: LD_ADDR_EXP 31
11759: PUSH
11760: LD_INT 1
11762: ST_TO_ADDR
// canExitBattlefield = true ;
11763: LD_ADDR_EXP 32
11767: PUSH
11768: LD_INT 1
11770: ST_TO_ADDR
// endCutscene = true ;
11771: LD_ADDR_EXP 38
11775: PUSH
11776: LD_INT 1
11778: ST_TO_ADDR
// if timeToArabAttack = 0 and not IsDead ( omikronDepot ) then
11779: LD_EXP 93
11783: PUSH
11784: LD_INT 0
11786: EQUAL
11787: PUSH
11788: LD_EXP 75
11792: PPUSH
11793: CALL_OW 301
11797: NOT
11798: AND
11799: IFFALSE 11811
// omicronNotDestroyed = true else
11801: LD_ADDR_EXP 97
11805: PUSH
11806: LD_INT 1
11808: ST_TO_ADDR
11809: GO 11819
// omicronNotDestroyed = false ;
11811: LD_ADDR_EXP 97
11815: PUSH
11816: LD_INT 0
11818: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , false ) ;
11819: LD_INT 1
11821: PPUSH
11822: LD_INT 3
11824: PPUSH
11825: LD_INT 1
11827: PPUSH
11828: LD_INT 0
11830: PPUSH
11831: CALL_OW 80
// SetAttitude ( 2 , 3 , att_friend , true ) ;
11835: LD_INT 2
11837: PPUSH
11838: LD_INT 3
11840: PPUSH
11841: LD_INT 1
11843: PPUSH
11844: LD_INT 1
11846: PPUSH
11847: CALL_OW 80
// CenterNowOnUnits ( Burlak ) ;
11851: LD_EXP 44
11855: PPUSH
11856: CALL_OW 87
// SayRadioNoFace ( Scholtze2 , D8-Sol1-1 ) ;
11860: LD_EXP 70
11864: PPUSH
11865: LD_STRING D8-Sol1-1
11867: PPUSH
11868: CALL_OW 586
// if IsOk ( Kovalyuk ) then
11872: LD_EXP 47
11876: PPUSH
11877: CALL_OW 302
11881: IFFALSE 11895
// Say ( Kovalyuk , D8-Kov-1 ) ;
11883: LD_EXP 47
11887: PPUSH
11888: LD_STRING D8-Kov-1
11890: PPUSH
11891: CALL_OW 88
// SayRadio ( Bukov , D8-RSol1-1 ) ;
11895: LD_EXP 68
11899: PPUSH
11900: LD_STRING D8-RSol1-1
11902: PPUSH
11903: CALL_OW 94
// if IsOk ( Gnyevko ) then
11907: LD_EXP 45
11911: PPUSH
11912: CALL_OW 302
11916: IFFALSE 11930
// Say ( Gnyevko , D8-Gny-1 ) ;
11918: LD_EXP 45
11922: PPUSH
11923: LD_STRING D8-Gny-1
11925: PPUSH
11926: CALL_OW 88
// tmpRu = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov ] ;
11930: LD_ADDR_VAR 0 3
11934: PUSH
11935: LD_INT 22
11937: PUSH
11938: LD_INT 3
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: LD_INT 21
11947: PUSH
11948: LD_INT 1
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 26
11957: PUSH
11958: LD_INT 1
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: LIST
11969: PPUSH
11970: CALL_OW 69
11974: PUSH
11975: LD_EXP 44
11979: PUSH
11980: LD_EXP 45
11984: PUSH
11985: LD_EXP 47
11989: PUSH
11990: LD_EXP 48
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: DIFF
12001: ST_TO_ADDR
// Say ( tmpRu [ 1 ] , D8-RSol2-1 ) ;
12002: LD_VAR 0 3
12006: PUSH
12007: LD_INT 1
12009: ARRAY
12010: PPUSH
12011: LD_STRING D8-RSol2-1
12013: PPUSH
12014: CALL_OW 88
// DialogueOff ;
12018: CALL_OW 7
// music_nat = nation_arabian ;
12022: LD_ADDR_OWVAR 71
12026: PUSH
12027: LD_INT 2
12029: ST_TO_ADDR
// music_class = music_combat ;
12030: LD_ADDR_OWVAR 72
12034: PUSH
12035: LD_INT 1
12037: ST_TO_ADDR
// game_speed = 4 ;
12038: LD_ADDR_OWVAR 65
12042: PUSH
12043: LD_INT 4
12045: ST_TO_ADDR
// DialogueOn ;
12046: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-1 ) ;
12050: LD_EXP 66
12054: PPUSH
12055: LD_STRING D9-Gri-1
12057: PPUSH
12058: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12062: LD_EXP 56
12066: PPUSH
12067: LD_STRING D9-Kur-1
12069: PPUSH
12070: CALL_OW 94
// DialogueOff ;
12074: CALL_OW 7
// CenterOnXY ( 162 , 107 ) ;
12078: LD_INT 162
12080: PPUSH
12081: LD_INT 107
12083: PPUSH
12084: CALL_OW 84
// wait ( 2 2$0 ) ;
12088: LD_INT 4200
12090: PPUSH
12091: CALL_OW 67
// DialogueOn ;
12095: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-2 ) ;
12099: LD_EXP 66
12103: PPUSH
12104: LD_STRING D9-Gri-2
12106: PPUSH
12107: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12111: LD_EXP 56
12115: PPUSH
12116: LD_STRING D9-Kur-2
12118: PPUSH
12119: CALL_OW 94
// wait ( 1 1$0 ) ;
12123: LD_INT 2100
12125: PPUSH
12126: CALL_OW 67
// SayRadio ( Grishko , D9-Gri-3 ) ;
12130: LD_EXP 66
12134: PPUSH
12135: LD_STRING D9-Gri-3
12137: PPUSH
12138: CALL_OW 94
// DialogueOff ;
12142: CALL_OW 7
// CenterNowOnUnits ( Kurin ) ;
12146: LD_EXP 56
12150: PPUSH
12151: CALL_OW 87
// SayRadio ( Kurin , D9-Kur-3 ) ;
12155: LD_EXP 56
12159: PPUSH
12160: LD_STRING D9-Kur-3
12162: PPUSH
12163: CALL_OW 94
// DialogueOn ;
12167: CALL_OW 6
// SayRadio ( Kurin , D9a-Kur-1 ) ;
12171: LD_EXP 56
12175: PPUSH
12176: LD_STRING D9a-Kur-1
12178: PPUSH
12179: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
12183: LD_EXP 44
12187: PPUSH
12188: LD_STRING D9a-Bur-1
12190: PPUSH
12191: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
12195: LD_EXP 56
12199: PPUSH
12200: LD_STRING D9a-Kur-2
12202: PPUSH
12203: CALL_OW 94
// DialogueOff ;
12207: CALL_OW 7
// wait ( 0 0$1 ) ;
12211: LD_INT 35
12213: PPUSH
12214: CALL_OW 67
// ComMoveUnit ( Popov , Burlak ) ;
12218: LD_EXP 57
12222: PPUSH
12223: LD_EXP 44
12227: PPUSH
12228: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
12232: LD_INT 35
12234: PPUSH
12235: CALL_OW 67
// until GetDistUnits ( Burlak , Popov ) < 8 or ( IsInUnit ( Burlak ) < 8 and IsInUnit ( Burlak ) ) ;
12239: LD_EXP 44
12243: PPUSH
12244: LD_EXP 57
12248: PPUSH
12249: CALL_OW 296
12253: PUSH
12254: LD_INT 8
12256: LESS
12257: PUSH
12258: LD_EXP 44
12262: PPUSH
12263: CALL_OW 310
12267: PUSH
12268: LD_INT 8
12270: LESS
12271: PUSH
12272: LD_EXP 44
12276: PPUSH
12277: CALL_OW 310
12281: AND
12282: OR
12283: IFFALSE 12232
// if IsInUnit ( Burlak ) then
12285: LD_EXP 44
12289: PPUSH
12290: CALL_OW 310
12294: IFFALSE 12312
// begin ComExitVehicle ( Burlak ) ;
12296: LD_EXP 44
12300: PPUSH
12301: CALL_OW 121
// wait ( 0 0$1 ) ;
12305: LD_INT 35
12307: PPUSH
12308: CALL_OW 67
// end ; CenterNowOnUnits ( [ Burlak , Popov ] ) ;
12312: LD_EXP 44
12316: PUSH
12317: LD_EXP 57
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: PPUSH
12326: CALL_OW 87
// ComTurnUnit ( Burlak , Popov ) ;
12330: LD_EXP 44
12334: PPUSH
12335: LD_EXP 57
12339: PPUSH
12340: CALL_OW 119
// ComTurnUnit ( Popov , Burlak ) ;
12344: LD_EXP 57
12348: PPUSH
12349: LD_EXP 44
12353: PPUSH
12354: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
12358: LD_EXP 44
12362: PPUSH
12363: LD_STRING D10a-Bur-1
12365: PPUSH
12366: CALL_OW 88
// Say ( Popov , D10a-Pop-1 ) ;
12370: LD_EXP 57
12374: PPUSH
12375: LD_STRING D10a-Pop-1
12377: PPUSH
12378: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
12382: LD_EXP 44
12386: PPUSH
12387: LD_STRING D10a-Bur-2
12389: PPUSH
12390: CALL_OW 88
// Say ( Popov , D10a-Pop-2 ) ;
12394: LD_EXP 57
12398: PPUSH
12399: LD_STRING D10a-Pop-2
12401: PPUSH
12402: CALL_OW 88
// Say ( Burlak , D10a-Bur-3 ) ;
12406: LD_EXP 44
12410: PPUSH
12411: LD_STRING D10a-Bur-3
12413: PPUSH
12414: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
12418: LD_EXP 57
12422: PPUSH
12423: LD_STRING D10a-Pop-3
12425: PPUSH
12426: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
12430: LD_EXP 44
12434: PPUSH
12435: LD_STRING D10a-Bur-4
12437: PPUSH
12438: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
12442: LD_EXP 57
12446: PPUSH
12447: LD_STRING D10a-Pop-4
12449: PPUSH
12450: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
12454: LD_EXP 44
12458: PPUSH
12459: LD_STRING D10a-Bur-5
12461: PPUSH
12462: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
12466: LD_EXP 57
12470: PPUSH
12471: LD_STRING D10a-Pop-5
12473: PPUSH
12474: CALL_OW 88
// EndMission ;
12478: CALL 12485 0 0
// end ;
12482: PPOPN 9
12484: END
// export function EndMission ; begin
12485: LD_INT 0
12487: PPUSH
// if enoughVehsForKirov then
12488: LD_EXP 95
12492: IFFALSE 12506
// AddMedal ( Surplus , 1 ) else
12494: LD_STRING Surplus
12496: PPUSH
12497: LD_INT 1
12499: PPUSH
12500: CALL_OW 101
12504: GO 12536
// if produceOnlyForYou then
12506: LD_EXP 25
12510: IFFALSE 12525
// AddMedal ( Surplus , - 1 ) else
12512: LD_STRING Surplus
12514: PPUSH
12515: LD_INT 1
12517: NEG
12518: PPUSH
12519: CALL_OW 101
12523: GO 12536
// AddMedal ( Surplus , - 2 ) ;
12525: LD_STRING Surplus
12527: PPUSH
12528: LD_INT 2
12530: NEG
12531: PPUSH
12532: CALL_OW 101
// if scholtzeSaved and IsOK ( Scholtze ) then
12536: LD_EXP 15
12540: PUSH
12541: LD_EXP 69
12545: PPUSH
12546: CALL_OW 302
12550: AND
12551: IFFALSE 12565
// AddMedal ( Scholtze , 1 ) else
12553: LD_STRING Scholtze
12555: PPUSH
12556: LD_INT 1
12558: PPUSH
12559: CALL_OW 101
12563: GO 12576
// AddMedal ( Scholtze , - 1 ) ;
12565: LD_STRING Scholtze
12567: PPUSH
12568: LD_INT 1
12570: NEG
12571: PPUSH
12572: CALL_OW 101
// if omicronNotDestroyed = false then
12576: LD_EXP 97
12580: PUSH
12581: LD_INT 0
12583: EQUAL
12584: IFFALSE 12598
// AddMedal ( OmiRun , 1 ) else
12586: LD_STRING OmiRun
12588: PPUSH
12589: LD_INT 1
12591: PPUSH
12592: CALL_OW 101
12596: GO 12609
// AddMedal ( OmiRun , - 1 ) ;
12598: LD_STRING OmiRun
12600: PPUSH
12601: LD_INT 1
12603: NEG
12604: PPUSH
12605: CALL_OW 101
// GiveMedals ( Main ) ;
12609: LD_STRING Main
12611: PPUSH
12612: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
12616: LD_INT 22
12618: PUSH
12619: LD_INT 3
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PUSH
12626: LD_INT 23
12628: PUSH
12629: LD_INT 3
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PUSH
12636: LD_INT 21
12638: PUSH
12639: LD_INT 1
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: LIST
12650: PPUSH
12651: CALL_OW 69
12655: PPUSH
12656: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
12660: LD_EXP 44
12664: PPUSH
12665: LD_EXP 5
12669: PUSH
12670: LD_STRING Burlak
12672: STR
12673: PPUSH
12674: CALL_OW 38
// if IsLive ( Gnyevko ) then
12678: LD_EXP 45
12682: PPUSH
12683: CALL_OW 300
12687: IFFALSE 12707
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
12689: LD_EXP 45
12693: PPUSH
12694: LD_EXP 5
12698: PUSH
12699: LD_STRING Gnyevko
12701: STR
12702: PPUSH
12703: CALL_OW 38
// if IsLive ( Kovalyuk ) then
12707: LD_EXP 47
12711: PPUSH
12712: CALL_OW 300
12716: IFFALSE 12736
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
12718: LD_EXP 47
12722: PPUSH
12723: LD_EXP 5
12727: PUSH
12728: LD_STRING Kovalyuk
12730: STR
12731: PPUSH
12732: CALL_OW 38
// if IsLive ( Belkov ) then
12736: LD_EXP 48
12740: PPUSH
12741: CALL_OW 300
12745: IFFALSE 12765
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
12747: LD_EXP 48
12751: PPUSH
12752: LD_EXP 5
12756: PUSH
12757: LD_STRING Belkov
12759: STR
12760: PPUSH
12761: CALL_OW 38
// if IsLive ( Kirilenkova ) then
12765: LD_EXP 46
12769: PPUSH
12770: CALL_OW 300
12774: IFFALSE 12794
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
12776: LD_EXP 46
12780: PPUSH
12781: LD_EXP 5
12785: PUSH
12786: LD_STRING Kirilenkova
12788: STR
12789: PPUSH
12790: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] , currentMissionPrefix & burlakTeam ) ;
12794: LD_INT 22
12796: PUSH
12797: LD_INT 3
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: LD_INT 23
12806: PUSH
12807: LD_INT 3
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PUSH
12814: LD_INT 21
12816: PUSH
12817: LD_INT 1
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: LIST
12828: PPUSH
12829: CALL_OW 69
12833: PUSH
12834: LD_EXP 44
12838: PUSH
12839: LD_EXP 45
12843: PUSH
12844: LD_EXP 47
12848: PUSH
12849: LD_EXP 48
12853: PUSH
12854: LD_EXP 46
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: DIFF
12866: PPUSH
12867: LD_EXP 5
12871: PUSH
12872: LD_STRING burlakTeam
12874: STR
12875: PPUSH
12876: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff ( [ Kurin ] ) , currentMissionPrefix & kirovTeam ) ;
12880: LD_INT 22
12882: PUSH
12883: LD_INT 6
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 23
12892: PUSH
12893: LD_INT 3
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PUSH
12900: LD_INT 21
12902: PUSH
12903: LD_INT 1
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: LIST
12914: PPUSH
12915: CALL_OW 69
12919: PUSH
12920: LD_EXP 56
12924: PUSH
12925: EMPTY
12926: LIST
12927: DIFF
12928: PPUSH
12929: LD_EXP 5
12933: PUSH
12934: LD_STRING kirovTeam
12936: STR
12937: PPUSH
12938: CALL_OW 38
// SaveVariable ( kurinOpinion , 03_KurinOpinion ) ;
12942: LD_EXP 10
12946: PPUSH
12947: LD_STRING 03_KurinOpinion
12949: PPUSH
12950: CALL_OW 39
// YouWin ;
12954: CALL_OW 103
// end ; end_of_file
12958: LD_VAR 0 1
12962: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12963: LD_INT 0
12965: PPUSH
// ar_miner := 81 ;
12966: LD_ADDR_EXP 105
12970: PUSH
12971: LD_INT 81
12973: ST_TO_ADDR
// ar_crane := 88 ;
12974: LD_ADDR_EXP 104
12978: PUSH
12979: LD_INT 88
12981: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12982: LD_ADDR_EXP 99
12986: PUSH
12987: LD_INT 89
12989: ST_TO_ADDR
// us_hack := 99 ;
12990: LD_ADDR_EXP 100
12994: PUSH
12995: LD_INT 99
12997: ST_TO_ADDR
// us_artillery := 97 ;
12998: LD_ADDR_EXP 101
13002: PUSH
13003: LD_INT 97
13005: ST_TO_ADDR
// ar_bio_bomb := 91 ;
13006: LD_ADDR_EXP 102
13010: PUSH
13011: LD_INT 91
13013: ST_TO_ADDR
// ar_mortar := 92 ;
13014: LD_ADDR_EXP 103
13018: PUSH
13019: LD_INT 92
13021: ST_TO_ADDR
// ru_flamethrower := 93 ;
13022: LD_ADDR_EXP 106
13026: PUSH
13027: LD_INT 93
13029: ST_TO_ADDR
// ru_radar := 98 ;
13030: LD_ADDR_EXP 98
13034: PUSH
13035: LD_INT 98
13037: ST_TO_ADDR
// tech_Artillery := 80 ;
13038: LD_ADDR_EXP 107
13042: PUSH
13043: LD_INT 80
13045: ST_TO_ADDR
// tech_RadMat := 81 ;
13046: LD_ADDR_EXP 108
13050: PUSH
13051: LD_INT 81
13053: ST_TO_ADDR
// tech_BasicTools := 82 ;
13054: LD_ADDR_EXP 109
13058: PUSH
13059: LD_INT 82
13061: ST_TO_ADDR
// tech_Cargo := 83 ;
13062: LD_ADDR_EXP 110
13066: PUSH
13067: LD_INT 83
13069: ST_TO_ADDR
// tech_Track := 84 ;
13070: LD_ADDR_EXP 111
13074: PUSH
13075: LD_INT 84
13077: ST_TO_ADDR
// tech_Crane := 85 ;
13078: LD_ADDR_EXP 112
13082: PUSH
13083: LD_INT 85
13085: ST_TO_ADDR
// tech_Bulldozer := 86 ;
13086: LD_ADDR_EXP 113
13090: PUSH
13091: LD_INT 86
13093: ST_TO_ADDR
// tech_Hovercraft := 87 ;
13094: LD_ADDR_EXP 114
13098: PUSH
13099: LD_INT 87
13101: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
13102: LD_ADDR_EXP 115
13106: PUSH
13107: LD_INT 88
13109: ST_TO_ADDR
// class_mastodont := 31 ;
13110: LD_ADDR_EXP 116
13114: PUSH
13115: LD_INT 31
13117: ST_TO_ADDR
// class_horse := 21 ;
13118: LD_ADDR_EXP 117
13122: PUSH
13123: LD_INT 21
13125: ST_TO_ADDR
// end ;
13126: LD_VAR 0 1
13130: RET
// every 1 do
13131: GO 13133
13133: DISABLE
// InitGlobalVariables ; end_of_file
13134: CALL 12963 0 0
13138: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
13139: LD_INT 0
13141: PPUSH
13142: PPUSH
// if exist_mode then
13143: LD_VAR 0 2
13147: IFFALSE 13172
// unit := CreateCharacter ( prefix & ident ) else
13149: LD_ADDR_VAR 0 5
13153: PUSH
13154: LD_VAR 0 3
13158: PUSH
13159: LD_VAR 0 1
13163: STR
13164: PPUSH
13165: CALL_OW 34
13169: ST_TO_ADDR
13170: GO 13187
// unit := NewCharacter ( ident ) ;
13172: LD_ADDR_VAR 0 5
13176: PUSH
13177: LD_VAR 0 1
13181: PPUSH
13182: CALL_OW 25
13186: ST_TO_ADDR
// result := unit ;
13187: LD_ADDR_VAR 0 4
13191: PUSH
13192: LD_VAR 0 5
13196: ST_TO_ADDR
// end ;
13197: LD_VAR 0 4
13201: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
13202: LD_INT 0
13204: PPUSH
13205: PPUSH
// if not side or not nation then
13206: LD_VAR 0 1
13210: NOT
13211: PUSH
13212: LD_VAR 0 2
13216: NOT
13217: OR
13218: IFFALSE 13222
// exit ;
13220: GO 13990
// case nation of nation_american :
13222: LD_VAR 0 2
13226: PUSH
13227: LD_INT 1
13229: DOUBLE
13230: EQUAL
13231: IFTRUE 13235
13233: GO 13449
13235: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
13236: LD_ADDR_VAR 0 4
13240: PUSH
13241: LD_INT 35
13243: PUSH
13244: LD_INT 45
13246: PUSH
13247: LD_INT 46
13249: PUSH
13250: LD_INT 47
13252: PUSH
13253: LD_INT 82
13255: PUSH
13256: LD_INT 83
13258: PUSH
13259: LD_INT 84
13261: PUSH
13262: LD_INT 85
13264: PUSH
13265: LD_INT 86
13267: PUSH
13268: LD_INT 1
13270: PUSH
13271: LD_INT 2
13273: PUSH
13274: LD_INT 6
13276: PUSH
13277: LD_INT 15
13279: PUSH
13280: LD_INT 16
13282: PUSH
13283: LD_INT 7
13285: PUSH
13286: LD_INT 12
13288: PUSH
13289: LD_INT 13
13291: PUSH
13292: LD_INT 10
13294: PUSH
13295: LD_INT 14
13297: PUSH
13298: LD_INT 20
13300: PUSH
13301: LD_INT 21
13303: PUSH
13304: LD_INT 22
13306: PUSH
13307: LD_INT 25
13309: PUSH
13310: LD_INT 32
13312: PUSH
13313: LD_INT 27
13315: PUSH
13316: LD_INT 36
13318: PUSH
13319: LD_INT 69
13321: PUSH
13322: LD_INT 39
13324: PUSH
13325: LD_INT 34
13327: PUSH
13328: LD_INT 40
13330: PUSH
13331: LD_INT 48
13333: PUSH
13334: LD_INT 49
13336: PUSH
13337: LD_INT 50
13339: PUSH
13340: LD_INT 51
13342: PUSH
13343: LD_INT 52
13345: PUSH
13346: LD_INT 53
13348: PUSH
13349: LD_INT 54
13351: PUSH
13352: LD_INT 55
13354: PUSH
13355: LD_INT 56
13357: PUSH
13358: LD_INT 57
13360: PUSH
13361: LD_INT 58
13363: PUSH
13364: LD_INT 59
13366: PUSH
13367: LD_INT 60
13369: PUSH
13370: LD_INT 61
13372: PUSH
13373: LD_INT 62
13375: PUSH
13376: LD_INT 80
13378: PUSH
13379: LD_INT 82
13381: PUSH
13382: LD_INT 83
13384: PUSH
13385: LD_INT 84
13387: PUSH
13388: LD_INT 85
13390: PUSH
13391: LD_INT 86
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: ST_TO_ADDR
13447: GO 13914
13449: LD_INT 2
13451: DOUBLE
13452: EQUAL
13453: IFTRUE 13457
13455: GO 13683
13457: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
13458: LD_ADDR_VAR 0 4
13462: PUSH
13463: LD_INT 35
13465: PUSH
13466: LD_INT 45
13468: PUSH
13469: LD_INT 46
13471: PUSH
13472: LD_INT 47
13474: PUSH
13475: LD_INT 82
13477: PUSH
13478: LD_INT 83
13480: PUSH
13481: LD_INT 84
13483: PUSH
13484: LD_INT 85
13486: PUSH
13487: LD_INT 87
13489: PUSH
13490: LD_INT 70
13492: PUSH
13493: LD_INT 1
13495: PUSH
13496: LD_INT 11
13498: PUSH
13499: LD_INT 3
13501: PUSH
13502: LD_INT 4
13504: PUSH
13505: LD_INT 5
13507: PUSH
13508: LD_INT 6
13510: PUSH
13511: LD_INT 15
13513: PUSH
13514: LD_INT 18
13516: PUSH
13517: LD_INT 7
13519: PUSH
13520: LD_INT 17
13522: PUSH
13523: LD_INT 8
13525: PUSH
13526: LD_INT 20
13528: PUSH
13529: LD_INT 21
13531: PUSH
13532: LD_INT 22
13534: PUSH
13535: LD_INT 72
13537: PUSH
13538: LD_INT 26
13540: PUSH
13541: LD_INT 69
13543: PUSH
13544: LD_INT 39
13546: PUSH
13547: LD_INT 40
13549: PUSH
13550: LD_INT 41
13552: PUSH
13553: LD_INT 42
13555: PUSH
13556: LD_INT 43
13558: PUSH
13559: LD_INT 48
13561: PUSH
13562: LD_INT 49
13564: PUSH
13565: LD_INT 50
13567: PUSH
13568: LD_INT 51
13570: PUSH
13571: LD_INT 52
13573: PUSH
13574: LD_INT 53
13576: PUSH
13577: LD_INT 54
13579: PUSH
13580: LD_INT 55
13582: PUSH
13583: LD_INT 56
13585: PUSH
13586: LD_INT 60
13588: PUSH
13589: LD_INT 61
13591: PUSH
13592: LD_INT 62
13594: PUSH
13595: LD_INT 66
13597: PUSH
13598: LD_INT 67
13600: PUSH
13601: LD_INT 68
13603: PUSH
13604: LD_INT 81
13606: PUSH
13607: LD_INT 82
13609: PUSH
13610: LD_INT 83
13612: PUSH
13613: LD_INT 84
13615: PUSH
13616: LD_INT 85
13618: PUSH
13619: LD_INT 87
13621: PUSH
13622: LD_INT 88
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: ST_TO_ADDR
13681: GO 13914
13683: LD_INT 3
13685: DOUBLE
13686: EQUAL
13687: IFTRUE 13691
13689: GO 13913
13691: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
13692: LD_ADDR_VAR 0 4
13696: PUSH
13697: LD_INT 46
13699: PUSH
13700: LD_INT 47
13702: PUSH
13703: LD_INT 1
13705: PUSH
13706: LD_INT 2
13708: PUSH
13709: LD_INT 82
13711: PUSH
13712: LD_INT 83
13714: PUSH
13715: LD_INT 84
13717: PUSH
13718: LD_INT 85
13720: PUSH
13721: LD_INT 86
13723: PUSH
13724: LD_INT 11
13726: PUSH
13727: LD_INT 9
13729: PUSH
13730: LD_INT 20
13732: PUSH
13733: LD_INT 19
13735: PUSH
13736: LD_INT 21
13738: PUSH
13739: LD_INT 24
13741: PUSH
13742: LD_INT 22
13744: PUSH
13745: LD_INT 25
13747: PUSH
13748: LD_INT 28
13750: PUSH
13751: LD_INT 29
13753: PUSH
13754: LD_INT 30
13756: PUSH
13757: LD_INT 31
13759: PUSH
13760: LD_INT 37
13762: PUSH
13763: LD_INT 38
13765: PUSH
13766: LD_INT 32
13768: PUSH
13769: LD_INT 27
13771: PUSH
13772: LD_INT 33
13774: PUSH
13775: LD_INT 69
13777: PUSH
13778: LD_INT 39
13780: PUSH
13781: LD_INT 34
13783: PUSH
13784: LD_INT 40
13786: PUSH
13787: LD_INT 71
13789: PUSH
13790: LD_INT 23
13792: PUSH
13793: LD_INT 44
13795: PUSH
13796: LD_INT 48
13798: PUSH
13799: LD_INT 49
13801: PUSH
13802: LD_INT 50
13804: PUSH
13805: LD_INT 51
13807: PUSH
13808: LD_INT 52
13810: PUSH
13811: LD_INT 53
13813: PUSH
13814: LD_INT 54
13816: PUSH
13817: LD_INT 55
13819: PUSH
13820: LD_INT 56
13822: PUSH
13823: LD_INT 57
13825: PUSH
13826: LD_INT 58
13828: PUSH
13829: LD_INT 59
13831: PUSH
13832: LD_INT 63
13834: PUSH
13835: LD_INT 64
13837: PUSH
13838: LD_INT 65
13840: PUSH
13841: LD_INT 82
13843: PUSH
13844: LD_INT 83
13846: PUSH
13847: LD_INT 84
13849: PUSH
13850: LD_INT 85
13852: PUSH
13853: LD_INT 86
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: ST_TO_ADDR
13911: GO 13914
13913: POP
// if state > - 1 and state < 3 then
13914: LD_VAR 0 3
13918: PUSH
13919: LD_INT 1
13921: NEG
13922: GREATER
13923: PUSH
13924: LD_VAR 0 3
13928: PUSH
13929: LD_INT 3
13931: LESS
13932: AND
13933: IFFALSE 13990
// for i in result do
13935: LD_ADDR_VAR 0 5
13939: PUSH
13940: LD_VAR 0 4
13944: PUSH
13945: FOR_IN
13946: IFFALSE 13988
// if GetTech ( i , side ) <> state then
13948: LD_VAR 0 5
13952: PPUSH
13953: LD_VAR 0 1
13957: PPUSH
13958: CALL_OW 321
13962: PUSH
13963: LD_VAR 0 3
13967: NONEQUAL
13968: IFFALSE 13986
// result := result diff i ;
13970: LD_ADDR_VAR 0 4
13974: PUSH
13975: LD_VAR 0 4
13979: PUSH
13980: LD_VAR 0 5
13984: DIFF
13985: ST_TO_ADDR
13986: GO 13945
13988: POP
13989: POP
// end ;
13990: LD_VAR 0 4
13994: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
13995: LD_INT 0
13997: PPUSH
13998: PPUSH
13999: PPUSH
// result := true ;
14000: LD_ADDR_VAR 0 3
14004: PUSH
14005: LD_INT 1
14007: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
14008: LD_ADDR_VAR 0 5
14012: PUSH
14013: LD_VAR 0 2
14017: PPUSH
14018: CALL_OW 480
14022: ST_TO_ADDR
// if not tmp then
14023: LD_VAR 0 5
14027: NOT
14028: IFFALSE 14032
// exit ;
14030: GO 14081
// for i in tmp do
14032: LD_ADDR_VAR 0 4
14036: PUSH
14037: LD_VAR 0 5
14041: PUSH
14042: FOR_IN
14043: IFFALSE 14079
// if GetTech ( i , side ) <> state_researched then
14045: LD_VAR 0 4
14049: PPUSH
14050: LD_VAR 0 1
14054: PPUSH
14055: CALL_OW 321
14059: PUSH
14060: LD_INT 2
14062: NONEQUAL
14063: IFFALSE 14077
// begin result := false ;
14065: LD_ADDR_VAR 0 3
14069: PUSH
14070: LD_INT 0
14072: ST_TO_ADDR
// exit ;
14073: POP
14074: POP
14075: GO 14081
// end ;
14077: GO 14042
14079: POP
14080: POP
// end ;
14081: LD_VAR 0 3
14085: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
14086: LD_INT 0
14088: PPUSH
14089: PPUSH
14090: PPUSH
14091: PPUSH
14092: PPUSH
14093: PPUSH
14094: PPUSH
14095: PPUSH
14096: PPUSH
14097: PPUSH
14098: PPUSH
14099: PPUSH
14100: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
14101: LD_VAR 0 1
14105: NOT
14106: PUSH
14107: LD_VAR 0 1
14111: PPUSH
14112: CALL_OW 257
14116: PUSH
14117: LD_INT 9
14119: NONEQUAL
14120: OR
14121: IFFALSE 14125
// exit ;
14123: GO 14698
// side := GetSide ( unit ) ;
14125: LD_ADDR_VAR 0 9
14129: PUSH
14130: LD_VAR 0 1
14134: PPUSH
14135: CALL_OW 255
14139: ST_TO_ADDR
// tech_space := tech_spacanom ;
14140: LD_ADDR_VAR 0 12
14144: PUSH
14145: LD_INT 29
14147: ST_TO_ADDR
// tech_time := tech_taurad ;
14148: LD_ADDR_VAR 0 13
14152: PUSH
14153: LD_INT 28
14155: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
14156: LD_ADDR_VAR 0 11
14160: PUSH
14161: LD_VAR 0 1
14165: PPUSH
14166: CALL_OW 310
14170: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
14171: LD_VAR 0 11
14175: PPUSH
14176: CALL_OW 247
14180: PUSH
14181: LD_INT 2
14183: EQUAL
14184: IFFALSE 14188
// exit ;
14186: GO 14698
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14188: LD_ADDR_VAR 0 8
14192: PUSH
14193: LD_INT 81
14195: PUSH
14196: LD_VAR 0 9
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 3
14207: PUSH
14208: LD_INT 21
14210: PUSH
14211: LD_INT 3
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PPUSH
14226: CALL_OW 69
14230: ST_TO_ADDR
// if not tmp then
14231: LD_VAR 0 8
14235: NOT
14236: IFFALSE 14240
// exit ;
14238: GO 14698
// if in_unit then
14240: LD_VAR 0 11
14244: IFFALSE 14268
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
14246: LD_ADDR_VAR 0 10
14250: PUSH
14251: LD_VAR 0 8
14255: PPUSH
14256: LD_VAR 0 11
14260: PPUSH
14261: CALL_OW 74
14265: ST_TO_ADDR
14266: GO 14288
// enemy := NearestUnitToUnit ( tmp , unit ) ;
14268: LD_ADDR_VAR 0 10
14272: PUSH
14273: LD_VAR 0 8
14277: PPUSH
14278: LD_VAR 0 1
14282: PPUSH
14283: CALL_OW 74
14287: ST_TO_ADDR
// if not enemy then
14288: LD_VAR 0 10
14292: NOT
14293: IFFALSE 14297
// exit ;
14295: GO 14698
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
14297: LD_VAR 0 11
14301: PUSH
14302: LD_VAR 0 11
14306: PPUSH
14307: LD_VAR 0 10
14311: PPUSH
14312: CALL_OW 296
14316: PUSH
14317: LD_INT 13
14319: GREATER
14320: AND
14321: PUSH
14322: LD_VAR 0 1
14326: PPUSH
14327: LD_VAR 0 10
14331: PPUSH
14332: CALL_OW 296
14336: PUSH
14337: LD_INT 12
14339: GREATER
14340: OR
14341: IFFALSE 14345
// exit ;
14343: GO 14698
// missile := [ 1 ] ;
14345: LD_ADDR_VAR 0 14
14349: PUSH
14350: LD_INT 1
14352: PUSH
14353: EMPTY
14354: LIST
14355: ST_TO_ADDR
// if Researched ( side , tech_space ) then
14356: LD_VAR 0 9
14360: PPUSH
14361: LD_VAR 0 12
14365: PPUSH
14366: CALL_OW 325
14370: IFFALSE 14399
// missile := Replace ( missile , missile + 1 , 2 ) ;
14372: LD_ADDR_VAR 0 14
14376: PUSH
14377: LD_VAR 0 14
14381: PPUSH
14382: LD_VAR 0 14
14386: PUSH
14387: LD_INT 1
14389: PLUS
14390: PPUSH
14391: LD_INT 2
14393: PPUSH
14394: CALL_OW 1
14398: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
14399: LD_VAR 0 9
14403: PPUSH
14404: LD_VAR 0 13
14408: PPUSH
14409: CALL_OW 325
14413: PUSH
14414: LD_VAR 0 10
14418: PPUSH
14419: CALL_OW 255
14423: PPUSH
14424: LD_VAR 0 13
14428: PPUSH
14429: CALL_OW 325
14433: NOT
14434: AND
14435: IFFALSE 14464
// missile := Replace ( missile , missile + 1 , 3 ) ;
14437: LD_ADDR_VAR 0 14
14441: PUSH
14442: LD_VAR 0 14
14446: PPUSH
14447: LD_VAR 0 14
14451: PUSH
14452: LD_INT 1
14454: PLUS
14455: PPUSH
14456: LD_INT 3
14458: PPUSH
14459: CALL_OW 1
14463: ST_TO_ADDR
// if missile < 2 then
14464: LD_VAR 0 14
14468: PUSH
14469: LD_INT 2
14471: LESS
14472: IFFALSE 14476
// exit ;
14474: GO 14698
// x := GetX ( enemy ) ;
14476: LD_ADDR_VAR 0 4
14480: PUSH
14481: LD_VAR 0 10
14485: PPUSH
14486: CALL_OW 250
14490: ST_TO_ADDR
// y := GetY ( enemy ) ;
14491: LD_ADDR_VAR 0 5
14495: PUSH
14496: LD_VAR 0 10
14500: PPUSH
14501: CALL_OW 251
14505: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
14506: LD_ADDR_VAR 0 6
14510: PUSH
14511: LD_VAR 0 4
14515: PUSH
14516: LD_INT 1
14518: NEG
14519: PPUSH
14520: LD_INT 1
14522: PPUSH
14523: CALL_OW 12
14527: PLUS
14528: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
14529: LD_ADDR_VAR 0 7
14533: PUSH
14534: LD_VAR 0 5
14538: PUSH
14539: LD_INT 1
14541: NEG
14542: PPUSH
14543: LD_INT 1
14545: PPUSH
14546: CALL_OW 12
14550: PLUS
14551: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14552: LD_VAR 0 6
14556: PPUSH
14557: LD_VAR 0 7
14561: PPUSH
14562: CALL_OW 488
14566: NOT
14567: IFFALSE 14589
// begin _x := x ;
14569: LD_ADDR_VAR 0 6
14573: PUSH
14574: LD_VAR 0 4
14578: ST_TO_ADDR
// _y := y ;
14579: LD_ADDR_VAR 0 7
14583: PUSH
14584: LD_VAR 0 5
14588: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
14589: LD_ADDR_VAR 0 3
14593: PUSH
14594: LD_INT 1
14596: PPUSH
14597: LD_VAR 0 14
14601: PPUSH
14602: CALL_OW 12
14606: ST_TO_ADDR
// case i of 1 :
14607: LD_VAR 0 3
14611: PUSH
14612: LD_INT 1
14614: DOUBLE
14615: EQUAL
14616: IFTRUE 14620
14618: GO 14637
14620: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
14621: LD_VAR 0 1
14625: PPUSH
14626: LD_VAR 0 10
14630: PPUSH
14631: CALL_OW 115
14635: GO 14698
14637: LD_INT 2
14639: DOUBLE
14640: EQUAL
14641: IFTRUE 14645
14643: GO 14667
14645: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
14646: LD_VAR 0 1
14650: PPUSH
14651: LD_VAR 0 6
14655: PPUSH
14656: LD_VAR 0 7
14660: PPUSH
14661: CALL_OW 153
14665: GO 14698
14667: LD_INT 3
14669: DOUBLE
14670: EQUAL
14671: IFTRUE 14675
14673: GO 14697
14675: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
14676: LD_VAR 0 1
14680: PPUSH
14681: LD_VAR 0 6
14685: PPUSH
14686: LD_VAR 0 7
14690: PPUSH
14691: CALL_OW 154
14695: GO 14698
14697: POP
// end ;
14698: LD_VAR 0 2
14702: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
14703: LD_INT 0
14705: PPUSH
14706: PPUSH
14707: PPUSH
14708: PPUSH
14709: PPUSH
14710: PPUSH
// if not unit or not building then
14711: LD_VAR 0 1
14715: NOT
14716: PUSH
14717: LD_VAR 0 2
14721: NOT
14722: OR
14723: IFFALSE 14727
// exit ;
14725: GO 14885
// x := GetX ( building ) ;
14727: LD_ADDR_VAR 0 5
14731: PUSH
14732: LD_VAR 0 2
14736: PPUSH
14737: CALL_OW 250
14741: ST_TO_ADDR
// y := GetY ( building ) ;
14742: LD_ADDR_VAR 0 6
14746: PUSH
14747: LD_VAR 0 2
14751: PPUSH
14752: CALL_OW 251
14756: ST_TO_ADDR
// for i = 0 to 5 do
14757: LD_ADDR_VAR 0 4
14761: PUSH
14762: DOUBLE
14763: LD_INT 0
14765: DEC
14766: ST_TO_ADDR
14767: LD_INT 5
14769: PUSH
14770: FOR_TO
14771: IFFALSE 14883
// begin _x := ShiftX ( x , i , 3 ) ;
14773: LD_ADDR_VAR 0 7
14777: PUSH
14778: LD_VAR 0 5
14782: PPUSH
14783: LD_VAR 0 4
14787: PPUSH
14788: LD_INT 3
14790: PPUSH
14791: CALL_OW 272
14795: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
14796: LD_ADDR_VAR 0 8
14800: PUSH
14801: LD_VAR 0 6
14805: PPUSH
14806: LD_VAR 0 4
14810: PPUSH
14811: LD_INT 3
14813: PPUSH
14814: CALL_OW 273
14818: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14819: LD_VAR 0 7
14823: PPUSH
14824: LD_VAR 0 8
14828: PPUSH
14829: CALL_OW 488
14833: NOT
14834: IFFALSE 14838
// continue ;
14836: GO 14770
// if HexInfo ( _x , _y ) = 0 then
14838: LD_VAR 0 7
14842: PPUSH
14843: LD_VAR 0 8
14847: PPUSH
14848: CALL_OW 428
14852: PUSH
14853: LD_INT 0
14855: EQUAL
14856: IFFALSE 14881
// begin ComMoveXY ( unit , _x , _y ) ;
14858: LD_VAR 0 1
14862: PPUSH
14863: LD_VAR 0 7
14867: PPUSH
14868: LD_VAR 0 8
14872: PPUSH
14873: CALL_OW 111
// exit ;
14877: POP
14878: POP
14879: GO 14885
// end ; end ;
14881: GO 14770
14883: POP
14884: POP
// end ;
14885: LD_VAR 0 3
14889: RET
// export function ScanBase ( side , base_area ) ; begin
14890: LD_INT 0
14892: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
14893: LD_ADDR_VAR 0 3
14897: PUSH
14898: LD_VAR 0 2
14902: PPUSH
14903: LD_INT 81
14905: PUSH
14906: LD_VAR 0 1
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: PPUSH
14915: CALL_OW 70
14919: ST_TO_ADDR
// end ;
14920: LD_VAR 0 3
14924: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
14925: LD_INT 0
14927: PPUSH
14928: PPUSH
14929: PPUSH
14930: PPUSH
// result := false ;
14931: LD_ADDR_VAR 0 2
14935: PUSH
14936: LD_INT 0
14938: ST_TO_ADDR
// side := GetSide ( unit ) ;
14939: LD_ADDR_VAR 0 3
14943: PUSH
14944: LD_VAR 0 1
14948: PPUSH
14949: CALL_OW 255
14953: ST_TO_ADDR
// nat := GetNation ( unit ) ;
14954: LD_ADDR_VAR 0 4
14958: PUSH
14959: LD_VAR 0 1
14963: PPUSH
14964: CALL_OW 248
14968: ST_TO_ADDR
// case nat of 1 :
14969: LD_VAR 0 4
14973: PUSH
14974: LD_INT 1
14976: DOUBLE
14977: EQUAL
14978: IFTRUE 14982
14980: GO 14993
14982: POP
// tech := tech_lassight ; 2 :
14983: LD_ADDR_VAR 0 5
14987: PUSH
14988: LD_INT 12
14990: ST_TO_ADDR
14991: GO 15032
14993: LD_INT 2
14995: DOUBLE
14996: EQUAL
14997: IFTRUE 15001
14999: GO 15012
15001: POP
// tech := tech_mortar ; 3 :
15002: LD_ADDR_VAR 0 5
15006: PUSH
15007: LD_INT 41
15009: ST_TO_ADDR
15010: GO 15032
15012: LD_INT 3
15014: DOUBLE
15015: EQUAL
15016: IFTRUE 15020
15018: GO 15031
15020: POP
// tech := tech_bazooka ; end ;
15021: LD_ADDR_VAR 0 5
15025: PUSH
15026: LD_INT 44
15028: ST_TO_ADDR
15029: GO 15032
15031: POP
// if Researched ( side , tech ) then
15032: LD_VAR 0 3
15036: PPUSH
15037: LD_VAR 0 5
15041: PPUSH
15042: CALL_OW 325
15046: IFFALSE 15073
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
15048: LD_ADDR_VAR 0 2
15052: PUSH
15053: LD_INT 5
15055: PUSH
15056: LD_INT 8
15058: PUSH
15059: LD_INT 9
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: LIST
15066: PUSH
15067: LD_VAR 0 4
15071: ARRAY
15072: ST_TO_ADDR
// end ;
15073: LD_VAR 0 2
15077: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
15078: LD_INT 0
15080: PPUSH
15081: PPUSH
15082: PPUSH
// if not mines then
15083: LD_VAR 0 2
15087: NOT
15088: IFFALSE 15092
// exit ;
15090: GO 15236
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15092: LD_ADDR_VAR 0 5
15096: PUSH
15097: LD_INT 81
15099: PUSH
15100: LD_VAR 0 1
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PUSH
15109: LD_INT 3
15111: PUSH
15112: LD_INT 21
15114: PUSH
15115: LD_INT 3
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PPUSH
15130: CALL_OW 69
15134: ST_TO_ADDR
// for i in mines do
15135: LD_ADDR_VAR 0 4
15139: PUSH
15140: LD_VAR 0 2
15144: PUSH
15145: FOR_IN
15146: IFFALSE 15234
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
15148: LD_VAR 0 4
15152: PUSH
15153: LD_INT 1
15155: ARRAY
15156: PPUSH
15157: LD_VAR 0 4
15161: PUSH
15162: LD_INT 2
15164: ARRAY
15165: PPUSH
15166: CALL_OW 458
15170: NOT
15171: IFFALSE 15175
// continue ;
15173: GO 15145
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
15175: LD_VAR 0 4
15179: PUSH
15180: LD_INT 1
15182: ARRAY
15183: PPUSH
15184: LD_VAR 0 4
15188: PUSH
15189: LD_INT 2
15191: ARRAY
15192: PPUSH
15193: CALL_OW 428
15197: PUSH
15198: LD_VAR 0 5
15202: IN
15203: IFFALSE 15232
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
15205: LD_VAR 0 4
15209: PUSH
15210: LD_INT 1
15212: ARRAY
15213: PPUSH
15214: LD_VAR 0 4
15218: PUSH
15219: LD_INT 2
15221: ARRAY
15222: PPUSH
15223: LD_VAR 0 1
15227: PPUSH
15228: CALL_OW 456
// end ;
15232: GO 15145
15234: POP
15235: POP
// end ;
15236: LD_VAR 0 3
15240: RET
// export function Count ( array ) ; var i ; begin
15241: LD_INT 0
15243: PPUSH
15244: PPUSH
// result := 0 ;
15245: LD_ADDR_VAR 0 2
15249: PUSH
15250: LD_INT 0
15252: ST_TO_ADDR
// for i in array do
15253: LD_ADDR_VAR 0 3
15257: PUSH
15258: LD_VAR 0 1
15262: PUSH
15263: FOR_IN
15264: IFFALSE 15288
// if i then
15266: LD_VAR 0 3
15270: IFFALSE 15286
// result := result + 1 ;
15272: LD_ADDR_VAR 0 2
15276: PUSH
15277: LD_VAR 0 2
15281: PUSH
15282: LD_INT 1
15284: PLUS
15285: ST_TO_ADDR
15286: GO 15263
15288: POP
15289: POP
// end ;
15290: LD_VAR 0 2
15294: RET
// export function IsEmpty ( building ) ; begin
15295: LD_INT 0
15297: PPUSH
// if not building then
15298: LD_VAR 0 1
15302: NOT
15303: IFFALSE 15307
// exit ;
15305: GO 15350
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15307: LD_ADDR_VAR 0 2
15311: PUSH
15312: LD_VAR 0 1
15316: PUSH
15317: LD_INT 22
15319: PUSH
15320: LD_VAR 0 1
15324: PPUSH
15325: CALL_OW 255
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: PUSH
15334: LD_INT 58
15336: PUSH
15337: EMPTY
15338: LIST
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PPUSH
15344: CALL_OW 69
15348: IN
15349: ST_TO_ADDR
// end ;
15350: LD_VAR 0 2
15354: RET
// export function IsNotFull ( building ) ; begin
15355: LD_INT 0
15357: PPUSH
// if not building then
15358: LD_VAR 0 1
15362: NOT
15363: IFFALSE 15367
// exit ;
15365: GO 15386
// result := UnitsInside ( building ) < 6 ;
15367: LD_ADDR_VAR 0 2
15371: PUSH
15372: LD_VAR 0 1
15376: PPUSH
15377: CALL_OW 313
15381: PUSH
15382: LD_INT 6
15384: LESS
15385: ST_TO_ADDR
// end ;
15386: LD_VAR 0 2
15390: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15391: LD_INT 0
15393: PPUSH
15394: PPUSH
15395: PPUSH
15396: PPUSH
// tmp := [ ] ;
15397: LD_ADDR_VAR 0 3
15401: PUSH
15402: EMPTY
15403: ST_TO_ADDR
// list := [ ] ;
15404: LD_ADDR_VAR 0 5
15408: PUSH
15409: EMPTY
15410: ST_TO_ADDR
// for i = 16 to 25 do
15411: LD_ADDR_VAR 0 4
15415: PUSH
15416: DOUBLE
15417: LD_INT 16
15419: DEC
15420: ST_TO_ADDR
15421: LD_INT 25
15423: PUSH
15424: FOR_TO
15425: IFFALSE 15498
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15427: LD_ADDR_VAR 0 3
15431: PUSH
15432: LD_VAR 0 3
15436: PUSH
15437: LD_INT 22
15439: PUSH
15440: LD_VAR 0 1
15444: PPUSH
15445: CALL_OW 255
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: LD_INT 91
15456: PUSH
15457: LD_VAR 0 1
15461: PUSH
15462: LD_INT 6
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: LIST
15469: PUSH
15470: LD_INT 30
15472: PUSH
15473: LD_VAR 0 4
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: LIST
15486: PUSH
15487: EMPTY
15488: LIST
15489: PPUSH
15490: CALL_OW 69
15494: ADD
15495: ST_TO_ADDR
15496: GO 15424
15498: POP
15499: POP
// for i = 1 to tmp do
15500: LD_ADDR_VAR 0 4
15504: PUSH
15505: DOUBLE
15506: LD_INT 1
15508: DEC
15509: ST_TO_ADDR
15510: LD_VAR 0 3
15514: PUSH
15515: FOR_TO
15516: IFFALSE 15604
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
15518: LD_ADDR_VAR 0 5
15522: PUSH
15523: LD_VAR 0 5
15527: PUSH
15528: LD_VAR 0 3
15532: PUSH
15533: LD_VAR 0 4
15537: ARRAY
15538: PPUSH
15539: CALL_OW 266
15543: PUSH
15544: LD_VAR 0 3
15548: PUSH
15549: LD_VAR 0 4
15553: ARRAY
15554: PPUSH
15555: CALL_OW 250
15559: PUSH
15560: LD_VAR 0 3
15564: PUSH
15565: LD_VAR 0 4
15569: ARRAY
15570: PPUSH
15571: CALL_OW 251
15575: PUSH
15576: LD_VAR 0 3
15580: PUSH
15581: LD_VAR 0 4
15585: ARRAY
15586: PPUSH
15587: CALL_OW 254
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: PUSH
15598: EMPTY
15599: LIST
15600: ADD
15601: ST_TO_ADDR
15602: GO 15515
15604: POP
15605: POP
// result := list ;
15606: LD_ADDR_VAR 0 2
15610: PUSH
15611: LD_VAR 0 5
15615: ST_TO_ADDR
// end ;
15616: LD_VAR 0 2
15620: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
15621: LD_INT 0
15623: PPUSH
15624: PPUSH
15625: PPUSH
15626: PPUSH
15627: PPUSH
15628: PPUSH
15629: PPUSH
// if not factory then
15630: LD_VAR 0 1
15634: NOT
15635: IFFALSE 15639
// exit ;
15637: GO 16232
// if control = control_apeman then
15639: LD_VAR 0 4
15643: PUSH
15644: LD_INT 5
15646: EQUAL
15647: IFFALSE 15756
// begin tmp := UnitsInside ( factory ) ;
15649: LD_ADDR_VAR 0 8
15653: PUSH
15654: LD_VAR 0 1
15658: PPUSH
15659: CALL_OW 313
15663: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15664: LD_VAR 0 8
15668: PPUSH
15669: LD_INT 25
15671: PUSH
15672: LD_INT 12
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PPUSH
15679: CALL_OW 72
15683: NOT
15684: IFFALSE 15694
// control := control_manual ;
15686: LD_ADDR_VAR 0 4
15690: PUSH
15691: LD_INT 1
15693: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
15694: LD_ADDR_VAR 0 8
15698: PUSH
15699: LD_VAR 0 1
15703: PPUSH
15704: CALL 15391 0 1
15708: ST_TO_ADDR
// if tmp then
15709: LD_VAR 0 8
15713: IFFALSE 15756
// begin for i in tmp do
15715: LD_ADDR_VAR 0 7
15719: PUSH
15720: LD_VAR 0 8
15724: PUSH
15725: FOR_IN
15726: IFFALSE 15754
// if i [ 1 ] = b_ext_radio then
15728: LD_VAR 0 7
15732: PUSH
15733: LD_INT 1
15735: ARRAY
15736: PUSH
15737: LD_INT 22
15739: EQUAL
15740: IFFALSE 15752
// begin control := control_remote ;
15742: LD_ADDR_VAR 0 4
15746: PUSH
15747: LD_INT 2
15749: ST_TO_ADDR
// break ;
15750: GO 15754
// end ;
15752: GO 15725
15754: POP
15755: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15756: LD_VAR 0 1
15760: PPUSH
15761: LD_VAR 0 2
15765: PPUSH
15766: LD_VAR 0 3
15770: PPUSH
15771: LD_VAR 0 4
15775: PPUSH
15776: LD_VAR 0 5
15780: PPUSH
15781: CALL_OW 448
15785: IFFALSE 15820
// begin result := [ chassis , engine , control , weapon ] ;
15787: LD_ADDR_VAR 0 6
15791: PUSH
15792: LD_VAR 0 2
15796: PUSH
15797: LD_VAR 0 3
15801: PUSH
15802: LD_VAR 0 4
15806: PUSH
15807: LD_VAR 0 5
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: ST_TO_ADDR
// exit ;
15818: GO 16232
// end ; _chassis := AvailableChassisList ( factory ) ;
15820: LD_ADDR_VAR 0 9
15824: PUSH
15825: LD_VAR 0 1
15829: PPUSH
15830: CALL_OW 475
15834: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
15835: LD_ADDR_VAR 0 11
15839: PUSH
15840: LD_VAR 0 1
15844: PPUSH
15845: CALL_OW 476
15849: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
15850: LD_ADDR_VAR 0 12
15854: PUSH
15855: LD_VAR 0 1
15859: PPUSH
15860: CALL_OW 477
15864: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
15865: LD_ADDR_VAR 0 10
15869: PUSH
15870: LD_VAR 0 1
15874: PPUSH
15875: CALL_OW 478
15879: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
15880: LD_VAR 0 9
15884: NOT
15885: PUSH
15886: LD_VAR 0 11
15890: NOT
15891: OR
15892: PUSH
15893: LD_VAR 0 12
15897: NOT
15898: OR
15899: PUSH
15900: LD_VAR 0 10
15904: NOT
15905: OR
15906: IFFALSE 15941
// begin result := [ chassis , engine , control , weapon ] ;
15908: LD_ADDR_VAR 0 6
15912: PUSH
15913: LD_VAR 0 2
15917: PUSH
15918: LD_VAR 0 3
15922: PUSH
15923: LD_VAR 0 4
15927: PUSH
15928: LD_VAR 0 5
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: ST_TO_ADDR
// exit ;
15939: GO 16232
// end ; if not chassis in _chassis then
15941: LD_VAR 0 2
15945: PUSH
15946: LD_VAR 0 9
15950: IN
15951: NOT
15952: IFFALSE 15978
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
15954: LD_ADDR_VAR 0 2
15958: PUSH
15959: LD_VAR 0 9
15963: PUSH
15964: LD_INT 1
15966: PPUSH
15967: LD_VAR 0 9
15971: PPUSH
15972: CALL_OW 12
15976: ARRAY
15977: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
15978: LD_VAR 0 2
15982: PPUSH
15983: LD_VAR 0 3
15987: PPUSH
15988: CALL 16237 0 2
15992: NOT
15993: IFFALSE 16052
// repeat engine := _engine [ 1 ] ;
15995: LD_ADDR_VAR 0 3
15999: PUSH
16000: LD_VAR 0 11
16004: PUSH
16005: LD_INT 1
16007: ARRAY
16008: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
16009: LD_ADDR_VAR 0 11
16013: PUSH
16014: LD_VAR 0 11
16018: PPUSH
16019: LD_INT 1
16021: PPUSH
16022: CALL_OW 3
16026: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
16027: LD_VAR 0 2
16031: PPUSH
16032: LD_VAR 0 3
16036: PPUSH
16037: CALL 16237 0 2
16041: PUSH
16042: LD_VAR 0 11
16046: PUSH
16047: EMPTY
16048: EQUAL
16049: OR
16050: IFFALSE 15995
// if not control in _control then
16052: LD_VAR 0 4
16056: PUSH
16057: LD_VAR 0 12
16061: IN
16062: NOT
16063: IFFALSE 16089
// control := _control [ rand ( 1 , _control ) ] ;
16065: LD_ADDR_VAR 0 4
16069: PUSH
16070: LD_VAR 0 12
16074: PUSH
16075: LD_INT 1
16077: PPUSH
16078: LD_VAR 0 12
16082: PPUSH
16083: CALL_OW 12
16087: ARRAY
16088: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
16089: LD_VAR 0 2
16093: PPUSH
16094: LD_VAR 0 5
16098: PPUSH
16099: CALL 16457 0 2
16103: NOT
16104: IFFALSE 16163
// repeat weapon := _weapon [ 1 ] ;
16106: LD_ADDR_VAR 0 5
16110: PUSH
16111: LD_VAR 0 10
16115: PUSH
16116: LD_INT 1
16118: ARRAY
16119: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
16120: LD_ADDR_VAR 0 10
16124: PUSH
16125: LD_VAR 0 10
16129: PPUSH
16130: LD_INT 1
16132: PPUSH
16133: CALL_OW 3
16137: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
16138: LD_VAR 0 2
16142: PPUSH
16143: LD_VAR 0 5
16147: PPUSH
16148: CALL 16457 0 2
16152: PUSH
16153: LD_VAR 0 10
16157: PUSH
16158: EMPTY
16159: EQUAL
16160: OR
16161: IFFALSE 16106
// result := [ ] ;
16163: LD_ADDR_VAR 0 6
16167: PUSH
16168: EMPTY
16169: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16170: LD_VAR 0 1
16174: PPUSH
16175: LD_VAR 0 2
16179: PPUSH
16180: LD_VAR 0 3
16184: PPUSH
16185: LD_VAR 0 4
16189: PPUSH
16190: LD_VAR 0 5
16194: PPUSH
16195: CALL_OW 448
16199: IFFALSE 16232
// result := [ chassis , engine , control , weapon ] ;
16201: LD_ADDR_VAR 0 6
16205: PUSH
16206: LD_VAR 0 2
16210: PUSH
16211: LD_VAR 0 3
16215: PUSH
16216: LD_VAR 0 4
16220: PUSH
16221: LD_VAR 0 5
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: ST_TO_ADDR
// end ;
16232: LD_VAR 0 6
16236: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
16237: LD_INT 0
16239: PPUSH
// if not chassis or not engine then
16240: LD_VAR 0 1
16244: NOT
16245: PUSH
16246: LD_VAR 0 2
16250: NOT
16251: OR
16252: IFFALSE 16256
// exit ;
16254: GO 16452
// case engine of engine_solar :
16256: LD_VAR 0 2
16260: PUSH
16261: LD_INT 2
16263: DOUBLE
16264: EQUAL
16265: IFTRUE 16269
16267: GO 16307
16269: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
16270: LD_ADDR_VAR 0 3
16274: PUSH
16275: LD_INT 11
16277: PUSH
16278: LD_INT 12
16280: PUSH
16281: LD_INT 13
16283: PUSH
16284: LD_INT 14
16286: PUSH
16287: LD_INT 1
16289: PUSH
16290: LD_INT 2
16292: PUSH
16293: LD_INT 3
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: ST_TO_ADDR
16305: GO 16436
16307: LD_INT 1
16309: DOUBLE
16310: EQUAL
16311: IFTRUE 16315
16313: GO 16377
16315: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
16316: LD_ADDR_VAR 0 3
16320: PUSH
16321: LD_INT 11
16323: PUSH
16324: LD_INT 12
16326: PUSH
16327: LD_INT 13
16329: PUSH
16330: LD_INT 14
16332: PUSH
16333: LD_INT 1
16335: PUSH
16336: LD_INT 2
16338: PUSH
16339: LD_INT 3
16341: PUSH
16342: LD_INT 4
16344: PUSH
16345: LD_INT 5
16347: PUSH
16348: LD_INT 21
16350: PUSH
16351: LD_INT 23
16353: PUSH
16354: LD_INT 22
16356: PUSH
16357: LD_INT 24
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: ST_TO_ADDR
16375: GO 16436
16377: LD_INT 3
16379: DOUBLE
16380: EQUAL
16381: IFTRUE 16385
16383: GO 16435
16385: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16386: LD_ADDR_VAR 0 3
16390: PUSH
16391: LD_INT 13
16393: PUSH
16394: LD_INT 14
16396: PUSH
16397: LD_INT 2
16399: PUSH
16400: LD_INT 3
16402: PUSH
16403: LD_INT 4
16405: PUSH
16406: LD_INT 5
16408: PUSH
16409: LD_INT 21
16411: PUSH
16412: LD_INT 22
16414: PUSH
16415: LD_INT 23
16417: PUSH
16418: LD_INT 24
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: ST_TO_ADDR
16433: GO 16436
16435: POP
// result := ( chassis in result ) ;
16436: LD_ADDR_VAR 0 3
16440: PUSH
16441: LD_VAR 0 1
16445: PUSH
16446: LD_VAR 0 3
16450: IN
16451: ST_TO_ADDR
// end ;
16452: LD_VAR 0 3
16456: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16457: LD_INT 0
16459: PPUSH
// if not chassis or not weapon then
16460: LD_VAR 0 1
16464: NOT
16465: PUSH
16466: LD_VAR 0 2
16470: NOT
16471: OR
16472: IFFALSE 16476
// exit ;
16474: GO 17538
// case weapon of us_machine_gun :
16476: LD_VAR 0 2
16480: PUSH
16481: LD_INT 2
16483: DOUBLE
16484: EQUAL
16485: IFTRUE 16489
16487: GO 16519
16489: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16490: LD_ADDR_VAR 0 3
16494: PUSH
16495: LD_INT 1
16497: PUSH
16498: LD_INT 2
16500: PUSH
16501: LD_INT 3
16503: PUSH
16504: LD_INT 4
16506: PUSH
16507: LD_INT 5
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: ST_TO_ADDR
16517: GO 17522
16519: LD_INT 3
16521: DOUBLE
16522: EQUAL
16523: IFTRUE 16527
16525: GO 16557
16527: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
16528: LD_ADDR_VAR 0 3
16532: PUSH
16533: LD_INT 1
16535: PUSH
16536: LD_INT 2
16538: PUSH
16539: LD_INT 3
16541: PUSH
16542: LD_INT 4
16544: PUSH
16545: LD_INT 5
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: ST_TO_ADDR
16555: GO 17522
16557: LD_INT 11
16559: DOUBLE
16560: EQUAL
16561: IFTRUE 16565
16563: GO 16595
16565: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
16566: LD_ADDR_VAR 0 3
16570: PUSH
16571: LD_INT 1
16573: PUSH
16574: LD_INT 2
16576: PUSH
16577: LD_INT 3
16579: PUSH
16580: LD_INT 4
16582: PUSH
16583: LD_INT 5
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: ST_TO_ADDR
16593: GO 17522
16595: LD_INT 4
16597: DOUBLE
16598: EQUAL
16599: IFTRUE 16603
16601: GO 16629
16603: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
16604: LD_ADDR_VAR 0 3
16608: PUSH
16609: LD_INT 2
16611: PUSH
16612: LD_INT 3
16614: PUSH
16615: LD_INT 4
16617: PUSH
16618: LD_INT 5
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: ST_TO_ADDR
16627: GO 17522
16629: LD_INT 5
16631: DOUBLE
16632: EQUAL
16633: IFTRUE 16637
16635: GO 16663
16637: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
16638: LD_ADDR_VAR 0 3
16642: PUSH
16643: LD_INT 2
16645: PUSH
16646: LD_INT 3
16648: PUSH
16649: LD_INT 4
16651: PUSH
16652: LD_INT 5
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: ST_TO_ADDR
16661: GO 17522
16663: LD_INT 9
16665: DOUBLE
16666: EQUAL
16667: IFTRUE 16671
16669: GO 16697
16671: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
16672: LD_ADDR_VAR 0 3
16676: PUSH
16677: LD_INT 2
16679: PUSH
16680: LD_INT 3
16682: PUSH
16683: LD_INT 4
16685: PUSH
16686: LD_INT 5
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: ST_TO_ADDR
16695: GO 17522
16697: LD_INT 7
16699: DOUBLE
16700: EQUAL
16701: IFTRUE 16705
16703: GO 16731
16705: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
16706: LD_ADDR_VAR 0 3
16710: PUSH
16711: LD_INT 2
16713: PUSH
16714: LD_INT 3
16716: PUSH
16717: LD_INT 4
16719: PUSH
16720: LD_INT 5
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: ST_TO_ADDR
16729: GO 17522
16731: LD_INT 12
16733: DOUBLE
16734: EQUAL
16735: IFTRUE 16739
16737: GO 16765
16739: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
16740: LD_ADDR_VAR 0 3
16744: PUSH
16745: LD_INT 2
16747: PUSH
16748: LD_INT 3
16750: PUSH
16751: LD_INT 4
16753: PUSH
16754: LD_INT 5
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: ST_TO_ADDR
16763: GO 17522
16765: LD_INT 13
16767: DOUBLE
16768: EQUAL
16769: IFTRUE 16773
16771: GO 16799
16773: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
16774: LD_ADDR_VAR 0 3
16778: PUSH
16779: LD_INT 2
16781: PUSH
16782: LD_INT 3
16784: PUSH
16785: LD_INT 4
16787: PUSH
16788: LD_INT 5
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: ST_TO_ADDR
16797: GO 17522
16799: LD_INT 14
16801: DOUBLE
16802: EQUAL
16803: IFTRUE 16807
16805: GO 16825
16807: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
16808: LD_ADDR_VAR 0 3
16812: PUSH
16813: LD_INT 4
16815: PUSH
16816: LD_INT 5
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: ST_TO_ADDR
16823: GO 17522
16825: LD_INT 6
16827: DOUBLE
16828: EQUAL
16829: IFTRUE 16833
16831: GO 16851
16833: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
16834: LD_ADDR_VAR 0 3
16838: PUSH
16839: LD_INT 4
16841: PUSH
16842: LD_INT 5
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: ST_TO_ADDR
16849: GO 17522
16851: LD_INT 10
16853: DOUBLE
16854: EQUAL
16855: IFTRUE 16859
16857: GO 16877
16859: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
16860: LD_ADDR_VAR 0 3
16864: PUSH
16865: LD_INT 4
16867: PUSH
16868: LD_INT 5
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: ST_TO_ADDR
16875: GO 17522
16877: LD_INT 22
16879: DOUBLE
16880: EQUAL
16881: IFTRUE 16885
16883: GO 16911
16885: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
16886: LD_ADDR_VAR 0 3
16890: PUSH
16891: LD_INT 11
16893: PUSH
16894: LD_INT 12
16896: PUSH
16897: LD_INT 13
16899: PUSH
16900: LD_INT 14
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: ST_TO_ADDR
16909: GO 17522
16911: LD_INT 23
16913: DOUBLE
16914: EQUAL
16915: IFTRUE 16919
16917: GO 16945
16919: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
16920: LD_ADDR_VAR 0 3
16924: PUSH
16925: LD_INT 11
16927: PUSH
16928: LD_INT 12
16930: PUSH
16931: LD_INT 13
16933: PUSH
16934: LD_INT 14
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: ST_TO_ADDR
16943: GO 17522
16945: LD_INT 24
16947: DOUBLE
16948: EQUAL
16949: IFTRUE 16953
16951: GO 16979
16953: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
16954: LD_ADDR_VAR 0 3
16958: PUSH
16959: LD_INT 11
16961: PUSH
16962: LD_INT 12
16964: PUSH
16965: LD_INT 13
16967: PUSH
16968: LD_INT 14
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: ST_TO_ADDR
16977: GO 17522
16979: LD_INT 30
16981: DOUBLE
16982: EQUAL
16983: IFTRUE 16987
16985: GO 17013
16987: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
16988: LD_ADDR_VAR 0 3
16992: PUSH
16993: LD_INT 11
16995: PUSH
16996: LD_INT 12
16998: PUSH
16999: LD_INT 13
17001: PUSH
17002: LD_INT 14
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: ST_TO_ADDR
17011: GO 17522
17013: LD_INT 25
17015: DOUBLE
17016: EQUAL
17017: IFTRUE 17021
17019: GO 17039
17021: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
17022: LD_ADDR_VAR 0 3
17026: PUSH
17027: LD_INT 13
17029: PUSH
17030: LD_INT 14
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: ST_TO_ADDR
17037: GO 17522
17039: LD_INT 27
17041: DOUBLE
17042: EQUAL
17043: IFTRUE 17047
17045: GO 17065
17047: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
17048: LD_ADDR_VAR 0 3
17052: PUSH
17053: LD_INT 13
17055: PUSH
17056: LD_INT 14
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: ST_TO_ADDR
17063: GO 17522
17065: LD_EXP 103
17069: DOUBLE
17070: EQUAL
17071: IFTRUE 17075
17073: GO 17101
17075: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
17076: LD_ADDR_VAR 0 3
17080: PUSH
17081: LD_INT 11
17083: PUSH
17084: LD_INT 12
17086: PUSH
17087: LD_INT 13
17089: PUSH
17090: LD_INT 14
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: ST_TO_ADDR
17099: GO 17522
17101: LD_INT 28
17103: DOUBLE
17104: EQUAL
17105: IFTRUE 17109
17107: GO 17127
17109: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
17110: LD_ADDR_VAR 0 3
17114: PUSH
17115: LD_INT 13
17117: PUSH
17118: LD_INT 14
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: ST_TO_ADDR
17125: GO 17522
17127: LD_INT 29
17129: DOUBLE
17130: EQUAL
17131: IFTRUE 17135
17133: GO 17153
17135: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
17136: LD_ADDR_VAR 0 3
17140: PUSH
17141: LD_INT 13
17143: PUSH
17144: LD_INT 14
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: ST_TO_ADDR
17151: GO 17522
17153: LD_INT 31
17155: DOUBLE
17156: EQUAL
17157: IFTRUE 17161
17159: GO 17179
17161: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
17162: LD_ADDR_VAR 0 3
17166: PUSH
17167: LD_INT 13
17169: PUSH
17170: LD_INT 14
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: ST_TO_ADDR
17177: GO 17522
17179: LD_INT 26
17181: DOUBLE
17182: EQUAL
17183: IFTRUE 17187
17185: GO 17205
17187: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
17188: LD_ADDR_VAR 0 3
17192: PUSH
17193: LD_INT 13
17195: PUSH
17196: LD_INT 14
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: ST_TO_ADDR
17203: GO 17522
17205: LD_INT 42
17207: DOUBLE
17208: EQUAL
17209: IFTRUE 17213
17211: GO 17239
17213: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
17214: LD_ADDR_VAR 0 3
17218: PUSH
17219: LD_INT 21
17221: PUSH
17222: LD_INT 22
17224: PUSH
17225: LD_INT 23
17227: PUSH
17228: LD_INT 24
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: ST_TO_ADDR
17237: GO 17522
17239: LD_INT 43
17241: DOUBLE
17242: EQUAL
17243: IFTRUE 17247
17245: GO 17273
17247: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17248: LD_ADDR_VAR 0 3
17252: PUSH
17253: LD_INT 21
17255: PUSH
17256: LD_INT 22
17258: PUSH
17259: LD_INT 23
17261: PUSH
17262: LD_INT 24
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: ST_TO_ADDR
17271: GO 17522
17273: LD_INT 44
17275: DOUBLE
17276: EQUAL
17277: IFTRUE 17281
17279: GO 17307
17281: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
17282: LD_ADDR_VAR 0 3
17286: PUSH
17287: LD_INT 21
17289: PUSH
17290: LD_INT 22
17292: PUSH
17293: LD_INT 23
17295: PUSH
17296: LD_INT 24
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: ST_TO_ADDR
17305: GO 17522
17307: LD_INT 45
17309: DOUBLE
17310: EQUAL
17311: IFTRUE 17315
17313: GO 17341
17315: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
17316: LD_ADDR_VAR 0 3
17320: PUSH
17321: LD_INT 21
17323: PUSH
17324: LD_INT 22
17326: PUSH
17327: LD_INT 23
17329: PUSH
17330: LD_INT 24
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: ST_TO_ADDR
17339: GO 17522
17341: LD_INT 49
17343: DOUBLE
17344: EQUAL
17345: IFTRUE 17349
17347: GO 17375
17349: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17350: LD_ADDR_VAR 0 3
17354: PUSH
17355: LD_INT 21
17357: PUSH
17358: LD_INT 22
17360: PUSH
17361: LD_INT 23
17363: PUSH
17364: LD_INT 24
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: ST_TO_ADDR
17373: GO 17522
17375: LD_INT 51
17377: DOUBLE
17378: EQUAL
17379: IFTRUE 17383
17381: GO 17409
17383: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17384: LD_ADDR_VAR 0 3
17388: PUSH
17389: LD_INT 21
17391: PUSH
17392: LD_INT 22
17394: PUSH
17395: LD_INT 23
17397: PUSH
17398: LD_INT 24
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: ST_TO_ADDR
17407: GO 17522
17409: LD_INT 52
17411: DOUBLE
17412: EQUAL
17413: IFTRUE 17417
17415: GO 17443
17417: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17418: LD_ADDR_VAR 0 3
17422: PUSH
17423: LD_INT 21
17425: PUSH
17426: LD_INT 22
17428: PUSH
17429: LD_INT 23
17431: PUSH
17432: LD_INT 24
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: ST_TO_ADDR
17441: GO 17522
17443: LD_INT 53
17445: DOUBLE
17446: EQUAL
17447: IFTRUE 17451
17449: GO 17469
17451: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17452: LD_ADDR_VAR 0 3
17456: PUSH
17457: LD_INT 23
17459: PUSH
17460: LD_INT 24
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: ST_TO_ADDR
17467: GO 17522
17469: LD_INT 46
17471: DOUBLE
17472: EQUAL
17473: IFTRUE 17477
17475: GO 17495
17477: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17478: LD_ADDR_VAR 0 3
17482: PUSH
17483: LD_INT 23
17485: PUSH
17486: LD_INT 24
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: ST_TO_ADDR
17493: GO 17522
17495: LD_INT 47
17497: DOUBLE
17498: EQUAL
17499: IFTRUE 17503
17501: GO 17521
17503: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17504: LD_ADDR_VAR 0 3
17508: PUSH
17509: LD_INT 23
17511: PUSH
17512: LD_INT 24
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: ST_TO_ADDR
17519: GO 17522
17521: POP
// result := ( chassis in result ) ;
17522: LD_ADDR_VAR 0 3
17526: PUSH
17527: LD_VAR 0 1
17531: PUSH
17532: LD_VAR 0 3
17536: IN
17537: ST_TO_ADDR
// end ;
17538: LD_VAR 0 3
17542: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
17543: LD_INT 0
17545: PPUSH
17546: PPUSH
17547: PPUSH
17548: PPUSH
17549: PPUSH
17550: PPUSH
17551: PPUSH
// result := array ;
17552: LD_ADDR_VAR 0 5
17556: PUSH
17557: LD_VAR 0 1
17561: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
17562: LD_VAR 0 1
17566: NOT
17567: PUSH
17568: LD_VAR 0 2
17572: NOT
17573: OR
17574: PUSH
17575: LD_VAR 0 3
17579: NOT
17580: OR
17581: PUSH
17582: LD_VAR 0 2
17586: PUSH
17587: LD_VAR 0 1
17591: GREATER
17592: OR
17593: PUSH
17594: LD_VAR 0 3
17598: PUSH
17599: LD_VAR 0 1
17603: GREATER
17604: OR
17605: IFFALSE 17609
// exit ;
17607: GO 17905
// if direction then
17609: LD_VAR 0 4
17613: IFFALSE 17677
// begin d := 1 ;
17615: LD_ADDR_VAR 0 9
17619: PUSH
17620: LD_INT 1
17622: ST_TO_ADDR
// if i_from > i_to then
17623: LD_VAR 0 2
17627: PUSH
17628: LD_VAR 0 3
17632: GREATER
17633: IFFALSE 17659
// length := ( array - i_from ) + i_to else
17635: LD_ADDR_VAR 0 11
17639: PUSH
17640: LD_VAR 0 1
17644: PUSH
17645: LD_VAR 0 2
17649: MINUS
17650: PUSH
17651: LD_VAR 0 3
17655: PLUS
17656: ST_TO_ADDR
17657: GO 17675
// length := i_to - i_from ;
17659: LD_ADDR_VAR 0 11
17663: PUSH
17664: LD_VAR 0 3
17668: PUSH
17669: LD_VAR 0 2
17673: MINUS
17674: ST_TO_ADDR
// end else
17675: GO 17738
// begin d := - 1 ;
17677: LD_ADDR_VAR 0 9
17681: PUSH
17682: LD_INT 1
17684: NEG
17685: ST_TO_ADDR
// if i_from > i_to then
17686: LD_VAR 0 2
17690: PUSH
17691: LD_VAR 0 3
17695: GREATER
17696: IFFALSE 17716
// length := i_from - i_to else
17698: LD_ADDR_VAR 0 11
17702: PUSH
17703: LD_VAR 0 2
17707: PUSH
17708: LD_VAR 0 3
17712: MINUS
17713: ST_TO_ADDR
17714: GO 17738
// length := ( array - i_to ) + i_from ;
17716: LD_ADDR_VAR 0 11
17720: PUSH
17721: LD_VAR 0 1
17725: PUSH
17726: LD_VAR 0 3
17730: MINUS
17731: PUSH
17732: LD_VAR 0 2
17736: PLUS
17737: ST_TO_ADDR
// end ; if not length then
17738: LD_VAR 0 11
17742: NOT
17743: IFFALSE 17747
// exit ;
17745: GO 17905
// tmp := array ;
17747: LD_ADDR_VAR 0 10
17751: PUSH
17752: LD_VAR 0 1
17756: ST_TO_ADDR
// for i = 1 to length do
17757: LD_ADDR_VAR 0 6
17761: PUSH
17762: DOUBLE
17763: LD_INT 1
17765: DEC
17766: ST_TO_ADDR
17767: LD_VAR 0 11
17771: PUSH
17772: FOR_TO
17773: IFFALSE 17893
// begin for j = 1 to array do
17775: LD_ADDR_VAR 0 7
17779: PUSH
17780: DOUBLE
17781: LD_INT 1
17783: DEC
17784: ST_TO_ADDR
17785: LD_VAR 0 1
17789: PUSH
17790: FOR_TO
17791: IFFALSE 17879
// begin k := j + d ;
17793: LD_ADDR_VAR 0 8
17797: PUSH
17798: LD_VAR 0 7
17802: PUSH
17803: LD_VAR 0 9
17807: PLUS
17808: ST_TO_ADDR
// if k > array then
17809: LD_VAR 0 8
17813: PUSH
17814: LD_VAR 0 1
17818: GREATER
17819: IFFALSE 17829
// k := 1 ;
17821: LD_ADDR_VAR 0 8
17825: PUSH
17826: LD_INT 1
17828: ST_TO_ADDR
// if not k then
17829: LD_VAR 0 8
17833: NOT
17834: IFFALSE 17846
// k := array ;
17836: LD_ADDR_VAR 0 8
17840: PUSH
17841: LD_VAR 0 1
17845: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
17846: LD_ADDR_VAR 0 10
17850: PUSH
17851: LD_VAR 0 10
17855: PPUSH
17856: LD_VAR 0 8
17860: PPUSH
17861: LD_VAR 0 1
17865: PUSH
17866: LD_VAR 0 7
17870: ARRAY
17871: PPUSH
17872: CALL_OW 1
17876: ST_TO_ADDR
// end ;
17877: GO 17790
17879: POP
17880: POP
// array := tmp ;
17881: LD_ADDR_VAR 0 1
17885: PUSH
17886: LD_VAR 0 10
17890: ST_TO_ADDR
// end ;
17891: GO 17772
17893: POP
17894: POP
// result := array ;
17895: LD_ADDR_VAR 0 5
17899: PUSH
17900: LD_VAR 0 1
17904: ST_TO_ADDR
// end ;
17905: LD_VAR 0 5
17909: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
17910: LD_INT 0
17912: PPUSH
17913: PPUSH
// result := 0 ;
17914: LD_ADDR_VAR 0 3
17918: PUSH
17919: LD_INT 0
17921: ST_TO_ADDR
// if not array or not value in array then
17922: LD_VAR 0 1
17926: NOT
17927: PUSH
17928: LD_VAR 0 2
17932: PUSH
17933: LD_VAR 0 1
17937: IN
17938: NOT
17939: OR
17940: IFFALSE 17944
// exit ;
17942: GO 17998
// for i = 1 to array do
17944: LD_ADDR_VAR 0 4
17948: PUSH
17949: DOUBLE
17950: LD_INT 1
17952: DEC
17953: ST_TO_ADDR
17954: LD_VAR 0 1
17958: PUSH
17959: FOR_TO
17960: IFFALSE 17996
// if value = array [ i ] then
17962: LD_VAR 0 2
17966: PUSH
17967: LD_VAR 0 1
17971: PUSH
17972: LD_VAR 0 4
17976: ARRAY
17977: EQUAL
17978: IFFALSE 17994
// begin result := i ;
17980: LD_ADDR_VAR 0 3
17984: PUSH
17985: LD_VAR 0 4
17989: ST_TO_ADDR
// exit ;
17990: POP
17991: POP
17992: GO 17998
// end ;
17994: GO 17959
17996: POP
17997: POP
// end ;
17998: LD_VAR 0 3
18002: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
18003: LD_INT 0
18005: PPUSH
// vc_chassis := chassis ;
18006: LD_ADDR_OWVAR 37
18010: PUSH
18011: LD_VAR 0 1
18015: ST_TO_ADDR
// vc_engine := engine ;
18016: LD_ADDR_OWVAR 39
18020: PUSH
18021: LD_VAR 0 2
18025: ST_TO_ADDR
// vc_control := control ;
18026: LD_ADDR_OWVAR 38
18030: PUSH
18031: LD_VAR 0 3
18035: ST_TO_ADDR
// vc_weapon := weapon ;
18036: LD_ADDR_OWVAR 40
18040: PUSH
18041: LD_VAR 0 4
18045: ST_TO_ADDR
// vc_fuel_battery := fuel ;
18046: LD_ADDR_OWVAR 41
18050: PUSH
18051: LD_VAR 0 5
18055: ST_TO_ADDR
// end ;
18056: LD_VAR 0 6
18060: RET
// export function WantPlant ( unit ) ; var task ; begin
18061: LD_INT 0
18063: PPUSH
18064: PPUSH
// result := false ;
18065: LD_ADDR_VAR 0 2
18069: PUSH
18070: LD_INT 0
18072: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
18073: LD_ADDR_VAR 0 3
18077: PUSH
18078: LD_VAR 0 1
18082: PPUSH
18083: CALL_OW 437
18087: ST_TO_ADDR
// if task then
18088: LD_VAR 0 3
18092: IFFALSE 18120
// if task [ 1 ] [ 1 ] = p then
18094: LD_VAR 0 3
18098: PUSH
18099: LD_INT 1
18101: ARRAY
18102: PUSH
18103: LD_INT 1
18105: ARRAY
18106: PUSH
18107: LD_STRING p
18109: EQUAL
18110: IFFALSE 18120
// result := true ;
18112: LD_ADDR_VAR 0 2
18116: PUSH
18117: LD_INT 1
18119: ST_TO_ADDR
// end ;
18120: LD_VAR 0 2
18124: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
18125: LD_INT 0
18127: PPUSH
18128: PPUSH
18129: PPUSH
18130: PPUSH
// if pos < 1 then
18131: LD_VAR 0 2
18135: PUSH
18136: LD_INT 1
18138: LESS
18139: IFFALSE 18143
// exit ;
18141: GO 18446
// if pos = 1 then
18143: LD_VAR 0 2
18147: PUSH
18148: LD_INT 1
18150: EQUAL
18151: IFFALSE 18184
// result := Replace ( arr , pos [ 1 ] , value ) else
18153: LD_ADDR_VAR 0 4
18157: PUSH
18158: LD_VAR 0 1
18162: PPUSH
18163: LD_VAR 0 2
18167: PUSH
18168: LD_INT 1
18170: ARRAY
18171: PPUSH
18172: LD_VAR 0 3
18176: PPUSH
18177: CALL_OW 1
18181: ST_TO_ADDR
18182: GO 18446
// begin tmp := arr ;
18184: LD_ADDR_VAR 0 6
18188: PUSH
18189: LD_VAR 0 1
18193: ST_TO_ADDR
// s_arr := [ tmp ] ;
18194: LD_ADDR_VAR 0 7
18198: PUSH
18199: LD_VAR 0 6
18203: PUSH
18204: EMPTY
18205: LIST
18206: ST_TO_ADDR
// for i = 1 to pos - 1 do
18207: LD_ADDR_VAR 0 5
18211: PUSH
18212: DOUBLE
18213: LD_INT 1
18215: DEC
18216: ST_TO_ADDR
18217: LD_VAR 0 2
18221: PUSH
18222: LD_INT 1
18224: MINUS
18225: PUSH
18226: FOR_TO
18227: IFFALSE 18272
// begin tmp := tmp [ pos [ i ] ] ;
18229: LD_ADDR_VAR 0 6
18233: PUSH
18234: LD_VAR 0 6
18238: PUSH
18239: LD_VAR 0 2
18243: PUSH
18244: LD_VAR 0 5
18248: ARRAY
18249: ARRAY
18250: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
18251: LD_ADDR_VAR 0 7
18255: PUSH
18256: LD_VAR 0 7
18260: PUSH
18261: LD_VAR 0 6
18265: PUSH
18266: EMPTY
18267: LIST
18268: ADD
18269: ST_TO_ADDR
// end ;
18270: GO 18226
18272: POP
18273: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
18274: LD_ADDR_VAR 0 6
18278: PUSH
18279: LD_VAR 0 6
18283: PPUSH
18284: LD_VAR 0 2
18288: PUSH
18289: LD_VAR 0 2
18293: ARRAY
18294: PPUSH
18295: LD_VAR 0 3
18299: PPUSH
18300: CALL_OW 1
18304: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
18305: LD_ADDR_VAR 0 7
18309: PUSH
18310: LD_VAR 0 7
18314: PPUSH
18315: LD_VAR 0 7
18319: PPUSH
18320: LD_VAR 0 6
18324: PPUSH
18325: CALL_OW 1
18329: ST_TO_ADDR
// for i = s_arr downto 2 do
18330: LD_ADDR_VAR 0 5
18334: PUSH
18335: DOUBLE
18336: LD_VAR 0 7
18340: INC
18341: ST_TO_ADDR
18342: LD_INT 2
18344: PUSH
18345: FOR_DOWNTO
18346: IFFALSE 18430
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
18348: LD_ADDR_VAR 0 6
18352: PUSH
18353: LD_VAR 0 7
18357: PUSH
18358: LD_VAR 0 5
18362: PUSH
18363: LD_INT 1
18365: MINUS
18366: ARRAY
18367: PPUSH
18368: LD_VAR 0 2
18372: PUSH
18373: LD_VAR 0 5
18377: PUSH
18378: LD_INT 1
18380: MINUS
18381: ARRAY
18382: PPUSH
18383: LD_VAR 0 7
18387: PUSH
18388: LD_VAR 0 5
18392: ARRAY
18393: PPUSH
18394: CALL_OW 1
18398: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18399: LD_ADDR_VAR 0 7
18403: PUSH
18404: LD_VAR 0 7
18408: PPUSH
18409: LD_VAR 0 5
18413: PUSH
18414: LD_INT 1
18416: MINUS
18417: PPUSH
18418: LD_VAR 0 6
18422: PPUSH
18423: CALL_OW 1
18427: ST_TO_ADDR
// end ;
18428: GO 18345
18430: POP
18431: POP
// result := s_arr [ 1 ] ;
18432: LD_ADDR_VAR 0 4
18436: PUSH
18437: LD_VAR 0 7
18441: PUSH
18442: LD_INT 1
18444: ARRAY
18445: ST_TO_ADDR
// end ; end ;
18446: LD_VAR 0 4
18450: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18451: LD_INT 0
18453: PPUSH
18454: PPUSH
// if not list then
18455: LD_VAR 0 1
18459: NOT
18460: IFFALSE 18464
// exit ;
18462: GO 18555
// i := list [ pos1 ] ;
18464: LD_ADDR_VAR 0 5
18468: PUSH
18469: LD_VAR 0 1
18473: PUSH
18474: LD_VAR 0 2
18478: ARRAY
18479: ST_TO_ADDR
// if not i then
18480: LD_VAR 0 5
18484: NOT
18485: IFFALSE 18489
// exit ;
18487: GO 18555
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18489: LD_ADDR_VAR 0 1
18493: PUSH
18494: LD_VAR 0 1
18498: PPUSH
18499: LD_VAR 0 2
18503: PPUSH
18504: LD_VAR 0 1
18508: PUSH
18509: LD_VAR 0 3
18513: ARRAY
18514: PPUSH
18515: CALL_OW 1
18519: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
18520: LD_ADDR_VAR 0 1
18524: PUSH
18525: LD_VAR 0 1
18529: PPUSH
18530: LD_VAR 0 3
18534: PPUSH
18535: LD_VAR 0 5
18539: PPUSH
18540: CALL_OW 1
18544: ST_TO_ADDR
// result := list ;
18545: LD_ADDR_VAR 0 4
18549: PUSH
18550: LD_VAR 0 1
18554: ST_TO_ADDR
// end ;
18555: LD_VAR 0 4
18559: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
18560: LD_INT 0
18562: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
18563: LD_ADDR_VAR 0 5
18567: PUSH
18568: LD_VAR 0 1
18572: PPUSH
18573: CALL_OW 250
18577: PPUSH
18578: LD_VAR 0 1
18582: PPUSH
18583: CALL_OW 251
18587: PPUSH
18588: LD_VAR 0 2
18592: PPUSH
18593: LD_VAR 0 3
18597: PPUSH
18598: LD_VAR 0 4
18602: PPUSH
18603: CALL 18613 0 5
18607: ST_TO_ADDR
// end ;
18608: LD_VAR 0 5
18612: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
18613: LD_INT 0
18615: PPUSH
18616: PPUSH
18617: PPUSH
18618: PPUSH
// if not list then
18619: LD_VAR 0 3
18623: NOT
18624: IFFALSE 18628
// exit ;
18626: GO 19016
// result := [ ] ;
18628: LD_ADDR_VAR 0 6
18632: PUSH
18633: EMPTY
18634: ST_TO_ADDR
// for i in list do
18635: LD_ADDR_VAR 0 7
18639: PUSH
18640: LD_VAR 0 3
18644: PUSH
18645: FOR_IN
18646: IFFALSE 18848
// begin tmp := GetDistUnitXY ( i , x , y ) ;
18648: LD_ADDR_VAR 0 9
18652: PUSH
18653: LD_VAR 0 7
18657: PPUSH
18658: LD_VAR 0 1
18662: PPUSH
18663: LD_VAR 0 2
18667: PPUSH
18668: CALL_OW 297
18672: ST_TO_ADDR
// if not result then
18673: LD_VAR 0 6
18677: NOT
18678: IFFALSE 18704
// result := [ [ i , tmp ] ] else
18680: LD_ADDR_VAR 0 6
18684: PUSH
18685: LD_VAR 0 7
18689: PUSH
18690: LD_VAR 0 9
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: EMPTY
18700: LIST
18701: ST_TO_ADDR
18702: GO 18846
// begin if result [ result ] [ 2 ] < tmp then
18704: LD_VAR 0 6
18708: PUSH
18709: LD_VAR 0 6
18713: ARRAY
18714: PUSH
18715: LD_INT 2
18717: ARRAY
18718: PUSH
18719: LD_VAR 0 9
18723: LESS
18724: IFFALSE 18766
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
18726: LD_ADDR_VAR 0 6
18730: PUSH
18731: LD_VAR 0 6
18735: PPUSH
18736: LD_VAR 0 6
18740: PUSH
18741: LD_INT 1
18743: PLUS
18744: PPUSH
18745: LD_VAR 0 7
18749: PUSH
18750: LD_VAR 0 9
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PPUSH
18759: CALL_OW 2
18763: ST_TO_ADDR
18764: GO 18846
// for j = 1 to result do
18766: LD_ADDR_VAR 0 8
18770: PUSH
18771: DOUBLE
18772: LD_INT 1
18774: DEC
18775: ST_TO_ADDR
18776: LD_VAR 0 6
18780: PUSH
18781: FOR_TO
18782: IFFALSE 18844
// begin if tmp < result [ j ] [ 2 ] then
18784: LD_VAR 0 9
18788: PUSH
18789: LD_VAR 0 6
18793: PUSH
18794: LD_VAR 0 8
18798: ARRAY
18799: PUSH
18800: LD_INT 2
18802: ARRAY
18803: LESS
18804: IFFALSE 18842
// begin result := Insert ( result , j , [ i , tmp ] ) ;
18806: LD_ADDR_VAR 0 6
18810: PUSH
18811: LD_VAR 0 6
18815: PPUSH
18816: LD_VAR 0 8
18820: PPUSH
18821: LD_VAR 0 7
18825: PUSH
18826: LD_VAR 0 9
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PPUSH
18835: CALL_OW 2
18839: ST_TO_ADDR
// break ;
18840: GO 18844
// end ; end ;
18842: GO 18781
18844: POP
18845: POP
// end ; end ;
18846: GO 18645
18848: POP
18849: POP
// if result and not asc then
18850: LD_VAR 0 6
18854: PUSH
18855: LD_VAR 0 4
18859: NOT
18860: AND
18861: IFFALSE 18936
// begin tmp := result ;
18863: LD_ADDR_VAR 0 9
18867: PUSH
18868: LD_VAR 0 6
18872: ST_TO_ADDR
// for i = tmp downto 1 do
18873: LD_ADDR_VAR 0 7
18877: PUSH
18878: DOUBLE
18879: LD_VAR 0 9
18883: INC
18884: ST_TO_ADDR
18885: LD_INT 1
18887: PUSH
18888: FOR_DOWNTO
18889: IFFALSE 18934
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
18891: LD_ADDR_VAR 0 6
18895: PUSH
18896: LD_VAR 0 6
18900: PPUSH
18901: LD_VAR 0 9
18905: PUSH
18906: LD_VAR 0 7
18910: MINUS
18911: PUSH
18912: LD_INT 1
18914: PLUS
18915: PPUSH
18916: LD_VAR 0 9
18920: PUSH
18921: LD_VAR 0 7
18925: ARRAY
18926: PPUSH
18927: CALL_OW 1
18931: ST_TO_ADDR
18932: GO 18888
18934: POP
18935: POP
// end ; tmp := [ ] ;
18936: LD_ADDR_VAR 0 9
18940: PUSH
18941: EMPTY
18942: ST_TO_ADDR
// if mode then
18943: LD_VAR 0 5
18947: IFFALSE 19016
// begin for i = 1 to result do
18949: LD_ADDR_VAR 0 7
18953: PUSH
18954: DOUBLE
18955: LD_INT 1
18957: DEC
18958: ST_TO_ADDR
18959: LD_VAR 0 6
18963: PUSH
18964: FOR_TO
18965: IFFALSE 19004
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
18967: LD_ADDR_VAR 0 9
18971: PUSH
18972: LD_VAR 0 9
18976: PPUSH
18977: LD_VAR 0 7
18981: PPUSH
18982: LD_VAR 0 6
18986: PUSH
18987: LD_VAR 0 7
18991: ARRAY
18992: PUSH
18993: LD_INT 1
18995: ARRAY
18996: PPUSH
18997: CALL_OW 1
19001: ST_TO_ADDR
19002: GO 18964
19004: POP
19005: POP
// result := tmp ;
19006: LD_ADDR_VAR 0 6
19010: PUSH
19011: LD_VAR 0 9
19015: ST_TO_ADDR
// end ; end ;
19016: LD_VAR 0 6
19020: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
19021: LD_INT 0
19023: PPUSH
19024: PPUSH
19025: PPUSH
19026: PPUSH
19027: PPUSH
19028: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
19029: LD_ADDR_VAR 0 5
19033: PUSH
19034: LD_INT 0
19036: PUSH
19037: LD_INT 0
19039: PUSH
19040: LD_INT 0
19042: PUSH
19043: EMPTY
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: ST_TO_ADDR
// if not x or not y then
19051: LD_VAR 0 2
19055: NOT
19056: PUSH
19057: LD_VAR 0 3
19061: NOT
19062: OR
19063: IFFALSE 19067
// exit ;
19065: GO 20719
// if not range then
19067: LD_VAR 0 4
19071: NOT
19072: IFFALSE 19082
// range := 10 ;
19074: LD_ADDR_VAR 0 4
19078: PUSH
19079: LD_INT 10
19081: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19082: LD_ADDR_VAR 0 8
19086: PUSH
19087: LD_INT 81
19089: PUSH
19090: LD_VAR 0 1
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 92
19101: PUSH
19102: LD_VAR 0 2
19106: PUSH
19107: LD_VAR 0 3
19111: PUSH
19112: LD_VAR 0 4
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 3
19125: PUSH
19126: LD_INT 21
19128: PUSH
19129: LD_INT 3
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: LIST
19144: PPUSH
19145: CALL_OW 69
19149: ST_TO_ADDR
// if not tmp then
19150: LD_VAR 0 8
19154: NOT
19155: IFFALSE 19159
// exit ;
19157: GO 20719
// for i in tmp do
19159: LD_ADDR_VAR 0 6
19163: PUSH
19164: LD_VAR 0 8
19168: PUSH
19169: FOR_IN
19170: IFFALSE 20694
// begin points := [ 0 , 0 , 0 ] ;
19172: LD_ADDR_VAR 0 9
19176: PUSH
19177: LD_INT 0
19179: PUSH
19180: LD_INT 0
19182: PUSH
19183: LD_INT 0
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: LIST
19190: ST_TO_ADDR
// bpoints := 1 ;
19191: LD_ADDR_VAR 0 10
19195: PUSH
19196: LD_INT 1
19198: ST_TO_ADDR
// case GetType ( i ) of unit_human :
19199: LD_VAR 0 6
19203: PPUSH
19204: CALL_OW 247
19208: PUSH
19209: LD_INT 1
19211: DOUBLE
19212: EQUAL
19213: IFTRUE 19217
19215: GO 19795
19217: POP
// begin if GetClass ( i ) = 1 then
19218: LD_VAR 0 6
19222: PPUSH
19223: CALL_OW 257
19227: PUSH
19228: LD_INT 1
19230: EQUAL
19231: IFFALSE 19252
// points := [ 10 , 5 , 3 ] ;
19233: LD_ADDR_VAR 0 9
19237: PUSH
19238: LD_INT 10
19240: PUSH
19241: LD_INT 5
19243: PUSH
19244: LD_INT 3
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: LIST
19251: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
19252: LD_VAR 0 6
19256: PPUSH
19257: CALL_OW 257
19261: PUSH
19262: LD_INT 2
19264: PUSH
19265: LD_INT 3
19267: PUSH
19268: LD_INT 4
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: LIST
19275: IN
19276: IFFALSE 19297
// points := [ 3 , 2 , 1 ] ;
19278: LD_ADDR_VAR 0 9
19282: PUSH
19283: LD_INT 3
19285: PUSH
19286: LD_INT 2
19288: PUSH
19289: LD_INT 1
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: LIST
19296: ST_TO_ADDR
// if GetClass ( i ) = 5 then
19297: LD_VAR 0 6
19301: PPUSH
19302: CALL_OW 257
19306: PUSH
19307: LD_INT 5
19309: EQUAL
19310: IFFALSE 19331
// points := [ 130 , 5 , 2 ] ;
19312: LD_ADDR_VAR 0 9
19316: PUSH
19317: LD_INT 130
19319: PUSH
19320: LD_INT 5
19322: PUSH
19323: LD_INT 2
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: LIST
19330: ST_TO_ADDR
// if GetClass ( i ) = 8 then
19331: LD_VAR 0 6
19335: PPUSH
19336: CALL_OW 257
19340: PUSH
19341: LD_INT 8
19343: EQUAL
19344: IFFALSE 19365
// points := [ 35 , 35 , 30 ] ;
19346: LD_ADDR_VAR 0 9
19350: PUSH
19351: LD_INT 35
19353: PUSH
19354: LD_INT 35
19356: PUSH
19357: LD_INT 30
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: LIST
19364: ST_TO_ADDR
// if GetClass ( i ) = 9 then
19365: LD_VAR 0 6
19369: PPUSH
19370: CALL_OW 257
19374: PUSH
19375: LD_INT 9
19377: EQUAL
19378: IFFALSE 19399
// points := [ 20 , 55 , 40 ] ;
19380: LD_ADDR_VAR 0 9
19384: PUSH
19385: LD_INT 20
19387: PUSH
19388: LD_INT 55
19390: PUSH
19391: LD_INT 40
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: LIST
19398: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19399: LD_VAR 0 6
19403: PPUSH
19404: CALL_OW 257
19408: PUSH
19409: LD_INT 12
19411: PUSH
19412: LD_INT 16
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: IN
19419: IFFALSE 19440
// points := [ 5 , 3 , 2 ] ;
19421: LD_ADDR_VAR 0 9
19425: PUSH
19426: LD_INT 5
19428: PUSH
19429: LD_INT 3
19431: PUSH
19432: LD_INT 2
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: LIST
19439: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19440: LD_VAR 0 6
19444: PPUSH
19445: CALL_OW 257
19449: PUSH
19450: LD_INT 17
19452: EQUAL
19453: IFFALSE 19474
// points := [ 100 , 50 , 75 ] ;
19455: LD_ADDR_VAR 0 9
19459: PUSH
19460: LD_INT 100
19462: PUSH
19463: LD_INT 50
19465: PUSH
19466: LD_INT 75
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: LIST
19473: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19474: LD_VAR 0 6
19478: PPUSH
19479: CALL_OW 257
19483: PUSH
19484: LD_INT 15
19486: EQUAL
19487: IFFALSE 19508
// points := [ 10 , 5 , 3 ] ;
19489: LD_ADDR_VAR 0 9
19493: PUSH
19494: LD_INT 10
19496: PUSH
19497: LD_INT 5
19499: PUSH
19500: LD_INT 3
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: LIST
19507: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19508: LD_VAR 0 6
19512: PPUSH
19513: CALL_OW 257
19517: PUSH
19518: LD_INT 14
19520: EQUAL
19521: IFFALSE 19542
// points := [ 10 , 0 , 0 ] ;
19523: LD_ADDR_VAR 0 9
19527: PUSH
19528: LD_INT 10
19530: PUSH
19531: LD_INT 0
19533: PUSH
19534: LD_INT 0
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: LIST
19541: ST_TO_ADDR
// if GetClass ( i ) = 11 then
19542: LD_VAR 0 6
19546: PPUSH
19547: CALL_OW 257
19551: PUSH
19552: LD_INT 11
19554: EQUAL
19555: IFFALSE 19576
// points := [ 30 , 10 , 5 ] ;
19557: LD_ADDR_VAR 0 9
19561: PUSH
19562: LD_INT 30
19564: PUSH
19565: LD_INT 10
19567: PUSH
19568: LD_INT 5
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: LIST
19575: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
19576: LD_VAR 0 1
19580: PPUSH
19581: LD_INT 5
19583: PPUSH
19584: CALL_OW 321
19588: PUSH
19589: LD_INT 2
19591: EQUAL
19592: IFFALSE 19609
// bpoints := bpoints * 1.8 ;
19594: LD_ADDR_VAR 0 10
19598: PUSH
19599: LD_VAR 0 10
19603: PUSH
19604: LD_REAL  1.80000000000000E+0000
19607: MUL
19608: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
19609: LD_VAR 0 6
19613: PPUSH
19614: CALL_OW 257
19618: PUSH
19619: LD_INT 1
19621: PUSH
19622: LD_INT 2
19624: PUSH
19625: LD_INT 3
19627: PUSH
19628: LD_INT 4
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: IN
19637: PUSH
19638: LD_VAR 0 1
19642: PPUSH
19643: LD_INT 51
19645: PPUSH
19646: CALL_OW 321
19650: PUSH
19651: LD_INT 2
19653: EQUAL
19654: AND
19655: IFFALSE 19672
// bpoints := bpoints * 1.2 ;
19657: LD_ADDR_VAR 0 10
19661: PUSH
19662: LD_VAR 0 10
19666: PUSH
19667: LD_REAL  1.20000000000000E+0000
19670: MUL
19671: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
19672: LD_VAR 0 6
19676: PPUSH
19677: CALL_OW 257
19681: PUSH
19682: LD_INT 5
19684: PUSH
19685: LD_INT 7
19687: PUSH
19688: LD_INT 9
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: LIST
19695: IN
19696: PUSH
19697: LD_VAR 0 1
19701: PPUSH
19702: LD_INT 52
19704: PPUSH
19705: CALL_OW 321
19709: PUSH
19710: LD_INT 2
19712: EQUAL
19713: AND
19714: IFFALSE 19731
// bpoints := bpoints * 1.5 ;
19716: LD_ADDR_VAR 0 10
19720: PUSH
19721: LD_VAR 0 10
19725: PUSH
19726: LD_REAL  1.50000000000000E+0000
19729: MUL
19730: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
19731: LD_VAR 0 1
19735: PPUSH
19736: LD_INT 66
19738: PPUSH
19739: CALL_OW 321
19743: PUSH
19744: LD_INT 2
19746: EQUAL
19747: IFFALSE 19764
// bpoints := bpoints * 1.1 ;
19749: LD_ADDR_VAR 0 10
19753: PUSH
19754: LD_VAR 0 10
19758: PUSH
19759: LD_REAL  1.10000000000000E+0000
19762: MUL
19763: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
19764: LD_ADDR_VAR 0 10
19768: PUSH
19769: LD_VAR 0 10
19773: PUSH
19774: LD_VAR 0 6
19778: PPUSH
19779: LD_INT 1
19781: PPUSH
19782: CALL_OW 259
19786: PUSH
19787: LD_REAL  1.15000000000000E+0000
19790: MUL
19791: MUL
19792: ST_TO_ADDR
// end ; unit_vehicle :
19793: GO 20623
19795: LD_INT 2
19797: DOUBLE
19798: EQUAL
19799: IFTRUE 19803
19801: GO 20611
19803: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
19804: LD_VAR 0 6
19808: PPUSH
19809: CALL_OW 264
19813: PUSH
19814: LD_INT 2
19816: PUSH
19817: LD_INT 42
19819: PUSH
19820: LD_INT 24
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: LIST
19827: IN
19828: IFFALSE 19849
// points := [ 25 , 5 , 3 ] ;
19830: LD_ADDR_VAR 0 9
19834: PUSH
19835: LD_INT 25
19837: PUSH
19838: LD_INT 5
19840: PUSH
19841: LD_INT 3
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: LIST
19848: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
19849: LD_VAR 0 6
19853: PPUSH
19854: CALL_OW 264
19858: PUSH
19859: LD_INT 4
19861: PUSH
19862: LD_INT 43
19864: PUSH
19865: LD_INT 25
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: LIST
19872: IN
19873: IFFALSE 19894
// points := [ 40 , 15 , 5 ] ;
19875: LD_ADDR_VAR 0 9
19879: PUSH
19880: LD_INT 40
19882: PUSH
19883: LD_INT 15
19885: PUSH
19886: LD_INT 5
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: LIST
19893: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
19894: LD_VAR 0 6
19898: PPUSH
19899: CALL_OW 264
19903: PUSH
19904: LD_INT 3
19906: PUSH
19907: LD_INT 23
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: IN
19914: IFFALSE 19935
// points := [ 7 , 25 , 8 ] ;
19916: LD_ADDR_VAR 0 9
19920: PUSH
19921: LD_INT 7
19923: PUSH
19924: LD_INT 25
19926: PUSH
19927: LD_INT 8
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: LIST
19934: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
19935: LD_VAR 0 6
19939: PPUSH
19940: CALL_OW 264
19944: PUSH
19945: LD_INT 5
19947: PUSH
19948: LD_INT 27
19950: PUSH
19951: LD_INT 44
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: LIST
19958: IN
19959: IFFALSE 19980
// points := [ 14 , 50 , 16 ] ;
19961: LD_ADDR_VAR 0 9
19965: PUSH
19966: LD_INT 14
19968: PUSH
19969: LD_INT 50
19971: PUSH
19972: LD_INT 16
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: LIST
19979: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
19980: LD_VAR 0 6
19984: PPUSH
19985: CALL_OW 264
19989: PUSH
19990: LD_INT 6
19992: PUSH
19993: LD_INT 46
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: IN
20000: IFFALSE 20021
// points := [ 32 , 120 , 70 ] ;
20002: LD_ADDR_VAR 0 9
20006: PUSH
20007: LD_INT 32
20009: PUSH
20010: LD_INT 120
20012: PUSH
20013: LD_INT 70
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: LIST
20020: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
20021: LD_VAR 0 6
20025: PPUSH
20026: CALL_OW 264
20030: PUSH
20031: LD_INT 7
20033: PUSH
20034: LD_INT 28
20036: PUSH
20037: LD_INT 45
20039: PUSH
20040: LD_EXP 103
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: IN
20051: IFFALSE 20072
// points := [ 35 , 20 , 45 ] ;
20053: LD_ADDR_VAR 0 9
20057: PUSH
20058: LD_INT 35
20060: PUSH
20061: LD_INT 20
20063: PUSH
20064: LD_INT 45
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: LIST
20071: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
20072: LD_VAR 0 6
20076: PPUSH
20077: CALL_OW 264
20081: PUSH
20082: LD_INT 47
20084: PUSH
20085: EMPTY
20086: LIST
20087: IN
20088: IFFALSE 20109
// points := [ 67 , 45 , 75 ] ;
20090: LD_ADDR_VAR 0 9
20094: PUSH
20095: LD_INT 67
20097: PUSH
20098: LD_INT 45
20100: PUSH
20101: LD_INT 75
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: LIST
20108: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
20109: LD_VAR 0 6
20113: PPUSH
20114: CALL_OW 264
20118: PUSH
20119: LD_INT 26
20121: PUSH
20122: EMPTY
20123: LIST
20124: IN
20125: IFFALSE 20146
// points := [ 120 , 30 , 80 ] ;
20127: LD_ADDR_VAR 0 9
20131: PUSH
20132: LD_INT 120
20134: PUSH
20135: LD_INT 30
20137: PUSH
20138: LD_INT 80
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: LIST
20145: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
20146: LD_VAR 0 6
20150: PPUSH
20151: CALL_OW 264
20155: PUSH
20156: LD_INT 22
20158: PUSH
20159: EMPTY
20160: LIST
20161: IN
20162: IFFALSE 20183
// points := [ 40 , 1 , 1 ] ;
20164: LD_ADDR_VAR 0 9
20168: PUSH
20169: LD_INT 40
20171: PUSH
20172: LD_INT 1
20174: PUSH
20175: LD_INT 1
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: LIST
20182: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
20183: LD_VAR 0 6
20187: PPUSH
20188: CALL_OW 264
20192: PUSH
20193: LD_INT 29
20195: PUSH
20196: EMPTY
20197: LIST
20198: IN
20199: IFFALSE 20220
// points := [ 70 , 200 , 400 ] ;
20201: LD_ADDR_VAR 0 9
20205: PUSH
20206: LD_INT 70
20208: PUSH
20209: LD_INT 200
20211: PUSH
20212: LD_INT 400
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: LIST
20219: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
20220: LD_VAR 0 6
20224: PPUSH
20225: CALL_OW 264
20229: PUSH
20230: LD_INT 14
20232: PUSH
20233: LD_INT 53
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: IN
20240: IFFALSE 20261
// points := [ 40 , 10 , 20 ] ;
20242: LD_ADDR_VAR 0 9
20246: PUSH
20247: LD_INT 40
20249: PUSH
20250: LD_INT 10
20252: PUSH
20253: LD_INT 20
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: LIST
20260: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
20261: LD_VAR 0 6
20265: PPUSH
20266: CALL_OW 264
20270: PUSH
20271: LD_INT 9
20273: PUSH
20274: EMPTY
20275: LIST
20276: IN
20277: IFFALSE 20298
// points := [ 5 , 70 , 20 ] ;
20279: LD_ADDR_VAR 0 9
20283: PUSH
20284: LD_INT 5
20286: PUSH
20287: LD_INT 70
20289: PUSH
20290: LD_INT 20
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: LIST
20297: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
20298: LD_VAR 0 6
20302: PPUSH
20303: CALL_OW 264
20307: PUSH
20308: LD_INT 10
20310: PUSH
20311: EMPTY
20312: LIST
20313: IN
20314: IFFALSE 20335
// points := [ 35 , 110 , 70 ] ;
20316: LD_ADDR_VAR 0 9
20320: PUSH
20321: LD_INT 35
20323: PUSH
20324: LD_INT 110
20326: PUSH
20327: LD_INT 70
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: LIST
20334: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
20335: LD_VAR 0 6
20339: PPUSH
20340: CALL_OW 265
20344: PUSH
20345: LD_INT 25
20347: EQUAL
20348: IFFALSE 20369
// points := [ 80 , 65 , 100 ] ;
20350: LD_ADDR_VAR 0 9
20354: PUSH
20355: LD_INT 80
20357: PUSH
20358: LD_INT 65
20360: PUSH
20361: LD_INT 100
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: LIST
20368: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
20369: LD_VAR 0 6
20373: PPUSH
20374: CALL_OW 263
20378: PUSH
20379: LD_INT 1
20381: EQUAL
20382: IFFALSE 20417
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20384: LD_ADDR_VAR 0 10
20388: PUSH
20389: LD_VAR 0 10
20393: PUSH
20394: LD_VAR 0 6
20398: PPUSH
20399: CALL_OW 311
20403: PPUSH
20404: LD_INT 3
20406: PPUSH
20407: CALL_OW 259
20411: PUSH
20412: LD_INT 4
20414: MUL
20415: MUL
20416: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20417: LD_VAR 0 6
20421: PPUSH
20422: CALL_OW 263
20426: PUSH
20427: LD_INT 2
20429: EQUAL
20430: IFFALSE 20481
// begin j := IsControledBy ( i ) ;
20432: LD_ADDR_VAR 0 7
20436: PUSH
20437: LD_VAR 0 6
20441: PPUSH
20442: CALL_OW 312
20446: ST_TO_ADDR
// if j then
20447: LD_VAR 0 7
20451: IFFALSE 20481
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20453: LD_ADDR_VAR 0 10
20457: PUSH
20458: LD_VAR 0 10
20462: PUSH
20463: LD_VAR 0 7
20467: PPUSH
20468: LD_INT 3
20470: PPUSH
20471: CALL_OW 259
20475: PUSH
20476: LD_INT 3
20478: MUL
20479: MUL
20480: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20481: LD_VAR 0 6
20485: PPUSH
20486: CALL_OW 264
20490: PUSH
20491: LD_INT 5
20493: PUSH
20494: LD_INT 6
20496: PUSH
20497: LD_INT 46
20499: PUSH
20500: LD_INT 44
20502: PUSH
20503: LD_INT 47
20505: PUSH
20506: LD_INT 45
20508: PUSH
20509: LD_INT 28
20511: PUSH
20512: LD_INT 7
20514: PUSH
20515: LD_INT 27
20517: PUSH
20518: LD_INT 29
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: IN
20533: PUSH
20534: LD_VAR 0 1
20538: PPUSH
20539: LD_INT 52
20541: PPUSH
20542: CALL_OW 321
20546: PUSH
20547: LD_INT 2
20549: EQUAL
20550: AND
20551: IFFALSE 20568
// bpoints := bpoints * 1.2 ;
20553: LD_ADDR_VAR 0 10
20557: PUSH
20558: LD_VAR 0 10
20562: PUSH
20563: LD_REAL  1.20000000000000E+0000
20566: MUL
20567: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
20568: LD_VAR 0 6
20572: PPUSH
20573: CALL_OW 264
20577: PUSH
20578: LD_INT 6
20580: PUSH
20581: LD_INT 46
20583: PUSH
20584: LD_INT 47
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: LIST
20591: IN
20592: IFFALSE 20609
// bpoints := bpoints * 1.2 ;
20594: LD_ADDR_VAR 0 10
20598: PUSH
20599: LD_VAR 0 10
20603: PUSH
20604: LD_REAL  1.20000000000000E+0000
20607: MUL
20608: ST_TO_ADDR
// end ; unit_building :
20609: GO 20623
20611: LD_INT 3
20613: DOUBLE
20614: EQUAL
20615: IFTRUE 20619
20617: GO 20622
20619: POP
// ; end ;
20620: GO 20623
20622: POP
// for j = 1 to 3 do
20623: LD_ADDR_VAR 0 7
20627: PUSH
20628: DOUBLE
20629: LD_INT 1
20631: DEC
20632: ST_TO_ADDR
20633: LD_INT 3
20635: PUSH
20636: FOR_TO
20637: IFFALSE 20690
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
20639: LD_ADDR_VAR 0 5
20643: PUSH
20644: LD_VAR 0 5
20648: PPUSH
20649: LD_VAR 0 7
20653: PPUSH
20654: LD_VAR 0 5
20658: PUSH
20659: LD_VAR 0 7
20663: ARRAY
20664: PUSH
20665: LD_VAR 0 9
20669: PUSH
20670: LD_VAR 0 7
20674: ARRAY
20675: PUSH
20676: LD_VAR 0 10
20680: MUL
20681: PLUS
20682: PPUSH
20683: CALL_OW 1
20687: ST_TO_ADDR
20688: GO 20636
20690: POP
20691: POP
// end ;
20692: GO 19169
20694: POP
20695: POP
// result := Replace ( result , 4 , tmp ) ;
20696: LD_ADDR_VAR 0 5
20700: PUSH
20701: LD_VAR 0 5
20705: PPUSH
20706: LD_INT 4
20708: PPUSH
20709: LD_VAR 0 8
20713: PPUSH
20714: CALL_OW 1
20718: ST_TO_ADDR
// end ;
20719: LD_VAR 0 5
20723: RET
// export function DangerAtRange ( unit , range ) ; begin
20724: LD_INT 0
20726: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
20727: LD_ADDR_VAR 0 3
20731: PUSH
20732: LD_VAR 0 1
20736: PPUSH
20737: CALL_OW 255
20741: PPUSH
20742: LD_VAR 0 1
20746: PPUSH
20747: CALL_OW 250
20751: PPUSH
20752: LD_VAR 0 1
20756: PPUSH
20757: CALL_OW 251
20761: PPUSH
20762: LD_VAR 0 2
20766: PPUSH
20767: CALL 19021 0 4
20771: ST_TO_ADDR
// end ;
20772: LD_VAR 0 3
20776: RET
// export function DangerInArea ( side , area ) ; begin
20777: LD_INT 0
20779: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
20780: LD_ADDR_VAR 0 3
20784: PUSH
20785: LD_VAR 0 2
20789: PPUSH
20790: LD_INT 81
20792: PUSH
20793: LD_VAR 0 1
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PPUSH
20802: CALL_OW 70
20806: ST_TO_ADDR
// end ;
20807: LD_VAR 0 3
20811: RET
// export function IsExtension ( b ) ; begin
20812: LD_INT 0
20814: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
20815: LD_ADDR_VAR 0 2
20819: PUSH
20820: LD_VAR 0 1
20824: PUSH
20825: LD_INT 23
20827: PUSH
20828: LD_INT 20
20830: PUSH
20831: LD_INT 22
20833: PUSH
20834: LD_INT 17
20836: PUSH
20837: LD_INT 24
20839: PUSH
20840: LD_INT 21
20842: PUSH
20843: LD_INT 19
20845: PUSH
20846: LD_INT 16
20848: PUSH
20849: LD_INT 25
20851: PUSH
20852: LD_INT 18
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: IN
20867: ST_TO_ADDR
// end ;
20868: LD_VAR 0 2
20872: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
20873: LD_INT 0
20875: PPUSH
20876: PPUSH
20877: PPUSH
// result := [ ] ;
20878: LD_ADDR_VAR 0 4
20882: PUSH
20883: EMPTY
20884: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
20885: LD_ADDR_VAR 0 5
20889: PUSH
20890: LD_VAR 0 2
20894: PPUSH
20895: LD_INT 21
20897: PUSH
20898: LD_INT 3
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PPUSH
20905: CALL_OW 70
20909: ST_TO_ADDR
// if not tmp then
20910: LD_VAR 0 5
20914: NOT
20915: IFFALSE 20919
// exit ;
20917: GO 20983
// if checkLink then
20919: LD_VAR 0 3
20923: IFFALSE 20973
// begin for i in tmp do
20925: LD_ADDR_VAR 0 6
20929: PUSH
20930: LD_VAR 0 5
20934: PUSH
20935: FOR_IN
20936: IFFALSE 20971
// if GetBase ( i ) <> base then
20938: LD_VAR 0 6
20942: PPUSH
20943: CALL_OW 274
20947: PUSH
20948: LD_VAR 0 1
20952: NONEQUAL
20953: IFFALSE 20969
// ComLinkToBase ( base , i ) ;
20955: LD_VAR 0 1
20959: PPUSH
20960: LD_VAR 0 6
20964: PPUSH
20965: CALL_OW 169
20969: GO 20935
20971: POP
20972: POP
// end ; result := tmp ;
20973: LD_ADDR_VAR 0 4
20977: PUSH
20978: LD_VAR 0 5
20982: ST_TO_ADDR
// end ;
20983: LD_VAR 0 4
20987: RET
// export function ComComplete ( units , b ) ; var i ; begin
20988: LD_INT 0
20990: PPUSH
20991: PPUSH
// if not units then
20992: LD_VAR 0 1
20996: NOT
20997: IFFALSE 21001
// exit ;
20999: GO 21091
// for i in units do
21001: LD_ADDR_VAR 0 4
21005: PUSH
21006: LD_VAR 0 1
21010: PUSH
21011: FOR_IN
21012: IFFALSE 21089
// if BuildingStatus ( b ) = bs_build then
21014: LD_VAR 0 2
21018: PPUSH
21019: CALL_OW 461
21023: PUSH
21024: LD_INT 1
21026: EQUAL
21027: IFFALSE 21087
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21029: LD_VAR 0 4
21033: PPUSH
21034: LD_STRING h
21036: PUSH
21037: LD_VAR 0 2
21041: PPUSH
21042: CALL_OW 250
21046: PUSH
21047: LD_VAR 0 2
21051: PPUSH
21052: CALL_OW 251
21056: PUSH
21057: LD_VAR 0 2
21061: PUSH
21062: LD_INT 0
21064: PUSH
21065: LD_INT 0
21067: PUSH
21068: LD_INT 0
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: PUSH
21080: EMPTY
21081: LIST
21082: PPUSH
21083: CALL_OW 446
21087: GO 21011
21089: POP
21090: POP
// end ;
21091: LD_VAR 0 3
21095: RET
// export function AddComComplete ( units , b ) ; var i ; begin
21096: LD_INT 0
21098: PPUSH
21099: PPUSH
// if not units then
21100: LD_VAR 0 1
21104: NOT
21105: IFFALSE 21109
// exit ;
21107: GO 21199
// for i in units do
21109: LD_ADDR_VAR 0 4
21113: PUSH
21114: LD_VAR 0 1
21118: PUSH
21119: FOR_IN
21120: IFFALSE 21197
// if BuildingStatus ( b ) = bs_build then
21122: LD_VAR 0 2
21126: PPUSH
21127: CALL_OW 461
21131: PUSH
21132: LD_INT 1
21134: EQUAL
21135: IFFALSE 21195
// AddTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21137: LD_VAR 0 4
21141: PPUSH
21142: LD_STRING h
21144: PUSH
21145: LD_VAR 0 2
21149: PPUSH
21150: CALL_OW 250
21154: PUSH
21155: LD_VAR 0 2
21159: PPUSH
21160: CALL_OW 251
21164: PUSH
21165: LD_VAR 0 2
21169: PUSH
21170: LD_INT 0
21172: PUSH
21173: LD_INT 0
21175: PUSH
21176: LD_INT 0
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: PUSH
21188: EMPTY
21189: LIST
21190: PPUSH
21191: CALL_OW 447
21195: GO 21119
21197: POP
21198: POP
// end ;
21199: LD_VAR 0 3
21203: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
21204: LD_INT 0
21206: PPUSH
21207: PPUSH
21208: PPUSH
21209: PPUSH
21210: PPUSH
21211: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
21212: LD_VAR 0 1
21216: NOT
21217: PUSH
21218: LD_VAR 0 1
21222: PPUSH
21223: CALL_OW 263
21227: PUSH
21228: LD_INT 2
21230: NONEQUAL
21231: OR
21232: IFFALSE 21236
// exit ;
21234: GO 21552
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
21236: LD_ADDR_VAR 0 6
21240: PUSH
21241: LD_INT 22
21243: PUSH
21244: LD_VAR 0 1
21248: PPUSH
21249: CALL_OW 255
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 2
21260: PUSH
21261: LD_INT 30
21263: PUSH
21264: LD_INT 36
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 34
21273: PUSH
21274: LD_INT 31
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: LIST
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PPUSH
21290: CALL_OW 69
21294: ST_TO_ADDR
// if not tmp then
21295: LD_VAR 0 6
21299: NOT
21300: IFFALSE 21304
// exit ;
21302: GO 21552
// result := [ ] ;
21304: LD_ADDR_VAR 0 2
21308: PUSH
21309: EMPTY
21310: ST_TO_ADDR
// for i in tmp do
21311: LD_ADDR_VAR 0 3
21315: PUSH
21316: LD_VAR 0 6
21320: PUSH
21321: FOR_IN
21322: IFFALSE 21393
// begin t := UnitsInside ( i ) ;
21324: LD_ADDR_VAR 0 4
21328: PUSH
21329: LD_VAR 0 3
21333: PPUSH
21334: CALL_OW 313
21338: ST_TO_ADDR
// if t then
21339: LD_VAR 0 4
21343: IFFALSE 21391
// for j in t do
21345: LD_ADDR_VAR 0 7
21349: PUSH
21350: LD_VAR 0 4
21354: PUSH
21355: FOR_IN
21356: IFFALSE 21389
// result := Replace ( result , result + 1 , j ) ;
21358: LD_ADDR_VAR 0 2
21362: PUSH
21363: LD_VAR 0 2
21367: PPUSH
21368: LD_VAR 0 2
21372: PUSH
21373: LD_INT 1
21375: PLUS
21376: PPUSH
21377: LD_VAR 0 7
21381: PPUSH
21382: CALL_OW 1
21386: ST_TO_ADDR
21387: GO 21355
21389: POP
21390: POP
// end ;
21391: GO 21321
21393: POP
21394: POP
// if not result then
21395: LD_VAR 0 2
21399: NOT
21400: IFFALSE 21404
// exit ;
21402: GO 21552
// mech := result [ 1 ] ;
21404: LD_ADDR_VAR 0 5
21408: PUSH
21409: LD_VAR 0 2
21413: PUSH
21414: LD_INT 1
21416: ARRAY
21417: ST_TO_ADDR
// if result > 1 then
21418: LD_VAR 0 2
21422: PUSH
21423: LD_INT 1
21425: GREATER
21426: IFFALSE 21538
// begin for i = 2 to result do
21428: LD_ADDR_VAR 0 3
21432: PUSH
21433: DOUBLE
21434: LD_INT 2
21436: DEC
21437: ST_TO_ADDR
21438: LD_VAR 0 2
21442: PUSH
21443: FOR_TO
21444: IFFALSE 21536
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
21446: LD_ADDR_VAR 0 4
21450: PUSH
21451: LD_VAR 0 2
21455: PUSH
21456: LD_VAR 0 3
21460: ARRAY
21461: PPUSH
21462: LD_INT 3
21464: PPUSH
21465: CALL_OW 259
21469: PUSH
21470: LD_VAR 0 2
21474: PUSH
21475: LD_VAR 0 3
21479: ARRAY
21480: PPUSH
21481: CALL_OW 432
21485: MINUS
21486: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
21487: LD_VAR 0 4
21491: PUSH
21492: LD_VAR 0 5
21496: PPUSH
21497: LD_INT 3
21499: PPUSH
21500: CALL_OW 259
21504: PUSH
21505: LD_VAR 0 5
21509: PPUSH
21510: CALL_OW 432
21514: MINUS
21515: GREATEREQUAL
21516: IFFALSE 21534
// mech := result [ i ] ;
21518: LD_ADDR_VAR 0 5
21522: PUSH
21523: LD_VAR 0 2
21527: PUSH
21528: LD_VAR 0 3
21532: ARRAY
21533: ST_TO_ADDR
// end ;
21534: GO 21443
21536: POP
21537: POP
// end ; ComLinkTo ( vehicle , mech ) ;
21538: LD_VAR 0 1
21542: PPUSH
21543: LD_VAR 0 5
21547: PPUSH
21548: CALL_OW 135
// end ;
21552: LD_VAR 0 2
21556: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
21557: LD_INT 0
21559: PPUSH
21560: PPUSH
21561: PPUSH
21562: PPUSH
21563: PPUSH
21564: PPUSH
21565: PPUSH
21566: PPUSH
21567: PPUSH
21568: PPUSH
21569: PPUSH
21570: PPUSH
21571: PPUSH
// result := [ ] ;
21572: LD_ADDR_VAR 0 7
21576: PUSH
21577: EMPTY
21578: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21579: LD_VAR 0 1
21583: PPUSH
21584: CALL_OW 266
21588: PUSH
21589: LD_INT 0
21591: PUSH
21592: LD_INT 1
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: IN
21599: NOT
21600: IFFALSE 21604
// exit ;
21602: GO 23238
// if name then
21604: LD_VAR 0 3
21608: IFFALSE 21624
// SetBName ( base_dep , name ) ;
21610: LD_VAR 0 1
21614: PPUSH
21615: LD_VAR 0 3
21619: PPUSH
21620: CALL_OW 500
// base := GetBase ( base_dep ) ;
21624: LD_ADDR_VAR 0 15
21628: PUSH
21629: LD_VAR 0 1
21633: PPUSH
21634: CALL_OW 274
21638: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21639: LD_ADDR_VAR 0 16
21643: PUSH
21644: LD_VAR 0 1
21648: PPUSH
21649: CALL_OW 255
21653: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21654: LD_ADDR_VAR 0 17
21658: PUSH
21659: LD_VAR 0 1
21663: PPUSH
21664: CALL_OW 248
21668: ST_TO_ADDR
// if sources then
21669: LD_VAR 0 5
21673: IFFALSE 21720
// for i = 1 to 3 do
21675: LD_ADDR_VAR 0 8
21679: PUSH
21680: DOUBLE
21681: LD_INT 1
21683: DEC
21684: ST_TO_ADDR
21685: LD_INT 3
21687: PUSH
21688: FOR_TO
21689: IFFALSE 21718
// AddResourceType ( base , i , sources [ i ] ) ;
21691: LD_VAR 0 15
21695: PPUSH
21696: LD_VAR 0 8
21700: PPUSH
21701: LD_VAR 0 5
21705: PUSH
21706: LD_VAR 0 8
21710: ARRAY
21711: PPUSH
21712: CALL_OW 276
21716: GO 21688
21718: POP
21719: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
21720: LD_ADDR_VAR 0 18
21724: PUSH
21725: LD_VAR 0 15
21729: PPUSH
21730: LD_VAR 0 2
21734: PPUSH
21735: LD_INT 1
21737: PPUSH
21738: CALL 20873 0 3
21742: ST_TO_ADDR
// InitHc ;
21743: CALL_OW 19
// InitUc ;
21747: CALL_OW 18
// uc_side := side ;
21751: LD_ADDR_OWVAR 20
21755: PUSH
21756: LD_VAR 0 16
21760: ST_TO_ADDR
// uc_nation := nation ;
21761: LD_ADDR_OWVAR 21
21765: PUSH
21766: LD_VAR 0 17
21770: ST_TO_ADDR
// if buildings then
21771: LD_VAR 0 18
21775: IFFALSE 23097
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
21777: LD_ADDR_VAR 0 19
21781: PUSH
21782: LD_VAR 0 18
21786: PPUSH
21787: LD_INT 2
21789: PUSH
21790: LD_INT 30
21792: PUSH
21793: LD_INT 29
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 30
21802: PUSH
21803: LD_INT 30
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: LIST
21814: PPUSH
21815: CALL_OW 72
21819: ST_TO_ADDR
// if tmp then
21820: LD_VAR 0 19
21824: IFFALSE 21872
// for i in tmp do
21826: LD_ADDR_VAR 0 8
21830: PUSH
21831: LD_VAR 0 19
21835: PUSH
21836: FOR_IN
21837: IFFALSE 21870
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
21839: LD_VAR 0 8
21843: PPUSH
21844: CALL_OW 250
21848: PPUSH
21849: LD_VAR 0 8
21853: PPUSH
21854: CALL_OW 251
21858: PPUSH
21859: LD_VAR 0 16
21863: PPUSH
21864: CALL_OW 441
21868: GO 21836
21870: POP
21871: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
21872: LD_VAR 0 18
21876: PPUSH
21877: LD_INT 2
21879: PUSH
21880: LD_INT 30
21882: PUSH
21883: LD_INT 32
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 30
21892: PUSH
21893: LD_INT 33
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: LIST
21904: PPUSH
21905: CALL_OW 72
21909: IFFALSE 21997
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
21911: LD_ADDR_VAR 0 8
21915: PUSH
21916: LD_VAR 0 18
21920: PPUSH
21921: LD_INT 2
21923: PUSH
21924: LD_INT 30
21926: PUSH
21927: LD_INT 32
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 30
21936: PUSH
21937: LD_INT 33
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: LIST
21948: PPUSH
21949: CALL_OW 72
21953: PUSH
21954: FOR_IN
21955: IFFALSE 21995
// begin if not GetBWeapon ( i ) then
21957: LD_VAR 0 8
21961: PPUSH
21962: CALL_OW 269
21966: NOT
21967: IFFALSE 21993
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
21969: LD_VAR 0 8
21973: PPUSH
21974: LD_VAR 0 8
21978: PPUSH
21979: LD_VAR 0 2
21983: PPUSH
21984: CALL 23243 0 2
21988: PPUSH
21989: CALL_OW 431
// end ;
21993: GO 21954
21995: POP
21996: POP
// end ; for i = 1 to personel do
21997: LD_ADDR_VAR 0 8
22001: PUSH
22002: DOUBLE
22003: LD_INT 1
22005: DEC
22006: ST_TO_ADDR
22007: LD_VAR 0 6
22011: PUSH
22012: FOR_TO
22013: IFFALSE 23077
// begin if i > 4 then
22015: LD_VAR 0 8
22019: PUSH
22020: LD_INT 4
22022: GREATER
22023: IFFALSE 22027
// break ;
22025: GO 23077
// case i of 1 :
22027: LD_VAR 0 8
22031: PUSH
22032: LD_INT 1
22034: DOUBLE
22035: EQUAL
22036: IFTRUE 22040
22038: GO 22120
22040: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
22041: LD_ADDR_VAR 0 12
22045: PUSH
22046: LD_VAR 0 18
22050: PPUSH
22051: LD_INT 22
22053: PUSH
22054: LD_VAR 0 16
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 58
22065: PUSH
22066: EMPTY
22067: LIST
22068: PUSH
22069: LD_INT 2
22071: PUSH
22072: LD_INT 30
22074: PUSH
22075: LD_INT 32
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 30
22084: PUSH
22085: LD_INT 4
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 30
22094: PUSH
22095: LD_INT 5
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: LIST
22112: PPUSH
22113: CALL_OW 72
22117: ST_TO_ADDR
22118: GO 22342
22120: LD_INT 2
22122: DOUBLE
22123: EQUAL
22124: IFTRUE 22128
22126: GO 22190
22128: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
22129: LD_ADDR_VAR 0 12
22133: PUSH
22134: LD_VAR 0 18
22138: PPUSH
22139: LD_INT 22
22141: PUSH
22142: LD_VAR 0 16
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 2
22153: PUSH
22154: LD_INT 30
22156: PUSH
22157: LD_INT 0
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 30
22166: PUSH
22167: LD_INT 1
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: LIST
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PPUSH
22183: CALL_OW 72
22187: ST_TO_ADDR
22188: GO 22342
22190: LD_INT 3
22192: DOUBLE
22193: EQUAL
22194: IFTRUE 22198
22196: GO 22260
22198: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
22199: LD_ADDR_VAR 0 12
22203: PUSH
22204: LD_VAR 0 18
22208: PPUSH
22209: LD_INT 22
22211: PUSH
22212: LD_VAR 0 16
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 2
22223: PUSH
22224: LD_INT 30
22226: PUSH
22227: LD_INT 2
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 30
22236: PUSH
22237: LD_INT 3
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: LIST
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PPUSH
22253: CALL_OW 72
22257: ST_TO_ADDR
22258: GO 22342
22260: LD_INT 4
22262: DOUBLE
22263: EQUAL
22264: IFTRUE 22268
22266: GO 22341
22268: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
22269: LD_ADDR_VAR 0 12
22273: PUSH
22274: LD_VAR 0 18
22278: PPUSH
22279: LD_INT 22
22281: PUSH
22282: LD_VAR 0 16
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 2
22293: PUSH
22294: LD_INT 30
22296: PUSH
22297: LD_INT 6
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: LD_INT 30
22306: PUSH
22307: LD_INT 7
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 30
22316: PUSH
22317: LD_INT 8
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PPUSH
22334: CALL_OW 72
22338: ST_TO_ADDR
22339: GO 22342
22341: POP
// if i = 1 then
22342: LD_VAR 0 8
22346: PUSH
22347: LD_INT 1
22349: EQUAL
22350: IFFALSE 22461
// begin tmp := [ ] ;
22352: LD_ADDR_VAR 0 19
22356: PUSH
22357: EMPTY
22358: ST_TO_ADDR
// for j in f do
22359: LD_ADDR_VAR 0 9
22363: PUSH
22364: LD_VAR 0 12
22368: PUSH
22369: FOR_IN
22370: IFFALSE 22443
// if GetBType ( j ) = b_bunker then
22372: LD_VAR 0 9
22376: PPUSH
22377: CALL_OW 266
22381: PUSH
22382: LD_INT 32
22384: EQUAL
22385: IFFALSE 22412
// tmp := Insert ( tmp , 1 , j ) else
22387: LD_ADDR_VAR 0 19
22391: PUSH
22392: LD_VAR 0 19
22396: PPUSH
22397: LD_INT 1
22399: PPUSH
22400: LD_VAR 0 9
22404: PPUSH
22405: CALL_OW 2
22409: ST_TO_ADDR
22410: GO 22441
// tmp := Insert ( tmp , tmp + 1 , j ) ;
22412: LD_ADDR_VAR 0 19
22416: PUSH
22417: LD_VAR 0 19
22421: PPUSH
22422: LD_VAR 0 19
22426: PUSH
22427: LD_INT 1
22429: PLUS
22430: PPUSH
22431: LD_VAR 0 9
22435: PPUSH
22436: CALL_OW 2
22440: ST_TO_ADDR
22441: GO 22369
22443: POP
22444: POP
// if tmp then
22445: LD_VAR 0 19
22449: IFFALSE 22461
// f := tmp ;
22451: LD_ADDR_VAR 0 12
22455: PUSH
22456: LD_VAR 0 19
22460: ST_TO_ADDR
// end ; x := personel [ i ] ;
22461: LD_ADDR_VAR 0 13
22465: PUSH
22466: LD_VAR 0 6
22470: PUSH
22471: LD_VAR 0 8
22475: ARRAY
22476: ST_TO_ADDR
// if x = - 1 then
22477: LD_VAR 0 13
22481: PUSH
22482: LD_INT 1
22484: NEG
22485: EQUAL
22486: IFFALSE 22695
// begin for j in f do
22488: LD_ADDR_VAR 0 9
22492: PUSH
22493: LD_VAR 0 12
22497: PUSH
22498: FOR_IN
22499: IFFALSE 22691
// repeat InitHc ;
22501: CALL_OW 19
// if GetBType ( j ) = b_barracks then
22505: LD_VAR 0 9
22509: PPUSH
22510: CALL_OW 266
22514: PUSH
22515: LD_INT 5
22517: EQUAL
22518: IFFALSE 22588
// begin if UnitsInside ( j ) < 3 then
22520: LD_VAR 0 9
22524: PPUSH
22525: CALL_OW 313
22529: PUSH
22530: LD_INT 3
22532: LESS
22533: IFFALSE 22569
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22535: LD_INT 0
22537: PPUSH
22538: LD_INT 5
22540: PUSH
22541: LD_INT 8
22543: PUSH
22544: LD_INT 9
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: LIST
22551: PUSH
22552: LD_VAR 0 17
22556: ARRAY
22557: PPUSH
22558: LD_VAR 0 4
22562: PPUSH
22563: CALL_OW 380
22567: GO 22586
// PrepareHuman ( false , i , skill ) ;
22569: LD_INT 0
22571: PPUSH
22572: LD_VAR 0 8
22576: PPUSH
22577: LD_VAR 0 4
22581: PPUSH
22582: CALL_OW 380
// end else
22586: GO 22605
// PrepareHuman ( false , i , skill ) ;
22588: LD_INT 0
22590: PPUSH
22591: LD_VAR 0 8
22595: PPUSH
22596: LD_VAR 0 4
22600: PPUSH
22601: CALL_OW 380
// un := CreateHuman ;
22605: LD_ADDR_VAR 0 14
22609: PUSH
22610: CALL_OW 44
22614: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22615: LD_ADDR_VAR 0 7
22619: PUSH
22620: LD_VAR 0 7
22624: PPUSH
22625: LD_INT 1
22627: PPUSH
22628: LD_VAR 0 14
22632: PPUSH
22633: CALL_OW 2
22637: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22638: LD_VAR 0 14
22642: PPUSH
22643: LD_VAR 0 9
22647: PPUSH
22648: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22652: LD_VAR 0 9
22656: PPUSH
22657: CALL_OW 313
22661: PUSH
22662: LD_INT 6
22664: EQUAL
22665: PUSH
22666: LD_VAR 0 9
22670: PPUSH
22671: CALL_OW 266
22675: PUSH
22676: LD_INT 32
22678: PUSH
22679: LD_INT 31
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: IN
22686: OR
22687: IFFALSE 22501
22689: GO 22498
22691: POP
22692: POP
// end else
22693: GO 23075
// for j = 1 to x do
22695: LD_ADDR_VAR 0 9
22699: PUSH
22700: DOUBLE
22701: LD_INT 1
22703: DEC
22704: ST_TO_ADDR
22705: LD_VAR 0 13
22709: PUSH
22710: FOR_TO
22711: IFFALSE 23073
// begin InitHc ;
22713: CALL_OW 19
// if not f then
22717: LD_VAR 0 12
22721: NOT
22722: IFFALSE 22811
// begin PrepareHuman ( false , i , skill ) ;
22724: LD_INT 0
22726: PPUSH
22727: LD_VAR 0 8
22731: PPUSH
22732: LD_VAR 0 4
22736: PPUSH
22737: CALL_OW 380
// un := CreateHuman ;
22741: LD_ADDR_VAR 0 14
22745: PUSH
22746: CALL_OW 44
22750: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22751: LD_ADDR_VAR 0 7
22755: PUSH
22756: LD_VAR 0 7
22760: PPUSH
22761: LD_INT 1
22763: PPUSH
22764: LD_VAR 0 14
22768: PPUSH
22769: CALL_OW 2
22773: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22774: LD_VAR 0 14
22778: PPUSH
22779: LD_VAR 0 1
22783: PPUSH
22784: CALL_OW 250
22788: PPUSH
22789: LD_VAR 0 1
22793: PPUSH
22794: CALL_OW 251
22798: PPUSH
22799: LD_INT 10
22801: PPUSH
22802: LD_INT 0
22804: PPUSH
22805: CALL_OW 50
// continue ;
22809: GO 22710
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
22811: LD_VAR 0 12
22815: PUSH
22816: LD_INT 1
22818: ARRAY
22819: PPUSH
22820: CALL_OW 313
22824: PUSH
22825: LD_VAR 0 12
22829: PUSH
22830: LD_INT 1
22832: ARRAY
22833: PPUSH
22834: CALL_OW 266
22838: PUSH
22839: LD_INT 32
22841: PUSH
22842: LD_INT 31
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: IN
22849: AND
22850: PUSH
22851: LD_VAR 0 12
22855: PUSH
22856: LD_INT 1
22858: ARRAY
22859: PPUSH
22860: CALL_OW 313
22864: PUSH
22865: LD_INT 6
22867: EQUAL
22868: OR
22869: IFFALSE 22889
// f := Delete ( f , 1 ) ;
22871: LD_ADDR_VAR 0 12
22875: PUSH
22876: LD_VAR 0 12
22880: PPUSH
22881: LD_INT 1
22883: PPUSH
22884: CALL_OW 3
22888: ST_TO_ADDR
// if not f then
22889: LD_VAR 0 12
22893: NOT
22894: IFFALSE 22912
// begin x := x + 2 ;
22896: LD_ADDR_VAR 0 13
22900: PUSH
22901: LD_VAR 0 13
22905: PUSH
22906: LD_INT 2
22908: PLUS
22909: ST_TO_ADDR
// continue ;
22910: GO 22710
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
22912: LD_VAR 0 12
22916: PUSH
22917: LD_INT 1
22919: ARRAY
22920: PPUSH
22921: CALL_OW 266
22925: PUSH
22926: LD_INT 5
22928: EQUAL
22929: IFFALSE 23003
// begin if UnitsInside ( f [ 1 ] ) < 3 then
22931: LD_VAR 0 12
22935: PUSH
22936: LD_INT 1
22938: ARRAY
22939: PPUSH
22940: CALL_OW 313
22944: PUSH
22945: LD_INT 3
22947: LESS
22948: IFFALSE 22984
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22950: LD_INT 0
22952: PPUSH
22953: LD_INT 5
22955: PUSH
22956: LD_INT 8
22958: PUSH
22959: LD_INT 9
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: LIST
22966: PUSH
22967: LD_VAR 0 17
22971: ARRAY
22972: PPUSH
22973: LD_VAR 0 4
22977: PPUSH
22978: CALL_OW 380
22982: GO 23001
// PrepareHuman ( false , i , skill ) ;
22984: LD_INT 0
22986: PPUSH
22987: LD_VAR 0 8
22991: PPUSH
22992: LD_VAR 0 4
22996: PPUSH
22997: CALL_OW 380
// end else
23001: GO 23020
// PrepareHuman ( false , i , skill ) ;
23003: LD_INT 0
23005: PPUSH
23006: LD_VAR 0 8
23010: PPUSH
23011: LD_VAR 0 4
23015: PPUSH
23016: CALL_OW 380
// un := CreateHuman ;
23020: LD_ADDR_VAR 0 14
23024: PUSH
23025: CALL_OW 44
23029: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23030: LD_ADDR_VAR 0 7
23034: PUSH
23035: LD_VAR 0 7
23039: PPUSH
23040: LD_INT 1
23042: PPUSH
23043: LD_VAR 0 14
23047: PPUSH
23048: CALL_OW 2
23052: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
23053: LD_VAR 0 14
23057: PPUSH
23058: LD_VAR 0 12
23062: PUSH
23063: LD_INT 1
23065: ARRAY
23066: PPUSH
23067: CALL_OW 52
// end ;
23071: GO 22710
23073: POP
23074: POP
// end ;
23075: GO 22012
23077: POP
23078: POP
// result := result ^ buildings ;
23079: LD_ADDR_VAR 0 7
23083: PUSH
23084: LD_VAR 0 7
23088: PUSH
23089: LD_VAR 0 18
23093: ADD
23094: ST_TO_ADDR
// end else
23095: GO 23238
// begin for i = 1 to personel do
23097: LD_ADDR_VAR 0 8
23101: PUSH
23102: DOUBLE
23103: LD_INT 1
23105: DEC
23106: ST_TO_ADDR
23107: LD_VAR 0 6
23111: PUSH
23112: FOR_TO
23113: IFFALSE 23236
// begin if i > 4 then
23115: LD_VAR 0 8
23119: PUSH
23120: LD_INT 4
23122: GREATER
23123: IFFALSE 23127
// break ;
23125: GO 23236
// x := personel [ i ] ;
23127: LD_ADDR_VAR 0 13
23131: PUSH
23132: LD_VAR 0 6
23136: PUSH
23137: LD_VAR 0 8
23141: ARRAY
23142: ST_TO_ADDR
// if x = - 1 then
23143: LD_VAR 0 13
23147: PUSH
23148: LD_INT 1
23150: NEG
23151: EQUAL
23152: IFFALSE 23156
// continue ;
23154: GO 23112
// PrepareHuman ( false , i , skill ) ;
23156: LD_INT 0
23158: PPUSH
23159: LD_VAR 0 8
23163: PPUSH
23164: LD_VAR 0 4
23168: PPUSH
23169: CALL_OW 380
// un := CreateHuman ;
23173: LD_ADDR_VAR 0 14
23177: PUSH
23178: CALL_OW 44
23182: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23183: LD_VAR 0 14
23187: PPUSH
23188: LD_VAR 0 1
23192: PPUSH
23193: CALL_OW 250
23197: PPUSH
23198: LD_VAR 0 1
23202: PPUSH
23203: CALL_OW 251
23207: PPUSH
23208: LD_INT 10
23210: PPUSH
23211: LD_INT 0
23213: PPUSH
23214: CALL_OW 50
// result := result ^ un ;
23218: LD_ADDR_VAR 0 7
23222: PUSH
23223: LD_VAR 0 7
23227: PUSH
23228: LD_VAR 0 14
23232: ADD
23233: ST_TO_ADDR
// end ;
23234: GO 23112
23236: POP
23237: POP
// end ; end ;
23238: LD_VAR 0 7
23242: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
23243: LD_INT 0
23245: PPUSH
23246: PPUSH
23247: PPUSH
23248: PPUSH
23249: PPUSH
23250: PPUSH
23251: PPUSH
23252: PPUSH
23253: PPUSH
23254: PPUSH
23255: PPUSH
23256: PPUSH
23257: PPUSH
23258: PPUSH
23259: PPUSH
23260: PPUSH
// result := false ;
23261: LD_ADDR_VAR 0 3
23265: PUSH
23266: LD_INT 0
23268: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
23269: LD_VAR 0 1
23273: NOT
23274: PUSH
23275: LD_VAR 0 1
23279: PPUSH
23280: CALL_OW 266
23284: PUSH
23285: LD_INT 32
23287: PUSH
23288: LD_INT 33
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: IN
23295: NOT
23296: OR
23297: IFFALSE 23301
// exit ;
23299: GO 24410
// nat := GetNation ( tower ) ;
23301: LD_ADDR_VAR 0 12
23305: PUSH
23306: LD_VAR 0 1
23310: PPUSH
23311: CALL_OW 248
23315: ST_TO_ADDR
// side := GetSide ( tower ) ;
23316: LD_ADDR_VAR 0 16
23320: PUSH
23321: LD_VAR 0 1
23325: PPUSH
23326: CALL_OW 255
23330: ST_TO_ADDR
// x := GetX ( tower ) ;
23331: LD_ADDR_VAR 0 10
23335: PUSH
23336: LD_VAR 0 1
23340: PPUSH
23341: CALL_OW 250
23345: ST_TO_ADDR
// y := GetY ( tower ) ;
23346: LD_ADDR_VAR 0 11
23350: PUSH
23351: LD_VAR 0 1
23355: PPUSH
23356: CALL_OW 251
23360: ST_TO_ADDR
// if not x or not y then
23361: LD_VAR 0 10
23365: NOT
23366: PUSH
23367: LD_VAR 0 11
23371: NOT
23372: OR
23373: IFFALSE 23377
// exit ;
23375: GO 24410
// weapon := 0 ;
23377: LD_ADDR_VAR 0 18
23381: PUSH
23382: LD_INT 0
23384: ST_TO_ADDR
// fac_list := [ ] ;
23385: LD_ADDR_VAR 0 17
23389: PUSH
23390: EMPTY
23391: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
23392: LD_ADDR_VAR 0 6
23396: PUSH
23397: LD_VAR 0 1
23401: PPUSH
23402: CALL_OW 274
23406: PPUSH
23407: LD_VAR 0 2
23411: PPUSH
23412: LD_INT 0
23414: PPUSH
23415: CALL 20873 0 3
23419: PPUSH
23420: LD_INT 30
23422: PUSH
23423: LD_INT 3
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PPUSH
23430: CALL_OW 72
23434: ST_TO_ADDR
// if not factories then
23435: LD_VAR 0 6
23439: NOT
23440: IFFALSE 23444
// exit ;
23442: GO 24410
// for i in factories do
23444: LD_ADDR_VAR 0 8
23448: PUSH
23449: LD_VAR 0 6
23453: PUSH
23454: FOR_IN
23455: IFFALSE 23480
// fac_list := fac_list union AvailableWeaponList ( i ) ;
23457: LD_ADDR_VAR 0 17
23461: PUSH
23462: LD_VAR 0 17
23466: PUSH
23467: LD_VAR 0 8
23471: PPUSH
23472: CALL_OW 478
23476: UNION
23477: ST_TO_ADDR
23478: GO 23454
23480: POP
23481: POP
// if not fac_list then
23482: LD_VAR 0 17
23486: NOT
23487: IFFALSE 23491
// exit ;
23489: GO 24410
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
23491: LD_ADDR_VAR 0 5
23495: PUSH
23496: LD_INT 4
23498: PUSH
23499: LD_INT 5
23501: PUSH
23502: LD_INT 9
23504: PUSH
23505: LD_INT 10
23507: PUSH
23508: LD_INT 6
23510: PUSH
23511: LD_INT 7
23513: PUSH
23514: LD_INT 11
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 27
23528: PUSH
23529: LD_INT 28
23531: PUSH
23532: LD_INT 26
23534: PUSH
23535: LD_INT 30
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 43
23546: PUSH
23547: LD_INT 44
23549: PUSH
23550: LD_INT 46
23552: PUSH
23553: LD_INT 45
23555: PUSH
23556: LD_INT 47
23558: PUSH
23559: LD_INT 49
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: LIST
23574: PUSH
23575: LD_VAR 0 12
23579: ARRAY
23580: ST_TO_ADDR
// list := list isect fac_list ;
23581: LD_ADDR_VAR 0 5
23585: PUSH
23586: LD_VAR 0 5
23590: PUSH
23591: LD_VAR 0 17
23595: ISECT
23596: ST_TO_ADDR
// if not list then
23597: LD_VAR 0 5
23601: NOT
23602: IFFALSE 23606
// exit ;
23604: GO 24410
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23606: LD_VAR 0 12
23610: PUSH
23611: LD_INT 3
23613: EQUAL
23614: PUSH
23615: LD_INT 49
23617: PUSH
23618: LD_VAR 0 5
23622: IN
23623: AND
23624: PUSH
23625: LD_INT 31
23627: PPUSH
23628: LD_VAR 0 16
23632: PPUSH
23633: CALL_OW 321
23637: PUSH
23638: LD_INT 2
23640: EQUAL
23641: AND
23642: IFFALSE 23702
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23644: LD_INT 22
23646: PUSH
23647: LD_VAR 0 16
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 35
23658: PUSH
23659: LD_INT 49
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: PUSH
23666: LD_INT 91
23668: PUSH
23669: LD_VAR 0 1
23673: PUSH
23674: LD_INT 10
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: LIST
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: LIST
23686: PPUSH
23687: CALL_OW 69
23691: NOT
23692: IFFALSE 23702
// weapon := ru_time_lapser ;
23694: LD_ADDR_VAR 0 18
23698: PUSH
23699: LD_INT 49
23701: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23702: LD_VAR 0 12
23706: PUSH
23707: LD_INT 1
23709: PUSH
23710: LD_INT 2
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: IN
23717: PUSH
23718: LD_INT 11
23720: PUSH
23721: LD_VAR 0 5
23725: IN
23726: PUSH
23727: LD_INT 30
23729: PUSH
23730: LD_VAR 0 5
23734: IN
23735: OR
23736: AND
23737: PUSH
23738: LD_INT 6
23740: PPUSH
23741: LD_VAR 0 16
23745: PPUSH
23746: CALL_OW 321
23750: PUSH
23751: LD_INT 2
23753: EQUAL
23754: AND
23755: IFFALSE 23920
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23757: LD_INT 22
23759: PUSH
23760: LD_VAR 0 16
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 2
23771: PUSH
23772: LD_INT 35
23774: PUSH
23775: LD_INT 11
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 35
23784: PUSH
23785: LD_INT 30
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 91
23799: PUSH
23800: LD_VAR 0 1
23804: PUSH
23805: LD_INT 18
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: LIST
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: LIST
23817: PPUSH
23818: CALL_OW 69
23822: NOT
23823: PUSH
23824: LD_INT 22
23826: PUSH
23827: LD_VAR 0 16
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 2
23838: PUSH
23839: LD_INT 30
23841: PUSH
23842: LD_INT 32
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 30
23851: PUSH
23852: LD_INT 33
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 91
23866: PUSH
23867: LD_VAR 0 1
23871: PUSH
23872: LD_INT 12
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: LIST
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: LIST
23884: PUSH
23885: EMPTY
23886: LIST
23887: PPUSH
23888: CALL_OW 69
23892: PUSH
23893: LD_INT 2
23895: GREATER
23896: AND
23897: IFFALSE 23920
// weapon := [ us_radar , ar_radar ] [ nat ] ;
23899: LD_ADDR_VAR 0 18
23903: PUSH
23904: LD_INT 11
23906: PUSH
23907: LD_INT 30
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_VAR 0 12
23918: ARRAY
23919: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
23920: LD_VAR 0 18
23924: NOT
23925: PUSH
23926: LD_INT 40
23928: PPUSH
23929: LD_VAR 0 16
23933: PPUSH
23934: CALL_OW 321
23938: PUSH
23939: LD_INT 2
23941: EQUAL
23942: AND
23943: PUSH
23944: LD_INT 7
23946: PUSH
23947: LD_VAR 0 5
23951: IN
23952: PUSH
23953: LD_INT 28
23955: PUSH
23956: LD_VAR 0 5
23960: IN
23961: OR
23962: PUSH
23963: LD_INT 45
23965: PUSH
23966: LD_VAR 0 5
23970: IN
23971: OR
23972: AND
23973: IFFALSE 24227
// begin hex := GetHexInfo ( x , y ) ;
23975: LD_ADDR_VAR 0 4
23979: PUSH
23980: LD_VAR 0 10
23984: PPUSH
23985: LD_VAR 0 11
23989: PPUSH
23990: CALL_OW 546
23994: ST_TO_ADDR
// if hex [ 1 ] then
23995: LD_VAR 0 4
23999: PUSH
24000: LD_INT 1
24002: ARRAY
24003: IFFALSE 24007
// exit ;
24005: GO 24410
// height := hex [ 2 ] ;
24007: LD_ADDR_VAR 0 15
24011: PUSH
24012: LD_VAR 0 4
24016: PUSH
24017: LD_INT 2
24019: ARRAY
24020: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
24021: LD_ADDR_VAR 0 14
24025: PUSH
24026: LD_INT 0
24028: PUSH
24029: LD_INT 2
24031: PUSH
24032: LD_INT 3
24034: PUSH
24035: LD_INT 5
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: ST_TO_ADDR
// for i in tmp do
24044: LD_ADDR_VAR 0 8
24048: PUSH
24049: LD_VAR 0 14
24053: PUSH
24054: FOR_IN
24055: IFFALSE 24225
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
24057: LD_ADDR_VAR 0 9
24061: PUSH
24062: LD_VAR 0 10
24066: PPUSH
24067: LD_VAR 0 8
24071: PPUSH
24072: LD_INT 5
24074: PPUSH
24075: CALL_OW 272
24079: PUSH
24080: LD_VAR 0 11
24084: PPUSH
24085: LD_VAR 0 8
24089: PPUSH
24090: LD_INT 5
24092: PPUSH
24093: CALL_OW 273
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
24102: LD_VAR 0 9
24106: PUSH
24107: LD_INT 1
24109: ARRAY
24110: PPUSH
24111: LD_VAR 0 9
24115: PUSH
24116: LD_INT 2
24118: ARRAY
24119: PPUSH
24120: CALL_OW 488
24124: IFFALSE 24223
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
24126: LD_ADDR_VAR 0 4
24130: PUSH
24131: LD_VAR 0 9
24135: PUSH
24136: LD_INT 1
24138: ARRAY
24139: PPUSH
24140: LD_VAR 0 9
24144: PUSH
24145: LD_INT 2
24147: ARRAY
24148: PPUSH
24149: CALL_OW 546
24153: ST_TO_ADDR
// if hex [ 1 ] then
24154: LD_VAR 0 4
24158: PUSH
24159: LD_INT 1
24161: ARRAY
24162: IFFALSE 24166
// continue ;
24164: GO 24054
// h := hex [ 2 ] ;
24166: LD_ADDR_VAR 0 13
24170: PUSH
24171: LD_VAR 0 4
24175: PUSH
24176: LD_INT 2
24178: ARRAY
24179: ST_TO_ADDR
// if h + 7 < height then
24180: LD_VAR 0 13
24184: PUSH
24185: LD_INT 7
24187: PLUS
24188: PUSH
24189: LD_VAR 0 15
24193: LESS
24194: IFFALSE 24223
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
24196: LD_ADDR_VAR 0 18
24200: PUSH
24201: LD_INT 7
24203: PUSH
24204: LD_INT 28
24206: PUSH
24207: LD_INT 45
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: LIST
24214: PUSH
24215: LD_VAR 0 12
24219: ARRAY
24220: ST_TO_ADDR
// break ;
24221: GO 24225
// end ; end ; end ;
24223: GO 24054
24225: POP
24226: POP
// end ; if not weapon then
24227: LD_VAR 0 18
24231: NOT
24232: IFFALSE 24292
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
24234: LD_ADDR_VAR 0 5
24238: PUSH
24239: LD_VAR 0 5
24243: PUSH
24244: LD_INT 11
24246: PUSH
24247: LD_INT 30
24249: PUSH
24250: LD_INT 49
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: LIST
24257: DIFF
24258: ST_TO_ADDR
// if not list then
24259: LD_VAR 0 5
24263: NOT
24264: IFFALSE 24268
// exit ;
24266: GO 24410
// weapon := list [ rand ( 1 , list ) ] ;
24268: LD_ADDR_VAR 0 18
24272: PUSH
24273: LD_VAR 0 5
24277: PUSH
24278: LD_INT 1
24280: PPUSH
24281: LD_VAR 0 5
24285: PPUSH
24286: CALL_OW 12
24290: ARRAY
24291: ST_TO_ADDR
// end ; if weapon then
24292: LD_VAR 0 18
24296: IFFALSE 24410
// begin tmp := CostOfWeapon ( weapon ) ;
24298: LD_ADDR_VAR 0 14
24302: PUSH
24303: LD_VAR 0 18
24307: PPUSH
24308: CALL_OW 451
24312: ST_TO_ADDR
// j := GetBase ( tower ) ;
24313: LD_ADDR_VAR 0 9
24317: PUSH
24318: LD_VAR 0 1
24322: PPUSH
24323: CALL_OW 274
24327: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
24328: LD_VAR 0 9
24332: PPUSH
24333: LD_INT 1
24335: PPUSH
24336: CALL_OW 275
24340: PUSH
24341: LD_VAR 0 14
24345: PUSH
24346: LD_INT 1
24348: ARRAY
24349: GREATEREQUAL
24350: PUSH
24351: LD_VAR 0 9
24355: PPUSH
24356: LD_INT 2
24358: PPUSH
24359: CALL_OW 275
24363: PUSH
24364: LD_VAR 0 14
24368: PUSH
24369: LD_INT 2
24371: ARRAY
24372: GREATEREQUAL
24373: AND
24374: PUSH
24375: LD_VAR 0 9
24379: PPUSH
24380: LD_INT 3
24382: PPUSH
24383: CALL_OW 275
24387: PUSH
24388: LD_VAR 0 14
24392: PUSH
24393: LD_INT 3
24395: ARRAY
24396: GREATEREQUAL
24397: AND
24398: IFFALSE 24410
// result := weapon ;
24400: LD_ADDR_VAR 0 3
24404: PUSH
24405: LD_VAR 0 18
24409: ST_TO_ADDR
// end ; end ;
24410: LD_VAR 0 3
24414: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
24415: LD_INT 0
24417: PPUSH
24418: PPUSH
// result := true ;
24419: LD_ADDR_VAR 0 3
24423: PUSH
24424: LD_INT 1
24426: ST_TO_ADDR
// if array1 = array2 then
24427: LD_VAR 0 1
24431: PUSH
24432: LD_VAR 0 2
24436: EQUAL
24437: IFFALSE 24497
// begin for i = 1 to array1 do
24439: LD_ADDR_VAR 0 4
24443: PUSH
24444: DOUBLE
24445: LD_INT 1
24447: DEC
24448: ST_TO_ADDR
24449: LD_VAR 0 1
24453: PUSH
24454: FOR_TO
24455: IFFALSE 24493
// if array1 [ i ] <> array2 [ i ] then
24457: LD_VAR 0 1
24461: PUSH
24462: LD_VAR 0 4
24466: ARRAY
24467: PUSH
24468: LD_VAR 0 2
24472: PUSH
24473: LD_VAR 0 4
24477: ARRAY
24478: NONEQUAL
24479: IFFALSE 24491
// begin result := false ;
24481: LD_ADDR_VAR 0 3
24485: PUSH
24486: LD_INT 0
24488: ST_TO_ADDR
// break ;
24489: GO 24493
// end ;
24491: GO 24454
24493: POP
24494: POP
// end else
24495: GO 24505
// result := false ;
24497: LD_ADDR_VAR 0 3
24501: PUSH
24502: LD_INT 0
24504: ST_TO_ADDR
// end ;
24505: LD_VAR 0 3
24509: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
24510: LD_INT 0
24512: PPUSH
24513: PPUSH
// if not array1 or not array2 then
24514: LD_VAR 0 1
24518: NOT
24519: PUSH
24520: LD_VAR 0 2
24524: NOT
24525: OR
24526: IFFALSE 24530
// exit ;
24528: GO 24594
// result := true ;
24530: LD_ADDR_VAR 0 3
24534: PUSH
24535: LD_INT 1
24537: ST_TO_ADDR
// for i = 1 to array1 do
24538: LD_ADDR_VAR 0 4
24542: PUSH
24543: DOUBLE
24544: LD_INT 1
24546: DEC
24547: ST_TO_ADDR
24548: LD_VAR 0 1
24552: PUSH
24553: FOR_TO
24554: IFFALSE 24592
// if array1 [ i ] <> array2 [ i ] then
24556: LD_VAR 0 1
24560: PUSH
24561: LD_VAR 0 4
24565: ARRAY
24566: PUSH
24567: LD_VAR 0 2
24571: PUSH
24572: LD_VAR 0 4
24576: ARRAY
24577: NONEQUAL
24578: IFFALSE 24590
// begin result := false ;
24580: LD_ADDR_VAR 0 3
24584: PUSH
24585: LD_INT 0
24587: ST_TO_ADDR
// break ;
24588: GO 24592
// end ;
24590: GO 24553
24592: POP
24593: POP
// end ;
24594: LD_VAR 0 3
24598: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24599: LD_INT 0
24601: PPUSH
24602: PPUSH
24603: PPUSH
// pom := GetBase ( fac ) ;
24604: LD_ADDR_VAR 0 5
24608: PUSH
24609: LD_VAR 0 1
24613: PPUSH
24614: CALL_OW 274
24618: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24619: LD_ADDR_VAR 0 4
24623: PUSH
24624: LD_VAR 0 2
24628: PUSH
24629: LD_INT 1
24631: ARRAY
24632: PPUSH
24633: LD_VAR 0 2
24637: PUSH
24638: LD_INT 2
24640: ARRAY
24641: PPUSH
24642: LD_VAR 0 2
24646: PUSH
24647: LD_INT 3
24649: ARRAY
24650: PPUSH
24651: LD_VAR 0 2
24655: PUSH
24656: LD_INT 4
24658: ARRAY
24659: PPUSH
24660: CALL_OW 449
24664: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24665: LD_ADDR_VAR 0 3
24669: PUSH
24670: LD_VAR 0 5
24674: PPUSH
24675: LD_INT 1
24677: PPUSH
24678: CALL_OW 275
24682: PUSH
24683: LD_VAR 0 4
24687: PUSH
24688: LD_INT 1
24690: ARRAY
24691: GREATEREQUAL
24692: PUSH
24693: LD_VAR 0 5
24697: PPUSH
24698: LD_INT 2
24700: PPUSH
24701: CALL_OW 275
24705: PUSH
24706: LD_VAR 0 4
24710: PUSH
24711: LD_INT 2
24713: ARRAY
24714: GREATEREQUAL
24715: AND
24716: PUSH
24717: LD_VAR 0 5
24721: PPUSH
24722: LD_INT 3
24724: PPUSH
24725: CALL_OW 275
24729: PUSH
24730: LD_VAR 0 4
24734: PUSH
24735: LD_INT 3
24737: ARRAY
24738: GREATEREQUAL
24739: AND
24740: ST_TO_ADDR
// end ;
24741: LD_VAR 0 3
24745: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24746: LD_INT 0
24748: PPUSH
24749: PPUSH
24750: PPUSH
24751: PPUSH
// pom := GetBase ( building ) ;
24752: LD_ADDR_VAR 0 3
24756: PUSH
24757: LD_VAR 0 1
24761: PPUSH
24762: CALL_OW 274
24766: ST_TO_ADDR
// if not pom then
24767: LD_VAR 0 3
24771: NOT
24772: IFFALSE 24776
// exit ;
24774: GO 24946
// btype := GetBType ( building ) ;
24776: LD_ADDR_VAR 0 5
24780: PUSH
24781: LD_VAR 0 1
24785: PPUSH
24786: CALL_OW 266
24790: ST_TO_ADDR
// if btype = b_armoury then
24791: LD_VAR 0 5
24795: PUSH
24796: LD_INT 4
24798: EQUAL
24799: IFFALSE 24809
// btype := b_barracks ;
24801: LD_ADDR_VAR 0 5
24805: PUSH
24806: LD_INT 5
24808: ST_TO_ADDR
// if btype = b_depot then
24809: LD_VAR 0 5
24813: PUSH
24814: LD_INT 0
24816: EQUAL
24817: IFFALSE 24827
// btype := b_warehouse ;
24819: LD_ADDR_VAR 0 5
24823: PUSH
24824: LD_INT 1
24826: ST_TO_ADDR
// if btype = b_workshop then
24827: LD_VAR 0 5
24831: PUSH
24832: LD_INT 2
24834: EQUAL
24835: IFFALSE 24845
// btype := b_factory ;
24837: LD_ADDR_VAR 0 5
24841: PUSH
24842: LD_INT 3
24844: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24845: LD_ADDR_VAR 0 4
24849: PUSH
24850: LD_VAR 0 5
24854: PPUSH
24855: LD_VAR 0 1
24859: PPUSH
24860: CALL_OW 248
24864: PPUSH
24865: CALL_OW 450
24869: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24870: LD_ADDR_VAR 0 2
24874: PUSH
24875: LD_VAR 0 3
24879: PPUSH
24880: LD_INT 1
24882: PPUSH
24883: CALL_OW 275
24887: PUSH
24888: LD_VAR 0 4
24892: PUSH
24893: LD_INT 1
24895: ARRAY
24896: GREATEREQUAL
24897: PUSH
24898: LD_VAR 0 3
24902: PPUSH
24903: LD_INT 2
24905: PPUSH
24906: CALL_OW 275
24910: PUSH
24911: LD_VAR 0 4
24915: PUSH
24916: LD_INT 2
24918: ARRAY
24919: GREATEREQUAL
24920: AND
24921: PUSH
24922: LD_VAR 0 3
24926: PPUSH
24927: LD_INT 3
24929: PPUSH
24930: CALL_OW 275
24934: PUSH
24935: LD_VAR 0 4
24939: PUSH
24940: LD_INT 3
24942: ARRAY
24943: GREATEREQUAL
24944: AND
24945: ST_TO_ADDR
// end ;
24946: LD_VAR 0 2
24950: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
24951: LD_INT 0
24953: PPUSH
24954: PPUSH
24955: PPUSH
// pom := GetBase ( building ) ;
24956: LD_ADDR_VAR 0 4
24960: PUSH
24961: LD_VAR 0 1
24965: PPUSH
24966: CALL_OW 274
24970: ST_TO_ADDR
// if not pom then
24971: LD_VAR 0 4
24975: NOT
24976: IFFALSE 24980
// exit ;
24978: GO 25081
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24980: LD_ADDR_VAR 0 5
24984: PUSH
24985: LD_VAR 0 2
24989: PPUSH
24990: LD_VAR 0 1
24994: PPUSH
24995: CALL_OW 248
24999: PPUSH
25000: CALL_OW 450
25004: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25005: LD_ADDR_VAR 0 3
25009: PUSH
25010: LD_VAR 0 4
25014: PPUSH
25015: LD_INT 1
25017: PPUSH
25018: CALL_OW 275
25022: PUSH
25023: LD_VAR 0 5
25027: PUSH
25028: LD_INT 1
25030: ARRAY
25031: GREATEREQUAL
25032: PUSH
25033: LD_VAR 0 4
25037: PPUSH
25038: LD_INT 2
25040: PPUSH
25041: CALL_OW 275
25045: PUSH
25046: LD_VAR 0 5
25050: PUSH
25051: LD_INT 2
25053: ARRAY
25054: GREATEREQUAL
25055: AND
25056: PUSH
25057: LD_VAR 0 4
25061: PPUSH
25062: LD_INT 3
25064: PPUSH
25065: CALL_OW 275
25069: PUSH
25070: LD_VAR 0 5
25074: PUSH
25075: LD_INT 3
25077: ARRAY
25078: GREATEREQUAL
25079: AND
25080: ST_TO_ADDR
// end ;
25081: LD_VAR 0 3
25085: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
25086: LD_INT 0
25088: PPUSH
25089: PPUSH
25090: PPUSH
25091: PPUSH
25092: PPUSH
25093: PPUSH
25094: PPUSH
25095: PPUSH
25096: PPUSH
25097: PPUSH
25098: PPUSH
// result := false ;
25099: LD_ADDR_VAR 0 8
25103: PUSH
25104: LD_INT 0
25106: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
25107: LD_VAR 0 5
25111: NOT
25112: PUSH
25113: LD_VAR 0 1
25117: NOT
25118: OR
25119: PUSH
25120: LD_VAR 0 2
25124: NOT
25125: OR
25126: PUSH
25127: LD_VAR 0 3
25131: NOT
25132: OR
25133: IFFALSE 25137
// exit ;
25135: GO 25951
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
25137: LD_ADDR_VAR 0 14
25141: PUSH
25142: LD_VAR 0 1
25146: PPUSH
25147: LD_VAR 0 2
25151: PPUSH
25152: LD_VAR 0 3
25156: PPUSH
25157: LD_VAR 0 4
25161: PPUSH
25162: LD_VAR 0 5
25166: PUSH
25167: LD_INT 1
25169: ARRAY
25170: PPUSH
25171: CALL_OW 248
25175: PPUSH
25176: LD_INT 0
25178: PPUSH
25179: CALL 27188 0 6
25183: ST_TO_ADDR
// if not hexes then
25184: LD_VAR 0 14
25188: NOT
25189: IFFALSE 25193
// exit ;
25191: GO 25951
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25193: LD_ADDR_VAR 0 17
25197: PUSH
25198: LD_VAR 0 5
25202: PPUSH
25203: LD_INT 22
25205: PUSH
25206: LD_VAR 0 13
25210: PPUSH
25211: CALL_OW 255
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 2
25222: PUSH
25223: LD_INT 30
25225: PUSH
25226: LD_INT 0
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 30
25235: PUSH
25236: LD_INT 1
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: LIST
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PPUSH
25252: CALL_OW 72
25256: ST_TO_ADDR
// for i = 1 to hexes do
25257: LD_ADDR_VAR 0 9
25261: PUSH
25262: DOUBLE
25263: LD_INT 1
25265: DEC
25266: ST_TO_ADDR
25267: LD_VAR 0 14
25271: PUSH
25272: FOR_TO
25273: IFFALSE 25949
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25275: LD_ADDR_VAR 0 13
25279: PUSH
25280: LD_VAR 0 14
25284: PUSH
25285: LD_VAR 0 9
25289: ARRAY
25290: PUSH
25291: LD_INT 1
25293: ARRAY
25294: PPUSH
25295: LD_VAR 0 14
25299: PUSH
25300: LD_VAR 0 9
25304: ARRAY
25305: PUSH
25306: LD_INT 2
25308: ARRAY
25309: PPUSH
25310: CALL_OW 428
25314: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
25315: LD_VAR 0 14
25319: PUSH
25320: LD_VAR 0 9
25324: ARRAY
25325: PUSH
25326: LD_INT 1
25328: ARRAY
25329: PPUSH
25330: LD_VAR 0 14
25334: PUSH
25335: LD_VAR 0 9
25339: ARRAY
25340: PUSH
25341: LD_INT 2
25343: ARRAY
25344: PPUSH
25345: CALL_OW 351
25349: PUSH
25350: LD_VAR 0 14
25354: PUSH
25355: LD_VAR 0 9
25359: ARRAY
25360: PUSH
25361: LD_INT 1
25363: ARRAY
25364: PPUSH
25365: LD_VAR 0 14
25369: PUSH
25370: LD_VAR 0 9
25374: ARRAY
25375: PUSH
25376: LD_INT 2
25378: ARRAY
25379: PPUSH
25380: CALL_OW 488
25384: NOT
25385: OR
25386: PUSH
25387: LD_VAR 0 13
25391: PPUSH
25392: CALL_OW 247
25396: PUSH
25397: LD_INT 3
25399: EQUAL
25400: OR
25401: IFFALSE 25407
// exit ;
25403: POP
25404: POP
25405: GO 25951
// if not tmp then
25407: LD_VAR 0 13
25411: NOT
25412: IFFALSE 25416
// continue ;
25414: GO 25272
// result := true ;
25416: LD_ADDR_VAR 0 8
25420: PUSH
25421: LD_INT 1
25423: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
25424: LD_VAR 0 6
25428: PUSH
25429: LD_VAR 0 13
25433: PPUSH
25434: CALL_OW 247
25438: PUSH
25439: LD_INT 2
25441: EQUAL
25442: AND
25443: PUSH
25444: LD_VAR 0 13
25448: PPUSH
25449: CALL_OW 263
25453: PUSH
25454: LD_INT 1
25456: EQUAL
25457: AND
25458: IFFALSE 25622
// begin if IsDrivenBy ( tmp ) then
25460: LD_VAR 0 13
25464: PPUSH
25465: CALL_OW 311
25469: IFFALSE 25473
// continue ;
25471: GO 25272
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
25473: LD_VAR 0 6
25477: PPUSH
25478: LD_INT 3
25480: PUSH
25481: LD_INT 60
25483: PUSH
25484: EMPTY
25485: LIST
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 3
25493: PUSH
25494: LD_INT 55
25496: PUSH
25497: EMPTY
25498: LIST
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PPUSH
25508: CALL_OW 72
25512: IFFALSE 25620
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
25514: LD_ADDR_VAR 0 18
25518: PUSH
25519: LD_VAR 0 6
25523: PPUSH
25524: LD_INT 3
25526: PUSH
25527: LD_INT 60
25529: PUSH
25530: EMPTY
25531: LIST
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 3
25539: PUSH
25540: LD_INT 55
25542: PUSH
25543: EMPTY
25544: LIST
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PPUSH
25554: CALL_OW 72
25558: PUSH
25559: LD_INT 1
25561: ARRAY
25562: ST_TO_ADDR
// if IsInUnit ( driver ) then
25563: LD_VAR 0 18
25567: PPUSH
25568: CALL_OW 310
25572: IFFALSE 25583
// ComExit ( driver ) ;
25574: LD_VAR 0 18
25578: PPUSH
25579: CALL 50316 0 1
// AddComEnterUnit ( driver , tmp ) ;
25583: LD_VAR 0 18
25587: PPUSH
25588: LD_VAR 0 13
25592: PPUSH
25593: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
25597: LD_VAR 0 18
25601: PPUSH
25602: LD_VAR 0 7
25606: PPUSH
25607: CALL_OW 173
// AddComExitVehicle ( driver ) ;
25611: LD_VAR 0 18
25615: PPUSH
25616: CALL_OW 181
// end ; continue ;
25620: GO 25272
// end ; if not cleaners or not tmp in cleaners then
25622: LD_VAR 0 6
25626: NOT
25627: PUSH
25628: LD_VAR 0 13
25632: PUSH
25633: LD_VAR 0 6
25637: IN
25638: NOT
25639: OR
25640: IFFALSE 25947
// begin if dep then
25642: LD_VAR 0 17
25646: IFFALSE 25782
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
25648: LD_ADDR_VAR 0 16
25652: PUSH
25653: LD_VAR 0 17
25657: PUSH
25658: LD_INT 1
25660: ARRAY
25661: PPUSH
25662: CALL_OW 250
25666: PPUSH
25667: LD_VAR 0 17
25671: PUSH
25672: LD_INT 1
25674: ARRAY
25675: PPUSH
25676: CALL_OW 254
25680: PPUSH
25681: LD_INT 5
25683: PPUSH
25684: CALL_OW 272
25688: PUSH
25689: LD_VAR 0 17
25693: PUSH
25694: LD_INT 1
25696: ARRAY
25697: PPUSH
25698: CALL_OW 251
25702: PPUSH
25703: LD_VAR 0 17
25707: PUSH
25708: LD_INT 1
25710: ARRAY
25711: PPUSH
25712: CALL_OW 254
25716: PPUSH
25717: LD_INT 5
25719: PPUSH
25720: CALL_OW 273
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
25729: LD_VAR 0 16
25733: PUSH
25734: LD_INT 1
25736: ARRAY
25737: PPUSH
25738: LD_VAR 0 16
25742: PUSH
25743: LD_INT 2
25745: ARRAY
25746: PPUSH
25747: CALL_OW 488
25751: IFFALSE 25782
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
25753: LD_VAR 0 13
25757: PPUSH
25758: LD_VAR 0 16
25762: PUSH
25763: LD_INT 1
25765: ARRAY
25766: PPUSH
25767: LD_VAR 0 16
25771: PUSH
25772: LD_INT 2
25774: ARRAY
25775: PPUSH
25776: CALL_OW 111
// continue ;
25780: GO 25272
// end ; end ; r := GetDir ( tmp ) ;
25782: LD_ADDR_VAR 0 15
25786: PUSH
25787: LD_VAR 0 13
25791: PPUSH
25792: CALL_OW 254
25796: ST_TO_ADDR
// if r = 5 then
25797: LD_VAR 0 15
25801: PUSH
25802: LD_INT 5
25804: EQUAL
25805: IFFALSE 25815
// r := 0 ;
25807: LD_ADDR_VAR 0 15
25811: PUSH
25812: LD_INT 0
25814: ST_TO_ADDR
// for j = r to 5 do
25815: LD_ADDR_VAR 0 10
25819: PUSH
25820: DOUBLE
25821: LD_VAR 0 15
25825: DEC
25826: ST_TO_ADDR
25827: LD_INT 5
25829: PUSH
25830: FOR_TO
25831: IFFALSE 25945
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
25833: LD_ADDR_VAR 0 11
25837: PUSH
25838: LD_VAR 0 13
25842: PPUSH
25843: CALL_OW 250
25847: PPUSH
25848: LD_VAR 0 10
25852: PPUSH
25853: LD_INT 2
25855: PPUSH
25856: CALL_OW 272
25860: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
25861: LD_ADDR_VAR 0 12
25865: PUSH
25866: LD_VAR 0 13
25870: PPUSH
25871: CALL_OW 251
25875: PPUSH
25876: LD_VAR 0 10
25880: PPUSH
25881: LD_INT 2
25883: PPUSH
25884: CALL_OW 273
25888: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
25889: LD_VAR 0 11
25893: PPUSH
25894: LD_VAR 0 12
25898: PPUSH
25899: CALL_OW 488
25903: PUSH
25904: LD_VAR 0 11
25908: PPUSH
25909: LD_VAR 0 12
25913: PPUSH
25914: CALL_OW 428
25918: NOT
25919: AND
25920: IFFALSE 25943
// begin ComMoveXY ( tmp , _x , _y ) ;
25922: LD_VAR 0 13
25926: PPUSH
25927: LD_VAR 0 11
25931: PPUSH
25932: LD_VAR 0 12
25936: PPUSH
25937: CALL_OW 111
// break ;
25941: GO 25945
// end ; end ;
25943: GO 25830
25945: POP
25946: POP
// end ; end ;
25947: GO 25272
25949: POP
25950: POP
// end ;
25951: LD_VAR 0 8
25955: RET
// export function BuildingTechInvented ( side , btype ) ; begin
25956: LD_INT 0
25958: PPUSH
// result := true ;
25959: LD_ADDR_VAR 0 3
25963: PUSH
25964: LD_INT 1
25966: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
25967: LD_VAR 0 2
25971: PUSH
25972: LD_INT 24
25974: DOUBLE
25975: EQUAL
25976: IFTRUE 25986
25978: LD_INT 33
25980: DOUBLE
25981: EQUAL
25982: IFTRUE 25986
25984: GO 26011
25986: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
25987: LD_ADDR_VAR 0 3
25991: PUSH
25992: LD_INT 32
25994: PPUSH
25995: LD_VAR 0 1
25999: PPUSH
26000: CALL_OW 321
26004: PUSH
26005: LD_INT 2
26007: EQUAL
26008: ST_TO_ADDR
26009: GO 26331
26011: LD_INT 20
26013: DOUBLE
26014: EQUAL
26015: IFTRUE 26019
26017: GO 26044
26019: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
26020: LD_ADDR_VAR 0 3
26024: PUSH
26025: LD_INT 6
26027: PPUSH
26028: LD_VAR 0 1
26032: PPUSH
26033: CALL_OW 321
26037: PUSH
26038: LD_INT 2
26040: EQUAL
26041: ST_TO_ADDR
26042: GO 26331
26044: LD_INT 22
26046: DOUBLE
26047: EQUAL
26048: IFTRUE 26058
26050: LD_INT 36
26052: DOUBLE
26053: EQUAL
26054: IFTRUE 26058
26056: GO 26083
26058: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
26059: LD_ADDR_VAR 0 3
26063: PUSH
26064: LD_INT 15
26066: PPUSH
26067: LD_VAR 0 1
26071: PPUSH
26072: CALL_OW 321
26076: PUSH
26077: LD_INT 2
26079: EQUAL
26080: ST_TO_ADDR
26081: GO 26331
26083: LD_INT 30
26085: DOUBLE
26086: EQUAL
26087: IFTRUE 26091
26089: GO 26116
26091: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
26092: LD_ADDR_VAR 0 3
26096: PUSH
26097: LD_INT 20
26099: PPUSH
26100: LD_VAR 0 1
26104: PPUSH
26105: CALL_OW 321
26109: PUSH
26110: LD_INT 2
26112: EQUAL
26113: ST_TO_ADDR
26114: GO 26331
26116: LD_INT 28
26118: DOUBLE
26119: EQUAL
26120: IFTRUE 26130
26122: LD_INT 21
26124: DOUBLE
26125: EQUAL
26126: IFTRUE 26130
26128: GO 26155
26130: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
26131: LD_ADDR_VAR 0 3
26135: PUSH
26136: LD_INT 21
26138: PPUSH
26139: LD_VAR 0 1
26143: PPUSH
26144: CALL_OW 321
26148: PUSH
26149: LD_INT 2
26151: EQUAL
26152: ST_TO_ADDR
26153: GO 26331
26155: LD_INT 16
26157: DOUBLE
26158: EQUAL
26159: IFTRUE 26163
26161: GO 26190
26163: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
26164: LD_ADDR_VAR 0 3
26168: PUSH
26169: LD_EXP 111
26173: PPUSH
26174: LD_VAR 0 1
26178: PPUSH
26179: CALL_OW 321
26183: PUSH
26184: LD_INT 2
26186: EQUAL
26187: ST_TO_ADDR
26188: GO 26331
26190: LD_INT 19
26192: DOUBLE
26193: EQUAL
26194: IFTRUE 26204
26196: LD_INT 23
26198: DOUBLE
26199: EQUAL
26200: IFTRUE 26204
26202: GO 26231
26204: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
26205: LD_ADDR_VAR 0 3
26209: PUSH
26210: LD_EXP 110
26214: PPUSH
26215: LD_VAR 0 1
26219: PPUSH
26220: CALL_OW 321
26224: PUSH
26225: LD_INT 2
26227: EQUAL
26228: ST_TO_ADDR
26229: GO 26331
26231: LD_INT 17
26233: DOUBLE
26234: EQUAL
26235: IFTRUE 26239
26237: GO 26264
26239: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
26240: LD_ADDR_VAR 0 3
26244: PUSH
26245: LD_INT 39
26247: PPUSH
26248: LD_VAR 0 1
26252: PPUSH
26253: CALL_OW 321
26257: PUSH
26258: LD_INT 2
26260: EQUAL
26261: ST_TO_ADDR
26262: GO 26331
26264: LD_INT 18
26266: DOUBLE
26267: EQUAL
26268: IFTRUE 26272
26270: GO 26297
26272: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
26273: LD_ADDR_VAR 0 3
26277: PUSH
26278: LD_INT 40
26280: PPUSH
26281: LD_VAR 0 1
26285: PPUSH
26286: CALL_OW 321
26290: PUSH
26291: LD_INT 2
26293: EQUAL
26294: ST_TO_ADDR
26295: GO 26331
26297: LD_INT 27
26299: DOUBLE
26300: EQUAL
26301: IFTRUE 26305
26303: GO 26330
26305: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
26306: LD_ADDR_VAR 0 3
26310: PUSH
26311: LD_INT 35
26313: PPUSH
26314: LD_VAR 0 1
26318: PPUSH
26319: CALL_OW 321
26323: PUSH
26324: LD_INT 2
26326: EQUAL
26327: ST_TO_ADDR
26328: GO 26331
26330: POP
// end ;
26331: LD_VAR 0 3
26335: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
26336: LD_INT 0
26338: PPUSH
26339: PPUSH
26340: PPUSH
26341: PPUSH
26342: PPUSH
26343: PPUSH
26344: PPUSH
26345: PPUSH
26346: PPUSH
26347: PPUSH
26348: PPUSH
// result := false ;
26349: LD_ADDR_VAR 0 6
26353: PUSH
26354: LD_INT 0
26356: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
26357: LD_VAR 0 1
26361: NOT
26362: PUSH
26363: LD_VAR 0 1
26367: PPUSH
26368: CALL_OW 266
26372: PUSH
26373: LD_INT 0
26375: PUSH
26376: LD_INT 1
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: IN
26383: NOT
26384: OR
26385: PUSH
26386: LD_VAR 0 2
26390: NOT
26391: OR
26392: PUSH
26393: LD_VAR 0 5
26397: PUSH
26398: LD_INT 0
26400: PUSH
26401: LD_INT 1
26403: PUSH
26404: LD_INT 2
26406: PUSH
26407: LD_INT 3
26409: PUSH
26410: LD_INT 4
26412: PUSH
26413: LD_INT 5
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: IN
26424: NOT
26425: OR
26426: PUSH
26427: LD_VAR 0 3
26431: PPUSH
26432: LD_VAR 0 4
26436: PPUSH
26437: CALL_OW 488
26441: NOT
26442: OR
26443: IFFALSE 26447
// exit ;
26445: GO 27183
// side := GetSide ( depot ) ;
26447: LD_ADDR_VAR 0 9
26451: PUSH
26452: LD_VAR 0 1
26456: PPUSH
26457: CALL_OW 255
26461: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
26462: LD_VAR 0 9
26466: PPUSH
26467: LD_VAR 0 2
26471: PPUSH
26472: CALL 25956 0 2
26476: NOT
26477: IFFALSE 26481
// exit ;
26479: GO 27183
// pom := GetBase ( depot ) ;
26481: LD_ADDR_VAR 0 10
26485: PUSH
26486: LD_VAR 0 1
26490: PPUSH
26491: CALL_OW 274
26495: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
26496: LD_ADDR_VAR 0 11
26500: PUSH
26501: LD_VAR 0 2
26505: PPUSH
26506: LD_VAR 0 1
26510: PPUSH
26511: CALL_OW 248
26515: PPUSH
26516: CALL_OW 450
26520: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
26521: LD_VAR 0 10
26525: PPUSH
26526: LD_INT 1
26528: PPUSH
26529: CALL_OW 275
26533: PUSH
26534: LD_VAR 0 11
26538: PUSH
26539: LD_INT 1
26541: ARRAY
26542: GREATEREQUAL
26543: PUSH
26544: LD_VAR 0 10
26548: PPUSH
26549: LD_INT 2
26551: PPUSH
26552: CALL_OW 275
26556: PUSH
26557: LD_VAR 0 11
26561: PUSH
26562: LD_INT 2
26564: ARRAY
26565: GREATEREQUAL
26566: AND
26567: PUSH
26568: LD_VAR 0 10
26572: PPUSH
26573: LD_INT 3
26575: PPUSH
26576: CALL_OW 275
26580: PUSH
26581: LD_VAR 0 11
26585: PUSH
26586: LD_INT 3
26588: ARRAY
26589: GREATEREQUAL
26590: AND
26591: NOT
26592: IFFALSE 26596
// exit ;
26594: GO 27183
// if GetBType ( depot ) = b_depot then
26596: LD_VAR 0 1
26600: PPUSH
26601: CALL_OW 266
26605: PUSH
26606: LD_INT 0
26608: EQUAL
26609: IFFALSE 26621
// dist := 28 else
26611: LD_ADDR_VAR 0 14
26615: PUSH
26616: LD_INT 28
26618: ST_TO_ADDR
26619: GO 26629
// dist := 36 ;
26621: LD_ADDR_VAR 0 14
26625: PUSH
26626: LD_INT 36
26628: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
26629: LD_VAR 0 1
26633: PPUSH
26634: LD_VAR 0 3
26638: PPUSH
26639: LD_VAR 0 4
26643: PPUSH
26644: CALL_OW 297
26648: PUSH
26649: LD_VAR 0 14
26653: GREATER
26654: IFFALSE 26658
// exit ;
26656: GO 27183
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
26658: LD_ADDR_VAR 0 12
26662: PUSH
26663: LD_VAR 0 2
26667: PPUSH
26668: LD_VAR 0 3
26672: PPUSH
26673: LD_VAR 0 4
26677: PPUSH
26678: LD_VAR 0 5
26682: PPUSH
26683: LD_VAR 0 1
26687: PPUSH
26688: CALL_OW 248
26692: PPUSH
26693: LD_INT 0
26695: PPUSH
26696: CALL 27188 0 6
26700: ST_TO_ADDR
// if not hexes then
26701: LD_VAR 0 12
26705: NOT
26706: IFFALSE 26710
// exit ;
26708: GO 27183
// hex := GetHexInfo ( x , y ) ;
26710: LD_ADDR_VAR 0 15
26714: PUSH
26715: LD_VAR 0 3
26719: PPUSH
26720: LD_VAR 0 4
26724: PPUSH
26725: CALL_OW 546
26729: ST_TO_ADDR
// if hex [ 1 ] then
26730: LD_VAR 0 15
26734: PUSH
26735: LD_INT 1
26737: ARRAY
26738: IFFALSE 26742
// exit ;
26740: GO 27183
// height := hex [ 2 ] ;
26742: LD_ADDR_VAR 0 13
26746: PUSH
26747: LD_VAR 0 15
26751: PUSH
26752: LD_INT 2
26754: ARRAY
26755: ST_TO_ADDR
// for i = 1 to hexes do
26756: LD_ADDR_VAR 0 7
26760: PUSH
26761: DOUBLE
26762: LD_INT 1
26764: DEC
26765: ST_TO_ADDR
26766: LD_VAR 0 12
26770: PUSH
26771: FOR_TO
26772: IFFALSE 27102
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
26774: LD_VAR 0 12
26778: PUSH
26779: LD_VAR 0 7
26783: ARRAY
26784: PUSH
26785: LD_INT 1
26787: ARRAY
26788: PPUSH
26789: LD_VAR 0 12
26793: PUSH
26794: LD_VAR 0 7
26798: ARRAY
26799: PUSH
26800: LD_INT 2
26802: ARRAY
26803: PPUSH
26804: CALL_OW 488
26808: NOT
26809: PUSH
26810: LD_VAR 0 12
26814: PUSH
26815: LD_VAR 0 7
26819: ARRAY
26820: PUSH
26821: LD_INT 1
26823: ARRAY
26824: PPUSH
26825: LD_VAR 0 12
26829: PUSH
26830: LD_VAR 0 7
26834: ARRAY
26835: PUSH
26836: LD_INT 2
26838: ARRAY
26839: PPUSH
26840: CALL_OW 428
26844: PUSH
26845: LD_INT 0
26847: GREATER
26848: OR
26849: PUSH
26850: LD_VAR 0 12
26854: PUSH
26855: LD_VAR 0 7
26859: ARRAY
26860: PUSH
26861: LD_INT 1
26863: ARRAY
26864: PPUSH
26865: LD_VAR 0 12
26869: PUSH
26870: LD_VAR 0 7
26874: ARRAY
26875: PUSH
26876: LD_INT 2
26878: ARRAY
26879: PPUSH
26880: CALL_OW 351
26884: OR
26885: IFFALSE 26891
// exit ;
26887: POP
26888: POP
26889: GO 27183
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26891: LD_ADDR_VAR 0 8
26895: PUSH
26896: LD_VAR 0 12
26900: PUSH
26901: LD_VAR 0 7
26905: ARRAY
26906: PUSH
26907: LD_INT 1
26909: ARRAY
26910: PPUSH
26911: LD_VAR 0 12
26915: PUSH
26916: LD_VAR 0 7
26920: ARRAY
26921: PUSH
26922: LD_INT 2
26924: ARRAY
26925: PPUSH
26926: CALL_OW 546
26930: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
26931: LD_VAR 0 8
26935: PUSH
26936: LD_INT 1
26938: ARRAY
26939: PUSH
26940: LD_VAR 0 8
26944: PUSH
26945: LD_INT 2
26947: ARRAY
26948: PUSH
26949: LD_VAR 0 13
26953: PUSH
26954: LD_INT 2
26956: PLUS
26957: GREATER
26958: OR
26959: PUSH
26960: LD_VAR 0 8
26964: PUSH
26965: LD_INT 2
26967: ARRAY
26968: PUSH
26969: LD_VAR 0 13
26973: PUSH
26974: LD_INT 2
26976: MINUS
26977: LESS
26978: OR
26979: PUSH
26980: LD_VAR 0 8
26984: PUSH
26985: LD_INT 3
26987: ARRAY
26988: PUSH
26989: LD_INT 0
26991: PUSH
26992: LD_INT 8
26994: PUSH
26995: LD_INT 9
26997: PUSH
26998: LD_INT 10
27000: PUSH
27001: LD_INT 11
27003: PUSH
27004: LD_INT 12
27006: PUSH
27007: LD_INT 13
27009: PUSH
27010: LD_INT 16
27012: PUSH
27013: LD_INT 17
27015: PUSH
27016: LD_INT 18
27018: PUSH
27019: LD_INT 19
27021: PUSH
27022: LD_INT 20
27024: PUSH
27025: LD_INT 21
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: IN
27043: NOT
27044: OR
27045: PUSH
27046: LD_VAR 0 8
27050: PUSH
27051: LD_INT 5
27053: ARRAY
27054: NOT
27055: OR
27056: PUSH
27057: LD_VAR 0 8
27061: PUSH
27062: LD_INT 6
27064: ARRAY
27065: PUSH
27066: LD_INT 1
27068: PUSH
27069: LD_INT 2
27071: PUSH
27072: LD_INT 7
27074: PUSH
27075: LD_INT 9
27077: PUSH
27078: LD_INT 10
27080: PUSH
27081: LD_INT 11
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: IN
27092: NOT
27093: OR
27094: IFFALSE 27100
// exit ;
27096: POP
27097: POP
27098: GO 27183
// end ;
27100: GO 26771
27102: POP
27103: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
27104: LD_VAR 0 9
27108: PPUSH
27109: LD_VAR 0 3
27113: PPUSH
27114: LD_VAR 0 4
27118: PPUSH
27119: LD_INT 20
27121: PPUSH
27122: CALL 19021 0 4
27126: PUSH
27127: LD_INT 4
27129: ARRAY
27130: IFFALSE 27134
// exit ;
27132: GO 27183
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
27134: LD_VAR 0 2
27138: PUSH
27139: LD_INT 29
27141: PUSH
27142: LD_INT 30
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: IN
27149: PUSH
27150: LD_VAR 0 3
27154: PPUSH
27155: LD_VAR 0 4
27159: PPUSH
27160: LD_VAR 0 9
27164: PPUSH
27165: CALL_OW 440
27169: NOT
27170: AND
27171: IFFALSE 27175
// exit ;
27173: GO 27183
// result := true ;
27175: LD_ADDR_VAR 0 6
27179: PUSH
27180: LD_INT 1
27182: ST_TO_ADDR
// end ;
27183: LD_VAR 0 6
27187: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
27188: LD_INT 0
27190: PPUSH
27191: PPUSH
27192: PPUSH
27193: PPUSH
27194: PPUSH
27195: PPUSH
27196: PPUSH
27197: PPUSH
27198: PPUSH
27199: PPUSH
27200: PPUSH
27201: PPUSH
27202: PPUSH
27203: PPUSH
27204: PPUSH
27205: PPUSH
27206: PPUSH
27207: PPUSH
27208: PPUSH
27209: PPUSH
27210: PPUSH
27211: PPUSH
27212: PPUSH
27213: PPUSH
27214: PPUSH
27215: PPUSH
27216: PPUSH
27217: PPUSH
27218: PPUSH
27219: PPUSH
27220: PPUSH
27221: PPUSH
27222: PPUSH
27223: PPUSH
27224: PPUSH
27225: PPUSH
27226: PPUSH
27227: PPUSH
27228: PPUSH
27229: PPUSH
27230: PPUSH
27231: PPUSH
27232: PPUSH
27233: PPUSH
27234: PPUSH
27235: PPUSH
27236: PPUSH
27237: PPUSH
27238: PPUSH
27239: PPUSH
27240: PPUSH
27241: PPUSH
27242: PPUSH
27243: PPUSH
27244: PPUSH
27245: PPUSH
27246: PPUSH
27247: PPUSH
// result = [ ] ;
27248: LD_ADDR_VAR 0 7
27252: PUSH
27253: EMPTY
27254: ST_TO_ADDR
// temp_list = [ ] ;
27255: LD_ADDR_VAR 0 9
27259: PUSH
27260: EMPTY
27261: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
27262: LD_VAR 0 4
27266: PUSH
27267: LD_INT 0
27269: PUSH
27270: LD_INT 1
27272: PUSH
27273: LD_INT 2
27275: PUSH
27276: LD_INT 3
27278: PUSH
27279: LD_INT 4
27281: PUSH
27282: LD_INT 5
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: IN
27293: NOT
27294: PUSH
27295: LD_VAR 0 1
27299: PUSH
27300: LD_INT 0
27302: PUSH
27303: LD_INT 1
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: IN
27310: PUSH
27311: LD_VAR 0 5
27315: PUSH
27316: LD_INT 1
27318: PUSH
27319: LD_INT 2
27321: PUSH
27322: LD_INT 3
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: LIST
27329: IN
27330: NOT
27331: AND
27332: OR
27333: IFFALSE 27337
// exit ;
27335: GO 45728
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
27337: LD_VAR 0 1
27341: PUSH
27342: LD_INT 6
27344: PUSH
27345: LD_INT 7
27347: PUSH
27348: LD_INT 8
27350: PUSH
27351: LD_INT 13
27353: PUSH
27354: LD_INT 12
27356: PUSH
27357: LD_INT 15
27359: PUSH
27360: LD_INT 11
27362: PUSH
27363: LD_INT 14
27365: PUSH
27366: LD_INT 10
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: IN
27380: IFFALSE 27390
// btype = b_lab ;
27382: LD_ADDR_VAR 0 1
27386: PUSH
27387: LD_INT 6
27389: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
27390: LD_VAR 0 6
27394: PUSH
27395: LD_INT 0
27397: PUSH
27398: LD_INT 1
27400: PUSH
27401: LD_INT 2
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: LIST
27408: IN
27409: NOT
27410: PUSH
27411: LD_VAR 0 1
27415: PUSH
27416: LD_INT 0
27418: PUSH
27419: LD_INT 1
27421: PUSH
27422: LD_INT 2
27424: PUSH
27425: LD_INT 3
27427: PUSH
27428: LD_INT 6
27430: PUSH
27431: LD_INT 36
27433: PUSH
27434: LD_INT 4
27436: PUSH
27437: LD_INT 5
27439: PUSH
27440: LD_INT 31
27442: PUSH
27443: LD_INT 32
27445: PUSH
27446: LD_INT 33
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: IN
27462: NOT
27463: PUSH
27464: LD_VAR 0 6
27468: PUSH
27469: LD_INT 1
27471: EQUAL
27472: AND
27473: OR
27474: PUSH
27475: LD_VAR 0 1
27479: PUSH
27480: LD_INT 2
27482: PUSH
27483: LD_INT 3
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: IN
27490: NOT
27491: PUSH
27492: LD_VAR 0 6
27496: PUSH
27497: LD_INT 2
27499: EQUAL
27500: AND
27501: OR
27502: IFFALSE 27512
// mode = 0 ;
27504: LD_ADDR_VAR 0 6
27508: PUSH
27509: LD_INT 0
27511: ST_TO_ADDR
// case mode of 0 :
27512: LD_VAR 0 6
27516: PUSH
27517: LD_INT 0
27519: DOUBLE
27520: EQUAL
27521: IFTRUE 27525
27523: GO 38978
27525: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27526: LD_ADDR_VAR 0 11
27530: PUSH
27531: LD_INT 0
27533: PUSH
27534: LD_INT 0
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 0
27543: PUSH
27544: LD_INT 1
27546: NEG
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 1
27554: PUSH
27555: LD_INT 0
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 1
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 0
27574: PUSH
27575: LD_INT 1
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 1
27584: NEG
27585: PUSH
27586: LD_INT 0
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 1
27595: NEG
27596: PUSH
27597: LD_INT 1
27599: NEG
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 1
27607: NEG
27608: PUSH
27609: LD_INT 2
27611: NEG
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 0
27619: PUSH
27620: LD_INT 2
27622: NEG
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 1
27630: PUSH
27631: LD_INT 1
27633: NEG
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 1
27641: PUSH
27642: LD_INT 2
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 0
27651: PUSH
27652: LD_INT 2
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 1
27661: NEG
27662: PUSH
27663: LD_INT 1
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 1
27672: PUSH
27673: LD_INT 3
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 0
27682: PUSH
27683: LD_INT 3
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 1
27692: NEG
27693: PUSH
27694: LD_INT 2
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27719: LD_ADDR_VAR 0 12
27723: PUSH
27724: LD_INT 0
27726: PUSH
27727: LD_INT 0
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 0
27736: PUSH
27737: LD_INT 1
27739: NEG
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 1
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 1
27757: PUSH
27758: LD_INT 1
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: LD_INT 1
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 1
27777: NEG
27778: PUSH
27779: LD_INT 0
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 1
27788: NEG
27789: PUSH
27790: LD_INT 1
27792: NEG
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 1
27800: PUSH
27801: LD_INT 1
27803: NEG
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 2
27811: PUSH
27812: LD_INT 0
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 2
27821: PUSH
27822: LD_INT 1
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 1
27831: NEG
27832: PUSH
27833: LD_INT 1
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 2
27842: NEG
27843: PUSH
27844: LD_INT 0
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 2
27853: NEG
27854: PUSH
27855: LD_INT 1
27857: NEG
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 2
27865: NEG
27866: PUSH
27867: LD_INT 1
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 3
27876: NEG
27877: PUSH
27878: LD_INT 0
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 3
27887: NEG
27888: PUSH
27889: LD_INT 1
27891: NEG
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27915: LD_ADDR_VAR 0 13
27919: PUSH
27920: LD_INT 0
27922: PUSH
27923: LD_INT 0
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 0
27932: PUSH
27933: LD_INT 1
27935: NEG
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 1
27943: PUSH
27944: LD_INT 0
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: LD_INT 1
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 0
27963: PUSH
27964: LD_INT 1
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 1
27973: NEG
27974: PUSH
27975: LD_INT 0
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 1
27984: NEG
27985: PUSH
27986: LD_INT 1
27988: NEG
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 1
27996: NEG
27997: PUSH
27998: LD_INT 2
28000: NEG
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 2
28008: PUSH
28009: LD_INT 1
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 2
28018: PUSH
28019: LD_INT 2
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 1
28028: PUSH
28029: LD_INT 2
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 2
28038: NEG
28039: PUSH
28040: LD_INT 1
28042: NEG
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 2
28050: NEG
28051: PUSH
28052: LD_INT 2
28054: NEG
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 2
28062: NEG
28063: PUSH
28064: LD_INT 3
28066: NEG
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 3
28074: NEG
28075: PUSH
28076: LD_INT 2
28078: NEG
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 3
28086: NEG
28087: PUSH
28088: LD_INT 3
28090: NEG
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28114: LD_ADDR_VAR 0 14
28118: PUSH
28119: LD_INT 0
28121: PUSH
28122: LD_INT 0
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 0
28131: PUSH
28132: LD_INT 1
28134: NEG
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 1
28142: PUSH
28143: LD_INT 0
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: LD_INT 1
28152: PUSH
28153: LD_INT 1
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 0
28162: PUSH
28163: LD_INT 1
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 1
28172: NEG
28173: PUSH
28174: LD_INT 0
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 1
28183: NEG
28184: PUSH
28185: LD_INT 1
28187: NEG
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 1
28195: NEG
28196: PUSH
28197: LD_INT 2
28199: NEG
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 0
28207: PUSH
28208: LD_INT 2
28210: NEG
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 1
28218: PUSH
28219: LD_INT 1
28221: NEG
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 1
28229: PUSH
28230: LD_INT 2
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 0
28239: PUSH
28240: LD_INT 2
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 1
28249: NEG
28250: PUSH
28251: LD_INT 1
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 1
28260: NEG
28261: PUSH
28262: LD_INT 3
28264: NEG
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 0
28272: PUSH
28273: LD_INT 3
28275: NEG
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 1
28283: PUSH
28284: LD_INT 2
28286: NEG
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28310: LD_ADDR_VAR 0 15
28314: PUSH
28315: LD_INT 0
28317: PUSH
28318: LD_INT 0
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 0
28327: PUSH
28328: LD_INT 1
28330: NEG
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 1
28338: PUSH
28339: LD_INT 0
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 1
28348: PUSH
28349: LD_INT 1
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 0
28358: PUSH
28359: LD_INT 1
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 1
28368: NEG
28369: PUSH
28370: LD_INT 0
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 1
28379: NEG
28380: PUSH
28381: LD_INT 1
28383: NEG
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 1
28391: PUSH
28392: LD_INT 1
28394: NEG
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 2
28402: PUSH
28403: LD_INT 0
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 2
28412: PUSH
28413: LD_INT 1
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 1
28422: NEG
28423: PUSH
28424: LD_INT 1
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 2
28433: NEG
28434: PUSH
28435: LD_INT 0
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 2
28444: NEG
28445: PUSH
28446: LD_INT 1
28448: NEG
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 2
28456: PUSH
28457: LD_INT 1
28459: NEG
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 3
28467: PUSH
28468: LD_INT 0
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 3
28477: PUSH
28478: LD_INT 1
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28503: LD_ADDR_VAR 0 16
28507: PUSH
28508: LD_INT 0
28510: PUSH
28511: LD_INT 0
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 0
28520: PUSH
28521: LD_INT 1
28523: NEG
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 1
28531: PUSH
28532: LD_INT 0
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 1
28541: PUSH
28542: LD_INT 1
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 0
28551: PUSH
28552: LD_INT 1
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 1
28561: NEG
28562: PUSH
28563: LD_INT 0
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 1
28572: NEG
28573: PUSH
28574: LD_INT 1
28576: NEG
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 1
28584: NEG
28585: PUSH
28586: LD_INT 2
28588: NEG
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 2
28596: PUSH
28597: LD_INT 1
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 2
28606: PUSH
28607: LD_INT 2
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 1
28616: PUSH
28617: LD_INT 2
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 2
28626: NEG
28627: PUSH
28628: LD_INT 1
28630: NEG
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 2
28638: NEG
28639: PUSH
28640: LD_INT 2
28642: NEG
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 3
28650: PUSH
28651: LD_INT 2
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 3
28660: PUSH
28661: LD_INT 3
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 2
28670: PUSH
28671: LD_INT 3
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28696: LD_ADDR_VAR 0 17
28700: PUSH
28701: LD_INT 0
28703: PUSH
28704: LD_INT 0
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 0
28713: PUSH
28714: LD_INT 1
28716: NEG
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 1
28724: PUSH
28725: LD_INT 0
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 1
28734: PUSH
28735: LD_INT 1
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 0
28744: PUSH
28745: LD_INT 1
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 1
28754: NEG
28755: PUSH
28756: LD_INT 0
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 1
28765: NEG
28766: PUSH
28767: LD_INT 1
28769: NEG
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 1
28777: NEG
28778: PUSH
28779: LD_INT 2
28781: NEG
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 0
28789: PUSH
28790: LD_INT 2
28792: NEG
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: LD_INT 1
28800: PUSH
28801: LD_INT 1
28803: NEG
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 2
28811: PUSH
28812: LD_INT 0
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 2
28821: PUSH
28822: LD_INT 1
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 2
28831: PUSH
28832: LD_INT 2
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 1
28841: PUSH
28842: LD_INT 2
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 0
28851: PUSH
28852: LD_INT 2
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 1
28861: NEG
28862: PUSH
28863: LD_INT 1
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 2
28872: NEG
28873: PUSH
28874: LD_INT 0
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 2
28883: NEG
28884: PUSH
28885: LD_INT 1
28887: NEG
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 2
28895: NEG
28896: PUSH
28897: LD_INT 2
28899: NEG
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28926: LD_ADDR_VAR 0 18
28930: PUSH
28931: LD_INT 0
28933: PUSH
28934: LD_INT 0
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 0
28943: PUSH
28944: LD_INT 1
28946: NEG
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 1
28954: PUSH
28955: LD_INT 0
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 1
28964: PUSH
28965: LD_INT 1
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 0
28974: PUSH
28975: LD_INT 1
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: LD_INT 1
28984: NEG
28985: PUSH
28986: LD_INT 0
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 1
28995: NEG
28996: PUSH
28997: LD_INT 1
28999: NEG
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 1
29007: NEG
29008: PUSH
29009: LD_INT 2
29011: NEG
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 0
29019: PUSH
29020: LD_INT 2
29022: NEG
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 1
29030: PUSH
29031: LD_INT 1
29033: NEG
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 2
29041: PUSH
29042: LD_INT 0
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 2
29051: PUSH
29052: LD_INT 1
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 2
29061: PUSH
29062: LD_INT 2
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 1
29071: PUSH
29072: LD_INT 2
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 0
29081: PUSH
29082: LD_INT 2
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: LD_INT 1
29091: NEG
29092: PUSH
29093: LD_INT 1
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 2
29102: NEG
29103: PUSH
29104: LD_INT 0
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 2
29113: NEG
29114: PUSH
29115: LD_INT 1
29117: NEG
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 2
29125: NEG
29126: PUSH
29127: LD_INT 2
29129: NEG
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29156: LD_ADDR_VAR 0 19
29160: PUSH
29161: LD_INT 0
29163: PUSH
29164: LD_INT 0
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 0
29173: PUSH
29174: LD_INT 1
29176: NEG
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 1
29184: PUSH
29185: LD_INT 0
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 1
29194: PUSH
29195: LD_INT 1
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 0
29204: PUSH
29205: LD_INT 1
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 1
29214: NEG
29215: PUSH
29216: LD_INT 0
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 1
29225: NEG
29226: PUSH
29227: LD_INT 1
29229: NEG
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 1
29237: NEG
29238: PUSH
29239: LD_INT 2
29241: NEG
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 0
29249: PUSH
29250: LD_INT 2
29252: NEG
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 1
29260: PUSH
29261: LD_INT 1
29263: NEG
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 2
29271: PUSH
29272: LD_INT 0
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 2
29281: PUSH
29282: LD_INT 1
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 2
29291: PUSH
29292: LD_INT 2
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 1
29301: PUSH
29302: LD_INT 2
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 0
29311: PUSH
29312: LD_INT 2
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 1
29321: NEG
29322: PUSH
29323: LD_INT 1
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 2
29332: NEG
29333: PUSH
29334: LD_INT 0
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 2
29343: NEG
29344: PUSH
29345: LD_INT 1
29347: NEG
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 2
29355: NEG
29356: PUSH
29357: LD_INT 2
29359: NEG
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29386: LD_ADDR_VAR 0 20
29390: PUSH
29391: LD_INT 0
29393: PUSH
29394: LD_INT 0
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 0
29403: PUSH
29404: LD_INT 1
29406: NEG
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 1
29414: PUSH
29415: LD_INT 0
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: LD_INT 1
29424: PUSH
29425: LD_INT 1
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: LD_INT 0
29434: PUSH
29435: LD_INT 1
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: LD_INT 1
29444: NEG
29445: PUSH
29446: LD_INT 0
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 1
29455: NEG
29456: PUSH
29457: LD_INT 1
29459: NEG
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 1
29467: NEG
29468: PUSH
29469: LD_INT 2
29471: NEG
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 0
29479: PUSH
29480: LD_INT 2
29482: NEG
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: LD_INT 1
29490: PUSH
29491: LD_INT 1
29493: NEG
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 2
29501: PUSH
29502: LD_INT 0
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 2
29511: PUSH
29512: LD_INT 1
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 2
29521: PUSH
29522: LD_INT 2
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 1
29531: PUSH
29532: LD_INT 2
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 0
29541: PUSH
29542: LD_INT 2
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 1
29551: NEG
29552: PUSH
29553: LD_INT 1
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 2
29562: NEG
29563: PUSH
29564: LD_INT 0
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 2
29573: NEG
29574: PUSH
29575: LD_INT 1
29577: NEG
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 2
29585: NEG
29586: PUSH
29587: LD_INT 2
29589: NEG
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29616: LD_ADDR_VAR 0 21
29620: PUSH
29621: LD_INT 0
29623: PUSH
29624: LD_INT 0
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 0
29633: PUSH
29634: LD_INT 1
29636: NEG
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 1
29644: PUSH
29645: LD_INT 0
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: LD_INT 1
29654: PUSH
29655: LD_INT 1
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 0
29664: PUSH
29665: LD_INT 1
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: LD_INT 1
29674: NEG
29675: PUSH
29676: LD_INT 0
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 1
29685: NEG
29686: PUSH
29687: LD_INT 1
29689: NEG
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 1
29697: NEG
29698: PUSH
29699: LD_INT 2
29701: NEG
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 0
29709: PUSH
29710: LD_INT 2
29712: NEG
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: LD_INT 1
29723: NEG
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 2
29731: PUSH
29732: LD_INT 0
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 2
29741: PUSH
29742: LD_INT 1
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 2
29751: PUSH
29752: LD_INT 2
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 1
29761: PUSH
29762: LD_INT 2
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 0
29771: PUSH
29772: LD_INT 2
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 1
29781: NEG
29782: PUSH
29783: LD_INT 1
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 2
29792: NEG
29793: PUSH
29794: LD_INT 0
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 2
29803: NEG
29804: PUSH
29805: LD_INT 1
29807: NEG
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 2
29815: NEG
29816: PUSH
29817: LD_INT 2
29819: NEG
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29846: LD_ADDR_VAR 0 22
29850: PUSH
29851: LD_INT 0
29853: PUSH
29854: LD_INT 0
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 0
29863: PUSH
29864: LD_INT 1
29866: NEG
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 1
29874: PUSH
29875: LD_INT 0
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 1
29884: PUSH
29885: LD_INT 1
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 0
29894: PUSH
29895: LD_INT 1
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 1
29904: NEG
29905: PUSH
29906: LD_INT 0
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 1
29915: NEG
29916: PUSH
29917: LD_INT 1
29919: NEG
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 1
29927: NEG
29928: PUSH
29929: LD_INT 2
29931: NEG
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 0
29939: PUSH
29940: LD_INT 2
29942: NEG
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 1
29950: PUSH
29951: LD_INT 1
29953: NEG
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 2
29961: PUSH
29962: LD_INT 0
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 2
29971: PUSH
29972: LD_INT 1
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 2
29981: PUSH
29982: LD_INT 2
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 1
29991: PUSH
29992: LD_INT 2
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 0
30001: PUSH
30002: LD_INT 2
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 1
30011: NEG
30012: PUSH
30013: LD_INT 1
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 2
30022: NEG
30023: PUSH
30024: LD_INT 0
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 2
30033: NEG
30034: PUSH
30035: LD_INT 1
30037: NEG
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 2
30045: NEG
30046: PUSH
30047: LD_INT 2
30049: NEG
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30076: LD_ADDR_VAR 0 23
30080: PUSH
30081: LD_INT 0
30083: PUSH
30084: LD_INT 0
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 0
30093: PUSH
30094: LD_INT 1
30096: NEG
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 1
30104: PUSH
30105: LD_INT 0
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 1
30114: PUSH
30115: LD_INT 1
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 0
30124: PUSH
30125: LD_INT 1
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 1
30134: NEG
30135: PUSH
30136: LD_INT 0
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 1
30145: NEG
30146: PUSH
30147: LD_INT 1
30149: NEG
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 1
30157: NEG
30158: PUSH
30159: LD_INT 2
30161: NEG
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 0
30169: PUSH
30170: LD_INT 2
30172: NEG
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 1
30180: PUSH
30181: LD_INT 1
30183: NEG
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 2
30191: PUSH
30192: LD_INT 0
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 2
30201: PUSH
30202: LD_INT 1
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 2
30211: PUSH
30212: LD_INT 2
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 1
30221: PUSH
30222: LD_INT 2
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 0
30231: PUSH
30232: LD_INT 2
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 1
30241: NEG
30242: PUSH
30243: LD_INT 1
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 2
30252: NEG
30253: PUSH
30254: LD_INT 0
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 2
30263: NEG
30264: PUSH
30265: LD_INT 1
30267: NEG
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 2
30275: NEG
30276: PUSH
30277: LD_INT 2
30279: NEG
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 2
30287: NEG
30288: PUSH
30289: LD_INT 3
30291: NEG
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 1
30299: NEG
30300: PUSH
30301: LD_INT 3
30303: NEG
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 1
30311: PUSH
30312: LD_INT 2
30314: NEG
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 2
30322: PUSH
30323: LD_INT 1
30325: NEG
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
30356: LD_ADDR_VAR 0 24
30360: PUSH
30361: LD_INT 0
30363: PUSH
30364: LD_INT 0
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 0
30373: PUSH
30374: LD_INT 1
30376: NEG
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 1
30384: PUSH
30385: LD_INT 0
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 1
30394: PUSH
30395: LD_INT 1
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 0
30404: PUSH
30405: LD_INT 1
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 1
30414: NEG
30415: PUSH
30416: LD_INT 0
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 1
30425: NEG
30426: PUSH
30427: LD_INT 1
30429: NEG
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 1
30437: NEG
30438: PUSH
30439: LD_INT 2
30441: NEG
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 0
30449: PUSH
30450: LD_INT 2
30452: NEG
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 1
30460: PUSH
30461: LD_INT 1
30463: NEG
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 2
30471: PUSH
30472: LD_INT 0
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 2
30481: PUSH
30482: LD_INT 1
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 2
30491: PUSH
30492: LD_INT 2
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 1
30501: PUSH
30502: LD_INT 2
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 0
30511: PUSH
30512: LD_INT 2
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 1
30521: NEG
30522: PUSH
30523: LD_INT 1
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 2
30532: NEG
30533: PUSH
30534: LD_INT 0
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 2
30543: NEG
30544: PUSH
30545: LD_INT 1
30547: NEG
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 2
30555: NEG
30556: PUSH
30557: LD_INT 2
30559: NEG
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 1
30567: PUSH
30568: LD_INT 2
30570: NEG
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 2
30578: PUSH
30579: LD_INT 1
30581: NEG
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 3
30589: PUSH
30590: LD_INT 1
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 3
30599: PUSH
30600: LD_INT 2
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
30632: LD_ADDR_VAR 0 25
30636: PUSH
30637: LD_INT 0
30639: PUSH
30640: LD_INT 0
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 0
30649: PUSH
30650: LD_INT 1
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 1
30660: PUSH
30661: LD_INT 0
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 1
30670: PUSH
30671: LD_INT 1
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 0
30680: PUSH
30681: LD_INT 1
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 1
30690: NEG
30691: PUSH
30692: LD_INT 0
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 1
30701: NEG
30702: PUSH
30703: LD_INT 1
30705: NEG
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 1
30713: NEG
30714: PUSH
30715: LD_INT 2
30717: NEG
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 0
30725: PUSH
30726: LD_INT 2
30728: NEG
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 1
30736: PUSH
30737: LD_INT 1
30739: NEG
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 2
30747: PUSH
30748: LD_INT 0
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 2
30757: PUSH
30758: LD_INT 1
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 2
30767: PUSH
30768: LD_INT 2
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 1
30777: PUSH
30778: LD_INT 2
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 0
30787: PUSH
30788: LD_INT 2
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 1
30797: NEG
30798: PUSH
30799: LD_INT 1
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 2
30808: NEG
30809: PUSH
30810: LD_INT 0
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 2
30819: NEG
30820: PUSH
30821: LD_INT 1
30823: NEG
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 2
30831: NEG
30832: PUSH
30833: LD_INT 2
30835: NEG
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 3
30843: PUSH
30844: LD_INT 1
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 3
30853: PUSH
30854: LD_INT 2
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 2
30863: PUSH
30864: LD_INT 3
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 1
30873: PUSH
30874: LD_INT 3
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30906: LD_ADDR_VAR 0 26
30910: PUSH
30911: LD_INT 0
30913: PUSH
30914: LD_INT 0
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 0
30923: PUSH
30924: LD_INT 1
30926: NEG
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PUSH
30932: LD_INT 1
30934: PUSH
30935: LD_INT 0
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 1
30944: PUSH
30945: LD_INT 1
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 0
30954: PUSH
30955: LD_INT 1
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 1
30964: NEG
30965: PUSH
30966: LD_INT 0
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 1
30975: NEG
30976: PUSH
30977: LD_INT 1
30979: NEG
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 1
30987: NEG
30988: PUSH
30989: LD_INT 2
30991: NEG
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 0
30999: PUSH
31000: LD_INT 2
31002: NEG
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 1
31010: PUSH
31011: LD_INT 1
31013: NEG
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 2
31021: PUSH
31022: LD_INT 0
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 2
31031: PUSH
31032: LD_INT 1
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 2
31041: PUSH
31042: LD_INT 2
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 1
31051: PUSH
31052: LD_INT 2
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: LD_INT 2
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 1
31071: NEG
31072: PUSH
31073: LD_INT 1
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 2
31082: NEG
31083: PUSH
31084: LD_INT 0
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 2
31093: NEG
31094: PUSH
31095: LD_INT 1
31097: NEG
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 2
31105: NEG
31106: PUSH
31107: LD_INT 2
31109: NEG
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 2
31117: PUSH
31118: LD_INT 3
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 1
31127: PUSH
31128: LD_INT 3
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 1
31137: NEG
31138: PUSH
31139: LD_INT 2
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 2
31148: NEG
31149: PUSH
31150: LD_INT 1
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31182: LD_ADDR_VAR 0 27
31186: PUSH
31187: LD_INT 0
31189: PUSH
31190: LD_INT 0
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 0
31199: PUSH
31200: LD_INT 1
31202: NEG
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 1
31210: PUSH
31211: LD_INT 0
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 1
31220: PUSH
31221: LD_INT 1
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 0
31230: PUSH
31231: LD_INT 1
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 1
31240: NEG
31241: PUSH
31242: LD_INT 0
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 1
31251: NEG
31252: PUSH
31253: LD_INT 1
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 1
31263: NEG
31264: PUSH
31265: LD_INT 2
31267: NEG
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 0
31275: PUSH
31276: LD_INT 2
31278: NEG
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 1
31286: PUSH
31287: LD_INT 1
31289: NEG
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 2
31297: PUSH
31298: LD_INT 0
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 2
31307: PUSH
31308: LD_INT 1
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 2
31317: PUSH
31318: LD_INT 2
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 1
31327: PUSH
31328: LD_INT 2
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 0
31337: PUSH
31338: LD_INT 2
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 1
31347: NEG
31348: PUSH
31349: LD_INT 1
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 2
31358: NEG
31359: PUSH
31360: LD_INT 0
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 2
31369: NEG
31370: PUSH
31371: LD_INT 1
31373: NEG
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 2
31381: NEG
31382: PUSH
31383: LD_INT 2
31385: NEG
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 1
31393: NEG
31394: PUSH
31395: LD_INT 2
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 2
31404: NEG
31405: PUSH
31406: LD_INT 1
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 3
31415: NEG
31416: PUSH
31417: LD_INT 1
31419: NEG
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 3
31427: NEG
31428: PUSH
31429: LD_INT 2
31431: NEG
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31462: LD_ADDR_VAR 0 28
31466: PUSH
31467: LD_INT 0
31469: PUSH
31470: LD_INT 0
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 0
31479: PUSH
31480: LD_INT 1
31482: NEG
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 1
31490: PUSH
31491: LD_INT 0
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 1
31500: PUSH
31501: LD_INT 1
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 0
31510: PUSH
31511: LD_INT 1
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 1
31520: NEG
31521: PUSH
31522: LD_INT 0
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 1
31531: NEG
31532: PUSH
31533: LD_INT 1
31535: NEG
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 1
31543: NEG
31544: PUSH
31545: LD_INT 2
31547: NEG
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 0
31555: PUSH
31556: LD_INT 2
31558: NEG
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 1
31566: PUSH
31567: LD_INT 1
31569: NEG
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 2
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 2
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 2
31597: PUSH
31598: LD_INT 2
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 1
31607: PUSH
31608: LD_INT 2
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 0
31617: PUSH
31618: LD_INT 2
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 1
31627: NEG
31628: PUSH
31629: LD_INT 1
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 2
31638: NEG
31639: PUSH
31640: LD_INT 0
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 2
31649: NEG
31650: PUSH
31651: LD_INT 1
31653: NEG
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 2
31661: NEG
31662: PUSH
31663: LD_INT 2
31665: NEG
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 2
31673: NEG
31674: PUSH
31675: LD_INT 3
31677: NEG
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 1
31685: NEG
31686: PUSH
31687: LD_INT 3
31689: NEG
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 3
31697: NEG
31698: PUSH
31699: LD_INT 1
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 3
31709: NEG
31710: PUSH
31711: LD_INT 2
31713: NEG
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31744: LD_ADDR_VAR 0 29
31748: PUSH
31749: LD_INT 0
31751: PUSH
31752: LD_INT 0
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 0
31761: PUSH
31762: LD_INT 1
31764: NEG
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 1
31772: PUSH
31773: LD_INT 0
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 1
31782: PUSH
31783: LD_INT 1
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 0
31792: PUSH
31793: LD_INT 1
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 1
31802: NEG
31803: PUSH
31804: LD_INT 0
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 1
31813: NEG
31814: PUSH
31815: LD_INT 1
31817: NEG
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 1
31825: NEG
31826: PUSH
31827: LD_INT 2
31829: NEG
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 0
31837: PUSH
31838: LD_INT 2
31840: NEG
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 1
31848: PUSH
31849: LD_INT 1
31851: NEG
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 2
31859: PUSH
31860: LD_INT 0
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 2
31869: PUSH
31870: LD_INT 1
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 1
31879: PUSH
31880: LD_INT 2
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 0
31889: PUSH
31890: LD_INT 2
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 1
31899: NEG
31900: PUSH
31901: LD_INT 1
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 2
31910: NEG
31911: PUSH
31912: LD_INT 1
31914: NEG
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 2
31922: NEG
31923: PUSH
31924: LD_INT 2
31926: NEG
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 2
31934: NEG
31935: PUSH
31936: LD_INT 3
31938: NEG
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 2
31946: PUSH
31947: LD_INT 1
31949: NEG
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 3
31957: PUSH
31958: LD_INT 1
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 1
31967: PUSH
31968: LD_INT 3
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 1
31977: NEG
31978: PUSH
31979: LD_INT 2
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 3
31988: NEG
31989: PUSH
31990: LD_INT 2
31992: NEG
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32023: LD_ADDR_VAR 0 30
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: LD_INT 0
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 0
32040: PUSH
32041: LD_INT 1
32043: NEG
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 1
32051: PUSH
32052: LD_INT 0
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 1
32061: PUSH
32062: LD_INT 1
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 0
32071: PUSH
32072: LD_INT 1
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 1
32081: NEG
32082: PUSH
32083: LD_INT 0
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 1
32092: NEG
32093: PUSH
32094: LD_INT 1
32096: NEG
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 1
32104: NEG
32105: PUSH
32106: LD_INT 2
32108: NEG
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 0
32116: PUSH
32117: LD_INT 2
32119: NEG
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 1
32127: PUSH
32128: LD_INT 1
32130: NEG
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 2
32138: PUSH
32139: LD_INT 0
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 2
32148: PUSH
32149: LD_INT 1
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 2
32158: PUSH
32159: LD_INT 2
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 1
32168: PUSH
32169: LD_INT 2
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 1
32178: NEG
32179: PUSH
32180: LD_INT 1
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 2
32189: NEG
32190: PUSH
32191: LD_INT 0
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 2
32200: NEG
32201: PUSH
32202: LD_INT 1
32204: NEG
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 1
32212: NEG
32213: PUSH
32214: LD_INT 3
32216: NEG
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 1
32224: PUSH
32225: LD_INT 2
32227: NEG
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 3
32235: PUSH
32236: LD_INT 2
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 2
32245: PUSH
32246: LD_INT 3
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 2
32255: NEG
32256: PUSH
32257: LD_INT 1
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 3
32266: NEG
32267: PUSH
32268: LD_INT 1
32270: NEG
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32301: LD_ADDR_VAR 0 31
32305: PUSH
32306: LD_INT 0
32308: PUSH
32309: LD_INT 0
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 0
32318: PUSH
32319: LD_INT 1
32321: NEG
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 1
32329: PUSH
32330: LD_INT 0
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 1
32339: PUSH
32340: LD_INT 1
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 0
32349: PUSH
32350: LD_INT 1
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 1
32359: NEG
32360: PUSH
32361: LD_INT 0
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 1
32370: NEG
32371: PUSH
32372: LD_INT 1
32374: NEG
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 1
32382: NEG
32383: PUSH
32384: LD_INT 2
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 1
32394: PUSH
32395: LD_INT 1
32397: NEG
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 2
32405: PUSH
32406: LD_INT 0
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 2
32415: PUSH
32416: LD_INT 1
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 2
32425: PUSH
32426: LD_INT 2
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 1
32435: PUSH
32436: LD_INT 2
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 0
32445: PUSH
32446: LD_INT 2
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 1
32455: NEG
32456: PUSH
32457: LD_INT 1
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 2
32466: NEG
32467: PUSH
32468: LD_INT 1
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 2
32478: NEG
32479: PUSH
32480: LD_INT 2
32482: NEG
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 2
32490: NEG
32491: PUSH
32492: LD_INT 3
32494: NEG
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 2
32502: PUSH
32503: LD_INT 1
32505: NEG
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 3
32513: PUSH
32514: LD_INT 1
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 1
32523: PUSH
32524: LD_INT 3
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 1
32533: NEG
32534: PUSH
32535: LD_INT 2
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 3
32544: NEG
32545: PUSH
32546: LD_INT 2
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32579: LD_ADDR_VAR 0 32
32583: PUSH
32584: LD_INT 0
32586: PUSH
32587: LD_INT 0
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 0
32596: PUSH
32597: LD_INT 1
32599: NEG
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 1
32607: PUSH
32608: LD_INT 0
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 1
32617: PUSH
32618: LD_INT 1
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 0
32627: PUSH
32628: LD_INT 1
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 1
32637: NEG
32638: PUSH
32639: LD_INT 0
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 1
32648: NEG
32649: PUSH
32650: LD_INT 1
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 1
32660: NEG
32661: PUSH
32662: LD_INT 2
32664: NEG
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 0
32672: PUSH
32673: LD_INT 2
32675: NEG
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 1
32683: PUSH
32684: LD_INT 1
32686: NEG
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 2
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 2
32704: PUSH
32705: LD_INT 2
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 1
32714: PUSH
32715: LD_INT 2
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 0
32724: PUSH
32725: LD_INT 2
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 1
32734: NEG
32735: PUSH
32736: LD_INT 1
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 2
32745: NEG
32746: PUSH
32747: LD_INT 0
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 2
32756: NEG
32757: PUSH
32758: LD_INT 1
32760: NEG
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 1
32768: NEG
32769: PUSH
32770: LD_INT 3
32772: NEG
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 1
32780: PUSH
32781: LD_INT 2
32783: NEG
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 3
32791: PUSH
32792: LD_INT 2
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 2
32801: PUSH
32802: LD_INT 3
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 2
32811: NEG
32812: PUSH
32813: LD_INT 1
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 3
32822: NEG
32823: PUSH
32824: LD_INT 1
32826: NEG
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32857: LD_ADDR_VAR 0 33
32861: PUSH
32862: LD_INT 0
32864: PUSH
32865: LD_INT 0
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 0
32874: PUSH
32875: LD_INT 1
32877: NEG
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 1
32885: PUSH
32886: LD_INT 0
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 1
32895: PUSH
32896: LD_INT 1
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 0
32905: PUSH
32906: LD_INT 1
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 1
32915: NEG
32916: PUSH
32917: LD_INT 0
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 1
32926: NEG
32927: PUSH
32928: LD_INT 1
32930: NEG
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 1
32938: NEG
32939: PUSH
32940: LD_INT 2
32942: NEG
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 1
32950: PUSH
32951: LD_INT 1
32953: NEG
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 2
32961: PUSH
32962: LD_INT 0
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 2
32971: PUSH
32972: LD_INT 1
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 1
32981: PUSH
32982: LD_INT 2
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 0
32991: PUSH
32992: LD_INT 2
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 1
33001: NEG
33002: PUSH
33003: LD_INT 1
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 2
33012: NEG
33013: PUSH
33014: LD_INT 0
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 2
33023: NEG
33024: PUSH
33025: LD_INT 1
33027: NEG
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 2
33035: NEG
33036: PUSH
33037: LD_INT 2
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 2
33047: NEG
33048: PUSH
33049: LD_INT 3
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 2
33059: PUSH
33060: LD_INT 1
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 3
33070: PUSH
33071: LD_INT 1
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 1
33080: PUSH
33081: LD_INT 3
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 1
33090: NEG
33091: PUSH
33092: LD_INT 2
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 3
33101: NEG
33102: PUSH
33103: LD_INT 2
33105: NEG
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33136: LD_ADDR_VAR 0 34
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 0
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 1
33164: PUSH
33165: LD_INT 0
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 1
33174: PUSH
33175: LD_INT 1
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 0
33184: PUSH
33185: LD_INT 1
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 1
33194: NEG
33195: PUSH
33196: LD_INT 0
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 1
33205: NEG
33206: PUSH
33207: LD_INT 1
33209: NEG
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 1
33217: NEG
33218: PUSH
33219: LD_INT 2
33221: NEG
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 0
33229: PUSH
33230: LD_INT 2
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 1
33240: PUSH
33241: LD_INT 1
33243: NEG
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 2
33251: PUSH
33252: LD_INT 1
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 2
33261: PUSH
33262: LD_INT 2
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 1
33271: PUSH
33272: LD_INT 2
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 1
33281: NEG
33282: PUSH
33283: LD_INT 1
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 2
33292: NEG
33293: PUSH
33294: LD_INT 0
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 2
33303: NEG
33304: PUSH
33305: LD_INT 1
33307: NEG
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 2
33315: NEG
33316: PUSH
33317: LD_INT 2
33319: NEG
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 1
33327: NEG
33328: PUSH
33329: LD_INT 3
33331: NEG
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 1
33339: PUSH
33340: LD_INT 2
33342: NEG
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 3
33350: PUSH
33351: LD_INT 2
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 2
33360: PUSH
33361: LD_INT 3
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 2
33370: NEG
33371: PUSH
33372: LD_INT 1
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 3
33381: NEG
33382: PUSH
33383: LD_INT 1
33385: NEG
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33416: LD_ADDR_VAR 0 35
33420: PUSH
33421: LD_INT 0
33423: PUSH
33424: LD_INT 0
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 0
33433: PUSH
33434: LD_INT 1
33436: NEG
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 1
33444: PUSH
33445: LD_INT 0
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 1
33454: PUSH
33455: LD_INT 1
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: LD_INT 1
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 1
33474: NEG
33475: PUSH
33476: LD_INT 0
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 1
33485: NEG
33486: PUSH
33487: LD_INT 1
33489: NEG
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 2
33497: PUSH
33498: LD_INT 1
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 2
33507: NEG
33508: PUSH
33509: LD_INT 1
33511: NEG
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33528: LD_ADDR_VAR 0 36
33532: PUSH
33533: LD_INT 0
33535: PUSH
33536: LD_INT 0
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 0
33545: PUSH
33546: LD_INT 1
33548: NEG
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 1
33556: PUSH
33557: LD_INT 0
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 1
33566: PUSH
33567: LD_INT 1
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: LD_INT 1
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 1
33586: NEG
33587: PUSH
33588: LD_INT 0
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 1
33597: NEG
33598: PUSH
33599: LD_INT 1
33601: NEG
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 1
33609: NEG
33610: PUSH
33611: LD_INT 2
33613: NEG
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 1
33621: PUSH
33622: LD_INT 2
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33640: LD_ADDR_VAR 0 37
33644: PUSH
33645: LD_INT 0
33647: PUSH
33648: LD_INT 0
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 0
33657: PUSH
33658: LD_INT 1
33660: NEG
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 1
33668: PUSH
33669: LD_INT 0
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 1
33678: PUSH
33679: LD_INT 1
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 0
33688: PUSH
33689: LD_INT 1
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 1
33698: NEG
33699: PUSH
33700: LD_INT 0
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 1
33709: NEG
33710: PUSH
33711: LD_INT 1
33713: NEG
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 1
33721: PUSH
33722: LD_INT 1
33724: NEG
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 1
33732: NEG
33733: PUSH
33734: LD_INT 1
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33752: LD_ADDR_VAR 0 38
33756: PUSH
33757: LD_INT 0
33759: PUSH
33760: LD_INT 0
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 0
33769: PUSH
33770: LD_INT 1
33772: NEG
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 1
33780: PUSH
33781: LD_INT 0
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 1
33790: PUSH
33791: LD_INT 1
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 0
33800: PUSH
33801: LD_INT 1
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 1
33810: NEG
33811: PUSH
33812: LD_INT 0
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 1
33821: NEG
33822: PUSH
33823: LD_INT 1
33825: NEG
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 2
33833: PUSH
33834: LD_INT 1
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 2
33843: NEG
33844: PUSH
33845: LD_INT 1
33847: NEG
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33864: LD_ADDR_VAR 0 39
33868: PUSH
33869: LD_INT 0
33871: PUSH
33872: LD_INT 0
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 0
33881: PUSH
33882: LD_INT 1
33884: NEG
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 1
33892: PUSH
33893: LD_INT 0
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 1
33902: PUSH
33903: LD_INT 1
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 0
33912: PUSH
33913: LD_INT 1
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 1
33922: NEG
33923: PUSH
33924: LD_INT 0
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 1
33933: NEG
33934: PUSH
33935: LD_INT 1
33937: NEG
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 1
33945: NEG
33946: PUSH
33947: LD_INT 2
33949: NEG
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 1
33957: PUSH
33958: LD_INT 2
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33976: LD_ADDR_VAR 0 40
33980: PUSH
33981: LD_INT 0
33983: PUSH
33984: LD_INT 0
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 0
33993: PUSH
33994: LD_INT 1
33996: NEG
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 1
34004: PUSH
34005: LD_INT 0
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 1
34014: PUSH
34015: LD_INT 1
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 0
34024: PUSH
34025: LD_INT 1
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 1
34034: NEG
34035: PUSH
34036: LD_INT 0
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 1
34045: NEG
34046: PUSH
34047: LD_INT 1
34049: NEG
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 1
34057: PUSH
34058: LD_INT 1
34060: NEG
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 1
34068: NEG
34069: PUSH
34070: LD_INT 1
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34088: LD_ADDR_VAR 0 41
34092: PUSH
34093: LD_INT 0
34095: PUSH
34096: LD_INT 0
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 0
34105: PUSH
34106: LD_INT 1
34108: NEG
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 1
34116: PUSH
34117: LD_INT 0
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 1
34126: PUSH
34127: LD_INT 1
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 0
34136: PUSH
34137: LD_INT 1
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 1
34146: NEG
34147: PUSH
34148: LD_INT 0
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 1
34157: NEG
34158: PUSH
34159: LD_INT 1
34161: NEG
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 1
34169: NEG
34170: PUSH
34171: LD_INT 2
34173: NEG
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 1
34181: PUSH
34182: LD_INT 1
34184: NEG
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 2
34192: PUSH
34193: LD_INT 0
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 2
34202: PUSH
34203: LD_INT 1
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 2
34212: PUSH
34213: LD_INT 2
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 1
34222: PUSH
34223: LD_INT 2
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 1
34232: NEG
34233: PUSH
34234: LD_INT 1
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 2
34243: NEG
34244: PUSH
34245: LD_INT 0
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 2
34254: NEG
34255: PUSH
34256: LD_INT 1
34258: NEG
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 2
34266: NEG
34267: PUSH
34268: LD_INT 2
34270: NEG
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 2
34278: NEG
34279: PUSH
34280: LD_INT 3
34282: NEG
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 2
34290: PUSH
34291: LD_INT 1
34293: NEG
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 3
34301: PUSH
34302: LD_INT 0
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 3
34311: PUSH
34312: LD_INT 1
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 3
34321: PUSH
34322: LD_INT 2
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 3
34331: PUSH
34332: LD_INT 3
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 2
34341: PUSH
34342: LD_INT 3
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 2
34351: NEG
34352: PUSH
34353: LD_INT 1
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 3
34362: NEG
34363: PUSH
34364: LD_INT 0
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 3
34373: NEG
34374: PUSH
34375: LD_INT 1
34377: NEG
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 3
34385: NEG
34386: PUSH
34387: LD_INT 2
34389: NEG
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 3
34397: NEG
34398: PUSH
34399: LD_INT 3
34401: NEG
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34438: LD_ADDR_VAR 0 42
34442: PUSH
34443: LD_INT 0
34445: PUSH
34446: LD_INT 0
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 0
34455: PUSH
34456: LD_INT 1
34458: NEG
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 1
34466: PUSH
34467: LD_INT 0
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 1
34476: PUSH
34477: LD_INT 1
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 0
34486: PUSH
34487: LD_INT 1
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 1
34496: NEG
34497: PUSH
34498: LD_INT 0
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 1
34507: NEG
34508: PUSH
34509: LD_INT 1
34511: NEG
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 1
34519: NEG
34520: PUSH
34521: LD_INT 2
34523: NEG
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 0
34531: PUSH
34532: LD_INT 2
34534: NEG
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 1
34542: PUSH
34543: LD_INT 1
34545: NEG
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 2
34553: PUSH
34554: LD_INT 1
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 2
34563: PUSH
34564: LD_INT 2
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 1
34573: PUSH
34574: LD_INT 2
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 0
34583: PUSH
34584: LD_INT 2
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 1
34593: NEG
34594: PUSH
34595: LD_INT 1
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 2
34604: NEG
34605: PUSH
34606: LD_INT 1
34608: NEG
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 2
34616: NEG
34617: PUSH
34618: LD_INT 2
34620: NEG
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 2
34628: NEG
34629: PUSH
34630: LD_INT 3
34632: NEG
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 1
34640: NEG
34641: PUSH
34642: LD_INT 3
34644: NEG
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 0
34652: PUSH
34653: LD_INT 3
34655: NEG
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 1
34663: PUSH
34664: LD_INT 2
34666: NEG
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 3
34674: PUSH
34675: LD_INT 2
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 3
34684: PUSH
34685: LD_INT 3
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 2
34694: PUSH
34695: LD_INT 3
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 1
34704: PUSH
34705: LD_INT 3
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 0
34714: PUSH
34715: LD_INT 3
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 1
34724: NEG
34725: PUSH
34726: LD_INT 2
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 3
34735: NEG
34736: PUSH
34737: LD_INT 2
34739: NEG
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 3
34747: NEG
34748: PUSH
34749: LD_INT 3
34751: NEG
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34788: LD_ADDR_VAR 0 43
34792: PUSH
34793: LD_INT 0
34795: PUSH
34796: LD_INT 0
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 0
34805: PUSH
34806: LD_INT 1
34808: NEG
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 1
34816: PUSH
34817: LD_INT 0
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 1
34826: PUSH
34827: LD_INT 1
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 0
34836: PUSH
34837: LD_INT 1
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 1
34846: NEG
34847: PUSH
34848: LD_INT 0
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 1
34857: NEG
34858: PUSH
34859: LD_INT 1
34861: NEG
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 1
34869: NEG
34870: PUSH
34871: LD_INT 2
34873: NEG
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: LD_INT 2
34884: NEG
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 1
34892: PUSH
34893: LD_INT 1
34895: NEG
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 2
34903: PUSH
34904: LD_INT 0
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 2
34913: PUSH
34914: LD_INT 1
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 1
34923: PUSH
34924: LD_INT 2
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 0
34933: PUSH
34934: LD_INT 2
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 1
34943: NEG
34944: PUSH
34945: LD_INT 1
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 2
34954: NEG
34955: PUSH
34956: LD_INT 0
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 2
34965: NEG
34966: PUSH
34967: LD_INT 1
34969: NEG
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 1
34977: NEG
34978: PUSH
34979: LD_INT 3
34981: NEG
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 0
34989: PUSH
34990: LD_INT 3
34992: NEG
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 1
35000: PUSH
35001: LD_INT 2
35003: NEG
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 2
35011: PUSH
35012: LD_INT 1
35014: NEG
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 3
35022: PUSH
35023: LD_INT 0
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 3
35032: PUSH
35033: LD_INT 1
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 1
35042: PUSH
35043: LD_INT 3
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 0
35052: PUSH
35053: LD_INT 3
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 1
35062: NEG
35063: PUSH
35064: LD_INT 2
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 2
35073: NEG
35074: PUSH
35075: LD_INT 1
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 3
35084: NEG
35085: PUSH
35086: LD_INT 0
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 3
35095: NEG
35096: PUSH
35097: LD_INT 1
35099: NEG
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35136: LD_ADDR_VAR 0 44
35140: PUSH
35141: LD_INT 0
35143: PUSH
35144: LD_INT 0
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 0
35153: PUSH
35154: LD_INT 1
35156: NEG
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 1
35164: PUSH
35165: LD_INT 0
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 1
35174: PUSH
35175: LD_INT 1
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 0
35184: PUSH
35185: LD_INT 1
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 1
35194: NEG
35195: PUSH
35196: LD_INT 0
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 1
35205: NEG
35206: PUSH
35207: LD_INT 1
35209: NEG
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 1
35217: NEG
35218: PUSH
35219: LD_INT 2
35221: NEG
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 1
35229: PUSH
35230: LD_INT 1
35232: NEG
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 2
35240: PUSH
35241: LD_INT 0
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 2
35250: PUSH
35251: LD_INT 1
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 2
35260: PUSH
35261: LD_INT 2
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 1
35270: PUSH
35271: LD_INT 2
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 1
35280: NEG
35281: PUSH
35282: LD_INT 1
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 2
35291: NEG
35292: PUSH
35293: LD_INT 0
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 2
35302: NEG
35303: PUSH
35304: LD_INT 1
35306: NEG
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 2
35314: NEG
35315: PUSH
35316: LD_INT 2
35318: NEG
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 2
35326: NEG
35327: PUSH
35328: LD_INT 3
35330: NEG
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 2
35338: PUSH
35339: LD_INT 1
35341: NEG
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 3
35349: PUSH
35350: LD_INT 0
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 3
35359: PUSH
35360: LD_INT 1
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 3
35369: PUSH
35370: LD_INT 2
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 3
35379: PUSH
35380: LD_INT 3
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 2
35389: PUSH
35390: LD_INT 3
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 2
35399: NEG
35400: PUSH
35401: LD_INT 1
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 3
35410: NEG
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 3
35421: NEG
35422: PUSH
35423: LD_INT 1
35425: NEG
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 3
35433: NEG
35434: PUSH
35435: LD_INT 2
35437: NEG
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 3
35445: NEG
35446: PUSH
35447: LD_INT 3
35449: NEG
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35486: LD_ADDR_VAR 0 45
35490: PUSH
35491: LD_INT 0
35493: PUSH
35494: LD_INT 0
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 0
35503: PUSH
35504: LD_INT 1
35506: NEG
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 1
35514: PUSH
35515: LD_INT 0
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 1
35524: PUSH
35525: LD_INT 1
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 0
35534: PUSH
35535: LD_INT 1
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 1
35544: NEG
35545: PUSH
35546: LD_INT 0
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: NEG
35556: PUSH
35557: LD_INT 1
35559: NEG
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 1
35567: NEG
35568: PUSH
35569: LD_INT 2
35571: NEG
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 0
35579: PUSH
35580: LD_INT 2
35582: NEG
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 1
35590: PUSH
35591: LD_INT 1
35593: NEG
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 2
35601: PUSH
35602: LD_INT 1
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 2
35611: PUSH
35612: LD_INT 2
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 1
35621: PUSH
35622: LD_INT 2
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 0
35631: PUSH
35632: LD_INT 2
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 1
35641: NEG
35642: PUSH
35643: LD_INT 1
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 2
35652: NEG
35653: PUSH
35654: LD_INT 1
35656: NEG
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 2
35664: NEG
35665: PUSH
35666: LD_INT 2
35668: NEG
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 2
35676: NEG
35677: PUSH
35678: LD_INT 3
35680: NEG
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 1
35688: NEG
35689: PUSH
35690: LD_INT 3
35692: NEG
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 0
35700: PUSH
35701: LD_INT 3
35703: NEG
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 1
35711: PUSH
35712: LD_INT 2
35714: NEG
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 3
35722: PUSH
35723: LD_INT 2
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 3
35732: PUSH
35733: LD_INT 3
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 2
35742: PUSH
35743: LD_INT 3
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 1
35752: PUSH
35753: LD_INT 3
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 0
35762: PUSH
35763: LD_INT 3
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 1
35772: NEG
35773: PUSH
35774: LD_INT 2
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 3
35783: NEG
35784: PUSH
35785: LD_INT 2
35787: NEG
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 3
35795: NEG
35796: PUSH
35797: LD_INT 3
35799: NEG
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35836: LD_ADDR_VAR 0 46
35840: PUSH
35841: LD_INT 0
35843: PUSH
35844: LD_INT 0
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 0
35853: PUSH
35854: LD_INT 1
35856: NEG
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 1
35864: PUSH
35865: LD_INT 0
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 1
35874: PUSH
35875: LD_INT 1
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 0
35884: PUSH
35885: LD_INT 1
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 1
35894: NEG
35895: PUSH
35896: LD_INT 0
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 1
35905: NEG
35906: PUSH
35907: LD_INT 1
35909: NEG
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 1
35917: NEG
35918: PUSH
35919: LD_INT 2
35921: NEG
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: LD_INT 2
35932: NEG
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 2
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 2
35961: PUSH
35962: LD_INT 1
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 1
35971: PUSH
35972: LD_INT 2
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 0
35981: PUSH
35982: LD_INT 2
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 1
35991: NEG
35992: PUSH
35993: LD_INT 1
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 2
36002: NEG
36003: PUSH
36004: LD_INT 0
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 2
36013: NEG
36014: PUSH
36015: LD_INT 1
36017: NEG
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 1
36025: NEG
36026: PUSH
36027: LD_INT 3
36029: NEG
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 0
36037: PUSH
36038: LD_INT 3
36040: NEG
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 1
36048: PUSH
36049: LD_INT 2
36051: NEG
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 2
36059: PUSH
36060: LD_INT 1
36062: NEG
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 3
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 3
36080: PUSH
36081: LD_INT 1
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 1
36090: PUSH
36091: LD_INT 3
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 0
36100: PUSH
36101: LD_INT 3
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 1
36110: NEG
36111: PUSH
36112: LD_INT 2
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 2
36121: NEG
36122: PUSH
36123: LD_INT 1
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 3
36132: NEG
36133: PUSH
36134: LD_INT 0
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 3
36143: NEG
36144: PUSH
36145: LD_INT 1
36147: NEG
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36184: LD_ADDR_VAR 0 47
36188: PUSH
36189: LD_INT 0
36191: PUSH
36192: LD_INT 0
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 0
36201: PUSH
36202: LD_INT 1
36204: NEG
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 1
36212: PUSH
36213: LD_INT 0
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 1
36222: PUSH
36223: LD_INT 1
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 0
36232: PUSH
36233: LD_INT 1
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 1
36242: NEG
36243: PUSH
36244: LD_INT 0
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 1
36253: NEG
36254: PUSH
36255: LD_INT 1
36257: NEG
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 1
36265: NEG
36266: PUSH
36267: LD_INT 2
36269: NEG
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 0
36277: PUSH
36278: LD_INT 2
36280: NEG
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 1
36288: PUSH
36289: LD_INT 1
36291: NEG
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 2
36299: NEG
36300: PUSH
36301: LD_INT 1
36303: NEG
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 2
36311: NEG
36312: PUSH
36313: LD_INT 2
36315: NEG
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36335: LD_ADDR_VAR 0 48
36339: PUSH
36340: LD_INT 0
36342: PUSH
36343: LD_INT 0
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: LD_INT 1
36355: NEG
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 1
36363: PUSH
36364: LD_INT 0
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 1
36373: PUSH
36374: LD_INT 1
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 0
36383: PUSH
36384: LD_INT 1
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 1
36393: NEG
36394: PUSH
36395: LD_INT 0
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 1
36404: NEG
36405: PUSH
36406: LD_INT 1
36408: NEG
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 1
36416: NEG
36417: PUSH
36418: LD_INT 2
36420: NEG
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: LD_INT 2
36431: NEG
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 1
36439: PUSH
36440: LD_INT 1
36442: NEG
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 2
36450: PUSH
36451: LD_INT 0
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 2
36460: PUSH
36461: LD_INT 1
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36482: LD_ADDR_VAR 0 49
36486: PUSH
36487: LD_INT 0
36489: PUSH
36490: LD_INT 0
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 0
36499: PUSH
36500: LD_INT 1
36502: NEG
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 1
36510: PUSH
36511: LD_INT 0
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 1
36520: PUSH
36521: LD_INT 1
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 0
36530: PUSH
36531: LD_INT 1
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 1
36540: NEG
36541: PUSH
36542: LD_INT 0
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 1
36551: NEG
36552: PUSH
36553: LD_INT 1
36555: NEG
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 1
36563: PUSH
36564: LD_INT 1
36566: NEG
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 2
36574: PUSH
36575: LD_INT 0
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 2
36584: PUSH
36585: LD_INT 1
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 2
36594: PUSH
36595: LD_INT 2
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 1
36604: PUSH
36605: LD_INT 2
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36626: LD_ADDR_VAR 0 50
36630: PUSH
36631: LD_INT 0
36633: PUSH
36634: LD_INT 0
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 0
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 1
36654: PUSH
36655: LD_INT 0
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 1
36664: PUSH
36665: LD_INT 1
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 0
36674: PUSH
36675: LD_INT 1
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 1
36684: NEG
36685: PUSH
36686: LD_INT 0
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 1
36695: NEG
36696: PUSH
36697: LD_INT 1
36699: NEG
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 2
36707: PUSH
36708: LD_INT 1
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 2
36717: PUSH
36718: LD_INT 2
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 1
36727: PUSH
36728: LD_INT 2
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 0
36737: PUSH
36738: LD_INT 2
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 1
36747: NEG
36748: PUSH
36749: LD_INT 1
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36770: LD_ADDR_VAR 0 51
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: LD_INT 0
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 0
36787: PUSH
36788: LD_INT 1
36790: NEG
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 1
36798: PUSH
36799: LD_INT 0
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 1
36808: PUSH
36809: LD_INT 1
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 0
36818: PUSH
36819: LD_INT 1
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 1
36828: NEG
36829: PUSH
36830: LD_INT 0
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 1
36839: NEG
36840: PUSH
36841: LD_INT 1
36843: NEG
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 1
36851: PUSH
36852: LD_INT 2
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 0
36861: PUSH
36862: LD_INT 2
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 1
36871: NEG
36872: PUSH
36873: LD_INT 1
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 2
36882: NEG
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 2
36893: NEG
36894: PUSH
36895: LD_INT 1
36897: NEG
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36917: LD_ADDR_VAR 0 52
36921: PUSH
36922: LD_INT 0
36924: PUSH
36925: LD_INT 0
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 0
36934: PUSH
36935: LD_INT 1
36937: NEG
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 1
36945: PUSH
36946: LD_INT 0
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 1
36955: PUSH
36956: LD_INT 1
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 0
36965: PUSH
36966: LD_INT 1
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 1
36975: NEG
36976: PUSH
36977: LD_INT 0
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 1
36986: NEG
36987: PUSH
36988: LD_INT 1
36990: NEG
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 1
36998: NEG
36999: PUSH
37000: LD_INT 2
37002: NEG
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 1
37010: NEG
37011: PUSH
37012: LD_INT 1
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 2
37021: NEG
37022: PUSH
37023: LD_INT 0
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 2
37032: NEG
37033: PUSH
37034: LD_INT 1
37036: NEG
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 2
37044: NEG
37045: PUSH
37046: LD_INT 2
37048: NEG
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37068: LD_ADDR_VAR 0 53
37072: PUSH
37073: LD_INT 0
37075: PUSH
37076: LD_INT 0
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 0
37085: PUSH
37086: LD_INT 1
37088: NEG
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 1
37096: PUSH
37097: LD_INT 0
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 1
37106: PUSH
37107: LD_INT 1
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 0
37116: PUSH
37117: LD_INT 1
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 1
37126: NEG
37127: PUSH
37128: LD_INT 0
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: LD_INT 1
37137: NEG
37138: PUSH
37139: LD_INT 1
37141: NEG
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 1
37149: NEG
37150: PUSH
37151: LD_INT 2
37153: NEG
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: LD_INT 2
37164: NEG
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 1
37172: PUSH
37173: LD_INT 1
37175: NEG
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 2
37183: PUSH
37184: LD_INT 0
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 2
37193: PUSH
37194: LD_INT 1
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 2
37203: PUSH
37204: LD_INT 2
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 1
37213: PUSH
37214: LD_INT 2
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: LD_INT 2
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 1
37233: NEG
37234: PUSH
37235: LD_INT 1
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 2
37244: NEG
37245: PUSH
37246: LD_INT 0
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 2
37255: NEG
37256: PUSH
37257: LD_INT 1
37259: NEG
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 2
37267: NEG
37268: PUSH
37269: LD_INT 2
37271: NEG
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37298: LD_ADDR_VAR 0 54
37302: PUSH
37303: LD_INT 0
37305: PUSH
37306: LD_INT 0
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 0
37315: PUSH
37316: LD_INT 1
37318: NEG
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 1
37326: PUSH
37327: LD_INT 0
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 1
37336: PUSH
37337: LD_INT 1
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 0
37346: PUSH
37347: LD_INT 1
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 1
37356: NEG
37357: PUSH
37358: LD_INT 0
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 1
37367: NEG
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 1
37379: NEG
37380: PUSH
37381: LD_INT 2
37383: NEG
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 0
37391: PUSH
37392: LD_INT 2
37394: NEG
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 1
37402: PUSH
37403: LD_INT 1
37405: NEG
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 2
37413: PUSH
37414: LD_INT 0
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 2
37423: PUSH
37424: LD_INT 1
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 2
37433: PUSH
37434: LD_INT 2
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 1
37443: PUSH
37444: LD_INT 2
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 0
37453: PUSH
37454: LD_INT 2
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 1
37463: NEG
37464: PUSH
37465: LD_INT 1
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 2
37474: NEG
37475: PUSH
37476: LD_INT 0
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 2
37485: NEG
37486: PUSH
37487: LD_INT 1
37489: NEG
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 2
37497: NEG
37498: PUSH
37499: LD_INT 2
37501: NEG
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37528: LD_ADDR_VAR 0 55
37532: PUSH
37533: LD_INT 0
37535: PUSH
37536: LD_INT 0
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 0
37545: PUSH
37546: LD_INT 1
37548: NEG
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 1
37556: PUSH
37557: LD_INT 0
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 1
37566: PUSH
37567: LD_INT 1
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 0
37576: PUSH
37577: LD_INT 1
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 1
37586: NEG
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 1
37597: NEG
37598: PUSH
37599: LD_INT 1
37601: NEG
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 1
37609: NEG
37610: PUSH
37611: LD_INT 2
37613: NEG
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 0
37621: PUSH
37622: LD_INT 2
37624: NEG
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 1
37632: PUSH
37633: LD_INT 1
37635: NEG
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 2
37643: PUSH
37644: LD_INT 0
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 2
37653: PUSH
37654: LD_INT 1
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 2
37663: PUSH
37664: LD_INT 2
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 1
37673: PUSH
37674: LD_INT 2
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: LD_INT 2
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 1
37693: NEG
37694: PUSH
37695: LD_INT 1
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 2
37704: NEG
37705: PUSH
37706: LD_INT 0
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 2
37715: NEG
37716: PUSH
37717: LD_INT 1
37719: NEG
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 2
37727: NEG
37728: PUSH
37729: LD_INT 2
37731: NEG
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37758: LD_ADDR_VAR 0 56
37762: PUSH
37763: LD_INT 0
37765: PUSH
37766: LD_INT 0
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 0
37775: PUSH
37776: LD_INT 1
37778: NEG
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 1
37786: PUSH
37787: LD_INT 0
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 1
37796: PUSH
37797: LD_INT 1
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 0
37806: PUSH
37807: LD_INT 1
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 1
37816: NEG
37817: PUSH
37818: LD_INT 0
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 1
37827: NEG
37828: PUSH
37829: LD_INT 1
37831: NEG
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 1
37839: NEG
37840: PUSH
37841: LD_INT 2
37843: NEG
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 0
37851: PUSH
37852: LD_INT 2
37854: NEG
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: LD_INT 1
37865: NEG
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 2
37873: PUSH
37874: LD_INT 0
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 2
37883: PUSH
37884: LD_INT 1
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 2
37893: PUSH
37894: LD_INT 2
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 1
37903: PUSH
37904: LD_INT 2
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: LD_INT 2
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 1
37923: NEG
37924: PUSH
37925: LD_INT 1
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 2
37934: NEG
37935: PUSH
37936: LD_INT 0
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 2
37945: NEG
37946: PUSH
37947: LD_INT 1
37949: NEG
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 2
37957: NEG
37958: PUSH
37959: LD_INT 2
37961: NEG
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37988: LD_ADDR_VAR 0 57
37992: PUSH
37993: LD_INT 0
37995: PUSH
37996: LD_INT 0
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 0
38005: PUSH
38006: LD_INT 1
38008: NEG
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 1
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 1
38026: PUSH
38027: LD_INT 1
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 0
38036: PUSH
38037: LD_INT 1
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 1
38046: NEG
38047: PUSH
38048: LD_INT 0
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 1
38057: NEG
38058: PUSH
38059: LD_INT 1
38061: NEG
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 1
38069: NEG
38070: PUSH
38071: LD_INT 2
38073: NEG
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 0
38081: PUSH
38082: LD_INT 2
38084: NEG
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 1
38092: PUSH
38093: LD_INT 1
38095: NEG
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 2
38103: PUSH
38104: LD_INT 0
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 2
38113: PUSH
38114: LD_INT 1
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 2
38123: PUSH
38124: LD_INT 2
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 1
38133: PUSH
38134: LD_INT 2
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 0
38143: PUSH
38144: LD_INT 2
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 1
38153: NEG
38154: PUSH
38155: LD_INT 1
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 2
38164: NEG
38165: PUSH
38166: LD_INT 0
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 2
38175: NEG
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 2
38187: NEG
38188: PUSH
38189: LD_INT 2
38191: NEG
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38218: LD_ADDR_VAR 0 58
38222: PUSH
38223: LD_INT 0
38225: PUSH
38226: LD_INT 0
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 0
38235: PUSH
38236: LD_INT 1
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 1
38246: PUSH
38247: LD_INT 0
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 1
38256: PUSH
38257: LD_INT 1
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 0
38266: PUSH
38267: LD_INT 1
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 1
38276: NEG
38277: PUSH
38278: LD_INT 0
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 1
38287: NEG
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 1
38299: NEG
38300: PUSH
38301: LD_INT 2
38303: NEG
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 0
38311: PUSH
38312: LD_INT 2
38314: NEG
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: LD_INT 1
38325: NEG
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 2
38333: PUSH
38334: LD_INT 0
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 2
38343: PUSH
38344: LD_INT 1
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 2
38353: PUSH
38354: LD_INT 2
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 1
38363: PUSH
38364: LD_INT 2
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 0
38373: PUSH
38374: LD_INT 2
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 1
38383: NEG
38384: PUSH
38385: LD_INT 1
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 2
38394: NEG
38395: PUSH
38396: LD_INT 0
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 2
38405: NEG
38406: PUSH
38407: LD_INT 1
38409: NEG
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 2
38417: NEG
38418: PUSH
38419: LD_INT 2
38421: NEG
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38448: LD_ADDR_VAR 0 59
38452: PUSH
38453: LD_INT 0
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 0
38465: PUSH
38466: LD_INT 1
38468: NEG
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 1
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 1
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 0
38496: PUSH
38497: LD_INT 1
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 1
38506: NEG
38507: PUSH
38508: LD_INT 0
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 1
38517: NEG
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38536: LD_ADDR_VAR 0 60
38540: PUSH
38541: LD_INT 0
38543: PUSH
38544: LD_INT 0
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 0
38553: PUSH
38554: LD_INT 1
38556: NEG
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 1
38564: PUSH
38565: LD_INT 0
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 1
38574: PUSH
38575: LD_INT 1
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 0
38584: PUSH
38585: LD_INT 1
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 1
38594: NEG
38595: PUSH
38596: LD_INT 0
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 1
38605: NEG
38606: PUSH
38607: LD_INT 1
38609: NEG
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38624: LD_ADDR_VAR 0 61
38628: PUSH
38629: LD_INT 0
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 0
38641: PUSH
38642: LD_INT 1
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 1
38652: PUSH
38653: LD_INT 0
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 1
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 0
38672: PUSH
38673: LD_INT 1
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 1
38682: NEG
38683: PUSH
38684: LD_INT 0
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 1
38693: NEG
38694: PUSH
38695: LD_INT 1
38697: NEG
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38712: LD_ADDR_VAR 0 62
38716: PUSH
38717: LD_INT 0
38719: PUSH
38720: LD_INT 0
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 0
38729: PUSH
38730: LD_INT 1
38732: NEG
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 1
38740: PUSH
38741: LD_INT 0
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 1
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 0
38760: PUSH
38761: LD_INT 1
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 1
38770: NEG
38771: PUSH
38772: LD_INT 0
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 1
38781: NEG
38782: PUSH
38783: LD_INT 1
38785: NEG
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38800: LD_ADDR_VAR 0 63
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: LD_INT 0
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 0
38817: PUSH
38818: LD_INT 1
38820: NEG
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: PUSH
38839: LD_INT 1
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 0
38848: PUSH
38849: LD_INT 1
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 1
38858: NEG
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 1
38869: NEG
38870: PUSH
38871: LD_INT 1
38873: NEG
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38888: LD_ADDR_VAR 0 64
38892: PUSH
38893: LD_INT 0
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 0
38905: PUSH
38906: LD_INT 1
38908: NEG
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 1
38916: PUSH
38917: LD_INT 0
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 1
38926: PUSH
38927: LD_INT 1
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 0
38936: PUSH
38937: LD_INT 1
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 1
38946: NEG
38947: PUSH
38948: LD_INT 0
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 1
38957: NEG
38958: PUSH
38959: LD_INT 1
38961: NEG
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: ST_TO_ADDR
// end ; 1 :
38976: GO 44873
38978: LD_INT 1
38980: DOUBLE
38981: EQUAL
38982: IFTRUE 38986
38984: GO 41609
38986: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38987: LD_ADDR_VAR 0 11
38991: PUSH
38992: LD_INT 1
38994: NEG
38995: PUSH
38996: LD_INT 3
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 0
39006: PUSH
39007: LD_INT 3
39009: NEG
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 1
39017: PUSH
39018: LD_INT 2
39020: NEG
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39031: LD_ADDR_VAR 0 12
39035: PUSH
39036: LD_INT 2
39038: PUSH
39039: LD_INT 1
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 3
39049: PUSH
39050: LD_INT 0
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 3
39059: PUSH
39060: LD_INT 1
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: LIST
39071: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39072: LD_ADDR_VAR 0 13
39076: PUSH
39077: LD_INT 3
39079: PUSH
39080: LD_INT 2
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 3
39089: PUSH
39090: LD_INT 3
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 2
39099: PUSH
39100: LD_INT 3
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: LIST
39111: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39112: LD_ADDR_VAR 0 14
39116: PUSH
39117: LD_INT 1
39119: PUSH
39120: LD_INT 3
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 0
39129: PUSH
39130: LD_INT 3
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 1
39139: NEG
39140: PUSH
39141: LD_INT 2
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: LIST
39152: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39153: LD_ADDR_VAR 0 15
39157: PUSH
39158: LD_INT 2
39160: NEG
39161: PUSH
39162: LD_INT 1
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 3
39171: NEG
39172: PUSH
39173: LD_INT 0
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 3
39182: NEG
39183: PUSH
39184: LD_INT 1
39186: NEG
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: LIST
39196: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39197: LD_ADDR_VAR 0 16
39201: PUSH
39202: LD_INT 2
39204: NEG
39205: PUSH
39206: LD_INT 3
39208: NEG
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 3
39216: NEG
39217: PUSH
39218: LD_INT 2
39220: NEG
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 3
39228: NEG
39229: PUSH
39230: LD_INT 3
39232: NEG
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: LIST
39242: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39243: LD_ADDR_VAR 0 17
39247: PUSH
39248: LD_INT 1
39250: NEG
39251: PUSH
39252: LD_INT 3
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: LD_INT 3
39265: NEG
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 1
39273: PUSH
39274: LD_INT 2
39276: NEG
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: LIST
39286: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39287: LD_ADDR_VAR 0 18
39291: PUSH
39292: LD_INT 2
39294: PUSH
39295: LD_INT 1
39297: NEG
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 3
39305: PUSH
39306: LD_INT 0
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 3
39315: PUSH
39316: LD_INT 1
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: LIST
39327: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39328: LD_ADDR_VAR 0 19
39332: PUSH
39333: LD_INT 3
39335: PUSH
39336: LD_INT 2
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 3
39345: PUSH
39346: LD_INT 3
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 2
39355: PUSH
39356: LD_INT 3
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: LIST
39367: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39368: LD_ADDR_VAR 0 20
39372: PUSH
39373: LD_INT 1
39375: PUSH
39376: LD_INT 3
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 0
39385: PUSH
39386: LD_INT 3
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 1
39395: NEG
39396: PUSH
39397: LD_INT 2
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: LIST
39408: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39409: LD_ADDR_VAR 0 21
39413: PUSH
39414: LD_INT 2
39416: NEG
39417: PUSH
39418: LD_INT 1
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 3
39427: NEG
39428: PUSH
39429: LD_INT 0
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 3
39438: NEG
39439: PUSH
39440: LD_INT 1
39442: NEG
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: LIST
39452: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39453: LD_ADDR_VAR 0 22
39457: PUSH
39458: LD_INT 2
39460: NEG
39461: PUSH
39462: LD_INT 3
39464: NEG
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 3
39472: NEG
39473: PUSH
39474: LD_INT 2
39476: NEG
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 3
39484: NEG
39485: PUSH
39486: LD_INT 3
39488: NEG
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: LIST
39498: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
39499: LD_ADDR_VAR 0 23
39503: PUSH
39504: LD_INT 0
39506: PUSH
39507: LD_INT 3
39509: NEG
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 1
39517: NEG
39518: PUSH
39519: LD_INT 4
39521: NEG
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 1
39529: PUSH
39530: LD_INT 3
39532: NEG
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: LIST
39542: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
39543: LD_ADDR_VAR 0 24
39547: PUSH
39548: LD_INT 3
39550: PUSH
39551: LD_INT 0
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 3
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 4
39571: PUSH
39572: LD_INT 1
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: LIST
39583: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
39584: LD_ADDR_VAR 0 25
39588: PUSH
39589: LD_INT 3
39591: PUSH
39592: LD_INT 3
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 4
39601: PUSH
39602: LD_INT 3
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 3
39611: PUSH
39612: LD_INT 4
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: LIST
39623: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
39624: LD_ADDR_VAR 0 26
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: LD_INT 3
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 1
39641: PUSH
39642: LD_INT 4
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 1
39651: NEG
39652: PUSH
39653: LD_INT 3
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: LIST
39664: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
39665: LD_ADDR_VAR 0 27
39669: PUSH
39670: LD_INT 3
39672: NEG
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 3
39683: NEG
39684: PUSH
39685: LD_INT 1
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 4
39694: NEG
39695: PUSH
39696: LD_INT 1
39698: NEG
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: LIST
39708: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
39709: LD_ADDR_VAR 0 28
39713: PUSH
39714: LD_INT 3
39716: NEG
39717: PUSH
39718: LD_INT 3
39720: NEG
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 3
39728: NEG
39729: PUSH
39730: LD_INT 4
39732: NEG
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 4
39740: NEG
39741: PUSH
39742: LD_INT 3
39744: NEG
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: LIST
39754: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
39755: LD_ADDR_VAR 0 29
39759: PUSH
39760: LD_INT 1
39762: NEG
39763: PUSH
39764: LD_INT 3
39766: NEG
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 0
39774: PUSH
39775: LD_INT 3
39777: NEG
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 1
39785: PUSH
39786: LD_INT 2
39788: NEG
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 1
39796: NEG
39797: PUSH
39798: LD_INT 4
39800: NEG
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: LD_INT 4
39811: NEG
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 1
39819: PUSH
39820: LD_INT 3
39822: NEG
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: LD_INT 5
39834: NEG
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 0
39842: PUSH
39843: LD_INT 5
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 1
39853: PUSH
39854: LD_INT 4
39856: NEG
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: LD_INT 6
39868: NEG
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: LD_INT 6
39879: NEG
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: PUSH
39888: LD_INT 5
39890: NEG
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
39910: LD_ADDR_VAR 0 30
39914: PUSH
39915: LD_INT 2
39917: PUSH
39918: LD_INT 1
39920: NEG
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 3
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 3
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 3
39948: PUSH
39949: LD_INT 1
39951: NEG
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 4
39959: PUSH
39960: LD_INT 0
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 4
39969: PUSH
39970: LD_INT 1
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 4
39979: PUSH
39980: LD_INT 1
39982: NEG
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 5
39990: PUSH
39991: LD_INT 0
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 5
40000: PUSH
40001: LD_INT 1
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 5
40010: PUSH
40011: LD_INT 1
40013: NEG
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 6
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 6
40031: PUSH
40032: LD_INT 1
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
40053: LD_ADDR_VAR 0 31
40057: PUSH
40058: LD_INT 3
40060: PUSH
40061: LD_INT 2
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 3
40070: PUSH
40071: LD_INT 3
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 2
40080: PUSH
40081: LD_INT 3
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 4
40090: PUSH
40091: LD_INT 3
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 4
40100: PUSH
40101: LD_INT 4
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 3
40110: PUSH
40111: LD_INT 4
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 5
40120: PUSH
40121: LD_INT 4
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 5
40130: PUSH
40131: LD_INT 5
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 4
40140: PUSH
40141: LD_INT 5
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 6
40150: PUSH
40151: LD_INT 5
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 6
40160: PUSH
40161: LD_INT 6
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 5
40170: PUSH
40171: LD_INT 6
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
40192: LD_ADDR_VAR 0 32
40196: PUSH
40197: LD_INT 1
40199: PUSH
40200: LD_INT 3
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 0
40209: PUSH
40210: LD_INT 3
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 1
40219: NEG
40220: PUSH
40221: LD_INT 2
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 1
40230: PUSH
40231: LD_INT 4
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 0
40240: PUSH
40241: LD_INT 4
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: LD_INT 3
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 1
40261: PUSH
40262: LD_INT 5
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 0
40271: PUSH
40272: LD_INT 5
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 1
40281: NEG
40282: PUSH
40283: LD_INT 4
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 1
40292: PUSH
40293: LD_INT 6
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 0
40302: PUSH
40303: LD_INT 6
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 1
40312: NEG
40313: PUSH
40314: LD_INT 5
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
40335: LD_ADDR_VAR 0 33
40339: PUSH
40340: LD_INT 2
40342: NEG
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 3
40353: NEG
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 3
40364: NEG
40365: PUSH
40366: LD_INT 1
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 3
40376: NEG
40377: PUSH
40378: LD_INT 1
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 4
40387: NEG
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 4
40398: NEG
40399: PUSH
40400: LD_INT 1
40402: NEG
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 4
40410: NEG
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 5
40421: NEG
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 5
40432: NEG
40433: PUSH
40434: LD_INT 1
40436: NEG
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 5
40444: NEG
40445: PUSH
40446: LD_INT 1
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 6
40455: NEG
40456: PUSH
40457: LD_INT 0
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 6
40466: NEG
40467: PUSH
40468: LD_INT 1
40470: NEG
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
40490: LD_ADDR_VAR 0 34
40494: PUSH
40495: LD_INT 2
40497: NEG
40498: PUSH
40499: LD_INT 3
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 3
40509: NEG
40510: PUSH
40511: LD_INT 2
40513: NEG
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 3
40521: NEG
40522: PUSH
40523: LD_INT 3
40525: NEG
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 3
40533: NEG
40534: PUSH
40535: LD_INT 4
40537: NEG
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 4
40545: NEG
40546: PUSH
40547: LD_INT 3
40549: NEG
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 4
40557: NEG
40558: PUSH
40559: LD_INT 4
40561: NEG
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 4
40569: NEG
40570: PUSH
40571: LD_INT 5
40573: NEG
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 5
40581: NEG
40582: PUSH
40583: LD_INT 4
40585: NEG
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 5
40593: NEG
40594: PUSH
40595: LD_INT 5
40597: NEG
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 5
40605: NEG
40606: PUSH
40607: LD_INT 6
40609: NEG
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 6
40617: NEG
40618: PUSH
40619: LD_INT 5
40621: NEG
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 6
40629: NEG
40630: PUSH
40631: LD_INT 6
40633: NEG
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
40653: LD_ADDR_VAR 0 41
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: LD_INT 2
40663: NEG
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 1
40671: NEG
40672: PUSH
40673: LD_INT 3
40675: NEG
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: LD_INT 2
40686: NEG
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: LIST
40696: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
40697: LD_ADDR_VAR 0 42
40701: PUSH
40702: LD_INT 2
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 2
40714: PUSH
40715: LD_INT 1
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 3
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: LIST
40737: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
40738: LD_ADDR_VAR 0 43
40742: PUSH
40743: LD_INT 2
40745: PUSH
40746: LD_INT 2
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 3
40755: PUSH
40756: LD_INT 2
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 2
40765: PUSH
40766: LD_INT 3
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: LIST
40777: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
40778: LD_ADDR_VAR 0 44
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: LD_INT 2
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: LD_INT 3
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 1
40805: NEG
40806: PUSH
40807: LD_INT 2
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: LIST
40818: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40819: LD_ADDR_VAR 0 45
40823: PUSH
40824: LD_INT 2
40826: NEG
40827: PUSH
40828: LD_INT 0
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 2
40837: NEG
40838: PUSH
40839: LD_INT 1
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 3
40848: NEG
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: LIST
40862: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
40863: LD_ADDR_VAR 0 46
40867: PUSH
40868: LD_INT 2
40870: NEG
40871: PUSH
40872: LD_INT 2
40874: NEG
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 2
40882: NEG
40883: PUSH
40884: LD_INT 3
40886: NEG
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 3
40894: NEG
40895: PUSH
40896: LD_INT 2
40898: NEG
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: LIST
40908: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
40909: LD_ADDR_VAR 0 47
40913: PUSH
40914: LD_INT 2
40916: NEG
40917: PUSH
40918: LD_INT 3
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 1
40928: NEG
40929: PUSH
40930: LD_INT 3
40932: NEG
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40942: LD_ADDR_VAR 0 48
40946: PUSH
40947: LD_INT 1
40949: PUSH
40950: LD_INT 2
40952: NEG
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 2
40960: PUSH
40961: LD_INT 1
40963: NEG
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
40973: LD_ADDR_VAR 0 49
40977: PUSH
40978: LD_INT 3
40980: PUSH
40981: LD_INT 1
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 3
40990: PUSH
40991: LD_INT 2
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
41002: LD_ADDR_VAR 0 50
41006: PUSH
41007: LD_INT 2
41009: PUSH
41010: LD_INT 3
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 1
41019: PUSH
41020: LD_INT 3
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41031: LD_ADDR_VAR 0 51
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: LD_INT 2
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 2
41049: NEG
41050: PUSH
41051: LD_INT 1
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41062: LD_ADDR_VAR 0 52
41066: PUSH
41067: LD_INT 3
41069: NEG
41070: PUSH
41071: LD_INT 1
41073: NEG
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 3
41081: NEG
41082: PUSH
41083: LD_INT 2
41085: NEG
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41095: LD_ADDR_VAR 0 53
41099: PUSH
41100: LD_INT 1
41102: NEG
41103: PUSH
41104: LD_INT 3
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 0
41114: PUSH
41115: LD_INT 3
41117: NEG
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 1
41125: PUSH
41126: LD_INT 2
41128: NEG
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: LIST
41138: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41139: LD_ADDR_VAR 0 54
41143: PUSH
41144: LD_INT 2
41146: PUSH
41147: LD_INT 1
41149: NEG
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 3
41157: PUSH
41158: LD_INT 0
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 3
41167: PUSH
41168: LD_INT 1
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: LIST
41179: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41180: LD_ADDR_VAR 0 55
41184: PUSH
41185: LD_INT 3
41187: PUSH
41188: LD_INT 2
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 3
41197: PUSH
41198: LD_INT 3
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 2
41207: PUSH
41208: LD_INT 3
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: LIST
41219: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41220: LD_ADDR_VAR 0 56
41224: PUSH
41225: LD_INT 1
41227: PUSH
41228: LD_INT 3
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: LD_INT 3
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: LD_INT 2
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: LIST
41260: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41261: LD_ADDR_VAR 0 57
41265: PUSH
41266: LD_INT 2
41268: NEG
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 3
41279: NEG
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 3
41290: NEG
41291: PUSH
41292: LD_INT 1
41294: NEG
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: LIST
41304: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41305: LD_ADDR_VAR 0 58
41309: PUSH
41310: LD_INT 2
41312: NEG
41313: PUSH
41314: LD_INT 3
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 3
41324: NEG
41325: PUSH
41326: LD_INT 2
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 3
41336: NEG
41337: PUSH
41338: LD_INT 3
41340: NEG
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: LIST
41350: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
41351: LD_ADDR_VAR 0 59
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: LD_INT 2
41362: NEG
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: LD_INT 2
41373: NEG
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 1
41381: PUSH
41382: LD_INT 1
41384: NEG
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: LIST
41394: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41395: LD_ADDR_VAR 0 60
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: LD_INT 1
41405: NEG
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 2
41413: PUSH
41414: LD_INT 0
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 2
41423: PUSH
41424: LD_INT 1
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: LIST
41435: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41436: LD_ADDR_VAR 0 61
41440: PUSH
41441: LD_INT 2
41443: PUSH
41444: LD_INT 1
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 2
41453: PUSH
41454: LD_INT 2
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: LD_INT 2
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: LIST
41475: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41476: LD_ADDR_VAR 0 62
41480: PUSH
41481: LD_INT 1
41483: PUSH
41484: LD_INT 2
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: LD_INT 2
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 1
41503: NEG
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: LIST
41516: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41517: LD_ADDR_VAR 0 63
41521: PUSH
41522: LD_INT 1
41524: NEG
41525: PUSH
41526: LD_INT 1
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 2
41535: NEG
41536: PUSH
41537: LD_INT 0
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 2
41546: NEG
41547: PUSH
41548: LD_INT 1
41550: NEG
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: LIST
41560: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41561: LD_ADDR_VAR 0 64
41565: PUSH
41566: LD_INT 1
41568: NEG
41569: PUSH
41570: LD_INT 2
41572: NEG
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 2
41580: NEG
41581: PUSH
41582: LD_INT 1
41584: NEG
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 2
41592: NEG
41593: PUSH
41594: LD_INT 2
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: LIST
41606: ST_TO_ADDR
// end ; 2 :
41607: GO 44873
41609: LD_INT 2
41611: DOUBLE
41612: EQUAL
41613: IFTRUE 41617
41615: GO 44872
41617: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
41618: LD_ADDR_VAR 0 29
41622: PUSH
41623: LD_INT 4
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 4
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 5
41646: PUSH
41647: LD_INT 0
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 5
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 4
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 3
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 3
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 3
41697: PUSH
41698: LD_INT 2
41700: NEG
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 5
41708: PUSH
41709: LD_INT 2
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 3
41718: PUSH
41719: LD_INT 3
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 3
41728: PUSH
41729: LD_INT 2
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 4
41738: PUSH
41739: LD_INT 3
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 4
41748: PUSH
41749: LD_INT 4
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 3
41758: PUSH
41759: LD_INT 4
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 2
41768: PUSH
41769: LD_INT 3
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 2
41778: PUSH
41779: LD_INT 2
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 4
41788: PUSH
41789: LD_INT 2
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 2
41798: PUSH
41799: LD_INT 4
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: LD_INT 4
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: LD_INT 3
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: PUSH
41829: LD_INT 4
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 1
41838: PUSH
41839: LD_INT 5
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: LD_INT 5
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: LD_INT 4
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 1
41869: NEG
41870: PUSH
41871: LD_INT 3
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 2
41880: PUSH
41881: LD_INT 5
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 2
41890: NEG
41891: PUSH
41892: LD_INT 3
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 3
41901: NEG
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 3
41912: NEG
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 2
41924: NEG
41925: PUSH
41926: LD_INT 0
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 2
41935: NEG
41936: PUSH
41937: LD_INT 1
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 3
41946: NEG
41947: PUSH
41948: LD_INT 1
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 4
41957: NEG
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 4
41968: NEG
41969: PUSH
41970: LD_INT 1
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 4
41980: NEG
41981: PUSH
41982: LD_INT 2
41984: NEG
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 2
41992: NEG
41993: PUSH
41994: LD_INT 2
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 4
42003: NEG
42004: PUSH
42005: LD_INT 4
42007: NEG
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 4
42015: NEG
42016: PUSH
42017: LD_INT 5
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 3
42027: NEG
42028: PUSH
42029: LD_INT 4
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 3
42039: NEG
42040: PUSH
42041: LD_INT 3
42043: NEG
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 4
42051: NEG
42052: PUSH
42053: LD_INT 3
42055: NEG
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 5
42063: NEG
42064: PUSH
42065: LD_INT 4
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 5
42075: NEG
42076: PUSH
42077: LD_INT 5
42079: NEG
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 3
42087: NEG
42088: PUSH
42089: LD_INT 5
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 5
42099: NEG
42100: PUSH
42101: LD_INT 3
42103: NEG
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
42156: LD_ADDR_VAR 0 30
42160: PUSH
42161: LD_INT 4
42163: PUSH
42164: LD_INT 4
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 4
42173: PUSH
42174: LD_INT 3
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 5
42183: PUSH
42184: LD_INT 4
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 5
42193: PUSH
42194: LD_INT 5
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 4
42203: PUSH
42204: LD_INT 5
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 3
42213: PUSH
42214: LD_INT 4
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 3
42223: PUSH
42224: LD_INT 3
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 5
42233: PUSH
42234: LD_INT 3
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 3
42243: PUSH
42244: LD_INT 5
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: LD_INT 3
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: LD_INT 2
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 1
42273: PUSH
42274: LD_INT 3
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 1
42283: PUSH
42284: LD_INT 4
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 0
42293: PUSH
42294: LD_INT 4
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 1
42303: NEG
42304: PUSH
42305: LD_INT 3
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 1
42314: NEG
42315: PUSH
42316: LD_INT 2
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 2
42325: PUSH
42326: LD_INT 4
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 2
42335: NEG
42336: PUSH
42337: LD_INT 2
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 4
42346: NEG
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 4
42357: NEG
42358: PUSH
42359: LD_INT 1
42361: NEG
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 3
42369: NEG
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 3
42380: NEG
42381: PUSH
42382: LD_INT 1
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 4
42391: NEG
42392: PUSH
42393: LD_INT 1
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 5
42402: NEG
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 5
42413: NEG
42414: PUSH
42415: LD_INT 1
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 5
42425: NEG
42426: PUSH
42427: LD_INT 2
42429: NEG
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 3
42437: NEG
42438: PUSH
42439: LD_INT 2
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 3
42448: NEG
42449: PUSH
42450: LD_INT 3
42452: NEG
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 3
42460: NEG
42461: PUSH
42462: LD_INT 4
42464: NEG
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 2
42472: NEG
42473: PUSH
42474: LD_INT 3
42476: NEG
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 2
42484: NEG
42485: PUSH
42486: LD_INT 2
42488: NEG
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 3
42496: NEG
42497: PUSH
42498: LD_INT 2
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 4
42508: NEG
42509: PUSH
42510: LD_INT 3
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 4
42520: NEG
42521: PUSH
42522: LD_INT 4
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 2
42532: NEG
42533: PUSH
42534: LD_INT 4
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 4
42544: NEG
42545: PUSH
42546: LD_INT 2
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: LD_INT 4
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 0
42567: PUSH
42568: LD_INT 5
42570: NEG
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 1
42578: PUSH
42579: LD_INT 4
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: LD_INT 3
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 0
42600: PUSH
42601: LD_INT 3
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: LD_INT 4
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: LD_INT 5
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 2
42635: PUSH
42636: LD_INT 3
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 2
42646: NEG
42647: PUSH
42648: LD_INT 5
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
42703: LD_ADDR_VAR 0 31
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: LD_INT 4
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: LD_INT 3
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 1
42730: PUSH
42731: LD_INT 4
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 1
42740: PUSH
42741: LD_INT 5
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: LD_INT 5
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 1
42760: NEG
42761: PUSH
42762: LD_INT 4
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: LD_INT 3
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 2
42782: PUSH
42783: LD_INT 5
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 2
42792: NEG
42793: PUSH
42794: LD_INT 3
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 3
42803: NEG
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 3
42814: NEG
42815: PUSH
42816: LD_INT 1
42818: NEG
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 2
42826: NEG
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 2
42837: NEG
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 3
42848: NEG
42849: PUSH
42850: LD_INT 1
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 4
42859: NEG
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 4
42870: NEG
42871: PUSH
42872: LD_INT 1
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 4
42882: NEG
42883: PUSH
42884: LD_INT 2
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 2
42894: NEG
42895: PUSH
42896: LD_INT 2
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 4
42905: NEG
42906: PUSH
42907: LD_INT 4
42909: NEG
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 4
42917: NEG
42918: PUSH
42919: LD_INT 5
42921: NEG
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 3
42929: NEG
42930: PUSH
42931: LD_INT 4
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 3
42941: NEG
42942: PUSH
42943: LD_INT 3
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 4
42953: NEG
42954: PUSH
42955: LD_INT 3
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 5
42965: NEG
42966: PUSH
42967: LD_INT 4
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 5
42977: NEG
42978: PUSH
42979: LD_INT 5
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 3
42989: NEG
42990: PUSH
42991: LD_INT 5
42993: NEG
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 5
43001: NEG
43002: PUSH
43003: LD_INT 3
43005: NEG
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: LD_INT 3
43016: NEG
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 0
43024: PUSH
43025: LD_INT 4
43027: NEG
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: LD_INT 3
43038: NEG
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 1
43046: PUSH
43047: LD_INT 2
43049: NEG
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: LD_INT 2
43060: NEG
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 1
43068: NEG
43069: PUSH
43070: LD_INT 3
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: LD_INT 4
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 2
43092: PUSH
43093: LD_INT 2
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 2
43103: NEG
43104: PUSH
43105: LD_INT 4
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 4
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 4
43125: PUSH
43126: LD_INT 1
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 5
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 5
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 4
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 3
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 3
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 3
43187: PUSH
43188: LD_INT 2
43190: NEG
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 5
43198: PUSH
43199: LD_INT 2
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
43253: LD_ADDR_VAR 0 32
43257: PUSH
43258: LD_INT 4
43260: NEG
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 4
43271: NEG
43272: PUSH
43273: LD_INT 1
43275: NEG
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 3
43283: NEG
43284: PUSH
43285: LD_INT 0
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 3
43294: NEG
43295: PUSH
43296: LD_INT 1
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 4
43305: NEG
43306: PUSH
43307: LD_INT 1
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 5
43316: NEG
43317: PUSH
43318: LD_INT 0
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 5
43327: NEG
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 5
43339: NEG
43340: PUSH
43341: LD_INT 2
43343: NEG
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 3
43351: NEG
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 3
43362: NEG
43363: PUSH
43364: LD_INT 3
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 3
43374: NEG
43375: PUSH
43376: LD_INT 4
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 2
43386: NEG
43387: PUSH
43388: LD_INT 3
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 2
43398: NEG
43399: PUSH
43400: LD_INT 2
43402: NEG
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 3
43410: NEG
43411: PUSH
43412: LD_INT 2
43414: NEG
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 4
43422: NEG
43423: PUSH
43424: LD_INT 3
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 4
43434: NEG
43435: PUSH
43436: LD_INT 4
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 2
43446: NEG
43447: PUSH
43448: LD_INT 4
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 4
43458: NEG
43459: PUSH
43460: LD_INT 2
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: LD_INT 4
43473: NEG
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 0
43481: PUSH
43482: LD_INT 5
43484: NEG
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 1
43492: PUSH
43493: LD_INT 4
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 1
43503: PUSH
43504: LD_INT 3
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 0
43514: PUSH
43515: LD_INT 3
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 1
43525: NEG
43526: PUSH
43527: LD_INT 4
43529: NEG
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 1
43537: NEG
43538: PUSH
43539: LD_INT 5
43541: NEG
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: LD_INT 3
43552: NEG
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 2
43560: NEG
43561: PUSH
43562: LD_INT 5
43564: NEG
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 3
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 3
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 4
43593: PUSH
43594: LD_INT 0
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 4
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 3
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 2
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 2
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 2
43644: PUSH
43645: LD_INT 2
43647: NEG
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 4
43655: PUSH
43656: LD_INT 2
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 4
43665: PUSH
43666: LD_INT 4
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 4
43675: PUSH
43676: LD_INT 3
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 5
43685: PUSH
43686: LD_INT 4
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 5
43695: PUSH
43696: LD_INT 5
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 4
43705: PUSH
43706: LD_INT 5
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 3
43715: PUSH
43716: LD_INT 4
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 3
43725: PUSH
43726: LD_INT 3
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 5
43735: PUSH
43736: LD_INT 3
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 3
43745: PUSH
43746: LD_INT 5
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
43800: LD_ADDR_VAR 0 33
43804: PUSH
43805: LD_INT 4
43807: NEG
43808: PUSH
43809: LD_INT 4
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 4
43819: NEG
43820: PUSH
43821: LD_INT 5
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 3
43831: NEG
43832: PUSH
43833: LD_INT 4
43835: NEG
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 3
43843: NEG
43844: PUSH
43845: LD_INT 3
43847: NEG
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 4
43855: NEG
43856: PUSH
43857: LD_INT 3
43859: NEG
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 5
43867: NEG
43868: PUSH
43869: LD_INT 4
43871: NEG
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 5
43879: NEG
43880: PUSH
43881: LD_INT 5
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 3
43891: NEG
43892: PUSH
43893: LD_INT 5
43895: NEG
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 5
43903: NEG
43904: PUSH
43905: LD_INT 3
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: LD_INT 3
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 0
43926: PUSH
43927: LD_INT 4
43929: NEG
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 1
43937: PUSH
43938: LD_INT 3
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: LD_INT 2
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 0
43959: PUSH
43960: LD_INT 2
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: LD_INT 3
43974: NEG
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 1
43982: NEG
43983: PUSH
43984: LD_INT 4
43986: NEG
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 2
43994: PUSH
43995: LD_INT 2
43997: NEG
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 2
44005: NEG
44006: PUSH
44007: LD_INT 4
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 4
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 4
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 5
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 5
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 4
44058: PUSH
44059: LD_INT 1
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 3
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 3
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 3
44089: PUSH
44090: LD_INT 2
44092: NEG
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 5
44100: PUSH
44101: LD_INT 2
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 3
44110: PUSH
44111: LD_INT 3
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 3
44120: PUSH
44121: LD_INT 2
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 4
44130: PUSH
44131: LD_INT 3
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 4
44140: PUSH
44141: LD_INT 4
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 3
44150: PUSH
44151: LD_INT 4
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 2
44160: PUSH
44161: LD_INT 3
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 2
44170: PUSH
44171: LD_INT 2
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 4
44180: PUSH
44181: LD_INT 2
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 2
44190: PUSH
44191: LD_INT 4
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: LD_INT 4
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 0
44210: PUSH
44211: LD_INT 3
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 1
44220: PUSH
44221: LD_INT 4
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 1
44230: PUSH
44231: LD_INT 5
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: LD_INT 5
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 1
44250: NEG
44251: PUSH
44252: LD_INT 4
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: LD_INT 3
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 2
44272: PUSH
44273: LD_INT 5
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 2
44282: NEG
44283: PUSH
44284: LD_INT 3
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
44338: LD_ADDR_VAR 0 34
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: LD_INT 4
44348: NEG
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: LD_INT 5
44359: NEG
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: LD_INT 4
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: LD_INT 3
44381: NEG
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 0
44389: PUSH
44390: LD_INT 3
44392: NEG
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 1
44400: NEG
44401: PUSH
44402: LD_INT 4
44404: NEG
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 1
44412: NEG
44413: PUSH
44414: LD_INT 5
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 2
44424: PUSH
44425: LD_INT 3
44427: NEG
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 2
44435: NEG
44436: PUSH
44437: LD_INT 5
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 3
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 3
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 4
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 4
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 3
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 2
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 2
44508: PUSH
44509: LD_INT 1
44511: NEG
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 2
44519: PUSH
44520: LD_INT 2
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 4
44530: PUSH
44531: LD_INT 2
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 4
44540: PUSH
44541: LD_INT 4
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 4
44550: PUSH
44551: LD_INT 3
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 5
44560: PUSH
44561: LD_INT 4
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 5
44570: PUSH
44571: LD_INT 5
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 4
44580: PUSH
44581: LD_INT 5
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 3
44590: PUSH
44591: LD_INT 4
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 3
44600: PUSH
44601: LD_INT 3
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 5
44610: PUSH
44611: LD_INT 3
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 3
44620: PUSH
44621: LD_INT 5
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: LD_INT 3
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 0
44640: PUSH
44641: LD_INT 2
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: LD_INT 3
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: PUSH
44661: LD_INT 4
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: LD_INT 4
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: NEG
44681: PUSH
44682: LD_INT 3
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: LD_INT 2
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 2
44702: PUSH
44703: LD_INT 4
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: LD_INT 2
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 4
44723: NEG
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 4
44734: NEG
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 3
44746: NEG
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 3
44757: NEG
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 4
44768: NEG
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 5
44779: NEG
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 5
44790: NEG
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 5
44802: NEG
44803: PUSH
44804: LD_INT 2
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 3
44814: NEG
44815: PUSH
44816: LD_INT 2
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: ST_TO_ADDR
// end ; end ;
44870: GO 44873
44872: POP
// case btype of b_depot , b_warehouse :
44873: LD_VAR 0 1
44877: PUSH
44878: LD_INT 0
44880: DOUBLE
44881: EQUAL
44882: IFTRUE 44892
44884: LD_INT 1
44886: DOUBLE
44887: EQUAL
44888: IFTRUE 44892
44890: GO 45093
44892: POP
// case nation of nation_american :
44893: LD_VAR 0 5
44897: PUSH
44898: LD_INT 1
44900: DOUBLE
44901: EQUAL
44902: IFTRUE 44906
44904: GO 44962
44906: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
44907: LD_ADDR_VAR 0 9
44911: PUSH
44912: LD_VAR 0 11
44916: PUSH
44917: LD_VAR 0 12
44921: PUSH
44922: LD_VAR 0 13
44926: PUSH
44927: LD_VAR 0 14
44931: PUSH
44932: LD_VAR 0 15
44936: PUSH
44937: LD_VAR 0 16
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: PUSH
44950: LD_VAR 0 4
44954: PUSH
44955: LD_INT 1
44957: PLUS
44958: ARRAY
44959: ST_TO_ADDR
44960: GO 45091
44962: LD_INT 2
44964: DOUBLE
44965: EQUAL
44966: IFTRUE 44970
44968: GO 45026
44970: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
44971: LD_ADDR_VAR 0 9
44975: PUSH
44976: LD_VAR 0 17
44980: PUSH
44981: LD_VAR 0 18
44985: PUSH
44986: LD_VAR 0 19
44990: PUSH
44991: LD_VAR 0 20
44995: PUSH
44996: LD_VAR 0 21
45000: PUSH
45001: LD_VAR 0 22
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: PUSH
45014: LD_VAR 0 4
45018: PUSH
45019: LD_INT 1
45021: PLUS
45022: ARRAY
45023: ST_TO_ADDR
45024: GO 45091
45026: LD_INT 3
45028: DOUBLE
45029: EQUAL
45030: IFTRUE 45034
45032: GO 45090
45034: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
45035: LD_ADDR_VAR 0 9
45039: PUSH
45040: LD_VAR 0 23
45044: PUSH
45045: LD_VAR 0 24
45049: PUSH
45050: LD_VAR 0 25
45054: PUSH
45055: LD_VAR 0 26
45059: PUSH
45060: LD_VAR 0 27
45064: PUSH
45065: LD_VAR 0 28
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: PUSH
45078: LD_VAR 0 4
45082: PUSH
45083: LD_INT 1
45085: PLUS
45086: ARRAY
45087: ST_TO_ADDR
45088: GO 45091
45090: POP
45091: GO 45646
45093: LD_INT 2
45095: DOUBLE
45096: EQUAL
45097: IFTRUE 45107
45099: LD_INT 3
45101: DOUBLE
45102: EQUAL
45103: IFTRUE 45107
45105: GO 45163
45107: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
45108: LD_ADDR_VAR 0 9
45112: PUSH
45113: LD_VAR 0 29
45117: PUSH
45118: LD_VAR 0 30
45122: PUSH
45123: LD_VAR 0 31
45127: PUSH
45128: LD_VAR 0 32
45132: PUSH
45133: LD_VAR 0 33
45137: PUSH
45138: LD_VAR 0 34
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: PUSH
45151: LD_VAR 0 4
45155: PUSH
45156: LD_INT 1
45158: PLUS
45159: ARRAY
45160: ST_TO_ADDR
45161: GO 45646
45163: LD_INT 16
45165: DOUBLE
45166: EQUAL
45167: IFTRUE 45225
45169: LD_INT 17
45171: DOUBLE
45172: EQUAL
45173: IFTRUE 45225
45175: LD_INT 18
45177: DOUBLE
45178: EQUAL
45179: IFTRUE 45225
45181: LD_INT 19
45183: DOUBLE
45184: EQUAL
45185: IFTRUE 45225
45187: LD_INT 22
45189: DOUBLE
45190: EQUAL
45191: IFTRUE 45225
45193: LD_INT 20
45195: DOUBLE
45196: EQUAL
45197: IFTRUE 45225
45199: LD_INT 21
45201: DOUBLE
45202: EQUAL
45203: IFTRUE 45225
45205: LD_INT 23
45207: DOUBLE
45208: EQUAL
45209: IFTRUE 45225
45211: LD_INT 24
45213: DOUBLE
45214: EQUAL
45215: IFTRUE 45225
45217: LD_INT 25
45219: DOUBLE
45220: EQUAL
45221: IFTRUE 45225
45223: GO 45281
45225: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
45226: LD_ADDR_VAR 0 9
45230: PUSH
45231: LD_VAR 0 35
45235: PUSH
45236: LD_VAR 0 36
45240: PUSH
45241: LD_VAR 0 37
45245: PUSH
45246: LD_VAR 0 38
45250: PUSH
45251: LD_VAR 0 39
45255: PUSH
45256: LD_VAR 0 40
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: PUSH
45269: LD_VAR 0 4
45273: PUSH
45274: LD_INT 1
45276: PLUS
45277: ARRAY
45278: ST_TO_ADDR
45279: GO 45646
45281: LD_INT 6
45283: DOUBLE
45284: EQUAL
45285: IFTRUE 45337
45287: LD_INT 7
45289: DOUBLE
45290: EQUAL
45291: IFTRUE 45337
45293: LD_INT 8
45295: DOUBLE
45296: EQUAL
45297: IFTRUE 45337
45299: LD_INT 13
45301: DOUBLE
45302: EQUAL
45303: IFTRUE 45337
45305: LD_INT 12
45307: DOUBLE
45308: EQUAL
45309: IFTRUE 45337
45311: LD_INT 15
45313: DOUBLE
45314: EQUAL
45315: IFTRUE 45337
45317: LD_INT 11
45319: DOUBLE
45320: EQUAL
45321: IFTRUE 45337
45323: LD_INT 14
45325: DOUBLE
45326: EQUAL
45327: IFTRUE 45337
45329: LD_INT 10
45331: DOUBLE
45332: EQUAL
45333: IFTRUE 45337
45335: GO 45393
45337: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
45338: LD_ADDR_VAR 0 9
45342: PUSH
45343: LD_VAR 0 41
45347: PUSH
45348: LD_VAR 0 42
45352: PUSH
45353: LD_VAR 0 43
45357: PUSH
45358: LD_VAR 0 44
45362: PUSH
45363: LD_VAR 0 45
45367: PUSH
45368: LD_VAR 0 46
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: PUSH
45381: LD_VAR 0 4
45385: PUSH
45386: LD_INT 1
45388: PLUS
45389: ARRAY
45390: ST_TO_ADDR
45391: GO 45646
45393: LD_INT 36
45395: DOUBLE
45396: EQUAL
45397: IFTRUE 45401
45399: GO 45457
45401: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
45402: LD_ADDR_VAR 0 9
45406: PUSH
45407: LD_VAR 0 47
45411: PUSH
45412: LD_VAR 0 48
45416: PUSH
45417: LD_VAR 0 49
45421: PUSH
45422: LD_VAR 0 50
45426: PUSH
45427: LD_VAR 0 51
45431: PUSH
45432: LD_VAR 0 52
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: PUSH
45445: LD_VAR 0 4
45449: PUSH
45450: LD_INT 1
45452: PLUS
45453: ARRAY
45454: ST_TO_ADDR
45455: GO 45646
45457: LD_INT 4
45459: DOUBLE
45460: EQUAL
45461: IFTRUE 45483
45463: LD_INT 5
45465: DOUBLE
45466: EQUAL
45467: IFTRUE 45483
45469: LD_INT 34
45471: DOUBLE
45472: EQUAL
45473: IFTRUE 45483
45475: LD_INT 37
45477: DOUBLE
45478: EQUAL
45479: IFTRUE 45483
45481: GO 45539
45483: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
45484: LD_ADDR_VAR 0 9
45488: PUSH
45489: LD_VAR 0 53
45493: PUSH
45494: LD_VAR 0 54
45498: PUSH
45499: LD_VAR 0 55
45503: PUSH
45504: LD_VAR 0 56
45508: PUSH
45509: LD_VAR 0 57
45513: PUSH
45514: LD_VAR 0 58
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: PUSH
45527: LD_VAR 0 4
45531: PUSH
45532: LD_INT 1
45534: PLUS
45535: ARRAY
45536: ST_TO_ADDR
45537: GO 45646
45539: LD_INT 31
45541: DOUBLE
45542: EQUAL
45543: IFTRUE 45589
45545: LD_INT 32
45547: DOUBLE
45548: EQUAL
45549: IFTRUE 45589
45551: LD_INT 33
45553: DOUBLE
45554: EQUAL
45555: IFTRUE 45589
45557: LD_INT 27
45559: DOUBLE
45560: EQUAL
45561: IFTRUE 45589
45563: LD_INT 26
45565: DOUBLE
45566: EQUAL
45567: IFTRUE 45589
45569: LD_INT 28
45571: DOUBLE
45572: EQUAL
45573: IFTRUE 45589
45575: LD_INT 29
45577: DOUBLE
45578: EQUAL
45579: IFTRUE 45589
45581: LD_INT 30
45583: DOUBLE
45584: EQUAL
45585: IFTRUE 45589
45587: GO 45645
45589: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
45590: LD_ADDR_VAR 0 9
45594: PUSH
45595: LD_VAR 0 59
45599: PUSH
45600: LD_VAR 0 60
45604: PUSH
45605: LD_VAR 0 61
45609: PUSH
45610: LD_VAR 0 62
45614: PUSH
45615: LD_VAR 0 63
45619: PUSH
45620: LD_VAR 0 64
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: PUSH
45633: LD_VAR 0 4
45637: PUSH
45638: LD_INT 1
45640: PLUS
45641: ARRAY
45642: ST_TO_ADDR
45643: GO 45646
45645: POP
// temp_list2 = [ ] ;
45646: LD_ADDR_VAR 0 10
45650: PUSH
45651: EMPTY
45652: ST_TO_ADDR
// for i in temp_list do
45653: LD_ADDR_VAR 0 8
45657: PUSH
45658: LD_VAR 0 9
45662: PUSH
45663: FOR_IN
45664: IFFALSE 45716
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
45666: LD_ADDR_VAR 0 10
45670: PUSH
45671: LD_VAR 0 10
45675: PUSH
45676: LD_VAR 0 8
45680: PUSH
45681: LD_INT 1
45683: ARRAY
45684: PUSH
45685: LD_VAR 0 2
45689: PLUS
45690: PUSH
45691: LD_VAR 0 8
45695: PUSH
45696: LD_INT 2
45698: ARRAY
45699: PUSH
45700: LD_VAR 0 3
45704: PLUS
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: EMPTY
45711: LIST
45712: ADD
45713: ST_TO_ADDR
45714: GO 45663
45716: POP
45717: POP
// result = temp_list2 ;
45718: LD_ADDR_VAR 0 7
45722: PUSH
45723: LD_VAR 0 10
45727: ST_TO_ADDR
// end ;
45728: LD_VAR 0 7
45732: RET
// export function EnemyInRange ( unit , dist ) ; begin
45733: LD_INT 0
45735: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
45736: LD_ADDR_VAR 0 3
45740: PUSH
45741: LD_VAR 0 1
45745: PPUSH
45746: CALL_OW 255
45750: PPUSH
45751: LD_VAR 0 1
45755: PPUSH
45756: CALL_OW 250
45760: PPUSH
45761: LD_VAR 0 1
45765: PPUSH
45766: CALL_OW 251
45770: PPUSH
45771: LD_VAR 0 2
45775: PPUSH
45776: CALL 19021 0 4
45780: PUSH
45781: LD_INT 4
45783: ARRAY
45784: ST_TO_ADDR
// end ;
45785: LD_VAR 0 3
45789: RET
// export function PlayerSeeMe ( unit ) ; begin
45790: LD_INT 0
45792: PPUSH
// result := See ( your_side , unit ) ;
45793: LD_ADDR_VAR 0 2
45797: PUSH
45798: LD_OWVAR 2
45802: PPUSH
45803: LD_VAR 0 1
45807: PPUSH
45808: CALL_OW 292
45812: ST_TO_ADDR
// end ;
45813: LD_VAR 0 2
45817: RET
// export function ReverseDir ( unit ) ; begin
45818: LD_INT 0
45820: PPUSH
// if not unit then
45821: LD_VAR 0 1
45825: NOT
45826: IFFALSE 45830
// exit ;
45828: GO 45853
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
45830: LD_ADDR_VAR 0 2
45834: PUSH
45835: LD_VAR 0 1
45839: PPUSH
45840: CALL_OW 254
45844: PUSH
45845: LD_INT 3
45847: PLUS
45848: PUSH
45849: LD_INT 6
45851: MOD
45852: ST_TO_ADDR
// end ;
45853: LD_VAR 0 2
45857: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
45858: LD_INT 0
45860: PPUSH
45861: PPUSH
45862: PPUSH
45863: PPUSH
45864: PPUSH
// if not hexes then
45865: LD_VAR 0 2
45869: NOT
45870: IFFALSE 45874
// exit ;
45872: GO 46022
// dist := 9999 ;
45874: LD_ADDR_VAR 0 5
45878: PUSH
45879: LD_INT 9999
45881: ST_TO_ADDR
// for i = 1 to hexes do
45882: LD_ADDR_VAR 0 4
45886: PUSH
45887: DOUBLE
45888: LD_INT 1
45890: DEC
45891: ST_TO_ADDR
45892: LD_VAR 0 2
45896: PUSH
45897: FOR_TO
45898: IFFALSE 46010
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
45900: LD_VAR 0 1
45904: PPUSH
45905: LD_VAR 0 2
45909: PUSH
45910: LD_VAR 0 4
45914: ARRAY
45915: PUSH
45916: LD_INT 1
45918: ARRAY
45919: PPUSH
45920: LD_VAR 0 2
45924: PUSH
45925: LD_VAR 0 4
45929: ARRAY
45930: PUSH
45931: LD_INT 2
45933: ARRAY
45934: PPUSH
45935: CALL_OW 297
45939: PUSH
45940: LD_VAR 0 5
45944: LESS
45945: IFFALSE 46008
// begin hex := hexes [ i ] ;
45947: LD_ADDR_VAR 0 7
45951: PUSH
45952: LD_VAR 0 2
45956: PUSH
45957: LD_VAR 0 4
45961: ARRAY
45962: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45963: LD_ADDR_VAR 0 5
45967: PUSH
45968: LD_VAR 0 1
45972: PPUSH
45973: LD_VAR 0 2
45977: PUSH
45978: LD_VAR 0 4
45982: ARRAY
45983: PUSH
45984: LD_INT 1
45986: ARRAY
45987: PPUSH
45988: LD_VAR 0 2
45992: PUSH
45993: LD_VAR 0 4
45997: ARRAY
45998: PUSH
45999: LD_INT 2
46001: ARRAY
46002: PPUSH
46003: CALL_OW 297
46007: ST_TO_ADDR
// end ; end ;
46008: GO 45897
46010: POP
46011: POP
// result := hex ;
46012: LD_ADDR_VAR 0 3
46016: PUSH
46017: LD_VAR 0 7
46021: ST_TO_ADDR
// end ;
46022: LD_VAR 0 3
46026: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
46027: LD_INT 0
46029: PPUSH
46030: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
46031: LD_VAR 0 1
46035: NOT
46036: PUSH
46037: LD_VAR 0 1
46041: PUSH
46042: LD_INT 21
46044: PUSH
46045: LD_INT 2
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 23
46054: PUSH
46055: LD_INT 2
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PPUSH
46066: CALL_OW 69
46070: IN
46071: NOT
46072: OR
46073: IFFALSE 46077
// exit ;
46075: GO 46124
// for i = 1 to 3 do
46077: LD_ADDR_VAR 0 3
46081: PUSH
46082: DOUBLE
46083: LD_INT 1
46085: DEC
46086: ST_TO_ADDR
46087: LD_INT 3
46089: PUSH
46090: FOR_TO
46091: IFFALSE 46122
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
46093: LD_VAR 0 1
46097: PPUSH
46098: CALL_OW 250
46102: PPUSH
46103: LD_VAR 0 1
46107: PPUSH
46108: CALL_OW 251
46112: PPUSH
46113: LD_INT 1
46115: PPUSH
46116: CALL_OW 453
46120: GO 46090
46122: POP
46123: POP
// end ;
46124: LD_VAR 0 2
46128: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
46129: LD_INT 0
46131: PPUSH
46132: PPUSH
46133: PPUSH
46134: PPUSH
46135: PPUSH
46136: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
46137: LD_VAR 0 1
46141: NOT
46142: PUSH
46143: LD_VAR 0 2
46147: NOT
46148: OR
46149: PUSH
46150: LD_VAR 0 1
46154: PPUSH
46155: CALL_OW 314
46159: OR
46160: IFFALSE 46164
// exit ;
46162: GO 46605
// x := GetX ( enemy_unit ) ;
46164: LD_ADDR_VAR 0 7
46168: PUSH
46169: LD_VAR 0 2
46173: PPUSH
46174: CALL_OW 250
46178: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
46179: LD_ADDR_VAR 0 8
46183: PUSH
46184: LD_VAR 0 2
46188: PPUSH
46189: CALL_OW 251
46193: ST_TO_ADDR
// if not x or not y then
46194: LD_VAR 0 7
46198: NOT
46199: PUSH
46200: LD_VAR 0 8
46204: NOT
46205: OR
46206: IFFALSE 46210
// exit ;
46208: GO 46605
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
46210: LD_ADDR_VAR 0 6
46214: PUSH
46215: LD_VAR 0 7
46219: PPUSH
46220: LD_INT 0
46222: PPUSH
46223: LD_INT 4
46225: PPUSH
46226: CALL_OW 272
46230: PUSH
46231: LD_VAR 0 8
46235: PPUSH
46236: LD_INT 0
46238: PPUSH
46239: LD_INT 4
46241: PPUSH
46242: CALL_OW 273
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_VAR 0 7
46255: PPUSH
46256: LD_INT 1
46258: PPUSH
46259: LD_INT 4
46261: PPUSH
46262: CALL_OW 272
46266: PUSH
46267: LD_VAR 0 8
46271: PPUSH
46272: LD_INT 1
46274: PPUSH
46275: LD_INT 4
46277: PPUSH
46278: CALL_OW 273
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_VAR 0 7
46291: PPUSH
46292: LD_INT 2
46294: PPUSH
46295: LD_INT 4
46297: PPUSH
46298: CALL_OW 272
46302: PUSH
46303: LD_VAR 0 8
46307: PPUSH
46308: LD_INT 2
46310: PPUSH
46311: LD_INT 4
46313: PPUSH
46314: CALL_OW 273
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_VAR 0 7
46327: PPUSH
46328: LD_INT 3
46330: PPUSH
46331: LD_INT 4
46333: PPUSH
46334: CALL_OW 272
46338: PUSH
46339: LD_VAR 0 8
46343: PPUSH
46344: LD_INT 3
46346: PPUSH
46347: LD_INT 4
46349: PPUSH
46350: CALL_OW 273
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_VAR 0 7
46363: PPUSH
46364: LD_INT 4
46366: PPUSH
46367: LD_INT 4
46369: PPUSH
46370: CALL_OW 272
46374: PUSH
46375: LD_VAR 0 8
46379: PPUSH
46380: LD_INT 4
46382: PPUSH
46383: LD_INT 4
46385: PPUSH
46386: CALL_OW 273
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_VAR 0 7
46399: PPUSH
46400: LD_INT 5
46402: PPUSH
46403: LD_INT 4
46405: PPUSH
46406: CALL_OW 272
46410: PUSH
46411: LD_VAR 0 8
46415: PPUSH
46416: LD_INT 5
46418: PPUSH
46419: LD_INT 4
46421: PPUSH
46422: CALL_OW 273
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: ST_TO_ADDR
// for i = tmp downto 1 do
46439: LD_ADDR_VAR 0 4
46443: PUSH
46444: DOUBLE
46445: LD_VAR 0 6
46449: INC
46450: ST_TO_ADDR
46451: LD_INT 1
46453: PUSH
46454: FOR_DOWNTO
46455: IFFALSE 46556
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
46457: LD_VAR 0 6
46461: PUSH
46462: LD_VAR 0 4
46466: ARRAY
46467: PUSH
46468: LD_INT 1
46470: ARRAY
46471: PPUSH
46472: LD_VAR 0 6
46476: PUSH
46477: LD_VAR 0 4
46481: ARRAY
46482: PUSH
46483: LD_INT 2
46485: ARRAY
46486: PPUSH
46487: CALL_OW 488
46491: NOT
46492: PUSH
46493: LD_VAR 0 6
46497: PUSH
46498: LD_VAR 0 4
46502: ARRAY
46503: PUSH
46504: LD_INT 1
46506: ARRAY
46507: PPUSH
46508: LD_VAR 0 6
46512: PUSH
46513: LD_VAR 0 4
46517: ARRAY
46518: PUSH
46519: LD_INT 2
46521: ARRAY
46522: PPUSH
46523: CALL_OW 428
46527: PUSH
46528: LD_INT 0
46530: NONEQUAL
46531: OR
46532: IFFALSE 46554
// tmp := Delete ( tmp , i ) ;
46534: LD_ADDR_VAR 0 6
46538: PUSH
46539: LD_VAR 0 6
46543: PPUSH
46544: LD_VAR 0 4
46548: PPUSH
46549: CALL_OW 3
46553: ST_TO_ADDR
46554: GO 46454
46556: POP
46557: POP
// j := GetClosestHex ( unit , tmp ) ;
46558: LD_ADDR_VAR 0 5
46562: PUSH
46563: LD_VAR 0 1
46567: PPUSH
46568: LD_VAR 0 6
46572: PPUSH
46573: CALL 45858 0 2
46577: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
46578: LD_VAR 0 1
46582: PPUSH
46583: LD_VAR 0 5
46587: PUSH
46588: LD_INT 1
46590: ARRAY
46591: PPUSH
46592: LD_VAR 0 5
46596: PUSH
46597: LD_INT 2
46599: ARRAY
46600: PPUSH
46601: CALL_OW 111
// end ;
46605: LD_VAR 0 3
46609: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46610: LD_INT 0
46612: PPUSH
46613: PPUSH
46614: PPUSH
// uc_side = 0 ;
46615: LD_ADDR_OWVAR 20
46619: PUSH
46620: LD_INT 0
46622: ST_TO_ADDR
// uc_nation = 0 ;
46623: LD_ADDR_OWVAR 21
46627: PUSH
46628: LD_INT 0
46630: ST_TO_ADDR
// InitHc_All ( ) ;
46631: CALL_OW 584
// InitVc ;
46635: CALL_OW 20
// if mastodonts then
46639: LD_VAR 0 6
46643: IFFALSE 46710
// for i = 1 to mastodonts do
46645: LD_ADDR_VAR 0 11
46649: PUSH
46650: DOUBLE
46651: LD_INT 1
46653: DEC
46654: ST_TO_ADDR
46655: LD_VAR 0 6
46659: PUSH
46660: FOR_TO
46661: IFFALSE 46708
// begin vc_chassis := 31 ;
46663: LD_ADDR_OWVAR 37
46667: PUSH
46668: LD_INT 31
46670: ST_TO_ADDR
// vc_control := control_rider ;
46671: LD_ADDR_OWVAR 38
46675: PUSH
46676: LD_INT 4
46678: ST_TO_ADDR
// animal := CreateVehicle ;
46679: LD_ADDR_VAR 0 12
46683: PUSH
46684: CALL_OW 45
46688: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46689: LD_VAR 0 12
46693: PPUSH
46694: LD_VAR 0 8
46698: PPUSH
46699: LD_INT 0
46701: PPUSH
46702: CALL 48845 0 3
// end ;
46706: GO 46660
46708: POP
46709: POP
// if horses then
46710: LD_VAR 0 5
46714: IFFALSE 46781
// for i = 1 to horses do
46716: LD_ADDR_VAR 0 11
46720: PUSH
46721: DOUBLE
46722: LD_INT 1
46724: DEC
46725: ST_TO_ADDR
46726: LD_VAR 0 5
46730: PUSH
46731: FOR_TO
46732: IFFALSE 46779
// begin hc_class := 21 ;
46734: LD_ADDR_OWVAR 28
46738: PUSH
46739: LD_INT 21
46741: ST_TO_ADDR
// hc_gallery :=  ;
46742: LD_ADDR_OWVAR 33
46746: PUSH
46747: LD_STRING 
46749: ST_TO_ADDR
// animal := CreateHuman ;
46750: LD_ADDR_VAR 0 12
46754: PUSH
46755: CALL_OW 44
46759: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46760: LD_VAR 0 12
46764: PPUSH
46765: LD_VAR 0 8
46769: PPUSH
46770: LD_INT 0
46772: PPUSH
46773: CALL 48845 0 3
// end ;
46777: GO 46731
46779: POP
46780: POP
// if birds then
46781: LD_VAR 0 1
46785: IFFALSE 46852
// for i = 1 to birds do
46787: LD_ADDR_VAR 0 11
46791: PUSH
46792: DOUBLE
46793: LD_INT 1
46795: DEC
46796: ST_TO_ADDR
46797: LD_VAR 0 1
46801: PUSH
46802: FOR_TO
46803: IFFALSE 46850
// begin hc_class = 18 ;
46805: LD_ADDR_OWVAR 28
46809: PUSH
46810: LD_INT 18
46812: ST_TO_ADDR
// hc_gallery =  ;
46813: LD_ADDR_OWVAR 33
46817: PUSH
46818: LD_STRING 
46820: ST_TO_ADDR
// animal := CreateHuman ;
46821: LD_ADDR_VAR 0 12
46825: PUSH
46826: CALL_OW 44
46830: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46831: LD_VAR 0 12
46835: PPUSH
46836: LD_VAR 0 8
46840: PPUSH
46841: LD_INT 0
46843: PPUSH
46844: CALL 48845 0 3
// end ;
46848: GO 46802
46850: POP
46851: POP
// if tigers then
46852: LD_VAR 0 2
46856: IFFALSE 46940
// for i = 1 to tigers do
46858: LD_ADDR_VAR 0 11
46862: PUSH
46863: DOUBLE
46864: LD_INT 1
46866: DEC
46867: ST_TO_ADDR
46868: LD_VAR 0 2
46872: PUSH
46873: FOR_TO
46874: IFFALSE 46938
// begin hc_class = class_tiger ;
46876: LD_ADDR_OWVAR 28
46880: PUSH
46881: LD_INT 14
46883: ST_TO_ADDR
// hc_gallery =  ;
46884: LD_ADDR_OWVAR 33
46888: PUSH
46889: LD_STRING 
46891: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46892: LD_ADDR_OWVAR 35
46896: PUSH
46897: LD_INT 7
46899: NEG
46900: PPUSH
46901: LD_INT 7
46903: PPUSH
46904: CALL_OW 12
46908: ST_TO_ADDR
// animal := CreateHuman ;
46909: LD_ADDR_VAR 0 12
46913: PUSH
46914: CALL_OW 44
46918: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46919: LD_VAR 0 12
46923: PPUSH
46924: LD_VAR 0 8
46928: PPUSH
46929: LD_INT 0
46931: PPUSH
46932: CALL 48845 0 3
// end ;
46936: GO 46873
46938: POP
46939: POP
// if apemans then
46940: LD_VAR 0 3
46944: IFFALSE 47067
// for i = 1 to apemans do
46946: LD_ADDR_VAR 0 11
46950: PUSH
46951: DOUBLE
46952: LD_INT 1
46954: DEC
46955: ST_TO_ADDR
46956: LD_VAR 0 3
46960: PUSH
46961: FOR_TO
46962: IFFALSE 47065
// begin hc_class = class_apeman ;
46964: LD_ADDR_OWVAR 28
46968: PUSH
46969: LD_INT 12
46971: ST_TO_ADDR
// hc_gallery =  ;
46972: LD_ADDR_OWVAR 33
46976: PUSH
46977: LD_STRING 
46979: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
46980: LD_ADDR_OWVAR 35
46984: PUSH
46985: LD_INT 2
46987: NEG
46988: PPUSH
46989: LD_INT 2
46991: PPUSH
46992: CALL_OW 12
46996: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46997: LD_ADDR_OWVAR 31
47001: PUSH
47002: LD_INT 1
47004: PPUSH
47005: LD_INT 3
47007: PPUSH
47008: CALL_OW 12
47012: PUSH
47013: LD_INT 1
47015: PPUSH
47016: LD_INT 3
47018: PPUSH
47019: CALL_OW 12
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: ST_TO_ADDR
// animal := CreateHuman ;
47036: LD_ADDR_VAR 0 12
47040: PUSH
47041: CALL_OW 44
47045: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47046: LD_VAR 0 12
47050: PPUSH
47051: LD_VAR 0 8
47055: PPUSH
47056: LD_INT 0
47058: PPUSH
47059: CALL 48845 0 3
// end ;
47063: GO 46961
47065: POP
47066: POP
// if enchidnas then
47067: LD_VAR 0 4
47071: IFFALSE 47138
// for i = 1 to enchidnas do
47073: LD_ADDR_VAR 0 11
47077: PUSH
47078: DOUBLE
47079: LD_INT 1
47081: DEC
47082: ST_TO_ADDR
47083: LD_VAR 0 4
47087: PUSH
47088: FOR_TO
47089: IFFALSE 47136
// begin hc_class = 13 ;
47091: LD_ADDR_OWVAR 28
47095: PUSH
47096: LD_INT 13
47098: ST_TO_ADDR
// hc_gallery =  ;
47099: LD_ADDR_OWVAR 33
47103: PUSH
47104: LD_STRING 
47106: ST_TO_ADDR
// animal := CreateHuman ;
47107: LD_ADDR_VAR 0 12
47111: PUSH
47112: CALL_OW 44
47116: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47117: LD_VAR 0 12
47121: PPUSH
47122: LD_VAR 0 8
47126: PPUSH
47127: LD_INT 0
47129: PPUSH
47130: CALL 48845 0 3
// end ;
47134: GO 47088
47136: POP
47137: POP
// if fishes then
47138: LD_VAR 0 7
47142: IFFALSE 47209
// for i = 1 to fishes do
47144: LD_ADDR_VAR 0 11
47148: PUSH
47149: DOUBLE
47150: LD_INT 1
47152: DEC
47153: ST_TO_ADDR
47154: LD_VAR 0 7
47158: PUSH
47159: FOR_TO
47160: IFFALSE 47207
// begin hc_class = 20 ;
47162: LD_ADDR_OWVAR 28
47166: PUSH
47167: LD_INT 20
47169: ST_TO_ADDR
// hc_gallery =  ;
47170: LD_ADDR_OWVAR 33
47174: PUSH
47175: LD_STRING 
47177: ST_TO_ADDR
// animal := CreateHuman ;
47178: LD_ADDR_VAR 0 12
47182: PUSH
47183: CALL_OW 44
47187: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
47188: LD_VAR 0 12
47192: PPUSH
47193: LD_VAR 0 9
47197: PPUSH
47198: LD_INT 0
47200: PPUSH
47201: CALL 48845 0 3
// end ;
47205: GO 47159
47207: POP
47208: POP
// end ;
47209: LD_VAR 0 10
47213: RET
// export function WantHeal ( sci , unit ) ; begin
47214: LD_INT 0
47216: PPUSH
// if GetTaskList ( sci ) > 0 then
47217: LD_VAR 0 1
47221: PPUSH
47222: CALL_OW 437
47226: PUSH
47227: LD_INT 0
47229: GREATER
47230: IFFALSE 47300
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
47232: LD_VAR 0 1
47236: PPUSH
47237: CALL_OW 437
47241: PUSH
47242: LD_INT 1
47244: ARRAY
47245: PUSH
47246: LD_INT 1
47248: ARRAY
47249: PUSH
47250: LD_STRING l
47252: EQUAL
47253: PUSH
47254: LD_VAR 0 1
47258: PPUSH
47259: CALL_OW 437
47263: PUSH
47264: LD_INT 1
47266: ARRAY
47267: PUSH
47268: LD_INT 4
47270: ARRAY
47271: PUSH
47272: LD_VAR 0 2
47276: EQUAL
47277: AND
47278: IFFALSE 47290
// result := true else
47280: LD_ADDR_VAR 0 3
47284: PUSH
47285: LD_INT 1
47287: ST_TO_ADDR
47288: GO 47298
// result := false ;
47290: LD_ADDR_VAR 0 3
47294: PUSH
47295: LD_INT 0
47297: ST_TO_ADDR
// end else
47298: GO 47308
// result := false ;
47300: LD_ADDR_VAR 0 3
47304: PUSH
47305: LD_INT 0
47307: ST_TO_ADDR
// end ;
47308: LD_VAR 0 3
47312: RET
// export function HealTarget ( sci ) ; begin
47313: LD_INT 0
47315: PPUSH
// if not sci then
47316: LD_VAR 0 1
47320: NOT
47321: IFFALSE 47325
// exit ;
47323: GO 47390
// result := 0 ;
47325: LD_ADDR_VAR 0 2
47329: PUSH
47330: LD_INT 0
47332: ST_TO_ADDR
// if GetTaskList ( sci ) then
47333: LD_VAR 0 1
47337: PPUSH
47338: CALL_OW 437
47342: IFFALSE 47390
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
47344: LD_VAR 0 1
47348: PPUSH
47349: CALL_OW 437
47353: PUSH
47354: LD_INT 1
47356: ARRAY
47357: PUSH
47358: LD_INT 1
47360: ARRAY
47361: PUSH
47362: LD_STRING l
47364: EQUAL
47365: IFFALSE 47390
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
47367: LD_ADDR_VAR 0 2
47371: PUSH
47372: LD_VAR 0 1
47376: PPUSH
47377: CALL_OW 437
47381: PUSH
47382: LD_INT 1
47384: ARRAY
47385: PUSH
47386: LD_INT 4
47388: ARRAY
47389: ST_TO_ADDR
// end ;
47390: LD_VAR 0 2
47394: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
47395: LD_INT 0
47397: PPUSH
47398: PPUSH
47399: PPUSH
47400: PPUSH
// if not base_units then
47401: LD_VAR 0 1
47405: NOT
47406: IFFALSE 47410
// exit ;
47408: GO 47497
// result := false ;
47410: LD_ADDR_VAR 0 2
47414: PUSH
47415: LD_INT 0
47417: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
47418: LD_ADDR_VAR 0 5
47422: PUSH
47423: LD_VAR 0 1
47427: PPUSH
47428: LD_INT 21
47430: PUSH
47431: LD_INT 3
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PPUSH
47438: CALL_OW 72
47442: ST_TO_ADDR
// if not tmp then
47443: LD_VAR 0 5
47447: NOT
47448: IFFALSE 47452
// exit ;
47450: GO 47497
// for i in tmp do
47452: LD_ADDR_VAR 0 3
47456: PUSH
47457: LD_VAR 0 5
47461: PUSH
47462: FOR_IN
47463: IFFALSE 47495
// begin result := EnemyInRange ( i , 22 ) ;
47465: LD_ADDR_VAR 0 2
47469: PUSH
47470: LD_VAR 0 3
47474: PPUSH
47475: LD_INT 22
47477: PPUSH
47478: CALL 45733 0 2
47482: ST_TO_ADDR
// if result then
47483: LD_VAR 0 2
47487: IFFALSE 47493
// exit ;
47489: POP
47490: POP
47491: GO 47497
// end ;
47493: GO 47462
47495: POP
47496: POP
// end ;
47497: LD_VAR 0 2
47501: RET
// export function FilterByTag ( units , tag ) ; begin
47502: LD_INT 0
47504: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
47505: LD_ADDR_VAR 0 3
47509: PUSH
47510: LD_VAR 0 1
47514: PPUSH
47515: LD_INT 120
47517: PUSH
47518: LD_VAR 0 2
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PPUSH
47527: CALL_OW 72
47531: ST_TO_ADDR
// end ;
47532: LD_VAR 0 3
47536: RET
// export function IsDriver ( un ) ; begin
47537: LD_INT 0
47539: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47540: LD_ADDR_VAR 0 2
47544: PUSH
47545: LD_VAR 0 1
47549: PUSH
47550: LD_INT 55
47552: PUSH
47553: EMPTY
47554: LIST
47555: PPUSH
47556: CALL_OW 69
47560: IN
47561: ST_TO_ADDR
// end ;
47562: LD_VAR 0 2
47566: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47567: LD_INT 0
47569: PPUSH
47570: PPUSH
// list := [ ] ;
47571: LD_ADDR_VAR 0 5
47575: PUSH
47576: EMPTY
47577: ST_TO_ADDR
// case d of 0 :
47578: LD_VAR 0 3
47582: PUSH
47583: LD_INT 0
47585: DOUBLE
47586: EQUAL
47587: IFTRUE 47591
47589: GO 47724
47591: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47592: LD_ADDR_VAR 0 5
47596: PUSH
47597: LD_VAR 0 1
47601: PUSH
47602: LD_INT 4
47604: MINUS
47605: PUSH
47606: LD_VAR 0 2
47610: PUSH
47611: LD_INT 4
47613: MINUS
47614: PUSH
47615: LD_INT 2
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: LIST
47622: PUSH
47623: LD_VAR 0 1
47627: PUSH
47628: LD_INT 3
47630: MINUS
47631: PUSH
47632: LD_VAR 0 2
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: LIST
47644: PUSH
47645: LD_VAR 0 1
47649: PUSH
47650: LD_INT 4
47652: PLUS
47653: PUSH
47654: LD_VAR 0 2
47658: PUSH
47659: LD_INT 4
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: LIST
47666: PUSH
47667: LD_VAR 0 1
47671: PUSH
47672: LD_INT 3
47674: PLUS
47675: PUSH
47676: LD_VAR 0 2
47680: PUSH
47681: LD_INT 3
47683: PLUS
47684: PUSH
47685: LD_INT 5
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: LIST
47692: PUSH
47693: LD_VAR 0 1
47697: PUSH
47698: LD_VAR 0 2
47702: PUSH
47703: LD_INT 4
47705: PLUS
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: LIST
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: ST_TO_ADDR
// end ; 1 :
47722: GO 48422
47724: LD_INT 1
47726: DOUBLE
47727: EQUAL
47728: IFTRUE 47732
47730: GO 47865
47732: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47733: LD_ADDR_VAR 0 5
47737: PUSH
47738: LD_VAR 0 1
47742: PUSH
47743: LD_VAR 0 2
47747: PUSH
47748: LD_INT 4
47750: MINUS
47751: PUSH
47752: LD_INT 3
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: LIST
47759: PUSH
47760: LD_VAR 0 1
47764: PUSH
47765: LD_INT 3
47767: MINUS
47768: PUSH
47769: LD_VAR 0 2
47773: PUSH
47774: LD_INT 3
47776: MINUS
47777: PUSH
47778: LD_INT 2
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: LIST
47785: PUSH
47786: LD_VAR 0 1
47790: PUSH
47791: LD_INT 4
47793: MINUS
47794: PUSH
47795: LD_VAR 0 2
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: LIST
47807: PUSH
47808: LD_VAR 0 1
47812: PUSH
47813: LD_VAR 0 2
47817: PUSH
47818: LD_INT 3
47820: PLUS
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: LIST
47829: PUSH
47830: LD_VAR 0 1
47834: PUSH
47835: LD_INT 4
47837: PLUS
47838: PUSH
47839: LD_VAR 0 2
47843: PUSH
47844: LD_INT 4
47846: PLUS
47847: PUSH
47848: LD_INT 5
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: LIST
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: ST_TO_ADDR
// end ; 2 :
47863: GO 48422
47865: LD_INT 2
47867: DOUBLE
47868: EQUAL
47869: IFTRUE 47873
47871: GO 48002
47873: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
47874: LD_ADDR_VAR 0 5
47878: PUSH
47879: LD_VAR 0 1
47883: PUSH
47884: LD_VAR 0 2
47888: PUSH
47889: LD_INT 3
47891: MINUS
47892: PUSH
47893: LD_INT 3
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: LIST
47900: PUSH
47901: LD_VAR 0 1
47905: PUSH
47906: LD_INT 4
47908: PLUS
47909: PUSH
47910: LD_VAR 0 2
47914: PUSH
47915: LD_INT 4
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: LIST
47922: PUSH
47923: LD_VAR 0 1
47927: PUSH
47928: LD_VAR 0 2
47932: PUSH
47933: LD_INT 4
47935: PLUS
47936: PUSH
47937: LD_INT 0
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: LIST
47944: PUSH
47945: LD_VAR 0 1
47949: PUSH
47950: LD_INT 3
47952: MINUS
47953: PUSH
47954: LD_VAR 0 2
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: LIST
47966: PUSH
47967: LD_VAR 0 1
47971: PUSH
47972: LD_INT 4
47974: MINUS
47975: PUSH
47976: LD_VAR 0 2
47980: PUSH
47981: LD_INT 4
47983: MINUS
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: LIST
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: ST_TO_ADDR
// end ; 3 :
48000: GO 48422
48002: LD_INT 3
48004: DOUBLE
48005: EQUAL
48006: IFTRUE 48010
48008: GO 48143
48010: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
48011: LD_ADDR_VAR 0 5
48015: PUSH
48016: LD_VAR 0 1
48020: PUSH
48021: LD_INT 3
48023: PLUS
48024: PUSH
48025: LD_VAR 0 2
48029: PUSH
48030: LD_INT 4
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: LIST
48037: PUSH
48038: LD_VAR 0 1
48042: PUSH
48043: LD_INT 4
48045: PLUS
48046: PUSH
48047: LD_VAR 0 2
48051: PUSH
48052: LD_INT 4
48054: PLUS
48055: PUSH
48056: LD_INT 5
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: LIST
48063: PUSH
48064: LD_VAR 0 1
48068: PUSH
48069: LD_INT 4
48071: MINUS
48072: PUSH
48073: LD_VAR 0 2
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: LIST
48085: PUSH
48086: LD_VAR 0 1
48090: PUSH
48091: LD_VAR 0 2
48095: PUSH
48096: LD_INT 4
48098: MINUS
48099: PUSH
48100: LD_INT 3
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: LIST
48107: PUSH
48108: LD_VAR 0 1
48112: PUSH
48113: LD_INT 3
48115: MINUS
48116: PUSH
48117: LD_VAR 0 2
48121: PUSH
48122: LD_INT 3
48124: MINUS
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: LIST
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: ST_TO_ADDR
// end ; 4 :
48141: GO 48422
48143: LD_INT 4
48145: DOUBLE
48146: EQUAL
48147: IFTRUE 48151
48149: GO 48284
48151: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
48152: LD_ADDR_VAR 0 5
48156: PUSH
48157: LD_VAR 0 1
48161: PUSH
48162: LD_VAR 0 2
48166: PUSH
48167: LD_INT 4
48169: PLUS
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: LIST
48178: PUSH
48179: LD_VAR 0 1
48183: PUSH
48184: LD_INT 3
48186: PLUS
48187: PUSH
48188: LD_VAR 0 2
48192: PUSH
48193: LD_INT 3
48195: PLUS
48196: PUSH
48197: LD_INT 5
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: LIST
48204: PUSH
48205: LD_VAR 0 1
48209: PUSH
48210: LD_INT 4
48212: PLUS
48213: PUSH
48214: LD_VAR 0 2
48218: PUSH
48219: LD_INT 4
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: LIST
48226: PUSH
48227: LD_VAR 0 1
48231: PUSH
48232: LD_VAR 0 2
48236: PUSH
48237: LD_INT 3
48239: MINUS
48240: PUSH
48241: LD_INT 3
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: LIST
48248: PUSH
48249: LD_VAR 0 1
48253: PUSH
48254: LD_INT 4
48256: MINUS
48257: PUSH
48258: LD_VAR 0 2
48262: PUSH
48263: LD_INT 4
48265: MINUS
48266: PUSH
48267: LD_INT 2
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: LIST
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: ST_TO_ADDR
// end ; 5 :
48282: GO 48422
48284: LD_INT 5
48286: DOUBLE
48287: EQUAL
48288: IFTRUE 48292
48290: GO 48421
48292: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
48293: LD_ADDR_VAR 0 5
48297: PUSH
48298: LD_VAR 0 1
48302: PUSH
48303: LD_INT 4
48305: MINUS
48306: PUSH
48307: LD_VAR 0 2
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: LIST
48319: PUSH
48320: LD_VAR 0 1
48324: PUSH
48325: LD_VAR 0 2
48329: PUSH
48330: LD_INT 4
48332: MINUS
48333: PUSH
48334: LD_INT 3
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: LIST
48341: PUSH
48342: LD_VAR 0 1
48346: PUSH
48347: LD_INT 4
48349: PLUS
48350: PUSH
48351: LD_VAR 0 2
48355: PUSH
48356: LD_INT 4
48358: PLUS
48359: PUSH
48360: LD_INT 5
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: LIST
48367: PUSH
48368: LD_VAR 0 1
48372: PUSH
48373: LD_INT 3
48375: PLUS
48376: PUSH
48377: LD_VAR 0 2
48381: PUSH
48382: LD_INT 4
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: LIST
48389: PUSH
48390: LD_VAR 0 1
48394: PUSH
48395: LD_VAR 0 2
48399: PUSH
48400: LD_INT 3
48402: PLUS
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: LIST
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: ST_TO_ADDR
// end ; end ;
48419: GO 48422
48421: POP
// result := list ;
48422: LD_ADDR_VAR 0 4
48426: PUSH
48427: LD_VAR 0 5
48431: ST_TO_ADDR
// end ;
48432: LD_VAR 0 4
48436: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
48437: LD_INT 0
48439: PPUSH
48440: PPUSH
48441: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
48442: LD_VAR 0 1
48446: NOT
48447: PUSH
48448: LD_VAR 0 2
48452: PUSH
48453: LD_INT 1
48455: PUSH
48456: LD_INT 2
48458: PUSH
48459: LD_INT 3
48461: PUSH
48462: LD_INT 4
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: IN
48471: NOT
48472: OR
48473: IFFALSE 48477
// exit ;
48475: GO 48569
// tmp := [ ] ;
48477: LD_ADDR_VAR 0 5
48481: PUSH
48482: EMPTY
48483: ST_TO_ADDR
// for i in units do
48484: LD_ADDR_VAR 0 4
48488: PUSH
48489: LD_VAR 0 1
48493: PUSH
48494: FOR_IN
48495: IFFALSE 48538
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
48497: LD_ADDR_VAR 0 5
48501: PUSH
48502: LD_VAR 0 5
48506: PPUSH
48507: LD_VAR 0 5
48511: PUSH
48512: LD_INT 1
48514: PLUS
48515: PPUSH
48516: LD_VAR 0 4
48520: PPUSH
48521: LD_VAR 0 2
48525: PPUSH
48526: CALL_OW 259
48530: PPUSH
48531: CALL_OW 2
48535: ST_TO_ADDR
48536: GO 48494
48538: POP
48539: POP
// if not tmp then
48540: LD_VAR 0 5
48544: NOT
48545: IFFALSE 48549
// exit ;
48547: GO 48569
// result := SortListByListDesc ( units , tmp ) ;
48549: LD_ADDR_VAR 0 3
48553: PUSH
48554: LD_VAR 0 1
48558: PPUSH
48559: LD_VAR 0 5
48563: PPUSH
48564: CALL_OW 77
48568: ST_TO_ADDR
// end ;
48569: LD_VAR 0 3
48573: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48574: LD_INT 0
48576: PPUSH
48577: PPUSH
48578: PPUSH
// result := false ;
48579: LD_ADDR_VAR 0 3
48583: PUSH
48584: LD_INT 0
48586: ST_TO_ADDR
// x := GetX ( building ) ;
48587: LD_ADDR_VAR 0 4
48591: PUSH
48592: LD_VAR 0 2
48596: PPUSH
48597: CALL_OW 250
48601: ST_TO_ADDR
// y := GetY ( building ) ;
48602: LD_ADDR_VAR 0 5
48606: PUSH
48607: LD_VAR 0 2
48611: PPUSH
48612: CALL_OW 251
48616: ST_TO_ADDR
// if not building or not x or not y then
48617: LD_VAR 0 2
48621: NOT
48622: PUSH
48623: LD_VAR 0 4
48627: NOT
48628: OR
48629: PUSH
48630: LD_VAR 0 5
48634: NOT
48635: OR
48636: IFFALSE 48640
// exit ;
48638: GO 48732
// if GetTaskList ( unit ) then
48640: LD_VAR 0 1
48644: PPUSH
48645: CALL_OW 437
48649: IFFALSE 48732
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48651: LD_STRING e
48653: PUSH
48654: LD_VAR 0 1
48658: PPUSH
48659: CALL_OW 437
48663: PUSH
48664: LD_INT 1
48666: ARRAY
48667: PUSH
48668: LD_INT 1
48670: ARRAY
48671: EQUAL
48672: PUSH
48673: LD_VAR 0 4
48677: PUSH
48678: LD_VAR 0 1
48682: PPUSH
48683: CALL_OW 437
48687: PUSH
48688: LD_INT 1
48690: ARRAY
48691: PUSH
48692: LD_INT 2
48694: ARRAY
48695: EQUAL
48696: AND
48697: PUSH
48698: LD_VAR 0 5
48702: PUSH
48703: LD_VAR 0 1
48707: PPUSH
48708: CALL_OW 437
48712: PUSH
48713: LD_INT 1
48715: ARRAY
48716: PUSH
48717: LD_INT 3
48719: ARRAY
48720: EQUAL
48721: AND
48722: IFFALSE 48732
// result := true end ;
48724: LD_ADDR_VAR 0 3
48728: PUSH
48729: LD_INT 1
48731: ST_TO_ADDR
// end ;
48732: LD_VAR 0 3
48736: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
48737: LD_INT 0
48739: PPUSH
// result := false ;
48740: LD_ADDR_VAR 0 4
48744: PUSH
48745: LD_INT 0
48747: ST_TO_ADDR
// if GetTaskList ( unit ) then
48748: LD_VAR 0 1
48752: PPUSH
48753: CALL_OW 437
48757: IFFALSE 48840
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48759: LD_STRING M
48761: PUSH
48762: LD_VAR 0 1
48766: PPUSH
48767: CALL_OW 437
48771: PUSH
48772: LD_INT 1
48774: ARRAY
48775: PUSH
48776: LD_INT 1
48778: ARRAY
48779: EQUAL
48780: PUSH
48781: LD_VAR 0 2
48785: PUSH
48786: LD_VAR 0 1
48790: PPUSH
48791: CALL_OW 437
48795: PUSH
48796: LD_INT 1
48798: ARRAY
48799: PUSH
48800: LD_INT 2
48802: ARRAY
48803: EQUAL
48804: AND
48805: PUSH
48806: LD_VAR 0 3
48810: PUSH
48811: LD_VAR 0 1
48815: PPUSH
48816: CALL_OW 437
48820: PUSH
48821: LD_INT 1
48823: ARRAY
48824: PUSH
48825: LD_INT 3
48827: ARRAY
48828: EQUAL
48829: AND
48830: IFFALSE 48840
// result := true ;
48832: LD_ADDR_VAR 0 4
48836: PUSH
48837: LD_INT 1
48839: ST_TO_ADDR
// end ; end ;
48840: LD_VAR 0 4
48844: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48845: LD_INT 0
48847: PPUSH
48848: PPUSH
48849: PPUSH
48850: PPUSH
// if not unit or not area then
48851: LD_VAR 0 1
48855: NOT
48856: PUSH
48857: LD_VAR 0 2
48861: NOT
48862: OR
48863: IFFALSE 48867
// exit ;
48865: GO 49031
// tmp := AreaToList ( area , i ) ;
48867: LD_ADDR_VAR 0 6
48871: PUSH
48872: LD_VAR 0 2
48876: PPUSH
48877: LD_VAR 0 5
48881: PPUSH
48882: CALL_OW 517
48886: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
48887: LD_ADDR_VAR 0 5
48891: PUSH
48892: DOUBLE
48893: LD_INT 1
48895: DEC
48896: ST_TO_ADDR
48897: LD_VAR 0 6
48901: PUSH
48902: LD_INT 1
48904: ARRAY
48905: PUSH
48906: FOR_TO
48907: IFFALSE 49029
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
48909: LD_ADDR_VAR 0 7
48913: PUSH
48914: LD_VAR 0 6
48918: PUSH
48919: LD_INT 1
48921: ARRAY
48922: PUSH
48923: LD_VAR 0 5
48927: ARRAY
48928: PUSH
48929: LD_VAR 0 6
48933: PUSH
48934: LD_INT 2
48936: ARRAY
48937: PUSH
48938: LD_VAR 0 5
48942: ARRAY
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
48948: LD_VAR 0 7
48952: PUSH
48953: LD_INT 1
48955: ARRAY
48956: PPUSH
48957: LD_VAR 0 7
48961: PUSH
48962: LD_INT 2
48964: ARRAY
48965: PPUSH
48966: CALL_OW 428
48970: PUSH
48971: LD_INT 0
48973: EQUAL
48974: IFFALSE 49027
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
48976: LD_VAR 0 1
48980: PPUSH
48981: LD_VAR 0 7
48985: PUSH
48986: LD_INT 1
48988: ARRAY
48989: PPUSH
48990: LD_VAR 0 7
48994: PUSH
48995: LD_INT 2
48997: ARRAY
48998: PPUSH
48999: LD_VAR 0 3
49003: PPUSH
49004: CALL_OW 48
// result := IsPlaced ( unit ) ;
49008: LD_ADDR_VAR 0 4
49012: PUSH
49013: LD_VAR 0 1
49017: PPUSH
49018: CALL_OW 305
49022: ST_TO_ADDR
// exit ;
49023: POP
49024: POP
49025: GO 49031
// end ; end ;
49027: GO 48906
49029: POP
49030: POP
// end ;
49031: LD_VAR 0 4
49035: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
49036: LD_INT 0
49038: PPUSH
49039: PPUSH
49040: PPUSH
// if not side or side > 8 then
49041: LD_VAR 0 1
49045: NOT
49046: PUSH
49047: LD_VAR 0 1
49051: PUSH
49052: LD_INT 8
49054: GREATER
49055: OR
49056: IFFALSE 49060
// exit ;
49058: GO 49247
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
49060: LD_ADDR_VAR 0 4
49064: PUSH
49065: LD_INT 22
49067: PUSH
49068: LD_VAR 0 1
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 21
49079: PUSH
49080: LD_INT 3
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PPUSH
49091: CALL_OW 69
49095: ST_TO_ADDR
// if not tmp then
49096: LD_VAR 0 4
49100: NOT
49101: IFFALSE 49105
// exit ;
49103: GO 49247
// enable_addtolog := true ;
49105: LD_ADDR_OWVAR 81
49109: PUSH
49110: LD_INT 1
49112: ST_TO_ADDR
// AddToLog ( [ ) ;
49113: LD_STRING [
49115: PPUSH
49116: CALL_OW 561
// for i in tmp do
49120: LD_ADDR_VAR 0 3
49124: PUSH
49125: LD_VAR 0 4
49129: PUSH
49130: FOR_IN
49131: IFFALSE 49238
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
49133: LD_STRING [
49135: PUSH
49136: LD_VAR 0 3
49140: PPUSH
49141: CALL_OW 266
49145: STR
49146: PUSH
49147: LD_STRING , 
49149: STR
49150: PUSH
49151: LD_VAR 0 3
49155: PPUSH
49156: CALL_OW 250
49160: STR
49161: PUSH
49162: LD_STRING , 
49164: STR
49165: PUSH
49166: LD_VAR 0 3
49170: PPUSH
49171: CALL_OW 251
49175: STR
49176: PUSH
49177: LD_STRING , 
49179: STR
49180: PUSH
49181: LD_VAR 0 3
49185: PPUSH
49186: CALL_OW 254
49190: STR
49191: PUSH
49192: LD_STRING , 
49194: STR
49195: PUSH
49196: LD_VAR 0 3
49200: PPUSH
49201: LD_INT 1
49203: PPUSH
49204: CALL_OW 268
49208: STR
49209: PUSH
49210: LD_STRING , 
49212: STR
49213: PUSH
49214: LD_VAR 0 3
49218: PPUSH
49219: LD_INT 2
49221: PPUSH
49222: CALL_OW 268
49226: STR
49227: PUSH
49228: LD_STRING ],
49230: STR
49231: PPUSH
49232: CALL_OW 561
// end ;
49236: GO 49130
49238: POP
49239: POP
// AddToLog ( ]; ) ;
49240: LD_STRING ];
49242: PPUSH
49243: CALL_OW 561
// end ;
49247: LD_VAR 0 2
49251: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
49252: LD_INT 0
49254: PPUSH
49255: PPUSH
49256: PPUSH
49257: PPUSH
49258: PPUSH
// if not area or not rate or not max then
49259: LD_VAR 0 1
49263: NOT
49264: PUSH
49265: LD_VAR 0 2
49269: NOT
49270: OR
49271: PUSH
49272: LD_VAR 0 4
49276: NOT
49277: OR
49278: IFFALSE 49282
// exit ;
49280: GO 49471
// while 1 do
49282: LD_INT 1
49284: IFFALSE 49471
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
49286: LD_ADDR_VAR 0 9
49290: PUSH
49291: LD_VAR 0 1
49295: PPUSH
49296: LD_INT 1
49298: PPUSH
49299: CALL_OW 287
49303: PUSH
49304: LD_INT 10
49306: MUL
49307: ST_TO_ADDR
// r := rate / 10 ;
49308: LD_ADDR_VAR 0 7
49312: PUSH
49313: LD_VAR 0 2
49317: PUSH
49318: LD_INT 10
49320: DIVREAL
49321: ST_TO_ADDR
// time := 1 1$00 ;
49322: LD_ADDR_VAR 0 8
49326: PUSH
49327: LD_INT 2100
49329: ST_TO_ADDR
// if amount < min then
49330: LD_VAR 0 9
49334: PUSH
49335: LD_VAR 0 3
49339: LESS
49340: IFFALSE 49358
// r := r * 2 else
49342: LD_ADDR_VAR 0 7
49346: PUSH
49347: LD_VAR 0 7
49351: PUSH
49352: LD_INT 2
49354: MUL
49355: ST_TO_ADDR
49356: GO 49384
// if amount > max then
49358: LD_VAR 0 9
49362: PUSH
49363: LD_VAR 0 4
49367: GREATER
49368: IFFALSE 49384
// r := r / 2 ;
49370: LD_ADDR_VAR 0 7
49374: PUSH
49375: LD_VAR 0 7
49379: PUSH
49380: LD_INT 2
49382: DIVREAL
49383: ST_TO_ADDR
// time := time / r ;
49384: LD_ADDR_VAR 0 8
49388: PUSH
49389: LD_VAR 0 8
49393: PUSH
49394: LD_VAR 0 7
49398: DIVREAL
49399: ST_TO_ADDR
// if time < 0 then
49400: LD_VAR 0 8
49404: PUSH
49405: LD_INT 0
49407: LESS
49408: IFFALSE 49425
// time := time * - 1 ;
49410: LD_ADDR_VAR 0 8
49414: PUSH
49415: LD_VAR 0 8
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: MUL
49424: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
49425: LD_VAR 0 8
49429: PUSH
49430: LD_INT 35
49432: PPUSH
49433: LD_INT 875
49435: PPUSH
49436: CALL_OW 12
49440: PLUS
49441: PPUSH
49442: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
49446: LD_INT 1
49448: PPUSH
49449: LD_INT 5
49451: PPUSH
49452: CALL_OW 12
49456: PPUSH
49457: LD_VAR 0 1
49461: PPUSH
49462: LD_INT 1
49464: PPUSH
49465: CALL_OW 55
// end ;
49469: GO 49282
// end ;
49471: LD_VAR 0 5
49475: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
49476: LD_INT 0
49478: PPUSH
49479: PPUSH
49480: PPUSH
49481: PPUSH
49482: PPUSH
49483: PPUSH
49484: PPUSH
49485: PPUSH
// if not turrets or not factories then
49486: LD_VAR 0 1
49490: NOT
49491: PUSH
49492: LD_VAR 0 2
49496: NOT
49497: OR
49498: IFFALSE 49502
// exit ;
49500: GO 49809
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
49502: LD_ADDR_VAR 0 10
49506: PUSH
49507: LD_INT 5
49509: PUSH
49510: LD_INT 6
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 2
49519: PUSH
49520: LD_INT 4
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 3
49529: PUSH
49530: LD_INT 5
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 24
49544: PUSH
49545: LD_INT 25
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 23
49554: PUSH
49555: LD_INT 27
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 42
49568: PUSH
49569: LD_INT 43
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 44
49578: PUSH
49579: LD_INT 46
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 45
49588: PUSH
49589: LD_INT 47
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: LIST
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: LIST
49605: ST_TO_ADDR
// result := [ ] ;
49606: LD_ADDR_VAR 0 3
49610: PUSH
49611: EMPTY
49612: ST_TO_ADDR
// for i in turrets do
49613: LD_ADDR_VAR 0 4
49617: PUSH
49618: LD_VAR 0 1
49622: PUSH
49623: FOR_IN
49624: IFFALSE 49807
// begin nat := GetNation ( i ) ;
49626: LD_ADDR_VAR 0 7
49630: PUSH
49631: LD_VAR 0 4
49635: PPUSH
49636: CALL_OW 248
49640: ST_TO_ADDR
// weapon := 0 ;
49641: LD_ADDR_VAR 0 8
49645: PUSH
49646: LD_INT 0
49648: ST_TO_ADDR
// if not nat then
49649: LD_VAR 0 7
49653: NOT
49654: IFFALSE 49658
// continue ;
49656: GO 49623
// for j in list [ nat ] do
49658: LD_ADDR_VAR 0 5
49662: PUSH
49663: LD_VAR 0 10
49667: PUSH
49668: LD_VAR 0 7
49672: ARRAY
49673: PUSH
49674: FOR_IN
49675: IFFALSE 49716
// if GetBWeapon ( i ) = j [ 1 ] then
49677: LD_VAR 0 4
49681: PPUSH
49682: CALL_OW 269
49686: PUSH
49687: LD_VAR 0 5
49691: PUSH
49692: LD_INT 1
49694: ARRAY
49695: EQUAL
49696: IFFALSE 49714
// begin weapon := j [ 2 ] ;
49698: LD_ADDR_VAR 0 8
49702: PUSH
49703: LD_VAR 0 5
49707: PUSH
49708: LD_INT 2
49710: ARRAY
49711: ST_TO_ADDR
// break ;
49712: GO 49716
// end ;
49714: GO 49674
49716: POP
49717: POP
// if not weapon then
49718: LD_VAR 0 8
49722: NOT
49723: IFFALSE 49727
// continue ;
49725: GO 49623
// for k in factories do
49727: LD_ADDR_VAR 0 6
49731: PUSH
49732: LD_VAR 0 2
49736: PUSH
49737: FOR_IN
49738: IFFALSE 49803
// begin weapons := AvailableWeaponList ( k ) ;
49740: LD_ADDR_VAR 0 9
49744: PUSH
49745: LD_VAR 0 6
49749: PPUSH
49750: CALL_OW 478
49754: ST_TO_ADDR
// if not weapons then
49755: LD_VAR 0 9
49759: NOT
49760: IFFALSE 49764
// continue ;
49762: GO 49737
// if weapon in weapons then
49764: LD_VAR 0 8
49768: PUSH
49769: LD_VAR 0 9
49773: IN
49774: IFFALSE 49801
// begin result := [ i , weapon ] ;
49776: LD_ADDR_VAR 0 3
49780: PUSH
49781: LD_VAR 0 4
49785: PUSH
49786: LD_VAR 0 8
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: ST_TO_ADDR
// exit ;
49795: POP
49796: POP
49797: POP
49798: POP
49799: GO 49809
// end ; end ;
49801: GO 49737
49803: POP
49804: POP
// end ;
49805: GO 49623
49807: POP
49808: POP
// end ;
49809: LD_VAR 0 3
49813: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49814: LD_INT 0
49816: PPUSH
// if not side or side > 8 then
49817: LD_VAR 0 3
49821: NOT
49822: PUSH
49823: LD_VAR 0 3
49827: PUSH
49828: LD_INT 8
49830: GREATER
49831: OR
49832: IFFALSE 49836
// exit ;
49834: GO 49895
// if not range then
49836: LD_VAR 0 4
49840: NOT
49841: IFFALSE 49852
// range := - 12 ;
49843: LD_ADDR_VAR 0 4
49847: PUSH
49848: LD_INT 12
49850: NEG
49851: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49852: LD_VAR 0 1
49856: PPUSH
49857: LD_VAR 0 2
49861: PPUSH
49862: LD_VAR 0 3
49866: PPUSH
49867: LD_VAR 0 4
49871: PPUSH
49872: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
49876: LD_VAR 0 1
49880: PPUSH
49881: LD_VAR 0 2
49885: PPUSH
49886: LD_VAR 0 3
49890: PPUSH
49891: CALL_OW 331
// end ;
49895: LD_VAR 0 5
49899: RET
// export function Video ( mode ) ; begin
49900: LD_INT 0
49902: PPUSH
// ingame_video = mode ;
49903: LD_ADDR_OWVAR 52
49907: PUSH
49908: LD_VAR 0 1
49912: ST_TO_ADDR
// interface_hidden = mode ;
49913: LD_ADDR_OWVAR 54
49917: PUSH
49918: LD_VAR 0 1
49922: ST_TO_ADDR
// end ;
49923: LD_VAR 0 2
49927: RET
// export function Join ( array , element ) ; begin
49928: LD_INT 0
49930: PPUSH
// result := Replace ( array , array + 1 , element ) ;
49931: LD_ADDR_VAR 0 3
49935: PUSH
49936: LD_VAR 0 1
49940: PPUSH
49941: LD_VAR 0 1
49945: PUSH
49946: LD_INT 1
49948: PLUS
49949: PPUSH
49950: LD_VAR 0 2
49954: PPUSH
49955: CALL_OW 1
49959: ST_TO_ADDR
// end ;
49960: LD_VAR 0 3
49964: RET
// export function JoinUnion ( array , element ) ; begin
49965: LD_INT 0
49967: PPUSH
// result := array union element ;
49968: LD_ADDR_VAR 0 3
49972: PUSH
49973: LD_VAR 0 1
49977: PUSH
49978: LD_VAR 0 2
49982: UNION
49983: ST_TO_ADDR
// end ;
49984: LD_VAR 0 3
49988: RET
// export function GetBehemoths ( side ) ; begin
49989: LD_INT 0
49991: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
49992: LD_ADDR_VAR 0 2
49996: PUSH
49997: LD_INT 22
49999: PUSH
50000: LD_VAR 0 1
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 31
50011: PUSH
50012: LD_INT 25
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PPUSH
50023: CALL_OW 69
50027: ST_TO_ADDR
// end ;
50028: LD_VAR 0 2
50032: RET
// export function Shuffle ( array ) ; var i , index ; begin
50033: LD_INT 0
50035: PPUSH
50036: PPUSH
50037: PPUSH
// result := [ ] ;
50038: LD_ADDR_VAR 0 2
50042: PUSH
50043: EMPTY
50044: ST_TO_ADDR
// if not array then
50045: LD_VAR 0 1
50049: NOT
50050: IFFALSE 50054
// exit ;
50052: GO 50153
// Randomize ;
50054: CALL_OW 10
// for i = array downto 1 do
50058: LD_ADDR_VAR 0 3
50062: PUSH
50063: DOUBLE
50064: LD_VAR 0 1
50068: INC
50069: ST_TO_ADDR
50070: LD_INT 1
50072: PUSH
50073: FOR_DOWNTO
50074: IFFALSE 50151
// begin index := rand ( 1 , array ) ;
50076: LD_ADDR_VAR 0 4
50080: PUSH
50081: LD_INT 1
50083: PPUSH
50084: LD_VAR 0 1
50088: PPUSH
50089: CALL_OW 12
50093: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
50094: LD_ADDR_VAR 0 2
50098: PUSH
50099: LD_VAR 0 2
50103: PPUSH
50104: LD_VAR 0 2
50108: PUSH
50109: LD_INT 1
50111: PLUS
50112: PPUSH
50113: LD_VAR 0 1
50117: PUSH
50118: LD_VAR 0 4
50122: ARRAY
50123: PPUSH
50124: CALL_OW 2
50128: ST_TO_ADDR
// array := Delete ( array , index ) ;
50129: LD_ADDR_VAR 0 1
50133: PUSH
50134: LD_VAR 0 1
50138: PPUSH
50139: LD_VAR 0 4
50143: PPUSH
50144: CALL_OW 3
50148: ST_TO_ADDR
// end ;
50149: GO 50073
50151: POP
50152: POP
// end ;
50153: LD_VAR 0 2
50157: RET
// export function GetBaseMaterials ( base ) ; begin
50158: LD_INT 0
50160: PPUSH
// result := [ 0 , 0 , 0 ] ;
50161: LD_ADDR_VAR 0 2
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: LIST
50179: ST_TO_ADDR
// if not base then
50180: LD_VAR 0 1
50184: NOT
50185: IFFALSE 50189
// exit ;
50187: GO 50238
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
50189: LD_ADDR_VAR 0 2
50193: PUSH
50194: LD_VAR 0 1
50198: PPUSH
50199: LD_INT 1
50201: PPUSH
50202: CALL_OW 275
50206: PUSH
50207: LD_VAR 0 1
50211: PPUSH
50212: LD_INT 2
50214: PPUSH
50215: CALL_OW 275
50219: PUSH
50220: LD_VAR 0 1
50224: PPUSH
50225: LD_INT 3
50227: PPUSH
50228: CALL_OW 275
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: LIST
50237: ST_TO_ADDR
// end ;
50238: LD_VAR 0 2
50242: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
50243: LD_INT 0
50245: PPUSH
50246: PPUSH
// result := array ;
50247: LD_ADDR_VAR 0 3
50251: PUSH
50252: LD_VAR 0 1
50256: ST_TO_ADDR
// if size > 0 then
50257: LD_VAR 0 2
50261: PUSH
50262: LD_INT 0
50264: GREATER
50265: IFFALSE 50311
// for i := array downto size do
50267: LD_ADDR_VAR 0 4
50271: PUSH
50272: DOUBLE
50273: LD_VAR 0 1
50277: INC
50278: ST_TO_ADDR
50279: LD_VAR 0 2
50283: PUSH
50284: FOR_DOWNTO
50285: IFFALSE 50309
// result := Delete ( result , result ) ;
50287: LD_ADDR_VAR 0 3
50291: PUSH
50292: LD_VAR 0 3
50296: PPUSH
50297: LD_VAR 0 3
50301: PPUSH
50302: CALL_OW 3
50306: ST_TO_ADDR
50307: GO 50284
50309: POP
50310: POP
// end ;
50311: LD_VAR 0 3
50315: RET
// export function ComExit ( unit ) ; var tmp ; begin
50316: LD_INT 0
50318: PPUSH
50319: PPUSH
// if not IsInUnit ( unit ) then
50320: LD_VAR 0 1
50324: PPUSH
50325: CALL_OW 310
50329: NOT
50330: IFFALSE 50334
// exit ;
50332: GO 50394
// tmp := IsInUnit ( unit ) ;
50334: LD_ADDR_VAR 0 3
50338: PUSH
50339: LD_VAR 0 1
50343: PPUSH
50344: CALL_OW 310
50348: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
50349: LD_VAR 0 3
50353: PPUSH
50354: CALL_OW 247
50358: PUSH
50359: LD_INT 2
50361: EQUAL
50362: IFFALSE 50375
// ComExitVehicle ( unit ) else
50364: LD_VAR 0 1
50368: PPUSH
50369: CALL_OW 121
50373: GO 50384
// ComExitBuilding ( unit ) ;
50375: LD_VAR 0 1
50379: PPUSH
50380: CALL_OW 122
// result := tmp ;
50384: LD_ADDR_VAR 0 2
50388: PUSH
50389: LD_VAR 0 3
50393: ST_TO_ADDR
// end ;
50394: LD_VAR 0 2
50398: RET
// export function ComExitAll ( units ) ; var i ; begin
50399: LD_INT 0
50401: PPUSH
50402: PPUSH
// if not units then
50403: LD_VAR 0 1
50407: NOT
50408: IFFALSE 50412
// exit ;
50410: GO 50438
// for i in units do
50412: LD_ADDR_VAR 0 3
50416: PUSH
50417: LD_VAR 0 1
50421: PUSH
50422: FOR_IN
50423: IFFALSE 50436
// ComExit ( i ) ;
50425: LD_VAR 0 3
50429: PPUSH
50430: CALL 50316 0 1
50434: GO 50422
50436: POP
50437: POP
// end ;
50438: LD_VAR 0 2
50442: RET
// export function ResetHc ; begin
50443: LD_INT 0
50445: PPUSH
// InitHc ;
50446: CALL_OW 19
// hc_importance := 0 ;
50450: LD_ADDR_OWVAR 32
50454: PUSH
50455: LD_INT 0
50457: ST_TO_ADDR
// end ;
50458: LD_VAR 0 1
50462: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
50463: LD_INT 0
50465: PPUSH
50466: PPUSH
50467: PPUSH
// _x := ( x1 + x2 ) div 2 ;
50468: LD_ADDR_VAR 0 6
50472: PUSH
50473: LD_VAR 0 1
50477: PUSH
50478: LD_VAR 0 3
50482: PLUS
50483: PUSH
50484: LD_INT 2
50486: DIV
50487: ST_TO_ADDR
// if _x < 0 then
50488: LD_VAR 0 6
50492: PUSH
50493: LD_INT 0
50495: LESS
50496: IFFALSE 50513
// _x := _x * - 1 ;
50498: LD_ADDR_VAR 0 6
50502: PUSH
50503: LD_VAR 0 6
50507: PUSH
50508: LD_INT 1
50510: NEG
50511: MUL
50512: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
50513: LD_ADDR_VAR 0 7
50517: PUSH
50518: LD_VAR 0 2
50522: PUSH
50523: LD_VAR 0 4
50527: PLUS
50528: PUSH
50529: LD_INT 2
50531: DIV
50532: ST_TO_ADDR
// if _y < 0 then
50533: LD_VAR 0 7
50537: PUSH
50538: LD_INT 0
50540: LESS
50541: IFFALSE 50558
// _y := _y * - 1 ;
50543: LD_ADDR_VAR 0 7
50547: PUSH
50548: LD_VAR 0 7
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: MUL
50557: ST_TO_ADDR
// result := [ _x , _y ] ;
50558: LD_ADDR_VAR 0 5
50562: PUSH
50563: LD_VAR 0 6
50567: PUSH
50568: LD_VAR 0 7
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: ST_TO_ADDR
// end ;
50577: LD_VAR 0 5
50581: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
50582: LD_INT 0
50584: PPUSH
50585: PPUSH
50586: PPUSH
50587: PPUSH
// task := GetTaskList ( unit ) ;
50588: LD_ADDR_VAR 0 7
50592: PUSH
50593: LD_VAR 0 1
50597: PPUSH
50598: CALL_OW 437
50602: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
50603: LD_VAR 0 7
50607: NOT
50608: PUSH
50609: LD_VAR 0 1
50613: PPUSH
50614: LD_VAR 0 2
50618: PPUSH
50619: CALL_OW 308
50623: NOT
50624: AND
50625: IFFALSE 50629
// exit ;
50627: GO 50747
// if IsInArea ( unit , area ) then
50629: LD_VAR 0 1
50633: PPUSH
50634: LD_VAR 0 2
50638: PPUSH
50639: CALL_OW 308
50643: IFFALSE 50661
// begin ComMoveToArea ( unit , goAway ) ;
50645: LD_VAR 0 1
50649: PPUSH
50650: LD_VAR 0 3
50654: PPUSH
50655: CALL_OW 113
// exit ;
50659: GO 50747
// end ; if task [ 1 ] [ 1 ] <> M then
50661: LD_VAR 0 7
50665: PUSH
50666: LD_INT 1
50668: ARRAY
50669: PUSH
50670: LD_INT 1
50672: ARRAY
50673: PUSH
50674: LD_STRING M
50676: NONEQUAL
50677: IFFALSE 50681
// exit ;
50679: GO 50747
// x := task [ 1 ] [ 2 ] ;
50681: LD_ADDR_VAR 0 5
50685: PUSH
50686: LD_VAR 0 7
50690: PUSH
50691: LD_INT 1
50693: ARRAY
50694: PUSH
50695: LD_INT 2
50697: ARRAY
50698: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
50699: LD_ADDR_VAR 0 6
50703: PUSH
50704: LD_VAR 0 7
50708: PUSH
50709: LD_INT 1
50711: ARRAY
50712: PUSH
50713: LD_INT 3
50715: ARRAY
50716: ST_TO_ADDR
// if InArea ( x , y , area ) then
50717: LD_VAR 0 5
50721: PPUSH
50722: LD_VAR 0 6
50726: PPUSH
50727: LD_VAR 0 2
50731: PPUSH
50732: CALL_OW 309
50736: IFFALSE 50747
// ComStop ( unit ) ;
50738: LD_VAR 0 1
50742: PPUSH
50743: CALL_OW 141
// end ;
50747: LD_VAR 0 4
50751: RET
// export function Abs ( value ) ; begin
50752: LD_INT 0
50754: PPUSH
// result := value ;
50755: LD_ADDR_VAR 0 2
50759: PUSH
50760: LD_VAR 0 1
50764: ST_TO_ADDR
// if value < 0 then
50765: LD_VAR 0 1
50769: PUSH
50770: LD_INT 0
50772: LESS
50773: IFFALSE 50790
// result := value * - 1 ;
50775: LD_ADDR_VAR 0 2
50779: PUSH
50780: LD_VAR 0 1
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: MUL
50789: ST_TO_ADDR
// end ;
50790: LD_VAR 0 2
50794: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
50795: LD_INT 0
50797: PPUSH
50798: PPUSH
50799: PPUSH
50800: PPUSH
50801: PPUSH
50802: PPUSH
50803: PPUSH
50804: PPUSH
// if not unit or not building then
50805: LD_VAR 0 1
50809: NOT
50810: PUSH
50811: LD_VAR 0 2
50815: NOT
50816: OR
50817: IFFALSE 50821
// exit ;
50819: GO 51047
// x := GetX ( building ) ;
50821: LD_ADDR_VAR 0 4
50825: PUSH
50826: LD_VAR 0 2
50830: PPUSH
50831: CALL_OW 250
50835: ST_TO_ADDR
// y := GetY ( building ) ;
50836: LD_ADDR_VAR 0 6
50840: PUSH
50841: LD_VAR 0 2
50845: PPUSH
50846: CALL_OW 251
50850: ST_TO_ADDR
// d := GetDir ( building ) ;
50851: LD_ADDR_VAR 0 8
50855: PUSH
50856: LD_VAR 0 2
50860: PPUSH
50861: CALL_OW 254
50865: ST_TO_ADDR
// r := 4 ;
50866: LD_ADDR_VAR 0 9
50870: PUSH
50871: LD_INT 4
50873: ST_TO_ADDR
// for i := 1 to 5 do
50874: LD_ADDR_VAR 0 10
50878: PUSH
50879: DOUBLE
50880: LD_INT 1
50882: DEC
50883: ST_TO_ADDR
50884: LD_INT 5
50886: PUSH
50887: FOR_TO
50888: IFFALSE 51045
// begin _x := ShiftX ( x , d , r + i ) ;
50890: LD_ADDR_VAR 0 5
50894: PUSH
50895: LD_VAR 0 4
50899: PPUSH
50900: LD_VAR 0 8
50904: PPUSH
50905: LD_VAR 0 9
50909: PUSH
50910: LD_VAR 0 10
50914: PLUS
50915: PPUSH
50916: CALL_OW 272
50920: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
50921: LD_ADDR_VAR 0 7
50925: PUSH
50926: LD_VAR 0 6
50930: PPUSH
50931: LD_VAR 0 8
50935: PPUSH
50936: LD_VAR 0 9
50940: PUSH
50941: LD_VAR 0 10
50945: PLUS
50946: PPUSH
50947: CALL_OW 273
50951: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
50952: LD_VAR 0 5
50956: PPUSH
50957: LD_VAR 0 7
50961: PPUSH
50962: CALL_OW 488
50966: PUSH
50967: LD_VAR 0 5
50971: PPUSH
50972: LD_VAR 0 7
50976: PPUSH
50977: CALL_OW 428
50981: PPUSH
50982: CALL_OW 247
50986: PUSH
50987: LD_INT 3
50989: PUSH
50990: LD_INT 2
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: IN
50997: NOT
50998: AND
50999: IFFALSE 51043
// begin ComMoveXY ( unit , _x , _y ) ;
51001: LD_VAR 0 1
51005: PPUSH
51006: LD_VAR 0 5
51010: PPUSH
51011: LD_VAR 0 7
51015: PPUSH
51016: CALL_OW 111
// result := [ _x , _y ] ;
51020: LD_ADDR_VAR 0 3
51024: PUSH
51025: LD_VAR 0 5
51029: PUSH
51030: LD_VAR 0 7
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: ST_TO_ADDR
// exit ;
51039: POP
51040: POP
51041: GO 51047
// end ; end ;
51043: GO 50887
51045: POP
51046: POP
// end ;
51047: LD_VAR 0 3
51051: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
51052: LD_INT 0
51054: PPUSH
51055: PPUSH
51056: PPUSH
// result := 0 ;
51057: LD_ADDR_VAR 0 3
51061: PUSH
51062: LD_INT 0
51064: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
51065: LD_VAR 0 1
51069: PUSH
51070: LD_INT 0
51072: LESS
51073: PUSH
51074: LD_VAR 0 1
51078: PUSH
51079: LD_INT 8
51081: GREATER
51082: OR
51083: PUSH
51084: LD_VAR 0 2
51088: PUSH
51089: LD_INT 0
51091: LESS
51092: OR
51093: PUSH
51094: LD_VAR 0 2
51098: PUSH
51099: LD_INT 8
51101: GREATER
51102: OR
51103: IFFALSE 51107
// exit ;
51105: GO 51182
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
51107: LD_ADDR_VAR 0 4
51111: PUSH
51112: LD_INT 22
51114: PUSH
51115: LD_VAR 0 2
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PPUSH
51124: CALL_OW 69
51128: PUSH
51129: FOR_IN
51130: IFFALSE 51180
// begin un := UnitShoot ( i ) ;
51132: LD_ADDR_VAR 0 5
51136: PUSH
51137: LD_VAR 0 4
51141: PPUSH
51142: CALL_OW 504
51146: ST_TO_ADDR
// if GetSide ( un ) = side1 then
51147: LD_VAR 0 5
51151: PPUSH
51152: CALL_OW 255
51156: PUSH
51157: LD_VAR 0 1
51161: EQUAL
51162: IFFALSE 51178
// begin result := un ;
51164: LD_ADDR_VAR 0 3
51168: PUSH
51169: LD_VAR 0 5
51173: ST_TO_ADDR
// exit ;
51174: POP
51175: POP
51176: GO 51182
// end ; end ;
51178: GO 51129
51180: POP
51181: POP
// end ;
51182: LD_VAR 0 3
51186: RET
// export function GetCargoBay ( units ) ; begin
51187: LD_INT 0
51189: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
51190: LD_ADDR_VAR 0 2
51194: PUSH
51195: LD_VAR 0 1
51199: PPUSH
51200: LD_INT 2
51202: PUSH
51203: LD_INT 34
51205: PUSH
51206: LD_INT 12
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 34
51215: PUSH
51216: LD_INT 51
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 34
51225: PUSH
51226: LD_INT 32
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 34
51235: PUSH
51236: LD_EXP 99
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: PPUSH
51252: CALL_OW 72
51256: ST_TO_ADDR
// end ;
51257: LD_VAR 0 2
51261: RET
// export function Negate ( value ) ; begin
51262: LD_INT 0
51264: PPUSH
// result := not value ;
51265: LD_ADDR_VAR 0 2
51269: PUSH
51270: LD_VAR 0 1
51274: NOT
51275: ST_TO_ADDR
// end ;
51276: LD_VAR 0 2
51280: RET
// export function Inc ( value ) ; begin
51281: LD_INT 0
51283: PPUSH
// result := value + 1 ;
51284: LD_ADDR_VAR 0 2
51288: PUSH
51289: LD_VAR 0 1
51293: PUSH
51294: LD_INT 1
51296: PLUS
51297: ST_TO_ADDR
// end ;
51298: LD_VAR 0 2
51302: RET
// export function Dec ( value ) ; begin
51303: LD_INT 0
51305: PPUSH
// result := value - 1 ;
51306: LD_ADDR_VAR 0 2
51310: PUSH
51311: LD_VAR 0 1
51315: PUSH
51316: LD_INT 1
51318: MINUS
51319: ST_TO_ADDR
// end ;
51320: LD_VAR 0 2
51324: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
51325: LD_INT 0
51327: PPUSH
51328: PPUSH
51329: PPUSH
51330: PPUSH
51331: PPUSH
51332: PPUSH
51333: PPUSH
51334: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
51335: LD_VAR 0 1
51339: PPUSH
51340: LD_VAR 0 2
51344: PPUSH
51345: CALL_OW 488
51349: NOT
51350: PUSH
51351: LD_VAR 0 3
51355: PPUSH
51356: LD_VAR 0 4
51360: PPUSH
51361: CALL_OW 488
51365: NOT
51366: OR
51367: IFFALSE 51380
// begin result := - 1 ;
51369: LD_ADDR_VAR 0 5
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: ST_TO_ADDR
// exit ;
51378: GO 51615
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
51380: LD_ADDR_VAR 0 12
51384: PUSH
51385: LD_VAR 0 1
51389: PPUSH
51390: LD_VAR 0 2
51394: PPUSH
51395: LD_VAR 0 3
51399: PPUSH
51400: LD_VAR 0 4
51404: PPUSH
51405: CALL 50463 0 4
51409: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
51410: LD_ADDR_VAR 0 11
51414: PUSH
51415: LD_VAR 0 1
51419: PPUSH
51420: LD_VAR 0 2
51424: PPUSH
51425: LD_VAR 0 12
51429: PUSH
51430: LD_INT 1
51432: ARRAY
51433: PPUSH
51434: LD_VAR 0 12
51438: PUSH
51439: LD_INT 2
51441: ARRAY
51442: PPUSH
51443: CALL_OW 298
51447: ST_TO_ADDR
// distance := 9999 ;
51448: LD_ADDR_VAR 0 10
51452: PUSH
51453: LD_INT 9999
51455: ST_TO_ADDR
// for i := 0 to 5 do
51456: LD_ADDR_VAR 0 6
51460: PUSH
51461: DOUBLE
51462: LD_INT 0
51464: DEC
51465: ST_TO_ADDR
51466: LD_INT 5
51468: PUSH
51469: FOR_TO
51470: IFFALSE 51613
// begin _x := ShiftX ( x1 , i , centerDist ) ;
51472: LD_ADDR_VAR 0 7
51476: PUSH
51477: LD_VAR 0 1
51481: PPUSH
51482: LD_VAR 0 6
51486: PPUSH
51487: LD_VAR 0 11
51491: PPUSH
51492: CALL_OW 272
51496: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
51497: LD_ADDR_VAR 0 8
51501: PUSH
51502: LD_VAR 0 2
51506: PPUSH
51507: LD_VAR 0 6
51511: PPUSH
51512: LD_VAR 0 11
51516: PPUSH
51517: CALL_OW 273
51521: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51522: LD_VAR 0 7
51526: PPUSH
51527: LD_VAR 0 8
51531: PPUSH
51532: CALL_OW 488
51536: NOT
51537: IFFALSE 51541
// continue ;
51539: GO 51469
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
51541: LD_ADDR_VAR 0 9
51545: PUSH
51546: LD_VAR 0 12
51550: PUSH
51551: LD_INT 1
51553: ARRAY
51554: PPUSH
51555: LD_VAR 0 12
51559: PUSH
51560: LD_INT 2
51562: ARRAY
51563: PPUSH
51564: LD_VAR 0 7
51568: PPUSH
51569: LD_VAR 0 8
51573: PPUSH
51574: CALL_OW 298
51578: ST_TO_ADDR
// if tmp < distance then
51579: LD_VAR 0 9
51583: PUSH
51584: LD_VAR 0 10
51588: LESS
51589: IFFALSE 51611
// begin result := i ;
51591: LD_ADDR_VAR 0 5
51595: PUSH
51596: LD_VAR 0 6
51600: ST_TO_ADDR
// distance := tmp ;
51601: LD_ADDR_VAR 0 10
51605: PUSH
51606: LD_VAR 0 9
51610: ST_TO_ADDR
// end ; end ;
51611: GO 51469
51613: POP
51614: POP
// end ;
51615: LD_VAR 0 5
51619: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51620: LD_INT 0
51622: PPUSH
51623: PPUSH
// if not driver or not IsInUnit ( driver ) then
51624: LD_VAR 0 1
51628: NOT
51629: PUSH
51630: LD_VAR 0 1
51634: PPUSH
51635: CALL_OW 310
51639: NOT
51640: OR
51641: IFFALSE 51645
// exit ;
51643: GO 51735
// vehicle := IsInUnit ( driver ) ;
51645: LD_ADDR_VAR 0 3
51649: PUSH
51650: LD_VAR 0 1
51654: PPUSH
51655: CALL_OW 310
51659: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51660: LD_VAR 0 1
51664: PPUSH
51665: LD_STRING \
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: LD_INT 0
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: LD_INT 0
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: PUSH
51695: LD_STRING E
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: LD_VAR 0 3
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PPUSH
51731: CALL_OW 446
// end ;
51735: LD_VAR 0 2
51739: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51740: LD_INT 0
51742: PPUSH
51743: PPUSH
// if not driver or not IsInUnit ( driver ) then
51744: LD_VAR 0 1
51748: NOT
51749: PUSH
51750: LD_VAR 0 1
51754: PPUSH
51755: CALL_OW 310
51759: NOT
51760: OR
51761: IFFALSE 51765
// exit ;
51763: GO 51855
// vehicle := IsInUnit ( driver ) ;
51765: LD_ADDR_VAR 0 3
51769: PUSH
51770: LD_VAR 0 1
51774: PPUSH
51775: CALL_OW 310
51779: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51780: LD_VAR 0 1
51784: PPUSH
51785: LD_STRING \
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: PUSH
51815: LD_STRING E
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: LD_INT 0
51823: PUSH
51824: LD_VAR 0 3
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PPUSH
51851: CALL_OW 447
// end ;
51855: LD_VAR 0 2
51859: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
51860: LD_INT 0
51862: PPUSH
51863: PPUSH
51864: PPUSH
// tmp := [ ] ;
51865: LD_ADDR_VAR 0 5
51869: PUSH
51870: EMPTY
51871: ST_TO_ADDR
// for i in units do
51872: LD_ADDR_VAR 0 4
51876: PUSH
51877: LD_VAR 0 1
51881: PUSH
51882: FOR_IN
51883: IFFALSE 51921
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
51885: LD_ADDR_VAR 0 5
51889: PUSH
51890: LD_VAR 0 5
51894: PPUSH
51895: LD_VAR 0 5
51899: PUSH
51900: LD_INT 1
51902: PLUS
51903: PPUSH
51904: LD_VAR 0 4
51908: PPUSH
51909: CALL_OW 256
51913: PPUSH
51914: CALL_OW 2
51918: ST_TO_ADDR
51919: GO 51882
51921: POP
51922: POP
// if not tmp then
51923: LD_VAR 0 5
51927: NOT
51928: IFFALSE 51932
// exit ;
51930: GO 51980
// if asc then
51932: LD_VAR 0 2
51936: IFFALSE 51960
// result := SortListByListAsc ( units , tmp ) else
51938: LD_ADDR_VAR 0 3
51942: PUSH
51943: LD_VAR 0 1
51947: PPUSH
51948: LD_VAR 0 5
51952: PPUSH
51953: CALL_OW 76
51957: ST_TO_ADDR
51958: GO 51980
// result := SortListByListDesc ( units , tmp ) ;
51960: LD_ADDR_VAR 0 3
51964: PUSH
51965: LD_VAR 0 1
51969: PPUSH
51970: LD_VAR 0 5
51974: PPUSH
51975: CALL_OW 77
51979: ST_TO_ADDR
// end ;
51980: LD_VAR 0 3
51984: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
51985: LD_INT 0
51987: PPUSH
51988: PPUSH
// task := GetTaskList ( mech ) ;
51989: LD_ADDR_VAR 0 4
51993: PUSH
51994: LD_VAR 0 1
51998: PPUSH
51999: CALL_OW 437
52003: ST_TO_ADDR
// if not task then
52004: LD_VAR 0 4
52008: NOT
52009: IFFALSE 52013
// exit ;
52011: GO 52055
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
52013: LD_ADDR_VAR 0 3
52017: PUSH
52018: LD_VAR 0 4
52022: PUSH
52023: LD_INT 1
52025: ARRAY
52026: PUSH
52027: LD_INT 1
52029: ARRAY
52030: PUSH
52031: LD_STRING r
52033: EQUAL
52034: PUSH
52035: LD_VAR 0 4
52039: PUSH
52040: LD_INT 1
52042: ARRAY
52043: PUSH
52044: LD_INT 4
52046: ARRAY
52047: PUSH
52048: LD_VAR 0 2
52052: EQUAL
52053: AND
52054: ST_TO_ADDR
// end ;
52055: LD_VAR 0 3
52059: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
52060: LD_INT 0
52062: PPUSH
// SetDir ( unit , d ) ;
52063: LD_VAR 0 1
52067: PPUSH
52068: LD_VAR 0 4
52072: PPUSH
52073: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
52077: LD_VAR 0 1
52081: PPUSH
52082: LD_VAR 0 2
52086: PPUSH
52087: LD_VAR 0 3
52091: PPUSH
52092: LD_VAR 0 5
52096: PPUSH
52097: CALL_OW 48
// end ;
52101: LD_VAR 0 6
52105: RET
// export function ToNaturalNumber ( number ) ; begin
52106: LD_INT 0
52108: PPUSH
// result := number div 1 ;
52109: LD_ADDR_VAR 0 2
52113: PUSH
52114: LD_VAR 0 1
52118: PUSH
52119: LD_INT 1
52121: DIV
52122: ST_TO_ADDR
// if number < 0 then
52123: LD_VAR 0 1
52127: PUSH
52128: LD_INT 0
52130: LESS
52131: IFFALSE 52141
// result := 0 ;
52133: LD_ADDR_VAR 0 2
52137: PUSH
52138: LD_INT 0
52140: ST_TO_ADDR
// end ;
52141: LD_VAR 0 2
52145: RET
// export function SortByClass ( units , class ) ; var un ; begin
52146: LD_INT 0
52148: PPUSH
52149: PPUSH
// if not units or not class then
52150: LD_VAR 0 1
52154: NOT
52155: PUSH
52156: LD_VAR 0 2
52160: NOT
52161: OR
52162: IFFALSE 52166
// exit ;
52164: GO 52261
// result := [ ] ;
52166: LD_ADDR_VAR 0 3
52170: PUSH
52171: EMPTY
52172: ST_TO_ADDR
// for un in units do
52173: LD_ADDR_VAR 0 4
52177: PUSH
52178: LD_VAR 0 1
52182: PUSH
52183: FOR_IN
52184: IFFALSE 52259
// if GetClass ( un ) = class then
52186: LD_VAR 0 4
52190: PPUSH
52191: CALL_OW 257
52195: PUSH
52196: LD_VAR 0 2
52200: EQUAL
52201: IFFALSE 52228
// result := Insert ( result , 1 , un ) else
52203: LD_ADDR_VAR 0 3
52207: PUSH
52208: LD_VAR 0 3
52212: PPUSH
52213: LD_INT 1
52215: PPUSH
52216: LD_VAR 0 4
52220: PPUSH
52221: CALL_OW 2
52225: ST_TO_ADDR
52226: GO 52257
// result := Replace ( result , result + 1 , un ) ;
52228: LD_ADDR_VAR 0 3
52232: PUSH
52233: LD_VAR 0 3
52237: PPUSH
52238: LD_VAR 0 3
52242: PUSH
52243: LD_INT 1
52245: PLUS
52246: PPUSH
52247: LD_VAR 0 4
52251: PPUSH
52252: CALL_OW 1
52256: ST_TO_ADDR
52257: GO 52183
52259: POP
52260: POP
// end ;
52261: LD_VAR 0 3
52265: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
52266: LD_INT 0
52268: PPUSH
52269: PPUSH
52270: PPUSH
52271: PPUSH
52272: PPUSH
52273: PPUSH
52274: PPUSH
// result := [ ] ;
52275: LD_ADDR_VAR 0 4
52279: PUSH
52280: EMPTY
52281: ST_TO_ADDR
// if x - r < 0 then
52282: LD_VAR 0 1
52286: PUSH
52287: LD_VAR 0 3
52291: MINUS
52292: PUSH
52293: LD_INT 0
52295: LESS
52296: IFFALSE 52308
// min_x := 0 else
52298: LD_ADDR_VAR 0 8
52302: PUSH
52303: LD_INT 0
52305: ST_TO_ADDR
52306: GO 52324
// min_x := x - r ;
52308: LD_ADDR_VAR 0 8
52312: PUSH
52313: LD_VAR 0 1
52317: PUSH
52318: LD_VAR 0 3
52322: MINUS
52323: ST_TO_ADDR
// if y - r < 0 then
52324: LD_VAR 0 2
52328: PUSH
52329: LD_VAR 0 3
52333: MINUS
52334: PUSH
52335: LD_INT 0
52337: LESS
52338: IFFALSE 52350
// min_y := 0 else
52340: LD_ADDR_VAR 0 7
52344: PUSH
52345: LD_INT 0
52347: ST_TO_ADDR
52348: GO 52366
// min_y := y - r ;
52350: LD_ADDR_VAR 0 7
52354: PUSH
52355: LD_VAR 0 2
52359: PUSH
52360: LD_VAR 0 3
52364: MINUS
52365: ST_TO_ADDR
// max_x := x + r ;
52366: LD_ADDR_VAR 0 9
52370: PUSH
52371: LD_VAR 0 1
52375: PUSH
52376: LD_VAR 0 3
52380: PLUS
52381: ST_TO_ADDR
// max_y := y + r ;
52382: LD_ADDR_VAR 0 10
52386: PUSH
52387: LD_VAR 0 2
52391: PUSH
52392: LD_VAR 0 3
52396: PLUS
52397: ST_TO_ADDR
// for _x = min_x to max_x do
52398: LD_ADDR_VAR 0 5
52402: PUSH
52403: DOUBLE
52404: LD_VAR 0 8
52408: DEC
52409: ST_TO_ADDR
52410: LD_VAR 0 9
52414: PUSH
52415: FOR_TO
52416: IFFALSE 52517
// for _y = min_y to max_y do
52418: LD_ADDR_VAR 0 6
52422: PUSH
52423: DOUBLE
52424: LD_VAR 0 7
52428: DEC
52429: ST_TO_ADDR
52430: LD_VAR 0 10
52434: PUSH
52435: FOR_TO
52436: IFFALSE 52513
// begin if not ValidHex ( _x , _y ) then
52438: LD_VAR 0 5
52442: PPUSH
52443: LD_VAR 0 6
52447: PPUSH
52448: CALL_OW 488
52452: NOT
52453: IFFALSE 52457
// continue ;
52455: GO 52435
// if GetResourceTypeXY ( _x , _y ) then
52457: LD_VAR 0 5
52461: PPUSH
52462: LD_VAR 0 6
52466: PPUSH
52467: CALL_OW 283
52471: IFFALSE 52511
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
52473: LD_ADDR_VAR 0 4
52477: PUSH
52478: LD_VAR 0 4
52482: PPUSH
52483: LD_VAR 0 4
52487: PUSH
52488: LD_INT 1
52490: PLUS
52491: PPUSH
52492: LD_VAR 0 5
52496: PUSH
52497: LD_VAR 0 6
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PPUSH
52506: CALL_OW 1
52510: ST_TO_ADDR
// end ;
52511: GO 52435
52513: POP
52514: POP
52515: GO 52415
52517: POP
52518: POP
// end ;
52519: LD_VAR 0 4
52523: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
52524: LD_INT 0
52526: PPUSH
52527: PPUSH
52528: PPUSH
52529: PPUSH
52530: PPUSH
52531: PPUSH
52532: PPUSH
52533: PPUSH
// if not units then
52534: LD_VAR 0 1
52538: NOT
52539: IFFALSE 52543
// exit ;
52541: GO 53054
// result := UnitFilter ( units , [ f_ok ] ) ;
52543: LD_ADDR_VAR 0 3
52547: PUSH
52548: LD_VAR 0 1
52552: PPUSH
52553: LD_INT 50
52555: PUSH
52556: EMPTY
52557: LIST
52558: PPUSH
52559: CALL_OW 72
52563: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
52564: LD_ADDR_VAR 0 8
52568: PUSH
52569: LD_VAR 0 1
52573: PUSH
52574: LD_INT 1
52576: ARRAY
52577: PPUSH
52578: CALL_OW 255
52582: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
52583: LD_ADDR_VAR 0 10
52587: PUSH
52588: LD_INT 29
52590: PUSH
52591: LD_EXP 102
52595: PUSH
52596: LD_INT 49
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: LIST
52603: ST_TO_ADDR
// if not result then
52604: LD_VAR 0 3
52608: NOT
52609: IFFALSE 52613
// exit ;
52611: GO 53054
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
52613: LD_ADDR_VAR 0 5
52617: PUSH
52618: LD_INT 81
52620: PUSH
52621: LD_VAR 0 8
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PPUSH
52630: CALL_OW 69
52634: ST_TO_ADDR
// for i in result do
52635: LD_ADDR_VAR 0 4
52639: PUSH
52640: LD_VAR 0 3
52644: PUSH
52645: FOR_IN
52646: IFFALSE 53052
// begin tag := GetTag ( i ) + 1 ;
52648: LD_ADDR_VAR 0 9
52652: PUSH
52653: LD_VAR 0 4
52657: PPUSH
52658: CALL_OW 110
52662: PUSH
52663: LD_INT 1
52665: PLUS
52666: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
52667: LD_ADDR_VAR 0 7
52671: PUSH
52672: LD_VAR 0 4
52676: PPUSH
52677: CALL_OW 250
52681: PPUSH
52682: LD_VAR 0 4
52686: PPUSH
52687: CALL_OW 251
52691: PPUSH
52692: LD_INT 6
52694: PPUSH
52695: CALL 52266 0 3
52699: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
52700: LD_VAR 0 7
52704: PUSH
52705: LD_VAR 0 4
52709: PPUSH
52710: CALL_OW 264
52714: PUSH
52715: LD_VAR 0 10
52719: IN
52720: NOT
52721: AND
52722: IFFALSE 52761
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
52724: LD_VAR 0 4
52728: PPUSH
52729: LD_VAR 0 7
52733: PUSH
52734: LD_INT 1
52736: ARRAY
52737: PUSH
52738: LD_INT 1
52740: ARRAY
52741: PPUSH
52742: LD_VAR 0 7
52746: PUSH
52747: LD_INT 1
52749: ARRAY
52750: PUSH
52751: LD_INT 2
52753: ARRAY
52754: PPUSH
52755: CALL_OW 116
52759: GO 53050
// if path > tag then
52761: LD_VAR 0 2
52765: PUSH
52766: LD_VAR 0 9
52770: GREATER
52771: IFFALSE 52979
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
52773: LD_ADDR_VAR 0 6
52777: PUSH
52778: LD_VAR 0 5
52782: PPUSH
52783: LD_INT 91
52785: PUSH
52786: LD_VAR 0 4
52790: PUSH
52791: LD_INT 12
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: LIST
52798: PPUSH
52799: CALL_OW 72
52803: ST_TO_ADDR
// if nearEnemy then
52804: LD_VAR 0 6
52808: IFFALSE 52877
// begin if GetWeapon ( i ) = ru_time_lapser then
52810: LD_VAR 0 4
52814: PPUSH
52815: CALL_OW 264
52819: PUSH
52820: LD_INT 49
52822: EQUAL
52823: IFFALSE 52851
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
52825: LD_VAR 0 4
52829: PPUSH
52830: LD_VAR 0 6
52834: PPUSH
52835: LD_VAR 0 4
52839: PPUSH
52840: CALL_OW 74
52844: PPUSH
52845: CALL_OW 112
52849: GO 52875
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
52851: LD_VAR 0 4
52855: PPUSH
52856: LD_VAR 0 6
52860: PPUSH
52861: LD_VAR 0 4
52865: PPUSH
52866: CALL_OW 74
52870: PPUSH
52871: CALL_OW 115
// end else
52875: GO 52977
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52877: LD_VAR 0 4
52881: PPUSH
52882: LD_VAR 0 2
52886: PUSH
52887: LD_VAR 0 9
52891: ARRAY
52892: PUSH
52893: LD_INT 1
52895: ARRAY
52896: PPUSH
52897: LD_VAR 0 2
52901: PUSH
52902: LD_VAR 0 9
52906: ARRAY
52907: PUSH
52908: LD_INT 2
52910: ARRAY
52911: PPUSH
52912: CALL_OW 297
52916: PUSH
52917: LD_INT 6
52919: GREATER
52920: IFFALSE 52963
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
52922: LD_VAR 0 4
52926: PPUSH
52927: LD_VAR 0 2
52931: PUSH
52932: LD_VAR 0 9
52936: ARRAY
52937: PUSH
52938: LD_INT 1
52940: ARRAY
52941: PPUSH
52942: LD_VAR 0 2
52946: PUSH
52947: LD_VAR 0 9
52951: ARRAY
52952: PUSH
52953: LD_INT 2
52955: ARRAY
52956: PPUSH
52957: CALL_OW 114
52961: GO 52977
// SetTag ( i , tag ) ;
52963: LD_VAR 0 4
52967: PPUSH
52968: LD_VAR 0 9
52972: PPUSH
52973: CALL_OW 109
// end else
52977: GO 53050
// if enemy then
52979: LD_VAR 0 5
52983: IFFALSE 53050
// begin if GetWeapon ( i ) = ru_time_lapser then
52985: LD_VAR 0 4
52989: PPUSH
52990: CALL_OW 264
52994: PUSH
52995: LD_INT 49
52997: EQUAL
52998: IFFALSE 53026
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
53000: LD_VAR 0 4
53004: PPUSH
53005: LD_VAR 0 5
53009: PPUSH
53010: LD_VAR 0 4
53014: PPUSH
53015: CALL_OW 74
53019: PPUSH
53020: CALL_OW 112
53024: GO 53050
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
53026: LD_VAR 0 4
53030: PPUSH
53031: LD_VAR 0 5
53035: PPUSH
53036: LD_VAR 0 4
53040: PPUSH
53041: CALL_OW 74
53045: PPUSH
53046: CALL_OW 115
// end ; end ;
53050: GO 52645
53052: POP
53053: POP
// end ;
53054: LD_VAR 0 3
53058: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
53059: LD_INT 0
53061: PPUSH
53062: PPUSH
53063: PPUSH
// if not unit or IsInUnit ( unit ) then
53064: LD_VAR 0 1
53068: NOT
53069: PUSH
53070: LD_VAR 0 1
53074: PPUSH
53075: CALL_OW 310
53079: OR
53080: IFFALSE 53084
// exit ;
53082: GO 53175
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
53084: LD_ADDR_VAR 0 4
53088: PUSH
53089: LD_VAR 0 1
53093: PPUSH
53094: CALL_OW 250
53098: PPUSH
53099: LD_VAR 0 2
53103: PPUSH
53104: LD_INT 1
53106: PPUSH
53107: CALL_OW 272
53111: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
53112: LD_ADDR_VAR 0 5
53116: PUSH
53117: LD_VAR 0 1
53121: PPUSH
53122: CALL_OW 251
53126: PPUSH
53127: LD_VAR 0 2
53131: PPUSH
53132: LD_INT 1
53134: PPUSH
53135: CALL_OW 273
53139: ST_TO_ADDR
// if ValidHex ( x , y ) then
53140: LD_VAR 0 4
53144: PPUSH
53145: LD_VAR 0 5
53149: PPUSH
53150: CALL_OW 488
53154: IFFALSE 53175
// ComTurnXY ( unit , x , y ) ;
53156: LD_VAR 0 1
53160: PPUSH
53161: LD_VAR 0 4
53165: PPUSH
53166: LD_VAR 0 5
53170: PPUSH
53171: CALL_OW 118
// end ;
53175: LD_VAR 0 3
53179: RET
// export function SeeUnits ( side , units ) ; var i ; begin
53180: LD_INT 0
53182: PPUSH
53183: PPUSH
// result := false ;
53184: LD_ADDR_VAR 0 3
53188: PUSH
53189: LD_INT 0
53191: ST_TO_ADDR
// if not units then
53192: LD_VAR 0 2
53196: NOT
53197: IFFALSE 53201
// exit ;
53199: GO 53246
// for i in units do
53201: LD_ADDR_VAR 0 4
53205: PUSH
53206: LD_VAR 0 2
53210: PUSH
53211: FOR_IN
53212: IFFALSE 53244
// if See ( side , i ) then
53214: LD_VAR 0 1
53218: PPUSH
53219: LD_VAR 0 4
53223: PPUSH
53224: CALL_OW 292
53228: IFFALSE 53242
// begin result := true ;
53230: LD_ADDR_VAR 0 3
53234: PUSH
53235: LD_INT 1
53237: ST_TO_ADDR
// exit ;
53238: POP
53239: POP
53240: GO 53246
// end ;
53242: GO 53211
53244: POP
53245: POP
// end ;
53246: LD_VAR 0 3
53250: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
53251: LD_INT 0
53253: PPUSH
53254: PPUSH
53255: PPUSH
53256: PPUSH
// if not unit or not points then
53257: LD_VAR 0 1
53261: NOT
53262: PUSH
53263: LD_VAR 0 2
53267: NOT
53268: OR
53269: IFFALSE 53273
// exit ;
53271: GO 53363
// dist := 99999 ;
53273: LD_ADDR_VAR 0 5
53277: PUSH
53278: LD_INT 99999
53280: ST_TO_ADDR
// for i in points do
53281: LD_ADDR_VAR 0 4
53285: PUSH
53286: LD_VAR 0 2
53290: PUSH
53291: FOR_IN
53292: IFFALSE 53361
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
53294: LD_ADDR_VAR 0 6
53298: PUSH
53299: LD_VAR 0 1
53303: PPUSH
53304: LD_VAR 0 4
53308: PUSH
53309: LD_INT 1
53311: ARRAY
53312: PPUSH
53313: LD_VAR 0 4
53317: PUSH
53318: LD_INT 2
53320: ARRAY
53321: PPUSH
53322: CALL_OW 297
53326: ST_TO_ADDR
// if tmpDist < dist then
53327: LD_VAR 0 6
53331: PUSH
53332: LD_VAR 0 5
53336: LESS
53337: IFFALSE 53359
// begin result := i ;
53339: LD_ADDR_VAR 0 3
53343: PUSH
53344: LD_VAR 0 4
53348: ST_TO_ADDR
// dist := tmpDist ;
53349: LD_ADDR_VAR 0 5
53353: PUSH
53354: LD_VAR 0 6
53358: ST_TO_ADDR
// end ; end ;
53359: GO 53291
53361: POP
53362: POP
// end ;
53363: LD_VAR 0 3
53367: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
53368: LD_INT 0
53370: PPUSH
// uc_side := side ;
53371: LD_ADDR_OWVAR 20
53375: PUSH
53376: LD_VAR 0 1
53380: ST_TO_ADDR
// uc_nation := 3 ;
53381: LD_ADDR_OWVAR 21
53385: PUSH
53386: LD_INT 3
53388: ST_TO_ADDR
// vc_chassis := 25 ;
53389: LD_ADDR_OWVAR 37
53393: PUSH
53394: LD_INT 25
53396: ST_TO_ADDR
// vc_engine := engine_siberite ;
53397: LD_ADDR_OWVAR 39
53401: PUSH
53402: LD_INT 3
53404: ST_TO_ADDR
// vc_control := control_computer ;
53405: LD_ADDR_OWVAR 38
53409: PUSH
53410: LD_INT 3
53412: ST_TO_ADDR
// vc_weapon := 59 ;
53413: LD_ADDR_OWVAR 40
53417: PUSH
53418: LD_INT 59
53420: ST_TO_ADDR
// result := CreateVehicle ;
53421: LD_ADDR_VAR 0 5
53425: PUSH
53426: CALL_OW 45
53430: ST_TO_ADDR
// SetDir ( result , d ) ;
53431: LD_VAR 0 5
53435: PPUSH
53436: LD_VAR 0 4
53440: PPUSH
53441: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
53445: LD_VAR 0 5
53449: PPUSH
53450: LD_VAR 0 2
53454: PPUSH
53455: LD_VAR 0 3
53459: PPUSH
53460: LD_INT 0
53462: PPUSH
53463: CALL_OW 48
// end ;
53467: LD_VAR 0 5
53471: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
53472: LD_INT 0
53474: PPUSH
53475: PPUSH
53476: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
53477: LD_ADDR_VAR 0 2
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
53500: LD_VAR 0 1
53504: NOT
53505: PUSH
53506: LD_VAR 0 1
53510: PPUSH
53511: CALL_OW 264
53515: PUSH
53516: LD_INT 12
53518: PUSH
53519: LD_INT 51
53521: PUSH
53522: LD_INT 32
53524: PUSH
53525: LD_EXP 99
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: IN
53536: NOT
53537: OR
53538: IFFALSE 53542
// exit ;
53540: GO 53640
// for i := 1 to 3 do
53542: LD_ADDR_VAR 0 3
53546: PUSH
53547: DOUBLE
53548: LD_INT 1
53550: DEC
53551: ST_TO_ADDR
53552: LD_INT 3
53554: PUSH
53555: FOR_TO
53556: IFFALSE 53638
// begin tmp := GetCargo ( cargo , i ) ;
53558: LD_ADDR_VAR 0 4
53562: PUSH
53563: LD_VAR 0 1
53567: PPUSH
53568: LD_VAR 0 3
53572: PPUSH
53573: CALL_OW 289
53577: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
53578: LD_ADDR_VAR 0 2
53582: PUSH
53583: LD_VAR 0 2
53587: PPUSH
53588: LD_VAR 0 3
53592: PPUSH
53593: LD_VAR 0 4
53597: PPUSH
53598: CALL_OW 1
53602: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
53603: LD_ADDR_VAR 0 2
53607: PUSH
53608: LD_VAR 0 2
53612: PPUSH
53613: LD_INT 4
53615: PPUSH
53616: LD_VAR 0 2
53620: PUSH
53621: LD_INT 4
53623: ARRAY
53624: PUSH
53625: LD_VAR 0 4
53629: PLUS
53630: PPUSH
53631: CALL_OW 1
53635: ST_TO_ADDR
// end ;
53636: GO 53555
53638: POP
53639: POP
// end ;
53640: LD_VAR 0 2
53644: RET
// export function Length ( array ) ; begin
53645: LD_INT 0
53647: PPUSH
// result := array + 0 ;
53648: LD_ADDR_VAR 0 2
53652: PUSH
53653: LD_VAR 0 1
53657: PUSH
53658: LD_INT 0
53660: PLUS
53661: ST_TO_ADDR
// end ;
53662: LD_VAR 0 2
53666: RET
// export function PrepareBuilding ( side , nation , level , typ , x , y , dir , isInBuildingStage ) ; begin
53667: LD_INT 0
53669: PPUSH
// uc_side := side ;
53670: LD_ADDR_OWVAR 20
53674: PUSH
53675: LD_VAR 0 1
53679: ST_TO_ADDR
// uc_nation := nation ;
53680: LD_ADDR_OWVAR 21
53684: PUSH
53685: LD_VAR 0 2
53689: ST_TO_ADDR
// bc_level := level ;
53690: LD_ADDR_OWVAR 43
53694: PUSH
53695: LD_VAR 0 3
53699: ST_TO_ADDR
// bc_type := typ ;
53700: LD_ADDR_OWVAR 42
53704: PUSH
53705: LD_VAR 0 4
53709: ST_TO_ADDR
// bc_kind1 := - 1 ;
53710: LD_ADDR_OWVAR 44
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: ST_TO_ADDR
// bc_kind2 := - 1 ;
53719: LD_ADDR_OWVAR 45
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: ST_TO_ADDR
// result := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
53728: LD_ADDR_VAR 0 9
53732: PUSH
53733: LD_VAR 0 5
53737: PPUSH
53738: LD_VAR 0 6
53742: PPUSH
53743: LD_VAR 0 7
53747: PPUSH
53748: CALL_OW 47
53752: ST_TO_ADDR
// if isInBuildingStage then
53753: LD_VAR 0 8
53757: IFFALSE 53768
// SetBuildingStage ( result ) ;
53759: LD_VAR 0 9
53763: PPUSH
53764: CALL_OW 593
// end ;
53768: LD_VAR 0 9
53772: RET
// export function SayNoFaceRadio ( un , ident ) ; begin
53773: LD_INT 0
53775: PPUSH
// SayEx ( un , ident , false , true , true , false ) ;
53776: LD_VAR 0 1
53780: PPUSH
53781: LD_VAR 0 2
53785: PPUSH
53786: LD_INT 0
53788: PPUSH
53789: LD_INT 1
53791: PPUSH
53792: LD_INT 1
53794: PPUSH
53795: LD_INT 0
53797: PPUSH
53798: CALL_OW 587
// end ; end_of_file
53802: LD_VAR 0 3
53806: RET
// every 0 0$1 do
53807: GO 53809
53809: DISABLE
// begin enable ;
53810: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
53811: LD_STRING updateTimer(
53813: PUSH
53814: LD_OWVAR 1
53818: STR
53819: PUSH
53820: LD_STRING );
53822: STR
53823: PPUSH
53824: CALL_OW 559
// end ;
53828: END
// export function SOS_MapStart ( ) ; begin
53829: LD_INT 0
53831: PPUSH
// if streamModeActive then
53832: LD_EXP 118
53836: IFFALSE 53845
// DefineStreamItems ( true ) ;
53838: LD_INT 1
53840: PPUSH
53841: CALL 55495 0 1
// UpdateFactoryWaypoints ( ) ;
53845: CALL 69079 0 0
// end ;
53849: LD_VAR 0 1
53853: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
53854: LD_INT 0
53856: PPUSH
// if p2 = 100 then
53857: LD_VAR 0 2
53861: PUSH
53862: LD_INT 100
53864: EQUAL
53865: IFFALSE 54868
// begin if not StreamModeActive then
53867: LD_EXP 118
53871: NOT
53872: IFFALSE 53882
// StreamModeActive := true ;
53874: LD_ADDR_EXP 118
53878: PUSH
53879: LD_INT 1
53881: ST_TO_ADDR
// if p3 = 0 then
53882: LD_VAR 0 3
53886: PUSH
53887: LD_INT 0
53889: EQUAL
53890: IFFALSE 53896
// InitStreamMode ;
53892: CALL 55031 0 0
// if p3 = 1 then
53896: LD_VAR 0 3
53900: PUSH
53901: LD_INT 1
53903: EQUAL
53904: IFFALSE 53914
// sRocket := true ;
53906: LD_ADDR_EXP 123
53910: PUSH
53911: LD_INT 1
53913: ST_TO_ADDR
// if p3 = 2 then
53914: LD_VAR 0 3
53918: PUSH
53919: LD_INT 2
53921: EQUAL
53922: IFFALSE 53932
// sSpeed := true ;
53924: LD_ADDR_EXP 122
53928: PUSH
53929: LD_INT 1
53931: ST_TO_ADDR
// if p3 = 3 then
53932: LD_VAR 0 3
53936: PUSH
53937: LD_INT 3
53939: EQUAL
53940: IFFALSE 53950
// sEngine := true ;
53942: LD_ADDR_EXP 124
53946: PUSH
53947: LD_INT 1
53949: ST_TO_ADDR
// if p3 = 4 then
53950: LD_VAR 0 3
53954: PUSH
53955: LD_INT 4
53957: EQUAL
53958: IFFALSE 53968
// sSpec := true ;
53960: LD_ADDR_EXP 121
53964: PUSH
53965: LD_INT 1
53967: ST_TO_ADDR
// if p3 = 5 then
53968: LD_VAR 0 3
53972: PUSH
53973: LD_INT 5
53975: EQUAL
53976: IFFALSE 53986
// sLevel := true ;
53978: LD_ADDR_EXP 125
53982: PUSH
53983: LD_INT 1
53985: ST_TO_ADDR
// if p3 = 6 then
53986: LD_VAR 0 3
53990: PUSH
53991: LD_INT 6
53993: EQUAL
53994: IFFALSE 54004
// sArmoury := true ;
53996: LD_ADDR_EXP 126
54000: PUSH
54001: LD_INT 1
54003: ST_TO_ADDR
// if p3 = 7 then
54004: LD_VAR 0 3
54008: PUSH
54009: LD_INT 7
54011: EQUAL
54012: IFFALSE 54022
// sRadar := true ;
54014: LD_ADDR_EXP 127
54018: PUSH
54019: LD_INT 1
54021: ST_TO_ADDR
// if p3 = 8 then
54022: LD_VAR 0 3
54026: PUSH
54027: LD_INT 8
54029: EQUAL
54030: IFFALSE 54040
// sBunker := true ;
54032: LD_ADDR_EXP 128
54036: PUSH
54037: LD_INT 1
54039: ST_TO_ADDR
// if p3 = 9 then
54040: LD_VAR 0 3
54044: PUSH
54045: LD_INT 9
54047: EQUAL
54048: IFFALSE 54058
// sHack := true ;
54050: LD_ADDR_EXP 129
54054: PUSH
54055: LD_INT 1
54057: ST_TO_ADDR
// if p3 = 10 then
54058: LD_VAR 0 3
54062: PUSH
54063: LD_INT 10
54065: EQUAL
54066: IFFALSE 54076
// sFire := true ;
54068: LD_ADDR_EXP 130
54072: PUSH
54073: LD_INT 1
54075: ST_TO_ADDR
// if p3 = 11 then
54076: LD_VAR 0 3
54080: PUSH
54081: LD_INT 11
54083: EQUAL
54084: IFFALSE 54094
// sRefresh := true ;
54086: LD_ADDR_EXP 131
54090: PUSH
54091: LD_INT 1
54093: ST_TO_ADDR
// if p3 = 12 then
54094: LD_VAR 0 3
54098: PUSH
54099: LD_INT 12
54101: EQUAL
54102: IFFALSE 54112
// sExp := true ;
54104: LD_ADDR_EXP 132
54108: PUSH
54109: LD_INT 1
54111: ST_TO_ADDR
// if p3 = 13 then
54112: LD_VAR 0 3
54116: PUSH
54117: LD_INT 13
54119: EQUAL
54120: IFFALSE 54130
// sDepot := true ;
54122: LD_ADDR_EXP 133
54126: PUSH
54127: LD_INT 1
54129: ST_TO_ADDR
// if p3 = 14 then
54130: LD_VAR 0 3
54134: PUSH
54135: LD_INT 14
54137: EQUAL
54138: IFFALSE 54148
// sFlag := true ;
54140: LD_ADDR_EXP 134
54144: PUSH
54145: LD_INT 1
54147: ST_TO_ADDR
// if p3 = 15 then
54148: LD_VAR 0 3
54152: PUSH
54153: LD_INT 15
54155: EQUAL
54156: IFFALSE 54166
// sKamikadze := true ;
54158: LD_ADDR_EXP 142
54162: PUSH
54163: LD_INT 1
54165: ST_TO_ADDR
// if p3 = 16 then
54166: LD_VAR 0 3
54170: PUSH
54171: LD_INT 16
54173: EQUAL
54174: IFFALSE 54184
// sTroll := true ;
54176: LD_ADDR_EXP 143
54180: PUSH
54181: LD_INT 1
54183: ST_TO_ADDR
// if p3 = 17 then
54184: LD_VAR 0 3
54188: PUSH
54189: LD_INT 17
54191: EQUAL
54192: IFFALSE 54202
// sSlow := true ;
54194: LD_ADDR_EXP 144
54198: PUSH
54199: LD_INT 1
54201: ST_TO_ADDR
// if p3 = 18 then
54202: LD_VAR 0 3
54206: PUSH
54207: LD_INT 18
54209: EQUAL
54210: IFFALSE 54220
// sLack := true ;
54212: LD_ADDR_EXP 145
54216: PUSH
54217: LD_INT 1
54219: ST_TO_ADDR
// if p3 = 19 then
54220: LD_VAR 0 3
54224: PUSH
54225: LD_INT 19
54227: EQUAL
54228: IFFALSE 54238
// sTank := true ;
54230: LD_ADDR_EXP 147
54234: PUSH
54235: LD_INT 1
54237: ST_TO_ADDR
// if p3 = 20 then
54238: LD_VAR 0 3
54242: PUSH
54243: LD_INT 20
54245: EQUAL
54246: IFFALSE 54256
// sRemote := true ;
54248: LD_ADDR_EXP 148
54252: PUSH
54253: LD_INT 1
54255: ST_TO_ADDR
// if p3 = 21 then
54256: LD_VAR 0 3
54260: PUSH
54261: LD_INT 21
54263: EQUAL
54264: IFFALSE 54274
// sPowell := true ;
54266: LD_ADDR_EXP 149
54270: PUSH
54271: LD_INT 1
54273: ST_TO_ADDR
// if p3 = 22 then
54274: LD_VAR 0 3
54278: PUSH
54279: LD_INT 22
54281: EQUAL
54282: IFFALSE 54292
// sTeleport := true ;
54284: LD_ADDR_EXP 152
54288: PUSH
54289: LD_INT 1
54291: ST_TO_ADDR
// if p3 = 23 then
54292: LD_VAR 0 3
54296: PUSH
54297: LD_INT 23
54299: EQUAL
54300: IFFALSE 54310
// sOilTower := true ;
54302: LD_ADDR_EXP 154
54306: PUSH
54307: LD_INT 1
54309: ST_TO_ADDR
// if p3 = 24 then
54310: LD_VAR 0 3
54314: PUSH
54315: LD_INT 24
54317: EQUAL
54318: IFFALSE 54328
// sShovel := true ;
54320: LD_ADDR_EXP 155
54324: PUSH
54325: LD_INT 1
54327: ST_TO_ADDR
// if p3 = 25 then
54328: LD_VAR 0 3
54332: PUSH
54333: LD_INT 25
54335: EQUAL
54336: IFFALSE 54346
// sSheik := true ;
54338: LD_ADDR_EXP 156
54342: PUSH
54343: LD_INT 1
54345: ST_TO_ADDR
// if p3 = 26 then
54346: LD_VAR 0 3
54350: PUSH
54351: LD_INT 26
54353: EQUAL
54354: IFFALSE 54364
// sEarthquake := true ;
54356: LD_ADDR_EXP 158
54360: PUSH
54361: LD_INT 1
54363: ST_TO_ADDR
// if p3 = 27 then
54364: LD_VAR 0 3
54368: PUSH
54369: LD_INT 27
54371: EQUAL
54372: IFFALSE 54382
// sAI := true ;
54374: LD_ADDR_EXP 159
54378: PUSH
54379: LD_INT 1
54381: ST_TO_ADDR
// if p3 = 28 then
54382: LD_VAR 0 3
54386: PUSH
54387: LD_INT 28
54389: EQUAL
54390: IFFALSE 54400
// sCargo := true ;
54392: LD_ADDR_EXP 162
54396: PUSH
54397: LD_INT 1
54399: ST_TO_ADDR
// if p3 = 29 then
54400: LD_VAR 0 3
54404: PUSH
54405: LD_INT 29
54407: EQUAL
54408: IFFALSE 54418
// sDLaser := true ;
54410: LD_ADDR_EXP 163
54414: PUSH
54415: LD_INT 1
54417: ST_TO_ADDR
// if p3 = 30 then
54418: LD_VAR 0 3
54422: PUSH
54423: LD_INT 30
54425: EQUAL
54426: IFFALSE 54436
// sExchange := true ;
54428: LD_ADDR_EXP 164
54432: PUSH
54433: LD_INT 1
54435: ST_TO_ADDR
// if p3 = 31 then
54436: LD_VAR 0 3
54440: PUSH
54441: LD_INT 31
54443: EQUAL
54444: IFFALSE 54454
// sFac := true ;
54446: LD_ADDR_EXP 165
54450: PUSH
54451: LD_INT 1
54453: ST_TO_ADDR
// if p3 = 32 then
54454: LD_VAR 0 3
54458: PUSH
54459: LD_INT 32
54461: EQUAL
54462: IFFALSE 54472
// sPower := true ;
54464: LD_ADDR_EXP 166
54468: PUSH
54469: LD_INT 1
54471: ST_TO_ADDR
// if p3 = 33 then
54472: LD_VAR 0 3
54476: PUSH
54477: LD_INT 33
54479: EQUAL
54480: IFFALSE 54490
// sRandom := true ;
54482: LD_ADDR_EXP 167
54486: PUSH
54487: LD_INT 1
54489: ST_TO_ADDR
// if p3 = 34 then
54490: LD_VAR 0 3
54494: PUSH
54495: LD_INT 34
54497: EQUAL
54498: IFFALSE 54508
// sShield := true ;
54500: LD_ADDR_EXP 168
54504: PUSH
54505: LD_INT 1
54507: ST_TO_ADDR
// if p3 = 35 then
54508: LD_VAR 0 3
54512: PUSH
54513: LD_INT 35
54515: EQUAL
54516: IFFALSE 54526
// sTime := true ;
54518: LD_ADDR_EXP 169
54522: PUSH
54523: LD_INT 1
54525: ST_TO_ADDR
// if p3 = 36 then
54526: LD_VAR 0 3
54530: PUSH
54531: LD_INT 36
54533: EQUAL
54534: IFFALSE 54544
// sTools := true ;
54536: LD_ADDR_EXP 170
54540: PUSH
54541: LD_INT 1
54543: ST_TO_ADDR
// if p3 = 101 then
54544: LD_VAR 0 3
54548: PUSH
54549: LD_INT 101
54551: EQUAL
54552: IFFALSE 54562
// sSold := true ;
54554: LD_ADDR_EXP 135
54558: PUSH
54559: LD_INT 1
54561: ST_TO_ADDR
// if p3 = 102 then
54562: LD_VAR 0 3
54566: PUSH
54567: LD_INT 102
54569: EQUAL
54570: IFFALSE 54580
// sDiff := true ;
54572: LD_ADDR_EXP 136
54576: PUSH
54577: LD_INT 1
54579: ST_TO_ADDR
// if p3 = 103 then
54580: LD_VAR 0 3
54584: PUSH
54585: LD_INT 103
54587: EQUAL
54588: IFFALSE 54598
// sFog := true ;
54590: LD_ADDR_EXP 139
54594: PUSH
54595: LD_INT 1
54597: ST_TO_ADDR
// if p3 = 104 then
54598: LD_VAR 0 3
54602: PUSH
54603: LD_INT 104
54605: EQUAL
54606: IFFALSE 54616
// sReset := true ;
54608: LD_ADDR_EXP 140
54612: PUSH
54613: LD_INT 1
54615: ST_TO_ADDR
// if p3 = 105 then
54616: LD_VAR 0 3
54620: PUSH
54621: LD_INT 105
54623: EQUAL
54624: IFFALSE 54634
// sSun := true ;
54626: LD_ADDR_EXP 141
54630: PUSH
54631: LD_INT 1
54633: ST_TO_ADDR
// if p3 = 106 then
54634: LD_VAR 0 3
54638: PUSH
54639: LD_INT 106
54641: EQUAL
54642: IFFALSE 54652
// sTiger := true ;
54644: LD_ADDR_EXP 137
54648: PUSH
54649: LD_INT 1
54651: ST_TO_ADDR
// if p3 = 107 then
54652: LD_VAR 0 3
54656: PUSH
54657: LD_INT 107
54659: EQUAL
54660: IFFALSE 54670
// sBomb := true ;
54662: LD_ADDR_EXP 138
54666: PUSH
54667: LD_INT 1
54669: ST_TO_ADDR
// if p3 = 108 then
54670: LD_VAR 0 3
54674: PUSH
54675: LD_INT 108
54677: EQUAL
54678: IFFALSE 54688
// sWound := true ;
54680: LD_ADDR_EXP 146
54684: PUSH
54685: LD_INT 1
54687: ST_TO_ADDR
// if p3 = 109 then
54688: LD_VAR 0 3
54692: PUSH
54693: LD_INT 109
54695: EQUAL
54696: IFFALSE 54706
// sBetray := true ;
54698: LD_ADDR_EXP 150
54702: PUSH
54703: LD_INT 1
54705: ST_TO_ADDR
// if p3 = 110 then
54706: LD_VAR 0 3
54710: PUSH
54711: LD_INT 110
54713: EQUAL
54714: IFFALSE 54724
// sContamin := true ;
54716: LD_ADDR_EXP 151
54720: PUSH
54721: LD_INT 1
54723: ST_TO_ADDR
// if p3 = 111 then
54724: LD_VAR 0 3
54728: PUSH
54729: LD_INT 111
54731: EQUAL
54732: IFFALSE 54742
// sOil := true ;
54734: LD_ADDR_EXP 153
54738: PUSH
54739: LD_INT 1
54741: ST_TO_ADDR
// if p3 = 112 then
54742: LD_VAR 0 3
54746: PUSH
54747: LD_INT 112
54749: EQUAL
54750: IFFALSE 54760
// sStu := true ;
54752: LD_ADDR_EXP 157
54756: PUSH
54757: LD_INT 1
54759: ST_TO_ADDR
// if p3 = 113 then
54760: LD_VAR 0 3
54764: PUSH
54765: LD_INT 113
54767: EQUAL
54768: IFFALSE 54778
// sBazooka := true ;
54770: LD_ADDR_EXP 160
54774: PUSH
54775: LD_INT 1
54777: ST_TO_ADDR
// if p3 = 114 then
54778: LD_VAR 0 3
54782: PUSH
54783: LD_INT 114
54785: EQUAL
54786: IFFALSE 54796
// sMortar := true ;
54788: LD_ADDR_EXP 161
54792: PUSH
54793: LD_INT 1
54795: ST_TO_ADDR
// if p3 = 115 then
54796: LD_VAR 0 3
54800: PUSH
54801: LD_INT 115
54803: EQUAL
54804: IFFALSE 54814
// sRanger := true ;
54806: LD_ADDR_EXP 171
54810: PUSH
54811: LD_INT 1
54813: ST_TO_ADDR
// if p3 = 116 then
54814: LD_VAR 0 3
54818: PUSH
54819: LD_INT 116
54821: EQUAL
54822: IFFALSE 54832
// sComputer := true ;
54824: LD_ADDR_EXP 172
54828: PUSH
54829: LD_INT 1
54831: ST_TO_ADDR
// if p3 = 117 then
54832: LD_VAR 0 3
54836: PUSH
54837: LD_INT 117
54839: EQUAL
54840: IFFALSE 54850
// s30 := true ;
54842: LD_ADDR_EXP 173
54846: PUSH
54847: LD_INT 1
54849: ST_TO_ADDR
// if p3 = 118 then
54850: LD_VAR 0 3
54854: PUSH
54855: LD_INT 118
54857: EQUAL
54858: IFFALSE 54868
// s60 := true ;
54860: LD_ADDR_EXP 174
54864: PUSH
54865: LD_INT 1
54867: ST_TO_ADDR
// end ; if p2 = 101 then
54868: LD_VAR 0 2
54872: PUSH
54873: LD_INT 101
54875: EQUAL
54876: IFFALSE 55004
// begin case p3 of 1 :
54878: LD_VAR 0 3
54882: PUSH
54883: LD_INT 1
54885: DOUBLE
54886: EQUAL
54887: IFTRUE 54891
54889: GO 54898
54891: POP
// hHackUnlimitedResources ; 2 :
54892: CALL 67102 0 0
54896: GO 55004
54898: LD_INT 2
54900: DOUBLE
54901: EQUAL
54902: IFTRUE 54906
54904: GO 54913
54906: POP
// hHackSetLevel10 ; 3 :
54907: CALL 67235 0 0
54911: GO 55004
54913: LD_INT 3
54915: DOUBLE
54916: EQUAL
54917: IFTRUE 54921
54919: GO 54928
54921: POP
// hHackSetLevel10YourUnits ; 4 :
54922: CALL 67320 0 0
54926: GO 55004
54928: LD_INT 4
54930: DOUBLE
54931: EQUAL
54932: IFTRUE 54936
54934: GO 54943
54936: POP
// hHackInvincible ; 5 :
54937: CALL 67768 0 0
54941: GO 55004
54943: LD_INT 5
54945: DOUBLE
54946: EQUAL
54947: IFTRUE 54951
54949: GO 54958
54951: POP
// hHackInvisible ; 6 :
54952: CALL 67879 0 0
54956: GO 55004
54958: LD_INT 6
54960: DOUBLE
54961: EQUAL
54962: IFTRUE 54966
54964: GO 54973
54966: POP
// hHackChangeYourSide ; 7 :
54967: CALL 67936 0 0
54971: GO 55004
54973: LD_INT 7
54975: DOUBLE
54976: EQUAL
54977: IFTRUE 54981
54979: GO 54988
54981: POP
// hHackChangeUnitSide ; 8 :
54982: CALL 67978 0 0
54986: GO 55004
54988: LD_INT 8
54990: DOUBLE
54991: EQUAL
54992: IFTRUE 54996
54994: GO 55003
54996: POP
// hHackFog ; end ;
54997: CALL 68079 0 0
55001: GO 55004
55003: POP
// end ; end ;
55004: LD_VAR 0 7
55008: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
55009: GO 55011
55011: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
55012: LD_STRING initStreamRollete();
55014: PPUSH
55015: CALL_OW 559
// InitStreamMode ;
55019: CALL 55031 0 0
// DefineStreamItems ( false ) ;
55023: LD_INT 0
55025: PPUSH
55026: CALL 55495 0 1
// end ;
55030: END
// function InitStreamMode ; begin
55031: LD_INT 0
55033: PPUSH
// streamModeActive := false ;
55034: LD_ADDR_EXP 118
55038: PUSH
55039: LD_INT 0
55041: ST_TO_ADDR
// normalCounter := 36 ;
55042: LD_ADDR_EXP 119
55046: PUSH
55047: LD_INT 36
55049: ST_TO_ADDR
// hardcoreCounter := 18 ;
55050: LD_ADDR_EXP 120
55054: PUSH
55055: LD_INT 18
55057: ST_TO_ADDR
// sRocket := false ;
55058: LD_ADDR_EXP 123
55062: PUSH
55063: LD_INT 0
55065: ST_TO_ADDR
// sSpeed := false ;
55066: LD_ADDR_EXP 122
55070: PUSH
55071: LD_INT 0
55073: ST_TO_ADDR
// sEngine := false ;
55074: LD_ADDR_EXP 124
55078: PUSH
55079: LD_INT 0
55081: ST_TO_ADDR
// sSpec := false ;
55082: LD_ADDR_EXP 121
55086: PUSH
55087: LD_INT 0
55089: ST_TO_ADDR
// sLevel := false ;
55090: LD_ADDR_EXP 125
55094: PUSH
55095: LD_INT 0
55097: ST_TO_ADDR
// sArmoury := false ;
55098: LD_ADDR_EXP 126
55102: PUSH
55103: LD_INT 0
55105: ST_TO_ADDR
// sRadar := false ;
55106: LD_ADDR_EXP 127
55110: PUSH
55111: LD_INT 0
55113: ST_TO_ADDR
// sBunker := false ;
55114: LD_ADDR_EXP 128
55118: PUSH
55119: LD_INT 0
55121: ST_TO_ADDR
// sHack := false ;
55122: LD_ADDR_EXP 129
55126: PUSH
55127: LD_INT 0
55129: ST_TO_ADDR
// sFire := false ;
55130: LD_ADDR_EXP 130
55134: PUSH
55135: LD_INT 0
55137: ST_TO_ADDR
// sRefresh := false ;
55138: LD_ADDR_EXP 131
55142: PUSH
55143: LD_INT 0
55145: ST_TO_ADDR
// sExp := false ;
55146: LD_ADDR_EXP 132
55150: PUSH
55151: LD_INT 0
55153: ST_TO_ADDR
// sDepot := false ;
55154: LD_ADDR_EXP 133
55158: PUSH
55159: LD_INT 0
55161: ST_TO_ADDR
// sFlag := false ;
55162: LD_ADDR_EXP 134
55166: PUSH
55167: LD_INT 0
55169: ST_TO_ADDR
// sKamikadze := false ;
55170: LD_ADDR_EXP 142
55174: PUSH
55175: LD_INT 0
55177: ST_TO_ADDR
// sTroll := false ;
55178: LD_ADDR_EXP 143
55182: PUSH
55183: LD_INT 0
55185: ST_TO_ADDR
// sSlow := false ;
55186: LD_ADDR_EXP 144
55190: PUSH
55191: LD_INT 0
55193: ST_TO_ADDR
// sLack := false ;
55194: LD_ADDR_EXP 145
55198: PUSH
55199: LD_INT 0
55201: ST_TO_ADDR
// sTank := false ;
55202: LD_ADDR_EXP 147
55206: PUSH
55207: LD_INT 0
55209: ST_TO_ADDR
// sRemote := false ;
55210: LD_ADDR_EXP 148
55214: PUSH
55215: LD_INT 0
55217: ST_TO_ADDR
// sPowell := false ;
55218: LD_ADDR_EXP 149
55222: PUSH
55223: LD_INT 0
55225: ST_TO_ADDR
// sTeleport := false ;
55226: LD_ADDR_EXP 152
55230: PUSH
55231: LD_INT 0
55233: ST_TO_ADDR
// sOilTower := false ;
55234: LD_ADDR_EXP 154
55238: PUSH
55239: LD_INT 0
55241: ST_TO_ADDR
// sShovel := false ;
55242: LD_ADDR_EXP 155
55246: PUSH
55247: LD_INT 0
55249: ST_TO_ADDR
// sSheik := false ;
55250: LD_ADDR_EXP 156
55254: PUSH
55255: LD_INT 0
55257: ST_TO_ADDR
// sEarthquake := false ;
55258: LD_ADDR_EXP 158
55262: PUSH
55263: LD_INT 0
55265: ST_TO_ADDR
// sAI := false ;
55266: LD_ADDR_EXP 159
55270: PUSH
55271: LD_INT 0
55273: ST_TO_ADDR
// sCargo := false ;
55274: LD_ADDR_EXP 162
55278: PUSH
55279: LD_INT 0
55281: ST_TO_ADDR
// sDLaser := false ;
55282: LD_ADDR_EXP 163
55286: PUSH
55287: LD_INT 0
55289: ST_TO_ADDR
// sExchange := false ;
55290: LD_ADDR_EXP 164
55294: PUSH
55295: LD_INT 0
55297: ST_TO_ADDR
// sFac := false ;
55298: LD_ADDR_EXP 165
55302: PUSH
55303: LD_INT 0
55305: ST_TO_ADDR
// sPower := false ;
55306: LD_ADDR_EXP 166
55310: PUSH
55311: LD_INT 0
55313: ST_TO_ADDR
// sRandom := false ;
55314: LD_ADDR_EXP 167
55318: PUSH
55319: LD_INT 0
55321: ST_TO_ADDR
// sShield := false ;
55322: LD_ADDR_EXP 168
55326: PUSH
55327: LD_INT 0
55329: ST_TO_ADDR
// sTime := false ;
55330: LD_ADDR_EXP 169
55334: PUSH
55335: LD_INT 0
55337: ST_TO_ADDR
// sTools := false ;
55338: LD_ADDR_EXP 170
55342: PUSH
55343: LD_INT 0
55345: ST_TO_ADDR
// sSold := false ;
55346: LD_ADDR_EXP 135
55350: PUSH
55351: LD_INT 0
55353: ST_TO_ADDR
// sDiff := false ;
55354: LD_ADDR_EXP 136
55358: PUSH
55359: LD_INT 0
55361: ST_TO_ADDR
// sFog := false ;
55362: LD_ADDR_EXP 139
55366: PUSH
55367: LD_INT 0
55369: ST_TO_ADDR
// sReset := false ;
55370: LD_ADDR_EXP 140
55374: PUSH
55375: LD_INT 0
55377: ST_TO_ADDR
// sSun := false ;
55378: LD_ADDR_EXP 141
55382: PUSH
55383: LD_INT 0
55385: ST_TO_ADDR
// sTiger := false ;
55386: LD_ADDR_EXP 137
55390: PUSH
55391: LD_INT 0
55393: ST_TO_ADDR
// sBomb := false ;
55394: LD_ADDR_EXP 138
55398: PUSH
55399: LD_INT 0
55401: ST_TO_ADDR
// sWound := false ;
55402: LD_ADDR_EXP 146
55406: PUSH
55407: LD_INT 0
55409: ST_TO_ADDR
// sBetray := false ;
55410: LD_ADDR_EXP 150
55414: PUSH
55415: LD_INT 0
55417: ST_TO_ADDR
// sContamin := false ;
55418: LD_ADDR_EXP 151
55422: PUSH
55423: LD_INT 0
55425: ST_TO_ADDR
// sOil := false ;
55426: LD_ADDR_EXP 153
55430: PUSH
55431: LD_INT 0
55433: ST_TO_ADDR
// sStu := false ;
55434: LD_ADDR_EXP 157
55438: PUSH
55439: LD_INT 0
55441: ST_TO_ADDR
// sBazooka := false ;
55442: LD_ADDR_EXP 160
55446: PUSH
55447: LD_INT 0
55449: ST_TO_ADDR
// sMortar := false ;
55450: LD_ADDR_EXP 161
55454: PUSH
55455: LD_INT 0
55457: ST_TO_ADDR
// sRanger := false ;
55458: LD_ADDR_EXP 171
55462: PUSH
55463: LD_INT 0
55465: ST_TO_ADDR
// sComputer := false ;
55466: LD_ADDR_EXP 172
55470: PUSH
55471: LD_INT 0
55473: ST_TO_ADDR
// s30 := false ;
55474: LD_ADDR_EXP 173
55478: PUSH
55479: LD_INT 0
55481: ST_TO_ADDR
// s60 := false ;
55482: LD_ADDR_EXP 174
55486: PUSH
55487: LD_INT 0
55489: ST_TO_ADDR
// end ;
55490: LD_VAR 0 1
55494: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
55495: LD_INT 0
55497: PPUSH
55498: PPUSH
55499: PPUSH
55500: PPUSH
55501: PPUSH
55502: PPUSH
55503: PPUSH
// result := [ ] ;
55504: LD_ADDR_VAR 0 2
55508: PUSH
55509: EMPTY
55510: ST_TO_ADDR
// if campaign_id = 1 then
55511: LD_OWVAR 69
55515: PUSH
55516: LD_INT 1
55518: EQUAL
55519: IFFALSE 58685
// begin case mission_number of 1 :
55521: LD_OWVAR 70
55525: PUSH
55526: LD_INT 1
55528: DOUBLE
55529: EQUAL
55530: IFTRUE 55534
55532: GO 55610
55534: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
55535: LD_ADDR_VAR 0 2
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: LD_INT 4
55545: PUSH
55546: LD_INT 11
55548: PUSH
55549: LD_INT 12
55551: PUSH
55552: LD_INT 15
55554: PUSH
55555: LD_INT 16
55557: PUSH
55558: LD_INT 22
55560: PUSH
55561: LD_INT 23
55563: PUSH
55564: LD_INT 26
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 101
55580: PUSH
55581: LD_INT 102
55583: PUSH
55584: LD_INT 106
55586: PUSH
55587: LD_INT 116
55589: PUSH
55590: LD_INT 117
55592: PUSH
55593: LD_INT 118
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: ST_TO_ADDR
55608: GO 58683
55610: LD_INT 2
55612: DOUBLE
55613: EQUAL
55614: IFTRUE 55618
55616: GO 55702
55618: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
55619: LD_ADDR_VAR 0 2
55623: PUSH
55624: LD_INT 2
55626: PUSH
55627: LD_INT 4
55629: PUSH
55630: LD_INT 11
55632: PUSH
55633: LD_INT 12
55635: PUSH
55636: LD_INT 15
55638: PUSH
55639: LD_INT 16
55641: PUSH
55642: LD_INT 22
55644: PUSH
55645: LD_INT 23
55647: PUSH
55648: LD_INT 26
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 101
55664: PUSH
55665: LD_INT 102
55667: PUSH
55668: LD_INT 105
55670: PUSH
55671: LD_INT 106
55673: PUSH
55674: LD_INT 108
55676: PUSH
55677: LD_INT 116
55679: PUSH
55680: LD_INT 117
55682: PUSH
55683: LD_INT 118
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: ST_TO_ADDR
55700: GO 58683
55702: LD_INT 3
55704: DOUBLE
55705: EQUAL
55706: IFTRUE 55710
55708: GO 55798
55710: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
55711: LD_ADDR_VAR 0 2
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: LD_INT 4
55721: PUSH
55722: LD_INT 5
55724: PUSH
55725: LD_INT 11
55727: PUSH
55728: LD_INT 12
55730: PUSH
55731: LD_INT 15
55733: PUSH
55734: LD_INT 16
55736: PUSH
55737: LD_INT 22
55739: PUSH
55740: LD_INT 26
55742: PUSH
55743: LD_INT 36
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 101
55760: PUSH
55761: LD_INT 102
55763: PUSH
55764: LD_INT 105
55766: PUSH
55767: LD_INT 106
55769: PUSH
55770: LD_INT 108
55772: PUSH
55773: LD_INT 116
55775: PUSH
55776: LD_INT 117
55778: PUSH
55779: LD_INT 118
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: ST_TO_ADDR
55796: GO 58683
55798: LD_INT 4
55800: DOUBLE
55801: EQUAL
55802: IFTRUE 55806
55804: GO 55902
55806: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
55807: LD_ADDR_VAR 0 2
55811: PUSH
55812: LD_INT 2
55814: PUSH
55815: LD_INT 4
55817: PUSH
55818: LD_INT 5
55820: PUSH
55821: LD_INT 8
55823: PUSH
55824: LD_INT 11
55826: PUSH
55827: LD_INT 12
55829: PUSH
55830: LD_INT 15
55832: PUSH
55833: LD_INT 16
55835: PUSH
55836: LD_INT 22
55838: PUSH
55839: LD_INT 23
55841: PUSH
55842: LD_INT 26
55844: PUSH
55845: LD_INT 36
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 101
55864: PUSH
55865: LD_INT 102
55867: PUSH
55868: LD_INT 105
55870: PUSH
55871: LD_INT 106
55873: PUSH
55874: LD_INT 108
55876: PUSH
55877: LD_INT 116
55879: PUSH
55880: LD_INT 117
55882: PUSH
55883: LD_INT 118
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: ST_TO_ADDR
55900: GO 58683
55902: LD_INT 5
55904: DOUBLE
55905: EQUAL
55906: IFTRUE 55910
55908: GO 56022
55910: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
55911: LD_ADDR_VAR 0 2
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: LD_INT 4
55921: PUSH
55922: LD_INT 5
55924: PUSH
55925: LD_INT 6
55927: PUSH
55928: LD_INT 8
55930: PUSH
55931: LD_INT 11
55933: PUSH
55934: LD_INT 12
55936: PUSH
55937: LD_INT 15
55939: PUSH
55940: LD_INT 16
55942: PUSH
55943: LD_INT 22
55945: PUSH
55946: LD_INT 23
55948: PUSH
55949: LD_INT 25
55951: PUSH
55952: LD_INT 26
55954: PUSH
55955: LD_INT 36
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 101
55976: PUSH
55977: LD_INT 102
55979: PUSH
55980: LD_INT 105
55982: PUSH
55983: LD_INT 106
55985: PUSH
55986: LD_INT 108
55988: PUSH
55989: LD_INT 109
55991: PUSH
55992: LD_INT 112
55994: PUSH
55995: LD_INT 116
55997: PUSH
55998: LD_INT 117
56000: PUSH
56001: LD_INT 118
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: ST_TO_ADDR
56020: GO 58683
56022: LD_INT 6
56024: DOUBLE
56025: EQUAL
56026: IFTRUE 56030
56028: GO 56162
56030: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
56031: LD_ADDR_VAR 0 2
56035: PUSH
56036: LD_INT 2
56038: PUSH
56039: LD_INT 4
56041: PUSH
56042: LD_INT 5
56044: PUSH
56045: LD_INT 6
56047: PUSH
56048: LD_INT 8
56050: PUSH
56051: LD_INT 11
56053: PUSH
56054: LD_INT 12
56056: PUSH
56057: LD_INT 15
56059: PUSH
56060: LD_INT 16
56062: PUSH
56063: LD_INT 20
56065: PUSH
56066: LD_INT 21
56068: PUSH
56069: LD_INT 22
56071: PUSH
56072: LD_INT 23
56074: PUSH
56075: LD_INT 25
56077: PUSH
56078: LD_INT 26
56080: PUSH
56081: LD_INT 30
56083: PUSH
56084: LD_INT 31
56086: PUSH
56087: LD_INT 32
56089: PUSH
56090: LD_INT 36
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 101
56116: PUSH
56117: LD_INT 102
56119: PUSH
56120: LD_INT 105
56122: PUSH
56123: LD_INT 106
56125: PUSH
56126: LD_INT 108
56128: PUSH
56129: LD_INT 109
56131: PUSH
56132: LD_INT 112
56134: PUSH
56135: LD_INT 116
56137: PUSH
56138: LD_INT 117
56140: PUSH
56141: LD_INT 118
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: ST_TO_ADDR
56160: GO 58683
56162: LD_INT 7
56164: DOUBLE
56165: EQUAL
56166: IFTRUE 56170
56168: GO 56282
56170: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
56171: LD_ADDR_VAR 0 2
56175: PUSH
56176: LD_INT 2
56178: PUSH
56179: LD_INT 4
56181: PUSH
56182: LD_INT 5
56184: PUSH
56185: LD_INT 7
56187: PUSH
56188: LD_INT 11
56190: PUSH
56191: LD_INT 12
56193: PUSH
56194: LD_INT 15
56196: PUSH
56197: LD_INT 16
56199: PUSH
56200: LD_INT 20
56202: PUSH
56203: LD_INT 21
56205: PUSH
56206: LD_INT 22
56208: PUSH
56209: LD_INT 23
56211: PUSH
56212: LD_INT 25
56214: PUSH
56215: LD_INT 26
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 101
56236: PUSH
56237: LD_INT 102
56239: PUSH
56240: LD_INT 103
56242: PUSH
56243: LD_INT 105
56245: PUSH
56246: LD_INT 106
56248: PUSH
56249: LD_INT 108
56251: PUSH
56252: LD_INT 112
56254: PUSH
56255: LD_INT 116
56257: PUSH
56258: LD_INT 117
56260: PUSH
56261: LD_INT 118
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: ST_TO_ADDR
56280: GO 58683
56282: LD_INT 8
56284: DOUBLE
56285: EQUAL
56286: IFTRUE 56290
56288: GO 56430
56290: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
56291: LD_ADDR_VAR 0 2
56295: PUSH
56296: LD_INT 2
56298: PUSH
56299: LD_INT 4
56301: PUSH
56302: LD_INT 5
56304: PUSH
56305: LD_INT 6
56307: PUSH
56308: LD_INT 7
56310: PUSH
56311: LD_INT 8
56313: PUSH
56314: LD_INT 11
56316: PUSH
56317: LD_INT 12
56319: PUSH
56320: LD_INT 15
56322: PUSH
56323: LD_INT 16
56325: PUSH
56326: LD_INT 20
56328: PUSH
56329: LD_INT 21
56331: PUSH
56332: LD_INT 22
56334: PUSH
56335: LD_INT 23
56337: PUSH
56338: LD_INT 25
56340: PUSH
56341: LD_INT 26
56343: PUSH
56344: LD_INT 30
56346: PUSH
56347: LD_INT 31
56349: PUSH
56350: LD_INT 32
56352: PUSH
56353: LD_INT 36
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 101
56380: PUSH
56381: LD_INT 102
56383: PUSH
56384: LD_INT 103
56386: PUSH
56387: LD_INT 105
56389: PUSH
56390: LD_INT 106
56392: PUSH
56393: LD_INT 108
56395: PUSH
56396: LD_INT 109
56398: PUSH
56399: LD_INT 112
56401: PUSH
56402: LD_INT 116
56404: PUSH
56405: LD_INT 117
56407: PUSH
56408: LD_INT 118
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: ST_TO_ADDR
56428: GO 58683
56430: LD_INT 9
56432: DOUBLE
56433: EQUAL
56434: IFTRUE 56438
56436: GO 56586
56438: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
56439: LD_ADDR_VAR 0 2
56443: PUSH
56444: LD_INT 2
56446: PUSH
56447: LD_INT 4
56449: PUSH
56450: LD_INT 5
56452: PUSH
56453: LD_INT 6
56455: PUSH
56456: LD_INT 7
56458: PUSH
56459: LD_INT 8
56461: PUSH
56462: LD_INT 11
56464: PUSH
56465: LD_INT 12
56467: PUSH
56468: LD_INT 15
56470: PUSH
56471: LD_INT 16
56473: PUSH
56474: LD_INT 20
56476: PUSH
56477: LD_INT 21
56479: PUSH
56480: LD_INT 22
56482: PUSH
56483: LD_INT 23
56485: PUSH
56486: LD_INT 25
56488: PUSH
56489: LD_INT 26
56491: PUSH
56492: LD_INT 28
56494: PUSH
56495: LD_INT 30
56497: PUSH
56498: LD_INT 31
56500: PUSH
56501: LD_INT 32
56503: PUSH
56504: LD_INT 36
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 101
56532: PUSH
56533: LD_INT 102
56535: PUSH
56536: LD_INT 103
56538: PUSH
56539: LD_INT 105
56541: PUSH
56542: LD_INT 106
56544: PUSH
56545: LD_INT 108
56547: PUSH
56548: LD_INT 109
56550: PUSH
56551: LD_INT 112
56553: PUSH
56554: LD_INT 114
56556: PUSH
56557: LD_INT 116
56559: PUSH
56560: LD_INT 117
56562: PUSH
56563: LD_INT 118
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: ST_TO_ADDR
56584: GO 58683
56586: LD_INT 10
56588: DOUBLE
56589: EQUAL
56590: IFTRUE 56594
56592: GO 56790
56594: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
56595: LD_ADDR_VAR 0 2
56599: PUSH
56600: LD_INT 2
56602: PUSH
56603: LD_INT 4
56605: PUSH
56606: LD_INT 5
56608: PUSH
56609: LD_INT 6
56611: PUSH
56612: LD_INT 7
56614: PUSH
56615: LD_INT 8
56617: PUSH
56618: LD_INT 9
56620: PUSH
56621: LD_INT 10
56623: PUSH
56624: LD_INT 11
56626: PUSH
56627: LD_INT 12
56629: PUSH
56630: LD_INT 13
56632: PUSH
56633: LD_INT 14
56635: PUSH
56636: LD_INT 15
56638: PUSH
56639: LD_INT 16
56641: PUSH
56642: LD_INT 17
56644: PUSH
56645: LD_INT 18
56647: PUSH
56648: LD_INT 19
56650: PUSH
56651: LD_INT 20
56653: PUSH
56654: LD_INT 21
56656: PUSH
56657: LD_INT 22
56659: PUSH
56660: LD_INT 23
56662: PUSH
56663: LD_INT 24
56665: PUSH
56666: LD_INT 25
56668: PUSH
56669: LD_INT 26
56671: PUSH
56672: LD_INT 28
56674: PUSH
56675: LD_INT 30
56677: PUSH
56678: LD_INT 31
56680: PUSH
56681: LD_INT 32
56683: PUSH
56684: LD_INT 36
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 101
56720: PUSH
56721: LD_INT 102
56723: PUSH
56724: LD_INT 103
56726: PUSH
56727: LD_INT 104
56729: PUSH
56730: LD_INT 105
56732: PUSH
56733: LD_INT 106
56735: PUSH
56736: LD_INT 107
56738: PUSH
56739: LD_INT 108
56741: PUSH
56742: LD_INT 109
56744: PUSH
56745: LD_INT 110
56747: PUSH
56748: LD_INT 111
56750: PUSH
56751: LD_INT 112
56753: PUSH
56754: LD_INT 114
56756: PUSH
56757: LD_INT 116
56759: PUSH
56760: LD_INT 117
56762: PUSH
56763: LD_INT 118
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: ST_TO_ADDR
56788: GO 58683
56790: LD_INT 11
56792: DOUBLE
56793: EQUAL
56794: IFTRUE 56798
56796: GO 57002
56798: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
56799: LD_ADDR_VAR 0 2
56803: PUSH
56804: LD_INT 2
56806: PUSH
56807: LD_INT 3
56809: PUSH
56810: LD_INT 4
56812: PUSH
56813: LD_INT 5
56815: PUSH
56816: LD_INT 6
56818: PUSH
56819: LD_INT 7
56821: PUSH
56822: LD_INT 8
56824: PUSH
56825: LD_INT 9
56827: PUSH
56828: LD_INT 10
56830: PUSH
56831: LD_INT 11
56833: PUSH
56834: LD_INT 12
56836: PUSH
56837: LD_INT 13
56839: PUSH
56840: LD_INT 14
56842: PUSH
56843: LD_INT 15
56845: PUSH
56846: LD_INT 16
56848: PUSH
56849: LD_INT 17
56851: PUSH
56852: LD_INT 18
56854: PUSH
56855: LD_INT 19
56857: PUSH
56858: LD_INT 20
56860: PUSH
56861: LD_INT 21
56863: PUSH
56864: LD_INT 22
56866: PUSH
56867: LD_INT 23
56869: PUSH
56870: LD_INT 24
56872: PUSH
56873: LD_INT 25
56875: PUSH
56876: LD_INT 26
56878: PUSH
56879: LD_INT 28
56881: PUSH
56882: LD_INT 30
56884: PUSH
56885: LD_INT 31
56887: PUSH
56888: LD_INT 32
56890: PUSH
56891: LD_INT 34
56893: PUSH
56894: LD_INT 36
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 101
56932: PUSH
56933: LD_INT 102
56935: PUSH
56936: LD_INT 103
56938: PUSH
56939: LD_INT 104
56941: PUSH
56942: LD_INT 105
56944: PUSH
56945: LD_INT 106
56947: PUSH
56948: LD_INT 107
56950: PUSH
56951: LD_INT 108
56953: PUSH
56954: LD_INT 109
56956: PUSH
56957: LD_INT 110
56959: PUSH
56960: LD_INT 111
56962: PUSH
56963: LD_INT 112
56965: PUSH
56966: LD_INT 114
56968: PUSH
56969: LD_INT 116
56971: PUSH
56972: LD_INT 117
56974: PUSH
56975: LD_INT 118
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: ST_TO_ADDR
57000: GO 58683
57002: LD_INT 12
57004: DOUBLE
57005: EQUAL
57006: IFTRUE 57010
57008: GO 57230
57010: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
57011: LD_ADDR_VAR 0 2
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: LD_INT 2
57021: PUSH
57022: LD_INT 3
57024: PUSH
57025: LD_INT 4
57027: PUSH
57028: LD_INT 5
57030: PUSH
57031: LD_INT 6
57033: PUSH
57034: LD_INT 7
57036: PUSH
57037: LD_INT 8
57039: PUSH
57040: LD_INT 9
57042: PUSH
57043: LD_INT 10
57045: PUSH
57046: LD_INT 11
57048: PUSH
57049: LD_INT 12
57051: PUSH
57052: LD_INT 13
57054: PUSH
57055: LD_INT 14
57057: PUSH
57058: LD_INT 15
57060: PUSH
57061: LD_INT 16
57063: PUSH
57064: LD_INT 17
57066: PUSH
57067: LD_INT 18
57069: PUSH
57070: LD_INT 19
57072: PUSH
57073: LD_INT 20
57075: PUSH
57076: LD_INT 21
57078: PUSH
57079: LD_INT 22
57081: PUSH
57082: LD_INT 23
57084: PUSH
57085: LD_INT 24
57087: PUSH
57088: LD_INT 25
57090: PUSH
57091: LD_INT 26
57093: PUSH
57094: LD_INT 27
57096: PUSH
57097: LD_INT 28
57099: PUSH
57100: LD_INT 30
57102: PUSH
57103: LD_INT 31
57105: PUSH
57106: LD_INT 32
57108: PUSH
57109: LD_INT 33
57111: PUSH
57112: LD_INT 34
57114: PUSH
57115: LD_INT 36
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 101
57156: PUSH
57157: LD_INT 102
57159: PUSH
57160: LD_INT 103
57162: PUSH
57163: LD_INT 104
57165: PUSH
57166: LD_INT 105
57168: PUSH
57169: LD_INT 106
57171: PUSH
57172: LD_INT 107
57174: PUSH
57175: LD_INT 108
57177: PUSH
57178: LD_INT 109
57180: PUSH
57181: LD_INT 110
57183: PUSH
57184: LD_INT 111
57186: PUSH
57187: LD_INT 112
57189: PUSH
57190: LD_INT 113
57192: PUSH
57193: LD_INT 114
57195: PUSH
57196: LD_INT 116
57198: PUSH
57199: LD_INT 117
57201: PUSH
57202: LD_INT 118
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: ST_TO_ADDR
57228: GO 58683
57230: LD_INT 13
57232: DOUBLE
57233: EQUAL
57234: IFTRUE 57238
57236: GO 57446
57238: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
57239: LD_ADDR_VAR 0 2
57243: PUSH
57244: LD_INT 1
57246: PUSH
57247: LD_INT 2
57249: PUSH
57250: LD_INT 3
57252: PUSH
57253: LD_INT 4
57255: PUSH
57256: LD_INT 5
57258: PUSH
57259: LD_INT 8
57261: PUSH
57262: LD_INT 9
57264: PUSH
57265: LD_INT 10
57267: PUSH
57268: LD_INT 11
57270: PUSH
57271: LD_INT 12
57273: PUSH
57274: LD_INT 14
57276: PUSH
57277: LD_INT 15
57279: PUSH
57280: LD_INT 16
57282: PUSH
57283: LD_INT 17
57285: PUSH
57286: LD_INT 18
57288: PUSH
57289: LD_INT 19
57291: PUSH
57292: LD_INT 20
57294: PUSH
57295: LD_INT 21
57297: PUSH
57298: LD_INT 22
57300: PUSH
57301: LD_INT 23
57303: PUSH
57304: LD_INT 24
57306: PUSH
57307: LD_INT 25
57309: PUSH
57310: LD_INT 26
57312: PUSH
57313: LD_INT 27
57315: PUSH
57316: LD_INT 28
57318: PUSH
57319: LD_INT 30
57321: PUSH
57322: LD_INT 31
57324: PUSH
57325: LD_INT 32
57327: PUSH
57328: LD_INT 33
57330: PUSH
57331: LD_INT 34
57333: PUSH
57334: LD_INT 36
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 101
57372: PUSH
57373: LD_INT 102
57375: PUSH
57376: LD_INT 103
57378: PUSH
57379: LD_INT 104
57381: PUSH
57382: LD_INT 105
57384: PUSH
57385: LD_INT 106
57387: PUSH
57388: LD_INT 107
57390: PUSH
57391: LD_INT 108
57393: PUSH
57394: LD_INT 109
57396: PUSH
57397: LD_INT 110
57399: PUSH
57400: LD_INT 111
57402: PUSH
57403: LD_INT 112
57405: PUSH
57406: LD_INT 113
57408: PUSH
57409: LD_INT 114
57411: PUSH
57412: LD_INT 116
57414: PUSH
57415: LD_INT 117
57417: PUSH
57418: LD_INT 118
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: ST_TO_ADDR
57444: GO 58683
57446: LD_INT 14
57448: DOUBLE
57449: EQUAL
57450: IFTRUE 57454
57452: GO 57678
57454: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
57455: LD_ADDR_VAR 0 2
57459: PUSH
57460: LD_INT 1
57462: PUSH
57463: LD_INT 2
57465: PUSH
57466: LD_INT 3
57468: PUSH
57469: LD_INT 4
57471: PUSH
57472: LD_INT 5
57474: PUSH
57475: LD_INT 6
57477: PUSH
57478: LD_INT 7
57480: PUSH
57481: LD_INT 8
57483: PUSH
57484: LD_INT 9
57486: PUSH
57487: LD_INT 10
57489: PUSH
57490: LD_INT 11
57492: PUSH
57493: LD_INT 12
57495: PUSH
57496: LD_INT 13
57498: PUSH
57499: LD_INT 14
57501: PUSH
57502: LD_INT 15
57504: PUSH
57505: LD_INT 16
57507: PUSH
57508: LD_INT 17
57510: PUSH
57511: LD_INT 18
57513: PUSH
57514: LD_INT 19
57516: PUSH
57517: LD_INT 20
57519: PUSH
57520: LD_INT 21
57522: PUSH
57523: LD_INT 22
57525: PUSH
57526: LD_INT 23
57528: PUSH
57529: LD_INT 24
57531: PUSH
57532: LD_INT 25
57534: PUSH
57535: LD_INT 26
57537: PUSH
57538: LD_INT 27
57540: PUSH
57541: LD_INT 28
57543: PUSH
57544: LD_INT 29
57546: PUSH
57547: LD_INT 30
57549: PUSH
57550: LD_INT 31
57552: PUSH
57553: LD_INT 32
57555: PUSH
57556: LD_INT 33
57558: PUSH
57559: LD_INT 34
57561: PUSH
57562: LD_INT 36
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 101
57604: PUSH
57605: LD_INT 102
57607: PUSH
57608: LD_INT 103
57610: PUSH
57611: LD_INT 104
57613: PUSH
57614: LD_INT 105
57616: PUSH
57617: LD_INT 106
57619: PUSH
57620: LD_INT 107
57622: PUSH
57623: LD_INT 108
57625: PUSH
57626: LD_INT 109
57628: PUSH
57629: LD_INT 110
57631: PUSH
57632: LD_INT 111
57634: PUSH
57635: LD_INT 112
57637: PUSH
57638: LD_INT 113
57640: PUSH
57641: LD_INT 114
57643: PUSH
57644: LD_INT 116
57646: PUSH
57647: LD_INT 117
57649: PUSH
57650: LD_INT 118
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: ST_TO_ADDR
57676: GO 58683
57678: LD_INT 15
57680: DOUBLE
57681: EQUAL
57682: IFTRUE 57686
57684: GO 57910
57686: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
57687: LD_ADDR_VAR 0 2
57691: PUSH
57692: LD_INT 1
57694: PUSH
57695: LD_INT 2
57697: PUSH
57698: LD_INT 3
57700: PUSH
57701: LD_INT 4
57703: PUSH
57704: LD_INT 5
57706: PUSH
57707: LD_INT 6
57709: PUSH
57710: LD_INT 7
57712: PUSH
57713: LD_INT 8
57715: PUSH
57716: LD_INT 9
57718: PUSH
57719: LD_INT 10
57721: PUSH
57722: LD_INT 11
57724: PUSH
57725: LD_INT 12
57727: PUSH
57728: LD_INT 13
57730: PUSH
57731: LD_INT 14
57733: PUSH
57734: LD_INT 15
57736: PUSH
57737: LD_INT 16
57739: PUSH
57740: LD_INT 17
57742: PUSH
57743: LD_INT 18
57745: PUSH
57746: LD_INT 19
57748: PUSH
57749: LD_INT 20
57751: PUSH
57752: LD_INT 21
57754: PUSH
57755: LD_INT 22
57757: PUSH
57758: LD_INT 23
57760: PUSH
57761: LD_INT 24
57763: PUSH
57764: LD_INT 25
57766: PUSH
57767: LD_INT 26
57769: PUSH
57770: LD_INT 27
57772: PUSH
57773: LD_INT 28
57775: PUSH
57776: LD_INT 29
57778: PUSH
57779: LD_INT 30
57781: PUSH
57782: LD_INT 31
57784: PUSH
57785: LD_INT 32
57787: PUSH
57788: LD_INT 33
57790: PUSH
57791: LD_INT 34
57793: PUSH
57794: LD_INT 36
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 101
57836: PUSH
57837: LD_INT 102
57839: PUSH
57840: LD_INT 103
57842: PUSH
57843: LD_INT 104
57845: PUSH
57846: LD_INT 105
57848: PUSH
57849: LD_INT 106
57851: PUSH
57852: LD_INT 107
57854: PUSH
57855: LD_INT 108
57857: PUSH
57858: LD_INT 109
57860: PUSH
57861: LD_INT 110
57863: PUSH
57864: LD_INT 111
57866: PUSH
57867: LD_INT 112
57869: PUSH
57870: LD_INT 113
57872: PUSH
57873: LD_INT 114
57875: PUSH
57876: LD_INT 116
57878: PUSH
57879: LD_INT 117
57881: PUSH
57882: LD_INT 118
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: ST_TO_ADDR
57908: GO 58683
57910: LD_INT 16
57912: DOUBLE
57913: EQUAL
57914: IFTRUE 57918
57916: GO 58054
57918: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
57919: LD_ADDR_VAR 0 2
57923: PUSH
57924: LD_INT 2
57926: PUSH
57927: LD_INT 4
57929: PUSH
57930: LD_INT 5
57932: PUSH
57933: LD_INT 7
57935: PUSH
57936: LD_INT 11
57938: PUSH
57939: LD_INT 12
57941: PUSH
57942: LD_INT 15
57944: PUSH
57945: LD_INT 16
57947: PUSH
57948: LD_INT 20
57950: PUSH
57951: LD_INT 21
57953: PUSH
57954: LD_INT 22
57956: PUSH
57957: LD_INT 23
57959: PUSH
57960: LD_INT 25
57962: PUSH
57963: LD_INT 26
57965: PUSH
57966: LD_INT 30
57968: PUSH
57969: LD_INT 31
57971: PUSH
57972: LD_INT 32
57974: PUSH
57975: LD_INT 33
57977: PUSH
57978: LD_INT 34
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 101
58004: PUSH
58005: LD_INT 102
58007: PUSH
58008: LD_INT 103
58010: PUSH
58011: LD_INT 106
58013: PUSH
58014: LD_INT 108
58016: PUSH
58017: LD_INT 112
58019: PUSH
58020: LD_INT 113
58022: PUSH
58023: LD_INT 114
58025: PUSH
58026: LD_INT 116
58028: PUSH
58029: LD_INT 117
58031: PUSH
58032: LD_INT 118
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: ST_TO_ADDR
58052: GO 58683
58054: LD_INT 17
58056: DOUBLE
58057: EQUAL
58058: IFTRUE 58062
58060: GO 58286
58062: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
58063: LD_ADDR_VAR 0 2
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: LD_INT 2
58073: PUSH
58074: LD_INT 3
58076: PUSH
58077: LD_INT 4
58079: PUSH
58080: LD_INT 5
58082: PUSH
58083: LD_INT 6
58085: PUSH
58086: LD_INT 7
58088: PUSH
58089: LD_INT 8
58091: PUSH
58092: LD_INT 9
58094: PUSH
58095: LD_INT 10
58097: PUSH
58098: LD_INT 11
58100: PUSH
58101: LD_INT 12
58103: PUSH
58104: LD_INT 13
58106: PUSH
58107: LD_INT 14
58109: PUSH
58110: LD_INT 15
58112: PUSH
58113: LD_INT 16
58115: PUSH
58116: LD_INT 17
58118: PUSH
58119: LD_INT 18
58121: PUSH
58122: LD_INT 19
58124: PUSH
58125: LD_INT 20
58127: PUSH
58128: LD_INT 21
58130: PUSH
58131: LD_INT 22
58133: PUSH
58134: LD_INT 23
58136: PUSH
58137: LD_INT 24
58139: PUSH
58140: LD_INT 25
58142: PUSH
58143: LD_INT 26
58145: PUSH
58146: LD_INT 27
58148: PUSH
58149: LD_INT 28
58151: PUSH
58152: LD_INT 29
58154: PUSH
58155: LD_INT 30
58157: PUSH
58158: LD_INT 31
58160: PUSH
58161: LD_INT 32
58163: PUSH
58164: LD_INT 33
58166: PUSH
58167: LD_INT 34
58169: PUSH
58170: LD_INT 36
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 101
58212: PUSH
58213: LD_INT 102
58215: PUSH
58216: LD_INT 103
58218: PUSH
58219: LD_INT 104
58221: PUSH
58222: LD_INT 105
58224: PUSH
58225: LD_INT 106
58227: PUSH
58228: LD_INT 107
58230: PUSH
58231: LD_INT 108
58233: PUSH
58234: LD_INT 109
58236: PUSH
58237: LD_INT 110
58239: PUSH
58240: LD_INT 111
58242: PUSH
58243: LD_INT 112
58245: PUSH
58246: LD_INT 113
58248: PUSH
58249: LD_INT 114
58251: PUSH
58252: LD_INT 116
58254: PUSH
58255: LD_INT 117
58257: PUSH
58258: LD_INT 118
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: ST_TO_ADDR
58284: GO 58683
58286: LD_INT 18
58288: DOUBLE
58289: EQUAL
58290: IFTRUE 58294
58292: GO 58442
58294: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
58295: LD_ADDR_VAR 0 2
58299: PUSH
58300: LD_INT 2
58302: PUSH
58303: LD_INT 4
58305: PUSH
58306: LD_INT 5
58308: PUSH
58309: LD_INT 7
58311: PUSH
58312: LD_INT 11
58314: PUSH
58315: LD_INT 12
58317: PUSH
58318: LD_INT 15
58320: PUSH
58321: LD_INT 16
58323: PUSH
58324: LD_INT 20
58326: PUSH
58327: LD_INT 21
58329: PUSH
58330: LD_INT 22
58332: PUSH
58333: LD_INT 23
58335: PUSH
58336: LD_INT 25
58338: PUSH
58339: LD_INT 26
58341: PUSH
58342: LD_INT 30
58344: PUSH
58345: LD_INT 31
58347: PUSH
58348: LD_INT 32
58350: PUSH
58351: LD_INT 33
58353: PUSH
58354: LD_INT 34
58356: PUSH
58357: LD_INT 35
58359: PUSH
58360: LD_INT 36
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 101
58388: PUSH
58389: LD_INT 102
58391: PUSH
58392: LD_INT 103
58394: PUSH
58395: LD_INT 106
58397: PUSH
58398: LD_INT 108
58400: PUSH
58401: LD_INT 112
58403: PUSH
58404: LD_INT 113
58406: PUSH
58407: LD_INT 114
58409: PUSH
58410: LD_INT 115
58412: PUSH
58413: LD_INT 116
58415: PUSH
58416: LD_INT 117
58418: PUSH
58419: LD_INT 118
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: ST_TO_ADDR
58440: GO 58683
58442: LD_INT 19
58444: DOUBLE
58445: EQUAL
58446: IFTRUE 58450
58448: GO 58682
58450: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
58451: LD_ADDR_VAR 0 2
58455: PUSH
58456: LD_INT 1
58458: PUSH
58459: LD_INT 2
58461: PUSH
58462: LD_INT 3
58464: PUSH
58465: LD_INT 4
58467: PUSH
58468: LD_INT 5
58470: PUSH
58471: LD_INT 6
58473: PUSH
58474: LD_INT 7
58476: PUSH
58477: LD_INT 8
58479: PUSH
58480: LD_INT 9
58482: PUSH
58483: LD_INT 10
58485: PUSH
58486: LD_INT 11
58488: PUSH
58489: LD_INT 12
58491: PUSH
58492: LD_INT 13
58494: PUSH
58495: LD_INT 14
58497: PUSH
58498: LD_INT 15
58500: PUSH
58501: LD_INT 16
58503: PUSH
58504: LD_INT 17
58506: PUSH
58507: LD_INT 18
58509: PUSH
58510: LD_INT 19
58512: PUSH
58513: LD_INT 20
58515: PUSH
58516: LD_INT 21
58518: PUSH
58519: LD_INT 22
58521: PUSH
58522: LD_INT 23
58524: PUSH
58525: LD_INT 24
58527: PUSH
58528: LD_INT 25
58530: PUSH
58531: LD_INT 26
58533: PUSH
58534: LD_INT 27
58536: PUSH
58537: LD_INT 28
58539: PUSH
58540: LD_INT 29
58542: PUSH
58543: LD_INT 30
58545: PUSH
58546: LD_INT 31
58548: PUSH
58549: LD_INT 32
58551: PUSH
58552: LD_INT 33
58554: PUSH
58555: LD_INT 34
58557: PUSH
58558: LD_INT 35
58560: PUSH
58561: LD_INT 36
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 101
58604: PUSH
58605: LD_INT 102
58607: PUSH
58608: LD_INT 103
58610: PUSH
58611: LD_INT 104
58613: PUSH
58614: LD_INT 105
58616: PUSH
58617: LD_INT 106
58619: PUSH
58620: LD_INT 107
58622: PUSH
58623: LD_INT 108
58625: PUSH
58626: LD_INT 109
58628: PUSH
58629: LD_INT 110
58631: PUSH
58632: LD_INT 111
58634: PUSH
58635: LD_INT 112
58637: PUSH
58638: LD_INT 113
58640: PUSH
58641: LD_INT 114
58643: PUSH
58644: LD_INT 115
58646: PUSH
58647: LD_INT 116
58649: PUSH
58650: LD_INT 117
58652: PUSH
58653: LD_INT 118
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: ST_TO_ADDR
58680: GO 58683
58682: POP
// end else
58683: GO 58914
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
58685: LD_ADDR_VAR 0 2
58689: PUSH
58690: LD_INT 1
58692: PUSH
58693: LD_INT 2
58695: PUSH
58696: LD_INT 3
58698: PUSH
58699: LD_INT 4
58701: PUSH
58702: LD_INT 5
58704: PUSH
58705: LD_INT 6
58707: PUSH
58708: LD_INT 7
58710: PUSH
58711: LD_INT 8
58713: PUSH
58714: LD_INT 9
58716: PUSH
58717: LD_INT 10
58719: PUSH
58720: LD_INT 11
58722: PUSH
58723: LD_INT 12
58725: PUSH
58726: LD_INT 13
58728: PUSH
58729: LD_INT 14
58731: PUSH
58732: LD_INT 15
58734: PUSH
58735: LD_INT 16
58737: PUSH
58738: LD_INT 17
58740: PUSH
58741: LD_INT 18
58743: PUSH
58744: LD_INT 19
58746: PUSH
58747: LD_INT 20
58749: PUSH
58750: LD_INT 21
58752: PUSH
58753: LD_INT 22
58755: PUSH
58756: LD_INT 23
58758: PUSH
58759: LD_INT 24
58761: PUSH
58762: LD_INT 25
58764: PUSH
58765: LD_INT 26
58767: PUSH
58768: LD_INT 27
58770: PUSH
58771: LD_INT 28
58773: PUSH
58774: LD_INT 29
58776: PUSH
58777: LD_INT 30
58779: PUSH
58780: LD_INT 31
58782: PUSH
58783: LD_INT 32
58785: PUSH
58786: LD_INT 33
58788: PUSH
58789: LD_INT 34
58791: PUSH
58792: LD_INT 35
58794: PUSH
58795: LD_INT 36
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 101
58838: PUSH
58839: LD_INT 102
58841: PUSH
58842: LD_INT 103
58844: PUSH
58845: LD_INT 104
58847: PUSH
58848: LD_INT 105
58850: PUSH
58851: LD_INT 106
58853: PUSH
58854: LD_INT 107
58856: PUSH
58857: LD_INT 108
58859: PUSH
58860: LD_INT 109
58862: PUSH
58863: LD_INT 110
58865: PUSH
58866: LD_INT 111
58868: PUSH
58869: LD_INT 112
58871: PUSH
58872: LD_INT 113
58874: PUSH
58875: LD_INT 114
58877: PUSH
58878: LD_INT 115
58880: PUSH
58881: LD_INT 116
58883: PUSH
58884: LD_INT 117
58886: PUSH
58887: LD_INT 118
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: ST_TO_ADDR
// if result then
58914: LD_VAR 0 2
58918: IFFALSE 59704
// begin normal :=  ;
58920: LD_ADDR_VAR 0 5
58924: PUSH
58925: LD_STRING 
58927: ST_TO_ADDR
// hardcore :=  ;
58928: LD_ADDR_VAR 0 6
58932: PUSH
58933: LD_STRING 
58935: ST_TO_ADDR
// active :=  ;
58936: LD_ADDR_VAR 0 7
58940: PUSH
58941: LD_STRING 
58943: ST_TO_ADDR
// for i = 1 to normalCounter do
58944: LD_ADDR_VAR 0 8
58948: PUSH
58949: DOUBLE
58950: LD_INT 1
58952: DEC
58953: ST_TO_ADDR
58954: LD_EXP 119
58958: PUSH
58959: FOR_TO
58960: IFFALSE 59061
// begin tmp := 0 ;
58962: LD_ADDR_VAR 0 3
58966: PUSH
58967: LD_STRING 0
58969: ST_TO_ADDR
// if result [ 1 ] then
58970: LD_VAR 0 2
58974: PUSH
58975: LD_INT 1
58977: ARRAY
58978: IFFALSE 59043
// if result [ 1 ] [ 1 ] = i then
58980: LD_VAR 0 2
58984: PUSH
58985: LD_INT 1
58987: ARRAY
58988: PUSH
58989: LD_INT 1
58991: ARRAY
58992: PUSH
58993: LD_VAR 0 8
58997: EQUAL
58998: IFFALSE 59043
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
59000: LD_ADDR_VAR 0 2
59004: PUSH
59005: LD_VAR 0 2
59009: PPUSH
59010: LD_INT 1
59012: PPUSH
59013: LD_VAR 0 2
59017: PUSH
59018: LD_INT 1
59020: ARRAY
59021: PPUSH
59022: LD_INT 1
59024: PPUSH
59025: CALL_OW 3
59029: PPUSH
59030: CALL_OW 1
59034: ST_TO_ADDR
// tmp := 1 ;
59035: LD_ADDR_VAR 0 3
59039: PUSH
59040: LD_STRING 1
59042: ST_TO_ADDR
// end ; normal := normal & tmp ;
59043: LD_ADDR_VAR 0 5
59047: PUSH
59048: LD_VAR 0 5
59052: PUSH
59053: LD_VAR 0 3
59057: STR
59058: ST_TO_ADDR
// end ;
59059: GO 58959
59061: POP
59062: POP
// for i = 1 to hardcoreCounter do
59063: LD_ADDR_VAR 0 8
59067: PUSH
59068: DOUBLE
59069: LD_INT 1
59071: DEC
59072: ST_TO_ADDR
59073: LD_EXP 120
59077: PUSH
59078: FOR_TO
59079: IFFALSE 59184
// begin tmp := 0 ;
59081: LD_ADDR_VAR 0 3
59085: PUSH
59086: LD_STRING 0
59088: ST_TO_ADDR
// if result [ 2 ] then
59089: LD_VAR 0 2
59093: PUSH
59094: LD_INT 2
59096: ARRAY
59097: IFFALSE 59166
// if result [ 2 ] [ 1 ] = 100 + i then
59099: LD_VAR 0 2
59103: PUSH
59104: LD_INT 2
59106: ARRAY
59107: PUSH
59108: LD_INT 1
59110: ARRAY
59111: PUSH
59112: LD_INT 100
59114: PUSH
59115: LD_VAR 0 8
59119: PLUS
59120: EQUAL
59121: IFFALSE 59166
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
59123: LD_ADDR_VAR 0 2
59127: PUSH
59128: LD_VAR 0 2
59132: PPUSH
59133: LD_INT 2
59135: PPUSH
59136: LD_VAR 0 2
59140: PUSH
59141: LD_INT 2
59143: ARRAY
59144: PPUSH
59145: LD_INT 1
59147: PPUSH
59148: CALL_OW 3
59152: PPUSH
59153: CALL_OW 1
59157: ST_TO_ADDR
// tmp := 1 ;
59158: LD_ADDR_VAR 0 3
59162: PUSH
59163: LD_STRING 1
59165: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
59166: LD_ADDR_VAR 0 6
59170: PUSH
59171: LD_VAR 0 6
59175: PUSH
59176: LD_VAR 0 3
59180: STR
59181: ST_TO_ADDR
// end ;
59182: GO 59078
59184: POP
59185: POP
// if isGameLoad then
59186: LD_VAR 0 1
59190: IFFALSE 59665
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
59192: LD_ADDR_VAR 0 4
59196: PUSH
59197: LD_EXP 123
59201: PUSH
59202: LD_EXP 122
59206: PUSH
59207: LD_EXP 124
59211: PUSH
59212: LD_EXP 121
59216: PUSH
59217: LD_EXP 125
59221: PUSH
59222: LD_EXP 126
59226: PUSH
59227: LD_EXP 127
59231: PUSH
59232: LD_EXP 128
59236: PUSH
59237: LD_EXP 129
59241: PUSH
59242: LD_EXP 130
59246: PUSH
59247: LD_EXP 131
59251: PUSH
59252: LD_EXP 132
59256: PUSH
59257: LD_EXP 133
59261: PUSH
59262: LD_EXP 134
59266: PUSH
59267: LD_EXP 142
59271: PUSH
59272: LD_EXP 143
59276: PUSH
59277: LD_EXP 144
59281: PUSH
59282: LD_EXP 145
59286: PUSH
59287: LD_EXP 147
59291: PUSH
59292: LD_EXP 148
59296: PUSH
59297: LD_EXP 149
59301: PUSH
59302: LD_EXP 152
59306: PUSH
59307: LD_EXP 154
59311: PUSH
59312: LD_EXP 155
59316: PUSH
59317: LD_EXP 156
59321: PUSH
59322: LD_EXP 158
59326: PUSH
59327: LD_EXP 159
59331: PUSH
59332: LD_EXP 162
59336: PUSH
59337: LD_EXP 163
59341: PUSH
59342: LD_EXP 164
59346: PUSH
59347: LD_EXP 165
59351: PUSH
59352: LD_EXP 166
59356: PUSH
59357: LD_EXP 167
59361: PUSH
59362: LD_EXP 168
59366: PUSH
59367: LD_EXP 169
59371: PUSH
59372: LD_EXP 170
59376: PUSH
59377: LD_EXP 135
59381: PUSH
59382: LD_EXP 136
59386: PUSH
59387: LD_EXP 139
59391: PUSH
59392: LD_EXP 140
59396: PUSH
59397: LD_EXP 141
59401: PUSH
59402: LD_EXP 137
59406: PUSH
59407: LD_EXP 138
59411: PUSH
59412: LD_EXP 146
59416: PUSH
59417: LD_EXP 150
59421: PUSH
59422: LD_EXP 151
59426: PUSH
59427: LD_EXP 153
59431: PUSH
59432: LD_EXP 157
59436: PUSH
59437: LD_EXP 160
59441: PUSH
59442: LD_EXP 161
59446: PUSH
59447: LD_EXP 171
59451: PUSH
59452: LD_EXP 172
59456: PUSH
59457: LD_EXP 173
59461: PUSH
59462: LD_EXP 174
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: ST_TO_ADDR
// tmp :=  ;
59523: LD_ADDR_VAR 0 3
59527: PUSH
59528: LD_STRING 
59530: ST_TO_ADDR
// for i = 1 to normalCounter do
59531: LD_ADDR_VAR 0 8
59535: PUSH
59536: DOUBLE
59537: LD_INT 1
59539: DEC
59540: ST_TO_ADDR
59541: LD_EXP 119
59545: PUSH
59546: FOR_TO
59547: IFFALSE 59583
// begin if flags [ i ] then
59549: LD_VAR 0 4
59553: PUSH
59554: LD_VAR 0 8
59558: ARRAY
59559: IFFALSE 59581
// tmp := tmp & i & ; ;
59561: LD_ADDR_VAR 0 3
59565: PUSH
59566: LD_VAR 0 3
59570: PUSH
59571: LD_VAR 0 8
59575: STR
59576: PUSH
59577: LD_STRING ;
59579: STR
59580: ST_TO_ADDR
// end ;
59581: GO 59546
59583: POP
59584: POP
// for i = 1 to hardcoreCounter do
59585: LD_ADDR_VAR 0 8
59589: PUSH
59590: DOUBLE
59591: LD_INT 1
59593: DEC
59594: ST_TO_ADDR
59595: LD_EXP 120
59599: PUSH
59600: FOR_TO
59601: IFFALSE 59647
// begin if flags [ normalCounter + i ] then
59603: LD_VAR 0 4
59607: PUSH
59608: LD_EXP 119
59612: PUSH
59613: LD_VAR 0 8
59617: PLUS
59618: ARRAY
59619: IFFALSE 59645
// tmp := tmp & ( 100 + i ) & ; ;
59621: LD_ADDR_VAR 0 3
59625: PUSH
59626: LD_VAR 0 3
59630: PUSH
59631: LD_INT 100
59633: PUSH
59634: LD_VAR 0 8
59638: PLUS
59639: STR
59640: PUSH
59641: LD_STRING ;
59643: STR
59644: ST_TO_ADDR
// end ;
59645: GO 59600
59647: POP
59648: POP
// if tmp then
59649: LD_VAR 0 3
59653: IFFALSE 59665
// active := tmp ;
59655: LD_ADDR_VAR 0 7
59659: PUSH
59660: LD_VAR 0 3
59664: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
59665: LD_STRING getStreamItemsFromMission("
59667: PUSH
59668: LD_VAR 0 5
59672: STR
59673: PUSH
59674: LD_STRING ","
59676: STR
59677: PUSH
59678: LD_VAR 0 6
59682: STR
59683: PUSH
59684: LD_STRING ","
59686: STR
59687: PUSH
59688: LD_VAR 0 7
59692: STR
59693: PUSH
59694: LD_STRING ")
59696: STR
59697: PPUSH
59698: CALL_OW 559
// end else
59702: GO 59711
// ToLua ( getStreamItemsFromMission("","","") ) ;
59704: LD_STRING getStreamItemsFromMission("","","")
59706: PPUSH
59707: CALL_OW 559
// end ;
59711: LD_VAR 0 2
59715: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
59716: LD_EXP 118
59720: PUSH
59721: LD_EXP 123
59725: AND
59726: IFFALSE 59850
59728: GO 59730
59730: DISABLE
59731: LD_INT 0
59733: PPUSH
59734: PPUSH
// begin enable ;
59735: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
59736: LD_ADDR_VAR 0 2
59740: PUSH
59741: LD_INT 22
59743: PUSH
59744: LD_OWVAR 2
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 2
59755: PUSH
59756: LD_INT 34
59758: PUSH
59759: LD_INT 7
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 34
59768: PUSH
59769: LD_INT 45
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 34
59778: PUSH
59779: LD_INT 28
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 34
59788: PUSH
59789: LD_INT 47
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PPUSH
59807: CALL_OW 69
59811: ST_TO_ADDR
// if not tmp then
59812: LD_VAR 0 2
59816: NOT
59817: IFFALSE 59821
// exit ;
59819: GO 59850
// for i in tmp do
59821: LD_ADDR_VAR 0 1
59825: PUSH
59826: LD_VAR 0 2
59830: PUSH
59831: FOR_IN
59832: IFFALSE 59848
// begin SetLives ( i , 0 ) ;
59834: LD_VAR 0 1
59838: PPUSH
59839: LD_INT 0
59841: PPUSH
59842: CALL_OW 234
// end ;
59846: GO 59831
59848: POP
59849: POP
// end ;
59850: PPOPN 2
59852: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
59853: LD_EXP 118
59857: PUSH
59858: LD_EXP 124
59862: AND
59863: IFFALSE 59947
59865: GO 59867
59867: DISABLE
59868: LD_INT 0
59870: PPUSH
59871: PPUSH
// begin enable ;
59872: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
59873: LD_ADDR_VAR 0 2
59877: PUSH
59878: LD_INT 22
59880: PUSH
59881: LD_OWVAR 2
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 32
59892: PUSH
59893: LD_INT 3
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PPUSH
59904: CALL_OW 69
59908: ST_TO_ADDR
// if not tmp then
59909: LD_VAR 0 2
59913: NOT
59914: IFFALSE 59918
// exit ;
59916: GO 59947
// for i in tmp do
59918: LD_ADDR_VAR 0 1
59922: PUSH
59923: LD_VAR 0 2
59927: PUSH
59928: FOR_IN
59929: IFFALSE 59945
// begin SetLives ( i , 0 ) ;
59931: LD_VAR 0 1
59935: PPUSH
59936: LD_INT 0
59938: PPUSH
59939: CALL_OW 234
// end ;
59943: GO 59928
59945: POP
59946: POP
// end ;
59947: PPOPN 2
59949: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
59950: LD_EXP 118
59954: PUSH
59955: LD_EXP 121
59959: AND
59960: IFFALSE 60053
59962: GO 59964
59964: DISABLE
59965: LD_INT 0
59967: PPUSH
// begin enable ;
59968: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
59969: LD_ADDR_VAR 0 1
59973: PUSH
59974: LD_INT 22
59976: PUSH
59977: LD_OWVAR 2
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 2
59988: PUSH
59989: LD_INT 25
59991: PUSH
59992: LD_INT 5
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 25
60001: PUSH
60002: LD_INT 9
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 25
60011: PUSH
60012: LD_INT 8
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PPUSH
60029: CALL_OW 69
60033: PUSH
60034: FOR_IN
60035: IFFALSE 60051
// begin SetClass ( i , 1 ) ;
60037: LD_VAR 0 1
60041: PPUSH
60042: LD_INT 1
60044: PPUSH
60045: CALL_OW 336
// end ;
60049: GO 60034
60051: POP
60052: POP
// end ;
60053: PPOPN 1
60055: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
60056: LD_EXP 118
60060: PUSH
60061: LD_EXP 122
60065: AND
60066: PUSH
60067: LD_OWVAR 65
60071: PUSH
60072: LD_INT 7
60074: LESS
60075: AND
60076: IFFALSE 60090
60078: GO 60080
60080: DISABLE
// begin enable ;
60081: ENABLE
// game_speed := 7 ;
60082: LD_ADDR_OWVAR 65
60086: PUSH
60087: LD_INT 7
60089: ST_TO_ADDR
// end ;
60090: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
60091: LD_EXP 118
60095: PUSH
60096: LD_EXP 125
60100: AND
60101: IFFALSE 60303
60103: GO 60105
60105: DISABLE
60106: LD_INT 0
60108: PPUSH
60109: PPUSH
60110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
60111: LD_ADDR_VAR 0 3
60115: PUSH
60116: LD_INT 81
60118: PUSH
60119: LD_OWVAR 2
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 21
60130: PUSH
60131: LD_INT 1
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PPUSH
60142: CALL_OW 69
60146: ST_TO_ADDR
// if not tmp then
60147: LD_VAR 0 3
60151: NOT
60152: IFFALSE 60156
// exit ;
60154: GO 60303
// if tmp > 5 then
60156: LD_VAR 0 3
60160: PUSH
60161: LD_INT 5
60163: GREATER
60164: IFFALSE 60176
// k := 5 else
60166: LD_ADDR_VAR 0 2
60170: PUSH
60171: LD_INT 5
60173: ST_TO_ADDR
60174: GO 60186
// k := tmp ;
60176: LD_ADDR_VAR 0 2
60180: PUSH
60181: LD_VAR 0 3
60185: ST_TO_ADDR
// for i := 1 to k do
60186: LD_ADDR_VAR 0 1
60190: PUSH
60191: DOUBLE
60192: LD_INT 1
60194: DEC
60195: ST_TO_ADDR
60196: LD_VAR 0 2
60200: PUSH
60201: FOR_TO
60202: IFFALSE 60301
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
60204: LD_VAR 0 3
60208: PUSH
60209: LD_VAR 0 1
60213: ARRAY
60214: PPUSH
60215: LD_VAR 0 1
60219: PUSH
60220: LD_INT 4
60222: MOD
60223: PUSH
60224: LD_INT 1
60226: PLUS
60227: PPUSH
60228: CALL_OW 259
60232: PUSH
60233: LD_INT 10
60235: LESS
60236: IFFALSE 60299
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
60238: LD_VAR 0 3
60242: PUSH
60243: LD_VAR 0 1
60247: ARRAY
60248: PPUSH
60249: LD_VAR 0 1
60253: PUSH
60254: LD_INT 4
60256: MOD
60257: PUSH
60258: LD_INT 1
60260: PLUS
60261: PPUSH
60262: LD_VAR 0 3
60266: PUSH
60267: LD_VAR 0 1
60271: ARRAY
60272: PPUSH
60273: LD_VAR 0 1
60277: PUSH
60278: LD_INT 4
60280: MOD
60281: PUSH
60282: LD_INT 1
60284: PLUS
60285: PPUSH
60286: CALL_OW 259
60290: PUSH
60291: LD_INT 1
60293: PLUS
60294: PPUSH
60295: CALL_OW 237
60299: GO 60201
60301: POP
60302: POP
// end ;
60303: PPOPN 3
60305: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
60306: LD_EXP 118
60310: PUSH
60311: LD_EXP 126
60315: AND
60316: IFFALSE 60336
60318: GO 60320
60320: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
60321: LD_INT 4
60323: PPUSH
60324: LD_OWVAR 2
60328: PPUSH
60329: LD_INT 0
60331: PPUSH
60332: CALL_OW 324
60336: END
// every 0 0$1 trigger StreamModeActive and sShovel do
60337: LD_EXP 118
60341: PUSH
60342: LD_EXP 155
60346: AND
60347: IFFALSE 60367
60349: GO 60351
60351: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
60352: LD_INT 19
60354: PPUSH
60355: LD_OWVAR 2
60359: PPUSH
60360: LD_INT 0
60362: PPUSH
60363: CALL_OW 324
60367: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
60368: LD_EXP 118
60372: PUSH
60373: LD_EXP 127
60377: AND
60378: IFFALSE 60480
60380: GO 60382
60382: DISABLE
60383: LD_INT 0
60385: PPUSH
60386: PPUSH
// begin enable ;
60387: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
60388: LD_ADDR_VAR 0 2
60392: PUSH
60393: LD_INT 22
60395: PUSH
60396: LD_OWVAR 2
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 2
60407: PUSH
60408: LD_INT 34
60410: PUSH
60411: LD_INT 11
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 34
60420: PUSH
60421: LD_INT 30
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: LIST
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PPUSH
60437: CALL_OW 69
60441: ST_TO_ADDR
// if not tmp then
60442: LD_VAR 0 2
60446: NOT
60447: IFFALSE 60451
// exit ;
60449: GO 60480
// for i in tmp do
60451: LD_ADDR_VAR 0 1
60455: PUSH
60456: LD_VAR 0 2
60460: PUSH
60461: FOR_IN
60462: IFFALSE 60478
// begin SetLives ( i , 0 ) ;
60464: LD_VAR 0 1
60468: PPUSH
60469: LD_INT 0
60471: PPUSH
60472: CALL_OW 234
// end ;
60476: GO 60461
60478: POP
60479: POP
// end ;
60480: PPOPN 2
60482: END
// every 0 0$1 trigger StreamModeActive and sBunker do
60483: LD_EXP 118
60487: PUSH
60488: LD_EXP 128
60492: AND
60493: IFFALSE 60513
60495: GO 60497
60497: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
60498: LD_INT 32
60500: PPUSH
60501: LD_OWVAR 2
60505: PPUSH
60506: LD_INT 0
60508: PPUSH
60509: CALL_OW 324
60513: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
60514: LD_EXP 118
60518: PUSH
60519: LD_EXP 129
60523: AND
60524: IFFALSE 60705
60526: GO 60528
60528: DISABLE
60529: LD_INT 0
60531: PPUSH
60532: PPUSH
60533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
60534: LD_ADDR_VAR 0 2
60538: PUSH
60539: LD_INT 22
60541: PUSH
60542: LD_OWVAR 2
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 33
60553: PUSH
60554: LD_INT 3
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PPUSH
60565: CALL_OW 69
60569: ST_TO_ADDR
// if not tmp then
60570: LD_VAR 0 2
60574: NOT
60575: IFFALSE 60579
// exit ;
60577: GO 60705
// side := 0 ;
60579: LD_ADDR_VAR 0 3
60583: PUSH
60584: LD_INT 0
60586: ST_TO_ADDR
// for i := 1 to 8 do
60587: LD_ADDR_VAR 0 1
60591: PUSH
60592: DOUBLE
60593: LD_INT 1
60595: DEC
60596: ST_TO_ADDR
60597: LD_INT 8
60599: PUSH
60600: FOR_TO
60601: IFFALSE 60649
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
60603: LD_OWVAR 2
60607: PUSH
60608: LD_VAR 0 1
60612: NONEQUAL
60613: PUSH
60614: LD_OWVAR 2
60618: PPUSH
60619: LD_VAR 0 1
60623: PPUSH
60624: CALL_OW 81
60628: PUSH
60629: LD_INT 2
60631: EQUAL
60632: AND
60633: IFFALSE 60647
// begin side := i ;
60635: LD_ADDR_VAR 0 3
60639: PUSH
60640: LD_VAR 0 1
60644: ST_TO_ADDR
// break ;
60645: GO 60649
// end ;
60647: GO 60600
60649: POP
60650: POP
// if not side then
60651: LD_VAR 0 3
60655: NOT
60656: IFFALSE 60660
// exit ;
60658: GO 60705
// for i := 1 to tmp do
60660: LD_ADDR_VAR 0 1
60664: PUSH
60665: DOUBLE
60666: LD_INT 1
60668: DEC
60669: ST_TO_ADDR
60670: LD_VAR 0 2
60674: PUSH
60675: FOR_TO
60676: IFFALSE 60703
// if Prob ( 60 ) then
60678: LD_INT 60
60680: PPUSH
60681: CALL_OW 13
60685: IFFALSE 60701
// SetSide ( i , side ) ;
60687: LD_VAR 0 1
60691: PPUSH
60692: LD_VAR 0 3
60696: PPUSH
60697: CALL_OW 235
60701: GO 60675
60703: POP
60704: POP
// end ;
60705: PPOPN 3
60707: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
60708: LD_EXP 118
60712: PUSH
60713: LD_EXP 131
60717: AND
60718: IFFALSE 60837
60720: GO 60722
60722: DISABLE
60723: LD_INT 0
60725: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
60726: LD_ADDR_VAR 0 1
60730: PUSH
60731: LD_INT 22
60733: PUSH
60734: LD_OWVAR 2
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 21
60745: PUSH
60746: LD_INT 1
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 3
60755: PUSH
60756: LD_INT 23
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: LIST
60774: PPUSH
60775: CALL_OW 69
60779: PUSH
60780: FOR_IN
60781: IFFALSE 60835
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
60783: LD_VAR 0 1
60787: PPUSH
60788: CALL_OW 257
60792: PUSH
60793: LD_INT 1
60795: PUSH
60796: LD_INT 2
60798: PUSH
60799: LD_INT 3
60801: PUSH
60802: LD_INT 4
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: IN
60811: IFFALSE 60833
// SetClass ( un , rand ( 1 , 4 ) ) ;
60813: LD_VAR 0 1
60817: PPUSH
60818: LD_INT 1
60820: PPUSH
60821: LD_INT 4
60823: PPUSH
60824: CALL_OW 12
60828: PPUSH
60829: CALL_OW 336
60833: GO 60780
60835: POP
60836: POP
// end ;
60837: PPOPN 1
60839: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
60840: LD_EXP 118
60844: PUSH
60845: LD_EXP 130
60849: AND
60850: IFFALSE 60929
60852: GO 60854
60854: DISABLE
60855: LD_INT 0
60857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60858: LD_ADDR_VAR 0 1
60862: PUSH
60863: LD_INT 22
60865: PUSH
60866: LD_OWVAR 2
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 21
60877: PUSH
60878: LD_INT 3
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PPUSH
60889: CALL_OW 69
60893: ST_TO_ADDR
// if not tmp then
60894: LD_VAR 0 1
60898: NOT
60899: IFFALSE 60903
// exit ;
60901: GO 60929
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
60903: LD_VAR 0 1
60907: PUSH
60908: LD_INT 1
60910: PPUSH
60911: LD_VAR 0 1
60915: PPUSH
60916: CALL_OW 12
60920: ARRAY
60921: PPUSH
60922: LD_INT 100
60924: PPUSH
60925: CALL_OW 234
// end ;
60929: PPOPN 1
60931: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
60932: LD_EXP 118
60936: PUSH
60937: LD_EXP 132
60941: AND
60942: IFFALSE 61040
60944: GO 60946
60946: DISABLE
60947: LD_INT 0
60949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60950: LD_ADDR_VAR 0 1
60954: PUSH
60955: LD_INT 22
60957: PUSH
60958: LD_OWVAR 2
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 21
60969: PUSH
60970: LD_INT 1
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PPUSH
60981: CALL_OW 69
60985: ST_TO_ADDR
// if not tmp then
60986: LD_VAR 0 1
60990: NOT
60991: IFFALSE 60995
// exit ;
60993: GO 61040
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
60995: LD_VAR 0 1
60999: PUSH
61000: LD_INT 1
61002: PPUSH
61003: LD_VAR 0 1
61007: PPUSH
61008: CALL_OW 12
61012: ARRAY
61013: PPUSH
61014: LD_INT 1
61016: PPUSH
61017: LD_INT 4
61019: PPUSH
61020: CALL_OW 12
61024: PPUSH
61025: LD_INT 3000
61027: PPUSH
61028: LD_INT 9000
61030: PPUSH
61031: CALL_OW 12
61035: PPUSH
61036: CALL_OW 492
// end ;
61040: PPOPN 1
61042: END
// every 0 0$1 trigger StreamModeActive and sDepot do
61043: LD_EXP 118
61047: PUSH
61048: LD_EXP 133
61052: AND
61053: IFFALSE 61073
61055: GO 61057
61057: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
61058: LD_INT 1
61060: PPUSH
61061: LD_OWVAR 2
61065: PPUSH
61066: LD_INT 0
61068: PPUSH
61069: CALL_OW 324
61073: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
61074: LD_EXP 118
61078: PUSH
61079: LD_EXP 134
61083: AND
61084: IFFALSE 61167
61086: GO 61088
61088: DISABLE
61089: LD_INT 0
61091: PPUSH
61092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
61093: LD_ADDR_VAR 0 2
61097: PUSH
61098: LD_INT 22
61100: PUSH
61101: LD_OWVAR 2
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 21
61112: PUSH
61113: LD_INT 3
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PPUSH
61124: CALL_OW 69
61128: ST_TO_ADDR
// if not tmp then
61129: LD_VAR 0 2
61133: NOT
61134: IFFALSE 61138
// exit ;
61136: GO 61167
// for i in tmp do
61138: LD_ADDR_VAR 0 1
61142: PUSH
61143: LD_VAR 0 2
61147: PUSH
61148: FOR_IN
61149: IFFALSE 61165
// SetBLevel ( i , 10 ) ;
61151: LD_VAR 0 1
61155: PPUSH
61156: LD_INT 10
61158: PPUSH
61159: CALL_OW 241
61163: GO 61148
61165: POP
61166: POP
// end ;
61167: PPOPN 2
61169: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
61170: LD_EXP 118
61174: PUSH
61175: LD_EXP 135
61179: AND
61180: IFFALSE 61291
61182: GO 61184
61184: DISABLE
61185: LD_INT 0
61187: PPUSH
61188: PPUSH
61189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61190: LD_ADDR_VAR 0 3
61194: PUSH
61195: LD_INT 22
61197: PUSH
61198: LD_OWVAR 2
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 25
61209: PUSH
61210: LD_INT 1
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PPUSH
61221: CALL_OW 69
61225: ST_TO_ADDR
// if not tmp then
61226: LD_VAR 0 3
61230: NOT
61231: IFFALSE 61235
// exit ;
61233: GO 61291
// un := tmp [ rand ( 1 , tmp ) ] ;
61235: LD_ADDR_VAR 0 2
61239: PUSH
61240: LD_VAR 0 3
61244: PUSH
61245: LD_INT 1
61247: PPUSH
61248: LD_VAR 0 3
61252: PPUSH
61253: CALL_OW 12
61257: ARRAY
61258: ST_TO_ADDR
// if Crawls ( un ) then
61259: LD_VAR 0 2
61263: PPUSH
61264: CALL_OW 318
61268: IFFALSE 61279
// ComWalk ( un ) ;
61270: LD_VAR 0 2
61274: PPUSH
61275: CALL_OW 138
// SetClass ( un , class_sniper ) ;
61279: LD_VAR 0 2
61283: PPUSH
61284: LD_INT 5
61286: PPUSH
61287: CALL_OW 336
// end ;
61291: PPOPN 3
61293: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
61294: LD_EXP 118
61298: PUSH
61299: LD_EXP 136
61303: AND
61304: PUSH
61305: LD_OWVAR 67
61309: PUSH
61310: LD_INT 4
61312: LESS
61313: AND
61314: IFFALSE 61333
61316: GO 61318
61318: DISABLE
// begin Difficulty := Difficulty + 1 ;
61319: LD_ADDR_OWVAR 67
61323: PUSH
61324: LD_OWVAR 67
61328: PUSH
61329: LD_INT 1
61331: PLUS
61332: ST_TO_ADDR
// end ;
61333: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
61334: LD_EXP 118
61338: PUSH
61339: LD_EXP 137
61343: AND
61344: IFFALSE 61447
61346: GO 61348
61348: DISABLE
61349: LD_INT 0
61351: PPUSH
// begin for i := 1 to 5 do
61352: LD_ADDR_VAR 0 1
61356: PUSH
61357: DOUBLE
61358: LD_INT 1
61360: DEC
61361: ST_TO_ADDR
61362: LD_INT 5
61364: PUSH
61365: FOR_TO
61366: IFFALSE 61445
// begin uc_nation := nation_nature ;
61368: LD_ADDR_OWVAR 21
61372: PUSH
61373: LD_INT 0
61375: ST_TO_ADDR
// uc_side := 0 ;
61376: LD_ADDR_OWVAR 20
61380: PUSH
61381: LD_INT 0
61383: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61384: LD_ADDR_OWVAR 29
61388: PUSH
61389: LD_INT 12
61391: PUSH
61392: LD_INT 12
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: ST_TO_ADDR
// hc_agressivity := 20 ;
61399: LD_ADDR_OWVAR 35
61403: PUSH
61404: LD_INT 20
61406: ST_TO_ADDR
// hc_class := class_tiger ;
61407: LD_ADDR_OWVAR 28
61411: PUSH
61412: LD_INT 14
61414: ST_TO_ADDR
// hc_gallery :=  ;
61415: LD_ADDR_OWVAR 33
61419: PUSH
61420: LD_STRING 
61422: ST_TO_ADDR
// hc_name :=  ;
61423: LD_ADDR_OWVAR 26
61427: PUSH
61428: LD_STRING 
61430: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
61431: CALL_OW 44
61435: PPUSH
61436: LD_INT 0
61438: PPUSH
61439: CALL_OW 51
// end ;
61443: GO 61365
61445: POP
61446: POP
// end ;
61447: PPOPN 1
61449: END
// every 0 0$1 trigger StreamModeActive and sBomb do
61450: LD_EXP 118
61454: PUSH
61455: LD_EXP 138
61459: AND
61460: IFFALSE 61469
61462: GO 61464
61464: DISABLE
// StreamSibBomb ;
61465: CALL 61470 0 0
61469: END
// export function StreamSibBomb ; var i , x , y ; begin
61470: LD_INT 0
61472: PPUSH
61473: PPUSH
61474: PPUSH
61475: PPUSH
// result := false ;
61476: LD_ADDR_VAR 0 1
61480: PUSH
61481: LD_INT 0
61483: ST_TO_ADDR
// for i := 1 to 16 do
61484: LD_ADDR_VAR 0 2
61488: PUSH
61489: DOUBLE
61490: LD_INT 1
61492: DEC
61493: ST_TO_ADDR
61494: LD_INT 16
61496: PUSH
61497: FOR_TO
61498: IFFALSE 61697
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61500: LD_ADDR_VAR 0 3
61504: PUSH
61505: LD_INT 10
61507: PUSH
61508: LD_INT 20
61510: PUSH
61511: LD_INT 30
61513: PUSH
61514: LD_INT 40
61516: PUSH
61517: LD_INT 50
61519: PUSH
61520: LD_INT 60
61522: PUSH
61523: LD_INT 70
61525: PUSH
61526: LD_INT 80
61528: PUSH
61529: LD_INT 90
61531: PUSH
61532: LD_INT 100
61534: PUSH
61535: LD_INT 110
61537: PUSH
61538: LD_INT 120
61540: PUSH
61541: LD_INT 130
61543: PUSH
61544: LD_INT 140
61546: PUSH
61547: LD_INT 150
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 1
61569: PPUSH
61570: LD_INT 15
61572: PPUSH
61573: CALL_OW 12
61577: ARRAY
61578: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61579: LD_ADDR_VAR 0 4
61583: PUSH
61584: LD_INT 10
61586: PUSH
61587: LD_INT 20
61589: PUSH
61590: LD_INT 30
61592: PUSH
61593: LD_INT 40
61595: PUSH
61596: LD_INT 50
61598: PUSH
61599: LD_INT 60
61601: PUSH
61602: LD_INT 70
61604: PUSH
61605: LD_INT 80
61607: PUSH
61608: LD_INT 90
61610: PUSH
61611: LD_INT 100
61613: PUSH
61614: LD_INT 110
61616: PUSH
61617: LD_INT 120
61619: PUSH
61620: LD_INT 130
61622: PUSH
61623: LD_INT 140
61625: PUSH
61626: LD_INT 150
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 1
61648: PPUSH
61649: LD_INT 15
61651: PPUSH
61652: CALL_OW 12
61656: ARRAY
61657: ST_TO_ADDR
// if ValidHex ( x , y ) then
61658: LD_VAR 0 3
61662: PPUSH
61663: LD_VAR 0 4
61667: PPUSH
61668: CALL_OW 488
61672: IFFALSE 61695
// begin result := [ x , y ] ;
61674: LD_ADDR_VAR 0 1
61678: PUSH
61679: LD_VAR 0 3
61683: PUSH
61684: LD_VAR 0 4
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: ST_TO_ADDR
// break ;
61693: GO 61697
// end ; end ;
61695: GO 61497
61697: POP
61698: POP
// if result then
61699: LD_VAR 0 1
61703: IFFALSE 61763
// begin ToLua ( playSibBomb() ) ;
61705: LD_STRING playSibBomb()
61707: PPUSH
61708: CALL_OW 559
// wait ( 0 0$14 ) ;
61712: LD_INT 490
61714: PPUSH
61715: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
61719: LD_VAR 0 1
61723: PUSH
61724: LD_INT 1
61726: ARRAY
61727: PPUSH
61728: LD_VAR 0 1
61732: PUSH
61733: LD_INT 2
61735: ARRAY
61736: PPUSH
61737: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
61741: LD_VAR 0 1
61745: PUSH
61746: LD_INT 1
61748: ARRAY
61749: PPUSH
61750: LD_VAR 0 1
61754: PUSH
61755: LD_INT 2
61757: ARRAY
61758: PPUSH
61759: CALL_OW 429
// end ; end ;
61763: LD_VAR 0 1
61767: RET
// every 0 0$1 trigger StreamModeActive and sReset do
61768: LD_EXP 118
61772: PUSH
61773: LD_EXP 140
61777: AND
61778: IFFALSE 61790
61780: GO 61782
61782: DISABLE
// YouLost (  ) ;
61783: LD_STRING 
61785: PPUSH
61786: CALL_OW 104
61790: END
// every 0 0$1 trigger StreamModeActive and sFog do
61791: LD_EXP 118
61795: PUSH
61796: LD_EXP 139
61800: AND
61801: IFFALSE 61815
61803: GO 61805
61805: DISABLE
// FogOff ( your_side ) ;
61806: LD_OWVAR 2
61810: PPUSH
61811: CALL_OW 344
61815: END
// every 0 0$1 trigger StreamModeActive and sSun do
61816: LD_EXP 118
61820: PUSH
61821: LD_EXP 141
61825: AND
61826: IFFALSE 61854
61828: GO 61830
61830: DISABLE
// begin solar_recharge_percent := 0 ;
61831: LD_ADDR_OWVAR 79
61835: PUSH
61836: LD_INT 0
61838: ST_TO_ADDR
// wait ( 5 5$00 ) ;
61839: LD_INT 10500
61841: PPUSH
61842: CALL_OW 67
// solar_recharge_percent := 100 ;
61846: LD_ADDR_OWVAR 79
61850: PUSH
61851: LD_INT 100
61853: ST_TO_ADDR
// end ;
61854: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
61855: LD_EXP 118
61859: PUSH
61860: LD_EXP 142
61864: AND
61865: IFFALSE 62104
61867: GO 61869
61869: DISABLE
61870: LD_INT 0
61872: PPUSH
61873: PPUSH
61874: PPUSH
// begin tmp := [ ] ;
61875: LD_ADDR_VAR 0 3
61879: PUSH
61880: EMPTY
61881: ST_TO_ADDR
// for i := 1 to 6 do
61882: LD_ADDR_VAR 0 1
61886: PUSH
61887: DOUBLE
61888: LD_INT 1
61890: DEC
61891: ST_TO_ADDR
61892: LD_INT 6
61894: PUSH
61895: FOR_TO
61896: IFFALSE 62001
// begin uc_nation := nation_nature ;
61898: LD_ADDR_OWVAR 21
61902: PUSH
61903: LD_INT 0
61905: ST_TO_ADDR
// uc_side := 0 ;
61906: LD_ADDR_OWVAR 20
61910: PUSH
61911: LD_INT 0
61913: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61914: LD_ADDR_OWVAR 29
61918: PUSH
61919: LD_INT 12
61921: PUSH
61922: LD_INT 12
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: ST_TO_ADDR
// hc_agressivity := 20 ;
61929: LD_ADDR_OWVAR 35
61933: PUSH
61934: LD_INT 20
61936: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
61937: LD_ADDR_OWVAR 28
61941: PUSH
61942: LD_INT 17
61944: ST_TO_ADDR
// hc_gallery :=  ;
61945: LD_ADDR_OWVAR 33
61949: PUSH
61950: LD_STRING 
61952: ST_TO_ADDR
// hc_name :=  ;
61953: LD_ADDR_OWVAR 26
61957: PUSH
61958: LD_STRING 
61960: ST_TO_ADDR
// un := CreateHuman ;
61961: LD_ADDR_VAR 0 2
61965: PUSH
61966: CALL_OW 44
61970: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
61971: LD_VAR 0 2
61975: PPUSH
61976: LD_INT 1
61978: PPUSH
61979: CALL_OW 51
// tmp := tmp ^ un ;
61983: LD_ADDR_VAR 0 3
61987: PUSH
61988: LD_VAR 0 3
61992: PUSH
61993: LD_VAR 0 2
61997: ADD
61998: ST_TO_ADDR
// end ;
61999: GO 61895
62001: POP
62002: POP
// repeat wait ( 0 0$1 ) ;
62003: LD_INT 35
62005: PPUSH
62006: CALL_OW 67
// for un in tmp do
62010: LD_ADDR_VAR 0 2
62014: PUSH
62015: LD_VAR 0 3
62019: PUSH
62020: FOR_IN
62021: IFFALSE 62095
// begin if IsDead ( un ) then
62023: LD_VAR 0 2
62027: PPUSH
62028: CALL_OW 301
62032: IFFALSE 62052
// begin tmp := tmp diff un ;
62034: LD_ADDR_VAR 0 3
62038: PUSH
62039: LD_VAR 0 3
62043: PUSH
62044: LD_VAR 0 2
62048: DIFF
62049: ST_TO_ADDR
// continue ;
62050: GO 62020
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
62052: LD_VAR 0 2
62056: PPUSH
62057: LD_INT 3
62059: PUSH
62060: LD_INT 22
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PPUSH
62074: CALL_OW 69
62078: PPUSH
62079: LD_VAR 0 2
62083: PPUSH
62084: CALL_OW 74
62088: PPUSH
62089: CALL_OW 115
// end ;
62093: GO 62020
62095: POP
62096: POP
// until not tmp ;
62097: LD_VAR 0 3
62101: NOT
62102: IFFALSE 62003
// end ;
62104: PPOPN 3
62106: END
// every 0 0$1 trigger StreamModeActive and sTroll do
62107: LD_EXP 118
62111: PUSH
62112: LD_EXP 143
62116: AND
62117: IFFALSE 62171
62119: GO 62121
62121: DISABLE
// begin ToLua ( displayTroll(); ) ;
62122: LD_STRING displayTroll();
62124: PPUSH
62125: CALL_OW 559
// wait ( 3 3$00 ) ;
62129: LD_INT 6300
62131: PPUSH
62132: CALL_OW 67
// ToLua ( hideTroll(); ) ;
62136: LD_STRING hideTroll();
62138: PPUSH
62139: CALL_OW 559
// wait ( 1 1$00 ) ;
62143: LD_INT 2100
62145: PPUSH
62146: CALL_OW 67
// ToLua ( displayTroll(); ) ;
62150: LD_STRING displayTroll();
62152: PPUSH
62153: CALL_OW 559
// wait ( 1 1$00 ) ;
62157: LD_INT 2100
62159: PPUSH
62160: CALL_OW 67
// ToLua ( hideTroll(); ) ;
62164: LD_STRING hideTroll();
62166: PPUSH
62167: CALL_OW 559
// end ;
62171: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
62172: LD_EXP 118
62176: PUSH
62177: LD_EXP 144
62181: AND
62182: IFFALSE 62245
62184: GO 62186
62186: DISABLE
62187: LD_INT 0
62189: PPUSH
// begin p := 0 ;
62190: LD_ADDR_VAR 0 1
62194: PUSH
62195: LD_INT 0
62197: ST_TO_ADDR
// repeat game_speed := 1 ;
62198: LD_ADDR_OWVAR 65
62202: PUSH
62203: LD_INT 1
62205: ST_TO_ADDR
// wait ( 0 0$1 ) ;
62206: LD_INT 35
62208: PPUSH
62209: CALL_OW 67
// p := p + 1 ;
62213: LD_ADDR_VAR 0 1
62217: PUSH
62218: LD_VAR 0 1
62222: PUSH
62223: LD_INT 1
62225: PLUS
62226: ST_TO_ADDR
// until p >= 60 ;
62227: LD_VAR 0 1
62231: PUSH
62232: LD_INT 60
62234: GREATEREQUAL
62235: IFFALSE 62198
// game_speed := 4 ;
62237: LD_ADDR_OWVAR 65
62241: PUSH
62242: LD_INT 4
62244: ST_TO_ADDR
// end ;
62245: PPOPN 1
62247: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
62248: LD_EXP 118
62252: PUSH
62253: LD_EXP 145
62257: AND
62258: IFFALSE 62404
62260: GO 62262
62262: DISABLE
62263: LD_INT 0
62265: PPUSH
62266: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62267: LD_ADDR_VAR 0 1
62271: PUSH
62272: LD_INT 22
62274: PUSH
62275: LD_OWVAR 2
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 2
62286: PUSH
62287: LD_INT 30
62289: PUSH
62290: LD_INT 0
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 30
62299: PUSH
62300: LD_INT 1
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: LIST
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PPUSH
62316: CALL_OW 69
62320: ST_TO_ADDR
// if not depot then
62321: LD_VAR 0 1
62325: NOT
62326: IFFALSE 62330
// exit ;
62328: GO 62404
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
62330: LD_ADDR_VAR 0 2
62334: PUSH
62335: LD_VAR 0 1
62339: PUSH
62340: LD_INT 1
62342: PPUSH
62343: LD_VAR 0 1
62347: PPUSH
62348: CALL_OW 12
62352: ARRAY
62353: PPUSH
62354: CALL_OW 274
62358: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
62359: LD_VAR 0 2
62363: PPUSH
62364: LD_INT 1
62366: PPUSH
62367: LD_INT 0
62369: PPUSH
62370: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
62374: LD_VAR 0 2
62378: PPUSH
62379: LD_INT 2
62381: PPUSH
62382: LD_INT 0
62384: PPUSH
62385: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
62389: LD_VAR 0 2
62393: PPUSH
62394: LD_INT 3
62396: PPUSH
62397: LD_INT 0
62399: PPUSH
62400: CALL_OW 277
// end ;
62404: PPOPN 2
62406: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
62407: LD_EXP 118
62411: PUSH
62412: LD_EXP 146
62416: AND
62417: IFFALSE 62514
62419: GO 62421
62421: DISABLE
62422: LD_INT 0
62424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62425: LD_ADDR_VAR 0 1
62429: PUSH
62430: LD_INT 22
62432: PUSH
62433: LD_OWVAR 2
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 21
62444: PUSH
62445: LD_INT 1
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 3
62454: PUSH
62455: LD_INT 23
62457: PUSH
62458: LD_INT 0
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: LIST
62473: PPUSH
62474: CALL_OW 69
62478: ST_TO_ADDR
// if not tmp then
62479: LD_VAR 0 1
62483: NOT
62484: IFFALSE 62488
// exit ;
62486: GO 62514
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
62488: LD_VAR 0 1
62492: PUSH
62493: LD_INT 1
62495: PPUSH
62496: LD_VAR 0 1
62500: PPUSH
62501: CALL_OW 12
62505: ARRAY
62506: PPUSH
62507: LD_INT 200
62509: PPUSH
62510: CALL_OW 234
// end ;
62514: PPOPN 1
62516: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
62517: LD_EXP 118
62521: PUSH
62522: LD_EXP 147
62526: AND
62527: IFFALSE 62606
62529: GO 62531
62531: DISABLE
62532: LD_INT 0
62534: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
62535: LD_ADDR_VAR 0 1
62539: PUSH
62540: LD_INT 22
62542: PUSH
62543: LD_OWVAR 2
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 21
62554: PUSH
62555: LD_INT 2
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PPUSH
62566: CALL_OW 69
62570: ST_TO_ADDR
// if not tmp then
62571: LD_VAR 0 1
62575: NOT
62576: IFFALSE 62580
// exit ;
62578: GO 62606
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
62580: LD_VAR 0 1
62584: PUSH
62585: LD_INT 1
62587: PPUSH
62588: LD_VAR 0 1
62592: PPUSH
62593: CALL_OW 12
62597: ARRAY
62598: PPUSH
62599: LD_INT 60
62601: PPUSH
62602: CALL_OW 234
// end ;
62606: PPOPN 1
62608: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
62609: LD_EXP 118
62613: PUSH
62614: LD_EXP 148
62618: AND
62619: IFFALSE 62718
62621: GO 62623
62623: DISABLE
62624: LD_INT 0
62626: PPUSH
62627: PPUSH
// begin enable ;
62628: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
62629: LD_ADDR_VAR 0 1
62633: PUSH
62634: LD_INT 22
62636: PUSH
62637: LD_OWVAR 2
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 61
62648: PUSH
62649: EMPTY
62650: LIST
62651: PUSH
62652: LD_INT 33
62654: PUSH
62655: LD_INT 2
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: LIST
62666: PPUSH
62667: CALL_OW 69
62671: ST_TO_ADDR
// if not tmp then
62672: LD_VAR 0 1
62676: NOT
62677: IFFALSE 62681
// exit ;
62679: GO 62718
// for i in tmp do
62681: LD_ADDR_VAR 0 2
62685: PUSH
62686: LD_VAR 0 1
62690: PUSH
62691: FOR_IN
62692: IFFALSE 62716
// if IsControledBy ( i ) then
62694: LD_VAR 0 2
62698: PPUSH
62699: CALL_OW 312
62703: IFFALSE 62714
// ComUnlink ( i ) ;
62705: LD_VAR 0 2
62709: PPUSH
62710: CALL_OW 136
62714: GO 62691
62716: POP
62717: POP
// end ;
62718: PPOPN 2
62720: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
62721: LD_EXP 118
62725: PUSH
62726: LD_EXP 149
62730: AND
62731: IFFALSE 62871
62733: GO 62735
62735: DISABLE
62736: LD_INT 0
62738: PPUSH
62739: PPUSH
// begin ToLua ( displayPowell(); ) ;
62740: LD_STRING displayPowell();
62742: PPUSH
62743: CALL_OW 559
// uc_side := 0 ;
62747: LD_ADDR_OWVAR 20
62751: PUSH
62752: LD_INT 0
62754: ST_TO_ADDR
// uc_nation := 2 ;
62755: LD_ADDR_OWVAR 21
62759: PUSH
62760: LD_INT 2
62762: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
62763: LD_ADDR_OWVAR 37
62767: PUSH
62768: LD_INT 14
62770: ST_TO_ADDR
// vc_engine := engine_siberite ;
62771: LD_ADDR_OWVAR 39
62775: PUSH
62776: LD_INT 3
62778: ST_TO_ADDR
// vc_control := control_apeman ;
62779: LD_ADDR_OWVAR 38
62783: PUSH
62784: LD_INT 5
62786: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
62787: LD_ADDR_OWVAR 40
62791: PUSH
62792: LD_INT 29
62794: ST_TO_ADDR
// un := CreateVehicle ;
62795: LD_ADDR_VAR 0 2
62799: PUSH
62800: CALL_OW 45
62804: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62805: LD_VAR 0 2
62809: PPUSH
62810: LD_INT 1
62812: PPUSH
62813: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
62817: LD_INT 35
62819: PPUSH
62820: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
62824: LD_VAR 0 2
62828: PPUSH
62829: LD_INT 22
62831: PUSH
62832: LD_OWVAR 2
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PPUSH
62841: CALL_OW 69
62845: PPUSH
62846: LD_VAR 0 2
62850: PPUSH
62851: CALL_OW 74
62855: PPUSH
62856: CALL_OW 115
// until IsDead ( un ) ;
62860: LD_VAR 0 2
62864: PPUSH
62865: CALL_OW 301
62869: IFFALSE 62817
// end ;
62871: PPOPN 2
62873: END
// every 0 0$1 trigger StreamModeActive and sStu do
62874: LD_EXP 118
62878: PUSH
62879: LD_EXP 157
62883: AND
62884: IFFALSE 62900
62886: GO 62888
62888: DISABLE
// begin ToLua ( displayStucuk(); ) ;
62889: LD_STRING displayStucuk();
62891: PPUSH
62892: CALL_OW 559
// ResetFog ;
62896: CALL_OW 335
// end ;
62900: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
62901: LD_EXP 118
62905: PUSH
62906: LD_EXP 150
62910: AND
62911: IFFALSE 63052
62913: GO 62915
62915: DISABLE
62916: LD_INT 0
62918: PPUSH
62919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62920: LD_ADDR_VAR 0 2
62924: PUSH
62925: LD_INT 22
62927: PUSH
62928: LD_OWVAR 2
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 21
62939: PUSH
62940: LD_INT 1
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PPUSH
62951: CALL_OW 69
62955: ST_TO_ADDR
// if not tmp then
62956: LD_VAR 0 2
62960: NOT
62961: IFFALSE 62965
// exit ;
62963: GO 63052
// un := tmp [ rand ( 1 , tmp ) ] ;
62965: LD_ADDR_VAR 0 1
62969: PUSH
62970: LD_VAR 0 2
62974: PUSH
62975: LD_INT 1
62977: PPUSH
62978: LD_VAR 0 2
62982: PPUSH
62983: CALL_OW 12
62987: ARRAY
62988: ST_TO_ADDR
// SetSide ( un , 0 ) ;
62989: LD_VAR 0 1
62993: PPUSH
62994: LD_INT 0
62996: PPUSH
62997: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
63001: LD_VAR 0 1
63005: PPUSH
63006: LD_OWVAR 3
63010: PUSH
63011: LD_VAR 0 1
63015: DIFF
63016: PPUSH
63017: LD_VAR 0 1
63021: PPUSH
63022: CALL_OW 74
63026: PPUSH
63027: CALL_OW 115
// wait ( 0 0$20 ) ;
63031: LD_INT 700
63033: PPUSH
63034: CALL_OW 67
// SetSide ( un , your_side ) ;
63038: LD_VAR 0 1
63042: PPUSH
63043: LD_OWVAR 2
63047: PPUSH
63048: CALL_OW 235
// end ;
63052: PPOPN 2
63054: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
63055: LD_EXP 118
63059: PUSH
63060: LD_EXP 151
63064: AND
63065: IFFALSE 63171
63067: GO 63069
63069: DISABLE
63070: LD_INT 0
63072: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63073: LD_ADDR_VAR 0 1
63077: PUSH
63078: LD_INT 22
63080: PUSH
63081: LD_OWVAR 2
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 2
63092: PUSH
63093: LD_INT 30
63095: PUSH
63096: LD_INT 0
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 30
63105: PUSH
63106: LD_INT 1
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: LIST
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PPUSH
63122: CALL_OW 69
63126: ST_TO_ADDR
// if not depot then
63127: LD_VAR 0 1
63131: NOT
63132: IFFALSE 63136
// exit ;
63134: GO 63171
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
63136: LD_VAR 0 1
63140: PUSH
63141: LD_INT 1
63143: ARRAY
63144: PPUSH
63145: CALL_OW 250
63149: PPUSH
63150: LD_VAR 0 1
63154: PUSH
63155: LD_INT 1
63157: ARRAY
63158: PPUSH
63159: CALL_OW 251
63163: PPUSH
63164: LD_INT 70
63166: PPUSH
63167: CALL_OW 495
// end ;
63171: PPOPN 1
63173: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
63174: LD_EXP 118
63178: PUSH
63179: LD_EXP 152
63183: AND
63184: IFFALSE 63395
63186: GO 63188
63188: DISABLE
63189: LD_INT 0
63191: PPUSH
63192: PPUSH
63193: PPUSH
63194: PPUSH
63195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
63196: LD_ADDR_VAR 0 5
63200: PUSH
63201: LD_INT 22
63203: PUSH
63204: LD_OWVAR 2
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 21
63215: PUSH
63216: LD_INT 1
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PPUSH
63227: CALL_OW 69
63231: ST_TO_ADDR
// if not tmp then
63232: LD_VAR 0 5
63236: NOT
63237: IFFALSE 63241
// exit ;
63239: GO 63395
// for i in tmp do
63241: LD_ADDR_VAR 0 1
63245: PUSH
63246: LD_VAR 0 5
63250: PUSH
63251: FOR_IN
63252: IFFALSE 63393
// begin d := rand ( 0 , 5 ) ;
63254: LD_ADDR_VAR 0 4
63258: PUSH
63259: LD_INT 0
63261: PPUSH
63262: LD_INT 5
63264: PPUSH
63265: CALL_OW 12
63269: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
63270: LD_ADDR_VAR 0 2
63274: PUSH
63275: LD_VAR 0 1
63279: PPUSH
63280: CALL_OW 250
63284: PPUSH
63285: LD_VAR 0 4
63289: PPUSH
63290: LD_INT 3
63292: PPUSH
63293: LD_INT 12
63295: PPUSH
63296: CALL_OW 12
63300: PPUSH
63301: CALL_OW 272
63305: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
63306: LD_ADDR_VAR 0 3
63310: PUSH
63311: LD_VAR 0 1
63315: PPUSH
63316: CALL_OW 251
63320: PPUSH
63321: LD_VAR 0 4
63325: PPUSH
63326: LD_INT 3
63328: PPUSH
63329: LD_INT 12
63331: PPUSH
63332: CALL_OW 12
63336: PPUSH
63337: CALL_OW 273
63341: ST_TO_ADDR
// if ValidHex ( x , y ) then
63342: LD_VAR 0 2
63346: PPUSH
63347: LD_VAR 0 3
63351: PPUSH
63352: CALL_OW 488
63356: IFFALSE 63391
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
63358: LD_VAR 0 1
63362: PPUSH
63363: LD_VAR 0 2
63367: PPUSH
63368: LD_VAR 0 3
63372: PPUSH
63373: LD_INT 3
63375: PPUSH
63376: LD_INT 6
63378: PPUSH
63379: CALL_OW 12
63383: PPUSH
63384: LD_INT 1
63386: PPUSH
63387: CALL_OW 483
// end ;
63391: GO 63251
63393: POP
63394: POP
// end ;
63395: PPOPN 5
63397: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
63398: LD_EXP 118
63402: PUSH
63403: LD_EXP 153
63407: AND
63408: IFFALSE 63502
63410: GO 63412
63412: DISABLE
63413: LD_INT 0
63415: PPUSH
63416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
63417: LD_ADDR_VAR 0 2
63421: PUSH
63422: LD_INT 22
63424: PUSH
63425: LD_OWVAR 2
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 32
63436: PUSH
63437: LD_INT 1
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 21
63446: PUSH
63447: LD_INT 2
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: LIST
63458: PPUSH
63459: CALL_OW 69
63463: ST_TO_ADDR
// if not tmp then
63464: LD_VAR 0 2
63468: NOT
63469: IFFALSE 63473
// exit ;
63471: GO 63502
// for i in tmp do
63473: LD_ADDR_VAR 0 1
63477: PUSH
63478: LD_VAR 0 2
63482: PUSH
63483: FOR_IN
63484: IFFALSE 63500
// SetFuel ( i , 0 ) ;
63486: LD_VAR 0 1
63490: PPUSH
63491: LD_INT 0
63493: PPUSH
63494: CALL_OW 240
63498: GO 63483
63500: POP
63501: POP
// end ;
63502: PPOPN 2
63504: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
63505: LD_EXP 118
63509: PUSH
63510: LD_EXP 154
63514: AND
63515: IFFALSE 63581
63517: GO 63519
63519: DISABLE
63520: LD_INT 0
63522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
63523: LD_ADDR_VAR 0 1
63527: PUSH
63528: LD_INT 22
63530: PUSH
63531: LD_OWVAR 2
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 30
63542: PUSH
63543: LD_INT 29
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PPUSH
63554: CALL_OW 69
63558: ST_TO_ADDR
// if not tmp then
63559: LD_VAR 0 1
63563: NOT
63564: IFFALSE 63568
// exit ;
63566: GO 63581
// DestroyUnit ( tmp [ 1 ] ) ;
63568: LD_VAR 0 1
63572: PUSH
63573: LD_INT 1
63575: ARRAY
63576: PPUSH
63577: CALL_OW 65
// end ;
63581: PPOPN 1
63583: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
63584: LD_EXP 118
63588: PUSH
63589: LD_EXP 156
63593: AND
63594: IFFALSE 63723
63596: GO 63598
63598: DISABLE
63599: LD_INT 0
63601: PPUSH
// begin uc_side := 0 ;
63602: LD_ADDR_OWVAR 20
63606: PUSH
63607: LD_INT 0
63609: ST_TO_ADDR
// uc_nation := nation_arabian ;
63610: LD_ADDR_OWVAR 21
63614: PUSH
63615: LD_INT 2
63617: ST_TO_ADDR
// hc_gallery :=  ;
63618: LD_ADDR_OWVAR 33
63622: PUSH
63623: LD_STRING 
63625: ST_TO_ADDR
// hc_name :=  ;
63626: LD_ADDR_OWVAR 26
63630: PUSH
63631: LD_STRING 
63633: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
63634: LD_INT 1
63636: PPUSH
63637: LD_INT 11
63639: PPUSH
63640: LD_INT 10
63642: PPUSH
63643: CALL_OW 380
// un := CreateHuman ;
63647: LD_ADDR_VAR 0 1
63651: PUSH
63652: CALL_OW 44
63656: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63657: LD_VAR 0 1
63661: PPUSH
63662: LD_INT 1
63664: PPUSH
63665: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
63669: LD_INT 35
63671: PPUSH
63672: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
63676: LD_VAR 0 1
63680: PPUSH
63681: LD_INT 22
63683: PUSH
63684: LD_OWVAR 2
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PPUSH
63693: CALL_OW 69
63697: PPUSH
63698: LD_VAR 0 1
63702: PPUSH
63703: CALL_OW 74
63707: PPUSH
63708: CALL_OW 115
// until IsDead ( un ) ;
63712: LD_VAR 0 1
63716: PPUSH
63717: CALL_OW 301
63721: IFFALSE 63669
// end ;
63723: PPOPN 1
63725: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
63726: LD_EXP 118
63730: PUSH
63731: LD_EXP 158
63735: AND
63736: IFFALSE 63748
63738: GO 63740
63740: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
63741: LD_STRING earthquake(getX(game), 0, 32)
63743: PPUSH
63744: CALL_OW 559
63748: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
63749: LD_EXP 118
63753: PUSH
63754: LD_EXP 159
63758: AND
63759: IFFALSE 63850
63761: GO 63763
63763: DISABLE
63764: LD_INT 0
63766: PPUSH
// begin enable ;
63767: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
63768: LD_ADDR_VAR 0 1
63772: PUSH
63773: LD_INT 22
63775: PUSH
63776: LD_OWVAR 2
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 21
63787: PUSH
63788: LD_INT 2
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 33
63797: PUSH
63798: LD_INT 3
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: LIST
63809: PPUSH
63810: CALL_OW 69
63814: ST_TO_ADDR
// if not tmp then
63815: LD_VAR 0 1
63819: NOT
63820: IFFALSE 63824
// exit ;
63822: GO 63850
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
63824: LD_VAR 0 1
63828: PUSH
63829: LD_INT 1
63831: PPUSH
63832: LD_VAR 0 1
63836: PPUSH
63837: CALL_OW 12
63841: ARRAY
63842: PPUSH
63843: LD_INT 1
63845: PPUSH
63846: CALL_OW 234
// end ;
63850: PPOPN 1
63852: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
63853: LD_EXP 118
63857: PUSH
63858: LD_EXP 160
63862: AND
63863: IFFALSE 64004
63865: GO 63867
63867: DISABLE
63868: LD_INT 0
63870: PPUSH
63871: PPUSH
63872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63873: LD_ADDR_VAR 0 3
63877: PUSH
63878: LD_INT 22
63880: PUSH
63881: LD_OWVAR 2
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 25
63892: PUSH
63893: LD_INT 1
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PPUSH
63904: CALL_OW 69
63908: ST_TO_ADDR
// if not tmp then
63909: LD_VAR 0 3
63913: NOT
63914: IFFALSE 63918
// exit ;
63916: GO 64004
// un := tmp [ rand ( 1 , tmp ) ] ;
63918: LD_ADDR_VAR 0 2
63922: PUSH
63923: LD_VAR 0 3
63927: PUSH
63928: LD_INT 1
63930: PPUSH
63931: LD_VAR 0 3
63935: PPUSH
63936: CALL_OW 12
63940: ARRAY
63941: ST_TO_ADDR
// if Crawls ( un ) then
63942: LD_VAR 0 2
63946: PPUSH
63947: CALL_OW 318
63951: IFFALSE 63962
// ComWalk ( un ) ;
63953: LD_VAR 0 2
63957: PPUSH
63958: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
63962: LD_VAR 0 2
63966: PPUSH
63967: LD_INT 9
63969: PPUSH
63970: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
63974: LD_INT 28
63976: PPUSH
63977: LD_OWVAR 2
63981: PPUSH
63982: LD_INT 2
63984: PPUSH
63985: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
63989: LD_INT 29
63991: PPUSH
63992: LD_OWVAR 2
63996: PPUSH
63997: LD_INT 2
63999: PPUSH
64000: CALL_OW 322
// end ;
64004: PPOPN 3
64006: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
64007: LD_EXP 118
64011: PUSH
64012: LD_EXP 161
64016: AND
64017: IFFALSE 64128
64019: GO 64021
64021: DISABLE
64022: LD_INT 0
64024: PPUSH
64025: PPUSH
64026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64027: LD_ADDR_VAR 0 3
64031: PUSH
64032: LD_INT 22
64034: PUSH
64035: LD_OWVAR 2
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 25
64046: PUSH
64047: LD_INT 1
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PPUSH
64058: CALL_OW 69
64062: ST_TO_ADDR
// if not tmp then
64063: LD_VAR 0 3
64067: NOT
64068: IFFALSE 64072
// exit ;
64070: GO 64128
// un := tmp [ rand ( 1 , tmp ) ] ;
64072: LD_ADDR_VAR 0 2
64076: PUSH
64077: LD_VAR 0 3
64081: PUSH
64082: LD_INT 1
64084: PPUSH
64085: LD_VAR 0 3
64089: PPUSH
64090: CALL_OW 12
64094: ARRAY
64095: ST_TO_ADDR
// if Crawls ( un ) then
64096: LD_VAR 0 2
64100: PPUSH
64101: CALL_OW 318
64105: IFFALSE 64116
// ComWalk ( un ) ;
64107: LD_VAR 0 2
64111: PPUSH
64112: CALL_OW 138
// SetClass ( un , class_mortar ) ;
64116: LD_VAR 0 2
64120: PPUSH
64121: LD_INT 8
64123: PPUSH
64124: CALL_OW 336
// end ;
64128: PPOPN 3
64130: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
64131: LD_EXP 118
64135: PUSH
64136: LD_EXP 162
64140: AND
64141: IFFALSE 64285
64143: GO 64145
64145: DISABLE
64146: LD_INT 0
64148: PPUSH
64149: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
64150: LD_ADDR_VAR 0 2
64154: PUSH
64155: LD_INT 22
64157: PUSH
64158: LD_OWVAR 2
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 21
64169: PUSH
64170: LD_INT 2
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 2
64179: PUSH
64180: LD_INT 34
64182: PUSH
64183: LD_INT 12
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 34
64192: PUSH
64193: LD_INT 51
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 34
64202: PUSH
64203: LD_INT 32
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: LIST
64220: PPUSH
64221: CALL_OW 69
64225: ST_TO_ADDR
// if not tmp then
64226: LD_VAR 0 2
64230: NOT
64231: IFFALSE 64235
// exit ;
64233: GO 64285
// for i in tmp do
64235: LD_ADDR_VAR 0 1
64239: PUSH
64240: LD_VAR 0 2
64244: PUSH
64245: FOR_IN
64246: IFFALSE 64283
// if GetCargo ( i , mat_artifact ) = 0 then
64248: LD_VAR 0 1
64252: PPUSH
64253: LD_INT 4
64255: PPUSH
64256: CALL_OW 289
64260: PUSH
64261: LD_INT 0
64263: EQUAL
64264: IFFALSE 64281
// SetCargo ( i , mat_siberit , 100 ) ;
64266: LD_VAR 0 1
64270: PPUSH
64271: LD_INT 3
64273: PPUSH
64274: LD_INT 100
64276: PPUSH
64277: CALL_OW 290
64281: GO 64245
64283: POP
64284: POP
// end ;
64285: PPOPN 2
64287: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
64288: LD_EXP 118
64292: PUSH
64293: LD_EXP 163
64297: AND
64298: IFFALSE 64481
64300: GO 64302
64302: DISABLE
64303: LD_INT 0
64305: PPUSH
64306: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
64307: LD_ADDR_VAR 0 2
64311: PUSH
64312: LD_INT 22
64314: PUSH
64315: LD_OWVAR 2
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PPUSH
64324: CALL_OW 69
64328: ST_TO_ADDR
// if not tmp then
64329: LD_VAR 0 2
64333: NOT
64334: IFFALSE 64338
// exit ;
64336: GO 64481
// for i := 1 to 2 do
64338: LD_ADDR_VAR 0 1
64342: PUSH
64343: DOUBLE
64344: LD_INT 1
64346: DEC
64347: ST_TO_ADDR
64348: LD_INT 2
64350: PUSH
64351: FOR_TO
64352: IFFALSE 64479
// begin uc_side := your_side ;
64354: LD_ADDR_OWVAR 20
64358: PUSH
64359: LD_OWVAR 2
64363: ST_TO_ADDR
// uc_nation := nation_american ;
64364: LD_ADDR_OWVAR 21
64368: PUSH
64369: LD_INT 1
64371: ST_TO_ADDR
// vc_chassis := us_morphling ;
64372: LD_ADDR_OWVAR 37
64376: PUSH
64377: LD_INT 5
64379: ST_TO_ADDR
// vc_engine := engine_siberite ;
64380: LD_ADDR_OWVAR 39
64384: PUSH
64385: LD_INT 3
64387: ST_TO_ADDR
// vc_control := control_computer ;
64388: LD_ADDR_OWVAR 38
64392: PUSH
64393: LD_INT 3
64395: ST_TO_ADDR
// vc_weapon := us_double_laser ;
64396: LD_ADDR_OWVAR 40
64400: PUSH
64401: LD_INT 10
64403: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
64404: LD_VAR 0 2
64408: PUSH
64409: LD_INT 1
64411: ARRAY
64412: PPUSH
64413: CALL_OW 310
64417: NOT
64418: IFFALSE 64465
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
64420: CALL_OW 45
64424: PPUSH
64425: LD_VAR 0 2
64429: PUSH
64430: LD_INT 1
64432: ARRAY
64433: PPUSH
64434: CALL_OW 250
64438: PPUSH
64439: LD_VAR 0 2
64443: PUSH
64444: LD_INT 1
64446: ARRAY
64447: PPUSH
64448: CALL_OW 251
64452: PPUSH
64453: LD_INT 12
64455: PPUSH
64456: LD_INT 1
64458: PPUSH
64459: CALL_OW 50
64463: GO 64477
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
64465: CALL_OW 45
64469: PPUSH
64470: LD_INT 1
64472: PPUSH
64473: CALL_OW 51
// end ;
64477: GO 64351
64479: POP
64480: POP
// end ;
64481: PPOPN 2
64483: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
64484: LD_EXP 118
64488: PUSH
64489: LD_EXP 164
64493: AND
64494: IFFALSE 64716
64496: GO 64498
64498: DISABLE
64499: LD_INT 0
64501: PPUSH
64502: PPUSH
64503: PPUSH
64504: PPUSH
64505: PPUSH
64506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64507: LD_ADDR_VAR 0 6
64511: PUSH
64512: LD_INT 22
64514: PUSH
64515: LD_OWVAR 2
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 21
64526: PUSH
64527: LD_INT 1
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 3
64536: PUSH
64537: LD_INT 23
64539: PUSH
64540: LD_INT 0
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: LIST
64555: PPUSH
64556: CALL_OW 69
64560: ST_TO_ADDR
// if not tmp then
64561: LD_VAR 0 6
64565: NOT
64566: IFFALSE 64570
// exit ;
64568: GO 64716
// s1 := rand ( 1 , 4 ) ;
64570: LD_ADDR_VAR 0 2
64574: PUSH
64575: LD_INT 1
64577: PPUSH
64578: LD_INT 4
64580: PPUSH
64581: CALL_OW 12
64585: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
64586: LD_ADDR_VAR 0 4
64590: PUSH
64591: LD_VAR 0 6
64595: PUSH
64596: LD_INT 1
64598: ARRAY
64599: PPUSH
64600: LD_VAR 0 2
64604: PPUSH
64605: CALL_OW 259
64609: ST_TO_ADDR
// if s1 = 1 then
64610: LD_VAR 0 2
64614: PUSH
64615: LD_INT 1
64617: EQUAL
64618: IFFALSE 64638
// s2 := rand ( 2 , 4 ) else
64620: LD_ADDR_VAR 0 3
64624: PUSH
64625: LD_INT 2
64627: PPUSH
64628: LD_INT 4
64630: PPUSH
64631: CALL_OW 12
64635: ST_TO_ADDR
64636: GO 64646
// s2 := 1 ;
64638: LD_ADDR_VAR 0 3
64642: PUSH
64643: LD_INT 1
64645: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
64646: LD_ADDR_VAR 0 5
64650: PUSH
64651: LD_VAR 0 6
64655: PUSH
64656: LD_INT 1
64658: ARRAY
64659: PPUSH
64660: LD_VAR 0 3
64664: PPUSH
64665: CALL_OW 259
64669: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
64670: LD_VAR 0 6
64674: PUSH
64675: LD_INT 1
64677: ARRAY
64678: PPUSH
64679: LD_VAR 0 2
64683: PPUSH
64684: LD_VAR 0 5
64688: PPUSH
64689: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
64693: LD_VAR 0 6
64697: PUSH
64698: LD_INT 1
64700: ARRAY
64701: PPUSH
64702: LD_VAR 0 3
64706: PPUSH
64707: LD_VAR 0 4
64711: PPUSH
64712: CALL_OW 237
// end ;
64716: PPOPN 6
64718: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
64719: LD_EXP 118
64723: PUSH
64724: LD_EXP 165
64728: AND
64729: IFFALSE 64808
64731: GO 64733
64733: DISABLE
64734: LD_INT 0
64736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
64737: LD_ADDR_VAR 0 1
64741: PUSH
64742: LD_INT 22
64744: PUSH
64745: LD_OWVAR 2
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 30
64756: PUSH
64757: LD_INT 3
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PPUSH
64768: CALL_OW 69
64772: ST_TO_ADDR
// if not tmp then
64773: LD_VAR 0 1
64777: NOT
64778: IFFALSE 64782
// exit ;
64780: GO 64808
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
64782: LD_VAR 0 1
64786: PUSH
64787: LD_INT 1
64789: PPUSH
64790: LD_VAR 0 1
64794: PPUSH
64795: CALL_OW 12
64799: ARRAY
64800: PPUSH
64801: LD_INT 1
64803: PPUSH
64804: CALL_OW 234
// end ;
64808: PPOPN 1
64810: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
64811: LD_EXP 118
64815: PUSH
64816: LD_EXP 166
64820: AND
64821: IFFALSE 64933
64823: GO 64825
64825: DISABLE
64826: LD_INT 0
64828: PPUSH
64829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
64830: LD_ADDR_VAR 0 2
64834: PUSH
64835: LD_INT 22
64837: PUSH
64838: LD_OWVAR 2
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 2
64849: PUSH
64850: LD_INT 30
64852: PUSH
64853: LD_INT 27
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 30
64862: PUSH
64863: LD_INT 26
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 30
64872: PUSH
64873: LD_INT 28
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PPUSH
64890: CALL_OW 69
64894: ST_TO_ADDR
// if not tmp then
64895: LD_VAR 0 2
64899: NOT
64900: IFFALSE 64904
// exit ;
64902: GO 64933
// for i in tmp do
64904: LD_ADDR_VAR 0 1
64908: PUSH
64909: LD_VAR 0 2
64913: PUSH
64914: FOR_IN
64915: IFFALSE 64931
// SetLives ( i , 1 ) ;
64917: LD_VAR 0 1
64921: PPUSH
64922: LD_INT 1
64924: PPUSH
64925: CALL_OW 234
64929: GO 64914
64931: POP
64932: POP
// end ;
64933: PPOPN 2
64935: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
64936: LD_EXP 118
64940: PUSH
64941: LD_EXP 167
64945: AND
64946: IFFALSE 65233
64948: GO 64950
64950: DISABLE
64951: LD_INT 0
64953: PPUSH
64954: PPUSH
64955: PPUSH
// begin i := rand ( 1 , 7 ) ;
64956: LD_ADDR_VAR 0 1
64960: PUSH
64961: LD_INT 1
64963: PPUSH
64964: LD_INT 7
64966: PPUSH
64967: CALL_OW 12
64971: ST_TO_ADDR
// case i of 1 :
64972: LD_VAR 0 1
64976: PUSH
64977: LD_INT 1
64979: DOUBLE
64980: EQUAL
64981: IFTRUE 64985
64983: GO 64995
64985: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
64986: LD_STRING earthquake(getX(game), 0, 32)
64988: PPUSH
64989: CALL_OW 559
64993: GO 65233
64995: LD_INT 2
64997: DOUBLE
64998: EQUAL
64999: IFTRUE 65003
65001: GO 65017
65003: POP
// begin ToLua ( displayStucuk(); ) ;
65004: LD_STRING displayStucuk();
65006: PPUSH
65007: CALL_OW 559
// ResetFog ;
65011: CALL_OW 335
// end ; 3 :
65015: GO 65233
65017: LD_INT 3
65019: DOUBLE
65020: EQUAL
65021: IFTRUE 65025
65023: GO 65129
65025: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65026: LD_ADDR_VAR 0 2
65030: PUSH
65031: LD_INT 22
65033: PUSH
65034: LD_OWVAR 2
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 25
65045: PUSH
65046: LD_INT 1
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PPUSH
65057: CALL_OW 69
65061: ST_TO_ADDR
// if not tmp then
65062: LD_VAR 0 2
65066: NOT
65067: IFFALSE 65071
// exit ;
65069: GO 65233
// un := tmp [ rand ( 1 , tmp ) ] ;
65071: LD_ADDR_VAR 0 3
65075: PUSH
65076: LD_VAR 0 2
65080: PUSH
65081: LD_INT 1
65083: PPUSH
65084: LD_VAR 0 2
65088: PPUSH
65089: CALL_OW 12
65093: ARRAY
65094: ST_TO_ADDR
// if Crawls ( un ) then
65095: LD_VAR 0 3
65099: PPUSH
65100: CALL_OW 318
65104: IFFALSE 65115
// ComWalk ( un ) ;
65106: LD_VAR 0 3
65110: PPUSH
65111: CALL_OW 138
// SetClass ( un , class_mortar ) ;
65115: LD_VAR 0 3
65119: PPUSH
65120: LD_INT 8
65122: PPUSH
65123: CALL_OW 336
// end ; 4 :
65127: GO 65233
65129: LD_INT 4
65131: DOUBLE
65132: EQUAL
65133: IFTRUE 65137
65135: GO 65211
65137: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
65138: LD_ADDR_VAR 0 2
65142: PUSH
65143: LD_INT 22
65145: PUSH
65146: LD_OWVAR 2
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 30
65157: PUSH
65158: LD_INT 29
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PPUSH
65169: CALL_OW 69
65173: ST_TO_ADDR
// if not tmp then
65174: LD_VAR 0 2
65178: NOT
65179: IFFALSE 65183
// exit ;
65181: GO 65233
// CenterNowOnUnits ( tmp [ 1 ] ) ;
65183: LD_VAR 0 2
65187: PUSH
65188: LD_INT 1
65190: ARRAY
65191: PPUSH
65192: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
65196: LD_VAR 0 2
65200: PUSH
65201: LD_INT 1
65203: ARRAY
65204: PPUSH
65205: CALL_OW 65
// end ; 5 .. 7 :
65209: GO 65233
65211: LD_INT 5
65213: DOUBLE
65214: GREATEREQUAL
65215: IFFALSE 65223
65217: LD_INT 7
65219: DOUBLE
65220: LESSEQUAL
65221: IFTRUE 65225
65223: GO 65232
65225: POP
// StreamSibBomb ; end ;
65226: CALL 61470 0 0
65230: GO 65233
65232: POP
// end ;
65233: PPOPN 3
65235: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
65236: LD_EXP 118
65240: PUSH
65241: LD_EXP 168
65245: AND
65246: IFFALSE 65402
65248: GO 65250
65250: DISABLE
65251: LD_INT 0
65253: PPUSH
65254: PPUSH
65255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
65256: LD_ADDR_VAR 0 2
65260: PUSH
65261: LD_INT 81
65263: PUSH
65264: LD_OWVAR 2
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 2
65275: PUSH
65276: LD_INT 21
65278: PUSH
65279: LD_INT 1
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 21
65288: PUSH
65289: LD_INT 2
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: LIST
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PPUSH
65305: CALL_OW 69
65309: ST_TO_ADDR
// if not tmp then
65310: LD_VAR 0 2
65314: NOT
65315: IFFALSE 65319
// exit ;
65317: GO 65402
// p := 0 ;
65319: LD_ADDR_VAR 0 3
65323: PUSH
65324: LD_INT 0
65326: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
65327: LD_INT 35
65329: PPUSH
65330: CALL_OW 67
// p := p + 1 ;
65334: LD_ADDR_VAR 0 3
65338: PUSH
65339: LD_VAR 0 3
65343: PUSH
65344: LD_INT 1
65346: PLUS
65347: ST_TO_ADDR
// for i in tmp do
65348: LD_ADDR_VAR 0 1
65352: PUSH
65353: LD_VAR 0 2
65357: PUSH
65358: FOR_IN
65359: IFFALSE 65390
// if GetLives ( i ) < 1000 then
65361: LD_VAR 0 1
65365: PPUSH
65366: CALL_OW 256
65370: PUSH
65371: LD_INT 1000
65373: LESS
65374: IFFALSE 65388
// SetLives ( i , 1000 ) ;
65376: LD_VAR 0 1
65380: PPUSH
65381: LD_INT 1000
65383: PPUSH
65384: CALL_OW 234
65388: GO 65358
65390: POP
65391: POP
// until p > 20 ;
65392: LD_VAR 0 3
65396: PUSH
65397: LD_INT 20
65399: GREATER
65400: IFFALSE 65327
// end ;
65402: PPOPN 3
65404: END
// every 0 0$1 trigger StreamModeActive and sTime do
65405: LD_EXP 118
65409: PUSH
65410: LD_EXP 169
65414: AND
65415: IFFALSE 65450
65417: GO 65419
65419: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
65420: LD_INT 28
65422: PPUSH
65423: LD_OWVAR 2
65427: PPUSH
65428: LD_INT 2
65430: PPUSH
65431: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
65435: LD_INT 30
65437: PPUSH
65438: LD_OWVAR 2
65442: PPUSH
65443: LD_INT 2
65445: PPUSH
65446: CALL_OW 322
// end ;
65450: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
65451: LD_EXP 118
65455: PUSH
65456: LD_EXP 170
65460: AND
65461: IFFALSE 65582
65463: GO 65465
65465: DISABLE
65466: LD_INT 0
65468: PPUSH
65469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
65470: LD_ADDR_VAR 0 2
65474: PUSH
65475: LD_INT 22
65477: PUSH
65478: LD_OWVAR 2
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 21
65489: PUSH
65490: LD_INT 1
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 3
65499: PUSH
65500: LD_INT 23
65502: PUSH
65503: LD_INT 0
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: LIST
65518: PPUSH
65519: CALL_OW 69
65523: ST_TO_ADDR
// if not tmp then
65524: LD_VAR 0 2
65528: NOT
65529: IFFALSE 65533
// exit ;
65531: GO 65582
// for i in tmp do
65533: LD_ADDR_VAR 0 1
65537: PUSH
65538: LD_VAR 0 2
65542: PUSH
65543: FOR_IN
65544: IFFALSE 65580
// begin if Crawls ( i ) then
65546: LD_VAR 0 1
65550: PPUSH
65551: CALL_OW 318
65555: IFFALSE 65566
// ComWalk ( i ) ;
65557: LD_VAR 0 1
65561: PPUSH
65562: CALL_OW 138
// SetClass ( i , 2 ) ;
65566: LD_VAR 0 1
65570: PPUSH
65571: LD_INT 2
65573: PPUSH
65574: CALL_OW 336
// end ;
65578: GO 65543
65580: POP
65581: POP
// end ;
65582: PPOPN 2
65584: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
65585: LD_EXP 118
65589: PUSH
65590: LD_EXP 171
65594: AND
65595: IFFALSE 65883
65597: GO 65599
65599: DISABLE
65600: LD_INT 0
65602: PPUSH
65603: PPUSH
65604: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
65605: LD_OWVAR 2
65609: PPUSH
65610: LD_INT 9
65612: PPUSH
65613: LD_INT 1
65615: PPUSH
65616: LD_INT 1
65618: PPUSH
65619: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
65623: LD_INT 9
65625: PPUSH
65626: LD_OWVAR 2
65630: PPUSH
65631: CALL_OW 343
// uc_side := 9 ;
65635: LD_ADDR_OWVAR 20
65639: PUSH
65640: LD_INT 9
65642: ST_TO_ADDR
// uc_nation := 2 ;
65643: LD_ADDR_OWVAR 21
65647: PUSH
65648: LD_INT 2
65650: ST_TO_ADDR
// hc_name := Dark Warrior ;
65651: LD_ADDR_OWVAR 26
65655: PUSH
65656: LD_STRING Dark Warrior
65658: ST_TO_ADDR
// hc_gallery :=  ;
65659: LD_ADDR_OWVAR 33
65663: PUSH
65664: LD_STRING 
65666: ST_TO_ADDR
// hc_noskilllimit := true ;
65667: LD_ADDR_OWVAR 76
65671: PUSH
65672: LD_INT 1
65674: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
65675: LD_ADDR_OWVAR 31
65679: PUSH
65680: LD_INT 30
65682: PUSH
65683: LD_INT 30
65685: PUSH
65686: LD_INT 30
65688: PUSH
65689: LD_INT 30
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: ST_TO_ADDR
// un := CreateHuman ;
65698: LD_ADDR_VAR 0 3
65702: PUSH
65703: CALL_OW 44
65707: ST_TO_ADDR
// hc_noskilllimit := false ;
65708: LD_ADDR_OWVAR 76
65712: PUSH
65713: LD_INT 0
65715: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
65716: LD_VAR 0 3
65720: PPUSH
65721: LD_INT 1
65723: PPUSH
65724: CALL_OW 51
// ToLua ( playRanger() ) ;
65728: LD_STRING playRanger()
65730: PPUSH
65731: CALL_OW 559
// p := 0 ;
65735: LD_ADDR_VAR 0 2
65739: PUSH
65740: LD_INT 0
65742: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
65743: LD_INT 35
65745: PPUSH
65746: CALL_OW 67
// p := p + 1 ;
65750: LD_ADDR_VAR 0 2
65754: PUSH
65755: LD_VAR 0 2
65759: PUSH
65760: LD_INT 1
65762: PLUS
65763: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
65764: LD_VAR 0 3
65768: PPUSH
65769: CALL_OW 256
65773: PUSH
65774: LD_INT 1000
65776: LESS
65777: IFFALSE 65791
// SetLives ( un , 1000 ) ;
65779: LD_VAR 0 3
65783: PPUSH
65784: LD_INT 1000
65786: PPUSH
65787: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
65791: LD_VAR 0 3
65795: PPUSH
65796: LD_INT 81
65798: PUSH
65799: LD_OWVAR 2
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 91
65810: PUSH
65811: LD_VAR 0 3
65815: PUSH
65816: LD_INT 30
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: LIST
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PPUSH
65828: CALL_OW 69
65832: PPUSH
65833: LD_VAR 0 3
65837: PPUSH
65838: CALL_OW 74
65842: PPUSH
65843: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
65847: LD_VAR 0 2
65851: PUSH
65852: LD_INT 80
65854: GREATER
65855: PUSH
65856: LD_VAR 0 3
65860: PPUSH
65861: CALL_OW 301
65865: OR
65866: IFFALSE 65743
// if un then
65868: LD_VAR 0 3
65872: IFFALSE 65883
// RemoveUnit ( un ) ;
65874: LD_VAR 0 3
65878: PPUSH
65879: CALL_OW 64
// end ;
65883: PPOPN 3
65885: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
65886: LD_EXP 172
65890: IFFALSE 66006
65892: GO 65894
65894: DISABLE
65895: LD_INT 0
65897: PPUSH
65898: PPUSH
65899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
65900: LD_ADDR_VAR 0 2
65904: PUSH
65905: LD_INT 81
65907: PUSH
65908: LD_OWVAR 2
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 21
65919: PUSH
65920: LD_INT 1
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PPUSH
65931: CALL_OW 69
65935: ST_TO_ADDR
// ToLua ( playComputer() ) ;
65936: LD_STRING playComputer()
65938: PPUSH
65939: CALL_OW 559
// if not tmp then
65943: LD_VAR 0 2
65947: NOT
65948: IFFALSE 65952
// exit ;
65950: GO 66006
// for i in tmp do
65952: LD_ADDR_VAR 0 1
65956: PUSH
65957: LD_VAR 0 2
65961: PUSH
65962: FOR_IN
65963: IFFALSE 66004
// for j := 1 to 4 do
65965: LD_ADDR_VAR 0 3
65969: PUSH
65970: DOUBLE
65971: LD_INT 1
65973: DEC
65974: ST_TO_ADDR
65975: LD_INT 4
65977: PUSH
65978: FOR_TO
65979: IFFALSE 66000
// SetSkill ( i , j , 10 ) ;
65981: LD_VAR 0 1
65985: PPUSH
65986: LD_VAR 0 3
65990: PPUSH
65991: LD_INT 10
65993: PPUSH
65994: CALL_OW 237
65998: GO 65978
66000: POP
66001: POP
66002: GO 65962
66004: POP
66005: POP
// end ;
66006: PPOPN 3
66008: END
// every 0 0$1 trigger s30 do var i , tmp ;
66009: LD_EXP 173
66013: IFFALSE 66082
66015: GO 66017
66017: DISABLE
66018: LD_INT 0
66020: PPUSH
66021: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
66022: LD_ADDR_VAR 0 2
66026: PUSH
66027: LD_INT 22
66029: PUSH
66030: LD_OWVAR 2
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PPUSH
66039: CALL_OW 69
66043: ST_TO_ADDR
// if not tmp then
66044: LD_VAR 0 2
66048: NOT
66049: IFFALSE 66053
// exit ;
66051: GO 66082
// for i in tmp do
66053: LD_ADDR_VAR 0 1
66057: PUSH
66058: LD_VAR 0 2
66062: PUSH
66063: FOR_IN
66064: IFFALSE 66080
// SetLives ( i , 300 ) ;
66066: LD_VAR 0 1
66070: PPUSH
66071: LD_INT 300
66073: PPUSH
66074: CALL_OW 234
66078: GO 66063
66080: POP
66081: POP
// end ;
66082: PPOPN 2
66084: END
// every 0 0$1 trigger s60 do var i , tmp ;
66085: LD_EXP 174
66089: IFFALSE 66158
66091: GO 66093
66093: DISABLE
66094: LD_INT 0
66096: PPUSH
66097: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
66098: LD_ADDR_VAR 0 2
66102: PUSH
66103: LD_INT 22
66105: PUSH
66106: LD_OWVAR 2
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PPUSH
66115: CALL_OW 69
66119: ST_TO_ADDR
// if not tmp then
66120: LD_VAR 0 2
66124: NOT
66125: IFFALSE 66129
// exit ;
66127: GO 66158
// for i in tmp do
66129: LD_ADDR_VAR 0 1
66133: PUSH
66134: LD_VAR 0 2
66138: PUSH
66139: FOR_IN
66140: IFFALSE 66156
// SetLives ( i , 600 ) ;
66142: LD_VAR 0 1
66146: PPUSH
66147: LD_INT 600
66149: PPUSH
66150: CALL_OW 234
66154: GO 66139
66156: POP
66157: POP
// end ;
66158: PPOPN 2
66160: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
66161: LD_INT 0
66163: PPUSH
// case cmd of 301 :
66164: LD_VAR 0 1
66168: PUSH
66169: LD_INT 301
66171: DOUBLE
66172: EQUAL
66173: IFTRUE 66177
66175: GO 66209
66177: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
66178: LD_VAR 0 6
66182: PPUSH
66183: LD_VAR 0 7
66187: PPUSH
66188: LD_VAR 0 8
66192: PPUSH
66193: LD_VAR 0 4
66197: PPUSH
66198: LD_VAR 0 5
66202: PPUSH
66203: CALL 67410 0 5
66207: GO 66330
66209: LD_INT 302
66211: DOUBLE
66212: EQUAL
66213: IFTRUE 66217
66215: GO 66254
66217: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
66218: LD_VAR 0 6
66222: PPUSH
66223: LD_VAR 0 7
66227: PPUSH
66228: LD_VAR 0 8
66232: PPUSH
66233: LD_VAR 0 9
66237: PPUSH
66238: LD_VAR 0 4
66242: PPUSH
66243: LD_VAR 0 5
66247: PPUSH
66248: CALL 67501 0 6
66252: GO 66330
66254: LD_INT 303
66256: DOUBLE
66257: EQUAL
66258: IFTRUE 66262
66260: GO 66299
66262: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
66263: LD_VAR 0 6
66267: PPUSH
66268: LD_VAR 0 7
66272: PPUSH
66273: LD_VAR 0 8
66277: PPUSH
66278: LD_VAR 0 9
66282: PPUSH
66283: LD_VAR 0 4
66287: PPUSH
66288: LD_VAR 0 5
66292: PPUSH
66293: CALL 66335 0 6
66297: GO 66330
66299: LD_INT 304
66301: DOUBLE
66302: EQUAL
66303: IFTRUE 66307
66305: GO 66329
66307: POP
// hHackTeleport ( unit , x , y ) ; end ;
66308: LD_VAR 0 2
66312: PPUSH
66313: LD_VAR 0 4
66317: PPUSH
66318: LD_VAR 0 5
66322: PPUSH
66323: CALL 68094 0 3
66327: GO 66330
66329: POP
// end ;
66330: LD_VAR 0 12
66334: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
66335: LD_INT 0
66337: PPUSH
66338: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
66339: LD_VAR 0 1
66343: PUSH
66344: LD_INT 1
66346: LESS
66347: PUSH
66348: LD_VAR 0 1
66352: PUSH
66353: LD_INT 3
66355: GREATER
66356: OR
66357: PUSH
66358: LD_VAR 0 5
66362: PPUSH
66363: LD_VAR 0 6
66367: PPUSH
66368: CALL_OW 428
66372: OR
66373: IFFALSE 66377
// exit ;
66375: GO 67097
// uc_side := your_side ;
66377: LD_ADDR_OWVAR 20
66381: PUSH
66382: LD_OWVAR 2
66386: ST_TO_ADDR
// uc_nation := nation ;
66387: LD_ADDR_OWVAR 21
66391: PUSH
66392: LD_VAR 0 1
66396: ST_TO_ADDR
// bc_level = 1 ;
66397: LD_ADDR_OWVAR 43
66401: PUSH
66402: LD_INT 1
66404: ST_TO_ADDR
// case btype of 1 :
66405: LD_VAR 0 2
66409: PUSH
66410: LD_INT 1
66412: DOUBLE
66413: EQUAL
66414: IFTRUE 66418
66416: GO 66429
66418: POP
// bc_type := b_depot ; 2 :
66419: LD_ADDR_OWVAR 42
66423: PUSH
66424: LD_INT 0
66426: ST_TO_ADDR
66427: GO 67041
66429: LD_INT 2
66431: DOUBLE
66432: EQUAL
66433: IFTRUE 66437
66435: GO 66448
66437: POP
// bc_type := b_warehouse ; 3 :
66438: LD_ADDR_OWVAR 42
66442: PUSH
66443: LD_INT 1
66445: ST_TO_ADDR
66446: GO 67041
66448: LD_INT 3
66450: DOUBLE
66451: EQUAL
66452: IFTRUE 66456
66454: GO 66467
66456: POP
// bc_type := b_lab ; 4 .. 9 :
66457: LD_ADDR_OWVAR 42
66461: PUSH
66462: LD_INT 6
66464: ST_TO_ADDR
66465: GO 67041
66467: LD_INT 4
66469: DOUBLE
66470: GREATEREQUAL
66471: IFFALSE 66479
66473: LD_INT 9
66475: DOUBLE
66476: LESSEQUAL
66477: IFTRUE 66481
66479: GO 66533
66481: POP
// begin bc_type := b_lab_half ;
66482: LD_ADDR_OWVAR 42
66486: PUSH
66487: LD_INT 7
66489: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
66490: LD_ADDR_OWVAR 44
66494: PUSH
66495: LD_INT 10
66497: PUSH
66498: LD_INT 11
66500: PUSH
66501: LD_INT 12
66503: PUSH
66504: LD_INT 15
66506: PUSH
66507: LD_INT 14
66509: PUSH
66510: LD_INT 13
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: PUSH
66521: LD_VAR 0 2
66525: PUSH
66526: LD_INT 3
66528: MINUS
66529: ARRAY
66530: ST_TO_ADDR
// end ; 10 .. 13 :
66531: GO 67041
66533: LD_INT 10
66535: DOUBLE
66536: GREATEREQUAL
66537: IFFALSE 66545
66539: LD_INT 13
66541: DOUBLE
66542: LESSEQUAL
66543: IFTRUE 66547
66545: GO 66624
66547: POP
// begin bc_type := b_lab_full ;
66548: LD_ADDR_OWVAR 42
66552: PUSH
66553: LD_INT 8
66555: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
66556: LD_ADDR_OWVAR 44
66560: PUSH
66561: LD_INT 10
66563: PUSH
66564: LD_INT 12
66566: PUSH
66567: LD_INT 14
66569: PUSH
66570: LD_INT 13
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: PUSH
66579: LD_VAR 0 2
66583: PUSH
66584: LD_INT 9
66586: MINUS
66587: ARRAY
66588: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
66589: LD_ADDR_OWVAR 45
66593: PUSH
66594: LD_INT 11
66596: PUSH
66597: LD_INT 15
66599: PUSH
66600: LD_INT 12
66602: PUSH
66603: LD_INT 15
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: PUSH
66612: LD_VAR 0 2
66616: PUSH
66617: LD_INT 9
66619: MINUS
66620: ARRAY
66621: ST_TO_ADDR
// end ; 14 :
66622: GO 67041
66624: LD_INT 14
66626: DOUBLE
66627: EQUAL
66628: IFTRUE 66632
66630: GO 66643
66632: POP
// bc_type := b_workshop ; 15 :
66633: LD_ADDR_OWVAR 42
66637: PUSH
66638: LD_INT 2
66640: ST_TO_ADDR
66641: GO 67041
66643: LD_INT 15
66645: DOUBLE
66646: EQUAL
66647: IFTRUE 66651
66649: GO 66662
66651: POP
// bc_type := b_factory ; 16 :
66652: LD_ADDR_OWVAR 42
66656: PUSH
66657: LD_INT 3
66659: ST_TO_ADDR
66660: GO 67041
66662: LD_INT 16
66664: DOUBLE
66665: EQUAL
66666: IFTRUE 66670
66668: GO 66681
66670: POP
// bc_type := b_ext_gun ; 17 :
66671: LD_ADDR_OWVAR 42
66675: PUSH
66676: LD_INT 17
66678: ST_TO_ADDR
66679: GO 67041
66681: LD_INT 17
66683: DOUBLE
66684: EQUAL
66685: IFTRUE 66689
66687: GO 66717
66689: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
66690: LD_ADDR_OWVAR 42
66694: PUSH
66695: LD_INT 19
66697: PUSH
66698: LD_INT 23
66700: PUSH
66701: LD_INT 19
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: LIST
66708: PUSH
66709: LD_VAR 0 1
66713: ARRAY
66714: ST_TO_ADDR
66715: GO 67041
66717: LD_INT 18
66719: DOUBLE
66720: EQUAL
66721: IFTRUE 66725
66723: GO 66736
66725: POP
// bc_type := b_ext_radar ; 19 :
66726: LD_ADDR_OWVAR 42
66730: PUSH
66731: LD_INT 20
66733: ST_TO_ADDR
66734: GO 67041
66736: LD_INT 19
66738: DOUBLE
66739: EQUAL
66740: IFTRUE 66744
66742: GO 66755
66744: POP
// bc_type := b_ext_radio ; 20 :
66745: LD_ADDR_OWVAR 42
66749: PUSH
66750: LD_INT 22
66752: ST_TO_ADDR
66753: GO 67041
66755: LD_INT 20
66757: DOUBLE
66758: EQUAL
66759: IFTRUE 66763
66761: GO 66774
66763: POP
// bc_type := b_ext_siberium ; 21 :
66764: LD_ADDR_OWVAR 42
66768: PUSH
66769: LD_INT 21
66771: ST_TO_ADDR
66772: GO 67041
66774: LD_INT 21
66776: DOUBLE
66777: EQUAL
66778: IFTRUE 66782
66780: GO 66793
66782: POP
// bc_type := b_ext_computer ; 22 :
66783: LD_ADDR_OWVAR 42
66787: PUSH
66788: LD_INT 24
66790: ST_TO_ADDR
66791: GO 67041
66793: LD_INT 22
66795: DOUBLE
66796: EQUAL
66797: IFTRUE 66801
66799: GO 66812
66801: POP
// bc_type := b_ext_track ; 23 :
66802: LD_ADDR_OWVAR 42
66806: PUSH
66807: LD_INT 16
66809: ST_TO_ADDR
66810: GO 67041
66812: LD_INT 23
66814: DOUBLE
66815: EQUAL
66816: IFTRUE 66820
66818: GO 66831
66820: POP
// bc_type := b_ext_laser ; 24 :
66821: LD_ADDR_OWVAR 42
66825: PUSH
66826: LD_INT 25
66828: ST_TO_ADDR
66829: GO 67041
66831: LD_INT 24
66833: DOUBLE
66834: EQUAL
66835: IFTRUE 66839
66837: GO 66850
66839: POP
// bc_type := b_control_tower ; 25 :
66840: LD_ADDR_OWVAR 42
66844: PUSH
66845: LD_INT 36
66847: ST_TO_ADDR
66848: GO 67041
66850: LD_INT 25
66852: DOUBLE
66853: EQUAL
66854: IFTRUE 66858
66856: GO 66869
66858: POP
// bc_type := b_breastwork ; 26 :
66859: LD_ADDR_OWVAR 42
66863: PUSH
66864: LD_INT 31
66866: ST_TO_ADDR
66867: GO 67041
66869: LD_INT 26
66871: DOUBLE
66872: EQUAL
66873: IFTRUE 66877
66875: GO 66888
66877: POP
// bc_type := b_bunker ; 27 :
66878: LD_ADDR_OWVAR 42
66882: PUSH
66883: LD_INT 32
66885: ST_TO_ADDR
66886: GO 67041
66888: LD_INT 27
66890: DOUBLE
66891: EQUAL
66892: IFTRUE 66896
66894: GO 66907
66896: POP
// bc_type := b_turret ; 28 :
66897: LD_ADDR_OWVAR 42
66901: PUSH
66902: LD_INT 33
66904: ST_TO_ADDR
66905: GO 67041
66907: LD_INT 28
66909: DOUBLE
66910: EQUAL
66911: IFTRUE 66915
66913: GO 66926
66915: POP
// bc_type := b_armoury ; 29 :
66916: LD_ADDR_OWVAR 42
66920: PUSH
66921: LD_INT 4
66923: ST_TO_ADDR
66924: GO 67041
66926: LD_INT 29
66928: DOUBLE
66929: EQUAL
66930: IFTRUE 66934
66932: GO 66945
66934: POP
// bc_type := b_barracks ; 30 :
66935: LD_ADDR_OWVAR 42
66939: PUSH
66940: LD_INT 5
66942: ST_TO_ADDR
66943: GO 67041
66945: LD_INT 30
66947: DOUBLE
66948: EQUAL
66949: IFTRUE 66953
66951: GO 66964
66953: POP
// bc_type := b_solar_power ; 31 :
66954: LD_ADDR_OWVAR 42
66958: PUSH
66959: LD_INT 27
66961: ST_TO_ADDR
66962: GO 67041
66964: LD_INT 31
66966: DOUBLE
66967: EQUAL
66968: IFTRUE 66972
66970: GO 66983
66972: POP
// bc_type := b_oil_power ; 32 :
66973: LD_ADDR_OWVAR 42
66977: PUSH
66978: LD_INT 26
66980: ST_TO_ADDR
66981: GO 67041
66983: LD_INT 32
66985: DOUBLE
66986: EQUAL
66987: IFTRUE 66991
66989: GO 67002
66991: POP
// bc_type := b_siberite_power ; 33 :
66992: LD_ADDR_OWVAR 42
66996: PUSH
66997: LD_INT 28
66999: ST_TO_ADDR
67000: GO 67041
67002: LD_INT 33
67004: DOUBLE
67005: EQUAL
67006: IFTRUE 67010
67008: GO 67021
67010: POP
// bc_type := b_oil_mine ; 34 :
67011: LD_ADDR_OWVAR 42
67015: PUSH
67016: LD_INT 29
67018: ST_TO_ADDR
67019: GO 67041
67021: LD_INT 34
67023: DOUBLE
67024: EQUAL
67025: IFTRUE 67029
67027: GO 67040
67029: POP
// bc_type := b_siberite_mine ; end ;
67030: LD_ADDR_OWVAR 42
67034: PUSH
67035: LD_INT 30
67037: ST_TO_ADDR
67038: GO 67041
67040: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
67041: LD_ADDR_VAR 0 8
67045: PUSH
67046: LD_VAR 0 5
67050: PPUSH
67051: LD_VAR 0 6
67055: PPUSH
67056: LD_VAR 0 3
67060: PPUSH
67061: CALL_OW 47
67065: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
67066: LD_OWVAR 42
67070: PUSH
67071: LD_INT 32
67073: PUSH
67074: LD_INT 33
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: IN
67081: IFFALSE 67097
// PlaceWeaponTurret ( b , weapon ) ;
67083: LD_VAR 0 8
67087: PPUSH
67088: LD_VAR 0 4
67092: PPUSH
67093: CALL_OW 431
// end ;
67097: LD_VAR 0 7
67101: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
67102: LD_INT 0
67104: PPUSH
67105: PPUSH
67106: PPUSH
67107: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67108: LD_ADDR_VAR 0 4
67112: PUSH
67113: LD_INT 22
67115: PUSH
67116: LD_OWVAR 2
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 2
67127: PUSH
67128: LD_INT 30
67130: PUSH
67131: LD_INT 0
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PUSH
67138: LD_INT 30
67140: PUSH
67141: LD_INT 1
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: LIST
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PPUSH
67157: CALL_OW 69
67161: ST_TO_ADDR
// if not tmp then
67162: LD_VAR 0 4
67166: NOT
67167: IFFALSE 67171
// exit ;
67169: GO 67230
// for i in tmp do
67171: LD_ADDR_VAR 0 2
67175: PUSH
67176: LD_VAR 0 4
67180: PUSH
67181: FOR_IN
67182: IFFALSE 67228
// for j = 1 to 3 do
67184: LD_ADDR_VAR 0 3
67188: PUSH
67189: DOUBLE
67190: LD_INT 1
67192: DEC
67193: ST_TO_ADDR
67194: LD_INT 3
67196: PUSH
67197: FOR_TO
67198: IFFALSE 67224
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
67200: LD_VAR 0 2
67204: PPUSH
67205: CALL_OW 274
67209: PPUSH
67210: LD_VAR 0 3
67214: PPUSH
67215: LD_INT 99999
67217: PPUSH
67218: CALL_OW 277
67222: GO 67197
67224: POP
67225: POP
67226: GO 67181
67228: POP
67229: POP
// end ;
67230: LD_VAR 0 1
67234: RET
// export function hHackSetLevel10 ; var i , j ; begin
67235: LD_INT 0
67237: PPUSH
67238: PPUSH
67239: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
67240: LD_ADDR_VAR 0 2
67244: PUSH
67245: LD_INT 21
67247: PUSH
67248: LD_INT 1
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PPUSH
67255: CALL_OW 69
67259: PUSH
67260: FOR_IN
67261: IFFALSE 67313
// if IsSelected ( i ) then
67263: LD_VAR 0 2
67267: PPUSH
67268: CALL_OW 306
67272: IFFALSE 67311
// begin for j := 1 to 4 do
67274: LD_ADDR_VAR 0 3
67278: PUSH
67279: DOUBLE
67280: LD_INT 1
67282: DEC
67283: ST_TO_ADDR
67284: LD_INT 4
67286: PUSH
67287: FOR_TO
67288: IFFALSE 67309
// SetSkill ( i , j , 10 ) ;
67290: LD_VAR 0 2
67294: PPUSH
67295: LD_VAR 0 3
67299: PPUSH
67300: LD_INT 10
67302: PPUSH
67303: CALL_OW 237
67307: GO 67287
67309: POP
67310: POP
// end ;
67311: GO 67260
67313: POP
67314: POP
// end ;
67315: LD_VAR 0 1
67319: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
67320: LD_INT 0
67322: PPUSH
67323: PPUSH
67324: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
67325: LD_ADDR_VAR 0 2
67329: PUSH
67330: LD_INT 22
67332: PUSH
67333: LD_OWVAR 2
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 21
67344: PUSH
67345: LD_INT 1
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PPUSH
67356: CALL_OW 69
67360: PUSH
67361: FOR_IN
67362: IFFALSE 67403
// begin for j := 1 to 4 do
67364: LD_ADDR_VAR 0 3
67368: PUSH
67369: DOUBLE
67370: LD_INT 1
67372: DEC
67373: ST_TO_ADDR
67374: LD_INT 4
67376: PUSH
67377: FOR_TO
67378: IFFALSE 67399
// SetSkill ( i , j , 10 ) ;
67380: LD_VAR 0 2
67384: PPUSH
67385: LD_VAR 0 3
67389: PPUSH
67390: LD_INT 10
67392: PPUSH
67393: CALL_OW 237
67397: GO 67377
67399: POP
67400: POP
// end ;
67401: GO 67361
67403: POP
67404: POP
// end ;
67405: LD_VAR 0 1
67409: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
67410: LD_INT 0
67412: PPUSH
// uc_side := your_side ;
67413: LD_ADDR_OWVAR 20
67417: PUSH
67418: LD_OWVAR 2
67422: ST_TO_ADDR
// uc_nation := nation ;
67423: LD_ADDR_OWVAR 21
67427: PUSH
67428: LD_VAR 0 1
67432: ST_TO_ADDR
// InitHc ;
67433: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
67437: LD_INT 0
67439: PPUSH
67440: LD_VAR 0 2
67444: PPUSH
67445: LD_VAR 0 3
67449: PPUSH
67450: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
67454: LD_VAR 0 4
67458: PPUSH
67459: LD_VAR 0 5
67463: PPUSH
67464: CALL_OW 428
67468: PUSH
67469: LD_INT 0
67471: EQUAL
67472: IFFALSE 67496
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
67474: CALL_OW 44
67478: PPUSH
67479: LD_VAR 0 4
67483: PPUSH
67484: LD_VAR 0 5
67488: PPUSH
67489: LD_INT 1
67491: PPUSH
67492: CALL_OW 48
// end ;
67496: LD_VAR 0 6
67500: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
67501: LD_INT 0
67503: PPUSH
67504: PPUSH
// uc_side := your_side ;
67505: LD_ADDR_OWVAR 20
67509: PUSH
67510: LD_OWVAR 2
67514: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
67515: LD_VAR 0 1
67519: PUSH
67520: LD_INT 1
67522: PUSH
67523: LD_INT 2
67525: PUSH
67526: LD_INT 3
67528: PUSH
67529: LD_INT 4
67531: PUSH
67532: LD_INT 5
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: IN
67542: IFFALSE 67554
// uc_nation := nation_american else
67544: LD_ADDR_OWVAR 21
67548: PUSH
67549: LD_INT 1
67551: ST_TO_ADDR
67552: GO 67597
// if chassis in [ 11 , 12 , 13 , 14 ] then
67554: LD_VAR 0 1
67558: PUSH
67559: LD_INT 11
67561: PUSH
67562: LD_INT 12
67564: PUSH
67565: LD_INT 13
67567: PUSH
67568: LD_INT 14
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: LIST
67575: LIST
67576: IN
67577: IFFALSE 67589
// uc_nation := nation_arabian else
67579: LD_ADDR_OWVAR 21
67583: PUSH
67584: LD_INT 2
67586: ST_TO_ADDR
67587: GO 67597
// uc_nation := nation_russian ;
67589: LD_ADDR_OWVAR 21
67593: PUSH
67594: LD_INT 3
67596: ST_TO_ADDR
// vc_chassis := chassis ;
67597: LD_ADDR_OWVAR 37
67601: PUSH
67602: LD_VAR 0 1
67606: ST_TO_ADDR
// vc_engine := engine ;
67607: LD_ADDR_OWVAR 39
67611: PUSH
67612: LD_VAR 0 2
67616: ST_TO_ADDR
// vc_control := control ;
67617: LD_ADDR_OWVAR 38
67621: PUSH
67622: LD_VAR 0 3
67626: ST_TO_ADDR
// vc_weapon := weapon ;
67627: LD_ADDR_OWVAR 40
67631: PUSH
67632: LD_VAR 0 4
67636: ST_TO_ADDR
// un := CreateVehicle ;
67637: LD_ADDR_VAR 0 8
67641: PUSH
67642: CALL_OW 45
67646: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
67647: LD_VAR 0 8
67651: PPUSH
67652: LD_INT 0
67654: PPUSH
67655: LD_INT 5
67657: PPUSH
67658: CALL_OW 12
67662: PPUSH
67663: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
67667: LD_VAR 0 8
67671: PPUSH
67672: LD_VAR 0 5
67676: PPUSH
67677: LD_VAR 0 6
67681: PPUSH
67682: LD_INT 1
67684: PPUSH
67685: CALL_OW 48
// end ;
67689: LD_VAR 0 7
67693: RET
// export hInvincible ; every 1 do
67694: GO 67696
67696: DISABLE
// hInvincible := [ ] ;
67697: LD_ADDR_EXP 175
67701: PUSH
67702: EMPTY
67703: ST_TO_ADDR
67704: END
// every 10 do var i ;
67705: GO 67707
67707: DISABLE
67708: LD_INT 0
67710: PPUSH
// begin enable ;
67711: ENABLE
// if not hInvincible then
67712: LD_EXP 175
67716: NOT
67717: IFFALSE 67721
// exit ;
67719: GO 67765
// for i in hInvincible do
67721: LD_ADDR_VAR 0 1
67725: PUSH
67726: LD_EXP 175
67730: PUSH
67731: FOR_IN
67732: IFFALSE 67763
// if GetLives ( i ) < 1000 then
67734: LD_VAR 0 1
67738: PPUSH
67739: CALL_OW 256
67743: PUSH
67744: LD_INT 1000
67746: LESS
67747: IFFALSE 67761
// SetLives ( i , 1000 ) ;
67749: LD_VAR 0 1
67753: PPUSH
67754: LD_INT 1000
67756: PPUSH
67757: CALL_OW 234
67761: GO 67731
67763: POP
67764: POP
// end ;
67765: PPOPN 1
67767: END
// export function hHackInvincible ; var i ; begin
67768: LD_INT 0
67770: PPUSH
67771: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
67772: LD_ADDR_VAR 0 2
67776: PUSH
67777: LD_INT 2
67779: PUSH
67780: LD_INT 21
67782: PUSH
67783: LD_INT 1
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: LD_INT 21
67792: PUSH
67793: LD_INT 2
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: LIST
67804: PPUSH
67805: CALL_OW 69
67809: PUSH
67810: FOR_IN
67811: IFFALSE 67872
// if IsSelected ( i ) then
67813: LD_VAR 0 2
67817: PPUSH
67818: CALL_OW 306
67822: IFFALSE 67870
// begin if i in hInvincible then
67824: LD_VAR 0 2
67828: PUSH
67829: LD_EXP 175
67833: IN
67834: IFFALSE 67854
// hInvincible := hInvincible diff i else
67836: LD_ADDR_EXP 175
67840: PUSH
67841: LD_EXP 175
67845: PUSH
67846: LD_VAR 0 2
67850: DIFF
67851: ST_TO_ADDR
67852: GO 67870
// hInvincible := hInvincible union i ;
67854: LD_ADDR_EXP 175
67858: PUSH
67859: LD_EXP 175
67863: PUSH
67864: LD_VAR 0 2
67868: UNION
67869: ST_TO_ADDR
// end ;
67870: GO 67810
67872: POP
67873: POP
// end ;
67874: LD_VAR 0 1
67878: RET
// export function hHackInvisible ; var i , j ; begin
67879: LD_INT 0
67881: PPUSH
67882: PPUSH
67883: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
67884: LD_ADDR_VAR 0 2
67888: PUSH
67889: LD_INT 21
67891: PUSH
67892: LD_INT 1
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PPUSH
67899: CALL_OW 69
67903: PUSH
67904: FOR_IN
67905: IFFALSE 67929
// if IsSelected ( i ) then
67907: LD_VAR 0 2
67911: PPUSH
67912: CALL_OW 306
67916: IFFALSE 67927
// ComForceInvisible ( i ) ;
67918: LD_VAR 0 2
67922: PPUSH
67923: CALL_OW 496
67927: GO 67904
67929: POP
67930: POP
// end ;
67931: LD_VAR 0 1
67935: RET
// export function hHackChangeYourSide ; begin
67936: LD_INT 0
67938: PPUSH
// if your_side = 8 then
67939: LD_OWVAR 2
67943: PUSH
67944: LD_INT 8
67946: EQUAL
67947: IFFALSE 67959
// your_side := 0 else
67949: LD_ADDR_OWVAR 2
67953: PUSH
67954: LD_INT 0
67956: ST_TO_ADDR
67957: GO 67973
// your_side := your_side + 1 ;
67959: LD_ADDR_OWVAR 2
67963: PUSH
67964: LD_OWVAR 2
67968: PUSH
67969: LD_INT 1
67971: PLUS
67972: ST_TO_ADDR
// end ;
67973: LD_VAR 0 1
67977: RET
// export function hHackChangeUnitSide ; var i , j ; begin
67978: LD_INT 0
67980: PPUSH
67981: PPUSH
67982: PPUSH
// for i in all_units do
67983: LD_ADDR_VAR 0 2
67987: PUSH
67988: LD_OWVAR 3
67992: PUSH
67993: FOR_IN
67994: IFFALSE 68072
// if IsSelected ( i ) then
67996: LD_VAR 0 2
68000: PPUSH
68001: CALL_OW 306
68005: IFFALSE 68070
// begin j := GetSide ( i ) ;
68007: LD_ADDR_VAR 0 3
68011: PUSH
68012: LD_VAR 0 2
68016: PPUSH
68017: CALL_OW 255
68021: ST_TO_ADDR
// if j = 8 then
68022: LD_VAR 0 3
68026: PUSH
68027: LD_INT 8
68029: EQUAL
68030: IFFALSE 68042
// j := 0 else
68032: LD_ADDR_VAR 0 3
68036: PUSH
68037: LD_INT 0
68039: ST_TO_ADDR
68040: GO 68056
// j := j + 1 ;
68042: LD_ADDR_VAR 0 3
68046: PUSH
68047: LD_VAR 0 3
68051: PUSH
68052: LD_INT 1
68054: PLUS
68055: ST_TO_ADDR
// SetSide ( i , j ) ;
68056: LD_VAR 0 2
68060: PPUSH
68061: LD_VAR 0 3
68065: PPUSH
68066: CALL_OW 235
// end ;
68070: GO 67993
68072: POP
68073: POP
// end ;
68074: LD_VAR 0 1
68078: RET
// export function hHackFog ; begin
68079: LD_INT 0
68081: PPUSH
// FogOff ( true ) ;
68082: LD_INT 1
68084: PPUSH
68085: CALL_OW 344
// end ;
68089: LD_VAR 0 1
68093: RET
// export function hHackTeleport ( unit , x , y ) ; begin
68094: LD_INT 0
68096: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
68097: LD_VAR 0 1
68101: PPUSH
68102: LD_VAR 0 2
68106: PPUSH
68107: LD_VAR 0 3
68111: PPUSH
68112: LD_INT 1
68114: PPUSH
68115: LD_INT 1
68117: PPUSH
68118: CALL_OW 483
// CenterOnXY ( x , y ) ;
68122: LD_VAR 0 2
68126: PPUSH
68127: LD_VAR 0 3
68131: PPUSH
68132: CALL_OW 84
// end ; end_of_file
68136: LD_VAR 0 4
68140: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
68141: LD_INT 0
68143: PPUSH
68144: PPUSH
68145: PPUSH
68146: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
68147: LD_VAR 0 1
68151: PPUSH
68152: CALL_OW 264
68156: PUSH
68157: LD_EXP 102
68161: EQUAL
68162: IFFALSE 68234
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
68164: LD_INT 68
68166: PPUSH
68167: LD_VAR 0 1
68171: PPUSH
68172: CALL_OW 255
68176: PPUSH
68177: CALL_OW 321
68181: PUSH
68182: LD_INT 2
68184: EQUAL
68185: IFFALSE 68197
// eff := 70 else
68187: LD_ADDR_VAR 0 4
68191: PUSH
68192: LD_INT 70
68194: ST_TO_ADDR
68195: GO 68205
// eff := 30 ;
68197: LD_ADDR_VAR 0 4
68201: PUSH
68202: LD_INT 30
68204: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
68205: LD_VAR 0 1
68209: PPUSH
68210: CALL_OW 250
68214: PPUSH
68215: LD_VAR 0 1
68219: PPUSH
68220: CALL_OW 251
68224: PPUSH
68225: LD_VAR 0 4
68229: PPUSH
68230: CALL_OW 495
// end ; end ;
68234: LD_VAR 0 2
68238: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
68239: LD_INT 0
68241: PPUSH
// end ;
68242: LD_VAR 0 4
68246: RET
// export function SOS_Command ( cmd ) ; begin
68247: LD_INT 0
68249: PPUSH
// end ;
68250: LD_VAR 0 2
68254: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
68255: LD_INT 0
68257: PPUSH
// end ;
68258: LD_VAR 0 6
68262: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
68263: LD_INT 0
68265: PPUSH
68266: PPUSH
// if not vehicle or not factory then
68267: LD_VAR 0 1
68271: NOT
68272: PUSH
68273: LD_VAR 0 2
68277: NOT
68278: OR
68279: IFFALSE 68283
// exit ;
68281: GO 68514
// if factoryWaypoints >= factory then
68283: LD_EXP 176
68287: PUSH
68288: LD_VAR 0 2
68292: GREATEREQUAL
68293: IFFALSE 68514
// if factoryWaypoints [ factory ] then
68295: LD_EXP 176
68299: PUSH
68300: LD_VAR 0 2
68304: ARRAY
68305: IFFALSE 68514
// begin if GetControl ( vehicle ) = control_manual then
68307: LD_VAR 0 1
68311: PPUSH
68312: CALL_OW 263
68316: PUSH
68317: LD_INT 1
68319: EQUAL
68320: IFFALSE 68401
// begin driver := IsDrivenBy ( vehicle ) ;
68322: LD_ADDR_VAR 0 4
68326: PUSH
68327: LD_VAR 0 1
68331: PPUSH
68332: CALL_OW 311
68336: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
68337: LD_VAR 0 4
68341: PPUSH
68342: LD_EXP 176
68346: PUSH
68347: LD_VAR 0 2
68351: ARRAY
68352: PUSH
68353: LD_INT 3
68355: ARRAY
68356: PPUSH
68357: LD_EXP 176
68361: PUSH
68362: LD_VAR 0 2
68366: ARRAY
68367: PUSH
68368: LD_INT 4
68370: ARRAY
68371: PPUSH
68372: CALL_OW 171
// AddComExitVehicle ( driver ) ;
68376: LD_VAR 0 4
68380: PPUSH
68381: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
68385: LD_VAR 0 4
68389: PPUSH
68390: LD_VAR 0 2
68394: PPUSH
68395: CALL_OW 180
// end else
68399: GO 68514
// if GetControl ( vehicle ) = control_remote then
68401: LD_VAR 0 1
68405: PPUSH
68406: CALL_OW 263
68410: PUSH
68411: LD_INT 2
68413: EQUAL
68414: IFFALSE 68475
// begin wait ( 0 0$2 ) ;
68416: LD_INT 70
68418: PPUSH
68419: CALL_OW 67
// if Connect ( vehicle ) then
68423: LD_VAR 0 1
68427: PPUSH
68428: CALL 21204 0 1
68432: IFFALSE 68473
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
68434: LD_VAR 0 1
68438: PPUSH
68439: LD_EXP 176
68443: PUSH
68444: LD_VAR 0 2
68448: ARRAY
68449: PUSH
68450: LD_INT 3
68452: ARRAY
68453: PPUSH
68454: LD_EXP 176
68458: PUSH
68459: LD_VAR 0 2
68463: ARRAY
68464: PUSH
68465: LD_INT 4
68467: ARRAY
68468: PPUSH
68469: CALL_OW 171
// end else
68473: GO 68514
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
68475: LD_VAR 0 1
68479: PPUSH
68480: LD_EXP 176
68484: PUSH
68485: LD_VAR 0 2
68489: ARRAY
68490: PUSH
68491: LD_INT 3
68493: ARRAY
68494: PPUSH
68495: LD_EXP 176
68499: PUSH
68500: LD_VAR 0 2
68504: ARRAY
68505: PUSH
68506: LD_INT 4
68508: ARRAY
68509: PPUSH
68510: CALL_OW 171
// end ; end ;
68514: LD_VAR 0 3
68518: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
68519: LD_INT 0
68521: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
68522: LD_VAR 0 1
68526: PUSH
68527: LD_INT 250
68529: EQUAL
68530: PUSH
68531: LD_VAR 0 2
68535: PPUSH
68536: CALL_OW 264
68540: PUSH
68541: LD_EXP 105
68545: EQUAL
68546: AND
68547: IFFALSE 68568
// MinerPlaceMine ( unit , x , y ) ;
68549: LD_VAR 0 2
68553: PPUSH
68554: LD_VAR 0 4
68558: PPUSH
68559: LD_VAR 0 5
68563: PPUSH
68564: CALL 71296 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
68568: LD_VAR 0 1
68572: PUSH
68573: LD_INT 251
68575: EQUAL
68576: PUSH
68577: LD_VAR 0 2
68581: PPUSH
68582: CALL_OW 264
68586: PUSH
68587: LD_EXP 105
68591: EQUAL
68592: AND
68593: IFFALSE 68614
// MinerDetonateMine ( unit , x , y ) ;
68595: LD_VAR 0 2
68599: PPUSH
68600: LD_VAR 0 4
68604: PPUSH
68605: LD_VAR 0 5
68609: PPUSH
68610: CALL 71573 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
68614: LD_VAR 0 1
68618: PUSH
68619: LD_INT 252
68621: EQUAL
68622: PUSH
68623: LD_VAR 0 2
68627: PPUSH
68628: CALL_OW 264
68632: PUSH
68633: LD_EXP 105
68637: EQUAL
68638: AND
68639: IFFALSE 68660
// MinerCreateMinefield ( unit , x , y ) ;
68641: LD_VAR 0 2
68645: PPUSH
68646: LD_VAR 0 4
68650: PPUSH
68651: LD_VAR 0 5
68655: PPUSH
68656: CALL 71990 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
68660: LD_VAR 0 1
68664: PUSH
68665: LD_INT 253
68667: EQUAL
68668: PUSH
68669: LD_VAR 0 2
68673: PPUSH
68674: CALL_OW 257
68678: PUSH
68679: LD_INT 5
68681: EQUAL
68682: AND
68683: IFFALSE 68704
// ComBinocular ( unit , x , y ) ;
68685: LD_VAR 0 2
68689: PPUSH
68690: LD_VAR 0 4
68694: PPUSH
68695: LD_VAR 0 5
68699: PPUSH
68700: CALL 72361 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
68704: LD_VAR 0 1
68708: PUSH
68709: LD_INT 254
68711: EQUAL
68712: PUSH
68713: LD_VAR 0 2
68717: PPUSH
68718: CALL_OW 264
68722: PUSH
68723: LD_EXP 100
68727: EQUAL
68728: AND
68729: PUSH
68730: LD_VAR 0 3
68734: PPUSH
68735: CALL_OW 263
68739: PUSH
68740: LD_INT 3
68742: EQUAL
68743: AND
68744: IFFALSE 68760
// HackDestroyVehicle ( unit , selectedUnit ) ;
68746: LD_VAR 0 2
68750: PPUSH
68751: LD_VAR 0 3
68755: PPUSH
68756: CALL 70656 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
68760: LD_VAR 0 1
68764: PUSH
68765: LD_INT 255
68767: EQUAL
68768: PUSH
68769: LD_VAR 0 2
68773: PPUSH
68774: CALL_OW 264
68778: PUSH
68779: LD_INT 14
68781: PUSH
68782: LD_INT 53
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: IN
68789: AND
68790: PUSH
68791: LD_VAR 0 4
68795: PPUSH
68796: LD_VAR 0 5
68800: PPUSH
68801: CALL_OW 488
68805: AND
68806: IFFALSE 68830
// CutTreeXYR ( unit , x , y , 12 ) ;
68808: LD_VAR 0 2
68812: PPUSH
68813: LD_VAR 0 4
68817: PPUSH
68818: LD_VAR 0 5
68822: PPUSH
68823: LD_INT 12
68825: PPUSH
68826: CALL 69222 0 4
// if cmd = 256 then
68830: LD_VAR 0 1
68834: PUSH
68835: LD_INT 256
68837: EQUAL
68838: IFFALSE 68859
// SetFactoryWaypoint ( unit , x , y ) ;
68840: LD_VAR 0 2
68844: PPUSH
68845: LD_VAR 0 4
68849: PPUSH
68850: LD_VAR 0 5
68854: PPUSH
68855: CALL 68864 0 3
// end ;
68859: LD_VAR 0 6
68863: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
68864: LD_INT 0
68866: PPUSH
68867: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
68868: LD_VAR 0 1
68872: NOT
68873: PUSH
68874: LD_VAR 0 2
68878: PPUSH
68879: LD_VAR 0 3
68883: PPUSH
68884: CALL_OW 488
68888: NOT
68889: OR
68890: PUSH
68891: LD_VAR 0 1
68895: PPUSH
68896: CALL_OW 266
68900: PUSH
68901: LD_INT 3
68903: NONEQUAL
68904: PUSH
68905: LD_VAR 0 1
68909: PPUSH
68910: CALL_OW 247
68914: PUSH
68915: LD_INT 1
68917: EQUAL
68918: NOT
68919: AND
68920: OR
68921: IFFALSE 68925
// exit ;
68923: GO 69074
// if GetType ( factory ) = unit_human then
68925: LD_VAR 0 1
68929: PPUSH
68930: CALL_OW 247
68934: PUSH
68935: LD_INT 1
68937: EQUAL
68938: IFFALSE 68955
// factory := IsInUnit ( factory ) ;
68940: LD_ADDR_VAR 0 1
68944: PUSH
68945: LD_VAR 0 1
68949: PPUSH
68950: CALL_OW 310
68954: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
68955: LD_VAR 0 1
68959: PPUSH
68960: CALL_OW 266
68964: PUSH
68965: LD_INT 3
68967: NONEQUAL
68968: IFFALSE 68972
// exit ;
68970: GO 69074
// if HexInfo ( x , y ) = factory then
68972: LD_VAR 0 2
68976: PPUSH
68977: LD_VAR 0 3
68981: PPUSH
68982: CALL_OW 428
68986: PUSH
68987: LD_VAR 0 1
68991: EQUAL
68992: IFFALSE 69019
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
68994: LD_ADDR_EXP 176
68998: PUSH
68999: LD_EXP 176
69003: PPUSH
69004: LD_VAR 0 1
69008: PPUSH
69009: LD_INT 0
69011: PPUSH
69012: CALL_OW 1
69016: ST_TO_ADDR
69017: GO 69070
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
69019: LD_ADDR_EXP 176
69023: PUSH
69024: LD_EXP 176
69028: PPUSH
69029: LD_VAR 0 1
69033: PPUSH
69034: LD_VAR 0 1
69038: PPUSH
69039: CALL_OW 255
69043: PUSH
69044: LD_VAR 0 1
69048: PUSH
69049: LD_VAR 0 2
69053: PUSH
69054: LD_VAR 0 3
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: PPUSH
69065: CALL_OW 1
69069: ST_TO_ADDR
// UpdateFactoryWaypoints ;
69070: CALL 69079 0 0
// end ;
69074: LD_VAR 0 4
69078: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
69079: LD_INT 0
69081: PPUSH
69082: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
69083: LD_STRING resetFactoryWaypoint();
69085: PPUSH
69086: CALL_OW 559
// if factoryWaypoints then
69090: LD_EXP 176
69094: IFFALSE 69217
// begin for i := 1 to factoryWaypoints do
69096: LD_ADDR_VAR 0 2
69100: PUSH
69101: DOUBLE
69102: LD_INT 1
69104: DEC
69105: ST_TO_ADDR
69106: LD_EXP 176
69110: PUSH
69111: FOR_TO
69112: IFFALSE 69215
// if factoryWaypoints [ i ] then
69114: LD_EXP 176
69118: PUSH
69119: LD_VAR 0 2
69123: ARRAY
69124: IFFALSE 69213
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
69126: LD_STRING setFactoryWaypointXY(
69128: PUSH
69129: LD_EXP 176
69133: PUSH
69134: LD_VAR 0 2
69138: ARRAY
69139: PUSH
69140: LD_INT 1
69142: ARRAY
69143: STR
69144: PUSH
69145: LD_STRING ,
69147: STR
69148: PUSH
69149: LD_EXP 176
69153: PUSH
69154: LD_VAR 0 2
69158: ARRAY
69159: PUSH
69160: LD_INT 2
69162: ARRAY
69163: STR
69164: PUSH
69165: LD_STRING ,
69167: STR
69168: PUSH
69169: LD_EXP 176
69173: PUSH
69174: LD_VAR 0 2
69178: ARRAY
69179: PUSH
69180: LD_INT 3
69182: ARRAY
69183: STR
69184: PUSH
69185: LD_STRING ,
69187: STR
69188: PUSH
69189: LD_EXP 176
69193: PUSH
69194: LD_VAR 0 2
69198: ARRAY
69199: PUSH
69200: LD_INT 4
69202: ARRAY
69203: STR
69204: PUSH
69205: LD_STRING )
69207: STR
69208: PPUSH
69209: CALL_OW 559
69213: GO 69111
69215: POP
69216: POP
// end ; end ;
69217: LD_VAR 0 1
69221: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
69222: LD_INT 0
69224: PPUSH
69225: PPUSH
69226: PPUSH
69227: PPUSH
69228: PPUSH
69229: PPUSH
69230: PPUSH
69231: PPUSH
69232: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
69233: LD_VAR 0 1
69237: NOT
69238: PUSH
69239: LD_VAR 0 2
69243: PPUSH
69244: LD_VAR 0 3
69248: PPUSH
69249: CALL_OW 488
69253: NOT
69254: OR
69255: PUSH
69256: LD_VAR 0 4
69260: NOT
69261: OR
69262: IFFALSE 69266
// exit ;
69264: GO 69606
// list := [ ] ;
69266: LD_ADDR_VAR 0 13
69270: PUSH
69271: EMPTY
69272: ST_TO_ADDR
// if x - r < 0 then
69273: LD_VAR 0 2
69277: PUSH
69278: LD_VAR 0 4
69282: MINUS
69283: PUSH
69284: LD_INT 0
69286: LESS
69287: IFFALSE 69299
// min_x := 0 else
69289: LD_ADDR_VAR 0 7
69293: PUSH
69294: LD_INT 0
69296: ST_TO_ADDR
69297: GO 69315
// min_x := x - r ;
69299: LD_ADDR_VAR 0 7
69303: PUSH
69304: LD_VAR 0 2
69308: PUSH
69309: LD_VAR 0 4
69313: MINUS
69314: ST_TO_ADDR
// if y - r < 0 then
69315: LD_VAR 0 3
69319: PUSH
69320: LD_VAR 0 4
69324: MINUS
69325: PUSH
69326: LD_INT 0
69328: LESS
69329: IFFALSE 69341
// min_y := 0 else
69331: LD_ADDR_VAR 0 8
69335: PUSH
69336: LD_INT 0
69338: ST_TO_ADDR
69339: GO 69357
// min_y := y - r ;
69341: LD_ADDR_VAR 0 8
69345: PUSH
69346: LD_VAR 0 3
69350: PUSH
69351: LD_VAR 0 4
69355: MINUS
69356: ST_TO_ADDR
// max_x := x + r ;
69357: LD_ADDR_VAR 0 9
69361: PUSH
69362: LD_VAR 0 2
69366: PUSH
69367: LD_VAR 0 4
69371: PLUS
69372: ST_TO_ADDR
// max_y := y + r ;
69373: LD_ADDR_VAR 0 10
69377: PUSH
69378: LD_VAR 0 3
69382: PUSH
69383: LD_VAR 0 4
69387: PLUS
69388: ST_TO_ADDR
// for _x = min_x to max_x do
69389: LD_ADDR_VAR 0 11
69393: PUSH
69394: DOUBLE
69395: LD_VAR 0 7
69399: DEC
69400: ST_TO_ADDR
69401: LD_VAR 0 9
69405: PUSH
69406: FOR_TO
69407: IFFALSE 69524
// for _y = min_y to max_y do
69409: LD_ADDR_VAR 0 12
69413: PUSH
69414: DOUBLE
69415: LD_VAR 0 8
69419: DEC
69420: ST_TO_ADDR
69421: LD_VAR 0 10
69425: PUSH
69426: FOR_TO
69427: IFFALSE 69520
// begin if not ValidHex ( _x , _y ) then
69429: LD_VAR 0 11
69433: PPUSH
69434: LD_VAR 0 12
69438: PPUSH
69439: CALL_OW 488
69443: NOT
69444: IFFALSE 69448
// continue ;
69446: GO 69426
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
69448: LD_VAR 0 11
69452: PPUSH
69453: LD_VAR 0 12
69457: PPUSH
69458: CALL_OW 351
69462: PUSH
69463: LD_VAR 0 11
69467: PPUSH
69468: LD_VAR 0 12
69472: PPUSH
69473: CALL_OW 554
69477: AND
69478: IFFALSE 69518
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
69480: LD_ADDR_VAR 0 13
69484: PUSH
69485: LD_VAR 0 13
69489: PPUSH
69490: LD_VAR 0 13
69494: PUSH
69495: LD_INT 1
69497: PLUS
69498: PPUSH
69499: LD_VAR 0 11
69503: PUSH
69504: LD_VAR 0 12
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PPUSH
69513: CALL_OW 2
69517: ST_TO_ADDR
// end ;
69518: GO 69426
69520: POP
69521: POP
69522: GO 69406
69524: POP
69525: POP
// if not list then
69526: LD_VAR 0 13
69530: NOT
69531: IFFALSE 69535
// exit ;
69533: GO 69606
// for i in list do
69535: LD_ADDR_VAR 0 6
69539: PUSH
69540: LD_VAR 0 13
69544: PUSH
69545: FOR_IN
69546: IFFALSE 69604
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
69548: LD_VAR 0 1
69552: PPUSH
69553: LD_STRING M
69555: PUSH
69556: LD_VAR 0 6
69560: PUSH
69561: LD_INT 1
69563: ARRAY
69564: PUSH
69565: LD_VAR 0 6
69569: PUSH
69570: LD_INT 2
69572: ARRAY
69573: PUSH
69574: LD_INT 0
69576: PUSH
69577: LD_INT 0
69579: PUSH
69580: LD_INT 0
69582: PUSH
69583: LD_INT 0
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: LIST
69594: PUSH
69595: EMPTY
69596: LIST
69597: PPUSH
69598: CALL_OW 447
69602: GO 69545
69604: POP
69605: POP
// end ;
69606: LD_VAR 0 5
69610: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
69611: LD_EXP 177
69615: NOT
69616: IFFALSE 69666
69618: GO 69620
69620: DISABLE
// begin initHack := true ;
69621: LD_ADDR_EXP 177
69625: PUSH
69626: LD_INT 1
69628: ST_TO_ADDR
// hackTanks := [ ] ;
69629: LD_ADDR_EXP 178
69633: PUSH
69634: EMPTY
69635: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
69636: LD_ADDR_EXP 179
69640: PUSH
69641: EMPTY
69642: ST_TO_ADDR
// hackLimit := 3 ;
69643: LD_ADDR_EXP 180
69647: PUSH
69648: LD_INT 3
69650: ST_TO_ADDR
// hackDist := 12 ;
69651: LD_ADDR_EXP 181
69655: PUSH
69656: LD_INT 12
69658: ST_TO_ADDR
// hackCounter := [ ] ;
69659: LD_ADDR_EXP 182
69663: PUSH
69664: EMPTY
69665: ST_TO_ADDR
// end ;
69666: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
69667: LD_EXP 177
69671: PUSH
69672: LD_INT 34
69674: PUSH
69675: LD_EXP 100
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: PPUSH
69684: CALL_OW 69
69688: AND
69689: IFFALSE 69944
69691: GO 69693
69693: DISABLE
69694: LD_INT 0
69696: PPUSH
69697: PPUSH
// begin enable ;
69698: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
69699: LD_ADDR_VAR 0 1
69703: PUSH
69704: LD_INT 34
69706: PUSH
69707: LD_EXP 100
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PPUSH
69716: CALL_OW 69
69720: PUSH
69721: FOR_IN
69722: IFFALSE 69942
// begin if not i in hackTanks then
69724: LD_VAR 0 1
69728: PUSH
69729: LD_EXP 178
69733: IN
69734: NOT
69735: IFFALSE 69818
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
69737: LD_ADDR_EXP 178
69741: PUSH
69742: LD_EXP 178
69746: PPUSH
69747: LD_EXP 178
69751: PUSH
69752: LD_INT 1
69754: PLUS
69755: PPUSH
69756: LD_VAR 0 1
69760: PPUSH
69761: CALL_OW 1
69765: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
69766: LD_ADDR_EXP 179
69770: PUSH
69771: LD_EXP 179
69775: PPUSH
69776: LD_EXP 179
69780: PUSH
69781: LD_INT 1
69783: PLUS
69784: PPUSH
69785: EMPTY
69786: PPUSH
69787: CALL_OW 1
69791: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
69792: LD_ADDR_EXP 182
69796: PUSH
69797: LD_EXP 182
69801: PPUSH
69802: LD_EXP 182
69806: PUSH
69807: LD_INT 1
69809: PLUS
69810: PPUSH
69811: EMPTY
69812: PPUSH
69813: CALL_OW 1
69817: ST_TO_ADDR
// end ; if not IsOk ( i ) then
69818: LD_VAR 0 1
69822: PPUSH
69823: CALL_OW 302
69827: NOT
69828: IFFALSE 69841
// begin HackUnlinkAll ( i ) ;
69830: LD_VAR 0 1
69834: PPUSH
69835: CALL 69947 0 1
// continue ;
69839: GO 69721
// end ; HackCheckCapturedStatus ( i ) ;
69841: LD_VAR 0 1
69845: PPUSH
69846: CALL 70390 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
69850: LD_ADDR_VAR 0 2
69854: PUSH
69855: LD_INT 81
69857: PUSH
69858: LD_VAR 0 1
69862: PPUSH
69863: CALL_OW 255
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: LD_INT 33
69874: PUSH
69875: LD_INT 3
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: PUSH
69882: LD_INT 91
69884: PUSH
69885: LD_VAR 0 1
69889: PUSH
69890: LD_EXP 181
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: LIST
69899: PUSH
69900: LD_INT 50
69902: PUSH
69903: EMPTY
69904: LIST
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: PPUSH
69912: CALL_OW 69
69916: ST_TO_ADDR
// if not tmp then
69917: LD_VAR 0 2
69921: NOT
69922: IFFALSE 69926
// continue ;
69924: GO 69721
// HackLink ( i , tmp ) ;
69926: LD_VAR 0 1
69930: PPUSH
69931: LD_VAR 0 2
69935: PPUSH
69936: CALL 70083 0 2
// end ;
69940: GO 69721
69942: POP
69943: POP
// end ;
69944: PPOPN 2
69946: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
69947: LD_INT 0
69949: PPUSH
69950: PPUSH
69951: PPUSH
// if not hack in hackTanks then
69952: LD_VAR 0 1
69956: PUSH
69957: LD_EXP 178
69961: IN
69962: NOT
69963: IFFALSE 69967
// exit ;
69965: GO 70078
// index := GetElementIndex ( hackTanks , hack ) ;
69967: LD_ADDR_VAR 0 4
69971: PUSH
69972: LD_EXP 178
69976: PPUSH
69977: LD_VAR 0 1
69981: PPUSH
69982: CALL 17910 0 2
69986: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
69987: LD_EXP 179
69991: PUSH
69992: LD_VAR 0 4
69996: ARRAY
69997: IFFALSE 70078
// begin for i in hackTanksCaptured [ index ] do
69999: LD_ADDR_VAR 0 3
70003: PUSH
70004: LD_EXP 179
70008: PUSH
70009: LD_VAR 0 4
70013: ARRAY
70014: PUSH
70015: FOR_IN
70016: IFFALSE 70042
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
70018: LD_VAR 0 3
70022: PUSH
70023: LD_INT 1
70025: ARRAY
70026: PPUSH
70027: LD_VAR 0 3
70031: PUSH
70032: LD_INT 2
70034: ARRAY
70035: PPUSH
70036: CALL_OW 235
70040: GO 70015
70042: POP
70043: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
70044: LD_ADDR_EXP 179
70048: PUSH
70049: LD_EXP 179
70053: PPUSH
70054: LD_VAR 0 4
70058: PPUSH
70059: EMPTY
70060: PPUSH
70061: CALL_OW 1
70065: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
70066: LD_VAR 0 1
70070: PPUSH
70071: LD_INT 0
70073: PPUSH
70074: CALL_OW 505
// end ; end ;
70078: LD_VAR 0 2
70082: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
70083: LD_INT 0
70085: PPUSH
70086: PPUSH
70087: PPUSH
// if not hack in hackTanks or not vehicles then
70088: LD_VAR 0 1
70092: PUSH
70093: LD_EXP 178
70097: IN
70098: NOT
70099: PUSH
70100: LD_VAR 0 2
70104: NOT
70105: OR
70106: IFFALSE 70110
// exit ;
70108: GO 70385
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
70110: LD_ADDR_VAR 0 2
70114: PUSH
70115: LD_VAR 0 1
70119: PPUSH
70120: LD_VAR 0 2
70124: PPUSH
70125: LD_INT 1
70127: PPUSH
70128: LD_INT 1
70130: PPUSH
70131: CALL 18560 0 4
70135: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
70136: LD_ADDR_VAR 0 5
70140: PUSH
70141: LD_EXP 178
70145: PPUSH
70146: LD_VAR 0 1
70150: PPUSH
70151: CALL 17910 0 2
70155: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
70156: LD_EXP 179
70160: PUSH
70161: LD_VAR 0 5
70165: ARRAY
70166: PUSH
70167: LD_EXP 180
70171: LESS
70172: IFFALSE 70361
// begin for i := 1 to vehicles do
70174: LD_ADDR_VAR 0 4
70178: PUSH
70179: DOUBLE
70180: LD_INT 1
70182: DEC
70183: ST_TO_ADDR
70184: LD_VAR 0 2
70188: PUSH
70189: FOR_TO
70190: IFFALSE 70359
// begin if hackTanksCaptured [ index ] = hackLimit then
70192: LD_EXP 179
70196: PUSH
70197: LD_VAR 0 5
70201: ARRAY
70202: PUSH
70203: LD_EXP 180
70207: EQUAL
70208: IFFALSE 70212
// break ;
70210: GO 70359
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
70212: LD_ADDR_EXP 182
70216: PUSH
70217: LD_EXP 182
70221: PPUSH
70222: LD_VAR 0 5
70226: PPUSH
70227: LD_EXP 182
70231: PUSH
70232: LD_VAR 0 5
70236: ARRAY
70237: PUSH
70238: LD_INT 1
70240: PLUS
70241: PPUSH
70242: CALL_OW 1
70246: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
70247: LD_ADDR_EXP 179
70251: PUSH
70252: LD_EXP 179
70256: PPUSH
70257: LD_VAR 0 5
70261: PUSH
70262: LD_EXP 179
70266: PUSH
70267: LD_VAR 0 5
70271: ARRAY
70272: PUSH
70273: LD_INT 1
70275: PLUS
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PPUSH
70281: LD_VAR 0 2
70285: PUSH
70286: LD_VAR 0 4
70290: ARRAY
70291: PUSH
70292: LD_VAR 0 2
70296: PUSH
70297: LD_VAR 0 4
70301: ARRAY
70302: PPUSH
70303: CALL_OW 255
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PPUSH
70312: CALL 18125 0 3
70316: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
70317: LD_VAR 0 2
70321: PUSH
70322: LD_VAR 0 4
70326: ARRAY
70327: PPUSH
70328: LD_VAR 0 1
70332: PPUSH
70333: CALL_OW 255
70337: PPUSH
70338: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
70342: LD_VAR 0 2
70346: PUSH
70347: LD_VAR 0 4
70351: ARRAY
70352: PPUSH
70353: CALL_OW 141
// end ;
70357: GO 70189
70359: POP
70360: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
70361: LD_VAR 0 1
70365: PPUSH
70366: LD_EXP 179
70370: PUSH
70371: LD_VAR 0 5
70375: ARRAY
70376: PUSH
70377: LD_INT 0
70379: PLUS
70380: PPUSH
70381: CALL_OW 505
// end ;
70385: LD_VAR 0 3
70389: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
70390: LD_INT 0
70392: PPUSH
70393: PPUSH
70394: PPUSH
70395: PPUSH
// if not hack in hackTanks then
70396: LD_VAR 0 1
70400: PUSH
70401: LD_EXP 178
70405: IN
70406: NOT
70407: IFFALSE 70411
// exit ;
70409: GO 70651
// index := GetElementIndex ( hackTanks , hack ) ;
70411: LD_ADDR_VAR 0 4
70415: PUSH
70416: LD_EXP 178
70420: PPUSH
70421: LD_VAR 0 1
70425: PPUSH
70426: CALL 17910 0 2
70430: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
70431: LD_ADDR_VAR 0 3
70435: PUSH
70436: DOUBLE
70437: LD_EXP 179
70441: PUSH
70442: LD_VAR 0 4
70446: ARRAY
70447: INC
70448: ST_TO_ADDR
70449: LD_INT 1
70451: PUSH
70452: FOR_DOWNTO
70453: IFFALSE 70625
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
70455: LD_ADDR_VAR 0 5
70459: PUSH
70460: LD_EXP 179
70464: PUSH
70465: LD_VAR 0 4
70469: ARRAY
70470: PUSH
70471: LD_VAR 0 3
70475: ARRAY
70476: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
70477: LD_VAR 0 5
70481: PUSH
70482: LD_INT 1
70484: ARRAY
70485: PPUSH
70486: CALL_OW 302
70490: NOT
70491: PUSH
70492: LD_VAR 0 5
70496: PUSH
70497: LD_INT 1
70499: ARRAY
70500: PPUSH
70501: CALL_OW 255
70505: PUSH
70506: LD_VAR 0 1
70510: PPUSH
70511: CALL_OW 255
70515: NONEQUAL
70516: OR
70517: IFFALSE 70623
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
70519: LD_VAR 0 5
70523: PUSH
70524: LD_INT 1
70526: ARRAY
70527: PPUSH
70528: CALL_OW 305
70532: PUSH
70533: LD_VAR 0 5
70537: PUSH
70538: LD_INT 1
70540: ARRAY
70541: PPUSH
70542: CALL_OW 255
70546: PUSH
70547: LD_VAR 0 1
70551: PPUSH
70552: CALL_OW 255
70556: EQUAL
70557: AND
70558: IFFALSE 70582
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
70560: LD_VAR 0 5
70564: PUSH
70565: LD_INT 1
70567: ARRAY
70568: PPUSH
70569: LD_VAR 0 5
70573: PUSH
70574: LD_INT 2
70576: ARRAY
70577: PPUSH
70578: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
70582: LD_ADDR_EXP 179
70586: PUSH
70587: LD_EXP 179
70591: PPUSH
70592: LD_VAR 0 4
70596: PPUSH
70597: LD_EXP 179
70601: PUSH
70602: LD_VAR 0 4
70606: ARRAY
70607: PPUSH
70608: LD_VAR 0 3
70612: PPUSH
70613: CALL_OW 3
70617: PPUSH
70618: CALL_OW 1
70622: ST_TO_ADDR
// end ; end ;
70623: GO 70452
70625: POP
70626: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
70627: LD_VAR 0 1
70631: PPUSH
70632: LD_EXP 179
70636: PUSH
70637: LD_VAR 0 4
70641: ARRAY
70642: PUSH
70643: LD_INT 0
70645: PLUS
70646: PPUSH
70647: CALL_OW 505
// end ;
70651: LD_VAR 0 2
70655: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
70656: LD_INT 0
70658: PPUSH
70659: PPUSH
70660: PPUSH
70661: PPUSH
// if not hack in hackTanks then
70662: LD_VAR 0 1
70666: PUSH
70667: LD_EXP 178
70671: IN
70672: NOT
70673: IFFALSE 70677
// exit ;
70675: GO 70762
// index := GetElementIndex ( hackTanks , hack ) ;
70677: LD_ADDR_VAR 0 5
70681: PUSH
70682: LD_EXP 178
70686: PPUSH
70687: LD_VAR 0 1
70691: PPUSH
70692: CALL 17910 0 2
70696: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
70697: LD_ADDR_VAR 0 4
70701: PUSH
70702: DOUBLE
70703: LD_INT 1
70705: DEC
70706: ST_TO_ADDR
70707: LD_EXP 179
70711: PUSH
70712: LD_VAR 0 5
70716: ARRAY
70717: PUSH
70718: FOR_TO
70719: IFFALSE 70760
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
70721: LD_EXP 179
70725: PUSH
70726: LD_VAR 0 5
70730: ARRAY
70731: PUSH
70732: LD_VAR 0 4
70736: ARRAY
70737: PUSH
70738: LD_INT 1
70740: ARRAY
70741: PUSH
70742: LD_VAR 0 2
70746: EQUAL
70747: IFFALSE 70758
// KillUnit ( vehicle ) ;
70749: LD_VAR 0 2
70753: PPUSH
70754: CALL_OW 66
70758: GO 70718
70760: POP
70761: POP
// end ;
70762: LD_VAR 0 3
70766: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
70767: LD_EXP 183
70771: NOT
70772: IFFALSE 70807
70774: GO 70776
70776: DISABLE
// begin initMiner := true ;
70777: LD_ADDR_EXP 183
70781: PUSH
70782: LD_INT 1
70784: ST_TO_ADDR
// minersList := [ ] ;
70785: LD_ADDR_EXP 184
70789: PUSH
70790: EMPTY
70791: ST_TO_ADDR
// minerMinesList := [ ] ;
70792: LD_ADDR_EXP 185
70796: PUSH
70797: EMPTY
70798: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
70799: LD_ADDR_EXP 186
70803: PUSH
70804: LD_INT 5
70806: ST_TO_ADDR
// end ;
70807: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
70808: LD_EXP 183
70812: PUSH
70813: LD_INT 34
70815: PUSH
70816: LD_EXP 105
70820: PUSH
70821: EMPTY
70822: LIST
70823: LIST
70824: PPUSH
70825: CALL_OW 69
70829: AND
70830: IFFALSE 71293
70832: GO 70834
70834: DISABLE
70835: LD_INT 0
70837: PPUSH
70838: PPUSH
70839: PPUSH
70840: PPUSH
// begin enable ;
70841: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
70842: LD_ADDR_VAR 0 1
70846: PUSH
70847: LD_INT 34
70849: PUSH
70850: LD_EXP 105
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: PPUSH
70859: CALL_OW 69
70863: PUSH
70864: FOR_IN
70865: IFFALSE 70937
// begin if not i in minersList then
70867: LD_VAR 0 1
70871: PUSH
70872: LD_EXP 184
70876: IN
70877: NOT
70878: IFFALSE 70935
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
70880: LD_ADDR_EXP 184
70884: PUSH
70885: LD_EXP 184
70889: PPUSH
70890: LD_EXP 184
70894: PUSH
70895: LD_INT 1
70897: PLUS
70898: PPUSH
70899: LD_VAR 0 1
70903: PPUSH
70904: CALL_OW 1
70908: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
70909: LD_ADDR_EXP 185
70913: PUSH
70914: LD_EXP 185
70918: PPUSH
70919: LD_EXP 185
70923: PUSH
70924: LD_INT 1
70926: PLUS
70927: PPUSH
70928: EMPTY
70929: PPUSH
70930: CALL_OW 1
70934: ST_TO_ADDR
// end end ;
70935: GO 70864
70937: POP
70938: POP
// for i := minerMinesList downto 1 do
70939: LD_ADDR_VAR 0 1
70943: PUSH
70944: DOUBLE
70945: LD_EXP 185
70949: INC
70950: ST_TO_ADDR
70951: LD_INT 1
70953: PUSH
70954: FOR_DOWNTO
70955: IFFALSE 71291
// begin if IsLive ( minersList [ i ] ) then
70957: LD_EXP 184
70961: PUSH
70962: LD_VAR 0 1
70966: ARRAY
70967: PPUSH
70968: CALL_OW 300
70972: IFFALSE 71000
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
70974: LD_EXP 184
70978: PUSH
70979: LD_VAR 0 1
70983: ARRAY
70984: PPUSH
70985: LD_EXP 185
70989: PUSH
70990: LD_VAR 0 1
70994: ARRAY
70995: PPUSH
70996: CALL_OW 505
// if not minerMinesList [ i ] then
71000: LD_EXP 185
71004: PUSH
71005: LD_VAR 0 1
71009: ARRAY
71010: NOT
71011: IFFALSE 71015
// continue ;
71013: GO 70954
// for j := minerMinesList [ i ] downto 1 do
71015: LD_ADDR_VAR 0 2
71019: PUSH
71020: DOUBLE
71021: LD_EXP 185
71025: PUSH
71026: LD_VAR 0 1
71030: ARRAY
71031: INC
71032: ST_TO_ADDR
71033: LD_INT 1
71035: PUSH
71036: FOR_DOWNTO
71037: IFFALSE 71287
// begin side := GetSide ( minersList [ i ] ) ;
71039: LD_ADDR_VAR 0 3
71043: PUSH
71044: LD_EXP 184
71048: PUSH
71049: LD_VAR 0 1
71053: ARRAY
71054: PPUSH
71055: CALL_OW 255
71059: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
71060: LD_ADDR_VAR 0 4
71064: PUSH
71065: LD_EXP 185
71069: PUSH
71070: LD_VAR 0 1
71074: ARRAY
71075: PUSH
71076: LD_VAR 0 2
71080: ARRAY
71081: PUSH
71082: LD_INT 1
71084: ARRAY
71085: PPUSH
71086: LD_EXP 185
71090: PUSH
71091: LD_VAR 0 1
71095: ARRAY
71096: PUSH
71097: LD_VAR 0 2
71101: ARRAY
71102: PUSH
71103: LD_INT 2
71105: ARRAY
71106: PPUSH
71107: CALL_OW 428
71111: ST_TO_ADDR
// if not tmp then
71112: LD_VAR 0 4
71116: NOT
71117: IFFALSE 71121
// continue ;
71119: GO 71036
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
71121: LD_VAR 0 4
71125: PUSH
71126: LD_INT 81
71128: PUSH
71129: LD_VAR 0 3
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PPUSH
71138: CALL_OW 69
71142: IN
71143: PUSH
71144: LD_EXP 185
71148: PUSH
71149: LD_VAR 0 1
71153: ARRAY
71154: PUSH
71155: LD_VAR 0 2
71159: ARRAY
71160: PUSH
71161: LD_INT 1
71163: ARRAY
71164: PPUSH
71165: LD_EXP 185
71169: PUSH
71170: LD_VAR 0 1
71174: ARRAY
71175: PUSH
71176: LD_VAR 0 2
71180: ARRAY
71181: PUSH
71182: LD_INT 2
71184: ARRAY
71185: PPUSH
71186: CALL_OW 458
71190: AND
71191: IFFALSE 71285
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
71193: LD_EXP 185
71197: PUSH
71198: LD_VAR 0 1
71202: ARRAY
71203: PUSH
71204: LD_VAR 0 2
71208: ARRAY
71209: PUSH
71210: LD_INT 1
71212: ARRAY
71213: PPUSH
71214: LD_EXP 185
71218: PUSH
71219: LD_VAR 0 1
71223: ARRAY
71224: PUSH
71225: LD_VAR 0 2
71229: ARRAY
71230: PUSH
71231: LD_INT 2
71233: ARRAY
71234: PPUSH
71235: LD_VAR 0 3
71239: PPUSH
71240: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
71244: LD_ADDR_EXP 185
71248: PUSH
71249: LD_EXP 185
71253: PPUSH
71254: LD_VAR 0 1
71258: PPUSH
71259: LD_EXP 185
71263: PUSH
71264: LD_VAR 0 1
71268: ARRAY
71269: PPUSH
71270: LD_VAR 0 2
71274: PPUSH
71275: CALL_OW 3
71279: PPUSH
71280: CALL_OW 1
71284: ST_TO_ADDR
// end ; end ;
71285: GO 71036
71287: POP
71288: POP
// end ;
71289: GO 70954
71291: POP
71292: POP
// end ;
71293: PPOPN 4
71295: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
71296: LD_INT 0
71298: PPUSH
71299: PPUSH
// result := false ;
71300: LD_ADDR_VAR 0 4
71304: PUSH
71305: LD_INT 0
71307: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
71308: LD_VAR 0 1
71312: PPUSH
71313: CALL_OW 264
71317: PUSH
71318: LD_EXP 105
71322: EQUAL
71323: NOT
71324: IFFALSE 71328
// exit ;
71326: GO 71568
// index := GetElementIndex ( minersList , unit ) ;
71328: LD_ADDR_VAR 0 5
71332: PUSH
71333: LD_EXP 184
71337: PPUSH
71338: LD_VAR 0 1
71342: PPUSH
71343: CALL 17910 0 2
71347: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
71348: LD_EXP 185
71352: PUSH
71353: LD_VAR 0 5
71357: ARRAY
71358: PUSH
71359: LD_EXP 186
71363: GREATEREQUAL
71364: IFFALSE 71368
// exit ;
71366: GO 71568
// ComMoveXY ( unit , x , y ) ;
71368: LD_VAR 0 1
71372: PPUSH
71373: LD_VAR 0 2
71377: PPUSH
71378: LD_VAR 0 3
71382: PPUSH
71383: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
71387: LD_INT 35
71389: PPUSH
71390: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
71394: LD_VAR 0 1
71398: PPUSH
71399: LD_VAR 0 2
71403: PPUSH
71404: LD_VAR 0 3
71408: PPUSH
71409: CALL 48737 0 3
71413: NOT
71414: PUSH
71415: LD_VAR 0 1
71419: PPUSH
71420: CALL_OW 314
71424: AND
71425: IFFALSE 71429
// exit ;
71427: GO 71568
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
71429: LD_VAR 0 2
71433: PPUSH
71434: LD_VAR 0 3
71438: PPUSH
71439: CALL_OW 428
71443: PUSH
71444: LD_VAR 0 1
71448: EQUAL
71449: PUSH
71450: LD_VAR 0 1
71454: PPUSH
71455: CALL_OW 314
71459: NOT
71460: AND
71461: IFFALSE 71387
// PlaySoundXY ( x , y , PlantMine ) ;
71463: LD_VAR 0 2
71467: PPUSH
71468: LD_VAR 0 3
71472: PPUSH
71473: LD_STRING PlantMine
71475: PPUSH
71476: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
71480: LD_VAR 0 2
71484: PPUSH
71485: LD_VAR 0 3
71489: PPUSH
71490: LD_VAR 0 1
71494: PPUSH
71495: CALL_OW 255
71499: PPUSH
71500: LD_INT 0
71502: PPUSH
71503: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
71507: LD_ADDR_EXP 185
71511: PUSH
71512: LD_EXP 185
71516: PPUSH
71517: LD_VAR 0 5
71521: PUSH
71522: LD_EXP 185
71526: PUSH
71527: LD_VAR 0 5
71531: ARRAY
71532: PUSH
71533: LD_INT 1
71535: PLUS
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: PPUSH
71541: LD_VAR 0 2
71545: PUSH
71546: LD_VAR 0 3
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: PPUSH
71555: CALL 18125 0 3
71559: ST_TO_ADDR
// result := true ;
71560: LD_ADDR_VAR 0 4
71564: PUSH
71565: LD_INT 1
71567: ST_TO_ADDR
// end ;
71568: LD_VAR 0 4
71572: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
71573: LD_INT 0
71575: PPUSH
71576: PPUSH
71577: PPUSH
// if not unit in minersList then
71578: LD_VAR 0 1
71582: PUSH
71583: LD_EXP 184
71587: IN
71588: NOT
71589: IFFALSE 71593
// exit ;
71591: GO 71985
// index := GetElementIndex ( minersList , unit ) ;
71593: LD_ADDR_VAR 0 6
71597: PUSH
71598: LD_EXP 184
71602: PPUSH
71603: LD_VAR 0 1
71607: PPUSH
71608: CALL 17910 0 2
71612: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
71613: LD_ADDR_VAR 0 5
71617: PUSH
71618: DOUBLE
71619: LD_EXP 185
71623: PUSH
71624: LD_VAR 0 6
71628: ARRAY
71629: INC
71630: ST_TO_ADDR
71631: LD_INT 1
71633: PUSH
71634: FOR_DOWNTO
71635: IFFALSE 71796
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
71637: LD_EXP 185
71641: PUSH
71642: LD_VAR 0 6
71646: ARRAY
71647: PUSH
71648: LD_VAR 0 5
71652: ARRAY
71653: PUSH
71654: LD_INT 1
71656: ARRAY
71657: PUSH
71658: LD_VAR 0 2
71662: EQUAL
71663: PUSH
71664: LD_EXP 185
71668: PUSH
71669: LD_VAR 0 6
71673: ARRAY
71674: PUSH
71675: LD_VAR 0 5
71679: ARRAY
71680: PUSH
71681: LD_INT 2
71683: ARRAY
71684: PUSH
71685: LD_VAR 0 3
71689: EQUAL
71690: AND
71691: IFFALSE 71794
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71693: LD_EXP 185
71697: PUSH
71698: LD_VAR 0 6
71702: ARRAY
71703: PUSH
71704: LD_VAR 0 5
71708: ARRAY
71709: PUSH
71710: LD_INT 1
71712: ARRAY
71713: PPUSH
71714: LD_EXP 185
71718: PUSH
71719: LD_VAR 0 6
71723: ARRAY
71724: PUSH
71725: LD_VAR 0 5
71729: ARRAY
71730: PUSH
71731: LD_INT 2
71733: ARRAY
71734: PPUSH
71735: LD_VAR 0 1
71739: PPUSH
71740: CALL_OW 255
71744: PPUSH
71745: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
71749: LD_ADDR_EXP 185
71753: PUSH
71754: LD_EXP 185
71758: PPUSH
71759: LD_VAR 0 6
71763: PPUSH
71764: LD_EXP 185
71768: PUSH
71769: LD_VAR 0 6
71773: ARRAY
71774: PPUSH
71775: LD_VAR 0 5
71779: PPUSH
71780: CALL_OW 3
71784: PPUSH
71785: CALL_OW 1
71789: ST_TO_ADDR
// exit ;
71790: POP
71791: POP
71792: GO 71985
// end ; end ;
71794: GO 71634
71796: POP
71797: POP
// for i := minerMinesList [ index ] downto 1 do
71798: LD_ADDR_VAR 0 5
71802: PUSH
71803: DOUBLE
71804: LD_EXP 185
71808: PUSH
71809: LD_VAR 0 6
71813: ARRAY
71814: INC
71815: ST_TO_ADDR
71816: LD_INT 1
71818: PUSH
71819: FOR_DOWNTO
71820: IFFALSE 71983
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
71822: LD_EXP 185
71826: PUSH
71827: LD_VAR 0 6
71831: ARRAY
71832: PUSH
71833: LD_VAR 0 5
71837: ARRAY
71838: PUSH
71839: LD_INT 1
71841: ARRAY
71842: PPUSH
71843: LD_EXP 185
71847: PUSH
71848: LD_VAR 0 6
71852: ARRAY
71853: PUSH
71854: LD_VAR 0 5
71858: ARRAY
71859: PUSH
71860: LD_INT 2
71862: ARRAY
71863: PPUSH
71864: LD_VAR 0 2
71868: PPUSH
71869: LD_VAR 0 3
71873: PPUSH
71874: CALL_OW 298
71878: PUSH
71879: LD_INT 6
71881: LESS
71882: IFFALSE 71981
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71884: LD_EXP 185
71888: PUSH
71889: LD_VAR 0 6
71893: ARRAY
71894: PUSH
71895: LD_VAR 0 5
71899: ARRAY
71900: PUSH
71901: LD_INT 1
71903: ARRAY
71904: PPUSH
71905: LD_EXP 185
71909: PUSH
71910: LD_VAR 0 6
71914: ARRAY
71915: PUSH
71916: LD_VAR 0 5
71920: ARRAY
71921: PUSH
71922: LD_INT 2
71924: ARRAY
71925: PPUSH
71926: LD_VAR 0 1
71930: PPUSH
71931: CALL_OW 255
71935: PPUSH
71936: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
71940: LD_ADDR_EXP 185
71944: PUSH
71945: LD_EXP 185
71949: PPUSH
71950: LD_VAR 0 6
71954: PPUSH
71955: LD_EXP 185
71959: PUSH
71960: LD_VAR 0 6
71964: ARRAY
71965: PPUSH
71966: LD_VAR 0 5
71970: PPUSH
71971: CALL_OW 3
71975: PPUSH
71976: CALL_OW 1
71980: ST_TO_ADDR
// end ; end ;
71981: GO 71819
71983: POP
71984: POP
// end ;
71985: LD_VAR 0 4
71989: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
71990: LD_INT 0
71992: PPUSH
71993: PPUSH
71994: PPUSH
71995: PPUSH
71996: PPUSH
71997: PPUSH
71998: PPUSH
71999: PPUSH
72000: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
72001: LD_VAR 0 1
72005: PPUSH
72006: CALL_OW 264
72010: PUSH
72011: LD_EXP 105
72015: EQUAL
72016: NOT
72017: PUSH
72018: LD_VAR 0 1
72022: PUSH
72023: LD_EXP 184
72027: IN
72028: NOT
72029: OR
72030: IFFALSE 72034
// exit ;
72032: GO 72356
// index := GetElementIndex ( minersList , unit ) ;
72034: LD_ADDR_VAR 0 6
72038: PUSH
72039: LD_EXP 184
72043: PPUSH
72044: LD_VAR 0 1
72048: PPUSH
72049: CALL 17910 0 2
72053: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
72054: LD_ADDR_VAR 0 8
72058: PUSH
72059: LD_EXP 186
72063: PUSH
72064: LD_EXP 185
72068: PUSH
72069: LD_VAR 0 6
72073: ARRAY
72074: MINUS
72075: ST_TO_ADDR
// if not minesFreeAmount then
72076: LD_VAR 0 8
72080: NOT
72081: IFFALSE 72085
// exit ;
72083: GO 72356
// tmp := [ ] ;
72085: LD_ADDR_VAR 0 7
72089: PUSH
72090: EMPTY
72091: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
72092: LD_ADDR_VAR 0 5
72096: PUSH
72097: DOUBLE
72098: LD_INT 1
72100: DEC
72101: ST_TO_ADDR
72102: LD_VAR 0 8
72106: PUSH
72107: FOR_TO
72108: IFFALSE 72303
// begin _d := rand ( 0 , 5 ) ;
72110: LD_ADDR_VAR 0 11
72114: PUSH
72115: LD_INT 0
72117: PPUSH
72118: LD_INT 5
72120: PPUSH
72121: CALL_OW 12
72125: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
72126: LD_ADDR_VAR 0 12
72130: PUSH
72131: LD_INT 2
72133: PPUSH
72134: LD_INT 6
72136: PPUSH
72137: CALL_OW 12
72141: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
72142: LD_ADDR_VAR 0 9
72146: PUSH
72147: LD_VAR 0 2
72151: PPUSH
72152: LD_VAR 0 11
72156: PPUSH
72157: LD_VAR 0 12
72161: PPUSH
72162: CALL_OW 272
72166: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
72167: LD_ADDR_VAR 0 10
72171: PUSH
72172: LD_VAR 0 3
72176: PPUSH
72177: LD_VAR 0 11
72181: PPUSH
72182: LD_VAR 0 12
72186: PPUSH
72187: CALL_OW 273
72191: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
72192: LD_VAR 0 9
72196: PPUSH
72197: LD_VAR 0 10
72201: PPUSH
72202: CALL_OW 488
72206: PUSH
72207: LD_VAR 0 9
72211: PUSH
72212: LD_VAR 0 10
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: PUSH
72221: LD_VAR 0 7
72225: IN
72226: NOT
72227: AND
72228: PUSH
72229: LD_VAR 0 9
72233: PPUSH
72234: LD_VAR 0 10
72238: PPUSH
72239: CALL_OW 458
72243: NOT
72244: AND
72245: IFFALSE 72287
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
72247: LD_ADDR_VAR 0 7
72251: PUSH
72252: LD_VAR 0 7
72256: PPUSH
72257: LD_VAR 0 7
72261: PUSH
72262: LD_INT 1
72264: PLUS
72265: PPUSH
72266: LD_VAR 0 9
72270: PUSH
72271: LD_VAR 0 10
72275: PUSH
72276: EMPTY
72277: LIST
72278: LIST
72279: PPUSH
72280: CALL_OW 1
72284: ST_TO_ADDR
72285: GO 72301
// i := i - 1 ;
72287: LD_ADDR_VAR 0 5
72291: PUSH
72292: LD_VAR 0 5
72296: PUSH
72297: LD_INT 1
72299: MINUS
72300: ST_TO_ADDR
// end ;
72301: GO 72107
72303: POP
72304: POP
// for i in tmp do
72305: LD_ADDR_VAR 0 5
72309: PUSH
72310: LD_VAR 0 7
72314: PUSH
72315: FOR_IN
72316: IFFALSE 72354
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
72318: LD_VAR 0 1
72322: PPUSH
72323: LD_VAR 0 5
72327: PUSH
72328: LD_INT 1
72330: ARRAY
72331: PPUSH
72332: LD_VAR 0 5
72336: PUSH
72337: LD_INT 2
72339: ARRAY
72340: PPUSH
72341: CALL 71296 0 3
72345: NOT
72346: IFFALSE 72352
// exit ;
72348: POP
72349: POP
72350: GO 72356
72352: GO 72315
72354: POP
72355: POP
// end ;
72356: LD_VAR 0 4
72360: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
72361: LD_INT 0
72363: PPUSH
72364: PPUSH
72365: PPUSH
72366: PPUSH
72367: PPUSH
72368: PPUSH
72369: PPUSH
// if not GetClass ( unit ) = class_sniper then
72370: LD_VAR 0 1
72374: PPUSH
72375: CALL_OW 257
72379: PUSH
72380: LD_INT 5
72382: EQUAL
72383: NOT
72384: IFFALSE 72388
// exit ;
72386: GO 72776
// dist := 8 ;
72388: LD_ADDR_VAR 0 5
72392: PUSH
72393: LD_INT 8
72395: ST_TO_ADDR
// viewRange := 12 ;
72396: LD_ADDR_VAR 0 7
72400: PUSH
72401: LD_INT 12
72403: ST_TO_ADDR
// side := GetSide ( unit ) ;
72404: LD_ADDR_VAR 0 6
72408: PUSH
72409: LD_VAR 0 1
72413: PPUSH
72414: CALL_OW 255
72418: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
72419: LD_INT 61
72421: PPUSH
72422: LD_VAR 0 6
72426: PPUSH
72427: CALL_OW 321
72431: PUSH
72432: LD_INT 2
72434: EQUAL
72435: IFFALSE 72445
// viewRange := 16 ;
72437: LD_ADDR_VAR 0 7
72441: PUSH
72442: LD_INT 16
72444: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
72445: LD_VAR 0 1
72449: PPUSH
72450: LD_VAR 0 2
72454: PPUSH
72455: LD_VAR 0 3
72459: PPUSH
72460: CALL_OW 297
72464: PUSH
72465: LD_VAR 0 5
72469: GREATER
72470: IFFALSE 72549
// begin ComMoveXY ( unit , x , y ) ;
72472: LD_VAR 0 1
72476: PPUSH
72477: LD_VAR 0 2
72481: PPUSH
72482: LD_VAR 0 3
72486: PPUSH
72487: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
72491: LD_INT 35
72493: PPUSH
72494: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
72498: LD_VAR 0 1
72502: PPUSH
72503: LD_VAR 0 2
72507: PPUSH
72508: LD_VAR 0 3
72512: PPUSH
72513: CALL 48737 0 3
72517: NOT
72518: IFFALSE 72522
// exit ;
72520: GO 72776
// until GetDistUnitXY ( unit , x , y ) < dist ;
72522: LD_VAR 0 1
72526: PPUSH
72527: LD_VAR 0 2
72531: PPUSH
72532: LD_VAR 0 3
72536: PPUSH
72537: CALL_OW 297
72541: PUSH
72542: LD_VAR 0 5
72546: LESS
72547: IFFALSE 72491
// end ; ComTurnXY ( unit , x , y ) ;
72549: LD_VAR 0 1
72553: PPUSH
72554: LD_VAR 0 2
72558: PPUSH
72559: LD_VAR 0 3
72563: PPUSH
72564: CALL_OW 118
// wait ( 5 ) ;
72568: LD_INT 5
72570: PPUSH
72571: CALL_OW 67
// _d := GetDir ( unit ) ;
72575: LD_ADDR_VAR 0 10
72579: PUSH
72580: LD_VAR 0 1
72584: PPUSH
72585: CALL_OW 254
72589: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
72590: LD_ADDR_VAR 0 8
72594: PUSH
72595: LD_VAR 0 1
72599: PPUSH
72600: CALL_OW 250
72604: PPUSH
72605: LD_VAR 0 10
72609: PPUSH
72610: LD_VAR 0 5
72614: PPUSH
72615: CALL_OW 272
72619: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
72620: LD_ADDR_VAR 0 9
72624: PUSH
72625: LD_VAR 0 1
72629: PPUSH
72630: CALL_OW 251
72634: PPUSH
72635: LD_VAR 0 10
72639: PPUSH
72640: LD_VAR 0 5
72644: PPUSH
72645: CALL_OW 273
72649: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72650: LD_VAR 0 8
72654: PPUSH
72655: LD_VAR 0 9
72659: PPUSH
72660: CALL_OW 488
72664: NOT
72665: IFFALSE 72669
// exit ;
72667: GO 72776
// ComAnimCustom ( unit , 1 ) ;
72669: LD_VAR 0 1
72673: PPUSH
72674: LD_INT 1
72676: PPUSH
72677: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
72681: LD_VAR 0 8
72685: PPUSH
72686: LD_VAR 0 9
72690: PPUSH
72691: LD_VAR 0 6
72695: PPUSH
72696: LD_VAR 0 7
72700: PPUSH
72701: CALL_OW 330
// repeat wait ( 1 ) ;
72705: LD_INT 1
72707: PPUSH
72708: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
72712: LD_VAR 0 1
72716: PPUSH
72717: CALL_OW 316
72721: PUSH
72722: LD_VAR 0 1
72726: PPUSH
72727: CALL_OW 314
72731: OR
72732: PUSH
72733: LD_VAR 0 1
72737: PPUSH
72738: CALL_OW 302
72742: NOT
72743: OR
72744: PUSH
72745: LD_VAR 0 1
72749: PPUSH
72750: CALL_OW 301
72754: OR
72755: IFFALSE 72705
// RemoveSeeing ( _x , _y , side ) ;
72757: LD_VAR 0 8
72761: PPUSH
72762: LD_VAR 0 9
72766: PPUSH
72767: LD_VAR 0 6
72771: PPUSH
72772: CALL_OW 331
// end ; end_of_file
72776: LD_VAR 0 4
72780: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72781: LD_VAR 0 1
72785: PUSH
72786: LD_INT 200
72788: DOUBLE
72789: GREATEREQUAL
72790: IFFALSE 72798
72792: LD_INT 299
72794: DOUBLE
72795: LESSEQUAL
72796: IFTRUE 72800
72798: GO 72832
72800: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72801: LD_VAR 0 1
72805: PPUSH
72806: LD_VAR 0 2
72810: PPUSH
72811: LD_VAR 0 3
72815: PPUSH
72816: LD_VAR 0 4
72820: PPUSH
72821: LD_VAR 0 5
72825: PPUSH
72826: CALL 68519 0 5
72830: GO 72909
72832: LD_INT 300
72834: DOUBLE
72835: GREATEREQUAL
72836: IFFALSE 72844
72838: LD_INT 399
72840: DOUBLE
72841: LESSEQUAL
72842: IFTRUE 72846
72844: GO 72908
72846: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72847: LD_VAR 0 1
72851: PPUSH
72852: LD_VAR 0 2
72856: PPUSH
72857: LD_VAR 0 3
72861: PPUSH
72862: LD_VAR 0 4
72866: PPUSH
72867: LD_VAR 0 5
72871: PPUSH
72872: LD_VAR 0 6
72876: PPUSH
72877: LD_VAR 0 7
72881: PPUSH
72882: LD_VAR 0 8
72886: PPUSH
72887: LD_VAR 0 9
72891: PPUSH
72892: LD_VAR 0 10
72896: PPUSH
72897: LD_VAR 0 11
72901: PPUSH
72902: CALL 66161 0 11
72906: GO 72909
72908: POP
// end ;
72909: PPOPN 11
72911: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72912: LD_VAR 0 1
72916: PPUSH
72917: LD_VAR 0 2
72921: PPUSH
72922: LD_VAR 0 3
72926: PPUSH
72927: LD_VAR 0 4
72931: PPUSH
72932: LD_VAR 0 5
72936: PPUSH
72937: CALL 68255 0 5
// end ;
72941: PPOPN 5
72943: END
