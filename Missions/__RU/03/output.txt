// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// LoadBuildingsFromPrevMission ;
   8: CALL 11031 0 0
// PrepareRussian ;
  12: CALL 377 0 0
// PrepareAmerican ;
  16: CALL 3653 0 0
// Action ;
  20: CALL 16758 0 0
// end ;
  24: END
// export debug , prevMissionPrefix , currentMissionPrefix , wasSelfish , hasProblem , belkovSaved , gameStart , arabAttackActive , allianceAttacked , foundOil , hasScholtze , hasKagan , allowedToAttackOmicron , hasOilTower , dickensKilled , canSearchForScholtze , youTookCratesFromKirov , retreat , hasFactory , kurinWaitForVehiclesTime , requiredVehiclesAmount , canCaptureKirovVehs , timeToAttackOnOmicron , retreatToKirovAllowed , convoysCounter , americanRetreat , omicronRetreatCounter , joinToOmicronCounter ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// if debug then
  36: LD_EXP 1
  40: IFFALSE 50
// Difficulty := 4 ;
  42: LD_ADDR_OWVAR 67
  46: PUSH
  47: LD_INT 4
  49: ST_TO_ADDR
// prevMissionPrefix := 02_ ;
  50: LD_ADDR_EXP 2
  54: PUSH
  55: LD_STRING 02_
  57: ST_TO_ADDR
// currentMissionPrefix := 03_ ;
  58: LD_ADDR_EXP 3
  62: PUSH
  63: LD_STRING 03_
  65: ST_TO_ADDR
// belkovSaved := LoadVariable ( 02_belkovSaved , false ) ;
  66: LD_ADDR_EXP 6
  70: PUSH
  71: LD_STRING 02_belkovSaved
  73: PPUSH
  74: LD_INT 0
  76: PPUSH
  77: CALL_OW 30
  81: ST_TO_ADDR
// wasSelfish := LoadVariable ( 02_Selfish , false ) ;
  82: LD_ADDR_EXP 4
  86: PUSH
  87: LD_STRING 02_Selfish
  89: PPUSH
  90: LD_INT 0
  92: PPUSH
  93: CALL_OW 30
  97: ST_TO_ADDR
// dickensKilled := LoadVariable ( 02_DickensKilled , false ) ;
  98: LD_ADDR_EXP 15
 102: PUSH
 103: LD_STRING 02_DickensKilled
 105: PPUSH
 106: LD_INT 0
 108: PPUSH
 109: CALL_OW 30
 113: ST_TO_ADDR
// hasProblem := false ;
 114: LD_ADDR_EXP 5
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// gameStart := false ;
 122: LD_ADDR_EXP 7
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// arabAttackActive := false ;
 130: LD_ADDR_EXP 8
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// allianceAttacked := false ;
 138: LD_ADDR_EXP 9
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// youTookCratesFromKirov := 0 ;
 146: LD_ADDR_EXP 17
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// foundOil := false ;
 154: LD_ADDR_EXP 10
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// hasScholtze := false ;
 162: LD_ADDR_EXP 11
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// hasKagan := false ;
 170: LD_ADDR_EXP 12
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// allowedToAttackOmicron := false ;
 178: LD_ADDR_EXP 13
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// canCaptureKirovVehs := false ;
 186: LD_ADDR_EXP 22
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// hasOilTower := false ;
 194: LD_ADDR_EXP 14
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// hasFactory := false ;
 202: LD_ADDR_EXP 19
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// canSearchForScholtze := false ;
 210: LD_ADDR_EXP 16
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// retreat := false ;
 218: LD_ADDR_EXP 18
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// kurinWaitForVehiclesTime := [ 30 30$0 , 28 28$0 , 26 26$0 , 24 24$0 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 63000
 233: PUSH
 234: LD_INT 58800
 236: PUSH
 237: LD_INT 54600
 239: PUSH
 240: LD_INT 50400
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// requiredVehiclesAmount := [ 3 , 3 , 4 , 4 ] [ Difficulty ] ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 3
 262: PUSH
 263: LD_INT 3
 265: PUSH
 266: LD_INT 4
 268: PUSH
 269: LD_INT 4
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: LIST
 276: LIST
 277: PUSH
 278: LD_OWVAR 67
 282: ARRAY
 283: ST_TO_ADDR
// timeToAttackOnOmicron := 0 0$00 ;
 284: LD_ADDR_EXP 23
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// retreatToKirovAllowed := true ;
 292: LD_ADDR_EXP 24
 296: PUSH
 297: LD_INT 1
 299: ST_TO_ADDR
// convoysCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 300: LD_ADDR_EXP 25
 304: PUSH
 305: LD_INT 4
 307: PUSH
 308: LD_INT 5
 310: PUSH
 311: LD_INT 6
 313: PUSH
 314: LD_INT 6
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: PUSH
 323: LD_OWVAR 67
 327: ARRAY
 328: ST_TO_ADDR
// americanRetreat := false ;
 329: LD_ADDR_EXP 26
 333: PUSH
 334: LD_INT 0
 336: ST_TO_ADDR
// omicronRetreatCounter := 0 ;
 337: LD_ADDR_EXP 27
 341: PUSH
 342: LD_INT 0
 344: ST_TO_ADDR
// joinToOmicronCounter := [ ] ;
 345: LD_ADDR_EXP 28
 349: PUSH
 350: EMPTY
 351: ST_TO_ADDR
// arForces := [ ] ;
 352: LD_ADDR_EXP 64
 356: PUSH
 357: EMPTY
 358: ST_TO_ADDR
// if debug then
 359: LD_EXP 1
 363: IFFALSE 372
// FogOff ( 3 ) ;
 365: LD_INT 3
 367: PPUSH
 368: CALL_OW 344
// end ; end_of_file
 372: LD_VAR 0 1
 376: RET
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Popov , Scholtze , Grishko ; export kirovBaseSquad , beriaBaseSquad , grishkoTeam , burlakTeam , kirovTeam , beriaTeam , popovTeam , kirovDepot , beriaDepot , kaganDepot , mainRuCharacters , kirovVehicles , kirovAttackVehicles , kirovTechs , kirovBuildingsToBuild , kirovConstructList , ruCargos , ruGuards ; export function PrepareRussian ; var i , vehiclesAmount , veh , tmp ; begin
 377: LD_INT 0
 379: PPUSH
 380: PPUSH
 381: PPUSH
 382: PPUSH
 383: PPUSH
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 3000 ) ;
 384: LD_EXP 45
 388: PPUSH
 389: CALL_OW 274
 393: PPUSH
 394: LD_INT 1
 396: PPUSH
 397: LD_INT 3000
 399: PPUSH
 400: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 600 ) ;
 404: LD_EXP 45
 408: PPUSH
 409: CALL_OW 274
 413: PPUSH
 414: LD_INT 2
 416: PPUSH
 417: LD_INT 600
 419: PPUSH
 420: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , [ 350 , 280 , 210 , 150 ] [ Difficulty ] ) ;
 424: LD_EXP 46
 428: PPUSH
 429: CALL_OW 274
 433: PPUSH
 434: LD_INT 1
 436: PPUSH
 437: LD_INT 350
 439: PUSH
 440: LD_INT 280
 442: PUSH
 443: LD_INT 210
 445: PUSH
 446: LD_INT 150
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: PUSH
 455: LD_OWVAR 67
 459: ARRAY
 460: PPUSH
 461: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , [ 60 , 40 , 20 , 0 ] [ Difficulty ] ) ;
 465: LD_EXP 46
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_INT 2
 477: PPUSH
 478: LD_INT 60
 480: PUSH
 481: LD_INT 40
 483: PUSH
 484: LD_INT 20
 486: PUSH
 487: LD_INT 0
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: PUSH
 496: LD_OWVAR 67
 500: ARRAY
 501: PPUSH
 502: CALL_OW 277
// uc_side := 3 ;
 506: LD_ADDR_OWVAR 20
 510: PUSH
 511: LD_INT 3
 513: ST_TO_ADDR
// uc_nation := 3 ;
 514: LD_ADDR_OWVAR 21
 518: PUSH
 519: LD_INT 3
 521: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
 522: LD_ADDR_EXP 29
 526: PUSH
 527: LD_STRING Burlak
 529: PPUSH
 530: LD_EXP 1
 534: NOT
 535: PPUSH
 536: LD_EXP 2
 540: PPUSH
 541: CALL 26143 0 3
 545: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
 546: LD_ADDR_EXP 39
 550: PUSH
 551: EMPTY
 552: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
 553: LD_ADDR_EXP 38
 557: PUSH
 558: EMPTY
 559: ST_TO_ADDR
// popovTeam := [ ] ;
 560: LD_ADDR_EXP 44
 564: PUSH
 565: EMPTY
 566: ST_TO_ADDR
// grishkoTeam := [ ] ;
 567: LD_ADDR_EXP 40
 571: PUSH
 572: EMPTY
 573: ST_TO_ADDR
// uc_side := 5 ;
 574: LD_ADDR_OWVAR 20
 578: PUSH
 579: LD_INT 5
 581: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
 582: LD_ADDR_EXP 36
 586: PUSH
 587: LD_STRING Scholtze
 589: PPUSH
 590: CALL_OW 25
 594: ST_TO_ADDR
// uc_side := 6 ;
 595: LD_ADDR_OWVAR 20
 599: PUSH
 600: LD_INT 6
 602: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
 603: LD_ADDR_EXP 30
 607: PUSH
 608: LD_STRING Gnyevko
 610: PPUSH
 611: LD_EXP 1
 615: NOT
 616: PPUSH
 617: LD_EXP 2
 621: PPUSH
 622: CALL 26143 0 3
 626: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
 627: LD_ADDR_EXP 32
 631: PUSH
 632: LD_STRING Kirilenkova
 634: PPUSH
 635: LD_EXP 1
 639: NOT
 640: PPUSH
 641: LD_EXP 2
 645: PPUSH
 646: CALL 26143 0 3
 650: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , ( not debug ) , prevMissionPrefix ) ;
 651: LD_ADDR_EXP 34
 655: PUSH
 656: LD_STRING Kovalyuk
 658: PPUSH
 659: LD_EXP 1
 663: NOT
 664: PPUSH
 665: LD_EXP 2
 669: PPUSH
 670: CALL 26143 0 3
 674: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
 675: LD_ADDR_EXP 31
 679: PUSH
 680: LD_STRING Belkov
 682: PPUSH
 683: LD_EXP 1
 687: NOT
 688: PPUSH
 689: LD_EXP 2
 693: PPUSH
 694: CALL 26143 0 3
 698: ST_TO_ADDR
// Kurin := NewCharacter ( Kurin ) ;
 699: LD_ADDR_EXP 33
 703: PUSH
 704: LD_STRING Kurin
 706: PPUSH
 707: CALL_OW 25
 711: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
 712: LD_ADDR_EXP 35
 716: PUSH
 717: LD_STRING Popov
 719: PPUSH
 720: CALL_OW 25
 724: ST_TO_ADDR
// Grishko := NewCharacter ( Grishko ) ;
 725: LD_ADDR_EXP 37
 729: PUSH
 730: LD_STRING Grishko
 732: PPUSH
 733: CALL_OW 25
 737: ST_TO_ADDR
// burlakTeam := CreateCharacterSet ( prevMissionPrefix & burlakTeam ) ;
 738: LD_ADDR_EXP 41
 742: PUSH
 743: LD_EXP 2
 747: PUSH
 748: LD_STRING burlakTeam
 750: STR
 751: PPUSH
 752: CALL_OW 31
 756: ST_TO_ADDR
// kirovTeam := CreateCharacterSet ( prevMissionPrefix & kirovTeam ) ;
 757: LD_ADDR_EXP 42
 761: PUSH
 762: LD_EXP 2
 766: PUSH
 767: LD_STRING kirovTeam
 769: STR
 770: PPUSH
 771: CALL_OW 31
 775: ST_TO_ADDR
// if kirovTeam < 15 then
 776: LD_EXP 42
 780: PUSH
 781: LD_INT 15
 783: LESS
 784: IFFALSE 856
// for i := Count ( kirovTeam ) to 15 do
 786: LD_ADDR_VAR 0 2
 790: PUSH
 791: DOUBLE
 792: LD_EXP 42
 796: PPUSH
 797: CALL 28367 0 1
 801: DEC
 802: ST_TO_ADDR
 803: LD_INT 15
 805: PUSH
 806: FOR_TO
 807: IFFALSE 854
// begin PrepareHuman ( false , i mod 4 + 1 , 2 ) ;
 809: LD_INT 0
 811: PPUSH
 812: LD_VAR 0 2
 816: PUSH
 817: LD_INT 4
 819: MOD
 820: PUSH
 821: LD_INT 1
 823: PLUS
 824: PPUSH
 825: LD_INT 2
 827: PPUSH
 828: CALL_OW 380
// kirovTeam := Join ( kirovTeam , CreateHuman ) ;
 832: LD_ADDR_EXP 42
 836: PUSH
 837: LD_EXP 42
 841: PPUSH
 842: CALL_OW 44
 846: PPUSH
 847: CALL 64343 0 2
 851: ST_TO_ADDR
// end ;
 852: GO 806
 854: POP
 855: POP
// for i in kirovTeam union burlakTeam do
 856: LD_ADDR_VAR 0 2
 860: PUSH
 861: LD_EXP 42
 865: PUSH
 866: LD_EXP 41
 870: UNION
 871: PUSH
 872: FOR_IN
 873: IFFALSE 1118
// begin case GetClass ( i ) of class_soldier , class_engineer :
 875: LD_VAR 0 2
 879: PPUSH
 880: CALL_OW 257
 884: PUSH
 885: LD_INT 1
 887: DOUBLE
 888: EQUAL
 889: IFTRUE 899
 891: LD_INT 2
 893: DOUBLE
 894: EQUAL
 895: IFTRUE 899
 897: GO 950
 899: POP
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_full ] ] , [ f_btype , b_armoury ] ] ) ; class_scientistic :
 900: LD_ADDR_VAR 0 5
 904: PUSH
 905: LD_INT 22
 907: PUSH
 908: LD_INT 6
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PUSH
 915: LD_INT 3
 917: PUSH
 918: LD_INT 62
 920: PUSH
 921: EMPTY
 922: LIST
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: PUSH
 928: LD_INT 30
 930: PUSH
 931: LD_INT 4
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: PPUSH
 943: CALL_OW 69
 947: ST_TO_ADDR
 948: GO 1069
 950: LD_INT 4
 952: DOUBLE
 953: EQUAL
 954: IFTRUE 958
 956: GO 1009
 958: POP
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_full ] ] , [ f_btype , b_lab ] ] ) ; class_mechanic :
 959: LD_ADDR_VAR 0 5
 963: PUSH
 964: LD_INT 22
 966: PUSH
 967: LD_INT 6
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 3
 976: PUSH
 977: LD_INT 62
 979: PUSH
 980: EMPTY
 981: LIST
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: PUSH
 987: LD_INT 30
 989: PUSH
 990: LD_INT 6
 992: PUSH
 993: EMPTY
 994: LIST
 995: LIST
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: LIST
1001: PPUSH
1002: CALL_OW 69
1006: ST_TO_ADDR
1007: GO 1069
1009: LD_INT 3
1011: DOUBLE
1012: EQUAL
1013: IFTRUE 1017
1015: GO 1068
1017: POP
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_full ] ] , [ f_btype , b_workshop ] ] ) ; end ;
1018: LD_ADDR_VAR 0 5
1022: PUSH
1023: LD_INT 22
1025: PUSH
1026: LD_INT 6
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PUSH
1033: LD_INT 3
1035: PUSH
1036: LD_INT 62
1038: PUSH
1039: EMPTY
1040: LIST
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PUSH
1046: LD_INT 30
1048: PUSH
1049: LD_INT 2
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: LIST
1060: PPUSH
1061: CALL_OW 69
1065: ST_TO_ADDR
1066: GO 1069
1068: POP
// if tmp then
1069: LD_VAR 0 5
1073: IFFALSE 1095
// PlaceHumanInUnit ( i , tmp [ 1 ] ) else
1075: LD_VAR 0 2
1079: PPUSH
1080: LD_VAR 0 5
1084: PUSH
1085: LD_INT 1
1087: ARRAY
1088: PPUSH
1089: CALL_OW 52
1093: GO 1116
// PlaceUnitXYR ( i , 158 , 106 , 3 , false ) ;
1095: LD_VAR 0 2
1099: PPUSH
1100: LD_INT 158
1102: PPUSH
1103: LD_INT 106
1105: PPUSH
1106: LD_INT 3
1108: PPUSH
1109: LD_INT 0
1111: PPUSH
1112: CALL_OW 50
// end ;
1116: GO 872
1118: POP
1119: POP
// for i := 1 to 2 do
1120: LD_ADDR_VAR 0 2
1124: PUSH
1125: DOUBLE
1126: LD_INT 1
1128: DEC
1129: ST_TO_ADDR
1130: LD_INT 2
1132: PUSH
1133: FOR_TO
1134: IFFALSE 1168
// begin PrepareSoldier ( sex_male , 2 ) ;
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 381
// grishkoTeam := Join ( grishkoTeam , CreateHuman ) ;
1146: LD_ADDR_EXP 40
1150: PUSH
1151: LD_EXP 40
1155: PPUSH
1156: CALL_OW 44
1160: PPUSH
1161: CALL 64343 0 2
1165: ST_TO_ADDR
// end ;
1166: GO 1133
1168: POP
1169: POP
// grishkoTeam := Join ( grishkoTeam , Grishko ) ;
1170: LD_ADDR_EXP 40
1174: PUSH
1175: LD_EXP 40
1179: PPUSH
1180: LD_EXP 37
1184: PPUSH
1185: CALL 64343 0 2
1189: ST_TO_ADDR
// vehiclesAmount := LoadVariable ( 02_VehiclesCount , 2 ) ;
1190: LD_ADDR_VAR 0 3
1194: PUSH
1195: LD_STRING 02_VehiclesCount
1197: PPUSH
1198: LD_INT 2
1200: PPUSH
1201: CALL_OW 30
1205: ST_TO_ADDR
// if vehiclesAmount > 4 then
1206: LD_VAR 0 3
1210: PUSH
1211: LD_INT 4
1213: GREATER
1214: IFFALSE 1224
// vehiclesAmount := 4 ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: LD_INT 4
1223: ST_TO_ADDR
// if Difficulty > 2 and vehiclesAmount > 2 then
1224: LD_OWVAR 67
1228: PUSH
1229: LD_INT 2
1231: GREATER
1232: IFFALSE 1244
1234: PUSH
1235: LD_VAR 0 3
1239: PUSH
1240: LD_INT 2
1242: GREATER
1243: AND
1244: IFFALSE 1254
// vehiclesAmount := 2 ;
1246: LD_ADDR_VAR 0 3
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// for i := 1 to vehiclesAmount do
1254: LD_ADDR_VAR 0 2
1258: PUSH
1259: DOUBLE
1260: LD_INT 1
1262: DEC
1263: ST_TO_ADDR
1264: LD_VAR 0 3
1268: PUSH
1269: FOR_TO
1270: IFFALSE 1352
// begin uc_side := 3 ;
1272: LD_ADDR_OWVAR 20
1276: PUSH
1277: LD_INT 3
1279: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 80 ) ;
1280: LD_INT 21
1282: PPUSH
1283: LD_INT 1
1285: PPUSH
1286: LD_INT 1
1288: PPUSH
1289: LD_INT 42
1291: PPUSH
1292: LD_INT 80
1294: PPUSH
1295: CALL 31163 0 5
// veh := CreateVehicle ;
1299: LD_ADDR_VAR 0 4
1303: PUSH
1304: CALL_OW 45
1308: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1309: LD_VAR 0 4
1313: PPUSH
1314: LD_INT 0
1316: PPUSH
1317: LD_INT 5
1319: PPUSH
1320: CALL_OW 12
1324: PPUSH
1325: CALL_OW 233
// PlaceUnitXYR ( veh , 112 , 98 , 12 , false ) ;
1329: LD_VAR 0 4
1333: PPUSH
1334: LD_INT 112
1336: PPUSH
1337: LD_INT 98
1339: PPUSH
1340: LD_INT 12
1342: PPUSH
1343: LD_INT 0
1345: PPUSH
1346: CALL_OW 50
// end ;
1350: GO 1269
1352: POP
1353: POP
// vehiclesAmount := LoadVariable ( 02_KirovVehiclesCount , 1 ) ;
1354: LD_ADDR_VAR 0 3
1358: PUSH
1359: LD_STRING 02_KirovVehiclesCount
1361: PPUSH
1362: LD_INT 1
1364: PPUSH
1365: CALL_OW 30
1369: ST_TO_ADDR
// if vehiclesAmount > 4 then
1370: LD_VAR 0 3
1374: PUSH
1375: LD_INT 4
1377: GREATER
1378: IFFALSE 1388
// vehiclesAmount := 4 ;
1380: LD_ADDR_VAR 0 3
1384: PUSH
1385: LD_INT 4
1387: ST_TO_ADDR
// for i := 1 to vehiclesAmount do
1388: LD_ADDR_VAR 0 2
1392: PUSH
1393: DOUBLE
1394: LD_INT 1
1396: DEC
1397: ST_TO_ADDR
1398: LD_VAR 0 3
1402: PUSH
1403: FOR_TO
1404: IFFALSE 1486
// begin uc_side := 6 ;
1406: LD_ADDR_OWVAR 20
1410: PUSH
1411: LD_INT 6
1413: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 80 ) ;
1414: LD_INT 21
1416: PPUSH
1417: LD_INT 1
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 42
1425: PPUSH
1426: LD_INT 80
1428: PPUSH
1429: CALL 31163 0 5
// veh := CreateVehicle ;
1433: LD_ADDR_VAR 0 4
1437: PUSH
1438: CALL_OW 45
1442: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1443: LD_VAR 0 4
1447: PPUSH
1448: LD_INT 0
1450: PPUSH
1451: LD_INT 5
1453: PPUSH
1454: CALL_OW 12
1458: PPUSH
1459: CALL_OW 233
// PlaceUnitXYR ( veh , 157 , 106 , 12 , false ) ;
1463: LD_VAR 0 4
1467: PPUSH
1468: LD_INT 157
1470: PPUSH
1471: LD_INT 106
1473: PPUSH
1474: LD_INT 12
1476: PPUSH
1477: LD_INT 0
1479: PPUSH
1480: CALL_OW 50
// end ;
1484: GO 1403
1486: POP
1487: POP
// mainRuCharacters := [ Burlak , Kovalyuk , Gnyevko , Belkov , Scholtze , Kirilenkova ] ;
1488: LD_ADDR_EXP 48
1492: PUSH
1493: LD_EXP 29
1497: PUSH
1498: LD_EXP 34
1502: PUSH
1503: LD_EXP 30
1507: PUSH
1508: LD_EXP 31
1512: PUSH
1513: LD_EXP 36
1517: PUSH
1518: LD_EXP 32
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: ST_TO_ADDR
// kirovVehicles := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1531: LD_ADDR_EXP 49
1535: PUSH
1536: LD_INT 22
1538: PUSH
1539: LD_INT 6
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PUSH
1546: LD_INT 21
1548: PUSH
1549: LD_INT 2
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: PUSH
1556: EMPTY
1557: LIST
1558: LIST
1559: PPUSH
1560: CALL_OW 69
1564: ST_TO_ADDR
// kirovAttackVehicles := [ ] ;
1565: LD_ADDR_EXP 50
1569: PUSH
1570: EMPTY
1571: ST_TO_ADDR
// kirovTechs := GetTechNation ( 6 , nation_russian , state_enabled ) ;
1572: LD_ADDR_EXP 51
1576: PUSH
1577: LD_INT 6
1579: PPUSH
1580: LD_INT 3
1582: PPUSH
1583: LD_INT 1
1585: PPUSH
1586: CALL 26290 0 3
1590: ST_TO_ADDR
// kirovConstructList := [ ] ;
1591: LD_ADDR_EXP 53
1595: PUSH
1596: EMPTY
1597: ST_TO_ADDR
// kirovBuildingsToBuild := [ [ b_factory , 159 , 113 , 0 ] , [ b_lab_half , 153 , 99 , 3 , b_lab_weapon ] , [ b_bunker , 144 , 98 , 1 ] , [ b_oil_power , 155 , 94 , 0 ] , [ b_oil_power , 158 , 96 , 2 ] , [ b_ext_gun , 162 , 116 , 5 ] , [ b_bunker , 169 , 101 , 3 ] , [ b_bunker , 171 , 119 , 5 ] , [ b_bunker , 144 , 106 , 1 ] ] ;
1598: LD_ADDR_EXP 52
1602: PUSH
1603: LD_INT 3
1605: PUSH
1606: LD_INT 159
1608: PUSH
1609: LD_INT 113
1611: PUSH
1612: LD_INT 0
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: PUSH
1621: LD_INT 7
1623: PUSH
1624: LD_INT 153
1626: PUSH
1627: LD_INT 99
1629: PUSH
1630: LD_INT 3
1632: PUSH
1633: LD_INT 10
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: PUSH
1643: LD_INT 32
1645: PUSH
1646: LD_INT 144
1648: PUSH
1649: LD_INT 98
1651: PUSH
1652: LD_INT 1
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: PUSH
1661: LD_INT 26
1663: PUSH
1664: LD_INT 155
1666: PUSH
1667: LD_INT 94
1669: PUSH
1670: LD_INT 0
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: PUSH
1679: LD_INT 26
1681: PUSH
1682: LD_INT 158
1684: PUSH
1685: LD_INT 96
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: EMPTY
1692: LIST
1693: LIST
1694: LIST
1695: LIST
1696: PUSH
1697: LD_INT 17
1699: PUSH
1700: LD_INT 162
1702: PUSH
1703: LD_INT 116
1705: PUSH
1706: LD_INT 5
1708: PUSH
1709: EMPTY
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: PUSH
1715: LD_INT 32
1717: PUSH
1718: LD_INT 169
1720: PUSH
1721: LD_INT 101
1723: PUSH
1724: LD_INT 3
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: PUSH
1733: LD_INT 32
1735: PUSH
1736: LD_INT 171
1738: PUSH
1739: LD_INT 119
1741: PUSH
1742: LD_INT 5
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: LIST
1749: LIST
1750: PUSH
1751: LD_INT 32
1753: PUSH
1754: LD_INT 144
1756: PUSH
1757: LD_INT 106
1759: PUSH
1760: LD_INT 1
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: ST_TO_ADDR
// end ;
1780: LD_VAR 0 1
1784: RET
// every 0 0$1 trigger gameStart do
1785: LD_EXP 7
1789: IFFALSE 1869
1791: GO 1793
1793: DISABLE
// begin enable ;
1794: ENABLE
// BaseScript ( 6 , kirovBaseArea , kirovCratesArea , kirovBaseInnerArea , kirovBaseOuterArea , kirovBaseSquad , kirovVehicles , kirovTechs , kirovConstructList , kirovBuildingsToBuild , [ 153 , 103 ] , [ 144 , 102 ] , [ 122 , 49 ] ) ;
1795: LD_INT 6
1797: PPUSH
1798: LD_INT 10
1800: PPUSH
1801: LD_INT 13
1803: PPUSH
1804: LD_INT 12
1806: PPUSH
1807: LD_INT 11
1809: PPUSH
1810: LD_EXP 38
1814: PPUSH
1815: LD_EXP 49
1819: PPUSH
1820: LD_EXP 51
1824: PPUSH
1825: LD_EXP 53
1829: PPUSH
1830: LD_EXP 52
1834: PPUSH
1835: LD_INT 153
1837: PUSH
1838: LD_INT 103
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: PPUSH
1845: LD_INT 144
1847: PUSH
1848: LD_INT 102
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: PPUSH
1855: LD_INT 122
1857: PUSH
1858: LD_INT 49
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: PPUSH
1865: CALL 11847 0 13
// end ;
1869: END
// every 0 0$10 + 4 4$00 trigger gameStart do var i ;
1870: LD_EXP 7
1874: IFFALSE 2105
1876: GO 1878
1878: DISABLE
1879: LD_INT 0
1881: PPUSH
// begin for i in grishkoTeam do
1882: LD_ADDR_VAR 0 1
1886: PUSH
1887: LD_EXP 40
1891: PUSH
1892: FOR_IN
1893: IFFALSE 2006
// begin PlaceUnitArea ( i , grishkoTeamSpawnArea , false ) ;
1895: LD_VAR 0 1
1899: PPUSH
1900: LD_INT 15
1902: PPUSH
1903: LD_INT 0
1905: PPUSH
1906: CALL_OW 49
// ComMoveXY ( i , 142 , 135 ) ;
1910: LD_VAR 0 1
1914: PPUSH
1915: LD_INT 142
1917: PPUSH
1918: LD_INT 135
1920: PPUSH
1921: CALL_OW 111
// AddComWait ( i , 0 0$12 - ( i * 0 0$2 ) ) ;
1925: LD_VAR 0 1
1929: PPUSH
1930: LD_INT 420
1932: PUSH
1933: LD_VAR 0 1
1937: PUSH
1938: LD_INT 70
1940: MUL
1941: MINUS
1942: PPUSH
1943: CALL_OW 202
// AddComMoveXY ( i , 176 , 131 ) ;
1947: LD_VAR 0 1
1951: PPUSH
1952: LD_INT 176
1954: PPUSH
1955: LD_INT 131
1957: PPUSH
1958: CALL_OW 171
// AddComWait ( i , 0 0$6 ) ;
1962: LD_VAR 0 1
1966: PPUSH
1967: LD_INT 210
1969: PPUSH
1970: CALL_OW 202
// AddComMoveXY ( i , 199 , 105 ) ;
1974: LD_VAR 0 1
1978: PPUSH
1979: LD_INT 199
1981: PPUSH
1982: LD_INT 105
1984: PPUSH
1985: CALL_OW 171
// wait ( rand ( 0 0$1 , 0 0$3 ) ) ;
1989: LD_INT 35
1991: PPUSH
1992: LD_INT 105
1994: PPUSH
1995: CALL_OW 12
1999: PPUSH
2000: CALL_OW 67
// end ;
2004: GO 1892
2006: POP
2007: POP
// repeat wait ( 0 0$1 ) ;
2008: LD_INT 35
2010: PPUSH
2011: CALL_OW 67
// for i in grishkoTeam do
2015: LD_ADDR_VAR 0 1
2019: PUSH
2020: LD_EXP 40
2024: PUSH
2025: FOR_IN
2026: IFFALSE 2085
// if IsAt ( i , 199 , 105 ) then
2028: LD_VAR 0 1
2032: PPUSH
2033: LD_INT 199
2035: PPUSH
2036: LD_INT 105
2038: PPUSH
2039: CALL_OW 307
2043: IFFALSE 2056
// RemoveUnit ( i ) else
2045: LD_VAR 0 1
2049: PPUSH
2050: CALL_OW 64
2054: GO 2083
// if not HasTask ( i ) then
2056: LD_VAR 0 1
2060: PPUSH
2061: CALL_OW 314
2065: NOT
2066: IFFALSE 2083
// ComMoveXY ( i , 199 , 105 ) ;
2068: LD_VAR 0 1
2072: PPUSH
2073: LD_INT 199
2075: PPUSH
2076: LD_INT 105
2078: PPUSH
2079: CALL_OW 111
2083: GO 2025
2085: POP
2086: POP
// until not UnitFilter ( grishkoTeam , [ f_ok ] ) ;
2087: LD_EXP 40
2091: PPUSH
2092: LD_INT 50
2094: PUSH
2095: EMPTY
2096: LIST
2097: PPUSH
2098: CALL_OW 72
2102: NOT
2103: IFFALSE 2008
// end ;
2105: PPOPN 1
2107: END
// export function SendCargoWithOil ; var i , tmp , un , veh ; begin
2108: LD_INT 0
2110: PPUSH
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
// ruCargos := [ ] ;
2115: LD_ADDR_EXP 54
2119: PUSH
2120: EMPTY
2121: ST_TO_ADDR
// ruGuards := [ ] ;
2122: LD_ADDR_EXP 55
2126: PUSH
2127: EMPTY
2128: ST_TO_ADDR
// for i := 1 to 3 do
2129: LD_ADDR_VAR 0 2
2133: PUSH
2134: DOUBLE
2135: LD_INT 1
2137: DEC
2138: ST_TO_ADDR
2139: LD_INT 3
2141: PUSH
2142: FOR_TO
2143: IFFALSE 2159
// EraseResourceArea ( i , southSpawnEraseArea ) ;
2145: LD_VAR 0 2
2149: PPUSH
2150: LD_INT 17
2152: PPUSH
2153: CALL_OW 286
2157: GO 2142
2159: POP
2160: POP
// tmp := FilterAllUnits ( [ f_distxy , 207 , 162 , 6 ] ) ;
2161: LD_ADDR_VAR 0 3
2165: PUSH
2166: LD_INT 92
2168: PUSH
2169: LD_INT 207
2171: PUSH
2172: LD_INT 162
2174: PUSH
2175: LD_INT 6
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: PPUSH
2184: CALL_OW 69
2188: ST_TO_ADDR
// if tmp then
2189: LD_VAR 0 3
2193: IFFALSE 2272
// begin if UnitFilter ( tmp , [ f_type , unit_building ] ) then
2195: LD_VAR 0 3
2199: PPUSH
2200: LD_INT 21
2202: PUSH
2203: LD_INT 3
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: PPUSH
2210: CALL_OW 72
2214: IFFALSE 2257
// begin for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
2216: LD_ADDR_VAR 0 2
2220: PUSH
2221: LD_VAR 0 3
2225: PPUSH
2226: LD_INT 21
2228: PUSH
2229: LD_INT 3
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PPUSH
2236: CALL_OW 72
2240: PUSH
2241: FOR_IN
2242: IFFALSE 2255
// RemoveUnit ( i ) ;
2244: LD_VAR 0 2
2248: PPUSH
2249: CALL_OW 64
2253: GO 2241
2255: POP
2256: POP
// end ; ComMoveXY ( tmp , 200 , 147 ) ;
2257: LD_VAR 0 3
2261: PPUSH
2262: LD_INT 200
2264: PPUSH
2265: LD_INT 147
2267: PPUSH
2268: CALL_OW 111
// end ; tmp := [ ] ;
2272: LD_ADDR_VAR 0 3
2276: PUSH
2277: EMPTY
2278: ST_TO_ADDR
// for i := 1 to 3 do
2279: LD_ADDR_VAR 0 2
2283: PUSH
2284: DOUBLE
2285: LD_INT 1
2287: DEC
2288: ST_TO_ADDR
2289: LD_INT 3
2291: PUSH
2292: FOR_TO
2293: IFFALSE 2485
// begin uc_side := 6 ;
2295: LD_ADDR_OWVAR 20
2299: PUSH
2300: LD_INT 6
2302: ST_TO_ADDR
// uc_nation := nation_russian ;
2303: LD_ADDR_OWVAR 21
2307: PUSH
2308: LD_INT 3
2310: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 ) ;
2311: LD_INT 21
2313: PPUSH
2314: LD_INT 1
2316: PPUSH
2317: LD_INT 1
2319: PPUSH
2320: LD_INT 51
2322: PPUSH
2323: LD_INT 90
2325: PPUSH
2326: CALL 31163 0 5
// veh := CreateVehicle ;
2330: LD_ADDR_VAR 0 5
2334: PUSH
2335: CALL_OW 45
2339: ST_TO_ADDR
// ruCargos := Join ( ruCargos , veh ) ;
2340: LD_ADDR_EXP 54
2344: PUSH
2345: LD_EXP 54
2349: PPUSH
2350: LD_VAR 0 5
2354: PPUSH
2355: CALL 64343 0 2
2359: ST_TO_ADDR
// SetCargo ( veh , mat_oil , 100 ) ;
2360: LD_VAR 0 5
2364: PPUSH
2365: LD_INT 2
2367: PPUSH
2368: LD_INT 100
2370: PPUSH
2371: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
2375: LD_INT 35
2377: PPUSH
2378: CALL_OW 67
// until PlaceUnitArea ( veh , southRoadSpawnArea , false ) ;
2382: LD_VAR 0 5
2386: PPUSH
2387: LD_INT 14
2389: PPUSH
2390: LD_INT 0
2392: PPUSH
2393: CALL_OW 49
2397: IFFALSE 2375
// PrepareSoldier ( false , 2 ) ;
2399: LD_INT 0
2401: PPUSH
2402: LD_INT 2
2404: PPUSH
2405: CALL_OW 381
// un := CreateHuman ;
2409: LD_ADDR_VAR 0 4
2413: PUSH
2414: CALL_OW 44
2418: ST_TO_ADDR
// ruGuards := Join ( ruGuards , un ) ;
2419: LD_ADDR_EXP 55
2423: PUSH
2424: LD_EXP 55
2428: PPUSH
2429: LD_VAR 0 4
2433: PPUSH
2434: CALL 64343 0 2
2438: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2439: LD_VAR 0 4
2443: PPUSH
2444: LD_VAR 0 5
2448: PPUSH
2449: CALL_OW 52
// ComMoveXY ( veh , 105 , 47 ) ;
2453: LD_VAR 0 5
2457: PPUSH
2458: LD_INT 105
2460: PPUSH
2461: LD_INT 47
2463: PPUSH
2464: CALL_OW 111
// AddComMoveXY ( veh , 71 , 29 ) ;
2468: LD_VAR 0 5
2472: PPUSH
2473: LD_INT 71
2475: PPUSH
2476: LD_INT 29
2478: PPUSH
2479: CALL_OW 171
// end ;
2483: GO 2292
2485: POP
2486: POP
// repeat wait ( 0 0$3 ) ;
2487: LD_INT 105
2489: PPUSH
2490: CALL_OW 67
// until UnitFilter ( ruCargos , [ f_distxy , 71 , 29 , 6 ] ) >= 2 ;
2494: LD_EXP 54
2498: PPUSH
2499: LD_INT 92
2501: PUSH
2502: LD_INT 71
2504: PUSH
2505: LD_INT 29
2507: PUSH
2508: LD_INT 6
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: LIST
2515: LIST
2516: PPUSH
2517: CALL_OW 72
2521: PUSH
2522: LD_INT 2
2524: GREATEREQUAL
2525: IFFALSE 2487
// for i in ruGuards do
2527: LD_ADDR_VAR 0 2
2531: PUSH
2532: LD_EXP 55
2536: PUSH
2537: FOR_IN
2538: IFFALSE 2573
// begin ComExitVehicle ( i ) ;
2540: LD_VAR 0 2
2544: PPUSH
2545: CALL_OW 121
// wait ( 0 0$1 ) ;
2549: LD_INT 35
2551: PPUSH
2552: CALL_OW 67
// ComAgressiveMove ( i , 63 , 47 ) ;
2556: LD_VAR 0 2
2560: PPUSH
2561: LD_INT 63
2563: PPUSH
2564: LD_INT 47
2566: PPUSH
2567: CALL_OW 114
// end ;
2571: GO 2537
2573: POP
2574: POP
// end ;
2575: LD_VAR 0 1
2579: RET
// every 0 0$1 trigger hasFactory and tick > 15 15$00 and Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ) > 2 do
2580: LD_EXP 19
2584: IFFALSE 2596
2586: PUSH
2587: LD_OWVAR 1
2591: PUSH
2592: LD_INT 31500
2594: GREATER
2595: AND
2596: IFFALSE 2655
2598: PUSH
2599: LD_INT 22
2601: PUSH
2602: LD_INT 3
2604: PUSH
2605: EMPTY
2606: LIST
2607: LIST
2608: PUSH
2609: LD_INT 21
2611: PUSH
2612: LD_INT 2
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: PUSH
2619: LD_INT 50
2621: PUSH
2622: EMPTY
2623: LIST
2624: PUSH
2625: LD_INT 23
2627: PUSH
2628: LD_INT 3
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: LIST
2639: LIST
2640: PPUSH
2641: CALL_OW 69
2645: PPUSH
2646: CALL 28367 0 1
2650: PUSH
2651: LD_INT 2
2653: GREATER
2654: AND
2655: IFFALSE 2693
2657: GO 2659
2659: DISABLE
// kirovConstructList := Join ( kirovConstructList , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun ] ) ;
2660: LD_ADDR_EXP 53
2664: PUSH
2665: LD_EXP 53
2669: PPUSH
2670: LD_INT 21
2672: PUSH
2673: LD_INT 1
2675: PUSH
2676: LD_INT 1
2678: PUSH
2679: LD_INT 43
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: LIST
2686: LIST
2687: PPUSH
2688: CALL 64343 0 2
2692: ST_TO_ADDR
2693: END
// every 0 0$1 trigger hasFactory and tick > 15 15$00 and Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ) > 6 do
2694: LD_EXP 19
2698: IFFALSE 2710
2700: PUSH
2701: LD_OWVAR 1
2705: PUSH
2706: LD_INT 31500
2708: GREATER
2709: AND
2710: IFFALSE 2769
2712: PUSH
2713: LD_INT 22
2715: PUSH
2716: LD_INT 3
2718: PUSH
2719: EMPTY
2720: LIST
2721: LIST
2722: PUSH
2723: LD_INT 21
2725: PUSH
2726: LD_INT 2
2728: PUSH
2729: EMPTY
2730: LIST
2731: LIST
2732: PUSH
2733: LD_INT 50
2735: PUSH
2736: EMPTY
2737: LIST
2738: PUSH
2739: LD_INT 23
2741: PUSH
2742: LD_INT 3
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: PPUSH
2755: CALL_OW 69
2759: PPUSH
2760: CALL 28367 0 1
2764: PUSH
2765: LD_INT 6
2767: GREATER
2768: AND
2769: IFFALSE 2807
2771: GO 2773
2773: DISABLE
// kirovConstructList := Join ( kirovConstructList , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun ] ) ;
2774: LD_ADDR_EXP 53
2778: PUSH
2779: LD_EXP 53
2783: PPUSH
2784: LD_INT 21
2786: PUSH
2787: LD_INT 1
2789: PUSH
2790: LD_INT 1
2792: PUSH
2793: LD_INT 44
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: PPUSH
2802: CALL 64343 0 2
2806: ST_TO_ADDR
2807: END
// every 0 0$1 trigger GetLives ( Popov ) < 500 and IsInArea ( Popov , easternHillArea ) and GetDistUnitXY ( Popov , 146 , 67 ) > 3 do
2808: LD_EXP 35
2812: PPUSH
2813: CALL_OW 256
2817: PUSH
2818: LD_INT 500
2820: LESS
2821: IFFALSE 2837
2823: PUSH
2824: LD_EXP 35
2828: PPUSH
2829: LD_INT 3
2831: PPUSH
2832: CALL_OW 308
2836: AND
2837: IFFALSE 2860
2839: PUSH
2840: LD_EXP 35
2844: PPUSH
2845: LD_INT 146
2847: PPUSH
2848: LD_INT 67
2850: PPUSH
2851: CALL_OW 297
2855: PUSH
2856: LD_INT 3
2858: GREATER
2859: AND
2860: IFFALSE 2881
2862: GO 2864
2864: DISABLE
// begin enable ;
2865: ENABLE
// ComMoveXY ( Popov , 146 , 67 ) ;
2866: LD_EXP 35
2870: PPUSH
2871: LD_INT 146
2873: PPUSH
2874: LD_INT 67
2876: PPUSH
2877: CALL_OW 111
// end ;
2881: END
// every 0 0$1 trigger not americanRetreat and ( ( not IsInArea ( Popov , easternHillArea ) and not HasTask ( Popov ) ) or GetDistUnitXY ( Popov , 146 , 67 ) > 30 ) do
2882: LD_EXP 26
2886: NOT
2887: IFFALSE 2941
2889: PUSH
2890: LD_EXP 35
2894: PPUSH
2895: LD_INT 3
2897: PPUSH
2898: CALL_OW 308
2902: NOT
2903: IFFALSE 2917
2905: PUSH
2906: LD_EXP 35
2910: PPUSH
2911: CALL_OW 314
2915: NOT
2916: AND
2917: IFTRUE 2940
2919: PUSH
2920: LD_EXP 35
2924: PPUSH
2925: LD_INT 146
2927: PPUSH
2928: LD_INT 67
2930: PPUSH
2931: CALL_OW 297
2935: PUSH
2936: LD_INT 30
2938: GREATER
2939: OR
2940: AND
2941: IFFALSE 2962
2943: GO 2945
2945: DISABLE
// begin enable ;
2946: ENABLE
// ComMoveXY ( Popov , 146 , 67 ) ;
2947: LD_EXP 35
2951: PPUSH
2952: LD_INT 146
2954: PPUSH
2955: LD_INT 67
2957: PPUSH
2958: CALL_OW 111
// end ;
2962: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_engine , engine_combustion ] ] ) do var i ;
2963: LD_INT 22
2965: PUSH
2966: LD_INT 6
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PUSH
2973: LD_INT 32
2975: PUSH
2976: LD_INT 1
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: PUSH
2983: EMPTY
2984: LIST
2985: LIST
2986: PPUSH
2987: CALL_OW 69
2991: IFFALSE 3068
2993: GO 2995
2995: DISABLE
2996: LD_INT 0
2998: PPUSH
// begin enable ;
2999: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_engine , engine_combustion ] ] ) do
3000: LD_ADDR_VAR 0 1
3004: PUSH
3005: LD_INT 22
3007: PUSH
3008: LD_INT 6
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: LD_INT 32
3017: PUSH
3018: LD_INT 1
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: PPUSH
3029: CALL_OW 69
3033: PUSH
3034: FOR_IN
3035: IFFALSE 3066
// if GetFuel ( i ) < 3 then
3037: LD_VAR 0 1
3041: PPUSH
3042: CALL_OW 261
3046: PUSH
3047: LD_INT 3
3049: LESS
3050: IFFALSE 3064
// SetFuel ( i , 3 ) ;
3052: LD_VAR 0 1
3056: PPUSH
3057: LD_INT 3
3059: PPUSH
3060: CALL_OW 240
3064: GO 3034
3066: POP
3067: POP
// end ;
3068: PPOPN 1
3070: END
// every 0 0$1 trigger allowedToAttackOmicron and kirovAttackVehicles do var i , filter , tmp , enemy , x , points , point ;
3071: LD_EXP 13
3075: IFFALSE 3083
3077: PUSH
3078: LD_EXP 50
3082: AND
3083: IFFALSE 3650
3085: GO 3087
3087: DISABLE
3088: LD_INT 0
3090: PPUSH
3091: PPUSH
3092: PPUSH
3093: PPUSH
3094: PPUSH
3095: PPUSH
3096: PPUSH
// begin enable ;
3097: ENABLE
// filter := UnitFilter ( kirovAttackVehicles , [ f_type , unit_vehicle ] ) ;
3098: LD_ADDR_VAR 0 2
3102: PUSH
3103: LD_EXP 50
3107: PPUSH
3108: LD_INT 21
3110: PUSH
3111: LD_INT 2
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PPUSH
3118: CALL_OW 72
3122: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
3123: LD_ADDR_VAR 0 4
3127: PUSH
3128: LD_INT 22
3130: PUSH
3131: LD_INT 1
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PPUSH
3138: CALL_OW 69
3142: ST_TO_ADDR
// points := [ [ 44 , 15 ] , [ 54 , 39 ] ] ;
3143: LD_ADDR_VAR 0 6
3147: PUSH
3148: LD_INT 44
3150: PUSH
3151: LD_INT 15
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PUSH
3158: LD_INT 54
3160: PUSH
3161: LD_INT 39
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: ST_TO_ADDR
// for i in filter do
3172: LD_ADDR_VAR 0 1
3176: PUSH
3177: LD_VAR 0 2
3181: PUSH
3182: FOR_IN
3183: IFFALSE 3648
// begin tmp := IsDrivenBy ( i ) ;
3185: LD_ADDR_VAR 0 3
3189: PUSH
3190: LD_VAR 0 1
3194: PPUSH
3195: CALL_OW 311
3199: ST_TO_ADDR
// if not tmp then
3200: LD_VAR 0 3
3204: NOT
3205: IFFALSE 3209
// continue ;
3207: GO 3182
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
3209: LD_VAR 0 1
3213: PPUSH
3214: CALL_OW 261
3218: PUSH
3219: LD_INT 90
3221: GREATER
3222: IFFALSE 3239
3224: PUSH
3225: LD_VAR 0 1
3229: PPUSH
3230: CALL_OW 110
3234: PUSH
3235: LD_INT 2
3237: EQUAL
3238: AND
3239: IFFALSE 3255
// SetTag ( i , 0 ) else
3241: LD_VAR 0 1
3245: PPUSH
3246: LD_INT 0
3248: PPUSH
3249: CALL_OW 109
3253: GO 3325
// if GetTag ( i ) = 2 and UnitFilter ( ruCargos , [ f_ok ] ) then
3255: LD_VAR 0 1
3259: PPUSH
3260: CALL_OW 110
3264: PUSH
3265: LD_INT 2
3267: EQUAL
3268: IFFALSE 3287
3270: PUSH
3271: LD_EXP 54
3275: PPUSH
3276: LD_INT 50
3278: PUSH
3279: EMPTY
3280: LIST
3281: PPUSH
3282: CALL_OW 72
3286: AND
3287: IFFALSE 3325
// begin x := rand ( 1 , 2 ) ;
3289: LD_ADDR_VAR 0 5
3293: PUSH
3294: LD_INT 1
3296: PPUSH
3297: LD_INT 2
3299: PPUSH
3300: CALL_OW 12
3304: ST_TO_ADDR
// AddComMoveUnit ( i , ruCargos [ x ] ) ;
3305: LD_VAR 0 1
3309: PPUSH
3310: LD_EXP 54
3314: PUSH
3315: LD_VAR 0 5
3319: ARRAY
3320: PPUSH
3321: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
3325: LD_VAR 0 1
3329: PPUSH
3330: CALL_OW 256
3334: PUSH
3335: LD_INT 600
3337: GREATEREQUAL
3338: IFFALSE 3352
3340: PUSH
3341: LD_VAR 0 1
3345: PPUSH
3346: CALL_OW 110
3350: NOT
3351: AND
3352: IFFALSE 3378
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
3354: LD_VAR 0 1
3358: PPUSH
3359: LD_VAR 0 4
3363: PPUSH
3364: LD_VAR 0 1
3368: PPUSH
3369: CALL_OW 74
3373: PPUSH
3374: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
3378: LD_VAR 0 1
3382: PPUSH
3383: CALL_OW 256
3387: PUSH
3388: LD_INT 600
3390: LESS
3391: IFFALSE 3405
3393: PUSH
3394: LD_VAR 0 1
3398: PPUSH
3399: CALL_OW 110
3403: NOT
3404: AND
3405: IFFALSE 3481
// begin SetTag ( i , 1 ) ;
3407: LD_VAR 0 1
3411: PPUSH
3412: LD_INT 1
3414: PPUSH
3415: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
3419: LD_ADDR_VAR 0 7
3423: PUSH
3424: LD_VAR 0 1
3428: PPUSH
3429: LD_VAR 0 6
3433: PPUSH
3434: CALL 67859 0 2
3438: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
3439: LD_VAR 0 1
3443: PPUSH
3444: LD_VAR 0 7
3448: PUSH
3449: LD_INT 1
3451: ARRAY
3452: PPUSH
3453: LD_VAR 0 7
3457: PUSH
3458: LD_INT 2
3460: ARRAY
3461: PPUSH
3462: CALL_OW 111
// AddComMoveXY ( i , 71 , 29 ) ;
3466: LD_VAR 0 1
3470: PPUSH
3471: LD_INT 71
3473: PPUSH
3474: LD_INT 29
3476: PPUSH
3477: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 71 , 29 ) < 9 and tmp then
3481: LD_VAR 0 1
3485: PPUSH
3486: CALL_OW 110
3490: PUSH
3491: LD_INT 1
3493: EQUAL
3494: IFFALSE 3517
3496: PUSH
3497: LD_VAR 0 1
3501: PPUSH
3502: LD_INT 71
3504: PPUSH
3505: LD_INT 29
3507: PPUSH
3508: CALL_OW 297
3512: PUSH
3513: LD_INT 9
3515: LESS
3516: AND
3517: IFFALSE 3525
3519: PUSH
3520: LD_VAR 0 3
3524: AND
3525: IFFALSE 3646
// begin ComExitVehicle ( tmp ) ;
3527: LD_VAR 0 3
3531: PPUSH
3532: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
3536: LD_VAR 0 3
3540: PPUSH
3541: LD_VAR 0 1
3545: PPUSH
3546: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
3550: LD_INT 35
3552: PPUSH
3553: CALL_OW 67
// until GetLives ( i ) = 1000 ;
3557: LD_VAR 0 1
3561: PPUSH
3562: CALL_OW 256
3566: PUSH
3567: LD_INT 1000
3569: EQUAL
3570: IFFALSE 3550
// ComEnterUnit ( tmp , i ) ;
3572: LD_VAR 0 3
3576: PPUSH
3577: LD_VAR 0 1
3581: PPUSH
3582: CALL_OW 120
// if GetFuel ( i ) <= 90 and UnitFilter ( ruCargos , [ f_ok ] ) then
3586: LD_VAR 0 1
3590: PPUSH
3591: CALL_OW 261
3595: PUSH
3596: LD_INT 90
3598: LESSEQUAL
3599: IFFALSE 3618
3601: PUSH
3602: LD_EXP 54
3606: PPUSH
3607: LD_INT 50
3609: PUSH
3610: EMPTY
3611: LIST
3612: PPUSH
3613: CALL_OW 72
3617: AND
3618: IFFALSE 3634
// SetTag ( i , 2 ) else
3620: LD_VAR 0 1
3624: PPUSH
3625: LD_INT 2
3627: PPUSH
3628: CALL_OW 109
3632: GO 3646
// SetTag ( i , 0 ) ;
3634: LD_VAR 0 1
3638: PPUSH
3639: LD_INT 0
3641: PPUSH
3642: CALL_OW 109
// end ; end ;
3646: GO 3182
3648: POP
3649: POP
// end ; end_of_file
3650: PPOPN 7
3652: END
// export Sikorski , omicronTroops , americanReinforcementsTroops , omicronVehicles , omicronAttackVehicles , omicronTechs , omicronConstructList , omicronBuildingsToBuild ; export function PrepareAmerican ; var i , un , limit ; begin
3653: LD_INT 0
3655: PPUSH
3656: PPUSH
3657: PPUSH
3658: PPUSH
// uc_side := omicronSide ;
3659: LD_ADDR_OWVAR 20
3663: PUSH
3664: LD_INT 1
3666: ST_TO_ADDR
// uc_nation := nation_american ;
3667: LD_ADDR_OWVAR 21
3671: PUSH
3672: LD_INT 1
3674: ST_TO_ADDR
// americanReinforcementsTroops := [ ] ;
3675: LD_ADDR_EXP 58
3679: PUSH
3680: EMPTY
3681: ST_TO_ADDR
// omicronTroops := [ ] ;
3682: LD_ADDR_EXP 57
3686: PUSH
3687: EMPTY
3688: ST_TO_ADDR
// omicronVehicles := [ ] ;
3689: LD_ADDR_EXP 59
3693: PUSH
3694: EMPTY
3695: ST_TO_ADDR
// omicronAttackVehicles := [ ] ;
3696: LD_ADDR_EXP 60
3700: PUSH
3701: EMPTY
3702: ST_TO_ADDR
// omicronTechs := GetTechNation ( omicronSide , nation_american , state_enabled ) ;
3703: LD_ADDR_EXP 61
3707: PUSH
3708: LD_INT 1
3710: PPUSH
3711: LD_INT 1
3713: PPUSH
3714: LD_INT 1
3716: PPUSH
3717: CALL 26290 0 3
3721: ST_TO_ADDR
// omicronBuildingsToBuild := [ ] ;
3722: LD_ADDR_EXP 63
3726: PUSH
3727: EMPTY
3728: ST_TO_ADDR
// omicronConstructList := [ ] ;
3729: LD_ADDR_EXP 62
3733: PUSH
3734: EMPTY
3735: ST_TO_ADDR
// SetResourceType ( GetBase ( usDep ) , mat_cans , 1000 ) ;
3736: LD_INT 290
3738: PPUSH
3739: CALL_OW 274
3743: PPUSH
3744: LD_INT 1
3746: PPUSH
3747: LD_INT 1000
3749: PPUSH
3750: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , mat_oil , 100 ) ;
3754: LD_INT 290
3756: PPUSH
3757: CALL_OW 274
3761: PPUSH
3762: LD_INT 2
3764: PPUSH
3765: LD_INT 100
3767: PPUSH
3768: CALL_OW 277
// SetBName ( usDep , omikron ) ;
3772: LD_INT 290
3774: PPUSH
3775: LD_STRING omikron
3777: PPUSH
3778: CALL_OW 500
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
3782: LD_ADDR_VAR 0 2
3786: PUSH
3787: LD_INT 22
3789: PUSH
3790: LD_INT 1
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: PUSH
3797: LD_INT 21
3799: PUSH
3800: LD_INT 3
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PPUSH
3811: CALL_OW 69
3815: PUSH
3816: FOR_IN
3817: IFFALSE 3839
// SetBLevel ( i , 1 + Difficulty ) ;
3819: LD_VAR 0 2
3823: PPUSH
3824: LD_INT 1
3826: PUSH
3827: LD_OWVAR 67
3831: PLUS
3832: PPUSH
3833: CALL_OW 241
3837: GO 3816
3839: POP
3840: POP
// limit := [ 8 , 9 , 9 , 10 ] [ Difficulty ] ;
3841: LD_ADDR_VAR 0 4
3845: PUSH
3846: LD_INT 8
3848: PUSH
3849: LD_INT 9
3851: PUSH
3852: LD_INT 9
3854: PUSH
3855: LD_INT 10
3857: PUSH
3858: EMPTY
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: PUSH
3864: LD_OWVAR 67
3868: ARRAY
3869: ST_TO_ADDR
// Sikorski := NewCharacter ( Sikorski ) ;
3870: LD_ADDR_EXP 56
3874: PUSH
3875: LD_STRING Sikorski
3877: PPUSH
3878: CALL_OW 25
3882: ST_TO_ADDR
// PlaceHumanInUnit ( Sikorski , usDep ) ;
3883: LD_EXP 56
3887: PPUSH
3888: LD_INT 290
3890: PPUSH
3891: CALL_OW 52
// for i := 1 to limit - 5 do
3895: LD_ADDR_VAR 0 2
3899: PUSH
3900: DOUBLE
3901: LD_INT 1
3903: DEC
3904: ST_TO_ADDR
3905: LD_VAR 0 4
3909: PUSH
3910: LD_INT 5
3912: MINUS
3913: PUSH
3914: FOR_TO
3915: IFFALSE 4001
// begin PrepareSoldier ( false , [ 2 , 2 , 3 , 4 ] [ Difficulty ] ) ;
3917: LD_INT 0
3919: PPUSH
3920: LD_INT 2
3922: PUSH
3923: LD_INT 2
3925: PUSH
3926: LD_INT 3
3928: PUSH
3929: LD_INT 4
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: PUSH
3938: LD_OWVAR 67
3942: ARRAY
3943: PPUSH
3944: CALL_OW 381
// un := CreateHuman ;
3948: LD_ADDR_VAR 0 3
3952: PUSH
3953: CALL_OW 44
3957: ST_TO_ADDR
// omicronTroops := Join ( omicronTroops , un ) ;
3958: LD_ADDR_EXP 57
3962: PUSH
3963: LD_EXP 57
3967: PPUSH
3968: LD_VAR 0 3
3972: PPUSH
3973: CALL 64343 0 2
3977: ST_TO_ADDR
// PlaceUnitXYR ( un , 27 , 36 , 5 , false ) ;
3978: LD_VAR 0 3
3982: PPUSH
3983: LD_INT 27
3985: PPUSH
3986: LD_INT 36
3988: PPUSH
3989: LD_INT 5
3991: PPUSH
3992: LD_INT 0
3994: PPUSH
3995: CALL_OW 50
// end ;
3999: GO 3914
4001: POP
4002: POP
// limit := limit - 5 ;
4003: LD_ADDR_VAR 0 4
4007: PUSH
4008: LD_VAR 0 4
4012: PUSH
4013: LD_INT 5
4015: MINUS
4016: ST_TO_ADDR
// for i := 1 to limit do
4017: LD_ADDR_VAR 0 2
4021: PUSH
4022: DOUBLE
4023: LD_INT 1
4025: DEC
4026: ST_TO_ADDR
4027: LD_VAR 0 4
4031: PUSH
4032: FOR_TO
4033: IFFALSE 4111
// begin PrepareHuman ( false , i mod 3 + 2 , 3 ) ;
4035: LD_INT 0
4037: PPUSH
4038: LD_VAR 0 2
4042: PUSH
4043: LD_INT 3
4045: MOD
4046: PUSH
4047: LD_INT 2
4049: PLUS
4050: PPUSH
4051: LD_INT 3
4053: PPUSH
4054: CALL_OW 380
// un := CreateHuman ;
4058: LD_ADDR_VAR 0 3
4062: PUSH
4063: CALL_OW 44
4067: ST_TO_ADDR
// omicronTroops := Join ( omicronTroops , un ) ;
4068: LD_ADDR_EXP 57
4072: PUSH
4073: LD_EXP 57
4077: PPUSH
4078: LD_VAR 0 3
4082: PPUSH
4083: CALL 64343 0 2
4087: ST_TO_ADDR
// PlaceUnitXYR ( un , 27 , 36 , 5 , false ) ;
4088: LD_VAR 0 3
4092: PPUSH
4093: LD_INT 27
4095: PPUSH
4096: LD_INT 36
4098: PPUSH
4099: LD_INT 5
4101: PPUSH
4102: LD_INT 0
4104: PPUSH
4105: CALL_OW 50
// end ;
4109: GO 4032
4111: POP
4112: POP
// uc_side := reinforcementsSide ;
4113: LD_ADDR_OWVAR 20
4117: PUSH
4118: LD_INT 4
4120: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
4121: LD_INT 0
4123: PPUSH
4124: LD_INT 1
4126: PPUSH
4127: CALL_OW 381
// un := CreateHuman ;
4131: LD_ADDR_VAR 0 3
4135: PUSH
4136: CALL_OW 44
4140: ST_TO_ADDR
// americanReinforcementsTroops := Join ( americanReinforcementsTroops , un ) ;
4141: LD_ADDR_EXP 58
4145: PUSH
4146: LD_EXP 58
4150: PPUSH
4151: LD_VAR 0 3
4155: PPUSH
4156: CALL 64343 0 2
4160: ST_TO_ADDR
// PlaceUnitXYR ( un , 71 , 102 , 3 , false ) ;
4161: LD_VAR 0 3
4165: PPUSH
4166: LD_INT 71
4168: PPUSH
4169: LD_INT 102
4171: PPUSH
4172: LD_INT 3
4174: PPUSH
4175: LD_INT 0
4177: PPUSH
4178: CALL_OW 50
// end ;
4182: LD_VAR 0 1
4186: RET
// every 0 0$1 trigger gameStart do
4187: LD_EXP 7
4191: IFFALSE 4263
4193: GO 4195
4195: DISABLE
// begin BaseScript ( omicronSide , omicronBaseArea , omicronBaseArea , omicronBaseInnerArea , omicronBaseOuterArea , omicronTroops , omicronVehicles , omicronTechs , omicronConstructList , omicronBuildingsToBuild , [ 27 , 32 ] , [ 19 , 14 ] , [ ] ) ;
4196: LD_INT 1
4198: PPUSH
4199: LD_INT 18
4201: PPUSH
4202: LD_INT 18
4204: PPUSH
4205: LD_INT 19
4207: PPUSH
4208: LD_INT 20
4210: PPUSH
4211: LD_EXP 57
4215: PPUSH
4216: LD_EXP 59
4220: PPUSH
4221: LD_EXP 61
4225: PPUSH
4226: LD_EXP 62
4230: PPUSH
4231: LD_EXP 63
4235: PPUSH
4236: LD_INT 27
4238: PUSH
4239: LD_INT 32
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: PPUSH
4246: LD_INT 19
4248: PUSH
4249: LD_INT 14
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: PPUSH
4256: EMPTY
4257: PPUSH
4258: CALL 11847 0 13
// enable ;
4262: ENABLE
// end ;
4263: END
// every 0 0$1 + 1 1$00 trigger gameStart and hasOilTower do var i , time ;
4264: LD_EXP 7
4268: IFFALSE 4276
4270: PUSH
4271: LD_EXP 14
4275: AND
4276: IFFALSE 4368
4278: GO 4280
4280: DISABLE
4281: LD_INT 0
4283: PPUSH
4284: PPUSH
// begin time := [ 4 4$30 , 4 4$00 , 3 3$40 , 3 3$20 ] [ Difficulty ] ;
4285: LD_ADDR_VAR 0 2
4289: PUSH
4290: LD_INT 9450
4292: PUSH
4293: LD_INT 8400
4295: PUSH
4296: LD_INT 7700
4298: PUSH
4299: LD_INT 7000
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: PUSH
4308: LD_OWVAR 67
4312: ARRAY
4313: ST_TO_ADDR
// repeat wait ( time + rand ( - 0 0$20 , 0 0$20 ) ) ;
4314: LD_VAR 0 2
4318: PUSH
4319: LD_INT 700
4321: NEG
4322: PPUSH
4323: LD_INT 700
4325: PPUSH
4326: CALL_OW 12
4330: PLUS
4331: PPUSH
4332: CALL_OW 67
// RaiseSailEvent ( eventConvoy ) ;
4336: LD_INT 2
4338: PPUSH
4339: CALL_OW 427
// convoysCounter := Dec ( convoysCounter ) ;
4343: LD_ADDR_EXP 25
4347: PUSH
4348: LD_EXP 25
4352: PPUSH
4353: CALL 65738 0 1
4357: ST_TO_ADDR
// until convoysCounter = 0 ;
4358: LD_EXP 25
4362: PUSH
4363: LD_INT 0
4365: EQUAL
4366: IFFALSE 4314
// end ;
4368: PPOPN 2
4370: END
// export function SendConvoy ; var i , tmp , path , strength , parts , points , skill , un , veh , coords , tag , hurt , emptyVeh , driver ; begin
4371: LD_INT 0
4373: PPUSH
4374: PPUSH
4375: PPUSH
4376: PPUSH
4377: PPUSH
4378: PPUSH
4379: PPUSH
4380: PPUSH
4381: PPUSH
4382: PPUSH
4383: PPUSH
4384: PPUSH
4385: PPUSH
4386: PPUSH
4387: PPUSH
// path := rand ( 1 , 2 ) ;
4388: LD_ADDR_VAR 0 4
4392: PUSH
4393: LD_INT 1
4395: PPUSH
4396: LD_INT 2
4398: PPUSH
4399: CALL_OW 12
4403: ST_TO_ADDR
// coords := [ [ [ 123 , 41 ] , [ 102 , 42 ] , [ 81 , 40 ] , [ 56 , 14 ] , [ 21 , 19 ] ] , [ [ 98 , 128 ] , [ 82 , 95 ] , [ 69 , 70 ] , [ 49 , 46 ] , [ 28 , 38 ] ] ] [ path ] ;
4404: LD_ADDR_VAR 0 11
4408: PUSH
4409: LD_INT 123
4411: PUSH
4412: LD_INT 41
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: LD_INT 102
4421: PUSH
4422: LD_INT 42
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: PUSH
4429: LD_INT 81
4431: PUSH
4432: LD_INT 40
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: PUSH
4439: LD_INT 56
4441: PUSH
4442: LD_INT 14
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: PUSH
4449: LD_INT 21
4451: PUSH
4452: LD_INT 19
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: PUSH
4466: LD_INT 98
4468: PUSH
4469: LD_INT 128
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PUSH
4476: LD_INT 82
4478: PUSH
4479: LD_INT 95
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 69
4488: PUSH
4489: LD_INT 70
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 49
4498: PUSH
4499: LD_INT 46
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: LD_INT 28
4508: PUSH
4509: LD_INT 38
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: LD_VAR 0 4
4531: ARRAY
4532: ST_TO_ADDR
// strength := [ 5 , 7 , 8 , 10 , 12 , 14 ] [ 7 - convoysCounter ] * Difficulty ;
4533: LD_ADDR_VAR 0 5
4537: PUSH
4538: LD_INT 5
4540: PUSH
4541: LD_INT 7
4543: PUSH
4544: LD_INT 8
4546: PUSH
4547: LD_INT 10
4549: PUSH
4550: LD_INT 12
4552: PUSH
4553: LD_INT 14
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: LIST
4560: LIST
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 7
4566: PUSH
4567: LD_EXP 25
4571: MINUS
4572: ARRAY
4573: PUSH
4574: LD_OWVAR 67
4578: MUL
4579: ST_TO_ADDR
// tmp := [ ] ;
4580: LD_ADDR_VAR 0 3
4584: PUSH
4585: EMPTY
4586: ST_TO_ADDR
// parts := [ 3 , 3 , 3 , 4 , 5 , 15 , 20 , 25 ] ;
4587: LD_ADDR_VAR 0 6
4591: PUSH
4592: LD_INT 3
4594: PUSH
4595: LD_INT 3
4597: PUSH
4598: LD_INT 3
4600: PUSH
4601: LD_INT 4
4603: PUSH
4604: LD_INT 5
4606: PUSH
4607: LD_INT 15
4609: PUSH
4610: LD_INT 20
4612: PUSH
4613: LD_INT 25
4615: PUSH
4616: EMPTY
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: ST_TO_ADDR
// skill := [ 2 , 2 , 3 , 4 ] [ Difficulty ] ;
4626: LD_ADDR_VAR 0 8
4630: PUSH
4631: LD_INT 2
4633: PUSH
4634: LD_INT 2
4636: PUSH
4637: LD_INT 3
4639: PUSH
4640: LD_INT 4
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: PUSH
4649: LD_OWVAR 67
4653: ARRAY
4654: ST_TO_ADDR
// repeat points := parts [ rand ( 1 , Count ( parts ) ) ] ;
4655: LD_ADDR_VAR 0 7
4659: PUSH
4660: LD_VAR 0 6
4664: PUSH
4665: LD_INT 1
4667: PPUSH
4668: LD_VAR 0 6
4672: PPUSH
4673: CALL 28367 0 1
4677: PPUSH
4678: CALL_OW 12
4682: ARRAY
4683: ST_TO_ADDR
// if points > strength then
4684: LD_VAR 0 7
4688: PUSH
4689: LD_VAR 0 5
4693: GREATER
4694: IFFALSE 4698
// continue ;
4696: GO 4655
// strength := strength - points ;
4698: LD_ADDR_VAR 0 5
4702: PUSH
4703: LD_VAR 0 5
4707: PUSH
4708: LD_VAR 0 7
4712: MINUS
4713: ST_TO_ADDR
// uc_side := 4 ;
4714: LD_ADDR_OWVAR 20
4718: PUSH
4719: LD_INT 4
4721: ST_TO_ADDR
// uc_nation := nation_american ;
4722: LD_ADDR_OWVAR 21
4726: PUSH
4727: LD_INT 1
4729: ST_TO_ADDR
// case points of 3 :
4730: LD_VAR 0 7
4734: PUSH
4735: LD_INT 3
4737: DOUBLE
4738: EQUAL
4739: IFTRUE 4743
4741: GO 4778
4743: POP
// begin PrepareSoldier ( false , skill ) ;
4744: LD_INT 0
4746: PPUSH
4747: LD_VAR 0 8
4751: PPUSH
4752: CALL_OW 381
// tmp := Join ( tmp , CreateHuman ) ;
4756: LD_ADDR_VAR 0 3
4760: PUSH
4761: LD_VAR 0 3
4765: PPUSH
4766: CALL_OW 44
4770: PPUSH
4771: CALL 64343 0 2
4775: ST_TO_ADDR
// end ; 4 :
4776: GO 5293
4778: LD_INT 4
4780: DOUBLE
4781: EQUAL
4782: IFTRUE 4786
4784: GO 4821
4786: POP
// begin PrepareScientist ( false , skill ) ;
4787: LD_INT 0
4789: PPUSH
4790: LD_VAR 0 8
4794: PPUSH
4795: CALL_OW 384
// tmp := Join ( tmp , CreateHuman ) ;
4799: LD_ADDR_VAR 0 3
4803: PUSH
4804: LD_VAR 0 3
4808: PPUSH
4809: CALL_OW 44
4813: PPUSH
4814: CALL 64343 0 2
4818: ST_TO_ADDR
// end ; 5 :
4819: GO 5293
4821: LD_INT 5
4823: DOUBLE
4824: EQUAL
4825: IFTRUE 4829
4827: GO 4864
4829: POP
// begin PrepareEngineer ( false , skill ) ;
4830: LD_INT 0
4832: PPUSH
4833: LD_VAR 0 8
4837: PPUSH
4838: CALL_OW 382
// tmp := Join ( tmp , CreateHuman ) ;
4842: LD_ADDR_VAR 0 3
4846: PUSH
4847: LD_VAR 0 3
4851: PPUSH
4852: CALL_OW 44
4856: PPUSH
4857: CALL 64343 0 2
4861: ST_TO_ADDR
// end ; 15 :
4862: GO 5293
4864: LD_INT 15
4866: DOUBLE
4867: EQUAL
4868: IFTRUE 4872
4870: GO 5008
4872: POP
// begin PrepareVehicle ( [ us_light_wheeled , us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 3 ) ] , [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] , control_manual , us_machine_gun , 100 ) ;
4873: LD_INT 1
4875: PUSH
4876: LD_INT 3
4878: PUSH
4879: LD_INT 2
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: LIST
4886: PUSH
4887: LD_INT 1
4889: PPUSH
4890: LD_INT 3
4892: PPUSH
4893: CALL_OW 12
4897: ARRAY
4898: PPUSH
4899: LD_INT 2
4901: PUSH
4902: LD_INT 1
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: LD_INT 1
4911: PPUSH
4912: LD_INT 2
4914: PPUSH
4915: CALL_OW 12
4919: ARRAY
4920: PPUSH
4921: LD_INT 1
4923: PPUSH
4924: LD_INT 2
4926: PPUSH
4927: LD_INT 100
4929: PPUSH
4930: CALL 31163 0 5
// veh := CreateVehicle ;
4934: LD_ADDR_VAR 0 10
4938: PUSH
4939: CALL_OW 45
4943: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
4944: LD_ADDR_VAR 0 3
4948: PUSH
4949: LD_VAR 0 3
4953: PPUSH
4954: LD_VAR 0 10
4958: PPUSH
4959: CALL 64343 0 2
4963: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
4964: LD_INT 0
4966: PPUSH
4967: LD_VAR 0 8
4971: PPUSH
4972: CALL_OW 383
// un := CreateHuman ;
4976: LD_ADDR_VAR 0 9
4980: PUSH
4981: CALL_OW 44
4985: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
4986: LD_ADDR_VAR 0 3
4990: PUSH
4991: LD_VAR 0 3
4995: PPUSH
4996: LD_VAR 0 9
5000: PPUSH
5001: CALL 64343 0 2
5005: ST_TO_ADDR
// end ; 20 :
5006: GO 5293
5008: LD_INT 20
5010: DOUBLE
5011: EQUAL
5012: IFTRUE 5016
5014: GO 5148
5016: POP
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] , [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] , control_manual , us_gatling_gun , 100 ) ;
5017: LD_INT 3
5019: PUSH
5020: LD_INT 2
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: PUSH
5027: LD_INT 1
5029: PPUSH
5030: LD_INT 2
5032: PPUSH
5033: CALL_OW 12
5037: ARRAY
5038: PPUSH
5039: LD_INT 2
5041: PUSH
5042: LD_INT 1
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PUSH
5049: LD_INT 1
5051: PPUSH
5052: LD_INT 2
5054: PPUSH
5055: CALL_OW 12
5059: ARRAY
5060: PPUSH
5061: LD_INT 1
5063: PPUSH
5064: LD_INT 4
5066: PPUSH
5067: LD_INT 100
5069: PPUSH
5070: CALL 31163 0 5
// veh := CreateVehicle ;
5074: LD_ADDR_VAR 0 10
5078: PUSH
5079: CALL_OW 45
5083: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
5084: LD_ADDR_VAR 0 3
5088: PUSH
5089: LD_VAR 0 3
5093: PPUSH
5094: LD_VAR 0 10
5098: PPUSH
5099: CALL 64343 0 2
5103: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
5104: LD_INT 0
5106: PPUSH
5107: LD_VAR 0 8
5111: PPUSH
5112: CALL_OW 383
// un := CreateHuman ;
5116: LD_ADDR_VAR 0 9
5120: PUSH
5121: CALL_OW 44
5125: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
5126: LD_ADDR_VAR 0 3
5130: PUSH
5131: LD_VAR 0 3
5135: PPUSH
5136: LD_VAR 0 9
5140: PPUSH
5141: CALL 64343 0 2
5145: ST_TO_ADDR
// end ; 25 :
5146: GO 5293
5148: LD_INT 25
5150: DOUBLE
5151: EQUAL
5152: IFTRUE 5156
5154: GO 5292
5156: POP
// begin PrepareVehicle ( [ us_light_wheeled , us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 3 ) ] , [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] , control_manual , us_light_gun , 80 ) ;
5157: LD_INT 1
5159: PUSH
5160: LD_INT 3
5162: PUSH
5163: LD_INT 2
5165: PUSH
5166: EMPTY
5167: LIST
5168: LIST
5169: LIST
5170: PUSH
5171: LD_INT 1
5173: PPUSH
5174: LD_INT 3
5176: PPUSH
5177: CALL_OW 12
5181: ARRAY
5182: PPUSH
5183: LD_INT 2
5185: PUSH
5186: LD_INT 1
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: PUSH
5193: LD_INT 1
5195: PPUSH
5196: LD_INT 2
5198: PPUSH
5199: CALL_OW 12
5203: ARRAY
5204: PPUSH
5205: LD_INT 1
5207: PPUSH
5208: LD_INT 3
5210: PPUSH
5211: LD_INT 80
5213: PPUSH
5214: CALL 31163 0 5
// veh := CreateVehicle ;
5218: LD_ADDR_VAR 0 10
5222: PUSH
5223: CALL_OW 45
5227: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
5228: LD_ADDR_VAR 0 3
5232: PUSH
5233: LD_VAR 0 3
5237: PPUSH
5238: LD_VAR 0 10
5242: PPUSH
5243: CALL 64343 0 2
5247: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
5248: LD_INT 0
5250: PPUSH
5251: LD_VAR 0 8
5255: PPUSH
5256: CALL_OW 383
// un := CreateHuman ;
5260: LD_ADDR_VAR 0 9
5264: PUSH
5265: CALL_OW 44
5269: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
5270: LD_ADDR_VAR 0 3
5274: PUSH
5275: LD_VAR 0 3
5279: PPUSH
5280: LD_VAR 0 9
5284: PPUSH
5285: CALL 64343 0 2
5289: ST_TO_ADDR
// end ; end ;
5290: GO 5293
5292: POP
// until strength < 3 ;
5293: LD_VAR 0 5
5297: PUSH
5298: LD_INT 3
5300: LESS
5301: IFFALSE 4655
// if not tmp then
5303: LD_VAR 0 3
5307: NOT
5308: IFFALSE 5312
// exit ;
5310: GO 6760
// americanReinforcementsTroops := americanReinforcementsTroops union tmp ;
5312: LD_ADDR_EXP 58
5316: PUSH
5317: LD_EXP 58
5321: PUSH
5322: LD_VAR 0 3
5326: UNION
5327: ST_TO_ADDR
// case path of 1 :
5328: LD_VAR 0 4
5332: PUSH
5333: LD_INT 1
5335: DOUBLE
5336: EQUAL
5337: IFTRUE 5341
5339: GO 5507
5341: POP
// begin for i in tmp do
5342: LD_ADDR_VAR 0 2
5346: PUSH
5347: LD_VAR 0 3
5351: PUSH
5352: FOR_IN
5353: IFFALSE 5503
// begin emptyVeh := UnitFilter ( americanReinforcementsTroops , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_empty ] ] ) ;
5355: LD_ADDR_VAR 0 14
5359: PUSH
5360: LD_EXP 58
5364: PPUSH
5365: LD_INT 21
5367: PUSH
5368: LD_INT 2
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PUSH
5375: LD_INT 50
5377: PUSH
5378: EMPTY
5379: LIST
5380: PUSH
5381: LD_INT 58
5383: PUSH
5384: EMPTY
5385: LIST
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: LIST
5391: PPUSH
5392: CALL_OW 72
5396: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
5397: LD_VAR 0 2
5401: PPUSH
5402: CALL_OW 257
5406: PUSH
5407: LD_INT 3
5409: EQUAL
5410: IFFALSE 5438
// begin if emptyVeh then
5412: LD_VAR 0 14
5416: IFFALSE 5438
// begin PlaceHumanInUnit ( i , emptyVeh [ 1 ] ) ;
5418: LD_VAR 0 2
5422: PPUSH
5423: LD_VAR 0 14
5427: PUSH
5428: LD_INT 1
5430: ARRAY
5431: PPUSH
5432: CALL_OW 52
// continue ;
5436: GO 5352
// end ; end ; SetDir ( i , 4 ) ;
5438: LD_VAR 0 2
5442: PPUSH
5443: LD_INT 4
5445: PPUSH
5446: CALL_OW 233
// repeat wait ( 0 0$0.3 ) ;
5450: LD_INT 10
5452: PPUSH
5453: CALL_OW 67
// until PlaceUnitArea ( i , omicronEastRefSpawnArea , false ) ;
5457: LD_VAR 0 2
5461: PPUSH
5462: LD_INT 22
5464: PPUSH
5465: LD_INT 0
5467: PPUSH
5468: CALL_OW 49
5472: IFFALSE 5450
// ComMoveXY ( i , 136 , 20 ) ;
5474: LD_VAR 0 2
5478: PPUSH
5479: LD_INT 136
5481: PPUSH
5482: LD_INT 20
5484: PPUSH
5485: CALL_OW 111
// SetTag ( i , 1 ) ;
5489: LD_VAR 0 2
5493: PPUSH
5494: LD_INT 1
5496: PPUSH
5497: CALL_OW 109
// end ;
5501: GO 5352
5503: POP
5504: POP
// end ; 2 :
5505: GO 5682
5507: LD_INT 2
5509: DOUBLE
5510: EQUAL
5511: IFTRUE 5515
5513: GO 5681
5515: POP
// begin for i in tmp do
5516: LD_ADDR_VAR 0 2
5520: PUSH
5521: LD_VAR 0 3
5525: PUSH
5526: FOR_IN
5527: IFFALSE 5677
// begin emptyVeh := UnitFilter ( americanReinforcementsTroops , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_empty ] ] ) ;
5529: LD_ADDR_VAR 0 14
5533: PUSH
5534: LD_EXP 58
5538: PPUSH
5539: LD_INT 21
5541: PUSH
5542: LD_INT 2
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: PUSH
5549: LD_INT 50
5551: PUSH
5552: EMPTY
5553: LIST
5554: PUSH
5555: LD_INT 58
5557: PUSH
5558: EMPTY
5559: LIST
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: LIST
5565: PPUSH
5566: CALL_OW 72
5570: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
5571: LD_VAR 0 2
5575: PPUSH
5576: CALL_OW 257
5580: PUSH
5581: LD_INT 3
5583: EQUAL
5584: IFFALSE 5612
// begin if emptyVeh then
5586: LD_VAR 0 14
5590: IFFALSE 5612
// begin PlaceHumanInUnit ( i , emptyVeh [ 1 ] ) ;
5592: LD_VAR 0 2
5596: PPUSH
5597: LD_VAR 0 14
5601: PUSH
5602: LD_INT 1
5604: ARRAY
5605: PPUSH
5606: CALL_OW 52
// continue ;
5610: GO 5526
// end ; end ; SetDir ( i , 0 ) ;
5612: LD_VAR 0 2
5616: PPUSH
5617: LD_INT 0
5619: PPUSH
5620: CALL_OW 233
// repeat wait ( 0 0$0.3 ) ;
5624: LD_INT 10
5626: PPUSH
5627: CALL_OW 67
// until PlaceUnitArea ( i , omicronWestRefSpawnArea , false ) ;
5631: LD_VAR 0 2
5635: PPUSH
5636: LD_INT 21
5638: PPUSH
5639: LD_INT 0
5641: PPUSH
5642: CALL_OW 49
5646: IFFALSE 5624
// ComMoveXY ( i , 95 , 143 ) ;
5648: LD_VAR 0 2
5652: PPUSH
5653: LD_INT 95
5655: PPUSH
5656: LD_INT 143
5658: PPUSH
5659: CALL_OW 111
// SetTag ( i , 1 ) ;
5663: LD_VAR 0 2
5667: PPUSH
5668: LD_INT 1
5670: PPUSH
5671: CALL_OW 109
// end ;
5675: GO 5526
5677: POP
5678: POP
// end ; end ;
5679: GO 5682
5681: POP
// repeat wait ( 0 0$1 ) ;
5682: LD_INT 35
5684: PPUSH
5685: CALL_OW 67
// for i in tmp do
5689: LD_ADDR_VAR 0 2
5693: PUSH
5694: LD_VAR 0 3
5698: PUSH
5699: FOR_IN
5700: IFFALSE 6751
// begin tag := GetTag ( i ) ;
5702: LD_ADDR_VAR 0 12
5706: PUSH
5707: LD_VAR 0 2
5711: PPUSH
5712: CALL_OW 110
5716: ST_TO_ADDR
// if IsInArea ( i , omicronBaseArea ) then
5717: LD_VAR 0 2
5721: PPUSH
5722: LD_INT 18
5724: PPUSH
5725: CALL_OW 308
5729: IFFALSE 6121
// begin americanReinforcementsTroops := americanReinforcementsTroops diff i ;
5731: LD_ADDR_EXP 58
5735: PUSH
5736: LD_EXP 58
5740: PUSH
5741: LD_VAR 0 2
5745: DIFF
5746: ST_TO_ADDR
// tmp := tmp diff i ;
5747: LD_ADDR_VAR 0 3
5751: PUSH
5752: LD_VAR 0 3
5756: PUSH
5757: LD_VAR 0 2
5761: DIFF
5762: ST_TO_ADDR
// SetSide ( i , 1 ) ;
5763: LD_VAR 0 2
5767: PPUSH
5768: LD_INT 1
5770: PPUSH
5771: CALL_OW 235
// if GetType ( i ) = unit_human then
5775: LD_VAR 0 2
5779: PPUSH
5780: CALL_OW 247
5784: PUSH
5785: LD_INT 1
5787: EQUAL
5788: IFFALSE 5994
// begin SetLives ( i , 1000 ) ;
5790: LD_VAR 0 2
5794: PPUSH
5795: LD_INT 1000
5797: PPUSH
5798: CALL_OW 234
// if GetClass ( i ) = class_engineer then
5802: LD_VAR 0 2
5806: PPUSH
5807: CALL_OW 257
5811: PUSH
5812: LD_INT 2
5814: EQUAL
5815: IFFALSE 5854
// if UnitFilter ( omicronTroops , [ f_class , class_engineer ] ) > 4 then
5817: LD_EXP 57
5821: PPUSH
5822: LD_INT 25
5824: PUSH
5825: LD_INT 2
5827: PUSH
5828: EMPTY
5829: LIST
5830: LIST
5831: PPUSH
5832: CALL_OW 72
5836: PUSH
5837: LD_INT 4
5839: GREATER
5840: IFFALSE 5854
// SetClass ( i , class_soldier ) ;
5842: LD_VAR 0 2
5846: PPUSH
5847: LD_INT 1
5849: PPUSH
5850: CALL_OW 336
// if GetClass ( i ) = class_scientistic then
5854: LD_VAR 0 2
5858: PPUSH
5859: CALL_OW 257
5863: PUSH
5864: LD_INT 4
5866: EQUAL
5867: IFFALSE 5906
// if UnitFilter ( omicronTroops , [ f_class , class_scientistic ] ) > 3 then
5869: LD_EXP 57
5873: PPUSH
5874: LD_INT 25
5876: PUSH
5877: LD_INT 4
5879: PUSH
5880: EMPTY
5881: LIST
5882: LIST
5883: PPUSH
5884: CALL_OW 72
5888: PUSH
5889: LD_INT 3
5891: GREATER
5892: IFFALSE 5906
// SetClass ( i , class_soldier ) ;
5894: LD_VAR 0 2
5898: PPUSH
5899: LD_INT 1
5901: PPUSH
5902: CALL_OW 336
// if GetClass ( i ) = class_mechanic then
5906: LD_VAR 0 2
5910: PPUSH
5911: CALL_OW 257
5915: PUSH
5916: LD_INT 3
5918: EQUAL
5919: IFFALSE 5960
// begin if IsInUnit ( i ) then
5921: LD_VAR 0 2
5925: PPUSH
5926: CALL_OW 310
5930: IFFALSE 5946
// SetTag ( i , tMech ) else
5932: LD_VAR 0 2
5936: PPUSH
5937: LD_INT 7
5939: PPUSH
5940: CALL_OW 109
5944: GO 5958
// SetTag ( i , 0 ) end else
5946: LD_VAR 0 2
5950: PPUSH
5951: LD_INT 0
5953: PPUSH
5954: CALL_OW 109
5958: GO 5972
// SetTag ( i , 0 ) ;
5960: LD_VAR 0 2
5964: PPUSH
5965: LD_INT 0
5967: PPUSH
5968: CALL_OW 109
// omicronTroops := Join ( omicronTroops , i ) ;
5972: LD_ADDR_EXP 57
5976: PUSH
5977: LD_EXP 57
5981: PPUSH
5982: LD_VAR 0 2
5986: PPUSH
5987: CALL 64343 0 2
5991: ST_TO_ADDR
// end else
5992: GO 6099
// if omicronVehicles < 3 then
5994: LD_EXP 59
5998: PUSH
5999: LD_INT 3
6001: LESS
6002: IFFALSE 6067
// begin omicronVehicles := Join ( omicronVehicles , i ) ;
6004: LD_ADDR_EXP 59
6008: PUSH
6009: LD_EXP 59
6013: PPUSH
6014: LD_VAR 0 2
6018: PPUSH
6019: CALL 64343 0 2
6023: ST_TO_ADDR
// if GetLives ( i ) < 1000 then
6024: LD_VAR 0 2
6028: PPUSH
6029: CALL_OW 256
6033: PUSH
6034: LD_INT 1000
6036: LESS
6037: IFFALSE 6053
// SetTag ( i , tVehRepair ) else
6039: LD_VAR 0 2
6043: PPUSH
6044: LD_INT 9
6046: PPUSH
6047: CALL_OW 109
6051: GO 6065
// SetTag ( i , 0 ) ;
6053: LD_VAR 0 2
6057: PPUSH
6058: LD_INT 0
6060: PPUSH
6061: CALL_OW 109
// end else
6065: GO 6099
// begin omicronAttackVehicles := Join ( omicronAttackVehicles , i ) ;
6067: LD_ADDR_EXP 60
6071: PUSH
6072: LD_EXP 60
6076: PPUSH
6077: LD_VAR 0 2
6081: PPUSH
6082: CALL 64343 0 2
6086: ST_TO_ADDR
// SetTag ( i , 0 ) ;
6087: LD_VAR 0 2
6091: PPUSH
6092: LD_INT 0
6094: PPUSH
6095: CALL_OW 109
// end ; joinToOmicronCounter := Join ( joinToOmicronCounter , i ) ;
6099: LD_ADDR_EXP 28
6103: PUSH
6104: LD_EXP 28
6108: PPUSH
6109: LD_VAR 0 2
6113: PPUSH
6114: CALL 64343 0 2
6118: ST_TO_ADDR
// continue ;
6119: GO 5699
// end ; if IsDead ( i ) then
6121: LD_VAR 0 2
6125: PPUSH
6126: CALL_OW 301
6130: IFFALSE 6150
// begin tmp := tmp diff i ;
6132: LD_ADDR_VAR 0 3
6136: PUSH
6137: LD_VAR 0 3
6141: PUSH
6142: LD_VAR 0 2
6146: DIFF
6147: ST_TO_ADDR
// continue ;
6148: GO 5699
// end ; if GetDistUnitXY ( i , coords [ tag ] [ 1 ] , coords [ tag ] [ 2 ] ) < 6 then
6150: LD_VAR 0 2
6154: PPUSH
6155: LD_VAR 0 11
6159: PUSH
6160: LD_VAR 0 12
6164: ARRAY
6165: PUSH
6166: LD_INT 1
6168: ARRAY
6169: PPUSH
6170: LD_VAR 0 11
6174: PUSH
6175: LD_VAR 0 12
6179: ARRAY
6180: PUSH
6181: LD_INT 2
6183: ARRAY
6184: PPUSH
6185: CALL_OW 297
6189: PUSH
6190: LD_INT 6
6192: LESS
6193: IFFALSE 6213
// SetTag ( i , tag + 1 ) ;
6195: LD_VAR 0 2
6199: PPUSH
6200: LD_VAR 0 12
6204: PUSH
6205: LD_INT 1
6207: PLUS
6208: PPUSH
6209: CALL_OW 109
// if GetClass ( i ) = class_soldier then
6213: LD_VAR 0 2
6217: PPUSH
6218: CALL_OW 257
6222: PUSH
6223: LD_INT 1
6225: EQUAL
6226: IFFALSE 6325
// begin if GetLives ( i ) < 500 then
6228: LD_VAR 0 2
6232: PPUSH
6233: CALL_OW 256
6237: PUSH
6238: LD_INT 500
6240: LESS
6241: IFFALSE 6284
// begin ComMoveXY ( i , coords [ tag ] [ 1 ] , coords [ tag ] [ 2 ] ) ;
6243: LD_VAR 0 2
6247: PPUSH
6248: LD_VAR 0 11
6252: PUSH
6253: LD_VAR 0 12
6257: ARRAY
6258: PUSH
6259: LD_INT 1
6261: ARRAY
6262: PPUSH
6263: LD_VAR 0 11
6267: PUSH
6268: LD_VAR 0 12
6272: ARRAY
6273: PUSH
6274: LD_INT 2
6276: ARRAY
6277: PPUSH
6278: CALL_OW 111
// continue ;
6282: GO 5699
// end ; ComAgressiveMove ( i , coords [ tag ] [ 1 ] , coords [ tag ] [ 2 ] ) ;
6284: LD_VAR 0 2
6288: PPUSH
6289: LD_VAR 0 11
6293: PUSH
6294: LD_VAR 0 12
6298: ARRAY
6299: PUSH
6300: LD_INT 1
6302: ARRAY
6303: PPUSH
6304: LD_VAR 0 11
6308: PUSH
6309: LD_VAR 0 12
6313: ARRAY
6314: PUSH
6315: LD_INT 2
6317: ARRAY
6318: PPUSH
6319: CALL_OW 114
// continue ;
6323: GO 5699
// end ; if GetClass ( i ) = class_scientistic then
6325: LD_VAR 0 2
6329: PPUSH
6330: CALL_OW 257
6334: PUSH
6335: LD_INT 4
6337: EQUAL
6338: IFFALSE 6538
// begin if GetLives ( i ) < 500 then
6340: LD_VAR 0 2
6344: PPUSH
6345: CALL_OW 256
6349: PUSH
6350: LD_INT 500
6352: LESS
6353: IFFALSE 6396
// begin ComMoveXY ( i , coords [ tag ] [ 1 ] , coords [ tag ] [ 2 ] ) ;
6355: LD_VAR 0 2
6359: PPUSH
6360: LD_VAR 0 11
6364: PUSH
6365: LD_VAR 0 12
6369: ARRAY
6370: PUSH
6371: LD_INT 1
6373: ARRAY
6374: PPUSH
6375: LD_VAR 0 11
6379: PUSH
6380: LD_VAR 0 12
6384: ARRAY
6385: PUSH
6386: LD_INT 2
6388: ARRAY
6389: PPUSH
6390: CALL_OW 111
// continue ;
6394: GO 5699
// end ; hurt := UnitFilter ( tmp , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 8 ] , [ f_not , [ f_driving ] ] ] ) ;
6396: LD_ADDR_VAR 0 13
6400: PUSH
6401: LD_VAR 0 3
6405: PPUSH
6406: LD_INT 21
6408: PUSH
6409: LD_INT 1
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PUSH
6416: LD_INT 3
6418: PUSH
6419: LD_INT 24
6421: PUSH
6422: LD_INT 1000
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 91
6435: PUSH
6436: LD_VAR 0 2
6440: PUSH
6441: LD_INT 8
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 3
6451: PUSH
6452: LD_INT 55
6454: PUSH
6455: EMPTY
6456: LIST
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: PPUSH
6468: CALL_OW 72
6472: ST_TO_ADDR
// if hurt then
6473: LD_VAR 0 13
6477: IFFALSE 6499
// begin ComHeal ( i , hurt [ 1 ] ) ;
6479: LD_VAR 0 2
6483: PPUSH
6484: LD_VAR 0 13
6488: PUSH
6489: LD_INT 1
6491: ARRAY
6492: PPUSH
6493: CALL_OW 128
// continue ;
6497: GO 5699
// end ; ComMoveXY ( i , coords [ tag ] [ 1 ] , coords [ tag ] [ 2 ] ) ;
6499: LD_VAR 0 2
6503: PPUSH
6504: LD_VAR 0 11
6508: PUSH
6509: LD_VAR 0 12
6513: ARRAY
6514: PUSH
6515: LD_INT 1
6517: ARRAY
6518: PPUSH
6519: LD_VAR 0 11
6523: PUSH
6524: LD_VAR 0 12
6528: ARRAY
6529: PUSH
6530: LD_INT 2
6532: ARRAY
6533: PPUSH
6534: CALL_OW 111
// end ; if GetClass ( i ) = class_engineer then
6538: LD_VAR 0 2
6542: PPUSH
6543: CALL_OW 257
6547: PUSH
6548: LD_INT 2
6550: EQUAL
6551: IFFALSE 6594
// begin ComMoveXY ( i , coords [ tag ] [ 1 ] , coords [ tag ] [ 2 ] ) ;
6553: LD_VAR 0 2
6557: PPUSH
6558: LD_VAR 0 11
6562: PUSH
6563: LD_VAR 0 12
6567: ARRAY
6568: PUSH
6569: LD_INT 1
6571: ARRAY
6572: PPUSH
6573: LD_VAR 0 11
6577: PUSH
6578: LD_VAR 0 12
6582: ARRAY
6583: PUSH
6584: LD_INT 2
6586: ARRAY
6587: PPUSH
6588: CALL_OW 111
// continue ;
6592: GO 5699
// end ; if GetClass ( i ) = class_mechanic then
6594: LD_VAR 0 2
6598: PPUSH
6599: CALL_OW 257
6603: PUSH
6604: LD_INT 3
6606: EQUAL
6607: IFFALSE 6639
// begin if IsInUnit ( i ) then
6609: LD_VAR 0 2
6613: PPUSH
6614: CALL_OW 310
6618: IFFALSE 6622
// continue ;
6620: GO 5699
// ComMoveXY ( i , 30 , 38 ) ;
6622: LD_VAR 0 2
6626: PPUSH
6627: LD_INT 30
6629: PPUSH
6630: LD_INT 38
6632: PPUSH
6633: CALL_OW 111
// continue ;
6637: GO 5699
// end ; if GetType ( i ) = unit_vehicle then
6639: LD_VAR 0 2
6643: PPUSH
6644: CALL_OW 247
6648: PUSH
6649: LD_INT 2
6651: EQUAL
6652: IFFALSE 6749
// begin if GetLives ( i ) < 500 then
6654: LD_VAR 0 2
6658: PPUSH
6659: CALL_OW 256
6663: PUSH
6664: LD_INT 500
6666: LESS
6667: IFFALSE 6710
// begin ComMoveXY ( i , coords [ tag ] [ 1 ] , coords [ tag ] [ 2 ] ) ;
6669: LD_VAR 0 2
6673: PPUSH
6674: LD_VAR 0 11
6678: PUSH
6679: LD_VAR 0 12
6683: ARRAY
6684: PUSH
6685: LD_INT 1
6687: ARRAY
6688: PPUSH
6689: LD_VAR 0 11
6693: PUSH
6694: LD_VAR 0 12
6698: ARRAY
6699: PUSH
6700: LD_INT 2
6702: ARRAY
6703: PPUSH
6704: CALL_OW 111
// continue ;
6708: GO 5699
// end ; ComAgressiveMove ( i , coords [ tag ] [ 1 ] , coords [ tag ] [ 2 ] ) ;
6710: LD_VAR 0 2
6714: PPUSH
6715: LD_VAR 0 11
6719: PUSH
6720: LD_VAR 0 12
6724: ARRAY
6725: PUSH
6726: LD_INT 1
6728: ARRAY
6729: PPUSH
6730: LD_VAR 0 11
6734: PUSH
6735: LD_VAR 0 12
6739: ARRAY
6740: PUSH
6741: LD_INT 2
6743: ARRAY
6744: PPUSH
6745: CALL_OW 114
// end ; end ;
6749: GO 5699
6751: POP
6752: POP
// until not tmp ;
6753: LD_VAR 0 3
6757: NOT
6758: IFFALSE 5682
// end ;
6760: LD_VAR 0 1
6764: RET
// every 0 0$10 trigger not americanRetreat and IsOk ( usFac ) and not omicronConstructList and UnitsInside ( usFac ) and BuildingStatus ( usFac ) = bs_idle and GetSide ( usFac ) = 1 do var chassis , weapon ;
6765: LD_EXP 26
6769: NOT
6770: IFFALSE 6781
6772: PUSH
6773: LD_INT 291
6775: PPUSH
6776: CALL_OW 302
6780: AND
6781: IFFALSE 6790
6783: PUSH
6784: LD_EXP 62
6788: NOT
6789: AND
6790: IFFALSE 6801
6792: PUSH
6793: LD_INT 291
6795: PPUSH
6796: CALL_OW 313
6800: AND
6801: IFFALSE 6816
6803: PUSH
6804: LD_INT 291
6806: PPUSH
6807: CALL_OW 461
6811: PUSH
6812: LD_INT 2
6814: EQUAL
6815: AND
6816: IFFALSE 6831
6818: PUSH
6819: LD_INT 291
6821: PPUSH
6822: CALL_OW 255
6826: PUSH
6827: LD_INT 1
6829: EQUAL
6830: AND
6831: IFFALSE 6976
6833: GO 6835
6835: DISABLE
6836: LD_INT 0
6838: PPUSH
6839: PPUSH
// begin chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
6840: LD_ADDR_VAR 0 1
6844: PUSH
6845: LD_INT 3
6847: PUSH
6848: LD_INT 2
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: PUSH
6855: LD_INT 1
6857: PPUSH
6858: LD_INT 2
6860: PPUSH
6861: CALL_OW 12
6865: ARRAY
6866: ST_TO_ADDR
// if Difficulty > 2 then
6867: LD_OWVAR 67
6871: PUSH
6872: LD_INT 2
6874: GREATER
6875: IFFALSE 6914
// weapon := [ us_light_gun , us_gatling_gun , us_machine_gun , us_double_gun ] [ rand ( 1 , 4 ) ] else
6877: LD_ADDR_VAR 0 2
6881: PUSH
6882: LD_INT 3
6884: PUSH
6885: LD_INT 4
6887: PUSH
6888: LD_INT 2
6890: PUSH
6891: LD_INT 5
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: PUSH
6900: LD_INT 1
6902: PPUSH
6903: LD_INT 4
6905: PPUSH
6906: CALL_OW 12
6910: ARRAY
6911: ST_TO_ADDR
6912: GO 6945
// weapon := [ us_light_gun , us_gatling_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] ;
6914: LD_ADDR_VAR 0 2
6918: PUSH
6919: LD_INT 3
6921: PUSH
6922: LD_INT 4
6924: PUSH
6925: LD_INT 2
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 1
6935: PPUSH
6936: LD_INT 3
6938: PPUSH
6939: CALL_OW 12
6943: ARRAY
6944: ST_TO_ADDR
// omicronConstructList := [ [ chassis , engine_combustion , control_manual , weapon ] ] ;
6945: LD_ADDR_EXP 62
6949: PUSH
6950: LD_VAR 0 1
6954: PUSH
6955: LD_INT 1
6957: PUSH
6958: LD_INT 1
6960: PUSH
6961: LD_VAR 0 2
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: PUSH
6972: EMPTY
6973: LIST
6974: ST_TO_ADDR
// enable ;
6975: ENABLE
// end ;
6976: PPOPN 2
6978: END
// every 0 0$2 trigger americanRetreat do var i , tmp ;
6979: LD_EXP 26
6983: IFFALSE 7210
6985: GO 6987
6987: DISABLE
6988: LD_INT 0
6990: PPUSH
6991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
6992: LD_ADDR_VAR 0 2
6996: PUSH
6997: LD_INT 2
6999: PUSH
7000: LD_INT 22
7002: PUSH
7003: LD_INT 1
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: LD_INT 22
7012: PUSH
7013: LD_INT 4
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: LIST
7024: PUSH
7025: LD_INT 21
7027: PUSH
7028: LD_INT 1
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: PUSH
7035: LD_INT 50
7037: PUSH
7038: EMPTY
7039: LIST
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: LIST
7045: PPUSH
7046: CALL_OW 69
7050: ST_TO_ADDR
// if not tmp then
7051: LD_VAR 0 2
7055: NOT
7056: IFFALSE 7060
// exit ;
7058: GO 7210
// repeat for i in tmp do
7060: LD_ADDR_VAR 0 1
7064: PUSH
7065: LD_VAR 0 2
7069: PUSH
7070: FOR_IN
7071: IFFALSE 7135
// begin if IsInUnit ( i ) then
7073: LD_VAR 0 1
7077: PPUSH
7078: CALL_OW 310
7082: IFFALSE 7095
// ComExit ( i ) else
7084: LD_VAR 0 1
7088: PPUSH
7089: CALL 64741 0 1
7093: GO 7133
// if not IsInArea ( i , americanRetreatArea ) then
7095: LD_VAR 0 1
7099: PPUSH
7100: LD_INT 26
7102: PPUSH
7103: CALL_OW 308
7107: NOT
7108: IFFALSE 7124
// ComMoveToArea ( i , americanRetreatArea ) else
7110: LD_VAR 0 1
7114: PPUSH
7115: LD_INT 26
7117: PPUSH
7118: CALL_OW 113
7122: GO 7133
// RemoveUnit ( i ) ;
7124: LD_VAR 0 1
7128: PPUSH
7129: CALL_OW 64
// end ;
7133: GO 7070
7135: POP
7136: POP
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
7137: LD_ADDR_VAR 0 2
7141: PUSH
7142: LD_INT 2
7144: PUSH
7145: LD_INT 22
7147: PUSH
7148: LD_INT 1
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: PUSH
7155: LD_INT 22
7157: PUSH
7158: LD_INT 4
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 21
7172: PUSH
7173: LD_INT 1
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: LD_INT 50
7182: PUSH
7183: EMPTY
7184: LIST
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: LIST
7190: PPUSH
7191: CALL_OW 69
7195: ST_TO_ADDR
// wait ( 0 0$1 ) ;
7196: LD_INT 35
7198: PPUSH
7199: CALL_OW 67
// until not tmp ;
7203: LD_VAR 0 2
7207: NOT
7208: IFFALSE 7060
// end ;
7210: PPOPN 2
7212: END
// every 0 0$1 trigger omicronAttackVehicles do var i , mech , enemy ;
7213: LD_EXP 60
7217: IFFALSE 7780
7219: GO 7221
7221: DISABLE
7222: LD_INT 0
7224: PPUSH
7225: PPUSH
7226: PPUSH
// begin enable ;
7227: ENABLE
// if not omicronAttackVehicles then
7228: LD_EXP 60
7232: NOT
7233: IFFALSE 7237
// exit ;
7235: GO 7780
// for i in omicronAttackVehicles do
7237: LD_ADDR_VAR 0 1
7241: PUSH
7242: LD_EXP 60
7246: PUSH
7247: FOR_IN
7248: IFFALSE 7778
// begin if not IsOk ( i ) or GetSide ( i ) <> 1 then
7250: LD_VAR 0 1
7254: PPUSH
7255: CALL_OW 302
7259: NOT
7260: IFTRUE 7277
7262: PUSH
7263: LD_VAR 0 1
7267: PPUSH
7268: CALL_OW 255
7272: PUSH
7273: LD_INT 1
7275: NONEQUAL
7276: OR
7277: IFFALSE 7297
// begin omicronAttackVehicles := omicronAttackVehicles diff i ;
7279: LD_ADDR_EXP 60
7283: PUSH
7284: LD_EXP 60
7288: PUSH
7289: LD_VAR 0 1
7293: DIFF
7294: ST_TO_ADDR
// continue ;
7295: GO 7247
// end ; if GetTag ( i ) = 300 then
7297: LD_VAR 0 1
7301: PPUSH
7302: CALL_OW 110
7306: PUSH
7307: LD_INT 300
7309: EQUAL
7310: IFFALSE 7425
// begin if GetFuel ( i ) < 50 then
7312: LD_VAR 0 1
7316: PPUSH
7317: CALL_OW 261
7321: PUSH
7322: LD_INT 50
7324: LESS
7325: IFFALSE 7384
// begin ComMoveXY ( i , 24 , 36 ) ;
7327: LD_VAR 0 1
7331: PPUSH
7332: LD_INT 24
7334: PPUSH
7335: LD_INT 36
7337: PPUSH
7338: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7342: LD_INT 35
7344: PPUSH
7345: CALL_OW 67
// until GetDistUnitXY ( i , 24 , 36 ) < 4 ;
7349: LD_VAR 0 1
7353: PPUSH
7354: LD_INT 24
7356: PPUSH
7357: LD_INT 36
7359: PPUSH
7360: CALL_OW 297
7364: PUSH
7365: LD_INT 4
7367: LESS
7368: IFFALSE 7342
// SetFuel ( i , 100 ) ;
7370: LD_VAR 0 1
7374: PPUSH
7375: LD_INT 100
7377: PPUSH
7378: CALL_OW 240
// end else
7382: GO 7425
// if not IsInArea ( i , omicronParkingArea ) then
7384: LD_VAR 0 1
7388: PPUSH
7389: LD_INT 28
7391: PPUSH
7392: CALL_OW 308
7396: NOT
7397: IFFALSE 7413
// ComMoveToArea ( i , omicronParkingArea ) else
7399: LD_VAR 0 1
7403: PPUSH
7404: LD_INT 28
7406: PPUSH
7407: CALL_OW 113
7411: GO 7425
// SetTag ( i , 301 ) ;
7413: LD_VAR 0 1
7417: PPUSH
7418: LD_INT 301
7420: PPUSH
7421: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
7425: LD_VAR 0 1
7429: PPUSH
7430: CALL_OW 110
7434: PUSH
7435: LD_INT 301
7437: EQUAL
7438: IFFALSE 7580
// begin if GetLives ( i ) < 1000 then
7440: LD_VAR 0 1
7444: PPUSH
7445: CALL_OW 256
7449: PUSH
7450: LD_INT 1000
7452: LESS
7453: IFFALSE 7557
// begin if not IsDrivenBy ( i ) then
7455: LD_VAR 0 1
7459: PPUSH
7460: CALL_OW 311
7464: NOT
7465: IFFALSE 7469
// continue ;
7467: GO 7247
// mech := IsDrivenBy ( i ) ;
7469: LD_ADDR_VAR 0 2
7473: PUSH
7474: LD_VAR 0 1
7478: PPUSH
7479: CALL_OW 311
7483: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
7484: LD_VAR 0 2
7488: PPUSH
7489: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
7493: LD_VAR 0 2
7497: PPUSH
7498: LD_VAR 0 1
7502: PPUSH
7503: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
7507: LD_INT 35
7509: PPUSH
7510: CALL_OW 67
// until GetLives ( i ) = 1000 ;
7514: LD_VAR 0 1
7518: PPUSH
7519: CALL_OW 256
7523: PUSH
7524: LD_INT 1000
7526: EQUAL
7527: IFFALSE 7507
// SetLives ( mech , 1000 ) ;
7529: LD_VAR 0 2
7533: PPUSH
7534: LD_INT 1000
7536: PPUSH
7537: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
7541: LD_VAR 0 2
7545: PPUSH
7546: LD_VAR 0 1
7550: PPUSH
7551: CALL_OW 120
// end else
7555: GO 7580
// if IsDrivenBy ( i ) then
7557: LD_VAR 0 1
7561: PPUSH
7562: CALL_OW 311
7566: IFFALSE 7580
// SetTag ( i , 0 ) ;
7568: LD_VAR 0 1
7572: PPUSH
7573: LD_INT 0
7575: PPUSH
7576: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
7580: LD_VAR 0 1
7584: PPUSH
7585: CALL_OW 110
7589: PUSH
7590: LD_INT 300
7592: LESS
7593: IFFALSE 7776
// begin enemy := FilterUnitsInArea ( omicronBaseArea , [ f_enemy , 1 ] ) ;
7595: LD_ADDR_VAR 0 3
7599: PUSH
7600: LD_INT 18
7602: PPUSH
7603: LD_INT 81
7605: PUSH
7606: LD_INT 1
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PPUSH
7613: CALL_OW 70
7617: ST_TO_ADDR
// if GetLives ( i ) < 650 then
7618: LD_VAR 0 1
7622: PPUSH
7623: CALL_OW 256
7627: PUSH
7628: LD_INT 650
7630: LESS
7631: IFFALSE 7656
// begin ComStop ( i ) ;
7633: LD_VAR 0 1
7637: PPUSH
7638: CALL_OW 141
// SetTag ( i , 300 ) ;
7642: LD_VAR 0 1
7646: PPUSH
7647: LD_INT 300
7649: PPUSH
7650: CALL_OW 109
// continue ;
7654: GO 7247
// end ; if enemy then
7656: LD_VAR 0 3
7660: IFFALSE 7700
// begin if not HasTask ( i ) then
7662: LD_VAR 0 1
7666: PPUSH
7667: CALL_OW 314
7671: NOT
7672: IFFALSE 7698
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7674: LD_VAR 0 1
7678: PPUSH
7679: LD_VAR 0 3
7683: PPUSH
7684: LD_VAR 0 1
7688: PPUSH
7689: CALL_OW 74
7693: PPUSH
7694: CALL_OW 115
// end else
7698: GO 7776
// if omicronAttackVehicles then
7700: LD_EXP 60
7704: IFFALSE 7776
// begin enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
7706: LD_ADDR_VAR 0 3
7710: PUSH
7711: LD_INT 81
7713: PUSH
7714: LD_INT 1
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PPUSH
7721: CALL_OW 69
7725: ST_TO_ADDR
// if enemy then
7726: LD_VAR 0 3
7730: IFFALSE 7776
// AgressiveMove ( i , [ [ 49 , 43 ] , [ 63 , 56 ] , [ 72 , 67 ] ] ) ;
7732: LD_VAR 0 1
7736: PPUSH
7737: LD_INT 49
7739: PUSH
7740: LD_INT 43
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: LD_INT 63
7749: PUSH
7750: LD_INT 56
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: LD_INT 72
7759: PUSH
7760: LD_INT 67
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: PPUSH
7772: CALL 67109 0 2
// end ; end ; end ;
7776: GO 7247
7778: POP
7779: POP
// end ;
7780: PPOPN 3
7782: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
7783: LD_INT 22
7785: PUSH
7786: LD_INT 1
7788: PUSH
7789: EMPTY
7790: LIST
7791: LIST
7792: PUSH
7793: LD_INT 32
7795: PUSH
7796: LD_INT 1
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: PPUSH
7807: CALL_OW 69
7811: IFFALSE 7888
7813: GO 7815
7815: DISABLE
7816: LD_INT 0
7818: PPUSH
// begin enable ;
7819: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
7820: LD_ADDR_VAR 0 1
7824: PUSH
7825: LD_INT 22
7827: PUSH
7828: LD_INT 1
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 32
7837: PUSH
7838: LD_INT 1
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PPUSH
7849: CALL_OW 69
7853: PUSH
7854: FOR_IN
7855: IFFALSE 7886
// if GetFuel ( i ) < 3 then
7857: LD_VAR 0 1
7861: PPUSH
7862: CALL_OW 261
7866: PUSH
7867: LD_INT 3
7869: LESS
7870: IFFALSE 7884
// SetFuel ( i , 3 ) ;
7872: LD_VAR 0 1
7876: PPUSH
7877: LD_INT 3
7879: PPUSH
7880: CALL_OW 240
7884: GO 7854
7886: POP
7887: POP
// end ;
7888: PPOPN 1
7890: END
// every 0 0$2 trigger joinToOmicronCounter > 2 do
7891: LD_EXP 28
7895: PUSH
7896: LD_INT 2
7898: GREATER
7899: IFFALSE 7936
7901: GO 7903
7903: DISABLE
// omicronBuildingsToBuild := omicronBuildingsToBuild ^ [ [ b_breastwork , 23 , 5 , 4 ] ] ;
7904: LD_ADDR_EXP 63
7908: PUSH
7909: LD_EXP 63
7913: PUSH
7914: LD_INT 31
7916: PUSH
7917: LD_INT 23
7919: PUSH
7920: LD_INT 5
7922: PUSH
7923: LD_INT 4
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: PUSH
7932: EMPTY
7933: LIST
7934: ADD
7935: ST_TO_ADDR
7936: END
// every 0 0$2 trigger joinToOmicronCounter > 6 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) > 12 do
7937: LD_EXP 28
7941: PUSH
7942: LD_INT 6
7944: GREATER
7945: IFFALSE 7981
7947: PUSH
7948: LD_INT 22
7950: PUSH
7951: LD_INT 1
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: PUSH
7958: LD_INT 25
7960: PUSH
7961: LD_INT 1
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: PPUSH
7972: CALL_OW 69
7976: PUSH
7977: LD_INT 12
7979: GREATER
7980: AND
7981: IFFALSE 8018
7983: GO 7985
7985: DISABLE
// omicronBuildingsToBuild := omicronBuildingsToBuild ^ [ [ b_armoury , 22 , 14 , 3 ] ] ; end_of_file
7986: LD_ADDR_EXP 63
7990: PUSH
7991: LD_EXP 63
7995: PUSH
7996: LD_INT 4
7998: PUSH
7999: LD_INT 22
8001: PUSH
8002: LD_INT 14
8004: PUSH
8005: LD_INT 3
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: PUSH
8014: EMPTY
8015: LIST
8016: ADD
8017: ST_TO_ADDR
8018: END
// export arForces ; export function SpawnArabAttack ; var i , un , veh ; begin
8019: LD_INT 0
8021: PPUSH
8022: PPUSH
8023: PPUSH
8024: PPUSH
// for i := 1 to 8 do
8025: LD_ADDR_VAR 0 2
8029: PUSH
8030: DOUBLE
8031: LD_INT 1
8033: DEC
8034: ST_TO_ADDR
8035: LD_INT 8
8037: PUSH
8038: FOR_TO
8039: IFFALSE 8155
// begin uc_side := 2 ;
8041: LD_ADDR_OWVAR 20
8045: PUSH
8046: LD_INT 2
8048: ST_TO_ADDR
// uc_nation := nation_arabian ;
8049: LD_ADDR_OWVAR 21
8053: PUSH
8054: LD_INT 2
8056: ST_TO_ADDR
// PrepareSoldier ( false , 6 ) ;
8057: LD_INT 0
8059: PPUSH
8060: LD_INT 6
8062: PPUSH
8063: CALL_OW 381
// un := CreateHuman ;
8067: LD_ADDR_VAR 0 3
8071: PUSH
8072: CALL_OW 44
8076: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
8077: LD_ADDR_EXP 64
8081: PUSH
8082: LD_EXP 64
8086: PPUSH
8087: LD_VAR 0 3
8091: PPUSH
8092: CALL 64343 0 2
8096: ST_TO_ADDR
// PlaceUnitArea ( un , arabSouthSpawnArea , false ) ;
8097: LD_VAR 0 3
8101: PPUSH
8102: LD_INT 30
8104: PPUSH
8105: LD_INT 0
8107: PPUSH
8108: CALL_OW 49
// ComAgressiveMove ( un , 164 , 108 ) ;
8112: LD_VAR 0 3
8116: PPUSH
8117: LD_INT 164
8119: PPUSH
8120: LD_INT 108
8122: PPUSH
8123: CALL_OW 114
// if i mod 2 = 0 then
8127: LD_VAR 0 2
8131: PUSH
8132: LD_INT 2
8134: MOD
8135: PUSH
8136: LD_INT 0
8138: EQUAL
8139: IFFALSE 8153
// SetTag ( i , tMine ) ;
8141: LD_VAR 0 2
8145: PPUSH
8146: LD_INT 6
8148: PPUSH
8149: CALL_OW 109
// end ;
8153: GO 8038
8155: POP
8156: POP
// for i := 1 to 6 do
8157: LD_ADDR_VAR 0 2
8161: PUSH
8162: DOUBLE
8163: LD_INT 1
8165: DEC
8166: ST_TO_ADDR
8167: LD_INT 6
8169: PUSH
8170: FOR_TO
8171: IFFALSE 8345
// begin uc_side := 2 ;
8173: LD_ADDR_OWVAR 20
8177: PUSH
8178: LD_INT 2
8180: ST_TO_ADDR
// uc_nation := nation_arabian ;
8181: LD_ADDR_OWVAR 21
8185: PUSH
8186: LD_INT 2
8188: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
8189: LD_INT 14
8191: PPUSH
8192: LD_INT 1
8194: PPUSH
8195: LD_INT 1
8197: PPUSH
8198: LD_INT 26
8200: PPUSH
8201: LD_INT 100
8203: PPUSH
8204: CALL 31163 0 5
// veh := CreateVehicle ;
8208: LD_ADDR_VAR 0 4
8212: PUSH
8213: CALL_OW 45
8217: ST_TO_ADDR
// arForces := Join ( arForces , veh ) ;
8218: LD_ADDR_EXP 64
8222: PUSH
8223: LD_EXP 64
8227: PPUSH
8228: LD_VAR 0 4
8232: PPUSH
8233: CALL 64343 0 2
8237: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
8238: LD_VAR 0 4
8242: PPUSH
8243: LD_INT 4
8245: PPUSH
8246: CALL_OW 233
// repeat wait ( 0 0$0.3 ) ;
8250: LD_INT 10
8252: PPUSH
8253: CALL_OW 67
// until PlaceUnitArea ( veh , arabSpawnArea , false ) ;
8257: LD_VAR 0 4
8261: PPUSH
8262: LD_INT 29
8264: PPUSH
8265: LD_INT 0
8267: PPUSH
8268: CALL_OW 49
8272: IFFALSE 8250
// PrepareMechanic ( false , 6 ) ;
8274: LD_INT 0
8276: PPUSH
8277: LD_INT 6
8279: PPUSH
8280: CALL_OW 383
// un := CreateHuman ;
8284: LD_ADDR_VAR 0 3
8288: PUSH
8289: CALL_OW 44
8293: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
8294: LD_ADDR_EXP 64
8298: PUSH
8299: LD_EXP 64
8303: PPUSH
8304: LD_VAR 0 3
8308: PPUSH
8309: CALL 64343 0 2
8313: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8314: LD_VAR 0 3
8318: PPUSH
8319: LD_VAR 0 4
8323: PPUSH
8324: CALL_OW 52
// ComAgressiveMove ( veh , 164 , 108 ) ;
8328: LD_VAR 0 4
8332: PPUSH
8333: LD_INT 164
8335: PPUSH
8336: LD_INT 108
8338: PPUSH
8339: CALL_OW 114
// end ;
8343: GO 8170
8345: POP
8346: POP
// for i := 1 to 6 do
8347: LD_ADDR_VAR 0 2
8351: PUSH
8352: DOUBLE
8353: LD_INT 1
8355: DEC
8356: ST_TO_ADDR
8357: LD_INT 6
8359: PUSH
8360: FOR_TO
8361: IFFALSE 8554
// begin uc_side := 2 ;
8363: LD_ADDR_OWVAR 20
8367: PUSH
8368: LD_INT 2
8370: ST_TO_ADDR
// uc_nation := nation_arabian ;
8371: LD_ADDR_OWVAR 21
8375: PUSH
8376: LD_INT 2
8378: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ rand ( 1 , 2 ) ] , 100 ) ;
8379: LD_INT 13
8381: PPUSH
8382: LD_INT 1
8384: PPUSH
8385: LD_INT 1
8387: PPUSH
8388: LD_INT 27
8390: PUSH
8391: LD_INT 25
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PUSH
8398: LD_INT 1
8400: PPUSH
8401: LD_INT 2
8403: PPUSH
8404: CALL_OW 12
8408: ARRAY
8409: PPUSH
8410: LD_INT 100
8412: PPUSH
8413: CALL 31163 0 5
// veh := CreateVehicle ;
8417: LD_ADDR_VAR 0 4
8421: PUSH
8422: CALL_OW 45
8426: ST_TO_ADDR
// arForces := Join ( arForces , veh ) ;
8427: LD_ADDR_EXP 64
8431: PUSH
8432: LD_EXP 64
8436: PPUSH
8437: LD_VAR 0 4
8441: PPUSH
8442: CALL 64343 0 2
8446: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
8447: LD_VAR 0 4
8451: PPUSH
8452: LD_INT 4
8454: PPUSH
8455: CALL_OW 233
// repeat wait ( 0 0$0.3 ) ;
8459: LD_INT 10
8461: PPUSH
8462: CALL_OW 67
// until PlaceUnitArea ( veh , arabSpawnArea , false ) ;
8466: LD_VAR 0 4
8470: PPUSH
8471: LD_INT 29
8473: PPUSH
8474: LD_INT 0
8476: PPUSH
8477: CALL_OW 49
8481: IFFALSE 8459
// PrepareMechanic ( false , 6 ) ;
8483: LD_INT 0
8485: PPUSH
8486: LD_INT 6
8488: PPUSH
8489: CALL_OW 383
// un := CreateHuman ;
8493: LD_ADDR_VAR 0 3
8497: PUSH
8498: CALL_OW 44
8502: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
8503: LD_ADDR_EXP 64
8507: PUSH
8508: LD_EXP 64
8512: PPUSH
8513: LD_VAR 0 3
8517: PPUSH
8518: CALL 64343 0 2
8522: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8523: LD_VAR 0 3
8527: PPUSH
8528: LD_VAR 0 4
8532: PPUSH
8533: CALL_OW 52
// ComAgressiveMove ( veh , 164 , 108 ) ;
8537: LD_VAR 0 4
8541: PPUSH
8542: LD_INT 164
8544: PPUSH
8545: LD_INT 108
8547: PPUSH
8548: CALL_OW 114
// end ;
8552: GO 8360
8554: POP
8555: POP
// for i := 1 to 3 do
8556: LD_ADDR_VAR 0 2
8560: PUSH
8561: DOUBLE
8562: LD_INT 1
8564: DEC
8565: ST_TO_ADDR
8566: LD_INT 3
8568: PUSH
8569: FOR_TO
8570: IFFALSE 8660
// begin uc_side := 2 ;
8572: LD_ADDR_OWVAR 20
8576: PUSH
8577: LD_INT 2
8579: ST_TO_ADDR
// uc_nation := nation_arabian ;
8580: LD_ADDR_OWVAR 21
8584: PUSH
8585: LD_INT 2
8587: ST_TO_ADDR
// PrepareScientist ( false , 6 ) ;
8588: LD_INT 0
8590: PPUSH
8591: LD_INT 6
8593: PPUSH
8594: CALL_OW 384
// un := CreateHuman ;
8598: LD_ADDR_VAR 0 3
8602: PUSH
8603: CALL_OW 44
8607: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
8608: LD_ADDR_EXP 64
8612: PUSH
8613: LD_EXP 64
8617: PPUSH
8618: LD_VAR 0 3
8622: PPUSH
8623: CALL 64343 0 2
8627: ST_TO_ADDR
// PlaceUnitArea ( un , arabSouthSpawnArea , false ) ;
8628: LD_VAR 0 3
8632: PPUSH
8633: LD_INT 30
8635: PPUSH
8636: LD_INT 0
8638: PPUSH
8639: CALL_OW 49
// ComMoveXY ( un , 175 , 132 ) ;
8643: LD_VAR 0 3
8647: PPUSH
8648: LD_INT 175
8650: PPUSH
8651: LD_INT 132
8653: PPUSH
8654: CALL_OW 111
// end ;
8658: GO 8569
8660: POP
8661: POP
// end ;
8662: LD_VAR 0 1
8666: RET
// every 0 0$1 trigger arabAttackActive do var i , tag , enemy ;
8667: LD_EXP 8
8671: IFFALSE 9809
8673: GO 8675
8675: DISABLE
8676: LD_INT 0
8678: PPUSH
8679: PPUSH
8680: PPUSH
// begin repeat wait ( 0 0$1 ) ;
8681: LD_INT 35
8683: PPUSH
8684: CALL_OW 67
// enemy := FilterUnitsInArea ( kirovBaseArea , [ f_side , 6 ] ) ;
8688: LD_ADDR_VAR 0 3
8692: PUSH
8693: LD_INT 10
8695: PPUSH
8696: LD_INT 22
8698: PUSH
8699: LD_INT 6
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PPUSH
8706: CALL_OW 70
8710: ST_TO_ADDR
// for i in arForces do
8711: LD_ADDR_VAR 0 1
8715: PUSH
8716: LD_EXP 64
8720: PUSH
8721: FOR_IN
8722: IFFALSE 9207
// begin if IsDead ( i ) then
8724: LD_VAR 0 1
8728: PPUSH
8729: CALL_OW 301
8733: IFFALSE 8753
// begin arForces := arForces diff i ;
8735: LD_ADDR_EXP 64
8739: PUSH
8740: LD_EXP 64
8744: PUSH
8745: LD_VAR 0 1
8749: DIFF
8750: ST_TO_ADDR
// continue ;
8751: GO 8721
// end ; if GetClass ( i ) = class_scientistic then
8753: LD_VAR 0 1
8757: PPUSH
8758: CALL_OW 257
8762: PUSH
8763: LD_INT 4
8765: EQUAL
8766: IFFALSE 8860
// begin if GetDistUnitXY ( i , 176 , 135 ) > 10 then
8768: LD_VAR 0 1
8772: PPUSH
8773: LD_INT 176
8775: PPUSH
8776: LD_INT 135
8778: PPUSH
8779: CALL_OW 297
8783: PUSH
8784: LD_INT 10
8786: GREATER
8787: IFFALSE 8806
// ComMoveXY ( i , 176 , 135 ) else
8789: LD_VAR 0 1
8793: PPUSH
8794: LD_INT 176
8796: PPUSH
8797: LD_INT 135
8799: PPUSH
8800: CALL_OW 111
8804: GO 8860
// if UnitFilter ( arForces , [ f_tag , tHeal ] ) then
8806: LD_EXP 64
8810: PPUSH
8811: LD_INT 120
8813: PUSH
8814: LD_INT 1
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: PPUSH
8821: CALL_OW 72
8825: IFFALSE 8860
// ComHeal ( i , UnitFilter ( arForces , [ f_tag , tHeal ] ) [ 1 ] ) ;
8827: LD_VAR 0 1
8831: PPUSH
8832: LD_EXP 64
8836: PPUSH
8837: LD_INT 120
8839: PUSH
8840: LD_INT 1
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: PPUSH
8847: CALL_OW 72
8851: PUSH
8852: LD_INT 1
8854: ARRAY
8855: PPUSH
8856: CALL_OW 128
// end ; if GetClass ( i ) = class_soldier then
8860: LD_VAR 0 1
8864: PPUSH
8865: CALL_OW 257
8869: PUSH
8870: LD_INT 1
8872: EQUAL
8873: IFFALSE 9070
// begin tag := GetTag ( i ) ;
8875: LD_ADDR_VAR 0 2
8879: PUSH
8880: LD_VAR 0 1
8884: PPUSH
8885: CALL_OW 110
8889: ST_TO_ADDR
// if GetLives ( i ) < 650 and tag <> tHeal then
8890: LD_VAR 0 1
8894: PPUSH
8895: CALL_OW 256
8899: PUSH
8900: LD_INT 650
8902: LESS
8903: IFFALSE 8915
8905: PUSH
8906: LD_VAR 0 2
8910: PUSH
8911: LD_INT 1
8913: NONEQUAL
8914: AND
8915: IFFALSE 8946
// begin SetTag ( i , tHeal ) ;
8917: LD_VAR 0 1
8921: PPUSH
8922: LD_INT 1
8924: PPUSH
8925: CALL_OW 109
// ComMoveXY ( i , 176 , 135 ) ;
8929: LD_VAR 0 1
8933: PPUSH
8934: LD_INT 176
8936: PPUSH
8937: LD_INT 135
8939: PPUSH
8940: CALL_OW 111
// continue ;
8944: GO 8721
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
8946: LD_VAR 0 1
8950: PPUSH
8951: CALL_OW 256
8955: PUSH
8956: LD_INT 1000
8958: EQUAL
8959: IFFALSE 8971
8961: PUSH
8962: LD_VAR 0 2
8966: PUSH
8967: LD_INT 1
8969: EQUAL
8970: AND
8971: IFFALSE 8985
// SetTag ( i , 0 ) ;
8973: LD_VAR 0 1
8977: PPUSH
8978: LD_INT 0
8980: PPUSH
8981: CALL_OW 109
// if not tag then
8985: LD_VAR 0 2
8989: NOT
8990: IFFALSE 9018
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
8992: LD_VAR 0 1
8996: PPUSH
8997: LD_VAR 0 3
9001: PPUSH
9002: LD_VAR 0 1
9006: PPUSH
9007: CALL_OW 74
9011: PPUSH
9012: CALL_OW 115
9016: GO 9070
// if tag = tMine then
9018: LD_VAR 0 2
9022: PUSH
9023: LD_INT 6
9025: EQUAL
9026: IFFALSE 9070
// begin ComPlaceDelayedCharge ( i , 0 , 0 , NearestUnitToUnit ( enemy , i ) ) ;
9028: LD_VAR 0 1
9032: PPUSH
9033: LD_INT 0
9035: PPUSH
9036: LD_INT 0
9038: PPUSH
9039: LD_VAR 0 3
9043: PPUSH
9044: LD_VAR 0 1
9048: PPUSH
9049: CALL_OW 74
9053: PPUSH
9054: CALL_OW 132
// SetTag ( i , tMined ) ;
9058: LD_VAR 0 1
9062: PPUSH
9063: LD_INT 11
9065: PPUSH
9066: CALL_OW 109
// end ; end ; if GetClass ( i ) = class_mechanic then
9070: LD_VAR 0 1
9074: PPUSH
9075: CALL_OW 257
9079: PUSH
9080: LD_INT 3
9082: EQUAL
9083: IFFALSE 9154
// begin if IsInUnit ( i ) then
9085: LD_VAR 0 1
9089: PPUSH
9090: CALL_OW 310
9094: IFFALSE 9098
// continue ;
9096: GO 8721
// if not IsInArea ( i , arabSpawnArea ) then
9098: LD_VAR 0 1
9102: PPUSH
9103: LD_INT 29
9105: PPUSH
9106: CALL_OW 308
9110: NOT
9111: IFFALSE 9127
// ComMoveToArea ( i , arabSpawnArea ) else
9113: LD_VAR 0 1
9117: PPUSH
9118: LD_INT 29
9120: PPUSH
9121: CALL_OW 113
9125: GO 9154
// begin RemoveUnit ( i ) ;
9127: LD_VAR 0 1
9131: PPUSH
9132: CALL_OW 64
// arForces := arForces diff i ;
9136: LD_ADDR_EXP 64
9140: PUSH
9141: LD_EXP 64
9145: PUSH
9146: LD_VAR 0 1
9150: DIFF
9151: ST_TO_ADDR
// continue ;
9152: GO 8721
// end ; end ; if GetType ( i ) = unit_vehicle then
9154: LD_VAR 0 1
9158: PPUSH
9159: CALL_OW 247
9163: PUSH
9164: LD_INT 2
9166: EQUAL
9167: IFFALSE 9205
// begin if not HasTask ( i ) then
9169: LD_VAR 0 1
9173: PPUSH
9174: CALL_OW 314
9178: NOT
9179: IFFALSE 9205
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
9181: LD_VAR 0 1
9185: PPUSH
9186: LD_VAR 0 3
9190: PPUSH
9191: LD_VAR 0 1
9195: PPUSH
9196: CALL_OW 74
9200: PPUSH
9201: CALL_OW 115
// end ; end ;
9205: GO 8721
9207: POP
9208: POP
// until not enemy ;
9209: LD_VAR 0 3
9213: NOT
9214: IFFALSE 8681
// for i in arForces do
9216: LD_ADDR_VAR 0 1
9220: PUSH
9221: LD_EXP 64
9225: PUSH
9226: FOR_IN
9227: IFFALSE 9258
// if not See ( 3 , i ) then
9229: LD_INT 3
9231: PPUSH
9232: LD_VAR 0 1
9236: PPUSH
9237: CALL_OW 292
9241: NOT
9242: IFFALSE 9256
// SetLives ( i , 1000 ) ;
9244: LD_VAR 0 1
9248: PPUSH
9249: LD_INT 1000
9251: PPUSH
9252: CALL_OW 234
9256: GO 9226
9258: POP
9259: POP
// wait ( 2 2$00 - ( 0 0$10 * Difficulty ) ) ;
9260: LD_INT 4200
9262: PUSH
9263: LD_INT 350
9265: PUSH
9266: LD_OWVAR 67
9270: MUL
9271: MINUS
9272: PPUSH
9273: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9277: LD_INT 35
9279: PPUSH
9280: CALL_OW 67
// enemy := FilterAllUnits ( [ f_enemy , 2 ] ) ;
9284: LD_ADDR_VAR 0 3
9288: PUSH
9289: LD_INT 81
9291: PUSH
9292: LD_INT 2
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PPUSH
9299: CALL_OW 69
9303: ST_TO_ADDR
// for i in arForces do
9304: LD_ADDR_VAR 0 1
9308: PUSH
9309: LD_EXP 64
9313: PUSH
9314: FOR_IN
9315: IFFALSE 9800
// begin if IsDead ( i ) then
9317: LD_VAR 0 1
9321: PPUSH
9322: CALL_OW 301
9326: IFFALSE 9346
// begin arForces := arForces diff i ;
9328: LD_ADDR_EXP 64
9332: PUSH
9333: LD_EXP 64
9337: PUSH
9338: LD_VAR 0 1
9342: DIFF
9343: ST_TO_ADDR
// continue ;
9344: GO 9314
// end ; if GetClass ( i ) = class_scientistic then
9346: LD_VAR 0 1
9350: PPUSH
9351: CALL_OW 257
9355: PUSH
9356: LD_INT 4
9358: EQUAL
9359: IFFALSE 9453
// begin if GetDistUnitXY ( i , 176 , 135 ) > 10 then
9361: LD_VAR 0 1
9365: PPUSH
9366: LD_INT 176
9368: PPUSH
9369: LD_INT 135
9371: PPUSH
9372: CALL_OW 297
9376: PUSH
9377: LD_INT 10
9379: GREATER
9380: IFFALSE 9399
// ComMoveXY ( i , 176 , 135 ) else
9382: LD_VAR 0 1
9386: PPUSH
9387: LD_INT 176
9389: PPUSH
9390: LD_INT 135
9392: PPUSH
9393: CALL_OW 111
9397: GO 9453
// if UnitFilter ( arForces , [ f_tag , tHeal ] ) then
9399: LD_EXP 64
9403: PPUSH
9404: LD_INT 120
9406: PUSH
9407: LD_INT 1
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PPUSH
9414: CALL_OW 72
9418: IFFALSE 9453
// ComHeal ( i , UnitFilter ( arForces , [ f_tag , tHeal ] ) [ 1 ] ) ;
9420: LD_VAR 0 1
9424: PPUSH
9425: LD_EXP 64
9429: PPUSH
9430: LD_INT 120
9432: PUSH
9433: LD_INT 1
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: PPUSH
9440: CALL_OW 72
9444: PUSH
9445: LD_INT 1
9447: ARRAY
9448: PPUSH
9449: CALL_OW 128
// end ; if GetClass ( i ) = class_soldier then
9453: LD_VAR 0 1
9457: PPUSH
9458: CALL_OW 257
9462: PUSH
9463: LD_INT 1
9465: EQUAL
9466: IFFALSE 9663
// begin tag := GetTag ( i ) ;
9468: LD_ADDR_VAR 0 2
9472: PUSH
9473: LD_VAR 0 1
9477: PPUSH
9478: CALL_OW 110
9482: ST_TO_ADDR
// if GetLives ( i ) < 650 and tag <> tHeal then
9483: LD_VAR 0 1
9487: PPUSH
9488: CALL_OW 256
9492: PUSH
9493: LD_INT 650
9495: LESS
9496: IFFALSE 9508
9498: PUSH
9499: LD_VAR 0 2
9503: PUSH
9504: LD_INT 1
9506: NONEQUAL
9507: AND
9508: IFFALSE 9539
// begin SetTag ( i , tHeal ) ;
9510: LD_VAR 0 1
9514: PPUSH
9515: LD_INT 1
9517: PPUSH
9518: CALL_OW 109
// ComMoveXY ( i , 176 , 135 ) ;
9522: LD_VAR 0 1
9526: PPUSH
9527: LD_INT 176
9529: PPUSH
9530: LD_INT 135
9532: PPUSH
9533: CALL_OW 111
// continue ;
9537: GO 9314
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
9539: LD_VAR 0 1
9543: PPUSH
9544: CALL_OW 256
9548: PUSH
9549: LD_INT 1000
9551: EQUAL
9552: IFFALSE 9564
9554: PUSH
9555: LD_VAR 0 2
9559: PUSH
9560: LD_INT 1
9562: EQUAL
9563: AND
9564: IFFALSE 9578
// SetTag ( i , 0 ) ;
9566: LD_VAR 0 1
9570: PPUSH
9571: LD_INT 0
9573: PPUSH
9574: CALL_OW 109
// if not tag then
9578: LD_VAR 0 2
9582: NOT
9583: IFFALSE 9611
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
9585: LD_VAR 0 1
9589: PPUSH
9590: LD_VAR 0 3
9594: PPUSH
9595: LD_VAR 0 1
9599: PPUSH
9600: CALL_OW 74
9604: PPUSH
9605: CALL_OW 115
9609: GO 9663
// if tag = tMine then
9611: LD_VAR 0 2
9615: PUSH
9616: LD_INT 6
9618: EQUAL
9619: IFFALSE 9663
// begin ComPlaceDelayedCharge ( i , 0 , 0 , NearestUnitToUnit ( enemy , i ) ) ;
9621: LD_VAR 0 1
9625: PPUSH
9626: LD_INT 0
9628: PPUSH
9629: LD_INT 0
9631: PPUSH
9632: LD_VAR 0 3
9636: PPUSH
9637: LD_VAR 0 1
9641: PPUSH
9642: CALL_OW 74
9646: PPUSH
9647: CALL_OW 132
// SetTag ( i , tMined ) ;
9651: LD_VAR 0 1
9655: PPUSH
9656: LD_INT 11
9658: PPUSH
9659: CALL_OW 109
// end ; end ; if GetClass ( i ) = class_mechanic then
9663: LD_VAR 0 1
9667: PPUSH
9668: CALL_OW 257
9672: PUSH
9673: LD_INT 3
9675: EQUAL
9676: IFFALSE 9747
// begin if IsInUnit ( i ) then
9678: LD_VAR 0 1
9682: PPUSH
9683: CALL_OW 310
9687: IFFALSE 9691
// continue ;
9689: GO 9314
// if not IsInArea ( i , arabSpawnArea ) then
9691: LD_VAR 0 1
9695: PPUSH
9696: LD_INT 29
9698: PPUSH
9699: CALL_OW 308
9703: NOT
9704: IFFALSE 9720
// ComMoveToArea ( i , arabSpawnArea ) else
9706: LD_VAR 0 1
9710: PPUSH
9711: LD_INT 29
9713: PPUSH
9714: CALL_OW 113
9718: GO 9747
// begin RemoveUnit ( i ) ;
9720: LD_VAR 0 1
9724: PPUSH
9725: CALL_OW 64
// arForces := arForces diff i ;
9729: LD_ADDR_EXP 64
9733: PUSH
9734: LD_EXP 64
9738: PUSH
9739: LD_VAR 0 1
9743: DIFF
9744: ST_TO_ADDR
// continue ;
9745: GO 9314
// end ; end ; if GetType ( i ) = unit_vehicle then
9747: LD_VAR 0 1
9751: PPUSH
9752: CALL_OW 247
9756: PUSH
9757: LD_INT 2
9759: EQUAL
9760: IFFALSE 9798
// begin if not HasTask ( i ) then
9762: LD_VAR 0 1
9766: PPUSH
9767: CALL_OW 314
9771: NOT
9772: IFFALSE 9798
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
9774: LD_VAR 0 1
9778: PPUSH
9779: LD_VAR 0 3
9783: PPUSH
9784: LD_VAR 0 1
9788: PPUSH
9789: CALL_OW 74
9793: PPUSH
9794: CALL_OW 115
// end ; end ;
9798: GO 9314
9800: POP
9801: POP
// until not enemy ;
9802: LD_VAR 0 3
9806: NOT
9807: IFFALSE 9277
// end ; end_of_file
9809: PPOPN 3
9811: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9812: LD_VAR 0 1
9816: PPUSH
9817: CALL 85783 0 1
// if un in kirovVehicles then
9821: LD_VAR 0 1
9825: PUSH
9826: LD_EXP 49
9830: IN
9831: IFFALSE 9849
// kirovVehicles := kirovVehicles diff un ;
9833: LD_ADDR_EXP 49
9837: PUSH
9838: LD_EXP 49
9842: PUSH
9843: LD_VAR 0 1
9847: DIFF
9848: ST_TO_ADDR
// if un = Burlak then
9849: LD_VAR 0 1
9853: PUSH
9854: LD_EXP 29
9858: EQUAL
9859: IFFALSE 9868
// YouLost ( Burlak ) ;
9861: LD_STRING Burlak
9863: PPUSH
9864: CALL_OW 104
// if un = Popov then
9868: LD_VAR 0 1
9872: PUSH
9873: LD_EXP 35
9877: EQUAL
9878: IFFALSE 9887
// YouLost ( Popov ) ;
9880: LD_STRING Popov
9882: PPUSH
9883: CALL_OW 104
// if un = Kurin and not arabAttackActive then
9887: LD_VAR 0 1
9891: PUSH
9892: LD_EXP 33
9896: EQUAL
9897: IFFALSE 9906
9899: PUSH
9900: LD_EXP 8
9904: NOT
9905: AND
9906: IFFALSE 9915
// YouLost ( Kurin ) ;
9908: LD_STRING Kurin
9910: PPUSH
9911: CALL_OW 104
// if un = beriaDepot and not arabAttackActive then
9915: LD_VAR 0 1
9919: PUSH
9920: LD_EXP 46
9924: EQUAL
9925: IFFALSE 9934
9927: PUSH
9928: LD_EXP 8
9932: NOT
9933: AND
9934: IFFALSE 9943
// YouLost ( Beria ) ;
9936: LD_STRING Beria
9938: PPUSH
9939: CALL_OW 104
// if un = kaganDepot and not arabAttackActive then
9943: LD_VAR 0 1
9947: PUSH
9948: LD_EXP 47
9952: EQUAL
9953: IFFALSE 9962
9955: PUSH
9956: LD_EXP 8
9960: NOT
9961: AND
9962: IFFALSE 9971
// YouLost ( Kagan ) ;
9964: LD_STRING Kagan
9966: PPUSH
9967: CALL_OW 104
// if un = Sikorski then
9971: LD_VAR 0 1
9975: PUSH
9976: LD_EXP 56
9980: EQUAL
9981: IFFALSE 9990
// SetAchievement ( ACH_SIKORSKI ) ;
9983: LD_STRING ACH_SIKORSKI
9985: PPUSH
9986: CALL_OW 543
// end ;
9990: PPOPN 1
9992: END
// on VehicleConstructed ( vehicle , factory ) do var side , driver ;
9993: LD_INT 0
9995: PPUSH
9996: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
9997: LD_VAR 0 1
10001: PPUSH
10002: LD_VAR 0 2
10006: PPUSH
10007: CALL 85841 0 2
// side := GetSide ( vehicle ) ;
10011: LD_ADDR_VAR 0 3
10015: PUSH
10016: LD_VAR 0 1
10020: PPUSH
10021: CALL_OW 255
10025: ST_TO_ADDR
// if side = 6 then
10026: LD_VAR 0 3
10030: PUSH
10031: LD_INT 6
10033: EQUAL
10034: IFFALSE 10101
// begin driver := IsDrivenBy ( vehicle ) ;
10036: LD_ADDR_VAR 0 4
10040: PUSH
10041: LD_VAR 0 1
10045: PPUSH
10046: CALL_OW 311
10050: ST_TO_ADDR
// kirovVehicles := Join ( kirovVehicles , vehicle ) ;
10051: LD_ADDR_EXP 49
10055: PUSH
10056: LD_EXP 49
10060: PPUSH
10061: LD_VAR 0 1
10065: PPUSH
10066: CALL 64343 0 2
10070: ST_TO_ADDR
// SetTag ( driver , tMech ) ;
10071: LD_VAR 0 4
10075: PPUSH
10076: LD_INT 7
10078: PPUSH
10079: CALL_OW 109
// kirovConstructList := Delete ( kirovConstructList , 1 ) ;
10083: LD_ADDR_EXP 53
10087: PUSH
10088: LD_EXP 53
10092: PPUSH
10093: LD_INT 1
10095: PPUSH
10096: CALL_OW 3
10100: ST_TO_ADDR
// end ; if side = 1 then
10101: LD_VAR 0 3
10105: PUSH
10106: LD_INT 1
10108: EQUAL
10109: IFFALSE 10243
// begin driver := IsDrivenBy ( vehicle ) ;
10111: LD_ADDR_VAR 0 4
10115: PUSH
10116: LD_VAR 0 1
10120: PPUSH
10121: CALL_OW 311
10125: ST_TO_ADDR
// if driver then
10126: LD_VAR 0 4
10130: IFFALSE 10144
// SetTag ( driver , tMech ) ;
10132: LD_VAR 0 4
10136: PPUSH
10137: LD_INT 7
10139: PPUSH
10140: CALL_OW 109
// if Count ( omicronVehicles ) < 3 or GetBType ( vehicle ) in [ us_cargo_bay , us_crane ] then
10144: LD_EXP 59
10148: PPUSH
10149: CALL 28367 0 1
10153: PUSH
10154: LD_INT 3
10156: LESS
10157: IFTRUE 10181
10159: PUSH
10160: LD_VAR 0 1
10164: PPUSH
10165: CALL_OW 266
10169: PUSH
10170: LD_INT 12
10172: PUSH
10173: LD_INT 13
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: IN
10180: OR
10181: IFFALSE 10205
// omicronVehicles := Join ( omicronVehicles , vehicle ) else
10183: LD_ADDR_EXP 59
10187: PUSH
10188: LD_EXP 59
10192: PPUSH
10193: LD_VAR 0 1
10197: PPUSH
10198: CALL 64343 0 2
10202: ST_TO_ADDR
10203: GO 10225
// omicronAttackVehicles := Join ( omicronAttackVehicles , vehicle ) ;
10205: LD_ADDR_EXP 60
10209: PUSH
10210: LD_EXP 60
10214: PPUSH
10215: LD_VAR 0 1
10219: PPUSH
10220: CALL 64343 0 2
10224: ST_TO_ADDR
// omicronConstructList := Delete ( omicronConstructList , 1 ) ;
10225: LD_ADDR_EXP 62
10229: PUSH
10230: LD_EXP 62
10234: PPUSH
10235: LD_INT 1
10237: PPUSH
10238: CALL_OW 3
10242: ST_TO_ADDR
// end ; end ;
10243: PPOPN 4
10245: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
10246: LD_VAR 0 1
10250: PPUSH
10251: CALL_OW 110
10255: PUSH
10256: LD_INT 7
10258: EQUAL
10259: IFFALSE 10273
// SetTag ( driver , 0 ) ;
10261: LD_VAR 0 1
10265: PPUSH
10266: LD_INT 0
10268: PPUSH
10269: CALL_OW 109
// if GetSide ( driver ) = 1 and IsOk ( usFac ) then
10273: LD_VAR 0 1
10277: PPUSH
10278: CALL_OW 255
10282: PUSH
10283: LD_INT 1
10285: EQUAL
10286: IFFALSE 10297
10288: PUSH
10289: LD_INT 291
10291: PPUSH
10292: CALL_OW 302
10296: AND
10297: IFFALSE 10311
// ComEnterUnit ( driver , usFac ) ;
10299: LD_VAR 0 1
10303: PPUSH
10304: LD_INT 291
10306: PPUSH
10307: CALL_OW 120
// end ;
10311: PPOPN 4
10313: END
// on UpgradeComplete ( b ) do var side , btype ;
10314: LD_INT 0
10316: PPUSH
10317: PPUSH
// begin side := GetSide ( b ) ;
10318: LD_ADDR_VAR 0 2
10322: PUSH
10323: LD_VAR 0 1
10327: PPUSH
10328: CALL_OW 255
10332: ST_TO_ADDR
// btype := GetBType ( b ) ;
10333: LD_ADDR_VAR 0 3
10337: PUSH
10338: LD_VAR 0 1
10342: PPUSH
10343: CALL_OW 266
10347: ST_TO_ADDR
// if side = 6 then
10348: LD_VAR 0 2
10352: PUSH
10353: LD_INT 6
10355: EQUAL
10356: IFFALSE 10376
// kirovBuildingsToBuild := Delete ( kirovBuildingsToBuild , 1 ) ;
10358: LD_ADDR_EXP 52
10362: PUSH
10363: LD_EXP 52
10367: PPUSH
10368: LD_INT 1
10370: PPUSH
10371: CALL_OW 3
10375: ST_TO_ADDR
// if side = 1 then
10376: LD_VAR 0 2
10380: PUSH
10381: LD_INT 1
10383: EQUAL
10384: IFFALSE 10404
// omicronBuildingsToBuild := Delete ( omicronBuildingsToBuild , 1 ) ;
10386: LD_ADDR_EXP 63
10390: PUSH
10391: LD_EXP 63
10395: PPUSH
10396: LD_INT 1
10398: PPUSH
10399: CALL_OW 3
10403: ST_TO_ADDR
// if side = 3 then
10404: LD_VAR 0 2
10408: PUSH
10409: LD_INT 3
10411: EQUAL
10412: IFFALSE 10437
// begin if GetBType ( b ) = b_factory then
10414: LD_VAR 0 1
10418: PPUSH
10419: CALL_OW 266
10423: PUSH
10424: LD_INT 3
10426: EQUAL
10427: IFFALSE 10437
// hasFactory := true ;
10429: LD_ADDR_EXP 19
10433: PUSH
10434: LD_INT 1
10436: ST_TO_ADDR
// end ; end ;
10437: PPOPN 3
10439: END
// on ResearchComplete ( tech , lab ) do var side ;
10440: LD_INT 0
10442: PPUSH
// begin side := GetSide ( lab ) ;
10443: LD_ADDR_VAR 0 3
10447: PUSH
10448: LD_VAR 0 2
10452: PPUSH
10453: CALL_OW 255
10457: ST_TO_ADDR
// if side = 6 then
10458: LD_VAR 0 3
10462: PUSH
10463: LD_INT 6
10465: EQUAL
10466: IFFALSE 10484
// begin kirovTechs := kirovTechs diff tech ;
10468: LD_ADDR_EXP 51
10472: PUSH
10473: LD_EXP 51
10477: PUSH
10478: LD_VAR 0 1
10482: DIFF
10483: ST_TO_ADDR
// end ; if side = 1 then
10484: LD_VAR 0 3
10488: PUSH
10489: LD_INT 1
10491: EQUAL
10492: IFFALSE 10510
// omicronTechs := omicronTechs diff tech ;
10494: LD_ADDR_EXP 61
10498: PUSH
10499: LD_EXP 61
10503: PUSH
10504: LD_VAR 0 1
10508: DIFF
10509: ST_TO_ADDR
// end ;
10510: PPOPN 3
10512: END
// on BuildingComplete ( b ) do var side , btype ;
10513: LD_INT 0
10515: PPUSH
10516: PPUSH
// begin side := GetSide ( b ) ;
10517: LD_ADDR_VAR 0 2
10521: PUSH
10522: LD_VAR 0 1
10526: PPUSH
10527: CALL_OW 255
10531: ST_TO_ADDR
// btype := GetBType ( b ) ;
10532: LD_ADDR_VAR 0 3
10536: PUSH
10537: LD_VAR 0 1
10541: PPUSH
10542: CALL_OW 266
10546: ST_TO_ADDR
// if side = 3 then
10547: LD_VAR 0 2
10551: PUSH
10552: LD_INT 3
10554: EQUAL
10555: IFFALSE 10645
// begin if btype = b_oil_mine then
10557: LD_VAR 0 3
10561: PUSH
10562: LD_INT 29
10564: EQUAL
10565: IFFALSE 10575
// hasOilTower := true ;
10567: LD_ADDR_EXP 14
10571: PUSH
10572: LD_INT 1
10574: ST_TO_ADDR
// if btype = b_depot then
10575: LD_VAR 0 3
10579: PUSH
10580: LD_INT 0
10582: EQUAL
10583: IFFALSE 10645
// if GetDistUnitXY ( b , 78 , 112 ) < depotRangeDist and not hasKagan then
10585: LD_VAR 0 1
10589: PPUSH
10590: LD_INT 78
10592: PPUSH
10593: LD_INT 112
10595: PPUSH
10596: CALL_OW 297
10600: PUSH
10601: LD_INT 28
10603: LESS
10604: IFFALSE 10613
10606: PUSH
10607: LD_EXP 12
10611: NOT
10612: AND
10613: IFFALSE 10645
// begin hasKagan := true ;
10615: LD_ADDR_EXP 12
10619: PUSH
10620: LD_INT 1
10622: ST_TO_ADDR
// kaganDepot := b ;
10623: LD_ADDR_EXP 47
10627: PUSH
10628: LD_VAR 0 1
10632: ST_TO_ADDR
// SetBName ( b , kagan ) ;
10633: LD_VAR 0 1
10637: PPUSH
10638: LD_STRING kagan
10640: PPUSH
10641: CALL_OW 500
// end ; end ; if side = 1 then
10645: LD_VAR 0 2
10649: PUSH
10650: LD_INT 1
10652: EQUAL
10653: IFFALSE 10673
// omicronBuildingsToBuild := Delete ( omicronBuildingsToBuild , 1 ) ;
10655: LD_ADDR_EXP 63
10659: PUSH
10660: LD_EXP 63
10664: PPUSH
10665: LD_INT 1
10667: PPUSH
10668: CALL_OW 3
10672: ST_TO_ADDR
// if side = 6 then
10673: LD_VAR 0 2
10677: PUSH
10678: LD_INT 6
10680: EQUAL
10681: IFFALSE 10701
// kirovBuildingsToBuild := Delete ( kirovBuildingsToBuild , 1 ) ;
10683: LD_ADDR_EXP 52
10687: PUSH
10688: LD_EXP 52
10692: PPUSH
10693: LD_INT 1
10695: PPUSH
10696: CALL_OW 3
10700: ST_TO_ADDR
// end ;
10701: PPOPN 3
10703: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
10704: LD_VAR 0 1
10708: PUSH
10709: LD_INT 3
10711: EQUAL
10712: IFFALSE 10724
10714: PUSH
10715: LD_VAR 0 2
10719: PUSH
10720: LD_INT 6
10722: EQUAL
10723: AND
10724: IFFALSE 10734
// allianceAttacked := true ;
10726: LD_ADDR_EXP 9
10730: PUSH
10731: LD_INT 1
10733: ST_TO_ADDR
// end ;
10734: PPOPN 2
10736: END
// on TakeMaterials ( unit , building ) do begin if GetSide ( building ) = 6 and GetSide ( unit ) = 3 then
10737: LD_VAR 0 2
10741: PPUSH
10742: CALL_OW 255
10746: PUSH
10747: LD_INT 6
10749: EQUAL
10750: IFFALSE 10767
10752: PUSH
10753: LD_VAR 0 1
10757: PPUSH
10758: CALL_OW 255
10762: PUSH
10763: LD_INT 3
10765: EQUAL
10766: AND
10767: IFFALSE 10784
// youTookCratesFromKirov := Inc ( youTookCratesFromKirov ) ;
10769: LD_ADDR_EXP 17
10773: PUSH
10774: LD_EXP 17
10778: PPUSH
10779: CALL 65716 0 1
10783: ST_TO_ADDR
// end ;
10784: PPOPN 2
10786: END
// on VehicleCaptured ( newId , oldId , oldSide , driver ) do begin if canCaptureKirovVehs then
10787: LD_EXP 22
10791: IFFALSE 10795
// exit ;
10793: GO 10912
// if oldSide = 6 then
10795: LD_VAR 0 3
10799: PUSH
10800: LD_INT 6
10802: EQUAL
10803: IFFALSE 10912
// begin ComExit ( driver ) ;
10805: LD_VAR 0 4
10809: PPUSH
10810: CALL 64741 0 1
// SetSide ( newId , 6 ) ;
10814: LD_VAR 0 1
10818: PPUSH
10819: LD_INT 6
10821: PPUSH
10822: CALL_OW 235
// if oldId in kirovVehicles then
10826: LD_VAR 0 2
10830: PUSH
10831: LD_EXP 49
10835: IN
10836: IFFALSE 10876
// begin kirovVehicles := kirovVehicles diff oldId ;
10838: LD_ADDR_EXP 49
10842: PUSH
10843: LD_EXP 49
10847: PUSH
10848: LD_VAR 0 2
10852: DIFF
10853: ST_TO_ADDR
// kirovVehicles := Join ( kirovVehicles , newId ) ;
10854: LD_ADDR_EXP 49
10858: PUSH
10859: LD_EXP 49
10863: PPUSH
10864: LD_VAR 0 1
10868: PPUSH
10869: CALL 64343 0 2
10873: ST_TO_ADDR
// end else
10874: GO 10912
// begin kirovAttackVehicles := kirovAttackVehicles diff oldId ;
10876: LD_ADDR_EXP 50
10880: PUSH
10881: LD_EXP 50
10885: PUSH
10886: LD_VAR 0 2
10890: DIFF
10891: ST_TO_ADDR
// kirovAttackVehicles := Join ( kirovAttackVehicles , newId ) ;
10892: LD_ADDR_EXP 50
10896: PUSH
10897: LD_EXP 50
10901: PPUSH
10902: LD_VAR 0 1
10906: PPUSH
10907: CALL 64343 0 2
10911: ST_TO_ADDR
// end ; end ; end ;
10912: PPOPN 4
10914: END
// on ClassChanged ( un , oldClass , newClass ) do var tag ;
10915: LD_INT 0
10917: PPUSH
// begin tag := GetTag ( un ) ;
10918: LD_ADDR_VAR 0 4
10922: PUSH
10923: LD_VAR 0 1
10927: PPUSH
10928: CALL_OW 110
10932: ST_TO_ADDR
// if tag = tWannaBeMech then
10933: LD_VAR 0 4
10937: PUSH
10938: LD_INT 14
10940: EQUAL
10941: IFFALSE 10955
// SetTag ( un , 0 ) ;
10943: LD_VAR 0 1
10947: PPUSH
10948: LD_INT 0
10950: PPUSH
10951: CALL_OW 109
// end ;
10955: PPOPN 4
10957: END
// on SailEvent ( event ) do begin if event = eventCargo then
10958: LD_VAR 0 1
10962: PUSH
10963: LD_INT 1
10965: EQUAL
10966: IFFALSE 10972
// SendCargoWithOil ;
10968: CALL 2108 0 0
// if event = eventConvoy then
10972: LD_VAR 0 1
10976: PUSH
10977: LD_INT 2
10979: EQUAL
10980: IFFALSE 10986
// SendConvoy ;
10982: CALL 4371 0 0
// end ;
10986: PPOPN 1
10988: END
// on EnterBuilding ( b , un ) do begin if b = usFac and GetSide ( un ) = 1 then
10989: LD_VAR 0 1
10993: PUSH
10994: LD_INT 291
10996: EQUAL
10997: IFFALSE 11014
10999: PUSH
11000: LD_VAR 0 2
11004: PPUSH
11005: CALL_OW 255
11009: PUSH
11010: LD_INT 1
11012: EQUAL
11013: AND
11014: IFFALSE 11028
// SetLives ( un , 1000 ) ;
11016: LD_VAR 0 2
11020: PPUSH
11021: LD_INT 1000
11023: PPUSH
11024: CALL_OW 234
// end ; end_of_file
11028: PPOPN 2
11030: END
// export function LoadBuildingsFromPrevMission ; var i , tmp ; begin
11031: LD_INT 0
11033: PPUSH
11034: PPUSH
11035: PPUSH
// tmp := LoadVariable ( 02_Beria , [ [ 31 , 3 , 3 , 63 , 86 , 3 ] , [ 31 , 3 , 3 , 74 , 94 , 4 ] , [ 31 , 3 , 3 , 77 , 103 , 4 ] , [ 0 , 3 , 3 , 66 , 104 , 0 ] , [ 0 , 1 , 2 , 103 , 67 , 4 ] ] ) ;
11036: LD_ADDR_VAR 0 3
11040: PUSH
11041: LD_STRING 02_Beria
11043: PPUSH
11044: LD_INT 31
11046: PUSH
11047: LD_INT 3
11049: PUSH
11050: LD_INT 3
11052: PUSH
11053: LD_INT 63
11055: PUSH
11056: LD_INT 86
11058: PUSH
11059: LD_INT 3
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: PUSH
11070: LD_INT 31
11072: PUSH
11073: LD_INT 3
11075: PUSH
11076: LD_INT 3
11078: PUSH
11079: LD_INT 74
11081: PUSH
11082: LD_INT 94
11084: PUSH
11085: LD_INT 4
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 31
11098: PUSH
11099: LD_INT 3
11101: PUSH
11102: LD_INT 3
11104: PUSH
11105: LD_INT 77
11107: PUSH
11108: LD_INT 103
11110: PUSH
11111: LD_INT 4
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: PUSH
11122: LD_INT 0
11124: PUSH
11125: LD_INT 3
11127: PUSH
11128: LD_INT 3
11130: PUSH
11131: LD_INT 66
11133: PUSH
11134: LD_INT 104
11136: PUSH
11137: LD_INT 0
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: PUSH
11148: LD_INT 0
11150: PUSH
11151: LD_INT 1
11153: PUSH
11154: LD_INT 2
11156: PUSH
11157: LD_INT 103
11159: PUSH
11160: LD_INT 67
11162: PUSH
11163: LD_INT 4
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: PPUSH
11181: CALL_OW 30
11185: ST_TO_ADDR
// uc_side := 3 ;
11186: LD_ADDR_OWVAR 20
11190: PUSH
11191: LD_INT 3
11193: ST_TO_ADDR
// for i in tmp do
11194: LD_ADDR_VAR 0 2
11198: PUSH
11199: LD_VAR 0 3
11203: PUSH
11204: FOR_IN
11205: IFFALSE 11302
// begin uc_nation := i [ 2 ] ;
11207: LD_ADDR_OWVAR 21
11211: PUSH
11212: LD_VAR 0 2
11216: PUSH
11217: LD_INT 2
11219: ARRAY
11220: ST_TO_ADDR
// bc_type := i [ 1 ] ;
11221: LD_ADDR_OWVAR 42
11225: PUSH
11226: LD_VAR 0 2
11230: PUSH
11231: LD_INT 1
11233: ARRAY
11234: ST_TO_ADDR
// bc_level := i [ 3 ] ;
11235: LD_ADDR_OWVAR 43
11239: PUSH
11240: LD_VAR 0 2
11244: PUSH
11245: LD_INT 3
11247: ARRAY
11248: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
11249: LD_ADDR_OWVAR 44
11253: PUSH
11254: LD_INT 9
11256: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
11257: LD_ADDR_OWVAR 45
11261: PUSH
11262: LD_INT 9
11264: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 4 ] + 46 , i [ 5 ] , i [ 6 ] ) ;
11265: LD_VAR 0 2
11269: PUSH
11270: LD_INT 4
11272: ARRAY
11273: PUSH
11274: LD_INT 46
11276: PLUS
11277: PPUSH
11278: LD_VAR 0 2
11282: PUSH
11283: LD_INT 5
11285: ARRAY
11286: PPUSH
11287: LD_VAR 0 2
11291: PUSH
11292: LD_INT 6
11294: ARRAY
11295: PPUSH
11296: CALL_OW 47
// end ;
11300: GO 11204
11302: POP
11303: POP
// tmp := LoadVariable ( 02_Kirov , [ [ 31 , 3 , 3 , 98 , 98 , 1 ] , [ 6 , 3 , 3 , 107 , 99 , 3 ] , [ 0 , 3 , 3 , 117 , 104 , 3 ] , [ 4 , 3 , 3 , 105 , 108 , 0 ] , [ 4 , 3 , 3 , 120 , 116 , 0 ] , [ 2 , 3 , 3 , 113 , 113 , 0 ] , [ 26 , 3 , 3 , 116 , 98 , 0 ] ] ) ;
11304: LD_ADDR_VAR 0 3
11308: PUSH
11309: LD_STRING 02_Kirov
11311: PPUSH
11312: LD_INT 31
11314: PUSH
11315: LD_INT 3
11317: PUSH
11318: LD_INT 3
11320: PUSH
11321: LD_INT 98
11323: PUSH
11324: LD_INT 98
11326: PUSH
11327: LD_INT 1
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: PUSH
11338: LD_INT 6
11340: PUSH
11341: LD_INT 3
11343: PUSH
11344: LD_INT 3
11346: PUSH
11347: LD_INT 107
11349: PUSH
11350: LD_INT 99
11352: PUSH
11353: LD_INT 3
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: PUSH
11364: LD_INT 0
11366: PUSH
11367: LD_INT 3
11369: PUSH
11370: LD_INT 3
11372: PUSH
11373: LD_INT 117
11375: PUSH
11376: LD_INT 104
11378: PUSH
11379: LD_INT 3
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: PUSH
11390: LD_INT 4
11392: PUSH
11393: LD_INT 3
11395: PUSH
11396: LD_INT 3
11398: PUSH
11399: LD_INT 105
11401: PUSH
11402: LD_INT 108
11404: PUSH
11405: LD_INT 0
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 4
11418: PUSH
11419: LD_INT 3
11421: PUSH
11422: LD_INT 3
11424: PUSH
11425: LD_INT 120
11427: PUSH
11428: LD_INT 116
11430: PUSH
11431: LD_INT 0
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: PUSH
11442: LD_INT 2
11444: PUSH
11445: LD_INT 3
11447: PUSH
11448: LD_INT 3
11450: PUSH
11451: LD_INT 113
11453: PUSH
11454: LD_INT 113
11456: PUSH
11457: LD_INT 0
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: PUSH
11468: LD_INT 26
11470: PUSH
11471: LD_INT 3
11473: PUSH
11474: LD_INT 3
11476: PUSH
11477: LD_INT 116
11479: PUSH
11480: LD_INT 98
11482: PUSH
11483: LD_INT 0
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: PPUSH
11503: CALL_OW 30
11507: ST_TO_ADDR
// uc_side := 6 ;
11508: LD_ADDR_OWVAR 20
11512: PUSH
11513: LD_INT 6
11515: ST_TO_ADDR
// for i in tmp do
11516: LD_ADDR_VAR 0 2
11520: PUSH
11521: LD_VAR 0 3
11525: PUSH
11526: FOR_IN
11527: IFFALSE 11624
// begin uc_nation := i [ 2 ] ;
11529: LD_ADDR_OWVAR 21
11533: PUSH
11534: LD_VAR 0 2
11538: PUSH
11539: LD_INT 2
11541: ARRAY
11542: ST_TO_ADDR
// bc_type := i [ 1 ] ;
11543: LD_ADDR_OWVAR 42
11547: PUSH
11548: LD_VAR 0 2
11552: PUSH
11553: LD_INT 1
11555: ARRAY
11556: ST_TO_ADDR
// bc_level := i [ 3 ] ;
11557: LD_ADDR_OWVAR 43
11561: PUSH
11562: LD_VAR 0 2
11566: PUSH
11567: LD_INT 3
11569: ARRAY
11570: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
11571: LD_ADDR_OWVAR 44
11575: PUSH
11576: LD_INT 9
11578: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
11579: LD_ADDR_OWVAR 45
11583: PUSH
11584: LD_INT 9
11586: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 4 ] + 46 , i [ 5 ] , i [ 6 ] ) ;
11587: LD_VAR 0 2
11591: PUSH
11592: LD_INT 4
11594: ARRAY
11595: PUSH
11596: LD_INT 46
11598: PLUS
11599: PPUSH
11600: LD_VAR 0 2
11604: PUSH
11605: LD_INT 5
11607: ARRAY
11608: PPUSH
11609: LD_VAR 0 2
11613: PUSH
11614: LD_INT 6
11616: ARRAY
11617: PPUSH
11618: CALL_OW 47
// end ;
11622: GO 11526
11624: POP
11625: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , easternHillArea ] , [ f_type , unit_building ] ] ) ;
11626: LD_ADDR_VAR 0 3
11630: PUSH
11631: LD_INT 22
11633: PUSH
11634: LD_INT 3
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: PUSH
11641: LD_INT 95
11643: PUSH
11644: LD_INT 3
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 21
11653: PUSH
11654: LD_INT 3
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: LIST
11665: PPUSH
11666: CALL_OW 69
11670: ST_TO_ADDR
// if tmp then
11671: LD_VAR 0 3
11675: IFFALSE 11706
// for i in tmp do
11677: LD_ADDR_VAR 0 2
11681: PUSH
11682: LD_VAR 0 3
11686: PUSH
11687: FOR_IN
11688: IFFALSE 11704
// SetSide ( i , 6 ) ;
11690: LD_VAR 0 2
11694: PPUSH
11695: LD_INT 6
11697: PPUSH
11698: CALL_OW 235
11702: GO 11687
11704: POP
11705: POP
// kirovDepot := HexInfo ( 163 , 104 ) ;
11706: LD_ADDR_EXP 45
11710: PUSH
11711: LD_INT 163
11713: PPUSH
11714: LD_INT 104
11716: PPUSH
11717: CALL_OW 428
11721: ST_TO_ADDR
// beriaDepot := HexInfo ( 112 , 104 ) ;
11722: LD_ADDR_EXP 46
11726: PUSH
11727: LD_INT 112
11729: PPUSH
11730: LD_INT 104
11732: PPUSH
11733: CALL_OW 428
11737: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
11738: LD_EXP 46
11742: PPUSH
11743: LD_STRING beria
11745: PPUSH
11746: CALL_OW 500
// SetBName ( kirovDepot , kirov ) ;
11750: LD_EXP 45
11754: PPUSH
11755: LD_STRING kirov
11757: PPUSH
11758: CALL_OW 500
// end ;
11762: LD_VAR 0 1
11766: RET
// export function SaveTech ( side , saveId ) ; var i ; begin
11767: LD_INT 0
11769: PPUSH
11770: PPUSH
// result := [ ] ;
11771: LD_ADDR_VAR 0 3
11775: PUSH
11776: EMPTY
11777: ST_TO_ADDR
// for i := 1 to 100 do
11778: LD_ADDR_VAR 0 4
11782: PUSH
11783: DOUBLE
11784: LD_INT 1
11786: DEC
11787: ST_TO_ADDR
11788: LD_INT 100
11790: PUSH
11791: FOR_TO
11792: IFFALSE 11826
// result := Join ( result , GetTech ( i , side ) ) ;
11794: LD_ADDR_VAR 0 3
11798: PUSH
11799: LD_VAR 0 3
11803: PPUSH
11804: LD_VAR 0 4
11808: PPUSH
11809: LD_VAR 0 1
11813: PPUSH
11814: CALL_OW 321
11818: PPUSH
11819: CALL 64343 0 2
11823: ST_TO_ADDR
11824: GO 11791
11826: POP
11827: POP
// SaveVariable ( result , saveId ) ;
11828: LD_VAR 0 3
11832: PPUSH
11833: LD_VAR 0 2
11837: PPUSH
11838: CALL_OW 39
// end ;
11842: LD_VAR 0 3
11846: RET
// export function BaseScript ( side , area , cratesArea , innerArea , outerArea , forces , vehicles , techs , constructList , buildingsToBuild , healPoint , parkingPoint , allowToPatrol ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , drivers , hurtUnits , enemy , enemyInBase , enemyOuterBase , empty , fac , emptyTowers , weapon , depot , enemySide ; begin
11847: LD_INT 0
11849: PPUSH
11850: PPUSH
11851: PPUSH
11852: PPUSH
11853: PPUSH
11854: PPUSH
11855: PPUSH
11856: PPUSH
11857: PPUSH
11858: PPUSH
11859: PPUSH
11860: PPUSH
11861: PPUSH
11862: PPUSH
11863: PPUSH
11864: PPUSH
11865: PPUSH
11866: PPUSH
11867: PPUSH
11868: PPUSH
11869: PPUSH
11870: PPUSH
11871: PPUSH
// enable ;
11872: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
11873: LD_ADDR_VAR 0 16
11877: PUSH
11878: LD_INT 81
11880: PUSH
11881: LD_VAR 0 1
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PPUSH
11890: CALL_OW 69
11894: ST_TO_ADDR
// if tmp then
11895: LD_VAR 0 16
11899: IFFALSE 11920
// enemySide := GetSide ( tmp [ 1 ] ) ;
11901: LD_ADDR_VAR 0 36
11905: PUSH
11906: LD_VAR 0 16
11910: PUSH
11911: LD_INT 1
11913: ARRAY
11914: PPUSH
11915: CALL_OW 255
11919: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( innerArea , [ f_enemy , side ] ) ;
11920: LD_ADDR_VAR 0 29
11924: PUSH
11925: LD_VAR 0 4
11929: PPUSH
11930: LD_INT 81
11932: PUSH
11933: LD_VAR 0 1
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PPUSH
11942: CALL_OW 70
11946: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
11947: LD_ADDR_VAR 0 30
11951: PUSH
11952: LD_VAR 0 5
11956: PPUSH
11957: LD_INT 81
11959: PUSH
11960: LD_VAR 0 1
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PPUSH
11969: CALL_OW 70
11973: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11974: LD_ADDR_VAR 0 35
11978: PUSH
11979: LD_VAR 0 2
11983: PPUSH
11984: LD_INT 22
11986: PUSH
11987: LD_VAR 0 1
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PUSH
11996: LD_INT 2
11998: PUSH
11999: LD_INT 30
12001: PUSH
12002: LD_INT 0
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 30
12011: PUSH
12012: LD_INT 1
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PPUSH
12028: CALL_OW 70
12032: ST_TO_ADDR
// if depot then
12033: LD_VAR 0 35
12037: IFFALSE 12053
// depot := depot [ 1 ] ;
12039: LD_ADDR_VAR 0 35
12043: PUSH
12044: LD_VAR 0 35
12048: PUSH
12049: LD_INT 1
12051: ARRAY
12052: ST_TO_ADDR
// fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
12053: LD_ADDR_VAR 0 32
12057: PUSH
12058: LD_VAR 0 2
12062: PPUSH
12063: LD_INT 22
12065: PUSH
12066: LD_VAR 0 1
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PUSH
12075: LD_INT 30
12077: PUSH
12078: LD_INT 3
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: PUSH
12085: LD_INT 50
12087: PUSH
12088: EMPTY
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: LIST
12095: PPUSH
12096: CALL_OW 70
12100: ST_TO_ADDR
// if Count ( techs ) then
12101: LD_VAR 0 8
12105: PPUSH
12106: CALL 28367 0 1
12110: IFFALSE 12271
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
12112: LD_ADDR_VAR 0 18
12116: PUSH
12117: LD_VAR 0 2
12121: PPUSH
12122: LD_INT 22
12124: PUSH
12125: LD_VAR 0 1
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: PUSH
12134: LD_INT 50
12136: PUSH
12137: EMPTY
12138: LIST
12139: PUSH
12140: LD_INT 2
12142: PUSH
12143: LD_INT 30
12145: PUSH
12146: LD_INT 6
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 30
12155: PUSH
12156: LD_INT 7
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PUSH
12163: LD_INT 30
12165: PUSH
12166: LD_INT 8
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: PUSH
12179: EMPTY
12180: LIST
12181: LIST
12182: LIST
12183: PPUSH
12184: CALL_OW 70
12188: ST_TO_ADDR
// if lab then
12189: LD_VAR 0 18
12193: IFFALSE 12269
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
12195: LD_VAR 0 18
12199: PUSH
12200: LD_INT 1
12202: ARRAY
12203: PPUSH
12204: CALL_OW 461
12208: PUSH
12209: LD_INT 2
12211: EQUAL
12212: IFFALSE 12269
// begin for i in techs do
12214: LD_ADDR_VAR 0 15
12218: PUSH
12219: LD_VAR 0 8
12223: PUSH
12224: FOR_IN
12225: IFFALSE 12267
// if CanBeResearched ( lab [ 1 ] , i ) then
12227: LD_VAR 0 18
12231: PUSH
12232: LD_INT 1
12234: ARRAY
12235: PPUSH
12236: LD_VAR 0 15
12240: PPUSH
12241: CALL_OW 430
12245: IFFALSE 12265
// begin AddComResearch ( lab [ 1 ] , i ) ;
12247: LD_VAR 0 18
12251: PUSH
12252: LD_INT 1
12254: ARRAY
12255: PPUSH
12256: LD_VAR 0 15
12260: PPUSH
12261: CALL_OW 184
// end ;
12265: GO 12224
12267: POP
12268: POP
// end ; end ; end else
12269: GO 12574
// if UnitFilter ( fac , [ f_not , [ f_full ] ] ) and Count ( UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_tag , tWannaBeMech ] ] , [ f_class , 4 ] ] ) ) > 2 then
12271: LD_VAR 0 32
12275: PPUSH
12276: LD_INT 3
12278: PUSH
12279: LD_INT 62
12281: PUSH
12282: EMPTY
12283: LIST
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: PPUSH
12289: CALL_OW 72
12293: IFFALSE 12360
12295: PUSH
12296: LD_VAR 0 6
12300: PPUSH
12301: LD_INT 3
12303: PUSH
12304: LD_INT 60
12306: PUSH
12307: EMPTY
12308: LIST
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: PUSH
12314: LD_INT 3
12316: PUSH
12317: LD_INT 120
12319: PUSH
12320: LD_INT 14
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 25
12333: PUSH
12334: LD_INT 4
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: LIST
12345: PPUSH
12346: CALL_OW 72
12350: PPUSH
12351: CALL 28367 0 1
12355: PUSH
12356: LD_INT 2
12358: GREATER
12359: AND
12360: IFFALSE 12574
// begin tmp := UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_tag , tWannaBeMech ] ] , [ f_class , 4 ] ] ) ;
12362: LD_ADDR_VAR 0 16
12366: PUSH
12367: LD_VAR 0 6
12371: PPUSH
12372: LD_INT 3
12374: PUSH
12375: LD_INT 60
12377: PUSH
12378: EMPTY
12379: LIST
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: PUSH
12385: LD_INT 3
12387: PUSH
12388: LD_INT 120
12390: PUSH
12391: LD_INT 14
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: PUSH
12402: LD_INT 25
12404: PUSH
12405: LD_INT 4
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: LIST
12416: PPUSH
12417: CALL_OW 72
12421: ST_TO_ADDR
// for i := tmp downto 2 do
12422: LD_ADDR_VAR 0 15
12426: PUSH
12427: DOUBLE
12428: LD_VAR 0 16
12432: INC
12433: ST_TO_ADDR
12434: LD_INT 2
12436: PUSH
12437: FOR_DOWNTO
12438: IFFALSE 12572
// begin if Count ( UnitsInside ( fac [ 1 ] ) ) + Count ( UnitFilter ( forces , [ f_tag , tWannaBeMech ] ) ) = 6 then
12440: LD_VAR 0 32
12444: PUSH
12445: LD_INT 1
12447: ARRAY
12448: PPUSH
12449: CALL_OW 313
12453: PPUSH
12454: CALL 28367 0 1
12458: PUSH
12459: LD_VAR 0 6
12463: PPUSH
12464: LD_INT 120
12466: PUSH
12467: LD_INT 14
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PPUSH
12474: CALL_OW 72
12478: PPUSH
12479: CALL 28367 0 1
12483: PLUS
12484: PUSH
12485: LD_INT 6
12487: EQUAL
12488: IFFALSE 12492
// break ;
12490: GO 12572
// sci := tmp [ i ] ;
12492: LD_ADDR_VAR 0 24
12496: PUSH
12497: LD_VAR 0 16
12501: PUSH
12502: LD_VAR 0 15
12506: ARRAY
12507: ST_TO_ADDR
// SetTag ( sci , tWannaBeMech ) ;
12508: LD_VAR 0 24
12512: PPUSH
12513: LD_INT 14
12515: PPUSH
12516: CALL_OW 109
// if IsInUnit ( sci ) then
12520: LD_VAR 0 24
12524: PPUSH
12525: CALL_OW 310
12529: IFFALSE 12540
// ComExitBuilding ( sci ) ;
12531: LD_VAR 0 24
12535: PPUSH
12536: CALL_OW 122
// AddComEnterUnit ( sci , fac [ 1 ] ) ;
12540: LD_VAR 0 24
12544: PPUSH
12545: LD_VAR 0 32
12549: PUSH
12550: LD_INT 1
12552: ARRAY
12553: PPUSH
12554: CALL_OW 180
// AddComChangeProfession ( sci , class_mechanic ) ;
12558: LD_VAR 0 24
12562: PPUSH
12563: LD_INT 3
12565: PPUSH
12566: CALL_OW 183
// end ;
12570: GO 12437
12572: POP
12573: POP
// end ; if fac then
12574: LD_VAR 0 32
12578: IFFALSE 12893
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
12580: LD_VAR 0 32
12584: PUSH
12585: LD_INT 1
12587: ARRAY
12588: PPUSH
12589: CALL_OW 461
12593: PUSH
12594: LD_INT 2
12596: EQUAL
12597: IFFALSE 12893
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
12599: LD_ADDR_VAR 0 33
12603: PUSH
12604: LD_VAR 0 2
12608: PPUSH
12609: LD_INT 2
12611: PUSH
12612: LD_INT 30
12614: PUSH
12615: LD_INT 32
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PUSH
12622: LD_INT 30
12624: PUSH
12625: LD_INT 33
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: PUSH
12637: LD_INT 35
12639: PUSH
12640: LD_INT 0
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: PPUSH
12651: CALL_OW 70
12655: ST_TO_ADDR
// if emptyTowers then
12656: LD_VAR 0 33
12660: IFFALSE 12710
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
12662: LD_ADDR_VAR 0 34
12666: PUSH
12667: LD_VAR 0 33
12671: PUSH
12672: LD_INT 1
12674: ARRAY
12675: PPUSH
12676: LD_VAR 0 2
12680: PPUSH
12681: CALL 36692 0 2
12685: ST_TO_ADDR
// if weapon then
12686: LD_VAR 0 34
12690: IFFALSE 12710
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
12692: LD_VAR 0 33
12696: PUSH
12697: LD_INT 1
12699: ARRAY
12700: PPUSH
12701: LD_VAR 0 34
12705: PPUSH
12706: CALL_OW 148
// end ; if constructList then
12710: LD_VAR 0 9
12714: IFFALSE 12893
// for i := 1 to Count ( constructList ) do
12716: LD_ADDR_VAR 0 15
12720: PUSH
12721: DOUBLE
12722: LD_INT 1
12724: DEC
12725: ST_TO_ADDR
12726: LD_VAR 0 9
12730: PPUSH
12731: CALL 28367 0 1
12735: PUSH
12736: FOR_TO
12737: IFFALSE 12891
// begin if CanBeConstructed ( fac [ 1 ] , constructList [ i ] [ 1 ] , constructList [ i ] [ 2 ] , constructList [ i ] [ 3 ] , constructList [ i ] [ 4 ] ) then
12739: LD_VAR 0 32
12743: PUSH
12744: LD_INT 1
12746: ARRAY
12747: PPUSH
12748: LD_VAR 0 9
12752: PUSH
12753: LD_VAR 0 15
12757: ARRAY
12758: PUSH
12759: LD_INT 1
12761: ARRAY
12762: PPUSH
12763: LD_VAR 0 9
12767: PUSH
12768: LD_VAR 0 15
12772: ARRAY
12773: PUSH
12774: LD_INT 2
12776: ARRAY
12777: PPUSH
12778: LD_VAR 0 9
12782: PUSH
12783: LD_VAR 0 15
12787: ARRAY
12788: PUSH
12789: LD_INT 3
12791: ARRAY
12792: PPUSH
12793: LD_VAR 0 9
12797: PUSH
12798: LD_VAR 0 15
12802: ARRAY
12803: PUSH
12804: LD_INT 4
12806: ARRAY
12807: PPUSH
12808: CALL_OW 448
12812: IFFALSE 12889
// begin ComConstruct ( fac [ 1 ] , constructList [ i ] [ 1 ] , constructList [ i ] [ 2 ] , constructList [ i ] [ 3 ] , constructList [ i ] [ 4 ] ) ;
12814: LD_VAR 0 32
12818: PUSH
12819: LD_INT 1
12821: ARRAY
12822: PPUSH
12823: LD_VAR 0 9
12827: PUSH
12828: LD_VAR 0 15
12832: ARRAY
12833: PUSH
12834: LD_INT 1
12836: ARRAY
12837: PPUSH
12838: LD_VAR 0 9
12842: PUSH
12843: LD_VAR 0 15
12847: ARRAY
12848: PUSH
12849: LD_INT 2
12851: ARRAY
12852: PPUSH
12853: LD_VAR 0 9
12857: PUSH
12858: LD_VAR 0 15
12862: ARRAY
12863: PUSH
12864: LD_INT 3
12866: ARRAY
12867: PPUSH
12868: LD_VAR 0 9
12872: PUSH
12873: LD_VAR 0 15
12877: ARRAY
12878: PUSH
12879: LD_INT 4
12881: ARRAY
12882: PPUSH
12883: CALL_OW 125
// break ;
12887: GO 12891
// end ; end ;
12889: GO 12736
12891: POP
12892: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12893: LD_ADDR_VAR 0 16
12897: PUSH
12898: LD_VAR 0 2
12902: PPUSH
12903: LD_INT 22
12905: PUSH
12906: LD_VAR 0 1
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: LD_INT 21
12917: PUSH
12918: LD_INT 3
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PUSH
12925: LD_INT 3
12927: PUSH
12928: LD_INT 57
12930: PUSH
12931: EMPTY
12932: LIST
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: PUSH
12938: LD_INT 3
12940: PUSH
12941: LD_INT 24
12943: PUSH
12944: LD_INT 1000
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: PPUSH
12961: CALL_OW 70
12965: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
12966: LD_ADDR_VAR 0 20
12970: PUSH
12971: LD_VAR 0 6
12975: PPUSH
12976: LD_INT 25
12978: PUSH
12979: LD_INT 3
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: LD_INT 50
12988: PUSH
12989: EMPTY
12990: LIST
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: PPUSH
12996: CALL_OW 72
13000: ST_TO_ADDR
// if fac then
13001: LD_VAR 0 32
13005: IFFALSE 13126
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
13007: LD_VAR 0 20
13011: PPUSH
13012: LD_INT 3
13014: PUSH
13015: LD_INT 120
13017: PUSH
13018: LD_INT 7
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PUSH
13029: LD_INT 3
13031: PUSH
13032: LD_INT 54
13034: PUSH
13035: EMPTY
13036: LIST
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PPUSH
13046: CALL_OW 72
13050: IFFALSE 13067
13052: PUSH
13053: LD_VAR 0 32
13057: PUSH
13058: LD_INT 1
13060: ARRAY
13061: PPUSH
13062: CALL_OW 302
13066: AND
13067: IFFALSE 13126
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
13069: LD_VAR 0 20
13073: PPUSH
13074: LD_INT 3
13076: PUSH
13077: LD_INT 120
13079: PUSH
13080: LD_INT 7
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: PUSH
13091: LD_INT 3
13093: PUSH
13094: LD_INT 54
13096: PUSH
13097: EMPTY
13098: LIST
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: PPUSH
13108: CALL_OW 72
13112: PPUSH
13113: LD_VAR 0 32
13117: PUSH
13118: LD_INT 1
13120: ARRAY
13121: PPUSH
13122: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_not , [ f_tag , tWannaBeMech ] ] , [ f_ok ] ] ) ;
13126: LD_ADDR_VAR 0 24
13130: PUSH
13131: LD_VAR 0 6
13135: PPUSH
13136: LD_INT 25
13138: PUSH
13139: LD_INT 4
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: PUSH
13146: LD_INT 3
13148: PUSH
13149: LD_INT 120
13151: PUSH
13152: LD_INT 14
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: LD_INT 50
13165: PUSH
13166: EMPTY
13167: LIST
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: LIST
13173: PPUSH
13174: CALL_OW 72
13178: ST_TO_ADDR
// lab := FilterUnitsInarea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
13179: LD_ADDR_VAR 0 18
13183: PUSH
13184: LD_VAR 0 2
13188: PPUSH
13189: LD_INT 2
13191: PUSH
13192: LD_INT 30
13194: PUSH
13195: LD_INT 6
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PUSH
13202: LD_INT 30
13204: PUSH
13205: LD_INT 7
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PUSH
13212: LD_INT 30
13214: PUSH
13215: LD_INT 8
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: PPUSH
13228: CALL_OW 70
13232: ST_TO_ADDR
// if sci then
13233: LD_VAR 0 24
13237: IFFALSE 13416
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_not , [ f_lives , 1000 ] ] , [ f_tag , tHeal ] ] ) ;
13239: LD_ADDR_VAR 0 27
13243: PUSH
13244: LD_VAR 0 6
13248: PPUSH
13249: LD_INT 95
13251: PUSH
13252: LD_VAR 0 2
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: LD_INT 3
13263: PUSH
13264: LD_INT 24
13266: PUSH
13267: LD_INT 1000
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: LD_INT 120
13280: PUSH
13281: LD_INT 1
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: LIST
13292: PPUSH
13293: CALL_OW 72
13297: ST_TO_ADDR
// if hurtUnits then
13298: LD_VAR 0 27
13302: IFFALSE 13363
// begin for i in sci do
13304: LD_ADDR_VAR 0 15
13308: PUSH
13309: LD_VAR 0 24
13313: PUSH
13314: FOR_IN
13315: IFFALSE 13359
// if IsInUnit ( i ) then
13317: LD_VAR 0 15
13321: PPUSH
13322: CALL_OW 310
13326: IFFALSE 13339
// ComExitBuilding ( i ) else
13328: LD_VAR 0 15
13332: PPUSH
13333: CALL_OW 122
13337: GO 13357
// ComHeal ( i , hurtUnits [ 1 ] ) ;
13339: LD_VAR 0 15
13343: PPUSH
13344: LD_VAR 0 27
13348: PUSH
13349: LD_INT 1
13351: ARRAY
13352: PPUSH
13353: CALL_OW 128
13357: GO 13314
13359: POP
13360: POP
// end else
13361: GO 13416
// if lab then
13363: LD_VAR 0 18
13367: IFFALSE 13416
// begin for i in sci do
13369: LD_ADDR_VAR 0 15
13373: PUSH
13374: LD_VAR 0 24
13378: PUSH
13379: FOR_IN
13380: IFFALSE 13414
// if not IsInUnit ( i ) then
13382: LD_VAR 0 15
13386: PPUSH
13387: CALL_OW 310
13391: NOT
13392: IFFALSE 13412
// ComEnterUnit ( i , lab [ 1 ] ) ;
13394: LD_VAR 0 15
13398: PPUSH
13399: LD_VAR 0 18
13403: PUSH
13404: LD_INT 1
13406: ARRAY
13407: PPUSH
13408: CALL_OW 120
13412: GO 13379
13414: POP
13415: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
13416: LD_ADDR_VAR 0 19
13420: PUSH
13421: LD_VAR 0 6
13425: PPUSH
13426: LD_INT 25
13428: PUSH
13429: LD_INT 2
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: PPUSH
13436: CALL_OW 72
13440: ST_TO_ADDR
// if eng then
13441: LD_VAR 0 19
13445: IFFALSE 14782
// begin for i in eng do
13447: LD_ADDR_VAR 0 15
13451: PUSH
13452: LD_VAR 0 19
13456: PUSH
13457: FOR_IN
13458: IFFALSE 14780
// begin cr := GetListOfCratesInArea ( area ) ;
13460: LD_ADDR_VAR 0 23
13464: PUSH
13465: LD_VAR 0 2
13469: PPUSH
13470: CALL_OW 435
13474: ST_TO_ADDR
// if cratesArea then
13475: LD_VAR 0 3
13479: IFFALSE 13502
// cr := cr union GetListOfCratesInArea ( cratesArea ) ;
13481: LD_ADDR_VAR 0 23
13485: PUSH
13486: LD_VAR 0 23
13490: PUSH
13491: LD_VAR 0 3
13495: PPUSH
13496: CALL_OW 435
13500: UNION
13501: ST_TO_ADDR
// tag := GetTag ( i ) ;
13502: LD_ADDR_VAR 0 21
13506: PUSH
13507: LD_VAR 0 15
13511: PPUSH
13512: CALL_OW 110
13516: ST_TO_ADDR
// if IsInArea ( i , outerArea ) and not tCrates then
13517: LD_VAR 0 15
13521: PPUSH
13522: LD_VAR 0 5
13526: PPUSH
13527: CALL_OW 308
13531: IFFALSE 13538
13533: PUSH
13534: LD_INT 2
13536: NOT
13537: AND
13538: IFFALSE 13569
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
13540: LD_VAR 0 15
13544: PPUSH
13545: LD_VAR 0 12
13549: PUSH
13550: LD_INT 1
13552: ARRAY
13553: PPUSH
13554: LD_VAR 0 12
13558: PUSH
13559: LD_INT 2
13561: ARRAY
13562: PPUSH
13563: CALL_OW 111
// continue ;
13567: GO 13457
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
13569: LD_VAR 0 15
13573: PPUSH
13574: CALL_OW 256
13578: PUSH
13579: LD_INT 800
13581: LESS
13582: IFFALSE 13594
13584: PUSH
13585: LD_VAR 0 21
13589: PUSH
13590: LD_INT 1
13592: NONEQUAL
13593: AND
13594: IFFALSE 13644
// begin SetTag ( i , tHeal ) ;
13596: LD_VAR 0 15
13600: PPUSH
13601: LD_INT 1
13603: PPUSH
13604: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
13608: LD_VAR 0 15
13612: PPUSH
13613: LD_VAR 0 11
13617: PUSH
13618: LD_INT 1
13620: ARRAY
13621: PPUSH
13622: LD_VAR 0 11
13626: PUSH
13627: LD_INT 2
13629: ARRAY
13630: PPUSH
13631: CALL_OW 111
// AddComHold ( i ) ;
13635: LD_VAR 0 15
13639: PPUSH
13640: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
13644: LD_VAR 0 21
13648: PUSH
13649: LD_INT 1
13651: EQUAL
13652: IFFALSE 13669
13654: PUSH
13655: LD_VAR 0 15
13659: PPUSH
13660: CALL_OW 256
13664: PUSH
13665: LD_INT 1000
13667: EQUAL
13668: AND
13669: IFFALSE 13683
// SetTag ( i , 0 ) ;
13671: LD_VAR 0 15
13675: PPUSH
13676: LD_INT 0
13678: PPUSH
13679: CALL_OW 109
// if not tag then
13683: LD_VAR 0 21
13687: NOT
13688: IFFALSE 13859
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
13690: LD_ADDR_VAR 0 17
13694: PUSH
13695: LD_VAR 0 2
13699: PPUSH
13700: LD_INT 57
13702: PUSH
13703: EMPTY
13704: LIST
13705: PPUSH
13706: CALL_OW 70
13710: ST_TO_ADDR
// if undone then
13711: LD_VAR 0 17
13715: IFFALSE 13737
// begin ComComplete ( i , undone [ 1 ] ) ;
13717: LD_VAR 0 15
13721: PPUSH
13722: LD_VAR 0 17
13726: PUSH
13727: LD_INT 1
13729: ARRAY
13730: PPUSH
13731: CALL 34537 0 2
// continue ;
13735: GO 13457
// end ; if cr or tmp or buildingsToBuild then
13737: LD_VAR 0 23
13741: IFTRUE 13749
13743: PUSH
13744: LD_VAR 0 16
13748: OR
13749: IFTRUE 13757
13751: PUSH
13752: LD_VAR 0 10
13756: OR
13757: IFFALSE 13833
// begin if IsInUnit ( i ) then
13759: LD_VAR 0 15
13763: PPUSH
13764: CALL_OW 310
13768: IFFALSE 13779
// ComExitBuilding ( i ) ;
13770: LD_VAR 0 15
13774: PPUSH
13775: CALL_OW 122
// if tmp then
13779: LD_VAR 0 16
13783: IFFALSE 13799
// SetTag ( i , tRepair ) else
13785: LD_VAR 0 15
13789: PPUSH
13790: LD_INT 3
13792: PPUSH
13793: CALL_OW 109
13797: GO 13831
// if cr then
13799: LD_VAR 0 23
13803: IFFALSE 13819
// SetTag ( i , tCrates ) else
13805: LD_VAR 0 15
13809: PPUSH
13810: LD_INT 2
13812: PPUSH
13813: CALL_OW 109
13817: GO 13831
// SetTag ( i , tBuild ) ;
13819: LD_VAR 0 15
13823: PPUSH
13824: LD_INT 5
13826: PPUSH
13827: CALL_OW 109
// end else
13831: GO 13859
// if not IsInUnit ( i ) then
13833: LD_VAR 0 15
13837: PPUSH
13838: CALL_OW 310
13842: NOT
13843: IFFALSE 13859
// ComEnterUnit ( i , depot ) ;
13845: LD_VAR 0 15
13849: PPUSH
13850: LD_VAR 0 35
13854: PPUSH
13855: CALL_OW 120
// end ; if tag = tRepair then
13859: LD_VAR 0 21
13863: PUSH
13864: LD_INT 3
13866: EQUAL
13867: IFFALSE 13973
// begin if IsInUnit ( i ) then
13869: LD_VAR 0 15
13873: PPUSH
13874: CALL_OW 310
13878: IFFALSE 13891
// begin ComExitBuilding ( i ) ;
13880: LD_VAR 0 15
13884: PPUSH
13885: CALL_OW 122
// continue ;
13889: GO 13457
// end ; if not tmp then
13891: LD_VAR 0 16
13895: NOT
13896: IFFALSE 13912
// begin SetTag ( i , 0 ) ;
13898: LD_VAR 0 15
13902: PPUSH
13903: LD_INT 0
13905: PPUSH
13906: CALL_OW 109
// continue ;
13910: GO 13457
// end ; if not HasTask ( i ) then
13912: LD_VAR 0 15
13916: PPUSH
13917: CALL_OW 314
13921: NOT
13922: IFFALSE 13942
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
13924: LD_VAR 0 15
13928: PPUSH
13929: LD_VAR 0 16
13933: PUSH
13934: LD_INT 1
13936: ARRAY
13937: PPUSH
13938: CALL_OW 130
// if not IsInarea ( i , area ) then
13942: LD_VAR 0 15
13946: PPUSH
13947: LD_VAR 0 2
13951: PPUSH
13952: CALL_OW 308
13956: NOT
13957: IFFALSE 13973
// ComMoveToArea ( i , area ) ;
13959: LD_VAR 0 15
13963: PPUSH
13964: LD_VAR 0 2
13968: PPUSH
13969: CALL_OW 113
// end ; if tag = tBuild then
13973: LD_VAR 0 21
13977: PUSH
13978: LD_INT 5
13980: EQUAL
13981: IFFALSE 14555
// begin if IsInUnit ( i ) then
13983: LD_VAR 0 15
13987: PPUSH
13988: CALL_OW 310
13992: IFFALSE 14005
// begin ComExitBuilding ( i ) ;
13994: LD_VAR 0 15
13998: PPUSH
13999: CALL_OW 122
// continue ;
14003: GO 13457
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
14005: LD_VAR 0 10
14009: NOT
14010: IFTRUE 14018
14012: PUSH
14013: LD_VAR 0 29
14017: OR
14018: IFTRUE 14026
14020: PUSH
14021: LD_VAR 0 30
14025: OR
14026: IFFALSE 14044
// begin SetTag ( i , 0 ) ;
14028: LD_VAR 0 15
14032: PPUSH
14033: LD_INT 0
14035: PPUSH
14036: CALL_OW 109
// continue ;
14040: GO 13457
// end else
14042: GO 14083
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
14044: LD_VAR 0 35
14048: PPUSH
14049: LD_VAR 0 10
14053: PUSH
14054: LD_INT 1
14056: ARRAY
14057: PUSH
14058: LD_INT 1
14060: ARRAY
14061: PPUSH
14062: CALL 68438 0 2
14066: NOT
14067: IFFALSE 14083
// begin SetTag ( i , 0 ) ;
14069: LD_VAR 0 15
14073: PPUSH
14074: LD_INT 0
14076: PPUSH
14077: CALL_OW 109
// continue ;
14081: GO 13457
// end ; undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
14083: LD_ADDR_VAR 0 17
14087: PUSH
14088: LD_VAR 0 2
14092: PPUSH
14093: LD_INT 57
14095: PUSH
14096: EMPTY
14097: LIST
14098: PPUSH
14099: CALL_OW 70
14103: ST_TO_ADDR
// if undone then
14104: LD_VAR 0 17
14108: IFFALSE 14130
// begin ComComplete ( i , undone [ 1 ] ) ;
14110: LD_VAR 0 15
14114: PPUSH
14115: LD_VAR 0 17
14119: PUSH
14120: LD_INT 1
14122: ARRAY
14123: PPUSH
14124: CALL 34537 0 2
// continue ;
14128: GO 13457
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_factory , b_barracks ] then
14130: LD_VAR 0 10
14134: PUSH
14135: LD_INT 1
14137: ARRAY
14138: PUSH
14139: LD_INT 1
14141: ARRAY
14142: PUSH
14143: LD_INT 3
14145: PUSH
14146: LD_INT 5
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: IN
14153: IFFALSE 14250
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) and CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
14155: LD_VAR 0 10
14159: PUSH
14160: LD_INT 1
14162: ARRAY
14163: PUSH
14164: LD_INT 2
14166: ARRAY
14167: PPUSH
14168: LD_VAR 0 10
14172: PUSH
14173: LD_INT 1
14175: ARRAY
14176: PUSH
14177: LD_INT 3
14179: ARRAY
14180: PPUSH
14181: CALL_OW 428
14185: IFFALSE 14211
14187: PUSH
14188: LD_VAR 0 35
14192: PPUSH
14193: LD_VAR 0 10
14197: PUSH
14198: LD_INT 1
14200: ARRAY
14201: PUSH
14202: LD_INT 1
14204: ARRAY
14205: PPUSH
14206: CALL 68438 0 2
14210: AND
14211: IFFALSE 14248
// begin ComUpgrade ( HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) ) ;
14213: LD_VAR 0 10
14217: PUSH
14218: LD_INT 1
14220: ARRAY
14221: PUSH
14222: LD_INT 2
14224: ARRAY
14225: PPUSH
14226: LD_VAR 0 10
14230: PUSH
14231: LD_INT 1
14233: ARRAY
14234: PUSH
14235: LD_INT 3
14237: ARRAY
14238: PPUSH
14239: CALL_OW 428
14243: PPUSH
14244: CALL_OW 146
// end ; continue ;
14248: GO 13457
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_lab_half , b_lab_full ] then
14250: LD_VAR 0 10
14254: PUSH
14255: LD_INT 1
14257: ARRAY
14258: PUSH
14259: LD_INT 1
14261: ARRAY
14262: PUSH
14263: LD_INT 7
14265: PUSH
14266: LD_INT 8
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: IN
14273: IFFALSE 14383
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) and CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
14275: LD_VAR 0 10
14279: PUSH
14280: LD_INT 1
14282: ARRAY
14283: PUSH
14284: LD_INT 2
14286: ARRAY
14287: PPUSH
14288: LD_VAR 0 10
14292: PUSH
14293: LD_INT 1
14295: ARRAY
14296: PUSH
14297: LD_INT 3
14299: ARRAY
14300: PPUSH
14301: CALL_OW 428
14305: IFFALSE 14331
14307: PUSH
14308: LD_VAR 0 35
14312: PPUSH
14313: LD_VAR 0 10
14317: PUSH
14318: LD_INT 1
14320: ARRAY
14321: PUSH
14322: LD_INT 1
14324: ARRAY
14325: PPUSH
14326: CALL 68438 0 2
14330: AND
14331: IFFALSE 14381
// begin ComUpgradeLab ( HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) , buildingsToBuild [ 1 ] [ 5 ] ) ;
14333: LD_VAR 0 10
14337: PUSH
14338: LD_INT 1
14340: ARRAY
14341: PUSH
14342: LD_INT 2
14344: ARRAY
14345: PPUSH
14346: LD_VAR 0 10
14350: PUSH
14351: LD_INT 1
14353: ARRAY
14354: PUSH
14355: LD_INT 3
14357: ARRAY
14358: PPUSH
14359: CALL_OW 428
14363: PPUSH
14364: LD_VAR 0 10
14368: PUSH
14369: LD_INT 1
14371: ARRAY
14372: PUSH
14373: LD_INT 5
14375: ARRAY
14376: PPUSH
14377: CALL_OW 147
// end ; continue ;
14381: GO 13457
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_bunker , b_turret ] then
14383: LD_VAR 0 10
14387: PUSH
14388: LD_INT 1
14390: ARRAY
14391: PUSH
14392: LD_INT 1
14394: ARRAY
14395: PUSH
14396: LD_INT 32
14398: PUSH
14399: LD_INT 33
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: IN
14406: IFFALSE 14482
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) then
14408: LD_VAR 0 10
14412: PUSH
14413: LD_INT 1
14415: ARRAY
14416: PUSH
14417: LD_INT 2
14419: ARRAY
14420: PPUSH
14421: LD_VAR 0 10
14425: PUSH
14426: LD_INT 1
14428: ARRAY
14429: PUSH
14430: LD_INT 3
14432: ARRAY
14433: PPUSH
14434: CALL_OW 428
14438: IFFALSE 14482
// begin ComDismantle ( i , HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) ) ;
14440: LD_VAR 0 15
14444: PPUSH
14445: LD_VAR 0 10
14449: PUSH
14450: LD_INT 1
14452: ARRAY
14453: PUSH
14454: LD_INT 2
14456: ARRAY
14457: PPUSH
14458: LD_VAR 0 10
14462: PUSH
14463: LD_INT 1
14465: ARRAY
14466: PUSH
14467: LD_INT 3
14469: ARRAY
14470: PPUSH
14471: CALL_OW 428
14475: PPUSH
14476: CALL_OW 167
// continue ;
14480: GO 13457
// end ; end ; if not HasTask ( i ) then
14482: LD_VAR 0 15
14486: PPUSH
14487: CALL_OW 314
14491: NOT
14492: IFFALSE 14555
// ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
14494: LD_VAR 0 15
14498: PPUSH
14499: LD_VAR 0 10
14503: PUSH
14504: LD_INT 1
14506: ARRAY
14507: PUSH
14508: LD_INT 1
14510: ARRAY
14511: PPUSH
14512: LD_VAR 0 10
14516: PUSH
14517: LD_INT 1
14519: ARRAY
14520: PUSH
14521: LD_INT 2
14523: ARRAY
14524: PPUSH
14525: LD_VAR 0 10
14529: PUSH
14530: LD_INT 1
14532: ARRAY
14533: PUSH
14534: LD_INT 3
14536: ARRAY
14537: PPUSH
14538: LD_VAR 0 10
14542: PUSH
14543: LD_INT 1
14545: ARRAY
14546: PUSH
14547: LD_INT 4
14549: ARRAY
14550: PPUSH
14551: CALL_OW 145
// end ; if tag = tCrates then
14555: LD_VAR 0 21
14559: PUSH
14560: LD_INT 2
14562: EQUAL
14563: IFFALSE 14778
// begin cr := GetListOfCratesInArea ( area ) ;
14565: LD_ADDR_VAR 0 23
14569: PUSH
14570: LD_VAR 0 2
14574: PPUSH
14575: CALL_OW 435
14579: ST_TO_ADDR
// if cratesArea then
14580: LD_VAR 0 3
14584: IFFALSE 14607
// cr := cr union GetListOfCratesInArea ( cratesArea ) ;
14586: LD_ADDR_VAR 0 23
14590: PUSH
14591: LD_VAR 0 23
14595: PUSH
14596: LD_VAR 0 3
14600: PPUSH
14601: CALL_OW 435
14605: UNION
14606: ST_TO_ADDR
// if IsInUnit ( i ) then
14607: LD_VAR 0 15
14611: PPUSH
14612: CALL_OW 310
14616: IFFALSE 14629
// begin ComExitBuilding ( i ) ;
14618: LD_VAR 0 15
14622: PPUSH
14623: CALL_OW 122
// continue ;
14627: GO 13457
// end ; if not cr then
14629: LD_VAR 0 23
14633: NOT
14634: IFFALSE 14650
// begin SetTag ( i , 0 ) ;
14636: LD_VAR 0 15
14640: PPUSH
14641: LD_INT 0
14643: PPUSH
14644: CALL_OW 109
// continue ;
14648: GO 13457
// end ; if cr and not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) and ValidHex ( cr [ 1 ] , cr [ 2 ] ) then
14650: LD_VAR 0 23
14654: IFFALSE 14668
14656: PUSH
14657: LD_VAR 0 15
14661: PPUSH
14662: CALL_OW 314
14666: NOT
14667: AND
14668: IFFALSE 14723
14670: PUSH
14671: LD_INT 81
14673: PUSH
14674: LD_VAR 0 1
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: PUSH
14683: LD_INT 92
14685: PUSH
14686: LD_VAR 0 23
14690: PUSH
14691: LD_INT 1
14693: ARRAY
14694: PUSH
14695: LD_VAR 0 23
14699: PUSH
14700: LD_INT 2
14702: ARRAY
14703: PUSH
14704: LD_INT 12
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PPUSH
14717: CALL_OW 69
14721: NOT
14722: AND
14723: IFFALSE 14749
14725: PUSH
14726: LD_VAR 0 23
14730: PUSH
14731: LD_INT 1
14733: ARRAY
14734: PPUSH
14735: LD_VAR 0 23
14739: PUSH
14740: LD_INT 2
14742: ARRAY
14743: PPUSH
14744: CALL_OW 488
14748: AND
14749: IFFALSE 14778
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
14751: LD_VAR 0 15
14755: PPUSH
14756: LD_VAR 0 23
14760: PUSH
14761: LD_INT 1
14763: ARRAY
14764: PPUSH
14765: LD_VAR 0 23
14769: PUSH
14770: LD_INT 2
14772: ARRAY
14773: PPUSH
14774: CALL_OW 117
// end ; end ;
14778: GO 13457
14780: POP
14781: POP
// end ; if vehicles then
14782: LD_VAR 0 7
14786: IFFALSE 15848
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ru_crane ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , us_cargo_bay ] ] ] , [ f_ok ] ] ) ;
14788: LD_ADDR_VAR 0 7
14792: PUSH
14793: LD_VAR 0 7
14797: PPUSH
14798: LD_INT 3
14800: PUSH
14801: LD_INT 2
14803: PUSH
14804: LD_INT 34
14806: PUSH
14807: LD_INT 52
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PUSH
14814: LD_INT 34
14816: PUSH
14817: LD_INT 51
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: LD_INT 34
14826: PUSH
14827: LD_INT 13
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: LD_INT 34
14836: PUSH
14837: LD_INT 12
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: LD_INT 50
14857: PUSH
14858: EMPTY
14859: LIST
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PPUSH
14865: CALL_OW 72
14869: ST_TO_ADDR
// if vehicles then
14870: LD_VAR 0 7
14874: IFFALSE 15848
// begin for i in vehicles do
14876: LD_ADDR_VAR 0 15
14880: PUSH
14881: LD_VAR 0 7
14885: PUSH
14886: FOR_IN
14887: IFFALSE 15846
// begin tag := GetTag ( i ) ;
14889: LD_ADDR_VAR 0 21
14893: PUSH
14894: LD_VAR 0 15
14898: PPUSH
14899: CALL_OW 110
14903: ST_TO_ADDR
// if not tag then
14904: LD_VAR 0 21
14908: NOT
14909: IFFALSE 15046
// begin if GetControl ( i ) = control_manual then
14911: LD_VAR 0 15
14915: PPUSH
14916: CALL_OW 263
14920: PUSH
14921: LD_INT 1
14923: EQUAL
14924: IFFALSE 15032
// begin drivers := UnitFilter ( mech , [ f_tag , tMech ] ) ;
14926: LD_ADDR_VAR 0 26
14930: PUSH
14931: LD_VAR 0 20
14935: PPUSH
14936: LD_INT 120
14938: PUSH
14939: LD_INT 7
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PPUSH
14946: CALL_OW 72
14950: ST_TO_ADDR
// if not drivers then
14951: LD_VAR 0 26
14955: NOT
14956: IFFALSE 15012
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
14958: LD_ADDR_VAR 0 26
14962: PUSH
14963: LD_VAR 0 20
14967: PPUSH
14968: LD_INT 3
14970: PUSH
14971: LD_INT 120
14973: PUSH
14974: LD_INT 7
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PPUSH
14985: CALL_OW 72
14989: ST_TO_ADDR
// if drivers then
14990: LD_VAR 0 26
14994: IFFALSE 15012
// begin SetTag ( drivers [ 1 ] , tMech ) ;
14996: LD_VAR 0 26
15000: PUSH
15001: LD_INT 1
15003: ARRAY
15004: PPUSH
15005: LD_INT 7
15007: PPUSH
15008: CALL_OW 109
// end ; end ; if drivers then
15012: LD_VAR 0 26
15016: IFFALSE 15030
// SetTag ( i , tBusy ) ;
15018: LD_VAR 0 15
15022: PPUSH
15023: LD_INT 8
15025: PPUSH
15026: CALL_OW 109
// continue ;
15030: GO 14886
// end ; SetTag ( i , tBusy ) ;
15032: LD_VAR 0 15
15036: PPUSH
15037: LD_INT 8
15039: PPUSH
15040: CALL_OW 109
// end else
15044: GO 15844
// if tag = tBusy then
15046: LD_VAR 0 21
15050: PUSH
15051: LD_INT 8
15053: EQUAL
15054: IFFALSE 15309
// begin if GetLives ( i ) = 1000 then
15056: LD_VAR 0 15
15060: PPUSH
15061: CALL_OW 256
15065: PUSH
15066: LD_INT 1000
15068: EQUAL
15069: IFFALSE 15307
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
15071: LD_VAR 0 15
15075: PPUSH
15076: CALL_OW 263
15080: PUSH
15081: LD_INT 1
15083: EQUAL
15084: IFFALSE 15098
15086: PUSH
15087: LD_VAR 0 15
15091: PPUSH
15092: CALL_OW 311
15096: NOT
15097: AND
15098: IFFALSE 15275
// begin drivers := UnitFilter ( mech , [ f_tag , tMech ] ) ;
15100: LD_ADDR_VAR 0 26
15104: PUSH
15105: LD_VAR 0 20
15109: PPUSH
15110: LD_INT 120
15112: PUSH
15113: LD_INT 7
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: PPUSH
15120: CALL_OW 72
15124: ST_TO_ADDR
// if not drivers then
15125: LD_VAR 0 26
15129: NOT
15130: IFFALSE 15146
// begin SetTag ( i , 0 ) ;
15132: LD_VAR 0 15
15136: PPUSH
15137: LD_INT 0
15139: PPUSH
15140: CALL_OW 109
// continue ;
15144: GO 14886
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
15146: LD_VAR 0 26
15150: PUSH
15151: LD_INT 1
15153: ARRAY
15154: PPUSH
15155: CALL_OW 310
15159: IFFALSE 15177
15161: PUSH
15162: LD_VAR 0 26
15166: PUSH
15167: LD_INT 1
15169: ARRAY
15170: PPUSH
15171: CALL 61923 0 1
15175: NOT
15176: AND
15177: IFFALSE 15192
// ComExitBuilding ( drivers [ 1 ] ) ;
15179: LD_VAR 0 26
15183: PUSH
15184: LD_INT 1
15186: ARRAY
15187: PPUSH
15188: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
15192: LD_VAR 0 7
15196: PPUSH
15197: LD_INT 120
15199: PUSH
15200: LD_INT 3
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: PPUSH
15207: CALL_OW 72
15211: IFFALSE 15229
15213: PUSH
15214: LD_VAR 0 26
15218: PUSH
15219: LD_INT 1
15221: ARRAY
15222: PPUSH
15223: CALL_OW 314
15227: NOT
15228: AND
15229: IFTRUE 15253
15231: PUSH
15232: LD_VAR 0 7
15236: PPUSH
15237: LD_INT 120
15239: PUSH
15240: LD_INT 3
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: PPUSH
15247: CALL_OW 72
15251: NOT
15252: OR
15253: IFFALSE 15273
// ComEnterUnit ( drivers [ 1 ] , i ) ;
15255: LD_VAR 0 26
15259: PUSH
15260: LD_INT 1
15262: ARRAY
15263: PPUSH
15264: LD_VAR 0 15
15268: PPUSH
15269: CALL_OW 120
// continue ;
15273: GO 14886
// end ; if allowToPatrol then
15275: LD_VAR 0 13
15279: IFFALSE 15295
// SetTag ( i , tPatrol ) else
15281: LD_VAR 0 15
15285: PPUSH
15286: LD_INT 15
15288: PPUSH
15289: CALL_OW 109
15293: GO 15307
// SetTag ( i , tAttack ) ;
15295: LD_VAR 0 15
15299: PPUSH
15300: LD_INT 13
15302: PPUSH
15303: CALL_OW 109
// end ; end else
15307: GO 15844
// if tag = tPatrol then
15309: LD_VAR 0 21
15313: PUSH
15314: LD_INT 15
15316: EQUAL
15317: IFFALSE 15511
// begin if GetLives ( i ) < 650 then
15319: LD_VAR 0 15
15323: PPUSH
15324: CALL_OW 256
15328: PUSH
15329: LD_INT 650
15331: LESS
15332: IFFALSE 15375
// begin SetTag ( i , tVehRepair ) ;
15334: LD_VAR 0 15
15338: PPUSH
15339: LD_INT 9
15341: PPUSH
15342: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
15346: LD_VAR 0 15
15350: PPUSH
15351: LD_VAR 0 12
15355: PUSH
15356: LD_INT 1
15358: ARRAY
15359: PPUSH
15360: LD_VAR 0 12
15364: PUSH
15365: LD_INT 2
15367: ARRAY
15368: PPUSH
15369: CALL_OW 111
// continue ;
15373: GO 14886
// end ; if GetEngine ( i ) = engine_combustion then
15375: LD_VAR 0 15
15379: PPUSH
15380: CALL_OW 262
15384: PUSH
15385: LD_INT 1
15387: EQUAL
15388: IFFALSE 15435
// if GetFuel ( i ) < 30 then
15390: LD_VAR 0 15
15394: PPUSH
15395: CALL_OW 261
15399: PUSH
15400: LD_INT 30
15402: LESS
15403: IFFALSE 15435
// begin ComMoveUnit ( i , depot ) ;
15405: LD_VAR 0 15
15409: PPUSH
15410: LD_VAR 0 35
15414: PPUSH
15415: CALL_OW 112
// AddComRefuel ( i , depot ) ;
15419: LD_VAR 0 15
15423: PPUSH
15424: LD_VAR 0 35
15428: PPUSH
15429: CALL_OW 210
// continue ;
15433: GO 14886
// end ; if GetDistUnitXY ( i , allowToPatrol [ 1 ] , allowToPatrol [ 2 ] ) > 12 and not HasTask ( i ) then
15435: LD_VAR 0 15
15439: PPUSH
15440: LD_VAR 0 13
15444: PUSH
15445: LD_INT 1
15447: ARRAY
15448: PPUSH
15449: LD_VAR 0 13
15453: PUSH
15454: LD_INT 2
15456: ARRAY
15457: PPUSH
15458: CALL_OW 297
15462: PUSH
15463: LD_INT 12
15465: GREATER
15466: IFFALSE 15480
15468: PUSH
15469: LD_VAR 0 15
15473: PPUSH
15474: CALL_OW 314
15478: NOT
15479: AND
15480: IFFALSE 15509
// ComAgressiveMove ( i , allowToPatrol [ 1 ] , allowToPatrol [ 2 ] ) ;
15482: LD_VAR 0 15
15486: PPUSH
15487: LD_VAR 0 13
15491: PUSH
15492: LD_INT 1
15494: ARRAY
15495: PPUSH
15496: LD_VAR 0 13
15500: PUSH
15501: LD_INT 2
15503: ARRAY
15504: PPUSH
15505: CALL_OW 114
// end else
15509: GO 15844
// if tag = tAttack then
15511: LD_VAR 0 21
15515: PUSH
15516: LD_INT 13
15518: EQUAL
15519: IFFALSE 15701
// begin enemy := enemyInBase ;
15521: LD_ADDR_VAR 0 28
15525: PUSH
15526: LD_VAR 0 29
15530: ST_TO_ADDR
// if not enemy then
15531: LD_VAR 0 28
15535: NOT
15536: IFFALSE 15548
// enemy := enemyOuterBase ;
15538: LD_ADDR_VAR 0 28
15542: PUSH
15543: LD_VAR 0 30
15547: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
15548: LD_VAR 0 28
15552: NOT
15553: IFFALSE 15588
15555: PUSH
15556: LD_VAR 0 15
15560: PPUSH
15561: LD_VAR 0 12
15565: PUSH
15566: LD_INT 1
15568: ARRAY
15569: PPUSH
15570: LD_VAR 0 12
15574: PUSH
15575: LD_INT 2
15577: ARRAY
15578: PPUSH
15579: CALL_OW 297
15583: PUSH
15584: LD_INT 10
15586: GREATER
15587: AND
15588: IFFALSE 15619
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
15590: LD_VAR 0 15
15594: PPUSH
15595: LD_VAR 0 12
15599: PUSH
15600: LD_INT 1
15602: ARRAY
15603: PPUSH
15604: LD_VAR 0 12
15608: PUSH
15609: LD_INT 2
15611: ARRAY
15612: PPUSH
15613: CALL_OW 111
// continue ;
15617: GO 14886
// end ; if GetLives ( i ) < 650 then
15619: LD_VAR 0 15
15623: PPUSH
15624: CALL_OW 256
15628: PUSH
15629: LD_INT 650
15631: LESS
15632: IFFALSE 15675
// begin SetTag ( i , tVehRepair ) ;
15634: LD_VAR 0 15
15638: PPUSH
15639: LD_INT 9
15641: PPUSH
15642: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
15646: LD_VAR 0 15
15650: PPUSH
15651: LD_VAR 0 12
15655: PUSH
15656: LD_INT 1
15658: ARRAY
15659: PPUSH
15660: LD_VAR 0 12
15664: PUSH
15665: LD_INT 2
15667: ARRAY
15668: PPUSH
15669: CALL_OW 111
// continue ;
15673: GO 14886
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
15675: LD_VAR 0 15
15679: PPUSH
15680: LD_VAR 0 28
15684: PPUSH
15685: LD_VAR 0 15
15689: PPUSH
15690: CALL_OW 74
15694: PPUSH
15695: CALL_OW 115
// end else
15699: GO 15844
// if tag = tVehRepair then
15701: LD_VAR 0 21
15705: PUSH
15706: LD_INT 9
15708: EQUAL
15709: IFFALSE 15844
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
15711: LD_VAR 0 15
15715: PPUSH
15716: LD_VAR 0 12
15720: PUSH
15721: LD_INT 1
15723: ARRAY
15724: PPUSH
15725: LD_VAR 0 12
15729: PUSH
15730: LD_INT 2
15732: ARRAY
15733: PPUSH
15734: CALL_OW 297
15738: PUSH
15739: LD_INT 10
15741: GREATER
15742: IFFALSE 15773
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
15744: LD_VAR 0 15
15748: PPUSH
15749: LD_VAR 0 12
15753: PUSH
15754: LD_INT 1
15756: ARRAY
15757: PPUSH
15758: LD_VAR 0 12
15762: PUSH
15763: LD_INT 2
15765: ARRAY
15766: PPUSH
15767: CALL_OW 111
// continue ;
15771: GO 14886
// end ; if GetLives ( i ) = 1000 then
15773: LD_VAR 0 15
15777: PPUSH
15778: CALL_OW 256
15782: PUSH
15783: LD_INT 1000
15785: EQUAL
15786: IFFALSE 15802
// begin SetTag ( i , tBusy ) ;
15788: LD_VAR 0 15
15792: PPUSH
15793: LD_INT 8
15795: PPUSH
15796: CALL_OW 109
// continue ;
15800: GO 14886
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
15802: LD_VAR 0 15
15806: PPUSH
15807: CALL_OW 263
15811: PUSH
15812: LD_INT 1
15814: EQUAL
15815: IFFALSE 15828
15817: PUSH
15818: LD_VAR 0 15
15822: PPUSH
15823: CALL_OW 311
15827: AND
15828: IFFALSE 15844
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
15830: LD_VAR 0 15
15834: PPUSH
15835: CALL_OW 311
15839: PPUSH
15840: CALL 66057 0 1
// end ; end ;
15844: GO 14886
15846: POP
15847: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
15848: LD_ADDR_VAR 0 25
15852: PUSH
15853: LD_VAR 0 6
15857: PPUSH
15858: LD_INT 2
15860: PUSH
15861: LD_INT 25
15863: PUSH
15864: LD_INT 1
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: LD_INT 25
15873: PUSH
15874: LD_INT 8
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 25
15883: PUSH
15884: LD_INT 5
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: PUSH
15891: LD_INT 25
15893: PUSH
15894: LD_INT 9
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 50
15910: PUSH
15911: EMPTY
15912: LIST
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PPUSH
15918: CALL_OW 72
15922: ST_TO_ADDR
// if sol then
15923: LD_VAR 0 25
15927: IFFALSE 16753
// begin if enemyInBase then
15929: LD_VAR 0 29
15933: IFFALSE 16112
// begin for i in sol do
15935: LD_ADDR_VAR 0 15
15939: PUSH
15940: LD_VAR 0 25
15944: PUSH
15945: FOR_IN
15946: IFFALSE 16108
// begin tw := IsInUnit ( i ) ;
15948: LD_ADDR_VAR 0 22
15952: PUSH
15953: LD_VAR 0 15
15957: PPUSH
15958: CALL_OW 310
15962: ST_TO_ADDR
// if tw then
15963: LD_VAR 0 22
15967: IFFALSE 16050
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
15969: LD_VAR 0 22
15973: PUSH
15974: LD_INT 22
15976: PUSH
15977: LD_VAR 0 1
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PUSH
15986: LD_INT 101
15988: PUSH
15989: LD_VAR 0 36
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 2
16000: PUSH
16001: LD_INT 30
16003: PUSH
16004: LD_INT 32
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 30
16013: PUSH
16014: LD_INT 31
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: LIST
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: LIST
16030: PPUSH
16031: CALL_OW 69
16035: IN
16036: NOT
16037: IFFALSE 16048
// ComExitBuilding ( i ) ;
16039: LD_VAR 0 15
16043: PPUSH
16044: CALL_OW 122
// end else
16048: GO 16106
// if IsInArea ( i , area ) then
16050: LD_VAR 0 15
16054: PPUSH
16055: LD_VAR 0 2
16059: PPUSH
16060: CALL_OW 308
16064: IFFALSE 16092
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
16066: LD_VAR 0 15
16070: PPUSH
16071: LD_VAR 0 29
16075: PPUSH
16076: LD_VAR 0 15
16080: PPUSH
16081: CALL_OW 74
16085: PPUSH
16086: CALL_OW 115
16090: GO 16106
// ComMoveToArea ( i , area ) ;
16092: LD_VAR 0 15
16096: PPUSH
16097: LD_VAR 0 2
16101: PPUSH
16102: CALL_OW 113
// end ;
16106: GO 15945
16108: POP
16109: POP
// end else
16110: GO 16753
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
16112: LD_ADDR_VAR 0 31
16116: PUSH
16117: LD_VAR 0 2
16121: PPUSH
16122: LD_INT 3
16124: PUSH
16125: LD_INT 62
16127: PUSH
16128: EMPTY
16129: LIST
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PUSH
16135: LD_INT 3
16137: PUSH
16138: LD_INT 57
16140: PUSH
16141: EMPTY
16142: LIST
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 50
16150: PUSH
16151: EMPTY
16152: LIST
16153: PUSH
16154: LD_INT 2
16156: PUSH
16157: LD_INT 30
16159: PUSH
16160: LD_INT 32
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 30
16169: PUSH
16170: LD_INT 4
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: LD_INT 30
16179: PUSH
16180: LD_INT 5
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: LD_INT 30
16189: PUSH
16190: LD_INT 31
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: PPUSH
16210: CALL_OW 70
16214: ST_TO_ADDR
// emptyTowers := [ ] ;
16215: LD_ADDR_VAR 0 33
16219: PUSH
16220: EMPTY
16221: ST_TO_ADDR
// if empty then
16222: LD_VAR 0 31
16226: IFFALSE 16299
// emptyTowers := UnitFilter ( empty , [ [ f_not , [ f_tag , tTower ] ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
16228: LD_ADDR_VAR 0 33
16232: PUSH
16233: LD_VAR 0 31
16237: PPUSH
16238: LD_INT 3
16240: PUSH
16241: LD_INT 120
16243: PUSH
16244: LD_INT 10
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PUSH
16255: LD_INT 50
16257: PUSH
16258: EMPTY
16259: LIST
16260: PUSH
16261: LD_INT 2
16263: PUSH
16264: LD_INT 30
16266: PUSH
16267: LD_INT 32
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PUSH
16274: LD_INT 30
16276: PUSH
16277: LD_INT 33
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: LIST
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: LIST
16293: PPUSH
16294: CALL_OW 72
16298: ST_TO_ADDR
// for i in sol do
16299: LD_ADDR_VAR 0 15
16303: PUSH
16304: LD_VAR 0 25
16308: PUSH
16309: FOR_IN
16310: IFFALSE 16751
// begin tag := GetTag ( i ) ;
16312: LD_ADDR_VAR 0 21
16316: PUSH
16317: LD_VAR 0 15
16321: PPUSH
16322: CALL_OW 110
16326: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
16327: LD_VAR 0 15
16331: PPUSH
16332: CALL_OW 256
16336: PUSH
16337: LD_INT 1000
16339: LESS
16340: IFFALSE 16352
16342: PUSH
16343: LD_VAR 0 21
16347: PUSH
16348: LD_INT 1
16350: NONEQUAL
16351: AND
16352: IFFALSE 16404
// begin SetTag ( i , tHeal ) ;
16354: LD_VAR 0 15
16358: PPUSH
16359: LD_INT 1
16361: PPUSH
16362: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
16366: LD_VAR 0 15
16370: PPUSH
16371: LD_VAR 0 11
16375: PUSH
16376: LD_INT 1
16378: ARRAY
16379: PPUSH
16380: LD_VAR 0 11
16384: PUSH
16385: LD_INT 2
16387: ARRAY
16388: PPUSH
16389: CALL_OW 111
// AddComHold ( i ) ;
16393: LD_VAR 0 15
16397: PPUSH
16398: CALL_OW 200
// continue ;
16402: GO 16309
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
16404: LD_VAR 0 15
16408: PPUSH
16409: CALL_OW 256
16413: PUSH
16414: LD_INT 1000
16416: EQUAL
16417: IFFALSE 16429
16419: PUSH
16420: LD_VAR 0 21
16424: PUSH
16425: LD_INT 1
16427: EQUAL
16428: AND
16429: IFFALSE 16445
// begin SetTag ( i , 0 ) ;
16431: LD_VAR 0 15
16435: PPUSH
16436: LD_INT 0
16438: PPUSH
16439: CALL_OW 109
// continue ;
16443: GO 16309
// end ; if HasTask ( i ) then
16445: LD_VAR 0 15
16449: PPUSH
16450: CALL_OW 314
16454: IFFALSE 16458
// continue ;
16456: GO 16309
// if not IsInUnit ( i ) and not tag and empty then
16458: LD_VAR 0 15
16462: PPUSH
16463: CALL_OW 310
16467: NOT
16468: IFFALSE 16477
16470: PUSH
16471: LD_VAR 0 21
16475: NOT
16476: AND
16477: IFFALSE 16485
16479: PUSH
16480: LD_VAR 0 31
16484: AND
16485: IFFALSE 16525
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
16487: LD_VAR 0 15
16491: PPUSH
16492: LD_VAR 0 31
16496: PUSH
16497: LD_INT 1
16499: ARRAY
16500: PPUSH
16501: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
16505: LD_ADDR_VAR 0 31
16509: PUSH
16510: LD_VAR 0 31
16514: PPUSH
16515: LD_INT 1
16517: PPUSH
16518: CALL_OW 3
16522: ST_TO_ADDR
// continue ;
16523: GO 16309
// end ; if IsInUnit ( i ) and not tag and emptyTowers then
16525: LD_VAR 0 15
16529: PPUSH
16530: CALL_OW 310
16534: IFFALSE 16543
16536: PUSH
16537: LD_VAR 0 21
16541: NOT
16542: AND
16543: IFFALSE 16551
16545: PUSH
16546: LD_VAR 0 33
16550: AND
16551: IFFALSE 16749
// begin if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
16553: LD_VAR 0 15
16557: PPUSH
16558: CALL_OW 310
16562: PPUSH
16563: CALL_OW 266
16567: PUSH
16568: LD_INT 32
16570: PUSH
16571: LD_INT 31
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: IN
16578: IFFALSE 16582
// continue ;
16580: GO 16309
// SetTag ( i , tTower ) ;
16582: LD_VAR 0 15
16586: PPUSH
16587: LD_INT 10
16589: PPUSH
16590: CALL_OW 109
// SetTag ( emptyTowers [ 1 ] , tTower ) ;
16594: LD_VAR 0 33
16598: PUSH
16599: LD_INT 1
16601: ARRAY
16602: PPUSH
16603: LD_INT 10
16605: PPUSH
16606: CALL_OW 109
// ComExit ( i ) ;
16610: LD_VAR 0 15
16614: PPUSH
16615: CALL 64741 0 1
// AddComEnterUnit ( i , emptyTowers [ 1 ] ) ;
16619: LD_VAR 0 15
16623: PPUSH
16624: LD_VAR 0 33
16628: PUSH
16629: LD_INT 1
16631: ARRAY
16632: PPUSH
16633: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
16637: LD_INT 35
16639: PPUSH
16640: CALL_OW 67
// if not HasTask ( i ) then
16644: LD_VAR 0 15
16648: PPUSH
16649: CALL_OW 314
16653: NOT
16654: IFFALSE 16674
// ComEnterUnit ( i , emptyTowers [ 1 ] ) ;
16656: LD_VAR 0 15
16660: PPUSH
16661: LD_VAR 0 33
16665: PUSH
16666: LD_INT 1
16668: ARRAY
16669: PPUSH
16670: CALL_OW 120
// if not IsEmpty ( emptyTowers [ 1 ] ) then
16674: LD_VAR 0 33
16678: PUSH
16679: LD_INT 1
16681: ARRAY
16682: PPUSH
16683: CALL 28389 0 1
16687: NOT
16688: IFFALSE 16692
// break ;
16690: GO 16717
// until IsInUnit ( i ) or not IsOk ( i ) ;
16692: LD_VAR 0 15
16696: PPUSH
16697: CALL_OW 310
16701: IFTRUE 16715
16703: PUSH
16704: LD_VAR 0 15
16708: PPUSH
16709: CALL_OW 302
16713: NOT
16714: OR
16715: IFFALSE 16637
// SetTag ( i , 0 ) ;
16717: LD_VAR 0 15
16721: PPUSH
16722: LD_INT 0
16724: PPUSH
16725: CALL_OW 109
// SetTag ( emptyTowers [ 1 ] , 0 ) ;
16729: LD_VAR 0 33
16733: PUSH
16734: LD_INT 1
16736: ARRAY
16737: PPUSH
16738: LD_INT 0
16740: PPUSH
16741: CALL_OW 109
// exit ;
16745: POP
16746: POP
16747: GO 16753
// end ; end ;
16749: GO 16309
16751: POP
16752: POP
// end ; end ; end ; end_of_file
16753: LD_VAR 0 14
16757: RET
// export function Action ; var i , c , tmp ; begin
16758: LD_INT 0
16760: PPUSH
16761: PPUSH
16762: PPUSH
16763: PPUSH
// InGameOn ;
16764: CALL_OW 8
// RevealFogArea ( 3 , prevMissionFogArea ) ;
16768: LD_INT 3
16770: PPUSH
16771: LD_INT 5
16773: PPUSH
16774: CALL_OW 332
// PlaceHumanInUnit ( Kurin , kirovDepot ) ;
16778: LD_EXP 33
16782: PPUSH
16783: LD_EXP 45
16787: PPUSH
16788: CALL_OW 52
// PlaceHumanInUnit ( Burlak , kirovDepot ) ;
16792: LD_EXP 29
16796: PPUSH
16797: LD_EXP 45
16801: PPUSH
16802: CALL_OW 52
// if Belkov then
16806: LD_EXP 31
16810: IFFALSE 16826
// PlaceHumanInUnit ( Belkov , kirovDepot ) ;
16812: LD_EXP 31
16816: PPUSH
16817: LD_EXP 45
16821: PPUSH
16822: CALL_OW 52
// PlaceHumanInUnit ( Popov , kirovDepot ) ;
16826: LD_EXP 35
16830: PPUSH
16831: LD_EXP 45
16835: PPUSH
16836: CALL_OW 52
// CenterNowOnXY ( 159 , 103 ) ;
16840: LD_INT 159
16842: PPUSH
16843: LD_INT 103
16845: PPUSH
16846: CALL_OW 86
// wait ( 0 0$0.3 ) ;
16850: LD_INT 10
16852: PPUSH
16853: CALL_OW 67
// if not Belkov then
16857: LD_EXP 31
16861: NOT
16862: IFFALSE 16959
// begin Say ( Kurin , D1a-Kur-1 ) ;
16864: LD_EXP 33
16868: PPUSH
16869: LD_STRING D1a-Kur-1
16871: PPUSH
16872: CALL_OW 88
// if not belkovSaved then
16876: LD_EXP 6
16880: NOT
16881: IFFALSE 16907
// begin Say ( Burlak , D1a-Bur-1 ) ;
16883: LD_EXP 29
16887: PPUSH
16888: LD_STRING D1a-Bur-1
16890: PPUSH
16891: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
16895: LD_EXP 33
16899: PPUSH
16900: LD_STRING D1a-Kur-2
16902: PPUSH
16903: CALL_OW 88
// end ; if wasSelfish then
16907: LD_EXP 4
16911: IFFALSE 16925
// Say ( Kurin , D1a-Kur-2a ) ;
16913: LD_EXP 33
16917: PPUSH
16918: LD_STRING D1a-Kur-2a
16920: PPUSH
16921: CALL_OW 88
// hasProblem := true ;
16925: LD_ADDR_EXP 5
16929: PUSH
16930: LD_INT 1
16932: ST_TO_ADDR
// Say ( Kurin , D1a-Kur-2b ) ;
16933: LD_EXP 33
16937: PPUSH
16938: LD_STRING D1a-Kur-2b
16940: PPUSH
16941: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
16945: LD_EXP 29
16949: PPUSH
16950: LD_STRING D1a-Bur-2
16952: PPUSH
16953: CALL_OW 88
// end else
16957: GO 16995
// begin Say ( Kurin , D1b-Kur-1 ) ;
16959: LD_EXP 33
16963: PPUSH
16964: LD_STRING D1b-Kur-1
16966: PPUSH
16967: CALL_OW 88
// Say ( Belkov , D1b-Bel-1 ) ;
16971: LD_EXP 31
16975: PPUSH
16976: LD_STRING D1b-Bel-1
16978: PPUSH
16979: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
16983: LD_EXP 33
16987: PPUSH
16988: LD_STRING D1b-Kur-2
16990: PPUSH
16991: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
16995: LD_EXP 33
16999: PPUSH
17000: LD_STRING D2-Kur-1
17002: PPUSH
17003: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
17007: LD_EXP 29
17011: PPUSH
17012: LD_STRING D2-Bur-1
17014: PPUSH
17015: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
17019: LD_EXP 33
17023: PPUSH
17024: LD_STRING D2-Kur-2
17026: PPUSH
17027: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
17031: LD_EXP 29
17035: PPUSH
17036: LD_STRING D2-Bur-2
17038: PPUSH
17039: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
17043: LD_EXP 33
17047: PPUSH
17048: LD_STRING D2-Kur-3
17050: PPUSH
17051: CALL_OW 88
// wait ( 0 0$0.5 ) ;
17055: LD_INT 18
17057: PPUSH
17058: CALL_OW 67
// Say ( Popov , D2-Pop-3 ) ;
17062: LD_EXP 35
17066: PPUSH
17067: LD_STRING D2-Pop-3
17069: PPUSH
17070: CALL_OW 88
// Say ( Kurin , D2-Kur-4 ) ;
17074: LD_EXP 33
17078: PPUSH
17079: LD_STRING D2-Kur-4
17081: PPUSH
17082: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
17086: LD_EXP 29
17090: PPUSH
17091: LD_STRING D2-Bur-4
17093: PPUSH
17094: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
17098: LD_EXP 33
17102: PPUSH
17103: LD_STRING D2-Kur-5
17105: PPUSH
17106: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
17110: LD_EXP 29
17114: PPUSH
17115: LD_STRING D2-Bur-5
17117: PPUSH
17118: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
17122: LD_EXP 33
17126: PPUSH
17127: LD_STRING D2-Kur-6
17129: PPUSH
17130: CALL_OW 88
// beriaBaseSquad := CharacterSelection ( 1 , [ 7 , 6 , 6 , 5 ] [ Difficulty ] , [ 9 , 8 , 8 , 7 ] [ Difficulty ] , [ sel_change_class , Burlak , sel_changeable , sel_change_class ] ^ Belkov ^ Gnyevko ^ Kirilenkova ^ Kovalyuk ^ beriaTeam ^ [ sel_not_hired , sel_not_changeable , sel_dont_change_class , Kurin , Popov ] ^ [ sel_changeable , sel_change_class ] ^ kirovTeam , [ [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_mechanic , 0 ] , [ class_soldier , 2 ] ] ) ;
17134: LD_ADDR_EXP 39
17138: PUSH
17139: LD_STRING 1
17141: PPUSH
17142: LD_INT 7
17144: PUSH
17145: LD_INT 6
17147: PUSH
17148: LD_INT 6
17150: PUSH
17151: LD_INT 5
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: PUSH
17160: LD_OWVAR 67
17164: ARRAY
17165: PPUSH
17166: LD_INT 9
17168: PUSH
17169: LD_INT 8
17171: PUSH
17172: LD_INT 8
17174: PUSH
17175: LD_INT 7
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: PUSH
17184: LD_OWVAR 67
17188: ARRAY
17189: PPUSH
17190: LD_INT -5
17192: PUSH
17193: LD_EXP 29
17197: PUSH
17198: LD_INT -3
17200: PUSH
17201: LD_INT -5
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: PUSH
17210: LD_EXP 31
17214: ADD
17215: PUSH
17216: LD_EXP 30
17220: ADD
17221: PUSH
17222: LD_EXP 32
17226: ADD
17227: PUSH
17228: LD_EXP 34
17232: ADD
17233: PUSH
17234: LD_EXP 43
17238: ADD
17239: PUSH
17240: LD_INT -2
17242: PUSH
17243: LD_INT -4
17245: PUSH
17246: LD_INT -6
17248: PUSH
17249: LD_EXP 33
17253: PUSH
17254: LD_EXP 35
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: ADD
17266: PUSH
17267: LD_INT -3
17269: PUSH
17270: LD_INT -5
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: ADD
17277: PUSH
17278: LD_EXP 42
17282: ADD
17283: PPUSH
17284: LD_INT 2
17286: PUSH
17287: LD_INT 1
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 4
17296: PUSH
17297: LD_INT 1
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 3
17306: PUSH
17307: LD_INT 0
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 1
17316: PUSH
17317: LD_INT 2
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: PPUSH
17330: CALL_OW 42
17334: ST_TO_ADDR
// stop_talking := true ;
17335: LD_ADDR_OWVAR 56
17339: PUSH
17340: LD_INT 1
17342: ST_TO_ADDR
// ComExitBuilding ( Burlak ) ;
17343: LD_EXP 29
17347: PPUSH
17348: CALL_OW 122
// AddComMoveXY ( Burlak , 123 , 98 ) ;
17352: LD_EXP 29
17356: PPUSH
17357: LD_INT 123
17359: PPUSH
17360: LD_INT 98
17362: PPUSH
17363: CALL_OW 171
// for i in beriaBaseSquad do
17367: LD_ADDR_VAR 0 2
17371: PUSH
17372: LD_EXP 39
17376: PUSH
17377: FOR_IN
17378: IFFALSE 17453
// begin SetSide ( i , 3 ) ;
17380: LD_VAR 0 2
17384: PPUSH
17385: LD_INT 3
17387: PPUSH
17388: CALL_OW 235
// if not IsPlaced ( i ) then
17392: LD_VAR 0 2
17396: PPUSH
17397: CALL_OW 305
17401: NOT
17402: IFFALSE 17427
// PlaceUnitXYR ( i , 112 , 98 , 3 , false ) else
17404: LD_VAR 0 2
17408: PPUSH
17409: LD_INT 112
17411: PPUSH
17412: LD_INT 98
17414: PPUSH
17415: LD_INT 3
17417: PPUSH
17418: LD_INT 0
17420: PPUSH
17421: CALL_OW 50
17425: GO 17451
// begin ComExit ( i ) ;
17427: LD_VAR 0 2
17431: PPUSH
17432: CALL 64741 0 1
// AddComMoveXY ( i , 123 , 98 ) ;
17436: LD_VAR 0 2
17440: PPUSH
17441: LD_INT 123
17443: PPUSH
17444: LD_INT 98
17446: PPUSH
17447: CALL_OW 171
// end ; end ;
17451: GO 17377
17453: POP
17454: POP
// stop_talking := false ;
17455: LD_ADDR_OWVAR 56
17459: PUSH
17460: LD_INT 0
17462: ST_TO_ADDR
// wait ( 0 0$2 ) ;
17463: LD_INT 70
17465: PPUSH
17466: CALL_OW 67
// CenterOnXY ( 110 , 97 ) ;
17470: LD_INT 110
17472: PPUSH
17473: LD_INT 97
17475: PPUSH
17476: CALL_OW 84
// if Belkov and not Belkov in beriaBaseSquad then
17480: LD_EXP 31
17484: IFFALSE 17499
17486: PUSH
17487: LD_EXP 31
17491: PUSH
17492: LD_EXP 39
17496: IN
17497: NOT
17498: AND
17499: IFFALSE 17521
// popovTeam := Join ( popovTeam , Belkov ) ;
17501: LD_ADDR_EXP 44
17505: PUSH
17506: LD_EXP 44
17510: PPUSH
17511: LD_EXP 31
17515: PPUSH
17516: CALL 64343 0 2
17520: ST_TO_ADDR
// if Gnyevko and not Gnyevko in beriaBaseSquad then
17521: LD_EXP 30
17525: IFFALSE 17540
17527: PUSH
17528: LD_EXP 30
17532: PUSH
17533: LD_EXP 39
17537: IN
17538: NOT
17539: AND
17540: IFFALSE 17562
// popovTeam := Join ( popovTeam , Gnyevko ) ;
17542: LD_ADDR_EXP 44
17546: PUSH
17547: LD_EXP 44
17551: PPUSH
17552: LD_EXP 30
17556: PPUSH
17557: CALL 64343 0 2
17561: ST_TO_ADDR
// if Kirilenkova and not Kirilenkova in beriaBaseSquad then
17562: LD_EXP 32
17566: IFFALSE 17581
17568: PUSH
17569: LD_EXP 32
17573: PUSH
17574: LD_EXP 39
17578: IN
17579: NOT
17580: AND
17581: IFFALSE 17603
// popovTeam := Join ( popovTeam , Kirilenkova ) ;
17583: LD_ADDR_EXP 44
17587: PUSH
17588: LD_EXP 44
17592: PPUSH
17593: LD_EXP 32
17597: PPUSH
17598: CALL 64343 0 2
17602: ST_TO_ADDR
// if Kovalyuk and not Kovalyuk in beriaBaseSquad then
17603: LD_EXP 34
17607: IFFALSE 17622
17609: PUSH
17610: LD_EXP 34
17614: PUSH
17615: LD_EXP 39
17619: IN
17620: NOT
17621: AND
17622: IFFALSE 17644
// popovTeam := Join ( popovTeam , Kovalyuk ) ;
17624: LD_ADDR_EXP 44
17628: PUSH
17629: LD_EXP 44
17633: PPUSH
17634: LD_EXP 34
17638: PPUSH
17639: CALL 64343 0 2
17643: ST_TO_ADDR
// for i in beriaTeam do
17644: LD_ADDR_VAR 0 2
17648: PUSH
17649: LD_EXP 43
17653: PUSH
17654: FOR_IN
17655: IFFALSE 17692
// if not i in beriaBaseSquad then
17657: LD_VAR 0 2
17661: PUSH
17662: LD_EXP 39
17666: IN
17667: NOT
17668: IFFALSE 17690
// popovTeam := Join ( popovTeam , i ) ;
17670: LD_ADDR_EXP 44
17674: PUSH
17675: LD_EXP 44
17679: PPUSH
17680: LD_VAR 0 2
17684: PPUSH
17685: CALL 64343 0 2
17689: ST_TO_ADDR
17690: GO 17654
17692: POP
17693: POP
// if popovTeam < 3 then
17694: LD_EXP 44
17698: PUSH
17699: LD_INT 3
17701: LESS
17702: IFFALSE 17780
// for i := Count ( popovTeam ) to 3 do
17704: LD_ADDR_VAR 0 2
17708: PUSH
17709: DOUBLE
17710: LD_EXP 44
17714: PPUSH
17715: CALL 28367 0 1
17719: DEC
17720: ST_TO_ADDR
17721: LD_INT 3
17723: PUSH
17724: FOR_TO
17725: IFFALSE 17778
// begin uc_side := 6 ;
17727: LD_ADDR_OWVAR 20
17731: PUSH
17732: LD_INT 6
17734: ST_TO_ADDR
// uc_nation := nation_russian ;
17735: LD_ADDR_OWVAR 21
17739: PUSH
17740: LD_INT 3
17742: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , 2 ) ;
17743: LD_INT 0
17745: PPUSH
17746: LD_INT 1
17748: PPUSH
17749: LD_INT 2
17751: PPUSH
17752: CALL_OW 380
// popovTeam := Join ( popovTeam , CreateHuman ) ;
17756: LD_ADDR_EXP 44
17760: PUSH
17761: LD_EXP 44
17765: PPUSH
17766: CALL_OW 44
17770: PPUSH
17771: CALL 64343 0 2
17775: ST_TO_ADDR
// end ;
17776: GO 17724
17778: POP
17779: POP
// if not UnitFilter ( popovTeam , [ f_class , 4 ] ) then
17780: LD_EXP 44
17784: PPUSH
17785: LD_INT 25
17787: PUSH
17788: LD_INT 4
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PPUSH
17795: CALL_OW 72
17799: NOT
17800: IFFALSE 17818
// SetClass ( popovTeam [ 1 ] , 4 ) ;
17802: LD_EXP 44
17806: PUSH
17807: LD_INT 1
17809: ARRAY
17810: PPUSH
17811: LD_INT 4
17813: PPUSH
17814: CALL_OW 336
// for i in popovTeam do
17818: LD_ADDR_VAR 0 2
17822: PUSH
17823: LD_EXP 44
17827: PUSH
17828: FOR_IN
17829: IFFALSE 17932
// begin if not GetClass ( i ) in [ 1 , 4 ] then
17831: LD_VAR 0 2
17835: PPUSH
17836: CALL_OW 257
17840: PUSH
17841: LD_INT 1
17843: PUSH
17844: LD_INT 4
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: IN
17851: NOT
17852: IFFALSE 17866
// SetClass ( i , class_soldier ) ;
17854: LD_VAR 0 2
17858: PPUSH
17859: LD_INT 1
17861: PPUSH
17862: CALL_OW 336
// if not IsPlaced ( i ) then
17866: LD_VAR 0 2
17870: PPUSH
17871: CALL_OW 305
17875: NOT
17876: IFFALSE 17901
// PlaceUnitXYR ( i , 161 , 107 , 3 , false ) else
17878: LD_VAR 0 2
17882: PPUSH
17883: LD_INT 161
17885: PPUSH
17886: LD_INT 107
17888: PPUSH
17889: LD_INT 3
17891: PPUSH
17892: LD_INT 0
17894: PPUSH
17895: CALL_OW 50
17899: GO 17921
// if IsInUnit ( i ) then
17901: LD_VAR 0 2
17905: PPUSH
17906: CALL_OW 310
17910: IFFALSE 17921
// ComExitBuilding ( i ) ;
17912: LD_VAR 0 2
17916: PPUSH
17917: CALL_OW 122
// AddComHold ( i ) ;
17921: LD_VAR 0 2
17925: PPUSH
17926: CALL_OW 200
// end ;
17930: GO 17828
17932: POP
17933: POP
// kirovBaseSquad := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff ( [ Kurin , Popov ] ^ popovTeam ) ;
17934: LD_ADDR_EXP 38
17938: PUSH
17939: LD_INT 22
17941: PUSH
17942: LD_INT 6
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 21
17951: PUSH
17952: LD_INT 1
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PPUSH
17963: CALL_OW 69
17967: PUSH
17968: LD_EXP 33
17972: PUSH
17973: LD_EXP 35
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: PUSH
17982: LD_EXP 44
17986: ADD
17987: DIFF
17988: ST_TO_ADDR
// for i in kirovBaseSquad do
17989: LD_ADDR_VAR 0 2
17993: PUSH
17994: LD_EXP 38
17998: PUSH
17999: FOR_IN
18000: IFFALSE 18131
// begin tmp := IsInUnit ( i ) ;
18002: LD_ADDR_VAR 0 4
18006: PUSH
18007: LD_VAR 0 2
18011: PPUSH
18012: CALL_OW 310
18016: ST_TO_ADDR
// if not tmp then
18017: LD_VAR 0 4
18021: NOT
18022: IFFALSE 18026
// continue ;
18024: GO 17999
// case GetBType ( tmp ) of b_workshop :
18026: LD_VAR 0 4
18030: PPUSH
18031: CALL_OW 266
18035: PUSH
18036: LD_INT 2
18038: DOUBLE
18039: EQUAL
18040: IFTRUE 18044
18042: GO 18059
18044: POP
// SetClass ( i , class_mechanic ) ; b_lab :
18045: LD_VAR 0 2
18049: PPUSH
18050: LD_INT 3
18052: PPUSH
18053: CALL_OW 336
18057: GO 18129
18059: LD_INT 6
18061: DOUBLE
18062: EQUAL
18063: IFTRUE 18067
18065: GO 18082
18067: POP
// SetClass ( i , class_scientistic ) ; b_armoury :
18068: LD_VAR 0 2
18072: PPUSH
18073: LD_INT 4
18075: PPUSH
18076: CALL_OW 336
18080: GO 18129
18082: LD_INT 4
18084: DOUBLE
18085: EQUAL
18086: IFTRUE 18090
18088: GO 18105
18090: POP
// SetClass ( i , class_soldier ) ; b_depot :
18091: LD_VAR 0 2
18095: PPUSH
18096: LD_INT 1
18098: PPUSH
18099: CALL_OW 336
18103: GO 18129
18105: LD_INT 0
18107: DOUBLE
18108: EQUAL
18109: IFTRUE 18113
18111: GO 18128
18113: POP
// SetClass ( i , class_engineer ) ; end ;
18114: LD_VAR 0 2
18118: PPUSH
18119: LD_INT 2
18121: PPUSH
18122: CALL_OW 336
18126: GO 18129
18128: POP
// end ;
18129: GO 17999
18131: POP
18132: POP
// for c := 1 to 4 do
18133: LD_ADDR_VAR 0 3
18137: PUSH
18138: DOUBLE
18139: LD_INT 1
18141: DEC
18142: ST_TO_ADDR
18143: LD_INT 4
18145: PUSH
18146: FOR_TO
18147: IFFALSE 18238
// if UnitFilter ( kirovBaseSquad , [ f_class , c ] ) < 2 then
18149: LD_EXP 38
18153: PPUSH
18154: LD_INT 25
18156: PUSH
18157: LD_VAR 0 3
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PPUSH
18166: CALL_OW 72
18170: PUSH
18171: LD_INT 2
18173: LESS
18174: IFFALSE 18236
// begin tmp := SortBySkill ( kirovBaseSquad , c ) ;
18176: LD_ADDR_VAR 0 4
18180: PUSH
18181: LD_EXP 38
18185: PPUSH
18186: LD_VAR 0 3
18190: PPUSH
18191: CALL 62823 0 2
18195: ST_TO_ADDR
// for i := 1 to 2 do
18196: LD_ADDR_VAR 0 2
18200: PUSH
18201: DOUBLE
18202: LD_INT 1
18204: DEC
18205: ST_TO_ADDR
18206: LD_INT 2
18208: PUSH
18209: FOR_TO
18210: IFFALSE 18234
// SetClass ( tmp [ i ] , c ) ;
18212: LD_VAR 0 4
18216: PUSH
18217: LD_VAR 0 2
18221: ARRAY
18222: PPUSH
18223: LD_VAR 0 3
18227: PPUSH
18228: CALL_OW 336
18232: GO 18209
18234: POP
18235: POP
// end ;
18236: GO 18146
18238: POP
18239: POP
// wait ( 0 0$3 ) ;
18240: LD_INT 105
18242: PPUSH
18243: CALL_OW 67
// InGameOff ;
18247: CALL_OW 9
// gameStart := true ;
18251: LD_ADDR_EXP 7
18255: PUSH
18256: LD_INT 1
18258: ST_TO_ADDR
// Query ( QBriefing ) ;
18259: LD_STRING QBriefing
18261: PPUSH
18262: CALL_OW 97
// ChangeMissionObjectives ( M1 ) ;
18266: LD_STRING M1
18268: PPUSH
18269: CALL_OW 337
// SaveForQuickRestart ;
18273: CALL_OW 22
// wait ( 0 0$5 ) ;
18277: LD_INT 175
18279: PPUSH
18280: CALL_OW 67
// ComExitBuilding ( Popov ) ;
18284: LD_EXP 35
18288: PPUSH
18289: CALL_OW 122
// AddComMoveXY ( Popov , 142 , 64 ) ;
18293: LD_EXP 35
18297: PPUSH
18298: LD_INT 142
18300: PPUSH
18301: LD_INT 64
18303: PPUSH
18304: CALL_OW 171
// AddComMoveXY ( popovTeam , 142 , 64 ) ;
18308: LD_EXP 44
18312: PPUSH
18313: LD_INT 142
18315: PPUSH
18316: LD_INT 64
18318: PPUSH
18319: CALL_OW 171
// AddComFree ( popovTeam ) ;
18323: LD_EXP 44
18327: PPUSH
18328: CALL_OW 199
// wait ( 1 1$00 ) ;
18332: LD_INT 2100
18334: PPUSH
18335: CALL_OW 67
// if not UnitFilter ( americanReinforcementsTroops , [ f_ok ] ) then
18339: LD_EXP 58
18343: PPUSH
18344: LD_INT 50
18346: PUSH
18347: EMPTY
18348: LIST
18349: PPUSH
18350: CALL_OW 72
18354: NOT
18355: IFFALSE 18359
// exit ;
18357: GO 18521
// ComMoveXY ( americanReinforcementsTroops , 27 , 36 ) ;
18359: LD_EXP 58
18363: PPUSH
18364: LD_INT 27
18366: PPUSH
18367: LD_INT 36
18369: PPUSH
18370: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18374: LD_INT 35
18376: PPUSH
18377: CALL_OW 67
// if not UnitFilter ( americanReinforcementsTroops , [ f_ok ] ) then
18381: LD_EXP 58
18385: PPUSH
18386: LD_INT 50
18388: PUSH
18389: EMPTY
18390: LIST
18391: PPUSH
18392: CALL_OW 72
18396: NOT
18397: IFFALSE 18401
// exit ;
18399: GO 18521
// until IsInArea ( americanReinforcementsTroops [ 1 ] , omicronBaseArea ) ;
18401: LD_EXP 58
18405: PUSH
18406: LD_INT 1
18408: ARRAY
18409: PPUSH
18410: LD_INT 18
18412: PPUSH
18413: CALL_OW 308
18417: IFFALSE 18374
// SetSide ( americanReinforcementsTroops [ 1 ] , 1 ) ;
18419: LD_EXP 58
18423: PUSH
18424: LD_INT 1
18426: ARRAY
18427: PPUSH
18428: LD_INT 1
18430: PPUSH
18431: CALL_OW 235
// omicronTroops := omicronTroops union americanReinforcementsTroops [ 1 ] ;
18435: LD_ADDR_EXP 57
18439: PUSH
18440: LD_EXP 57
18444: PUSH
18445: LD_EXP 58
18449: PUSH
18450: LD_INT 1
18452: ARRAY
18453: UNION
18454: ST_TO_ADDR
// if HexInfo ( 30 , 53 ) and UnitsInside ( HexInfo ( 30 , 53 ) ) = 0 then
18455: LD_INT 30
18457: PPUSH
18458: LD_INT 53
18460: PPUSH
18461: CALL_OW 428
18465: IFFALSE 18488
18467: PUSH
18468: LD_INT 30
18470: PPUSH
18471: LD_INT 53
18473: PPUSH
18474: CALL_OW 428
18478: PPUSH
18479: CALL_OW 313
18483: PUSH
18484: LD_INT 0
18486: EQUAL
18487: AND
18488: IFFALSE 18514
// ComEnterUnit ( americanReinforcementsTroops [ 1 ] , HexInfo ( 30 , 53 ) ) ;
18490: LD_EXP 58
18494: PUSH
18495: LD_INT 1
18497: ARRAY
18498: PPUSH
18499: LD_INT 30
18501: PPUSH
18502: LD_INT 53
18504: PPUSH
18505: CALL_OW 428
18509: PPUSH
18510: CALL_OW 120
// americanReinforcementsTroops := [ ] ;
18514: LD_ADDR_EXP 58
18518: PUSH
18519: EMPTY
18520: ST_TO_ADDR
// end ;
18521: LD_VAR 0 1
18525: RET
// every 0 0$2 trigger allianceAttacked do
18526: LD_EXP 9
18530: IFFALSE 18569
18532: GO 18534
18534: DISABLE
// begin DialogueOn ;
18535: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
18539: LD_EXP 33
18543: PPUSH
18544: LD_STRING DArestKur
18546: PPUSH
18547: CALL_OW 88
// dwait ( 0 0$1 ) ;
18551: LD_INT 35
18553: PPUSH
18554: CALL_OW 68
// YouLost ( SelfAttack ) ;
18558: LD_STRING SelfAttack
18560: PPUSH
18561: CALL_OW 104
// DialogueOff ;
18565: CALL_OW 7
// end ;
18569: END
// every 0 0$2 trigger youTookCratesFromKirov do
18570: LD_EXP 17
18574: IFFALSE 18637
18576: GO 18578
18578: DISABLE
// begin Query ( QTookCrates ) ;
18579: LD_STRING QTookCrates
18581: PPUSH
18582: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
18586: LD_INT 35
18588: PPUSH
18589: CALL_OW 67
// until youTookCratesFromKirov >= 3 ;
18593: LD_EXP 17
18597: PUSH
18598: LD_INT 3
18600: GREATEREQUAL
18601: IFFALSE 18586
// DialogueOn ;
18603: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
18607: LD_EXP 33
18611: PPUSH
18612: LD_STRING DArestKur
18614: PPUSH
18615: CALL_OW 88
// dwait ( 0 0$1 ) ;
18619: LD_INT 35
18621: PPUSH
18622: CALL_OW 68
// YouLost ( TookCrates ) ;
18626: LD_STRING TookCrates
18628: PPUSH
18629: CALL_OW 104
// DialogueOff ;
18633: CALL_OW 7
// end ;
18637: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
18638: LD_INT 78
18640: PPUSH
18641: LD_INT 112
18643: PPUSH
18644: LD_INT 3
18646: PPUSH
18647: CALL_OW 440
18651: IFFALSE 18710
18653: GO 18655
18655: DISABLE
// begin foundOil := true ;
18656: LD_ADDR_EXP 10
18660: PUSH
18661: LD_INT 1
18663: ST_TO_ADDR
// if not IsOk ( Burlak ) then
18664: LD_EXP 29
18668: PPUSH
18669: CALL_OW 302
18673: NOT
18674: IFFALSE 18678
// exit ;
18676: GO 18710
// DialogueOn ;
18678: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
18682: LD_EXP 29
18686: PPUSH
18687: LD_STRING D2a-Bur-1
18689: PPUSH
18690: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
18694: LD_EXP 33
18698: PPUSH
18699: LD_STRING D2a-Kur-1
18701: PPUSH
18702: CALL_OW 94
// DialogueOff ;
18706: CALL_OW 7
// end ;
18710: END
// every 0 0$1 trigger hasKagan and hasOilTower do
18711: LD_EXP 12
18715: IFFALSE 18723
18717: PUSH
18718: LD_EXP 14
18722: AND
18723: IFFALSE 18735
18725: GO 18727
18727: DISABLE
// begin ChangeMissionObjectives ( M2 ) ;
18728: LD_STRING M2
18730: PPUSH
18731: CALL_OW 337
// end ;
18735: END
// every 0 0$1 trigger ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_not , [ f_constructed ] ] ] ) or FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] , [ f_not , [ f_constructed ] ] ] ) ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) and IsOk ( Burlak ) do var sci ;
18736: LD_INT 22
18738: PUSH
18739: LD_INT 3
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 30
18748: PUSH
18749: LD_INT 3
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: LD_INT 3
18758: PUSH
18759: LD_INT 57
18761: PUSH
18762: EMPTY
18763: LIST
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: LIST
18773: PPUSH
18774: CALL_OW 69
18778: IFTRUE 18824
18780: PUSH
18781: LD_INT 22
18783: PUSH
18784: LD_INT 3
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 30
18793: PUSH
18794: LD_INT 7
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 3
18803: PUSH
18804: LD_INT 57
18806: PUSH
18807: EMPTY
18808: LIST
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: LIST
18818: PPUSH
18819: CALL_OW 69
18823: OR
18824: IFFALSE 18857
18826: PUSH
18827: LD_INT 22
18829: PUSH
18830: LD_INT 3
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 30
18839: PUSH
18840: LD_INT 26
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PPUSH
18851: CALL_OW 69
18855: NOT
18856: AND
18857: IFFALSE 18870
18859: PUSH
18860: LD_EXP 29
18864: PPUSH
18865: CALL_OW 302
18869: AND
18870: IFFALSE 19064
18872: GO 18874
18874: DISABLE
18875: LD_INT 0
18877: PPUSH
// begin DialogueOn ;
18878: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
18882: LD_EXP 29
18886: PPUSH
18887: LD_STRING D3aa-Bur-1
18889: PPUSH
18890: CALL_OW 88
// if hasScholtze and IsOk ( Scholtze ) then
18894: LD_EXP 11
18898: IFFALSE 18911
18900: PUSH
18901: LD_EXP 36
18905: PPUSH
18906: CALL_OW 302
18910: AND
18911: IFFALSE 18937
// begin sci := Scholtze ;
18913: LD_ADDR_VAR 0 1
18917: PUSH
18918: LD_EXP 36
18922: ST_TO_ADDR
// Say ( Scholtze , D3aa-Sch-1 ) ;
18923: LD_EXP 36
18927: PPUSH
18928: LD_STRING D3aa-Sch-1
18930: PPUSH
18931: CALL_OW 88
// end else
18935: GO 19042
// begin sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] ] ) diff mainRuCharacters ;
18937: LD_ADDR_VAR 0 1
18941: PUSH
18942: LD_INT 22
18944: PUSH
18945: LD_INT 3
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: LD_INT 50
18954: PUSH
18955: EMPTY
18956: LIST
18957: PUSH
18958: LD_INT 25
18960: PUSH
18961: LD_INT 4
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 26
18970: PUSH
18971: LD_INT 1
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: PPUSH
18984: CALL_OW 69
18988: PUSH
18989: LD_EXP 48
18993: DIFF
18994: ST_TO_ADDR
// if sci then
18995: LD_VAR 0 1
18999: IFFALSE 19042
// begin sci := sci [ rand ( 1 , Count ( sci ) ) ] ;
19001: LD_ADDR_VAR 0 1
19005: PUSH
19006: LD_VAR 0 1
19010: PUSH
19011: LD_INT 1
19013: PPUSH
19014: LD_VAR 0 1
19018: PPUSH
19019: CALL 28367 0 1
19023: PPUSH
19024: CALL_OW 12
19028: ARRAY
19029: ST_TO_ADDR
// Say ( sci , D3aa-Sci1-1 ) ;
19030: LD_VAR 0 1
19034: PPUSH
19035: LD_STRING D3aa-Sci1-1
19037: PPUSH
19038: CALL_OW 88
// end ; end ; if sci then
19042: LD_VAR 0 1
19046: IFFALSE 19060
// Say ( Burlak , D3aa-Bur-2 ) ;
19048: LD_EXP 29
19052: PPUSH
19053: LD_STRING D3aa-Bur-2
19055: PPUSH
19056: CALL_OW 88
// DialogueOff ;
19060: CALL_OW 7
// end ;
19064: PPOPN 1
19066: END
// every 0 0$1 trigger UnitFilter ( americanReinforcementsTroops , [ f_see , 3 ] ) and IsOk ( Burlak ) and not allowedToAttackOmicron do var sol , tmp ;
19067: LD_EXP 58
19071: PPUSH
19072: LD_INT 101
19074: PUSH
19075: LD_INT 3
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PPUSH
19082: CALL_OW 72
19086: IFFALSE 19099
19088: PUSH
19089: LD_EXP 29
19093: PPUSH
19094: CALL_OW 302
19098: AND
19099: IFFALSE 19108
19101: PUSH
19102: LD_EXP 13
19106: NOT
19107: AND
19108: IFFALSE 19422
19110: GO 19112
19112: DISABLE
19113: LD_INT 0
19115: PPUSH
19116: PPUSH
// begin tmp := UnitFilter ( americanReinforcementsTroops , [ f_see , 3 ] ) ;
19117: LD_ADDR_VAR 0 2
19121: PUSH
19122: LD_EXP 58
19126: PPUSH
19127: LD_INT 101
19129: PUSH
19130: LD_INT 3
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PPUSH
19137: CALL_OW 72
19141: ST_TO_ADDR
// sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_sex , sex_male ] ] ) diff mainRuCharacters ;
19142: LD_ADDR_VAR 0 1
19146: PUSH
19147: LD_INT 22
19149: PUSH
19150: LD_INT 3
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 50
19159: PUSH
19160: EMPTY
19161: LIST
19162: PUSH
19163: LD_INT 26
19165: PUSH
19166: LD_INT 1
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: LIST
19177: PPUSH
19178: CALL_OW 69
19182: PUSH
19183: LD_EXP 48
19187: DIFF
19188: ST_TO_ADDR
// if not sol then
19189: LD_VAR 0 1
19193: NOT
19194: IFFALSE 19198
// exit ;
19196: GO 19422
// sol := sol [ rand ( 1 , Count ( sol ) ) ] ;
19198: LD_ADDR_VAR 0 1
19202: PUSH
19203: LD_VAR 0 1
19207: PUSH
19208: LD_INT 1
19210: PPUSH
19211: LD_VAR 0 1
19215: PPUSH
19216: CALL 28367 0 1
19220: PPUSH
19221: CALL_OW 12
19225: ARRAY
19226: ST_TO_ADDR
// DialogueOn ;
19227: CALL_OW 6
// CenterNowOnUnits ( NearestUnitToUnit ( tmp , Burlak ) ) ;
19231: LD_VAR 0 2
19235: PPUSH
19236: LD_EXP 29
19240: PPUSH
19241: CALL_OW 74
19245: PPUSH
19246: CALL_OW 87
// if not hasKagan then
19250: LD_EXP 12
19254: NOT
19255: IFFALSE 19283
// begin Say ( sol , D3a-RSol1-1 ) ;
19257: LD_VAR 0 1
19261: PPUSH
19262: LD_STRING D3a-RSol1-1
19264: PPUSH
19265: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
19269: LD_EXP 29
19273: PPUSH
19274: LD_STRING D3a-Bur-1
19276: PPUSH
19277: CALL_OW 88
// end else
19281: GO 19418
// begin Say ( sol , [ D3a-RSol1-1 , D3b-RSol1-1 ] [ sol mod 2 + 1 ] ) ;
19283: LD_VAR 0 1
19287: PPUSH
19288: LD_STRING D3a-RSol1-1
19290: PUSH
19291: LD_STRING D3b-RSol1-1
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: LD_VAR 0 1
19302: PUSH
19303: LD_INT 2
19305: MOD
19306: PUSH
19307: LD_INT 1
19309: PLUS
19310: ARRAY
19311: PPUSH
19312: CALL_OW 88
// if IsOk ( Gnyevko ) and Gnyevko in beriaBaseSquad then
19316: LD_EXP 30
19320: PPUSH
19321: CALL_OW 302
19325: IFFALSE 19339
19327: PUSH
19328: LD_EXP 30
19332: PUSH
19333: LD_EXP 39
19337: IN
19338: AND
19339: IFFALSE 19355
// Say ( Gnyevko , D3b-Gny-1 ) else
19341: LD_EXP 30
19345: PPUSH
19346: LD_STRING D3b-Gny-1
19348: PPUSH
19349: CALL_OW 88
19353: GO 19406
// if IsOk ( Kovalyuk ) and Kovalyuk in beriaBaseSquad then
19355: LD_EXP 34
19359: PPUSH
19360: CALL_OW 302
19364: IFFALSE 19378
19366: PUSH
19367: LD_EXP 34
19371: PUSH
19372: LD_EXP 39
19376: IN
19377: AND
19378: IFFALSE 19394
// Say ( Kovalyuk , D3b-Kov-1 ) else
19380: LD_EXP 34
19384: PPUSH
19385: LD_STRING D3b-Kov-1
19387: PPUSH
19388: CALL_OW 88
19392: GO 19406
// Say ( sol , D3b-RSol1-2 ) ;
19394: LD_VAR 0 1
19398: PPUSH
19399: LD_STRING D3b-RSol1-2
19401: PPUSH
19402: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
19406: LD_EXP 29
19410: PPUSH
19411: LD_STRING D3b-Bur-1
19413: PPUSH
19414: CALL_OW 88
// end ; DialogueOff ;
19418: CALL_OW 7
// end ;
19422: PPOPN 2
19424: END
// every 0 0$2 trigger foundOil do var fake , x , y , scholtzeArea , Dickens , DickensFriend ;
19425: LD_EXP 10
19429: IFFALSE 20566
19431: GO 19433
19433: DISABLE
19434: LD_INT 0
19436: PPUSH
19437: PPUSH
19438: PPUSH
19439: PPUSH
19440: PPUSH
19441: PPUSH
// begin wait ( 0 0$30 + rand ( 0 0$10 , 1 1$00 ) ) ;
19442: LD_INT 1050
19444: PUSH
19445: LD_INT 350
19447: PPUSH
19448: LD_INT 2100
19450: PPUSH
19451: CALL_OW 12
19455: PLUS
19456: PPUSH
19457: CALL_OW 67
// case Difficulty of 1 :
19461: LD_OWVAR 67
19465: PUSH
19466: LD_INT 1
19468: DOUBLE
19469: EQUAL
19470: IFTRUE 19474
19472: GO 19485
19474: POP
// scholtzeArea := scholtzeSpawn3Area ; 2 :
19475: LD_ADDR_VAR 0 4
19479: PUSH
19480: LD_INT 8
19482: ST_TO_ADDR
19483: GO 19612
19485: LD_INT 2
19487: DOUBLE
19488: EQUAL
19489: IFTRUE 19493
19491: GO 19527
19493: POP
// scholtzeArea := [ scholtzeSpawn3Area , scholtzeSpawn2Area , scholtzeSpawn2Area ] [ rand ( 1 , 3 ) ] ; 3 :
19494: LD_ADDR_VAR 0 4
19498: PUSH
19499: LD_INT 8
19501: PUSH
19502: LD_INT 7
19504: PUSH
19505: LD_INT 7
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 1
19515: PPUSH
19516: LD_INT 3
19518: PPUSH
19519: CALL_OW 12
19523: ARRAY
19524: ST_TO_ADDR
19525: GO 19612
19527: LD_INT 3
19529: DOUBLE
19530: EQUAL
19531: IFTRUE 19535
19533: GO 19569
19535: POP
// scholtzeArea := [ scholtzeSpawn2Area , scholtzeSpawn2Area , scholtzeSpawn1Area ] [ rand ( 1 , 3 ) ] ; 4 :
19536: LD_ADDR_VAR 0 4
19540: PUSH
19541: LD_INT 7
19543: PUSH
19544: LD_INT 7
19546: PUSH
19547: LD_INT 6
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 1
19557: PPUSH
19558: LD_INT 3
19560: PPUSH
19561: CALL_OW 12
19565: ARRAY
19566: ST_TO_ADDR
19567: GO 19612
19569: LD_INT 4
19571: DOUBLE
19572: EQUAL
19573: IFTRUE 19577
19575: GO 19611
19577: POP
// scholtzeArea := [ scholtzeSpawn2Area , scholtzeSpawn1Area , scholtzeSpawn1Area ] [ rand ( 1 , 3 ) ] ; end ;
19578: LD_ADDR_VAR 0 4
19582: PUSH
19583: LD_INT 7
19585: PUSH
19586: LD_INT 6
19588: PUSH
19589: LD_INT 6
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 1
19599: PPUSH
19600: LD_INT 3
19602: PPUSH
19603: CALL_OW 12
19607: ARRAY
19608: ST_TO_ADDR
19609: GO 19612
19611: POP
// PlaceUnitArea ( Scholtze , scholtzeArea , true ) ;
19612: LD_EXP 36
19616: PPUSH
19617: LD_VAR 0 4
19621: PPUSH
19622: LD_INT 1
19624: PPUSH
19625: CALL_OW 49
// ComHold ( Scholtze ) ;
19629: LD_EXP 36
19633: PPUSH
19634: CALL_OW 140
// wait ( 0 0$4 ) ;
19638: LD_INT 140
19640: PPUSH
19641: CALL_OW 67
// if See ( 3 , Scholtze ) then
19645: LD_INT 3
19647: PPUSH
19648: LD_EXP 36
19652: PPUSH
19653: CALL_OW 292
19657: IFFALSE 19741
// begin hasScholtze := true ;
19659: LD_ADDR_EXP 11
19663: PUSH
19664: LD_INT 1
19666: ST_TO_ADDR
// SetSide ( Scholtze , 3 ) ;
19667: LD_EXP 36
19671: PPUSH
19672: LD_INT 3
19674: PPUSH
19675: CALL_OW 235
// ComFree ( Scholtze ) ;
19679: LD_EXP 36
19683: PPUSH
19684: CALL_OW 139
// CenterNowOnUnits ( Scholtze ) ;
19688: LD_EXP 36
19692: PPUSH
19693: CALL_OW 87
// DialogueOn ;
19697: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
19701: LD_EXP 36
19705: PPUSH
19706: LD_STRING D4a-Sch-1
19708: PPUSH
19709: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
19713: LD_EXP 29
19717: PPUSH
19718: LD_STRING D4a-Bur-1
19720: PPUSH
19721: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
19725: LD_EXP 36
19729: PPUSH
19730: LD_STRING D4a-Sch-2
19732: PPUSH
19733: CALL_OW 88
// DialogueOff ;
19737: CALL_OW 7
// end ; x := GetX ( Scholtze ) ;
19741: LD_ADDR_VAR 0 2
19745: PUSH
19746: LD_EXP 36
19750: PPUSH
19751: CALL_OW 250
19755: ST_TO_ADDR
// y := GetY ( Scholtze ) ;
19756: LD_ADDR_VAR 0 3
19760: PUSH
19761: LD_EXP 36
19765: PPUSH
19766: CALL_OW 251
19770: ST_TO_ADDR
// uc_side := 6 ;
19771: LD_ADDR_OWVAR 20
19775: PUSH
19776: LD_INT 6
19778: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 1 ) ;
19779: LD_INT 1
19781: PPUSH
19782: LD_INT 1
19784: PPUSH
19785: LD_INT 1
19787: PPUSH
19788: CALL_OW 380
// fake := CreateHuman ;
19792: LD_ADDR_VAR 0 1
19796: PUSH
19797: CALL_OW 44
19801: ST_TO_ADDR
// InGameOn ;
19802: CALL_OW 8
// DialogueOn ;
19806: CALL_OW 6
// SayRadioNoFaceNoName ( fake , D4-Sch-1 ) ;
19810: LD_VAR 0 1
19814: PPUSH
19815: LD_STRING D4-Sch-1
19817: PPUSH
19818: CALL 68588 0 2
// Say ( Burlak , D4-Bur-1 ) ;
19822: LD_EXP 29
19826: PPUSH
19827: LD_STRING D4-Bur-1
19829: PPUSH
19830: CALL_OW 88
// DialogueOff ;
19834: CALL_OW 7
// InGameOff ;
19838: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
19842: LD_STRING M4
19844: PPUSH
19845: CALL_OW 337
// canSearchForScholtze := true ;
19849: LD_ADDR_EXP 16
19853: PUSH
19854: LD_INT 1
19856: ST_TO_ADDR
// if dickensKilled then
19857: LD_EXP 15
19861: IFFALSE 19865
// exit ;
19863: GO 20566
// wait ( 2 2$00 - ( 0 0$20 * Difficulty ) ) ;
19865: LD_INT 4200
19867: PUSH
19868: LD_INT 700
19870: PUSH
19871: LD_OWVAR 67
19875: MUL
19876: MINUS
19877: PPUSH
19878: CALL_OW 67
// uc_side := 1 ;
19882: LD_ADDR_OWVAR 20
19886: PUSH
19887: LD_INT 1
19889: ST_TO_ADDR
// uc_nation := nation_american ;
19890: LD_ADDR_OWVAR 21
19894: PUSH
19895: LD_INT 1
19897: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
19898: LD_ADDR_VAR 0 5
19902: PUSH
19903: LD_STRING Dickens
19905: PPUSH
19906: CALL_OW 25
19910: ST_TO_ADDR
// SetSkill ( Dickens , skill_combat , Difficulty ) ;
19911: LD_VAR 0 5
19915: PPUSH
19916: LD_INT 1
19918: PPUSH
19919: LD_OWVAR 67
19923: PPUSH
19924: CALL_OW 237
// PrepareSoldier ( sex_male , Difficulty ) ;
19928: LD_INT 1
19930: PPUSH
19931: LD_OWVAR 67
19935: PPUSH
19936: CALL_OW 381
// hc_attr := [ 10 , 10 ] ;
19940: LD_ADDR_OWVAR 29
19944: PUSH
19945: LD_INT 10
19947: PUSH
19948: LD_INT 10
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: ST_TO_ADDR
// DickensFriend := CreateHuman ;
19955: LD_ADDR_VAR 0 6
19959: PUSH
19960: CALL_OW 44
19964: ST_TO_ADDR
// PlaceUnitXYR ( Dickens , 22 , 17 , 3 , false ) ;
19965: LD_VAR 0 5
19969: PPUSH
19970: LD_INT 22
19972: PPUSH
19973: LD_INT 17
19975: PPUSH
19976: LD_INT 3
19978: PPUSH
19979: LD_INT 0
19981: PPUSH
19982: CALL_OW 50
// PlaceUnitXYR ( DickensFriend , 22 , 17 , 3 , false ) ;
19986: LD_VAR 0 6
19990: PPUSH
19991: LD_INT 22
19993: PPUSH
19994: LD_INT 17
19996: PPUSH
19997: LD_INT 3
19999: PPUSH
20000: LD_INT 0
20002: PPUSH
20003: CALL_OW 50
// ComAgressiveMove ( [ Dickens , DickensFriend ] , x , y ) ;
20007: LD_VAR 0 5
20011: PUSH
20012: LD_VAR 0 6
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PPUSH
20021: LD_VAR 0 2
20025: PPUSH
20026: LD_VAR 0 3
20030: PPUSH
20031: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
20035: LD_INT 35
20037: PPUSH
20038: CALL_OW 67
// if not IsOk ( Dickens ) then
20042: LD_VAR 0 5
20046: PPUSH
20047: CALL_OW 302
20051: NOT
20052: IFFALSE 20099
// begin ComMoveXY ( DickensFriend , 31 , 39 ) ;
20054: LD_VAR 0 6
20058: PPUSH
20059: LD_INT 31
20061: PPUSH
20062: LD_INT 39
20064: PPUSH
20065: CALL_OW 111
// AddComEnterUnit ( DickensFriend , usArm1 ) ;
20069: LD_VAR 0 6
20073: PPUSH
20074: LD_INT 297
20076: PPUSH
20077: CALL_OW 180
// omicronTroops := omicronTroops union DickensFriend ;
20081: LD_ADDR_EXP 57
20085: PUSH
20086: LD_EXP 57
20090: PUSH
20091: LD_VAR 0 6
20095: UNION
20096: ST_TO_ADDR
// exit ;
20097: GO 20566
// end ; if not IsOk ( DickensFriend ) then
20099: LD_VAR 0 6
20103: PPUSH
20104: CALL_OW 302
20108: NOT
20109: IFFALSE 20156
// begin ComMoveXY ( Dickens , 31 , 39 ) ;
20111: LD_VAR 0 5
20115: PPUSH
20116: LD_INT 31
20118: PPUSH
20119: LD_INT 39
20121: PPUSH
20122: CALL_OW 111
// AddComEnterUnit ( Dickens , usArm1 ) ;
20126: LD_VAR 0 5
20130: PPUSH
20131: LD_INT 297
20133: PPUSH
20134: CALL_OW 180
// omicronTroops := omicronTroops union Dickens ;
20138: LD_ADDR_EXP 57
20142: PUSH
20143: LD_EXP 57
20147: PUSH
20148: LD_VAR 0 5
20152: UNION
20153: ST_TO_ADDR
// exit ;
20154: GO 20566
// end ; if GetSide ( Scholtze ) = 3 then
20156: LD_EXP 36
20160: PPUSH
20161: CALL_OW 255
20165: PUSH
20166: LD_INT 3
20168: EQUAL
20169: IFFALSE 20288
// begin wait ( 0 0$10 ) ;
20171: LD_INT 350
20173: PPUSH
20174: CALL_OW 67
// if IsOk ( Dickens ) then
20178: LD_VAR 0 5
20182: PPUSH
20183: CALL_OW 302
20187: IFFALSE 20232
// begin ComMoveXY ( DickensFriend , 31 , 39 ) ;
20189: LD_VAR 0 6
20193: PPUSH
20194: LD_INT 31
20196: PPUSH
20197: LD_INT 39
20199: PPUSH
20200: CALL_OW 111
// AddComEnterUnit ( DickensFriend , usArm1 ) ;
20204: LD_VAR 0 6
20208: PPUSH
20209: LD_INT 297
20211: PPUSH
20212: CALL_OW 180
// omicronTroops := omicronTroops union DickensFriend ;
20216: LD_ADDR_EXP 57
20220: PUSH
20221: LD_EXP 57
20225: PUSH
20226: LD_VAR 0 6
20230: UNION
20231: ST_TO_ADDR
// end ; if IsOk ( DickensFriend ) then
20232: LD_VAR 0 6
20236: PPUSH
20237: CALL_OW 302
20241: IFFALSE 20286
// begin ComMoveXY ( Dickens , 31 , 39 ) ;
20243: LD_VAR 0 5
20247: PPUSH
20248: LD_INT 31
20250: PPUSH
20251: LD_INT 39
20253: PPUSH
20254: CALL_OW 111
// AddComEnterUnit ( Dickens , usArm1 ) ;
20258: LD_VAR 0 5
20262: PPUSH
20263: LD_INT 297
20265: PPUSH
20266: CALL_OW 180
// omicronTroops := omicronTroops union Dickens ;
20270: LD_ADDR_EXP 57
20274: PUSH
20275: LD_EXP 57
20279: PUSH
20280: LD_VAR 0 5
20284: UNION
20285: ST_TO_ADDR
// end ; exit ;
20286: GO 20566
// end ; until See ( 1 , Scholtze ) and GetLives ( Scholtze ) < 1000 and not hasScholtze ;
20288: LD_INT 1
20290: PPUSH
20291: LD_EXP 36
20295: PPUSH
20296: CALL_OW 292
20300: IFFALSE 20317
20302: PUSH
20303: LD_EXP 36
20307: PPUSH
20308: CALL_OW 256
20312: PUSH
20313: LD_INT 1000
20315: LESS
20316: AND
20317: IFFALSE 20326
20319: PUSH
20320: LD_EXP 11
20324: NOT
20325: AND
20326: IFFALSE 20035
// canSearchForScholtze := false ;
20328: LD_ADDR_EXP 16
20332: PUSH
20333: LD_INT 0
20335: ST_TO_ADDR
// ComAttackUnit ( [ Dickens , DickensFriend ] , Scholtze ) ;
20336: LD_VAR 0 5
20340: PUSH
20341: LD_VAR 0 6
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PPUSH
20350: LD_EXP 36
20354: PPUSH
20355: CALL_OW 115
// wait ( 0 0$0.3 ) ;
20359: LD_INT 10
20361: PPUSH
20362: CALL_OW 67
// InGameOn ;
20366: CALL_OW 8
// DialogueOn ;
20370: CALL_OW 6
// PlaceSeeing ( x , y , 3 , - 10 ) ;
20374: LD_VAR 0 2
20378: PPUSH
20379: LD_VAR 0 3
20383: PPUSH
20384: LD_INT 3
20386: PPUSH
20387: LD_INT 10
20389: NEG
20390: PPUSH
20391: CALL_OW 330
// CenterNowOnXY ( x , y ) ;
20395: LD_VAR 0 2
20399: PPUSH
20400: LD_VAR 0 3
20404: PPUSH
20405: CALL_OW 86
// Say ( Scholtze , D4b-Sch-1 ) ;
20409: LD_EXP 36
20413: PPUSH
20414: LD_STRING D4b-Sch-1
20416: PPUSH
20417: CALL_OW 88
// Say ( DickensFriend , D4b-Sol1-1 ) ;
20421: LD_VAR 0 6
20425: PPUSH
20426: LD_STRING D4b-Sol1-1
20428: PPUSH
20429: CALL_OW 88
// Say ( Dickens , D4b-Sol2-1 ) ;
20433: LD_VAR 0 5
20437: PPUSH
20438: LD_STRING D4b-Sol2-1
20440: PPUSH
20441: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
20445: LD_EXP 36
20449: PPUSH
20450: LD_STRING D4b-Sch-2
20452: PPUSH
20453: CALL_OW 88
// DialogueOff ;
20457: CALL_OW 7
// wait ( 0 0$0.3 ) ;
20461: LD_INT 10
20463: PPUSH
20464: CALL_OW 67
// RemoveSeeing ( x , y , 3 ) ;
20468: LD_VAR 0 2
20472: PPUSH
20473: LD_VAR 0 3
20477: PPUSH
20478: LD_INT 3
20480: PPUSH
20481: CALL_OW 331
// Say ( Burlak , D4b-Bur-2 ) ;
20485: LD_EXP 29
20489: PPUSH
20490: LD_STRING D4b-Bur-2
20492: PPUSH
20493: CALL_OW 88
// InGameOff ;
20497: CALL_OW 9
// ChangeMissionObjectives ( MScholtzeDel ) ;
20501: LD_STRING MScholtzeDel
20503: PPUSH
20504: CALL_OW 337
// KillUnit ( Scholtze ) ;
20508: LD_EXP 36
20512: PPUSH
20513: CALL_OW 66
// ComMoveXY ( [ Dickens , DickensFriend ] , 25 , 31 ) ;
20517: LD_VAR 0 5
20521: PUSH
20522: LD_VAR 0 6
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: PPUSH
20531: LD_INT 25
20533: PPUSH
20534: LD_INT 31
20536: PPUSH
20537: CALL_OW 111
// omicronTroops := omicronTroops union [ Dickens , DickensFriend ] ;
20541: LD_ADDR_EXP 57
20545: PUSH
20546: LD_EXP 57
20550: PUSH
20551: LD_VAR 0 5
20555: PUSH
20556: LD_VAR 0 6
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: UNION
20565: ST_TO_ADDR
// end ;
20566: PPOPN 6
20568: END
// every 0 0$2 trigger See ( 3 , Scholtze ) and canSearchForScholtze and not hasScholtze do
20569: LD_INT 3
20571: PPUSH
20572: LD_EXP 36
20576: PPUSH
20577: CALL_OW 292
20581: IFFALSE 20589
20583: PUSH
20584: LD_EXP 16
20588: AND
20589: IFFALSE 20598
20591: PUSH
20592: LD_EXP 11
20596: NOT
20597: AND
20598: IFFALSE 20690
20600: GO 20602
20602: DISABLE
// begin hasScholtze := true ;
20603: LD_ADDR_EXP 11
20607: PUSH
20608: LD_INT 1
20610: ST_TO_ADDR
// SetSide ( Scholtze , 3 ) ;
20611: LD_EXP 36
20615: PPUSH
20616: LD_INT 3
20618: PPUSH
20619: CALL_OW 235
// CenterNowOnUnits ( Scholtze ) ;
20623: LD_EXP 36
20627: PPUSH
20628: CALL_OW 87
// DialogueOn ;
20632: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
20636: LD_EXP 36
20640: PPUSH
20641: LD_STRING D4a-Sch-1
20643: PPUSH
20644: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
20648: LD_EXP 29
20652: PPUSH
20653: LD_STRING D4a-Bur-1
20655: PPUSH
20656: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
20660: LD_EXP 36
20664: PPUSH
20665: LD_STRING D4a-Sch-2
20667: PPUSH
20668: CALL_OW 88
// DialogueOff ;
20672: CALL_OW 7
// ChangeMissionObjectives ( MScholtzeOut ) ;
20676: LD_STRING MScholtzeOut
20678: PPUSH
20679: CALL_OW 337
// SetAchievement ( ACH_PROFESSOR ) ;
20683: LD_STRING ACH_PROFESSOR
20685: PPUSH
20686: CALL_OW 543
// end ;
20690: END
// every 0 0$2 trigger FilterUnitsInArea ( easternHillArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
20691: LD_INT 3
20693: PPUSH
20694: LD_INT 22
20696: PUSH
20697: LD_INT 6
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 21
20706: PUSH
20707: LD_INT 1
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PPUSH
20718: CALL_OW 70
20722: IFFALSE 20797
20724: GO 20726
20726: DISABLE
// begin PlaceSeeing ( 131 , 50 , 3 , 12 ) ;
20727: LD_INT 131
20729: PPUSH
20730: LD_INT 50
20732: PPUSH
20733: LD_INT 3
20735: PPUSH
20736: LD_INT 12
20738: PPUSH
20739: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
20743: LD_INT 35
20745: PPUSH
20746: CALL_OW 67
// until not FilterUnitsInArea ( easternHillArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
20750: LD_INT 3
20752: PPUSH
20753: LD_INT 22
20755: PUSH
20756: LD_INT 6
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 21
20765: PUSH
20766: LD_INT 1
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PPUSH
20777: CALL_OW 70
20781: NOT
20782: IFFALSE 20743
// RemoveSeeing ( 131 , 50 , 3 ) ;
20784: LD_INT 131
20786: PPUSH
20787: LD_INT 50
20789: PPUSH
20790: LD_INT 3
20792: PPUSH
20793: CALL_OW 331
// end ;
20797: END
// every 0 0$1 trigger not retreat and FilterUnitsInArea ( hillArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_chassis , ru_medium_wheeled ] ] ) and IsOk ( Burlak ) do
20798: LD_EXP 18
20802: NOT
20803: IFFALSE 20849
20805: PUSH
20806: LD_INT 9
20808: PPUSH
20809: LD_INT 22
20811: PUSH
20812: LD_INT 3
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 21
20821: PUSH
20822: LD_INT 2
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 31
20831: PUSH
20832: LD_INT 21
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: LIST
20843: PPUSH
20844: CALL_OW 70
20848: AND
20849: IFFALSE 20862
20851: PUSH
20852: LD_EXP 29
20856: PPUSH
20857: CALL_OW 302
20861: AND
20862: IFFALSE 20913
20864: GO 20866
20866: DISABLE
// begin DialogueOn ;
20867: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
20871: LD_EXP 29
20875: PPUSH
20876: LD_STRING D5a-Bur-1
20878: PPUSH
20879: CALL_OW 88
// DialogueOff ;
20883: CALL_OW 7
// SetTech ( tech_Track , 3 , state_enabled ) ;
20887: LD_INT 84
20889: PPUSH
20890: LD_INT 3
20892: PPUSH
20893: LD_INT 1
20895: PPUSH
20896: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
20900: LD_INT 16
20902: PPUSH
20903: LD_INT 3
20905: PPUSH
20906: LD_INT 1
20908: PPUSH
20909: CALL_OW 324
// end ;
20913: END
// every 0 0$1 trigger hasFactory and hasOilTower do var i , un , tmp , vehicles , vehiclesOwned , q , pepCount , points , sendMechanics ;
20914: LD_EXP 19
20918: IFFALSE 20926
20920: PUSH
20921: LD_EXP 14
20925: AND
20926: IFFALSE 22630
20928: GO 20930
20930: DISABLE
20931: LD_INT 0
20933: PPUSH
20934: PPUSH
20935: PPUSH
20936: PPUSH
20937: PPUSH
20938: PPUSH
20939: PPUSH
20940: PPUSH
20941: PPUSH
// begin ChangeMissionObjectives ( M3 ) ;
20942: LD_STRING M3
20944: PPUSH
20945: CALL_OW 337
// sendMechanics := false ;
20949: LD_ADDR_VAR 0 9
20953: PUSH
20954: LD_INT 0
20956: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20957: LD_INT 35
20959: PPUSH
20960: CALL_OW 67
// vehiclesOwned := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ;
20964: LD_ADDR_VAR 0 5
20968: PUSH
20969: LD_INT 22
20971: PUSH
20972: LD_INT 3
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 21
20981: PUSH
20982: LD_INT 2
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 50
20991: PUSH
20992: EMPTY
20993: LIST
20994: PUSH
20995: LD_INT 23
20997: PUSH
20998: LD_INT 3
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: PPUSH
21011: CALL_OW 69
21015: ST_TO_ADDR
// pepCount := Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) ) ;
21016: LD_ADDR_VAR 0 7
21020: PUSH
21021: LD_INT 22
21023: PUSH
21024: LD_INT 3
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 21
21033: PUSH
21034: LD_INT 1
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 23
21043: PUSH
21044: LD_INT 3
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: LIST
21055: PPUSH
21056: CALL_OW 69
21060: PPUSH
21061: CALL 28367 0 1
21065: ST_TO_ADDR
// if vehiclesOwned < ( pepCount + requiredVehiclesAmount ) then
21066: LD_VAR 0 5
21070: PUSH
21071: LD_VAR 0 7
21075: PUSH
21076: LD_EXP 21
21080: PLUS
21081: LESS
21082: IFFALSE 21125
// display_strings := [ #Ru03-5 , ( pepCount + requiredVehiclesAmount ) - vehiclesOwned , #Ru03-6 , kurinWaitForVehiclesTime ] else
21084: LD_ADDR_OWVAR 47
21088: PUSH
21089: LD_STRING #Ru03-5
21091: PUSH
21092: LD_VAR 0 7
21096: PUSH
21097: LD_EXP 21
21101: PLUS
21102: PUSH
21103: LD_VAR 0 5
21107: MINUS
21108: PUSH
21109: LD_STRING #Ru03-6
21111: PUSH
21112: LD_EXP 20
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: ST_TO_ADDR
21123: GO 21146
// display_strings := [ #Ru03-5a , #Ru03-6 , kurinWaitForVehiclesTime ] ;
21125: LD_ADDR_OWVAR 47
21129: PUSH
21130: LD_STRING #Ru03-5a
21132: PUSH
21133: LD_STRING #Ru03-6
21135: PUSH
21136: LD_EXP 20
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: LIST
21145: ST_TO_ADDR
// kurinWaitForVehiclesTime := kurinWaitForVehiclesTime - 0 0$1 ;
21146: LD_ADDR_EXP 20
21150: PUSH
21151: LD_EXP 20
21155: PUSH
21156: LD_INT 35
21158: MINUS
21159: ST_TO_ADDR
// until kurinWaitForVehiclesTime = 0 0$0 ;
21160: LD_EXP 20
21164: PUSH
21165: LD_INT 0
21167: EQUAL
21168: IFFALSE 20957
// if vehiclesOwned >= ( pepCount + requiredVehiclesAmount ) then
21170: LD_VAR 0 5
21174: PUSH
21175: LD_VAR 0 7
21179: PUSH
21180: LD_EXP 21
21184: PLUS
21185: GREATEREQUAL
21186: IFFALSE 21219
// begin AddMedal ( Surplus , 1 ) ;
21188: LD_STRING Surplus
21190: PPUSH
21191: LD_INT 1
21193: PPUSH
21194: CALL_OW 101
// points := [ 1 , 2 , 3 ] ;
21198: LD_ADDR_VAR 0 8
21202: PUSH
21203: LD_INT 1
21205: PUSH
21206: LD_INT 2
21208: PUSH
21209: LD_INT 3
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: LIST
21216: ST_TO_ADDR
// end else
21217: GO 21281
// if vehiclesOwned >= pepCount then
21219: LD_VAR 0 5
21223: PUSH
21224: LD_VAR 0 7
21228: GREATEREQUAL
21229: IFFALSE 21259
// begin AddMedal ( Surplus , - 1 ) ;
21231: LD_STRING Surplus
21233: PPUSH
21234: LD_INT 1
21236: NEG
21237: PPUSH
21238: CALL_OW 101
// points := [ 2 , 3 ] ;
21242: LD_ADDR_VAR 0 8
21246: PUSH
21247: LD_INT 2
21249: PUSH
21250: LD_INT 3
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: ST_TO_ADDR
// end else
21257: GO 21281
// begin AddMedal ( Surplus , - 2 ) ;
21259: LD_STRING Surplus
21261: PPUSH
21262: LD_INT 2
21264: NEG
21265: PPUSH
21266: CALL_OW 101
// points := [ 3 ] ;
21270: LD_ADDR_VAR 0 8
21274: PUSH
21275: LD_INT 3
21277: PUSH
21278: EMPTY
21279: LIST
21280: ST_TO_ADDR
// end ; InGameOn ;
21281: CALL_OW 8
// DialogueOn ;
21285: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
21289: LD_EXP 33
21293: PPUSH
21294: LD_STRING D5-Kur-1
21296: PPUSH
21297: CALL_OW 94
// q := SelectiveQuery ( QVehicles , points ) ;
21301: LD_ADDR_VAR 0 6
21305: PUSH
21306: LD_STRING QVehicles
21308: PPUSH
21309: LD_VAR 0 8
21313: PPUSH
21314: CALL_OW 98
21318: ST_TO_ADDR
// case q of 1 :
21319: LD_VAR 0 6
21323: PUSH
21324: LD_INT 1
21326: DOUBLE
21327: EQUAL
21328: IFTRUE 21332
21330: GO 21375
21332: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
21333: LD_EXP 29
21337: PPUSH
21338: LD_STRING D6a-Bur-1
21340: PPUSH
21341: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
21345: LD_EXP 33
21349: PPUSH
21350: LD_STRING D6a-Kur-1
21352: PPUSH
21353: CALL_OW 94
// timeToAttackOnOmicron := 2 2$00 ;
21357: LD_ADDR_EXP 23
21361: PUSH
21362: LD_INT 4200
21364: ST_TO_ADDR
// sendMechanics := true ;
21365: LD_ADDR_VAR 0 9
21369: PUSH
21370: LD_INT 1
21372: ST_TO_ADDR
// end ; 2 :
21373: GO 21470
21375: LD_INT 2
21377: DOUBLE
21378: EQUAL
21379: IFTRUE 21383
21381: GO 21426
21383: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
21384: LD_EXP 29
21388: PPUSH
21389: LD_STRING D6b-Bur-1
21391: PPUSH
21392: CALL_OW 88
// SayRadio ( Kurin , D6b-Kur-1 ) ;
21396: LD_EXP 33
21400: PPUSH
21401: LD_STRING D6b-Kur-1
21403: PPUSH
21404: CALL_OW 94
// timeToAttackOnOmicron := 3 3$00 ;
21408: LD_ADDR_EXP 23
21412: PUSH
21413: LD_INT 6300
21415: ST_TO_ADDR
// sendMechanics := true ;
21416: LD_ADDR_VAR 0 9
21420: PUSH
21421: LD_INT 1
21423: ST_TO_ADDR
// end ; 3 :
21424: GO 21470
21426: LD_INT 3
21428: DOUBLE
21429: EQUAL
21430: IFTRUE 21434
21432: GO 21469
21434: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
21435: LD_EXP 29
21439: PPUSH
21440: LD_STRING D6c-Bur-1
21442: PPUSH
21443: CALL_OW 88
// SayRadio ( Kurin , D6c-Kur-1 ) ;
21447: LD_EXP 33
21451: PPUSH
21452: LD_STRING D6c-Kur-1
21454: PPUSH
21455: CALL_OW 94
// kurinWaitForVehiclesTime := 7 7$00 ;
21459: LD_ADDR_EXP 20
21463: PUSH
21464: LD_INT 14700
21466: ST_TO_ADDR
// end ; end ;
21467: GO 21470
21469: POP
// DialogueOff ;
21470: CALL_OW 7
// InGameOff ;
21474: CALL_OW 9
// if q = 3 then
21478: LD_VAR 0 6
21482: PUSH
21483: LD_INT 3
21485: EQUAL
21486: IFFALSE 21778
// begin repeat wait ( 0 0$1 ) ;
21488: LD_INT 35
21490: PPUSH
21491: CALL_OW 67
// vehiclesOwned := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ;
21495: LD_ADDR_VAR 0 5
21499: PUSH
21500: LD_INT 22
21502: PUSH
21503: LD_INT 3
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 21
21512: PUSH
21513: LD_INT 2
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 50
21522: PUSH
21523: EMPTY
21524: LIST
21525: PUSH
21526: LD_INT 23
21528: PUSH
21529: LD_INT 3
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: PPUSH
21542: CALL_OW 69
21546: ST_TO_ADDR
// pepCount := Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) ) ;
21547: LD_ADDR_VAR 0 7
21551: PUSH
21552: LD_INT 22
21554: PUSH
21555: LD_INT 3
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 21
21564: PUSH
21565: LD_INT 1
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 23
21574: PUSH
21575: LD_INT 3
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: LIST
21586: PPUSH
21587: CALL_OW 69
21591: PPUSH
21592: CALL 28367 0 1
21596: ST_TO_ADDR
// if vehiclesOwned < ( pepCount + requiredVehiclesAmount ) then
21597: LD_VAR 0 5
21601: PUSH
21602: LD_VAR 0 7
21606: PUSH
21607: LD_EXP 21
21611: PLUS
21612: LESS
21613: IFFALSE 21656
// display_strings := [ #Ru03-5 , ( pepCount + requiredVehiclesAmount ) - vehiclesOwned , #Ru03-6 , kurinWaitForVehiclesTime ] else
21615: LD_ADDR_OWVAR 47
21619: PUSH
21620: LD_STRING #Ru03-5
21622: PUSH
21623: LD_VAR 0 7
21627: PUSH
21628: LD_EXP 21
21632: PLUS
21633: PUSH
21634: LD_VAR 0 5
21638: MINUS
21639: PUSH
21640: LD_STRING #Ru03-6
21642: PUSH
21643: LD_EXP 20
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: ST_TO_ADDR
21654: GO 21677
// display_strings := [ #Ru03-5a , #Ru03-6 , kurinWaitForVehiclesTime ] ;
21656: LD_ADDR_OWVAR 47
21660: PUSH
21661: LD_STRING #Ru03-5a
21663: PUSH
21664: LD_STRING #Ru03-6
21666: PUSH
21667: LD_EXP 20
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: LIST
21676: ST_TO_ADDR
// kurinWaitForVehiclesTime := kurinWaitForVehiclesTime - 0 0$1 ;
21677: LD_ADDR_EXP 20
21681: PUSH
21682: LD_EXP 20
21686: PUSH
21687: LD_INT 35
21689: MINUS
21690: ST_TO_ADDR
// until kurinWaitForVehiclesTime = 0 0$0 ;
21691: LD_EXP 20
21695: PUSH
21696: LD_INT 0
21698: EQUAL
21699: IFFALSE 21488
// if vehiclesOwned < requiredVehiclesAmount then
21701: LD_VAR 0 5
21705: PUSH
21706: LD_EXP 21
21710: LESS
21711: IFFALSE 21742
// begin DialogueOn ;
21713: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
21717: LD_EXP 33
21721: PPUSH
21722: LD_STRING D6d-Kur-1
21724: PPUSH
21725: CALL_OW 94
// YouLost ( Vehicles ) ;
21729: LD_STRING Vehicles
21731: PPUSH
21732: CALL_OW 104
// DialogueOff ;
21736: CALL_OW 7
// exit ;
21740: GO 22630
// end ; DialogueOn ;
21742: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
21746: LD_EXP 33
21750: PPUSH
21751: LD_STRING D6c-Kur-2
21753: PPUSH
21754: CALL_OW 94
// DialogueOff ;
21758: CALL_OW 7
// sendMechanics := true ;
21762: LD_ADDR_VAR 0 9
21766: PUSH
21767: LD_INT 1
21769: ST_TO_ADDR
// timeToAttackOnOmicron := 2 2$00 ;
21770: LD_ADDR_EXP 23
21774: PUSH
21775: LD_INT 4200
21777: ST_TO_ADDR
// end ; display_strings := [ ] ;
21778: LD_ADDR_OWVAR 47
21782: PUSH
21783: EMPTY
21784: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
21785: LD_STRING M3a
21787: PPUSH
21788: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
21792: LD_STRING M5
21794: PPUSH
21795: CALL_OW 337
// if sendMechanics then
21799: LD_VAR 0 9
21803: IFFALSE 22630
// begin tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] , [ f_not , [ f_tag , tMech ] ] ] ) ;
21805: LD_ADDR_VAR 0 3
21809: PUSH
21810: LD_INT 22
21812: PUSH
21813: LD_INT 6
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 21
21822: PUSH
21823: LD_INT 1
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 25
21832: PUSH
21833: LD_INT 3
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 3
21842: PUSH
21843: LD_INT 120
21845: PUSH
21846: LD_INT 7
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: PPUSH
21863: CALL_OW 69
21867: ST_TO_ADDR
// if Count ( tmp ) < requiredVehiclesAmount then
21868: LD_VAR 0 3
21872: PPUSH
21873: CALL 28367 0 1
21877: PUSH
21878: LD_EXP 21
21882: LESS
21883: IFFALSE 22074
// begin for i := Count ( tmp ) to requiredVehiclesAmount do
21885: LD_ADDR_VAR 0 1
21889: PUSH
21890: DOUBLE
21891: LD_VAR 0 3
21895: PPUSH
21896: CALL 28367 0 1
21900: DEC
21901: ST_TO_ADDR
21902: LD_EXP 21
21906: PUSH
21907: FOR_TO
21908: IFFALSE 22009
// begin uc_side := 6 ;
21910: LD_ADDR_OWVAR 20
21914: PUSH
21915: LD_INT 6
21917: ST_TO_ADDR
// uc_nation := nation_russian ;
21918: LD_ADDR_OWVAR 21
21922: PUSH
21923: LD_INT 3
21925: ST_TO_ADDR
// PrepareMechanic ( false , 3 ) ;
21926: LD_INT 0
21928: PPUSH
21929: LD_INT 3
21931: PPUSH
21932: CALL_OW 383
// un := CreateHuman ;
21936: LD_ADDR_VAR 0 2
21940: PUSH
21941: CALL_OW 44
21945: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21946: LD_INT 35
21948: PPUSH
21949: CALL_OW 67
// until PlaceUnitArea ( un , southRoadSpawnArea , false ) ;
21953: LD_VAR 0 2
21957: PPUSH
21958: LD_INT 14
21960: PPUSH
21961: LD_INT 0
21963: PPUSH
21964: CALL_OW 49
21968: IFFALSE 21946
// ComMoveXY ( un , 193 , 135 ) ;
21970: LD_VAR 0 2
21974: PPUSH
21975: LD_INT 193
21977: PPUSH
21978: LD_INT 135
21980: PPUSH
21981: CALL_OW 111
// AddComMoveXY ( un , 159 , 106 ) ;
21985: LD_VAR 0 2
21989: PPUSH
21990: LD_INT 159
21992: PPUSH
21993: LD_INT 106
21995: PPUSH
21996: CALL_OW 171
// wait ( 0 0$1 ) ;
22000: LD_INT 35
22002: PPUSH
22003: CALL_OW 67
// end ;
22007: GO 21907
22009: POP
22010: POP
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] , [ f_not , [ f_tag , tMech ] ] ] ) ;
22011: LD_ADDR_VAR 0 3
22015: PUSH
22016: LD_INT 22
22018: PUSH
22019: LD_INT 6
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 21
22028: PUSH
22029: LD_INT 1
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 25
22038: PUSH
22039: LD_INT 3
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 3
22048: PUSH
22049: LD_INT 120
22051: PUSH
22052: LD_INT 7
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: PPUSH
22069: CALL_OW 69
22073: ST_TO_ADDR
// end ; kirovBaseSquad := kirovBaseSquad diff tmp ;
22074: LD_ADDR_EXP 38
22078: PUSH
22079: LD_EXP 38
22083: PUSH
22084: LD_VAR 0 3
22088: DIFF
22089: ST_TO_ADDR
// vehicles := [ ] ;
22090: LD_ADDR_VAR 0 4
22094: PUSH
22095: EMPTY
22096: ST_TO_ADDR
// vehiclesOwned := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ;
22097: LD_ADDR_VAR 0 5
22101: PUSH
22102: LD_INT 22
22104: PUSH
22105: LD_INT 3
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 21
22114: PUSH
22115: LD_INT 2
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 50
22124: PUSH
22125: EMPTY
22126: LIST
22127: PUSH
22128: LD_INT 23
22130: PUSH
22131: LD_INT 3
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: PPUSH
22144: CALL_OW 69
22148: ST_TO_ADDR
// for i := 1 to requiredVehiclesAmount do
22149: LD_ADDR_VAR 0 1
22153: PUSH
22154: DOUBLE
22155: LD_INT 1
22157: DEC
22158: ST_TO_ADDR
22159: LD_EXP 21
22163: PUSH
22164: FOR_TO
22165: IFFALSE 22248
// begin ComExit ( IsDrivenBy ( vehiclesOwned [ i ] ) ) ;
22167: LD_VAR 0 5
22171: PUSH
22172: LD_VAR 0 1
22176: ARRAY
22177: PPUSH
22178: CALL_OW 311
22182: PPUSH
22183: CALL 64741 0 1
// SetSide ( vehiclesOwned [ i ] , 6 ) ;
22187: LD_VAR 0 5
22191: PUSH
22192: LD_VAR 0 1
22196: ARRAY
22197: PPUSH
22198: LD_INT 6
22200: PPUSH
22201: CALL_OW 235
// vehicles := Join ( vehicles , vehiclesOwned [ i ] ) ;
22205: LD_ADDR_VAR 0 4
22209: PUSH
22210: LD_VAR 0 4
22214: PPUSH
22215: LD_VAR 0 5
22219: PUSH
22220: LD_VAR 0 1
22224: ARRAY
22225: PPUSH
22226: CALL 64343 0 2
22230: ST_TO_ADDR
// ComExit ( tmp [ i ] ) ;
22231: LD_VAR 0 3
22235: PUSH
22236: LD_VAR 0 1
22240: ARRAY
22241: PPUSH
22242: CALL 64741 0 1
// end ;
22246: GO 22164
22248: POP
22249: POP
// if not vehicles then
22250: LD_VAR 0 4
22254: NOT
22255: IFFALSE 22259
// exit ;
22257: GO 22630
// kirovAttackVehicles := kirovVehicles union vehicles ;
22259: LD_ADDR_EXP 50
22263: PUSH
22264: LD_EXP 49
22268: PUSH
22269: LD_VAR 0 4
22273: UNION
22274: ST_TO_ADDR
// kirovVehicles := [ ] ;
22275: LD_ADDR_EXP 49
22279: PUSH
22280: EMPTY
22281: ST_TO_ADDR
// for i in kirovAttackVehicles do
22282: LD_ADDR_VAR 0 1
22286: PUSH
22287: LD_EXP 50
22291: PUSH
22292: FOR_IN
22293: IFFALSE 22309
// SetTag ( i , 0 ) ;
22295: LD_VAR 0 1
22299: PPUSH
22300: LD_INT 0
22302: PPUSH
22303: CALL_OW 109
22307: GO 22292
22309: POP
22310: POP
// repeat wait ( 0 0$3 ) ;
22311: LD_INT 105
22313: PPUSH
22314: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] , [ f_not , [ f_tag , tMech ] ] ] ) ;
22318: LD_ADDR_VAR 0 3
22322: PUSH
22323: LD_INT 22
22325: PUSH
22326: LD_INT 6
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 21
22335: PUSH
22336: LD_INT 1
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 25
22345: PUSH
22346: LD_INT 3
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 3
22355: PUSH
22356: LD_INT 55
22358: PUSH
22359: EMPTY
22360: LIST
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 3
22368: PUSH
22369: LD_INT 120
22371: PUSH
22372: LD_INT 7
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: PPUSH
22390: CALL_OW 69
22394: ST_TO_ADDR
// vehicles := UnitFilter ( kirovAttackVehicles , [ f_empty ] ) ;
22395: LD_ADDR_VAR 0 4
22399: PUSH
22400: LD_EXP 50
22404: PPUSH
22405: LD_INT 58
22407: PUSH
22408: EMPTY
22409: LIST
22410: PPUSH
22411: CALL_OW 72
22415: ST_TO_ADDR
// for i := 1 to Count ( vehicles ) do
22416: LD_ADDR_VAR 0 1
22420: PUSH
22421: DOUBLE
22422: LD_INT 1
22424: DEC
22425: ST_TO_ADDR
22426: LD_VAR 0 4
22430: PPUSH
22431: CALL 28367 0 1
22435: PUSH
22436: FOR_TO
22437: IFFALSE 22479
// if i <= tmp then
22439: LD_VAR 0 1
22443: PUSH
22444: LD_VAR 0 3
22448: LESSEQUAL
22449: IFFALSE 22477
// ComEnterUnit ( tmp [ i ] , vehicles [ i ] ) ;
22451: LD_VAR 0 3
22455: PUSH
22456: LD_VAR 0 1
22460: ARRAY
22461: PPUSH
22462: LD_VAR 0 4
22466: PUSH
22467: LD_VAR 0 1
22471: ARRAY
22472: PPUSH
22473: CALL_OW 120
22477: GO 22436
22479: POP
22480: POP
// until not UnitFilter ( kirovAttackVehicles , [ f_empty ] ) ;
22481: LD_EXP 50
22485: PPUSH
22486: LD_INT 58
22488: PUSH
22489: EMPTY
22490: LIST
22491: PPUSH
22492: CALL_OW 72
22496: NOT
22497: IFFALSE 22311
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_mechanic ] , [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_driving ] ] ] ) ;
22499: LD_ADDR_VAR 0 3
22503: PUSH
22504: LD_INT 22
22506: PUSH
22507: LD_INT 6
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 25
22516: PUSH
22517: LD_INT 3
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: LD_INT 3
22526: PUSH
22527: LD_INT 120
22529: PUSH
22530: LD_INT 7
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PUSH
22541: LD_INT 3
22543: PUSH
22544: LD_INT 55
22546: PUSH
22547: EMPTY
22548: LIST
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: PPUSH
22560: CALL_OW 69
22564: ST_TO_ADDR
// for i in tmp do
22565: LD_ADDR_VAR 0 1
22569: PUSH
22570: LD_VAR 0 3
22574: PUSH
22575: FOR_IN
22576: IFFALSE 22613
// if not i in kirovBaseSquad then
22578: LD_VAR 0 1
22582: PUSH
22583: LD_EXP 38
22587: IN
22588: NOT
22589: IFFALSE 22611
// kirovBaseSquad := Join ( kirovBaseSquad , i ) ;
22591: LD_ADDR_EXP 38
22595: PUSH
22596: LD_EXP 38
22600: PPUSH
22601: LD_VAR 0 1
22605: PPUSH
22606: CALL 64343 0 2
22610: ST_TO_ADDR
22611: GO 22575
22613: POP
22614: POP
// ComMoveXY ( kirovAttackVehicles , 71 , 36 ) ;
22615: LD_EXP 50
22619: PPUSH
22620: LD_INT 71
22622: PPUSH
22623: LD_INT 36
22625: PPUSH
22626: CALL_OW 111
// end ; end ;
22630: PPOPN 9
22632: END
// every 0 0$1 trigger timeToAttackOnOmicron do
22633: LD_EXP 23
22637: IFFALSE 23071
22639: GO 22641
22641: DISABLE
// begin SetAreaMapShow ( omicronGatheringArea , 1 ) ;
22642: LD_INT 16
22644: PPUSH
22645: LD_INT 1
22647: PPUSH
22648: CALL_OW 424
// RaiseSailEvent ( eventCargo ) ;
22652: LD_INT 1
22654: PPUSH
22655: CALL_OW 427
// repeat wait ( 0 0$1 ) ;
22659: LD_INT 35
22661: PPUSH
22662: CALL_OW 67
// display_strings := [ #Ru03-1 , timeToAttackOnOmicron ] ;
22666: LD_ADDR_OWVAR 47
22670: PUSH
22671: LD_STRING #Ru03-1
22673: PUSH
22674: LD_EXP 23
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: ST_TO_ADDR
// timeToAttackOnOmicron := timeToAttackOnOmicron - 0 0$1 ;
22683: LD_ADDR_EXP 23
22687: PUSH
22688: LD_EXP 23
22692: PUSH
22693: LD_INT 35
22695: MINUS
22696: ST_TO_ADDR
// until timeToAttackOnOmicron = 0 0$0 ;
22697: LD_EXP 23
22701: PUSH
22702: LD_INT 0
22704: EQUAL
22705: IFFALSE 22659
// if FilterUnitsExceptArea ( omicronGatheringArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) or FilterUnitsExceptArea ( omicronGatheringArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] ] ) then
22707: LD_INT 16
22709: PPUSH
22710: LD_INT 22
22712: PUSH
22713: LD_INT 3
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 21
22722: PUSH
22723: LD_INT 2
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 3
22732: PUSH
22733: LD_INT 58
22735: PUSH
22736: EMPTY
22737: LIST
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: LIST
22747: PPUSH
22748: CALL_OW 71
22752: IFTRUE 22801
22754: PUSH
22755: LD_INT 16
22757: PPUSH
22758: LD_INT 22
22760: PUSH
22761: LD_INT 3
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 21
22770: PUSH
22771: LD_INT 1
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: LD_INT 3
22780: PUSH
22781: LD_INT 55
22783: PUSH
22784: EMPTY
22785: LIST
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: LIST
22795: PPUSH
22796: CALL_OW 71
22800: OR
22801: IFFALSE 22984
// begin DialogueOn ;
22803: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
22807: LD_EXP 33
22811: PPUSH
22812: LD_STRING D7a-Kur-1
22814: PPUSH
22815: CALL_OW 94
// DialogueOff ;
22819: CALL_OW 7
// timeToAttackOnOmicron := 2 2$00 ;
22823: LD_ADDR_EXP 23
22827: PUSH
22828: LD_INT 4200
22830: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22831: LD_INT 35
22833: PPUSH
22834: CALL_OW 67
// display_strings := [ #Ru03-2 , timeToAttackOnOmicron ] ;
22838: LD_ADDR_OWVAR 47
22842: PUSH
22843: LD_STRING #Ru03-2
22845: PUSH
22846: LD_EXP 23
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: ST_TO_ADDR
// timeToAttackOnOmicron := timeToAttackOnOmicron - 0 0$1 ;
22855: LD_ADDR_EXP 23
22859: PUSH
22860: LD_EXP 23
22864: PUSH
22865: LD_INT 35
22867: MINUS
22868: ST_TO_ADDR
// until timeToAttackOnOmicron = 0 0$0 ;
22869: LD_EXP 23
22873: PUSH
22874: LD_INT 0
22876: EQUAL
22877: IFFALSE 22831
// if FilterUnitsExceptArea ( omicronGatheringArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) or FilterUnitsExceptArea ( omicronGatheringArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] ] ) then
22879: LD_INT 16
22881: PPUSH
22882: LD_INT 22
22884: PUSH
22885: LD_INT 3
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 21
22894: PUSH
22895: LD_INT 2
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 3
22904: PUSH
22905: LD_INT 58
22907: PUSH
22908: EMPTY
22909: LIST
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: LIST
22919: PPUSH
22920: CALL_OW 71
22924: IFTRUE 22973
22926: PUSH
22927: LD_INT 16
22929: PPUSH
22930: LD_INT 22
22932: PUSH
22933: LD_INT 3
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: PUSH
22940: LD_INT 21
22942: PUSH
22943: LD_INT 1
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 3
22952: PUSH
22953: LD_INT 55
22955: PUSH
22956: EMPTY
22957: LIST
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: LIST
22967: PPUSH
22968: CALL_OW 71
22972: OR
22973: IFFALSE 22984
// begin YouLost ( Delay ) ;
22975: LD_STRING Delay
22977: PPUSH
22978: CALL_OW 104
// exit ;
22982: GO 23071
// end ; end ; display_strings := [ ] ;
22984: LD_ADDR_OWVAR 47
22988: PUSH
22989: EMPTY
22990: ST_TO_ADDR
// allowedToAttackOmicron := true ;
22991: LD_ADDR_EXP 13
22995: PUSH
22996: LD_INT 1
22998: ST_TO_ADDR
// canCaptureKirovVehs := true ;
22999: LD_ADDR_EXP 22
23003: PUSH
23004: LD_INT 1
23006: ST_TO_ADDR
// retreatToKirovAllowed := false ;
23007: LD_ADDR_EXP 24
23011: PUSH
23012: LD_INT 0
23014: ST_TO_ADDR
// SetAreaMapShow ( omicronGatheringArea , 0 ) ;
23015: LD_INT 16
23017: PPUSH
23018: LD_INT 0
23020: PPUSH
23021: CALL_OW 424
// DialogueOn ;
23025: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
23029: LD_EXP 29
23033: PPUSH
23034: LD_STRING D7-Bur-1
23036: PPUSH
23037: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
23041: LD_EXP 33
23045: PPUSH
23046: LD_STRING D7-Kur-1
23048: PPUSH
23049: CALL_OW 94
// DialogueOff ;
23053: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
23057: LD_STRING M5a
23059: PPUSH
23060: CALL_OW 337
// Query ( QRefuel ) ;
23064: LD_STRING QRefuel
23066: PPUSH
23067: CALL_OW 97
// end ;
23071: END
// every 0 0$2 trigger not retreatToKirovAllowed and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirovDepot , 16 ] , [ f_not , [ f_and , [ f_type , unit_vehicle ] , [ f_empty ] ] ] , [ f_not , [ f_type , unit_building ] ] ] ) do var i , tmp ;
23072: LD_EXP 24
23076: NOT
23077: IFFALSE 23165
23079: PUSH
23080: LD_INT 22
23082: PUSH
23083: LD_INT 3
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 91
23092: PUSH
23093: LD_EXP 45
23097: PUSH
23098: LD_INT 16
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 3
23108: PUSH
23109: LD_INT 1
23111: PUSH
23112: LD_INT 21
23114: PUSH
23115: LD_INT 2
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: LD_INT 58
23124: PUSH
23125: EMPTY
23126: LIST
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: LIST
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: LD_INT 3
23139: PUSH
23140: LD_INT 21
23142: PUSH
23143: LD_INT 3
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: PPUSH
23160: CALL_OW 69
23164: AND
23165: IFFALSE 23316
23167: GO 23169
23169: DISABLE
23170: LD_INT 0
23172: PPUSH
23173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirovDepot , 16 ] , [ f_not , [ f_and , [ f_type , unit_vehicle ] , [ f_empty ] ] ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23174: LD_ADDR_VAR 0 2
23178: PUSH
23179: LD_INT 22
23181: PUSH
23182: LD_INT 3
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 91
23191: PUSH
23192: LD_EXP 45
23196: PUSH
23197: LD_INT 16
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 3
23207: PUSH
23208: LD_INT 1
23210: PUSH
23211: LD_INT 21
23213: PUSH
23214: LD_INT 2
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 58
23223: PUSH
23224: EMPTY
23225: LIST
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: LIST
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: LD_INT 3
23238: PUSH
23239: LD_INT 21
23241: PUSH
23242: LD_INT 3
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: PPUSH
23259: CALL_OW 69
23263: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
23264: LD_VAR 0 2
23268: PPUSH
23269: CALL_OW 87
// InGameOn ;
23273: CALL_OW 8
// ComMoveXY ( tmp , 70 , 33 ) ;
23277: LD_VAR 0 2
23281: PPUSH
23282: LD_INT 70
23284: PPUSH
23285: LD_INT 33
23287: PPUSH
23288: CALL_OW 111
// SayRadio ( Kurin , D12-Kur-1 ) ;
23292: LD_EXP 33
23296: PPUSH
23297: LD_STRING D12-Kur-1
23299: PPUSH
23300: CALL_OW 94
// InGameOff ;
23304: CALL_OW 9
// wait ( 0 0$2 ) ;
23308: LD_INT 70
23310: PPUSH
23311: CALL_OW 67
// enable ;
23315: ENABLE
// end ;
23316: PPOPN 2
23318: END
// every 0 0$2 trigger not allowedToAttackOmicron and FilterUnitsInArea ( omicronBaseOuterArea , [ f_side , 3 ] ) do var i ;
23319: LD_EXP 13
23323: NOT
23324: IFFALSE 23345
23326: PUSH
23327: LD_INT 20
23329: PPUSH
23330: LD_INT 22
23332: PUSH
23333: LD_INT 3
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PPUSH
23340: CALL_OW 70
23344: AND
23345: IFFALSE 23503
23347: GO 23349
23349: DISABLE
23350: LD_INT 0
23352: PPUSH
// begin if IsOk ( Gnyevko ) and omicronRetreatCounter = 0 then
23353: LD_EXP 30
23357: PPUSH
23358: CALL_OW 302
23362: IFFALSE 23374
23364: PUSH
23365: LD_EXP 27
23369: PUSH
23370: LD_INT 0
23372: EQUAL
23373: AND
23374: IFFALSE 23410
// begin DialogueOn ;
23376: CALL_OW 6
// Say ( Gnyevko , D11-Gny-1 ) ;
23380: LD_EXP 30
23384: PPUSH
23385: LD_STRING D11-Gny-1
23387: PPUSH
23388: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
23392: LD_EXP 29
23396: PPUSH
23397: LD_STRING D11-Bur-1
23399: PPUSH
23400: CALL_OW 88
// DialogueOff ;
23404: CALL_OW 7
// end else
23408: GO 23430
// begin DialogueOn ;
23410: CALL_OW 6
// SayRadio ( Kurin , D11-Kur-1 ) ;
23414: LD_EXP 33
23418: PPUSH
23419: LD_STRING D11-Kur-1
23421: PPUSH
23422: CALL_OW 94
// DialogueOff ;
23426: CALL_OW 7
// end ; omicronRetreatCounter := Inc ( omicronRetreatCounter ) ;
23430: LD_ADDR_EXP 27
23434: PUSH
23435: LD_EXP 27
23439: PPUSH
23440: CALL 65716 0 1
23444: ST_TO_ADDR
// InGameOn ;
23445: CALL_OW 8
// for i in FilterUnitsInArea ( omicronBaseOuterArea , [ f_side , 3 ] ) do
23449: LD_ADDR_VAR 0 1
23453: PUSH
23454: LD_INT 20
23456: PPUSH
23457: LD_INT 22
23459: PUSH
23460: LD_INT 3
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PPUSH
23467: CALL_OW 70
23471: PUSH
23472: FOR_IN
23473: IFFALSE 23489
// ComMoveToArea ( i , omicronRetreatArea ) ;
23475: LD_VAR 0 1
23479: PPUSH
23480: LD_INT 27
23482: PPUSH
23483: CALL_OW 113
23487: GO 23472
23489: POP
23490: POP
// wait ( 0 0$2 ) ;
23491: LD_INT 70
23493: PPUSH
23494: CALL_OW 67
// InGameOff ;
23498: CALL_OW 9
// enable ;
23502: ENABLE
// end ;
23503: PPOPN 1
23505: END
// every 0 0$2 trigger ( FilterUnitsInArea ( omicronBaseInnerArea , [ f_enemy , 1 ] ) or GetLives ( usDep ) < 1000 ) and allowedToAttackOmicron do var i , tmp , random , sol , nearest ;
23506: LD_INT 19
23508: PPUSH
23509: LD_INT 81
23511: PUSH
23512: LD_INT 1
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PPUSH
23519: CALL_OW 70
23523: IFTRUE 23538
23525: PUSH
23526: LD_INT 290
23528: PPUSH
23529: CALL_OW 256
23533: PUSH
23534: LD_INT 1000
23536: LESS
23537: OR
23538: IFFALSE 23546
23540: PUSH
23541: LD_EXP 13
23545: AND
23546: IFFALSE 24998
23548: GO 23550
23550: DISABLE
23551: LD_INT 0
23553: PPUSH
23554: PPUSH
23555: PPUSH
23556: PPUSH
23557: PPUSH
// begin uc_side := 1 ;
23558: LD_ADDR_OWVAR 20
23562: PUSH
23563: LD_INT 1
23565: ST_TO_ADDR
// uc_nation := nation_american ;
23566: LD_ADDR_OWVAR 21
23570: PUSH
23571: LD_INT 1
23573: ST_TO_ADDR
// PrepareSoldier ( sex_male , 1 ) ;
23574: LD_INT 1
23576: PPUSH
23577: LD_INT 1
23579: PPUSH
23580: CALL_OW 381
// random := CreateHuman ;
23584: LD_ADDR_VAR 0 3
23588: PUSH
23589: CALL_OW 44
23593: ST_TO_ADDR
// SayRadioNoFaceNoName ( random , D8-Sol1-1 ) ;
23594: LD_VAR 0 3
23598: PPUSH
23599: LD_STRING D8-Sol1-1
23601: PPUSH
23602: CALL 68588 0 2
// sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_sex , sex_male ] ] ) diff mainRuCharacters ;
23606: LD_ADDR_VAR 0 4
23610: PUSH
23611: LD_INT 22
23613: PUSH
23614: LD_INT 3
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: PUSH
23621: LD_INT 50
23623: PUSH
23624: EMPTY
23625: LIST
23626: PUSH
23627: LD_INT 26
23629: PUSH
23630: LD_INT 1
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: LIST
23641: PPUSH
23642: CALL_OW 69
23646: PUSH
23647: LD_EXP 48
23651: DIFF
23652: ST_TO_ADDR
// if sol then
23653: LD_VAR 0 4
23657: IFFALSE 23675
// Say ( sol [ 1 ] , D8-RSol1-1 ) ;
23659: LD_VAR 0 4
23663: PUSH
23664: LD_INT 1
23666: ARRAY
23667: PPUSH
23668: LD_STRING D8-RSol1-1
23670: PPUSH
23671: CALL_OW 88
// if IsOk ( Kovalyuk ) then
23675: LD_EXP 34
23679: PPUSH
23680: CALL_OW 302
23684: IFFALSE 23698
// Say ( Kovalyuk , D8-Kov-1 ) ;
23686: LD_EXP 34
23690: PPUSH
23691: LD_STRING D8-Kov-1
23693: PPUSH
23694: CALL_OW 88
// americanRetreat := true ;
23698: LD_ADDR_EXP 26
23702: PUSH
23703: LD_INT 1
23705: ST_TO_ADDR
// wait ( 0 0$4 ) ;
23706: LD_INT 140
23708: PPUSH
23709: CALL_OW 67
// if Count ( sol ) > 1 then
23713: LD_VAR 0 4
23717: PPUSH
23718: CALL 28367 0 1
23722: PUSH
23723: LD_INT 1
23725: GREATER
23726: IFFALSE 23746
// Say ( sol [ 2 ] , D8-RSol2-1 ) else
23728: LD_VAR 0 4
23732: PUSH
23733: LD_INT 2
23735: ARRAY
23736: PPUSH
23737: LD_STRING D8-RSol2-1
23739: PPUSH
23740: CALL_OW 88
23744: GO 23769
// if IsOk ( Gnyevko ) then
23746: LD_EXP 30
23750: PPUSH
23751: CALL_OW 302
23755: IFFALSE 23769
// Say ( Gnyevko , D8-Gny-1 ) ;
23757: LD_EXP 30
23761: PPUSH
23762: LD_STRING D8-Gny-1
23764: PPUSH
23765: CALL_OW 88
// wait ( 0 0$4 ) ;
23769: LD_INT 140
23771: PPUSH
23772: CALL_OW 67
// DialogueOn ;
23776: CALL_OW 6
// CenterNowOnUnits ( Kurin ) ;
23780: LD_EXP 33
23784: PPUSH
23785: CALL_OW 87
// SayRadio ( Grishko , D9-Gri-1 ) ;
23789: LD_EXP 37
23793: PPUSH
23794: LD_STRING D9-Gri-1
23796: PPUSH
23797: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
23801: LD_EXP 33
23805: PPUSH
23806: LD_STRING D9-Kur-1
23808: PPUSH
23809: CALL_OW 94
// SayRadio ( Grishko , D9-Gri-2 ) ;
23813: LD_EXP 37
23817: PPUSH
23818: LD_STRING D9-Gri-2
23820: PPUSH
23821: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
23825: LD_EXP 33
23829: PPUSH
23830: LD_STRING D9-Kur-2
23832: PPUSH
23833: CALL_OW 94
// dwait ( 0 0$2 ) ;
23837: LD_INT 70
23839: PPUSH
23840: CALL_OW 68
// SayRadio ( Grishko , D9-Gri-3 ) ;
23844: LD_EXP 37
23848: PPUSH
23849: LD_STRING D9-Gri-3
23851: PPUSH
23852: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
23856: LD_EXP 33
23860: PPUSH
23861: LD_STRING D9-Kur-3
23863: PPUSH
23864: CALL_OW 94
// DialogueOff ;
23868: CALL_OW 7
// arabAttackActive := true ;
23872: LD_ADDR_EXP 8
23876: PUSH
23877: LD_INT 1
23879: ST_TO_ADDR
// CenterNowOnUnits ( Burlak ) ;
23880: LD_EXP 29
23884: PPUSH
23885: CALL_OW 87
// wait ( 0 0$5 ) ;
23889: LD_INT 175
23891: PPUSH
23892: CALL_OW 67
// SpawnArabAttack ;
23896: CALL 8019 0 0
// repeat wait ( 0 0$1 ) ;
23900: LD_INT 35
23902: PPUSH
23903: CALL_OW 67
// until FilterUnitsInArea ( kirovBaseOuterArea , [ f_side , 2 ] ) ;
23907: LD_INT 11
23909: PPUSH
23910: LD_INT 22
23912: PUSH
23913: LD_INT 2
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PPUSH
23920: CALL_OW 70
23924: IFFALSE 23900
// InGameOn ;
23926: CALL_OW 8
// CenterNowOnXY ( 160 , 107 ) ;
23930: LD_INT 160
23932: PPUSH
23933: LD_INT 107
23935: PPUSH
23936: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff popovTeam do
23940: LD_ADDR_VAR 0 1
23944: PUSH
23945: LD_INT 22
23947: PUSH
23948: LD_INT 6
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: LD_INT 2
23957: PUSH
23958: LD_INT 25
23960: PUSH
23961: LD_INT 2
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 25
23970: PUSH
23971: LD_INT 4
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: LIST
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PPUSH
23987: CALL_OW 69
23991: PUSH
23992: LD_EXP 44
23996: DIFF
23997: PUSH
23998: FOR_IN
23999: IFFALSE 24043
// begin kirovBaseSquad := kirovBaseSquad diff i ;
24001: LD_ADDR_EXP 38
24005: PUSH
24006: LD_EXP 38
24010: PUSH
24011: LD_VAR 0 1
24015: DIFF
24016: ST_TO_ADDR
// ComExitBuilding ( i ) ;
24017: LD_VAR 0 1
24021: PPUSH
24022: CALL_OW 122
// AddComMoveXY ( i , 56 , 94 ) ;
24026: LD_VAR 0 1
24030: PPUSH
24031: LD_INT 56
24033: PPUSH
24034: LD_INT 94
24036: PPUSH
24037: CALL_OW 171
// end ;
24041: GO 23998
24043: POP
24044: POP
// SayRadio ( Kurin , D9a-Kur-1 ) ;
24045: LD_EXP 33
24049: PPUSH
24050: LD_STRING D9a-Kur-1
24052: PPUSH
24053: CALL_OW 94
// Say ( Burlak , D9a-Bur-1 ) ;
24057: LD_EXP 29
24061: PPUSH
24062: LD_STRING D9a-Bur-1
24064: PPUSH
24065: CALL_OW 88
// SayRadio ( Kurin , D9a-Kur-2 ) ;
24069: LD_EXP 33
24073: PPUSH
24074: LD_STRING D9a-Kur-2
24076: PPUSH
24077: CALL_OW 94
// ComExitBuilding ( Kurin ) ;
24081: LD_EXP 33
24085: PPUSH
24086: CALL_OW 122
// wait ( 0 0$2 ) ;
24090: LD_INT 70
24092: PPUSH
24093: CALL_OW 67
// InGameOff ;
24097: CALL_OW 9
// CenterNowOnUnits ( Burlak ) ;
24101: LD_EXP 29
24105: PPUSH
24106: CALL_OW 87
// ChangeMissionObjectives ( M6a ) ;
24110: LD_STRING M6a
24112: PPUSH
24113: CALL_OW 337
// ComMoveXY ( Popov union popovTeam , 121 , 43 ) ;
24117: LD_EXP 35
24121: PUSH
24122: LD_EXP 44
24126: UNION
24127: PPUSH
24128: LD_INT 121
24130: PPUSH
24131: LD_INT 43
24133: PPUSH
24134: CALL_OW 111
// AddComMoveXY ( Popov union popovTeam , 90 , 60 ) ;
24138: LD_EXP 35
24142: PUSH
24143: LD_EXP 44
24147: UNION
24148: PPUSH
24149: LD_INT 90
24151: PPUSH
24152: LD_INT 60
24154: PPUSH
24155: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
24159: LD_INT 35
24161: PPUSH
24162: CALL_OW 67
// nearest := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_nation , 3 ] , [ f_ok ] ] ) diff [ Belkov , Gnyevko , Kovalyuk , Scholtze ] ;
24166: LD_ADDR_VAR 0 5
24170: PUSH
24171: LD_INT 22
24173: PUSH
24174: LD_INT 3
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 21
24183: PUSH
24184: LD_INT 1
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 26
24193: PUSH
24194: LD_INT 1
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 23
24203: PUSH
24204: LD_INT 3
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 50
24213: PUSH
24214: EMPTY
24215: LIST
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: PPUSH
24224: CALL_OW 69
24228: PUSH
24229: LD_EXP 31
24233: PUSH
24234: LD_EXP 30
24238: PUSH
24239: LD_EXP 34
24243: PUSH
24244: LD_EXP 36
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: DIFF
24255: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , Popov , 7 ] , [ f_not , [ f_empty ] ] ] ) ;
24256: LD_ADDR_VAR 0 2
24260: PUSH
24261: LD_INT 22
24263: PUSH
24264: LD_INT 3
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 21
24273: PUSH
24274: LD_INT 2
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 91
24283: PUSH
24284: LD_EXP 35
24288: PUSH
24289: LD_INT 7
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 3
24299: PUSH
24300: LD_INT 58
24302: PUSH
24303: EMPTY
24304: LIST
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: PPUSH
24316: CALL_OW 69
24320: ST_TO_ADDR
// if nearest then
24321: LD_VAR 0 5
24325: IFFALSE 24349
// nearest := NearestUnitToUnit ( nearest , Popov ) else
24327: LD_ADDR_VAR 0 5
24331: PUSH
24332: LD_VAR 0 5
24336: PPUSH
24337: LD_EXP 35
24341: PPUSH
24342: CALL_OW 74
24346: ST_TO_ADDR
24347: GO 24386
// if tmp then
24349: LD_VAR 0 2
24353: IFFALSE 24386
// begin for i in tmp do
24355: LD_ADDR_VAR 0 1
24359: PUSH
24360: LD_VAR 0 2
24364: PUSH
24365: FOR_IN
24366: IFFALSE 24384
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
24368: LD_VAR 0 1
24372: PPUSH
24373: CALL_OW 311
24377: PPUSH
24378: CALL_OW 121
24382: GO 24365
24384: POP
24385: POP
// end ; until nearest and GetDistUnits ( nearest , Popov ) < 8 ;
24386: LD_VAR 0 5
24390: IFFALSE 24412
24392: PUSH
24393: LD_VAR 0 5
24397: PPUSH
24398: LD_EXP 35
24402: PPUSH
24403: CALL_OW 296
24407: PUSH
24408: LD_INT 8
24410: LESS
24411: AND
24412: IFFALSE 24159
// retreat := true ;
24414: LD_ADDR_EXP 18
24418: PUSH
24419: LD_INT 1
24421: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ f_side , 2 ] ) , 185 , 126 ) ;
24422: LD_INT 22
24424: PUSH
24425: LD_INT 2
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PPUSH
24432: CALL_OW 69
24436: PPUSH
24437: LD_INT 185
24439: PPUSH
24440: LD_INT 126
24442: PPUSH
24443: CALL_OW 111
// if nearest = Burlak then
24447: LD_VAR 0 5
24451: PUSH
24452: LD_EXP 29
24456: EQUAL
24457: IFFALSE 24711
// begin InGameOn ;
24459: CALL_OW 8
// CenterOnUnits ( Popov ) ;
24463: LD_EXP 35
24467: PPUSH
24468: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
24472: LD_ADDR_VAR 0 1
24476: PUSH
24477: LD_INT 22
24479: PUSH
24480: LD_INT 3
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 21
24489: PUSH
24490: LD_INT 1
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PPUSH
24501: CALL_OW 69
24505: PUSH
24506: FOR_IN
24507: IFFALSE 24526
// ComMoveXY ( i , 83 , 49 ) ;
24509: LD_VAR 0 1
24513: PPUSH
24514: LD_INT 83
24516: PPUSH
24517: LD_INT 49
24519: PPUSH
24520: CALL_OW 111
24524: GO 24506
24526: POP
24527: POP
// ComMoveUnit ( Burlak , Popov ) ;
24528: LD_EXP 29
24532: PPUSH
24533: LD_EXP 35
24537: PPUSH
24538: CALL_OW 112
// ComTurnUnit ( Popov , Burlak ) ;
24542: LD_EXP 35
24546: PPUSH
24547: LD_EXP 29
24551: PPUSH
24552: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
24556: LD_EXP 29
24560: PPUSH
24561: LD_STRING D10a-Bur-1
24563: PPUSH
24564: CALL_OW 88
// ComTurnUnit ( Burlak , Popov ) ;
24568: LD_EXP 29
24572: PPUSH
24573: LD_EXP 35
24577: PPUSH
24578: CALL_OW 119
// Say ( Popov , D10a-Pop-1 ) ;
24582: LD_EXP 35
24586: PPUSH
24587: LD_STRING D10a-Pop-1
24589: PPUSH
24590: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
24594: LD_EXP 29
24598: PPUSH
24599: LD_STRING D10a-Bur-2
24601: PPUSH
24602: CALL_OW 88
// CenterOnXY ( 159 , 107 ) ;
24606: LD_INT 159
24608: PPUSH
24609: LD_INT 107
24611: PPUSH
24612: CALL_OW 84
// Say ( Popov , D10a-Pop-2 ) ;
24616: LD_EXP 35
24620: PPUSH
24621: LD_STRING D10a-Pop-2
24623: PPUSH
24624: CALL_OW 88
// CenterNowOnUnits ( Popov ) ;
24628: LD_EXP 35
24632: PPUSH
24633: CALL_OW 87
// Say ( Burlak , D10a-Bur-3 ) ;
24637: LD_EXP 29
24641: PPUSH
24642: LD_STRING D10a-Bur-3
24644: PPUSH
24645: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
24649: LD_EXP 35
24653: PPUSH
24654: LD_STRING D10a-Pop-3
24656: PPUSH
24657: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
24661: LD_EXP 29
24665: PPUSH
24666: LD_STRING D10a-Bur-4
24668: PPUSH
24669: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
24673: LD_EXP 35
24677: PPUSH
24678: LD_STRING D10a-Pop-4
24680: PPUSH
24681: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
24685: LD_EXP 29
24689: PPUSH
24690: LD_STRING D10a-Bur-5
24692: PPUSH
24693: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
24697: LD_EXP 35
24701: PPUSH
24702: LD_STRING D10a-Pop-5
24704: PPUSH
24705: CALL_OW 88
// end else
24709: GO 24936
// begin InGameOn ;
24711: CALL_OW 8
// CenterOnUnits ( Popov ) ;
24715: LD_EXP 35
24719: PPUSH
24720: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
24724: LD_ADDR_VAR 0 1
24728: PUSH
24729: LD_INT 22
24731: PUSH
24732: LD_INT 3
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 21
24741: PUSH
24742: LD_INT 1
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PPUSH
24753: CALL_OW 69
24757: PUSH
24758: FOR_IN
24759: IFFALSE 24772
// ComHold ( i ) ;
24761: LD_VAR 0 1
24765: PPUSH
24766: CALL_OW 140
24770: GO 24758
24772: POP
24773: POP
// ComMoveUnit ( nearest , Popov ) ;
24774: LD_VAR 0 5
24778: PPUSH
24779: LD_EXP 35
24783: PPUSH
24784: CALL_OW 112
// ComTurnUnit ( Popov , nearest ) ;
24788: LD_EXP 35
24792: PPUSH
24793: LD_VAR 0 5
24797: PPUSH
24798: CALL_OW 119
// Say ( nearest , D10b-RSol1-1 ) ;
24802: LD_VAR 0 5
24806: PPUSH
24807: LD_STRING D10b-RSol1-1
24809: PPUSH
24810: CALL_OW 88
// ComTurnUnit ( nearest , Popov ) ;
24814: LD_VAR 0 5
24818: PPUSH
24819: LD_EXP 35
24823: PPUSH
24824: CALL_OW 119
// Say ( Popov , D10b-Pop-1 ) ;
24828: LD_EXP 35
24832: PPUSH
24833: LD_STRING D10b-Pop-1
24835: PPUSH
24836: CALL_OW 88
// Say ( nearest , D10b-RSol1-2 ) ;
24840: LD_VAR 0 5
24844: PPUSH
24845: LD_STRING D10b-RSol1-2
24847: PPUSH
24848: CALL_OW 88
// SayRadio ( Popov , D10b-Pop-2 ) ;
24852: LD_EXP 35
24856: PPUSH
24857: LD_STRING D10b-Pop-2
24859: PPUSH
24860: CALL_OW 94
// Say ( Burlak , D10b-Bur-2 ) ;
24864: LD_EXP 29
24868: PPUSH
24869: LD_STRING D10b-Bur-2
24871: PPUSH
24872: CALL_OW 88
// SayRadio ( Popov , D10b-Pop-3 ) ;
24876: LD_EXP 35
24880: PPUSH
24881: LD_STRING D10b-Pop-3
24883: PPUSH
24884: CALL_OW 94
// Say ( Burlak , D10b-Bur-3 ) ;
24888: LD_EXP 29
24892: PPUSH
24893: LD_STRING D10b-Bur-3
24895: PPUSH
24896: CALL_OW 88
// SayRadio ( Popov , D10b-Pop-4 ) ;
24900: LD_EXP 35
24904: PPUSH
24905: LD_STRING D10b-Pop-4
24907: PPUSH
24908: CALL_OW 94
// Say ( Burlak , D10b-Bur-4 ) ;
24912: LD_EXP 29
24916: PPUSH
24917: LD_STRING D10b-Bur-4
24919: PPUSH
24920: CALL_OW 88
// SayRadio ( Popov , D10b-Pop-5 ) ;
24924: LD_EXP 35
24928: PPUSH
24929: LD_STRING D10b-Pop-5
24931: PPUSH
24932: CALL_OW 94
// end ; ComMoveXY ( Popov ^ popovTeam ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 67 , 127 ) ;
24936: LD_EXP 35
24940: PUSH
24941: LD_EXP 44
24945: ADD
24946: PUSH
24947: LD_INT 22
24949: PUSH
24950: LD_INT 3
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 21
24959: PUSH
24960: LD_INT 1
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PPUSH
24971: CALL_OW 69
24975: ADD
24976: PPUSH
24977: LD_INT 67
24979: PPUSH
24980: LD_INT 127
24982: PPUSH
24983: CALL_OW 111
// wait ( 0 0$3 ) ;
24987: LD_INT 105
24989: PPUSH
24990: CALL_OW 67
// FinishMission ;
24994: CALL 25001 0 0
// end ;
24998: PPOPN 5
25000: END
// function FinishMission ; var i , saveVehicles ; begin
25001: LD_INT 0
25003: PPUSH
25004: PPUSH
25005: PPUSH
// if not joinToOmicronCounter then
25006: LD_EXP 28
25010: NOT
25011: IFFALSE 25020
// SetAchievement ( ACH_REINFORCE ) ;
25013: LD_STRING ACH_REINFORCE
25015: PPUSH
25016: CALL_OW 543
// if Count ( joinToOmicronCounter ) > [ 12 , 10 , 8 , 6 ] [ Difficulty ] then
25020: LD_EXP 28
25024: PPUSH
25025: CALL 28367 0 1
25029: PUSH
25030: LD_INT 12
25032: PUSH
25033: LD_INT 10
25035: PUSH
25036: LD_INT 8
25038: PUSH
25039: LD_INT 6
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: PUSH
25048: LD_OWVAR 67
25052: ARRAY
25053: GREATER
25054: IFFALSE 25069
// AddMedal ( PreventReinforcements , - 1 ) else
25056: LD_STRING PreventReinforcements
25058: PPUSH
25059: LD_INT 1
25061: NEG
25062: PPUSH
25063: CALL_OW 101
25067: GO 25079
// AddMedal ( PreventReinforcements , 1 ) ;
25069: LD_STRING PreventReinforcements
25071: PPUSH
25072: LD_INT 1
25074: PPUSH
25075: CALL_OW 101
// if IsLive ( Scholtze ) then
25079: LD_EXP 36
25083: PPUSH
25084: CALL_OW 300
25088: IFFALSE 25102
// AddMedal ( Scholtze , 1 ) else
25090: LD_STRING Scholtze
25092: PPUSH
25093: LD_INT 1
25095: PPUSH
25096: CALL_OW 101
25100: GO 25132
// if hasScholtze then
25102: LD_EXP 11
25106: IFFALSE 25121
// AddMedal ( Scholtze , - 2 ) else
25108: LD_STRING Scholtze
25110: PPUSH
25111: LD_INT 2
25113: NEG
25114: PPUSH
25115: CALL_OW 101
25119: GO 25132
// AddMedal ( Scholtze , - 1 ) ;
25121: LD_STRING Scholtze
25123: PPUSH
25124: LD_INT 1
25126: NEG
25127: PPUSH
25128: CALL_OW 101
// GiveMedals ( MAIN ) ;
25132: LD_STRING MAIN
25134: PPUSH
25135: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) ) ;
25139: LD_INT 22
25141: PUSH
25142: LD_INT 3
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 21
25151: PUSH
25152: LD_INT 1
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 23
25161: PUSH
25162: LD_INT 3
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: LIST
25173: PPUSH
25174: CALL_OW 69
25178: PPUSH
25179: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
25183: LD_EXP 29
25187: PPUSH
25188: LD_EXP 3
25192: PUSH
25193: LD_STRING Burlak
25195: STR
25196: PPUSH
25197: CALL_OW 38
// SaveCharacters ( Popov , currentMissionPrefix & Popov ) ;
25201: LD_EXP 35
25205: PPUSH
25206: LD_EXP 3
25210: PUSH
25211: LD_STRING Popov
25213: STR
25214: PPUSH
25215: CALL_OW 38
// if IsLive ( Gnyevko ) then
25219: LD_EXP 30
25223: PPUSH
25224: CALL_OW 300
25228: IFFALSE 25248
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
25230: LD_EXP 30
25234: PPUSH
25235: LD_EXP 3
25239: PUSH
25240: LD_STRING Gnyevko
25242: STR
25243: PPUSH
25244: CALL_OW 38
// if IsLive ( Kovalyuk ) then
25248: LD_EXP 34
25252: PPUSH
25253: CALL_OW 300
25257: IFFALSE 25277
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
25259: LD_EXP 34
25263: PPUSH
25264: LD_EXP 3
25268: PUSH
25269: LD_STRING Kovalyuk
25271: STR
25272: PPUSH
25273: CALL_OW 38
// if IsLive ( Belkov ) then
25277: LD_EXP 31
25281: PPUSH
25282: CALL_OW 300
25286: IFFALSE 25306
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
25288: LD_EXP 31
25292: PPUSH
25293: LD_EXP 3
25297: PUSH
25298: LD_STRING Belkov
25300: STR
25301: PPUSH
25302: CALL_OW 38
// if IsLive ( Kirilenkova ) then
25306: LD_EXP 32
25310: PPUSH
25311: CALL_OW 300
25315: IFFALSE 25335
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
25317: LD_EXP 32
25321: PPUSH
25322: LD_EXP 3
25326: PUSH
25327: LD_STRING Kirilenkova
25329: STR
25330: PPUSH
25331: CALL_OW 38
// if IsLive ( Scholtze ) then
25335: LD_EXP 36
25339: PPUSH
25340: CALL_OW 300
25344: IFFALSE 25364
// SaveCharacters ( Scholtze , currentMissionPrefix & Scholtze ) ;
25346: LD_EXP 36
25350: PPUSH
25351: LD_EXP 3
25355: PUSH
25356: LD_STRING Scholtze
25358: STR
25359: PPUSH
25360: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova , Scholtze , Popov ] , currentMissionPrefix & burlakTeam ) ;
25364: LD_INT 22
25366: PUSH
25367: LD_INT 3
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 23
25376: PUSH
25377: LD_INT 3
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 21
25386: PUSH
25387: LD_INT 1
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: LIST
25398: PPUSH
25399: CALL_OW 69
25403: PUSH
25404: LD_EXP 29
25408: PUSH
25409: LD_EXP 30
25413: PUSH
25414: LD_EXP 34
25418: PUSH
25419: LD_EXP 31
25423: PUSH
25424: LD_EXP 32
25428: PUSH
25429: LD_EXP 36
25433: PUSH
25434: LD_EXP 35
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: DIFF
25448: PPUSH
25449: LD_EXP 3
25453: PUSH
25454: LD_STRING burlakTeam
25456: STR
25457: PPUSH
25458: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) diff [ Gnyevko , Kovalyuk , Belkov , Kirilenkova , Popov , Kurin ] , currentMissionPrefix & popovTeam ) ;
25462: LD_INT 22
25464: PUSH
25465: LD_INT 6
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 23
25474: PUSH
25475: LD_INT 3
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 50
25484: PUSH
25485: EMPTY
25486: LIST
25487: PUSH
25488: LD_INT 21
25490: PUSH
25491: LD_INT 1
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: PPUSH
25504: CALL_OW 69
25508: PUSH
25509: LD_EXP 30
25513: PUSH
25514: LD_EXP 34
25518: PUSH
25519: LD_EXP 31
25523: PUSH
25524: LD_EXP 32
25528: PUSH
25529: LD_EXP 35
25533: PUSH
25534: LD_EXP 33
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: DIFF
25547: PPUSH
25548: LD_EXP 3
25552: PUSH
25553: LD_STRING popovTeam
25555: STR
25556: PPUSH
25557: CALL_OW 38
// SaveTech ( 3 , currentMissionPrefix & Techs ) ;
25561: LD_INT 3
25563: PPUSH
25564: LD_EXP 3
25568: PUSH
25569: LD_STRING Techs
25571: STR
25572: PPUSH
25573: CALL 11767 0 2
// saveVehicles := [ ] ;
25577: LD_ADDR_VAR 0 3
25581: PUSH
25582: EMPTY
25583: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) do
25584: LD_ADDR_VAR 0 2
25588: PUSH
25589: LD_INT 22
25591: PUSH
25592: LD_INT 3
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 21
25601: PUSH
25602: LD_INT 2
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 50
25611: PUSH
25612: EMPTY
25613: LIST
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: LIST
25619: PPUSH
25620: CALL_OW 69
25624: PUSH
25625: FOR_IN
25626: IFFALSE 25702
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) ] ) ;
25628: LD_ADDR_VAR 0 3
25632: PUSH
25633: LD_VAR 0 3
25637: PPUSH
25638: LD_VAR 0 2
25642: PPUSH
25643: CALL_OW 265
25647: PUSH
25648: LD_VAR 0 2
25652: PPUSH
25653: CALL_OW 262
25657: PUSH
25658: LD_VAR 0 2
25662: PPUSH
25663: CALL_OW 263
25667: PUSH
25668: LD_VAR 0 2
25672: PPUSH
25673: CALL_OW 264
25677: PUSH
25678: LD_VAR 0 2
25682: PPUSH
25683: CALL_OW 248
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: PPUSH
25695: CALL 64343 0 2
25699: ST_TO_ADDR
25700: GO 25625
25702: POP
25703: POP
// if saveVehicles then
25704: LD_VAR 0 3
25708: IFFALSE 25728
// SaveVariable ( saveVehicles , currentMissionPrefix & Vehicles ) ;
25710: LD_VAR 0 3
25714: PPUSH
25715: LD_EXP 3
25719: PUSH
25720: LD_STRING Vehicles
25722: STR
25723: PPUSH
25724: CALL_OW 39
// YouWin ;
25728: CALL_OW 103
// end ; end_of_file
25732: LD_VAR 0 1
25736: RET
// every 3 3$00 + 0 0$20 trigger not arabAttackActive do
25737: LD_EXP 8
25741: NOT
25742: IFFALSE 25769
25744: GO 25746
25746: DISABLE
// begin enable ;
25747: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , kirovCratesArea , true ) ;
25748: LD_INT 1
25750: PPUSH
25751: LD_INT 5
25753: PPUSH
25754: CALL_OW 12
25758: PPUSH
25759: LD_INT 13
25761: PPUSH
25762: LD_INT 1
25764: PPUSH
25765: CALL_OW 55
// end ;
25769: END
// every 2 2$30 trigger not allowedToAttackOmicron and GetResourceArea ( omicronBaseArea , mat_cans ) < 6 do
25770: LD_EXP 13
25774: NOT
25775: IFFALSE 25793
25777: PUSH
25778: LD_INT 18
25780: PPUSH
25781: LD_INT 1
25783: PPUSH
25784: CALL_OW 287
25788: PUSH
25789: LD_INT 6
25791: LESS
25792: AND
25793: IFFALSE 25820
25795: GO 25797
25797: DISABLE
// begin enable ;
25798: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , omicronBaseArea , true ) ;
25799: LD_INT 1
25801: PPUSH
25802: LD_INT 5
25804: PPUSH
25805: CALL_OW 12
25809: PPUSH
25810: LD_INT 18
25812: PPUSH
25813: LD_INT 1
25815: PPUSH
25816: CALL_OW 55
// end ;
25820: END
// every 0 0$20 do var i , time , area ;
25821: GO 25823
25823: DISABLE
25824: LD_INT 0
25826: PPUSH
25827: PPUSH
25828: PPUSH
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] + rand ( 0 , 1 ) do
25829: LD_ADDR_VAR 0 1
25833: PUSH
25834: DOUBLE
25835: LD_INT 1
25837: DEC
25838: ST_TO_ADDR
25839: LD_INT 3
25841: PUSH
25842: LD_INT 3
25844: PUSH
25845: LD_INT 2
25847: PUSH
25848: LD_INT 2
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: PUSH
25857: LD_OWVAR 67
25861: ARRAY
25862: PUSH
25863: LD_INT 0
25865: PPUSH
25866: LD_INT 1
25868: PPUSH
25869: CALL_OW 12
25873: PLUS
25874: PUSH
25875: FOR_TO
25876: IFFALSE 25914
// begin CreateCratesXYR ( rand ( 1 , 5 ) , 110 , 97 , 12 , true ) ;
25878: LD_INT 1
25880: PPUSH
25881: LD_INT 5
25883: PPUSH
25884: CALL_OW 12
25888: PPUSH
25889: LD_INT 110
25891: PPUSH
25892: LD_INT 97
25894: PPUSH
25895: LD_INT 12
25897: PPUSH
25898: LD_INT 1
25900: PPUSH
25901: CALL_OW 56
// wait ( 0 0$15 ) ;
25905: LD_INT 525
25907: PPUSH
25908: CALL_OW 67
// end ;
25912: GO 25875
25914: POP
25915: POP
// for i := 1 to 6 do
25916: LD_ADDR_VAR 0 1
25920: PUSH
25921: DOUBLE
25922: LD_INT 1
25924: DEC
25925: ST_TO_ADDR
25926: LD_INT 6
25928: PUSH
25929: FOR_TO
25930: IFFALSE 25962
// begin CreateCratesArea ( rand ( 3 , 5 ) , beriaCrates1Area , true ) ;
25932: LD_INT 3
25934: PPUSH
25935: LD_INT 5
25937: PPUSH
25938: CALL_OW 12
25942: PPUSH
25943: LD_INT 23
25945: PPUSH
25946: LD_INT 1
25948: PPUSH
25949: CALL_OW 55
// wait ( 0 0$25 ) ;
25953: LD_INT 875
25955: PPUSH
25956: CALL_OW 67
// end ;
25960: GO 25929
25962: POP
25963: POP
// CreateCratesXYR ( 5 , 76 , 117 , 5 , true ) ;
25964: LD_INT 5
25966: PPUSH
25967: LD_INT 76
25969: PPUSH
25970: LD_INT 117
25972: PPUSH
25973: LD_INT 5
25975: PPUSH
25976: LD_INT 1
25978: PPUSH
25979: CALL_OW 56
// repeat wait ( 0 0$45 ) ;
25983: LD_INT 1575
25985: PPUSH
25986: CALL_OW 67
// area := 0 ;
25990: LD_ADDR_VAR 0 3
25994: PUSH
25995: LD_INT 0
25997: ST_TO_ADDR
// case rand ( 0 , 10 ) of 1 .. 2 :
25998: LD_INT 0
26000: PPUSH
26001: LD_INT 10
26003: PPUSH
26004: CALL_OW 12
26008: PUSH
26009: LD_INT 1
26011: DOUBLE
26012: GREATEREQUAL
26013: IFFALSE 26021
26015: LD_INT 2
26017: DOUBLE
26018: LESSEQUAL
26019: IFTRUE 26023
26021: GO 26034
26023: POP
// area := beriaCrates1Area ; 3 .. 7 :
26024: LD_ADDR_VAR 0 3
26028: PUSH
26029: LD_INT 23
26031: ST_TO_ADDR
26032: GO 26085
26034: LD_INT 3
26036: DOUBLE
26037: GREATEREQUAL
26038: IFFALSE 26046
26040: LD_INT 7
26042: DOUBLE
26043: LESSEQUAL
26044: IFTRUE 26048
26046: GO 26059
26048: POP
// area := beriaCrates2Area ; 8 .. 10 :
26049: LD_ADDR_VAR 0 3
26053: PUSH
26054: LD_INT 24
26056: ST_TO_ADDR
26057: GO 26085
26059: LD_INT 8
26061: DOUBLE
26062: GREATEREQUAL
26063: IFFALSE 26071
26065: LD_INT 10
26067: DOUBLE
26068: LESSEQUAL
26069: IFTRUE 26073
26071: GO 26084
26073: POP
// area := beriaCrates3Area ; end ;
26074: LD_ADDR_VAR 0 3
26078: PUSH
26079: LD_INT 25
26081: ST_TO_ADDR
26082: GO 26085
26084: POP
// if area and GetResourceArea ( area , mat_cans ) < 6 then
26085: LD_VAR 0 3
26089: IFFALSE 26109
26091: PUSH
26092: LD_VAR 0 3
26096: PPUSH
26097: LD_INT 1
26099: PPUSH
26100: CALL_OW 287
26104: PUSH
26105: LD_INT 6
26107: LESS
26108: AND
26109: IFFALSE 26134
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
26111: LD_INT 1
26113: PPUSH
26114: LD_INT 5
26116: PPUSH
26117: CALL_OW 12
26121: PPUSH
26122: LD_VAR 0 3
26126: PPUSH
26127: LD_INT 1
26129: PPUSH
26130: CALL_OW 55
// until arabAttackActive ;
26134: LD_EXP 8
26138: IFFALSE 25983
// end ; end_of_file
26140: PPOPN 3
26142: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26143: LD_INT 0
26145: PPUSH
26146: PPUSH
// if exist_mode then
26147: LD_VAR 0 2
26151: IFFALSE 26197
// begin unit := CreateCharacter ( prefix & ident ) ;
26153: LD_ADDR_VAR 0 5
26157: PUSH
26158: LD_VAR 0 3
26162: PUSH
26163: LD_VAR 0 1
26167: STR
26168: PPUSH
26169: CALL_OW 34
26173: ST_TO_ADDR
// if unit then
26174: LD_VAR 0 5
26178: IFFALSE 26195
// DeleteCharacters ( prefix & ident ) ;
26180: LD_VAR 0 3
26184: PUSH
26185: LD_VAR 0 1
26189: STR
26190: PPUSH
26191: CALL_OW 40
// end else
26195: GO 26212
// unit := NewCharacter ( ident ) ;
26197: LD_ADDR_VAR 0 5
26201: PUSH
26202: LD_VAR 0 1
26206: PPUSH
26207: CALL_OW 25
26211: ST_TO_ADDR
// result := unit ;
26212: LD_ADDR_VAR 0 4
26216: PUSH
26217: LD_VAR 0 5
26221: ST_TO_ADDR
// end ;
26222: LD_VAR 0 4
26226: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
26227: LD_INT 0
26229: PPUSH
26230: PPUSH
// if exist_mode then
26231: LD_VAR 0 2
26235: IFFALSE 26260
// unit := CreateCharacter ( prefix & ident ) else
26237: LD_ADDR_VAR 0 5
26241: PUSH
26242: LD_VAR 0 3
26246: PUSH
26247: LD_VAR 0 1
26251: STR
26252: PPUSH
26253: CALL_OW 34
26257: ST_TO_ADDR
26258: GO 26275
// unit := NewCharacter ( ident ) ;
26260: LD_ADDR_VAR 0 5
26264: PUSH
26265: LD_VAR 0 1
26269: PPUSH
26270: CALL_OW 25
26274: ST_TO_ADDR
// result := unit ;
26275: LD_ADDR_VAR 0 4
26279: PUSH
26280: LD_VAR 0 5
26284: ST_TO_ADDR
// end ;
26285: LD_VAR 0 4
26289: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26290: LD_INT 0
26292: PPUSH
26293: PPUSH
// if not side or not nation then
26294: LD_VAR 0 1
26298: NOT
26299: IFTRUE 26308
26301: PUSH
26302: LD_VAR 0 2
26306: NOT
26307: OR
26308: IFFALSE 26312
// exit ;
26310: GO 27106
// case nation of nation_american :
26312: LD_VAR 0 2
26316: PUSH
26317: LD_INT 1
26319: DOUBLE
26320: EQUAL
26321: IFTRUE 26325
26323: GO 26547
26325: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
26326: LD_ADDR_VAR 0 4
26330: PUSH
26331: LD_INT 35
26333: PUSH
26334: LD_INT 45
26336: PUSH
26337: LD_INT 46
26339: PUSH
26340: LD_INT 47
26342: PUSH
26343: LD_INT 82
26345: PUSH
26346: LD_INT 83
26348: PUSH
26349: LD_INT 84
26351: PUSH
26352: LD_INT 85
26354: PUSH
26355: LD_INT 86
26357: PUSH
26358: LD_INT 1
26360: PUSH
26361: LD_INT 2
26363: PUSH
26364: LD_INT 6
26366: PUSH
26367: LD_INT 15
26369: PUSH
26370: LD_INT 16
26372: PUSH
26373: LD_INT 7
26375: PUSH
26376: LD_INT 12
26378: PUSH
26379: LD_INT 13
26381: PUSH
26382: LD_INT 10
26384: PUSH
26385: LD_INT 14
26387: PUSH
26388: LD_INT 20
26390: PUSH
26391: LD_INT 21
26393: PUSH
26394: LD_INT 22
26396: PUSH
26397: LD_INT 25
26399: PUSH
26400: LD_INT 32
26402: PUSH
26403: LD_INT 27
26405: PUSH
26406: LD_INT 36
26408: PUSH
26409: LD_INT 69
26411: PUSH
26412: LD_INT 39
26414: PUSH
26415: LD_INT 34
26417: PUSH
26418: LD_INT 40
26420: PUSH
26421: LD_INT 48
26423: PUSH
26424: LD_INT 49
26426: PUSH
26427: LD_INT 50
26429: PUSH
26430: LD_INT 51
26432: PUSH
26433: LD_INT 52
26435: PUSH
26436: LD_INT 53
26438: PUSH
26439: LD_INT 54
26441: PUSH
26442: LD_INT 55
26444: PUSH
26445: LD_INT 56
26447: PUSH
26448: LD_INT 57
26450: PUSH
26451: LD_INT 58
26453: PUSH
26454: LD_INT 59
26456: PUSH
26457: LD_INT 60
26459: PUSH
26460: LD_INT 61
26462: PUSH
26463: LD_INT 62
26465: PUSH
26466: LD_INT 80
26468: PUSH
26469: LD_INT 82
26471: PUSH
26472: LD_INT 83
26474: PUSH
26475: LD_INT 84
26477: PUSH
26478: LD_INT 85
26480: PUSH
26481: LD_INT 86
26483: PUSH
26484: LD_INT 90
26486: PUSH
26487: LD_INT 93
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: ST_TO_ADDR
26545: GO 27028
26547: LD_INT 2
26549: DOUBLE
26550: EQUAL
26551: IFTRUE 26555
26553: GO 26789
26555: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
26556: LD_ADDR_VAR 0 4
26560: PUSH
26561: LD_INT 35
26563: PUSH
26564: LD_INT 45
26566: PUSH
26567: LD_INT 46
26569: PUSH
26570: LD_INT 47
26572: PUSH
26573: LD_INT 82
26575: PUSH
26576: LD_INT 83
26578: PUSH
26579: LD_INT 84
26581: PUSH
26582: LD_INT 85
26584: PUSH
26585: LD_INT 87
26587: PUSH
26588: LD_INT 70
26590: PUSH
26591: LD_INT 1
26593: PUSH
26594: LD_INT 11
26596: PUSH
26597: LD_INT 3
26599: PUSH
26600: LD_INT 4
26602: PUSH
26603: LD_INT 5
26605: PUSH
26606: LD_INT 6
26608: PUSH
26609: LD_INT 15
26611: PUSH
26612: LD_INT 18
26614: PUSH
26615: LD_INT 7
26617: PUSH
26618: LD_INT 17
26620: PUSH
26621: LD_INT 8
26623: PUSH
26624: LD_INT 20
26626: PUSH
26627: LD_INT 21
26629: PUSH
26630: LD_INT 22
26632: PUSH
26633: LD_INT 72
26635: PUSH
26636: LD_INT 26
26638: PUSH
26639: LD_INT 69
26641: PUSH
26642: LD_INT 39
26644: PUSH
26645: LD_INT 40
26647: PUSH
26648: LD_INT 41
26650: PUSH
26651: LD_INT 42
26653: PUSH
26654: LD_INT 43
26656: PUSH
26657: LD_INT 48
26659: PUSH
26660: LD_INT 49
26662: PUSH
26663: LD_INT 50
26665: PUSH
26666: LD_INT 51
26668: PUSH
26669: LD_INT 52
26671: PUSH
26672: LD_INT 53
26674: PUSH
26675: LD_INT 54
26677: PUSH
26678: LD_INT 55
26680: PUSH
26681: LD_INT 56
26683: PUSH
26684: LD_INT 60
26686: PUSH
26687: LD_INT 61
26689: PUSH
26690: LD_INT 62
26692: PUSH
26693: LD_INT 66
26695: PUSH
26696: LD_INT 67
26698: PUSH
26699: LD_INT 68
26701: PUSH
26702: LD_INT 81
26704: PUSH
26705: LD_INT 82
26707: PUSH
26708: LD_INT 83
26710: PUSH
26711: LD_INT 84
26713: PUSH
26714: LD_INT 85
26716: PUSH
26717: LD_INT 87
26719: PUSH
26720: LD_INT 88
26722: PUSH
26723: LD_INT 92
26725: PUSH
26726: LD_INT 94
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: ST_TO_ADDR
26787: GO 27028
26789: LD_INT 3
26791: DOUBLE
26792: EQUAL
26793: IFTRUE 26797
26795: GO 27027
26797: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
26798: LD_ADDR_VAR 0 4
26802: PUSH
26803: LD_INT 46
26805: PUSH
26806: LD_INT 47
26808: PUSH
26809: LD_INT 1
26811: PUSH
26812: LD_INT 2
26814: PUSH
26815: LD_INT 82
26817: PUSH
26818: LD_INT 83
26820: PUSH
26821: LD_INT 84
26823: PUSH
26824: LD_INT 85
26826: PUSH
26827: LD_INT 86
26829: PUSH
26830: LD_INT 11
26832: PUSH
26833: LD_INT 9
26835: PUSH
26836: LD_INT 20
26838: PUSH
26839: LD_INT 19
26841: PUSH
26842: LD_INT 21
26844: PUSH
26845: LD_INT 24
26847: PUSH
26848: LD_INT 22
26850: PUSH
26851: LD_INT 25
26853: PUSH
26854: LD_INT 28
26856: PUSH
26857: LD_INT 29
26859: PUSH
26860: LD_INT 30
26862: PUSH
26863: LD_INT 31
26865: PUSH
26866: LD_INT 37
26868: PUSH
26869: LD_INT 38
26871: PUSH
26872: LD_INT 32
26874: PUSH
26875: LD_INT 27
26877: PUSH
26878: LD_INT 33
26880: PUSH
26881: LD_INT 69
26883: PUSH
26884: LD_INT 39
26886: PUSH
26887: LD_INT 34
26889: PUSH
26890: LD_INT 40
26892: PUSH
26893: LD_INT 71
26895: PUSH
26896: LD_INT 23
26898: PUSH
26899: LD_INT 44
26901: PUSH
26902: LD_INT 48
26904: PUSH
26905: LD_INT 49
26907: PUSH
26908: LD_INT 50
26910: PUSH
26911: LD_INT 51
26913: PUSH
26914: LD_INT 52
26916: PUSH
26917: LD_INT 53
26919: PUSH
26920: LD_INT 54
26922: PUSH
26923: LD_INT 55
26925: PUSH
26926: LD_INT 56
26928: PUSH
26929: LD_INT 57
26931: PUSH
26932: LD_INT 58
26934: PUSH
26935: LD_INT 59
26937: PUSH
26938: LD_INT 63
26940: PUSH
26941: LD_INT 64
26943: PUSH
26944: LD_INT 65
26946: PUSH
26947: LD_INT 82
26949: PUSH
26950: LD_INT 83
26952: PUSH
26953: LD_INT 84
26955: PUSH
26956: LD_INT 85
26958: PUSH
26959: LD_INT 86
26961: PUSH
26962: LD_INT 89
26964: PUSH
26965: LD_INT 91
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: ST_TO_ADDR
27025: GO 27028
27027: POP
// if state > - 1 and state < 3 then
27028: LD_VAR 0 3
27032: PUSH
27033: LD_INT 1
27035: NEG
27036: GREATER
27037: IFFALSE 27049
27039: PUSH
27040: LD_VAR 0 3
27044: PUSH
27045: LD_INT 3
27047: LESS
27048: AND
27049: IFFALSE 27106
// for i in result do
27051: LD_ADDR_VAR 0 5
27055: PUSH
27056: LD_VAR 0 4
27060: PUSH
27061: FOR_IN
27062: IFFALSE 27104
// if GetTech ( i , side ) <> state then
27064: LD_VAR 0 5
27068: PPUSH
27069: LD_VAR 0 1
27073: PPUSH
27074: CALL_OW 321
27078: PUSH
27079: LD_VAR 0 3
27083: NONEQUAL
27084: IFFALSE 27102
// result := result diff i ;
27086: LD_ADDR_VAR 0 4
27090: PUSH
27091: LD_VAR 0 4
27095: PUSH
27096: LD_VAR 0 5
27100: DIFF
27101: ST_TO_ADDR
27102: GO 27061
27104: POP
27105: POP
// end ;
27106: LD_VAR 0 4
27110: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27111: LD_INT 0
27113: PPUSH
27114: PPUSH
27115: PPUSH
// result := true ;
27116: LD_ADDR_VAR 0 3
27120: PUSH
27121: LD_INT 1
27123: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27124: LD_ADDR_VAR 0 5
27128: PUSH
27129: LD_VAR 0 2
27133: PPUSH
27134: CALL_OW 480
27138: ST_TO_ADDR
// if not tmp then
27139: LD_VAR 0 5
27143: NOT
27144: IFFALSE 27148
// exit ;
27146: GO 27197
// for i in tmp do
27148: LD_ADDR_VAR 0 4
27152: PUSH
27153: LD_VAR 0 5
27157: PUSH
27158: FOR_IN
27159: IFFALSE 27195
// if GetTech ( i , side ) <> state_researched then
27161: LD_VAR 0 4
27165: PPUSH
27166: LD_VAR 0 1
27170: PPUSH
27171: CALL_OW 321
27175: PUSH
27176: LD_INT 2
27178: NONEQUAL
27179: IFFALSE 27193
// begin result := false ;
27181: LD_ADDR_VAR 0 3
27185: PUSH
27186: LD_INT 0
27188: ST_TO_ADDR
// exit ;
27189: POP
27190: POP
27191: GO 27197
// end ;
27193: GO 27158
27195: POP
27196: POP
// end ;
27197: LD_VAR 0 3
27201: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27202: LD_INT 0
27204: PPUSH
27205: PPUSH
27206: PPUSH
27207: PPUSH
27208: PPUSH
27209: PPUSH
27210: PPUSH
27211: PPUSH
27212: PPUSH
27213: PPUSH
27214: PPUSH
27215: PPUSH
27216: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27217: LD_VAR 0 1
27221: NOT
27222: IFTRUE 27239
27224: PUSH
27225: LD_VAR 0 1
27229: PPUSH
27230: CALL_OW 257
27234: PUSH
27235: LD_INT 9
27237: NONEQUAL
27238: OR
27239: IFFALSE 27243
// exit ;
27241: GO 27822
// side := GetSide ( unit ) ;
27243: LD_ADDR_VAR 0 9
27247: PUSH
27248: LD_VAR 0 1
27252: PPUSH
27253: CALL_OW 255
27257: ST_TO_ADDR
// tech_space := tech_spacanom ;
27258: LD_ADDR_VAR 0 12
27262: PUSH
27263: LD_INT 29
27265: ST_TO_ADDR
// tech_time := tech_taurad ;
27266: LD_ADDR_VAR 0 13
27270: PUSH
27271: LD_INT 28
27273: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27274: LD_ADDR_VAR 0 11
27278: PUSH
27279: LD_VAR 0 1
27283: PPUSH
27284: CALL_OW 310
27288: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27289: LD_VAR 0 11
27293: PPUSH
27294: CALL_OW 247
27298: PUSH
27299: LD_INT 2
27301: EQUAL
27302: IFFALSE 27306
// exit ;
27304: GO 27822
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27306: LD_ADDR_VAR 0 8
27310: PUSH
27311: LD_INT 81
27313: PUSH
27314: LD_VAR 0 9
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 3
27325: PUSH
27326: LD_INT 21
27328: PUSH
27329: LD_INT 3
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PPUSH
27344: CALL_OW 69
27348: ST_TO_ADDR
// if not tmp then
27349: LD_VAR 0 8
27353: NOT
27354: IFFALSE 27358
// exit ;
27356: GO 27822
// if in_unit then
27358: LD_VAR 0 11
27362: IFFALSE 27386
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27364: LD_ADDR_VAR 0 10
27368: PUSH
27369: LD_VAR 0 8
27373: PPUSH
27374: LD_VAR 0 11
27378: PPUSH
27379: CALL_OW 74
27383: ST_TO_ADDR
27384: GO 27406
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27386: LD_ADDR_VAR 0 10
27390: PUSH
27391: LD_VAR 0 8
27395: PPUSH
27396: LD_VAR 0 1
27400: PPUSH
27401: CALL_OW 74
27405: ST_TO_ADDR
// if not enemy then
27406: LD_VAR 0 10
27410: NOT
27411: IFFALSE 27415
// exit ;
27413: GO 27822
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27415: LD_VAR 0 11
27419: IFFALSE 27441
27421: PUSH
27422: LD_VAR 0 11
27426: PPUSH
27427: LD_VAR 0 10
27431: PPUSH
27432: CALL_OW 296
27436: PUSH
27437: LD_INT 13
27439: GREATER
27440: AND
27441: IFTRUE 27463
27443: PUSH
27444: LD_VAR 0 1
27448: PPUSH
27449: LD_VAR 0 10
27453: PPUSH
27454: CALL_OW 296
27458: PUSH
27459: LD_INT 12
27461: GREATER
27462: OR
27463: IFFALSE 27467
// exit ;
27465: GO 27822
// missile := [ 1 ] ;
27467: LD_ADDR_VAR 0 14
27471: PUSH
27472: LD_INT 1
27474: PUSH
27475: EMPTY
27476: LIST
27477: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27478: LD_VAR 0 9
27482: PPUSH
27483: LD_VAR 0 12
27487: PPUSH
27488: CALL_OW 325
27492: IFFALSE 27521
// missile := Replace ( missile , missile + 1 , 2 ) ;
27494: LD_ADDR_VAR 0 14
27498: PUSH
27499: LD_VAR 0 14
27503: PPUSH
27504: LD_VAR 0 14
27508: PUSH
27509: LD_INT 1
27511: PLUS
27512: PPUSH
27513: LD_INT 2
27515: PPUSH
27516: CALL_OW 1
27520: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27521: LD_VAR 0 9
27525: PPUSH
27526: LD_VAR 0 13
27530: PPUSH
27531: CALL_OW 325
27535: IFFALSE 27559
27537: PUSH
27538: LD_VAR 0 10
27542: PPUSH
27543: CALL_OW 255
27547: PPUSH
27548: LD_VAR 0 13
27552: PPUSH
27553: CALL_OW 325
27557: NOT
27558: AND
27559: IFFALSE 27588
// missile := Replace ( missile , missile + 1 , 3 ) ;
27561: LD_ADDR_VAR 0 14
27565: PUSH
27566: LD_VAR 0 14
27570: PPUSH
27571: LD_VAR 0 14
27575: PUSH
27576: LD_INT 1
27578: PLUS
27579: PPUSH
27580: LD_INT 3
27582: PPUSH
27583: CALL_OW 1
27587: ST_TO_ADDR
// if missile < 2 then
27588: LD_VAR 0 14
27592: PUSH
27593: LD_INT 2
27595: LESS
27596: IFFALSE 27600
// exit ;
27598: GO 27822
// x := GetX ( enemy ) ;
27600: LD_ADDR_VAR 0 4
27604: PUSH
27605: LD_VAR 0 10
27609: PPUSH
27610: CALL_OW 250
27614: ST_TO_ADDR
// y := GetY ( enemy ) ;
27615: LD_ADDR_VAR 0 5
27619: PUSH
27620: LD_VAR 0 10
27624: PPUSH
27625: CALL_OW 251
27629: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27630: LD_ADDR_VAR 0 6
27634: PUSH
27635: LD_VAR 0 4
27639: PUSH
27640: LD_INT 1
27642: NEG
27643: PPUSH
27644: LD_INT 1
27646: PPUSH
27647: CALL_OW 12
27651: PLUS
27652: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27653: LD_ADDR_VAR 0 7
27657: PUSH
27658: LD_VAR 0 5
27662: PUSH
27663: LD_INT 1
27665: NEG
27666: PPUSH
27667: LD_INT 1
27669: PPUSH
27670: CALL_OW 12
27674: PLUS
27675: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27676: LD_VAR 0 6
27680: PPUSH
27681: LD_VAR 0 7
27685: PPUSH
27686: CALL_OW 488
27690: NOT
27691: IFFALSE 27713
// begin _x := x ;
27693: LD_ADDR_VAR 0 6
27697: PUSH
27698: LD_VAR 0 4
27702: ST_TO_ADDR
// _y := y ;
27703: LD_ADDR_VAR 0 7
27707: PUSH
27708: LD_VAR 0 5
27712: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27713: LD_ADDR_VAR 0 3
27717: PUSH
27718: LD_INT 1
27720: PPUSH
27721: LD_VAR 0 14
27725: PPUSH
27726: CALL_OW 12
27730: ST_TO_ADDR
// case i of 1 :
27731: LD_VAR 0 3
27735: PUSH
27736: LD_INT 1
27738: DOUBLE
27739: EQUAL
27740: IFTRUE 27744
27742: GO 27761
27744: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27745: LD_VAR 0 1
27749: PPUSH
27750: LD_VAR 0 10
27754: PPUSH
27755: CALL_OW 115
27759: GO 27822
27761: LD_INT 2
27763: DOUBLE
27764: EQUAL
27765: IFTRUE 27769
27767: GO 27791
27769: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27770: LD_VAR 0 1
27774: PPUSH
27775: LD_VAR 0 6
27779: PPUSH
27780: LD_VAR 0 7
27784: PPUSH
27785: CALL_OW 153
27789: GO 27822
27791: LD_INT 3
27793: DOUBLE
27794: EQUAL
27795: IFTRUE 27799
27797: GO 27821
27799: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27800: LD_VAR 0 1
27804: PPUSH
27805: LD_VAR 0 6
27809: PPUSH
27810: LD_VAR 0 7
27814: PPUSH
27815: CALL_OW 154
27819: GO 27822
27821: POP
// end ;
27822: LD_VAR 0 2
27826: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27827: LD_INT 0
27829: PPUSH
27830: PPUSH
27831: PPUSH
27832: PPUSH
27833: PPUSH
27834: PPUSH
// if not unit or not building then
27835: LD_VAR 0 1
27839: NOT
27840: IFTRUE 27849
27842: PUSH
27843: LD_VAR 0 2
27847: NOT
27848: OR
27849: IFFALSE 27853
// exit ;
27851: GO 28011
// x := GetX ( building ) ;
27853: LD_ADDR_VAR 0 5
27857: PUSH
27858: LD_VAR 0 2
27862: PPUSH
27863: CALL_OW 250
27867: ST_TO_ADDR
// y := GetY ( building ) ;
27868: LD_ADDR_VAR 0 6
27872: PUSH
27873: LD_VAR 0 2
27877: PPUSH
27878: CALL_OW 251
27882: ST_TO_ADDR
// for i := 0 to 5 do
27883: LD_ADDR_VAR 0 4
27887: PUSH
27888: DOUBLE
27889: LD_INT 0
27891: DEC
27892: ST_TO_ADDR
27893: LD_INT 5
27895: PUSH
27896: FOR_TO
27897: IFFALSE 28009
// begin _x := ShiftX ( x , i , 3 ) ;
27899: LD_ADDR_VAR 0 7
27903: PUSH
27904: LD_VAR 0 5
27908: PPUSH
27909: LD_VAR 0 4
27913: PPUSH
27914: LD_INT 3
27916: PPUSH
27917: CALL_OW 272
27921: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27922: LD_ADDR_VAR 0 8
27926: PUSH
27927: LD_VAR 0 6
27931: PPUSH
27932: LD_VAR 0 4
27936: PPUSH
27937: LD_INT 3
27939: PPUSH
27940: CALL_OW 273
27944: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27945: LD_VAR 0 7
27949: PPUSH
27950: LD_VAR 0 8
27954: PPUSH
27955: CALL_OW 488
27959: NOT
27960: IFFALSE 27964
// continue ;
27962: GO 27896
// if HexInfo ( _x , _y ) = 0 then
27964: LD_VAR 0 7
27968: PPUSH
27969: LD_VAR 0 8
27973: PPUSH
27974: CALL_OW 428
27978: PUSH
27979: LD_INT 0
27981: EQUAL
27982: IFFALSE 28007
// begin ComMoveXY ( unit , _x , _y ) ;
27984: LD_VAR 0 1
27988: PPUSH
27989: LD_VAR 0 7
27993: PPUSH
27994: LD_VAR 0 8
27998: PPUSH
27999: CALL_OW 111
// exit ;
28003: POP
28004: POP
28005: GO 28011
// end ; end ;
28007: GO 27896
28009: POP
28010: POP
// end ;
28011: LD_VAR 0 3
28015: RET
// export function ScanBase ( side , base_area ) ; begin
28016: LD_INT 0
28018: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28019: LD_ADDR_VAR 0 3
28023: PUSH
28024: LD_VAR 0 2
28028: PPUSH
28029: LD_INT 81
28031: PUSH
28032: LD_VAR 0 1
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PPUSH
28041: CALL_OW 70
28045: ST_TO_ADDR
// end ;
28046: LD_VAR 0 3
28050: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28051: LD_INT 0
28053: PPUSH
28054: PPUSH
28055: PPUSH
28056: PPUSH
// result := false ;
28057: LD_ADDR_VAR 0 2
28061: PUSH
28062: LD_INT 0
28064: ST_TO_ADDR
// side := GetSide ( unit ) ;
28065: LD_ADDR_VAR 0 3
28069: PUSH
28070: LD_VAR 0 1
28074: PPUSH
28075: CALL_OW 255
28079: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28080: LD_ADDR_VAR 0 4
28084: PUSH
28085: LD_VAR 0 1
28089: PPUSH
28090: CALL_OW 248
28094: ST_TO_ADDR
// case nat of 1 :
28095: LD_VAR 0 4
28099: PUSH
28100: LD_INT 1
28102: DOUBLE
28103: EQUAL
28104: IFTRUE 28108
28106: GO 28119
28108: POP
// tech := tech_lassight ; 2 :
28109: LD_ADDR_VAR 0 5
28113: PUSH
28114: LD_INT 12
28116: ST_TO_ADDR
28117: GO 28158
28119: LD_INT 2
28121: DOUBLE
28122: EQUAL
28123: IFTRUE 28127
28125: GO 28138
28127: POP
// tech := tech_mortar ; 3 :
28128: LD_ADDR_VAR 0 5
28132: PUSH
28133: LD_INT 41
28135: ST_TO_ADDR
28136: GO 28158
28138: LD_INT 3
28140: DOUBLE
28141: EQUAL
28142: IFTRUE 28146
28144: GO 28157
28146: POP
// tech := tech_bazooka ; end ;
28147: LD_ADDR_VAR 0 5
28151: PUSH
28152: LD_INT 44
28154: ST_TO_ADDR
28155: GO 28158
28157: POP
// if Researched ( side , tech ) then
28158: LD_VAR 0 3
28162: PPUSH
28163: LD_VAR 0 5
28167: PPUSH
28168: CALL_OW 325
28172: IFFALSE 28199
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28174: LD_ADDR_VAR 0 2
28178: PUSH
28179: LD_INT 5
28181: PUSH
28182: LD_INT 8
28184: PUSH
28185: LD_INT 9
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: LIST
28192: PUSH
28193: LD_VAR 0 4
28197: ARRAY
28198: ST_TO_ADDR
// end ;
28199: LD_VAR 0 2
28203: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28204: LD_INT 0
28206: PPUSH
28207: PPUSH
28208: PPUSH
// if not mines then
28209: LD_VAR 0 2
28213: NOT
28214: IFFALSE 28218
// exit ;
28216: GO 28362
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28218: LD_ADDR_VAR 0 5
28222: PUSH
28223: LD_INT 81
28225: PUSH
28226: LD_VAR 0 1
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 3
28237: PUSH
28238: LD_INT 21
28240: PUSH
28241: LD_INT 3
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PPUSH
28256: CALL_OW 69
28260: ST_TO_ADDR
// for i in mines do
28261: LD_ADDR_VAR 0 4
28265: PUSH
28266: LD_VAR 0 2
28270: PUSH
28271: FOR_IN
28272: IFFALSE 28360
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28274: LD_VAR 0 4
28278: PUSH
28279: LD_INT 1
28281: ARRAY
28282: PPUSH
28283: LD_VAR 0 4
28287: PUSH
28288: LD_INT 2
28290: ARRAY
28291: PPUSH
28292: CALL_OW 458
28296: NOT
28297: IFFALSE 28301
// continue ;
28299: GO 28271
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28301: LD_VAR 0 4
28305: PUSH
28306: LD_INT 1
28308: ARRAY
28309: PPUSH
28310: LD_VAR 0 4
28314: PUSH
28315: LD_INT 2
28317: ARRAY
28318: PPUSH
28319: CALL_OW 428
28323: PUSH
28324: LD_VAR 0 5
28328: IN
28329: IFFALSE 28358
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28331: LD_VAR 0 4
28335: PUSH
28336: LD_INT 1
28338: ARRAY
28339: PPUSH
28340: LD_VAR 0 4
28344: PUSH
28345: LD_INT 2
28347: ARRAY
28348: PPUSH
28349: LD_VAR 0 1
28353: PPUSH
28354: CALL_OW 456
// end ;
28358: GO 28271
28360: POP
28361: POP
// end ;
28362: LD_VAR 0 3
28366: RET
// export function Count ( array ) ; begin
28367: LD_INT 0
28369: PPUSH
// result := array + 0 ;
28370: LD_ADDR_VAR 0 2
28374: PUSH
28375: LD_VAR 0 1
28379: PUSH
28380: LD_INT 0
28382: PLUS
28383: ST_TO_ADDR
// end ;
28384: LD_VAR 0 2
28388: RET
// export function IsEmpty ( building ) ; begin
28389: LD_INT 0
28391: PPUSH
// if not building then
28392: LD_VAR 0 1
28396: NOT
28397: IFFALSE 28401
// exit ;
28399: GO 28444
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28401: LD_ADDR_VAR 0 2
28405: PUSH
28406: LD_VAR 0 1
28410: PUSH
28411: LD_INT 22
28413: PUSH
28414: LD_VAR 0 1
28418: PPUSH
28419: CALL_OW 255
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 58
28430: PUSH
28431: EMPTY
28432: LIST
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PPUSH
28438: CALL_OW 69
28442: IN
28443: ST_TO_ADDR
// end ;
28444: LD_VAR 0 2
28448: RET
// export function IsNotFull ( building ) ; var places ; begin
28449: LD_INT 0
28451: PPUSH
28452: PPUSH
// if not building then
28453: LD_VAR 0 1
28457: NOT
28458: IFFALSE 28462
// exit ;
28460: GO 28490
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
28462: LD_ADDR_VAR 0 2
28466: PUSH
28467: LD_VAR 0 1
28471: PPUSH
28472: LD_INT 3
28474: PUSH
28475: LD_INT 62
28477: PUSH
28478: EMPTY
28479: LIST
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PPUSH
28485: CALL_OW 72
28489: ST_TO_ADDR
// end ;
28490: LD_VAR 0 2
28494: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28495: LD_INT 0
28497: PPUSH
28498: PPUSH
28499: PPUSH
28500: PPUSH
// tmp := [ ] ;
28501: LD_ADDR_VAR 0 3
28505: PUSH
28506: EMPTY
28507: ST_TO_ADDR
// list := [ ] ;
28508: LD_ADDR_VAR 0 5
28512: PUSH
28513: EMPTY
28514: ST_TO_ADDR
// for i = 16 to 25 do
28515: LD_ADDR_VAR 0 4
28519: PUSH
28520: DOUBLE
28521: LD_INT 16
28523: DEC
28524: ST_TO_ADDR
28525: LD_INT 25
28527: PUSH
28528: FOR_TO
28529: IFFALSE 28602
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28531: LD_ADDR_VAR 0 3
28535: PUSH
28536: LD_VAR 0 3
28540: PUSH
28541: LD_INT 22
28543: PUSH
28544: LD_VAR 0 1
28548: PPUSH
28549: CALL_OW 255
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 91
28560: PUSH
28561: LD_VAR 0 1
28565: PUSH
28566: LD_INT 6
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 30
28576: PUSH
28577: LD_VAR 0 4
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: LIST
28590: PUSH
28591: EMPTY
28592: LIST
28593: PPUSH
28594: CALL_OW 69
28598: ADD
28599: ST_TO_ADDR
28600: GO 28528
28602: POP
28603: POP
// for i = 1 to tmp do
28604: LD_ADDR_VAR 0 4
28608: PUSH
28609: DOUBLE
28610: LD_INT 1
28612: DEC
28613: ST_TO_ADDR
28614: LD_VAR 0 3
28618: PUSH
28619: FOR_TO
28620: IFFALSE 28708
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28622: LD_ADDR_VAR 0 5
28626: PUSH
28627: LD_VAR 0 5
28631: PUSH
28632: LD_VAR 0 3
28636: PUSH
28637: LD_VAR 0 4
28641: ARRAY
28642: PPUSH
28643: CALL_OW 266
28647: PUSH
28648: LD_VAR 0 3
28652: PUSH
28653: LD_VAR 0 4
28657: ARRAY
28658: PPUSH
28659: CALL_OW 250
28663: PUSH
28664: LD_VAR 0 3
28668: PUSH
28669: LD_VAR 0 4
28673: ARRAY
28674: PPUSH
28675: CALL_OW 251
28679: PUSH
28680: LD_VAR 0 3
28684: PUSH
28685: LD_VAR 0 4
28689: ARRAY
28690: PPUSH
28691: CALL_OW 254
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: PUSH
28702: EMPTY
28703: LIST
28704: ADD
28705: ST_TO_ADDR
28706: GO 28619
28708: POP
28709: POP
// result := list ;
28710: LD_ADDR_VAR 0 2
28714: PUSH
28715: LD_VAR 0 5
28719: ST_TO_ADDR
// end ;
28720: LD_VAR 0 2
28724: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28725: LD_INT 0
28727: PPUSH
28728: PPUSH
28729: PPUSH
28730: PPUSH
28731: PPUSH
28732: PPUSH
28733: PPUSH
// if not factory then
28734: LD_VAR 0 1
28738: NOT
28739: IFFALSE 28743
// exit ;
28741: GO 29346
// if control = control_apeman then
28743: LD_VAR 0 4
28747: PUSH
28748: LD_INT 5
28750: EQUAL
28751: IFFALSE 28860
// begin tmp := UnitsInside ( factory ) ;
28753: LD_ADDR_VAR 0 8
28757: PUSH
28758: LD_VAR 0 1
28762: PPUSH
28763: CALL_OW 313
28767: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28768: LD_VAR 0 8
28772: PPUSH
28773: LD_INT 25
28775: PUSH
28776: LD_INT 12
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PPUSH
28783: CALL_OW 72
28787: NOT
28788: IFFALSE 28798
// control := control_manual ;
28790: LD_ADDR_VAR 0 4
28794: PUSH
28795: LD_INT 1
28797: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28798: LD_ADDR_VAR 0 8
28802: PUSH
28803: LD_VAR 0 1
28807: PPUSH
28808: CALL 28495 0 1
28812: ST_TO_ADDR
// if tmp then
28813: LD_VAR 0 8
28817: IFFALSE 28860
// begin for i in tmp do
28819: LD_ADDR_VAR 0 7
28823: PUSH
28824: LD_VAR 0 8
28828: PUSH
28829: FOR_IN
28830: IFFALSE 28858
// if i [ 1 ] = b_ext_radio then
28832: LD_VAR 0 7
28836: PUSH
28837: LD_INT 1
28839: ARRAY
28840: PUSH
28841: LD_INT 22
28843: EQUAL
28844: IFFALSE 28856
// begin control := control_remote ;
28846: LD_ADDR_VAR 0 4
28850: PUSH
28851: LD_INT 2
28853: ST_TO_ADDR
// break ;
28854: GO 28858
// end ;
28856: GO 28829
28858: POP
28859: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28860: LD_VAR 0 1
28864: PPUSH
28865: LD_VAR 0 2
28869: PPUSH
28870: LD_VAR 0 3
28874: PPUSH
28875: LD_VAR 0 4
28879: PPUSH
28880: LD_VAR 0 5
28884: PPUSH
28885: CALL_OW 448
28889: IFFALSE 28924
// begin result := [ chassis , engine , control , weapon ] ;
28891: LD_ADDR_VAR 0 6
28895: PUSH
28896: LD_VAR 0 2
28900: PUSH
28901: LD_VAR 0 3
28905: PUSH
28906: LD_VAR 0 4
28910: PUSH
28911: LD_VAR 0 5
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: ST_TO_ADDR
// exit ;
28922: GO 29346
// end ; _chassis := AvailableChassisList ( factory ) ;
28924: LD_ADDR_VAR 0 9
28928: PUSH
28929: LD_VAR 0 1
28933: PPUSH
28934: CALL_OW 475
28938: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28939: LD_ADDR_VAR 0 11
28943: PUSH
28944: LD_VAR 0 1
28948: PPUSH
28949: CALL_OW 476
28953: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28954: LD_ADDR_VAR 0 12
28958: PUSH
28959: LD_VAR 0 1
28963: PPUSH
28964: CALL_OW 477
28968: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28969: LD_ADDR_VAR 0 10
28973: PUSH
28974: LD_VAR 0 1
28978: PPUSH
28979: CALL_OW 478
28983: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28984: LD_VAR 0 9
28988: NOT
28989: IFTRUE 28998
28991: PUSH
28992: LD_VAR 0 11
28996: NOT
28997: OR
28998: IFTRUE 29007
29000: PUSH
29001: LD_VAR 0 12
29005: NOT
29006: OR
29007: IFTRUE 29016
29009: PUSH
29010: LD_VAR 0 10
29014: NOT
29015: OR
29016: IFFALSE 29051
// begin result := [ chassis , engine , control , weapon ] ;
29018: LD_ADDR_VAR 0 6
29022: PUSH
29023: LD_VAR 0 2
29027: PUSH
29028: LD_VAR 0 3
29032: PUSH
29033: LD_VAR 0 4
29037: PUSH
29038: LD_VAR 0 5
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: ST_TO_ADDR
// exit ;
29049: GO 29346
// end ; if not chassis in _chassis then
29051: LD_VAR 0 2
29055: PUSH
29056: LD_VAR 0 9
29060: IN
29061: NOT
29062: IFFALSE 29088
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29064: LD_ADDR_VAR 0 2
29068: PUSH
29069: LD_VAR 0 9
29073: PUSH
29074: LD_INT 1
29076: PPUSH
29077: LD_VAR 0 9
29081: PPUSH
29082: CALL_OW 12
29086: ARRAY
29087: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29088: LD_VAR 0 2
29092: PPUSH
29093: LD_VAR 0 3
29097: PPUSH
29098: CALL 29351 0 2
29102: NOT
29103: IFFALSE 29164
// repeat engine := _engine [ 1 ] ;
29105: LD_ADDR_VAR 0 3
29109: PUSH
29110: LD_VAR 0 11
29114: PUSH
29115: LD_INT 1
29117: ARRAY
29118: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29119: LD_ADDR_VAR 0 11
29123: PUSH
29124: LD_VAR 0 11
29128: PPUSH
29129: LD_INT 1
29131: PPUSH
29132: CALL_OW 3
29136: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29137: LD_VAR 0 2
29141: PPUSH
29142: LD_VAR 0 3
29146: PPUSH
29147: CALL 29351 0 2
29151: IFTRUE 29162
29153: PUSH
29154: LD_VAR 0 11
29158: PUSH
29159: EMPTY
29160: EQUAL
29161: OR
29162: IFFALSE 29105
// if not control in _control then
29164: LD_VAR 0 4
29168: PUSH
29169: LD_VAR 0 12
29173: IN
29174: NOT
29175: IFFALSE 29201
// control := _control [ rand ( 1 , _control ) ] ;
29177: LD_ADDR_VAR 0 4
29181: PUSH
29182: LD_VAR 0 12
29186: PUSH
29187: LD_INT 1
29189: PPUSH
29190: LD_VAR 0 12
29194: PPUSH
29195: CALL_OW 12
29199: ARRAY
29200: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29201: LD_VAR 0 2
29205: PPUSH
29206: LD_VAR 0 5
29210: PPUSH
29211: CALL 29573 0 2
29215: NOT
29216: IFFALSE 29277
// repeat weapon := _weapon [ 1 ] ;
29218: LD_ADDR_VAR 0 5
29222: PUSH
29223: LD_VAR 0 10
29227: PUSH
29228: LD_INT 1
29230: ARRAY
29231: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29232: LD_ADDR_VAR 0 10
29236: PUSH
29237: LD_VAR 0 10
29241: PPUSH
29242: LD_INT 1
29244: PPUSH
29245: CALL_OW 3
29249: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29250: LD_VAR 0 2
29254: PPUSH
29255: LD_VAR 0 5
29259: PPUSH
29260: CALL 29573 0 2
29264: IFTRUE 29275
29266: PUSH
29267: LD_VAR 0 10
29271: PUSH
29272: EMPTY
29273: EQUAL
29274: OR
29275: IFFALSE 29218
// result := [ ] ;
29277: LD_ADDR_VAR 0 6
29281: PUSH
29282: EMPTY
29283: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29284: LD_VAR 0 1
29288: PPUSH
29289: LD_VAR 0 2
29293: PPUSH
29294: LD_VAR 0 3
29298: PPUSH
29299: LD_VAR 0 4
29303: PPUSH
29304: LD_VAR 0 5
29308: PPUSH
29309: CALL_OW 448
29313: IFFALSE 29346
// result := [ chassis , engine , control , weapon ] ;
29315: LD_ADDR_VAR 0 6
29319: PUSH
29320: LD_VAR 0 2
29324: PUSH
29325: LD_VAR 0 3
29329: PUSH
29330: LD_VAR 0 4
29334: PUSH
29335: LD_VAR 0 5
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: ST_TO_ADDR
// end ;
29346: LD_VAR 0 6
29350: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29351: LD_INT 0
29353: PPUSH
// if not chassis or not engine then
29354: LD_VAR 0 1
29358: NOT
29359: IFTRUE 29368
29361: PUSH
29362: LD_VAR 0 2
29366: NOT
29367: OR
29368: IFFALSE 29372
// exit ;
29370: GO 29568
// case engine of engine_solar :
29372: LD_VAR 0 2
29376: PUSH
29377: LD_INT 2
29379: DOUBLE
29380: EQUAL
29381: IFTRUE 29385
29383: GO 29423
29385: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29386: LD_ADDR_VAR 0 3
29390: PUSH
29391: LD_INT 11
29393: PUSH
29394: LD_INT 12
29396: PUSH
29397: LD_INT 13
29399: PUSH
29400: LD_INT 14
29402: PUSH
29403: LD_INT 1
29405: PUSH
29406: LD_INT 2
29408: PUSH
29409: LD_INT 3
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: ST_TO_ADDR
29421: GO 29552
29423: LD_INT 1
29425: DOUBLE
29426: EQUAL
29427: IFTRUE 29431
29429: GO 29493
29431: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29432: LD_ADDR_VAR 0 3
29436: PUSH
29437: LD_INT 11
29439: PUSH
29440: LD_INT 12
29442: PUSH
29443: LD_INT 13
29445: PUSH
29446: LD_INT 14
29448: PUSH
29449: LD_INT 1
29451: PUSH
29452: LD_INT 2
29454: PUSH
29455: LD_INT 3
29457: PUSH
29458: LD_INT 4
29460: PUSH
29461: LD_INT 5
29463: PUSH
29464: LD_INT 21
29466: PUSH
29467: LD_INT 23
29469: PUSH
29470: LD_INT 22
29472: PUSH
29473: LD_INT 24
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: ST_TO_ADDR
29491: GO 29552
29493: LD_INT 3
29495: DOUBLE
29496: EQUAL
29497: IFTRUE 29501
29499: GO 29551
29501: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29502: LD_ADDR_VAR 0 3
29506: PUSH
29507: LD_INT 13
29509: PUSH
29510: LD_INT 14
29512: PUSH
29513: LD_INT 2
29515: PUSH
29516: LD_INT 3
29518: PUSH
29519: LD_INT 4
29521: PUSH
29522: LD_INT 5
29524: PUSH
29525: LD_INT 21
29527: PUSH
29528: LD_INT 22
29530: PUSH
29531: LD_INT 23
29533: PUSH
29534: LD_INT 24
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: ST_TO_ADDR
29549: GO 29552
29551: POP
// result := ( chassis in result ) ;
29552: LD_ADDR_VAR 0 3
29556: PUSH
29557: LD_VAR 0 1
29561: PUSH
29562: LD_VAR 0 3
29566: IN
29567: ST_TO_ADDR
// end ;
29568: LD_VAR 0 3
29572: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29573: LD_INT 0
29575: PPUSH
// if not chassis or not weapon then
29576: LD_VAR 0 1
29580: NOT
29581: IFTRUE 29590
29583: PUSH
29584: LD_VAR 0 2
29588: NOT
29589: OR
29590: IFFALSE 29594
// exit ;
29592: GO 30688
// case weapon of us_machine_gun :
29594: LD_VAR 0 2
29598: PUSH
29599: LD_INT 2
29601: DOUBLE
29602: EQUAL
29603: IFTRUE 29607
29605: GO 29637
29607: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29608: LD_ADDR_VAR 0 3
29612: PUSH
29613: LD_INT 1
29615: PUSH
29616: LD_INT 2
29618: PUSH
29619: LD_INT 3
29621: PUSH
29622: LD_INT 4
29624: PUSH
29625: LD_INT 5
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: ST_TO_ADDR
29635: GO 30672
29637: LD_INT 3
29639: DOUBLE
29640: EQUAL
29641: IFTRUE 29645
29643: GO 29675
29645: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29646: LD_ADDR_VAR 0 3
29650: PUSH
29651: LD_INT 1
29653: PUSH
29654: LD_INT 2
29656: PUSH
29657: LD_INT 3
29659: PUSH
29660: LD_INT 4
29662: PUSH
29663: LD_INT 5
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: ST_TO_ADDR
29673: GO 30672
29675: LD_INT 11
29677: DOUBLE
29678: EQUAL
29679: IFTRUE 29683
29681: GO 29713
29683: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29684: LD_ADDR_VAR 0 3
29688: PUSH
29689: LD_INT 1
29691: PUSH
29692: LD_INT 2
29694: PUSH
29695: LD_INT 3
29697: PUSH
29698: LD_INT 4
29700: PUSH
29701: LD_INT 5
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: ST_TO_ADDR
29711: GO 30672
29713: LD_INT 4
29715: DOUBLE
29716: EQUAL
29717: IFTRUE 29721
29719: GO 29747
29721: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29722: LD_ADDR_VAR 0 3
29726: PUSH
29727: LD_INT 2
29729: PUSH
29730: LD_INT 3
29732: PUSH
29733: LD_INT 4
29735: PUSH
29736: LD_INT 5
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: ST_TO_ADDR
29745: GO 30672
29747: LD_INT 5
29749: DOUBLE
29750: EQUAL
29751: IFTRUE 29755
29753: GO 29781
29755: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29756: LD_ADDR_VAR 0 3
29760: PUSH
29761: LD_INT 2
29763: PUSH
29764: LD_INT 3
29766: PUSH
29767: LD_INT 4
29769: PUSH
29770: LD_INT 5
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: ST_TO_ADDR
29779: GO 30672
29781: LD_INT 9
29783: DOUBLE
29784: EQUAL
29785: IFTRUE 29789
29787: GO 29815
29789: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29790: LD_ADDR_VAR 0 3
29794: PUSH
29795: LD_INT 2
29797: PUSH
29798: LD_INT 3
29800: PUSH
29801: LD_INT 4
29803: PUSH
29804: LD_INT 5
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: ST_TO_ADDR
29813: GO 30672
29815: LD_INT 7
29817: DOUBLE
29818: EQUAL
29819: IFTRUE 29823
29821: GO 29849
29823: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29824: LD_ADDR_VAR 0 3
29828: PUSH
29829: LD_INT 2
29831: PUSH
29832: LD_INT 3
29834: PUSH
29835: LD_INT 4
29837: PUSH
29838: LD_INT 5
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: ST_TO_ADDR
29847: GO 30672
29849: LD_INT 12
29851: DOUBLE
29852: EQUAL
29853: IFTRUE 29857
29855: GO 29883
29857: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29858: LD_ADDR_VAR 0 3
29862: PUSH
29863: LD_INT 2
29865: PUSH
29866: LD_INT 3
29868: PUSH
29869: LD_INT 4
29871: PUSH
29872: LD_INT 5
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: ST_TO_ADDR
29881: GO 30672
29883: LD_INT 13
29885: DOUBLE
29886: EQUAL
29887: IFTRUE 29891
29889: GO 29917
29891: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29892: LD_ADDR_VAR 0 3
29896: PUSH
29897: LD_INT 2
29899: PUSH
29900: LD_INT 3
29902: PUSH
29903: LD_INT 4
29905: PUSH
29906: LD_INT 5
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: ST_TO_ADDR
29915: GO 30672
29917: LD_INT 14
29919: DOUBLE
29920: EQUAL
29921: IFTRUE 29925
29923: GO 29943
29925: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29926: LD_ADDR_VAR 0 3
29930: PUSH
29931: LD_INT 4
29933: PUSH
29934: LD_INT 5
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: ST_TO_ADDR
29941: GO 30672
29943: LD_INT 6
29945: DOUBLE
29946: EQUAL
29947: IFTRUE 29951
29949: GO 29969
29951: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29952: LD_ADDR_VAR 0 3
29956: PUSH
29957: LD_INT 4
29959: PUSH
29960: LD_INT 5
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: ST_TO_ADDR
29967: GO 30672
29969: LD_INT 10
29971: DOUBLE
29972: EQUAL
29973: IFTRUE 29977
29975: GO 29995
29977: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29978: LD_ADDR_VAR 0 3
29982: PUSH
29983: LD_INT 4
29985: PUSH
29986: LD_INT 5
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: ST_TO_ADDR
29993: GO 30672
29995: LD_INT 22
29997: DOUBLE
29998: EQUAL
29999: IFTRUE 30003
30001: GO 30029
30003: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30004: LD_ADDR_VAR 0 3
30008: PUSH
30009: LD_INT 11
30011: PUSH
30012: LD_INT 12
30014: PUSH
30015: LD_INT 13
30017: PUSH
30018: LD_INT 14
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: ST_TO_ADDR
30027: GO 30672
30029: LD_INT 23
30031: DOUBLE
30032: EQUAL
30033: IFTRUE 30037
30035: GO 30063
30037: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30038: LD_ADDR_VAR 0 3
30042: PUSH
30043: LD_INT 11
30045: PUSH
30046: LD_INT 12
30048: PUSH
30049: LD_INT 13
30051: PUSH
30052: LD_INT 14
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: ST_TO_ADDR
30061: GO 30672
30063: LD_INT 24
30065: DOUBLE
30066: EQUAL
30067: IFTRUE 30071
30069: GO 30097
30071: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30072: LD_ADDR_VAR 0 3
30076: PUSH
30077: LD_INT 11
30079: PUSH
30080: LD_INT 12
30082: PUSH
30083: LD_INT 13
30085: PUSH
30086: LD_INT 14
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: ST_TO_ADDR
30095: GO 30672
30097: LD_INT 30
30099: DOUBLE
30100: EQUAL
30101: IFTRUE 30105
30103: GO 30131
30105: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30106: LD_ADDR_VAR 0 3
30110: PUSH
30111: LD_INT 11
30113: PUSH
30114: LD_INT 12
30116: PUSH
30117: LD_INT 13
30119: PUSH
30120: LD_INT 14
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: ST_TO_ADDR
30129: GO 30672
30131: LD_INT 25
30133: DOUBLE
30134: EQUAL
30135: IFTRUE 30139
30137: GO 30157
30139: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30140: LD_ADDR_VAR 0 3
30144: PUSH
30145: LD_INT 13
30147: PUSH
30148: LD_INT 14
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: ST_TO_ADDR
30155: GO 30672
30157: LD_INT 27
30159: DOUBLE
30160: EQUAL
30161: IFTRUE 30165
30163: GO 30183
30165: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30166: LD_ADDR_VAR 0 3
30170: PUSH
30171: LD_INT 13
30173: PUSH
30174: LD_INT 14
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: ST_TO_ADDR
30181: GO 30672
30183: LD_INT 92
30185: DOUBLE
30186: EQUAL
30187: IFTRUE 30191
30189: GO 30217
30191: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30192: LD_ADDR_VAR 0 3
30196: PUSH
30197: LD_INT 11
30199: PUSH
30200: LD_INT 12
30202: PUSH
30203: LD_INT 13
30205: PUSH
30206: LD_INT 14
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: ST_TO_ADDR
30215: GO 30672
30217: LD_INT 28
30219: DOUBLE
30220: EQUAL
30221: IFTRUE 30225
30223: GO 30243
30225: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30226: LD_ADDR_VAR 0 3
30230: PUSH
30231: LD_INT 13
30233: PUSH
30234: LD_INT 14
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: ST_TO_ADDR
30241: GO 30672
30243: LD_INT 29
30245: DOUBLE
30246: EQUAL
30247: IFTRUE 30251
30249: GO 30269
30251: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30252: LD_ADDR_VAR 0 3
30256: PUSH
30257: LD_INT 13
30259: PUSH
30260: LD_INT 14
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: ST_TO_ADDR
30267: GO 30672
30269: LD_INT 31
30271: DOUBLE
30272: EQUAL
30273: IFTRUE 30277
30275: GO 30295
30277: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30278: LD_ADDR_VAR 0 3
30282: PUSH
30283: LD_INT 13
30285: PUSH
30286: LD_INT 14
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: ST_TO_ADDR
30293: GO 30672
30295: LD_INT 26
30297: DOUBLE
30298: EQUAL
30299: IFTRUE 30303
30301: GO 30321
30303: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30304: LD_ADDR_VAR 0 3
30308: PUSH
30309: LD_INT 13
30311: PUSH
30312: LD_INT 14
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: ST_TO_ADDR
30319: GO 30672
30321: LD_INT 42
30323: DOUBLE
30324: EQUAL
30325: IFTRUE 30329
30327: GO 30355
30329: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30330: LD_ADDR_VAR 0 3
30334: PUSH
30335: LD_INT 21
30337: PUSH
30338: LD_INT 22
30340: PUSH
30341: LD_INT 23
30343: PUSH
30344: LD_INT 24
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: ST_TO_ADDR
30353: GO 30672
30355: LD_INT 43
30357: DOUBLE
30358: EQUAL
30359: IFTRUE 30363
30361: GO 30389
30363: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30364: LD_ADDR_VAR 0 3
30368: PUSH
30369: LD_INT 21
30371: PUSH
30372: LD_INT 22
30374: PUSH
30375: LD_INT 23
30377: PUSH
30378: LD_INT 24
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: ST_TO_ADDR
30387: GO 30672
30389: LD_INT 44
30391: DOUBLE
30392: EQUAL
30393: IFTRUE 30397
30395: GO 30423
30397: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30398: LD_ADDR_VAR 0 3
30402: PUSH
30403: LD_INT 21
30405: PUSH
30406: LD_INT 22
30408: PUSH
30409: LD_INT 23
30411: PUSH
30412: LD_INT 24
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: ST_TO_ADDR
30421: GO 30672
30423: LD_INT 45
30425: DOUBLE
30426: EQUAL
30427: IFTRUE 30431
30429: GO 30457
30431: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30432: LD_ADDR_VAR 0 3
30436: PUSH
30437: LD_INT 21
30439: PUSH
30440: LD_INT 22
30442: PUSH
30443: LD_INT 23
30445: PUSH
30446: LD_INT 24
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: ST_TO_ADDR
30455: GO 30672
30457: LD_INT 49
30459: DOUBLE
30460: EQUAL
30461: IFTRUE 30465
30463: GO 30491
30465: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30466: LD_ADDR_VAR 0 3
30470: PUSH
30471: LD_INT 21
30473: PUSH
30474: LD_INT 22
30476: PUSH
30477: LD_INT 23
30479: PUSH
30480: LD_INT 24
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: ST_TO_ADDR
30489: GO 30672
30491: LD_INT 51
30493: DOUBLE
30494: EQUAL
30495: IFTRUE 30499
30497: GO 30525
30499: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30500: LD_ADDR_VAR 0 3
30504: PUSH
30505: LD_INT 21
30507: PUSH
30508: LD_INT 22
30510: PUSH
30511: LD_INT 23
30513: PUSH
30514: LD_INT 24
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: ST_TO_ADDR
30523: GO 30672
30525: LD_INT 52
30527: DOUBLE
30528: EQUAL
30529: IFTRUE 30533
30531: GO 30559
30533: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30534: LD_ADDR_VAR 0 3
30538: PUSH
30539: LD_INT 21
30541: PUSH
30542: LD_INT 22
30544: PUSH
30545: LD_INT 23
30547: PUSH
30548: LD_INT 24
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: ST_TO_ADDR
30557: GO 30672
30559: LD_INT 53
30561: DOUBLE
30562: EQUAL
30563: IFTRUE 30567
30565: GO 30585
30567: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30568: LD_ADDR_VAR 0 3
30572: PUSH
30573: LD_INT 23
30575: PUSH
30576: LD_INT 24
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: ST_TO_ADDR
30583: GO 30672
30585: LD_INT 46
30587: DOUBLE
30588: EQUAL
30589: IFTRUE 30593
30591: GO 30611
30593: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30594: LD_ADDR_VAR 0 3
30598: PUSH
30599: LD_INT 23
30601: PUSH
30602: LD_INT 24
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: ST_TO_ADDR
30609: GO 30672
30611: LD_INT 47
30613: DOUBLE
30614: EQUAL
30615: IFTRUE 30619
30617: GO 30637
30619: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
30620: LD_ADDR_VAR 0 3
30624: PUSH
30625: LD_INT 23
30627: PUSH
30628: LD_INT 24
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: ST_TO_ADDR
30635: GO 30672
30637: LD_INT 98
30639: DOUBLE
30640: EQUAL
30641: IFTRUE 30645
30643: GO 30671
30645: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30646: LD_ADDR_VAR 0 3
30650: PUSH
30651: LD_INT 21
30653: PUSH
30654: LD_INT 22
30656: PUSH
30657: LD_INT 23
30659: PUSH
30660: LD_INT 24
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: ST_TO_ADDR
30669: GO 30672
30671: POP
// result := ( chassis in result ) ;
30672: LD_ADDR_VAR 0 3
30676: PUSH
30677: LD_VAR 0 1
30681: PUSH
30682: LD_VAR 0 3
30686: IN
30687: ST_TO_ADDR
// end ;
30688: LD_VAR 0 3
30692: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30693: LD_INT 0
30695: PPUSH
30696: PPUSH
30697: PPUSH
30698: PPUSH
30699: PPUSH
30700: PPUSH
30701: PPUSH
// result := array ;
30702: LD_ADDR_VAR 0 5
30706: PUSH
30707: LD_VAR 0 1
30711: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30712: LD_VAR 0 1
30716: NOT
30717: IFTRUE 30726
30719: PUSH
30720: LD_VAR 0 2
30724: NOT
30725: OR
30726: IFTRUE 30735
30728: PUSH
30729: LD_VAR 0 3
30733: NOT
30734: OR
30735: IFTRUE 30749
30737: PUSH
30738: LD_VAR 0 2
30742: PUSH
30743: LD_VAR 0 1
30747: GREATER
30748: OR
30749: IFTRUE 30763
30751: PUSH
30752: LD_VAR 0 3
30756: PUSH
30757: LD_VAR 0 1
30761: GREATER
30762: OR
30763: IFFALSE 30767
// exit ;
30765: GO 31063
// if direction then
30767: LD_VAR 0 4
30771: IFFALSE 30835
// begin d := 1 ;
30773: LD_ADDR_VAR 0 9
30777: PUSH
30778: LD_INT 1
30780: ST_TO_ADDR
// if i_from > i_to then
30781: LD_VAR 0 2
30785: PUSH
30786: LD_VAR 0 3
30790: GREATER
30791: IFFALSE 30817
// length := ( array - i_from ) + i_to else
30793: LD_ADDR_VAR 0 11
30797: PUSH
30798: LD_VAR 0 1
30802: PUSH
30803: LD_VAR 0 2
30807: MINUS
30808: PUSH
30809: LD_VAR 0 3
30813: PLUS
30814: ST_TO_ADDR
30815: GO 30833
// length := i_to - i_from ;
30817: LD_ADDR_VAR 0 11
30821: PUSH
30822: LD_VAR 0 3
30826: PUSH
30827: LD_VAR 0 2
30831: MINUS
30832: ST_TO_ADDR
// end else
30833: GO 30896
// begin d := - 1 ;
30835: LD_ADDR_VAR 0 9
30839: PUSH
30840: LD_INT 1
30842: NEG
30843: ST_TO_ADDR
// if i_from > i_to then
30844: LD_VAR 0 2
30848: PUSH
30849: LD_VAR 0 3
30853: GREATER
30854: IFFALSE 30874
// length := i_from - i_to else
30856: LD_ADDR_VAR 0 11
30860: PUSH
30861: LD_VAR 0 2
30865: PUSH
30866: LD_VAR 0 3
30870: MINUS
30871: ST_TO_ADDR
30872: GO 30896
// length := ( array - i_to ) + i_from ;
30874: LD_ADDR_VAR 0 11
30878: PUSH
30879: LD_VAR 0 1
30883: PUSH
30884: LD_VAR 0 3
30888: MINUS
30889: PUSH
30890: LD_VAR 0 2
30894: PLUS
30895: ST_TO_ADDR
// end ; if not length then
30896: LD_VAR 0 11
30900: NOT
30901: IFFALSE 30905
// exit ;
30903: GO 31063
// tmp := array ;
30905: LD_ADDR_VAR 0 10
30909: PUSH
30910: LD_VAR 0 1
30914: ST_TO_ADDR
// for i = 1 to length do
30915: LD_ADDR_VAR 0 6
30919: PUSH
30920: DOUBLE
30921: LD_INT 1
30923: DEC
30924: ST_TO_ADDR
30925: LD_VAR 0 11
30929: PUSH
30930: FOR_TO
30931: IFFALSE 31051
// begin for j = 1 to array do
30933: LD_ADDR_VAR 0 7
30937: PUSH
30938: DOUBLE
30939: LD_INT 1
30941: DEC
30942: ST_TO_ADDR
30943: LD_VAR 0 1
30947: PUSH
30948: FOR_TO
30949: IFFALSE 31037
// begin k := j + d ;
30951: LD_ADDR_VAR 0 8
30955: PUSH
30956: LD_VAR 0 7
30960: PUSH
30961: LD_VAR 0 9
30965: PLUS
30966: ST_TO_ADDR
// if k > array then
30967: LD_VAR 0 8
30971: PUSH
30972: LD_VAR 0 1
30976: GREATER
30977: IFFALSE 30987
// k := 1 ;
30979: LD_ADDR_VAR 0 8
30983: PUSH
30984: LD_INT 1
30986: ST_TO_ADDR
// if not k then
30987: LD_VAR 0 8
30991: NOT
30992: IFFALSE 31004
// k := array ;
30994: LD_ADDR_VAR 0 8
30998: PUSH
30999: LD_VAR 0 1
31003: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31004: LD_ADDR_VAR 0 10
31008: PUSH
31009: LD_VAR 0 10
31013: PPUSH
31014: LD_VAR 0 8
31018: PPUSH
31019: LD_VAR 0 1
31023: PUSH
31024: LD_VAR 0 7
31028: ARRAY
31029: PPUSH
31030: CALL_OW 1
31034: ST_TO_ADDR
// end ;
31035: GO 30948
31037: POP
31038: POP
// array := tmp ;
31039: LD_ADDR_VAR 0 1
31043: PUSH
31044: LD_VAR 0 10
31048: ST_TO_ADDR
// end ;
31049: GO 30930
31051: POP
31052: POP
// result := array ;
31053: LD_ADDR_VAR 0 5
31057: PUSH
31058: LD_VAR 0 1
31062: ST_TO_ADDR
// end ;
31063: LD_VAR 0 5
31067: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31068: LD_INT 0
31070: PPUSH
31071: PPUSH
// result := 0 ;
31072: LD_ADDR_VAR 0 3
31076: PUSH
31077: LD_INT 0
31079: ST_TO_ADDR
// if not array or not value in array then
31080: LD_VAR 0 1
31084: NOT
31085: IFTRUE 31100
31087: PUSH
31088: LD_VAR 0 2
31092: PUSH
31093: LD_VAR 0 1
31097: IN
31098: NOT
31099: OR
31100: IFFALSE 31104
// exit ;
31102: GO 31158
// for i = 1 to array do
31104: LD_ADDR_VAR 0 4
31108: PUSH
31109: DOUBLE
31110: LD_INT 1
31112: DEC
31113: ST_TO_ADDR
31114: LD_VAR 0 1
31118: PUSH
31119: FOR_TO
31120: IFFALSE 31156
// if value = array [ i ] then
31122: LD_VAR 0 2
31126: PUSH
31127: LD_VAR 0 1
31131: PUSH
31132: LD_VAR 0 4
31136: ARRAY
31137: EQUAL
31138: IFFALSE 31154
// begin result := i ;
31140: LD_ADDR_VAR 0 3
31144: PUSH
31145: LD_VAR 0 4
31149: ST_TO_ADDR
// exit ;
31150: POP
31151: POP
31152: GO 31158
// end ;
31154: GO 31119
31156: POP
31157: POP
// end ;
31158: LD_VAR 0 3
31162: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31163: LD_INT 0
31165: PPUSH
// vc_chassis := chassis ;
31166: LD_ADDR_OWVAR 37
31170: PUSH
31171: LD_VAR 0 1
31175: ST_TO_ADDR
// vc_engine := engine ;
31176: LD_ADDR_OWVAR 39
31180: PUSH
31181: LD_VAR 0 2
31185: ST_TO_ADDR
// vc_control := control ;
31186: LD_ADDR_OWVAR 38
31190: PUSH
31191: LD_VAR 0 3
31195: ST_TO_ADDR
// vc_weapon := weapon ;
31196: LD_ADDR_OWVAR 40
31200: PUSH
31201: LD_VAR 0 4
31205: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31206: LD_ADDR_OWVAR 41
31210: PUSH
31211: LD_VAR 0 5
31215: ST_TO_ADDR
// end ;
31216: LD_VAR 0 6
31220: RET
// export function WantPlant ( unit ) ; var task ; begin
31221: LD_INT 0
31223: PPUSH
31224: PPUSH
// result := false ;
31225: LD_ADDR_VAR 0 2
31229: PUSH
31230: LD_INT 0
31232: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31233: LD_ADDR_VAR 0 3
31237: PUSH
31238: LD_VAR 0 1
31242: PPUSH
31243: CALL_OW 437
31247: ST_TO_ADDR
// if task then
31248: LD_VAR 0 3
31252: IFFALSE 31280
// if task [ 1 ] [ 1 ] = p then
31254: LD_VAR 0 3
31258: PUSH
31259: LD_INT 1
31261: ARRAY
31262: PUSH
31263: LD_INT 1
31265: ARRAY
31266: PUSH
31267: LD_STRING p
31269: EQUAL
31270: IFFALSE 31280
// result := true ;
31272: LD_ADDR_VAR 0 2
31276: PUSH
31277: LD_INT 1
31279: ST_TO_ADDR
// end ;
31280: LD_VAR 0 2
31284: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31285: LD_INT 0
31287: PPUSH
31288: PPUSH
31289: PPUSH
31290: PPUSH
// if pos < 1 then
31291: LD_VAR 0 2
31295: PUSH
31296: LD_INT 1
31298: LESS
31299: IFFALSE 31303
// exit ;
31301: GO 31606
// if pos = 1 then
31303: LD_VAR 0 2
31307: PUSH
31308: LD_INT 1
31310: EQUAL
31311: IFFALSE 31344
// result := Replace ( arr , pos [ 1 ] , value ) else
31313: LD_ADDR_VAR 0 4
31317: PUSH
31318: LD_VAR 0 1
31322: PPUSH
31323: LD_VAR 0 2
31327: PUSH
31328: LD_INT 1
31330: ARRAY
31331: PPUSH
31332: LD_VAR 0 3
31336: PPUSH
31337: CALL_OW 1
31341: ST_TO_ADDR
31342: GO 31606
// begin tmp := arr ;
31344: LD_ADDR_VAR 0 6
31348: PUSH
31349: LD_VAR 0 1
31353: ST_TO_ADDR
// s_arr := [ tmp ] ;
31354: LD_ADDR_VAR 0 7
31358: PUSH
31359: LD_VAR 0 6
31363: PUSH
31364: EMPTY
31365: LIST
31366: ST_TO_ADDR
// for i = 1 to pos - 1 do
31367: LD_ADDR_VAR 0 5
31371: PUSH
31372: DOUBLE
31373: LD_INT 1
31375: DEC
31376: ST_TO_ADDR
31377: LD_VAR 0 2
31381: PUSH
31382: LD_INT 1
31384: MINUS
31385: PUSH
31386: FOR_TO
31387: IFFALSE 31432
// begin tmp := tmp [ pos [ i ] ] ;
31389: LD_ADDR_VAR 0 6
31393: PUSH
31394: LD_VAR 0 6
31398: PUSH
31399: LD_VAR 0 2
31403: PUSH
31404: LD_VAR 0 5
31408: ARRAY
31409: ARRAY
31410: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31411: LD_ADDR_VAR 0 7
31415: PUSH
31416: LD_VAR 0 7
31420: PUSH
31421: LD_VAR 0 6
31425: PUSH
31426: EMPTY
31427: LIST
31428: ADD
31429: ST_TO_ADDR
// end ;
31430: GO 31386
31432: POP
31433: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31434: LD_ADDR_VAR 0 6
31438: PUSH
31439: LD_VAR 0 6
31443: PPUSH
31444: LD_VAR 0 2
31448: PUSH
31449: LD_VAR 0 2
31453: ARRAY
31454: PPUSH
31455: LD_VAR 0 3
31459: PPUSH
31460: CALL_OW 1
31464: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31465: LD_ADDR_VAR 0 7
31469: PUSH
31470: LD_VAR 0 7
31474: PPUSH
31475: LD_VAR 0 7
31479: PPUSH
31480: LD_VAR 0 6
31484: PPUSH
31485: CALL_OW 1
31489: ST_TO_ADDR
// for i = s_arr downto 2 do
31490: LD_ADDR_VAR 0 5
31494: PUSH
31495: DOUBLE
31496: LD_VAR 0 7
31500: INC
31501: ST_TO_ADDR
31502: LD_INT 2
31504: PUSH
31505: FOR_DOWNTO
31506: IFFALSE 31590
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31508: LD_ADDR_VAR 0 6
31512: PUSH
31513: LD_VAR 0 7
31517: PUSH
31518: LD_VAR 0 5
31522: PUSH
31523: LD_INT 1
31525: MINUS
31526: ARRAY
31527: PPUSH
31528: LD_VAR 0 2
31532: PUSH
31533: LD_VAR 0 5
31537: PUSH
31538: LD_INT 1
31540: MINUS
31541: ARRAY
31542: PPUSH
31543: LD_VAR 0 7
31547: PUSH
31548: LD_VAR 0 5
31552: ARRAY
31553: PPUSH
31554: CALL_OW 1
31558: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31559: LD_ADDR_VAR 0 7
31563: PUSH
31564: LD_VAR 0 7
31568: PPUSH
31569: LD_VAR 0 5
31573: PUSH
31574: LD_INT 1
31576: MINUS
31577: PPUSH
31578: LD_VAR 0 6
31582: PPUSH
31583: CALL_OW 1
31587: ST_TO_ADDR
// end ;
31588: GO 31505
31590: POP
31591: POP
// result := s_arr [ 1 ] ;
31592: LD_ADDR_VAR 0 4
31596: PUSH
31597: LD_VAR 0 7
31601: PUSH
31602: LD_INT 1
31604: ARRAY
31605: ST_TO_ADDR
// end ; end ;
31606: LD_VAR 0 4
31610: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31611: LD_INT 0
31613: PPUSH
31614: PPUSH
// if not list then
31615: LD_VAR 0 1
31619: NOT
31620: IFFALSE 31624
// exit ;
31622: GO 31715
// i := list [ pos1 ] ;
31624: LD_ADDR_VAR 0 5
31628: PUSH
31629: LD_VAR 0 1
31633: PUSH
31634: LD_VAR 0 2
31638: ARRAY
31639: ST_TO_ADDR
// if not i then
31640: LD_VAR 0 5
31644: NOT
31645: IFFALSE 31649
// exit ;
31647: GO 31715
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31649: LD_ADDR_VAR 0 1
31653: PUSH
31654: LD_VAR 0 1
31658: PPUSH
31659: LD_VAR 0 2
31663: PPUSH
31664: LD_VAR 0 1
31668: PUSH
31669: LD_VAR 0 3
31673: ARRAY
31674: PPUSH
31675: CALL_OW 1
31679: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31680: LD_ADDR_VAR 0 1
31684: PUSH
31685: LD_VAR 0 1
31689: PPUSH
31690: LD_VAR 0 3
31694: PPUSH
31695: LD_VAR 0 5
31699: PPUSH
31700: CALL_OW 1
31704: ST_TO_ADDR
// result := list ;
31705: LD_ADDR_VAR 0 4
31709: PUSH
31710: LD_VAR 0 1
31714: ST_TO_ADDR
// end ;
31715: LD_VAR 0 4
31719: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31720: LD_INT 0
31722: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31723: LD_ADDR_VAR 0 5
31727: PUSH
31728: LD_VAR 0 1
31732: PPUSH
31733: CALL_OW 250
31737: PPUSH
31738: LD_VAR 0 1
31742: PPUSH
31743: CALL_OW 251
31747: PPUSH
31748: LD_VAR 0 2
31752: PPUSH
31753: LD_VAR 0 3
31757: PPUSH
31758: LD_VAR 0 4
31762: PPUSH
31763: CALL 32145 0 5
31767: ST_TO_ADDR
// end ;
31768: LD_VAR 0 5
31772: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
31773: LD_INT 0
31775: PPUSH
31776: PPUSH
31777: PPUSH
31778: PPUSH
// if not list or not unit then
31779: LD_VAR 0 2
31783: NOT
31784: IFTRUE 31793
31786: PUSH
31787: LD_VAR 0 1
31791: NOT
31792: OR
31793: IFFALSE 31797
// exit ;
31795: GO 32140
// result := [ ] ;
31797: LD_ADDR_VAR 0 5
31801: PUSH
31802: EMPTY
31803: ST_TO_ADDR
// for i in list do
31804: LD_ADDR_VAR 0 6
31808: PUSH
31809: LD_VAR 0 2
31813: PUSH
31814: FOR_IN
31815: IFFALSE 32033
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
31817: LD_ADDR_VAR 0 8
31821: PUSH
31822: LD_VAR 0 1
31826: PPUSH
31827: LD_VAR 0 6
31831: PUSH
31832: LD_INT 1
31834: ARRAY
31835: PPUSH
31836: LD_VAR 0 6
31840: PUSH
31841: LD_INT 2
31843: ARRAY
31844: PPUSH
31845: CALL_OW 297
31849: ST_TO_ADDR
// if not Count ( result ) then
31850: LD_VAR 0 5
31854: PPUSH
31855: CALL 28367 0 1
31859: NOT
31860: IFFALSE 31893
// begin result := Join ( result , [ i , tmp ] ) ;
31862: LD_ADDR_VAR 0 5
31866: PUSH
31867: LD_VAR 0 5
31871: PPUSH
31872: LD_VAR 0 6
31876: PUSH
31877: LD_VAR 0 8
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PPUSH
31886: CALL 64343 0 2
31890: ST_TO_ADDR
// continue ;
31891: GO 31814
// end ; if result [ result ] [ 2 ] <= tmp then
31893: LD_VAR 0 5
31897: PUSH
31898: LD_VAR 0 5
31902: ARRAY
31903: PUSH
31904: LD_INT 2
31906: ARRAY
31907: PUSH
31908: LD_VAR 0 8
31912: LESSEQUAL
31913: IFFALSE 31946
// result := Join ( result , [ i , tmp ] ) else
31915: LD_ADDR_VAR 0 5
31919: PUSH
31920: LD_VAR 0 5
31924: PPUSH
31925: LD_VAR 0 6
31929: PUSH
31930: LD_VAR 0 8
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PPUSH
31939: CALL 64343 0 2
31943: ST_TO_ADDR
31944: GO 32031
// begin for j := 1 to Count ( result ) do
31946: LD_ADDR_VAR 0 7
31950: PUSH
31951: DOUBLE
31952: LD_INT 1
31954: DEC
31955: ST_TO_ADDR
31956: LD_VAR 0 5
31960: PPUSH
31961: CALL 28367 0 1
31965: PUSH
31966: FOR_TO
31967: IFFALSE 32029
// begin if tmp < result [ j ] [ 2 ] then
31969: LD_VAR 0 8
31973: PUSH
31974: LD_VAR 0 5
31978: PUSH
31979: LD_VAR 0 7
31983: ARRAY
31984: PUSH
31985: LD_INT 2
31987: ARRAY
31988: LESS
31989: IFFALSE 32027
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31991: LD_ADDR_VAR 0 5
31995: PUSH
31996: LD_VAR 0 5
32000: PPUSH
32001: LD_VAR 0 7
32005: PPUSH
32006: LD_VAR 0 6
32010: PUSH
32011: LD_VAR 0 8
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PPUSH
32020: CALL_OW 2
32024: ST_TO_ADDR
// break ;
32025: GO 32029
// end ; end ;
32027: GO 31966
32029: POP
32030: POP
// end ; end ;
32031: GO 31814
32033: POP
32034: POP
// if result and not asc then
32035: LD_VAR 0 5
32039: IFFALSE 32048
32041: PUSH
32042: LD_VAR 0 3
32046: NOT
32047: AND
32048: IFFALSE 32065
// result := ReverseArray ( result ) ;
32050: LD_ADDR_VAR 0 5
32054: PUSH
32055: LD_VAR 0 5
32059: PPUSH
32060: CALL 59423 0 1
32064: ST_TO_ADDR
// tmp := [ ] ;
32065: LD_ADDR_VAR 0 8
32069: PUSH
32070: EMPTY
32071: ST_TO_ADDR
// if mode then
32072: LD_VAR 0 4
32076: IFFALSE 32140
// begin for i := 1 to result do
32078: LD_ADDR_VAR 0 6
32082: PUSH
32083: DOUBLE
32084: LD_INT 1
32086: DEC
32087: ST_TO_ADDR
32088: LD_VAR 0 5
32092: PUSH
32093: FOR_TO
32094: IFFALSE 32128
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
32096: LD_ADDR_VAR 0 8
32100: PUSH
32101: LD_VAR 0 8
32105: PPUSH
32106: LD_VAR 0 5
32110: PUSH
32111: LD_VAR 0 6
32115: ARRAY
32116: PUSH
32117: LD_INT 1
32119: ARRAY
32120: PPUSH
32121: CALL 64343 0 2
32125: ST_TO_ADDR
32126: GO 32093
32128: POP
32129: POP
// result := tmp ;
32130: LD_ADDR_VAR 0 5
32134: PUSH
32135: LD_VAR 0 8
32139: ST_TO_ADDR
// end ; end ;
32140: LD_VAR 0 5
32144: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32145: LD_INT 0
32147: PPUSH
32148: PPUSH
32149: PPUSH
32150: PPUSH
// if not list then
32151: LD_VAR 0 3
32155: NOT
32156: IFFALSE 32160
// exit ;
32158: GO 32550
// result := [ ] ;
32160: LD_ADDR_VAR 0 6
32164: PUSH
32165: EMPTY
32166: ST_TO_ADDR
// for i in list do
32167: LD_ADDR_VAR 0 7
32171: PUSH
32172: LD_VAR 0 3
32176: PUSH
32177: FOR_IN
32178: IFFALSE 32380
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32180: LD_ADDR_VAR 0 9
32184: PUSH
32185: LD_VAR 0 7
32189: PPUSH
32190: LD_VAR 0 1
32194: PPUSH
32195: LD_VAR 0 2
32199: PPUSH
32200: CALL_OW 297
32204: ST_TO_ADDR
// if not result then
32205: LD_VAR 0 6
32209: NOT
32210: IFFALSE 32236
// result := [ [ i , tmp ] ] else
32212: LD_ADDR_VAR 0 6
32216: PUSH
32217: LD_VAR 0 7
32221: PUSH
32222: LD_VAR 0 9
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: EMPTY
32232: LIST
32233: ST_TO_ADDR
32234: GO 32378
// begin if result [ result ] [ 2 ] <= tmp then
32236: LD_VAR 0 6
32240: PUSH
32241: LD_VAR 0 6
32245: ARRAY
32246: PUSH
32247: LD_INT 2
32249: ARRAY
32250: PUSH
32251: LD_VAR 0 9
32255: LESSEQUAL
32256: IFFALSE 32298
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32258: LD_ADDR_VAR 0 6
32262: PUSH
32263: LD_VAR 0 6
32267: PPUSH
32268: LD_VAR 0 6
32272: PUSH
32273: LD_INT 1
32275: PLUS
32276: PPUSH
32277: LD_VAR 0 7
32281: PUSH
32282: LD_VAR 0 9
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PPUSH
32291: CALL_OW 2
32295: ST_TO_ADDR
32296: GO 32378
// for j := 1 to result do
32298: LD_ADDR_VAR 0 8
32302: PUSH
32303: DOUBLE
32304: LD_INT 1
32306: DEC
32307: ST_TO_ADDR
32308: LD_VAR 0 6
32312: PUSH
32313: FOR_TO
32314: IFFALSE 32376
// begin if tmp < result [ j ] [ 2 ] then
32316: LD_VAR 0 9
32320: PUSH
32321: LD_VAR 0 6
32325: PUSH
32326: LD_VAR 0 8
32330: ARRAY
32331: PUSH
32332: LD_INT 2
32334: ARRAY
32335: LESS
32336: IFFALSE 32374
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32338: LD_ADDR_VAR 0 6
32342: PUSH
32343: LD_VAR 0 6
32347: PPUSH
32348: LD_VAR 0 8
32352: PPUSH
32353: LD_VAR 0 7
32357: PUSH
32358: LD_VAR 0 9
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PPUSH
32367: CALL_OW 2
32371: ST_TO_ADDR
// break ;
32372: GO 32376
// end ; end ;
32374: GO 32313
32376: POP
32377: POP
// end ; end ;
32378: GO 32177
32380: POP
32381: POP
// if result and not asc then
32382: LD_VAR 0 6
32386: IFFALSE 32395
32388: PUSH
32389: LD_VAR 0 4
32393: NOT
32394: AND
32395: IFFALSE 32470
// begin tmp := result ;
32397: LD_ADDR_VAR 0 9
32401: PUSH
32402: LD_VAR 0 6
32406: ST_TO_ADDR
// for i = tmp downto 1 do
32407: LD_ADDR_VAR 0 7
32411: PUSH
32412: DOUBLE
32413: LD_VAR 0 9
32417: INC
32418: ST_TO_ADDR
32419: LD_INT 1
32421: PUSH
32422: FOR_DOWNTO
32423: IFFALSE 32468
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32425: LD_ADDR_VAR 0 6
32429: PUSH
32430: LD_VAR 0 6
32434: PPUSH
32435: LD_VAR 0 9
32439: PUSH
32440: LD_VAR 0 7
32444: MINUS
32445: PUSH
32446: LD_INT 1
32448: PLUS
32449: PPUSH
32450: LD_VAR 0 9
32454: PUSH
32455: LD_VAR 0 7
32459: ARRAY
32460: PPUSH
32461: CALL_OW 1
32465: ST_TO_ADDR
32466: GO 32422
32468: POP
32469: POP
// end ; tmp := [ ] ;
32470: LD_ADDR_VAR 0 9
32474: PUSH
32475: EMPTY
32476: ST_TO_ADDR
// if mode then
32477: LD_VAR 0 5
32481: IFFALSE 32550
// begin for i = 1 to result do
32483: LD_ADDR_VAR 0 7
32487: PUSH
32488: DOUBLE
32489: LD_INT 1
32491: DEC
32492: ST_TO_ADDR
32493: LD_VAR 0 6
32497: PUSH
32498: FOR_TO
32499: IFFALSE 32538
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32501: LD_ADDR_VAR 0 9
32505: PUSH
32506: LD_VAR 0 9
32510: PPUSH
32511: LD_VAR 0 7
32515: PPUSH
32516: LD_VAR 0 6
32520: PUSH
32521: LD_VAR 0 7
32525: ARRAY
32526: PUSH
32527: LD_INT 1
32529: ARRAY
32530: PPUSH
32531: CALL_OW 1
32535: ST_TO_ADDR
32536: GO 32498
32538: POP
32539: POP
// result := tmp ;
32540: LD_ADDR_VAR 0 6
32544: PUSH
32545: LD_VAR 0 9
32549: ST_TO_ADDR
// end ; end ;
32550: LD_VAR 0 6
32554: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32555: LD_INT 0
32557: PPUSH
32558: PPUSH
32559: PPUSH
32560: PPUSH
32561: PPUSH
32562: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32563: LD_ADDR_VAR 0 5
32567: PUSH
32568: LD_INT 0
32570: PUSH
32571: LD_INT 0
32573: PUSH
32574: LD_INT 0
32576: PUSH
32577: EMPTY
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: ST_TO_ADDR
// if not x or not y then
32585: LD_VAR 0 2
32589: NOT
32590: IFTRUE 32599
32592: PUSH
32593: LD_VAR 0 3
32597: NOT
32598: OR
32599: IFFALSE 32603
// exit ;
32601: GO 34259
// if not range then
32603: LD_VAR 0 4
32607: NOT
32608: IFFALSE 32618
// range := 10 ;
32610: LD_ADDR_VAR 0 4
32614: PUSH
32615: LD_INT 10
32617: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32618: LD_ADDR_VAR 0 8
32622: PUSH
32623: LD_INT 81
32625: PUSH
32626: LD_VAR 0 1
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 92
32637: PUSH
32638: LD_VAR 0 2
32642: PUSH
32643: LD_VAR 0 3
32647: PUSH
32648: LD_VAR 0 4
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 3
32661: PUSH
32662: LD_INT 21
32664: PUSH
32665: LD_INT 3
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: LIST
32680: PPUSH
32681: CALL_OW 69
32685: ST_TO_ADDR
// if not tmp then
32686: LD_VAR 0 8
32690: NOT
32691: IFFALSE 32695
// exit ;
32693: GO 34259
// for i in tmp do
32695: LD_ADDR_VAR 0 6
32699: PUSH
32700: LD_VAR 0 8
32704: PUSH
32705: FOR_IN
32706: IFFALSE 34234
// begin points := [ 0 , 0 , 0 ] ;
32708: LD_ADDR_VAR 0 9
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: LD_INT 0
32718: PUSH
32719: LD_INT 0
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: LIST
32726: ST_TO_ADDR
// bpoints := 1 ;
32727: LD_ADDR_VAR 0 10
32731: PUSH
32732: LD_INT 1
32734: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32735: LD_VAR 0 6
32739: PPUSH
32740: CALL_OW 247
32744: PUSH
32745: LD_INT 1
32747: DOUBLE
32748: EQUAL
32749: IFTRUE 32753
32751: GO 33335
32753: POP
// begin if GetClass ( i ) = 1 then
32754: LD_VAR 0 6
32758: PPUSH
32759: CALL_OW 257
32763: PUSH
32764: LD_INT 1
32766: EQUAL
32767: IFFALSE 32788
// points := [ 10 , 5 , 3 ] ;
32769: LD_ADDR_VAR 0 9
32773: PUSH
32774: LD_INT 10
32776: PUSH
32777: LD_INT 5
32779: PUSH
32780: LD_INT 3
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: LIST
32787: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32788: LD_VAR 0 6
32792: PPUSH
32793: CALL_OW 257
32797: PUSH
32798: LD_INT 2
32800: PUSH
32801: LD_INT 3
32803: PUSH
32804: LD_INT 4
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: LIST
32811: IN
32812: IFFALSE 32833
// points := [ 3 , 2 , 1 ] ;
32814: LD_ADDR_VAR 0 9
32818: PUSH
32819: LD_INT 3
32821: PUSH
32822: LD_INT 2
32824: PUSH
32825: LD_INT 1
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: LIST
32832: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32833: LD_VAR 0 6
32837: PPUSH
32838: CALL_OW 257
32842: PUSH
32843: LD_INT 5
32845: EQUAL
32846: IFFALSE 32867
// points := [ 130 , 5 , 2 ] ;
32848: LD_ADDR_VAR 0 9
32852: PUSH
32853: LD_INT 130
32855: PUSH
32856: LD_INT 5
32858: PUSH
32859: LD_INT 2
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: LIST
32866: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32867: LD_VAR 0 6
32871: PPUSH
32872: CALL_OW 257
32876: PUSH
32877: LD_INT 8
32879: EQUAL
32880: IFFALSE 32901
// points := [ 35 , 35 , 30 ] ;
32882: LD_ADDR_VAR 0 9
32886: PUSH
32887: LD_INT 35
32889: PUSH
32890: LD_INT 35
32892: PUSH
32893: LD_INT 30
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: LIST
32900: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32901: LD_VAR 0 6
32905: PPUSH
32906: CALL_OW 257
32910: PUSH
32911: LD_INT 9
32913: EQUAL
32914: IFFALSE 32935
// points := [ 20 , 55 , 40 ] ;
32916: LD_ADDR_VAR 0 9
32920: PUSH
32921: LD_INT 20
32923: PUSH
32924: LD_INT 55
32926: PUSH
32927: LD_INT 40
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: LIST
32934: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32935: LD_VAR 0 6
32939: PPUSH
32940: CALL_OW 257
32944: PUSH
32945: LD_INT 12
32947: PUSH
32948: LD_INT 16
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: IN
32955: IFFALSE 32976
// points := [ 5 , 3 , 2 ] ;
32957: LD_ADDR_VAR 0 9
32961: PUSH
32962: LD_INT 5
32964: PUSH
32965: LD_INT 3
32967: PUSH
32968: LD_INT 2
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: LIST
32975: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32976: LD_VAR 0 6
32980: PPUSH
32981: CALL_OW 257
32985: PUSH
32986: LD_INT 17
32988: EQUAL
32989: IFFALSE 33010
// points := [ 100 , 50 , 75 ] ;
32991: LD_ADDR_VAR 0 9
32995: PUSH
32996: LD_INT 100
32998: PUSH
32999: LD_INT 50
33001: PUSH
33002: LD_INT 75
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: LIST
33009: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33010: LD_VAR 0 6
33014: PPUSH
33015: CALL_OW 257
33019: PUSH
33020: LD_INT 15
33022: EQUAL
33023: IFFALSE 33044
// points := [ 10 , 5 , 3 ] ;
33025: LD_ADDR_VAR 0 9
33029: PUSH
33030: LD_INT 10
33032: PUSH
33033: LD_INT 5
33035: PUSH
33036: LD_INT 3
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: LIST
33043: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33044: LD_VAR 0 6
33048: PPUSH
33049: CALL_OW 257
33053: PUSH
33054: LD_INT 14
33056: EQUAL
33057: IFFALSE 33078
// points := [ 10 , 0 , 0 ] ;
33059: LD_ADDR_VAR 0 9
33063: PUSH
33064: LD_INT 10
33066: PUSH
33067: LD_INT 0
33069: PUSH
33070: LD_INT 0
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: LIST
33077: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33078: LD_VAR 0 6
33082: PPUSH
33083: CALL_OW 257
33087: PUSH
33088: LD_INT 11
33090: EQUAL
33091: IFFALSE 33112
// points := [ 30 , 10 , 5 ] ;
33093: LD_ADDR_VAR 0 9
33097: PUSH
33098: LD_INT 30
33100: PUSH
33101: LD_INT 10
33103: PUSH
33104: LD_INT 5
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: LIST
33111: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33112: LD_VAR 0 1
33116: PPUSH
33117: LD_INT 5
33119: PPUSH
33120: CALL_OW 321
33124: PUSH
33125: LD_INT 2
33127: EQUAL
33128: IFFALSE 33145
// bpoints := bpoints * 1.8 ;
33130: LD_ADDR_VAR 0 10
33134: PUSH
33135: LD_VAR 0 10
33139: PUSH
33140: LD_REAL  1.80000000000000E+0000
33143: MUL
33144: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33145: LD_VAR 0 6
33149: PPUSH
33150: CALL_OW 257
33154: PUSH
33155: LD_INT 1
33157: PUSH
33158: LD_INT 2
33160: PUSH
33161: LD_INT 3
33163: PUSH
33164: LD_INT 4
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: IN
33173: IFFALSE 33193
33175: PUSH
33176: LD_VAR 0 1
33180: PPUSH
33181: LD_INT 51
33183: PPUSH
33184: CALL_OW 321
33188: PUSH
33189: LD_INT 2
33191: EQUAL
33192: AND
33193: IFFALSE 33210
// bpoints := bpoints * 1.2 ;
33195: LD_ADDR_VAR 0 10
33199: PUSH
33200: LD_VAR 0 10
33204: PUSH
33205: LD_REAL  1.20000000000000E+0000
33208: MUL
33209: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33210: LD_VAR 0 6
33214: PPUSH
33215: CALL_OW 257
33219: PUSH
33220: LD_INT 5
33222: PUSH
33223: LD_INT 7
33225: PUSH
33226: LD_INT 9
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: LIST
33233: IN
33234: IFFALSE 33254
33236: PUSH
33237: LD_VAR 0 1
33241: PPUSH
33242: LD_INT 52
33244: PPUSH
33245: CALL_OW 321
33249: PUSH
33250: LD_INT 2
33252: EQUAL
33253: AND
33254: IFFALSE 33271
// bpoints := bpoints * 1.5 ;
33256: LD_ADDR_VAR 0 10
33260: PUSH
33261: LD_VAR 0 10
33265: PUSH
33266: LD_REAL  1.50000000000000E+0000
33269: MUL
33270: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33271: LD_VAR 0 1
33275: PPUSH
33276: LD_INT 66
33278: PPUSH
33279: CALL_OW 321
33283: PUSH
33284: LD_INT 2
33286: EQUAL
33287: IFFALSE 33304
// bpoints := bpoints * 1.1 ;
33289: LD_ADDR_VAR 0 10
33293: PUSH
33294: LD_VAR 0 10
33298: PUSH
33299: LD_REAL  1.10000000000000E+0000
33302: MUL
33303: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33304: LD_ADDR_VAR 0 10
33308: PUSH
33309: LD_VAR 0 10
33313: PUSH
33314: LD_VAR 0 6
33318: PPUSH
33319: LD_INT 1
33321: PPUSH
33322: CALL_OW 259
33326: PUSH
33327: LD_REAL  1.15000000000000E+0000
33330: MUL
33331: MUL
33332: ST_TO_ADDR
// end ; unit_vehicle :
33333: GO 34163
33335: LD_INT 2
33337: DOUBLE
33338: EQUAL
33339: IFTRUE 33343
33341: GO 34151
33343: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33344: LD_VAR 0 6
33348: PPUSH
33349: CALL_OW 264
33353: PUSH
33354: LD_INT 2
33356: PUSH
33357: LD_INT 42
33359: PUSH
33360: LD_INT 24
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: LIST
33367: IN
33368: IFFALSE 33389
// points := [ 25 , 5 , 3 ] ;
33370: LD_ADDR_VAR 0 9
33374: PUSH
33375: LD_INT 25
33377: PUSH
33378: LD_INT 5
33380: PUSH
33381: LD_INT 3
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: LIST
33388: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33389: LD_VAR 0 6
33393: PPUSH
33394: CALL_OW 264
33398: PUSH
33399: LD_INT 4
33401: PUSH
33402: LD_INT 43
33404: PUSH
33405: LD_INT 25
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: LIST
33412: IN
33413: IFFALSE 33434
// points := [ 40 , 15 , 5 ] ;
33415: LD_ADDR_VAR 0 9
33419: PUSH
33420: LD_INT 40
33422: PUSH
33423: LD_INT 15
33425: PUSH
33426: LD_INT 5
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: LIST
33433: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33434: LD_VAR 0 6
33438: PPUSH
33439: CALL_OW 264
33443: PUSH
33444: LD_INT 3
33446: PUSH
33447: LD_INT 23
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: IN
33454: IFFALSE 33475
// points := [ 7 , 25 , 8 ] ;
33456: LD_ADDR_VAR 0 9
33460: PUSH
33461: LD_INT 7
33463: PUSH
33464: LD_INT 25
33466: PUSH
33467: LD_INT 8
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: LIST
33474: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33475: LD_VAR 0 6
33479: PPUSH
33480: CALL_OW 264
33484: PUSH
33485: LD_INT 5
33487: PUSH
33488: LD_INT 27
33490: PUSH
33491: LD_INT 44
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: LIST
33498: IN
33499: IFFALSE 33520
// points := [ 14 , 50 , 16 ] ;
33501: LD_ADDR_VAR 0 9
33505: PUSH
33506: LD_INT 14
33508: PUSH
33509: LD_INT 50
33511: PUSH
33512: LD_INT 16
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: LIST
33519: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33520: LD_VAR 0 6
33524: PPUSH
33525: CALL_OW 264
33529: PUSH
33530: LD_INT 6
33532: PUSH
33533: LD_INT 46
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: IN
33540: IFFALSE 33561
// points := [ 32 , 120 , 70 ] ;
33542: LD_ADDR_VAR 0 9
33546: PUSH
33547: LD_INT 32
33549: PUSH
33550: LD_INT 120
33552: PUSH
33553: LD_INT 70
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: LIST
33560: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33561: LD_VAR 0 6
33565: PPUSH
33566: CALL_OW 264
33570: PUSH
33571: LD_INT 7
33573: PUSH
33574: LD_INT 28
33576: PUSH
33577: LD_INT 45
33579: PUSH
33580: LD_INT 92
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: IN
33589: IFFALSE 33610
// points := [ 35 , 20 , 45 ] ;
33591: LD_ADDR_VAR 0 9
33595: PUSH
33596: LD_INT 35
33598: PUSH
33599: LD_INT 20
33601: PUSH
33602: LD_INT 45
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: LIST
33609: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33610: LD_VAR 0 6
33614: PPUSH
33615: CALL_OW 264
33619: PUSH
33620: LD_INT 47
33622: PUSH
33623: EMPTY
33624: LIST
33625: IN
33626: IFFALSE 33647
// points := [ 67 , 45 , 75 ] ;
33628: LD_ADDR_VAR 0 9
33632: PUSH
33633: LD_INT 67
33635: PUSH
33636: LD_INT 45
33638: PUSH
33639: LD_INT 75
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: LIST
33646: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33647: LD_VAR 0 6
33651: PPUSH
33652: CALL_OW 264
33656: PUSH
33657: LD_INT 26
33659: PUSH
33660: EMPTY
33661: LIST
33662: IN
33663: IFFALSE 33684
// points := [ 120 , 30 , 80 ] ;
33665: LD_ADDR_VAR 0 9
33669: PUSH
33670: LD_INT 120
33672: PUSH
33673: LD_INT 30
33675: PUSH
33676: LD_INT 80
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: LIST
33683: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33684: LD_VAR 0 6
33688: PPUSH
33689: CALL_OW 264
33693: PUSH
33694: LD_INT 22
33696: PUSH
33697: EMPTY
33698: LIST
33699: IN
33700: IFFALSE 33721
// points := [ 40 , 1 , 1 ] ;
33702: LD_ADDR_VAR 0 9
33706: PUSH
33707: LD_INT 40
33709: PUSH
33710: LD_INT 1
33712: PUSH
33713: LD_INT 1
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: LIST
33720: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33721: LD_VAR 0 6
33725: PPUSH
33726: CALL_OW 264
33730: PUSH
33731: LD_INT 29
33733: PUSH
33734: EMPTY
33735: LIST
33736: IN
33737: IFFALSE 33758
// points := [ 70 , 200 , 400 ] ;
33739: LD_ADDR_VAR 0 9
33743: PUSH
33744: LD_INT 70
33746: PUSH
33747: LD_INT 200
33749: PUSH
33750: LD_INT 400
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: LIST
33757: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33758: LD_VAR 0 6
33762: PPUSH
33763: CALL_OW 264
33767: PUSH
33768: LD_INT 14
33770: PUSH
33771: LD_INT 53
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: IN
33778: IFFALSE 33799
// points := [ 40 , 10 , 20 ] ;
33780: LD_ADDR_VAR 0 9
33784: PUSH
33785: LD_INT 40
33787: PUSH
33788: LD_INT 10
33790: PUSH
33791: LD_INT 20
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: LIST
33798: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33799: LD_VAR 0 6
33803: PPUSH
33804: CALL_OW 264
33808: PUSH
33809: LD_INT 9
33811: PUSH
33812: EMPTY
33813: LIST
33814: IN
33815: IFFALSE 33836
// points := [ 5 , 70 , 20 ] ;
33817: LD_ADDR_VAR 0 9
33821: PUSH
33822: LD_INT 5
33824: PUSH
33825: LD_INT 70
33827: PUSH
33828: LD_INT 20
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: LIST
33835: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33836: LD_VAR 0 6
33840: PPUSH
33841: CALL_OW 264
33845: PUSH
33846: LD_INT 10
33848: PUSH
33849: EMPTY
33850: LIST
33851: IN
33852: IFFALSE 33873
// points := [ 35 , 110 , 70 ] ;
33854: LD_ADDR_VAR 0 9
33858: PUSH
33859: LD_INT 35
33861: PUSH
33862: LD_INT 110
33864: PUSH
33865: LD_INT 70
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: LIST
33872: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33873: LD_VAR 0 6
33877: PPUSH
33878: CALL_OW 265
33882: PUSH
33883: LD_INT 25
33885: EQUAL
33886: IFFALSE 33907
// points := [ 80 , 65 , 100 ] ;
33888: LD_ADDR_VAR 0 9
33892: PUSH
33893: LD_INT 80
33895: PUSH
33896: LD_INT 65
33898: PUSH
33899: LD_INT 100
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: LIST
33906: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33907: LD_VAR 0 6
33911: PPUSH
33912: CALL_OW 263
33916: PUSH
33917: LD_INT 1
33919: EQUAL
33920: IFFALSE 33955
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33922: LD_ADDR_VAR 0 10
33926: PUSH
33927: LD_VAR 0 10
33931: PUSH
33932: LD_VAR 0 6
33936: PPUSH
33937: CALL_OW 311
33941: PPUSH
33942: LD_INT 3
33944: PPUSH
33945: CALL_OW 259
33949: PUSH
33950: LD_INT 4
33952: MUL
33953: MUL
33954: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33955: LD_VAR 0 6
33959: PPUSH
33960: CALL_OW 263
33964: PUSH
33965: LD_INT 2
33967: EQUAL
33968: IFFALSE 34019
// begin j := IsControledBy ( i ) ;
33970: LD_ADDR_VAR 0 7
33974: PUSH
33975: LD_VAR 0 6
33979: PPUSH
33980: CALL_OW 312
33984: ST_TO_ADDR
// if j then
33985: LD_VAR 0 7
33989: IFFALSE 34019
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33991: LD_ADDR_VAR 0 10
33995: PUSH
33996: LD_VAR 0 10
34000: PUSH
34001: LD_VAR 0 7
34005: PPUSH
34006: LD_INT 3
34008: PPUSH
34009: CALL_OW 259
34013: PUSH
34014: LD_INT 3
34016: MUL
34017: MUL
34018: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34019: LD_VAR 0 6
34023: PPUSH
34024: CALL_OW 264
34028: PUSH
34029: LD_INT 5
34031: PUSH
34032: LD_INT 6
34034: PUSH
34035: LD_INT 46
34037: PUSH
34038: LD_INT 44
34040: PUSH
34041: LD_INT 47
34043: PUSH
34044: LD_INT 45
34046: PUSH
34047: LD_INT 28
34049: PUSH
34050: LD_INT 7
34052: PUSH
34053: LD_INT 27
34055: PUSH
34056: LD_INT 29
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: IN
34071: IFFALSE 34091
34073: PUSH
34074: LD_VAR 0 1
34078: PPUSH
34079: LD_INT 52
34081: PPUSH
34082: CALL_OW 321
34086: PUSH
34087: LD_INT 2
34089: EQUAL
34090: AND
34091: IFFALSE 34108
// bpoints := bpoints * 1.2 ;
34093: LD_ADDR_VAR 0 10
34097: PUSH
34098: LD_VAR 0 10
34102: PUSH
34103: LD_REAL  1.20000000000000E+0000
34106: MUL
34107: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34108: LD_VAR 0 6
34112: PPUSH
34113: CALL_OW 264
34117: PUSH
34118: LD_INT 6
34120: PUSH
34121: LD_INT 46
34123: PUSH
34124: LD_INT 47
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: LIST
34131: IN
34132: IFFALSE 34149
// bpoints := bpoints * 1.2 ;
34134: LD_ADDR_VAR 0 10
34138: PUSH
34139: LD_VAR 0 10
34143: PUSH
34144: LD_REAL  1.20000000000000E+0000
34147: MUL
34148: ST_TO_ADDR
// end ; unit_building :
34149: GO 34163
34151: LD_INT 3
34153: DOUBLE
34154: EQUAL
34155: IFTRUE 34159
34157: GO 34162
34159: POP
// ; end ;
34160: GO 34163
34162: POP
// for j = 1 to 3 do
34163: LD_ADDR_VAR 0 7
34167: PUSH
34168: DOUBLE
34169: LD_INT 1
34171: DEC
34172: ST_TO_ADDR
34173: LD_INT 3
34175: PUSH
34176: FOR_TO
34177: IFFALSE 34230
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34179: LD_ADDR_VAR 0 5
34183: PUSH
34184: LD_VAR 0 5
34188: PPUSH
34189: LD_VAR 0 7
34193: PPUSH
34194: LD_VAR 0 5
34198: PUSH
34199: LD_VAR 0 7
34203: ARRAY
34204: PUSH
34205: LD_VAR 0 9
34209: PUSH
34210: LD_VAR 0 7
34214: ARRAY
34215: PUSH
34216: LD_VAR 0 10
34220: MUL
34221: PLUS
34222: PPUSH
34223: CALL_OW 1
34227: ST_TO_ADDR
34228: GO 34176
34230: POP
34231: POP
// end ;
34232: GO 32705
34234: POP
34235: POP
// result := Replace ( result , 4 , tmp ) ;
34236: LD_ADDR_VAR 0 5
34240: PUSH
34241: LD_VAR 0 5
34245: PPUSH
34246: LD_INT 4
34248: PPUSH
34249: LD_VAR 0 8
34253: PPUSH
34254: CALL_OW 1
34258: ST_TO_ADDR
// end ;
34259: LD_VAR 0 5
34263: RET
// export function DangerAtRange ( unit , range ) ; begin
34264: LD_INT 0
34266: PPUSH
// if not unit then
34267: LD_VAR 0 1
34271: NOT
34272: IFFALSE 34276
// exit ;
34274: GO 34321
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34276: LD_ADDR_VAR 0 3
34280: PUSH
34281: LD_VAR 0 1
34285: PPUSH
34286: CALL_OW 255
34290: PPUSH
34291: LD_VAR 0 1
34295: PPUSH
34296: CALL_OW 250
34300: PPUSH
34301: LD_VAR 0 1
34305: PPUSH
34306: CALL_OW 251
34310: PPUSH
34311: LD_VAR 0 2
34315: PPUSH
34316: CALL 32555 0 4
34320: ST_TO_ADDR
// end ;
34321: LD_VAR 0 3
34325: RET
// export function DangerInArea ( side , area ) ; begin
34326: LD_INT 0
34328: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34329: LD_ADDR_VAR 0 3
34333: PUSH
34334: LD_VAR 0 2
34338: PPUSH
34339: LD_INT 81
34341: PUSH
34342: LD_VAR 0 1
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PPUSH
34351: CALL_OW 70
34355: ST_TO_ADDR
// end ;
34356: LD_VAR 0 3
34360: RET
// export function IsExtension ( b ) ; begin
34361: LD_INT 0
34363: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34364: LD_ADDR_VAR 0 2
34368: PUSH
34369: LD_VAR 0 1
34373: PUSH
34374: LD_INT 23
34376: PUSH
34377: LD_INT 20
34379: PUSH
34380: LD_INT 22
34382: PUSH
34383: LD_INT 17
34385: PUSH
34386: LD_INT 24
34388: PUSH
34389: LD_INT 21
34391: PUSH
34392: LD_INT 19
34394: PUSH
34395: LD_INT 16
34397: PUSH
34398: LD_INT 25
34400: PUSH
34401: LD_INT 18
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: IN
34416: ST_TO_ADDR
// end ;
34417: LD_VAR 0 2
34421: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34422: LD_INT 0
34424: PPUSH
34425: PPUSH
34426: PPUSH
// result := [ ] ;
34427: LD_ADDR_VAR 0 4
34431: PUSH
34432: EMPTY
34433: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34434: LD_ADDR_VAR 0 5
34438: PUSH
34439: LD_VAR 0 2
34443: PPUSH
34444: LD_INT 21
34446: PUSH
34447: LD_INT 3
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PPUSH
34454: CALL_OW 70
34458: ST_TO_ADDR
// if not tmp then
34459: LD_VAR 0 5
34463: NOT
34464: IFFALSE 34468
// exit ;
34466: GO 34532
// if checkLink then
34468: LD_VAR 0 3
34472: IFFALSE 34522
// begin for i in tmp do
34474: LD_ADDR_VAR 0 6
34478: PUSH
34479: LD_VAR 0 5
34483: PUSH
34484: FOR_IN
34485: IFFALSE 34520
// if GetBase ( i ) <> base then
34487: LD_VAR 0 6
34491: PPUSH
34492: CALL_OW 274
34496: PUSH
34497: LD_VAR 0 1
34501: NONEQUAL
34502: IFFALSE 34518
// ComLinkToBase ( base , i ) ;
34504: LD_VAR 0 1
34508: PPUSH
34509: LD_VAR 0 6
34513: PPUSH
34514: CALL_OW 169
34518: GO 34484
34520: POP
34521: POP
// end ; result := tmp ;
34522: LD_ADDR_VAR 0 4
34526: PUSH
34527: LD_VAR 0 5
34531: ST_TO_ADDR
// end ;
34532: LD_VAR 0 4
34536: RET
// export function ComComplete ( units , b ) ; var i ; begin
34537: LD_INT 0
34539: PPUSH
34540: PPUSH
// if not units then
34541: LD_VAR 0 1
34545: NOT
34546: IFFALSE 34550
// exit ;
34548: GO 34640
// for i in units do
34550: LD_ADDR_VAR 0 4
34554: PUSH
34555: LD_VAR 0 1
34559: PUSH
34560: FOR_IN
34561: IFFALSE 34638
// if BuildingStatus ( b ) = bs_build then
34563: LD_VAR 0 2
34567: PPUSH
34568: CALL_OW 461
34572: PUSH
34573: LD_INT 1
34575: EQUAL
34576: IFFALSE 34636
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34578: LD_VAR 0 4
34582: PPUSH
34583: LD_STRING h
34585: PUSH
34586: LD_VAR 0 2
34590: PPUSH
34591: CALL_OW 250
34595: PUSH
34596: LD_VAR 0 2
34600: PPUSH
34601: CALL_OW 251
34605: PUSH
34606: LD_VAR 0 2
34610: PUSH
34611: LD_INT 0
34613: PUSH
34614: LD_INT 0
34616: PUSH
34617: LD_INT 0
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: PUSH
34629: EMPTY
34630: LIST
34631: PPUSH
34632: CALL_OW 446
34636: GO 34560
34638: POP
34639: POP
// end ;
34640: LD_VAR 0 3
34644: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34645: LD_INT 0
34647: PPUSH
34648: PPUSH
34649: PPUSH
34650: PPUSH
34651: PPUSH
34652: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34653: LD_VAR 0 1
34657: NOT
34658: IFTRUE 34675
34660: PUSH
34661: LD_VAR 0 1
34665: PPUSH
34666: CALL_OW 263
34670: PUSH
34671: LD_INT 2
34673: NONEQUAL
34674: OR
34675: IFFALSE 34679
// exit ;
34677: GO 34995
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34679: LD_ADDR_VAR 0 6
34683: PUSH
34684: LD_INT 22
34686: PUSH
34687: LD_VAR 0 1
34691: PPUSH
34692: CALL_OW 255
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 2
34703: PUSH
34704: LD_INT 30
34706: PUSH
34707: LD_INT 36
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 34
34716: PUSH
34717: LD_INT 31
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: LIST
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PPUSH
34733: CALL_OW 69
34737: ST_TO_ADDR
// if not tmp then
34738: LD_VAR 0 6
34742: NOT
34743: IFFALSE 34747
// exit ;
34745: GO 34995
// result := [ ] ;
34747: LD_ADDR_VAR 0 2
34751: PUSH
34752: EMPTY
34753: ST_TO_ADDR
// for i in tmp do
34754: LD_ADDR_VAR 0 3
34758: PUSH
34759: LD_VAR 0 6
34763: PUSH
34764: FOR_IN
34765: IFFALSE 34836
// begin t := UnitsInside ( i ) ;
34767: LD_ADDR_VAR 0 4
34771: PUSH
34772: LD_VAR 0 3
34776: PPUSH
34777: CALL_OW 313
34781: ST_TO_ADDR
// if t then
34782: LD_VAR 0 4
34786: IFFALSE 34834
// for j in t do
34788: LD_ADDR_VAR 0 7
34792: PUSH
34793: LD_VAR 0 4
34797: PUSH
34798: FOR_IN
34799: IFFALSE 34832
// result := Replace ( result , result + 1 , j ) ;
34801: LD_ADDR_VAR 0 2
34805: PUSH
34806: LD_VAR 0 2
34810: PPUSH
34811: LD_VAR 0 2
34815: PUSH
34816: LD_INT 1
34818: PLUS
34819: PPUSH
34820: LD_VAR 0 7
34824: PPUSH
34825: CALL_OW 1
34829: ST_TO_ADDR
34830: GO 34798
34832: POP
34833: POP
// end ;
34834: GO 34764
34836: POP
34837: POP
// if not result then
34838: LD_VAR 0 2
34842: NOT
34843: IFFALSE 34847
// exit ;
34845: GO 34995
// mech := result [ 1 ] ;
34847: LD_ADDR_VAR 0 5
34851: PUSH
34852: LD_VAR 0 2
34856: PUSH
34857: LD_INT 1
34859: ARRAY
34860: ST_TO_ADDR
// if result > 1 then
34861: LD_VAR 0 2
34865: PUSH
34866: LD_INT 1
34868: GREATER
34869: IFFALSE 34981
// begin for i = 2 to result do
34871: LD_ADDR_VAR 0 3
34875: PUSH
34876: DOUBLE
34877: LD_INT 2
34879: DEC
34880: ST_TO_ADDR
34881: LD_VAR 0 2
34885: PUSH
34886: FOR_TO
34887: IFFALSE 34979
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34889: LD_ADDR_VAR 0 4
34893: PUSH
34894: LD_VAR 0 2
34898: PUSH
34899: LD_VAR 0 3
34903: ARRAY
34904: PPUSH
34905: LD_INT 3
34907: PPUSH
34908: CALL_OW 259
34912: PUSH
34913: LD_VAR 0 2
34917: PUSH
34918: LD_VAR 0 3
34922: ARRAY
34923: PPUSH
34924: CALL_OW 432
34928: MINUS
34929: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34930: LD_VAR 0 4
34934: PUSH
34935: LD_VAR 0 5
34939: PPUSH
34940: LD_INT 3
34942: PPUSH
34943: CALL_OW 259
34947: PUSH
34948: LD_VAR 0 5
34952: PPUSH
34953: CALL_OW 432
34957: MINUS
34958: GREATEREQUAL
34959: IFFALSE 34977
// mech := result [ i ] ;
34961: LD_ADDR_VAR 0 5
34965: PUSH
34966: LD_VAR 0 2
34970: PUSH
34971: LD_VAR 0 3
34975: ARRAY
34976: ST_TO_ADDR
// end ;
34977: GO 34886
34979: POP
34980: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34981: LD_VAR 0 1
34985: PPUSH
34986: LD_VAR 0 5
34990: PPUSH
34991: CALL_OW 135
// end ;
34995: LD_VAR 0 2
34999: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35000: LD_INT 0
35002: PPUSH
35003: PPUSH
35004: PPUSH
35005: PPUSH
35006: PPUSH
35007: PPUSH
35008: PPUSH
35009: PPUSH
35010: PPUSH
35011: PPUSH
35012: PPUSH
35013: PPUSH
35014: PPUSH
// result := [ ] ;
35015: LD_ADDR_VAR 0 7
35019: PUSH
35020: EMPTY
35021: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35022: LD_VAR 0 1
35026: PPUSH
35027: CALL_OW 266
35031: PUSH
35032: LD_INT 0
35034: PUSH
35035: LD_INT 1
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: IN
35042: NOT
35043: IFFALSE 35047
// exit ;
35045: GO 36687
// if name then
35047: LD_VAR 0 3
35051: IFFALSE 35067
// SetBName ( base_dep , name ) ;
35053: LD_VAR 0 1
35057: PPUSH
35058: LD_VAR 0 3
35062: PPUSH
35063: CALL_OW 500
// base := GetBase ( base_dep ) ;
35067: LD_ADDR_VAR 0 15
35071: PUSH
35072: LD_VAR 0 1
35076: PPUSH
35077: CALL_OW 274
35081: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35082: LD_ADDR_VAR 0 16
35086: PUSH
35087: LD_VAR 0 1
35091: PPUSH
35092: CALL_OW 255
35096: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35097: LD_ADDR_VAR 0 17
35101: PUSH
35102: LD_VAR 0 1
35106: PPUSH
35107: CALL_OW 248
35111: ST_TO_ADDR
// if sources then
35112: LD_VAR 0 5
35116: IFFALSE 35163
// for i = 1 to 3 do
35118: LD_ADDR_VAR 0 8
35122: PUSH
35123: DOUBLE
35124: LD_INT 1
35126: DEC
35127: ST_TO_ADDR
35128: LD_INT 3
35130: PUSH
35131: FOR_TO
35132: IFFALSE 35161
// AddResourceType ( base , i , sources [ i ] ) ;
35134: LD_VAR 0 15
35138: PPUSH
35139: LD_VAR 0 8
35143: PPUSH
35144: LD_VAR 0 5
35148: PUSH
35149: LD_VAR 0 8
35153: ARRAY
35154: PPUSH
35155: CALL_OW 276
35159: GO 35131
35161: POP
35162: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35163: LD_ADDR_VAR 0 18
35167: PUSH
35168: LD_VAR 0 15
35172: PPUSH
35173: LD_VAR 0 2
35177: PPUSH
35178: LD_INT 1
35180: PPUSH
35181: CALL 34422 0 3
35185: ST_TO_ADDR
// InitHc ;
35186: CALL_OW 19
// InitUc ;
35190: CALL_OW 18
// uc_side := side ;
35194: LD_ADDR_OWVAR 20
35198: PUSH
35199: LD_VAR 0 16
35203: ST_TO_ADDR
// uc_nation := nation ;
35204: LD_ADDR_OWVAR 21
35208: PUSH
35209: LD_VAR 0 17
35213: ST_TO_ADDR
// if buildings then
35214: LD_VAR 0 18
35218: IFFALSE 36546
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35220: LD_ADDR_VAR 0 19
35224: PUSH
35225: LD_VAR 0 18
35229: PPUSH
35230: LD_INT 2
35232: PUSH
35233: LD_INT 30
35235: PUSH
35236: LD_INT 29
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 30
35245: PUSH
35246: LD_INT 30
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: LIST
35257: PPUSH
35258: CALL_OW 72
35262: ST_TO_ADDR
// if tmp then
35263: LD_VAR 0 19
35267: IFFALSE 35315
// for i in tmp do
35269: LD_ADDR_VAR 0 8
35273: PUSH
35274: LD_VAR 0 19
35278: PUSH
35279: FOR_IN
35280: IFFALSE 35313
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35282: LD_VAR 0 8
35286: PPUSH
35287: CALL_OW 250
35291: PPUSH
35292: LD_VAR 0 8
35296: PPUSH
35297: CALL_OW 251
35301: PPUSH
35302: LD_VAR 0 16
35306: PPUSH
35307: CALL_OW 441
35311: GO 35279
35313: POP
35314: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35315: LD_VAR 0 18
35319: PPUSH
35320: LD_INT 2
35322: PUSH
35323: LD_INT 30
35325: PUSH
35326: LD_INT 32
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 30
35335: PUSH
35336: LD_INT 33
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: LIST
35347: PPUSH
35348: CALL_OW 72
35352: IFFALSE 35440
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35354: LD_ADDR_VAR 0 8
35358: PUSH
35359: LD_VAR 0 18
35363: PPUSH
35364: LD_INT 2
35366: PUSH
35367: LD_INT 30
35369: PUSH
35370: LD_INT 32
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 30
35379: PUSH
35380: LD_INT 33
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: LIST
35391: PPUSH
35392: CALL_OW 72
35396: PUSH
35397: FOR_IN
35398: IFFALSE 35438
// begin if not GetBWeapon ( i ) then
35400: LD_VAR 0 8
35404: PPUSH
35405: CALL_OW 269
35409: NOT
35410: IFFALSE 35436
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35412: LD_VAR 0 8
35416: PPUSH
35417: LD_VAR 0 8
35421: PPUSH
35422: LD_VAR 0 2
35426: PPUSH
35427: CALL 36692 0 2
35431: PPUSH
35432: CALL_OW 431
// end ;
35436: GO 35397
35438: POP
35439: POP
// end ; for i = 1 to personel do
35440: LD_ADDR_VAR 0 8
35444: PUSH
35445: DOUBLE
35446: LD_INT 1
35448: DEC
35449: ST_TO_ADDR
35450: LD_VAR 0 6
35454: PUSH
35455: FOR_TO
35456: IFFALSE 36526
// begin if i > 4 then
35458: LD_VAR 0 8
35462: PUSH
35463: LD_INT 4
35465: GREATER
35466: IFFALSE 35470
// break ;
35468: GO 36526
// case i of 1 :
35470: LD_VAR 0 8
35474: PUSH
35475: LD_INT 1
35477: DOUBLE
35478: EQUAL
35479: IFTRUE 35483
35481: GO 35563
35483: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35484: LD_ADDR_VAR 0 12
35488: PUSH
35489: LD_VAR 0 18
35493: PPUSH
35494: LD_INT 22
35496: PUSH
35497: LD_VAR 0 16
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 58
35508: PUSH
35509: EMPTY
35510: LIST
35511: PUSH
35512: LD_INT 2
35514: PUSH
35515: LD_INT 30
35517: PUSH
35518: LD_INT 32
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 30
35527: PUSH
35528: LD_INT 4
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 30
35537: PUSH
35538: LD_INT 5
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: LIST
35555: PPUSH
35556: CALL_OW 72
35560: ST_TO_ADDR
35561: GO 35785
35563: LD_INT 2
35565: DOUBLE
35566: EQUAL
35567: IFTRUE 35571
35569: GO 35633
35571: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35572: LD_ADDR_VAR 0 12
35576: PUSH
35577: LD_VAR 0 18
35581: PPUSH
35582: LD_INT 22
35584: PUSH
35585: LD_VAR 0 16
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 2
35596: PUSH
35597: LD_INT 30
35599: PUSH
35600: LD_INT 0
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 30
35609: PUSH
35610: LD_INT 1
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: LIST
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PPUSH
35626: CALL_OW 72
35630: ST_TO_ADDR
35631: GO 35785
35633: LD_INT 3
35635: DOUBLE
35636: EQUAL
35637: IFTRUE 35641
35639: GO 35703
35641: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35642: LD_ADDR_VAR 0 12
35646: PUSH
35647: LD_VAR 0 18
35651: PPUSH
35652: LD_INT 22
35654: PUSH
35655: LD_VAR 0 16
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_INT 2
35666: PUSH
35667: LD_INT 30
35669: PUSH
35670: LD_INT 2
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 30
35679: PUSH
35680: LD_INT 3
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: LIST
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PPUSH
35696: CALL_OW 72
35700: ST_TO_ADDR
35701: GO 35785
35703: LD_INT 4
35705: DOUBLE
35706: EQUAL
35707: IFTRUE 35711
35709: GO 35784
35711: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35712: LD_ADDR_VAR 0 12
35716: PUSH
35717: LD_VAR 0 18
35721: PPUSH
35722: LD_INT 22
35724: PUSH
35725: LD_VAR 0 16
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 2
35736: PUSH
35737: LD_INT 30
35739: PUSH
35740: LD_INT 6
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 30
35749: PUSH
35750: LD_INT 7
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 30
35759: PUSH
35760: LD_INT 8
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PPUSH
35777: CALL_OW 72
35781: ST_TO_ADDR
35782: GO 35785
35784: POP
// if i = 1 then
35785: LD_VAR 0 8
35789: PUSH
35790: LD_INT 1
35792: EQUAL
35793: IFFALSE 35904
// begin tmp := [ ] ;
35795: LD_ADDR_VAR 0 19
35799: PUSH
35800: EMPTY
35801: ST_TO_ADDR
// for j in f do
35802: LD_ADDR_VAR 0 9
35806: PUSH
35807: LD_VAR 0 12
35811: PUSH
35812: FOR_IN
35813: IFFALSE 35886
// if GetBType ( j ) = b_bunker then
35815: LD_VAR 0 9
35819: PPUSH
35820: CALL_OW 266
35824: PUSH
35825: LD_INT 32
35827: EQUAL
35828: IFFALSE 35855
// tmp := Insert ( tmp , 1 , j ) else
35830: LD_ADDR_VAR 0 19
35834: PUSH
35835: LD_VAR 0 19
35839: PPUSH
35840: LD_INT 1
35842: PPUSH
35843: LD_VAR 0 9
35847: PPUSH
35848: CALL_OW 2
35852: ST_TO_ADDR
35853: GO 35884
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35855: LD_ADDR_VAR 0 19
35859: PUSH
35860: LD_VAR 0 19
35864: PPUSH
35865: LD_VAR 0 19
35869: PUSH
35870: LD_INT 1
35872: PLUS
35873: PPUSH
35874: LD_VAR 0 9
35878: PPUSH
35879: CALL_OW 2
35883: ST_TO_ADDR
35884: GO 35812
35886: POP
35887: POP
// if tmp then
35888: LD_VAR 0 19
35892: IFFALSE 35904
// f := tmp ;
35894: LD_ADDR_VAR 0 12
35898: PUSH
35899: LD_VAR 0 19
35903: ST_TO_ADDR
// end ; x := personel [ i ] ;
35904: LD_ADDR_VAR 0 13
35908: PUSH
35909: LD_VAR 0 6
35913: PUSH
35914: LD_VAR 0 8
35918: ARRAY
35919: ST_TO_ADDR
// if x = - 1 then
35920: LD_VAR 0 13
35924: PUSH
35925: LD_INT 1
35927: NEG
35928: EQUAL
35929: IFFALSE 36140
// begin for j in f do
35931: LD_ADDR_VAR 0 9
35935: PUSH
35936: LD_VAR 0 12
35940: PUSH
35941: FOR_IN
35942: IFFALSE 36136
// repeat InitHc ;
35944: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35948: LD_VAR 0 9
35952: PPUSH
35953: CALL_OW 266
35957: PUSH
35958: LD_INT 5
35960: EQUAL
35961: IFFALSE 36031
// begin if UnitsInside ( j ) < 3 then
35963: LD_VAR 0 9
35967: PPUSH
35968: CALL_OW 313
35972: PUSH
35973: LD_INT 3
35975: LESS
35976: IFFALSE 36012
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35978: LD_INT 0
35980: PPUSH
35981: LD_INT 5
35983: PUSH
35984: LD_INT 8
35986: PUSH
35987: LD_INT 9
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: LIST
35994: PUSH
35995: LD_VAR 0 17
35999: ARRAY
36000: PPUSH
36001: LD_VAR 0 4
36005: PPUSH
36006: CALL_OW 380
36010: GO 36029
// PrepareHuman ( false , i , skill ) ;
36012: LD_INT 0
36014: PPUSH
36015: LD_VAR 0 8
36019: PPUSH
36020: LD_VAR 0 4
36024: PPUSH
36025: CALL_OW 380
// end else
36029: GO 36048
// PrepareHuman ( false , i , skill ) ;
36031: LD_INT 0
36033: PPUSH
36034: LD_VAR 0 8
36038: PPUSH
36039: LD_VAR 0 4
36043: PPUSH
36044: CALL_OW 380
// un := CreateHuman ;
36048: LD_ADDR_VAR 0 14
36052: PUSH
36053: CALL_OW 44
36057: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36058: LD_ADDR_VAR 0 7
36062: PUSH
36063: LD_VAR 0 7
36067: PPUSH
36068: LD_INT 1
36070: PPUSH
36071: LD_VAR 0 14
36075: PPUSH
36076: CALL_OW 2
36080: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36081: LD_VAR 0 14
36085: PPUSH
36086: LD_VAR 0 9
36090: PPUSH
36091: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36095: LD_VAR 0 9
36099: PPUSH
36100: CALL_OW 313
36104: PUSH
36105: LD_INT 6
36107: EQUAL
36108: IFTRUE 36132
36110: PUSH
36111: LD_VAR 0 9
36115: PPUSH
36116: CALL_OW 266
36120: PUSH
36121: LD_INT 32
36123: PUSH
36124: LD_INT 31
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: IN
36131: OR
36132: IFFALSE 35944
36134: GO 35941
36136: POP
36137: POP
// end else
36138: GO 36524
// for j = 1 to x do
36140: LD_ADDR_VAR 0 9
36144: PUSH
36145: DOUBLE
36146: LD_INT 1
36148: DEC
36149: ST_TO_ADDR
36150: LD_VAR 0 13
36154: PUSH
36155: FOR_TO
36156: IFFALSE 36522
// begin InitHc ;
36158: CALL_OW 19
// if not f then
36162: LD_VAR 0 12
36166: NOT
36167: IFFALSE 36256
// begin PrepareHuman ( false , i , skill ) ;
36169: LD_INT 0
36171: PPUSH
36172: LD_VAR 0 8
36176: PPUSH
36177: LD_VAR 0 4
36181: PPUSH
36182: CALL_OW 380
// un := CreateHuman ;
36186: LD_ADDR_VAR 0 14
36190: PUSH
36191: CALL_OW 44
36195: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36196: LD_ADDR_VAR 0 7
36200: PUSH
36201: LD_VAR 0 7
36205: PPUSH
36206: LD_INT 1
36208: PPUSH
36209: LD_VAR 0 14
36213: PPUSH
36214: CALL_OW 2
36218: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36219: LD_VAR 0 14
36223: PPUSH
36224: LD_VAR 0 1
36228: PPUSH
36229: CALL_OW 250
36233: PPUSH
36234: LD_VAR 0 1
36238: PPUSH
36239: CALL_OW 251
36243: PPUSH
36244: LD_INT 10
36246: PPUSH
36247: LD_INT 0
36249: PPUSH
36250: CALL_OW 50
// continue ;
36254: GO 36155
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36256: LD_VAR 0 12
36260: PUSH
36261: LD_INT 1
36263: ARRAY
36264: PPUSH
36265: CALL_OW 313
36269: IFFALSE 36297
36271: PUSH
36272: LD_VAR 0 12
36276: PUSH
36277: LD_INT 1
36279: ARRAY
36280: PPUSH
36281: CALL_OW 266
36285: PUSH
36286: LD_INT 32
36288: PUSH
36289: LD_INT 31
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: IN
36296: AND
36297: IFTRUE 36318
36299: PUSH
36300: LD_VAR 0 12
36304: PUSH
36305: LD_INT 1
36307: ARRAY
36308: PPUSH
36309: CALL_OW 313
36313: PUSH
36314: LD_INT 6
36316: EQUAL
36317: OR
36318: IFFALSE 36338
// f := Delete ( f , 1 ) ;
36320: LD_ADDR_VAR 0 12
36324: PUSH
36325: LD_VAR 0 12
36329: PPUSH
36330: LD_INT 1
36332: PPUSH
36333: CALL_OW 3
36337: ST_TO_ADDR
// if not f then
36338: LD_VAR 0 12
36342: NOT
36343: IFFALSE 36361
// begin x := x + 2 ;
36345: LD_ADDR_VAR 0 13
36349: PUSH
36350: LD_VAR 0 13
36354: PUSH
36355: LD_INT 2
36357: PLUS
36358: ST_TO_ADDR
// continue ;
36359: GO 36155
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36361: LD_VAR 0 12
36365: PUSH
36366: LD_INT 1
36368: ARRAY
36369: PPUSH
36370: CALL_OW 266
36374: PUSH
36375: LD_INT 5
36377: EQUAL
36378: IFFALSE 36452
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36380: LD_VAR 0 12
36384: PUSH
36385: LD_INT 1
36387: ARRAY
36388: PPUSH
36389: CALL_OW 313
36393: PUSH
36394: LD_INT 3
36396: LESS
36397: IFFALSE 36433
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36399: LD_INT 0
36401: PPUSH
36402: LD_INT 5
36404: PUSH
36405: LD_INT 8
36407: PUSH
36408: LD_INT 9
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: LIST
36415: PUSH
36416: LD_VAR 0 17
36420: ARRAY
36421: PPUSH
36422: LD_VAR 0 4
36426: PPUSH
36427: CALL_OW 380
36431: GO 36450
// PrepareHuman ( false , i , skill ) ;
36433: LD_INT 0
36435: PPUSH
36436: LD_VAR 0 8
36440: PPUSH
36441: LD_VAR 0 4
36445: PPUSH
36446: CALL_OW 380
// end else
36450: GO 36469
// PrepareHuman ( false , i , skill ) ;
36452: LD_INT 0
36454: PPUSH
36455: LD_VAR 0 8
36459: PPUSH
36460: LD_VAR 0 4
36464: PPUSH
36465: CALL_OW 380
// un := CreateHuman ;
36469: LD_ADDR_VAR 0 14
36473: PUSH
36474: CALL_OW 44
36478: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36479: LD_ADDR_VAR 0 7
36483: PUSH
36484: LD_VAR 0 7
36488: PPUSH
36489: LD_INT 1
36491: PPUSH
36492: LD_VAR 0 14
36496: PPUSH
36497: CALL_OW 2
36501: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36502: LD_VAR 0 14
36506: PPUSH
36507: LD_VAR 0 12
36511: PUSH
36512: LD_INT 1
36514: ARRAY
36515: PPUSH
36516: CALL_OW 52
// end ;
36520: GO 36155
36522: POP
36523: POP
// end ;
36524: GO 35455
36526: POP
36527: POP
// result := result ^ buildings ;
36528: LD_ADDR_VAR 0 7
36532: PUSH
36533: LD_VAR 0 7
36537: PUSH
36538: LD_VAR 0 18
36542: ADD
36543: ST_TO_ADDR
// end else
36544: GO 36687
// begin for i = 1 to personel do
36546: LD_ADDR_VAR 0 8
36550: PUSH
36551: DOUBLE
36552: LD_INT 1
36554: DEC
36555: ST_TO_ADDR
36556: LD_VAR 0 6
36560: PUSH
36561: FOR_TO
36562: IFFALSE 36685
// begin if i > 4 then
36564: LD_VAR 0 8
36568: PUSH
36569: LD_INT 4
36571: GREATER
36572: IFFALSE 36576
// break ;
36574: GO 36685
// x := personel [ i ] ;
36576: LD_ADDR_VAR 0 13
36580: PUSH
36581: LD_VAR 0 6
36585: PUSH
36586: LD_VAR 0 8
36590: ARRAY
36591: ST_TO_ADDR
// if x = - 1 then
36592: LD_VAR 0 13
36596: PUSH
36597: LD_INT 1
36599: NEG
36600: EQUAL
36601: IFFALSE 36605
// continue ;
36603: GO 36561
// PrepareHuman ( false , i , skill ) ;
36605: LD_INT 0
36607: PPUSH
36608: LD_VAR 0 8
36612: PPUSH
36613: LD_VAR 0 4
36617: PPUSH
36618: CALL_OW 380
// un := CreateHuman ;
36622: LD_ADDR_VAR 0 14
36626: PUSH
36627: CALL_OW 44
36631: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36632: LD_VAR 0 14
36636: PPUSH
36637: LD_VAR 0 1
36641: PPUSH
36642: CALL_OW 250
36646: PPUSH
36647: LD_VAR 0 1
36651: PPUSH
36652: CALL_OW 251
36656: PPUSH
36657: LD_INT 10
36659: PPUSH
36660: LD_INT 0
36662: PPUSH
36663: CALL_OW 50
// result := result ^ un ;
36667: LD_ADDR_VAR 0 7
36671: PUSH
36672: LD_VAR 0 7
36676: PUSH
36677: LD_VAR 0 14
36681: ADD
36682: ST_TO_ADDR
// end ;
36683: GO 36561
36685: POP
36686: POP
// end ; end ;
36687: LD_VAR 0 7
36691: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36692: LD_INT 0
36694: PPUSH
36695: PPUSH
36696: PPUSH
36697: PPUSH
36698: PPUSH
36699: PPUSH
36700: PPUSH
36701: PPUSH
36702: PPUSH
36703: PPUSH
36704: PPUSH
36705: PPUSH
36706: PPUSH
36707: PPUSH
36708: PPUSH
36709: PPUSH
// result := false ;
36710: LD_ADDR_VAR 0 3
36714: PUSH
36715: LD_INT 0
36717: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36718: LD_VAR 0 1
36722: NOT
36723: IFTRUE 36748
36725: PUSH
36726: LD_VAR 0 1
36730: PPUSH
36731: CALL_OW 266
36735: PUSH
36736: LD_INT 32
36738: PUSH
36739: LD_INT 33
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: IN
36746: NOT
36747: OR
36748: IFFALSE 36752
// exit ;
36750: GO 37887
// nat := GetNation ( tower ) ;
36752: LD_ADDR_VAR 0 12
36756: PUSH
36757: LD_VAR 0 1
36761: PPUSH
36762: CALL_OW 248
36766: ST_TO_ADDR
// side := GetSide ( tower ) ;
36767: LD_ADDR_VAR 0 16
36771: PUSH
36772: LD_VAR 0 1
36776: PPUSH
36777: CALL_OW 255
36781: ST_TO_ADDR
// x := GetX ( tower ) ;
36782: LD_ADDR_VAR 0 10
36786: PUSH
36787: LD_VAR 0 1
36791: PPUSH
36792: CALL_OW 250
36796: ST_TO_ADDR
// y := GetY ( tower ) ;
36797: LD_ADDR_VAR 0 11
36801: PUSH
36802: LD_VAR 0 1
36806: PPUSH
36807: CALL_OW 251
36811: ST_TO_ADDR
// if not x or not y then
36812: LD_VAR 0 10
36816: NOT
36817: IFTRUE 36826
36819: PUSH
36820: LD_VAR 0 11
36824: NOT
36825: OR
36826: IFFALSE 36830
// exit ;
36828: GO 37887
// weapon := 0 ;
36830: LD_ADDR_VAR 0 18
36834: PUSH
36835: LD_INT 0
36837: ST_TO_ADDR
// fac_list := [ ] ;
36838: LD_ADDR_VAR 0 17
36842: PUSH
36843: EMPTY
36844: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36845: LD_ADDR_VAR 0 6
36849: PUSH
36850: LD_VAR 0 1
36854: PPUSH
36855: CALL_OW 274
36859: PPUSH
36860: LD_VAR 0 2
36864: PPUSH
36865: LD_INT 0
36867: PPUSH
36868: CALL 34422 0 3
36872: PPUSH
36873: LD_INT 30
36875: PUSH
36876: LD_INT 3
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PPUSH
36883: CALL_OW 72
36887: ST_TO_ADDR
// if not factories then
36888: LD_VAR 0 6
36892: NOT
36893: IFFALSE 36897
// exit ;
36895: GO 37887
// for i in factories do
36897: LD_ADDR_VAR 0 8
36901: PUSH
36902: LD_VAR 0 6
36906: PUSH
36907: FOR_IN
36908: IFFALSE 36933
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36910: LD_ADDR_VAR 0 17
36914: PUSH
36915: LD_VAR 0 17
36919: PUSH
36920: LD_VAR 0 8
36924: PPUSH
36925: CALL_OW 478
36929: UNION
36930: ST_TO_ADDR
36931: GO 36907
36933: POP
36934: POP
// if not fac_list then
36935: LD_VAR 0 17
36939: NOT
36940: IFFALSE 36944
// exit ;
36942: GO 37887
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36944: LD_ADDR_VAR 0 5
36948: PUSH
36949: LD_INT 4
36951: PUSH
36952: LD_INT 5
36954: PUSH
36955: LD_INT 9
36957: PUSH
36958: LD_INT 10
36960: PUSH
36961: LD_INT 6
36963: PUSH
36964: LD_INT 7
36966: PUSH
36967: LD_INT 11
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 27
36981: PUSH
36982: LD_INT 28
36984: PUSH
36985: LD_INT 26
36987: PUSH
36988: LD_INT 30
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 43
36999: PUSH
37000: LD_INT 44
37002: PUSH
37003: LD_INT 46
37005: PUSH
37006: LD_INT 45
37008: PUSH
37009: LD_INT 47
37011: PUSH
37012: LD_INT 49
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: LIST
37027: PUSH
37028: LD_VAR 0 12
37032: ARRAY
37033: ST_TO_ADDR
// list := list isect fac_list ;
37034: LD_ADDR_VAR 0 5
37038: PUSH
37039: LD_VAR 0 5
37043: PUSH
37044: LD_VAR 0 17
37048: ISECT
37049: ST_TO_ADDR
// if not list then
37050: LD_VAR 0 5
37054: NOT
37055: IFFALSE 37059
// exit ;
37057: GO 37887
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37059: LD_VAR 0 12
37063: PUSH
37064: LD_INT 3
37066: EQUAL
37067: IFFALSE 37079
37069: PUSH
37070: LD_INT 49
37072: PUSH
37073: LD_VAR 0 5
37077: IN
37078: AND
37079: IFFALSE 37099
37081: PUSH
37082: LD_INT 31
37084: PPUSH
37085: LD_VAR 0 16
37089: PPUSH
37090: CALL_OW 321
37094: PUSH
37095: LD_INT 2
37097: EQUAL
37098: AND
37099: IFFALSE 37159
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37101: LD_INT 22
37103: PUSH
37104: LD_VAR 0 16
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 35
37115: PUSH
37116: LD_INT 49
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 91
37125: PUSH
37126: LD_VAR 0 1
37130: PUSH
37131: LD_INT 10
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: LIST
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: LIST
37143: PPUSH
37144: CALL_OW 69
37148: NOT
37149: IFFALSE 37159
// weapon := ru_time_lapser ;
37151: LD_ADDR_VAR 0 18
37155: PUSH
37156: LD_INT 49
37158: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37159: LD_VAR 0 12
37163: PUSH
37164: LD_INT 1
37166: PUSH
37167: LD_INT 2
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: IN
37174: IFFALSE 37198
37176: PUSH
37177: LD_INT 11
37179: PUSH
37180: LD_VAR 0 5
37184: IN
37185: IFTRUE 37197
37187: PUSH
37188: LD_INT 30
37190: PUSH
37191: LD_VAR 0 5
37195: IN
37196: OR
37197: AND
37198: IFFALSE 37218
37200: PUSH
37201: LD_INT 6
37203: PPUSH
37204: LD_VAR 0 16
37208: PPUSH
37209: CALL_OW 321
37213: PUSH
37214: LD_INT 2
37216: EQUAL
37217: AND
37218: IFFALSE 37385
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37220: LD_INT 22
37222: PUSH
37223: LD_VAR 0 16
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 2
37234: PUSH
37235: LD_INT 35
37237: PUSH
37238: LD_INT 11
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 35
37247: PUSH
37248: LD_INT 30
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 91
37262: PUSH
37263: LD_VAR 0 1
37267: PUSH
37268: LD_INT 18
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: LIST
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: LIST
37280: PPUSH
37281: CALL_OW 69
37285: NOT
37286: IFFALSE 37362
37288: PUSH
37289: LD_INT 22
37291: PUSH
37292: LD_VAR 0 16
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 2
37303: PUSH
37304: LD_INT 30
37306: PUSH
37307: LD_INT 32
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 30
37316: PUSH
37317: LD_INT 33
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 91
37331: PUSH
37332: LD_VAR 0 1
37336: PUSH
37337: LD_INT 12
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: LIST
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: LIST
37349: PUSH
37350: EMPTY
37351: LIST
37352: PPUSH
37353: CALL_OW 69
37357: PUSH
37358: LD_INT 2
37360: GREATER
37361: AND
37362: IFFALSE 37385
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37364: LD_ADDR_VAR 0 18
37368: PUSH
37369: LD_INT 11
37371: PUSH
37372: LD_INT 30
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_VAR 0 12
37383: ARRAY
37384: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37385: LD_VAR 0 18
37389: NOT
37390: IFFALSE 37410
37392: PUSH
37393: LD_INT 40
37395: PPUSH
37396: LD_VAR 0 16
37400: PPUSH
37401: CALL_OW 321
37405: PUSH
37406: LD_INT 2
37408: EQUAL
37409: AND
37410: IFFALSE 37446
37412: PUSH
37413: LD_INT 7
37415: PUSH
37416: LD_VAR 0 5
37420: IN
37421: IFTRUE 37433
37423: PUSH
37424: LD_INT 28
37426: PUSH
37427: LD_VAR 0 5
37431: IN
37432: OR
37433: IFTRUE 37445
37435: PUSH
37436: LD_INT 45
37438: PUSH
37439: LD_VAR 0 5
37443: IN
37444: OR
37445: AND
37446: IFFALSE 37700
// begin hex := GetHexInfo ( x , y ) ;
37448: LD_ADDR_VAR 0 4
37452: PUSH
37453: LD_VAR 0 10
37457: PPUSH
37458: LD_VAR 0 11
37462: PPUSH
37463: CALL_OW 546
37467: ST_TO_ADDR
// if hex [ 1 ] then
37468: LD_VAR 0 4
37472: PUSH
37473: LD_INT 1
37475: ARRAY
37476: IFFALSE 37480
// exit ;
37478: GO 37887
// height := hex [ 2 ] ;
37480: LD_ADDR_VAR 0 15
37484: PUSH
37485: LD_VAR 0 4
37489: PUSH
37490: LD_INT 2
37492: ARRAY
37493: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37494: LD_ADDR_VAR 0 14
37498: PUSH
37499: LD_INT 0
37501: PUSH
37502: LD_INT 2
37504: PUSH
37505: LD_INT 3
37507: PUSH
37508: LD_INT 5
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: ST_TO_ADDR
// for i in tmp do
37517: LD_ADDR_VAR 0 8
37521: PUSH
37522: LD_VAR 0 14
37526: PUSH
37527: FOR_IN
37528: IFFALSE 37698
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37530: LD_ADDR_VAR 0 9
37534: PUSH
37535: LD_VAR 0 10
37539: PPUSH
37540: LD_VAR 0 8
37544: PPUSH
37545: LD_INT 5
37547: PPUSH
37548: CALL_OW 272
37552: PUSH
37553: LD_VAR 0 11
37557: PPUSH
37558: LD_VAR 0 8
37562: PPUSH
37563: LD_INT 5
37565: PPUSH
37566: CALL_OW 273
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37575: LD_VAR 0 9
37579: PUSH
37580: LD_INT 1
37582: ARRAY
37583: PPUSH
37584: LD_VAR 0 9
37588: PUSH
37589: LD_INT 2
37591: ARRAY
37592: PPUSH
37593: CALL_OW 488
37597: IFFALSE 37696
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37599: LD_ADDR_VAR 0 4
37603: PUSH
37604: LD_VAR 0 9
37608: PUSH
37609: LD_INT 1
37611: ARRAY
37612: PPUSH
37613: LD_VAR 0 9
37617: PUSH
37618: LD_INT 2
37620: ARRAY
37621: PPUSH
37622: CALL_OW 546
37626: ST_TO_ADDR
// if hex [ 1 ] then
37627: LD_VAR 0 4
37631: PUSH
37632: LD_INT 1
37634: ARRAY
37635: IFFALSE 37639
// continue ;
37637: GO 37527
// h := hex [ 2 ] ;
37639: LD_ADDR_VAR 0 13
37643: PUSH
37644: LD_VAR 0 4
37648: PUSH
37649: LD_INT 2
37651: ARRAY
37652: ST_TO_ADDR
// if h + 7 < height then
37653: LD_VAR 0 13
37657: PUSH
37658: LD_INT 7
37660: PLUS
37661: PUSH
37662: LD_VAR 0 15
37666: LESS
37667: IFFALSE 37696
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37669: LD_ADDR_VAR 0 18
37673: PUSH
37674: LD_INT 7
37676: PUSH
37677: LD_INT 28
37679: PUSH
37680: LD_INT 45
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: LIST
37687: PUSH
37688: LD_VAR 0 12
37692: ARRAY
37693: ST_TO_ADDR
// break ;
37694: GO 37698
// end ; end ; end ;
37696: GO 37527
37698: POP
37699: POP
// end ; if not weapon then
37700: LD_VAR 0 18
37704: NOT
37705: IFFALSE 37765
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37707: LD_ADDR_VAR 0 5
37711: PUSH
37712: LD_VAR 0 5
37716: PUSH
37717: LD_INT 11
37719: PUSH
37720: LD_INT 30
37722: PUSH
37723: LD_INT 49
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: LIST
37730: DIFF
37731: ST_TO_ADDR
// if not list then
37732: LD_VAR 0 5
37736: NOT
37737: IFFALSE 37741
// exit ;
37739: GO 37887
// weapon := list [ rand ( 1 , list ) ] ;
37741: LD_ADDR_VAR 0 18
37745: PUSH
37746: LD_VAR 0 5
37750: PUSH
37751: LD_INT 1
37753: PPUSH
37754: LD_VAR 0 5
37758: PPUSH
37759: CALL_OW 12
37763: ARRAY
37764: ST_TO_ADDR
// end ; if weapon then
37765: LD_VAR 0 18
37769: IFFALSE 37887
// begin tmp := CostOfWeapon ( weapon ) ;
37771: LD_ADDR_VAR 0 14
37775: PUSH
37776: LD_VAR 0 18
37780: PPUSH
37781: CALL_OW 451
37785: ST_TO_ADDR
// j := GetBase ( tower ) ;
37786: LD_ADDR_VAR 0 9
37790: PUSH
37791: LD_VAR 0 1
37795: PPUSH
37796: CALL_OW 274
37800: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37801: LD_VAR 0 9
37805: PPUSH
37806: LD_INT 1
37808: PPUSH
37809: CALL_OW 275
37813: PUSH
37814: LD_VAR 0 14
37818: PUSH
37819: LD_INT 1
37821: ARRAY
37822: GREATEREQUAL
37823: IFFALSE 37849
37825: PUSH
37826: LD_VAR 0 9
37830: PPUSH
37831: LD_INT 2
37833: PPUSH
37834: CALL_OW 275
37838: PUSH
37839: LD_VAR 0 14
37843: PUSH
37844: LD_INT 2
37846: ARRAY
37847: GREATEREQUAL
37848: AND
37849: IFFALSE 37875
37851: PUSH
37852: LD_VAR 0 9
37856: PPUSH
37857: LD_INT 3
37859: PPUSH
37860: CALL_OW 275
37864: PUSH
37865: LD_VAR 0 14
37869: PUSH
37870: LD_INT 3
37872: ARRAY
37873: GREATEREQUAL
37874: AND
37875: IFFALSE 37887
// result := weapon ;
37877: LD_ADDR_VAR 0 3
37881: PUSH
37882: LD_VAR 0 18
37886: ST_TO_ADDR
// end ; end ;
37887: LD_VAR 0 3
37891: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37892: LD_INT 0
37894: PPUSH
37895: PPUSH
// result := true ;
37896: LD_ADDR_VAR 0 3
37900: PUSH
37901: LD_INT 1
37903: ST_TO_ADDR
// if array1 = array2 then
37904: LD_VAR 0 1
37908: PUSH
37909: LD_VAR 0 2
37913: EQUAL
37914: IFFALSE 37974
// begin for i = 1 to array1 do
37916: LD_ADDR_VAR 0 4
37920: PUSH
37921: DOUBLE
37922: LD_INT 1
37924: DEC
37925: ST_TO_ADDR
37926: LD_VAR 0 1
37930: PUSH
37931: FOR_TO
37932: IFFALSE 37970
// if array1 [ i ] <> array2 [ i ] then
37934: LD_VAR 0 1
37938: PUSH
37939: LD_VAR 0 4
37943: ARRAY
37944: PUSH
37945: LD_VAR 0 2
37949: PUSH
37950: LD_VAR 0 4
37954: ARRAY
37955: NONEQUAL
37956: IFFALSE 37968
// begin result := false ;
37958: LD_ADDR_VAR 0 3
37962: PUSH
37963: LD_INT 0
37965: ST_TO_ADDR
// break ;
37966: GO 37970
// end ;
37968: GO 37931
37970: POP
37971: POP
// end else
37972: GO 37982
// result := false ;
37974: LD_ADDR_VAR 0 3
37978: PUSH
37979: LD_INT 0
37981: ST_TO_ADDR
// end ;
37982: LD_VAR 0 3
37986: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37987: LD_INT 0
37989: PPUSH
37990: PPUSH
// if not array1 or not array2 then
37991: LD_VAR 0 1
37995: NOT
37996: IFTRUE 38005
37998: PUSH
37999: LD_VAR 0 2
38003: NOT
38004: OR
38005: IFFALSE 38009
// exit ;
38007: GO 38073
// result := true ;
38009: LD_ADDR_VAR 0 3
38013: PUSH
38014: LD_INT 1
38016: ST_TO_ADDR
// for i = 1 to array1 do
38017: LD_ADDR_VAR 0 4
38021: PUSH
38022: DOUBLE
38023: LD_INT 1
38025: DEC
38026: ST_TO_ADDR
38027: LD_VAR 0 1
38031: PUSH
38032: FOR_TO
38033: IFFALSE 38071
// if array1 [ i ] <> array2 [ i ] then
38035: LD_VAR 0 1
38039: PUSH
38040: LD_VAR 0 4
38044: ARRAY
38045: PUSH
38046: LD_VAR 0 2
38050: PUSH
38051: LD_VAR 0 4
38055: ARRAY
38056: NONEQUAL
38057: IFFALSE 38069
// begin result := false ;
38059: LD_ADDR_VAR 0 3
38063: PUSH
38064: LD_INT 0
38066: ST_TO_ADDR
// break ;
38067: GO 38071
// end ;
38069: GO 38032
38071: POP
38072: POP
// end ;
38073: LD_VAR 0 3
38077: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38078: LD_INT 0
38080: PPUSH
38081: PPUSH
38082: PPUSH
// pom := GetBase ( fac ) ;
38083: LD_ADDR_VAR 0 5
38087: PUSH
38088: LD_VAR 0 1
38092: PPUSH
38093: CALL_OW 274
38097: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38098: LD_ADDR_VAR 0 4
38102: PUSH
38103: LD_VAR 0 2
38107: PUSH
38108: LD_INT 1
38110: ARRAY
38111: PPUSH
38112: LD_VAR 0 2
38116: PUSH
38117: LD_INT 2
38119: ARRAY
38120: PPUSH
38121: LD_VAR 0 2
38125: PUSH
38126: LD_INT 3
38128: ARRAY
38129: PPUSH
38130: LD_VAR 0 2
38134: PUSH
38135: LD_INT 4
38137: ARRAY
38138: PPUSH
38139: CALL_OW 449
38143: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38144: LD_ADDR_VAR 0 3
38148: PUSH
38149: LD_VAR 0 5
38153: PPUSH
38154: LD_INT 1
38156: PPUSH
38157: CALL_OW 275
38161: PUSH
38162: LD_VAR 0 4
38166: PUSH
38167: LD_INT 1
38169: ARRAY
38170: GREATEREQUAL
38171: IFFALSE 38197
38173: PUSH
38174: LD_VAR 0 5
38178: PPUSH
38179: LD_INT 2
38181: PPUSH
38182: CALL_OW 275
38186: PUSH
38187: LD_VAR 0 4
38191: PUSH
38192: LD_INT 2
38194: ARRAY
38195: GREATEREQUAL
38196: AND
38197: IFFALSE 38223
38199: PUSH
38200: LD_VAR 0 5
38204: PPUSH
38205: LD_INT 3
38207: PPUSH
38208: CALL_OW 275
38212: PUSH
38213: LD_VAR 0 4
38217: PUSH
38218: LD_INT 3
38220: ARRAY
38221: GREATEREQUAL
38222: AND
38223: ST_TO_ADDR
// end ;
38224: LD_VAR 0 3
38228: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38229: LD_INT 0
38231: PPUSH
38232: PPUSH
38233: PPUSH
38234: PPUSH
// pom := GetBase ( building ) ;
38235: LD_ADDR_VAR 0 3
38239: PUSH
38240: LD_VAR 0 1
38244: PPUSH
38245: CALL_OW 274
38249: ST_TO_ADDR
// if not pom then
38250: LD_VAR 0 3
38254: NOT
38255: IFFALSE 38259
// exit ;
38257: GO 38433
// btype := GetBType ( building ) ;
38259: LD_ADDR_VAR 0 5
38263: PUSH
38264: LD_VAR 0 1
38268: PPUSH
38269: CALL_OW 266
38273: ST_TO_ADDR
// if btype = b_armoury then
38274: LD_VAR 0 5
38278: PUSH
38279: LD_INT 4
38281: EQUAL
38282: IFFALSE 38292
// btype := b_barracks ;
38284: LD_ADDR_VAR 0 5
38288: PUSH
38289: LD_INT 5
38291: ST_TO_ADDR
// if btype = b_depot then
38292: LD_VAR 0 5
38296: PUSH
38297: LD_INT 0
38299: EQUAL
38300: IFFALSE 38310
// btype := b_warehouse ;
38302: LD_ADDR_VAR 0 5
38306: PUSH
38307: LD_INT 1
38309: ST_TO_ADDR
// if btype = b_workshop then
38310: LD_VAR 0 5
38314: PUSH
38315: LD_INT 2
38317: EQUAL
38318: IFFALSE 38328
// btype := b_factory ;
38320: LD_ADDR_VAR 0 5
38324: PUSH
38325: LD_INT 3
38327: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38328: LD_ADDR_VAR 0 4
38332: PUSH
38333: LD_VAR 0 5
38337: PPUSH
38338: LD_VAR 0 1
38342: PPUSH
38343: CALL_OW 248
38347: PPUSH
38348: CALL_OW 450
38352: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38353: LD_ADDR_VAR 0 2
38357: PUSH
38358: LD_VAR 0 3
38362: PPUSH
38363: LD_INT 1
38365: PPUSH
38366: CALL_OW 275
38370: PUSH
38371: LD_VAR 0 4
38375: PUSH
38376: LD_INT 1
38378: ARRAY
38379: GREATEREQUAL
38380: IFFALSE 38406
38382: PUSH
38383: LD_VAR 0 3
38387: PPUSH
38388: LD_INT 2
38390: PPUSH
38391: CALL_OW 275
38395: PUSH
38396: LD_VAR 0 4
38400: PUSH
38401: LD_INT 2
38403: ARRAY
38404: GREATEREQUAL
38405: AND
38406: IFFALSE 38432
38408: PUSH
38409: LD_VAR 0 3
38413: PPUSH
38414: LD_INT 3
38416: PPUSH
38417: CALL_OW 275
38421: PUSH
38422: LD_VAR 0 4
38426: PUSH
38427: LD_INT 3
38429: ARRAY
38430: GREATEREQUAL
38431: AND
38432: ST_TO_ADDR
// end ;
38433: LD_VAR 0 2
38437: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38438: LD_INT 0
38440: PPUSH
38441: PPUSH
38442: PPUSH
// pom := GetBase ( building ) ;
38443: LD_ADDR_VAR 0 4
38447: PUSH
38448: LD_VAR 0 1
38452: PPUSH
38453: CALL_OW 274
38457: ST_TO_ADDR
// if not pom then
38458: LD_VAR 0 4
38462: NOT
38463: IFFALSE 38467
// exit ;
38465: GO 38572
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38467: LD_ADDR_VAR 0 5
38471: PUSH
38472: LD_VAR 0 2
38476: PPUSH
38477: LD_VAR 0 1
38481: PPUSH
38482: CALL_OW 248
38486: PPUSH
38487: CALL_OW 450
38491: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38492: LD_ADDR_VAR 0 3
38496: PUSH
38497: LD_VAR 0 4
38501: PPUSH
38502: LD_INT 1
38504: PPUSH
38505: CALL_OW 275
38509: PUSH
38510: LD_VAR 0 5
38514: PUSH
38515: LD_INT 1
38517: ARRAY
38518: GREATEREQUAL
38519: IFFALSE 38545
38521: PUSH
38522: LD_VAR 0 4
38526: PPUSH
38527: LD_INT 2
38529: PPUSH
38530: CALL_OW 275
38534: PUSH
38535: LD_VAR 0 5
38539: PUSH
38540: LD_INT 2
38542: ARRAY
38543: GREATEREQUAL
38544: AND
38545: IFFALSE 38571
38547: PUSH
38548: LD_VAR 0 4
38552: PPUSH
38553: LD_INT 3
38555: PPUSH
38556: CALL_OW 275
38560: PUSH
38561: LD_VAR 0 5
38565: PUSH
38566: LD_INT 3
38568: ARRAY
38569: GREATEREQUAL
38570: AND
38571: ST_TO_ADDR
// end ;
38572: LD_VAR 0 3
38576: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38577: LD_INT 0
38579: PPUSH
38580: PPUSH
38581: PPUSH
38582: PPUSH
38583: PPUSH
38584: PPUSH
38585: PPUSH
38586: PPUSH
38587: PPUSH
38588: PPUSH
38589: PPUSH
// result := false ;
38590: LD_ADDR_VAR 0 8
38594: PUSH
38595: LD_INT 0
38597: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38598: LD_VAR 0 5
38602: NOT
38603: IFTRUE 38612
38605: PUSH
38606: LD_VAR 0 1
38610: NOT
38611: OR
38612: IFTRUE 38621
38614: PUSH
38615: LD_VAR 0 2
38619: NOT
38620: OR
38621: IFTRUE 38630
38623: PUSH
38624: LD_VAR 0 3
38628: NOT
38629: OR
38630: IFFALSE 38634
// exit ;
38632: GO 39460
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38634: LD_ADDR_VAR 0 14
38638: PUSH
38639: LD_VAR 0 1
38643: PPUSH
38644: LD_VAR 0 2
38648: PPUSH
38649: LD_VAR 0 3
38653: PPUSH
38654: LD_VAR 0 4
38658: PPUSH
38659: LD_VAR 0 5
38663: PUSH
38664: LD_INT 1
38666: ARRAY
38667: PPUSH
38668: CALL_OW 248
38672: PPUSH
38673: LD_INT 0
38675: PPUSH
38676: CALL 40741 0 6
38680: ST_TO_ADDR
// if not hexes then
38681: LD_VAR 0 14
38685: NOT
38686: IFFALSE 38690
// exit ;
38688: GO 39460
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38690: LD_ADDR_VAR 0 17
38694: PUSH
38695: LD_VAR 0 5
38699: PPUSH
38700: LD_INT 22
38702: PUSH
38703: LD_VAR 0 13
38707: PPUSH
38708: CALL_OW 255
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 2
38719: PUSH
38720: LD_INT 30
38722: PUSH
38723: LD_INT 0
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 30
38732: PUSH
38733: LD_INT 1
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: LIST
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PPUSH
38749: CALL_OW 72
38753: ST_TO_ADDR
// for i = 1 to hexes do
38754: LD_ADDR_VAR 0 9
38758: PUSH
38759: DOUBLE
38760: LD_INT 1
38762: DEC
38763: ST_TO_ADDR
38764: LD_VAR 0 14
38768: PUSH
38769: FOR_TO
38770: IFFALSE 39458
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38772: LD_ADDR_VAR 0 13
38776: PUSH
38777: LD_VAR 0 14
38781: PUSH
38782: LD_VAR 0 9
38786: ARRAY
38787: PUSH
38788: LD_INT 1
38790: ARRAY
38791: PPUSH
38792: LD_VAR 0 14
38796: PUSH
38797: LD_VAR 0 9
38801: ARRAY
38802: PUSH
38803: LD_INT 2
38805: ARRAY
38806: PPUSH
38807: CALL_OW 428
38811: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38812: LD_VAR 0 14
38816: PUSH
38817: LD_VAR 0 9
38821: ARRAY
38822: PUSH
38823: LD_INT 1
38825: ARRAY
38826: PPUSH
38827: LD_VAR 0 14
38831: PUSH
38832: LD_VAR 0 9
38836: ARRAY
38837: PUSH
38838: LD_INT 2
38840: ARRAY
38841: PPUSH
38842: CALL_OW 351
38846: IFTRUE 38885
38848: PUSH
38849: LD_VAR 0 14
38853: PUSH
38854: LD_VAR 0 9
38858: ARRAY
38859: PUSH
38860: LD_INT 1
38862: ARRAY
38863: PPUSH
38864: LD_VAR 0 14
38868: PUSH
38869: LD_VAR 0 9
38873: ARRAY
38874: PUSH
38875: LD_INT 2
38877: ARRAY
38878: PPUSH
38879: CALL_OW 488
38883: NOT
38884: OR
38885: IFTRUE 38902
38887: PUSH
38888: LD_VAR 0 13
38892: PPUSH
38893: CALL_OW 247
38897: PUSH
38898: LD_INT 3
38900: EQUAL
38901: OR
38902: IFFALSE 38908
// exit ;
38904: POP
38905: POP
38906: GO 39460
// if not tmp then
38908: LD_VAR 0 13
38912: NOT
38913: IFFALSE 38917
// continue ;
38915: GO 38769
// result := true ;
38917: LD_ADDR_VAR 0 8
38921: PUSH
38922: LD_INT 1
38924: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38925: LD_VAR 0 6
38929: IFFALSE 38946
38931: PUSH
38932: LD_VAR 0 13
38936: PPUSH
38937: CALL_OW 247
38941: PUSH
38942: LD_INT 2
38944: EQUAL
38945: AND
38946: IFFALSE 38963
38948: PUSH
38949: LD_VAR 0 13
38953: PPUSH
38954: CALL_OW 263
38958: PUSH
38959: LD_INT 1
38961: EQUAL
38962: AND
38963: IFFALSE 39127
// begin if IsDrivenBy ( tmp ) then
38965: LD_VAR 0 13
38969: PPUSH
38970: CALL_OW 311
38974: IFFALSE 38978
// continue ;
38976: GO 38769
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38978: LD_VAR 0 6
38982: PPUSH
38983: LD_INT 3
38985: PUSH
38986: LD_INT 60
38988: PUSH
38989: EMPTY
38990: LIST
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 3
38998: PUSH
38999: LD_INT 55
39001: PUSH
39002: EMPTY
39003: LIST
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PPUSH
39013: CALL_OW 72
39017: IFFALSE 39125
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39019: LD_ADDR_VAR 0 18
39023: PUSH
39024: LD_VAR 0 6
39028: PPUSH
39029: LD_INT 3
39031: PUSH
39032: LD_INT 60
39034: PUSH
39035: EMPTY
39036: LIST
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 3
39044: PUSH
39045: LD_INT 55
39047: PUSH
39048: EMPTY
39049: LIST
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PPUSH
39059: CALL_OW 72
39063: PUSH
39064: LD_INT 1
39066: ARRAY
39067: ST_TO_ADDR
// if IsInUnit ( driver ) then
39068: LD_VAR 0 18
39072: PPUSH
39073: CALL_OW 310
39077: IFFALSE 39088
// ComExit ( driver ) ;
39079: LD_VAR 0 18
39083: PPUSH
39084: CALL 64741 0 1
// AddComEnterUnit ( driver , tmp ) ;
39088: LD_VAR 0 18
39092: PPUSH
39093: LD_VAR 0 13
39097: PPUSH
39098: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39102: LD_VAR 0 18
39106: PPUSH
39107: LD_VAR 0 7
39111: PPUSH
39112: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39116: LD_VAR 0 18
39120: PPUSH
39121: CALL_OW 181
// end ; continue ;
39125: GO 38769
// end ; if not cleaners or not tmp in cleaners then
39127: LD_VAR 0 6
39131: NOT
39132: IFTRUE 39147
39134: PUSH
39135: LD_VAR 0 13
39139: PUSH
39140: LD_VAR 0 6
39144: IN
39145: NOT
39146: OR
39147: IFFALSE 39456
// begin if dep then
39149: LD_VAR 0 17
39153: IFFALSE 39289
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39155: LD_ADDR_VAR 0 16
39159: PUSH
39160: LD_VAR 0 17
39164: PUSH
39165: LD_INT 1
39167: ARRAY
39168: PPUSH
39169: CALL_OW 250
39173: PPUSH
39174: LD_VAR 0 17
39178: PUSH
39179: LD_INT 1
39181: ARRAY
39182: PPUSH
39183: CALL_OW 254
39187: PPUSH
39188: LD_INT 5
39190: PPUSH
39191: CALL_OW 272
39195: PUSH
39196: LD_VAR 0 17
39200: PUSH
39201: LD_INT 1
39203: ARRAY
39204: PPUSH
39205: CALL_OW 251
39209: PPUSH
39210: LD_VAR 0 17
39214: PUSH
39215: LD_INT 1
39217: ARRAY
39218: PPUSH
39219: CALL_OW 254
39223: PPUSH
39224: LD_INT 5
39226: PPUSH
39227: CALL_OW 273
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39236: LD_VAR 0 16
39240: PUSH
39241: LD_INT 1
39243: ARRAY
39244: PPUSH
39245: LD_VAR 0 16
39249: PUSH
39250: LD_INT 2
39252: ARRAY
39253: PPUSH
39254: CALL_OW 488
39258: IFFALSE 39289
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39260: LD_VAR 0 13
39264: PPUSH
39265: LD_VAR 0 16
39269: PUSH
39270: LD_INT 1
39272: ARRAY
39273: PPUSH
39274: LD_VAR 0 16
39278: PUSH
39279: LD_INT 2
39281: ARRAY
39282: PPUSH
39283: CALL_OW 111
// continue ;
39287: GO 38769
// end ; end ; r := GetDir ( tmp ) ;
39289: LD_ADDR_VAR 0 15
39293: PUSH
39294: LD_VAR 0 13
39298: PPUSH
39299: CALL_OW 254
39303: ST_TO_ADDR
// if r = 5 then
39304: LD_VAR 0 15
39308: PUSH
39309: LD_INT 5
39311: EQUAL
39312: IFFALSE 39322
// r := 0 ;
39314: LD_ADDR_VAR 0 15
39318: PUSH
39319: LD_INT 0
39321: ST_TO_ADDR
// for j = r to 5 do
39322: LD_ADDR_VAR 0 10
39326: PUSH
39327: DOUBLE
39328: LD_VAR 0 15
39332: DEC
39333: ST_TO_ADDR
39334: LD_INT 5
39336: PUSH
39337: FOR_TO
39338: IFFALSE 39454
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39340: LD_ADDR_VAR 0 11
39344: PUSH
39345: LD_VAR 0 13
39349: PPUSH
39350: CALL_OW 250
39354: PPUSH
39355: LD_VAR 0 10
39359: PPUSH
39360: LD_INT 2
39362: PPUSH
39363: CALL_OW 272
39367: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39368: LD_ADDR_VAR 0 12
39372: PUSH
39373: LD_VAR 0 13
39377: PPUSH
39378: CALL_OW 251
39382: PPUSH
39383: LD_VAR 0 10
39387: PPUSH
39388: LD_INT 2
39390: PPUSH
39391: CALL_OW 273
39395: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39396: LD_VAR 0 11
39400: PPUSH
39401: LD_VAR 0 12
39405: PPUSH
39406: CALL_OW 488
39410: IFFALSE 39429
39412: PUSH
39413: LD_VAR 0 11
39417: PPUSH
39418: LD_VAR 0 12
39422: PPUSH
39423: CALL_OW 428
39427: NOT
39428: AND
39429: IFFALSE 39452
// begin ComMoveXY ( tmp , _x , _y ) ;
39431: LD_VAR 0 13
39435: PPUSH
39436: LD_VAR 0 11
39440: PPUSH
39441: LD_VAR 0 12
39445: PPUSH
39446: CALL_OW 111
// break ;
39450: GO 39454
// end ; end ;
39452: GO 39337
39454: POP
39455: POP
// end ; end ;
39456: GO 38769
39458: POP
39459: POP
// end ;
39460: LD_VAR 0 8
39464: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39465: LD_INT 0
39467: PPUSH
// result := true ;
39468: LD_ADDR_VAR 0 3
39472: PUSH
39473: LD_INT 1
39475: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39476: LD_VAR 0 2
39480: PUSH
39481: LD_INT 24
39483: DOUBLE
39484: EQUAL
39485: IFTRUE 39495
39487: LD_INT 33
39489: DOUBLE
39490: EQUAL
39491: IFTRUE 39495
39493: GO 39520
39495: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39496: LD_ADDR_VAR 0 3
39500: PUSH
39501: LD_INT 32
39503: PPUSH
39504: LD_VAR 0 1
39508: PPUSH
39509: CALL_OW 321
39513: PUSH
39514: LD_INT 2
39516: EQUAL
39517: ST_TO_ADDR
39518: GO 39836
39520: LD_INT 20
39522: DOUBLE
39523: EQUAL
39524: IFTRUE 39528
39526: GO 39553
39528: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39529: LD_ADDR_VAR 0 3
39533: PUSH
39534: LD_INT 6
39536: PPUSH
39537: LD_VAR 0 1
39541: PPUSH
39542: CALL_OW 321
39546: PUSH
39547: LD_INT 2
39549: EQUAL
39550: ST_TO_ADDR
39551: GO 39836
39553: LD_INT 22
39555: DOUBLE
39556: EQUAL
39557: IFTRUE 39567
39559: LD_INT 36
39561: DOUBLE
39562: EQUAL
39563: IFTRUE 39567
39565: GO 39592
39567: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39568: LD_ADDR_VAR 0 3
39572: PUSH
39573: LD_INT 15
39575: PPUSH
39576: LD_VAR 0 1
39580: PPUSH
39581: CALL_OW 321
39585: PUSH
39586: LD_INT 2
39588: EQUAL
39589: ST_TO_ADDR
39590: GO 39836
39592: LD_INT 30
39594: DOUBLE
39595: EQUAL
39596: IFTRUE 39600
39598: GO 39625
39600: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39601: LD_ADDR_VAR 0 3
39605: PUSH
39606: LD_INT 20
39608: PPUSH
39609: LD_VAR 0 1
39613: PPUSH
39614: CALL_OW 321
39618: PUSH
39619: LD_INT 2
39621: EQUAL
39622: ST_TO_ADDR
39623: GO 39836
39625: LD_INT 28
39627: DOUBLE
39628: EQUAL
39629: IFTRUE 39639
39631: LD_INT 21
39633: DOUBLE
39634: EQUAL
39635: IFTRUE 39639
39637: GO 39664
39639: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39640: LD_ADDR_VAR 0 3
39644: PUSH
39645: LD_INT 21
39647: PPUSH
39648: LD_VAR 0 1
39652: PPUSH
39653: CALL_OW 321
39657: PUSH
39658: LD_INT 2
39660: EQUAL
39661: ST_TO_ADDR
39662: GO 39836
39664: LD_INT 16
39666: DOUBLE
39667: EQUAL
39668: IFTRUE 39672
39670: GO 39697
39672: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39673: LD_ADDR_VAR 0 3
39677: PUSH
39678: LD_INT 84
39680: PPUSH
39681: LD_VAR 0 1
39685: PPUSH
39686: CALL_OW 321
39690: PUSH
39691: LD_INT 2
39693: EQUAL
39694: ST_TO_ADDR
39695: GO 39836
39697: LD_INT 19
39699: DOUBLE
39700: EQUAL
39701: IFTRUE 39711
39703: LD_INT 23
39705: DOUBLE
39706: EQUAL
39707: IFTRUE 39711
39709: GO 39736
39711: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39712: LD_ADDR_VAR 0 3
39716: PUSH
39717: LD_INT 83
39719: PPUSH
39720: LD_VAR 0 1
39724: PPUSH
39725: CALL_OW 321
39729: PUSH
39730: LD_INT 2
39732: EQUAL
39733: ST_TO_ADDR
39734: GO 39836
39736: LD_INT 17
39738: DOUBLE
39739: EQUAL
39740: IFTRUE 39744
39742: GO 39769
39744: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39745: LD_ADDR_VAR 0 3
39749: PUSH
39750: LD_INT 39
39752: PPUSH
39753: LD_VAR 0 1
39757: PPUSH
39758: CALL_OW 321
39762: PUSH
39763: LD_INT 2
39765: EQUAL
39766: ST_TO_ADDR
39767: GO 39836
39769: LD_INT 18
39771: DOUBLE
39772: EQUAL
39773: IFTRUE 39777
39775: GO 39802
39777: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39778: LD_ADDR_VAR 0 3
39782: PUSH
39783: LD_INT 40
39785: PPUSH
39786: LD_VAR 0 1
39790: PPUSH
39791: CALL_OW 321
39795: PUSH
39796: LD_INT 2
39798: EQUAL
39799: ST_TO_ADDR
39800: GO 39836
39802: LD_INT 27
39804: DOUBLE
39805: EQUAL
39806: IFTRUE 39810
39808: GO 39835
39810: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39811: LD_ADDR_VAR 0 3
39815: PUSH
39816: LD_INT 35
39818: PPUSH
39819: LD_VAR 0 1
39823: PPUSH
39824: CALL_OW 321
39828: PUSH
39829: LD_INT 2
39831: EQUAL
39832: ST_TO_ADDR
39833: GO 39836
39835: POP
// end ;
39836: LD_VAR 0 3
39840: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39841: LD_INT 0
39843: PPUSH
39844: PPUSH
39845: PPUSH
39846: PPUSH
39847: PPUSH
39848: PPUSH
39849: PPUSH
39850: PPUSH
39851: PPUSH
39852: PPUSH
39853: PPUSH
// result := false ;
39854: LD_ADDR_VAR 0 6
39858: PUSH
39859: LD_INT 0
39861: ST_TO_ADDR
// if btype = b_depot then
39862: LD_VAR 0 2
39866: PUSH
39867: LD_INT 0
39869: EQUAL
39870: IFFALSE 39882
// begin result := true ;
39872: LD_ADDR_VAR 0 6
39876: PUSH
39877: LD_INT 1
39879: ST_TO_ADDR
// exit ;
39880: GO 40736
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39882: LD_VAR 0 1
39886: NOT
39887: IFTRUE 39912
39889: PUSH
39890: LD_VAR 0 1
39894: PPUSH
39895: CALL_OW 266
39899: PUSH
39900: LD_INT 0
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: IN
39910: NOT
39911: OR
39912: IFTRUE 39921
39914: PUSH
39915: LD_VAR 0 2
39919: NOT
39920: OR
39921: IFTRUE 39957
39923: PUSH
39924: LD_VAR 0 5
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: LD_INT 1
39934: PUSH
39935: LD_INT 2
39937: PUSH
39938: LD_INT 3
39940: PUSH
39941: LD_INT 4
39943: PUSH
39944: LD_INT 5
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: IN
39955: NOT
39956: OR
39957: IFTRUE 39976
39959: PUSH
39960: LD_VAR 0 3
39964: PPUSH
39965: LD_VAR 0 4
39969: PPUSH
39970: CALL_OW 488
39974: NOT
39975: OR
39976: IFFALSE 39980
// exit ;
39978: GO 40736
// side := GetSide ( depot ) ;
39980: LD_ADDR_VAR 0 9
39984: PUSH
39985: LD_VAR 0 1
39989: PPUSH
39990: CALL_OW 255
39994: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39995: LD_VAR 0 9
39999: PPUSH
40000: LD_VAR 0 2
40004: PPUSH
40005: CALL 39465 0 2
40009: NOT
40010: IFFALSE 40014
// exit ;
40012: GO 40736
// pom := GetBase ( depot ) ;
40014: LD_ADDR_VAR 0 10
40018: PUSH
40019: LD_VAR 0 1
40023: PPUSH
40024: CALL_OW 274
40028: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40029: LD_ADDR_VAR 0 11
40033: PUSH
40034: LD_VAR 0 2
40038: PPUSH
40039: LD_VAR 0 1
40043: PPUSH
40044: CALL_OW 248
40048: PPUSH
40049: CALL_OW 450
40053: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40054: LD_VAR 0 10
40058: PPUSH
40059: LD_INT 1
40061: PPUSH
40062: CALL_OW 275
40066: PUSH
40067: LD_VAR 0 11
40071: PUSH
40072: LD_INT 1
40074: ARRAY
40075: GREATEREQUAL
40076: IFFALSE 40102
40078: PUSH
40079: LD_VAR 0 10
40083: PPUSH
40084: LD_INT 2
40086: PPUSH
40087: CALL_OW 275
40091: PUSH
40092: LD_VAR 0 11
40096: PUSH
40097: LD_INT 2
40099: ARRAY
40100: GREATEREQUAL
40101: AND
40102: IFFALSE 40128
40104: PUSH
40105: LD_VAR 0 10
40109: PPUSH
40110: LD_INT 3
40112: PPUSH
40113: CALL_OW 275
40117: PUSH
40118: LD_VAR 0 11
40122: PUSH
40123: LD_INT 3
40125: ARRAY
40126: GREATEREQUAL
40127: AND
40128: NOT
40129: IFFALSE 40133
// exit ;
40131: GO 40736
// if GetBType ( depot ) = b_depot then
40133: LD_VAR 0 1
40137: PPUSH
40138: CALL_OW 266
40142: PUSH
40143: LD_INT 0
40145: EQUAL
40146: IFFALSE 40158
// dist := 28 else
40148: LD_ADDR_VAR 0 14
40152: PUSH
40153: LD_INT 28
40155: ST_TO_ADDR
40156: GO 40166
// dist := 36 ;
40158: LD_ADDR_VAR 0 14
40162: PUSH
40163: LD_INT 36
40165: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40166: LD_VAR 0 1
40170: PPUSH
40171: LD_VAR 0 3
40175: PPUSH
40176: LD_VAR 0 4
40180: PPUSH
40181: CALL_OW 297
40185: PUSH
40186: LD_VAR 0 14
40190: GREATER
40191: IFFALSE 40195
// exit ;
40193: GO 40736
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40195: LD_ADDR_VAR 0 12
40199: PUSH
40200: LD_VAR 0 2
40204: PPUSH
40205: LD_VAR 0 3
40209: PPUSH
40210: LD_VAR 0 4
40214: PPUSH
40215: LD_VAR 0 5
40219: PPUSH
40220: LD_VAR 0 1
40224: PPUSH
40225: CALL_OW 248
40229: PPUSH
40230: LD_INT 0
40232: PPUSH
40233: CALL 40741 0 6
40237: ST_TO_ADDR
// if not hexes then
40238: LD_VAR 0 12
40242: NOT
40243: IFFALSE 40247
// exit ;
40245: GO 40736
// hex := GetHexInfo ( x , y ) ;
40247: LD_ADDR_VAR 0 15
40251: PUSH
40252: LD_VAR 0 3
40256: PPUSH
40257: LD_VAR 0 4
40261: PPUSH
40262: CALL_OW 546
40266: ST_TO_ADDR
// if hex [ 1 ] then
40267: LD_VAR 0 15
40271: PUSH
40272: LD_INT 1
40274: ARRAY
40275: IFFALSE 40279
// exit ;
40277: GO 40736
// height := hex [ 2 ] ;
40279: LD_ADDR_VAR 0 13
40283: PUSH
40284: LD_VAR 0 15
40288: PUSH
40289: LD_INT 2
40291: ARRAY
40292: ST_TO_ADDR
// for i = 1 to hexes do
40293: LD_ADDR_VAR 0 7
40297: PUSH
40298: DOUBLE
40299: LD_INT 1
40301: DEC
40302: ST_TO_ADDR
40303: LD_VAR 0 12
40307: PUSH
40308: FOR_TO
40309: IFFALSE 40653
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40311: LD_VAR 0 12
40315: PUSH
40316: LD_VAR 0 7
40320: ARRAY
40321: PUSH
40322: LD_INT 1
40324: ARRAY
40325: PPUSH
40326: LD_VAR 0 12
40330: PUSH
40331: LD_VAR 0 7
40335: ARRAY
40336: PUSH
40337: LD_INT 2
40339: ARRAY
40340: PPUSH
40341: CALL_OW 488
40345: NOT
40346: IFTRUE 40388
40348: PUSH
40349: LD_VAR 0 12
40353: PUSH
40354: LD_VAR 0 7
40358: ARRAY
40359: PUSH
40360: LD_INT 1
40362: ARRAY
40363: PPUSH
40364: LD_VAR 0 12
40368: PUSH
40369: LD_VAR 0 7
40373: ARRAY
40374: PUSH
40375: LD_INT 2
40377: ARRAY
40378: PPUSH
40379: CALL_OW 428
40383: PUSH
40384: LD_INT 0
40386: GREATER
40387: OR
40388: IFTRUE 40426
40390: PUSH
40391: LD_VAR 0 12
40395: PUSH
40396: LD_VAR 0 7
40400: ARRAY
40401: PUSH
40402: LD_INT 1
40404: ARRAY
40405: PPUSH
40406: LD_VAR 0 12
40410: PUSH
40411: LD_VAR 0 7
40415: ARRAY
40416: PUSH
40417: LD_INT 2
40419: ARRAY
40420: PPUSH
40421: CALL_OW 351
40425: OR
40426: IFFALSE 40432
// exit ;
40428: POP
40429: POP
40430: GO 40736
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40432: LD_ADDR_VAR 0 8
40436: PUSH
40437: LD_VAR 0 12
40441: PUSH
40442: LD_VAR 0 7
40446: ARRAY
40447: PUSH
40448: LD_INT 1
40450: ARRAY
40451: PPUSH
40452: LD_VAR 0 12
40456: PUSH
40457: LD_VAR 0 7
40461: ARRAY
40462: PUSH
40463: LD_INT 2
40465: ARRAY
40466: PPUSH
40467: CALL_OW 546
40471: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40472: LD_VAR 0 8
40476: PUSH
40477: LD_INT 1
40479: ARRAY
40480: IFTRUE 40502
40482: PUSH
40483: LD_VAR 0 8
40487: PUSH
40488: LD_INT 2
40490: ARRAY
40491: PUSH
40492: LD_VAR 0 13
40496: PUSH
40497: LD_INT 2
40499: PLUS
40500: GREATER
40501: OR
40502: IFTRUE 40524
40504: PUSH
40505: LD_VAR 0 8
40509: PUSH
40510: LD_INT 2
40512: ARRAY
40513: PUSH
40514: LD_VAR 0 13
40518: PUSH
40519: LD_INT 2
40521: MINUS
40522: LESS
40523: OR
40524: IFTRUE 40592
40526: PUSH
40527: LD_VAR 0 8
40531: PUSH
40532: LD_INT 3
40534: ARRAY
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: LD_INT 8
40541: PUSH
40542: LD_INT 9
40544: PUSH
40545: LD_INT 10
40547: PUSH
40548: LD_INT 11
40550: PUSH
40551: LD_INT 12
40553: PUSH
40554: LD_INT 13
40556: PUSH
40557: LD_INT 16
40559: PUSH
40560: LD_INT 17
40562: PUSH
40563: LD_INT 18
40565: PUSH
40566: LD_INT 19
40568: PUSH
40569: LD_INT 20
40571: PUSH
40572: LD_INT 21
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: IN
40590: NOT
40591: OR
40592: IFTRUE 40605
40594: PUSH
40595: LD_VAR 0 8
40599: PUSH
40600: LD_INT 5
40602: ARRAY
40603: NOT
40604: OR
40605: IFTRUE 40645
40607: PUSH
40608: LD_VAR 0 8
40612: PUSH
40613: LD_INT 6
40615: ARRAY
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: LD_INT 2
40622: PUSH
40623: LD_INT 7
40625: PUSH
40626: LD_INT 9
40628: PUSH
40629: LD_INT 10
40631: PUSH
40632: LD_INT 11
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: IN
40643: NOT
40644: OR
40645: IFFALSE 40651
// exit ;
40647: POP
40648: POP
40649: GO 40736
// end ;
40651: GO 40308
40653: POP
40654: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40655: LD_VAR 0 9
40659: PPUSH
40660: LD_VAR 0 3
40664: PPUSH
40665: LD_VAR 0 4
40669: PPUSH
40670: LD_INT 20
40672: PPUSH
40673: CALL 32555 0 4
40677: PUSH
40678: LD_INT 4
40680: ARRAY
40681: IFFALSE 40685
// exit ;
40683: GO 40736
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40685: LD_VAR 0 2
40689: PUSH
40690: LD_INT 29
40692: PUSH
40693: LD_INT 30
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: IN
40700: IFFALSE 40724
40702: PUSH
40703: LD_VAR 0 3
40707: PPUSH
40708: LD_VAR 0 4
40712: PPUSH
40713: LD_VAR 0 9
40717: PPUSH
40718: CALL_OW 440
40722: NOT
40723: AND
40724: IFFALSE 40728
// exit ;
40726: GO 40736
// result := true ;
40728: LD_ADDR_VAR 0 6
40732: PUSH
40733: LD_INT 1
40735: ST_TO_ADDR
// end ;
40736: LD_VAR 0 6
40740: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40741: LD_INT 0
40743: PPUSH
40744: PPUSH
40745: PPUSH
40746: PPUSH
40747: PPUSH
40748: PPUSH
40749: PPUSH
40750: PPUSH
40751: PPUSH
40752: PPUSH
40753: PPUSH
40754: PPUSH
40755: PPUSH
40756: PPUSH
40757: PPUSH
40758: PPUSH
40759: PPUSH
40760: PPUSH
40761: PPUSH
40762: PPUSH
40763: PPUSH
40764: PPUSH
40765: PPUSH
40766: PPUSH
40767: PPUSH
40768: PPUSH
40769: PPUSH
40770: PPUSH
40771: PPUSH
40772: PPUSH
40773: PPUSH
40774: PPUSH
40775: PPUSH
40776: PPUSH
40777: PPUSH
40778: PPUSH
40779: PPUSH
40780: PPUSH
40781: PPUSH
40782: PPUSH
40783: PPUSH
40784: PPUSH
40785: PPUSH
40786: PPUSH
40787: PPUSH
40788: PPUSH
40789: PPUSH
40790: PPUSH
40791: PPUSH
40792: PPUSH
40793: PPUSH
40794: PPUSH
40795: PPUSH
40796: PPUSH
40797: PPUSH
40798: PPUSH
40799: PPUSH
40800: PPUSH
// result = [ ] ;
40801: LD_ADDR_VAR 0 7
40805: PUSH
40806: EMPTY
40807: ST_TO_ADDR
// temp_list = [ ] ;
40808: LD_ADDR_VAR 0 9
40812: PUSH
40813: EMPTY
40814: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40815: LD_VAR 0 4
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: LD_INT 1
40825: PUSH
40826: LD_INT 2
40828: PUSH
40829: LD_INT 3
40831: PUSH
40832: LD_INT 4
40834: PUSH
40835: LD_INT 5
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: IN
40846: NOT
40847: IFTRUE 40890
40849: PUSH
40850: LD_VAR 0 1
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: LD_INT 1
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: IN
40865: IFFALSE 40889
40867: PUSH
40868: LD_VAR 0 5
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: LD_INT 2
40878: PUSH
40879: LD_INT 3
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: LIST
40886: IN
40887: NOT
40888: AND
40889: OR
40890: IFFALSE 40894
// exit ;
40892: GO 59293
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40894: LD_VAR 0 1
40898: PUSH
40899: LD_INT 6
40901: PUSH
40902: LD_INT 7
40904: PUSH
40905: LD_INT 8
40907: PUSH
40908: LD_INT 13
40910: PUSH
40911: LD_INT 12
40913: PUSH
40914: LD_INT 15
40916: PUSH
40917: LD_INT 11
40919: PUSH
40920: LD_INT 14
40922: PUSH
40923: LD_INT 10
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: IN
40937: IFFALSE 40947
// btype = b_lab ;
40939: LD_ADDR_VAR 0 1
40943: PUSH
40944: LD_INT 6
40946: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40947: LD_VAR 0 6
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: LD_INT 1
40957: PUSH
40958: LD_INT 2
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: LIST
40965: IN
40966: NOT
40967: IFTRUE 41035
40969: PUSH
40970: LD_VAR 0 1
40974: PUSH
40975: LD_INT 0
40977: PUSH
40978: LD_INT 1
40980: PUSH
40981: LD_INT 2
40983: PUSH
40984: LD_INT 3
40986: PUSH
40987: LD_INT 6
40989: PUSH
40990: LD_INT 36
40992: PUSH
40993: LD_INT 4
40995: PUSH
40996: LD_INT 5
40998: PUSH
40999: LD_INT 31
41001: PUSH
41002: LD_INT 32
41004: PUSH
41005: LD_INT 33
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: IN
41021: NOT
41022: IFFALSE 41034
41024: PUSH
41025: LD_VAR 0 6
41029: PUSH
41030: LD_INT 1
41032: EQUAL
41033: AND
41034: OR
41035: IFTRUE 41067
41037: PUSH
41038: LD_VAR 0 1
41042: PUSH
41043: LD_INT 2
41045: PUSH
41046: LD_INT 3
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: IN
41053: NOT
41054: IFFALSE 41066
41056: PUSH
41057: LD_VAR 0 6
41061: PUSH
41062: LD_INT 2
41064: EQUAL
41065: AND
41066: OR
41067: IFFALSE 41077
// mode = 0 ;
41069: LD_ADDR_VAR 0 6
41073: PUSH
41074: LD_INT 0
41076: ST_TO_ADDR
// case mode of 0 :
41077: LD_VAR 0 6
41081: PUSH
41082: LD_INT 0
41084: DOUBLE
41085: EQUAL
41086: IFTRUE 41090
41088: GO 52543
41090: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41091: LD_ADDR_VAR 0 11
41095: PUSH
41096: LD_INT 0
41098: PUSH
41099: LD_INT 0
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: LD_INT 1
41111: NEG
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: LD_INT 1
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 0
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 1
41149: NEG
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 1
41160: NEG
41161: PUSH
41162: LD_INT 1
41164: NEG
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: NEG
41173: PUSH
41174: LD_INT 2
41176: NEG
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: LD_INT 2
41187: NEG
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: LD_INT 2
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: LD_INT 2
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 1
41226: NEG
41227: PUSH
41228: LD_INT 1
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: LD_INT 3
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: LD_INT 3
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 1
41257: NEG
41258: PUSH
41259: LD_INT 2
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41284: LD_ADDR_VAR 0 12
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 1
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 0
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: NEG
41343: PUSH
41344: LD_INT 0
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 1
41353: NEG
41354: PUSH
41355: LD_INT 1
41357: NEG
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 1
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 2
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 2
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 2
41407: NEG
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 2
41418: NEG
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 2
41430: NEG
41431: PUSH
41432: LD_INT 1
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 3
41441: NEG
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 3
41452: NEG
41453: PUSH
41454: LD_INT 1
41456: NEG
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41480: LD_ADDR_VAR 0 13
41484: PUSH
41485: LD_INT 0
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 0
41497: PUSH
41498: LD_INT 1
41500: NEG
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 1
41508: PUSH
41509: LD_INT 0
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 1
41518: PUSH
41519: LD_INT 1
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 0
41528: PUSH
41529: LD_INT 1
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 1
41538: NEG
41539: PUSH
41540: LD_INT 0
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 1
41549: NEG
41550: PUSH
41551: LD_INT 1
41553: NEG
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 1
41561: NEG
41562: PUSH
41563: LD_INT 2
41565: NEG
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 2
41583: PUSH
41584: LD_INT 2
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: LD_INT 2
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 2
41603: NEG
41604: PUSH
41605: LD_INT 1
41607: NEG
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 2
41615: NEG
41616: PUSH
41617: LD_INT 2
41619: NEG
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 2
41627: NEG
41628: PUSH
41629: LD_INT 3
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 3
41639: NEG
41640: PUSH
41641: LD_INT 2
41643: NEG
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 3
41651: NEG
41652: PUSH
41653: LD_INT 3
41655: NEG
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41679: LD_ADDR_VAR 0 14
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: LD_INT 0
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: LD_INT 1
41699: NEG
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: LD_INT 0
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 1
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 0
41727: PUSH
41728: LD_INT 1
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 1
41748: NEG
41749: PUSH
41750: LD_INT 1
41752: NEG
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: LD_INT 2
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 0
41772: PUSH
41773: LD_INT 2
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: LD_INT 2
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: LD_INT 2
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 1
41814: NEG
41815: PUSH
41816: LD_INT 1
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 1
41825: NEG
41826: PUSH
41827: LD_INT 3
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: LD_INT 3
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 1
41848: PUSH
41849: LD_INT 2
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41875: LD_ADDR_VAR 0 15
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: LD_INT 1
41895: NEG
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 1
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 2
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 2
41977: PUSH
41978: LD_INT 1
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: NEG
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 2
41998: NEG
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 2
42009: NEG
42010: PUSH
42011: LD_INT 1
42013: NEG
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 2
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 3
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 3
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42068: LD_ADDR_VAR 0 16
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 0
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 0
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 1
42137: NEG
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: LD_INT 2
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 2
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 2
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: LD_INT 2
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 2
42191: NEG
42192: PUSH
42193: LD_INT 1
42195: NEG
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 2
42203: NEG
42204: PUSH
42205: LD_INT 2
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 3
42215: PUSH
42216: LD_INT 2
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 3
42225: PUSH
42226: LD_INT 3
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: PUSH
42236: LD_INT 3
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42261: LD_ADDR_VAR 0 17
42265: PUSH
42266: LD_INT 0
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: LD_INT 1
42281: NEG
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 1
42289: PUSH
42290: LD_INT 0
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 1
42299: PUSH
42300: LD_INT 1
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: LD_INT 1
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 1
42319: NEG
42320: PUSH
42321: LD_INT 0
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 1
42330: NEG
42331: PUSH
42332: LD_INT 1
42334: NEG
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: LD_INT 2
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: LD_INT 2
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: LD_INT 1
42368: NEG
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 2
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 2
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 2
42396: PUSH
42397: LD_INT 2
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: LD_INT 2
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: LD_INT 2
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 1
42426: NEG
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 2
42437: NEG
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 2
42448: NEG
42449: PUSH
42450: LD_INT 1
42452: NEG
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 2
42460: NEG
42461: PUSH
42462: LD_INT 2
42464: NEG
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42491: LD_ADDR_VAR 0 18
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 0
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 1
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 1
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: LD_INT 1
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 1
42560: NEG
42561: PUSH
42562: LD_INT 1
42564: NEG
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: LD_INT 2
42576: NEG
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: LD_INT 2
42587: NEG
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: LD_INT 1
42598: NEG
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 2
42606: PUSH
42607: LD_INT 0
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 2
42616: PUSH
42617: LD_INT 1
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 2
42626: PUSH
42627: LD_INT 2
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: LD_INT 2
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: LD_INT 2
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 1
42656: NEG
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 2
42667: NEG
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 2
42678: NEG
42679: PUSH
42680: LD_INT 1
42682: NEG
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 2
42690: NEG
42691: PUSH
42692: LD_INT 2
42694: NEG
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42721: LD_ADDR_VAR 0 19
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 1
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: LD_INT 1
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 1
42790: NEG
42791: PUSH
42792: LD_INT 1
42794: NEG
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: LD_INT 2
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 0
42814: PUSH
42815: LD_INT 2
42817: NEG
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: LD_INT 1
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 2
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 2
42846: PUSH
42847: LD_INT 1
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 2
42856: PUSH
42857: LD_INT 2
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: LD_INT 2
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 0
42876: PUSH
42877: LD_INT 2
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 1
42886: NEG
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 2
42897: NEG
42898: PUSH
42899: LD_INT 0
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 2
42908: NEG
42909: PUSH
42910: LD_INT 1
42912: NEG
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 2
42920: NEG
42921: PUSH
42922: LD_INT 2
42924: NEG
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42951: LD_ADDR_VAR 0 20
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: LD_INT 1
42971: NEG
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 1
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: NEG
43021: PUSH
43022: LD_INT 1
43024: NEG
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 1
43032: NEG
43033: PUSH
43034: LD_INT 2
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: LD_INT 2
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: LD_INT 1
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 2
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 2
43076: PUSH
43077: LD_INT 1
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 2
43086: PUSH
43087: LD_INT 2
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: LD_INT 2
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: LD_INT 2
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 1
43116: NEG
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 2
43127: NEG
43128: PUSH
43129: LD_INT 0
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 2
43138: NEG
43139: PUSH
43140: LD_INT 1
43142: NEG
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 2
43150: NEG
43151: PUSH
43152: LD_INT 2
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43181: LD_ADDR_VAR 0 21
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 0
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 1
43239: NEG
43240: PUSH
43241: LD_INT 0
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 1
43250: NEG
43251: PUSH
43252: LD_INT 1
43254: NEG
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: NEG
43263: PUSH
43264: LD_INT 2
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: LD_INT 2
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 2
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 2
43306: PUSH
43307: LD_INT 1
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 2
43316: PUSH
43317: LD_INT 2
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: LD_INT 2
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: LD_INT 2
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 2
43357: NEG
43358: PUSH
43359: LD_INT 0
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 2
43368: NEG
43369: PUSH
43370: LD_INT 1
43372: NEG
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 2
43380: NEG
43381: PUSH
43382: LD_INT 2
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43411: LD_ADDR_VAR 0 22
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: LD_INT 1
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 1
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: LD_INT 1
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: LD_INT 0
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: LD_INT 1
43484: NEG
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: LD_INT 2
43496: NEG
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 0
43504: PUSH
43505: LD_INT 2
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: LD_INT 1
43518: NEG
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 2
43526: PUSH
43527: LD_INT 0
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 2
43536: PUSH
43537: LD_INT 1
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: LD_INT 2
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: LD_INT 2
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: NEG
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 2
43587: NEG
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 2
43598: NEG
43599: PUSH
43600: LD_INT 1
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 2
43610: NEG
43611: PUSH
43612: LD_INT 2
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43641: LD_ADDR_VAR 0 23
43645: PUSH
43646: LD_INT 0
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 0
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 1
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 1
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 0
43689: PUSH
43690: LD_INT 1
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 1
43699: NEG
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 1
43710: NEG
43711: PUSH
43712: LD_INT 1
43714: NEG
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 1
43722: NEG
43723: PUSH
43724: LD_INT 2
43726: NEG
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: LD_INT 2
43737: NEG
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 1
43745: PUSH
43746: LD_INT 1
43748: NEG
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 2
43756: PUSH
43757: LD_INT 0
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 2
43766: PUSH
43767: LD_INT 1
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 2
43776: PUSH
43777: LD_INT 2
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 1
43786: PUSH
43787: LD_INT 2
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: LD_INT 2
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 1
43806: NEG
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 2
43817: NEG
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 2
43828: NEG
43829: PUSH
43830: LD_INT 1
43832: NEG
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 2
43840: NEG
43841: PUSH
43842: LD_INT 2
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 2
43852: NEG
43853: PUSH
43854: LD_INT 3
43856: NEG
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 1
43864: NEG
43865: PUSH
43866: LD_INT 3
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: LD_INT 2
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 2
43887: PUSH
43888: LD_INT 1
43890: NEG
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43921: LD_ADDR_VAR 0 24
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: LD_INT 1
43941: NEG
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: LD_INT 1
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: LD_INT 1
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: LD_INT 0
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: NEG
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: NEG
44003: PUSH
44004: LD_INT 2
44006: NEG
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 0
44014: PUSH
44015: LD_INT 2
44017: NEG
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: LD_INT 1
44028: NEG
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 2
44046: PUSH
44047: LD_INT 1
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 2
44056: PUSH
44057: LD_INT 2
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 1
44066: PUSH
44067: LD_INT 2
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 0
44076: PUSH
44077: LD_INT 2
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 1
44086: NEG
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 2
44097: NEG
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 2
44108: NEG
44109: PUSH
44110: LD_INT 1
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 2
44120: NEG
44121: PUSH
44122: LD_INT 2
44124: NEG
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: LD_INT 2
44135: NEG
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 2
44143: PUSH
44144: LD_INT 1
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 3
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 3
44164: PUSH
44165: LD_INT 2
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44197: LD_ADDR_VAR 0 25
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 1
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: NEG
44267: PUSH
44268: LD_INT 1
44270: NEG
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: NEG
44279: PUSH
44280: LD_INT 2
44282: NEG
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: LD_INT 2
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 1
44301: PUSH
44302: LD_INT 1
44304: NEG
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 2
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 2
44332: PUSH
44333: LD_INT 2
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: LD_INT 2
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: LD_INT 2
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 2
44373: NEG
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 2
44384: NEG
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 2
44396: NEG
44397: PUSH
44398: LD_INT 2
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 3
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 3
44418: PUSH
44419: LD_INT 2
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 2
44428: PUSH
44429: LD_INT 3
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: LD_INT 3
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44471: LD_ADDR_VAR 0 26
44475: PUSH
44476: LD_INT 0
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 0
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 1
44529: NEG
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 1
44540: NEG
44541: PUSH
44542: LD_INT 1
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 1
44552: NEG
44553: PUSH
44554: LD_INT 2
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 0
44564: PUSH
44565: LD_INT 2
44567: NEG
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 1
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 2
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 2
44606: PUSH
44607: LD_INT 2
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: LD_INT 2
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: LD_INT 2
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 2
44647: NEG
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 2
44658: NEG
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: NEG
44671: PUSH
44672: LD_INT 2
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 2
44682: PUSH
44683: LD_INT 3
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: LD_INT 3
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 1
44702: NEG
44703: PUSH
44704: LD_INT 2
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 2
44713: NEG
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44747: LD_ADDR_VAR 0 27
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: NEG
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: LD_INT 2
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 2
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 2
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 2
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: LD_INT 2
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 2
44923: NEG
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 2
44934: NEG
44935: PUSH
44936: LD_INT 1
44938: NEG
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 2
44946: NEG
44947: PUSH
44948: LD_INT 2
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: LD_INT 2
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 2
44969: NEG
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 3
44980: NEG
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 3
44992: NEG
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45027: LD_ADDR_VAR 0 28
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: LD_INT 0
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: NEG
45097: PUSH
45098: LD_INT 1
45100: NEG
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: LD_INT 2
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: LD_INT 2
45123: NEG
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: LD_INT 1
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 2
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 2
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 2
45162: PUSH
45163: LD_INT 2
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: LD_INT 2
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: LD_INT 2
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 2
45203: NEG
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 2
45214: NEG
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 2
45226: NEG
45227: PUSH
45228: LD_INT 2
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: LD_INT 3
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: NEG
45251: PUSH
45252: LD_INT 3
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 3
45262: NEG
45263: PUSH
45264: LD_INT 1
45266: NEG
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 3
45274: NEG
45275: PUSH
45276: LD_INT 2
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45309: LD_ADDR_VAR 0 29
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 0
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: PUSH
45348: LD_INT 1
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: NEG
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: LD_INT 2
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 2
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: LD_INT 2
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 2
45475: NEG
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 2
45487: NEG
45488: PUSH
45489: LD_INT 2
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 2
45499: NEG
45500: PUSH
45501: LD_INT 3
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 2
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 3
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 1
45532: PUSH
45533: LD_INT 3
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: LD_INT 2
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 3
45553: NEG
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45588: LD_ADDR_VAR 0 30
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 1
45646: NEG
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 1
45657: NEG
45658: PUSH
45659: LD_INT 1
45661: NEG
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: LD_INT 2
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: LD_INT 2
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 1
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 2
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 2
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 2
45723: PUSH
45724: LD_INT 2
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: NEG
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 2
45754: NEG
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 2
45765: NEG
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: LD_INT 3
45781: NEG
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: LD_INT 2
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 3
45800: PUSH
45801: LD_INT 2
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 2
45810: PUSH
45811: LD_INT 3
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 2
45820: NEG
45821: PUSH
45822: LD_INT 1
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 3
45831: NEG
45832: PUSH
45833: LD_INT 1
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45866: LD_ADDR_VAR 0 31
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: LD_INT 1
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 1
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: LD_INT 1
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: NEG
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: LD_INT 2
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 2
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 2
45980: PUSH
45981: LD_INT 1
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 2
45990: PUSH
45991: LD_INT 2
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: LD_INT 2
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: LD_INT 2
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 2
46031: NEG
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 2
46043: NEG
46044: PUSH
46045: LD_INT 2
46047: NEG
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 2
46055: NEG
46056: PUSH
46057: LD_INT 3
46059: NEG
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 3
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: LD_INT 3
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: LD_INT 2
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 3
46109: NEG
46110: PUSH
46111: LD_INT 2
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46144: LD_ADDR_VAR 0 32
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 1
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 1
46213: NEG
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: LD_INT 2
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 2
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 2
46269: PUSH
46270: LD_INT 2
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: LD_INT 2
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: LD_INT 2
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 2
46310: NEG
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 2
46321: NEG
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: LD_INT 3
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: LD_INT 2
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 3
46356: PUSH
46357: LD_INT 2
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 2
46366: PUSH
46367: LD_INT 3
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 2
46376: NEG
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 3
46387: NEG
46388: PUSH
46389: LD_INT 1
46391: NEG
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46422: LD_ADDR_VAR 0 33
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 0
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: LD_INT 1
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: NEG
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: NEG
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: NEG
46504: PUSH
46505: LD_INT 2
46507: NEG
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 2
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 2
46536: PUSH
46537: LD_INT 1
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: LD_INT 2
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: LD_INT 2
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: NEG
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 2
46577: NEG
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 2
46588: NEG
46589: PUSH
46590: LD_INT 1
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 2
46600: NEG
46601: PUSH
46602: LD_INT 2
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 2
46612: NEG
46613: PUSH
46614: LD_INT 3
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 2
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 3
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: LD_INT 3
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: LD_INT 2
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 3
46666: NEG
46667: PUSH
46668: LD_INT 2
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46701: LD_ADDR_VAR 0 34
46705: PUSH
46706: LD_INT 0
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: LD_INT 1
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: NEG
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: LD_INT 2
46786: NEG
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: LD_INT 2
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 2
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 2
46826: PUSH
46827: LD_INT 2
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: LD_INT 2
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 2
46857: NEG
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 2
46868: NEG
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 2
46880: NEG
46881: PUSH
46882: LD_INT 2
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: LD_INT 3
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: LD_INT 2
46907: NEG
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 3
46915: PUSH
46916: LD_INT 2
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 2
46925: PUSH
46926: LD_INT 3
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 2
46935: NEG
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 3
46946: NEG
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46981: LD_ADDR_VAR 0 35
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: NEG
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: LD_INT 1
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47093: LD_ADDR_VAR 0 36
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: LD_INT 1
47113: NEG
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: LD_INT 0
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: LD_INT 2
47178: NEG
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: LD_INT 2
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47205: LD_ADDR_VAR 0 37
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 1
47297: NEG
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47317: LD_ADDR_VAR 0 38
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 2
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 2
47408: NEG
47409: PUSH
47410: LD_INT 1
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47429: LD_ADDR_VAR 0 39
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: LD_INT 1
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: LD_INT 2
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47541: LD_ADDR_VAR 0 40
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: LD_INT 1
47561: NEG
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: LD_INT 1
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47653: LD_ADDR_VAR 0 41
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: LD_INT 2
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: LD_INT 1
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 2
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 2
47777: PUSH
47778: LD_INT 2
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: NEG
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 2
47819: NEG
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 2
47831: NEG
47832: PUSH
47833: LD_INT 2
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 2
47843: NEG
47844: PUSH
47845: LD_INT 3
47847: NEG
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 2
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 3
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 3
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 3
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 3
47896: PUSH
47897: LD_INT 3
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: LD_INT 3
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 2
47916: NEG
47917: PUSH
47918: LD_INT 1
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 3
47927: NEG
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 3
47938: NEG
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 3
47950: NEG
47951: PUSH
47952: LD_INT 2
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 3
47962: NEG
47963: PUSH
47964: LD_INT 3
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48003: LD_ADDR_VAR 0 42
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: LD_INT 2
48088: NEG
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: LD_INT 2
48099: NEG
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 2
48118: PUSH
48119: LD_INT 1
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: LD_INT 2
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: LD_INT 2
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: LD_INT 2
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 1
48158: NEG
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 2
48169: NEG
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 2
48181: NEG
48182: PUSH
48183: LD_INT 2
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 2
48193: NEG
48194: PUSH
48195: LD_INT 3
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: LD_INT 3
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: LD_INT 3
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 1
48228: PUSH
48229: LD_INT 2
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 3
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 3
48249: PUSH
48250: LD_INT 3
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 2
48259: PUSH
48260: LD_INT 3
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: PUSH
48270: LD_INT 3
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: LD_INT 3
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: LD_INT 2
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 3
48300: NEG
48301: PUSH
48302: LD_INT 2
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 3
48312: NEG
48313: PUSH
48314: LD_INT 3
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48353: LD_ADDR_VAR 0 43
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: NEG
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: LD_INT 2
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: LD_INT 2
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: LD_INT 2
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: LD_INT 2
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 2
48519: NEG
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 2
48530: NEG
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: LD_INT 3
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: LD_INT 3
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: LD_INT 2
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 2
48576: PUSH
48577: LD_INT 1
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 3
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 3
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: LD_INT 3
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: LD_INT 3
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: LD_INT 2
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 3
48649: NEG
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 3
48660: NEG
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48701: LD_ADDR_VAR 0 44
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: LD_INT 2
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 2
48805: PUSH
48806: LD_INT 0
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 2
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 2
48825: PUSH
48826: LD_INT 2
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: LD_INT 2
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 2
48856: NEG
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 2
48867: NEG
48868: PUSH
48869: LD_INT 1
48871: NEG
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 2
48879: NEG
48880: PUSH
48881: LD_INT 2
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 2
48891: NEG
48892: PUSH
48893: LD_INT 3
48895: NEG
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 2
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 3
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 3
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 3
48934: PUSH
48935: LD_INT 2
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 3
48944: PUSH
48945: LD_INT 3
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: LD_INT 3
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 2
48964: NEG
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 3
48975: NEG
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 3
48986: NEG
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 3
48998: NEG
48999: PUSH
49000: LD_INT 2
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 3
49010: NEG
49011: PUSH
49012: LD_INT 3
49014: NEG
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49051: LD_ADDR_VAR 0 45
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: LD_INT 1
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 1
49109: NEG
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 1
49132: NEG
49133: PUSH
49134: LD_INT 2
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 0
49144: PUSH
49145: LD_INT 2
49147: NEG
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 2
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 2
49176: PUSH
49177: LD_INT 2
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: LD_INT 2
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: LD_INT 2
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: NEG
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 2
49217: NEG
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 2
49229: NEG
49230: PUSH
49231: LD_INT 2
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 2
49241: NEG
49242: PUSH
49243: LD_INT 3
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: NEG
49254: PUSH
49255: LD_INT 3
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: LD_INT 3
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 2
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 3
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 3
49297: PUSH
49298: LD_INT 3
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: LD_INT 3
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 3
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: LD_INT 3
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 2
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 3
49348: NEG
49349: PUSH
49350: LD_INT 2
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 3
49360: NEG
49361: PUSH
49362: LD_INT 3
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49401: LD_ADDR_VAR 0 46
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: LD_INT 1
49421: NEG
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: LD_INT 2
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: LD_INT 2
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 2
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 2
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: LD_INT 2
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: LD_INT 2
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 1
49556: NEG
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 2
49567: NEG
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 2
49578: NEG
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: NEG
49591: PUSH
49592: LD_INT 3
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: LD_INT 3
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: LD_INT 2
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 3
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 3
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: LD_INT 3
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: LD_INT 3
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: LD_INT 2
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 2
49686: NEG
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 3
49697: NEG
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 3
49708: NEG
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49749: LD_ADDR_VAR 0 47
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: LD_INT 1
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: LD_INT 2
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: LD_INT 2
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 2
49864: NEG
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 2
49876: NEG
49877: PUSH
49878: LD_INT 2
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49900: LD_ADDR_VAR 0 48
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 1
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 1
49958: NEG
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 1
49969: NEG
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: NEG
49982: PUSH
49983: LD_INT 2
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: LD_INT 2
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: LD_INT 1
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 2
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 2
50025: PUSH
50026: LD_INT 1
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50047: LD_ADDR_VAR 0 49
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: LD_INT 1
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 1
50116: NEG
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: LD_INT 1
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 2
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 2
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: LD_INT 2
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50191: LD_ADDR_VAR 0 50
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 0
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: LD_INT 2
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: LD_INT 2
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50335: LD_ADDR_VAR 0 51
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: LD_INT 2
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: LD_INT 2
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 2
50458: NEG
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50482: LD_ADDR_VAR 0 52
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: LD_INT 1
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: LD_INT 0
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: LD_INT 2
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 2
50586: NEG
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: NEG
50598: PUSH
50599: LD_INT 1
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 2
50609: NEG
50610: PUSH
50611: LD_INT 2
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50633: LD_ADDR_VAR 0 53
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: LD_INT 1
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: LD_INT 2
50718: NEG
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: LD_INT 2
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: LD_INT 1
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 2
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 2
50758: PUSH
50759: LD_INT 1
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 2
50768: PUSH
50769: LD_INT 2
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: LD_INT 2
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 2
50809: NEG
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 2
50820: NEG
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: NEG
50833: PUSH
50834: LD_INT 2
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50863: LD_ADDR_VAR 0 54
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: LD_INT 1
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: LD_INT 2
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: LD_INT 2
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 2
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 2
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: LD_INT 2
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: LD_INT 2
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: LD_INT 2
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: NEG
51063: PUSH
51064: LD_INT 2
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51093: LD_ADDR_VAR 0 55
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: NEG
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: LD_INT 2
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: LD_INT 2
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: LD_INT 2
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 2
51269: NEG
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: NEG
51281: PUSH
51282: LD_INT 1
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 2
51292: NEG
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51323: LD_ADDR_VAR 0 56
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: LD_INT 1
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 2
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: LD_INT 2
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: LD_INT 2
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51553: LD_ADDR_VAR 0 57
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 1
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: LD_INT 1
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: LD_INT 2
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 2
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 2
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: LD_INT 2
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: LD_INT 2
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 2
51729: NEG
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 2
51740: NEG
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 2
51752: NEG
51753: PUSH
51754: LD_INT 2
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51783: LD_ADDR_VAR 0 58
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: LD_INT 2
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: LD_INT 2
51879: NEG
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 2
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 2
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 2
51918: PUSH
51919: LD_INT 2
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: LD_INT 2
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 2
51959: NEG
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: NEG
51983: PUSH
51984: LD_INT 2
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52013: LD_ADDR_VAR 0 59
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: LD_INT 1
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: LD_INT 1
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52101: LD_ADDR_VAR 0 60
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: NEG
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52189: LD_ADDR_VAR 0 61
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: LD_INT 1
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: LD_INT 1
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52277: LD_ADDR_VAR 0 62
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: LD_INT 1
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: NEG
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52365: LD_ADDR_VAR 0 63
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: LD_INT 1
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52453: LD_ADDR_VAR 0 64
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: ST_TO_ADDR
// end ; 1 :
52541: GO 58438
52543: LD_INT 1
52545: DOUBLE
52546: EQUAL
52547: IFTRUE 52551
52549: GO 55174
52551: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52552: LD_ADDR_VAR 0 11
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: LD_INT 3
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: LD_INT 3
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: LD_INT 2
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: LIST
52595: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52596: LD_ADDR_VAR 0 12
52600: PUSH
52601: LD_INT 2
52603: PUSH
52604: LD_INT 1
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 3
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 3
52624: PUSH
52625: LD_INT 1
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: LIST
52636: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52637: LD_ADDR_VAR 0 13
52641: PUSH
52642: LD_INT 3
52644: PUSH
52645: LD_INT 2
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 3
52654: PUSH
52655: LD_INT 3
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 2
52664: PUSH
52665: LD_INT 3
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: LIST
52676: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52677: LD_ADDR_VAR 0 14
52681: PUSH
52682: LD_INT 1
52684: PUSH
52685: LD_INT 3
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: LD_INT 3
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: LIST
52717: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52718: LD_ADDR_VAR 0 15
52722: PUSH
52723: LD_INT 2
52725: NEG
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 3
52736: NEG
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 3
52747: NEG
52748: PUSH
52749: LD_INT 1
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: LIST
52761: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52762: LD_ADDR_VAR 0 16
52766: PUSH
52767: LD_INT 2
52769: NEG
52770: PUSH
52771: LD_INT 3
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 3
52781: NEG
52782: PUSH
52783: LD_INT 2
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 3
52793: NEG
52794: PUSH
52795: LD_INT 3
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: LIST
52807: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52808: LD_ADDR_VAR 0 17
52812: PUSH
52813: LD_INT 1
52815: NEG
52816: PUSH
52817: LD_INT 3
52819: NEG
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: LD_INT 3
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: LD_INT 2
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: LIST
52851: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52852: LD_ADDR_VAR 0 18
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: LD_INT 1
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 3
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 3
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: LIST
52892: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52893: LD_ADDR_VAR 0 19
52897: PUSH
52898: LD_INT 3
52900: PUSH
52901: LD_INT 2
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 3
52910: PUSH
52911: LD_INT 3
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 2
52920: PUSH
52921: LD_INT 3
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: LIST
52932: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52933: LD_ADDR_VAR 0 20
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: LD_INT 3
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: LD_INT 3
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: LD_INT 2
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: LIST
52973: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52974: LD_ADDR_VAR 0 21
52978: PUSH
52979: LD_INT 2
52981: NEG
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 3
52992: NEG
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 3
53003: NEG
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: LIST
53017: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53018: LD_ADDR_VAR 0 22
53022: PUSH
53023: LD_INT 2
53025: NEG
53026: PUSH
53027: LD_INT 3
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 3
53037: NEG
53038: PUSH
53039: LD_INT 2
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 3
53049: NEG
53050: PUSH
53051: LD_INT 3
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: LIST
53063: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53064: LD_ADDR_VAR 0 23
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: LD_INT 3
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: LD_INT 4
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: LD_INT 3
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: LIST
53107: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53108: LD_ADDR_VAR 0 24
53112: PUSH
53113: LD_INT 3
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 3
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 4
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: LIST
53148: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53149: LD_ADDR_VAR 0 25
53153: PUSH
53154: LD_INT 3
53156: PUSH
53157: LD_INT 3
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 4
53166: PUSH
53167: LD_INT 3
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 3
53176: PUSH
53177: LD_INT 4
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: LIST
53188: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53189: LD_ADDR_VAR 0 26
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: LD_INT 3
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: LD_INT 4
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: LD_INT 3
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: LIST
53229: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53230: LD_ADDR_VAR 0 27
53234: PUSH
53235: LD_INT 3
53237: NEG
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 3
53248: NEG
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 4
53259: NEG
53260: PUSH
53261: LD_INT 1
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: LIST
53273: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53274: LD_ADDR_VAR 0 28
53278: PUSH
53279: LD_INT 3
53281: NEG
53282: PUSH
53283: LD_INT 3
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 3
53293: NEG
53294: PUSH
53295: LD_INT 4
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 4
53305: NEG
53306: PUSH
53307: LD_INT 3
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: LIST
53319: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53320: LD_ADDR_VAR 0 29
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: LD_INT 3
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: LD_INT 3
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: LD_INT 4
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: LD_INT 4
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: LD_INT 3
53387: NEG
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: LD_INT 5
53399: NEG
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: LD_INT 5
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 1
53418: PUSH
53419: LD_INT 4
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: PUSH
53431: LD_INT 6
53433: NEG
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: LD_INT 6
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: LD_INT 5
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53475: LD_ADDR_VAR 0 30
53479: PUSH
53480: LD_INT 2
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 3
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 3
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 3
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 4
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 4
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 4
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 5
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 5
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 5
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 6
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 6
53596: PUSH
53597: LD_INT 1
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53618: LD_ADDR_VAR 0 31
53622: PUSH
53623: LD_INT 3
53625: PUSH
53626: LD_INT 2
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 3
53635: PUSH
53636: LD_INT 3
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 2
53645: PUSH
53646: LD_INT 3
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 4
53655: PUSH
53656: LD_INT 3
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 4
53665: PUSH
53666: LD_INT 4
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 3
53675: PUSH
53676: LD_INT 4
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 5
53685: PUSH
53686: LD_INT 4
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 5
53695: PUSH
53696: LD_INT 5
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 4
53705: PUSH
53706: LD_INT 5
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 6
53715: PUSH
53716: LD_INT 5
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 6
53725: PUSH
53726: LD_INT 6
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 5
53735: PUSH
53736: LD_INT 6
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53757: LD_ADDR_VAR 0 32
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: LD_INT 3
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: LD_INT 3
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: LD_INT 2
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: LD_INT 4
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: LD_INT 4
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: NEG
53816: PUSH
53817: LD_INT 3
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: LD_INT 5
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 0
53836: PUSH
53837: LD_INT 5
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: LD_INT 4
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: LD_INT 6
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: LD_INT 6
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: LD_INT 5
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53900: LD_ADDR_VAR 0 33
53904: PUSH
53905: LD_INT 2
53907: NEG
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 3
53918: NEG
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 3
53929: NEG
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 3
53941: NEG
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 4
53952: NEG
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 4
53963: NEG
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 4
53975: NEG
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 5
53986: NEG
53987: PUSH
53988: LD_INT 0
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 5
53997: NEG
53998: PUSH
53999: LD_INT 1
54001: NEG
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 5
54009: NEG
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 6
54020: NEG
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 6
54031: NEG
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54055: LD_ADDR_VAR 0 34
54059: PUSH
54060: LD_INT 2
54062: NEG
54063: PUSH
54064: LD_INT 3
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 3
54074: NEG
54075: PUSH
54076: LD_INT 2
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 3
54086: NEG
54087: PUSH
54088: LD_INT 3
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 3
54098: NEG
54099: PUSH
54100: LD_INT 4
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 4
54110: NEG
54111: PUSH
54112: LD_INT 3
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 4
54122: NEG
54123: PUSH
54124: LD_INT 4
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 4
54134: NEG
54135: PUSH
54136: LD_INT 5
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 5
54146: NEG
54147: PUSH
54148: LD_INT 4
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 5
54158: NEG
54159: PUSH
54160: LD_INT 5
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 5
54170: NEG
54171: PUSH
54172: LD_INT 6
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 6
54182: NEG
54183: PUSH
54184: LD_INT 5
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 6
54194: NEG
54195: PUSH
54196: LD_INT 6
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54218: LD_ADDR_VAR 0 41
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: LD_INT 2
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: NEG
54237: PUSH
54238: LD_INT 3
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 1
54248: PUSH
54249: LD_INT 2
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: LIST
54261: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54262: LD_ADDR_VAR 0 42
54266: PUSH
54267: LD_INT 2
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 2
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 3
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: LIST
54302: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54303: LD_ADDR_VAR 0 43
54307: PUSH
54308: LD_INT 2
54310: PUSH
54311: LD_INT 2
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 3
54320: PUSH
54321: LD_INT 2
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 2
54330: PUSH
54331: LD_INT 3
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: LIST
54342: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54343: LD_ADDR_VAR 0 44
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: LD_INT 2
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: PUSH
54361: LD_INT 3
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: NEG
54371: PUSH
54372: LD_INT 2
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: LIST
54383: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54384: LD_ADDR_VAR 0 45
54388: PUSH
54389: LD_INT 2
54391: NEG
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 2
54402: NEG
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 3
54413: NEG
54414: PUSH
54415: LD_INT 1
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: LIST
54427: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54428: LD_ADDR_VAR 0 46
54432: PUSH
54433: LD_INT 2
54435: NEG
54436: PUSH
54437: LD_INT 2
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 2
54447: NEG
54448: PUSH
54449: LD_INT 3
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 3
54459: NEG
54460: PUSH
54461: LD_INT 2
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: LIST
54473: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54474: LD_ADDR_VAR 0 47
54478: PUSH
54479: LD_INT 2
54481: NEG
54482: PUSH
54483: LD_INT 3
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: LD_INT 3
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54507: LD_ADDR_VAR 0 48
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: LD_INT 2
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54538: LD_ADDR_VAR 0 49
54542: PUSH
54543: LD_INT 3
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 3
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54567: LD_ADDR_VAR 0 50
54571: PUSH
54572: LD_INT 2
54574: PUSH
54575: LD_INT 3
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: LD_INT 3
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54596: LD_ADDR_VAR 0 51
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: LD_INT 2
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 2
54614: NEG
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54627: LD_ADDR_VAR 0 52
54631: PUSH
54632: LD_INT 3
54634: NEG
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 3
54646: NEG
54647: PUSH
54648: LD_INT 2
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54660: LD_ADDR_VAR 0 53
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: LD_INT 3
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: LD_INT 3
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: LD_INT 2
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: LIST
54703: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54704: LD_ADDR_VAR 0 54
54708: PUSH
54709: LD_INT 2
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 3
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 3
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: LIST
54744: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54745: LD_ADDR_VAR 0 55
54749: PUSH
54750: LD_INT 3
54752: PUSH
54753: LD_INT 2
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 3
54762: PUSH
54763: LD_INT 3
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 2
54772: PUSH
54773: LD_INT 3
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: LIST
54784: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54785: LD_ADDR_VAR 0 56
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: LD_INT 3
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: LD_INT 3
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 1
54812: NEG
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: LIST
54825: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54826: LD_ADDR_VAR 0 57
54830: PUSH
54831: LD_INT 2
54833: NEG
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 3
54844: NEG
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 3
54855: NEG
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: LIST
54869: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54870: LD_ADDR_VAR 0 58
54874: PUSH
54875: LD_INT 2
54877: NEG
54878: PUSH
54879: LD_INT 3
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 3
54889: NEG
54890: PUSH
54891: LD_INT 2
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 3
54901: NEG
54902: PUSH
54903: LD_INT 3
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: LIST
54915: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54916: LD_ADDR_VAR 0 59
54920: PUSH
54921: LD_INT 1
54923: NEG
54924: PUSH
54925: LD_INT 2
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: PUSH
54947: LD_INT 1
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: LIST
54959: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54960: LD_ADDR_VAR 0 60
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 2
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 2
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: LIST
55000: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55001: LD_ADDR_VAR 0 61
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 2
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: LD_INT 2
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: LIST
55040: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55041: LD_ADDR_VAR 0 62
55045: PUSH
55046: LD_INT 1
55048: PUSH
55049: LD_INT 2
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: LD_INT 2
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: LD_INT 1
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: LIST
55081: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55082: LD_ADDR_VAR 0 63
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 2
55100: NEG
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 2
55111: NEG
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: LIST
55125: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55126: LD_ADDR_VAR 0 64
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 2
55145: NEG
55146: PUSH
55147: LD_INT 1
55149: NEG
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 2
55157: NEG
55158: PUSH
55159: LD_INT 2
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: LIST
55171: ST_TO_ADDR
// end ; 2 :
55172: GO 58438
55174: LD_INT 2
55176: DOUBLE
55177: EQUAL
55178: IFTRUE 55182
55180: GO 58437
55182: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55183: LD_ADDR_VAR 0 29
55187: PUSH
55188: LD_INT 4
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 4
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 5
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 5
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 4
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 3
55241: PUSH
55242: LD_INT 0
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 3
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 3
55262: PUSH
55263: LD_INT 2
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 5
55273: PUSH
55274: LD_INT 2
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 3
55283: PUSH
55284: LD_INT 3
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 3
55293: PUSH
55294: LD_INT 2
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 4
55303: PUSH
55304: LD_INT 3
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 4
55313: PUSH
55314: LD_INT 4
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 3
55323: PUSH
55324: LD_INT 4
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 2
55333: PUSH
55334: LD_INT 3
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: LD_INT 2
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 4
55353: PUSH
55354: LD_INT 2
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 2
55363: PUSH
55364: LD_INT 4
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: LD_INT 4
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: LD_INT 3
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: LD_INT 4
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: LD_INT 5
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: LD_INT 5
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: LD_INT 4
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: LD_INT 3
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 2
55445: PUSH
55446: LD_INT 5
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 2
55455: NEG
55456: PUSH
55457: LD_INT 3
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 3
55466: NEG
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 3
55477: NEG
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 2
55489: NEG
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 2
55500: NEG
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 3
55511: NEG
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 4
55522: NEG
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 4
55533: NEG
55534: PUSH
55535: LD_INT 1
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 4
55545: NEG
55546: PUSH
55547: LD_INT 2
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 2
55557: NEG
55558: PUSH
55559: LD_INT 2
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 4
55568: NEG
55569: PUSH
55570: LD_INT 4
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 4
55580: NEG
55581: PUSH
55582: LD_INT 5
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 3
55592: NEG
55593: PUSH
55594: LD_INT 4
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 3
55604: NEG
55605: PUSH
55606: LD_INT 3
55608: NEG
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 4
55616: NEG
55617: PUSH
55618: LD_INT 3
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 5
55628: NEG
55629: PUSH
55630: LD_INT 4
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 5
55640: NEG
55641: PUSH
55642: LD_INT 5
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 3
55652: NEG
55653: PUSH
55654: LD_INT 5
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 5
55664: NEG
55665: PUSH
55666: LD_INT 3
55668: NEG
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55721: LD_ADDR_VAR 0 30
55725: PUSH
55726: LD_INT 4
55728: PUSH
55729: LD_INT 4
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 4
55738: PUSH
55739: LD_INT 3
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 5
55748: PUSH
55749: LD_INT 4
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 5
55758: PUSH
55759: LD_INT 5
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 4
55768: PUSH
55769: LD_INT 5
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 3
55778: PUSH
55779: LD_INT 4
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 3
55788: PUSH
55789: LD_INT 3
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 5
55798: PUSH
55799: LD_INT 3
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 3
55808: PUSH
55809: LD_INT 5
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: LD_INT 3
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 0
55828: PUSH
55829: LD_INT 2
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 1
55838: PUSH
55839: LD_INT 3
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: LD_INT 4
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: LD_INT 4
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: LD_INT 3
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: LD_INT 2
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 2
55890: PUSH
55891: LD_INT 4
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 2
55900: NEG
55901: PUSH
55902: LD_INT 2
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 4
55911: NEG
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 4
55922: NEG
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 3
55934: NEG
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 3
55945: NEG
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 4
55956: NEG
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 5
55967: NEG
55968: PUSH
55969: LD_INT 0
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 5
55978: NEG
55979: PUSH
55980: LD_INT 1
55982: NEG
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 5
55990: NEG
55991: PUSH
55992: LD_INT 2
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 3
56002: NEG
56003: PUSH
56004: LD_INT 2
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 3
56013: NEG
56014: PUSH
56015: LD_INT 3
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 3
56025: NEG
56026: PUSH
56027: LD_INT 4
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: LD_INT 3
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 2
56049: NEG
56050: PUSH
56051: LD_INT 2
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 3
56061: NEG
56062: PUSH
56063: LD_INT 2
56065: NEG
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 4
56073: NEG
56074: PUSH
56075: LD_INT 3
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 4
56085: NEG
56086: PUSH
56087: LD_INT 4
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 2
56097: NEG
56098: PUSH
56099: LD_INT 4
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 4
56109: NEG
56110: PUSH
56111: LD_INT 2
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: LD_INT 4
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: LD_INT 5
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: LD_INT 4
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: LD_INT 3
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: LD_INT 3
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: LD_INT 4
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: LD_INT 5
56192: NEG
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: LD_INT 3
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 2
56211: NEG
56212: PUSH
56213: LD_INT 5
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56268: LD_ADDR_VAR 0 31
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: LD_INT 4
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: LD_INT 3
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: LD_INT 4
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 1
56305: PUSH
56306: LD_INT 5
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: LD_INT 5
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: LD_INT 4
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: LD_INT 3
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 2
56347: PUSH
56348: LD_INT 5
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 2
56357: NEG
56358: PUSH
56359: LD_INT 3
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 3
56368: NEG
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 3
56379: NEG
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 2
56391: NEG
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 2
56402: NEG
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 3
56413: NEG
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 4
56424: NEG
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 4
56435: NEG
56436: PUSH
56437: LD_INT 1
56439: NEG
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 4
56447: NEG
56448: PUSH
56449: LD_INT 2
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 2
56459: NEG
56460: PUSH
56461: LD_INT 2
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 4
56470: NEG
56471: PUSH
56472: LD_INT 4
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 4
56482: NEG
56483: PUSH
56484: LD_INT 5
56486: NEG
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 3
56494: NEG
56495: PUSH
56496: LD_INT 4
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 3
56506: NEG
56507: PUSH
56508: LD_INT 3
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 4
56518: NEG
56519: PUSH
56520: LD_INT 3
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 5
56530: NEG
56531: PUSH
56532: LD_INT 4
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 5
56542: NEG
56543: PUSH
56544: LD_INT 5
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 3
56554: NEG
56555: PUSH
56556: LD_INT 5
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 5
56566: NEG
56567: PUSH
56568: LD_INT 3
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: LD_INT 3
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: LD_INT 4
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: LD_INT 3
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: LD_INT 2
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: NEG
56634: PUSH
56635: LD_INT 3
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: LD_INT 4
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 2
56657: PUSH
56658: LD_INT 2
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 2
56668: NEG
56669: PUSH
56670: LD_INT 4
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 4
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 4
56690: PUSH
56691: LD_INT 1
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 5
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 5
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 4
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 3
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 3
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 3
56752: PUSH
56753: LD_INT 2
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 5
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56818: LD_ADDR_VAR 0 32
56822: PUSH
56823: LD_INT 4
56825: NEG
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 4
56836: NEG
56837: PUSH
56838: LD_INT 1
56840: NEG
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 3
56848: NEG
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 3
56859: NEG
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 4
56870: NEG
56871: PUSH
56872: LD_INT 1
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 5
56881: NEG
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 5
56892: NEG
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 5
56904: NEG
56905: PUSH
56906: LD_INT 2
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 3
56916: NEG
56917: PUSH
56918: LD_INT 2
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 3
56927: NEG
56928: PUSH
56929: LD_INT 3
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 3
56939: NEG
56940: PUSH
56941: LD_INT 4
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 2
56951: NEG
56952: PUSH
56953: LD_INT 3
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 2
56963: NEG
56964: PUSH
56965: LD_INT 2
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 3
56975: NEG
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 4
56987: NEG
56988: PUSH
56989: LD_INT 3
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 4
56999: NEG
57000: PUSH
57001: LD_INT 4
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 2
57011: NEG
57012: PUSH
57013: LD_INT 4
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 4
57023: NEG
57024: PUSH
57025: LD_INT 2
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: LD_INT 4
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: LD_INT 5
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: LD_INT 4
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 1
57068: PUSH
57069: LD_INT 3
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: LD_INT 3
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: NEG
57091: PUSH
57092: LD_INT 4
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: LD_INT 5
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 2
57114: PUSH
57115: LD_INT 3
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 2
57125: NEG
57126: PUSH
57127: LD_INT 5
57129: NEG
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 3
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 3
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 4
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 4
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 3
57178: PUSH
57179: LD_INT 1
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 2
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 2
57198: PUSH
57199: LD_INT 1
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 2
57209: PUSH
57210: LD_INT 2
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 4
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 4
57230: PUSH
57231: LD_INT 4
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 4
57240: PUSH
57241: LD_INT 3
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 5
57250: PUSH
57251: LD_INT 4
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 5
57260: PUSH
57261: LD_INT 5
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 4
57270: PUSH
57271: LD_INT 5
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 3
57280: PUSH
57281: LD_INT 4
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 3
57290: PUSH
57291: LD_INT 3
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 5
57300: PUSH
57301: LD_INT 3
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 3
57310: PUSH
57311: LD_INT 5
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57365: LD_ADDR_VAR 0 33
57369: PUSH
57370: LD_INT 4
57372: NEG
57373: PUSH
57374: LD_INT 4
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 4
57384: NEG
57385: PUSH
57386: LD_INT 5
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 3
57396: NEG
57397: PUSH
57398: LD_INT 4
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 3
57408: NEG
57409: PUSH
57410: LD_INT 3
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 4
57420: NEG
57421: PUSH
57422: LD_INT 3
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 5
57432: NEG
57433: PUSH
57434: LD_INT 4
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 5
57444: NEG
57445: PUSH
57446: LD_INT 5
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 3
57456: NEG
57457: PUSH
57458: LD_INT 5
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 5
57468: NEG
57469: PUSH
57470: LD_INT 3
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: LD_INT 3
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: LD_INT 4
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 1
57502: PUSH
57503: LD_INT 3
57505: NEG
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 1
57513: PUSH
57514: LD_INT 2
57516: NEG
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: LD_INT 2
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 1
57535: NEG
57536: PUSH
57537: LD_INT 3
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: LD_INT 4
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 2
57559: PUSH
57560: LD_INT 2
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 2
57570: NEG
57571: PUSH
57572: LD_INT 4
57574: NEG
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 4
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 4
57592: PUSH
57593: LD_INT 1
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 5
57603: PUSH
57604: LD_INT 0
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 5
57613: PUSH
57614: LD_INT 1
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 4
57623: PUSH
57624: LD_INT 1
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 3
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 3
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 3
57654: PUSH
57655: LD_INT 2
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 5
57665: PUSH
57666: LD_INT 2
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 3
57675: PUSH
57676: LD_INT 3
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 3
57685: PUSH
57686: LD_INT 2
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 4
57695: PUSH
57696: LD_INT 3
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 4
57705: PUSH
57706: LD_INT 4
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 3
57715: PUSH
57716: LD_INT 4
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 2
57725: PUSH
57726: LD_INT 3
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: LD_INT 2
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 4
57745: PUSH
57746: LD_INT 2
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: LD_INT 4
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: LD_INT 4
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: LD_INT 3
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: LD_INT 4
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 1
57795: PUSH
57796: LD_INT 5
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: LD_INT 5
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: LD_INT 4
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 1
57826: NEG
57827: PUSH
57828: LD_INT 3
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 2
57837: PUSH
57838: LD_INT 5
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 2
57847: NEG
57848: PUSH
57849: LD_INT 3
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57903: LD_ADDR_VAR 0 34
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: LD_INT 4
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: LD_INT 5
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: LD_INT 4
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 1
57943: PUSH
57944: LD_INT 3
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: LD_INT 3
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: LD_INT 4
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: LD_INT 5
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 2
57989: PUSH
57990: LD_INT 3
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 2
58000: NEG
58001: PUSH
58002: LD_INT 5
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 3
58012: PUSH
58013: LD_INT 0
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 3
58022: PUSH
58023: LD_INT 1
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 4
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 4
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 3
58053: PUSH
58054: LD_INT 1
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 2
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 2
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 2
58084: PUSH
58085: LD_INT 2
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 4
58095: PUSH
58096: LD_INT 2
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 4
58105: PUSH
58106: LD_INT 4
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 4
58115: PUSH
58116: LD_INT 3
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 5
58125: PUSH
58126: LD_INT 4
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 5
58135: PUSH
58136: LD_INT 5
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 4
58145: PUSH
58146: LD_INT 5
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 3
58155: PUSH
58156: LD_INT 4
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 3
58165: PUSH
58166: LD_INT 3
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 5
58175: PUSH
58176: LD_INT 3
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 3
58185: PUSH
58186: LD_INT 5
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: LD_INT 3
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: LD_INT 2
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 1
58215: PUSH
58216: LD_INT 3
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: PUSH
58226: LD_INT 4
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: LD_INT 4
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: LD_INT 3
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: LD_INT 2
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 2
58267: PUSH
58268: LD_INT 4
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 2
58277: NEG
58278: PUSH
58279: LD_INT 2
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 4
58288: NEG
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 4
58299: NEG
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 3
58311: NEG
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 3
58322: NEG
58323: PUSH
58324: LD_INT 1
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 4
58333: NEG
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 5
58344: NEG
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 5
58355: NEG
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 5
58367: NEG
58368: PUSH
58369: LD_INT 2
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 3
58379: NEG
58380: PUSH
58381: LD_INT 2
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: ST_TO_ADDR
// end ; end ;
58435: GO 58438
58437: POP
// case btype of b_depot , b_warehouse :
58438: LD_VAR 0 1
58442: PUSH
58443: LD_INT 0
58445: DOUBLE
58446: EQUAL
58447: IFTRUE 58457
58449: LD_INT 1
58451: DOUBLE
58452: EQUAL
58453: IFTRUE 58457
58455: GO 58658
58457: POP
// case nation of nation_american :
58458: LD_VAR 0 5
58462: PUSH
58463: LD_INT 1
58465: DOUBLE
58466: EQUAL
58467: IFTRUE 58471
58469: GO 58527
58471: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58472: LD_ADDR_VAR 0 9
58476: PUSH
58477: LD_VAR 0 11
58481: PUSH
58482: LD_VAR 0 12
58486: PUSH
58487: LD_VAR 0 13
58491: PUSH
58492: LD_VAR 0 14
58496: PUSH
58497: LD_VAR 0 15
58501: PUSH
58502: LD_VAR 0 16
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: PUSH
58515: LD_VAR 0 4
58519: PUSH
58520: LD_INT 1
58522: PLUS
58523: ARRAY
58524: ST_TO_ADDR
58525: GO 58656
58527: LD_INT 2
58529: DOUBLE
58530: EQUAL
58531: IFTRUE 58535
58533: GO 58591
58535: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58536: LD_ADDR_VAR 0 9
58540: PUSH
58541: LD_VAR 0 17
58545: PUSH
58546: LD_VAR 0 18
58550: PUSH
58551: LD_VAR 0 19
58555: PUSH
58556: LD_VAR 0 20
58560: PUSH
58561: LD_VAR 0 21
58565: PUSH
58566: LD_VAR 0 22
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: PUSH
58579: LD_VAR 0 4
58583: PUSH
58584: LD_INT 1
58586: PLUS
58587: ARRAY
58588: ST_TO_ADDR
58589: GO 58656
58591: LD_INT 3
58593: DOUBLE
58594: EQUAL
58595: IFTRUE 58599
58597: GO 58655
58599: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58600: LD_ADDR_VAR 0 9
58604: PUSH
58605: LD_VAR 0 23
58609: PUSH
58610: LD_VAR 0 24
58614: PUSH
58615: LD_VAR 0 25
58619: PUSH
58620: LD_VAR 0 26
58624: PUSH
58625: LD_VAR 0 27
58629: PUSH
58630: LD_VAR 0 28
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: PUSH
58643: LD_VAR 0 4
58647: PUSH
58648: LD_INT 1
58650: PLUS
58651: ARRAY
58652: ST_TO_ADDR
58653: GO 58656
58655: POP
58656: GO 59211
58658: LD_INT 2
58660: DOUBLE
58661: EQUAL
58662: IFTRUE 58672
58664: LD_INT 3
58666: DOUBLE
58667: EQUAL
58668: IFTRUE 58672
58670: GO 58728
58672: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58673: LD_ADDR_VAR 0 9
58677: PUSH
58678: LD_VAR 0 29
58682: PUSH
58683: LD_VAR 0 30
58687: PUSH
58688: LD_VAR 0 31
58692: PUSH
58693: LD_VAR 0 32
58697: PUSH
58698: LD_VAR 0 33
58702: PUSH
58703: LD_VAR 0 34
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: PUSH
58716: LD_VAR 0 4
58720: PUSH
58721: LD_INT 1
58723: PLUS
58724: ARRAY
58725: ST_TO_ADDR
58726: GO 59211
58728: LD_INT 16
58730: DOUBLE
58731: EQUAL
58732: IFTRUE 58790
58734: LD_INT 17
58736: DOUBLE
58737: EQUAL
58738: IFTRUE 58790
58740: LD_INT 18
58742: DOUBLE
58743: EQUAL
58744: IFTRUE 58790
58746: LD_INT 19
58748: DOUBLE
58749: EQUAL
58750: IFTRUE 58790
58752: LD_INT 22
58754: DOUBLE
58755: EQUAL
58756: IFTRUE 58790
58758: LD_INT 20
58760: DOUBLE
58761: EQUAL
58762: IFTRUE 58790
58764: LD_INT 21
58766: DOUBLE
58767: EQUAL
58768: IFTRUE 58790
58770: LD_INT 23
58772: DOUBLE
58773: EQUAL
58774: IFTRUE 58790
58776: LD_INT 24
58778: DOUBLE
58779: EQUAL
58780: IFTRUE 58790
58782: LD_INT 25
58784: DOUBLE
58785: EQUAL
58786: IFTRUE 58790
58788: GO 58846
58790: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58791: LD_ADDR_VAR 0 9
58795: PUSH
58796: LD_VAR 0 35
58800: PUSH
58801: LD_VAR 0 36
58805: PUSH
58806: LD_VAR 0 37
58810: PUSH
58811: LD_VAR 0 38
58815: PUSH
58816: LD_VAR 0 39
58820: PUSH
58821: LD_VAR 0 40
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: PUSH
58834: LD_VAR 0 4
58838: PUSH
58839: LD_INT 1
58841: PLUS
58842: ARRAY
58843: ST_TO_ADDR
58844: GO 59211
58846: LD_INT 6
58848: DOUBLE
58849: EQUAL
58850: IFTRUE 58902
58852: LD_INT 7
58854: DOUBLE
58855: EQUAL
58856: IFTRUE 58902
58858: LD_INT 8
58860: DOUBLE
58861: EQUAL
58862: IFTRUE 58902
58864: LD_INT 13
58866: DOUBLE
58867: EQUAL
58868: IFTRUE 58902
58870: LD_INT 12
58872: DOUBLE
58873: EQUAL
58874: IFTRUE 58902
58876: LD_INT 15
58878: DOUBLE
58879: EQUAL
58880: IFTRUE 58902
58882: LD_INT 11
58884: DOUBLE
58885: EQUAL
58886: IFTRUE 58902
58888: LD_INT 14
58890: DOUBLE
58891: EQUAL
58892: IFTRUE 58902
58894: LD_INT 10
58896: DOUBLE
58897: EQUAL
58898: IFTRUE 58902
58900: GO 58958
58902: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58903: LD_ADDR_VAR 0 9
58907: PUSH
58908: LD_VAR 0 41
58912: PUSH
58913: LD_VAR 0 42
58917: PUSH
58918: LD_VAR 0 43
58922: PUSH
58923: LD_VAR 0 44
58927: PUSH
58928: LD_VAR 0 45
58932: PUSH
58933: LD_VAR 0 46
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: PUSH
58946: LD_VAR 0 4
58950: PUSH
58951: LD_INT 1
58953: PLUS
58954: ARRAY
58955: ST_TO_ADDR
58956: GO 59211
58958: LD_INT 36
58960: DOUBLE
58961: EQUAL
58962: IFTRUE 58966
58964: GO 59022
58966: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58967: LD_ADDR_VAR 0 9
58971: PUSH
58972: LD_VAR 0 47
58976: PUSH
58977: LD_VAR 0 48
58981: PUSH
58982: LD_VAR 0 49
58986: PUSH
58987: LD_VAR 0 50
58991: PUSH
58992: LD_VAR 0 51
58996: PUSH
58997: LD_VAR 0 52
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: PUSH
59010: LD_VAR 0 4
59014: PUSH
59015: LD_INT 1
59017: PLUS
59018: ARRAY
59019: ST_TO_ADDR
59020: GO 59211
59022: LD_INT 4
59024: DOUBLE
59025: EQUAL
59026: IFTRUE 59048
59028: LD_INT 5
59030: DOUBLE
59031: EQUAL
59032: IFTRUE 59048
59034: LD_INT 34
59036: DOUBLE
59037: EQUAL
59038: IFTRUE 59048
59040: LD_INT 37
59042: DOUBLE
59043: EQUAL
59044: IFTRUE 59048
59046: GO 59104
59048: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59049: LD_ADDR_VAR 0 9
59053: PUSH
59054: LD_VAR 0 53
59058: PUSH
59059: LD_VAR 0 54
59063: PUSH
59064: LD_VAR 0 55
59068: PUSH
59069: LD_VAR 0 56
59073: PUSH
59074: LD_VAR 0 57
59078: PUSH
59079: LD_VAR 0 58
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: PUSH
59092: LD_VAR 0 4
59096: PUSH
59097: LD_INT 1
59099: PLUS
59100: ARRAY
59101: ST_TO_ADDR
59102: GO 59211
59104: LD_INT 31
59106: DOUBLE
59107: EQUAL
59108: IFTRUE 59154
59110: LD_INT 32
59112: DOUBLE
59113: EQUAL
59114: IFTRUE 59154
59116: LD_INT 33
59118: DOUBLE
59119: EQUAL
59120: IFTRUE 59154
59122: LD_INT 27
59124: DOUBLE
59125: EQUAL
59126: IFTRUE 59154
59128: LD_INT 26
59130: DOUBLE
59131: EQUAL
59132: IFTRUE 59154
59134: LD_INT 28
59136: DOUBLE
59137: EQUAL
59138: IFTRUE 59154
59140: LD_INT 29
59142: DOUBLE
59143: EQUAL
59144: IFTRUE 59154
59146: LD_INT 30
59148: DOUBLE
59149: EQUAL
59150: IFTRUE 59154
59152: GO 59210
59154: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59155: LD_ADDR_VAR 0 9
59159: PUSH
59160: LD_VAR 0 59
59164: PUSH
59165: LD_VAR 0 60
59169: PUSH
59170: LD_VAR 0 61
59174: PUSH
59175: LD_VAR 0 62
59179: PUSH
59180: LD_VAR 0 63
59184: PUSH
59185: LD_VAR 0 64
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: PUSH
59198: LD_VAR 0 4
59202: PUSH
59203: LD_INT 1
59205: PLUS
59206: ARRAY
59207: ST_TO_ADDR
59208: GO 59211
59210: POP
// temp_list2 = [ ] ;
59211: LD_ADDR_VAR 0 10
59215: PUSH
59216: EMPTY
59217: ST_TO_ADDR
// for i in temp_list do
59218: LD_ADDR_VAR 0 8
59222: PUSH
59223: LD_VAR 0 9
59227: PUSH
59228: FOR_IN
59229: IFFALSE 59281
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59231: LD_ADDR_VAR 0 10
59235: PUSH
59236: LD_VAR 0 10
59240: PUSH
59241: LD_VAR 0 8
59245: PUSH
59246: LD_INT 1
59248: ARRAY
59249: PUSH
59250: LD_VAR 0 2
59254: PLUS
59255: PUSH
59256: LD_VAR 0 8
59260: PUSH
59261: LD_INT 2
59263: ARRAY
59264: PUSH
59265: LD_VAR 0 3
59269: PLUS
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: EMPTY
59276: LIST
59277: ADD
59278: ST_TO_ADDR
59279: GO 59228
59281: POP
59282: POP
// result = temp_list2 ;
59283: LD_ADDR_VAR 0 7
59287: PUSH
59288: LD_VAR 0 10
59292: ST_TO_ADDR
// end ;
59293: LD_VAR 0 7
59297: RET
// export function EnemyInRange ( unit , dist ) ; begin
59298: LD_INT 0
59300: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59301: LD_ADDR_VAR 0 3
59305: PUSH
59306: LD_VAR 0 1
59310: PPUSH
59311: CALL_OW 255
59315: PPUSH
59316: LD_VAR 0 1
59320: PPUSH
59321: CALL_OW 250
59325: PPUSH
59326: LD_VAR 0 1
59330: PPUSH
59331: CALL_OW 251
59335: PPUSH
59336: LD_VAR 0 2
59340: PPUSH
59341: CALL 32555 0 4
59345: PUSH
59346: LD_INT 4
59348: ARRAY
59349: ST_TO_ADDR
// end ;
59350: LD_VAR 0 3
59354: RET
// export function PlayerSeeMe ( unit ) ; begin
59355: LD_INT 0
59357: PPUSH
// result := See ( your_side , unit ) ;
59358: LD_ADDR_VAR 0 2
59362: PUSH
59363: LD_OWVAR 2
59367: PPUSH
59368: LD_VAR 0 1
59372: PPUSH
59373: CALL_OW 292
59377: ST_TO_ADDR
// end ;
59378: LD_VAR 0 2
59382: RET
// export function ReverseDir ( unit ) ; begin
59383: LD_INT 0
59385: PPUSH
// if not unit then
59386: LD_VAR 0 1
59390: NOT
59391: IFFALSE 59395
// exit ;
59393: GO 59418
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59395: LD_ADDR_VAR 0 2
59399: PUSH
59400: LD_VAR 0 1
59404: PPUSH
59405: CALL_OW 254
59409: PUSH
59410: LD_INT 3
59412: PLUS
59413: PUSH
59414: LD_INT 6
59416: MOD
59417: ST_TO_ADDR
// end ;
59418: LD_VAR 0 2
59422: RET
// export function ReverseArray ( array ) ; var i ; begin
59423: LD_INT 0
59425: PPUSH
59426: PPUSH
// if not array then
59427: LD_VAR 0 1
59431: NOT
59432: IFFALSE 59436
// exit ;
59434: GO 59491
// result := [ ] ;
59436: LD_ADDR_VAR 0 2
59440: PUSH
59441: EMPTY
59442: ST_TO_ADDR
// for i := array downto 1 do
59443: LD_ADDR_VAR 0 3
59447: PUSH
59448: DOUBLE
59449: LD_VAR 0 1
59453: INC
59454: ST_TO_ADDR
59455: LD_INT 1
59457: PUSH
59458: FOR_DOWNTO
59459: IFFALSE 59489
// result := Join ( result , array [ i ] ) ;
59461: LD_ADDR_VAR 0 2
59465: PUSH
59466: LD_VAR 0 2
59470: PPUSH
59471: LD_VAR 0 1
59475: PUSH
59476: LD_VAR 0 3
59480: ARRAY
59481: PPUSH
59482: CALL 64343 0 2
59486: ST_TO_ADDR
59487: GO 59458
59489: POP
59490: POP
// end ;
59491: LD_VAR 0 2
59495: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59496: LD_INT 0
59498: PPUSH
59499: PPUSH
59500: PPUSH
59501: PPUSH
59502: PPUSH
59503: PPUSH
// if not unit or not hexes then
59504: LD_VAR 0 1
59508: NOT
59509: IFTRUE 59518
59511: PUSH
59512: LD_VAR 0 2
59516: NOT
59517: OR
59518: IFFALSE 59522
// exit ;
59520: GO 59645
// dist := 9999 ;
59522: LD_ADDR_VAR 0 5
59526: PUSH
59527: LD_INT 9999
59529: ST_TO_ADDR
// for i = 1 to hexes do
59530: LD_ADDR_VAR 0 4
59534: PUSH
59535: DOUBLE
59536: LD_INT 1
59538: DEC
59539: ST_TO_ADDR
59540: LD_VAR 0 2
59544: PUSH
59545: FOR_TO
59546: IFFALSE 59633
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59548: LD_ADDR_VAR 0 6
59552: PUSH
59553: LD_VAR 0 1
59557: PPUSH
59558: LD_VAR 0 2
59562: PUSH
59563: LD_VAR 0 4
59567: ARRAY
59568: PUSH
59569: LD_INT 1
59571: ARRAY
59572: PPUSH
59573: LD_VAR 0 2
59577: PUSH
59578: LD_VAR 0 4
59582: ARRAY
59583: PUSH
59584: LD_INT 2
59586: ARRAY
59587: PPUSH
59588: CALL_OW 297
59592: ST_TO_ADDR
// if tdist < dist then
59593: LD_VAR 0 6
59597: PUSH
59598: LD_VAR 0 5
59602: LESS
59603: IFFALSE 59631
// begin hex := hexes [ i ] ;
59605: LD_ADDR_VAR 0 8
59609: PUSH
59610: LD_VAR 0 2
59614: PUSH
59615: LD_VAR 0 4
59619: ARRAY
59620: ST_TO_ADDR
// dist := tdist ;
59621: LD_ADDR_VAR 0 5
59625: PUSH
59626: LD_VAR 0 6
59630: ST_TO_ADDR
// end ; end ;
59631: GO 59545
59633: POP
59634: POP
// result := hex ;
59635: LD_ADDR_VAR 0 3
59639: PUSH
59640: LD_VAR 0 8
59644: ST_TO_ADDR
// end ;
59645: LD_VAR 0 3
59649: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59650: LD_INT 0
59652: PPUSH
59653: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59654: LD_VAR 0 1
59658: NOT
59659: IFTRUE 59698
59661: PUSH
59662: LD_VAR 0 1
59666: PUSH
59667: LD_INT 21
59669: PUSH
59670: LD_INT 2
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 23
59679: PUSH
59680: LD_INT 2
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PPUSH
59691: CALL_OW 69
59695: IN
59696: NOT
59697: OR
59698: IFFALSE 59702
// exit ;
59700: GO 59749
// for i = 1 to 3 do
59702: LD_ADDR_VAR 0 3
59706: PUSH
59707: DOUBLE
59708: LD_INT 1
59710: DEC
59711: ST_TO_ADDR
59712: LD_INT 3
59714: PUSH
59715: FOR_TO
59716: IFFALSE 59747
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59718: LD_VAR 0 1
59722: PPUSH
59723: CALL_OW 250
59727: PPUSH
59728: LD_VAR 0 1
59732: PPUSH
59733: CALL_OW 251
59737: PPUSH
59738: LD_INT 1
59740: PPUSH
59741: CALL_OW 453
59745: GO 59715
59747: POP
59748: POP
// end ;
59749: LD_VAR 0 2
59753: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59754: LD_INT 0
59756: PPUSH
59757: PPUSH
59758: PPUSH
59759: PPUSH
59760: PPUSH
59761: PPUSH
// if not unit or not enemy_unit then
59762: LD_VAR 0 1
59766: NOT
59767: IFTRUE 59776
59769: PUSH
59770: LD_VAR 0 2
59774: NOT
59775: OR
59776: IFFALSE 59780
// exit ;
59778: GO 60261
// if GetLives ( i ) < 250 then
59780: LD_VAR 0 4
59784: PPUSH
59785: CALL_OW 256
59789: PUSH
59790: LD_INT 250
59792: LESS
59793: IFFALSE 59806
// begin ComAutodestruct ( i ) ;
59795: LD_VAR 0 4
59799: PPUSH
59800: CALL 59650 0 1
// exit ;
59804: GO 60261
// end ; x := GetX ( enemy_unit ) ;
59806: LD_ADDR_VAR 0 7
59810: PUSH
59811: LD_VAR 0 2
59815: PPUSH
59816: CALL_OW 250
59820: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59821: LD_ADDR_VAR 0 8
59825: PUSH
59826: LD_VAR 0 2
59830: PPUSH
59831: CALL_OW 251
59835: ST_TO_ADDR
// if not x or not y then
59836: LD_VAR 0 7
59840: NOT
59841: IFTRUE 59850
59843: PUSH
59844: LD_VAR 0 8
59848: NOT
59849: OR
59850: IFFALSE 59854
// exit ;
59852: GO 60261
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59854: LD_ADDR_VAR 0 6
59858: PUSH
59859: LD_VAR 0 7
59863: PPUSH
59864: LD_INT 0
59866: PPUSH
59867: LD_INT 4
59869: PPUSH
59870: CALL_OW 272
59874: PUSH
59875: LD_VAR 0 8
59879: PPUSH
59880: LD_INT 0
59882: PPUSH
59883: LD_INT 4
59885: PPUSH
59886: CALL_OW 273
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_VAR 0 7
59899: PPUSH
59900: LD_INT 1
59902: PPUSH
59903: LD_INT 4
59905: PPUSH
59906: CALL_OW 272
59910: PUSH
59911: LD_VAR 0 8
59915: PPUSH
59916: LD_INT 1
59918: PPUSH
59919: LD_INT 4
59921: PPUSH
59922: CALL_OW 273
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_VAR 0 7
59935: PPUSH
59936: LD_INT 2
59938: PPUSH
59939: LD_INT 4
59941: PPUSH
59942: CALL_OW 272
59946: PUSH
59947: LD_VAR 0 8
59951: PPUSH
59952: LD_INT 2
59954: PPUSH
59955: LD_INT 4
59957: PPUSH
59958: CALL_OW 273
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_VAR 0 7
59971: PPUSH
59972: LD_INT 3
59974: PPUSH
59975: LD_INT 4
59977: PPUSH
59978: CALL_OW 272
59982: PUSH
59983: LD_VAR 0 8
59987: PPUSH
59988: LD_INT 3
59990: PPUSH
59991: LD_INT 4
59993: PPUSH
59994: CALL_OW 273
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_VAR 0 7
60007: PPUSH
60008: LD_INT 4
60010: PPUSH
60011: LD_INT 4
60013: PPUSH
60014: CALL_OW 272
60018: PUSH
60019: LD_VAR 0 8
60023: PPUSH
60024: LD_INT 4
60026: PPUSH
60027: LD_INT 4
60029: PPUSH
60030: CALL_OW 273
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_VAR 0 7
60043: PPUSH
60044: LD_INT 5
60046: PPUSH
60047: LD_INT 4
60049: PPUSH
60050: CALL_OW 272
60054: PUSH
60055: LD_VAR 0 8
60059: PPUSH
60060: LD_INT 5
60062: PPUSH
60063: LD_INT 4
60065: PPUSH
60066: CALL_OW 273
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: ST_TO_ADDR
// for i = tmp downto 1 do
60083: LD_ADDR_VAR 0 4
60087: PUSH
60088: DOUBLE
60089: LD_VAR 0 6
60093: INC
60094: ST_TO_ADDR
60095: LD_INT 1
60097: PUSH
60098: FOR_DOWNTO
60099: IFFALSE 60202
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60101: LD_VAR 0 6
60105: PUSH
60106: LD_VAR 0 4
60110: ARRAY
60111: PUSH
60112: LD_INT 1
60114: ARRAY
60115: PPUSH
60116: LD_VAR 0 6
60120: PUSH
60121: LD_VAR 0 4
60125: ARRAY
60126: PUSH
60127: LD_INT 2
60129: ARRAY
60130: PPUSH
60131: CALL_OW 488
60135: NOT
60136: IFTRUE 60178
60138: PUSH
60139: LD_VAR 0 6
60143: PUSH
60144: LD_VAR 0 4
60148: ARRAY
60149: PUSH
60150: LD_INT 1
60152: ARRAY
60153: PPUSH
60154: LD_VAR 0 6
60158: PUSH
60159: LD_VAR 0 4
60163: ARRAY
60164: PUSH
60165: LD_INT 2
60167: ARRAY
60168: PPUSH
60169: CALL_OW 428
60173: PUSH
60174: LD_INT 0
60176: NONEQUAL
60177: OR
60178: IFFALSE 60200
// tmp := Delete ( tmp , i ) ;
60180: LD_ADDR_VAR 0 6
60184: PUSH
60185: LD_VAR 0 6
60189: PPUSH
60190: LD_VAR 0 4
60194: PPUSH
60195: CALL_OW 3
60199: ST_TO_ADDR
60200: GO 60098
60202: POP
60203: POP
// j := GetClosestHex ( unit , tmp ) ;
60204: LD_ADDR_VAR 0 5
60208: PUSH
60209: LD_VAR 0 1
60213: PPUSH
60214: LD_VAR 0 6
60218: PPUSH
60219: CALL 59496 0 2
60223: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60224: LD_VAR 0 1
60228: PPUSH
60229: LD_VAR 0 5
60233: PUSH
60234: LD_INT 1
60236: ARRAY
60237: PPUSH
60238: LD_VAR 0 5
60242: PUSH
60243: LD_INT 2
60245: ARRAY
60246: PPUSH
60247: CALL_OW 111
// result := j ;
60251: LD_ADDR_VAR 0 3
60255: PUSH
60256: LD_VAR 0 5
60260: ST_TO_ADDR
// end ;
60261: LD_VAR 0 3
60265: RET
// export function PrepareApemanSoldier ( ) ; begin
60266: LD_INT 0
60268: PPUSH
// uc_nation := 0 ;
60269: LD_ADDR_OWVAR 21
60273: PUSH
60274: LD_INT 0
60276: ST_TO_ADDR
// hc_sex := sex_male ;
60277: LD_ADDR_OWVAR 27
60281: PUSH
60282: LD_INT 1
60284: ST_TO_ADDR
// hc_name :=  ;
60285: LD_ADDR_OWVAR 26
60289: PUSH
60290: LD_STRING 
60292: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60293: LD_ADDR_OWVAR 28
60297: PUSH
60298: LD_INT 15
60300: ST_TO_ADDR
// hc_gallery :=  ;
60301: LD_ADDR_OWVAR 33
60305: PUSH
60306: LD_STRING 
60308: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60309: LD_ADDR_OWVAR 31
60313: PUSH
60314: LD_INT 0
60316: PPUSH
60317: LD_INT 3
60319: PPUSH
60320: CALL_OW 12
60324: PUSH
60325: LD_INT 0
60327: PPUSH
60328: LD_INT 3
60330: PPUSH
60331: CALL_OW 12
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
60348: LD_ADDR_OWVAR 29
60352: PUSH
60353: LD_INT 10
60355: PUSH
60356: LD_INT 12
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: ST_TO_ADDR
// end ;
60363: LD_VAR 0 1
60367: RET
// export function PrepareApemanEngineer ( ) ; begin
60368: LD_INT 0
60370: PPUSH
// uc_nation := 0 ;
60371: LD_ADDR_OWVAR 21
60375: PUSH
60376: LD_INT 0
60378: ST_TO_ADDR
// hc_sex := sex_male ;
60379: LD_ADDR_OWVAR 27
60383: PUSH
60384: LD_INT 1
60386: ST_TO_ADDR
// hc_name :=  ;
60387: LD_ADDR_OWVAR 26
60391: PUSH
60392: LD_STRING 
60394: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60395: LD_ADDR_OWVAR 28
60399: PUSH
60400: LD_INT 16
60402: ST_TO_ADDR
// hc_gallery :=  ;
60403: LD_ADDR_OWVAR 33
60407: PUSH
60408: LD_STRING 
60410: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60411: LD_ADDR_OWVAR 31
60415: PUSH
60416: LD_INT 0
60418: PPUSH
60419: LD_INT 3
60421: PPUSH
60422: CALL_OW 12
60426: PUSH
60427: LD_INT 0
60429: PPUSH
60430: LD_INT 3
60432: PPUSH
60433: CALL_OW 12
60437: PUSH
60438: LD_INT 0
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
60450: LD_ADDR_OWVAR 29
60454: PUSH
60455: LD_INT 10
60457: PUSH
60458: LD_INT 12
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: ST_TO_ADDR
// end ;
60465: LD_VAR 0 1
60469: RET
// export function PrepareApeman ( agressivity ) ; begin
60470: LD_INT 0
60472: PPUSH
// uc_side := 0 ;
60473: LD_ADDR_OWVAR 20
60477: PUSH
60478: LD_INT 0
60480: ST_TO_ADDR
// uc_nation := 0 ;
60481: LD_ADDR_OWVAR 21
60485: PUSH
60486: LD_INT 0
60488: ST_TO_ADDR
// hc_sex := sex_male ;
60489: LD_ADDR_OWVAR 27
60493: PUSH
60494: LD_INT 1
60496: ST_TO_ADDR
// hc_class := class_apeman ;
60497: LD_ADDR_OWVAR 28
60501: PUSH
60502: LD_INT 12
60504: ST_TO_ADDR
// hc_gallery :=  ;
60505: LD_ADDR_OWVAR 33
60509: PUSH
60510: LD_STRING 
60512: ST_TO_ADDR
// hc_name :=  ;
60513: LD_ADDR_OWVAR 26
60517: PUSH
60518: LD_STRING 
60520: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
60521: LD_ADDR_OWVAR 29
60525: PUSH
60526: LD_INT 10
60528: PUSH
60529: LD_INT 12
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: ST_TO_ADDR
// if agressivity = 0 then
60536: LD_VAR 0 1
60540: PUSH
60541: LD_INT 0
60543: EQUAL
60544: IFFALSE 60556
// hc_agressivity := 0 else
60546: LD_ADDR_OWVAR 35
60550: PUSH
60551: LD_INT 0
60553: ST_TO_ADDR
60554: GO 60577
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60556: LD_ADDR_OWVAR 35
60560: PUSH
60561: LD_VAR 0 1
60565: NEG
60566: PPUSH
60567: LD_VAR 0 1
60571: PPUSH
60572: CALL_OW 12
60576: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60577: LD_ADDR_OWVAR 31
60581: PUSH
60582: LD_INT 0
60584: PPUSH
60585: LD_INT 3
60587: PPUSH
60588: CALL_OW 12
60592: PUSH
60593: LD_INT 0
60595: PPUSH
60596: LD_INT 3
60598: PPUSH
60599: CALL_OW 12
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: ST_TO_ADDR
// end ;
60616: LD_VAR 0 2
60620: RET
// export function PrepareTiger ( agressivity ) ; begin
60621: LD_INT 0
60623: PPUSH
// uc_side := 0 ;
60624: LD_ADDR_OWVAR 20
60628: PUSH
60629: LD_INT 0
60631: ST_TO_ADDR
// uc_nation := 0 ;
60632: LD_ADDR_OWVAR 21
60636: PUSH
60637: LD_INT 0
60639: ST_TO_ADDR
// InitHc ;
60640: CALL_OW 19
// hc_class := class_tiger ;
60644: LD_ADDR_OWVAR 28
60648: PUSH
60649: LD_INT 14
60651: ST_TO_ADDR
// hc_gallery :=  ;
60652: LD_ADDR_OWVAR 33
60656: PUSH
60657: LD_STRING 
60659: ST_TO_ADDR
// hc_name :=  ;
60660: LD_ADDR_OWVAR 26
60664: PUSH
60665: LD_STRING 
60667: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60668: LD_ADDR_OWVAR 35
60672: PUSH
60673: LD_VAR 0 1
60677: NEG
60678: PPUSH
60679: LD_VAR 0 1
60683: PPUSH
60684: CALL_OW 12
60688: ST_TO_ADDR
// end ;
60689: LD_VAR 0 2
60693: RET
// export function PrepareEnchidna ( ) ; begin
60694: LD_INT 0
60696: PPUSH
// uc_side := 0 ;
60697: LD_ADDR_OWVAR 20
60701: PUSH
60702: LD_INT 0
60704: ST_TO_ADDR
// uc_nation := 0 ;
60705: LD_ADDR_OWVAR 21
60709: PUSH
60710: LD_INT 0
60712: ST_TO_ADDR
// InitHc ;
60713: CALL_OW 19
// hc_class := class_baggie ;
60717: LD_ADDR_OWVAR 28
60721: PUSH
60722: LD_INT 13
60724: ST_TO_ADDR
// hc_gallery :=  ;
60725: LD_ADDR_OWVAR 33
60729: PUSH
60730: LD_STRING 
60732: ST_TO_ADDR
// hc_name :=  ;
60733: LD_ADDR_OWVAR 26
60737: PUSH
60738: LD_STRING 
60740: ST_TO_ADDR
// end ;
60741: LD_VAR 0 1
60745: RET
// export function PrepareFrog ( ) ; begin
60746: LD_INT 0
60748: PPUSH
// uc_side := 0 ;
60749: LD_ADDR_OWVAR 20
60753: PUSH
60754: LD_INT 0
60756: ST_TO_ADDR
// uc_nation := 0 ;
60757: LD_ADDR_OWVAR 21
60761: PUSH
60762: LD_INT 0
60764: ST_TO_ADDR
// InitHc ;
60765: CALL_OW 19
// hc_class := class_frog ;
60769: LD_ADDR_OWVAR 28
60773: PUSH
60774: LD_INT 19
60776: ST_TO_ADDR
// hc_gallery :=  ;
60777: LD_ADDR_OWVAR 33
60781: PUSH
60782: LD_STRING 
60784: ST_TO_ADDR
// hc_name :=  ;
60785: LD_ADDR_OWVAR 26
60789: PUSH
60790: LD_STRING 
60792: ST_TO_ADDR
// end ;
60793: LD_VAR 0 1
60797: RET
// export function PrepareFish ( ) ; begin
60798: LD_INT 0
60800: PPUSH
// uc_side := 0 ;
60801: LD_ADDR_OWVAR 20
60805: PUSH
60806: LD_INT 0
60808: ST_TO_ADDR
// uc_nation := 0 ;
60809: LD_ADDR_OWVAR 21
60813: PUSH
60814: LD_INT 0
60816: ST_TO_ADDR
// InitHc ;
60817: CALL_OW 19
// hc_class := class_fish ;
60821: LD_ADDR_OWVAR 28
60825: PUSH
60826: LD_INT 20
60828: ST_TO_ADDR
// hc_gallery :=  ;
60829: LD_ADDR_OWVAR 33
60833: PUSH
60834: LD_STRING 
60836: ST_TO_ADDR
// hc_name :=  ;
60837: LD_ADDR_OWVAR 26
60841: PUSH
60842: LD_STRING 
60844: ST_TO_ADDR
// end ;
60845: LD_VAR 0 1
60849: RET
// export function PrepareBird ( ) ; begin
60850: LD_INT 0
60852: PPUSH
// uc_side := 0 ;
60853: LD_ADDR_OWVAR 20
60857: PUSH
60858: LD_INT 0
60860: ST_TO_ADDR
// uc_nation := 0 ;
60861: LD_ADDR_OWVAR 21
60865: PUSH
60866: LD_INT 0
60868: ST_TO_ADDR
// InitHc ;
60869: CALL_OW 19
// hc_class := class_phororhacos ;
60873: LD_ADDR_OWVAR 28
60877: PUSH
60878: LD_INT 18
60880: ST_TO_ADDR
// hc_gallery :=  ;
60881: LD_ADDR_OWVAR 33
60885: PUSH
60886: LD_STRING 
60888: ST_TO_ADDR
// hc_name :=  ;
60889: LD_ADDR_OWVAR 26
60893: PUSH
60894: LD_STRING 
60896: ST_TO_ADDR
// end ;
60897: LD_VAR 0 1
60901: RET
// export function PrepareHorse ( ) ; begin
60902: LD_INT 0
60904: PPUSH
// uc_side := 0 ;
60905: LD_ADDR_OWVAR 20
60909: PUSH
60910: LD_INT 0
60912: ST_TO_ADDR
// uc_nation := 0 ;
60913: LD_ADDR_OWVAR 21
60917: PUSH
60918: LD_INT 0
60920: ST_TO_ADDR
// InitHc ;
60921: CALL_OW 19
// hc_class := class_horse ;
60925: LD_ADDR_OWVAR 28
60929: PUSH
60930: LD_INT 21
60932: ST_TO_ADDR
// hc_gallery :=  ;
60933: LD_ADDR_OWVAR 33
60937: PUSH
60938: LD_STRING 
60940: ST_TO_ADDR
// hc_name :=  ;
60941: LD_ADDR_OWVAR 26
60945: PUSH
60946: LD_STRING 
60948: ST_TO_ADDR
// end ;
60949: LD_VAR 0 1
60953: RET
// export function PrepareMastodont ( ) ; begin
60954: LD_INT 0
60956: PPUSH
// uc_side := 0 ;
60957: LD_ADDR_OWVAR 20
60961: PUSH
60962: LD_INT 0
60964: ST_TO_ADDR
// uc_nation := 0 ;
60965: LD_ADDR_OWVAR 21
60969: PUSH
60970: LD_INT 0
60972: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60973: LD_ADDR_OWVAR 37
60977: PUSH
60978: LD_INT 31
60980: ST_TO_ADDR
// vc_control := control_rider ;
60981: LD_ADDR_OWVAR 38
60985: PUSH
60986: LD_INT 4
60988: ST_TO_ADDR
// end ;
60989: LD_VAR 0 1
60993: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60994: LD_INT 0
60996: PPUSH
60997: PPUSH
60998: PPUSH
// uc_side = 0 ;
60999: LD_ADDR_OWVAR 20
61003: PUSH
61004: LD_INT 0
61006: ST_TO_ADDR
// uc_nation = 0 ;
61007: LD_ADDR_OWVAR 21
61011: PUSH
61012: LD_INT 0
61014: ST_TO_ADDR
// InitHc_All ( ) ;
61015: CALL_OW 584
// InitVc ;
61019: CALL_OW 20
// if mastodonts then
61023: LD_VAR 0 6
61027: IFFALSE 61094
// for i = 1 to mastodonts do
61029: LD_ADDR_VAR 0 11
61033: PUSH
61034: DOUBLE
61035: LD_INT 1
61037: DEC
61038: ST_TO_ADDR
61039: LD_VAR 0 6
61043: PUSH
61044: FOR_TO
61045: IFFALSE 61092
// begin vc_chassis := 31 ;
61047: LD_ADDR_OWVAR 37
61051: PUSH
61052: LD_INT 31
61054: ST_TO_ADDR
// vc_control := control_rider ;
61055: LD_ADDR_OWVAR 38
61059: PUSH
61060: LD_INT 4
61062: ST_TO_ADDR
// animal := CreateVehicle ;
61063: LD_ADDR_VAR 0 12
61067: PUSH
61068: CALL_OW 45
61072: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61073: LD_VAR 0 12
61077: PPUSH
61078: LD_VAR 0 8
61082: PPUSH
61083: LD_INT 0
61085: PPUSH
61086: CALL 63236 0 3
// end ;
61090: GO 61044
61092: POP
61093: POP
// if horses then
61094: LD_VAR 0 5
61098: IFFALSE 61165
// for i = 1 to horses do
61100: LD_ADDR_VAR 0 11
61104: PUSH
61105: DOUBLE
61106: LD_INT 1
61108: DEC
61109: ST_TO_ADDR
61110: LD_VAR 0 5
61114: PUSH
61115: FOR_TO
61116: IFFALSE 61163
// begin hc_class := 21 ;
61118: LD_ADDR_OWVAR 28
61122: PUSH
61123: LD_INT 21
61125: ST_TO_ADDR
// hc_gallery :=  ;
61126: LD_ADDR_OWVAR 33
61130: PUSH
61131: LD_STRING 
61133: ST_TO_ADDR
// animal := CreateHuman ;
61134: LD_ADDR_VAR 0 12
61138: PUSH
61139: CALL_OW 44
61143: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61144: LD_VAR 0 12
61148: PPUSH
61149: LD_VAR 0 8
61153: PPUSH
61154: LD_INT 0
61156: PPUSH
61157: CALL 63236 0 3
// end ;
61161: GO 61115
61163: POP
61164: POP
// if birds then
61165: LD_VAR 0 1
61169: IFFALSE 61236
// for i = 1 to birds do
61171: LD_ADDR_VAR 0 11
61175: PUSH
61176: DOUBLE
61177: LD_INT 1
61179: DEC
61180: ST_TO_ADDR
61181: LD_VAR 0 1
61185: PUSH
61186: FOR_TO
61187: IFFALSE 61234
// begin hc_class := 18 ;
61189: LD_ADDR_OWVAR 28
61193: PUSH
61194: LD_INT 18
61196: ST_TO_ADDR
// hc_gallery =  ;
61197: LD_ADDR_OWVAR 33
61201: PUSH
61202: LD_STRING 
61204: ST_TO_ADDR
// animal := CreateHuman ;
61205: LD_ADDR_VAR 0 12
61209: PUSH
61210: CALL_OW 44
61214: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61215: LD_VAR 0 12
61219: PPUSH
61220: LD_VAR 0 8
61224: PPUSH
61225: LD_INT 0
61227: PPUSH
61228: CALL 63236 0 3
// end ;
61232: GO 61186
61234: POP
61235: POP
// if tigers then
61236: LD_VAR 0 2
61240: IFFALSE 61324
// for i = 1 to tigers do
61242: LD_ADDR_VAR 0 11
61246: PUSH
61247: DOUBLE
61248: LD_INT 1
61250: DEC
61251: ST_TO_ADDR
61252: LD_VAR 0 2
61256: PUSH
61257: FOR_TO
61258: IFFALSE 61322
// begin hc_class = class_tiger ;
61260: LD_ADDR_OWVAR 28
61264: PUSH
61265: LD_INT 14
61267: ST_TO_ADDR
// hc_gallery =  ;
61268: LD_ADDR_OWVAR 33
61272: PUSH
61273: LD_STRING 
61275: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61276: LD_ADDR_OWVAR 35
61280: PUSH
61281: LD_INT 7
61283: NEG
61284: PPUSH
61285: LD_INT 7
61287: PPUSH
61288: CALL_OW 12
61292: ST_TO_ADDR
// animal := CreateHuman ;
61293: LD_ADDR_VAR 0 12
61297: PUSH
61298: CALL_OW 44
61302: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61303: LD_VAR 0 12
61307: PPUSH
61308: LD_VAR 0 8
61312: PPUSH
61313: LD_INT 0
61315: PPUSH
61316: CALL 63236 0 3
// end ;
61320: GO 61257
61322: POP
61323: POP
// if apemans then
61324: LD_VAR 0 3
61328: IFFALSE 61451
// for i = 1 to apemans do
61330: LD_ADDR_VAR 0 11
61334: PUSH
61335: DOUBLE
61336: LD_INT 1
61338: DEC
61339: ST_TO_ADDR
61340: LD_VAR 0 3
61344: PUSH
61345: FOR_TO
61346: IFFALSE 61449
// begin hc_class = class_apeman ;
61348: LD_ADDR_OWVAR 28
61352: PUSH
61353: LD_INT 12
61355: ST_TO_ADDR
// hc_gallery =  ;
61356: LD_ADDR_OWVAR 33
61360: PUSH
61361: LD_STRING 
61363: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61364: LD_ADDR_OWVAR 35
61368: PUSH
61369: LD_INT 2
61371: NEG
61372: PPUSH
61373: LD_INT 2
61375: PPUSH
61376: CALL_OW 12
61380: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61381: LD_ADDR_OWVAR 31
61385: PUSH
61386: LD_INT 1
61388: PPUSH
61389: LD_INT 3
61391: PPUSH
61392: CALL_OW 12
61396: PUSH
61397: LD_INT 1
61399: PPUSH
61400: LD_INT 3
61402: PPUSH
61403: CALL_OW 12
61407: PUSH
61408: LD_INT 0
61410: PUSH
61411: LD_INT 0
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: ST_TO_ADDR
// animal := CreateHuman ;
61420: LD_ADDR_VAR 0 12
61424: PUSH
61425: CALL_OW 44
61429: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61430: LD_VAR 0 12
61434: PPUSH
61435: LD_VAR 0 8
61439: PPUSH
61440: LD_INT 0
61442: PPUSH
61443: CALL 63236 0 3
// end ;
61447: GO 61345
61449: POP
61450: POP
// if enchidnas then
61451: LD_VAR 0 4
61455: IFFALSE 61522
// for i = 1 to enchidnas do
61457: LD_ADDR_VAR 0 11
61461: PUSH
61462: DOUBLE
61463: LD_INT 1
61465: DEC
61466: ST_TO_ADDR
61467: LD_VAR 0 4
61471: PUSH
61472: FOR_TO
61473: IFFALSE 61520
// begin hc_class = 13 ;
61475: LD_ADDR_OWVAR 28
61479: PUSH
61480: LD_INT 13
61482: ST_TO_ADDR
// hc_gallery =  ;
61483: LD_ADDR_OWVAR 33
61487: PUSH
61488: LD_STRING 
61490: ST_TO_ADDR
// animal := CreateHuman ;
61491: LD_ADDR_VAR 0 12
61495: PUSH
61496: CALL_OW 44
61500: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61501: LD_VAR 0 12
61505: PPUSH
61506: LD_VAR 0 8
61510: PPUSH
61511: LD_INT 0
61513: PPUSH
61514: CALL 63236 0 3
// end ;
61518: GO 61472
61520: POP
61521: POP
// if fishes then
61522: LD_VAR 0 7
61526: IFFALSE 61593
// for i = 1 to fishes do
61528: LD_ADDR_VAR 0 11
61532: PUSH
61533: DOUBLE
61534: LD_INT 1
61536: DEC
61537: ST_TO_ADDR
61538: LD_VAR 0 7
61542: PUSH
61543: FOR_TO
61544: IFFALSE 61591
// begin hc_class = 20 ;
61546: LD_ADDR_OWVAR 28
61550: PUSH
61551: LD_INT 20
61553: ST_TO_ADDR
// hc_gallery =  ;
61554: LD_ADDR_OWVAR 33
61558: PUSH
61559: LD_STRING 
61561: ST_TO_ADDR
// animal := CreateHuman ;
61562: LD_ADDR_VAR 0 12
61566: PUSH
61567: CALL_OW 44
61571: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61572: LD_VAR 0 12
61576: PPUSH
61577: LD_VAR 0 9
61581: PPUSH
61582: LD_INT 0
61584: PPUSH
61585: CALL 63236 0 3
// end ;
61589: GO 61543
61591: POP
61592: POP
// end ;
61593: LD_VAR 0 10
61597: RET
// export function WantHeal ( sci , unit ) ; begin
61598: LD_INT 0
61600: PPUSH
// if GetTaskList ( sci ) > 0 then
61601: LD_VAR 0 1
61605: PPUSH
61606: CALL_OW 437
61610: PUSH
61611: LD_INT 0
61613: GREATER
61614: IFFALSE 61686
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61616: LD_VAR 0 1
61620: PPUSH
61621: CALL_OW 437
61625: PUSH
61626: LD_INT 1
61628: ARRAY
61629: PUSH
61630: LD_INT 1
61632: ARRAY
61633: PUSH
61634: LD_STRING l
61636: EQUAL
61637: IFFALSE 61664
61639: PUSH
61640: LD_VAR 0 1
61644: PPUSH
61645: CALL_OW 437
61649: PUSH
61650: LD_INT 1
61652: ARRAY
61653: PUSH
61654: LD_INT 4
61656: ARRAY
61657: PUSH
61658: LD_VAR 0 2
61662: EQUAL
61663: AND
61664: IFFALSE 61676
// result := true else
61666: LD_ADDR_VAR 0 3
61670: PUSH
61671: LD_INT 1
61673: ST_TO_ADDR
61674: GO 61684
// result := false ;
61676: LD_ADDR_VAR 0 3
61680: PUSH
61681: LD_INT 0
61683: ST_TO_ADDR
// end else
61684: GO 61694
// result := false ;
61686: LD_ADDR_VAR 0 3
61690: PUSH
61691: LD_INT 0
61693: ST_TO_ADDR
// end ;
61694: LD_VAR 0 3
61698: RET
// export function HealTarget ( sci ) ; begin
61699: LD_INT 0
61701: PPUSH
// if not sci then
61702: LD_VAR 0 1
61706: NOT
61707: IFFALSE 61711
// exit ;
61709: GO 61776
// result := 0 ;
61711: LD_ADDR_VAR 0 2
61715: PUSH
61716: LD_INT 0
61718: ST_TO_ADDR
// if GetTaskList ( sci ) then
61719: LD_VAR 0 1
61723: PPUSH
61724: CALL_OW 437
61728: IFFALSE 61776
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61730: LD_VAR 0 1
61734: PPUSH
61735: CALL_OW 437
61739: PUSH
61740: LD_INT 1
61742: ARRAY
61743: PUSH
61744: LD_INT 1
61746: ARRAY
61747: PUSH
61748: LD_STRING l
61750: EQUAL
61751: IFFALSE 61776
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61753: LD_ADDR_VAR 0 2
61757: PUSH
61758: LD_VAR 0 1
61762: PPUSH
61763: CALL_OW 437
61767: PUSH
61768: LD_INT 1
61770: ARRAY
61771: PUSH
61772: LD_INT 4
61774: ARRAY
61775: ST_TO_ADDR
// end ;
61776: LD_VAR 0 2
61780: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61781: LD_INT 0
61783: PPUSH
61784: PPUSH
61785: PPUSH
61786: PPUSH
// if not base_units then
61787: LD_VAR 0 1
61791: NOT
61792: IFFALSE 61796
// exit ;
61794: GO 61883
// result := false ;
61796: LD_ADDR_VAR 0 2
61800: PUSH
61801: LD_INT 0
61803: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61804: LD_ADDR_VAR 0 5
61808: PUSH
61809: LD_VAR 0 1
61813: PPUSH
61814: LD_INT 21
61816: PUSH
61817: LD_INT 3
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PPUSH
61824: CALL_OW 72
61828: ST_TO_ADDR
// if not tmp then
61829: LD_VAR 0 5
61833: NOT
61834: IFFALSE 61838
// exit ;
61836: GO 61883
// for i in tmp do
61838: LD_ADDR_VAR 0 3
61842: PUSH
61843: LD_VAR 0 5
61847: PUSH
61848: FOR_IN
61849: IFFALSE 61881
// begin result := EnemyInRange ( i , 22 ) ;
61851: LD_ADDR_VAR 0 2
61855: PUSH
61856: LD_VAR 0 3
61860: PPUSH
61861: LD_INT 22
61863: PPUSH
61864: CALL 59298 0 2
61868: ST_TO_ADDR
// if result then
61869: LD_VAR 0 2
61873: IFFALSE 61879
// exit ;
61875: POP
61876: POP
61877: GO 61883
// end ;
61879: GO 61848
61881: POP
61882: POP
// end ;
61883: LD_VAR 0 2
61887: RET
// export function FilterByTag ( units , tag ) ; begin
61888: LD_INT 0
61890: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61891: LD_ADDR_VAR 0 3
61895: PUSH
61896: LD_VAR 0 1
61900: PPUSH
61901: LD_INT 120
61903: PUSH
61904: LD_VAR 0 2
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PPUSH
61913: CALL_OW 72
61917: ST_TO_ADDR
// end ;
61918: LD_VAR 0 3
61922: RET
// export function IsDriver ( un ) ; begin
61923: LD_INT 0
61925: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61926: LD_ADDR_VAR 0 2
61930: PUSH
61931: LD_VAR 0 1
61935: PUSH
61936: LD_INT 55
61938: PUSH
61939: EMPTY
61940: LIST
61941: PPUSH
61942: CALL_OW 69
61946: IN
61947: ST_TO_ADDR
// end ;
61948: LD_VAR 0 2
61952: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61953: LD_INT 0
61955: PPUSH
61956: PPUSH
// list := [ ] ;
61957: LD_ADDR_VAR 0 5
61961: PUSH
61962: EMPTY
61963: ST_TO_ADDR
// case d of 0 :
61964: LD_VAR 0 3
61968: PUSH
61969: LD_INT 0
61971: DOUBLE
61972: EQUAL
61973: IFTRUE 61977
61975: GO 62110
61977: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61978: LD_ADDR_VAR 0 5
61982: PUSH
61983: LD_VAR 0 1
61987: PUSH
61988: LD_INT 4
61990: MINUS
61991: PUSH
61992: LD_VAR 0 2
61996: PUSH
61997: LD_INT 4
61999: MINUS
62000: PUSH
62001: LD_INT 2
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: LIST
62008: PUSH
62009: LD_VAR 0 1
62013: PUSH
62014: LD_INT 3
62016: MINUS
62017: PUSH
62018: LD_VAR 0 2
62022: PUSH
62023: LD_INT 1
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: LIST
62030: PUSH
62031: LD_VAR 0 1
62035: PUSH
62036: LD_INT 4
62038: PLUS
62039: PUSH
62040: LD_VAR 0 2
62044: PUSH
62045: LD_INT 4
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: LIST
62052: PUSH
62053: LD_VAR 0 1
62057: PUSH
62058: LD_INT 3
62060: PLUS
62061: PUSH
62062: LD_VAR 0 2
62066: PUSH
62067: LD_INT 3
62069: PLUS
62070: PUSH
62071: LD_INT 5
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: LIST
62078: PUSH
62079: LD_VAR 0 1
62083: PUSH
62084: LD_VAR 0 2
62088: PUSH
62089: LD_INT 4
62091: PLUS
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: LIST
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: ST_TO_ADDR
// end ; 1 :
62108: GO 62808
62110: LD_INT 1
62112: DOUBLE
62113: EQUAL
62114: IFTRUE 62118
62116: GO 62251
62118: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62119: LD_ADDR_VAR 0 5
62123: PUSH
62124: LD_VAR 0 1
62128: PUSH
62129: LD_VAR 0 2
62133: PUSH
62134: LD_INT 4
62136: MINUS
62137: PUSH
62138: LD_INT 3
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: LIST
62145: PUSH
62146: LD_VAR 0 1
62150: PUSH
62151: LD_INT 3
62153: MINUS
62154: PUSH
62155: LD_VAR 0 2
62159: PUSH
62160: LD_INT 3
62162: MINUS
62163: PUSH
62164: LD_INT 2
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: LIST
62171: PUSH
62172: LD_VAR 0 1
62176: PUSH
62177: LD_INT 4
62179: MINUS
62180: PUSH
62181: LD_VAR 0 2
62185: PUSH
62186: LD_INT 1
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: LIST
62193: PUSH
62194: LD_VAR 0 1
62198: PUSH
62199: LD_VAR 0 2
62203: PUSH
62204: LD_INT 3
62206: PLUS
62207: PUSH
62208: LD_INT 0
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: LIST
62215: PUSH
62216: LD_VAR 0 1
62220: PUSH
62221: LD_INT 4
62223: PLUS
62224: PUSH
62225: LD_VAR 0 2
62229: PUSH
62230: LD_INT 4
62232: PLUS
62233: PUSH
62234: LD_INT 5
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: LIST
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: ST_TO_ADDR
// end ; 2 :
62249: GO 62808
62251: LD_INT 2
62253: DOUBLE
62254: EQUAL
62255: IFTRUE 62259
62257: GO 62388
62259: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62260: LD_ADDR_VAR 0 5
62264: PUSH
62265: LD_VAR 0 1
62269: PUSH
62270: LD_VAR 0 2
62274: PUSH
62275: LD_INT 3
62277: MINUS
62278: PUSH
62279: LD_INT 3
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: LIST
62286: PUSH
62287: LD_VAR 0 1
62291: PUSH
62292: LD_INT 4
62294: PLUS
62295: PUSH
62296: LD_VAR 0 2
62300: PUSH
62301: LD_INT 4
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: LIST
62308: PUSH
62309: LD_VAR 0 1
62313: PUSH
62314: LD_VAR 0 2
62318: PUSH
62319: LD_INT 4
62321: PLUS
62322: PUSH
62323: LD_INT 0
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: LIST
62330: PUSH
62331: LD_VAR 0 1
62335: PUSH
62336: LD_INT 3
62338: MINUS
62339: PUSH
62340: LD_VAR 0 2
62344: PUSH
62345: LD_INT 1
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: LIST
62352: PUSH
62353: LD_VAR 0 1
62357: PUSH
62358: LD_INT 4
62360: MINUS
62361: PUSH
62362: LD_VAR 0 2
62366: PUSH
62367: LD_INT 4
62369: MINUS
62370: PUSH
62371: LD_INT 2
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: LIST
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: ST_TO_ADDR
// end ; 3 :
62386: GO 62808
62388: LD_INT 3
62390: DOUBLE
62391: EQUAL
62392: IFTRUE 62396
62394: GO 62529
62396: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62397: LD_ADDR_VAR 0 5
62401: PUSH
62402: LD_VAR 0 1
62406: PUSH
62407: LD_INT 3
62409: PLUS
62410: PUSH
62411: LD_VAR 0 2
62415: PUSH
62416: LD_INT 4
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: LIST
62423: PUSH
62424: LD_VAR 0 1
62428: PUSH
62429: LD_INT 4
62431: PLUS
62432: PUSH
62433: LD_VAR 0 2
62437: PUSH
62438: LD_INT 4
62440: PLUS
62441: PUSH
62442: LD_INT 5
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: LIST
62449: PUSH
62450: LD_VAR 0 1
62454: PUSH
62455: LD_INT 4
62457: MINUS
62458: PUSH
62459: LD_VAR 0 2
62463: PUSH
62464: LD_INT 1
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: LIST
62471: PUSH
62472: LD_VAR 0 1
62476: PUSH
62477: LD_VAR 0 2
62481: PUSH
62482: LD_INT 4
62484: MINUS
62485: PUSH
62486: LD_INT 3
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: LIST
62493: PUSH
62494: LD_VAR 0 1
62498: PUSH
62499: LD_INT 3
62501: MINUS
62502: PUSH
62503: LD_VAR 0 2
62507: PUSH
62508: LD_INT 3
62510: MINUS
62511: PUSH
62512: LD_INT 2
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: LIST
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: ST_TO_ADDR
// end ; 4 :
62527: GO 62808
62529: LD_INT 4
62531: DOUBLE
62532: EQUAL
62533: IFTRUE 62537
62535: GO 62670
62537: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62538: LD_ADDR_VAR 0 5
62542: PUSH
62543: LD_VAR 0 1
62547: PUSH
62548: LD_VAR 0 2
62552: PUSH
62553: LD_INT 4
62555: PLUS
62556: PUSH
62557: LD_INT 0
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: LIST
62564: PUSH
62565: LD_VAR 0 1
62569: PUSH
62570: LD_INT 3
62572: PLUS
62573: PUSH
62574: LD_VAR 0 2
62578: PUSH
62579: LD_INT 3
62581: PLUS
62582: PUSH
62583: LD_INT 5
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: LIST
62590: PUSH
62591: LD_VAR 0 1
62595: PUSH
62596: LD_INT 4
62598: PLUS
62599: PUSH
62600: LD_VAR 0 2
62604: PUSH
62605: LD_INT 4
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: LIST
62612: PUSH
62613: LD_VAR 0 1
62617: PUSH
62618: LD_VAR 0 2
62622: PUSH
62623: LD_INT 3
62625: MINUS
62626: PUSH
62627: LD_INT 3
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: LIST
62634: PUSH
62635: LD_VAR 0 1
62639: PUSH
62640: LD_INT 4
62642: MINUS
62643: PUSH
62644: LD_VAR 0 2
62648: PUSH
62649: LD_INT 4
62651: MINUS
62652: PUSH
62653: LD_INT 2
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: LIST
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: ST_TO_ADDR
// end ; 5 :
62668: GO 62808
62670: LD_INT 5
62672: DOUBLE
62673: EQUAL
62674: IFTRUE 62678
62676: GO 62807
62678: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62679: LD_ADDR_VAR 0 5
62683: PUSH
62684: LD_VAR 0 1
62688: PUSH
62689: LD_INT 4
62691: MINUS
62692: PUSH
62693: LD_VAR 0 2
62697: PUSH
62698: LD_INT 1
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: LIST
62705: PUSH
62706: LD_VAR 0 1
62710: PUSH
62711: LD_VAR 0 2
62715: PUSH
62716: LD_INT 4
62718: MINUS
62719: PUSH
62720: LD_INT 3
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: LIST
62727: PUSH
62728: LD_VAR 0 1
62732: PUSH
62733: LD_INT 4
62735: PLUS
62736: PUSH
62737: LD_VAR 0 2
62741: PUSH
62742: LD_INT 4
62744: PLUS
62745: PUSH
62746: LD_INT 5
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: LIST
62753: PUSH
62754: LD_VAR 0 1
62758: PUSH
62759: LD_INT 3
62761: PLUS
62762: PUSH
62763: LD_VAR 0 2
62767: PUSH
62768: LD_INT 4
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: LIST
62775: PUSH
62776: LD_VAR 0 1
62780: PUSH
62781: LD_VAR 0 2
62785: PUSH
62786: LD_INT 3
62788: PLUS
62789: PUSH
62790: LD_INT 0
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: LIST
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: ST_TO_ADDR
// end ; end ;
62805: GO 62808
62807: POP
// result := list ;
62808: LD_ADDR_VAR 0 4
62812: PUSH
62813: LD_VAR 0 5
62817: ST_TO_ADDR
// end ;
62818: LD_VAR 0 4
62822: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62823: LD_INT 0
62825: PPUSH
62826: PPUSH
62827: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62828: LD_VAR 0 1
62832: NOT
62833: IFTRUE 62861
62835: PUSH
62836: LD_VAR 0 2
62840: PUSH
62841: LD_INT 1
62843: PUSH
62844: LD_INT 2
62846: PUSH
62847: LD_INT 3
62849: PUSH
62850: LD_INT 4
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: IN
62859: NOT
62860: OR
62861: IFFALSE 62865
// exit ;
62863: GO 62948
// tmp := [ ] ;
62865: LD_ADDR_VAR 0 5
62869: PUSH
62870: EMPTY
62871: ST_TO_ADDR
// for i in units do
62872: LD_ADDR_VAR 0 4
62876: PUSH
62877: LD_VAR 0 1
62881: PUSH
62882: FOR_IN
62883: IFFALSE 62917
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
62885: LD_ADDR_VAR 0 5
62889: PUSH
62890: LD_VAR 0 5
62894: PPUSH
62895: LD_VAR 0 4
62899: PPUSH
62900: LD_VAR 0 2
62904: PPUSH
62905: CALL_OW 259
62909: PPUSH
62910: CALL 64343 0 2
62914: ST_TO_ADDR
62915: GO 62882
62917: POP
62918: POP
// if not tmp then
62919: LD_VAR 0 5
62923: NOT
62924: IFFALSE 62928
// exit ;
62926: GO 62948
// result := SortListByListDesc ( units , tmp ) ;
62928: LD_ADDR_VAR 0 3
62932: PUSH
62933: LD_VAR 0 1
62937: PPUSH
62938: LD_VAR 0 5
62942: PPUSH
62943: CALL_OW 77
62947: ST_TO_ADDR
// end ;
62948: LD_VAR 0 3
62952: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62953: LD_INT 0
62955: PPUSH
62956: PPUSH
62957: PPUSH
// result := false ;
62958: LD_ADDR_VAR 0 3
62962: PUSH
62963: LD_INT 0
62965: ST_TO_ADDR
// if not building then
62966: LD_VAR 0 2
62970: NOT
62971: IFFALSE 62975
// exit ;
62973: GO 63119
// x := GetX ( building ) ;
62975: LD_ADDR_VAR 0 4
62979: PUSH
62980: LD_VAR 0 2
62984: PPUSH
62985: CALL_OW 250
62989: ST_TO_ADDR
// y := GetY ( building ) ;
62990: LD_ADDR_VAR 0 5
62994: PUSH
62995: LD_VAR 0 2
62999: PPUSH
63000: CALL_OW 251
63004: ST_TO_ADDR
// if not x or not y then
63005: LD_VAR 0 4
63009: NOT
63010: IFTRUE 63019
63012: PUSH
63013: LD_VAR 0 5
63017: NOT
63018: OR
63019: IFFALSE 63023
// exit ;
63021: GO 63119
// if GetTaskList ( unit ) then
63023: LD_VAR 0 1
63027: PPUSH
63028: CALL_OW 437
63032: IFFALSE 63119
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63034: LD_STRING e
63036: PUSH
63037: LD_VAR 0 1
63041: PPUSH
63042: CALL_OW 437
63046: PUSH
63047: LD_INT 1
63049: ARRAY
63050: PUSH
63051: LD_INT 1
63053: ARRAY
63054: EQUAL
63055: IFFALSE 63082
63057: PUSH
63058: LD_VAR 0 4
63062: PUSH
63063: LD_VAR 0 1
63067: PPUSH
63068: CALL_OW 437
63072: PUSH
63073: LD_INT 1
63075: ARRAY
63076: PUSH
63077: LD_INT 2
63079: ARRAY
63080: EQUAL
63081: AND
63082: IFFALSE 63109
63084: PUSH
63085: LD_VAR 0 5
63089: PUSH
63090: LD_VAR 0 1
63094: PPUSH
63095: CALL_OW 437
63099: PUSH
63100: LD_INT 1
63102: ARRAY
63103: PUSH
63104: LD_INT 3
63106: ARRAY
63107: EQUAL
63108: AND
63109: IFFALSE 63119
// result := true end ;
63111: LD_ADDR_VAR 0 3
63115: PUSH
63116: LD_INT 1
63118: ST_TO_ADDR
// end ;
63119: LD_VAR 0 3
63123: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63124: LD_INT 0
63126: PPUSH
// result := false ;
63127: LD_ADDR_VAR 0 4
63131: PUSH
63132: LD_INT 0
63134: ST_TO_ADDR
// if GetTaskList ( unit ) then
63135: LD_VAR 0 1
63139: PPUSH
63140: CALL_OW 437
63144: IFFALSE 63231
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63146: LD_STRING M
63148: PUSH
63149: LD_VAR 0 1
63153: PPUSH
63154: CALL_OW 437
63158: PUSH
63159: LD_INT 1
63161: ARRAY
63162: PUSH
63163: LD_INT 1
63165: ARRAY
63166: EQUAL
63167: IFFALSE 63194
63169: PUSH
63170: LD_VAR 0 2
63174: PUSH
63175: LD_VAR 0 1
63179: PPUSH
63180: CALL_OW 437
63184: PUSH
63185: LD_INT 1
63187: ARRAY
63188: PUSH
63189: LD_INT 2
63191: ARRAY
63192: EQUAL
63193: AND
63194: IFFALSE 63221
63196: PUSH
63197: LD_VAR 0 3
63201: PUSH
63202: LD_VAR 0 1
63206: PPUSH
63207: CALL_OW 437
63211: PUSH
63212: LD_INT 1
63214: ARRAY
63215: PUSH
63216: LD_INT 3
63218: ARRAY
63219: EQUAL
63220: AND
63221: IFFALSE 63231
// result := true ;
63223: LD_ADDR_VAR 0 4
63227: PUSH
63228: LD_INT 1
63230: ST_TO_ADDR
// end ; end ;
63231: LD_VAR 0 4
63235: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63236: LD_INT 0
63238: PPUSH
63239: PPUSH
63240: PPUSH
63241: PPUSH
// if not unit or not area then
63242: LD_VAR 0 1
63246: NOT
63247: IFTRUE 63256
63249: PUSH
63250: LD_VAR 0 2
63254: NOT
63255: OR
63256: IFFALSE 63260
// exit ;
63258: GO 63436
// tmp := AreaToList ( area , i ) ;
63260: LD_ADDR_VAR 0 6
63264: PUSH
63265: LD_VAR 0 2
63269: PPUSH
63270: LD_VAR 0 5
63274: PPUSH
63275: CALL_OW 517
63279: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63280: LD_ADDR_VAR 0 5
63284: PUSH
63285: DOUBLE
63286: LD_INT 1
63288: DEC
63289: ST_TO_ADDR
63290: LD_VAR 0 6
63294: PUSH
63295: LD_INT 1
63297: ARRAY
63298: PUSH
63299: FOR_TO
63300: IFFALSE 63434
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63302: LD_ADDR_VAR 0 7
63306: PUSH
63307: LD_VAR 0 6
63311: PUSH
63312: LD_INT 1
63314: ARRAY
63315: PUSH
63316: LD_VAR 0 5
63320: ARRAY
63321: PUSH
63322: LD_VAR 0 6
63326: PUSH
63327: LD_INT 2
63329: ARRAY
63330: PUSH
63331: LD_VAR 0 5
63335: ARRAY
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
63341: LD_INT 92
63343: PUSH
63344: LD_VAR 0 7
63348: PUSH
63349: LD_INT 1
63351: ARRAY
63352: PUSH
63353: LD_VAR 0 7
63357: PUSH
63358: LD_INT 2
63360: ARRAY
63361: PUSH
63362: LD_INT 2
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: PPUSH
63371: CALL_OW 69
63375: PUSH
63376: LD_INT 0
63378: EQUAL
63379: IFFALSE 63432
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63381: LD_VAR 0 1
63385: PPUSH
63386: LD_VAR 0 7
63390: PUSH
63391: LD_INT 1
63393: ARRAY
63394: PPUSH
63395: LD_VAR 0 7
63399: PUSH
63400: LD_INT 2
63402: ARRAY
63403: PPUSH
63404: LD_VAR 0 3
63408: PPUSH
63409: CALL_OW 48
// result := IsPlaced ( unit ) ;
63413: LD_ADDR_VAR 0 4
63417: PUSH
63418: LD_VAR 0 1
63422: PPUSH
63423: CALL_OW 305
63427: ST_TO_ADDR
// exit ;
63428: POP
63429: POP
63430: GO 63436
// end ; end ;
63432: GO 63299
63434: POP
63435: POP
// end ;
63436: LD_VAR 0 4
63440: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63441: LD_INT 0
63443: PPUSH
63444: PPUSH
63445: PPUSH
// if not side or side > 8 then
63446: LD_VAR 0 1
63450: NOT
63451: IFTRUE 63463
63453: PUSH
63454: LD_VAR 0 1
63458: PUSH
63459: LD_INT 8
63461: GREATER
63462: OR
63463: IFFALSE 63467
// exit ;
63465: GO 63654
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63467: LD_ADDR_VAR 0 4
63471: PUSH
63472: LD_INT 22
63474: PUSH
63475: LD_VAR 0 1
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 21
63486: PUSH
63487: LD_INT 3
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PPUSH
63498: CALL_OW 69
63502: ST_TO_ADDR
// if not tmp then
63503: LD_VAR 0 4
63507: NOT
63508: IFFALSE 63512
// exit ;
63510: GO 63654
// enable_addtolog := true ;
63512: LD_ADDR_OWVAR 81
63516: PUSH
63517: LD_INT 1
63519: ST_TO_ADDR
// AddToLog ( [ ) ;
63520: LD_STRING [
63522: PPUSH
63523: CALL_OW 561
// for i in tmp do
63527: LD_ADDR_VAR 0 3
63531: PUSH
63532: LD_VAR 0 4
63536: PUSH
63537: FOR_IN
63538: IFFALSE 63645
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63540: LD_STRING [
63542: PUSH
63543: LD_VAR 0 3
63547: PPUSH
63548: CALL_OW 266
63552: STR
63553: PUSH
63554: LD_STRING , 
63556: STR
63557: PUSH
63558: LD_VAR 0 3
63562: PPUSH
63563: CALL_OW 250
63567: STR
63568: PUSH
63569: LD_STRING , 
63571: STR
63572: PUSH
63573: LD_VAR 0 3
63577: PPUSH
63578: CALL_OW 251
63582: STR
63583: PUSH
63584: LD_STRING , 
63586: STR
63587: PUSH
63588: LD_VAR 0 3
63592: PPUSH
63593: CALL_OW 254
63597: STR
63598: PUSH
63599: LD_STRING , 
63601: STR
63602: PUSH
63603: LD_VAR 0 3
63607: PPUSH
63608: LD_INT 1
63610: PPUSH
63611: CALL_OW 268
63615: STR
63616: PUSH
63617: LD_STRING , 
63619: STR
63620: PUSH
63621: LD_VAR 0 3
63625: PPUSH
63626: LD_INT 2
63628: PPUSH
63629: CALL_OW 268
63633: STR
63634: PUSH
63635: LD_STRING ],
63637: STR
63638: PPUSH
63639: CALL_OW 561
// end ;
63643: GO 63537
63645: POP
63646: POP
// AddToLog ( ]; ) ;
63647: LD_STRING ];
63649: PPUSH
63650: CALL_OW 561
// end ;
63654: LD_VAR 0 2
63658: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63659: LD_INT 0
63661: PPUSH
63662: PPUSH
63663: PPUSH
63664: PPUSH
63665: PPUSH
// if not area or not rate or not max then
63666: LD_VAR 0 1
63670: NOT
63671: IFTRUE 63680
63673: PUSH
63674: LD_VAR 0 2
63678: NOT
63679: OR
63680: IFTRUE 63689
63682: PUSH
63683: LD_VAR 0 4
63687: NOT
63688: OR
63689: IFFALSE 63693
// exit ;
63691: GO 63882
// while 1 do
63693: LD_INT 1
63695: IFFALSE 63882
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63697: LD_ADDR_VAR 0 9
63701: PUSH
63702: LD_VAR 0 1
63706: PPUSH
63707: LD_INT 1
63709: PPUSH
63710: CALL_OW 287
63714: PUSH
63715: LD_INT 10
63717: MUL
63718: ST_TO_ADDR
// r := rate / 10 ;
63719: LD_ADDR_VAR 0 7
63723: PUSH
63724: LD_VAR 0 2
63728: PUSH
63729: LD_INT 10
63731: DIVREAL
63732: ST_TO_ADDR
// time := 1 1$00 ;
63733: LD_ADDR_VAR 0 8
63737: PUSH
63738: LD_INT 2100
63740: ST_TO_ADDR
// if amount < min then
63741: LD_VAR 0 9
63745: PUSH
63746: LD_VAR 0 3
63750: LESS
63751: IFFALSE 63769
// r := r * 2 else
63753: LD_ADDR_VAR 0 7
63757: PUSH
63758: LD_VAR 0 7
63762: PUSH
63763: LD_INT 2
63765: MUL
63766: ST_TO_ADDR
63767: GO 63795
// if amount > max then
63769: LD_VAR 0 9
63773: PUSH
63774: LD_VAR 0 4
63778: GREATER
63779: IFFALSE 63795
// r := r / 2 ;
63781: LD_ADDR_VAR 0 7
63785: PUSH
63786: LD_VAR 0 7
63790: PUSH
63791: LD_INT 2
63793: DIVREAL
63794: ST_TO_ADDR
// time := time / r ;
63795: LD_ADDR_VAR 0 8
63799: PUSH
63800: LD_VAR 0 8
63804: PUSH
63805: LD_VAR 0 7
63809: DIVREAL
63810: ST_TO_ADDR
// if time < 0 then
63811: LD_VAR 0 8
63815: PUSH
63816: LD_INT 0
63818: LESS
63819: IFFALSE 63836
// time := time * - 1 ;
63821: LD_ADDR_VAR 0 8
63825: PUSH
63826: LD_VAR 0 8
63830: PUSH
63831: LD_INT 1
63833: NEG
63834: MUL
63835: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63836: LD_VAR 0 8
63840: PUSH
63841: LD_INT 35
63843: PPUSH
63844: LD_INT 875
63846: PPUSH
63847: CALL_OW 12
63851: PLUS
63852: PPUSH
63853: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63857: LD_INT 1
63859: PPUSH
63860: LD_INT 5
63862: PPUSH
63863: CALL_OW 12
63867: PPUSH
63868: LD_VAR 0 1
63872: PPUSH
63873: LD_INT 1
63875: PPUSH
63876: CALL_OW 55
// end ;
63880: GO 63693
// end ;
63882: LD_VAR 0 5
63886: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63887: LD_INT 0
63889: PPUSH
63890: PPUSH
63891: PPUSH
63892: PPUSH
63893: PPUSH
63894: PPUSH
63895: PPUSH
63896: PPUSH
// if not turrets or not factories then
63897: LD_VAR 0 1
63901: NOT
63902: IFTRUE 63911
63904: PUSH
63905: LD_VAR 0 2
63909: NOT
63910: OR
63911: IFFALSE 63915
// exit ;
63913: GO 64222
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63915: LD_ADDR_VAR 0 10
63919: PUSH
63920: LD_INT 5
63922: PUSH
63923: LD_INT 6
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 2
63932: PUSH
63933: LD_INT 4
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 3
63942: PUSH
63943: LD_INT 5
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 24
63957: PUSH
63958: LD_INT 25
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 23
63967: PUSH
63968: LD_INT 27
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 42
63981: PUSH
63982: LD_INT 43
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 44
63991: PUSH
63992: LD_INT 46
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 45
64001: PUSH
64002: LD_INT 47
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: LIST
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: LIST
64018: ST_TO_ADDR
// result := [ ] ;
64019: LD_ADDR_VAR 0 3
64023: PUSH
64024: EMPTY
64025: ST_TO_ADDR
// for i in turrets do
64026: LD_ADDR_VAR 0 4
64030: PUSH
64031: LD_VAR 0 1
64035: PUSH
64036: FOR_IN
64037: IFFALSE 64220
// begin nat := GetNation ( i ) ;
64039: LD_ADDR_VAR 0 7
64043: PUSH
64044: LD_VAR 0 4
64048: PPUSH
64049: CALL_OW 248
64053: ST_TO_ADDR
// weapon := 0 ;
64054: LD_ADDR_VAR 0 8
64058: PUSH
64059: LD_INT 0
64061: ST_TO_ADDR
// if not nat then
64062: LD_VAR 0 7
64066: NOT
64067: IFFALSE 64071
// continue ;
64069: GO 64036
// for j in list [ nat ] do
64071: LD_ADDR_VAR 0 5
64075: PUSH
64076: LD_VAR 0 10
64080: PUSH
64081: LD_VAR 0 7
64085: ARRAY
64086: PUSH
64087: FOR_IN
64088: IFFALSE 64129
// if GetBWeapon ( i ) = j [ 1 ] then
64090: LD_VAR 0 4
64094: PPUSH
64095: CALL_OW 269
64099: PUSH
64100: LD_VAR 0 5
64104: PUSH
64105: LD_INT 1
64107: ARRAY
64108: EQUAL
64109: IFFALSE 64127
// begin weapon := j [ 2 ] ;
64111: LD_ADDR_VAR 0 8
64115: PUSH
64116: LD_VAR 0 5
64120: PUSH
64121: LD_INT 2
64123: ARRAY
64124: ST_TO_ADDR
// break ;
64125: GO 64129
// end ;
64127: GO 64087
64129: POP
64130: POP
// if not weapon then
64131: LD_VAR 0 8
64135: NOT
64136: IFFALSE 64140
// continue ;
64138: GO 64036
// for k in factories do
64140: LD_ADDR_VAR 0 6
64144: PUSH
64145: LD_VAR 0 2
64149: PUSH
64150: FOR_IN
64151: IFFALSE 64216
// begin weapons := AvailableWeaponList ( k ) ;
64153: LD_ADDR_VAR 0 9
64157: PUSH
64158: LD_VAR 0 6
64162: PPUSH
64163: CALL_OW 478
64167: ST_TO_ADDR
// if not weapons then
64168: LD_VAR 0 9
64172: NOT
64173: IFFALSE 64177
// continue ;
64175: GO 64150
// if weapon in weapons then
64177: LD_VAR 0 8
64181: PUSH
64182: LD_VAR 0 9
64186: IN
64187: IFFALSE 64214
// begin result := [ i , weapon ] ;
64189: LD_ADDR_VAR 0 3
64193: PUSH
64194: LD_VAR 0 4
64198: PUSH
64199: LD_VAR 0 8
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: ST_TO_ADDR
// exit ;
64208: POP
64209: POP
64210: POP
64211: POP
64212: GO 64222
// end ; end ;
64214: GO 64150
64216: POP
64217: POP
// end ;
64218: GO 64036
64220: POP
64221: POP
// end ;
64222: LD_VAR 0 3
64226: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64227: LD_INT 0
64229: PPUSH
// if not side or side > 8 then
64230: LD_VAR 0 3
64234: NOT
64235: IFTRUE 64247
64237: PUSH
64238: LD_VAR 0 3
64242: PUSH
64243: LD_INT 8
64245: GREATER
64246: OR
64247: IFFALSE 64251
// exit ;
64249: GO 64310
// if not range then
64251: LD_VAR 0 4
64255: NOT
64256: IFFALSE 64267
// range := - 12 ;
64258: LD_ADDR_VAR 0 4
64262: PUSH
64263: LD_INT 12
64265: NEG
64266: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64267: LD_VAR 0 1
64271: PPUSH
64272: LD_VAR 0 2
64276: PPUSH
64277: LD_VAR 0 3
64281: PPUSH
64282: LD_VAR 0 4
64286: PPUSH
64287: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64291: LD_VAR 0 1
64295: PPUSH
64296: LD_VAR 0 2
64300: PPUSH
64301: LD_VAR 0 3
64305: PPUSH
64306: CALL_OW 331
// end ;
64310: LD_VAR 0 5
64314: RET
// export function Video ( mode ) ; begin
64315: LD_INT 0
64317: PPUSH
// ingame_video = mode ;
64318: LD_ADDR_OWVAR 52
64322: PUSH
64323: LD_VAR 0 1
64327: ST_TO_ADDR
// interface_hidden = mode ;
64328: LD_ADDR_OWVAR 54
64332: PUSH
64333: LD_VAR 0 1
64337: ST_TO_ADDR
// end ;
64338: LD_VAR 0 2
64342: RET
// export function Join ( array , element ) ; begin
64343: LD_INT 0
64345: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64346: LD_ADDR_VAR 0 3
64350: PUSH
64351: LD_VAR 0 1
64355: PPUSH
64356: LD_VAR 0 1
64360: PUSH
64361: LD_INT 1
64363: PLUS
64364: PPUSH
64365: LD_VAR 0 2
64369: PPUSH
64370: CALL_OW 1
64374: ST_TO_ADDR
// end ;
64375: LD_VAR 0 3
64379: RET
// export function JoinUnion ( array , element ) ; begin
64380: LD_INT 0
64382: PPUSH
// result := array union element ;
64383: LD_ADDR_VAR 0 3
64387: PUSH
64388: LD_VAR 0 1
64392: PUSH
64393: LD_VAR 0 2
64397: UNION
64398: ST_TO_ADDR
// end ;
64399: LD_VAR 0 3
64403: RET
// export function GetBehemoths ( side ) ; begin
64404: LD_INT 0
64406: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64407: LD_ADDR_VAR 0 2
64411: PUSH
64412: LD_INT 22
64414: PUSH
64415: LD_VAR 0 1
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 31
64426: PUSH
64427: LD_INT 25
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PPUSH
64438: CALL_OW 69
64442: ST_TO_ADDR
// end ;
64443: LD_VAR 0 2
64447: RET
// export function Shuffle ( array ) ; var i , index ; begin
64448: LD_INT 0
64450: PPUSH
64451: PPUSH
64452: PPUSH
// result := [ ] ;
64453: LD_ADDR_VAR 0 2
64457: PUSH
64458: EMPTY
64459: ST_TO_ADDR
// if not array then
64460: LD_VAR 0 1
64464: NOT
64465: IFFALSE 64469
// exit ;
64467: GO 64568
// Randomize ;
64469: CALL_OW 10
// for i = array downto 1 do
64473: LD_ADDR_VAR 0 3
64477: PUSH
64478: DOUBLE
64479: LD_VAR 0 1
64483: INC
64484: ST_TO_ADDR
64485: LD_INT 1
64487: PUSH
64488: FOR_DOWNTO
64489: IFFALSE 64566
// begin index := rand ( 1 , array ) ;
64491: LD_ADDR_VAR 0 4
64495: PUSH
64496: LD_INT 1
64498: PPUSH
64499: LD_VAR 0 1
64503: PPUSH
64504: CALL_OW 12
64508: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64509: LD_ADDR_VAR 0 2
64513: PUSH
64514: LD_VAR 0 2
64518: PPUSH
64519: LD_VAR 0 2
64523: PUSH
64524: LD_INT 1
64526: PLUS
64527: PPUSH
64528: LD_VAR 0 1
64532: PUSH
64533: LD_VAR 0 4
64537: ARRAY
64538: PPUSH
64539: CALL_OW 2
64543: ST_TO_ADDR
// array := Delete ( array , index ) ;
64544: LD_ADDR_VAR 0 1
64548: PUSH
64549: LD_VAR 0 1
64553: PPUSH
64554: LD_VAR 0 4
64558: PPUSH
64559: CALL_OW 3
64563: ST_TO_ADDR
// end ;
64564: GO 64488
64566: POP
64567: POP
// end ;
64568: LD_VAR 0 2
64572: RET
// export function GetBaseMaterials ( base ) ; begin
64573: LD_INT 0
64575: PPUSH
// result := [ 0 , 0 , 0 ] ;
64576: LD_ADDR_VAR 0 2
64580: PUSH
64581: LD_INT 0
64583: PUSH
64584: LD_INT 0
64586: PUSH
64587: LD_INT 0
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: LIST
64594: ST_TO_ADDR
// if not base then
64595: LD_VAR 0 1
64599: NOT
64600: IFFALSE 64604
// exit ;
64602: GO 64653
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64604: LD_ADDR_VAR 0 2
64608: PUSH
64609: LD_VAR 0 1
64613: PPUSH
64614: LD_INT 1
64616: PPUSH
64617: CALL_OW 275
64621: PUSH
64622: LD_VAR 0 1
64626: PPUSH
64627: LD_INT 2
64629: PPUSH
64630: CALL_OW 275
64634: PUSH
64635: LD_VAR 0 1
64639: PPUSH
64640: LD_INT 3
64642: PPUSH
64643: CALL_OW 275
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: LIST
64652: ST_TO_ADDR
// end ;
64653: LD_VAR 0 2
64657: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64658: LD_INT 0
64660: PPUSH
64661: PPUSH
// result := array ;
64662: LD_ADDR_VAR 0 3
64666: PUSH
64667: LD_VAR 0 1
64671: ST_TO_ADDR
// if size >= result then
64672: LD_VAR 0 2
64676: PUSH
64677: LD_VAR 0 3
64681: GREATEREQUAL
64682: IFFALSE 64686
// exit ;
64684: GO 64736
// if size then
64686: LD_VAR 0 2
64690: IFFALSE 64736
// for i := array downto size do
64692: LD_ADDR_VAR 0 4
64696: PUSH
64697: DOUBLE
64698: LD_VAR 0 1
64702: INC
64703: ST_TO_ADDR
64704: LD_VAR 0 2
64708: PUSH
64709: FOR_DOWNTO
64710: IFFALSE 64734
// result := Delete ( result , result ) ;
64712: LD_ADDR_VAR 0 3
64716: PUSH
64717: LD_VAR 0 3
64721: PPUSH
64722: LD_VAR 0 3
64726: PPUSH
64727: CALL_OW 3
64731: ST_TO_ADDR
64732: GO 64709
64734: POP
64735: POP
// end ;
64736: LD_VAR 0 3
64740: RET
// export function ComExit ( unit ) ; var tmp ; begin
64741: LD_INT 0
64743: PPUSH
64744: PPUSH
// if not IsInUnit ( unit ) then
64745: LD_VAR 0 1
64749: PPUSH
64750: CALL_OW 310
64754: NOT
64755: IFFALSE 64759
// exit ;
64757: GO 64819
// tmp := IsInUnit ( unit ) ;
64759: LD_ADDR_VAR 0 3
64763: PUSH
64764: LD_VAR 0 1
64768: PPUSH
64769: CALL_OW 310
64773: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64774: LD_VAR 0 3
64778: PPUSH
64779: CALL_OW 247
64783: PUSH
64784: LD_INT 2
64786: EQUAL
64787: IFFALSE 64800
// ComExitVehicle ( unit ) else
64789: LD_VAR 0 1
64793: PPUSH
64794: CALL_OW 121
64798: GO 64809
// ComExitBuilding ( unit ) ;
64800: LD_VAR 0 1
64804: PPUSH
64805: CALL_OW 122
// result := tmp ;
64809: LD_ADDR_VAR 0 2
64813: PUSH
64814: LD_VAR 0 3
64818: ST_TO_ADDR
// end ;
64819: LD_VAR 0 2
64823: RET
// export function ComExitAll ( units ) ; var i ; begin
64824: LD_INT 0
64826: PPUSH
64827: PPUSH
// if not units then
64828: LD_VAR 0 1
64832: NOT
64833: IFFALSE 64837
// exit ;
64835: GO 64863
// for i in units do
64837: LD_ADDR_VAR 0 3
64841: PUSH
64842: LD_VAR 0 1
64846: PUSH
64847: FOR_IN
64848: IFFALSE 64861
// ComExit ( i ) ;
64850: LD_VAR 0 3
64854: PPUSH
64855: CALL 64741 0 1
64859: GO 64847
64861: POP
64862: POP
// end ;
64863: LD_VAR 0 2
64867: RET
// export function ResetHc ; begin
64868: LD_INT 0
64870: PPUSH
// InitHc ;
64871: CALL_OW 19
// hc_importance := 0 ;
64875: LD_ADDR_OWVAR 32
64879: PUSH
64880: LD_INT 0
64882: ST_TO_ADDR
// end ;
64883: LD_VAR 0 1
64887: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64888: LD_INT 0
64890: PPUSH
64891: PPUSH
64892: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64893: LD_ADDR_VAR 0 6
64897: PUSH
64898: LD_VAR 0 1
64902: PUSH
64903: LD_VAR 0 3
64907: PLUS
64908: PUSH
64909: LD_INT 2
64911: DIV
64912: ST_TO_ADDR
// if _x < 0 then
64913: LD_VAR 0 6
64917: PUSH
64918: LD_INT 0
64920: LESS
64921: IFFALSE 64938
// _x := _x * - 1 ;
64923: LD_ADDR_VAR 0 6
64927: PUSH
64928: LD_VAR 0 6
64932: PUSH
64933: LD_INT 1
64935: NEG
64936: MUL
64937: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64938: LD_ADDR_VAR 0 7
64942: PUSH
64943: LD_VAR 0 2
64947: PUSH
64948: LD_VAR 0 4
64952: PLUS
64953: PUSH
64954: LD_INT 2
64956: DIV
64957: ST_TO_ADDR
// if _y < 0 then
64958: LD_VAR 0 7
64962: PUSH
64963: LD_INT 0
64965: LESS
64966: IFFALSE 64983
// _y := _y * - 1 ;
64968: LD_ADDR_VAR 0 7
64972: PUSH
64973: LD_VAR 0 7
64977: PUSH
64978: LD_INT 1
64980: NEG
64981: MUL
64982: ST_TO_ADDR
// result := [ _x , _y ] ;
64983: LD_ADDR_VAR 0 5
64987: PUSH
64988: LD_VAR 0 6
64992: PUSH
64993: LD_VAR 0 7
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: ST_TO_ADDR
// end ;
65002: LD_VAR 0 5
65006: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65007: LD_INT 0
65009: PPUSH
65010: PPUSH
65011: PPUSH
65012: PPUSH
// task := GetTaskList ( unit ) ;
65013: LD_ADDR_VAR 0 7
65017: PUSH
65018: LD_VAR 0 1
65022: PPUSH
65023: CALL_OW 437
65027: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65028: LD_VAR 0 7
65032: NOT
65033: IFFALSE 65052
65035: PUSH
65036: LD_VAR 0 1
65040: PPUSH
65041: LD_VAR 0 2
65045: PPUSH
65046: CALL_OW 308
65050: NOT
65051: AND
65052: IFFALSE 65056
// exit ;
65054: GO 65174
// if IsInArea ( unit , area ) then
65056: LD_VAR 0 1
65060: PPUSH
65061: LD_VAR 0 2
65065: PPUSH
65066: CALL_OW 308
65070: IFFALSE 65088
// begin ComMoveToArea ( unit , goAway ) ;
65072: LD_VAR 0 1
65076: PPUSH
65077: LD_VAR 0 3
65081: PPUSH
65082: CALL_OW 113
// exit ;
65086: GO 65174
// end ; if task [ 1 ] [ 1 ] <> M then
65088: LD_VAR 0 7
65092: PUSH
65093: LD_INT 1
65095: ARRAY
65096: PUSH
65097: LD_INT 1
65099: ARRAY
65100: PUSH
65101: LD_STRING M
65103: NONEQUAL
65104: IFFALSE 65108
// exit ;
65106: GO 65174
// x := task [ 1 ] [ 2 ] ;
65108: LD_ADDR_VAR 0 5
65112: PUSH
65113: LD_VAR 0 7
65117: PUSH
65118: LD_INT 1
65120: ARRAY
65121: PUSH
65122: LD_INT 2
65124: ARRAY
65125: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65126: LD_ADDR_VAR 0 6
65130: PUSH
65131: LD_VAR 0 7
65135: PUSH
65136: LD_INT 1
65138: ARRAY
65139: PUSH
65140: LD_INT 3
65142: ARRAY
65143: ST_TO_ADDR
// if InArea ( x , y , area ) then
65144: LD_VAR 0 5
65148: PPUSH
65149: LD_VAR 0 6
65153: PPUSH
65154: LD_VAR 0 2
65158: PPUSH
65159: CALL_OW 309
65163: IFFALSE 65174
// ComStop ( unit ) ;
65165: LD_VAR 0 1
65169: PPUSH
65170: CALL_OW 141
// end ;
65174: LD_VAR 0 4
65178: RET
// export function Abs ( value ) ; begin
65179: LD_INT 0
65181: PPUSH
// result := value ;
65182: LD_ADDR_VAR 0 2
65186: PUSH
65187: LD_VAR 0 1
65191: ST_TO_ADDR
// if value < 0 then
65192: LD_VAR 0 1
65196: PUSH
65197: LD_INT 0
65199: LESS
65200: IFFALSE 65217
// result := value * - 1 ;
65202: LD_ADDR_VAR 0 2
65206: PUSH
65207: LD_VAR 0 1
65211: PUSH
65212: LD_INT 1
65214: NEG
65215: MUL
65216: ST_TO_ADDR
// end ;
65217: LD_VAR 0 2
65221: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65222: LD_INT 0
65224: PPUSH
65225: PPUSH
65226: PPUSH
65227: PPUSH
65228: PPUSH
65229: PPUSH
65230: PPUSH
65231: PPUSH
// if not unit or not building then
65232: LD_VAR 0 1
65236: NOT
65237: IFTRUE 65246
65239: PUSH
65240: LD_VAR 0 2
65244: NOT
65245: OR
65246: IFFALSE 65250
// exit ;
65248: GO 65478
// x := GetX ( building ) ;
65250: LD_ADDR_VAR 0 4
65254: PUSH
65255: LD_VAR 0 2
65259: PPUSH
65260: CALL_OW 250
65264: ST_TO_ADDR
// y := GetY ( building ) ;
65265: LD_ADDR_VAR 0 6
65269: PUSH
65270: LD_VAR 0 2
65274: PPUSH
65275: CALL_OW 251
65279: ST_TO_ADDR
// d := GetDir ( building ) ;
65280: LD_ADDR_VAR 0 8
65284: PUSH
65285: LD_VAR 0 2
65289: PPUSH
65290: CALL_OW 254
65294: ST_TO_ADDR
// r := 4 ;
65295: LD_ADDR_VAR 0 9
65299: PUSH
65300: LD_INT 4
65302: ST_TO_ADDR
// for i := 1 to 5 do
65303: LD_ADDR_VAR 0 10
65307: PUSH
65308: DOUBLE
65309: LD_INT 1
65311: DEC
65312: ST_TO_ADDR
65313: LD_INT 5
65315: PUSH
65316: FOR_TO
65317: IFFALSE 65476
// begin _x := ShiftX ( x , d , r + i ) ;
65319: LD_ADDR_VAR 0 5
65323: PUSH
65324: LD_VAR 0 4
65328: PPUSH
65329: LD_VAR 0 8
65333: PPUSH
65334: LD_VAR 0 9
65338: PUSH
65339: LD_VAR 0 10
65343: PLUS
65344: PPUSH
65345: CALL_OW 272
65349: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65350: LD_ADDR_VAR 0 7
65354: PUSH
65355: LD_VAR 0 6
65359: PPUSH
65360: LD_VAR 0 8
65364: PPUSH
65365: LD_VAR 0 9
65369: PUSH
65370: LD_VAR 0 10
65374: PLUS
65375: PPUSH
65376: CALL_OW 273
65380: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65381: LD_VAR 0 5
65385: PPUSH
65386: LD_VAR 0 7
65390: PPUSH
65391: CALL_OW 488
65395: IFFALSE 65430
65397: PUSH
65398: LD_VAR 0 5
65402: PPUSH
65403: LD_VAR 0 7
65407: PPUSH
65408: CALL_OW 428
65412: PPUSH
65413: CALL_OW 247
65417: PUSH
65418: LD_INT 3
65420: PUSH
65421: LD_INT 2
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: IN
65428: NOT
65429: AND
65430: IFFALSE 65474
// begin ComMoveXY ( unit , _x , _y ) ;
65432: LD_VAR 0 1
65436: PPUSH
65437: LD_VAR 0 5
65441: PPUSH
65442: LD_VAR 0 7
65446: PPUSH
65447: CALL_OW 111
// result := [ _x , _y ] ;
65451: LD_ADDR_VAR 0 3
65455: PUSH
65456: LD_VAR 0 5
65460: PUSH
65461: LD_VAR 0 7
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: ST_TO_ADDR
// exit ;
65470: POP
65471: POP
65472: GO 65478
// end ; end ;
65474: GO 65316
65476: POP
65477: POP
// end ;
65478: LD_VAR 0 3
65482: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65483: LD_INT 0
65485: PPUSH
65486: PPUSH
65487: PPUSH
// result := 0 ;
65488: LD_ADDR_VAR 0 3
65492: PUSH
65493: LD_INT 0
65495: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65496: LD_VAR 0 1
65500: PUSH
65501: LD_INT 0
65503: LESS
65504: IFTRUE 65516
65506: PUSH
65507: LD_VAR 0 1
65511: PUSH
65512: LD_INT 8
65514: GREATER
65515: OR
65516: IFTRUE 65528
65518: PUSH
65519: LD_VAR 0 2
65523: PUSH
65524: LD_INT 0
65526: LESS
65527: OR
65528: IFTRUE 65540
65530: PUSH
65531: LD_VAR 0 2
65535: PUSH
65536: LD_INT 8
65538: GREATER
65539: OR
65540: IFFALSE 65544
// exit ;
65542: GO 65619
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65544: LD_ADDR_VAR 0 4
65548: PUSH
65549: LD_INT 22
65551: PUSH
65552: LD_VAR 0 2
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PPUSH
65561: CALL_OW 69
65565: PUSH
65566: FOR_IN
65567: IFFALSE 65617
// begin un := UnitShoot ( i ) ;
65569: LD_ADDR_VAR 0 5
65573: PUSH
65574: LD_VAR 0 4
65578: PPUSH
65579: CALL_OW 504
65583: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65584: LD_VAR 0 5
65588: PPUSH
65589: CALL_OW 255
65593: PUSH
65594: LD_VAR 0 1
65598: EQUAL
65599: IFFALSE 65615
// begin result := un ;
65601: LD_ADDR_VAR 0 3
65605: PUSH
65606: LD_VAR 0 5
65610: ST_TO_ADDR
// exit ;
65611: POP
65612: POP
65613: GO 65619
// end ; end ;
65615: GO 65566
65617: POP
65618: POP
// end ;
65619: LD_VAR 0 3
65623: RET
// export function GetCargoBay ( units ) ; begin
65624: LD_INT 0
65626: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65627: LD_ADDR_VAR 0 2
65631: PUSH
65632: LD_VAR 0 1
65636: PPUSH
65637: LD_INT 2
65639: PUSH
65640: LD_INT 34
65642: PUSH
65643: LD_INT 12
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 34
65652: PUSH
65653: LD_INT 51
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 34
65662: PUSH
65663: LD_INT 32
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: LD_INT 34
65672: PUSH
65673: LD_INT 89
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: PPUSH
65687: CALL_OW 72
65691: ST_TO_ADDR
// end ;
65692: LD_VAR 0 2
65696: RET
// export function Negate ( value ) ; begin
65697: LD_INT 0
65699: PPUSH
// result := not value ;
65700: LD_ADDR_VAR 0 2
65704: PUSH
65705: LD_VAR 0 1
65709: NOT
65710: ST_TO_ADDR
// end ;
65711: LD_VAR 0 2
65715: RET
// export function Inc ( value ) ; begin
65716: LD_INT 0
65718: PPUSH
// result := value + 1 ;
65719: LD_ADDR_VAR 0 2
65723: PUSH
65724: LD_VAR 0 1
65728: PUSH
65729: LD_INT 1
65731: PLUS
65732: ST_TO_ADDR
// end ;
65733: LD_VAR 0 2
65737: RET
// export function Dec ( value ) ; begin
65738: LD_INT 0
65740: PPUSH
// result := value - 1 ;
65741: LD_ADDR_VAR 0 2
65745: PUSH
65746: LD_VAR 0 1
65750: PUSH
65751: LD_INT 1
65753: MINUS
65754: ST_TO_ADDR
// end ;
65755: LD_VAR 0 2
65759: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65760: LD_INT 0
65762: PPUSH
65763: PPUSH
65764: PPUSH
65765: PPUSH
65766: PPUSH
65767: PPUSH
65768: PPUSH
65769: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65770: LD_VAR 0 1
65774: PPUSH
65775: LD_VAR 0 2
65779: PPUSH
65780: CALL_OW 488
65784: NOT
65785: IFTRUE 65804
65787: PUSH
65788: LD_VAR 0 3
65792: PPUSH
65793: LD_VAR 0 4
65797: PPUSH
65798: CALL_OW 488
65802: NOT
65803: OR
65804: IFFALSE 65817
// begin result := - 1 ;
65806: LD_ADDR_VAR 0 5
65810: PUSH
65811: LD_INT 1
65813: NEG
65814: ST_TO_ADDR
// exit ;
65815: GO 66052
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65817: LD_ADDR_VAR 0 12
65821: PUSH
65822: LD_VAR 0 1
65826: PPUSH
65827: LD_VAR 0 2
65831: PPUSH
65832: LD_VAR 0 3
65836: PPUSH
65837: LD_VAR 0 4
65841: PPUSH
65842: CALL 64888 0 4
65846: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65847: LD_ADDR_VAR 0 11
65851: PUSH
65852: LD_VAR 0 1
65856: PPUSH
65857: LD_VAR 0 2
65861: PPUSH
65862: LD_VAR 0 12
65866: PUSH
65867: LD_INT 1
65869: ARRAY
65870: PPUSH
65871: LD_VAR 0 12
65875: PUSH
65876: LD_INT 2
65878: ARRAY
65879: PPUSH
65880: CALL_OW 298
65884: ST_TO_ADDR
// distance := 9999 ;
65885: LD_ADDR_VAR 0 10
65889: PUSH
65890: LD_INT 9999
65892: ST_TO_ADDR
// for i := 0 to 5 do
65893: LD_ADDR_VAR 0 6
65897: PUSH
65898: DOUBLE
65899: LD_INT 0
65901: DEC
65902: ST_TO_ADDR
65903: LD_INT 5
65905: PUSH
65906: FOR_TO
65907: IFFALSE 66050
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65909: LD_ADDR_VAR 0 7
65913: PUSH
65914: LD_VAR 0 1
65918: PPUSH
65919: LD_VAR 0 6
65923: PPUSH
65924: LD_VAR 0 11
65928: PPUSH
65929: CALL_OW 272
65933: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65934: LD_ADDR_VAR 0 8
65938: PUSH
65939: LD_VAR 0 2
65943: PPUSH
65944: LD_VAR 0 6
65948: PPUSH
65949: LD_VAR 0 11
65953: PPUSH
65954: CALL_OW 273
65958: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65959: LD_VAR 0 7
65963: PPUSH
65964: LD_VAR 0 8
65968: PPUSH
65969: CALL_OW 488
65973: NOT
65974: IFFALSE 65978
// continue ;
65976: GO 65906
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65978: LD_ADDR_VAR 0 9
65982: PUSH
65983: LD_VAR 0 12
65987: PUSH
65988: LD_INT 1
65990: ARRAY
65991: PPUSH
65992: LD_VAR 0 12
65996: PUSH
65997: LD_INT 2
65999: ARRAY
66000: PPUSH
66001: LD_VAR 0 7
66005: PPUSH
66006: LD_VAR 0 8
66010: PPUSH
66011: CALL_OW 298
66015: ST_TO_ADDR
// if tmp < distance then
66016: LD_VAR 0 9
66020: PUSH
66021: LD_VAR 0 10
66025: LESS
66026: IFFALSE 66048
// begin result := i ;
66028: LD_ADDR_VAR 0 5
66032: PUSH
66033: LD_VAR 0 6
66037: ST_TO_ADDR
// distance := tmp ;
66038: LD_ADDR_VAR 0 10
66042: PUSH
66043: LD_VAR 0 9
66047: ST_TO_ADDR
// end ; end ;
66048: GO 65906
66050: POP
66051: POP
// end ;
66052: LD_VAR 0 5
66056: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66057: LD_INT 0
66059: PPUSH
66060: PPUSH
// if not driver or not IsInUnit ( driver ) then
66061: LD_VAR 0 1
66065: NOT
66066: IFTRUE 66080
66068: PUSH
66069: LD_VAR 0 1
66073: PPUSH
66074: CALL_OW 310
66078: NOT
66079: OR
66080: IFFALSE 66084
// exit ;
66082: GO 66174
// vehicle := IsInUnit ( driver ) ;
66084: LD_ADDR_VAR 0 3
66088: PUSH
66089: LD_VAR 0 1
66093: PPUSH
66094: CALL_OW 310
66098: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66099: LD_VAR 0 1
66103: PPUSH
66104: LD_STRING \
66106: PUSH
66107: LD_INT 0
66109: PUSH
66110: LD_INT 0
66112: PUSH
66113: LD_INT 0
66115: PUSH
66116: LD_INT 0
66118: PUSH
66119: LD_INT 0
66121: PUSH
66122: LD_INT 0
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: PUSH
66134: LD_STRING E
66136: PUSH
66137: LD_INT 0
66139: PUSH
66140: LD_INT 0
66142: PUSH
66143: LD_VAR 0 3
66147: PUSH
66148: LD_INT 0
66150: PUSH
66151: LD_INT 0
66153: PUSH
66154: LD_INT 0
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PPUSH
66170: CALL_OW 446
// end ;
66174: LD_VAR 0 2
66178: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66179: LD_INT 0
66181: PPUSH
66182: PPUSH
// if not driver or not IsInUnit ( driver ) then
66183: LD_VAR 0 1
66187: NOT
66188: IFTRUE 66202
66190: PUSH
66191: LD_VAR 0 1
66195: PPUSH
66196: CALL_OW 310
66200: NOT
66201: OR
66202: IFFALSE 66206
// exit ;
66204: GO 66296
// vehicle := IsInUnit ( driver ) ;
66206: LD_ADDR_VAR 0 3
66210: PUSH
66211: LD_VAR 0 1
66215: PPUSH
66216: CALL_OW 310
66220: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66221: LD_VAR 0 1
66225: PPUSH
66226: LD_STRING \
66228: PUSH
66229: LD_INT 0
66231: PUSH
66232: LD_INT 0
66234: PUSH
66235: LD_INT 0
66237: PUSH
66238: LD_INT 0
66240: PUSH
66241: LD_INT 0
66243: PUSH
66244: LD_INT 0
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: PUSH
66256: LD_STRING E
66258: PUSH
66259: LD_INT 0
66261: PUSH
66262: LD_INT 0
66264: PUSH
66265: LD_VAR 0 3
66269: PUSH
66270: LD_INT 0
66272: PUSH
66273: LD_INT 0
66275: PUSH
66276: LD_INT 0
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PPUSH
66292: CALL_OW 447
// end ;
66296: LD_VAR 0 2
66300: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66301: LD_INT 0
66303: PPUSH
66304: PPUSH
66305: PPUSH
// tmp := [ ] ;
66306: LD_ADDR_VAR 0 5
66310: PUSH
66311: EMPTY
66312: ST_TO_ADDR
// for i in units do
66313: LD_ADDR_VAR 0 4
66317: PUSH
66318: LD_VAR 0 1
66322: PUSH
66323: FOR_IN
66324: IFFALSE 66362
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66326: LD_ADDR_VAR 0 5
66330: PUSH
66331: LD_VAR 0 5
66335: PPUSH
66336: LD_VAR 0 5
66340: PUSH
66341: LD_INT 1
66343: PLUS
66344: PPUSH
66345: LD_VAR 0 4
66349: PPUSH
66350: CALL_OW 256
66354: PPUSH
66355: CALL_OW 2
66359: ST_TO_ADDR
66360: GO 66323
66362: POP
66363: POP
// if not tmp then
66364: LD_VAR 0 5
66368: NOT
66369: IFFALSE 66373
// exit ;
66371: GO 66421
// if asc then
66373: LD_VAR 0 2
66377: IFFALSE 66401
// result := SortListByListAsc ( units , tmp ) else
66379: LD_ADDR_VAR 0 3
66383: PUSH
66384: LD_VAR 0 1
66388: PPUSH
66389: LD_VAR 0 5
66393: PPUSH
66394: CALL_OW 76
66398: ST_TO_ADDR
66399: GO 66421
// result := SortListByListDesc ( units , tmp ) ;
66401: LD_ADDR_VAR 0 3
66405: PUSH
66406: LD_VAR 0 1
66410: PPUSH
66411: LD_VAR 0 5
66415: PPUSH
66416: CALL_OW 77
66420: ST_TO_ADDR
// end ;
66421: LD_VAR 0 3
66425: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66426: LD_INT 0
66428: PPUSH
66429: PPUSH
// task := GetTaskList ( mech ) ;
66430: LD_ADDR_VAR 0 4
66434: PUSH
66435: LD_VAR 0 1
66439: PPUSH
66440: CALL_OW 437
66444: ST_TO_ADDR
// if not task then
66445: LD_VAR 0 4
66449: NOT
66450: IFFALSE 66454
// exit ;
66452: GO 66498
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66454: LD_ADDR_VAR 0 3
66458: PUSH
66459: LD_VAR 0 4
66463: PUSH
66464: LD_INT 1
66466: ARRAY
66467: PUSH
66468: LD_INT 1
66470: ARRAY
66471: PUSH
66472: LD_STRING r
66474: EQUAL
66475: IFFALSE 66497
66477: PUSH
66478: LD_VAR 0 4
66482: PUSH
66483: LD_INT 1
66485: ARRAY
66486: PUSH
66487: LD_INT 4
66489: ARRAY
66490: PUSH
66491: LD_VAR 0 2
66495: EQUAL
66496: AND
66497: ST_TO_ADDR
// end ;
66498: LD_VAR 0 3
66502: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66503: LD_INT 0
66505: PPUSH
// SetDir ( unit , d ) ;
66506: LD_VAR 0 1
66510: PPUSH
66511: LD_VAR 0 4
66515: PPUSH
66516: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
66520: LD_ADDR_VAR 0 6
66524: PUSH
66525: LD_VAR 0 1
66529: PPUSH
66530: LD_VAR 0 2
66534: PPUSH
66535: LD_VAR 0 3
66539: PPUSH
66540: LD_VAR 0 5
66544: PPUSH
66545: CALL_OW 48
66549: ST_TO_ADDR
// end ;
66550: LD_VAR 0 6
66554: RET
// export function ToNaturalNumber ( number ) ; begin
66555: LD_INT 0
66557: PPUSH
// result := number div 1 ;
66558: LD_ADDR_VAR 0 2
66562: PUSH
66563: LD_VAR 0 1
66567: PUSH
66568: LD_INT 1
66570: DIV
66571: ST_TO_ADDR
// if number < 0 then
66572: LD_VAR 0 1
66576: PUSH
66577: LD_INT 0
66579: LESS
66580: IFFALSE 66590
// result := 0 ;
66582: LD_ADDR_VAR 0 2
66586: PUSH
66587: LD_INT 0
66589: ST_TO_ADDR
// end ;
66590: LD_VAR 0 2
66594: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
66595: LD_INT 0
66597: PPUSH
66598: PPUSH
66599: PPUSH
// if not buildings then
66600: LD_VAR 0 1
66604: NOT
66605: IFFALSE 66609
// exit ;
66607: GO 66724
// tmp := [ ] ;
66609: LD_ADDR_VAR 0 5
66613: PUSH
66614: EMPTY
66615: ST_TO_ADDR
// for b in buildings do
66616: LD_ADDR_VAR 0 4
66620: PUSH
66621: LD_VAR 0 1
66625: PUSH
66626: FOR_IN
66627: IFFALSE 66665
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
66629: LD_ADDR_VAR 0 5
66633: PUSH
66634: LD_VAR 0 5
66638: PPUSH
66639: LD_VAR 0 5
66643: PUSH
66644: LD_INT 1
66646: PLUS
66647: PPUSH
66648: LD_VAR 0 4
66652: PPUSH
66653: CALL_OW 266
66657: PPUSH
66658: CALL_OW 1
66662: ST_TO_ADDR
66663: GO 66626
66665: POP
66666: POP
// if not tmp then
66667: LD_VAR 0 5
66671: NOT
66672: IFFALSE 66676
// exit ;
66674: GO 66724
// if asc then
66676: LD_VAR 0 2
66680: IFFALSE 66704
// result := SortListByListAsc ( buildings , tmp ) else
66682: LD_ADDR_VAR 0 3
66686: PUSH
66687: LD_VAR 0 1
66691: PPUSH
66692: LD_VAR 0 5
66696: PPUSH
66697: CALL_OW 76
66701: ST_TO_ADDR
66702: GO 66724
// result := SortListByListDesc ( buildings , tmp ) ;
66704: LD_ADDR_VAR 0 3
66708: PUSH
66709: LD_VAR 0 1
66713: PPUSH
66714: LD_VAR 0 5
66718: PPUSH
66719: CALL_OW 77
66723: ST_TO_ADDR
// end ;
66724: LD_VAR 0 3
66728: RET
// export function SortByClass ( units , class ) ; var un ; begin
66729: LD_INT 0
66731: PPUSH
66732: PPUSH
// if not units or not class then
66733: LD_VAR 0 1
66737: NOT
66738: IFTRUE 66747
66740: PUSH
66741: LD_VAR 0 2
66745: NOT
66746: OR
66747: IFFALSE 66751
// exit ;
66749: GO 66846
// result := [ ] ;
66751: LD_ADDR_VAR 0 3
66755: PUSH
66756: EMPTY
66757: ST_TO_ADDR
// for un in units do
66758: LD_ADDR_VAR 0 4
66762: PUSH
66763: LD_VAR 0 1
66767: PUSH
66768: FOR_IN
66769: IFFALSE 66844
// if GetClass ( un ) = class then
66771: LD_VAR 0 4
66775: PPUSH
66776: CALL_OW 257
66780: PUSH
66781: LD_VAR 0 2
66785: EQUAL
66786: IFFALSE 66813
// result := Insert ( result , 1 , un ) else
66788: LD_ADDR_VAR 0 3
66792: PUSH
66793: LD_VAR 0 3
66797: PPUSH
66798: LD_INT 1
66800: PPUSH
66801: LD_VAR 0 4
66805: PPUSH
66806: CALL_OW 2
66810: ST_TO_ADDR
66811: GO 66842
// result := Replace ( result , result + 1 , un ) ;
66813: LD_ADDR_VAR 0 3
66817: PUSH
66818: LD_VAR 0 3
66822: PPUSH
66823: LD_VAR 0 3
66827: PUSH
66828: LD_INT 1
66830: PLUS
66831: PPUSH
66832: LD_VAR 0 4
66836: PPUSH
66837: CALL_OW 1
66841: ST_TO_ADDR
66842: GO 66768
66844: POP
66845: POP
// end ;
66846: LD_VAR 0 3
66850: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66851: LD_INT 0
66853: PPUSH
66854: PPUSH
66855: PPUSH
66856: PPUSH
66857: PPUSH
66858: PPUSH
66859: PPUSH
// result := [ ] ;
66860: LD_ADDR_VAR 0 4
66864: PUSH
66865: EMPTY
66866: ST_TO_ADDR
// if x - r < 0 then
66867: LD_VAR 0 1
66871: PUSH
66872: LD_VAR 0 3
66876: MINUS
66877: PUSH
66878: LD_INT 0
66880: LESS
66881: IFFALSE 66893
// min_x := 0 else
66883: LD_ADDR_VAR 0 8
66887: PUSH
66888: LD_INT 0
66890: ST_TO_ADDR
66891: GO 66909
// min_x := x - r ;
66893: LD_ADDR_VAR 0 8
66897: PUSH
66898: LD_VAR 0 1
66902: PUSH
66903: LD_VAR 0 3
66907: MINUS
66908: ST_TO_ADDR
// if y - r < 0 then
66909: LD_VAR 0 2
66913: PUSH
66914: LD_VAR 0 3
66918: MINUS
66919: PUSH
66920: LD_INT 0
66922: LESS
66923: IFFALSE 66935
// min_y := 0 else
66925: LD_ADDR_VAR 0 7
66929: PUSH
66930: LD_INT 0
66932: ST_TO_ADDR
66933: GO 66951
// min_y := y - r ;
66935: LD_ADDR_VAR 0 7
66939: PUSH
66940: LD_VAR 0 2
66944: PUSH
66945: LD_VAR 0 3
66949: MINUS
66950: ST_TO_ADDR
// max_x := x + r ;
66951: LD_ADDR_VAR 0 9
66955: PUSH
66956: LD_VAR 0 1
66960: PUSH
66961: LD_VAR 0 3
66965: PLUS
66966: ST_TO_ADDR
// max_y := y + r ;
66967: LD_ADDR_VAR 0 10
66971: PUSH
66972: LD_VAR 0 2
66976: PUSH
66977: LD_VAR 0 3
66981: PLUS
66982: ST_TO_ADDR
// for _x = min_x to max_x do
66983: LD_ADDR_VAR 0 5
66987: PUSH
66988: DOUBLE
66989: LD_VAR 0 8
66993: DEC
66994: ST_TO_ADDR
66995: LD_VAR 0 9
66999: PUSH
67000: FOR_TO
67001: IFFALSE 67102
// for _y = min_y to max_y do
67003: LD_ADDR_VAR 0 6
67007: PUSH
67008: DOUBLE
67009: LD_VAR 0 7
67013: DEC
67014: ST_TO_ADDR
67015: LD_VAR 0 10
67019: PUSH
67020: FOR_TO
67021: IFFALSE 67098
// begin if not ValidHex ( _x , _y ) then
67023: LD_VAR 0 5
67027: PPUSH
67028: LD_VAR 0 6
67032: PPUSH
67033: CALL_OW 488
67037: NOT
67038: IFFALSE 67042
// continue ;
67040: GO 67020
// if GetResourceTypeXY ( _x , _y ) then
67042: LD_VAR 0 5
67046: PPUSH
67047: LD_VAR 0 6
67051: PPUSH
67052: CALL_OW 283
67056: IFFALSE 67096
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67058: LD_ADDR_VAR 0 4
67062: PUSH
67063: LD_VAR 0 4
67067: PPUSH
67068: LD_VAR 0 4
67072: PUSH
67073: LD_INT 1
67075: PLUS
67076: PPUSH
67077: LD_VAR 0 5
67081: PUSH
67082: LD_VAR 0 6
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PPUSH
67091: CALL_OW 1
67095: ST_TO_ADDR
// end ;
67096: GO 67020
67098: POP
67099: POP
67100: GO 67000
67102: POP
67103: POP
// end ;
67104: LD_VAR 0 4
67108: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67109: LD_INT 0
67111: PPUSH
67112: PPUSH
67113: PPUSH
67114: PPUSH
67115: PPUSH
67116: PPUSH
67117: PPUSH
67118: PPUSH
// if not units then
67119: LD_VAR 0 1
67123: NOT
67124: IFFALSE 67128
// exit ;
67126: GO 67660
// result := UnitFilter ( units , [ f_ok ] ) ;
67128: LD_ADDR_VAR 0 3
67132: PUSH
67133: LD_VAR 0 1
67137: PPUSH
67138: LD_INT 50
67140: PUSH
67141: EMPTY
67142: LIST
67143: PPUSH
67144: CALL_OW 72
67148: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67149: LD_ADDR_VAR 0 8
67153: PUSH
67154: LD_VAR 0 1
67158: PUSH
67159: LD_INT 1
67161: ARRAY
67162: PPUSH
67163: CALL_OW 255
67167: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67168: LD_ADDR_VAR 0 10
67172: PUSH
67173: LD_INT 29
67175: PUSH
67176: LD_INT 91
67178: PUSH
67179: LD_INT 49
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: LIST
67186: ST_TO_ADDR
// if not result then
67187: LD_VAR 0 3
67191: NOT
67192: IFFALSE 67196
// exit ;
67194: GO 67660
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67196: LD_ADDR_VAR 0 5
67200: PUSH
67201: LD_INT 81
67203: PUSH
67204: LD_VAR 0 8
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PPUSH
67213: CALL_OW 69
67217: ST_TO_ADDR
// for i in result do
67218: LD_ADDR_VAR 0 4
67222: PUSH
67223: LD_VAR 0 3
67227: PUSH
67228: FOR_IN
67229: IFFALSE 67658
// begin tag := GetTag ( i ) + 1 ;
67231: LD_ADDR_VAR 0 9
67235: PUSH
67236: LD_VAR 0 4
67240: PPUSH
67241: CALL_OW 110
67245: PUSH
67246: LD_INT 1
67248: PLUS
67249: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
67250: LD_ADDR_VAR 0 7
67254: PUSH
67255: LD_VAR 0 4
67259: PPUSH
67260: CALL_OW 250
67264: PPUSH
67265: LD_VAR 0 4
67269: PPUSH
67270: CALL_OW 251
67274: PPUSH
67275: LD_INT 4
67277: PPUSH
67278: CALL 66851 0 3
67282: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
67283: LD_VAR 0 4
67287: PPUSH
67288: CALL_OW 247
67292: PUSH
67293: LD_INT 2
67295: EQUAL
67296: IFFALSE 67308
67298: PUSH
67299: LD_VAR 0 7
67303: PUSH
67304: LD_INT 2
67306: GREATER
67307: AND
67308: IFFALSE 67328
67310: PUSH
67311: LD_VAR 0 4
67315: PPUSH
67316: CALL_OW 264
67320: PUSH
67321: LD_VAR 0 10
67325: IN
67326: NOT
67327: AND
67328: IFFALSE 67367
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67330: LD_VAR 0 4
67334: PPUSH
67335: LD_VAR 0 7
67339: PUSH
67340: LD_INT 1
67342: ARRAY
67343: PUSH
67344: LD_INT 1
67346: ARRAY
67347: PPUSH
67348: LD_VAR 0 7
67352: PUSH
67353: LD_INT 1
67355: ARRAY
67356: PUSH
67357: LD_INT 2
67359: ARRAY
67360: PPUSH
67361: CALL_OW 116
67365: GO 67656
// if path > tag then
67367: LD_VAR 0 2
67371: PUSH
67372: LD_VAR 0 9
67376: GREATER
67377: IFFALSE 67585
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67379: LD_ADDR_VAR 0 6
67383: PUSH
67384: LD_VAR 0 5
67388: PPUSH
67389: LD_INT 91
67391: PUSH
67392: LD_VAR 0 4
67396: PUSH
67397: LD_INT 8
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: LIST
67404: PPUSH
67405: CALL_OW 72
67409: ST_TO_ADDR
// if nearEnemy then
67410: LD_VAR 0 6
67414: IFFALSE 67483
// begin if GetWeapon ( i ) = ru_time_lapser then
67416: LD_VAR 0 4
67420: PPUSH
67421: CALL_OW 264
67425: PUSH
67426: LD_INT 49
67428: EQUAL
67429: IFFALSE 67457
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67431: LD_VAR 0 4
67435: PPUSH
67436: LD_VAR 0 6
67440: PPUSH
67441: LD_VAR 0 4
67445: PPUSH
67446: CALL_OW 74
67450: PPUSH
67451: CALL_OW 112
67455: GO 67481
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67457: LD_VAR 0 4
67461: PPUSH
67462: LD_VAR 0 6
67466: PPUSH
67467: LD_VAR 0 4
67471: PPUSH
67472: CALL_OW 74
67476: PPUSH
67477: CALL 68741 0 2
// end else
67481: GO 67583
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67483: LD_VAR 0 4
67487: PPUSH
67488: LD_VAR 0 2
67492: PUSH
67493: LD_VAR 0 9
67497: ARRAY
67498: PUSH
67499: LD_INT 1
67501: ARRAY
67502: PPUSH
67503: LD_VAR 0 2
67507: PUSH
67508: LD_VAR 0 9
67512: ARRAY
67513: PUSH
67514: LD_INT 2
67516: ARRAY
67517: PPUSH
67518: CALL_OW 297
67522: PUSH
67523: LD_INT 6
67525: GREATER
67526: IFFALSE 67569
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67528: LD_VAR 0 4
67532: PPUSH
67533: LD_VAR 0 2
67537: PUSH
67538: LD_VAR 0 9
67542: ARRAY
67543: PUSH
67544: LD_INT 1
67546: ARRAY
67547: PPUSH
67548: LD_VAR 0 2
67552: PUSH
67553: LD_VAR 0 9
67557: ARRAY
67558: PUSH
67559: LD_INT 2
67561: ARRAY
67562: PPUSH
67563: CALL_OW 114
67567: GO 67583
// SetTag ( i , tag ) ;
67569: LD_VAR 0 4
67573: PPUSH
67574: LD_VAR 0 9
67578: PPUSH
67579: CALL_OW 109
// end else
67583: GO 67656
// if enemy then
67585: LD_VAR 0 5
67589: IFFALSE 67656
// begin if GetWeapon ( i ) = ru_time_lapser then
67591: LD_VAR 0 4
67595: PPUSH
67596: CALL_OW 264
67600: PUSH
67601: LD_INT 49
67603: EQUAL
67604: IFFALSE 67632
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67606: LD_VAR 0 4
67610: PPUSH
67611: LD_VAR 0 5
67615: PPUSH
67616: LD_VAR 0 4
67620: PPUSH
67621: CALL_OW 74
67625: PPUSH
67626: CALL_OW 112
67630: GO 67656
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67632: LD_VAR 0 4
67636: PPUSH
67637: LD_VAR 0 5
67641: PPUSH
67642: LD_VAR 0 4
67646: PPUSH
67647: CALL_OW 74
67651: PPUSH
67652: CALL 68741 0 2
// end ; end ;
67656: GO 67228
67658: POP
67659: POP
// end ;
67660: LD_VAR 0 3
67664: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67665: LD_INT 0
67667: PPUSH
67668: PPUSH
67669: PPUSH
// if not unit or IsInUnit ( unit ) then
67670: LD_VAR 0 1
67674: NOT
67675: IFTRUE 67688
67677: PUSH
67678: LD_VAR 0 1
67682: PPUSH
67683: CALL_OW 310
67687: OR
67688: IFFALSE 67692
// exit ;
67690: GO 67783
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67692: LD_ADDR_VAR 0 4
67696: PUSH
67697: LD_VAR 0 1
67701: PPUSH
67702: CALL_OW 250
67706: PPUSH
67707: LD_VAR 0 2
67711: PPUSH
67712: LD_INT 1
67714: PPUSH
67715: CALL_OW 272
67719: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67720: LD_ADDR_VAR 0 5
67724: PUSH
67725: LD_VAR 0 1
67729: PPUSH
67730: CALL_OW 251
67734: PPUSH
67735: LD_VAR 0 2
67739: PPUSH
67740: LD_INT 1
67742: PPUSH
67743: CALL_OW 273
67747: ST_TO_ADDR
// if ValidHex ( x , y ) then
67748: LD_VAR 0 4
67752: PPUSH
67753: LD_VAR 0 5
67757: PPUSH
67758: CALL_OW 488
67762: IFFALSE 67783
// ComTurnXY ( unit , x , y ) ;
67764: LD_VAR 0 1
67768: PPUSH
67769: LD_VAR 0 4
67773: PPUSH
67774: LD_VAR 0 5
67778: PPUSH
67779: CALL_OW 118
// end ;
67783: LD_VAR 0 3
67787: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67788: LD_INT 0
67790: PPUSH
67791: PPUSH
// result := false ;
67792: LD_ADDR_VAR 0 3
67796: PUSH
67797: LD_INT 0
67799: ST_TO_ADDR
// if not units then
67800: LD_VAR 0 2
67804: NOT
67805: IFFALSE 67809
// exit ;
67807: GO 67854
// for i in units do
67809: LD_ADDR_VAR 0 4
67813: PUSH
67814: LD_VAR 0 2
67818: PUSH
67819: FOR_IN
67820: IFFALSE 67852
// if See ( side , i ) then
67822: LD_VAR 0 1
67826: PPUSH
67827: LD_VAR 0 4
67831: PPUSH
67832: CALL_OW 292
67836: IFFALSE 67850
// begin result := true ;
67838: LD_ADDR_VAR 0 3
67842: PUSH
67843: LD_INT 1
67845: ST_TO_ADDR
// exit ;
67846: POP
67847: POP
67848: GO 67854
// end ;
67850: GO 67819
67852: POP
67853: POP
// end ;
67854: LD_VAR 0 3
67858: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67859: LD_INT 0
67861: PPUSH
67862: PPUSH
67863: PPUSH
67864: PPUSH
// if not unit or not points then
67865: LD_VAR 0 1
67869: NOT
67870: IFTRUE 67879
67872: PUSH
67873: LD_VAR 0 2
67877: NOT
67878: OR
67879: IFFALSE 67883
// exit ;
67881: GO 67973
// dist := 99999 ;
67883: LD_ADDR_VAR 0 5
67887: PUSH
67888: LD_INT 99999
67890: ST_TO_ADDR
// for i in points do
67891: LD_ADDR_VAR 0 4
67895: PUSH
67896: LD_VAR 0 2
67900: PUSH
67901: FOR_IN
67902: IFFALSE 67971
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67904: LD_ADDR_VAR 0 6
67908: PUSH
67909: LD_VAR 0 1
67913: PPUSH
67914: LD_VAR 0 4
67918: PUSH
67919: LD_INT 1
67921: ARRAY
67922: PPUSH
67923: LD_VAR 0 4
67927: PUSH
67928: LD_INT 2
67930: ARRAY
67931: PPUSH
67932: CALL_OW 297
67936: ST_TO_ADDR
// if tmpDist < dist then
67937: LD_VAR 0 6
67941: PUSH
67942: LD_VAR 0 5
67946: LESS
67947: IFFALSE 67969
// begin result := i ;
67949: LD_ADDR_VAR 0 3
67953: PUSH
67954: LD_VAR 0 4
67958: ST_TO_ADDR
// dist := tmpDist ;
67959: LD_ADDR_VAR 0 5
67963: PUSH
67964: LD_VAR 0 6
67968: ST_TO_ADDR
// end ; end ;
67969: GO 67901
67971: POP
67972: POP
// end ;
67973: LD_VAR 0 3
67977: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67978: LD_INT 0
67980: PPUSH
// uc_side := side ;
67981: LD_ADDR_OWVAR 20
67985: PUSH
67986: LD_VAR 0 1
67990: ST_TO_ADDR
// uc_nation := 3 ;
67991: LD_ADDR_OWVAR 21
67995: PUSH
67996: LD_INT 3
67998: ST_TO_ADDR
// vc_chassis := 25 ;
67999: LD_ADDR_OWVAR 37
68003: PUSH
68004: LD_INT 25
68006: ST_TO_ADDR
// vc_engine := engine_siberite ;
68007: LD_ADDR_OWVAR 39
68011: PUSH
68012: LD_INT 3
68014: ST_TO_ADDR
// vc_control := control_computer ;
68015: LD_ADDR_OWVAR 38
68019: PUSH
68020: LD_INT 3
68022: ST_TO_ADDR
// vc_weapon := 59 ;
68023: LD_ADDR_OWVAR 40
68027: PUSH
68028: LD_INT 59
68030: ST_TO_ADDR
// result := CreateVehicle ;
68031: LD_ADDR_VAR 0 5
68035: PUSH
68036: CALL_OW 45
68040: ST_TO_ADDR
// SetDir ( result , d ) ;
68041: LD_VAR 0 5
68045: PPUSH
68046: LD_VAR 0 4
68050: PPUSH
68051: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68055: LD_VAR 0 5
68059: PPUSH
68060: LD_VAR 0 2
68064: PPUSH
68065: LD_VAR 0 3
68069: PPUSH
68070: LD_INT 0
68072: PPUSH
68073: CALL_OW 48
// end ;
68077: LD_VAR 0 5
68081: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68082: LD_INT 0
68084: PPUSH
68085: PPUSH
68086: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68087: LD_ADDR_VAR 0 2
68091: PUSH
68092: LD_INT 0
68094: PUSH
68095: LD_INT 0
68097: PUSH
68098: LD_INT 0
68100: PUSH
68101: LD_INT 0
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68110: LD_VAR 0 1
68114: NOT
68115: IFTRUE 68148
68117: PUSH
68118: LD_VAR 0 1
68122: PPUSH
68123: CALL_OW 264
68127: PUSH
68128: LD_INT 12
68130: PUSH
68131: LD_INT 51
68133: PUSH
68134: LD_INT 32
68136: PUSH
68137: LD_INT 89
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: IN
68146: NOT
68147: OR
68148: IFFALSE 68152
// exit ;
68150: GO 68250
// for i := 1 to 3 do
68152: LD_ADDR_VAR 0 3
68156: PUSH
68157: DOUBLE
68158: LD_INT 1
68160: DEC
68161: ST_TO_ADDR
68162: LD_INT 3
68164: PUSH
68165: FOR_TO
68166: IFFALSE 68248
// begin tmp := GetCargo ( cargo , i ) ;
68168: LD_ADDR_VAR 0 4
68172: PUSH
68173: LD_VAR 0 1
68177: PPUSH
68178: LD_VAR 0 3
68182: PPUSH
68183: CALL_OW 289
68187: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68188: LD_ADDR_VAR 0 2
68192: PUSH
68193: LD_VAR 0 2
68197: PPUSH
68198: LD_VAR 0 3
68202: PPUSH
68203: LD_VAR 0 4
68207: PPUSH
68208: CALL_OW 1
68212: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68213: LD_ADDR_VAR 0 2
68217: PUSH
68218: LD_VAR 0 2
68222: PPUSH
68223: LD_INT 4
68225: PPUSH
68226: LD_VAR 0 2
68230: PUSH
68231: LD_INT 4
68233: ARRAY
68234: PUSH
68235: LD_VAR 0 4
68239: PLUS
68240: PPUSH
68241: CALL_OW 1
68245: ST_TO_ADDR
// end ;
68246: GO 68165
68248: POP
68249: POP
// end ;
68250: LD_VAR 0 2
68254: RET
// export function Length ( array ) ; begin
68255: LD_INT 0
68257: PPUSH
// result := array + 0 ;
68258: LD_ADDR_VAR 0 2
68262: PUSH
68263: LD_VAR 0 1
68267: PUSH
68268: LD_INT 0
68270: PLUS
68271: ST_TO_ADDR
// end ;
68272: LD_VAR 0 2
68276: RET
// export function PrepareArray ( array ) ; begin
68277: LD_INT 0
68279: PPUSH
// result := array diff 0 ;
68280: LD_ADDR_VAR 0 2
68284: PUSH
68285: LD_VAR 0 1
68289: PUSH
68290: LD_INT 0
68292: DIFF
68293: ST_TO_ADDR
// if not result [ 1 ] then
68294: LD_VAR 0 2
68298: PUSH
68299: LD_INT 1
68301: ARRAY
68302: NOT
68303: IFFALSE 68323
// result := Delete ( result , 1 ) ;
68305: LD_ADDR_VAR 0 2
68309: PUSH
68310: LD_VAR 0 2
68314: PPUSH
68315: LD_INT 1
68317: PPUSH
68318: CALL_OW 3
68322: ST_TO_ADDR
// end ;
68323: LD_VAR 0 2
68327: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68328: LD_INT 0
68330: PPUSH
68331: PPUSH
68332: PPUSH
68333: PPUSH
// sibRocketRange := 25 ;
68334: LD_ADDR_VAR 0 6
68338: PUSH
68339: LD_INT 25
68341: ST_TO_ADDR
// result := false ;
68342: LD_ADDR_VAR 0 4
68346: PUSH
68347: LD_INT 0
68349: ST_TO_ADDR
// for i := 0 to 5 do
68350: LD_ADDR_VAR 0 5
68354: PUSH
68355: DOUBLE
68356: LD_INT 0
68358: DEC
68359: ST_TO_ADDR
68360: LD_INT 5
68362: PUSH
68363: FOR_TO
68364: IFFALSE 68431
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68366: LD_VAR 0 1
68370: PPUSH
68371: LD_VAR 0 5
68375: PPUSH
68376: LD_VAR 0 6
68380: PPUSH
68381: CALL_OW 272
68385: PPUSH
68386: LD_VAR 0 2
68390: PPUSH
68391: LD_VAR 0 5
68395: PPUSH
68396: LD_VAR 0 6
68400: PPUSH
68401: CALL_OW 273
68405: PPUSH
68406: LD_VAR 0 3
68410: PPUSH
68411: CALL_OW 309
68415: IFFALSE 68429
// begin result := true ;
68417: LD_ADDR_VAR 0 4
68421: PUSH
68422: LD_INT 1
68424: ST_TO_ADDR
// exit ;
68425: POP
68426: POP
68427: GO 68433
// end ;
68429: GO 68363
68431: POP
68432: POP
// end ;
68433: LD_VAR 0 4
68437: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
68438: LD_INT 0
68440: PPUSH
68441: PPUSH
68442: PPUSH
// if btype = b_depot then
68443: LD_VAR 0 2
68447: PUSH
68448: LD_INT 0
68450: EQUAL
68451: IFFALSE 68463
// begin result := true ;
68453: LD_ADDR_VAR 0 3
68457: PUSH
68458: LD_INT 1
68460: ST_TO_ADDR
// exit ;
68461: GO 68583
// end ; pom := GetBase ( depot ) ;
68463: LD_ADDR_VAR 0 4
68467: PUSH
68468: LD_VAR 0 1
68472: PPUSH
68473: CALL_OW 274
68477: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
68478: LD_ADDR_VAR 0 5
68482: PUSH
68483: LD_VAR 0 2
68487: PPUSH
68488: LD_VAR 0 1
68492: PPUSH
68493: CALL_OW 248
68497: PPUSH
68498: CALL_OW 450
68502: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
68503: LD_ADDR_VAR 0 3
68507: PUSH
68508: LD_VAR 0 4
68512: PPUSH
68513: LD_INT 1
68515: PPUSH
68516: CALL_OW 275
68520: PUSH
68521: LD_VAR 0 5
68525: PUSH
68526: LD_INT 1
68528: ARRAY
68529: GREATEREQUAL
68530: IFFALSE 68556
68532: PUSH
68533: LD_VAR 0 4
68537: PPUSH
68538: LD_INT 2
68540: PPUSH
68541: CALL_OW 275
68545: PUSH
68546: LD_VAR 0 5
68550: PUSH
68551: LD_INT 2
68553: ARRAY
68554: GREATEREQUAL
68555: AND
68556: IFFALSE 68582
68558: PUSH
68559: LD_VAR 0 4
68563: PPUSH
68564: LD_INT 3
68566: PPUSH
68567: CALL_OW 275
68571: PUSH
68572: LD_VAR 0 5
68576: PUSH
68577: LD_INT 3
68579: ARRAY
68580: GREATEREQUAL
68581: AND
68582: ST_TO_ADDR
// end ;
68583: LD_VAR 0 3
68587: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68588: LD_INT 0
68590: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68591: LD_VAR 0 1
68595: PPUSH
68596: LD_VAR 0 2
68600: PPUSH
68601: LD_INT 0
68603: PPUSH
68604: LD_INT 0
68606: PPUSH
68607: LD_INT 1
68609: PPUSH
68610: LD_INT 0
68612: PPUSH
68613: CALL_OW 587
// end ;
68617: LD_VAR 0 3
68621: RET
// export function CenterOnNow ( unit ) ; begin
68622: LD_INT 0
68624: PPUSH
// result := IsInUnit ( unit ) ;
68625: LD_ADDR_VAR 0 2
68629: PUSH
68630: LD_VAR 0 1
68634: PPUSH
68635: CALL_OW 310
68639: ST_TO_ADDR
// if not result then
68640: LD_VAR 0 2
68644: NOT
68645: IFFALSE 68657
// result := unit ;
68647: LD_ADDR_VAR 0 2
68651: PUSH
68652: LD_VAR 0 1
68656: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
68657: LD_VAR 0 1
68661: PPUSH
68662: CALL_OW 87
// end ;
68666: LD_VAR 0 2
68670: RET
// export function ComMoveHex ( unit , hex ) ; begin
68671: LD_INT 0
68673: PPUSH
// if not hex then
68674: LD_VAR 0 2
68678: NOT
68679: IFFALSE 68683
// exit ;
68681: GO 68736
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
68683: LD_VAR 0 2
68687: PUSH
68688: LD_INT 1
68690: ARRAY
68691: PPUSH
68692: LD_VAR 0 2
68696: PUSH
68697: LD_INT 2
68699: ARRAY
68700: PPUSH
68701: CALL_OW 428
68705: IFFALSE 68709
// exit ;
68707: GO 68736
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
68709: LD_VAR 0 1
68713: PPUSH
68714: LD_VAR 0 2
68718: PUSH
68719: LD_INT 1
68721: ARRAY
68722: PPUSH
68723: LD_VAR 0 2
68727: PUSH
68728: LD_INT 2
68730: ARRAY
68731: PPUSH
68732: CALL_OW 111
// end ;
68736: LD_VAR 0 3
68740: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
68741: LD_INT 0
68743: PPUSH
68744: PPUSH
68745: PPUSH
// if not unit or not enemy then
68746: LD_VAR 0 1
68750: NOT
68751: IFTRUE 68760
68753: PUSH
68754: LD_VAR 0 2
68758: NOT
68759: OR
68760: IFFALSE 68764
// exit ;
68762: GO 68890
// x := GetX ( enemy ) ;
68764: LD_ADDR_VAR 0 4
68768: PUSH
68769: LD_VAR 0 2
68773: PPUSH
68774: CALL_OW 250
68778: ST_TO_ADDR
// y := GetY ( enemy ) ;
68779: LD_ADDR_VAR 0 5
68783: PUSH
68784: LD_VAR 0 2
68788: PPUSH
68789: CALL_OW 251
68793: ST_TO_ADDR
// if ValidHex ( x , y ) then
68794: LD_VAR 0 4
68798: PPUSH
68799: LD_VAR 0 5
68803: PPUSH
68804: CALL_OW 488
68808: IFFALSE 68890
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
68810: LD_VAR 0 2
68814: PPUSH
68815: CALL_OW 247
68819: PUSH
68820: LD_INT 3
68822: PUSH
68823: LD_INT 2
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: IN
68830: IFTRUE 68853
68832: PUSH
68833: LD_VAR 0 1
68837: PPUSH
68838: CALL_OW 255
68842: PPUSH
68843: LD_VAR 0 2
68847: PPUSH
68848: CALL_OW 292
68852: OR
68853: IFFALSE 68871
// ComAttackUnit ( unit , enemy ) else
68855: LD_VAR 0 1
68859: PPUSH
68860: LD_VAR 0 2
68864: PPUSH
68865: CALL_OW 115
68869: GO 68890
// ComAgressiveMove ( unit , x , y ) ;
68871: LD_VAR 0 1
68875: PPUSH
68876: LD_VAR 0 4
68880: PPUSH
68881: LD_VAR 0 5
68885: PPUSH
68886: CALL_OW 114
// end ;
68890: LD_VAR 0 3
68894: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
68895: LD_INT 0
68897: PPUSH
68898: PPUSH
68899: PPUSH
// list := AreaToList ( area , 0 ) ;
68900: LD_ADDR_VAR 0 5
68904: PUSH
68905: LD_VAR 0 1
68909: PPUSH
68910: LD_INT 0
68912: PPUSH
68913: CALL_OW 517
68917: ST_TO_ADDR
// if not list then
68918: LD_VAR 0 5
68922: NOT
68923: IFFALSE 68927
// exit ;
68925: GO 69057
// if all then
68927: LD_VAR 0 2
68931: IFFALSE 69019
// begin for i := 1 to list [ 1 ] do
68933: LD_ADDR_VAR 0 4
68937: PUSH
68938: DOUBLE
68939: LD_INT 1
68941: DEC
68942: ST_TO_ADDR
68943: LD_VAR 0 5
68947: PUSH
68948: LD_INT 1
68950: ARRAY
68951: PUSH
68952: FOR_TO
68953: IFFALSE 69015
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
68955: LD_ADDR_VAR 0 3
68959: PUSH
68960: LD_VAR 0 3
68964: PPUSH
68965: LD_VAR 0 3
68969: PUSH
68970: LD_INT 1
68972: PLUS
68973: PPUSH
68974: LD_VAR 0 5
68978: PUSH
68979: LD_INT 1
68981: ARRAY
68982: PUSH
68983: LD_VAR 0 4
68987: ARRAY
68988: PUSH
68989: LD_VAR 0 5
68993: PUSH
68994: LD_INT 2
68996: ARRAY
68997: PUSH
68998: LD_VAR 0 4
69002: ARRAY
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PPUSH
69008: CALL_OW 1
69012: ST_TO_ADDR
69013: GO 68952
69015: POP
69016: POP
// exit ;
69017: GO 69057
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
69019: LD_ADDR_VAR 0 3
69023: PUSH
69024: LD_VAR 0 5
69028: PUSH
69029: LD_INT 1
69031: ARRAY
69032: PUSH
69033: LD_INT 1
69035: ARRAY
69036: PUSH
69037: LD_VAR 0 5
69041: PUSH
69042: LD_INT 2
69044: ARRAY
69045: PUSH
69046: LD_INT 1
69048: ARRAY
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: EMPTY
69055: LIST
69056: ST_TO_ADDR
// end ;
69057: LD_VAR 0 3
69061: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
69062: LD_INT 0
69064: PPUSH
69065: PPUSH
// list := AreaToList ( area , 0 ) ;
69066: LD_ADDR_VAR 0 4
69070: PUSH
69071: LD_VAR 0 1
69075: PPUSH
69076: LD_INT 0
69078: PPUSH
69079: CALL_OW 517
69083: ST_TO_ADDR
// if not list then
69084: LD_VAR 0 4
69088: NOT
69089: IFFALSE 69093
// exit ;
69091: GO 69134
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
69093: LD_ADDR_VAR 0 3
69097: PUSH
69098: LD_VAR 0 4
69102: PUSH
69103: LD_INT 1
69105: ARRAY
69106: PUSH
69107: LD_INT 1
69109: ARRAY
69110: PUSH
69111: LD_VAR 0 4
69115: PUSH
69116: LD_INT 2
69118: ARRAY
69119: PUSH
69120: LD_INT 1
69122: ARRAY
69123: PUSH
69124: LD_VAR 0 2
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: LIST
69133: ST_TO_ADDR
// end ;
69134: LD_VAR 0 3
69138: RET
// export function First ( array ) ; begin
69139: LD_INT 0
69141: PPUSH
// if not array then
69142: LD_VAR 0 1
69146: NOT
69147: IFFALSE 69151
// exit ;
69149: GO 69165
// result := array [ 1 ] ;
69151: LD_ADDR_VAR 0 2
69155: PUSH
69156: LD_VAR 0 1
69160: PUSH
69161: LD_INT 1
69163: ARRAY
69164: ST_TO_ADDR
// end ;
69165: LD_VAR 0 2
69169: RET
// export function Last ( array ) ; begin
69170: LD_INT 0
69172: PPUSH
// if not array then
69173: LD_VAR 0 1
69177: NOT
69178: IFFALSE 69182
// exit ;
69180: GO 69198
// result := array [ array ] ;
69182: LD_ADDR_VAR 0 2
69186: PUSH
69187: LD_VAR 0 1
69191: PUSH
69192: LD_VAR 0 1
69196: ARRAY
69197: ST_TO_ADDR
// end ;
69198: LD_VAR 0 2
69202: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
69203: LD_INT 0
69205: PPUSH
69206: PPUSH
// result := [ ] ;
69207: LD_ADDR_VAR 0 5
69211: PUSH
69212: EMPTY
69213: ST_TO_ADDR
// if not array then
69214: LD_VAR 0 1
69218: NOT
69219: IFFALSE 69223
// exit ;
69221: GO 69335
// for i := 1 to array do
69223: LD_ADDR_VAR 0 6
69227: PUSH
69228: DOUBLE
69229: LD_INT 1
69231: DEC
69232: ST_TO_ADDR
69233: LD_VAR 0 1
69237: PUSH
69238: FOR_TO
69239: IFFALSE 69333
// if array [ i ] [ index ] = value then
69241: LD_VAR 0 1
69245: PUSH
69246: LD_VAR 0 6
69250: ARRAY
69251: PUSH
69252: LD_VAR 0 2
69256: ARRAY
69257: PUSH
69258: LD_VAR 0 3
69262: EQUAL
69263: IFFALSE 69331
// begin if indexColumn then
69265: LD_VAR 0 4
69269: IFFALSE 69305
// result := Join ( result , array [ i ] [ indexColumn ] ) else
69271: LD_ADDR_VAR 0 5
69275: PUSH
69276: LD_VAR 0 5
69280: PPUSH
69281: LD_VAR 0 1
69285: PUSH
69286: LD_VAR 0 6
69290: ARRAY
69291: PUSH
69292: LD_VAR 0 4
69296: ARRAY
69297: PPUSH
69298: CALL 64343 0 2
69302: ST_TO_ADDR
69303: GO 69331
// result := Join ( result , array [ i ] ) ;
69305: LD_ADDR_VAR 0 5
69309: PUSH
69310: LD_VAR 0 5
69314: PPUSH
69315: LD_VAR 0 1
69319: PUSH
69320: LD_VAR 0 6
69324: ARRAY
69325: PPUSH
69326: CALL 64343 0 2
69330: ST_TO_ADDR
// end ;
69331: GO 69238
69333: POP
69334: POP
// end ;
69335: LD_VAR 0 5
69339: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
69340: LD_INT 0
69342: PPUSH
// if not vehicles or not parkingPoint then
69343: LD_VAR 0 1
69347: NOT
69348: IFTRUE 69357
69350: PUSH
69351: LD_VAR 0 2
69355: NOT
69356: OR
69357: IFFALSE 69361
// exit ;
69359: GO 69459
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
69361: LD_ADDR_VAR 0 1
69365: PUSH
69366: LD_VAR 0 1
69370: PPUSH
69371: LD_INT 50
69373: PUSH
69374: EMPTY
69375: LIST
69376: PUSH
69377: LD_INT 3
69379: PUSH
69380: LD_INT 92
69382: PUSH
69383: LD_VAR 0 2
69387: PUSH
69388: LD_INT 1
69390: ARRAY
69391: PUSH
69392: LD_VAR 0 2
69396: PUSH
69397: LD_INT 2
69399: ARRAY
69400: PUSH
69401: LD_INT 8
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PPUSH
69418: CALL_OW 72
69422: ST_TO_ADDR
// if not vehicles then
69423: LD_VAR 0 1
69427: NOT
69428: IFFALSE 69432
// exit ;
69430: GO 69459
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
69432: LD_VAR 0 1
69436: PPUSH
69437: LD_VAR 0 2
69441: PUSH
69442: LD_INT 1
69444: ARRAY
69445: PPUSH
69446: LD_VAR 0 2
69450: PUSH
69451: LD_INT 2
69453: ARRAY
69454: PPUSH
69455: CALL_OW 111
// end ;
69459: LD_VAR 0 3
69463: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
69464: LD_INT 0
69466: PPUSH
69467: PPUSH
69468: PPUSH
// if not side or not area then
69469: LD_VAR 0 1
69473: NOT
69474: IFTRUE 69483
69476: PUSH
69477: LD_VAR 0 2
69481: NOT
69482: OR
69483: IFFALSE 69487
// exit ;
69485: GO 69606
// tmp := AreaToList ( area , 0 ) ;
69487: LD_ADDR_VAR 0 5
69491: PUSH
69492: LD_VAR 0 2
69496: PPUSH
69497: LD_INT 0
69499: PPUSH
69500: CALL_OW 517
69504: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
69505: LD_ADDR_VAR 0 4
69509: PUSH
69510: DOUBLE
69511: LD_INT 1
69513: DEC
69514: ST_TO_ADDR
69515: LD_VAR 0 5
69519: PUSH
69520: LD_INT 1
69522: ARRAY
69523: PUSH
69524: FOR_TO
69525: IFFALSE 69604
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
69527: LD_VAR 0 5
69531: PUSH
69532: LD_INT 1
69534: ARRAY
69535: PUSH
69536: LD_VAR 0 4
69540: ARRAY
69541: PPUSH
69542: LD_VAR 0 5
69546: PUSH
69547: LD_INT 2
69549: ARRAY
69550: PUSH
69551: LD_VAR 0 4
69555: ARRAY
69556: PPUSH
69557: CALL_OW 351
69561: IFFALSE 69602
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
69563: LD_VAR 0 5
69567: PUSH
69568: LD_INT 1
69570: ARRAY
69571: PUSH
69572: LD_VAR 0 4
69576: ARRAY
69577: PPUSH
69578: LD_VAR 0 5
69582: PUSH
69583: LD_INT 2
69585: ARRAY
69586: PUSH
69587: LD_VAR 0 4
69591: ARRAY
69592: PPUSH
69593: LD_VAR 0 1
69597: PPUSH
69598: CALL_OW 244
// end ;
69602: GO 69524
69604: POP
69605: POP
// end ;
69606: LD_VAR 0 3
69610: RET
// export function UniqueArray ( array ) ; var i ; begin
69611: LD_INT 0
69613: PPUSH
69614: PPUSH
// result := [ ] ;
69615: LD_ADDR_VAR 0 2
69619: PUSH
69620: EMPTY
69621: ST_TO_ADDR
// if not array then
69622: LD_VAR 0 1
69626: NOT
69627: IFFALSE 69631
// exit ;
69629: GO 69692
// for i := 1 to array do
69631: LD_ADDR_VAR 0 3
69635: PUSH
69636: DOUBLE
69637: LD_INT 1
69639: DEC
69640: ST_TO_ADDR
69641: LD_VAR 0 1
69645: PUSH
69646: FOR_TO
69647: IFFALSE 69690
// if not array [ i ] in result then
69649: LD_VAR 0 1
69653: PUSH
69654: LD_VAR 0 3
69658: ARRAY
69659: PUSH
69660: LD_VAR 0 2
69664: IN
69665: NOT
69666: IFFALSE 69688
// result := Join ( result , i ) ;
69668: LD_ADDR_VAR 0 2
69672: PUSH
69673: LD_VAR 0 2
69677: PPUSH
69678: LD_VAR 0 3
69682: PPUSH
69683: CALL 64343 0 2
69687: ST_TO_ADDR
69688: GO 69646
69690: POP
69691: POP
// end ; end_of_file
69692: LD_VAR 0 2
69696: RET
// export globalGameSaveCounter ; every 0 0$1 do
69697: GO 69699
69699: DISABLE
// begin enable ;
69700: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
69701: LD_STRING updateTimer(
69703: PUSH
69704: LD_OWVAR 1
69708: STR
69709: PUSH
69710: LD_STRING );
69712: STR
69713: PPUSH
69714: CALL_OW 559
// end ;
69718: END
// every 0 0$1 do
69719: GO 69721
69721: DISABLE
// begin globalGameSaveCounter := 0 ;
69722: LD_ADDR_EXP 65
69726: PUSH
69727: LD_INT 0
69729: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
69730: LD_STRING setGameSaveCounter(0)
69732: PPUSH
69733: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
69737: LD_STRING initStreamRollete();
69739: PPUSH
69740: CALL_OW 559
// InitStreamMode ;
69744: CALL 71096 0 0
// DefineStreamItems ( false ) ;
69748: LD_INT 0
69750: PPUSH
69751: CALL 71560 0 1
// end ;
69755: END
// export function SOS_MapStart ( ) ; begin
69756: LD_INT 0
69758: PPUSH
// if streamModeActive then
69759: LD_EXP 66
69763: IFFALSE 69772
// DefineStreamItems ( true ) ;
69765: LD_INT 1
69767: PPUSH
69768: CALL 71560 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
69772: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
69774: PPUSH
69775: CALL_OW 559
// UpdateLuaVariables ( ) ;
69779: CALL 69796 0 0
// UpdateFactoryWaypoints ( ) ;
69783: CALL 84682 0 0
// UpdateWarehouseGatheringPoints ( ) ;
69787: CALL 84934 0 0
// end ;
69791: LD_VAR 0 1
69795: RET
// function UpdateLuaVariables ( ) ; begin
69796: LD_INT 0
69798: PPUSH
// if globalGameSaveCounter then
69799: LD_EXP 65
69803: IFFALSE 69837
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
69805: LD_ADDR_EXP 65
69809: PUSH
69810: LD_EXP 65
69814: PPUSH
69815: CALL 65716 0 1
69819: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
69820: LD_STRING setGameSaveCounter(
69822: PUSH
69823: LD_EXP 65
69827: STR
69828: PUSH
69829: LD_STRING )
69831: STR
69832: PPUSH
69833: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
69837: LD_STRING setGameDifficulty(
69839: PUSH
69840: LD_OWVAR 67
69844: STR
69845: PUSH
69846: LD_STRING )
69848: STR
69849: PPUSH
69850: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
69854: LD_STRING displayDifficulty(
69856: PUSH
69857: LD_OWVAR 67
69861: STR
69862: PUSH
69863: LD_STRING )
69865: STR
69866: PPUSH
69867: CALL_OW 559
// end ;
69871: LD_VAR 0 1
69875: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
69876: LD_INT 0
69878: PPUSH
// if p2 = stream_mode then
69879: LD_VAR 0 2
69883: PUSH
69884: LD_INT 100
69886: EQUAL
69887: IFFALSE 70890
// begin if not StreamModeActive then
69889: LD_EXP 66
69893: NOT
69894: IFFALSE 69904
// StreamModeActive := true ;
69896: LD_ADDR_EXP 66
69900: PUSH
69901: LD_INT 1
69903: ST_TO_ADDR
// if p3 = 0 then
69904: LD_VAR 0 3
69908: PUSH
69909: LD_INT 0
69911: EQUAL
69912: IFFALSE 69918
// InitStreamMode ;
69914: CALL 71096 0 0
// if p3 = 1 then
69918: LD_VAR 0 3
69922: PUSH
69923: LD_INT 1
69925: EQUAL
69926: IFFALSE 69936
// sRocket := true ;
69928: LD_ADDR_EXP 71
69932: PUSH
69933: LD_INT 1
69935: ST_TO_ADDR
// if p3 = 2 then
69936: LD_VAR 0 3
69940: PUSH
69941: LD_INT 2
69943: EQUAL
69944: IFFALSE 69954
// sSpeed := true ;
69946: LD_ADDR_EXP 70
69950: PUSH
69951: LD_INT 1
69953: ST_TO_ADDR
// if p3 = 3 then
69954: LD_VAR 0 3
69958: PUSH
69959: LD_INT 3
69961: EQUAL
69962: IFFALSE 69972
// sEngine := true ;
69964: LD_ADDR_EXP 72
69968: PUSH
69969: LD_INT 1
69971: ST_TO_ADDR
// if p3 = 4 then
69972: LD_VAR 0 3
69976: PUSH
69977: LD_INT 4
69979: EQUAL
69980: IFFALSE 69990
// sSpec := true ;
69982: LD_ADDR_EXP 69
69986: PUSH
69987: LD_INT 1
69989: ST_TO_ADDR
// if p3 = 5 then
69990: LD_VAR 0 3
69994: PUSH
69995: LD_INT 5
69997: EQUAL
69998: IFFALSE 70008
// sLevel := true ;
70000: LD_ADDR_EXP 73
70004: PUSH
70005: LD_INT 1
70007: ST_TO_ADDR
// if p3 = 6 then
70008: LD_VAR 0 3
70012: PUSH
70013: LD_INT 6
70015: EQUAL
70016: IFFALSE 70026
// sArmoury := true ;
70018: LD_ADDR_EXP 74
70022: PUSH
70023: LD_INT 1
70025: ST_TO_ADDR
// if p3 = 7 then
70026: LD_VAR 0 3
70030: PUSH
70031: LD_INT 7
70033: EQUAL
70034: IFFALSE 70044
// sRadar := true ;
70036: LD_ADDR_EXP 75
70040: PUSH
70041: LD_INT 1
70043: ST_TO_ADDR
// if p3 = 8 then
70044: LD_VAR 0 3
70048: PUSH
70049: LD_INT 8
70051: EQUAL
70052: IFFALSE 70062
// sBunker := true ;
70054: LD_ADDR_EXP 76
70058: PUSH
70059: LD_INT 1
70061: ST_TO_ADDR
// if p3 = 9 then
70062: LD_VAR 0 3
70066: PUSH
70067: LD_INT 9
70069: EQUAL
70070: IFFALSE 70080
// sHack := true ;
70072: LD_ADDR_EXP 77
70076: PUSH
70077: LD_INT 1
70079: ST_TO_ADDR
// if p3 = 10 then
70080: LD_VAR 0 3
70084: PUSH
70085: LD_INT 10
70087: EQUAL
70088: IFFALSE 70098
// sFire := true ;
70090: LD_ADDR_EXP 78
70094: PUSH
70095: LD_INT 1
70097: ST_TO_ADDR
// if p3 = 11 then
70098: LD_VAR 0 3
70102: PUSH
70103: LD_INT 11
70105: EQUAL
70106: IFFALSE 70116
// sRefresh := true ;
70108: LD_ADDR_EXP 79
70112: PUSH
70113: LD_INT 1
70115: ST_TO_ADDR
// if p3 = 12 then
70116: LD_VAR 0 3
70120: PUSH
70121: LD_INT 12
70123: EQUAL
70124: IFFALSE 70134
// sExp := true ;
70126: LD_ADDR_EXP 80
70130: PUSH
70131: LD_INT 1
70133: ST_TO_ADDR
// if p3 = 13 then
70134: LD_VAR 0 3
70138: PUSH
70139: LD_INT 13
70141: EQUAL
70142: IFFALSE 70152
// sDepot := true ;
70144: LD_ADDR_EXP 81
70148: PUSH
70149: LD_INT 1
70151: ST_TO_ADDR
// if p3 = 14 then
70152: LD_VAR 0 3
70156: PUSH
70157: LD_INT 14
70159: EQUAL
70160: IFFALSE 70170
// sFlag := true ;
70162: LD_ADDR_EXP 82
70166: PUSH
70167: LD_INT 1
70169: ST_TO_ADDR
// if p3 = 15 then
70170: LD_VAR 0 3
70174: PUSH
70175: LD_INT 15
70177: EQUAL
70178: IFFALSE 70188
// sKamikadze := true ;
70180: LD_ADDR_EXP 90
70184: PUSH
70185: LD_INT 1
70187: ST_TO_ADDR
// if p3 = 16 then
70188: LD_VAR 0 3
70192: PUSH
70193: LD_INT 16
70195: EQUAL
70196: IFFALSE 70206
// sTroll := true ;
70198: LD_ADDR_EXP 91
70202: PUSH
70203: LD_INT 1
70205: ST_TO_ADDR
// if p3 = 17 then
70206: LD_VAR 0 3
70210: PUSH
70211: LD_INT 17
70213: EQUAL
70214: IFFALSE 70224
// sSlow := true ;
70216: LD_ADDR_EXP 92
70220: PUSH
70221: LD_INT 1
70223: ST_TO_ADDR
// if p3 = 18 then
70224: LD_VAR 0 3
70228: PUSH
70229: LD_INT 18
70231: EQUAL
70232: IFFALSE 70242
// sLack := true ;
70234: LD_ADDR_EXP 93
70238: PUSH
70239: LD_INT 1
70241: ST_TO_ADDR
// if p3 = 19 then
70242: LD_VAR 0 3
70246: PUSH
70247: LD_INT 19
70249: EQUAL
70250: IFFALSE 70260
// sTank := true ;
70252: LD_ADDR_EXP 95
70256: PUSH
70257: LD_INT 1
70259: ST_TO_ADDR
// if p3 = 20 then
70260: LD_VAR 0 3
70264: PUSH
70265: LD_INT 20
70267: EQUAL
70268: IFFALSE 70278
// sRemote := true ;
70270: LD_ADDR_EXP 96
70274: PUSH
70275: LD_INT 1
70277: ST_TO_ADDR
// if p3 = 21 then
70278: LD_VAR 0 3
70282: PUSH
70283: LD_INT 21
70285: EQUAL
70286: IFFALSE 70296
// sPowell := true ;
70288: LD_ADDR_EXP 97
70292: PUSH
70293: LD_INT 1
70295: ST_TO_ADDR
// if p3 = 22 then
70296: LD_VAR 0 3
70300: PUSH
70301: LD_INT 22
70303: EQUAL
70304: IFFALSE 70314
// sTeleport := true ;
70306: LD_ADDR_EXP 100
70310: PUSH
70311: LD_INT 1
70313: ST_TO_ADDR
// if p3 = 23 then
70314: LD_VAR 0 3
70318: PUSH
70319: LD_INT 23
70321: EQUAL
70322: IFFALSE 70332
// sOilTower := true ;
70324: LD_ADDR_EXP 102
70328: PUSH
70329: LD_INT 1
70331: ST_TO_ADDR
// if p3 = 24 then
70332: LD_VAR 0 3
70336: PUSH
70337: LD_INT 24
70339: EQUAL
70340: IFFALSE 70350
// sShovel := true ;
70342: LD_ADDR_EXP 103
70346: PUSH
70347: LD_INT 1
70349: ST_TO_ADDR
// if p3 = 25 then
70350: LD_VAR 0 3
70354: PUSH
70355: LD_INT 25
70357: EQUAL
70358: IFFALSE 70368
// sSheik := true ;
70360: LD_ADDR_EXP 104
70364: PUSH
70365: LD_INT 1
70367: ST_TO_ADDR
// if p3 = 26 then
70368: LD_VAR 0 3
70372: PUSH
70373: LD_INT 26
70375: EQUAL
70376: IFFALSE 70386
// sEarthquake := true ;
70378: LD_ADDR_EXP 106
70382: PUSH
70383: LD_INT 1
70385: ST_TO_ADDR
// if p3 = 27 then
70386: LD_VAR 0 3
70390: PUSH
70391: LD_INT 27
70393: EQUAL
70394: IFFALSE 70404
// sAI := true ;
70396: LD_ADDR_EXP 107
70400: PUSH
70401: LD_INT 1
70403: ST_TO_ADDR
// if p3 = 28 then
70404: LD_VAR 0 3
70408: PUSH
70409: LD_INT 28
70411: EQUAL
70412: IFFALSE 70422
// sCargo := true ;
70414: LD_ADDR_EXP 110
70418: PUSH
70419: LD_INT 1
70421: ST_TO_ADDR
// if p3 = 29 then
70422: LD_VAR 0 3
70426: PUSH
70427: LD_INT 29
70429: EQUAL
70430: IFFALSE 70440
// sDLaser := true ;
70432: LD_ADDR_EXP 111
70436: PUSH
70437: LD_INT 1
70439: ST_TO_ADDR
// if p3 = 30 then
70440: LD_VAR 0 3
70444: PUSH
70445: LD_INT 30
70447: EQUAL
70448: IFFALSE 70458
// sExchange := true ;
70450: LD_ADDR_EXP 112
70454: PUSH
70455: LD_INT 1
70457: ST_TO_ADDR
// if p3 = 31 then
70458: LD_VAR 0 3
70462: PUSH
70463: LD_INT 31
70465: EQUAL
70466: IFFALSE 70476
// sFac := true ;
70468: LD_ADDR_EXP 113
70472: PUSH
70473: LD_INT 1
70475: ST_TO_ADDR
// if p3 = 32 then
70476: LD_VAR 0 3
70480: PUSH
70481: LD_INT 32
70483: EQUAL
70484: IFFALSE 70494
// sPower := true ;
70486: LD_ADDR_EXP 114
70490: PUSH
70491: LD_INT 1
70493: ST_TO_ADDR
// if p3 = 33 then
70494: LD_VAR 0 3
70498: PUSH
70499: LD_INT 33
70501: EQUAL
70502: IFFALSE 70512
// sRandom := true ;
70504: LD_ADDR_EXP 115
70508: PUSH
70509: LD_INT 1
70511: ST_TO_ADDR
// if p3 = 34 then
70512: LD_VAR 0 3
70516: PUSH
70517: LD_INT 34
70519: EQUAL
70520: IFFALSE 70530
// sShield := true ;
70522: LD_ADDR_EXP 116
70526: PUSH
70527: LD_INT 1
70529: ST_TO_ADDR
// if p3 = 35 then
70530: LD_VAR 0 3
70534: PUSH
70535: LD_INT 35
70537: EQUAL
70538: IFFALSE 70548
// sTime := true ;
70540: LD_ADDR_EXP 117
70544: PUSH
70545: LD_INT 1
70547: ST_TO_ADDR
// if p3 = 36 then
70548: LD_VAR 0 3
70552: PUSH
70553: LD_INT 36
70555: EQUAL
70556: IFFALSE 70566
// sTools := true ;
70558: LD_ADDR_EXP 118
70562: PUSH
70563: LD_INT 1
70565: ST_TO_ADDR
// if p3 = 101 then
70566: LD_VAR 0 3
70570: PUSH
70571: LD_INT 101
70573: EQUAL
70574: IFFALSE 70584
// sSold := true ;
70576: LD_ADDR_EXP 83
70580: PUSH
70581: LD_INT 1
70583: ST_TO_ADDR
// if p3 = 102 then
70584: LD_VAR 0 3
70588: PUSH
70589: LD_INT 102
70591: EQUAL
70592: IFFALSE 70602
// sDiff := true ;
70594: LD_ADDR_EXP 84
70598: PUSH
70599: LD_INT 1
70601: ST_TO_ADDR
// if p3 = 103 then
70602: LD_VAR 0 3
70606: PUSH
70607: LD_INT 103
70609: EQUAL
70610: IFFALSE 70620
// sFog := true ;
70612: LD_ADDR_EXP 87
70616: PUSH
70617: LD_INT 1
70619: ST_TO_ADDR
// if p3 = 104 then
70620: LD_VAR 0 3
70624: PUSH
70625: LD_INT 104
70627: EQUAL
70628: IFFALSE 70638
// sReset := true ;
70630: LD_ADDR_EXP 88
70634: PUSH
70635: LD_INT 1
70637: ST_TO_ADDR
// if p3 = 105 then
70638: LD_VAR 0 3
70642: PUSH
70643: LD_INT 105
70645: EQUAL
70646: IFFALSE 70656
// sSun := true ;
70648: LD_ADDR_EXP 89
70652: PUSH
70653: LD_INT 1
70655: ST_TO_ADDR
// if p3 = 106 then
70656: LD_VAR 0 3
70660: PUSH
70661: LD_INT 106
70663: EQUAL
70664: IFFALSE 70674
// sTiger := true ;
70666: LD_ADDR_EXP 85
70670: PUSH
70671: LD_INT 1
70673: ST_TO_ADDR
// if p3 = 107 then
70674: LD_VAR 0 3
70678: PUSH
70679: LD_INT 107
70681: EQUAL
70682: IFFALSE 70692
// sBomb := true ;
70684: LD_ADDR_EXP 86
70688: PUSH
70689: LD_INT 1
70691: ST_TO_ADDR
// if p3 = 108 then
70692: LD_VAR 0 3
70696: PUSH
70697: LD_INT 108
70699: EQUAL
70700: IFFALSE 70710
// sWound := true ;
70702: LD_ADDR_EXP 94
70706: PUSH
70707: LD_INT 1
70709: ST_TO_ADDR
// if p3 = 109 then
70710: LD_VAR 0 3
70714: PUSH
70715: LD_INT 109
70717: EQUAL
70718: IFFALSE 70728
// sBetray := true ;
70720: LD_ADDR_EXP 98
70724: PUSH
70725: LD_INT 1
70727: ST_TO_ADDR
// if p3 = 110 then
70728: LD_VAR 0 3
70732: PUSH
70733: LD_INT 110
70735: EQUAL
70736: IFFALSE 70746
// sContamin := true ;
70738: LD_ADDR_EXP 99
70742: PUSH
70743: LD_INT 1
70745: ST_TO_ADDR
// if p3 = 111 then
70746: LD_VAR 0 3
70750: PUSH
70751: LD_INT 111
70753: EQUAL
70754: IFFALSE 70764
// sOil := true ;
70756: LD_ADDR_EXP 101
70760: PUSH
70761: LD_INT 1
70763: ST_TO_ADDR
// if p3 = 112 then
70764: LD_VAR 0 3
70768: PUSH
70769: LD_INT 112
70771: EQUAL
70772: IFFALSE 70782
// sStu := true ;
70774: LD_ADDR_EXP 105
70778: PUSH
70779: LD_INT 1
70781: ST_TO_ADDR
// if p3 = 113 then
70782: LD_VAR 0 3
70786: PUSH
70787: LD_INT 113
70789: EQUAL
70790: IFFALSE 70800
// sBazooka := true ;
70792: LD_ADDR_EXP 108
70796: PUSH
70797: LD_INT 1
70799: ST_TO_ADDR
// if p3 = 114 then
70800: LD_VAR 0 3
70804: PUSH
70805: LD_INT 114
70807: EQUAL
70808: IFFALSE 70818
// sMortar := true ;
70810: LD_ADDR_EXP 109
70814: PUSH
70815: LD_INT 1
70817: ST_TO_ADDR
// if p3 = 115 then
70818: LD_VAR 0 3
70822: PUSH
70823: LD_INT 115
70825: EQUAL
70826: IFFALSE 70836
// sRanger := true ;
70828: LD_ADDR_EXP 119
70832: PUSH
70833: LD_INT 1
70835: ST_TO_ADDR
// if p3 = 116 then
70836: LD_VAR 0 3
70840: PUSH
70841: LD_INT 116
70843: EQUAL
70844: IFFALSE 70854
// sComputer := true ;
70846: LD_ADDR_EXP 120
70850: PUSH
70851: LD_INT 1
70853: ST_TO_ADDR
// if p3 = 117 then
70854: LD_VAR 0 3
70858: PUSH
70859: LD_INT 117
70861: EQUAL
70862: IFFALSE 70872
// s30 := true ;
70864: LD_ADDR_EXP 121
70868: PUSH
70869: LD_INT 1
70871: ST_TO_ADDR
// if p3 = 118 then
70872: LD_VAR 0 3
70876: PUSH
70877: LD_INT 118
70879: EQUAL
70880: IFFALSE 70890
// s60 := true ;
70882: LD_ADDR_EXP 122
70886: PUSH
70887: LD_INT 1
70889: ST_TO_ADDR
// end ; if p2 = hack_mode then
70890: LD_VAR 0 2
70894: PUSH
70895: LD_INT 101
70897: EQUAL
70898: IFFALSE 71026
// begin case p3 of 1 :
70900: LD_VAR 0 3
70904: PUSH
70905: LD_INT 1
70907: DOUBLE
70908: EQUAL
70909: IFTRUE 70913
70911: GO 70920
70913: POP
// hHackUnlimitedResources ; 2 :
70914: CALL 83289 0 0
70918: GO 71026
70920: LD_INT 2
70922: DOUBLE
70923: EQUAL
70924: IFTRUE 70928
70926: GO 70935
70928: POP
// hHackSetLevel10 ; 3 :
70929: CALL 83422 0 0
70933: GO 71026
70935: LD_INT 3
70937: DOUBLE
70938: EQUAL
70939: IFTRUE 70943
70941: GO 70950
70943: POP
// hHackSetLevel10YourUnits ; 4 :
70944: CALL 83507 0 0
70948: GO 71026
70950: LD_INT 4
70952: DOUBLE
70953: EQUAL
70954: IFTRUE 70958
70956: GO 70965
70958: POP
// hHackInvincible ; 5 :
70959: CALL 83955 0 0
70963: GO 71026
70965: LD_INT 5
70967: DOUBLE
70968: EQUAL
70969: IFTRUE 70973
70971: GO 70980
70973: POP
// hHackInvisible ; 6 :
70974: CALL 84066 0 0
70978: GO 71026
70980: LD_INT 6
70982: DOUBLE
70983: EQUAL
70984: IFTRUE 70988
70986: GO 70995
70988: POP
// hHackChangeYourSide ; 7 :
70989: CALL 84123 0 0
70993: GO 71026
70995: LD_INT 7
70997: DOUBLE
70998: EQUAL
70999: IFTRUE 71003
71001: GO 71010
71003: POP
// hHackChangeUnitSide ; 8 :
71004: CALL 84165 0 0
71008: GO 71026
71010: LD_INT 8
71012: DOUBLE
71013: EQUAL
71014: IFTRUE 71018
71016: GO 71025
71018: POP
// hHackFog ; end ;
71019: CALL 84266 0 0
71023: GO 71026
71025: POP
// end ; if p2 = game_save_mode then
71026: LD_VAR 0 2
71030: PUSH
71031: LD_INT 102
71033: EQUAL
71034: IFFALSE 71091
// begin if p3 = 1 then
71036: LD_VAR 0 3
71040: PUSH
71041: LD_INT 1
71043: EQUAL
71044: IFFALSE 71056
// globalGameSaveCounter := p4 ;
71046: LD_ADDR_EXP 65
71050: PUSH
71051: LD_VAR 0 4
71055: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
71056: LD_VAR 0 3
71060: PUSH
71061: LD_INT 2
71063: EQUAL
71064: IFFALSE 71072
71066: PUSH
71067: LD_EXP 65
71071: AND
71072: IFFALSE 71091
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
71074: LD_STRING setGameSaveCounter(
71076: PUSH
71077: LD_EXP 65
71081: STR
71082: PUSH
71083: LD_STRING )
71085: STR
71086: PPUSH
71087: CALL_OW 559
// end ; end ;
71091: LD_VAR 0 7
71095: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
71096: LD_INT 0
71098: PPUSH
// streamModeActive := false ;
71099: LD_ADDR_EXP 66
71103: PUSH
71104: LD_INT 0
71106: ST_TO_ADDR
// normalCounter := 36 ;
71107: LD_ADDR_EXP 67
71111: PUSH
71112: LD_INT 36
71114: ST_TO_ADDR
// hardcoreCounter := 18 ;
71115: LD_ADDR_EXP 68
71119: PUSH
71120: LD_INT 18
71122: ST_TO_ADDR
// sRocket := false ;
71123: LD_ADDR_EXP 71
71127: PUSH
71128: LD_INT 0
71130: ST_TO_ADDR
// sSpeed := false ;
71131: LD_ADDR_EXP 70
71135: PUSH
71136: LD_INT 0
71138: ST_TO_ADDR
// sEngine := false ;
71139: LD_ADDR_EXP 72
71143: PUSH
71144: LD_INT 0
71146: ST_TO_ADDR
// sSpec := false ;
71147: LD_ADDR_EXP 69
71151: PUSH
71152: LD_INT 0
71154: ST_TO_ADDR
// sLevel := false ;
71155: LD_ADDR_EXP 73
71159: PUSH
71160: LD_INT 0
71162: ST_TO_ADDR
// sArmoury := false ;
71163: LD_ADDR_EXP 74
71167: PUSH
71168: LD_INT 0
71170: ST_TO_ADDR
// sRadar := false ;
71171: LD_ADDR_EXP 75
71175: PUSH
71176: LD_INT 0
71178: ST_TO_ADDR
// sBunker := false ;
71179: LD_ADDR_EXP 76
71183: PUSH
71184: LD_INT 0
71186: ST_TO_ADDR
// sHack := false ;
71187: LD_ADDR_EXP 77
71191: PUSH
71192: LD_INT 0
71194: ST_TO_ADDR
// sFire := false ;
71195: LD_ADDR_EXP 78
71199: PUSH
71200: LD_INT 0
71202: ST_TO_ADDR
// sRefresh := false ;
71203: LD_ADDR_EXP 79
71207: PUSH
71208: LD_INT 0
71210: ST_TO_ADDR
// sExp := false ;
71211: LD_ADDR_EXP 80
71215: PUSH
71216: LD_INT 0
71218: ST_TO_ADDR
// sDepot := false ;
71219: LD_ADDR_EXP 81
71223: PUSH
71224: LD_INT 0
71226: ST_TO_ADDR
// sFlag := false ;
71227: LD_ADDR_EXP 82
71231: PUSH
71232: LD_INT 0
71234: ST_TO_ADDR
// sKamikadze := false ;
71235: LD_ADDR_EXP 90
71239: PUSH
71240: LD_INT 0
71242: ST_TO_ADDR
// sTroll := false ;
71243: LD_ADDR_EXP 91
71247: PUSH
71248: LD_INT 0
71250: ST_TO_ADDR
// sSlow := false ;
71251: LD_ADDR_EXP 92
71255: PUSH
71256: LD_INT 0
71258: ST_TO_ADDR
// sLack := false ;
71259: LD_ADDR_EXP 93
71263: PUSH
71264: LD_INT 0
71266: ST_TO_ADDR
// sTank := false ;
71267: LD_ADDR_EXP 95
71271: PUSH
71272: LD_INT 0
71274: ST_TO_ADDR
// sRemote := false ;
71275: LD_ADDR_EXP 96
71279: PUSH
71280: LD_INT 0
71282: ST_TO_ADDR
// sPowell := false ;
71283: LD_ADDR_EXP 97
71287: PUSH
71288: LD_INT 0
71290: ST_TO_ADDR
// sTeleport := false ;
71291: LD_ADDR_EXP 100
71295: PUSH
71296: LD_INT 0
71298: ST_TO_ADDR
// sOilTower := false ;
71299: LD_ADDR_EXP 102
71303: PUSH
71304: LD_INT 0
71306: ST_TO_ADDR
// sShovel := false ;
71307: LD_ADDR_EXP 103
71311: PUSH
71312: LD_INT 0
71314: ST_TO_ADDR
// sSheik := false ;
71315: LD_ADDR_EXP 104
71319: PUSH
71320: LD_INT 0
71322: ST_TO_ADDR
// sEarthquake := false ;
71323: LD_ADDR_EXP 106
71327: PUSH
71328: LD_INT 0
71330: ST_TO_ADDR
// sAI := false ;
71331: LD_ADDR_EXP 107
71335: PUSH
71336: LD_INT 0
71338: ST_TO_ADDR
// sCargo := false ;
71339: LD_ADDR_EXP 110
71343: PUSH
71344: LD_INT 0
71346: ST_TO_ADDR
// sDLaser := false ;
71347: LD_ADDR_EXP 111
71351: PUSH
71352: LD_INT 0
71354: ST_TO_ADDR
// sExchange := false ;
71355: LD_ADDR_EXP 112
71359: PUSH
71360: LD_INT 0
71362: ST_TO_ADDR
// sFac := false ;
71363: LD_ADDR_EXP 113
71367: PUSH
71368: LD_INT 0
71370: ST_TO_ADDR
// sPower := false ;
71371: LD_ADDR_EXP 114
71375: PUSH
71376: LD_INT 0
71378: ST_TO_ADDR
// sRandom := false ;
71379: LD_ADDR_EXP 115
71383: PUSH
71384: LD_INT 0
71386: ST_TO_ADDR
// sShield := false ;
71387: LD_ADDR_EXP 116
71391: PUSH
71392: LD_INT 0
71394: ST_TO_ADDR
// sTime := false ;
71395: LD_ADDR_EXP 117
71399: PUSH
71400: LD_INT 0
71402: ST_TO_ADDR
// sTools := false ;
71403: LD_ADDR_EXP 118
71407: PUSH
71408: LD_INT 0
71410: ST_TO_ADDR
// sSold := false ;
71411: LD_ADDR_EXP 83
71415: PUSH
71416: LD_INT 0
71418: ST_TO_ADDR
// sDiff := false ;
71419: LD_ADDR_EXP 84
71423: PUSH
71424: LD_INT 0
71426: ST_TO_ADDR
// sFog := false ;
71427: LD_ADDR_EXP 87
71431: PUSH
71432: LD_INT 0
71434: ST_TO_ADDR
// sReset := false ;
71435: LD_ADDR_EXP 88
71439: PUSH
71440: LD_INT 0
71442: ST_TO_ADDR
// sSun := false ;
71443: LD_ADDR_EXP 89
71447: PUSH
71448: LD_INT 0
71450: ST_TO_ADDR
// sTiger := false ;
71451: LD_ADDR_EXP 85
71455: PUSH
71456: LD_INT 0
71458: ST_TO_ADDR
// sBomb := false ;
71459: LD_ADDR_EXP 86
71463: PUSH
71464: LD_INT 0
71466: ST_TO_ADDR
// sWound := false ;
71467: LD_ADDR_EXP 94
71471: PUSH
71472: LD_INT 0
71474: ST_TO_ADDR
// sBetray := false ;
71475: LD_ADDR_EXP 98
71479: PUSH
71480: LD_INT 0
71482: ST_TO_ADDR
// sContamin := false ;
71483: LD_ADDR_EXP 99
71487: PUSH
71488: LD_INT 0
71490: ST_TO_ADDR
// sOil := false ;
71491: LD_ADDR_EXP 101
71495: PUSH
71496: LD_INT 0
71498: ST_TO_ADDR
// sStu := false ;
71499: LD_ADDR_EXP 105
71503: PUSH
71504: LD_INT 0
71506: ST_TO_ADDR
// sBazooka := false ;
71507: LD_ADDR_EXP 108
71511: PUSH
71512: LD_INT 0
71514: ST_TO_ADDR
// sMortar := false ;
71515: LD_ADDR_EXP 109
71519: PUSH
71520: LD_INT 0
71522: ST_TO_ADDR
// sRanger := false ;
71523: LD_ADDR_EXP 119
71527: PUSH
71528: LD_INT 0
71530: ST_TO_ADDR
// sComputer := false ;
71531: LD_ADDR_EXP 120
71535: PUSH
71536: LD_INT 0
71538: ST_TO_ADDR
// s30 := false ;
71539: LD_ADDR_EXP 121
71543: PUSH
71544: LD_INT 0
71546: ST_TO_ADDR
// s60 := false ;
71547: LD_ADDR_EXP 122
71551: PUSH
71552: LD_INT 0
71554: ST_TO_ADDR
// end ;
71555: LD_VAR 0 1
71559: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
71560: LD_INT 0
71562: PPUSH
71563: PPUSH
71564: PPUSH
71565: PPUSH
71566: PPUSH
71567: PPUSH
71568: PPUSH
// result := [ ] ;
71569: LD_ADDR_VAR 0 2
71573: PUSH
71574: EMPTY
71575: ST_TO_ADDR
// if campaign_id = 1 then
71576: LD_OWVAR 69
71580: PUSH
71581: LD_INT 1
71583: EQUAL
71584: IFFALSE 74750
// begin case mission_number of 1 :
71586: LD_OWVAR 70
71590: PUSH
71591: LD_INT 1
71593: DOUBLE
71594: EQUAL
71595: IFTRUE 71599
71597: GO 71675
71599: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
71600: LD_ADDR_VAR 0 2
71604: PUSH
71605: LD_INT 2
71607: PUSH
71608: LD_INT 4
71610: PUSH
71611: LD_INT 11
71613: PUSH
71614: LD_INT 12
71616: PUSH
71617: LD_INT 15
71619: PUSH
71620: LD_INT 16
71622: PUSH
71623: LD_INT 22
71625: PUSH
71626: LD_INT 23
71628: PUSH
71629: LD_INT 26
71631: PUSH
71632: EMPTY
71633: LIST
71634: LIST
71635: LIST
71636: LIST
71637: LIST
71638: LIST
71639: LIST
71640: LIST
71641: LIST
71642: PUSH
71643: LD_INT 101
71645: PUSH
71646: LD_INT 102
71648: PUSH
71649: LD_INT 106
71651: PUSH
71652: LD_INT 116
71654: PUSH
71655: LD_INT 117
71657: PUSH
71658: LD_INT 118
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: ST_TO_ADDR
71673: GO 74748
71675: LD_INT 2
71677: DOUBLE
71678: EQUAL
71679: IFTRUE 71683
71681: GO 71767
71683: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
71684: LD_ADDR_VAR 0 2
71688: PUSH
71689: LD_INT 2
71691: PUSH
71692: LD_INT 4
71694: PUSH
71695: LD_INT 11
71697: PUSH
71698: LD_INT 12
71700: PUSH
71701: LD_INT 15
71703: PUSH
71704: LD_INT 16
71706: PUSH
71707: LD_INT 22
71709: PUSH
71710: LD_INT 23
71712: PUSH
71713: LD_INT 26
71715: PUSH
71716: EMPTY
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: PUSH
71727: LD_INT 101
71729: PUSH
71730: LD_INT 102
71732: PUSH
71733: LD_INT 105
71735: PUSH
71736: LD_INT 106
71738: PUSH
71739: LD_INT 108
71741: PUSH
71742: LD_INT 116
71744: PUSH
71745: LD_INT 117
71747: PUSH
71748: LD_INT 118
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: LIST
71755: LIST
71756: LIST
71757: LIST
71758: LIST
71759: LIST
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: ST_TO_ADDR
71765: GO 74748
71767: LD_INT 3
71769: DOUBLE
71770: EQUAL
71771: IFTRUE 71775
71773: GO 71863
71775: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
71776: LD_ADDR_VAR 0 2
71780: PUSH
71781: LD_INT 2
71783: PUSH
71784: LD_INT 4
71786: PUSH
71787: LD_INT 5
71789: PUSH
71790: LD_INT 11
71792: PUSH
71793: LD_INT 12
71795: PUSH
71796: LD_INT 15
71798: PUSH
71799: LD_INT 16
71801: PUSH
71802: LD_INT 22
71804: PUSH
71805: LD_INT 26
71807: PUSH
71808: LD_INT 36
71810: PUSH
71811: EMPTY
71812: LIST
71813: LIST
71814: LIST
71815: LIST
71816: LIST
71817: LIST
71818: LIST
71819: LIST
71820: LIST
71821: LIST
71822: PUSH
71823: LD_INT 101
71825: PUSH
71826: LD_INT 102
71828: PUSH
71829: LD_INT 105
71831: PUSH
71832: LD_INT 106
71834: PUSH
71835: LD_INT 108
71837: PUSH
71838: LD_INT 116
71840: PUSH
71841: LD_INT 117
71843: PUSH
71844: LD_INT 118
71846: PUSH
71847: EMPTY
71848: LIST
71849: LIST
71850: LIST
71851: LIST
71852: LIST
71853: LIST
71854: LIST
71855: LIST
71856: PUSH
71857: EMPTY
71858: LIST
71859: LIST
71860: ST_TO_ADDR
71861: GO 74748
71863: LD_INT 4
71865: DOUBLE
71866: EQUAL
71867: IFTRUE 71871
71869: GO 71967
71871: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
71872: LD_ADDR_VAR 0 2
71876: PUSH
71877: LD_INT 2
71879: PUSH
71880: LD_INT 4
71882: PUSH
71883: LD_INT 5
71885: PUSH
71886: LD_INT 8
71888: PUSH
71889: LD_INT 11
71891: PUSH
71892: LD_INT 12
71894: PUSH
71895: LD_INT 15
71897: PUSH
71898: LD_INT 16
71900: PUSH
71901: LD_INT 22
71903: PUSH
71904: LD_INT 23
71906: PUSH
71907: LD_INT 26
71909: PUSH
71910: LD_INT 36
71912: PUSH
71913: EMPTY
71914: LIST
71915: LIST
71916: LIST
71917: LIST
71918: LIST
71919: LIST
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: PUSH
71927: LD_INT 101
71929: PUSH
71930: LD_INT 102
71932: PUSH
71933: LD_INT 105
71935: PUSH
71936: LD_INT 106
71938: PUSH
71939: LD_INT 108
71941: PUSH
71942: LD_INT 116
71944: PUSH
71945: LD_INT 117
71947: PUSH
71948: LD_INT 118
71950: PUSH
71951: EMPTY
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: ST_TO_ADDR
71965: GO 74748
71967: LD_INT 5
71969: DOUBLE
71970: EQUAL
71971: IFTRUE 71975
71973: GO 72087
71975: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
71976: LD_ADDR_VAR 0 2
71980: PUSH
71981: LD_INT 2
71983: PUSH
71984: LD_INT 4
71986: PUSH
71987: LD_INT 5
71989: PUSH
71990: LD_INT 6
71992: PUSH
71993: LD_INT 8
71995: PUSH
71996: LD_INT 11
71998: PUSH
71999: LD_INT 12
72001: PUSH
72002: LD_INT 15
72004: PUSH
72005: LD_INT 16
72007: PUSH
72008: LD_INT 22
72010: PUSH
72011: LD_INT 23
72013: PUSH
72014: LD_INT 25
72016: PUSH
72017: LD_INT 26
72019: PUSH
72020: LD_INT 36
72022: PUSH
72023: EMPTY
72024: LIST
72025: LIST
72026: LIST
72027: LIST
72028: LIST
72029: LIST
72030: LIST
72031: LIST
72032: LIST
72033: LIST
72034: LIST
72035: LIST
72036: LIST
72037: LIST
72038: PUSH
72039: LD_INT 101
72041: PUSH
72042: LD_INT 102
72044: PUSH
72045: LD_INT 105
72047: PUSH
72048: LD_INT 106
72050: PUSH
72051: LD_INT 108
72053: PUSH
72054: LD_INT 109
72056: PUSH
72057: LD_INT 112
72059: PUSH
72060: LD_INT 116
72062: PUSH
72063: LD_INT 117
72065: PUSH
72066: LD_INT 118
72068: PUSH
72069: EMPTY
72070: LIST
72071: LIST
72072: LIST
72073: LIST
72074: LIST
72075: LIST
72076: LIST
72077: LIST
72078: LIST
72079: LIST
72080: PUSH
72081: EMPTY
72082: LIST
72083: LIST
72084: ST_TO_ADDR
72085: GO 74748
72087: LD_INT 6
72089: DOUBLE
72090: EQUAL
72091: IFTRUE 72095
72093: GO 72227
72095: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
72096: LD_ADDR_VAR 0 2
72100: PUSH
72101: LD_INT 2
72103: PUSH
72104: LD_INT 4
72106: PUSH
72107: LD_INT 5
72109: PUSH
72110: LD_INT 6
72112: PUSH
72113: LD_INT 8
72115: PUSH
72116: LD_INT 11
72118: PUSH
72119: LD_INT 12
72121: PUSH
72122: LD_INT 15
72124: PUSH
72125: LD_INT 16
72127: PUSH
72128: LD_INT 20
72130: PUSH
72131: LD_INT 21
72133: PUSH
72134: LD_INT 22
72136: PUSH
72137: LD_INT 23
72139: PUSH
72140: LD_INT 25
72142: PUSH
72143: LD_INT 26
72145: PUSH
72146: LD_INT 30
72148: PUSH
72149: LD_INT 31
72151: PUSH
72152: LD_INT 32
72154: PUSH
72155: LD_INT 36
72157: PUSH
72158: EMPTY
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: LIST
72177: LIST
72178: PUSH
72179: LD_INT 101
72181: PUSH
72182: LD_INT 102
72184: PUSH
72185: LD_INT 105
72187: PUSH
72188: LD_INT 106
72190: PUSH
72191: LD_INT 108
72193: PUSH
72194: LD_INT 109
72196: PUSH
72197: LD_INT 112
72199: PUSH
72200: LD_INT 116
72202: PUSH
72203: LD_INT 117
72205: PUSH
72206: LD_INT 118
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: LIST
72213: LIST
72214: LIST
72215: LIST
72216: LIST
72217: LIST
72218: LIST
72219: LIST
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: ST_TO_ADDR
72225: GO 74748
72227: LD_INT 7
72229: DOUBLE
72230: EQUAL
72231: IFTRUE 72235
72233: GO 72347
72235: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
72236: LD_ADDR_VAR 0 2
72240: PUSH
72241: LD_INT 2
72243: PUSH
72244: LD_INT 4
72246: PUSH
72247: LD_INT 5
72249: PUSH
72250: LD_INT 7
72252: PUSH
72253: LD_INT 11
72255: PUSH
72256: LD_INT 12
72258: PUSH
72259: LD_INT 15
72261: PUSH
72262: LD_INT 16
72264: PUSH
72265: LD_INT 20
72267: PUSH
72268: LD_INT 21
72270: PUSH
72271: LD_INT 22
72273: PUSH
72274: LD_INT 23
72276: PUSH
72277: LD_INT 25
72279: PUSH
72280: LD_INT 26
72282: PUSH
72283: EMPTY
72284: LIST
72285: LIST
72286: LIST
72287: LIST
72288: LIST
72289: LIST
72290: LIST
72291: LIST
72292: LIST
72293: LIST
72294: LIST
72295: LIST
72296: LIST
72297: LIST
72298: PUSH
72299: LD_INT 101
72301: PUSH
72302: LD_INT 102
72304: PUSH
72305: LD_INT 103
72307: PUSH
72308: LD_INT 105
72310: PUSH
72311: LD_INT 106
72313: PUSH
72314: LD_INT 108
72316: PUSH
72317: LD_INT 112
72319: PUSH
72320: LD_INT 116
72322: PUSH
72323: LD_INT 117
72325: PUSH
72326: LD_INT 118
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: LIST
72333: LIST
72334: LIST
72335: LIST
72336: LIST
72337: LIST
72338: LIST
72339: LIST
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: ST_TO_ADDR
72345: GO 74748
72347: LD_INT 8
72349: DOUBLE
72350: EQUAL
72351: IFTRUE 72355
72353: GO 72495
72355: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
72356: LD_ADDR_VAR 0 2
72360: PUSH
72361: LD_INT 2
72363: PUSH
72364: LD_INT 4
72366: PUSH
72367: LD_INT 5
72369: PUSH
72370: LD_INT 6
72372: PUSH
72373: LD_INT 7
72375: PUSH
72376: LD_INT 8
72378: PUSH
72379: LD_INT 11
72381: PUSH
72382: LD_INT 12
72384: PUSH
72385: LD_INT 15
72387: PUSH
72388: LD_INT 16
72390: PUSH
72391: LD_INT 20
72393: PUSH
72394: LD_INT 21
72396: PUSH
72397: LD_INT 22
72399: PUSH
72400: LD_INT 23
72402: PUSH
72403: LD_INT 25
72405: PUSH
72406: LD_INT 26
72408: PUSH
72409: LD_INT 30
72411: PUSH
72412: LD_INT 31
72414: PUSH
72415: LD_INT 32
72417: PUSH
72418: LD_INT 36
72420: PUSH
72421: EMPTY
72422: LIST
72423: LIST
72424: LIST
72425: LIST
72426: LIST
72427: LIST
72428: LIST
72429: LIST
72430: LIST
72431: LIST
72432: LIST
72433: LIST
72434: LIST
72435: LIST
72436: LIST
72437: LIST
72438: LIST
72439: LIST
72440: LIST
72441: LIST
72442: PUSH
72443: LD_INT 101
72445: PUSH
72446: LD_INT 102
72448: PUSH
72449: LD_INT 103
72451: PUSH
72452: LD_INT 105
72454: PUSH
72455: LD_INT 106
72457: PUSH
72458: LD_INT 108
72460: PUSH
72461: LD_INT 109
72463: PUSH
72464: LD_INT 112
72466: PUSH
72467: LD_INT 116
72469: PUSH
72470: LD_INT 117
72472: PUSH
72473: LD_INT 118
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: PUSH
72489: EMPTY
72490: LIST
72491: LIST
72492: ST_TO_ADDR
72493: GO 74748
72495: LD_INT 9
72497: DOUBLE
72498: EQUAL
72499: IFTRUE 72503
72501: GO 72651
72503: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
72504: LD_ADDR_VAR 0 2
72508: PUSH
72509: LD_INT 2
72511: PUSH
72512: LD_INT 4
72514: PUSH
72515: LD_INT 5
72517: PUSH
72518: LD_INT 6
72520: PUSH
72521: LD_INT 7
72523: PUSH
72524: LD_INT 8
72526: PUSH
72527: LD_INT 11
72529: PUSH
72530: LD_INT 12
72532: PUSH
72533: LD_INT 15
72535: PUSH
72536: LD_INT 16
72538: PUSH
72539: LD_INT 20
72541: PUSH
72542: LD_INT 21
72544: PUSH
72545: LD_INT 22
72547: PUSH
72548: LD_INT 23
72550: PUSH
72551: LD_INT 25
72553: PUSH
72554: LD_INT 26
72556: PUSH
72557: LD_INT 28
72559: PUSH
72560: LD_INT 30
72562: PUSH
72563: LD_INT 31
72565: PUSH
72566: LD_INT 32
72568: PUSH
72569: LD_INT 36
72571: PUSH
72572: EMPTY
72573: LIST
72574: LIST
72575: LIST
72576: LIST
72577: LIST
72578: LIST
72579: LIST
72580: LIST
72581: LIST
72582: LIST
72583: LIST
72584: LIST
72585: LIST
72586: LIST
72587: LIST
72588: LIST
72589: LIST
72590: LIST
72591: LIST
72592: LIST
72593: LIST
72594: PUSH
72595: LD_INT 101
72597: PUSH
72598: LD_INT 102
72600: PUSH
72601: LD_INT 103
72603: PUSH
72604: LD_INT 105
72606: PUSH
72607: LD_INT 106
72609: PUSH
72610: LD_INT 108
72612: PUSH
72613: LD_INT 109
72615: PUSH
72616: LD_INT 112
72618: PUSH
72619: LD_INT 114
72621: PUSH
72622: LD_INT 116
72624: PUSH
72625: LD_INT 117
72627: PUSH
72628: LD_INT 118
72630: PUSH
72631: EMPTY
72632: LIST
72633: LIST
72634: LIST
72635: LIST
72636: LIST
72637: LIST
72638: LIST
72639: LIST
72640: LIST
72641: LIST
72642: LIST
72643: LIST
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: ST_TO_ADDR
72649: GO 74748
72651: LD_INT 10
72653: DOUBLE
72654: EQUAL
72655: IFTRUE 72659
72657: GO 72855
72659: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
72660: LD_ADDR_VAR 0 2
72664: PUSH
72665: LD_INT 2
72667: PUSH
72668: LD_INT 4
72670: PUSH
72671: LD_INT 5
72673: PUSH
72674: LD_INT 6
72676: PUSH
72677: LD_INT 7
72679: PUSH
72680: LD_INT 8
72682: PUSH
72683: LD_INT 9
72685: PUSH
72686: LD_INT 10
72688: PUSH
72689: LD_INT 11
72691: PUSH
72692: LD_INT 12
72694: PUSH
72695: LD_INT 13
72697: PUSH
72698: LD_INT 14
72700: PUSH
72701: LD_INT 15
72703: PUSH
72704: LD_INT 16
72706: PUSH
72707: LD_INT 17
72709: PUSH
72710: LD_INT 18
72712: PUSH
72713: LD_INT 19
72715: PUSH
72716: LD_INT 20
72718: PUSH
72719: LD_INT 21
72721: PUSH
72722: LD_INT 22
72724: PUSH
72725: LD_INT 23
72727: PUSH
72728: LD_INT 24
72730: PUSH
72731: LD_INT 25
72733: PUSH
72734: LD_INT 26
72736: PUSH
72737: LD_INT 28
72739: PUSH
72740: LD_INT 30
72742: PUSH
72743: LD_INT 31
72745: PUSH
72746: LD_INT 32
72748: PUSH
72749: LD_INT 36
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: LIST
72756: LIST
72757: LIST
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: LIST
72764: LIST
72765: LIST
72766: LIST
72767: LIST
72768: LIST
72769: LIST
72770: LIST
72771: LIST
72772: LIST
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: PUSH
72783: LD_INT 101
72785: PUSH
72786: LD_INT 102
72788: PUSH
72789: LD_INT 103
72791: PUSH
72792: LD_INT 104
72794: PUSH
72795: LD_INT 105
72797: PUSH
72798: LD_INT 106
72800: PUSH
72801: LD_INT 107
72803: PUSH
72804: LD_INT 108
72806: PUSH
72807: LD_INT 109
72809: PUSH
72810: LD_INT 110
72812: PUSH
72813: LD_INT 111
72815: PUSH
72816: LD_INT 112
72818: PUSH
72819: LD_INT 114
72821: PUSH
72822: LD_INT 116
72824: PUSH
72825: LD_INT 117
72827: PUSH
72828: LD_INT 118
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: LIST
72835: LIST
72836: LIST
72837: LIST
72838: LIST
72839: LIST
72840: LIST
72841: LIST
72842: LIST
72843: LIST
72844: LIST
72845: LIST
72846: LIST
72847: LIST
72848: PUSH
72849: EMPTY
72850: LIST
72851: LIST
72852: ST_TO_ADDR
72853: GO 74748
72855: LD_INT 11
72857: DOUBLE
72858: EQUAL
72859: IFTRUE 72863
72861: GO 73067
72863: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
72864: LD_ADDR_VAR 0 2
72868: PUSH
72869: LD_INT 2
72871: PUSH
72872: LD_INT 3
72874: PUSH
72875: LD_INT 4
72877: PUSH
72878: LD_INT 5
72880: PUSH
72881: LD_INT 6
72883: PUSH
72884: LD_INT 7
72886: PUSH
72887: LD_INT 8
72889: PUSH
72890: LD_INT 9
72892: PUSH
72893: LD_INT 10
72895: PUSH
72896: LD_INT 11
72898: PUSH
72899: LD_INT 12
72901: PUSH
72902: LD_INT 13
72904: PUSH
72905: LD_INT 14
72907: PUSH
72908: LD_INT 15
72910: PUSH
72911: LD_INT 16
72913: PUSH
72914: LD_INT 17
72916: PUSH
72917: LD_INT 18
72919: PUSH
72920: LD_INT 19
72922: PUSH
72923: LD_INT 20
72925: PUSH
72926: LD_INT 21
72928: PUSH
72929: LD_INT 22
72931: PUSH
72932: LD_INT 23
72934: PUSH
72935: LD_INT 24
72937: PUSH
72938: LD_INT 25
72940: PUSH
72941: LD_INT 26
72943: PUSH
72944: LD_INT 28
72946: PUSH
72947: LD_INT 30
72949: PUSH
72950: LD_INT 31
72952: PUSH
72953: LD_INT 32
72955: PUSH
72956: LD_INT 34
72958: PUSH
72959: LD_INT 36
72961: PUSH
72962: EMPTY
72963: LIST
72964: LIST
72965: LIST
72966: LIST
72967: LIST
72968: LIST
72969: LIST
72970: LIST
72971: LIST
72972: LIST
72973: LIST
72974: LIST
72975: LIST
72976: LIST
72977: LIST
72978: LIST
72979: LIST
72980: LIST
72981: LIST
72982: LIST
72983: LIST
72984: LIST
72985: LIST
72986: LIST
72987: LIST
72988: LIST
72989: LIST
72990: LIST
72991: LIST
72992: LIST
72993: LIST
72994: PUSH
72995: LD_INT 101
72997: PUSH
72998: LD_INT 102
73000: PUSH
73001: LD_INT 103
73003: PUSH
73004: LD_INT 104
73006: PUSH
73007: LD_INT 105
73009: PUSH
73010: LD_INT 106
73012: PUSH
73013: LD_INT 107
73015: PUSH
73016: LD_INT 108
73018: PUSH
73019: LD_INT 109
73021: PUSH
73022: LD_INT 110
73024: PUSH
73025: LD_INT 111
73027: PUSH
73028: LD_INT 112
73030: PUSH
73031: LD_INT 114
73033: PUSH
73034: LD_INT 116
73036: PUSH
73037: LD_INT 117
73039: PUSH
73040: LD_INT 118
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: LIST
73047: LIST
73048: LIST
73049: LIST
73050: LIST
73051: LIST
73052: LIST
73053: LIST
73054: LIST
73055: LIST
73056: LIST
73057: LIST
73058: LIST
73059: LIST
73060: PUSH
73061: EMPTY
73062: LIST
73063: LIST
73064: ST_TO_ADDR
73065: GO 74748
73067: LD_INT 12
73069: DOUBLE
73070: EQUAL
73071: IFTRUE 73075
73073: GO 73295
73075: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
73076: LD_ADDR_VAR 0 2
73080: PUSH
73081: LD_INT 1
73083: PUSH
73084: LD_INT 2
73086: PUSH
73087: LD_INT 3
73089: PUSH
73090: LD_INT 4
73092: PUSH
73093: LD_INT 5
73095: PUSH
73096: LD_INT 6
73098: PUSH
73099: LD_INT 7
73101: PUSH
73102: LD_INT 8
73104: PUSH
73105: LD_INT 9
73107: PUSH
73108: LD_INT 10
73110: PUSH
73111: LD_INT 11
73113: PUSH
73114: LD_INT 12
73116: PUSH
73117: LD_INT 13
73119: PUSH
73120: LD_INT 14
73122: PUSH
73123: LD_INT 15
73125: PUSH
73126: LD_INT 16
73128: PUSH
73129: LD_INT 17
73131: PUSH
73132: LD_INT 18
73134: PUSH
73135: LD_INT 19
73137: PUSH
73138: LD_INT 20
73140: PUSH
73141: LD_INT 21
73143: PUSH
73144: LD_INT 22
73146: PUSH
73147: LD_INT 23
73149: PUSH
73150: LD_INT 24
73152: PUSH
73153: LD_INT 25
73155: PUSH
73156: LD_INT 26
73158: PUSH
73159: LD_INT 27
73161: PUSH
73162: LD_INT 28
73164: PUSH
73165: LD_INT 30
73167: PUSH
73168: LD_INT 31
73170: PUSH
73171: LD_INT 32
73173: PUSH
73174: LD_INT 33
73176: PUSH
73177: LD_INT 34
73179: PUSH
73180: LD_INT 36
73182: PUSH
73183: EMPTY
73184: LIST
73185: LIST
73186: LIST
73187: LIST
73188: LIST
73189: LIST
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: LIST
73198: LIST
73199: LIST
73200: LIST
73201: LIST
73202: LIST
73203: LIST
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: LIST
73214: LIST
73215: LIST
73216: LIST
73217: LIST
73218: PUSH
73219: LD_INT 101
73221: PUSH
73222: LD_INT 102
73224: PUSH
73225: LD_INT 103
73227: PUSH
73228: LD_INT 104
73230: PUSH
73231: LD_INT 105
73233: PUSH
73234: LD_INT 106
73236: PUSH
73237: LD_INT 107
73239: PUSH
73240: LD_INT 108
73242: PUSH
73243: LD_INT 109
73245: PUSH
73246: LD_INT 110
73248: PUSH
73249: LD_INT 111
73251: PUSH
73252: LD_INT 112
73254: PUSH
73255: LD_INT 113
73257: PUSH
73258: LD_INT 114
73260: PUSH
73261: LD_INT 116
73263: PUSH
73264: LD_INT 117
73266: PUSH
73267: LD_INT 118
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: LIST
73274: LIST
73275: LIST
73276: LIST
73277: LIST
73278: LIST
73279: LIST
73280: LIST
73281: LIST
73282: LIST
73283: LIST
73284: LIST
73285: LIST
73286: LIST
73287: LIST
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: ST_TO_ADDR
73293: GO 74748
73295: LD_INT 13
73297: DOUBLE
73298: EQUAL
73299: IFTRUE 73303
73301: GO 73511
73303: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
73304: LD_ADDR_VAR 0 2
73308: PUSH
73309: LD_INT 1
73311: PUSH
73312: LD_INT 2
73314: PUSH
73315: LD_INT 3
73317: PUSH
73318: LD_INT 4
73320: PUSH
73321: LD_INT 5
73323: PUSH
73324: LD_INT 8
73326: PUSH
73327: LD_INT 9
73329: PUSH
73330: LD_INT 10
73332: PUSH
73333: LD_INT 11
73335: PUSH
73336: LD_INT 12
73338: PUSH
73339: LD_INT 14
73341: PUSH
73342: LD_INT 15
73344: PUSH
73345: LD_INT 16
73347: PUSH
73348: LD_INT 17
73350: PUSH
73351: LD_INT 18
73353: PUSH
73354: LD_INT 19
73356: PUSH
73357: LD_INT 20
73359: PUSH
73360: LD_INT 21
73362: PUSH
73363: LD_INT 22
73365: PUSH
73366: LD_INT 23
73368: PUSH
73369: LD_INT 24
73371: PUSH
73372: LD_INT 25
73374: PUSH
73375: LD_INT 26
73377: PUSH
73378: LD_INT 27
73380: PUSH
73381: LD_INT 28
73383: PUSH
73384: LD_INT 30
73386: PUSH
73387: LD_INT 31
73389: PUSH
73390: LD_INT 32
73392: PUSH
73393: LD_INT 33
73395: PUSH
73396: LD_INT 34
73398: PUSH
73399: LD_INT 36
73401: PUSH
73402: EMPTY
73403: LIST
73404: LIST
73405: LIST
73406: LIST
73407: LIST
73408: LIST
73409: LIST
73410: LIST
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: LIST
73416: LIST
73417: LIST
73418: LIST
73419: LIST
73420: LIST
73421: LIST
73422: LIST
73423: LIST
73424: LIST
73425: LIST
73426: LIST
73427: LIST
73428: LIST
73429: LIST
73430: LIST
73431: LIST
73432: LIST
73433: LIST
73434: PUSH
73435: LD_INT 101
73437: PUSH
73438: LD_INT 102
73440: PUSH
73441: LD_INT 103
73443: PUSH
73444: LD_INT 104
73446: PUSH
73447: LD_INT 105
73449: PUSH
73450: LD_INT 106
73452: PUSH
73453: LD_INT 107
73455: PUSH
73456: LD_INT 108
73458: PUSH
73459: LD_INT 109
73461: PUSH
73462: LD_INT 110
73464: PUSH
73465: LD_INT 111
73467: PUSH
73468: LD_INT 112
73470: PUSH
73471: LD_INT 113
73473: PUSH
73474: LD_INT 114
73476: PUSH
73477: LD_INT 116
73479: PUSH
73480: LD_INT 117
73482: PUSH
73483: LD_INT 118
73485: PUSH
73486: EMPTY
73487: LIST
73488: LIST
73489: LIST
73490: LIST
73491: LIST
73492: LIST
73493: LIST
73494: LIST
73495: LIST
73496: LIST
73497: LIST
73498: LIST
73499: LIST
73500: LIST
73501: LIST
73502: LIST
73503: LIST
73504: PUSH
73505: EMPTY
73506: LIST
73507: LIST
73508: ST_TO_ADDR
73509: GO 74748
73511: LD_INT 14
73513: DOUBLE
73514: EQUAL
73515: IFTRUE 73519
73517: GO 73743
73519: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
73520: LD_ADDR_VAR 0 2
73524: PUSH
73525: LD_INT 1
73527: PUSH
73528: LD_INT 2
73530: PUSH
73531: LD_INT 3
73533: PUSH
73534: LD_INT 4
73536: PUSH
73537: LD_INT 5
73539: PUSH
73540: LD_INT 6
73542: PUSH
73543: LD_INT 7
73545: PUSH
73546: LD_INT 8
73548: PUSH
73549: LD_INT 9
73551: PUSH
73552: LD_INT 10
73554: PUSH
73555: LD_INT 11
73557: PUSH
73558: LD_INT 12
73560: PUSH
73561: LD_INT 13
73563: PUSH
73564: LD_INT 14
73566: PUSH
73567: LD_INT 15
73569: PUSH
73570: LD_INT 16
73572: PUSH
73573: LD_INT 17
73575: PUSH
73576: LD_INT 18
73578: PUSH
73579: LD_INT 19
73581: PUSH
73582: LD_INT 20
73584: PUSH
73585: LD_INT 21
73587: PUSH
73588: LD_INT 22
73590: PUSH
73591: LD_INT 23
73593: PUSH
73594: LD_INT 24
73596: PUSH
73597: LD_INT 25
73599: PUSH
73600: LD_INT 26
73602: PUSH
73603: LD_INT 27
73605: PUSH
73606: LD_INT 28
73608: PUSH
73609: LD_INT 29
73611: PUSH
73612: LD_INT 30
73614: PUSH
73615: LD_INT 31
73617: PUSH
73618: LD_INT 32
73620: PUSH
73621: LD_INT 33
73623: PUSH
73624: LD_INT 34
73626: PUSH
73627: LD_INT 36
73629: PUSH
73630: EMPTY
73631: LIST
73632: LIST
73633: LIST
73634: LIST
73635: LIST
73636: LIST
73637: LIST
73638: LIST
73639: LIST
73640: LIST
73641: LIST
73642: LIST
73643: LIST
73644: LIST
73645: LIST
73646: LIST
73647: LIST
73648: LIST
73649: LIST
73650: LIST
73651: LIST
73652: LIST
73653: LIST
73654: LIST
73655: LIST
73656: LIST
73657: LIST
73658: LIST
73659: LIST
73660: LIST
73661: LIST
73662: LIST
73663: LIST
73664: LIST
73665: LIST
73666: PUSH
73667: LD_INT 101
73669: PUSH
73670: LD_INT 102
73672: PUSH
73673: LD_INT 103
73675: PUSH
73676: LD_INT 104
73678: PUSH
73679: LD_INT 105
73681: PUSH
73682: LD_INT 106
73684: PUSH
73685: LD_INT 107
73687: PUSH
73688: LD_INT 108
73690: PUSH
73691: LD_INT 109
73693: PUSH
73694: LD_INT 110
73696: PUSH
73697: LD_INT 111
73699: PUSH
73700: LD_INT 112
73702: PUSH
73703: LD_INT 113
73705: PUSH
73706: LD_INT 114
73708: PUSH
73709: LD_INT 116
73711: PUSH
73712: LD_INT 117
73714: PUSH
73715: LD_INT 118
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: LIST
73722: LIST
73723: LIST
73724: LIST
73725: LIST
73726: LIST
73727: LIST
73728: LIST
73729: LIST
73730: LIST
73731: LIST
73732: LIST
73733: LIST
73734: LIST
73735: LIST
73736: PUSH
73737: EMPTY
73738: LIST
73739: LIST
73740: ST_TO_ADDR
73741: GO 74748
73743: LD_INT 15
73745: DOUBLE
73746: EQUAL
73747: IFTRUE 73751
73749: GO 73975
73751: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
73752: LD_ADDR_VAR 0 2
73756: PUSH
73757: LD_INT 1
73759: PUSH
73760: LD_INT 2
73762: PUSH
73763: LD_INT 3
73765: PUSH
73766: LD_INT 4
73768: PUSH
73769: LD_INT 5
73771: PUSH
73772: LD_INT 6
73774: PUSH
73775: LD_INT 7
73777: PUSH
73778: LD_INT 8
73780: PUSH
73781: LD_INT 9
73783: PUSH
73784: LD_INT 10
73786: PUSH
73787: LD_INT 11
73789: PUSH
73790: LD_INT 12
73792: PUSH
73793: LD_INT 13
73795: PUSH
73796: LD_INT 14
73798: PUSH
73799: LD_INT 15
73801: PUSH
73802: LD_INT 16
73804: PUSH
73805: LD_INT 17
73807: PUSH
73808: LD_INT 18
73810: PUSH
73811: LD_INT 19
73813: PUSH
73814: LD_INT 20
73816: PUSH
73817: LD_INT 21
73819: PUSH
73820: LD_INT 22
73822: PUSH
73823: LD_INT 23
73825: PUSH
73826: LD_INT 24
73828: PUSH
73829: LD_INT 25
73831: PUSH
73832: LD_INT 26
73834: PUSH
73835: LD_INT 27
73837: PUSH
73838: LD_INT 28
73840: PUSH
73841: LD_INT 29
73843: PUSH
73844: LD_INT 30
73846: PUSH
73847: LD_INT 31
73849: PUSH
73850: LD_INT 32
73852: PUSH
73853: LD_INT 33
73855: PUSH
73856: LD_INT 34
73858: PUSH
73859: LD_INT 36
73861: PUSH
73862: EMPTY
73863: LIST
73864: LIST
73865: LIST
73866: LIST
73867: LIST
73868: LIST
73869: LIST
73870: LIST
73871: LIST
73872: LIST
73873: LIST
73874: LIST
73875: LIST
73876: LIST
73877: LIST
73878: LIST
73879: LIST
73880: LIST
73881: LIST
73882: LIST
73883: LIST
73884: LIST
73885: LIST
73886: LIST
73887: LIST
73888: LIST
73889: LIST
73890: LIST
73891: LIST
73892: LIST
73893: LIST
73894: LIST
73895: LIST
73896: LIST
73897: LIST
73898: PUSH
73899: LD_INT 101
73901: PUSH
73902: LD_INT 102
73904: PUSH
73905: LD_INT 103
73907: PUSH
73908: LD_INT 104
73910: PUSH
73911: LD_INT 105
73913: PUSH
73914: LD_INT 106
73916: PUSH
73917: LD_INT 107
73919: PUSH
73920: LD_INT 108
73922: PUSH
73923: LD_INT 109
73925: PUSH
73926: LD_INT 110
73928: PUSH
73929: LD_INT 111
73931: PUSH
73932: LD_INT 112
73934: PUSH
73935: LD_INT 113
73937: PUSH
73938: LD_INT 114
73940: PUSH
73941: LD_INT 116
73943: PUSH
73944: LD_INT 117
73946: PUSH
73947: LD_INT 118
73949: PUSH
73950: EMPTY
73951: LIST
73952: LIST
73953: LIST
73954: LIST
73955: LIST
73956: LIST
73957: LIST
73958: LIST
73959: LIST
73960: LIST
73961: LIST
73962: LIST
73963: LIST
73964: LIST
73965: LIST
73966: LIST
73967: LIST
73968: PUSH
73969: EMPTY
73970: LIST
73971: LIST
73972: ST_TO_ADDR
73973: GO 74748
73975: LD_INT 16
73977: DOUBLE
73978: EQUAL
73979: IFTRUE 73983
73981: GO 74119
73983: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
73984: LD_ADDR_VAR 0 2
73988: PUSH
73989: LD_INT 2
73991: PUSH
73992: LD_INT 4
73994: PUSH
73995: LD_INT 5
73997: PUSH
73998: LD_INT 7
74000: PUSH
74001: LD_INT 11
74003: PUSH
74004: LD_INT 12
74006: PUSH
74007: LD_INT 15
74009: PUSH
74010: LD_INT 16
74012: PUSH
74013: LD_INT 20
74015: PUSH
74016: LD_INT 21
74018: PUSH
74019: LD_INT 22
74021: PUSH
74022: LD_INT 23
74024: PUSH
74025: LD_INT 25
74027: PUSH
74028: LD_INT 26
74030: PUSH
74031: LD_INT 30
74033: PUSH
74034: LD_INT 31
74036: PUSH
74037: LD_INT 32
74039: PUSH
74040: LD_INT 33
74042: PUSH
74043: LD_INT 34
74045: PUSH
74046: EMPTY
74047: LIST
74048: LIST
74049: LIST
74050: LIST
74051: LIST
74052: LIST
74053: LIST
74054: LIST
74055: LIST
74056: LIST
74057: LIST
74058: LIST
74059: LIST
74060: LIST
74061: LIST
74062: LIST
74063: LIST
74064: LIST
74065: LIST
74066: PUSH
74067: LD_INT 101
74069: PUSH
74070: LD_INT 102
74072: PUSH
74073: LD_INT 103
74075: PUSH
74076: LD_INT 106
74078: PUSH
74079: LD_INT 108
74081: PUSH
74082: LD_INT 112
74084: PUSH
74085: LD_INT 113
74087: PUSH
74088: LD_INT 114
74090: PUSH
74091: LD_INT 116
74093: PUSH
74094: LD_INT 117
74096: PUSH
74097: LD_INT 118
74099: PUSH
74100: EMPTY
74101: LIST
74102: LIST
74103: LIST
74104: LIST
74105: LIST
74106: LIST
74107: LIST
74108: LIST
74109: LIST
74110: LIST
74111: LIST
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: ST_TO_ADDR
74117: GO 74748
74119: LD_INT 17
74121: DOUBLE
74122: EQUAL
74123: IFTRUE 74127
74125: GO 74351
74127: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
74128: LD_ADDR_VAR 0 2
74132: PUSH
74133: LD_INT 1
74135: PUSH
74136: LD_INT 2
74138: PUSH
74139: LD_INT 3
74141: PUSH
74142: LD_INT 4
74144: PUSH
74145: LD_INT 5
74147: PUSH
74148: LD_INT 6
74150: PUSH
74151: LD_INT 7
74153: PUSH
74154: LD_INT 8
74156: PUSH
74157: LD_INT 9
74159: PUSH
74160: LD_INT 10
74162: PUSH
74163: LD_INT 11
74165: PUSH
74166: LD_INT 12
74168: PUSH
74169: LD_INT 13
74171: PUSH
74172: LD_INT 14
74174: PUSH
74175: LD_INT 15
74177: PUSH
74178: LD_INT 16
74180: PUSH
74181: LD_INT 17
74183: PUSH
74184: LD_INT 18
74186: PUSH
74187: LD_INT 19
74189: PUSH
74190: LD_INT 20
74192: PUSH
74193: LD_INT 21
74195: PUSH
74196: LD_INT 22
74198: PUSH
74199: LD_INT 23
74201: PUSH
74202: LD_INT 24
74204: PUSH
74205: LD_INT 25
74207: PUSH
74208: LD_INT 26
74210: PUSH
74211: LD_INT 27
74213: PUSH
74214: LD_INT 28
74216: PUSH
74217: LD_INT 29
74219: PUSH
74220: LD_INT 30
74222: PUSH
74223: LD_INT 31
74225: PUSH
74226: LD_INT 32
74228: PUSH
74229: LD_INT 33
74231: PUSH
74232: LD_INT 34
74234: PUSH
74235: LD_INT 36
74237: PUSH
74238: EMPTY
74239: LIST
74240: LIST
74241: LIST
74242: LIST
74243: LIST
74244: LIST
74245: LIST
74246: LIST
74247: LIST
74248: LIST
74249: LIST
74250: LIST
74251: LIST
74252: LIST
74253: LIST
74254: LIST
74255: LIST
74256: LIST
74257: LIST
74258: LIST
74259: LIST
74260: LIST
74261: LIST
74262: LIST
74263: LIST
74264: LIST
74265: LIST
74266: LIST
74267: LIST
74268: LIST
74269: LIST
74270: LIST
74271: LIST
74272: LIST
74273: LIST
74274: PUSH
74275: LD_INT 101
74277: PUSH
74278: LD_INT 102
74280: PUSH
74281: LD_INT 103
74283: PUSH
74284: LD_INT 104
74286: PUSH
74287: LD_INT 105
74289: PUSH
74290: LD_INT 106
74292: PUSH
74293: LD_INT 107
74295: PUSH
74296: LD_INT 108
74298: PUSH
74299: LD_INT 109
74301: PUSH
74302: LD_INT 110
74304: PUSH
74305: LD_INT 111
74307: PUSH
74308: LD_INT 112
74310: PUSH
74311: LD_INT 113
74313: PUSH
74314: LD_INT 114
74316: PUSH
74317: LD_INT 116
74319: PUSH
74320: LD_INT 117
74322: PUSH
74323: LD_INT 118
74325: PUSH
74326: EMPTY
74327: LIST
74328: LIST
74329: LIST
74330: LIST
74331: LIST
74332: LIST
74333: LIST
74334: LIST
74335: LIST
74336: LIST
74337: LIST
74338: LIST
74339: LIST
74340: LIST
74341: LIST
74342: LIST
74343: LIST
74344: PUSH
74345: EMPTY
74346: LIST
74347: LIST
74348: ST_TO_ADDR
74349: GO 74748
74351: LD_INT 18
74353: DOUBLE
74354: EQUAL
74355: IFTRUE 74359
74357: GO 74507
74359: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
74360: LD_ADDR_VAR 0 2
74364: PUSH
74365: LD_INT 2
74367: PUSH
74368: LD_INT 4
74370: PUSH
74371: LD_INT 5
74373: PUSH
74374: LD_INT 7
74376: PUSH
74377: LD_INT 11
74379: PUSH
74380: LD_INT 12
74382: PUSH
74383: LD_INT 15
74385: PUSH
74386: LD_INT 16
74388: PUSH
74389: LD_INT 20
74391: PUSH
74392: LD_INT 21
74394: PUSH
74395: LD_INT 22
74397: PUSH
74398: LD_INT 23
74400: PUSH
74401: LD_INT 25
74403: PUSH
74404: LD_INT 26
74406: PUSH
74407: LD_INT 30
74409: PUSH
74410: LD_INT 31
74412: PUSH
74413: LD_INT 32
74415: PUSH
74416: LD_INT 33
74418: PUSH
74419: LD_INT 34
74421: PUSH
74422: LD_INT 35
74424: PUSH
74425: LD_INT 36
74427: PUSH
74428: EMPTY
74429: LIST
74430: LIST
74431: LIST
74432: LIST
74433: LIST
74434: LIST
74435: LIST
74436: LIST
74437: LIST
74438: LIST
74439: LIST
74440: LIST
74441: LIST
74442: LIST
74443: LIST
74444: LIST
74445: LIST
74446: LIST
74447: LIST
74448: LIST
74449: LIST
74450: PUSH
74451: LD_INT 101
74453: PUSH
74454: LD_INT 102
74456: PUSH
74457: LD_INT 103
74459: PUSH
74460: LD_INT 106
74462: PUSH
74463: LD_INT 108
74465: PUSH
74466: LD_INT 112
74468: PUSH
74469: LD_INT 113
74471: PUSH
74472: LD_INT 114
74474: PUSH
74475: LD_INT 115
74477: PUSH
74478: LD_INT 116
74480: PUSH
74481: LD_INT 117
74483: PUSH
74484: LD_INT 118
74486: PUSH
74487: EMPTY
74488: LIST
74489: LIST
74490: LIST
74491: LIST
74492: LIST
74493: LIST
74494: LIST
74495: LIST
74496: LIST
74497: LIST
74498: LIST
74499: LIST
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: ST_TO_ADDR
74505: GO 74748
74507: LD_INT 19
74509: DOUBLE
74510: EQUAL
74511: IFTRUE 74515
74513: GO 74747
74515: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
74516: LD_ADDR_VAR 0 2
74520: PUSH
74521: LD_INT 1
74523: PUSH
74524: LD_INT 2
74526: PUSH
74527: LD_INT 3
74529: PUSH
74530: LD_INT 4
74532: PUSH
74533: LD_INT 5
74535: PUSH
74536: LD_INT 6
74538: PUSH
74539: LD_INT 7
74541: PUSH
74542: LD_INT 8
74544: PUSH
74545: LD_INT 9
74547: PUSH
74548: LD_INT 10
74550: PUSH
74551: LD_INT 11
74553: PUSH
74554: LD_INT 12
74556: PUSH
74557: LD_INT 13
74559: PUSH
74560: LD_INT 14
74562: PUSH
74563: LD_INT 15
74565: PUSH
74566: LD_INT 16
74568: PUSH
74569: LD_INT 17
74571: PUSH
74572: LD_INT 18
74574: PUSH
74575: LD_INT 19
74577: PUSH
74578: LD_INT 20
74580: PUSH
74581: LD_INT 21
74583: PUSH
74584: LD_INT 22
74586: PUSH
74587: LD_INT 23
74589: PUSH
74590: LD_INT 24
74592: PUSH
74593: LD_INT 25
74595: PUSH
74596: LD_INT 26
74598: PUSH
74599: LD_INT 27
74601: PUSH
74602: LD_INT 28
74604: PUSH
74605: LD_INT 29
74607: PUSH
74608: LD_INT 30
74610: PUSH
74611: LD_INT 31
74613: PUSH
74614: LD_INT 32
74616: PUSH
74617: LD_INT 33
74619: PUSH
74620: LD_INT 34
74622: PUSH
74623: LD_INT 35
74625: PUSH
74626: LD_INT 36
74628: PUSH
74629: EMPTY
74630: LIST
74631: LIST
74632: LIST
74633: LIST
74634: LIST
74635: LIST
74636: LIST
74637: LIST
74638: LIST
74639: LIST
74640: LIST
74641: LIST
74642: LIST
74643: LIST
74644: LIST
74645: LIST
74646: LIST
74647: LIST
74648: LIST
74649: LIST
74650: LIST
74651: LIST
74652: LIST
74653: LIST
74654: LIST
74655: LIST
74656: LIST
74657: LIST
74658: LIST
74659: LIST
74660: LIST
74661: LIST
74662: LIST
74663: LIST
74664: LIST
74665: LIST
74666: PUSH
74667: LD_INT 101
74669: PUSH
74670: LD_INT 102
74672: PUSH
74673: LD_INT 103
74675: PUSH
74676: LD_INT 104
74678: PUSH
74679: LD_INT 105
74681: PUSH
74682: LD_INT 106
74684: PUSH
74685: LD_INT 107
74687: PUSH
74688: LD_INT 108
74690: PUSH
74691: LD_INT 109
74693: PUSH
74694: LD_INT 110
74696: PUSH
74697: LD_INT 111
74699: PUSH
74700: LD_INT 112
74702: PUSH
74703: LD_INT 113
74705: PUSH
74706: LD_INT 114
74708: PUSH
74709: LD_INT 115
74711: PUSH
74712: LD_INT 116
74714: PUSH
74715: LD_INT 117
74717: PUSH
74718: LD_INT 118
74720: PUSH
74721: EMPTY
74722: LIST
74723: LIST
74724: LIST
74725: LIST
74726: LIST
74727: LIST
74728: LIST
74729: LIST
74730: LIST
74731: LIST
74732: LIST
74733: LIST
74734: LIST
74735: LIST
74736: LIST
74737: LIST
74738: LIST
74739: LIST
74740: PUSH
74741: EMPTY
74742: LIST
74743: LIST
74744: ST_TO_ADDR
74745: GO 74748
74747: POP
// end else
74748: GO 74979
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
74750: LD_ADDR_VAR 0 2
74754: PUSH
74755: LD_INT 1
74757: PUSH
74758: LD_INT 2
74760: PUSH
74761: LD_INT 3
74763: PUSH
74764: LD_INT 4
74766: PUSH
74767: LD_INT 5
74769: PUSH
74770: LD_INT 6
74772: PUSH
74773: LD_INT 7
74775: PUSH
74776: LD_INT 8
74778: PUSH
74779: LD_INT 9
74781: PUSH
74782: LD_INT 10
74784: PUSH
74785: LD_INT 11
74787: PUSH
74788: LD_INT 12
74790: PUSH
74791: LD_INT 13
74793: PUSH
74794: LD_INT 14
74796: PUSH
74797: LD_INT 15
74799: PUSH
74800: LD_INT 16
74802: PUSH
74803: LD_INT 17
74805: PUSH
74806: LD_INT 18
74808: PUSH
74809: LD_INT 19
74811: PUSH
74812: LD_INT 20
74814: PUSH
74815: LD_INT 21
74817: PUSH
74818: LD_INT 22
74820: PUSH
74821: LD_INT 23
74823: PUSH
74824: LD_INT 24
74826: PUSH
74827: LD_INT 25
74829: PUSH
74830: LD_INT 26
74832: PUSH
74833: LD_INT 27
74835: PUSH
74836: LD_INT 28
74838: PUSH
74839: LD_INT 29
74841: PUSH
74842: LD_INT 30
74844: PUSH
74845: LD_INT 31
74847: PUSH
74848: LD_INT 32
74850: PUSH
74851: LD_INT 33
74853: PUSH
74854: LD_INT 34
74856: PUSH
74857: LD_INT 35
74859: PUSH
74860: LD_INT 36
74862: PUSH
74863: EMPTY
74864: LIST
74865: LIST
74866: LIST
74867: LIST
74868: LIST
74869: LIST
74870: LIST
74871: LIST
74872: LIST
74873: LIST
74874: LIST
74875: LIST
74876: LIST
74877: LIST
74878: LIST
74879: LIST
74880: LIST
74881: LIST
74882: LIST
74883: LIST
74884: LIST
74885: LIST
74886: LIST
74887: LIST
74888: LIST
74889: LIST
74890: LIST
74891: LIST
74892: LIST
74893: LIST
74894: LIST
74895: LIST
74896: LIST
74897: LIST
74898: LIST
74899: LIST
74900: PUSH
74901: LD_INT 101
74903: PUSH
74904: LD_INT 102
74906: PUSH
74907: LD_INT 103
74909: PUSH
74910: LD_INT 104
74912: PUSH
74913: LD_INT 105
74915: PUSH
74916: LD_INT 106
74918: PUSH
74919: LD_INT 107
74921: PUSH
74922: LD_INT 108
74924: PUSH
74925: LD_INT 109
74927: PUSH
74928: LD_INT 110
74930: PUSH
74931: LD_INT 111
74933: PUSH
74934: LD_INT 112
74936: PUSH
74937: LD_INT 113
74939: PUSH
74940: LD_INT 114
74942: PUSH
74943: LD_INT 115
74945: PUSH
74946: LD_INT 116
74948: PUSH
74949: LD_INT 117
74951: PUSH
74952: LD_INT 118
74954: PUSH
74955: EMPTY
74956: LIST
74957: LIST
74958: LIST
74959: LIST
74960: LIST
74961: LIST
74962: LIST
74963: LIST
74964: LIST
74965: LIST
74966: LIST
74967: LIST
74968: LIST
74969: LIST
74970: LIST
74971: LIST
74972: LIST
74973: LIST
74974: PUSH
74975: EMPTY
74976: LIST
74977: LIST
74978: ST_TO_ADDR
// if result then
74979: LD_VAR 0 2
74983: IFFALSE 75769
// begin normal :=  ;
74985: LD_ADDR_VAR 0 5
74989: PUSH
74990: LD_STRING 
74992: ST_TO_ADDR
// hardcore :=  ;
74993: LD_ADDR_VAR 0 6
74997: PUSH
74998: LD_STRING 
75000: ST_TO_ADDR
// active :=  ;
75001: LD_ADDR_VAR 0 7
75005: PUSH
75006: LD_STRING 
75008: ST_TO_ADDR
// for i = 1 to normalCounter do
75009: LD_ADDR_VAR 0 8
75013: PUSH
75014: DOUBLE
75015: LD_INT 1
75017: DEC
75018: ST_TO_ADDR
75019: LD_EXP 67
75023: PUSH
75024: FOR_TO
75025: IFFALSE 75126
// begin tmp := 0 ;
75027: LD_ADDR_VAR 0 3
75031: PUSH
75032: LD_STRING 0
75034: ST_TO_ADDR
// if result [ 1 ] then
75035: LD_VAR 0 2
75039: PUSH
75040: LD_INT 1
75042: ARRAY
75043: IFFALSE 75108
// if result [ 1 ] [ 1 ] = i then
75045: LD_VAR 0 2
75049: PUSH
75050: LD_INT 1
75052: ARRAY
75053: PUSH
75054: LD_INT 1
75056: ARRAY
75057: PUSH
75058: LD_VAR 0 8
75062: EQUAL
75063: IFFALSE 75108
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
75065: LD_ADDR_VAR 0 2
75069: PUSH
75070: LD_VAR 0 2
75074: PPUSH
75075: LD_INT 1
75077: PPUSH
75078: LD_VAR 0 2
75082: PUSH
75083: LD_INT 1
75085: ARRAY
75086: PPUSH
75087: LD_INT 1
75089: PPUSH
75090: CALL_OW 3
75094: PPUSH
75095: CALL_OW 1
75099: ST_TO_ADDR
// tmp := 1 ;
75100: LD_ADDR_VAR 0 3
75104: PUSH
75105: LD_STRING 1
75107: ST_TO_ADDR
// end ; normal := normal & tmp ;
75108: LD_ADDR_VAR 0 5
75112: PUSH
75113: LD_VAR 0 5
75117: PUSH
75118: LD_VAR 0 3
75122: STR
75123: ST_TO_ADDR
// end ;
75124: GO 75024
75126: POP
75127: POP
// for i = 1 to hardcoreCounter do
75128: LD_ADDR_VAR 0 8
75132: PUSH
75133: DOUBLE
75134: LD_INT 1
75136: DEC
75137: ST_TO_ADDR
75138: LD_EXP 68
75142: PUSH
75143: FOR_TO
75144: IFFALSE 75249
// begin tmp := 0 ;
75146: LD_ADDR_VAR 0 3
75150: PUSH
75151: LD_STRING 0
75153: ST_TO_ADDR
// if result [ 2 ] then
75154: LD_VAR 0 2
75158: PUSH
75159: LD_INT 2
75161: ARRAY
75162: IFFALSE 75231
// if result [ 2 ] [ 1 ] = 100 + i then
75164: LD_VAR 0 2
75168: PUSH
75169: LD_INT 2
75171: ARRAY
75172: PUSH
75173: LD_INT 1
75175: ARRAY
75176: PUSH
75177: LD_INT 100
75179: PUSH
75180: LD_VAR 0 8
75184: PLUS
75185: EQUAL
75186: IFFALSE 75231
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
75188: LD_ADDR_VAR 0 2
75192: PUSH
75193: LD_VAR 0 2
75197: PPUSH
75198: LD_INT 2
75200: PPUSH
75201: LD_VAR 0 2
75205: PUSH
75206: LD_INT 2
75208: ARRAY
75209: PPUSH
75210: LD_INT 1
75212: PPUSH
75213: CALL_OW 3
75217: PPUSH
75218: CALL_OW 1
75222: ST_TO_ADDR
// tmp := 1 ;
75223: LD_ADDR_VAR 0 3
75227: PUSH
75228: LD_STRING 1
75230: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
75231: LD_ADDR_VAR 0 6
75235: PUSH
75236: LD_VAR 0 6
75240: PUSH
75241: LD_VAR 0 3
75245: STR
75246: ST_TO_ADDR
// end ;
75247: GO 75143
75249: POP
75250: POP
// if isGameLoad then
75251: LD_VAR 0 1
75255: IFFALSE 75730
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
75257: LD_ADDR_VAR 0 4
75261: PUSH
75262: LD_EXP 71
75266: PUSH
75267: LD_EXP 70
75271: PUSH
75272: LD_EXP 72
75276: PUSH
75277: LD_EXP 69
75281: PUSH
75282: LD_EXP 73
75286: PUSH
75287: LD_EXP 74
75291: PUSH
75292: LD_EXP 75
75296: PUSH
75297: LD_EXP 76
75301: PUSH
75302: LD_EXP 77
75306: PUSH
75307: LD_EXP 78
75311: PUSH
75312: LD_EXP 79
75316: PUSH
75317: LD_EXP 80
75321: PUSH
75322: LD_EXP 81
75326: PUSH
75327: LD_EXP 82
75331: PUSH
75332: LD_EXP 90
75336: PUSH
75337: LD_EXP 91
75341: PUSH
75342: LD_EXP 92
75346: PUSH
75347: LD_EXP 93
75351: PUSH
75352: LD_EXP 95
75356: PUSH
75357: LD_EXP 96
75361: PUSH
75362: LD_EXP 97
75366: PUSH
75367: LD_EXP 100
75371: PUSH
75372: LD_EXP 102
75376: PUSH
75377: LD_EXP 103
75381: PUSH
75382: LD_EXP 104
75386: PUSH
75387: LD_EXP 106
75391: PUSH
75392: LD_EXP 107
75396: PUSH
75397: LD_EXP 110
75401: PUSH
75402: LD_EXP 111
75406: PUSH
75407: LD_EXP 112
75411: PUSH
75412: LD_EXP 113
75416: PUSH
75417: LD_EXP 114
75421: PUSH
75422: LD_EXP 115
75426: PUSH
75427: LD_EXP 116
75431: PUSH
75432: LD_EXP 117
75436: PUSH
75437: LD_EXP 118
75441: PUSH
75442: LD_EXP 83
75446: PUSH
75447: LD_EXP 84
75451: PUSH
75452: LD_EXP 87
75456: PUSH
75457: LD_EXP 88
75461: PUSH
75462: LD_EXP 89
75466: PUSH
75467: LD_EXP 85
75471: PUSH
75472: LD_EXP 86
75476: PUSH
75477: LD_EXP 94
75481: PUSH
75482: LD_EXP 98
75486: PUSH
75487: LD_EXP 99
75491: PUSH
75492: LD_EXP 101
75496: PUSH
75497: LD_EXP 105
75501: PUSH
75502: LD_EXP 108
75506: PUSH
75507: LD_EXP 109
75511: PUSH
75512: LD_EXP 119
75516: PUSH
75517: LD_EXP 120
75521: PUSH
75522: LD_EXP 121
75526: PUSH
75527: LD_EXP 122
75531: PUSH
75532: EMPTY
75533: LIST
75534: LIST
75535: LIST
75536: LIST
75537: LIST
75538: LIST
75539: LIST
75540: LIST
75541: LIST
75542: LIST
75543: LIST
75544: LIST
75545: LIST
75546: LIST
75547: LIST
75548: LIST
75549: LIST
75550: LIST
75551: LIST
75552: LIST
75553: LIST
75554: LIST
75555: LIST
75556: LIST
75557: LIST
75558: LIST
75559: LIST
75560: LIST
75561: LIST
75562: LIST
75563: LIST
75564: LIST
75565: LIST
75566: LIST
75567: LIST
75568: LIST
75569: LIST
75570: LIST
75571: LIST
75572: LIST
75573: LIST
75574: LIST
75575: LIST
75576: LIST
75577: LIST
75578: LIST
75579: LIST
75580: LIST
75581: LIST
75582: LIST
75583: LIST
75584: LIST
75585: LIST
75586: LIST
75587: ST_TO_ADDR
// tmp :=  ;
75588: LD_ADDR_VAR 0 3
75592: PUSH
75593: LD_STRING 
75595: ST_TO_ADDR
// for i = 1 to normalCounter do
75596: LD_ADDR_VAR 0 8
75600: PUSH
75601: DOUBLE
75602: LD_INT 1
75604: DEC
75605: ST_TO_ADDR
75606: LD_EXP 67
75610: PUSH
75611: FOR_TO
75612: IFFALSE 75648
// begin if flags [ i ] then
75614: LD_VAR 0 4
75618: PUSH
75619: LD_VAR 0 8
75623: ARRAY
75624: IFFALSE 75646
// tmp := tmp & i & ; ;
75626: LD_ADDR_VAR 0 3
75630: PUSH
75631: LD_VAR 0 3
75635: PUSH
75636: LD_VAR 0 8
75640: STR
75641: PUSH
75642: LD_STRING ;
75644: STR
75645: ST_TO_ADDR
// end ;
75646: GO 75611
75648: POP
75649: POP
// for i = 1 to hardcoreCounter do
75650: LD_ADDR_VAR 0 8
75654: PUSH
75655: DOUBLE
75656: LD_INT 1
75658: DEC
75659: ST_TO_ADDR
75660: LD_EXP 68
75664: PUSH
75665: FOR_TO
75666: IFFALSE 75712
// begin if flags [ normalCounter + i ] then
75668: LD_VAR 0 4
75672: PUSH
75673: LD_EXP 67
75677: PUSH
75678: LD_VAR 0 8
75682: PLUS
75683: ARRAY
75684: IFFALSE 75710
// tmp := tmp & ( 100 + i ) & ; ;
75686: LD_ADDR_VAR 0 3
75690: PUSH
75691: LD_VAR 0 3
75695: PUSH
75696: LD_INT 100
75698: PUSH
75699: LD_VAR 0 8
75703: PLUS
75704: STR
75705: PUSH
75706: LD_STRING ;
75708: STR
75709: ST_TO_ADDR
// end ;
75710: GO 75665
75712: POP
75713: POP
// if tmp then
75714: LD_VAR 0 3
75718: IFFALSE 75730
// active := tmp ;
75720: LD_ADDR_VAR 0 7
75724: PUSH
75725: LD_VAR 0 3
75729: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
75730: LD_STRING getStreamItemsFromMission("
75732: PUSH
75733: LD_VAR 0 5
75737: STR
75738: PUSH
75739: LD_STRING ","
75741: STR
75742: PUSH
75743: LD_VAR 0 6
75747: STR
75748: PUSH
75749: LD_STRING ","
75751: STR
75752: PUSH
75753: LD_VAR 0 7
75757: STR
75758: PUSH
75759: LD_STRING ")
75761: STR
75762: PPUSH
75763: CALL_OW 559
// end else
75767: GO 75776
// ToLua ( getStreamItemsFromMission("","","") ) ;
75769: LD_STRING getStreamItemsFromMission("","","")
75771: PPUSH
75772: CALL_OW 559
// end ;
75776: LD_VAR 0 2
75780: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
75781: LD_EXP 66
75785: IFFALSE 75793
75787: PUSH
75788: LD_EXP 71
75792: AND
75793: IFFALSE 75917
75795: GO 75797
75797: DISABLE
75798: LD_INT 0
75800: PPUSH
75801: PPUSH
// begin enable ;
75802: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
75803: LD_ADDR_VAR 0 2
75807: PUSH
75808: LD_INT 22
75810: PUSH
75811: LD_OWVAR 2
75815: PUSH
75816: EMPTY
75817: LIST
75818: LIST
75819: PUSH
75820: LD_INT 2
75822: PUSH
75823: LD_INT 34
75825: PUSH
75826: LD_INT 7
75828: PUSH
75829: EMPTY
75830: LIST
75831: LIST
75832: PUSH
75833: LD_INT 34
75835: PUSH
75836: LD_INT 45
75838: PUSH
75839: EMPTY
75840: LIST
75841: LIST
75842: PUSH
75843: LD_INT 34
75845: PUSH
75846: LD_INT 28
75848: PUSH
75849: EMPTY
75850: LIST
75851: LIST
75852: PUSH
75853: LD_INT 34
75855: PUSH
75856: LD_INT 47
75858: PUSH
75859: EMPTY
75860: LIST
75861: LIST
75862: PUSH
75863: EMPTY
75864: LIST
75865: LIST
75866: LIST
75867: LIST
75868: LIST
75869: PUSH
75870: EMPTY
75871: LIST
75872: LIST
75873: PPUSH
75874: CALL_OW 69
75878: ST_TO_ADDR
// if not tmp then
75879: LD_VAR 0 2
75883: NOT
75884: IFFALSE 75888
// exit ;
75886: GO 75917
// for i in tmp do
75888: LD_ADDR_VAR 0 1
75892: PUSH
75893: LD_VAR 0 2
75897: PUSH
75898: FOR_IN
75899: IFFALSE 75915
// begin SetLives ( i , 0 ) ;
75901: LD_VAR 0 1
75905: PPUSH
75906: LD_INT 0
75908: PPUSH
75909: CALL_OW 234
// end ;
75913: GO 75898
75915: POP
75916: POP
// end ;
75917: PPOPN 2
75919: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
75920: LD_EXP 66
75924: IFFALSE 75932
75926: PUSH
75927: LD_EXP 72
75931: AND
75932: IFFALSE 76016
75934: GO 75936
75936: DISABLE
75937: LD_INT 0
75939: PPUSH
75940: PPUSH
// begin enable ;
75941: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
75942: LD_ADDR_VAR 0 2
75946: PUSH
75947: LD_INT 22
75949: PUSH
75950: LD_OWVAR 2
75954: PUSH
75955: EMPTY
75956: LIST
75957: LIST
75958: PUSH
75959: LD_INT 32
75961: PUSH
75962: LD_INT 3
75964: PUSH
75965: EMPTY
75966: LIST
75967: LIST
75968: PUSH
75969: EMPTY
75970: LIST
75971: LIST
75972: PPUSH
75973: CALL_OW 69
75977: ST_TO_ADDR
// if not tmp then
75978: LD_VAR 0 2
75982: NOT
75983: IFFALSE 75987
// exit ;
75985: GO 76016
// for i in tmp do
75987: LD_ADDR_VAR 0 1
75991: PUSH
75992: LD_VAR 0 2
75996: PUSH
75997: FOR_IN
75998: IFFALSE 76014
// begin SetLives ( i , 0 ) ;
76000: LD_VAR 0 1
76004: PPUSH
76005: LD_INT 0
76007: PPUSH
76008: CALL_OW 234
// end ;
76012: GO 75997
76014: POP
76015: POP
// end ;
76016: PPOPN 2
76018: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
76019: LD_EXP 66
76023: IFFALSE 76031
76025: PUSH
76026: LD_EXP 69
76030: AND
76031: IFFALSE 76124
76033: GO 76035
76035: DISABLE
76036: LD_INT 0
76038: PPUSH
// begin enable ;
76039: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
76040: LD_ADDR_VAR 0 1
76044: PUSH
76045: LD_INT 22
76047: PUSH
76048: LD_OWVAR 2
76052: PUSH
76053: EMPTY
76054: LIST
76055: LIST
76056: PUSH
76057: LD_INT 2
76059: PUSH
76060: LD_INT 25
76062: PUSH
76063: LD_INT 5
76065: PUSH
76066: EMPTY
76067: LIST
76068: LIST
76069: PUSH
76070: LD_INT 25
76072: PUSH
76073: LD_INT 9
76075: PUSH
76076: EMPTY
76077: LIST
76078: LIST
76079: PUSH
76080: LD_INT 25
76082: PUSH
76083: LD_INT 8
76085: PUSH
76086: EMPTY
76087: LIST
76088: LIST
76089: PUSH
76090: EMPTY
76091: LIST
76092: LIST
76093: LIST
76094: LIST
76095: PUSH
76096: EMPTY
76097: LIST
76098: LIST
76099: PPUSH
76100: CALL_OW 69
76104: PUSH
76105: FOR_IN
76106: IFFALSE 76122
// begin SetClass ( i , 1 ) ;
76108: LD_VAR 0 1
76112: PPUSH
76113: LD_INT 1
76115: PPUSH
76116: CALL_OW 336
// end ;
76120: GO 76105
76122: POP
76123: POP
// end ;
76124: PPOPN 1
76126: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
76127: LD_EXP 66
76131: IFFALSE 76139
76133: PUSH
76134: LD_EXP 70
76138: AND
76139: IFFALSE 76151
76141: PUSH
76142: LD_OWVAR 65
76146: PUSH
76147: LD_INT 7
76149: LESS
76150: AND
76151: IFFALSE 76165
76153: GO 76155
76155: DISABLE
// begin enable ;
76156: ENABLE
// game_speed := 7 ;
76157: LD_ADDR_OWVAR 65
76161: PUSH
76162: LD_INT 7
76164: ST_TO_ADDR
// end ;
76165: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
76166: LD_EXP 66
76170: IFFALSE 76178
76172: PUSH
76173: LD_EXP 73
76177: AND
76178: IFFALSE 76380
76180: GO 76182
76182: DISABLE
76183: LD_INT 0
76185: PPUSH
76186: PPUSH
76187: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
76188: LD_ADDR_VAR 0 3
76192: PUSH
76193: LD_INT 81
76195: PUSH
76196: LD_OWVAR 2
76200: PUSH
76201: EMPTY
76202: LIST
76203: LIST
76204: PUSH
76205: LD_INT 21
76207: PUSH
76208: LD_INT 1
76210: PUSH
76211: EMPTY
76212: LIST
76213: LIST
76214: PUSH
76215: EMPTY
76216: LIST
76217: LIST
76218: PPUSH
76219: CALL_OW 69
76223: ST_TO_ADDR
// if not tmp then
76224: LD_VAR 0 3
76228: NOT
76229: IFFALSE 76233
// exit ;
76231: GO 76380
// if tmp > 5 then
76233: LD_VAR 0 3
76237: PUSH
76238: LD_INT 5
76240: GREATER
76241: IFFALSE 76253
// k := 5 else
76243: LD_ADDR_VAR 0 2
76247: PUSH
76248: LD_INT 5
76250: ST_TO_ADDR
76251: GO 76263
// k := tmp ;
76253: LD_ADDR_VAR 0 2
76257: PUSH
76258: LD_VAR 0 3
76262: ST_TO_ADDR
// for i := 1 to k do
76263: LD_ADDR_VAR 0 1
76267: PUSH
76268: DOUBLE
76269: LD_INT 1
76271: DEC
76272: ST_TO_ADDR
76273: LD_VAR 0 2
76277: PUSH
76278: FOR_TO
76279: IFFALSE 76378
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
76281: LD_VAR 0 3
76285: PUSH
76286: LD_VAR 0 1
76290: ARRAY
76291: PPUSH
76292: LD_VAR 0 1
76296: PUSH
76297: LD_INT 4
76299: MOD
76300: PUSH
76301: LD_INT 1
76303: PLUS
76304: PPUSH
76305: CALL_OW 259
76309: PUSH
76310: LD_INT 10
76312: LESS
76313: IFFALSE 76376
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
76315: LD_VAR 0 3
76319: PUSH
76320: LD_VAR 0 1
76324: ARRAY
76325: PPUSH
76326: LD_VAR 0 1
76330: PUSH
76331: LD_INT 4
76333: MOD
76334: PUSH
76335: LD_INT 1
76337: PLUS
76338: PPUSH
76339: LD_VAR 0 3
76343: PUSH
76344: LD_VAR 0 1
76348: ARRAY
76349: PPUSH
76350: LD_VAR 0 1
76354: PUSH
76355: LD_INT 4
76357: MOD
76358: PUSH
76359: LD_INT 1
76361: PLUS
76362: PPUSH
76363: CALL_OW 259
76367: PUSH
76368: LD_INT 1
76370: PLUS
76371: PPUSH
76372: CALL_OW 237
76376: GO 76278
76378: POP
76379: POP
// end ;
76380: PPOPN 3
76382: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
76383: LD_EXP 66
76387: IFFALSE 76395
76389: PUSH
76390: LD_EXP 74
76394: AND
76395: IFFALSE 76415
76397: GO 76399
76399: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
76400: LD_INT 4
76402: PPUSH
76403: LD_OWVAR 2
76407: PPUSH
76408: LD_INT 0
76410: PPUSH
76411: CALL_OW 324
76415: END
// every 0 0$1 trigger StreamModeActive and sShovel do
76416: LD_EXP 66
76420: IFFALSE 76428
76422: PUSH
76423: LD_EXP 103
76427: AND
76428: IFFALSE 76448
76430: GO 76432
76432: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
76433: LD_INT 19
76435: PPUSH
76436: LD_OWVAR 2
76440: PPUSH
76441: LD_INT 0
76443: PPUSH
76444: CALL_OW 324
76448: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
76449: LD_EXP 66
76453: IFFALSE 76461
76455: PUSH
76456: LD_EXP 75
76460: AND
76461: IFFALSE 76563
76463: GO 76465
76465: DISABLE
76466: LD_INT 0
76468: PPUSH
76469: PPUSH
// begin enable ;
76470: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
76471: LD_ADDR_VAR 0 2
76475: PUSH
76476: LD_INT 22
76478: PUSH
76479: LD_OWVAR 2
76483: PUSH
76484: EMPTY
76485: LIST
76486: LIST
76487: PUSH
76488: LD_INT 2
76490: PUSH
76491: LD_INT 34
76493: PUSH
76494: LD_INT 11
76496: PUSH
76497: EMPTY
76498: LIST
76499: LIST
76500: PUSH
76501: LD_INT 34
76503: PUSH
76504: LD_INT 30
76506: PUSH
76507: EMPTY
76508: LIST
76509: LIST
76510: PUSH
76511: EMPTY
76512: LIST
76513: LIST
76514: LIST
76515: PUSH
76516: EMPTY
76517: LIST
76518: LIST
76519: PPUSH
76520: CALL_OW 69
76524: ST_TO_ADDR
// if not tmp then
76525: LD_VAR 0 2
76529: NOT
76530: IFFALSE 76534
// exit ;
76532: GO 76563
// for i in tmp do
76534: LD_ADDR_VAR 0 1
76538: PUSH
76539: LD_VAR 0 2
76543: PUSH
76544: FOR_IN
76545: IFFALSE 76561
// begin SetLives ( i , 0 ) ;
76547: LD_VAR 0 1
76551: PPUSH
76552: LD_INT 0
76554: PPUSH
76555: CALL_OW 234
// end ;
76559: GO 76544
76561: POP
76562: POP
// end ;
76563: PPOPN 2
76565: END
// every 0 0$1 trigger StreamModeActive and sBunker do
76566: LD_EXP 66
76570: IFFALSE 76578
76572: PUSH
76573: LD_EXP 76
76577: AND
76578: IFFALSE 76598
76580: GO 76582
76582: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
76583: LD_INT 32
76585: PPUSH
76586: LD_OWVAR 2
76590: PPUSH
76591: LD_INT 0
76593: PPUSH
76594: CALL_OW 324
76598: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
76599: LD_EXP 66
76603: IFFALSE 76611
76605: PUSH
76606: LD_EXP 77
76610: AND
76611: IFFALSE 76794
76613: GO 76615
76615: DISABLE
76616: LD_INT 0
76618: PPUSH
76619: PPUSH
76620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
76621: LD_ADDR_VAR 0 2
76625: PUSH
76626: LD_INT 22
76628: PUSH
76629: LD_OWVAR 2
76633: PUSH
76634: EMPTY
76635: LIST
76636: LIST
76637: PUSH
76638: LD_INT 33
76640: PUSH
76641: LD_INT 3
76643: PUSH
76644: EMPTY
76645: LIST
76646: LIST
76647: PUSH
76648: EMPTY
76649: LIST
76650: LIST
76651: PPUSH
76652: CALL_OW 69
76656: ST_TO_ADDR
// if not tmp then
76657: LD_VAR 0 2
76661: NOT
76662: IFFALSE 76666
// exit ;
76664: GO 76794
// side := 0 ;
76666: LD_ADDR_VAR 0 3
76670: PUSH
76671: LD_INT 0
76673: ST_TO_ADDR
// for i := 1 to 8 do
76674: LD_ADDR_VAR 0 1
76678: PUSH
76679: DOUBLE
76680: LD_INT 1
76682: DEC
76683: ST_TO_ADDR
76684: LD_INT 8
76686: PUSH
76687: FOR_TO
76688: IFFALSE 76738
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
76690: LD_OWVAR 2
76694: PUSH
76695: LD_VAR 0 1
76699: NONEQUAL
76700: IFFALSE 76722
76702: PUSH
76703: LD_OWVAR 2
76707: PPUSH
76708: LD_VAR 0 1
76712: PPUSH
76713: CALL_OW 81
76717: PUSH
76718: LD_INT 2
76720: EQUAL
76721: AND
76722: IFFALSE 76736
// begin side := i ;
76724: LD_ADDR_VAR 0 3
76728: PUSH
76729: LD_VAR 0 1
76733: ST_TO_ADDR
// break ;
76734: GO 76738
// end ;
76736: GO 76687
76738: POP
76739: POP
// if not side then
76740: LD_VAR 0 3
76744: NOT
76745: IFFALSE 76749
// exit ;
76747: GO 76794
// for i := 1 to tmp do
76749: LD_ADDR_VAR 0 1
76753: PUSH
76754: DOUBLE
76755: LD_INT 1
76757: DEC
76758: ST_TO_ADDR
76759: LD_VAR 0 2
76763: PUSH
76764: FOR_TO
76765: IFFALSE 76792
// if Prob ( 60 ) then
76767: LD_INT 60
76769: PPUSH
76770: CALL_OW 13
76774: IFFALSE 76790
// SetSide ( i , side ) ;
76776: LD_VAR 0 1
76780: PPUSH
76781: LD_VAR 0 3
76785: PPUSH
76786: CALL_OW 235
76790: GO 76764
76792: POP
76793: POP
// end ;
76794: PPOPN 3
76796: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
76797: LD_EXP 66
76801: IFFALSE 76809
76803: PUSH
76804: LD_EXP 79
76808: AND
76809: IFFALSE 76928
76811: GO 76813
76813: DISABLE
76814: LD_INT 0
76816: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
76817: LD_ADDR_VAR 0 1
76821: PUSH
76822: LD_INT 22
76824: PUSH
76825: LD_OWVAR 2
76829: PUSH
76830: EMPTY
76831: LIST
76832: LIST
76833: PUSH
76834: LD_INT 21
76836: PUSH
76837: LD_INT 1
76839: PUSH
76840: EMPTY
76841: LIST
76842: LIST
76843: PUSH
76844: LD_INT 3
76846: PUSH
76847: LD_INT 23
76849: PUSH
76850: LD_INT 0
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: PUSH
76857: EMPTY
76858: LIST
76859: LIST
76860: PUSH
76861: EMPTY
76862: LIST
76863: LIST
76864: LIST
76865: PPUSH
76866: CALL_OW 69
76870: PUSH
76871: FOR_IN
76872: IFFALSE 76926
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
76874: LD_VAR 0 1
76878: PPUSH
76879: CALL_OW 257
76883: PUSH
76884: LD_INT 1
76886: PUSH
76887: LD_INT 2
76889: PUSH
76890: LD_INT 3
76892: PUSH
76893: LD_INT 4
76895: PUSH
76896: EMPTY
76897: LIST
76898: LIST
76899: LIST
76900: LIST
76901: IN
76902: IFFALSE 76924
// SetClass ( un , rand ( 1 , 4 ) ) ;
76904: LD_VAR 0 1
76908: PPUSH
76909: LD_INT 1
76911: PPUSH
76912: LD_INT 4
76914: PPUSH
76915: CALL_OW 12
76919: PPUSH
76920: CALL_OW 336
76924: GO 76871
76926: POP
76927: POP
// end ;
76928: PPOPN 1
76930: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
76931: LD_EXP 66
76935: IFFALSE 76943
76937: PUSH
76938: LD_EXP 78
76942: AND
76943: IFFALSE 77022
76945: GO 76947
76947: DISABLE
76948: LD_INT 0
76950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
76951: LD_ADDR_VAR 0 1
76955: PUSH
76956: LD_INT 22
76958: PUSH
76959: LD_OWVAR 2
76963: PUSH
76964: EMPTY
76965: LIST
76966: LIST
76967: PUSH
76968: LD_INT 21
76970: PUSH
76971: LD_INT 3
76973: PUSH
76974: EMPTY
76975: LIST
76976: LIST
76977: PUSH
76978: EMPTY
76979: LIST
76980: LIST
76981: PPUSH
76982: CALL_OW 69
76986: ST_TO_ADDR
// if not tmp then
76987: LD_VAR 0 1
76991: NOT
76992: IFFALSE 76996
// exit ;
76994: GO 77022
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
76996: LD_VAR 0 1
77000: PUSH
77001: LD_INT 1
77003: PPUSH
77004: LD_VAR 0 1
77008: PPUSH
77009: CALL_OW 12
77013: ARRAY
77014: PPUSH
77015: LD_INT 100
77017: PPUSH
77018: CALL_OW 234
// end ;
77022: PPOPN 1
77024: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
77025: LD_EXP 66
77029: IFFALSE 77037
77031: PUSH
77032: LD_EXP 80
77036: AND
77037: IFFALSE 77135
77039: GO 77041
77041: DISABLE
77042: LD_INT 0
77044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77045: LD_ADDR_VAR 0 1
77049: PUSH
77050: LD_INT 22
77052: PUSH
77053: LD_OWVAR 2
77057: PUSH
77058: EMPTY
77059: LIST
77060: LIST
77061: PUSH
77062: LD_INT 21
77064: PUSH
77065: LD_INT 1
77067: PUSH
77068: EMPTY
77069: LIST
77070: LIST
77071: PUSH
77072: EMPTY
77073: LIST
77074: LIST
77075: PPUSH
77076: CALL_OW 69
77080: ST_TO_ADDR
// if not tmp then
77081: LD_VAR 0 1
77085: NOT
77086: IFFALSE 77090
// exit ;
77088: GO 77135
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
77090: LD_VAR 0 1
77094: PUSH
77095: LD_INT 1
77097: PPUSH
77098: LD_VAR 0 1
77102: PPUSH
77103: CALL_OW 12
77107: ARRAY
77108: PPUSH
77109: LD_INT 1
77111: PPUSH
77112: LD_INT 4
77114: PPUSH
77115: CALL_OW 12
77119: PPUSH
77120: LD_INT 3000
77122: PPUSH
77123: LD_INT 9000
77125: PPUSH
77126: CALL_OW 12
77130: PPUSH
77131: CALL_OW 492
// end ;
77135: PPOPN 1
77137: END
// every 0 0$1 trigger StreamModeActive and sDepot do
77138: LD_EXP 66
77142: IFFALSE 77150
77144: PUSH
77145: LD_EXP 81
77149: AND
77150: IFFALSE 77170
77152: GO 77154
77154: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
77155: LD_INT 1
77157: PPUSH
77158: LD_OWVAR 2
77162: PPUSH
77163: LD_INT 0
77165: PPUSH
77166: CALL_OW 324
77170: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
77171: LD_EXP 66
77175: IFFALSE 77183
77177: PUSH
77178: LD_EXP 82
77182: AND
77183: IFFALSE 77266
77185: GO 77187
77187: DISABLE
77188: LD_INT 0
77190: PPUSH
77191: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
77192: LD_ADDR_VAR 0 2
77196: PUSH
77197: LD_INT 22
77199: PUSH
77200: LD_OWVAR 2
77204: PUSH
77205: EMPTY
77206: LIST
77207: LIST
77208: PUSH
77209: LD_INT 21
77211: PUSH
77212: LD_INT 3
77214: PUSH
77215: EMPTY
77216: LIST
77217: LIST
77218: PUSH
77219: EMPTY
77220: LIST
77221: LIST
77222: PPUSH
77223: CALL_OW 69
77227: ST_TO_ADDR
// if not tmp then
77228: LD_VAR 0 2
77232: NOT
77233: IFFALSE 77237
// exit ;
77235: GO 77266
// for i in tmp do
77237: LD_ADDR_VAR 0 1
77241: PUSH
77242: LD_VAR 0 2
77246: PUSH
77247: FOR_IN
77248: IFFALSE 77264
// SetBLevel ( i , 10 ) ;
77250: LD_VAR 0 1
77254: PPUSH
77255: LD_INT 10
77257: PPUSH
77258: CALL_OW 241
77262: GO 77247
77264: POP
77265: POP
// end ;
77266: PPOPN 2
77268: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
77269: LD_EXP 66
77273: IFFALSE 77281
77275: PUSH
77276: LD_EXP 83
77280: AND
77281: IFFALSE 77392
77283: GO 77285
77285: DISABLE
77286: LD_INT 0
77288: PPUSH
77289: PPUSH
77290: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77291: LD_ADDR_VAR 0 3
77295: PUSH
77296: LD_INT 22
77298: PUSH
77299: LD_OWVAR 2
77303: PUSH
77304: EMPTY
77305: LIST
77306: LIST
77307: PUSH
77308: LD_INT 25
77310: PUSH
77311: LD_INT 1
77313: PUSH
77314: EMPTY
77315: LIST
77316: LIST
77317: PUSH
77318: EMPTY
77319: LIST
77320: LIST
77321: PPUSH
77322: CALL_OW 69
77326: ST_TO_ADDR
// if not tmp then
77327: LD_VAR 0 3
77331: NOT
77332: IFFALSE 77336
// exit ;
77334: GO 77392
// un := tmp [ rand ( 1 , tmp ) ] ;
77336: LD_ADDR_VAR 0 2
77340: PUSH
77341: LD_VAR 0 3
77345: PUSH
77346: LD_INT 1
77348: PPUSH
77349: LD_VAR 0 3
77353: PPUSH
77354: CALL_OW 12
77358: ARRAY
77359: ST_TO_ADDR
// if Crawls ( un ) then
77360: LD_VAR 0 2
77364: PPUSH
77365: CALL_OW 318
77369: IFFALSE 77380
// ComWalk ( un ) ;
77371: LD_VAR 0 2
77375: PPUSH
77376: CALL_OW 138
// SetClass ( un , class_sniper ) ;
77380: LD_VAR 0 2
77384: PPUSH
77385: LD_INT 5
77387: PPUSH
77388: CALL_OW 336
// end ;
77392: PPOPN 3
77394: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
77395: LD_EXP 66
77399: IFFALSE 77407
77401: PUSH
77402: LD_EXP 84
77406: AND
77407: IFFALSE 77419
77409: PUSH
77410: LD_OWVAR 67
77414: PUSH
77415: LD_INT 4
77417: LESS
77418: AND
77419: IFFALSE 77438
77421: GO 77423
77423: DISABLE
// begin Difficulty := Difficulty + 1 ;
77424: LD_ADDR_OWVAR 67
77428: PUSH
77429: LD_OWVAR 67
77433: PUSH
77434: LD_INT 1
77436: PLUS
77437: ST_TO_ADDR
// end ;
77438: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
77439: LD_EXP 66
77443: IFFALSE 77451
77445: PUSH
77446: LD_EXP 85
77450: AND
77451: IFFALSE 77554
77453: GO 77455
77455: DISABLE
77456: LD_INT 0
77458: PPUSH
// begin for i := 1 to 5 do
77459: LD_ADDR_VAR 0 1
77463: PUSH
77464: DOUBLE
77465: LD_INT 1
77467: DEC
77468: ST_TO_ADDR
77469: LD_INT 5
77471: PUSH
77472: FOR_TO
77473: IFFALSE 77552
// begin uc_nation := nation_nature ;
77475: LD_ADDR_OWVAR 21
77479: PUSH
77480: LD_INT 0
77482: ST_TO_ADDR
// uc_side := 0 ;
77483: LD_ADDR_OWVAR 20
77487: PUSH
77488: LD_INT 0
77490: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
77491: LD_ADDR_OWVAR 29
77495: PUSH
77496: LD_INT 12
77498: PUSH
77499: LD_INT 12
77501: PUSH
77502: EMPTY
77503: LIST
77504: LIST
77505: ST_TO_ADDR
// hc_agressivity := 20 ;
77506: LD_ADDR_OWVAR 35
77510: PUSH
77511: LD_INT 20
77513: ST_TO_ADDR
// hc_class := class_tiger ;
77514: LD_ADDR_OWVAR 28
77518: PUSH
77519: LD_INT 14
77521: ST_TO_ADDR
// hc_gallery :=  ;
77522: LD_ADDR_OWVAR 33
77526: PUSH
77527: LD_STRING 
77529: ST_TO_ADDR
// hc_name :=  ;
77530: LD_ADDR_OWVAR 26
77534: PUSH
77535: LD_STRING 
77537: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
77538: CALL_OW 44
77542: PPUSH
77543: LD_INT 0
77545: PPUSH
77546: CALL_OW 51
// end ;
77550: GO 77472
77552: POP
77553: POP
// end ;
77554: PPOPN 1
77556: END
// every 0 0$1 trigger StreamModeActive and sBomb do
77557: LD_EXP 66
77561: IFFALSE 77569
77563: PUSH
77564: LD_EXP 86
77568: AND
77569: IFFALSE 77578
77571: GO 77573
77573: DISABLE
// StreamSibBomb ;
77574: CALL 77579 0 0
77578: END
// export function StreamSibBomb ; var i , x , y ; begin
77579: LD_INT 0
77581: PPUSH
77582: PPUSH
77583: PPUSH
77584: PPUSH
// result := false ;
77585: LD_ADDR_VAR 0 1
77589: PUSH
77590: LD_INT 0
77592: ST_TO_ADDR
// for i := 1 to 16 do
77593: LD_ADDR_VAR 0 2
77597: PUSH
77598: DOUBLE
77599: LD_INT 1
77601: DEC
77602: ST_TO_ADDR
77603: LD_INT 16
77605: PUSH
77606: FOR_TO
77607: IFFALSE 77806
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
77609: LD_ADDR_VAR 0 3
77613: PUSH
77614: LD_INT 10
77616: PUSH
77617: LD_INT 20
77619: PUSH
77620: LD_INT 30
77622: PUSH
77623: LD_INT 40
77625: PUSH
77626: LD_INT 50
77628: PUSH
77629: LD_INT 60
77631: PUSH
77632: LD_INT 70
77634: PUSH
77635: LD_INT 80
77637: PUSH
77638: LD_INT 90
77640: PUSH
77641: LD_INT 100
77643: PUSH
77644: LD_INT 110
77646: PUSH
77647: LD_INT 120
77649: PUSH
77650: LD_INT 130
77652: PUSH
77653: LD_INT 140
77655: PUSH
77656: LD_INT 150
77658: PUSH
77659: EMPTY
77660: LIST
77661: LIST
77662: LIST
77663: LIST
77664: LIST
77665: LIST
77666: LIST
77667: LIST
77668: LIST
77669: LIST
77670: LIST
77671: LIST
77672: LIST
77673: LIST
77674: LIST
77675: PUSH
77676: LD_INT 1
77678: PPUSH
77679: LD_INT 15
77681: PPUSH
77682: CALL_OW 12
77686: ARRAY
77687: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
77688: LD_ADDR_VAR 0 4
77692: PUSH
77693: LD_INT 10
77695: PUSH
77696: LD_INT 20
77698: PUSH
77699: LD_INT 30
77701: PUSH
77702: LD_INT 40
77704: PUSH
77705: LD_INT 50
77707: PUSH
77708: LD_INT 60
77710: PUSH
77711: LD_INT 70
77713: PUSH
77714: LD_INT 80
77716: PUSH
77717: LD_INT 90
77719: PUSH
77720: LD_INT 100
77722: PUSH
77723: LD_INT 110
77725: PUSH
77726: LD_INT 120
77728: PUSH
77729: LD_INT 130
77731: PUSH
77732: LD_INT 140
77734: PUSH
77735: LD_INT 150
77737: PUSH
77738: EMPTY
77739: LIST
77740: LIST
77741: LIST
77742: LIST
77743: LIST
77744: LIST
77745: LIST
77746: LIST
77747: LIST
77748: LIST
77749: LIST
77750: LIST
77751: LIST
77752: LIST
77753: LIST
77754: PUSH
77755: LD_INT 1
77757: PPUSH
77758: LD_INT 15
77760: PPUSH
77761: CALL_OW 12
77765: ARRAY
77766: ST_TO_ADDR
// if ValidHex ( x , y ) then
77767: LD_VAR 0 3
77771: PPUSH
77772: LD_VAR 0 4
77776: PPUSH
77777: CALL_OW 488
77781: IFFALSE 77804
// begin result := [ x , y ] ;
77783: LD_ADDR_VAR 0 1
77787: PUSH
77788: LD_VAR 0 3
77792: PUSH
77793: LD_VAR 0 4
77797: PUSH
77798: EMPTY
77799: LIST
77800: LIST
77801: ST_TO_ADDR
// break ;
77802: GO 77806
// end ; end ;
77804: GO 77606
77806: POP
77807: POP
// if result then
77808: LD_VAR 0 1
77812: IFFALSE 77872
// begin ToLua ( playSibBomb() ) ;
77814: LD_STRING playSibBomb()
77816: PPUSH
77817: CALL_OW 559
// wait ( 0 0$14 ) ;
77821: LD_INT 490
77823: PPUSH
77824: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
77828: LD_VAR 0 1
77832: PUSH
77833: LD_INT 1
77835: ARRAY
77836: PPUSH
77837: LD_VAR 0 1
77841: PUSH
77842: LD_INT 2
77844: ARRAY
77845: PPUSH
77846: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
77850: LD_VAR 0 1
77854: PUSH
77855: LD_INT 1
77857: ARRAY
77858: PPUSH
77859: LD_VAR 0 1
77863: PUSH
77864: LD_INT 2
77866: ARRAY
77867: PPUSH
77868: CALL_OW 429
// end ; end ;
77872: LD_VAR 0 1
77876: RET
// every 0 0$1 trigger StreamModeActive and sReset do
77877: LD_EXP 66
77881: IFFALSE 77889
77883: PUSH
77884: LD_EXP 88
77888: AND
77889: IFFALSE 77901
77891: GO 77893
77893: DISABLE
// YouLost (  ) ;
77894: LD_STRING 
77896: PPUSH
77897: CALL_OW 104
77901: END
// every 0 0$1 trigger StreamModeActive and sFog do
77902: LD_EXP 66
77906: IFFALSE 77914
77908: PUSH
77909: LD_EXP 87
77913: AND
77914: IFFALSE 77928
77916: GO 77918
77918: DISABLE
// FogOff ( your_side ) ;
77919: LD_OWVAR 2
77923: PPUSH
77924: CALL_OW 344
77928: END
// every 0 0$1 trigger StreamModeActive and sSun do
77929: LD_EXP 66
77933: IFFALSE 77941
77935: PUSH
77936: LD_EXP 89
77940: AND
77941: IFFALSE 77969
77943: GO 77945
77945: DISABLE
// begin solar_recharge_percent := 0 ;
77946: LD_ADDR_OWVAR 79
77950: PUSH
77951: LD_INT 0
77953: ST_TO_ADDR
// wait ( 5 5$00 ) ;
77954: LD_INT 10500
77956: PPUSH
77957: CALL_OW 67
// solar_recharge_percent := 100 ;
77961: LD_ADDR_OWVAR 79
77965: PUSH
77966: LD_INT 100
77968: ST_TO_ADDR
// end ;
77969: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
77970: LD_EXP 66
77974: IFFALSE 77982
77976: PUSH
77977: LD_EXP 90
77981: AND
77982: IFFALSE 78221
77984: GO 77986
77986: DISABLE
77987: LD_INT 0
77989: PPUSH
77990: PPUSH
77991: PPUSH
// begin tmp := [ ] ;
77992: LD_ADDR_VAR 0 3
77996: PUSH
77997: EMPTY
77998: ST_TO_ADDR
// for i := 1 to 6 do
77999: LD_ADDR_VAR 0 1
78003: PUSH
78004: DOUBLE
78005: LD_INT 1
78007: DEC
78008: ST_TO_ADDR
78009: LD_INT 6
78011: PUSH
78012: FOR_TO
78013: IFFALSE 78118
// begin uc_nation := nation_nature ;
78015: LD_ADDR_OWVAR 21
78019: PUSH
78020: LD_INT 0
78022: ST_TO_ADDR
// uc_side := 0 ;
78023: LD_ADDR_OWVAR 20
78027: PUSH
78028: LD_INT 0
78030: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
78031: LD_ADDR_OWVAR 29
78035: PUSH
78036: LD_INT 12
78038: PUSH
78039: LD_INT 12
78041: PUSH
78042: EMPTY
78043: LIST
78044: LIST
78045: ST_TO_ADDR
// hc_agressivity := 20 ;
78046: LD_ADDR_OWVAR 35
78050: PUSH
78051: LD_INT 20
78053: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
78054: LD_ADDR_OWVAR 28
78058: PUSH
78059: LD_INT 17
78061: ST_TO_ADDR
// hc_gallery :=  ;
78062: LD_ADDR_OWVAR 33
78066: PUSH
78067: LD_STRING 
78069: ST_TO_ADDR
// hc_name :=  ;
78070: LD_ADDR_OWVAR 26
78074: PUSH
78075: LD_STRING 
78077: ST_TO_ADDR
// un := CreateHuman ;
78078: LD_ADDR_VAR 0 2
78082: PUSH
78083: CALL_OW 44
78087: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
78088: LD_VAR 0 2
78092: PPUSH
78093: LD_INT 1
78095: PPUSH
78096: CALL_OW 51
// tmp := tmp ^ un ;
78100: LD_ADDR_VAR 0 3
78104: PUSH
78105: LD_VAR 0 3
78109: PUSH
78110: LD_VAR 0 2
78114: ADD
78115: ST_TO_ADDR
// end ;
78116: GO 78012
78118: POP
78119: POP
// repeat wait ( 0 0$1 ) ;
78120: LD_INT 35
78122: PPUSH
78123: CALL_OW 67
// for un in tmp do
78127: LD_ADDR_VAR 0 2
78131: PUSH
78132: LD_VAR 0 3
78136: PUSH
78137: FOR_IN
78138: IFFALSE 78212
// begin if IsDead ( un ) then
78140: LD_VAR 0 2
78144: PPUSH
78145: CALL_OW 301
78149: IFFALSE 78169
// begin tmp := tmp diff un ;
78151: LD_ADDR_VAR 0 3
78155: PUSH
78156: LD_VAR 0 3
78160: PUSH
78161: LD_VAR 0 2
78165: DIFF
78166: ST_TO_ADDR
// continue ;
78167: GO 78137
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
78169: LD_VAR 0 2
78173: PPUSH
78174: LD_INT 3
78176: PUSH
78177: LD_INT 22
78179: PUSH
78180: LD_INT 0
78182: PUSH
78183: EMPTY
78184: LIST
78185: LIST
78186: PUSH
78187: EMPTY
78188: LIST
78189: LIST
78190: PPUSH
78191: CALL_OW 69
78195: PPUSH
78196: LD_VAR 0 2
78200: PPUSH
78201: CALL_OW 74
78205: PPUSH
78206: CALL_OW 115
// end ;
78210: GO 78137
78212: POP
78213: POP
// until not tmp ;
78214: LD_VAR 0 3
78218: NOT
78219: IFFALSE 78120
// end ;
78221: PPOPN 3
78223: END
// every 0 0$1 trigger StreamModeActive and sTroll do
78224: LD_EXP 66
78228: IFFALSE 78236
78230: PUSH
78231: LD_EXP 91
78235: AND
78236: IFFALSE 78290
78238: GO 78240
78240: DISABLE
// begin ToLua ( displayTroll(); ) ;
78241: LD_STRING displayTroll();
78243: PPUSH
78244: CALL_OW 559
// wait ( 3 3$00 ) ;
78248: LD_INT 6300
78250: PPUSH
78251: CALL_OW 67
// ToLua ( hideTroll(); ) ;
78255: LD_STRING hideTroll();
78257: PPUSH
78258: CALL_OW 559
// wait ( 1 1$00 ) ;
78262: LD_INT 2100
78264: PPUSH
78265: CALL_OW 67
// ToLua ( displayTroll(); ) ;
78269: LD_STRING displayTroll();
78271: PPUSH
78272: CALL_OW 559
// wait ( 1 1$00 ) ;
78276: LD_INT 2100
78278: PPUSH
78279: CALL_OW 67
// ToLua ( hideTroll(); ) ;
78283: LD_STRING hideTroll();
78285: PPUSH
78286: CALL_OW 559
// end ;
78290: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
78291: LD_EXP 66
78295: IFFALSE 78303
78297: PUSH
78298: LD_EXP 92
78302: AND
78303: IFFALSE 78366
78305: GO 78307
78307: DISABLE
78308: LD_INT 0
78310: PPUSH
// begin p := 0 ;
78311: LD_ADDR_VAR 0 1
78315: PUSH
78316: LD_INT 0
78318: ST_TO_ADDR
// repeat game_speed := 1 ;
78319: LD_ADDR_OWVAR 65
78323: PUSH
78324: LD_INT 1
78326: ST_TO_ADDR
// wait ( 0 0$1 ) ;
78327: LD_INT 35
78329: PPUSH
78330: CALL_OW 67
// p := p + 1 ;
78334: LD_ADDR_VAR 0 1
78338: PUSH
78339: LD_VAR 0 1
78343: PUSH
78344: LD_INT 1
78346: PLUS
78347: ST_TO_ADDR
// until p >= 60 ;
78348: LD_VAR 0 1
78352: PUSH
78353: LD_INT 60
78355: GREATEREQUAL
78356: IFFALSE 78319
// game_speed := 4 ;
78358: LD_ADDR_OWVAR 65
78362: PUSH
78363: LD_INT 4
78365: ST_TO_ADDR
// end ;
78366: PPOPN 1
78368: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
78369: LD_EXP 66
78373: IFFALSE 78381
78375: PUSH
78376: LD_EXP 93
78380: AND
78381: IFFALSE 78527
78383: GO 78385
78385: DISABLE
78386: LD_INT 0
78388: PPUSH
78389: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
78390: LD_ADDR_VAR 0 1
78394: PUSH
78395: LD_INT 22
78397: PUSH
78398: LD_OWVAR 2
78402: PUSH
78403: EMPTY
78404: LIST
78405: LIST
78406: PUSH
78407: LD_INT 2
78409: PUSH
78410: LD_INT 30
78412: PUSH
78413: LD_INT 0
78415: PUSH
78416: EMPTY
78417: LIST
78418: LIST
78419: PUSH
78420: LD_INT 30
78422: PUSH
78423: LD_INT 1
78425: PUSH
78426: EMPTY
78427: LIST
78428: LIST
78429: PUSH
78430: EMPTY
78431: LIST
78432: LIST
78433: LIST
78434: PUSH
78435: EMPTY
78436: LIST
78437: LIST
78438: PPUSH
78439: CALL_OW 69
78443: ST_TO_ADDR
// if not depot then
78444: LD_VAR 0 1
78448: NOT
78449: IFFALSE 78453
// exit ;
78451: GO 78527
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
78453: LD_ADDR_VAR 0 2
78457: PUSH
78458: LD_VAR 0 1
78462: PUSH
78463: LD_INT 1
78465: PPUSH
78466: LD_VAR 0 1
78470: PPUSH
78471: CALL_OW 12
78475: ARRAY
78476: PPUSH
78477: CALL_OW 274
78481: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
78482: LD_VAR 0 2
78486: PPUSH
78487: LD_INT 1
78489: PPUSH
78490: LD_INT 0
78492: PPUSH
78493: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
78497: LD_VAR 0 2
78501: PPUSH
78502: LD_INT 2
78504: PPUSH
78505: LD_INT 0
78507: PPUSH
78508: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
78512: LD_VAR 0 2
78516: PPUSH
78517: LD_INT 3
78519: PPUSH
78520: LD_INT 0
78522: PPUSH
78523: CALL_OW 277
// end ;
78527: PPOPN 2
78529: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
78530: LD_EXP 66
78534: IFFALSE 78542
78536: PUSH
78537: LD_EXP 94
78541: AND
78542: IFFALSE 78639
78544: GO 78546
78546: DISABLE
78547: LD_INT 0
78549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78550: LD_ADDR_VAR 0 1
78554: PUSH
78555: LD_INT 22
78557: PUSH
78558: LD_OWVAR 2
78562: PUSH
78563: EMPTY
78564: LIST
78565: LIST
78566: PUSH
78567: LD_INT 21
78569: PUSH
78570: LD_INT 1
78572: PUSH
78573: EMPTY
78574: LIST
78575: LIST
78576: PUSH
78577: LD_INT 3
78579: PUSH
78580: LD_INT 23
78582: PUSH
78583: LD_INT 0
78585: PUSH
78586: EMPTY
78587: LIST
78588: LIST
78589: PUSH
78590: EMPTY
78591: LIST
78592: LIST
78593: PUSH
78594: EMPTY
78595: LIST
78596: LIST
78597: LIST
78598: PPUSH
78599: CALL_OW 69
78603: ST_TO_ADDR
// if not tmp then
78604: LD_VAR 0 1
78608: NOT
78609: IFFALSE 78613
// exit ;
78611: GO 78639
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
78613: LD_VAR 0 1
78617: PUSH
78618: LD_INT 1
78620: PPUSH
78621: LD_VAR 0 1
78625: PPUSH
78626: CALL_OW 12
78630: ARRAY
78631: PPUSH
78632: LD_INT 200
78634: PPUSH
78635: CALL_OW 234
// end ;
78639: PPOPN 1
78641: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
78642: LD_EXP 66
78646: IFFALSE 78654
78648: PUSH
78649: LD_EXP 95
78653: AND
78654: IFFALSE 78733
78656: GO 78658
78658: DISABLE
78659: LD_INT 0
78661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
78662: LD_ADDR_VAR 0 1
78666: PUSH
78667: LD_INT 22
78669: PUSH
78670: LD_OWVAR 2
78674: PUSH
78675: EMPTY
78676: LIST
78677: LIST
78678: PUSH
78679: LD_INT 21
78681: PUSH
78682: LD_INT 2
78684: PUSH
78685: EMPTY
78686: LIST
78687: LIST
78688: PUSH
78689: EMPTY
78690: LIST
78691: LIST
78692: PPUSH
78693: CALL_OW 69
78697: ST_TO_ADDR
// if not tmp then
78698: LD_VAR 0 1
78702: NOT
78703: IFFALSE 78707
// exit ;
78705: GO 78733
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
78707: LD_VAR 0 1
78711: PUSH
78712: LD_INT 1
78714: PPUSH
78715: LD_VAR 0 1
78719: PPUSH
78720: CALL_OW 12
78724: ARRAY
78725: PPUSH
78726: LD_INT 60
78728: PPUSH
78729: CALL_OW 234
// end ;
78733: PPOPN 1
78735: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
78736: LD_EXP 66
78740: IFFALSE 78748
78742: PUSH
78743: LD_EXP 96
78747: AND
78748: IFFALSE 78847
78750: GO 78752
78752: DISABLE
78753: LD_INT 0
78755: PPUSH
78756: PPUSH
// begin enable ;
78757: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
78758: LD_ADDR_VAR 0 1
78762: PUSH
78763: LD_INT 22
78765: PUSH
78766: LD_OWVAR 2
78770: PUSH
78771: EMPTY
78772: LIST
78773: LIST
78774: PUSH
78775: LD_INT 61
78777: PUSH
78778: EMPTY
78779: LIST
78780: PUSH
78781: LD_INT 33
78783: PUSH
78784: LD_INT 2
78786: PUSH
78787: EMPTY
78788: LIST
78789: LIST
78790: PUSH
78791: EMPTY
78792: LIST
78793: LIST
78794: LIST
78795: PPUSH
78796: CALL_OW 69
78800: ST_TO_ADDR
// if not tmp then
78801: LD_VAR 0 1
78805: NOT
78806: IFFALSE 78810
// exit ;
78808: GO 78847
// for i in tmp do
78810: LD_ADDR_VAR 0 2
78814: PUSH
78815: LD_VAR 0 1
78819: PUSH
78820: FOR_IN
78821: IFFALSE 78845
// if IsControledBy ( i ) then
78823: LD_VAR 0 2
78827: PPUSH
78828: CALL_OW 312
78832: IFFALSE 78843
// ComUnlink ( i ) ;
78834: LD_VAR 0 2
78838: PPUSH
78839: CALL_OW 136
78843: GO 78820
78845: POP
78846: POP
// end ;
78847: PPOPN 2
78849: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
78850: LD_EXP 66
78854: IFFALSE 78862
78856: PUSH
78857: LD_EXP 97
78861: AND
78862: IFFALSE 79002
78864: GO 78866
78866: DISABLE
78867: LD_INT 0
78869: PPUSH
78870: PPUSH
// begin ToLua ( displayPowell(); ) ;
78871: LD_STRING displayPowell();
78873: PPUSH
78874: CALL_OW 559
// uc_side := 0 ;
78878: LD_ADDR_OWVAR 20
78882: PUSH
78883: LD_INT 0
78885: ST_TO_ADDR
// uc_nation := 2 ;
78886: LD_ADDR_OWVAR 21
78890: PUSH
78891: LD_INT 2
78893: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
78894: LD_ADDR_OWVAR 37
78898: PUSH
78899: LD_INT 14
78901: ST_TO_ADDR
// vc_engine := engine_siberite ;
78902: LD_ADDR_OWVAR 39
78906: PUSH
78907: LD_INT 3
78909: ST_TO_ADDR
// vc_control := control_apeman ;
78910: LD_ADDR_OWVAR 38
78914: PUSH
78915: LD_INT 5
78917: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
78918: LD_ADDR_OWVAR 40
78922: PUSH
78923: LD_INT 29
78925: ST_TO_ADDR
// un := CreateVehicle ;
78926: LD_ADDR_VAR 0 2
78930: PUSH
78931: CALL_OW 45
78935: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
78936: LD_VAR 0 2
78940: PPUSH
78941: LD_INT 1
78943: PPUSH
78944: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
78948: LD_INT 35
78950: PPUSH
78951: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
78955: LD_VAR 0 2
78959: PPUSH
78960: LD_INT 22
78962: PUSH
78963: LD_OWVAR 2
78967: PUSH
78968: EMPTY
78969: LIST
78970: LIST
78971: PPUSH
78972: CALL_OW 69
78976: PPUSH
78977: LD_VAR 0 2
78981: PPUSH
78982: CALL_OW 74
78986: PPUSH
78987: CALL_OW 115
// until IsDead ( un ) ;
78991: LD_VAR 0 2
78995: PPUSH
78996: CALL_OW 301
79000: IFFALSE 78948
// end ;
79002: PPOPN 2
79004: END
// every 0 0$1 trigger StreamModeActive and sStu do
79005: LD_EXP 66
79009: IFFALSE 79017
79011: PUSH
79012: LD_EXP 105
79016: AND
79017: IFFALSE 79033
79019: GO 79021
79021: DISABLE
// begin ToLua ( displayStucuk(); ) ;
79022: LD_STRING displayStucuk();
79024: PPUSH
79025: CALL_OW 559
// ResetFog ;
79029: CALL_OW 335
// end ;
79033: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
79034: LD_EXP 66
79038: IFFALSE 79046
79040: PUSH
79041: LD_EXP 98
79045: AND
79046: IFFALSE 79187
79048: GO 79050
79050: DISABLE
79051: LD_INT 0
79053: PPUSH
79054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
79055: LD_ADDR_VAR 0 2
79059: PUSH
79060: LD_INT 22
79062: PUSH
79063: LD_OWVAR 2
79067: PUSH
79068: EMPTY
79069: LIST
79070: LIST
79071: PUSH
79072: LD_INT 21
79074: PUSH
79075: LD_INT 1
79077: PUSH
79078: EMPTY
79079: LIST
79080: LIST
79081: PUSH
79082: EMPTY
79083: LIST
79084: LIST
79085: PPUSH
79086: CALL_OW 69
79090: ST_TO_ADDR
// if not tmp then
79091: LD_VAR 0 2
79095: NOT
79096: IFFALSE 79100
// exit ;
79098: GO 79187
// un := tmp [ rand ( 1 , tmp ) ] ;
79100: LD_ADDR_VAR 0 1
79104: PUSH
79105: LD_VAR 0 2
79109: PUSH
79110: LD_INT 1
79112: PPUSH
79113: LD_VAR 0 2
79117: PPUSH
79118: CALL_OW 12
79122: ARRAY
79123: ST_TO_ADDR
// SetSide ( un , 0 ) ;
79124: LD_VAR 0 1
79128: PPUSH
79129: LD_INT 0
79131: PPUSH
79132: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
79136: LD_VAR 0 1
79140: PPUSH
79141: LD_OWVAR 3
79145: PUSH
79146: LD_VAR 0 1
79150: DIFF
79151: PPUSH
79152: LD_VAR 0 1
79156: PPUSH
79157: CALL_OW 74
79161: PPUSH
79162: CALL_OW 115
// wait ( 0 0$20 ) ;
79166: LD_INT 700
79168: PPUSH
79169: CALL_OW 67
// SetSide ( un , your_side ) ;
79173: LD_VAR 0 1
79177: PPUSH
79178: LD_OWVAR 2
79182: PPUSH
79183: CALL_OW 235
// end ;
79187: PPOPN 2
79189: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
79190: LD_EXP 66
79194: IFFALSE 79202
79196: PUSH
79197: LD_EXP 99
79201: AND
79202: IFFALSE 79308
79204: GO 79206
79206: DISABLE
79207: LD_INT 0
79209: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79210: LD_ADDR_VAR 0 1
79214: PUSH
79215: LD_INT 22
79217: PUSH
79218: LD_OWVAR 2
79222: PUSH
79223: EMPTY
79224: LIST
79225: LIST
79226: PUSH
79227: LD_INT 2
79229: PUSH
79230: LD_INT 30
79232: PUSH
79233: LD_INT 0
79235: PUSH
79236: EMPTY
79237: LIST
79238: LIST
79239: PUSH
79240: LD_INT 30
79242: PUSH
79243: LD_INT 1
79245: PUSH
79246: EMPTY
79247: LIST
79248: LIST
79249: PUSH
79250: EMPTY
79251: LIST
79252: LIST
79253: LIST
79254: PUSH
79255: EMPTY
79256: LIST
79257: LIST
79258: PPUSH
79259: CALL_OW 69
79263: ST_TO_ADDR
// if not depot then
79264: LD_VAR 0 1
79268: NOT
79269: IFFALSE 79273
// exit ;
79271: GO 79308
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
79273: LD_VAR 0 1
79277: PUSH
79278: LD_INT 1
79280: ARRAY
79281: PPUSH
79282: CALL_OW 250
79286: PPUSH
79287: LD_VAR 0 1
79291: PUSH
79292: LD_INT 1
79294: ARRAY
79295: PPUSH
79296: CALL_OW 251
79300: PPUSH
79301: LD_INT 70
79303: PPUSH
79304: CALL_OW 495
// end ;
79308: PPOPN 1
79310: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
79311: LD_EXP 66
79315: IFFALSE 79323
79317: PUSH
79318: LD_EXP 100
79322: AND
79323: IFFALSE 79534
79325: GO 79327
79327: DISABLE
79328: LD_INT 0
79330: PPUSH
79331: PPUSH
79332: PPUSH
79333: PPUSH
79334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
79335: LD_ADDR_VAR 0 5
79339: PUSH
79340: LD_INT 22
79342: PUSH
79343: LD_OWVAR 2
79347: PUSH
79348: EMPTY
79349: LIST
79350: LIST
79351: PUSH
79352: LD_INT 21
79354: PUSH
79355: LD_INT 1
79357: PUSH
79358: EMPTY
79359: LIST
79360: LIST
79361: PUSH
79362: EMPTY
79363: LIST
79364: LIST
79365: PPUSH
79366: CALL_OW 69
79370: ST_TO_ADDR
// if not tmp then
79371: LD_VAR 0 5
79375: NOT
79376: IFFALSE 79380
// exit ;
79378: GO 79534
// for i in tmp do
79380: LD_ADDR_VAR 0 1
79384: PUSH
79385: LD_VAR 0 5
79389: PUSH
79390: FOR_IN
79391: IFFALSE 79532
// begin d := rand ( 0 , 5 ) ;
79393: LD_ADDR_VAR 0 4
79397: PUSH
79398: LD_INT 0
79400: PPUSH
79401: LD_INT 5
79403: PPUSH
79404: CALL_OW 12
79408: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
79409: LD_ADDR_VAR 0 2
79413: PUSH
79414: LD_VAR 0 1
79418: PPUSH
79419: CALL_OW 250
79423: PPUSH
79424: LD_VAR 0 4
79428: PPUSH
79429: LD_INT 3
79431: PPUSH
79432: LD_INT 12
79434: PPUSH
79435: CALL_OW 12
79439: PPUSH
79440: CALL_OW 272
79444: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
79445: LD_ADDR_VAR 0 3
79449: PUSH
79450: LD_VAR 0 1
79454: PPUSH
79455: CALL_OW 251
79459: PPUSH
79460: LD_VAR 0 4
79464: PPUSH
79465: LD_INT 3
79467: PPUSH
79468: LD_INT 12
79470: PPUSH
79471: CALL_OW 12
79475: PPUSH
79476: CALL_OW 273
79480: ST_TO_ADDR
// if ValidHex ( x , y ) then
79481: LD_VAR 0 2
79485: PPUSH
79486: LD_VAR 0 3
79490: PPUSH
79491: CALL_OW 488
79495: IFFALSE 79530
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
79497: LD_VAR 0 1
79501: PPUSH
79502: LD_VAR 0 2
79506: PPUSH
79507: LD_VAR 0 3
79511: PPUSH
79512: LD_INT 3
79514: PPUSH
79515: LD_INT 6
79517: PPUSH
79518: CALL_OW 12
79522: PPUSH
79523: LD_INT 1
79525: PPUSH
79526: CALL_OW 483
// end ;
79530: GO 79390
79532: POP
79533: POP
// end ;
79534: PPOPN 5
79536: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
79537: LD_EXP 66
79541: IFFALSE 79549
79543: PUSH
79544: LD_EXP 101
79548: AND
79549: IFFALSE 79643
79551: GO 79553
79553: DISABLE
79554: LD_INT 0
79556: PPUSH
79557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
79558: LD_ADDR_VAR 0 2
79562: PUSH
79563: LD_INT 22
79565: PUSH
79566: LD_OWVAR 2
79570: PUSH
79571: EMPTY
79572: LIST
79573: LIST
79574: PUSH
79575: LD_INT 32
79577: PUSH
79578: LD_INT 1
79580: PUSH
79581: EMPTY
79582: LIST
79583: LIST
79584: PUSH
79585: LD_INT 21
79587: PUSH
79588: LD_INT 2
79590: PUSH
79591: EMPTY
79592: LIST
79593: LIST
79594: PUSH
79595: EMPTY
79596: LIST
79597: LIST
79598: LIST
79599: PPUSH
79600: CALL_OW 69
79604: ST_TO_ADDR
// if not tmp then
79605: LD_VAR 0 2
79609: NOT
79610: IFFALSE 79614
// exit ;
79612: GO 79643
// for i in tmp do
79614: LD_ADDR_VAR 0 1
79618: PUSH
79619: LD_VAR 0 2
79623: PUSH
79624: FOR_IN
79625: IFFALSE 79641
// SetFuel ( i , 0 ) ;
79627: LD_VAR 0 1
79631: PPUSH
79632: LD_INT 0
79634: PPUSH
79635: CALL_OW 240
79639: GO 79624
79641: POP
79642: POP
// end ;
79643: PPOPN 2
79645: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
79646: LD_EXP 66
79650: IFFALSE 79658
79652: PUSH
79653: LD_EXP 102
79657: AND
79658: IFFALSE 79724
79660: GO 79662
79662: DISABLE
79663: LD_INT 0
79665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
79666: LD_ADDR_VAR 0 1
79670: PUSH
79671: LD_INT 22
79673: PUSH
79674: LD_OWVAR 2
79678: PUSH
79679: EMPTY
79680: LIST
79681: LIST
79682: PUSH
79683: LD_INT 30
79685: PUSH
79686: LD_INT 29
79688: PUSH
79689: EMPTY
79690: LIST
79691: LIST
79692: PUSH
79693: EMPTY
79694: LIST
79695: LIST
79696: PPUSH
79697: CALL_OW 69
79701: ST_TO_ADDR
// if not tmp then
79702: LD_VAR 0 1
79706: NOT
79707: IFFALSE 79711
// exit ;
79709: GO 79724
// DestroyUnit ( tmp [ 1 ] ) ;
79711: LD_VAR 0 1
79715: PUSH
79716: LD_INT 1
79718: ARRAY
79719: PPUSH
79720: CALL_OW 65
// end ;
79724: PPOPN 1
79726: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
79727: LD_EXP 66
79731: IFFALSE 79739
79733: PUSH
79734: LD_EXP 104
79738: AND
79739: IFFALSE 79868
79741: GO 79743
79743: DISABLE
79744: LD_INT 0
79746: PPUSH
// begin uc_side := 0 ;
79747: LD_ADDR_OWVAR 20
79751: PUSH
79752: LD_INT 0
79754: ST_TO_ADDR
// uc_nation := nation_arabian ;
79755: LD_ADDR_OWVAR 21
79759: PUSH
79760: LD_INT 2
79762: ST_TO_ADDR
// hc_gallery :=  ;
79763: LD_ADDR_OWVAR 33
79767: PUSH
79768: LD_STRING 
79770: ST_TO_ADDR
// hc_name :=  ;
79771: LD_ADDR_OWVAR 26
79775: PUSH
79776: LD_STRING 
79778: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
79779: LD_INT 1
79781: PPUSH
79782: LD_INT 11
79784: PPUSH
79785: LD_INT 10
79787: PPUSH
79788: CALL_OW 380
// un := CreateHuman ;
79792: LD_ADDR_VAR 0 1
79796: PUSH
79797: CALL_OW 44
79801: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
79802: LD_VAR 0 1
79806: PPUSH
79807: LD_INT 1
79809: PPUSH
79810: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
79814: LD_INT 35
79816: PPUSH
79817: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
79821: LD_VAR 0 1
79825: PPUSH
79826: LD_INT 22
79828: PUSH
79829: LD_OWVAR 2
79833: PUSH
79834: EMPTY
79835: LIST
79836: LIST
79837: PPUSH
79838: CALL_OW 69
79842: PPUSH
79843: LD_VAR 0 1
79847: PPUSH
79848: CALL_OW 74
79852: PPUSH
79853: CALL_OW 115
// until IsDead ( un ) ;
79857: LD_VAR 0 1
79861: PPUSH
79862: CALL_OW 301
79866: IFFALSE 79814
// end ;
79868: PPOPN 1
79870: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
79871: LD_EXP 66
79875: IFFALSE 79883
79877: PUSH
79878: LD_EXP 106
79882: AND
79883: IFFALSE 79895
79885: GO 79887
79887: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
79888: LD_STRING earthquake(getX(game), 0, 32)
79890: PPUSH
79891: CALL_OW 559
79895: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
79896: LD_EXP 66
79900: IFFALSE 79908
79902: PUSH
79903: LD_EXP 107
79907: AND
79908: IFFALSE 79999
79910: GO 79912
79912: DISABLE
79913: LD_INT 0
79915: PPUSH
// begin enable ;
79916: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
79917: LD_ADDR_VAR 0 1
79921: PUSH
79922: LD_INT 22
79924: PUSH
79925: LD_OWVAR 2
79929: PUSH
79930: EMPTY
79931: LIST
79932: LIST
79933: PUSH
79934: LD_INT 21
79936: PUSH
79937: LD_INT 2
79939: PUSH
79940: EMPTY
79941: LIST
79942: LIST
79943: PUSH
79944: LD_INT 33
79946: PUSH
79947: LD_INT 3
79949: PUSH
79950: EMPTY
79951: LIST
79952: LIST
79953: PUSH
79954: EMPTY
79955: LIST
79956: LIST
79957: LIST
79958: PPUSH
79959: CALL_OW 69
79963: ST_TO_ADDR
// if not tmp then
79964: LD_VAR 0 1
79968: NOT
79969: IFFALSE 79973
// exit ;
79971: GO 79999
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
79973: LD_VAR 0 1
79977: PUSH
79978: LD_INT 1
79980: PPUSH
79981: LD_VAR 0 1
79985: PPUSH
79986: CALL_OW 12
79990: ARRAY
79991: PPUSH
79992: LD_INT 1
79994: PPUSH
79995: CALL_OW 234
// end ;
79999: PPOPN 1
80001: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
80002: LD_EXP 66
80006: IFFALSE 80014
80008: PUSH
80009: LD_EXP 108
80013: AND
80014: IFFALSE 80155
80016: GO 80018
80018: DISABLE
80019: LD_INT 0
80021: PPUSH
80022: PPUSH
80023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
80024: LD_ADDR_VAR 0 3
80028: PUSH
80029: LD_INT 22
80031: PUSH
80032: LD_OWVAR 2
80036: PUSH
80037: EMPTY
80038: LIST
80039: LIST
80040: PUSH
80041: LD_INT 25
80043: PUSH
80044: LD_INT 1
80046: PUSH
80047: EMPTY
80048: LIST
80049: LIST
80050: PUSH
80051: EMPTY
80052: LIST
80053: LIST
80054: PPUSH
80055: CALL_OW 69
80059: ST_TO_ADDR
// if not tmp then
80060: LD_VAR 0 3
80064: NOT
80065: IFFALSE 80069
// exit ;
80067: GO 80155
// un := tmp [ rand ( 1 , tmp ) ] ;
80069: LD_ADDR_VAR 0 2
80073: PUSH
80074: LD_VAR 0 3
80078: PUSH
80079: LD_INT 1
80081: PPUSH
80082: LD_VAR 0 3
80086: PPUSH
80087: CALL_OW 12
80091: ARRAY
80092: ST_TO_ADDR
// if Crawls ( un ) then
80093: LD_VAR 0 2
80097: PPUSH
80098: CALL_OW 318
80102: IFFALSE 80113
// ComWalk ( un ) ;
80104: LD_VAR 0 2
80108: PPUSH
80109: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
80113: LD_VAR 0 2
80117: PPUSH
80118: LD_INT 9
80120: PPUSH
80121: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
80125: LD_INT 28
80127: PPUSH
80128: LD_OWVAR 2
80132: PPUSH
80133: LD_INT 2
80135: PPUSH
80136: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
80140: LD_INT 29
80142: PPUSH
80143: LD_OWVAR 2
80147: PPUSH
80148: LD_INT 2
80150: PPUSH
80151: CALL_OW 322
// end ;
80155: PPOPN 3
80157: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
80158: LD_EXP 66
80162: IFFALSE 80170
80164: PUSH
80165: LD_EXP 109
80169: AND
80170: IFFALSE 80281
80172: GO 80174
80174: DISABLE
80175: LD_INT 0
80177: PPUSH
80178: PPUSH
80179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
80180: LD_ADDR_VAR 0 3
80184: PUSH
80185: LD_INT 22
80187: PUSH
80188: LD_OWVAR 2
80192: PUSH
80193: EMPTY
80194: LIST
80195: LIST
80196: PUSH
80197: LD_INT 25
80199: PUSH
80200: LD_INT 1
80202: PUSH
80203: EMPTY
80204: LIST
80205: LIST
80206: PUSH
80207: EMPTY
80208: LIST
80209: LIST
80210: PPUSH
80211: CALL_OW 69
80215: ST_TO_ADDR
// if not tmp then
80216: LD_VAR 0 3
80220: NOT
80221: IFFALSE 80225
// exit ;
80223: GO 80281
// un := tmp [ rand ( 1 , tmp ) ] ;
80225: LD_ADDR_VAR 0 2
80229: PUSH
80230: LD_VAR 0 3
80234: PUSH
80235: LD_INT 1
80237: PPUSH
80238: LD_VAR 0 3
80242: PPUSH
80243: CALL_OW 12
80247: ARRAY
80248: ST_TO_ADDR
// if Crawls ( un ) then
80249: LD_VAR 0 2
80253: PPUSH
80254: CALL_OW 318
80258: IFFALSE 80269
// ComWalk ( un ) ;
80260: LD_VAR 0 2
80264: PPUSH
80265: CALL_OW 138
// SetClass ( un , class_mortar ) ;
80269: LD_VAR 0 2
80273: PPUSH
80274: LD_INT 8
80276: PPUSH
80277: CALL_OW 336
// end ;
80281: PPOPN 3
80283: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
80284: LD_EXP 66
80288: IFFALSE 80296
80290: PUSH
80291: LD_EXP 110
80295: AND
80296: IFFALSE 80440
80298: GO 80300
80300: DISABLE
80301: LD_INT 0
80303: PPUSH
80304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
80305: LD_ADDR_VAR 0 2
80309: PUSH
80310: LD_INT 22
80312: PUSH
80313: LD_OWVAR 2
80317: PUSH
80318: EMPTY
80319: LIST
80320: LIST
80321: PUSH
80322: LD_INT 21
80324: PUSH
80325: LD_INT 2
80327: PUSH
80328: EMPTY
80329: LIST
80330: LIST
80331: PUSH
80332: LD_INT 2
80334: PUSH
80335: LD_INT 34
80337: PUSH
80338: LD_INT 12
80340: PUSH
80341: EMPTY
80342: LIST
80343: LIST
80344: PUSH
80345: LD_INT 34
80347: PUSH
80348: LD_INT 51
80350: PUSH
80351: EMPTY
80352: LIST
80353: LIST
80354: PUSH
80355: LD_INT 34
80357: PUSH
80358: LD_INT 32
80360: PUSH
80361: EMPTY
80362: LIST
80363: LIST
80364: PUSH
80365: EMPTY
80366: LIST
80367: LIST
80368: LIST
80369: LIST
80370: PUSH
80371: EMPTY
80372: LIST
80373: LIST
80374: LIST
80375: PPUSH
80376: CALL_OW 69
80380: ST_TO_ADDR
// if not tmp then
80381: LD_VAR 0 2
80385: NOT
80386: IFFALSE 80390
// exit ;
80388: GO 80440
// for i in tmp do
80390: LD_ADDR_VAR 0 1
80394: PUSH
80395: LD_VAR 0 2
80399: PUSH
80400: FOR_IN
80401: IFFALSE 80438
// if GetCargo ( i , mat_artifact ) = 0 then
80403: LD_VAR 0 1
80407: PPUSH
80408: LD_INT 4
80410: PPUSH
80411: CALL_OW 289
80415: PUSH
80416: LD_INT 0
80418: EQUAL
80419: IFFALSE 80436
// SetCargo ( i , mat_siberit , 100 ) ;
80421: LD_VAR 0 1
80425: PPUSH
80426: LD_INT 3
80428: PPUSH
80429: LD_INT 100
80431: PPUSH
80432: CALL_OW 290
80436: GO 80400
80438: POP
80439: POP
// end ;
80440: PPOPN 2
80442: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
80443: LD_EXP 66
80447: IFFALSE 80455
80449: PUSH
80450: LD_EXP 111
80454: AND
80455: IFFALSE 80638
80457: GO 80459
80459: DISABLE
80460: LD_INT 0
80462: PPUSH
80463: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
80464: LD_ADDR_VAR 0 2
80468: PUSH
80469: LD_INT 22
80471: PUSH
80472: LD_OWVAR 2
80476: PUSH
80477: EMPTY
80478: LIST
80479: LIST
80480: PPUSH
80481: CALL_OW 69
80485: ST_TO_ADDR
// if not tmp then
80486: LD_VAR 0 2
80490: NOT
80491: IFFALSE 80495
// exit ;
80493: GO 80638
// for i := 1 to 2 do
80495: LD_ADDR_VAR 0 1
80499: PUSH
80500: DOUBLE
80501: LD_INT 1
80503: DEC
80504: ST_TO_ADDR
80505: LD_INT 2
80507: PUSH
80508: FOR_TO
80509: IFFALSE 80636
// begin uc_side := your_side ;
80511: LD_ADDR_OWVAR 20
80515: PUSH
80516: LD_OWVAR 2
80520: ST_TO_ADDR
// uc_nation := nation_american ;
80521: LD_ADDR_OWVAR 21
80525: PUSH
80526: LD_INT 1
80528: ST_TO_ADDR
// vc_chassis := us_morphling ;
80529: LD_ADDR_OWVAR 37
80533: PUSH
80534: LD_INT 5
80536: ST_TO_ADDR
// vc_engine := engine_siberite ;
80537: LD_ADDR_OWVAR 39
80541: PUSH
80542: LD_INT 3
80544: ST_TO_ADDR
// vc_control := control_computer ;
80545: LD_ADDR_OWVAR 38
80549: PUSH
80550: LD_INT 3
80552: ST_TO_ADDR
// vc_weapon := us_double_laser ;
80553: LD_ADDR_OWVAR 40
80557: PUSH
80558: LD_INT 10
80560: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
80561: LD_VAR 0 2
80565: PUSH
80566: LD_INT 1
80568: ARRAY
80569: PPUSH
80570: CALL_OW 310
80574: NOT
80575: IFFALSE 80622
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
80577: CALL_OW 45
80581: PPUSH
80582: LD_VAR 0 2
80586: PUSH
80587: LD_INT 1
80589: ARRAY
80590: PPUSH
80591: CALL_OW 250
80595: PPUSH
80596: LD_VAR 0 2
80600: PUSH
80601: LD_INT 1
80603: ARRAY
80604: PPUSH
80605: CALL_OW 251
80609: PPUSH
80610: LD_INT 12
80612: PPUSH
80613: LD_INT 1
80615: PPUSH
80616: CALL_OW 50
80620: GO 80634
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
80622: CALL_OW 45
80626: PPUSH
80627: LD_INT 1
80629: PPUSH
80630: CALL_OW 51
// end ;
80634: GO 80508
80636: POP
80637: POP
// end ;
80638: PPOPN 2
80640: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
80641: LD_EXP 66
80645: IFFALSE 80653
80647: PUSH
80648: LD_EXP 112
80652: AND
80653: IFFALSE 80875
80655: GO 80657
80657: DISABLE
80658: LD_INT 0
80660: PPUSH
80661: PPUSH
80662: PPUSH
80663: PPUSH
80664: PPUSH
80665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
80666: LD_ADDR_VAR 0 6
80670: PUSH
80671: LD_INT 22
80673: PUSH
80674: LD_OWVAR 2
80678: PUSH
80679: EMPTY
80680: LIST
80681: LIST
80682: PUSH
80683: LD_INT 21
80685: PUSH
80686: LD_INT 1
80688: PUSH
80689: EMPTY
80690: LIST
80691: LIST
80692: PUSH
80693: LD_INT 3
80695: PUSH
80696: LD_INT 23
80698: PUSH
80699: LD_INT 0
80701: PUSH
80702: EMPTY
80703: LIST
80704: LIST
80705: PUSH
80706: EMPTY
80707: LIST
80708: LIST
80709: PUSH
80710: EMPTY
80711: LIST
80712: LIST
80713: LIST
80714: PPUSH
80715: CALL_OW 69
80719: ST_TO_ADDR
// if not tmp then
80720: LD_VAR 0 6
80724: NOT
80725: IFFALSE 80729
// exit ;
80727: GO 80875
// s1 := rand ( 1 , 4 ) ;
80729: LD_ADDR_VAR 0 2
80733: PUSH
80734: LD_INT 1
80736: PPUSH
80737: LD_INT 4
80739: PPUSH
80740: CALL_OW 12
80744: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
80745: LD_ADDR_VAR 0 4
80749: PUSH
80750: LD_VAR 0 6
80754: PUSH
80755: LD_INT 1
80757: ARRAY
80758: PPUSH
80759: LD_VAR 0 2
80763: PPUSH
80764: CALL_OW 259
80768: ST_TO_ADDR
// if s1 = 1 then
80769: LD_VAR 0 2
80773: PUSH
80774: LD_INT 1
80776: EQUAL
80777: IFFALSE 80797
// s2 := rand ( 2 , 4 ) else
80779: LD_ADDR_VAR 0 3
80783: PUSH
80784: LD_INT 2
80786: PPUSH
80787: LD_INT 4
80789: PPUSH
80790: CALL_OW 12
80794: ST_TO_ADDR
80795: GO 80805
// s2 := 1 ;
80797: LD_ADDR_VAR 0 3
80801: PUSH
80802: LD_INT 1
80804: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
80805: LD_ADDR_VAR 0 5
80809: PUSH
80810: LD_VAR 0 6
80814: PUSH
80815: LD_INT 1
80817: ARRAY
80818: PPUSH
80819: LD_VAR 0 3
80823: PPUSH
80824: CALL_OW 259
80828: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
80829: LD_VAR 0 6
80833: PUSH
80834: LD_INT 1
80836: ARRAY
80837: PPUSH
80838: LD_VAR 0 2
80842: PPUSH
80843: LD_VAR 0 5
80847: PPUSH
80848: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
80852: LD_VAR 0 6
80856: PUSH
80857: LD_INT 1
80859: ARRAY
80860: PPUSH
80861: LD_VAR 0 3
80865: PPUSH
80866: LD_VAR 0 4
80870: PPUSH
80871: CALL_OW 237
// end ;
80875: PPOPN 6
80877: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
80878: LD_EXP 66
80882: IFFALSE 80890
80884: PUSH
80885: LD_EXP 113
80889: AND
80890: IFFALSE 80969
80892: GO 80894
80894: DISABLE
80895: LD_INT 0
80897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
80898: LD_ADDR_VAR 0 1
80902: PUSH
80903: LD_INT 22
80905: PUSH
80906: LD_OWVAR 2
80910: PUSH
80911: EMPTY
80912: LIST
80913: LIST
80914: PUSH
80915: LD_INT 30
80917: PUSH
80918: LD_INT 3
80920: PUSH
80921: EMPTY
80922: LIST
80923: LIST
80924: PUSH
80925: EMPTY
80926: LIST
80927: LIST
80928: PPUSH
80929: CALL_OW 69
80933: ST_TO_ADDR
// if not tmp then
80934: LD_VAR 0 1
80938: NOT
80939: IFFALSE 80943
// exit ;
80941: GO 80969
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
80943: LD_VAR 0 1
80947: PUSH
80948: LD_INT 1
80950: PPUSH
80951: LD_VAR 0 1
80955: PPUSH
80956: CALL_OW 12
80960: ARRAY
80961: PPUSH
80962: LD_INT 1
80964: PPUSH
80965: CALL_OW 234
// end ;
80969: PPOPN 1
80971: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
80972: LD_EXP 66
80976: IFFALSE 80984
80978: PUSH
80979: LD_EXP 114
80983: AND
80984: IFFALSE 81096
80986: GO 80988
80988: DISABLE
80989: LD_INT 0
80991: PPUSH
80992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
80993: LD_ADDR_VAR 0 2
80997: PUSH
80998: LD_INT 22
81000: PUSH
81001: LD_OWVAR 2
81005: PUSH
81006: EMPTY
81007: LIST
81008: LIST
81009: PUSH
81010: LD_INT 2
81012: PUSH
81013: LD_INT 30
81015: PUSH
81016: LD_INT 27
81018: PUSH
81019: EMPTY
81020: LIST
81021: LIST
81022: PUSH
81023: LD_INT 30
81025: PUSH
81026: LD_INT 26
81028: PUSH
81029: EMPTY
81030: LIST
81031: LIST
81032: PUSH
81033: LD_INT 30
81035: PUSH
81036: LD_INT 28
81038: PUSH
81039: EMPTY
81040: LIST
81041: LIST
81042: PUSH
81043: EMPTY
81044: LIST
81045: LIST
81046: LIST
81047: LIST
81048: PUSH
81049: EMPTY
81050: LIST
81051: LIST
81052: PPUSH
81053: CALL_OW 69
81057: ST_TO_ADDR
// if not tmp then
81058: LD_VAR 0 2
81062: NOT
81063: IFFALSE 81067
// exit ;
81065: GO 81096
// for i in tmp do
81067: LD_ADDR_VAR 0 1
81071: PUSH
81072: LD_VAR 0 2
81076: PUSH
81077: FOR_IN
81078: IFFALSE 81094
// SetLives ( i , 1 ) ;
81080: LD_VAR 0 1
81084: PPUSH
81085: LD_INT 1
81087: PPUSH
81088: CALL_OW 234
81092: GO 81077
81094: POP
81095: POP
// end ;
81096: PPOPN 2
81098: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
81099: LD_EXP 66
81103: IFFALSE 81111
81105: PUSH
81106: LD_EXP 115
81110: AND
81111: IFFALSE 81398
81113: GO 81115
81115: DISABLE
81116: LD_INT 0
81118: PPUSH
81119: PPUSH
81120: PPUSH
// begin i := rand ( 1 , 7 ) ;
81121: LD_ADDR_VAR 0 1
81125: PUSH
81126: LD_INT 1
81128: PPUSH
81129: LD_INT 7
81131: PPUSH
81132: CALL_OW 12
81136: ST_TO_ADDR
// case i of 1 :
81137: LD_VAR 0 1
81141: PUSH
81142: LD_INT 1
81144: DOUBLE
81145: EQUAL
81146: IFTRUE 81150
81148: GO 81160
81150: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
81151: LD_STRING earthquake(getX(game), 0, 32)
81153: PPUSH
81154: CALL_OW 559
81158: GO 81398
81160: LD_INT 2
81162: DOUBLE
81163: EQUAL
81164: IFTRUE 81168
81166: GO 81182
81168: POP
// begin ToLua ( displayStucuk(); ) ;
81169: LD_STRING displayStucuk();
81171: PPUSH
81172: CALL_OW 559
// ResetFog ;
81176: CALL_OW 335
// end ; 3 :
81180: GO 81398
81182: LD_INT 3
81184: DOUBLE
81185: EQUAL
81186: IFTRUE 81190
81188: GO 81294
81190: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81191: LD_ADDR_VAR 0 2
81195: PUSH
81196: LD_INT 22
81198: PUSH
81199: LD_OWVAR 2
81203: PUSH
81204: EMPTY
81205: LIST
81206: LIST
81207: PUSH
81208: LD_INT 25
81210: PUSH
81211: LD_INT 1
81213: PUSH
81214: EMPTY
81215: LIST
81216: LIST
81217: PUSH
81218: EMPTY
81219: LIST
81220: LIST
81221: PPUSH
81222: CALL_OW 69
81226: ST_TO_ADDR
// if not tmp then
81227: LD_VAR 0 2
81231: NOT
81232: IFFALSE 81236
// exit ;
81234: GO 81398
// un := tmp [ rand ( 1 , tmp ) ] ;
81236: LD_ADDR_VAR 0 3
81240: PUSH
81241: LD_VAR 0 2
81245: PUSH
81246: LD_INT 1
81248: PPUSH
81249: LD_VAR 0 2
81253: PPUSH
81254: CALL_OW 12
81258: ARRAY
81259: ST_TO_ADDR
// if Crawls ( un ) then
81260: LD_VAR 0 3
81264: PPUSH
81265: CALL_OW 318
81269: IFFALSE 81280
// ComWalk ( un ) ;
81271: LD_VAR 0 3
81275: PPUSH
81276: CALL_OW 138
// SetClass ( un , class_mortar ) ;
81280: LD_VAR 0 3
81284: PPUSH
81285: LD_INT 8
81287: PPUSH
81288: CALL_OW 336
// end ; 4 :
81292: GO 81398
81294: LD_INT 4
81296: DOUBLE
81297: EQUAL
81298: IFTRUE 81302
81300: GO 81376
81302: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
81303: LD_ADDR_VAR 0 2
81307: PUSH
81308: LD_INT 22
81310: PUSH
81311: LD_OWVAR 2
81315: PUSH
81316: EMPTY
81317: LIST
81318: LIST
81319: PUSH
81320: LD_INT 30
81322: PUSH
81323: LD_INT 29
81325: PUSH
81326: EMPTY
81327: LIST
81328: LIST
81329: PUSH
81330: EMPTY
81331: LIST
81332: LIST
81333: PPUSH
81334: CALL_OW 69
81338: ST_TO_ADDR
// if not tmp then
81339: LD_VAR 0 2
81343: NOT
81344: IFFALSE 81348
// exit ;
81346: GO 81398
// CenterNowOnUnits ( tmp [ 1 ] ) ;
81348: LD_VAR 0 2
81352: PUSH
81353: LD_INT 1
81355: ARRAY
81356: PPUSH
81357: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
81361: LD_VAR 0 2
81365: PUSH
81366: LD_INT 1
81368: ARRAY
81369: PPUSH
81370: CALL_OW 65
// end ; 5 .. 7 :
81374: GO 81398
81376: LD_INT 5
81378: DOUBLE
81379: GREATEREQUAL
81380: IFFALSE 81388
81382: LD_INT 7
81384: DOUBLE
81385: LESSEQUAL
81386: IFTRUE 81390
81388: GO 81397
81390: POP
// StreamSibBomb ; end ;
81391: CALL 77579 0 0
81395: GO 81398
81397: POP
// end ;
81398: PPOPN 3
81400: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
81401: LD_EXP 66
81405: IFFALSE 81413
81407: PUSH
81408: LD_EXP 116
81412: AND
81413: IFFALSE 81569
81415: GO 81417
81417: DISABLE
81418: LD_INT 0
81420: PPUSH
81421: PPUSH
81422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
81423: LD_ADDR_VAR 0 2
81427: PUSH
81428: LD_INT 81
81430: PUSH
81431: LD_OWVAR 2
81435: PUSH
81436: EMPTY
81437: LIST
81438: LIST
81439: PUSH
81440: LD_INT 2
81442: PUSH
81443: LD_INT 21
81445: PUSH
81446: LD_INT 1
81448: PUSH
81449: EMPTY
81450: LIST
81451: LIST
81452: PUSH
81453: LD_INT 21
81455: PUSH
81456: LD_INT 2
81458: PUSH
81459: EMPTY
81460: LIST
81461: LIST
81462: PUSH
81463: EMPTY
81464: LIST
81465: LIST
81466: LIST
81467: PUSH
81468: EMPTY
81469: LIST
81470: LIST
81471: PPUSH
81472: CALL_OW 69
81476: ST_TO_ADDR
// if not tmp then
81477: LD_VAR 0 2
81481: NOT
81482: IFFALSE 81486
// exit ;
81484: GO 81569
// p := 0 ;
81486: LD_ADDR_VAR 0 3
81490: PUSH
81491: LD_INT 0
81493: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
81494: LD_INT 35
81496: PPUSH
81497: CALL_OW 67
// p := p + 1 ;
81501: LD_ADDR_VAR 0 3
81505: PUSH
81506: LD_VAR 0 3
81510: PUSH
81511: LD_INT 1
81513: PLUS
81514: ST_TO_ADDR
// for i in tmp do
81515: LD_ADDR_VAR 0 1
81519: PUSH
81520: LD_VAR 0 2
81524: PUSH
81525: FOR_IN
81526: IFFALSE 81557
// if GetLives ( i ) < 1000 then
81528: LD_VAR 0 1
81532: PPUSH
81533: CALL_OW 256
81537: PUSH
81538: LD_INT 1000
81540: LESS
81541: IFFALSE 81555
// SetLives ( i , 1000 ) ;
81543: LD_VAR 0 1
81547: PPUSH
81548: LD_INT 1000
81550: PPUSH
81551: CALL_OW 234
81555: GO 81525
81557: POP
81558: POP
// until p > 20 ;
81559: LD_VAR 0 3
81563: PUSH
81564: LD_INT 20
81566: GREATER
81567: IFFALSE 81494
// end ;
81569: PPOPN 3
81571: END
// every 0 0$1 trigger StreamModeActive and sTime do
81572: LD_EXP 66
81576: IFFALSE 81584
81578: PUSH
81579: LD_EXP 117
81583: AND
81584: IFFALSE 81619
81586: GO 81588
81588: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
81589: LD_INT 28
81591: PPUSH
81592: LD_OWVAR 2
81596: PPUSH
81597: LD_INT 2
81599: PPUSH
81600: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
81604: LD_INT 30
81606: PPUSH
81607: LD_OWVAR 2
81611: PPUSH
81612: LD_INT 2
81614: PPUSH
81615: CALL_OW 322
// end ;
81619: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
81620: LD_EXP 66
81624: IFFALSE 81632
81626: PUSH
81627: LD_EXP 118
81631: AND
81632: IFFALSE 81753
81634: GO 81636
81636: DISABLE
81637: LD_INT 0
81639: PPUSH
81640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
81641: LD_ADDR_VAR 0 2
81645: PUSH
81646: LD_INT 22
81648: PUSH
81649: LD_OWVAR 2
81653: PUSH
81654: EMPTY
81655: LIST
81656: LIST
81657: PUSH
81658: LD_INT 21
81660: PUSH
81661: LD_INT 1
81663: PUSH
81664: EMPTY
81665: LIST
81666: LIST
81667: PUSH
81668: LD_INT 3
81670: PUSH
81671: LD_INT 23
81673: PUSH
81674: LD_INT 0
81676: PUSH
81677: EMPTY
81678: LIST
81679: LIST
81680: PUSH
81681: EMPTY
81682: LIST
81683: LIST
81684: PUSH
81685: EMPTY
81686: LIST
81687: LIST
81688: LIST
81689: PPUSH
81690: CALL_OW 69
81694: ST_TO_ADDR
// if not tmp then
81695: LD_VAR 0 2
81699: NOT
81700: IFFALSE 81704
// exit ;
81702: GO 81753
// for i in tmp do
81704: LD_ADDR_VAR 0 1
81708: PUSH
81709: LD_VAR 0 2
81713: PUSH
81714: FOR_IN
81715: IFFALSE 81751
// begin if Crawls ( i ) then
81717: LD_VAR 0 1
81721: PPUSH
81722: CALL_OW 318
81726: IFFALSE 81737
// ComWalk ( i ) ;
81728: LD_VAR 0 1
81732: PPUSH
81733: CALL_OW 138
// SetClass ( i , 2 ) ;
81737: LD_VAR 0 1
81741: PPUSH
81742: LD_INT 2
81744: PPUSH
81745: CALL_OW 336
// end ;
81749: GO 81714
81751: POP
81752: POP
// end ;
81753: PPOPN 2
81755: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
81756: LD_EXP 66
81760: IFFALSE 81768
81762: PUSH
81763: LD_EXP 119
81767: AND
81768: IFFALSE 82058
81770: GO 81772
81772: DISABLE
81773: LD_INT 0
81775: PPUSH
81776: PPUSH
81777: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
81778: LD_OWVAR 2
81782: PPUSH
81783: LD_INT 9
81785: PPUSH
81786: LD_INT 1
81788: PPUSH
81789: LD_INT 1
81791: PPUSH
81792: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
81796: LD_INT 9
81798: PPUSH
81799: LD_OWVAR 2
81803: PPUSH
81804: CALL_OW 343
// uc_side := 9 ;
81808: LD_ADDR_OWVAR 20
81812: PUSH
81813: LD_INT 9
81815: ST_TO_ADDR
// uc_nation := 2 ;
81816: LD_ADDR_OWVAR 21
81820: PUSH
81821: LD_INT 2
81823: ST_TO_ADDR
// hc_name := Dark Warrior ;
81824: LD_ADDR_OWVAR 26
81828: PUSH
81829: LD_STRING Dark Warrior
81831: ST_TO_ADDR
// hc_gallery :=  ;
81832: LD_ADDR_OWVAR 33
81836: PUSH
81837: LD_STRING 
81839: ST_TO_ADDR
// hc_noskilllimit := true ;
81840: LD_ADDR_OWVAR 76
81844: PUSH
81845: LD_INT 1
81847: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
81848: LD_ADDR_OWVAR 31
81852: PUSH
81853: LD_INT 30
81855: PUSH
81856: LD_INT 30
81858: PUSH
81859: LD_INT 30
81861: PUSH
81862: LD_INT 30
81864: PUSH
81865: EMPTY
81866: LIST
81867: LIST
81868: LIST
81869: LIST
81870: ST_TO_ADDR
// un := CreateHuman ;
81871: LD_ADDR_VAR 0 3
81875: PUSH
81876: CALL_OW 44
81880: ST_TO_ADDR
// hc_noskilllimit := false ;
81881: LD_ADDR_OWVAR 76
81885: PUSH
81886: LD_INT 0
81888: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
81889: LD_VAR 0 3
81893: PPUSH
81894: LD_INT 1
81896: PPUSH
81897: CALL_OW 51
// ToLua ( playRanger() ) ;
81901: LD_STRING playRanger()
81903: PPUSH
81904: CALL_OW 559
// p := 0 ;
81908: LD_ADDR_VAR 0 2
81912: PUSH
81913: LD_INT 0
81915: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
81916: LD_INT 35
81918: PPUSH
81919: CALL_OW 67
// p := p + 1 ;
81923: LD_ADDR_VAR 0 2
81927: PUSH
81928: LD_VAR 0 2
81932: PUSH
81933: LD_INT 1
81935: PLUS
81936: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
81937: LD_VAR 0 3
81941: PPUSH
81942: CALL_OW 256
81946: PUSH
81947: LD_INT 1000
81949: LESS
81950: IFFALSE 81964
// SetLives ( un , 1000 ) ;
81952: LD_VAR 0 3
81956: PPUSH
81957: LD_INT 1000
81959: PPUSH
81960: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
81964: LD_VAR 0 3
81968: PPUSH
81969: LD_INT 81
81971: PUSH
81972: LD_OWVAR 2
81976: PUSH
81977: EMPTY
81978: LIST
81979: LIST
81980: PUSH
81981: LD_INT 91
81983: PUSH
81984: LD_VAR 0 3
81988: PUSH
81989: LD_INT 30
81991: PUSH
81992: EMPTY
81993: LIST
81994: LIST
81995: LIST
81996: PUSH
81997: EMPTY
81998: LIST
81999: LIST
82000: PPUSH
82001: CALL_OW 69
82005: PPUSH
82006: LD_VAR 0 3
82010: PPUSH
82011: CALL_OW 74
82015: PPUSH
82016: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
82020: LD_VAR 0 2
82024: PUSH
82025: LD_INT 80
82027: GREATER
82028: IFTRUE 82041
82030: PUSH
82031: LD_VAR 0 3
82035: PPUSH
82036: CALL_OW 301
82040: OR
82041: IFFALSE 81916
// if un then
82043: LD_VAR 0 3
82047: IFFALSE 82058
// RemoveUnit ( un ) ;
82049: LD_VAR 0 3
82053: PPUSH
82054: CALL_OW 64
// end ;
82058: PPOPN 3
82060: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
82061: LD_EXP 120
82065: IFFALSE 82181
82067: GO 82069
82069: DISABLE
82070: LD_INT 0
82072: PPUSH
82073: PPUSH
82074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
82075: LD_ADDR_VAR 0 2
82079: PUSH
82080: LD_INT 81
82082: PUSH
82083: LD_OWVAR 2
82087: PUSH
82088: EMPTY
82089: LIST
82090: LIST
82091: PUSH
82092: LD_INT 21
82094: PUSH
82095: LD_INT 1
82097: PUSH
82098: EMPTY
82099: LIST
82100: LIST
82101: PUSH
82102: EMPTY
82103: LIST
82104: LIST
82105: PPUSH
82106: CALL_OW 69
82110: ST_TO_ADDR
// ToLua ( playComputer() ) ;
82111: LD_STRING playComputer()
82113: PPUSH
82114: CALL_OW 559
// if not tmp then
82118: LD_VAR 0 2
82122: NOT
82123: IFFALSE 82127
// exit ;
82125: GO 82181
// for i in tmp do
82127: LD_ADDR_VAR 0 1
82131: PUSH
82132: LD_VAR 0 2
82136: PUSH
82137: FOR_IN
82138: IFFALSE 82179
// for j := 1 to 4 do
82140: LD_ADDR_VAR 0 3
82144: PUSH
82145: DOUBLE
82146: LD_INT 1
82148: DEC
82149: ST_TO_ADDR
82150: LD_INT 4
82152: PUSH
82153: FOR_TO
82154: IFFALSE 82175
// SetSkill ( i , j , 10 ) ;
82156: LD_VAR 0 1
82160: PPUSH
82161: LD_VAR 0 3
82165: PPUSH
82166: LD_INT 10
82168: PPUSH
82169: CALL_OW 237
82173: GO 82153
82175: POP
82176: POP
82177: GO 82137
82179: POP
82180: POP
// end ;
82181: PPOPN 3
82183: END
// every 0 0$1 trigger s30 do var i , tmp ;
82184: LD_EXP 121
82188: IFFALSE 82257
82190: GO 82192
82192: DISABLE
82193: LD_INT 0
82195: PPUSH
82196: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82197: LD_ADDR_VAR 0 2
82201: PUSH
82202: LD_INT 22
82204: PUSH
82205: LD_OWVAR 2
82209: PUSH
82210: EMPTY
82211: LIST
82212: LIST
82213: PPUSH
82214: CALL_OW 69
82218: ST_TO_ADDR
// if not tmp then
82219: LD_VAR 0 2
82223: NOT
82224: IFFALSE 82228
// exit ;
82226: GO 82257
// for i in tmp do
82228: LD_ADDR_VAR 0 1
82232: PUSH
82233: LD_VAR 0 2
82237: PUSH
82238: FOR_IN
82239: IFFALSE 82255
// SetLives ( i , 300 ) ;
82241: LD_VAR 0 1
82245: PPUSH
82246: LD_INT 300
82248: PPUSH
82249: CALL_OW 234
82253: GO 82238
82255: POP
82256: POP
// end ;
82257: PPOPN 2
82259: END
// every 0 0$1 trigger s60 do var i , tmp ;
82260: LD_EXP 122
82264: IFFALSE 82333
82266: GO 82268
82268: DISABLE
82269: LD_INT 0
82271: PPUSH
82272: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82273: LD_ADDR_VAR 0 2
82277: PUSH
82278: LD_INT 22
82280: PUSH
82281: LD_OWVAR 2
82285: PUSH
82286: EMPTY
82287: LIST
82288: LIST
82289: PPUSH
82290: CALL_OW 69
82294: ST_TO_ADDR
// if not tmp then
82295: LD_VAR 0 2
82299: NOT
82300: IFFALSE 82304
// exit ;
82302: GO 82333
// for i in tmp do
82304: LD_ADDR_VAR 0 1
82308: PUSH
82309: LD_VAR 0 2
82313: PUSH
82314: FOR_IN
82315: IFFALSE 82331
// SetLives ( i , 600 ) ;
82317: LD_VAR 0 1
82321: PPUSH
82322: LD_INT 600
82324: PPUSH
82325: CALL_OW 234
82329: GO 82314
82331: POP
82332: POP
// end ;
82333: PPOPN 2
82335: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
82336: LD_INT 0
82338: PPUSH
// case cmd of 301 :
82339: LD_VAR 0 1
82343: PUSH
82344: LD_INT 301
82346: DOUBLE
82347: EQUAL
82348: IFTRUE 82352
82350: GO 82384
82352: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
82353: LD_VAR 0 6
82357: PPUSH
82358: LD_VAR 0 7
82362: PPUSH
82363: LD_VAR 0 8
82367: PPUSH
82368: LD_VAR 0 4
82372: PPUSH
82373: LD_VAR 0 5
82377: PPUSH
82378: CALL 83597 0 5
82382: GO 82505
82384: LD_INT 302
82386: DOUBLE
82387: EQUAL
82388: IFTRUE 82392
82390: GO 82429
82392: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
82393: LD_VAR 0 6
82397: PPUSH
82398: LD_VAR 0 7
82402: PPUSH
82403: LD_VAR 0 8
82407: PPUSH
82408: LD_VAR 0 9
82412: PPUSH
82413: LD_VAR 0 4
82417: PPUSH
82418: LD_VAR 0 5
82422: PPUSH
82423: CALL 83688 0 6
82427: GO 82505
82429: LD_INT 303
82431: DOUBLE
82432: EQUAL
82433: IFTRUE 82437
82435: GO 82474
82437: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
82438: LD_VAR 0 6
82442: PPUSH
82443: LD_VAR 0 7
82447: PPUSH
82448: LD_VAR 0 8
82452: PPUSH
82453: LD_VAR 0 9
82457: PPUSH
82458: LD_VAR 0 4
82462: PPUSH
82463: LD_VAR 0 5
82467: PPUSH
82468: CALL 82510 0 6
82472: GO 82505
82474: LD_INT 304
82476: DOUBLE
82477: EQUAL
82478: IFTRUE 82482
82480: GO 82504
82482: POP
// hHackTeleport ( unit , x , y ) ; end ;
82483: LD_VAR 0 2
82487: PPUSH
82488: LD_VAR 0 4
82492: PPUSH
82493: LD_VAR 0 5
82497: PPUSH
82498: CALL 84281 0 3
82502: GO 82505
82504: POP
// end ;
82505: LD_VAR 0 12
82509: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
82510: LD_INT 0
82512: PPUSH
82513: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
82514: LD_VAR 0 1
82518: PUSH
82519: LD_INT 1
82521: LESS
82522: IFTRUE 82534
82524: PUSH
82525: LD_VAR 0 1
82529: PUSH
82530: LD_INT 3
82532: GREATER
82533: OR
82534: IFTRUE 82552
82536: PUSH
82537: LD_VAR 0 5
82541: PPUSH
82542: LD_VAR 0 6
82546: PPUSH
82547: CALL_OW 428
82551: OR
82552: IFFALSE 82556
// exit ;
82554: GO 83284
// uc_side := your_side ;
82556: LD_ADDR_OWVAR 20
82560: PUSH
82561: LD_OWVAR 2
82565: ST_TO_ADDR
// uc_nation := nation ;
82566: LD_ADDR_OWVAR 21
82570: PUSH
82571: LD_VAR 0 1
82575: ST_TO_ADDR
// bc_level = 1 ;
82576: LD_ADDR_OWVAR 43
82580: PUSH
82581: LD_INT 1
82583: ST_TO_ADDR
// case btype of 1 :
82584: LD_VAR 0 2
82588: PUSH
82589: LD_INT 1
82591: DOUBLE
82592: EQUAL
82593: IFTRUE 82597
82595: GO 82608
82597: POP
// bc_type := b_depot ; 2 :
82598: LD_ADDR_OWVAR 42
82602: PUSH
82603: LD_INT 0
82605: ST_TO_ADDR
82606: GO 83228
82608: LD_INT 2
82610: DOUBLE
82611: EQUAL
82612: IFTRUE 82616
82614: GO 82627
82616: POP
// bc_type := b_warehouse ; 3 :
82617: LD_ADDR_OWVAR 42
82621: PUSH
82622: LD_INT 1
82624: ST_TO_ADDR
82625: GO 83228
82627: LD_INT 3
82629: DOUBLE
82630: EQUAL
82631: IFTRUE 82635
82633: GO 82646
82635: POP
// bc_type := b_lab ; 4 .. 9 :
82636: LD_ADDR_OWVAR 42
82640: PUSH
82641: LD_INT 6
82643: ST_TO_ADDR
82644: GO 83228
82646: LD_INT 4
82648: DOUBLE
82649: GREATEREQUAL
82650: IFFALSE 82658
82652: LD_INT 9
82654: DOUBLE
82655: LESSEQUAL
82656: IFTRUE 82660
82658: GO 82720
82660: POP
// begin bc_type := b_lab_half ;
82661: LD_ADDR_OWVAR 42
82665: PUSH
82666: LD_INT 7
82668: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
82669: LD_ADDR_OWVAR 44
82673: PUSH
82674: LD_INT 10
82676: PUSH
82677: LD_INT 11
82679: PUSH
82680: LD_INT 12
82682: PUSH
82683: LD_INT 15
82685: PUSH
82686: LD_INT 14
82688: PUSH
82689: LD_INT 13
82691: PUSH
82692: EMPTY
82693: LIST
82694: LIST
82695: LIST
82696: LIST
82697: LIST
82698: LIST
82699: PUSH
82700: LD_VAR 0 2
82704: PUSH
82705: LD_INT 3
82707: MINUS
82708: ARRAY
82709: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
82710: LD_ADDR_OWVAR 45
82714: PUSH
82715: LD_INT 9
82717: ST_TO_ADDR
// end ; 10 .. 13 :
82718: GO 83228
82720: LD_INT 10
82722: DOUBLE
82723: GREATEREQUAL
82724: IFFALSE 82732
82726: LD_INT 13
82728: DOUBLE
82729: LESSEQUAL
82730: IFTRUE 82734
82732: GO 82811
82734: POP
// begin bc_type := b_lab_full ;
82735: LD_ADDR_OWVAR 42
82739: PUSH
82740: LD_INT 8
82742: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
82743: LD_ADDR_OWVAR 44
82747: PUSH
82748: LD_INT 10
82750: PUSH
82751: LD_INT 12
82753: PUSH
82754: LD_INT 14
82756: PUSH
82757: LD_INT 13
82759: PUSH
82760: EMPTY
82761: LIST
82762: LIST
82763: LIST
82764: LIST
82765: PUSH
82766: LD_VAR 0 2
82770: PUSH
82771: LD_INT 9
82773: MINUS
82774: ARRAY
82775: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
82776: LD_ADDR_OWVAR 45
82780: PUSH
82781: LD_INT 11
82783: PUSH
82784: LD_INT 15
82786: PUSH
82787: LD_INT 12
82789: PUSH
82790: LD_INT 15
82792: PUSH
82793: EMPTY
82794: LIST
82795: LIST
82796: LIST
82797: LIST
82798: PUSH
82799: LD_VAR 0 2
82803: PUSH
82804: LD_INT 9
82806: MINUS
82807: ARRAY
82808: ST_TO_ADDR
// end ; 14 :
82809: GO 83228
82811: LD_INT 14
82813: DOUBLE
82814: EQUAL
82815: IFTRUE 82819
82817: GO 82830
82819: POP
// bc_type := b_workshop ; 15 :
82820: LD_ADDR_OWVAR 42
82824: PUSH
82825: LD_INT 2
82827: ST_TO_ADDR
82828: GO 83228
82830: LD_INT 15
82832: DOUBLE
82833: EQUAL
82834: IFTRUE 82838
82836: GO 82849
82838: POP
// bc_type := b_factory ; 16 :
82839: LD_ADDR_OWVAR 42
82843: PUSH
82844: LD_INT 3
82846: ST_TO_ADDR
82847: GO 83228
82849: LD_INT 16
82851: DOUBLE
82852: EQUAL
82853: IFTRUE 82857
82855: GO 82868
82857: POP
// bc_type := b_ext_gun ; 17 :
82858: LD_ADDR_OWVAR 42
82862: PUSH
82863: LD_INT 17
82865: ST_TO_ADDR
82866: GO 83228
82868: LD_INT 17
82870: DOUBLE
82871: EQUAL
82872: IFTRUE 82876
82874: GO 82904
82876: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
82877: LD_ADDR_OWVAR 42
82881: PUSH
82882: LD_INT 19
82884: PUSH
82885: LD_INT 23
82887: PUSH
82888: LD_INT 19
82890: PUSH
82891: EMPTY
82892: LIST
82893: LIST
82894: LIST
82895: PUSH
82896: LD_VAR 0 1
82900: ARRAY
82901: ST_TO_ADDR
82902: GO 83228
82904: LD_INT 18
82906: DOUBLE
82907: EQUAL
82908: IFTRUE 82912
82910: GO 82923
82912: POP
// bc_type := b_ext_radar ; 19 :
82913: LD_ADDR_OWVAR 42
82917: PUSH
82918: LD_INT 20
82920: ST_TO_ADDR
82921: GO 83228
82923: LD_INT 19
82925: DOUBLE
82926: EQUAL
82927: IFTRUE 82931
82929: GO 82942
82931: POP
// bc_type := b_ext_radio ; 20 :
82932: LD_ADDR_OWVAR 42
82936: PUSH
82937: LD_INT 22
82939: ST_TO_ADDR
82940: GO 83228
82942: LD_INT 20
82944: DOUBLE
82945: EQUAL
82946: IFTRUE 82950
82948: GO 82961
82950: POP
// bc_type := b_ext_siberium ; 21 :
82951: LD_ADDR_OWVAR 42
82955: PUSH
82956: LD_INT 21
82958: ST_TO_ADDR
82959: GO 83228
82961: LD_INT 21
82963: DOUBLE
82964: EQUAL
82965: IFTRUE 82969
82967: GO 82980
82969: POP
// bc_type := b_ext_computer ; 22 :
82970: LD_ADDR_OWVAR 42
82974: PUSH
82975: LD_INT 24
82977: ST_TO_ADDR
82978: GO 83228
82980: LD_INT 22
82982: DOUBLE
82983: EQUAL
82984: IFTRUE 82988
82986: GO 82999
82988: POP
// bc_type := b_ext_track ; 23 :
82989: LD_ADDR_OWVAR 42
82993: PUSH
82994: LD_INT 16
82996: ST_TO_ADDR
82997: GO 83228
82999: LD_INT 23
83001: DOUBLE
83002: EQUAL
83003: IFTRUE 83007
83005: GO 83018
83007: POP
// bc_type := b_ext_laser ; 24 :
83008: LD_ADDR_OWVAR 42
83012: PUSH
83013: LD_INT 25
83015: ST_TO_ADDR
83016: GO 83228
83018: LD_INT 24
83020: DOUBLE
83021: EQUAL
83022: IFTRUE 83026
83024: GO 83037
83026: POP
// bc_type := b_control_tower ; 25 :
83027: LD_ADDR_OWVAR 42
83031: PUSH
83032: LD_INT 36
83034: ST_TO_ADDR
83035: GO 83228
83037: LD_INT 25
83039: DOUBLE
83040: EQUAL
83041: IFTRUE 83045
83043: GO 83056
83045: POP
// bc_type := b_breastwork ; 26 :
83046: LD_ADDR_OWVAR 42
83050: PUSH
83051: LD_INT 31
83053: ST_TO_ADDR
83054: GO 83228
83056: LD_INT 26
83058: DOUBLE
83059: EQUAL
83060: IFTRUE 83064
83062: GO 83075
83064: POP
// bc_type := b_bunker ; 27 :
83065: LD_ADDR_OWVAR 42
83069: PUSH
83070: LD_INT 32
83072: ST_TO_ADDR
83073: GO 83228
83075: LD_INT 27
83077: DOUBLE
83078: EQUAL
83079: IFTRUE 83083
83081: GO 83094
83083: POP
// bc_type := b_turret ; 28 :
83084: LD_ADDR_OWVAR 42
83088: PUSH
83089: LD_INT 33
83091: ST_TO_ADDR
83092: GO 83228
83094: LD_INT 28
83096: DOUBLE
83097: EQUAL
83098: IFTRUE 83102
83100: GO 83113
83102: POP
// bc_type := b_armoury ; 29 :
83103: LD_ADDR_OWVAR 42
83107: PUSH
83108: LD_INT 4
83110: ST_TO_ADDR
83111: GO 83228
83113: LD_INT 29
83115: DOUBLE
83116: EQUAL
83117: IFTRUE 83121
83119: GO 83132
83121: POP
// bc_type := b_barracks ; 30 :
83122: LD_ADDR_OWVAR 42
83126: PUSH
83127: LD_INT 5
83129: ST_TO_ADDR
83130: GO 83228
83132: LD_INT 30
83134: DOUBLE
83135: EQUAL
83136: IFTRUE 83140
83138: GO 83151
83140: POP
// bc_type := b_solar_power ; 31 :
83141: LD_ADDR_OWVAR 42
83145: PUSH
83146: LD_INT 27
83148: ST_TO_ADDR
83149: GO 83228
83151: LD_INT 31
83153: DOUBLE
83154: EQUAL
83155: IFTRUE 83159
83157: GO 83170
83159: POP
// bc_type := b_oil_power ; 32 :
83160: LD_ADDR_OWVAR 42
83164: PUSH
83165: LD_INT 26
83167: ST_TO_ADDR
83168: GO 83228
83170: LD_INT 32
83172: DOUBLE
83173: EQUAL
83174: IFTRUE 83178
83176: GO 83189
83178: POP
// bc_type := b_siberite_power ; 33 :
83179: LD_ADDR_OWVAR 42
83183: PUSH
83184: LD_INT 28
83186: ST_TO_ADDR
83187: GO 83228
83189: LD_INT 33
83191: DOUBLE
83192: EQUAL
83193: IFTRUE 83197
83195: GO 83208
83197: POP
// bc_type := b_oil_mine ; 34 :
83198: LD_ADDR_OWVAR 42
83202: PUSH
83203: LD_INT 29
83205: ST_TO_ADDR
83206: GO 83228
83208: LD_INT 34
83210: DOUBLE
83211: EQUAL
83212: IFTRUE 83216
83214: GO 83227
83216: POP
// bc_type := b_siberite_mine ; end ;
83217: LD_ADDR_OWVAR 42
83221: PUSH
83222: LD_INT 30
83224: ST_TO_ADDR
83225: GO 83228
83227: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
83228: LD_ADDR_VAR 0 8
83232: PUSH
83233: LD_VAR 0 5
83237: PPUSH
83238: LD_VAR 0 6
83242: PPUSH
83243: LD_VAR 0 3
83247: PPUSH
83248: CALL_OW 47
83252: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
83253: LD_OWVAR 42
83257: PUSH
83258: LD_INT 32
83260: PUSH
83261: LD_INT 33
83263: PUSH
83264: EMPTY
83265: LIST
83266: LIST
83267: IN
83268: IFFALSE 83284
// PlaceWeaponTurret ( b , weapon ) ;
83270: LD_VAR 0 8
83274: PPUSH
83275: LD_VAR 0 4
83279: PPUSH
83280: CALL_OW 431
// end ;
83284: LD_VAR 0 7
83288: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
83289: LD_INT 0
83291: PPUSH
83292: PPUSH
83293: PPUSH
83294: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
83295: LD_ADDR_VAR 0 4
83299: PUSH
83300: LD_INT 22
83302: PUSH
83303: LD_OWVAR 2
83307: PUSH
83308: EMPTY
83309: LIST
83310: LIST
83311: PUSH
83312: LD_INT 2
83314: PUSH
83315: LD_INT 30
83317: PUSH
83318: LD_INT 0
83320: PUSH
83321: EMPTY
83322: LIST
83323: LIST
83324: PUSH
83325: LD_INT 30
83327: PUSH
83328: LD_INT 1
83330: PUSH
83331: EMPTY
83332: LIST
83333: LIST
83334: PUSH
83335: EMPTY
83336: LIST
83337: LIST
83338: LIST
83339: PUSH
83340: EMPTY
83341: LIST
83342: LIST
83343: PPUSH
83344: CALL_OW 69
83348: ST_TO_ADDR
// if not tmp then
83349: LD_VAR 0 4
83353: NOT
83354: IFFALSE 83358
// exit ;
83356: GO 83417
// for i in tmp do
83358: LD_ADDR_VAR 0 2
83362: PUSH
83363: LD_VAR 0 4
83367: PUSH
83368: FOR_IN
83369: IFFALSE 83415
// for j = 1 to 3 do
83371: LD_ADDR_VAR 0 3
83375: PUSH
83376: DOUBLE
83377: LD_INT 1
83379: DEC
83380: ST_TO_ADDR
83381: LD_INT 3
83383: PUSH
83384: FOR_TO
83385: IFFALSE 83411
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
83387: LD_VAR 0 2
83391: PPUSH
83392: CALL_OW 274
83396: PPUSH
83397: LD_VAR 0 3
83401: PPUSH
83402: LD_INT 99999
83404: PPUSH
83405: CALL_OW 277
83409: GO 83384
83411: POP
83412: POP
83413: GO 83368
83415: POP
83416: POP
// end ;
83417: LD_VAR 0 1
83421: RET
// export function hHackSetLevel10 ; var i , j ; begin
83422: LD_INT 0
83424: PPUSH
83425: PPUSH
83426: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
83427: LD_ADDR_VAR 0 2
83431: PUSH
83432: LD_INT 21
83434: PUSH
83435: LD_INT 1
83437: PUSH
83438: EMPTY
83439: LIST
83440: LIST
83441: PPUSH
83442: CALL_OW 69
83446: PUSH
83447: FOR_IN
83448: IFFALSE 83500
// if IsSelected ( i ) then
83450: LD_VAR 0 2
83454: PPUSH
83455: CALL_OW 306
83459: IFFALSE 83498
// begin for j := 1 to 4 do
83461: LD_ADDR_VAR 0 3
83465: PUSH
83466: DOUBLE
83467: LD_INT 1
83469: DEC
83470: ST_TO_ADDR
83471: LD_INT 4
83473: PUSH
83474: FOR_TO
83475: IFFALSE 83496
// SetSkill ( i , j , 10 ) ;
83477: LD_VAR 0 2
83481: PPUSH
83482: LD_VAR 0 3
83486: PPUSH
83487: LD_INT 10
83489: PPUSH
83490: CALL_OW 237
83494: GO 83474
83496: POP
83497: POP
// end ;
83498: GO 83447
83500: POP
83501: POP
// end ;
83502: LD_VAR 0 1
83506: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
83507: LD_INT 0
83509: PPUSH
83510: PPUSH
83511: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
83512: LD_ADDR_VAR 0 2
83516: PUSH
83517: LD_INT 22
83519: PUSH
83520: LD_OWVAR 2
83524: PUSH
83525: EMPTY
83526: LIST
83527: LIST
83528: PUSH
83529: LD_INT 21
83531: PUSH
83532: LD_INT 1
83534: PUSH
83535: EMPTY
83536: LIST
83537: LIST
83538: PUSH
83539: EMPTY
83540: LIST
83541: LIST
83542: PPUSH
83543: CALL_OW 69
83547: PUSH
83548: FOR_IN
83549: IFFALSE 83590
// begin for j := 1 to 4 do
83551: LD_ADDR_VAR 0 3
83555: PUSH
83556: DOUBLE
83557: LD_INT 1
83559: DEC
83560: ST_TO_ADDR
83561: LD_INT 4
83563: PUSH
83564: FOR_TO
83565: IFFALSE 83586
// SetSkill ( i , j , 10 ) ;
83567: LD_VAR 0 2
83571: PPUSH
83572: LD_VAR 0 3
83576: PPUSH
83577: LD_INT 10
83579: PPUSH
83580: CALL_OW 237
83584: GO 83564
83586: POP
83587: POP
// end ;
83588: GO 83548
83590: POP
83591: POP
// end ;
83592: LD_VAR 0 1
83596: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
83597: LD_INT 0
83599: PPUSH
// uc_side := your_side ;
83600: LD_ADDR_OWVAR 20
83604: PUSH
83605: LD_OWVAR 2
83609: ST_TO_ADDR
// uc_nation := nation ;
83610: LD_ADDR_OWVAR 21
83614: PUSH
83615: LD_VAR 0 1
83619: ST_TO_ADDR
// InitHc ;
83620: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
83624: LD_INT 0
83626: PPUSH
83627: LD_VAR 0 2
83631: PPUSH
83632: LD_VAR 0 3
83636: PPUSH
83637: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
83641: LD_VAR 0 4
83645: PPUSH
83646: LD_VAR 0 5
83650: PPUSH
83651: CALL_OW 428
83655: PUSH
83656: LD_INT 0
83658: EQUAL
83659: IFFALSE 83683
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
83661: CALL_OW 44
83665: PPUSH
83666: LD_VAR 0 4
83670: PPUSH
83671: LD_VAR 0 5
83675: PPUSH
83676: LD_INT 1
83678: PPUSH
83679: CALL_OW 48
// end ;
83683: LD_VAR 0 6
83687: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
83688: LD_INT 0
83690: PPUSH
83691: PPUSH
// uc_side := your_side ;
83692: LD_ADDR_OWVAR 20
83696: PUSH
83697: LD_OWVAR 2
83701: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
83702: LD_VAR 0 1
83706: PUSH
83707: LD_INT 1
83709: PUSH
83710: LD_INT 2
83712: PUSH
83713: LD_INT 3
83715: PUSH
83716: LD_INT 4
83718: PUSH
83719: LD_INT 5
83721: PUSH
83722: EMPTY
83723: LIST
83724: LIST
83725: LIST
83726: LIST
83727: LIST
83728: IN
83729: IFFALSE 83741
// uc_nation := nation_american else
83731: LD_ADDR_OWVAR 21
83735: PUSH
83736: LD_INT 1
83738: ST_TO_ADDR
83739: GO 83784
// if chassis in [ 11 , 12 , 13 , 14 ] then
83741: LD_VAR 0 1
83745: PUSH
83746: LD_INT 11
83748: PUSH
83749: LD_INT 12
83751: PUSH
83752: LD_INT 13
83754: PUSH
83755: LD_INT 14
83757: PUSH
83758: EMPTY
83759: LIST
83760: LIST
83761: LIST
83762: LIST
83763: IN
83764: IFFALSE 83776
// uc_nation := nation_arabian else
83766: LD_ADDR_OWVAR 21
83770: PUSH
83771: LD_INT 2
83773: ST_TO_ADDR
83774: GO 83784
// uc_nation := nation_russian ;
83776: LD_ADDR_OWVAR 21
83780: PUSH
83781: LD_INT 3
83783: ST_TO_ADDR
// vc_chassis := chassis ;
83784: LD_ADDR_OWVAR 37
83788: PUSH
83789: LD_VAR 0 1
83793: ST_TO_ADDR
// vc_engine := engine ;
83794: LD_ADDR_OWVAR 39
83798: PUSH
83799: LD_VAR 0 2
83803: ST_TO_ADDR
// vc_control := control ;
83804: LD_ADDR_OWVAR 38
83808: PUSH
83809: LD_VAR 0 3
83813: ST_TO_ADDR
// vc_weapon := weapon ;
83814: LD_ADDR_OWVAR 40
83818: PUSH
83819: LD_VAR 0 4
83823: ST_TO_ADDR
// un := CreateVehicle ;
83824: LD_ADDR_VAR 0 8
83828: PUSH
83829: CALL_OW 45
83833: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
83834: LD_VAR 0 8
83838: PPUSH
83839: LD_INT 0
83841: PPUSH
83842: LD_INT 5
83844: PPUSH
83845: CALL_OW 12
83849: PPUSH
83850: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
83854: LD_VAR 0 8
83858: PPUSH
83859: LD_VAR 0 5
83863: PPUSH
83864: LD_VAR 0 6
83868: PPUSH
83869: LD_INT 1
83871: PPUSH
83872: CALL_OW 48
// end ;
83876: LD_VAR 0 7
83880: RET
// export hInvincible ; every 1 do
83881: GO 83883
83883: DISABLE
// hInvincible := [ ] ;
83884: LD_ADDR_EXP 123
83888: PUSH
83889: EMPTY
83890: ST_TO_ADDR
83891: END
// every 10 do var i ;
83892: GO 83894
83894: DISABLE
83895: LD_INT 0
83897: PPUSH
// begin enable ;
83898: ENABLE
// if not hInvincible then
83899: LD_EXP 123
83903: NOT
83904: IFFALSE 83908
// exit ;
83906: GO 83952
// for i in hInvincible do
83908: LD_ADDR_VAR 0 1
83912: PUSH
83913: LD_EXP 123
83917: PUSH
83918: FOR_IN
83919: IFFALSE 83950
// if GetLives ( i ) < 1000 then
83921: LD_VAR 0 1
83925: PPUSH
83926: CALL_OW 256
83930: PUSH
83931: LD_INT 1000
83933: LESS
83934: IFFALSE 83948
// SetLives ( i , 1000 ) ;
83936: LD_VAR 0 1
83940: PPUSH
83941: LD_INT 1000
83943: PPUSH
83944: CALL_OW 234
83948: GO 83918
83950: POP
83951: POP
// end ;
83952: PPOPN 1
83954: END
// export function hHackInvincible ; var i ; begin
83955: LD_INT 0
83957: PPUSH
83958: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
83959: LD_ADDR_VAR 0 2
83963: PUSH
83964: LD_INT 2
83966: PUSH
83967: LD_INT 21
83969: PUSH
83970: LD_INT 1
83972: PUSH
83973: EMPTY
83974: LIST
83975: LIST
83976: PUSH
83977: LD_INT 21
83979: PUSH
83980: LD_INT 2
83982: PUSH
83983: EMPTY
83984: LIST
83985: LIST
83986: PUSH
83987: EMPTY
83988: LIST
83989: LIST
83990: LIST
83991: PPUSH
83992: CALL_OW 69
83996: PUSH
83997: FOR_IN
83998: IFFALSE 84059
// if IsSelected ( i ) then
84000: LD_VAR 0 2
84004: PPUSH
84005: CALL_OW 306
84009: IFFALSE 84057
// begin if i in hInvincible then
84011: LD_VAR 0 2
84015: PUSH
84016: LD_EXP 123
84020: IN
84021: IFFALSE 84041
// hInvincible := hInvincible diff i else
84023: LD_ADDR_EXP 123
84027: PUSH
84028: LD_EXP 123
84032: PUSH
84033: LD_VAR 0 2
84037: DIFF
84038: ST_TO_ADDR
84039: GO 84057
// hInvincible := hInvincible union i ;
84041: LD_ADDR_EXP 123
84045: PUSH
84046: LD_EXP 123
84050: PUSH
84051: LD_VAR 0 2
84055: UNION
84056: ST_TO_ADDR
// end ;
84057: GO 83997
84059: POP
84060: POP
// end ;
84061: LD_VAR 0 1
84065: RET
// export function hHackInvisible ; var i , j ; begin
84066: LD_INT 0
84068: PPUSH
84069: PPUSH
84070: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
84071: LD_ADDR_VAR 0 2
84075: PUSH
84076: LD_INT 21
84078: PUSH
84079: LD_INT 1
84081: PUSH
84082: EMPTY
84083: LIST
84084: LIST
84085: PPUSH
84086: CALL_OW 69
84090: PUSH
84091: FOR_IN
84092: IFFALSE 84116
// if IsSelected ( i ) then
84094: LD_VAR 0 2
84098: PPUSH
84099: CALL_OW 306
84103: IFFALSE 84114
// ComForceInvisible ( i ) ;
84105: LD_VAR 0 2
84109: PPUSH
84110: CALL_OW 496
84114: GO 84091
84116: POP
84117: POP
// end ;
84118: LD_VAR 0 1
84122: RET
// export function hHackChangeYourSide ; begin
84123: LD_INT 0
84125: PPUSH
// if your_side = 8 then
84126: LD_OWVAR 2
84130: PUSH
84131: LD_INT 8
84133: EQUAL
84134: IFFALSE 84146
// your_side := 0 else
84136: LD_ADDR_OWVAR 2
84140: PUSH
84141: LD_INT 0
84143: ST_TO_ADDR
84144: GO 84160
// your_side := your_side + 1 ;
84146: LD_ADDR_OWVAR 2
84150: PUSH
84151: LD_OWVAR 2
84155: PUSH
84156: LD_INT 1
84158: PLUS
84159: ST_TO_ADDR
// end ;
84160: LD_VAR 0 1
84164: RET
// export function hHackChangeUnitSide ; var i , j ; begin
84165: LD_INT 0
84167: PPUSH
84168: PPUSH
84169: PPUSH
// for i in all_units do
84170: LD_ADDR_VAR 0 2
84174: PUSH
84175: LD_OWVAR 3
84179: PUSH
84180: FOR_IN
84181: IFFALSE 84259
// if IsSelected ( i ) then
84183: LD_VAR 0 2
84187: PPUSH
84188: CALL_OW 306
84192: IFFALSE 84257
// begin j := GetSide ( i ) ;
84194: LD_ADDR_VAR 0 3
84198: PUSH
84199: LD_VAR 0 2
84203: PPUSH
84204: CALL_OW 255
84208: ST_TO_ADDR
// if j = 8 then
84209: LD_VAR 0 3
84213: PUSH
84214: LD_INT 8
84216: EQUAL
84217: IFFALSE 84229
// j := 0 else
84219: LD_ADDR_VAR 0 3
84223: PUSH
84224: LD_INT 0
84226: ST_TO_ADDR
84227: GO 84243
// j := j + 1 ;
84229: LD_ADDR_VAR 0 3
84233: PUSH
84234: LD_VAR 0 3
84238: PUSH
84239: LD_INT 1
84241: PLUS
84242: ST_TO_ADDR
// SetSide ( i , j ) ;
84243: LD_VAR 0 2
84247: PPUSH
84248: LD_VAR 0 3
84252: PPUSH
84253: CALL_OW 235
// end ;
84257: GO 84180
84259: POP
84260: POP
// end ;
84261: LD_VAR 0 1
84265: RET
// export function hHackFog ; begin
84266: LD_INT 0
84268: PPUSH
// FogOff ( true ) ;
84269: LD_INT 1
84271: PPUSH
84272: CALL_OW 344
// end ;
84276: LD_VAR 0 1
84280: RET
// export function hHackTeleport ( unit , x , y ) ; begin
84281: LD_INT 0
84283: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
84284: LD_VAR 0 1
84288: PPUSH
84289: LD_VAR 0 2
84293: PPUSH
84294: LD_VAR 0 3
84298: PPUSH
84299: LD_INT 1
84301: PPUSH
84302: LD_INT 1
84304: PPUSH
84305: CALL_OW 483
// CenterOnXY ( x , y ) ;
84309: LD_VAR 0 2
84313: PPUSH
84314: LD_VAR 0 3
84318: PPUSH
84319: CALL_OW 84
// end ;
84323: LD_VAR 0 4
84327: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
84328: LD_INT 0
84330: PPUSH
84331: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
84332: LD_VAR 0 1
84336: NOT
84337: IFTRUE 84356
84339: PUSH
84340: LD_VAR 0 2
84344: PPUSH
84345: LD_VAR 0 3
84349: PPUSH
84350: CALL_OW 488
84354: NOT
84355: OR
84356: IFTRUE 84391
84358: PUSH
84359: LD_VAR 0 1
84363: PPUSH
84364: CALL_OW 266
84368: PUSH
84369: LD_INT 3
84371: NONEQUAL
84372: IFFALSE 84390
84374: PUSH
84375: LD_VAR 0 1
84379: PPUSH
84380: CALL_OW 247
84384: PUSH
84385: LD_INT 1
84387: EQUAL
84388: NOT
84389: AND
84390: OR
84391: IFFALSE 84395
// exit ;
84393: GO 84677
// if GetType ( factory ) = unit_human then
84395: LD_VAR 0 1
84399: PPUSH
84400: CALL_OW 247
84404: PUSH
84405: LD_INT 1
84407: EQUAL
84408: IFFALSE 84425
// factory := IsInUnit ( factory ) ;
84410: LD_ADDR_VAR 0 1
84414: PUSH
84415: LD_VAR 0 1
84419: PPUSH
84420: CALL_OW 310
84424: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
84425: LD_VAR 0 1
84429: PPUSH
84430: CALL_OW 266
84434: PUSH
84435: LD_INT 3
84437: NONEQUAL
84438: IFFALSE 84442
// exit ;
84440: GO 84677
// for i := 1 to Count ( factoryWaypoints ) do
84442: LD_ADDR_VAR 0 5
84446: PUSH
84447: DOUBLE
84448: LD_INT 1
84450: DEC
84451: ST_TO_ADDR
84452: LD_EXP 124
84456: PPUSH
84457: CALL 28367 0 1
84461: PUSH
84462: FOR_TO
84463: IFFALSE 84625
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
84465: LD_VAR 0 2
84469: PPUSH
84470: LD_VAR 0 3
84474: PPUSH
84475: CALL_OW 428
84479: PUSH
84480: LD_EXP 124
84484: PUSH
84485: LD_VAR 0 5
84489: ARRAY
84490: PUSH
84491: LD_INT 2
84493: ARRAY
84494: EQUAL
84495: IFFALSE 84527
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
84497: LD_ADDR_EXP 124
84501: PUSH
84502: LD_EXP 124
84506: PPUSH
84507: LD_VAR 0 5
84511: PPUSH
84512: CALL_OW 3
84516: ST_TO_ADDR
// UpdateFactoryWaypoints ;
84517: CALL 84682 0 0
// exit ;
84521: POP
84522: POP
84523: GO 84677
// end else
84525: GO 84623
// if factory = factoryWaypoints [ i ] [ 2 ] then
84527: LD_VAR 0 1
84531: PUSH
84532: LD_EXP 124
84536: PUSH
84537: LD_VAR 0 5
84541: ARRAY
84542: PUSH
84543: LD_INT 2
84545: ARRAY
84546: EQUAL
84547: IFFALSE 84623
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
84549: LD_ADDR_EXP 124
84553: PUSH
84554: LD_EXP 124
84558: PPUSH
84559: LD_VAR 0 5
84563: PPUSH
84564: CALL_OW 3
84568: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
84569: LD_ADDR_EXP 124
84573: PUSH
84574: LD_EXP 124
84578: PPUSH
84579: LD_VAR 0 1
84583: PPUSH
84584: CALL_OW 255
84588: PUSH
84589: LD_VAR 0 1
84593: PUSH
84594: LD_VAR 0 2
84598: PUSH
84599: LD_VAR 0 3
84603: PUSH
84604: EMPTY
84605: LIST
84606: LIST
84607: LIST
84608: LIST
84609: PPUSH
84610: CALL 64343 0 2
84614: ST_TO_ADDR
// UpdateFactoryWaypoints ;
84615: CALL 84682 0 0
// exit ;
84619: POP
84620: POP
84621: GO 84677
// end ; end ;
84623: GO 84462
84625: POP
84626: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
84627: LD_ADDR_EXP 124
84631: PUSH
84632: LD_EXP 124
84636: PPUSH
84637: LD_VAR 0 1
84641: PPUSH
84642: CALL_OW 255
84646: PUSH
84647: LD_VAR 0 1
84651: PUSH
84652: LD_VAR 0 2
84656: PUSH
84657: LD_VAR 0 3
84661: PUSH
84662: EMPTY
84663: LIST
84664: LIST
84665: LIST
84666: LIST
84667: PPUSH
84668: CALL 64343 0 2
84672: ST_TO_ADDR
// UpdateFactoryWaypoints ;
84673: CALL 84682 0 0
// end ;
84677: LD_VAR 0 4
84681: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
84682: LD_INT 0
84684: PPUSH
84685: PPUSH
84686: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
84687: LD_STRING resetFactoryWaypoint();
84689: PPUSH
84690: CALL_OW 559
// if factoryWaypoints then
84694: LD_EXP 124
84698: IFFALSE 84819
// begin list := factoryWaypoints ;
84700: LD_ADDR_VAR 0 3
84704: PUSH
84705: LD_EXP 124
84709: ST_TO_ADDR
// for i := 1 to list do
84710: LD_ADDR_VAR 0 2
84714: PUSH
84715: DOUBLE
84716: LD_INT 1
84718: DEC
84719: ST_TO_ADDR
84720: LD_VAR 0 3
84724: PUSH
84725: FOR_TO
84726: IFFALSE 84817
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
84728: LD_STRING setFactoryWaypointXY(
84730: PUSH
84731: LD_VAR 0 3
84735: PUSH
84736: LD_VAR 0 2
84740: ARRAY
84741: PUSH
84742: LD_INT 1
84744: ARRAY
84745: STR
84746: PUSH
84747: LD_STRING ,
84749: STR
84750: PUSH
84751: LD_VAR 0 3
84755: PUSH
84756: LD_VAR 0 2
84760: ARRAY
84761: PUSH
84762: LD_INT 2
84764: ARRAY
84765: STR
84766: PUSH
84767: LD_STRING ,
84769: STR
84770: PUSH
84771: LD_VAR 0 3
84775: PUSH
84776: LD_VAR 0 2
84780: ARRAY
84781: PUSH
84782: LD_INT 3
84784: ARRAY
84785: STR
84786: PUSH
84787: LD_STRING ,
84789: STR
84790: PUSH
84791: LD_VAR 0 3
84795: PUSH
84796: LD_VAR 0 2
84800: ARRAY
84801: PUSH
84802: LD_INT 4
84804: ARRAY
84805: STR
84806: PUSH
84807: LD_STRING )
84809: STR
84810: PPUSH
84811: CALL_OW 559
84815: GO 84725
84817: POP
84818: POP
// end ; end ;
84819: LD_VAR 0 1
84823: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
84824: LD_INT 0
84826: PPUSH
// if HexInfo ( x , y ) = warehouse then
84827: LD_VAR 0 2
84831: PPUSH
84832: LD_VAR 0 3
84836: PPUSH
84837: CALL_OW 428
84841: PUSH
84842: LD_VAR 0 1
84846: EQUAL
84847: IFFALSE 84874
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
84849: LD_ADDR_EXP 126
84853: PUSH
84854: LD_EXP 126
84858: PPUSH
84859: LD_VAR 0 1
84863: PPUSH
84864: LD_INT 0
84866: PPUSH
84867: CALL_OW 1
84871: ST_TO_ADDR
84872: GO 84925
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
84874: LD_ADDR_EXP 126
84878: PUSH
84879: LD_EXP 126
84883: PPUSH
84884: LD_VAR 0 1
84888: PPUSH
84889: LD_VAR 0 1
84893: PPUSH
84894: CALL_OW 255
84898: PUSH
84899: LD_VAR 0 1
84903: PUSH
84904: LD_VAR 0 2
84908: PUSH
84909: LD_VAR 0 3
84913: PUSH
84914: EMPTY
84915: LIST
84916: LIST
84917: LIST
84918: LIST
84919: PPUSH
84920: CALL_OW 1
84924: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
84925: CALL 84934 0 0
// end ;
84929: LD_VAR 0 4
84933: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
84934: LD_INT 0
84936: PPUSH
84937: PPUSH
84938: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
84939: LD_STRING resetWarehouseGatheringPoints();
84941: PPUSH
84942: CALL_OW 559
// if warehouseGatheringPoints then
84946: LD_EXP 126
84950: IFFALSE 85076
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
84952: LD_ADDR_VAR 0 3
84956: PUSH
84957: LD_EXP 126
84961: PPUSH
84962: CALL 68277 0 1
84966: ST_TO_ADDR
// for i := 1 to list do
84967: LD_ADDR_VAR 0 2
84971: PUSH
84972: DOUBLE
84973: LD_INT 1
84975: DEC
84976: ST_TO_ADDR
84977: LD_VAR 0 3
84981: PUSH
84982: FOR_TO
84983: IFFALSE 85074
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
84985: LD_STRING setWarehouseGatheringPointXY(
84987: PUSH
84988: LD_VAR 0 3
84992: PUSH
84993: LD_VAR 0 2
84997: ARRAY
84998: PUSH
84999: LD_INT 1
85001: ARRAY
85002: STR
85003: PUSH
85004: LD_STRING ,
85006: STR
85007: PUSH
85008: LD_VAR 0 3
85012: PUSH
85013: LD_VAR 0 2
85017: ARRAY
85018: PUSH
85019: LD_INT 2
85021: ARRAY
85022: STR
85023: PUSH
85024: LD_STRING ,
85026: STR
85027: PUSH
85028: LD_VAR 0 3
85032: PUSH
85033: LD_VAR 0 2
85037: ARRAY
85038: PUSH
85039: LD_INT 3
85041: ARRAY
85042: STR
85043: PUSH
85044: LD_STRING ,
85046: STR
85047: PUSH
85048: LD_VAR 0 3
85052: PUSH
85053: LD_VAR 0 2
85057: ARRAY
85058: PUSH
85059: LD_INT 4
85061: ARRAY
85062: STR
85063: PUSH
85064: LD_STRING )
85066: STR
85067: PPUSH
85068: CALL_OW 559
85072: GO 84982
85074: POP
85075: POP
// end ; end ;
85076: LD_VAR 0 1
85080: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
85081: LD_EXP 126
85085: IFFALSE 85780
85087: GO 85089
85089: DISABLE
85090: LD_INT 0
85092: PPUSH
85093: PPUSH
85094: PPUSH
85095: PPUSH
85096: PPUSH
85097: PPUSH
85098: PPUSH
85099: PPUSH
85100: PPUSH
// begin enable ;
85101: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
85102: LD_ADDR_VAR 0 3
85106: PUSH
85107: LD_EXP 126
85111: PPUSH
85112: CALL 68277 0 1
85116: ST_TO_ADDR
// if not list then
85117: LD_VAR 0 3
85121: NOT
85122: IFFALSE 85126
// exit ;
85124: GO 85780
// for i := 1 to list do
85126: LD_ADDR_VAR 0 1
85130: PUSH
85131: DOUBLE
85132: LD_INT 1
85134: DEC
85135: ST_TO_ADDR
85136: LD_VAR 0 3
85140: PUSH
85141: FOR_TO
85142: IFFALSE 85778
// begin depot := list [ i ] [ 2 ] ;
85144: LD_ADDR_VAR 0 8
85148: PUSH
85149: LD_VAR 0 3
85153: PUSH
85154: LD_VAR 0 1
85158: ARRAY
85159: PUSH
85160: LD_INT 2
85162: ARRAY
85163: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
85164: LD_ADDR_VAR 0 5
85168: PUSH
85169: LD_VAR 0 3
85173: PUSH
85174: LD_VAR 0 1
85178: ARRAY
85179: PUSH
85180: LD_INT 1
85182: ARRAY
85183: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
85184: LD_VAR 0 8
85188: PPUSH
85189: CALL_OW 301
85193: IFTRUE 85212
85195: PUSH
85196: LD_VAR 0 5
85200: PUSH
85201: LD_VAR 0 8
85205: PPUSH
85206: CALL_OW 255
85210: NONEQUAL
85211: OR
85212: IFFALSE 85241
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
85214: LD_ADDR_EXP 126
85218: PUSH
85219: LD_EXP 126
85223: PPUSH
85224: LD_VAR 0 8
85228: PPUSH
85229: LD_INT 0
85231: PPUSH
85232: CALL_OW 1
85236: ST_TO_ADDR
// exit ;
85237: POP
85238: POP
85239: GO 85780
// end ; x := list [ i ] [ 3 ] ;
85241: LD_ADDR_VAR 0 6
85245: PUSH
85246: LD_VAR 0 3
85250: PUSH
85251: LD_VAR 0 1
85255: ARRAY
85256: PUSH
85257: LD_INT 3
85259: ARRAY
85260: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
85261: LD_ADDR_VAR 0 7
85265: PUSH
85266: LD_VAR 0 3
85270: PUSH
85271: LD_VAR 0 1
85275: ARRAY
85276: PUSH
85277: LD_INT 4
85279: ARRAY
85280: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
85281: LD_ADDR_VAR 0 9
85285: PUSH
85286: LD_VAR 0 6
85290: PPUSH
85291: LD_VAR 0 7
85295: PPUSH
85296: LD_INT 16
85298: PPUSH
85299: CALL 66851 0 3
85303: ST_TO_ADDR
// if not cratesNearbyPoint then
85304: LD_VAR 0 9
85308: NOT
85309: IFFALSE 85315
// exit ;
85311: POP
85312: POP
85313: GO 85780
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
85315: LD_ADDR_VAR 0 4
85319: PUSH
85320: LD_INT 22
85322: PUSH
85323: LD_VAR 0 5
85327: PUSH
85328: EMPTY
85329: LIST
85330: LIST
85331: PUSH
85332: LD_INT 3
85334: PUSH
85335: LD_INT 60
85337: PUSH
85338: EMPTY
85339: LIST
85340: PUSH
85341: EMPTY
85342: LIST
85343: LIST
85344: PUSH
85345: LD_INT 91
85347: PUSH
85348: LD_VAR 0 8
85352: PUSH
85353: LD_INT 6
85355: PUSH
85356: EMPTY
85357: LIST
85358: LIST
85359: LIST
85360: PUSH
85361: LD_INT 2
85363: PUSH
85364: LD_INT 25
85366: PUSH
85367: LD_INT 2
85369: PUSH
85370: EMPTY
85371: LIST
85372: LIST
85373: PUSH
85374: LD_INT 25
85376: PUSH
85377: LD_INT 16
85379: PUSH
85380: EMPTY
85381: LIST
85382: LIST
85383: PUSH
85384: EMPTY
85385: LIST
85386: LIST
85387: LIST
85388: PUSH
85389: EMPTY
85390: LIST
85391: LIST
85392: LIST
85393: LIST
85394: PPUSH
85395: CALL_OW 69
85399: PUSH
85400: LD_VAR 0 8
85404: PPUSH
85405: CALL_OW 313
85409: PPUSH
85410: LD_INT 3
85412: PUSH
85413: LD_INT 60
85415: PUSH
85416: EMPTY
85417: LIST
85418: PUSH
85419: EMPTY
85420: LIST
85421: LIST
85422: PUSH
85423: LD_INT 2
85425: PUSH
85426: LD_INT 25
85428: PUSH
85429: LD_INT 2
85431: PUSH
85432: EMPTY
85433: LIST
85434: LIST
85435: PUSH
85436: LD_INT 25
85438: PUSH
85439: LD_INT 16
85441: PUSH
85442: EMPTY
85443: LIST
85444: LIST
85445: PUSH
85446: EMPTY
85447: LIST
85448: LIST
85449: LIST
85450: PUSH
85451: EMPTY
85452: LIST
85453: LIST
85454: PPUSH
85455: CALL_OW 72
85459: UNION
85460: ST_TO_ADDR
// if tmp then
85461: LD_VAR 0 4
85465: IFFALSE 85545
// begin tmp := ShrinkArray ( tmp , 3 ) ;
85467: LD_ADDR_VAR 0 4
85471: PUSH
85472: LD_VAR 0 4
85476: PPUSH
85477: LD_INT 3
85479: PPUSH
85480: CALL 64658 0 2
85484: ST_TO_ADDR
// for j in tmp do
85485: LD_ADDR_VAR 0 2
85489: PUSH
85490: LD_VAR 0 4
85494: PUSH
85495: FOR_IN
85496: IFFALSE 85539
// begin if IsInUnit ( j ) then
85498: LD_VAR 0 2
85502: PPUSH
85503: CALL_OW 310
85507: IFFALSE 85518
// ComExit ( j ) ;
85509: LD_VAR 0 2
85513: PPUSH
85514: CALL 64741 0 1
// AddComCollect ( j , x , y ) ;
85518: LD_VAR 0 2
85522: PPUSH
85523: LD_VAR 0 6
85527: PPUSH
85528: LD_VAR 0 7
85532: PPUSH
85533: CALL_OW 177
// end ;
85537: GO 85495
85539: POP
85540: POP
// exit ;
85541: POP
85542: POP
85543: GO 85780
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
85545: LD_ADDR_VAR 0 4
85549: PUSH
85550: LD_INT 22
85552: PUSH
85553: LD_VAR 0 5
85557: PUSH
85558: EMPTY
85559: LIST
85560: LIST
85561: PUSH
85562: LD_INT 91
85564: PUSH
85565: LD_VAR 0 8
85569: PUSH
85570: LD_INT 8
85572: PUSH
85573: EMPTY
85574: LIST
85575: LIST
85576: LIST
85577: PUSH
85578: LD_INT 2
85580: PUSH
85581: LD_INT 34
85583: PUSH
85584: LD_INT 12
85586: PUSH
85587: EMPTY
85588: LIST
85589: LIST
85590: PUSH
85591: LD_INT 34
85593: PUSH
85594: LD_INT 51
85596: PUSH
85597: EMPTY
85598: LIST
85599: LIST
85600: PUSH
85601: LD_INT 34
85603: PUSH
85604: LD_INT 32
85606: PUSH
85607: EMPTY
85608: LIST
85609: LIST
85610: PUSH
85611: LD_INT 34
85613: PUSH
85614: LD_INT 89
85616: PUSH
85617: EMPTY
85618: LIST
85619: LIST
85620: PUSH
85621: EMPTY
85622: LIST
85623: LIST
85624: LIST
85625: LIST
85626: LIST
85627: PUSH
85628: EMPTY
85629: LIST
85630: LIST
85631: LIST
85632: PPUSH
85633: CALL_OW 69
85637: ST_TO_ADDR
// if tmp then
85638: LD_VAR 0 4
85642: IFFALSE 85776
// begin for j in tmp do
85644: LD_ADDR_VAR 0 2
85648: PUSH
85649: LD_VAR 0 4
85653: PUSH
85654: FOR_IN
85655: IFFALSE 85774
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
85657: LD_VAR 0 2
85661: PPUSH
85662: CALL_OW 262
85666: PUSH
85667: LD_INT 3
85669: EQUAL
85670: IFTRUE 85687
85672: PUSH
85673: LD_VAR 0 2
85677: PPUSH
85678: CALL_OW 261
85682: PUSH
85683: LD_INT 20
85685: GREATER
85686: OR
85687: IFFALSE 85701
85689: PUSH
85690: LD_VAR 0 2
85694: PPUSH
85695: CALL_OW 314
85699: NOT
85700: AND
85701: IFFALSE 85731
85703: PUSH
85704: LD_VAR 0 2
85708: PPUSH
85709: CALL_OW 263
85713: PUSH
85714: LD_INT 1
85716: NONEQUAL
85717: IFTRUE 85730
85719: PUSH
85720: LD_VAR 0 2
85724: PPUSH
85725: CALL_OW 311
85729: OR
85730: AND
85731: IFFALSE 85772
// begin ComCollect ( j , x , y ) ;
85733: LD_VAR 0 2
85737: PPUSH
85738: LD_VAR 0 6
85742: PPUSH
85743: LD_VAR 0 7
85747: PPUSH
85748: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
85752: LD_VAR 0 2
85756: PPUSH
85757: LD_VAR 0 8
85761: PPUSH
85762: CALL_OW 172
// exit ;
85766: POP
85767: POP
85768: POP
85769: POP
85770: GO 85780
// end ;
85772: GO 85654
85774: POP
85775: POP
// end ; end ;
85776: GO 85141
85778: POP
85779: POP
// end ; end_of_file
85780: PPOPN 9
85782: END
// export function SOS_UnitDestroyed ( un ) ; begin
85783: LD_INT 0
85785: PPUSH
// ComRadiation ( un ) ;
85786: LD_VAR 0 1
85790: PPUSH
85791: CALL 86953 0 1
// end ;
85795: LD_VAR 0 2
85799: RET
// export function SOS_UnitKamikazed ( un ) ; begin
85800: LD_INT 0
85802: PPUSH
// ComRadiation ( un ) ;
85803: LD_VAR 0 1
85807: PPUSH
85808: CALL 86953 0 1
// end ;
85812: LD_VAR 0 2
85816: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
85817: LD_INT 0
85819: PPUSH
// end ;
85820: LD_VAR 0 4
85824: RET
// export function SOS_Command ( cmd ) ; begin
85825: LD_INT 0
85827: PPUSH
// end ;
85828: LD_VAR 0 2
85832: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
85833: LD_INT 0
85835: PPUSH
// end ;
85836: LD_VAR 0 6
85840: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
85841: LD_INT 0
85843: PPUSH
85844: PPUSH
85845: PPUSH
85846: PPUSH
85847: PPUSH
// if not vehicle or not factory then
85848: LD_VAR 0 1
85852: NOT
85853: IFTRUE 85862
85855: PUSH
85856: LD_VAR 0 2
85860: NOT
85861: OR
85862: IFFALSE 85866
// exit ;
85864: GO 86528
// weapon := GetWeapon ( vehicle ) ;
85866: LD_ADDR_VAR 0 7
85870: PUSH
85871: LD_VAR 0 1
85875: PPUSH
85876: CALL_OW 264
85880: ST_TO_ADDR
// if weapon = ar_miner then
85881: LD_VAR 0 7
85885: PUSH
85886: LD_INT 81
85888: EQUAL
85889: IFFALSE 85946
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
85891: LD_ADDR_EXP 135
85895: PUSH
85896: LD_EXP 135
85900: PPUSH
85901: LD_EXP 135
85905: PUSH
85906: LD_INT 1
85908: PLUS
85909: PPUSH
85910: LD_VAR 0 1
85914: PPUSH
85915: CALL_OW 1
85919: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
85920: LD_ADDR_EXP 136
85924: PUSH
85925: LD_EXP 136
85929: PPUSH
85930: LD_EXP 136
85934: PUSH
85935: LD_INT 1
85937: PLUS
85938: PPUSH
85939: EMPTY
85940: PPUSH
85941: CALL_OW 1
85945: ST_TO_ADDR
// end ; if not factoryWaypoints then
85946: LD_EXP 124
85950: NOT
85951: IFFALSE 85955
// exit ;
85953: GO 86528
// for i := 1 to Count ( factoryWaypoints ) do
85955: LD_ADDR_VAR 0 4
85959: PUSH
85960: DOUBLE
85961: LD_INT 1
85963: DEC
85964: ST_TO_ADDR
85965: LD_EXP 124
85969: PPUSH
85970: CALL 28367 0 1
85974: PUSH
85975: FOR_TO
85976: IFFALSE 86526
// if factoryWaypoints [ i ] [ 2 ] = factory then
85978: LD_EXP 124
85982: PUSH
85983: LD_VAR 0 4
85987: ARRAY
85988: PUSH
85989: LD_INT 2
85991: ARRAY
85992: PUSH
85993: LD_VAR 0 2
85997: EQUAL
85998: IFFALSE 86524
// begin if GetControl ( vehicle ) = control_manual then
86000: LD_VAR 0 1
86004: PPUSH
86005: CALL_OW 263
86009: PUSH
86010: LD_INT 1
86012: EQUAL
86013: IFFALSE 86377
// begin driver := IsDrivenBy ( vehicle ) ;
86015: LD_ADDR_VAR 0 5
86019: PUSH
86020: LD_VAR 0 1
86024: PPUSH
86025: CALL_OW 311
86029: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
86030: LD_VAR 0 5
86034: PUSH
86035: LD_EXP 125
86039: IN
86040: IFTRUE 86054
86042: PUSH
86043: LD_VAR 0 1
86047: PUSH
86048: LD_EXP 125
86052: IN
86053: OR
86054: IFFALSE 86060
// exit ;
86056: POP
86057: POP
86058: GO 86528
// if not HasTask ( driver ) then
86060: LD_VAR 0 5
86064: PPUSH
86065: CALL_OW 314
86069: NOT
86070: IFFALSE 86375
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
86072: LD_ADDR_EXP 125
86076: PUSH
86077: LD_EXP 125
86081: PPUSH
86082: LD_VAR 0 5
86086: PPUSH
86087: CALL 64343 0 2
86091: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
86092: LD_ADDR_EXP 125
86096: PUSH
86097: LD_EXP 125
86101: PPUSH
86102: LD_VAR 0 1
86106: PPUSH
86107: CALL 64343 0 2
86111: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
86112: LD_ADDR_VAR 0 6
86116: PUSH
86117: LD_EXP 124
86121: PUSH
86122: LD_VAR 0 4
86126: ARRAY
86127: PUSH
86128: LD_INT 3
86130: ARRAY
86131: PPUSH
86132: LD_EXP 124
86136: PUSH
86137: LD_VAR 0 4
86141: ARRAY
86142: PUSH
86143: LD_INT 4
86145: ARRAY
86146: PPUSH
86147: CALL_OW 428
86151: ST_TO_ADDR
// if hex then
86152: LD_VAR 0 6
86156: IFFALSE 86174
// ComMoveUnit ( driver , hex ) else
86158: LD_VAR 0 5
86162: PPUSH
86163: LD_VAR 0 6
86167: PPUSH
86168: CALL_OW 112
86172: GO 86258
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
86174: LD_VAR 0 1
86178: PPUSH
86179: LD_EXP 124
86183: PUSH
86184: LD_VAR 0 4
86188: ARRAY
86189: PUSH
86190: LD_INT 3
86192: ARRAY
86193: PPUSH
86194: LD_EXP 124
86198: PUSH
86199: LD_VAR 0 4
86203: ARRAY
86204: PUSH
86205: LD_INT 4
86207: ARRAY
86208: PPUSH
86209: CALL_OW 297
86213: PUSH
86214: LD_INT 0
86216: GREATER
86217: IFFALSE 86258
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
86219: LD_VAR 0 5
86223: PPUSH
86224: LD_EXP 124
86228: PUSH
86229: LD_VAR 0 4
86233: ARRAY
86234: PUSH
86235: LD_INT 3
86237: ARRAY
86238: PPUSH
86239: LD_EXP 124
86243: PUSH
86244: LD_VAR 0 4
86248: ARRAY
86249: PUSH
86250: LD_INT 4
86252: ARRAY
86253: PPUSH
86254: CALL_OW 111
// AddComExitVehicle ( driver ) ;
86258: LD_VAR 0 5
86262: PPUSH
86263: CALL_OW 181
// if Multiplayer then
86267: LD_OWVAR 4
86271: IFFALSE 86320
// begin repeat wait ( 10 ) ;
86273: LD_INT 10
86275: PPUSH
86276: CALL_OW 67
// until not IsInUnit ( driver ) ;
86280: LD_VAR 0 5
86284: PPUSH
86285: CALL_OW 310
86289: NOT
86290: IFFALSE 86273
// if not HasTask ( driver ) then
86292: LD_VAR 0 5
86296: PPUSH
86297: CALL_OW 314
86301: NOT
86302: IFFALSE 86318
// ComEnterUnit ( driver , factory ) ;
86304: LD_VAR 0 5
86308: PPUSH
86309: LD_VAR 0 2
86313: PPUSH
86314: CALL_OW 120
// end else
86318: GO 86334
// AddComEnterUnit ( driver , factory ) ;
86320: LD_VAR 0 5
86324: PPUSH
86325: LD_VAR 0 2
86329: PPUSH
86330: CALL_OW 180
// wait ( 0 0$1 ) ;
86334: LD_INT 35
86336: PPUSH
86337: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
86341: LD_ADDR_EXP 125
86345: PUSH
86346: LD_EXP 125
86350: PUSH
86351: LD_VAR 0 5
86355: DIFF
86356: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
86357: LD_ADDR_EXP 125
86361: PUSH
86362: LD_EXP 125
86366: PUSH
86367: LD_VAR 0 1
86371: DIFF
86372: ST_TO_ADDR
// break ;
86373: GO 86526
// end ; end else
86375: GO 86524
// if GetControl ( vehicle ) = control_remote then
86377: LD_VAR 0 1
86381: PPUSH
86382: CALL_OW 263
86386: PUSH
86387: LD_INT 2
86389: EQUAL
86390: IFFALSE 86476
// begin wait ( 0 0$2 ) ;
86392: LD_INT 70
86394: PPUSH
86395: CALL_OW 67
// repeat wait ( 10 ) ;
86399: LD_INT 10
86401: PPUSH
86402: CALL_OW 67
// Connect ( vehicle ) ;
86406: LD_VAR 0 1
86410: PPUSH
86411: CALL 34645 0 1
// until IsControledBy ( vehicle ) ;
86415: LD_VAR 0 1
86419: PPUSH
86420: CALL_OW 312
86424: IFFALSE 86399
// wait ( 10 ) ;
86426: LD_INT 10
86428: PPUSH
86429: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
86433: LD_VAR 0 1
86437: PPUSH
86438: LD_EXP 124
86442: PUSH
86443: LD_VAR 0 4
86447: ARRAY
86448: PUSH
86449: LD_INT 3
86451: ARRAY
86452: PPUSH
86453: LD_EXP 124
86457: PUSH
86458: LD_VAR 0 4
86462: ARRAY
86463: PUSH
86464: LD_INT 4
86466: ARRAY
86467: PPUSH
86468: CALL_OW 111
// break ;
86472: GO 86526
// end else
86474: GO 86524
// begin wait ( 0 0$3 ) ;
86476: LD_INT 105
86478: PPUSH
86479: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
86483: LD_VAR 0 1
86487: PPUSH
86488: LD_EXP 124
86492: PUSH
86493: LD_VAR 0 4
86497: ARRAY
86498: PUSH
86499: LD_INT 3
86501: ARRAY
86502: PPUSH
86503: LD_EXP 124
86507: PUSH
86508: LD_VAR 0 4
86512: ARRAY
86513: PUSH
86514: LD_INT 4
86516: ARRAY
86517: PPUSH
86518: CALL_OW 111
// break ;
86522: GO 86526
// end ; end ;
86524: GO 85975
86526: POP
86527: POP
// end ;
86528: LD_VAR 0 3
86532: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
86533: LD_INT 0
86535: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
86536: LD_VAR 0 1
86540: PUSH
86541: LD_INT 250
86543: EQUAL
86544: IFFALSE 86561
86546: PUSH
86547: LD_VAR 0 2
86551: PPUSH
86552: CALL_OW 264
86556: PUSH
86557: LD_INT 81
86559: EQUAL
86560: AND
86561: IFFALSE 86582
// MinerPlaceMine ( unit , x , y ) ;
86563: LD_VAR 0 2
86567: PPUSH
86568: LD_VAR 0 4
86572: PPUSH
86573: LD_VAR 0 5
86577: PPUSH
86578: CALL 89928 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
86582: LD_VAR 0 1
86586: PUSH
86587: LD_INT 251
86589: EQUAL
86590: IFFALSE 86607
86592: PUSH
86593: LD_VAR 0 2
86597: PPUSH
86598: CALL_OW 264
86602: PUSH
86603: LD_INT 81
86605: EQUAL
86606: AND
86607: IFFALSE 86628
// MinerDetonateMine ( unit , x , y ) ;
86609: LD_VAR 0 2
86613: PPUSH
86614: LD_VAR 0 4
86618: PPUSH
86619: LD_VAR 0 5
86623: PPUSH
86624: CALL 90335 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
86628: LD_VAR 0 1
86632: PUSH
86633: LD_INT 252
86635: EQUAL
86636: IFFALSE 86653
86638: PUSH
86639: LD_VAR 0 2
86643: PPUSH
86644: CALL_OW 264
86648: PUSH
86649: LD_INT 81
86651: EQUAL
86652: AND
86653: IFFALSE 86674
// MinerCreateMinefield ( unit , x , y ) ;
86655: LD_VAR 0 2
86659: PPUSH
86660: LD_VAR 0 4
86664: PPUSH
86665: LD_VAR 0 5
86669: PPUSH
86670: CALL 90567 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
86674: LD_VAR 0 1
86678: PUSH
86679: LD_INT 253
86681: EQUAL
86682: IFFALSE 86699
86684: PUSH
86685: LD_VAR 0 2
86689: PPUSH
86690: CALL_OW 257
86694: PUSH
86695: LD_INT 5
86697: EQUAL
86698: AND
86699: IFFALSE 86720
// ComBinocular ( unit , x , y ) ;
86701: LD_VAR 0 2
86705: PPUSH
86706: LD_VAR 0 4
86710: PPUSH
86711: LD_VAR 0 5
86715: PPUSH
86716: CALL 90942 0 3
// if selectedUnit then
86720: LD_VAR 0 3
86724: IFFALSE 86784
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
86726: LD_VAR 0 1
86730: PUSH
86731: LD_INT 254
86733: EQUAL
86734: IFFALSE 86751
86736: PUSH
86737: LD_VAR 0 2
86741: PPUSH
86742: CALL_OW 264
86746: PUSH
86747: LD_INT 99
86749: EQUAL
86750: AND
86751: IFFALSE 86768
86753: PUSH
86754: LD_VAR 0 3
86758: PPUSH
86759: CALL_OW 263
86763: PUSH
86764: LD_INT 3
86766: EQUAL
86767: AND
86768: IFFALSE 86784
// HackDestroyVehicle ( unit , selectedUnit ) ;
86770: LD_VAR 0 2
86774: PPUSH
86775: LD_VAR 0 3
86779: PPUSH
86780: CALL 89118 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
86784: LD_VAR 0 1
86788: PUSH
86789: LD_INT 255
86791: EQUAL
86792: IFFALSE 86816
86794: PUSH
86795: LD_VAR 0 2
86799: PPUSH
86800: CALL_OW 264
86804: PUSH
86805: LD_INT 14
86807: PUSH
86808: LD_INT 53
86810: PUSH
86811: EMPTY
86812: LIST
86813: LIST
86814: IN
86815: AND
86816: IFFALSE 86834
86818: PUSH
86819: LD_VAR 0 4
86823: PPUSH
86824: LD_VAR 0 5
86828: PPUSH
86829: CALL_OW 488
86833: AND
86834: IFFALSE 86858
// CutTreeXYR ( unit , x , y , 12 ) ;
86836: LD_VAR 0 2
86840: PPUSH
86841: LD_VAR 0 4
86845: PPUSH
86846: LD_VAR 0 5
86850: PPUSH
86851: LD_INT 12
86853: PPUSH
86854: CALL 87049 0 4
// if cmd = 256 then
86858: LD_VAR 0 1
86862: PUSH
86863: LD_INT 256
86865: EQUAL
86866: IFFALSE 86887
// SetFactoryWaypoint ( unit , x , y ) ;
86868: LD_VAR 0 2
86872: PPUSH
86873: LD_VAR 0 4
86877: PPUSH
86878: LD_VAR 0 5
86882: PPUSH
86883: CALL 84328 0 3
// if cmd = 257 then
86887: LD_VAR 0 1
86891: PUSH
86892: LD_INT 257
86894: EQUAL
86895: IFFALSE 86916
// SetWarehouseGatheringPoint ( unit , x , y ) ;
86897: LD_VAR 0 2
86901: PPUSH
86902: LD_VAR 0 4
86906: PPUSH
86907: LD_VAR 0 5
86911: PPUSH
86912: CALL 84824 0 3
// if cmd = 258 then
86916: LD_VAR 0 1
86920: PUSH
86921: LD_INT 258
86923: EQUAL
86924: IFFALSE 86948
// BurnTreeXYR ( unit , x , y , 8 ) ;
86926: LD_VAR 0 2
86930: PPUSH
86931: LD_VAR 0 4
86935: PPUSH
86936: LD_VAR 0 5
86940: PPUSH
86941: LD_INT 8
86943: PPUSH
86944: CALL 87471 0 4
// end ;
86948: LD_VAR 0 6
86952: RET
// export function ComRadiation ( un ) ; var eff ; begin
86953: LD_INT 0
86955: PPUSH
86956: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
86957: LD_VAR 0 1
86961: PPUSH
86962: CALL_OW 264
86966: PUSH
86967: LD_INT 91
86969: NONEQUAL
86970: IFFALSE 86974
// exit ;
86972: GO 87044
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
86974: LD_INT 68
86976: PPUSH
86977: LD_VAR 0 1
86981: PPUSH
86982: CALL_OW 255
86986: PPUSH
86987: CALL_OW 321
86991: PUSH
86992: LD_INT 2
86994: EQUAL
86995: IFFALSE 87007
// eff := 50 else
86997: LD_ADDR_VAR 0 3
87001: PUSH
87002: LD_INT 50
87004: ST_TO_ADDR
87005: GO 87015
// eff := 25 ;
87007: LD_ADDR_VAR 0 3
87011: PUSH
87012: LD_INT 25
87014: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
87015: LD_VAR 0 1
87019: PPUSH
87020: CALL_OW 250
87024: PPUSH
87025: LD_VAR 0 1
87029: PPUSH
87030: CALL_OW 251
87034: PPUSH
87035: LD_VAR 0 3
87039: PPUSH
87040: CALL_OW 495
// end ;
87044: LD_VAR 0 2
87048: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
87049: LD_INT 0
87051: PPUSH
87052: PPUSH
87053: PPUSH
87054: PPUSH
87055: PPUSH
87056: PPUSH
87057: PPUSH
87058: PPUSH
87059: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
87060: LD_VAR 0 1
87064: PPUSH
87065: CALL_OW 302
87069: NOT
87070: IFTRUE 87089
87072: PUSH
87073: LD_VAR 0 2
87077: PPUSH
87078: LD_VAR 0 3
87082: PPUSH
87083: CALL_OW 488
87087: NOT
87088: OR
87089: IFTRUE 87098
87091: PUSH
87092: LD_VAR 0 4
87096: NOT
87097: OR
87098: IFFALSE 87102
// exit ;
87100: GO 87466
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
87102: LD_VAR 0 1
87106: PPUSH
87107: CALL_OW 437
87111: PPUSH
87112: CALL 28367 0 1
87116: PUSH
87117: LD_INT 10
87119: GREATER
87120: IFFALSE 87124
// exit ;
87122: GO 87466
// list := [ ] ;
87124: LD_ADDR_VAR 0 13
87128: PUSH
87129: EMPTY
87130: ST_TO_ADDR
// if x - r < 0 then
87131: LD_VAR 0 2
87135: PUSH
87136: LD_VAR 0 4
87140: MINUS
87141: PUSH
87142: LD_INT 0
87144: LESS
87145: IFFALSE 87157
// min_x := 0 else
87147: LD_ADDR_VAR 0 7
87151: PUSH
87152: LD_INT 0
87154: ST_TO_ADDR
87155: GO 87173
// min_x := x - r ;
87157: LD_ADDR_VAR 0 7
87161: PUSH
87162: LD_VAR 0 2
87166: PUSH
87167: LD_VAR 0 4
87171: MINUS
87172: ST_TO_ADDR
// if y - r < 0 then
87173: LD_VAR 0 3
87177: PUSH
87178: LD_VAR 0 4
87182: MINUS
87183: PUSH
87184: LD_INT 0
87186: LESS
87187: IFFALSE 87199
// min_y := 0 else
87189: LD_ADDR_VAR 0 8
87193: PUSH
87194: LD_INT 0
87196: ST_TO_ADDR
87197: GO 87215
// min_y := y - r ;
87199: LD_ADDR_VAR 0 8
87203: PUSH
87204: LD_VAR 0 3
87208: PUSH
87209: LD_VAR 0 4
87213: MINUS
87214: ST_TO_ADDR
// max_x := x + r ;
87215: LD_ADDR_VAR 0 9
87219: PUSH
87220: LD_VAR 0 2
87224: PUSH
87225: LD_VAR 0 4
87229: PLUS
87230: ST_TO_ADDR
// max_y := y + r ;
87231: LD_ADDR_VAR 0 10
87235: PUSH
87236: LD_VAR 0 3
87240: PUSH
87241: LD_VAR 0 4
87245: PLUS
87246: ST_TO_ADDR
// for _x = min_x to max_x do
87247: LD_ADDR_VAR 0 11
87251: PUSH
87252: DOUBLE
87253: LD_VAR 0 7
87257: DEC
87258: ST_TO_ADDR
87259: LD_VAR 0 9
87263: PUSH
87264: FOR_TO
87265: IFFALSE 87384
// for _y = min_y to max_y do
87267: LD_ADDR_VAR 0 12
87271: PUSH
87272: DOUBLE
87273: LD_VAR 0 8
87277: DEC
87278: ST_TO_ADDR
87279: LD_VAR 0 10
87283: PUSH
87284: FOR_TO
87285: IFFALSE 87380
// begin if not ValidHex ( _x , _y ) then
87287: LD_VAR 0 11
87291: PPUSH
87292: LD_VAR 0 12
87296: PPUSH
87297: CALL_OW 488
87301: NOT
87302: IFFALSE 87306
// continue ;
87304: GO 87284
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
87306: LD_VAR 0 11
87310: PPUSH
87311: LD_VAR 0 12
87315: PPUSH
87316: CALL_OW 351
87320: IFFALSE 87338
87322: PUSH
87323: LD_VAR 0 11
87327: PPUSH
87328: LD_VAR 0 12
87332: PPUSH
87333: CALL_OW 554
87337: AND
87338: IFFALSE 87378
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
87340: LD_ADDR_VAR 0 13
87344: PUSH
87345: LD_VAR 0 13
87349: PPUSH
87350: LD_VAR 0 13
87354: PUSH
87355: LD_INT 1
87357: PLUS
87358: PPUSH
87359: LD_VAR 0 11
87363: PUSH
87364: LD_VAR 0 12
87368: PUSH
87369: EMPTY
87370: LIST
87371: LIST
87372: PPUSH
87373: CALL_OW 2
87377: ST_TO_ADDR
// end ;
87378: GO 87284
87380: POP
87381: POP
87382: GO 87264
87384: POP
87385: POP
// if not list then
87386: LD_VAR 0 13
87390: NOT
87391: IFFALSE 87395
// exit ;
87393: GO 87466
// for i in list do
87395: LD_ADDR_VAR 0 6
87399: PUSH
87400: LD_VAR 0 13
87404: PUSH
87405: FOR_IN
87406: IFFALSE 87464
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
87408: LD_VAR 0 1
87412: PPUSH
87413: LD_STRING M
87415: PUSH
87416: LD_VAR 0 6
87420: PUSH
87421: LD_INT 1
87423: ARRAY
87424: PUSH
87425: LD_VAR 0 6
87429: PUSH
87430: LD_INT 2
87432: ARRAY
87433: PUSH
87434: LD_INT 0
87436: PUSH
87437: LD_INT 0
87439: PUSH
87440: LD_INT 0
87442: PUSH
87443: LD_INT 0
87445: PUSH
87446: EMPTY
87447: LIST
87448: LIST
87449: LIST
87450: LIST
87451: LIST
87452: LIST
87453: LIST
87454: PUSH
87455: EMPTY
87456: LIST
87457: PPUSH
87458: CALL_OW 447
87462: GO 87405
87464: POP
87465: POP
// end ;
87466: LD_VAR 0 5
87470: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
87471: LD_INT 0
87473: PPUSH
87474: PPUSH
87475: PPUSH
87476: PPUSH
87477: PPUSH
87478: PPUSH
87479: PPUSH
87480: PPUSH
87481: PPUSH
87482: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
87483: LD_VAR 0 1
87487: PPUSH
87488: CALL_OW 302
87492: NOT
87493: IFTRUE 87512
87495: PUSH
87496: LD_VAR 0 2
87500: PPUSH
87501: LD_VAR 0 3
87505: PPUSH
87506: CALL_OW 488
87510: NOT
87511: OR
87512: IFTRUE 87521
87514: PUSH
87515: LD_VAR 0 4
87519: NOT
87520: OR
87521: IFFALSE 87525
// exit ;
87523: GO 88064
// if Count ( GetTaskList ( flame ) ) > 10 then
87525: LD_VAR 0 1
87529: PPUSH
87530: CALL_OW 437
87534: PPUSH
87535: CALL 28367 0 1
87539: PUSH
87540: LD_INT 10
87542: GREATER
87543: IFFALSE 87547
// exit ;
87545: GO 88064
// list := [ ] ;
87547: LD_ADDR_VAR 0 13
87551: PUSH
87552: EMPTY
87553: ST_TO_ADDR
// if x - r < 0 then
87554: LD_VAR 0 2
87558: PUSH
87559: LD_VAR 0 4
87563: MINUS
87564: PUSH
87565: LD_INT 0
87567: LESS
87568: IFFALSE 87580
// min_x := 0 else
87570: LD_ADDR_VAR 0 7
87574: PUSH
87575: LD_INT 0
87577: ST_TO_ADDR
87578: GO 87596
// min_x := x - r ;
87580: LD_ADDR_VAR 0 7
87584: PUSH
87585: LD_VAR 0 2
87589: PUSH
87590: LD_VAR 0 4
87594: MINUS
87595: ST_TO_ADDR
// if y - r < 0 then
87596: LD_VAR 0 3
87600: PUSH
87601: LD_VAR 0 4
87605: MINUS
87606: PUSH
87607: LD_INT 0
87609: LESS
87610: IFFALSE 87622
// min_y := 0 else
87612: LD_ADDR_VAR 0 8
87616: PUSH
87617: LD_INT 0
87619: ST_TO_ADDR
87620: GO 87638
// min_y := y - r ;
87622: LD_ADDR_VAR 0 8
87626: PUSH
87627: LD_VAR 0 3
87631: PUSH
87632: LD_VAR 0 4
87636: MINUS
87637: ST_TO_ADDR
// max_x := x + r ;
87638: LD_ADDR_VAR 0 9
87642: PUSH
87643: LD_VAR 0 2
87647: PUSH
87648: LD_VAR 0 4
87652: PLUS
87653: ST_TO_ADDR
// max_y := y + r ;
87654: LD_ADDR_VAR 0 10
87658: PUSH
87659: LD_VAR 0 3
87663: PUSH
87664: LD_VAR 0 4
87668: PLUS
87669: ST_TO_ADDR
// for _x = min_x to max_x do
87670: LD_ADDR_VAR 0 11
87674: PUSH
87675: DOUBLE
87676: LD_VAR 0 7
87680: DEC
87681: ST_TO_ADDR
87682: LD_VAR 0 9
87686: PUSH
87687: FOR_TO
87688: IFFALSE 87807
// for _y = min_y to max_y do
87690: LD_ADDR_VAR 0 12
87694: PUSH
87695: DOUBLE
87696: LD_VAR 0 8
87700: DEC
87701: ST_TO_ADDR
87702: LD_VAR 0 10
87706: PUSH
87707: FOR_TO
87708: IFFALSE 87803
// begin if not ValidHex ( _x , _y ) then
87710: LD_VAR 0 11
87714: PPUSH
87715: LD_VAR 0 12
87719: PPUSH
87720: CALL_OW 488
87724: NOT
87725: IFFALSE 87729
// continue ;
87727: GO 87707
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
87729: LD_VAR 0 11
87733: PPUSH
87734: LD_VAR 0 12
87738: PPUSH
87739: CALL_OW 351
87743: IFFALSE 87761
87745: PUSH
87746: LD_VAR 0 11
87750: PPUSH
87751: LD_VAR 0 12
87755: PPUSH
87756: CALL_OW 554
87760: AND
87761: IFFALSE 87801
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
87763: LD_ADDR_VAR 0 13
87767: PUSH
87768: LD_VAR 0 13
87772: PPUSH
87773: LD_VAR 0 13
87777: PUSH
87778: LD_INT 1
87780: PLUS
87781: PPUSH
87782: LD_VAR 0 11
87786: PUSH
87787: LD_VAR 0 12
87791: PUSH
87792: EMPTY
87793: LIST
87794: LIST
87795: PPUSH
87796: CALL_OW 2
87800: ST_TO_ADDR
// end ;
87801: GO 87707
87803: POP
87804: POP
87805: GO 87687
87807: POP
87808: POP
// if not list then
87809: LD_VAR 0 13
87813: NOT
87814: IFFALSE 87818
// exit ;
87816: GO 88064
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
87818: LD_ADDR_VAR 0 13
87822: PUSH
87823: LD_VAR 0 1
87827: PPUSH
87828: LD_VAR 0 13
87832: PPUSH
87833: LD_INT 1
87835: PPUSH
87836: LD_INT 1
87838: PPUSH
87839: CALL 31773 0 4
87843: ST_TO_ADDR
// ComStop ( flame ) ;
87844: LD_VAR 0 1
87848: PPUSH
87849: CALL_OW 141
// for i in list do
87853: LD_ADDR_VAR 0 6
87857: PUSH
87858: LD_VAR 0 13
87862: PUSH
87863: FOR_IN
87864: IFFALSE 87895
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
87866: LD_VAR 0 1
87870: PPUSH
87871: LD_VAR 0 6
87875: PUSH
87876: LD_INT 1
87878: ARRAY
87879: PPUSH
87880: LD_VAR 0 6
87884: PUSH
87885: LD_INT 2
87887: ARRAY
87888: PPUSH
87889: CALL_OW 176
87893: GO 87863
87895: POP
87896: POP
// repeat wait ( 0 0$1 ) ;
87897: LD_INT 35
87899: PPUSH
87900: CALL_OW 67
// task := GetTaskList ( flame ) ;
87904: LD_ADDR_VAR 0 14
87908: PUSH
87909: LD_VAR 0 1
87913: PPUSH
87914: CALL_OW 437
87918: ST_TO_ADDR
// if not task then
87919: LD_VAR 0 14
87923: NOT
87924: IFFALSE 87928
// exit ;
87926: GO 88064
// if task [ 1 ] [ 1 ] <> | then
87928: LD_VAR 0 14
87932: PUSH
87933: LD_INT 1
87935: ARRAY
87936: PUSH
87937: LD_INT 1
87939: ARRAY
87940: PUSH
87941: LD_STRING |
87943: NONEQUAL
87944: IFFALSE 87948
// exit ;
87946: GO 88064
// _x := task [ 1 ] [ 2 ] ;
87948: LD_ADDR_VAR 0 11
87952: PUSH
87953: LD_VAR 0 14
87957: PUSH
87958: LD_INT 1
87960: ARRAY
87961: PUSH
87962: LD_INT 2
87964: ARRAY
87965: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
87966: LD_ADDR_VAR 0 12
87970: PUSH
87971: LD_VAR 0 14
87975: PUSH
87976: LD_INT 1
87978: ARRAY
87979: PUSH
87980: LD_INT 3
87982: ARRAY
87983: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
87984: LD_VAR 0 11
87988: PPUSH
87989: LD_VAR 0 12
87993: PPUSH
87994: CALL_OW 351
87998: NOT
87999: IFTRUE 88018
88001: PUSH
88002: LD_VAR 0 11
88006: PPUSH
88007: LD_VAR 0 12
88011: PPUSH
88012: CALL_OW 554
88016: NOT
88017: OR
88018: IFFALSE 88052
// begin task := Delete ( task , 1 ) ;
88020: LD_ADDR_VAR 0 14
88024: PUSH
88025: LD_VAR 0 14
88029: PPUSH
88030: LD_INT 1
88032: PPUSH
88033: CALL_OW 3
88037: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
88038: LD_VAR 0 1
88042: PPUSH
88043: LD_VAR 0 14
88047: PPUSH
88048: CALL_OW 446
// end ; until not HasTask ( flame ) ;
88052: LD_VAR 0 1
88056: PPUSH
88057: CALL_OW 314
88061: NOT
88062: IFFALSE 87897
// end ;
88064: LD_VAR 0 5
88068: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
88069: LD_EXP 128
88073: NOT
88074: IFFALSE 88124
88076: GO 88078
88078: DISABLE
// begin initHack := true ;
88079: LD_ADDR_EXP 128
88083: PUSH
88084: LD_INT 1
88086: ST_TO_ADDR
// hackTanks := [ ] ;
88087: LD_ADDR_EXP 129
88091: PUSH
88092: EMPTY
88093: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
88094: LD_ADDR_EXP 130
88098: PUSH
88099: EMPTY
88100: ST_TO_ADDR
// hackLimit := 3 ;
88101: LD_ADDR_EXP 131
88105: PUSH
88106: LD_INT 3
88108: ST_TO_ADDR
// hackDist := 12 ;
88109: LD_ADDR_EXP 132
88113: PUSH
88114: LD_INT 12
88116: ST_TO_ADDR
// hackCounter := [ ] ;
88117: LD_ADDR_EXP 133
88121: PUSH
88122: EMPTY
88123: ST_TO_ADDR
// end ;
88124: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
88125: LD_EXP 128
88129: IFFALSE 88147
88131: PUSH
88132: LD_INT 34
88134: PUSH
88135: LD_INT 99
88137: PUSH
88138: EMPTY
88139: LIST
88140: LIST
88141: PPUSH
88142: CALL_OW 69
88146: AND
88147: IFFALSE 88400
88149: GO 88151
88151: DISABLE
88152: LD_INT 0
88154: PPUSH
88155: PPUSH
// begin enable ;
88156: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
88157: LD_ADDR_VAR 0 1
88161: PUSH
88162: LD_INT 34
88164: PUSH
88165: LD_INT 99
88167: PUSH
88168: EMPTY
88169: LIST
88170: LIST
88171: PPUSH
88172: CALL_OW 69
88176: PUSH
88177: FOR_IN
88178: IFFALSE 88398
// begin if not i in hackTanks then
88180: LD_VAR 0 1
88184: PUSH
88185: LD_EXP 129
88189: IN
88190: NOT
88191: IFFALSE 88274
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
88193: LD_ADDR_EXP 129
88197: PUSH
88198: LD_EXP 129
88202: PPUSH
88203: LD_EXP 129
88207: PUSH
88208: LD_INT 1
88210: PLUS
88211: PPUSH
88212: LD_VAR 0 1
88216: PPUSH
88217: CALL_OW 1
88221: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
88222: LD_ADDR_EXP 130
88226: PUSH
88227: LD_EXP 130
88231: PPUSH
88232: LD_EXP 130
88236: PUSH
88237: LD_INT 1
88239: PLUS
88240: PPUSH
88241: EMPTY
88242: PPUSH
88243: CALL_OW 1
88247: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
88248: LD_ADDR_EXP 133
88252: PUSH
88253: LD_EXP 133
88257: PPUSH
88258: LD_EXP 133
88262: PUSH
88263: LD_INT 1
88265: PLUS
88266: PPUSH
88267: EMPTY
88268: PPUSH
88269: CALL_OW 1
88273: ST_TO_ADDR
// end ; if not IsOk ( i ) then
88274: LD_VAR 0 1
88278: PPUSH
88279: CALL_OW 302
88283: NOT
88284: IFFALSE 88297
// begin HackUnlinkAll ( i ) ;
88286: LD_VAR 0 1
88290: PPUSH
88291: CALL 88403 0 1
// continue ;
88295: GO 88177
// end ; HackCheckCapturedStatus ( i ) ;
88297: LD_VAR 0 1
88301: PPUSH
88302: CALL 88848 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
88306: LD_ADDR_VAR 0 2
88310: PUSH
88311: LD_INT 81
88313: PUSH
88314: LD_VAR 0 1
88318: PPUSH
88319: CALL_OW 255
88323: PUSH
88324: EMPTY
88325: LIST
88326: LIST
88327: PUSH
88328: LD_INT 33
88330: PUSH
88331: LD_INT 3
88333: PUSH
88334: EMPTY
88335: LIST
88336: LIST
88337: PUSH
88338: LD_INT 91
88340: PUSH
88341: LD_VAR 0 1
88345: PUSH
88346: LD_EXP 132
88350: PUSH
88351: EMPTY
88352: LIST
88353: LIST
88354: LIST
88355: PUSH
88356: LD_INT 50
88358: PUSH
88359: EMPTY
88360: LIST
88361: PUSH
88362: EMPTY
88363: LIST
88364: LIST
88365: LIST
88366: LIST
88367: PPUSH
88368: CALL_OW 69
88372: ST_TO_ADDR
// if not tmp then
88373: LD_VAR 0 2
88377: NOT
88378: IFFALSE 88382
// continue ;
88380: GO 88177
// HackLink ( i , tmp ) ;
88382: LD_VAR 0 1
88386: PPUSH
88387: LD_VAR 0 2
88391: PPUSH
88392: CALL 88539 0 2
// end ;
88396: GO 88177
88398: POP
88399: POP
// end ;
88400: PPOPN 2
88402: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
88403: LD_INT 0
88405: PPUSH
88406: PPUSH
88407: PPUSH
// if not hack in hackTanks then
88408: LD_VAR 0 1
88412: PUSH
88413: LD_EXP 129
88417: IN
88418: NOT
88419: IFFALSE 88423
// exit ;
88421: GO 88534
// index := GetElementIndex ( hackTanks , hack ) ;
88423: LD_ADDR_VAR 0 4
88427: PUSH
88428: LD_EXP 129
88432: PPUSH
88433: LD_VAR 0 1
88437: PPUSH
88438: CALL 31068 0 2
88442: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
88443: LD_EXP 130
88447: PUSH
88448: LD_VAR 0 4
88452: ARRAY
88453: IFFALSE 88534
// begin for i in hackTanksCaptured [ index ] do
88455: LD_ADDR_VAR 0 3
88459: PUSH
88460: LD_EXP 130
88464: PUSH
88465: LD_VAR 0 4
88469: ARRAY
88470: PUSH
88471: FOR_IN
88472: IFFALSE 88498
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
88474: LD_VAR 0 3
88478: PUSH
88479: LD_INT 1
88481: ARRAY
88482: PPUSH
88483: LD_VAR 0 3
88487: PUSH
88488: LD_INT 2
88490: ARRAY
88491: PPUSH
88492: CALL_OW 235
88496: GO 88471
88498: POP
88499: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
88500: LD_ADDR_EXP 130
88504: PUSH
88505: LD_EXP 130
88509: PPUSH
88510: LD_VAR 0 4
88514: PPUSH
88515: EMPTY
88516: PPUSH
88517: CALL_OW 1
88521: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
88522: LD_VAR 0 1
88526: PPUSH
88527: LD_INT 0
88529: PPUSH
88530: CALL_OW 505
// end ; end ;
88534: LD_VAR 0 2
88538: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
88539: LD_INT 0
88541: PPUSH
88542: PPUSH
88543: PPUSH
// if not hack in hackTanks or not vehicles then
88544: LD_VAR 0 1
88548: PUSH
88549: LD_EXP 129
88553: IN
88554: NOT
88555: IFTRUE 88564
88557: PUSH
88558: LD_VAR 0 2
88562: NOT
88563: OR
88564: IFFALSE 88568
// exit ;
88566: GO 88843
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
88568: LD_ADDR_VAR 0 2
88572: PUSH
88573: LD_VAR 0 1
88577: PPUSH
88578: LD_VAR 0 2
88582: PPUSH
88583: LD_INT 1
88585: PPUSH
88586: LD_INT 1
88588: PPUSH
88589: CALL 31720 0 4
88593: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
88594: LD_ADDR_VAR 0 5
88598: PUSH
88599: LD_EXP 129
88603: PPUSH
88604: LD_VAR 0 1
88608: PPUSH
88609: CALL 31068 0 2
88613: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
88614: LD_EXP 130
88618: PUSH
88619: LD_VAR 0 5
88623: ARRAY
88624: PUSH
88625: LD_EXP 131
88629: LESS
88630: IFFALSE 88819
// begin for i := 1 to vehicles do
88632: LD_ADDR_VAR 0 4
88636: PUSH
88637: DOUBLE
88638: LD_INT 1
88640: DEC
88641: ST_TO_ADDR
88642: LD_VAR 0 2
88646: PUSH
88647: FOR_TO
88648: IFFALSE 88817
// begin if hackTanksCaptured [ index ] = hackLimit then
88650: LD_EXP 130
88654: PUSH
88655: LD_VAR 0 5
88659: ARRAY
88660: PUSH
88661: LD_EXP 131
88665: EQUAL
88666: IFFALSE 88670
// break ;
88668: GO 88817
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
88670: LD_ADDR_EXP 133
88674: PUSH
88675: LD_EXP 133
88679: PPUSH
88680: LD_VAR 0 5
88684: PPUSH
88685: LD_EXP 133
88689: PUSH
88690: LD_VAR 0 5
88694: ARRAY
88695: PUSH
88696: LD_INT 1
88698: PLUS
88699: PPUSH
88700: CALL_OW 1
88704: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
88705: LD_ADDR_EXP 130
88709: PUSH
88710: LD_EXP 130
88714: PPUSH
88715: LD_VAR 0 5
88719: PUSH
88720: LD_EXP 130
88724: PUSH
88725: LD_VAR 0 5
88729: ARRAY
88730: PUSH
88731: LD_INT 1
88733: PLUS
88734: PUSH
88735: EMPTY
88736: LIST
88737: LIST
88738: PPUSH
88739: LD_VAR 0 2
88743: PUSH
88744: LD_VAR 0 4
88748: ARRAY
88749: PUSH
88750: LD_VAR 0 2
88754: PUSH
88755: LD_VAR 0 4
88759: ARRAY
88760: PPUSH
88761: CALL_OW 255
88765: PUSH
88766: EMPTY
88767: LIST
88768: LIST
88769: PPUSH
88770: CALL 31285 0 3
88774: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
88775: LD_VAR 0 2
88779: PUSH
88780: LD_VAR 0 4
88784: ARRAY
88785: PPUSH
88786: LD_VAR 0 1
88790: PPUSH
88791: CALL_OW 255
88795: PPUSH
88796: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
88800: LD_VAR 0 2
88804: PUSH
88805: LD_VAR 0 4
88809: ARRAY
88810: PPUSH
88811: CALL_OW 141
// end ;
88815: GO 88647
88817: POP
88818: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
88819: LD_VAR 0 1
88823: PPUSH
88824: LD_EXP 130
88828: PUSH
88829: LD_VAR 0 5
88833: ARRAY
88834: PUSH
88835: LD_INT 0
88837: PLUS
88838: PPUSH
88839: CALL_OW 505
// end ;
88843: LD_VAR 0 3
88847: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
88848: LD_INT 0
88850: PPUSH
88851: PPUSH
88852: PPUSH
88853: PPUSH
// if not hack in hackTanks then
88854: LD_VAR 0 1
88858: PUSH
88859: LD_EXP 129
88863: IN
88864: NOT
88865: IFFALSE 88869
// exit ;
88867: GO 89113
// index := GetElementIndex ( hackTanks , hack ) ;
88869: LD_ADDR_VAR 0 4
88873: PUSH
88874: LD_EXP 129
88878: PPUSH
88879: LD_VAR 0 1
88883: PPUSH
88884: CALL 31068 0 2
88888: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
88889: LD_ADDR_VAR 0 3
88893: PUSH
88894: DOUBLE
88895: LD_EXP 130
88899: PUSH
88900: LD_VAR 0 4
88904: ARRAY
88905: INC
88906: ST_TO_ADDR
88907: LD_INT 1
88909: PUSH
88910: FOR_DOWNTO
88911: IFFALSE 89087
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
88913: LD_ADDR_VAR 0 5
88917: PUSH
88918: LD_EXP 130
88922: PUSH
88923: LD_VAR 0 4
88927: ARRAY
88928: PUSH
88929: LD_VAR 0 3
88933: ARRAY
88934: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
88935: LD_VAR 0 5
88939: PUSH
88940: LD_INT 1
88942: ARRAY
88943: PPUSH
88944: CALL_OW 302
88948: NOT
88949: IFTRUE 88977
88951: PUSH
88952: LD_VAR 0 5
88956: PUSH
88957: LD_INT 1
88959: ARRAY
88960: PPUSH
88961: CALL_OW 255
88965: PUSH
88966: LD_VAR 0 1
88970: PPUSH
88971: CALL_OW 255
88975: NONEQUAL
88976: OR
88977: IFFALSE 89085
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
88979: LD_VAR 0 5
88983: PUSH
88984: LD_INT 1
88986: ARRAY
88987: PPUSH
88988: CALL_OW 305
88992: IFFALSE 89020
88994: PUSH
88995: LD_VAR 0 5
88999: PUSH
89000: LD_INT 1
89002: ARRAY
89003: PPUSH
89004: CALL_OW 255
89008: PUSH
89009: LD_VAR 0 1
89013: PPUSH
89014: CALL_OW 255
89018: EQUAL
89019: AND
89020: IFFALSE 89044
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
89022: LD_VAR 0 5
89026: PUSH
89027: LD_INT 1
89029: ARRAY
89030: PPUSH
89031: LD_VAR 0 5
89035: PUSH
89036: LD_INT 2
89038: ARRAY
89039: PPUSH
89040: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
89044: LD_ADDR_EXP 130
89048: PUSH
89049: LD_EXP 130
89053: PPUSH
89054: LD_VAR 0 4
89058: PPUSH
89059: LD_EXP 130
89063: PUSH
89064: LD_VAR 0 4
89068: ARRAY
89069: PPUSH
89070: LD_VAR 0 3
89074: PPUSH
89075: CALL_OW 3
89079: PPUSH
89080: CALL_OW 1
89084: ST_TO_ADDR
// end ; end ;
89085: GO 88910
89087: POP
89088: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
89089: LD_VAR 0 1
89093: PPUSH
89094: LD_EXP 130
89098: PUSH
89099: LD_VAR 0 4
89103: ARRAY
89104: PUSH
89105: LD_INT 0
89107: PLUS
89108: PPUSH
89109: CALL_OW 505
// end ;
89113: LD_VAR 0 2
89117: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
89118: LD_INT 0
89120: PPUSH
89121: PPUSH
89122: PPUSH
89123: PPUSH
// if not hack in hackTanks then
89124: LD_VAR 0 1
89128: PUSH
89129: LD_EXP 129
89133: IN
89134: NOT
89135: IFFALSE 89139
// exit ;
89137: GO 89224
// index := GetElementIndex ( hackTanks , hack ) ;
89139: LD_ADDR_VAR 0 5
89143: PUSH
89144: LD_EXP 129
89148: PPUSH
89149: LD_VAR 0 1
89153: PPUSH
89154: CALL 31068 0 2
89158: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
89159: LD_ADDR_VAR 0 4
89163: PUSH
89164: DOUBLE
89165: LD_INT 1
89167: DEC
89168: ST_TO_ADDR
89169: LD_EXP 130
89173: PUSH
89174: LD_VAR 0 5
89178: ARRAY
89179: PUSH
89180: FOR_TO
89181: IFFALSE 89222
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
89183: LD_EXP 130
89187: PUSH
89188: LD_VAR 0 5
89192: ARRAY
89193: PUSH
89194: LD_VAR 0 4
89198: ARRAY
89199: PUSH
89200: LD_INT 1
89202: ARRAY
89203: PUSH
89204: LD_VAR 0 2
89208: EQUAL
89209: IFFALSE 89220
// KillUnit ( vehicle ) ;
89211: LD_VAR 0 2
89215: PPUSH
89216: CALL_OW 66
89220: GO 89180
89222: POP
89223: POP
// end ;
89224: LD_VAR 0 3
89228: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
89229: LD_EXP 134
89233: NOT
89234: IFFALSE 89367
89236: GO 89238
89238: DISABLE
89239: LD_INT 0
89241: PPUSH
// begin initMiner := true ;
89242: LD_ADDR_EXP 134
89246: PUSH
89247: LD_INT 1
89249: ST_TO_ADDR
// minersList := [ ] ;
89250: LD_ADDR_EXP 135
89254: PUSH
89255: EMPTY
89256: ST_TO_ADDR
// minerMinesList := [ ] ;
89257: LD_ADDR_EXP 136
89261: PUSH
89262: EMPTY
89263: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
89264: LD_ADDR_EXP 137
89268: PUSH
89269: LD_INT 10
89271: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
89272: LD_ADDR_VAR 0 1
89276: PUSH
89277: LD_INT 34
89279: PUSH
89280: LD_INT 81
89282: PUSH
89283: EMPTY
89284: LIST
89285: LIST
89286: PPUSH
89287: CALL_OW 69
89291: PUSH
89292: FOR_IN
89293: IFFALSE 89365
// begin if not i in minersList then
89295: LD_VAR 0 1
89299: PUSH
89300: LD_EXP 135
89304: IN
89305: NOT
89306: IFFALSE 89363
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
89308: LD_ADDR_EXP 135
89312: PUSH
89313: LD_EXP 135
89317: PPUSH
89318: LD_EXP 135
89322: PUSH
89323: LD_INT 1
89325: PLUS
89326: PPUSH
89327: LD_VAR 0 1
89331: PPUSH
89332: CALL_OW 1
89336: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
89337: LD_ADDR_EXP 136
89341: PUSH
89342: LD_EXP 136
89346: PPUSH
89347: LD_EXP 136
89351: PUSH
89352: LD_INT 1
89354: PLUS
89355: PPUSH
89356: EMPTY
89357: PPUSH
89358: CALL_OW 1
89362: ST_TO_ADDR
// end end ;
89363: GO 89292
89365: POP
89366: POP
// end ;
89367: PPOPN 1
89369: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
89370: LD_EXP 134
89374: IFFALSE 89405
89376: PUSH
89377: LD_EXP 136
89381: PPUSH
89382: CALL 28367 0 1
89386: IFTRUE 89404
89388: PUSH
89389: LD_INT 34
89391: PUSH
89392: LD_INT 81
89394: PUSH
89395: EMPTY
89396: LIST
89397: LIST
89398: PPUSH
89399: CALL_OW 69
89403: OR
89404: AND
89405: IFFALSE 89925
89407: GO 89409
89409: DISABLE
89410: LD_INT 0
89412: PPUSH
89413: PPUSH
89414: PPUSH
89415: PPUSH
// begin enable ;
89416: ENABLE
// for i := minerMinesList downto 1 do
89417: LD_ADDR_VAR 0 1
89421: PUSH
89422: DOUBLE
89423: LD_EXP 136
89427: INC
89428: ST_TO_ADDR
89429: LD_INT 1
89431: PUSH
89432: FOR_DOWNTO
89433: IFFALSE 89923
// begin side := GetSide ( minersList [ i ] ) ;
89435: LD_ADDR_VAR 0 3
89439: PUSH
89440: LD_EXP 135
89444: PUSH
89445: LD_VAR 0 1
89449: ARRAY
89450: PPUSH
89451: CALL_OW 255
89455: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
89456: LD_EXP 135
89460: PUSH
89461: LD_VAR 0 1
89465: ARRAY
89466: PPUSH
89467: CALL_OW 300
89471: IFFALSE 89492
89473: PUSH
89474: LD_VAR 0 3
89478: PUSH
89479: LD_OWVAR 2
89483: PUSH
89484: LD_INT 9
89486: PUSH
89487: EMPTY
89488: LIST
89489: LIST
89490: IN
89491: AND
89492: IFFALSE 89525
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
89494: LD_EXP 135
89498: PUSH
89499: LD_VAR 0 1
89503: ARRAY
89504: PPUSH
89505: LD_EXP 136
89509: PUSH
89510: LD_VAR 0 1
89514: ARRAY
89515: PPUSH
89516: CALL 28367 0 1
89520: PPUSH
89521: CALL_OW 505
// if not minerMinesList [ i ] then
89525: LD_EXP 136
89529: PUSH
89530: LD_VAR 0 1
89534: ARRAY
89535: NOT
89536: IFFALSE 89540
// continue ;
89538: GO 89432
// for j := minerMinesList [ i ] downto 1 do
89540: LD_ADDR_VAR 0 2
89544: PUSH
89545: DOUBLE
89546: LD_EXP 136
89550: PUSH
89551: LD_VAR 0 1
89555: ARRAY
89556: INC
89557: ST_TO_ADDR
89558: LD_INT 1
89560: PUSH
89561: FOR_DOWNTO
89562: IFFALSE 89919
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
89564: LD_EXP 135
89568: PUSH
89569: LD_VAR 0 1
89573: ARRAY
89574: PPUSH
89575: CALL_OW 301
89579: IFTRUE 89599
89581: PUSH
89582: LD_EXP 135
89586: PUSH
89587: LD_VAR 0 1
89591: ARRAY
89592: PPUSH
89593: CALL_OW 305
89597: NOT
89598: OR
89599: IFFALSE 89690
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
89601: LD_EXP 136
89605: PUSH
89606: LD_VAR 0 1
89610: ARRAY
89611: PUSH
89612: LD_VAR 0 2
89616: ARRAY
89617: PUSH
89618: LD_INT 1
89620: ARRAY
89621: PPUSH
89622: LD_EXP 136
89626: PUSH
89627: LD_VAR 0 1
89631: ARRAY
89632: PUSH
89633: LD_VAR 0 2
89637: ARRAY
89638: PUSH
89639: LD_INT 2
89641: ARRAY
89642: PPUSH
89643: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
89647: LD_ADDR_EXP 136
89651: PUSH
89652: LD_EXP 136
89656: PPUSH
89657: LD_VAR 0 1
89661: PPUSH
89662: LD_EXP 136
89666: PUSH
89667: LD_VAR 0 1
89671: ARRAY
89672: PPUSH
89673: LD_VAR 0 2
89677: PPUSH
89678: CALL_OW 3
89682: PPUSH
89683: CALL_OW 1
89687: ST_TO_ADDR
// continue ;
89688: GO 89561
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
89690: LD_ADDR_VAR 0 4
89694: PUSH
89695: LD_EXP 136
89699: PUSH
89700: LD_VAR 0 1
89704: ARRAY
89705: PUSH
89706: LD_VAR 0 2
89710: ARRAY
89711: PUSH
89712: LD_INT 1
89714: ARRAY
89715: PPUSH
89716: LD_EXP 136
89720: PUSH
89721: LD_VAR 0 1
89725: ARRAY
89726: PUSH
89727: LD_VAR 0 2
89731: ARRAY
89732: PUSH
89733: LD_INT 2
89735: ARRAY
89736: PPUSH
89737: CALL_OW 428
89741: ST_TO_ADDR
// if not tmp then
89742: LD_VAR 0 4
89746: NOT
89747: IFFALSE 89751
// continue ;
89749: GO 89561
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
89751: LD_VAR 0 4
89755: PUSH
89756: LD_INT 81
89758: PUSH
89759: LD_VAR 0 3
89763: PUSH
89764: EMPTY
89765: LIST
89766: LIST
89767: PPUSH
89768: CALL_OW 69
89772: IN
89773: IFFALSE 89823
89775: PUSH
89776: LD_EXP 136
89780: PUSH
89781: LD_VAR 0 1
89785: ARRAY
89786: PUSH
89787: LD_VAR 0 2
89791: ARRAY
89792: PUSH
89793: LD_INT 1
89795: ARRAY
89796: PPUSH
89797: LD_EXP 136
89801: PUSH
89802: LD_VAR 0 1
89806: ARRAY
89807: PUSH
89808: LD_VAR 0 2
89812: ARRAY
89813: PUSH
89814: LD_INT 2
89816: ARRAY
89817: PPUSH
89818: CALL_OW 458
89822: AND
89823: IFFALSE 89917
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
89825: LD_EXP 136
89829: PUSH
89830: LD_VAR 0 1
89834: ARRAY
89835: PUSH
89836: LD_VAR 0 2
89840: ARRAY
89841: PUSH
89842: LD_INT 1
89844: ARRAY
89845: PPUSH
89846: LD_EXP 136
89850: PUSH
89851: LD_VAR 0 1
89855: ARRAY
89856: PUSH
89857: LD_VAR 0 2
89861: ARRAY
89862: PUSH
89863: LD_INT 2
89865: ARRAY
89866: PPUSH
89867: LD_VAR 0 3
89871: PPUSH
89872: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
89876: LD_ADDR_EXP 136
89880: PUSH
89881: LD_EXP 136
89885: PPUSH
89886: LD_VAR 0 1
89890: PPUSH
89891: LD_EXP 136
89895: PUSH
89896: LD_VAR 0 1
89900: ARRAY
89901: PPUSH
89902: LD_VAR 0 2
89906: PPUSH
89907: CALL_OW 3
89911: PPUSH
89912: CALL_OW 1
89916: ST_TO_ADDR
// end ; end ;
89917: GO 89561
89919: POP
89920: POP
// end ;
89921: GO 89432
89923: POP
89924: POP
// end ;
89925: PPOPN 4
89927: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
89928: LD_INT 0
89930: PPUSH
89931: PPUSH
89932: PPUSH
89933: PPUSH
// result := false ;
89934: LD_ADDR_VAR 0 4
89938: PUSH
89939: LD_INT 0
89941: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
89942: LD_VAR 0 1
89946: PPUSH
89947: CALL_OW 264
89951: PUSH
89952: LD_INT 81
89954: EQUAL
89955: NOT
89956: IFFALSE 89960
// exit ;
89958: GO 90330
// side := GetSide ( unit ) ;
89960: LD_ADDR_VAR 0 6
89964: PUSH
89965: LD_VAR 0 1
89969: PPUSH
89970: CALL_OW 255
89974: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
89975: LD_ADDR_VAR 0 5
89979: PUSH
89980: LD_EXP 135
89984: PPUSH
89985: LD_VAR 0 1
89989: PPUSH
89990: CALL 31068 0 2
89994: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
89995: LD_EXP 136
89999: PUSH
90000: LD_VAR 0 5
90004: ARRAY
90005: PUSH
90006: LD_EXP 137
90010: GREATEREQUAL
90011: IFFALSE 90015
// exit ;
90013: GO 90330
// ComMoveXY ( unit , x , y ) ;
90015: LD_VAR 0 1
90019: PPUSH
90020: LD_VAR 0 2
90024: PPUSH
90025: LD_VAR 0 3
90029: PPUSH
90030: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
90034: LD_INT 35
90036: PPUSH
90037: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
90041: LD_VAR 0 1
90045: PPUSH
90046: LD_VAR 0 2
90050: PPUSH
90051: LD_VAR 0 3
90055: PPUSH
90056: CALL 63124 0 3
90060: NOT
90061: IFFALSE 90074
90063: PUSH
90064: LD_VAR 0 1
90068: PPUSH
90069: CALL_OW 314
90073: AND
90074: IFFALSE 90078
// exit ;
90076: GO 90330
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
90078: LD_VAR 0 2
90082: PPUSH
90083: LD_VAR 0 3
90087: PPUSH
90088: CALL_OW 428
90092: PUSH
90093: LD_VAR 0 1
90097: EQUAL
90098: IFFALSE 90112
90100: PUSH
90101: LD_VAR 0 1
90105: PPUSH
90106: CALL_OW 314
90110: NOT
90111: AND
90112: IFFALSE 90034
// if MineAtPos ( x , y ) then
90114: LD_VAR 0 2
90118: PPUSH
90119: LD_VAR 0 3
90123: PPUSH
90124: CALL_OW 458
90128: IFFALSE 90132
// exit ;
90130: GO 90330
// if your_side = side then
90132: LD_OWVAR 2
90136: PUSH
90137: LD_VAR 0 6
90141: EQUAL
90142: IFFALSE 90161
// PlaySoundXY ( x , y , PlantMine ) ;
90144: LD_VAR 0 2
90148: PPUSH
90149: LD_VAR 0 3
90153: PPUSH
90154: LD_STRING PlantMine
90156: PPUSH
90157: CALL_OW 366
// repeat wait ( 1 ) ;
90161: LD_INT 1
90163: PPUSH
90164: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
90168: LD_VAR 0 2
90172: PPUSH
90173: LD_VAR 0 3
90177: PPUSH
90178: LD_VAR 0 6
90182: PPUSH
90183: LD_INT 0
90185: PPUSH
90186: CALL_OW 454
90190: IFFALSE 90161
// if MineAtPos ( x , y ) then
90192: LD_VAR 0 2
90196: PPUSH
90197: LD_VAR 0 3
90201: PPUSH
90202: CALL_OW 458
90206: IFFALSE 90322
// begin for i in minerMinesList [ index ] do
90208: LD_ADDR_VAR 0 7
90212: PUSH
90213: LD_EXP 136
90217: PUSH
90218: LD_VAR 0 5
90222: ARRAY
90223: PUSH
90224: FOR_IN
90225: IFFALSE 90267
// if i [ 1 ] = x and i [ 2 ] = y then
90227: LD_VAR 0 7
90231: PUSH
90232: LD_INT 1
90234: ARRAY
90235: PUSH
90236: LD_VAR 0 2
90240: EQUAL
90241: IFFALSE 90259
90243: PUSH
90244: LD_VAR 0 7
90248: PUSH
90249: LD_INT 2
90251: ARRAY
90252: PUSH
90253: LD_VAR 0 3
90257: EQUAL
90258: AND
90259: IFFALSE 90265
// exit ;
90261: POP
90262: POP
90263: GO 90330
90265: GO 90224
90267: POP
90268: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
90269: LD_ADDR_EXP 136
90273: PUSH
90274: LD_EXP 136
90278: PPUSH
90279: LD_VAR 0 5
90283: PUSH
90284: LD_EXP 136
90288: PUSH
90289: LD_VAR 0 5
90293: ARRAY
90294: PUSH
90295: LD_INT 1
90297: PLUS
90298: PUSH
90299: EMPTY
90300: LIST
90301: LIST
90302: PPUSH
90303: LD_VAR 0 2
90307: PUSH
90308: LD_VAR 0 3
90312: PUSH
90313: EMPTY
90314: LIST
90315: LIST
90316: PPUSH
90317: CALL 31285 0 3
90321: ST_TO_ADDR
// end ; result := true ;
90322: LD_ADDR_VAR 0 4
90326: PUSH
90327: LD_INT 1
90329: ST_TO_ADDR
// end ;
90330: LD_VAR 0 4
90334: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
90335: LD_INT 0
90337: PPUSH
90338: PPUSH
90339: PPUSH
// if not unit in minersList then
90340: LD_VAR 0 1
90344: PUSH
90345: LD_EXP 135
90349: IN
90350: NOT
90351: IFFALSE 90355
// exit ;
90353: GO 90562
// index := GetElementIndex ( minersList , unit ) ;
90355: LD_ADDR_VAR 0 6
90359: PUSH
90360: LD_EXP 135
90364: PPUSH
90365: LD_VAR 0 1
90369: PPUSH
90370: CALL 31068 0 2
90374: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
90375: LD_ADDR_VAR 0 5
90379: PUSH
90380: DOUBLE
90381: LD_EXP 136
90385: PUSH
90386: LD_VAR 0 6
90390: ARRAY
90391: INC
90392: ST_TO_ADDR
90393: LD_INT 1
90395: PUSH
90396: FOR_DOWNTO
90397: IFFALSE 90560
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
90399: LD_EXP 136
90403: PUSH
90404: LD_VAR 0 6
90408: ARRAY
90409: PUSH
90410: LD_VAR 0 5
90414: ARRAY
90415: PUSH
90416: LD_INT 1
90418: ARRAY
90419: PPUSH
90420: LD_EXP 136
90424: PUSH
90425: LD_VAR 0 6
90429: ARRAY
90430: PUSH
90431: LD_VAR 0 5
90435: ARRAY
90436: PUSH
90437: LD_INT 2
90439: ARRAY
90440: PPUSH
90441: LD_VAR 0 2
90445: PPUSH
90446: LD_VAR 0 3
90450: PPUSH
90451: CALL_OW 298
90455: PUSH
90456: LD_INT 6
90458: LESS
90459: IFFALSE 90558
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
90461: LD_EXP 136
90465: PUSH
90466: LD_VAR 0 6
90470: ARRAY
90471: PUSH
90472: LD_VAR 0 5
90476: ARRAY
90477: PUSH
90478: LD_INT 1
90480: ARRAY
90481: PPUSH
90482: LD_EXP 136
90486: PUSH
90487: LD_VAR 0 6
90491: ARRAY
90492: PUSH
90493: LD_VAR 0 5
90497: ARRAY
90498: PUSH
90499: LD_INT 2
90501: ARRAY
90502: PPUSH
90503: LD_VAR 0 1
90507: PPUSH
90508: CALL_OW 255
90512: PPUSH
90513: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
90517: LD_ADDR_EXP 136
90521: PUSH
90522: LD_EXP 136
90526: PPUSH
90527: LD_VAR 0 6
90531: PPUSH
90532: LD_EXP 136
90536: PUSH
90537: LD_VAR 0 6
90541: ARRAY
90542: PPUSH
90543: LD_VAR 0 5
90547: PPUSH
90548: CALL_OW 3
90552: PPUSH
90553: CALL_OW 1
90557: ST_TO_ADDR
// end ; end ;
90558: GO 90396
90560: POP
90561: POP
// end ;
90562: LD_VAR 0 4
90566: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
90567: LD_INT 0
90569: PPUSH
90570: PPUSH
90571: PPUSH
90572: PPUSH
90573: PPUSH
90574: PPUSH
90575: PPUSH
90576: PPUSH
90577: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
90578: LD_VAR 0 1
90582: PPUSH
90583: CALL_OW 264
90587: PUSH
90588: LD_INT 81
90590: EQUAL
90591: NOT
90592: IFTRUE 90607
90594: PUSH
90595: LD_VAR 0 1
90599: PUSH
90600: LD_EXP 135
90604: IN
90605: NOT
90606: OR
90607: IFFALSE 90611
// exit ;
90609: GO 90937
// index := GetElementIndex ( minersList , unit ) ;
90611: LD_ADDR_VAR 0 6
90615: PUSH
90616: LD_EXP 135
90620: PPUSH
90621: LD_VAR 0 1
90625: PPUSH
90626: CALL 31068 0 2
90630: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
90631: LD_ADDR_VAR 0 8
90635: PUSH
90636: LD_EXP 137
90640: PUSH
90641: LD_EXP 136
90645: PUSH
90646: LD_VAR 0 6
90650: ARRAY
90651: MINUS
90652: ST_TO_ADDR
// if not minesFreeAmount then
90653: LD_VAR 0 8
90657: NOT
90658: IFFALSE 90662
// exit ;
90660: GO 90937
// tmp := [ ] ;
90662: LD_ADDR_VAR 0 7
90666: PUSH
90667: EMPTY
90668: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
90669: LD_ADDR_VAR 0 5
90673: PUSH
90674: DOUBLE
90675: LD_INT 1
90677: DEC
90678: ST_TO_ADDR
90679: LD_VAR 0 8
90683: PUSH
90684: FOR_TO
90685: IFFALSE 90884
// begin _d := rand ( 0 , 5 ) ;
90687: LD_ADDR_VAR 0 11
90691: PUSH
90692: LD_INT 0
90694: PPUSH
90695: LD_INT 5
90697: PPUSH
90698: CALL_OW 12
90702: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
90703: LD_ADDR_VAR 0 12
90707: PUSH
90708: LD_INT 2
90710: PPUSH
90711: LD_INT 6
90713: PPUSH
90714: CALL_OW 12
90718: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
90719: LD_ADDR_VAR 0 9
90723: PUSH
90724: LD_VAR 0 2
90728: PPUSH
90729: LD_VAR 0 11
90733: PPUSH
90734: LD_VAR 0 12
90738: PPUSH
90739: CALL_OW 272
90743: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
90744: LD_ADDR_VAR 0 10
90748: PUSH
90749: LD_VAR 0 3
90753: PPUSH
90754: LD_VAR 0 11
90758: PPUSH
90759: LD_VAR 0 12
90763: PPUSH
90764: CALL_OW 273
90768: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
90769: LD_VAR 0 9
90773: PPUSH
90774: LD_VAR 0 10
90778: PPUSH
90779: CALL_OW 488
90783: IFFALSE 90807
90785: PUSH
90786: LD_VAR 0 9
90790: PUSH
90791: LD_VAR 0 10
90795: PUSH
90796: EMPTY
90797: LIST
90798: LIST
90799: PUSH
90800: LD_VAR 0 7
90804: IN
90805: NOT
90806: AND
90807: IFFALSE 90826
90809: PUSH
90810: LD_VAR 0 9
90814: PPUSH
90815: LD_VAR 0 10
90819: PPUSH
90820: CALL_OW 458
90824: NOT
90825: AND
90826: IFFALSE 90868
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
90828: LD_ADDR_VAR 0 7
90832: PUSH
90833: LD_VAR 0 7
90837: PPUSH
90838: LD_VAR 0 7
90842: PUSH
90843: LD_INT 1
90845: PLUS
90846: PPUSH
90847: LD_VAR 0 9
90851: PUSH
90852: LD_VAR 0 10
90856: PUSH
90857: EMPTY
90858: LIST
90859: LIST
90860: PPUSH
90861: CALL_OW 1
90865: ST_TO_ADDR
90866: GO 90882
// i := i - 1 ;
90868: LD_ADDR_VAR 0 5
90872: PUSH
90873: LD_VAR 0 5
90877: PUSH
90878: LD_INT 1
90880: MINUS
90881: ST_TO_ADDR
// end ;
90882: GO 90684
90884: POP
90885: POP
// for i in tmp do
90886: LD_ADDR_VAR 0 5
90890: PUSH
90891: LD_VAR 0 7
90895: PUSH
90896: FOR_IN
90897: IFFALSE 90935
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
90899: LD_VAR 0 1
90903: PPUSH
90904: LD_VAR 0 5
90908: PUSH
90909: LD_INT 1
90911: ARRAY
90912: PPUSH
90913: LD_VAR 0 5
90917: PUSH
90918: LD_INT 2
90920: ARRAY
90921: PPUSH
90922: CALL 89928 0 3
90926: NOT
90927: IFFALSE 90933
// exit ;
90929: POP
90930: POP
90931: GO 90937
90933: GO 90896
90935: POP
90936: POP
// end ;
90937: LD_VAR 0 4
90941: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
90942: LD_INT 0
90944: PPUSH
90945: PPUSH
90946: PPUSH
90947: PPUSH
90948: PPUSH
90949: PPUSH
90950: PPUSH
90951: PPUSH
90952: PPUSH
// if GetClass ( unit ) <> class_sniper then
90953: LD_VAR 0 1
90957: PPUSH
90958: CALL_OW 257
90962: PUSH
90963: LD_INT 5
90965: NONEQUAL
90966: IFFALSE 90970
// exit ;
90968: GO 91440
// dist := 8 ;
90970: LD_ADDR_VAR 0 5
90974: PUSH
90975: LD_INT 8
90977: ST_TO_ADDR
// viewRange := 12 ;
90978: LD_ADDR_VAR 0 8
90982: PUSH
90983: LD_INT 12
90985: ST_TO_ADDR
// side := GetSide ( unit ) ;
90986: LD_ADDR_VAR 0 6
90990: PUSH
90991: LD_VAR 0 1
90995: PPUSH
90996: CALL_OW 255
91000: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
91001: LD_INT 61
91003: PPUSH
91004: LD_VAR 0 6
91008: PPUSH
91009: CALL_OW 321
91013: PUSH
91014: LD_INT 2
91016: EQUAL
91017: IFFALSE 91027
// viewRange := 16 ;
91019: LD_ADDR_VAR 0 8
91023: PUSH
91024: LD_INT 16
91026: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
91027: LD_VAR 0 1
91031: PPUSH
91032: LD_VAR 0 2
91036: PPUSH
91037: LD_VAR 0 3
91041: PPUSH
91042: CALL_OW 297
91046: PUSH
91047: LD_VAR 0 5
91051: GREATER
91052: IFFALSE 91131
// begin ComMoveXY ( unit , x , y ) ;
91054: LD_VAR 0 1
91058: PPUSH
91059: LD_VAR 0 2
91063: PPUSH
91064: LD_VAR 0 3
91068: PPUSH
91069: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
91073: LD_INT 35
91075: PPUSH
91076: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
91080: LD_VAR 0 1
91084: PPUSH
91085: LD_VAR 0 2
91089: PPUSH
91090: LD_VAR 0 3
91094: PPUSH
91095: CALL 63124 0 3
91099: NOT
91100: IFFALSE 91104
// exit ;
91102: GO 91440
// until GetDistUnitXY ( unit , x , y ) < dist ;
91104: LD_VAR 0 1
91108: PPUSH
91109: LD_VAR 0 2
91113: PPUSH
91114: LD_VAR 0 3
91118: PPUSH
91119: CALL_OW 297
91123: PUSH
91124: LD_VAR 0 5
91128: LESS
91129: IFFALSE 91073
// end ; ComTurnXY ( unit , x , y ) ;
91131: LD_VAR 0 1
91135: PPUSH
91136: LD_VAR 0 2
91140: PPUSH
91141: LD_VAR 0 3
91145: PPUSH
91146: CALL_OW 118
// repeat if Multiplayer then
91150: LD_OWVAR 4
91154: IFFALSE 91165
// wait ( 35 ) else
91156: LD_INT 35
91158: PPUSH
91159: CALL_OW 67
91163: GO 91172
// wait ( 5 ) ;
91165: LD_INT 5
91167: PPUSH
91168: CALL_OW 67
// _d := GetDir ( unit ) ;
91172: LD_ADDR_VAR 0 11
91176: PUSH
91177: LD_VAR 0 1
91181: PPUSH
91182: CALL_OW 254
91186: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
91187: LD_ADDR_VAR 0 7
91191: PUSH
91192: LD_VAR 0 1
91196: PPUSH
91197: CALL_OW 250
91201: PPUSH
91202: LD_VAR 0 1
91206: PPUSH
91207: CALL_OW 251
91211: PPUSH
91212: LD_VAR 0 2
91216: PPUSH
91217: LD_VAR 0 3
91221: PPUSH
91222: CALL 65760 0 4
91226: ST_TO_ADDR
// until dir = _d ;
91227: LD_VAR 0 7
91231: PUSH
91232: LD_VAR 0 11
91236: EQUAL
91237: IFFALSE 91150
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
91239: LD_ADDR_VAR 0 9
91243: PUSH
91244: LD_VAR 0 1
91248: PPUSH
91249: CALL_OW 250
91253: PPUSH
91254: LD_VAR 0 7
91258: PPUSH
91259: LD_VAR 0 5
91263: PPUSH
91264: CALL_OW 272
91268: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
91269: LD_ADDR_VAR 0 10
91273: PUSH
91274: LD_VAR 0 1
91278: PPUSH
91279: CALL_OW 251
91283: PPUSH
91284: LD_VAR 0 7
91288: PPUSH
91289: LD_VAR 0 5
91293: PPUSH
91294: CALL_OW 273
91298: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
91299: LD_VAR 0 9
91303: PPUSH
91304: LD_VAR 0 10
91308: PPUSH
91309: CALL_OW 488
91313: NOT
91314: IFFALSE 91318
// exit ;
91316: GO 91440
// ComAnimCustom ( unit , 1 ) ;
91318: LD_VAR 0 1
91322: PPUSH
91323: LD_INT 1
91325: PPUSH
91326: CALL_OW 592
// p := 0 ;
91330: LD_ADDR_VAR 0 12
91334: PUSH
91335: LD_INT 0
91337: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
91338: LD_VAR 0 9
91342: PPUSH
91343: LD_VAR 0 10
91347: PPUSH
91348: LD_VAR 0 6
91352: PPUSH
91353: LD_VAR 0 8
91357: PPUSH
91358: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
91362: LD_INT 35
91364: PPUSH
91365: CALL_OW 67
// p := Inc ( p ) ;
91369: LD_ADDR_VAR 0 12
91373: PUSH
91374: LD_VAR 0 12
91378: PPUSH
91379: CALL 65716 0 1
91383: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
91384: LD_VAR 0 12
91388: PUSH
91389: LD_INT 3
91391: EQUAL
91392: IFTRUE 91406
91394: PUSH
91395: LD_VAR 0 1
91399: PPUSH
91400: CALL_OW 302
91404: NOT
91405: OR
91406: IFTRUE 91419
91408: PUSH
91409: LD_VAR 0 1
91413: PPUSH
91414: CALL_OW 301
91418: OR
91419: IFFALSE 91362
// RemoveSeeing ( _x , _y , side ) ;
91421: LD_VAR 0 9
91425: PPUSH
91426: LD_VAR 0 10
91430: PPUSH
91431: LD_VAR 0 6
91435: PPUSH
91436: CALL_OW 331
// end ;
91440: LD_VAR 0 4
91444: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
91445: LD_INT 0
91447: PPUSH
91448: PPUSH
91449: PPUSH
91450: PPUSH
91451: PPUSH
91452: PPUSH
91453: PPUSH
91454: PPUSH
91455: PPUSH
91456: PPUSH
91457: PPUSH
// if not unit then
91458: LD_VAR 0 1
91462: NOT
91463: IFFALSE 91467
// exit ;
91465: GO 91738
// side := GetSide ( unit ) ;
91467: LD_ADDR_VAR 0 3
91471: PUSH
91472: LD_VAR 0 1
91476: PPUSH
91477: CALL_OW 255
91481: ST_TO_ADDR
// x := GetX ( unit ) ;
91482: LD_ADDR_VAR 0 5
91486: PUSH
91487: LD_VAR 0 1
91491: PPUSH
91492: CALL_OW 250
91496: ST_TO_ADDR
// y := GetY ( unit ) ;
91497: LD_ADDR_VAR 0 6
91501: PUSH
91502: LD_VAR 0 1
91506: PPUSH
91507: CALL_OW 251
91511: ST_TO_ADDR
// r := 8 ;
91512: LD_ADDR_VAR 0 4
91516: PUSH
91517: LD_INT 8
91519: ST_TO_ADDR
// if x - r < 0 then
91520: LD_VAR 0 5
91524: PUSH
91525: LD_VAR 0 4
91529: MINUS
91530: PUSH
91531: LD_INT 0
91533: LESS
91534: IFFALSE 91546
// min_x := 0 else
91536: LD_ADDR_VAR 0 7
91540: PUSH
91541: LD_INT 0
91543: ST_TO_ADDR
91544: GO 91562
// min_x := x - r ;
91546: LD_ADDR_VAR 0 7
91550: PUSH
91551: LD_VAR 0 5
91555: PUSH
91556: LD_VAR 0 4
91560: MINUS
91561: ST_TO_ADDR
// if y - r < 0 then
91562: LD_VAR 0 6
91566: PUSH
91567: LD_VAR 0 4
91571: MINUS
91572: PUSH
91573: LD_INT 0
91575: LESS
91576: IFFALSE 91588
// min_y := 0 else
91578: LD_ADDR_VAR 0 8
91582: PUSH
91583: LD_INT 0
91585: ST_TO_ADDR
91586: GO 91604
// min_y := y - r ;
91588: LD_ADDR_VAR 0 8
91592: PUSH
91593: LD_VAR 0 6
91597: PUSH
91598: LD_VAR 0 4
91602: MINUS
91603: ST_TO_ADDR
// max_x := x + r ;
91604: LD_ADDR_VAR 0 9
91608: PUSH
91609: LD_VAR 0 5
91613: PUSH
91614: LD_VAR 0 4
91618: PLUS
91619: ST_TO_ADDR
// max_y := y + r ;
91620: LD_ADDR_VAR 0 10
91624: PUSH
91625: LD_VAR 0 6
91629: PUSH
91630: LD_VAR 0 4
91634: PLUS
91635: ST_TO_ADDR
// for _x = min_x to max_x do
91636: LD_ADDR_VAR 0 11
91640: PUSH
91641: DOUBLE
91642: LD_VAR 0 7
91646: DEC
91647: ST_TO_ADDR
91648: LD_VAR 0 9
91652: PUSH
91653: FOR_TO
91654: IFFALSE 91736
// for _y = min_y to max_y do
91656: LD_ADDR_VAR 0 12
91660: PUSH
91661: DOUBLE
91662: LD_VAR 0 8
91666: DEC
91667: ST_TO_ADDR
91668: LD_VAR 0 10
91672: PUSH
91673: FOR_TO
91674: IFFALSE 91732
// begin if not ValidHex ( _x , _y ) then
91676: LD_VAR 0 11
91680: PPUSH
91681: LD_VAR 0 12
91685: PPUSH
91686: CALL_OW 488
91690: NOT
91691: IFFALSE 91695
// continue ;
91693: GO 91673
// if MineAtPos ( _x , _y ) then
91695: LD_VAR 0 11
91699: PPUSH
91700: LD_VAR 0 12
91704: PPUSH
91705: CALL_OW 458
91709: IFFALSE 91730
// ViewMineAtPos ( _x , _y , side ) ;
91711: LD_VAR 0 11
91715: PPUSH
91716: LD_VAR 0 12
91720: PPUSH
91721: LD_VAR 0 3
91725: PPUSH
91726: CALL_OW 457
// end ;
91730: GO 91673
91732: POP
91733: POP
91734: GO 91653
91736: POP
91737: POP
// end ;
91738: LD_VAR 0 2
91742: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
91743: LD_INT 0
91745: PPUSH
91746: PPUSH
91747: PPUSH
91748: PPUSH
91749: PPUSH
91750: PPUSH
91751: PPUSH
// if not units then
91752: LD_VAR 0 1
91756: NOT
91757: IFFALSE 91761
// exit ;
91759: GO 92225
// scaners := [ ] ;
91761: LD_ADDR_VAR 0 6
91765: PUSH
91766: EMPTY
91767: ST_TO_ADDR
// for i in units do
91768: LD_ADDR_VAR 0 3
91772: PUSH
91773: LD_VAR 0 1
91777: PUSH
91778: FOR_IN
91779: IFFALSE 91936
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
91781: LD_VAR 0 3
91785: PPUSH
91786: CALL_OW 264
91790: PUSH
91791: LD_INT 11
91793: NONEQUAL
91794: IFTRUE 91808
91796: PUSH
91797: LD_VAR 0 3
91801: PPUSH
91802: CALL_OW 302
91806: NOT
91807: OR
91808: IFTRUE 91825
91810: PUSH
91811: LD_VAR 0 3
91815: PPUSH
91816: CALL_OW 110
91820: PUSH
91821: LD_INT 502
91823: EQUAL
91824: OR
91825: IFFALSE 91829
// continue ;
91827: GO 91778
// ComStop ( i ) ;
91829: LD_VAR 0 3
91833: PPUSH
91834: CALL_OW 141
// x := GetX ( i ) ;
91838: LD_ADDR_VAR 0 4
91842: PUSH
91843: LD_VAR 0 3
91847: PPUSH
91848: CALL_OW 250
91852: ST_TO_ADDR
// y := GetY ( i ) ;
91853: LD_ADDR_VAR 0 5
91857: PUSH
91858: LD_VAR 0 3
91862: PPUSH
91863: CALL_OW 251
91867: ST_TO_ADDR
// if GetSide ( i ) = your_side then
91868: LD_VAR 0 3
91872: PPUSH
91873: CALL_OW 255
91877: PUSH
91878: LD_OWVAR 2
91882: EQUAL
91883: IFFALSE 91902
// PlaySoundXY ( x , y , mineDetector ) ;
91885: LD_VAR 0 4
91889: PPUSH
91890: LD_VAR 0 5
91894: PPUSH
91895: LD_STRING mineDetector
91897: PPUSH
91898: CALL_OW 366
// scaners := Join ( scaners , i ) ;
91902: LD_ADDR_VAR 0 6
91906: PUSH
91907: LD_VAR 0 6
91911: PPUSH
91912: LD_VAR 0 3
91916: PPUSH
91917: CALL 64343 0 2
91921: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
91922: LD_VAR 0 3
91926: PPUSH
91927: LD_INT 502
91929: PPUSH
91930: CALL_OW 109
// end ;
91934: GO 91778
91936: POP
91937: POP
// if not scaners then
91938: LD_VAR 0 6
91942: NOT
91943: IFFALSE 91947
// exit ;
91945: GO 92225
// wait ( 3 ) ;
91947: LD_INT 3
91949: PPUSH
91950: CALL_OW 67
// timer := 6 ;
91954: LD_ADDR_VAR 0 7
91958: PUSH
91959: LD_INT 6
91961: ST_TO_ADDR
// repeat for i in scaners do
91962: LD_ADDR_VAR 0 3
91966: PUSH
91967: LD_VAR 0 6
91971: PUSH
91972: FOR_IN
91973: IFFALSE 92123
// begin side := GetSide ( i ) ;
91975: LD_ADDR_VAR 0 8
91979: PUSH
91980: LD_VAR 0 3
91984: PPUSH
91985: CALL_OW 255
91989: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
91990: LD_VAR 0 3
91994: PPUSH
91995: CALL_OW 302
91999: NOT
92000: IFTRUE 92013
92002: PUSH
92003: LD_VAR 0 3
92007: PPUSH
92008: CALL_OW 314
92012: OR
92013: IFTRUE 92044
92015: PUSH
92016: LD_VAR 0 3
92020: PPUSH
92021: CALL_OW 263
92025: PUSH
92026: LD_INT 1
92028: EQUAL
92029: IFFALSE 92043
92031: PUSH
92032: LD_VAR 0 3
92036: PPUSH
92037: CALL_OW 311
92041: NOT
92042: AND
92043: OR
92044: IFFALSE 92088
// begin SetUnitDisplayNumber ( i , 0 ) ;
92046: LD_VAR 0 3
92050: PPUSH
92051: LD_INT 0
92053: PPUSH
92054: CALL_OW 505
// SetTag ( i , 0 ) ;
92058: LD_VAR 0 3
92062: PPUSH
92063: LD_INT 0
92065: PPUSH
92066: CALL_OW 109
// scaners := scaners diff i ;
92070: LD_ADDR_VAR 0 6
92074: PUSH
92075: LD_VAR 0 6
92079: PUSH
92080: LD_VAR 0 3
92084: DIFF
92085: ST_TO_ADDR
// continue ;
92086: GO 91972
// end ; if side in [ your_side , 9 ] then
92088: LD_VAR 0 8
92092: PUSH
92093: LD_OWVAR 2
92097: PUSH
92098: LD_INT 9
92100: PUSH
92101: EMPTY
92102: LIST
92103: LIST
92104: IN
92105: IFFALSE 92121
// SetUnitDisplayNumber ( i , timer ) ;
92107: LD_VAR 0 3
92111: PPUSH
92112: LD_VAR 0 7
92116: PPUSH
92117: CALL_OW 505
// end ;
92121: GO 91972
92123: POP
92124: POP
// if not scaners then
92125: LD_VAR 0 6
92129: NOT
92130: IFFALSE 92134
// exit ;
92132: GO 92225
// timer := Dec ( timer ) ;
92134: LD_ADDR_VAR 0 7
92138: PUSH
92139: LD_VAR 0 7
92143: PPUSH
92144: CALL 65738 0 1
92148: ST_TO_ADDR
// wait ( 0 0$1 ) ;
92149: LD_INT 35
92151: PPUSH
92152: CALL_OW 67
// until timer = 0 ;
92156: LD_VAR 0 7
92160: PUSH
92161: LD_INT 0
92163: EQUAL
92164: IFFALSE 91962
// if not scaners then
92166: LD_VAR 0 6
92170: NOT
92171: IFFALSE 92175
// exit ;
92173: GO 92225
// for i in scaners do
92175: LD_ADDR_VAR 0 3
92179: PUSH
92180: LD_VAR 0 6
92184: PUSH
92185: FOR_IN
92186: IFFALSE 92223
// begin SetUnitDisplayNumber ( i , 0 ) ;
92188: LD_VAR 0 3
92192: PPUSH
92193: LD_INT 0
92195: PPUSH
92196: CALL_OW 505
// SetTag ( i , 0 ) ;
92200: LD_VAR 0 3
92204: PPUSH
92205: LD_INT 0
92207: PPUSH
92208: CALL_OW 109
// RevealDetectorMine ( i ) ;
92212: LD_VAR 0 3
92216: PPUSH
92217: CALL 91445 0 1
// end ;
92221: GO 92185
92223: POP
92224: POP
// end ;
92225: LD_VAR 0 2
92229: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
92230: LD_INT 0
92232: PPUSH
// if p1 = mine_detector_mode then
92233: LD_VAR 0 2
92237: PUSH
92238: LD_INT 103
92240: EQUAL
92241: IFFALSE 92252
// DetectMine ( units ) ;
92243: LD_VAR 0 1
92247: PPUSH
92248: CALL 91743 0 1
// end ; end_of_file
92252: LD_VAR 0 7
92256: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
92257: LD_VAR 0 1
92261: PUSH
92262: LD_INT 200
92264: DOUBLE
92265: GREATEREQUAL
92266: IFFALSE 92274
92268: LD_INT 299
92270: DOUBLE
92271: LESSEQUAL
92272: IFTRUE 92276
92274: GO 92308
92276: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
92277: LD_VAR 0 1
92281: PPUSH
92282: LD_VAR 0 2
92286: PPUSH
92287: LD_VAR 0 3
92291: PPUSH
92292: LD_VAR 0 4
92296: PPUSH
92297: LD_VAR 0 5
92301: PPUSH
92302: CALL 86533 0 5
92306: GO 92385
92308: LD_INT 300
92310: DOUBLE
92311: GREATEREQUAL
92312: IFFALSE 92320
92314: LD_INT 399
92316: DOUBLE
92317: LESSEQUAL
92318: IFTRUE 92322
92320: GO 92384
92322: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
92323: LD_VAR 0 1
92327: PPUSH
92328: LD_VAR 0 2
92332: PPUSH
92333: LD_VAR 0 3
92337: PPUSH
92338: LD_VAR 0 4
92342: PPUSH
92343: LD_VAR 0 5
92347: PPUSH
92348: LD_VAR 0 6
92352: PPUSH
92353: LD_VAR 0 7
92357: PPUSH
92358: LD_VAR 0 8
92362: PPUSH
92363: LD_VAR 0 9
92367: PPUSH
92368: LD_VAR 0 10
92372: PPUSH
92373: LD_VAR 0 11
92377: PPUSH
92378: CALL 82336 0 11
92382: GO 92385
92384: POP
// end ;
92385: PPOPN 11
92387: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
92388: LD_VAR 0 1
92392: PPUSH
92393: LD_VAR 0 2
92397: PPUSH
92398: LD_VAR 0 3
92402: PPUSH
92403: LD_VAR 0 4
92407: PPUSH
92408: LD_VAR 0 5
92412: PPUSH
92413: CALL 85833 0 5
// end ; end_of_file
92417: PPOPN 5
92419: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
92420: LD_VAR 0 1
92424: PPUSH
92425: LD_VAR 0 2
92429: PPUSH
92430: LD_VAR 0 3
92434: PPUSH
92435: LD_VAR 0 4
92439: PPUSH
92440: LD_VAR 0 5
92444: PPUSH
92445: LD_VAR 0 6
92449: PPUSH
92450: CALL 69876 0 6
// end ;
92454: PPOPN 6
92456: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
92457: LD_INT 0
92459: PPUSH
// begin if not units then
92460: LD_VAR 0 1
92464: NOT
92465: IFFALSE 92469
// exit ;
92467: GO 92503
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
92469: LD_VAR 0 1
92473: PPUSH
92474: LD_VAR 0 2
92478: PPUSH
92479: LD_VAR 0 3
92483: PPUSH
92484: LD_VAR 0 4
92488: PPUSH
92489: LD_VAR 0 5
92493: PPUSH
92494: LD_VAR 0 6
92498: PPUSH
92499: CALL 92230 0 6
// end ;
92503: PPOPN 7
92505: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
92506: CALL 69756 0 0
// end ;
92510: PPOPN 1
92512: END
