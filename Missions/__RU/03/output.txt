// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 29 0 0
// LoadBuildingsFromPrevMission ;
   8: CALL 3975 0 0
// PrepareRussian ;
  12: CALL 330 0 0
// PrepareAmerican ;
  16: CALL 2515 0 0
// gameStart := true ;
  20: LD_ADDR_EXP 7
  24: PUSH
  25: LD_INT 1
  27: ST_TO_ADDR
// end ;
  28: END
// export debug , prevMissionPrefix , currentMissionPrefix , wasSelfish , hasProblem , belkovSaved , gameStart , arabAttackActive , allianceAttacked , foundOil , hasScholtze , hasKagan , allowedToAttackOmicron , hasOilTower , dickensKilled , canSearchForScholtze , youTookCratesFromKirov , retreat , hasFactory , kurinWaitForVehiclesTime , requiredVehiclesAmount , canCaptureKirovVehs , timeToAttackOnOmicron , retreatToKirovAllowed , convoysCounter ; function Init ; begin
  29: LD_INT 0
  31: PPUSH
// debug := true ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// if debug then
  40: LD_EXP 1
  44: IFFALSE 54
// Difficulty := 4 ;
  46: LD_ADDR_OWVAR 67
  50: PUSH
  51: LD_INT 4
  53: ST_TO_ADDR
// prevMissionPrefix := 02_ ;
  54: LD_ADDR_EXP 2
  58: PUSH
  59: LD_STRING 02_
  61: ST_TO_ADDR
// currentMissionPrefix := 03_ ;
  62: LD_ADDR_EXP 3
  66: PUSH
  67: LD_STRING 03_
  69: ST_TO_ADDR
// belkovSaved := LoadVariable ( 02_belkovSaved , false ) ;
  70: LD_ADDR_EXP 6
  74: PUSH
  75: LD_STRING 02_belkovSaved
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// wasSelfish := LoadVariable ( 02_Selfish , false ) ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_STRING 02_Selfish
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// dickensKilled := LoadVariable ( 02_DickensKilled , false ) ;
 102: LD_ADDR_EXP 15
 106: PUSH
 107: LD_STRING 02_DickensKilled
 109: PPUSH
 110: LD_INT 0
 112: PPUSH
 113: CALL_OW 30
 117: ST_TO_ADDR
// hasProblem := false ;
 118: LD_ADDR_EXP 5
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// gameStart := false ;
 126: LD_ADDR_EXP 7
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// arabAttackActive := false ;
 134: LD_ADDR_EXP 8
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// allianceAttacked := false ;
 142: LD_ADDR_EXP 9
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// youTookCratesFromKirov := 0 ;
 150: LD_ADDR_EXP 17
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// foundOil := false ;
 158: LD_ADDR_EXP 10
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// hasScholtze := false ;
 166: LD_ADDR_EXP 11
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// hasKagan := false ;
 174: LD_ADDR_EXP 12
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// allowedToAttackOmicron := false ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// canCaptureKirovVehs := false ;
 190: LD_ADDR_EXP 22
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// hasOilTower := false ;
 198: LD_ADDR_EXP 14
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// hasFactory := false ;
 206: LD_ADDR_EXP 19
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// canSearchForScholtze := false ;
 214: LD_ADDR_EXP 16
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// retreat := false ;
 222: LD_ADDR_EXP 18
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// kurinWaitForVehiclesTime := 0 0$20 ;
 230: LD_ADDR_EXP 20
 234: PUSH
 235: LD_INT 700
 237: ST_TO_ADDR
// requiredVehiclesAmount := [ 3 , 3 , 4 , 4 ] [ Difficulty ] ;
 238: LD_ADDR_EXP 21
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 3
 248: PUSH
 249: LD_INT 4
 251: PUSH
 252: LD_INT 4
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: PUSH
 261: LD_OWVAR 67
 265: ARRAY
 266: ST_TO_ADDR
// timeToAttackOnOmicron := 0 0$00 ;
 267: LD_ADDR_EXP 23
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// retreatToKirovAllowed := true ;
 275: LD_ADDR_EXP 24
 279: PUSH
 280: LD_INT 1
 282: ST_TO_ADDR
// convoysCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 283: LD_ADDR_EXP 25
 287: PUSH
 288: LD_INT 4
 290: PUSH
 291: LD_INT 5
 293: PUSH
 294: LD_INT 6
 296: PUSH
 297: LD_INT 6
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: LIST
 305: PUSH
 306: LD_OWVAR 67
 310: ARRAY
 311: ST_TO_ADDR
// if debug then
 312: LD_EXP 1
 316: IFFALSE 325
// FogOff ( 3 ) ;
 318: LD_INT 3
 320: PPUSH
 321: CALL_OW 344
// end ; end_of_file
 325: LD_VAR 0 1
 329: RET
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Popov , Scholtze , Grishko ; export kirovBaseSquad , beriaBaseSquad , grishkoTeam , burlakTeam , kirovTeam , beriaTeam , popovTeam , kirovDepot , beriaDepot , kaganDepot , mainRuCharacters , kirovVehicles , kirovAttackVehicles , kirovTechs , kirovBuildingsToBuild , kirovConstructList , ruCargos , ruGuards ; export function PrepareRussian ; var i , vehiclesAmount , veh , tmp ; begin
 330: LD_INT 0
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
 336: PPUSH
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 3000 ) ;
 337: LD_EXP 42
 341: PPUSH
 342: CALL_OW 274
 346: PPUSH
 347: LD_INT 1
 349: PPUSH
 350: LD_INT 3000
 352: PPUSH
 353: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 600 ) ;
 357: LD_EXP 42
 361: PPUSH
 362: CALL_OW 274
 366: PPUSH
 367: LD_INT 2
 369: PPUSH
 370: LD_INT 600
 372: PPUSH
 373: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , [ 350 , 280 , 210 , 150 ] [ Difficulty ] ) ;
 377: LD_EXP 43
 381: PPUSH
 382: CALL_OW 274
 386: PPUSH
 387: LD_INT 1
 389: PPUSH
 390: LD_INT 350
 392: PUSH
 393: LD_INT 280
 395: PUSH
 396: LD_INT 210
 398: PUSH
 399: LD_INT 150
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: PUSH
 408: LD_OWVAR 67
 412: ARRAY
 413: PPUSH
 414: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , [ 60 , 40 , 20 , 0 ] [ Difficulty ] ) ;
 418: LD_EXP 43
 422: PPUSH
 423: CALL_OW 274
 427: PPUSH
 428: LD_INT 2
 430: PPUSH
 431: LD_INT 60
 433: PUSH
 434: LD_INT 40
 436: PUSH
 437: LD_INT 20
 439: PUSH
 440: LD_INT 0
 442: PUSH
 443: EMPTY
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: PUSH
 449: LD_OWVAR 67
 453: ARRAY
 454: PPUSH
 455: CALL_OW 277
// uc_side := 3 ;
 459: LD_ADDR_OWVAR 20
 463: PUSH
 464: LD_INT 3
 466: ST_TO_ADDR
// uc_nation := 3 ;
 467: LD_ADDR_OWVAR 21
 471: PUSH
 472: LD_INT 3
 474: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
 475: LD_ADDR_EXP 26
 479: PUSH
 480: LD_STRING Burlak
 482: PPUSH
 483: LD_EXP 1
 487: NOT
 488: PPUSH
 489: LD_EXP 2
 493: PPUSH
 494: CALL 15698 0 3
 498: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
 499: LD_ADDR_EXP 36
 503: PUSH
 504: EMPTY
 505: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
 506: LD_ADDR_EXP 35
 510: PUSH
 511: EMPTY
 512: ST_TO_ADDR
// popovTeam := [ ] ;
 513: LD_ADDR_EXP 41
 517: PUSH
 518: EMPTY
 519: ST_TO_ADDR
// grishkoTeam := [ ] ;
 520: LD_ADDR_EXP 37
 524: PUSH
 525: EMPTY
 526: ST_TO_ADDR
// uc_side := 5 ;
 527: LD_ADDR_OWVAR 20
 531: PUSH
 532: LD_INT 5
 534: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
 535: LD_ADDR_EXP 33
 539: PUSH
 540: LD_STRING Scholtze
 542: PPUSH
 543: CALL_OW 25
 547: ST_TO_ADDR
// uc_side := 6 ;
 548: LD_ADDR_OWVAR 20
 552: PUSH
 553: LD_INT 6
 555: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
 556: LD_ADDR_EXP 27
 560: PUSH
 561: LD_STRING Gnyevko
 563: PPUSH
 564: LD_EXP 1
 568: NOT
 569: PPUSH
 570: LD_EXP 2
 574: PPUSH
 575: CALL 15698 0 3
 579: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
 580: LD_ADDR_EXP 29
 584: PUSH
 585: LD_STRING Kirilenkova
 587: PPUSH
 588: LD_EXP 1
 592: NOT
 593: PPUSH
 594: LD_EXP 2
 598: PPUSH
 599: CALL 15698 0 3
 603: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , ( not debug ) , prevMissionPrefix ) ;
 604: LD_ADDR_EXP 31
 608: PUSH
 609: LD_STRING Kovalyuk
 611: PPUSH
 612: LD_EXP 1
 616: NOT
 617: PPUSH
 618: LD_EXP 2
 622: PPUSH
 623: CALL 15698 0 3
 627: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
 628: LD_ADDR_EXP 28
 632: PUSH
 633: LD_STRING Belkov
 635: PPUSH
 636: LD_EXP 1
 640: NOT
 641: PPUSH
 642: LD_EXP 2
 646: PPUSH
 647: CALL 15698 0 3
 651: ST_TO_ADDR
// Kurin := NewCharacter ( Kurin ) ;
 652: LD_ADDR_EXP 30
 656: PUSH
 657: LD_STRING Kurin
 659: PPUSH
 660: CALL_OW 25
 664: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
 665: LD_ADDR_EXP 32
 669: PUSH
 670: LD_STRING Popov
 672: PPUSH
 673: CALL_OW 25
 677: ST_TO_ADDR
// Grishko := NewCharacter ( Grishko ) ;
 678: LD_ADDR_EXP 34
 682: PUSH
 683: LD_STRING Grishko
 685: PPUSH
 686: CALL_OW 25
 690: ST_TO_ADDR
// burlakTeam := CreateCharacterSet ( prevMissionPrefix & burlakTeam ) ;
 691: LD_ADDR_EXP 38
 695: PUSH
 696: LD_EXP 2
 700: PUSH
 701: LD_STRING burlakTeam
 703: STR
 704: PPUSH
 705: CALL_OW 31
 709: ST_TO_ADDR
// kirovTeam := CreateCharacterSet ( prevMissionPrefix & kirovTeam ) ;
 710: LD_ADDR_EXP 39
 714: PUSH
 715: LD_EXP 2
 719: PUSH
 720: LD_STRING kirovTeam
 722: STR
 723: PPUSH
 724: CALL_OW 31
 728: ST_TO_ADDR
// if kirovTeam < 15 then
 729: LD_EXP 39
 733: PUSH
 734: LD_INT 15
 736: LESS
 737: IFFALSE 809
// for i := Count ( kirovTeam ) to 15 do
 739: LD_ADDR_VAR 0 2
 743: PUSH
 744: DOUBLE
 745: LD_EXP 39
 749: PPUSH
 750: CALL 17922 0 1
 754: DEC
 755: ST_TO_ADDR
 756: LD_INT 15
 758: PUSH
 759: FOR_TO
 760: IFFALSE 807
// begin PrepareHuman ( false , i mod 4 + 1 , 2 ) ;
 762: LD_INT 0
 764: PPUSH
 765: LD_VAR 0 2
 769: PUSH
 770: LD_INT 4
 772: MOD
 773: PUSH
 774: LD_INT 1
 776: PLUS
 777: PPUSH
 778: LD_INT 2
 780: PPUSH
 781: CALL_OW 380
// kirovTeam := Join ( kirovTeam , CreateHuman ) ;
 785: LD_ADDR_EXP 39
 789: PUSH
 790: LD_EXP 39
 794: PPUSH
 795: CALL_OW 44
 799: PPUSH
 800: CALL 53854 0 2
 804: ST_TO_ADDR
// end ;
 805: GO 759
 807: POP
 808: POP
// for i in kirovTeam union burlakTeam do
 809: LD_ADDR_VAR 0 2
 813: PUSH
 814: LD_EXP 39
 818: PUSH
 819: LD_EXP 38
 823: UNION
 824: PUSH
 825: FOR_IN
 826: IFFALSE 1071
// begin case GetClass ( i ) of class_soldier , class_engineer :
 828: LD_VAR 0 2
 832: PPUSH
 833: CALL_OW 257
 837: PUSH
 838: LD_INT 1
 840: DOUBLE
 841: EQUAL
 842: IFTRUE 852
 844: LD_INT 2
 846: DOUBLE
 847: EQUAL
 848: IFTRUE 852
 850: GO 903
 852: POP
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_full ] ] , [ f_btype , b_armoury ] ] ) ; class_scientistic :
 853: LD_ADDR_VAR 0 5
 857: PUSH
 858: LD_INT 22
 860: PUSH
 861: LD_INT 6
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: PUSH
 868: LD_INT 3
 870: PUSH
 871: LD_INT 62
 873: PUSH
 874: EMPTY
 875: LIST
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 30
 883: PUSH
 884: LD_INT 4
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: PUSH
 891: EMPTY
 892: LIST
 893: LIST
 894: LIST
 895: PPUSH
 896: CALL_OW 69
 900: ST_TO_ADDR
 901: GO 1022
 903: LD_INT 4
 905: DOUBLE
 906: EQUAL
 907: IFTRUE 911
 909: GO 962
 911: POP
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_full ] ] , [ f_btype , b_lab ] ] ) ; class_mechanic :
 912: LD_ADDR_VAR 0 5
 916: PUSH
 917: LD_INT 22
 919: PUSH
 920: LD_INT 6
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: PUSH
 927: LD_INT 3
 929: PUSH
 930: LD_INT 62
 932: PUSH
 933: EMPTY
 934: LIST
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: PUSH
 940: LD_INT 30
 942: PUSH
 943: LD_INT 6
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: LIST
 954: PPUSH
 955: CALL_OW 69
 959: ST_TO_ADDR
 960: GO 1022
 962: LD_INT 3
 964: DOUBLE
 965: EQUAL
 966: IFTRUE 970
 968: GO 1021
 970: POP
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_full ] ] , [ f_btype , b_workshop ] ] ) ; end ;
 971: LD_ADDR_VAR 0 5
 975: PUSH
 976: LD_INT 22
 978: PUSH
 979: LD_INT 6
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PUSH
 986: LD_INT 3
 988: PUSH
 989: LD_INT 62
 991: PUSH
 992: EMPTY
 993: LIST
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 30
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: EMPTY
1010: LIST
1011: LIST
1012: LIST
1013: PPUSH
1014: CALL_OW 69
1018: ST_TO_ADDR
1019: GO 1022
1021: POP
// if tmp then
1022: LD_VAR 0 5
1026: IFFALSE 1048
// PlaceHumanInUnit ( i , tmp [ 1 ] ) else
1028: LD_VAR 0 2
1032: PPUSH
1033: LD_VAR 0 5
1037: PUSH
1038: LD_INT 1
1040: ARRAY
1041: PPUSH
1042: CALL_OW 52
1046: GO 1069
// PlaceUnitXYR ( i , 158 , 106 , 3 , false ) ;
1048: LD_VAR 0 2
1052: PPUSH
1053: LD_INT 158
1055: PPUSH
1056: LD_INT 106
1058: PPUSH
1059: LD_INT 3
1061: PPUSH
1062: LD_INT 0
1064: PPUSH
1065: CALL_OW 50
// end ;
1069: GO 825
1071: POP
1072: POP
// for i := 1 to 2 do
1073: LD_ADDR_VAR 0 2
1077: PUSH
1078: DOUBLE
1079: LD_INT 1
1081: DEC
1082: ST_TO_ADDR
1083: LD_INT 2
1085: PUSH
1086: FOR_TO
1087: IFFALSE 1121
// begin PrepareSoldier ( sex_male , 2 ) ;
1089: LD_INT 1
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: CALL_OW 381
// grishkoTeam := Join ( grishkoTeam , CreateHuman ) ;
1099: LD_ADDR_EXP 37
1103: PUSH
1104: LD_EXP 37
1108: PPUSH
1109: CALL_OW 44
1113: PPUSH
1114: CALL 53854 0 2
1118: ST_TO_ADDR
// end ;
1119: GO 1086
1121: POP
1122: POP
// grishkoTeam := Join ( grishkoTeam , Grishko ) ;
1123: LD_ADDR_EXP 37
1127: PUSH
1128: LD_EXP 37
1132: PPUSH
1133: LD_EXP 34
1137: PPUSH
1138: CALL 53854 0 2
1142: ST_TO_ADDR
// vehiclesAmount := LoadVariable ( 02_VehiclesCount , 2 ) ;
1143: LD_ADDR_VAR 0 3
1147: PUSH
1148: LD_STRING 02_VehiclesCount
1150: PPUSH
1151: LD_INT 2
1153: PPUSH
1154: CALL_OW 30
1158: ST_TO_ADDR
// if vehiclesAmount > 4 then
1159: LD_VAR 0 3
1163: PUSH
1164: LD_INT 4
1166: GREATER
1167: IFFALSE 1177
// vehiclesAmount := 4 ;
1169: LD_ADDR_VAR 0 3
1173: PUSH
1174: LD_INT 4
1176: ST_TO_ADDR
// if Difficulty > 2 and vehiclesAmount > 2 then
1177: LD_OWVAR 67
1181: PUSH
1182: LD_INT 2
1184: GREATER
1185: IFFALSE 1197
1187: PUSH
1188: LD_VAR 0 3
1192: PUSH
1193: LD_INT 2
1195: GREATER
1196: AND
1197: IFFALSE 1207
// vehiclesAmount := 2 ;
1199: LD_ADDR_VAR 0 3
1203: PUSH
1204: LD_INT 2
1206: ST_TO_ADDR
// for i := 1 to vehiclesAmount do
1207: LD_ADDR_VAR 0 2
1211: PUSH
1212: DOUBLE
1213: LD_INT 1
1215: DEC
1216: ST_TO_ADDR
1217: LD_VAR 0 3
1221: PUSH
1222: FOR_TO
1223: IFFALSE 1305
// begin uc_side := 3 ;
1225: LD_ADDR_OWVAR 20
1229: PUSH
1230: LD_INT 3
1232: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 80 ) ;
1233: LD_INT 21
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 1
1241: PPUSH
1242: LD_INT 42
1244: PPUSH
1245: LD_INT 80
1247: PPUSH
1248: CALL 20684 0 5
// veh := CreateVehicle ;
1252: LD_ADDR_VAR 0 4
1256: PUSH
1257: CALL_OW 45
1261: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1262: LD_VAR 0 4
1266: PPUSH
1267: LD_INT 0
1269: PPUSH
1270: LD_INT 5
1272: PPUSH
1273: CALL_OW 12
1277: PPUSH
1278: CALL_OW 233
// PlaceUnitXYR ( veh , 112 , 98 , 12 , false ) ;
1282: LD_VAR 0 4
1286: PPUSH
1287: LD_INT 112
1289: PPUSH
1290: LD_INT 98
1292: PPUSH
1293: LD_INT 12
1295: PPUSH
1296: LD_INT 0
1298: PPUSH
1299: CALL_OW 50
// end ;
1303: GO 1222
1305: POP
1306: POP
// vehiclesAmount := LoadVariable ( 02_KirovVehiclesCount , 1 ) ;
1307: LD_ADDR_VAR 0 3
1311: PUSH
1312: LD_STRING 02_KirovVehiclesCount
1314: PPUSH
1315: LD_INT 1
1317: PPUSH
1318: CALL_OW 30
1322: ST_TO_ADDR
// for i := 1 to vehiclesAmount do
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: DOUBLE
1329: LD_INT 1
1331: DEC
1332: ST_TO_ADDR
1333: LD_VAR 0 3
1337: PUSH
1338: FOR_TO
1339: IFFALSE 1421
// begin uc_side := 6 ;
1341: LD_ADDR_OWVAR 20
1345: PUSH
1346: LD_INT 6
1348: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 80 ) ;
1349: LD_INT 21
1351: PPUSH
1352: LD_INT 1
1354: PPUSH
1355: LD_INT 1
1357: PPUSH
1358: LD_INT 42
1360: PPUSH
1361: LD_INT 80
1363: PPUSH
1364: CALL 20684 0 5
// veh := CreateVehicle ;
1368: LD_ADDR_VAR 0 4
1372: PUSH
1373: CALL_OW 45
1377: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1378: LD_VAR 0 4
1382: PPUSH
1383: LD_INT 0
1385: PPUSH
1386: LD_INT 5
1388: PPUSH
1389: CALL_OW 12
1393: PPUSH
1394: CALL_OW 233
// PlaceUnitXYR ( veh , 157 , 106 , 12 , false ) ;
1398: LD_VAR 0 4
1402: PPUSH
1403: LD_INT 157
1405: PPUSH
1406: LD_INT 106
1408: PPUSH
1409: LD_INT 12
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 50
// end ;
1419: GO 1338
1421: POP
1422: POP
// mainRuCharacters := [ Burlak , Kovalyuk , Gnyevko , Belkov , Scholtze , Kirilenkova ] ;
1423: LD_ADDR_EXP 45
1427: PUSH
1428: LD_EXP 26
1432: PUSH
1433: LD_EXP 31
1437: PUSH
1438: LD_EXP 27
1442: PUSH
1443: LD_EXP 28
1447: PUSH
1448: LD_EXP 33
1452: PUSH
1453: LD_EXP 29
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: ST_TO_ADDR
// kirovVehicles := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1466: LD_ADDR_EXP 46
1470: PUSH
1471: LD_INT 22
1473: PUSH
1474: LD_INT 6
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: PUSH
1481: LD_INT 21
1483: PUSH
1484: LD_INT 2
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: PUSH
1491: EMPTY
1492: LIST
1493: LIST
1494: PPUSH
1495: CALL_OW 69
1499: ST_TO_ADDR
// kirovAttackVehicles := [ ] ;
1500: LD_ADDR_EXP 47
1504: PUSH
1505: EMPTY
1506: ST_TO_ADDR
// kirovTechs := GetTechNation ( 6 , nation_russian , state_enabled ) ;
1507: LD_ADDR_EXP 48
1511: PUSH
1512: LD_INT 6
1514: PPUSH
1515: LD_INT 3
1517: PPUSH
1518: LD_INT 1
1520: PPUSH
1521: CALL 15845 0 3
1525: ST_TO_ADDR
// kirovConstructList := [ ] ;
1526: LD_ADDR_EXP 50
1530: PUSH
1531: EMPTY
1532: ST_TO_ADDR
// kirovBuildingsToBuild := [ [ b_factory , 159 , 113 , 0 ] , [ b_lab_half , 153 , 99 , 3 , b_lab_weapon ] , [ b_bunker , 144 , 98 , 1 ] , [ b_oil_power , 155 , 94 , 0 ] , [ b_oil_power , 158 , 96 , 2 ] , [ b_ext_gun , 162 , 116 , 5 ] , [ b_bunker , 169 , 101 , 3 ] , [ b_bunker , 171 , 119 , 5 ] , [ b_bunker , 144 , 106 , 1 ] ] ;
1533: LD_ADDR_EXP 49
1537: PUSH
1538: LD_INT 3
1540: PUSH
1541: LD_INT 159
1543: PUSH
1544: LD_INT 113
1546: PUSH
1547: LD_INT 0
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: LIST
1554: LIST
1555: PUSH
1556: LD_INT 7
1558: PUSH
1559: LD_INT 153
1561: PUSH
1562: LD_INT 99
1564: PUSH
1565: LD_INT 3
1567: PUSH
1568: LD_INT 10
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: PUSH
1578: LD_INT 32
1580: PUSH
1581: LD_INT 144
1583: PUSH
1584: LD_INT 98
1586: PUSH
1587: LD_INT 1
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: PUSH
1596: LD_INT 26
1598: PUSH
1599: LD_INT 155
1601: PUSH
1602: LD_INT 94
1604: PUSH
1605: LD_INT 0
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: LIST
1612: LIST
1613: PUSH
1614: LD_INT 26
1616: PUSH
1617: LD_INT 158
1619: PUSH
1620: LD_INT 96
1622: PUSH
1623: LD_INT 2
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: LD_INT 17
1634: PUSH
1635: LD_INT 162
1637: PUSH
1638: LD_INT 116
1640: PUSH
1641: LD_INT 5
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 32
1652: PUSH
1653: LD_INT 169
1655: PUSH
1656: LD_INT 101
1658: PUSH
1659: LD_INT 3
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: PUSH
1668: LD_INT 32
1670: PUSH
1671: LD_INT 171
1673: PUSH
1674: LD_INT 119
1676: PUSH
1677: LD_INT 5
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: PUSH
1686: LD_INT 32
1688: PUSH
1689: LD_INT 144
1691: PUSH
1692: LD_INT 106
1694: PUSH
1695: LD_INT 1
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: ST_TO_ADDR
// end ;
1715: LD_VAR 0 1
1719: RET
// every 0 0$1 trigger gameStart do
1720: LD_EXP 7
1724: IFFALSE 1804
1726: GO 1728
1728: DISABLE
// begin enable ;
1729: ENABLE
// BaseScript ( 6 , kirovBaseArea , kirovCratesArea , kirovBaseInnerArea , kirovBaseOuterArea , kirovBaseSquad , kirovVehicles , kirovTechs , kirovConstructList , kirovBuildingsToBuild , [ 153 , 103 ] , [ 144 , 102 ] , [ 122 , 49 ] ) ;
1730: LD_INT 6
1732: PPUSH
1733: LD_INT 10
1735: PPUSH
1736: LD_INT 13
1738: PPUSH
1739: LD_INT 12
1741: PPUSH
1742: LD_INT 11
1744: PPUSH
1745: LD_EXP 35
1749: PPUSH
1750: LD_EXP 46
1754: PPUSH
1755: LD_EXP 48
1759: PPUSH
1760: LD_EXP 50
1764: PPUSH
1765: LD_EXP 49
1769: PPUSH
1770: LD_INT 153
1772: PUSH
1773: LD_INT 103
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PPUSH
1780: LD_INT 144
1782: PUSH
1783: LD_INT 102
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PPUSH
1790: LD_INT 122
1792: PUSH
1793: LD_INT 49
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: PPUSH
1800: CALL 4711 0 13
// end ;
1804: END
// every 0 0$10 + 4 4$00 trigger gameStart do var i ;
1805: LD_EXP 7
1809: IFFALSE 2040
1811: GO 1813
1813: DISABLE
1814: LD_INT 0
1816: PPUSH
// begin for i in grishkoTeam do
1817: LD_ADDR_VAR 0 1
1821: PUSH
1822: LD_EXP 37
1826: PUSH
1827: FOR_IN
1828: IFFALSE 1941
// begin PlaceUnitArea ( i , grishkoTeamSpawnArea , false ) ;
1830: LD_VAR 0 1
1834: PPUSH
1835: LD_INT 15
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL_OW 49
// ComMoveXY ( i , 142 , 135 ) ;
1845: LD_VAR 0 1
1849: PPUSH
1850: LD_INT 142
1852: PPUSH
1853: LD_INT 135
1855: PPUSH
1856: CALL_OW 111
// AddComWait ( i , 0 0$12 - ( i * 0 0$2 ) ) ;
1860: LD_VAR 0 1
1864: PPUSH
1865: LD_INT 420
1867: PUSH
1868: LD_VAR 0 1
1872: PUSH
1873: LD_INT 70
1875: MUL
1876: MINUS
1877: PPUSH
1878: CALL_OW 202
// AddComMoveXY ( i , 176 , 131 ) ;
1882: LD_VAR 0 1
1886: PPUSH
1887: LD_INT 176
1889: PPUSH
1890: LD_INT 131
1892: PPUSH
1893: CALL_OW 171
// AddComWait ( i , 0 0$6 ) ;
1897: LD_VAR 0 1
1901: PPUSH
1902: LD_INT 210
1904: PPUSH
1905: CALL_OW 202
// AddComMoveXY ( i , 199 , 105 ) ;
1909: LD_VAR 0 1
1913: PPUSH
1914: LD_INT 199
1916: PPUSH
1917: LD_INT 105
1919: PPUSH
1920: CALL_OW 171
// wait ( rand ( 0 0$1 , 0 0$3 ) ) ;
1924: LD_INT 35
1926: PPUSH
1927: LD_INT 105
1929: PPUSH
1930: CALL_OW 12
1934: PPUSH
1935: CALL_OW 67
// end ;
1939: GO 1827
1941: POP
1942: POP
// repeat wait ( 0 0$1 ) ;
1943: LD_INT 35
1945: PPUSH
1946: CALL_OW 67
// for i in grishkoTeam do
1950: LD_ADDR_VAR 0 1
1954: PUSH
1955: LD_EXP 37
1959: PUSH
1960: FOR_IN
1961: IFFALSE 2020
// if IsAt ( i , 199 , 105 ) then
1963: LD_VAR 0 1
1967: PPUSH
1968: LD_INT 199
1970: PPUSH
1971: LD_INT 105
1973: PPUSH
1974: CALL_OW 307
1978: IFFALSE 1991
// RemoveUnit ( i ) else
1980: LD_VAR 0 1
1984: PPUSH
1985: CALL_OW 64
1989: GO 2018
// if not HasTask ( i ) then
1991: LD_VAR 0 1
1995: PPUSH
1996: CALL_OW 314
2000: NOT
2001: IFFALSE 2018
// ComMoveXY ( i , 199 , 105 ) ;
2003: LD_VAR 0 1
2007: PPUSH
2008: LD_INT 199
2010: PPUSH
2011: LD_INT 105
2013: PPUSH
2014: CALL_OW 111
2018: GO 1960
2020: POP
2021: POP
// until not UnitFilter ( grishkoTeam , [ f_ok ] ) ;
2022: LD_EXP 37
2026: PPUSH
2027: LD_INT 50
2029: PUSH
2030: EMPTY
2031: LIST
2032: PPUSH
2033: CALL_OW 72
2037: NOT
2038: IFFALSE 1943
// end ;
2040: PPOPN 1
2042: END
// export function SendCargoWithOil ; var i , tmp , un , veh ; begin
2043: LD_INT 0
2045: PPUSH
2046: PPUSH
2047: PPUSH
2048: PPUSH
2049: PPUSH
// ruCargos := [ ] ;
2050: LD_ADDR_EXP 51
2054: PUSH
2055: EMPTY
2056: ST_TO_ADDR
// ruGuards := [ ] ;
2057: LD_ADDR_EXP 52
2061: PUSH
2062: EMPTY
2063: ST_TO_ADDR
// for i := 1 to 3 do
2064: LD_ADDR_VAR 0 2
2068: PUSH
2069: DOUBLE
2070: LD_INT 1
2072: DEC
2073: ST_TO_ADDR
2074: LD_INT 3
2076: PUSH
2077: FOR_TO
2078: IFFALSE 2094
// EraseResourceArea ( i , southSpawnEraseArea ) ;
2080: LD_VAR 0 2
2084: PPUSH
2085: LD_INT 17
2087: PPUSH
2088: CALL_OW 286
2092: GO 2077
2094: POP
2095: POP
// tmp := FilterAllUnits ( [ f_distxy , 207 , 162 , 6 ] ) ;
2096: LD_ADDR_VAR 0 3
2100: PUSH
2101: LD_INT 92
2103: PUSH
2104: LD_INT 207
2106: PUSH
2107: LD_INT 162
2109: PUSH
2110: LD_INT 6
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: PPUSH
2119: CALL_OW 69
2123: ST_TO_ADDR
// if tmp then
2124: LD_VAR 0 3
2128: IFFALSE 2207
// begin if UnitFilter ( tmp , [ f_type , unit_building ] ) then
2130: LD_VAR 0 3
2134: PPUSH
2135: LD_INT 21
2137: PUSH
2138: LD_INT 3
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: PPUSH
2145: CALL_OW 72
2149: IFFALSE 2192
// begin for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
2151: LD_ADDR_VAR 0 2
2155: PUSH
2156: LD_VAR 0 3
2160: PPUSH
2161: LD_INT 21
2163: PUSH
2164: LD_INT 3
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PPUSH
2171: CALL_OW 72
2175: PUSH
2176: FOR_IN
2177: IFFALSE 2190
// RemoveUnit ( i ) ;
2179: LD_VAR 0 2
2183: PPUSH
2184: CALL_OW 64
2188: GO 2176
2190: POP
2191: POP
// end ; ComMoveXY ( tmp , 200 , 147 ) ;
2192: LD_VAR 0 3
2196: PPUSH
2197: LD_INT 200
2199: PPUSH
2200: LD_INT 147
2202: PPUSH
2203: CALL_OW 111
// end ; tmp := [ ] ;
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: EMPTY
2213: ST_TO_ADDR
// for i := 1 to 3 do
2214: LD_ADDR_VAR 0 2
2218: PUSH
2219: DOUBLE
2220: LD_INT 1
2222: DEC
2223: ST_TO_ADDR
2224: LD_INT 3
2226: PUSH
2227: FOR_TO
2228: IFFALSE 2420
// begin uc_side := 6 ;
2230: LD_ADDR_OWVAR 20
2234: PUSH
2235: LD_INT 6
2237: ST_TO_ADDR
// uc_nation := nation_russian ;
2238: LD_ADDR_OWVAR 21
2242: PUSH
2243: LD_INT 3
2245: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 ) ;
2246: LD_INT 21
2248: PPUSH
2249: LD_INT 1
2251: PPUSH
2252: LD_INT 1
2254: PPUSH
2255: LD_INT 51
2257: PPUSH
2258: LD_INT 90
2260: PPUSH
2261: CALL 20684 0 5
// veh := CreateVehicle ;
2265: LD_ADDR_VAR 0 5
2269: PUSH
2270: CALL_OW 45
2274: ST_TO_ADDR
// ruCargos := Join ( ruCargos , veh ) ;
2275: LD_ADDR_EXP 51
2279: PUSH
2280: LD_EXP 51
2284: PPUSH
2285: LD_VAR 0 5
2289: PPUSH
2290: CALL 53854 0 2
2294: ST_TO_ADDR
// SetCargo ( veh , mat_oil , 100 ) ;
2295: LD_VAR 0 5
2299: PPUSH
2300: LD_INT 2
2302: PPUSH
2303: LD_INT 100
2305: PPUSH
2306: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
2310: LD_INT 35
2312: PPUSH
2313: CALL_OW 67
// until PlaceUnitArea ( veh , southRoadSpawnArea , false ) ;
2317: LD_VAR 0 5
2321: PPUSH
2322: LD_INT 14
2324: PPUSH
2325: LD_INT 0
2327: PPUSH
2328: CALL_OW 49
2332: IFFALSE 2310
// PrepareSoldier ( false , 2 ) ;
2334: LD_INT 0
2336: PPUSH
2337: LD_INT 2
2339: PPUSH
2340: CALL_OW 381
// un := CreateHuman ;
2344: LD_ADDR_VAR 0 4
2348: PUSH
2349: CALL_OW 44
2353: ST_TO_ADDR
// ruGuards := Join ( ruGuards , un ) ;
2354: LD_ADDR_EXP 52
2358: PUSH
2359: LD_EXP 52
2363: PPUSH
2364: LD_VAR 0 4
2368: PPUSH
2369: CALL 53854 0 2
2373: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2374: LD_VAR 0 4
2378: PPUSH
2379: LD_VAR 0 5
2383: PPUSH
2384: CALL_OW 52
// ComMoveXY ( veh , 105 , 47 ) ;
2388: LD_VAR 0 5
2392: PPUSH
2393: LD_INT 105
2395: PPUSH
2396: LD_INT 47
2398: PPUSH
2399: CALL_OW 111
// AddComMoveXY ( veh , 71 , 29 ) ;
2403: LD_VAR 0 5
2407: PPUSH
2408: LD_INT 71
2410: PPUSH
2411: LD_INT 29
2413: PPUSH
2414: CALL_OW 171
// end ;
2418: GO 2227
2420: POP
2421: POP
// repeat wait ( 0 0$3 ) ;
2422: LD_INT 105
2424: PPUSH
2425: CALL_OW 67
// until UnitFilter ( ruCargos , [ f_distxy , 71 , 29 , 6 ] ) >= 2 ;
2429: LD_EXP 51
2433: PPUSH
2434: LD_INT 92
2436: PUSH
2437: LD_INT 71
2439: PUSH
2440: LD_INT 29
2442: PUSH
2443: LD_INT 6
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PPUSH
2452: CALL_OW 72
2456: PUSH
2457: LD_INT 2
2459: GREATEREQUAL
2460: IFFALSE 2422
// for i in ruGuards do
2462: LD_ADDR_VAR 0 2
2466: PUSH
2467: LD_EXP 52
2471: PUSH
2472: FOR_IN
2473: IFFALSE 2508
// begin ComExitVehicle ( i ) ;
2475: LD_VAR 0 2
2479: PPUSH
2480: CALL_OW 121
// wait ( 0 0$1 ) ;
2484: LD_INT 35
2486: PPUSH
2487: CALL_OW 67
// ComAgressiveMove ( i , 63 , 47 ) ;
2491: LD_VAR 0 2
2495: PPUSH
2496: LD_INT 63
2498: PPUSH
2499: LD_INT 47
2501: PPUSH
2502: CALL_OW 114
// end ;
2506: GO 2472
2508: POP
2509: POP
// end ; end_of_file
2510: LD_VAR 0 1
2514: RET
// export Sikorski , omicronTroops , americanReinforcementsTroops , omicronVehicles , omicronTechs , omicronConstructList , omicronBuildingsToBuild ; export function PrepareAmerican ; var i , un , limit ; begin
2515: LD_INT 0
2517: PPUSH
2518: PPUSH
2519: PPUSH
2520: PPUSH
// uc_side := omicronSide ;
2521: LD_ADDR_OWVAR 20
2525: PUSH
2526: LD_INT 1
2528: ST_TO_ADDR
// uc_nation := nation_american ;
2529: LD_ADDR_OWVAR 21
2533: PUSH
2534: LD_INT 1
2536: ST_TO_ADDR
// americanReinforcementsTroops := [ ] ;
2537: LD_ADDR_EXP 55
2541: PUSH
2542: EMPTY
2543: ST_TO_ADDR
// omicronTroops := [ ] ;
2544: LD_ADDR_EXP 54
2548: PUSH
2549: EMPTY
2550: ST_TO_ADDR
// omicronVehicles := [ ] ;
2551: LD_ADDR_EXP 56
2555: PUSH
2556: EMPTY
2557: ST_TO_ADDR
// omicronTechs := GetTechNation ( omicronSide , nation_american , state_enabled ) ;
2558: LD_ADDR_EXP 57
2562: PUSH
2563: LD_INT 1
2565: PPUSH
2566: LD_INT 1
2568: PPUSH
2569: LD_INT 1
2571: PPUSH
2572: CALL 15845 0 3
2576: ST_TO_ADDR
// omicronBuildingsToBuild := [ ] ;
2577: LD_ADDR_EXP 59
2581: PUSH
2582: EMPTY
2583: ST_TO_ADDR
// omicronConstructList := [ ] ;
2584: LD_ADDR_EXP 58
2588: PUSH
2589: EMPTY
2590: ST_TO_ADDR
// SetBName ( usDep , omikron ) ;
2591: LD_INT 290
2593: PPUSH
2594: LD_STRING omikron
2596: PPUSH
2597: CALL_OW 500
// limit := [ 8 , 9 , 9 , 10 ] [ Difficulty ] ;
2601: LD_ADDR_VAR 0 4
2605: PUSH
2606: LD_INT 8
2608: PUSH
2609: LD_INT 9
2611: PUSH
2612: LD_INT 9
2614: PUSH
2615: LD_INT 10
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: PUSH
2624: LD_OWVAR 67
2628: ARRAY
2629: ST_TO_ADDR
// Sikorski := NewCharacter ( Sikorski ) ;
2630: LD_ADDR_EXP 53
2634: PUSH
2635: LD_STRING Sikorski
2637: PPUSH
2638: CALL_OW 25
2642: ST_TO_ADDR
// PlaceHumanInUnit ( Sikorski , usDep ) ;
2643: LD_EXP 53
2647: PPUSH
2648: LD_INT 290
2650: PPUSH
2651: CALL_OW 52
// for i := 1 to limit - 5 do
2655: LD_ADDR_VAR 0 2
2659: PUSH
2660: DOUBLE
2661: LD_INT 1
2663: DEC
2664: ST_TO_ADDR
2665: LD_VAR 0 4
2669: PUSH
2670: LD_INT 5
2672: MINUS
2673: PUSH
2674: FOR_TO
2675: IFFALSE 2761
// begin PrepareSoldier ( false , [ 2 , 2 , 3 , 4 ] [ Difficulty ] ) ;
2677: LD_INT 0
2679: PPUSH
2680: LD_INT 2
2682: PUSH
2683: LD_INT 2
2685: PUSH
2686: LD_INT 3
2688: PUSH
2689: LD_INT 4
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: LIST
2696: LIST
2697: PUSH
2698: LD_OWVAR 67
2702: ARRAY
2703: PPUSH
2704: CALL_OW 381
// un := CreateHuman ;
2708: LD_ADDR_VAR 0 3
2712: PUSH
2713: CALL_OW 44
2717: ST_TO_ADDR
// omicronTroops := Join ( omicronTroops , un ) ;
2718: LD_ADDR_EXP 54
2722: PUSH
2723: LD_EXP 54
2727: PPUSH
2728: LD_VAR 0 3
2732: PPUSH
2733: CALL 53854 0 2
2737: ST_TO_ADDR
// PlaceUnitXYR ( un , 27 , 36 , 5 , false ) ;
2738: LD_VAR 0 3
2742: PPUSH
2743: LD_INT 27
2745: PPUSH
2746: LD_INT 36
2748: PPUSH
2749: LD_INT 5
2751: PPUSH
2752: LD_INT 0
2754: PPUSH
2755: CALL_OW 50
// end ;
2759: GO 2674
2761: POP
2762: POP
// limit := limit - 5 ;
2763: LD_ADDR_VAR 0 4
2767: PUSH
2768: LD_VAR 0 4
2772: PUSH
2773: LD_INT 5
2775: MINUS
2776: ST_TO_ADDR
// for i := 1 to limit do
2777: LD_ADDR_VAR 0 2
2781: PUSH
2782: DOUBLE
2783: LD_INT 1
2785: DEC
2786: ST_TO_ADDR
2787: LD_VAR 0 4
2791: PUSH
2792: FOR_TO
2793: IFFALSE 2871
// begin PrepareHuman ( false , i mod 3 + 2 , 3 ) ;
2795: LD_INT 0
2797: PPUSH
2798: LD_VAR 0 2
2802: PUSH
2803: LD_INT 3
2805: MOD
2806: PUSH
2807: LD_INT 2
2809: PLUS
2810: PPUSH
2811: LD_INT 3
2813: PPUSH
2814: CALL_OW 380
// un := CreateHuman ;
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: CALL_OW 44
2827: ST_TO_ADDR
// omicronTroops := Join ( omicronTroops , un ) ;
2828: LD_ADDR_EXP 54
2832: PUSH
2833: LD_EXP 54
2837: PPUSH
2838: LD_VAR 0 3
2842: PPUSH
2843: CALL 53854 0 2
2847: ST_TO_ADDR
// PlaceUnitXYR ( un , 27 , 36 , 5 , false ) ;
2848: LD_VAR 0 3
2852: PPUSH
2853: LD_INT 27
2855: PPUSH
2856: LD_INT 36
2858: PPUSH
2859: LD_INT 5
2861: PPUSH
2862: LD_INT 0
2864: PPUSH
2865: CALL_OW 50
// end ;
2869: GO 2792
2871: POP
2872: POP
// if debug then
2873: LD_EXP 1
2877: IFFALSE 2948
// begin uc_side := reinforcementsSide ;
2879: LD_ADDR_OWVAR 20
2883: PUSH
2884: LD_INT 4
2886: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
2887: LD_INT 0
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: CALL_OW 381
// un := CreateHuman ;
2897: LD_ADDR_VAR 0 3
2901: PUSH
2902: CALL_OW 44
2906: ST_TO_ADDR
// americanReinforcementsTroops := Join ( americanReinforcementsTroops , un ) ;
2907: LD_ADDR_EXP 55
2911: PUSH
2912: LD_EXP 55
2916: PPUSH
2917: LD_VAR 0 3
2921: PPUSH
2922: CALL 53854 0 2
2926: ST_TO_ADDR
// PlaceUnitXYR ( un , 71 , 102 , 3 , false ) ;
2927: LD_VAR 0 3
2931: PPUSH
2932: LD_INT 71
2934: PPUSH
2935: LD_INT 102
2937: PPUSH
2938: LD_INT 3
2940: PPUSH
2941: LD_INT 0
2943: PPUSH
2944: CALL_OW 50
// end ; end ;
2948: LD_VAR 0 1
2952: RET
// every 0 0$1 trigger gameStart do
2953: LD_EXP 7
2957: IFFALSE 3029
2959: GO 2961
2961: DISABLE
// begin enable ;
2962: ENABLE
// BaseScript ( omicronSide , omicronBaseArea , omicronBaseArea , omicronBaseInnerArea , omicronBaseOuterArea , omicronTroops , omicronVehicles , omicronTechs , omicronConstructList , omicronBuildingsToBuild , [ 27 , 32 ] , [ 19 , 14 ] , [ ] ) ;
2963: LD_INT 1
2965: PPUSH
2966: LD_INT 18
2968: PPUSH
2969: LD_INT 18
2971: PPUSH
2972: LD_INT 19
2974: PPUSH
2975: LD_INT 20
2977: PPUSH
2978: LD_EXP 54
2982: PPUSH
2983: LD_EXP 56
2987: PPUSH
2988: LD_EXP 57
2992: PPUSH
2993: LD_EXP 58
2997: PPUSH
2998: LD_EXP 59
3002: PPUSH
3003: LD_INT 27
3005: PUSH
3006: LD_INT 32
3008: PUSH
3009: EMPTY
3010: LIST
3011: LIST
3012: PPUSH
3013: LD_INT 19
3015: PUSH
3016: LD_INT 14
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PPUSH
3023: EMPTY
3024: PPUSH
3025: CALL 4711 0 13
// end ;
3029: END
// every 0 0$1 trigger gameStart do var i , time ;
3030: LD_EXP 7
3034: IFFALSE 3111
3036: GO 3038
3038: DISABLE
3039: LD_INT 0
3041: PPUSH
3042: PPUSH
// begin time := [ 4 4$00 , 3 3$30 , 3 3$20 , 3 3$00 ] [ Difficulty ] ;
3043: LD_ADDR_VAR 0 2
3047: PUSH
3048: LD_INT 8400
3050: PUSH
3051: LD_INT 7350
3053: PUSH
3054: LD_INT 7000
3056: PUSH
3057: LD_INT 6300
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: PUSH
3066: LD_OWVAR 67
3070: ARRAY
3071: ST_TO_ADDR
// repeat wait ( time + rand ( - 0 0$20 , 0 0$20 ) ) ;
3072: LD_VAR 0 2
3076: PUSH
3077: LD_INT 700
3079: NEG
3080: PPUSH
3081: LD_INT 700
3083: PPUSH
3084: CALL_OW 12
3088: PLUS
3089: PPUSH
3090: CALL_OW 67
// RaiseSailEvent ( eventConvoy ) ;
3094: LD_INT 2
3096: PPUSH
3097: CALL_OW 427
// until convoysCounter = 0 ;
3101: LD_EXP 25
3105: PUSH
3106: LD_INT 0
3108: EQUAL
3109: IFFALSE 3072
// end ;
3111: PPOPN 2
3113: END
// export function SendConvoy ; var i , tmp , path ; begin
3114: LD_INT 0
3116: PPUSH
3117: PPUSH
3118: PPUSH
3119: PPUSH
// path := rand ( 1 , 2 ) ;
3120: LD_ADDR_VAR 0 4
3124: PUSH
3125: LD_INT 1
3127: PPUSH
3128: LD_INT 2
3130: PPUSH
3131: CALL_OW 12
3135: ST_TO_ADDR
// end ; end_of_file end_of_file
3136: LD_VAR 0 1
3140: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3141: LD_VAR 0 1
3145: PPUSH
3146: CALL 75287 0 1
// if un in kirovVehicles then
3150: LD_VAR 0 1
3154: PUSH
3155: LD_EXP 46
3159: IN
3160: IFFALSE 3178
// kirovVehicles := kirovVehicles diff un ;
3162: LD_ADDR_EXP 46
3166: PUSH
3167: LD_EXP 46
3171: PUSH
3172: LD_VAR 0 1
3176: DIFF
3177: ST_TO_ADDR
// if un = Burlak then
3178: LD_VAR 0 1
3182: PUSH
3183: LD_EXP 26
3187: EQUAL
3188: IFFALSE 3197
// YouLost ( Burlak ) ;
3190: LD_STRING Burlak
3192: PPUSH
3193: CALL_OW 104
// if un = Popov then
3197: LD_VAR 0 1
3201: PUSH
3202: LD_EXP 32
3206: EQUAL
3207: IFFALSE 3216
// YouLost ( Popov ) ;
3209: LD_STRING Popov
3211: PPUSH
3212: CALL_OW 104
// if un = Kurin and not arabAttackActive then
3216: LD_VAR 0 1
3220: PUSH
3221: LD_EXP 30
3225: EQUAL
3226: IFFALSE 3235
3228: PUSH
3229: LD_EXP 8
3233: NOT
3234: AND
3235: IFFALSE 3244
// YouLost ( Kurin ) ;
3237: LD_STRING Kurin
3239: PPUSH
3240: CALL_OW 104
// if un = beriaDepot and not arabAttackActive then
3244: LD_VAR 0 1
3248: PUSH
3249: LD_EXP 43
3253: EQUAL
3254: IFFALSE 3263
3256: PUSH
3257: LD_EXP 8
3261: NOT
3262: AND
3263: IFFALSE 3272
// YouLost ( Beria ) ;
3265: LD_STRING Beria
3267: PPUSH
3268: CALL_OW 104
// if un = kaganDepot and not arabAttackActive then
3272: LD_VAR 0 1
3276: PUSH
3277: LD_EXP 44
3281: EQUAL
3282: IFFALSE 3291
3284: PUSH
3285: LD_EXP 8
3289: NOT
3290: AND
3291: IFFALSE 3300
// YouLost ( Kagan ) ;
3293: LD_STRING Kagan
3295: PPUSH
3296: CALL_OW 104
// end ;
3300: PPOPN 1
3302: END
// on VehicleConstructed ( vehicle , factory ) do var side ;
3303: LD_INT 0
3305: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
3306: LD_VAR 0 1
3310: PPUSH
3311: LD_VAR 0 2
3315: PPUSH
3316: CALL 75345 0 2
// side := GetSide ( vehicle ) ;
3320: LD_ADDR_VAR 0 3
3324: PUSH
3325: LD_VAR 0 1
3329: PPUSH
3330: CALL_OW 255
3334: ST_TO_ADDR
// if side = 6 then
3335: LD_VAR 0 3
3339: PUSH
3340: LD_INT 6
3342: EQUAL
3343: IFFALSE 3382
// begin kirovVehicles := Join ( kirovVehicles , vehicle ) ;
3345: LD_ADDR_EXP 46
3349: PUSH
3350: LD_EXP 46
3354: PPUSH
3355: LD_VAR 0 1
3359: PPUSH
3360: CALL 53854 0 2
3364: ST_TO_ADDR
// SetTag ( IsDrivenBy ( vehicle ) , tMech ) ;
3365: LD_VAR 0 1
3369: PPUSH
3370: CALL_OW 311
3374: PPUSH
3375: LD_INT 7
3377: PPUSH
3378: CALL_OW 109
// end ; end ;
3382: PPOPN 3
3384: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
3385: LD_VAR 0 1
3389: PPUSH
3390: CALL_OW 110
3394: PUSH
3395: LD_INT 7
3397: EQUAL
3398: IFFALSE 3412
// SetTag ( driver , 0 ) ;
3400: LD_VAR 0 1
3404: PPUSH
3405: LD_INT 0
3407: PPUSH
3408: CALL_OW 109
// end ;
3412: PPOPN 4
3414: END
// on UpgradeComplete ( b ) do var side , btype ;
3415: LD_INT 0
3417: PPUSH
3418: PPUSH
// begin side := GetSide ( b ) ;
3419: LD_ADDR_VAR 0 2
3423: PUSH
3424: LD_VAR 0 1
3428: PPUSH
3429: CALL_OW 255
3433: ST_TO_ADDR
// btype := GetBType ( b ) ;
3434: LD_ADDR_VAR 0 3
3438: PUSH
3439: LD_VAR 0 1
3443: PPUSH
3444: CALL_OW 266
3448: ST_TO_ADDR
// if side = 6 then
3449: LD_VAR 0 2
3453: PUSH
3454: LD_INT 6
3456: EQUAL
3457: IFFALSE 3477
// begin kirovBuildingsToBuild := Delete ( kirovBuildingsToBuild , 1 ) ;
3459: LD_ADDR_EXP 49
3463: PUSH
3464: LD_EXP 49
3468: PPUSH
3469: LD_INT 1
3471: PPUSH
3472: CALL_OW 3
3476: ST_TO_ADDR
// end ; end ;
3477: PPOPN 3
3479: END
// on ResearchComplete ( tech , lab ) do var side ;
3480: LD_INT 0
3482: PPUSH
// begin side := GetSide ( lab ) ;
3483: LD_ADDR_VAR 0 3
3487: PUSH
3488: LD_VAR 0 2
3492: PPUSH
3493: CALL_OW 255
3497: ST_TO_ADDR
// if side = 6 then
3498: LD_VAR 0 3
3502: PUSH
3503: LD_INT 6
3505: EQUAL
3506: IFFALSE 3524
// kirovTechs := kirovTechs diff tech ;
3508: LD_ADDR_EXP 48
3512: PUSH
3513: LD_EXP 48
3517: PUSH
3518: LD_VAR 0 1
3522: DIFF
3523: ST_TO_ADDR
// end ;
3524: PPOPN 3
3526: END
// on BuildingComplete ( b ) do var side , btype ;
3527: LD_INT 0
3529: PPUSH
3530: PPUSH
// begin side := GetSide ( b ) ;
3531: LD_ADDR_VAR 0 2
3535: PUSH
3536: LD_VAR 0 1
3540: PPUSH
3541: CALL_OW 255
3545: ST_TO_ADDR
// btype := GetBType ( b ) ;
3546: LD_ADDR_VAR 0 3
3550: PUSH
3551: LD_VAR 0 1
3555: PPUSH
3556: CALL_OW 266
3560: ST_TO_ADDR
// if side = 3 then
3561: LD_VAR 0 2
3565: PUSH
3566: LD_INT 3
3568: EQUAL
3569: IFFALSE 3659
// begin if btype = b_oil_mine then
3571: LD_VAR 0 3
3575: PUSH
3576: LD_INT 29
3578: EQUAL
3579: IFFALSE 3589
// hasOilTower := true ;
3581: LD_ADDR_EXP 14
3585: PUSH
3586: LD_INT 1
3588: ST_TO_ADDR
// if btype = b_depot then
3589: LD_VAR 0 3
3593: PUSH
3594: LD_INT 0
3596: EQUAL
3597: IFFALSE 3659
// if GetDistUnitXY ( b , 78 , 112 ) < depotRangeDist and not hasKagan then
3599: LD_VAR 0 1
3603: PPUSH
3604: LD_INT 78
3606: PPUSH
3607: LD_INT 112
3609: PPUSH
3610: CALL_OW 297
3614: PUSH
3615: LD_INT 28
3617: LESS
3618: IFFALSE 3627
3620: PUSH
3621: LD_EXP 12
3625: NOT
3626: AND
3627: IFFALSE 3659
// begin hasKagan := true ;
3629: LD_ADDR_EXP 12
3633: PUSH
3634: LD_INT 1
3636: ST_TO_ADDR
// kaganDepot := b ;
3637: LD_ADDR_EXP 44
3641: PUSH
3642: LD_VAR 0 1
3646: ST_TO_ADDR
// SetBName ( b , kagan ) ;
3647: LD_VAR 0 1
3651: PPUSH
3652: LD_STRING kagan
3654: PPUSH
3655: CALL_OW 500
// end ; end ; if side = 6 then
3659: LD_VAR 0 2
3663: PUSH
3664: LD_INT 6
3666: EQUAL
3667: IFFALSE 3687
// kirovBuildingsToBuild := Delete ( kirovBuildingsToBuild , 1 ) ;
3669: LD_ADDR_EXP 49
3673: PUSH
3674: LD_EXP 49
3678: PPUSH
3679: LD_INT 1
3681: PPUSH
3682: CALL_OW 3
3686: ST_TO_ADDR
// end ;
3687: PPOPN 3
3689: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
3690: LD_VAR 0 1
3694: PUSH
3695: LD_INT 3
3697: EQUAL
3698: IFFALSE 3710
3700: PUSH
3701: LD_VAR 0 2
3705: PUSH
3706: LD_INT 6
3708: EQUAL
3709: AND
3710: IFFALSE 3720
// allianceAttacked := true ;
3712: LD_ADDR_EXP 9
3716: PUSH
3717: LD_INT 1
3719: ST_TO_ADDR
// end ;
3720: PPOPN 2
3722: END
// on TakeMaterials ( unit , building ) do begin if GetSide ( building ) = 6 and GetSide ( unit ) = 3 then
3723: LD_VAR 0 2
3727: PPUSH
3728: CALL_OW 255
3732: PUSH
3733: LD_INT 6
3735: EQUAL
3736: IFFALSE 3753
3738: PUSH
3739: LD_VAR 0 1
3743: PPUSH
3744: CALL_OW 255
3748: PUSH
3749: LD_INT 3
3751: EQUAL
3752: AND
3753: IFFALSE 3770
// youTookCratesFromKirov := Inc ( youTookCratesFromKirov ) ;
3755: LD_ADDR_EXP 17
3759: PUSH
3760: LD_EXP 17
3764: PPUSH
3765: CALL 55227 0 1
3769: ST_TO_ADDR
// end ;
3770: PPOPN 2
3772: END
// on VehicleCaptured ( newId , oldId , oldSide , driver ) do begin if canCaptureKirovVehs then
3773: LD_EXP 22
3777: IFFALSE 3781
// exit ;
3779: GO 3898
// if oldSide = 6 then
3781: LD_VAR 0 3
3785: PUSH
3786: LD_INT 6
3788: EQUAL
3789: IFFALSE 3898
// begin ComExit ( driver ) ;
3791: LD_VAR 0 4
3795: PPUSH
3796: CALL 54252 0 1
// SetSide ( newId , 6 ) ;
3800: LD_VAR 0 1
3804: PPUSH
3805: LD_INT 6
3807: PPUSH
3808: CALL_OW 235
// if oldId in kirovVehicles then
3812: LD_VAR 0 2
3816: PUSH
3817: LD_EXP 46
3821: IN
3822: IFFALSE 3862
// begin kirovVehicles := kirovVehicles diff oldId ;
3824: LD_ADDR_EXP 46
3828: PUSH
3829: LD_EXP 46
3833: PUSH
3834: LD_VAR 0 2
3838: DIFF
3839: ST_TO_ADDR
// kirovVehicles := Join ( kirovVehicles , newId ) ;
3840: LD_ADDR_EXP 46
3844: PUSH
3845: LD_EXP 46
3849: PPUSH
3850: LD_VAR 0 1
3854: PPUSH
3855: CALL 53854 0 2
3859: ST_TO_ADDR
// end else
3860: GO 3898
// begin kirovAttackVehicles := kirovAttackVehicles diff oldId ;
3862: LD_ADDR_EXP 47
3866: PUSH
3867: LD_EXP 47
3871: PUSH
3872: LD_VAR 0 2
3876: DIFF
3877: ST_TO_ADDR
// kirovAttackVehicles := Join ( kirovAttackVehicles , newId ) ;
3878: LD_ADDR_EXP 47
3882: PUSH
3883: LD_EXP 47
3887: PPUSH
3888: LD_VAR 0 1
3892: PPUSH
3893: CALL 53854 0 2
3897: ST_TO_ADDR
// end ; end ; end ;
3898: PPOPN 4
3900: END
// on ClassChanged ( un , oldClass , newClass ) do var tag ;
3901: LD_INT 0
3903: PPUSH
// begin tag := GetTag ( un ) ;
3904: LD_ADDR_VAR 0 4
3908: PUSH
3909: LD_VAR 0 1
3913: PPUSH
3914: CALL_OW 110
3918: ST_TO_ADDR
// if tag = tWannaBeMech then
3919: LD_VAR 0 4
3923: PUSH
3924: LD_INT 14
3926: EQUAL
3927: IFFALSE 3941
// SetTag ( un , 0 ) ;
3929: LD_VAR 0 1
3933: PPUSH
3934: LD_INT 0
3936: PPUSH
3937: CALL_OW 109
// end ;
3941: PPOPN 4
3943: END
// on SailEvent ( event ) do begin if event = eventCargo then
3944: LD_VAR 0 1
3948: PUSH
3949: LD_INT 1
3951: EQUAL
3952: IFFALSE 3958
// SendCargoWithOil ;
3954: CALL 2043 0 0
// if event = eventConvoy then
3958: LD_VAR 0 1
3962: PUSH
3963: LD_INT 2
3965: EQUAL
3966: IFFALSE 3972
// SendConvoy ;
3968: CALL 3114 0 0
// end ; end_of_file
3972: PPOPN 1
3974: END
// export function LoadBuildingsFromPrevMission ; var i , tmp ; begin
3975: LD_INT 0
3977: PPUSH
3978: PPUSH
3979: PPUSH
// tmp := LoadVariable ( 02_Beria , [ [ 31 , 3 , 3 , 63 , 86 , 3 ] , [ 31 , 3 , 3 , 74 , 94 , 4 ] , [ 31 , 3 , 3 , 77 , 103 , 4 ] , [ 0 , 3 , 3 , 66 , 104 , 0 ] , [ 0 , 1 , 2 , 103 , 67 , 4 ] ] ) ;
3980: LD_ADDR_VAR 0 3
3984: PUSH
3985: LD_STRING 02_Beria
3987: PPUSH
3988: LD_INT 31
3990: PUSH
3991: LD_INT 3
3993: PUSH
3994: LD_INT 3
3996: PUSH
3997: LD_INT 63
3999: PUSH
4000: LD_INT 86
4002: PUSH
4003: LD_INT 3
4005: PUSH
4006: EMPTY
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 31
4016: PUSH
4017: LD_INT 3
4019: PUSH
4020: LD_INT 3
4022: PUSH
4023: LD_INT 74
4025: PUSH
4026: LD_INT 94
4028: PUSH
4029: LD_INT 4
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: PUSH
4040: LD_INT 31
4042: PUSH
4043: LD_INT 3
4045: PUSH
4046: LD_INT 3
4048: PUSH
4049: LD_INT 77
4051: PUSH
4052: LD_INT 103
4054: PUSH
4055: LD_INT 4
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: PUSH
4066: LD_INT 0
4068: PUSH
4069: LD_INT 3
4071: PUSH
4072: LD_INT 3
4074: PUSH
4075: LD_INT 66
4077: PUSH
4078: LD_INT 104
4080: PUSH
4081: LD_INT 0
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 0
4094: PUSH
4095: LD_INT 1
4097: PUSH
4098: LD_INT 2
4100: PUSH
4101: LD_INT 103
4103: PUSH
4104: LD_INT 67
4106: PUSH
4107: LD_INT 4
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: PPUSH
4125: CALL_OW 30
4129: ST_TO_ADDR
// uc_side := 3 ;
4130: LD_ADDR_OWVAR 20
4134: PUSH
4135: LD_INT 3
4137: ST_TO_ADDR
// for i in tmp do
4138: LD_ADDR_VAR 0 2
4142: PUSH
4143: LD_VAR 0 3
4147: PUSH
4148: FOR_IN
4149: IFFALSE 4246
// begin uc_nation := i [ 2 ] ;
4151: LD_ADDR_OWVAR 21
4155: PUSH
4156: LD_VAR 0 2
4160: PUSH
4161: LD_INT 2
4163: ARRAY
4164: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4165: LD_ADDR_OWVAR 42
4169: PUSH
4170: LD_VAR 0 2
4174: PUSH
4175: LD_INT 1
4177: ARRAY
4178: ST_TO_ADDR
// bc_level := i [ 3 ] ;
4179: LD_ADDR_OWVAR 43
4183: PUSH
4184: LD_VAR 0 2
4188: PUSH
4189: LD_INT 3
4191: ARRAY
4192: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
4193: LD_ADDR_OWVAR 44
4197: PUSH
4198: LD_INT 9
4200: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
4201: LD_ADDR_OWVAR 45
4205: PUSH
4206: LD_INT 9
4208: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 4 ] + 46 , i [ 5 ] , i [ 6 ] ) ;
4209: LD_VAR 0 2
4213: PUSH
4214: LD_INT 4
4216: ARRAY
4217: PUSH
4218: LD_INT 46
4220: PLUS
4221: PPUSH
4222: LD_VAR 0 2
4226: PUSH
4227: LD_INT 5
4229: ARRAY
4230: PPUSH
4231: LD_VAR 0 2
4235: PUSH
4236: LD_INT 6
4238: ARRAY
4239: PPUSH
4240: CALL_OW 47
// end ;
4244: GO 4148
4246: POP
4247: POP
// tmp := LoadVariable ( 02_Kirov , [ [ 31 , 3 , 3 , 98 , 98 , 1 ] , [ 6 , 3 , 3 , 107 , 99 , 3 ] , [ 0 , 3 , 3 , 117 , 104 , 3 ] , [ 4 , 3 , 3 , 105 , 108 , 0 ] , [ 4 , 3 , 3 , 120 , 116 , 0 ] , [ 2 , 3 , 3 , 113 , 113 , 0 ] , [ 26 , 3 , 3 , 116 , 98 , 0 ] ] ) ;
4248: LD_ADDR_VAR 0 3
4252: PUSH
4253: LD_STRING 02_Kirov
4255: PPUSH
4256: LD_INT 31
4258: PUSH
4259: LD_INT 3
4261: PUSH
4262: LD_INT 3
4264: PUSH
4265: LD_INT 98
4267: PUSH
4268: LD_INT 98
4270: PUSH
4271: LD_INT 1
4273: PUSH
4274: EMPTY
4275: LIST
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: PUSH
4282: LD_INT 6
4284: PUSH
4285: LD_INT 3
4287: PUSH
4288: LD_INT 3
4290: PUSH
4291: LD_INT 107
4293: PUSH
4294: LD_INT 99
4296: PUSH
4297: LD_INT 3
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: PUSH
4308: LD_INT 0
4310: PUSH
4311: LD_INT 3
4313: PUSH
4314: LD_INT 3
4316: PUSH
4317: LD_INT 117
4319: PUSH
4320: LD_INT 104
4322: PUSH
4323: LD_INT 3
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: PUSH
4334: LD_INT 4
4336: PUSH
4337: LD_INT 3
4339: PUSH
4340: LD_INT 3
4342: PUSH
4343: LD_INT 105
4345: PUSH
4346: LD_INT 108
4348: PUSH
4349: LD_INT 0
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: PUSH
4360: LD_INT 4
4362: PUSH
4363: LD_INT 3
4365: PUSH
4366: LD_INT 3
4368: PUSH
4369: LD_INT 120
4371: PUSH
4372: LD_INT 116
4374: PUSH
4375: LD_INT 0
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: PUSH
4386: LD_INT 2
4388: PUSH
4389: LD_INT 3
4391: PUSH
4392: LD_INT 3
4394: PUSH
4395: LD_INT 113
4397: PUSH
4398: LD_INT 113
4400: PUSH
4401: LD_INT 0
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: PUSH
4412: LD_INT 26
4414: PUSH
4415: LD_INT 3
4417: PUSH
4418: LD_INT 3
4420: PUSH
4421: LD_INT 116
4423: PUSH
4424: LD_INT 98
4426: PUSH
4427: LD_INT 0
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: PPUSH
4447: CALL_OW 30
4451: ST_TO_ADDR
// uc_side := 6 ;
4452: LD_ADDR_OWVAR 20
4456: PUSH
4457: LD_INT 6
4459: ST_TO_ADDR
// for i in tmp do
4460: LD_ADDR_VAR 0 2
4464: PUSH
4465: LD_VAR 0 3
4469: PUSH
4470: FOR_IN
4471: IFFALSE 4568
// begin uc_nation := i [ 2 ] ;
4473: LD_ADDR_OWVAR 21
4477: PUSH
4478: LD_VAR 0 2
4482: PUSH
4483: LD_INT 2
4485: ARRAY
4486: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4487: LD_ADDR_OWVAR 42
4491: PUSH
4492: LD_VAR 0 2
4496: PUSH
4497: LD_INT 1
4499: ARRAY
4500: ST_TO_ADDR
// bc_level := i [ 3 ] ;
4501: LD_ADDR_OWVAR 43
4505: PUSH
4506: LD_VAR 0 2
4510: PUSH
4511: LD_INT 3
4513: ARRAY
4514: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
4515: LD_ADDR_OWVAR 44
4519: PUSH
4520: LD_INT 9
4522: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
4523: LD_ADDR_OWVAR 45
4527: PUSH
4528: LD_INT 9
4530: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 4 ] + 46 , i [ 5 ] , i [ 6 ] ) ;
4531: LD_VAR 0 2
4535: PUSH
4536: LD_INT 4
4538: ARRAY
4539: PUSH
4540: LD_INT 46
4542: PLUS
4543: PPUSH
4544: LD_VAR 0 2
4548: PUSH
4549: LD_INT 5
4551: ARRAY
4552: PPUSH
4553: LD_VAR 0 2
4557: PUSH
4558: LD_INT 6
4560: ARRAY
4561: PPUSH
4562: CALL_OW 47
// end ;
4566: GO 4470
4568: POP
4569: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , easternHillArea ] , [ f_type , unit_building ] ] ) ;
4570: LD_ADDR_VAR 0 3
4574: PUSH
4575: LD_INT 22
4577: PUSH
4578: LD_INT 3
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PUSH
4585: LD_INT 95
4587: PUSH
4588: LD_INT 3
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 21
4597: PUSH
4598: LD_INT 3
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: PPUSH
4610: CALL_OW 69
4614: ST_TO_ADDR
// if tmp then
4615: LD_VAR 0 3
4619: IFFALSE 4650
// for i in tmp do
4621: LD_ADDR_VAR 0 2
4625: PUSH
4626: LD_VAR 0 3
4630: PUSH
4631: FOR_IN
4632: IFFALSE 4648
// SetSide ( i , 6 ) ;
4634: LD_VAR 0 2
4638: PPUSH
4639: LD_INT 6
4641: PPUSH
4642: CALL_OW 235
4646: GO 4631
4648: POP
4649: POP
// kirovDepot := HexInfo ( 163 , 104 ) ;
4650: LD_ADDR_EXP 42
4654: PUSH
4655: LD_INT 163
4657: PPUSH
4658: LD_INT 104
4660: PPUSH
4661: CALL_OW 428
4665: ST_TO_ADDR
// beriaDepot := HexInfo ( 112 , 104 ) ;
4666: LD_ADDR_EXP 43
4670: PUSH
4671: LD_INT 112
4673: PPUSH
4674: LD_INT 104
4676: PPUSH
4677: CALL_OW 428
4681: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
4682: LD_EXP 43
4686: PPUSH
4687: LD_STRING beria
4689: PPUSH
4690: CALL_OW 500
// SetBName ( kirovDepot , kirov ) ;
4694: LD_EXP 42
4698: PPUSH
4699: LD_STRING kirov
4701: PPUSH
4702: CALL_OW 500
// end ;
4706: LD_VAR 0 1
4710: RET
// export function BaseScript ( side , area , cratesArea , innerArea , outerArea , forces , vehicles , techs , constructList , buildingsToBuild , healPoint , parkingPoint , allowToPatrol ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , drivers , hurtUnits , enemy , enemyInBase , enemyOuterBase , empty , fac , emptyTowers , weapon , depot , enemySide ; begin
4711: LD_INT 0
4713: PPUSH
4714: PPUSH
4715: PPUSH
4716: PPUSH
4717: PPUSH
4718: PPUSH
4719: PPUSH
4720: PPUSH
4721: PPUSH
4722: PPUSH
4723: PPUSH
4724: PPUSH
4725: PPUSH
4726: PPUSH
4727: PPUSH
4728: PPUSH
4729: PPUSH
4730: PPUSH
4731: PPUSH
4732: PPUSH
4733: PPUSH
4734: PPUSH
4735: PPUSH
// enable ;
4736: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
4737: LD_ADDR_VAR 0 16
4741: PUSH
4742: LD_INT 81
4744: PUSH
4745: LD_VAR 0 1
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PPUSH
4754: CALL_OW 69
4758: ST_TO_ADDR
// if tmp then
4759: LD_VAR 0 16
4763: IFFALSE 4784
// enemySide := GetSide ( tmp [ 1 ] ) ;
4765: LD_ADDR_VAR 0 36
4769: PUSH
4770: LD_VAR 0 16
4774: PUSH
4775: LD_INT 1
4777: ARRAY
4778: PPUSH
4779: CALL_OW 255
4783: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( innerArea , [ f_enemy , side ] ) ;
4784: LD_ADDR_VAR 0 29
4788: PUSH
4789: LD_VAR 0 4
4793: PPUSH
4794: LD_INT 81
4796: PUSH
4797: LD_VAR 0 1
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 70
4810: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
4811: LD_ADDR_VAR 0 30
4815: PUSH
4816: LD_VAR 0 5
4820: PPUSH
4821: LD_INT 81
4823: PUSH
4824: LD_VAR 0 1
4828: PUSH
4829: EMPTY
4830: LIST
4831: LIST
4832: PPUSH
4833: CALL_OW 70
4837: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4838: LD_ADDR_VAR 0 35
4842: PUSH
4843: LD_VAR 0 2
4847: PPUSH
4848: LD_INT 22
4850: PUSH
4851: LD_VAR 0 1
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PUSH
4860: LD_INT 2
4862: PUSH
4863: LD_INT 30
4865: PUSH
4866: LD_INT 0
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: LD_INT 30
4875: PUSH
4876: LD_INT 1
4878: PUSH
4879: EMPTY
4880: LIST
4881: LIST
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: LIST
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PPUSH
4892: CALL_OW 70
4896: ST_TO_ADDR
// if depot then
4897: LD_VAR 0 35
4901: IFFALSE 4917
// depot := depot [ 1 ] ;
4903: LD_ADDR_VAR 0 35
4907: PUSH
4908: LD_VAR 0 35
4912: PUSH
4913: LD_INT 1
4915: ARRAY
4916: ST_TO_ADDR
// fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
4917: LD_ADDR_VAR 0 32
4921: PUSH
4922: LD_VAR 0 2
4926: PPUSH
4927: LD_INT 22
4929: PUSH
4930: LD_VAR 0 1
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: LD_INT 30
4941: PUSH
4942: LD_INT 3
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PUSH
4949: LD_INT 50
4951: PUSH
4952: EMPTY
4953: LIST
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: LIST
4959: PPUSH
4960: CALL_OW 70
4964: ST_TO_ADDR
// if Count ( techs ) then
4965: LD_VAR 0 8
4969: PPUSH
4970: CALL 17922 0 1
4974: IFFALSE 5135
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4976: LD_ADDR_VAR 0 18
4980: PUSH
4981: LD_VAR 0 2
4985: PPUSH
4986: LD_INT 22
4988: PUSH
4989: LD_VAR 0 1
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: LD_INT 50
5000: PUSH
5001: EMPTY
5002: LIST
5003: PUSH
5004: LD_INT 2
5006: PUSH
5007: LD_INT 30
5009: PUSH
5010: LD_INT 6
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PUSH
5017: LD_INT 30
5019: PUSH
5020: LD_INT 7
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: PUSH
5027: LD_INT 30
5029: PUSH
5030: LD_INT 8
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: PUSH
5037: EMPTY
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: LIST
5047: PPUSH
5048: CALL_OW 70
5052: ST_TO_ADDR
// if lab then
5053: LD_VAR 0 18
5057: IFFALSE 5133
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
5059: LD_VAR 0 18
5063: PUSH
5064: LD_INT 1
5066: ARRAY
5067: PPUSH
5068: CALL_OW 461
5072: PUSH
5073: LD_INT 2
5075: EQUAL
5076: IFFALSE 5133
// begin for i in techs do
5078: LD_ADDR_VAR 0 15
5082: PUSH
5083: LD_VAR 0 8
5087: PUSH
5088: FOR_IN
5089: IFFALSE 5131
// if CanBeResearched ( lab [ 1 ] , i ) then
5091: LD_VAR 0 18
5095: PUSH
5096: LD_INT 1
5098: ARRAY
5099: PPUSH
5100: LD_VAR 0 15
5104: PPUSH
5105: CALL_OW 430
5109: IFFALSE 5129
// begin AddComResearch ( lab [ 1 ] , i ) ;
5111: LD_VAR 0 18
5115: PUSH
5116: LD_INT 1
5118: ARRAY
5119: PPUSH
5120: LD_VAR 0 15
5124: PPUSH
5125: CALL_OW 184
// end ;
5129: GO 5088
5131: POP
5132: POP
// end ; end ; end else
5133: GO 5438
// if UnitFilter ( fac , [ f_not , [ f_full ] ] ) and Count ( UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_tag , tWannaBeMech ] ] , [ f_class , 4 ] ] ) ) > 2 then
5135: LD_VAR 0 32
5139: PPUSH
5140: LD_INT 3
5142: PUSH
5143: LD_INT 62
5145: PUSH
5146: EMPTY
5147: LIST
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: PPUSH
5153: CALL_OW 72
5157: IFFALSE 5224
5159: PUSH
5160: LD_VAR 0 6
5164: PPUSH
5165: LD_INT 3
5167: PUSH
5168: LD_INT 60
5170: PUSH
5171: EMPTY
5172: LIST
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: PUSH
5178: LD_INT 3
5180: PUSH
5181: LD_INT 120
5183: PUSH
5184: LD_INT 14
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PUSH
5195: LD_INT 25
5197: PUSH
5198: LD_INT 4
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: PPUSH
5210: CALL_OW 72
5214: PPUSH
5215: CALL 17922 0 1
5219: PUSH
5220: LD_INT 2
5222: GREATER
5223: AND
5224: IFFALSE 5438
// begin tmp := UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_tag , tWannaBeMech ] ] , [ f_class , 4 ] ] ) ;
5226: LD_ADDR_VAR 0 16
5230: PUSH
5231: LD_VAR 0 6
5235: PPUSH
5236: LD_INT 3
5238: PUSH
5239: LD_INT 60
5241: PUSH
5242: EMPTY
5243: LIST
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PUSH
5249: LD_INT 3
5251: PUSH
5252: LD_INT 120
5254: PUSH
5255: LD_INT 14
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: PUSH
5266: LD_INT 25
5268: PUSH
5269: LD_INT 4
5271: PUSH
5272: EMPTY
5273: LIST
5274: LIST
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: LIST
5280: PPUSH
5281: CALL_OW 72
5285: ST_TO_ADDR
// for i := tmp downto 2 do
5286: LD_ADDR_VAR 0 15
5290: PUSH
5291: DOUBLE
5292: LD_VAR 0 16
5296: INC
5297: ST_TO_ADDR
5298: LD_INT 2
5300: PUSH
5301: FOR_DOWNTO
5302: IFFALSE 5436
// begin if Count ( UnitsInside ( fac [ 1 ] ) ) + Count ( UnitFilter ( forces , [ f_tag , tWannaBeMech ] ) ) = 6 then
5304: LD_VAR 0 32
5308: PUSH
5309: LD_INT 1
5311: ARRAY
5312: PPUSH
5313: CALL_OW 313
5317: PPUSH
5318: CALL 17922 0 1
5322: PUSH
5323: LD_VAR 0 6
5327: PPUSH
5328: LD_INT 120
5330: PUSH
5331: LD_INT 14
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: PPUSH
5338: CALL_OW 72
5342: PPUSH
5343: CALL 17922 0 1
5347: PLUS
5348: PUSH
5349: LD_INT 6
5351: EQUAL
5352: IFFALSE 5356
// break ;
5354: GO 5436
// sci := tmp [ i ] ;
5356: LD_ADDR_VAR 0 24
5360: PUSH
5361: LD_VAR 0 16
5365: PUSH
5366: LD_VAR 0 15
5370: ARRAY
5371: ST_TO_ADDR
// SetTag ( sci , tWannaBeMech ) ;
5372: LD_VAR 0 24
5376: PPUSH
5377: LD_INT 14
5379: PPUSH
5380: CALL_OW 109
// if IsInUnit ( sci ) then
5384: LD_VAR 0 24
5388: PPUSH
5389: CALL_OW 310
5393: IFFALSE 5404
// ComExitBuilding ( sci ) ;
5395: LD_VAR 0 24
5399: PPUSH
5400: CALL_OW 122
// AddComEnterUnit ( sci , fac [ 1 ] ) ;
5404: LD_VAR 0 24
5408: PPUSH
5409: LD_VAR 0 32
5413: PUSH
5414: LD_INT 1
5416: ARRAY
5417: PPUSH
5418: CALL_OW 180
// AddComChangeProfession ( sci , class_mechanic ) ;
5422: LD_VAR 0 24
5426: PPUSH
5427: LD_INT 3
5429: PPUSH
5430: CALL_OW 183
// end ;
5434: GO 5301
5436: POP
5437: POP
// end ; if fac then
5438: LD_VAR 0 32
5442: IFFALSE 5757
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
5444: LD_VAR 0 32
5448: PUSH
5449: LD_INT 1
5451: ARRAY
5452: PPUSH
5453: CALL_OW 461
5457: PUSH
5458: LD_INT 2
5460: EQUAL
5461: IFFALSE 5757
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
5463: LD_ADDR_VAR 0 33
5467: PUSH
5468: LD_VAR 0 2
5472: PPUSH
5473: LD_INT 2
5475: PUSH
5476: LD_INT 30
5478: PUSH
5479: LD_INT 32
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: LD_INT 30
5488: PUSH
5489: LD_INT 33
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: LIST
5500: PUSH
5501: LD_INT 35
5503: PUSH
5504: LD_INT 0
5506: PUSH
5507: EMPTY
5508: LIST
5509: LIST
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: PPUSH
5515: CALL_OW 70
5519: ST_TO_ADDR
// if emptyTowers then
5520: LD_VAR 0 33
5524: IFFALSE 5574
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
5526: LD_ADDR_VAR 0 34
5530: PUSH
5531: LD_VAR 0 33
5535: PUSH
5536: LD_INT 1
5538: ARRAY
5539: PPUSH
5540: LD_VAR 0 2
5544: PPUSH
5545: CALL 26213 0 2
5549: ST_TO_ADDR
// if weapon then
5550: LD_VAR 0 34
5554: IFFALSE 5574
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
5556: LD_VAR 0 33
5560: PUSH
5561: LD_INT 1
5563: ARRAY
5564: PPUSH
5565: LD_VAR 0 34
5569: PPUSH
5570: CALL_OW 148
// end ; if constructList then
5574: LD_VAR 0 9
5578: IFFALSE 5757
// for i := 1 to Count ( constructList ) do
5580: LD_ADDR_VAR 0 15
5584: PUSH
5585: DOUBLE
5586: LD_INT 1
5588: DEC
5589: ST_TO_ADDR
5590: LD_VAR 0 9
5594: PPUSH
5595: CALL 17922 0 1
5599: PUSH
5600: FOR_TO
5601: IFFALSE 5755
// begin if CanBeConstructed ( fac [ 1 ] , constructList [ i ] [ 1 ] , constructList [ i ] [ 2 ] , constructList [ i ] [ 3 ] , constructList [ i ] [ 4 ] ) then
5603: LD_VAR 0 32
5607: PUSH
5608: LD_INT 1
5610: ARRAY
5611: PPUSH
5612: LD_VAR 0 9
5616: PUSH
5617: LD_VAR 0 15
5621: ARRAY
5622: PUSH
5623: LD_INT 1
5625: ARRAY
5626: PPUSH
5627: LD_VAR 0 9
5631: PUSH
5632: LD_VAR 0 15
5636: ARRAY
5637: PUSH
5638: LD_INT 2
5640: ARRAY
5641: PPUSH
5642: LD_VAR 0 9
5646: PUSH
5647: LD_VAR 0 15
5651: ARRAY
5652: PUSH
5653: LD_INT 3
5655: ARRAY
5656: PPUSH
5657: LD_VAR 0 9
5661: PUSH
5662: LD_VAR 0 15
5666: ARRAY
5667: PUSH
5668: LD_INT 4
5670: ARRAY
5671: PPUSH
5672: CALL_OW 448
5676: IFFALSE 5753
// begin ComConstruct ( fac [ 1 ] , constructList [ i ] [ 1 ] , constructList [ i ] [ 2 ] , constructList [ i ] [ 3 ] , constructList [ i ] [ 4 ] ) ;
5678: LD_VAR 0 32
5682: PUSH
5683: LD_INT 1
5685: ARRAY
5686: PPUSH
5687: LD_VAR 0 9
5691: PUSH
5692: LD_VAR 0 15
5696: ARRAY
5697: PUSH
5698: LD_INT 1
5700: ARRAY
5701: PPUSH
5702: LD_VAR 0 9
5706: PUSH
5707: LD_VAR 0 15
5711: ARRAY
5712: PUSH
5713: LD_INT 2
5715: ARRAY
5716: PPUSH
5717: LD_VAR 0 9
5721: PUSH
5722: LD_VAR 0 15
5726: ARRAY
5727: PUSH
5728: LD_INT 3
5730: ARRAY
5731: PPUSH
5732: LD_VAR 0 9
5736: PUSH
5737: LD_VAR 0 15
5741: ARRAY
5742: PUSH
5743: LD_INT 4
5745: ARRAY
5746: PPUSH
5747: CALL_OW 125
// break ;
5751: GO 5755
// end ; end ;
5753: GO 5600
5755: POP
5756: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5757: LD_ADDR_VAR 0 16
5761: PUSH
5762: LD_VAR 0 2
5766: PPUSH
5767: LD_INT 22
5769: PUSH
5770: LD_VAR 0 1
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PUSH
5779: LD_INT 21
5781: PUSH
5782: LD_INT 3
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PUSH
5789: LD_INT 3
5791: PUSH
5792: LD_INT 57
5794: PUSH
5795: EMPTY
5796: LIST
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: PUSH
5802: LD_INT 3
5804: PUSH
5805: LD_INT 24
5807: PUSH
5808: LD_INT 1000
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: LIST
5823: LIST
5824: PPUSH
5825: CALL_OW 70
5829: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
5830: LD_ADDR_VAR 0 23
5834: PUSH
5835: LD_VAR 0 2
5839: PPUSH
5840: CALL_OW 435
5844: ST_TO_ADDR
// if cratesArea then
5845: LD_VAR 0 3
5849: IFFALSE 5872
// cr := cr union GetListOfCratesInArea ( cratesArea ) ;
5851: LD_ADDR_VAR 0 23
5855: PUSH
5856: LD_VAR 0 23
5860: PUSH
5861: LD_VAR 0 3
5865: PPUSH
5866: CALL_OW 435
5870: UNION
5871: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
5872: LD_ADDR_VAR 0 20
5876: PUSH
5877: LD_VAR 0 6
5881: PPUSH
5882: LD_INT 25
5884: PUSH
5885: LD_INT 3
5887: PUSH
5888: EMPTY
5889: LIST
5890: LIST
5891: PUSH
5892: LD_INT 50
5894: PUSH
5895: EMPTY
5896: LIST
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PPUSH
5902: CALL_OW 72
5906: ST_TO_ADDR
// if fac then
5907: LD_VAR 0 32
5911: IFFALSE 6032
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
5913: LD_VAR 0 20
5917: PPUSH
5918: LD_INT 3
5920: PUSH
5921: LD_INT 120
5923: PUSH
5924: LD_INT 7
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: PUSH
5935: LD_INT 3
5937: PUSH
5938: LD_INT 54
5940: PUSH
5941: EMPTY
5942: LIST
5943: PUSH
5944: EMPTY
5945: LIST
5946: LIST
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PPUSH
5952: CALL_OW 72
5956: IFFALSE 5973
5958: PUSH
5959: LD_VAR 0 32
5963: PUSH
5964: LD_INT 1
5966: ARRAY
5967: PPUSH
5968: CALL_OW 302
5972: AND
5973: IFFALSE 6032
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
5975: LD_VAR 0 20
5979: PPUSH
5980: LD_INT 3
5982: PUSH
5983: LD_INT 120
5985: PUSH
5986: LD_INT 7
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PUSH
5997: LD_INT 3
5999: PUSH
6000: LD_INT 54
6002: PUSH
6003: EMPTY
6004: LIST
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: PPUSH
6014: CALL_OW 72
6018: PPUSH
6019: LD_VAR 0 32
6023: PUSH
6024: LD_INT 1
6026: ARRAY
6027: PPUSH
6028: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_not , [ f_tag , tWannaBeMech ] ] , [ f_ok ] ] ) ;
6032: LD_ADDR_VAR 0 24
6036: PUSH
6037: LD_VAR 0 6
6041: PPUSH
6042: LD_INT 25
6044: PUSH
6045: LD_INT 4
6047: PUSH
6048: EMPTY
6049: LIST
6050: LIST
6051: PUSH
6052: LD_INT 3
6054: PUSH
6055: LD_INT 120
6057: PUSH
6058: LD_INT 14
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PUSH
6069: LD_INT 50
6071: PUSH
6072: EMPTY
6073: LIST
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: LIST
6079: PPUSH
6080: CALL_OW 72
6084: ST_TO_ADDR
// lab := FilterUnitsInarea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
6085: LD_ADDR_VAR 0 18
6089: PUSH
6090: LD_VAR 0 2
6094: PPUSH
6095: LD_INT 2
6097: PUSH
6098: LD_INT 30
6100: PUSH
6101: LD_INT 6
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: PUSH
6108: LD_INT 30
6110: PUSH
6111: LD_INT 7
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 30
6120: PUSH
6121: LD_INT 8
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: PPUSH
6134: CALL_OW 70
6138: ST_TO_ADDR
// if sci then
6139: LD_VAR 0 24
6143: IFFALSE 6304
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
6145: LD_ADDR_VAR 0 27
6149: PUSH
6150: LD_VAR 0 6
6154: PPUSH
6155: LD_INT 95
6157: PUSH
6158: LD_VAR 0 2
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PUSH
6167: LD_INT 120
6169: PUSH
6170: LD_INT 1
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PPUSH
6181: CALL_OW 72
6185: ST_TO_ADDR
// if hurtUnits then
6186: LD_VAR 0 27
6190: IFFALSE 6251
// begin for i in sci do
6192: LD_ADDR_VAR 0 15
6196: PUSH
6197: LD_VAR 0 24
6201: PUSH
6202: FOR_IN
6203: IFFALSE 6247
// if IsInUnit ( i ) then
6205: LD_VAR 0 15
6209: PPUSH
6210: CALL_OW 310
6214: IFFALSE 6227
// ComExitBuilding ( i ) else
6216: LD_VAR 0 15
6220: PPUSH
6221: CALL_OW 122
6225: GO 6245
// ComHeal ( i , hurtUnits [ 1 ] ) ;
6227: LD_VAR 0 15
6231: PPUSH
6232: LD_VAR 0 27
6236: PUSH
6237: LD_INT 1
6239: ARRAY
6240: PPUSH
6241: CALL_OW 128
6245: GO 6202
6247: POP
6248: POP
// end else
6249: GO 6304
// if lab then
6251: LD_VAR 0 18
6255: IFFALSE 6304
// begin for i in sci do
6257: LD_ADDR_VAR 0 15
6261: PUSH
6262: LD_VAR 0 24
6266: PUSH
6267: FOR_IN
6268: IFFALSE 6302
// if not IsInUnit ( i ) then
6270: LD_VAR 0 15
6274: PPUSH
6275: CALL_OW 310
6279: NOT
6280: IFFALSE 6300
// ComEnterUnit ( i , lab [ 1 ] ) ;
6282: LD_VAR 0 15
6286: PPUSH
6287: LD_VAR 0 18
6291: PUSH
6292: LD_INT 1
6294: ARRAY
6295: PPUSH
6296: CALL_OW 120
6300: GO 6267
6302: POP
6303: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
6304: LD_ADDR_VAR 0 19
6308: PUSH
6309: LD_VAR 0 6
6313: PPUSH
6314: LD_INT 25
6316: PUSH
6317: LD_INT 2
6319: PUSH
6320: EMPTY
6321: LIST
6322: LIST
6323: PPUSH
6324: CALL_OW 72
6328: ST_TO_ADDR
// if eng then
6329: LD_VAR 0 19
6333: IFFALSE 7552
// begin for i in eng do
6335: LD_ADDR_VAR 0 15
6339: PUSH
6340: LD_VAR 0 19
6344: PUSH
6345: FOR_IN
6346: IFFALSE 7550
// begin tag := GetTag ( i ) ;
6348: LD_ADDR_VAR 0 21
6352: PUSH
6353: LD_VAR 0 15
6357: PPUSH
6358: CALL_OW 110
6362: ST_TO_ADDR
// if IsInArea ( i , outerArea ) and not tCrates then
6363: LD_VAR 0 15
6367: PPUSH
6368: LD_VAR 0 5
6372: PPUSH
6373: CALL_OW 308
6377: IFFALSE 6384
6379: PUSH
6380: LD_INT 2
6382: NOT
6383: AND
6384: IFFALSE 6415
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
6386: LD_VAR 0 15
6390: PPUSH
6391: LD_VAR 0 12
6395: PUSH
6396: LD_INT 1
6398: ARRAY
6399: PPUSH
6400: LD_VAR 0 12
6404: PUSH
6405: LD_INT 2
6407: ARRAY
6408: PPUSH
6409: CALL_OW 111
// continue ;
6413: GO 6345
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
6415: LD_VAR 0 15
6419: PPUSH
6420: CALL_OW 256
6424: PUSH
6425: LD_INT 800
6427: LESS
6428: IFFALSE 6440
6430: PUSH
6431: LD_VAR 0 21
6435: PUSH
6436: LD_INT 1
6438: NONEQUAL
6439: AND
6440: IFFALSE 6490
// begin SetTag ( i , tHeal ) ;
6442: LD_VAR 0 15
6446: PPUSH
6447: LD_INT 1
6449: PPUSH
6450: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
6454: LD_VAR 0 15
6458: PPUSH
6459: LD_VAR 0 11
6463: PUSH
6464: LD_INT 1
6466: ARRAY
6467: PPUSH
6468: LD_VAR 0 11
6472: PUSH
6473: LD_INT 2
6475: ARRAY
6476: PPUSH
6477: CALL_OW 111
// AddComHold ( i ) ;
6481: LD_VAR 0 15
6485: PPUSH
6486: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
6490: LD_VAR 0 21
6494: PUSH
6495: LD_INT 1
6497: EQUAL
6498: IFFALSE 6515
6500: PUSH
6501: LD_VAR 0 15
6505: PPUSH
6506: CALL_OW 256
6510: PUSH
6511: LD_INT 1000
6513: EQUAL
6514: AND
6515: IFFALSE 6529
// SetTag ( i , 0 ) ;
6517: LD_VAR 0 15
6521: PPUSH
6522: LD_INT 0
6524: PPUSH
6525: CALL_OW 109
// if not tag then
6529: LD_VAR 0 21
6533: NOT
6534: IFFALSE 6705
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
6536: LD_ADDR_VAR 0 17
6540: PUSH
6541: LD_VAR 0 2
6545: PPUSH
6546: LD_INT 57
6548: PUSH
6549: EMPTY
6550: LIST
6551: PPUSH
6552: CALL_OW 70
6556: ST_TO_ADDR
// if undone then
6557: LD_VAR 0 17
6561: IFFALSE 6583
// begin ComComplete ( i , undone [ 1 ] ) ;
6563: LD_VAR 0 15
6567: PPUSH
6568: LD_VAR 0 17
6572: PUSH
6573: LD_INT 1
6575: ARRAY
6576: PPUSH
6577: CALL 24058 0 2
// continue ;
6581: GO 6345
// end ; if cr or tmp or buildingsToBuild then
6583: LD_VAR 0 23
6587: IFTRUE 6595
6589: PUSH
6590: LD_VAR 0 16
6594: OR
6595: IFTRUE 6603
6597: PUSH
6598: LD_VAR 0 10
6602: OR
6603: IFFALSE 6679
// begin if IsInUnit ( i ) then
6605: LD_VAR 0 15
6609: PPUSH
6610: CALL_OW 310
6614: IFFALSE 6625
// ComExitBuilding ( i ) ;
6616: LD_VAR 0 15
6620: PPUSH
6621: CALL_OW 122
// if tmp then
6625: LD_VAR 0 16
6629: IFFALSE 6645
// SetTag ( i , tRepair ) else
6631: LD_VAR 0 15
6635: PPUSH
6636: LD_INT 3
6638: PPUSH
6639: CALL_OW 109
6643: GO 6677
// if cr then
6645: LD_VAR 0 23
6649: IFFALSE 6665
// SetTag ( i , tCrates ) else
6651: LD_VAR 0 15
6655: PPUSH
6656: LD_INT 2
6658: PPUSH
6659: CALL_OW 109
6663: GO 6677
// SetTag ( i , tBuild ) ;
6665: LD_VAR 0 15
6669: PPUSH
6670: LD_INT 5
6672: PPUSH
6673: CALL_OW 109
// end else
6677: GO 6705
// if not IsInUnit ( i ) then
6679: LD_VAR 0 15
6683: PPUSH
6684: CALL_OW 310
6688: NOT
6689: IFFALSE 6705
// ComEnterUnit ( i , depot ) ;
6691: LD_VAR 0 15
6695: PPUSH
6696: LD_VAR 0 35
6700: PPUSH
6701: CALL_OW 120
// end ; if tag = tRepair then
6705: LD_VAR 0 21
6709: PUSH
6710: LD_INT 3
6712: EQUAL
6713: IFFALSE 6819
// begin if IsInUnit ( i ) then
6715: LD_VAR 0 15
6719: PPUSH
6720: CALL_OW 310
6724: IFFALSE 6737
// begin ComExitBuilding ( i ) ;
6726: LD_VAR 0 15
6730: PPUSH
6731: CALL_OW 122
// continue ;
6735: GO 6345
// end ; if not tmp then
6737: LD_VAR 0 16
6741: NOT
6742: IFFALSE 6758
// begin SetTag ( i , 0 ) ;
6744: LD_VAR 0 15
6748: PPUSH
6749: LD_INT 0
6751: PPUSH
6752: CALL_OW 109
// continue ;
6756: GO 6345
// end ; if not HasTask ( i ) then
6758: LD_VAR 0 15
6762: PPUSH
6763: CALL_OW 314
6767: NOT
6768: IFFALSE 6788
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
6770: LD_VAR 0 15
6774: PPUSH
6775: LD_VAR 0 16
6779: PUSH
6780: LD_INT 1
6782: ARRAY
6783: PPUSH
6784: CALL_OW 130
// if not IsInarea ( i , area ) then
6788: LD_VAR 0 15
6792: PPUSH
6793: LD_VAR 0 2
6797: PPUSH
6798: CALL_OW 308
6802: NOT
6803: IFFALSE 6819
// ComMoveToArea ( i , area ) ;
6805: LD_VAR 0 15
6809: PPUSH
6810: LD_VAR 0 2
6814: PPUSH
6815: CALL_OW 113
// end ; if tag = tBuild then
6819: LD_VAR 0 21
6823: PUSH
6824: LD_INT 5
6826: EQUAL
6827: IFFALSE 7401
// begin if IsInUnit ( i ) then
6829: LD_VAR 0 15
6833: PPUSH
6834: CALL_OW 310
6838: IFFALSE 6851
// begin ComExitBuilding ( i ) ;
6840: LD_VAR 0 15
6844: PPUSH
6845: CALL_OW 122
// continue ;
6849: GO 6345
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
6851: LD_VAR 0 10
6855: NOT
6856: IFTRUE 6864
6858: PUSH
6859: LD_VAR 0 29
6863: OR
6864: IFTRUE 6872
6866: PUSH
6867: LD_VAR 0 30
6871: OR
6872: IFFALSE 6890
// begin SetTag ( i , 0 ) ;
6874: LD_VAR 0 15
6878: PPUSH
6879: LD_INT 0
6881: PPUSH
6882: CALL_OW 109
// continue ;
6886: GO 6345
// end else
6888: GO 6929
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
6890: LD_VAR 0 35
6894: PPUSH
6895: LD_VAR 0 10
6899: PUSH
6900: LD_INT 1
6902: ARRAY
6903: PUSH
6904: LD_INT 1
6906: ARRAY
6907: PPUSH
6908: CALL 57949 0 2
6912: NOT
6913: IFFALSE 6929
// begin SetTag ( i , 0 ) ;
6915: LD_VAR 0 15
6919: PPUSH
6920: LD_INT 0
6922: PPUSH
6923: CALL_OW 109
// continue ;
6927: GO 6345
// end ; undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
6929: LD_ADDR_VAR 0 17
6933: PUSH
6934: LD_VAR 0 2
6938: PPUSH
6939: LD_INT 57
6941: PUSH
6942: EMPTY
6943: LIST
6944: PPUSH
6945: CALL_OW 70
6949: ST_TO_ADDR
// if undone then
6950: LD_VAR 0 17
6954: IFFALSE 6976
// begin ComComplete ( i , undone [ 1 ] ) ;
6956: LD_VAR 0 15
6960: PPUSH
6961: LD_VAR 0 17
6965: PUSH
6966: LD_INT 1
6968: ARRAY
6969: PPUSH
6970: CALL 24058 0 2
// continue ;
6974: GO 6345
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_factory , b_barracks ] then
6976: LD_VAR 0 10
6980: PUSH
6981: LD_INT 1
6983: ARRAY
6984: PUSH
6985: LD_INT 1
6987: ARRAY
6988: PUSH
6989: LD_INT 3
6991: PUSH
6992: LD_INT 5
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: IN
6999: IFFALSE 7096
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) and CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
7001: LD_VAR 0 10
7005: PUSH
7006: LD_INT 1
7008: ARRAY
7009: PUSH
7010: LD_INT 2
7012: ARRAY
7013: PPUSH
7014: LD_VAR 0 10
7018: PUSH
7019: LD_INT 1
7021: ARRAY
7022: PUSH
7023: LD_INT 3
7025: ARRAY
7026: PPUSH
7027: CALL_OW 428
7031: IFFALSE 7057
7033: PUSH
7034: LD_VAR 0 35
7038: PPUSH
7039: LD_VAR 0 10
7043: PUSH
7044: LD_INT 1
7046: ARRAY
7047: PUSH
7048: LD_INT 1
7050: ARRAY
7051: PPUSH
7052: CALL 57949 0 2
7056: AND
7057: IFFALSE 7094
// begin ComUpgrade ( HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) ) ;
7059: LD_VAR 0 10
7063: PUSH
7064: LD_INT 1
7066: ARRAY
7067: PUSH
7068: LD_INT 2
7070: ARRAY
7071: PPUSH
7072: LD_VAR 0 10
7076: PUSH
7077: LD_INT 1
7079: ARRAY
7080: PUSH
7081: LD_INT 3
7083: ARRAY
7084: PPUSH
7085: CALL_OW 428
7089: PPUSH
7090: CALL_OW 146
// end ; continue ;
7094: GO 6345
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_lab_half , b_lab_full ] then
7096: LD_VAR 0 10
7100: PUSH
7101: LD_INT 1
7103: ARRAY
7104: PUSH
7105: LD_INT 1
7107: ARRAY
7108: PUSH
7109: LD_INT 7
7111: PUSH
7112: LD_INT 8
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: IN
7119: IFFALSE 7229
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) and CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
7121: LD_VAR 0 10
7125: PUSH
7126: LD_INT 1
7128: ARRAY
7129: PUSH
7130: LD_INT 2
7132: ARRAY
7133: PPUSH
7134: LD_VAR 0 10
7138: PUSH
7139: LD_INT 1
7141: ARRAY
7142: PUSH
7143: LD_INT 3
7145: ARRAY
7146: PPUSH
7147: CALL_OW 428
7151: IFFALSE 7177
7153: PUSH
7154: LD_VAR 0 35
7158: PPUSH
7159: LD_VAR 0 10
7163: PUSH
7164: LD_INT 1
7166: ARRAY
7167: PUSH
7168: LD_INT 1
7170: ARRAY
7171: PPUSH
7172: CALL 57949 0 2
7176: AND
7177: IFFALSE 7227
// begin ComUpgradeLab ( HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) , buildingsToBuild [ 1 ] [ 5 ] ) ;
7179: LD_VAR 0 10
7183: PUSH
7184: LD_INT 1
7186: ARRAY
7187: PUSH
7188: LD_INT 2
7190: ARRAY
7191: PPUSH
7192: LD_VAR 0 10
7196: PUSH
7197: LD_INT 1
7199: ARRAY
7200: PUSH
7201: LD_INT 3
7203: ARRAY
7204: PPUSH
7205: CALL_OW 428
7209: PPUSH
7210: LD_VAR 0 10
7214: PUSH
7215: LD_INT 1
7217: ARRAY
7218: PUSH
7219: LD_INT 5
7221: ARRAY
7222: PPUSH
7223: CALL_OW 147
// end ; continue ;
7227: GO 6345
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_bunker , b_turret ] then
7229: LD_VAR 0 10
7233: PUSH
7234: LD_INT 1
7236: ARRAY
7237: PUSH
7238: LD_INT 1
7240: ARRAY
7241: PUSH
7242: LD_INT 32
7244: PUSH
7245: LD_INT 33
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: IN
7252: IFFALSE 7328
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) then
7254: LD_VAR 0 10
7258: PUSH
7259: LD_INT 1
7261: ARRAY
7262: PUSH
7263: LD_INT 2
7265: ARRAY
7266: PPUSH
7267: LD_VAR 0 10
7271: PUSH
7272: LD_INT 1
7274: ARRAY
7275: PUSH
7276: LD_INT 3
7278: ARRAY
7279: PPUSH
7280: CALL_OW 428
7284: IFFALSE 7328
// begin ComDismantle ( i , HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) ) ;
7286: LD_VAR 0 15
7290: PPUSH
7291: LD_VAR 0 10
7295: PUSH
7296: LD_INT 1
7298: ARRAY
7299: PUSH
7300: LD_INT 2
7302: ARRAY
7303: PPUSH
7304: LD_VAR 0 10
7308: PUSH
7309: LD_INT 1
7311: ARRAY
7312: PUSH
7313: LD_INT 3
7315: ARRAY
7316: PPUSH
7317: CALL_OW 428
7321: PPUSH
7322: CALL_OW 167
// continue ;
7326: GO 6345
// end ; end ; if not HasTask ( i ) then
7328: LD_VAR 0 15
7332: PPUSH
7333: CALL_OW 314
7337: NOT
7338: IFFALSE 7401
// ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
7340: LD_VAR 0 15
7344: PPUSH
7345: LD_VAR 0 10
7349: PUSH
7350: LD_INT 1
7352: ARRAY
7353: PUSH
7354: LD_INT 1
7356: ARRAY
7357: PPUSH
7358: LD_VAR 0 10
7362: PUSH
7363: LD_INT 1
7365: ARRAY
7366: PUSH
7367: LD_INT 2
7369: ARRAY
7370: PPUSH
7371: LD_VAR 0 10
7375: PUSH
7376: LD_INT 1
7378: ARRAY
7379: PUSH
7380: LD_INT 3
7382: ARRAY
7383: PPUSH
7384: LD_VAR 0 10
7388: PUSH
7389: LD_INT 1
7391: ARRAY
7392: PUSH
7393: LD_INT 4
7395: ARRAY
7396: PPUSH
7397: CALL_OW 145
// end ; if tag = tCrates then
7401: LD_VAR 0 21
7405: PUSH
7406: LD_INT 2
7408: EQUAL
7409: IFFALSE 7548
// begin if IsInUnit ( i ) then
7411: LD_VAR 0 15
7415: PPUSH
7416: CALL_OW 310
7420: IFFALSE 7433
// begin ComExitBuilding ( i ) ;
7422: LD_VAR 0 15
7426: PPUSH
7427: CALL_OW 122
// continue ;
7431: GO 6345
// end ; if not cr then
7433: LD_VAR 0 23
7437: NOT
7438: IFFALSE 7454
// begin SetTag ( i , 0 ) ;
7440: LD_VAR 0 15
7444: PPUSH
7445: LD_INT 0
7447: PPUSH
7448: CALL_OW 109
// continue ;
7452: GO 6345
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
7454: LD_VAR 0 15
7458: PPUSH
7459: CALL_OW 314
7463: NOT
7464: IFFALSE 7519
7466: PUSH
7467: LD_INT 81
7469: PUSH
7470: LD_VAR 0 1
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: LD_INT 92
7481: PUSH
7482: LD_VAR 0 23
7486: PUSH
7487: LD_INT 1
7489: ARRAY
7490: PUSH
7491: LD_VAR 0 23
7495: PUSH
7496: LD_INT 2
7498: ARRAY
7499: PUSH
7500: LD_INT 12
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: PPUSH
7513: CALL_OW 69
7517: NOT
7518: AND
7519: IFFALSE 7548
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
7521: LD_VAR 0 15
7525: PPUSH
7526: LD_VAR 0 23
7530: PUSH
7531: LD_INT 1
7533: ARRAY
7534: PPUSH
7535: LD_VAR 0 23
7539: PUSH
7540: LD_INT 2
7542: ARRAY
7543: PPUSH
7544: CALL_OW 117
// end ; end ;
7548: GO 6345
7550: POP
7551: POP
// end ; if vehicles then
7552: LD_VAR 0 7
7556: IFFALSE 8618
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ru_crane ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , us_cargo_bay ] ] ] , [ f_ok ] ] ) ;
7558: LD_ADDR_VAR 0 7
7562: PUSH
7563: LD_VAR 0 7
7567: PPUSH
7568: LD_INT 3
7570: PUSH
7571: LD_INT 2
7573: PUSH
7574: LD_INT 34
7576: PUSH
7577: LD_INT 52
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 34
7586: PUSH
7587: LD_INT 51
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: PUSH
7594: LD_INT 34
7596: PUSH
7597: LD_INT 13
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: PUSH
7604: LD_INT 34
7606: PUSH
7607: LD_INT 12
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PUSH
7625: LD_INT 50
7627: PUSH
7628: EMPTY
7629: LIST
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PPUSH
7635: CALL_OW 72
7639: ST_TO_ADDR
// if vehicles then
7640: LD_VAR 0 7
7644: IFFALSE 8618
// begin for i in vehicles do
7646: LD_ADDR_VAR 0 15
7650: PUSH
7651: LD_VAR 0 7
7655: PUSH
7656: FOR_IN
7657: IFFALSE 8616
// begin tag := GetTag ( i ) ;
7659: LD_ADDR_VAR 0 21
7663: PUSH
7664: LD_VAR 0 15
7668: PPUSH
7669: CALL_OW 110
7673: ST_TO_ADDR
// if not tag then
7674: LD_VAR 0 21
7678: NOT
7679: IFFALSE 7816
// begin if GetControl ( i ) = control_manual then
7681: LD_VAR 0 15
7685: PPUSH
7686: CALL_OW 263
7690: PUSH
7691: LD_INT 1
7693: EQUAL
7694: IFFALSE 7802
// begin drivers := UnitFilter ( mech , [ f_tag , tMech ] ) ;
7696: LD_ADDR_VAR 0 26
7700: PUSH
7701: LD_VAR 0 20
7705: PPUSH
7706: LD_INT 120
7708: PUSH
7709: LD_INT 7
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: PPUSH
7716: CALL_OW 72
7720: ST_TO_ADDR
// if not drivers then
7721: LD_VAR 0 26
7725: NOT
7726: IFFALSE 7782
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
7728: LD_ADDR_VAR 0 26
7732: PUSH
7733: LD_VAR 0 20
7737: PPUSH
7738: LD_INT 3
7740: PUSH
7741: LD_INT 120
7743: PUSH
7744: LD_INT 7
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PPUSH
7755: CALL_OW 72
7759: ST_TO_ADDR
// if drivers then
7760: LD_VAR 0 26
7764: IFFALSE 7782
// begin SetTag ( drivers [ 1 ] , tMech ) ;
7766: LD_VAR 0 26
7770: PUSH
7771: LD_INT 1
7773: ARRAY
7774: PPUSH
7775: LD_INT 7
7777: PPUSH
7778: CALL_OW 109
// end ; end ; if drivers then
7782: LD_VAR 0 26
7786: IFFALSE 7800
// SetTag ( i , tBusy ) ;
7788: LD_VAR 0 15
7792: PPUSH
7793: LD_INT 8
7795: PPUSH
7796: CALL_OW 109
// continue ;
7800: GO 7656
// end ; SetTag ( i , tBusy ) ;
7802: LD_VAR 0 15
7806: PPUSH
7807: LD_INT 8
7809: PPUSH
7810: CALL_OW 109
// end else
7814: GO 8614
// if tag = tBusy then
7816: LD_VAR 0 21
7820: PUSH
7821: LD_INT 8
7823: EQUAL
7824: IFFALSE 8079
// begin if GetLives ( i ) = 1000 then
7826: LD_VAR 0 15
7830: PPUSH
7831: CALL_OW 256
7835: PUSH
7836: LD_INT 1000
7838: EQUAL
7839: IFFALSE 8077
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
7841: LD_VAR 0 15
7845: PPUSH
7846: CALL_OW 263
7850: PUSH
7851: LD_INT 1
7853: EQUAL
7854: IFFALSE 7868
7856: PUSH
7857: LD_VAR 0 15
7861: PPUSH
7862: CALL_OW 311
7866: NOT
7867: AND
7868: IFFALSE 8045
// begin drivers := UnitFilter ( mech , [ f_tag , tMech ] ) ;
7870: LD_ADDR_VAR 0 26
7874: PUSH
7875: LD_VAR 0 20
7879: PPUSH
7880: LD_INT 120
7882: PUSH
7883: LD_INT 7
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PPUSH
7890: CALL_OW 72
7894: ST_TO_ADDR
// if not drivers then
7895: LD_VAR 0 26
7899: NOT
7900: IFFALSE 7916
// begin SetTag ( i , 0 ) ;
7902: LD_VAR 0 15
7906: PPUSH
7907: LD_INT 0
7909: PPUSH
7910: CALL_OW 109
// continue ;
7914: GO 7656
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
7916: LD_VAR 0 26
7920: PUSH
7921: LD_INT 1
7923: ARRAY
7924: PPUSH
7925: CALL_OW 310
7929: IFFALSE 7947
7931: PUSH
7932: LD_VAR 0 26
7936: PUSH
7937: LD_INT 1
7939: ARRAY
7940: PPUSH
7941: CALL 51434 0 1
7945: NOT
7946: AND
7947: IFFALSE 7962
// ComExitBuilding ( drivers [ 1 ] ) ;
7949: LD_VAR 0 26
7953: PUSH
7954: LD_INT 1
7956: ARRAY
7957: PPUSH
7958: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
7962: LD_VAR 0 7
7966: PPUSH
7967: LD_INT 120
7969: PUSH
7970: LD_INT 3
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: PPUSH
7977: CALL_OW 72
7981: IFFALSE 7999
7983: PUSH
7984: LD_VAR 0 26
7988: PUSH
7989: LD_INT 1
7991: ARRAY
7992: PPUSH
7993: CALL_OW 314
7997: NOT
7998: AND
7999: IFTRUE 8023
8001: PUSH
8002: LD_VAR 0 7
8006: PPUSH
8007: LD_INT 120
8009: PUSH
8010: LD_INT 3
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PPUSH
8017: CALL_OW 72
8021: NOT
8022: OR
8023: IFFALSE 8043
// ComEnterUnit ( drivers [ 1 ] , i ) ;
8025: LD_VAR 0 26
8029: PUSH
8030: LD_INT 1
8032: ARRAY
8033: PPUSH
8034: LD_VAR 0 15
8038: PPUSH
8039: CALL_OW 120
// continue ;
8043: GO 7656
// end ; if allowToPatrol then
8045: LD_VAR 0 13
8049: IFFALSE 8065
// SetTag ( i , tPatrol ) else
8051: LD_VAR 0 15
8055: PPUSH
8056: LD_INT 15
8058: PPUSH
8059: CALL_OW 109
8063: GO 8077
// SetTag ( i , tAttack ) ;
8065: LD_VAR 0 15
8069: PPUSH
8070: LD_INT 13
8072: PPUSH
8073: CALL_OW 109
// end ; end else
8077: GO 8614
// if tag = tPatrol then
8079: LD_VAR 0 21
8083: PUSH
8084: LD_INT 15
8086: EQUAL
8087: IFFALSE 8281
// begin if GetLives ( i ) < 650 then
8089: LD_VAR 0 15
8093: PPUSH
8094: CALL_OW 256
8098: PUSH
8099: LD_INT 650
8101: LESS
8102: IFFALSE 8145
// begin SetTag ( i , tVehRepair ) ;
8104: LD_VAR 0 15
8108: PPUSH
8109: LD_INT 9
8111: PPUSH
8112: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8116: LD_VAR 0 15
8120: PPUSH
8121: LD_VAR 0 12
8125: PUSH
8126: LD_INT 1
8128: ARRAY
8129: PPUSH
8130: LD_VAR 0 12
8134: PUSH
8135: LD_INT 2
8137: ARRAY
8138: PPUSH
8139: CALL_OW 111
// continue ;
8143: GO 7656
// end ; if GetEngine ( i ) = engine_combustion then
8145: LD_VAR 0 15
8149: PPUSH
8150: CALL_OW 262
8154: PUSH
8155: LD_INT 1
8157: EQUAL
8158: IFFALSE 8205
// if GetFuel ( i ) < 30 then
8160: LD_VAR 0 15
8164: PPUSH
8165: CALL_OW 261
8169: PUSH
8170: LD_INT 30
8172: LESS
8173: IFFALSE 8205
// begin ComMoveUnit ( i , depot ) ;
8175: LD_VAR 0 15
8179: PPUSH
8180: LD_VAR 0 35
8184: PPUSH
8185: CALL_OW 112
// AddComRefuel ( i , depot ) ;
8189: LD_VAR 0 15
8193: PPUSH
8194: LD_VAR 0 35
8198: PPUSH
8199: CALL_OW 210
// continue ;
8203: GO 7656
// end ; if GetDistUnitXY ( i , allowToPatrol [ 1 ] , allowToPatrol [ 2 ] ) > 12 and not HasTask ( i ) then
8205: LD_VAR 0 15
8209: PPUSH
8210: LD_VAR 0 13
8214: PUSH
8215: LD_INT 1
8217: ARRAY
8218: PPUSH
8219: LD_VAR 0 13
8223: PUSH
8224: LD_INT 2
8226: ARRAY
8227: PPUSH
8228: CALL_OW 297
8232: PUSH
8233: LD_INT 12
8235: GREATER
8236: IFFALSE 8250
8238: PUSH
8239: LD_VAR 0 15
8243: PPUSH
8244: CALL_OW 314
8248: NOT
8249: AND
8250: IFFALSE 8279
// ComAgressiveMove ( i , allowToPatrol [ 1 ] , allowToPatrol [ 2 ] ) ;
8252: LD_VAR 0 15
8256: PPUSH
8257: LD_VAR 0 13
8261: PUSH
8262: LD_INT 1
8264: ARRAY
8265: PPUSH
8266: LD_VAR 0 13
8270: PUSH
8271: LD_INT 2
8273: ARRAY
8274: PPUSH
8275: CALL_OW 114
// end else
8279: GO 8614
// if tag = tAttack then
8281: LD_VAR 0 21
8285: PUSH
8286: LD_INT 13
8288: EQUAL
8289: IFFALSE 8471
// begin enemy := enemyInBase ;
8291: LD_ADDR_VAR 0 28
8295: PUSH
8296: LD_VAR 0 29
8300: ST_TO_ADDR
// if not enemy then
8301: LD_VAR 0 28
8305: NOT
8306: IFFALSE 8318
// enemy := enemyOuterBase ;
8308: LD_ADDR_VAR 0 28
8312: PUSH
8313: LD_VAR 0 30
8317: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
8318: LD_VAR 0 28
8322: NOT
8323: IFFALSE 8358
8325: PUSH
8326: LD_VAR 0 15
8330: PPUSH
8331: LD_VAR 0 12
8335: PUSH
8336: LD_INT 1
8338: ARRAY
8339: PPUSH
8340: LD_VAR 0 12
8344: PUSH
8345: LD_INT 2
8347: ARRAY
8348: PPUSH
8349: CALL_OW 297
8353: PUSH
8354: LD_INT 10
8356: GREATER
8357: AND
8358: IFFALSE 8389
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8360: LD_VAR 0 15
8364: PPUSH
8365: LD_VAR 0 12
8369: PUSH
8370: LD_INT 1
8372: ARRAY
8373: PPUSH
8374: LD_VAR 0 12
8378: PUSH
8379: LD_INT 2
8381: ARRAY
8382: PPUSH
8383: CALL_OW 111
// continue ;
8387: GO 7656
// end ; if GetLives ( i ) < 650 then
8389: LD_VAR 0 15
8393: PPUSH
8394: CALL_OW 256
8398: PUSH
8399: LD_INT 650
8401: LESS
8402: IFFALSE 8445
// begin SetTag ( i , tVehRepair ) ;
8404: LD_VAR 0 15
8408: PPUSH
8409: LD_INT 9
8411: PPUSH
8412: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8416: LD_VAR 0 15
8420: PPUSH
8421: LD_VAR 0 12
8425: PUSH
8426: LD_INT 1
8428: ARRAY
8429: PPUSH
8430: LD_VAR 0 12
8434: PUSH
8435: LD_INT 2
8437: ARRAY
8438: PPUSH
8439: CALL_OW 111
// continue ;
8443: GO 7656
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8445: LD_VAR 0 15
8449: PPUSH
8450: LD_VAR 0 28
8454: PPUSH
8455: LD_VAR 0 15
8459: PPUSH
8460: CALL_OW 74
8464: PPUSH
8465: CALL_OW 115
// end else
8469: GO 8614
// if tag = tVehRepair then
8471: LD_VAR 0 21
8475: PUSH
8476: LD_INT 9
8478: EQUAL
8479: IFFALSE 8614
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
8481: LD_VAR 0 15
8485: PPUSH
8486: LD_VAR 0 12
8490: PUSH
8491: LD_INT 1
8493: ARRAY
8494: PPUSH
8495: LD_VAR 0 12
8499: PUSH
8500: LD_INT 2
8502: ARRAY
8503: PPUSH
8504: CALL_OW 297
8508: PUSH
8509: LD_INT 10
8511: GREATER
8512: IFFALSE 8543
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8514: LD_VAR 0 15
8518: PPUSH
8519: LD_VAR 0 12
8523: PUSH
8524: LD_INT 1
8526: ARRAY
8527: PPUSH
8528: LD_VAR 0 12
8532: PUSH
8533: LD_INT 2
8535: ARRAY
8536: PPUSH
8537: CALL_OW 111
// continue ;
8541: GO 7656
// end ; if GetLives ( i ) = 1000 then
8543: LD_VAR 0 15
8547: PPUSH
8548: CALL_OW 256
8552: PUSH
8553: LD_INT 1000
8555: EQUAL
8556: IFFALSE 8572
// begin SetTag ( i , tBusy ) ;
8558: LD_VAR 0 15
8562: PPUSH
8563: LD_INT 8
8565: PPUSH
8566: CALL_OW 109
// continue ;
8570: GO 7656
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
8572: LD_VAR 0 15
8576: PPUSH
8577: CALL_OW 263
8581: PUSH
8582: LD_INT 1
8584: EQUAL
8585: IFFALSE 8598
8587: PUSH
8588: LD_VAR 0 15
8592: PPUSH
8593: CALL_OW 311
8597: AND
8598: IFFALSE 8614
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
8600: LD_VAR 0 15
8604: PPUSH
8605: CALL_OW 311
8609: PPUSH
8610: CALL 55568 0 1
// end ; end ;
8614: GO 7656
8616: POP
8617: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
8618: LD_ADDR_VAR 0 25
8622: PUSH
8623: LD_VAR 0 6
8627: PPUSH
8628: LD_INT 2
8630: PUSH
8631: LD_INT 25
8633: PUSH
8634: LD_INT 1
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: LD_INT 25
8643: PUSH
8644: LD_INT 8
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: LD_INT 25
8653: PUSH
8654: LD_INT 5
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: PUSH
8661: LD_INT 25
8663: PUSH
8664: LD_INT 9
8666: PUSH
8667: EMPTY
8668: LIST
8669: LIST
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: PUSH
8678: LD_INT 50
8680: PUSH
8681: EMPTY
8682: LIST
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PPUSH
8688: CALL_OW 72
8692: ST_TO_ADDR
// if sol then
8693: LD_VAR 0 25
8697: IFFALSE 9509
// begin if enemyInBase then
8699: LD_VAR 0 29
8703: IFFALSE 8882
// begin for i in sol do
8705: LD_ADDR_VAR 0 15
8709: PUSH
8710: LD_VAR 0 25
8714: PUSH
8715: FOR_IN
8716: IFFALSE 8878
// begin tw := IsInUnit ( i ) ;
8718: LD_ADDR_VAR 0 22
8722: PUSH
8723: LD_VAR 0 15
8727: PPUSH
8728: CALL_OW 310
8732: ST_TO_ADDR
// if tw then
8733: LD_VAR 0 22
8737: IFFALSE 8820
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8739: LD_VAR 0 22
8743: PUSH
8744: LD_INT 22
8746: PUSH
8747: LD_VAR 0 1
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 101
8758: PUSH
8759: LD_VAR 0 36
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: PUSH
8768: LD_INT 2
8770: PUSH
8771: LD_INT 30
8773: PUSH
8774: LD_INT 32
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PUSH
8781: LD_INT 30
8783: PUSH
8784: LD_INT 31
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: LIST
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: LIST
8800: PPUSH
8801: CALL_OW 69
8805: IN
8806: NOT
8807: IFFALSE 8818
// ComExitBuilding ( i ) ;
8809: LD_VAR 0 15
8813: PPUSH
8814: CALL_OW 122
// end else
8818: GO 8876
// if IsInarea ( i , area ) then
8820: LD_VAR 0 15
8824: PPUSH
8825: LD_VAR 0 2
8829: PPUSH
8830: CALL_OW 308
8834: IFFALSE 8862
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
8836: LD_VAR 0 15
8840: PPUSH
8841: LD_VAR 0 29
8845: PPUSH
8846: LD_VAR 0 15
8850: PPUSH
8851: CALL_OW 74
8855: PPUSH
8856: CALL_OW 115
8860: GO 8876
// ComMoveToArea ( i , area ) ;
8862: LD_VAR 0 15
8866: PPUSH
8867: LD_VAR 0 2
8871: PPUSH
8872: CALL_OW 113
// end ;
8876: GO 8715
8878: POP
8879: POP
// end else
8880: GO 9509
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
8882: LD_ADDR_VAR 0 31
8886: PUSH
8887: LD_VAR 0 2
8891: PPUSH
8892: LD_INT 3
8894: PUSH
8895: LD_INT 62
8897: PUSH
8898: EMPTY
8899: LIST
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: PUSH
8905: LD_INT 3
8907: PUSH
8908: LD_INT 57
8910: PUSH
8911: EMPTY
8912: LIST
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: LD_INT 2
8920: PUSH
8921: LD_INT 30
8923: PUSH
8924: LD_INT 32
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: LD_INT 30
8933: PUSH
8934: LD_INT 4
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PUSH
8941: LD_INT 30
8943: PUSH
8944: LD_INT 5
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PUSH
8951: LD_INT 30
8953: PUSH
8954: LD_INT 31
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: LIST
8972: PPUSH
8973: CALL_OW 70
8977: ST_TO_ADDR
// emptyTowers := [ ] ;
8978: LD_ADDR_VAR 0 33
8982: PUSH
8983: EMPTY
8984: ST_TO_ADDR
// if empty then
8985: LD_VAR 0 31
8989: IFFALSE 9055
// emptyTowers := UnitFilter ( empty , [ [ f_not , [ f_tag , tTower ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
8991: LD_ADDR_VAR 0 33
8995: PUSH
8996: LD_VAR 0 31
9000: PPUSH
9001: LD_INT 3
9003: PUSH
9004: LD_INT 120
9006: PUSH
9007: LD_INT 10
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: PUSH
9018: LD_INT 2
9020: PUSH
9021: LD_INT 30
9023: PUSH
9024: LD_INT 32
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: PUSH
9031: LD_INT 30
9033: PUSH
9034: LD_INT 33
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: LIST
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PPUSH
9050: CALL_OW 72
9054: ST_TO_ADDR
// for i in sol do
9055: LD_ADDR_VAR 0 15
9059: PUSH
9060: LD_VAR 0 25
9064: PUSH
9065: FOR_IN
9066: IFFALSE 9507
// begin tag := GetTag ( i ) ;
9068: LD_ADDR_VAR 0 21
9072: PUSH
9073: LD_VAR 0 15
9077: PPUSH
9078: CALL_OW 110
9082: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
9083: LD_VAR 0 15
9087: PPUSH
9088: CALL_OW 256
9092: PUSH
9093: LD_INT 1000
9095: LESS
9096: IFFALSE 9108
9098: PUSH
9099: LD_VAR 0 21
9103: PUSH
9104: LD_INT 1
9106: NONEQUAL
9107: AND
9108: IFFALSE 9160
// begin SetTag ( i , tHeal ) ;
9110: LD_VAR 0 15
9114: PPUSH
9115: LD_INT 1
9117: PPUSH
9118: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
9122: LD_VAR 0 15
9126: PPUSH
9127: LD_VAR 0 11
9131: PUSH
9132: LD_INT 1
9134: ARRAY
9135: PPUSH
9136: LD_VAR 0 11
9140: PUSH
9141: LD_INT 2
9143: ARRAY
9144: PPUSH
9145: CALL_OW 111
// AddComHold ( i ) ;
9149: LD_VAR 0 15
9153: PPUSH
9154: CALL_OW 200
// continue ;
9158: GO 9065
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
9160: LD_VAR 0 15
9164: PPUSH
9165: CALL_OW 256
9169: PUSH
9170: LD_INT 1000
9172: EQUAL
9173: IFFALSE 9185
9175: PUSH
9176: LD_VAR 0 21
9180: PUSH
9181: LD_INT 1
9183: EQUAL
9184: AND
9185: IFFALSE 9201
// begin SetTag ( i , 0 ) ;
9187: LD_VAR 0 15
9191: PPUSH
9192: LD_INT 0
9194: PPUSH
9195: CALL_OW 109
// continue ;
9199: GO 9065
// end ; if HasTask ( i ) then
9201: LD_VAR 0 15
9205: PPUSH
9206: CALL_OW 314
9210: IFFALSE 9214
// continue ;
9212: GO 9065
// if not IsInUnit ( i ) and not tag and empty then
9214: LD_VAR 0 15
9218: PPUSH
9219: CALL_OW 310
9223: NOT
9224: IFFALSE 9233
9226: PUSH
9227: LD_VAR 0 21
9231: NOT
9232: AND
9233: IFFALSE 9241
9235: PUSH
9236: LD_VAR 0 31
9240: AND
9241: IFFALSE 9281
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
9243: LD_VAR 0 15
9247: PPUSH
9248: LD_VAR 0 31
9252: PUSH
9253: LD_INT 1
9255: ARRAY
9256: PPUSH
9257: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
9261: LD_ADDR_VAR 0 31
9265: PUSH
9266: LD_VAR 0 31
9270: PPUSH
9271: LD_INT 1
9273: PPUSH
9274: CALL_OW 3
9278: ST_TO_ADDR
// continue ;
9279: GO 9065
// end ; if IsInUnit ( i ) and not tag and emptyTowers then
9281: LD_VAR 0 15
9285: PPUSH
9286: CALL_OW 310
9290: IFFALSE 9299
9292: PUSH
9293: LD_VAR 0 21
9297: NOT
9298: AND
9299: IFFALSE 9307
9301: PUSH
9302: LD_VAR 0 33
9306: AND
9307: IFFALSE 9505
// begin if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
9309: LD_VAR 0 15
9313: PPUSH
9314: CALL_OW 310
9318: PPUSH
9319: CALL_OW 266
9323: PUSH
9324: LD_INT 32
9326: PUSH
9327: LD_INT 31
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: IN
9334: IFFALSE 9338
// continue ;
9336: GO 9065
// SetTag ( i , tTower ) ;
9338: LD_VAR 0 15
9342: PPUSH
9343: LD_INT 10
9345: PPUSH
9346: CALL_OW 109
// SetTag ( emptyTowers [ 1 ] , tTower ) ;
9350: LD_VAR 0 33
9354: PUSH
9355: LD_INT 1
9357: ARRAY
9358: PPUSH
9359: LD_INT 10
9361: PPUSH
9362: CALL_OW 109
// ComExit ( i ) ;
9366: LD_VAR 0 15
9370: PPUSH
9371: CALL 54252 0 1
// AddComEnterUnit ( i , emptyTowers [ 1 ] ) ;
9375: LD_VAR 0 15
9379: PPUSH
9380: LD_VAR 0 33
9384: PUSH
9385: LD_INT 1
9387: ARRAY
9388: PPUSH
9389: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
9393: LD_INT 35
9395: PPUSH
9396: CALL_OW 67
// if not HasTask ( i ) then
9400: LD_VAR 0 15
9404: PPUSH
9405: CALL_OW 314
9409: NOT
9410: IFFALSE 9430
// ComEnterUnit ( i , emptyTowers [ 1 ] ) ;
9412: LD_VAR 0 15
9416: PPUSH
9417: LD_VAR 0 33
9421: PUSH
9422: LD_INT 1
9424: ARRAY
9425: PPUSH
9426: CALL_OW 120
// if not IsEmpty ( emptyTowers [ 1 ] ) then
9430: LD_VAR 0 33
9434: PUSH
9435: LD_INT 1
9437: ARRAY
9438: PPUSH
9439: CALL 17944 0 1
9443: NOT
9444: IFFALSE 9448
// break ;
9446: GO 9473
// until IsInUnit ( i ) or not IsOk ( i ) ;
9448: LD_VAR 0 15
9452: PPUSH
9453: CALL_OW 310
9457: IFTRUE 9471
9459: PUSH
9460: LD_VAR 0 15
9464: PPUSH
9465: CALL_OW 302
9469: NOT
9470: OR
9471: IFFALSE 9393
// SetTag ( i , 0 ) ;
9473: LD_VAR 0 15
9477: PPUSH
9478: LD_INT 0
9480: PPUSH
9481: CALL_OW 109
// SetTag ( emptyTowers [ 1 ] , 0 ) ;
9485: LD_VAR 0 33
9489: PUSH
9490: LD_INT 1
9492: ARRAY
9493: PPUSH
9494: LD_INT 0
9496: PPUSH
9497: CALL_OW 109
// exit ;
9501: POP
9502: POP
9503: GO 9509
// end ; end ;
9505: GO 9065
9507: POP
9508: POP
// end ; end ; end ; end_of_file
9509: LD_VAR 0 14
9513: RET
// export function Action ; var i , c , tmp ; begin
9514: LD_INT 0
9516: PPUSH
9517: PPUSH
9518: PPUSH
9519: PPUSH
// InGameOn ;
9520: CALL_OW 8
// RevealFogArea ( 3 , prevMissionFogArea ) ;
9524: LD_INT 3
9526: PPUSH
9527: LD_INT 5
9529: PPUSH
9530: CALL_OW 332
// PlaceHumanInUnit ( Kurin , kirovDepot ) ;
9534: LD_EXP 30
9538: PPUSH
9539: LD_EXP 42
9543: PPUSH
9544: CALL_OW 52
// PlaceHumanInUnit ( Burlak , kirovDepot ) ;
9548: LD_EXP 26
9552: PPUSH
9553: LD_EXP 42
9557: PPUSH
9558: CALL_OW 52
// if Belkov then
9562: LD_EXP 28
9566: IFFALSE 9582
// PlaceHumanInUnit ( Belkov , kirovDepot ) ;
9568: LD_EXP 28
9572: PPUSH
9573: LD_EXP 42
9577: PPUSH
9578: CALL_OW 52
// PlaceHumanInUnit ( Popov , kirovDepot ) ;
9582: LD_EXP 32
9586: PPUSH
9587: LD_EXP 42
9591: PPUSH
9592: CALL_OW 52
// CenterNowOnXY ( 159 , 103 ) ;
9596: LD_INT 159
9598: PPUSH
9599: LD_INT 103
9601: PPUSH
9602: CALL_OW 86
// wait ( 0 0$0.3 ) ;
9606: LD_INT 10
9608: PPUSH
9609: CALL_OW 67
// if not Belkov then
9613: LD_EXP 28
9617: NOT
9618: IFFALSE 9715
// begin Say ( Kurin , D1a-Kur-1 ) ;
9620: LD_EXP 30
9624: PPUSH
9625: LD_STRING D1a-Kur-1
9627: PPUSH
9628: CALL_OW 88
// if not belkovSaved then
9632: LD_EXP 6
9636: NOT
9637: IFFALSE 9663
// begin Say ( Burlak , D1a-Bur-1 ) ;
9639: LD_EXP 26
9643: PPUSH
9644: LD_STRING D1a-Bur-1
9646: PPUSH
9647: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
9651: LD_EXP 30
9655: PPUSH
9656: LD_STRING D1a-Kur-2
9658: PPUSH
9659: CALL_OW 88
// end ; if wasSelfish then
9663: LD_EXP 4
9667: IFFALSE 9681
// Say ( Kurin , D1a-Kur-2a ) ;
9669: LD_EXP 30
9673: PPUSH
9674: LD_STRING D1a-Kur-2a
9676: PPUSH
9677: CALL_OW 88
// hasProblem := true ;
9681: LD_ADDR_EXP 5
9685: PUSH
9686: LD_INT 1
9688: ST_TO_ADDR
// Say ( Kurin , D1a-Kur-2b ) ;
9689: LD_EXP 30
9693: PPUSH
9694: LD_STRING D1a-Kur-2b
9696: PPUSH
9697: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
9701: LD_EXP 26
9705: PPUSH
9706: LD_STRING D1a-Bur-2
9708: PPUSH
9709: CALL_OW 88
// end else
9713: GO 9751
// begin Say ( Kurin , D1b-Kur-1 ) ;
9715: LD_EXP 30
9719: PPUSH
9720: LD_STRING D1b-Kur-1
9722: PPUSH
9723: CALL_OW 88
// Say ( Belkov , D1b-Bel-1 ) ;
9727: LD_EXP 28
9731: PPUSH
9732: LD_STRING D1b-Bel-1
9734: PPUSH
9735: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
9739: LD_EXP 30
9743: PPUSH
9744: LD_STRING D1b-Kur-2
9746: PPUSH
9747: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
9751: LD_EXP 30
9755: PPUSH
9756: LD_STRING D2-Kur-1
9758: PPUSH
9759: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
9763: LD_EXP 26
9767: PPUSH
9768: LD_STRING D2-Bur-1
9770: PPUSH
9771: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
9775: LD_EXP 30
9779: PPUSH
9780: LD_STRING D2-Kur-2
9782: PPUSH
9783: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
9787: LD_EXP 26
9791: PPUSH
9792: LD_STRING D2-Bur-2
9794: PPUSH
9795: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
9799: LD_EXP 30
9803: PPUSH
9804: LD_STRING D2-Kur-3
9806: PPUSH
9807: CALL_OW 88
// wait ( 0 0$0.5 ) ;
9811: LD_INT 18
9813: PPUSH
9814: CALL_OW 67
// Say ( Popov , D2-Pop-3 ) ;
9818: LD_EXP 32
9822: PPUSH
9823: LD_STRING D2-Pop-3
9825: PPUSH
9826: CALL_OW 88
// Say ( Kurin , D2-Kur-4 ) ;
9830: LD_EXP 30
9834: PPUSH
9835: LD_STRING D2-Kur-4
9837: PPUSH
9838: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
9842: LD_EXP 26
9846: PPUSH
9847: LD_STRING D2-Bur-4
9849: PPUSH
9850: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
9854: LD_EXP 30
9858: PPUSH
9859: LD_STRING D2-Kur-5
9861: PPUSH
9862: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
9866: LD_EXP 26
9870: PPUSH
9871: LD_STRING D2-Bur-5
9873: PPUSH
9874: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
9878: LD_EXP 30
9882: PPUSH
9883: LD_STRING D2-Kur-6
9885: PPUSH
9886: CALL_OW 88
// beriaBaseSquad := CharacterSelection ( 1 , [ 7 , 6 , 6 , 5 ] [ Difficulty ] , [ 7 , 6 , 6 , 5 ] [ Difficulty ] , [ sel_change_class , Burlak , sel_changeable , sel_change_class ] ^ Belkov ^ Gnyevko ^ Kirilenkova ^ Kovalyuk ^ beriaTeam ^ [ sel_not_hired , sel_not_changeable , sel_dont_change_class , Kurin , Popov ] ^ [ sel_changeable , sel_change_class ] ^ kirovTeam , [ [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_mechanic , 0 ] , [ class_soldier , 2 ] ] ) ;
9890: LD_ADDR_EXP 36
9894: PUSH
9895: LD_STRING 1
9897: PPUSH
9898: LD_INT 7
9900: PUSH
9901: LD_INT 6
9903: PUSH
9904: LD_INT 6
9906: PUSH
9907: LD_INT 5
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: PUSH
9916: LD_OWVAR 67
9920: ARRAY
9921: PPUSH
9922: LD_INT 7
9924: PUSH
9925: LD_INT 6
9927: PUSH
9928: LD_INT 6
9930: PUSH
9931: LD_INT 5
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: PUSH
9940: LD_OWVAR 67
9944: ARRAY
9945: PPUSH
9946: LD_INT -5
9948: PUSH
9949: LD_EXP 26
9953: PUSH
9954: LD_INT -3
9956: PUSH
9957: LD_INT -5
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: PUSH
9966: LD_EXP 28
9970: ADD
9971: PUSH
9972: LD_EXP 27
9976: ADD
9977: PUSH
9978: LD_EXP 29
9982: ADD
9983: PUSH
9984: LD_EXP 31
9988: ADD
9989: PUSH
9990: LD_EXP 40
9994: ADD
9995: PUSH
9996: LD_INT -2
9998: PUSH
9999: LD_INT -4
10001: PUSH
10002: LD_INT -6
10004: PUSH
10005: LD_EXP 30
10009: PUSH
10010: LD_EXP 32
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: ADD
10022: PUSH
10023: LD_INT -3
10025: PUSH
10026: LD_INT -5
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: ADD
10033: PUSH
10034: LD_EXP 39
10038: ADD
10039: PPUSH
10040: LD_INT 2
10042: PUSH
10043: LD_INT 1
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PUSH
10050: LD_INT 4
10052: PUSH
10053: LD_INT 1
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PUSH
10060: LD_INT 3
10062: PUSH
10063: LD_INT 0
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: PUSH
10070: LD_INT 1
10072: PUSH
10073: LD_INT 2
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: PPUSH
10086: CALL_OW 42
10090: ST_TO_ADDR
// stop_talking := true ;
10091: LD_ADDR_OWVAR 56
10095: PUSH
10096: LD_INT 1
10098: ST_TO_ADDR
// ComExitBuilding ( Burlak ) ;
10099: LD_EXP 26
10103: PPUSH
10104: CALL_OW 122
// AddComMoveXY ( Burlak , 123 , 98 ) ;
10108: LD_EXP 26
10112: PPUSH
10113: LD_INT 123
10115: PPUSH
10116: LD_INT 98
10118: PPUSH
10119: CALL_OW 171
// for i in beriaBaseSquad do
10123: LD_ADDR_VAR 0 2
10127: PUSH
10128: LD_EXP 36
10132: PUSH
10133: FOR_IN
10134: IFFALSE 10209
// begin SetSide ( i , 3 ) ;
10136: LD_VAR 0 2
10140: PPUSH
10141: LD_INT 3
10143: PPUSH
10144: CALL_OW 235
// if not IsPlaced ( i ) then
10148: LD_VAR 0 2
10152: PPUSH
10153: CALL_OW 305
10157: NOT
10158: IFFALSE 10183
// PlaceUnitXYR ( i , 112 , 98 , 3 , false ) else
10160: LD_VAR 0 2
10164: PPUSH
10165: LD_INT 112
10167: PPUSH
10168: LD_INT 98
10170: PPUSH
10171: LD_INT 3
10173: PPUSH
10174: LD_INT 0
10176: PPUSH
10177: CALL_OW 50
10181: GO 10207
// begin ComExit ( i ) ;
10183: LD_VAR 0 2
10187: PPUSH
10188: CALL 54252 0 1
// AddComMoveXY ( i , 123 , 98 ) ;
10192: LD_VAR 0 2
10196: PPUSH
10197: LD_INT 123
10199: PPUSH
10200: LD_INT 98
10202: PPUSH
10203: CALL_OW 171
// end ; end ;
10207: GO 10133
10209: POP
10210: POP
// stop_talking := false ;
10211: LD_ADDR_OWVAR 56
10215: PUSH
10216: LD_INT 0
10218: ST_TO_ADDR
// wait ( 0 0$2 ) ;
10219: LD_INT 70
10221: PPUSH
10222: CALL_OW 67
// CenterOnXY ( 110 , 97 ) ;
10226: LD_INT 110
10228: PPUSH
10229: LD_INT 97
10231: PPUSH
10232: CALL_OW 84
// if Belkov and not Belkov in beriaBaseSquad then
10236: LD_EXP 28
10240: IFFALSE 10255
10242: PUSH
10243: LD_EXP 28
10247: PUSH
10248: LD_EXP 36
10252: IN
10253: NOT
10254: AND
10255: IFFALSE 10277
// popovTeam := Join ( popovTeam , Belkov ) ;
10257: LD_ADDR_EXP 41
10261: PUSH
10262: LD_EXP 41
10266: PPUSH
10267: LD_EXP 28
10271: PPUSH
10272: CALL 53854 0 2
10276: ST_TO_ADDR
// if Gnyevko and not Gnyevko in beriaBaseSquad then
10277: LD_EXP 27
10281: IFFALSE 10296
10283: PUSH
10284: LD_EXP 27
10288: PUSH
10289: LD_EXP 36
10293: IN
10294: NOT
10295: AND
10296: IFFALSE 10318
// popovTeam := Join ( popovTeam , Gnyevko ) ;
10298: LD_ADDR_EXP 41
10302: PUSH
10303: LD_EXP 41
10307: PPUSH
10308: LD_EXP 27
10312: PPUSH
10313: CALL 53854 0 2
10317: ST_TO_ADDR
// if Kirilenkova and not Kirilenkova in beriaBaseSquad then
10318: LD_EXP 29
10322: IFFALSE 10337
10324: PUSH
10325: LD_EXP 29
10329: PUSH
10330: LD_EXP 36
10334: IN
10335: NOT
10336: AND
10337: IFFALSE 10359
// popovTeam := Join ( popovTeam , Kirilenkova ) ;
10339: LD_ADDR_EXP 41
10343: PUSH
10344: LD_EXP 41
10348: PPUSH
10349: LD_EXP 29
10353: PPUSH
10354: CALL 53854 0 2
10358: ST_TO_ADDR
// if Kovalyuk and not Kovalyuk in beriaBaseSquad then
10359: LD_EXP 31
10363: IFFALSE 10378
10365: PUSH
10366: LD_EXP 31
10370: PUSH
10371: LD_EXP 36
10375: IN
10376: NOT
10377: AND
10378: IFFALSE 10400
// popovTeam := Join ( popovTeam , Kovalyuk ) ;
10380: LD_ADDR_EXP 41
10384: PUSH
10385: LD_EXP 41
10389: PPUSH
10390: LD_EXP 31
10394: PPUSH
10395: CALL 53854 0 2
10399: ST_TO_ADDR
// for i in beriaTeam do
10400: LD_ADDR_VAR 0 2
10404: PUSH
10405: LD_EXP 40
10409: PUSH
10410: FOR_IN
10411: IFFALSE 10448
// if not i in beriaBaseSquad then
10413: LD_VAR 0 2
10417: PUSH
10418: LD_EXP 36
10422: IN
10423: NOT
10424: IFFALSE 10446
// popovTeam := Join ( popovTeam , i ) ;
10426: LD_ADDR_EXP 41
10430: PUSH
10431: LD_EXP 41
10435: PPUSH
10436: LD_VAR 0 2
10440: PPUSH
10441: CALL 53854 0 2
10445: ST_TO_ADDR
10446: GO 10410
10448: POP
10449: POP
// if popovTeam < 3 then
10450: LD_EXP 41
10454: PUSH
10455: LD_INT 3
10457: LESS
10458: IFFALSE 10536
// for i := Count ( popovTeam ) to 3 do
10460: LD_ADDR_VAR 0 2
10464: PUSH
10465: DOUBLE
10466: LD_EXP 41
10470: PPUSH
10471: CALL 17922 0 1
10475: DEC
10476: ST_TO_ADDR
10477: LD_INT 3
10479: PUSH
10480: FOR_TO
10481: IFFALSE 10534
// begin uc_side := 6 ;
10483: LD_ADDR_OWVAR 20
10487: PUSH
10488: LD_INT 6
10490: ST_TO_ADDR
// uc_nation := nation_russian ;
10491: LD_ADDR_OWVAR 21
10495: PUSH
10496: LD_INT 3
10498: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , 2 ) ;
10499: LD_INT 0
10501: PPUSH
10502: LD_INT 1
10504: PPUSH
10505: LD_INT 2
10507: PPUSH
10508: CALL_OW 380
// popovTeam := Join ( popovTeam , CreateHuman ) ;
10512: LD_ADDR_EXP 41
10516: PUSH
10517: LD_EXP 41
10521: PPUSH
10522: CALL_OW 44
10526: PPUSH
10527: CALL 53854 0 2
10531: ST_TO_ADDR
// end ;
10532: GO 10480
10534: POP
10535: POP
// if not UnitFilter ( popovTeam , [ f_class , 4 ] ) then
10536: LD_EXP 41
10540: PPUSH
10541: LD_INT 25
10543: PUSH
10544: LD_INT 4
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: PPUSH
10551: CALL_OW 72
10555: NOT
10556: IFFALSE 10574
// SetClass ( popovTeam [ 1 ] , 4 ) ;
10558: LD_EXP 41
10562: PUSH
10563: LD_INT 1
10565: ARRAY
10566: PPUSH
10567: LD_INT 4
10569: PPUSH
10570: CALL_OW 336
// for i in popovTeam do
10574: LD_ADDR_VAR 0 2
10578: PUSH
10579: LD_EXP 41
10583: PUSH
10584: FOR_IN
10585: IFFALSE 10688
// begin if not GetClass ( i ) in [ 1 , 4 ] then
10587: LD_VAR 0 2
10591: PPUSH
10592: CALL_OW 257
10596: PUSH
10597: LD_INT 1
10599: PUSH
10600: LD_INT 4
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: IN
10607: NOT
10608: IFFALSE 10622
// SetClass ( i , class_soldier ) ;
10610: LD_VAR 0 2
10614: PPUSH
10615: LD_INT 1
10617: PPUSH
10618: CALL_OW 336
// if not IsPlaced ( i ) then
10622: LD_VAR 0 2
10626: PPUSH
10627: CALL_OW 305
10631: NOT
10632: IFFALSE 10657
// PlaceUnitXYR ( i , 161 , 107 , 3 , false ) else
10634: LD_VAR 0 2
10638: PPUSH
10639: LD_INT 161
10641: PPUSH
10642: LD_INT 107
10644: PPUSH
10645: LD_INT 3
10647: PPUSH
10648: LD_INT 0
10650: PPUSH
10651: CALL_OW 50
10655: GO 10677
// if IsInUnit ( i ) then
10657: LD_VAR 0 2
10661: PPUSH
10662: CALL_OW 310
10666: IFFALSE 10677
// ComExitBuilding ( i ) ;
10668: LD_VAR 0 2
10672: PPUSH
10673: CALL_OW 122
// AddComHold ( i ) ;
10677: LD_VAR 0 2
10681: PPUSH
10682: CALL_OW 200
// end ;
10686: GO 10584
10688: POP
10689: POP
// kirovBaseSquad := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff ( [ Kurin , Popov ] ^ popovTeam ) ;
10690: LD_ADDR_EXP 35
10694: PUSH
10695: LD_INT 22
10697: PUSH
10698: LD_INT 6
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: PUSH
10705: LD_INT 21
10707: PUSH
10708: LD_INT 1
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PPUSH
10719: CALL_OW 69
10723: PUSH
10724: LD_EXP 30
10728: PUSH
10729: LD_EXP 32
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: LD_EXP 41
10742: ADD
10743: DIFF
10744: ST_TO_ADDR
// for i in kirovBaseSquad do
10745: LD_ADDR_VAR 0 2
10749: PUSH
10750: LD_EXP 35
10754: PUSH
10755: FOR_IN
10756: IFFALSE 10887
// begin tmp := IsInUnit ( i ) ;
10758: LD_ADDR_VAR 0 4
10762: PUSH
10763: LD_VAR 0 2
10767: PPUSH
10768: CALL_OW 310
10772: ST_TO_ADDR
// if not tmp then
10773: LD_VAR 0 4
10777: NOT
10778: IFFALSE 10782
// continue ;
10780: GO 10755
// case GetBType ( tmp ) of b_workshop :
10782: LD_VAR 0 4
10786: PPUSH
10787: CALL_OW 266
10791: PUSH
10792: LD_INT 2
10794: DOUBLE
10795: EQUAL
10796: IFTRUE 10800
10798: GO 10815
10800: POP
// SetClass ( i , class_mechanic ) ; b_lab :
10801: LD_VAR 0 2
10805: PPUSH
10806: LD_INT 3
10808: PPUSH
10809: CALL_OW 336
10813: GO 10885
10815: LD_INT 6
10817: DOUBLE
10818: EQUAL
10819: IFTRUE 10823
10821: GO 10838
10823: POP
// SetClass ( i , class_scientistic ) ; b_armoury :
10824: LD_VAR 0 2
10828: PPUSH
10829: LD_INT 4
10831: PPUSH
10832: CALL_OW 336
10836: GO 10885
10838: LD_INT 4
10840: DOUBLE
10841: EQUAL
10842: IFTRUE 10846
10844: GO 10861
10846: POP
// SetClass ( i , class_soldier ) ; b_depot :
10847: LD_VAR 0 2
10851: PPUSH
10852: LD_INT 1
10854: PPUSH
10855: CALL_OW 336
10859: GO 10885
10861: LD_INT 0
10863: DOUBLE
10864: EQUAL
10865: IFTRUE 10869
10867: GO 10884
10869: POP
// SetClass ( i , class_engineer ) ; end ;
10870: LD_VAR 0 2
10874: PPUSH
10875: LD_INT 2
10877: PPUSH
10878: CALL_OW 336
10882: GO 10885
10884: POP
// end ;
10885: GO 10755
10887: POP
10888: POP
// for c := 1 to 4 do
10889: LD_ADDR_VAR 0 3
10893: PUSH
10894: DOUBLE
10895: LD_INT 1
10897: DEC
10898: ST_TO_ADDR
10899: LD_INT 4
10901: PUSH
10902: FOR_TO
10903: IFFALSE 10994
// if UnitFilter ( kirovBaseSquad , [ f_class , c ] ) < 2 then
10905: LD_EXP 35
10909: PPUSH
10910: LD_INT 25
10912: PUSH
10913: LD_VAR 0 3
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PPUSH
10922: CALL_OW 72
10926: PUSH
10927: LD_INT 2
10929: LESS
10930: IFFALSE 10992
// begin tmp := SortBySkill ( kirovBaseSquad , c ) ;
10932: LD_ADDR_VAR 0 4
10936: PUSH
10937: LD_EXP 35
10941: PPUSH
10942: LD_VAR 0 3
10946: PPUSH
10947: CALL 52334 0 2
10951: ST_TO_ADDR
// for i := 1 to 2 do
10952: LD_ADDR_VAR 0 2
10956: PUSH
10957: DOUBLE
10958: LD_INT 1
10960: DEC
10961: ST_TO_ADDR
10962: LD_INT 2
10964: PUSH
10965: FOR_TO
10966: IFFALSE 10990
// SetClass ( tmp [ i ] , c ) ;
10968: LD_VAR 0 4
10972: PUSH
10973: LD_VAR 0 2
10977: ARRAY
10978: PPUSH
10979: LD_VAR 0 3
10983: PPUSH
10984: CALL_OW 336
10988: GO 10965
10990: POP
10991: POP
// end ;
10992: GO 10902
10994: POP
10995: POP
// wait ( 0 0$3 ) ;
10996: LD_INT 105
10998: PPUSH
10999: CALL_OW 67
// InGameOff ;
11003: CALL_OW 9
// gameStart := true ;
11007: LD_ADDR_EXP 7
11011: PUSH
11012: LD_INT 1
11014: ST_TO_ADDR
// Query ( QBriefing ) ;
11015: LD_STRING QBriefing
11017: PPUSH
11018: CALL_OW 97
// ChangeMissionObjectives ( M1 ) ;
11022: LD_STRING M1
11024: PPUSH
11025: CALL_OW 337
// SaveForQuickRestart ;
11029: CALL_OW 22
// wait ( 0 0$5 ) ;
11033: LD_INT 175
11035: PPUSH
11036: CALL_OW 67
// ComExitBuilding ( Popov ) ;
11040: LD_EXP 32
11044: PPUSH
11045: CALL_OW 122
// AddComMoveXY ( Popov , 142 , 64 ) ;
11049: LD_EXP 32
11053: PPUSH
11054: LD_INT 142
11056: PPUSH
11057: LD_INT 64
11059: PPUSH
11060: CALL_OW 171
// AddComMoveXY ( popovTeam , 142 , 64 ) ;
11064: LD_EXP 41
11068: PPUSH
11069: LD_INT 142
11071: PPUSH
11072: LD_INT 64
11074: PPUSH
11075: CALL_OW 171
// end ;
11079: LD_VAR 0 1
11083: RET
// every 0 0$2 trigger allianceAttacked do
11084: LD_EXP 9
11088: IFFALSE 11127
11090: GO 11092
11092: DISABLE
// begin DialogueOn ;
11093: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
11097: LD_EXP 30
11101: PPUSH
11102: LD_STRING DArestKur
11104: PPUSH
11105: CALL_OW 88
// dwait ( 0 0$1 ) ;
11109: LD_INT 35
11111: PPUSH
11112: CALL_OW 68
// YouLost ( SelfAttack ) ;
11116: LD_STRING SelfAttack
11118: PPUSH
11119: CALL_OW 104
// DialogueOff ;
11123: CALL_OW 7
// end ;
11127: END
// every 0 0$2 trigger youTookCratesFromKirov do
11128: LD_EXP 17
11132: IFFALSE 11195
11134: GO 11136
11136: DISABLE
// begin Query ( QTookCrates ) ;
11137: LD_STRING QTookCrates
11139: PPUSH
11140: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
11144: LD_INT 35
11146: PPUSH
11147: CALL_OW 67
// until youTookCratesFromKirov >= 3 ;
11151: LD_EXP 17
11155: PUSH
11156: LD_INT 3
11158: GREATEREQUAL
11159: IFFALSE 11144
// DialogueOn ;
11161: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
11165: LD_EXP 30
11169: PPUSH
11170: LD_STRING DArestKur
11172: PPUSH
11173: CALL_OW 88
// dwait ( 0 0$1 ) ;
11177: LD_INT 35
11179: PPUSH
11180: CALL_OW 68
// YouLost ( TookCrates ) ;
11184: LD_STRING TookCrates
11186: PPUSH
11187: CALL_OW 104
// DialogueOff ;
11191: CALL_OW 7
// end ;
11195: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
11196: LD_INT 78
11198: PPUSH
11199: LD_INT 112
11201: PPUSH
11202: LD_INT 3
11204: PPUSH
11205: CALL_OW 440
11209: IFFALSE 11268
11211: GO 11213
11213: DISABLE
// begin foundOil := true ;
11214: LD_ADDR_EXP 10
11218: PUSH
11219: LD_INT 1
11221: ST_TO_ADDR
// if not IsOk ( Burlak ) then
11222: LD_EXP 26
11226: PPUSH
11227: CALL_OW 302
11231: NOT
11232: IFFALSE 11236
// exit ;
11234: GO 11268
// DialogueOn ;
11236: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
11240: LD_EXP 26
11244: PPUSH
11245: LD_STRING D2a-Bur-1
11247: PPUSH
11248: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
11252: LD_EXP 30
11256: PPUSH
11257: LD_STRING D2a-Kur-1
11259: PPUSH
11260: CALL_OW 94
// DialogueOff ;
11264: CALL_OW 7
// end ;
11268: END
// every 0 0$1 trigger hasKagan and hasOilTower do
11269: LD_EXP 12
11273: IFFALSE 11281
11275: PUSH
11276: LD_EXP 14
11280: AND
11281: IFFALSE 11293
11283: GO 11285
11285: DISABLE
// begin ChangeMissionObjectives ( M2 ) ;
11286: LD_STRING M2
11288: PPUSH
11289: CALL_OW 337
// end ;
11293: END
// every 0 0$1 trigger ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_not , [ f_constructed ] ] ] ) or FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] , [ f_not , [ f_constructed ] ] ] ) ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) and IsOk ( Burlak ) do var sci ;
11294: LD_INT 22
11296: PUSH
11297: LD_INT 3
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: LD_INT 30
11306: PUSH
11307: LD_INT 3
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: PUSH
11314: LD_INT 3
11316: PUSH
11317: LD_INT 57
11319: PUSH
11320: EMPTY
11321: LIST
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: LIST
11331: PPUSH
11332: CALL_OW 69
11336: IFTRUE 11382
11338: PUSH
11339: LD_INT 22
11341: PUSH
11342: LD_INT 3
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: LD_INT 30
11351: PUSH
11352: LD_INT 7
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PUSH
11359: LD_INT 3
11361: PUSH
11362: LD_INT 57
11364: PUSH
11365: EMPTY
11366: LIST
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PUSH
11372: EMPTY
11373: LIST
11374: LIST
11375: LIST
11376: PPUSH
11377: CALL_OW 69
11381: OR
11382: IFFALSE 11415
11384: PUSH
11385: LD_INT 22
11387: PUSH
11388: LD_INT 3
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: LD_INT 30
11397: PUSH
11398: LD_INT 26
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: PPUSH
11409: CALL_OW 69
11413: NOT
11414: AND
11415: IFFALSE 11428
11417: PUSH
11418: LD_EXP 26
11422: PPUSH
11423: CALL_OW 302
11427: AND
11428: IFFALSE 11622
11430: GO 11432
11432: DISABLE
11433: LD_INT 0
11435: PPUSH
// begin DialogueOn ;
11436: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
11440: LD_EXP 26
11444: PPUSH
11445: LD_STRING D3aa-Bur-1
11447: PPUSH
11448: CALL_OW 88
// if hasScholtze and IsOk ( Scholtze ) then
11452: LD_EXP 11
11456: IFFALSE 11469
11458: PUSH
11459: LD_EXP 33
11463: PPUSH
11464: CALL_OW 302
11468: AND
11469: IFFALSE 11495
// begin sci := Scholtze ;
11471: LD_ADDR_VAR 0 1
11475: PUSH
11476: LD_EXP 33
11480: ST_TO_ADDR
// Say ( Scholtze , D3aa-Sch-1 ) ;
11481: LD_EXP 33
11485: PPUSH
11486: LD_STRING D3aa-Sch-1
11488: PPUSH
11489: CALL_OW 88
// end else
11493: GO 11600
// begin sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] ] ) diff mainRuCharacters ;
11495: LD_ADDR_VAR 0 1
11499: PUSH
11500: LD_INT 22
11502: PUSH
11503: LD_INT 3
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 50
11512: PUSH
11513: EMPTY
11514: LIST
11515: PUSH
11516: LD_INT 25
11518: PUSH
11519: LD_INT 4
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: PUSH
11526: LD_INT 26
11528: PUSH
11529: LD_INT 1
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: PPUSH
11542: CALL_OW 69
11546: PUSH
11547: LD_EXP 45
11551: DIFF
11552: ST_TO_ADDR
// if sci then
11553: LD_VAR 0 1
11557: IFFALSE 11600
// begin sci := sci [ rand ( 1 , Count ( sci ) ) ] ;
11559: LD_ADDR_VAR 0 1
11563: PUSH
11564: LD_VAR 0 1
11568: PUSH
11569: LD_INT 1
11571: PPUSH
11572: LD_VAR 0 1
11576: PPUSH
11577: CALL 17922 0 1
11581: PPUSH
11582: CALL_OW 12
11586: ARRAY
11587: ST_TO_ADDR
// Say ( sci , D3aa-Sci1-1 ) ;
11588: LD_VAR 0 1
11592: PPUSH
11593: LD_STRING D3aa-Sci1-1
11595: PPUSH
11596: CALL_OW 88
// end ; end ; if sci then
11600: LD_VAR 0 1
11604: IFFALSE 11618
// Say ( Burlak , D3aa-Bur-2 ) ;
11606: LD_EXP 26
11610: PPUSH
11611: LD_STRING D3aa-Bur-2
11613: PPUSH
11614: CALL_OW 88
// DialogueOff ;
11618: CALL_OW 7
// end ;
11622: PPOPN 1
11624: END
// every 0 0$1 trigger UnitFilter ( americanReinforcementsTroops , [ f_see , 3 ] ) and IsOk ( Burlak ) and not allowedToAttackOmicron do var sol , tmp ;
11625: LD_EXP 55
11629: PPUSH
11630: LD_INT 101
11632: PUSH
11633: LD_INT 3
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PPUSH
11640: CALL_OW 72
11644: IFFALSE 11657
11646: PUSH
11647: LD_EXP 26
11651: PPUSH
11652: CALL_OW 302
11656: AND
11657: IFFALSE 11666
11659: PUSH
11660: LD_EXP 13
11664: NOT
11665: AND
11666: IFFALSE 11980
11668: GO 11670
11670: DISABLE
11671: LD_INT 0
11673: PPUSH
11674: PPUSH
// begin tmp := UnitFilter ( americanReinforcementsTroops , [ f_see , 3 ] ) ;
11675: LD_ADDR_VAR 0 2
11679: PUSH
11680: LD_EXP 55
11684: PPUSH
11685: LD_INT 101
11687: PUSH
11688: LD_INT 3
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: PPUSH
11695: CALL_OW 72
11699: ST_TO_ADDR
// sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_sex , sex_male ] ] ) diff mainRuCharacters ;
11700: LD_ADDR_VAR 0 1
11704: PUSH
11705: LD_INT 22
11707: PUSH
11708: LD_INT 3
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: PUSH
11715: LD_INT 50
11717: PUSH
11718: EMPTY
11719: LIST
11720: PUSH
11721: LD_INT 26
11723: PUSH
11724: LD_INT 1
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: LIST
11735: PPUSH
11736: CALL_OW 69
11740: PUSH
11741: LD_EXP 45
11745: DIFF
11746: ST_TO_ADDR
// if not sol then
11747: LD_VAR 0 1
11751: NOT
11752: IFFALSE 11756
// exit ;
11754: GO 11980
// sol := sol [ rand ( 1 , Count ( sol ) ) ] ;
11756: LD_ADDR_VAR 0 1
11760: PUSH
11761: LD_VAR 0 1
11765: PUSH
11766: LD_INT 1
11768: PPUSH
11769: LD_VAR 0 1
11773: PPUSH
11774: CALL 17922 0 1
11778: PPUSH
11779: CALL_OW 12
11783: ARRAY
11784: ST_TO_ADDR
// DialogueOn ;
11785: CALL_OW 6
// CenterNowOnUnits ( NearestUnitToUnit ( tmp , Burlak ) ) ;
11789: LD_VAR 0 2
11793: PPUSH
11794: LD_EXP 26
11798: PPUSH
11799: CALL_OW 74
11803: PPUSH
11804: CALL_OW 87
// if not hasKagan then
11808: LD_EXP 12
11812: NOT
11813: IFFALSE 11841
// begin Say ( sol , D3a-RSol1-1 ) ;
11815: LD_VAR 0 1
11819: PPUSH
11820: LD_STRING D3a-RSol1-1
11822: PPUSH
11823: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
11827: LD_EXP 26
11831: PPUSH
11832: LD_STRING D3a-Bur-1
11834: PPUSH
11835: CALL_OW 88
// end else
11839: GO 11976
// begin Say ( sol , [ D3a-RSol1-1 , D3b-RSol1-1 ] [ sol mod 2 + 1 ] ) ;
11841: LD_VAR 0 1
11845: PPUSH
11846: LD_STRING D3a-RSol1-1
11848: PUSH
11849: LD_STRING D3b-RSol1-1
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: LD_VAR 0 1
11860: PUSH
11861: LD_INT 2
11863: MOD
11864: PUSH
11865: LD_INT 1
11867: PLUS
11868: ARRAY
11869: PPUSH
11870: CALL_OW 88
// if IsOk ( Gnyevko ) and Gnyevko in beriaBaseSquad then
11874: LD_EXP 27
11878: PPUSH
11879: CALL_OW 302
11883: IFFALSE 11897
11885: PUSH
11886: LD_EXP 27
11890: PUSH
11891: LD_EXP 36
11895: IN
11896: AND
11897: IFFALSE 11913
// Say ( Gnyevko , D3b-Gny-1 ) else
11899: LD_EXP 27
11903: PPUSH
11904: LD_STRING D3b-Gny-1
11906: PPUSH
11907: CALL_OW 88
11911: GO 11964
// if IsOk ( Kovalyuk ) and Kovalyuk in beriaBaseSquad then
11913: LD_EXP 31
11917: PPUSH
11918: CALL_OW 302
11922: IFFALSE 11936
11924: PUSH
11925: LD_EXP 31
11929: PUSH
11930: LD_EXP 36
11934: IN
11935: AND
11936: IFFALSE 11952
// Say ( Kovalyuk , D3b-Kov-1 ) else
11938: LD_EXP 31
11942: PPUSH
11943: LD_STRING D3b-Kov-1
11945: PPUSH
11946: CALL_OW 88
11950: GO 11964
// Say ( sol , D3b-RSol1-2 ) ;
11952: LD_VAR 0 1
11956: PPUSH
11957: LD_STRING D3b-RSol1-2
11959: PPUSH
11960: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
11964: LD_EXP 26
11968: PPUSH
11969: LD_STRING D3b-Bur-1
11971: PPUSH
11972: CALL_OW 88
// end ; DialogueOff ;
11976: CALL_OW 7
// end ;
11980: PPOPN 2
11982: END
// every 0 0$2 trigger foundOil do var fake , x , y , scholtzeArea , Dickens , DickensFriend ;
11983: LD_EXP 10
11987: IFFALSE 12992
11989: GO 11991
11991: DISABLE
11992: LD_INT 0
11994: PPUSH
11995: PPUSH
11996: PPUSH
11997: PPUSH
11998: PPUSH
11999: PPUSH
// begin wait ( 0 0$30 + rand ( 0 0$10 , 1 1$00 ) ) ;
12000: LD_INT 1050
12002: PUSH
12003: LD_INT 350
12005: PPUSH
12006: LD_INT 2100
12008: PPUSH
12009: CALL_OW 12
12013: PLUS
12014: PPUSH
12015: CALL_OW 67
// case Difficulty of 1 :
12019: LD_OWVAR 67
12023: PUSH
12024: LD_INT 1
12026: DOUBLE
12027: EQUAL
12028: IFTRUE 12032
12030: GO 12043
12032: POP
// scholtzeArea := scholtzeSpawn3Area ; 2 :
12033: LD_ADDR_VAR 0 4
12037: PUSH
12038: LD_INT 8
12040: ST_TO_ADDR
12041: GO 12170
12043: LD_INT 2
12045: DOUBLE
12046: EQUAL
12047: IFTRUE 12051
12049: GO 12085
12051: POP
// scholtzeArea := [ scholtzeSpawn3Area , scholtzeSpawn2Area , scholtzeSpawn2Area ] [ rand ( 1 , 3 ) ] ; 3 :
12052: LD_ADDR_VAR 0 4
12056: PUSH
12057: LD_INT 8
12059: PUSH
12060: LD_INT 7
12062: PUSH
12063: LD_INT 7
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 1
12073: PPUSH
12074: LD_INT 3
12076: PPUSH
12077: CALL_OW 12
12081: ARRAY
12082: ST_TO_ADDR
12083: GO 12170
12085: LD_INT 3
12087: DOUBLE
12088: EQUAL
12089: IFTRUE 12093
12091: GO 12127
12093: POP
// scholtzeArea := [ scholtzeSpawn2Area , scholtzeSpawn2Area , scholtzeSpawn1Area ] [ rand ( 1 , 3 ) ] ; 4 :
12094: LD_ADDR_VAR 0 4
12098: PUSH
12099: LD_INT 7
12101: PUSH
12102: LD_INT 7
12104: PUSH
12105: LD_INT 6
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: LIST
12112: PUSH
12113: LD_INT 1
12115: PPUSH
12116: LD_INT 3
12118: PPUSH
12119: CALL_OW 12
12123: ARRAY
12124: ST_TO_ADDR
12125: GO 12170
12127: LD_INT 4
12129: DOUBLE
12130: EQUAL
12131: IFTRUE 12135
12133: GO 12169
12135: POP
// scholtzeArea := [ scholtzeSpawn2Area , scholtzeSpawn1Area , scholtzeSpawn1Area ] [ rand ( 1 , 3 ) ] ; end ;
12136: LD_ADDR_VAR 0 4
12140: PUSH
12141: LD_INT 7
12143: PUSH
12144: LD_INT 6
12146: PUSH
12147: LD_INT 6
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: LIST
12154: PUSH
12155: LD_INT 1
12157: PPUSH
12158: LD_INT 3
12160: PPUSH
12161: CALL_OW 12
12165: ARRAY
12166: ST_TO_ADDR
12167: GO 12170
12169: POP
// PlaceUnitArea ( Scholtze , scholtzeArea , true ) ;
12170: LD_EXP 33
12174: PPUSH
12175: LD_VAR 0 4
12179: PPUSH
12180: LD_INT 1
12182: PPUSH
12183: CALL_OW 49
// ComHold ( Scholtze ) ;
12187: LD_EXP 33
12191: PPUSH
12192: CALL_OW 140
// wait ( 0 0$4 ) ;
12196: LD_INT 140
12198: PPUSH
12199: CALL_OW 67
// if See ( 3 , Scholtze ) then
12203: LD_INT 3
12205: PPUSH
12206: LD_EXP 33
12210: PPUSH
12211: CALL_OW 292
12215: IFFALSE 12299
// begin hasScholtze := true ;
12217: LD_ADDR_EXP 11
12221: PUSH
12222: LD_INT 1
12224: ST_TO_ADDR
// SetSide ( Scholtze , 3 ) ;
12225: LD_EXP 33
12229: PPUSH
12230: LD_INT 3
12232: PPUSH
12233: CALL_OW 235
// ComFree ( Scholtze ) ;
12237: LD_EXP 33
12241: PPUSH
12242: CALL_OW 139
// CenterNowOnUnits ( Scholtze ) ;
12246: LD_EXP 33
12250: PPUSH
12251: CALL_OW 87
// DialogueOn ;
12255: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
12259: LD_EXP 33
12263: PPUSH
12264: LD_STRING D4a-Sch-1
12266: PPUSH
12267: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
12271: LD_EXP 26
12275: PPUSH
12276: LD_STRING D4a-Bur-1
12278: PPUSH
12279: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
12283: LD_EXP 33
12287: PPUSH
12288: LD_STRING D4a-Sch-2
12290: PPUSH
12291: CALL_OW 88
// DialogueOff ;
12295: CALL_OW 7
// end ; x := GetX ( Scholtze ) ;
12299: LD_ADDR_VAR 0 2
12303: PUSH
12304: LD_EXP 33
12308: PPUSH
12309: CALL_OW 250
12313: ST_TO_ADDR
// y := GetY ( Scholtze ) ;
12314: LD_ADDR_VAR 0 3
12318: PUSH
12319: LD_EXP 33
12323: PPUSH
12324: CALL_OW 251
12328: ST_TO_ADDR
// uc_side := 6 ;
12329: LD_ADDR_OWVAR 20
12333: PUSH
12334: LD_INT 6
12336: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 1 ) ;
12337: LD_INT 1
12339: PPUSH
12340: LD_INT 1
12342: PPUSH
12343: LD_INT 1
12345: PPUSH
12346: CALL_OW 380
// fake := CreateHuman ;
12350: LD_ADDR_VAR 0 1
12354: PUSH
12355: CALL_OW 44
12359: ST_TO_ADDR
// InGameOn ;
12360: CALL_OW 8
// DialogueOn ;
12364: CALL_OW 6
// SayRadioNoFaceNoName ( fake , D4-Sch-1 ) ;
12368: LD_VAR 0 1
12372: PPUSH
12373: LD_STRING D4-Sch-1
12375: PPUSH
12376: CALL 58099 0 2
// Say ( Burlak , D4-Bur-1 ) ;
12380: LD_EXP 26
12384: PPUSH
12385: LD_STRING D4-Bur-1
12387: PPUSH
12388: CALL_OW 88
// DialogueOff ;
12392: CALL_OW 7
// InGameOff ;
12396: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
12400: LD_STRING M4
12402: PPUSH
12403: CALL_OW 337
// canSearchForScholtze := true ;
12407: LD_ADDR_EXP 16
12411: PUSH
12412: LD_INT 1
12414: ST_TO_ADDR
// if dickensKilled then
12415: LD_EXP 15
12419: IFFALSE 12423
// exit ;
12421: GO 12992
// wait ( 2 2$00 - ( 0 0$20 * Difficulty ) ) ;
12423: LD_INT 4200
12425: PUSH
12426: LD_INT 700
12428: PUSH
12429: LD_OWVAR 67
12433: MUL
12434: MINUS
12435: PPUSH
12436: CALL_OW 67
// uc_side := 1 ;
12440: LD_ADDR_OWVAR 20
12444: PUSH
12445: LD_INT 1
12447: ST_TO_ADDR
// uc_nation := nation_american ;
12448: LD_ADDR_OWVAR 21
12452: PUSH
12453: LD_INT 1
12455: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
12456: LD_ADDR_VAR 0 5
12460: PUSH
12461: LD_STRING Dickens
12463: PPUSH
12464: CALL_OW 25
12468: ST_TO_ADDR
// SetSkill ( Dickens , skill_combat , Difficulty ) ;
12469: LD_VAR 0 5
12473: PPUSH
12474: LD_INT 1
12476: PPUSH
12477: LD_OWVAR 67
12481: PPUSH
12482: CALL_OW 237
// PrepareSoldier ( sex_male , Difficulty ) ;
12486: LD_INT 1
12488: PPUSH
12489: LD_OWVAR 67
12493: PPUSH
12494: CALL_OW 381
// hc_attr := [ 10 , 10 ] ;
12498: LD_ADDR_OWVAR 29
12502: PUSH
12503: LD_INT 10
12505: PUSH
12506: LD_INT 10
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: ST_TO_ADDR
// DickensFriend := CreateHuman ;
12513: LD_ADDR_VAR 0 6
12517: PUSH
12518: CALL_OW 44
12522: ST_TO_ADDR
// PlaceUnitXYR ( Dickens , 22 , 17 , 3 , false ) ;
12523: LD_VAR 0 5
12527: PPUSH
12528: LD_INT 22
12530: PPUSH
12531: LD_INT 17
12533: PPUSH
12534: LD_INT 3
12536: PPUSH
12537: LD_INT 0
12539: PPUSH
12540: CALL_OW 50
// PlaceUnitXYR ( DickensFriend , 22 , 17 , 3 , false ) ;
12544: LD_VAR 0 6
12548: PPUSH
12549: LD_INT 22
12551: PPUSH
12552: LD_INT 17
12554: PPUSH
12555: LD_INT 3
12557: PPUSH
12558: LD_INT 0
12560: PPUSH
12561: CALL_OW 50
// ComAgressiveMove ( [ Dickens , DickensFriend ] , x , y ) ;
12565: LD_VAR 0 5
12569: PUSH
12570: LD_VAR 0 6
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PPUSH
12579: LD_VAR 0 2
12583: PPUSH
12584: LD_VAR 0 3
12588: PPUSH
12589: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
12593: LD_INT 35
12595: PPUSH
12596: CALL_OW 67
// if not IsOk ( Dickens ) then
12600: LD_VAR 0 5
12604: PPUSH
12605: CALL_OW 302
12609: NOT
12610: IFFALSE 12657
// begin ComMoveXY ( DickensFriend , 31 , 39 ) ;
12612: LD_VAR 0 6
12616: PPUSH
12617: LD_INT 31
12619: PPUSH
12620: LD_INT 39
12622: PPUSH
12623: CALL_OW 111
// AddComEnterUnit ( DickensFriend , usArm1 ) ;
12627: LD_VAR 0 6
12631: PPUSH
12632: LD_INT 297
12634: PPUSH
12635: CALL_OW 180
// omicronTroops := omicronTroops union DickensFriend ;
12639: LD_ADDR_EXP 54
12643: PUSH
12644: LD_EXP 54
12648: PUSH
12649: LD_VAR 0 6
12653: UNION
12654: ST_TO_ADDR
// exit ;
12655: GO 12992
// end ; if not IsOk ( DickensFriend ) then
12657: LD_VAR 0 6
12661: PPUSH
12662: CALL_OW 302
12666: NOT
12667: IFFALSE 12714
// begin ComMoveXY ( Dickens , 31 , 39 ) ;
12669: LD_VAR 0 5
12673: PPUSH
12674: LD_INT 31
12676: PPUSH
12677: LD_INT 39
12679: PPUSH
12680: CALL_OW 111
// AddComEnterUnit ( Dickens , usArm1 ) ;
12684: LD_VAR 0 5
12688: PPUSH
12689: LD_INT 297
12691: PPUSH
12692: CALL_OW 180
// omicronTroops := omicronTroops union Dickens ;
12696: LD_ADDR_EXP 54
12700: PUSH
12701: LD_EXP 54
12705: PUSH
12706: LD_VAR 0 5
12710: UNION
12711: ST_TO_ADDR
// exit ;
12712: GO 12992
// end ; until See ( 1 , Scholtze ) and GetLives ( Scholtze ) < 1000 and not hasScholtze ;
12714: LD_INT 1
12716: PPUSH
12717: LD_EXP 33
12721: PPUSH
12722: CALL_OW 292
12726: IFFALSE 12743
12728: PUSH
12729: LD_EXP 33
12733: PPUSH
12734: CALL_OW 256
12738: PUSH
12739: LD_INT 1000
12741: LESS
12742: AND
12743: IFFALSE 12752
12745: PUSH
12746: LD_EXP 11
12750: NOT
12751: AND
12752: IFFALSE 12593
// canSearchForScholtze := false ;
12754: LD_ADDR_EXP 16
12758: PUSH
12759: LD_INT 0
12761: ST_TO_ADDR
// ComAttackUnit ( [ Dickens , DickensFriend ] , Scholtze ) ;
12762: LD_VAR 0 5
12766: PUSH
12767: LD_VAR 0 6
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: PPUSH
12776: LD_EXP 33
12780: PPUSH
12781: CALL_OW 115
// wait ( 0 0$0.3 ) ;
12785: LD_INT 10
12787: PPUSH
12788: CALL_OW 67
// InGameOn ;
12792: CALL_OW 8
// DialogueOn ;
12796: CALL_OW 6
// PlaceSeeing ( x , y , 3 , - 10 ) ;
12800: LD_VAR 0 2
12804: PPUSH
12805: LD_VAR 0 3
12809: PPUSH
12810: LD_INT 3
12812: PPUSH
12813: LD_INT 10
12815: NEG
12816: PPUSH
12817: CALL_OW 330
// CenterNowOnXY ( x , y ) ;
12821: LD_VAR 0 2
12825: PPUSH
12826: LD_VAR 0 3
12830: PPUSH
12831: CALL_OW 86
// Say ( Scholtze , D4b-Sch-1 ) ;
12835: LD_EXP 33
12839: PPUSH
12840: LD_STRING D4b-Sch-1
12842: PPUSH
12843: CALL_OW 88
// Say ( DickensFriend , D4b-Sol1-1 ) ;
12847: LD_VAR 0 6
12851: PPUSH
12852: LD_STRING D4b-Sol1-1
12854: PPUSH
12855: CALL_OW 88
// Say ( Dickens , D4b-Sol2-1 ) ;
12859: LD_VAR 0 5
12863: PPUSH
12864: LD_STRING D4b-Sol2-1
12866: PPUSH
12867: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
12871: LD_EXP 33
12875: PPUSH
12876: LD_STRING D4b-Sch-2
12878: PPUSH
12879: CALL_OW 88
// DialogueOff ;
12883: CALL_OW 7
// wait ( 0 0$0.3 ) ;
12887: LD_INT 10
12889: PPUSH
12890: CALL_OW 67
// RemoveSeeing ( x , y , 3 ) ;
12894: LD_VAR 0 2
12898: PPUSH
12899: LD_VAR 0 3
12903: PPUSH
12904: LD_INT 3
12906: PPUSH
12907: CALL_OW 331
// Say ( Burlak , D4b-Bur-2 ) ;
12911: LD_EXP 26
12915: PPUSH
12916: LD_STRING D4b-Bur-2
12918: PPUSH
12919: CALL_OW 88
// InGameOff ;
12923: CALL_OW 9
// ChangeMissionObjectives ( MScholtzeDel ) ;
12927: LD_STRING MScholtzeDel
12929: PPUSH
12930: CALL_OW 337
// KillUnit ( Scholtze ) ;
12934: LD_EXP 33
12938: PPUSH
12939: CALL_OW 66
// ComMoveXY ( [ Dickens , DickensFriend ] , 25 , 31 ) ;
12943: LD_VAR 0 5
12947: PUSH
12948: LD_VAR 0 6
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: PPUSH
12957: LD_INT 25
12959: PPUSH
12960: LD_INT 31
12962: PPUSH
12963: CALL_OW 111
// omicronTroops := omicronTroops union [ Dickens , DickensFriend ] ;
12967: LD_ADDR_EXP 54
12971: PUSH
12972: LD_EXP 54
12976: PUSH
12977: LD_VAR 0 5
12981: PUSH
12982: LD_VAR 0 6
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: UNION
12991: ST_TO_ADDR
// end ;
12992: PPOPN 6
12994: END
// every 0 0$2 trigger See ( 3 , Scholtze ) and canSearchForScholtze and not hasScholtze do
12995: LD_INT 3
12997: PPUSH
12998: LD_EXP 33
13002: PPUSH
13003: CALL_OW 292
13007: IFFALSE 13015
13009: PUSH
13010: LD_EXP 16
13014: AND
13015: IFFALSE 13024
13017: PUSH
13018: LD_EXP 11
13022: NOT
13023: AND
13024: IFFALSE 13109
13026: GO 13028
13028: DISABLE
// begin hasScholtze := true ;
13029: LD_ADDR_EXP 11
13033: PUSH
13034: LD_INT 1
13036: ST_TO_ADDR
// SetSide ( Scholtze , 3 ) ;
13037: LD_EXP 33
13041: PPUSH
13042: LD_INT 3
13044: PPUSH
13045: CALL_OW 235
// CenterNowOnUnits ( Scholtze ) ;
13049: LD_EXP 33
13053: PPUSH
13054: CALL_OW 87
// DialogueOn ;
13058: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
13062: LD_EXP 33
13066: PPUSH
13067: LD_STRING D4a-Sch-1
13069: PPUSH
13070: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
13074: LD_EXP 26
13078: PPUSH
13079: LD_STRING D4a-Bur-1
13081: PPUSH
13082: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
13086: LD_EXP 33
13090: PPUSH
13091: LD_STRING D4a-Sch-2
13093: PPUSH
13094: CALL_OW 88
// DialogueOff ;
13098: CALL_OW 7
// ChangeMissionObjectives ( MScholtzeOut ) ;
13102: LD_STRING MScholtzeOut
13104: PPUSH
13105: CALL_OW 337
// end ;
13109: END
// every 0 0$2 trigger FilterUnitsInArea ( easternHillArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
13110: LD_INT 3
13112: PPUSH
13113: LD_INT 22
13115: PUSH
13116: LD_INT 6
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PUSH
13123: LD_INT 21
13125: PUSH
13126: LD_INT 1
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PPUSH
13137: CALL_OW 70
13141: IFFALSE 13216
13143: GO 13145
13145: DISABLE
// begin PlaceSeeing ( 131 , 50 , 3 , 12 ) ;
13146: LD_INT 131
13148: PPUSH
13149: LD_INT 50
13151: PPUSH
13152: LD_INT 3
13154: PPUSH
13155: LD_INT 12
13157: PPUSH
13158: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
13162: LD_INT 35
13164: PPUSH
13165: CALL_OW 67
// until not FilterUnitsInArea ( easternHillArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
13169: LD_INT 3
13171: PPUSH
13172: LD_INT 22
13174: PUSH
13175: LD_INT 6
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: PUSH
13182: LD_INT 21
13184: PUSH
13185: LD_INT 1
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PPUSH
13196: CALL_OW 70
13200: NOT
13201: IFFALSE 13162
// RemoveSeeing ( 131 , 50 , 3 ) ;
13203: LD_INT 131
13205: PPUSH
13206: LD_INT 50
13208: PPUSH
13209: LD_INT 3
13211: PPUSH
13212: CALL_OW 331
// end ;
13216: END
// every 0 0$1 trigger not retreat and FilterUnitsInArea ( hillArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_chassis , ru_medium_wheeled ] ] ) and IsOk ( Burlak ) do
13217: LD_EXP 18
13221: NOT
13222: IFFALSE 13268
13224: PUSH
13225: LD_INT 9
13227: PPUSH
13228: LD_INT 22
13230: PUSH
13231: LD_INT 3
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PUSH
13238: LD_INT 21
13240: PUSH
13241: LD_INT 2
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: PUSH
13248: LD_INT 31
13250: PUSH
13251: LD_INT 21
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: LIST
13262: PPUSH
13263: CALL_OW 70
13267: AND
13268: IFFALSE 13281
13270: PUSH
13271: LD_EXP 26
13275: PPUSH
13276: CALL_OW 302
13280: AND
13281: IFFALSE 13306
13283: GO 13285
13285: DISABLE
// begin DialogueOn ;
13286: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
13290: LD_EXP 26
13294: PPUSH
13295: LD_STRING D5a-Bur-1
13297: PPUSH
13298: CALL_OW 88
// DialogueOff ;
13302: CALL_OW 7
// end ;
13306: END
// every 0 0$1 trigger hasFactory and hasOilTower do var i , un , tmp , vehicles , vehiclesOwned , q , pepCount , points , sendMechanics ;
13307: LD_EXP 19
13311: IFFALSE 13319
13313: PUSH
13314: LD_EXP 14
13318: AND
13319: IFFALSE 14976
13321: GO 13323
13323: DISABLE
13324: LD_INT 0
13326: PPUSH
13327: PPUSH
13328: PPUSH
13329: PPUSH
13330: PPUSH
13331: PPUSH
13332: PPUSH
13333: PPUSH
13334: PPUSH
// begin ChangeMissionObjectives ( M3 ) ;
13335: LD_STRING M3
13337: PPUSH
13338: CALL_OW 337
// sendMechanics := false ;
13342: LD_ADDR_VAR 0 9
13346: PUSH
13347: LD_INT 0
13349: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13350: LD_INT 35
13352: PPUSH
13353: CALL_OW 67
// vehiclesOwned := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ;
13357: LD_ADDR_VAR 0 5
13361: PUSH
13362: LD_INT 22
13364: PUSH
13365: LD_INT 3
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: LD_INT 21
13374: PUSH
13375: LD_INT 2
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: PUSH
13382: LD_INT 50
13384: PUSH
13385: EMPTY
13386: LIST
13387: PUSH
13388: LD_INT 23
13390: PUSH
13391: LD_INT 3
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: PPUSH
13404: CALL_OW 69
13408: ST_TO_ADDR
// pepCount := Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) ) ;
13409: LD_ADDR_VAR 0 7
13413: PUSH
13414: LD_INT 22
13416: PUSH
13417: LD_INT 3
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PUSH
13424: LD_INT 21
13426: PUSH
13427: LD_INT 1
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 23
13436: PUSH
13437: LD_INT 3
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: LIST
13448: PPUSH
13449: CALL_OW 69
13453: PPUSH
13454: CALL 17922 0 1
13458: ST_TO_ADDR
// if vehiclesOwned < ( pepCount + requiredVehiclesAmount ) then
13459: LD_VAR 0 5
13463: PUSH
13464: LD_VAR 0 7
13468: PUSH
13469: LD_EXP 21
13473: PLUS
13474: LESS
13475: IFFALSE 13508
// display_strings := [ #Ru03-5 , ( pepCount + requiredVehiclesAmount ) - vehiclesOwned ] else
13477: LD_ADDR_OWVAR 47
13481: PUSH
13482: LD_STRING #Ru03-5
13484: PUSH
13485: LD_VAR 0 7
13489: PUSH
13490: LD_EXP 21
13494: PLUS
13495: PUSH
13496: LD_VAR 0 5
13500: MINUS
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: ST_TO_ADDR
13506: GO 13519
// display_strings := [ #Ru03-5a ] ;
13508: LD_ADDR_OWVAR 47
13512: PUSH
13513: LD_STRING #Ru03-5a
13515: PUSH
13516: EMPTY
13517: LIST
13518: ST_TO_ADDR
// kurinWaitForVehiclesTime := kurinWaitForVehiclesTime - 0 0$1 ;
13519: LD_ADDR_EXP 20
13523: PUSH
13524: LD_EXP 20
13528: PUSH
13529: LD_INT 35
13531: MINUS
13532: ST_TO_ADDR
// until kurinWaitForVehiclesTime = 0 0$0 ;
13533: LD_EXP 20
13537: PUSH
13538: LD_INT 0
13540: EQUAL
13541: IFFALSE 13350
// if vehiclesOwned >= ( pepCount + requiredVehiclesAmount ) then
13543: LD_VAR 0 5
13547: PUSH
13548: LD_VAR 0 7
13552: PUSH
13553: LD_EXP 21
13557: PLUS
13558: GREATEREQUAL
13559: IFFALSE 13592
// begin AddMedal ( Surplus , 1 ) ;
13561: LD_STRING Surplus
13563: PPUSH
13564: LD_INT 1
13566: PPUSH
13567: CALL_OW 101
// points := [ 1 , 2 , 3 ] ;
13571: LD_ADDR_VAR 0 8
13575: PUSH
13576: LD_INT 1
13578: PUSH
13579: LD_INT 2
13581: PUSH
13582: LD_INT 3
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: LIST
13589: ST_TO_ADDR
// end else
13590: GO 13654
// if vehiclesOwned >= pepCount then
13592: LD_VAR 0 5
13596: PUSH
13597: LD_VAR 0 7
13601: GREATEREQUAL
13602: IFFALSE 13632
// begin AddMedal ( Surplus , - 1 ) ;
13604: LD_STRING Surplus
13606: PPUSH
13607: LD_INT 1
13609: NEG
13610: PPUSH
13611: CALL_OW 101
// points := [ 2 , 3 ] ;
13615: LD_ADDR_VAR 0 8
13619: PUSH
13620: LD_INT 2
13622: PUSH
13623: LD_INT 3
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: ST_TO_ADDR
// end else
13630: GO 13654
// begin AddMedal ( Surplus , - 2 ) ;
13632: LD_STRING Surplus
13634: PPUSH
13635: LD_INT 2
13637: NEG
13638: PPUSH
13639: CALL_OW 101
// points := [ 3 ] ;
13643: LD_ADDR_VAR 0 8
13647: PUSH
13648: LD_INT 3
13650: PUSH
13651: EMPTY
13652: LIST
13653: ST_TO_ADDR
// end ; InGameOn ;
13654: CALL_OW 8
// DialogueOn ;
13658: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
13662: LD_EXP 30
13666: PPUSH
13667: LD_STRING D5-Kur-1
13669: PPUSH
13670: CALL_OW 94
// q := SelectiveQuery ( QVehicles , points ) ;
13674: LD_ADDR_VAR 0 6
13678: PUSH
13679: LD_STRING QVehicles
13681: PPUSH
13682: LD_VAR 0 8
13686: PPUSH
13687: CALL_OW 98
13691: ST_TO_ADDR
// case q of 1 :
13692: LD_VAR 0 6
13696: PUSH
13697: LD_INT 1
13699: DOUBLE
13700: EQUAL
13701: IFTRUE 13705
13703: GO 13748
13705: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
13706: LD_EXP 26
13710: PPUSH
13711: LD_STRING D6a-Bur-1
13713: PPUSH
13714: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
13718: LD_EXP 30
13722: PPUSH
13723: LD_STRING D6a-Kur-1
13725: PPUSH
13726: CALL_OW 94
// timeToAttackOnOmicron := 2 2$00 ;
13730: LD_ADDR_EXP 23
13734: PUSH
13735: LD_INT 4200
13737: ST_TO_ADDR
// sendMechanics := true ;
13738: LD_ADDR_VAR 0 9
13742: PUSH
13743: LD_INT 1
13745: ST_TO_ADDR
// end ; 2 :
13746: GO 13843
13748: LD_INT 2
13750: DOUBLE
13751: EQUAL
13752: IFTRUE 13756
13754: GO 13799
13756: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
13757: LD_EXP 26
13761: PPUSH
13762: LD_STRING D6b-Bur-1
13764: PPUSH
13765: CALL_OW 88
// SayRadio ( Kurin , D6b-Kur-1 ) ;
13769: LD_EXP 30
13773: PPUSH
13774: LD_STRING D6b-Kur-1
13776: PPUSH
13777: CALL_OW 94
// timeToAttackOnOmicron := 3 3$00 ;
13781: LD_ADDR_EXP 23
13785: PUSH
13786: LD_INT 6300
13788: ST_TO_ADDR
// sendMechanics := true ;
13789: LD_ADDR_VAR 0 9
13793: PUSH
13794: LD_INT 1
13796: ST_TO_ADDR
// end ; 3 :
13797: GO 13843
13799: LD_INT 3
13801: DOUBLE
13802: EQUAL
13803: IFTRUE 13807
13805: GO 13842
13807: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
13808: LD_EXP 26
13812: PPUSH
13813: LD_STRING D6c-Bur-1
13815: PPUSH
13816: CALL_OW 88
// SayRadio ( Kurin , D6c-Kur-1 ) ;
13820: LD_EXP 30
13824: PPUSH
13825: LD_STRING D6c-Kur-1
13827: PPUSH
13828: CALL_OW 94
// kurinWaitForVehiclesTime := 7 7$00 ;
13832: LD_ADDR_EXP 20
13836: PUSH
13837: LD_INT 14700
13839: ST_TO_ADDR
// end ; end ;
13840: GO 13843
13842: POP
// DialogueOff ;
13843: CALL_OW 7
// InGameOff ;
13847: CALL_OW 9
// if q = 3 then
13851: LD_VAR 0 6
13855: PUSH
13856: LD_INT 3
13858: EQUAL
13859: IFFALSE 14131
// begin repeat wait ( 0 0$1 ) ;
13861: LD_INT 35
13863: PPUSH
13864: CALL_OW 67
// vehiclesOwned := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ;
13868: LD_ADDR_VAR 0 5
13872: PUSH
13873: LD_INT 22
13875: PUSH
13876: LD_INT 3
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PUSH
13883: LD_INT 21
13885: PUSH
13886: LD_INT 2
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: LD_INT 50
13895: PUSH
13896: EMPTY
13897: LIST
13898: PUSH
13899: LD_INT 23
13901: PUSH
13902: LD_INT 3
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: PPUSH
13915: CALL_OW 69
13919: ST_TO_ADDR
// pepCount := Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) ) ;
13920: LD_ADDR_VAR 0 7
13924: PUSH
13925: LD_INT 22
13927: PUSH
13928: LD_INT 3
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PUSH
13935: LD_INT 21
13937: PUSH
13938: LD_INT 1
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: PUSH
13945: LD_INT 23
13947: PUSH
13948: LD_INT 3
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: LIST
13959: PPUSH
13960: CALL_OW 69
13964: PPUSH
13965: CALL 17922 0 1
13969: ST_TO_ADDR
// if vehiclesOwned < ( pepCount + requiredVehiclesAmount ) then
13970: LD_VAR 0 5
13974: PUSH
13975: LD_VAR 0 7
13979: PUSH
13980: LD_EXP 21
13984: PLUS
13985: LESS
13986: IFFALSE 14019
// display_strings := [ #Ru03-5 , ( pepCount + requiredVehiclesAmount ) - vehiclesOwned ] else
13988: LD_ADDR_OWVAR 47
13992: PUSH
13993: LD_STRING #Ru03-5
13995: PUSH
13996: LD_VAR 0 7
14000: PUSH
14001: LD_EXP 21
14005: PLUS
14006: PUSH
14007: LD_VAR 0 5
14011: MINUS
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: ST_TO_ADDR
14017: GO 14030
// display_strings := [ #Ru03-5a ] ;
14019: LD_ADDR_OWVAR 47
14023: PUSH
14024: LD_STRING #Ru03-5a
14026: PUSH
14027: EMPTY
14028: LIST
14029: ST_TO_ADDR
// kurinWaitForVehiclesTime := kurinWaitForVehiclesTime - 0 0$1 ;
14030: LD_ADDR_EXP 20
14034: PUSH
14035: LD_EXP 20
14039: PUSH
14040: LD_INT 35
14042: MINUS
14043: ST_TO_ADDR
// until kurinWaitForVehiclesTime = 0 0$0 ;
14044: LD_EXP 20
14048: PUSH
14049: LD_INT 0
14051: EQUAL
14052: IFFALSE 13861
// if vehiclesOwned < requiredVehiclesAmount then
14054: LD_VAR 0 5
14058: PUSH
14059: LD_EXP 21
14063: LESS
14064: IFFALSE 14095
// begin DialogueOn ;
14066: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
14070: LD_EXP 30
14074: PPUSH
14075: LD_STRING D6d-Kur-1
14077: PPUSH
14078: CALL_OW 94
// YouLost ( Vehicles ) ;
14082: LD_STRING Vehicles
14084: PPUSH
14085: CALL_OW 104
// DialogueOff ;
14089: CALL_OW 7
// exit ;
14093: GO 14976
// end ; DialogueOn ;
14095: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
14099: LD_EXP 30
14103: PPUSH
14104: LD_STRING D6c-Kur-2
14106: PPUSH
14107: CALL_OW 94
// DialogueOff ;
14111: CALL_OW 7
// sendMechanics := true ;
14115: LD_ADDR_VAR 0 9
14119: PUSH
14120: LD_INT 1
14122: ST_TO_ADDR
// timeToAttackOnOmicron := 2 2$00 ;
14123: LD_ADDR_EXP 23
14127: PUSH
14128: LD_INT 4200
14130: ST_TO_ADDR
// end ; display_strings := [ ] ;
14131: LD_ADDR_OWVAR 47
14135: PUSH
14136: EMPTY
14137: ST_TO_ADDR
// ChangeMissionObjectives ( M5 ) ;
14138: LD_STRING M5
14140: PPUSH
14141: CALL_OW 337
// if sendMechanics then
14145: LD_VAR 0 9
14149: IFFALSE 14976
// begin tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] , [ f_not , [ f_tag , tMech ] ] ] ) ;
14151: LD_ADDR_VAR 0 3
14155: PUSH
14156: LD_INT 22
14158: PUSH
14159: LD_INT 6
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: LD_INT 21
14168: PUSH
14169: LD_INT 1
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: LD_INT 25
14178: PUSH
14179: LD_INT 3
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: PUSH
14186: LD_INT 3
14188: PUSH
14189: LD_INT 120
14191: PUSH
14192: LD_INT 7
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: PPUSH
14209: CALL_OW 69
14213: ST_TO_ADDR
// if Count ( tmp ) < requiredVehiclesAmount then
14214: LD_VAR 0 3
14218: PPUSH
14219: CALL 17922 0 1
14223: PUSH
14224: LD_EXP 21
14228: LESS
14229: IFFALSE 14420
// begin for i := Count ( tmp ) to requiredVehiclesAmount do
14231: LD_ADDR_VAR 0 1
14235: PUSH
14236: DOUBLE
14237: LD_VAR 0 3
14241: PPUSH
14242: CALL 17922 0 1
14246: DEC
14247: ST_TO_ADDR
14248: LD_EXP 21
14252: PUSH
14253: FOR_TO
14254: IFFALSE 14355
// begin uc_side := 6 ;
14256: LD_ADDR_OWVAR 20
14260: PUSH
14261: LD_INT 6
14263: ST_TO_ADDR
// uc_nation := nation_russian ;
14264: LD_ADDR_OWVAR 21
14268: PUSH
14269: LD_INT 3
14271: ST_TO_ADDR
// PrepareMechanic ( false , 3 ) ;
14272: LD_INT 0
14274: PPUSH
14275: LD_INT 3
14277: PPUSH
14278: CALL_OW 383
// un := CreateHuman ;
14282: LD_ADDR_VAR 0 2
14286: PUSH
14287: CALL_OW 44
14291: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14292: LD_INT 35
14294: PPUSH
14295: CALL_OW 67
// until PlaceUnitArea ( un , southRoadSpawnArea , false ) ;
14299: LD_VAR 0 2
14303: PPUSH
14304: LD_INT 14
14306: PPUSH
14307: LD_INT 0
14309: PPUSH
14310: CALL_OW 49
14314: IFFALSE 14292
// ComMoveXY ( un , 193 , 135 ) ;
14316: LD_VAR 0 2
14320: PPUSH
14321: LD_INT 193
14323: PPUSH
14324: LD_INT 135
14326: PPUSH
14327: CALL_OW 111
// AddComMoveXY ( un , 159 , 106 ) ;
14331: LD_VAR 0 2
14335: PPUSH
14336: LD_INT 159
14338: PPUSH
14339: LD_INT 106
14341: PPUSH
14342: CALL_OW 171
// wait ( 0 0$1 ) ;
14346: LD_INT 35
14348: PPUSH
14349: CALL_OW 67
// end ;
14353: GO 14253
14355: POP
14356: POP
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] , [ f_not , [ f_tag , tMech ] ] ] ) ;
14357: LD_ADDR_VAR 0 3
14361: PUSH
14362: LD_INT 22
14364: PUSH
14365: LD_INT 6
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PUSH
14372: LD_INT 21
14374: PUSH
14375: LD_INT 1
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: PUSH
14382: LD_INT 25
14384: PUSH
14385: LD_INT 3
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: LD_INT 3
14394: PUSH
14395: LD_INT 120
14397: PUSH
14398: LD_INT 7
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: PPUSH
14415: CALL_OW 69
14419: ST_TO_ADDR
// end ; kirovBaseSquad := kirovBaseSquad diff tmp ;
14420: LD_ADDR_EXP 35
14424: PUSH
14425: LD_EXP 35
14429: PUSH
14430: LD_VAR 0 3
14434: DIFF
14435: ST_TO_ADDR
// vehicles := [ ] ;
14436: LD_ADDR_VAR 0 4
14440: PUSH
14441: EMPTY
14442: ST_TO_ADDR
// vehiclesOwned := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ;
14443: LD_ADDR_VAR 0 5
14447: PUSH
14448: LD_INT 22
14450: PUSH
14451: LD_INT 3
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PUSH
14458: LD_INT 21
14460: PUSH
14461: LD_INT 2
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PUSH
14468: LD_INT 50
14470: PUSH
14471: EMPTY
14472: LIST
14473: PUSH
14474: LD_INT 23
14476: PUSH
14477: LD_INT 3
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: PPUSH
14490: CALL_OW 69
14494: ST_TO_ADDR
// for i := 1 to requiredVehiclesAmount do
14495: LD_ADDR_VAR 0 1
14499: PUSH
14500: DOUBLE
14501: LD_INT 1
14503: DEC
14504: ST_TO_ADDR
14505: LD_EXP 21
14509: PUSH
14510: FOR_TO
14511: IFFALSE 14594
// begin ComExit ( IsDrivenBy ( vehiclesOwned [ i ] ) ) ;
14513: LD_VAR 0 5
14517: PUSH
14518: LD_VAR 0 1
14522: ARRAY
14523: PPUSH
14524: CALL_OW 311
14528: PPUSH
14529: CALL 54252 0 1
// SetSide ( vehiclesOwned [ i ] , 6 ) ;
14533: LD_VAR 0 5
14537: PUSH
14538: LD_VAR 0 1
14542: ARRAY
14543: PPUSH
14544: LD_INT 6
14546: PPUSH
14547: CALL_OW 235
// vehicles := Join ( vehicles , vehiclesOwned [ i ] ) ;
14551: LD_ADDR_VAR 0 4
14555: PUSH
14556: LD_VAR 0 4
14560: PPUSH
14561: LD_VAR 0 5
14565: PUSH
14566: LD_VAR 0 1
14570: ARRAY
14571: PPUSH
14572: CALL 53854 0 2
14576: ST_TO_ADDR
// ComExit ( tmp [ i ] ) ;
14577: LD_VAR 0 3
14581: PUSH
14582: LD_VAR 0 1
14586: ARRAY
14587: PPUSH
14588: CALL 54252 0 1
// end ;
14592: GO 14510
14594: POP
14595: POP
// if not vehicles then
14596: LD_VAR 0 4
14600: NOT
14601: IFFALSE 14605
// exit ;
14603: GO 14976
// kirovAttackVehicles := kirovVehicles union vehicles ;
14605: LD_ADDR_EXP 47
14609: PUSH
14610: LD_EXP 46
14614: PUSH
14615: LD_VAR 0 4
14619: UNION
14620: ST_TO_ADDR
// kirovVehicles := [ ] ;
14621: LD_ADDR_EXP 46
14625: PUSH
14626: EMPTY
14627: ST_TO_ADDR
// for i in kirovAttackVehicles do
14628: LD_ADDR_VAR 0 1
14632: PUSH
14633: LD_EXP 47
14637: PUSH
14638: FOR_IN
14639: IFFALSE 14655
// SetTag ( i , 0 ) ;
14641: LD_VAR 0 1
14645: PPUSH
14646: LD_INT 0
14648: PPUSH
14649: CALL_OW 109
14653: GO 14638
14655: POP
14656: POP
// repeat wait ( 0 0$3 ) ;
14657: LD_INT 105
14659: PPUSH
14660: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] , [ f_not , [ f_tag , tMech ] ] ] ) ;
14664: LD_ADDR_VAR 0 3
14668: PUSH
14669: LD_INT 22
14671: PUSH
14672: LD_INT 6
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: PUSH
14679: LD_INT 21
14681: PUSH
14682: LD_INT 1
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: LD_INT 25
14691: PUSH
14692: LD_INT 3
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PUSH
14699: LD_INT 3
14701: PUSH
14702: LD_INT 55
14704: PUSH
14705: EMPTY
14706: LIST
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PUSH
14712: LD_INT 3
14714: PUSH
14715: LD_INT 120
14717: PUSH
14718: LD_INT 7
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: PPUSH
14736: CALL_OW 69
14740: ST_TO_ADDR
// vehicles := UnitFilter ( kirovAttackVehicles , [ f_empty ] ) ;
14741: LD_ADDR_VAR 0 4
14745: PUSH
14746: LD_EXP 47
14750: PPUSH
14751: LD_INT 58
14753: PUSH
14754: EMPTY
14755: LIST
14756: PPUSH
14757: CALL_OW 72
14761: ST_TO_ADDR
// for i := 1 to Count ( vehicles ) do
14762: LD_ADDR_VAR 0 1
14766: PUSH
14767: DOUBLE
14768: LD_INT 1
14770: DEC
14771: ST_TO_ADDR
14772: LD_VAR 0 4
14776: PPUSH
14777: CALL 17922 0 1
14781: PUSH
14782: FOR_TO
14783: IFFALSE 14825
// if i <= tmp then
14785: LD_VAR 0 1
14789: PUSH
14790: LD_VAR 0 3
14794: LESSEQUAL
14795: IFFALSE 14823
// ComEnterUnit ( tmp [ i ] , vehicles [ i ] ) ;
14797: LD_VAR 0 3
14801: PUSH
14802: LD_VAR 0 1
14806: ARRAY
14807: PPUSH
14808: LD_VAR 0 4
14812: PUSH
14813: LD_VAR 0 1
14817: ARRAY
14818: PPUSH
14819: CALL_OW 120
14823: GO 14782
14825: POP
14826: POP
// until not UnitFilter ( kirovAttackVehicles , [ f_empty ] ) ;
14827: LD_EXP 47
14831: PPUSH
14832: LD_INT 58
14834: PUSH
14835: EMPTY
14836: LIST
14837: PPUSH
14838: CALL_OW 72
14842: NOT
14843: IFFALSE 14657
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_mechanic ] , [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_driving ] ] ] ) ;
14845: LD_ADDR_VAR 0 3
14849: PUSH
14850: LD_INT 22
14852: PUSH
14853: LD_INT 6
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: PUSH
14860: LD_INT 25
14862: PUSH
14863: LD_INT 3
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: LD_INT 3
14872: PUSH
14873: LD_INT 120
14875: PUSH
14876: LD_INT 7
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PUSH
14887: LD_INT 3
14889: PUSH
14890: LD_INT 55
14892: PUSH
14893: EMPTY
14894: LIST
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: PPUSH
14906: CALL_OW 69
14910: ST_TO_ADDR
// for i in tmp do
14911: LD_ADDR_VAR 0 1
14915: PUSH
14916: LD_VAR 0 3
14920: PUSH
14921: FOR_IN
14922: IFFALSE 14959
// if not i in kirovBaseSquad then
14924: LD_VAR 0 1
14928: PUSH
14929: LD_EXP 35
14933: IN
14934: NOT
14935: IFFALSE 14957
// kirovBaseSquad := Join ( kirovBaseSquad , i ) ;
14937: LD_ADDR_EXP 35
14941: PUSH
14942: LD_EXP 35
14946: PPUSH
14947: LD_VAR 0 1
14951: PPUSH
14952: CALL 53854 0 2
14956: ST_TO_ADDR
14957: GO 14921
14959: POP
14960: POP
// ComMoveXY ( kirovAttackVehicles , 71 , 36 ) ;
14961: LD_EXP 47
14965: PPUSH
14966: LD_INT 71
14968: PPUSH
14969: LD_INT 36
14971: PPUSH
14972: CALL_OW 111
// end ; end ;
14976: PPOPN 9
14978: END
// every 0 0$1 trigger timeToAttackOnOmicron do
14979: LD_EXP 23
14983: IFFALSE 15417
14985: GO 14987
14987: DISABLE
// begin SetAreaMapShow ( omicronGatheringArea , 1 ) ;
14988: LD_INT 16
14990: PPUSH
14991: LD_INT 1
14993: PPUSH
14994: CALL_OW 424
// RaiseSailEvent ( eventCargo ) ;
14998: LD_INT 1
15000: PPUSH
15001: CALL_OW 427
// repeat wait ( 0 0$1 ) ;
15005: LD_INT 35
15007: PPUSH
15008: CALL_OW 67
// display_strings := [ #Ru03-1 , timeToAttackOnOmicron ] ;
15012: LD_ADDR_OWVAR 47
15016: PUSH
15017: LD_STRING #Ru03-1
15019: PUSH
15020: LD_EXP 23
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: ST_TO_ADDR
// timeToAttackOnOmicron := timeToAttackOnOmicron - 0 0$1 ;
15029: LD_ADDR_EXP 23
15033: PUSH
15034: LD_EXP 23
15038: PUSH
15039: LD_INT 35
15041: MINUS
15042: ST_TO_ADDR
// until timeToAttackOnOmicron = 0 0$0 ;
15043: LD_EXP 23
15047: PUSH
15048: LD_INT 0
15050: EQUAL
15051: IFFALSE 15005
// if FilterUnitsExceptArea ( omicronGatheringArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) or FilterUnitsExceptArea ( omicronGatheringArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] ] ) then
15053: LD_INT 16
15055: PPUSH
15056: LD_INT 22
15058: PUSH
15059: LD_INT 3
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PUSH
15066: LD_INT 21
15068: PUSH
15069: LD_INT 2
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PUSH
15076: LD_INT 3
15078: PUSH
15079: LD_INT 58
15081: PUSH
15082: EMPTY
15083: LIST
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: LIST
15093: PPUSH
15094: CALL_OW 71
15098: IFTRUE 15147
15100: PUSH
15101: LD_INT 16
15103: PPUSH
15104: LD_INT 22
15106: PUSH
15107: LD_INT 3
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 21
15116: PUSH
15117: LD_INT 1
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: LD_INT 3
15126: PUSH
15127: LD_INT 55
15129: PUSH
15130: EMPTY
15131: LIST
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: LIST
15141: PPUSH
15142: CALL_OW 71
15146: OR
15147: IFFALSE 15330
// begin DialogueOn ;
15149: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
15153: LD_EXP 30
15157: PPUSH
15158: LD_STRING D7a-Kur-1
15160: PPUSH
15161: CALL_OW 94
// DialogueOff ;
15165: CALL_OW 7
// timeToAttackOnOmicron := 2 2$00 ;
15169: LD_ADDR_EXP 23
15173: PUSH
15174: LD_INT 4200
15176: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15177: LD_INT 35
15179: PPUSH
15180: CALL_OW 67
// display_strings := [ #Ru03-2 , timeToAttackOnOmicron ] ;
15184: LD_ADDR_OWVAR 47
15188: PUSH
15189: LD_STRING #Ru03-2
15191: PUSH
15192: LD_EXP 23
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: ST_TO_ADDR
// timeToAttackOnOmicron := timeToAttackOnOmicron - 0 0$1 ;
15201: LD_ADDR_EXP 23
15205: PUSH
15206: LD_EXP 23
15210: PUSH
15211: LD_INT 35
15213: MINUS
15214: ST_TO_ADDR
// until timeToAttackOnOmicron = 0 0$0 ;
15215: LD_EXP 23
15219: PUSH
15220: LD_INT 0
15222: EQUAL
15223: IFFALSE 15177
// if FilterUnitsExceptArea ( omicronGatheringArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) or FilterUnitsExceptArea ( omicronGatheringArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] ] ) then
15225: LD_INT 16
15227: PPUSH
15228: LD_INT 22
15230: PUSH
15231: LD_INT 3
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PUSH
15238: LD_INT 21
15240: PUSH
15241: LD_INT 2
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: LD_INT 3
15250: PUSH
15251: LD_INT 58
15253: PUSH
15254: EMPTY
15255: LIST
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: LIST
15265: PPUSH
15266: CALL_OW 71
15270: IFTRUE 15319
15272: PUSH
15273: LD_INT 16
15275: PPUSH
15276: LD_INT 22
15278: PUSH
15279: LD_INT 3
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: LD_INT 21
15288: PUSH
15289: LD_INT 1
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PUSH
15296: LD_INT 3
15298: PUSH
15299: LD_INT 55
15301: PUSH
15302: EMPTY
15303: LIST
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: LIST
15313: PPUSH
15314: CALL_OW 71
15318: OR
15319: IFFALSE 15330
// begin YouLost ( Delay ) ;
15321: LD_STRING Delay
15323: PPUSH
15324: CALL_OW 104
// exit ;
15328: GO 15417
// end ; end ; display_strings := [ ] ;
15330: LD_ADDR_OWVAR 47
15334: PUSH
15335: EMPTY
15336: ST_TO_ADDR
// allowedToAttackOmicron := true ;
15337: LD_ADDR_EXP 13
15341: PUSH
15342: LD_INT 1
15344: ST_TO_ADDR
// canCaptureKirovVehs := true ;
15345: LD_ADDR_EXP 22
15349: PUSH
15350: LD_INT 1
15352: ST_TO_ADDR
// retreatToKirovAllowed := false ;
15353: LD_ADDR_EXP 24
15357: PUSH
15358: LD_INT 0
15360: ST_TO_ADDR
// SetAreaMapShow ( omicronGatheringArea , 0 ) ;
15361: LD_INT 16
15363: PPUSH
15364: LD_INT 0
15366: PPUSH
15367: CALL_OW 424
// DialogueOn ;
15371: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
15375: LD_EXP 26
15379: PPUSH
15380: LD_STRING D7-Bur-1
15382: PPUSH
15383: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
15387: LD_EXP 30
15391: PPUSH
15392: LD_STRING D7-Kur-1
15394: PPUSH
15395: CALL_OW 94
// DialogueOff ;
15399: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
15403: LD_STRING M5a
15405: PPUSH
15406: CALL_OW 337
// Query ( QRefuel ) ;
15410: LD_STRING QRefuel
15412: PPUSH
15413: CALL_OW 97
// end ;
15417: END
// every 0 0$2 trigger not retreatToKirovAllowed and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirovDepot , 16 ] , [ f_not , [ f_and , [ f_type , unit_vehicle ] , [ f_empty ] ] ] , [ f_not , [ f_type , unit_building ] ] ] ) do var i , tmp ;
15418: LD_EXP 24
15422: NOT
15423: IFFALSE 15511
15425: PUSH
15426: LD_INT 22
15428: PUSH
15429: LD_INT 3
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PUSH
15436: LD_INT 91
15438: PUSH
15439: LD_EXP 42
15443: PUSH
15444: LD_INT 16
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: LIST
15451: PUSH
15452: LD_INT 3
15454: PUSH
15455: LD_INT 1
15457: PUSH
15458: LD_INT 21
15460: PUSH
15461: LD_INT 2
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: LD_INT 58
15470: PUSH
15471: EMPTY
15472: LIST
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: LIST
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: PUSH
15483: LD_INT 3
15485: PUSH
15486: LD_INT 21
15488: PUSH
15489: LD_INT 3
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: PPUSH
15506: CALL_OW 69
15510: AND
15511: IFFALSE 15662
15513: GO 15515
15515: DISABLE
15516: LD_INT 0
15518: PPUSH
15519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirovDepot , 16 ] , [ f_not , [ f_and , [ f_type , unit_vehicle ] , [ f_empty ] ] ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15520: LD_ADDR_VAR 0 2
15524: PUSH
15525: LD_INT 22
15527: PUSH
15528: LD_INT 3
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PUSH
15535: LD_INT 91
15537: PUSH
15538: LD_EXP 42
15542: PUSH
15543: LD_INT 16
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: LIST
15550: PUSH
15551: LD_INT 3
15553: PUSH
15554: LD_INT 1
15556: PUSH
15557: LD_INT 21
15559: PUSH
15560: LD_INT 2
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PUSH
15567: LD_INT 58
15569: PUSH
15570: EMPTY
15571: LIST
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: LIST
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PUSH
15582: LD_INT 3
15584: PUSH
15585: LD_INT 21
15587: PUSH
15588: LD_INT 3
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: PPUSH
15605: CALL_OW 69
15609: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
15610: LD_VAR 0 2
15614: PPUSH
15615: CALL_OW 87
// InGameOn ;
15619: CALL_OW 8
// ComMoveXY ( tmp , 70 , 33 ) ;
15623: LD_VAR 0 2
15627: PPUSH
15628: LD_INT 70
15630: PPUSH
15631: LD_INT 33
15633: PPUSH
15634: CALL_OW 111
// SayRadio ( Kurin , D12-Kur-1 ) ;
15638: LD_EXP 30
15642: PPUSH
15643: LD_STRING D12-Kur-1
15645: PPUSH
15646: CALL_OW 94
// InGameOff ;
15650: CALL_OW 9
// wait ( 0 0$2 ) ;
15654: LD_INT 70
15656: PPUSH
15657: CALL_OW 67
// enable ;
15661: ENABLE
// end ; end_of_file
15662: PPOPN 2
15664: END
// every 3 3$00 + 0 0$20 trigger not arabAttackActive do
15665: LD_EXP 8
15669: NOT
15670: IFFALSE 15697
15672: GO 15674
15674: DISABLE
// begin enable ;
15675: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , kirovCratesArea , true ) ;
15676: LD_INT 1
15678: PPUSH
15679: LD_INT 5
15681: PPUSH
15682: CALL_OW 12
15686: PPUSH
15687: LD_INT 13
15689: PPUSH
15690: LD_INT 1
15692: PPUSH
15693: CALL_OW 55
// end ; end_of_file
15697: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15698: LD_INT 0
15700: PPUSH
15701: PPUSH
// if exist_mode then
15702: LD_VAR 0 2
15706: IFFALSE 15752
// begin unit := CreateCharacter ( prefix & ident ) ;
15708: LD_ADDR_VAR 0 5
15712: PUSH
15713: LD_VAR 0 3
15717: PUSH
15718: LD_VAR 0 1
15722: STR
15723: PPUSH
15724: CALL_OW 34
15728: ST_TO_ADDR
// if unit then
15729: LD_VAR 0 5
15733: IFFALSE 15750
// DeleteCharacters ( prefix & ident ) ;
15735: LD_VAR 0 3
15739: PUSH
15740: LD_VAR 0 1
15744: STR
15745: PPUSH
15746: CALL_OW 40
// end else
15750: GO 15767
// unit := NewCharacter ( ident ) ;
15752: LD_ADDR_VAR 0 5
15756: PUSH
15757: LD_VAR 0 1
15761: PPUSH
15762: CALL_OW 25
15766: ST_TO_ADDR
// result := unit ;
15767: LD_ADDR_VAR 0 4
15771: PUSH
15772: LD_VAR 0 5
15776: ST_TO_ADDR
// end ;
15777: LD_VAR 0 4
15781: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
15782: LD_INT 0
15784: PPUSH
15785: PPUSH
// if exist_mode then
15786: LD_VAR 0 2
15790: IFFALSE 15815
// unit := CreateCharacter ( prefix & ident ) else
15792: LD_ADDR_VAR 0 5
15796: PUSH
15797: LD_VAR 0 3
15801: PUSH
15802: LD_VAR 0 1
15806: STR
15807: PPUSH
15808: CALL_OW 34
15812: ST_TO_ADDR
15813: GO 15830
// unit := NewCharacter ( ident ) ;
15815: LD_ADDR_VAR 0 5
15819: PUSH
15820: LD_VAR 0 1
15824: PPUSH
15825: CALL_OW 25
15829: ST_TO_ADDR
// result := unit ;
15830: LD_ADDR_VAR 0 4
15834: PUSH
15835: LD_VAR 0 5
15839: ST_TO_ADDR
// end ;
15840: LD_VAR 0 4
15844: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15845: LD_INT 0
15847: PPUSH
15848: PPUSH
// if not side or not nation then
15849: LD_VAR 0 1
15853: NOT
15854: IFTRUE 15863
15856: PUSH
15857: LD_VAR 0 2
15861: NOT
15862: OR
15863: IFFALSE 15867
// exit ;
15865: GO 16661
// case nation of nation_american :
15867: LD_VAR 0 2
15871: PUSH
15872: LD_INT 1
15874: DOUBLE
15875: EQUAL
15876: IFTRUE 15880
15878: GO 16102
15880: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
15881: LD_ADDR_VAR 0 4
15885: PUSH
15886: LD_INT 35
15888: PUSH
15889: LD_INT 45
15891: PUSH
15892: LD_INT 46
15894: PUSH
15895: LD_INT 47
15897: PUSH
15898: LD_INT 82
15900: PUSH
15901: LD_INT 83
15903: PUSH
15904: LD_INT 84
15906: PUSH
15907: LD_INT 85
15909: PUSH
15910: LD_INT 86
15912: PUSH
15913: LD_INT 1
15915: PUSH
15916: LD_INT 2
15918: PUSH
15919: LD_INT 6
15921: PUSH
15922: LD_INT 15
15924: PUSH
15925: LD_INT 16
15927: PUSH
15928: LD_INT 7
15930: PUSH
15931: LD_INT 12
15933: PUSH
15934: LD_INT 13
15936: PUSH
15937: LD_INT 10
15939: PUSH
15940: LD_INT 14
15942: PUSH
15943: LD_INT 20
15945: PUSH
15946: LD_INT 21
15948: PUSH
15949: LD_INT 22
15951: PUSH
15952: LD_INT 25
15954: PUSH
15955: LD_INT 32
15957: PUSH
15958: LD_INT 27
15960: PUSH
15961: LD_INT 36
15963: PUSH
15964: LD_INT 69
15966: PUSH
15967: LD_INT 39
15969: PUSH
15970: LD_INT 34
15972: PUSH
15973: LD_INT 40
15975: PUSH
15976: LD_INT 48
15978: PUSH
15979: LD_INT 49
15981: PUSH
15982: LD_INT 50
15984: PUSH
15985: LD_INT 51
15987: PUSH
15988: LD_INT 52
15990: PUSH
15991: LD_INT 53
15993: PUSH
15994: LD_INT 54
15996: PUSH
15997: LD_INT 55
15999: PUSH
16000: LD_INT 56
16002: PUSH
16003: LD_INT 57
16005: PUSH
16006: LD_INT 58
16008: PUSH
16009: LD_INT 59
16011: PUSH
16012: LD_INT 60
16014: PUSH
16015: LD_INT 61
16017: PUSH
16018: LD_INT 62
16020: PUSH
16021: LD_INT 80
16023: PUSH
16024: LD_INT 82
16026: PUSH
16027: LD_INT 83
16029: PUSH
16030: LD_INT 84
16032: PUSH
16033: LD_INT 85
16035: PUSH
16036: LD_INT 86
16038: PUSH
16039: LD_INT 90
16041: PUSH
16042: LD_INT 93
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: ST_TO_ADDR
16100: GO 16583
16102: LD_INT 2
16104: DOUBLE
16105: EQUAL
16106: IFTRUE 16110
16108: GO 16344
16110: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
16111: LD_ADDR_VAR 0 4
16115: PUSH
16116: LD_INT 35
16118: PUSH
16119: LD_INT 45
16121: PUSH
16122: LD_INT 46
16124: PUSH
16125: LD_INT 47
16127: PUSH
16128: LD_INT 82
16130: PUSH
16131: LD_INT 83
16133: PUSH
16134: LD_INT 84
16136: PUSH
16137: LD_INT 85
16139: PUSH
16140: LD_INT 87
16142: PUSH
16143: LD_INT 70
16145: PUSH
16146: LD_INT 1
16148: PUSH
16149: LD_INT 11
16151: PUSH
16152: LD_INT 3
16154: PUSH
16155: LD_INT 4
16157: PUSH
16158: LD_INT 5
16160: PUSH
16161: LD_INT 6
16163: PUSH
16164: LD_INT 15
16166: PUSH
16167: LD_INT 18
16169: PUSH
16170: LD_INT 7
16172: PUSH
16173: LD_INT 17
16175: PUSH
16176: LD_INT 8
16178: PUSH
16179: LD_INT 20
16181: PUSH
16182: LD_INT 21
16184: PUSH
16185: LD_INT 22
16187: PUSH
16188: LD_INT 72
16190: PUSH
16191: LD_INT 26
16193: PUSH
16194: LD_INT 69
16196: PUSH
16197: LD_INT 39
16199: PUSH
16200: LD_INT 40
16202: PUSH
16203: LD_INT 41
16205: PUSH
16206: LD_INT 42
16208: PUSH
16209: LD_INT 43
16211: PUSH
16212: LD_INT 48
16214: PUSH
16215: LD_INT 49
16217: PUSH
16218: LD_INT 50
16220: PUSH
16221: LD_INT 51
16223: PUSH
16224: LD_INT 52
16226: PUSH
16227: LD_INT 53
16229: PUSH
16230: LD_INT 54
16232: PUSH
16233: LD_INT 55
16235: PUSH
16236: LD_INT 56
16238: PUSH
16239: LD_INT 60
16241: PUSH
16242: LD_INT 61
16244: PUSH
16245: LD_INT 62
16247: PUSH
16248: LD_INT 66
16250: PUSH
16251: LD_INT 67
16253: PUSH
16254: LD_INT 68
16256: PUSH
16257: LD_INT 81
16259: PUSH
16260: LD_INT 82
16262: PUSH
16263: LD_INT 83
16265: PUSH
16266: LD_INT 84
16268: PUSH
16269: LD_INT 85
16271: PUSH
16272: LD_INT 87
16274: PUSH
16275: LD_INT 88
16277: PUSH
16278: LD_INT 92
16280: PUSH
16281: LD_INT 94
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: ST_TO_ADDR
16342: GO 16583
16344: LD_INT 3
16346: DOUBLE
16347: EQUAL
16348: IFTRUE 16352
16350: GO 16582
16352: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
16353: LD_ADDR_VAR 0 4
16357: PUSH
16358: LD_INT 46
16360: PUSH
16361: LD_INT 47
16363: PUSH
16364: LD_INT 1
16366: PUSH
16367: LD_INT 2
16369: PUSH
16370: LD_INT 82
16372: PUSH
16373: LD_INT 83
16375: PUSH
16376: LD_INT 84
16378: PUSH
16379: LD_INT 85
16381: PUSH
16382: LD_INT 86
16384: PUSH
16385: LD_INT 11
16387: PUSH
16388: LD_INT 9
16390: PUSH
16391: LD_INT 20
16393: PUSH
16394: LD_INT 19
16396: PUSH
16397: LD_INT 21
16399: PUSH
16400: LD_INT 24
16402: PUSH
16403: LD_INT 22
16405: PUSH
16406: LD_INT 25
16408: PUSH
16409: LD_INT 28
16411: PUSH
16412: LD_INT 29
16414: PUSH
16415: LD_INT 30
16417: PUSH
16418: LD_INT 31
16420: PUSH
16421: LD_INT 37
16423: PUSH
16424: LD_INT 38
16426: PUSH
16427: LD_INT 32
16429: PUSH
16430: LD_INT 27
16432: PUSH
16433: LD_INT 33
16435: PUSH
16436: LD_INT 69
16438: PUSH
16439: LD_INT 39
16441: PUSH
16442: LD_INT 34
16444: PUSH
16445: LD_INT 40
16447: PUSH
16448: LD_INT 71
16450: PUSH
16451: LD_INT 23
16453: PUSH
16454: LD_INT 44
16456: PUSH
16457: LD_INT 48
16459: PUSH
16460: LD_INT 49
16462: PUSH
16463: LD_INT 50
16465: PUSH
16466: LD_INT 51
16468: PUSH
16469: LD_INT 52
16471: PUSH
16472: LD_INT 53
16474: PUSH
16475: LD_INT 54
16477: PUSH
16478: LD_INT 55
16480: PUSH
16481: LD_INT 56
16483: PUSH
16484: LD_INT 57
16486: PUSH
16487: LD_INT 58
16489: PUSH
16490: LD_INT 59
16492: PUSH
16493: LD_INT 63
16495: PUSH
16496: LD_INT 64
16498: PUSH
16499: LD_INT 65
16501: PUSH
16502: LD_INT 82
16504: PUSH
16505: LD_INT 83
16507: PUSH
16508: LD_INT 84
16510: PUSH
16511: LD_INT 85
16513: PUSH
16514: LD_INT 86
16516: PUSH
16517: LD_INT 89
16519: PUSH
16520: LD_INT 91
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: ST_TO_ADDR
16580: GO 16583
16582: POP
// if state > - 1 and state < 3 then
16583: LD_VAR 0 3
16587: PUSH
16588: LD_INT 1
16590: NEG
16591: GREATER
16592: IFFALSE 16604
16594: PUSH
16595: LD_VAR 0 3
16599: PUSH
16600: LD_INT 3
16602: LESS
16603: AND
16604: IFFALSE 16661
// for i in result do
16606: LD_ADDR_VAR 0 5
16610: PUSH
16611: LD_VAR 0 4
16615: PUSH
16616: FOR_IN
16617: IFFALSE 16659
// if GetTech ( i , side ) <> state then
16619: LD_VAR 0 5
16623: PPUSH
16624: LD_VAR 0 1
16628: PPUSH
16629: CALL_OW 321
16633: PUSH
16634: LD_VAR 0 3
16638: NONEQUAL
16639: IFFALSE 16657
// result := result diff i ;
16641: LD_ADDR_VAR 0 4
16645: PUSH
16646: LD_VAR 0 4
16650: PUSH
16651: LD_VAR 0 5
16655: DIFF
16656: ST_TO_ADDR
16657: GO 16616
16659: POP
16660: POP
// end ;
16661: LD_VAR 0 4
16665: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16666: LD_INT 0
16668: PPUSH
16669: PPUSH
16670: PPUSH
// result := true ;
16671: LD_ADDR_VAR 0 3
16675: PUSH
16676: LD_INT 1
16678: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16679: LD_ADDR_VAR 0 5
16683: PUSH
16684: LD_VAR 0 2
16688: PPUSH
16689: CALL_OW 480
16693: ST_TO_ADDR
// if not tmp then
16694: LD_VAR 0 5
16698: NOT
16699: IFFALSE 16703
// exit ;
16701: GO 16752
// for i in tmp do
16703: LD_ADDR_VAR 0 4
16707: PUSH
16708: LD_VAR 0 5
16712: PUSH
16713: FOR_IN
16714: IFFALSE 16750
// if GetTech ( i , side ) <> state_researched then
16716: LD_VAR 0 4
16720: PPUSH
16721: LD_VAR 0 1
16725: PPUSH
16726: CALL_OW 321
16730: PUSH
16731: LD_INT 2
16733: NONEQUAL
16734: IFFALSE 16748
// begin result := false ;
16736: LD_ADDR_VAR 0 3
16740: PUSH
16741: LD_INT 0
16743: ST_TO_ADDR
// exit ;
16744: POP
16745: POP
16746: GO 16752
// end ;
16748: GO 16713
16750: POP
16751: POP
// end ;
16752: LD_VAR 0 3
16756: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16757: LD_INT 0
16759: PPUSH
16760: PPUSH
16761: PPUSH
16762: PPUSH
16763: PPUSH
16764: PPUSH
16765: PPUSH
16766: PPUSH
16767: PPUSH
16768: PPUSH
16769: PPUSH
16770: PPUSH
16771: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16772: LD_VAR 0 1
16776: NOT
16777: IFTRUE 16794
16779: PUSH
16780: LD_VAR 0 1
16784: PPUSH
16785: CALL_OW 257
16789: PUSH
16790: LD_INT 9
16792: NONEQUAL
16793: OR
16794: IFFALSE 16798
// exit ;
16796: GO 17377
// side := GetSide ( unit ) ;
16798: LD_ADDR_VAR 0 9
16802: PUSH
16803: LD_VAR 0 1
16807: PPUSH
16808: CALL_OW 255
16812: ST_TO_ADDR
// tech_space := tech_spacanom ;
16813: LD_ADDR_VAR 0 12
16817: PUSH
16818: LD_INT 29
16820: ST_TO_ADDR
// tech_time := tech_taurad ;
16821: LD_ADDR_VAR 0 13
16825: PUSH
16826: LD_INT 28
16828: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16829: LD_ADDR_VAR 0 11
16833: PUSH
16834: LD_VAR 0 1
16838: PPUSH
16839: CALL_OW 310
16843: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16844: LD_VAR 0 11
16848: PPUSH
16849: CALL_OW 247
16853: PUSH
16854: LD_INT 2
16856: EQUAL
16857: IFFALSE 16861
// exit ;
16859: GO 17377
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16861: LD_ADDR_VAR 0 8
16865: PUSH
16866: LD_INT 81
16868: PUSH
16869: LD_VAR 0 9
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: LD_INT 3
16880: PUSH
16881: LD_INT 21
16883: PUSH
16884: LD_INT 3
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PPUSH
16899: CALL_OW 69
16903: ST_TO_ADDR
// if not tmp then
16904: LD_VAR 0 8
16908: NOT
16909: IFFALSE 16913
// exit ;
16911: GO 17377
// if in_unit then
16913: LD_VAR 0 11
16917: IFFALSE 16941
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16919: LD_ADDR_VAR 0 10
16923: PUSH
16924: LD_VAR 0 8
16928: PPUSH
16929: LD_VAR 0 11
16933: PPUSH
16934: CALL_OW 74
16938: ST_TO_ADDR
16939: GO 16961
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16941: LD_ADDR_VAR 0 10
16945: PUSH
16946: LD_VAR 0 8
16950: PPUSH
16951: LD_VAR 0 1
16955: PPUSH
16956: CALL_OW 74
16960: ST_TO_ADDR
// if not enemy then
16961: LD_VAR 0 10
16965: NOT
16966: IFFALSE 16970
// exit ;
16968: GO 17377
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16970: LD_VAR 0 11
16974: IFFALSE 16996
16976: PUSH
16977: LD_VAR 0 11
16981: PPUSH
16982: LD_VAR 0 10
16986: PPUSH
16987: CALL_OW 296
16991: PUSH
16992: LD_INT 13
16994: GREATER
16995: AND
16996: IFTRUE 17018
16998: PUSH
16999: LD_VAR 0 1
17003: PPUSH
17004: LD_VAR 0 10
17008: PPUSH
17009: CALL_OW 296
17013: PUSH
17014: LD_INT 12
17016: GREATER
17017: OR
17018: IFFALSE 17022
// exit ;
17020: GO 17377
// missile := [ 1 ] ;
17022: LD_ADDR_VAR 0 14
17026: PUSH
17027: LD_INT 1
17029: PUSH
17030: EMPTY
17031: LIST
17032: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17033: LD_VAR 0 9
17037: PPUSH
17038: LD_VAR 0 12
17042: PPUSH
17043: CALL_OW 325
17047: IFFALSE 17076
// missile := Replace ( missile , missile + 1 , 2 ) ;
17049: LD_ADDR_VAR 0 14
17053: PUSH
17054: LD_VAR 0 14
17058: PPUSH
17059: LD_VAR 0 14
17063: PUSH
17064: LD_INT 1
17066: PLUS
17067: PPUSH
17068: LD_INT 2
17070: PPUSH
17071: CALL_OW 1
17075: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17076: LD_VAR 0 9
17080: PPUSH
17081: LD_VAR 0 13
17085: PPUSH
17086: CALL_OW 325
17090: IFFALSE 17114
17092: PUSH
17093: LD_VAR 0 10
17097: PPUSH
17098: CALL_OW 255
17102: PPUSH
17103: LD_VAR 0 13
17107: PPUSH
17108: CALL_OW 325
17112: NOT
17113: AND
17114: IFFALSE 17143
// missile := Replace ( missile , missile + 1 , 3 ) ;
17116: LD_ADDR_VAR 0 14
17120: PUSH
17121: LD_VAR 0 14
17125: PPUSH
17126: LD_VAR 0 14
17130: PUSH
17131: LD_INT 1
17133: PLUS
17134: PPUSH
17135: LD_INT 3
17137: PPUSH
17138: CALL_OW 1
17142: ST_TO_ADDR
// if missile < 2 then
17143: LD_VAR 0 14
17147: PUSH
17148: LD_INT 2
17150: LESS
17151: IFFALSE 17155
// exit ;
17153: GO 17377
// x := GetX ( enemy ) ;
17155: LD_ADDR_VAR 0 4
17159: PUSH
17160: LD_VAR 0 10
17164: PPUSH
17165: CALL_OW 250
17169: ST_TO_ADDR
// y := GetY ( enemy ) ;
17170: LD_ADDR_VAR 0 5
17174: PUSH
17175: LD_VAR 0 10
17179: PPUSH
17180: CALL_OW 251
17184: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17185: LD_ADDR_VAR 0 6
17189: PUSH
17190: LD_VAR 0 4
17194: PUSH
17195: LD_INT 1
17197: NEG
17198: PPUSH
17199: LD_INT 1
17201: PPUSH
17202: CALL_OW 12
17206: PLUS
17207: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17208: LD_ADDR_VAR 0 7
17212: PUSH
17213: LD_VAR 0 5
17217: PUSH
17218: LD_INT 1
17220: NEG
17221: PPUSH
17222: LD_INT 1
17224: PPUSH
17225: CALL_OW 12
17229: PLUS
17230: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17231: LD_VAR 0 6
17235: PPUSH
17236: LD_VAR 0 7
17240: PPUSH
17241: CALL_OW 488
17245: NOT
17246: IFFALSE 17268
// begin _x := x ;
17248: LD_ADDR_VAR 0 6
17252: PUSH
17253: LD_VAR 0 4
17257: ST_TO_ADDR
// _y := y ;
17258: LD_ADDR_VAR 0 7
17262: PUSH
17263: LD_VAR 0 5
17267: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17268: LD_ADDR_VAR 0 3
17272: PUSH
17273: LD_INT 1
17275: PPUSH
17276: LD_VAR 0 14
17280: PPUSH
17281: CALL_OW 12
17285: ST_TO_ADDR
// case i of 1 :
17286: LD_VAR 0 3
17290: PUSH
17291: LD_INT 1
17293: DOUBLE
17294: EQUAL
17295: IFTRUE 17299
17297: GO 17316
17299: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17300: LD_VAR 0 1
17304: PPUSH
17305: LD_VAR 0 10
17309: PPUSH
17310: CALL_OW 115
17314: GO 17377
17316: LD_INT 2
17318: DOUBLE
17319: EQUAL
17320: IFTRUE 17324
17322: GO 17346
17324: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17325: LD_VAR 0 1
17329: PPUSH
17330: LD_VAR 0 6
17334: PPUSH
17335: LD_VAR 0 7
17339: PPUSH
17340: CALL_OW 153
17344: GO 17377
17346: LD_INT 3
17348: DOUBLE
17349: EQUAL
17350: IFTRUE 17354
17352: GO 17376
17354: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17355: LD_VAR 0 1
17359: PPUSH
17360: LD_VAR 0 6
17364: PPUSH
17365: LD_VAR 0 7
17369: PPUSH
17370: CALL_OW 154
17374: GO 17377
17376: POP
// end ;
17377: LD_VAR 0 2
17381: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17382: LD_INT 0
17384: PPUSH
17385: PPUSH
17386: PPUSH
17387: PPUSH
17388: PPUSH
17389: PPUSH
// if not unit or not building then
17390: LD_VAR 0 1
17394: NOT
17395: IFTRUE 17404
17397: PUSH
17398: LD_VAR 0 2
17402: NOT
17403: OR
17404: IFFALSE 17408
// exit ;
17406: GO 17566
// x := GetX ( building ) ;
17408: LD_ADDR_VAR 0 5
17412: PUSH
17413: LD_VAR 0 2
17417: PPUSH
17418: CALL_OW 250
17422: ST_TO_ADDR
// y := GetY ( building ) ;
17423: LD_ADDR_VAR 0 6
17427: PUSH
17428: LD_VAR 0 2
17432: PPUSH
17433: CALL_OW 251
17437: ST_TO_ADDR
// for i := 0 to 5 do
17438: LD_ADDR_VAR 0 4
17442: PUSH
17443: DOUBLE
17444: LD_INT 0
17446: DEC
17447: ST_TO_ADDR
17448: LD_INT 5
17450: PUSH
17451: FOR_TO
17452: IFFALSE 17564
// begin _x := ShiftX ( x , i , 3 ) ;
17454: LD_ADDR_VAR 0 7
17458: PUSH
17459: LD_VAR 0 5
17463: PPUSH
17464: LD_VAR 0 4
17468: PPUSH
17469: LD_INT 3
17471: PPUSH
17472: CALL_OW 272
17476: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17477: LD_ADDR_VAR 0 8
17481: PUSH
17482: LD_VAR 0 6
17486: PPUSH
17487: LD_VAR 0 4
17491: PPUSH
17492: LD_INT 3
17494: PPUSH
17495: CALL_OW 273
17499: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17500: LD_VAR 0 7
17504: PPUSH
17505: LD_VAR 0 8
17509: PPUSH
17510: CALL_OW 488
17514: NOT
17515: IFFALSE 17519
// continue ;
17517: GO 17451
// if HexInfo ( _x , _y ) = 0 then
17519: LD_VAR 0 7
17523: PPUSH
17524: LD_VAR 0 8
17528: PPUSH
17529: CALL_OW 428
17533: PUSH
17534: LD_INT 0
17536: EQUAL
17537: IFFALSE 17562
// begin ComMoveXY ( unit , _x , _y ) ;
17539: LD_VAR 0 1
17543: PPUSH
17544: LD_VAR 0 7
17548: PPUSH
17549: LD_VAR 0 8
17553: PPUSH
17554: CALL_OW 111
// exit ;
17558: POP
17559: POP
17560: GO 17566
// end ; end ;
17562: GO 17451
17564: POP
17565: POP
// end ;
17566: LD_VAR 0 3
17570: RET
// export function ScanBase ( side , base_area ) ; begin
17571: LD_INT 0
17573: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17574: LD_ADDR_VAR 0 3
17578: PUSH
17579: LD_VAR 0 2
17583: PPUSH
17584: LD_INT 81
17586: PUSH
17587: LD_VAR 0 1
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PPUSH
17596: CALL_OW 70
17600: ST_TO_ADDR
// end ;
17601: LD_VAR 0 3
17605: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17606: LD_INT 0
17608: PPUSH
17609: PPUSH
17610: PPUSH
17611: PPUSH
// result := false ;
17612: LD_ADDR_VAR 0 2
17616: PUSH
17617: LD_INT 0
17619: ST_TO_ADDR
// side := GetSide ( unit ) ;
17620: LD_ADDR_VAR 0 3
17624: PUSH
17625: LD_VAR 0 1
17629: PPUSH
17630: CALL_OW 255
17634: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17635: LD_ADDR_VAR 0 4
17639: PUSH
17640: LD_VAR 0 1
17644: PPUSH
17645: CALL_OW 248
17649: ST_TO_ADDR
// case nat of 1 :
17650: LD_VAR 0 4
17654: PUSH
17655: LD_INT 1
17657: DOUBLE
17658: EQUAL
17659: IFTRUE 17663
17661: GO 17674
17663: POP
// tech := tech_lassight ; 2 :
17664: LD_ADDR_VAR 0 5
17668: PUSH
17669: LD_INT 12
17671: ST_TO_ADDR
17672: GO 17713
17674: LD_INT 2
17676: DOUBLE
17677: EQUAL
17678: IFTRUE 17682
17680: GO 17693
17682: POP
// tech := tech_mortar ; 3 :
17683: LD_ADDR_VAR 0 5
17687: PUSH
17688: LD_INT 41
17690: ST_TO_ADDR
17691: GO 17713
17693: LD_INT 3
17695: DOUBLE
17696: EQUAL
17697: IFTRUE 17701
17699: GO 17712
17701: POP
// tech := tech_bazooka ; end ;
17702: LD_ADDR_VAR 0 5
17706: PUSH
17707: LD_INT 44
17709: ST_TO_ADDR
17710: GO 17713
17712: POP
// if Researched ( side , tech ) then
17713: LD_VAR 0 3
17717: PPUSH
17718: LD_VAR 0 5
17722: PPUSH
17723: CALL_OW 325
17727: IFFALSE 17754
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17729: LD_ADDR_VAR 0 2
17733: PUSH
17734: LD_INT 5
17736: PUSH
17737: LD_INT 8
17739: PUSH
17740: LD_INT 9
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: LIST
17747: PUSH
17748: LD_VAR 0 4
17752: ARRAY
17753: ST_TO_ADDR
// end ;
17754: LD_VAR 0 2
17758: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17759: LD_INT 0
17761: PPUSH
17762: PPUSH
17763: PPUSH
// if not mines then
17764: LD_VAR 0 2
17768: NOT
17769: IFFALSE 17773
// exit ;
17771: GO 17917
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17773: LD_ADDR_VAR 0 5
17777: PUSH
17778: LD_INT 81
17780: PUSH
17781: LD_VAR 0 1
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: LD_INT 3
17792: PUSH
17793: LD_INT 21
17795: PUSH
17796: LD_INT 3
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PPUSH
17811: CALL_OW 69
17815: ST_TO_ADDR
// for i in mines do
17816: LD_ADDR_VAR 0 4
17820: PUSH
17821: LD_VAR 0 2
17825: PUSH
17826: FOR_IN
17827: IFFALSE 17915
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17829: LD_VAR 0 4
17833: PUSH
17834: LD_INT 1
17836: ARRAY
17837: PPUSH
17838: LD_VAR 0 4
17842: PUSH
17843: LD_INT 2
17845: ARRAY
17846: PPUSH
17847: CALL_OW 458
17851: NOT
17852: IFFALSE 17856
// continue ;
17854: GO 17826
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17856: LD_VAR 0 4
17860: PUSH
17861: LD_INT 1
17863: ARRAY
17864: PPUSH
17865: LD_VAR 0 4
17869: PUSH
17870: LD_INT 2
17872: ARRAY
17873: PPUSH
17874: CALL_OW 428
17878: PUSH
17879: LD_VAR 0 5
17883: IN
17884: IFFALSE 17913
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17886: LD_VAR 0 4
17890: PUSH
17891: LD_INT 1
17893: ARRAY
17894: PPUSH
17895: LD_VAR 0 4
17899: PUSH
17900: LD_INT 2
17902: ARRAY
17903: PPUSH
17904: LD_VAR 0 1
17908: PPUSH
17909: CALL_OW 456
// end ;
17913: GO 17826
17915: POP
17916: POP
// end ;
17917: LD_VAR 0 3
17921: RET
// export function Count ( array ) ; begin
17922: LD_INT 0
17924: PPUSH
// result := array + 0 ;
17925: LD_ADDR_VAR 0 2
17929: PUSH
17930: LD_VAR 0 1
17934: PUSH
17935: LD_INT 0
17937: PLUS
17938: ST_TO_ADDR
// end ;
17939: LD_VAR 0 2
17943: RET
// export function IsEmpty ( building ) ; begin
17944: LD_INT 0
17946: PPUSH
// if not building then
17947: LD_VAR 0 1
17951: NOT
17952: IFFALSE 17956
// exit ;
17954: GO 17999
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17956: LD_ADDR_VAR 0 2
17960: PUSH
17961: LD_VAR 0 1
17965: PUSH
17966: LD_INT 22
17968: PUSH
17969: LD_VAR 0 1
17973: PPUSH
17974: CALL_OW 255
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 58
17985: PUSH
17986: EMPTY
17987: LIST
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PPUSH
17993: CALL_OW 69
17997: IN
17998: ST_TO_ADDR
// end ;
17999: LD_VAR 0 2
18003: RET
// export function IsNotFull ( building ) ; var places ; begin
18004: LD_INT 0
18006: PPUSH
18007: PPUSH
// if not building then
18008: LD_VAR 0 1
18012: NOT
18013: IFFALSE 18017
// exit ;
18015: GO 18045
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18017: LD_ADDR_VAR 0 2
18021: PUSH
18022: LD_VAR 0 1
18026: PPUSH
18027: LD_INT 3
18029: PUSH
18030: LD_INT 62
18032: PUSH
18033: EMPTY
18034: LIST
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PPUSH
18040: CALL_OW 72
18044: ST_TO_ADDR
// end ;
18045: LD_VAR 0 2
18049: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18050: LD_INT 0
18052: PPUSH
18053: PPUSH
18054: PPUSH
18055: PPUSH
// tmp := [ ] ;
18056: LD_ADDR_VAR 0 3
18060: PUSH
18061: EMPTY
18062: ST_TO_ADDR
// list := [ ] ;
18063: LD_ADDR_VAR 0 5
18067: PUSH
18068: EMPTY
18069: ST_TO_ADDR
// for i = 16 to 25 do
18070: LD_ADDR_VAR 0 4
18074: PUSH
18075: DOUBLE
18076: LD_INT 16
18078: DEC
18079: ST_TO_ADDR
18080: LD_INT 25
18082: PUSH
18083: FOR_TO
18084: IFFALSE 18157
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18086: LD_ADDR_VAR 0 3
18090: PUSH
18091: LD_VAR 0 3
18095: PUSH
18096: LD_INT 22
18098: PUSH
18099: LD_VAR 0 1
18103: PPUSH
18104: CALL_OW 255
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 91
18115: PUSH
18116: LD_VAR 0 1
18120: PUSH
18121: LD_INT 6
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 30
18131: PUSH
18132: LD_VAR 0 4
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: LIST
18145: PUSH
18146: EMPTY
18147: LIST
18148: PPUSH
18149: CALL_OW 69
18153: ADD
18154: ST_TO_ADDR
18155: GO 18083
18157: POP
18158: POP
// for i = 1 to tmp do
18159: LD_ADDR_VAR 0 4
18163: PUSH
18164: DOUBLE
18165: LD_INT 1
18167: DEC
18168: ST_TO_ADDR
18169: LD_VAR 0 3
18173: PUSH
18174: FOR_TO
18175: IFFALSE 18263
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18177: LD_ADDR_VAR 0 5
18181: PUSH
18182: LD_VAR 0 5
18186: PUSH
18187: LD_VAR 0 3
18191: PUSH
18192: LD_VAR 0 4
18196: ARRAY
18197: PPUSH
18198: CALL_OW 266
18202: PUSH
18203: LD_VAR 0 3
18207: PUSH
18208: LD_VAR 0 4
18212: ARRAY
18213: PPUSH
18214: CALL_OW 250
18218: PUSH
18219: LD_VAR 0 3
18223: PUSH
18224: LD_VAR 0 4
18228: ARRAY
18229: PPUSH
18230: CALL_OW 251
18234: PUSH
18235: LD_VAR 0 3
18239: PUSH
18240: LD_VAR 0 4
18244: ARRAY
18245: PPUSH
18246: CALL_OW 254
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: PUSH
18257: EMPTY
18258: LIST
18259: ADD
18260: ST_TO_ADDR
18261: GO 18174
18263: POP
18264: POP
// result := list ;
18265: LD_ADDR_VAR 0 2
18269: PUSH
18270: LD_VAR 0 5
18274: ST_TO_ADDR
// end ;
18275: LD_VAR 0 2
18279: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18280: LD_INT 0
18282: PPUSH
18283: PPUSH
18284: PPUSH
18285: PPUSH
18286: PPUSH
18287: PPUSH
18288: PPUSH
// if not factory then
18289: LD_VAR 0 1
18293: NOT
18294: IFFALSE 18298
// exit ;
18296: GO 18901
// if control = control_apeman then
18298: LD_VAR 0 4
18302: PUSH
18303: LD_INT 5
18305: EQUAL
18306: IFFALSE 18415
// begin tmp := UnitsInside ( factory ) ;
18308: LD_ADDR_VAR 0 8
18312: PUSH
18313: LD_VAR 0 1
18317: PPUSH
18318: CALL_OW 313
18322: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18323: LD_VAR 0 8
18327: PPUSH
18328: LD_INT 25
18330: PUSH
18331: LD_INT 12
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PPUSH
18338: CALL_OW 72
18342: NOT
18343: IFFALSE 18353
// control := control_manual ;
18345: LD_ADDR_VAR 0 4
18349: PUSH
18350: LD_INT 1
18352: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18353: LD_ADDR_VAR 0 8
18357: PUSH
18358: LD_VAR 0 1
18362: PPUSH
18363: CALL 18050 0 1
18367: ST_TO_ADDR
// if tmp then
18368: LD_VAR 0 8
18372: IFFALSE 18415
// begin for i in tmp do
18374: LD_ADDR_VAR 0 7
18378: PUSH
18379: LD_VAR 0 8
18383: PUSH
18384: FOR_IN
18385: IFFALSE 18413
// if i [ 1 ] = b_ext_radio then
18387: LD_VAR 0 7
18391: PUSH
18392: LD_INT 1
18394: ARRAY
18395: PUSH
18396: LD_INT 22
18398: EQUAL
18399: IFFALSE 18411
// begin control := control_remote ;
18401: LD_ADDR_VAR 0 4
18405: PUSH
18406: LD_INT 2
18408: ST_TO_ADDR
// break ;
18409: GO 18413
// end ;
18411: GO 18384
18413: POP
18414: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18415: LD_VAR 0 1
18419: PPUSH
18420: LD_VAR 0 2
18424: PPUSH
18425: LD_VAR 0 3
18429: PPUSH
18430: LD_VAR 0 4
18434: PPUSH
18435: LD_VAR 0 5
18439: PPUSH
18440: CALL_OW 448
18444: IFFALSE 18479
// begin result := [ chassis , engine , control , weapon ] ;
18446: LD_ADDR_VAR 0 6
18450: PUSH
18451: LD_VAR 0 2
18455: PUSH
18456: LD_VAR 0 3
18460: PUSH
18461: LD_VAR 0 4
18465: PUSH
18466: LD_VAR 0 5
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: ST_TO_ADDR
// exit ;
18477: GO 18901
// end ; _chassis := AvailableChassisList ( factory ) ;
18479: LD_ADDR_VAR 0 9
18483: PUSH
18484: LD_VAR 0 1
18488: PPUSH
18489: CALL_OW 475
18493: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18494: LD_ADDR_VAR 0 11
18498: PUSH
18499: LD_VAR 0 1
18503: PPUSH
18504: CALL_OW 476
18508: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18509: LD_ADDR_VAR 0 12
18513: PUSH
18514: LD_VAR 0 1
18518: PPUSH
18519: CALL_OW 477
18523: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18524: LD_ADDR_VAR 0 10
18528: PUSH
18529: LD_VAR 0 1
18533: PPUSH
18534: CALL_OW 478
18538: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18539: LD_VAR 0 9
18543: NOT
18544: IFTRUE 18553
18546: PUSH
18547: LD_VAR 0 11
18551: NOT
18552: OR
18553: IFTRUE 18562
18555: PUSH
18556: LD_VAR 0 12
18560: NOT
18561: OR
18562: IFTRUE 18571
18564: PUSH
18565: LD_VAR 0 10
18569: NOT
18570: OR
18571: IFFALSE 18606
// begin result := [ chassis , engine , control , weapon ] ;
18573: LD_ADDR_VAR 0 6
18577: PUSH
18578: LD_VAR 0 2
18582: PUSH
18583: LD_VAR 0 3
18587: PUSH
18588: LD_VAR 0 4
18592: PUSH
18593: LD_VAR 0 5
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: ST_TO_ADDR
// exit ;
18604: GO 18901
// end ; if not chassis in _chassis then
18606: LD_VAR 0 2
18610: PUSH
18611: LD_VAR 0 9
18615: IN
18616: NOT
18617: IFFALSE 18643
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18619: LD_ADDR_VAR 0 2
18623: PUSH
18624: LD_VAR 0 9
18628: PUSH
18629: LD_INT 1
18631: PPUSH
18632: LD_VAR 0 9
18636: PPUSH
18637: CALL_OW 12
18641: ARRAY
18642: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18643: LD_VAR 0 2
18647: PPUSH
18648: LD_VAR 0 3
18652: PPUSH
18653: CALL 18906 0 2
18657: NOT
18658: IFFALSE 18719
// repeat engine := _engine [ 1 ] ;
18660: LD_ADDR_VAR 0 3
18664: PUSH
18665: LD_VAR 0 11
18669: PUSH
18670: LD_INT 1
18672: ARRAY
18673: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18674: LD_ADDR_VAR 0 11
18678: PUSH
18679: LD_VAR 0 11
18683: PPUSH
18684: LD_INT 1
18686: PPUSH
18687: CALL_OW 3
18691: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18692: LD_VAR 0 2
18696: PPUSH
18697: LD_VAR 0 3
18701: PPUSH
18702: CALL 18906 0 2
18706: IFTRUE 18717
18708: PUSH
18709: LD_VAR 0 11
18713: PUSH
18714: EMPTY
18715: EQUAL
18716: OR
18717: IFFALSE 18660
// if not control in _control then
18719: LD_VAR 0 4
18723: PUSH
18724: LD_VAR 0 12
18728: IN
18729: NOT
18730: IFFALSE 18756
// control := _control [ rand ( 1 , _control ) ] ;
18732: LD_ADDR_VAR 0 4
18736: PUSH
18737: LD_VAR 0 12
18741: PUSH
18742: LD_INT 1
18744: PPUSH
18745: LD_VAR 0 12
18749: PPUSH
18750: CALL_OW 12
18754: ARRAY
18755: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18756: LD_VAR 0 2
18760: PPUSH
18761: LD_VAR 0 5
18765: PPUSH
18766: CALL 19128 0 2
18770: NOT
18771: IFFALSE 18832
// repeat weapon := _weapon [ 1 ] ;
18773: LD_ADDR_VAR 0 5
18777: PUSH
18778: LD_VAR 0 10
18782: PUSH
18783: LD_INT 1
18785: ARRAY
18786: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18787: LD_ADDR_VAR 0 10
18791: PUSH
18792: LD_VAR 0 10
18796: PPUSH
18797: LD_INT 1
18799: PPUSH
18800: CALL_OW 3
18804: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18805: LD_VAR 0 2
18809: PPUSH
18810: LD_VAR 0 5
18814: PPUSH
18815: CALL 19128 0 2
18819: IFTRUE 18830
18821: PUSH
18822: LD_VAR 0 10
18826: PUSH
18827: EMPTY
18828: EQUAL
18829: OR
18830: IFFALSE 18773
// result := [ ] ;
18832: LD_ADDR_VAR 0 6
18836: PUSH
18837: EMPTY
18838: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18839: LD_VAR 0 1
18843: PPUSH
18844: LD_VAR 0 2
18848: PPUSH
18849: LD_VAR 0 3
18853: PPUSH
18854: LD_VAR 0 4
18858: PPUSH
18859: LD_VAR 0 5
18863: PPUSH
18864: CALL_OW 448
18868: IFFALSE 18901
// result := [ chassis , engine , control , weapon ] ;
18870: LD_ADDR_VAR 0 6
18874: PUSH
18875: LD_VAR 0 2
18879: PUSH
18880: LD_VAR 0 3
18884: PUSH
18885: LD_VAR 0 4
18889: PUSH
18890: LD_VAR 0 5
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: ST_TO_ADDR
// end ;
18901: LD_VAR 0 6
18905: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18906: LD_INT 0
18908: PPUSH
// if not chassis or not engine then
18909: LD_VAR 0 1
18913: NOT
18914: IFTRUE 18923
18916: PUSH
18917: LD_VAR 0 2
18921: NOT
18922: OR
18923: IFFALSE 18927
// exit ;
18925: GO 19123
// case engine of engine_solar :
18927: LD_VAR 0 2
18931: PUSH
18932: LD_INT 2
18934: DOUBLE
18935: EQUAL
18936: IFTRUE 18940
18938: GO 18978
18940: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18941: LD_ADDR_VAR 0 3
18945: PUSH
18946: LD_INT 11
18948: PUSH
18949: LD_INT 12
18951: PUSH
18952: LD_INT 13
18954: PUSH
18955: LD_INT 14
18957: PUSH
18958: LD_INT 1
18960: PUSH
18961: LD_INT 2
18963: PUSH
18964: LD_INT 3
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: ST_TO_ADDR
18976: GO 19107
18978: LD_INT 1
18980: DOUBLE
18981: EQUAL
18982: IFTRUE 18986
18984: GO 19048
18986: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18987: LD_ADDR_VAR 0 3
18991: PUSH
18992: LD_INT 11
18994: PUSH
18995: LD_INT 12
18997: PUSH
18998: LD_INT 13
19000: PUSH
19001: LD_INT 14
19003: PUSH
19004: LD_INT 1
19006: PUSH
19007: LD_INT 2
19009: PUSH
19010: LD_INT 3
19012: PUSH
19013: LD_INT 4
19015: PUSH
19016: LD_INT 5
19018: PUSH
19019: LD_INT 21
19021: PUSH
19022: LD_INT 23
19024: PUSH
19025: LD_INT 22
19027: PUSH
19028: LD_INT 24
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: ST_TO_ADDR
19046: GO 19107
19048: LD_INT 3
19050: DOUBLE
19051: EQUAL
19052: IFTRUE 19056
19054: GO 19106
19056: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19057: LD_ADDR_VAR 0 3
19061: PUSH
19062: LD_INT 13
19064: PUSH
19065: LD_INT 14
19067: PUSH
19068: LD_INT 2
19070: PUSH
19071: LD_INT 3
19073: PUSH
19074: LD_INT 4
19076: PUSH
19077: LD_INT 5
19079: PUSH
19080: LD_INT 21
19082: PUSH
19083: LD_INT 22
19085: PUSH
19086: LD_INT 23
19088: PUSH
19089: LD_INT 24
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: ST_TO_ADDR
19104: GO 19107
19106: POP
// result := ( chassis in result ) ;
19107: LD_ADDR_VAR 0 3
19111: PUSH
19112: LD_VAR 0 1
19116: PUSH
19117: LD_VAR 0 3
19121: IN
19122: ST_TO_ADDR
// end ;
19123: LD_VAR 0 3
19127: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19128: LD_INT 0
19130: PPUSH
// if not chassis or not weapon then
19131: LD_VAR 0 1
19135: NOT
19136: IFTRUE 19145
19138: PUSH
19139: LD_VAR 0 2
19143: NOT
19144: OR
19145: IFFALSE 19149
// exit ;
19147: GO 20209
// case weapon of us_machine_gun :
19149: LD_VAR 0 2
19153: PUSH
19154: LD_INT 2
19156: DOUBLE
19157: EQUAL
19158: IFTRUE 19162
19160: GO 19192
19162: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19163: LD_ADDR_VAR 0 3
19167: PUSH
19168: LD_INT 1
19170: PUSH
19171: LD_INT 2
19173: PUSH
19174: LD_INT 3
19176: PUSH
19177: LD_INT 4
19179: PUSH
19180: LD_INT 5
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: ST_TO_ADDR
19190: GO 20193
19192: LD_INT 3
19194: DOUBLE
19195: EQUAL
19196: IFTRUE 19200
19198: GO 19230
19200: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19201: LD_ADDR_VAR 0 3
19205: PUSH
19206: LD_INT 1
19208: PUSH
19209: LD_INT 2
19211: PUSH
19212: LD_INT 3
19214: PUSH
19215: LD_INT 4
19217: PUSH
19218: LD_INT 5
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: ST_TO_ADDR
19228: GO 20193
19230: LD_INT 11
19232: DOUBLE
19233: EQUAL
19234: IFTRUE 19238
19236: GO 19268
19238: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19239: LD_ADDR_VAR 0 3
19243: PUSH
19244: LD_INT 1
19246: PUSH
19247: LD_INT 2
19249: PUSH
19250: LD_INT 3
19252: PUSH
19253: LD_INT 4
19255: PUSH
19256: LD_INT 5
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: ST_TO_ADDR
19266: GO 20193
19268: LD_INT 4
19270: DOUBLE
19271: EQUAL
19272: IFTRUE 19276
19274: GO 19302
19276: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19277: LD_ADDR_VAR 0 3
19281: PUSH
19282: LD_INT 2
19284: PUSH
19285: LD_INT 3
19287: PUSH
19288: LD_INT 4
19290: PUSH
19291: LD_INT 5
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: ST_TO_ADDR
19300: GO 20193
19302: LD_INT 5
19304: DOUBLE
19305: EQUAL
19306: IFTRUE 19310
19308: GO 19336
19310: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19311: LD_ADDR_VAR 0 3
19315: PUSH
19316: LD_INT 2
19318: PUSH
19319: LD_INT 3
19321: PUSH
19322: LD_INT 4
19324: PUSH
19325: LD_INT 5
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: ST_TO_ADDR
19334: GO 20193
19336: LD_INT 9
19338: DOUBLE
19339: EQUAL
19340: IFTRUE 19344
19342: GO 19370
19344: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19345: LD_ADDR_VAR 0 3
19349: PUSH
19350: LD_INT 2
19352: PUSH
19353: LD_INT 3
19355: PUSH
19356: LD_INT 4
19358: PUSH
19359: LD_INT 5
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: ST_TO_ADDR
19368: GO 20193
19370: LD_INT 7
19372: DOUBLE
19373: EQUAL
19374: IFTRUE 19378
19376: GO 19404
19378: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19379: LD_ADDR_VAR 0 3
19383: PUSH
19384: LD_INT 2
19386: PUSH
19387: LD_INT 3
19389: PUSH
19390: LD_INT 4
19392: PUSH
19393: LD_INT 5
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: ST_TO_ADDR
19402: GO 20193
19404: LD_INT 12
19406: DOUBLE
19407: EQUAL
19408: IFTRUE 19412
19410: GO 19438
19412: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19413: LD_ADDR_VAR 0 3
19417: PUSH
19418: LD_INT 2
19420: PUSH
19421: LD_INT 3
19423: PUSH
19424: LD_INT 4
19426: PUSH
19427: LD_INT 5
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: ST_TO_ADDR
19436: GO 20193
19438: LD_INT 13
19440: DOUBLE
19441: EQUAL
19442: IFTRUE 19446
19444: GO 19472
19446: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19447: LD_ADDR_VAR 0 3
19451: PUSH
19452: LD_INT 2
19454: PUSH
19455: LD_INT 3
19457: PUSH
19458: LD_INT 4
19460: PUSH
19461: LD_INT 5
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: ST_TO_ADDR
19470: GO 20193
19472: LD_INT 14
19474: DOUBLE
19475: EQUAL
19476: IFTRUE 19480
19478: GO 19498
19480: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19481: LD_ADDR_VAR 0 3
19485: PUSH
19486: LD_INT 4
19488: PUSH
19489: LD_INT 5
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: ST_TO_ADDR
19496: GO 20193
19498: LD_INT 6
19500: DOUBLE
19501: EQUAL
19502: IFTRUE 19506
19504: GO 19524
19506: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19507: LD_ADDR_VAR 0 3
19511: PUSH
19512: LD_INT 4
19514: PUSH
19515: LD_INT 5
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: ST_TO_ADDR
19522: GO 20193
19524: LD_INT 10
19526: DOUBLE
19527: EQUAL
19528: IFTRUE 19532
19530: GO 19550
19532: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19533: LD_ADDR_VAR 0 3
19537: PUSH
19538: LD_INT 4
19540: PUSH
19541: LD_INT 5
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: ST_TO_ADDR
19548: GO 20193
19550: LD_INT 22
19552: DOUBLE
19553: EQUAL
19554: IFTRUE 19558
19556: GO 19584
19558: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19559: LD_ADDR_VAR 0 3
19563: PUSH
19564: LD_INT 11
19566: PUSH
19567: LD_INT 12
19569: PUSH
19570: LD_INT 13
19572: PUSH
19573: LD_INT 14
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: ST_TO_ADDR
19582: GO 20193
19584: LD_INT 23
19586: DOUBLE
19587: EQUAL
19588: IFTRUE 19592
19590: GO 19618
19592: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19593: LD_ADDR_VAR 0 3
19597: PUSH
19598: LD_INT 11
19600: PUSH
19601: LD_INT 12
19603: PUSH
19604: LD_INT 13
19606: PUSH
19607: LD_INT 14
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: ST_TO_ADDR
19616: GO 20193
19618: LD_INT 24
19620: DOUBLE
19621: EQUAL
19622: IFTRUE 19626
19624: GO 19652
19626: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19627: LD_ADDR_VAR 0 3
19631: PUSH
19632: LD_INT 11
19634: PUSH
19635: LD_INT 12
19637: PUSH
19638: LD_INT 13
19640: PUSH
19641: LD_INT 14
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: ST_TO_ADDR
19650: GO 20193
19652: LD_INT 30
19654: DOUBLE
19655: EQUAL
19656: IFTRUE 19660
19658: GO 19686
19660: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19661: LD_ADDR_VAR 0 3
19665: PUSH
19666: LD_INT 11
19668: PUSH
19669: LD_INT 12
19671: PUSH
19672: LD_INT 13
19674: PUSH
19675: LD_INT 14
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: ST_TO_ADDR
19684: GO 20193
19686: LD_INT 25
19688: DOUBLE
19689: EQUAL
19690: IFTRUE 19694
19692: GO 19712
19694: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19695: LD_ADDR_VAR 0 3
19699: PUSH
19700: LD_INT 13
19702: PUSH
19703: LD_INT 14
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: ST_TO_ADDR
19710: GO 20193
19712: LD_INT 27
19714: DOUBLE
19715: EQUAL
19716: IFTRUE 19720
19718: GO 19738
19720: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19721: LD_ADDR_VAR 0 3
19725: PUSH
19726: LD_INT 13
19728: PUSH
19729: LD_INT 14
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: ST_TO_ADDR
19736: GO 20193
19738: LD_INT 92
19740: DOUBLE
19741: EQUAL
19742: IFTRUE 19746
19744: GO 19772
19746: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19747: LD_ADDR_VAR 0 3
19751: PUSH
19752: LD_INT 11
19754: PUSH
19755: LD_INT 12
19757: PUSH
19758: LD_INT 13
19760: PUSH
19761: LD_INT 14
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: ST_TO_ADDR
19770: GO 20193
19772: LD_INT 28
19774: DOUBLE
19775: EQUAL
19776: IFTRUE 19780
19778: GO 19798
19780: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19781: LD_ADDR_VAR 0 3
19785: PUSH
19786: LD_INT 13
19788: PUSH
19789: LD_INT 14
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: ST_TO_ADDR
19796: GO 20193
19798: LD_INT 29
19800: DOUBLE
19801: EQUAL
19802: IFTRUE 19806
19804: GO 19824
19806: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19807: LD_ADDR_VAR 0 3
19811: PUSH
19812: LD_INT 13
19814: PUSH
19815: LD_INT 14
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: ST_TO_ADDR
19822: GO 20193
19824: LD_INT 31
19826: DOUBLE
19827: EQUAL
19828: IFTRUE 19832
19830: GO 19850
19832: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19833: LD_ADDR_VAR 0 3
19837: PUSH
19838: LD_INT 13
19840: PUSH
19841: LD_INT 14
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: ST_TO_ADDR
19848: GO 20193
19850: LD_INT 26
19852: DOUBLE
19853: EQUAL
19854: IFTRUE 19858
19856: GO 19876
19858: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19859: LD_ADDR_VAR 0 3
19863: PUSH
19864: LD_INT 13
19866: PUSH
19867: LD_INT 14
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: ST_TO_ADDR
19874: GO 20193
19876: LD_INT 42
19878: DOUBLE
19879: EQUAL
19880: IFTRUE 19884
19882: GO 19910
19884: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19885: LD_ADDR_VAR 0 3
19889: PUSH
19890: LD_INT 21
19892: PUSH
19893: LD_INT 22
19895: PUSH
19896: LD_INT 23
19898: PUSH
19899: LD_INT 24
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: ST_TO_ADDR
19908: GO 20193
19910: LD_INT 43
19912: DOUBLE
19913: EQUAL
19914: IFTRUE 19918
19916: GO 19944
19918: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19919: LD_ADDR_VAR 0 3
19923: PUSH
19924: LD_INT 21
19926: PUSH
19927: LD_INT 22
19929: PUSH
19930: LD_INT 23
19932: PUSH
19933: LD_INT 24
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: ST_TO_ADDR
19942: GO 20193
19944: LD_INT 44
19946: DOUBLE
19947: EQUAL
19948: IFTRUE 19952
19950: GO 19978
19952: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19953: LD_ADDR_VAR 0 3
19957: PUSH
19958: LD_INT 21
19960: PUSH
19961: LD_INT 22
19963: PUSH
19964: LD_INT 23
19966: PUSH
19967: LD_INT 24
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: ST_TO_ADDR
19976: GO 20193
19978: LD_INT 45
19980: DOUBLE
19981: EQUAL
19982: IFTRUE 19986
19984: GO 20012
19986: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19987: LD_ADDR_VAR 0 3
19991: PUSH
19992: LD_INT 21
19994: PUSH
19995: LD_INT 22
19997: PUSH
19998: LD_INT 23
20000: PUSH
20001: LD_INT 24
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: ST_TO_ADDR
20010: GO 20193
20012: LD_INT 49
20014: DOUBLE
20015: EQUAL
20016: IFTRUE 20020
20018: GO 20046
20020: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20021: LD_ADDR_VAR 0 3
20025: PUSH
20026: LD_INT 21
20028: PUSH
20029: LD_INT 22
20031: PUSH
20032: LD_INT 23
20034: PUSH
20035: LD_INT 24
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: ST_TO_ADDR
20044: GO 20193
20046: LD_INT 51
20048: DOUBLE
20049: EQUAL
20050: IFTRUE 20054
20052: GO 20080
20054: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20055: LD_ADDR_VAR 0 3
20059: PUSH
20060: LD_INT 21
20062: PUSH
20063: LD_INT 22
20065: PUSH
20066: LD_INT 23
20068: PUSH
20069: LD_INT 24
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: ST_TO_ADDR
20078: GO 20193
20080: LD_INT 52
20082: DOUBLE
20083: EQUAL
20084: IFTRUE 20088
20086: GO 20114
20088: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20089: LD_ADDR_VAR 0 3
20093: PUSH
20094: LD_INT 21
20096: PUSH
20097: LD_INT 22
20099: PUSH
20100: LD_INT 23
20102: PUSH
20103: LD_INT 24
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: ST_TO_ADDR
20112: GO 20193
20114: LD_INT 53
20116: DOUBLE
20117: EQUAL
20118: IFTRUE 20122
20120: GO 20140
20122: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20123: LD_ADDR_VAR 0 3
20127: PUSH
20128: LD_INT 23
20130: PUSH
20131: LD_INT 24
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: ST_TO_ADDR
20138: GO 20193
20140: LD_INT 46
20142: DOUBLE
20143: EQUAL
20144: IFTRUE 20148
20146: GO 20166
20148: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20149: LD_ADDR_VAR 0 3
20153: PUSH
20154: LD_INT 23
20156: PUSH
20157: LD_INT 24
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: ST_TO_ADDR
20164: GO 20193
20166: LD_INT 47
20168: DOUBLE
20169: EQUAL
20170: IFTRUE 20174
20172: GO 20192
20174: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20175: LD_ADDR_VAR 0 3
20179: PUSH
20180: LD_INT 23
20182: PUSH
20183: LD_INT 24
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: ST_TO_ADDR
20190: GO 20193
20192: POP
// result := ( chassis in result ) ;
20193: LD_ADDR_VAR 0 3
20197: PUSH
20198: LD_VAR 0 1
20202: PUSH
20203: LD_VAR 0 3
20207: IN
20208: ST_TO_ADDR
// end ;
20209: LD_VAR 0 3
20213: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20214: LD_INT 0
20216: PPUSH
20217: PPUSH
20218: PPUSH
20219: PPUSH
20220: PPUSH
20221: PPUSH
20222: PPUSH
// result := array ;
20223: LD_ADDR_VAR 0 5
20227: PUSH
20228: LD_VAR 0 1
20232: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20233: LD_VAR 0 1
20237: NOT
20238: IFTRUE 20247
20240: PUSH
20241: LD_VAR 0 2
20245: NOT
20246: OR
20247: IFTRUE 20256
20249: PUSH
20250: LD_VAR 0 3
20254: NOT
20255: OR
20256: IFTRUE 20270
20258: PUSH
20259: LD_VAR 0 2
20263: PUSH
20264: LD_VAR 0 1
20268: GREATER
20269: OR
20270: IFTRUE 20284
20272: PUSH
20273: LD_VAR 0 3
20277: PUSH
20278: LD_VAR 0 1
20282: GREATER
20283: OR
20284: IFFALSE 20288
// exit ;
20286: GO 20584
// if direction then
20288: LD_VAR 0 4
20292: IFFALSE 20356
// begin d := 1 ;
20294: LD_ADDR_VAR 0 9
20298: PUSH
20299: LD_INT 1
20301: ST_TO_ADDR
// if i_from > i_to then
20302: LD_VAR 0 2
20306: PUSH
20307: LD_VAR 0 3
20311: GREATER
20312: IFFALSE 20338
// length := ( array - i_from ) + i_to else
20314: LD_ADDR_VAR 0 11
20318: PUSH
20319: LD_VAR 0 1
20323: PUSH
20324: LD_VAR 0 2
20328: MINUS
20329: PUSH
20330: LD_VAR 0 3
20334: PLUS
20335: ST_TO_ADDR
20336: GO 20354
// length := i_to - i_from ;
20338: LD_ADDR_VAR 0 11
20342: PUSH
20343: LD_VAR 0 3
20347: PUSH
20348: LD_VAR 0 2
20352: MINUS
20353: ST_TO_ADDR
// end else
20354: GO 20417
// begin d := - 1 ;
20356: LD_ADDR_VAR 0 9
20360: PUSH
20361: LD_INT 1
20363: NEG
20364: ST_TO_ADDR
// if i_from > i_to then
20365: LD_VAR 0 2
20369: PUSH
20370: LD_VAR 0 3
20374: GREATER
20375: IFFALSE 20395
// length := i_from - i_to else
20377: LD_ADDR_VAR 0 11
20381: PUSH
20382: LD_VAR 0 2
20386: PUSH
20387: LD_VAR 0 3
20391: MINUS
20392: ST_TO_ADDR
20393: GO 20417
// length := ( array - i_to ) + i_from ;
20395: LD_ADDR_VAR 0 11
20399: PUSH
20400: LD_VAR 0 1
20404: PUSH
20405: LD_VAR 0 3
20409: MINUS
20410: PUSH
20411: LD_VAR 0 2
20415: PLUS
20416: ST_TO_ADDR
// end ; if not length then
20417: LD_VAR 0 11
20421: NOT
20422: IFFALSE 20426
// exit ;
20424: GO 20584
// tmp := array ;
20426: LD_ADDR_VAR 0 10
20430: PUSH
20431: LD_VAR 0 1
20435: ST_TO_ADDR
// for i = 1 to length do
20436: LD_ADDR_VAR 0 6
20440: PUSH
20441: DOUBLE
20442: LD_INT 1
20444: DEC
20445: ST_TO_ADDR
20446: LD_VAR 0 11
20450: PUSH
20451: FOR_TO
20452: IFFALSE 20572
// begin for j = 1 to array do
20454: LD_ADDR_VAR 0 7
20458: PUSH
20459: DOUBLE
20460: LD_INT 1
20462: DEC
20463: ST_TO_ADDR
20464: LD_VAR 0 1
20468: PUSH
20469: FOR_TO
20470: IFFALSE 20558
// begin k := j + d ;
20472: LD_ADDR_VAR 0 8
20476: PUSH
20477: LD_VAR 0 7
20481: PUSH
20482: LD_VAR 0 9
20486: PLUS
20487: ST_TO_ADDR
// if k > array then
20488: LD_VAR 0 8
20492: PUSH
20493: LD_VAR 0 1
20497: GREATER
20498: IFFALSE 20508
// k := 1 ;
20500: LD_ADDR_VAR 0 8
20504: PUSH
20505: LD_INT 1
20507: ST_TO_ADDR
// if not k then
20508: LD_VAR 0 8
20512: NOT
20513: IFFALSE 20525
// k := array ;
20515: LD_ADDR_VAR 0 8
20519: PUSH
20520: LD_VAR 0 1
20524: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20525: LD_ADDR_VAR 0 10
20529: PUSH
20530: LD_VAR 0 10
20534: PPUSH
20535: LD_VAR 0 8
20539: PPUSH
20540: LD_VAR 0 1
20544: PUSH
20545: LD_VAR 0 7
20549: ARRAY
20550: PPUSH
20551: CALL_OW 1
20555: ST_TO_ADDR
// end ;
20556: GO 20469
20558: POP
20559: POP
// array := tmp ;
20560: LD_ADDR_VAR 0 1
20564: PUSH
20565: LD_VAR 0 10
20569: ST_TO_ADDR
// end ;
20570: GO 20451
20572: POP
20573: POP
// result := array ;
20574: LD_ADDR_VAR 0 5
20578: PUSH
20579: LD_VAR 0 1
20583: ST_TO_ADDR
// end ;
20584: LD_VAR 0 5
20588: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20589: LD_INT 0
20591: PPUSH
20592: PPUSH
// result := 0 ;
20593: LD_ADDR_VAR 0 3
20597: PUSH
20598: LD_INT 0
20600: ST_TO_ADDR
// if not array or not value in array then
20601: LD_VAR 0 1
20605: NOT
20606: IFTRUE 20621
20608: PUSH
20609: LD_VAR 0 2
20613: PUSH
20614: LD_VAR 0 1
20618: IN
20619: NOT
20620: OR
20621: IFFALSE 20625
// exit ;
20623: GO 20679
// for i = 1 to array do
20625: LD_ADDR_VAR 0 4
20629: PUSH
20630: DOUBLE
20631: LD_INT 1
20633: DEC
20634: ST_TO_ADDR
20635: LD_VAR 0 1
20639: PUSH
20640: FOR_TO
20641: IFFALSE 20677
// if value = array [ i ] then
20643: LD_VAR 0 2
20647: PUSH
20648: LD_VAR 0 1
20652: PUSH
20653: LD_VAR 0 4
20657: ARRAY
20658: EQUAL
20659: IFFALSE 20675
// begin result := i ;
20661: LD_ADDR_VAR 0 3
20665: PUSH
20666: LD_VAR 0 4
20670: ST_TO_ADDR
// exit ;
20671: POP
20672: POP
20673: GO 20679
// end ;
20675: GO 20640
20677: POP
20678: POP
// end ;
20679: LD_VAR 0 3
20683: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20684: LD_INT 0
20686: PPUSH
// vc_chassis := chassis ;
20687: LD_ADDR_OWVAR 37
20691: PUSH
20692: LD_VAR 0 1
20696: ST_TO_ADDR
// vc_engine := engine ;
20697: LD_ADDR_OWVAR 39
20701: PUSH
20702: LD_VAR 0 2
20706: ST_TO_ADDR
// vc_control := control ;
20707: LD_ADDR_OWVAR 38
20711: PUSH
20712: LD_VAR 0 3
20716: ST_TO_ADDR
// vc_weapon := weapon ;
20717: LD_ADDR_OWVAR 40
20721: PUSH
20722: LD_VAR 0 4
20726: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20727: LD_ADDR_OWVAR 41
20731: PUSH
20732: LD_VAR 0 5
20736: ST_TO_ADDR
// end ;
20737: LD_VAR 0 6
20741: RET
// export function WantPlant ( unit ) ; var task ; begin
20742: LD_INT 0
20744: PPUSH
20745: PPUSH
// result := false ;
20746: LD_ADDR_VAR 0 2
20750: PUSH
20751: LD_INT 0
20753: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20754: LD_ADDR_VAR 0 3
20758: PUSH
20759: LD_VAR 0 1
20763: PPUSH
20764: CALL_OW 437
20768: ST_TO_ADDR
// if task then
20769: LD_VAR 0 3
20773: IFFALSE 20801
// if task [ 1 ] [ 1 ] = p then
20775: LD_VAR 0 3
20779: PUSH
20780: LD_INT 1
20782: ARRAY
20783: PUSH
20784: LD_INT 1
20786: ARRAY
20787: PUSH
20788: LD_STRING p
20790: EQUAL
20791: IFFALSE 20801
// result := true ;
20793: LD_ADDR_VAR 0 2
20797: PUSH
20798: LD_INT 1
20800: ST_TO_ADDR
// end ;
20801: LD_VAR 0 2
20805: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20806: LD_INT 0
20808: PPUSH
20809: PPUSH
20810: PPUSH
20811: PPUSH
// if pos < 1 then
20812: LD_VAR 0 2
20816: PUSH
20817: LD_INT 1
20819: LESS
20820: IFFALSE 20824
// exit ;
20822: GO 21127
// if pos = 1 then
20824: LD_VAR 0 2
20828: PUSH
20829: LD_INT 1
20831: EQUAL
20832: IFFALSE 20865
// result := Replace ( arr , pos [ 1 ] , value ) else
20834: LD_ADDR_VAR 0 4
20838: PUSH
20839: LD_VAR 0 1
20843: PPUSH
20844: LD_VAR 0 2
20848: PUSH
20849: LD_INT 1
20851: ARRAY
20852: PPUSH
20853: LD_VAR 0 3
20857: PPUSH
20858: CALL_OW 1
20862: ST_TO_ADDR
20863: GO 21127
// begin tmp := arr ;
20865: LD_ADDR_VAR 0 6
20869: PUSH
20870: LD_VAR 0 1
20874: ST_TO_ADDR
// s_arr := [ tmp ] ;
20875: LD_ADDR_VAR 0 7
20879: PUSH
20880: LD_VAR 0 6
20884: PUSH
20885: EMPTY
20886: LIST
20887: ST_TO_ADDR
// for i = 1 to pos - 1 do
20888: LD_ADDR_VAR 0 5
20892: PUSH
20893: DOUBLE
20894: LD_INT 1
20896: DEC
20897: ST_TO_ADDR
20898: LD_VAR 0 2
20902: PUSH
20903: LD_INT 1
20905: MINUS
20906: PUSH
20907: FOR_TO
20908: IFFALSE 20953
// begin tmp := tmp [ pos [ i ] ] ;
20910: LD_ADDR_VAR 0 6
20914: PUSH
20915: LD_VAR 0 6
20919: PUSH
20920: LD_VAR 0 2
20924: PUSH
20925: LD_VAR 0 5
20929: ARRAY
20930: ARRAY
20931: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20932: LD_ADDR_VAR 0 7
20936: PUSH
20937: LD_VAR 0 7
20941: PUSH
20942: LD_VAR 0 6
20946: PUSH
20947: EMPTY
20948: LIST
20949: ADD
20950: ST_TO_ADDR
// end ;
20951: GO 20907
20953: POP
20954: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20955: LD_ADDR_VAR 0 6
20959: PUSH
20960: LD_VAR 0 6
20964: PPUSH
20965: LD_VAR 0 2
20969: PUSH
20970: LD_VAR 0 2
20974: ARRAY
20975: PPUSH
20976: LD_VAR 0 3
20980: PPUSH
20981: CALL_OW 1
20985: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20986: LD_ADDR_VAR 0 7
20990: PUSH
20991: LD_VAR 0 7
20995: PPUSH
20996: LD_VAR 0 7
21000: PPUSH
21001: LD_VAR 0 6
21005: PPUSH
21006: CALL_OW 1
21010: ST_TO_ADDR
// for i = s_arr downto 2 do
21011: LD_ADDR_VAR 0 5
21015: PUSH
21016: DOUBLE
21017: LD_VAR 0 7
21021: INC
21022: ST_TO_ADDR
21023: LD_INT 2
21025: PUSH
21026: FOR_DOWNTO
21027: IFFALSE 21111
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21029: LD_ADDR_VAR 0 6
21033: PUSH
21034: LD_VAR 0 7
21038: PUSH
21039: LD_VAR 0 5
21043: PUSH
21044: LD_INT 1
21046: MINUS
21047: ARRAY
21048: PPUSH
21049: LD_VAR 0 2
21053: PUSH
21054: LD_VAR 0 5
21058: PUSH
21059: LD_INT 1
21061: MINUS
21062: ARRAY
21063: PPUSH
21064: LD_VAR 0 7
21068: PUSH
21069: LD_VAR 0 5
21073: ARRAY
21074: PPUSH
21075: CALL_OW 1
21079: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21080: LD_ADDR_VAR 0 7
21084: PUSH
21085: LD_VAR 0 7
21089: PPUSH
21090: LD_VAR 0 5
21094: PUSH
21095: LD_INT 1
21097: MINUS
21098: PPUSH
21099: LD_VAR 0 6
21103: PPUSH
21104: CALL_OW 1
21108: ST_TO_ADDR
// end ;
21109: GO 21026
21111: POP
21112: POP
// result := s_arr [ 1 ] ;
21113: LD_ADDR_VAR 0 4
21117: PUSH
21118: LD_VAR 0 7
21122: PUSH
21123: LD_INT 1
21125: ARRAY
21126: ST_TO_ADDR
// end ; end ;
21127: LD_VAR 0 4
21131: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21132: LD_INT 0
21134: PPUSH
21135: PPUSH
// if not list then
21136: LD_VAR 0 1
21140: NOT
21141: IFFALSE 21145
// exit ;
21143: GO 21236
// i := list [ pos1 ] ;
21145: LD_ADDR_VAR 0 5
21149: PUSH
21150: LD_VAR 0 1
21154: PUSH
21155: LD_VAR 0 2
21159: ARRAY
21160: ST_TO_ADDR
// if not i then
21161: LD_VAR 0 5
21165: NOT
21166: IFFALSE 21170
// exit ;
21168: GO 21236
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21170: LD_ADDR_VAR 0 1
21174: PUSH
21175: LD_VAR 0 1
21179: PPUSH
21180: LD_VAR 0 2
21184: PPUSH
21185: LD_VAR 0 1
21189: PUSH
21190: LD_VAR 0 3
21194: ARRAY
21195: PPUSH
21196: CALL_OW 1
21200: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21201: LD_ADDR_VAR 0 1
21205: PUSH
21206: LD_VAR 0 1
21210: PPUSH
21211: LD_VAR 0 3
21215: PPUSH
21216: LD_VAR 0 5
21220: PPUSH
21221: CALL_OW 1
21225: ST_TO_ADDR
// result := list ;
21226: LD_ADDR_VAR 0 4
21230: PUSH
21231: LD_VAR 0 1
21235: ST_TO_ADDR
// end ;
21236: LD_VAR 0 4
21240: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21241: LD_INT 0
21243: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21244: LD_ADDR_VAR 0 5
21248: PUSH
21249: LD_VAR 0 1
21253: PPUSH
21254: CALL_OW 250
21258: PPUSH
21259: LD_VAR 0 1
21263: PPUSH
21264: CALL_OW 251
21268: PPUSH
21269: LD_VAR 0 2
21273: PPUSH
21274: LD_VAR 0 3
21278: PPUSH
21279: LD_VAR 0 4
21283: PPUSH
21284: CALL 21666 0 5
21288: ST_TO_ADDR
// end ;
21289: LD_VAR 0 5
21293: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21294: LD_INT 0
21296: PPUSH
21297: PPUSH
21298: PPUSH
21299: PPUSH
// if not list or not unit then
21300: LD_VAR 0 2
21304: NOT
21305: IFTRUE 21314
21307: PUSH
21308: LD_VAR 0 1
21312: NOT
21313: OR
21314: IFFALSE 21318
// exit ;
21316: GO 21661
// result := [ ] ;
21318: LD_ADDR_VAR 0 5
21322: PUSH
21323: EMPTY
21324: ST_TO_ADDR
// for i in list do
21325: LD_ADDR_VAR 0 6
21329: PUSH
21330: LD_VAR 0 2
21334: PUSH
21335: FOR_IN
21336: IFFALSE 21554
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21338: LD_ADDR_VAR 0 8
21342: PUSH
21343: LD_VAR 0 1
21347: PPUSH
21348: LD_VAR 0 6
21352: PUSH
21353: LD_INT 1
21355: ARRAY
21356: PPUSH
21357: LD_VAR 0 6
21361: PUSH
21362: LD_INT 2
21364: ARRAY
21365: PPUSH
21366: CALL_OW 297
21370: ST_TO_ADDR
// if not Count ( result ) then
21371: LD_VAR 0 5
21375: PPUSH
21376: CALL 17922 0 1
21380: NOT
21381: IFFALSE 21414
// begin result := Join ( result , [ i , tmp ] ) ;
21383: LD_ADDR_VAR 0 5
21387: PUSH
21388: LD_VAR 0 5
21392: PPUSH
21393: LD_VAR 0 6
21397: PUSH
21398: LD_VAR 0 8
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PPUSH
21407: CALL 53854 0 2
21411: ST_TO_ADDR
// continue ;
21412: GO 21335
// end ; if result [ result ] [ 2 ] <= tmp then
21414: LD_VAR 0 5
21418: PUSH
21419: LD_VAR 0 5
21423: ARRAY
21424: PUSH
21425: LD_INT 2
21427: ARRAY
21428: PUSH
21429: LD_VAR 0 8
21433: LESSEQUAL
21434: IFFALSE 21467
// result := Join ( result , [ i , tmp ] ) else
21436: LD_ADDR_VAR 0 5
21440: PUSH
21441: LD_VAR 0 5
21445: PPUSH
21446: LD_VAR 0 6
21450: PUSH
21451: LD_VAR 0 8
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PPUSH
21460: CALL 53854 0 2
21464: ST_TO_ADDR
21465: GO 21552
// begin for j := 1 to Count ( result ) do
21467: LD_ADDR_VAR 0 7
21471: PUSH
21472: DOUBLE
21473: LD_INT 1
21475: DEC
21476: ST_TO_ADDR
21477: LD_VAR 0 5
21481: PPUSH
21482: CALL 17922 0 1
21486: PUSH
21487: FOR_TO
21488: IFFALSE 21550
// begin if tmp < result [ j ] [ 2 ] then
21490: LD_VAR 0 8
21494: PUSH
21495: LD_VAR 0 5
21499: PUSH
21500: LD_VAR 0 7
21504: ARRAY
21505: PUSH
21506: LD_INT 2
21508: ARRAY
21509: LESS
21510: IFFALSE 21548
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21512: LD_ADDR_VAR 0 5
21516: PUSH
21517: LD_VAR 0 5
21521: PPUSH
21522: LD_VAR 0 7
21526: PPUSH
21527: LD_VAR 0 6
21531: PUSH
21532: LD_VAR 0 8
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PPUSH
21541: CALL_OW 2
21545: ST_TO_ADDR
// break ;
21546: GO 21550
// end ; end ;
21548: GO 21487
21550: POP
21551: POP
// end ; end ;
21552: GO 21335
21554: POP
21555: POP
// if result and not asc then
21556: LD_VAR 0 5
21560: IFFALSE 21569
21562: PUSH
21563: LD_VAR 0 3
21567: NOT
21568: AND
21569: IFFALSE 21586
// result := ReverseArray ( result ) ;
21571: LD_ADDR_VAR 0 5
21575: PUSH
21576: LD_VAR 0 5
21580: PPUSH
21581: CALL 48944 0 1
21585: ST_TO_ADDR
// tmp := [ ] ;
21586: LD_ADDR_VAR 0 8
21590: PUSH
21591: EMPTY
21592: ST_TO_ADDR
// if mode then
21593: LD_VAR 0 4
21597: IFFALSE 21661
// begin for i := 1 to result do
21599: LD_ADDR_VAR 0 6
21603: PUSH
21604: DOUBLE
21605: LD_INT 1
21607: DEC
21608: ST_TO_ADDR
21609: LD_VAR 0 5
21613: PUSH
21614: FOR_TO
21615: IFFALSE 21649
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21617: LD_ADDR_VAR 0 8
21621: PUSH
21622: LD_VAR 0 8
21626: PPUSH
21627: LD_VAR 0 5
21631: PUSH
21632: LD_VAR 0 6
21636: ARRAY
21637: PUSH
21638: LD_INT 1
21640: ARRAY
21641: PPUSH
21642: CALL 53854 0 2
21646: ST_TO_ADDR
21647: GO 21614
21649: POP
21650: POP
// result := tmp ;
21651: LD_ADDR_VAR 0 5
21655: PUSH
21656: LD_VAR 0 8
21660: ST_TO_ADDR
// end ; end ;
21661: LD_VAR 0 5
21665: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21666: LD_INT 0
21668: PPUSH
21669: PPUSH
21670: PPUSH
21671: PPUSH
// if not list then
21672: LD_VAR 0 3
21676: NOT
21677: IFFALSE 21681
// exit ;
21679: GO 22071
// result := [ ] ;
21681: LD_ADDR_VAR 0 6
21685: PUSH
21686: EMPTY
21687: ST_TO_ADDR
// for i in list do
21688: LD_ADDR_VAR 0 7
21692: PUSH
21693: LD_VAR 0 3
21697: PUSH
21698: FOR_IN
21699: IFFALSE 21901
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21701: LD_ADDR_VAR 0 9
21705: PUSH
21706: LD_VAR 0 7
21710: PPUSH
21711: LD_VAR 0 1
21715: PPUSH
21716: LD_VAR 0 2
21720: PPUSH
21721: CALL_OW 297
21725: ST_TO_ADDR
// if not result then
21726: LD_VAR 0 6
21730: NOT
21731: IFFALSE 21757
// result := [ [ i , tmp ] ] else
21733: LD_ADDR_VAR 0 6
21737: PUSH
21738: LD_VAR 0 7
21742: PUSH
21743: LD_VAR 0 9
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: EMPTY
21753: LIST
21754: ST_TO_ADDR
21755: GO 21899
// begin if result [ result ] [ 2 ] <= tmp then
21757: LD_VAR 0 6
21761: PUSH
21762: LD_VAR 0 6
21766: ARRAY
21767: PUSH
21768: LD_INT 2
21770: ARRAY
21771: PUSH
21772: LD_VAR 0 9
21776: LESSEQUAL
21777: IFFALSE 21819
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21779: LD_ADDR_VAR 0 6
21783: PUSH
21784: LD_VAR 0 6
21788: PPUSH
21789: LD_VAR 0 6
21793: PUSH
21794: LD_INT 1
21796: PLUS
21797: PPUSH
21798: LD_VAR 0 7
21802: PUSH
21803: LD_VAR 0 9
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PPUSH
21812: CALL_OW 2
21816: ST_TO_ADDR
21817: GO 21899
// for j := 1 to result do
21819: LD_ADDR_VAR 0 8
21823: PUSH
21824: DOUBLE
21825: LD_INT 1
21827: DEC
21828: ST_TO_ADDR
21829: LD_VAR 0 6
21833: PUSH
21834: FOR_TO
21835: IFFALSE 21897
// begin if tmp < result [ j ] [ 2 ] then
21837: LD_VAR 0 9
21841: PUSH
21842: LD_VAR 0 6
21846: PUSH
21847: LD_VAR 0 8
21851: ARRAY
21852: PUSH
21853: LD_INT 2
21855: ARRAY
21856: LESS
21857: IFFALSE 21895
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21859: LD_ADDR_VAR 0 6
21863: PUSH
21864: LD_VAR 0 6
21868: PPUSH
21869: LD_VAR 0 8
21873: PPUSH
21874: LD_VAR 0 7
21878: PUSH
21879: LD_VAR 0 9
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PPUSH
21888: CALL_OW 2
21892: ST_TO_ADDR
// break ;
21893: GO 21897
// end ; end ;
21895: GO 21834
21897: POP
21898: POP
// end ; end ;
21899: GO 21698
21901: POP
21902: POP
// if result and not asc then
21903: LD_VAR 0 6
21907: IFFALSE 21916
21909: PUSH
21910: LD_VAR 0 4
21914: NOT
21915: AND
21916: IFFALSE 21991
// begin tmp := result ;
21918: LD_ADDR_VAR 0 9
21922: PUSH
21923: LD_VAR 0 6
21927: ST_TO_ADDR
// for i = tmp downto 1 do
21928: LD_ADDR_VAR 0 7
21932: PUSH
21933: DOUBLE
21934: LD_VAR 0 9
21938: INC
21939: ST_TO_ADDR
21940: LD_INT 1
21942: PUSH
21943: FOR_DOWNTO
21944: IFFALSE 21989
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21946: LD_ADDR_VAR 0 6
21950: PUSH
21951: LD_VAR 0 6
21955: PPUSH
21956: LD_VAR 0 9
21960: PUSH
21961: LD_VAR 0 7
21965: MINUS
21966: PUSH
21967: LD_INT 1
21969: PLUS
21970: PPUSH
21971: LD_VAR 0 9
21975: PUSH
21976: LD_VAR 0 7
21980: ARRAY
21981: PPUSH
21982: CALL_OW 1
21986: ST_TO_ADDR
21987: GO 21943
21989: POP
21990: POP
// end ; tmp := [ ] ;
21991: LD_ADDR_VAR 0 9
21995: PUSH
21996: EMPTY
21997: ST_TO_ADDR
// if mode then
21998: LD_VAR 0 5
22002: IFFALSE 22071
// begin for i = 1 to result do
22004: LD_ADDR_VAR 0 7
22008: PUSH
22009: DOUBLE
22010: LD_INT 1
22012: DEC
22013: ST_TO_ADDR
22014: LD_VAR 0 6
22018: PUSH
22019: FOR_TO
22020: IFFALSE 22059
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22022: LD_ADDR_VAR 0 9
22026: PUSH
22027: LD_VAR 0 9
22031: PPUSH
22032: LD_VAR 0 7
22036: PPUSH
22037: LD_VAR 0 6
22041: PUSH
22042: LD_VAR 0 7
22046: ARRAY
22047: PUSH
22048: LD_INT 1
22050: ARRAY
22051: PPUSH
22052: CALL_OW 1
22056: ST_TO_ADDR
22057: GO 22019
22059: POP
22060: POP
// result := tmp ;
22061: LD_ADDR_VAR 0 6
22065: PUSH
22066: LD_VAR 0 9
22070: ST_TO_ADDR
// end ; end ;
22071: LD_VAR 0 6
22075: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22076: LD_INT 0
22078: PPUSH
22079: PPUSH
22080: PPUSH
22081: PPUSH
22082: PPUSH
22083: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22084: LD_ADDR_VAR 0 5
22088: PUSH
22089: LD_INT 0
22091: PUSH
22092: LD_INT 0
22094: PUSH
22095: LD_INT 0
22097: PUSH
22098: EMPTY
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: ST_TO_ADDR
// if not x or not y then
22106: LD_VAR 0 2
22110: NOT
22111: IFTRUE 22120
22113: PUSH
22114: LD_VAR 0 3
22118: NOT
22119: OR
22120: IFFALSE 22124
// exit ;
22122: GO 23780
// if not range then
22124: LD_VAR 0 4
22128: NOT
22129: IFFALSE 22139
// range := 10 ;
22131: LD_ADDR_VAR 0 4
22135: PUSH
22136: LD_INT 10
22138: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22139: LD_ADDR_VAR 0 8
22143: PUSH
22144: LD_INT 81
22146: PUSH
22147: LD_VAR 0 1
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 92
22158: PUSH
22159: LD_VAR 0 2
22163: PUSH
22164: LD_VAR 0 3
22168: PUSH
22169: LD_VAR 0 4
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 3
22182: PUSH
22183: LD_INT 21
22185: PUSH
22186: LD_INT 3
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: LIST
22201: PPUSH
22202: CALL_OW 69
22206: ST_TO_ADDR
// if not tmp then
22207: LD_VAR 0 8
22211: NOT
22212: IFFALSE 22216
// exit ;
22214: GO 23780
// for i in tmp do
22216: LD_ADDR_VAR 0 6
22220: PUSH
22221: LD_VAR 0 8
22225: PUSH
22226: FOR_IN
22227: IFFALSE 23755
// begin points := [ 0 , 0 , 0 ] ;
22229: LD_ADDR_VAR 0 9
22233: PUSH
22234: LD_INT 0
22236: PUSH
22237: LD_INT 0
22239: PUSH
22240: LD_INT 0
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: LIST
22247: ST_TO_ADDR
// bpoints := 1 ;
22248: LD_ADDR_VAR 0 10
22252: PUSH
22253: LD_INT 1
22255: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22256: LD_VAR 0 6
22260: PPUSH
22261: CALL_OW 247
22265: PUSH
22266: LD_INT 1
22268: DOUBLE
22269: EQUAL
22270: IFTRUE 22274
22272: GO 22856
22274: POP
// begin if GetClass ( i ) = 1 then
22275: LD_VAR 0 6
22279: PPUSH
22280: CALL_OW 257
22284: PUSH
22285: LD_INT 1
22287: EQUAL
22288: IFFALSE 22309
// points := [ 10 , 5 , 3 ] ;
22290: LD_ADDR_VAR 0 9
22294: PUSH
22295: LD_INT 10
22297: PUSH
22298: LD_INT 5
22300: PUSH
22301: LD_INT 3
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: LIST
22308: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22309: LD_VAR 0 6
22313: PPUSH
22314: CALL_OW 257
22318: PUSH
22319: LD_INT 2
22321: PUSH
22322: LD_INT 3
22324: PUSH
22325: LD_INT 4
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: LIST
22332: IN
22333: IFFALSE 22354
// points := [ 3 , 2 , 1 ] ;
22335: LD_ADDR_VAR 0 9
22339: PUSH
22340: LD_INT 3
22342: PUSH
22343: LD_INT 2
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: LIST
22353: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22354: LD_VAR 0 6
22358: PPUSH
22359: CALL_OW 257
22363: PUSH
22364: LD_INT 5
22366: EQUAL
22367: IFFALSE 22388
// points := [ 130 , 5 , 2 ] ;
22369: LD_ADDR_VAR 0 9
22373: PUSH
22374: LD_INT 130
22376: PUSH
22377: LD_INT 5
22379: PUSH
22380: LD_INT 2
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: LIST
22387: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22388: LD_VAR 0 6
22392: PPUSH
22393: CALL_OW 257
22397: PUSH
22398: LD_INT 8
22400: EQUAL
22401: IFFALSE 22422
// points := [ 35 , 35 , 30 ] ;
22403: LD_ADDR_VAR 0 9
22407: PUSH
22408: LD_INT 35
22410: PUSH
22411: LD_INT 35
22413: PUSH
22414: LD_INT 30
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: LIST
22421: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22422: LD_VAR 0 6
22426: PPUSH
22427: CALL_OW 257
22431: PUSH
22432: LD_INT 9
22434: EQUAL
22435: IFFALSE 22456
// points := [ 20 , 55 , 40 ] ;
22437: LD_ADDR_VAR 0 9
22441: PUSH
22442: LD_INT 20
22444: PUSH
22445: LD_INT 55
22447: PUSH
22448: LD_INT 40
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: LIST
22455: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22456: LD_VAR 0 6
22460: PPUSH
22461: CALL_OW 257
22465: PUSH
22466: LD_INT 12
22468: PUSH
22469: LD_INT 16
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: IN
22476: IFFALSE 22497
// points := [ 5 , 3 , 2 ] ;
22478: LD_ADDR_VAR 0 9
22482: PUSH
22483: LD_INT 5
22485: PUSH
22486: LD_INT 3
22488: PUSH
22489: LD_INT 2
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: LIST
22496: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22497: LD_VAR 0 6
22501: PPUSH
22502: CALL_OW 257
22506: PUSH
22507: LD_INT 17
22509: EQUAL
22510: IFFALSE 22531
// points := [ 100 , 50 , 75 ] ;
22512: LD_ADDR_VAR 0 9
22516: PUSH
22517: LD_INT 100
22519: PUSH
22520: LD_INT 50
22522: PUSH
22523: LD_INT 75
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: LIST
22530: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22531: LD_VAR 0 6
22535: PPUSH
22536: CALL_OW 257
22540: PUSH
22541: LD_INT 15
22543: EQUAL
22544: IFFALSE 22565
// points := [ 10 , 5 , 3 ] ;
22546: LD_ADDR_VAR 0 9
22550: PUSH
22551: LD_INT 10
22553: PUSH
22554: LD_INT 5
22556: PUSH
22557: LD_INT 3
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: LIST
22564: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22565: LD_VAR 0 6
22569: PPUSH
22570: CALL_OW 257
22574: PUSH
22575: LD_INT 14
22577: EQUAL
22578: IFFALSE 22599
// points := [ 10 , 0 , 0 ] ;
22580: LD_ADDR_VAR 0 9
22584: PUSH
22585: LD_INT 10
22587: PUSH
22588: LD_INT 0
22590: PUSH
22591: LD_INT 0
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: LIST
22598: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22599: LD_VAR 0 6
22603: PPUSH
22604: CALL_OW 257
22608: PUSH
22609: LD_INT 11
22611: EQUAL
22612: IFFALSE 22633
// points := [ 30 , 10 , 5 ] ;
22614: LD_ADDR_VAR 0 9
22618: PUSH
22619: LD_INT 30
22621: PUSH
22622: LD_INT 10
22624: PUSH
22625: LD_INT 5
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: LIST
22632: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22633: LD_VAR 0 1
22637: PPUSH
22638: LD_INT 5
22640: PPUSH
22641: CALL_OW 321
22645: PUSH
22646: LD_INT 2
22648: EQUAL
22649: IFFALSE 22666
// bpoints := bpoints * 1.8 ;
22651: LD_ADDR_VAR 0 10
22655: PUSH
22656: LD_VAR 0 10
22660: PUSH
22661: LD_REAL  1.80000000000000E+0000
22664: MUL
22665: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22666: LD_VAR 0 6
22670: PPUSH
22671: CALL_OW 257
22675: PUSH
22676: LD_INT 1
22678: PUSH
22679: LD_INT 2
22681: PUSH
22682: LD_INT 3
22684: PUSH
22685: LD_INT 4
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: IN
22694: IFFALSE 22714
22696: PUSH
22697: LD_VAR 0 1
22701: PPUSH
22702: LD_INT 51
22704: PPUSH
22705: CALL_OW 321
22709: PUSH
22710: LD_INT 2
22712: EQUAL
22713: AND
22714: IFFALSE 22731
// bpoints := bpoints * 1.2 ;
22716: LD_ADDR_VAR 0 10
22720: PUSH
22721: LD_VAR 0 10
22725: PUSH
22726: LD_REAL  1.20000000000000E+0000
22729: MUL
22730: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22731: LD_VAR 0 6
22735: PPUSH
22736: CALL_OW 257
22740: PUSH
22741: LD_INT 5
22743: PUSH
22744: LD_INT 7
22746: PUSH
22747: LD_INT 9
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: LIST
22754: IN
22755: IFFALSE 22775
22757: PUSH
22758: LD_VAR 0 1
22762: PPUSH
22763: LD_INT 52
22765: PPUSH
22766: CALL_OW 321
22770: PUSH
22771: LD_INT 2
22773: EQUAL
22774: AND
22775: IFFALSE 22792
// bpoints := bpoints * 1.5 ;
22777: LD_ADDR_VAR 0 10
22781: PUSH
22782: LD_VAR 0 10
22786: PUSH
22787: LD_REAL  1.50000000000000E+0000
22790: MUL
22791: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22792: LD_VAR 0 1
22796: PPUSH
22797: LD_INT 66
22799: PPUSH
22800: CALL_OW 321
22804: PUSH
22805: LD_INT 2
22807: EQUAL
22808: IFFALSE 22825
// bpoints := bpoints * 1.1 ;
22810: LD_ADDR_VAR 0 10
22814: PUSH
22815: LD_VAR 0 10
22819: PUSH
22820: LD_REAL  1.10000000000000E+0000
22823: MUL
22824: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22825: LD_ADDR_VAR 0 10
22829: PUSH
22830: LD_VAR 0 10
22834: PUSH
22835: LD_VAR 0 6
22839: PPUSH
22840: LD_INT 1
22842: PPUSH
22843: CALL_OW 259
22847: PUSH
22848: LD_REAL  1.15000000000000E+0000
22851: MUL
22852: MUL
22853: ST_TO_ADDR
// end ; unit_vehicle :
22854: GO 23684
22856: LD_INT 2
22858: DOUBLE
22859: EQUAL
22860: IFTRUE 22864
22862: GO 23672
22864: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22865: LD_VAR 0 6
22869: PPUSH
22870: CALL_OW 264
22874: PUSH
22875: LD_INT 2
22877: PUSH
22878: LD_INT 42
22880: PUSH
22881: LD_INT 24
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: LIST
22888: IN
22889: IFFALSE 22910
// points := [ 25 , 5 , 3 ] ;
22891: LD_ADDR_VAR 0 9
22895: PUSH
22896: LD_INT 25
22898: PUSH
22899: LD_INT 5
22901: PUSH
22902: LD_INT 3
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: LIST
22909: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22910: LD_VAR 0 6
22914: PPUSH
22915: CALL_OW 264
22919: PUSH
22920: LD_INT 4
22922: PUSH
22923: LD_INT 43
22925: PUSH
22926: LD_INT 25
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: LIST
22933: IN
22934: IFFALSE 22955
// points := [ 40 , 15 , 5 ] ;
22936: LD_ADDR_VAR 0 9
22940: PUSH
22941: LD_INT 40
22943: PUSH
22944: LD_INT 15
22946: PUSH
22947: LD_INT 5
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: LIST
22954: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22955: LD_VAR 0 6
22959: PPUSH
22960: CALL_OW 264
22964: PUSH
22965: LD_INT 3
22967: PUSH
22968: LD_INT 23
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: IN
22975: IFFALSE 22996
// points := [ 7 , 25 , 8 ] ;
22977: LD_ADDR_VAR 0 9
22981: PUSH
22982: LD_INT 7
22984: PUSH
22985: LD_INT 25
22987: PUSH
22988: LD_INT 8
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: LIST
22995: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22996: LD_VAR 0 6
23000: PPUSH
23001: CALL_OW 264
23005: PUSH
23006: LD_INT 5
23008: PUSH
23009: LD_INT 27
23011: PUSH
23012: LD_INT 44
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: LIST
23019: IN
23020: IFFALSE 23041
// points := [ 14 , 50 , 16 ] ;
23022: LD_ADDR_VAR 0 9
23026: PUSH
23027: LD_INT 14
23029: PUSH
23030: LD_INT 50
23032: PUSH
23033: LD_INT 16
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: LIST
23040: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23041: LD_VAR 0 6
23045: PPUSH
23046: CALL_OW 264
23050: PUSH
23051: LD_INT 6
23053: PUSH
23054: LD_INT 46
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: IN
23061: IFFALSE 23082
// points := [ 32 , 120 , 70 ] ;
23063: LD_ADDR_VAR 0 9
23067: PUSH
23068: LD_INT 32
23070: PUSH
23071: LD_INT 120
23073: PUSH
23074: LD_INT 70
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: LIST
23081: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23082: LD_VAR 0 6
23086: PPUSH
23087: CALL_OW 264
23091: PUSH
23092: LD_INT 7
23094: PUSH
23095: LD_INT 28
23097: PUSH
23098: LD_INT 45
23100: PUSH
23101: LD_INT 92
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: IN
23110: IFFALSE 23131
// points := [ 35 , 20 , 45 ] ;
23112: LD_ADDR_VAR 0 9
23116: PUSH
23117: LD_INT 35
23119: PUSH
23120: LD_INT 20
23122: PUSH
23123: LD_INT 45
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: LIST
23130: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23131: LD_VAR 0 6
23135: PPUSH
23136: CALL_OW 264
23140: PUSH
23141: LD_INT 47
23143: PUSH
23144: EMPTY
23145: LIST
23146: IN
23147: IFFALSE 23168
// points := [ 67 , 45 , 75 ] ;
23149: LD_ADDR_VAR 0 9
23153: PUSH
23154: LD_INT 67
23156: PUSH
23157: LD_INT 45
23159: PUSH
23160: LD_INT 75
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: LIST
23167: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23168: LD_VAR 0 6
23172: PPUSH
23173: CALL_OW 264
23177: PUSH
23178: LD_INT 26
23180: PUSH
23181: EMPTY
23182: LIST
23183: IN
23184: IFFALSE 23205
// points := [ 120 , 30 , 80 ] ;
23186: LD_ADDR_VAR 0 9
23190: PUSH
23191: LD_INT 120
23193: PUSH
23194: LD_INT 30
23196: PUSH
23197: LD_INT 80
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: LIST
23204: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23205: LD_VAR 0 6
23209: PPUSH
23210: CALL_OW 264
23214: PUSH
23215: LD_INT 22
23217: PUSH
23218: EMPTY
23219: LIST
23220: IN
23221: IFFALSE 23242
// points := [ 40 , 1 , 1 ] ;
23223: LD_ADDR_VAR 0 9
23227: PUSH
23228: LD_INT 40
23230: PUSH
23231: LD_INT 1
23233: PUSH
23234: LD_INT 1
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: LIST
23241: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23242: LD_VAR 0 6
23246: PPUSH
23247: CALL_OW 264
23251: PUSH
23252: LD_INT 29
23254: PUSH
23255: EMPTY
23256: LIST
23257: IN
23258: IFFALSE 23279
// points := [ 70 , 200 , 400 ] ;
23260: LD_ADDR_VAR 0 9
23264: PUSH
23265: LD_INT 70
23267: PUSH
23268: LD_INT 200
23270: PUSH
23271: LD_INT 400
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: LIST
23278: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23279: LD_VAR 0 6
23283: PPUSH
23284: CALL_OW 264
23288: PUSH
23289: LD_INT 14
23291: PUSH
23292: LD_INT 53
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: IN
23299: IFFALSE 23320
// points := [ 40 , 10 , 20 ] ;
23301: LD_ADDR_VAR 0 9
23305: PUSH
23306: LD_INT 40
23308: PUSH
23309: LD_INT 10
23311: PUSH
23312: LD_INT 20
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: LIST
23319: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23320: LD_VAR 0 6
23324: PPUSH
23325: CALL_OW 264
23329: PUSH
23330: LD_INT 9
23332: PUSH
23333: EMPTY
23334: LIST
23335: IN
23336: IFFALSE 23357
// points := [ 5 , 70 , 20 ] ;
23338: LD_ADDR_VAR 0 9
23342: PUSH
23343: LD_INT 5
23345: PUSH
23346: LD_INT 70
23348: PUSH
23349: LD_INT 20
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: LIST
23356: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23357: LD_VAR 0 6
23361: PPUSH
23362: CALL_OW 264
23366: PUSH
23367: LD_INT 10
23369: PUSH
23370: EMPTY
23371: LIST
23372: IN
23373: IFFALSE 23394
// points := [ 35 , 110 , 70 ] ;
23375: LD_ADDR_VAR 0 9
23379: PUSH
23380: LD_INT 35
23382: PUSH
23383: LD_INT 110
23385: PUSH
23386: LD_INT 70
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: LIST
23393: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23394: LD_VAR 0 6
23398: PPUSH
23399: CALL_OW 265
23403: PUSH
23404: LD_INT 25
23406: EQUAL
23407: IFFALSE 23428
// points := [ 80 , 65 , 100 ] ;
23409: LD_ADDR_VAR 0 9
23413: PUSH
23414: LD_INT 80
23416: PUSH
23417: LD_INT 65
23419: PUSH
23420: LD_INT 100
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: LIST
23427: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23428: LD_VAR 0 6
23432: PPUSH
23433: CALL_OW 263
23437: PUSH
23438: LD_INT 1
23440: EQUAL
23441: IFFALSE 23476
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23443: LD_ADDR_VAR 0 10
23447: PUSH
23448: LD_VAR 0 10
23452: PUSH
23453: LD_VAR 0 6
23457: PPUSH
23458: CALL_OW 311
23462: PPUSH
23463: LD_INT 3
23465: PPUSH
23466: CALL_OW 259
23470: PUSH
23471: LD_INT 4
23473: MUL
23474: MUL
23475: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23476: LD_VAR 0 6
23480: PPUSH
23481: CALL_OW 263
23485: PUSH
23486: LD_INT 2
23488: EQUAL
23489: IFFALSE 23540
// begin j := IsControledBy ( i ) ;
23491: LD_ADDR_VAR 0 7
23495: PUSH
23496: LD_VAR 0 6
23500: PPUSH
23501: CALL_OW 312
23505: ST_TO_ADDR
// if j then
23506: LD_VAR 0 7
23510: IFFALSE 23540
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23512: LD_ADDR_VAR 0 10
23516: PUSH
23517: LD_VAR 0 10
23521: PUSH
23522: LD_VAR 0 7
23526: PPUSH
23527: LD_INT 3
23529: PPUSH
23530: CALL_OW 259
23534: PUSH
23535: LD_INT 3
23537: MUL
23538: MUL
23539: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23540: LD_VAR 0 6
23544: PPUSH
23545: CALL_OW 264
23549: PUSH
23550: LD_INT 5
23552: PUSH
23553: LD_INT 6
23555: PUSH
23556: LD_INT 46
23558: PUSH
23559: LD_INT 44
23561: PUSH
23562: LD_INT 47
23564: PUSH
23565: LD_INT 45
23567: PUSH
23568: LD_INT 28
23570: PUSH
23571: LD_INT 7
23573: PUSH
23574: LD_INT 27
23576: PUSH
23577: LD_INT 29
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: IN
23592: IFFALSE 23612
23594: PUSH
23595: LD_VAR 0 1
23599: PPUSH
23600: LD_INT 52
23602: PPUSH
23603: CALL_OW 321
23607: PUSH
23608: LD_INT 2
23610: EQUAL
23611: AND
23612: IFFALSE 23629
// bpoints := bpoints * 1.2 ;
23614: LD_ADDR_VAR 0 10
23618: PUSH
23619: LD_VAR 0 10
23623: PUSH
23624: LD_REAL  1.20000000000000E+0000
23627: MUL
23628: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23629: LD_VAR 0 6
23633: PPUSH
23634: CALL_OW 264
23638: PUSH
23639: LD_INT 6
23641: PUSH
23642: LD_INT 46
23644: PUSH
23645: LD_INT 47
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: LIST
23652: IN
23653: IFFALSE 23670
// bpoints := bpoints * 1.2 ;
23655: LD_ADDR_VAR 0 10
23659: PUSH
23660: LD_VAR 0 10
23664: PUSH
23665: LD_REAL  1.20000000000000E+0000
23668: MUL
23669: ST_TO_ADDR
// end ; unit_building :
23670: GO 23684
23672: LD_INT 3
23674: DOUBLE
23675: EQUAL
23676: IFTRUE 23680
23678: GO 23683
23680: POP
// ; end ;
23681: GO 23684
23683: POP
// for j = 1 to 3 do
23684: LD_ADDR_VAR 0 7
23688: PUSH
23689: DOUBLE
23690: LD_INT 1
23692: DEC
23693: ST_TO_ADDR
23694: LD_INT 3
23696: PUSH
23697: FOR_TO
23698: IFFALSE 23751
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23700: LD_ADDR_VAR 0 5
23704: PUSH
23705: LD_VAR 0 5
23709: PPUSH
23710: LD_VAR 0 7
23714: PPUSH
23715: LD_VAR 0 5
23719: PUSH
23720: LD_VAR 0 7
23724: ARRAY
23725: PUSH
23726: LD_VAR 0 9
23730: PUSH
23731: LD_VAR 0 7
23735: ARRAY
23736: PUSH
23737: LD_VAR 0 10
23741: MUL
23742: PLUS
23743: PPUSH
23744: CALL_OW 1
23748: ST_TO_ADDR
23749: GO 23697
23751: POP
23752: POP
// end ;
23753: GO 22226
23755: POP
23756: POP
// result := Replace ( result , 4 , tmp ) ;
23757: LD_ADDR_VAR 0 5
23761: PUSH
23762: LD_VAR 0 5
23766: PPUSH
23767: LD_INT 4
23769: PPUSH
23770: LD_VAR 0 8
23774: PPUSH
23775: CALL_OW 1
23779: ST_TO_ADDR
// end ;
23780: LD_VAR 0 5
23784: RET
// export function DangerAtRange ( unit , range ) ; begin
23785: LD_INT 0
23787: PPUSH
// if not unit then
23788: LD_VAR 0 1
23792: NOT
23793: IFFALSE 23797
// exit ;
23795: GO 23842
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23797: LD_ADDR_VAR 0 3
23801: PUSH
23802: LD_VAR 0 1
23806: PPUSH
23807: CALL_OW 255
23811: PPUSH
23812: LD_VAR 0 1
23816: PPUSH
23817: CALL_OW 250
23821: PPUSH
23822: LD_VAR 0 1
23826: PPUSH
23827: CALL_OW 251
23831: PPUSH
23832: LD_VAR 0 2
23836: PPUSH
23837: CALL 22076 0 4
23841: ST_TO_ADDR
// end ;
23842: LD_VAR 0 3
23846: RET
// export function DangerInArea ( side , area ) ; begin
23847: LD_INT 0
23849: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23850: LD_ADDR_VAR 0 3
23854: PUSH
23855: LD_VAR 0 2
23859: PPUSH
23860: LD_INT 81
23862: PUSH
23863: LD_VAR 0 1
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PPUSH
23872: CALL_OW 70
23876: ST_TO_ADDR
// end ;
23877: LD_VAR 0 3
23881: RET
// export function IsExtension ( b ) ; begin
23882: LD_INT 0
23884: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23885: LD_ADDR_VAR 0 2
23889: PUSH
23890: LD_VAR 0 1
23894: PUSH
23895: LD_INT 23
23897: PUSH
23898: LD_INT 20
23900: PUSH
23901: LD_INT 22
23903: PUSH
23904: LD_INT 17
23906: PUSH
23907: LD_INT 24
23909: PUSH
23910: LD_INT 21
23912: PUSH
23913: LD_INT 19
23915: PUSH
23916: LD_INT 16
23918: PUSH
23919: LD_INT 25
23921: PUSH
23922: LD_INT 18
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: IN
23937: ST_TO_ADDR
// end ;
23938: LD_VAR 0 2
23942: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23943: LD_INT 0
23945: PPUSH
23946: PPUSH
23947: PPUSH
// result := [ ] ;
23948: LD_ADDR_VAR 0 4
23952: PUSH
23953: EMPTY
23954: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23955: LD_ADDR_VAR 0 5
23959: PUSH
23960: LD_VAR 0 2
23964: PPUSH
23965: LD_INT 21
23967: PUSH
23968: LD_INT 3
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PPUSH
23975: CALL_OW 70
23979: ST_TO_ADDR
// if not tmp then
23980: LD_VAR 0 5
23984: NOT
23985: IFFALSE 23989
// exit ;
23987: GO 24053
// if checkLink then
23989: LD_VAR 0 3
23993: IFFALSE 24043
// begin for i in tmp do
23995: LD_ADDR_VAR 0 6
23999: PUSH
24000: LD_VAR 0 5
24004: PUSH
24005: FOR_IN
24006: IFFALSE 24041
// if GetBase ( i ) <> base then
24008: LD_VAR 0 6
24012: PPUSH
24013: CALL_OW 274
24017: PUSH
24018: LD_VAR 0 1
24022: NONEQUAL
24023: IFFALSE 24039
// ComLinkToBase ( base , i ) ;
24025: LD_VAR 0 1
24029: PPUSH
24030: LD_VAR 0 6
24034: PPUSH
24035: CALL_OW 169
24039: GO 24005
24041: POP
24042: POP
// end ; result := tmp ;
24043: LD_ADDR_VAR 0 4
24047: PUSH
24048: LD_VAR 0 5
24052: ST_TO_ADDR
// end ;
24053: LD_VAR 0 4
24057: RET
// export function ComComplete ( units , b ) ; var i ; begin
24058: LD_INT 0
24060: PPUSH
24061: PPUSH
// if not units then
24062: LD_VAR 0 1
24066: NOT
24067: IFFALSE 24071
// exit ;
24069: GO 24161
// for i in units do
24071: LD_ADDR_VAR 0 4
24075: PUSH
24076: LD_VAR 0 1
24080: PUSH
24081: FOR_IN
24082: IFFALSE 24159
// if BuildingStatus ( b ) = bs_build then
24084: LD_VAR 0 2
24088: PPUSH
24089: CALL_OW 461
24093: PUSH
24094: LD_INT 1
24096: EQUAL
24097: IFFALSE 24157
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24099: LD_VAR 0 4
24103: PPUSH
24104: LD_STRING h
24106: PUSH
24107: LD_VAR 0 2
24111: PPUSH
24112: CALL_OW 250
24116: PUSH
24117: LD_VAR 0 2
24121: PPUSH
24122: CALL_OW 251
24126: PUSH
24127: LD_VAR 0 2
24131: PUSH
24132: LD_INT 0
24134: PUSH
24135: LD_INT 0
24137: PUSH
24138: LD_INT 0
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: PUSH
24150: EMPTY
24151: LIST
24152: PPUSH
24153: CALL_OW 446
24157: GO 24081
24159: POP
24160: POP
// end ;
24161: LD_VAR 0 3
24165: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24166: LD_INT 0
24168: PPUSH
24169: PPUSH
24170: PPUSH
24171: PPUSH
24172: PPUSH
24173: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24174: LD_VAR 0 1
24178: NOT
24179: IFTRUE 24196
24181: PUSH
24182: LD_VAR 0 1
24186: PPUSH
24187: CALL_OW 263
24191: PUSH
24192: LD_INT 2
24194: NONEQUAL
24195: OR
24196: IFFALSE 24200
// exit ;
24198: GO 24516
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24200: LD_ADDR_VAR 0 6
24204: PUSH
24205: LD_INT 22
24207: PUSH
24208: LD_VAR 0 1
24212: PPUSH
24213: CALL_OW 255
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 2
24224: PUSH
24225: LD_INT 30
24227: PUSH
24228: LD_INT 36
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 34
24237: PUSH
24238: LD_INT 31
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: LIST
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PPUSH
24254: CALL_OW 69
24258: ST_TO_ADDR
// if not tmp then
24259: LD_VAR 0 6
24263: NOT
24264: IFFALSE 24268
// exit ;
24266: GO 24516
// result := [ ] ;
24268: LD_ADDR_VAR 0 2
24272: PUSH
24273: EMPTY
24274: ST_TO_ADDR
// for i in tmp do
24275: LD_ADDR_VAR 0 3
24279: PUSH
24280: LD_VAR 0 6
24284: PUSH
24285: FOR_IN
24286: IFFALSE 24357
// begin t := UnitsInside ( i ) ;
24288: LD_ADDR_VAR 0 4
24292: PUSH
24293: LD_VAR 0 3
24297: PPUSH
24298: CALL_OW 313
24302: ST_TO_ADDR
// if t then
24303: LD_VAR 0 4
24307: IFFALSE 24355
// for j in t do
24309: LD_ADDR_VAR 0 7
24313: PUSH
24314: LD_VAR 0 4
24318: PUSH
24319: FOR_IN
24320: IFFALSE 24353
// result := Replace ( result , result + 1 , j ) ;
24322: LD_ADDR_VAR 0 2
24326: PUSH
24327: LD_VAR 0 2
24331: PPUSH
24332: LD_VAR 0 2
24336: PUSH
24337: LD_INT 1
24339: PLUS
24340: PPUSH
24341: LD_VAR 0 7
24345: PPUSH
24346: CALL_OW 1
24350: ST_TO_ADDR
24351: GO 24319
24353: POP
24354: POP
// end ;
24355: GO 24285
24357: POP
24358: POP
// if not result then
24359: LD_VAR 0 2
24363: NOT
24364: IFFALSE 24368
// exit ;
24366: GO 24516
// mech := result [ 1 ] ;
24368: LD_ADDR_VAR 0 5
24372: PUSH
24373: LD_VAR 0 2
24377: PUSH
24378: LD_INT 1
24380: ARRAY
24381: ST_TO_ADDR
// if result > 1 then
24382: LD_VAR 0 2
24386: PUSH
24387: LD_INT 1
24389: GREATER
24390: IFFALSE 24502
// begin for i = 2 to result do
24392: LD_ADDR_VAR 0 3
24396: PUSH
24397: DOUBLE
24398: LD_INT 2
24400: DEC
24401: ST_TO_ADDR
24402: LD_VAR 0 2
24406: PUSH
24407: FOR_TO
24408: IFFALSE 24500
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24410: LD_ADDR_VAR 0 4
24414: PUSH
24415: LD_VAR 0 2
24419: PUSH
24420: LD_VAR 0 3
24424: ARRAY
24425: PPUSH
24426: LD_INT 3
24428: PPUSH
24429: CALL_OW 259
24433: PUSH
24434: LD_VAR 0 2
24438: PUSH
24439: LD_VAR 0 3
24443: ARRAY
24444: PPUSH
24445: CALL_OW 432
24449: MINUS
24450: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24451: LD_VAR 0 4
24455: PUSH
24456: LD_VAR 0 5
24460: PPUSH
24461: LD_INT 3
24463: PPUSH
24464: CALL_OW 259
24468: PUSH
24469: LD_VAR 0 5
24473: PPUSH
24474: CALL_OW 432
24478: MINUS
24479: GREATEREQUAL
24480: IFFALSE 24498
// mech := result [ i ] ;
24482: LD_ADDR_VAR 0 5
24486: PUSH
24487: LD_VAR 0 2
24491: PUSH
24492: LD_VAR 0 3
24496: ARRAY
24497: ST_TO_ADDR
// end ;
24498: GO 24407
24500: POP
24501: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24502: LD_VAR 0 1
24506: PPUSH
24507: LD_VAR 0 5
24511: PPUSH
24512: CALL_OW 135
// end ;
24516: LD_VAR 0 2
24520: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24521: LD_INT 0
24523: PPUSH
24524: PPUSH
24525: PPUSH
24526: PPUSH
24527: PPUSH
24528: PPUSH
24529: PPUSH
24530: PPUSH
24531: PPUSH
24532: PPUSH
24533: PPUSH
24534: PPUSH
24535: PPUSH
// result := [ ] ;
24536: LD_ADDR_VAR 0 7
24540: PUSH
24541: EMPTY
24542: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24543: LD_VAR 0 1
24547: PPUSH
24548: CALL_OW 266
24552: PUSH
24553: LD_INT 0
24555: PUSH
24556: LD_INT 1
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: IN
24563: NOT
24564: IFFALSE 24568
// exit ;
24566: GO 26208
// if name then
24568: LD_VAR 0 3
24572: IFFALSE 24588
// SetBName ( base_dep , name ) ;
24574: LD_VAR 0 1
24578: PPUSH
24579: LD_VAR 0 3
24583: PPUSH
24584: CALL_OW 500
// base := GetBase ( base_dep ) ;
24588: LD_ADDR_VAR 0 15
24592: PUSH
24593: LD_VAR 0 1
24597: PPUSH
24598: CALL_OW 274
24602: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24603: LD_ADDR_VAR 0 16
24607: PUSH
24608: LD_VAR 0 1
24612: PPUSH
24613: CALL_OW 255
24617: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24618: LD_ADDR_VAR 0 17
24622: PUSH
24623: LD_VAR 0 1
24627: PPUSH
24628: CALL_OW 248
24632: ST_TO_ADDR
// if sources then
24633: LD_VAR 0 5
24637: IFFALSE 24684
// for i = 1 to 3 do
24639: LD_ADDR_VAR 0 8
24643: PUSH
24644: DOUBLE
24645: LD_INT 1
24647: DEC
24648: ST_TO_ADDR
24649: LD_INT 3
24651: PUSH
24652: FOR_TO
24653: IFFALSE 24682
// AddResourceType ( base , i , sources [ i ] ) ;
24655: LD_VAR 0 15
24659: PPUSH
24660: LD_VAR 0 8
24664: PPUSH
24665: LD_VAR 0 5
24669: PUSH
24670: LD_VAR 0 8
24674: ARRAY
24675: PPUSH
24676: CALL_OW 276
24680: GO 24652
24682: POP
24683: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24684: LD_ADDR_VAR 0 18
24688: PUSH
24689: LD_VAR 0 15
24693: PPUSH
24694: LD_VAR 0 2
24698: PPUSH
24699: LD_INT 1
24701: PPUSH
24702: CALL 23943 0 3
24706: ST_TO_ADDR
// InitHc ;
24707: CALL_OW 19
// InitUc ;
24711: CALL_OW 18
// uc_side := side ;
24715: LD_ADDR_OWVAR 20
24719: PUSH
24720: LD_VAR 0 16
24724: ST_TO_ADDR
// uc_nation := nation ;
24725: LD_ADDR_OWVAR 21
24729: PUSH
24730: LD_VAR 0 17
24734: ST_TO_ADDR
// if buildings then
24735: LD_VAR 0 18
24739: IFFALSE 26067
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24741: LD_ADDR_VAR 0 19
24745: PUSH
24746: LD_VAR 0 18
24750: PPUSH
24751: LD_INT 2
24753: PUSH
24754: LD_INT 30
24756: PUSH
24757: LD_INT 29
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 30
24766: PUSH
24767: LD_INT 30
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: LIST
24778: PPUSH
24779: CALL_OW 72
24783: ST_TO_ADDR
// if tmp then
24784: LD_VAR 0 19
24788: IFFALSE 24836
// for i in tmp do
24790: LD_ADDR_VAR 0 8
24794: PUSH
24795: LD_VAR 0 19
24799: PUSH
24800: FOR_IN
24801: IFFALSE 24834
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24803: LD_VAR 0 8
24807: PPUSH
24808: CALL_OW 250
24812: PPUSH
24813: LD_VAR 0 8
24817: PPUSH
24818: CALL_OW 251
24822: PPUSH
24823: LD_VAR 0 16
24827: PPUSH
24828: CALL_OW 441
24832: GO 24800
24834: POP
24835: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24836: LD_VAR 0 18
24840: PPUSH
24841: LD_INT 2
24843: PUSH
24844: LD_INT 30
24846: PUSH
24847: LD_INT 32
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 30
24856: PUSH
24857: LD_INT 33
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: LIST
24868: PPUSH
24869: CALL_OW 72
24873: IFFALSE 24961
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24875: LD_ADDR_VAR 0 8
24879: PUSH
24880: LD_VAR 0 18
24884: PPUSH
24885: LD_INT 2
24887: PUSH
24888: LD_INT 30
24890: PUSH
24891: LD_INT 32
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 30
24900: PUSH
24901: LD_INT 33
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: LIST
24912: PPUSH
24913: CALL_OW 72
24917: PUSH
24918: FOR_IN
24919: IFFALSE 24959
// begin if not GetBWeapon ( i ) then
24921: LD_VAR 0 8
24925: PPUSH
24926: CALL_OW 269
24930: NOT
24931: IFFALSE 24957
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24933: LD_VAR 0 8
24937: PPUSH
24938: LD_VAR 0 8
24942: PPUSH
24943: LD_VAR 0 2
24947: PPUSH
24948: CALL 26213 0 2
24952: PPUSH
24953: CALL_OW 431
// end ;
24957: GO 24918
24959: POP
24960: POP
// end ; for i = 1 to personel do
24961: LD_ADDR_VAR 0 8
24965: PUSH
24966: DOUBLE
24967: LD_INT 1
24969: DEC
24970: ST_TO_ADDR
24971: LD_VAR 0 6
24975: PUSH
24976: FOR_TO
24977: IFFALSE 26047
// begin if i > 4 then
24979: LD_VAR 0 8
24983: PUSH
24984: LD_INT 4
24986: GREATER
24987: IFFALSE 24991
// break ;
24989: GO 26047
// case i of 1 :
24991: LD_VAR 0 8
24995: PUSH
24996: LD_INT 1
24998: DOUBLE
24999: EQUAL
25000: IFTRUE 25004
25002: GO 25084
25004: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25005: LD_ADDR_VAR 0 12
25009: PUSH
25010: LD_VAR 0 18
25014: PPUSH
25015: LD_INT 22
25017: PUSH
25018: LD_VAR 0 16
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PUSH
25027: LD_INT 58
25029: PUSH
25030: EMPTY
25031: LIST
25032: PUSH
25033: LD_INT 2
25035: PUSH
25036: LD_INT 30
25038: PUSH
25039: LD_INT 32
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 30
25048: PUSH
25049: LD_INT 4
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 30
25058: PUSH
25059: LD_INT 5
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: LIST
25076: PPUSH
25077: CALL_OW 72
25081: ST_TO_ADDR
25082: GO 25306
25084: LD_INT 2
25086: DOUBLE
25087: EQUAL
25088: IFTRUE 25092
25090: GO 25154
25092: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25093: LD_ADDR_VAR 0 12
25097: PUSH
25098: LD_VAR 0 18
25102: PPUSH
25103: LD_INT 22
25105: PUSH
25106: LD_VAR 0 16
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 2
25117: PUSH
25118: LD_INT 30
25120: PUSH
25121: LD_INT 0
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 30
25130: PUSH
25131: LD_INT 1
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: LIST
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PPUSH
25147: CALL_OW 72
25151: ST_TO_ADDR
25152: GO 25306
25154: LD_INT 3
25156: DOUBLE
25157: EQUAL
25158: IFTRUE 25162
25160: GO 25224
25162: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25163: LD_ADDR_VAR 0 12
25167: PUSH
25168: LD_VAR 0 18
25172: PPUSH
25173: LD_INT 22
25175: PUSH
25176: LD_VAR 0 16
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 2
25187: PUSH
25188: LD_INT 30
25190: PUSH
25191: LD_INT 2
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 30
25200: PUSH
25201: LD_INT 3
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: LIST
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PPUSH
25217: CALL_OW 72
25221: ST_TO_ADDR
25222: GO 25306
25224: LD_INT 4
25226: DOUBLE
25227: EQUAL
25228: IFTRUE 25232
25230: GO 25305
25232: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25233: LD_ADDR_VAR 0 12
25237: PUSH
25238: LD_VAR 0 18
25242: PPUSH
25243: LD_INT 22
25245: PUSH
25246: LD_VAR 0 16
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 2
25257: PUSH
25258: LD_INT 30
25260: PUSH
25261: LD_INT 6
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 30
25270: PUSH
25271: LD_INT 7
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 30
25280: PUSH
25281: LD_INT 8
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PPUSH
25298: CALL_OW 72
25302: ST_TO_ADDR
25303: GO 25306
25305: POP
// if i = 1 then
25306: LD_VAR 0 8
25310: PUSH
25311: LD_INT 1
25313: EQUAL
25314: IFFALSE 25425
// begin tmp := [ ] ;
25316: LD_ADDR_VAR 0 19
25320: PUSH
25321: EMPTY
25322: ST_TO_ADDR
// for j in f do
25323: LD_ADDR_VAR 0 9
25327: PUSH
25328: LD_VAR 0 12
25332: PUSH
25333: FOR_IN
25334: IFFALSE 25407
// if GetBType ( j ) = b_bunker then
25336: LD_VAR 0 9
25340: PPUSH
25341: CALL_OW 266
25345: PUSH
25346: LD_INT 32
25348: EQUAL
25349: IFFALSE 25376
// tmp := Insert ( tmp , 1 , j ) else
25351: LD_ADDR_VAR 0 19
25355: PUSH
25356: LD_VAR 0 19
25360: PPUSH
25361: LD_INT 1
25363: PPUSH
25364: LD_VAR 0 9
25368: PPUSH
25369: CALL_OW 2
25373: ST_TO_ADDR
25374: GO 25405
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25376: LD_ADDR_VAR 0 19
25380: PUSH
25381: LD_VAR 0 19
25385: PPUSH
25386: LD_VAR 0 19
25390: PUSH
25391: LD_INT 1
25393: PLUS
25394: PPUSH
25395: LD_VAR 0 9
25399: PPUSH
25400: CALL_OW 2
25404: ST_TO_ADDR
25405: GO 25333
25407: POP
25408: POP
// if tmp then
25409: LD_VAR 0 19
25413: IFFALSE 25425
// f := tmp ;
25415: LD_ADDR_VAR 0 12
25419: PUSH
25420: LD_VAR 0 19
25424: ST_TO_ADDR
// end ; x := personel [ i ] ;
25425: LD_ADDR_VAR 0 13
25429: PUSH
25430: LD_VAR 0 6
25434: PUSH
25435: LD_VAR 0 8
25439: ARRAY
25440: ST_TO_ADDR
// if x = - 1 then
25441: LD_VAR 0 13
25445: PUSH
25446: LD_INT 1
25448: NEG
25449: EQUAL
25450: IFFALSE 25661
// begin for j in f do
25452: LD_ADDR_VAR 0 9
25456: PUSH
25457: LD_VAR 0 12
25461: PUSH
25462: FOR_IN
25463: IFFALSE 25657
// repeat InitHc ;
25465: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25469: LD_VAR 0 9
25473: PPUSH
25474: CALL_OW 266
25478: PUSH
25479: LD_INT 5
25481: EQUAL
25482: IFFALSE 25552
// begin if UnitsInside ( j ) < 3 then
25484: LD_VAR 0 9
25488: PPUSH
25489: CALL_OW 313
25493: PUSH
25494: LD_INT 3
25496: LESS
25497: IFFALSE 25533
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25499: LD_INT 0
25501: PPUSH
25502: LD_INT 5
25504: PUSH
25505: LD_INT 8
25507: PUSH
25508: LD_INT 9
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: LIST
25515: PUSH
25516: LD_VAR 0 17
25520: ARRAY
25521: PPUSH
25522: LD_VAR 0 4
25526: PPUSH
25527: CALL_OW 380
25531: GO 25550
// PrepareHuman ( false , i , skill ) ;
25533: LD_INT 0
25535: PPUSH
25536: LD_VAR 0 8
25540: PPUSH
25541: LD_VAR 0 4
25545: PPUSH
25546: CALL_OW 380
// end else
25550: GO 25569
// PrepareHuman ( false , i , skill ) ;
25552: LD_INT 0
25554: PPUSH
25555: LD_VAR 0 8
25559: PPUSH
25560: LD_VAR 0 4
25564: PPUSH
25565: CALL_OW 380
// un := CreateHuman ;
25569: LD_ADDR_VAR 0 14
25573: PUSH
25574: CALL_OW 44
25578: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25579: LD_ADDR_VAR 0 7
25583: PUSH
25584: LD_VAR 0 7
25588: PPUSH
25589: LD_INT 1
25591: PPUSH
25592: LD_VAR 0 14
25596: PPUSH
25597: CALL_OW 2
25601: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25602: LD_VAR 0 14
25606: PPUSH
25607: LD_VAR 0 9
25611: PPUSH
25612: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25616: LD_VAR 0 9
25620: PPUSH
25621: CALL_OW 313
25625: PUSH
25626: LD_INT 6
25628: EQUAL
25629: IFTRUE 25653
25631: PUSH
25632: LD_VAR 0 9
25636: PPUSH
25637: CALL_OW 266
25641: PUSH
25642: LD_INT 32
25644: PUSH
25645: LD_INT 31
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: IN
25652: OR
25653: IFFALSE 25465
25655: GO 25462
25657: POP
25658: POP
// end else
25659: GO 26045
// for j = 1 to x do
25661: LD_ADDR_VAR 0 9
25665: PUSH
25666: DOUBLE
25667: LD_INT 1
25669: DEC
25670: ST_TO_ADDR
25671: LD_VAR 0 13
25675: PUSH
25676: FOR_TO
25677: IFFALSE 26043
// begin InitHc ;
25679: CALL_OW 19
// if not f then
25683: LD_VAR 0 12
25687: NOT
25688: IFFALSE 25777
// begin PrepareHuman ( false , i , skill ) ;
25690: LD_INT 0
25692: PPUSH
25693: LD_VAR 0 8
25697: PPUSH
25698: LD_VAR 0 4
25702: PPUSH
25703: CALL_OW 380
// un := CreateHuman ;
25707: LD_ADDR_VAR 0 14
25711: PUSH
25712: CALL_OW 44
25716: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25717: LD_ADDR_VAR 0 7
25721: PUSH
25722: LD_VAR 0 7
25726: PPUSH
25727: LD_INT 1
25729: PPUSH
25730: LD_VAR 0 14
25734: PPUSH
25735: CALL_OW 2
25739: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25740: LD_VAR 0 14
25744: PPUSH
25745: LD_VAR 0 1
25749: PPUSH
25750: CALL_OW 250
25754: PPUSH
25755: LD_VAR 0 1
25759: PPUSH
25760: CALL_OW 251
25764: PPUSH
25765: LD_INT 10
25767: PPUSH
25768: LD_INT 0
25770: PPUSH
25771: CALL_OW 50
// continue ;
25775: GO 25676
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25777: LD_VAR 0 12
25781: PUSH
25782: LD_INT 1
25784: ARRAY
25785: PPUSH
25786: CALL_OW 313
25790: IFFALSE 25818
25792: PUSH
25793: LD_VAR 0 12
25797: PUSH
25798: LD_INT 1
25800: ARRAY
25801: PPUSH
25802: CALL_OW 266
25806: PUSH
25807: LD_INT 32
25809: PUSH
25810: LD_INT 31
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: IN
25817: AND
25818: IFTRUE 25839
25820: PUSH
25821: LD_VAR 0 12
25825: PUSH
25826: LD_INT 1
25828: ARRAY
25829: PPUSH
25830: CALL_OW 313
25834: PUSH
25835: LD_INT 6
25837: EQUAL
25838: OR
25839: IFFALSE 25859
// f := Delete ( f , 1 ) ;
25841: LD_ADDR_VAR 0 12
25845: PUSH
25846: LD_VAR 0 12
25850: PPUSH
25851: LD_INT 1
25853: PPUSH
25854: CALL_OW 3
25858: ST_TO_ADDR
// if not f then
25859: LD_VAR 0 12
25863: NOT
25864: IFFALSE 25882
// begin x := x + 2 ;
25866: LD_ADDR_VAR 0 13
25870: PUSH
25871: LD_VAR 0 13
25875: PUSH
25876: LD_INT 2
25878: PLUS
25879: ST_TO_ADDR
// continue ;
25880: GO 25676
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25882: LD_VAR 0 12
25886: PUSH
25887: LD_INT 1
25889: ARRAY
25890: PPUSH
25891: CALL_OW 266
25895: PUSH
25896: LD_INT 5
25898: EQUAL
25899: IFFALSE 25973
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25901: LD_VAR 0 12
25905: PUSH
25906: LD_INT 1
25908: ARRAY
25909: PPUSH
25910: CALL_OW 313
25914: PUSH
25915: LD_INT 3
25917: LESS
25918: IFFALSE 25954
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25920: LD_INT 0
25922: PPUSH
25923: LD_INT 5
25925: PUSH
25926: LD_INT 8
25928: PUSH
25929: LD_INT 9
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: LIST
25936: PUSH
25937: LD_VAR 0 17
25941: ARRAY
25942: PPUSH
25943: LD_VAR 0 4
25947: PPUSH
25948: CALL_OW 380
25952: GO 25971
// PrepareHuman ( false , i , skill ) ;
25954: LD_INT 0
25956: PPUSH
25957: LD_VAR 0 8
25961: PPUSH
25962: LD_VAR 0 4
25966: PPUSH
25967: CALL_OW 380
// end else
25971: GO 25990
// PrepareHuman ( false , i , skill ) ;
25973: LD_INT 0
25975: PPUSH
25976: LD_VAR 0 8
25980: PPUSH
25981: LD_VAR 0 4
25985: PPUSH
25986: CALL_OW 380
// un := CreateHuman ;
25990: LD_ADDR_VAR 0 14
25994: PUSH
25995: CALL_OW 44
25999: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26000: LD_ADDR_VAR 0 7
26004: PUSH
26005: LD_VAR 0 7
26009: PPUSH
26010: LD_INT 1
26012: PPUSH
26013: LD_VAR 0 14
26017: PPUSH
26018: CALL_OW 2
26022: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26023: LD_VAR 0 14
26027: PPUSH
26028: LD_VAR 0 12
26032: PUSH
26033: LD_INT 1
26035: ARRAY
26036: PPUSH
26037: CALL_OW 52
// end ;
26041: GO 25676
26043: POP
26044: POP
// end ;
26045: GO 24976
26047: POP
26048: POP
// result := result ^ buildings ;
26049: LD_ADDR_VAR 0 7
26053: PUSH
26054: LD_VAR 0 7
26058: PUSH
26059: LD_VAR 0 18
26063: ADD
26064: ST_TO_ADDR
// end else
26065: GO 26208
// begin for i = 1 to personel do
26067: LD_ADDR_VAR 0 8
26071: PUSH
26072: DOUBLE
26073: LD_INT 1
26075: DEC
26076: ST_TO_ADDR
26077: LD_VAR 0 6
26081: PUSH
26082: FOR_TO
26083: IFFALSE 26206
// begin if i > 4 then
26085: LD_VAR 0 8
26089: PUSH
26090: LD_INT 4
26092: GREATER
26093: IFFALSE 26097
// break ;
26095: GO 26206
// x := personel [ i ] ;
26097: LD_ADDR_VAR 0 13
26101: PUSH
26102: LD_VAR 0 6
26106: PUSH
26107: LD_VAR 0 8
26111: ARRAY
26112: ST_TO_ADDR
// if x = - 1 then
26113: LD_VAR 0 13
26117: PUSH
26118: LD_INT 1
26120: NEG
26121: EQUAL
26122: IFFALSE 26126
// continue ;
26124: GO 26082
// PrepareHuman ( false , i , skill ) ;
26126: LD_INT 0
26128: PPUSH
26129: LD_VAR 0 8
26133: PPUSH
26134: LD_VAR 0 4
26138: PPUSH
26139: CALL_OW 380
// un := CreateHuman ;
26143: LD_ADDR_VAR 0 14
26147: PUSH
26148: CALL_OW 44
26152: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26153: LD_VAR 0 14
26157: PPUSH
26158: LD_VAR 0 1
26162: PPUSH
26163: CALL_OW 250
26167: PPUSH
26168: LD_VAR 0 1
26172: PPUSH
26173: CALL_OW 251
26177: PPUSH
26178: LD_INT 10
26180: PPUSH
26181: LD_INT 0
26183: PPUSH
26184: CALL_OW 50
// result := result ^ un ;
26188: LD_ADDR_VAR 0 7
26192: PUSH
26193: LD_VAR 0 7
26197: PUSH
26198: LD_VAR 0 14
26202: ADD
26203: ST_TO_ADDR
// end ;
26204: GO 26082
26206: POP
26207: POP
// end ; end ;
26208: LD_VAR 0 7
26212: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26213: LD_INT 0
26215: PPUSH
26216: PPUSH
26217: PPUSH
26218: PPUSH
26219: PPUSH
26220: PPUSH
26221: PPUSH
26222: PPUSH
26223: PPUSH
26224: PPUSH
26225: PPUSH
26226: PPUSH
26227: PPUSH
26228: PPUSH
26229: PPUSH
26230: PPUSH
// result := false ;
26231: LD_ADDR_VAR 0 3
26235: PUSH
26236: LD_INT 0
26238: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26239: LD_VAR 0 1
26243: NOT
26244: IFTRUE 26269
26246: PUSH
26247: LD_VAR 0 1
26251: PPUSH
26252: CALL_OW 266
26256: PUSH
26257: LD_INT 32
26259: PUSH
26260: LD_INT 33
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: IN
26267: NOT
26268: OR
26269: IFFALSE 26273
// exit ;
26271: GO 27408
// nat := GetNation ( tower ) ;
26273: LD_ADDR_VAR 0 12
26277: PUSH
26278: LD_VAR 0 1
26282: PPUSH
26283: CALL_OW 248
26287: ST_TO_ADDR
// side := GetSide ( tower ) ;
26288: LD_ADDR_VAR 0 16
26292: PUSH
26293: LD_VAR 0 1
26297: PPUSH
26298: CALL_OW 255
26302: ST_TO_ADDR
// x := GetX ( tower ) ;
26303: LD_ADDR_VAR 0 10
26307: PUSH
26308: LD_VAR 0 1
26312: PPUSH
26313: CALL_OW 250
26317: ST_TO_ADDR
// y := GetY ( tower ) ;
26318: LD_ADDR_VAR 0 11
26322: PUSH
26323: LD_VAR 0 1
26327: PPUSH
26328: CALL_OW 251
26332: ST_TO_ADDR
// if not x or not y then
26333: LD_VAR 0 10
26337: NOT
26338: IFTRUE 26347
26340: PUSH
26341: LD_VAR 0 11
26345: NOT
26346: OR
26347: IFFALSE 26351
// exit ;
26349: GO 27408
// weapon := 0 ;
26351: LD_ADDR_VAR 0 18
26355: PUSH
26356: LD_INT 0
26358: ST_TO_ADDR
// fac_list := [ ] ;
26359: LD_ADDR_VAR 0 17
26363: PUSH
26364: EMPTY
26365: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26366: LD_ADDR_VAR 0 6
26370: PUSH
26371: LD_VAR 0 1
26375: PPUSH
26376: CALL_OW 274
26380: PPUSH
26381: LD_VAR 0 2
26385: PPUSH
26386: LD_INT 0
26388: PPUSH
26389: CALL 23943 0 3
26393: PPUSH
26394: LD_INT 30
26396: PUSH
26397: LD_INT 3
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PPUSH
26404: CALL_OW 72
26408: ST_TO_ADDR
// if not factories then
26409: LD_VAR 0 6
26413: NOT
26414: IFFALSE 26418
// exit ;
26416: GO 27408
// for i in factories do
26418: LD_ADDR_VAR 0 8
26422: PUSH
26423: LD_VAR 0 6
26427: PUSH
26428: FOR_IN
26429: IFFALSE 26454
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26431: LD_ADDR_VAR 0 17
26435: PUSH
26436: LD_VAR 0 17
26440: PUSH
26441: LD_VAR 0 8
26445: PPUSH
26446: CALL_OW 478
26450: UNION
26451: ST_TO_ADDR
26452: GO 26428
26454: POP
26455: POP
// if not fac_list then
26456: LD_VAR 0 17
26460: NOT
26461: IFFALSE 26465
// exit ;
26463: GO 27408
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26465: LD_ADDR_VAR 0 5
26469: PUSH
26470: LD_INT 4
26472: PUSH
26473: LD_INT 5
26475: PUSH
26476: LD_INT 9
26478: PUSH
26479: LD_INT 10
26481: PUSH
26482: LD_INT 6
26484: PUSH
26485: LD_INT 7
26487: PUSH
26488: LD_INT 11
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 27
26502: PUSH
26503: LD_INT 28
26505: PUSH
26506: LD_INT 26
26508: PUSH
26509: LD_INT 30
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 43
26520: PUSH
26521: LD_INT 44
26523: PUSH
26524: LD_INT 46
26526: PUSH
26527: LD_INT 45
26529: PUSH
26530: LD_INT 47
26532: PUSH
26533: LD_INT 49
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: LIST
26548: PUSH
26549: LD_VAR 0 12
26553: ARRAY
26554: ST_TO_ADDR
// list := list isect fac_list ;
26555: LD_ADDR_VAR 0 5
26559: PUSH
26560: LD_VAR 0 5
26564: PUSH
26565: LD_VAR 0 17
26569: ISECT
26570: ST_TO_ADDR
// if not list then
26571: LD_VAR 0 5
26575: NOT
26576: IFFALSE 26580
// exit ;
26578: GO 27408
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26580: LD_VAR 0 12
26584: PUSH
26585: LD_INT 3
26587: EQUAL
26588: IFFALSE 26600
26590: PUSH
26591: LD_INT 49
26593: PUSH
26594: LD_VAR 0 5
26598: IN
26599: AND
26600: IFFALSE 26620
26602: PUSH
26603: LD_INT 31
26605: PPUSH
26606: LD_VAR 0 16
26610: PPUSH
26611: CALL_OW 321
26615: PUSH
26616: LD_INT 2
26618: EQUAL
26619: AND
26620: IFFALSE 26680
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26622: LD_INT 22
26624: PUSH
26625: LD_VAR 0 16
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 35
26636: PUSH
26637: LD_INT 49
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 91
26646: PUSH
26647: LD_VAR 0 1
26651: PUSH
26652: LD_INT 10
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: LIST
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: LIST
26664: PPUSH
26665: CALL_OW 69
26669: NOT
26670: IFFALSE 26680
// weapon := ru_time_lapser ;
26672: LD_ADDR_VAR 0 18
26676: PUSH
26677: LD_INT 49
26679: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26680: LD_VAR 0 12
26684: PUSH
26685: LD_INT 1
26687: PUSH
26688: LD_INT 2
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: IN
26695: IFFALSE 26719
26697: PUSH
26698: LD_INT 11
26700: PUSH
26701: LD_VAR 0 5
26705: IN
26706: IFTRUE 26718
26708: PUSH
26709: LD_INT 30
26711: PUSH
26712: LD_VAR 0 5
26716: IN
26717: OR
26718: AND
26719: IFFALSE 26739
26721: PUSH
26722: LD_INT 6
26724: PPUSH
26725: LD_VAR 0 16
26729: PPUSH
26730: CALL_OW 321
26734: PUSH
26735: LD_INT 2
26737: EQUAL
26738: AND
26739: IFFALSE 26906
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26741: LD_INT 22
26743: PUSH
26744: LD_VAR 0 16
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 2
26755: PUSH
26756: LD_INT 35
26758: PUSH
26759: LD_INT 11
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: LD_INT 35
26768: PUSH
26769: LD_INT 30
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 91
26783: PUSH
26784: LD_VAR 0 1
26788: PUSH
26789: LD_INT 18
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: LIST
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: LIST
26801: PPUSH
26802: CALL_OW 69
26806: NOT
26807: IFFALSE 26883
26809: PUSH
26810: LD_INT 22
26812: PUSH
26813: LD_VAR 0 16
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 2
26824: PUSH
26825: LD_INT 30
26827: PUSH
26828: LD_INT 32
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 30
26837: PUSH
26838: LD_INT 33
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 91
26852: PUSH
26853: LD_VAR 0 1
26857: PUSH
26858: LD_INT 12
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: LIST
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: LIST
26870: PUSH
26871: EMPTY
26872: LIST
26873: PPUSH
26874: CALL_OW 69
26878: PUSH
26879: LD_INT 2
26881: GREATER
26882: AND
26883: IFFALSE 26906
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26885: LD_ADDR_VAR 0 18
26889: PUSH
26890: LD_INT 11
26892: PUSH
26893: LD_INT 30
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_VAR 0 12
26904: ARRAY
26905: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26906: LD_VAR 0 18
26910: NOT
26911: IFFALSE 26931
26913: PUSH
26914: LD_INT 40
26916: PPUSH
26917: LD_VAR 0 16
26921: PPUSH
26922: CALL_OW 321
26926: PUSH
26927: LD_INT 2
26929: EQUAL
26930: AND
26931: IFFALSE 26967
26933: PUSH
26934: LD_INT 7
26936: PUSH
26937: LD_VAR 0 5
26941: IN
26942: IFTRUE 26954
26944: PUSH
26945: LD_INT 28
26947: PUSH
26948: LD_VAR 0 5
26952: IN
26953: OR
26954: IFTRUE 26966
26956: PUSH
26957: LD_INT 45
26959: PUSH
26960: LD_VAR 0 5
26964: IN
26965: OR
26966: AND
26967: IFFALSE 27221
// begin hex := GetHexInfo ( x , y ) ;
26969: LD_ADDR_VAR 0 4
26973: PUSH
26974: LD_VAR 0 10
26978: PPUSH
26979: LD_VAR 0 11
26983: PPUSH
26984: CALL_OW 546
26988: ST_TO_ADDR
// if hex [ 1 ] then
26989: LD_VAR 0 4
26993: PUSH
26994: LD_INT 1
26996: ARRAY
26997: IFFALSE 27001
// exit ;
26999: GO 27408
// height := hex [ 2 ] ;
27001: LD_ADDR_VAR 0 15
27005: PUSH
27006: LD_VAR 0 4
27010: PUSH
27011: LD_INT 2
27013: ARRAY
27014: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27015: LD_ADDR_VAR 0 14
27019: PUSH
27020: LD_INT 0
27022: PUSH
27023: LD_INT 2
27025: PUSH
27026: LD_INT 3
27028: PUSH
27029: LD_INT 5
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: ST_TO_ADDR
// for i in tmp do
27038: LD_ADDR_VAR 0 8
27042: PUSH
27043: LD_VAR 0 14
27047: PUSH
27048: FOR_IN
27049: IFFALSE 27219
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27051: LD_ADDR_VAR 0 9
27055: PUSH
27056: LD_VAR 0 10
27060: PPUSH
27061: LD_VAR 0 8
27065: PPUSH
27066: LD_INT 5
27068: PPUSH
27069: CALL_OW 272
27073: PUSH
27074: LD_VAR 0 11
27078: PPUSH
27079: LD_VAR 0 8
27083: PPUSH
27084: LD_INT 5
27086: PPUSH
27087: CALL_OW 273
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27096: LD_VAR 0 9
27100: PUSH
27101: LD_INT 1
27103: ARRAY
27104: PPUSH
27105: LD_VAR 0 9
27109: PUSH
27110: LD_INT 2
27112: ARRAY
27113: PPUSH
27114: CALL_OW 488
27118: IFFALSE 27217
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27120: LD_ADDR_VAR 0 4
27124: PUSH
27125: LD_VAR 0 9
27129: PUSH
27130: LD_INT 1
27132: ARRAY
27133: PPUSH
27134: LD_VAR 0 9
27138: PUSH
27139: LD_INT 2
27141: ARRAY
27142: PPUSH
27143: CALL_OW 546
27147: ST_TO_ADDR
// if hex [ 1 ] then
27148: LD_VAR 0 4
27152: PUSH
27153: LD_INT 1
27155: ARRAY
27156: IFFALSE 27160
// continue ;
27158: GO 27048
// h := hex [ 2 ] ;
27160: LD_ADDR_VAR 0 13
27164: PUSH
27165: LD_VAR 0 4
27169: PUSH
27170: LD_INT 2
27172: ARRAY
27173: ST_TO_ADDR
// if h + 7 < height then
27174: LD_VAR 0 13
27178: PUSH
27179: LD_INT 7
27181: PLUS
27182: PUSH
27183: LD_VAR 0 15
27187: LESS
27188: IFFALSE 27217
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27190: LD_ADDR_VAR 0 18
27194: PUSH
27195: LD_INT 7
27197: PUSH
27198: LD_INT 28
27200: PUSH
27201: LD_INT 45
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: LIST
27208: PUSH
27209: LD_VAR 0 12
27213: ARRAY
27214: ST_TO_ADDR
// break ;
27215: GO 27219
// end ; end ; end ;
27217: GO 27048
27219: POP
27220: POP
// end ; if not weapon then
27221: LD_VAR 0 18
27225: NOT
27226: IFFALSE 27286
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27228: LD_ADDR_VAR 0 5
27232: PUSH
27233: LD_VAR 0 5
27237: PUSH
27238: LD_INT 11
27240: PUSH
27241: LD_INT 30
27243: PUSH
27244: LD_INT 49
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: LIST
27251: DIFF
27252: ST_TO_ADDR
// if not list then
27253: LD_VAR 0 5
27257: NOT
27258: IFFALSE 27262
// exit ;
27260: GO 27408
// weapon := list [ rand ( 1 , list ) ] ;
27262: LD_ADDR_VAR 0 18
27266: PUSH
27267: LD_VAR 0 5
27271: PUSH
27272: LD_INT 1
27274: PPUSH
27275: LD_VAR 0 5
27279: PPUSH
27280: CALL_OW 12
27284: ARRAY
27285: ST_TO_ADDR
// end ; if weapon then
27286: LD_VAR 0 18
27290: IFFALSE 27408
// begin tmp := CostOfWeapon ( weapon ) ;
27292: LD_ADDR_VAR 0 14
27296: PUSH
27297: LD_VAR 0 18
27301: PPUSH
27302: CALL_OW 451
27306: ST_TO_ADDR
// j := GetBase ( tower ) ;
27307: LD_ADDR_VAR 0 9
27311: PUSH
27312: LD_VAR 0 1
27316: PPUSH
27317: CALL_OW 274
27321: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27322: LD_VAR 0 9
27326: PPUSH
27327: LD_INT 1
27329: PPUSH
27330: CALL_OW 275
27334: PUSH
27335: LD_VAR 0 14
27339: PUSH
27340: LD_INT 1
27342: ARRAY
27343: GREATEREQUAL
27344: IFFALSE 27370
27346: PUSH
27347: LD_VAR 0 9
27351: PPUSH
27352: LD_INT 2
27354: PPUSH
27355: CALL_OW 275
27359: PUSH
27360: LD_VAR 0 14
27364: PUSH
27365: LD_INT 2
27367: ARRAY
27368: GREATEREQUAL
27369: AND
27370: IFFALSE 27396
27372: PUSH
27373: LD_VAR 0 9
27377: PPUSH
27378: LD_INT 3
27380: PPUSH
27381: CALL_OW 275
27385: PUSH
27386: LD_VAR 0 14
27390: PUSH
27391: LD_INT 3
27393: ARRAY
27394: GREATEREQUAL
27395: AND
27396: IFFALSE 27408
// result := weapon ;
27398: LD_ADDR_VAR 0 3
27402: PUSH
27403: LD_VAR 0 18
27407: ST_TO_ADDR
// end ; end ;
27408: LD_VAR 0 3
27412: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27413: LD_INT 0
27415: PPUSH
27416: PPUSH
// result := true ;
27417: LD_ADDR_VAR 0 3
27421: PUSH
27422: LD_INT 1
27424: ST_TO_ADDR
// if array1 = array2 then
27425: LD_VAR 0 1
27429: PUSH
27430: LD_VAR 0 2
27434: EQUAL
27435: IFFALSE 27495
// begin for i = 1 to array1 do
27437: LD_ADDR_VAR 0 4
27441: PUSH
27442: DOUBLE
27443: LD_INT 1
27445: DEC
27446: ST_TO_ADDR
27447: LD_VAR 0 1
27451: PUSH
27452: FOR_TO
27453: IFFALSE 27491
// if array1 [ i ] <> array2 [ i ] then
27455: LD_VAR 0 1
27459: PUSH
27460: LD_VAR 0 4
27464: ARRAY
27465: PUSH
27466: LD_VAR 0 2
27470: PUSH
27471: LD_VAR 0 4
27475: ARRAY
27476: NONEQUAL
27477: IFFALSE 27489
// begin result := false ;
27479: LD_ADDR_VAR 0 3
27483: PUSH
27484: LD_INT 0
27486: ST_TO_ADDR
// break ;
27487: GO 27491
// end ;
27489: GO 27452
27491: POP
27492: POP
// end else
27493: GO 27503
// result := false ;
27495: LD_ADDR_VAR 0 3
27499: PUSH
27500: LD_INT 0
27502: ST_TO_ADDR
// end ;
27503: LD_VAR 0 3
27507: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27508: LD_INT 0
27510: PPUSH
27511: PPUSH
// if not array1 or not array2 then
27512: LD_VAR 0 1
27516: NOT
27517: IFTRUE 27526
27519: PUSH
27520: LD_VAR 0 2
27524: NOT
27525: OR
27526: IFFALSE 27530
// exit ;
27528: GO 27594
// result := true ;
27530: LD_ADDR_VAR 0 3
27534: PUSH
27535: LD_INT 1
27537: ST_TO_ADDR
// for i = 1 to array1 do
27538: LD_ADDR_VAR 0 4
27542: PUSH
27543: DOUBLE
27544: LD_INT 1
27546: DEC
27547: ST_TO_ADDR
27548: LD_VAR 0 1
27552: PUSH
27553: FOR_TO
27554: IFFALSE 27592
// if array1 [ i ] <> array2 [ i ] then
27556: LD_VAR 0 1
27560: PUSH
27561: LD_VAR 0 4
27565: ARRAY
27566: PUSH
27567: LD_VAR 0 2
27571: PUSH
27572: LD_VAR 0 4
27576: ARRAY
27577: NONEQUAL
27578: IFFALSE 27590
// begin result := false ;
27580: LD_ADDR_VAR 0 3
27584: PUSH
27585: LD_INT 0
27587: ST_TO_ADDR
// break ;
27588: GO 27592
// end ;
27590: GO 27553
27592: POP
27593: POP
// end ;
27594: LD_VAR 0 3
27598: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27599: LD_INT 0
27601: PPUSH
27602: PPUSH
27603: PPUSH
// pom := GetBase ( fac ) ;
27604: LD_ADDR_VAR 0 5
27608: PUSH
27609: LD_VAR 0 1
27613: PPUSH
27614: CALL_OW 274
27618: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27619: LD_ADDR_VAR 0 4
27623: PUSH
27624: LD_VAR 0 2
27628: PUSH
27629: LD_INT 1
27631: ARRAY
27632: PPUSH
27633: LD_VAR 0 2
27637: PUSH
27638: LD_INT 2
27640: ARRAY
27641: PPUSH
27642: LD_VAR 0 2
27646: PUSH
27647: LD_INT 3
27649: ARRAY
27650: PPUSH
27651: LD_VAR 0 2
27655: PUSH
27656: LD_INT 4
27658: ARRAY
27659: PPUSH
27660: CALL_OW 449
27664: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27665: LD_ADDR_VAR 0 3
27669: PUSH
27670: LD_VAR 0 5
27674: PPUSH
27675: LD_INT 1
27677: PPUSH
27678: CALL_OW 275
27682: PUSH
27683: LD_VAR 0 4
27687: PUSH
27688: LD_INT 1
27690: ARRAY
27691: GREATEREQUAL
27692: IFFALSE 27718
27694: PUSH
27695: LD_VAR 0 5
27699: PPUSH
27700: LD_INT 2
27702: PPUSH
27703: CALL_OW 275
27707: PUSH
27708: LD_VAR 0 4
27712: PUSH
27713: LD_INT 2
27715: ARRAY
27716: GREATEREQUAL
27717: AND
27718: IFFALSE 27744
27720: PUSH
27721: LD_VAR 0 5
27725: PPUSH
27726: LD_INT 3
27728: PPUSH
27729: CALL_OW 275
27733: PUSH
27734: LD_VAR 0 4
27738: PUSH
27739: LD_INT 3
27741: ARRAY
27742: GREATEREQUAL
27743: AND
27744: ST_TO_ADDR
// end ;
27745: LD_VAR 0 3
27749: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27750: LD_INT 0
27752: PPUSH
27753: PPUSH
27754: PPUSH
27755: PPUSH
// pom := GetBase ( building ) ;
27756: LD_ADDR_VAR 0 3
27760: PUSH
27761: LD_VAR 0 1
27765: PPUSH
27766: CALL_OW 274
27770: ST_TO_ADDR
// if not pom then
27771: LD_VAR 0 3
27775: NOT
27776: IFFALSE 27780
// exit ;
27778: GO 27954
// btype := GetBType ( building ) ;
27780: LD_ADDR_VAR 0 5
27784: PUSH
27785: LD_VAR 0 1
27789: PPUSH
27790: CALL_OW 266
27794: ST_TO_ADDR
// if btype = b_armoury then
27795: LD_VAR 0 5
27799: PUSH
27800: LD_INT 4
27802: EQUAL
27803: IFFALSE 27813
// btype := b_barracks ;
27805: LD_ADDR_VAR 0 5
27809: PUSH
27810: LD_INT 5
27812: ST_TO_ADDR
// if btype = b_depot then
27813: LD_VAR 0 5
27817: PUSH
27818: LD_INT 0
27820: EQUAL
27821: IFFALSE 27831
// btype := b_warehouse ;
27823: LD_ADDR_VAR 0 5
27827: PUSH
27828: LD_INT 1
27830: ST_TO_ADDR
// if btype = b_workshop then
27831: LD_VAR 0 5
27835: PUSH
27836: LD_INT 2
27838: EQUAL
27839: IFFALSE 27849
// btype := b_factory ;
27841: LD_ADDR_VAR 0 5
27845: PUSH
27846: LD_INT 3
27848: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27849: LD_ADDR_VAR 0 4
27853: PUSH
27854: LD_VAR 0 5
27858: PPUSH
27859: LD_VAR 0 1
27863: PPUSH
27864: CALL_OW 248
27868: PPUSH
27869: CALL_OW 450
27873: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27874: LD_ADDR_VAR 0 2
27878: PUSH
27879: LD_VAR 0 3
27883: PPUSH
27884: LD_INT 1
27886: PPUSH
27887: CALL_OW 275
27891: PUSH
27892: LD_VAR 0 4
27896: PUSH
27897: LD_INT 1
27899: ARRAY
27900: GREATEREQUAL
27901: IFFALSE 27927
27903: PUSH
27904: LD_VAR 0 3
27908: PPUSH
27909: LD_INT 2
27911: PPUSH
27912: CALL_OW 275
27916: PUSH
27917: LD_VAR 0 4
27921: PUSH
27922: LD_INT 2
27924: ARRAY
27925: GREATEREQUAL
27926: AND
27927: IFFALSE 27953
27929: PUSH
27930: LD_VAR 0 3
27934: PPUSH
27935: LD_INT 3
27937: PPUSH
27938: CALL_OW 275
27942: PUSH
27943: LD_VAR 0 4
27947: PUSH
27948: LD_INT 3
27950: ARRAY
27951: GREATEREQUAL
27952: AND
27953: ST_TO_ADDR
// end ;
27954: LD_VAR 0 2
27958: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27959: LD_INT 0
27961: PPUSH
27962: PPUSH
27963: PPUSH
// pom := GetBase ( building ) ;
27964: LD_ADDR_VAR 0 4
27968: PUSH
27969: LD_VAR 0 1
27973: PPUSH
27974: CALL_OW 274
27978: ST_TO_ADDR
// if not pom then
27979: LD_VAR 0 4
27983: NOT
27984: IFFALSE 27988
// exit ;
27986: GO 28093
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27988: LD_ADDR_VAR 0 5
27992: PUSH
27993: LD_VAR 0 2
27997: PPUSH
27998: LD_VAR 0 1
28002: PPUSH
28003: CALL_OW 248
28007: PPUSH
28008: CALL_OW 450
28012: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28013: LD_ADDR_VAR 0 3
28017: PUSH
28018: LD_VAR 0 4
28022: PPUSH
28023: LD_INT 1
28025: PPUSH
28026: CALL_OW 275
28030: PUSH
28031: LD_VAR 0 5
28035: PUSH
28036: LD_INT 1
28038: ARRAY
28039: GREATEREQUAL
28040: IFFALSE 28066
28042: PUSH
28043: LD_VAR 0 4
28047: PPUSH
28048: LD_INT 2
28050: PPUSH
28051: CALL_OW 275
28055: PUSH
28056: LD_VAR 0 5
28060: PUSH
28061: LD_INT 2
28063: ARRAY
28064: GREATEREQUAL
28065: AND
28066: IFFALSE 28092
28068: PUSH
28069: LD_VAR 0 4
28073: PPUSH
28074: LD_INT 3
28076: PPUSH
28077: CALL_OW 275
28081: PUSH
28082: LD_VAR 0 5
28086: PUSH
28087: LD_INT 3
28089: ARRAY
28090: GREATEREQUAL
28091: AND
28092: ST_TO_ADDR
// end ;
28093: LD_VAR 0 3
28097: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28098: LD_INT 0
28100: PPUSH
28101: PPUSH
28102: PPUSH
28103: PPUSH
28104: PPUSH
28105: PPUSH
28106: PPUSH
28107: PPUSH
28108: PPUSH
28109: PPUSH
28110: PPUSH
// result := false ;
28111: LD_ADDR_VAR 0 8
28115: PUSH
28116: LD_INT 0
28118: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28119: LD_VAR 0 5
28123: NOT
28124: IFTRUE 28133
28126: PUSH
28127: LD_VAR 0 1
28131: NOT
28132: OR
28133: IFTRUE 28142
28135: PUSH
28136: LD_VAR 0 2
28140: NOT
28141: OR
28142: IFTRUE 28151
28144: PUSH
28145: LD_VAR 0 3
28149: NOT
28150: OR
28151: IFFALSE 28155
// exit ;
28153: GO 28981
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28155: LD_ADDR_VAR 0 14
28159: PUSH
28160: LD_VAR 0 1
28164: PPUSH
28165: LD_VAR 0 2
28169: PPUSH
28170: LD_VAR 0 3
28174: PPUSH
28175: LD_VAR 0 4
28179: PPUSH
28180: LD_VAR 0 5
28184: PUSH
28185: LD_INT 1
28187: ARRAY
28188: PPUSH
28189: CALL_OW 248
28193: PPUSH
28194: LD_INT 0
28196: PPUSH
28197: CALL 30262 0 6
28201: ST_TO_ADDR
// if not hexes then
28202: LD_VAR 0 14
28206: NOT
28207: IFFALSE 28211
// exit ;
28209: GO 28981
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28211: LD_ADDR_VAR 0 17
28215: PUSH
28216: LD_VAR 0 5
28220: PPUSH
28221: LD_INT 22
28223: PUSH
28224: LD_VAR 0 13
28228: PPUSH
28229: CALL_OW 255
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 2
28240: PUSH
28241: LD_INT 30
28243: PUSH
28244: LD_INT 0
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 30
28253: PUSH
28254: LD_INT 1
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: LIST
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PPUSH
28270: CALL_OW 72
28274: ST_TO_ADDR
// for i = 1 to hexes do
28275: LD_ADDR_VAR 0 9
28279: PUSH
28280: DOUBLE
28281: LD_INT 1
28283: DEC
28284: ST_TO_ADDR
28285: LD_VAR 0 14
28289: PUSH
28290: FOR_TO
28291: IFFALSE 28979
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28293: LD_ADDR_VAR 0 13
28297: PUSH
28298: LD_VAR 0 14
28302: PUSH
28303: LD_VAR 0 9
28307: ARRAY
28308: PUSH
28309: LD_INT 1
28311: ARRAY
28312: PPUSH
28313: LD_VAR 0 14
28317: PUSH
28318: LD_VAR 0 9
28322: ARRAY
28323: PUSH
28324: LD_INT 2
28326: ARRAY
28327: PPUSH
28328: CALL_OW 428
28332: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28333: LD_VAR 0 14
28337: PUSH
28338: LD_VAR 0 9
28342: ARRAY
28343: PUSH
28344: LD_INT 1
28346: ARRAY
28347: PPUSH
28348: LD_VAR 0 14
28352: PUSH
28353: LD_VAR 0 9
28357: ARRAY
28358: PUSH
28359: LD_INT 2
28361: ARRAY
28362: PPUSH
28363: CALL_OW 351
28367: IFTRUE 28406
28369: PUSH
28370: LD_VAR 0 14
28374: PUSH
28375: LD_VAR 0 9
28379: ARRAY
28380: PUSH
28381: LD_INT 1
28383: ARRAY
28384: PPUSH
28385: LD_VAR 0 14
28389: PUSH
28390: LD_VAR 0 9
28394: ARRAY
28395: PUSH
28396: LD_INT 2
28398: ARRAY
28399: PPUSH
28400: CALL_OW 488
28404: NOT
28405: OR
28406: IFTRUE 28423
28408: PUSH
28409: LD_VAR 0 13
28413: PPUSH
28414: CALL_OW 247
28418: PUSH
28419: LD_INT 3
28421: EQUAL
28422: OR
28423: IFFALSE 28429
// exit ;
28425: POP
28426: POP
28427: GO 28981
// if not tmp then
28429: LD_VAR 0 13
28433: NOT
28434: IFFALSE 28438
// continue ;
28436: GO 28290
// result := true ;
28438: LD_ADDR_VAR 0 8
28442: PUSH
28443: LD_INT 1
28445: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28446: LD_VAR 0 6
28450: IFFALSE 28467
28452: PUSH
28453: LD_VAR 0 13
28457: PPUSH
28458: CALL_OW 247
28462: PUSH
28463: LD_INT 2
28465: EQUAL
28466: AND
28467: IFFALSE 28484
28469: PUSH
28470: LD_VAR 0 13
28474: PPUSH
28475: CALL_OW 263
28479: PUSH
28480: LD_INT 1
28482: EQUAL
28483: AND
28484: IFFALSE 28648
// begin if IsDrivenBy ( tmp ) then
28486: LD_VAR 0 13
28490: PPUSH
28491: CALL_OW 311
28495: IFFALSE 28499
// continue ;
28497: GO 28290
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28499: LD_VAR 0 6
28503: PPUSH
28504: LD_INT 3
28506: PUSH
28507: LD_INT 60
28509: PUSH
28510: EMPTY
28511: LIST
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 3
28519: PUSH
28520: LD_INT 55
28522: PUSH
28523: EMPTY
28524: LIST
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PPUSH
28534: CALL_OW 72
28538: IFFALSE 28646
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28540: LD_ADDR_VAR 0 18
28544: PUSH
28545: LD_VAR 0 6
28549: PPUSH
28550: LD_INT 3
28552: PUSH
28553: LD_INT 60
28555: PUSH
28556: EMPTY
28557: LIST
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 3
28565: PUSH
28566: LD_INT 55
28568: PUSH
28569: EMPTY
28570: LIST
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PPUSH
28580: CALL_OW 72
28584: PUSH
28585: LD_INT 1
28587: ARRAY
28588: ST_TO_ADDR
// if IsInUnit ( driver ) then
28589: LD_VAR 0 18
28593: PPUSH
28594: CALL_OW 310
28598: IFFALSE 28609
// ComExit ( driver ) ;
28600: LD_VAR 0 18
28604: PPUSH
28605: CALL 54252 0 1
// AddComEnterUnit ( driver , tmp ) ;
28609: LD_VAR 0 18
28613: PPUSH
28614: LD_VAR 0 13
28618: PPUSH
28619: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28623: LD_VAR 0 18
28627: PPUSH
28628: LD_VAR 0 7
28632: PPUSH
28633: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28637: LD_VAR 0 18
28641: PPUSH
28642: CALL_OW 181
// end ; continue ;
28646: GO 28290
// end ; if not cleaners or not tmp in cleaners then
28648: LD_VAR 0 6
28652: NOT
28653: IFTRUE 28668
28655: PUSH
28656: LD_VAR 0 13
28660: PUSH
28661: LD_VAR 0 6
28665: IN
28666: NOT
28667: OR
28668: IFFALSE 28977
// begin if dep then
28670: LD_VAR 0 17
28674: IFFALSE 28810
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28676: LD_ADDR_VAR 0 16
28680: PUSH
28681: LD_VAR 0 17
28685: PUSH
28686: LD_INT 1
28688: ARRAY
28689: PPUSH
28690: CALL_OW 250
28694: PPUSH
28695: LD_VAR 0 17
28699: PUSH
28700: LD_INT 1
28702: ARRAY
28703: PPUSH
28704: CALL_OW 254
28708: PPUSH
28709: LD_INT 5
28711: PPUSH
28712: CALL_OW 272
28716: PUSH
28717: LD_VAR 0 17
28721: PUSH
28722: LD_INT 1
28724: ARRAY
28725: PPUSH
28726: CALL_OW 251
28730: PPUSH
28731: LD_VAR 0 17
28735: PUSH
28736: LD_INT 1
28738: ARRAY
28739: PPUSH
28740: CALL_OW 254
28744: PPUSH
28745: LD_INT 5
28747: PPUSH
28748: CALL_OW 273
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28757: LD_VAR 0 16
28761: PUSH
28762: LD_INT 1
28764: ARRAY
28765: PPUSH
28766: LD_VAR 0 16
28770: PUSH
28771: LD_INT 2
28773: ARRAY
28774: PPUSH
28775: CALL_OW 488
28779: IFFALSE 28810
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28781: LD_VAR 0 13
28785: PPUSH
28786: LD_VAR 0 16
28790: PUSH
28791: LD_INT 1
28793: ARRAY
28794: PPUSH
28795: LD_VAR 0 16
28799: PUSH
28800: LD_INT 2
28802: ARRAY
28803: PPUSH
28804: CALL_OW 111
// continue ;
28808: GO 28290
// end ; end ; r := GetDir ( tmp ) ;
28810: LD_ADDR_VAR 0 15
28814: PUSH
28815: LD_VAR 0 13
28819: PPUSH
28820: CALL_OW 254
28824: ST_TO_ADDR
// if r = 5 then
28825: LD_VAR 0 15
28829: PUSH
28830: LD_INT 5
28832: EQUAL
28833: IFFALSE 28843
// r := 0 ;
28835: LD_ADDR_VAR 0 15
28839: PUSH
28840: LD_INT 0
28842: ST_TO_ADDR
// for j = r to 5 do
28843: LD_ADDR_VAR 0 10
28847: PUSH
28848: DOUBLE
28849: LD_VAR 0 15
28853: DEC
28854: ST_TO_ADDR
28855: LD_INT 5
28857: PUSH
28858: FOR_TO
28859: IFFALSE 28975
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28861: LD_ADDR_VAR 0 11
28865: PUSH
28866: LD_VAR 0 13
28870: PPUSH
28871: CALL_OW 250
28875: PPUSH
28876: LD_VAR 0 10
28880: PPUSH
28881: LD_INT 2
28883: PPUSH
28884: CALL_OW 272
28888: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28889: LD_ADDR_VAR 0 12
28893: PUSH
28894: LD_VAR 0 13
28898: PPUSH
28899: CALL_OW 251
28903: PPUSH
28904: LD_VAR 0 10
28908: PPUSH
28909: LD_INT 2
28911: PPUSH
28912: CALL_OW 273
28916: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28917: LD_VAR 0 11
28921: PPUSH
28922: LD_VAR 0 12
28926: PPUSH
28927: CALL_OW 488
28931: IFFALSE 28950
28933: PUSH
28934: LD_VAR 0 11
28938: PPUSH
28939: LD_VAR 0 12
28943: PPUSH
28944: CALL_OW 428
28948: NOT
28949: AND
28950: IFFALSE 28973
// begin ComMoveXY ( tmp , _x , _y ) ;
28952: LD_VAR 0 13
28956: PPUSH
28957: LD_VAR 0 11
28961: PPUSH
28962: LD_VAR 0 12
28966: PPUSH
28967: CALL_OW 111
// break ;
28971: GO 28975
// end ; end ;
28973: GO 28858
28975: POP
28976: POP
// end ; end ;
28977: GO 28290
28979: POP
28980: POP
// end ;
28981: LD_VAR 0 8
28985: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28986: LD_INT 0
28988: PPUSH
// result := true ;
28989: LD_ADDR_VAR 0 3
28993: PUSH
28994: LD_INT 1
28996: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28997: LD_VAR 0 2
29001: PUSH
29002: LD_INT 24
29004: DOUBLE
29005: EQUAL
29006: IFTRUE 29016
29008: LD_INT 33
29010: DOUBLE
29011: EQUAL
29012: IFTRUE 29016
29014: GO 29041
29016: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29017: LD_ADDR_VAR 0 3
29021: PUSH
29022: LD_INT 32
29024: PPUSH
29025: LD_VAR 0 1
29029: PPUSH
29030: CALL_OW 321
29034: PUSH
29035: LD_INT 2
29037: EQUAL
29038: ST_TO_ADDR
29039: GO 29357
29041: LD_INT 20
29043: DOUBLE
29044: EQUAL
29045: IFTRUE 29049
29047: GO 29074
29049: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29050: LD_ADDR_VAR 0 3
29054: PUSH
29055: LD_INT 6
29057: PPUSH
29058: LD_VAR 0 1
29062: PPUSH
29063: CALL_OW 321
29067: PUSH
29068: LD_INT 2
29070: EQUAL
29071: ST_TO_ADDR
29072: GO 29357
29074: LD_INT 22
29076: DOUBLE
29077: EQUAL
29078: IFTRUE 29088
29080: LD_INT 36
29082: DOUBLE
29083: EQUAL
29084: IFTRUE 29088
29086: GO 29113
29088: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29089: LD_ADDR_VAR 0 3
29093: PUSH
29094: LD_INT 15
29096: PPUSH
29097: LD_VAR 0 1
29101: PPUSH
29102: CALL_OW 321
29106: PUSH
29107: LD_INT 2
29109: EQUAL
29110: ST_TO_ADDR
29111: GO 29357
29113: LD_INT 30
29115: DOUBLE
29116: EQUAL
29117: IFTRUE 29121
29119: GO 29146
29121: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29122: LD_ADDR_VAR 0 3
29126: PUSH
29127: LD_INT 20
29129: PPUSH
29130: LD_VAR 0 1
29134: PPUSH
29135: CALL_OW 321
29139: PUSH
29140: LD_INT 2
29142: EQUAL
29143: ST_TO_ADDR
29144: GO 29357
29146: LD_INT 28
29148: DOUBLE
29149: EQUAL
29150: IFTRUE 29160
29152: LD_INT 21
29154: DOUBLE
29155: EQUAL
29156: IFTRUE 29160
29158: GO 29185
29160: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29161: LD_ADDR_VAR 0 3
29165: PUSH
29166: LD_INT 21
29168: PPUSH
29169: LD_VAR 0 1
29173: PPUSH
29174: CALL_OW 321
29178: PUSH
29179: LD_INT 2
29181: EQUAL
29182: ST_TO_ADDR
29183: GO 29357
29185: LD_INT 16
29187: DOUBLE
29188: EQUAL
29189: IFTRUE 29193
29191: GO 29218
29193: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29194: LD_ADDR_VAR 0 3
29198: PUSH
29199: LD_INT 84
29201: PPUSH
29202: LD_VAR 0 1
29206: PPUSH
29207: CALL_OW 321
29211: PUSH
29212: LD_INT 2
29214: EQUAL
29215: ST_TO_ADDR
29216: GO 29357
29218: LD_INT 19
29220: DOUBLE
29221: EQUAL
29222: IFTRUE 29232
29224: LD_INT 23
29226: DOUBLE
29227: EQUAL
29228: IFTRUE 29232
29230: GO 29257
29232: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29233: LD_ADDR_VAR 0 3
29237: PUSH
29238: LD_INT 83
29240: PPUSH
29241: LD_VAR 0 1
29245: PPUSH
29246: CALL_OW 321
29250: PUSH
29251: LD_INT 2
29253: EQUAL
29254: ST_TO_ADDR
29255: GO 29357
29257: LD_INT 17
29259: DOUBLE
29260: EQUAL
29261: IFTRUE 29265
29263: GO 29290
29265: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29266: LD_ADDR_VAR 0 3
29270: PUSH
29271: LD_INT 39
29273: PPUSH
29274: LD_VAR 0 1
29278: PPUSH
29279: CALL_OW 321
29283: PUSH
29284: LD_INT 2
29286: EQUAL
29287: ST_TO_ADDR
29288: GO 29357
29290: LD_INT 18
29292: DOUBLE
29293: EQUAL
29294: IFTRUE 29298
29296: GO 29323
29298: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29299: LD_ADDR_VAR 0 3
29303: PUSH
29304: LD_INT 40
29306: PPUSH
29307: LD_VAR 0 1
29311: PPUSH
29312: CALL_OW 321
29316: PUSH
29317: LD_INT 2
29319: EQUAL
29320: ST_TO_ADDR
29321: GO 29357
29323: LD_INT 27
29325: DOUBLE
29326: EQUAL
29327: IFTRUE 29331
29329: GO 29356
29331: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29332: LD_ADDR_VAR 0 3
29336: PUSH
29337: LD_INT 35
29339: PPUSH
29340: LD_VAR 0 1
29344: PPUSH
29345: CALL_OW 321
29349: PUSH
29350: LD_INT 2
29352: EQUAL
29353: ST_TO_ADDR
29354: GO 29357
29356: POP
// end ;
29357: LD_VAR 0 3
29361: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29362: LD_INT 0
29364: PPUSH
29365: PPUSH
29366: PPUSH
29367: PPUSH
29368: PPUSH
29369: PPUSH
29370: PPUSH
29371: PPUSH
29372: PPUSH
29373: PPUSH
29374: PPUSH
// result := false ;
29375: LD_ADDR_VAR 0 6
29379: PUSH
29380: LD_INT 0
29382: ST_TO_ADDR
// if btype = b_depot then
29383: LD_VAR 0 2
29387: PUSH
29388: LD_INT 0
29390: EQUAL
29391: IFFALSE 29403
// begin result := true ;
29393: LD_ADDR_VAR 0 6
29397: PUSH
29398: LD_INT 1
29400: ST_TO_ADDR
// exit ;
29401: GO 30257
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29403: LD_VAR 0 1
29407: NOT
29408: IFTRUE 29433
29410: PUSH
29411: LD_VAR 0 1
29415: PPUSH
29416: CALL_OW 266
29420: PUSH
29421: LD_INT 0
29423: PUSH
29424: LD_INT 1
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: IN
29431: NOT
29432: OR
29433: IFTRUE 29442
29435: PUSH
29436: LD_VAR 0 2
29440: NOT
29441: OR
29442: IFTRUE 29478
29444: PUSH
29445: LD_VAR 0 5
29449: PUSH
29450: LD_INT 0
29452: PUSH
29453: LD_INT 1
29455: PUSH
29456: LD_INT 2
29458: PUSH
29459: LD_INT 3
29461: PUSH
29462: LD_INT 4
29464: PUSH
29465: LD_INT 5
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: IN
29476: NOT
29477: OR
29478: IFTRUE 29497
29480: PUSH
29481: LD_VAR 0 3
29485: PPUSH
29486: LD_VAR 0 4
29490: PPUSH
29491: CALL_OW 488
29495: NOT
29496: OR
29497: IFFALSE 29501
// exit ;
29499: GO 30257
// side := GetSide ( depot ) ;
29501: LD_ADDR_VAR 0 9
29505: PUSH
29506: LD_VAR 0 1
29510: PPUSH
29511: CALL_OW 255
29515: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29516: LD_VAR 0 9
29520: PPUSH
29521: LD_VAR 0 2
29525: PPUSH
29526: CALL 28986 0 2
29530: NOT
29531: IFFALSE 29535
// exit ;
29533: GO 30257
// pom := GetBase ( depot ) ;
29535: LD_ADDR_VAR 0 10
29539: PUSH
29540: LD_VAR 0 1
29544: PPUSH
29545: CALL_OW 274
29549: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29550: LD_ADDR_VAR 0 11
29554: PUSH
29555: LD_VAR 0 2
29559: PPUSH
29560: LD_VAR 0 1
29564: PPUSH
29565: CALL_OW 248
29569: PPUSH
29570: CALL_OW 450
29574: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29575: LD_VAR 0 10
29579: PPUSH
29580: LD_INT 1
29582: PPUSH
29583: CALL_OW 275
29587: PUSH
29588: LD_VAR 0 11
29592: PUSH
29593: LD_INT 1
29595: ARRAY
29596: GREATEREQUAL
29597: IFFALSE 29623
29599: PUSH
29600: LD_VAR 0 10
29604: PPUSH
29605: LD_INT 2
29607: PPUSH
29608: CALL_OW 275
29612: PUSH
29613: LD_VAR 0 11
29617: PUSH
29618: LD_INT 2
29620: ARRAY
29621: GREATEREQUAL
29622: AND
29623: IFFALSE 29649
29625: PUSH
29626: LD_VAR 0 10
29630: PPUSH
29631: LD_INT 3
29633: PPUSH
29634: CALL_OW 275
29638: PUSH
29639: LD_VAR 0 11
29643: PUSH
29644: LD_INT 3
29646: ARRAY
29647: GREATEREQUAL
29648: AND
29649: NOT
29650: IFFALSE 29654
// exit ;
29652: GO 30257
// if GetBType ( depot ) = b_depot then
29654: LD_VAR 0 1
29658: PPUSH
29659: CALL_OW 266
29663: PUSH
29664: LD_INT 0
29666: EQUAL
29667: IFFALSE 29679
// dist := 28 else
29669: LD_ADDR_VAR 0 14
29673: PUSH
29674: LD_INT 28
29676: ST_TO_ADDR
29677: GO 29687
// dist := 36 ;
29679: LD_ADDR_VAR 0 14
29683: PUSH
29684: LD_INT 36
29686: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29687: LD_VAR 0 1
29691: PPUSH
29692: LD_VAR 0 3
29696: PPUSH
29697: LD_VAR 0 4
29701: PPUSH
29702: CALL_OW 297
29706: PUSH
29707: LD_VAR 0 14
29711: GREATER
29712: IFFALSE 29716
// exit ;
29714: GO 30257
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29716: LD_ADDR_VAR 0 12
29720: PUSH
29721: LD_VAR 0 2
29725: PPUSH
29726: LD_VAR 0 3
29730: PPUSH
29731: LD_VAR 0 4
29735: PPUSH
29736: LD_VAR 0 5
29740: PPUSH
29741: LD_VAR 0 1
29745: PPUSH
29746: CALL_OW 248
29750: PPUSH
29751: LD_INT 0
29753: PPUSH
29754: CALL 30262 0 6
29758: ST_TO_ADDR
// if not hexes then
29759: LD_VAR 0 12
29763: NOT
29764: IFFALSE 29768
// exit ;
29766: GO 30257
// hex := GetHexInfo ( x , y ) ;
29768: LD_ADDR_VAR 0 15
29772: PUSH
29773: LD_VAR 0 3
29777: PPUSH
29778: LD_VAR 0 4
29782: PPUSH
29783: CALL_OW 546
29787: ST_TO_ADDR
// if hex [ 1 ] then
29788: LD_VAR 0 15
29792: PUSH
29793: LD_INT 1
29795: ARRAY
29796: IFFALSE 29800
// exit ;
29798: GO 30257
// height := hex [ 2 ] ;
29800: LD_ADDR_VAR 0 13
29804: PUSH
29805: LD_VAR 0 15
29809: PUSH
29810: LD_INT 2
29812: ARRAY
29813: ST_TO_ADDR
// for i = 1 to hexes do
29814: LD_ADDR_VAR 0 7
29818: PUSH
29819: DOUBLE
29820: LD_INT 1
29822: DEC
29823: ST_TO_ADDR
29824: LD_VAR 0 12
29828: PUSH
29829: FOR_TO
29830: IFFALSE 30174
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29832: LD_VAR 0 12
29836: PUSH
29837: LD_VAR 0 7
29841: ARRAY
29842: PUSH
29843: LD_INT 1
29845: ARRAY
29846: PPUSH
29847: LD_VAR 0 12
29851: PUSH
29852: LD_VAR 0 7
29856: ARRAY
29857: PUSH
29858: LD_INT 2
29860: ARRAY
29861: PPUSH
29862: CALL_OW 488
29866: NOT
29867: IFTRUE 29909
29869: PUSH
29870: LD_VAR 0 12
29874: PUSH
29875: LD_VAR 0 7
29879: ARRAY
29880: PUSH
29881: LD_INT 1
29883: ARRAY
29884: PPUSH
29885: LD_VAR 0 12
29889: PUSH
29890: LD_VAR 0 7
29894: ARRAY
29895: PUSH
29896: LD_INT 2
29898: ARRAY
29899: PPUSH
29900: CALL_OW 428
29904: PUSH
29905: LD_INT 0
29907: GREATER
29908: OR
29909: IFTRUE 29947
29911: PUSH
29912: LD_VAR 0 12
29916: PUSH
29917: LD_VAR 0 7
29921: ARRAY
29922: PUSH
29923: LD_INT 1
29925: ARRAY
29926: PPUSH
29927: LD_VAR 0 12
29931: PUSH
29932: LD_VAR 0 7
29936: ARRAY
29937: PUSH
29938: LD_INT 2
29940: ARRAY
29941: PPUSH
29942: CALL_OW 351
29946: OR
29947: IFFALSE 29953
// exit ;
29949: POP
29950: POP
29951: GO 30257
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29953: LD_ADDR_VAR 0 8
29957: PUSH
29958: LD_VAR 0 12
29962: PUSH
29963: LD_VAR 0 7
29967: ARRAY
29968: PUSH
29969: LD_INT 1
29971: ARRAY
29972: PPUSH
29973: LD_VAR 0 12
29977: PUSH
29978: LD_VAR 0 7
29982: ARRAY
29983: PUSH
29984: LD_INT 2
29986: ARRAY
29987: PPUSH
29988: CALL_OW 546
29992: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29993: LD_VAR 0 8
29997: PUSH
29998: LD_INT 1
30000: ARRAY
30001: IFTRUE 30023
30003: PUSH
30004: LD_VAR 0 8
30008: PUSH
30009: LD_INT 2
30011: ARRAY
30012: PUSH
30013: LD_VAR 0 13
30017: PUSH
30018: LD_INT 2
30020: PLUS
30021: GREATER
30022: OR
30023: IFTRUE 30045
30025: PUSH
30026: LD_VAR 0 8
30030: PUSH
30031: LD_INT 2
30033: ARRAY
30034: PUSH
30035: LD_VAR 0 13
30039: PUSH
30040: LD_INT 2
30042: MINUS
30043: LESS
30044: OR
30045: IFTRUE 30113
30047: PUSH
30048: LD_VAR 0 8
30052: PUSH
30053: LD_INT 3
30055: ARRAY
30056: PUSH
30057: LD_INT 0
30059: PUSH
30060: LD_INT 8
30062: PUSH
30063: LD_INT 9
30065: PUSH
30066: LD_INT 10
30068: PUSH
30069: LD_INT 11
30071: PUSH
30072: LD_INT 12
30074: PUSH
30075: LD_INT 13
30077: PUSH
30078: LD_INT 16
30080: PUSH
30081: LD_INT 17
30083: PUSH
30084: LD_INT 18
30086: PUSH
30087: LD_INT 19
30089: PUSH
30090: LD_INT 20
30092: PUSH
30093: LD_INT 21
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: IN
30111: NOT
30112: OR
30113: IFTRUE 30126
30115: PUSH
30116: LD_VAR 0 8
30120: PUSH
30121: LD_INT 5
30123: ARRAY
30124: NOT
30125: OR
30126: IFTRUE 30166
30128: PUSH
30129: LD_VAR 0 8
30133: PUSH
30134: LD_INT 6
30136: ARRAY
30137: PUSH
30138: LD_INT 1
30140: PUSH
30141: LD_INT 2
30143: PUSH
30144: LD_INT 7
30146: PUSH
30147: LD_INT 9
30149: PUSH
30150: LD_INT 10
30152: PUSH
30153: LD_INT 11
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: IN
30164: NOT
30165: OR
30166: IFFALSE 30172
// exit ;
30168: POP
30169: POP
30170: GO 30257
// end ;
30172: GO 29829
30174: POP
30175: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30176: LD_VAR 0 9
30180: PPUSH
30181: LD_VAR 0 3
30185: PPUSH
30186: LD_VAR 0 4
30190: PPUSH
30191: LD_INT 20
30193: PPUSH
30194: CALL 22076 0 4
30198: PUSH
30199: LD_INT 4
30201: ARRAY
30202: IFFALSE 30206
// exit ;
30204: GO 30257
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30206: LD_VAR 0 2
30210: PUSH
30211: LD_INT 29
30213: PUSH
30214: LD_INT 30
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: IN
30221: IFFALSE 30245
30223: PUSH
30224: LD_VAR 0 3
30228: PPUSH
30229: LD_VAR 0 4
30233: PPUSH
30234: LD_VAR 0 9
30238: PPUSH
30239: CALL_OW 440
30243: NOT
30244: AND
30245: IFFALSE 30249
// exit ;
30247: GO 30257
// result := true ;
30249: LD_ADDR_VAR 0 6
30253: PUSH
30254: LD_INT 1
30256: ST_TO_ADDR
// end ;
30257: LD_VAR 0 6
30261: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30262: LD_INT 0
30264: PPUSH
30265: PPUSH
30266: PPUSH
30267: PPUSH
30268: PPUSH
30269: PPUSH
30270: PPUSH
30271: PPUSH
30272: PPUSH
30273: PPUSH
30274: PPUSH
30275: PPUSH
30276: PPUSH
30277: PPUSH
30278: PPUSH
30279: PPUSH
30280: PPUSH
30281: PPUSH
30282: PPUSH
30283: PPUSH
30284: PPUSH
30285: PPUSH
30286: PPUSH
30287: PPUSH
30288: PPUSH
30289: PPUSH
30290: PPUSH
30291: PPUSH
30292: PPUSH
30293: PPUSH
30294: PPUSH
30295: PPUSH
30296: PPUSH
30297: PPUSH
30298: PPUSH
30299: PPUSH
30300: PPUSH
30301: PPUSH
30302: PPUSH
30303: PPUSH
30304: PPUSH
30305: PPUSH
30306: PPUSH
30307: PPUSH
30308: PPUSH
30309: PPUSH
30310: PPUSH
30311: PPUSH
30312: PPUSH
30313: PPUSH
30314: PPUSH
30315: PPUSH
30316: PPUSH
30317: PPUSH
30318: PPUSH
30319: PPUSH
30320: PPUSH
30321: PPUSH
// result = [ ] ;
30322: LD_ADDR_VAR 0 7
30326: PUSH
30327: EMPTY
30328: ST_TO_ADDR
// temp_list = [ ] ;
30329: LD_ADDR_VAR 0 9
30333: PUSH
30334: EMPTY
30335: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30336: LD_VAR 0 4
30340: PUSH
30341: LD_INT 0
30343: PUSH
30344: LD_INT 1
30346: PUSH
30347: LD_INT 2
30349: PUSH
30350: LD_INT 3
30352: PUSH
30353: LD_INT 4
30355: PUSH
30356: LD_INT 5
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: IN
30367: NOT
30368: IFTRUE 30411
30370: PUSH
30371: LD_VAR 0 1
30375: PUSH
30376: LD_INT 0
30378: PUSH
30379: LD_INT 1
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: IN
30386: IFFALSE 30410
30388: PUSH
30389: LD_VAR 0 5
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: LD_INT 2
30399: PUSH
30400: LD_INT 3
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: LIST
30407: IN
30408: NOT
30409: AND
30410: OR
30411: IFFALSE 30415
// exit ;
30413: GO 48814
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30415: LD_VAR 0 1
30419: PUSH
30420: LD_INT 6
30422: PUSH
30423: LD_INT 7
30425: PUSH
30426: LD_INT 8
30428: PUSH
30429: LD_INT 13
30431: PUSH
30432: LD_INT 12
30434: PUSH
30435: LD_INT 15
30437: PUSH
30438: LD_INT 11
30440: PUSH
30441: LD_INT 14
30443: PUSH
30444: LD_INT 10
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: IN
30458: IFFALSE 30468
// btype = b_lab ;
30460: LD_ADDR_VAR 0 1
30464: PUSH
30465: LD_INT 6
30467: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30468: LD_VAR 0 6
30472: PUSH
30473: LD_INT 0
30475: PUSH
30476: LD_INT 1
30478: PUSH
30479: LD_INT 2
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: LIST
30486: IN
30487: NOT
30488: IFTRUE 30556
30490: PUSH
30491: LD_VAR 0 1
30495: PUSH
30496: LD_INT 0
30498: PUSH
30499: LD_INT 1
30501: PUSH
30502: LD_INT 2
30504: PUSH
30505: LD_INT 3
30507: PUSH
30508: LD_INT 6
30510: PUSH
30511: LD_INT 36
30513: PUSH
30514: LD_INT 4
30516: PUSH
30517: LD_INT 5
30519: PUSH
30520: LD_INT 31
30522: PUSH
30523: LD_INT 32
30525: PUSH
30526: LD_INT 33
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: IN
30542: NOT
30543: IFFALSE 30555
30545: PUSH
30546: LD_VAR 0 6
30550: PUSH
30551: LD_INT 1
30553: EQUAL
30554: AND
30555: OR
30556: IFTRUE 30588
30558: PUSH
30559: LD_VAR 0 1
30563: PUSH
30564: LD_INT 2
30566: PUSH
30567: LD_INT 3
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: IN
30574: NOT
30575: IFFALSE 30587
30577: PUSH
30578: LD_VAR 0 6
30582: PUSH
30583: LD_INT 2
30585: EQUAL
30586: AND
30587: OR
30588: IFFALSE 30598
// mode = 0 ;
30590: LD_ADDR_VAR 0 6
30594: PUSH
30595: LD_INT 0
30597: ST_TO_ADDR
// case mode of 0 :
30598: LD_VAR 0 6
30602: PUSH
30603: LD_INT 0
30605: DOUBLE
30606: EQUAL
30607: IFTRUE 30611
30609: GO 42064
30611: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30612: LD_ADDR_VAR 0 11
30616: PUSH
30617: LD_INT 0
30619: PUSH
30620: LD_INT 0
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 0
30629: PUSH
30630: LD_INT 1
30632: NEG
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 1
30640: PUSH
30641: LD_INT 0
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 1
30650: PUSH
30651: LD_INT 1
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 0
30660: PUSH
30661: LD_INT 1
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 1
30670: NEG
30671: PUSH
30672: LD_INT 0
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 1
30681: NEG
30682: PUSH
30683: LD_INT 1
30685: NEG
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 1
30693: NEG
30694: PUSH
30695: LD_INT 2
30697: NEG
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 0
30705: PUSH
30706: LD_INT 2
30708: NEG
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 1
30716: PUSH
30717: LD_INT 1
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 1
30727: PUSH
30728: LD_INT 2
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 0
30737: PUSH
30738: LD_INT 2
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 1
30747: NEG
30748: PUSH
30749: LD_INT 1
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 1
30758: PUSH
30759: LD_INT 3
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 0
30768: PUSH
30769: LD_INT 3
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 1
30778: NEG
30779: PUSH
30780: LD_INT 2
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30805: LD_ADDR_VAR 0 12
30809: PUSH
30810: LD_INT 0
30812: PUSH
30813: LD_INT 0
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 0
30822: PUSH
30823: LD_INT 1
30825: NEG
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 1
30833: PUSH
30834: LD_INT 0
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 1
30843: PUSH
30844: LD_INT 1
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 0
30853: PUSH
30854: LD_INT 1
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 1
30863: NEG
30864: PUSH
30865: LD_INT 0
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 1
30874: NEG
30875: PUSH
30876: LD_INT 1
30878: NEG
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 1
30886: PUSH
30887: LD_INT 1
30889: NEG
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 2
30897: PUSH
30898: LD_INT 0
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 2
30907: PUSH
30908: LD_INT 1
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 1
30917: NEG
30918: PUSH
30919: LD_INT 1
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 2
30928: NEG
30929: PUSH
30930: LD_INT 0
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 2
30939: NEG
30940: PUSH
30941: LD_INT 1
30943: NEG
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 2
30951: NEG
30952: PUSH
30953: LD_INT 1
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 3
30962: NEG
30963: PUSH
30964: LD_INT 0
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 3
30973: NEG
30974: PUSH
30975: LD_INT 1
30977: NEG
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31001: LD_ADDR_VAR 0 13
31005: PUSH
31006: LD_INT 0
31008: PUSH
31009: LD_INT 0
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 0
31018: PUSH
31019: LD_INT 1
31021: NEG
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 1
31029: PUSH
31030: LD_INT 0
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 1
31039: PUSH
31040: LD_INT 1
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 0
31049: PUSH
31050: LD_INT 1
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 1
31059: NEG
31060: PUSH
31061: LD_INT 0
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 1
31070: NEG
31071: PUSH
31072: LD_INT 1
31074: NEG
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 1
31082: NEG
31083: PUSH
31084: LD_INT 2
31086: NEG
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 2
31094: PUSH
31095: LD_INT 1
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 2
31104: PUSH
31105: LD_INT 2
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: LD_INT 2
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 2
31124: NEG
31125: PUSH
31126: LD_INT 1
31128: NEG
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 2
31136: NEG
31137: PUSH
31138: LD_INT 2
31140: NEG
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 2
31148: NEG
31149: PUSH
31150: LD_INT 3
31152: NEG
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 3
31160: NEG
31161: PUSH
31162: LD_INT 2
31164: NEG
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 3
31172: NEG
31173: PUSH
31174: LD_INT 3
31176: NEG
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31200: LD_ADDR_VAR 0 14
31204: PUSH
31205: LD_INT 0
31207: PUSH
31208: LD_INT 0
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 0
31217: PUSH
31218: LD_INT 1
31220: NEG
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 1
31228: PUSH
31229: LD_INT 0
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 1
31238: PUSH
31239: LD_INT 1
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 0
31248: PUSH
31249: LD_INT 1
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 1
31258: NEG
31259: PUSH
31260: LD_INT 0
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 1
31269: NEG
31270: PUSH
31271: LD_INT 1
31273: NEG
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 1
31281: NEG
31282: PUSH
31283: LD_INT 2
31285: NEG
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 0
31293: PUSH
31294: LD_INT 2
31296: NEG
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 1
31304: PUSH
31305: LD_INT 1
31307: NEG
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 1
31315: PUSH
31316: LD_INT 2
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 0
31325: PUSH
31326: LD_INT 2
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 1
31335: NEG
31336: PUSH
31337: LD_INT 1
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 1
31346: NEG
31347: PUSH
31348: LD_INT 3
31350: NEG
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 0
31358: PUSH
31359: LD_INT 3
31361: NEG
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 1
31369: PUSH
31370: LD_INT 2
31372: NEG
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31396: LD_ADDR_VAR 0 15
31400: PUSH
31401: LD_INT 0
31403: PUSH
31404: LD_INT 0
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 0
31413: PUSH
31414: LD_INT 1
31416: NEG
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 1
31424: PUSH
31425: LD_INT 0
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 1
31434: PUSH
31435: LD_INT 1
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 0
31444: PUSH
31445: LD_INT 1
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 1
31454: NEG
31455: PUSH
31456: LD_INT 0
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 1
31465: NEG
31466: PUSH
31467: LD_INT 1
31469: NEG
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 1
31477: PUSH
31478: LD_INT 1
31480: NEG
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 2
31488: PUSH
31489: LD_INT 0
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 2
31498: PUSH
31499: LD_INT 1
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 1
31508: NEG
31509: PUSH
31510: LD_INT 1
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 2
31519: NEG
31520: PUSH
31521: LD_INT 0
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 2
31530: NEG
31531: PUSH
31532: LD_INT 1
31534: NEG
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 2
31542: PUSH
31543: LD_INT 1
31545: NEG
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 3
31553: PUSH
31554: LD_INT 0
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 3
31563: PUSH
31564: LD_INT 1
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31589: LD_ADDR_VAR 0 16
31593: PUSH
31594: LD_INT 0
31596: PUSH
31597: LD_INT 0
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 0
31606: PUSH
31607: LD_INT 1
31609: NEG
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 1
31617: PUSH
31618: LD_INT 0
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 1
31627: PUSH
31628: LD_INT 1
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 0
31637: PUSH
31638: LD_INT 1
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 1
31647: NEG
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 1
31658: NEG
31659: PUSH
31660: LD_INT 1
31662: NEG
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 1
31670: NEG
31671: PUSH
31672: LD_INT 2
31674: NEG
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 2
31682: PUSH
31683: LD_INT 1
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 2
31692: PUSH
31693: LD_INT 2
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: LD_INT 2
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 2
31712: NEG
31713: PUSH
31714: LD_INT 1
31716: NEG
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: LD_INT 2
31724: NEG
31725: PUSH
31726: LD_INT 2
31728: NEG
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 3
31736: PUSH
31737: LD_INT 2
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 3
31746: PUSH
31747: LD_INT 3
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 2
31756: PUSH
31757: LD_INT 3
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31782: LD_ADDR_VAR 0 17
31786: PUSH
31787: LD_INT 0
31789: PUSH
31790: LD_INT 0
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 0
31799: PUSH
31800: LD_INT 1
31802: NEG
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 1
31810: PUSH
31811: LD_INT 0
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 1
31820: PUSH
31821: LD_INT 1
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 0
31830: PUSH
31831: LD_INT 1
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 1
31840: NEG
31841: PUSH
31842: LD_INT 0
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 1
31851: NEG
31852: PUSH
31853: LD_INT 1
31855: NEG
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 1
31863: NEG
31864: PUSH
31865: LD_INT 2
31867: NEG
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 0
31875: PUSH
31876: LD_INT 2
31878: NEG
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 1
31886: PUSH
31887: LD_INT 1
31889: NEG
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 2
31897: PUSH
31898: LD_INT 0
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 2
31907: PUSH
31908: LD_INT 1
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 2
31917: PUSH
31918: LD_INT 2
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 1
31927: PUSH
31928: LD_INT 2
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 0
31937: PUSH
31938: LD_INT 2
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 1
31947: NEG
31948: PUSH
31949: LD_INT 1
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 2
31958: NEG
31959: PUSH
31960: LD_INT 0
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 2
31969: NEG
31970: PUSH
31971: LD_INT 1
31973: NEG
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 2
31981: NEG
31982: PUSH
31983: LD_INT 2
31985: NEG
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32012: LD_ADDR_VAR 0 18
32016: PUSH
32017: LD_INT 0
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 0
32029: PUSH
32030: LD_INT 1
32032: NEG
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 1
32040: PUSH
32041: LD_INT 0
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 1
32050: PUSH
32051: LD_INT 1
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 0
32060: PUSH
32061: LD_INT 1
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 1
32070: NEG
32071: PUSH
32072: LD_INT 0
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 1
32081: NEG
32082: PUSH
32083: LD_INT 1
32085: NEG
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 1
32093: NEG
32094: PUSH
32095: LD_INT 2
32097: NEG
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 0
32105: PUSH
32106: LD_INT 2
32108: NEG
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 1
32116: PUSH
32117: LD_INT 1
32119: NEG
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 2
32127: PUSH
32128: LD_INT 0
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 2
32137: PUSH
32138: LD_INT 1
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 2
32147: PUSH
32148: LD_INT 2
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 1
32157: PUSH
32158: LD_INT 2
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 0
32167: PUSH
32168: LD_INT 2
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 1
32177: NEG
32178: PUSH
32179: LD_INT 1
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 2
32188: NEG
32189: PUSH
32190: LD_INT 0
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 2
32199: NEG
32200: PUSH
32201: LD_INT 1
32203: NEG
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 2
32211: NEG
32212: PUSH
32213: LD_INT 2
32215: NEG
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32242: LD_ADDR_VAR 0 19
32246: PUSH
32247: LD_INT 0
32249: PUSH
32250: LD_INT 0
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 0
32259: PUSH
32260: LD_INT 1
32262: NEG
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 1
32270: PUSH
32271: LD_INT 0
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 1
32280: PUSH
32281: LD_INT 1
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 0
32290: PUSH
32291: LD_INT 1
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 1
32300: NEG
32301: PUSH
32302: LD_INT 0
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 1
32311: NEG
32312: PUSH
32313: LD_INT 1
32315: NEG
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 1
32323: NEG
32324: PUSH
32325: LD_INT 2
32327: NEG
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 0
32335: PUSH
32336: LD_INT 2
32338: NEG
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 1
32346: PUSH
32347: LD_INT 1
32349: NEG
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 2
32357: PUSH
32358: LD_INT 0
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 2
32367: PUSH
32368: LD_INT 1
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 2
32377: PUSH
32378: LD_INT 2
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 1
32387: PUSH
32388: LD_INT 2
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 0
32397: PUSH
32398: LD_INT 2
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 1
32407: NEG
32408: PUSH
32409: LD_INT 1
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 2
32418: NEG
32419: PUSH
32420: LD_INT 0
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 2
32429: NEG
32430: PUSH
32431: LD_INT 1
32433: NEG
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 2
32441: NEG
32442: PUSH
32443: LD_INT 2
32445: NEG
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32472: LD_ADDR_VAR 0 20
32476: PUSH
32477: LD_INT 0
32479: PUSH
32480: LD_INT 0
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 0
32489: PUSH
32490: LD_INT 1
32492: NEG
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 1
32500: PUSH
32501: LD_INT 0
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 1
32510: PUSH
32511: LD_INT 1
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 0
32520: PUSH
32521: LD_INT 1
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 1
32530: NEG
32531: PUSH
32532: LD_INT 0
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 1
32541: NEG
32542: PUSH
32543: LD_INT 1
32545: NEG
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 1
32553: NEG
32554: PUSH
32555: LD_INT 2
32557: NEG
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 0
32565: PUSH
32566: LD_INT 2
32568: NEG
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 1
32576: PUSH
32577: LD_INT 1
32579: NEG
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 2
32587: PUSH
32588: LD_INT 0
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 2
32597: PUSH
32598: LD_INT 1
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 2
32607: PUSH
32608: LD_INT 2
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 1
32617: PUSH
32618: LD_INT 2
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 0
32627: PUSH
32628: LD_INT 2
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 1
32637: NEG
32638: PUSH
32639: LD_INT 1
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 2
32648: NEG
32649: PUSH
32650: LD_INT 0
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 2
32659: NEG
32660: PUSH
32661: LD_INT 1
32663: NEG
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 2
32671: NEG
32672: PUSH
32673: LD_INT 2
32675: NEG
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32702: LD_ADDR_VAR 0 21
32706: PUSH
32707: LD_INT 0
32709: PUSH
32710: LD_INT 0
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 0
32719: PUSH
32720: LD_INT 1
32722: NEG
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 1
32730: PUSH
32731: LD_INT 0
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 1
32740: PUSH
32741: LD_INT 1
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 0
32750: PUSH
32751: LD_INT 1
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 1
32760: NEG
32761: PUSH
32762: LD_INT 0
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 1
32771: NEG
32772: PUSH
32773: LD_INT 1
32775: NEG
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 1
32783: NEG
32784: PUSH
32785: LD_INT 2
32787: NEG
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 0
32795: PUSH
32796: LD_INT 2
32798: NEG
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 1
32806: PUSH
32807: LD_INT 1
32809: NEG
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 2
32817: PUSH
32818: LD_INT 0
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 2
32827: PUSH
32828: LD_INT 1
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 2
32837: PUSH
32838: LD_INT 2
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 1
32847: PUSH
32848: LD_INT 2
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 0
32857: PUSH
32858: LD_INT 2
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 1
32867: NEG
32868: PUSH
32869: LD_INT 1
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 2
32878: NEG
32879: PUSH
32880: LD_INT 0
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 2
32889: NEG
32890: PUSH
32891: LD_INT 1
32893: NEG
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 2
32901: NEG
32902: PUSH
32903: LD_INT 2
32905: NEG
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32932: LD_ADDR_VAR 0 22
32936: PUSH
32937: LD_INT 0
32939: PUSH
32940: LD_INT 0
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 0
32949: PUSH
32950: LD_INT 1
32952: NEG
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 1
32960: PUSH
32961: LD_INT 0
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 1
32970: PUSH
32971: LD_INT 1
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 0
32980: PUSH
32981: LD_INT 1
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 1
32990: NEG
32991: PUSH
32992: LD_INT 0
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 1
33001: NEG
33002: PUSH
33003: LD_INT 1
33005: NEG
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 1
33013: NEG
33014: PUSH
33015: LD_INT 2
33017: NEG
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 0
33025: PUSH
33026: LD_INT 2
33028: NEG
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 1
33036: PUSH
33037: LD_INT 1
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 2
33047: PUSH
33048: LD_INT 0
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 2
33057: PUSH
33058: LD_INT 1
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 2
33067: PUSH
33068: LD_INT 2
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 1
33077: PUSH
33078: LD_INT 2
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 0
33087: PUSH
33088: LD_INT 2
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 1
33097: NEG
33098: PUSH
33099: LD_INT 1
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 2
33108: NEG
33109: PUSH
33110: LD_INT 0
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 2
33119: NEG
33120: PUSH
33121: LD_INT 1
33123: NEG
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 2
33131: NEG
33132: PUSH
33133: LD_INT 2
33135: NEG
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33162: LD_ADDR_VAR 0 23
33166: PUSH
33167: LD_INT 0
33169: PUSH
33170: LD_INT 0
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 0
33179: PUSH
33180: LD_INT 1
33182: NEG
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 1
33190: PUSH
33191: LD_INT 0
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 1
33200: PUSH
33201: LD_INT 1
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: LD_INT 1
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 1
33220: NEG
33221: PUSH
33222: LD_INT 0
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 1
33231: NEG
33232: PUSH
33233: LD_INT 1
33235: NEG
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 1
33243: NEG
33244: PUSH
33245: LD_INT 2
33247: NEG
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 0
33255: PUSH
33256: LD_INT 2
33258: NEG
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 1
33266: PUSH
33267: LD_INT 1
33269: NEG
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 2
33277: PUSH
33278: LD_INT 0
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 2
33287: PUSH
33288: LD_INT 1
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 2
33297: PUSH
33298: LD_INT 2
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 1
33307: PUSH
33308: LD_INT 2
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 0
33317: PUSH
33318: LD_INT 2
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 1
33327: NEG
33328: PUSH
33329: LD_INT 1
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 2
33338: NEG
33339: PUSH
33340: LD_INT 0
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 2
33349: NEG
33350: PUSH
33351: LD_INT 1
33353: NEG
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 2
33361: NEG
33362: PUSH
33363: LD_INT 2
33365: NEG
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 2
33373: NEG
33374: PUSH
33375: LD_INT 3
33377: NEG
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 1
33385: NEG
33386: PUSH
33387: LD_INT 3
33389: NEG
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 1
33397: PUSH
33398: LD_INT 2
33400: NEG
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 2
33408: PUSH
33409: LD_INT 1
33411: NEG
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33442: LD_ADDR_VAR 0 24
33446: PUSH
33447: LD_INT 0
33449: PUSH
33450: LD_INT 0
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 0
33459: PUSH
33460: LD_INT 1
33462: NEG
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 1
33470: PUSH
33471: LD_INT 0
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 1
33480: PUSH
33481: LD_INT 1
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 0
33490: PUSH
33491: LD_INT 1
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 1
33500: NEG
33501: PUSH
33502: LD_INT 0
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 1
33511: NEG
33512: PUSH
33513: LD_INT 1
33515: NEG
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 1
33523: NEG
33524: PUSH
33525: LD_INT 2
33527: NEG
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 0
33535: PUSH
33536: LD_INT 2
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 1
33546: PUSH
33547: LD_INT 1
33549: NEG
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 2
33557: PUSH
33558: LD_INT 0
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 2
33567: PUSH
33568: LD_INT 1
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 2
33577: PUSH
33578: LD_INT 2
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 1
33587: PUSH
33588: LD_INT 2
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 0
33597: PUSH
33598: LD_INT 2
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 1
33607: NEG
33608: PUSH
33609: LD_INT 1
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 2
33618: NEG
33619: PUSH
33620: LD_INT 0
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 2
33629: NEG
33630: PUSH
33631: LD_INT 1
33633: NEG
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 2
33641: NEG
33642: PUSH
33643: LD_INT 2
33645: NEG
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 1
33653: PUSH
33654: LD_INT 2
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 2
33664: PUSH
33665: LD_INT 1
33667: NEG
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 3
33675: PUSH
33676: LD_INT 1
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 3
33685: PUSH
33686: LD_INT 2
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33718: LD_ADDR_VAR 0 25
33722: PUSH
33723: LD_INT 0
33725: PUSH
33726: LD_INT 0
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 0
33735: PUSH
33736: LD_INT 1
33738: NEG
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 1
33746: PUSH
33747: LD_INT 0
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 1
33756: PUSH
33757: LD_INT 1
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 0
33766: PUSH
33767: LD_INT 1
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 1
33776: NEG
33777: PUSH
33778: LD_INT 0
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 1
33787: NEG
33788: PUSH
33789: LD_INT 1
33791: NEG
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 1
33799: NEG
33800: PUSH
33801: LD_INT 2
33803: NEG
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 0
33811: PUSH
33812: LD_INT 2
33814: NEG
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 1
33822: PUSH
33823: LD_INT 1
33825: NEG
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 2
33833: PUSH
33834: LD_INT 0
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 2
33843: PUSH
33844: LD_INT 1
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 2
33853: PUSH
33854: LD_INT 2
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 1
33863: PUSH
33864: LD_INT 2
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 0
33873: PUSH
33874: LD_INT 2
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 1
33883: NEG
33884: PUSH
33885: LD_INT 1
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 2
33894: NEG
33895: PUSH
33896: LD_INT 0
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 2
33905: NEG
33906: PUSH
33907: LD_INT 1
33909: NEG
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 2
33917: NEG
33918: PUSH
33919: LD_INT 2
33921: NEG
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 3
33929: PUSH
33930: LD_INT 1
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 3
33939: PUSH
33940: LD_INT 2
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 2
33949: PUSH
33950: LD_INT 3
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 1
33959: PUSH
33960: LD_INT 3
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33992: LD_ADDR_VAR 0 26
33996: PUSH
33997: LD_INT 0
33999: PUSH
34000: LD_INT 0
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 0
34009: PUSH
34010: LD_INT 1
34012: NEG
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 1
34020: PUSH
34021: LD_INT 0
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 1
34030: PUSH
34031: LD_INT 1
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 0
34040: PUSH
34041: LD_INT 1
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 1
34050: NEG
34051: PUSH
34052: LD_INT 0
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 1
34061: NEG
34062: PUSH
34063: LD_INT 1
34065: NEG
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 1
34073: NEG
34074: PUSH
34075: LD_INT 2
34077: NEG
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 0
34085: PUSH
34086: LD_INT 2
34088: NEG
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 1
34096: PUSH
34097: LD_INT 1
34099: NEG
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 2
34107: PUSH
34108: LD_INT 0
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 2
34117: PUSH
34118: LD_INT 1
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 2
34127: PUSH
34128: LD_INT 2
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 1
34137: PUSH
34138: LD_INT 2
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 0
34147: PUSH
34148: LD_INT 2
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 1
34157: NEG
34158: PUSH
34159: LD_INT 1
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 2
34168: NEG
34169: PUSH
34170: LD_INT 0
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 2
34179: NEG
34180: PUSH
34181: LD_INT 1
34183: NEG
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 2
34191: NEG
34192: PUSH
34193: LD_INT 2
34195: NEG
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 2
34203: PUSH
34204: LD_INT 3
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 1
34213: PUSH
34214: LD_INT 3
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 1
34223: NEG
34224: PUSH
34225: LD_INT 2
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 2
34234: NEG
34235: PUSH
34236: LD_INT 1
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34268: LD_ADDR_VAR 0 27
34272: PUSH
34273: LD_INT 0
34275: PUSH
34276: LD_INT 0
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 0
34285: PUSH
34286: LD_INT 1
34288: NEG
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 1
34296: PUSH
34297: LD_INT 0
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 1
34306: PUSH
34307: LD_INT 1
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 0
34316: PUSH
34317: LD_INT 1
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 1
34326: NEG
34327: PUSH
34328: LD_INT 0
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 1
34337: NEG
34338: PUSH
34339: LD_INT 1
34341: NEG
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 1
34349: NEG
34350: PUSH
34351: LD_INT 2
34353: NEG
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 0
34361: PUSH
34362: LD_INT 2
34364: NEG
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 1
34372: PUSH
34373: LD_INT 1
34375: NEG
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 2
34383: PUSH
34384: LD_INT 0
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 2
34393: PUSH
34394: LD_INT 1
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 2
34403: PUSH
34404: LD_INT 2
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 1
34413: PUSH
34414: LD_INT 2
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 0
34423: PUSH
34424: LD_INT 2
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 1
34433: NEG
34434: PUSH
34435: LD_INT 1
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 2
34444: NEG
34445: PUSH
34446: LD_INT 0
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 2
34455: NEG
34456: PUSH
34457: LD_INT 1
34459: NEG
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 2
34467: NEG
34468: PUSH
34469: LD_INT 2
34471: NEG
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 1
34479: NEG
34480: PUSH
34481: LD_INT 2
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 2
34490: NEG
34491: PUSH
34492: LD_INT 1
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 3
34501: NEG
34502: PUSH
34503: LD_INT 1
34505: NEG
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 3
34513: NEG
34514: PUSH
34515: LD_INT 2
34517: NEG
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34548: LD_ADDR_VAR 0 28
34552: PUSH
34553: LD_INT 0
34555: PUSH
34556: LD_INT 0
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 0
34565: PUSH
34566: LD_INT 1
34568: NEG
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 1
34576: PUSH
34577: LD_INT 0
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 1
34586: PUSH
34587: LD_INT 1
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 0
34596: PUSH
34597: LD_INT 1
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 1
34606: NEG
34607: PUSH
34608: LD_INT 0
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 1
34617: NEG
34618: PUSH
34619: LD_INT 1
34621: NEG
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 1
34629: NEG
34630: PUSH
34631: LD_INT 2
34633: NEG
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 0
34641: PUSH
34642: LD_INT 2
34644: NEG
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 1
34652: PUSH
34653: LD_INT 1
34655: NEG
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 2
34663: PUSH
34664: LD_INT 0
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 2
34673: PUSH
34674: LD_INT 1
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 2
34683: PUSH
34684: LD_INT 2
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 1
34693: PUSH
34694: LD_INT 2
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 0
34703: PUSH
34704: LD_INT 2
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 1
34713: NEG
34714: PUSH
34715: LD_INT 1
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 2
34724: NEG
34725: PUSH
34726: LD_INT 0
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 2
34735: NEG
34736: PUSH
34737: LD_INT 1
34739: NEG
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 2
34747: NEG
34748: PUSH
34749: LD_INT 2
34751: NEG
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 2
34759: NEG
34760: PUSH
34761: LD_INT 3
34763: NEG
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 1
34771: NEG
34772: PUSH
34773: LD_INT 3
34775: NEG
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 3
34783: NEG
34784: PUSH
34785: LD_INT 1
34787: NEG
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 3
34795: NEG
34796: PUSH
34797: LD_INT 2
34799: NEG
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34830: LD_ADDR_VAR 0 29
34834: PUSH
34835: LD_INT 0
34837: PUSH
34838: LD_INT 0
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 0
34847: PUSH
34848: LD_INT 1
34850: NEG
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 1
34858: PUSH
34859: LD_INT 0
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 1
34868: PUSH
34869: LD_INT 1
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 0
34878: PUSH
34879: LD_INT 1
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 1
34888: NEG
34889: PUSH
34890: LD_INT 0
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 1
34899: NEG
34900: PUSH
34901: LD_INT 1
34903: NEG
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 1
34911: NEG
34912: PUSH
34913: LD_INT 2
34915: NEG
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 0
34923: PUSH
34924: LD_INT 2
34926: NEG
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 1
34934: PUSH
34935: LD_INT 1
34937: NEG
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 2
34945: PUSH
34946: LD_INT 0
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 2
34955: PUSH
34956: LD_INT 1
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 1
34965: PUSH
34966: LD_INT 2
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 0
34975: PUSH
34976: LD_INT 2
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 1
34985: NEG
34986: PUSH
34987: LD_INT 1
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 2
34996: NEG
34997: PUSH
34998: LD_INT 1
35000: NEG
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 2
35008: NEG
35009: PUSH
35010: LD_INT 2
35012: NEG
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 2
35020: NEG
35021: PUSH
35022: LD_INT 3
35024: NEG
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 2
35032: PUSH
35033: LD_INT 1
35035: NEG
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 3
35043: PUSH
35044: LD_INT 1
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 1
35053: PUSH
35054: LD_INT 3
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 1
35063: NEG
35064: PUSH
35065: LD_INT 2
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 3
35074: NEG
35075: PUSH
35076: LD_INT 2
35078: NEG
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35109: LD_ADDR_VAR 0 30
35113: PUSH
35114: LD_INT 0
35116: PUSH
35117: LD_INT 0
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: LD_INT 1
35129: NEG
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 1
35137: PUSH
35138: LD_INT 0
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 1
35147: PUSH
35148: LD_INT 1
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 0
35157: PUSH
35158: LD_INT 1
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 1
35167: NEG
35168: PUSH
35169: LD_INT 0
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 1
35178: NEG
35179: PUSH
35180: LD_INT 1
35182: NEG
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 1
35190: NEG
35191: PUSH
35192: LD_INT 2
35194: NEG
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 0
35202: PUSH
35203: LD_INT 2
35205: NEG
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 1
35213: PUSH
35214: LD_INT 1
35216: NEG
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 2
35224: PUSH
35225: LD_INT 0
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 2
35234: PUSH
35235: LD_INT 1
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 2
35244: PUSH
35245: LD_INT 2
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 1
35254: PUSH
35255: LD_INT 2
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 1
35264: NEG
35265: PUSH
35266: LD_INT 1
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 2
35275: NEG
35276: PUSH
35277: LD_INT 0
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 2
35286: NEG
35287: PUSH
35288: LD_INT 1
35290: NEG
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 1
35298: NEG
35299: PUSH
35300: LD_INT 3
35302: NEG
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 1
35310: PUSH
35311: LD_INT 2
35313: NEG
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 3
35321: PUSH
35322: LD_INT 2
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 2
35331: PUSH
35332: LD_INT 3
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 2
35341: NEG
35342: PUSH
35343: LD_INT 1
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 3
35352: NEG
35353: PUSH
35354: LD_INT 1
35356: NEG
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35387: LD_ADDR_VAR 0 31
35391: PUSH
35392: LD_INT 0
35394: PUSH
35395: LD_INT 0
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 0
35404: PUSH
35405: LD_INT 1
35407: NEG
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 1
35415: PUSH
35416: LD_INT 0
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: LD_INT 1
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 0
35435: PUSH
35436: LD_INT 1
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: LD_INT 0
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 1
35456: NEG
35457: PUSH
35458: LD_INT 1
35460: NEG
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 1
35468: NEG
35469: PUSH
35470: LD_INT 2
35472: NEG
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 1
35480: PUSH
35481: LD_INT 1
35483: NEG
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 2
35491: PUSH
35492: LD_INT 0
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 2
35501: PUSH
35502: LD_INT 1
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 2
35511: PUSH
35512: LD_INT 2
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 1
35521: PUSH
35522: LD_INT 2
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 0
35531: PUSH
35532: LD_INT 2
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 1
35541: NEG
35542: PUSH
35543: LD_INT 1
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 2
35552: NEG
35553: PUSH
35554: LD_INT 1
35556: NEG
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 2
35564: NEG
35565: PUSH
35566: LD_INT 2
35568: NEG
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 2
35576: NEG
35577: PUSH
35578: LD_INT 3
35580: NEG
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 2
35588: PUSH
35589: LD_INT 1
35591: NEG
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 3
35599: PUSH
35600: LD_INT 1
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 1
35609: PUSH
35610: LD_INT 3
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 1
35619: NEG
35620: PUSH
35621: LD_INT 2
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 3
35630: NEG
35631: PUSH
35632: LD_INT 2
35634: NEG
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35665: LD_ADDR_VAR 0 32
35669: PUSH
35670: LD_INT 0
35672: PUSH
35673: LD_INT 0
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 0
35682: PUSH
35683: LD_INT 1
35685: NEG
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 1
35693: PUSH
35694: LD_INT 0
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 1
35703: PUSH
35704: LD_INT 1
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 0
35713: PUSH
35714: LD_INT 1
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 1
35723: NEG
35724: PUSH
35725: LD_INT 0
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 1
35734: NEG
35735: PUSH
35736: LD_INT 1
35738: NEG
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 1
35746: NEG
35747: PUSH
35748: LD_INT 2
35750: NEG
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 0
35758: PUSH
35759: LD_INT 2
35761: NEG
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 1
35769: PUSH
35770: LD_INT 1
35772: NEG
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: LD_INT 1
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 2
35790: PUSH
35791: LD_INT 2
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 1
35800: PUSH
35801: LD_INT 2
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 0
35810: PUSH
35811: LD_INT 2
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 1
35820: NEG
35821: PUSH
35822: LD_INT 1
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 2
35831: NEG
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 2
35842: NEG
35843: PUSH
35844: LD_INT 1
35846: NEG
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 1
35854: NEG
35855: PUSH
35856: LD_INT 3
35858: NEG
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 1
35866: PUSH
35867: LD_INT 2
35869: NEG
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 3
35877: PUSH
35878: LD_INT 2
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 2
35887: PUSH
35888: LD_INT 3
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 2
35897: NEG
35898: PUSH
35899: LD_INT 1
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 3
35908: NEG
35909: PUSH
35910: LD_INT 1
35912: NEG
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35943: LD_ADDR_VAR 0 33
35947: PUSH
35948: LD_INT 0
35950: PUSH
35951: LD_INT 0
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 0
35960: PUSH
35961: LD_INT 1
35963: NEG
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 1
35971: PUSH
35972: LD_INT 0
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 1
35981: PUSH
35982: LD_INT 1
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 0
35991: PUSH
35992: LD_INT 1
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 1
36001: NEG
36002: PUSH
36003: LD_INT 0
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 1
36012: NEG
36013: PUSH
36014: LD_INT 1
36016: NEG
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 1
36024: NEG
36025: PUSH
36026: LD_INT 2
36028: NEG
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 1
36036: PUSH
36037: LD_INT 1
36039: NEG
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 2
36047: PUSH
36048: LD_INT 0
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 2
36057: PUSH
36058: LD_INT 1
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 1
36067: PUSH
36068: LD_INT 2
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 0
36077: PUSH
36078: LD_INT 2
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 1
36087: NEG
36088: PUSH
36089: LD_INT 1
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 2
36098: NEG
36099: PUSH
36100: LD_INT 0
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 2
36109: NEG
36110: PUSH
36111: LD_INT 1
36113: NEG
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 2
36121: NEG
36122: PUSH
36123: LD_INT 2
36125: NEG
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 2
36133: NEG
36134: PUSH
36135: LD_INT 3
36137: NEG
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 2
36145: PUSH
36146: LD_INT 1
36148: NEG
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 3
36156: PUSH
36157: LD_INT 1
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 1
36166: PUSH
36167: LD_INT 3
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 1
36176: NEG
36177: PUSH
36178: LD_INT 2
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 3
36187: NEG
36188: PUSH
36189: LD_INT 2
36191: NEG
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36222: LD_ADDR_VAR 0 34
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: LD_INT 0
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 0
36239: PUSH
36240: LD_INT 1
36242: NEG
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 1
36250: PUSH
36251: LD_INT 0
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 1
36260: PUSH
36261: LD_INT 1
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 0
36270: PUSH
36271: LD_INT 1
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 1
36280: NEG
36281: PUSH
36282: LD_INT 0
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 1
36291: NEG
36292: PUSH
36293: LD_INT 1
36295: NEG
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 1
36303: NEG
36304: PUSH
36305: LD_INT 2
36307: NEG
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 0
36315: PUSH
36316: LD_INT 2
36318: NEG
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 1
36326: PUSH
36327: LD_INT 1
36329: NEG
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 2
36337: PUSH
36338: LD_INT 1
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 2
36347: PUSH
36348: LD_INT 2
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 1
36357: PUSH
36358: LD_INT 2
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 1
36367: NEG
36368: PUSH
36369: LD_INT 1
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 2
36378: NEG
36379: PUSH
36380: LD_INT 0
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 2
36389: NEG
36390: PUSH
36391: LD_INT 1
36393: NEG
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 2
36401: NEG
36402: PUSH
36403: LD_INT 2
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 1
36413: NEG
36414: PUSH
36415: LD_INT 3
36417: NEG
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 1
36425: PUSH
36426: LD_INT 2
36428: NEG
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 3
36436: PUSH
36437: LD_INT 2
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 2
36446: PUSH
36447: LD_INT 3
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 2
36456: NEG
36457: PUSH
36458: LD_INT 1
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 3
36467: NEG
36468: PUSH
36469: LD_INT 1
36471: NEG
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36502: LD_ADDR_VAR 0 35
36506: PUSH
36507: LD_INT 0
36509: PUSH
36510: LD_INT 0
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 0
36519: PUSH
36520: LD_INT 1
36522: NEG
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 1
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 1
36540: PUSH
36541: LD_INT 1
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 0
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 1
36560: NEG
36561: PUSH
36562: LD_INT 0
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: LD_INT 1
36575: NEG
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 2
36583: PUSH
36584: LD_INT 1
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 2
36593: NEG
36594: PUSH
36595: LD_INT 1
36597: NEG
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36614: LD_ADDR_VAR 0 36
36618: PUSH
36619: LD_INT 0
36621: PUSH
36622: LD_INT 0
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 0
36631: PUSH
36632: LD_INT 1
36634: NEG
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 1
36642: PUSH
36643: LD_INT 0
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 1
36652: PUSH
36653: LD_INT 1
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 0
36662: PUSH
36663: LD_INT 1
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 1
36672: NEG
36673: PUSH
36674: LD_INT 0
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 1
36683: NEG
36684: PUSH
36685: LD_INT 1
36687: NEG
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 1
36695: NEG
36696: PUSH
36697: LD_INT 2
36699: NEG
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 1
36707: PUSH
36708: LD_INT 2
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36726: LD_ADDR_VAR 0 37
36730: PUSH
36731: LD_INT 0
36733: PUSH
36734: LD_INT 0
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 0
36743: PUSH
36744: LD_INT 1
36746: NEG
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 1
36754: PUSH
36755: LD_INT 0
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 1
36764: PUSH
36765: LD_INT 1
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 0
36774: PUSH
36775: LD_INT 1
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 1
36784: NEG
36785: PUSH
36786: LD_INT 0
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 1
36795: NEG
36796: PUSH
36797: LD_INT 1
36799: NEG
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: LD_INT 1
36810: NEG
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 1
36818: NEG
36819: PUSH
36820: LD_INT 1
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36838: LD_ADDR_VAR 0 38
36842: PUSH
36843: LD_INT 0
36845: PUSH
36846: LD_INT 0
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 0
36855: PUSH
36856: LD_INT 1
36858: NEG
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 1
36866: PUSH
36867: LD_INT 0
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 1
36876: PUSH
36877: LD_INT 1
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: LD_INT 1
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 1
36896: NEG
36897: PUSH
36898: LD_INT 0
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 1
36907: NEG
36908: PUSH
36909: LD_INT 1
36911: NEG
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 2
36919: PUSH
36920: LD_INT 1
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 2
36929: NEG
36930: PUSH
36931: LD_INT 1
36933: NEG
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36950: LD_ADDR_VAR 0 39
36954: PUSH
36955: LD_INT 0
36957: PUSH
36958: LD_INT 0
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 0
36967: PUSH
36968: LD_INT 1
36970: NEG
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 1
36978: PUSH
36979: LD_INT 0
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 1
36988: PUSH
36989: LD_INT 1
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 0
36998: PUSH
36999: LD_INT 1
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: LD_INT 0
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 1
37019: NEG
37020: PUSH
37021: LD_INT 1
37023: NEG
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 1
37031: NEG
37032: PUSH
37033: LD_INT 2
37035: NEG
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 1
37043: PUSH
37044: LD_INT 2
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37062: LD_ADDR_VAR 0 40
37066: PUSH
37067: LD_INT 0
37069: PUSH
37070: LD_INT 0
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 0
37079: PUSH
37080: LD_INT 1
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 1
37090: PUSH
37091: LD_INT 0
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 1
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 0
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 1
37120: NEG
37121: PUSH
37122: LD_INT 0
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 1
37131: NEG
37132: PUSH
37133: LD_INT 1
37135: NEG
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 1
37143: PUSH
37144: LD_INT 1
37146: NEG
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: LD_INT 1
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37174: LD_ADDR_VAR 0 41
37178: PUSH
37179: LD_INT 0
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 0
37191: PUSH
37192: LD_INT 1
37194: NEG
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: LD_INT 0
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: LD_INT 1
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 0
37222: PUSH
37223: LD_INT 1
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 1
37232: NEG
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 1
37243: NEG
37244: PUSH
37245: LD_INT 1
37247: NEG
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 1
37255: NEG
37256: PUSH
37257: LD_INT 2
37259: NEG
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 1
37267: PUSH
37268: LD_INT 1
37270: NEG
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 2
37278: PUSH
37279: LD_INT 0
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 2
37288: PUSH
37289: LD_INT 1
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 2
37298: PUSH
37299: LD_INT 2
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 1
37308: PUSH
37309: LD_INT 2
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 1
37318: NEG
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 2
37329: NEG
37330: PUSH
37331: LD_INT 0
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 2
37340: NEG
37341: PUSH
37342: LD_INT 1
37344: NEG
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 2
37352: NEG
37353: PUSH
37354: LD_INT 2
37356: NEG
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 2
37364: NEG
37365: PUSH
37366: LD_INT 3
37368: NEG
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 2
37376: PUSH
37377: LD_INT 1
37379: NEG
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 3
37387: PUSH
37388: LD_INT 0
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 3
37397: PUSH
37398: LD_INT 1
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 3
37407: PUSH
37408: LD_INT 2
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 3
37417: PUSH
37418: LD_INT 3
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 2
37427: PUSH
37428: LD_INT 3
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 2
37437: NEG
37438: PUSH
37439: LD_INT 1
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 3
37448: NEG
37449: PUSH
37450: LD_INT 0
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 3
37459: NEG
37460: PUSH
37461: LD_INT 1
37463: NEG
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 3
37471: NEG
37472: PUSH
37473: LD_INT 2
37475: NEG
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 3
37483: NEG
37484: PUSH
37485: LD_INT 3
37487: NEG
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37524: LD_ADDR_VAR 0 42
37528: PUSH
37529: LD_INT 0
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 0
37541: PUSH
37542: LD_INT 1
37544: NEG
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 1
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 1
37562: PUSH
37563: LD_INT 1
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 0
37572: PUSH
37573: LD_INT 1
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 1
37582: NEG
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 1
37593: NEG
37594: PUSH
37595: LD_INT 1
37597: NEG
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 1
37605: NEG
37606: PUSH
37607: LD_INT 2
37609: NEG
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 0
37617: PUSH
37618: LD_INT 2
37620: NEG
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 1
37628: PUSH
37629: LD_INT 1
37631: NEG
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 2
37639: PUSH
37640: LD_INT 1
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 2
37649: PUSH
37650: LD_INT 2
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 1
37659: PUSH
37660: LD_INT 2
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 0
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 1
37679: NEG
37680: PUSH
37681: LD_INT 1
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 2
37690: NEG
37691: PUSH
37692: LD_INT 1
37694: NEG
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 2
37702: NEG
37703: PUSH
37704: LD_INT 2
37706: NEG
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 2
37714: NEG
37715: PUSH
37716: LD_INT 3
37718: NEG
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 1
37726: NEG
37727: PUSH
37728: LD_INT 3
37730: NEG
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 0
37738: PUSH
37739: LD_INT 3
37741: NEG
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 1
37749: PUSH
37750: LD_INT 2
37752: NEG
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 3
37760: PUSH
37761: LD_INT 2
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 3
37770: PUSH
37771: LD_INT 3
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 2
37780: PUSH
37781: LD_INT 3
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 1
37790: PUSH
37791: LD_INT 3
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 0
37800: PUSH
37801: LD_INT 3
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 1
37810: NEG
37811: PUSH
37812: LD_INT 2
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 3
37821: NEG
37822: PUSH
37823: LD_INT 2
37825: NEG
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 3
37833: NEG
37834: PUSH
37835: LD_INT 3
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37874: LD_ADDR_VAR 0 43
37878: PUSH
37879: LD_INT 0
37881: PUSH
37882: LD_INT 0
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 0
37891: PUSH
37892: LD_INT 1
37894: NEG
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: LD_INT 0
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 1
37912: PUSH
37913: LD_INT 1
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 0
37922: PUSH
37923: LD_INT 1
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 1
37932: NEG
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 1
37943: NEG
37944: PUSH
37945: LD_INT 1
37947: NEG
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 1
37955: NEG
37956: PUSH
37957: LD_INT 2
37959: NEG
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: LD_INT 2
37970: NEG
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 1
37978: PUSH
37979: LD_INT 1
37981: NEG
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: LD_INT 0
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 2
37999: PUSH
38000: LD_INT 1
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 1
38009: PUSH
38010: LD_INT 2
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: LD_INT 2
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 1
38029: NEG
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 2
38040: NEG
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 2
38051: NEG
38052: PUSH
38053: LD_INT 1
38055: NEG
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 1
38063: NEG
38064: PUSH
38065: LD_INT 3
38067: NEG
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 0
38075: PUSH
38076: LD_INT 3
38078: NEG
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 1
38086: PUSH
38087: LD_INT 2
38089: NEG
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 2
38097: PUSH
38098: LD_INT 1
38100: NEG
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 3
38108: PUSH
38109: LD_INT 0
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 3
38118: PUSH
38119: LD_INT 1
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 1
38128: PUSH
38129: LD_INT 3
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 0
38138: PUSH
38139: LD_INT 3
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 1
38148: NEG
38149: PUSH
38150: LD_INT 2
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 2
38159: NEG
38160: PUSH
38161: LD_INT 1
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 3
38170: NEG
38171: PUSH
38172: LD_INT 0
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 3
38181: NEG
38182: PUSH
38183: LD_INT 1
38185: NEG
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38222: LD_ADDR_VAR 0 44
38226: PUSH
38227: LD_INT 0
38229: PUSH
38230: LD_INT 0
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 0
38239: PUSH
38240: LD_INT 1
38242: NEG
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 1
38250: PUSH
38251: LD_INT 0
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 1
38260: PUSH
38261: LD_INT 1
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 0
38270: PUSH
38271: LD_INT 1
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 1
38280: NEG
38281: PUSH
38282: LD_INT 0
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: LD_INT 1
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: NEG
38304: PUSH
38305: LD_INT 2
38307: NEG
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 1
38315: PUSH
38316: LD_INT 1
38318: NEG
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 2
38326: PUSH
38327: LD_INT 0
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 2
38336: PUSH
38337: LD_INT 1
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 2
38346: PUSH
38347: LD_INT 2
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 1
38356: PUSH
38357: LD_INT 2
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 1
38366: NEG
38367: PUSH
38368: LD_INT 1
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 2
38377: NEG
38378: PUSH
38379: LD_INT 0
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 2
38388: NEG
38389: PUSH
38390: LD_INT 1
38392: NEG
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 2
38400: NEG
38401: PUSH
38402: LD_INT 2
38404: NEG
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 2
38412: NEG
38413: PUSH
38414: LD_INT 3
38416: NEG
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 2
38424: PUSH
38425: LD_INT 1
38427: NEG
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 3
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 3
38445: PUSH
38446: LD_INT 1
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 3
38455: PUSH
38456: LD_INT 2
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 3
38465: PUSH
38466: LD_INT 3
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 2
38475: PUSH
38476: LD_INT 3
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 2
38485: NEG
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 3
38496: NEG
38497: PUSH
38498: LD_INT 0
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 3
38507: NEG
38508: PUSH
38509: LD_INT 1
38511: NEG
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 3
38519: NEG
38520: PUSH
38521: LD_INT 2
38523: NEG
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 3
38531: NEG
38532: PUSH
38533: LD_INT 3
38535: NEG
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38572: LD_ADDR_VAR 0 45
38576: PUSH
38577: LD_INT 0
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 0
38589: PUSH
38590: LD_INT 1
38592: NEG
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 1
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 1
38610: PUSH
38611: LD_INT 1
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: LD_INT 1
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 1
38630: NEG
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 1
38641: NEG
38642: PUSH
38643: LD_INT 1
38645: NEG
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 1
38653: NEG
38654: PUSH
38655: LD_INT 2
38657: NEG
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 0
38665: PUSH
38666: LD_INT 2
38668: NEG
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 1
38676: PUSH
38677: LD_INT 1
38679: NEG
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 2
38687: PUSH
38688: LD_INT 1
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 2
38697: PUSH
38698: LD_INT 2
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 1
38707: PUSH
38708: LD_INT 2
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 0
38717: PUSH
38718: LD_INT 2
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 1
38727: NEG
38728: PUSH
38729: LD_INT 1
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 2
38738: NEG
38739: PUSH
38740: LD_INT 1
38742: NEG
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 2
38750: NEG
38751: PUSH
38752: LD_INT 2
38754: NEG
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 2
38762: NEG
38763: PUSH
38764: LD_INT 3
38766: NEG
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 1
38774: NEG
38775: PUSH
38776: LD_INT 3
38778: NEG
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: LD_INT 3
38789: NEG
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: LD_INT 2
38800: NEG
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 3
38808: PUSH
38809: LD_INT 2
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 3
38818: PUSH
38819: LD_INT 3
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 2
38828: PUSH
38829: LD_INT 3
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: PUSH
38839: LD_INT 3
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 0
38848: PUSH
38849: LD_INT 3
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 1
38858: NEG
38859: PUSH
38860: LD_INT 2
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 3
38869: NEG
38870: PUSH
38871: LD_INT 2
38873: NEG
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 3
38881: NEG
38882: PUSH
38883: LD_INT 3
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38922: LD_ADDR_VAR 0 46
38926: PUSH
38927: LD_INT 0
38929: PUSH
38930: LD_INT 0
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 0
38939: PUSH
38940: LD_INT 1
38942: NEG
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 1
38950: PUSH
38951: LD_INT 0
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 1
38960: PUSH
38961: LD_INT 1
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 0
38970: PUSH
38971: LD_INT 1
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: PUSH
38982: LD_INT 0
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 1
38991: NEG
38992: PUSH
38993: LD_INT 1
38995: NEG
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 1
39003: NEG
39004: PUSH
39005: LD_INT 2
39007: NEG
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 0
39015: PUSH
39016: LD_INT 2
39018: NEG
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 1
39026: PUSH
39027: LD_INT 1
39029: NEG
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 2
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 2
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 1
39057: PUSH
39058: LD_INT 2
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 0
39067: PUSH
39068: LD_INT 2
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 1
39077: NEG
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 2
39088: NEG
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 2
39099: NEG
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: NEG
39112: PUSH
39113: LD_INT 3
39115: NEG
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: LD_INT 3
39126: NEG
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 1
39134: PUSH
39135: LD_INT 2
39137: NEG
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 2
39145: PUSH
39146: LD_INT 1
39148: NEG
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 3
39156: PUSH
39157: LD_INT 0
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 3
39166: PUSH
39167: LD_INT 1
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 1
39176: PUSH
39177: LD_INT 3
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: LD_INT 3
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 1
39196: NEG
39197: PUSH
39198: LD_INT 2
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 2
39207: NEG
39208: PUSH
39209: LD_INT 1
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 3
39218: NEG
39219: PUSH
39220: LD_INT 0
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 3
39229: NEG
39230: PUSH
39231: LD_INT 1
39233: NEG
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39270: LD_ADDR_VAR 0 47
39274: PUSH
39275: LD_INT 0
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 0
39287: PUSH
39288: LD_INT 1
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 1
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 1
39308: PUSH
39309: LD_INT 1
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 0
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 1
39328: NEG
39329: PUSH
39330: LD_INT 0
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 1
39339: NEG
39340: PUSH
39341: LD_INT 1
39343: NEG
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: NEG
39352: PUSH
39353: LD_INT 2
39355: NEG
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: LD_INT 2
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: LD_INT 1
39377: NEG
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 2
39385: NEG
39386: PUSH
39387: LD_INT 1
39389: NEG
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 2
39397: NEG
39398: PUSH
39399: LD_INT 2
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39421: LD_ADDR_VAR 0 48
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: LD_INT 0
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 0
39438: PUSH
39439: LD_INT 1
39441: NEG
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 1
39449: PUSH
39450: LD_INT 0
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 1
39459: PUSH
39460: LD_INT 1
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 0
39469: PUSH
39470: LD_INT 1
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 1
39479: NEG
39480: PUSH
39481: LD_INT 0
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 1
39490: NEG
39491: PUSH
39492: LD_INT 1
39494: NEG
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 1
39502: NEG
39503: PUSH
39504: LD_INT 2
39506: NEG
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 0
39514: PUSH
39515: LD_INT 2
39517: NEG
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 1
39525: PUSH
39526: LD_INT 1
39528: NEG
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 2
39536: PUSH
39537: LD_INT 0
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 2
39546: PUSH
39547: LD_INT 1
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39568: LD_ADDR_VAR 0 49
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: LD_INT 0
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 0
39585: PUSH
39586: LD_INT 1
39588: NEG
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: LD_INT 0
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 1
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 0
39616: PUSH
39617: LD_INT 1
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 1
39626: NEG
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 1
39637: NEG
39638: PUSH
39639: LD_INT 1
39641: NEG
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 1
39649: PUSH
39650: LD_INT 1
39652: NEG
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 2
39660: PUSH
39661: LD_INT 0
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 2
39670: PUSH
39671: LD_INT 1
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 2
39680: PUSH
39681: LD_INT 2
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 1
39690: PUSH
39691: LD_INT 2
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39712: LD_ADDR_VAR 0 50
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: LD_INT 0
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 0
39729: PUSH
39730: LD_INT 1
39732: NEG
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: LD_INT 0
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 1
39750: PUSH
39751: LD_INT 1
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: LD_INT 0
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: LD_INT 1
39785: NEG
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 2
39793: PUSH
39794: LD_INT 1
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 2
39803: PUSH
39804: LD_INT 2
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 1
39813: PUSH
39814: LD_INT 2
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 0
39823: PUSH
39824: LD_INT 2
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 1
39833: NEG
39834: PUSH
39835: LD_INT 1
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39856: LD_ADDR_VAR 0 51
39860: PUSH
39861: LD_INT 0
39863: PUSH
39864: LD_INT 0
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: LD_INT 1
39876: NEG
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 1
39884: PUSH
39885: LD_INT 0
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 1
39894: PUSH
39895: LD_INT 1
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 0
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 1
39914: NEG
39915: PUSH
39916: LD_INT 0
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 1
39937: PUSH
39938: LD_INT 2
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 0
39947: PUSH
39948: LD_INT 2
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 1
39957: NEG
39958: PUSH
39959: LD_INT 1
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 2
39968: NEG
39969: PUSH
39970: LD_INT 0
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 2
39979: NEG
39980: PUSH
39981: LD_INT 1
39983: NEG
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40003: LD_ADDR_VAR 0 52
40007: PUSH
40008: LD_INT 0
40010: PUSH
40011: LD_INT 0
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 0
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 1
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: LD_INT 1
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 0
40051: PUSH
40052: LD_INT 1
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 1
40072: NEG
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 1
40084: NEG
40085: PUSH
40086: LD_INT 2
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 1
40096: NEG
40097: PUSH
40098: LD_INT 1
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 2
40107: NEG
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 2
40118: NEG
40119: PUSH
40120: LD_INT 1
40122: NEG
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 2
40130: NEG
40131: PUSH
40132: LD_INT 2
40134: NEG
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40154: LD_ADDR_VAR 0 53
40158: PUSH
40159: LD_INT 0
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 0
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: LD_INT 0
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 1
40192: PUSH
40193: LD_INT 1
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 0
40202: PUSH
40203: LD_INT 1
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 1
40212: NEG
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 1
40223: NEG
40224: PUSH
40225: LD_INT 1
40227: NEG
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 1
40235: NEG
40236: PUSH
40237: LD_INT 2
40239: NEG
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 0
40247: PUSH
40248: LD_INT 2
40250: NEG
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 1
40258: PUSH
40259: LD_INT 1
40261: NEG
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 2
40269: PUSH
40270: LD_INT 0
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 2
40279: PUSH
40280: LD_INT 1
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 2
40289: PUSH
40290: LD_INT 2
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 1
40299: PUSH
40300: LD_INT 2
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: LD_INT 2
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 1
40319: NEG
40320: PUSH
40321: LD_INT 1
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 2
40330: NEG
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 2
40341: NEG
40342: PUSH
40343: LD_INT 1
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 2
40353: NEG
40354: PUSH
40355: LD_INT 2
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40384: LD_ADDR_VAR 0 54
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 0
40401: PUSH
40402: LD_INT 1
40404: NEG
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: LD_INT 0
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: PUSH
40423: LD_INT 1
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 0
40432: PUSH
40433: LD_INT 1
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 1
40442: NEG
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 1
40453: NEG
40454: PUSH
40455: LD_INT 1
40457: NEG
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 1
40465: NEG
40466: PUSH
40467: LD_INT 2
40469: NEG
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 0
40477: PUSH
40478: LD_INT 2
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 1
40488: PUSH
40489: LD_INT 1
40491: NEG
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 2
40499: PUSH
40500: LD_INT 0
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 2
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 2
40519: PUSH
40520: LD_INT 2
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: LD_INT 2
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: LD_INT 2
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 1
40549: NEG
40550: PUSH
40551: LD_INT 1
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 2
40560: NEG
40561: PUSH
40562: LD_INT 0
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 2
40571: NEG
40572: PUSH
40573: LD_INT 1
40575: NEG
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 2
40583: NEG
40584: PUSH
40585: LD_INT 2
40587: NEG
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40614: LD_ADDR_VAR 0 55
40618: PUSH
40619: LD_INT 0
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 0
40631: PUSH
40632: LD_INT 1
40634: NEG
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: LD_INT 0
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: LD_INT 1
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: LD_INT 1
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 1
40672: NEG
40673: PUSH
40674: LD_INT 0
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 1
40683: NEG
40684: PUSH
40685: LD_INT 1
40687: NEG
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 1
40695: NEG
40696: PUSH
40697: LD_INT 2
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: LD_INT 2
40710: NEG
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 1
40718: PUSH
40719: LD_INT 1
40721: NEG
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 2
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 2
40739: PUSH
40740: LD_INT 1
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 2
40749: PUSH
40750: LD_INT 2
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 1
40759: PUSH
40760: LD_INT 2
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: LD_INT 2
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 1
40779: NEG
40780: PUSH
40781: LD_INT 1
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 2
40790: NEG
40791: PUSH
40792: LD_INT 0
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 2
40801: NEG
40802: PUSH
40803: LD_INT 1
40805: NEG
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 2
40813: NEG
40814: PUSH
40815: LD_INT 2
40817: NEG
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40844: LD_ADDR_VAR 0 56
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 0
40861: PUSH
40862: LD_INT 1
40864: NEG
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: PUSH
40873: LD_INT 0
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 0
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 1
40902: NEG
40903: PUSH
40904: LD_INT 0
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: LD_INT 1
40917: NEG
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 1
40925: NEG
40926: PUSH
40927: LD_INT 2
40929: NEG
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 0
40937: PUSH
40938: LD_INT 2
40940: NEG
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 1
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 2
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 2
40969: PUSH
40970: LD_INT 1
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 2
40979: PUSH
40980: LD_INT 2
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 1
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: LD_INT 2
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 1
41009: NEG
41010: PUSH
41011: LD_INT 1
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 2
41020: NEG
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 2
41031: NEG
41032: PUSH
41033: LD_INT 1
41035: NEG
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 2
41043: NEG
41044: PUSH
41045: LD_INT 2
41047: NEG
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41074: LD_ADDR_VAR 0 57
41078: PUSH
41079: LD_INT 0
41081: PUSH
41082: LD_INT 0
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 1
41112: PUSH
41113: LD_INT 1
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: LD_INT 1
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: NEG
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: PUSH
41145: LD_INT 1
41147: NEG
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 1
41155: NEG
41156: PUSH
41157: LD_INT 2
41159: NEG
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: LD_INT 2
41170: NEG
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 1
41178: PUSH
41179: LD_INT 1
41181: NEG
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 2
41189: PUSH
41190: LD_INT 0
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 2
41199: PUSH
41200: LD_INT 1
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 2
41209: PUSH
41210: LD_INT 2
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 1
41219: PUSH
41220: LD_INT 2
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: LD_INT 2
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 1
41239: NEG
41240: PUSH
41241: LD_INT 1
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 2
41250: NEG
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 2
41261: NEG
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 2
41273: NEG
41274: PUSH
41275: LD_INT 2
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41304: LD_ADDR_VAR 0 58
41308: PUSH
41309: LD_INT 0
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 0
41321: PUSH
41322: LD_INT 1
41324: NEG
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 0
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: LD_INT 1
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 0
41352: PUSH
41353: LD_INT 1
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 1
41362: NEG
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 1
41385: NEG
41386: PUSH
41387: LD_INT 2
41389: NEG
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: LD_INT 2
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: PUSH
41409: LD_INT 1
41411: NEG
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 2
41429: PUSH
41430: LD_INT 1
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 2
41439: PUSH
41440: LD_INT 2
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 1
41449: PUSH
41450: LD_INT 2
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: LD_INT 2
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: LD_INT 1
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 2
41480: NEG
41481: PUSH
41482: LD_INT 0
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 2
41491: NEG
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 2
41503: NEG
41504: PUSH
41505: LD_INT 2
41507: NEG
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41534: LD_ADDR_VAR 0 59
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 0
41551: PUSH
41552: LD_INT 1
41554: NEG
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: LD_INT 0
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 1
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: LD_INT 1
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: NEG
41593: PUSH
41594: LD_INT 0
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 1
41603: NEG
41604: PUSH
41605: LD_INT 1
41607: NEG
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41622: LD_ADDR_VAR 0 60
41626: PUSH
41627: LD_INT 0
41629: PUSH
41630: LD_INT 0
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 0
41639: PUSH
41640: LD_INT 1
41642: NEG
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 1
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 1
41660: PUSH
41661: LD_INT 1
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 0
41670: PUSH
41671: LD_INT 1
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 1
41680: NEG
41681: PUSH
41682: LD_INT 0
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 1
41691: NEG
41692: PUSH
41693: LD_INT 1
41695: NEG
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41710: LD_ADDR_VAR 0 61
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: LD_INT 0
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 0
41727: PUSH
41728: LD_INT 1
41730: NEG
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 1
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 1
41748: PUSH
41749: LD_INT 1
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 0
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 1
41768: NEG
41769: PUSH
41770: LD_INT 0
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 1
41779: NEG
41780: PUSH
41781: LD_INT 1
41783: NEG
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41798: LD_ADDR_VAR 0 62
41802: PUSH
41803: LD_INT 0
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 0
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 1
41826: PUSH
41827: LD_INT 0
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: LD_INT 1
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: LD_INT 1
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 1
41856: NEG
41857: PUSH
41858: LD_INT 0
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 1
41867: NEG
41868: PUSH
41869: LD_INT 1
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41886: LD_ADDR_VAR 0 63
41890: PUSH
41891: LD_INT 0
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: LD_INT 1
41906: NEG
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: LD_INT 0
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 1
41924: PUSH
41925: LD_INT 1
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 0
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41974: LD_ADDR_VAR 0 64
41978: PUSH
41979: LD_INT 0
41981: PUSH
41982: LD_INT 0
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: LD_INT 1
41994: NEG
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: LD_INT 0
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 1
42012: PUSH
42013: LD_INT 1
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: PUSH
42034: LD_INT 0
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 1
42043: NEG
42044: PUSH
42045: LD_INT 1
42047: NEG
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: ST_TO_ADDR
// end ; 1 :
42062: GO 47959
42064: LD_INT 1
42066: DOUBLE
42067: EQUAL
42068: IFTRUE 42072
42070: GO 44695
42072: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42073: LD_ADDR_VAR 0 11
42077: PUSH
42078: LD_INT 1
42080: NEG
42081: PUSH
42082: LD_INT 3
42084: NEG
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 0
42092: PUSH
42093: LD_INT 3
42095: NEG
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: PUSH
42104: LD_INT 2
42106: NEG
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: LIST
42116: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42117: LD_ADDR_VAR 0 12
42121: PUSH
42122: LD_INT 2
42124: PUSH
42125: LD_INT 1
42127: NEG
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 3
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 3
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: LIST
42157: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42158: LD_ADDR_VAR 0 13
42162: PUSH
42163: LD_INT 3
42165: PUSH
42166: LD_INT 2
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 3
42175: PUSH
42176: LD_INT 3
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 2
42185: PUSH
42186: LD_INT 3
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: LIST
42197: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42198: LD_ADDR_VAR 0 14
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: LD_INT 3
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: LD_INT 3
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 1
42225: NEG
42226: PUSH
42227: LD_INT 2
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: LIST
42238: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42239: LD_ADDR_VAR 0 15
42243: PUSH
42244: LD_INT 2
42246: NEG
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 3
42257: NEG
42258: PUSH
42259: LD_INT 0
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 3
42268: NEG
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: LIST
42282: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42283: LD_ADDR_VAR 0 16
42287: PUSH
42288: LD_INT 2
42290: NEG
42291: PUSH
42292: LD_INT 3
42294: NEG
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 3
42302: NEG
42303: PUSH
42304: LD_INT 2
42306: NEG
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 3
42314: NEG
42315: PUSH
42316: LD_INT 3
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: LIST
42328: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42329: LD_ADDR_VAR 0 17
42333: PUSH
42334: LD_INT 1
42336: NEG
42337: PUSH
42338: LD_INT 3
42340: NEG
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: LD_INT 3
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: LD_INT 2
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: LIST
42372: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42373: LD_ADDR_VAR 0 18
42377: PUSH
42378: LD_INT 2
42380: PUSH
42381: LD_INT 1
42383: NEG
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 3
42391: PUSH
42392: LD_INT 0
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 3
42401: PUSH
42402: LD_INT 1
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: LIST
42413: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42414: LD_ADDR_VAR 0 19
42418: PUSH
42419: LD_INT 3
42421: PUSH
42422: LD_INT 2
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 3
42431: PUSH
42432: LD_INT 3
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 2
42441: PUSH
42442: LD_INT 3
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: LIST
42453: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42454: LD_ADDR_VAR 0 20
42458: PUSH
42459: LD_INT 1
42461: PUSH
42462: LD_INT 3
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: LD_INT 3
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: LD_INT 2
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: LIST
42494: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42495: LD_ADDR_VAR 0 21
42499: PUSH
42500: LD_INT 2
42502: NEG
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 3
42513: NEG
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 3
42524: NEG
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: LIST
42538: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42539: LD_ADDR_VAR 0 22
42543: PUSH
42544: LD_INT 2
42546: NEG
42547: PUSH
42548: LD_INT 3
42550: NEG
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 3
42558: NEG
42559: PUSH
42560: LD_INT 2
42562: NEG
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 3
42570: NEG
42571: PUSH
42572: LD_INT 3
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: LIST
42584: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42585: LD_ADDR_VAR 0 23
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: LD_INT 3
42595: NEG
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 1
42603: NEG
42604: PUSH
42605: LD_INT 4
42607: NEG
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: LD_INT 3
42618: NEG
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: LIST
42628: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42629: LD_ADDR_VAR 0 24
42633: PUSH
42634: LD_INT 3
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 3
42646: PUSH
42647: LD_INT 1
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 4
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: LIST
42669: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42670: LD_ADDR_VAR 0 25
42674: PUSH
42675: LD_INT 3
42677: PUSH
42678: LD_INT 3
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 4
42687: PUSH
42688: LD_INT 3
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 3
42697: PUSH
42698: LD_INT 4
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: LIST
42709: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42710: LD_ADDR_VAR 0 26
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: LD_INT 3
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: PUSH
42728: LD_INT 4
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 1
42737: NEG
42738: PUSH
42739: LD_INT 3
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: LIST
42750: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42751: LD_ADDR_VAR 0 27
42755: PUSH
42756: LD_INT 3
42758: NEG
42759: PUSH
42760: LD_INT 0
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 3
42769: NEG
42770: PUSH
42771: LD_INT 1
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 4
42780: NEG
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: LIST
42794: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42795: LD_ADDR_VAR 0 28
42799: PUSH
42800: LD_INT 3
42802: NEG
42803: PUSH
42804: LD_INT 3
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 3
42814: NEG
42815: PUSH
42816: LD_INT 4
42818: NEG
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 4
42826: NEG
42827: PUSH
42828: LD_INT 3
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: LIST
42840: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42841: LD_ADDR_VAR 0 29
42845: PUSH
42846: LD_INT 1
42848: NEG
42849: PUSH
42850: LD_INT 3
42852: NEG
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: LD_INT 3
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: LD_INT 2
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: LD_INT 4
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: LD_INT 4
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 1
42905: PUSH
42906: LD_INT 3
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 1
42916: NEG
42917: PUSH
42918: LD_INT 5
42920: NEG
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: LD_INT 5
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: LD_INT 4
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: LD_INT 6
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: LD_INT 6
42965: NEG
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: LD_INT 5
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42996: LD_ADDR_VAR 0 30
43000: PUSH
43001: LD_INT 2
43003: PUSH
43004: LD_INT 1
43006: NEG
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 3
43014: PUSH
43015: LD_INT 0
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 3
43024: PUSH
43025: LD_INT 1
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 3
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 4
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 4
43055: PUSH
43056: LD_INT 1
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 4
43065: PUSH
43066: LD_INT 1
43068: NEG
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 5
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 5
43086: PUSH
43087: LD_INT 1
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 5
43096: PUSH
43097: LD_INT 1
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 6
43107: PUSH
43108: LD_INT 0
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 6
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43139: LD_ADDR_VAR 0 31
43143: PUSH
43144: LD_INT 3
43146: PUSH
43147: LD_INT 2
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 3
43156: PUSH
43157: LD_INT 3
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 2
43166: PUSH
43167: LD_INT 3
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 4
43176: PUSH
43177: LD_INT 3
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 4
43186: PUSH
43187: LD_INT 4
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 3
43196: PUSH
43197: LD_INT 4
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 5
43206: PUSH
43207: LD_INT 4
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 5
43216: PUSH
43217: LD_INT 5
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 4
43226: PUSH
43227: LD_INT 5
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 6
43236: PUSH
43237: LD_INT 5
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 6
43246: PUSH
43247: LD_INT 6
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 5
43256: PUSH
43257: LD_INT 6
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43278: LD_ADDR_VAR 0 32
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: LD_INT 3
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 0
43295: PUSH
43296: LD_INT 3
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 1
43305: NEG
43306: PUSH
43307: LD_INT 2
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 1
43316: PUSH
43317: LD_INT 4
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 0
43326: PUSH
43327: LD_INT 4
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: NEG
43337: PUSH
43338: LD_INT 3
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 1
43347: PUSH
43348: LD_INT 5
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 0
43357: PUSH
43358: LD_INT 5
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: LD_INT 4
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 1
43378: PUSH
43379: LD_INT 6
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 0
43388: PUSH
43389: LD_INT 6
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 1
43398: NEG
43399: PUSH
43400: LD_INT 5
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43421: LD_ADDR_VAR 0 33
43425: PUSH
43426: LD_INT 2
43428: NEG
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 3
43439: NEG
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 3
43450: NEG
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 3
43462: NEG
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 4
43473: NEG
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 4
43484: NEG
43485: PUSH
43486: LD_INT 1
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 4
43496: NEG
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 5
43507: NEG
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 5
43518: NEG
43519: PUSH
43520: LD_INT 1
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 5
43530: NEG
43531: PUSH
43532: LD_INT 1
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 6
43541: NEG
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 6
43552: NEG
43553: PUSH
43554: LD_INT 1
43556: NEG
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43576: LD_ADDR_VAR 0 34
43580: PUSH
43581: LD_INT 2
43583: NEG
43584: PUSH
43585: LD_INT 3
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 3
43595: NEG
43596: PUSH
43597: LD_INT 2
43599: NEG
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 3
43607: NEG
43608: PUSH
43609: LD_INT 3
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 3
43619: NEG
43620: PUSH
43621: LD_INT 4
43623: NEG
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 4
43631: NEG
43632: PUSH
43633: LD_INT 3
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 4
43643: NEG
43644: PUSH
43645: LD_INT 4
43647: NEG
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 4
43655: NEG
43656: PUSH
43657: LD_INT 5
43659: NEG
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 5
43667: NEG
43668: PUSH
43669: LD_INT 4
43671: NEG
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 5
43679: NEG
43680: PUSH
43681: LD_INT 5
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 5
43691: NEG
43692: PUSH
43693: LD_INT 6
43695: NEG
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 6
43703: NEG
43704: PUSH
43705: LD_INT 5
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 6
43715: NEG
43716: PUSH
43717: LD_INT 6
43719: NEG
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43739: LD_ADDR_VAR 0 41
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: LD_INT 2
43749: NEG
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: LD_INT 3
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: PUSH
43770: LD_INT 2
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: LIST
43782: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43783: LD_ADDR_VAR 0 42
43787: PUSH
43788: LD_INT 2
43790: PUSH
43791: LD_INT 0
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 2
43800: PUSH
43801: LD_INT 1
43803: NEG
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 3
43811: PUSH
43812: LD_INT 1
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: LIST
43823: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43824: LD_ADDR_VAR 0 43
43828: PUSH
43829: LD_INT 2
43831: PUSH
43832: LD_INT 2
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 3
43841: PUSH
43842: LD_INT 2
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 2
43851: PUSH
43852: LD_INT 3
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: LIST
43863: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43864: LD_ADDR_VAR 0 44
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: LD_INT 2
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: LD_INT 3
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 1
43891: NEG
43892: PUSH
43893: LD_INT 2
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: LIST
43904: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43905: LD_ADDR_VAR 0 45
43909: PUSH
43910: LD_INT 2
43912: NEG
43913: PUSH
43914: LD_INT 0
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 2
43923: NEG
43924: PUSH
43925: LD_INT 1
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 3
43934: NEG
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: LIST
43948: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43949: LD_ADDR_VAR 0 46
43953: PUSH
43954: LD_INT 2
43956: NEG
43957: PUSH
43958: LD_INT 2
43960: NEG
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 2
43968: NEG
43969: PUSH
43970: LD_INT 3
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 3
43980: NEG
43981: PUSH
43982: LD_INT 2
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: LIST
43994: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43995: LD_ADDR_VAR 0 47
43999: PUSH
44000: LD_INT 2
44002: NEG
44003: PUSH
44004: LD_INT 3
44006: NEG
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: NEG
44015: PUSH
44016: LD_INT 3
44018: NEG
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44028: LD_ADDR_VAR 0 48
44032: PUSH
44033: LD_INT 1
44035: PUSH
44036: LD_INT 2
44038: NEG
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 2
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44059: LD_ADDR_VAR 0 49
44063: PUSH
44064: LD_INT 3
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 3
44076: PUSH
44077: LD_INT 2
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44088: LD_ADDR_VAR 0 50
44092: PUSH
44093: LD_INT 2
44095: PUSH
44096: LD_INT 3
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: LD_INT 3
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44117: LD_ADDR_VAR 0 51
44121: PUSH
44122: LD_INT 1
44124: NEG
44125: PUSH
44126: LD_INT 2
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 2
44135: NEG
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44148: LD_ADDR_VAR 0 52
44152: PUSH
44153: LD_INT 3
44155: NEG
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 3
44167: NEG
44168: PUSH
44169: LD_INT 2
44171: NEG
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44181: LD_ADDR_VAR 0 53
44185: PUSH
44186: LD_INT 1
44188: NEG
44189: PUSH
44190: LD_INT 3
44192: NEG
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: LD_INT 3
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: LD_INT 2
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: LIST
44224: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44225: LD_ADDR_VAR 0 54
44229: PUSH
44230: LD_INT 2
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 3
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 3
44253: PUSH
44254: LD_INT 1
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: LIST
44265: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44266: LD_ADDR_VAR 0 55
44270: PUSH
44271: LD_INT 3
44273: PUSH
44274: LD_INT 2
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 3
44283: PUSH
44284: LD_INT 3
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 2
44293: PUSH
44294: LD_INT 3
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: LIST
44305: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44306: LD_ADDR_VAR 0 56
44310: PUSH
44311: LD_INT 1
44313: PUSH
44314: LD_INT 3
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: LD_INT 3
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 1
44333: NEG
44334: PUSH
44335: LD_INT 2
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: LIST
44346: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44347: LD_ADDR_VAR 0 57
44351: PUSH
44352: LD_INT 2
44354: NEG
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 3
44365: NEG
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 3
44376: NEG
44377: PUSH
44378: LD_INT 1
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: LIST
44390: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44391: LD_ADDR_VAR 0 58
44395: PUSH
44396: LD_INT 2
44398: NEG
44399: PUSH
44400: LD_INT 3
44402: NEG
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 3
44410: NEG
44411: PUSH
44412: LD_INT 2
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 3
44422: NEG
44423: PUSH
44424: LD_INT 3
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: LIST
44436: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44437: LD_ADDR_VAR 0 59
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: LD_INT 2
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: LD_INT 2
44459: NEG
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 1
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: LIST
44480: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44481: LD_ADDR_VAR 0 60
44485: PUSH
44486: LD_INT 1
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 2
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 2
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: LIST
44521: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44522: LD_ADDR_VAR 0 61
44526: PUSH
44527: LD_INT 2
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 2
44539: PUSH
44540: LD_INT 2
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: LD_INT 2
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: LIST
44561: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44562: LD_ADDR_VAR 0 62
44566: PUSH
44567: LD_INT 1
44569: PUSH
44570: LD_INT 2
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: LD_INT 2
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: LIST
44602: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44603: LD_ADDR_VAR 0 63
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 2
44621: NEG
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 2
44632: NEG
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: LIST
44646: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44647: LD_ADDR_VAR 0 64
44651: PUSH
44652: LD_INT 1
44654: NEG
44655: PUSH
44656: LD_INT 2
44658: NEG
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 2
44666: NEG
44667: PUSH
44668: LD_INT 1
44670: NEG
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 2
44678: NEG
44679: PUSH
44680: LD_INT 2
44682: NEG
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: LIST
44692: ST_TO_ADDR
// end ; 2 :
44693: GO 47959
44695: LD_INT 2
44697: DOUBLE
44698: EQUAL
44699: IFTRUE 44703
44701: GO 47958
44703: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44704: LD_ADDR_VAR 0 29
44708: PUSH
44709: LD_INT 4
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 4
44721: PUSH
44722: LD_INT 1
44724: NEG
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 5
44732: PUSH
44733: LD_INT 0
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 5
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 4
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 3
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 3
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 3
44783: PUSH
44784: LD_INT 2
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 5
44794: PUSH
44795: LD_INT 2
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 3
44804: PUSH
44805: LD_INT 3
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 3
44814: PUSH
44815: LD_INT 2
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 4
44824: PUSH
44825: LD_INT 3
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 4
44834: PUSH
44835: LD_INT 4
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 3
44844: PUSH
44845: LD_INT 4
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: LD_INT 3
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 2
44864: PUSH
44865: LD_INT 2
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 4
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 2
44884: PUSH
44885: LD_INT 4
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: LD_INT 4
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: LD_INT 3
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: LD_INT 4
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: PUSH
44925: LD_INT 5
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: LD_INT 5
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: LD_INT 4
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: NEG
44956: PUSH
44957: LD_INT 3
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 2
44966: PUSH
44967: LD_INT 5
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 2
44976: NEG
44977: PUSH
44978: LD_INT 3
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 3
44987: NEG
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 3
44998: NEG
44999: PUSH
45000: LD_INT 1
45002: NEG
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: NEG
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 2
45021: NEG
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 3
45032: NEG
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 4
45043: NEG
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 4
45054: NEG
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 4
45066: NEG
45067: PUSH
45068: LD_INT 2
45070: NEG
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 2
45078: NEG
45079: PUSH
45080: LD_INT 2
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 4
45089: NEG
45090: PUSH
45091: LD_INT 4
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 4
45101: NEG
45102: PUSH
45103: LD_INT 5
45105: NEG
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 3
45113: NEG
45114: PUSH
45115: LD_INT 4
45117: NEG
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 3
45125: NEG
45126: PUSH
45127: LD_INT 3
45129: NEG
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 4
45137: NEG
45138: PUSH
45139: LD_INT 3
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 5
45149: NEG
45150: PUSH
45151: LD_INT 4
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 5
45161: NEG
45162: PUSH
45163: LD_INT 5
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 3
45173: NEG
45174: PUSH
45175: LD_INT 5
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 5
45185: NEG
45186: PUSH
45187: LD_INT 3
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45242: LD_ADDR_VAR 0 30
45246: PUSH
45247: LD_INT 4
45249: PUSH
45250: LD_INT 4
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 4
45259: PUSH
45260: LD_INT 3
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 5
45269: PUSH
45270: LD_INT 4
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 5
45279: PUSH
45280: LD_INT 5
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 4
45289: PUSH
45290: LD_INT 5
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 3
45299: PUSH
45300: LD_INT 4
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 3
45309: PUSH
45310: LD_INT 3
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 5
45319: PUSH
45320: LD_INT 3
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 3
45329: PUSH
45330: LD_INT 5
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: LD_INT 3
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: LD_INT 2
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: LD_INT 3
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: PUSH
45370: LD_INT 4
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: LD_INT 4
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: LD_INT 3
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: NEG
45401: PUSH
45402: LD_INT 2
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 2
45411: PUSH
45412: LD_INT 4
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: LD_INT 2
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 4
45432: NEG
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 4
45443: NEG
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 3
45455: NEG
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 3
45466: NEG
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 4
45477: NEG
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 5
45488: NEG
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 5
45499: NEG
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 5
45511: NEG
45512: PUSH
45513: LD_INT 2
45515: NEG
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 3
45523: NEG
45524: PUSH
45525: LD_INT 2
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 3
45534: NEG
45535: PUSH
45536: LD_INT 3
45538: NEG
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 3
45546: NEG
45547: PUSH
45548: LD_INT 4
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 2
45558: NEG
45559: PUSH
45560: LD_INT 3
45562: NEG
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 2
45570: NEG
45571: PUSH
45572: LD_INT 2
45574: NEG
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 3
45582: NEG
45583: PUSH
45584: LD_INT 2
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 4
45594: NEG
45595: PUSH
45596: LD_INT 3
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 4
45606: NEG
45607: PUSH
45608: LD_INT 4
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 2
45618: NEG
45619: PUSH
45620: LD_INT 4
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 4
45630: NEG
45631: PUSH
45632: LD_INT 2
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 4
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: LD_INT 5
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: PUSH
45665: LD_INT 4
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: LD_INT 3
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: LD_INT 3
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: LD_INT 4
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: LD_INT 5
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: LD_INT 3
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 2
45732: NEG
45733: PUSH
45734: LD_INT 5
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45789: LD_ADDR_VAR 0 31
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: LD_INT 4
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: LD_INT 3
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: LD_INT 4
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: LD_INT 5
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: LD_INT 5
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: LD_INT 4
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 1
45857: NEG
45858: PUSH
45859: LD_INT 3
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 2
45868: PUSH
45869: LD_INT 5
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 2
45878: NEG
45879: PUSH
45880: LD_INT 3
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 3
45889: NEG
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 3
45900: NEG
45901: PUSH
45902: LD_INT 1
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 2
45912: NEG
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 2
45923: NEG
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 3
45934: NEG
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 4
45945: NEG
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 4
45956: NEG
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 4
45968: NEG
45969: PUSH
45970: LD_INT 2
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 2
45980: NEG
45981: PUSH
45982: LD_INT 2
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 4
45991: NEG
45992: PUSH
45993: LD_INT 4
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 4
46003: NEG
46004: PUSH
46005: LD_INT 5
46007: NEG
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 3
46015: NEG
46016: PUSH
46017: LD_INT 4
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 3
46027: NEG
46028: PUSH
46029: LD_INT 3
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 4
46039: NEG
46040: PUSH
46041: LD_INT 3
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 5
46051: NEG
46052: PUSH
46053: LD_INT 4
46055: NEG
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 5
46063: NEG
46064: PUSH
46065: LD_INT 5
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 3
46075: NEG
46076: PUSH
46077: LD_INT 5
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 5
46087: NEG
46088: PUSH
46089: LD_INT 3
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: LD_INT 3
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: LD_INT 4
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: LD_INT 3
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: LD_INT 2
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: LD_INT 2
46146: NEG
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: LD_INT 3
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: LD_INT 4
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 2
46178: PUSH
46179: LD_INT 2
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 2
46189: NEG
46190: PUSH
46191: LD_INT 4
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 4
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 4
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 5
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 5
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 4
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 3
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 3
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 3
46273: PUSH
46274: LD_INT 2
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 5
46284: PUSH
46285: LD_INT 2
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46339: LD_ADDR_VAR 0 32
46343: PUSH
46344: LD_INT 4
46346: NEG
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 4
46357: NEG
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 3
46369: NEG
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 3
46380: NEG
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 4
46391: NEG
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 5
46402: NEG
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 5
46413: NEG
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 5
46425: NEG
46426: PUSH
46427: LD_INT 2
46429: NEG
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 3
46437: NEG
46438: PUSH
46439: LD_INT 2
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 3
46448: NEG
46449: PUSH
46450: LD_INT 3
46452: NEG
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 3
46460: NEG
46461: PUSH
46462: LD_INT 4
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 2
46472: NEG
46473: PUSH
46474: LD_INT 3
46476: NEG
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 2
46484: NEG
46485: PUSH
46486: LD_INT 2
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 3
46496: NEG
46497: PUSH
46498: LD_INT 2
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 4
46508: NEG
46509: PUSH
46510: LD_INT 3
46512: NEG
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 4
46520: NEG
46521: PUSH
46522: LD_INT 4
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 2
46532: NEG
46533: PUSH
46534: LD_INT 4
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 4
46544: NEG
46545: PUSH
46546: LD_INT 2
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: LD_INT 4
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: LD_INT 5
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: LD_INT 4
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: LD_INT 3
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: LD_INT 3
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: LD_INT 4
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: LD_INT 5
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 2
46635: PUSH
46636: LD_INT 3
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 2
46646: NEG
46647: PUSH
46648: LD_INT 5
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 3
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 3
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 4
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 4
46689: PUSH
46690: LD_INT 1
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 3
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 2
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 2
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 4
46741: PUSH
46742: LD_INT 2
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 4
46751: PUSH
46752: LD_INT 4
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 4
46761: PUSH
46762: LD_INT 3
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 5
46771: PUSH
46772: LD_INT 4
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 5
46781: PUSH
46782: LD_INT 5
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 4
46791: PUSH
46792: LD_INT 5
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 3
46801: PUSH
46802: LD_INT 4
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 3
46811: PUSH
46812: LD_INT 3
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 5
46821: PUSH
46822: LD_INT 3
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 3
46831: PUSH
46832: LD_INT 5
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46886: LD_ADDR_VAR 0 33
46890: PUSH
46891: LD_INT 4
46893: NEG
46894: PUSH
46895: LD_INT 4
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 4
46905: NEG
46906: PUSH
46907: LD_INT 5
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 3
46917: NEG
46918: PUSH
46919: LD_INT 4
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 3
46929: NEG
46930: PUSH
46931: LD_INT 3
46933: NEG
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 4
46941: NEG
46942: PUSH
46943: LD_INT 3
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 5
46953: NEG
46954: PUSH
46955: LD_INT 4
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 5
46965: NEG
46966: PUSH
46967: LD_INT 5
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 3
46977: NEG
46978: PUSH
46979: LD_INT 5
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 5
46989: NEG
46990: PUSH
46991: LD_INT 3
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: LD_INT 3
47004: NEG
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: LD_INT 4
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 1
47023: PUSH
47024: LD_INT 3
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: LD_INT 2
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: LD_INT 2
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: LD_INT 3
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: LD_INT 4
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 2
47080: PUSH
47081: LD_INT 2
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 2
47091: NEG
47092: PUSH
47093: LD_INT 4
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 4
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 4
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 5
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 5
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 4
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 3
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 3
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 3
47175: PUSH
47176: LD_INT 2
47178: NEG
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 5
47186: PUSH
47187: LD_INT 2
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 3
47196: PUSH
47197: LD_INT 3
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 3
47206: PUSH
47207: LD_INT 2
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 4
47216: PUSH
47217: LD_INT 3
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 4
47226: PUSH
47227: LD_INT 4
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 3
47236: PUSH
47237: LD_INT 4
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 2
47246: PUSH
47247: LD_INT 3
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 2
47256: PUSH
47257: LD_INT 2
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 4
47266: PUSH
47267: LD_INT 2
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 2
47276: PUSH
47277: LD_INT 4
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 0
47286: PUSH
47287: LD_INT 4
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: LD_INT 3
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: LD_INT 4
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 5
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: LD_INT 5
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: LD_INT 4
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: LD_INT 3
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 2
47358: PUSH
47359: LD_INT 5
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 2
47368: NEG
47369: PUSH
47370: LD_INT 3
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47424: LD_ADDR_VAR 0 34
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: LD_INT 4
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: LD_INT 5
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: LD_INT 4
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: LD_INT 3
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 0
47475: PUSH
47476: LD_INT 3
47478: NEG
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: LD_INT 4
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: LD_INT 5
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 2
47510: PUSH
47511: LD_INT 3
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 2
47521: NEG
47522: PUSH
47523: LD_INT 5
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 3
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 3
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 4
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 4
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 3
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 2
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 2
47594: PUSH
47595: LD_INT 1
47597: NEG
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: LD_INT 2
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 4
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 4
47626: PUSH
47627: LD_INT 4
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 4
47636: PUSH
47637: LD_INT 3
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 5
47646: PUSH
47647: LD_INT 4
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 5
47656: PUSH
47657: LD_INT 5
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 4
47666: PUSH
47667: LD_INT 5
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 3
47676: PUSH
47677: LD_INT 4
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 3
47686: PUSH
47687: LD_INT 3
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 5
47696: PUSH
47697: LD_INT 3
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 3
47706: PUSH
47707: LD_INT 5
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: LD_INT 3
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: LD_INT 3
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: LD_INT 4
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: LD_INT 4
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: NEG
47767: PUSH
47768: LD_INT 3
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: LD_INT 4
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 2
47798: NEG
47799: PUSH
47800: LD_INT 2
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 4
47809: NEG
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 4
47820: NEG
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 3
47832: NEG
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 3
47843: NEG
47844: PUSH
47845: LD_INT 1
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 4
47854: NEG
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 5
47865: NEG
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 5
47876: NEG
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 5
47888: NEG
47889: PUSH
47890: LD_INT 2
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 3
47900: NEG
47901: PUSH
47902: LD_INT 2
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: ST_TO_ADDR
// end ; end ;
47956: GO 47959
47958: POP
// case btype of b_depot , b_warehouse :
47959: LD_VAR 0 1
47963: PUSH
47964: LD_INT 0
47966: DOUBLE
47967: EQUAL
47968: IFTRUE 47978
47970: LD_INT 1
47972: DOUBLE
47973: EQUAL
47974: IFTRUE 47978
47976: GO 48179
47978: POP
// case nation of nation_american :
47979: LD_VAR 0 5
47983: PUSH
47984: LD_INT 1
47986: DOUBLE
47987: EQUAL
47988: IFTRUE 47992
47990: GO 48048
47992: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47993: LD_ADDR_VAR 0 9
47997: PUSH
47998: LD_VAR 0 11
48002: PUSH
48003: LD_VAR 0 12
48007: PUSH
48008: LD_VAR 0 13
48012: PUSH
48013: LD_VAR 0 14
48017: PUSH
48018: LD_VAR 0 15
48022: PUSH
48023: LD_VAR 0 16
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: PUSH
48036: LD_VAR 0 4
48040: PUSH
48041: LD_INT 1
48043: PLUS
48044: ARRAY
48045: ST_TO_ADDR
48046: GO 48177
48048: LD_INT 2
48050: DOUBLE
48051: EQUAL
48052: IFTRUE 48056
48054: GO 48112
48056: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48057: LD_ADDR_VAR 0 9
48061: PUSH
48062: LD_VAR 0 17
48066: PUSH
48067: LD_VAR 0 18
48071: PUSH
48072: LD_VAR 0 19
48076: PUSH
48077: LD_VAR 0 20
48081: PUSH
48082: LD_VAR 0 21
48086: PUSH
48087: LD_VAR 0 22
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: PUSH
48100: LD_VAR 0 4
48104: PUSH
48105: LD_INT 1
48107: PLUS
48108: ARRAY
48109: ST_TO_ADDR
48110: GO 48177
48112: LD_INT 3
48114: DOUBLE
48115: EQUAL
48116: IFTRUE 48120
48118: GO 48176
48120: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48121: LD_ADDR_VAR 0 9
48125: PUSH
48126: LD_VAR 0 23
48130: PUSH
48131: LD_VAR 0 24
48135: PUSH
48136: LD_VAR 0 25
48140: PUSH
48141: LD_VAR 0 26
48145: PUSH
48146: LD_VAR 0 27
48150: PUSH
48151: LD_VAR 0 28
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: PUSH
48164: LD_VAR 0 4
48168: PUSH
48169: LD_INT 1
48171: PLUS
48172: ARRAY
48173: ST_TO_ADDR
48174: GO 48177
48176: POP
48177: GO 48732
48179: LD_INT 2
48181: DOUBLE
48182: EQUAL
48183: IFTRUE 48193
48185: LD_INT 3
48187: DOUBLE
48188: EQUAL
48189: IFTRUE 48193
48191: GO 48249
48193: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48194: LD_ADDR_VAR 0 9
48198: PUSH
48199: LD_VAR 0 29
48203: PUSH
48204: LD_VAR 0 30
48208: PUSH
48209: LD_VAR 0 31
48213: PUSH
48214: LD_VAR 0 32
48218: PUSH
48219: LD_VAR 0 33
48223: PUSH
48224: LD_VAR 0 34
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: PUSH
48237: LD_VAR 0 4
48241: PUSH
48242: LD_INT 1
48244: PLUS
48245: ARRAY
48246: ST_TO_ADDR
48247: GO 48732
48249: LD_INT 16
48251: DOUBLE
48252: EQUAL
48253: IFTRUE 48311
48255: LD_INT 17
48257: DOUBLE
48258: EQUAL
48259: IFTRUE 48311
48261: LD_INT 18
48263: DOUBLE
48264: EQUAL
48265: IFTRUE 48311
48267: LD_INT 19
48269: DOUBLE
48270: EQUAL
48271: IFTRUE 48311
48273: LD_INT 22
48275: DOUBLE
48276: EQUAL
48277: IFTRUE 48311
48279: LD_INT 20
48281: DOUBLE
48282: EQUAL
48283: IFTRUE 48311
48285: LD_INT 21
48287: DOUBLE
48288: EQUAL
48289: IFTRUE 48311
48291: LD_INT 23
48293: DOUBLE
48294: EQUAL
48295: IFTRUE 48311
48297: LD_INT 24
48299: DOUBLE
48300: EQUAL
48301: IFTRUE 48311
48303: LD_INT 25
48305: DOUBLE
48306: EQUAL
48307: IFTRUE 48311
48309: GO 48367
48311: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48312: LD_ADDR_VAR 0 9
48316: PUSH
48317: LD_VAR 0 35
48321: PUSH
48322: LD_VAR 0 36
48326: PUSH
48327: LD_VAR 0 37
48331: PUSH
48332: LD_VAR 0 38
48336: PUSH
48337: LD_VAR 0 39
48341: PUSH
48342: LD_VAR 0 40
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: PUSH
48355: LD_VAR 0 4
48359: PUSH
48360: LD_INT 1
48362: PLUS
48363: ARRAY
48364: ST_TO_ADDR
48365: GO 48732
48367: LD_INT 6
48369: DOUBLE
48370: EQUAL
48371: IFTRUE 48423
48373: LD_INT 7
48375: DOUBLE
48376: EQUAL
48377: IFTRUE 48423
48379: LD_INT 8
48381: DOUBLE
48382: EQUAL
48383: IFTRUE 48423
48385: LD_INT 13
48387: DOUBLE
48388: EQUAL
48389: IFTRUE 48423
48391: LD_INT 12
48393: DOUBLE
48394: EQUAL
48395: IFTRUE 48423
48397: LD_INT 15
48399: DOUBLE
48400: EQUAL
48401: IFTRUE 48423
48403: LD_INT 11
48405: DOUBLE
48406: EQUAL
48407: IFTRUE 48423
48409: LD_INT 14
48411: DOUBLE
48412: EQUAL
48413: IFTRUE 48423
48415: LD_INT 10
48417: DOUBLE
48418: EQUAL
48419: IFTRUE 48423
48421: GO 48479
48423: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48424: LD_ADDR_VAR 0 9
48428: PUSH
48429: LD_VAR 0 41
48433: PUSH
48434: LD_VAR 0 42
48438: PUSH
48439: LD_VAR 0 43
48443: PUSH
48444: LD_VAR 0 44
48448: PUSH
48449: LD_VAR 0 45
48453: PUSH
48454: LD_VAR 0 46
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: PUSH
48467: LD_VAR 0 4
48471: PUSH
48472: LD_INT 1
48474: PLUS
48475: ARRAY
48476: ST_TO_ADDR
48477: GO 48732
48479: LD_INT 36
48481: DOUBLE
48482: EQUAL
48483: IFTRUE 48487
48485: GO 48543
48487: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48488: LD_ADDR_VAR 0 9
48492: PUSH
48493: LD_VAR 0 47
48497: PUSH
48498: LD_VAR 0 48
48502: PUSH
48503: LD_VAR 0 49
48507: PUSH
48508: LD_VAR 0 50
48512: PUSH
48513: LD_VAR 0 51
48517: PUSH
48518: LD_VAR 0 52
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: PUSH
48531: LD_VAR 0 4
48535: PUSH
48536: LD_INT 1
48538: PLUS
48539: ARRAY
48540: ST_TO_ADDR
48541: GO 48732
48543: LD_INT 4
48545: DOUBLE
48546: EQUAL
48547: IFTRUE 48569
48549: LD_INT 5
48551: DOUBLE
48552: EQUAL
48553: IFTRUE 48569
48555: LD_INT 34
48557: DOUBLE
48558: EQUAL
48559: IFTRUE 48569
48561: LD_INT 37
48563: DOUBLE
48564: EQUAL
48565: IFTRUE 48569
48567: GO 48625
48569: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48570: LD_ADDR_VAR 0 9
48574: PUSH
48575: LD_VAR 0 53
48579: PUSH
48580: LD_VAR 0 54
48584: PUSH
48585: LD_VAR 0 55
48589: PUSH
48590: LD_VAR 0 56
48594: PUSH
48595: LD_VAR 0 57
48599: PUSH
48600: LD_VAR 0 58
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: PUSH
48613: LD_VAR 0 4
48617: PUSH
48618: LD_INT 1
48620: PLUS
48621: ARRAY
48622: ST_TO_ADDR
48623: GO 48732
48625: LD_INT 31
48627: DOUBLE
48628: EQUAL
48629: IFTRUE 48675
48631: LD_INT 32
48633: DOUBLE
48634: EQUAL
48635: IFTRUE 48675
48637: LD_INT 33
48639: DOUBLE
48640: EQUAL
48641: IFTRUE 48675
48643: LD_INT 27
48645: DOUBLE
48646: EQUAL
48647: IFTRUE 48675
48649: LD_INT 26
48651: DOUBLE
48652: EQUAL
48653: IFTRUE 48675
48655: LD_INT 28
48657: DOUBLE
48658: EQUAL
48659: IFTRUE 48675
48661: LD_INT 29
48663: DOUBLE
48664: EQUAL
48665: IFTRUE 48675
48667: LD_INT 30
48669: DOUBLE
48670: EQUAL
48671: IFTRUE 48675
48673: GO 48731
48675: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48676: LD_ADDR_VAR 0 9
48680: PUSH
48681: LD_VAR 0 59
48685: PUSH
48686: LD_VAR 0 60
48690: PUSH
48691: LD_VAR 0 61
48695: PUSH
48696: LD_VAR 0 62
48700: PUSH
48701: LD_VAR 0 63
48705: PUSH
48706: LD_VAR 0 64
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: PUSH
48719: LD_VAR 0 4
48723: PUSH
48724: LD_INT 1
48726: PLUS
48727: ARRAY
48728: ST_TO_ADDR
48729: GO 48732
48731: POP
// temp_list2 = [ ] ;
48732: LD_ADDR_VAR 0 10
48736: PUSH
48737: EMPTY
48738: ST_TO_ADDR
// for i in temp_list do
48739: LD_ADDR_VAR 0 8
48743: PUSH
48744: LD_VAR 0 9
48748: PUSH
48749: FOR_IN
48750: IFFALSE 48802
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48752: LD_ADDR_VAR 0 10
48756: PUSH
48757: LD_VAR 0 10
48761: PUSH
48762: LD_VAR 0 8
48766: PUSH
48767: LD_INT 1
48769: ARRAY
48770: PUSH
48771: LD_VAR 0 2
48775: PLUS
48776: PUSH
48777: LD_VAR 0 8
48781: PUSH
48782: LD_INT 2
48784: ARRAY
48785: PUSH
48786: LD_VAR 0 3
48790: PLUS
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: EMPTY
48797: LIST
48798: ADD
48799: ST_TO_ADDR
48800: GO 48749
48802: POP
48803: POP
// result = temp_list2 ;
48804: LD_ADDR_VAR 0 7
48808: PUSH
48809: LD_VAR 0 10
48813: ST_TO_ADDR
// end ;
48814: LD_VAR 0 7
48818: RET
// export function EnemyInRange ( unit , dist ) ; begin
48819: LD_INT 0
48821: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48822: LD_ADDR_VAR 0 3
48826: PUSH
48827: LD_VAR 0 1
48831: PPUSH
48832: CALL_OW 255
48836: PPUSH
48837: LD_VAR 0 1
48841: PPUSH
48842: CALL_OW 250
48846: PPUSH
48847: LD_VAR 0 1
48851: PPUSH
48852: CALL_OW 251
48856: PPUSH
48857: LD_VAR 0 2
48861: PPUSH
48862: CALL 22076 0 4
48866: PUSH
48867: LD_INT 4
48869: ARRAY
48870: ST_TO_ADDR
// end ;
48871: LD_VAR 0 3
48875: RET
// export function PlayerSeeMe ( unit ) ; begin
48876: LD_INT 0
48878: PPUSH
// result := See ( your_side , unit ) ;
48879: LD_ADDR_VAR 0 2
48883: PUSH
48884: LD_OWVAR 2
48888: PPUSH
48889: LD_VAR 0 1
48893: PPUSH
48894: CALL_OW 292
48898: ST_TO_ADDR
// end ;
48899: LD_VAR 0 2
48903: RET
// export function ReverseDir ( unit ) ; begin
48904: LD_INT 0
48906: PPUSH
// if not unit then
48907: LD_VAR 0 1
48911: NOT
48912: IFFALSE 48916
// exit ;
48914: GO 48939
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48916: LD_ADDR_VAR 0 2
48920: PUSH
48921: LD_VAR 0 1
48925: PPUSH
48926: CALL_OW 254
48930: PUSH
48931: LD_INT 3
48933: PLUS
48934: PUSH
48935: LD_INT 6
48937: MOD
48938: ST_TO_ADDR
// end ;
48939: LD_VAR 0 2
48943: RET
// export function ReverseArray ( array ) ; var i ; begin
48944: LD_INT 0
48946: PPUSH
48947: PPUSH
// if not array then
48948: LD_VAR 0 1
48952: NOT
48953: IFFALSE 48957
// exit ;
48955: GO 49012
// result := [ ] ;
48957: LD_ADDR_VAR 0 2
48961: PUSH
48962: EMPTY
48963: ST_TO_ADDR
// for i := array downto 1 do
48964: LD_ADDR_VAR 0 3
48968: PUSH
48969: DOUBLE
48970: LD_VAR 0 1
48974: INC
48975: ST_TO_ADDR
48976: LD_INT 1
48978: PUSH
48979: FOR_DOWNTO
48980: IFFALSE 49010
// result := Join ( result , array [ i ] ) ;
48982: LD_ADDR_VAR 0 2
48986: PUSH
48987: LD_VAR 0 2
48991: PPUSH
48992: LD_VAR 0 1
48996: PUSH
48997: LD_VAR 0 3
49001: ARRAY
49002: PPUSH
49003: CALL 53854 0 2
49007: ST_TO_ADDR
49008: GO 48979
49010: POP
49011: POP
// end ;
49012: LD_VAR 0 2
49016: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49017: LD_INT 0
49019: PPUSH
49020: PPUSH
49021: PPUSH
49022: PPUSH
49023: PPUSH
49024: PPUSH
// if not unit or not hexes then
49025: LD_VAR 0 1
49029: NOT
49030: IFTRUE 49039
49032: PUSH
49033: LD_VAR 0 2
49037: NOT
49038: OR
49039: IFFALSE 49043
// exit ;
49041: GO 49166
// dist := 9999 ;
49043: LD_ADDR_VAR 0 5
49047: PUSH
49048: LD_INT 9999
49050: ST_TO_ADDR
// for i = 1 to hexes do
49051: LD_ADDR_VAR 0 4
49055: PUSH
49056: DOUBLE
49057: LD_INT 1
49059: DEC
49060: ST_TO_ADDR
49061: LD_VAR 0 2
49065: PUSH
49066: FOR_TO
49067: IFFALSE 49154
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49069: LD_ADDR_VAR 0 6
49073: PUSH
49074: LD_VAR 0 1
49078: PPUSH
49079: LD_VAR 0 2
49083: PUSH
49084: LD_VAR 0 4
49088: ARRAY
49089: PUSH
49090: LD_INT 1
49092: ARRAY
49093: PPUSH
49094: LD_VAR 0 2
49098: PUSH
49099: LD_VAR 0 4
49103: ARRAY
49104: PUSH
49105: LD_INT 2
49107: ARRAY
49108: PPUSH
49109: CALL_OW 297
49113: ST_TO_ADDR
// if tdist < dist then
49114: LD_VAR 0 6
49118: PUSH
49119: LD_VAR 0 5
49123: LESS
49124: IFFALSE 49152
// begin hex := hexes [ i ] ;
49126: LD_ADDR_VAR 0 8
49130: PUSH
49131: LD_VAR 0 2
49135: PUSH
49136: LD_VAR 0 4
49140: ARRAY
49141: ST_TO_ADDR
// dist := tdist ;
49142: LD_ADDR_VAR 0 5
49146: PUSH
49147: LD_VAR 0 6
49151: ST_TO_ADDR
// end ; end ;
49152: GO 49066
49154: POP
49155: POP
// result := hex ;
49156: LD_ADDR_VAR 0 3
49160: PUSH
49161: LD_VAR 0 8
49165: ST_TO_ADDR
// end ;
49166: LD_VAR 0 3
49170: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49171: LD_INT 0
49173: PPUSH
49174: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49175: LD_VAR 0 1
49179: NOT
49180: IFTRUE 49219
49182: PUSH
49183: LD_VAR 0 1
49187: PUSH
49188: LD_INT 21
49190: PUSH
49191: LD_INT 2
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 23
49200: PUSH
49201: LD_INT 2
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PPUSH
49212: CALL_OW 69
49216: IN
49217: NOT
49218: OR
49219: IFFALSE 49223
// exit ;
49221: GO 49270
// for i = 1 to 3 do
49223: LD_ADDR_VAR 0 3
49227: PUSH
49228: DOUBLE
49229: LD_INT 1
49231: DEC
49232: ST_TO_ADDR
49233: LD_INT 3
49235: PUSH
49236: FOR_TO
49237: IFFALSE 49268
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49239: LD_VAR 0 1
49243: PPUSH
49244: CALL_OW 250
49248: PPUSH
49249: LD_VAR 0 1
49253: PPUSH
49254: CALL_OW 251
49258: PPUSH
49259: LD_INT 1
49261: PPUSH
49262: CALL_OW 453
49266: GO 49236
49268: POP
49269: POP
// end ;
49270: LD_VAR 0 2
49274: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49275: LD_INT 0
49277: PPUSH
49278: PPUSH
49279: PPUSH
49280: PPUSH
49281: PPUSH
49282: PPUSH
// if not unit or not enemy_unit then
49283: LD_VAR 0 1
49287: NOT
49288: IFTRUE 49297
49290: PUSH
49291: LD_VAR 0 2
49295: NOT
49296: OR
49297: IFFALSE 49301
// exit ;
49299: GO 49772
// if GetLives ( i ) < 250 then
49301: LD_VAR 0 4
49305: PPUSH
49306: CALL_OW 256
49310: PUSH
49311: LD_INT 250
49313: LESS
49314: IFFALSE 49327
// begin ComAutodestruct ( i ) ;
49316: LD_VAR 0 4
49320: PPUSH
49321: CALL 49171 0 1
// exit ;
49325: GO 49772
// end ; x := GetX ( enemy_unit ) ;
49327: LD_ADDR_VAR 0 7
49331: PUSH
49332: LD_VAR 0 2
49336: PPUSH
49337: CALL_OW 250
49341: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49342: LD_ADDR_VAR 0 8
49346: PUSH
49347: LD_VAR 0 2
49351: PPUSH
49352: CALL_OW 251
49356: ST_TO_ADDR
// if not x or not y then
49357: LD_VAR 0 7
49361: NOT
49362: IFTRUE 49371
49364: PUSH
49365: LD_VAR 0 8
49369: NOT
49370: OR
49371: IFFALSE 49375
// exit ;
49373: GO 49772
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49375: LD_ADDR_VAR 0 6
49379: PUSH
49380: LD_VAR 0 7
49384: PPUSH
49385: LD_INT 0
49387: PPUSH
49388: LD_INT 4
49390: PPUSH
49391: CALL_OW 272
49395: PUSH
49396: LD_VAR 0 8
49400: PPUSH
49401: LD_INT 0
49403: PPUSH
49404: LD_INT 4
49406: PPUSH
49407: CALL_OW 273
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_VAR 0 7
49420: PPUSH
49421: LD_INT 1
49423: PPUSH
49424: LD_INT 4
49426: PPUSH
49427: CALL_OW 272
49431: PUSH
49432: LD_VAR 0 8
49436: PPUSH
49437: LD_INT 1
49439: PPUSH
49440: LD_INT 4
49442: PPUSH
49443: CALL_OW 273
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_VAR 0 7
49456: PPUSH
49457: LD_INT 2
49459: PPUSH
49460: LD_INT 4
49462: PPUSH
49463: CALL_OW 272
49467: PUSH
49468: LD_VAR 0 8
49472: PPUSH
49473: LD_INT 2
49475: PPUSH
49476: LD_INT 4
49478: PPUSH
49479: CALL_OW 273
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_VAR 0 7
49492: PPUSH
49493: LD_INT 3
49495: PPUSH
49496: LD_INT 4
49498: PPUSH
49499: CALL_OW 272
49503: PUSH
49504: LD_VAR 0 8
49508: PPUSH
49509: LD_INT 3
49511: PPUSH
49512: LD_INT 4
49514: PPUSH
49515: CALL_OW 273
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_VAR 0 7
49528: PPUSH
49529: LD_INT 4
49531: PPUSH
49532: LD_INT 4
49534: PPUSH
49535: CALL_OW 272
49539: PUSH
49540: LD_VAR 0 8
49544: PPUSH
49545: LD_INT 4
49547: PPUSH
49548: LD_INT 4
49550: PPUSH
49551: CALL_OW 273
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_VAR 0 7
49564: PPUSH
49565: LD_INT 5
49567: PPUSH
49568: LD_INT 4
49570: PPUSH
49571: CALL_OW 272
49575: PUSH
49576: LD_VAR 0 8
49580: PPUSH
49581: LD_INT 5
49583: PPUSH
49584: LD_INT 4
49586: PPUSH
49587: CALL_OW 273
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: ST_TO_ADDR
// for i = tmp downto 1 do
49604: LD_ADDR_VAR 0 4
49608: PUSH
49609: DOUBLE
49610: LD_VAR 0 6
49614: INC
49615: ST_TO_ADDR
49616: LD_INT 1
49618: PUSH
49619: FOR_DOWNTO
49620: IFFALSE 49723
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49622: LD_VAR 0 6
49626: PUSH
49627: LD_VAR 0 4
49631: ARRAY
49632: PUSH
49633: LD_INT 1
49635: ARRAY
49636: PPUSH
49637: LD_VAR 0 6
49641: PUSH
49642: LD_VAR 0 4
49646: ARRAY
49647: PUSH
49648: LD_INT 2
49650: ARRAY
49651: PPUSH
49652: CALL_OW 488
49656: NOT
49657: IFTRUE 49699
49659: PUSH
49660: LD_VAR 0 6
49664: PUSH
49665: LD_VAR 0 4
49669: ARRAY
49670: PUSH
49671: LD_INT 1
49673: ARRAY
49674: PPUSH
49675: LD_VAR 0 6
49679: PUSH
49680: LD_VAR 0 4
49684: ARRAY
49685: PUSH
49686: LD_INT 2
49688: ARRAY
49689: PPUSH
49690: CALL_OW 428
49694: PUSH
49695: LD_INT 0
49697: NONEQUAL
49698: OR
49699: IFFALSE 49721
// tmp := Delete ( tmp , i ) ;
49701: LD_ADDR_VAR 0 6
49705: PUSH
49706: LD_VAR 0 6
49710: PPUSH
49711: LD_VAR 0 4
49715: PPUSH
49716: CALL_OW 3
49720: ST_TO_ADDR
49721: GO 49619
49723: POP
49724: POP
// j := GetClosestHex ( unit , tmp ) ;
49725: LD_ADDR_VAR 0 5
49729: PUSH
49730: LD_VAR 0 1
49734: PPUSH
49735: LD_VAR 0 6
49739: PPUSH
49740: CALL 49017 0 2
49744: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49745: LD_VAR 0 1
49749: PPUSH
49750: LD_VAR 0 5
49754: PUSH
49755: LD_INT 1
49757: ARRAY
49758: PPUSH
49759: LD_VAR 0 5
49763: PUSH
49764: LD_INT 2
49766: ARRAY
49767: PPUSH
49768: CALL_OW 111
// end ;
49772: LD_VAR 0 3
49776: RET
// export function PrepareApemanSoldier ( ) ; begin
49777: LD_INT 0
49779: PPUSH
// uc_nation := 0 ;
49780: LD_ADDR_OWVAR 21
49784: PUSH
49785: LD_INT 0
49787: ST_TO_ADDR
// hc_sex := sex_male ;
49788: LD_ADDR_OWVAR 27
49792: PUSH
49793: LD_INT 1
49795: ST_TO_ADDR
// hc_name :=  ;
49796: LD_ADDR_OWVAR 26
49800: PUSH
49801: LD_STRING 
49803: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49804: LD_ADDR_OWVAR 28
49808: PUSH
49809: LD_INT 15
49811: ST_TO_ADDR
// hc_gallery :=  ;
49812: LD_ADDR_OWVAR 33
49816: PUSH
49817: LD_STRING 
49819: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49820: LD_ADDR_OWVAR 31
49824: PUSH
49825: LD_INT 0
49827: PPUSH
49828: LD_INT 3
49830: PPUSH
49831: CALL_OW 12
49835: PUSH
49836: LD_INT 0
49838: PPUSH
49839: LD_INT 3
49841: PPUSH
49842: CALL_OW 12
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49859: LD_ADDR_OWVAR 29
49863: PUSH
49864: LD_INT 12
49866: PUSH
49867: LD_INT 12
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: ST_TO_ADDR
// end ;
49874: LD_VAR 0 1
49878: RET
// export function PrepareApemanEngineer ( ) ; begin
49879: LD_INT 0
49881: PPUSH
// uc_nation := 0 ;
49882: LD_ADDR_OWVAR 21
49886: PUSH
49887: LD_INT 0
49889: ST_TO_ADDR
// hc_sex := sex_male ;
49890: LD_ADDR_OWVAR 27
49894: PUSH
49895: LD_INT 1
49897: ST_TO_ADDR
// hc_name :=  ;
49898: LD_ADDR_OWVAR 26
49902: PUSH
49903: LD_STRING 
49905: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49906: LD_ADDR_OWVAR 28
49910: PUSH
49911: LD_INT 16
49913: ST_TO_ADDR
// hc_gallery :=  ;
49914: LD_ADDR_OWVAR 33
49918: PUSH
49919: LD_STRING 
49921: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49922: LD_ADDR_OWVAR 31
49926: PUSH
49927: LD_INT 0
49929: PPUSH
49930: LD_INT 3
49932: PPUSH
49933: CALL_OW 12
49937: PUSH
49938: LD_INT 0
49940: PPUSH
49941: LD_INT 3
49943: PPUSH
49944: CALL_OW 12
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49961: LD_ADDR_OWVAR 29
49965: PUSH
49966: LD_INT 12
49968: PUSH
49969: LD_INT 12
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: ST_TO_ADDR
// end ;
49976: LD_VAR 0 1
49980: RET
// export function PrepareApeman ( agressivity ) ; begin
49981: LD_INT 0
49983: PPUSH
// uc_side := 0 ;
49984: LD_ADDR_OWVAR 20
49988: PUSH
49989: LD_INT 0
49991: ST_TO_ADDR
// uc_nation := 0 ;
49992: LD_ADDR_OWVAR 21
49996: PUSH
49997: LD_INT 0
49999: ST_TO_ADDR
// hc_sex := sex_male ;
50000: LD_ADDR_OWVAR 27
50004: PUSH
50005: LD_INT 1
50007: ST_TO_ADDR
// hc_class := class_apeman ;
50008: LD_ADDR_OWVAR 28
50012: PUSH
50013: LD_INT 12
50015: ST_TO_ADDR
// hc_gallery :=  ;
50016: LD_ADDR_OWVAR 33
50020: PUSH
50021: LD_STRING 
50023: ST_TO_ADDR
// hc_name :=  ;
50024: LD_ADDR_OWVAR 26
50028: PUSH
50029: LD_STRING 
50031: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
50032: LD_ADDR_OWVAR 29
50036: PUSH
50037: LD_INT 12
50039: PUSH
50040: LD_INT 12
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: ST_TO_ADDR
// if agressivity = 0 then
50047: LD_VAR 0 1
50051: PUSH
50052: LD_INT 0
50054: EQUAL
50055: IFFALSE 50067
// hc_agressivity := 0 else
50057: LD_ADDR_OWVAR 35
50061: PUSH
50062: LD_INT 0
50064: ST_TO_ADDR
50065: GO 50088
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50067: LD_ADDR_OWVAR 35
50071: PUSH
50072: LD_VAR 0 1
50076: NEG
50077: PPUSH
50078: LD_VAR 0 1
50082: PPUSH
50083: CALL_OW 12
50087: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50088: LD_ADDR_OWVAR 31
50092: PUSH
50093: LD_INT 0
50095: PPUSH
50096: LD_INT 3
50098: PPUSH
50099: CALL_OW 12
50103: PUSH
50104: LD_INT 0
50106: PPUSH
50107: LD_INT 3
50109: PPUSH
50110: CALL_OW 12
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: ST_TO_ADDR
// end ;
50127: LD_VAR 0 2
50131: RET
// export function PrepareTiger ( agressivity ) ; begin
50132: LD_INT 0
50134: PPUSH
// uc_side := 0 ;
50135: LD_ADDR_OWVAR 20
50139: PUSH
50140: LD_INT 0
50142: ST_TO_ADDR
// uc_nation := 0 ;
50143: LD_ADDR_OWVAR 21
50147: PUSH
50148: LD_INT 0
50150: ST_TO_ADDR
// InitHc ;
50151: CALL_OW 19
// hc_class := class_tiger ;
50155: LD_ADDR_OWVAR 28
50159: PUSH
50160: LD_INT 14
50162: ST_TO_ADDR
// hc_gallery :=  ;
50163: LD_ADDR_OWVAR 33
50167: PUSH
50168: LD_STRING 
50170: ST_TO_ADDR
// hc_name :=  ;
50171: LD_ADDR_OWVAR 26
50175: PUSH
50176: LD_STRING 
50178: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50179: LD_ADDR_OWVAR 35
50183: PUSH
50184: LD_VAR 0 1
50188: NEG
50189: PPUSH
50190: LD_VAR 0 1
50194: PPUSH
50195: CALL_OW 12
50199: ST_TO_ADDR
// end ;
50200: LD_VAR 0 2
50204: RET
// export function PrepareEnchidna ( ) ; begin
50205: LD_INT 0
50207: PPUSH
// uc_side := 0 ;
50208: LD_ADDR_OWVAR 20
50212: PUSH
50213: LD_INT 0
50215: ST_TO_ADDR
// uc_nation := 0 ;
50216: LD_ADDR_OWVAR 21
50220: PUSH
50221: LD_INT 0
50223: ST_TO_ADDR
// InitHc ;
50224: CALL_OW 19
// hc_class := class_baggie ;
50228: LD_ADDR_OWVAR 28
50232: PUSH
50233: LD_INT 13
50235: ST_TO_ADDR
// hc_gallery :=  ;
50236: LD_ADDR_OWVAR 33
50240: PUSH
50241: LD_STRING 
50243: ST_TO_ADDR
// hc_name :=  ;
50244: LD_ADDR_OWVAR 26
50248: PUSH
50249: LD_STRING 
50251: ST_TO_ADDR
// end ;
50252: LD_VAR 0 1
50256: RET
// export function PrepareFrog ( ) ; begin
50257: LD_INT 0
50259: PPUSH
// uc_side := 0 ;
50260: LD_ADDR_OWVAR 20
50264: PUSH
50265: LD_INT 0
50267: ST_TO_ADDR
// uc_nation := 0 ;
50268: LD_ADDR_OWVAR 21
50272: PUSH
50273: LD_INT 0
50275: ST_TO_ADDR
// InitHc ;
50276: CALL_OW 19
// hc_class := class_frog ;
50280: LD_ADDR_OWVAR 28
50284: PUSH
50285: LD_INT 19
50287: ST_TO_ADDR
// hc_gallery :=  ;
50288: LD_ADDR_OWVAR 33
50292: PUSH
50293: LD_STRING 
50295: ST_TO_ADDR
// hc_name :=  ;
50296: LD_ADDR_OWVAR 26
50300: PUSH
50301: LD_STRING 
50303: ST_TO_ADDR
// end ;
50304: LD_VAR 0 1
50308: RET
// export function PrepareFish ( ) ; begin
50309: LD_INT 0
50311: PPUSH
// uc_side := 0 ;
50312: LD_ADDR_OWVAR 20
50316: PUSH
50317: LD_INT 0
50319: ST_TO_ADDR
// uc_nation := 0 ;
50320: LD_ADDR_OWVAR 21
50324: PUSH
50325: LD_INT 0
50327: ST_TO_ADDR
// InitHc ;
50328: CALL_OW 19
// hc_class := class_fish ;
50332: LD_ADDR_OWVAR 28
50336: PUSH
50337: LD_INT 20
50339: ST_TO_ADDR
// hc_gallery :=  ;
50340: LD_ADDR_OWVAR 33
50344: PUSH
50345: LD_STRING 
50347: ST_TO_ADDR
// hc_name :=  ;
50348: LD_ADDR_OWVAR 26
50352: PUSH
50353: LD_STRING 
50355: ST_TO_ADDR
// end ;
50356: LD_VAR 0 1
50360: RET
// export function PrepareBird ( ) ; begin
50361: LD_INT 0
50363: PPUSH
// uc_side := 0 ;
50364: LD_ADDR_OWVAR 20
50368: PUSH
50369: LD_INT 0
50371: ST_TO_ADDR
// uc_nation := 0 ;
50372: LD_ADDR_OWVAR 21
50376: PUSH
50377: LD_INT 0
50379: ST_TO_ADDR
// InitHc ;
50380: CALL_OW 19
// hc_class := class_phororhacos ;
50384: LD_ADDR_OWVAR 28
50388: PUSH
50389: LD_INT 18
50391: ST_TO_ADDR
// hc_gallery :=  ;
50392: LD_ADDR_OWVAR 33
50396: PUSH
50397: LD_STRING 
50399: ST_TO_ADDR
// hc_name :=  ;
50400: LD_ADDR_OWVAR 26
50404: PUSH
50405: LD_STRING 
50407: ST_TO_ADDR
// end ;
50408: LD_VAR 0 1
50412: RET
// export function PrepareHorse ( ) ; begin
50413: LD_INT 0
50415: PPUSH
// uc_side := 0 ;
50416: LD_ADDR_OWVAR 20
50420: PUSH
50421: LD_INT 0
50423: ST_TO_ADDR
// uc_nation := 0 ;
50424: LD_ADDR_OWVAR 21
50428: PUSH
50429: LD_INT 0
50431: ST_TO_ADDR
// InitHc ;
50432: CALL_OW 19
// hc_class := class_horse ;
50436: LD_ADDR_OWVAR 28
50440: PUSH
50441: LD_INT 21
50443: ST_TO_ADDR
// hc_gallery :=  ;
50444: LD_ADDR_OWVAR 33
50448: PUSH
50449: LD_STRING 
50451: ST_TO_ADDR
// hc_name :=  ;
50452: LD_ADDR_OWVAR 26
50456: PUSH
50457: LD_STRING 
50459: ST_TO_ADDR
// end ;
50460: LD_VAR 0 1
50464: RET
// export function PrepareMastodont ( ) ; begin
50465: LD_INT 0
50467: PPUSH
// uc_side := 0 ;
50468: LD_ADDR_OWVAR 20
50472: PUSH
50473: LD_INT 0
50475: ST_TO_ADDR
// uc_nation := 0 ;
50476: LD_ADDR_OWVAR 21
50480: PUSH
50481: LD_INT 0
50483: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50484: LD_ADDR_OWVAR 37
50488: PUSH
50489: LD_INT 31
50491: ST_TO_ADDR
// vc_control := control_rider ;
50492: LD_ADDR_OWVAR 38
50496: PUSH
50497: LD_INT 4
50499: ST_TO_ADDR
// end ;
50500: LD_VAR 0 1
50504: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50505: LD_INT 0
50507: PPUSH
50508: PPUSH
50509: PPUSH
// uc_side = 0 ;
50510: LD_ADDR_OWVAR 20
50514: PUSH
50515: LD_INT 0
50517: ST_TO_ADDR
// uc_nation = 0 ;
50518: LD_ADDR_OWVAR 21
50522: PUSH
50523: LD_INT 0
50525: ST_TO_ADDR
// InitHc_All ( ) ;
50526: CALL_OW 584
// InitVc ;
50530: CALL_OW 20
// if mastodonts then
50534: LD_VAR 0 6
50538: IFFALSE 50605
// for i = 1 to mastodonts do
50540: LD_ADDR_VAR 0 11
50544: PUSH
50545: DOUBLE
50546: LD_INT 1
50548: DEC
50549: ST_TO_ADDR
50550: LD_VAR 0 6
50554: PUSH
50555: FOR_TO
50556: IFFALSE 50603
// begin vc_chassis := 31 ;
50558: LD_ADDR_OWVAR 37
50562: PUSH
50563: LD_INT 31
50565: ST_TO_ADDR
// vc_control := control_rider ;
50566: LD_ADDR_OWVAR 38
50570: PUSH
50571: LD_INT 4
50573: ST_TO_ADDR
// animal := CreateVehicle ;
50574: LD_ADDR_VAR 0 12
50578: PUSH
50579: CALL_OW 45
50583: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50584: LD_VAR 0 12
50588: PPUSH
50589: LD_VAR 0 8
50593: PPUSH
50594: LD_INT 0
50596: PPUSH
50597: CALL 52747 0 3
// end ;
50601: GO 50555
50603: POP
50604: POP
// if horses then
50605: LD_VAR 0 5
50609: IFFALSE 50676
// for i = 1 to horses do
50611: LD_ADDR_VAR 0 11
50615: PUSH
50616: DOUBLE
50617: LD_INT 1
50619: DEC
50620: ST_TO_ADDR
50621: LD_VAR 0 5
50625: PUSH
50626: FOR_TO
50627: IFFALSE 50674
// begin hc_class := 21 ;
50629: LD_ADDR_OWVAR 28
50633: PUSH
50634: LD_INT 21
50636: ST_TO_ADDR
// hc_gallery :=  ;
50637: LD_ADDR_OWVAR 33
50641: PUSH
50642: LD_STRING 
50644: ST_TO_ADDR
// animal := CreateHuman ;
50645: LD_ADDR_VAR 0 12
50649: PUSH
50650: CALL_OW 44
50654: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50655: LD_VAR 0 12
50659: PPUSH
50660: LD_VAR 0 8
50664: PPUSH
50665: LD_INT 0
50667: PPUSH
50668: CALL 52747 0 3
// end ;
50672: GO 50626
50674: POP
50675: POP
// if birds then
50676: LD_VAR 0 1
50680: IFFALSE 50747
// for i = 1 to birds do
50682: LD_ADDR_VAR 0 11
50686: PUSH
50687: DOUBLE
50688: LD_INT 1
50690: DEC
50691: ST_TO_ADDR
50692: LD_VAR 0 1
50696: PUSH
50697: FOR_TO
50698: IFFALSE 50745
// begin hc_class := 18 ;
50700: LD_ADDR_OWVAR 28
50704: PUSH
50705: LD_INT 18
50707: ST_TO_ADDR
// hc_gallery =  ;
50708: LD_ADDR_OWVAR 33
50712: PUSH
50713: LD_STRING 
50715: ST_TO_ADDR
// animal := CreateHuman ;
50716: LD_ADDR_VAR 0 12
50720: PUSH
50721: CALL_OW 44
50725: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50726: LD_VAR 0 12
50730: PPUSH
50731: LD_VAR 0 8
50735: PPUSH
50736: LD_INT 0
50738: PPUSH
50739: CALL 52747 0 3
// end ;
50743: GO 50697
50745: POP
50746: POP
// if tigers then
50747: LD_VAR 0 2
50751: IFFALSE 50835
// for i = 1 to tigers do
50753: LD_ADDR_VAR 0 11
50757: PUSH
50758: DOUBLE
50759: LD_INT 1
50761: DEC
50762: ST_TO_ADDR
50763: LD_VAR 0 2
50767: PUSH
50768: FOR_TO
50769: IFFALSE 50833
// begin hc_class = class_tiger ;
50771: LD_ADDR_OWVAR 28
50775: PUSH
50776: LD_INT 14
50778: ST_TO_ADDR
// hc_gallery =  ;
50779: LD_ADDR_OWVAR 33
50783: PUSH
50784: LD_STRING 
50786: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50787: LD_ADDR_OWVAR 35
50791: PUSH
50792: LD_INT 7
50794: NEG
50795: PPUSH
50796: LD_INT 7
50798: PPUSH
50799: CALL_OW 12
50803: ST_TO_ADDR
// animal := CreateHuman ;
50804: LD_ADDR_VAR 0 12
50808: PUSH
50809: CALL_OW 44
50813: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50814: LD_VAR 0 12
50818: PPUSH
50819: LD_VAR 0 8
50823: PPUSH
50824: LD_INT 0
50826: PPUSH
50827: CALL 52747 0 3
// end ;
50831: GO 50768
50833: POP
50834: POP
// if apemans then
50835: LD_VAR 0 3
50839: IFFALSE 50962
// for i = 1 to apemans do
50841: LD_ADDR_VAR 0 11
50845: PUSH
50846: DOUBLE
50847: LD_INT 1
50849: DEC
50850: ST_TO_ADDR
50851: LD_VAR 0 3
50855: PUSH
50856: FOR_TO
50857: IFFALSE 50960
// begin hc_class = class_apeman ;
50859: LD_ADDR_OWVAR 28
50863: PUSH
50864: LD_INT 12
50866: ST_TO_ADDR
// hc_gallery =  ;
50867: LD_ADDR_OWVAR 33
50871: PUSH
50872: LD_STRING 
50874: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50875: LD_ADDR_OWVAR 35
50879: PUSH
50880: LD_INT 2
50882: NEG
50883: PPUSH
50884: LD_INT 2
50886: PPUSH
50887: CALL_OW 12
50891: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50892: LD_ADDR_OWVAR 31
50896: PUSH
50897: LD_INT 1
50899: PPUSH
50900: LD_INT 3
50902: PPUSH
50903: CALL_OW 12
50907: PUSH
50908: LD_INT 1
50910: PPUSH
50911: LD_INT 3
50913: PPUSH
50914: CALL_OW 12
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: ST_TO_ADDR
// animal := CreateHuman ;
50931: LD_ADDR_VAR 0 12
50935: PUSH
50936: CALL_OW 44
50940: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50941: LD_VAR 0 12
50945: PPUSH
50946: LD_VAR 0 8
50950: PPUSH
50951: LD_INT 0
50953: PPUSH
50954: CALL 52747 0 3
// end ;
50958: GO 50856
50960: POP
50961: POP
// if enchidnas then
50962: LD_VAR 0 4
50966: IFFALSE 51033
// for i = 1 to enchidnas do
50968: LD_ADDR_VAR 0 11
50972: PUSH
50973: DOUBLE
50974: LD_INT 1
50976: DEC
50977: ST_TO_ADDR
50978: LD_VAR 0 4
50982: PUSH
50983: FOR_TO
50984: IFFALSE 51031
// begin hc_class = 13 ;
50986: LD_ADDR_OWVAR 28
50990: PUSH
50991: LD_INT 13
50993: ST_TO_ADDR
// hc_gallery =  ;
50994: LD_ADDR_OWVAR 33
50998: PUSH
50999: LD_STRING 
51001: ST_TO_ADDR
// animal := CreateHuman ;
51002: LD_ADDR_VAR 0 12
51006: PUSH
51007: CALL_OW 44
51011: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51012: LD_VAR 0 12
51016: PPUSH
51017: LD_VAR 0 8
51021: PPUSH
51022: LD_INT 0
51024: PPUSH
51025: CALL 52747 0 3
// end ;
51029: GO 50983
51031: POP
51032: POP
// if fishes then
51033: LD_VAR 0 7
51037: IFFALSE 51104
// for i = 1 to fishes do
51039: LD_ADDR_VAR 0 11
51043: PUSH
51044: DOUBLE
51045: LD_INT 1
51047: DEC
51048: ST_TO_ADDR
51049: LD_VAR 0 7
51053: PUSH
51054: FOR_TO
51055: IFFALSE 51102
// begin hc_class = 20 ;
51057: LD_ADDR_OWVAR 28
51061: PUSH
51062: LD_INT 20
51064: ST_TO_ADDR
// hc_gallery =  ;
51065: LD_ADDR_OWVAR 33
51069: PUSH
51070: LD_STRING 
51072: ST_TO_ADDR
// animal := CreateHuman ;
51073: LD_ADDR_VAR 0 12
51077: PUSH
51078: CALL_OW 44
51082: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51083: LD_VAR 0 12
51087: PPUSH
51088: LD_VAR 0 9
51092: PPUSH
51093: LD_INT 0
51095: PPUSH
51096: CALL 52747 0 3
// end ;
51100: GO 51054
51102: POP
51103: POP
// end ;
51104: LD_VAR 0 10
51108: RET
// export function WantHeal ( sci , unit ) ; begin
51109: LD_INT 0
51111: PPUSH
// if GetTaskList ( sci ) > 0 then
51112: LD_VAR 0 1
51116: PPUSH
51117: CALL_OW 437
51121: PUSH
51122: LD_INT 0
51124: GREATER
51125: IFFALSE 51197
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51127: LD_VAR 0 1
51131: PPUSH
51132: CALL_OW 437
51136: PUSH
51137: LD_INT 1
51139: ARRAY
51140: PUSH
51141: LD_INT 1
51143: ARRAY
51144: PUSH
51145: LD_STRING l
51147: EQUAL
51148: IFFALSE 51175
51150: PUSH
51151: LD_VAR 0 1
51155: PPUSH
51156: CALL_OW 437
51160: PUSH
51161: LD_INT 1
51163: ARRAY
51164: PUSH
51165: LD_INT 4
51167: ARRAY
51168: PUSH
51169: LD_VAR 0 2
51173: EQUAL
51174: AND
51175: IFFALSE 51187
// result := true else
51177: LD_ADDR_VAR 0 3
51181: PUSH
51182: LD_INT 1
51184: ST_TO_ADDR
51185: GO 51195
// result := false ;
51187: LD_ADDR_VAR 0 3
51191: PUSH
51192: LD_INT 0
51194: ST_TO_ADDR
// end else
51195: GO 51205
// result := false ;
51197: LD_ADDR_VAR 0 3
51201: PUSH
51202: LD_INT 0
51204: ST_TO_ADDR
// end ;
51205: LD_VAR 0 3
51209: RET
// export function HealTarget ( sci ) ; begin
51210: LD_INT 0
51212: PPUSH
// if not sci then
51213: LD_VAR 0 1
51217: NOT
51218: IFFALSE 51222
// exit ;
51220: GO 51287
// result := 0 ;
51222: LD_ADDR_VAR 0 2
51226: PUSH
51227: LD_INT 0
51229: ST_TO_ADDR
// if GetTaskList ( sci ) then
51230: LD_VAR 0 1
51234: PPUSH
51235: CALL_OW 437
51239: IFFALSE 51287
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51241: LD_VAR 0 1
51245: PPUSH
51246: CALL_OW 437
51250: PUSH
51251: LD_INT 1
51253: ARRAY
51254: PUSH
51255: LD_INT 1
51257: ARRAY
51258: PUSH
51259: LD_STRING l
51261: EQUAL
51262: IFFALSE 51287
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51264: LD_ADDR_VAR 0 2
51268: PUSH
51269: LD_VAR 0 1
51273: PPUSH
51274: CALL_OW 437
51278: PUSH
51279: LD_INT 1
51281: ARRAY
51282: PUSH
51283: LD_INT 4
51285: ARRAY
51286: ST_TO_ADDR
// end ;
51287: LD_VAR 0 2
51291: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51292: LD_INT 0
51294: PPUSH
51295: PPUSH
51296: PPUSH
51297: PPUSH
// if not base_units then
51298: LD_VAR 0 1
51302: NOT
51303: IFFALSE 51307
// exit ;
51305: GO 51394
// result := false ;
51307: LD_ADDR_VAR 0 2
51311: PUSH
51312: LD_INT 0
51314: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51315: LD_ADDR_VAR 0 5
51319: PUSH
51320: LD_VAR 0 1
51324: PPUSH
51325: LD_INT 21
51327: PUSH
51328: LD_INT 3
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PPUSH
51335: CALL_OW 72
51339: ST_TO_ADDR
// if not tmp then
51340: LD_VAR 0 5
51344: NOT
51345: IFFALSE 51349
// exit ;
51347: GO 51394
// for i in tmp do
51349: LD_ADDR_VAR 0 3
51353: PUSH
51354: LD_VAR 0 5
51358: PUSH
51359: FOR_IN
51360: IFFALSE 51392
// begin result := EnemyInRange ( i , 22 ) ;
51362: LD_ADDR_VAR 0 2
51366: PUSH
51367: LD_VAR 0 3
51371: PPUSH
51372: LD_INT 22
51374: PPUSH
51375: CALL 48819 0 2
51379: ST_TO_ADDR
// if result then
51380: LD_VAR 0 2
51384: IFFALSE 51390
// exit ;
51386: POP
51387: POP
51388: GO 51394
// end ;
51390: GO 51359
51392: POP
51393: POP
// end ;
51394: LD_VAR 0 2
51398: RET
// export function FilterByTag ( units , tag ) ; begin
51399: LD_INT 0
51401: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51402: LD_ADDR_VAR 0 3
51406: PUSH
51407: LD_VAR 0 1
51411: PPUSH
51412: LD_INT 120
51414: PUSH
51415: LD_VAR 0 2
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PPUSH
51424: CALL_OW 72
51428: ST_TO_ADDR
// end ;
51429: LD_VAR 0 3
51433: RET
// export function IsDriver ( un ) ; begin
51434: LD_INT 0
51436: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51437: LD_ADDR_VAR 0 2
51441: PUSH
51442: LD_VAR 0 1
51446: PUSH
51447: LD_INT 55
51449: PUSH
51450: EMPTY
51451: LIST
51452: PPUSH
51453: CALL_OW 69
51457: IN
51458: ST_TO_ADDR
// end ;
51459: LD_VAR 0 2
51463: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51464: LD_INT 0
51466: PPUSH
51467: PPUSH
// list := [ ] ;
51468: LD_ADDR_VAR 0 5
51472: PUSH
51473: EMPTY
51474: ST_TO_ADDR
// case d of 0 :
51475: LD_VAR 0 3
51479: PUSH
51480: LD_INT 0
51482: DOUBLE
51483: EQUAL
51484: IFTRUE 51488
51486: GO 51621
51488: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51489: LD_ADDR_VAR 0 5
51493: PUSH
51494: LD_VAR 0 1
51498: PUSH
51499: LD_INT 4
51501: MINUS
51502: PUSH
51503: LD_VAR 0 2
51507: PUSH
51508: LD_INT 4
51510: MINUS
51511: PUSH
51512: LD_INT 2
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: LIST
51519: PUSH
51520: LD_VAR 0 1
51524: PUSH
51525: LD_INT 3
51527: MINUS
51528: PUSH
51529: LD_VAR 0 2
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: LIST
51541: PUSH
51542: LD_VAR 0 1
51546: PUSH
51547: LD_INT 4
51549: PLUS
51550: PUSH
51551: LD_VAR 0 2
51555: PUSH
51556: LD_INT 4
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: LIST
51563: PUSH
51564: LD_VAR 0 1
51568: PUSH
51569: LD_INT 3
51571: PLUS
51572: PUSH
51573: LD_VAR 0 2
51577: PUSH
51578: LD_INT 3
51580: PLUS
51581: PUSH
51582: LD_INT 5
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: LIST
51589: PUSH
51590: LD_VAR 0 1
51594: PUSH
51595: LD_VAR 0 2
51599: PUSH
51600: LD_INT 4
51602: PLUS
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: LIST
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: ST_TO_ADDR
// end ; 1 :
51619: GO 52319
51621: LD_INT 1
51623: DOUBLE
51624: EQUAL
51625: IFTRUE 51629
51627: GO 51762
51629: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51630: LD_ADDR_VAR 0 5
51634: PUSH
51635: LD_VAR 0 1
51639: PUSH
51640: LD_VAR 0 2
51644: PUSH
51645: LD_INT 4
51647: MINUS
51648: PUSH
51649: LD_INT 3
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: LIST
51656: PUSH
51657: LD_VAR 0 1
51661: PUSH
51662: LD_INT 3
51664: MINUS
51665: PUSH
51666: LD_VAR 0 2
51670: PUSH
51671: LD_INT 3
51673: MINUS
51674: PUSH
51675: LD_INT 2
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: LIST
51682: PUSH
51683: LD_VAR 0 1
51687: PUSH
51688: LD_INT 4
51690: MINUS
51691: PUSH
51692: LD_VAR 0 2
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: LIST
51704: PUSH
51705: LD_VAR 0 1
51709: PUSH
51710: LD_VAR 0 2
51714: PUSH
51715: LD_INT 3
51717: PLUS
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: LIST
51726: PUSH
51727: LD_VAR 0 1
51731: PUSH
51732: LD_INT 4
51734: PLUS
51735: PUSH
51736: LD_VAR 0 2
51740: PUSH
51741: LD_INT 4
51743: PLUS
51744: PUSH
51745: LD_INT 5
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: LIST
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: ST_TO_ADDR
// end ; 2 :
51760: GO 52319
51762: LD_INT 2
51764: DOUBLE
51765: EQUAL
51766: IFTRUE 51770
51768: GO 51899
51770: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51771: LD_ADDR_VAR 0 5
51775: PUSH
51776: LD_VAR 0 1
51780: PUSH
51781: LD_VAR 0 2
51785: PUSH
51786: LD_INT 3
51788: MINUS
51789: PUSH
51790: LD_INT 3
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: LIST
51797: PUSH
51798: LD_VAR 0 1
51802: PUSH
51803: LD_INT 4
51805: PLUS
51806: PUSH
51807: LD_VAR 0 2
51811: PUSH
51812: LD_INT 4
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: LIST
51819: PUSH
51820: LD_VAR 0 1
51824: PUSH
51825: LD_VAR 0 2
51829: PUSH
51830: LD_INT 4
51832: PLUS
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: LIST
51841: PUSH
51842: LD_VAR 0 1
51846: PUSH
51847: LD_INT 3
51849: MINUS
51850: PUSH
51851: LD_VAR 0 2
51855: PUSH
51856: LD_INT 1
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: LIST
51863: PUSH
51864: LD_VAR 0 1
51868: PUSH
51869: LD_INT 4
51871: MINUS
51872: PUSH
51873: LD_VAR 0 2
51877: PUSH
51878: LD_INT 4
51880: MINUS
51881: PUSH
51882: LD_INT 2
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: LIST
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: ST_TO_ADDR
// end ; 3 :
51897: GO 52319
51899: LD_INT 3
51901: DOUBLE
51902: EQUAL
51903: IFTRUE 51907
51905: GO 52040
51907: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51908: LD_ADDR_VAR 0 5
51912: PUSH
51913: LD_VAR 0 1
51917: PUSH
51918: LD_INT 3
51920: PLUS
51921: PUSH
51922: LD_VAR 0 2
51926: PUSH
51927: LD_INT 4
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: LIST
51934: PUSH
51935: LD_VAR 0 1
51939: PUSH
51940: LD_INT 4
51942: PLUS
51943: PUSH
51944: LD_VAR 0 2
51948: PUSH
51949: LD_INT 4
51951: PLUS
51952: PUSH
51953: LD_INT 5
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: LIST
51960: PUSH
51961: LD_VAR 0 1
51965: PUSH
51966: LD_INT 4
51968: MINUS
51969: PUSH
51970: LD_VAR 0 2
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: LIST
51982: PUSH
51983: LD_VAR 0 1
51987: PUSH
51988: LD_VAR 0 2
51992: PUSH
51993: LD_INT 4
51995: MINUS
51996: PUSH
51997: LD_INT 3
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: LIST
52004: PUSH
52005: LD_VAR 0 1
52009: PUSH
52010: LD_INT 3
52012: MINUS
52013: PUSH
52014: LD_VAR 0 2
52018: PUSH
52019: LD_INT 3
52021: MINUS
52022: PUSH
52023: LD_INT 2
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: LIST
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: ST_TO_ADDR
// end ; 4 :
52038: GO 52319
52040: LD_INT 4
52042: DOUBLE
52043: EQUAL
52044: IFTRUE 52048
52046: GO 52181
52048: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52049: LD_ADDR_VAR 0 5
52053: PUSH
52054: LD_VAR 0 1
52058: PUSH
52059: LD_VAR 0 2
52063: PUSH
52064: LD_INT 4
52066: PLUS
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: LIST
52075: PUSH
52076: LD_VAR 0 1
52080: PUSH
52081: LD_INT 3
52083: PLUS
52084: PUSH
52085: LD_VAR 0 2
52089: PUSH
52090: LD_INT 3
52092: PLUS
52093: PUSH
52094: LD_INT 5
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: LIST
52101: PUSH
52102: LD_VAR 0 1
52106: PUSH
52107: LD_INT 4
52109: PLUS
52110: PUSH
52111: LD_VAR 0 2
52115: PUSH
52116: LD_INT 4
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: LIST
52123: PUSH
52124: LD_VAR 0 1
52128: PUSH
52129: LD_VAR 0 2
52133: PUSH
52134: LD_INT 3
52136: MINUS
52137: PUSH
52138: LD_INT 3
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: LIST
52145: PUSH
52146: LD_VAR 0 1
52150: PUSH
52151: LD_INT 4
52153: MINUS
52154: PUSH
52155: LD_VAR 0 2
52159: PUSH
52160: LD_INT 4
52162: MINUS
52163: PUSH
52164: LD_INT 2
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: LIST
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: ST_TO_ADDR
// end ; 5 :
52179: GO 52319
52181: LD_INT 5
52183: DOUBLE
52184: EQUAL
52185: IFTRUE 52189
52187: GO 52318
52189: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52190: LD_ADDR_VAR 0 5
52194: PUSH
52195: LD_VAR 0 1
52199: PUSH
52200: LD_INT 4
52202: MINUS
52203: PUSH
52204: LD_VAR 0 2
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: LIST
52216: PUSH
52217: LD_VAR 0 1
52221: PUSH
52222: LD_VAR 0 2
52226: PUSH
52227: LD_INT 4
52229: MINUS
52230: PUSH
52231: LD_INT 3
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: LIST
52238: PUSH
52239: LD_VAR 0 1
52243: PUSH
52244: LD_INT 4
52246: PLUS
52247: PUSH
52248: LD_VAR 0 2
52252: PUSH
52253: LD_INT 4
52255: PLUS
52256: PUSH
52257: LD_INT 5
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: LIST
52264: PUSH
52265: LD_VAR 0 1
52269: PUSH
52270: LD_INT 3
52272: PLUS
52273: PUSH
52274: LD_VAR 0 2
52278: PUSH
52279: LD_INT 4
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: LIST
52286: PUSH
52287: LD_VAR 0 1
52291: PUSH
52292: LD_VAR 0 2
52296: PUSH
52297: LD_INT 3
52299: PLUS
52300: PUSH
52301: LD_INT 0
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: LIST
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: ST_TO_ADDR
// end ; end ;
52316: GO 52319
52318: POP
// result := list ;
52319: LD_ADDR_VAR 0 4
52323: PUSH
52324: LD_VAR 0 5
52328: ST_TO_ADDR
// end ;
52329: LD_VAR 0 4
52333: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52334: LD_INT 0
52336: PPUSH
52337: PPUSH
52338: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52339: LD_VAR 0 1
52343: NOT
52344: IFTRUE 52372
52346: PUSH
52347: LD_VAR 0 2
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: LD_INT 2
52357: PUSH
52358: LD_INT 3
52360: PUSH
52361: LD_INT 4
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: IN
52370: NOT
52371: OR
52372: IFFALSE 52376
// exit ;
52374: GO 52459
// tmp := [ ] ;
52376: LD_ADDR_VAR 0 5
52380: PUSH
52381: EMPTY
52382: ST_TO_ADDR
// for i in units do
52383: LD_ADDR_VAR 0 4
52387: PUSH
52388: LD_VAR 0 1
52392: PUSH
52393: FOR_IN
52394: IFFALSE 52428
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52396: LD_ADDR_VAR 0 5
52400: PUSH
52401: LD_VAR 0 5
52405: PPUSH
52406: LD_VAR 0 4
52410: PPUSH
52411: LD_VAR 0 2
52415: PPUSH
52416: CALL_OW 259
52420: PPUSH
52421: CALL 53854 0 2
52425: ST_TO_ADDR
52426: GO 52393
52428: POP
52429: POP
// if not tmp then
52430: LD_VAR 0 5
52434: NOT
52435: IFFALSE 52439
// exit ;
52437: GO 52459
// result := SortListByListDesc ( units , tmp ) ;
52439: LD_ADDR_VAR 0 3
52443: PUSH
52444: LD_VAR 0 1
52448: PPUSH
52449: LD_VAR 0 5
52453: PPUSH
52454: CALL_OW 77
52458: ST_TO_ADDR
// end ;
52459: LD_VAR 0 3
52463: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52464: LD_INT 0
52466: PPUSH
52467: PPUSH
52468: PPUSH
// result := false ;
52469: LD_ADDR_VAR 0 3
52473: PUSH
52474: LD_INT 0
52476: ST_TO_ADDR
// if not building then
52477: LD_VAR 0 2
52481: NOT
52482: IFFALSE 52486
// exit ;
52484: GO 52630
// x := GetX ( building ) ;
52486: LD_ADDR_VAR 0 4
52490: PUSH
52491: LD_VAR 0 2
52495: PPUSH
52496: CALL_OW 250
52500: ST_TO_ADDR
// y := GetY ( building ) ;
52501: LD_ADDR_VAR 0 5
52505: PUSH
52506: LD_VAR 0 2
52510: PPUSH
52511: CALL_OW 251
52515: ST_TO_ADDR
// if not x or not y then
52516: LD_VAR 0 4
52520: NOT
52521: IFTRUE 52530
52523: PUSH
52524: LD_VAR 0 5
52528: NOT
52529: OR
52530: IFFALSE 52534
// exit ;
52532: GO 52630
// if GetTaskList ( unit ) then
52534: LD_VAR 0 1
52538: PPUSH
52539: CALL_OW 437
52543: IFFALSE 52630
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52545: LD_STRING e
52547: PUSH
52548: LD_VAR 0 1
52552: PPUSH
52553: CALL_OW 437
52557: PUSH
52558: LD_INT 1
52560: ARRAY
52561: PUSH
52562: LD_INT 1
52564: ARRAY
52565: EQUAL
52566: IFFALSE 52593
52568: PUSH
52569: LD_VAR 0 4
52573: PUSH
52574: LD_VAR 0 1
52578: PPUSH
52579: CALL_OW 437
52583: PUSH
52584: LD_INT 1
52586: ARRAY
52587: PUSH
52588: LD_INT 2
52590: ARRAY
52591: EQUAL
52592: AND
52593: IFFALSE 52620
52595: PUSH
52596: LD_VAR 0 5
52600: PUSH
52601: LD_VAR 0 1
52605: PPUSH
52606: CALL_OW 437
52610: PUSH
52611: LD_INT 1
52613: ARRAY
52614: PUSH
52615: LD_INT 3
52617: ARRAY
52618: EQUAL
52619: AND
52620: IFFALSE 52630
// result := true end ;
52622: LD_ADDR_VAR 0 3
52626: PUSH
52627: LD_INT 1
52629: ST_TO_ADDR
// end ;
52630: LD_VAR 0 3
52634: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52635: LD_INT 0
52637: PPUSH
// result := false ;
52638: LD_ADDR_VAR 0 4
52642: PUSH
52643: LD_INT 0
52645: ST_TO_ADDR
// if GetTaskList ( unit ) then
52646: LD_VAR 0 1
52650: PPUSH
52651: CALL_OW 437
52655: IFFALSE 52742
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52657: LD_STRING M
52659: PUSH
52660: LD_VAR 0 1
52664: PPUSH
52665: CALL_OW 437
52669: PUSH
52670: LD_INT 1
52672: ARRAY
52673: PUSH
52674: LD_INT 1
52676: ARRAY
52677: EQUAL
52678: IFFALSE 52705
52680: PUSH
52681: LD_VAR 0 2
52685: PUSH
52686: LD_VAR 0 1
52690: PPUSH
52691: CALL_OW 437
52695: PUSH
52696: LD_INT 1
52698: ARRAY
52699: PUSH
52700: LD_INT 2
52702: ARRAY
52703: EQUAL
52704: AND
52705: IFFALSE 52732
52707: PUSH
52708: LD_VAR 0 3
52712: PUSH
52713: LD_VAR 0 1
52717: PPUSH
52718: CALL_OW 437
52722: PUSH
52723: LD_INT 1
52725: ARRAY
52726: PUSH
52727: LD_INT 3
52729: ARRAY
52730: EQUAL
52731: AND
52732: IFFALSE 52742
// result := true ;
52734: LD_ADDR_VAR 0 4
52738: PUSH
52739: LD_INT 1
52741: ST_TO_ADDR
// end ; end ;
52742: LD_VAR 0 4
52746: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52747: LD_INT 0
52749: PPUSH
52750: PPUSH
52751: PPUSH
52752: PPUSH
// if not unit or not area then
52753: LD_VAR 0 1
52757: NOT
52758: IFTRUE 52767
52760: PUSH
52761: LD_VAR 0 2
52765: NOT
52766: OR
52767: IFFALSE 52771
// exit ;
52769: GO 52947
// tmp := AreaToList ( area , i ) ;
52771: LD_ADDR_VAR 0 6
52775: PUSH
52776: LD_VAR 0 2
52780: PPUSH
52781: LD_VAR 0 5
52785: PPUSH
52786: CALL_OW 517
52790: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52791: LD_ADDR_VAR 0 5
52795: PUSH
52796: DOUBLE
52797: LD_INT 1
52799: DEC
52800: ST_TO_ADDR
52801: LD_VAR 0 6
52805: PUSH
52806: LD_INT 1
52808: ARRAY
52809: PUSH
52810: FOR_TO
52811: IFFALSE 52945
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52813: LD_ADDR_VAR 0 7
52817: PUSH
52818: LD_VAR 0 6
52822: PUSH
52823: LD_INT 1
52825: ARRAY
52826: PUSH
52827: LD_VAR 0 5
52831: ARRAY
52832: PUSH
52833: LD_VAR 0 6
52837: PUSH
52838: LD_INT 2
52840: ARRAY
52841: PUSH
52842: LD_VAR 0 5
52846: ARRAY
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
52852: LD_INT 92
52854: PUSH
52855: LD_VAR 0 7
52859: PUSH
52860: LD_INT 1
52862: ARRAY
52863: PUSH
52864: LD_VAR 0 7
52868: PUSH
52869: LD_INT 2
52871: ARRAY
52872: PUSH
52873: LD_INT 2
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: PPUSH
52882: CALL_OW 69
52886: PUSH
52887: LD_INT 0
52889: EQUAL
52890: IFFALSE 52943
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52892: LD_VAR 0 1
52896: PPUSH
52897: LD_VAR 0 7
52901: PUSH
52902: LD_INT 1
52904: ARRAY
52905: PPUSH
52906: LD_VAR 0 7
52910: PUSH
52911: LD_INT 2
52913: ARRAY
52914: PPUSH
52915: LD_VAR 0 3
52919: PPUSH
52920: CALL_OW 48
// result := IsPlaced ( unit ) ;
52924: LD_ADDR_VAR 0 4
52928: PUSH
52929: LD_VAR 0 1
52933: PPUSH
52934: CALL_OW 305
52938: ST_TO_ADDR
// exit ;
52939: POP
52940: POP
52941: GO 52947
// end ; end ;
52943: GO 52810
52945: POP
52946: POP
// end ;
52947: LD_VAR 0 4
52951: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52952: LD_INT 0
52954: PPUSH
52955: PPUSH
52956: PPUSH
// if not side or side > 8 then
52957: LD_VAR 0 1
52961: NOT
52962: IFTRUE 52974
52964: PUSH
52965: LD_VAR 0 1
52969: PUSH
52970: LD_INT 8
52972: GREATER
52973: OR
52974: IFFALSE 52978
// exit ;
52976: GO 53165
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52978: LD_ADDR_VAR 0 4
52982: PUSH
52983: LD_INT 22
52985: PUSH
52986: LD_VAR 0 1
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 21
52997: PUSH
52998: LD_INT 3
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PPUSH
53009: CALL_OW 69
53013: ST_TO_ADDR
// if not tmp then
53014: LD_VAR 0 4
53018: NOT
53019: IFFALSE 53023
// exit ;
53021: GO 53165
// enable_addtolog := true ;
53023: LD_ADDR_OWVAR 81
53027: PUSH
53028: LD_INT 1
53030: ST_TO_ADDR
// AddToLog ( [ ) ;
53031: LD_STRING [
53033: PPUSH
53034: CALL_OW 561
// for i in tmp do
53038: LD_ADDR_VAR 0 3
53042: PUSH
53043: LD_VAR 0 4
53047: PUSH
53048: FOR_IN
53049: IFFALSE 53156
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53051: LD_STRING [
53053: PUSH
53054: LD_VAR 0 3
53058: PPUSH
53059: CALL_OW 266
53063: STR
53064: PUSH
53065: LD_STRING , 
53067: STR
53068: PUSH
53069: LD_VAR 0 3
53073: PPUSH
53074: CALL_OW 250
53078: STR
53079: PUSH
53080: LD_STRING , 
53082: STR
53083: PUSH
53084: LD_VAR 0 3
53088: PPUSH
53089: CALL_OW 251
53093: STR
53094: PUSH
53095: LD_STRING , 
53097: STR
53098: PUSH
53099: LD_VAR 0 3
53103: PPUSH
53104: CALL_OW 254
53108: STR
53109: PUSH
53110: LD_STRING , 
53112: STR
53113: PUSH
53114: LD_VAR 0 3
53118: PPUSH
53119: LD_INT 1
53121: PPUSH
53122: CALL_OW 268
53126: STR
53127: PUSH
53128: LD_STRING , 
53130: STR
53131: PUSH
53132: LD_VAR 0 3
53136: PPUSH
53137: LD_INT 2
53139: PPUSH
53140: CALL_OW 268
53144: STR
53145: PUSH
53146: LD_STRING ],
53148: STR
53149: PPUSH
53150: CALL_OW 561
// end ;
53154: GO 53048
53156: POP
53157: POP
// AddToLog ( ]; ) ;
53158: LD_STRING ];
53160: PPUSH
53161: CALL_OW 561
// end ;
53165: LD_VAR 0 2
53169: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53170: LD_INT 0
53172: PPUSH
53173: PPUSH
53174: PPUSH
53175: PPUSH
53176: PPUSH
// if not area or not rate or not max then
53177: LD_VAR 0 1
53181: NOT
53182: IFTRUE 53191
53184: PUSH
53185: LD_VAR 0 2
53189: NOT
53190: OR
53191: IFTRUE 53200
53193: PUSH
53194: LD_VAR 0 4
53198: NOT
53199: OR
53200: IFFALSE 53204
// exit ;
53202: GO 53393
// while 1 do
53204: LD_INT 1
53206: IFFALSE 53393
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53208: LD_ADDR_VAR 0 9
53212: PUSH
53213: LD_VAR 0 1
53217: PPUSH
53218: LD_INT 1
53220: PPUSH
53221: CALL_OW 287
53225: PUSH
53226: LD_INT 10
53228: MUL
53229: ST_TO_ADDR
// r := rate / 10 ;
53230: LD_ADDR_VAR 0 7
53234: PUSH
53235: LD_VAR 0 2
53239: PUSH
53240: LD_INT 10
53242: DIVREAL
53243: ST_TO_ADDR
// time := 1 1$00 ;
53244: LD_ADDR_VAR 0 8
53248: PUSH
53249: LD_INT 2100
53251: ST_TO_ADDR
// if amount < min then
53252: LD_VAR 0 9
53256: PUSH
53257: LD_VAR 0 3
53261: LESS
53262: IFFALSE 53280
// r := r * 2 else
53264: LD_ADDR_VAR 0 7
53268: PUSH
53269: LD_VAR 0 7
53273: PUSH
53274: LD_INT 2
53276: MUL
53277: ST_TO_ADDR
53278: GO 53306
// if amount > max then
53280: LD_VAR 0 9
53284: PUSH
53285: LD_VAR 0 4
53289: GREATER
53290: IFFALSE 53306
// r := r / 2 ;
53292: LD_ADDR_VAR 0 7
53296: PUSH
53297: LD_VAR 0 7
53301: PUSH
53302: LD_INT 2
53304: DIVREAL
53305: ST_TO_ADDR
// time := time / r ;
53306: LD_ADDR_VAR 0 8
53310: PUSH
53311: LD_VAR 0 8
53315: PUSH
53316: LD_VAR 0 7
53320: DIVREAL
53321: ST_TO_ADDR
// if time < 0 then
53322: LD_VAR 0 8
53326: PUSH
53327: LD_INT 0
53329: LESS
53330: IFFALSE 53347
// time := time * - 1 ;
53332: LD_ADDR_VAR 0 8
53336: PUSH
53337: LD_VAR 0 8
53341: PUSH
53342: LD_INT 1
53344: NEG
53345: MUL
53346: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53347: LD_VAR 0 8
53351: PUSH
53352: LD_INT 35
53354: PPUSH
53355: LD_INT 875
53357: PPUSH
53358: CALL_OW 12
53362: PLUS
53363: PPUSH
53364: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53368: LD_INT 1
53370: PPUSH
53371: LD_INT 5
53373: PPUSH
53374: CALL_OW 12
53378: PPUSH
53379: LD_VAR 0 1
53383: PPUSH
53384: LD_INT 1
53386: PPUSH
53387: CALL_OW 55
// end ;
53391: GO 53204
// end ;
53393: LD_VAR 0 5
53397: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53398: LD_INT 0
53400: PPUSH
53401: PPUSH
53402: PPUSH
53403: PPUSH
53404: PPUSH
53405: PPUSH
53406: PPUSH
53407: PPUSH
// if not turrets or not factories then
53408: LD_VAR 0 1
53412: NOT
53413: IFTRUE 53422
53415: PUSH
53416: LD_VAR 0 2
53420: NOT
53421: OR
53422: IFFALSE 53426
// exit ;
53424: GO 53733
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53426: LD_ADDR_VAR 0 10
53430: PUSH
53431: LD_INT 5
53433: PUSH
53434: LD_INT 6
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 2
53443: PUSH
53444: LD_INT 4
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 3
53453: PUSH
53454: LD_INT 5
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 24
53468: PUSH
53469: LD_INT 25
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 23
53478: PUSH
53479: LD_INT 27
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 42
53492: PUSH
53493: LD_INT 43
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 44
53502: PUSH
53503: LD_INT 46
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 45
53512: PUSH
53513: LD_INT 47
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: LIST
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: LIST
53529: ST_TO_ADDR
// result := [ ] ;
53530: LD_ADDR_VAR 0 3
53534: PUSH
53535: EMPTY
53536: ST_TO_ADDR
// for i in turrets do
53537: LD_ADDR_VAR 0 4
53541: PUSH
53542: LD_VAR 0 1
53546: PUSH
53547: FOR_IN
53548: IFFALSE 53731
// begin nat := GetNation ( i ) ;
53550: LD_ADDR_VAR 0 7
53554: PUSH
53555: LD_VAR 0 4
53559: PPUSH
53560: CALL_OW 248
53564: ST_TO_ADDR
// weapon := 0 ;
53565: LD_ADDR_VAR 0 8
53569: PUSH
53570: LD_INT 0
53572: ST_TO_ADDR
// if not nat then
53573: LD_VAR 0 7
53577: NOT
53578: IFFALSE 53582
// continue ;
53580: GO 53547
// for j in list [ nat ] do
53582: LD_ADDR_VAR 0 5
53586: PUSH
53587: LD_VAR 0 10
53591: PUSH
53592: LD_VAR 0 7
53596: ARRAY
53597: PUSH
53598: FOR_IN
53599: IFFALSE 53640
// if GetBWeapon ( i ) = j [ 1 ] then
53601: LD_VAR 0 4
53605: PPUSH
53606: CALL_OW 269
53610: PUSH
53611: LD_VAR 0 5
53615: PUSH
53616: LD_INT 1
53618: ARRAY
53619: EQUAL
53620: IFFALSE 53638
// begin weapon := j [ 2 ] ;
53622: LD_ADDR_VAR 0 8
53626: PUSH
53627: LD_VAR 0 5
53631: PUSH
53632: LD_INT 2
53634: ARRAY
53635: ST_TO_ADDR
// break ;
53636: GO 53640
// end ;
53638: GO 53598
53640: POP
53641: POP
// if not weapon then
53642: LD_VAR 0 8
53646: NOT
53647: IFFALSE 53651
// continue ;
53649: GO 53547
// for k in factories do
53651: LD_ADDR_VAR 0 6
53655: PUSH
53656: LD_VAR 0 2
53660: PUSH
53661: FOR_IN
53662: IFFALSE 53727
// begin weapons := AvailableWeaponList ( k ) ;
53664: LD_ADDR_VAR 0 9
53668: PUSH
53669: LD_VAR 0 6
53673: PPUSH
53674: CALL_OW 478
53678: ST_TO_ADDR
// if not weapons then
53679: LD_VAR 0 9
53683: NOT
53684: IFFALSE 53688
// continue ;
53686: GO 53661
// if weapon in weapons then
53688: LD_VAR 0 8
53692: PUSH
53693: LD_VAR 0 9
53697: IN
53698: IFFALSE 53725
// begin result := [ i , weapon ] ;
53700: LD_ADDR_VAR 0 3
53704: PUSH
53705: LD_VAR 0 4
53709: PUSH
53710: LD_VAR 0 8
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: ST_TO_ADDR
// exit ;
53719: POP
53720: POP
53721: POP
53722: POP
53723: GO 53733
// end ; end ;
53725: GO 53661
53727: POP
53728: POP
// end ;
53729: GO 53547
53731: POP
53732: POP
// end ;
53733: LD_VAR 0 3
53737: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53738: LD_INT 0
53740: PPUSH
// if not side or side > 8 then
53741: LD_VAR 0 3
53745: NOT
53746: IFTRUE 53758
53748: PUSH
53749: LD_VAR 0 3
53753: PUSH
53754: LD_INT 8
53756: GREATER
53757: OR
53758: IFFALSE 53762
// exit ;
53760: GO 53821
// if not range then
53762: LD_VAR 0 4
53766: NOT
53767: IFFALSE 53778
// range := - 12 ;
53769: LD_ADDR_VAR 0 4
53773: PUSH
53774: LD_INT 12
53776: NEG
53777: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53778: LD_VAR 0 1
53782: PPUSH
53783: LD_VAR 0 2
53787: PPUSH
53788: LD_VAR 0 3
53792: PPUSH
53793: LD_VAR 0 4
53797: PPUSH
53798: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53802: LD_VAR 0 1
53806: PPUSH
53807: LD_VAR 0 2
53811: PPUSH
53812: LD_VAR 0 3
53816: PPUSH
53817: CALL_OW 331
// end ;
53821: LD_VAR 0 5
53825: RET
// export function Video ( mode ) ; begin
53826: LD_INT 0
53828: PPUSH
// ingame_video = mode ;
53829: LD_ADDR_OWVAR 52
53833: PUSH
53834: LD_VAR 0 1
53838: ST_TO_ADDR
// interface_hidden = mode ;
53839: LD_ADDR_OWVAR 54
53843: PUSH
53844: LD_VAR 0 1
53848: ST_TO_ADDR
// end ;
53849: LD_VAR 0 2
53853: RET
// export function Join ( array , element ) ; begin
53854: LD_INT 0
53856: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53857: LD_ADDR_VAR 0 3
53861: PUSH
53862: LD_VAR 0 1
53866: PPUSH
53867: LD_VAR 0 1
53871: PUSH
53872: LD_INT 1
53874: PLUS
53875: PPUSH
53876: LD_VAR 0 2
53880: PPUSH
53881: CALL_OW 1
53885: ST_TO_ADDR
// end ;
53886: LD_VAR 0 3
53890: RET
// export function JoinUnion ( array , element ) ; begin
53891: LD_INT 0
53893: PPUSH
// result := array union element ;
53894: LD_ADDR_VAR 0 3
53898: PUSH
53899: LD_VAR 0 1
53903: PUSH
53904: LD_VAR 0 2
53908: UNION
53909: ST_TO_ADDR
// end ;
53910: LD_VAR 0 3
53914: RET
// export function GetBehemoths ( side ) ; begin
53915: LD_INT 0
53917: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53918: LD_ADDR_VAR 0 2
53922: PUSH
53923: LD_INT 22
53925: PUSH
53926: LD_VAR 0 1
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 31
53937: PUSH
53938: LD_INT 25
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PPUSH
53949: CALL_OW 69
53953: ST_TO_ADDR
// end ;
53954: LD_VAR 0 2
53958: RET
// export function Shuffle ( array ) ; var i , index ; begin
53959: LD_INT 0
53961: PPUSH
53962: PPUSH
53963: PPUSH
// result := [ ] ;
53964: LD_ADDR_VAR 0 2
53968: PUSH
53969: EMPTY
53970: ST_TO_ADDR
// if not array then
53971: LD_VAR 0 1
53975: NOT
53976: IFFALSE 53980
// exit ;
53978: GO 54079
// Randomize ;
53980: CALL_OW 10
// for i = array downto 1 do
53984: LD_ADDR_VAR 0 3
53988: PUSH
53989: DOUBLE
53990: LD_VAR 0 1
53994: INC
53995: ST_TO_ADDR
53996: LD_INT 1
53998: PUSH
53999: FOR_DOWNTO
54000: IFFALSE 54077
// begin index := rand ( 1 , array ) ;
54002: LD_ADDR_VAR 0 4
54006: PUSH
54007: LD_INT 1
54009: PPUSH
54010: LD_VAR 0 1
54014: PPUSH
54015: CALL_OW 12
54019: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54020: LD_ADDR_VAR 0 2
54024: PUSH
54025: LD_VAR 0 2
54029: PPUSH
54030: LD_VAR 0 2
54034: PUSH
54035: LD_INT 1
54037: PLUS
54038: PPUSH
54039: LD_VAR 0 1
54043: PUSH
54044: LD_VAR 0 4
54048: ARRAY
54049: PPUSH
54050: CALL_OW 2
54054: ST_TO_ADDR
// array := Delete ( array , index ) ;
54055: LD_ADDR_VAR 0 1
54059: PUSH
54060: LD_VAR 0 1
54064: PPUSH
54065: LD_VAR 0 4
54069: PPUSH
54070: CALL_OW 3
54074: ST_TO_ADDR
// end ;
54075: GO 53999
54077: POP
54078: POP
// end ;
54079: LD_VAR 0 2
54083: RET
// export function GetBaseMaterials ( base ) ; begin
54084: LD_INT 0
54086: PPUSH
// result := [ 0 , 0 , 0 ] ;
54087: LD_ADDR_VAR 0 2
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: LIST
54105: ST_TO_ADDR
// if not base then
54106: LD_VAR 0 1
54110: NOT
54111: IFFALSE 54115
// exit ;
54113: GO 54164
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54115: LD_ADDR_VAR 0 2
54119: PUSH
54120: LD_VAR 0 1
54124: PPUSH
54125: LD_INT 1
54127: PPUSH
54128: CALL_OW 275
54132: PUSH
54133: LD_VAR 0 1
54137: PPUSH
54138: LD_INT 2
54140: PPUSH
54141: CALL_OW 275
54145: PUSH
54146: LD_VAR 0 1
54150: PPUSH
54151: LD_INT 3
54153: PPUSH
54154: CALL_OW 275
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: LIST
54163: ST_TO_ADDR
// end ;
54164: LD_VAR 0 2
54168: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54169: LD_INT 0
54171: PPUSH
54172: PPUSH
// result := array ;
54173: LD_ADDR_VAR 0 3
54177: PUSH
54178: LD_VAR 0 1
54182: ST_TO_ADDR
// if size >= result then
54183: LD_VAR 0 2
54187: PUSH
54188: LD_VAR 0 3
54192: GREATEREQUAL
54193: IFFALSE 54197
// exit ;
54195: GO 54247
// if size then
54197: LD_VAR 0 2
54201: IFFALSE 54247
// for i := array downto size do
54203: LD_ADDR_VAR 0 4
54207: PUSH
54208: DOUBLE
54209: LD_VAR 0 1
54213: INC
54214: ST_TO_ADDR
54215: LD_VAR 0 2
54219: PUSH
54220: FOR_DOWNTO
54221: IFFALSE 54245
// result := Delete ( result , result ) ;
54223: LD_ADDR_VAR 0 3
54227: PUSH
54228: LD_VAR 0 3
54232: PPUSH
54233: LD_VAR 0 3
54237: PPUSH
54238: CALL_OW 3
54242: ST_TO_ADDR
54243: GO 54220
54245: POP
54246: POP
// end ;
54247: LD_VAR 0 3
54251: RET
// export function ComExit ( unit ) ; var tmp ; begin
54252: LD_INT 0
54254: PPUSH
54255: PPUSH
// if not IsInUnit ( unit ) then
54256: LD_VAR 0 1
54260: PPUSH
54261: CALL_OW 310
54265: NOT
54266: IFFALSE 54270
// exit ;
54268: GO 54330
// tmp := IsInUnit ( unit ) ;
54270: LD_ADDR_VAR 0 3
54274: PUSH
54275: LD_VAR 0 1
54279: PPUSH
54280: CALL_OW 310
54284: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54285: LD_VAR 0 3
54289: PPUSH
54290: CALL_OW 247
54294: PUSH
54295: LD_INT 2
54297: EQUAL
54298: IFFALSE 54311
// ComExitVehicle ( unit ) else
54300: LD_VAR 0 1
54304: PPUSH
54305: CALL_OW 121
54309: GO 54320
// ComExitBuilding ( unit ) ;
54311: LD_VAR 0 1
54315: PPUSH
54316: CALL_OW 122
// result := tmp ;
54320: LD_ADDR_VAR 0 2
54324: PUSH
54325: LD_VAR 0 3
54329: ST_TO_ADDR
// end ;
54330: LD_VAR 0 2
54334: RET
// export function ComExitAll ( units ) ; var i ; begin
54335: LD_INT 0
54337: PPUSH
54338: PPUSH
// if not units then
54339: LD_VAR 0 1
54343: NOT
54344: IFFALSE 54348
// exit ;
54346: GO 54374
// for i in units do
54348: LD_ADDR_VAR 0 3
54352: PUSH
54353: LD_VAR 0 1
54357: PUSH
54358: FOR_IN
54359: IFFALSE 54372
// ComExit ( i ) ;
54361: LD_VAR 0 3
54365: PPUSH
54366: CALL 54252 0 1
54370: GO 54358
54372: POP
54373: POP
// end ;
54374: LD_VAR 0 2
54378: RET
// export function ResetHc ; begin
54379: LD_INT 0
54381: PPUSH
// InitHc ;
54382: CALL_OW 19
// hc_importance := 0 ;
54386: LD_ADDR_OWVAR 32
54390: PUSH
54391: LD_INT 0
54393: ST_TO_ADDR
// end ;
54394: LD_VAR 0 1
54398: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54399: LD_INT 0
54401: PPUSH
54402: PPUSH
54403: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54404: LD_ADDR_VAR 0 6
54408: PUSH
54409: LD_VAR 0 1
54413: PUSH
54414: LD_VAR 0 3
54418: PLUS
54419: PUSH
54420: LD_INT 2
54422: DIV
54423: ST_TO_ADDR
// if _x < 0 then
54424: LD_VAR 0 6
54428: PUSH
54429: LD_INT 0
54431: LESS
54432: IFFALSE 54449
// _x := _x * - 1 ;
54434: LD_ADDR_VAR 0 6
54438: PUSH
54439: LD_VAR 0 6
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: MUL
54448: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54449: LD_ADDR_VAR 0 7
54453: PUSH
54454: LD_VAR 0 2
54458: PUSH
54459: LD_VAR 0 4
54463: PLUS
54464: PUSH
54465: LD_INT 2
54467: DIV
54468: ST_TO_ADDR
// if _y < 0 then
54469: LD_VAR 0 7
54473: PUSH
54474: LD_INT 0
54476: LESS
54477: IFFALSE 54494
// _y := _y * - 1 ;
54479: LD_ADDR_VAR 0 7
54483: PUSH
54484: LD_VAR 0 7
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: MUL
54493: ST_TO_ADDR
// result := [ _x , _y ] ;
54494: LD_ADDR_VAR 0 5
54498: PUSH
54499: LD_VAR 0 6
54503: PUSH
54504: LD_VAR 0 7
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: ST_TO_ADDR
// end ;
54513: LD_VAR 0 5
54517: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54518: LD_INT 0
54520: PPUSH
54521: PPUSH
54522: PPUSH
54523: PPUSH
// task := GetTaskList ( unit ) ;
54524: LD_ADDR_VAR 0 7
54528: PUSH
54529: LD_VAR 0 1
54533: PPUSH
54534: CALL_OW 437
54538: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54539: LD_VAR 0 7
54543: NOT
54544: IFFALSE 54563
54546: PUSH
54547: LD_VAR 0 1
54551: PPUSH
54552: LD_VAR 0 2
54556: PPUSH
54557: CALL_OW 308
54561: NOT
54562: AND
54563: IFFALSE 54567
// exit ;
54565: GO 54685
// if IsInArea ( unit , area ) then
54567: LD_VAR 0 1
54571: PPUSH
54572: LD_VAR 0 2
54576: PPUSH
54577: CALL_OW 308
54581: IFFALSE 54599
// begin ComMoveToArea ( unit , goAway ) ;
54583: LD_VAR 0 1
54587: PPUSH
54588: LD_VAR 0 3
54592: PPUSH
54593: CALL_OW 113
// exit ;
54597: GO 54685
// end ; if task [ 1 ] [ 1 ] <> M then
54599: LD_VAR 0 7
54603: PUSH
54604: LD_INT 1
54606: ARRAY
54607: PUSH
54608: LD_INT 1
54610: ARRAY
54611: PUSH
54612: LD_STRING M
54614: NONEQUAL
54615: IFFALSE 54619
// exit ;
54617: GO 54685
// x := task [ 1 ] [ 2 ] ;
54619: LD_ADDR_VAR 0 5
54623: PUSH
54624: LD_VAR 0 7
54628: PUSH
54629: LD_INT 1
54631: ARRAY
54632: PUSH
54633: LD_INT 2
54635: ARRAY
54636: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54637: LD_ADDR_VAR 0 6
54641: PUSH
54642: LD_VAR 0 7
54646: PUSH
54647: LD_INT 1
54649: ARRAY
54650: PUSH
54651: LD_INT 3
54653: ARRAY
54654: ST_TO_ADDR
// if InArea ( x , y , area ) then
54655: LD_VAR 0 5
54659: PPUSH
54660: LD_VAR 0 6
54664: PPUSH
54665: LD_VAR 0 2
54669: PPUSH
54670: CALL_OW 309
54674: IFFALSE 54685
// ComStop ( unit ) ;
54676: LD_VAR 0 1
54680: PPUSH
54681: CALL_OW 141
// end ;
54685: LD_VAR 0 4
54689: RET
// export function Abs ( value ) ; begin
54690: LD_INT 0
54692: PPUSH
// result := value ;
54693: LD_ADDR_VAR 0 2
54697: PUSH
54698: LD_VAR 0 1
54702: ST_TO_ADDR
// if value < 0 then
54703: LD_VAR 0 1
54707: PUSH
54708: LD_INT 0
54710: LESS
54711: IFFALSE 54728
// result := value * - 1 ;
54713: LD_ADDR_VAR 0 2
54717: PUSH
54718: LD_VAR 0 1
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: MUL
54727: ST_TO_ADDR
// end ;
54728: LD_VAR 0 2
54732: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54733: LD_INT 0
54735: PPUSH
54736: PPUSH
54737: PPUSH
54738: PPUSH
54739: PPUSH
54740: PPUSH
54741: PPUSH
54742: PPUSH
// if not unit or not building then
54743: LD_VAR 0 1
54747: NOT
54748: IFTRUE 54757
54750: PUSH
54751: LD_VAR 0 2
54755: NOT
54756: OR
54757: IFFALSE 54761
// exit ;
54759: GO 54989
// x := GetX ( building ) ;
54761: LD_ADDR_VAR 0 4
54765: PUSH
54766: LD_VAR 0 2
54770: PPUSH
54771: CALL_OW 250
54775: ST_TO_ADDR
// y := GetY ( building ) ;
54776: LD_ADDR_VAR 0 6
54780: PUSH
54781: LD_VAR 0 2
54785: PPUSH
54786: CALL_OW 251
54790: ST_TO_ADDR
// d := GetDir ( building ) ;
54791: LD_ADDR_VAR 0 8
54795: PUSH
54796: LD_VAR 0 2
54800: PPUSH
54801: CALL_OW 254
54805: ST_TO_ADDR
// r := 4 ;
54806: LD_ADDR_VAR 0 9
54810: PUSH
54811: LD_INT 4
54813: ST_TO_ADDR
// for i := 1 to 5 do
54814: LD_ADDR_VAR 0 10
54818: PUSH
54819: DOUBLE
54820: LD_INT 1
54822: DEC
54823: ST_TO_ADDR
54824: LD_INT 5
54826: PUSH
54827: FOR_TO
54828: IFFALSE 54987
// begin _x := ShiftX ( x , d , r + i ) ;
54830: LD_ADDR_VAR 0 5
54834: PUSH
54835: LD_VAR 0 4
54839: PPUSH
54840: LD_VAR 0 8
54844: PPUSH
54845: LD_VAR 0 9
54849: PUSH
54850: LD_VAR 0 10
54854: PLUS
54855: PPUSH
54856: CALL_OW 272
54860: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54861: LD_ADDR_VAR 0 7
54865: PUSH
54866: LD_VAR 0 6
54870: PPUSH
54871: LD_VAR 0 8
54875: PPUSH
54876: LD_VAR 0 9
54880: PUSH
54881: LD_VAR 0 10
54885: PLUS
54886: PPUSH
54887: CALL_OW 273
54891: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54892: LD_VAR 0 5
54896: PPUSH
54897: LD_VAR 0 7
54901: PPUSH
54902: CALL_OW 488
54906: IFFALSE 54941
54908: PUSH
54909: LD_VAR 0 5
54913: PPUSH
54914: LD_VAR 0 7
54918: PPUSH
54919: CALL_OW 428
54923: PPUSH
54924: CALL_OW 247
54928: PUSH
54929: LD_INT 3
54931: PUSH
54932: LD_INT 2
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: IN
54939: NOT
54940: AND
54941: IFFALSE 54985
// begin ComMoveXY ( unit , _x , _y ) ;
54943: LD_VAR 0 1
54947: PPUSH
54948: LD_VAR 0 5
54952: PPUSH
54953: LD_VAR 0 7
54957: PPUSH
54958: CALL_OW 111
// result := [ _x , _y ] ;
54962: LD_ADDR_VAR 0 3
54966: PUSH
54967: LD_VAR 0 5
54971: PUSH
54972: LD_VAR 0 7
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: ST_TO_ADDR
// exit ;
54981: POP
54982: POP
54983: GO 54989
// end ; end ;
54985: GO 54827
54987: POP
54988: POP
// end ;
54989: LD_VAR 0 3
54993: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54994: LD_INT 0
54996: PPUSH
54997: PPUSH
54998: PPUSH
// result := 0 ;
54999: LD_ADDR_VAR 0 3
55003: PUSH
55004: LD_INT 0
55006: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55007: LD_VAR 0 1
55011: PUSH
55012: LD_INT 0
55014: LESS
55015: IFTRUE 55027
55017: PUSH
55018: LD_VAR 0 1
55022: PUSH
55023: LD_INT 8
55025: GREATER
55026: OR
55027: IFTRUE 55039
55029: PUSH
55030: LD_VAR 0 2
55034: PUSH
55035: LD_INT 0
55037: LESS
55038: OR
55039: IFTRUE 55051
55041: PUSH
55042: LD_VAR 0 2
55046: PUSH
55047: LD_INT 8
55049: GREATER
55050: OR
55051: IFFALSE 55055
// exit ;
55053: GO 55130
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55055: LD_ADDR_VAR 0 4
55059: PUSH
55060: LD_INT 22
55062: PUSH
55063: LD_VAR 0 2
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PPUSH
55072: CALL_OW 69
55076: PUSH
55077: FOR_IN
55078: IFFALSE 55128
// begin un := UnitShoot ( i ) ;
55080: LD_ADDR_VAR 0 5
55084: PUSH
55085: LD_VAR 0 4
55089: PPUSH
55090: CALL_OW 504
55094: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55095: LD_VAR 0 5
55099: PPUSH
55100: CALL_OW 255
55104: PUSH
55105: LD_VAR 0 1
55109: EQUAL
55110: IFFALSE 55126
// begin result := un ;
55112: LD_ADDR_VAR 0 3
55116: PUSH
55117: LD_VAR 0 5
55121: ST_TO_ADDR
// exit ;
55122: POP
55123: POP
55124: GO 55130
// end ; end ;
55126: GO 55077
55128: POP
55129: POP
// end ;
55130: LD_VAR 0 3
55134: RET
// export function GetCargoBay ( units ) ; begin
55135: LD_INT 0
55137: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55138: LD_ADDR_VAR 0 2
55142: PUSH
55143: LD_VAR 0 1
55147: PPUSH
55148: LD_INT 2
55150: PUSH
55151: LD_INT 34
55153: PUSH
55154: LD_INT 12
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 34
55163: PUSH
55164: LD_INT 51
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 34
55173: PUSH
55174: LD_INT 32
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 34
55183: PUSH
55184: LD_INT 89
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: PPUSH
55198: CALL_OW 72
55202: ST_TO_ADDR
// end ;
55203: LD_VAR 0 2
55207: RET
// export function Negate ( value ) ; begin
55208: LD_INT 0
55210: PPUSH
// result := not value ;
55211: LD_ADDR_VAR 0 2
55215: PUSH
55216: LD_VAR 0 1
55220: NOT
55221: ST_TO_ADDR
// end ;
55222: LD_VAR 0 2
55226: RET
// export function Inc ( value ) ; begin
55227: LD_INT 0
55229: PPUSH
// result := value + 1 ;
55230: LD_ADDR_VAR 0 2
55234: PUSH
55235: LD_VAR 0 1
55239: PUSH
55240: LD_INT 1
55242: PLUS
55243: ST_TO_ADDR
// end ;
55244: LD_VAR 0 2
55248: RET
// export function Dec ( value ) ; begin
55249: LD_INT 0
55251: PPUSH
// result := value - 1 ;
55252: LD_ADDR_VAR 0 2
55256: PUSH
55257: LD_VAR 0 1
55261: PUSH
55262: LD_INT 1
55264: MINUS
55265: ST_TO_ADDR
// end ;
55266: LD_VAR 0 2
55270: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55271: LD_INT 0
55273: PPUSH
55274: PPUSH
55275: PPUSH
55276: PPUSH
55277: PPUSH
55278: PPUSH
55279: PPUSH
55280: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55281: LD_VAR 0 1
55285: PPUSH
55286: LD_VAR 0 2
55290: PPUSH
55291: CALL_OW 488
55295: NOT
55296: IFTRUE 55315
55298: PUSH
55299: LD_VAR 0 3
55303: PPUSH
55304: LD_VAR 0 4
55308: PPUSH
55309: CALL_OW 488
55313: NOT
55314: OR
55315: IFFALSE 55328
// begin result := - 1 ;
55317: LD_ADDR_VAR 0 5
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: ST_TO_ADDR
// exit ;
55326: GO 55563
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55328: LD_ADDR_VAR 0 12
55332: PUSH
55333: LD_VAR 0 1
55337: PPUSH
55338: LD_VAR 0 2
55342: PPUSH
55343: LD_VAR 0 3
55347: PPUSH
55348: LD_VAR 0 4
55352: PPUSH
55353: CALL 54399 0 4
55357: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55358: LD_ADDR_VAR 0 11
55362: PUSH
55363: LD_VAR 0 1
55367: PPUSH
55368: LD_VAR 0 2
55372: PPUSH
55373: LD_VAR 0 12
55377: PUSH
55378: LD_INT 1
55380: ARRAY
55381: PPUSH
55382: LD_VAR 0 12
55386: PUSH
55387: LD_INT 2
55389: ARRAY
55390: PPUSH
55391: CALL_OW 298
55395: ST_TO_ADDR
// distance := 9999 ;
55396: LD_ADDR_VAR 0 10
55400: PUSH
55401: LD_INT 9999
55403: ST_TO_ADDR
// for i := 0 to 5 do
55404: LD_ADDR_VAR 0 6
55408: PUSH
55409: DOUBLE
55410: LD_INT 0
55412: DEC
55413: ST_TO_ADDR
55414: LD_INT 5
55416: PUSH
55417: FOR_TO
55418: IFFALSE 55561
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55420: LD_ADDR_VAR 0 7
55424: PUSH
55425: LD_VAR 0 1
55429: PPUSH
55430: LD_VAR 0 6
55434: PPUSH
55435: LD_VAR 0 11
55439: PPUSH
55440: CALL_OW 272
55444: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55445: LD_ADDR_VAR 0 8
55449: PUSH
55450: LD_VAR 0 2
55454: PPUSH
55455: LD_VAR 0 6
55459: PPUSH
55460: LD_VAR 0 11
55464: PPUSH
55465: CALL_OW 273
55469: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55470: LD_VAR 0 7
55474: PPUSH
55475: LD_VAR 0 8
55479: PPUSH
55480: CALL_OW 488
55484: NOT
55485: IFFALSE 55489
// continue ;
55487: GO 55417
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55489: LD_ADDR_VAR 0 9
55493: PUSH
55494: LD_VAR 0 12
55498: PUSH
55499: LD_INT 1
55501: ARRAY
55502: PPUSH
55503: LD_VAR 0 12
55507: PUSH
55508: LD_INT 2
55510: ARRAY
55511: PPUSH
55512: LD_VAR 0 7
55516: PPUSH
55517: LD_VAR 0 8
55521: PPUSH
55522: CALL_OW 298
55526: ST_TO_ADDR
// if tmp < distance then
55527: LD_VAR 0 9
55531: PUSH
55532: LD_VAR 0 10
55536: LESS
55537: IFFALSE 55559
// begin result := i ;
55539: LD_ADDR_VAR 0 5
55543: PUSH
55544: LD_VAR 0 6
55548: ST_TO_ADDR
// distance := tmp ;
55549: LD_ADDR_VAR 0 10
55553: PUSH
55554: LD_VAR 0 9
55558: ST_TO_ADDR
// end ; end ;
55559: GO 55417
55561: POP
55562: POP
// end ;
55563: LD_VAR 0 5
55567: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55568: LD_INT 0
55570: PPUSH
55571: PPUSH
// if not driver or not IsInUnit ( driver ) then
55572: LD_VAR 0 1
55576: NOT
55577: IFTRUE 55591
55579: PUSH
55580: LD_VAR 0 1
55584: PPUSH
55585: CALL_OW 310
55589: NOT
55590: OR
55591: IFFALSE 55595
// exit ;
55593: GO 55685
// vehicle := IsInUnit ( driver ) ;
55595: LD_ADDR_VAR 0 3
55599: PUSH
55600: LD_VAR 0 1
55604: PPUSH
55605: CALL_OW 310
55609: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55610: LD_VAR 0 1
55614: PPUSH
55615: LD_STRING \
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: PUSH
55645: LD_STRING E
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: LD_VAR 0 3
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PPUSH
55681: CALL_OW 446
// end ;
55685: LD_VAR 0 2
55689: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55690: LD_INT 0
55692: PPUSH
55693: PPUSH
// if not driver or not IsInUnit ( driver ) then
55694: LD_VAR 0 1
55698: NOT
55699: IFTRUE 55713
55701: PUSH
55702: LD_VAR 0 1
55706: PPUSH
55707: CALL_OW 310
55711: NOT
55712: OR
55713: IFFALSE 55717
// exit ;
55715: GO 55807
// vehicle := IsInUnit ( driver ) ;
55717: LD_ADDR_VAR 0 3
55721: PUSH
55722: LD_VAR 0 1
55726: PPUSH
55727: CALL_OW 310
55731: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55732: LD_VAR 0 1
55736: PPUSH
55737: LD_STRING \
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: PUSH
55767: LD_STRING E
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: LD_VAR 0 3
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PPUSH
55803: CALL_OW 447
// end ;
55807: LD_VAR 0 2
55811: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55812: LD_INT 0
55814: PPUSH
55815: PPUSH
55816: PPUSH
// tmp := [ ] ;
55817: LD_ADDR_VAR 0 5
55821: PUSH
55822: EMPTY
55823: ST_TO_ADDR
// for i in units do
55824: LD_ADDR_VAR 0 4
55828: PUSH
55829: LD_VAR 0 1
55833: PUSH
55834: FOR_IN
55835: IFFALSE 55873
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55837: LD_ADDR_VAR 0 5
55841: PUSH
55842: LD_VAR 0 5
55846: PPUSH
55847: LD_VAR 0 5
55851: PUSH
55852: LD_INT 1
55854: PLUS
55855: PPUSH
55856: LD_VAR 0 4
55860: PPUSH
55861: CALL_OW 256
55865: PPUSH
55866: CALL_OW 2
55870: ST_TO_ADDR
55871: GO 55834
55873: POP
55874: POP
// if not tmp then
55875: LD_VAR 0 5
55879: NOT
55880: IFFALSE 55884
// exit ;
55882: GO 55932
// if asc then
55884: LD_VAR 0 2
55888: IFFALSE 55912
// result := SortListByListAsc ( units , tmp ) else
55890: LD_ADDR_VAR 0 3
55894: PUSH
55895: LD_VAR 0 1
55899: PPUSH
55900: LD_VAR 0 5
55904: PPUSH
55905: CALL_OW 76
55909: ST_TO_ADDR
55910: GO 55932
// result := SortListByListDesc ( units , tmp ) ;
55912: LD_ADDR_VAR 0 3
55916: PUSH
55917: LD_VAR 0 1
55921: PPUSH
55922: LD_VAR 0 5
55926: PPUSH
55927: CALL_OW 77
55931: ST_TO_ADDR
// end ;
55932: LD_VAR 0 3
55936: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55937: LD_INT 0
55939: PPUSH
55940: PPUSH
// task := GetTaskList ( mech ) ;
55941: LD_ADDR_VAR 0 4
55945: PUSH
55946: LD_VAR 0 1
55950: PPUSH
55951: CALL_OW 437
55955: ST_TO_ADDR
// if not task then
55956: LD_VAR 0 4
55960: NOT
55961: IFFALSE 55965
// exit ;
55963: GO 56009
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55965: LD_ADDR_VAR 0 3
55969: PUSH
55970: LD_VAR 0 4
55974: PUSH
55975: LD_INT 1
55977: ARRAY
55978: PUSH
55979: LD_INT 1
55981: ARRAY
55982: PUSH
55983: LD_STRING r
55985: EQUAL
55986: IFFALSE 56008
55988: PUSH
55989: LD_VAR 0 4
55993: PUSH
55994: LD_INT 1
55996: ARRAY
55997: PUSH
55998: LD_INT 4
56000: ARRAY
56001: PUSH
56002: LD_VAR 0 2
56006: EQUAL
56007: AND
56008: ST_TO_ADDR
// end ;
56009: LD_VAR 0 3
56013: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56014: LD_INT 0
56016: PPUSH
// SetDir ( unit , d ) ;
56017: LD_VAR 0 1
56021: PPUSH
56022: LD_VAR 0 4
56026: PPUSH
56027: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
56031: LD_ADDR_VAR 0 6
56035: PUSH
56036: LD_VAR 0 1
56040: PPUSH
56041: LD_VAR 0 2
56045: PPUSH
56046: LD_VAR 0 3
56050: PPUSH
56051: LD_VAR 0 5
56055: PPUSH
56056: CALL_OW 48
56060: ST_TO_ADDR
// end ;
56061: LD_VAR 0 6
56065: RET
// export function ToNaturalNumber ( number ) ; begin
56066: LD_INT 0
56068: PPUSH
// result := number div 1 ;
56069: LD_ADDR_VAR 0 2
56073: PUSH
56074: LD_VAR 0 1
56078: PUSH
56079: LD_INT 1
56081: DIV
56082: ST_TO_ADDR
// if number < 0 then
56083: LD_VAR 0 1
56087: PUSH
56088: LD_INT 0
56090: LESS
56091: IFFALSE 56101
// result := 0 ;
56093: LD_ADDR_VAR 0 2
56097: PUSH
56098: LD_INT 0
56100: ST_TO_ADDR
// end ;
56101: LD_VAR 0 2
56105: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
56106: LD_INT 0
56108: PPUSH
56109: PPUSH
56110: PPUSH
// if not buildings then
56111: LD_VAR 0 1
56115: NOT
56116: IFFALSE 56120
// exit ;
56118: GO 56235
// tmp := [ ] ;
56120: LD_ADDR_VAR 0 5
56124: PUSH
56125: EMPTY
56126: ST_TO_ADDR
// for b in buildings do
56127: LD_ADDR_VAR 0 4
56131: PUSH
56132: LD_VAR 0 1
56136: PUSH
56137: FOR_IN
56138: IFFALSE 56176
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
56140: LD_ADDR_VAR 0 5
56144: PUSH
56145: LD_VAR 0 5
56149: PPUSH
56150: LD_VAR 0 5
56154: PUSH
56155: LD_INT 1
56157: PLUS
56158: PPUSH
56159: LD_VAR 0 4
56163: PPUSH
56164: CALL_OW 266
56168: PPUSH
56169: CALL_OW 1
56173: ST_TO_ADDR
56174: GO 56137
56176: POP
56177: POP
// if not tmp then
56178: LD_VAR 0 5
56182: NOT
56183: IFFALSE 56187
// exit ;
56185: GO 56235
// if asc then
56187: LD_VAR 0 2
56191: IFFALSE 56215
// result := SortListByListAsc ( buildings , tmp ) else
56193: LD_ADDR_VAR 0 3
56197: PUSH
56198: LD_VAR 0 1
56202: PPUSH
56203: LD_VAR 0 5
56207: PPUSH
56208: CALL_OW 76
56212: ST_TO_ADDR
56213: GO 56235
// result := SortListByListDesc ( buildings , tmp ) ;
56215: LD_ADDR_VAR 0 3
56219: PUSH
56220: LD_VAR 0 1
56224: PPUSH
56225: LD_VAR 0 5
56229: PPUSH
56230: CALL_OW 77
56234: ST_TO_ADDR
// end ;
56235: LD_VAR 0 3
56239: RET
// export function SortByClass ( units , class ) ; var un ; begin
56240: LD_INT 0
56242: PPUSH
56243: PPUSH
// if not units or not class then
56244: LD_VAR 0 1
56248: NOT
56249: IFTRUE 56258
56251: PUSH
56252: LD_VAR 0 2
56256: NOT
56257: OR
56258: IFFALSE 56262
// exit ;
56260: GO 56357
// result := [ ] ;
56262: LD_ADDR_VAR 0 3
56266: PUSH
56267: EMPTY
56268: ST_TO_ADDR
// for un in units do
56269: LD_ADDR_VAR 0 4
56273: PUSH
56274: LD_VAR 0 1
56278: PUSH
56279: FOR_IN
56280: IFFALSE 56355
// if GetClass ( un ) = class then
56282: LD_VAR 0 4
56286: PPUSH
56287: CALL_OW 257
56291: PUSH
56292: LD_VAR 0 2
56296: EQUAL
56297: IFFALSE 56324
// result := Insert ( result , 1 , un ) else
56299: LD_ADDR_VAR 0 3
56303: PUSH
56304: LD_VAR 0 3
56308: PPUSH
56309: LD_INT 1
56311: PPUSH
56312: LD_VAR 0 4
56316: PPUSH
56317: CALL_OW 2
56321: ST_TO_ADDR
56322: GO 56353
// result := Replace ( result , result + 1 , un ) ;
56324: LD_ADDR_VAR 0 3
56328: PUSH
56329: LD_VAR 0 3
56333: PPUSH
56334: LD_VAR 0 3
56338: PUSH
56339: LD_INT 1
56341: PLUS
56342: PPUSH
56343: LD_VAR 0 4
56347: PPUSH
56348: CALL_OW 1
56352: ST_TO_ADDR
56353: GO 56279
56355: POP
56356: POP
// end ;
56357: LD_VAR 0 3
56361: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56362: LD_INT 0
56364: PPUSH
56365: PPUSH
56366: PPUSH
56367: PPUSH
56368: PPUSH
56369: PPUSH
56370: PPUSH
// result := [ ] ;
56371: LD_ADDR_VAR 0 4
56375: PUSH
56376: EMPTY
56377: ST_TO_ADDR
// if x - r < 0 then
56378: LD_VAR 0 1
56382: PUSH
56383: LD_VAR 0 3
56387: MINUS
56388: PUSH
56389: LD_INT 0
56391: LESS
56392: IFFALSE 56404
// min_x := 0 else
56394: LD_ADDR_VAR 0 8
56398: PUSH
56399: LD_INT 0
56401: ST_TO_ADDR
56402: GO 56420
// min_x := x - r ;
56404: LD_ADDR_VAR 0 8
56408: PUSH
56409: LD_VAR 0 1
56413: PUSH
56414: LD_VAR 0 3
56418: MINUS
56419: ST_TO_ADDR
// if y - r < 0 then
56420: LD_VAR 0 2
56424: PUSH
56425: LD_VAR 0 3
56429: MINUS
56430: PUSH
56431: LD_INT 0
56433: LESS
56434: IFFALSE 56446
// min_y := 0 else
56436: LD_ADDR_VAR 0 7
56440: PUSH
56441: LD_INT 0
56443: ST_TO_ADDR
56444: GO 56462
// min_y := y - r ;
56446: LD_ADDR_VAR 0 7
56450: PUSH
56451: LD_VAR 0 2
56455: PUSH
56456: LD_VAR 0 3
56460: MINUS
56461: ST_TO_ADDR
// max_x := x + r ;
56462: LD_ADDR_VAR 0 9
56466: PUSH
56467: LD_VAR 0 1
56471: PUSH
56472: LD_VAR 0 3
56476: PLUS
56477: ST_TO_ADDR
// max_y := y + r ;
56478: LD_ADDR_VAR 0 10
56482: PUSH
56483: LD_VAR 0 2
56487: PUSH
56488: LD_VAR 0 3
56492: PLUS
56493: ST_TO_ADDR
// for _x = min_x to max_x do
56494: LD_ADDR_VAR 0 5
56498: PUSH
56499: DOUBLE
56500: LD_VAR 0 8
56504: DEC
56505: ST_TO_ADDR
56506: LD_VAR 0 9
56510: PUSH
56511: FOR_TO
56512: IFFALSE 56613
// for _y = min_y to max_y do
56514: LD_ADDR_VAR 0 6
56518: PUSH
56519: DOUBLE
56520: LD_VAR 0 7
56524: DEC
56525: ST_TO_ADDR
56526: LD_VAR 0 10
56530: PUSH
56531: FOR_TO
56532: IFFALSE 56609
// begin if not ValidHex ( _x , _y ) then
56534: LD_VAR 0 5
56538: PPUSH
56539: LD_VAR 0 6
56543: PPUSH
56544: CALL_OW 488
56548: NOT
56549: IFFALSE 56553
// continue ;
56551: GO 56531
// if GetResourceTypeXY ( _x , _y ) then
56553: LD_VAR 0 5
56557: PPUSH
56558: LD_VAR 0 6
56562: PPUSH
56563: CALL_OW 283
56567: IFFALSE 56607
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56569: LD_ADDR_VAR 0 4
56573: PUSH
56574: LD_VAR 0 4
56578: PPUSH
56579: LD_VAR 0 4
56583: PUSH
56584: LD_INT 1
56586: PLUS
56587: PPUSH
56588: LD_VAR 0 5
56592: PUSH
56593: LD_VAR 0 6
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PPUSH
56602: CALL_OW 1
56606: ST_TO_ADDR
// end ;
56607: GO 56531
56609: POP
56610: POP
56611: GO 56511
56613: POP
56614: POP
// end ;
56615: LD_VAR 0 4
56619: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56620: LD_INT 0
56622: PPUSH
56623: PPUSH
56624: PPUSH
56625: PPUSH
56626: PPUSH
56627: PPUSH
56628: PPUSH
56629: PPUSH
// if not units then
56630: LD_VAR 0 1
56634: NOT
56635: IFFALSE 56639
// exit ;
56637: GO 57171
// result := UnitFilter ( units , [ f_ok ] ) ;
56639: LD_ADDR_VAR 0 3
56643: PUSH
56644: LD_VAR 0 1
56648: PPUSH
56649: LD_INT 50
56651: PUSH
56652: EMPTY
56653: LIST
56654: PPUSH
56655: CALL_OW 72
56659: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56660: LD_ADDR_VAR 0 8
56664: PUSH
56665: LD_VAR 0 1
56669: PUSH
56670: LD_INT 1
56672: ARRAY
56673: PPUSH
56674: CALL_OW 255
56678: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56679: LD_ADDR_VAR 0 10
56683: PUSH
56684: LD_INT 29
56686: PUSH
56687: LD_INT 91
56689: PUSH
56690: LD_INT 49
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: LIST
56697: ST_TO_ADDR
// if not result then
56698: LD_VAR 0 3
56702: NOT
56703: IFFALSE 56707
// exit ;
56705: GO 57171
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56707: LD_ADDR_VAR 0 5
56711: PUSH
56712: LD_INT 81
56714: PUSH
56715: LD_VAR 0 8
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PPUSH
56724: CALL_OW 69
56728: ST_TO_ADDR
// for i in result do
56729: LD_ADDR_VAR 0 4
56733: PUSH
56734: LD_VAR 0 3
56738: PUSH
56739: FOR_IN
56740: IFFALSE 57169
// begin tag := GetTag ( i ) + 1 ;
56742: LD_ADDR_VAR 0 9
56746: PUSH
56747: LD_VAR 0 4
56751: PPUSH
56752: CALL_OW 110
56756: PUSH
56757: LD_INT 1
56759: PLUS
56760: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
56761: LD_ADDR_VAR 0 7
56765: PUSH
56766: LD_VAR 0 4
56770: PPUSH
56771: CALL_OW 250
56775: PPUSH
56776: LD_VAR 0 4
56780: PPUSH
56781: CALL_OW 251
56785: PPUSH
56786: LD_INT 4
56788: PPUSH
56789: CALL 56362 0 3
56793: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
56794: LD_VAR 0 4
56798: PPUSH
56799: CALL_OW 247
56803: PUSH
56804: LD_INT 2
56806: EQUAL
56807: IFFALSE 56819
56809: PUSH
56810: LD_VAR 0 7
56814: PUSH
56815: LD_INT 2
56817: GREATER
56818: AND
56819: IFFALSE 56839
56821: PUSH
56822: LD_VAR 0 4
56826: PPUSH
56827: CALL_OW 264
56831: PUSH
56832: LD_VAR 0 10
56836: IN
56837: NOT
56838: AND
56839: IFFALSE 56878
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56841: LD_VAR 0 4
56845: PPUSH
56846: LD_VAR 0 7
56850: PUSH
56851: LD_INT 1
56853: ARRAY
56854: PUSH
56855: LD_INT 1
56857: ARRAY
56858: PPUSH
56859: LD_VAR 0 7
56863: PUSH
56864: LD_INT 1
56866: ARRAY
56867: PUSH
56868: LD_INT 2
56870: ARRAY
56871: PPUSH
56872: CALL_OW 116
56876: GO 57167
// if path > tag then
56878: LD_VAR 0 2
56882: PUSH
56883: LD_VAR 0 9
56887: GREATER
56888: IFFALSE 57096
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56890: LD_ADDR_VAR 0 6
56894: PUSH
56895: LD_VAR 0 5
56899: PPUSH
56900: LD_INT 91
56902: PUSH
56903: LD_VAR 0 4
56907: PUSH
56908: LD_INT 8
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: LIST
56915: PPUSH
56916: CALL_OW 72
56920: ST_TO_ADDR
// if nearEnemy then
56921: LD_VAR 0 6
56925: IFFALSE 56994
// begin if GetWeapon ( i ) = ru_time_lapser then
56927: LD_VAR 0 4
56931: PPUSH
56932: CALL_OW 264
56936: PUSH
56937: LD_INT 49
56939: EQUAL
56940: IFFALSE 56968
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56942: LD_VAR 0 4
56946: PPUSH
56947: LD_VAR 0 6
56951: PPUSH
56952: LD_VAR 0 4
56956: PPUSH
56957: CALL_OW 74
56961: PPUSH
56962: CALL_OW 112
56966: GO 56992
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56968: LD_VAR 0 4
56972: PPUSH
56973: LD_VAR 0 6
56977: PPUSH
56978: LD_VAR 0 4
56982: PPUSH
56983: CALL_OW 74
56987: PPUSH
56988: CALL 58252 0 2
// end else
56992: GO 57094
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56994: LD_VAR 0 4
56998: PPUSH
56999: LD_VAR 0 2
57003: PUSH
57004: LD_VAR 0 9
57008: ARRAY
57009: PUSH
57010: LD_INT 1
57012: ARRAY
57013: PPUSH
57014: LD_VAR 0 2
57018: PUSH
57019: LD_VAR 0 9
57023: ARRAY
57024: PUSH
57025: LD_INT 2
57027: ARRAY
57028: PPUSH
57029: CALL_OW 297
57033: PUSH
57034: LD_INT 6
57036: GREATER
57037: IFFALSE 57080
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57039: LD_VAR 0 4
57043: PPUSH
57044: LD_VAR 0 2
57048: PUSH
57049: LD_VAR 0 9
57053: ARRAY
57054: PUSH
57055: LD_INT 1
57057: ARRAY
57058: PPUSH
57059: LD_VAR 0 2
57063: PUSH
57064: LD_VAR 0 9
57068: ARRAY
57069: PUSH
57070: LD_INT 2
57072: ARRAY
57073: PPUSH
57074: CALL_OW 114
57078: GO 57094
// SetTag ( i , tag ) ;
57080: LD_VAR 0 4
57084: PPUSH
57085: LD_VAR 0 9
57089: PPUSH
57090: CALL_OW 109
// end else
57094: GO 57167
// if enemy then
57096: LD_VAR 0 5
57100: IFFALSE 57167
// begin if GetWeapon ( i ) = ru_time_lapser then
57102: LD_VAR 0 4
57106: PPUSH
57107: CALL_OW 264
57111: PUSH
57112: LD_INT 49
57114: EQUAL
57115: IFFALSE 57143
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57117: LD_VAR 0 4
57121: PPUSH
57122: LD_VAR 0 5
57126: PPUSH
57127: LD_VAR 0 4
57131: PPUSH
57132: CALL_OW 74
57136: PPUSH
57137: CALL_OW 112
57141: GO 57167
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57143: LD_VAR 0 4
57147: PPUSH
57148: LD_VAR 0 5
57152: PPUSH
57153: LD_VAR 0 4
57157: PPUSH
57158: CALL_OW 74
57162: PPUSH
57163: CALL 58252 0 2
// end ; end ;
57167: GO 56739
57169: POP
57170: POP
// end ;
57171: LD_VAR 0 3
57175: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57176: LD_INT 0
57178: PPUSH
57179: PPUSH
57180: PPUSH
// if not unit or IsInUnit ( unit ) then
57181: LD_VAR 0 1
57185: NOT
57186: IFTRUE 57199
57188: PUSH
57189: LD_VAR 0 1
57193: PPUSH
57194: CALL_OW 310
57198: OR
57199: IFFALSE 57203
// exit ;
57201: GO 57294
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57203: LD_ADDR_VAR 0 4
57207: PUSH
57208: LD_VAR 0 1
57212: PPUSH
57213: CALL_OW 250
57217: PPUSH
57218: LD_VAR 0 2
57222: PPUSH
57223: LD_INT 1
57225: PPUSH
57226: CALL_OW 272
57230: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57231: LD_ADDR_VAR 0 5
57235: PUSH
57236: LD_VAR 0 1
57240: PPUSH
57241: CALL_OW 251
57245: PPUSH
57246: LD_VAR 0 2
57250: PPUSH
57251: LD_INT 1
57253: PPUSH
57254: CALL_OW 273
57258: ST_TO_ADDR
// if ValidHex ( x , y ) then
57259: LD_VAR 0 4
57263: PPUSH
57264: LD_VAR 0 5
57268: PPUSH
57269: CALL_OW 488
57273: IFFALSE 57294
// ComTurnXY ( unit , x , y ) ;
57275: LD_VAR 0 1
57279: PPUSH
57280: LD_VAR 0 4
57284: PPUSH
57285: LD_VAR 0 5
57289: PPUSH
57290: CALL_OW 118
// end ;
57294: LD_VAR 0 3
57298: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57299: LD_INT 0
57301: PPUSH
57302: PPUSH
// result := false ;
57303: LD_ADDR_VAR 0 3
57307: PUSH
57308: LD_INT 0
57310: ST_TO_ADDR
// if not units then
57311: LD_VAR 0 2
57315: NOT
57316: IFFALSE 57320
// exit ;
57318: GO 57365
// for i in units do
57320: LD_ADDR_VAR 0 4
57324: PUSH
57325: LD_VAR 0 2
57329: PUSH
57330: FOR_IN
57331: IFFALSE 57363
// if See ( side , i ) then
57333: LD_VAR 0 1
57337: PPUSH
57338: LD_VAR 0 4
57342: PPUSH
57343: CALL_OW 292
57347: IFFALSE 57361
// begin result := true ;
57349: LD_ADDR_VAR 0 3
57353: PUSH
57354: LD_INT 1
57356: ST_TO_ADDR
// exit ;
57357: POP
57358: POP
57359: GO 57365
// end ;
57361: GO 57330
57363: POP
57364: POP
// end ;
57365: LD_VAR 0 3
57369: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57370: LD_INT 0
57372: PPUSH
57373: PPUSH
57374: PPUSH
57375: PPUSH
// if not unit or not points then
57376: LD_VAR 0 1
57380: NOT
57381: IFTRUE 57390
57383: PUSH
57384: LD_VAR 0 2
57388: NOT
57389: OR
57390: IFFALSE 57394
// exit ;
57392: GO 57484
// dist := 99999 ;
57394: LD_ADDR_VAR 0 5
57398: PUSH
57399: LD_INT 99999
57401: ST_TO_ADDR
// for i in points do
57402: LD_ADDR_VAR 0 4
57406: PUSH
57407: LD_VAR 0 2
57411: PUSH
57412: FOR_IN
57413: IFFALSE 57482
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57415: LD_ADDR_VAR 0 6
57419: PUSH
57420: LD_VAR 0 1
57424: PPUSH
57425: LD_VAR 0 4
57429: PUSH
57430: LD_INT 1
57432: ARRAY
57433: PPUSH
57434: LD_VAR 0 4
57438: PUSH
57439: LD_INT 2
57441: ARRAY
57442: PPUSH
57443: CALL_OW 297
57447: ST_TO_ADDR
// if tmpDist < dist then
57448: LD_VAR 0 6
57452: PUSH
57453: LD_VAR 0 5
57457: LESS
57458: IFFALSE 57480
// begin result := i ;
57460: LD_ADDR_VAR 0 3
57464: PUSH
57465: LD_VAR 0 4
57469: ST_TO_ADDR
// dist := tmpDist ;
57470: LD_ADDR_VAR 0 5
57474: PUSH
57475: LD_VAR 0 6
57479: ST_TO_ADDR
// end ; end ;
57480: GO 57412
57482: POP
57483: POP
// end ;
57484: LD_VAR 0 3
57488: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57489: LD_INT 0
57491: PPUSH
// uc_side := side ;
57492: LD_ADDR_OWVAR 20
57496: PUSH
57497: LD_VAR 0 1
57501: ST_TO_ADDR
// uc_nation := 3 ;
57502: LD_ADDR_OWVAR 21
57506: PUSH
57507: LD_INT 3
57509: ST_TO_ADDR
// vc_chassis := 25 ;
57510: LD_ADDR_OWVAR 37
57514: PUSH
57515: LD_INT 25
57517: ST_TO_ADDR
// vc_engine := engine_siberite ;
57518: LD_ADDR_OWVAR 39
57522: PUSH
57523: LD_INT 3
57525: ST_TO_ADDR
// vc_control := control_computer ;
57526: LD_ADDR_OWVAR 38
57530: PUSH
57531: LD_INT 3
57533: ST_TO_ADDR
// vc_weapon := 59 ;
57534: LD_ADDR_OWVAR 40
57538: PUSH
57539: LD_INT 59
57541: ST_TO_ADDR
// result := CreateVehicle ;
57542: LD_ADDR_VAR 0 5
57546: PUSH
57547: CALL_OW 45
57551: ST_TO_ADDR
// SetDir ( result , d ) ;
57552: LD_VAR 0 5
57556: PPUSH
57557: LD_VAR 0 4
57561: PPUSH
57562: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57566: LD_VAR 0 5
57570: PPUSH
57571: LD_VAR 0 2
57575: PPUSH
57576: LD_VAR 0 3
57580: PPUSH
57581: LD_INT 0
57583: PPUSH
57584: CALL_OW 48
// end ;
57588: LD_VAR 0 5
57592: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57593: LD_INT 0
57595: PPUSH
57596: PPUSH
57597: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57598: LD_ADDR_VAR 0 2
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: LD_INT 0
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57621: LD_VAR 0 1
57625: NOT
57626: IFTRUE 57659
57628: PUSH
57629: LD_VAR 0 1
57633: PPUSH
57634: CALL_OW 264
57638: PUSH
57639: LD_INT 12
57641: PUSH
57642: LD_INT 51
57644: PUSH
57645: LD_INT 32
57647: PUSH
57648: LD_INT 89
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: IN
57657: NOT
57658: OR
57659: IFFALSE 57663
// exit ;
57661: GO 57761
// for i := 1 to 3 do
57663: LD_ADDR_VAR 0 3
57667: PUSH
57668: DOUBLE
57669: LD_INT 1
57671: DEC
57672: ST_TO_ADDR
57673: LD_INT 3
57675: PUSH
57676: FOR_TO
57677: IFFALSE 57759
// begin tmp := GetCargo ( cargo , i ) ;
57679: LD_ADDR_VAR 0 4
57683: PUSH
57684: LD_VAR 0 1
57688: PPUSH
57689: LD_VAR 0 3
57693: PPUSH
57694: CALL_OW 289
57698: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57699: LD_ADDR_VAR 0 2
57703: PUSH
57704: LD_VAR 0 2
57708: PPUSH
57709: LD_VAR 0 3
57713: PPUSH
57714: LD_VAR 0 4
57718: PPUSH
57719: CALL_OW 1
57723: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57724: LD_ADDR_VAR 0 2
57728: PUSH
57729: LD_VAR 0 2
57733: PPUSH
57734: LD_INT 4
57736: PPUSH
57737: LD_VAR 0 2
57741: PUSH
57742: LD_INT 4
57744: ARRAY
57745: PUSH
57746: LD_VAR 0 4
57750: PLUS
57751: PPUSH
57752: CALL_OW 1
57756: ST_TO_ADDR
// end ;
57757: GO 57676
57759: POP
57760: POP
// end ;
57761: LD_VAR 0 2
57765: RET
// export function Length ( array ) ; begin
57766: LD_INT 0
57768: PPUSH
// result := array + 0 ;
57769: LD_ADDR_VAR 0 2
57773: PUSH
57774: LD_VAR 0 1
57778: PUSH
57779: LD_INT 0
57781: PLUS
57782: ST_TO_ADDR
// end ;
57783: LD_VAR 0 2
57787: RET
// export function PrepareArray ( array ) ; begin
57788: LD_INT 0
57790: PPUSH
// result := array diff 0 ;
57791: LD_ADDR_VAR 0 2
57795: PUSH
57796: LD_VAR 0 1
57800: PUSH
57801: LD_INT 0
57803: DIFF
57804: ST_TO_ADDR
// if not result [ 1 ] then
57805: LD_VAR 0 2
57809: PUSH
57810: LD_INT 1
57812: ARRAY
57813: NOT
57814: IFFALSE 57834
// result := Delete ( result , 1 ) ;
57816: LD_ADDR_VAR 0 2
57820: PUSH
57821: LD_VAR 0 2
57825: PPUSH
57826: LD_INT 1
57828: PPUSH
57829: CALL_OW 3
57833: ST_TO_ADDR
// end ;
57834: LD_VAR 0 2
57838: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57839: LD_INT 0
57841: PPUSH
57842: PPUSH
57843: PPUSH
57844: PPUSH
// sibRocketRange := 25 ;
57845: LD_ADDR_VAR 0 6
57849: PUSH
57850: LD_INT 25
57852: ST_TO_ADDR
// result := false ;
57853: LD_ADDR_VAR 0 4
57857: PUSH
57858: LD_INT 0
57860: ST_TO_ADDR
// for i := 0 to 5 do
57861: LD_ADDR_VAR 0 5
57865: PUSH
57866: DOUBLE
57867: LD_INT 0
57869: DEC
57870: ST_TO_ADDR
57871: LD_INT 5
57873: PUSH
57874: FOR_TO
57875: IFFALSE 57942
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57877: LD_VAR 0 1
57881: PPUSH
57882: LD_VAR 0 5
57886: PPUSH
57887: LD_VAR 0 6
57891: PPUSH
57892: CALL_OW 272
57896: PPUSH
57897: LD_VAR 0 2
57901: PPUSH
57902: LD_VAR 0 5
57906: PPUSH
57907: LD_VAR 0 6
57911: PPUSH
57912: CALL_OW 273
57916: PPUSH
57917: LD_VAR 0 3
57921: PPUSH
57922: CALL_OW 309
57926: IFFALSE 57940
// begin result := true ;
57928: LD_ADDR_VAR 0 4
57932: PUSH
57933: LD_INT 1
57935: ST_TO_ADDR
// exit ;
57936: POP
57937: POP
57938: GO 57944
// end ;
57940: GO 57874
57942: POP
57943: POP
// end ;
57944: LD_VAR 0 4
57948: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
57949: LD_INT 0
57951: PPUSH
57952: PPUSH
57953: PPUSH
// if btype = b_depot then
57954: LD_VAR 0 2
57958: PUSH
57959: LD_INT 0
57961: EQUAL
57962: IFFALSE 57974
// begin result := true ;
57964: LD_ADDR_VAR 0 3
57968: PUSH
57969: LD_INT 1
57971: ST_TO_ADDR
// exit ;
57972: GO 58094
// end ; pom := GetBase ( depot ) ;
57974: LD_ADDR_VAR 0 4
57978: PUSH
57979: LD_VAR 0 1
57983: PPUSH
57984: CALL_OW 274
57988: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57989: LD_ADDR_VAR 0 5
57993: PUSH
57994: LD_VAR 0 2
57998: PPUSH
57999: LD_VAR 0 1
58003: PPUSH
58004: CALL_OW 248
58008: PPUSH
58009: CALL_OW 450
58013: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58014: LD_ADDR_VAR 0 3
58018: PUSH
58019: LD_VAR 0 4
58023: PPUSH
58024: LD_INT 1
58026: PPUSH
58027: CALL_OW 275
58031: PUSH
58032: LD_VAR 0 5
58036: PUSH
58037: LD_INT 1
58039: ARRAY
58040: GREATEREQUAL
58041: IFFALSE 58067
58043: PUSH
58044: LD_VAR 0 4
58048: PPUSH
58049: LD_INT 2
58051: PPUSH
58052: CALL_OW 275
58056: PUSH
58057: LD_VAR 0 5
58061: PUSH
58062: LD_INT 2
58064: ARRAY
58065: GREATEREQUAL
58066: AND
58067: IFFALSE 58093
58069: PUSH
58070: LD_VAR 0 4
58074: PPUSH
58075: LD_INT 3
58077: PPUSH
58078: CALL_OW 275
58082: PUSH
58083: LD_VAR 0 5
58087: PUSH
58088: LD_INT 3
58090: ARRAY
58091: GREATEREQUAL
58092: AND
58093: ST_TO_ADDR
// end ;
58094: LD_VAR 0 3
58098: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58099: LD_INT 0
58101: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58102: LD_VAR 0 1
58106: PPUSH
58107: LD_VAR 0 2
58111: PPUSH
58112: LD_INT 0
58114: PPUSH
58115: LD_INT 0
58117: PPUSH
58118: LD_INT 1
58120: PPUSH
58121: LD_INT 0
58123: PPUSH
58124: CALL_OW 587
// end ;
58128: LD_VAR 0 3
58132: RET
// export function CenterOnNow ( unit ) ; begin
58133: LD_INT 0
58135: PPUSH
// result := IsInUnit ( unit ) ;
58136: LD_ADDR_VAR 0 2
58140: PUSH
58141: LD_VAR 0 1
58145: PPUSH
58146: CALL_OW 310
58150: ST_TO_ADDR
// if not result then
58151: LD_VAR 0 2
58155: NOT
58156: IFFALSE 58168
// result := unit ;
58158: LD_ADDR_VAR 0 2
58162: PUSH
58163: LD_VAR 0 1
58167: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58168: LD_VAR 0 1
58172: PPUSH
58173: CALL_OW 87
// end ;
58177: LD_VAR 0 2
58181: RET
// export function ComMoveHex ( unit , hex ) ; begin
58182: LD_INT 0
58184: PPUSH
// if not hex then
58185: LD_VAR 0 2
58189: NOT
58190: IFFALSE 58194
// exit ;
58192: GO 58247
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58194: LD_VAR 0 2
58198: PUSH
58199: LD_INT 1
58201: ARRAY
58202: PPUSH
58203: LD_VAR 0 2
58207: PUSH
58208: LD_INT 2
58210: ARRAY
58211: PPUSH
58212: CALL_OW 428
58216: IFFALSE 58220
// exit ;
58218: GO 58247
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58220: LD_VAR 0 1
58224: PPUSH
58225: LD_VAR 0 2
58229: PUSH
58230: LD_INT 1
58232: ARRAY
58233: PPUSH
58234: LD_VAR 0 2
58238: PUSH
58239: LD_INT 2
58241: ARRAY
58242: PPUSH
58243: CALL_OW 111
// end ;
58247: LD_VAR 0 3
58251: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58252: LD_INT 0
58254: PPUSH
58255: PPUSH
58256: PPUSH
// if not unit or not enemy then
58257: LD_VAR 0 1
58261: NOT
58262: IFTRUE 58271
58264: PUSH
58265: LD_VAR 0 2
58269: NOT
58270: OR
58271: IFFALSE 58275
// exit ;
58273: GO 58401
// x := GetX ( enemy ) ;
58275: LD_ADDR_VAR 0 4
58279: PUSH
58280: LD_VAR 0 2
58284: PPUSH
58285: CALL_OW 250
58289: ST_TO_ADDR
// y := GetY ( enemy ) ;
58290: LD_ADDR_VAR 0 5
58294: PUSH
58295: LD_VAR 0 2
58299: PPUSH
58300: CALL_OW 251
58304: ST_TO_ADDR
// if ValidHex ( x , y ) then
58305: LD_VAR 0 4
58309: PPUSH
58310: LD_VAR 0 5
58314: PPUSH
58315: CALL_OW 488
58319: IFFALSE 58401
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58321: LD_VAR 0 2
58325: PPUSH
58326: CALL_OW 247
58330: PUSH
58331: LD_INT 3
58333: PUSH
58334: LD_INT 2
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: IN
58341: IFTRUE 58364
58343: PUSH
58344: LD_VAR 0 1
58348: PPUSH
58349: CALL_OW 255
58353: PPUSH
58354: LD_VAR 0 2
58358: PPUSH
58359: CALL_OW 292
58363: OR
58364: IFFALSE 58382
// ComAttackUnit ( unit , enemy ) else
58366: LD_VAR 0 1
58370: PPUSH
58371: LD_VAR 0 2
58375: PPUSH
58376: CALL_OW 115
58380: GO 58401
// ComAgressiveMove ( unit , x , y ) ;
58382: LD_VAR 0 1
58386: PPUSH
58387: LD_VAR 0 4
58391: PPUSH
58392: LD_VAR 0 5
58396: PPUSH
58397: CALL_OW 114
// end ;
58401: LD_VAR 0 3
58405: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58406: LD_INT 0
58408: PPUSH
58409: PPUSH
58410: PPUSH
// list := AreaToList ( area , 0 ) ;
58411: LD_ADDR_VAR 0 5
58415: PUSH
58416: LD_VAR 0 1
58420: PPUSH
58421: LD_INT 0
58423: PPUSH
58424: CALL_OW 517
58428: ST_TO_ADDR
// if not list then
58429: LD_VAR 0 5
58433: NOT
58434: IFFALSE 58438
// exit ;
58436: GO 58568
// if all then
58438: LD_VAR 0 2
58442: IFFALSE 58530
// begin for i := 1 to list [ 1 ] do
58444: LD_ADDR_VAR 0 4
58448: PUSH
58449: DOUBLE
58450: LD_INT 1
58452: DEC
58453: ST_TO_ADDR
58454: LD_VAR 0 5
58458: PUSH
58459: LD_INT 1
58461: ARRAY
58462: PUSH
58463: FOR_TO
58464: IFFALSE 58526
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58466: LD_ADDR_VAR 0 3
58470: PUSH
58471: LD_VAR 0 3
58475: PPUSH
58476: LD_VAR 0 3
58480: PUSH
58481: LD_INT 1
58483: PLUS
58484: PPUSH
58485: LD_VAR 0 5
58489: PUSH
58490: LD_INT 1
58492: ARRAY
58493: PUSH
58494: LD_VAR 0 4
58498: ARRAY
58499: PUSH
58500: LD_VAR 0 5
58504: PUSH
58505: LD_INT 2
58507: ARRAY
58508: PUSH
58509: LD_VAR 0 4
58513: ARRAY
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PPUSH
58519: CALL_OW 1
58523: ST_TO_ADDR
58524: GO 58463
58526: POP
58527: POP
// exit ;
58528: GO 58568
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58530: LD_ADDR_VAR 0 3
58534: PUSH
58535: LD_VAR 0 5
58539: PUSH
58540: LD_INT 1
58542: ARRAY
58543: PUSH
58544: LD_INT 1
58546: ARRAY
58547: PUSH
58548: LD_VAR 0 5
58552: PUSH
58553: LD_INT 2
58555: ARRAY
58556: PUSH
58557: LD_INT 1
58559: ARRAY
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: EMPTY
58566: LIST
58567: ST_TO_ADDR
// end ;
58568: LD_VAR 0 3
58572: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58573: LD_INT 0
58575: PPUSH
58576: PPUSH
// list := AreaToList ( area , 0 ) ;
58577: LD_ADDR_VAR 0 4
58581: PUSH
58582: LD_VAR 0 1
58586: PPUSH
58587: LD_INT 0
58589: PPUSH
58590: CALL_OW 517
58594: ST_TO_ADDR
// if not list then
58595: LD_VAR 0 4
58599: NOT
58600: IFFALSE 58604
// exit ;
58602: GO 58645
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58604: LD_ADDR_VAR 0 3
58608: PUSH
58609: LD_VAR 0 4
58613: PUSH
58614: LD_INT 1
58616: ARRAY
58617: PUSH
58618: LD_INT 1
58620: ARRAY
58621: PUSH
58622: LD_VAR 0 4
58626: PUSH
58627: LD_INT 2
58629: ARRAY
58630: PUSH
58631: LD_INT 1
58633: ARRAY
58634: PUSH
58635: LD_VAR 0 2
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: LIST
58644: ST_TO_ADDR
// end ;
58645: LD_VAR 0 3
58649: RET
// export function First ( array ) ; begin
58650: LD_INT 0
58652: PPUSH
// if not array then
58653: LD_VAR 0 1
58657: NOT
58658: IFFALSE 58662
// exit ;
58660: GO 58676
// result := array [ 1 ] ;
58662: LD_ADDR_VAR 0 2
58666: PUSH
58667: LD_VAR 0 1
58671: PUSH
58672: LD_INT 1
58674: ARRAY
58675: ST_TO_ADDR
// end ;
58676: LD_VAR 0 2
58680: RET
// export function Last ( array ) ; begin
58681: LD_INT 0
58683: PPUSH
// if not array then
58684: LD_VAR 0 1
58688: NOT
58689: IFFALSE 58693
// exit ;
58691: GO 58709
// result := array [ array ] ;
58693: LD_ADDR_VAR 0 2
58697: PUSH
58698: LD_VAR 0 1
58702: PUSH
58703: LD_VAR 0 1
58707: ARRAY
58708: ST_TO_ADDR
// end ;
58709: LD_VAR 0 2
58713: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
58714: LD_INT 0
58716: PPUSH
58717: PPUSH
// result := [ ] ;
58718: LD_ADDR_VAR 0 5
58722: PUSH
58723: EMPTY
58724: ST_TO_ADDR
// if not array then
58725: LD_VAR 0 1
58729: NOT
58730: IFFALSE 58734
// exit ;
58732: GO 58846
// for i := 1 to array do
58734: LD_ADDR_VAR 0 6
58738: PUSH
58739: DOUBLE
58740: LD_INT 1
58742: DEC
58743: ST_TO_ADDR
58744: LD_VAR 0 1
58748: PUSH
58749: FOR_TO
58750: IFFALSE 58844
// if array [ i ] [ index ] = value then
58752: LD_VAR 0 1
58756: PUSH
58757: LD_VAR 0 6
58761: ARRAY
58762: PUSH
58763: LD_VAR 0 2
58767: ARRAY
58768: PUSH
58769: LD_VAR 0 3
58773: EQUAL
58774: IFFALSE 58842
// begin if indexColumn then
58776: LD_VAR 0 4
58780: IFFALSE 58816
// result := Join ( result , array [ i ] [ indexColumn ] ) else
58782: LD_ADDR_VAR 0 5
58786: PUSH
58787: LD_VAR 0 5
58791: PPUSH
58792: LD_VAR 0 1
58796: PUSH
58797: LD_VAR 0 6
58801: ARRAY
58802: PUSH
58803: LD_VAR 0 4
58807: ARRAY
58808: PPUSH
58809: CALL 53854 0 2
58813: ST_TO_ADDR
58814: GO 58842
// result := Join ( result , array [ i ] ) ;
58816: LD_ADDR_VAR 0 5
58820: PUSH
58821: LD_VAR 0 5
58825: PPUSH
58826: LD_VAR 0 1
58830: PUSH
58831: LD_VAR 0 6
58835: ARRAY
58836: PPUSH
58837: CALL 53854 0 2
58841: ST_TO_ADDR
// end ;
58842: GO 58749
58844: POP
58845: POP
// end ;
58846: LD_VAR 0 5
58850: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
58851: LD_INT 0
58853: PPUSH
// if not vehicles or not parkingPoint then
58854: LD_VAR 0 1
58858: NOT
58859: IFTRUE 58868
58861: PUSH
58862: LD_VAR 0 2
58866: NOT
58867: OR
58868: IFFALSE 58872
// exit ;
58870: GO 58970
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
58872: LD_ADDR_VAR 0 1
58876: PUSH
58877: LD_VAR 0 1
58881: PPUSH
58882: LD_INT 50
58884: PUSH
58885: EMPTY
58886: LIST
58887: PUSH
58888: LD_INT 3
58890: PUSH
58891: LD_INT 92
58893: PUSH
58894: LD_VAR 0 2
58898: PUSH
58899: LD_INT 1
58901: ARRAY
58902: PUSH
58903: LD_VAR 0 2
58907: PUSH
58908: LD_INT 2
58910: ARRAY
58911: PUSH
58912: LD_INT 8
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PPUSH
58929: CALL_OW 72
58933: ST_TO_ADDR
// if not vehicles then
58934: LD_VAR 0 1
58938: NOT
58939: IFFALSE 58943
// exit ;
58941: GO 58970
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
58943: LD_VAR 0 1
58947: PPUSH
58948: LD_VAR 0 2
58952: PUSH
58953: LD_INT 1
58955: ARRAY
58956: PPUSH
58957: LD_VAR 0 2
58961: PUSH
58962: LD_INT 2
58964: ARRAY
58965: PPUSH
58966: CALL_OW 111
// end ;
58970: LD_VAR 0 3
58974: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
58975: LD_INT 0
58977: PPUSH
58978: PPUSH
58979: PPUSH
// if not side or not area then
58980: LD_VAR 0 1
58984: NOT
58985: IFTRUE 58994
58987: PUSH
58988: LD_VAR 0 2
58992: NOT
58993: OR
58994: IFFALSE 58998
// exit ;
58996: GO 59117
// tmp := AreaToList ( area , 0 ) ;
58998: LD_ADDR_VAR 0 5
59002: PUSH
59003: LD_VAR 0 2
59007: PPUSH
59008: LD_INT 0
59010: PPUSH
59011: CALL_OW 517
59015: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59016: LD_ADDR_VAR 0 4
59020: PUSH
59021: DOUBLE
59022: LD_INT 1
59024: DEC
59025: ST_TO_ADDR
59026: LD_VAR 0 5
59030: PUSH
59031: LD_INT 1
59033: ARRAY
59034: PUSH
59035: FOR_TO
59036: IFFALSE 59115
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59038: LD_VAR 0 5
59042: PUSH
59043: LD_INT 1
59045: ARRAY
59046: PUSH
59047: LD_VAR 0 4
59051: ARRAY
59052: PPUSH
59053: LD_VAR 0 5
59057: PUSH
59058: LD_INT 2
59060: ARRAY
59061: PUSH
59062: LD_VAR 0 4
59066: ARRAY
59067: PPUSH
59068: CALL_OW 351
59072: IFFALSE 59113
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59074: LD_VAR 0 5
59078: PUSH
59079: LD_INT 1
59081: ARRAY
59082: PUSH
59083: LD_VAR 0 4
59087: ARRAY
59088: PPUSH
59089: LD_VAR 0 5
59093: PUSH
59094: LD_INT 2
59096: ARRAY
59097: PUSH
59098: LD_VAR 0 4
59102: ARRAY
59103: PPUSH
59104: LD_VAR 0 1
59108: PPUSH
59109: CALL_OW 244
// end ;
59113: GO 59035
59115: POP
59116: POP
// end ;
59117: LD_VAR 0 3
59121: RET
// export function UniqueArray ( array ) ; var i ; begin
59122: LD_INT 0
59124: PPUSH
59125: PPUSH
// result := [ ] ;
59126: LD_ADDR_VAR 0 2
59130: PUSH
59131: EMPTY
59132: ST_TO_ADDR
// if not array then
59133: LD_VAR 0 1
59137: NOT
59138: IFFALSE 59142
// exit ;
59140: GO 59203
// for i := 1 to array do
59142: LD_ADDR_VAR 0 3
59146: PUSH
59147: DOUBLE
59148: LD_INT 1
59150: DEC
59151: ST_TO_ADDR
59152: LD_VAR 0 1
59156: PUSH
59157: FOR_TO
59158: IFFALSE 59201
// if not array [ i ] in result then
59160: LD_VAR 0 1
59164: PUSH
59165: LD_VAR 0 3
59169: ARRAY
59170: PUSH
59171: LD_VAR 0 2
59175: IN
59176: NOT
59177: IFFALSE 59199
// result := Join ( result , i ) ;
59179: LD_ADDR_VAR 0 2
59183: PUSH
59184: LD_VAR 0 2
59188: PPUSH
59189: LD_VAR 0 3
59193: PPUSH
59194: CALL 53854 0 2
59198: ST_TO_ADDR
59199: GO 59157
59201: POP
59202: POP
// end ; end_of_file
59203: LD_VAR 0 2
59207: RET
// export globalGameSaveCounter ; every 0 0$1 do
59208: GO 59210
59210: DISABLE
// begin enable ;
59211: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59212: LD_STRING updateTimer(
59214: PUSH
59215: LD_OWVAR 1
59219: STR
59220: PUSH
59221: LD_STRING );
59223: STR
59224: PPUSH
59225: CALL_OW 559
// end ;
59229: END
// every 0 0$1 do
59230: GO 59232
59232: DISABLE
// begin globalGameSaveCounter := 0 ;
59233: LD_ADDR_EXP 60
59237: PUSH
59238: LD_INT 0
59240: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
59241: LD_STRING setGameSaveCounter(0)
59243: PPUSH
59244: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
59248: LD_STRING initStreamRollete();
59250: PPUSH
59251: CALL_OW 559
// InitStreamMode ;
59255: CALL 60600 0 0
// DefineStreamItems ( false ) ;
59259: LD_INT 0
59261: PPUSH
59262: CALL 61064 0 1
// end ;
59266: END
// export function SOS_MapStart ( ) ; begin
59267: LD_INT 0
59269: PPUSH
// if streamModeActive then
59270: LD_EXP 61
59274: IFFALSE 59283
// DefineStreamItems ( true ) ;
59276: LD_INT 1
59278: PPUSH
59279: CALL 61064 0 1
// UpdateLuaVariables ( ) ;
59283: CALL 59300 0 0
// UpdateFactoryWaypoints ( ) ;
59287: CALL 74186 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59291: CALL 74438 0 0
// end ;
59295: LD_VAR 0 1
59299: RET
// function UpdateLuaVariables ( ) ; begin
59300: LD_INT 0
59302: PPUSH
// if globalGameSaveCounter then
59303: LD_EXP 60
59307: IFFALSE 59341
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
59309: LD_ADDR_EXP 60
59313: PUSH
59314: LD_EXP 60
59318: PPUSH
59319: CALL 55227 0 1
59323: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
59324: LD_STRING setGameSaveCounter(
59326: PUSH
59327: LD_EXP 60
59331: STR
59332: PUSH
59333: LD_STRING )
59335: STR
59336: PPUSH
59337: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59341: LD_STRING setGameDifficulty(
59343: PUSH
59344: LD_OWVAR 67
59348: STR
59349: PUSH
59350: LD_STRING )
59352: STR
59353: PPUSH
59354: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
59358: LD_STRING displayDifficulty(
59360: PUSH
59361: LD_OWVAR 67
59365: STR
59366: PUSH
59367: LD_STRING )
59369: STR
59370: PPUSH
59371: CALL_OW 559
// end ;
59375: LD_VAR 0 1
59379: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59380: LD_INT 0
59382: PPUSH
// if p2 = stream_mode then
59383: LD_VAR 0 2
59387: PUSH
59388: LD_INT 100
59390: EQUAL
59391: IFFALSE 60394
// begin if not StreamModeActive then
59393: LD_EXP 61
59397: NOT
59398: IFFALSE 59408
// StreamModeActive := true ;
59400: LD_ADDR_EXP 61
59404: PUSH
59405: LD_INT 1
59407: ST_TO_ADDR
// if p3 = 0 then
59408: LD_VAR 0 3
59412: PUSH
59413: LD_INT 0
59415: EQUAL
59416: IFFALSE 59422
// InitStreamMode ;
59418: CALL 60600 0 0
// if p3 = 1 then
59422: LD_VAR 0 3
59426: PUSH
59427: LD_INT 1
59429: EQUAL
59430: IFFALSE 59440
// sRocket := true ;
59432: LD_ADDR_EXP 66
59436: PUSH
59437: LD_INT 1
59439: ST_TO_ADDR
// if p3 = 2 then
59440: LD_VAR 0 3
59444: PUSH
59445: LD_INT 2
59447: EQUAL
59448: IFFALSE 59458
// sSpeed := true ;
59450: LD_ADDR_EXP 65
59454: PUSH
59455: LD_INT 1
59457: ST_TO_ADDR
// if p3 = 3 then
59458: LD_VAR 0 3
59462: PUSH
59463: LD_INT 3
59465: EQUAL
59466: IFFALSE 59476
// sEngine := true ;
59468: LD_ADDR_EXP 67
59472: PUSH
59473: LD_INT 1
59475: ST_TO_ADDR
// if p3 = 4 then
59476: LD_VAR 0 3
59480: PUSH
59481: LD_INT 4
59483: EQUAL
59484: IFFALSE 59494
// sSpec := true ;
59486: LD_ADDR_EXP 64
59490: PUSH
59491: LD_INT 1
59493: ST_TO_ADDR
// if p3 = 5 then
59494: LD_VAR 0 3
59498: PUSH
59499: LD_INT 5
59501: EQUAL
59502: IFFALSE 59512
// sLevel := true ;
59504: LD_ADDR_EXP 68
59508: PUSH
59509: LD_INT 1
59511: ST_TO_ADDR
// if p3 = 6 then
59512: LD_VAR 0 3
59516: PUSH
59517: LD_INT 6
59519: EQUAL
59520: IFFALSE 59530
// sArmoury := true ;
59522: LD_ADDR_EXP 69
59526: PUSH
59527: LD_INT 1
59529: ST_TO_ADDR
// if p3 = 7 then
59530: LD_VAR 0 3
59534: PUSH
59535: LD_INT 7
59537: EQUAL
59538: IFFALSE 59548
// sRadar := true ;
59540: LD_ADDR_EXP 70
59544: PUSH
59545: LD_INT 1
59547: ST_TO_ADDR
// if p3 = 8 then
59548: LD_VAR 0 3
59552: PUSH
59553: LD_INT 8
59555: EQUAL
59556: IFFALSE 59566
// sBunker := true ;
59558: LD_ADDR_EXP 71
59562: PUSH
59563: LD_INT 1
59565: ST_TO_ADDR
// if p3 = 9 then
59566: LD_VAR 0 3
59570: PUSH
59571: LD_INT 9
59573: EQUAL
59574: IFFALSE 59584
// sHack := true ;
59576: LD_ADDR_EXP 72
59580: PUSH
59581: LD_INT 1
59583: ST_TO_ADDR
// if p3 = 10 then
59584: LD_VAR 0 3
59588: PUSH
59589: LD_INT 10
59591: EQUAL
59592: IFFALSE 59602
// sFire := true ;
59594: LD_ADDR_EXP 73
59598: PUSH
59599: LD_INT 1
59601: ST_TO_ADDR
// if p3 = 11 then
59602: LD_VAR 0 3
59606: PUSH
59607: LD_INT 11
59609: EQUAL
59610: IFFALSE 59620
// sRefresh := true ;
59612: LD_ADDR_EXP 74
59616: PUSH
59617: LD_INT 1
59619: ST_TO_ADDR
// if p3 = 12 then
59620: LD_VAR 0 3
59624: PUSH
59625: LD_INT 12
59627: EQUAL
59628: IFFALSE 59638
// sExp := true ;
59630: LD_ADDR_EXP 75
59634: PUSH
59635: LD_INT 1
59637: ST_TO_ADDR
// if p3 = 13 then
59638: LD_VAR 0 3
59642: PUSH
59643: LD_INT 13
59645: EQUAL
59646: IFFALSE 59656
// sDepot := true ;
59648: LD_ADDR_EXP 76
59652: PUSH
59653: LD_INT 1
59655: ST_TO_ADDR
// if p3 = 14 then
59656: LD_VAR 0 3
59660: PUSH
59661: LD_INT 14
59663: EQUAL
59664: IFFALSE 59674
// sFlag := true ;
59666: LD_ADDR_EXP 77
59670: PUSH
59671: LD_INT 1
59673: ST_TO_ADDR
// if p3 = 15 then
59674: LD_VAR 0 3
59678: PUSH
59679: LD_INT 15
59681: EQUAL
59682: IFFALSE 59692
// sKamikadze := true ;
59684: LD_ADDR_EXP 85
59688: PUSH
59689: LD_INT 1
59691: ST_TO_ADDR
// if p3 = 16 then
59692: LD_VAR 0 3
59696: PUSH
59697: LD_INT 16
59699: EQUAL
59700: IFFALSE 59710
// sTroll := true ;
59702: LD_ADDR_EXP 86
59706: PUSH
59707: LD_INT 1
59709: ST_TO_ADDR
// if p3 = 17 then
59710: LD_VAR 0 3
59714: PUSH
59715: LD_INT 17
59717: EQUAL
59718: IFFALSE 59728
// sSlow := true ;
59720: LD_ADDR_EXP 87
59724: PUSH
59725: LD_INT 1
59727: ST_TO_ADDR
// if p3 = 18 then
59728: LD_VAR 0 3
59732: PUSH
59733: LD_INT 18
59735: EQUAL
59736: IFFALSE 59746
// sLack := true ;
59738: LD_ADDR_EXP 88
59742: PUSH
59743: LD_INT 1
59745: ST_TO_ADDR
// if p3 = 19 then
59746: LD_VAR 0 3
59750: PUSH
59751: LD_INT 19
59753: EQUAL
59754: IFFALSE 59764
// sTank := true ;
59756: LD_ADDR_EXP 90
59760: PUSH
59761: LD_INT 1
59763: ST_TO_ADDR
// if p3 = 20 then
59764: LD_VAR 0 3
59768: PUSH
59769: LD_INT 20
59771: EQUAL
59772: IFFALSE 59782
// sRemote := true ;
59774: LD_ADDR_EXP 91
59778: PUSH
59779: LD_INT 1
59781: ST_TO_ADDR
// if p3 = 21 then
59782: LD_VAR 0 3
59786: PUSH
59787: LD_INT 21
59789: EQUAL
59790: IFFALSE 59800
// sPowell := true ;
59792: LD_ADDR_EXP 92
59796: PUSH
59797: LD_INT 1
59799: ST_TO_ADDR
// if p3 = 22 then
59800: LD_VAR 0 3
59804: PUSH
59805: LD_INT 22
59807: EQUAL
59808: IFFALSE 59818
// sTeleport := true ;
59810: LD_ADDR_EXP 95
59814: PUSH
59815: LD_INT 1
59817: ST_TO_ADDR
// if p3 = 23 then
59818: LD_VAR 0 3
59822: PUSH
59823: LD_INT 23
59825: EQUAL
59826: IFFALSE 59836
// sOilTower := true ;
59828: LD_ADDR_EXP 97
59832: PUSH
59833: LD_INT 1
59835: ST_TO_ADDR
// if p3 = 24 then
59836: LD_VAR 0 3
59840: PUSH
59841: LD_INT 24
59843: EQUAL
59844: IFFALSE 59854
// sShovel := true ;
59846: LD_ADDR_EXP 98
59850: PUSH
59851: LD_INT 1
59853: ST_TO_ADDR
// if p3 = 25 then
59854: LD_VAR 0 3
59858: PUSH
59859: LD_INT 25
59861: EQUAL
59862: IFFALSE 59872
// sSheik := true ;
59864: LD_ADDR_EXP 99
59868: PUSH
59869: LD_INT 1
59871: ST_TO_ADDR
// if p3 = 26 then
59872: LD_VAR 0 3
59876: PUSH
59877: LD_INT 26
59879: EQUAL
59880: IFFALSE 59890
// sEarthquake := true ;
59882: LD_ADDR_EXP 101
59886: PUSH
59887: LD_INT 1
59889: ST_TO_ADDR
// if p3 = 27 then
59890: LD_VAR 0 3
59894: PUSH
59895: LD_INT 27
59897: EQUAL
59898: IFFALSE 59908
// sAI := true ;
59900: LD_ADDR_EXP 102
59904: PUSH
59905: LD_INT 1
59907: ST_TO_ADDR
// if p3 = 28 then
59908: LD_VAR 0 3
59912: PUSH
59913: LD_INT 28
59915: EQUAL
59916: IFFALSE 59926
// sCargo := true ;
59918: LD_ADDR_EXP 105
59922: PUSH
59923: LD_INT 1
59925: ST_TO_ADDR
// if p3 = 29 then
59926: LD_VAR 0 3
59930: PUSH
59931: LD_INT 29
59933: EQUAL
59934: IFFALSE 59944
// sDLaser := true ;
59936: LD_ADDR_EXP 106
59940: PUSH
59941: LD_INT 1
59943: ST_TO_ADDR
// if p3 = 30 then
59944: LD_VAR 0 3
59948: PUSH
59949: LD_INT 30
59951: EQUAL
59952: IFFALSE 59962
// sExchange := true ;
59954: LD_ADDR_EXP 107
59958: PUSH
59959: LD_INT 1
59961: ST_TO_ADDR
// if p3 = 31 then
59962: LD_VAR 0 3
59966: PUSH
59967: LD_INT 31
59969: EQUAL
59970: IFFALSE 59980
// sFac := true ;
59972: LD_ADDR_EXP 108
59976: PUSH
59977: LD_INT 1
59979: ST_TO_ADDR
// if p3 = 32 then
59980: LD_VAR 0 3
59984: PUSH
59985: LD_INT 32
59987: EQUAL
59988: IFFALSE 59998
// sPower := true ;
59990: LD_ADDR_EXP 109
59994: PUSH
59995: LD_INT 1
59997: ST_TO_ADDR
// if p3 = 33 then
59998: LD_VAR 0 3
60002: PUSH
60003: LD_INT 33
60005: EQUAL
60006: IFFALSE 60016
// sRandom := true ;
60008: LD_ADDR_EXP 110
60012: PUSH
60013: LD_INT 1
60015: ST_TO_ADDR
// if p3 = 34 then
60016: LD_VAR 0 3
60020: PUSH
60021: LD_INT 34
60023: EQUAL
60024: IFFALSE 60034
// sShield := true ;
60026: LD_ADDR_EXP 111
60030: PUSH
60031: LD_INT 1
60033: ST_TO_ADDR
// if p3 = 35 then
60034: LD_VAR 0 3
60038: PUSH
60039: LD_INT 35
60041: EQUAL
60042: IFFALSE 60052
// sTime := true ;
60044: LD_ADDR_EXP 112
60048: PUSH
60049: LD_INT 1
60051: ST_TO_ADDR
// if p3 = 36 then
60052: LD_VAR 0 3
60056: PUSH
60057: LD_INT 36
60059: EQUAL
60060: IFFALSE 60070
// sTools := true ;
60062: LD_ADDR_EXP 113
60066: PUSH
60067: LD_INT 1
60069: ST_TO_ADDR
// if p3 = 101 then
60070: LD_VAR 0 3
60074: PUSH
60075: LD_INT 101
60077: EQUAL
60078: IFFALSE 60088
// sSold := true ;
60080: LD_ADDR_EXP 78
60084: PUSH
60085: LD_INT 1
60087: ST_TO_ADDR
// if p3 = 102 then
60088: LD_VAR 0 3
60092: PUSH
60093: LD_INT 102
60095: EQUAL
60096: IFFALSE 60106
// sDiff := true ;
60098: LD_ADDR_EXP 79
60102: PUSH
60103: LD_INT 1
60105: ST_TO_ADDR
// if p3 = 103 then
60106: LD_VAR 0 3
60110: PUSH
60111: LD_INT 103
60113: EQUAL
60114: IFFALSE 60124
// sFog := true ;
60116: LD_ADDR_EXP 82
60120: PUSH
60121: LD_INT 1
60123: ST_TO_ADDR
// if p3 = 104 then
60124: LD_VAR 0 3
60128: PUSH
60129: LD_INT 104
60131: EQUAL
60132: IFFALSE 60142
// sReset := true ;
60134: LD_ADDR_EXP 83
60138: PUSH
60139: LD_INT 1
60141: ST_TO_ADDR
// if p3 = 105 then
60142: LD_VAR 0 3
60146: PUSH
60147: LD_INT 105
60149: EQUAL
60150: IFFALSE 60160
// sSun := true ;
60152: LD_ADDR_EXP 84
60156: PUSH
60157: LD_INT 1
60159: ST_TO_ADDR
// if p3 = 106 then
60160: LD_VAR 0 3
60164: PUSH
60165: LD_INT 106
60167: EQUAL
60168: IFFALSE 60178
// sTiger := true ;
60170: LD_ADDR_EXP 80
60174: PUSH
60175: LD_INT 1
60177: ST_TO_ADDR
// if p3 = 107 then
60178: LD_VAR 0 3
60182: PUSH
60183: LD_INT 107
60185: EQUAL
60186: IFFALSE 60196
// sBomb := true ;
60188: LD_ADDR_EXP 81
60192: PUSH
60193: LD_INT 1
60195: ST_TO_ADDR
// if p3 = 108 then
60196: LD_VAR 0 3
60200: PUSH
60201: LD_INT 108
60203: EQUAL
60204: IFFALSE 60214
// sWound := true ;
60206: LD_ADDR_EXP 89
60210: PUSH
60211: LD_INT 1
60213: ST_TO_ADDR
// if p3 = 109 then
60214: LD_VAR 0 3
60218: PUSH
60219: LD_INT 109
60221: EQUAL
60222: IFFALSE 60232
// sBetray := true ;
60224: LD_ADDR_EXP 93
60228: PUSH
60229: LD_INT 1
60231: ST_TO_ADDR
// if p3 = 110 then
60232: LD_VAR 0 3
60236: PUSH
60237: LD_INT 110
60239: EQUAL
60240: IFFALSE 60250
// sContamin := true ;
60242: LD_ADDR_EXP 94
60246: PUSH
60247: LD_INT 1
60249: ST_TO_ADDR
// if p3 = 111 then
60250: LD_VAR 0 3
60254: PUSH
60255: LD_INT 111
60257: EQUAL
60258: IFFALSE 60268
// sOil := true ;
60260: LD_ADDR_EXP 96
60264: PUSH
60265: LD_INT 1
60267: ST_TO_ADDR
// if p3 = 112 then
60268: LD_VAR 0 3
60272: PUSH
60273: LD_INT 112
60275: EQUAL
60276: IFFALSE 60286
// sStu := true ;
60278: LD_ADDR_EXP 100
60282: PUSH
60283: LD_INT 1
60285: ST_TO_ADDR
// if p3 = 113 then
60286: LD_VAR 0 3
60290: PUSH
60291: LD_INT 113
60293: EQUAL
60294: IFFALSE 60304
// sBazooka := true ;
60296: LD_ADDR_EXP 103
60300: PUSH
60301: LD_INT 1
60303: ST_TO_ADDR
// if p3 = 114 then
60304: LD_VAR 0 3
60308: PUSH
60309: LD_INT 114
60311: EQUAL
60312: IFFALSE 60322
// sMortar := true ;
60314: LD_ADDR_EXP 104
60318: PUSH
60319: LD_INT 1
60321: ST_TO_ADDR
// if p3 = 115 then
60322: LD_VAR 0 3
60326: PUSH
60327: LD_INT 115
60329: EQUAL
60330: IFFALSE 60340
// sRanger := true ;
60332: LD_ADDR_EXP 114
60336: PUSH
60337: LD_INT 1
60339: ST_TO_ADDR
// if p3 = 116 then
60340: LD_VAR 0 3
60344: PUSH
60345: LD_INT 116
60347: EQUAL
60348: IFFALSE 60358
// sComputer := true ;
60350: LD_ADDR_EXP 115
60354: PUSH
60355: LD_INT 1
60357: ST_TO_ADDR
// if p3 = 117 then
60358: LD_VAR 0 3
60362: PUSH
60363: LD_INT 117
60365: EQUAL
60366: IFFALSE 60376
// s30 := true ;
60368: LD_ADDR_EXP 116
60372: PUSH
60373: LD_INT 1
60375: ST_TO_ADDR
// if p3 = 118 then
60376: LD_VAR 0 3
60380: PUSH
60381: LD_INT 118
60383: EQUAL
60384: IFFALSE 60394
// s60 := true ;
60386: LD_ADDR_EXP 117
60390: PUSH
60391: LD_INT 1
60393: ST_TO_ADDR
// end ; if p2 = hack_mode then
60394: LD_VAR 0 2
60398: PUSH
60399: LD_INT 101
60401: EQUAL
60402: IFFALSE 60530
// begin case p3 of 1 :
60404: LD_VAR 0 3
60408: PUSH
60409: LD_INT 1
60411: DOUBLE
60412: EQUAL
60413: IFTRUE 60417
60415: GO 60424
60417: POP
// hHackUnlimitedResources ; 2 :
60418: CALL 72793 0 0
60422: GO 60530
60424: LD_INT 2
60426: DOUBLE
60427: EQUAL
60428: IFTRUE 60432
60430: GO 60439
60432: POP
// hHackSetLevel10 ; 3 :
60433: CALL 72926 0 0
60437: GO 60530
60439: LD_INT 3
60441: DOUBLE
60442: EQUAL
60443: IFTRUE 60447
60445: GO 60454
60447: POP
// hHackSetLevel10YourUnits ; 4 :
60448: CALL 73011 0 0
60452: GO 60530
60454: LD_INT 4
60456: DOUBLE
60457: EQUAL
60458: IFTRUE 60462
60460: GO 60469
60462: POP
// hHackInvincible ; 5 :
60463: CALL 73459 0 0
60467: GO 60530
60469: LD_INT 5
60471: DOUBLE
60472: EQUAL
60473: IFTRUE 60477
60475: GO 60484
60477: POP
// hHackInvisible ; 6 :
60478: CALL 73570 0 0
60482: GO 60530
60484: LD_INT 6
60486: DOUBLE
60487: EQUAL
60488: IFTRUE 60492
60490: GO 60499
60492: POP
// hHackChangeYourSide ; 7 :
60493: CALL 73627 0 0
60497: GO 60530
60499: LD_INT 7
60501: DOUBLE
60502: EQUAL
60503: IFTRUE 60507
60505: GO 60514
60507: POP
// hHackChangeUnitSide ; 8 :
60508: CALL 73669 0 0
60512: GO 60530
60514: LD_INT 8
60516: DOUBLE
60517: EQUAL
60518: IFTRUE 60522
60520: GO 60529
60522: POP
// hHackFog ; end ;
60523: CALL 73770 0 0
60527: GO 60530
60529: POP
// end ; if p2 = game_save_mode then
60530: LD_VAR 0 2
60534: PUSH
60535: LD_INT 102
60537: EQUAL
60538: IFFALSE 60595
// begin if p3 = 1 then
60540: LD_VAR 0 3
60544: PUSH
60545: LD_INT 1
60547: EQUAL
60548: IFFALSE 60560
// globalGameSaveCounter := p4 ;
60550: LD_ADDR_EXP 60
60554: PUSH
60555: LD_VAR 0 4
60559: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
60560: LD_VAR 0 3
60564: PUSH
60565: LD_INT 2
60567: EQUAL
60568: IFFALSE 60576
60570: PUSH
60571: LD_EXP 60
60575: AND
60576: IFFALSE 60595
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
60578: LD_STRING setGameSaveCounter(
60580: PUSH
60581: LD_EXP 60
60585: STR
60586: PUSH
60587: LD_STRING )
60589: STR
60590: PPUSH
60591: CALL_OW 559
// end ; end ;
60595: LD_VAR 0 7
60599: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
60600: LD_INT 0
60602: PPUSH
// streamModeActive := false ;
60603: LD_ADDR_EXP 61
60607: PUSH
60608: LD_INT 0
60610: ST_TO_ADDR
// normalCounter := 36 ;
60611: LD_ADDR_EXP 62
60615: PUSH
60616: LD_INT 36
60618: ST_TO_ADDR
// hardcoreCounter := 18 ;
60619: LD_ADDR_EXP 63
60623: PUSH
60624: LD_INT 18
60626: ST_TO_ADDR
// sRocket := false ;
60627: LD_ADDR_EXP 66
60631: PUSH
60632: LD_INT 0
60634: ST_TO_ADDR
// sSpeed := false ;
60635: LD_ADDR_EXP 65
60639: PUSH
60640: LD_INT 0
60642: ST_TO_ADDR
// sEngine := false ;
60643: LD_ADDR_EXP 67
60647: PUSH
60648: LD_INT 0
60650: ST_TO_ADDR
// sSpec := false ;
60651: LD_ADDR_EXP 64
60655: PUSH
60656: LD_INT 0
60658: ST_TO_ADDR
// sLevel := false ;
60659: LD_ADDR_EXP 68
60663: PUSH
60664: LD_INT 0
60666: ST_TO_ADDR
// sArmoury := false ;
60667: LD_ADDR_EXP 69
60671: PUSH
60672: LD_INT 0
60674: ST_TO_ADDR
// sRadar := false ;
60675: LD_ADDR_EXP 70
60679: PUSH
60680: LD_INT 0
60682: ST_TO_ADDR
// sBunker := false ;
60683: LD_ADDR_EXP 71
60687: PUSH
60688: LD_INT 0
60690: ST_TO_ADDR
// sHack := false ;
60691: LD_ADDR_EXP 72
60695: PUSH
60696: LD_INT 0
60698: ST_TO_ADDR
// sFire := false ;
60699: LD_ADDR_EXP 73
60703: PUSH
60704: LD_INT 0
60706: ST_TO_ADDR
// sRefresh := false ;
60707: LD_ADDR_EXP 74
60711: PUSH
60712: LD_INT 0
60714: ST_TO_ADDR
// sExp := false ;
60715: LD_ADDR_EXP 75
60719: PUSH
60720: LD_INT 0
60722: ST_TO_ADDR
// sDepot := false ;
60723: LD_ADDR_EXP 76
60727: PUSH
60728: LD_INT 0
60730: ST_TO_ADDR
// sFlag := false ;
60731: LD_ADDR_EXP 77
60735: PUSH
60736: LD_INT 0
60738: ST_TO_ADDR
// sKamikadze := false ;
60739: LD_ADDR_EXP 85
60743: PUSH
60744: LD_INT 0
60746: ST_TO_ADDR
// sTroll := false ;
60747: LD_ADDR_EXP 86
60751: PUSH
60752: LD_INT 0
60754: ST_TO_ADDR
// sSlow := false ;
60755: LD_ADDR_EXP 87
60759: PUSH
60760: LD_INT 0
60762: ST_TO_ADDR
// sLack := false ;
60763: LD_ADDR_EXP 88
60767: PUSH
60768: LD_INT 0
60770: ST_TO_ADDR
// sTank := false ;
60771: LD_ADDR_EXP 90
60775: PUSH
60776: LD_INT 0
60778: ST_TO_ADDR
// sRemote := false ;
60779: LD_ADDR_EXP 91
60783: PUSH
60784: LD_INT 0
60786: ST_TO_ADDR
// sPowell := false ;
60787: LD_ADDR_EXP 92
60791: PUSH
60792: LD_INT 0
60794: ST_TO_ADDR
// sTeleport := false ;
60795: LD_ADDR_EXP 95
60799: PUSH
60800: LD_INT 0
60802: ST_TO_ADDR
// sOilTower := false ;
60803: LD_ADDR_EXP 97
60807: PUSH
60808: LD_INT 0
60810: ST_TO_ADDR
// sShovel := false ;
60811: LD_ADDR_EXP 98
60815: PUSH
60816: LD_INT 0
60818: ST_TO_ADDR
// sSheik := false ;
60819: LD_ADDR_EXP 99
60823: PUSH
60824: LD_INT 0
60826: ST_TO_ADDR
// sEarthquake := false ;
60827: LD_ADDR_EXP 101
60831: PUSH
60832: LD_INT 0
60834: ST_TO_ADDR
// sAI := false ;
60835: LD_ADDR_EXP 102
60839: PUSH
60840: LD_INT 0
60842: ST_TO_ADDR
// sCargo := false ;
60843: LD_ADDR_EXP 105
60847: PUSH
60848: LD_INT 0
60850: ST_TO_ADDR
// sDLaser := false ;
60851: LD_ADDR_EXP 106
60855: PUSH
60856: LD_INT 0
60858: ST_TO_ADDR
// sExchange := false ;
60859: LD_ADDR_EXP 107
60863: PUSH
60864: LD_INT 0
60866: ST_TO_ADDR
// sFac := false ;
60867: LD_ADDR_EXP 108
60871: PUSH
60872: LD_INT 0
60874: ST_TO_ADDR
// sPower := false ;
60875: LD_ADDR_EXP 109
60879: PUSH
60880: LD_INT 0
60882: ST_TO_ADDR
// sRandom := false ;
60883: LD_ADDR_EXP 110
60887: PUSH
60888: LD_INT 0
60890: ST_TO_ADDR
// sShield := false ;
60891: LD_ADDR_EXP 111
60895: PUSH
60896: LD_INT 0
60898: ST_TO_ADDR
// sTime := false ;
60899: LD_ADDR_EXP 112
60903: PUSH
60904: LD_INT 0
60906: ST_TO_ADDR
// sTools := false ;
60907: LD_ADDR_EXP 113
60911: PUSH
60912: LD_INT 0
60914: ST_TO_ADDR
// sSold := false ;
60915: LD_ADDR_EXP 78
60919: PUSH
60920: LD_INT 0
60922: ST_TO_ADDR
// sDiff := false ;
60923: LD_ADDR_EXP 79
60927: PUSH
60928: LD_INT 0
60930: ST_TO_ADDR
// sFog := false ;
60931: LD_ADDR_EXP 82
60935: PUSH
60936: LD_INT 0
60938: ST_TO_ADDR
// sReset := false ;
60939: LD_ADDR_EXP 83
60943: PUSH
60944: LD_INT 0
60946: ST_TO_ADDR
// sSun := false ;
60947: LD_ADDR_EXP 84
60951: PUSH
60952: LD_INT 0
60954: ST_TO_ADDR
// sTiger := false ;
60955: LD_ADDR_EXP 80
60959: PUSH
60960: LD_INT 0
60962: ST_TO_ADDR
// sBomb := false ;
60963: LD_ADDR_EXP 81
60967: PUSH
60968: LD_INT 0
60970: ST_TO_ADDR
// sWound := false ;
60971: LD_ADDR_EXP 89
60975: PUSH
60976: LD_INT 0
60978: ST_TO_ADDR
// sBetray := false ;
60979: LD_ADDR_EXP 93
60983: PUSH
60984: LD_INT 0
60986: ST_TO_ADDR
// sContamin := false ;
60987: LD_ADDR_EXP 94
60991: PUSH
60992: LD_INT 0
60994: ST_TO_ADDR
// sOil := false ;
60995: LD_ADDR_EXP 96
60999: PUSH
61000: LD_INT 0
61002: ST_TO_ADDR
// sStu := false ;
61003: LD_ADDR_EXP 100
61007: PUSH
61008: LD_INT 0
61010: ST_TO_ADDR
// sBazooka := false ;
61011: LD_ADDR_EXP 103
61015: PUSH
61016: LD_INT 0
61018: ST_TO_ADDR
// sMortar := false ;
61019: LD_ADDR_EXP 104
61023: PUSH
61024: LD_INT 0
61026: ST_TO_ADDR
// sRanger := false ;
61027: LD_ADDR_EXP 114
61031: PUSH
61032: LD_INT 0
61034: ST_TO_ADDR
// sComputer := false ;
61035: LD_ADDR_EXP 115
61039: PUSH
61040: LD_INT 0
61042: ST_TO_ADDR
// s30 := false ;
61043: LD_ADDR_EXP 116
61047: PUSH
61048: LD_INT 0
61050: ST_TO_ADDR
// s60 := false ;
61051: LD_ADDR_EXP 117
61055: PUSH
61056: LD_INT 0
61058: ST_TO_ADDR
// end ;
61059: LD_VAR 0 1
61063: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
61064: LD_INT 0
61066: PPUSH
61067: PPUSH
61068: PPUSH
61069: PPUSH
61070: PPUSH
61071: PPUSH
61072: PPUSH
// result := [ ] ;
61073: LD_ADDR_VAR 0 2
61077: PUSH
61078: EMPTY
61079: ST_TO_ADDR
// if campaign_id = 1 then
61080: LD_OWVAR 69
61084: PUSH
61085: LD_INT 1
61087: EQUAL
61088: IFFALSE 64254
// begin case mission_number of 1 :
61090: LD_OWVAR 70
61094: PUSH
61095: LD_INT 1
61097: DOUBLE
61098: EQUAL
61099: IFTRUE 61103
61101: GO 61179
61103: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
61104: LD_ADDR_VAR 0 2
61108: PUSH
61109: LD_INT 2
61111: PUSH
61112: LD_INT 4
61114: PUSH
61115: LD_INT 11
61117: PUSH
61118: LD_INT 12
61120: PUSH
61121: LD_INT 15
61123: PUSH
61124: LD_INT 16
61126: PUSH
61127: LD_INT 22
61129: PUSH
61130: LD_INT 23
61132: PUSH
61133: LD_INT 26
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 101
61149: PUSH
61150: LD_INT 102
61152: PUSH
61153: LD_INT 106
61155: PUSH
61156: LD_INT 116
61158: PUSH
61159: LD_INT 117
61161: PUSH
61162: LD_INT 118
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: ST_TO_ADDR
61177: GO 64252
61179: LD_INT 2
61181: DOUBLE
61182: EQUAL
61183: IFTRUE 61187
61185: GO 61271
61187: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
61188: LD_ADDR_VAR 0 2
61192: PUSH
61193: LD_INT 2
61195: PUSH
61196: LD_INT 4
61198: PUSH
61199: LD_INT 11
61201: PUSH
61202: LD_INT 12
61204: PUSH
61205: LD_INT 15
61207: PUSH
61208: LD_INT 16
61210: PUSH
61211: LD_INT 22
61213: PUSH
61214: LD_INT 23
61216: PUSH
61217: LD_INT 26
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 101
61233: PUSH
61234: LD_INT 102
61236: PUSH
61237: LD_INT 105
61239: PUSH
61240: LD_INT 106
61242: PUSH
61243: LD_INT 108
61245: PUSH
61246: LD_INT 116
61248: PUSH
61249: LD_INT 117
61251: PUSH
61252: LD_INT 118
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: ST_TO_ADDR
61269: GO 64252
61271: LD_INT 3
61273: DOUBLE
61274: EQUAL
61275: IFTRUE 61279
61277: GO 61367
61279: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
61280: LD_ADDR_VAR 0 2
61284: PUSH
61285: LD_INT 2
61287: PUSH
61288: LD_INT 4
61290: PUSH
61291: LD_INT 5
61293: PUSH
61294: LD_INT 11
61296: PUSH
61297: LD_INT 12
61299: PUSH
61300: LD_INT 15
61302: PUSH
61303: LD_INT 16
61305: PUSH
61306: LD_INT 22
61308: PUSH
61309: LD_INT 26
61311: PUSH
61312: LD_INT 36
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 101
61329: PUSH
61330: LD_INT 102
61332: PUSH
61333: LD_INT 105
61335: PUSH
61336: LD_INT 106
61338: PUSH
61339: LD_INT 108
61341: PUSH
61342: LD_INT 116
61344: PUSH
61345: LD_INT 117
61347: PUSH
61348: LD_INT 118
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: ST_TO_ADDR
61365: GO 64252
61367: LD_INT 4
61369: DOUBLE
61370: EQUAL
61371: IFTRUE 61375
61373: GO 61471
61375: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
61376: LD_ADDR_VAR 0 2
61380: PUSH
61381: LD_INT 2
61383: PUSH
61384: LD_INT 4
61386: PUSH
61387: LD_INT 5
61389: PUSH
61390: LD_INT 8
61392: PUSH
61393: LD_INT 11
61395: PUSH
61396: LD_INT 12
61398: PUSH
61399: LD_INT 15
61401: PUSH
61402: LD_INT 16
61404: PUSH
61405: LD_INT 22
61407: PUSH
61408: LD_INT 23
61410: PUSH
61411: LD_INT 26
61413: PUSH
61414: LD_INT 36
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 101
61433: PUSH
61434: LD_INT 102
61436: PUSH
61437: LD_INT 105
61439: PUSH
61440: LD_INT 106
61442: PUSH
61443: LD_INT 108
61445: PUSH
61446: LD_INT 116
61448: PUSH
61449: LD_INT 117
61451: PUSH
61452: LD_INT 118
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: ST_TO_ADDR
61469: GO 64252
61471: LD_INT 5
61473: DOUBLE
61474: EQUAL
61475: IFTRUE 61479
61477: GO 61591
61479: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
61480: LD_ADDR_VAR 0 2
61484: PUSH
61485: LD_INT 2
61487: PUSH
61488: LD_INT 4
61490: PUSH
61491: LD_INT 5
61493: PUSH
61494: LD_INT 6
61496: PUSH
61497: LD_INT 8
61499: PUSH
61500: LD_INT 11
61502: PUSH
61503: LD_INT 12
61505: PUSH
61506: LD_INT 15
61508: PUSH
61509: LD_INT 16
61511: PUSH
61512: LD_INT 22
61514: PUSH
61515: LD_INT 23
61517: PUSH
61518: LD_INT 25
61520: PUSH
61521: LD_INT 26
61523: PUSH
61524: LD_INT 36
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 101
61545: PUSH
61546: LD_INT 102
61548: PUSH
61549: LD_INT 105
61551: PUSH
61552: LD_INT 106
61554: PUSH
61555: LD_INT 108
61557: PUSH
61558: LD_INT 109
61560: PUSH
61561: LD_INT 112
61563: PUSH
61564: LD_INT 116
61566: PUSH
61567: LD_INT 117
61569: PUSH
61570: LD_INT 118
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: ST_TO_ADDR
61589: GO 64252
61591: LD_INT 6
61593: DOUBLE
61594: EQUAL
61595: IFTRUE 61599
61597: GO 61731
61599: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
61600: LD_ADDR_VAR 0 2
61604: PUSH
61605: LD_INT 2
61607: PUSH
61608: LD_INT 4
61610: PUSH
61611: LD_INT 5
61613: PUSH
61614: LD_INT 6
61616: PUSH
61617: LD_INT 8
61619: PUSH
61620: LD_INT 11
61622: PUSH
61623: LD_INT 12
61625: PUSH
61626: LD_INT 15
61628: PUSH
61629: LD_INT 16
61631: PUSH
61632: LD_INT 20
61634: PUSH
61635: LD_INT 21
61637: PUSH
61638: LD_INT 22
61640: PUSH
61641: LD_INT 23
61643: PUSH
61644: LD_INT 25
61646: PUSH
61647: LD_INT 26
61649: PUSH
61650: LD_INT 30
61652: PUSH
61653: LD_INT 31
61655: PUSH
61656: LD_INT 32
61658: PUSH
61659: LD_INT 36
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 101
61685: PUSH
61686: LD_INT 102
61688: PUSH
61689: LD_INT 105
61691: PUSH
61692: LD_INT 106
61694: PUSH
61695: LD_INT 108
61697: PUSH
61698: LD_INT 109
61700: PUSH
61701: LD_INT 112
61703: PUSH
61704: LD_INT 116
61706: PUSH
61707: LD_INT 117
61709: PUSH
61710: LD_INT 118
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: ST_TO_ADDR
61729: GO 64252
61731: LD_INT 7
61733: DOUBLE
61734: EQUAL
61735: IFTRUE 61739
61737: GO 61851
61739: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
61740: LD_ADDR_VAR 0 2
61744: PUSH
61745: LD_INT 2
61747: PUSH
61748: LD_INT 4
61750: PUSH
61751: LD_INT 5
61753: PUSH
61754: LD_INT 7
61756: PUSH
61757: LD_INT 11
61759: PUSH
61760: LD_INT 12
61762: PUSH
61763: LD_INT 15
61765: PUSH
61766: LD_INT 16
61768: PUSH
61769: LD_INT 20
61771: PUSH
61772: LD_INT 21
61774: PUSH
61775: LD_INT 22
61777: PUSH
61778: LD_INT 23
61780: PUSH
61781: LD_INT 25
61783: PUSH
61784: LD_INT 26
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 101
61805: PUSH
61806: LD_INT 102
61808: PUSH
61809: LD_INT 103
61811: PUSH
61812: LD_INT 105
61814: PUSH
61815: LD_INT 106
61817: PUSH
61818: LD_INT 108
61820: PUSH
61821: LD_INT 112
61823: PUSH
61824: LD_INT 116
61826: PUSH
61827: LD_INT 117
61829: PUSH
61830: LD_INT 118
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: ST_TO_ADDR
61849: GO 64252
61851: LD_INT 8
61853: DOUBLE
61854: EQUAL
61855: IFTRUE 61859
61857: GO 61999
61859: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
61860: LD_ADDR_VAR 0 2
61864: PUSH
61865: LD_INT 2
61867: PUSH
61868: LD_INT 4
61870: PUSH
61871: LD_INT 5
61873: PUSH
61874: LD_INT 6
61876: PUSH
61877: LD_INT 7
61879: PUSH
61880: LD_INT 8
61882: PUSH
61883: LD_INT 11
61885: PUSH
61886: LD_INT 12
61888: PUSH
61889: LD_INT 15
61891: PUSH
61892: LD_INT 16
61894: PUSH
61895: LD_INT 20
61897: PUSH
61898: LD_INT 21
61900: PUSH
61901: LD_INT 22
61903: PUSH
61904: LD_INT 23
61906: PUSH
61907: LD_INT 25
61909: PUSH
61910: LD_INT 26
61912: PUSH
61913: LD_INT 30
61915: PUSH
61916: LD_INT 31
61918: PUSH
61919: LD_INT 32
61921: PUSH
61922: LD_INT 36
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 101
61949: PUSH
61950: LD_INT 102
61952: PUSH
61953: LD_INT 103
61955: PUSH
61956: LD_INT 105
61958: PUSH
61959: LD_INT 106
61961: PUSH
61962: LD_INT 108
61964: PUSH
61965: LD_INT 109
61967: PUSH
61968: LD_INT 112
61970: PUSH
61971: LD_INT 116
61973: PUSH
61974: LD_INT 117
61976: PUSH
61977: LD_INT 118
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: ST_TO_ADDR
61997: GO 64252
61999: LD_INT 9
62001: DOUBLE
62002: EQUAL
62003: IFTRUE 62007
62005: GO 62155
62007: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
62008: LD_ADDR_VAR 0 2
62012: PUSH
62013: LD_INT 2
62015: PUSH
62016: LD_INT 4
62018: PUSH
62019: LD_INT 5
62021: PUSH
62022: LD_INT 6
62024: PUSH
62025: LD_INT 7
62027: PUSH
62028: LD_INT 8
62030: PUSH
62031: LD_INT 11
62033: PUSH
62034: LD_INT 12
62036: PUSH
62037: LD_INT 15
62039: PUSH
62040: LD_INT 16
62042: PUSH
62043: LD_INT 20
62045: PUSH
62046: LD_INT 21
62048: PUSH
62049: LD_INT 22
62051: PUSH
62052: LD_INT 23
62054: PUSH
62055: LD_INT 25
62057: PUSH
62058: LD_INT 26
62060: PUSH
62061: LD_INT 28
62063: PUSH
62064: LD_INT 30
62066: PUSH
62067: LD_INT 31
62069: PUSH
62070: LD_INT 32
62072: PUSH
62073: LD_INT 36
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 101
62101: PUSH
62102: LD_INT 102
62104: PUSH
62105: LD_INT 103
62107: PUSH
62108: LD_INT 105
62110: PUSH
62111: LD_INT 106
62113: PUSH
62114: LD_INT 108
62116: PUSH
62117: LD_INT 109
62119: PUSH
62120: LD_INT 112
62122: PUSH
62123: LD_INT 114
62125: PUSH
62126: LD_INT 116
62128: PUSH
62129: LD_INT 117
62131: PUSH
62132: LD_INT 118
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: ST_TO_ADDR
62153: GO 64252
62155: LD_INT 10
62157: DOUBLE
62158: EQUAL
62159: IFTRUE 62163
62161: GO 62359
62163: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
62164: LD_ADDR_VAR 0 2
62168: PUSH
62169: LD_INT 2
62171: PUSH
62172: LD_INT 4
62174: PUSH
62175: LD_INT 5
62177: PUSH
62178: LD_INT 6
62180: PUSH
62181: LD_INT 7
62183: PUSH
62184: LD_INT 8
62186: PUSH
62187: LD_INT 9
62189: PUSH
62190: LD_INT 10
62192: PUSH
62193: LD_INT 11
62195: PUSH
62196: LD_INT 12
62198: PUSH
62199: LD_INT 13
62201: PUSH
62202: LD_INT 14
62204: PUSH
62205: LD_INT 15
62207: PUSH
62208: LD_INT 16
62210: PUSH
62211: LD_INT 17
62213: PUSH
62214: LD_INT 18
62216: PUSH
62217: LD_INT 19
62219: PUSH
62220: LD_INT 20
62222: PUSH
62223: LD_INT 21
62225: PUSH
62226: LD_INT 22
62228: PUSH
62229: LD_INT 23
62231: PUSH
62232: LD_INT 24
62234: PUSH
62235: LD_INT 25
62237: PUSH
62238: LD_INT 26
62240: PUSH
62241: LD_INT 28
62243: PUSH
62244: LD_INT 30
62246: PUSH
62247: LD_INT 31
62249: PUSH
62250: LD_INT 32
62252: PUSH
62253: LD_INT 36
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 101
62289: PUSH
62290: LD_INT 102
62292: PUSH
62293: LD_INT 103
62295: PUSH
62296: LD_INT 104
62298: PUSH
62299: LD_INT 105
62301: PUSH
62302: LD_INT 106
62304: PUSH
62305: LD_INT 107
62307: PUSH
62308: LD_INT 108
62310: PUSH
62311: LD_INT 109
62313: PUSH
62314: LD_INT 110
62316: PUSH
62317: LD_INT 111
62319: PUSH
62320: LD_INT 112
62322: PUSH
62323: LD_INT 114
62325: PUSH
62326: LD_INT 116
62328: PUSH
62329: LD_INT 117
62331: PUSH
62332: LD_INT 118
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: ST_TO_ADDR
62357: GO 64252
62359: LD_INT 11
62361: DOUBLE
62362: EQUAL
62363: IFTRUE 62367
62365: GO 62571
62367: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
62368: LD_ADDR_VAR 0 2
62372: PUSH
62373: LD_INT 2
62375: PUSH
62376: LD_INT 3
62378: PUSH
62379: LD_INT 4
62381: PUSH
62382: LD_INT 5
62384: PUSH
62385: LD_INT 6
62387: PUSH
62388: LD_INT 7
62390: PUSH
62391: LD_INT 8
62393: PUSH
62394: LD_INT 9
62396: PUSH
62397: LD_INT 10
62399: PUSH
62400: LD_INT 11
62402: PUSH
62403: LD_INT 12
62405: PUSH
62406: LD_INT 13
62408: PUSH
62409: LD_INT 14
62411: PUSH
62412: LD_INT 15
62414: PUSH
62415: LD_INT 16
62417: PUSH
62418: LD_INT 17
62420: PUSH
62421: LD_INT 18
62423: PUSH
62424: LD_INT 19
62426: PUSH
62427: LD_INT 20
62429: PUSH
62430: LD_INT 21
62432: PUSH
62433: LD_INT 22
62435: PUSH
62436: LD_INT 23
62438: PUSH
62439: LD_INT 24
62441: PUSH
62442: LD_INT 25
62444: PUSH
62445: LD_INT 26
62447: PUSH
62448: LD_INT 28
62450: PUSH
62451: LD_INT 30
62453: PUSH
62454: LD_INT 31
62456: PUSH
62457: LD_INT 32
62459: PUSH
62460: LD_INT 34
62462: PUSH
62463: LD_INT 36
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 101
62501: PUSH
62502: LD_INT 102
62504: PUSH
62505: LD_INT 103
62507: PUSH
62508: LD_INT 104
62510: PUSH
62511: LD_INT 105
62513: PUSH
62514: LD_INT 106
62516: PUSH
62517: LD_INT 107
62519: PUSH
62520: LD_INT 108
62522: PUSH
62523: LD_INT 109
62525: PUSH
62526: LD_INT 110
62528: PUSH
62529: LD_INT 111
62531: PUSH
62532: LD_INT 112
62534: PUSH
62535: LD_INT 114
62537: PUSH
62538: LD_INT 116
62540: PUSH
62541: LD_INT 117
62543: PUSH
62544: LD_INT 118
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: ST_TO_ADDR
62569: GO 64252
62571: LD_INT 12
62573: DOUBLE
62574: EQUAL
62575: IFTRUE 62579
62577: GO 62799
62579: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
62580: LD_ADDR_VAR 0 2
62584: PUSH
62585: LD_INT 1
62587: PUSH
62588: LD_INT 2
62590: PUSH
62591: LD_INT 3
62593: PUSH
62594: LD_INT 4
62596: PUSH
62597: LD_INT 5
62599: PUSH
62600: LD_INT 6
62602: PUSH
62603: LD_INT 7
62605: PUSH
62606: LD_INT 8
62608: PUSH
62609: LD_INT 9
62611: PUSH
62612: LD_INT 10
62614: PUSH
62615: LD_INT 11
62617: PUSH
62618: LD_INT 12
62620: PUSH
62621: LD_INT 13
62623: PUSH
62624: LD_INT 14
62626: PUSH
62627: LD_INT 15
62629: PUSH
62630: LD_INT 16
62632: PUSH
62633: LD_INT 17
62635: PUSH
62636: LD_INT 18
62638: PUSH
62639: LD_INT 19
62641: PUSH
62642: LD_INT 20
62644: PUSH
62645: LD_INT 21
62647: PUSH
62648: LD_INT 22
62650: PUSH
62651: LD_INT 23
62653: PUSH
62654: LD_INT 24
62656: PUSH
62657: LD_INT 25
62659: PUSH
62660: LD_INT 26
62662: PUSH
62663: LD_INT 27
62665: PUSH
62666: LD_INT 28
62668: PUSH
62669: LD_INT 30
62671: PUSH
62672: LD_INT 31
62674: PUSH
62675: LD_INT 32
62677: PUSH
62678: LD_INT 33
62680: PUSH
62681: LD_INT 34
62683: PUSH
62684: LD_INT 36
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 101
62725: PUSH
62726: LD_INT 102
62728: PUSH
62729: LD_INT 103
62731: PUSH
62732: LD_INT 104
62734: PUSH
62735: LD_INT 105
62737: PUSH
62738: LD_INT 106
62740: PUSH
62741: LD_INT 107
62743: PUSH
62744: LD_INT 108
62746: PUSH
62747: LD_INT 109
62749: PUSH
62750: LD_INT 110
62752: PUSH
62753: LD_INT 111
62755: PUSH
62756: LD_INT 112
62758: PUSH
62759: LD_INT 113
62761: PUSH
62762: LD_INT 114
62764: PUSH
62765: LD_INT 116
62767: PUSH
62768: LD_INT 117
62770: PUSH
62771: LD_INT 118
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: ST_TO_ADDR
62797: GO 64252
62799: LD_INT 13
62801: DOUBLE
62802: EQUAL
62803: IFTRUE 62807
62805: GO 63015
62807: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
62808: LD_ADDR_VAR 0 2
62812: PUSH
62813: LD_INT 1
62815: PUSH
62816: LD_INT 2
62818: PUSH
62819: LD_INT 3
62821: PUSH
62822: LD_INT 4
62824: PUSH
62825: LD_INT 5
62827: PUSH
62828: LD_INT 8
62830: PUSH
62831: LD_INT 9
62833: PUSH
62834: LD_INT 10
62836: PUSH
62837: LD_INT 11
62839: PUSH
62840: LD_INT 12
62842: PUSH
62843: LD_INT 14
62845: PUSH
62846: LD_INT 15
62848: PUSH
62849: LD_INT 16
62851: PUSH
62852: LD_INT 17
62854: PUSH
62855: LD_INT 18
62857: PUSH
62858: LD_INT 19
62860: PUSH
62861: LD_INT 20
62863: PUSH
62864: LD_INT 21
62866: PUSH
62867: LD_INT 22
62869: PUSH
62870: LD_INT 23
62872: PUSH
62873: LD_INT 24
62875: PUSH
62876: LD_INT 25
62878: PUSH
62879: LD_INT 26
62881: PUSH
62882: LD_INT 27
62884: PUSH
62885: LD_INT 28
62887: PUSH
62888: LD_INT 30
62890: PUSH
62891: LD_INT 31
62893: PUSH
62894: LD_INT 32
62896: PUSH
62897: LD_INT 33
62899: PUSH
62900: LD_INT 34
62902: PUSH
62903: LD_INT 36
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 101
62941: PUSH
62942: LD_INT 102
62944: PUSH
62945: LD_INT 103
62947: PUSH
62948: LD_INT 104
62950: PUSH
62951: LD_INT 105
62953: PUSH
62954: LD_INT 106
62956: PUSH
62957: LD_INT 107
62959: PUSH
62960: LD_INT 108
62962: PUSH
62963: LD_INT 109
62965: PUSH
62966: LD_INT 110
62968: PUSH
62969: LD_INT 111
62971: PUSH
62972: LD_INT 112
62974: PUSH
62975: LD_INT 113
62977: PUSH
62978: LD_INT 114
62980: PUSH
62981: LD_INT 116
62983: PUSH
62984: LD_INT 117
62986: PUSH
62987: LD_INT 118
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: ST_TO_ADDR
63013: GO 64252
63015: LD_INT 14
63017: DOUBLE
63018: EQUAL
63019: IFTRUE 63023
63021: GO 63247
63023: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
63024: LD_ADDR_VAR 0 2
63028: PUSH
63029: LD_INT 1
63031: PUSH
63032: LD_INT 2
63034: PUSH
63035: LD_INT 3
63037: PUSH
63038: LD_INT 4
63040: PUSH
63041: LD_INT 5
63043: PUSH
63044: LD_INT 6
63046: PUSH
63047: LD_INT 7
63049: PUSH
63050: LD_INT 8
63052: PUSH
63053: LD_INT 9
63055: PUSH
63056: LD_INT 10
63058: PUSH
63059: LD_INT 11
63061: PUSH
63062: LD_INT 12
63064: PUSH
63065: LD_INT 13
63067: PUSH
63068: LD_INT 14
63070: PUSH
63071: LD_INT 15
63073: PUSH
63074: LD_INT 16
63076: PUSH
63077: LD_INT 17
63079: PUSH
63080: LD_INT 18
63082: PUSH
63083: LD_INT 19
63085: PUSH
63086: LD_INT 20
63088: PUSH
63089: LD_INT 21
63091: PUSH
63092: LD_INT 22
63094: PUSH
63095: LD_INT 23
63097: PUSH
63098: LD_INT 24
63100: PUSH
63101: LD_INT 25
63103: PUSH
63104: LD_INT 26
63106: PUSH
63107: LD_INT 27
63109: PUSH
63110: LD_INT 28
63112: PUSH
63113: LD_INT 29
63115: PUSH
63116: LD_INT 30
63118: PUSH
63119: LD_INT 31
63121: PUSH
63122: LD_INT 32
63124: PUSH
63125: LD_INT 33
63127: PUSH
63128: LD_INT 34
63130: PUSH
63131: LD_INT 36
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 101
63173: PUSH
63174: LD_INT 102
63176: PUSH
63177: LD_INT 103
63179: PUSH
63180: LD_INT 104
63182: PUSH
63183: LD_INT 105
63185: PUSH
63186: LD_INT 106
63188: PUSH
63189: LD_INT 107
63191: PUSH
63192: LD_INT 108
63194: PUSH
63195: LD_INT 109
63197: PUSH
63198: LD_INT 110
63200: PUSH
63201: LD_INT 111
63203: PUSH
63204: LD_INT 112
63206: PUSH
63207: LD_INT 113
63209: PUSH
63210: LD_INT 114
63212: PUSH
63213: LD_INT 116
63215: PUSH
63216: LD_INT 117
63218: PUSH
63219: LD_INT 118
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: ST_TO_ADDR
63245: GO 64252
63247: LD_INT 15
63249: DOUBLE
63250: EQUAL
63251: IFTRUE 63255
63253: GO 63479
63255: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
63256: LD_ADDR_VAR 0 2
63260: PUSH
63261: LD_INT 1
63263: PUSH
63264: LD_INT 2
63266: PUSH
63267: LD_INT 3
63269: PUSH
63270: LD_INT 4
63272: PUSH
63273: LD_INT 5
63275: PUSH
63276: LD_INT 6
63278: PUSH
63279: LD_INT 7
63281: PUSH
63282: LD_INT 8
63284: PUSH
63285: LD_INT 9
63287: PUSH
63288: LD_INT 10
63290: PUSH
63291: LD_INT 11
63293: PUSH
63294: LD_INT 12
63296: PUSH
63297: LD_INT 13
63299: PUSH
63300: LD_INT 14
63302: PUSH
63303: LD_INT 15
63305: PUSH
63306: LD_INT 16
63308: PUSH
63309: LD_INT 17
63311: PUSH
63312: LD_INT 18
63314: PUSH
63315: LD_INT 19
63317: PUSH
63318: LD_INT 20
63320: PUSH
63321: LD_INT 21
63323: PUSH
63324: LD_INT 22
63326: PUSH
63327: LD_INT 23
63329: PUSH
63330: LD_INT 24
63332: PUSH
63333: LD_INT 25
63335: PUSH
63336: LD_INT 26
63338: PUSH
63339: LD_INT 27
63341: PUSH
63342: LD_INT 28
63344: PUSH
63345: LD_INT 29
63347: PUSH
63348: LD_INT 30
63350: PUSH
63351: LD_INT 31
63353: PUSH
63354: LD_INT 32
63356: PUSH
63357: LD_INT 33
63359: PUSH
63360: LD_INT 34
63362: PUSH
63363: LD_INT 36
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 101
63405: PUSH
63406: LD_INT 102
63408: PUSH
63409: LD_INT 103
63411: PUSH
63412: LD_INT 104
63414: PUSH
63415: LD_INT 105
63417: PUSH
63418: LD_INT 106
63420: PUSH
63421: LD_INT 107
63423: PUSH
63424: LD_INT 108
63426: PUSH
63427: LD_INT 109
63429: PUSH
63430: LD_INT 110
63432: PUSH
63433: LD_INT 111
63435: PUSH
63436: LD_INT 112
63438: PUSH
63439: LD_INT 113
63441: PUSH
63442: LD_INT 114
63444: PUSH
63445: LD_INT 116
63447: PUSH
63448: LD_INT 117
63450: PUSH
63451: LD_INT 118
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: ST_TO_ADDR
63477: GO 64252
63479: LD_INT 16
63481: DOUBLE
63482: EQUAL
63483: IFTRUE 63487
63485: GO 63623
63487: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
63488: LD_ADDR_VAR 0 2
63492: PUSH
63493: LD_INT 2
63495: PUSH
63496: LD_INT 4
63498: PUSH
63499: LD_INT 5
63501: PUSH
63502: LD_INT 7
63504: PUSH
63505: LD_INT 11
63507: PUSH
63508: LD_INT 12
63510: PUSH
63511: LD_INT 15
63513: PUSH
63514: LD_INT 16
63516: PUSH
63517: LD_INT 20
63519: PUSH
63520: LD_INT 21
63522: PUSH
63523: LD_INT 22
63525: PUSH
63526: LD_INT 23
63528: PUSH
63529: LD_INT 25
63531: PUSH
63532: LD_INT 26
63534: PUSH
63535: LD_INT 30
63537: PUSH
63538: LD_INT 31
63540: PUSH
63541: LD_INT 32
63543: PUSH
63544: LD_INT 33
63546: PUSH
63547: LD_INT 34
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 101
63573: PUSH
63574: LD_INT 102
63576: PUSH
63577: LD_INT 103
63579: PUSH
63580: LD_INT 106
63582: PUSH
63583: LD_INT 108
63585: PUSH
63586: LD_INT 112
63588: PUSH
63589: LD_INT 113
63591: PUSH
63592: LD_INT 114
63594: PUSH
63595: LD_INT 116
63597: PUSH
63598: LD_INT 117
63600: PUSH
63601: LD_INT 118
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: ST_TO_ADDR
63621: GO 64252
63623: LD_INT 17
63625: DOUBLE
63626: EQUAL
63627: IFTRUE 63631
63629: GO 63855
63631: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
63632: LD_ADDR_VAR 0 2
63636: PUSH
63637: LD_INT 1
63639: PUSH
63640: LD_INT 2
63642: PUSH
63643: LD_INT 3
63645: PUSH
63646: LD_INT 4
63648: PUSH
63649: LD_INT 5
63651: PUSH
63652: LD_INT 6
63654: PUSH
63655: LD_INT 7
63657: PUSH
63658: LD_INT 8
63660: PUSH
63661: LD_INT 9
63663: PUSH
63664: LD_INT 10
63666: PUSH
63667: LD_INT 11
63669: PUSH
63670: LD_INT 12
63672: PUSH
63673: LD_INT 13
63675: PUSH
63676: LD_INT 14
63678: PUSH
63679: LD_INT 15
63681: PUSH
63682: LD_INT 16
63684: PUSH
63685: LD_INT 17
63687: PUSH
63688: LD_INT 18
63690: PUSH
63691: LD_INT 19
63693: PUSH
63694: LD_INT 20
63696: PUSH
63697: LD_INT 21
63699: PUSH
63700: LD_INT 22
63702: PUSH
63703: LD_INT 23
63705: PUSH
63706: LD_INT 24
63708: PUSH
63709: LD_INT 25
63711: PUSH
63712: LD_INT 26
63714: PUSH
63715: LD_INT 27
63717: PUSH
63718: LD_INT 28
63720: PUSH
63721: LD_INT 29
63723: PUSH
63724: LD_INT 30
63726: PUSH
63727: LD_INT 31
63729: PUSH
63730: LD_INT 32
63732: PUSH
63733: LD_INT 33
63735: PUSH
63736: LD_INT 34
63738: PUSH
63739: LD_INT 36
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 101
63781: PUSH
63782: LD_INT 102
63784: PUSH
63785: LD_INT 103
63787: PUSH
63788: LD_INT 104
63790: PUSH
63791: LD_INT 105
63793: PUSH
63794: LD_INT 106
63796: PUSH
63797: LD_INT 107
63799: PUSH
63800: LD_INT 108
63802: PUSH
63803: LD_INT 109
63805: PUSH
63806: LD_INT 110
63808: PUSH
63809: LD_INT 111
63811: PUSH
63812: LD_INT 112
63814: PUSH
63815: LD_INT 113
63817: PUSH
63818: LD_INT 114
63820: PUSH
63821: LD_INT 116
63823: PUSH
63824: LD_INT 117
63826: PUSH
63827: LD_INT 118
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: ST_TO_ADDR
63853: GO 64252
63855: LD_INT 18
63857: DOUBLE
63858: EQUAL
63859: IFTRUE 63863
63861: GO 64011
63863: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
63864: LD_ADDR_VAR 0 2
63868: PUSH
63869: LD_INT 2
63871: PUSH
63872: LD_INT 4
63874: PUSH
63875: LD_INT 5
63877: PUSH
63878: LD_INT 7
63880: PUSH
63881: LD_INT 11
63883: PUSH
63884: LD_INT 12
63886: PUSH
63887: LD_INT 15
63889: PUSH
63890: LD_INT 16
63892: PUSH
63893: LD_INT 20
63895: PUSH
63896: LD_INT 21
63898: PUSH
63899: LD_INT 22
63901: PUSH
63902: LD_INT 23
63904: PUSH
63905: LD_INT 25
63907: PUSH
63908: LD_INT 26
63910: PUSH
63911: LD_INT 30
63913: PUSH
63914: LD_INT 31
63916: PUSH
63917: LD_INT 32
63919: PUSH
63920: LD_INT 33
63922: PUSH
63923: LD_INT 34
63925: PUSH
63926: LD_INT 35
63928: PUSH
63929: LD_INT 36
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 101
63957: PUSH
63958: LD_INT 102
63960: PUSH
63961: LD_INT 103
63963: PUSH
63964: LD_INT 106
63966: PUSH
63967: LD_INT 108
63969: PUSH
63970: LD_INT 112
63972: PUSH
63973: LD_INT 113
63975: PUSH
63976: LD_INT 114
63978: PUSH
63979: LD_INT 115
63981: PUSH
63982: LD_INT 116
63984: PUSH
63985: LD_INT 117
63987: PUSH
63988: LD_INT 118
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: ST_TO_ADDR
64009: GO 64252
64011: LD_INT 19
64013: DOUBLE
64014: EQUAL
64015: IFTRUE 64019
64017: GO 64251
64019: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
64020: LD_ADDR_VAR 0 2
64024: PUSH
64025: LD_INT 1
64027: PUSH
64028: LD_INT 2
64030: PUSH
64031: LD_INT 3
64033: PUSH
64034: LD_INT 4
64036: PUSH
64037: LD_INT 5
64039: PUSH
64040: LD_INT 6
64042: PUSH
64043: LD_INT 7
64045: PUSH
64046: LD_INT 8
64048: PUSH
64049: LD_INT 9
64051: PUSH
64052: LD_INT 10
64054: PUSH
64055: LD_INT 11
64057: PUSH
64058: LD_INT 12
64060: PUSH
64061: LD_INT 13
64063: PUSH
64064: LD_INT 14
64066: PUSH
64067: LD_INT 15
64069: PUSH
64070: LD_INT 16
64072: PUSH
64073: LD_INT 17
64075: PUSH
64076: LD_INT 18
64078: PUSH
64079: LD_INT 19
64081: PUSH
64082: LD_INT 20
64084: PUSH
64085: LD_INT 21
64087: PUSH
64088: LD_INT 22
64090: PUSH
64091: LD_INT 23
64093: PUSH
64094: LD_INT 24
64096: PUSH
64097: LD_INT 25
64099: PUSH
64100: LD_INT 26
64102: PUSH
64103: LD_INT 27
64105: PUSH
64106: LD_INT 28
64108: PUSH
64109: LD_INT 29
64111: PUSH
64112: LD_INT 30
64114: PUSH
64115: LD_INT 31
64117: PUSH
64118: LD_INT 32
64120: PUSH
64121: LD_INT 33
64123: PUSH
64124: LD_INT 34
64126: PUSH
64127: LD_INT 35
64129: PUSH
64130: LD_INT 36
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 101
64173: PUSH
64174: LD_INT 102
64176: PUSH
64177: LD_INT 103
64179: PUSH
64180: LD_INT 104
64182: PUSH
64183: LD_INT 105
64185: PUSH
64186: LD_INT 106
64188: PUSH
64189: LD_INT 107
64191: PUSH
64192: LD_INT 108
64194: PUSH
64195: LD_INT 109
64197: PUSH
64198: LD_INT 110
64200: PUSH
64201: LD_INT 111
64203: PUSH
64204: LD_INT 112
64206: PUSH
64207: LD_INT 113
64209: PUSH
64210: LD_INT 114
64212: PUSH
64213: LD_INT 115
64215: PUSH
64216: LD_INT 116
64218: PUSH
64219: LD_INT 117
64221: PUSH
64222: LD_INT 118
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: ST_TO_ADDR
64249: GO 64252
64251: POP
// end else
64252: GO 64483
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
64254: LD_ADDR_VAR 0 2
64258: PUSH
64259: LD_INT 1
64261: PUSH
64262: LD_INT 2
64264: PUSH
64265: LD_INT 3
64267: PUSH
64268: LD_INT 4
64270: PUSH
64271: LD_INT 5
64273: PUSH
64274: LD_INT 6
64276: PUSH
64277: LD_INT 7
64279: PUSH
64280: LD_INT 8
64282: PUSH
64283: LD_INT 9
64285: PUSH
64286: LD_INT 10
64288: PUSH
64289: LD_INT 11
64291: PUSH
64292: LD_INT 12
64294: PUSH
64295: LD_INT 13
64297: PUSH
64298: LD_INT 14
64300: PUSH
64301: LD_INT 15
64303: PUSH
64304: LD_INT 16
64306: PUSH
64307: LD_INT 17
64309: PUSH
64310: LD_INT 18
64312: PUSH
64313: LD_INT 19
64315: PUSH
64316: LD_INT 20
64318: PUSH
64319: LD_INT 21
64321: PUSH
64322: LD_INT 22
64324: PUSH
64325: LD_INT 23
64327: PUSH
64328: LD_INT 24
64330: PUSH
64331: LD_INT 25
64333: PUSH
64334: LD_INT 26
64336: PUSH
64337: LD_INT 27
64339: PUSH
64340: LD_INT 28
64342: PUSH
64343: LD_INT 29
64345: PUSH
64346: LD_INT 30
64348: PUSH
64349: LD_INT 31
64351: PUSH
64352: LD_INT 32
64354: PUSH
64355: LD_INT 33
64357: PUSH
64358: LD_INT 34
64360: PUSH
64361: LD_INT 35
64363: PUSH
64364: LD_INT 36
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 101
64407: PUSH
64408: LD_INT 102
64410: PUSH
64411: LD_INT 103
64413: PUSH
64414: LD_INT 104
64416: PUSH
64417: LD_INT 105
64419: PUSH
64420: LD_INT 106
64422: PUSH
64423: LD_INT 107
64425: PUSH
64426: LD_INT 108
64428: PUSH
64429: LD_INT 109
64431: PUSH
64432: LD_INT 110
64434: PUSH
64435: LD_INT 111
64437: PUSH
64438: LD_INT 112
64440: PUSH
64441: LD_INT 113
64443: PUSH
64444: LD_INT 114
64446: PUSH
64447: LD_INT 115
64449: PUSH
64450: LD_INT 116
64452: PUSH
64453: LD_INT 117
64455: PUSH
64456: LD_INT 118
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: ST_TO_ADDR
// if result then
64483: LD_VAR 0 2
64487: IFFALSE 65273
// begin normal :=  ;
64489: LD_ADDR_VAR 0 5
64493: PUSH
64494: LD_STRING 
64496: ST_TO_ADDR
// hardcore :=  ;
64497: LD_ADDR_VAR 0 6
64501: PUSH
64502: LD_STRING 
64504: ST_TO_ADDR
// active :=  ;
64505: LD_ADDR_VAR 0 7
64509: PUSH
64510: LD_STRING 
64512: ST_TO_ADDR
// for i = 1 to normalCounter do
64513: LD_ADDR_VAR 0 8
64517: PUSH
64518: DOUBLE
64519: LD_INT 1
64521: DEC
64522: ST_TO_ADDR
64523: LD_EXP 62
64527: PUSH
64528: FOR_TO
64529: IFFALSE 64630
// begin tmp := 0 ;
64531: LD_ADDR_VAR 0 3
64535: PUSH
64536: LD_STRING 0
64538: ST_TO_ADDR
// if result [ 1 ] then
64539: LD_VAR 0 2
64543: PUSH
64544: LD_INT 1
64546: ARRAY
64547: IFFALSE 64612
// if result [ 1 ] [ 1 ] = i then
64549: LD_VAR 0 2
64553: PUSH
64554: LD_INT 1
64556: ARRAY
64557: PUSH
64558: LD_INT 1
64560: ARRAY
64561: PUSH
64562: LD_VAR 0 8
64566: EQUAL
64567: IFFALSE 64612
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
64569: LD_ADDR_VAR 0 2
64573: PUSH
64574: LD_VAR 0 2
64578: PPUSH
64579: LD_INT 1
64581: PPUSH
64582: LD_VAR 0 2
64586: PUSH
64587: LD_INT 1
64589: ARRAY
64590: PPUSH
64591: LD_INT 1
64593: PPUSH
64594: CALL_OW 3
64598: PPUSH
64599: CALL_OW 1
64603: ST_TO_ADDR
// tmp := 1 ;
64604: LD_ADDR_VAR 0 3
64608: PUSH
64609: LD_STRING 1
64611: ST_TO_ADDR
// end ; normal := normal & tmp ;
64612: LD_ADDR_VAR 0 5
64616: PUSH
64617: LD_VAR 0 5
64621: PUSH
64622: LD_VAR 0 3
64626: STR
64627: ST_TO_ADDR
// end ;
64628: GO 64528
64630: POP
64631: POP
// for i = 1 to hardcoreCounter do
64632: LD_ADDR_VAR 0 8
64636: PUSH
64637: DOUBLE
64638: LD_INT 1
64640: DEC
64641: ST_TO_ADDR
64642: LD_EXP 63
64646: PUSH
64647: FOR_TO
64648: IFFALSE 64753
// begin tmp := 0 ;
64650: LD_ADDR_VAR 0 3
64654: PUSH
64655: LD_STRING 0
64657: ST_TO_ADDR
// if result [ 2 ] then
64658: LD_VAR 0 2
64662: PUSH
64663: LD_INT 2
64665: ARRAY
64666: IFFALSE 64735
// if result [ 2 ] [ 1 ] = 100 + i then
64668: LD_VAR 0 2
64672: PUSH
64673: LD_INT 2
64675: ARRAY
64676: PUSH
64677: LD_INT 1
64679: ARRAY
64680: PUSH
64681: LD_INT 100
64683: PUSH
64684: LD_VAR 0 8
64688: PLUS
64689: EQUAL
64690: IFFALSE 64735
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
64692: LD_ADDR_VAR 0 2
64696: PUSH
64697: LD_VAR 0 2
64701: PPUSH
64702: LD_INT 2
64704: PPUSH
64705: LD_VAR 0 2
64709: PUSH
64710: LD_INT 2
64712: ARRAY
64713: PPUSH
64714: LD_INT 1
64716: PPUSH
64717: CALL_OW 3
64721: PPUSH
64722: CALL_OW 1
64726: ST_TO_ADDR
// tmp := 1 ;
64727: LD_ADDR_VAR 0 3
64731: PUSH
64732: LD_STRING 1
64734: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
64735: LD_ADDR_VAR 0 6
64739: PUSH
64740: LD_VAR 0 6
64744: PUSH
64745: LD_VAR 0 3
64749: STR
64750: ST_TO_ADDR
// end ;
64751: GO 64647
64753: POP
64754: POP
// if isGameLoad then
64755: LD_VAR 0 1
64759: IFFALSE 65234
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
64761: LD_ADDR_VAR 0 4
64765: PUSH
64766: LD_EXP 66
64770: PUSH
64771: LD_EXP 65
64775: PUSH
64776: LD_EXP 67
64780: PUSH
64781: LD_EXP 64
64785: PUSH
64786: LD_EXP 68
64790: PUSH
64791: LD_EXP 69
64795: PUSH
64796: LD_EXP 70
64800: PUSH
64801: LD_EXP 71
64805: PUSH
64806: LD_EXP 72
64810: PUSH
64811: LD_EXP 73
64815: PUSH
64816: LD_EXP 74
64820: PUSH
64821: LD_EXP 75
64825: PUSH
64826: LD_EXP 76
64830: PUSH
64831: LD_EXP 77
64835: PUSH
64836: LD_EXP 85
64840: PUSH
64841: LD_EXP 86
64845: PUSH
64846: LD_EXP 87
64850: PUSH
64851: LD_EXP 88
64855: PUSH
64856: LD_EXP 90
64860: PUSH
64861: LD_EXP 91
64865: PUSH
64866: LD_EXP 92
64870: PUSH
64871: LD_EXP 95
64875: PUSH
64876: LD_EXP 97
64880: PUSH
64881: LD_EXP 98
64885: PUSH
64886: LD_EXP 99
64890: PUSH
64891: LD_EXP 101
64895: PUSH
64896: LD_EXP 102
64900: PUSH
64901: LD_EXP 105
64905: PUSH
64906: LD_EXP 106
64910: PUSH
64911: LD_EXP 107
64915: PUSH
64916: LD_EXP 108
64920: PUSH
64921: LD_EXP 109
64925: PUSH
64926: LD_EXP 110
64930: PUSH
64931: LD_EXP 111
64935: PUSH
64936: LD_EXP 112
64940: PUSH
64941: LD_EXP 113
64945: PUSH
64946: LD_EXP 78
64950: PUSH
64951: LD_EXP 79
64955: PUSH
64956: LD_EXP 82
64960: PUSH
64961: LD_EXP 83
64965: PUSH
64966: LD_EXP 84
64970: PUSH
64971: LD_EXP 80
64975: PUSH
64976: LD_EXP 81
64980: PUSH
64981: LD_EXP 89
64985: PUSH
64986: LD_EXP 93
64990: PUSH
64991: LD_EXP 94
64995: PUSH
64996: LD_EXP 96
65000: PUSH
65001: LD_EXP 100
65005: PUSH
65006: LD_EXP 103
65010: PUSH
65011: LD_EXP 104
65015: PUSH
65016: LD_EXP 114
65020: PUSH
65021: LD_EXP 115
65025: PUSH
65026: LD_EXP 116
65030: PUSH
65031: LD_EXP 117
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: ST_TO_ADDR
// tmp :=  ;
65092: LD_ADDR_VAR 0 3
65096: PUSH
65097: LD_STRING 
65099: ST_TO_ADDR
// for i = 1 to normalCounter do
65100: LD_ADDR_VAR 0 8
65104: PUSH
65105: DOUBLE
65106: LD_INT 1
65108: DEC
65109: ST_TO_ADDR
65110: LD_EXP 62
65114: PUSH
65115: FOR_TO
65116: IFFALSE 65152
// begin if flags [ i ] then
65118: LD_VAR 0 4
65122: PUSH
65123: LD_VAR 0 8
65127: ARRAY
65128: IFFALSE 65150
// tmp := tmp & i & ; ;
65130: LD_ADDR_VAR 0 3
65134: PUSH
65135: LD_VAR 0 3
65139: PUSH
65140: LD_VAR 0 8
65144: STR
65145: PUSH
65146: LD_STRING ;
65148: STR
65149: ST_TO_ADDR
// end ;
65150: GO 65115
65152: POP
65153: POP
// for i = 1 to hardcoreCounter do
65154: LD_ADDR_VAR 0 8
65158: PUSH
65159: DOUBLE
65160: LD_INT 1
65162: DEC
65163: ST_TO_ADDR
65164: LD_EXP 63
65168: PUSH
65169: FOR_TO
65170: IFFALSE 65216
// begin if flags [ normalCounter + i ] then
65172: LD_VAR 0 4
65176: PUSH
65177: LD_EXP 62
65181: PUSH
65182: LD_VAR 0 8
65186: PLUS
65187: ARRAY
65188: IFFALSE 65214
// tmp := tmp & ( 100 + i ) & ; ;
65190: LD_ADDR_VAR 0 3
65194: PUSH
65195: LD_VAR 0 3
65199: PUSH
65200: LD_INT 100
65202: PUSH
65203: LD_VAR 0 8
65207: PLUS
65208: STR
65209: PUSH
65210: LD_STRING ;
65212: STR
65213: ST_TO_ADDR
// end ;
65214: GO 65169
65216: POP
65217: POP
// if tmp then
65218: LD_VAR 0 3
65222: IFFALSE 65234
// active := tmp ;
65224: LD_ADDR_VAR 0 7
65228: PUSH
65229: LD_VAR 0 3
65233: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
65234: LD_STRING getStreamItemsFromMission("
65236: PUSH
65237: LD_VAR 0 5
65241: STR
65242: PUSH
65243: LD_STRING ","
65245: STR
65246: PUSH
65247: LD_VAR 0 6
65251: STR
65252: PUSH
65253: LD_STRING ","
65255: STR
65256: PUSH
65257: LD_VAR 0 7
65261: STR
65262: PUSH
65263: LD_STRING ")
65265: STR
65266: PPUSH
65267: CALL_OW 559
// end else
65271: GO 65280
// ToLua ( getStreamItemsFromMission("","","") ) ;
65273: LD_STRING getStreamItemsFromMission("","","")
65275: PPUSH
65276: CALL_OW 559
// end ;
65280: LD_VAR 0 2
65284: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
65285: LD_EXP 61
65289: IFFALSE 65297
65291: PUSH
65292: LD_EXP 66
65296: AND
65297: IFFALSE 65421
65299: GO 65301
65301: DISABLE
65302: LD_INT 0
65304: PPUSH
65305: PPUSH
// begin enable ;
65306: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
65307: LD_ADDR_VAR 0 2
65311: PUSH
65312: LD_INT 22
65314: PUSH
65315: LD_OWVAR 2
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 2
65326: PUSH
65327: LD_INT 34
65329: PUSH
65330: LD_INT 7
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 34
65339: PUSH
65340: LD_INT 45
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 34
65349: PUSH
65350: LD_INT 28
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 34
65359: PUSH
65360: LD_INT 47
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PPUSH
65378: CALL_OW 69
65382: ST_TO_ADDR
// if not tmp then
65383: LD_VAR 0 2
65387: NOT
65388: IFFALSE 65392
// exit ;
65390: GO 65421
// for i in tmp do
65392: LD_ADDR_VAR 0 1
65396: PUSH
65397: LD_VAR 0 2
65401: PUSH
65402: FOR_IN
65403: IFFALSE 65419
// begin SetLives ( i , 0 ) ;
65405: LD_VAR 0 1
65409: PPUSH
65410: LD_INT 0
65412: PPUSH
65413: CALL_OW 234
// end ;
65417: GO 65402
65419: POP
65420: POP
// end ;
65421: PPOPN 2
65423: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
65424: LD_EXP 61
65428: IFFALSE 65436
65430: PUSH
65431: LD_EXP 67
65435: AND
65436: IFFALSE 65520
65438: GO 65440
65440: DISABLE
65441: LD_INT 0
65443: PPUSH
65444: PPUSH
// begin enable ;
65445: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
65446: LD_ADDR_VAR 0 2
65450: PUSH
65451: LD_INT 22
65453: PUSH
65454: LD_OWVAR 2
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 32
65465: PUSH
65466: LD_INT 3
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PPUSH
65477: CALL_OW 69
65481: ST_TO_ADDR
// if not tmp then
65482: LD_VAR 0 2
65486: NOT
65487: IFFALSE 65491
// exit ;
65489: GO 65520
// for i in tmp do
65491: LD_ADDR_VAR 0 1
65495: PUSH
65496: LD_VAR 0 2
65500: PUSH
65501: FOR_IN
65502: IFFALSE 65518
// begin SetLives ( i , 0 ) ;
65504: LD_VAR 0 1
65508: PPUSH
65509: LD_INT 0
65511: PPUSH
65512: CALL_OW 234
// end ;
65516: GO 65501
65518: POP
65519: POP
// end ;
65520: PPOPN 2
65522: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
65523: LD_EXP 61
65527: IFFALSE 65535
65529: PUSH
65530: LD_EXP 64
65534: AND
65535: IFFALSE 65628
65537: GO 65539
65539: DISABLE
65540: LD_INT 0
65542: PPUSH
// begin enable ;
65543: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
65544: LD_ADDR_VAR 0 1
65548: PUSH
65549: LD_INT 22
65551: PUSH
65552: LD_OWVAR 2
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 2
65563: PUSH
65564: LD_INT 25
65566: PUSH
65567: LD_INT 5
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 25
65576: PUSH
65577: LD_INT 9
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 25
65586: PUSH
65587: LD_INT 8
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PPUSH
65604: CALL_OW 69
65608: PUSH
65609: FOR_IN
65610: IFFALSE 65626
// begin SetClass ( i , 1 ) ;
65612: LD_VAR 0 1
65616: PPUSH
65617: LD_INT 1
65619: PPUSH
65620: CALL_OW 336
// end ;
65624: GO 65609
65626: POP
65627: POP
// end ;
65628: PPOPN 1
65630: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
65631: LD_EXP 61
65635: IFFALSE 65643
65637: PUSH
65638: LD_EXP 65
65642: AND
65643: IFFALSE 65655
65645: PUSH
65646: LD_OWVAR 65
65650: PUSH
65651: LD_INT 7
65653: LESS
65654: AND
65655: IFFALSE 65669
65657: GO 65659
65659: DISABLE
// begin enable ;
65660: ENABLE
// game_speed := 7 ;
65661: LD_ADDR_OWVAR 65
65665: PUSH
65666: LD_INT 7
65668: ST_TO_ADDR
// end ;
65669: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
65670: LD_EXP 61
65674: IFFALSE 65682
65676: PUSH
65677: LD_EXP 68
65681: AND
65682: IFFALSE 65884
65684: GO 65686
65686: DISABLE
65687: LD_INT 0
65689: PPUSH
65690: PPUSH
65691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
65692: LD_ADDR_VAR 0 3
65696: PUSH
65697: LD_INT 81
65699: PUSH
65700: LD_OWVAR 2
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 21
65711: PUSH
65712: LD_INT 1
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PPUSH
65723: CALL_OW 69
65727: ST_TO_ADDR
// if not tmp then
65728: LD_VAR 0 3
65732: NOT
65733: IFFALSE 65737
// exit ;
65735: GO 65884
// if tmp > 5 then
65737: LD_VAR 0 3
65741: PUSH
65742: LD_INT 5
65744: GREATER
65745: IFFALSE 65757
// k := 5 else
65747: LD_ADDR_VAR 0 2
65751: PUSH
65752: LD_INT 5
65754: ST_TO_ADDR
65755: GO 65767
// k := tmp ;
65757: LD_ADDR_VAR 0 2
65761: PUSH
65762: LD_VAR 0 3
65766: ST_TO_ADDR
// for i := 1 to k do
65767: LD_ADDR_VAR 0 1
65771: PUSH
65772: DOUBLE
65773: LD_INT 1
65775: DEC
65776: ST_TO_ADDR
65777: LD_VAR 0 2
65781: PUSH
65782: FOR_TO
65783: IFFALSE 65882
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
65785: LD_VAR 0 3
65789: PUSH
65790: LD_VAR 0 1
65794: ARRAY
65795: PPUSH
65796: LD_VAR 0 1
65800: PUSH
65801: LD_INT 4
65803: MOD
65804: PUSH
65805: LD_INT 1
65807: PLUS
65808: PPUSH
65809: CALL_OW 259
65813: PUSH
65814: LD_INT 10
65816: LESS
65817: IFFALSE 65880
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
65819: LD_VAR 0 3
65823: PUSH
65824: LD_VAR 0 1
65828: ARRAY
65829: PPUSH
65830: LD_VAR 0 1
65834: PUSH
65835: LD_INT 4
65837: MOD
65838: PUSH
65839: LD_INT 1
65841: PLUS
65842: PPUSH
65843: LD_VAR 0 3
65847: PUSH
65848: LD_VAR 0 1
65852: ARRAY
65853: PPUSH
65854: LD_VAR 0 1
65858: PUSH
65859: LD_INT 4
65861: MOD
65862: PUSH
65863: LD_INT 1
65865: PLUS
65866: PPUSH
65867: CALL_OW 259
65871: PUSH
65872: LD_INT 1
65874: PLUS
65875: PPUSH
65876: CALL_OW 237
65880: GO 65782
65882: POP
65883: POP
// end ;
65884: PPOPN 3
65886: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
65887: LD_EXP 61
65891: IFFALSE 65899
65893: PUSH
65894: LD_EXP 69
65898: AND
65899: IFFALSE 65919
65901: GO 65903
65903: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
65904: LD_INT 4
65906: PPUSH
65907: LD_OWVAR 2
65911: PPUSH
65912: LD_INT 0
65914: PPUSH
65915: CALL_OW 324
65919: END
// every 0 0$1 trigger StreamModeActive and sShovel do
65920: LD_EXP 61
65924: IFFALSE 65932
65926: PUSH
65927: LD_EXP 98
65931: AND
65932: IFFALSE 65952
65934: GO 65936
65936: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
65937: LD_INT 19
65939: PPUSH
65940: LD_OWVAR 2
65944: PPUSH
65945: LD_INT 0
65947: PPUSH
65948: CALL_OW 324
65952: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
65953: LD_EXP 61
65957: IFFALSE 65965
65959: PUSH
65960: LD_EXP 70
65964: AND
65965: IFFALSE 66067
65967: GO 65969
65969: DISABLE
65970: LD_INT 0
65972: PPUSH
65973: PPUSH
// begin enable ;
65974: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
65975: LD_ADDR_VAR 0 2
65979: PUSH
65980: LD_INT 22
65982: PUSH
65983: LD_OWVAR 2
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 2
65994: PUSH
65995: LD_INT 34
65997: PUSH
65998: LD_INT 11
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 34
66007: PUSH
66008: LD_INT 30
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: LIST
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PPUSH
66024: CALL_OW 69
66028: ST_TO_ADDR
// if not tmp then
66029: LD_VAR 0 2
66033: NOT
66034: IFFALSE 66038
// exit ;
66036: GO 66067
// for i in tmp do
66038: LD_ADDR_VAR 0 1
66042: PUSH
66043: LD_VAR 0 2
66047: PUSH
66048: FOR_IN
66049: IFFALSE 66065
// begin SetLives ( i , 0 ) ;
66051: LD_VAR 0 1
66055: PPUSH
66056: LD_INT 0
66058: PPUSH
66059: CALL_OW 234
// end ;
66063: GO 66048
66065: POP
66066: POP
// end ;
66067: PPOPN 2
66069: END
// every 0 0$1 trigger StreamModeActive and sBunker do
66070: LD_EXP 61
66074: IFFALSE 66082
66076: PUSH
66077: LD_EXP 71
66081: AND
66082: IFFALSE 66102
66084: GO 66086
66086: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
66087: LD_INT 32
66089: PPUSH
66090: LD_OWVAR 2
66094: PPUSH
66095: LD_INT 0
66097: PPUSH
66098: CALL_OW 324
66102: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
66103: LD_EXP 61
66107: IFFALSE 66115
66109: PUSH
66110: LD_EXP 72
66114: AND
66115: IFFALSE 66298
66117: GO 66119
66119: DISABLE
66120: LD_INT 0
66122: PPUSH
66123: PPUSH
66124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
66125: LD_ADDR_VAR 0 2
66129: PUSH
66130: LD_INT 22
66132: PUSH
66133: LD_OWVAR 2
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 33
66144: PUSH
66145: LD_INT 3
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PPUSH
66156: CALL_OW 69
66160: ST_TO_ADDR
// if not tmp then
66161: LD_VAR 0 2
66165: NOT
66166: IFFALSE 66170
// exit ;
66168: GO 66298
// side := 0 ;
66170: LD_ADDR_VAR 0 3
66174: PUSH
66175: LD_INT 0
66177: ST_TO_ADDR
// for i := 1 to 8 do
66178: LD_ADDR_VAR 0 1
66182: PUSH
66183: DOUBLE
66184: LD_INT 1
66186: DEC
66187: ST_TO_ADDR
66188: LD_INT 8
66190: PUSH
66191: FOR_TO
66192: IFFALSE 66242
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
66194: LD_OWVAR 2
66198: PUSH
66199: LD_VAR 0 1
66203: NONEQUAL
66204: IFFALSE 66226
66206: PUSH
66207: LD_OWVAR 2
66211: PPUSH
66212: LD_VAR 0 1
66216: PPUSH
66217: CALL_OW 81
66221: PUSH
66222: LD_INT 2
66224: EQUAL
66225: AND
66226: IFFALSE 66240
// begin side := i ;
66228: LD_ADDR_VAR 0 3
66232: PUSH
66233: LD_VAR 0 1
66237: ST_TO_ADDR
// break ;
66238: GO 66242
// end ;
66240: GO 66191
66242: POP
66243: POP
// if not side then
66244: LD_VAR 0 3
66248: NOT
66249: IFFALSE 66253
// exit ;
66251: GO 66298
// for i := 1 to tmp do
66253: LD_ADDR_VAR 0 1
66257: PUSH
66258: DOUBLE
66259: LD_INT 1
66261: DEC
66262: ST_TO_ADDR
66263: LD_VAR 0 2
66267: PUSH
66268: FOR_TO
66269: IFFALSE 66296
// if Prob ( 60 ) then
66271: LD_INT 60
66273: PPUSH
66274: CALL_OW 13
66278: IFFALSE 66294
// SetSide ( i , side ) ;
66280: LD_VAR 0 1
66284: PPUSH
66285: LD_VAR 0 3
66289: PPUSH
66290: CALL_OW 235
66294: GO 66268
66296: POP
66297: POP
// end ;
66298: PPOPN 3
66300: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
66301: LD_EXP 61
66305: IFFALSE 66313
66307: PUSH
66308: LD_EXP 74
66312: AND
66313: IFFALSE 66432
66315: GO 66317
66317: DISABLE
66318: LD_INT 0
66320: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
66321: LD_ADDR_VAR 0 1
66325: PUSH
66326: LD_INT 22
66328: PUSH
66329: LD_OWVAR 2
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_INT 21
66340: PUSH
66341: LD_INT 1
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 3
66350: PUSH
66351: LD_INT 23
66353: PUSH
66354: LD_INT 0
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: LIST
66369: PPUSH
66370: CALL_OW 69
66374: PUSH
66375: FOR_IN
66376: IFFALSE 66430
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
66378: LD_VAR 0 1
66382: PPUSH
66383: CALL_OW 257
66387: PUSH
66388: LD_INT 1
66390: PUSH
66391: LD_INT 2
66393: PUSH
66394: LD_INT 3
66396: PUSH
66397: LD_INT 4
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: IN
66406: IFFALSE 66428
// SetClass ( un , rand ( 1 , 4 ) ) ;
66408: LD_VAR 0 1
66412: PPUSH
66413: LD_INT 1
66415: PPUSH
66416: LD_INT 4
66418: PPUSH
66419: CALL_OW 12
66423: PPUSH
66424: CALL_OW 336
66428: GO 66375
66430: POP
66431: POP
// end ;
66432: PPOPN 1
66434: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
66435: LD_EXP 61
66439: IFFALSE 66447
66441: PUSH
66442: LD_EXP 73
66446: AND
66447: IFFALSE 66526
66449: GO 66451
66451: DISABLE
66452: LD_INT 0
66454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
66455: LD_ADDR_VAR 0 1
66459: PUSH
66460: LD_INT 22
66462: PUSH
66463: LD_OWVAR 2
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 21
66474: PUSH
66475: LD_INT 3
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PPUSH
66486: CALL_OW 69
66490: ST_TO_ADDR
// if not tmp then
66491: LD_VAR 0 1
66495: NOT
66496: IFFALSE 66500
// exit ;
66498: GO 66526
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
66500: LD_VAR 0 1
66504: PUSH
66505: LD_INT 1
66507: PPUSH
66508: LD_VAR 0 1
66512: PPUSH
66513: CALL_OW 12
66517: ARRAY
66518: PPUSH
66519: LD_INT 100
66521: PPUSH
66522: CALL_OW 234
// end ;
66526: PPOPN 1
66528: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
66529: LD_EXP 61
66533: IFFALSE 66541
66535: PUSH
66536: LD_EXP 75
66540: AND
66541: IFFALSE 66639
66543: GO 66545
66545: DISABLE
66546: LD_INT 0
66548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66549: LD_ADDR_VAR 0 1
66553: PUSH
66554: LD_INT 22
66556: PUSH
66557: LD_OWVAR 2
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 21
66568: PUSH
66569: LD_INT 1
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PPUSH
66580: CALL_OW 69
66584: ST_TO_ADDR
// if not tmp then
66585: LD_VAR 0 1
66589: NOT
66590: IFFALSE 66594
// exit ;
66592: GO 66639
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
66594: LD_VAR 0 1
66598: PUSH
66599: LD_INT 1
66601: PPUSH
66602: LD_VAR 0 1
66606: PPUSH
66607: CALL_OW 12
66611: ARRAY
66612: PPUSH
66613: LD_INT 1
66615: PPUSH
66616: LD_INT 4
66618: PPUSH
66619: CALL_OW 12
66623: PPUSH
66624: LD_INT 3000
66626: PPUSH
66627: LD_INT 9000
66629: PPUSH
66630: CALL_OW 12
66634: PPUSH
66635: CALL_OW 492
// end ;
66639: PPOPN 1
66641: END
// every 0 0$1 trigger StreamModeActive and sDepot do
66642: LD_EXP 61
66646: IFFALSE 66654
66648: PUSH
66649: LD_EXP 76
66653: AND
66654: IFFALSE 66674
66656: GO 66658
66658: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
66659: LD_INT 1
66661: PPUSH
66662: LD_OWVAR 2
66666: PPUSH
66667: LD_INT 0
66669: PPUSH
66670: CALL_OW 324
66674: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
66675: LD_EXP 61
66679: IFFALSE 66687
66681: PUSH
66682: LD_EXP 77
66686: AND
66687: IFFALSE 66770
66689: GO 66691
66691: DISABLE
66692: LD_INT 0
66694: PPUSH
66695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
66696: LD_ADDR_VAR 0 2
66700: PUSH
66701: LD_INT 22
66703: PUSH
66704: LD_OWVAR 2
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 21
66715: PUSH
66716: LD_INT 3
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PPUSH
66727: CALL_OW 69
66731: ST_TO_ADDR
// if not tmp then
66732: LD_VAR 0 2
66736: NOT
66737: IFFALSE 66741
// exit ;
66739: GO 66770
// for i in tmp do
66741: LD_ADDR_VAR 0 1
66745: PUSH
66746: LD_VAR 0 2
66750: PUSH
66751: FOR_IN
66752: IFFALSE 66768
// SetBLevel ( i , 10 ) ;
66754: LD_VAR 0 1
66758: PPUSH
66759: LD_INT 10
66761: PPUSH
66762: CALL_OW 241
66766: GO 66751
66768: POP
66769: POP
// end ;
66770: PPOPN 2
66772: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
66773: LD_EXP 61
66777: IFFALSE 66785
66779: PUSH
66780: LD_EXP 78
66784: AND
66785: IFFALSE 66896
66787: GO 66789
66789: DISABLE
66790: LD_INT 0
66792: PPUSH
66793: PPUSH
66794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
66795: LD_ADDR_VAR 0 3
66799: PUSH
66800: LD_INT 22
66802: PUSH
66803: LD_OWVAR 2
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: LD_INT 25
66814: PUSH
66815: LD_INT 1
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PPUSH
66826: CALL_OW 69
66830: ST_TO_ADDR
// if not tmp then
66831: LD_VAR 0 3
66835: NOT
66836: IFFALSE 66840
// exit ;
66838: GO 66896
// un := tmp [ rand ( 1 , tmp ) ] ;
66840: LD_ADDR_VAR 0 2
66844: PUSH
66845: LD_VAR 0 3
66849: PUSH
66850: LD_INT 1
66852: PPUSH
66853: LD_VAR 0 3
66857: PPUSH
66858: CALL_OW 12
66862: ARRAY
66863: ST_TO_ADDR
// if Crawls ( un ) then
66864: LD_VAR 0 2
66868: PPUSH
66869: CALL_OW 318
66873: IFFALSE 66884
// ComWalk ( un ) ;
66875: LD_VAR 0 2
66879: PPUSH
66880: CALL_OW 138
// SetClass ( un , class_sniper ) ;
66884: LD_VAR 0 2
66888: PPUSH
66889: LD_INT 5
66891: PPUSH
66892: CALL_OW 336
// end ;
66896: PPOPN 3
66898: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
66899: LD_EXP 61
66903: IFFALSE 66911
66905: PUSH
66906: LD_EXP 79
66910: AND
66911: IFFALSE 66923
66913: PUSH
66914: LD_OWVAR 67
66918: PUSH
66919: LD_INT 4
66921: LESS
66922: AND
66923: IFFALSE 66942
66925: GO 66927
66927: DISABLE
// begin Difficulty := Difficulty + 1 ;
66928: LD_ADDR_OWVAR 67
66932: PUSH
66933: LD_OWVAR 67
66937: PUSH
66938: LD_INT 1
66940: PLUS
66941: ST_TO_ADDR
// end ;
66942: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
66943: LD_EXP 61
66947: IFFALSE 66955
66949: PUSH
66950: LD_EXP 80
66954: AND
66955: IFFALSE 67058
66957: GO 66959
66959: DISABLE
66960: LD_INT 0
66962: PPUSH
// begin for i := 1 to 5 do
66963: LD_ADDR_VAR 0 1
66967: PUSH
66968: DOUBLE
66969: LD_INT 1
66971: DEC
66972: ST_TO_ADDR
66973: LD_INT 5
66975: PUSH
66976: FOR_TO
66977: IFFALSE 67056
// begin uc_nation := nation_nature ;
66979: LD_ADDR_OWVAR 21
66983: PUSH
66984: LD_INT 0
66986: ST_TO_ADDR
// uc_side := 0 ;
66987: LD_ADDR_OWVAR 20
66991: PUSH
66992: LD_INT 0
66994: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66995: LD_ADDR_OWVAR 29
66999: PUSH
67000: LD_INT 12
67002: PUSH
67003: LD_INT 12
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: ST_TO_ADDR
// hc_agressivity := 20 ;
67010: LD_ADDR_OWVAR 35
67014: PUSH
67015: LD_INT 20
67017: ST_TO_ADDR
// hc_class := class_tiger ;
67018: LD_ADDR_OWVAR 28
67022: PUSH
67023: LD_INT 14
67025: ST_TO_ADDR
// hc_gallery :=  ;
67026: LD_ADDR_OWVAR 33
67030: PUSH
67031: LD_STRING 
67033: ST_TO_ADDR
// hc_name :=  ;
67034: LD_ADDR_OWVAR 26
67038: PUSH
67039: LD_STRING 
67041: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
67042: CALL_OW 44
67046: PPUSH
67047: LD_INT 0
67049: PPUSH
67050: CALL_OW 51
// end ;
67054: GO 66976
67056: POP
67057: POP
// end ;
67058: PPOPN 1
67060: END
// every 0 0$1 trigger StreamModeActive and sBomb do
67061: LD_EXP 61
67065: IFFALSE 67073
67067: PUSH
67068: LD_EXP 81
67072: AND
67073: IFFALSE 67082
67075: GO 67077
67077: DISABLE
// StreamSibBomb ;
67078: CALL 67083 0 0
67082: END
// export function StreamSibBomb ; var i , x , y ; begin
67083: LD_INT 0
67085: PPUSH
67086: PPUSH
67087: PPUSH
67088: PPUSH
// result := false ;
67089: LD_ADDR_VAR 0 1
67093: PUSH
67094: LD_INT 0
67096: ST_TO_ADDR
// for i := 1 to 16 do
67097: LD_ADDR_VAR 0 2
67101: PUSH
67102: DOUBLE
67103: LD_INT 1
67105: DEC
67106: ST_TO_ADDR
67107: LD_INT 16
67109: PUSH
67110: FOR_TO
67111: IFFALSE 67310
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
67113: LD_ADDR_VAR 0 3
67117: PUSH
67118: LD_INT 10
67120: PUSH
67121: LD_INT 20
67123: PUSH
67124: LD_INT 30
67126: PUSH
67127: LD_INT 40
67129: PUSH
67130: LD_INT 50
67132: PUSH
67133: LD_INT 60
67135: PUSH
67136: LD_INT 70
67138: PUSH
67139: LD_INT 80
67141: PUSH
67142: LD_INT 90
67144: PUSH
67145: LD_INT 100
67147: PUSH
67148: LD_INT 110
67150: PUSH
67151: LD_INT 120
67153: PUSH
67154: LD_INT 130
67156: PUSH
67157: LD_INT 140
67159: PUSH
67160: LD_INT 150
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 1
67182: PPUSH
67183: LD_INT 15
67185: PPUSH
67186: CALL_OW 12
67190: ARRAY
67191: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
67192: LD_ADDR_VAR 0 4
67196: PUSH
67197: LD_INT 10
67199: PUSH
67200: LD_INT 20
67202: PUSH
67203: LD_INT 30
67205: PUSH
67206: LD_INT 40
67208: PUSH
67209: LD_INT 50
67211: PUSH
67212: LD_INT 60
67214: PUSH
67215: LD_INT 70
67217: PUSH
67218: LD_INT 80
67220: PUSH
67221: LD_INT 90
67223: PUSH
67224: LD_INT 100
67226: PUSH
67227: LD_INT 110
67229: PUSH
67230: LD_INT 120
67232: PUSH
67233: LD_INT 130
67235: PUSH
67236: LD_INT 140
67238: PUSH
67239: LD_INT 150
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 1
67261: PPUSH
67262: LD_INT 15
67264: PPUSH
67265: CALL_OW 12
67269: ARRAY
67270: ST_TO_ADDR
// if ValidHex ( x , y ) then
67271: LD_VAR 0 3
67275: PPUSH
67276: LD_VAR 0 4
67280: PPUSH
67281: CALL_OW 488
67285: IFFALSE 67308
// begin result := [ x , y ] ;
67287: LD_ADDR_VAR 0 1
67291: PUSH
67292: LD_VAR 0 3
67296: PUSH
67297: LD_VAR 0 4
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: ST_TO_ADDR
// break ;
67306: GO 67310
// end ; end ;
67308: GO 67110
67310: POP
67311: POP
// if result then
67312: LD_VAR 0 1
67316: IFFALSE 67376
// begin ToLua ( playSibBomb() ) ;
67318: LD_STRING playSibBomb()
67320: PPUSH
67321: CALL_OW 559
// wait ( 0 0$14 ) ;
67325: LD_INT 490
67327: PPUSH
67328: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
67332: LD_VAR 0 1
67336: PUSH
67337: LD_INT 1
67339: ARRAY
67340: PPUSH
67341: LD_VAR 0 1
67345: PUSH
67346: LD_INT 2
67348: ARRAY
67349: PPUSH
67350: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
67354: LD_VAR 0 1
67358: PUSH
67359: LD_INT 1
67361: ARRAY
67362: PPUSH
67363: LD_VAR 0 1
67367: PUSH
67368: LD_INT 2
67370: ARRAY
67371: PPUSH
67372: CALL_OW 429
// end ; end ;
67376: LD_VAR 0 1
67380: RET
// every 0 0$1 trigger StreamModeActive and sReset do
67381: LD_EXP 61
67385: IFFALSE 67393
67387: PUSH
67388: LD_EXP 83
67392: AND
67393: IFFALSE 67405
67395: GO 67397
67397: DISABLE
// YouLost (  ) ;
67398: LD_STRING 
67400: PPUSH
67401: CALL_OW 104
67405: END
// every 0 0$1 trigger StreamModeActive and sFog do
67406: LD_EXP 61
67410: IFFALSE 67418
67412: PUSH
67413: LD_EXP 82
67417: AND
67418: IFFALSE 67432
67420: GO 67422
67422: DISABLE
// FogOff ( your_side ) ;
67423: LD_OWVAR 2
67427: PPUSH
67428: CALL_OW 344
67432: END
// every 0 0$1 trigger StreamModeActive and sSun do
67433: LD_EXP 61
67437: IFFALSE 67445
67439: PUSH
67440: LD_EXP 84
67444: AND
67445: IFFALSE 67473
67447: GO 67449
67449: DISABLE
// begin solar_recharge_percent := 0 ;
67450: LD_ADDR_OWVAR 79
67454: PUSH
67455: LD_INT 0
67457: ST_TO_ADDR
// wait ( 5 5$00 ) ;
67458: LD_INT 10500
67460: PPUSH
67461: CALL_OW 67
// solar_recharge_percent := 100 ;
67465: LD_ADDR_OWVAR 79
67469: PUSH
67470: LD_INT 100
67472: ST_TO_ADDR
// end ;
67473: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
67474: LD_EXP 61
67478: IFFALSE 67486
67480: PUSH
67481: LD_EXP 85
67485: AND
67486: IFFALSE 67725
67488: GO 67490
67490: DISABLE
67491: LD_INT 0
67493: PPUSH
67494: PPUSH
67495: PPUSH
// begin tmp := [ ] ;
67496: LD_ADDR_VAR 0 3
67500: PUSH
67501: EMPTY
67502: ST_TO_ADDR
// for i := 1 to 6 do
67503: LD_ADDR_VAR 0 1
67507: PUSH
67508: DOUBLE
67509: LD_INT 1
67511: DEC
67512: ST_TO_ADDR
67513: LD_INT 6
67515: PUSH
67516: FOR_TO
67517: IFFALSE 67622
// begin uc_nation := nation_nature ;
67519: LD_ADDR_OWVAR 21
67523: PUSH
67524: LD_INT 0
67526: ST_TO_ADDR
// uc_side := 0 ;
67527: LD_ADDR_OWVAR 20
67531: PUSH
67532: LD_INT 0
67534: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67535: LD_ADDR_OWVAR 29
67539: PUSH
67540: LD_INT 12
67542: PUSH
67543: LD_INT 12
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: ST_TO_ADDR
// hc_agressivity := 20 ;
67550: LD_ADDR_OWVAR 35
67554: PUSH
67555: LD_INT 20
67557: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
67558: LD_ADDR_OWVAR 28
67562: PUSH
67563: LD_INT 17
67565: ST_TO_ADDR
// hc_gallery :=  ;
67566: LD_ADDR_OWVAR 33
67570: PUSH
67571: LD_STRING 
67573: ST_TO_ADDR
// hc_name :=  ;
67574: LD_ADDR_OWVAR 26
67578: PUSH
67579: LD_STRING 
67581: ST_TO_ADDR
// un := CreateHuman ;
67582: LD_ADDR_VAR 0 2
67586: PUSH
67587: CALL_OW 44
67591: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
67592: LD_VAR 0 2
67596: PPUSH
67597: LD_INT 1
67599: PPUSH
67600: CALL_OW 51
// tmp := tmp ^ un ;
67604: LD_ADDR_VAR 0 3
67608: PUSH
67609: LD_VAR 0 3
67613: PUSH
67614: LD_VAR 0 2
67618: ADD
67619: ST_TO_ADDR
// end ;
67620: GO 67516
67622: POP
67623: POP
// repeat wait ( 0 0$1 ) ;
67624: LD_INT 35
67626: PPUSH
67627: CALL_OW 67
// for un in tmp do
67631: LD_ADDR_VAR 0 2
67635: PUSH
67636: LD_VAR 0 3
67640: PUSH
67641: FOR_IN
67642: IFFALSE 67716
// begin if IsDead ( un ) then
67644: LD_VAR 0 2
67648: PPUSH
67649: CALL_OW 301
67653: IFFALSE 67673
// begin tmp := tmp diff un ;
67655: LD_ADDR_VAR 0 3
67659: PUSH
67660: LD_VAR 0 3
67664: PUSH
67665: LD_VAR 0 2
67669: DIFF
67670: ST_TO_ADDR
// continue ;
67671: GO 67641
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
67673: LD_VAR 0 2
67677: PPUSH
67678: LD_INT 3
67680: PUSH
67681: LD_INT 22
67683: PUSH
67684: LD_INT 0
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PPUSH
67695: CALL_OW 69
67699: PPUSH
67700: LD_VAR 0 2
67704: PPUSH
67705: CALL_OW 74
67709: PPUSH
67710: CALL_OW 115
// end ;
67714: GO 67641
67716: POP
67717: POP
// until not tmp ;
67718: LD_VAR 0 3
67722: NOT
67723: IFFALSE 67624
// end ;
67725: PPOPN 3
67727: END
// every 0 0$1 trigger StreamModeActive and sTroll do
67728: LD_EXP 61
67732: IFFALSE 67740
67734: PUSH
67735: LD_EXP 86
67739: AND
67740: IFFALSE 67794
67742: GO 67744
67744: DISABLE
// begin ToLua ( displayTroll(); ) ;
67745: LD_STRING displayTroll();
67747: PPUSH
67748: CALL_OW 559
// wait ( 3 3$00 ) ;
67752: LD_INT 6300
67754: PPUSH
67755: CALL_OW 67
// ToLua ( hideTroll(); ) ;
67759: LD_STRING hideTroll();
67761: PPUSH
67762: CALL_OW 559
// wait ( 1 1$00 ) ;
67766: LD_INT 2100
67768: PPUSH
67769: CALL_OW 67
// ToLua ( displayTroll(); ) ;
67773: LD_STRING displayTroll();
67775: PPUSH
67776: CALL_OW 559
// wait ( 1 1$00 ) ;
67780: LD_INT 2100
67782: PPUSH
67783: CALL_OW 67
// ToLua ( hideTroll(); ) ;
67787: LD_STRING hideTroll();
67789: PPUSH
67790: CALL_OW 559
// end ;
67794: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
67795: LD_EXP 61
67799: IFFALSE 67807
67801: PUSH
67802: LD_EXP 87
67806: AND
67807: IFFALSE 67870
67809: GO 67811
67811: DISABLE
67812: LD_INT 0
67814: PPUSH
// begin p := 0 ;
67815: LD_ADDR_VAR 0 1
67819: PUSH
67820: LD_INT 0
67822: ST_TO_ADDR
// repeat game_speed := 1 ;
67823: LD_ADDR_OWVAR 65
67827: PUSH
67828: LD_INT 1
67830: ST_TO_ADDR
// wait ( 0 0$1 ) ;
67831: LD_INT 35
67833: PPUSH
67834: CALL_OW 67
// p := p + 1 ;
67838: LD_ADDR_VAR 0 1
67842: PUSH
67843: LD_VAR 0 1
67847: PUSH
67848: LD_INT 1
67850: PLUS
67851: ST_TO_ADDR
// until p >= 60 ;
67852: LD_VAR 0 1
67856: PUSH
67857: LD_INT 60
67859: GREATEREQUAL
67860: IFFALSE 67823
// game_speed := 4 ;
67862: LD_ADDR_OWVAR 65
67866: PUSH
67867: LD_INT 4
67869: ST_TO_ADDR
// end ;
67870: PPOPN 1
67872: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
67873: LD_EXP 61
67877: IFFALSE 67885
67879: PUSH
67880: LD_EXP 88
67884: AND
67885: IFFALSE 68031
67887: GO 67889
67889: DISABLE
67890: LD_INT 0
67892: PPUSH
67893: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67894: LD_ADDR_VAR 0 1
67898: PUSH
67899: LD_INT 22
67901: PUSH
67902: LD_OWVAR 2
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 2
67913: PUSH
67914: LD_INT 30
67916: PUSH
67917: LD_INT 0
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 30
67926: PUSH
67927: LD_INT 1
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: LIST
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PPUSH
67943: CALL_OW 69
67947: ST_TO_ADDR
// if not depot then
67948: LD_VAR 0 1
67952: NOT
67953: IFFALSE 67957
// exit ;
67955: GO 68031
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
67957: LD_ADDR_VAR 0 2
67961: PUSH
67962: LD_VAR 0 1
67966: PUSH
67967: LD_INT 1
67969: PPUSH
67970: LD_VAR 0 1
67974: PPUSH
67975: CALL_OW 12
67979: ARRAY
67980: PPUSH
67981: CALL_OW 274
67985: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
67986: LD_VAR 0 2
67990: PPUSH
67991: LD_INT 1
67993: PPUSH
67994: LD_INT 0
67996: PPUSH
67997: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
68001: LD_VAR 0 2
68005: PPUSH
68006: LD_INT 2
68008: PPUSH
68009: LD_INT 0
68011: PPUSH
68012: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
68016: LD_VAR 0 2
68020: PPUSH
68021: LD_INT 3
68023: PPUSH
68024: LD_INT 0
68026: PPUSH
68027: CALL_OW 277
// end ;
68031: PPOPN 2
68033: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
68034: LD_EXP 61
68038: IFFALSE 68046
68040: PUSH
68041: LD_EXP 89
68045: AND
68046: IFFALSE 68143
68048: GO 68050
68050: DISABLE
68051: LD_INT 0
68053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68054: LD_ADDR_VAR 0 1
68058: PUSH
68059: LD_INT 22
68061: PUSH
68062: LD_OWVAR 2
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 21
68073: PUSH
68074: LD_INT 1
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 3
68083: PUSH
68084: LD_INT 23
68086: PUSH
68087: LD_INT 0
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: LIST
68102: PPUSH
68103: CALL_OW 69
68107: ST_TO_ADDR
// if not tmp then
68108: LD_VAR 0 1
68112: NOT
68113: IFFALSE 68117
// exit ;
68115: GO 68143
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
68117: LD_VAR 0 1
68121: PUSH
68122: LD_INT 1
68124: PPUSH
68125: LD_VAR 0 1
68129: PPUSH
68130: CALL_OW 12
68134: ARRAY
68135: PPUSH
68136: LD_INT 200
68138: PPUSH
68139: CALL_OW 234
// end ;
68143: PPOPN 1
68145: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
68146: LD_EXP 61
68150: IFFALSE 68158
68152: PUSH
68153: LD_EXP 90
68157: AND
68158: IFFALSE 68237
68160: GO 68162
68162: DISABLE
68163: LD_INT 0
68165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
68166: LD_ADDR_VAR 0 1
68170: PUSH
68171: LD_INT 22
68173: PUSH
68174: LD_OWVAR 2
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 21
68185: PUSH
68186: LD_INT 2
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PPUSH
68197: CALL_OW 69
68201: ST_TO_ADDR
// if not tmp then
68202: LD_VAR 0 1
68206: NOT
68207: IFFALSE 68211
// exit ;
68209: GO 68237
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
68211: LD_VAR 0 1
68215: PUSH
68216: LD_INT 1
68218: PPUSH
68219: LD_VAR 0 1
68223: PPUSH
68224: CALL_OW 12
68228: ARRAY
68229: PPUSH
68230: LD_INT 60
68232: PPUSH
68233: CALL_OW 234
// end ;
68237: PPOPN 1
68239: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
68240: LD_EXP 61
68244: IFFALSE 68252
68246: PUSH
68247: LD_EXP 91
68251: AND
68252: IFFALSE 68351
68254: GO 68256
68256: DISABLE
68257: LD_INT 0
68259: PPUSH
68260: PPUSH
// begin enable ;
68261: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
68262: LD_ADDR_VAR 0 1
68266: PUSH
68267: LD_INT 22
68269: PUSH
68270: LD_OWVAR 2
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 61
68281: PUSH
68282: EMPTY
68283: LIST
68284: PUSH
68285: LD_INT 33
68287: PUSH
68288: LD_INT 2
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: LIST
68299: PPUSH
68300: CALL_OW 69
68304: ST_TO_ADDR
// if not tmp then
68305: LD_VAR 0 1
68309: NOT
68310: IFFALSE 68314
// exit ;
68312: GO 68351
// for i in tmp do
68314: LD_ADDR_VAR 0 2
68318: PUSH
68319: LD_VAR 0 1
68323: PUSH
68324: FOR_IN
68325: IFFALSE 68349
// if IsControledBy ( i ) then
68327: LD_VAR 0 2
68331: PPUSH
68332: CALL_OW 312
68336: IFFALSE 68347
// ComUnlink ( i ) ;
68338: LD_VAR 0 2
68342: PPUSH
68343: CALL_OW 136
68347: GO 68324
68349: POP
68350: POP
// end ;
68351: PPOPN 2
68353: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
68354: LD_EXP 61
68358: IFFALSE 68366
68360: PUSH
68361: LD_EXP 92
68365: AND
68366: IFFALSE 68506
68368: GO 68370
68370: DISABLE
68371: LD_INT 0
68373: PPUSH
68374: PPUSH
// begin ToLua ( displayPowell(); ) ;
68375: LD_STRING displayPowell();
68377: PPUSH
68378: CALL_OW 559
// uc_side := 0 ;
68382: LD_ADDR_OWVAR 20
68386: PUSH
68387: LD_INT 0
68389: ST_TO_ADDR
// uc_nation := 2 ;
68390: LD_ADDR_OWVAR 21
68394: PUSH
68395: LD_INT 2
68397: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
68398: LD_ADDR_OWVAR 37
68402: PUSH
68403: LD_INT 14
68405: ST_TO_ADDR
// vc_engine := engine_siberite ;
68406: LD_ADDR_OWVAR 39
68410: PUSH
68411: LD_INT 3
68413: ST_TO_ADDR
// vc_control := control_apeman ;
68414: LD_ADDR_OWVAR 38
68418: PUSH
68419: LD_INT 5
68421: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
68422: LD_ADDR_OWVAR 40
68426: PUSH
68427: LD_INT 29
68429: ST_TO_ADDR
// un := CreateVehicle ;
68430: LD_ADDR_VAR 0 2
68434: PUSH
68435: CALL_OW 45
68439: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68440: LD_VAR 0 2
68444: PPUSH
68445: LD_INT 1
68447: PPUSH
68448: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
68452: LD_INT 35
68454: PPUSH
68455: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
68459: LD_VAR 0 2
68463: PPUSH
68464: LD_INT 22
68466: PUSH
68467: LD_OWVAR 2
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PPUSH
68476: CALL_OW 69
68480: PPUSH
68481: LD_VAR 0 2
68485: PPUSH
68486: CALL_OW 74
68490: PPUSH
68491: CALL_OW 115
// until IsDead ( un ) ;
68495: LD_VAR 0 2
68499: PPUSH
68500: CALL_OW 301
68504: IFFALSE 68452
// end ;
68506: PPOPN 2
68508: END
// every 0 0$1 trigger StreamModeActive and sStu do
68509: LD_EXP 61
68513: IFFALSE 68521
68515: PUSH
68516: LD_EXP 100
68520: AND
68521: IFFALSE 68537
68523: GO 68525
68525: DISABLE
// begin ToLua ( displayStucuk(); ) ;
68526: LD_STRING displayStucuk();
68528: PPUSH
68529: CALL_OW 559
// ResetFog ;
68533: CALL_OW 335
// end ;
68537: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
68538: LD_EXP 61
68542: IFFALSE 68550
68544: PUSH
68545: LD_EXP 93
68549: AND
68550: IFFALSE 68691
68552: GO 68554
68554: DISABLE
68555: LD_INT 0
68557: PPUSH
68558: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68559: LD_ADDR_VAR 0 2
68563: PUSH
68564: LD_INT 22
68566: PUSH
68567: LD_OWVAR 2
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 21
68578: PUSH
68579: LD_INT 1
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PPUSH
68590: CALL_OW 69
68594: ST_TO_ADDR
// if not tmp then
68595: LD_VAR 0 2
68599: NOT
68600: IFFALSE 68604
// exit ;
68602: GO 68691
// un := tmp [ rand ( 1 , tmp ) ] ;
68604: LD_ADDR_VAR 0 1
68608: PUSH
68609: LD_VAR 0 2
68613: PUSH
68614: LD_INT 1
68616: PPUSH
68617: LD_VAR 0 2
68621: PPUSH
68622: CALL_OW 12
68626: ARRAY
68627: ST_TO_ADDR
// SetSide ( un , 0 ) ;
68628: LD_VAR 0 1
68632: PPUSH
68633: LD_INT 0
68635: PPUSH
68636: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
68640: LD_VAR 0 1
68644: PPUSH
68645: LD_OWVAR 3
68649: PUSH
68650: LD_VAR 0 1
68654: DIFF
68655: PPUSH
68656: LD_VAR 0 1
68660: PPUSH
68661: CALL_OW 74
68665: PPUSH
68666: CALL_OW 115
// wait ( 0 0$20 ) ;
68670: LD_INT 700
68672: PPUSH
68673: CALL_OW 67
// SetSide ( un , your_side ) ;
68677: LD_VAR 0 1
68681: PPUSH
68682: LD_OWVAR 2
68686: PPUSH
68687: CALL_OW 235
// end ;
68691: PPOPN 2
68693: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
68694: LD_EXP 61
68698: IFFALSE 68706
68700: PUSH
68701: LD_EXP 94
68705: AND
68706: IFFALSE 68812
68708: GO 68710
68710: DISABLE
68711: LD_INT 0
68713: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
68714: LD_ADDR_VAR 0 1
68718: PUSH
68719: LD_INT 22
68721: PUSH
68722: LD_OWVAR 2
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 2
68733: PUSH
68734: LD_INT 30
68736: PUSH
68737: LD_INT 0
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 30
68746: PUSH
68747: LD_INT 1
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: LIST
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PPUSH
68763: CALL_OW 69
68767: ST_TO_ADDR
// if not depot then
68768: LD_VAR 0 1
68772: NOT
68773: IFFALSE 68777
// exit ;
68775: GO 68812
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
68777: LD_VAR 0 1
68781: PUSH
68782: LD_INT 1
68784: ARRAY
68785: PPUSH
68786: CALL_OW 250
68790: PPUSH
68791: LD_VAR 0 1
68795: PUSH
68796: LD_INT 1
68798: ARRAY
68799: PPUSH
68800: CALL_OW 251
68804: PPUSH
68805: LD_INT 70
68807: PPUSH
68808: CALL_OW 495
// end ;
68812: PPOPN 1
68814: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
68815: LD_EXP 61
68819: IFFALSE 68827
68821: PUSH
68822: LD_EXP 95
68826: AND
68827: IFFALSE 69038
68829: GO 68831
68831: DISABLE
68832: LD_INT 0
68834: PPUSH
68835: PPUSH
68836: PPUSH
68837: PPUSH
68838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68839: LD_ADDR_VAR 0 5
68843: PUSH
68844: LD_INT 22
68846: PUSH
68847: LD_OWVAR 2
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: PUSH
68856: LD_INT 21
68858: PUSH
68859: LD_INT 1
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PPUSH
68870: CALL_OW 69
68874: ST_TO_ADDR
// if not tmp then
68875: LD_VAR 0 5
68879: NOT
68880: IFFALSE 68884
// exit ;
68882: GO 69038
// for i in tmp do
68884: LD_ADDR_VAR 0 1
68888: PUSH
68889: LD_VAR 0 5
68893: PUSH
68894: FOR_IN
68895: IFFALSE 69036
// begin d := rand ( 0 , 5 ) ;
68897: LD_ADDR_VAR 0 4
68901: PUSH
68902: LD_INT 0
68904: PPUSH
68905: LD_INT 5
68907: PPUSH
68908: CALL_OW 12
68912: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
68913: LD_ADDR_VAR 0 2
68917: PUSH
68918: LD_VAR 0 1
68922: PPUSH
68923: CALL_OW 250
68927: PPUSH
68928: LD_VAR 0 4
68932: PPUSH
68933: LD_INT 3
68935: PPUSH
68936: LD_INT 12
68938: PPUSH
68939: CALL_OW 12
68943: PPUSH
68944: CALL_OW 272
68948: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
68949: LD_ADDR_VAR 0 3
68953: PUSH
68954: LD_VAR 0 1
68958: PPUSH
68959: CALL_OW 251
68963: PPUSH
68964: LD_VAR 0 4
68968: PPUSH
68969: LD_INT 3
68971: PPUSH
68972: LD_INT 12
68974: PPUSH
68975: CALL_OW 12
68979: PPUSH
68980: CALL_OW 273
68984: ST_TO_ADDR
// if ValidHex ( x , y ) then
68985: LD_VAR 0 2
68989: PPUSH
68990: LD_VAR 0 3
68994: PPUSH
68995: CALL_OW 488
68999: IFFALSE 69034
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
69001: LD_VAR 0 1
69005: PPUSH
69006: LD_VAR 0 2
69010: PPUSH
69011: LD_VAR 0 3
69015: PPUSH
69016: LD_INT 3
69018: PPUSH
69019: LD_INT 6
69021: PPUSH
69022: CALL_OW 12
69026: PPUSH
69027: LD_INT 1
69029: PPUSH
69030: CALL_OW 483
// end ;
69034: GO 68894
69036: POP
69037: POP
// end ;
69038: PPOPN 5
69040: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
69041: LD_EXP 61
69045: IFFALSE 69053
69047: PUSH
69048: LD_EXP 96
69052: AND
69053: IFFALSE 69147
69055: GO 69057
69057: DISABLE
69058: LD_INT 0
69060: PPUSH
69061: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
69062: LD_ADDR_VAR 0 2
69066: PUSH
69067: LD_INT 22
69069: PUSH
69070: LD_OWVAR 2
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: LD_INT 32
69081: PUSH
69082: LD_INT 1
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 21
69091: PUSH
69092: LD_INT 2
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: LIST
69103: PPUSH
69104: CALL_OW 69
69108: ST_TO_ADDR
// if not tmp then
69109: LD_VAR 0 2
69113: NOT
69114: IFFALSE 69118
// exit ;
69116: GO 69147
// for i in tmp do
69118: LD_ADDR_VAR 0 1
69122: PUSH
69123: LD_VAR 0 2
69127: PUSH
69128: FOR_IN
69129: IFFALSE 69145
// SetFuel ( i , 0 ) ;
69131: LD_VAR 0 1
69135: PPUSH
69136: LD_INT 0
69138: PPUSH
69139: CALL_OW 240
69143: GO 69128
69145: POP
69146: POP
// end ;
69147: PPOPN 2
69149: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
69150: LD_EXP 61
69154: IFFALSE 69162
69156: PUSH
69157: LD_EXP 97
69161: AND
69162: IFFALSE 69228
69164: GO 69166
69166: DISABLE
69167: LD_INT 0
69169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69170: LD_ADDR_VAR 0 1
69174: PUSH
69175: LD_INT 22
69177: PUSH
69178: LD_OWVAR 2
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 30
69189: PUSH
69190: LD_INT 29
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PPUSH
69201: CALL_OW 69
69205: ST_TO_ADDR
// if not tmp then
69206: LD_VAR 0 1
69210: NOT
69211: IFFALSE 69215
// exit ;
69213: GO 69228
// DestroyUnit ( tmp [ 1 ] ) ;
69215: LD_VAR 0 1
69219: PUSH
69220: LD_INT 1
69222: ARRAY
69223: PPUSH
69224: CALL_OW 65
// end ;
69228: PPOPN 1
69230: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
69231: LD_EXP 61
69235: IFFALSE 69243
69237: PUSH
69238: LD_EXP 99
69242: AND
69243: IFFALSE 69372
69245: GO 69247
69247: DISABLE
69248: LD_INT 0
69250: PPUSH
// begin uc_side := 0 ;
69251: LD_ADDR_OWVAR 20
69255: PUSH
69256: LD_INT 0
69258: ST_TO_ADDR
// uc_nation := nation_arabian ;
69259: LD_ADDR_OWVAR 21
69263: PUSH
69264: LD_INT 2
69266: ST_TO_ADDR
// hc_gallery :=  ;
69267: LD_ADDR_OWVAR 33
69271: PUSH
69272: LD_STRING 
69274: ST_TO_ADDR
// hc_name :=  ;
69275: LD_ADDR_OWVAR 26
69279: PUSH
69280: LD_STRING 
69282: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
69283: LD_INT 1
69285: PPUSH
69286: LD_INT 11
69288: PPUSH
69289: LD_INT 10
69291: PPUSH
69292: CALL_OW 380
// un := CreateHuman ;
69296: LD_ADDR_VAR 0 1
69300: PUSH
69301: CALL_OW 44
69305: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69306: LD_VAR 0 1
69310: PPUSH
69311: LD_INT 1
69313: PPUSH
69314: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
69318: LD_INT 35
69320: PPUSH
69321: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
69325: LD_VAR 0 1
69329: PPUSH
69330: LD_INT 22
69332: PUSH
69333: LD_OWVAR 2
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PPUSH
69342: CALL_OW 69
69346: PPUSH
69347: LD_VAR 0 1
69351: PPUSH
69352: CALL_OW 74
69356: PPUSH
69357: CALL_OW 115
// until IsDead ( un ) ;
69361: LD_VAR 0 1
69365: PPUSH
69366: CALL_OW 301
69370: IFFALSE 69318
// end ;
69372: PPOPN 1
69374: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
69375: LD_EXP 61
69379: IFFALSE 69387
69381: PUSH
69382: LD_EXP 101
69386: AND
69387: IFFALSE 69399
69389: GO 69391
69391: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
69392: LD_STRING earthquake(getX(game), 0, 32)
69394: PPUSH
69395: CALL_OW 559
69399: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
69400: LD_EXP 61
69404: IFFALSE 69412
69406: PUSH
69407: LD_EXP 102
69411: AND
69412: IFFALSE 69503
69414: GO 69416
69416: DISABLE
69417: LD_INT 0
69419: PPUSH
// begin enable ;
69420: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
69421: LD_ADDR_VAR 0 1
69425: PUSH
69426: LD_INT 22
69428: PUSH
69429: LD_OWVAR 2
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 21
69440: PUSH
69441: LD_INT 2
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: LD_INT 33
69450: PUSH
69451: LD_INT 3
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: LIST
69462: PPUSH
69463: CALL_OW 69
69467: ST_TO_ADDR
// if not tmp then
69468: LD_VAR 0 1
69472: NOT
69473: IFFALSE 69477
// exit ;
69475: GO 69503
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69477: LD_VAR 0 1
69481: PUSH
69482: LD_INT 1
69484: PPUSH
69485: LD_VAR 0 1
69489: PPUSH
69490: CALL_OW 12
69494: ARRAY
69495: PPUSH
69496: LD_INT 1
69498: PPUSH
69499: CALL_OW 234
// end ;
69503: PPOPN 1
69505: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
69506: LD_EXP 61
69510: IFFALSE 69518
69512: PUSH
69513: LD_EXP 103
69517: AND
69518: IFFALSE 69659
69520: GO 69522
69522: DISABLE
69523: LD_INT 0
69525: PPUSH
69526: PPUSH
69527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69528: LD_ADDR_VAR 0 3
69532: PUSH
69533: LD_INT 22
69535: PUSH
69536: LD_OWVAR 2
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: LD_INT 25
69547: PUSH
69548: LD_INT 1
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PPUSH
69559: CALL_OW 69
69563: ST_TO_ADDR
// if not tmp then
69564: LD_VAR 0 3
69568: NOT
69569: IFFALSE 69573
// exit ;
69571: GO 69659
// un := tmp [ rand ( 1 , tmp ) ] ;
69573: LD_ADDR_VAR 0 2
69577: PUSH
69578: LD_VAR 0 3
69582: PUSH
69583: LD_INT 1
69585: PPUSH
69586: LD_VAR 0 3
69590: PPUSH
69591: CALL_OW 12
69595: ARRAY
69596: ST_TO_ADDR
// if Crawls ( un ) then
69597: LD_VAR 0 2
69601: PPUSH
69602: CALL_OW 318
69606: IFFALSE 69617
// ComWalk ( un ) ;
69608: LD_VAR 0 2
69612: PPUSH
69613: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
69617: LD_VAR 0 2
69621: PPUSH
69622: LD_INT 9
69624: PPUSH
69625: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
69629: LD_INT 28
69631: PPUSH
69632: LD_OWVAR 2
69636: PPUSH
69637: LD_INT 2
69639: PPUSH
69640: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
69644: LD_INT 29
69646: PPUSH
69647: LD_OWVAR 2
69651: PPUSH
69652: LD_INT 2
69654: PPUSH
69655: CALL_OW 322
// end ;
69659: PPOPN 3
69661: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
69662: LD_EXP 61
69666: IFFALSE 69674
69668: PUSH
69669: LD_EXP 104
69673: AND
69674: IFFALSE 69785
69676: GO 69678
69678: DISABLE
69679: LD_INT 0
69681: PPUSH
69682: PPUSH
69683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69684: LD_ADDR_VAR 0 3
69688: PUSH
69689: LD_INT 22
69691: PUSH
69692: LD_OWVAR 2
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: LD_INT 25
69703: PUSH
69704: LD_INT 1
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PPUSH
69715: CALL_OW 69
69719: ST_TO_ADDR
// if not tmp then
69720: LD_VAR 0 3
69724: NOT
69725: IFFALSE 69729
// exit ;
69727: GO 69785
// un := tmp [ rand ( 1 , tmp ) ] ;
69729: LD_ADDR_VAR 0 2
69733: PUSH
69734: LD_VAR 0 3
69738: PUSH
69739: LD_INT 1
69741: PPUSH
69742: LD_VAR 0 3
69746: PPUSH
69747: CALL_OW 12
69751: ARRAY
69752: ST_TO_ADDR
// if Crawls ( un ) then
69753: LD_VAR 0 2
69757: PPUSH
69758: CALL_OW 318
69762: IFFALSE 69773
// ComWalk ( un ) ;
69764: LD_VAR 0 2
69768: PPUSH
69769: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69773: LD_VAR 0 2
69777: PPUSH
69778: LD_INT 8
69780: PPUSH
69781: CALL_OW 336
// end ;
69785: PPOPN 3
69787: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
69788: LD_EXP 61
69792: IFFALSE 69800
69794: PUSH
69795: LD_EXP 105
69799: AND
69800: IFFALSE 69944
69802: GO 69804
69804: DISABLE
69805: LD_INT 0
69807: PPUSH
69808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
69809: LD_ADDR_VAR 0 2
69813: PUSH
69814: LD_INT 22
69816: PUSH
69817: LD_OWVAR 2
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 21
69828: PUSH
69829: LD_INT 2
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PUSH
69836: LD_INT 2
69838: PUSH
69839: LD_INT 34
69841: PUSH
69842: LD_INT 12
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_INT 34
69851: PUSH
69852: LD_INT 51
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PUSH
69859: LD_INT 34
69861: PUSH
69862: LD_INT 32
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: LIST
69873: LIST
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: LIST
69879: PPUSH
69880: CALL_OW 69
69884: ST_TO_ADDR
// if not tmp then
69885: LD_VAR 0 2
69889: NOT
69890: IFFALSE 69894
// exit ;
69892: GO 69944
// for i in tmp do
69894: LD_ADDR_VAR 0 1
69898: PUSH
69899: LD_VAR 0 2
69903: PUSH
69904: FOR_IN
69905: IFFALSE 69942
// if GetCargo ( i , mat_artifact ) = 0 then
69907: LD_VAR 0 1
69911: PPUSH
69912: LD_INT 4
69914: PPUSH
69915: CALL_OW 289
69919: PUSH
69920: LD_INT 0
69922: EQUAL
69923: IFFALSE 69940
// SetCargo ( i , mat_siberit , 100 ) ;
69925: LD_VAR 0 1
69929: PPUSH
69930: LD_INT 3
69932: PPUSH
69933: LD_INT 100
69935: PPUSH
69936: CALL_OW 290
69940: GO 69904
69942: POP
69943: POP
// end ;
69944: PPOPN 2
69946: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
69947: LD_EXP 61
69951: IFFALSE 69959
69953: PUSH
69954: LD_EXP 106
69958: AND
69959: IFFALSE 70142
69961: GO 69963
69963: DISABLE
69964: LD_INT 0
69966: PPUSH
69967: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69968: LD_ADDR_VAR 0 2
69972: PUSH
69973: LD_INT 22
69975: PUSH
69976: LD_OWVAR 2
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PPUSH
69985: CALL_OW 69
69989: ST_TO_ADDR
// if not tmp then
69990: LD_VAR 0 2
69994: NOT
69995: IFFALSE 69999
// exit ;
69997: GO 70142
// for i := 1 to 2 do
69999: LD_ADDR_VAR 0 1
70003: PUSH
70004: DOUBLE
70005: LD_INT 1
70007: DEC
70008: ST_TO_ADDR
70009: LD_INT 2
70011: PUSH
70012: FOR_TO
70013: IFFALSE 70140
// begin uc_side := your_side ;
70015: LD_ADDR_OWVAR 20
70019: PUSH
70020: LD_OWVAR 2
70024: ST_TO_ADDR
// uc_nation := nation_american ;
70025: LD_ADDR_OWVAR 21
70029: PUSH
70030: LD_INT 1
70032: ST_TO_ADDR
// vc_chassis := us_morphling ;
70033: LD_ADDR_OWVAR 37
70037: PUSH
70038: LD_INT 5
70040: ST_TO_ADDR
// vc_engine := engine_siberite ;
70041: LD_ADDR_OWVAR 39
70045: PUSH
70046: LD_INT 3
70048: ST_TO_ADDR
// vc_control := control_computer ;
70049: LD_ADDR_OWVAR 38
70053: PUSH
70054: LD_INT 3
70056: ST_TO_ADDR
// vc_weapon := us_double_laser ;
70057: LD_ADDR_OWVAR 40
70061: PUSH
70062: LD_INT 10
70064: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
70065: LD_VAR 0 2
70069: PUSH
70070: LD_INT 1
70072: ARRAY
70073: PPUSH
70074: CALL_OW 310
70078: NOT
70079: IFFALSE 70126
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
70081: CALL_OW 45
70085: PPUSH
70086: LD_VAR 0 2
70090: PUSH
70091: LD_INT 1
70093: ARRAY
70094: PPUSH
70095: CALL_OW 250
70099: PPUSH
70100: LD_VAR 0 2
70104: PUSH
70105: LD_INT 1
70107: ARRAY
70108: PPUSH
70109: CALL_OW 251
70113: PPUSH
70114: LD_INT 12
70116: PPUSH
70117: LD_INT 1
70119: PPUSH
70120: CALL_OW 50
70124: GO 70138
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
70126: CALL_OW 45
70130: PPUSH
70131: LD_INT 1
70133: PPUSH
70134: CALL_OW 51
// end ;
70138: GO 70012
70140: POP
70141: POP
// end ;
70142: PPOPN 2
70144: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
70145: LD_EXP 61
70149: IFFALSE 70157
70151: PUSH
70152: LD_EXP 107
70156: AND
70157: IFFALSE 70379
70159: GO 70161
70161: DISABLE
70162: LD_INT 0
70164: PPUSH
70165: PPUSH
70166: PPUSH
70167: PPUSH
70168: PPUSH
70169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70170: LD_ADDR_VAR 0 6
70174: PUSH
70175: LD_INT 22
70177: PUSH
70178: LD_OWVAR 2
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 21
70189: PUSH
70190: LD_INT 1
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 3
70199: PUSH
70200: LD_INT 23
70202: PUSH
70203: LD_INT 0
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: LIST
70218: PPUSH
70219: CALL_OW 69
70223: ST_TO_ADDR
// if not tmp then
70224: LD_VAR 0 6
70228: NOT
70229: IFFALSE 70233
// exit ;
70231: GO 70379
// s1 := rand ( 1 , 4 ) ;
70233: LD_ADDR_VAR 0 2
70237: PUSH
70238: LD_INT 1
70240: PPUSH
70241: LD_INT 4
70243: PPUSH
70244: CALL_OW 12
70248: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
70249: LD_ADDR_VAR 0 4
70253: PUSH
70254: LD_VAR 0 6
70258: PUSH
70259: LD_INT 1
70261: ARRAY
70262: PPUSH
70263: LD_VAR 0 2
70267: PPUSH
70268: CALL_OW 259
70272: ST_TO_ADDR
// if s1 = 1 then
70273: LD_VAR 0 2
70277: PUSH
70278: LD_INT 1
70280: EQUAL
70281: IFFALSE 70301
// s2 := rand ( 2 , 4 ) else
70283: LD_ADDR_VAR 0 3
70287: PUSH
70288: LD_INT 2
70290: PPUSH
70291: LD_INT 4
70293: PPUSH
70294: CALL_OW 12
70298: ST_TO_ADDR
70299: GO 70309
// s2 := 1 ;
70301: LD_ADDR_VAR 0 3
70305: PUSH
70306: LD_INT 1
70308: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
70309: LD_ADDR_VAR 0 5
70313: PUSH
70314: LD_VAR 0 6
70318: PUSH
70319: LD_INT 1
70321: ARRAY
70322: PPUSH
70323: LD_VAR 0 3
70327: PPUSH
70328: CALL_OW 259
70332: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
70333: LD_VAR 0 6
70337: PUSH
70338: LD_INT 1
70340: ARRAY
70341: PPUSH
70342: LD_VAR 0 2
70346: PPUSH
70347: LD_VAR 0 5
70351: PPUSH
70352: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
70356: LD_VAR 0 6
70360: PUSH
70361: LD_INT 1
70363: ARRAY
70364: PPUSH
70365: LD_VAR 0 3
70369: PPUSH
70370: LD_VAR 0 4
70374: PPUSH
70375: CALL_OW 237
// end ;
70379: PPOPN 6
70381: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
70382: LD_EXP 61
70386: IFFALSE 70394
70388: PUSH
70389: LD_EXP 108
70393: AND
70394: IFFALSE 70473
70396: GO 70398
70398: DISABLE
70399: LD_INT 0
70401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
70402: LD_ADDR_VAR 0 1
70406: PUSH
70407: LD_INT 22
70409: PUSH
70410: LD_OWVAR 2
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: LD_INT 30
70421: PUSH
70422: LD_INT 3
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PPUSH
70433: CALL_OW 69
70437: ST_TO_ADDR
// if not tmp then
70438: LD_VAR 0 1
70442: NOT
70443: IFFALSE 70447
// exit ;
70445: GO 70473
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
70447: LD_VAR 0 1
70451: PUSH
70452: LD_INT 1
70454: PPUSH
70455: LD_VAR 0 1
70459: PPUSH
70460: CALL_OW 12
70464: ARRAY
70465: PPUSH
70466: LD_INT 1
70468: PPUSH
70469: CALL_OW 234
// end ;
70473: PPOPN 1
70475: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
70476: LD_EXP 61
70480: IFFALSE 70488
70482: PUSH
70483: LD_EXP 109
70487: AND
70488: IFFALSE 70600
70490: GO 70492
70492: DISABLE
70493: LD_INT 0
70495: PPUSH
70496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
70497: LD_ADDR_VAR 0 2
70501: PUSH
70502: LD_INT 22
70504: PUSH
70505: LD_OWVAR 2
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: PUSH
70514: LD_INT 2
70516: PUSH
70517: LD_INT 30
70519: PUSH
70520: LD_INT 27
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: PUSH
70527: LD_INT 30
70529: PUSH
70530: LD_INT 26
70532: PUSH
70533: EMPTY
70534: LIST
70535: LIST
70536: PUSH
70537: LD_INT 30
70539: PUSH
70540: LD_INT 28
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: LIST
70551: LIST
70552: PUSH
70553: EMPTY
70554: LIST
70555: LIST
70556: PPUSH
70557: CALL_OW 69
70561: ST_TO_ADDR
// if not tmp then
70562: LD_VAR 0 2
70566: NOT
70567: IFFALSE 70571
// exit ;
70569: GO 70600
// for i in tmp do
70571: LD_ADDR_VAR 0 1
70575: PUSH
70576: LD_VAR 0 2
70580: PUSH
70581: FOR_IN
70582: IFFALSE 70598
// SetLives ( i , 1 ) ;
70584: LD_VAR 0 1
70588: PPUSH
70589: LD_INT 1
70591: PPUSH
70592: CALL_OW 234
70596: GO 70581
70598: POP
70599: POP
// end ;
70600: PPOPN 2
70602: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
70603: LD_EXP 61
70607: IFFALSE 70615
70609: PUSH
70610: LD_EXP 110
70614: AND
70615: IFFALSE 70902
70617: GO 70619
70619: DISABLE
70620: LD_INT 0
70622: PPUSH
70623: PPUSH
70624: PPUSH
// begin i := rand ( 1 , 7 ) ;
70625: LD_ADDR_VAR 0 1
70629: PUSH
70630: LD_INT 1
70632: PPUSH
70633: LD_INT 7
70635: PPUSH
70636: CALL_OW 12
70640: ST_TO_ADDR
// case i of 1 :
70641: LD_VAR 0 1
70645: PUSH
70646: LD_INT 1
70648: DOUBLE
70649: EQUAL
70650: IFTRUE 70654
70652: GO 70664
70654: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
70655: LD_STRING earthquake(getX(game), 0, 32)
70657: PPUSH
70658: CALL_OW 559
70662: GO 70902
70664: LD_INT 2
70666: DOUBLE
70667: EQUAL
70668: IFTRUE 70672
70670: GO 70686
70672: POP
// begin ToLua ( displayStucuk(); ) ;
70673: LD_STRING displayStucuk();
70675: PPUSH
70676: CALL_OW 559
// ResetFog ;
70680: CALL_OW 335
// end ; 3 :
70684: GO 70902
70686: LD_INT 3
70688: DOUBLE
70689: EQUAL
70690: IFTRUE 70694
70692: GO 70798
70694: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70695: LD_ADDR_VAR 0 2
70699: PUSH
70700: LD_INT 22
70702: PUSH
70703: LD_OWVAR 2
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 25
70714: PUSH
70715: LD_INT 1
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: PUSH
70722: EMPTY
70723: LIST
70724: LIST
70725: PPUSH
70726: CALL_OW 69
70730: ST_TO_ADDR
// if not tmp then
70731: LD_VAR 0 2
70735: NOT
70736: IFFALSE 70740
// exit ;
70738: GO 70902
// un := tmp [ rand ( 1 , tmp ) ] ;
70740: LD_ADDR_VAR 0 3
70744: PUSH
70745: LD_VAR 0 2
70749: PUSH
70750: LD_INT 1
70752: PPUSH
70753: LD_VAR 0 2
70757: PPUSH
70758: CALL_OW 12
70762: ARRAY
70763: ST_TO_ADDR
// if Crawls ( un ) then
70764: LD_VAR 0 3
70768: PPUSH
70769: CALL_OW 318
70773: IFFALSE 70784
// ComWalk ( un ) ;
70775: LD_VAR 0 3
70779: PPUSH
70780: CALL_OW 138
// SetClass ( un , class_mortar ) ;
70784: LD_VAR 0 3
70788: PPUSH
70789: LD_INT 8
70791: PPUSH
70792: CALL_OW 336
// end ; 4 :
70796: GO 70902
70798: LD_INT 4
70800: DOUBLE
70801: EQUAL
70802: IFTRUE 70806
70804: GO 70880
70806: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
70807: LD_ADDR_VAR 0 2
70811: PUSH
70812: LD_INT 22
70814: PUSH
70815: LD_OWVAR 2
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: LD_INT 30
70826: PUSH
70827: LD_INT 29
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: PPUSH
70838: CALL_OW 69
70842: ST_TO_ADDR
// if not tmp then
70843: LD_VAR 0 2
70847: NOT
70848: IFFALSE 70852
// exit ;
70850: GO 70902
// CenterNowOnUnits ( tmp [ 1 ] ) ;
70852: LD_VAR 0 2
70856: PUSH
70857: LD_INT 1
70859: ARRAY
70860: PPUSH
70861: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
70865: LD_VAR 0 2
70869: PUSH
70870: LD_INT 1
70872: ARRAY
70873: PPUSH
70874: CALL_OW 65
// end ; 5 .. 7 :
70878: GO 70902
70880: LD_INT 5
70882: DOUBLE
70883: GREATEREQUAL
70884: IFFALSE 70892
70886: LD_INT 7
70888: DOUBLE
70889: LESSEQUAL
70890: IFTRUE 70894
70892: GO 70901
70894: POP
// StreamSibBomb ; end ;
70895: CALL 67083 0 0
70899: GO 70902
70901: POP
// end ;
70902: PPOPN 3
70904: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
70905: LD_EXP 61
70909: IFFALSE 70917
70911: PUSH
70912: LD_EXP 111
70916: AND
70917: IFFALSE 71073
70919: GO 70921
70921: DISABLE
70922: LD_INT 0
70924: PPUSH
70925: PPUSH
70926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
70927: LD_ADDR_VAR 0 2
70931: PUSH
70932: LD_INT 81
70934: PUSH
70935: LD_OWVAR 2
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PUSH
70944: LD_INT 2
70946: PUSH
70947: LD_INT 21
70949: PUSH
70950: LD_INT 1
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: PUSH
70957: LD_INT 21
70959: PUSH
70960: LD_INT 2
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PUSH
70967: EMPTY
70968: LIST
70969: LIST
70970: LIST
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PPUSH
70976: CALL_OW 69
70980: ST_TO_ADDR
// if not tmp then
70981: LD_VAR 0 2
70985: NOT
70986: IFFALSE 70990
// exit ;
70988: GO 71073
// p := 0 ;
70990: LD_ADDR_VAR 0 3
70994: PUSH
70995: LD_INT 0
70997: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70998: LD_INT 35
71000: PPUSH
71001: CALL_OW 67
// p := p + 1 ;
71005: LD_ADDR_VAR 0 3
71009: PUSH
71010: LD_VAR 0 3
71014: PUSH
71015: LD_INT 1
71017: PLUS
71018: ST_TO_ADDR
// for i in tmp do
71019: LD_ADDR_VAR 0 1
71023: PUSH
71024: LD_VAR 0 2
71028: PUSH
71029: FOR_IN
71030: IFFALSE 71061
// if GetLives ( i ) < 1000 then
71032: LD_VAR 0 1
71036: PPUSH
71037: CALL_OW 256
71041: PUSH
71042: LD_INT 1000
71044: LESS
71045: IFFALSE 71059
// SetLives ( i , 1000 ) ;
71047: LD_VAR 0 1
71051: PPUSH
71052: LD_INT 1000
71054: PPUSH
71055: CALL_OW 234
71059: GO 71029
71061: POP
71062: POP
// until p > 20 ;
71063: LD_VAR 0 3
71067: PUSH
71068: LD_INT 20
71070: GREATER
71071: IFFALSE 70998
// end ;
71073: PPOPN 3
71075: END
// every 0 0$1 trigger StreamModeActive and sTime do
71076: LD_EXP 61
71080: IFFALSE 71088
71082: PUSH
71083: LD_EXP 112
71087: AND
71088: IFFALSE 71123
71090: GO 71092
71092: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
71093: LD_INT 28
71095: PPUSH
71096: LD_OWVAR 2
71100: PPUSH
71101: LD_INT 2
71103: PPUSH
71104: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
71108: LD_INT 30
71110: PPUSH
71111: LD_OWVAR 2
71115: PPUSH
71116: LD_INT 2
71118: PPUSH
71119: CALL_OW 322
// end ;
71123: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
71124: LD_EXP 61
71128: IFFALSE 71136
71130: PUSH
71131: LD_EXP 113
71135: AND
71136: IFFALSE 71257
71138: GO 71140
71140: DISABLE
71141: LD_INT 0
71143: PPUSH
71144: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71145: LD_ADDR_VAR 0 2
71149: PUSH
71150: LD_INT 22
71152: PUSH
71153: LD_OWVAR 2
71157: PUSH
71158: EMPTY
71159: LIST
71160: LIST
71161: PUSH
71162: LD_INT 21
71164: PUSH
71165: LD_INT 1
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: PUSH
71172: LD_INT 3
71174: PUSH
71175: LD_INT 23
71177: PUSH
71178: LD_INT 0
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: PUSH
71185: EMPTY
71186: LIST
71187: LIST
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: LIST
71193: PPUSH
71194: CALL_OW 69
71198: ST_TO_ADDR
// if not tmp then
71199: LD_VAR 0 2
71203: NOT
71204: IFFALSE 71208
// exit ;
71206: GO 71257
// for i in tmp do
71208: LD_ADDR_VAR 0 1
71212: PUSH
71213: LD_VAR 0 2
71217: PUSH
71218: FOR_IN
71219: IFFALSE 71255
// begin if Crawls ( i ) then
71221: LD_VAR 0 1
71225: PPUSH
71226: CALL_OW 318
71230: IFFALSE 71241
// ComWalk ( i ) ;
71232: LD_VAR 0 1
71236: PPUSH
71237: CALL_OW 138
// SetClass ( i , 2 ) ;
71241: LD_VAR 0 1
71245: PPUSH
71246: LD_INT 2
71248: PPUSH
71249: CALL_OW 336
// end ;
71253: GO 71218
71255: POP
71256: POP
// end ;
71257: PPOPN 2
71259: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
71260: LD_EXP 61
71264: IFFALSE 71272
71266: PUSH
71267: LD_EXP 114
71271: AND
71272: IFFALSE 71562
71274: GO 71276
71276: DISABLE
71277: LD_INT 0
71279: PPUSH
71280: PPUSH
71281: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
71282: LD_OWVAR 2
71286: PPUSH
71287: LD_INT 9
71289: PPUSH
71290: LD_INT 1
71292: PPUSH
71293: LD_INT 1
71295: PPUSH
71296: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
71300: LD_INT 9
71302: PPUSH
71303: LD_OWVAR 2
71307: PPUSH
71308: CALL_OW 343
// uc_side := 9 ;
71312: LD_ADDR_OWVAR 20
71316: PUSH
71317: LD_INT 9
71319: ST_TO_ADDR
// uc_nation := 2 ;
71320: LD_ADDR_OWVAR 21
71324: PUSH
71325: LD_INT 2
71327: ST_TO_ADDR
// hc_name := Dark Warrior ;
71328: LD_ADDR_OWVAR 26
71332: PUSH
71333: LD_STRING Dark Warrior
71335: ST_TO_ADDR
// hc_gallery :=  ;
71336: LD_ADDR_OWVAR 33
71340: PUSH
71341: LD_STRING 
71343: ST_TO_ADDR
// hc_noskilllimit := true ;
71344: LD_ADDR_OWVAR 76
71348: PUSH
71349: LD_INT 1
71351: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
71352: LD_ADDR_OWVAR 31
71356: PUSH
71357: LD_INT 30
71359: PUSH
71360: LD_INT 30
71362: PUSH
71363: LD_INT 30
71365: PUSH
71366: LD_INT 30
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: LIST
71373: LIST
71374: ST_TO_ADDR
// un := CreateHuman ;
71375: LD_ADDR_VAR 0 3
71379: PUSH
71380: CALL_OW 44
71384: ST_TO_ADDR
// hc_noskilllimit := false ;
71385: LD_ADDR_OWVAR 76
71389: PUSH
71390: LD_INT 0
71392: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71393: LD_VAR 0 3
71397: PPUSH
71398: LD_INT 1
71400: PPUSH
71401: CALL_OW 51
// ToLua ( playRanger() ) ;
71405: LD_STRING playRanger()
71407: PPUSH
71408: CALL_OW 559
// p := 0 ;
71412: LD_ADDR_VAR 0 2
71416: PUSH
71417: LD_INT 0
71419: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
71420: LD_INT 35
71422: PPUSH
71423: CALL_OW 67
// p := p + 1 ;
71427: LD_ADDR_VAR 0 2
71431: PUSH
71432: LD_VAR 0 2
71436: PUSH
71437: LD_INT 1
71439: PLUS
71440: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
71441: LD_VAR 0 3
71445: PPUSH
71446: CALL_OW 256
71450: PUSH
71451: LD_INT 1000
71453: LESS
71454: IFFALSE 71468
// SetLives ( un , 1000 ) ;
71456: LD_VAR 0 3
71460: PPUSH
71461: LD_INT 1000
71463: PPUSH
71464: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
71468: LD_VAR 0 3
71472: PPUSH
71473: LD_INT 81
71475: PUSH
71476: LD_OWVAR 2
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: PUSH
71485: LD_INT 91
71487: PUSH
71488: LD_VAR 0 3
71492: PUSH
71493: LD_INT 30
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: LIST
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PPUSH
71505: CALL_OW 69
71509: PPUSH
71510: LD_VAR 0 3
71514: PPUSH
71515: CALL_OW 74
71519: PPUSH
71520: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
71524: LD_VAR 0 2
71528: PUSH
71529: LD_INT 80
71531: GREATER
71532: IFTRUE 71545
71534: PUSH
71535: LD_VAR 0 3
71539: PPUSH
71540: CALL_OW 301
71544: OR
71545: IFFALSE 71420
// if un then
71547: LD_VAR 0 3
71551: IFFALSE 71562
// RemoveUnit ( un ) ;
71553: LD_VAR 0 3
71557: PPUSH
71558: CALL_OW 64
// end ;
71562: PPOPN 3
71564: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
71565: LD_EXP 115
71569: IFFALSE 71685
71571: GO 71573
71573: DISABLE
71574: LD_INT 0
71576: PPUSH
71577: PPUSH
71578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
71579: LD_ADDR_VAR 0 2
71583: PUSH
71584: LD_INT 81
71586: PUSH
71587: LD_OWVAR 2
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: PUSH
71596: LD_INT 21
71598: PUSH
71599: LD_INT 1
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PUSH
71606: EMPTY
71607: LIST
71608: LIST
71609: PPUSH
71610: CALL_OW 69
71614: ST_TO_ADDR
// ToLua ( playComputer() ) ;
71615: LD_STRING playComputer()
71617: PPUSH
71618: CALL_OW 559
// if not tmp then
71622: LD_VAR 0 2
71626: NOT
71627: IFFALSE 71631
// exit ;
71629: GO 71685
// for i in tmp do
71631: LD_ADDR_VAR 0 1
71635: PUSH
71636: LD_VAR 0 2
71640: PUSH
71641: FOR_IN
71642: IFFALSE 71683
// for j := 1 to 4 do
71644: LD_ADDR_VAR 0 3
71648: PUSH
71649: DOUBLE
71650: LD_INT 1
71652: DEC
71653: ST_TO_ADDR
71654: LD_INT 4
71656: PUSH
71657: FOR_TO
71658: IFFALSE 71679
// SetSkill ( i , j , 10 ) ;
71660: LD_VAR 0 1
71664: PPUSH
71665: LD_VAR 0 3
71669: PPUSH
71670: LD_INT 10
71672: PPUSH
71673: CALL_OW 237
71677: GO 71657
71679: POP
71680: POP
71681: GO 71641
71683: POP
71684: POP
// end ;
71685: PPOPN 3
71687: END
// every 0 0$1 trigger s30 do var i , tmp ;
71688: LD_EXP 116
71692: IFFALSE 71761
71694: GO 71696
71696: DISABLE
71697: LD_INT 0
71699: PPUSH
71700: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71701: LD_ADDR_VAR 0 2
71705: PUSH
71706: LD_INT 22
71708: PUSH
71709: LD_OWVAR 2
71713: PUSH
71714: EMPTY
71715: LIST
71716: LIST
71717: PPUSH
71718: CALL_OW 69
71722: ST_TO_ADDR
// if not tmp then
71723: LD_VAR 0 2
71727: NOT
71728: IFFALSE 71732
// exit ;
71730: GO 71761
// for i in tmp do
71732: LD_ADDR_VAR 0 1
71736: PUSH
71737: LD_VAR 0 2
71741: PUSH
71742: FOR_IN
71743: IFFALSE 71759
// SetLives ( i , 300 ) ;
71745: LD_VAR 0 1
71749: PPUSH
71750: LD_INT 300
71752: PPUSH
71753: CALL_OW 234
71757: GO 71742
71759: POP
71760: POP
// end ;
71761: PPOPN 2
71763: END
// every 0 0$1 trigger s60 do var i , tmp ;
71764: LD_EXP 117
71768: IFFALSE 71837
71770: GO 71772
71772: DISABLE
71773: LD_INT 0
71775: PPUSH
71776: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71777: LD_ADDR_VAR 0 2
71781: PUSH
71782: LD_INT 22
71784: PUSH
71785: LD_OWVAR 2
71789: PUSH
71790: EMPTY
71791: LIST
71792: LIST
71793: PPUSH
71794: CALL_OW 69
71798: ST_TO_ADDR
// if not tmp then
71799: LD_VAR 0 2
71803: NOT
71804: IFFALSE 71808
// exit ;
71806: GO 71837
// for i in tmp do
71808: LD_ADDR_VAR 0 1
71812: PUSH
71813: LD_VAR 0 2
71817: PUSH
71818: FOR_IN
71819: IFFALSE 71835
// SetLives ( i , 600 ) ;
71821: LD_VAR 0 1
71825: PPUSH
71826: LD_INT 600
71828: PPUSH
71829: CALL_OW 234
71833: GO 71818
71835: POP
71836: POP
// end ;
71837: PPOPN 2
71839: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
71840: LD_INT 0
71842: PPUSH
// case cmd of 301 :
71843: LD_VAR 0 1
71847: PUSH
71848: LD_INT 301
71850: DOUBLE
71851: EQUAL
71852: IFTRUE 71856
71854: GO 71888
71856: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
71857: LD_VAR 0 6
71861: PPUSH
71862: LD_VAR 0 7
71866: PPUSH
71867: LD_VAR 0 8
71871: PPUSH
71872: LD_VAR 0 4
71876: PPUSH
71877: LD_VAR 0 5
71881: PPUSH
71882: CALL 73101 0 5
71886: GO 72009
71888: LD_INT 302
71890: DOUBLE
71891: EQUAL
71892: IFTRUE 71896
71894: GO 71933
71896: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
71897: LD_VAR 0 6
71901: PPUSH
71902: LD_VAR 0 7
71906: PPUSH
71907: LD_VAR 0 8
71911: PPUSH
71912: LD_VAR 0 9
71916: PPUSH
71917: LD_VAR 0 4
71921: PPUSH
71922: LD_VAR 0 5
71926: PPUSH
71927: CALL 73192 0 6
71931: GO 72009
71933: LD_INT 303
71935: DOUBLE
71936: EQUAL
71937: IFTRUE 71941
71939: GO 71978
71941: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
71942: LD_VAR 0 6
71946: PPUSH
71947: LD_VAR 0 7
71951: PPUSH
71952: LD_VAR 0 8
71956: PPUSH
71957: LD_VAR 0 9
71961: PPUSH
71962: LD_VAR 0 4
71966: PPUSH
71967: LD_VAR 0 5
71971: PPUSH
71972: CALL 72014 0 6
71976: GO 72009
71978: LD_INT 304
71980: DOUBLE
71981: EQUAL
71982: IFTRUE 71986
71984: GO 72008
71986: POP
// hHackTeleport ( unit , x , y ) ; end ;
71987: LD_VAR 0 2
71991: PPUSH
71992: LD_VAR 0 4
71996: PPUSH
71997: LD_VAR 0 5
72001: PPUSH
72002: CALL 73785 0 3
72006: GO 72009
72008: POP
// end ;
72009: LD_VAR 0 12
72013: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
72014: LD_INT 0
72016: PPUSH
72017: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
72018: LD_VAR 0 1
72022: PUSH
72023: LD_INT 1
72025: LESS
72026: IFTRUE 72038
72028: PUSH
72029: LD_VAR 0 1
72033: PUSH
72034: LD_INT 3
72036: GREATER
72037: OR
72038: IFTRUE 72056
72040: PUSH
72041: LD_VAR 0 5
72045: PPUSH
72046: LD_VAR 0 6
72050: PPUSH
72051: CALL_OW 428
72055: OR
72056: IFFALSE 72060
// exit ;
72058: GO 72788
// uc_side := your_side ;
72060: LD_ADDR_OWVAR 20
72064: PUSH
72065: LD_OWVAR 2
72069: ST_TO_ADDR
// uc_nation := nation ;
72070: LD_ADDR_OWVAR 21
72074: PUSH
72075: LD_VAR 0 1
72079: ST_TO_ADDR
// bc_level = 1 ;
72080: LD_ADDR_OWVAR 43
72084: PUSH
72085: LD_INT 1
72087: ST_TO_ADDR
// case btype of 1 :
72088: LD_VAR 0 2
72092: PUSH
72093: LD_INT 1
72095: DOUBLE
72096: EQUAL
72097: IFTRUE 72101
72099: GO 72112
72101: POP
// bc_type := b_depot ; 2 :
72102: LD_ADDR_OWVAR 42
72106: PUSH
72107: LD_INT 0
72109: ST_TO_ADDR
72110: GO 72732
72112: LD_INT 2
72114: DOUBLE
72115: EQUAL
72116: IFTRUE 72120
72118: GO 72131
72120: POP
// bc_type := b_warehouse ; 3 :
72121: LD_ADDR_OWVAR 42
72125: PUSH
72126: LD_INT 1
72128: ST_TO_ADDR
72129: GO 72732
72131: LD_INT 3
72133: DOUBLE
72134: EQUAL
72135: IFTRUE 72139
72137: GO 72150
72139: POP
// bc_type := b_lab ; 4 .. 9 :
72140: LD_ADDR_OWVAR 42
72144: PUSH
72145: LD_INT 6
72147: ST_TO_ADDR
72148: GO 72732
72150: LD_INT 4
72152: DOUBLE
72153: GREATEREQUAL
72154: IFFALSE 72162
72156: LD_INT 9
72158: DOUBLE
72159: LESSEQUAL
72160: IFTRUE 72164
72162: GO 72224
72164: POP
// begin bc_type := b_lab_half ;
72165: LD_ADDR_OWVAR 42
72169: PUSH
72170: LD_INT 7
72172: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
72173: LD_ADDR_OWVAR 44
72177: PUSH
72178: LD_INT 10
72180: PUSH
72181: LD_INT 11
72183: PUSH
72184: LD_INT 12
72186: PUSH
72187: LD_INT 15
72189: PUSH
72190: LD_INT 14
72192: PUSH
72193: LD_INT 13
72195: PUSH
72196: EMPTY
72197: LIST
72198: LIST
72199: LIST
72200: LIST
72201: LIST
72202: LIST
72203: PUSH
72204: LD_VAR 0 2
72208: PUSH
72209: LD_INT 3
72211: MINUS
72212: ARRAY
72213: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
72214: LD_ADDR_OWVAR 45
72218: PUSH
72219: LD_INT 9
72221: ST_TO_ADDR
// end ; 10 .. 13 :
72222: GO 72732
72224: LD_INT 10
72226: DOUBLE
72227: GREATEREQUAL
72228: IFFALSE 72236
72230: LD_INT 13
72232: DOUBLE
72233: LESSEQUAL
72234: IFTRUE 72238
72236: GO 72315
72238: POP
// begin bc_type := b_lab_full ;
72239: LD_ADDR_OWVAR 42
72243: PUSH
72244: LD_INT 8
72246: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
72247: LD_ADDR_OWVAR 44
72251: PUSH
72252: LD_INT 10
72254: PUSH
72255: LD_INT 12
72257: PUSH
72258: LD_INT 14
72260: PUSH
72261: LD_INT 13
72263: PUSH
72264: EMPTY
72265: LIST
72266: LIST
72267: LIST
72268: LIST
72269: PUSH
72270: LD_VAR 0 2
72274: PUSH
72275: LD_INT 9
72277: MINUS
72278: ARRAY
72279: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
72280: LD_ADDR_OWVAR 45
72284: PUSH
72285: LD_INT 11
72287: PUSH
72288: LD_INT 15
72290: PUSH
72291: LD_INT 12
72293: PUSH
72294: LD_INT 15
72296: PUSH
72297: EMPTY
72298: LIST
72299: LIST
72300: LIST
72301: LIST
72302: PUSH
72303: LD_VAR 0 2
72307: PUSH
72308: LD_INT 9
72310: MINUS
72311: ARRAY
72312: ST_TO_ADDR
// end ; 14 :
72313: GO 72732
72315: LD_INT 14
72317: DOUBLE
72318: EQUAL
72319: IFTRUE 72323
72321: GO 72334
72323: POP
// bc_type := b_workshop ; 15 :
72324: LD_ADDR_OWVAR 42
72328: PUSH
72329: LD_INT 2
72331: ST_TO_ADDR
72332: GO 72732
72334: LD_INT 15
72336: DOUBLE
72337: EQUAL
72338: IFTRUE 72342
72340: GO 72353
72342: POP
// bc_type := b_factory ; 16 :
72343: LD_ADDR_OWVAR 42
72347: PUSH
72348: LD_INT 3
72350: ST_TO_ADDR
72351: GO 72732
72353: LD_INT 16
72355: DOUBLE
72356: EQUAL
72357: IFTRUE 72361
72359: GO 72372
72361: POP
// bc_type := b_ext_gun ; 17 :
72362: LD_ADDR_OWVAR 42
72366: PUSH
72367: LD_INT 17
72369: ST_TO_ADDR
72370: GO 72732
72372: LD_INT 17
72374: DOUBLE
72375: EQUAL
72376: IFTRUE 72380
72378: GO 72408
72380: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
72381: LD_ADDR_OWVAR 42
72385: PUSH
72386: LD_INT 19
72388: PUSH
72389: LD_INT 23
72391: PUSH
72392: LD_INT 19
72394: PUSH
72395: EMPTY
72396: LIST
72397: LIST
72398: LIST
72399: PUSH
72400: LD_VAR 0 1
72404: ARRAY
72405: ST_TO_ADDR
72406: GO 72732
72408: LD_INT 18
72410: DOUBLE
72411: EQUAL
72412: IFTRUE 72416
72414: GO 72427
72416: POP
// bc_type := b_ext_radar ; 19 :
72417: LD_ADDR_OWVAR 42
72421: PUSH
72422: LD_INT 20
72424: ST_TO_ADDR
72425: GO 72732
72427: LD_INT 19
72429: DOUBLE
72430: EQUAL
72431: IFTRUE 72435
72433: GO 72446
72435: POP
// bc_type := b_ext_radio ; 20 :
72436: LD_ADDR_OWVAR 42
72440: PUSH
72441: LD_INT 22
72443: ST_TO_ADDR
72444: GO 72732
72446: LD_INT 20
72448: DOUBLE
72449: EQUAL
72450: IFTRUE 72454
72452: GO 72465
72454: POP
// bc_type := b_ext_siberium ; 21 :
72455: LD_ADDR_OWVAR 42
72459: PUSH
72460: LD_INT 21
72462: ST_TO_ADDR
72463: GO 72732
72465: LD_INT 21
72467: DOUBLE
72468: EQUAL
72469: IFTRUE 72473
72471: GO 72484
72473: POP
// bc_type := b_ext_computer ; 22 :
72474: LD_ADDR_OWVAR 42
72478: PUSH
72479: LD_INT 24
72481: ST_TO_ADDR
72482: GO 72732
72484: LD_INT 22
72486: DOUBLE
72487: EQUAL
72488: IFTRUE 72492
72490: GO 72503
72492: POP
// bc_type := b_ext_track ; 23 :
72493: LD_ADDR_OWVAR 42
72497: PUSH
72498: LD_INT 16
72500: ST_TO_ADDR
72501: GO 72732
72503: LD_INT 23
72505: DOUBLE
72506: EQUAL
72507: IFTRUE 72511
72509: GO 72522
72511: POP
// bc_type := b_ext_laser ; 24 :
72512: LD_ADDR_OWVAR 42
72516: PUSH
72517: LD_INT 25
72519: ST_TO_ADDR
72520: GO 72732
72522: LD_INT 24
72524: DOUBLE
72525: EQUAL
72526: IFTRUE 72530
72528: GO 72541
72530: POP
// bc_type := b_control_tower ; 25 :
72531: LD_ADDR_OWVAR 42
72535: PUSH
72536: LD_INT 36
72538: ST_TO_ADDR
72539: GO 72732
72541: LD_INT 25
72543: DOUBLE
72544: EQUAL
72545: IFTRUE 72549
72547: GO 72560
72549: POP
// bc_type := b_breastwork ; 26 :
72550: LD_ADDR_OWVAR 42
72554: PUSH
72555: LD_INT 31
72557: ST_TO_ADDR
72558: GO 72732
72560: LD_INT 26
72562: DOUBLE
72563: EQUAL
72564: IFTRUE 72568
72566: GO 72579
72568: POP
// bc_type := b_bunker ; 27 :
72569: LD_ADDR_OWVAR 42
72573: PUSH
72574: LD_INT 32
72576: ST_TO_ADDR
72577: GO 72732
72579: LD_INT 27
72581: DOUBLE
72582: EQUAL
72583: IFTRUE 72587
72585: GO 72598
72587: POP
// bc_type := b_turret ; 28 :
72588: LD_ADDR_OWVAR 42
72592: PUSH
72593: LD_INT 33
72595: ST_TO_ADDR
72596: GO 72732
72598: LD_INT 28
72600: DOUBLE
72601: EQUAL
72602: IFTRUE 72606
72604: GO 72617
72606: POP
// bc_type := b_armoury ; 29 :
72607: LD_ADDR_OWVAR 42
72611: PUSH
72612: LD_INT 4
72614: ST_TO_ADDR
72615: GO 72732
72617: LD_INT 29
72619: DOUBLE
72620: EQUAL
72621: IFTRUE 72625
72623: GO 72636
72625: POP
// bc_type := b_barracks ; 30 :
72626: LD_ADDR_OWVAR 42
72630: PUSH
72631: LD_INT 5
72633: ST_TO_ADDR
72634: GO 72732
72636: LD_INT 30
72638: DOUBLE
72639: EQUAL
72640: IFTRUE 72644
72642: GO 72655
72644: POP
// bc_type := b_solar_power ; 31 :
72645: LD_ADDR_OWVAR 42
72649: PUSH
72650: LD_INT 27
72652: ST_TO_ADDR
72653: GO 72732
72655: LD_INT 31
72657: DOUBLE
72658: EQUAL
72659: IFTRUE 72663
72661: GO 72674
72663: POP
// bc_type := b_oil_power ; 32 :
72664: LD_ADDR_OWVAR 42
72668: PUSH
72669: LD_INT 26
72671: ST_TO_ADDR
72672: GO 72732
72674: LD_INT 32
72676: DOUBLE
72677: EQUAL
72678: IFTRUE 72682
72680: GO 72693
72682: POP
// bc_type := b_siberite_power ; 33 :
72683: LD_ADDR_OWVAR 42
72687: PUSH
72688: LD_INT 28
72690: ST_TO_ADDR
72691: GO 72732
72693: LD_INT 33
72695: DOUBLE
72696: EQUAL
72697: IFTRUE 72701
72699: GO 72712
72701: POP
// bc_type := b_oil_mine ; 34 :
72702: LD_ADDR_OWVAR 42
72706: PUSH
72707: LD_INT 29
72709: ST_TO_ADDR
72710: GO 72732
72712: LD_INT 34
72714: DOUBLE
72715: EQUAL
72716: IFTRUE 72720
72718: GO 72731
72720: POP
// bc_type := b_siberite_mine ; end ;
72721: LD_ADDR_OWVAR 42
72725: PUSH
72726: LD_INT 30
72728: ST_TO_ADDR
72729: GO 72732
72731: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
72732: LD_ADDR_VAR 0 8
72736: PUSH
72737: LD_VAR 0 5
72741: PPUSH
72742: LD_VAR 0 6
72746: PPUSH
72747: LD_VAR 0 3
72751: PPUSH
72752: CALL_OW 47
72756: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
72757: LD_OWVAR 42
72761: PUSH
72762: LD_INT 32
72764: PUSH
72765: LD_INT 33
72767: PUSH
72768: EMPTY
72769: LIST
72770: LIST
72771: IN
72772: IFFALSE 72788
// PlaceWeaponTurret ( b , weapon ) ;
72774: LD_VAR 0 8
72778: PPUSH
72779: LD_VAR 0 4
72783: PPUSH
72784: CALL_OW 431
// end ;
72788: LD_VAR 0 7
72792: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
72793: LD_INT 0
72795: PPUSH
72796: PPUSH
72797: PPUSH
72798: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72799: LD_ADDR_VAR 0 4
72803: PUSH
72804: LD_INT 22
72806: PUSH
72807: LD_OWVAR 2
72811: PUSH
72812: EMPTY
72813: LIST
72814: LIST
72815: PUSH
72816: LD_INT 2
72818: PUSH
72819: LD_INT 30
72821: PUSH
72822: LD_INT 0
72824: PUSH
72825: EMPTY
72826: LIST
72827: LIST
72828: PUSH
72829: LD_INT 30
72831: PUSH
72832: LD_INT 1
72834: PUSH
72835: EMPTY
72836: LIST
72837: LIST
72838: PUSH
72839: EMPTY
72840: LIST
72841: LIST
72842: LIST
72843: PUSH
72844: EMPTY
72845: LIST
72846: LIST
72847: PPUSH
72848: CALL_OW 69
72852: ST_TO_ADDR
// if not tmp then
72853: LD_VAR 0 4
72857: NOT
72858: IFFALSE 72862
// exit ;
72860: GO 72921
// for i in tmp do
72862: LD_ADDR_VAR 0 2
72866: PUSH
72867: LD_VAR 0 4
72871: PUSH
72872: FOR_IN
72873: IFFALSE 72919
// for j = 1 to 3 do
72875: LD_ADDR_VAR 0 3
72879: PUSH
72880: DOUBLE
72881: LD_INT 1
72883: DEC
72884: ST_TO_ADDR
72885: LD_INT 3
72887: PUSH
72888: FOR_TO
72889: IFFALSE 72915
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
72891: LD_VAR 0 2
72895: PPUSH
72896: CALL_OW 274
72900: PPUSH
72901: LD_VAR 0 3
72905: PPUSH
72906: LD_INT 99999
72908: PPUSH
72909: CALL_OW 277
72913: GO 72888
72915: POP
72916: POP
72917: GO 72872
72919: POP
72920: POP
// end ;
72921: LD_VAR 0 1
72925: RET
// export function hHackSetLevel10 ; var i , j ; begin
72926: LD_INT 0
72928: PPUSH
72929: PPUSH
72930: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
72931: LD_ADDR_VAR 0 2
72935: PUSH
72936: LD_INT 21
72938: PUSH
72939: LD_INT 1
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: PPUSH
72946: CALL_OW 69
72950: PUSH
72951: FOR_IN
72952: IFFALSE 73004
// if IsSelected ( i ) then
72954: LD_VAR 0 2
72958: PPUSH
72959: CALL_OW 306
72963: IFFALSE 73002
// begin for j := 1 to 4 do
72965: LD_ADDR_VAR 0 3
72969: PUSH
72970: DOUBLE
72971: LD_INT 1
72973: DEC
72974: ST_TO_ADDR
72975: LD_INT 4
72977: PUSH
72978: FOR_TO
72979: IFFALSE 73000
// SetSkill ( i , j , 10 ) ;
72981: LD_VAR 0 2
72985: PPUSH
72986: LD_VAR 0 3
72990: PPUSH
72991: LD_INT 10
72993: PPUSH
72994: CALL_OW 237
72998: GO 72978
73000: POP
73001: POP
// end ;
73002: GO 72951
73004: POP
73005: POP
// end ;
73006: LD_VAR 0 1
73010: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
73011: LD_INT 0
73013: PPUSH
73014: PPUSH
73015: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
73016: LD_ADDR_VAR 0 2
73020: PUSH
73021: LD_INT 22
73023: PUSH
73024: LD_OWVAR 2
73028: PUSH
73029: EMPTY
73030: LIST
73031: LIST
73032: PUSH
73033: LD_INT 21
73035: PUSH
73036: LD_INT 1
73038: PUSH
73039: EMPTY
73040: LIST
73041: LIST
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: PPUSH
73047: CALL_OW 69
73051: PUSH
73052: FOR_IN
73053: IFFALSE 73094
// begin for j := 1 to 4 do
73055: LD_ADDR_VAR 0 3
73059: PUSH
73060: DOUBLE
73061: LD_INT 1
73063: DEC
73064: ST_TO_ADDR
73065: LD_INT 4
73067: PUSH
73068: FOR_TO
73069: IFFALSE 73090
// SetSkill ( i , j , 10 ) ;
73071: LD_VAR 0 2
73075: PPUSH
73076: LD_VAR 0 3
73080: PPUSH
73081: LD_INT 10
73083: PPUSH
73084: CALL_OW 237
73088: GO 73068
73090: POP
73091: POP
// end ;
73092: GO 73052
73094: POP
73095: POP
// end ;
73096: LD_VAR 0 1
73100: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
73101: LD_INT 0
73103: PPUSH
// uc_side := your_side ;
73104: LD_ADDR_OWVAR 20
73108: PUSH
73109: LD_OWVAR 2
73113: ST_TO_ADDR
// uc_nation := nation ;
73114: LD_ADDR_OWVAR 21
73118: PUSH
73119: LD_VAR 0 1
73123: ST_TO_ADDR
// InitHc ;
73124: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
73128: LD_INT 0
73130: PPUSH
73131: LD_VAR 0 2
73135: PPUSH
73136: LD_VAR 0 3
73140: PPUSH
73141: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
73145: LD_VAR 0 4
73149: PPUSH
73150: LD_VAR 0 5
73154: PPUSH
73155: CALL_OW 428
73159: PUSH
73160: LD_INT 0
73162: EQUAL
73163: IFFALSE 73187
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
73165: CALL_OW 44
73169: PPUSH
73170: LD_VAR 0 4
73174: PPUSH
73175: LD_VAR 0 5
73179: PPUSH
73180: LD_INT 1
73182: PPUSH
73183: CALL_OW 48
// end ;
73187: LD_VAR 0 6
73191: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
73192: LD_INT 0
73194: PPUSH
73195: PPUSH
// uc_side := your_side ;
73196: LD_ADDR_OWVAR 20
73200: PUSH
73201: LD_OWVAR 2
73205: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
73206: LD_VAR 0 1
73210: PUSH
73211: LD_INT 1
73213: PUSH
73214: LD_INT 2
73216: PUSH
73217: LD_INT 3
73219: PUSH
73220: LD_INT 4
73222: PUSH
73223: LD_INT 5
73225: PUSH
73226: EMPTY
73227: LIST
73228: LIST
73229: LIST
73230: LIST
73231: LIST
73232: IN
73233: IFFALSE 73245
// uc_nation := nation_american else
73235: LD_ADDR_OWVAR 21
73239: PUSH
73240: LD_INT 1
73242: ST_TO_ADDR
73243: GO 73288
// if chassis in [ 11 , 12 , 13 , 14 ] then
73245: LD_VAR 0 1
73249: PUSH
73250: LD_INT 11
73252: PUSH
73253: LD_INT 12
73255: PUSH
73256: LD_INT 13
73258: PUSH
73259: LD_INT 14
73261: PUSH
73262: EMPTY
73263: LIST
73264: LIST
73265: LIST
73266: LIST
73267: IN
73268: IFFALSE 73280
// uc_nation := nation_arabian else
73270: LD_ADDR_OWVAR 21
73274: PUSH
73275: LD_INT 2
73277: ST_TO_ADDR
73278: GO 73288
// uc_nation := nation_russian ;
73280: LD_ADDR_OWVAR 21
73284: PUSH
73285: LD_INT 3
73287: ST_TO_ADDR
// vc_chassis := chassis ;
73288: LD_ADDR_OWVAR 37
73292: PUSH
73293: LD_VAR 0 1
73297: ST_TO_ADDR
// vc_engine := engine ;
73298: LD_ADDR_OWVAR 39
73302: PUSH
73303: LD_VAR 0 2
73307: ST_TO_ADDR
// vc_control := control ;
73308: LD_ADDR_OWVAR 38
73312: PUSH
73313: LD_VAR 0 3
73317: ST_TO_ADDR
// vc_weapon := weapon ;
73318: LD_ADDR_OWVAR 40
73322: PUSH
73323: LD_VAR 0 4
73327: ST_TO_ADDR
// un := CreateVehicle ;
73328: LD_ADDR_VAR 0 8
73332: PUSH
73333: CALL_OW 45
73337: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
73338: LD_VAR 0 8
73342: PPUSH
73343: LD_INT 0
73345: PPUSH
73346: LD_INT 5
73348: PPUSH
73349: CALL_OW 12
73353: PPUSH
73354: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
73358: LD_VAR 0 8
73362: PPUSH
73363: LD_VAR 0 5
73367: PPUSH
73368: LD_VAR 0 6
73372: PPUSH
73373: LD_INT 1
73375: PPUSH
73376: CALL_OW 48
// end ;
73380: LD_VAR 0 7
73384: RET
// export hInvincible ; every 1 do
73385: GO 73387
73387: DISABLE
// hInvincible := [ ] ;
73388: LD_ADDR_EXP 118
73392: PUSH
73393: EMPTY
73394: ST_TO_ADDR
73395: END
// every 10 do var i ;
73396: GO 73398
73398: DISABLE
73399: LD_INT 0
73401: PPUSH
// begin enable ;
73402: ENABLE
// if not hInvincible then
73403: LD_EXP 118
73407: NOT
73408: IFFALSE 73412
// exit ;
73410: GO 73456
// for i in hInvincible do
73412: LD_ADDR_VAR 0 1
73416: PUSH
73417: LD_EXP 118
73421: PUSH
73422: FOR_IN
73423: IFFALSE 73454
// if GetLives ( i ) < 1000 then
73425: LD_VAR 0 1
73429: PPUSH
73430: CALL_OW 256
73434: PUSH
73435: LD_INT 1000
73437: LESS
73438: IFFALSE 73452
// SetLives ( i , 1000 ) ;
73440: LD_VAR 0 1
73444: PPUSH
73445: LD_INT 1000
73447: PPUSH
73448: CALL_OW 234
73452: GO 73422
73454: POP
73455: POP
// end ;
73456: PPOPN 1
73458: END
// export function hHackInvincible ; var i ; begin
73459: LD_INT 0
73461: PPUSH
73462: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
73463: LD_ADDR_VAR 0 2
73467: PUSH
73468: LD_INT 2
73470: PUSH
73471: LD_INT 21
73473: PUSH
73474: LD_INT 1
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: PUSH
73481: LD_INT 21
73483: PUSH
73484: LD_INT 2
73486: PUSH
73487: EMPTY
73488: LIST
73489: LIST
73490: PUSH
73491: EMPTY
73492: LIST
73493: LIST
73494: LIST
73495: PPUSH
73496: CALL_OW 69
73500: PUSH
73501: FOR_IN
73502: IFFALSE 73563
// if IsSelected ( i ) then
73504: LD_VAR 0 2
73508: PPUSH
73509: CALL_OW 306
73513: IFFALSE 73561
// begin if i in hInvincible then
73515: LD_VAR 0 2
73519: PUSH
73520: LD_EXP 118
73524: IN
73525: IFFALSE 73545
// hInvincible := hInvincible diff i else
73527: LD_ADDR_EXP 118
73531: PUSH
73532: LD_EXP 118
73536: PUSH
73537: LD_VAR 0 2
73541: DIFF
73542: ST_TO_ADDR
73543: GO 73561
// hInvincible := hInvincible union i ;
73545: LD_ADDR_EXP 118
73549: PUSH
73550: LD_EXP 118
73554: PUSH
73555: LD_VAR 0 2
73559: UNION
73560: ST_TO_ADDR
// end ;
73561: GO 73501
73563: POP
73564: POP
// end ;
73565: LD_VAR 0 1
73569: RET
// export function hHackInvisible ; var i , j ; begin
73570: LD_INT 0
73572: PPUSH
73573: PPUSH
73574: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
73575: LD_ADDR_VAR 0 2
73579: PUSH
73580: LD_INT 21
73582: PUSH
73583: LD_INT 1
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: PPUSH
73590: CALL_OW 69
73594: PUSH
73595: FOR_IN
73596: IFFALSE 73620
// if IsSelected ( i ) then
73598: LD_VAR 0 2
73602: PPUSH
73603: CALL_OW 306
73607: IFFALSE 73618
// ComForceInvisible ( i ) ;
73609: LD_VAR 0 2
73613: PPUSH
73614: CALL_OW 496
73618: GO 73595
73620: POP
73621: POP
// end ;
73622: LD_VAR 0 1
73626: RET
// export function hHackChangeYourSide ; begin
73627: LD_INT 0
73629: PPUSH
// if your_side = 8 then
73630: LD_OWVAR 2
73634: PUSH
73635: LD_INT 8
73637: EQUAL
73638: IFFALSE 73650
// your_side := 0 else
73640: LD_ADDR_OWVAR 2
73644: PUSH
73645: LD_INT 0
73647: ST_TO_ADDR
73648: GO 73664
// your_side := your_side + 1 ;
73650: LD_ADDR_OWVAR 2
73654: PUSH
73655: LD_OWVAR 2
73659: PUSH
73660: LD_INT 1
73662: PLUS
73663: ST_TO_ADDR
// end ;
73664: LD_VAR 0 1
73668: RET
// export function hHackChangeUnitSide ; var i , j ; begin
73669: LD_INT 0
73671: PPUSH
73672: PPUSH
73673: PPUSH
// for i in all_units do
73674: LD_ADDR_VAR 0 2
73678: PUSH
73679: LD_OWVAR 3
73683: PUSH
73684: FOR_IN
73685: IFFALSE 73763
// if IsSelected ( i ) then
73687: LD_VAR 0 2
73691: PPUSH
73692: CALL_OW 306
73696: IFFALSE 73761
// begin j := GetSide ( i ) ;
73698: LD_ADDR_VAR 0 3
73702: PUSH
73703: LD_VAR 0 2
73707: PPUSH
73708: CALL_OW 255
73712: ST_TO_ADDR
// if j = 8 then
73713: LD_VAR 0 3
73717: PUSH
73718: LD_INT 8
73720: EQUAL
73721: IFFALSE 73733
// j := 0 else
73723: LD_ADDR_VAR 0 3
73727: PUSH
73728: LD_INT 0
73730: ST_TO_ADDR
73731: GO 73747
// j := j + 1 ;
73733: LD_ADDR_VAR 0 3
73737: PUSH
73738: LD_VAR 0 3
73742: PUSH
73743: LD_INT 1
73745: PLUS
73746: ST_TO_ADDR
// SetSide ( i , j ) ;
73747: LD_VAR 0 2
73751: PPUSH
73752: LD_VAR 0 3
73756: PPUSH
73757: CALL_OW 235
// end ;
73761: GO 73684
73763: POP
73764: POP
// end ;
73765: LD_VAR 0 1
73769: RET
// export function hHackFog ; begin
73770: LD_INT 0
73772: PPUSH
// FogOff ( true ) ;
73773: LD_INT 1
73775: PPUSH
73776: CALL_OW 344
// end ;
73780: LD_VAR 0 1
73784: RET
// export function hHackTeleport ( unit , x , y ) ; begin
73785: LD_INT 0
73787: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
73788: LD_VAR 0 1
73792: PPUSH
73793: LD_VAR 0 2
73797: PPUSH
73798: LD_VAR 0 3
73802: PPUSH
73803: LD_INT 1
73805: PPUSH
73806: LD_INT 1
73808: PPUSH
73809: CALL_OW 483
// CenterOnXY ( x , y ) ;
73813: LD_VAR 0 2
73817: PPUSH
73818: LD_VAR 0 3
73822: PPUSH
73823: CALL_OW 84
// end ;
73827: LD_VAR 0 4
73831: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
73832: LD_INT 0
73834: PPUSH
73835: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
73836: LD_VAR 0 1
73840: NOT
73841: IFTRUE 73860
73843: PUSH
73844: LD_VAR 0 2
73848: PPUSH
73849: LD_VAR 0 3
73853: PPUSH
73854: CALL_OW 488
73858: NOT
73859: OR
73860: IFTRUE 73895
73862: PUSH
73863: LD_VAR 0 1
73867: PPUSH
73868: CALL_OW 266
73872: PUSH
73873: LD_INT 3
73875: NONEQUAL
73876: IFFALSE 73894
73878: PUSH
73879: LD_VAR 0 1
73883: PPUSH
73884: CALL_OW 247
73888: PUSH
73889: LD_INT 1
73891: EQUAL
73892: NOT
73893: AND
73894: OR
73895: IFFALSE 73899
// exit ;
73897: GO 74181
// if GetType ( factory ) = unit_human then
73899: LD_VAR 0 1
73903: PPUSH
73904: CALL_OW 247
73908: PUSH
73909: LD_INT 1
73911: EQUAL
73912: IFFALSE 73929
// factory := IsInUnit ( factory ) ;
73914: LD_ADDR_VAR 0 1
73918: PUSH
73919: LD_VAR 0 1
73923: PPUSH
73924: CALL_OW 310
73928: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
73929: LD_VAR 0 1
73933: PPUSH
73934: CALL_OW 266
73938: PUSH
73939: LD_INT 3
73941: NONEQUAL
73942: IFFALSE 73946
// exit ;
73944: GO 74181
// for i := 1 to Count ( factoryWaypoints ) do
73946: LD_ADDR_VAR 0 5
73950: PUSH
73951: DOUBLE
73952: LD_INT 1
73954: DEC
73955: ST_TO_ADDR
73956: LD_EXP 119
73960: PPUSH
73961: CALL 17922 0 1
73965: PUSH
73966: FOR_TO
73967: IFFALSE 74129
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
73969: LD_VAR 0 2
73973: PPUSH
73974: LD_VAR 0 3
73978: PPUSH
73979: CALL_OW 428
73983: PUSH
73984: LD_EXP 119
73988: PUSH
73989: LD_VAR 0 5
73993: ARRAY
73994: PUSH
73995: LD_INT 2
73997: ARRAY
73998: EQUAL
73999: IFFALSE 74031
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
74001: LD_ADDR_EXP 119
74005: PUSH
74006: LD_EXP 119
74010: PPUSH
74011: LD_VAR 0 5
74015: PPUSH
74016: CALL_OW 3
74020: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74021: CALL 74186 0 0
// exit ;
74025: POP
74026: POP
74027: GO 74181
// end else
74029: GO 74127
// if factory = factoryWaypoints [ i ] [ 2 ] then
74031: LD_VAR 0 1
74035: PUSH
74036: LD_EXP 119
74040: PUSH
74041: LD_VAR 0 5
74045: ARRAY
74046: PUSH
74047: LD_INT 2
74049: ARRAY
74050: EQUAL
74051: IFFALSE 74127
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
74053: LD_ADDR_EXP 119
74057: PUSH
74058: LD_EXP 119
74062: PPUSH
74063: LD_VAR 0 5
74067: PPUSH
74068: CALL_OW 3
74072: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
74073: LD_ADDR_EXP 119
74077: PUSH
74078: LD_EXP 119
74082: PPUSH
74083: LD_VAR 0 1
74087: PPUSH
74088: CALL_OW 255
74092: PUSH
74093: LD_VAR 0 1
74097: PUSH
74098: LD_VAR 0 2
74102: PUSH
74103: LD_VAR 0 3
74107: PUSH
74108: EMPTY
74109: LIST
74110: LIST
74111: LIST
74112: LIST
74113: PPUSH
74114: CALL 53854 0 2
74118: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74119: CALL 74186 0 0
// exit ;
74123: POP
74124: POP
74125: GO 74181
// end ; end ;
74127: GO 73966
74129: POP
74130: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
74131: LD_ADDR_EXP 119
74135: PUSH
74136: LD_EXP 119
74140: PPUSH
74141: LD_VAR 0 1
74145: PPUSH
74146: CALL_OW 255
74150: PUSH
74151: LD_VAR 0 1
74155: PUSH
74156: LD_VAR 0 2
74160: PUSH
74161: LD_VAR 0 3
74165: PUSH
74166: EMPTY
74167: LIST
74168: LIST
74169: LIST
74170: LIST
74171: PPUSH
74172: CALL 53854 0 2
74176: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74177: CALL 74186 0 0
// end ;
74181: LD_VAR 0 4
74185: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
74186: LD_INT 0
74188: PPUSH
74189: PPUSH
74190: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
74191: LD_STRING resetFactoryWaypoint();
74193: PPUSH
74194: CALL_OW 559
// if factoryWaypoints then
74198: LD_EXP 119
74202: IFFALSE 74323
// begin list := factoryWaypoints ;
74204: LD_ADDR_VAR 0 3
74208: PUSH
74209: LD_EXP 119
74213: ST_TO_ADDR
// for i := 1 to list do
74214: LD_ADDR_VAR 0 2
74218: PUSH
74219: DOUBLE
74220: LD_INT 1
74222: DEC
74223: ST_TO_ADDR
74224: LD_VAR 0 3
74228: PUSH
74229: FOR_TO
74230: IFFALSE 74321
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
74232: LD_STRING setFactoryWaypointXY(
74234: PUSH
74235: LD_VAR 0 3
74239: PUSH
74240: LD_VAR 0 2
74244: ARRAY
74245: PUSH
74246: LD_INT 1
74248: ARRAY
74249: STR
74250: PUSH
74251: LD_STRING ,
74253: STR
74254: PUSH
74255: LD_VAR 0 3
74259: PUSH
74260: LD_VAR 0 2
74264: ARRAY
74265: PUSH
74266: LD_INT 2
74268: ARRAY
74269: STR
74270: PUSH
74271: LD_STRING ,
74273: STR
74274: PUSH
74275: LD_VAR 0 3
74279: PUSH
74280: LD_VAR 0 2
74284: ARRAY
74285: PUSH
74286: LD_INT 3
74288: ARRAY
74289: STR
74290: PUSH
74291: LD_STRING ,
74293: STR
74294: PUSH
74295: LD_VAR 0 3
74299: PUSH
74300: LD_VAR 0 2
74304: ARRAY
74305: PUSH
74306: LD_INT 4
74308: ARRAY
74309: STR
74310: PUSH
74311: LD_STRING )
74313: STR
74314: PPUSH
74315: CALL_OW 559
74319: GO 74229
74321: POP
74322: POP
// end ; end ;
74323: LD_VAR 0 1
74327: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
74328: LD_INT 0
74330: PPUSH
// if HexInfo ( x , y ) = warehouse then
74331: LD_VAR 0 2
74335: PPUSH
74336: LD_VAR 0 3
74340: PPUSH
74341: CALL_OW 428
74345: PUSH
74346: LD_VAR 0 1
74350: EQUAL
74351: IFFALSE 74378
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
74353: LD_ADDR_EXP 121
74357: PUSH
74358: LD_EXP 121
74362: PPUSH
74363: LD_VAR 0 1
74367: PPUSH
74368: LD_INT 0
74370: PPUSH
74371: CALL_OW 1
74375: ST_TO_ADDR
74376: GO 74429
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
74378: LD_ADDR_EXP 121
74382: PUSH
74383: LD_EXP 121
74387: PPUSH
74388: LD_VAR 0 1
74392: PPUSH
74393: LD_VAR 0 1
74397: PPUSH
74398: CALL_OW 255
74402: PUSH
74403: LD_VAR 0 1
74407: PUSH
74408: LD_VAR 0 2
74412: PUSH
74413: LD_VAR 0 3
74417: PUSH
74418: EMPTY
74419: LIST
74420: LIST
74421: LIST
74422: LIST
74423: PPUSH
74424: CALL_OW 1
74428: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
74429: CALL 74438 0 0
// end ;
74433: LD_VAR 0 4
74437: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
74438: LD_INT 0
74440: PPUSH
74441: PPUSH
74442: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
74443: LD_STRING resetWarehouseGatheringPoints();
74445: PPUSH
74446: CALL_OW 559
// if warehouseGatheringPoints then
74450: LD_EXP 121
74454: IFFALSE 74580
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
74456: LD_ADDR_VAR 0 3
74460: PUSH
74461: LD_EXP 121
74465: PPUSH
74466: CALL 57788 0 1
74470: ST_TO_ADDR
// for i := 1 to list do
74471: LD_ADDR_VAR 0 2
74475: PUSH
74476: DOUBLE
74477: LD_INT 1
74479: DEC
74480: ST_TO_ADDR
74481: LD_VAR 0 3
74485: PUSH
74486: FOR_TO
74487: IFFALSE 74578
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
74489: LD_STRING setWarehouseGatheringPointXY(
74491: PUSH
74492: LD_VAR 0 3
74496: PUSH
74497: LD_VAR 0 2
74501: ARRAY
74502: PUSH
74503: LD_INT 1
74505: ARRAY
74506: STR
74507: PUSH
74508: LD_STRING ,
74510: STR
74511: PUSH
74512: LD_VAR 0 3
74516: PUSH
74517: LD_VAR 0 2
74521: ARRAY
74522: PUSH
74523: LD_INT 2
74525: ARRAY
74526: STR
74527: PUSH
74528: LD_STRING ,
74530: STR
74531: PUSH
74532: LD_VAR 0 3
74536: PUSH
74537: LD_VAR 0 2
74541: ARRAY
74542: PUSH
74543: LD_INT 3
74545: ARRAY
74546: STR
74547: PUSH
74548: LD_STRING ,
74550: STR
74551: PUSH
74552: LD_VAR 0 3
74556: PUSH
74557: LD_VAR 0 2
74561: ARRAY
74562: PUSH
74563: LD_INT 4
74565: ARRAY
74566: STR
74567: PUSH
74568: LD_STRING )
74570: STR
74571: PPUSH
74572: CALL_OW 559
74576: GO 74486
74578: POP
74579: POP
// end ; end ;
74580: LD_VAR 0 1
74584: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
74585: LD_EXP 121
74589: IFFALSE 75284
74591: GO 74593
74593: DISABLE
74594: LD_INT 0
74596: PPUSH
74597: PPUSH
74598: PPUSH
74599: PPUSH
74600: PPUSH
74601: PPUSH
74602: PPUSH
74603: PPUSH
74604: PPUSH
// begin enable ;
74605: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
74606: LD_ADDR_VAR 0 3
74610: PUSH
74611: LD_EXP 121
74615: PPUSH
74616: CALL 57788 0 1
74620: ST_TO_ADDR
// if not list then
74621: LD_VAR 0 3
74625: NOT
74626: IFFALSE 74630
// exit ;
74628: GO 75284
// for i := 1 to list do
74630: LD_ADDR_VAR 0 1
74634: PUSH
74635: DOUBLE
74636: LD_INT 1
74638: DEC
74639: ST_TO_ADDR
74640: LD_VAR 0 3
74644: PUSH
74645: FOR_TO
74646: IFFALSE 75282
// begin depot := list [ i ] [ 2 ] ;
74648: LD_ADDR_VAR 0 8
74652: PUSH
74653: LD_VAR 0 3
74657: PUSH
74658: LD_VAR 0 1
74662: ARRAY
74663: PUSH
74664: LD_INT 2
74666: ARRAY
74667: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
74668: LD_ADDR_VAR 0 5
74672: PUSH
74673: LD_VAR 0 3
74677: PUSH
74678: LD_VAR 0 1
74682: ARRAY
74683: PUSH
74684: LD_INT 1
74686: ARRAY
74687: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
74688: LD_VAR 0 8
74692: PPUSH
74693: CALL_OW 301
74697: IFTRUE 74716
74699: PUSH
74700: LD_VAR 0 5
74704: PUSH
74705: LD_VAR 0 8
74709: PPUSH
74710: CALL_OW 255
74714: NONEQUAL
74715: OR
74716: IFFALSE 74745
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
74718: LD_ADDR_EXP 121
74722: PUSH
74723: LD_EXP 121
74727: PPUSH
74728: LD_VAR 0 8
74732: PPUSH
74733: LD_INT 0
74735: PPUSH
74736: CALL_OW 1
74740: ST_TO_ADDR
// exit ;
74741: POP
74742: POP
74743: GO 75284
// end ; x := list [ i ] [ 3 ] ;
74745: LD_ADDR_VAR 0 6
74749: PUSH
74750: LD_VAR 0 3
74754: PUSH
74755: LD_VAR 0 1
74759: ARRAY
74760: PUSH
74761: LD_INT 3
74763: ARRAY
74764: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
74765: LD_ADDR_VAR 0 7
74769: PUSH
74770: LD_VAR 0 3
74774: PUSH
74775: LD_VAR 0 1
74779: ARRAY
74780: PUSH
74781: LD_INT 4
74783: ARRAY
74784: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
74785: LD_ADDR_VAR 0 9
74789: PUSH
74790: LD_VAR 0 6
74794: PPUSH
74795: LD_VAR 0 7
74799: PPUSH
74800: LD_INT 16
74802: PPUSH
74803: CALL 56362 0 3
74807: ST_TO_ADDR
// if not cratesNearbyPoint then
74808: LD_VAR 0 9
74812: NOT
74813: IFFALSE 74819
// exit ;
74815: POP
74816: POP
74817: GO 75284
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
74819: LD_ADDR_VAR 0 4
74823: PUSH
74824: LD_INT 22
74826: PUSH
74827: LD_VAR 0 5
74831: PUSH
74832: EMPTY
74833: LIST
74834: LIST
74835: PUSH
74836: LD_INT 3
74838: PUSH
74839: LD_INT 60
74841: PUSH
74842: EMPTY
74843: LIST
74844: PUSH
74845: EMPTY
74846: LIST
74847: LIST
74848: PUSH
74849: LD_INT 91
74851: PUSH
74852: LD_VAR 0 8
74856: PUSH
74857: LD_INT 6
74859: PUSH
74860: EMPTY
74861: LIST
74862: LIST
74863: LIST
74864: PUSH
74865: LD_INT 2
74867: PUSH
74868: LD_INT 25
74870: PUSH
74871: LD_INT 2
74873: PUSH
74874: EMPTY
74875: LIST
74876: LIST
74877: PUSH
74878: LD_INT 25
74880: PUSH
74881: LD_INT 16
74883: PUSH
74884: EMPTY
74885: LIST
74886: LIST
74887: PUSH
74888: EMPTY
74889: LIST
74890: LIST
74891: LIST
74892: PUSH
74893: EMPTY
74894: LIST
74895: LIST
74896: LIST
74897: LIST
74898: PPUSH
74899: CALL_OW 69
74903: PUSH
74904: LD_VAR 0 8
74908: PPUSH
74909: CALL_OW 313
74913: PPUSH
74914: LD_INT 3
74916: PUSH
74917: LD_INT 60
74919: PUSH
74920: EMPTY
74921: LIST
74922: PUSH
74923: EMPTY
74924: LIST
74925: LIST
74926: PUSH
74927: LD_INT 2
74929: PUSH
74930: LD_INT 25
74932: PUSH
74933: LD_INT 2
74935: PUSH
74936: EMPTY
74937: LIST
74938: LIST
74939: PUSH
74940: LD_INT 25
74942: PUSH
74943: LD_INT 16
74945: PUSH
74946: EMPTY
74947: LIST
74948: LIST
74949: PUSH
74950: EMPTY
74951: LIST
74952: LIST
74953: LIST
74954: PUSH
74955: EMPTY
74956: LIST
74957: LIST
74958: PPUSH
74959: CALL_OW 72
74963: UNION
74964: ST_TO_ADDR
// if tmp then
74965: LD_VAR 0 4
74969: IFFALSE 75049
// begin tmp := ShrinkArray ( tmp , 3 ) ;
74971: LD_ADDR_VAR 0 4
74975: PUSH
74976: LD_VAR 0 4
74980: PPUSH
74981: LD_INT 3
74983: PPUSH
74984: CALL 54169 0 2
74988: ST_TO_ADDR
// for j in tmp do
74989: LD_ADDR_VAR 0 2
74993: PUSH
74994: LD_VAR 0 4
74998: PUSH
74999: FOR_IN
75000: IFFALSE 75043
// begin if IsInUnit ( j ) then
75002: LD_VAR 0 2
75006: PPUSH
75007: CALL_OW 310
75011: IFFALSE 75022
// ComExit ( j ) ;
75013: LD_VAR 0 2
75017: PPUSH
75018: CALL 54252 0 1
// AddComCollect ( j , x , y ) ;
75022: LD_VAR 0 2
75026: PPUSH
75027: LD_VAR 0 6
75031: PPUSH
75032: LD_VAR 0 7
75036: PPUSH
75037: CALL_OW 177
// end ;
75041: GO 74999
75043: POP
75044: POP
// exit ;
75045: POP
75046: POP
75047: GO 75284
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
75049: LD_ADDR_VAR 0 4
75053: PUSH
75054: LD_INT 22
75056: PUSH
75057: LD_VAR 0 5
75061: PUSH
75062: EMPTY
75063: LIST
75064: LIST
75065: PUSH
75066: LD_INT 91
75068: PUSH
75069: LD_VAR 0 8
75073: PUSH
75074: LD_INT 8
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: LIST
75081: PUSH
75082: LD_INT 2
75084: PUSH
75085: LD_INT 34
75087: PUSH
75088: LD_INT 12
75090: PUSH
75091: EMPTY
75092: LIST
75093: LIST
75094: PUSH
75095: LD_INT 34
75097: PUSH
75098: LD_INT 51
75100: PUSH
75101: EMPTY
75102: LIST
75103: LIST
75104: PUSH
75105: LD_INT 34
75107: PUSH
75108: LD_INT 32
75110: PUSH
75111: EMPTY
75112: LIST
75113: LIST
75114: PUSH
75115: LD_INT 34
75117: PUSH
75118: LD_INT 89
75120: PUSH
75121: EMPTY
75122: LIST
75123: LIST
75124: PUSH
75125: EMPTY
75126: LIST
75127: LIST
75128: LIST
75129: LIST
75130: LIST
75131: PUSH
75132: EMPTY
75133: LIST
75134: LIST
75135: LIST
75136: PPUSH
75137: CALL_OW 69
75141: ST_TO_ADDR
// if tmp then
75142: LD_VAR 0 4
75146: IFFALSE 75280
// begin for j in tmp do
75148: LD_ADDR_VAR 0 2
75152: PUSH
75153: LD_VAR 0 4
75157: PUSH
75158: FOR_IN
75159: IFFALSE 75278
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
75161: LD_VAR 0 2
75165: PPUSH
75166: CALL_OW 262
75170: PUSH
75171: LD_INT 3
75173: EQUAL
75174: IFTRUE 75191
75176: PUSH
75177: LD_VAR 0 2
75181: PPUSH
75182: CALL_OW 261
75186: PUSH
75187: LD_INT 20
75189: GREATER
75190: OR
75191: IFFALSE 75205
75193: PUSH
75194: LD_VAR 0 2
75198: PPUSH
75199: CALL_OW 314
75203: NOT
75204: AND
75205: IFFALSE 75235
75207: PUSH
75208: LD_VAR 0 2
75212: PPUSH
75213: CALL_OW 263
75217: PUSH
75218: LD_INT 1
75220: NONEQUAL
75221: IFTRUE 75234
75223: PUSH
75224: LD_VAR 0 2
75228: PPUSH
75229: CALL_OW 311
75233: OR
75234: AND
75235: IFFALSE 75276
// begin ComCollect ( j , x , y ) ;
75237: LD_VAR 0 2
75241: PPUSH
75242: LD_VAR 0 6
75246: PPUSH
75247: LD_VAR 0 7
75251: PPUSH
75252: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
75256: LD_VAR 0 2
75260: PPUSH
75261: LD_VAR 0 8
75265: PPUSH
75266: CALL_OW 172
// exit ;
75270: POP
75271: POP
75272: POP
75273: POP
75274: GO 75284
// end ;
75276: GO 75158
75278: POP
75279: POP
// end ; end ;
75280: GO 74645
75282: POP
75283: POP
// end ; end_of_file
75284: PPOPN 9
75286: END
// export function SOS_UnitDestroyed ( un ) ; begin
75287: LD_INT 0
75289: PPUSH
// ComRadiation ( un ) ;
75290: LD_VAR 0 1
75294: PPUSH
75295: CALL 76376 0 1
// end ;
75299: LD_VAR 0 2
75303: RET
// export function SOS_UnitKamikazed ( un ) ; begin
75304: LD_INT 0
75306: PPUSH
// ComRadiation ( un ) ;
75307: LD_VAR 0 1
75311: PPUSH
75312: CALL 76376 0 1
// end ;
75316: LD_VAR 0 2
75320: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
75321: LD_INT 0
75323: PPUSH
// end ;
75324: LD_VAR 0 4
75328: RET
// export function SOS_Command ( cmd ) ; begin
75329: LD_INT 0
75331: PPUSH
// end ;
75332: LD_VAR 0 2
75336: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
75337: LD_INT 0
75339: PPUSH
// end ;
75340: LD_VAR 0 6
75344: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
75345: LD_INT 0
75347: PPUSH
75348: PPUSH
75349: PPUSH
75350: PPUSH
// if not vehicle or not factory then
75351: LD_VAR 0 1
75355: NOT
75356: IFTRUE 75365
75358: PUSH
75359: LD_VAR 0 2
75363: NOT
75364: OR
75365: IFFALSE 75369
// exit ;
75367: GO 75951
// if not factoryWaypoints then
75369: LD_EXP 119
75373: NOT
75374: IFFALSE 75378
// exit ;
75376: GO 75951
// for i := 1 to Count ( factoryWaypoints ) do
75378: LD_ADDR_VAR 0 4
75382: PUSH
75383: DOUBLE
75384: LD_INT 1
75386: DEC
75387: ST_TO_ADDR
75388: LD_EXP 119
75392: PPUSH
75393: CALL 17922 0 1
75397: PUSH
75398: FOR_TO
75399: IFFALSE 75949
// if factoryWaypoints [ i ] [ 2 ] = factory then
75401: LD_EXP 119
75405: PUSH
75406: LD_VAR 0 4
75410: ARRAY
75411: PUSH
75412: LD_INT 2
75414: ARRAY
75415: PUSH
75416: LD_VAR 0 2
75420: EQUAL
75421: IFFALSE 75947
// begin if GetControl ( vehicle ) = control_manual then
75423: LD_VAR 0 1
75427: PPUSH
75428: CALL_OW 263
75432: PUSH
75433: LD_INT 1
75435: EQUAL
75436: IFFALSE 75800
// begin driver := IsDrivenBy ( vehicle ) ;
75438: LD_ADDR_VAR 0 5
75442: PUSH
75443: LD_VAR 0 1
75447: PPUSH
75448: CALL_OW 311
75452: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
75453: LD_VAR 0 5
75457: PUSH
75458: LD_EXP 120
75462: IN
75463: IFTRUE 75477
75465: PUSH
75466: LD_VAR 0 1
75470: PUSH
75471: LD_EXP 120
75475: IN
75476: OR
75477: IFFALSE 75483
// exit ;
75479: POP
75480: POP
75481: GO 75951
// if not HasTask ( driver ) then
75483: LD_VAR 0 5
75487: PPUSH
75488: CALL_OW 314
75492: NOT
75493: IFFALSE 75798
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
75495: LD_ADDR_EXP 120
75499: PUSH
75500: LD_EXP 120
75504: PPUSH
75505: LD_VAR 0 5
75509: PPUSH
75510: CALL 53854 0 2
75514: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
75515: LD_ADDR_EXP 120
75519: PUSH
75520: LD_EXP 120
75524: PPUSH
75525: LD_VAR 0 1
75529: PPUSH
75530: CALL 53854 0 2
75534: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
75535: LD_ADDR_VAR 0 6
75539: PUSH
75540: LD_EXP 119
75544: PUSH
75545: LD_VAR 0 4
75549: ARRAY
75550: PUSH
75551: LD_INT 3
75553: ARRAY
75554: PPUSH
75555: LD_EXP 119
75559: PUSH
75560: LD_VAR 0 4
75564: ARRAY
75565: PUSH
75566: LD_INT 4
75568: ARRAY
75569: PPUSH
75570: CALL_OW 428
75574: ST_TO_ADDR
// if hex then
75575: LD_VAR 0 6
75579: IFFALSE 75597
// ComMoveUnit ( driver , hex ) else
75581: LD_VAR 0 5
75585: PPUSH
75586: LD_VAR 0 6
75590: PPUSH
75591: CALL_OW 112
75595: GO 75681
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
75597: LD_VAR 0 1
75601: PPUSH
75602: LD_EXP 119
75606: PUSH
75607: LD_VAR 0 4
75611: ARRAY
75612: PUSH
75613: LD_INT 3
75615: ARRAY
75616: PPUSH
75617: LD_EXP 119
75621: PUSH
75622: LD_VAR 0 4
75626: ARRAY
75627: PUSH
75628: LD_INT 4
75630: ARRAY
75631: PPUSH
75632: CALL_OW 297
75636: PUSH
75637: LD_INT 0
75639: GREATER
75640: IFFALSE 75681
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
75642: LD_VAR 0 5
75646: PPUSH
75647: LD_EXP 119
75651: PUSH
75652: LD_VAR 0 4
75656: ARRAY
75657: PUSH
75658: LD_INT 3
75660: ARRAY
75661: PPUSH
75662: LD_EXP 119
75666: PUSH
75667: LD_VAR 0 4
75671: ARRAY
75672: PUSH
75673: LD_INT 4
75675: ARRAY
75676: PPUSH
75677: CALL_OW 111
// AddComExitVehicle ( driver ) ;
75681: LD_VAR 0 5
75685: PPUSH
75686: CALL_OW 181
// if Multiplayer then
75690: LD_OWVAR 4
75694: IFFALSE 75743
// begin repeat wait ( 10 ) ;
75696: LD_INT 10
75698: PPUSH
75699: CALL_OW 67
// until not IsInUnit ( driver ) ;
75703: LD_VAR 0 5
75707: PPUSH
75708: CALL_OW 310
75712: NOT
75713: IFFALSE 75696
// if not HasTask ( driver ) then
75715: LD_VAR 0 5
75719: PPUSH
75720: CALL_OW 314
75724: NOT
75725: IFFALSE 75741
// ComEnterUnit ( driver , factory ) ;
75727: LD_VAR 0 5
75731: PPUSH
75732: LD_VAR 0 2
75736: PPUSH
75737: CALL_OW 120
// end else
75741: GO 75757
// AddComEnterUnit ( driver , factory ) ;
75743: LD_VAR 0 5
75747: PPUSH
75748: LD_VAR 0 2
75752: PPUSH
75753: CALL_OW 180
// wait ( 0 0$1 ) ;
75757: LD_INT 35
75759: PPUSH
75760: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
75764: LD_ADDR_EXP 120
75768: PUSH
75769: LD_EXP 120
75773: PUSH
75774: LD_VAR 0 5
75778: DIFF
75779: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
75780: LD_ADDR_EXP 120
75784: PUSH
75785: LD_EXP 120
75789: PUSH
75790: LD_VAR 0 1
75794: DIFF
75795: ST_TO_ADDR
// break ;
75796: GO 75949
// end ; end else
75798: GO 75947
// if GetControl ( vehicle ) = control_remote then
75800: LD_VAR 0 1
75804: PPUSH
75805: CALL_OW 263
75809: PUSH
75810: LD_INT 2
75812: EQUAL
75813: IFFALSE 75899
// begin wait ( 0 0$2 ) ;
75815: LD_INT 70
75817: PPUSH
75818: CALL_OW 67
// repeat wait ( 10 ) ;
75822: LD_INT 10
75824: PPUSH
75825: CALL_OW 67
// Connect ( vehicle ) ;
75829: LD_VAR 0 1
75833: PPUSH
75834: CALL 24166 0 1
// until IsControledBy ( vehicle ) ;
75838: LD_VAR 0 1
75842: PPUSH
75843: CALL_OW 312
75847: IFFALSE 75822
// wait ( 10 ) ;
75849: LD_INT 10
75851: PPUSH
75852: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
75856: LD_VAR 0 1
75860: PPUSH
75861: LD_EXP 119
75865: PUSH
75866: LD_VAR 0 4
75870: ARRAY
75871: PUSH
75872: LD_INT 3
75874: ARRAY
75875: PPUSH
75876: LD_EXP 119
75880: PUSH
75881: LD_VAR 0 4
75885: ARRAY
75886: PUSH
75887: LD_INT 4
75889: ARRAY
75890: PPUSH
75891: CALL_OW 111
// break ;
75895: GO 75949
// end else
75897: GO 75947
// begin wait ( 0 0$3 ) ;
75899: LD_INT 105
75901: PPUSH
75902: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
75906: LD_VAR 0 1
75910: PPUSH
75911: LD_EXP 119
75915: PUSH
75916: LD_VAR 0 4
75920: ARRAY
75921: PUSH
75922: LD_INT 3
75924: ARRAY
75925: PPUSH
75926: LD_EXP 119
75930: PUSH
75931: LD_VAR 0 4
75935: ARRAY
75936: PUSH
75937: LD_INT 4
75939: ARRAY
75940: PPUSH
75941: CALL_OW 111
// break ;
75945: GO 75949
// end ; end ;
75947: GO 75398
75949: POP
75950: POP
// end ;
75951: LD_VAR 0 3
75955: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
75956: LD_INT 0
75958: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
75959: LD_VAR 0 1
75963: PUSH
75964: LD_INT 250
75966: EQUAL
75967: IFFALSE 75984
75969: PUSH
75970: LD_VAR 0 2
75974: PPUSH
75975: CALL_OW 264
75979: PUSH
75980: LD_INT 81
75982: EQUAL
75983: AND
75984: IFFALSE 76005
// MinerPlaceMine ( unit , x , y ) ;
75986: LD_VAR 0 2
75990: PPUSH
75991: LD_VAR 0 4
75995: PPUSH
75996: LD_VAR 0 5
76000: PPUSH
76001: CALL 79137 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
76005: LD_VAR 0 1
76009: PUSH
76010: LD_INT 251
76012: EQUAL
76013: IFFALSE 76030
76015: PUSH
76016: LD_VAR 0 2
76020: PPUSH
76021: CALL_OW 264
76025: PUSH
76026: LD_INT 81
76028: EQUAL
76029: AND
76030: IFFALSE 76051
// MinerDetonateMine ( unit , x , y ) ;
76032: LD_VAR 0 2
76036: PPUSH
76037: LD_VAR 0 4
76041: PPUSH
76042: LD_VAR 0 5
76046: PPUSH
76047: CALL 79416 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
76051: LD_VAR 0 1
76055: PUSH
76056: LD_INT 252
76058: EQUAL
76059: IFFALSE 76076
76061: PUSH
76062: LD_VAR 0 2
76066: PPUSH
76067: CALL_OW 264
76071: PUSH
76072: LD_INT 81
76074: EQUAL
76075: AND
76076: IFFALSE 76097
// MinerCreateMinefield ( unit , x , y ) ;
76078: LD_VAR 0 2
76082: PPUSH
76083: LD_VAR 0 4
76087: PPUSH
76088: LD_VAR 0 5
76092: PPUSH
76093: CALL 79835 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
76097: LD_VAR 0 1
76101: PUSH
76102: LD_INT 253
76104: EQUAL
76105: IFFALSE 76122
76107: PUSH
76108: LD_VAR 0 2
76112: PPUSH
76113: CALL_OW 257
76117: PUSH
76118: LD_INT 5
76120: EQUAL
76121: AND
76122: IFFALSE 76143
// ComBinocular ( unit , x , y ) ;
76124: LD_VAR 0 2
76128: PPUSH
76129: LD_VAR 0 4
76133: PPUSH
76134: LD_VAR 0 5
76138: PPUSH
76139: CALL 80210 0 3
// if selectedUnit then
76143: LD_VAR 0 3
76147: IFFALSE 76207
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
76149: LD_VAR 0 1
76153: PUSH
76154: LD_INT 254
76156: EQUAL
76157: IFFALSE 76174
76159: PUSH
76160: LD_VAR 0 2
76164: PPUSH
76165: CALL_OW 264
76169: PUSH
76170: LD_INT 99
76172: EQUAL
76173: AND
76174: IFFALSE 76191
76176: PUSH
76177: LD_VAR 0 3
76181: PPUSH
76182: CALL_OW 263
76186: PUSH
76187: LD_INT 3
76189: EQUAL
76190: AND
76191: IFFALSE 76207
// HackDestroyVehicle ( unit , selectedUnit ) ;
76193: LD_VAR 0 2
76197: PPUSH
76198: LD_VAR 0 3
76202: PPUSH
76203: CALL 78497 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
76207: LD_VAR 0 1
76211: PUSH
76212: LD_INT 255
76214: EQUAL
76215: IFFALSE 76239
76217: PUSH
76218: LD_VAR 0 2
76222: PPUSH
76223: CALL_OW 264
76227: PUSH
76228: LD_INT 14
76230: PUSH
76231: LD_INT 53
76233: PUSH
76234: EMPTY
76235: LIST
76236: LIST
76237: IN
76238: AND
76239: IFFALSE 76257
76241: PUSH
76242: LD_VAR 0 4
76246: PPUSH
76247: LD_VAR 0 5
76251: PPUSH
76252: CALL_OW 488
76256: AND
76257: IFFALSE 76281
// CutTreeXYR ( unit , x , y , 12 ) ;
76259: LD_VAR 0 2
76263: PPUSH
76264: LD_VAR 0 4
76268: PPUSH
76269: LD_VAR 0 5
76273: PPUSH
76274: LD_INT 12
76276: PPUSH
76277: CALL 76472 0 4
// if cmd = 256 then
76281: LD_VAR 0 1
76285: PUSH
76286: LD_INT 256
76288: EQUAL
76289: IFFALSE 76310
// SetFactoryWaypoint ( unit , x , y ) ;
76291: LD_VAR 0 2
76295: PPUSH
76296: LD_VAR 0 4
76300: PPUSH
76301: LD_VAR 0 5
76305: PPUSH
76306: CALL 73832 0 3
// if cmd = 257 then
76310: LD_VAR 0 1
76314: PUSH
76315: LD_INT 257
76317: EQUAL
76318: IFFALSE 76339
// SetWarehouseGatheringPoint ( unit , x , y ) ;
76320: LD_VAR 0 2
76324: PPUSH
76325: LD_VAR 0 4
76329: PPUSH
76330: LD_VAR 0 5
76334: PPUSH
76335: CALL 74328 0 3
// if cmd = 258 then
76339: LD_VAR 0 1
76343: PUSH
76344: LD_INT 258
76346: EQUAL
76347: IFFALSE 76371
// BurnTreeXYR ( unit , x , y , 8 ) ;
76349: LD_VAR 0 2
76353: PPUSH
76354: LD_VAR 0 4
76358: PPUSH
76359: LD_VAR 0 5
76363: PPUSH
76364: LD_INT 8
76366: PPUSH
76367: CALL 76872 0 4
// end ;
76371: LD_VAR 0 6
76375: RET
// export function ComRadiation ( un ) ; var eff ; begin
76376: LD_INT 0
76378: PPUSH
76379: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
76380: LD_VAR 0 1
76384: PPUSH
76385: CALL_OW 264
76389: PUSH
76390: LD_INT 91
76392: NONEQUAL
76393: IFFALSE 76397
// exit ;
76395: GO 76467
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
76397: LD_INT 68
76399: PPUSH
76400: LD_VAR 0 1
76404: PPUSH
76405: CALL_OW 255
76409: PPUSH
76410: CALL_OW 321
76414: PUSH
76415: LD_INT 2
76417: EQUAL
76418: IFFALSE 76430
// eff := 50 else
76420: LD_ADDR_VAR 0 3
76424: PUSH
76425: LD_INT 50
76427: ST_TO_ADDR
76428: GO 76438
// eff := 25 ;
76430: LD_ADDR_VAR 0 3
76434: PUSH
76435: LD_INT 25
76437: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
76438: LD_VAR 0 1
76442: PPUSH
76443: CALL_OW 250
76447: PPUSH
76448: LD_VAR 0 1
76452: PPUSH
76453: CALL_OW 251
76457: PPUSH
76458: LD_VAR 0 3
76462: PPUSH
76463: CALL_OW 495
// end ;
76467: LD_VAR 0 2
76471: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
76472: LD_INT 0
76474: PPUSH
76475: PPUSH
76476: PPUSH
76477: PPUSH
76478: PPUSH
76479: PPUSH
76480: PPUSH
76481: PPUSH
76482: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
76483: LD_VAR 0 1
76487: PPUSH
76488: CALL_OW 302
76492: NOT
76493: IFTRUE 76512
76495: PUSH
76496: LD_VAR 0 2
76500: PPUSH
76501: LD_VAR 0 3
76505: PPUSH
76506: CALL_OW 488
76510: NOT
76511: OR
76512: IFTRUE 76521
76514: PUSH
76515: LD_VAR 0 4
76519: NOT
76520: OR
76521: IFFALSE 76525
// exit ;
76523: GO 76867
// list := [ ] ;
76525: LD_ADDR_VAR 0 13
76529: PUSH
76530: EMPTY
76531: ST_TO_ADDR
// if x - r < 0 then
76532: LD_VAR 0 2
76536: PUSH
76537: LD_VAR 0 4
76541: MINUS
76542: PUSH
76543: LD_INT 0
76545: LESS
76546: IFFALSE 76558
// min_x := 0 else
76548: LD_ADDR_VAR 0 7
76552: PUSH
76553: LD_INT 0
76555: ST_TO_ADDR
76556: GO 76574
// min_x := x - r ;
76558: LD_ADDR_VAR 0 7
76562: PUSH
76563: LD_VAR 0 2
76567: PUSH
76568: LD_VAR 0 4
76572: MINUS
76573: ST_TO_ADDR
// if y - r < 0 then
76574: LD_VAR 0 3
76578: PUSH
76579: LD_VAR 0 4
76583: MINUS
76584: PUSH
76585: LD_INT 0
76587: LESS
76588: IFFALSE 76600
// min_y := 0 else
76590: LD_ADDR_VAR 0 8
76594: PUSH
76595: LD_INT 0
76597: ST_TO_ADDR
76598: GO 76616
// min_y := y - r ;
76600: LD_ADDR_VAR 0 8
76604: PUSH
76605: LD_VAR 0 3
76609: PUSH
76610: LD_VAR 0 4
76614: MINUS
76615: ST_TO_ADDR
// max_x := x + r ;
76616: LD_ADDR_VAR 0 9
76620: PUSH
76621: LD_VAR 0 2
76625: PUSH
76626: LD_VAR 0 4
76630: PLUS
76631: ST_TO_ADDR
// max_y := y + r ;
76632: LD_ADDR_VAR 0 10
76636: PUSH
76637: LD_VAR 0 3
76641: PUSH
76642: LD_VAR 0 4
76646: PLUS
76647: ST_TO_ADDR
// for _x = min_x to max_x do
76648: LD_ADDR_VAR 0 11
76652: PUSH
76653: DOUBLE
76654: LD_VAR 0 7
76658: DEC
76659: ST_TO_ADDR
76660: LD_VAR 0 9
76664: PUSH
76665: FOR_TO
76666: IFFALSE 76785
// for _y = min_y to max_y do
76668: LD_ADDR_VAR 0 12
76672: PUSH
76673: DOUBLE
76674: LD_VAR 0 8
76678: DEC
76679: ST_TO_ADDR
76680: LD_VAR 0 10
76684: PUSH
76685: FOR_TO
76686: IFFALSE 76781
// begin if not ValidHex ( _x , _y ) then
76688: LD_VAR 0 11
76692: PPUSH
76693: LD_VAR 0 12
76697: PPUSH
76698: CALL_OW 488
76702: NOT
76703: IFFALSE 76707
// continue ;
76705: GO 76685
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
76707: LD_VAR 0 11
76711: PPUSH
76712: LD_VAR 0 12
76716: PPUSH
76717: CALL_OW 351
76721: IFFALSE 76739
76723: PUSH
76724: LD_VAR 0 11
76728: PPUSH
76729: LD_VAR 0 12
76733: PPUSH
76734: CALL_OW 554
76738: AND
76739: IFFALSE 76779
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
76741: LD_ADDR_VAR 0 13
76745: PUSH
76746: LD_VAR 0 13
76750: PPUSH
76751: LD_VAR 0 13
76755: PUSH
76756: LD_INT 1
76758: PLUS
76759: PPUSH
76760: LD_VAR 0 11
76764: PUSH
76765: LD_VAR 0 12
76769: PUSH
76770: EMPTY
76771: LIST
76772: LIST
76773: PPUSH
76774: CALL_OW 2
76778: ST_TO_ADDR
// end ;
76779: GO 76685
76781: POP
76782: POP
76783: GO 76665
76785: POP
76786: POP
// if not list then
76787: LD_VAR 0 13
76791: NOT
76792: IFFALSE 76796
// exit ;
76794: GO 76867
// for i in list do
76796: LD_ADDR_VAR 0 6
76800: PUSH
76801: LD_VAR 0 13
76805: PUSH
76806: FOR_IN
76807: IFFALSE 76865
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
76809: LD_VAR 0 1
76813: PPUSH
76814: LD_STRING M
76816: PUSH
76817: LD_VAR 0 6
76821: PUSH
76822: LD_INT 1
76824: ARRAY
76825: PUSH
76826: LD_VAR 0 6
76830: PUSH
76831: LD_INT 2
76833: ARRAY
76834: PUSH
76835: LD_INT 0
76837: PUSH
76838: LD_INT 0
76840: PUSH
76841: LD_INT 0
76843: PUSH
76844: LD_INT 0
76846: PUSH
76847: EMPTY
76848: LIST
76849: LIST
76850: LIST
76851: LIST
76852: LIST
76853: LIST
76854: LIST
76855: PUSH
76856: EMPTY
76857: LIST
76858: PPUSH
76859: CALL_OW 447
76863: GO 76806
76865: POP
76866: POP
// end ;
76867: LD_VAR 0 5
76871: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
76872: LD_INT 0
76874: PPUSH
76875: PPUSH
76876: PPUSH
76877: PPUSH
76878: PPUSH
76879: PPUSH
76880: PPUSH
76881: PPUSH
76882: PPUSH
76883: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
76884: LD_VAR 0 1
76888: PPUSH
76889: CALL_OW 302
76893: NOT
76894: IFTRUE 76913
76896: PUSH
76897: LD_VAR 0 2
76901: PPUSH
76902: LD_VAR 0 3
76906: PPUSH
76907: CALL_OW 488
76911: NOT
76912: OR
76913: IFTRUE 76922
76915: PUSH
76916: LD_VAR 0 4
76920: NOT
76921: OR
76922: IFFALSE 76926
// exit ;
76924: GO 77443
// list := [ ] ;
76926: LD_ADDR_VAR 0 13
76930: PUSH
76931: EMPTY
76932: ST_TO_ADDR
// if x - r < 0 then
76933: LD_VAR 0 2
76937: PUSH
76938: LD_VAR 0 4
76942: MINUS
76943: PUSH
76944: LD_INT 0
76946: LESS
76947: IFFALSE 76959
// min_x := 0 else
76949: LD_ADDR_VAR 0 7
76953: PUSH
76954: LD_INT 0
76956: ST_TO_ADDR
76957: GO 76975
// min_x := x - r ;
76959: LD_ADDR_VAR 0 7
76963: PUSH
76964: LD_VAR 0 2
76968: PUSH
76969: LD_VAR 0 4
76973: MINUS
76974: ST_TO_ADDR
// if y - r < 0 then
76975: LD_VAR 0 3
76979: PUSH
76980: LD_VAR 0 4
76984: MINUS
76985: PUSH
76986: LD_INT 0
76988: LESS
76989: IFFALSE 77001
// min_y := 0 else
76991: LD_ADDR_VAR 0 8
76995: PUSH
76996: LD_INT 0
76998: ST_TO_ADDR
76999: GO 77017
// min_y := y - r ;
77001: LD_ADDR_VAR 0 8
77005: PUSH
77006: LD_VAR 0 3
77010: PUSH
77011: LD_VAR 0 4
77015: MINUS
77016: ST_TO_ADDR
// max_x := x + r ;
77017: LD_ADDR_VAR 0 9
77021: PUSH
77022: LD_VAR 0 2
77026: PUSH
77027: LD_VAR 0 4
77031: PLUS
77032: ST_TO_ADDR
// max_y := y + r ;
77033: LD_ADDR_VAR 0 10
77037: PUSH
77038: LD_VAR 0 3
77042: PUSH
77043: LD_VAR 0 4
77047: PLUS
77048: ST_TO_ADDR
// for _x = min_x to max_x do
77049: LD_ADDR_VAR 0 11
77053: PUSH
77054: DOUBLE
77055: LD_VAR 0 7
77059: DEC
77060: ST_TO_ADDR
77061: LD_VAR 0 9
77065: PUSH
77066: FOR_TO
77067: IFFALSE 77186
// for _y = min_y to max_y do
77069: LD_ADDR_VAR 0 12
77073: PUSH
77074: DOUBLE
77075: LD_VAR 0 8
77079: DEC
77080: ST_TO_ADDR
77081: LD_VAR 0 10
77085: PUSH
77086: FOR_TO
77087: IFFALSE 77182
// begin if not ValidHex ( _x , _y ) then
77089: LD_VAR 0 11
77093: PPUSH
77094: LD_VAR 0 12
77098: PPUSH
77099: CALL_OW 488
77103: NOT
77104: IFFALSE 77108
// continue ;
77106: GO 77086
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
77108: LD_VAR 0 11
77112: PPUSH
77113: LD_VAR 0 12
77117: PPUSH
77118: CALL_OW 351
77122: IFFALSE 77140
77124: PUSH
77125: LD_VAR 0 11
77129: PPUSH
77130: LD_VAR 0 12
77134: PPUSH
77135: CALL_OW 554
77139: AND
77140: IFFALSE 77180
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
77142: LD_ADDR_VAR 0 13
77146: PUSH
77147: LD_VAR 0 13
77151: PPUSH
77152: LD_VAR 0 13
77156: PUSH
77157: LD_INT 1
77159: PLUS
77160: PPUSH
77161: LD_VAR 0 11
77165: PUSH
77166: LD_VAR 0 12
77170: PUSH
77171: EMPTY
77172: LIST
77173: LIST
77174: PPUSH
77175: CALL_OW 2
77179: ST_TO_ADDR
// end ;
77180: GO 77086
77182: POP
77183: POP
77184: GO 77066
77186: POP
77187: POP
// if not list then
77188: LD_VAR 0 13
77192: NOT
77193: IFFALSE 77197
// exit ;
77195: GO 77443
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
77197: LD_ADDR_VAR 0 13
77201: PUSH
77202: LD_VAR 0 1
77206: PPUSH
77207: LD_VAR 0 13
77211: PPUSH
77212: LD_INT 1
77214: PPUSH
77215: LD_INT 1
77217: PPUSH
77218: CALL 21294 0 4
77222: ST_TO_ADDR
// ComStop ( flame ) ;
77223: LD_VAR 0 1
77227: PPUSH
77228: CALL_OW 141
// for i in list do
77232: LD_ADDR_VAR 0 6
77236: PUSH
77237: LD_VAR 0 13
77241: PUSH
77242: FOR_IN
77243: IFFALSE 77274
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
77245: LD_VAR 0 1
77249: PPUSH
77250: LD_VAR 0 6
77254: PUSH
77255: LD_INT 1
77257: ARRAY
77258: PPUSH
77259: LD_VAR 0 6
77263: PUSH
77264: LD_INT 2
77266: ARRAY
77267: PPUSH
77268: CALL_OW 176
77272: GO 77242
77274: POP
77275: POP
// repeat wait ( 0 0$1 ) ;
77276: LD_INT 35
77278: PPUSH
77279: CALL_OW 67
// task := GetTaskList ( flame ) ;
77283: LD_ADDR_VAR 0 14
77287: PUSH
77288: LD_VAR 0 1
77292: PPUSH
77293: CALL_OW 437
77297: ST_TO_ADDR
// if not task then
77298: LD_VAR 0 14
77302: NOT
77303: IFFALSE 77307
// exit ;
77305: GO 77443
// if task [ 1 ] [ 1 ] <> | then
77307: LD_VAR 0 14
77311: PUSH
77312: LD_INT 1
77314: ARRAY
77315: PUSH
77316: LD_INT 1
77318: ARRAY
77319: PUSH
77320: LD_STRING |
77322: NONEQUAL
77323: IFFALSE 77327
// exit ;
77325: GO 77443
// _x := task [ 1 ] [ 2 ] ;
77327: LD_ADDR_VAR 0 11
77331: PUSH
77332: LD_VAR 0 14
77336: PUSH
77337: LD_INT 1
77339: ARRAY
77340: PUSH
77341: LD_INT 2
77343: ARRAY
77344: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
77345: LD_ADDR_VAR 0 12
77349: PUSH
77350: LD_VAR 0 14
77354: PUSH
77355: LD_INT 1
77357: ARRAY
77358: PUSH
77359: LD_INT 3
77361: ARRAY
77362: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
77363: LD_VAR 0 11
77367: PPUSH
77368: LD_VAR 0 12
77372: PPUSH
77373: CALL_OW 351
77377: NOT
77378: IFTRUE 77397
77380: PUSH
77381: LD_VAR 0 11
77385: PPUSH
77386: LD_VAR 0 12
77390: PPUSH
77391: CALL_OW 554
77395: NOT
77396: OR
77397: IFFALSE 77431
// begin task := Delete ( task , 1 ) ;
77399: LD_ADDR_VAR 0 14
77403: PUSH
77404: LD_VAR 0 14
77408: PPUSH
77409: LD_INT 1
77411: PPUSH
77412: CALL_OW 3
77416: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
77417: LD_VAR 0 1
77421: PPUSH
77422: LD_VAR 0 14
77426: PPUSH
77427: CALL_OW 446
// end ; until not HasTask ( flame ) ;
77431: LD_VAR 0 1
77435: PPUSH
77436: CALL_OW 314
77440: NOT
77441: IFFALSE 77276
// end ;
77443: LD_VAR 0 5
77447: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
77448: LD_EXP 123
77452: NOT
77453: IFFALSE 77503
77455: GO 77457
77457: DISABLE
// begin initHack := true ;
77458: LD_ADDR_EXP 123
77462: PUSH
77463: LD_INT 1
77465: ST_TO_ADDR
// hackTanks := [ ] ;
77466: LD_ADDR_EXP 124
77470: PUSH
77471: EMPTY
77472: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
77473: LD_ADDR_EXP 125
77477: PUSH
77478: EMPTY
77479: ST_TO_ADDR
// hackLimit := 3 ;
77480: LD_ADDR_EXP 126
77484: PUSH
77485: LD_INT 3
77487: ST_TO_ADDR
// hackDist := 12 ;
77488: LD_ADDR_EXP 127
77492: PUSH
77493: LD_INT 12
77495: ST_TO_ADDR
// hackCounter := [ ] ;
77496: LD_ADDR_EXP 128
77500: PUSH
77501: EMPTY
77502: ST_TO_ADDR
// end ;
77503: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
77504: LD_EXP 123
77508: IFFALSE 77526
77510: PUSH
77511: LD_INT 34
77513: PUSH
77514: LD_INT 99
77516: PUSH
77517: EMPTY
77518: LIST
77519: LIST
77520: PPUSH
77521: CALL_OW 69
77525: AND
77526: IFFALSE 77779
77528: GO 77530
77530: DISABLE
77531: LD_INT 0
77533: PPUSH
77534: PPUSH
// begin enable ;
77535: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
77536: LD_ADDR_VAR 0 1
77540: PUSH
77541: LD_INT 34
77543: PUSH
77544: LD_INT 99
77546: PUSH
77547: EMPTY
77548: LIST
77549: LIST
77550: PPUSH
77551: CALL_OW 69
77555: PUSH
77556: FOR_IN
77557: IFFALSE 77777
// begin if not i in hackTanks then
77559: LD_VAR 0 1
77563: PUSH
77564: LD_EXP 124
77568: IN
77569: NOT
77570: IFFALSE 77653
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
77572: LD_ADDR_EXP 124
77576: PUSH
77577: LD_EXP 124
77581: PPUSH
77582: LD_EXP 124
77586: PUSH
77587: LD_INT 1
77589: PLUS
77590: PPUSH
77591: LD_VAR 0 1
77595: PPUSH
77596: CALL_OW 1
77600: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
77601: LD_ADDR_EXP 125
77605: PUSH
77606: LD_EXP 125
77610: PPUSH
77611: LD_EXP 125
77615: PUSH
77616: LD_INT 1
77618: PLUS
77619: PPUSH
77620: EMPTY
77621: PPUSH
77622: CALL_OW 1
77626: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
77627: LD_ADDR_EXP 128
77631: PUSH
77632: LD_EXP 128
77636: PPUSH
77637: LD_EXP 128
77641: PUSH
77642: LD_INT 1
77644: PLUS
77645: PPUSH
77646: EMPTY
77647: PPUSH
77648: CALL_OW 1
77652: ST_TO_ADDR
// end ; if not IsOk ( i ) then
77653: LD_VAR 0 1
77657: PPUSH
77658: CALL_OW 302
77662: NOT
77663: IFFALSE 77676
// begin HackUnlinkAll ( i ) ;
77665: LD_VAR 0 1
77669: PPUSH
77670: CALL 77782 0 1
// continue ;
77674: GO 77556
// end ; HackCheckCapturedStatus ( i ) ;
77676: LD_VAR 0 1
77680: PPUSH
77681: CALL 78227 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
77685: LD_ADDR_VAR 0 2
77689: PUSH
77690: LD_INT 81
77692: PUSH
77693: LD_VAR 0 1
77697: PPUSH
77698: CALL_OW 255
77702: PUSH
77703: EMPTY
77704: LIST
77705: LIST
77706: PUSH
77707: LD_INT 33
77709: PUSH
77710: LD_INT 3
77712: PUSH
77713: EMPTY
77714: LIST
77715: LIST
77716: PUSH
77717: LD_INT 91
77719: PUSH
77720: LD_VAR 0 1
77724: PUSH
77725: LD_EXP 127
77729: PUSH
77730: EMPTY
77731: LIST
77732: LIST
77733: LIST
77734: PUSH
77735: LD_INT 50
77737: PUSH
77738: EMPTY
77739: LIST
77740: PUSH
77741: EMPTY
77742: LIST
77743: LIST
77744: LIST
77745: LIST
77746: PPUSH
77747: CALL_OW 69
77751: ST_TO_ADDR
// if not tmp then
77752: LD_VAR 0 2
77756: NOT
77757: IFFALSE 77761
// continue ;
77759: GO 77556
// HackLink ( i , tmp ) ;
77761: LD_VAR 0 1
77765: PPUSH
77766: LD_VAR 0 2
77770: PPUSH
77771: CALL 77918 0 2
// end ;
77775: GO 77556
77777: POP
77778: POP
// end ;
77779: PPOPN 2
77781: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
77782: LD_INT 0
77784: PPUSH
77785: PPUSH
77786: PPUSH
// if not hack in hackTanks then
77787: LD_VAR 0 1
77791: PUSH
77792: LD_EXP 124
77796: IN
77797: NOT
77798: IFFALSE 77802
// exit ;
77800: GO 77913
// index := GetElementIndex ( hackTanks , hack ) ;
77802: LD_ADDR_VAR 0 4
77806: PUSH
77807: LD_EXP 124
77811: PPUSH
77812: LD_VAR 0 1
77816: PPUSH
77817: CALL 20589 0 2
77821: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
77822: LD_EXP 125
77826: PUSH
77827: LD_VAR 0 4
77831: ARRAY
77832: IFFALSE 77913
// begin for i in hackTanksCaptured [ index ] do
77834: LD_ADDR_VAR 0 3
77838: PUSH
77839: LD_EXP 125
77843: PUSH
77844: LD_VAR 0 4
77848: ARRAY
77849: PUSH
77850: FOR_IN
77851: IFFALSE 77877
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
77853: LD_VAR 0 3
77857: PUSH
77858: LD_INT 1
77860: ARRAY
77861: PPUSH
77862: LD_VAR 0 3
77866: PUSH
77867: LD_INT 2
77869: ARRAY
77870: PPUSH
77871: CALL_OW 235
77875: GO 77850
77877: POP
77878: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
77879: LD_ADDR_EXP 125
77883: PUSH
77884: LD_EXP 125
77888: PPUSH
77889: LD_VAR 0 4
77893: PPUSH
77894: EMPTY
77895: PPUSH
77896: CALL_OW 1
77900: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
77901: LD_VAR 0 1
77905: PPUSH
77906: LD_INT 0
77908: PPUSH
77909: CALL_OW 505
// end ; end ;
77913: LD_VAR 0 2
77917: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
77918: LD_INT 0
77920: PPUSH
77921: PPUSH
77922: PPUSH
// if not hack in hackTanks or not vehicles then
77923: LD_VAR 0 1
77927: PUSH
77928: LD_EXP 124
77932: IN
77933: NOT
77934: IFTRUE 77943
77936: PUSH
77937: LD_VAR 0 2
77941: NOT
77942: OR
77943: IFFALSE 77947
// exit ;
77945: GO 78222
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
77947: LD_ADDR_VAR 0 2
77951: PUSH
77952: LD_VAR 0 1
77956: PPUSH
77957: LD_VAR 0 2
77961: PPUSH
77962: LD_INT 1
77964: PPUSH
77965: LD_INT 1
77967: PPUSH
77968: CALL 21241 0 4
77972: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
77973: LD_ADDR_VAR 0 5
77977: PUSH
77978: LD_EXP 124
77982: PPUSH
77983: LD_VAR 0 1
77987: PPUSH
77988: CALL 20589 0 2
77992: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
77993: LD_EXP 125
77997: PUSH
77998: LD_VAR 0 5
78002: ARRAY
78003: PUSH
78004: LD_EXP 126
78008: LESS
78009: IFFALSE 78198
// begin for i := 1 to vehicles do
78011: LD_ADDR_VAR 0 4
78015: PUSH
78016: DOUBLE
78017: LD_INT 1
78019: DEC
78020: ST_TO_ADDR
78021: LD_VAR 0 2
78025: PUSH
78026: FOR_TO
78027: IFFALSE 78196
// begin if hackTanksCaptured [ index ] = hackLimit then
78029: LD_EXP 125
78033: PUSH
78034: LD_VAR 0 5
78038: ARRAY
78039: PUSH
78040: LD_EXP 126
78044: EQUAL
78045: IFFALSE 78049
// break ;
78047: GO 78196
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
78049: LD_ADDR_EXP 128
78053: PUSH
78054: LD_EXP 128
78058: PPUSH
78059: LD_VAR 0 5
78063: PPUSH
78064: LD_EXP 128
78068: PUSH
78069: LD_VAR 0 5
78073: ARRAY
78074: PUSH
78075: LD_INT 1
78077: PLUS
78078: PPUSH
78079: CALL_OW 1
78083: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
78084: LD_ADDR_EXP 125
78088: PUSH
78089: LD_EXP 125
78093: PPUSH
78094: LD_VAR 0 5
78098: PUSH
78099: LD_EXP 125
78103: PUSH
78104: LD_VAR 0 5
78108: ARRAY
78109: PUSH
78110: LD_INT 1
78112: PLUS
78113: PUSH
78114: EMPTY
78115: LIST
78116: LIST
78117: PPUSH
78118: LD_VAR 0 2
78122: PUSH
78123: LD_VAR 0 4
78127: ARRAY
78128: PUSH
78129: LD_VAR 0 2
78133: PUSH
78134: LD_VAR 0 4
78138: ARRAY
78139: PPUSH
78140: CALL_OW 255
78144: PUSH
78145: EMPTY
78146: LIST
78147: LIST
78148: PPUSH
78149: CALL 20806 0 3
78153: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
78154: LD_VAR 0 2
78158: PUSH
78159: LD_VAR 0 4
78163: ARRAY
78164: PPUSH
78165: LD_VAR 0 1
78169: PPUSH
78170: CALL_OW 255
78174: PPUSH
78175: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
78179: LD_VAR 0 2
78183: PUSH
78184: LD_VAR 0 4
78188: ARRAY
78189: PPUSH
78190: CALL_OW 141
// end ;
78194: GO 78026
78196: POP
78197: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
78198: LD_VAR 0 1
78202: PPUSH
78203: LD_EXP 125
78207: PUSH
78208: LD_VAR 0 5
78212: ARRAY
78213: PUSH
78214: LD_INT 0
78216: PLUS
78217: PPUSH
78218: CALL_OW 505
// end ;
78222: LD_VAR 0 3
78226: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
78227: LD_INT 0
78229: PPUSH
78230: PPUSH
78231: PPUSH
78232: PPUSH
// if not hack in hackTanks then
78233: LD_VAR 0 1
78237: PUSH
78238: LD_EXP 124
78242: IN
78243: NOT
78244: IFFALSE 78248
// exit ;
78246: GO 78492
// index := GetElementIndex ( hackTanks , hack ) ;
78248: LD_ADDR_VAR 0 4
78252: PUSH
78253: LD_EXP 124
78257: PPUSH
78258: LD_VAR 0 1
78262: PPUSH
78263: CALL 20589 0 2
78267: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
78268: LD_ADDR_VAR 0 3
78272: PUSH
78273: DOUBLE
78274: LD_EXP 125
78278: PUSH
78279: LD_VAR 0 4
78283: ARRAY
78284: INC
78285: ST_TO_ADDR
78286: LD_INT 1
78288: PUSH
78289: FOR_DOWNTO
78290: IFFALSE 78466
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
78292: LD_ADDR_VAR 0 5
78296: PUSH
78297: LD_EXP 125
78301: PUSH
78302: LD_VAR 0 4
78306: ARRAY
78307: PUSH
78308: LD_VAR 0 3
78312: ARRAY
78313: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
78314: LD_VAR 0 5
78318: PUSH
78319: LD_INT 1
78321: ARRAY
78322: PPUSH
78323: CALL_OW 302
78327: NOT
78328: IFTRUE 78356
78330: PUSH
78331: LD_VAR 0 5
78335: PUSH
78336: LD_INT 1
78338: ARRAY
78339: PPUSH
78340: CALL_OW 255
78344: PUSH
78345: LD_VAR 0 1
78349: PPUSH
78350: CALL_OW 255
78354: NONEQUAL
78355: OR
78356: IFFALSE 78464
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
78358: LD_VAR 0 5
78362: PUSH
78363: LD_INT 1
78365: ARRAY
78366: PPUSH
78367: CALL_OW 305
78371: IFFALSE 78399
78373: PUSH
78374: LD_VAR 0 5
78378: PUSH
78379: LD_INT 1
78381: ARRAY
78382: PPUSH
78383: CALL_OW 255
78387: PUSH
78388: LD_VAR 0 1
78392: PPUSH
78393: CALL_OW 255
78397: EQUAL
78398: AND
78399: IFFALSE 78423
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
78401: LD_VAR 0 5
78405: PUSH
78406: LD_INT 1
78408: ARRAY
78409: PPUSH
78410: LD_VAR 0 5
78414: PUSH
78415: LD_INT 2
78417: ARRAY
78418: PPUSH
78419: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
78423: LD_ADDR_EXP 125
78427: PUSH
78428: LD_EXP 125
78432: PPUSH
78433: LD_VAR 0 4
78437: PPUSH
78438: LD_EXP 125
78442: PUSH
78443: LD_VAR 0 4
78447: ARRAY
78448: PPUSH
78449: LD_VAR 0 3
78453: PPUSH
78454: CALL_OW 3
78458: PPUSH
78459: CALL_OW 1
78463: ST_TO_ADDR
// end ; end ;
78464: GO 78289
78466: POP
78467: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
78468: LD_VAR 0 1
78472: PPUSH
78473: LD_EXP 125
78477: PUSH
78478: LD_VAR 0 4
78482: ARRAY
78483: PUSH
78484: LD_INT 0
78486: PLUS
78487: PPUSH
78488: CALL_OW 505
// end ;
78492: LD_VAR 0 2
78496: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
78497: LD_INT 0
78499: PPUSH
78500: PPUSH
78501: PPUSH
78502: PPUSH
// if not hack in hackTanks then
78503: LD_VAR 0 1
78507: PUSH
78508: LD_EXP 124
78512: IN
78513: NOT
78514: IFFALSE 78518
// exit ;
78516: GO 78603
// index := GetElementIndex ( hackTanks , hack ) ;
78518: LD_ADDR_VAR 0 5
78522: PUSH
78523: LD_EXP 124
78527: PPUSH
78528: LD_VAR 0 1
78532: PPUSH
78533: CALL 20589 0 2
78537: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
78538: LD_ADDR_VAR 0 4
78542: PUSH
78543: DOUBLE
78544: LD_INT 1
78546: DEC
78547: ST_TO_ADDR
78548: LD_EXP 125
78552: PUSH
78553: LD_VAR 0 5
78557: ARRAY
78558: PUSH
78559: FOR_TO
78560: IFFALSE 78601
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
78562: LD_EXP 125
78566: PUSH
78567: LD_VAR 0 5
78571: ARRAY
78572: PUSH
78573: LD_VAR 0 4
78577: ARRAY
78578: PUSH
78579: LD_INT 1
78581: ARRAY
78582: PUSH
78583: LD_VAR 0 2
78587: EQUAL
78588: IFFALSE 78599
// KillUnit ( vehicle ) ;
78590: LD_VAR 0 2
78594: PPUSH
78595: CALL_OW 66
78599: GO 78559
78601: POP
78602: POP
// end ;
78603: LD_VAR 0 3
78607: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
78608: LD_EXP 129
78612: NOT
78613: IFFALSE 78648
78615: GO 78617
78617: DISABLE
// begin initMiner := true ;
78618: LD_ADDR_EXP 129
78622: PUSH
78623: LD_INT 1
78625: ST_TO_ADDR
// minersList := [ ] ;
78626: LD_ADDR_EXP 130
78630: PUSH
78631: EMPTY
78632: ST_TO_ADDR
// minerMinesList := [ ] ;
78633: LD_ADDR_EXP 131
78637: PUSH
78638: EMPTY
78639: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
78640: LD_ADDR_EXP 132
78644: PUSH
78645: LD_INT 5
78647: ST_TO_ADDR
// end ;
78648: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
78649: LD_EXP 129
78653: IFFALSE 78671
78655: PUSH
78656: LD_INT 34
78658: PUSH
78659: LD_INT 81
78661: PUSH
78662: EMPTY
78663: LIST
78664: LIST
78665: PPUSH
78666: CALL_OW 69
78670: AND
78671: IFFALSE 79134
78673: GO 78675
78675: DISABLE
78676: LD_INT 0
78678: PPUSH
78679: PPUSH
78680: PPUSH
78681: PPUSH
// begin enable ;
78682: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
78683: LD_ADDR_VAR 0 1
78687: PUSH
78688: LD_INT 34
78690: PUSH
78691: LD_INT 81
78693: PUSH
78694: EMPTY
78695: LIST
78696: LIST
78697: PPUSH
78698: CALL_OW 69
78702: PUSH
78703: FOR_IN
78704: IFFALSE 78776
// begin if not i in minersList then
78706: LD_VAR 0 1
78710: PUSH
78711: LD_EXP 130
78715: IN
78716: NOT
78717: IFFALSE 78774
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
78719: LD_ADDR_EXP 130
78723: PUSH
78724: LD_EXP 130
78728: PPUSH
78729: LD_EXP 130
78733: PUSH
78734: LD_INT 1
78736: PLUS
78737: PPUSH
78738: LD_VAR 0 1
78742: PPUSH
78743: CALL_OW 1
78747: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
78748: LD_ADDR_EXP 131
78752: PUSH
78753: LD_EXP 131
78757: PPUSH
78758: LD_EXP 131
78762: PUSH
78763: LD_INT 1
78765: PLUS
78766: PPUSH
78767: EMPTY
78768: PPUSH
78769: CALL_OW 1
78773: ST_TO_ADDR
// end end ;
78774: GO 78703
78776: POP
78777: POP
// for i := minerMinesList downto 1 do
78778: LD_ADDR_VAR 0 1
78782: PUSH
78783: DOUBLE
78784: LD_EXP 131
78788: INC
78789: ST_TO_ADDR
78790: LD_INT 1
78792: PUSH
78793: FOR_DOWNTO
78794: IFFALSE 79132
// begin if IsLive ( minersList [ i ] ) then
78796: LD_EXP 130
78800: PUSH
78801: LD_VAR 0 1
78805: ARRAY
78806: PPUSH
78807: CALL_OW 300
78811: IFFALSE 78839
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
78813: LD_EXP 130
78817: PUSH
78818: LD_VAR 0 1
78822: ARRAY
78823: PPUSH
78824: LD_EXP 131
78828: PUSH
78829: LD_VAR 0 1
78833: ARRAY
78834: PPUSH
78835: CALL_OW 505
// if not minerMinesList [ i ] then
78839: LD_EXP 131
78843: PUSH
78844: LD_VAR 0 1
78848: ARRAY
78849: NOT
78850: IFFALSE 78854
// continue ;
78852: GO 78793
// for j := minerMinesList [ i ] downto 1 do
78854: LD_ADDR_VAR 0 2
78858: PUSH
78859: DOUBLE
78860: LD_EXP 131
78864: PUSH
78865: LD_VAR 0 1
78869: ARRAY
78870: INC
78871: ST_TO_ADDR
78872: LD_INT 1
78874: PUSH
78875: FOR_DOWNTO
78876: IFFALSE 79128
// begin side := GetSide ( minersList [ i ] ) ;
78878: LD_ADDR_VAR 0 3
78882: PUSH
78883: LD_EXP 130
78887: PUSH
78888: LD_VAR 0 1
78892: ARRAY
78893: PPUSH
78894: CALL_OW 255
78898: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
78899: LD_ADDR_VAR 0 4
78903: PUSH
78904: LD_EXP 131
78908: PUSH
78909: LD_VAR 0 1
78913: ARRAY
78914: PUSH
78915: LD_VAR 0 2
78919: ARRAY
78920: PUSH
78921: LD_INT 1
78923: ARRAY
78924: PPUSH
78925: LD_EXP 131
78929: PUSH
78930: LD_VAR 0 1
78934: ARRAY
78935: PUSH
78936: LD_VAR 0 2
78940: ARRAY
78941: PUSH
78942: LD_INT 2
78944: ARRAY
78945: PPUSH
78946: CALL_OW 428
78950: ST_TO_ADDR
// if not tmp then
78951: LD_VAR 0 4
78955: NOT
78956: IFFALSE 78960
// continue ;
78958: GO 78875
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
78960: LD_VAR 0 4
78964: PUSH
78965: LD_INT 81
78967: PUSH
78968: LD_VAR 0 3
78972: PUSH
78973: EMPTY
78974: LIST
78975: LIST
78976: PPUSH
78977: CALL_OW 69
78981: IN
78982: IFFALSE 79032
78984: PUSH
78985: LD_EXP 131
78989: PUSH
78990: LD_VAR 0 1
78994: ARRAY
78995: PUSH
78996: LD_VAR 0 2
79000: ARRAY
79001: PUSH
79002: LD_INT 1
79004: ARRAY
79005: PPUSH
79006: LD_EXP 131
79010: PUSH
79011: LD_VAR 0 1
79015: ARRAY
79016: PUSH
79017: LD_VAR 0 2
79021: ARRAY
79022: PUSH
79023: LD_INT 2
79025: ARRAY
79026: PPUSH
79027: CALL_OW 458
79031: AND
79032: IFFALSE 79126
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
79034: LD_EXP 131
79038: PUSH
79039: LD_VAR 0 1
79043: ARRAY
79044: PUSH
79045: LD_VAR 0 2
79049: ARRAY
79050: PUSH
79051: LD_INT 1
79053: ARRAY
79054: PPUSH
79055: LD_EXP 131
79059: PUSH
79060: LD_VAR 0 1
79064: ARRAY
79065: PUSH
79066: LD_VAR 0 2
79070: ARRAY
79071: PUSH
79072: LD_INT 2
79074: ARRAY
79075: PPUSH
79076: LD_VAR 0 3
79080: PPUSH
79081: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
79085: LD_ADDR_EXP 131
79089: PUSH
79090: LD_EXP 131
79094: PPUSH
79095: LD_VAR 0 1
79099: PPUSH
79100: LD_EXP 131
79104: PUSH
79105: LD_VAR 0 1
79109: ARRAY
79110: PPUSH
79111: LD_VAR 0 2
79115: PPUSH
79116: CALL_OW 3
79120: PPUSH
79121: CALL_OW 1
79125: ST_TO_ADDR
// end ; end ;
79126: GO 78875
79128: POP
79129: POP
// end ;
79130: GO 78793
79132: POP
79133: POP
// end ;
79134: PPOPN 4
79136: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
79137: LD_INT 0
79139: PPUSH
79140: PPUSH
// result := false ;
79141: LD_ADDR_VAR 0 4
79145: PUSH
79146: LD_INT 0
79148: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
79149: LD_VAR 0 1
79153: PPUSH
79154: CALL_OW 264
79158: PUSH
79159: LD_INT 81
79161: EQUAL
79162: NOT
79163: IFFALSE 79167
// exit ;
79165: GO 79411
// index := GetElementIndex ( minersList , unit ) ;
79167: LD_ADDR_VAR 0 5
79171: PUSH
79172: LD_EXP 130
79176: PPUSH
79177: LD_VAR 0 1
79181: PPUSH
79182: CALL 20589 0 2
79186: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
79187: LD_EXP 131
79191: PUSH
79192: LD_VAR 0 5
79196: ARRAY
79197: PUSH
79198: LD_EXP 132
79202: GREATEREQUAL
79203: IFFALSE 79207
// exit ;
79205: GO 79411
// ComMoveXY ( unit , x , y ) ;
79207: LD_VAR 0 1
79211: PPUSH
79212: LD_VAR 0 2
79216: PPUSH
79217: LD_VAR 0 3
79221: PPUSH
79222: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
79226: LD_INT 35
79228: PPUSH
79229: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
79233: LD_VAR 0 1
79237: PPUSH
79238: LD_VAR 0 2
79242: PPUSH
79243: LD_VAR 0 3
79247: PPUSH
79248: CALL 52635 0 3
79252: NOT
79253: IFFALSE 79266
79255: PUSH
79256: LD_VAR 0 1
79260: PPUSH
79261: CALL_OW 314
79265: AND
79266: IFFALSE 79270
// exit ;
79268: GO 79411
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
79270: LD_VAR 0 2
79274: PPUSH
79275: LD_VAR 0 3
79279: PPUSH
79280: CALL_OW 428
79284: PUSH
79285: LD_VAR 0 1
79289: EQUAL
79290: IFFALSE 79304
79292: PUSH
79293: LD_VAR 0 1
79297: PPUSH
79298: CALL_OW 314
79302: NOT
79303: AND
79304: IFFALSE 79226
// PlaySoundXY ( x , y , PlantMine ) ;
79306: LD_VAR 0 2
79310: PPUSH
79311: LD_VAR 0 3
79315: PPUSH
79316: LD_STRING PlantMine
79318: PPUSH
79319: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
79323: LD_VAR 0 2
79327: PPUSH
79328: LD_VAR 0 3
79332: PPUSH
79333: LD_VAR 0 1
79337: PPUSH
79338: CALL_OW 255
79342: PPUSH
79343: LD_INT 0
79345: PPUSH
79346: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
79350: LD_ADDR_EXP 131
79354: PUSH
79355: LD_EXP 131
79359: PPUSH
79360: LD_VAR 0 5
79364: PUSH
79365: LD_EXP 131
79369: PUSH
79370: LD_VAR 0 5
79374: ARRAY
79375: PUSH
79376: LD_INT 1
79378: PLUS
79379: PUSH
79380: EMPTY
79381: LIST
79382: LIST
79383: PPUSH
79384: LD_VAR 0 2
79388: PUSH
79389: LD_VAR 0 3
79393: PUSH
79394: EMPTY
79395: LIST
79396: LIST
79397: PPUSH
79398: CALL 20806 0 3
79402: ST_TO_ADDR
// result := true ;
79403: LD_ADDR_VAR 0 4
79407: PUSH
79408: LD_INT 1
79410: ST_TO_ADDR
// end ;
79411: LD_VAR 0 4
79415: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
79416: LD_INT 0
79418: PPUSH
79419: PPUSH
79420: PPUSH
// if not unit in minersList then
79421: LD_VAR 0 1
79425: PUSH
79426: LD_EXP 130
79430: IN
79431: NOT
79432: IFFALSE 79436
// exit ;
79434: GO 79830
// index := GetElementIndex ( minersList , unit ) ;
79436: LD_ADDR_VAR 0 6
79440: PUSH
79441: LD_EXP 130
79445: PPUSH
79446: LD_VAR 0 1
79450: PPUSH
79451: CALL 20589 0 2
79455: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
79456: LD_ADDR_VAR 0 5
79460: PUSH
79461: DOUBLE
79462: LD_EXP 131
79466: PUSH
79467: LD_VAR 0 6
79471: ARRAY
79472: INC
79473: ST_TO_ADDR
79474: LD_INT 1
79476: PUSH
79477: FOR_DOWNTO
79478: IFFALSE 79641
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
79480: LD_EXP 131
79484: PUSH
79485: LD_VAR 0 6
79489: ARRAY
79490: PUSH
79491: LD_VAR 0 5
79495: ARRAY
79496: PUSH
79497: LD_INT 1
79499: ARRAY
79500: PUSH
79501: LD_VAR 0 2
79505: EQUAL
79506: IFFALSE 79536
79508: PUSH
79509: LD_EXP 131
79513: PUSH
79514: LD_VAR 0 6
79518: ARRAY
79519: PUSH
79520: LD_VAR 0 5
79524: ARRAY
79525: PUSH
79526: LD_INT 2
79528: ARRAY
79529: PUSH
79530: LD_VAR 0 3
79534: EQUAL
79535: AND
79536: IFFALSE 79639
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
79538: LD_EXP 131
79542: PUSH
79543: LD_VAR 0 6
79547: ARRAY
79548: PUSH
79549: LD_VAR 0 5
79553: ARRAY
79554: PUSH
79555: LD_INT 1
79557: ARRAY
79558: PPUSH
79559: LD_EXP 131
79563: PUSH
79564: LD_VAR 0 6
79568: ARRAY
79569: PUSH
79570: LD_VAR 0 5
79574: ARRAY
79575: PUSH
79576: LD_INT 2
79578: ARRAY
79579: PPUSH
79580: LD_VAR 0 1
79584: PPUSH
79585: CALL_OW 255
79589: PPUSH
79590: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
79594: LD_ADDR_EXP 131
79598: PUSH
79599: LD_EXP 131
79603: PPUSH
79604: LD_VAR 0 6
79608: PPUSH
79609: LD_EXP 131
79613: PUSH
79614: LD_VAR 0 6
79618: ARRAY
79619: PPUSH
79620: LD_VAR 0 5
79624: PPUSH
79625: CALL_OW 3
79629: PPUSH
79630: CALL_OW 1
79634: ST_TO_ADDR
// exit ;
79635: POP
79636: POP
79637: GO 79830
// end ; end ;
79639: GO 79477
79641: POP
79642: POP
// for i := minerMinesList [ index ] downto 1 do
79643: LD_ADDR_VAR 0 5
79647: PUSH
79648: DOUBLE
79649: LD_EXP 131
79653: PUSH
79654: LD_VAR 0 6
79658: ARRAY
79659: INC
79660: ST_TO_ADDR
79661: LD_INT 1
79663: PUSH
79664: FOR_DOWNTO
79665: IFFALSE 79828
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
79667: LD_EXP 131
79671: PUSH
79672: LD_VAR 0 6
79676: ARRAY
79677: PUSH
79678: LD_VAR 0 5
79682: ARRAY
79683: PUSH
79684: LD_INT 1
79686: ARRAY
79687: PPUSH
79688: LD_EXP 131
79692: PUSH
79693: LD_VAR 0 6
79697: ARRAY
79698: PUSH
79699: LD_VAR 0 5
79703: ARRAY
79704: PUSH
79705: LD_INT 2
79707: ARRAY
79708: PPUSH
79709: LD_VAR 0 2
79713: PPUSH
79714: LD_VAR 0 3
79718: PPUSH
79719: CALL_OW 298
79723: PUSH
79724: LD_INT 6
79726: LESS
79727: IFFALSE 79826
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
79729: LD_EXP 131
79733: PUSH
79734: LD_VAR 0 6
79738: ARRAY
79739: PUSH
79740: LD_VAR 0 5
79744: ARRAY
79745: PUSH
79746: LD_INT 1
79748: ARRAY
79749: PPUSH
79750: LD_EXP 131
79754: PUSH
79755: LD_VAR 0 6
79759: ARRAY
79760: PUSH
79761: LD_VAR 0 5
79765: ARRAY
79766: PUSH
79767: LD_INT 2
79769: ARRAY
79770: PPUSH
79771: LD_VAR 0 1
79775: PPUSH
79776: CALL_OW 255
79780: PPUSH
79781: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
79785: LD_ADDR_EXP 131
79789: PUSH
79790: LD_EXP 131
79794: PPUSH
79795: LD_VAR 0 6
79799: PPUSH
79800: LD_EXP 131
79804: PUSH
79805: LD_VAR 0 6
79809: ARRAY
79810: PPUSH
79811: LD_VAR 0 5
79815: PPUSH
79816: CALL_OW 3
79820: PPUSH
79821: CALL_OW 1
79825: ST_TO_ADDR
// end ; end ;
79826: GO 79664
79828: POP
79829: POP
// end ;
79830: LD_VAR 0 4
79834: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
79835: LD_INT 0
79837: PPUSH
79838: PPUSH
79839: PPUSH
79840: PPUSH
79841: PPUSH
79842: PPUSH
79843: PPUSH
79844: PPUSH
79845: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
79846: LD_VAR 0 1
79850: PPUSH
79851: CALL_OW 264
79855: PUSH
79856: LD_INT 81
79858: EQUAL
79859: NOT
79860: IFTRUE 79875
79862: PUSH
79863: LD_VAR 0 1
79867: PUSH
79868: LD_EXP 130
79872: IN
79873: NOT
79874: OR
79875: IFFALSE 79879
// exit ;
79877: GO 80205
// index := GetElementIndex ( minersList , unit ) ;
79879: LD_ADDR_VAR 0 6
79883: PUSH
79884: LD_EXP 130
79888: PPUSH
79889: LD_VAR 0 1
79893: PPUSH
79894: CALL 20589 0 2
79898: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
79899: LD_ADDR_VAR 0 8
79903: PUSH
79904: LD_EXP 132
79908: PUSH
79909: LD_EXP 131
79913: PUSH
79914: LD_VAR 0 6
79918: ARRAY
79919: MINUS
79920: ST_TO_ADDR
// if not minesFreeAmount then
79921: LD_VAR 0 8
79925: NOT
79926: IFFALSE 79930
// exit ;
79928: GO 80205
// tmp := [ ] ;
79930: LD_ADDR_VAR 0 7
79934: PUSH
79935: EMPTY
79936: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
79937: LD_ADDR_VAR 0 5
79941: PUSH
79942: DOUBLE
79943: LD_INT 1
79945: DEC
79946: ST_TO_ADDR
79947: LD_VAR 0 8
79951: PUSH
79952: FOR_TO
79953: IFFALSE 80152
// begin _d := rand ( 0 , 5 ) ;
79955: LD_ADDR_VAR 0 11
79959: PUSH
79960: LD_INT 0
79962: PPUSH
79963: LD_INT 5
79965: PPUSH
79966: CALL_OW 12
79970: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
79971: LD_ADDR_VAR 0 12
79975: PUSH
79976: LD_INT 2
79978: PPUSH
79979: LD_INT 6
79981: PPUSH
79982: CALL_OW 12
79986: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
79987: LD_ADDR_VAR 0 9
79991: PUSH
79992: LD_VAR 0 2
79996: PPUSH
79997: LD_VAR 0 11
80001: PPUSH
80002: LD_VAR 0 12
80006: PPUSH
80007: CALL_OW 272
80011: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
80012: LD_ADDR_VAR 0 10
80016: PUSH
80017: LD_VAR 0 3
80021: PPUSH
80022: LD_VAR 0 11
80026: PPUSH
80027: LD_VAR 0 12
80031: PPUSH
80032: CALL_OW 273
80036: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
80037: LD_VAR 0 9
80041: PPUSH
80042: LD_VAR 0 10
80046: PPUSH
80047: CALL_OW 488
80051: IFFALSE 80075
80053: PUSH
80054: LD_VAR 0 9
80058: PUSH
80059: LD_VAR 0 10
80063: PUSH
80064: EMPTY
80065: LIST
80066: LIST
80067: PUSH
80068: LD_VAR 0 7
80072: IN
80073: NOT
80074: AND
80075: IFFALSE 80094
80077: PUSH
80078: LD_VAR 0 9
80082: PPUSH
80083: LD_VAR 0 10
80087: PPUSH
80088: CALL_OW 458
80092: NOT
80093: AND
80094: IFFALSE 80136
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
80096: LD_ADDR_VAR 0 7
80100: PUSH
80101: LD_VAR 0 7
80105: PPUSH
80106: LD_VAR 0 7
80110: PUSH
80111: LD_INT 1
80113: PLUS
80114: PPUSH
80115: LD_VAR 0 9
80119: PUSH
80120: LD_VAR 0 10
80124: PUSH
80125: EMPTY
80126: LIST
80127: LIST
80128: PPUSH
80129: CALL_OW 1
80133: ST_TO_ADDR
80134: GO 80150
// i := i - 1 ;
80136: LD_ADDR_VAR 0 5
80140: PUSH
80141: LD_VAR 0 5
80145: PUSH
80146: LD_INT 1
80148: MINUS
80149: ST_TO_ADDR
// end ;
80150: GO 79952
80152: POP
80153: POP
// for i in tmp do
80154: LD_ADDR_VAR 0 5
80158: PUSH
80159: LD_VAR 0 7
80163: PUSH
80164: FOR_IN
80165: IFFALSE 80203
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
80167: LD_VAR 0 1
80171: PPUSH
80172: LD_VAR 0 5
80176: PUSH
80177: LD_INT 1
80179: ARRAY
80180: PPUSH
80181: LD_VAR 0 5
80185: PUSH
80186: LD_INT 2
80188: ARRAY
80189: PPUSH
80190: CALL 79137 0 3
80194: NOT
80195: IFFALSE 80201
// exit ;
80197: POP
80198: POP
80199: GO 80205
80201: GO 80164
80203: POP
80204: POP
// end ;
80205: LD_VAR 0 4
80209: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
80210: LD_INT 0
80212: PPUSH
80213: PPUSH
80214: PPUSH
80215: PPUSH
80216: PPUSH
80217: PPUSH
80218: PPUSH
80219: PPUSH
80220: PPUSH
// if GetClass ( unit ) <> class_sniper then
80221: LD_VAR 0 1
80225: PPUSH
80226: CALL_OW 257
80230: PUSH
80231: LD_INT 5
80233: NONEQUAL
80234: IFFALSE 80238
// exit ;
80236: GO 80708
// dist := 8 ;
80238: LD_ADDR_VAR 0 5
80242: PUSH
80243: LD_INT 8
80245: ST_TO_ADDR
// viewRange := 12 ;
80246: LD_ADDR_VAR 0 8
80250: PUSH
80251: LD_INT 12
80253: ST_TO_ADDR
// side := GetSide ( unit ) ;
80254: LD_ADDR_VAR 0 6
80258: PUSH
80259: LD_VAR 0 1
80263: PPUSH
80264: CALL_OW 255
80268: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
80269: LD_INT 61
80271: PPUSH
80272: LD_VAR 0 6
80276: PPUSH
80277: CALL_OW 321
80281: PUSH
80282: LD_INT 2
80284: EQUAL
80285: IFFALSE 80295
// viewRange := 16 ;
80287: LD_ADDR_VAR 0 8
80291: PUSH
80292: LD_INT 16
80294: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
80295: LD_VAR 0 1
80299: PPUSH
80300: LD_VAR 0 2
80304: PPUSH
80305: LD_VAR 0 3
80309: PPUSH
80310: CALL_OW 297
80314: PUSH
80315: LD_VAR 0 5
80319: GREATER
80320: IFFALSE 80399
// begin ComMoveXY ( unit , x , y ) ;
80322: LD_VAR 0 1
80326: PPUSH
80327: LD_VAR 0 2
80331: PPUSH
80332: LD_VAR 0 3
80336: PPUSH
80337: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
80341: LD_INT 35
80343: PPUSH
80344: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
80348: LD_VAR 0 1
80352: PPUSH
80353: LD_VAR 0 2
80357: PPUSH
80358: LD_VAR 0 3
80362: PPUSH
80363: CALL 52635 0 3
80367: NOT
80368: IFFALSE 80372
// exit ;
80370: GO 80708
// until GetDistUnitXY ( unit , x , y ) < dist ;
80372: LD_VAR 0 1
80376: PPUSH
80377: LD_VAR 0 2
80381: PPUSH
80382: LD_VAR 0 3
80386: PPUSH
80387: CALL_OW 297
80391: PUSH
80392: LD_VAR 0 5
80396: LESS
80397: IFFALSE 80341
// end ; ComTurnXY ( unit , x , y ) ;
80399: LD_VAR 0 1
80403: PPUSH
80404: LD_VAR 0 2
80408: PPUSH
80409: LD_VAR 0 3
80413: PPUSH
80414: CALL_OW 118
// repeat if Multiplayer then
80418: LD_OWVAR 4
80422: IFFALSE 80433
// wait ( 35 ) else
80424: LD_INT 35
80426: PPUSH
80427: CALL_OW 67
80431: GO 80440
// wait ( 5 ) ;
80433: LD_INT 5
80435: PPUSH
80436: CALL_OW 67
// _d := GetDir ( unit ) ;
80440: LD_ADDR_VAR 0 11
80444: PUSH
80445: LD_VAR 0 1
80449: PPUSH
80450: CALL_OW 254
80454: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
80455: LD_ADDR_VAR 0 7
80459: PUSH
80460: LD_VAR 0 1
80464: PPUSH
80465: CALL_OW 250
80469: PPUSH
80470: LD_VAR 0 1
80474: PPUSH
80475: CALL_OW 251
80479: PPUSH
80480: LD_VAR 0 2
80484: PPUSH
80485: LD_VAR 0 3
80489: PPUSH
80490: CALL 55271 0 4
80494: ST_TO_ADDR
// until dir = _d ;
80495: LD_VAR 0 7
80499: PUSH
80500: LD_VAR 0 11
80504: EQUAL
80505: IFFALSE 80418
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
80507: LD_ADDR_VAR 0 9
80511: PUSH
80512: LD_VAR 0 1
80516: PPUSH
80517: CALL_OW 250
80521: PPUSH
80522: LD_VAR 0 7
80526: PPUSH
80527: LD_VAR 0 5
80531: PPUSH
80532: CALL_OW 272
80536: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
80537: LD_ADDR_VAR 0 10
80541: PUSH
80542: LD_VAR 0 1
80546: PPUSH
80547: CALL_OW 251
80551: PPUSH
80552: LD_VAR 0 7
80556: PPUSH
80557: LD_VAR 0 5
80561: PPUSH
80562: CALL_OW 273
80566: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80567: LD_VAR 0 9
80571: PPUSH
80572: LD_VAR 0 10
80576: PPUSH
80577: CALL_OW 488
80581: NOT
80582: IFFALSE 80586
// exit ;
80584: GO 80708
// ComAnimCustom ( unit , 1 ) ;
80586: LD_VAR 0 1
80590: PPUSH
80591: LD_INT 1
80593: PPUSH
80594: CALL_OW 592
// p := 0 ;
80598: LD_ADDR_VAR 0 12
80602: PUSH
80603: LD_INT 0
80605: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
80606: LD_VAR 0 9
80610: PPUSH
80611: LD_VAR 0 10
80615: PPUSH
80616: LD_VAR 0 6
80620: PPUSH
80621: LD_VAR 0 8
80625: PPUSH
80626: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
80630: LD_INT 35
80632: PPUSH
80633: CALL_OW 67
// p := Inc ( p ) ;
80637: LD_ADDR_VAR 0 12
80641: PUSH
80642: LD_VAR 0 12
80646: PPUSH
80647: CALL 55227 0 1
80651: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
80652: LD_VAR 0 12
80656: PUSH
80657: LD_INT 3
80659: EQUAL
80660: IFTRUE 80674
80662: PUSH
80663: LD_VAR 0 1
80667: PPUSH
80668: CALL_OW 302
80672: NOT
80673: OR
80674: IFTRUE 80687
80676: PUSH
80677: LD_VAR 0 1
80681: PPUSH
80682: CALL_OW 301
80686: OR
80687: IFFALSE 80630
// RemoveSeeing ( _x , _y , side ) ;
80689: LD_VAR 0 9
80693: PPUSH
80694: LD_VAR 0 10
80698: PPUSH
80699: LD_VAR 0 6
80703: PPUSH
80704: CALL_OW 331
// end ;
80708: LD_VAR 0 4
80712: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
80713: LD_INT 0
80715: PPUSH
80716: PPUSH
80717: PPUSH
80718: PPUSH
80719: PPUSH
80720: PPUSH
80721: PPUSH
80722: PPUSH
80723: PPUSH
80724: PPUSH
80725: PPUSH
// if not unit then
80726: LD_VAR 0 1
80730: NOT
80731: IFFALSE 80735
// exit ;
80733: GO 81006
// side := GetSide ( unit ) ;
80735: LD_ADDR_VAR 0 3
80739: PUSH
80740: LD_VAR 0 1
80744: PPUSH
80745: CALL_OW 255
80749: ST_TO_ADDR
// x := GetX ( unit ) ;
80750: LD_ADDR_VAR 0 5
80754: PUSH
80755: LD_VAR 0 1
80759: PPUSH
80760: CALL_OW 250
80764: ST_TO_ADDR
// y := GetY ( unit ) ;
80765: LD_ADDR_VAR 0 6
80769: PUSH
80770: LD_VAR 0 1
80774: PPUSH
80775: CALL_OW 251
80779: ST_TO_ADDR
// r := 8 ;
80780: LD_ADDR_VAR 0 4
80784: PUSH
80785: LD_INT 8
80787: ST_TO_ADDR
// if x - r < 0 then
80788: LD_VAR 0 5
80792: PUSH
80793: LD_VAR 0 4
80797: MINUS
80798: PUSH
80799: LD_INT 0
80801: LESS
80802: IFFALSE 80814
// min_x := 0 else
80804: LD_ADDR_VAR 0 7
80808: PUSH
80809: LD_INT 0
80811: ST_TO_ADDR
80812: GO 80830
// min_x := x - r ;
80814: LD_ADDR_VAR 0 7
80818: PUSH
80819: LD_VAR 0 5
80823: PUSH
80824: LD_VAR 0 4
80828: MINUS
80829: ST_TO_ADDR
// if y - r < 0 then
80830: LD_VAR 0 6
80834: PUSH
80835: LD_VAR 0 4
80839: MINUS
80840: PUSH
80841: LD_INT 0
80843: LESS
80844: IFFALSE 80856
// min_y := 0 else
80846: LD_ADDR_VAR 0 8
80850: PUSH
80851: LD_INT 0
80853: ST_TO_ADDR
80854: GO 80872
// min_y := y - r ;
80856: LD_ADDR_VAR 0 8
80860: PUSH
80861: LD_VAR 0 6
80865: PUSH
80866: LD_VAR 0 4
80870: MINUS
80871: ST_TO_ADDR
// max_x := x + r ;
80872: LD_ADDR_VAR 0 9
80876: PUSH
80877: LD_VAR 0 5
80881: PUSH
80882: LD_VAR 0 4
80886: PLUS
80887: ST_TO_ADDR
// max_y := y + r ;
80888: LD_ADDR_VAR 0 10
80892: PUSH
80893: LD_VAR 0 6
80897: PUSH
80898: LD_VAR 0 4
80902: PLUS
80903: ST_TO_ADDR
// for _x = min_x to max_x do
80904: LD_ADDR_VAR 0 11
80908: PUSH
80909: DOUBLE
80910: LD_VAR 0 7
80914: DEC
80915: ST_TO_ADDR
80916: LD_VAR 0 9
80920: PUSH
80921: FOR_TO
80922: IFFALSE 81004
// for _y = min_y to max_y do
80924: LD_ADDR_VAR 0 12
80928: PUSH
80929: DOUBLE
80930: LD_VAR 0 8
80934: DEC
80935: ST_TO_ADDR
80936: LD_VAR 0 10
80940: PUSH
80941: FOR_TO
80942: IFFALSE 81000
// begin if not ValidHex ( _x , _y ) then
80944: LD_VAR 0 11
80948: PPUSH
80949: LD_VAR 0 12
80953: PPUSH
80954: CALL_OW 488
80958: NOT
80959: IFFALSE 80963
// continue ;
80961: GO 80941
// if MineAtPos ( _x , _y ) then
80963: LD_VAR 0 11
80967: PPUSH
80968: LD_VAR 0 12
80972: PPUSH
80973: CALL_OW 458
80977: IFFALSE 80998
// ViewMineAtPos ( _x , _y , side ) ;
80979: LD_VAR 0 11
80983: PPUSH
80984: LD_VAR 0 12
80988: PPUSH
80989: LD_VAR 0 3
80993: PPUSH
80994: CALL_OW 457
// end ;
80998: GO 80941
81000: POP
81001: POP
81002: GO 80921
81004: POP
81005: POP
// end ;
81006: LD_VAR 0 2
81010: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
81011: LD_INT 0
81013: PPUSH
81014: PPUSH
81015: PPUSH
81016: PPUSH
81017: PPUSH
81018: PPUSH
// if not units then
81019: LD_VAR 0 1
81023: NOT
81024: IFFALSE 81028
// exit ;
81026: GO 81458
// scaners := [ ] ;
81028: LD_ADDR_VAR 0 6
81032: PUSH
81033: EMPTY
81034: ST_TO_ADDR
// for i in units do
81035: LD_ADDR_VAR 0 3
81039: PUSH
81040: LD_VAR 0 1
81044: PUSH
81045: FOR_IN
81046: IFFALSE 81203
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
81048: LD_VAR 0 3
81052: PPUSH
81053: CALL_OW 264
81057: PUSH
81058: LD_INT 11
81060: NONEQUAL
81061: IFTRUE 81075
81063: PUSH
81064: LD_VAR 0 3
81068: PPUSH
81069: CALL_OW 302
81073: NOT
81074: OR
81075: IFTRUE 81092
81077: PUSH
81078: LD_VAR 0 3
81082: PPUSH
81083: CALL_OW 110
81087: PUSH
81088: LD_INT 502
81090: EQUAL
81091: OR
81092: IFFALSE 81096
// continue ;
81094: GO 81045
// ComStop ( i ) ;
81096: LD_VAR 0 3
81100: PPUSH
81101: CALL_OW 141
// x := GetX ( i ) ;
81105: LD_ADDR_VAR 0 4
81109: PUSH
81110: LD_VAR 0 3
81114: PPUSH
81115: CALL_OW 250
81119: ST_TO_ADDR
// y := GetY ( i ) ;
81120: LD_ADDR_VAR 0 5
81124: PUSH
81125: LD_VAR 0 3
81129: PPUSH
81130: CALL_OW 251
81134: ST_TO_ADDR
// if GetSide ( i ) = your_side then
81135: LD_VAR 0 3
81139: PPUSH
81140: CALL_OW 255
81144: PUSH
81145: LD_OWVAR 2
81149: EQUAL
81150: IFFALSE 81169
// PlaySoundXY ( x , y , mineDetector ) ;
81152: LD_VAR 0 4
81156: PPUSH
81157: LD_VAR 0 5
81161: PPUSH
81162: LD_STRING mineDetector
81164: PPUSH
81165: CALL_OW 366
// scaners := Join ( scaners , i ) ;
81169: LD_ADDR_VAR 0 6
81173: PUSH
81174: LD_VAR 0 6
81178: PPUSH
81179: LD_VAR 0 3
81183: PPUSH
81184: CALL 53854 0 2
81188: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
81189: LD_VAR 0 3
81193: PPUSH
81194: LD_INT 502
81196: PPUSH
81197: CALL_OW 109
// end ;
81201: GO 81045
81203: POP
81204: POP
// if not scaners then
81205: LD_VAR 0 6
81209: NOT
81210: IFFALSE 81214
// exit ;
81212: GO 81458
// wait ( 3 ) ;
81214: LD_INT 3
81216: PPUSH
81217: CALL_OW 67
// timer := 6 ;
81221: LD_ADDR_VAR 0 7
81225: PUSH
81226: LD_INT 6
81228: ST_TO_ADDR
// repeat for i in scaners do
81229: LD_ADDR_VAR 0 3
81233: PUSH
81234: LD_VAR 0 6
81238: PUSH
81239: FOR_IN
81240: IFFALSE 81356
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
81242: LD_VAR 0 3
81246: PPUSH
81247: CALL_OW 302
81251: NOT
81252: IFTRUE 81265
81254: PUSH
81255: LD_VAR 0 3
81259: PPUSH
81260: CALL_OW 314
81264: OR
81265: IFTRUE 81296
81267: PUSH
81268: LD_VAR 0 3
81272: PPUSH
81273: CALL_OW 263
81277: PUSH
81278: LD_INT 1
81280: EQUAL
81281: IFFALSE 81295
81283: PUSH
81284: LD_VAR 0 3
81288: PPUSH
81289: CALL_OW 311
81293: NOT
81294: AND
81295: OR
81296: IFFALSE 81340
// begin SetUnitDisplayNumber ( i , 0 ) ;
81298: LD_VAR 0 3
81302: PPUSH
81303: LD_INT 0
81305: PPUSH
81306: CALL_OW 505
// SetTag ( i , 0 ) ;
81310: LD_VAR 0 3
81314: PPUSH
81315: LD_INT 0
81317: PPUSH
81318: CALL_OW 109
// scaners := scaners diff i ;
81322: LD_ADDR_VAR 0 6
81326: PUSH
81327: LD_VAR 0 6
81331: PUSH
81332: LD_VAR 0 3
81336: DIFF
81337: ST_TO_ADDR
// continue ;
81338: GO 81239
// end ; SetUnitDisplayNumber ( i , timer ) ;
81340: LD_VAR 0 3
81344: PPUSH
81345: LD_VAR 0 7
81349: PPUSH
81350: CALL_OW 505
// end ;
81354: GO 81239
81356: POP
81357: POP
// if not scaners then
81358: LD_VAR 0 6
81362: NOT
81363: IFFALSE 81367
// exit ;
81365: GO 81458
// timer := Dec ( timer ) ;
81367: LD_ADDR_VAR 0 7
81371: PUSH
81372: LD_VAR 0 7
81376: PPUSH
81377: CALL 55249 0 1
81381: ST_TO_ADDR
// wait ( 0 0$1 ) ;
81382: LD_INT 35
81384: PPUSH
81385: CALL_OW 67
// until timer = 0 ;
81389: LD_VAR 0 7
81393: PUSH
81394: LD_INT 0
81396: EQUAL
81397: IFFALSE 81229
// if not scaners then
81399: LD_VAR 0 6
81403: NOT
81404: IFFALSE 81408
// exit ;
81406: GO 81458
// for i in scaners do
81408: LD_ADDR_VAR 0 3
81412: PUSH
81413: LD_VAR 0 6
81417: PUSH
81418: FOR_IN
81419: IFFALSE 81456
// begin SetUnitDisplayNumber ( i , 0 ) ;
81421: LD_VAR 0 3
81425: PPUSH
81426: LD_INT 0
81428: PPUSH
81429: CALL_OW 505
// SetTag ( i , 0 ) ;
81433: LD_VAR 0 3
81437: PPUSH
81438: LD_INT 0
81440: PPUSH
81441: CALL_OW 109
// RevealDetectorMine ( i ) ;
81445: LD_VAR 0 3
81449: PPUSH
81450: CALL 80713 0 1
// end ;
81454: GO 81418
81456: POP
81457: POP
// end ;
81458: LD_VAR 0 2
81462: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
81463: LD_INT 0
81465: PPUSH
// if p1 = mine_detector_mode then
81466: LD_VAR 0 2
81470: PUSH
81471: LD_INT 103
81473: EQUAL
81474: IFFALSE 81485
// DetectMine ( units ) ;
81476: LD_VAR 0 1
81480: PPUSH
81481: CALL 81011 0 1
// end ; end_of_file
81485: LD_VAR 0 7
81489: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81490: LD_VAR 0 1
81494: PUSH
81495: LD_INT 200
81497: DOUBLE
81498: GREATEREQUAL
81499: IFFALSE 81507
81501: LD_INT 299
81503: DOUBLE
81504: LESSEQUAL
81505: IFTRUE 81509
81507: GO 81541
81509: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81510: LD_VAR 0 1
81514: PPUSH
81515: LD_VAR 0 2
81519: PPUSH
81520: LD_VAR 0 3
81524: PPUSH
81525: LD_VAR 0 4
81529: PPUSH
81530: LD_VAR 0 5
81534: PPUSH
81535: CALL 75956 0 5
81539: GO 81618
81541: LD_INT 300
81543: DOUBLE
81544: GREATEREQUAL
81545: IFFALSE 81553
81547: LD_INT 399
81549: DOUBLE
81550: LESSEQUAL
81551: IFTRUE 81555
81553: GO 81617
81555: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81556: LD_VAR 0 1
81560: PPUSH
81561: LD_VAR 0 2
81565: PPUSH
81566: LD_VAR 0 3
81570: PPUSH
81571: LD_VAR 0 4
81575: PPUSH
81576: LD_VAR 0 5
81580: PPUSH
81581: LD_VAR 0 6
81585: PPUSH
81586: LD_VAR 0 7
81590: PPUSH
81591: LD_VAR 0 8
81595: PPUSH
81596: LD_VAR 0 9
81600: PPUSH
81601: LD_VAR 0 10
81605: PPUSH
81606: LD_VAR 0 11
81610: PPUSH
81611: CALL 71840 0 11
81615: GO 81618
81617: POP
// end ;
81618: PPOPN 11
81620: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81621: LD_VAR 0 1
81625: PPUSH
81626: LD_VAR 0 2
81630: PPUSH
81631: LD_VAR 0 3
81635: PPUSH
81636: LD_VAR 0 4
81640: PPUSH
81641: LD_VAR 0 5
81645: PPUSH
81646: CALL 75337 0 5
// end ;
81650: PPOPN 5
81652: END
