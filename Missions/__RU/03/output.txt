// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 69 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 5 , 4 , 5 , 4 , 2 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 5
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 4
  26: PPUSH
  27: LD_INT 2
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 39380 0 9
// if debug then
  43: LD_EXP 1
  47: IFFALSE 56
// FogOff ( 3 ) ;
  49: LD_INT 3
  51: PPUSH
  52: CALL_OW 344
// PrepareOmikron ;
  56: CALL 2234 0 0
// PrepareRussians ;
  60: CALL 225 0 0
// MissionIntro ;
  64: CALL 4228 0 0
// end ;
  68: END
// export debug , prevMissionPrefix , currentMissionPrefix ; export meetBelkovBrother , cratesResources , oilResources , vehiclesPreviousMission , kurinOpinion , platonovOpinion , vehiclesToSave ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinVehNeeded ; export canDestroyBeriaBase ; export enableOmicronAI ; export kirovCanCaptureVehicles ; export endCutscene ; export VehNeeded ; export OmiRunB ; export kaganek ; export enemySkillLevel ; function Init ; begin
  69: LD_INT 0
  71: PPUSH
// debug := true ;
  72: LD_ADDR_EXP 1
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// prevMissionPrefix := 02_ ;
  80: LD_ADDR_EXP 2
  84: PUSH
  85: LD_STRING 02_
  87: ST_TO_ADDR
// currentMissionPrefix := 03_ ;
  88: LD_ADDR_EXP 3
  92: PUSH
  93: LD_STRING 03_
  95: ST_TO_ADDR
// counterIndex := 1 ;
  96: LD_ADDR_EXP 72
 100: PUSH
 101: LD_INT 1
 103: ST_TO_ADDR
// KurinVehNeeded := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
 104: LD_ADDR_EXP 32
 108: PUSH
 109: LD_INT 1
 111: PUSH
 112: LD_INT 2
 114: PUSH
 115: LD_INT 3
 117: PUSH
 118: LD_INT 4
 120: PUSH
 121: EMPTY
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: PUSH
 127: LD_OWVAR 67
 131: ARRAY
 132: ST_TO_ADDR
// timeToPrepareAttack := [ 50 50$00 , 40 40$00 , 30 30$00 , 30 30$00 ] [ Difficulty ] ;
 133: LD_ADDR_EXP 74
 137: PUSH
 138: LD_INT 105000
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 63000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: LD_OWVAR 67
 160: ARRAY
 161: ST_TO_ADDR
// timeToArabAttack := [ 80 80$00 , 70 70$00 , 60 60$00 , 50 50$00 ] [ Difficulty ] ;
 162: LD_ADDR_EXP 75
 166: PUSH
 167: LD_INT 168000
 169: PUSH
 170: LD_INT 147000
 172: PUSH
 173: LD_INT 126000
 175: PUSH
 176: LD_INT 105000
 178: PUSH
 179: EMPTY
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: PUSH
 185: LD_OWVAR 67
 189: ARRAY
 190: ST_TO_ADDR
// enemySkillLevel = [ 2 , 3 , 4 , 5 ] [ Difficulty ] ;
 191: LD_ADDR_EXP 40
 195: PUSH
 196: LD_INT 2
 198: PUSH
 199: LD_INT 3
 201: PUSH
 202: LD_INT 4
 204: PUSH
 205: LD_INT 5
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: LD_OWVAR 67
 218: ARRAY
 219: ST_TO_ADDR
// end ; end_of_file
 220: LD_VAR 0 1
 224: RET
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Benko , Kuklajs ; export Scholtze ; export otherBeriaUnits , beriaBase , beriaDepot ; export Kurin , Popov ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot ; export Grishko , Gaydar , Bukov ; export burlakTeam , kirovBarracks ; export function PrepareRussians ; var un ; begin
 225: LD_INT 0
 227: PPUSH
 228: PPUSH
// PrepareHeroes ;
 229: CALL 246 0 0
// PrepareBeriaBase ;
 233: CALL 949 0 0
// PrepareKirovBase ;
 237: CALL 1182 0 0
// end ;
 241: LD_VAR 0 1
 245: RET
// function PrepareHeroes ; var un ; begin
 246: LD_INT 0
 248: PPUSH
 249: PPUSH
// uc_side := 6 ;
 250: LD_ADDR_OWVAR 20
 254: PUSH
 255: LD_INT 6
 257: ST_TO_ADDR
// otherBeriaUnits := CreateCharacterSet ( 02_burlakTeam ) ;
 258: LD_ADDR_EXP 50
 262: PUSH
 263: LD_STRING 02_burlakTeam
 265: PPUSH
 266: CALL_OW 31
 270: ST_TO_ADDR
// uc_side := 3 ;
 271: LD_ADDR_OWVAR 20
 275: PUSH
 276: LD_INT 3
 278: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
 279: LD_ADDR_EXP 41
 283: PUSH
 284: LD_STRING Burlak
 286: PPUSH
 287: LD_EXP 1
 291: NOT
 292: PPUSH
 293: LD_EXP 2
 297: PPUSH
 298: CALL 6017 0 3
 302: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
 303: LD_ADDR_EXP 42
 307: PUSH
 308: LD_STRING Gnyevko
 310: PPUSH
 311: LD_EXP 1
 315: NOT
 316: PPUSH
 317: LD_EXP 2
 321: PPUSH
 322: CALL 6017 0 3
 326: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , ( not debug ) , prevMissionPrefix ) ;
 327: LD_ADDR_EXP 44
 331: PUSH
 332: LD_STRING Kovalyuk
 334: PPUSH
 335: LD_EXP 1
 339: NOT
 340: PPUSH
 341: LD_EXP 2
 345: PPUSH
 346: CALL 6017 0 3
 350: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
 351: LD_ADDR_EXP 43
 355: PUSH
 356: LD_STRING Kirilenkova
 358: PPUSH
 359: LD_EXP 1
 363: NOT
 364: PPUSH
 365: LD_EXP 2
 369: PPUSH
 370: CALL 6017 0 3
 374: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
 375: LD_ADDR_EXP 45
 379: PUSH
 380: LD_STRING Belkov
 382: PPUSH
 383: LD_EXP 1
 387: NOT
 388: PPUSH
 389: LD_EXP 2
 393: PPUSH
 394: CALL 6017 0 3
 398: ST_TO_ADDR
// Benko := PrepareUnit ( Benko , ( not debug ) , prevMissionPrefix ) ;
 399: LD_ADDR_EXP 47
 403: PUSH
 404: LD_STRING Benko
 406: PPUSH
 407: LD_EXP 1
 411: NOT
 412: PPUSH
 413: LD_EXP 2
 417: PPUSH
 418: CALL 6017 0 3
 422: ST_TO_ADDR
// Kuklajs := PrepareUnit ( Kuklajs , ( not debug ) , prevMissionPrefix ) ;
 423: LD_ADDR_EXP 48
 427: PUSH
 428: LD_STRING Kuklajs
 430: PPUSH
 431: LD_EXP 1
 435: NOT
 436: PPUSH
 437: LD_EXP 2
 441: PPUSH
 442: CALL 6017 0 3
 446: ST_TO_ADDR
// uc_side := 6 ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_INT 6
 454: ST_TO_ADDR
// Kurin := NewCharacter ( Kurin ) ;
 455: LD_ADDR_EXP 53
 459: PUSH
 460: LD_STRING Kurin
 462: PPUSH
 463: CALL_OW 25
 467: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
 468: LD_ADDR_EXP 54
 472: PUSH
 473: LD_STRING Popov
 475: PPUSH
 476: CALL_OW 25
 480: ST_TO_ADDR
// Grishko := NewCharacter ( Grishko ) ;
 481: LD_ADDR_EXP 59
 485: PUSH
 486: LD_STRING Grishko
 488: PPUSH
 489: CALL_OW 25
 493: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
 494: LD_ADDR_EXP 60
 498: PUSH
 499: LD_STRING Gaydar
 501: PPUSH
 502: CALL_OW 25
 506: ST_TO_ADDR
// Bukov := NewCharacter ( Bukov ) ;
 507: LD_ADDR_EXP 61
 511: PUSH
 512: LD_STRING Bukov
 514: PPUSH
 515: CALL_OW 25
 519: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
 520: LD_EXP 41
 524: PUSH
 525: LD_EXP 42
 529: PUSH
 530: LD_EXP 44
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: LIST
 539: PPUSH
 540: LD_INT 3
 542: PPUSH
 543: CALL_OW 336
// SetClass ( Kirilenkova , 4 ) ;
 547: LD_EXP 43
 551: PPUSH
 552: LD_INT 4
 554: PPUSH
 555: CALL_OW 336
// PlaceUnitXY ( Kurin , 153 , 103 , false ) ;
 559: LD_EXP 53
 563: PPUSH
 564: LD_INT 153
 566: PPUSH
 567: LD_INT 103
 569: PPUSH
 570: LD_INT 0
 572: PPUSH
 573: CALL_OW 48
// AddComHold ( Kurin ) ;
 577: LD_EXP 53
 581: PPUSH
 582: CALL_OW 200
// AddComTurnXY ( Kurin , 155 , 106 ) ;
 586: LD_EXP 53
 590: PPUSH
 591: LD_INT 155
 593: PPUSH
 594: LD_INT 106
 596: PPUSH
 597: CALL_OW 178
// PlaceUnitXY ( Popov , 131 , 49 , false ) ;
 601: LD_EXP 54
 605: PPUSH
 606: LD_INT 131
 608: PPUSH
 609: LD_INT 49
 611: PPUSH
 612: LD_INT 0
 614: PPUSH
 615: CALL_OW 48
// AddComHold ( Popov ) ;
 619: LD_EXP 54
 623: PPUSH
 624: CALL_OW 200
// AddComTurnXY ( Popov , 131 , 31 ) ;
 628: LD_EXP 54
 632: PPUSH
 633: LD_INT 131
 635: PPUSH
 636: LD_INT 31
 638: PPUSH
 639: CALL_OW 178
// PlaceUnitXY ( Gaydar , 91 , 15 , false ) ;
 643: LD_EXP 60
 647: PPUSH
 648: LD_INT 91
 650: PPUSH
 651: LD_INT 15
 653: PPUSH
 654: LD_INT 0
 656: PPUSH
 657: CALL_OW 48
// AddComHold ( Gaydar ) ;
 661: LD_EXP 60
 665: PPUSH
 666: CALL_OW 200
// AddComTurnXY ( Gaydar , 131 , 31 ) ;
 670: LD_EXP 60
 674: PPUSH
 675: LD_INT 131
 677: PPUSH
 678: LD_INT 31
 680: PPUSH
 681: CALL_OW 178
// PlaceUnitXY ( Bukov , 86 , 17 , false ) ;
 685: LD_EXP 61
 689: PPUSH
 690: LD_INT 86
 692: PPUSH
 693: LD_INT 17
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 48
// AddComHold ( Bukov ) ;
 703: LD_EXP 61
 707: PPUSH
 708: CALL_OW 200
// AddComTurnXY ( Bukov , 94 , 32 ) ;
 712: LD_EXP 61
 716: PPUSH
 717: LD_INT 94
 719: PPUSH
 720: LD_INT 32
 722: PPUSH
 723: CALL_OW 178
// PlaceUnitXY ( Belkov , 155 , 106 , false ) ;
 727: LD_EXP 45
 731: PPUSH
 732: LD_INT 155
 734: PPUSH
 735: LD_INT 106
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: CALL_OW 48
// AddComHold ( Belkov ) ;
 745: LD_EXP 45
 749: PPUSH
 750: CALL_OW 200
// AddComTurnUnit ( Belkov , Kurin ) ;
 754: LD_EXP 45
 758: PPUSH
 759: LD_EXP 53
 763: PPUSH
 764: CALL_OW 179
// PlaceUnitXY ( Burlak , 154 , 106 , false ) ;
 768: LD_EXP 41
 772: PPUSH
 773: LD_INT 154
 775: PPUSH
 776: LD_INT 106
 778: PPUSH
 779: LD_INT 0
 781: PPUSH
 782: CALL_OW 48
// AddComHold ( Burlak ) ;
 786: LD_EXP 41
 790: PPUSH
 791: CALL_OW 200
// AddComTurnUnit ( Burlak , Kurin ) ;
 795: LD_EXP 41
 799: PPUSH
 800: LD_EXP 53
 804: PPUSH
 805: CALL_OW 179
// burlakTeam := [ Gnyevko , Kovalyuk , Kirilenkova ] ;
 809: LD_ADDR_EXP 62
 813: PUSH
 814: LD_EXP 42
 818: PUSH
 819: LD_EXP 44
 823: PUSH
 824: LD_EXP 43
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: LIST
 833: ST_TO_ADDR
// for un in otherBeriaUnits do
 834: LD_ADDR_VAR 0 2
 838: PUSH
 839: LD_EXP 50
 843: PUSH
 844: FOR_IN
 845: IFFALSE 887
// begin PlaceUnitArea ( un , kirovSpawn , false ) ;
 847: LD_VAR 0 2
 851: PPUSH
 852: LD_INT 4
 854: PPUSH
 855: LD_INT 0
 857: PPUSH
 858: CALL_OW 49
// AddComHold ( un ) ;
 862: LD_VAR 0 2
 866: PPUSH
 867: CALL_OW 200
// AddComTurnUnit ( un , Kurin ) ;
 871: LD_VAR 0 2
 875: PPUSH
 876: LD_EXP 53
 880: PPUSH
 881: CALL_OW 179
// end ;
 885: GO 844
 887: POP
 888: POP
// for un in BurlakTeam do
 889: LD_ADDR_VAR 0 2
 893: PUSH
 894: LD_EXP 62
 898: PUSH
 899: FOR_IN
 900: IFFALSE 942
// begin PlaceUnitArea ( un , kirovSpawn , false ) ;
 902: LD_VAR 0 2
 906: PPUSH
 907: LD_INT 4
 909: PPUSH
 910: LD_INT 0
 912: PPUSH
 913: CALL_OW 49
// AddComHold ( un ) ;
 917: LD_VAR 0 2
 921: PPUSH
 922: CALL_OW 200
// AddComTurnUnit ( un , Kurin ) ;
 926: LD_VAR 0 2
 930: PPUSH
 931: LD_EXP 53
 935: PPUSH
 936: CALL_OW 179
// end ;
 940: GO 899
 942: POP
 943: POP
// end ;
 944: LD_VAR 0 1
 948: RET
// export function PrepareBeriaBase ; var i , bonusResources , beriaDepot ; begin
 949: LD_INT 0
 951: PPUSH
 952: PPUSH
 953: PPUSH
 954: PPUSH
// beriaBase := LoadVariable ( 02_Beria , [ ] ) ;
 955: LD_ADDR_EXP 51
 959: PUSH
 960: LD_STRING 02_Beria
 962: PPUSH
 963: EMPTY
 964: PPUSH
 965: CALL_OW 30
 969: ST_TO_ADDR
// uc_side := 3 ;
 970: LD_ADDR_OWVAR 20
 974: PUSH
 975: LD_INT 3
 977: ST_TO_ADDR
// uc_nation := 3 ;
 978: LD_ADDR_OWVAR 21
 982: PUSH
 983: LD_INT 3
 985: ST_TO_ADDR
// for i := 1 to beriaBase do
 986: LD_ADDR_VAR 0 2
 990: PUSH
 991: DOUBLE
 992: LD_INT 1
 994: DEC
 995: ST_TO_ADDR
 996: LD_EXP 51
1000: PUSH
1001: FOR_TO
1002: IFFALSE 1125
// begin bc_type := beriaBase [ i ] [ 1 ] ;
1004: LD_ADDR_OWVAR 42
1008: PUSH
1009: LD_EXP 51
1013: PUSH
1014: LD_VAR 0 2
1018: ARRAY
1019: PUSH
1020: LD_INT 1
1022: ARRAY
1023: ST_TO_ADDR
// bc_level := beriaBase [ i ] [ 2 ] ;
1024: LD_ADDR_OWVAR 43
1028: PUSH
1029: LD_EXP 51
1033: PUSH
1034: LD_VAR 0 2
1038: ARRAY
1039: PUSH
1040: LD_INT 2
1042: ARRAY
1043: ST_TO_ADDR
// if bc_type = b_lab then
1044: LD_OWVAR 42
1048: PUSH
1049: LD_INT 6
1051: EQUAL
1052: IFFALSE 1070
// begin bc_kind1 := b_lab_basic ;
1054: LD_ADDR_OWVAR 44
1058: PUSH
1059: LD_INT 9
1061: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
1062: LD_ADDR_OWVAR 45
1066: PUSH
1067: LD_INT 9
1069: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 3 ] + 46 , beriaBase [ i ] [ 4 ] , beriaBase [ i ] [ 5 ] ) ;
1070: LD_EXP 51
1074: PUSH
1075: LD_VAR 0 2
1079: ARRAY
1080: PUSH
1081: LD_INT 3
1083: ARRAY
1084: PUSH
1085: LD_INT 46
1087: PLUS
1088: PPUSH
1089: LD_EXP 51
1093: PUSH
1094: LD_VAR 0 2
1098: ARRAY
1099: PUSH
1100: LD_INT 4
1102: ARRAY
1103: PPUSH
1104: LD_EXP 51
1108: PUSH
1109: LD_VAR 0 2
1113: ARRAY
1114: PUSH
1115: LD_INT 5
1117: ARRAY
1118: PPUSH
1119: CALL_OW 47
// end ;
1123: GO 1001
1125: POP
1126: POP
// beriaDepot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1127: LD_ADDR_VAR 0 4
1131: PUSH
1132: LD_INT 22
1134: PUSH
1135: LD_INT 3
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: PUSH
1142: LD_INT 30
1144: PUSH
1145: LD_INT 0
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: PPUSH
1156: CALL_OW 69
1160: PUSH
1161: LD_INT 1
1163: ARRAY
1164: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1165: LD_VAR 0 4
1169: PPUSH
1170: LD_STRING beria
1172: PPUSH
1173: CALL_OW 500
// end ;
1177: LD_VAR 0 1
1181: RET
// export function PrepareKirovBase ; var i , tmp , buildings , x , b , bonusResources , kirovDepot ; begin
1182: LD_INT 0
1184: PPUSH
1185: PPUSH
1186: PPUSH
1187: PPUSH
1188: PPUSH
1189: PPUSH
1190: PPUSH
1191: PPUSH
// kirovBase := LoadVariable ( 02_Kirov , [ ] ) ;
1192: LD_ADDR_EXP 56
1196: PUSH
1197: LD_STRING 02_Kirov
1199: PPUSH
1200: EMPTY
1201: PPUSH
1202: CALL_OW 30
1206: ST_TO_ADDR
// uc_side := 6 ;
1207: LD_ADDR_OWVAR 20
1211: PUSH
1212: LD_INT 6
1214: ST_TO_ADDR
// uc_nation := 3 ;
1215: LD_ADDR_OWVAR 21
1219: PUSH
1220: LD_INT 3
1222: ST_TO_ADDR
// otherKirovUnits := CreateCharacterSet ( 02_kirovTeam ) ;
1223: LD_ADDR_EXP 55
1227: PUSH
1228: LD_STRING 02_kirovTeam
1230: PPUSH
1231: CALL_OW 31
1235: ST_TO_ADDR
// for i := 1 to kirovBase do
1236: LD_ADDR_VAR 0 2
1240: PUSH
1241: DOUBLE
1242: LD_INT 1
1244: DEC
1245: ST_TO_ADDR
1246: LD_EXP 56
1250: PUSH
1251: FOR_TO
1252: IFFALSE 1401
// begin bc_type := kirovBase [ i ] [ 1 ] ;
1254: LD_ADDR_OWVAR 42
1258: PUSH
1259: LD_EXP 56
1263: PUSH
1264: LD_VAR 0 2
1268: ARRAY
1269: PUSH
1270: LD_INT 1
1272: ARRAY
1273: ST_TO_ADDR
// bc_level := kirovBase [ i ] [ 2 ] ;
1274: LD_ADDR_OWVAR 43
1278: PUSH
1279: LD_EXP 56
1283: PUSH
1284: LD_VAR 0 2
1288: ARRAY
1289: PUSH
1290: LD_INT 2
1292: ARRAY
1293: ST_TO_ADDR
// x := kirovBase [ i ] [ 3 ] + 46 ;
1294: LD_ADDR_VAR 0 5
1298: PUSH
1299: LD_EXP 56
1303: PUSH
1304: LD_VAR 0 2
1308: ARRAY
1309: PUSH
1310: LD_INT 3
1312: ARRAY
1313: PUSH
1314: LD_INT 46
1316: PLUS
1317: ST_TO_ADDR
// if x < 140 then
1318: LD_VAR 0 5
1322: PUSH
1323: LD_INT 140
1325: LESS
1326: IFFALSE 1338
// uc_side := 3 else
1328: LD_ADDR_OWVAR 20
1332: PUSH
1333: LD_INT 3
1335: ST_TO_ADDR
1336: GO 1346
// uc_side := 6 ;
1338: LD_ADDR_OWVAR 20
1342: PUSH
1343: LD_INT 6
1345: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 3 ] + 46 , kirovBase [ i ] [ 4 ] , kirovBase [ i ] [ 5 ] ) ;
1346: LD_EXP 56
1350: PUSH
1351: LD_VAR 0 2
1355: ARRAY
1356: PUSH
1357: LD_INT 3
1359: ARRAY
1360: PUSH
1361: LD_INT 46
1363: PLUS
1364: PPUSH
1365: LD_EXP 56
1369: PUSH
1370: LD_VAR 0 2
1374: ARRAY
1375: PUSH
1376: LD_INT 4
1378: ARRAY
1379: PPUSH
1380: LD_EXP 56
1384: PUSH
1385: LD_VAR 0 2
1389: ARRAY
1390: PUSH
1391: LD_INT 5
1393: ARRAY
1394: PPUSH
1395: CALL_OW 47
// end ;
1399: GO 1251
1401: POP
1402: POP
// kirovDepot := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1403: LD_ADDR_VAR 0 8
1407: PUSH
1408: LD_INT 22
1410: PUSH
1411: LD_INT 6
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 30
1420: PUSH
1421: LD_INT 0
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PPUSH
1432: CALL_OW 69
1436: PUSH
1437: LD_INT 1
1439: ARRAY
1440: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
1441: LD_VAR 0 8
1445: PPUSH
1446: LD_STRING kirov
1448: PPUSH
1449: CALL_OW 500
// for i := 1 to 2 do
1453: LD_ADDR_VAR 0 2
1457: PUSH
1458: DOUBLE
1459: LD_INT 1
1461: DEC
1462: ST_TO_ADDR
1463: LD_INT 2
1465: PUSH
1466: FOR_TO
1467: IFFALSE 1493
// SetResourceType ( GetBase ( kirovDepot ) , i , 500 ) ;
1469: LD_VAR 0 8
1473: PPUSH
1474: CALL_OW 274
1478: PPUSH
1479: LD_VAR 0 2
1483: PPUSH
1484: LD_INT 500
1486: PPUSH
1487: CALL_OW 277
1491: GO 1466
1493: POP
1494: POP
// tmp := otherKirovUnits ;
1495: LD_ADDR_VAR 0 3
1499: PUSH
1500: LD_EXP 55
1504: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_breastwork ] ] ] ) ;
1505: LD_ADDR_VAR 0 4
1509: PUSH
1510: LD_INT 22
1512: PUSH
1513: LD_INT 6
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PUSH
1520: LD_INT 21
1522: PUSH
1523: LD_INT 3
1525: PUSH
1526: EMPTY
1527: LIST
1528: LIST
1529: PUSH
1530: LD_INT 3
1532: PUSH
1533: LD_INT 30
1535: PUSH
1536: LD_INT 31
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: LIST
1551: PPUSH
1552: CALL_OW 69
1556: ST_TO_ADDR
// repeat b := buildings [ 1 ] ;
1557: LD_ADDR_VAR 0 6
1561: PUSH
1562: LD_VAR 0 4
1566: PUSH
1567: LD_INT 1
1569: ARRAY
1570: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 1 ] , b ) ;
1571: LD_VAR 0 3
1575: PUSH
1576: LD_INT 1
1578: ARRAY
1579: PPUSH
1580: LD_VAR 0 6
1584: PPUSH
1585: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
1589: LD_ADDR_VAR 0 3
1593: PUSH
1594: LD_VAR 0 3
1598: PPUSH
1599: LD_INT 1
1601: PPUSH
1602: CALL_OW 3
1606: ST_TO_ADDR
// if UnitsInside ( b ) = 3 then
1607: LD_VAR 0 6
1611: PPUSH
1612: CALL_OW 313
1616: PUSH
1617: LD_INT 3
1619: EQUAL
1620: IFFALSE 1640
// buildings := Delete ( buildings , 1 ) ;
1622: LD_ADDR_VAR 0 4
1626: PUSH
1627: LD_VAR 0 4
1631: PPUSH
1632: LD_INT 1
1634: PPUSH
1635: CALL_OW 3
1639: ST_TO_ADDR
// until not buildings or not tmp ;
1640: LD_VAR 0 4
1644: NOT
1645: PUSH
1646: LD_VAR 0 3
1650: NOT
1651: OR
1652: IFFALSE 1557
// if tmp then
1654: LD_VAR 0 3
1658: IFFALSE 1698
// begin for i in tmp do
1660: LD_ADDR_VAR 0 2
1664: PUSH
1665: LD_VAR 0 3
1669: PUSH
1670: FOR_IN
1671: IFFALSE 1696
// PlaceUnitXYR ( i , 164 , 109 , 4 , false ) ;
1673: LD_VAR 0 2
1677: PPUSH
1678: LD_INT 164
1680: PPUSH
1681: LD_INT 109
1683: PPUSH
1684: LD_INT 4
1686: PPUSH
1687: LD_INT 0
1689: PPUSH
1690: CALL_OW 50
1694: GO 1670
1696: POP
1697: POP
// end ; end ;
1698: LD_VAR 0 1
1702: RET
// export function UpgradeKirovBase ; var i , kirovEngs , kirovBuildingArray ; begin
1703: LD_INT 0
1705: PPUSH
1706: PPUSH
1707: PPUSH
1708: PPUSH
// kirovBuildingArray := [ [ b_bunker , 146 , 106 , 1 ] , [ b_bunker , 175 , 123 , 5 ] , [ b_bunker , 170 , 101 , 3 ] , [ b_bunker , 172 , 104 , 4 ] , [ b_bunker , 179 , 118 , 4 ] , [ b_oil_power , 159 , 96 , 3 ] ] ;
1709: LD_ADDR_VAR 0 4
1713: PUSH
1714: LD_INT 32
1716: PUSH
1717: LD_INT 146
1719: PUSH
1720: LD_INT 106
1722: PUSH
1723: LD_INT 1
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: PUSH
1732: LD_INT 32
1734: PUSH
1735: LD_INT 175
1737: PUSH
1738: LD_INT 123
1740: PUSH
1741: LD_INT 5
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: PUSH
1750: LD_INT 32
1752: PUSH
1753: LD_INT 170
1755: PUSH
1756: LD_INT 101
1758: PUSH
1759: LD_INT 3
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: PUSH
1768: LD_INT 32
1770: PUSH
1771: LD_INT 172
1773: PUSH
1774: LD_INT 104
1776: PUSH
1777: LD_INT 4
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: PUSH
1786: LD_INT 32
1788: PUSH
1789: LD_INT 179
1791: PUSH
1792: LD_INT 118
1794: PUSH
1795: LD_INT 4
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: PUSH
1804: LD_INT 26
1806: PUSH
1807: LD_INT 159
1809: PUSH
1810: LD_INT 96
1812: PUSH
1813: LD_INT 3
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: PUSH
1822: EMPTY
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: ST_TO_ADDR
// kirovEngs := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
1830: LD_ADDR_VAR 0 3
1834: PUSH
1835: LD_INT 22
1837: PUSH
1838: LD_INT 6
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: PUSH
1845: LD_INT 21
1847: PUSH
1848: LD_INT 1
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: PUSH
1855: LD_INT 25
1857: PUSH
1858: LD_INT 2
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: LIST
1869: PPUSH
1870: CALL_OW 69
1874: ST_TO_ADDR
// for i in kirovBuildingArray do
1875: LD_ADDR_VAR 0 2
1879: PUSH
1880: LD_VAR 0 4
1884: PUSH
1885: FOR_IN
1886: IFFALSE 1935
// AddComBuild ( kirovEngs , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1888: LD_VAR 0 3
1892: PPUSH
1893: LD_VAR 0 2
1897: PUSH
1898: LD_INT 1
1900: ARRAY
1901: PPUSH
1902: LD_VAR 0 2
1906: PUSH
1907: LD_INT 2
1909: ARRAY
1910: PPUSH
1911: LD_VAR 0 2
1915: PUSH
1916: LD_INT 3
1918: ARRAY
1919: PPUSH
1920: LD_VAR 0 2
1924: PUSH
1925: LD_INT 4
1927: ARRAY
1928: PPUSH
1929: CALL_OW 205
1933: GO 1885
1935: POP
1936: POP
// end ; end_of_file
1937: LD_VAR 0 1
1941: RET
// export omicronSquad , Omikron ; export amIntroUnits ; export amConvoyGroups ; export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
1942: LD_INT 0
1944: PPUSH
1945: PPUSH
1946: PPUSH
1947: PPUSH
// amIntroUnits = [ ] ;
1948: LD_ADDR_EXP 66
1952: PUSH
1953: EMPTY
1954: ST_TO_ADDR
// uc_side = 1 ;
1955: LD_ADDR_OWVAR 20
1959: PUSH
1960: LD_INT 1
1962: ST_TO_ADDR
// uc_nation = nation_american ;
1963: LD_ADDR_OWVAR 21
1967: PUSH
1968: LD_INT 1
1970: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1971: LD_ADDR_OWVAR 37
1975: PUSH
1976: LD_INT 3
1978: ST_TO_ADDR
// vc_control = control_manual ;
1979: LD_ADDR_OWVAR 38
1983: PUSH
1984: LD_INT 1
1986: ST_TO_ADDR
// vc_engine = engine_combustion ;
1987: LD_ADDR_OWVAR 39
1991: PUSH
1992: LD_INT 1
1994: ST_TO_ADDR
// vc_weapon = us_light_gun ;
1995: LD_ADDR_OWVAR 40
1999: PUSH
2000: LD_INT 3
2002: ST_TO_ADDR
// vc_fuel_battery = 100 ;
2003: LD_ADDR_OWVAR 41
2007: PUSH
2008: LD_INT 100
2010: ST_TO_ADDR
// veh = CreateVehicle ;
2011: LD_ADDR_VAR 0 3
2015: PUSH
2016: CALL_OW 45
2020: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2021: LD_VAR 0 3
2025: PPUSH
2026: LD_INT 4
2028: PPUSH
2029: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
2033: LD_ADDR_EXP 66
2037: PUSH
2038: LD_EXP 66
2042: PUSH
2043: LD_VAR 0 3
2047: ADD
2048: ST_TO_ADDR
// PlaceUnitArea ( veh , AmTroopsSpawnIntro , false ) ;
2049: LD_VAR 0 3
2053: PPUSH
2054: LD_INT 7
2056: PPUSH
2057: LD_INT 0
2059: PPUSH
2060: CALL_OW 49
// for i := 1 to 3 do
2064: LD_ADDR_VAR 0 2
2068: PUSH
2069: DOUBLE
2070: LD_INT 1
2072: DEC
2073: ST_TO_ADDR
2074: LD_INT 3
2076: PUSH
2077: FOR_TO
2078: IFFALSE 2199
// begin hc_name :=  ;
2080: LD_ADDR_OWVAR 26
2084: PUSH
2085: LD_STRING 
2087: ST_TO_ADDR
// hc_gallery :=  ;
2088: LD_ADDR_OWVAR 33
2092: PUSH
2093: LD_STRING 
2095: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel ) ;
2096: LD_INT 0
2098: PPUSH
2099: LD_EXP 40
2103: PPUSH
2104: CALL_OW 381
// human = CreateHuman ;
2108: LD_ADDR_VAR 0 4
2112: PUSH
2113: CALL_OW 44
2117: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
2118: LD_ADDR_EXP 66
2122: PUSH
2123: LD_EXP 66
2127: PUSH
2128: LD_VAR 0 4
2132: ADD
2133: ST_TO_ADDR
// if i < 3 then
2134: LD_VAR 0 2
2138: PUSH
2139: LD_INT 3
2141: LESS
2142: IFFALSE 2161
// PlaceUnitArea ( human , AmTroopsSpawnIntro , false ) else
2144: LD_VAR 0 4
2148: PPUSH
2149: LD_INT 7
2151: PPUSH
2152: LD_INT 0
2154: PPUSH
2155: CALL_OW 49
2159: GO 2197
// begin PrepareMechanic ( false , enemySkillLevel ) ;
2161: LD_INT 0
2163: PPUSH
2164: LD_EXP 40
2168: PPUSH
2169: CALL_OW 383
// human = CreateHuman ;
2173: LD_ADDR_VAR 0 4
2177: PUSH
2178: CALL_OW 44
2182: ST_TO_ADDR
// PlaceHumanInUnit ( human , veh ) ;
2183: LD_VAR 0 4
2187: PPUSH
2188: LD_VAR 0 3
2192: PPUSH
2193: CALL_OW 52
// end ; end ;
2197: GO 2077
2199: POP
2200: POP
// HiddenCamera ( 120 , 36 , 3 ) ;
2201: LD_INT 120
2203: PPUSH
2204: LD_INT 36
2206: PPUSH
2207: LD_INT 3
2209: PPUSH
2210: CALL_OW 244
// ComMoveXY ( amIntroUnits , 26 , 34 ) ;
2214: LD_EXP 66
2218: PPUSH
2219: LD_INT 26
2221: PPUSH
2222: LD_INT 34
2224: PPUSH
2225: CALL_OW 111
// end ;
2229: LD_VAR 0 1
2233: RET
// export function PrepareOmikron ; var i , un , tmp , veh , omikronDepot , omiBuildingArray ; begin
2234: LD_INT 0
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
2242: PPUSH
// amConvoyGroups := [ [ [ 1 , 2 , 2 , 3 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] , [ 0 , 0 , 0 , 1 ] [ Difficulty ] ] , [ [ 1 , 2 , 3 , 4 ] [ Difficulty ] , [ 0 , 1 , 2 , 3 ] [ Difficulty ] , [ 0 , 0 , 1 , 1 ] [ Difficulty ] ] , [ [ 1 , 2 , 2 , 3 ] [ Difficulty ] , [ 0 , 1 , 2 , 2 ] [ Difficulty ] , [ 0 , 0 , 2 , 3 ] [ Difficulty ] ] , [ [ 1 , 2 , 2 , 3 ] [ Difficulty ] , [ 0 , 1 , 2 , 2 ] [ Difficulty ] , [ 0 , 0 , 1 , 2 ] [ Difficulty ] ] , [ [ 2 , 2 , 2 , 3 ] [ Difficulty ] , [ 1 , 2 , 3 , 3 ] [ Difficulty ] , [ 0 , 0 , 2 , 2 ] [ Difficulty ] ] ] ;
2243: LD_ADDR_EXP 67
2247: PUSH
2248: LD_INT 1
2250: PUSH
2251: LD_INT 2
2253: PUSH
2254: LD_INT 2
2256: PUSH
2257: LD_INT 3
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: PUSH
2266: LD_OWVAR 67
2270: ARRAY
2271: PUSH
2272: LD_INT 0
2274: PUSH
2275: LD_INT 1
2277: PUSH
2278: LD_INT 1
2280: PUSH
2281: LD_INT 2
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: PUSH
2290: LD_OWVAR 67
2294: ARRAY
2295: PUSH
2296: LD_INT 0
2298: PUSH
2299: LD_INT 0
2301: PUSH
2302: LD_INT 0
2304: PUSH
2305: LD_INT 1
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: PUSH
2314: LD_OWVAR 67
2318: ARRAY
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: LIST
2324: PUSH
2325: LD_INT 1
2327: PUSH
2328: LD_INT 2
2330: PUSH
2331: LD_INT 3
2333: PUSH
2334: LD_INT 4
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: PUSH
2343: LD_OWVAR 67
2347: ARRAY
2348: PUSH
2349: LD_INT 0
2351: PUSH
2352: LD_INT 1
2354: PUSH
2355: LD_INT 2
2357: PUSH
2358: LD_INT 3
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: LIST
2365: LIST
2366: PUSH
2367: LD_OWVAR 67
2371: ARRAY
2372: PUSH
2373: LD_INT 0
2375: PUSH
2376: LD_INT 0
2378: PUSH
2379: LD_INT 1
2381: PUSH
2382: LD_INT 1
2384: PUSH
2385: EMPTY
2386: LIST
2387: LIST
2388: LIST
2389: LIST
2390: PUSH
2391: LD_OWVAR 67
2395: ARRAY
2396: PUSH
2397: EMPTY
2398: LIST
2399: LIST
2400: LIST
2401: PUSH
2402: LD_INT 1
2404: PUSH
2405: LD_INT 2
2407: PUSH
2408: LD_INT 2
2410: PUSH
2411: LD_INT 3
2413: PUSH
2414: EMPTY
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: PUSH
2420: LD_OWVAR 67
2424: ARRAY
2425: PUSH
2426: LD_INT 0
2428: PUSH
2429: LD_INT 1
2431: PUSH
2432: LD_INT 2
2434: PUSH
2435: LD_INT 2
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: LIST
2442: LIST
2443: PUSH
2444: LD_OWVAR 67
2448: ARRAY
2449: PUSH
2450: LD_INT 0
2452: PUSH
2453: LD_INT 0
2455: PUSH
2456: LD_INT 2
2458: PUSH
2459: LD_INT 3
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: LIST
2466: LIST
2467: PUSH
2468: LD_OWVAR 67
2472: ARRAY
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: LIST
2478: PUSH
2479: LD_INT 1
2481: PUSH
2482: LD_INT 2
2484: PUSH
2485: LD_INT 2
2487: PUSH
2488: LD_INT 3
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: LIST
2495: LIST
2496: PUSH
2497: LD_OWVAR 67
2501: ARRAY
2502: PUSH
2503: LD_INT 0
2505: PUSH
2506: LD_INT 1
2508: PUSH
2509: LD_INT 2
2511: PUSH
2512: LD_INT 2
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: PUSH
2521: LD_OWVAR 67
2525: ARRAY
2526: PUSH
2527: LD_INT 0
2529: PUSH
2530: LD_INT 0
2532: PUSH
2533: LD_INT 1
2535: PUSH
2536: LD_INT 2
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: LIST
2543: LIST
2544: PUSH
2545: LD_OWVAR 67
2549: ARRAY
2550: PUSH
2551: EMPTY
2552: LIST
2553: LIST
2554: LIST
2555: PUSH
2556: LD_INT 2
2558: PUSH
2559: LD_INT 2
2561: PUSH
2562: LD_INT 2
2564: PUSH
2565: LD_INT 3
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: LD_OWVAR 67
2578: ARRAY
2579: PUSH
2580: LD_INT 1
2582: PUSH
2583: LD_INT 2
2585: PUSH
2586: LD_INT 3
2588: PUSH
2589: LD_INT 3
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: PUSH
2598: LD_OWVAR 67
2602: ARRAY
2603: PUSH
2604: LD_INT 0
2606: PUSH
2607: LD_INT 0
2609: PUSH
2610: LD_INT 2
2612: PUSH
2613: LD_INT 2
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: PUSH
2622: LD_OWVAR 67
2626: ARRAY
2627: PUSH
2628: EMPTY
2629: LIST
2630: LIST
2631: LIST
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: LIST
2637: LIST
2638: LIST
2639: ST_TO_ADDR
// omiBuildingArray := [ [ b_warehouse , 20 , 33 , 2 ] , [ b_oil_mine , 38 , 30 , 5 ] , [ b_barracks , 34 , 25 , 4 ] , [ b_barracks , 35 , 45 , 4 ] , [ b_lab , 27 , 27 , 3 ] , [ b_breastwork , 25 , 8 , 5 ] , [ b_bunker , 37 , 35 , 4 ] , [ b_bunker , 42 , 45 , 4 ] , [ b_bunker , 29 , 17 , 4 ] , [ b_bunker , 30 , 53 , 0 ] , [ b_bunker , 42 , 56 , 4 ] , [ b_bunker , 30 , 20 , 4 ] , [ b_solar_power , 7 , 8 , 1 ] , [ b_solar_power , 10 , 8 , 1 ] , [ b_solar_power , 13 , 8 , 1 ] , [ b_oil_power , 23 , 42 , 4 ] , [ b_factory , 13 , 14 , 1 ] , [ b_ext_noncombat , 10 , 11 , 2 ] , [ b_ext_gun , 9 , 14 , 1 ] , [ b_ext_track , 13 , 17 , 0 ] ] ;
2640: LD_ADDR_VAR 0 7
2644: PUSH
2645: LD_INT 1
2647: PUSH
2648: LD_INT 20
2650: PUSH
2651: LD_INT 33
2653: PUSH
2654: LD_INT 2
2656: PUSH
2657: EMPTY
2658: LIST
2659: LIST
2660: LIST
2661: LIST
2662: PUSH
2663: LD_INT 29
2665: PUSH
2666: LD_INT 38
2668: PUSH
2669: LD_INT 30
2671: PUSH
2672: LD_INT 5
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: LIST
2679: LIST
2680: PUSH
2681: LD_INT 5
2683: PUSH
2684: LD_INT 34
2686: PUSH
2687: LD_INT 25
2689: PUSH
2690: LD_INT 4
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 5
2701: PUSH
2702: LD_INT 35
2704: PUSH
2705: LD_INT 45
2707: PUSH
2708: LD_INT 4
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: LIST
2715: LIST
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: LD_INT 27
2722: PUSH
2723: LD_INT 27
2725: PUSH
2726: LD_INT 3
2728: PUSH
2729: EMPTY
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 31
2737: PUSH
2738: LD_INT 25
2740: PUSH
2741: LD_INT 8
2743: PUSH
2744: LD_INT 5
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: LIST
2751: LIST
2752: PUSH
2753: LD_INT 32
2755: PUSH
2756: LD_INT 37
2758: PUSH
2759: LD_INT 35
2761: PUSH
2762: LD_INT 4
2764: PUSH
2765: EMPTY
2766: LIST
2767: LIST
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 32
2773: PUSH
2774: LD_INT 42
2776: PUSH
2777: LD_INT 45
2779: PUSH
2780: LD_INT 4
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: LIST
2787: LIST
2788: PUSH
2789: LD_INT 32
2791: PUSH
2792: LD_INT 29
2794: PUSH
2795: LD_INT 17
2797: PUSH
2798: LD_INT 4
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 32
2809: PUSH
2810: LD_INT 30
2812: PUSH
2813: LD_INT 53
2815: PUSH
2816: LD_INT 0
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: PUSH
2825: LD_INT 32
2827: PUSH
2828: LD_INT 42
2830: PUSH
2831: LD_INT 56
2833: PUSH
2834: LD_INT 4
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: PUSH
2843: LD_INT 32
2845: PUSH
2846: LD_INT 30
2848: PUSH
2849: LD_INT 20
2851: PUSH
2852: LD_INT 4
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: LIST
2859: LIST
2860: PUSH
2861: LD_INT 27
2863: PUSH
2864: LD_INT 7
2866: PUSH
2867: LD_INT 8
2869: PUSH
2870: LD_INT 1
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: LIST
2877: LIST
2878: PUSH
2879: LD_INT 27
2881: PUSH
2882: LD_INT 10
2884: PUSH
2885: LD_INT 8
2887: PUSH
2888: LD_INT 1
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: LIST
2895: LIST
2896: PUSH
2897: LD_INT 27
2899: PUSH
2900: LD_INT 13
2902: PUSH
2903: LD_INT 8
2905: PUSH
2906: LD_INT 1
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: LIST
2913: LIST
2914: PUSH
2915: LD_INT 26
2917: PUSH
2918: LD_INT 23
2920: PUSH
2921: LD_INT 42
2923: PUSH
2924: LD_INT 4
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: LIST
2931: LIST
2932: PUSH
2933: LD_INT 3
2935: PUSH
2936: LD_INT 13
2938: PUSH
2939: LD_INT 14
2941: PUSH
2942: LD_INT 1
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: LIST
2949: LIST
2950: PUSH
2951: LD_INT 19
2953: PUSH
2954: LD_INT 10
2956: PUSH
2957: LD_INT 11
2959: PUSH
2960: LD_INT 2
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: PUSH
2969: LD_INT 17
2971: PUSH
2972: LD_INT 9
2974: PUSH
2975: LD_INT 14
2977: PUSH
2978: LD_INT 1
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: PUSH
2987: LD_INT 16
2989: PUSH
2990: LD_INT 13
2992: PUSH
2993: LD_INT 17
2995: PUSH
2996: LD_INT 0
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: LIST
3009: LIST
3010: LIST
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: LIST
3021: LIST
3022: LIST
3023: LIST
3024: LIST
3025: LIST
3026: ST_TO_ADDR
// for i in omiBuildingArray do
3027: LD_ADDR_VAR 0 2
3031: PUSH
3032: LD_VAR 0 7
3036: PUSH
3037: FOR_IN
3038: IFFALSE 3094
// PrepareBuilding ( 1 , 1 , 5 , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
3040: LD_INT 1
3042: PPUSH
3043: LD_INT 1
3045: PPUSH
3046: LD_INT 5
3048: PPUSH
3049: LD_VAR 0 2
3053: PUSH
3054: LD_INT 1
3056: ARRAY
3057: PPUSH
3058: LD_VAR 0 2
3062: PUSH
3063: LD_INT 2
3065: ARRAY
3066: PPUSH
3067: LD_VAR 0 2
3071: PUSH
3072: LD_INT 3
3074: ARRAY
3075: PPUSH
3076: LD_VAR 0 2
3080: PUSH
3081: LD_INT 4
3083: ARRAY
3084: PPUSH
3085: LD_INT 0
3087: PPUSH
3088: CALL 46437 0 8
3092: GO 3037
3094: POP
3095: POP
// omikronDepot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3096: LD_ADDR_VAR 0 6
3100: PUSH
3101: LD_INT 22
3103: PUSH
3104: LD_INT 1
3106: PUSH
3107: EMPTY
3108: LIST
3109: LIST
3110: PUSH
3111: LD_INT 30
3113: PUSH
3114: LD_INT 1
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PUSH
3121: EMPTY
3122: LIST
3123: LIST
3124: PPUSH
3125: CALL_OW 69
3129: PUSH
3130: LD_INT 1
3132: ARRAY
3133: ST_TO_ADDR
// SetBName ( omikronDepot , omikron ) ;
3134: LD_VAR 0 6
3138: PPUSH
3139: LD_STRING omikron
3141: PPUSH
3142: CALL_OW 500
// for i := 1 to 2 do
3146: LD_ADDR_VAR 0 2
3150: PUSH
3151: DOUBLE
3152: LD_INT 1
3154: DEC
3155: ST_TO_ADDR
3156: LD_INT 2
3158: PUSH
3159: FOR_TO
3160: IFFALSE 3186
// SetResourceType ( GetBase ( omikronDepot ) , i , 500 ) ;
3162: LD_VAR 0 6
3166: PPUSH
3167: CALL_OW 274
3171: PPUSH
3172: LD_VAR 0 2
3176: PPUSH
3177: LD_INT 500
3179: PPUSH
3180: CALL_OW 277
3184: GO 3159
3186: POP
3187: POP
// uc_side := 1 ;
3188: LD_ADDR_OWVAR 20
3192: PUSH
3193: LD_INT 1
3195: ST_TO_ADDR
// uc_nation := 1 ;
3196: LD_ADDR_OWVAR 21
3200: PUSH
3201: LD_INT 1
3203: ST_TO_ADDR
// omicronSquad := [ ] ;
3204: LD_ADDR_EXP 64
3208: PUSH
3209: EMPTY
3210: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
3211: LD_ADDR_VAR 0 2
3215: PUSH
3216: LD_INT 22
3218: PUSH
3219: LD_INT 1
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: LD_INT 2
3228: PUSH
3229: LD_INT 30
3231: PUSH
3232: LD_INT 32
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: PUSH
3239: LD_INT 30
3241: PUSH
3242: LD_INT 31
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: LIST
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: PPUSH
3258: CALL_OW 69
3262: PUSH
3263: FOR_IN
3264: IFFALSE 3383
// begin PrepareHuman ( sex_male , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3266: LD_INT 1
3268: PPUSH
3269: LD_INT 1
3271: PPUSH
3272: LD_INT 3
3274: PUSH
3275: LD_INT 4
3277: PUSH
3278: LD_INT 5
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: LIST
3285: PUSH
3286: LD_OWVAR 67
3290: ARRAY
3291: PPUSH
3292: CALL_OW 380
// un := CreateHuman ;
3296: LD_ADDR_VAR 0 3
3300: PUSH
3301: CALL_OW 44
3305: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
3306: LD_ADDR_EXP 64
3310: PUSH
3311: LD_EXP 64
3315: PUSH
3316: LD_VAR 0 3
3320: UNION
3321: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
3322: LD_VAR 0 3
3326: PPUSH
3327: LD_VAR 0 2
3331: PPUSH
3332: CALL_OW 254
3336: PUSH
3337: LD_INT 3
3339: MINUS
3340: PPUSH
3341: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
3345: LD_VAR 0 3
3349: PPUSH
3350: LD_VAR 0 2
3354: PPUSH
3355: CALL_OW 52
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , areaOmicron ) ) ;
3359: LD_VAR 0 2
3363: PPUSH
3364: LD_VAR 0 2
3368: PPUSH
3369: LD_INT 8
3371: PPUSH
3372: CALL 16013 0 2
3376: PPUSH
3377: CALL_OW 431
// end ;
3381: GO 3263
3383: POP
3384: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3385: LD_ADDR_VAR 0 2
3389: PUSH
3390: DOUBLE
3391: LD_INT 1
3393: DEC
3394: ST_TO_ADDR
3395: LD_INT 3
3397: PUSH
3398: LD_INT 4
3400: PUSH
3401: LD_INT 5
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: LIST
3408: PUSH
3409: LD_OWVAR 67
3413: ARRAY
3414: PUSH
3415: FOR_TO
3416: IFFALSE 3473
// begin PrepareHuman ( false , 2 , 2 ) ;
3418: LD_INT 0
3420: PPUSH
3421: LD_INT 2
3423: PPUSH
3424: LD_INT 2
3426: PPUSH
3427: CALL_OW 380
// un := CreateHuman ;
3431: LD_ADDR_VAR 0 3
3435: PUSH
3436: CALL_OW 44
3440: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
3441: LD_ADDR_EXP 64
3445: PUSH
3446: LD_EXP 64
3450: PUSH
3451: LD_VAR 0 3
3455: UNION
3456: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikronDepot ) ;
3457: LD_VAR 0 3
3461: PPUSH
3462: LD_VAR 0 6
3466: PPUSH
3467: CALL_OW 52
// end ;
3471: GO 3415
3473: POP
3474: POP
// for i := 1 to 2 do
3475: LD_ADDR_VAR 0 2
3479: PUSH
3480: DOUBLE
3481: LD_INT 1
3483: DEC
3484: ST_TO_ADDR
3485: LD_INT 2
3487: PUSH
3488: FOR_TO
3489: IFFALSE 3655
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ i ] , engine_solar , control_manual , [ us_light_gun , us_gatling_gun ] [ i ] , 100 ) ;
3491: LD_INT 2
3493: PUSH
3494: LD_INT 3
3496: PUSH
3497: EMPTY
3498: LIST
3499: LIST
3500: PUSH
3501: LD_VAR 0 2
3505: ARRAY
3506: PPUSH
3507: LD_INT 2
3509: PPUSH
3510: LD_INT 1
3512: PPUSH
3513: LD_INT 3
3515: PUSH
3516: LD_INT 4
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: PUSH
3523: LD_VAR 0 2
3527: ARRAY
3528: PPUSH
3529: LD_INT 100
3531: PPUSH
3532: CALL 10881 0 5
// veh := CreateVehicle ;
3536: LD_ADDR_VAR 0 5
3540: PUSH
3541: CALL_OW 45
3545: ST_TO_ADDR
// PlaceUnitXYR ( veh , 28 , 37 , 6 , false ) ;
3546: LD_VAR 0 5
3550: PPUSH
3551: LD_INT 28
3553: PPUSH
3554: LD_INT 37
3556: PPUSH
3557: LD_INT 6
3559: PPUSH
3560: LD_INT 0
3562: PPUSH
3563: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
3567: LD_INT 0
3569: PPUSH
3570: LD_INT 3
3572: PPUSH
3573: LD_INT 2
3575: PPUSH
3576: CALL_OW 380
// un := CreateHuman ;
3580: LD_ADDR_VAR 0 3
3584: PUSH
3585: CALL_OW 44
3589: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
3590: LD_ADDR_EXP 64
3594: PUSH
3595: LD_EXP 64
3599: PUSH
3600: LD_VAR 0 3
3604: UNION
3605: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3606: LD_VAR 0 3
3610: PPUSH
3611: LD_VAR 0 5
3615: PPUSH
3616: CALL_OW 52
// ComMoveXY ( un , GetX ( un ) + 3 , GetY ( un ) ) ;
3620: LD_VAR 0 3
3624: PPUSH
3625: LD_VAR 0 3
3629: PPUSH
3630: CALL_OW 250
3634: PUSH
3635: LD_INT 3
3637: PLUS
3638: PPUSH
3639: LD_VAR 0 3
3643: PPUSH
3644: CALL_OW 251
3648: PPUSH
3649: CALL_OW 111
// end ;
3653: GO 3488
3655: POP
3656: POP
// end ;
3657: LD_VAR 0 1
3661: RET
// export amConvoyTroops ; export function PrepareAmericanConvoy ( soldiersAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road ; begin
3662: LD_INT 0
3664: PPUSH
3665: PPUSH
3666: PPUSH
3667: PPUSH
3668: PPUSH
// uc_side := 1 ;
3669: LD_ADDR_OWVAR 20
3673: PUSH
3674: LD_INT 1
3676: ST_TO_ADDR
// uc_nation := 1 ;
3677: LD_ADDR_OWVAR 21
3681: PUSH
3682: LD_INT 1
3684: ST_TO_ADDR
// hc_name :=  ;
3685: LD_ADDR_OWVAR 26
3689: PUSH
3690: LD_STRING 
3692: ST_TO_ADDR
// hc_gallery :=  ;
3693: LD_ADDR_OWVAR 33
3697: PUSH
3698: LD_STRING 
3700: ST_TO_ADDR
// for i := 1 to soldiersAmount do
3701: LD_ADDR_VAR 0 6
3705: PUSH
3706: DOUBLE
3707: LD_INT 1
3709: DEC
3710: ST_TO_ADDR
3711: LD_VAR 0 1
3715: PUSH
3716: FOR_TO
3717: IFFALSE 3776
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3719: LD_INT 0
3721: PPUSH
3722: LD_EXP 40
3726: PPUSH
3727: CALL_OW 381
// un = CreateHuman ;
3731: LD_ADDR_VAR 0 7
3735: PUSH
3736: CALL_OW 44
3740: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
3741: LD_ADDR_EXP 68
3745: PUSH
3746: LD_EXP 68
3750: PUSH
3751: LD_VAR 0 7
3755: ADD
3756: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
3757: LD_VAR 0 7
3761: PPUSH
3762: LD_VAR 0 4
3766: PPUSH
3767: LD_INT 0
3769: PPUSH
3770: CALL_OW 49
// end ;
3774: GO 3716
3776: POP
3777: POP
// for i := 1 to scientistsAmount do
3778: LD_ADDR_VAR 0 6
3782: PUSH
3783: DOUBLE
3784: LD_INT 1
3786: DEC
3787: ST_TO_ADDR
3788: LD_VAR 0 2
3792: PUSH
3793: FOR_TO
3794: IFFALSE 3853
// begin PrepareScientist ( false , enemySkillLevel ) ;
3796: LD_INT 0
3798: PPUSH
3799: LD_EXP 40
3803: PPUSH
3804: CALL_OW 384
// un = CreateHuman ;
3808: LD_ADDR_VAR 0 7
3812: PUSH
3813: CALL_OW 44
3817: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
3818: LD_ADDR_EXP 68
3822: PUSH
3823: LD_EXP 68
3827: PUSH
3828: LD_VAR 0 7
3832: ADD
3833: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
3834: LD_VAR 0 7
3838: PPUSH
3839: LD_VAR 0 4
3843: PPUSH
3844: LD_INT 0
3846: PPUSH
3847: CALL_OW 49
// end ;
3851: GO 3793
3853: POP
3854: POP
// for i := 1 to vehiclesAmount do
3855: LD_ADDR_VAR 0 6
3859: PUSH
3860: DOUBLE
3861: LD_INT 1
3863: DEC
3864: ST_TO_ADDR
3865: LD_VAR 0 3
3869: PUSH
3870: FOR_TO
3871: IFFALSE 4037
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
3873: LD_ADDR_OWVAR 40
3877: PUSH
3878: LD_INT 2
3880: PUSH
3881: LD_INT 4
3883: PUSH
3884: LD_INT 3
3886: PUSH
3887: EMPTY
3888: LIST
3889: LIST
3890: LIST
3891: PUSH
3892: LD_INT 1
3894: PPUSH
3895: LD_INT 3
3897: PPUSH
3898: CALL_OW 12
3902: ARRAY
3903: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
3904: LD_ADDR_OWVAR 37
3908: PUSH
3909: LD_INT 3
3911: ST_TO_ADDR
// vc_control = control_manual ;
3912: LD_ADDR_OWVAR 38
3916: PUSH
3917: LD_INT 1
3919: ST_TO_ADDR
// vc_engine = engine_combustion ;
3920: LD_ADDR_OWVAR 39
3924: PUSH
3925: LD_INT 1
3927: ST_TO_ADDR
// veh = CreateVehicle ;
3928: LD_ADDR_VAR 0 8
3932: PUSH
3933: CALL_OW 45
3937: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
3938: LD_ADDR_EXP 68
3942: PUSH
3943: LD_EXP 68
3947: PUSH
3948: LD_VAR 0 8
3952: ADD
3953: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
3954: LD_VAR 0 8
3958: PPUSH
3959: LD_VAR 0 4
3963: PPUSH
3964: LD_INT 0
3966: PPUSH
3967: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
3971: LD_INT 0
3973: PPUSH
3974: LD_EXP 40
3978: PPUSH
3979: CALL_OW 383
// un = CreateHuman ;
3983: LD_ADDR_VAR 0 7
3987: PUSH
3988: CALL_OW 44
3992: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
3993: LD_ADDR_EXP 68
3997: PUSH
3998: LD_EXP 68
4002: PUSH
4003: LD_VAR 0 7
4007: ADD
4008: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4009: LD_VAR 0 7
4013: PPUSH
4014: LD_VAR 0 8
4018: PPUSH
4019: CALL_OW 52
// SetFuel ( veh , 100 ) ;
4023: LD_VAR 0 8
4027: PPUSH
4028: LD_INT 100
4030: PPUSH
4031: CALL_OW 240
// end ;
4035: GO 3870
4037: POP
4038: POP
// ComAgressiveMove ( amConvoyTroops , 25 , 31 ) ;
4039: LD_EXP 68
4043: PPUSH
4044: LD_INT 25
4046: PPUSH
4047: LD_INT 31
4049: PPUSH
4050: CALL_OW 114
// end ; end_of_file end_of_file
4054: LD_VAR 0 5
4058: RET
// on BuildingComplete ( building ) do var un , bunkers , sols ;
4059: LD_INT 0
4061: PPUSH
4062: PPUSH
4063: PPUSH
// begin if GetSide ( building ) = 6 and ( GetBType ( building ) = b_bunker or GetBType ( building ) = b_armoury ) then
4064: LD_VAR 0 1
4068: PPUSH
4069: CALL_OW 255
4073: PUSH
4074: LD_INT 6
4076: EQUAL
4077: PUSH
4078: LD_VAR 0 1
4082: PPUSH
4083: CALL_OW 266
4087: PUSH
4088: LD_INT 32
4090: EQUAL
4091: PUSH
4092: LD_VAR 0 1
4096: PPUSH
4097: CALL_OW 266
4101: PUSH
4102: LD_INT 4
4104: EQUAL
4105: OR
4106: AND
4107: IFFALSE 4225
// begin sols := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_inside ] ] ) ;
4109: LD_ADDR_VAR 0 4
4113: PUSH
4114: LD_INT 22
4116: PUSH
4117: LD_INT 6
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: PUSH
4124: LD_INT 21
4126: PUSH
4127: LD_INT 1
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: PUSH
4134: LD_INT 25
4136: PUSH
4137: LD_INT 1
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: PUSH
4144: LD_INT 54
4146: PUSH
4147: EMPTY
4148: LIST
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: PPUSH
4156: CALL_OW 69
4160: ST_TO_ADDR
// for un in sols do
4161: LD_ADDR_VAR 0 2
4165: PUSH
4166: LD_VAR 0 4
4170: PUSH
4171: FOR_IN
4172: IFFALSE 4223
// begin if GetBType ( IsInUnit ( un ) ) = b_bunker then
4174: LD_VAR 0 2
4178: PPUSH
4179: CALL_OW 310
4183: PPUSH
4184: CALL_OW 266
4188: PUSH
4189: LD_INT 32
4191: EQUAL
4192: IFFALSE 4196
// continue ;
4194: GO 4171
// ComExit ( un ) ;
4196: LD_VAR 0 2
4200: PPUSH
4201: CALL 43086 0 1
// AddComEnterUnit ( un , building ) ;
4205: LD_VAR 0 2
4209: PPUSH
4210: LD_VAR 0 1
4214: PPUSH
4215: CALL_OW 180
// break ;
4219: GO 4223
// end ;
4221: GO 4171
4223: POP
4224: POP
// end ; end ; end_of_file
4225: PPOPN 4
4227: END
// export currentTeam , kirovBaseUnits ; export function MissionIntro ; var un , selectedPeople ; begin
4228: LD_INT 0
4230: PPUSH
4231: PPUSH
4232: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
4233: LD_EXP 41
4237: PUSH
4238: LD_EXP 53
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: PPUSH
4247: CALL_OW 87
// if not Belkov then
4251: LD_EXP 45
4255: NOT
4256: IFFALSE 4332
// begin Say ( Kurin , D1a-Kur-1 ) ;
4258: LD_EXP 53
4262: PPUSH
4263: LD_STRING D1a-Kur-1
4265: PPUSH
4266: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
4270: LD_EXP 41
4274: PPUSH
4275: LD_STRING D1a-Bur-1
4277: PPUSH
4278: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
4282: LD_EXP 53
4286: PPUSH
4287: LD_STRING D1a-Kur-2
4289: PPUSH
4290: CALL_OW 88
// Say ( Kurin , D1a-Kur-2a ) ;
4294: LD_EXP 53
4298: PPUSH
4299: LD_STRING D1a-Kur-2a
4301: PPUSH
4302: CALL_OW 88
// Say ( Kurin , D1a-Kur-2b ) ;
4306: LD_EXP 53
4310: PPUSH
4311: LD_STRING D1a-Kur-2b
4313: PPUSH
4314: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
4318: LD_EXP 41
4322: PPUSH
4323: LD_STRING D1a-Bur-2
4325: PPUSH
4326: CALL_OW 88
// end else
4330: GO 4368
// begin Say ( Kurin , D1b-Kur-1 ) ;
4332: LD_EXP 53
4336: PPUSH
4337: LD_STRING D1b-Kur-1
4339: PPUSH
4340: CALL_OW 88
// Say ( Belkov , D1b-Bel-1 ) ;
4344: LD_EXP 45
4348: PPUSH
4349: LD_STRING D1b-Bel-1
4351: PPUSH
4352: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
4356: LD_EXP 53
4360: PPUSH
4361: LD_STRING D1b-Kur-2
4363: PPUSH
4364: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
4368: LD_EXP 53
4372: PPUSH
4373: LD_STRING D2-Kur-1
4375: PPUSH
4376: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
4380: LD_EXP 41
4384: PPUSH
4385: LD_STRING D2-Bur-1
4387: PPUSH
4388: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
4392: LD_EXP 53
4396: PPUSH
4397: LD_STRING D2-Kur-2
4399: PPUSH
4400: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
4404: LD_EXP 41
4408: PPUSH
4409: LD_STRING D2-Bur-2
4411: PPUSH
4412: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
4416: LD_EXP 53
4420: PPUSH
4421: LD_STRING D2-Kur-3
4423: PPUSH
4424: CALL_OW 88
// PrepareAmericansMissionIntro ;
4428: CALL 1942 0 0
// SetAttitude ( 1 , 6 , att_friend , true ) ;
4432: LD_INT 1
4434: PPUSH
4435: LD_INT 6
4437: PPUSH
4438: LD_INT 1
4440: PPUSH
4441: LD_INT 1
4443: PPUSH
4444: CALL_OW 80
// RevealFogArea ( 3 , RevealMapPartArea ) ;
4448: LD_INT 3
4450: PPUSH
4451: LD_INT 5
4453: PPUSH
4454: CALL_OW 332
// CenterNowOnUnits ( [ Popov , Gaydar ] ) ;
4458: LD_EXP 54
4462: PUSH
4463: LD_EXP 60
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PPUSH
4472: CALL_OW 87
// wait ( 0 0$3 ) ;
4476: LD_INT 105
4478: PPUSH
4479: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
4483: LD_EXP 54
4487: PPUSH
4488: LD_STRING D2-Pop-3
4490: PPUSH
4491: CALL_OW 94
// wait ( 0 0$0.3 ) ;
4495: LD_INT 10
4497: PPUSH
4498: CALL_OW 67
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
4502: LD_EXP 41
4506: PUSH
4507: LD_EXP 53
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PPUSH
4516: CALL_OW 87
// Say ( Kurin , D2-Kur-4 ) ;
4520: LD_EXP 53
4524: PPUSH
4525: LD_STRING D2-Kur-4
4527: PPUSH
4528: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
4532: LD_EXP 41
4536: PPUSH
4537: LD_STRING D2-Bur-4
4539: PPUSH
4540: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
4544: LD_EXP 53
4548: PPUSH
4549: LD_STRING D2-Kur-5
4551: PPUSH
4552: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
4556: LD_EXP 41
4560: PPUSH
4561: LD_STRING D2-Bur-5
4563: PPUSH
4564: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
4568: LD_EXP 53
4572: PPUSH
4573: LD_STRING D2-Kur-6
4575: PPUSH
4576: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
4580: LD_EXP 41
4584: PPUSH
4585: LD_STRING D2-Bur-4
4587: PPUSH
4588: CALL_OW 88
// kirovBaseUnits = otherKirovUnits ;
4592: LD_ADDR_EXP 70
4596: PUSH
4597: LD_EXP 55
4601: ST_TO_ADDR
// kirovBaseUnits = kirovBaseUnits ^ otherBeriaUnits ;
4602: LD_ADDR_EXP 70
4606: PUSH
4607: LD_EXP 70
4611: PUSH
4612: LD_EXP 50
4616: ADD
4617: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 6 , 6 , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , Belkov , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ kirovBaseUnits ^ [ sel_dont_change_class , sel_not_changeable , Kurin , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
4618: LD_ADDR_VAR 0 3
4622: PUSH
4623: LD_STRING text
4625: PPUSH
4626: LD_INT 6
4628: PPUSH
4629: LD_INT 6
4631: PPUSH
4632: LD_INT -5
4634: PUSH
4635: LD_EXP 41
4639: PUSH
4640: LD_EXP 42
4644: PUSH
4645: LD_EXP 44
4649: PUSH
4650: LD_EXP 43
4654: PUSH
4655: LD_EXP 45
4659: PUSH
4660: LD_INT -6
4662: PUSH
4663: LD_INT -2
4665: PUSH
4666: LD_INT -3
4668: PUSH
4669: LD_INT -5
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: PUSH
4684: LD_EXP 70
4688: ADD
4689: PUSH
4690: LD_INT -6
4692: PUSH
4693: LD_INT -4
4695: PUSH
4696: LD_EXP 53
4700: PUSH
4701: LD_EXP 54
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: ADD
4712: PPUSH
4713: LD_INT 1
4715: PUSH
4716: LD_INT 3
4718: PUSH
4719: LD_INT 2
4721: PUSH
4722: LD_INT 1
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: PUSH
4729: LD_INT 4
4731: PUSH
4732: LD_INT 1
4734: PUSH
4735: EMPTY
4736: LIST
4737: LIST
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: PPUSH
4745: CALL_OW 42
4749: ST_TO_ADDR
// SetSide ( kirovBaseUnits , 6 ) ;
4750: LD_EXP 70
4754: PPUSH
4755: LD_INT 6
4757: PPUSH
4758: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
4762: LD_VAR 0 3
4766: PPUSH
4767: LD_INT 3
4769: PPUSH
4770: CALL_OW 235
// AddComMoveXY ( Popov , 135 , 67 ) ;
4774: LD_EXP 54
4778: PPUSH
4779: LD_INT 135
4781: PPUSH
4782: LD_INT 67
4784: PPUSH
4785: CALL_OW 171
// AddComMoveXY ( Gaydar , 209 , 164 ) ;
4789: LD_EXP 60
4793: PPUSH
4794: LD_INT 209
4796: PPUSH
4797: LD_INT 164
4799: PPUSH
4800: CALL_OW 171
// kirovBarracks := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) ;
4804: LD_ADDR_EXP 63
4808: PUSH
4809: LD_INT 22
4811: PUSH
4812: LD_INT 6
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: PUSH
4819: LD_INT 30
4821: PUSH
4822: LD_INT 4
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PUSH
4829: EMPTY
4830: LIST
4831: LIST
4832: PPUSH
4833: CALL_OW 69
4837: ST_TO_ADDR
// kirovBaseUnits := kirovBaseUnits diff selectedPeople ;
4838: LD_ADDR_EXP 70
4842: PUSH
4843: LD_EXP 70
4847: PUSH
4848: LD_VAR 0 3
4852: DIFF
4853: ST_TO_ADDR
// SetClass ( kirovBaseUnits [ 1 ] , 2 ) ;
4854: LD_EXP 70
4858: PUSH
4859: LD_INT 1
4861: ARRAY
4862: PPUSH
4863: LD_INT 2
4865: PPUSH
4866: CALL_OW 336
// for un in selectedPeople do
4870: LD_ADDR_VAR 0 2
4874: PUSH
4875: LD_VAR 0 3
4879: PUSH
4880: FOR_IN
4881: IFFALSE 4894
// ComExitBuilding ( un ) ;
4883: LD_VAR 0 2
4887: PPUSH
4888: CALL_OW 122
4892: GO 4880
4894: POP
4895: POP
// currentTeam := selectedPeople union [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] ;
4896: LD_ADDR_EXP 69
4900: PUSH
4901: LD_VAR 0 3
4905: PUSH
4906: LD_EXP 41
4910: PUSH
4911: LD_EXP 42
4915: PUSH
4916: LD_EXP 44
4920: PUSH
4921: LD_EXP 45
4925: PUSH
4926: LD_EXP 43
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: LIST
4936: LIST
4937: UNION
4938: ST_TO_ADDR
// AddComMoveXY ( currentTeam , 113 , 97 ) ;
4939: LD_EXP 69
4943: PPUSH
4944: LD_INT 113
4946: PPUSH
4947: LD_INT 97
4949: PPUSH
4950: CALL_OW 171
// for un in kirovBaseUnits do
4954: LD_ADDR_VAR 0 2
4958: PUSH
4959: LD_EXP 70
4963: PUSH
4964: FOR_IN
4965: IFFALSE 5002
// begin if IsInUnit ( un ) = 0 then
4967: LD_VAR 0 2
4971: PPUSH
4972: CALL_OW 310
4976: PUSH
4977: LD_INT 0
4979: EQUAL
4980: IFFALSE 5000
// ComEnterUnit ( un , kirovBarracks [ 1 ] ) ;
4982: LD_VAR 0 2
4986: PPUSH
4987: LD_EXP 63
4991: PUSH
4992: LD_INT 1
4994: ARRAY
4995: PPUSH
4996: CALL_OW 120
// end ;
5000: GO 4964
5002: POP
5003: POP
// ChangeMissionObjectives ( M1 ) ;
5004: LD_STRING M1
5006: PPUSH
5007: CALL_OW 337
// Query ( QReadyInfo ) ;
5011: LD_STRING QReadyInfo
5013: PPUSH
5014: CALL_OW 97
// counterEnable := true ;
5018: LD_ADDR_EXP 71
5022: PUSH
5023: LD_INT 1
5025: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5026: LD_INT 175
5028: PPUSH
5029: CALL_OW 67
// for un in kirovBaseUnits do
5033: LD_ADDR_VAR 0 2
5037: PUSH
5038: LD_EXP 70
5042: PUSH
5043: FOR_IN
5044: IFFALSE 5097
// begin if IsInUnit ( un ) = 0 and not GetClass ( un ) = 2 then
5046: LD_VAR 0 2
5050: PPUSH
5051: CALL_OW 310
5055: PUSH
5056: LD_INT 0
5058: EQUAL
5059: PUSH
5060: LD_VAR 0 2
5064: PPUSH
5065: CALL_OW 257
5069: PUSH
5070: LD_INT 2
5072: EQUAL
5073: NOT
5074: AND
5075: IFFALSE 5095
// ComEnterUnit ( un , kirovBarracks [ 2 ] ) ;
5077: LD_VAR 0 2
5081: PPUSH
5082: LD_EXP 63
5086: PUSH
5087: LD_INT 2
5089: ARRAY
5090: PPUSH
5091: CALL_OW 120
// end ;
5095: GO 5043
5097: POP
5098: POP
// UpgradeKirovBase ;
5099: CALL 1703 0 0
// end ;
5103: LD_VAR 0 1
5107: RET
// export counterEnable , counterIndex , ticks , timeToPrepareAttack , timeToArabAttack ; every 0 0$1 trigger counterEnable do var veh , hum , i ;
5108: LD_EXP 71
5112: IFFALSE 5838
5114: GO 5116
5116: DISABLE
5117: LD_INT 0
5119: PPUSH
5120: PPUSH
5121: PPUSH
// begin enable ;
5122: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) ;
5123: LD_ADDR_VAR 0 1
5127: PUSH
5128: LD_INT 22
5130: PUSH
5131: LD_INT 3
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: PUSH
5138: LD_INT 21
5140: PUSH
5141: LD_INT 2
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: LD_INT 3
5150: PUSH
5151: LD_INT 34
5153: PUSH
5154: LD_INT 51
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: LIST
5169: PPUSH
5170: CALL_OW 69
5174: ST_TO_ADDR
// hum = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + kurinVehNeeded ;
5175: LD_ADDR_VAR 0 2
5179: PUSH
5180: LD_INT 22
5182: PUSH
5183: LD_INT 3
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: PUSH
5190: LD_INT 21
5192: PUSH
5193: LD_INT 1
5195: PUSH
5196: EMPTY
5197: LIST
5198: LIST
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PPUSH
5204: CALL_OW 69
5208: PUSH
5209: LD_EXP 32
5213: PLUS
5214: ST_TO_ADDR
// ticks = ticks + 0 0$01 ;
5215: LD_ADDR_EXP 73
5219: PUSH
5220: LD_EXP 73
5224: PUSH
5225: LD_INT 35
5227: PLUS
5228: ST_TO_ADDR
// VehNeeded = hum - veh ;
5229: LD_ADDR_EXP 37
5233: PUSH
5234: LD_VAR 0 2
5238: PUSH
5239: LD_VAR 0 1
5243: MINUS
5244: ST_TO_ADDR
// timeToArabAttack = timeToArabAttack - 0 0$01 ;
5245: LD_ADDR_EXP 75
5249: PUSH
5250: LD_EXP 75
5254: PUSH
5255: LD_INT 35
5257: MINUS
5258: ST_TO_ADDR
// case counterIndex of 1 :
5259: LD_EXP 72
5263: PUSH
5264: LD_INT 1
5266: DOUBLE
5267: EQUAL
5268: IFTRUE 5272
5270: GO 5355
5272: POP
// begin if VehNeeded <= 0 then
5273: LD_EXP 37
5277: PUSH
5278: LD_INT 0
5280: LESSEQUAL
5281: IFFALSE 5309
// display_strings = [ #Ru03-5a ] ^ [ #Ru03-4 , timeToPrepareAttack ] else
5283: LD_ADDR_OWVAR 47
5287: PUSH
5288: LD_STRING #Ru03-5a
5290: PUSH
5291: EMPTY
5292: LIST
5293: PUSH
5294: LD_STRING #Ru03-4
5296: PUSH
5297: LD_EXP 74
5301: PUSH
5302: EMPTY
5303: LIST
5304: LIST
5305: ADD
5306: ST_TO_ADDR
5307: GO 5339
// display_strings = [ #Ru03-5 , VehNeeded ] ^ [ #Ru03-4 , timeToPrepareAttack ] ;
5309: LD_ADDR_OWVAR 47
5313: PUSH
5314: LD_STRING #Ru03-5
5316: PUSH
5317: LD_EXP 37
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: PUSH
5326: LD_STRING #Ru03-4
5328: PUSH
5329: LD_EXP 74
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: ADD
5338: ST_TO_ADDR
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ;
5339: LD_ADDR_EXP 74
5343: PUSH
5344: LD_EXP 74
5348: PUSH
5349: LD_INT 35
5351: MINUS
5352: ST_TO_ADDR
// end ; 2 :
5353: GO 5482
5355: LD_INT 2
5357: DOUBLE
5358: EQUAL
5359: IFTRUE 5363
5361: GO 5397
5363: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
5364: LD_ADDR_OWVAR 47
5368: PUSH
5369: LD_STRING #Ru03-1
5371: PUSH
5372: LD_EXP 21
5376: PUSH
5377: EMPTY
5378: LIST
5379: LIST
5380: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
5381: LD_ADDR_EXP 21
5385: PUSH
5386: LD_EXP 21
5390: PUSH
5391: LD_INT 35
5393: MINUS
5394: ST_TO_ADDR
// end ; 3 :
5395: GO 5482
5397: LD_INT 3
5399: DOUBLE
5400: EQUAL
5401: IFTRUE 5405
5403: GO 5439
5405: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
5406: LD_ADDR_OWVAR 47
5410: PUSH
5411: LD_STRING #Ru03-2
5413: PUSH
5414: LD_EXP 21
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
5423: LD_ADDR_EXP 21
5427: PUSH
5428: LD_EXP 21
5432: PUSH
5433: LD_INT 35
5435: MINUS
5436: ST_TO_ADDR
// end ; 4 :
5437: GO 5482
5439: LD_INT 4
5441: DOUBLE
5442: EQUAL
5443: IFTRUE 5447
5445: GO 5481
5447: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
5448: LD_ADDR_OWVAR 47
5452: PUSH
5453: LD_STRING #Ru03-3
5455: PUSH
5456: LD_EXP 20
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
5465: LD_ADDR_EXP 20
5469: PUSH
5470: LD_EXP 20
5474: PUSH
5475: LD_INT 35
5477: MINUS
5478: ST_TO_ADDR
// end ; end ;
5479: GO 5482
5481: POP
// if ticks = 0 0$10 then
5482: LD_EXP 73
5486: PUSH
5487: LD_INT 350
5489: EQUAL
5490: IFFALSE 5538
// PrepareAmericanConvoy ( amConvoyGroups [ 1 ] [ 1 ] , amConvoyGroups [ 1 ] [ 2 ] , amConvoyGroups [ 1 ] [ 3 ] , AmTroopsSpawn ) ;
5492: LD_EXP 67
5496: PUSH
5497: LD_INT 1
5499: ARRAY
5500: PUSH
5501: LD_INT 1
5503: ARRAY
5504: PPUSH
5505: LD_EXP 67
5509: PUSH
5510: LD_INT 1
5512: ARRAY
5513: PUSH
5514: LD_INT 2
5516: ARRAY
5517: PPUSH
5518: LD_EXP 67
5522: PUSH
5523: LD_INT 1
5525: ARRAY
5526: PUSH
5527: LD_INT 3
5529: ARRAY
5530: PPUSH
5531: LD_INT 6
5533: PPUSH
5534: CALL 3662 0 4
// if ticks = 12 12$0 then
5538: LD_EXP 73
5542: PUSH
5543: LD_INT 25200
5545: EQUAL
5546: IFFALSE 5613
// PrepareAmericanConvoy ( amConvoyGroups [ 2 ] [ 1 ] , amConvoyGroups [ 2 ] [ 2 ] , amConvoyGroups [ 2 ] [ 3 ] , [ AmTroopsSpawn , AmTroopsSpawnSwamp ] [ Rand ( 1 , 2 ) ] ) ;
5548: LD_EXP 67
5552: PUSH
5553: LD_INT 2
5555: ARRAY
5556: PUSH
5557: LD_INT 1
5559: ARRAY
5560: PPUSH
5561: LD_EXP 67
5565: PUSH
5566: LD_INT 2
5568: ARRAY
5569: PUSH
5570: LD_INT 2
5572: ARRAY
5573: PPUSH
5574: LD_EXP 67
5578: PUSH
5579: LD_INT 2
5581: ARRAY
5582: PUSH
5583: LD_INT 3
5585: ARRAY
5586: PPUSH
5587: LD_INT 6
5589: PUSH
5590: LD_INT 9
5592: PUSH
5593: EMPTY
5594: LIST
5595: LIST
5596: PUSH
5597: LD_INT 1
5599: PPUSH
5600: LD_INT 2
5602: PPUSH
5603: CALL_OW 12
5607: ARRAY
5608: PPUSH
5609: CALL 3662 0 4
// if ticks = 20 20$0 then
5613: LD_EXP 73
5617: PUSH
5618: LD_INT 42000
5620: EQUAL
5621: IFFALSE 5688
// PrepareAmericanConvoy ( amConvoyGroups [ 3 ] [ 1 ] , amConvoyGroups [ 3 ] [ 2 ] , amConvoyGroups [ 3 ] [ 3 ] , [ AmTroopsSpawn , AmTroopsSpawnSwamp ] [ Rand ( 1 , 2 ) ] ) ;
5623: LD_EXP 67
5627: PUSH
5628: LD_INT 3
5630: ARRAY
5631: PUSH
5632: LD_INT 1
5634: ARRAY
5635: PPUSH
5636: LD_EXP 67
5640: PUSH
5641: LD_INT 3
5643: ARRAY
5644: PUSH
5645: LD_INT 2
5647: ARRAY
5648: PPUSH
5649: LD_EXP 67
5653: PUSH
5654: LD_INT 3
5656: ARRAY
5657: PUSH
5658: LD_INT 3
5660: ARRAY
5661: PPUSH
5662: LD_INT 6
5664: PUSH
5665: LD_INT 9
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: PUSH
5672: LD_INT 1
5674: PPUSH
5675: LD_INT 2
5677: PPUSH
5678: CALL_OW 12
5682: ARRAY
5683: PPUSH
5684: CALL 3662 0 4
// if ticks = 23 23$0 then
5688: LD_EXP 73
5692: PUSH
5693: LD_INT 48300
5695: EQUAL
5696: IFFALSE 5763
// PrepareAmericanConvoy ( amConvoyGroups [ 4 ] [ 1 ] , amConvoyGroups [ 4 ] [ 2 ] , amConvoyGroups [ 4 ] [ 3 ] , [ AmTroopsSpawn , AmTroopsSpawnSwamp ] [ Rand ( 1 , 2 ) ] ) ;
5698: LD_EXP 67
5702: PUSH
5703: LD_INT 4
5705: ARRAY
5706: PUSH
5707: LD_INT 1
5709: ARRAY
5710: PPUSH
5711: LD_EXP 67
5715: PUSH
5716: LD_INT 4
5718: ARRAY
5719: PUSH
5720: LD_INT 2
5722: ARRAY
5723: PPUSH
5724: LD_EXP 67
5728: PUSH
5729: LD_INT 4
5731: ARRAY
5732: PUSH
5733: LD_INT 3
5735: ARRAY
5736: PPUSH
5737: LD_INT 6
5739: PUSH
5740: LD_INT 9
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: PUSH
5747: LD_INT 1
5749: PPUSH
5750: LD_INT 2
5752: PPUSH
5753: CALL_OW 12
5757: ARRAY
5758: PPUSH
5759: CALL 3662 0 4
// if ticks = 26 26$0 then
5763: LD_EXP 73
5767: PUSH
5768: LD_INT 54600
5770: EQUAL
5771: IFFALSE 5838
// PrepareAmericanConvoy ( amConvoyGroups [ 5 ] [ 1 ] , amConvoyGroups [ 5 ] [ 2 ] , amConvoyGroups [ 5 ] [ 3 ] , [ AmTroopsSpawn , AmTroopsSpawnSwamp ] [ Rand ( 1 , 2 ) ] ) ;
5773: LD_EXP 67
5777: PUSH
5778: LD_INT 5
5780: ARRAY
5781: PUSH
5782: LD_INT 1
5784: ARRAY
5785: PPUSH
5786: LD_EXP 67
5790: PUSH
5791: LD_INT 5
5793: ARRAY
5794: PUSH
5795: LD_INT 2
5797: ARRAY
5798: PPUSH
5799: LD_EXP 67
5803: PUSH
5804: LD_INT 5
5806: ARRAY
5807: PUSH
5808: LD_INT 3
5810: ARRAY
5811: PPUSH
5812: LD_INT 6
5814: PUSH
5815: LD_INT 9
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: PUSH
5822: LD_INT 1
5824: PPUSH
5825: LD_INT 2
5827: PPUSH
5828: CALL_OW 12
5832: ARRAY
5833: PPUSH
5834: CALL 3662 0 4
// end ; end_of_file
5838: PPOPN 3
5840: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
5841: LD_INT 0
5843: PPUSH
// ar_miner := 81 ;
5844: LD_ADDR_EXP 83
5848: PUSH
5849: LD_INT 81
5851: ST_TO_ADDR
// ar_crane := 88 ;
5852: LD_ADDR_EXP 82
5856: PUSH
5857: LD_INT 88
5859: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
5860: LD_ADDR_EXP 77
5864: PUSH
5865: LD_INT 89
5867: ST_TO_ADDR
// us_hack := 99 ;
5868: LD_ADDR_EXP 78
5872: PUSH
5873: LD_INT 99
5875: ST_TO_ADDR
// us_artillery := 97 ;
5876: LD_ADDR_EXP 79
5880: PUSH
5881: LD_INT 97
5883: ST_TO_ADDR
// ar_bio_bomb := 91 ;
5884: LD_ADDR_EXP 80
5888: PUSH
5889: LD_INT 91
5891: ST_TO_ADDR
// ar_mortar := 92 ;
5892: LD_ADDR_EXP 81
5896: PUSH
5897: LD_INT 92
5899: ST_TO_ADDR
// ru_flamethrower := 93 ;
5900: LD_ADDR_EXP 84
5904: PUSH
5905: LD_INT 93
5907: ST_TO_ADDR
// ru_radar := 98 ;
5908: LD_ADDR_EXP 76
5912: PUSH
5913: LD_INT 98
5915: ST_TO_ADDR
// tech_Artillery := 80 ;
5916: LD_ADDR_EXP 85
5920: PUSH
5921: LD_INT 80
5923: ST_TO_ADDR
// tech_RadMat := 81 ;
5924: LD_ADDR_EXP 86
5928: PUSH
5929: LD_INT 81
5931: ST_TO_ADDR
// tech_BasicTools := 82 ;
5932: LD_ADDR_EXP 87
5936: PUSH
5937: LD_INT 82
5939: ST_TO_ADDR
// tech_Cargo := 83 ;
5940: LD_ADDR_EXP 88
5944: PUSH
5945: LD_INT 83
5947: ST_TO_ADDR
// tech_Track := 84 ;
5948: LD_ADDR_EXP 89
5952: PUSH
5953: LD_INT 84
5955: ST_TO_ADDR
// tech_Crane := 85 ;
5956: LD_ADDR_EXP 90
5960: PUSH
5961: LD_INT 85
5963: ST_TO_ADDR
// tech_Bulldozer := 86 ;
5964: LD_ADDR_EXP 91
5968: PUSH
5969: LD_INT 86
5971: ST_TO_ADDR
// tech_Hovercraft := 87 ;
5972: LD_ADDR_EXP 92
5976: PUSH
5977: LD_INT 87
5979: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
5980: LD_ADDR_EXP 93
5984: PUSH
5985: LD_INT 88
5987: ST_TO_ADDR
// class_mastodont := 31 ;
5988: LD_ADDR_EXP 94
5992: PUSH
5993: LD_INT 31
5995: ST_TO_ADDR
// class_horse := 21 ;
5996: LD_ADDR_EXP 95
6000: PUSH
6001: LD_INT 21
6003: ST_TO_ADDR
// end ;
6004: LD_VAR 0 1
6008: RET
// every 1 do
6009: GO 6011
6011: DISABLE
// InitGlobalVariables ; end_of_file
6012: CALL 5841 0 0
6016: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
6017: LD_INT 0
6019: PPUSH
6020: PPUSH
// if exist_mode then
6021: LD_VAR 0 2
6025: IFFALSE 6050
// unit := CreateCharacter ( prefix & ident ) else
6027: LD_ADDR_VAR 0 5
6031: PUSH
6032: LD_VAR 0 3
6036: PUSH
6037: LD_VAR 0 1
6041: STR
6042: PPUSH
6043: CALL_OW 34
6047: ST_TO_ADDR
6048: GO 6065
// unit := NewCharacter ( ident ) ;
6050: LD_ADDR_VAR 0 5
6054: PUSH
6055: LD_VAR 0 1
6059: PPUSH
6060: CALL_OW 25
6064: ST_TO_ADDR
// result := unit ;
6065: LD_ADDR_VAR 0 4
6069: PUSH
6070: LD_VAR 0 5
6074: ST_TO_ADDR
// end ;
6075: LD_VAR 0 4
6079: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
6080: LD_INT 0
6082: PPUSH
6083: PPUSH
// if not side or not nation then
6084: LD_VAR 0 1
6088: NOT
6089: PUSH
6090: LD_VAR 0 2
6094: NOT
6095: OR
6096: IFFALSE 6100
// exit ;
6098: GO 6868
// case nation of nation_american :
6100: LD_VAR 0 2
6104: PUSH
6105: LD_INT 1
6107: DOUBLE
6108: EQUAL
6109: IFTRUE 6113
6111: GO 6327
6113: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
6114: LD_ADDR_VAR 0 4
6118: PUSH
6119: LD_INT 35
6121: PUSH
6122: LD_INT 45
6124: PUSH
6125: LD_INT 46
6127: PUSH
6128: LD_INT 47
6130: PUSH
6131: LD_INT 82
6133: PUSH
6134: LD_INT 83
6136: PUSH
6137: LD_INT 84
6139: PUSH
6140: LD_INT 85
6142: PUSH
6143: LD_INT 86
6145: PUSH
6146: LD_INT 1
6148: PUSH
6149: LD_INT 2
6151: PUSH
6152: LD_INT 6
6154: PUSH
6155: LD_INT 15
6157: PUSH
6158: LD_INT 16
6160: PUSH
6161: LD_INT 7
6163: PUSH
6164: LD_INT 12
6166: PUSH
6167: LD_INT 13
6169: PUSH
6170: LD_INT 10
6172: PUSH
6173: LD_INT 14
6175: PUSH
6176: LD_INT 20
6178: PUSH
6179: LD_INT 21
6181: PUSH
6182: LD_INT 22
6184: PUSH
6185: LD_INT 25
6187: PUSH
6188: LD_INT 32
6190: PUSH
6191: LD_INT 27
6193: PUSH
6194: LD_INT 36
6196: PUSH
6197: LD_INT 69
6199: PUSH
6200: LD_INT 39
6202: PUSH
6203: LD_INT 34
6205: PUSH
6206: LD_INT 40
6208: PUSH
6209: LD_INT 48
6211: PUSH
6212: LD_INT 49
6214: PUSH
6215: LD_INT 50
6217: PUSH
6218: LD_INT 51
6220: PUSH
6221: LD_INT 52
6223: PUSH
6224: LD_INT 53
6226: PUSH
6227: LD_INT 54
6229: PUSH
6230: LD_INT 55
6232: PUSH
6233: LD_INT 56
6235: PUSH
6236: LD_INT 57
6238: PUSH
6239: LD_INT 58
6241: PUSH
6242: LD_INT 59
6244: PUSH
6245: LD_INT 60
6247: PUSH
6248: LD_INT 61
6250: PUSH
6251: LD_INT 62
6253: PUSH
6254: LD_INT 80
6256: PUSH
6257: LD_INT 82
6259: PUSH
6260: LD_INT 83
6262: PUSH
6263: LD_INT 84
6265: PUSH
6266: LD_INT 85
6268: PUSH
6269: LD_INT 86
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: ST_TO_ADDR
6325: GO 6792
6327: LD_INT 2
6329: DOUBLE
6330: EQUAL
6331: IFTRUE 6335
6333: GO 6561
6335: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
6336: LD_ADDR_VAR 0 4
6340: PUSH
6341: LD_INT 35
6343: PUSH
6344: LD_INT 45
6346: PUSH
6347: LD_INT 46
6349: PUSH
6350: LD_INT 47
6352: PUSH
6353: LD_INT 82
6355: PUSH
6356: LD_INT 83
6358: PUSH
6359: LD_INT 84
6361: PUSH
6362: LD_INT 85
6364: PUSH
6365: LD_INT 87
6367: PUSH
6368: LD_INT 70
6370: PUSH
6371: LD_INT 1
6373: PUSH
6374: LD_INT 11
6376: PUSH
6377: LD_INT 3
6379: PUSH
6380: LD_INT 4
6382: PUSH
6383: LD_INT 5
6385: PUSH
6386: LD_INT 6
6388: PUSH
6389: LD_INT 15
6391: PUSH
6392: LD_INT 18
6394: PUSH
6395: LD_INT 7
6397: PUSH
6398: LD_INT 17
6400: PUSH
6401: LD_INT 8
6403: PUSH
6404: LD_INT 20
6406: PUSH
6407: LD_INT 21
6409: PUSH
6410: LD_INT 22
6412: PUSH
6413: LD_INT 72
6415: PUSH
6416: LD_INT 26
6418: PUSH
6419: LD_INT 69
6421: PUSH
6422: LD_INT 39
6424: PUSH
6425: LD_INT 40
6427: PUSH
6428: LD_INT 41
6430: PUSH
6431: LD_INT 42
6433: PUSH
6434: LD_INT 43
6436: PUSH
6437: LD_INT 48
6439: PUSH
6440: LD_INT 49
6442: PUSH
6443: LD_INT 50
6445: PUSH
6446: LD_INT 51
6448: PUSH
6449: LD_INT 52
6451: PUSH
6452: LD_INT 53
6454: PUSH
6455: LD_INT 54
6457: PUSH
6458: LD_INT 55
6460: PUSH
6461: LD_INT 56
6463: PUSH
6464: LD_INT 60
6466: PUSH
6467: LD_INT 61
6469: PUSH
6470: LD_INT 62
6472: PUSH
6473: LD_INT 66
6475: PUSH
6476: LD_INT 67
6478: PUSH
6479: LD_INT 68
6481: PUSH
6482: LD_INT 81
6484: PUSH
6485: LD_INT 82
6487: PUSH
6488: LD_INT 83
6490: PUSH
6491: LD_INT 84
6493: PUSH
6494: LD_INT 85
6496: PUSH
6497: LD_INT 87
6499: PUSH
6500: LD_INT 88
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: ST_TO_ADDR
6559: GO 6792
6561: LD_INT 3
6563: DOUBLE
6564: EQUAL
6565: IFTRUE 6569
6567: GO 6791
6569: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
6570: LD_ADDR_VAR 0 4
6574: PUSH
6575: LD_INT 46
6577: PUSH
6578: LD_INT 47
6580: PUSH
6581: LD_INT 1
6583: PUSH
6584: LD_INT 2
6586: PUSH
6587: LD_INT 82
6589: PUSH
6590: LD_INT 83
6592: PUSH
6593: LD_INT 84
6595: PUSH
6596: LD_INT 85
6598: PUSH
6599: LD_INT 86
6601: PUSH
6602: LD_INT 11
6604: PUSH
6605: LD_INT 9
6607: PUSH
6608: LD_INT 20
6610: PUSH
6611: LD_INT 19
6613: PUSH
6614: LD_INT 21
6616: PUSH
6617: LD_INT 24
6619: PUSH
6620: LD_INT 22
6622: PUSH
6623: LD_INT 25
6625: PUSH
6626: LD_INT 28
6628: PUSH
6629: LD_INT 29
6631: PUSH
6632: LD_INT 30
6634: PUSH
6635: LD_INT 31
6637: PUSH
6638: LD_INT 37
6640: PUSH
6641: LD_INT 38
6643: PUSH
6644: LD_INT 32
6646: PUSH
6647: LD_INT 27
6649: PUSH
6650: LD_INT 33
6652: PUSH
6653: LD_INT 69
6655: PUSH
6656: LD_INT 39
6658: PUSH
6659: LD_INT 34
6661: PUSH
6662: LD_INT 40
6664: PUSH
6665: LD_INT 71
6667: PUSH
6668: LD_INT 23
6670: PUSH
6671: LD_INT 44
6673: PUSH
6674: LD_INT 48
6676: PUSH
6677: LD_INT 49
6679: PUSH
6680: LD_INT 50
6682: PUSH
6683: LD_INT 51
6685: PUSH
6686: LD_INT 52
6688: PUSH
6689: LD_INT 53
6691: PUSH
6692: LD_INT 54
6694: PUSH
6695: LD_INT 55
6697: PUSH
6698: LD_INT 56
6700: PUSH
6701: LD_INT 57
6703: PUSH
6704: LD_INT 58
6706: PUSH
6707: LD_INT 59
6709: PUSH
6710: LD_INT 63
6712: PUSH
6713: LD_INT 64
6715: PUSH
6716: LD_INT 65
6718: PUSH
6719: LD_INT 82
6721: PUSH
6722: LD_INT 83
6724: PUSH
6725: LD_INT 84
6727: PUSH
6728: LD_INT 85
6730: PUSH
6731: LD_INT 86
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: ST_TO_ADDR
6789: GO 6792
6791: POP
// if state > - 1 and state < 3 then
6792: LD_VAR 0 3
6796: PUSH
6797: LD_INT 1
6799: NEG
6800: GREATER
6801: PUSH
6802: LD_VAR 0 3
6806: PUSH
6807: LD_INT 3
6809: LESS
6810: AND
6811: IFFALSE 6868
// for i in result do
6813: LD_ADDR_VAR 0 5
6817: PUSH
6818: LD_VAR 0 4
6822: PUSH
6823: FOR_IN
6824: IFFALSE 6866
// if GetTech ( i , side ) <> state then
6826: LD_VAR 0 5
6830: PPUSH
6831: LD_VAR 0 1
6835: PPUSH
6836: CALL_OW 321
6840: PUSH
6841: LD_VAR 0 3
6845: NONEQUAL
6846: IFFALSE 6864
// result := result diff i ;
6848: LD_ADDR_VAR 0 4
6852: PUSH
6853: LD_VAR 0 4
6857: PUSH
6858: LD_VAR 0 5
6862: DIFF
6863: ST_TO_ADDR
6864: GO 6823
6866: POP
6867: POP
// end ;
6868: LD_VAR 0 4
6872: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
6873: LD_INT 0
6875: PPUSH
6876: PPUSH
6877: PPUSH
// result := true ;
6878: LD_ADDR_VAR 0 3
6882: PUSH
6883: LD_INT 1
6885: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
6886: LD_ADDR_VAR 0 5
6890: PUSH
6891: LD_VAR 0 2
6895: PPUSH
6896: CALL_OW 480
6900: ST_TO_ADDR
// if not tmp then
6901: LD_VAR 0 5
6905: NOT
6906: IFFALSE 6910
// exit ;
6908: GO 6959
// for i in tmp do
6910: LD_ADDR_VAR 0 4
6914: PUSH
6915: LD_VAR 0 5
6919: PUSH
6920: FOR_IN
6921: IFFALSE 6957
// if GetTech ( i , side ) <> state_researched then
6923: LD_VAR 0 4
6927: PPUSH
6928: LD_VAR 0 1
6932: PPUSH
6933: CALL_OW 321
6937: PUSH
6938: LD_INT 2
6940: NONEQUAL
6941: IFFALSE 6955
// begin result := false ;
6943: LD_ADDR_VAR 0 3
6947: PUSH
6948: LD_INT 0
6950: ST_TO_ADDR
// exit ;
6951: POP
6952: POP
6953: GO 6959
// end ;
6955: GO 6920
6957: POP
6958: POP
// end ;
6959: LD_VAR 0 3
6963: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
6964: LD_INT 0
6966: PPUSH
6967: PPUSH
6968: PPUSH
6969: PPUSH
6970: PPUSH
6971: PPUSH
6972: PPUSH
6973: PPUSH
6974: PPUSH
6975: PPUSH
6976: PPUSH
6977: PPUSH
6978: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
6979: LD_VAR 0 1
6983: NOT
6984: PUSH
6985: LD_VAR 0 1
6989: PPUSH
6990: CALL_OW 257
6994: PUSH
6995: LD_INT 9
6997: NONEQUAL
6998: OR
6999: IFFALSE 7003
// exit ;
7001: GO 7576
// side := GetSide ( unit ) ;
7003: LD_ADDR_VAR 0 9
7007: PUSH
7008: LD_VAR 0 1
7012: PPUSH
7013: CALL_OW 255
7017: ST_TO_ADDR
// tech_space := tech_spacanom ;
7018: LD_ADDR_VAR 0 12
7022: PUSH
7023: LD_INT 29
7025: ST_TO_ADDR
// tech_time := tech_taurad ;
7026: LD_ADDR_VAR 0 13
7030: PUSH
7031: LD_INT 28
7033: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
7034: LD_ADDR_VAR 0 11
7038: PUSH
7039: LD_VAR 0 1
7043: PPUSH
7044: CALL_OW 310
7048: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
7049: LD_VAR 0 11
7053: PPUSH
7054: CALL_OW 247
7058: PUSH
7059: LD_INT 2
7061: EQUAL
7062: IFFALSE 7066
// exit ;
7064: GO 7576
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7066: LD_ADDR_VAR 0 8
7070: PUSH
7071: LD_INT 81
7073: PUSH
7074: LD_VAR 0 9
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: LD_INT 3
7085: PUSH
7086: LD_INT 21
7088: PUSH
7089: LD_INT 3
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PPUSH
7104: CALL_OW 69
7108: ST_TO_ADDR
// if not tmp then
7109: LD_VAR 0 8
7113: NOT
7114: IFFALSE 7118
// exit ;
7116: GO 7576
// if in_unit then
7118: LD_VAR 0 11
7122: IFFALSE 7146
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
7124: LD_ADDR_VAR 0 10
7128: PUSH
7129: LD_VAR 0 8
7133: PPUSH
7134: LD_VAR 0 11
7138: PPUSH
7139: CALL_OW 74
7143: ST_TO_ADDR
7144: GO 7166
// enemy := NearestUnitToUnit ( tmp , unit ) ;
7146: LD_ADDR_VAR 0 10
7150: PUSH
7151: LD_VAR 0 8
7155: PPUSH
7156: LD_VAR 0 1
7160: PPUSH
7161: CALL_OW 74
7165: ST_TO_ADDR
// if not enemy then
7166: LD_VAR 0 10
7170: NOT
7171: IFFALSE 7175
// exit ;
7173: GO 7576
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
7175: LD_VAR 0 11
7179: PUSH
7180: LD_VAR 0 11
7184: PPUSH
7185: LD_VAR 0 10
7189: PPUSH
7190: CALL_OW 296
7194: PUSH
7195: LD_INT 13
7197: GREATER
7198: AND
7199: PUSH
7200: LD_VAR 0 1
7204: PPUSH
7205: LD_VAR 0 10
7209: PPUSH
7210: CALL_OW 296
7214: PUSH
7215: LD_INT 12
7217: GREATER
7218: OR
7219: IFFALSE 7223
// exit ;
7221: GO 7576
// missile := [ 1 ] ;
7223: LD_ADDR_VAR 0 14
7227: PUSH
7228: LD_INT 1
7230: PUSH
7231: EMPTY
7232: LIST
7233: ST_TO_ADDR
// if Researched ( side , tech_space ) then
7234: LD_VAR 0 9
7238: PPUSH
7239: LD_VAR 0 12
7243: PPUSH
7244: CALL_OW 325
7248: IFFALSE 7277
// missile := Replace ( missile , missile + 1 , 2 ) ;
7250: LD_ADDR_VAR 0 14
7254: PUSH
7255: LD_VAR 0 14
7259: PPUSH
7260: LD_VAR 0 14
7264: PUSH
7265: LD_INT 1
7267: PLUS
7268: PPUSH
7269: LD_INT 2
7271: PPUSH
7272: CALL_OW 1
7276: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
7277: LD_VAR 0 9
7281: PPUSH
7282: LD_VAR 0 13
7286: PPUSH
7287: CALL_OW 325
7291: PUSH
7292: LD_VAR 0 10
7296: PPUSH
7297: CALL_OW 255
7301: PPUSH
7302: LD_VAR 0 13
7306: PPUSH
7307: CALL_OW 325
7311: NOT
7312: AND
7313: IFFALSE 7342
// missile := Replace ( missile , missile + 1 , 3 ) ;
7315: LD_ADDR_VAR 0 14
7319: PUSH
7320: LD_VAR 0 14
7324: PPUSH
7325: LD_VAR 0 14
7329: PUSH
7330: LD_INT 1
7332: PLUS
7333: PPUSH
7334: LD_INT 3
7336: PPUSH
7337: CALL_OW 1
7341: ST_TO_ADDR
// if missile < 2 then
7342: LD_VAR 0 14
7346: PUSH
7347: LD_INT 2
7349: LESS
7350: IFFALSE 7354
// exit ;
7352: GO 7576
// x := GetX ( enemy ) ;
7354: LD_ADDR_VAR 0 4
7358: PUSH
7359: LD_VAR 0 10
7363: PPUSH
7364: CALL_OW 250
7368: ST_TO_ADDR
// y := GetY ( enemy ) ;
7369: LD_ADDR_VAR 0 5
7373: PUSH
7374: LD_VAR 0 10
7378: PPUSH
7379: CALL_OW 251
7383: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
7384: LD_ADDR_VAR 0 6
7388: PUSH
7389: LD_VAR 0 4
7393: PUSH
7394: LD_INT 1
7396: NEG
7397: PPUSH
7398: LD_INT 1
7400: PPUSH
7401: CALL_OW 12
7405: PLUS
7406: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
7407: LD_ADDR_VAR 0 7
7411: PUSH
7412: LD_VAR 0 5
7416: PUSH
7417: LD_INT 1
7419: NEG
7420: PPUSH
7421: LD_INT 1
7423: PPUSH
7424: CALL_OW 12
7428: PLUS
7429: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7430: LD_VAR 0 6
7434: PPUSH
7435: LD_VAR 0 7
7439: PPUSH
7440: CALL_OW 488
7444: NOT
7445: IFFALSE 7467
// begin _x := x ;
7447: LD_ADDR_VAR 0 6
7451: PUSH
7452: LD_VAR 0 4
7456: ST_TO_ADDR
// _y := y ;
7457: LD_ADDR_VAR 0 7
7461: PUSH
7462: LD_VAR 0 5
7466: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
7467: LD_ADDR_VAR 0 3
7471: PUSH
7472: LD_INT 1
7474: PPUSH
7475: LD_VAR 0 14
7479: PPUSH
7480: CALL_OW 12
7484: ST_TO_ADDR
// case i of 1 :
7485: LD_VAR 0 3
7489: PUSH
7490: LD_INT 1
7492: DOUBLE
7493: EQUAL
7494: IFTRUE 7498
7496: GO 7515
7498: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
7499: LD_VAR 0 1
7503: PPUSH
7504: LD_VAR 0 10
7508: PPUSH
7509: CALL_OW 115
7513: GO 7576
7515: LD_INT 2
7517: DOUBLE
7518: EQUAL
7519: IFTRUE 7523
7521: GO 7545
7523: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
7524: LD_VAR 0 1
7528: PPUSH
7529: LD_VAR 0 6
7533: PPUSH
7534: LD_VAR 0 7
7538: PPUSH
7539: CALL_OW 153
7543: GO 7576
7545: LD_INT 3
7547: DOUBLE
7548: EQUAL
7549: IFTRUE 7553
7551: GO 7575
7553: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
7554: LD_VAR 0 1
7558: PPUSH
7559: LD_VAR 0 6
7563: PPUSH
7564: LD_VAR 0 7
7568: PPUSH
7569: CALL_OW 154
7573: GO 7576
7575: POP
// end ;
7576: LD_VAR 0 2
7580: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
7581: LD_INT 0
7583: PPUSH
7584: PPUSH
7585: PPUSH
7586: PPUSH
7587: PPUSH
7588: PPUSH
// if not unit or not building then
7589: LD_VAR 0 1
7593: NOT
7594: PUSH
7595: LD_VAR 0 2
7599: NOT
7600: OR
7601: IFFALSE 7605
// exit ;
7603: GO 7763
// x := GetX ( building ) ;
7605: LD_ADDR_VAR 0 5
7609: PUSH
7610: LD_VAR 0 2
7614: PPUSH
7615: CALL_OW 250
7619: ST_TO_ADDR
// y := GetY ( building ) ;
7620: LD_ADDR_VAR 0 6
7624: PUSH
7625: LD_VAR 0 2
7629: PPUSH
7630: CALL_OW 251
7634: ST_TO_ADDR
// for i = 0 to 5 do
7635: LD_ADDR_VAR 0 4
7639: PUSH
7640: DOUBLE
7641: LD_INT 0
7643: DEC
7644: ST_TO_ADDR
7645: LD_INT 5
7647: PUSH
7648: FOR_TO
7649: IFFALSE 7761
// begin _x := ShiftX ( x , i , 3 ) ;
7651: LD_ADDR_VAR 0 7
7655: PUSH
7656: LD_VAR 0 5
7660: PPUSH
7661: LD_VAR 0 4
7665: PPUSH
7666: LD_INT 3
7668: PPUSH
7669: CALL_OW 272
7673: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
7674: LD_ADDR_VAR 0 8
7678: PUSH
7679: LD_VAR 0 6
7683: PPUSH
7684: LD_VAR 0 4
7688: PPUSH
7689: LD_INT 3
7691: PPUSH
7692: CALL_OW 273
7696: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7697: LD_VAR 0 7
7701: PPUSH
7702: LD_VAR 0 8
7706: PPUSH
7707: CALL_OW 488
7711: NOT
7712: IFFALSE 7716
// continue ;
7714: GO 7648
// if HexInfo ( _x , _y ) = 0 then
7716: LD_VAR 0 7
7720: PPUSH
7721: LD_VAR 0 8
7725: PPUSH
7726: CALL_OW 428
7730: PUSH
7731: LD_INT 0
7733: EQUAL
7734: IFFALSE 7759
// begin ComMoveXY ( unit , _x , _y ) ;
7736: LD_VAR 0 1
7740: PPUSH
7741: LD_VAR 0 7
7745: PPUSH
7746: LD_VAR 0 8
7750: PPUSH
7751: CALL_OW 111
// exit ;
7755: POP
7756: POP
7757: GO 7763
// end ; end ;
7759: GO 7648
7761: POP
7762: POP
// end ;
7763: LD_VAR 0 3
7767: RET
// export function ScanBase ( side , base_area ) ; begin
7768: LD_INT 0
7770: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
7771: LD_ADDR_VAR 0 3
7775: PUSH
7776: LD_VAR 0 2
7780: PPUSH
7781: LD_INT 81
7783: PUSH
7784: LD_VAR 0 1
7788: PUSH
7789: EMPTY
7790: LIST
7791: LIST
7792: PPUSH
7793: CALL_OW 70
7797: ST_TO_ADDR
// end ;
7798: LD_VAR 0 3
7802: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
7803: LD_INT 0
7805: PPUSH
7806: PPUSH
7807: PPUSH
7808: PPUSH
// result := false ;
7809: LD_ADDR_VAR 0 2
7813: PUSH
7814: LD_INT 0
7816: ST_TO_ADDR
// side := GetSide ( unit ) ;
7817: LD_ADDR_VAR 0 3
7821: PUSH
7822: LD_VAR 0 1
7826: PPUSH
7827: CALL_OW 255
7831: ST_TO_ADDR
// nat := GetNation ( unit ) ;
7832: LD_ADDR_VAR 0 4
7836: PUSH
7837: LD_VAR 0 1
7841: PPUSH
7842: CALL_OW 248
7846: ST_TO_ADDR
// case nat of 1 :
7847: LD_VAR 0 4
7851: PUSH
7852: LD_INT 1
7854: DOUBLE
7855: EQUAL
7856: IFTRUE 7860
7858: GO 7871
7860: POP
// tech := tech_lassight ; 2 :
7861: LD_ADDR_VAR 0 5
7865: PUSH
7866: LD_INT 12
7868: ST_TO_ADDR
7869: GO 7910
7871: LD_INT 2
7873: DOUBLE
7874: EQUAL
7875: IFTRUE 7879
7877: GO 7890
7879: POP
// tech := tech_mortar ; 3 :
7880: LD_ADDR_VAR 0 5
7884: PUSH
7885: LD_INT 41
7887: ST_TO_ADDR
7888: GO 7910
7890: LD_INT 3
7892: DOUBLE
7893: EQUAL
7894: IFTRUE 7898
7896: GO 7909
7898: POP
// tech := tech_bazooka ; end ;
7899: LD_ADDR_VAR 0 5
7903: PUSH
7904: LD_INT 44
7906: ST_TO_ADDR
7907: GO 7910
7909: POP
// if Researched ( side , tech ) then
7910: LD_VAR 0 3
7914: PPUSH
7915: LD_VAR 0 5
7919: PPUSH
7920: CALL_OW 325
7924: IFFALSE 7951
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
7926: LD_ADDR_VAR 0 2
7930: PUSH
7931: LD_INT 5
7933: PUSH
7934: LD_INT 8
7936: PUSH
7937: LD_INT 9
7939: PUSH
7940: EMPTY
7941: LIST
7942: LIST
7943: LIST
7944: PUSH
7945: LD_VAR 0 4
7949: ARRAY
7950: ST_TO_ADDR
// end ;
7951: LD_VAR 0 2
7955: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
7956: LD_INT 0
7958: PPUSH
7959: PPUSH
7960: PPUSH
// if not mines then
7961: LD_VAR 0 2
7965: NOT
7966: IFFALSE 7970
// exit ;
7968: GO 8114
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7970: LD_ADDR_VAR 0 5
7974: PUSH
7975: LD_INT 81
7977: PUSH
7978: LD_VAR 0 1
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: LD_INT 3
7989: PUSH
7990: LD_INT 21
7992: PUSH
7993: LD_INT 3
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PPUSH
8008: CALL_OW 69
8012: ST_TO_ADDR
// for i in mines do
8013: LD_ADDR_VAR 0 4
8017: PUSH
8018: LD_VAR 0 2
8022: PUSH
8023: FOR_IN
8024: IFFALSE 8112
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
8026: LD_VAR 0 4
8030: PUSH
8031: LD_INT 1
8033: ARRAY
8034: PPUSH
8035: LD_VAR 0 4
8039: PUSH
8040: LD_INT 2
8042: ARRAY
8043: PPUSH
8044: CALL_OW 458
8048: NOT
8049: IFFALSE 8053
// continue ;
8051: GO 8023
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
8053: LD_VAR 0 4
8057: PUSH
8058: LD_INT 1
8060: ARRAY
8061: PPUSH
8062: LD_VAR 0 4
8066: PUSH
8067: LD_INT 2
8069: ARRAY
8070: PPUSH
8071: CALL_OW 428
8075: PUSH
8076: LD_VAR 0 5
8080: IN
8081: IFFALSE 8110
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
8083: LD_VAR 0 4
8087: PUSH
8088: LD_INT 1
8090: ARRAY
8091: PPUSH
8092: LD_VAR 0 4
8096: PUSH
8097: LD_INT 2
8099: ARRAY
8100: PPUSH
8101: LD_VAR 0 1
8105: PPUSH
8106: CALL_OW 456
// end ;
8110: GO 8023
8112: POP
8113: POP
// end ;
8114: LD_VAR 0 3
8118: RET
// export function Count ( array ) ; var i ; begin
8119: LD_INT 0
8121: PPUSH
8122: PPUSH
// result := 0 ;
8123: LD_ADDR_VAR 0 2
8127: PUSH
8128: LD_INT 0
8130: ST_TO_ADDR
// for i in array do
8131: LD_ADDR_VAR 0 3
8135: PUSH
8136: LD_VAR 0 1
8140: PUSH
8141: FOR_IN
8142: IFFALSE 8166
// if i then
8144: LD_VAR 0 3
8148: IFFALSE 8164
// result := result + 1 ;
8150: LD_ADDR_VAR 0 2
8154: PUSH
8155: LD_VAR 0 2
8159: PUSH
8160: LD_INT 1
8162: PLUS
8163: ST_TO_ADDR
8164: GO 8141
8166: POP
8167: POP
// end ;
8168: LD_VAR 0 2
8172: RET
// export function IsEmpty ( building ) ; begin
8173: LD_INT 0
8175: PPUSH
// if not building then
8176: LD_VAR 0 1
8180: NOT
8181: IFFALSE 8185
// exit ;
8183: GO 8228
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
8185: LD_ADDR_VAR 0 2
8189: PUSH
8190: LD_VAR 0 1
8194: PUSH
8195: LD_INT 22
8197: PUSH
8198: LD_VAR 0 1
8202: PPUSH
8203: CALL_OW 255
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PUSH
8212: LD_INT 58
8214: PUSH
8215: EMPTY
8216: LIST
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PPUSH
8222: CALL_OW 69
8226: IN
8227: ST_TO_ADDR
// end ;
8228: LD_VAR 0 2
8232: RET
// export function IsNotFull ( building ) ; begin
8233: LD_INT 0
8235: PPUSH
// if not building then
8236: LD_VAR 0 1
8240: NOT
8241: IFFALSE 8245
// exit ;
8243: GO 8264
// result := UnitsInside ( building ) < 6 ;
8245: LD_ADDR_VAR 0 2
8249: PUSH
8250: LD_VAR 0 1
8254: PPUSH
8255: CALL_OW 313
8259: PUSH
8260: LD_INT 6
8262: LESS
8263: ST_TO_ADDR
// end ;
8264: LD_VAR 0 2
8268: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
8269: LD_INT 0
8271: PPUSH
8272: PPUSH
8273: PPUSH
8274: PPUSH
// tmp := [ ] ;
8275: LD_ADDR_VAR 0 3
8279: PUSH
8280: EMPTY
8281: ST_TO_ADDR
// list := [ ] ;
8282: LD_ADDR_VAR 0 5
8286: PUSH
8287: EMPTY
8288: ST_TO_ADDR
// for i = 16 to 25 do
8289: LD_ADDR_VAR 0 4
8293: PUSH
8294: DOUBLE
8295: LD_INT 16
8297: DEC
8298: ST_TO_ADDR
8299: LD_INT 25
8301: PUSH
8302: FOR_TO
8303: IFFALSE 8376
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
8305: LD_ADDR_VAR 0 3
8309: PUSH
8310: LD_VAR 0 3
8314: PUSH
8315: LD_INT 22
8317: PUSH
8318: LD_VAR 0 1
8322: PPUSH
8323: CALL_OW 255
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 91
8334: PUSH
8335: LD_VAR 0 1
8339: PUSH
8340: LD_INT 6
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: LIST
8347: PUSH
8348: LD_INT 30
8350: PUSH
8351: LD_VAR 0 4
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: LIST
8364: PUSH
8365: EMPTY
8366: LIST
8367: PPUSH
8368: CALL_OW 69
8372: ADD
8373: ST_TO_ADDR
8374: GO 8302
8376: POP
8377: POP
// for i = 1 to tmp do
8378: LD_ADDR_VAR 0 4
8382: PUSH
8383: DOUBLE
8384: LD_INT 1
8386: DEC
8387: ST_TO_ADDR
8388: LD_VAR 0 3
8392: PUSH
8393: FOR_TO
8394: IFFALSE 8482
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
8396: LD_ADDR_VAR 0 5
8400: PUSH
8401: LD_VAR 0 5
8405: PUSH
8406: LD_VAR 0 3
8410: PUSH
8411: LD_VAR 0 4
8415: ARRAY
8416: PPUSH
8417: CALL_OW 266
8421: PUSH
8422: LD_VAR 0 3
8426: PUSH
8427: LD_VAR 0 4
8431: ARRAY
8432: PPUSH
8433: CALL_OW 250
8437: PUSH
8438: LD_VAR 0 3
8442: PUSH
8443: LD_VAR 0 4
8447: ARRAY
8448: PPUSH
8449: CALL_OW 251
8453: PUSH
8454: LD_VAR 0 3
8458: PUSH
8459: LD_VAR 0 4
8463: ARRAY
8464: PPUSH
8465: CALL_OW 254
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: PUSH
8476: EMPTY
8477: LIST
8478: ADD
8479: ST_TO_ADDR
8480: GO 8393
8482: POP
8483: POP
// result := list ;
8484: LD_ADDR_VAR 0 2
8488: PUSH
8489: LD_VAR 0 5
8493: ST_TO_ADDR
// end ;
8494: LD_VAR 0 2
8498: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
8499: LD_INT 0
8501: PPUSH
8502: PPUSH
8503: PPUSH
8504: PPUSH
8505: PPUSH
8506: PPUSH
8507: PPUSH
// if not factory then
8508: LD_VAR 0 1
8512: NOT
8513: IFFALSE 8517
// exit ;
8515: GO 9110
// if control = control_apeman then
8517: LD_VAR 0 4
8521: PUSH
8522: LD_INT 5
8524: EQUAL
8525: IFFALSE 8634
// begin tmp := UnitsInside ( factory ) ;
8527: LD_ADDR_VAR 0 8
8531: PUSH
8532: LD_VAR 0 1
8536: PPUSH
8537: CALL_OW 313
8541: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
8542: LD_VAR 0 8
8546: PPUSH
8547: LD_INT 25
8549: PUSH
8550: LD_INT 12
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PPUSH
8557: CALL_OW 72
8561: NOT
8562: IFFALSE 8572
// control := control_manual ;
8564: LD_ADDR_VAR 0 4
8568: PUSH
8569: LD_INT 1
8571: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
8572: LD_ADDR_VAR 0 8
8576: PUSH
8577: LD_VAR 0 1
8581: PPUSH
8582: CALL 8269 0 1
8586: ST_TO_ADDR
// if tmp then
8587: LD_VAR 0 8
8591: IFFALSE 8634
// begin for i in tmp do
8593: LD_ADDR_VAR 0 7
8597: PUSH
8598: LD_VAR 0 8
8602: PUSH
8603: FOR_IN
8604: IFFALSE 8632
// if i [ 1 ] = b_ext_radio then
8606: LD_VAR 0 7
8610: PUSH
8611: LD_INT 1
8613: ARRAY
8614: PUSH
8615: LD_INT 22
8617: EQUAL
8618: IFFALSE 8630
// begin control := control_remote ;
8620: LD_ADDR_VAR 0 4
8624: PUSH
8625: LD_INT 2
8627: ST_TO_ADDR
// break ;
8628: GO 8632
// end ;
8630: GO 8603
8632: POP
8633: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
8634: LD_VAR 0 1
8638: PPUSH
8639: LD_VAR 0 2
8643: PPUSH
8644: LD_VAR 0 3
8648: PPUSH
8649: LD_VAR 0 4
8653: PPUSH
8654: LD_VAR 0 5
8658: PPUSH
8659: CALL_OW 448
8663: IFFALSE 8698
// begin result := [ chassis , engine , control , weapon ] ;
8665: LD_ADDR_VAR 0 6
8669: PUSH
8670: LD_VAR 0 2
8674: PUSH
8675: LD_VAR 0 3
8679: PUSH
8680: LD_VAR 0 4
8684: PUSH
8685: LD_VAR 0 5
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: ST_TO_ADDR
// exit ;
8696: GO 9110
// end ; _chassis := AvailableChassisList ( factory ) ;
8698: LD_ADDR_VAR 0 9
8702: PUSH
8703: LD_VAR 0 1
8707: PPUSH
8708: CALL_OW 475
8712: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
8713: LD_ADDR_VAR 0 11
8717: PUSH
8718: LD_VAR 0 1
8722: PPUSH
8723: CALL_OW 476
8727: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
8728: LD_ADDR_VAR 0 12
8732: PUSH
8733: LD_VAR 0 1
8737: PPUSH
8738: CALL_OW 477
8742: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
8743: LD_ADDR_VAR 0 10
8747: PUSH
8748: LD_VAR 0 1
8752: PPUSH
8753: CALL_OW 478
8757: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
8758: LD_VAR 0 9
8762: NOT
8763: PUSH
8764: LD_VAR 0 11
8768: NOT
8769: OR
8770: PUSH
8771: LD_VAR 0 12
8775: NOT
8776: OR
8777: PUSH
8778: LD_VAR 0 10
8782: NOT
8783: OR
8784: IFFALSE 8819
// begin result := [ chassis , engine , control , weapon ] ;
8786: LD_ADDR_VAR 0 6
8790: PUSH
8791: LD_VAR 0 2
8795: PUSH
8796: LD_VAR 0 3
8800: PUSH
8801: LD_VAR 0 4
8805: PUSH
8806: LD_VAR 0 5
8810: PUSH
8811: EMPTY
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: ST_TO_ADDR
// exit ;
8817: GO 9110
// end ; if not chassis in _chassis then
8819: LD_VAR 0 2
8823: PUSH
8824: LD_VAR 0 9
8828: IN
8829: NOT
8830: IFFALSE 8856
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
8832: LD_ADDR_VAR 0 2
8836: PUSH
8837: LD_VAR 0 9
8841: PUSH
8842: LD_INT 1
8844: PPUSH
8845: LD_VAR 0 9
8849: PPUSH
8850: CALL_OW 12
8854: ARRAY
8855: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
8856: LD_VAR 0 2
8860: PPUSH
8861: LD_VAR 0 3
8865: PPUSH
8866: CALL 9115 0 2
8870: NOT
8871: IFFALSE 8930
// repeat engine := _engine [ 1 ] ;
8873: LD_ADDR_VAR 0 3
8877: PUSH
8878: LD_VAR 0 11
8882: PUSH
8883: LD_INT 1
8885: ARRAY
8886: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
8887: LD_ADDR_VAR 0 11
8891: PUSH
8892: LD_VAR 0 11
8896: PPUSH
8897: LD_INT 1
8899: PPUSH
8900: CALL_OW 3
8904: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
8905: LD_VAR 0 2
8909: PPUSH
8910: LD_VAR 0 3
8914: PPUSH
8915: CALL 9115 0 2
8919: PUSH
8920: LD_VAR 0 11
8924: PUSH
8925: EMPTY
8926: EQUAL
8927: OR
8928: IFFALSE 8873
// if not control in _control then
8930: LD_VAR 0 4
8934: PUSH
8935: LD_VAR 0 12
8939: IN
8940: NOT
8941: IFFALSE 8967
// control := _control [ rand ( 1 , _control ) ] ;
8943: LD_ADDR_VAR 0 4
8947: PUSH
8948: LD_VAR 0 12
8952: PUSH
8953: LD_INT 1
8955: PPUSH
8956: LD_VAR 0 12
8960: PPUSH
8961: CALL_OW 12
8965: ARRAY
8966: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
8967: LD_VAR 0 2
8971: PPUSH
8972: LD_VAR 0 5
8976: PPUSH
8977: CALL 9335 0 2
8981: NOT
8982: IFFALSE 9041
// repeat weapon := _weapon [ 1 ] ;
8984: LD_ADDR_VAR 0 5
8988: PUSH
8989: LD_VAR 0 10
8993: PUSH
8994: LD_INT 1
8996: ARRAY
8997: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
8998: LD_ADDR_VAR 0 10
9002: PUSH
9003: LD_VAR 0 10
9007: PPUSH
9008: LD_INT 1
9010: PPUSH
9011: CALL_OW 3
9015: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
9016: LD_VAR 0 2
9020: PPUSH
9021: LD_VAR 0 5
9025: PPUSH
9026: CALL 9335 0 2
9030: PUSH
9031: LD_VAR 0 10
9035: PUSH
9036: EMPTY
9037: EQUAL
9038: OR
9039: IFFALSE 8984
// result := [ ] ;
9041: LD_ADDR_VAR 0 6
9045: PUSH
9046: EMPTY
9047: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9048: LD_VAR 0 1
9052: PPUSH
9053: LD_VAR 0 2
9057: PPUSH
9058: LD_VAR 0 3
9062: PPUSH
9063: LD_VAR 0 4
9067: PPUSH
9068: LD_VAR 0 5
9072: PPUSH
9073: CALL_OW 448
9077: IFFALSE 9110
// result := [ chassis , engine , control , weapon ] ;
9079: LD_ADDR_VAR 0 6
9083: PUSH
9084: LD_VAR 0 2
9088: PUSH
9089: LD_VAR 0 3
9093: PUSH
9094: LD_VAR 0 4
9098: PUSH
9099: LD_VAR 0 5
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: ST_TO_ADDR
// end ;
9110: LD_VAR 0 6
9114: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
9115: LD_INT 0
9117: PPUSH
// if not chassis or not engine then
9118: LD_VAR 0 1
9122: NOT
9123: PUSH
9124: LD_VAR 0 2
9128: NOT
9129: OR
9130: IFFALSE 9134
// exit ;
9132: GO 9330
// case engine of engine_solar :
9134: LD_VAR 0 2
9138: PUSH
9139: LD_INT 2
9141: DOUBLE
9142: EQUAL
9143: IFTRUE 9147
9145: GO 9185
9147: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
9148: LD_ADDR_VAR 0 3
9152: PUSH
9153: LD_INT 11
9155: PUSH
9156: LD_INT 12
9158: PUSH
9159: LD_INT 13
9161: PUSH
9162: LD_INT 14
9164: PUSH
9165: LD_INT 1
9167: PUSH
9168: LD_INT 2
9170: PUSH
9171: LD_INT 3
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: ST_TO_ADDR
9183: GO 9314
9185: LD_INT 1
9187: DOUBLE
9188: EQUAL
9189: IFTRUE 9193
9191: GO 9255
9193: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
9194: LD_ADDR_VAR 0 3
9198: PUSH
9199: LD_INT 11
9201: PUSH
9202: LD_INT 12
9204: PUSH
9205: LD_INT 13
9207: PUSH
9208: LD_INT 14
9210: PUSH
9211: LD_INT 1
9213: PUSH
9214: LD_INT 2
9216: PUSH
9217: LD_INT 3
9219: PUSH
9220: LD_INT 4
9222: PUSH
9223: LD_INT 5
9225: PUSH
9226: LD_INT 21
9228: PUSH
9229: LD_INT 23
9231: PUSH
9232: LD_INT 22
9234: PUSH
9235: LD_INT 24
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: ST_TO_ADDR
9253: GO 9314
9255: LD_INT 3
9257: DOUBLE
9258: EQUAL
9259: IFTRUE 9263
9261: GO 9313
9263: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9264: LD_ADDR_VAR 0 3
9268: PUSH
9269: LD_INT 13
9271: PUSH
9272: LD_INT 14
9274: PUSH
9275: LD_INT 2
9277: PUSH
9278: LD_INT 3
9280: PUSH
9281: LD_INT 4
9283: PUSH
9284: LD_INT 5
9286: PUSH
9287: LD_INT 21
9289: PUSH
9290: LD_INT 22
9292: PUSH
9293: LD_INT 23
9295: PUSH
9296: LD_INT 24
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: ST_TO_ADDR
9311: GO 9314
9313: POP
// result := ( chassis in result ) ;
9314: LD_ADDR_VAR 0 3
9318: PUSH
9319: LD_VAR 0 1
9323: PUSH
9324: LD_VAR 0 3
9328: IN
9329: ST_TO_ADDR
// end ;
9330: LD_VAR 0 3
9334: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
9335: LD_INT 0
9337: PPUSH
// if not chassis or not weapon then
9338: LD_VAR 0 1
9342: NOT
9343: PUSH
9344: LD_VAR 0 2
9348: NOT
9349: OR
9350: IFFALSE 9354
// exit ;
9352: GO 10416
// case weapon of us_machine_gun :
9354: LD_VAR 0 2
9358: PUSH
9359: LD_INT 2
9361: DOUBLE
9362: EQUAL
9363: IFTRUE 9367
9365: GO 9397
9367: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
9368: LD_ADDR_VAR 0 3
9372: PUSH
9373: LD_INT 1
9375: PUSH
9376: LD_INT 2
9378: PUSH
9379: LD_INT 3
9381: PUSH
9382: LD_INT 4
9384: PUSH
9385: LD_INT 5
9387: PUSH
9388: EMPTY
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: ST_TO_ADDR
9395: GO 10400
9397: LD_INT 3
9399: DOUBLE
9400: EQUAL
9401: IFTRUE 9405
9403: GO 9435
9405: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
9406: LD_ADDR_VAR 0 3
9410: PUSH
9411: LD_INT 1
9413: PUSH
9414: LD_INT 2
9416: PUSH
9417: LD_INT 3
9419: PUSH
9420: LD_INT 4
9422: PUSH
9423: LD_INT 5
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: ST_TO_ADDR
9433: GO 10400
9435: LD_INT 11
9437: DOUBLE
9438: EQUAL
9439: IFTRUE 9443
9441: GO 9473
9443: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
9444: LD_ADDR_VAR 0 3
9448: PUSH
9449: LD_INT 1
9451: PUSH
9452: LD_INT 2
9454: PUSH
9455: LD_INT 3
9457: PUSH
9458: LD_INT 4
9460: PUSH
9461: LD_INT 5
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: ST_TO_ADDR
9471: GO 10400
9473: LD_INT 4
9475: DOUBLE
9476: EQUAL
9477: IFTRUE 9481
9479: GO 9507
9481: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
9482: LD_ADDR_VAR 0 3
9486: PUSH
9487: LD_INT 2
9489: PUSH
9490: LD_INT 3
9492: PUSH
9493: LD_INT 4
9495: PUSH
9496: LD_INT 5
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: ST_TO_ADDR
9505: GO 10400
9507: LD_INT 5
9509: DOUBLE
9510: EQUAL
9511: IFTRUE 9515
9513: GO 9541
9515: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
9516: LD_ADDR_VAR 0 3
9520: PUSH
9521: LD_INT 2
9523: PUSH
9524: LD_INT 3
9526: PUSH
9527: LD_INT 4
9529: PUSH
9530: LD_INT 5
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: ST_TO_ADDR
9539: GO 10400
9541: LD_INT 9
9543: DOUBLE
9544: EQUAL
9545: IFTRUE 9549
9547: GO 9575
9549: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
9550: LD_ADDR_VAR 0 3
9554: PUSH
9555: LD_INT 2
9557: PUSH
9558: LD_INT 3
9560: PUSH
9561: LD_INT 4
9563: PUSH
9564: LD_INT 5
9566: PUSH
9567: EMPTY
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: ST_TO_ADDR
9573: GO 10400
9575: LD_INT 7
9577: DOUBLE
9578: EQUAL
9579: IFTRUE 9583
9581: GO 9609
9583: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
9584: LD_ADDR_VAR 0 3
9588: PUSH
9589: LD_INT 2
9591: PUSH
9592: LD_INT 3
9594: PUSH
9595: LD_INT 4
9597: PUSH
9598: LD_INT 5
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: ST_TO_ADDR
9607: GO 10400
9609: LD_INT 12
9611: DOUBLE
9612: EQUAL
9613: IFTRUE 9617
9615: GO 9643
9617: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
9618: LD_ADDR_VAR 0 3
9622: PUSH
9623: LD_INT 2
9625: PUSH
9626: LD_INT 3
9628: PUSH
9629: LD_INT 4
9631: PUSH
9632: LD_INT 5
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: ST_TO_ADDR
9641: GO 10400
9643: LD_INT 13
9645: DOUBLE
9646: EQUAL
9647: IFTRUE 9651
9649: GO 9677
9651: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
9652: LD_ADDR_VAR 0 3
9656: PUSH
9657: LD_INT 2
9659: PUSH
9660: LD_INT 3
9662: PUSH
9663: LD_INT 4
9665: PUSH
9666: LD_INT 5
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: ST_TO_ADDR
9675: GO 10400
9677: LD_INT 14
9679: DOUBLE
9680: EQUAL
9681: IFTRUE 9685
9683: GO 9703
9685: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
9686: LD_ADDR_VAR 0 3
9690: PUSH
9691: LD_INT 4
9693: PUSH
9694: LD_INT 5
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: ST_TO_ADDR
9701: GO 10400
9703: LD_INT 6
9705: DOUBLE
9706: EQUAL
9707: IFTRUE 9711
9709: GO 9729
9711: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
9712: LD_ADDR_VAR 0 3
9716: PUSH
9717: LD_INT 4
9719: PUSH
9720: LD_INT 5
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: ST_TO_ADDR
9727: GO 10400
9729: LD_INT 10
9731: DOUBLE
9732: EQUAL
9733: IFTRUE 9737
9735: GO 9755
9737: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
9738: LD_ADDR_VAR 0 3
9742: PUSH
9743: LD_INT 4
9745: PUSH
9746: LD_INT 5
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: ST_TO_ADDR
9753: GO 10400
9755: LD_INT 22
9757: DOUBLE
9758: EQUAL
9759: IFTRUE 9763
9761: GO 9789
9763: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
9764: LD_ADDR_VAR 0 3
9768: PUSH
9769: LD_INT 11
9771: PUSH
9772: LD_INT 12
9774: PUSH
9775: LD_INT 13
9777: PUSH
9778: LD_INT 14
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: ST_TO_ADDR
9787: GO 10400
9789: LD_INT 23
9791: DOUBLE
9792: EQUAL
9793: IFTRUE 9797
9795: GO 9823
9797: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
9798: LD_ADDR_VAR 0 3
9802: PUSH
9803: LD_INT 11
9805: PUSH
9806: LD_INT 12
9808: PUSH
9809: LD_INT 13
9811: PUSH
9812: LD_INT 14
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: ST_TO_ADDR
9821: GO 10400
9823: LD_INT 24
9825: DOUBLE
9826: EQUAL
9827: IFTRUE 9831
9829: GO 9857
9831: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
9832: LD_ADDR_VAR 0 3
9836: PUSH
9837: LD_INT 11
9839: PUSH
9840: LD_INT 12
9842: PUSH
9843: LD_INT 13
9845: PUSH
9846: LD_INT 14
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: ST_TO_ADDR
9855: GO 10400
9857: LD_INT 30
9859: DOUBLE
9860: EQUAL
9861: IFTRUE 9865
9863: GO 9891
9865: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
9866: LD_ADDR_VAR 0 3
9870: PUSH
9871: LD_INT 11
9873: PUSH
9874: LD_INT 12
9876: PUSH
9877: LD_INT 13
9879: PUSH
9880: LD_INT 14
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: ST_TO_ADDR
9889: GO 10400
9891: LD_INT 25
9893: DOUBLE
9894: EQUAL
9895: IFTRUE 9899
9897: GO 9917
9899: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
9900: LD_ADDR_VAR 0 3
9904: PUSH
9905: LD_INT 13
9907: PUSH
9908: LD_INT 14
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: ST_TO_ADDR
9915: GO 10400
9917: LD_INT 27
9919: DOUBLE
9920: EQUAL
9921: IFTRUE 9925
9923: GO 9943
9925: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
9926: LD_ADDR_VAR 0 3
9930: PUSH
9931: LD_INT 13
9933: PUSH
9934: LD_INT 14
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: ST_TO_ADDR
9941: GO 10400
9943: LD_EXP 81
9947: DOUBLE
9948: EQUAL
9949: IFTRUE 9953
9951: GO 9979
9953: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
9954: LD_ADDR_VAR 0 3
9958: PUSH
9959: LD_INT 11
9961: PUSH
9962: LD_INT 12
9964: PUSH
9965: LD_INT 13
9967: PUSH
9968: LD_INT 14
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: ST_TO_ADDR
9977: GO 10400
9979: LD_INT 28
9981: DOUBLE
9982: EQUAL
9983: IFTRUE 9987
9985: GO 10005
9987: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
9988: LD_ADDR_VAR 0 3
9992: PUSH
9993: LD_INT 13
9995: PUSH
9996: LD_INT 14
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: ST_TO_ADDR
10003: GO 10400
10005: LD_INT 29
10007: DOUBLE
10008: EQUAL
10009: IFTRUE 10013
10011: GO 10031
10013: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
10014: LD_ADDR_VAR 0 3
10018: PUSH
10019: LD_INT 13
10021: PUSH
10022: LD_INT 14
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: ST_TO_ADDR
10029: GO 10400
10031: LD_INT 31
10033: DOUBLE
10034: EQUAL
10035: IFTRUE 10039
10037: GO 10057
10039: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
10040: LD_ADDR_VAR 0 3
10044: PUSH
10045: LD_INT 13
10047: PUSH
10048: LD_INT 14
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: ST_TO_ADDR
10055: GO 10400
10057: LD_INT 26
10059: DOUBLE
10060: EQUAL
10061: IFTRUE 10065
10063: GO 10083
10065: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
10066: LD_ADDR_VAR 0 3
10070: PUSH
10071: LD_INT 13
10073: PUSH
10074: LD_INT 14
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: ST_TO_ADDR
10081: GO 10400
10083: LD_INT 42
10085: DOUBLE
10086: EQUAL
10087: IFTRUE 10091
10089: GO 10117
10091: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
10092: LD_ADDR_VAR 0 3
10096: PUSH
10097: LD_INT 21
10099: PUSH
10100: LD_INT 22
10102: PUSH
10103: LD_INT 23
10105: PUSH
10106: LD_INT 24
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: ST_TO_ADDR
10115: GO 10400
10117: LD_INT 43
10119: DOUBLE
10120: EQUAL
10121: IFTRUE 10125
10123: GO 10151
10125: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
10126: LD_ADDR_VAR 0 3
10130: PUSH
10131: LD_INT 21
10133: PUSH
10134: LD_INT 22
10136: PUSH
10137: LD_INT 23
10139: PUSH
10140: LD_INT 24
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: ST_TO_ADDR
10149: GO 10400
10151: LD_INT 44
10153: DOUBLE
10154: EQUAL
10155: IFTRUE 10159
10157: GO 10185
10159: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
10160: LD_ADDR_VAR 0 3
10164: PUSH
10165: LD_INT 21
10167: PUSH
10168: LD_INT 22
10170: PUSH
10171: LD_INT 23
10173: PUSH
10174: LD_INT 24
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: ST_TO_ADDR
10183: GO 10400
10185: LD_INT 45
10187: DOUBLE
10188: EQUAL
10189: IFTRUE 10193
10191: GO 10219
10193: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
10194: LD_ADDR_VAR 0 3
10198: PUSH
10199: LD_INT 21
10201: PUSH
10202: LD_INT 22
10204: PUSH
10205: LD_INT 23
10207: PUSH
10208: LD_INT 24
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: ST_TO_ADDR
10217: GO 10400
10219: LD_INT 49
10221: DOUBLE
10222: EQUAL
10223: IFTRUE 10227
10225: GO 10253
10227: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
10228: LD_ADDR_VAR 0 3
10232: PUSH
10233: LD_INT 21
10235: PUSH
10236: LD_INT 22
10238: PUSH
10239: LD_INT 23
10241: PUSH
10242: LD_INT 24
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: ST_TO_ADDR
10251: GO 10400
10253: LD_INT 51
10255: DOUBLE
10256: EQUAL
10257: IFTRUE 10261
10259: GO 10287
10261: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
10262: LD_ADDR_VAR 0 3
10266: PUSH
10267: LD_INT 21
10269: PUSH
10270: LD_INT 22
10272: PUSH
10273: LD_INT 23
10275: PUSH
10276: LD_INT 24
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: ST_TO_ADDR
10285: GO 10400
10287: LD_INT 52
10289: DOUBLE
10290: EQUAL
10291: IFTRUE 10295
10293: GO 10321
10295: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
10296: LD_ADDR_VAR 0 3
10300: PUSH
10301: LD_INT 21
10303: PUSH
10304: LD_INT 22
10306: PUSH
10307: LD_INT 23
10309: PUSH
10310: LD_INT 24
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: ST_TO_ADDR
10319: GO 10400
10321: LD_INT 53
10323: DOUBLE
10324: EQUAL
10325: IFTRUE 10329
10327: GO 10347
10329: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
10330: LD_ADDR_VAR 0 3
10334: PUSH
10335: LD_INT 23
10337: PUSH
10338: LD_INT 24
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: ST_TO_ADDR
10345: GO 10400
10347: LD_INT 46
10349: DOUBLE
10350: EQUAL
10351: IFTRUE 10355
10353: GO 10373
10355: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
10356: LD_ADDR_VAR 0 3
10360: PUSH
10361: LD_INT 23
10363: PUSH
10364: LD_INT 24
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: ST_TO_ADDR
10371: GO 10400
10373: LD_INT 47
10375: DOUBLE
10376: EQUAL
10377: IFTRUE 10381
10379: GO 10399
10381: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
10382: LD_ADDR_VAR 0 3
10386: PUSH
10387: LD_INT 23
10389: PUSH
10390: LD_INT 24
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: ST_TO_ADDR
10397: GO 10400
10399: POP
// result := ( chassis in result ) ;
10400: LD_ADDR_VAR 0 3
10404: PUSH
10405: LD_VAR 0 1
10409: PUSH
10410: LD_VAR 0 3
10414: IN
10415: ST_TO_ADDR
// end ;
10416: LD_VAR 0 3
10420: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
10421: LD_INT 0
10423: PPUSH
10424: PPUSH
10425: PPUSH
10426: PPUSH
10427: PPUSH
10428: PPUSH
10429: PPUSH
// result := array ;
10430: LD_ADDR_VAR 0 5
10434: PUSH
10435: LD_VAR 0 1
10439: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
10440: LD_VAR 0 1
10444: NOT
10445: PUSH
10446: LD_VAR 0 2
10450: NOT
10451: OR
10452: PUSH
10453: LD_VAR 0 3
10457: NOT
10458: OR
10459: PUSH
10460: LD_VAR 0 2
10464: PUSH
10465: LD_VAR 0 1
10469: GREATER
10470: OR
10471: PUSH
10472: LD_VAR 0 3
10476: PUSH
10477: LD_VAR 0 1
10481: GREATER
10482: OR
10483: IFFALSE 10487
// exit ;
10485: GO 10783
// if direction then
10487: LD_VAR 0 4
10491: IFFALSE 10555
// begin d := 1 ;
10493: LD_ADDR_VAR 0 9
10497: PUSH
10498: LD_INT 1
10500: ST_TO_ADDR
// if i_from > i_to then
10501: LD_VAR 0 2
10505: PUSH
10506: LD_VAR 0 3
10510: GREATER
10511: IFFALSE 10537
// length := ( array - i_from ) + i_to else
10513: LD_ADDR_VAR 0 11
10517: PUSH
10518: LD_VAR 0 1
10522: PUSH
10523: LD_VAR 0 2
10527: MINUS
10528: PUSH
10529: LD_VAR 0 3
10533: PLUS
10534: ST_TO_ADDR
10535: GO 10553
// length := i_to - i_from ;
10537: LD_ADDR_VAR 0 11
10541: PUSH
10542: LD_VAR 0 3
10546: PUSH
10547: LD_VAR 0 2
10551: MINUS
10552: ST_TO_ADDR
// end else
10553: GO 10616
// begin d := - 1 ;
10555: LD_ADDR_VAR 0 9
10559: PUSH
10560: LD_INT 1
10562: NEG
10563: ST_TO_ADDR
// if i_from > i_to then
10564: LD_VAR 0 2
10568: PUSH
10569: LD_VAR 0 3
10573: GREATER
10574: IFFALSE 10594
// length := i_from - i_to else
10576: LD_ADDR_VAR 0 11
10580: PUSH
10581: LD_VAR 0 2
10585: PUSH
10586: LD_VAR 0 3
10590: MINUS
10591: ST_TO_ADDR
10592: GO 10616
// length := ( array - i_to ) + i_from ;
10594: LD_ADDR_VAR 0 11
10598: PUSH
10599: LD_VAR 0 1
10603: PUSH
10604: LD_VAR 0 3
10608: MINUS
10609: PUSH
10610: LD_VAR 0 2
10614: PLUS
10615: ST_TO_ADDR
// end ; if not length then
10616: LD_VAR 0 11
10620: NOT
10621: IFFALSE 10625
// exit ;
10623: GO 10783
// tmp := array ;
10625: LD_ADDR_VAR 0 10
10629: PUSH
10630: LD_VAR 0 1
10634: ST_TO_ADDR
// for i = 1 to length do
10635: LD_ADDR_VAR 0 6
10639: PUSH
10640: DOUBLE
10641: LD_INT 1
10643: DEC
10644: ST_TO_ADDR
10645: LD_VAR 0 11
10649: PUSH
10650: FOR_TO
10651: IFFALSE 10771
// begin for j = 1 to array do
10653: LD_ADDR_VAR 0 7
10657: PUSH
10658: DOUBLE
10659: LD_INT 1
10661: DEC
10662: ST_TO_ADDR
10663: LD_VAR 0 1
10667: PUSH
10668: FOR_TO
10669: IFFALSE 10757
// begin k := j + d ;
10671: LD_ADDR_VAR 0 8
10675: PUSH
10676: LD_VAR 0 7
10680: PUSH
10681: LD_VAR 0 9
10685: PLUS
10686: ST_TO_ADDR
// if k > array then
10687: LD_VAR 0 8
10691: PUSH
10692: LD_VAR 0 1
10696: GREATER
10697: IFFALSE 10707
// k := 1 ;
10699: LD_ADDR_VAR 0 8
10703: PUSH
10704: LD_INT 1
10706: ST_TO_ADDR
// if not k then
10707: LD_VAR 0 8
10711: NOT
10712: IFFALSE 10724
// k := array ;
10714: LD_ADDR_VAR 0 8
10718: PUSH
10719: LD_VAR 0 1
10723: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
10724: LD_ADDR_VAR 0 10
10728: PUSH
10729: LD_VAR 0 10
10733: PPUSH
10734: LD_VAR 0 8
10738: PPUSH
10739: LD_VAR 0 1
10743: PUSH
10744: LD_VAR 0 7
10748: ARRAY
10749: PPUSH
10750: CALL_OW 1
10754: ST_TO_ADDR
// end ;
10755: GO 10668
10757: POP
10758: POP
// array := tmp ;
10759: LD_ADDR_VAR 0 1
10763: PUSH
10764: LD_VAR 0 10
10768: ST_TO_ADDR
// end ;
10769: GO 10650
10771: POP
10772: POP
// result := array ;
10773: LD_ADDR_VAR 0 5
10777: PUSH
10778: LD_VAR 0 1
10782: ST_TO_ADDR
// end ;
10783: LD_VAR 0 5
10787: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
10788: LD_INT 0
10790: PPUSH
10791: PPUSH
// result := 0 ;
10792: LD_ADDR_VAR 0 3
10796: PUSH
10797: LD_INT 0
10799: ST_TO_ADDR
// if not array or not value in array then
10800: LD_VAR 0 1
10804: NOT
10805: PUSH
10806: LD_VAR 0 2
10810: PUSH
10811: LD_VAR 0 1
10815: IN
10816: NOT
10817: OR
10818: IFFALSE 10822
// exit ;
10820: GO 10876
// for i = 1 to array do
10822: LD_ADDR_VAR 0 4
10826: PUSH
10827: DOUBLE
10828: LD_INT 1
10830: DEC
10831: ST_TO_ADDR
10832: LD_VAR 0 1
10836: PUSH
10837: FOR_TO
10838: IFFALSE 10874
// if value = array [ i ] then
10840: LD_VAR 0 2
10844: PUSH
10845: LD_VAR 0 1
10849: PUSH
10850: LD_VAR 0 4
10854: ARRAY
10855: EQUAL
10856: IFFALSE 10872
// begin result := i ;
10858: LD_ADDR_VAR 0 3
10862: PUSH
10863: LD_VAR 0 4
10867: ST_TO_ADDR
// exit ;
10868: POP
10869: POP
10870: GO 10876
// end ;
10872: GO 10837
10874: POP
10875: POP
// end ;
10876: LD_VAR 0 3
10880: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
10881: LD_INT 0
10883: PPUSH
// vc_chassis := chassis ;
10884: LD_ADDR_OWVAR 37
10888: PUSH
10889: LD_VAR 0 1
10893: ST_TO_ADDR
// vc_engine := engine ;
10894: LD_ADDR_OWVAR 39
10898: PUSH
10899: LD_VAR 0 2
10903: ST_TO_ADDR
// vc_control := control ;
10904: LD_ADDR_OWVAR 38
10908: PUSH
10909: LD_VAR 0 3
10913: ST_TO_ADDR
// vc_weapon := weapon ;
10914: LD_ADDR_OWVAR 40
10918: PUSH
10919: LD_VAR 0 4
10923: ST_TO_ADDR
// vc_fuel_battery := fuel ;
10924: LD_ADDR_OWVAR 41
10928: PUSH
10929: LD_VAR 0 5
10933: ST_TO_ADDR
// end ;
10934: LD_VAR 0 6
10938: RET
// export function WantPlant ( unit ) ; var task ; begin
10939: LD_INT 0
10941: PPUSH
10942: PPUSH
// result := false ;
10943: LD_ADDR_VAR 0 2
10947: PUSH
10948: LD_INT 0
10950: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
10951: LD_ADDR_VAR 0 3
10955: PUSH
10956: LD_VAR 0 1
10960: PPUSH
10961: CALL_OW 437
10965: ST_TO_ADDR
// if task then
10966: LD_VAR 0 3
10970: IFFALSE 10998
// if task [ 1 ] [ 1 ] = p then
10972: LD_VAR 0 3
10976: PUSH
10977: LD_INT 1
10979: ARRAY
10980: PUSH
10981: LD_INT 1
10983: ARRAY
10984: PUSH
10985: LD_STRING p
10987: EQUAL
10988: IFFALSE 10998
// result := true ;
10990: LD_ADDR_VAR 0 2
10994: PUSH
10995: LD_INT 1
10997: ST_TO_ADDR
// end ;
10998: LD_VAR 0 2
11002: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
11003: LD_INT 0
11005: PPUSH
11006: PPUSH
11007: PPUSH
11008: PPUSH
// if pos < 1 then
11009: LD_VAR 0 2
11013: PUSH
11014: LD_INT 1
11016: LESS
11017: IFFALSE 11021
// exit ;
11019: GO 11324
// if pos = 1 then
11021: LD_VAR 0 2
11025: PUSH
11026: LD_INT 1
11028: EQUAL
11029: IFFALSE 11062
// result := Replace ( arr , pos [ 1 ] , value ) else
11031: LD_ADDR_VAR 0 4
11035: PUSH
11036: LD_VAR 0 1
11040: PPUSH
11041: LD_VAR 0 2
11045: PUSH
11046: LD_INT 1
11048: ARRAY
11049: PPUSH
11050: LD_VAR 0 3
11054: PPUSH
11055: CALL_OW 1
11059: ST_TO_ADDR
11060: GO 11324
// begin tmp := arr ;
11062: LD_ADDR_VAR 0 6
11066: PUSH
11067: LD_VAR 0 1
11071: ST_TO_ADDR
// s_arr := [ tmp ] ;
11072: LD_ADDR_VAR 0 7
11076: PUSH
11077: LD_VAR 0 6
11081: PUSH
11082: EMPTY
11083: LIST
11084: ST_TO_ADDR
// for i = 1 to pos - 1 do
11085: LD_ADDR_VAR 0 5
11089: PUSH
11090: DOUBLE
11091: LD_INT 1
11093: DEC
11094: ST_TO_ADDR
11095: LD_VAR 0 2
11099: PUSH
11100: LD_INT 1
11102: MINUS
11103: PUSH
11104: FOR_TO
11105: IFFALSE 11150
// begin tmp := tmp [ pos [ i ] ] ;
11107: LD_ADDR_VAR 0 6
11111: PUSH
11112: LD_VAR 0 6
11116: PUSH
11117: LD_VAR 0 2
11121: PUSH
11122: LD_VAR 0 5
11126: ARRAY
11127: ARRAY
11128: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
11129: LD_ADDR_VAR 0 7
11133: PUSH
11134: LD_VAR 0 7
11138: PUSH
11139: LD_VAR 0 6
11143: PUSH
11144: EMPTY
11145: LIST
11146: ADD
11147: ST_TO_ADDR
// end ;
11148: GO 11104
11150: POP
11151: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
11152: LD_ADDR_VAR 0 6
11156: PUSH
11157: LD_VAR 0 6
11161: PPUSH
11162: LD_VAR 0 2
11166: PUSH
11167: LD_VAR 0 2
11171: ARRAY
11172: PPUSH
11173: LD_VAR 0 3
11177: PPUSH
11178: CALL_OW 1
11182: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
11183: LD_ADDR_VAR 0 7
11187: PUSH
11188: LD_VAR 0 7
11192: PPUSH
11193: LD_VAR 0 7
11197: PPUSH
11198: LD_VAR 0 6
11202: PPUSH
11203: CALL_OW 1
11207: ST_TO_ADDR
// for i = s_arr downto 2 do
11208: LD_ADDR_VAR 0 5
11212: PUSH
11213: DOUBLE
11214: LD_VAR 0 7
11218: INC
11219: ST_TO_ADDR
11220: LD_INT 2
11222: PUSH
11223: FOR_DOWNTO
11224: IFFALSE 11308
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
11226: LD_ADDR_VAR 0 6
11230: PUSH
11231: LD_VAR 0 7
11235: PUSH
11236: LD_VAR 0 5
11240: PUSH
11241: LD_INT 1
11243: MINUS
11244: ARRAY
11245: PPUSH
11246: LD_VAR 0 2
11250: PUSH
11251: LD_VAR 0 5
11255: PUSH
11256: LD_INT 1
11258: MINUS
11259: ARRAY
11260: PPUSH
11261: LD_VAR 0 7
11265: PUSH
11266: LD_VAR 0 5
11270: ARRAY
11271: PPUSH
11272: CALL_OW 1
11276: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
11277: LD_ADDR_VAR 0 7
11281: PUSH
11282: LD_VAR 0 7
11286: PPUSH
11287: LD_VAR 0 5
11291: PUSH
11292: LD_INT 1
11294: MINUS
11295: PPUSH
11296: LD_VAR 0 6
11300: PPUSH
11301: CALL_OW 1
11305: ST_TO_ADDR
// end ;
11306: GO 11223
11308: POP
11309: POP
// result := s_arr [ 1 ] ;
11310: LD_ADDR_VAR 0 4
11314: PUSH
11315: LD_VAR 0 7
11319: PUSH
11320: LD_INT 1
11322: ARRAY
11323: ST_TO_ADDR
// end ; end ;
11324: LD_VAR 0 4
11328: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
11329: LD_INT 0
11331: PPUSH
11332: PPUSH
// if not list then
11333: LD_VAR 0 1
11337: NOT
11338: IFFALSE 11342
// exit ;
11340: GO 11433
// i := list [ pos1 ] ;
11342: LD_ADDR_VAR 0 5
11346: PUSH
11347: LD_VAR 0 1
11351: PUSH
11352: LD_VAR 0 2
11356: ARRAY
11357: ST_TO_ADDR
// if not i then
11358: LD_VAR 0 5
11362: NOT
11363: IFFALSE 11367
// exit ;
11365: GO 11433
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
11367: LD_ADDR_VAR 0 1
11371: PUSH
11372: LD_VAR 0 1
11376: PPUSH
11377: LD_VAR 0 2
11381: PPUSH
11382: LD_VAR 0 1
11386: PUSH
11387: LD_VAR 0 3
11391: ARRAY
11392: PPUSH
11393: CALL_OW 1
11397: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
11398: LD_ADDR_VAR 0 1
11402: PUSH
11403: LD_VAR 0 1
11407: PPUSH
11408: LD_VAR 0 3
11412: PPUSH
11413: LD_VAR 0 5
11417: PPUSH
11418: CALL_OW 1
11422: ST_TO_ADDR
// result := list ;
11423: LD_ADDR_VAR 0 4
11427: PUSH
11428: LD_VAR 0 1
11432: ST_TO_ADDR
// end ;
11433: LD_VAR 0 4
11437: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
11438: LD_INT 0
11440: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
11441: LD_ADDR_VAR 0 5
11445: PUSH
11446: LD_VAR 0 1
11450: PPUSH
11451: CALL_OW 250
11455: PPUSH
11456: LD_VAR 0 1
11460: PPUSH
11461: CALL_OW 251
11465: PPUSH
11466: LD_VAR 0 2
11470: PPUSH
11471: LD_VAR 0 3
11475: PPUSH
11476: LD_VAR 0 4
11480: PPUSH
11481: CALL 11491 0 5
11485: ST_TO_ADDR
// end ;
11486: LD_VAR 0 5
11490: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
11491: LD_INT 0
11493: PPUSH
11494: PPUSH
11495: PPUSH
11496: PPUSH
// if not list then
11497: LD_VAR 0 3
11501: NOT
11502: IFFALSE 11506
// exit ;
11504: GO 11894
// result := [ ] ;
11506: LD_ADDR_VAR 0 6
11510: PUSH
11511: EMPTY
11512: ST_TO_ADDR
// for i in list do
11513: LD_ADDR_VAR 0 7
11517: PUSH
11518: LD_VAR 0 3
11522: PUSH
11523: FOR_IN
11524: IFFALSE 11726
// begin tmp := GetDistUnitXY ( i , x , y ) ;
11526: LD_ADDR_VAR 0 9
11530: PUSH
11531: LD_VAR 0 7
11535: PPUSH
11536: LD_VAR 0 1
11540: PPUSH
11541: LD_VAR 0 2
11545: PPUSH
11546: CALL_OW 297
11550: ST_TO_ADDR
// if not result then
11551: LD_VAR 0 6
11555: NOT
11556: IFFALSE 11582
// result := [ [ i , tmp ] ] else
11558: LD_ADDR_VAR 0 6
11562: PUSH
11563: LD_VAR 0 7
11567: PUSH
11568: LD_VAR 0 9
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: PUSH
11577: EMPTY
11578: LIST
11579: ST_TO_ADDR
11580: GO 11724
// begin if result [ result ] [ 2 ] < tmp then
11582: LD_VAR 0 6
11586: PUSH
11587: LD_VAR 0 6
11591: ARRAY
11592: PUSH
11593: LD_INT 2
11595: ARRAY
11596: PUSH
11597: LD_VAR 0 9
11601: LESS
11602: IFFALSE 11644
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
11604: LD_ADDR_VAR 0 6
11608: PUSH
11609: LD_VAR 0 6
11613: PPUSH
11614: LD_VAR 0 6
11618: PUSH
11619: LD_INT 1
11621: PLUS
11622: PPUSH
11623: LD_VAR 0 7
11627: PUSH
11628: LD_VAR 0 9
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: PPUSH
11637: CALL_OW 2
11641: ST_TO_ADDR
11642: GO 11724
// for j = 1 to result do
11644: LD_ADDR_VAR 0 8
11648: PUSH
11649: DOUBLE
11650: LD_INT 1
11652: DEC
11653: ST_TO_ADDR
11654: LD_VAR 0 6
11658: PUSH
11659: FOR_TO
11660: IFFALSE 11722
// begin if tmp < result [ j ] [ 2 ] then
11662: LD_VAR 0 9
11666: PUSH
11667: LD_VAR 0 6
11671: PUSH
11672: LD_VAR 0 8
11676: ARRAY
11677: PUSH
11678: LD_INT 2
11680: ARRAY
11681: LESS
11682: IFFALSE 11720
// begin result := Insert ( result , j , [ i , tmp ] ) ;
11684: LD_ADDR_VAR 0 6
11688: PUSH
11689: LD_VAR 0 6
11693: PPUSH
11694: LD_VAR 0 8
11698: PPUSH
11699: LD_VAR 0 7
11703: PUSH
11704: LD_VAR 0 9
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PPUSH
11713: CALL_OW 2
11717: ST_TO_ADDR
// break ;
11718: GO 11722
// end ; end ;
11720: GO 11659
11722: POP
11723: POP
// end ; end ;
11724: GO 11523
11726: POP
11727: POP
// if result and not asc then
11728: LD_VAR 0 6
11732: PUSH
11733: LD_VAR 0 4
11737: NOT
11738: AND
11739: IFFALSE 11814
// begin tmp := result ;
11741: LD_ADDR_VAR 0 9
11745: PUSH
11746: LD_VAR 0 6
11750: ST_TO_ADDR
// for i = tmp downto 1 do
11751: LD_ADDR_VAR 0 7
11755: PUSH
11756: DOUBLE
11757: LD_VAR 0 9
11761: INC
11762: ST_TO_ADDR
11763: LD_INT 1
11765: PUSH
11766: FOR_DOWNTO
11767: IFFALSE 11812
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
11769: LD_ADDR_VAR 0 6
11773: PUSH
11774: LD_VAR 0 6
11778: PPUSH
11779: LD_VAR 0 9
11783: PUSH
11784: LD_VAR 0 7
11788: MINUS
11789: PUSH
11790: LD_INT 1
11792: PLUS
11793: PPUSH
11794: LD_VAR 0 9
11798: PUSH
11799: LD_VAR 0 7
11803: ARRAY
11804: PPUSH
11805: CALL_OW 1
11809: ST_TO_ADDR
11810: GO 11766
11812: POP
11813: POP
// end ; tmp := [ ] ;
11814: LD_ADDR_VAR 0 9
11818: PUSH
11819: EMPTY
11820: ST_TO_ADDR
// if mode then
11821: LD_VAR 0 5
11825: IFFALSE 11894
// begin for i = 1 to result do
11827: LD_ADDR_VAR 0 7
11831: PUSH
11832: DOUBLE
11833: LD_INT 1
11835: DEC
11836: ST_TO_ADDR
11837: LD_VAR 0 6
11841: PUSH
11842: FOR_TO
11843: IFFALSE 11882
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
11845: LD_ADDR_VAR 0 9
11849: PUSH
11850: LD_VAR 0 9
11854: PPUSH
11855: LD_VAR 0 7
11859: PPUSH
11860: LD_VAR 0 6
11864: PUSH
11865: LD_VAR 0 7
11869: ARRAY
11870: PUSH
11871: LD_INT 1
11873: ARRAY
11874: PPUSH
11875: CALL_OW 1
11879: ST_TO_ADDR
11880: GO 11842
11882: POP
11883: POP
// result := tmp ;
11884: LD_ADDR_VAR 0 6
11888: PUSH
11889: LD_VAR 0 9
11893: ST_TO_ADDR
// end ; end ;
11894: LD_VAR 0 6
11898: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
11899: LD_INT 0
11901: PPUSH
11902: PPUSH
11903: PPUSH
11904: PPUSH
11905: PPUSH
11906: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
11907: LD_ADDR_VAR 0 5
11911: PUSH
11912: LD_INT 0
11914: PUSH
11915: LD_INT 0
11917: PUSH
11918: LD_INT 0
11920: PUSH
11921: EMPTY
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: ST_TO_ADDR
// if not x or not y then
11929: LD_VAR 0 2
11933: NOT
11934: PUSH
11935: LD_VAR 0 3
11939: NOT
11940: OR
11941: IFFALSE 11945
// exit ;
11943: GO 13597
// if not range then
11945: LD_VAR 0 4
11949: NOT
11950: IFFALSE 11960
// range := 10 ;
11952: LD_ADDR_VAR 0 4
11956: PUSH
11957: LD_INT 10
11959: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11960: LD_ADDR_VAR 0 8
11964: PUSH
11965: LD_INT 81
11967: PUSH
11968: LD_VAR 0 1
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 92
11979: PUSH
11980: LD_VAR 0 2
11984: PUSH
11985: LD_VAR 0 3
11989: PUSH
11990: LD_VAR 0 4
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: PUSH
12001: LD_INT 3
12003: PUSH
12004: LD_INT 21
12006: PUSH
12007: LD_INT 3
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: LIST
12022: PPUSH
12023: CALL_OW 69
12027: ST_TO_ADDR
// if not tmp then
12028: LD_VAR 0 8
12032: NOT
12033: IFFALSE 12037
// exit ;
12035: GO 13597
// for i in tmp do
12037: LD_ADDR_VAR 0 6
12041: PUSH
12042: LD_VAR 0 8
12046: PUSH
12047: FOR_IN
12048: IFFALSE 13572
// begin points := [ 0 , 0 , 0 ] ;
12050: LD_ADDR_VAR 0 9
12054: PUSH
12055: LD_INT 0
12057: PUSH
12058: LD_INT 0
12060: PUSH
12061: LD_INT 0
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: LIST
12068: ST_TO_ADDR
// bpoints := 1 ;
12069: LD_ADDR_VAR 0 10
12073: PUSH
12074: LD_INT 1
12076: ST_TO_ADDR
// case GetType ( i ) of unit_human :
12077: LD_VAR 0 6
12081: PPUSH
12082: CALL_OW 247
12086: PUSH
12087: LD_INT 1
12089: DOUBLE
12090: EQUAL
12091: IFTRUE 12095
12093: GO 12673
12095: POP
// begin if GetClass ( i ) = 1 then
12096: LD_VAR 0 6
12100: PPUSH
12101: CALL_OW 257
12105: PUSH
12106: LD_INT 1
12108: EQUAL
12109: IFFALSE 12130
// points := [ 10 , 5 , 3 ] ;
12111: LD_ADDR_VAR 0 9
12115: PUSH
12116: LD_INT 10
12118: PUSH
12119: LD_INT 5
12121: PUSH
12122: LD_INT 3
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: LIST
12129: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
12130: LD_VAR 0 6
12134: PPUSH
12135: CALL_OW 257
12139: PUSH
12140: LD_INT 2
12142: PUSH
12143: LD_INT 3
12145: PUSH
12146: LD_INT 4
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: LIST
12153: IN
12154: IFFALSE 12175
// points := [ 3 , 2 , 1 ] ;
12156: LD_ADDR_VAR 0 9
12160: PUSH
12161: LD_INT 3
12163: PUSH
12164: LD_INT 2
12166: PUSH
12167: LD_INT 1
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: LIST
12174: ST_TO_ADDR
// if GetClass ( i ) = 5 then
12175: LD_VAR 0 6
12179: PPUSH
12180: CALL_OW 257
12184: PUSH
12185: LD_INT 5
12187: EQUAL
12188: IFFALSE 12209
// points := [ 130 , 5 , 2 ] ;
12190: LD_ADDR_VAR 0 9
12194: PUSH
12195: LD_INT 130
12197: PUSH
12198: LD_INT 5
12200: PUSH
12201: LD_INT 2
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: LIST
12208: ST_TO_ADDR
// if GetClass ( i ) = 8 then
12209: LD_VAR 0 6
12213: PPUSH
12214: CALL_OW 257
12218: PUSH
12219: LD_INT 8
12221: EQUAL
12222: IFFALSE 12243
// points := [ 35 , 35 , 30 ] ;
12224: LD_ADDR_VAR 0 9
12228: PUSH
12229: LD_INT 35
12231: PUSH
12232: LD_INT 35
12234: PUSH
12235: LD_INT 30
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: LIST
12242: ST_TO_ADDR
// if GetClass ( i ) = 9 then
12243: LD_VAR 0 6
12247: PPUSH
12248: CALL_OW 257
12252: PUSH
12253: LD_INT 9
12255: EQUAL
12256: IFFALSE 12277
// points := [ 20 , 55 , 40 ] ;
12258: LD_ADDR_VAR 0 9
12262: PUSH
12263: LD_INT 20
12265: PUSH
12266: LD_INT 55
12268: PUSH
12269: LD_INT 40
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: LIST
12276: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
12277: LD_VAR 0 6
12281: PPUSH
12282: CALL_OW 257
12286: PUSH
12287: LD_INT 12
12289: PUSH
12290: LD_INT 16
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: IN
12297: IFFALSE 12318
// points := [ 5 , 3 , 2 ] ;
12299: LD_ADDR_VAR 0 9
12303: PUSH
12304: LD_INT 5
12306: PUSH
12307: LD_INT 3
12309: PUSH
12310: LD_INT 2
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: LIST
12317: ST_TO_ADDR
// if GetClass ( i ) = 17 then
12318: LD_VAR 0 6
12322: PPUSH
12323: CALL_OW 257
12327: PUSH
12328: LD_INT 17
12330: EQUAL
12331: IFFALSE 12352
// points := [ 100 , 50 , 75 ] ;
12333: LD_ADDR_VAR 0 9
12337: PUSH
12338: LD_INT 100
12340: PUSH
12341: LD_INT 50
12343: PUSH
12344: LD_INT 75
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: LIST
12351: ST_TO_ADDR
// if GetClass ( i ) = 15 then
12352: LD_VAR 0 6
12356: PPUSH
12357: CALL_OW 257
12361: PUSH
12362: LD_INT 15
12364: EQUAL
12365: IFFALSE 12386
// points := [ 10 , 5 , 3 ] ;
12367: LD_ADDR_VAR 0 9
12371: PUSH
12372: LD_INT 10
12374: PUSH
12375: LD_INT 5
12377: PUSH
12378: LD_INT 3
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: LIST
12385: ST_TO_ADDR
// if GetClass ( i ) = 14 then
12386: LD_VAR 0 6
12390: PPUSH
12391: CALL_OW 257
12395: PUSH
12396: LD_INT 14
12398: EQUAL
12399: IFFALSE 12420
// points := [ 10 , 0 , 0 ] ;
12401: LD_ADDR_VAR 0 9
12405: PUSH
12406: LD_INT 10
12408: PUSH
12409: LD_INT 0
12411: PUSH
12412: LD_INT 0
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: LIST
12419: ST_TO_ADDR
// if GetClass ( i ) = 11 then
12420: LD_VAR 0 6
12424: PPUSH
12425: CALL_OW 257
12429: PUSH
12430: LD_INT 11
12432: EQUAL
12433: IFFALSE 12454
// points := [ 30 , 10 , 5 ] ;
12435: LD_ADDR_VAR 0 9
12439: PUSH
12440: LD_INT 30
12442: PUSH
12443: LD_INT 10
12445: PUSH
12446: LD_INT 5
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: LIST
12453: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
12454: LD_VAR 0 1
12458: PPUSH
12459: LD_INT 5
12461: PPUSH
12462: CALL_OW 321
12466: PUSH
12467: LD_INT 2
12469: EQUAL
12470: IFFALSE 12487
// bpoints := bpoints * 1.8 ;
12472: LD_ADDR_VAR 0 10
12476: PUSH
12477: LD_VAR 0 10
12481: PUSH
12482: LD_REAL  1.80000000000000E+0000
12485: MUL
12486: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
12487: LD_VAR 0 6
12491: PPUSH
12492: CALL_OW 257
12496: PUSH
12497: LD_INT 1
12499: PUSH
12500: LD_INT 2
12502: PUSH
12503: LD_INT 3
12505: PUSH
12506: LD_INT 4
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: IN
12515: PUSH
12516: LD_VAR 0 1
12520: PPUSH
12521: LD_INT 51
12523: PPUSH
12524: CALL_OW 321
12528: PUSH
12529: LD_INT 2
12531: EQUAL
12532: AND
12533: IFFALSE 12550
// bpoints := bpoints * 1.2 ;
12535: LD_ADDR_VAR 0 10
12539: PUSH
12540: LD_VAR 0 10
12544: PUSH
12545: LD_REAL  1.20000000000000E+0000
12548: MUL
12549: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
12550: LD_VAR 0 6
12554: PPUSH
12555: CALL_OW 257
12559: PUSH
12560: LD_INT 5
12562: PUSH
12563: LD_INT 7
12565: PUSH
12566: LD_INT 9
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: LIST
12573: IN
12574: PUSH
12575: LD_VAR 0 1
12579: PPUSH
12580: LD_INT 52
12582: PPUSH
12583: CALL_OW 321
12587: PUSH
12588: LD_INT 2
12590: EQUAL
12591: AND
12592: IFFALSE 12609
// bpoints := bpoints * 1.5 ;
12594: LD_ADDR_VAR 0 10
12598: PUSH
12599: LD_VAR 0 10
12603: PUSH
12604: LD_REAL  1.50000000000000E+0000
12607: MUL
12608: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
12609: LD_VAR 0 1
12613: PPUSH
12614: LD_INT 66
12616: PPUSH
12617: CALL_OW 321
12621: PUSH
12622: LD_INT 2
12624: EQUAL
12625: IFFALSE 12642
// bpoints := bpoints * 1.1 ;
12627: LD_ADDR_VAR 0 10
12631: PUSH
12632: LD_VAR 0 10
12636: PUSH
12637: LD_REAL  1.10000000000000E+0000
12640: MUL
12641: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
12642: LD_ADDR_VAR 0 10
12646: PUSH
12647: LD_VAR 0 10
12651: PUSH
12652: LD_VAR 0 6
12656: PPUSH
12657: LD_INT 1
12659: PPUSH
12660: CALL_OW 259
12664: PUSH
12665: LD_REAL  1.15000000000000E+0000
12668: MUL
12669: MUL
12670: ST_TO_ADDR
// end ; unit_vehicle :
12671: GO 13501
12673: LD_INT 2
12675: DOUBLE
12676: EQUAL
12677: IFTRUE 12681
12679: GO 13489
12681: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
12682: LD_VAR 0 6
12686: PPUSH
12687: CALL_OW 264
12691: PUSH
12692: LD_INT 2
12694: PUSH
12695: LD_INT 42
12697: PUSH
12698: LD_INT 24
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: LIST
12705: IN
12706: IFFALSE 12727
// points := [ 25 , 5 , 3 ] ;
12708: LD_ADDR_VAR 0 9
12712: PUSH
12713: LD_INT 25
12715: PUSH
12716: LD_INT 5
12718: PUSH
12719: LD_INT 3
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: LIST
12726: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
12727: LD_VAR 0 6
12731: PPUSH
12732: CALL_OW 264
12736: PUSH
12737: LD_INT 4
12739: PUSH
12740: LD_INT 43
12742: PUSH
12743: LD_INT 25
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: LIST
12750: IN
12751: IFFALSE 12772
// points := [ 40 , 15 , 5 ] ;
12753: LD_ADDR_VAR 0 9
12757: PUSH
12758: LD_INT 40
12760: PUSH
12761: LD_INT 15
12763: PUSH
12764: LD_INT 5
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: LIST
12771: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
12772: LD_VAR 0 6
12776: PPUSH
12777: CALL_OW 264
12781: PUSH
12782: LD_INT 3
12784: PUSH
12785: LD_INT 23
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: IN
12792: IFFALSE 12813
// points := [ 7 , 25 , 8 ] ;
12794: LD_ADDR_VAR 0 9
12798: PUSH
12799: LD_INT 7
12801: PUSH
12802: LD_INT 25
12804: PUSH
12805: LD_INT 8
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: LIST
12812: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
12813: LD_VAR 0 6
12817: PPUSH
12818: CALL_OW 264
12822: PUSH
12823: LD_INT 5
12825: PUSH
12826: LD_INT 27
12828: PUSH
12829: LD_INT 44
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: LIST
12836: IN
12837: IFFALSE 12858
// points := [ 14 , 50 , 16 ] ;
12839: LD_ADDR_VAR 0 9
12843: PUSH
12844: LD_INT 14
12846: PUSH
12847: LD_INT 50
12849: PUSH
12850: LD_INT 16
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: LIST
12857: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
12858: LD_VAR 0 6
12862: PPUSH
12863: CALL_OW 264
12867: PUSH
12868: LD_INT 6
12870: PUSH
12871: LD_INT 46
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: IN
12878: IFFALSE 12899
// points := [ 32 , 120 , 70 ] ;
12880: LD_ADDR_VAR 0 9
12884: PUSH
12885: LD_INT 32
12887: PUSH
12888: LD_INT 120
12890: PUSH
12891: LD_INT 70
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: LIST
12898: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
12899: LD_VAR 0 6
12903: PPUSH
12904: CALL_OW 264
12908: PUSH
12909: LD_INT 7
12911: PUSH
12912: LD_INT 28
12914: PUSH
12915: LD_INT 45
12917: PUSH
12918: LD_EXP 81
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: IN
12929: IFFALSE 12950
// points := [ 35 , 20 , 45 ] ;
12931: LD_ADDR_VAR 0 9
12935: PUSH
12936: LD_INT 35
12938: PUSH
12939: LD_INT 20
12941: PUSH
12942: LD_INT 45
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: LIST
12949: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
12950: LD_VAR 0 6
12954: PPUSH
12955: CALL_OW 264
12959: PUSH
12960: LD_INT 47
12962: PUSH
12963: EMPTY
12964: LIST
12965: IN
12966: IFFALSE 12987
// points := [ 67 , 45 , 75 ] ;
12968: LD_ADDR_VAR 0 9
12972: PUSH
12973: LD_INT 67
12975: PUSH
12976: LD_INT 45
12978: PUSH
12979: LD_INT 75
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: LIST
12986: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
12987: LD_VAR 0 6
12991: PPUSH
12992: CALL_OW 264
12996: PUSH
12997: LD_INT 26
12999: PUSH
13000: EMPTY
13001: LIST
13002: IN
13003: IFFALSE 13024
// points := [ 120 , 30 , 80 ] ;
13005: LD_ADDR_VAR 0 9
13009: PUSH
13010: LD_INT 120
13012: PUSH
13013: LD_INT 30
13015: PUSH
13016: LD_INT 80
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: LIST
13023: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
13024: LD_VAR 0 6
13028: PPUSH
13029: CALL_OW 264
13033: PUSH
13034: LD_INT 22
13036: PUSH
13037: EMPTY
13038: LIST
13039: IN
13040: IFFALSE 13061
// points := [ 40 , 1 , 1 ] ;
13042: LD_ADDR_VAR 0 9
13046: PUSH
13047: LD_INT 40
13049: PUSH
13050: LD_INT 1
13052: PUSH
13053: LD_INT 1
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: LIST
13060: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
13061: LD_VAR 0 6
13065: PPUSH
13066: CALL_OW 264
13070: PUSH
13071: LD_INT 29
13073: PUSH
13074: EMPTY
13075: LIST
13076: IN
13077: IFFALSE 13098
// points := [ 70 , 200 , 400 ] ;
13079: LD_ADDR_VAR 0 9
13083: PUSH
13084: LD_INT 70
13086: PUSH
13087: LD_INT 200
13089: PUSH
13090: LD_INT 400
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: LIST
13097: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
13098: LD_VAR 0 6
13102: PPUSH
13103: CALL_OW 264
13107: PUSH
13108: LD_INT 14
13110: PUSH
13111: LD_INT 53
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: IN
13118: IFFALSE 13139
// points := [ 40 , 10 , 20 ] ;
13120: LD_ADDR_VAR 0 9
13124: PUSH
13125: LD_INT 40
13127: PUSH
13128: LD_INT 10
13130: PUSH
13131: LD_INT 20
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: LIST
13138: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
13139: LD_VAR 0 6
13143: PPUSH
13144: CALL_OW 264
13148: PUSH
13149: LD_INT 9
13151: PUSH
13152: EMPTY
13153: LIST
13154: IN
13155: IFFALSE 13176
// points := [ 5 , 70 , 20 ] ;
13157: LD_ADDR_VAR 0 9
13161: PUSH
13162: LD_INT 5
13164: PUSH
13165: LD_INT 70
13167: PUSH
13168: LD_INT 20
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: LIST
13175: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
13176: LD_VAR 0 6
13180: PPUSH
13181: CALL_OW 264
13185: PUSH
13186: LD_INT 10
13188: PUSH
13189: EMPTY
13190: LIST
13191: IN
13192: IFFALSE 13213
// points := [ 35 , 110 , 70 ] ;
13194: LD_ADDR_VAR 0 9
13198: PUSH
13199: LD_INT 35
13201: PUSH
13202: LD_INT 110
13204: PUSH
13205: LD_INT 70
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: LIST
13212: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
13213: LD_VAR 0 6
13217: PPUSH
13218: CALL_OW 265
13222: PUSH
13223: LD_INT 25
13225: EQUAL
13226: IFFALSE 13247
// points := [ 80 , 65 , 100 ] ;
13228: LD_ADDR_VAR 0 9
13232: PUSH
13233: LD_INT 80
13235: PUSH
13236: LD_INT 65
13238: PUSH
13239: LD_INT 100
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: LIST
13246: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
13247: LD_VAR 0 6
13251: PPUSH
13252: CALL_OW 263
13256: PUSH
13257: LD_INT 1
13259: EQUAL
13260: IFFALSE 13295
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
13262: LD_ADDR_VAR 0 10
13266: PUSH
13267: LD_VAR 0 10
13271: PUSH
13272: LD_VAR 0 6
13276: PPUSH
13277: CALL_OW 311
13281: PPUSH
13282: LD_INT 3
13284: PPUSH
13285: CALL_OW 259
13289: PUSH
13290: LD_INT 4
13292: MUL
13293: MUL
13294: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
13295: LD_VAR 0 6
13299: PPUSH
13300: CALL_OW 263
13304: PUSH
13305: LD_INT 2
13307: EQUAL
13308: IFFALSE 13359
// begin j := IsControledBy ( i ) ;
13310: LD_ADDR_VAR 0 7
13314: PUSH
13315: LD_VAR 0 6
13319: PPUSH
13320: CALL_OW 312
13324: ST_TO_ADDR
// if j then
13325: LD_VAR 0 7
13329: IFFALSE 13359
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
13331: LD_ADDR_VAR 0 10
13335: PUSH
13336: LD_VAR 0 10
13340: PUSH
13341: LD_VAR 0 7
13345: PPUSH
13346: LD_INT 3
13348: PPUSH
13349: CALL_OW 259
13353: PUSH
13354: LD_INT 3
13356: MUL
13357: MUL
13358: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
13359: LD_VAR 0 6
13363: PPUSH
13364: CALL_OW 264
13368: PUSH
13369: LD_INT 5
13371: PUSH
13372: LD_INT 6
13374: PUSH
13375: LD_INT 46
13377: PUSH
13378: LD_INT 44
13380: PUSH
13381: LD_INT 47
13383: PUSH
13384: LD_INT 45
13386: PUSH
13387: LD_INT 28
13389: PUSH
13390: LD_INT 7
13392: PUSH
13393: LD_INT 27
13395: PUSH
13396: LD_INT 29
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: IN
13411: PUSH
13412: LD_VAR 0 1
13416: PPUSH
13417: LD_INT 52
13419: PPUSH
13420: CALL_OW 321
13424: PUSH
13425: LD_INT 2
13427: EQUAL
13428: AND
13429: IFFALSE 13446
// bpoints := bpoints * 1.2 ;
13431: LD_ADDR_VAR 0 10
13435: PUSH
13436: LD_VAR 0 10
13440: PUSH
13441: LD_REAL  1.20000000000000E+0000
13444: MUL
13445: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
13446: LD_VAR 0 6
13450: PPUSH
13451: CALL_OW 264
13455: PUSH
13456: LD_INT 6
13458: PUSH
13459: LD_INT 46
13461: PUSH
13462: LD_INT 47
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: LIST
13469: IN
13470: IFFALSE 13487
// bpoints := bpoints * 1.2 ;
13472: LD_ADDR_VAR 0 10
13476: PUSH
13477: LD_VAR 0 10
13481: PUSH
13482: LD_REAL  1.20000000000000E+0000
13485: MUL
13486: ST_TO_ADDR
// end ; unit_building :
13487: GO 13501
13489: LD_INT 3
13491: DOUBLE
13492: EQUAL
13493: IFTRUE 13497
13495: GO 13500
13497: POP
// ; end ;
13498: GO 13501
13500: POP
// for j = 1 to 3 do
13501: LD_ADDR_VAR 0 7
13505: PUSH
13506: DOUBLE
13507: LD_INT 1
13509: DEC
13510: ST_TO_ADDR
13511: LD_INT 3
13513: PUSH
13514: FOR_TO
13515: IFFALSE 13568
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
13517: LD_ADDR_VAR 0 5
13521: PUSH
13522: LD_VAR 0 5
13526: PPUSH
13527: LD_VAR 0 7
13531: PPUSH
13532: LD_VAR 0 5
13536: PUSH
13537: LD_VAR 0 7
13541: ARRAY
13542: PUSH
13543: LD_VAR 0 9
13547: PUSH
13548: LD_VAR 0 7
13552: ARRAY
13553: PUSH
13554: LD_VAR 0 10
13558: MUL
13559: PLUS
13560: PPUSH
13561: CALL_OW 1
13565: ST_TO_ADDR
13566: GO 13514
13568: POP
13569: POP
// end ;
13570: GO 12047
13572: POP
13573: POP
// result := Replace ( result , 4 , tmp ) ;
13574: LD_ADDR_VAR 0 5
13578: PUSH
13579: LD_VAR 0 5
13583: PPUSH
13584: LD_INT 4
13586: PPUSH
13587: LD_VAR 0 8
13591: PPUSH
13592: CALL_OW 1
13596: ST_TO_ADDR
// end ;
13597: LD_VAR 0 5
13601: RET
// export function DangerAtRange ( unit , range ) ; begin
13602: LD_INT 0
13604: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
13605: LD_ADDR_VAR 0 3
13609: PUSH
13610: LD_VAR 0 1
13614: PPUSH
13615: CALL_OW 255
13619: PPUSH
13620: LD_VAR 0 1
13624: PPUSH
13625: CALL_OW 250
13629: PPUSH
13630: LD_VAR 0 1
13634: PPUSH
13635: CALL_OW 251
13639: PPUSH
13640: LD_VAR 0 2
13644: PPUSH
13645: CALL 11899 0 4
13649: ST_TO_ADDR
// end ;
13650: LD_VAR 0 3
13654: RET
// export function DangerInArea ( side , area ) ; begin
13655: LD_INT 0
13657: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
13658: LD_ADDR_VAR 0 3
13662: PUSH
13663: LD_VAR 0 2
13667: PPUSH
13668: LD_INT 81
13670: PUSH
13671: LD_VAR 0 1
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PPUSH
13680: CALL_OW 70
13684: ST_TO_ADDR
// end ;
13685: LD_VAR 0 3
13689: RET
// export function IsExtension ( b ) ; begin
13690: LD_INT 0
13692: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
13693: LD_ADDR_VAR 0 2
13697: PUSH
13698: LD_VAR 0 1
13702: PUSH
13703: LD_INT 23
13705: PUSH
13706: LD_INT 20
13708: PUSH
13709: LD_INT 22
13711: PUSH
13712: LD_INT 17
13714: PUSH
13715: LD_INT 24
13717: PUSH
13718: LD_INT 21
13720: PUSH
13721: LD_INT 19
13723: PUSH
13724: LD_INT 16
13726: PUSH
13727: LD_INT 25
13729: PUSH
13730: LD_INT 18
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: IN
13745: ST_TO_ADDR
// end ;
13746: LD_VAR 0 2
13750: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
13751: LD_INT 0
13753: PPUSH
13754: PPUSH
13755: PPUSH
// result := [ ] ;
13756: LD_ADDR_VAR 0 4
13760: PUSH
13761: EMPTY
13762: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
13763: LD_ADDR_VAR 0 5
13767: PUSH
13768: LD_VAR 0 2
13772: PPUSH
13773: LD_INT 21
13775: PUSH
13776: LD_INT 3
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PPUSH
13783: CALL_OW 70
13787: ST_TO_ADDR
// if not tmp then
13788: LD_VAR 0 5
13792: NOT
13793: IFFALSE 13797
// exit ;
13795: GO 13861
// if checkLink then
13797: LD_VAR 0 3
13801: IFFALSE 13851
// begin for i in tmp do
13803: LD_ADDR_VAR 0 6
13807: PUSH
13808: LD_VAR 0 5
13812: PUSH
13813: FOR_IN
13814: IFFALSE 13849
// if GetBase ( i ) <> base then
13816: LD_VAR 0 6
13820: PPUSH
13821: CALL_OW 274
13825: PUSH
13826: LD_VAR 0 1
13830: NONEQUAL
13831: IFFALSE 13847
// ComLinkToBase ( base , i ) ;
13833: LD_VAR 0 1
13837: PPUSH
13838: LD_VAR 0 6
13842: PPUSH
13843: CALL_OW 169
13847: GO 13813
13849: POP
13850: POP
// end ; result := tmp ;
13851: LD_ADDR_VAR 0 4
13855: PUSH
13856: LD_VAR 0 5
13860: ST_TO_ADDR
// end ;
13861: LD_VAR 0 4
13865: RET
// export function ComComplete ( units , b ) ; var i ; begin
13866: LD_INT 0
13868: PPUSH
13869: PPUSH
// if not units then
13870: LD_VAR 0 1
13874: NOT
13875: IFFALSE 13879
// exit ;
13877: GO 13969
// for i in units do
13879: LD_ADDR_VAR 0 4
13883: PUSH
13884: LD_VAR 0 1
13888: PUSH
13889: FOR_IN
13890: IFFALSE 13967
// if BuildingStatus ( b ) = bs_build then
13892: LD_VAR 0 2
13896: PPUSH
13897: CALL_OW 461
13901: PUSH
13902: LD_INT 1
13904: EQUAL
13905: IFFALSE 13965
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
13907: LD_VAR 0 4
13911: PPUSH
13912: LD_STRING h
13914: PUSH
13915: LD_VAR 0 2
13919: PPUSH
13920: CALL_OW 250
13924: PUSH
13925: LD_VAR 0 2
13929: PPUSH
13930: CALL_OW 251
13934: PUSH
13935: LD_VAR 0 2
13939: PUSH
13940: LD_INT 0
13942: PUSH
13943: LD_INT 0
13945: PUSH
13946: LD_INT 0
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: PUSH
13958: EMPTY
13959: LIST
13960: PPUSH
13961: CALL_OW 446
13965: GO 13889
13967: POP
13968: POP
// end ;
13969: LD_VAR 0 3
13973: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
13974: LD_INT 0
13976: PPUSH
13977: PPUSH
13978: PPUSH
13979: PPUSH
13980: PPUSH
13981: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
13982: LD_VAR 0 1
13986: NOT
13987: PUSH
13988: LD_VAR 0 1
13992: PPUSH
13993: CALL_OW 263
13997: PUSH
13998: LD_INT 2
14000: NONEQUAL
14001: OR
14002: IFFALSE 14006
// exit ;
14004: GO 14322
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
14006: LD_ADDR_VAR 0 6
14010: PUSH
14011: LD_INT 22
14013: PUSH
14014: LD_VAR 0 1
14018: PPUSH
14019: CALL_OW 255
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: PUSH
14028: LD_INT 2
14030: PUSH
14031: LD_INT 30
14033: PUSH
14034: LD_INT 36
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: PUSH
14041: LD_INT 34
14043: PUSH
14044: LD_INT 31
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: LIST
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PPUSH
14060: CALL_OW 69
14064: ST_TO_ADDR
// if not tmp then
14065: LD_VAR 0 6
14069: NOT
14070: IFFALSE 14074
// exit ;
14072: GO 14322
// result := [ ] ;
14074: LD_ADDR_VAR 0 2
14078: PUSH
14079: EMPTY
14080: ST_TO_ADDR
// for i in tmp do
14081: LD_ADDR_VAR 0 3
14085: PUSH
14086: LD_VAR 0 6
14090: PUSH
14091: FOR_IN
14092: IFFALSE 14163
// begin t := UnitsInside ( i ) ;
14094: LD_ADDR_VAR 0 4
14098: PUSH
14099: LD_VAR 0 3
14103: PPUSH
14104: CALL_OW 313
14108: ST_TO_ADDR
// if t then
14109: LD_VAR 0 4
14113: IFFALSE 14161
// for j in t do
14115: LD_ADDR_VAR 0 7
14119: PUSH
14120: LD_VAR 0 4
14124: PUSH
14125: FOR_IN
14126: IFFALSE 14159
// result := Replace ( result , result + 1 , j ) ;
14128: LD_ADDR_VAR 0 2
14132: PUSH
14133: LD_VAR 0 2
14137: PPUSH
14138: LD_VAR 0 2
14142: PUSH
14143: LD_INT 1
14145: PLUS
14146: PPUSH
14147: LD_VAR 0 7
14151: PPUSH
14152: CALL_OW 1
14156: ST_TO_ADDR
14157: GO 14125
14159: POP
14160: POP
// end ;
14161: GO 14091
14163: POP
14164: POP
// if not result then
14165: LD_VAR 0 2
14169: NOT
14170: IFFALSE 14174
// exit ;
14172: GO 14322
// mech := result [ 1 ] ;
14174: LD_ADDR_VAR 0 5
14178: PUSH
14179: LD_VAR 0 2
14183: PUSH
14184: LD_INT 1
14186: ARRAY
14187: ST_TO_ADDR
// if result > 1 then
14188: LD_VAR 0 2
14192: PUSH
14193: LD_INT 1
14195: GREATER
14196: IFFALSE 14308
// begin for i = 2 to result do
14198: LD_ADDR_VAR 0 3
14202: PUSH
14203: DOUBLE
14204: LD_INT 2
14206: DEC
14207: ST_TO_ADDR
14208: LD_VAR 0 2
14212: PUSH
14213: FOR_TO
14214: IFFALSE 14306
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
14216: LD_ADDR_VAR 0 4
14220: PUSH
14221: LD_VAR 0 2
14225: PUSH
14226: LD_VAR 0 3
14230: ARRAY
14231: PPUSH
14232: LD_INT 3
14234: PPUSH
14235: CALL_OW 259
14239: PUSH
14240: LD_VAR 0 2
14244: PUSH
14245: LD_VAR 0 3
14249: ARRAY
14250: PPUSH
14251: CALL_OW 432
14255: MINUS
14256: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
14257: LD_VAR 0 4
14261: PUSH
14262: LD_VAR 0 5
14266: PPUSH
14267: LD_INT 3
14269: PPUSH
14270: CALL_OW 259
14274: PUSH
14275: LD_VAR 0 5
14279: PPUSH
14280: CALL_OW 432
14284: MINUS
14285: GREATEREQUAL
14286: IFFALSE 14304
// mech := result [ i ] ;
14288: LD_ADDR_VAR 0 5
14292: PUSH
14293: LD_VAR 0 2
14297: PUSH
14298: LD_VAR 0 3
14302: ARRAY
14303: ST_TO_ADDR
// end ;
14304: GO 14213
14306: POP
14307: POP
// end ; ComLinkTo ( vehicle , mech ) ;
14308: LD_VAR 0 1
14312: PPUSH
14313: LD_VAR 0 5
14317: PPUSH
14318: CALL_OW 135
// end ;
14322: LD_VAR 0 2
14326: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
14327: LD_INT 0
14329: PPUSH
14330: PPUSH
14331: PPUSH
14332: PPUSH
14333: PPUSH
14334: PPUSH
14335: PPUSH
14336: PPUSH
14337: PPUSH
14338: PPUSH
14339: PPUSH
14340: PPUSH
14341: PPUSH
// result := [ ] ;
14342: LD_ADDR_VAR 0 7
14346: PUSH
14347: EMPTY
14348: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
14349: LD_VAR 0 1
14353: PPUSH
14354: CALL_OW 266
14358: PUSH
14359: LD_INT 0
14361: PUSH
14362: LD_INT 1
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: IN
14369: NOT
14370: IFFALSE 14374
// exit ;
14372: GO 16008
// if name then
14374: LD_VAR 0 3
14378: IFFALSE 14394
// SetBName ( base_dep , name ) ;
14380: LD_VAR 0 1
14384: PPUSH
14385: LD_VAR 0 3
14389: PPUSH
14390: CALL_OW 500
// base := GetBase ( base_dep ) ;
14394: LD_ADDR_VAR 0 15
14398: PUSH
14399: LD_VAR 0 1
14403: PPUSH
14404: CALL_OW 274
14408: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
14409: LD_ADDR_VAR 0 16
14413: PUSH
14414: LD_VAR 0 1
14418: PPUSH
14419: CALL_OW 255
14423: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
14424: LD_ADDR_VAR 0 17
14428: PUSH
14429: LD_VAR 0 1
14433: PPUSH
14434: CALL_OW 248
14438: ST_TO_ADDR
// if sources then
14439: LD_VAR 0 5
14443: IFFALSE 14490
// for i = 1 to 3 do
14445: LD_ADDR_VAR 0 8
14449: PUSH
14450: DOUBLE
14451: LD_INT 1
14453: DEC
14454: ST_TO_ADDR
14455: LD_INT 3
14457: PUSH
14458: FOR_TO
14459: IFFALSE 14488
// AddResourceType ( base , i , sources [ i ] ) ;
14461: LD_VAR 0 15
14465: PPUSH
14466: LD_VAR 0 8
14470: PPUSH
14471: LD_VAR 0 5
14475: PUSH
14476: LD_VAR 0 8
14480: ARRAY
14481: PPUSH
14482: CALL_OW 276
14486: GO 14458
14488: POP
14489: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
14490: LD_ADDR_VAR 0 18
14494: PUSH
14495: LD_VAR 0 15
14499: PPUSH
14500: LD_VAR 0 2
14504: PPUSH
14505: LD_INT 1
14507: PPUSH
14508: CALL 13751 0 3
14512: ST_TO_ADDR
// InitHc ;
14513: CALL_OW 19
// InitUc ;
14517: CALL_OW 18
// uc_side := side ;
14521: LD_ADDR_OWVAR 20
14525: PUSH
14526: LD_VAR 0 16
14530: ST_TO_ADDR
// uc_nation := nation ;
14531: LD_ADDR_OWVAR 21
14535: PUSH
14536: LD_VAR 0 17
14540: ST_TO_ADDR
// if buildings then
14541: LD_VAR 0 18
14545: IFFALSE 15867
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
14547: LD_ADDR_VAR 0 19
14551: PUSH
14552: LD_VAR 0 18
14556: PPUSH
14557: LD_INT 2
14559: PUSH
14560: LD_INT 30
14562: PUSH
14563: LD_INT 29
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: PUSH
14570: LD_INT 30
14572: PUSH
14573: LD_INT 30
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: LIST
14584: PPUSH
14585: CALL_OW 72
14589: ST_TO_ADDR
// if tmp then
14590: LD_VAR 0 19
14594: IFFALSE 14642
// for i in tmp do
14596: LD_ADDR_VAR 0 8
14600: PUSH
14601: LD_VAR 0 19
14605: PUSH
14606: FOR_IN
14607: IFFALSE 14640
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
14609: LD_VAR 0 8
14613: PPUSH
14614: CALL_OW 250
14618: PPUSH
14619: LD_VAR 0 8
14623: PPUSH
14624: CALL_OW 251
14628: PPUSH
14629: LD_VAR 0 16
14633: PPUSH
14634: CALL_OW 441
14638: GO 14606
14640: POP
14641: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
14642: LD_VAR 0 18
14646: PPUSH
14647: LD_INT 2
14649: PUSH
14650: LD_INT 30
14652: PUSH
14653: LD_INT 32
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: PUSH
14660: LD_INT 30
14662: PUSH
14663: LD_INT 33
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: LIST
14674: PPUSH
14675: CALL_OW 72
14679: IFFALSE 14767
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
14681: LD_ADDR_VAR 0 8
14685: PUSH
14686: LD_VAR 0 18
14690: PPUSH
14691: LD_INT 2
14693: PUSH
14694: LD_INT 30
14696: PUSH
14697: LD_INT 32
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: LD_INT 30
14706: PUSH
14707: LD_INT 33
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: LIST
14718: PPUSH
14719: CALL_OW 72
14723: PUSH
14724: FOR_IN
14725: IFFALSE 14765
// begin if not GetBWeapon ( i ) then
14727: LD_VAR 0 8
14731: PPUSH
14732: CALL_OW 269
14736: NOT
14737: IFFALSE 14763
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
14739: LD_VAR 0 8
14743: PPUSH
14744: LD_VAR 0 8
14748: PPUSH
14749: LD_VAR 0 2
14753: PPUSH
14754: CALL 16013 0 2
14758: PPUSH
14759: CALL_OW 431
// end ;
14763: GO 14724
14765: POP
14766: POP
// end ; for i = 1 to personel do
14767: LD_ADDR_VAR 0 8
14771: PUSH
14772: DOUBLE
14773: LD_INT 1
14775: DEC
14776: ST_TO_ADDR
14777: LD_VAR 0 6
14781: PUSH
14782: FOR_TO
14783: IFFALSE 15847
// begin if i > 4 then
14785: LD_VAR 0 8
14789: PUSH
14790: LD_INT 4
14792: GREATER
14793: IFFALSE 14797
// break ;
14795: GO 15847
// case i of 1 :
14797: LD_VAR 0 8
14801: PUSH
14802: LD_INT 1
14804: DOUBLE
14805: EQUAL
14806: IFTRUE 14810
14808: GO 14890
14810: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
14811: LD_ADDR_VAR 0 12
14815: PUSH
14816: LD_VAR 0 18
14820: PPUSH
14821: LD_INT 22
14823: PUSH
14824: LD_VAR 0 16
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: LD_INT 58
14835: PUSH
14836: EMPTY
14837: LIST
14838: PUSH
14839: LD_INT 2
14841: PUSH
14842: LD_INT 30
14844: PUSH
14845: LD_INT 32
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: PUSH
14852: LD_INT 30
14854: PUSH
14855: LD_INT 4
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: PUSH
14862: LD_INT 30
14864: PUSH
14865: LD_INT 5
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: LIST
14882: PPUSH
14883: CALL_OW 72
14887: ST_TO_ADDR
14888: GO 15112
14890: LD_INT 2
14892: DOUBLE
14893: EQUAL
14894: IFTRUE 14898
14896: GO 14960
14898: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
14899: LD_ADDR_VAR 0 12
14903: PUSH
14904: LD_VAR 0 18
14908: PPUSH
14909: LD_INT 22
14911: PUSH
14912: LD_VAR 0 16
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: PUSH
14921: LD_INT 2
14923: PUSH
14924: LD_INT 30
14926: PUSH
14927: LD_INT 0
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PUSH
14934: LD_INT 30
14936: PUSH
14937: LD_INT 1
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: LIST
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: PPUSH
14953: CALL_OW 72
14957: ST_TO_ADDR
14958: GO 15112
14960: LD_INT 3
14962: DOUBLE
14963: EQUAL
14964: IFTRUE 14968
14966: GO 15030
14968: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
14969: LD_ADDR_VAR 0 12
14973: PUSH
14974: LD_VAR 0 18
14978: PPUSH
14979: LD_INT 22
14981: PUSH
14982: LD_VAR 0 16
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PUSH
14991: LD_INT 2
14993: PUSH
14994: LD_INT 30
14996: PUSH
14997: LD_INT 2
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PUSH
15004: LD_INT 30
15006: PUSH
15007: LD_INT 3
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: LIST
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PPUSH
15023: CALL_OW 72
15027: ST_TO_ADDR
15028: GO 15112
15030: LD_INT 4
15032: DOUBLE
15033: EQUAL
15034: IFTRUE 15038
15036: GO 15111
15038: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
15039: LD_ADDR_VAR 0 12
15043: PUSH
15044: LD_VAR 0 18
15048: PPUSH
15049: LD_INT 22
15051: PUSH
15052: LD_VAR 0 16
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PUSH
15061: LD_INT 2
15063: PUSH
15064: LD_INT 30
15066: PUSH
15067: LD_INT 6
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PUSH
15074: LD_INT 30
15076: PUSH
15077: LD_INT 7
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: PUSH
15084: LD_INT 30
15086: PUSH
15087: LD_INT 8
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PPUSH
15104: CALL_OW 72
15108: ST_TO_ADDR
15109: GO 15112
15111: POP
// if i = 1 then
15112: LD_VAR 0 8
15116: PUSH
15117: LD_INT 1
15119: EQUAL
15120: IFFALSE 15231
// begin tmp := [ ] ;
15122: LD_ADDR_VAR 0 19
15126: PUSH
15127: EMPTY
15128: ST_TO_ADDR
// for j in f do
15129: LD_ADDR_VAR 0 9
15133: PUSH
15134: LD_VAR 0 12
15138: PUSH
15139: FOR_IN
15140: IFFALSE 15213
// if GetBType ( j ) = b_bunker then
15142: LD_VAR 0 9
15146: PPUSH
15147: CALL_OW 266
15151: PUSH
15152: LD_INT 32
15154: EQUAL
15155: IFFALSE 15182
// tmp := Insert ( tmp , 1 , j ) else
15157: LD_ADDR_VAR 0 19
15161: PUSH
15162: LD_VAR 0 19
15166: PPUSH
15167: LD_INT 1
15169: PPUSH
15170: LD_VAR 0 9
15174: PPUSH
15175: CALL_OW 2
15179: ST_TO_ADDR
15180: GO 15211
// tmp := Insert ( tmp , tmp + 1 , j ) ;
15182: LD_ADDR_VAR 0 19
15186: PUSH
15187: LD_VAR 0 19
15191: PPUSH
15192: LD_VAR 0 19
15196: PUSH
15197: LD_INT 1
15199: PLUS
15200: PPUSH
15201: LD_VAR 0 9
15205: PPUSH
15206: CALL_OW 2
15210: ST_TO_ADDR
15211: GO 15139
15213: POP
15214: POP
// if tmp then
15215: LD_VAR 0 19
15219: IFFALSE 15231
// f := tmp ;
15221: LD_ADDR_VAR 0 12
15225: PUSH
15226: LD_VAR 0 19
15230: ST_TO_ADDR
// end ; x := personel [ i ] ;
15231: LD_ADDR_VAR 0 13
15235: PUSH
15236: LD_VAR 0 6
15240: PUSH
15241: LD_VAR 0 8
15245: ARRAY
15246: ST_TO_ADDR
// if x = - 1 then
15247: LD_VAR 0 13
15251: PUSH
15252: LD_INT 1
15254: NEG
15255: EQUAL
15256: IFFALSE 15465
// begin for j in f do
15258: LD_ADDR_VAR 0 9
15262: PUSH
15263: LD_VAR 0 12
15267: PUSH
15268: FOR_IN
15269: IFFALSE 15461
// repeat InitHc ;
15271: CALL_OW 19
// if GetBType ( j ) = b_barracks then
15275: LD_VAR 0 9
15279: PPUSH
15280: CALL_OW 266
15284: PUSH
15285: LD_INT 5
15287: EQUAL
15288: IFFALSE 15358
// begin if UnitsInside ( j ) < 3 then
15290: LD_VAR 0 9
15294: PPUSH
15295: CALL_OW 313
15299: PUSH
15300: LD_INT 3
15302: LESS
15303: IFFALSE 15339
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
15305: LD_INT 0
15307: PPUSH
15308: LD_INT 5
15310: PUSH
15311: LD_INT 8
15313: PUSH
15314: LD_INT 9
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: LIST
15321: PUSH
15322: LD_VAR 0 17
15326: ARRAY
15327: PPUSH
15328: LD_VAR 0 4
15332: PPUSH
15333: CALL_OW 380
15337: GO 15356
// PrepareHuman ( false , i , skill ) ;
15339: LD_INT 0
15341: PPUSH
15342: LD_VAR 0 8
15346: PPUSH
15347: LD_VAR 0 4
15351: PPUSH
15352: CALL_OW 380
// end else
15356: GO 15375
// PrepareHuman ( false , i , skill ) ;
15358: LD_INT 0
15360: PPUSH
15361: LD_VAR 0 8
15365: PPUSH
15366: LD_VAR 0 4
15370: PPUSH
15371: CALL_OW 380
// un := CreateHuman ;
15375: LD_ADDR_VAR 0 14
15379: PUSH
15380: CALL_OW 44
15384: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
15385: LD_ADDR_VAR 0 7
15389: PUSH
15390: LD_VAR 0 7
15394: PPUSH
15395: LD_INT 1
15397: PPUSH
15398: LD_VAR 0 14
15402: PPUSH
15403: CALL_OW 2
15407: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
15408: LD_VAR 0 14
15412: PPUSH
15413: LD_VAR 0 9
15417: PPUSH
15418: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
15422: LD_VAR 0 9
15426: PPUSH
15427: CALL_OW 313
15431: PUSH
15432: LD_INT 6
15434: EQUAL
15435: PUSH
15436: LD_VAR 0 9
15440: PPUSH
15441: CALL_OW 266
15445: PUSH
15446: LD_INT 32
15448: PUSH
15449: LD_INT 31
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: IN
15456: OR
15457: IFFALSE 15271
15459: GO 15268
15461: POP
15462: POP
// end else
15463: GO 15845
// for j = 1 to x do
15465: LD_ADDR_VAR 0 9
15469: PUSH
15470: DOUBLE
15471: LD_INT 1
15473: DEC
15474: ST_TO_ADDR
15475: LD_VAR 0 13
15479: PUSH
15480: FOR_TO
15481: IFFALSE 15843
// begin InitHc ;
15483: CALL_OW 19
// if not f then
15487: LD_VAR 0 12
15491: NOT
15492: IFFALSE 15581
// begin PrepareHuman ( false , i , skill ) ;
15494: LD_INT 0
15496: PPUSH
15497: LD_VAR 0 8
15501: PPUSH
15502: LD_VAR 0 4
15506: PPUSH
15507: CALL_OW 380
// un := CreateHuman ;
15511: LD_ADDR_VAR 0 14
15515: PUSH
15516: CALL_OW 44
15520: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
15521: LD_ADDR_VAR 0 7
15525: PUSH
15526: LD_VAR 0 7
15530: PPUSH
15531: LD_INT 1
15533: PPUSH
15534: LD_VAR 0 14
15538: PPUSH
15539: CALL_OW 2
15543: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
15544: LD_VAR 0 14
15548: PPUSH
15549: LD_VAR 0 1
15553: PPUSH
15554: CALL_OW 250
15558: PPUSH
15559: LD_VAR 0 1
15563: PPUSH
15564: CALL_OW 251
15568: PPUSH
15569: LD_INT 10
15571: PPUSH
15572: LD_INT 0
15574: PPUSH
15575: CALL_OW 50
// continue ;
15579: GO 15480
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
15581: LD_VAR 0 12
15585: PUSH
15586: LD_INT 1
15588: ARRAY
15589: PPUSH
15590: CALL_OW 313
15594: PUSH
15595: LD_VAR 0 12
15599: PUSH
15600: LD_INT 1
15602: ARRAY
15603: PPUSH
15604: CALL_OW 266
15608: PUSH
15609: LD_INT 32
15611: PUSH
15612: LD_INT 31
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: IN
15619: AND
15620: PUSH
15621: LD_VAR 0 12
15625: PUSH
15626: LD_INT 1
15628: ARRAY
15629: PPUSH
15630: CALL_OW 313
15634: PUSH
15635: LD_INT 6
15637: EQUAL
15638: OR
15639: IFFALSE 15659
// f := Delete ( f , 1 ) ;
15641: LD_ADDR_VAR 0 12
15645: PUSH
15646: LD_VAR 0 12
15650: PPUSH
15651: LD_INT 1
15653: PPUSH
15654: CALL_OW 3
15658: ST_TO_ADDR
// if not f then
15659: LD_VAR 0 12
15663: NOT
15664: IFFALSE 15682
// begin x := x + 2 ;
15666: LD_ADDR_VAR 0 13
15670: PUSH
15671: LD_VAR 0 13
15675: PUSH
15676: LD_INT 2
15678: PLUS
15679: ST_TO_ADDR
// continue ;
15680: GO 15480
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
15682: LD_VAR 0 12
15686: PUSH
15687: LD_INT 1
15689: ARRAY
15690: PPUSH
15691: CALL_OW 266
15695: PUSH
15696: LD_INT 5
15698: EQUAL
15699: IFFALSE 15773
// begin if UnitsInside ( f [ 1 ] ) < 3 then
15701: LD_VAR 0 12
15705: PUSH
15706: LD_INT 1
15708: ARRAY
15709: PPUSH
15710: CALL_OW 313
15714: PUSH
15715: LD_INT 3
15717: LESS
15718: IFFALSE 15754
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
15720: LD_INT 0
15722: PPUSH
15723: LD_INT 5
15725: PUSH
15726: LD_INT 8
15728: PUSH
15729: LD_INT 9
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: LIST
15736: PUSH
15737: LD_VAR 0 17
15741: ARRAY
15742: PPUSH
15743: LD_VAR 0 4
15747: PPUSH
15748: CALL_OW 380
15752: GO 15771
// PrepareHuman ( false , i , skill ) ;
15754: LD_INT 0
15756: PPUSH
15757: LD_VAR 0 8
15761: PPUSH
15762: LD_VAR 0 4
15766: PPUSH
15767: CALL_OW 380
// end else
15771: GO 15790
// PrepareHuman ( false , i , skill ) ;
15773: LD_INT 0
15775: PPUSH
15776: LD_VAR 0 8
15780: PPUSH
15781: LD_VAR 0 4
15785: PPUSH
15786: CALL_OW 380
// un := CreateHuman ;
15790: LD_ADDR_VAR 0 14
15794: PUSH
15795: CALL_OW 44
15799: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
15800: LD_ADDR_VAR 0 7
15804: PUSH
15805: LD_VAR 0 7
15809: PPUSH
15810: LD_INT 1
15812: PPUSH
15813: LD_VAR 0 14
15817: PPUSH
15818: CALL_OW 2
15822: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
15823: LD_VAR 0 14
15827: PPUSH
15828: LD_VAR 0 12
15832: PUSH
15833: LD_INT 1
15835: ARRAY
15836: PPUSH
15837: CALL_OW 52
// end ;
15841: GO 15480
15843: POP
15844: POP
// end ;
15845: GO 14782
15847: POP
15848: POP
// result := result ^ buildings ;
15849: LD_ADDR_VAR 0 7
15853: PUSH
15854: LD_VAR 0 7
15858: PUSH
15859: LD_VAR 0 18
15863: ADD
15864: ST_TO_ADDR
// end else
15865: GO 16008
// begin for i = 1 to personel do
15867: LD_ADDR_VAR 0 8
15871: PUSH
15872: DOUBLE
15873: LD_INT 1
15875: DEC
15876: ST_TO_ADDR
15877: LD_VAR 0 6
15881: PUSH
15882: FOR_TO
15883: IFFALSE 16006
// begin if i > 4 then
15885: LD_VAR 0 8
15889: PUSH
15890: LD_INT 4
15892: GREATER
15893: IFFALSE 15897
// break ;
15895: GO 16006
// x := personel [ i ] ;
15897: LD_ADDR_VAR 0 13
15901: PUSH
15902: LD_VAR 0 6
15906: PUSH
15907: LD_VAR 0 8
15911: ARRAY
15912: ST_TO_ADDR
// if x = - 1 then
15913: LD_VAR 0 13
15917: PUSH
15918: LD_INT 1
15920: NEG
15921: EQUAL
15922: IFFALSE 15926
// continue ;
15924: GO 15882
// PrepareHuman ( false , i , skill ) ;
15926: LD_INT 0
15928: PPUSH
15929: LD_VAR 0 8
15933: PPUSH
15934: LD_VAR 0 4
15938: PPUSH
15939: CALL_OW 380
// un := CreateHuman ;
15943: LD_ADDR_VAR 0 14
15947: PUSH
15948: CALL_OW 44
15952: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
15953: LD_VAR 0 14
15957: PPUSH
15958: LD_VAR 0 1
15962: PPUSH
15963: CALL_OW 250
15967: PPUSH
15968: LD_VAR 0 1
15972: PPUSH
15973: CALL_OW 251
15977: PPUSH
15978: LD_INT 10
15980: PPUSH
15981: LD_INT 0
15983: PPUSH
15984: CALL_OW 50
// result := result ^ un ;
15988: LD_ADDR_VAR 0 7
15992: PUSH
15993: LD_VAR 0 7
15997: PUSH
15998: LD_VAR 0 14
16002: ADD
16003: ST_TO_ADDR
// end ;
16004: GO 15882
16006: POP
16007: POP
// end ; end ;
16008: LD_VAR 0 7
16012: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
16013: LD_INT 0
16015: PPUSH
16016: PPUSH
16017: PPUSH
16018: PPUSH
16019: PPUSH
16020: PPUSH
16021: PPUSH
16022: PPUSH
16023: PPUSH
16024: PPUSH
16025: PPUSH
16026: PPUSH
16027: PPUSH
16028: PPUSH
16029: PPUSH
16030: PPUSH
// result := false ;
16031: LD_ADDR_VAR 0 3
16035: PUSH
16036: LD_INT 0
16038: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
16039: LD_VAR 0 1
16043: NOT
16044: PUSH
16045: LD_VAR 0 1
16049: PPUSH
16050: CALL_OW 266
16054: PUSH
16055: LD_INT 32
16057: PUSH
16058: LD_INT 33
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: IN
16065: NOT
16066: OR
16067: IFFALSE 16071
// exit ;
16069: GO 17180
// nat := GetNation ( tower ) ;
16071: LD_ADDR_VAR 0 12
16075: PUSH
16076: LD_VAR 0 1
16080: PPUSH
16081: CALL_OW 248
16085: ST_TO_ADDR
// side := GetSide ( tower ) ;
16086: LD_ADDR_VAR 0 16
16090: PUSH
16091: LD_VAR 0 1
16095: PPUSH
16096: CALL_OW 255
16100: ST_TO_ADDR
// x := GetX ( tower ) ;
16101: LD_ADDR_VAR 0 10
16105: PUSH
16106: LD_VAR 0 1
16110: PPUSH
16111: CALL_OW 250
16115: ST_TO_ADDR
// y := GetY ( tower ) ;
16116: LD_ADDR_VAR 0 11
16120: PUSH
16121: LD_VAR 0 1
16125: PPUSH
16126: CALL_OW 251
16130: ST_TO_ADDR
// if not x or not y then
16131: LD_VAR 0 10
16135: NOT
16136: PUSH
16137: LD_VAR 0 11
16141: NOT
16142: OR
16143: IFFALSE 16147
// exit ;
16145: GO 17180
// weapon := 0 ;
16147: LD_ADDR_VAR 0 18
16151: PUSH
16152: LD_INT 0
16154: ST_TO_ADDR
// fac_list := [ ] ;
16155: LD_ADDR_VAR 0 17
16159: PUSH
16160: EMPTY
16161: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
16162: LD_ADDR_VAR 0 6
16166: PUSH
16167: LD_VAR 0 1
16171: PPUSH
16172: CALL_OW 274
16176: PPUSH
16177: LD_VAR 0 2
16181: PPUSH
16182: LD_INT 0
16184: PPUSH
16185: CALL 13751 0 3
16189: PPUSH
16190: LD_INT 30
16192: PUSH
16193: LD_INT 3
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PPUSH
16200: CALL_OW 72
16204: ST_TO_ADDR
// if not factories then
16205: LD_VAR 0 6
16209: NOT
16210: IFFALSE 16214
// exit ;
16212: GO 17180
// for i in factories do
16214: LD_ADDR_VAR 0 8
16218: PUSH
16219: LD_VAR 0 6
16223: PUSH
16224: FOR_IN
16225: IFFALSE 16250
// fac_list := fac_list union AvailableWeaponList ( i ) ;
16227: LD_ADDR_VAR 0 17
16231: PUSH
16232: LD_VAR 0 17
16236: PUSH
16237: LD_VAR 0 8
16241: PPUSH
16242: CALL_OW 478
16246: UNION
16247: ST_TO_ADDR
16248: GO 16224
16250: POP
16251: POP
// if not fac_list then
16252: LD_VAR 0 17
16256: NOT
16257: IFFALSE 16261
// exit ;
16259: GO 17180
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
16261: LD_ADDR_VAR 0 5
16265: PUSH
16266: LD_INT 4
16268: PUSH
16269: LD_INT 5
16271: PUSH
16272: LD_INT 9
16274: PUSH
16275: LD_INT 10
16277: PUSH
16278: LD_INT 6
16280: PUSH
16281: LD_INT 7
16283: PUSH
16284: LD_INT 11
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 27
16298: PUSH
16299: LD_INT 28
16301: PUSH
16302: LD_INT 26
16304: PUSH
16305: LD_INT 30
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: PUSH
16314: LD_INT 43
16316: PUSH
16317: LD_INT 44
16319: PUSH
16320: LD_INT 46
16322: PUSH
16323: LD_INT 45
16325: PUSH
16326: LD_INT 47
16328: PUSH
16329: LD_INT 49
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: LIST
16344: PUSH
16345: LD_VAR 0 12
16349: ARRAY
16350: ST_TO_ADDR
// list := list isect fac_list ;
16351: LD_ADDR_VAR 0 5
16355: PUSH
16356: LD_VAR 0 5
16360: PUSH
16361: LD_VAR 0 17
16365: ISECT
16366: ST_TO_ADDR
// if not list then
16367: LD_VAR 0 5
16371: NOT
16372: IFFALSE 16376
// exit ;
16374: GO 17180
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
16376: LD_VAR 0 12
16380: PUSH
16381: LD_INT 3
16383: EQUAL
16384: PUSH
16385: LD_INT 49
16387: PUSH
16388: LD_VAR 0 5
16392: IN
16393: AND
16394: PUSH
16395: LD_INT 31
16397: PPUSH
16398: LD_VAR 0 16
16402: PPUSH
16403: CALL_OW 321
16407: PUSH
16408: LD_INT 2
16410: EQUAL
16411: AND
16412: IFFALSE 16472
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
16414: LD_INT 22
16416: PUSH
16417: LD_VAR 0 16
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: LD_INT 35
16428: PUSH
16429: LD_INT 49
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 91
16438: PUSH
16439: LD_VAR 0 1
16443: PUSH
16444: LD_INT 10
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: LIST
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: LIST
16456: PPUSH
16457: CALL_OW 69
16461: NOT
16462: IFFALSE 16472
// weapon := ru_time_lapser ;
16464: LD_ADDR_VAR 0 18
16468: PUSH
16469: LD_INT 49
16471: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
16472: LD_VAR 0 12
16476: PUSH
16477: LD_INT 1
16479: PUSH
16480: LD_INT 2
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: IN
16487: PUSH
16488: LD_INT 11
16490: PUSH
16491: LD_VAR 0 5
16495: IN
16496: PUSH
16497: LD_INT 30
16499: PUSH
16500: LD_VAR 0 5
16504: IN
16505: OR
16506: AND
16507: PUSH
16508: LD_INT 6
16510: PPUSH
16511: LD_VAR 0 16
16515: PPUSH
16516: CALL_OW 321
16520: PUSH
16521: LD_INT 2
16523: EQUAL
16524: AND
16525: IFFALSE 16690
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
16527: LD_INT 22
16529: PUSH
16530: LD_VAR 0 16
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PUSH
16539: LD_INT 2
16541: PUSH
16542: LD_INT 35
16544: PUSH
16545: LD_INT 11
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: LD_INT 35
16554: PUSH
16555: LD_INT 30
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: LIST
16566: PUSH
16567: LD_INT 91
16569: PUSH
16570: LD_VAR 0 1
16574: PUSH
16575: LD_INT 18
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: LIST
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: LIST
16587: PPUSH
16588: CALL_OW 69
16592: NOT
16593: PUSH
16594: LD_INT 22
16596: PUSH
16597: LD_VAR 0 16
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: LD_INT 2
16608: PUSH
16609: LD_INT 30
16611: PUSH
16612: LD_INT 32
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: LD_INT 30
16621: PUSH
16622: LD_INT 33
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 91
16636: PUSH
16637: LD_VAR 0 1
16641: PUSH
16642: LD_INT 12
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: LIST
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: LIST
16654: PUSH
16655: EMPTY
16656: LIST
16657: PPUSH
16658: CALL_OW 69
16662: PUSH
16663: LD_INT 2
16665: GREATER
16666: AND
16667: IFFALSE 16690
// weapon := [ us_radar , ar_radar ] [ nat ] ;
16669: LD_ADDR_VAR 0 18
16673: PUSH
16674: LD_INT 11
16676: PUSH
16677: LD_INT 30
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: LD_VAR 0 12
16688: ARRAY
16689: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
16690: LD_VAR 0 18
16694: NOT
16695: PUSH
16696: LD_INT 40
16698: PPUSH
16699: LD_VAR 0 16
16703: PPUSH
16704: CALL_OW 321
16708: PUSH
16709: LD_INT 2
16711: EQUAL
16712: AND
16713: PUSH
16714: LD_INT 7
16716: PUSH
16717: LD_VAR 0 5
16721: IN
16722: PUSH
16723: LD_INT 28
16725: PUSH
16726: LD_VAR 0 5
16730: IN
16731: OR
16732: PUSH
16733: LD_INT 45
16735: PUSH
16736: LD_VAR 0 5
16740: IN
16741: OR
16742: AND
16743: IFFALSE 16997
// begin hex := GetHexInfo ( x , y ) ;
16745: LD_ADDR_VAR 0 4
16749: PUSH
16750: LD_VAR 0 10
16754: PPUSH
16755: LD_VAR 0 11
16759: PPUSH
16760: CALL_OW 546
16764: ST_TO_ADDR
// if hex [ 1 ] then
16765: LD_VAR 0 4
16769: PUSH
16770: LD_INT 1
16772: ARRAY
16773: IFFALSE 16777
// exit ;
16775: GO 17180
// height := hex [ 2 ] ;
16777: LD_ADDR_VAR 0 15
16781: PUSH
16782: LD_VAR 0 4
16786: PUSH
16787: LD_INT 2
16789: ARRAY
16790: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
16791: LD_ADDR_VAR 0 14
16795: PUSH
16796: LD_INT 0
16798: PUSH
16799: LD_INT 2
16801: PUSH
16802: LD_INT 3
16804: PUSH
16805: LD_INT 5
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: ST_TO_ADDR
// for i in tmp do
16814: LD_ADDR_VAR 0 8
16818: PUSH
16819: LD_VAR 0 14
16823: PUSH
16824: FOR_IN
16825: IFFALSE 16995
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
16827: LD_ADDR_VAR 0 9
16831: PUSH
16832: LD_VAR 0 10
16836: PPUSH
16837: LD_VAR 0 8
16841: PPUSH
16842: LD_INT 5
16844: PPUSH
16845: CALL_OW 272
16849: PUSH
16850: LD_VAR 0 11
16854: PPUSH
16855: LD_VAR 0 8
16859: PPUSH
16860: LD_INT 5
16862: PPUSH
16863: CALL_OW 273
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
16872: LD_VAR 0 9
16876: PUSH
16877: LD_INT 1
16879: ARRAY
16880: PPUSH
16881: LD_VAR 0 9
16885: PUSH
16886: LD_INT 2
16888: ARRAY
16889: PPUSH
16890: CALL_OW 488
16894: IFFALSE 16993
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
16896: LD_ADDR_VAR 0 4
16900: PUSH
16901: LD_VAR 0 9
16905: PUSH
16906: LD_INT 1
16908: ARRAY
16909: PPUSH
16910: LD_VAR 0 9
16914: PUSH
16915: LD_INT 2
16917: ARRAY
16918: PPUSH
16919: CALL_OW 546
16923: ST_TO_ADDR
// if hex [ 1 ] then
16924: LD_VAR 0 4
16928: PUSH
16929: LD_INT 1
16931: ARRAY
16932: IFFALSE 16936
// continue ;
16934: GO 16824
// h := hex [ 2 ] ;
16936: LD_ADDR_VAR 0 13
16940: PUSH
16941: LD_VAR 0 4
16945: PUSH
16946: LD_INT 2
16948: ARRAY
16949: ST_TO_ADDR
// if h + 7 < height then
16950: LD_VAR 0 13
16954: PUSH
16955: LD_INT 7
16957: PLUS
16958: PUSH
16959: LD_VAR 0 15
16963: LESS
16964: IFFALSE 16993
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
16966: LD_ADDR_VAR 0 18
16970: PUSH
16971: LD_INT 7
16973: PUSH
16974: LD_INT 28
16976: PUSH
16977: LD_INT 45
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: LIST
16984: PUSH
16985: LD_VAR 0 12
16989: ARRAY
16990: ST_TO_ADDR
// break ;
16991: GO 16995
// end ; end ; end ;
16993: GO 16824
16995: POP
16996: POP
// end ; if not weapon then
16997: LD_VAR 0 18
17001: NOT
17002: IFFALSE 17062
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
17004: LD_ADDR_VAR 0 5
17008: PUSH
17009: LD_VAR 0 5
17013: PUSH
17014: LD_INT 11
17016: PUSH
17017: LD_INT 30
17019: PUSH
17020: LD_INT 49
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: LIST
17027: DIFF
17028: ST_TO_ADDR
// if not list then
17029: LD_VAR 0 5
17033: NOT
17034: IFFALSE 17038
// exit ;
17036: GO 17180
// weapon := list [ rand ( 1 , list ) ] ;
17038: LD_ADDR_VAR 0 18
17042: PUSH
17043: LD_VAR 0 5
17047: PUSH
17048: LD_INT 1
17050: PPUSH
17051: LD_VAR 0 5
17055: PPUSH
17056: CALL_OW 12
17060: ARRAY
17061: ST_TO_ADDR
// end ; if weapon then
17062: LD_VAR 0 18
17066: IFFALSE 17180
// begin tmp := CostOfWeapon ( weapon ) ;
17068: LD_ADDR_VAR 0 14
17072: PUSH
17073: LD_VAR 0 18
17077: PPUSH
17078: CALL_OW 451
17082: ST_TO_ADDR
// j := GetBase ( tower ) ;
17083: LD_ADDR_VAR 0 9
17087: PUSH
17088: LD_VAR 0 1
17092: PPUSH
17093: CALL_OW 274
17097: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
17098: LD_VAR 0 9
17102: PPUSH
17103: LD_INT 1
17105: PPUSH
17106: CALL_OW 275
17110: PUSH
17111: LD_VAR 0 14
17115: PUSH
17116: LD_INT 1
17118: ARRAY
17119: GREATEREQUAL
17120: PUSH
17121: LD_VAR 0 9
17125: PPUSH
17126: LD_INT 2
17128: PPUSH
17129: CALL_OW 275
17133: PUSH
17134: LD_VAR 0 14
17138: PUSH
17139: LD_INT 2
17141: ARRAY
17142: GREATEREQUAL
17143: AND
17144: PUSH
17145: LD_VAR 0 9
17149: PPUSH
17150: LD_INT 3
17152: PPUSH
17153: CALL_OW 275
17157: PUSH
17158: LD_VAR 0 14
17162: PUSH
17163: LD_INT 3
17165: ARRAY
17166: GREATEREQUAL
17167: AND
17168: IFFALSE 17180
// result := weapon ;
17170: LD_ADDR_VAR 0 3
17174: PUSH
17175: LD_VAR 0 18
17179: ST_TO_ADDR
// end ; end ;
17180: LD_VAR 0 3
17184: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
17185: LD_INT 0
17187: PPUSH
17188: PPUSH
// result := true ;
17189: LD_ADDR_VAR 0 3
17193: PUSH
17194: LD_INT 1
17196: ST_TO_ADDR
// if array1 = array2 then
17197: LD_VAR 0 1
17201: PUSH
17202: LD_VAR 0 2
17206: EQUAL
17207: IFFALSE 17267
// begin for i = 1 to array1 do
17209: LD_ADDR_VAR 0 4
17213: PUSH
17214: DOUBLE
17215: LD_INT 1
17217: DEC
17218: ST_TO_ADDR
17219: LD_VAR 0 1
17223: PUSH
17224: FOR_TO
17225: IFFALSE 17263
// if array1 [ i ] <> array2 [ i ] then
17227: LD_VAR 0 1
17231: PUSH
17232: LD_VAR 0 4
17236: ARRAY
17237: PUSH
17238: LD_VAR 0 2
17242: PUSH
17243: LD_VAR 0 4
17247: ARRAY
17248: NONEQUAL
17249: IFFALSE 17261
// begin result := false ;
17251: LD_ADDR_VAR 0 3
17255: PUSH
17256: LD_INT 0
17258: ST_TO_ADDR
// break ;
17259: GO 17263
// end ;
17261: GO 17224
17263: POP
17264: POP
// end else
17265: GO 17275
// result := false ;
17267: LD_ADDR_VAR 0 3
17271: PUSH
17272: LD_INT 0
17274: ST_TO_ADDR
// end ;
17275: LD_VAR 0 3
17279: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
17280: LD_INT 0
17282: PPUSH
17283: PPUSH
// if not array1 or not array2 then
17284: LD_VAR 0 1
17288: NOT
17289: PUSH
17290: LD_VAR 0 2
17294: NOT
17295: OR
17296: IFFALSE 17300
// exit ;
17298: GO 17364
// result := true ;
17300: LD_ADDR_VAR 0 3
17304: PUSH
17305: LD_INT 1
17307: ST_TO_ADDR
// for i = 1 to array1 do
17308: LD_ADDR_VAR 0 4
17312: PUSH
17313: DOUBLE
17314: LD_INT 1
17316: DEC
17317: ST_TO_ADDR
17318: LD_VAR 0 1
17322: PUSH
17323: FOR_TO
17324: IFFALSE 17362
// if array1 [ i ] <> array2 [ i ] then
17326: LD_VAR 0 1
17330: PUSH
17331: LD_VAR 0 4
17335: ARRAY
17336: PUSH
17337: LD_VAR 0 2
17341: PUSH
17342: LD_VAR 0 4
17346: ARRAY
17347: NONEQUAL
17348: IFFALSE 17360
// begin result := false ;
17350: LD_ADDR_VAR 0 3
17354: PUSH
17355: LD_INT 0
17357: ST_TO_ADDR
// break ;
17358: GO 17362
// end ;
17360: GO 17323
17362: POP
17363: POP
// end ;
17364: LD_VAR 0 3
17368: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
17369: LD_INT 0
17371: PPUSH
17372: PPUSH
17373: PPUSH
// pom := GetBase ( fac ) ;
17374: LD_ADDR_VAR 0 5
17378: PUSH
17379: LD_VAR 0 1
17383: PPUSH
17384: CALL_OW 274
17388: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
17389: LD_ADDR_VAR 0 4
17393: PUSH
17394: LD_VAR 0 2
17398: PUSH
17399: LD_INT 1
17401: ARRAY
17402: PPUSH
17403: LD_VAR 0 2
17407: PUSH
17408: LD_INT 2
17410: ARRAY
17411: PPUSH
17412: LD_VAR 0 2
17416: PUSH
17417: LD_INT 3
17419: ARRAY
17420: PPUSH
17421: LD_VAR 0 2
17425: PUSH
17426: LD_INT 4
17428: ARRAY
17429: PPUSH
17430: CALL_OW 449
17434: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
17435: LD_ADDR_VAR 0 3
17439: PUSH
17440: LD_VAR 0 5
17444: PPUSH
17445: LD_INT 1
17447: PPUSH
17448: CALL_OW 275
17452: PUSH
17453: LD_VAR 0 4
17457: PUSH
17458: LD_INT 1
17460: ARRAY
17461: GREATEREQUAL
17462: PUSH
17463: LD_VAR 0 5
17467: PPUSH
17468: LD_INT 2
17470: PPUSH
17471: CALL_OW 275
17475: PUSH
17476: LD_VAR 0 4
17480: PUSH
17481: LD_INT 2
17483: ARRAY
17484: GREATEREQUAL
17485: AND
17486: PUSH
17487: LD_VAR 0 5
17491: PPUSH
17492: LD_INT 3
17494: PPUSH
17495: CALL_OW 275
17499: PUSH
17500: LD_VAR 0 4
17504: PUSH
17505: LD_INT 3
17507: ARRAY
17508: GREATEREQUAL
17509: AND
17510: ST_TO_ADDR
// end ;
17511: LD_VAR 0 3
17515: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
17516: LD_INT 0
17518: PPUSH
17519: PPUSH
17520: PPUSH
17521: PPUSH
// pom := GetBase ( building ) ;
17522: LD_ADDR_VAR 0 3
17526: PUSH
17527: LD_VAR 0 1
17531: PPUSH
17532: CALL_OW 274
17536: ST_TO_ADDR
// if not pom then
17537: LD_VAR 0 3
17541: NOT
17542: IFFALSE 17546
// exit ;
17544: GO 17716
// btype := GetBType ( building ) ;
17546: LD_ADDR_VAR 0 5
17550: PUSH
17551: LD_VAR 0 1
17555: PPUSH
17556: CALL_OW 266
17560: ST_TO_ADDR
// if btype = b_armoury then
17561: LD_VAR 0 5
17565: PUSH
17566: LD_INT 4
17568: EQUAL
17569: IFFALSE 17579
// btype := b_barracks ;
17571: LD_ADDR_VAR 0 5
17575: PUSH
17576: LD_INT 5
17578: ST_TO_ADDR
// if btype = b_depot then
17579: LD_VAR 0 5
17583: PUSH
17584: LD_INT 0
17586: EQUAL
17587: IFFALSE 17597
// btype := b_warehouse ;
17589: LD_ADDR_VAR 0 5
17593: PUSH
17594: LD_INT 1
17596: ST_TO_ADDR
// if btype = b_workshop then
17597: LD_VAR 0 5
17601: PUSH
17602: LD_INT 2
17604: EQUAL
17605: IFFALSE 17615
// btype := b_factory ;
17607: LD_ADDR_VAR 0 5
17611: PUSH
17612: LD_INT 3
17614: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
17615: LD_ADDR_VAR 0 4
17619: PUSH
17620: LD_VAR 0 5
17624: PPUSH
17625: LD_VAR 0 1
17629: PPUSH
17630: CALL_OW 248
17634: PPUSH
17635: CALL_OW 450
17639: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
17640: LD_ADDR_VAR 0 2
17644: PUSH
17645: LD_VAR 0 3
17649: PPUSH
17650: LD_INT 1
17652: PPUSH
17653: CALL_OW 275
17657: PUSH
17658: LD_VAR 0 4
17662: PUSH
17663: LD_INT 1
17665: ARRAY
17666: GREATEREQUAL
17667: PUSH
17668: LD_VAR 0 3
17672: PPUSH
17673: LD_INT 2
17675: PPUSH
17676: CALL_OW 275
17680: PUSH
17681: LD_VAR 0 4
17685: PUSH
17686: LD_INT 2
17688: ARRAY
17689: GREATEREQUAL
17690: AND
17691: PUSH
17692: LD_VAR 0 3
17696: PPUSH
17697: LD_INT 3
17699: PPUSH
17700: CALL_OW 275
17704: PUSH
17705: LD_VAR 0 4
17709: PUSH
17710: LD_INT 3
17712: ARRAY
17713: GREATEREQUAL
17714: AND
17715: ST_TO_ADDR
// end ;
17716: LD_VAR 0 2
17720: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
17721: LD_INT 0
17723: PPUSH
17724: PPUSH
17725: PPUSH
// pom := GetBase ( building ) ;
17726: LD_ADDR_VAR 0 4
17730: PUSH
17731: LD_VAR 0 1
17735: PPUSH
17736: CALL_OW 274
17740: ST_TO_ADDR
// if not pom then
17741: LD_VAR 0 4
17745: NOT
17746: IFFALSE 17750
// exit ;
17748: GO 17851
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
17750: LD_ADDR_VAR 0 5
17754: PUSH
17755: LD_VAR 0 2
17759: PPUSH
17760: LD_VAR 0 1
17764: PPUSH
17765: CALL_OW 248
17769: PPUSH
17770: CALL_OW 450
17774: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
17775: LD_ADDR_VAR 0 3
17779: PUSH
17780: LD_VAR 0 4
17784: PPUSH
17785: LD_INT 1
17787: PPUSH
17788: CALL_OW 275
17792: PUSH
17793: LD_VAR 0 5
17797: PUSH
17798: LD_INT 1
17800: ARRAY
17801: GREATEREQUAL
17802: PUSH
17803: LD_VAR 0 4
17807: PPUSH
17808: LD_INT 2
17810: PPUSH
17811: CALL_OW 275
17815: PUSH
17816: LD_VAR 0 5
17820: PUSH
17821: LD_INT 2
17823: ARRAY
17824: GREATEREQUAL
17825: AND
17826: PUSH
17827: LD_VAR 0 4
17831: PPUSH
17832: LD_INT 3
17834: PPUSH
17835: CALL_OW 275
17839: PUSH
17840: LD_VAR 0 5
17844: PUSH
17845: LD_INT 3
17847: ARRAY
17848: GREATEREQUAL
17849: AND
17850: ST_TO_ADDR
// end ;
17851: LD_VAR 0 3
17855: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
17856: LD_INT 0
17858: PPUSH
17859: PPUSH
17860: PPUSH
17861: PPUSH
17862: PPUSH
17863: PPUSH
17864: PPUSH
17865: PPUSH
17866: PPUSH
17867: PPUSH
17868: PPUSH
// result := false ;
17869: LD_ADDR_VAR 0 8
17873: PUSH
17874: LD_INT 0
17876: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
17877: LD_VAR 0 5
17881: NOT
17882: PUSH
17883: LD_VAR 0 1
17887: NOT
17888: OR
17889: PUSH
17890: LD_VAR 0 2
17894: NOT
17895: OR
17896: PUSH
17897: LD_VAR 0 3
17901: NOT
17902: OR
17903: IFFALSE 17907
// exit ;
17905: GO 18721
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
17907: LD_ADDR_VAR 0 14
17911: PUSH
17912: LD_VAR 0 1
17916: PPUSH
17917: LD_VAR 0 2
17921: PPUSH
17922: LD_VAR 0 3
17926: PPUSH
17927: LD_VAR 0 4
17931: PPUSH
17932: LD_VAR 0 5
17936: PUSH
17937: LD_INT 1
17939: ARRAY
17940: PPUSH
17941: CALL_OW 248
17945: PPUSH
17946: LD_INT 0
17948: PPUSH
17949: CALL 19958 0 6
17953: ST_TO_ADDR
// if not hexes then
17954: LD_VAR 0 14
17958: NOT
17959: IFFALSE 17963
// exit ;
17961: GO 18721
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17963: LD_ADDR_VAR 0 17
17967: PUSH
17968: LD_VAR 0 5
17972: PPUSH
17973: LD_INT 22
17975: PUSH
17976: LD_VAR 0 13
17980: PPUSH
17981: CALL_OW 255
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: LD_INT 2
17992: PUSH
17993: LD_INT 30
17995: PUSH
17996: LD_INT 0
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 30
18005: PUSH
18006: LD_INT 1
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: LIST
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PPUSH
18022: CALL_OW 72
18026: ST_TO_ADDR
// for i = 1 to hexes do
18027: LD_ADDR_VAR 0 9
18031: PUSH
18032: DOUBLE
18033: LD_INT 1
18035: DEC
18036: ST_TO_ADDR
18037: LD_VAR 0 14
18041: PUSH
18042: FOR_TO
18043: IFFALSE 18719
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18045: LD_ADDR_VAR 0 13
18049: PUSH
18050: LD_VAR 0 14
18054: PUSH
18055: LD_VAR 0 9
18059: ARRAY
18060: PUSH
18061: LD_INT 1
18063: ARRAY
18064: PPUSH
18065: LD_VAR 0 14
18069: PUSH
18070: LD_VAR 0 9
18074: ARRAY
18075: PUSH
18076: LD_INT 2
18078: ARRAY
18079: PPUSH
18080: CALL_OW 428
18084: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
18085: LD_VAR 0 14
18089: PUSH
18090: LD_VAR 0 9
18094: ARRAY
18095: PUSH
18096: LD_INT 1
18098: ARRAY
18099: PPUSH
18100: LD_VAR 0 14
18104: PUSH
18105: LD_VAR 0 9
18109: ARRAY
18110: PUSH
18111: LD_INT 2
18113: ARRAY
18114: PPUSH
18115: CALL_OW 351
18119: PUSH
18120: LD_VAR 0 14
18124: PUSH
18125: LD_VAR 0 9
18129: ARRAY
18130: PUSH
18131: LD_INT 1
18133: ARRAY
18134: PPUSH
18135: LD_VAR 0 14
18139: PUSH
18140: LD_VAR 0 9
18144: ARRAY
18145: PUSH
18146: LD_INT 2
18148: ARRAY
18149: PPUSH
18150: CALL_OW 488
18154: NOT
18155: OR
18156: PUSH
18157: LD_VAR 0 13
18161: PPUSH
18162: CALL_OW 247
18166: PUSH
18167: LD_INT 3
18169: EQUAL
18170: OR
18171: IFFALSE 18177
// exit ;
18173: POP
18174: POP
18175: GO 18721
// if not tmp then
18177: LD_VAR 0 13
18181: NOT
18182: IFFALSE 18186
// continue ;
18184: GO 18042
// result := true ;
18186: LD_ADDR_VAR 0 8
18190: PUSH
18191: LD_INT 1
18193: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
18194: LD_VAR 0 6
18198: PUSH
18199: LD_VAR 0 13
18203: PPUSH
18204: CALL_OW 247
18208: PUSH
18209: LD_INT 2
18211: EQUAL
18212: AND
18213: PUSH
18214: LD_VAR 0 13
18218: PPUSH
18219: CALL_OW 263
18223: PUSH
18224: LD_INT 1
18226: EQUAL
18227: AND
18228: IFFALSE 18392
// begin if IsDrivenBy ( tmp ) then
18230: LD_VAR 0 13
18234: PPUSH
18235: CALL_OW 311
18239: IFFALSE 18243
// continue ;
18241: GO 18042
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
18243: LD_VAR 0 6
18247: PPUSH
18248: LD_INT 3
18250: PUSH
18251: LD_INT 60
18253: PUSH
18254: EMPTY
18255: LIST
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 3
18263: PUSH
18264: LD_INT 55
18266: PUSH
18267: EMPTY
18268: LIST
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PPUSH
18278: CALL_OW 72
18282: IFFALSE 18390
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
18284: LD_ADDR_VAR 0 18
18288: PUSH
18289: LD_VAR 0 6
18293: PPUSH
18294: LD_INT 3
18296: PUSH
18297: LD_INT 60
18299: PUSH
18300: EMPTY
18301: LIST
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: PUSH
18307: LD_INT 3
18309: PUSH
18310: LD_INT 55
18312: PUSH
18313: EMPTY
18314: LIST
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PPUSH
18324: CALL_OW 72
18328: PUSH
18329: LD_INT 1
18331: ARRAY
18332: ST_TO_ADDR
// if IsInUnit ( driver ) then
18333: LD_VAR 0 18
18337: PPUSH
18338: CALL_OW 310
18342: IFFALSE 18353
// ComExit ( driver ) ;
18344: LD_VAR 0 18
18348: PPUSH
18349: CALL 43086 0 1
// AddComEnterUnit ( driver , tmp ) ;
18353: LD_VAR 0 18
18357: PPUSH
18358: LD_VAR 0 13
18362: PPUSH
18363: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
18367: LD_VAR 0 18
18371: PPUSH
18372: LD_VAR 0 7
18376: PPUSH
18377: CALL_OW 173
// AddComExitVehicle ( driver ) ;
18381: LD_VAR 0 18
18385: PPUSH
18386: CALL_OW 181
// end ; continue ;
18390: GO 18042
// end ; if not cleaners or not tmp in cleaners then
18392: LD_VAR 0 6
18396: NOT
18397: PUSH
18398: LD_VAR 0 13
18402: PUSH
18403: LD_VAR 0 6
18407: IN
18408: NOT
18409: OR
18410: IFFALSE 18717
// begin if dep then
18412: LD_VAR 0 17
18416: IFFALSE 18552
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
18418: LD_ADDR_VAR 0 16
18422: PUSH
18423: LD_VAR 0 17
18427: PUSH
18428: LD_INT 1
18430: ARRAY
18431: PPUSH
18432: CALL_OW 250
18436: PPUSH
18437: LD_VAR 0 17
18441: PUSH
18442: LD_INT 1
18444: ARRAY
18445: PPUSH
18446: CALL_OW 254
18450: PPUSH
18451: LD_INT 5
18453: PPUSH
18454: CALL_OW 272
18458: PUSH
18459: LD_VAR 0 17
18463: PUSH
18464: LD_INT 1
18466: ARRAY
18467: PPUSH
18468: CALL_OW 251
18472: PPUSH
18473: LD_VAR 0 17
18477: PUSH
18478: LD_INT 1
18480: ARRAY
18481: PPUSH
18482: CALL_OW 254
18486: PPUSH
18487: LD_INT 5
18489: PPUSH
18490: CALL_OW 273
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
18499: LD_VAR 0 16
18503: PUSH
18504: LD_INT 1
18506: ARRAY
18507: PPUSH
18508: LD_VAR 0 16
18512: PUSH
18513: LD_INT 2
18515: ARRAY
18516: PPUSH
18517: CALL_OW 488
18521: IFFALSE 18552
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
18523: LD_VAR 0 13
18527: PPUSH
18528: LD_VAR 0 16
18532: PUSH
18533: LD_INT 1
18535: ARRAY
18536: PPUSH
18537: LD_VAR 0 16
18541: PUSH
18542: LD_INT 2
18544: ARRAY
18545: PPUSH
18546: CALL_OW 111
// continue ;
18550: GO 18042
// end ; end ; r := GetDir ( tmp ) ;
18552: LD_ADDR_VAR 0 15
18556: PUSH
18557: LD_VAR 0 13
18561: PPUSH
18562: CALL_OW 254
18566: ST_TO_ADDR
// if r = 5 then
18567: LD_VAR 0 15
18571: PUSH
18572: LD_INT 5
18574: EQUAL
18575: IFFALSE 18585
// r := 0 ;
18577: LD_ADDR_VAR 0 15
18581: PUSH
18582: LD_INT 0
18584: ST_TO_ADDR
// for j = r to 5 do
18585: LD_ADDR_VAR 0 10
18589: PUSH
18590: DOUBLE
18591: LD_VAR 0 15
18595: DEC
18596: ST_TO_ADDR
18597: LD_INT 5
18599: PUSH
18600: FOR_TO
18601: IFFALSE 18715
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
18603: LD_ADDR_VAR 0 11
18607: PUSH
18608: LD_VAR 0 13
18612: PPUSH
18613: CALL_OW 250
18617: PPUSH
18618: LD_VAR 0 10
18622: PPUSH
18623: LD_INT 2
18625: PPUSH
18626: CALL_OW 272
18630: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
18631: LD_ADDR_VAR 0 12
18635: PUSH
18636: LD_VAR 0 13
18640: PPUSH
18641: CALL_OW 251
18645: PPUSH
18646: LD_VAR 0 10
18650: PPUSH
18651: LD_INT 2
18653: PPUSH
18654: CALL_OW 273
18658: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
18659: LD_VAR 0 11
18663: PPUSH
18664: LD_VAR 0 12
18668: PPUSH
18669: CALL_OW 488
18673: PUSH
18674: LD_VAR 0 11
18678: PPUSH
18679: LD_VAR 0 12
18683: PPUSH
18684: CALL_OW 428
18688: NOT
18689: AND
18690: IFFALSE 18713
// begin ComMoveXY ( tmp , _x , _y ) ;
18692: LD_VAR 0 13
18696: PPUSH
18697: LD_VAR 0 11
18701: PPUSH
18702: LD_VAR 0 12
18706: PPUSH
18707: CALL_OW 111
// break ;
18711: GO 18715
// end ; end ;
18713: GO 18600
18715: POP
18716: POP
// end ; end ;
18717: GO 18042
18719: POP
18720: POP
// end ;
18721: LD_VAR 0 8
18725: RET
// export function BuildingTechInvented ( side , btype ) ; begin
18726: LD_INT 0
18728: PPUSH
// result := true ;
18729: LD_ADDR_VAR 0 3
18733: PUSH
18734: LD_INT 1
18736: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
18737: LD_VAR 0 2
18741: PUSH
18742: LD_INT 24
18744: DOUBLE
18745: EQUAL
18746: IFTRUE 18756
18748: LD_INT 33
18750: DOUBLE
18751: EQUAL
18752: IFTRUE 18756
18754: GO 18781
18756: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
18757: LD_ADDR_VAR 0 3
18761: PUSH
18762: LD_INT 32
18764: PPUSH
18765: LD_VAR 0 1
18769: PPUSH
18770: CALL_OW 321
18774: PUSH
18775: LD_INT 2
18777: EQUAL
18778: ST_TO_ADDR
18779: GO 19101
18781: LD_INT 20
18783: DOUBLE
18784: EQUAL
18785: IFTRUE 18789
18787: GO 18814
18789: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
18790: LD_ADDR_VAR 0 3
18794: PUSH
18795: LD_INT 6
18797: PPUSH
18798: LD_VAR 0 1
18802: PPUSH
18803: CALL_OW 321
18807: PUSH
18808: LD_INT 2
18810: EQUAL
18811: ST_TO_ADDR
18812: GO 19101
18814: LD_INT 22
18816: DOUBLE
18817: EQUAL
18818: IFTRUE 18828
18820: LD_INT 36
18822: DOUBLE
18823: EQUAL
18824: IFTRUE 18828
18826: GO 18853
18828: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
18829: LD_ADDR_VAR 0 3
18833: PUSH
18834: LD_INT 15
18836: PPUSH
18837: LD_VAR 0 1
18841: PPUSH
18842: CALL_OW 321
18846: PUSH
18847: LD_INT 2
18849: EQUAL
18850: ST_TO_ADDR
18851: GO 19101
18853: LD_INT 30
18855: DOUBLE
18856: EQUAL
18857: IFTRUE 18861
18859: GO 18886
18861: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
18862: LD_ADDR_VAR 0 3
18866: PUSH
18867: LD_INT 20
18869: PPUSH
18870: LD_VAR 0 1
18874: PPUSH
18875: CALL_OW 321
18879: PUSH
18880: LD_INT 2
18882: EQUAL
18883: ST_TO_ADDR
18884: GO 19101
18886: LD_INT 28
18888: DOUBLE
18889: EQUAL
18890: IFTRUE 18900
18892: LD_INT 21
18894: DOUBLE
18895: EQUAL
18896: IFTRUE 18900
18898: GO 18925
18900: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
18901: LD_ADDR_VAR 0 3
18905: PUSH
18906: LD_INT 21
18908: PPUSH
18909: LD_VAR 0 1
18913: PPUSH
18914: CALL_OW 321
18918: PUSH
18919: LD_INT 2
18921: EQUAL
18922: ST_TO_ADDR
18923: GO 19101
18925: LD_INT 16
18927: DOUBLE
18928: EQUAL
18929: IFTRUE 18933
18931: GO 18960
18933: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
18934: LD_ADDR_VAR 0 3
18938: PUSH
18939: LD_EXP 89
18943: PPUSH
18944: LD_VAR 0 1
18948: PPUSH
18949: CALL_OW 321
18953: PUSH
18954: LD_INT 2
18956: EQUAL
18957: ST_TO_ADDR
18958: GO 19101
18960: LD_INT 19
18962: DOUBLE
18963: EQUAL
18964: IFTRUE 18974
18966: LD_INT 23
18968: DOUBLE
18969: EQUAL
18970: IFTRUE 18974
18972: GO 19001
18974: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
18975: LD_ADDR_VAR 0 3
18979: PUSH
18980: LD_EXP 88
18984: PPUSH
18985: LD_VAR 0 1
18989: PPUSH
18990: CALL_OW 321
18994: PUSH
18995: LD_INT 2
18997: EQUAL
18998: ST_TO_ADDR
18999: GO 19101
19001: LD_INT 17
19003: DOUBLE
19004: EQUAL
19005: IFTRUE 19009
19007: GO 19034
19009: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
19010: LD_ADDR_VAR 0 3
19014: PUSH
19015: LD_INT 39
19017: PPUSH
19018: LD_VAR 0 1
19022: PPUSH
19023: CALL_OW 321
19027: PUSH
19028: LD_INT 2
19030: EQUAL
19031: ST_TO_ADDR
19032: GO 19101
19034: LD_INT 18
19036: DOUBLE
19037: EQUAL
19038: IFTRUE 19042
19040: GO 19067
19042: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
19043: LD_ADDR_VAR 0 3
19047: PUSH
19048: LD_INT 40
19050: PPUSH
19051: LD_VAR 0 1
19055: PPUSH
19056: CALL_OW 321
19060: PUSH
19061: LD_INT 2
19063: EQUAL
19064: ST_TO_ADDR
19065: GO 19101
19067: LD_INT 27
19069: DOUBLE
19070: EQUAL
19071: IFTRUE 19075
19073: GO 19100
19075: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
19076: LD_ADDR_VAR 0 3
19080: PUSH
19081: LD_INT 35
19083: PPUSH
19084: LD_VAR 0 1
19088: PPUSH
19089: CALL_OW 321
19093: PUSH
19094: LD_INT 2
19096: EQUAL
19097: ST_TO_ADDR
19098: GO 19101
19100: POP
// end ;
19101: LD_VAR 0 3
19105: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
19106: LD_INT 0
19108: PPUSH
19109: PPUSH
19110: PPUSH
19111: PPUSH
19112: PPUSH
19113: PPUSH
19114: PPUSH
19115: PPUSH
19116: PPUSH
19117: PPUSH
19118: PPUSH
// result := false ;
19119: LD_ADDR_VAR 0 6
19123: PUSH
19124: LD_INT 0
19126: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
19127: LD_VAR 0 1
19131: NOT
19132: PUSH
19133: LD_VAR 0 1
19137: PPUSH
19138: CALL_OW 266
19142: PUSH
19143: LD_INT 0
19145: PUSH
19146: LD_INT 1
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: IN
19153: NOT
19154: OR
19155: PUSH
19156: LD_VAR 0 2
19160: NOT
19161: OR
19162: PUSH
19163: LD_VAR 0 5
19167: PUSH
19168: LD_INT 0
19170: PUSH
19171: LD_INT 1
19173: PUSH
19174: LD_INT 2
19176: PUSH
19177: LD_INT 3
19179: PUSH
19180: LD_INT 4
19182: PUSH
19183: LD_INT 5
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: IN
19194: NOT
19195: OR
19196: PUSH
19197: LD_VAR 0 3
19201: PPUSH
19202: LD_VAR 0 4
19206: PPUSH
19207: CALL_OW 488
19211: NOT
19212: OR
19213: IFFALSE 19217
// exit ;
19215: GO 19953
// side := GetSide ( depot ) ;
19217: LD_ADDR_VAR 0 9
19221: PUSH
19222: LD_VAR 0 1
19226: PPUSH
19227: CALL_OW 255
19231: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
19232: LD_VAR 0 9
19236: PPUSH
19237: LD_VAR 0 2
19241: PPUSH
19242: CALL 18726 0 2
19246: NOT
19247: IFFALSE 19251
// exit ;
19249: GO 19953
// pom := GetBase ( depot ) ;
19251: LD_ADDR_VAR 0 10
19255: PUSH
19256: LD_VAR 0 1
19260: PPUSH
19261: CALL_OW 274
19265: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
19266: LD_ADDR_VAR 0 11
19270: PUSH
19271: LD_VAR 0 2
19275: PPUSH
19276: LD_VAR 0 1
19280: PPUSH
19281: CALL_OW 248
19285: PPUSH
19286: CALL_OW 450
19290: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
19291: LD_VAR 0 10
19295: PPUSH
19296: LD_INT 1
19298: PPUSH
19299: CALL_OW 275
19303: PUSH
19304: LD_VAR 0 11
19308: PUSH
19309: LD_INT 1
19311: ARRAY
19312: GREATEREQUAL
19313: PUSH
19314: LD_VAR 0 10
19318: PPUSH
19319: LD_INT 2
19321: PPUSH
19322: CALL_OW 275
19326: PUSH
19327: LD_VAR 0 11
19331: PUSH
19332: LD_INT 2
19334: ARRAY
19335: GREATEREQUAL
19336: AND
19337: PUSH
19338: LD_VAR 0 10
19342: PPUSH
19343: LD_INT 3
19345: PPUSH
19346: CALL_OW 275
19350: PUSH
19351: LD_VAR 0 11
19355: PUSH
19356: LD_INT 3
19358: ARRAY
19359: GREATEREQUAL
19360: AND
19361: NOT
19362: IFFALSE 19366
// exit ;
19364: GO 19953
// if GetBType ( depot ) = b_depot then
19366: LD_VAR 0 1
19370: PPUSH
19371: CALL_OW 266
19375: PUSH
19376: LD_INT 0
19378: EQUAL
19379: IFFALSE 19391
// dist := 28 else
19381: LD_ADDR_VAR 0 14
19385: PUSH
19386: LD_INT 28
19388: ST_TO_ADDR
19389: GO 19399
// dist := 36 ;
19391: LD_ADDR_VAR 0 14
19395: PUSH
19396: LD_INT 36
19398: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
19399: LD_VAR 0 1
19403: PPUSH
19404: LD_VAR 0 3
19408: PPUSH
19409: LD_VAR 0 4
19413: PPUSH
19414: CALL_OW 297
19418: PUSH
19419: LD_VAR 0 14
19423: GREATER
19424: IFFALSE 19428
// exit ;
19426: GO 19953
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
19428: LD_ADDR_VAR 0 12
19432: PUSH
19433: LD_VAR 0 2
19437: PPUSH
19438: LD_VAR 0 3
19442: PPUSH
19443: LD_VAR 0 4
19447: PPUSH
19448: LD_VAR 0 5
19452: PPUSH
19453: LD_VAR 0 1
19457: PPUSH
19458: CALL_OW 248
19462: PPUSH
19463: LD_INT 0
19465: PPUSH
19466: CALL 19958 0 6
19470: ST_TO_ADDR
// if not hexes then
19471: LD_VAR 0 12
19475: NOT
19476: IFFALSE 19480
// exit ;
19478: GO 19953
// hex := GetHexInfo ( x , y ) ;
19480: LD_ADDR_VAR 0 15
19484: PUSH
19485: LD_VAR 0 3
19489: PPUSH
19490: LD_VAR 0 4
19494: PPUSH
19495: CALL_OW 546
19499: ST_TO_ADDR
// if hex [ 1 ] then
19500: LD_VAR 0 15
19504: PUSH
19505: LD_INT 1
19507: ARRAY
19508: IFFALSE 19512
// exit ;
19510: GO 19953
// height := hex [ 2 ] ;
19512: LD_ADDR_VAR 0 13
19516: PUSH
19517: LD_VAR 0 15
19521: PUSH
19522: LD_INT 2
19524: ARRAY
19525: ST_TO_ADDR
// for i = 1 to hexes do
19526: LD_ADDR_VAR 0 7
19530: PUSH
19531: DOUBLE
19532: LD_INT 1
19534: DEC
19535: ST_TO_ADDR
19536: LD_VAR 0 12
19540: PUSH
19541: FOR_TO
19542: IFFALSE 19872
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
19544: LD_VAR 0 12
19548: PUSH
19549: LD_VAR 0 7
19553: ARRAY
19554: PUSH
19555: LD_INT 1
19557: ARRAY
19558: PPUSH
19559: LD_VAR 0 12
19563: PUSH
19564: LD_VAR 0 7
19568: ARRAY
19569: PUSH
19570: LD_INT 2
19572: ARRAY
19573: PPUSH
19574: CALL_OW 488
19578: NOT
19579: PUSH
19580: LD_VAR 0 12
19584: PUSH
19585: LD_VAR 0 7
19589: ARRAY
19590: PUSH
19591: LD_INT 1
19593: ARRAY
19594: PPUSH
19595: LD_VAR 0 12
19599: PUSH
19600: LD_VAR 0 7
19604: ARRAY
19605: PUSH
19606: LD_INT 2
19608: ARRAY
19609: PPUSH
19610: CALL_OW 428
19614: PUSH
19615: LD_INT 0
19617: GREATER
19618: OR
19619: PUSH
19620: LD_VAR 0 12
19624: PUSH
19625: LD_VAR 0 7
19629: ARRAY
19630: PUSH
19631: LD_INT 1
19633: ARRAY
19634: PPUSH
19635: LD_VAR 0 12
19639: PUSH
19640: LD_VAR 0 7
19644: ARRAY
19645: PUSH
19646: LD_INT 2
19648: ARRAY
19649: PPUSH
19650: CALL_OW 351
19654: OR
19655: IFFALSE 19661
// exit ;
19657: POP
19658: POP
19659: GO 19953
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
19661: LD_ADDR_VAR 0 8
19665: PUSH
19666: LD_VAR 0 12
19670: PUSH
19671: LD_VAR 0 7
19675: ARRAY
19676: PUSH
19677: LD_INT 1
19679: ARRAY
19680: PPUSH
19681: LD_VAR 0 12
19685: PUSH
19686: LD_VAR 0 7
19690: ARRAY
19691: PUSH
19692: LD_INT 2
19694: ARRAY
19695: PPUSH
19696: CALL_OW 546
19700: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
19701: LD_VAR 0 8
19705: PUSH
19706: LD_INT 1
19708: ARRAY
19709: PUSH
19710: LD_VAR 0 8
19714: PUSH
19715: LD_INT 2
19717: ARRAY
19718: PUSH
19719: LD_VAR 0 13
19723: PUSH
19724: LD_INT 2
19726: PLUS
19727: GREATER
19728: OR
19729: PUSH
19730: LD_VAR 0 8
19734: PUSH
19735: LD_INT 2
19737: ARRAY
19738: PUSH
19739: LD_VAR 0 13
19743: PUSH
19744: LD_INT 2
19746: MINUS
19747: LESS
19748: OR
19749: PUSH
19750: LD_VAR 0 8
19754: PUSH
19755: LD_INT 3
19757: ARRAY
19758: PUSH
19759: LD_INT 0
19761: PUSH
19762: LD_INT 8
19764: PUSH
19765: LD_INT 9
19767: PUSH
19768: LD_INT 10
19770: PUSH
19771: LD_INT 11
19773: PUSH
19774: LD_INT 12
19776: PUSH
19777: LD_INT 13
19779: PUSH
19780: LD_INT 16
19782: PUSH
19783: LD_INT 17
19785: PUSH
19786: LD_INT 18
19788: PUSH
19789: LD_INT 19
19791: PUSH
19792: LD_INT 20
19794: PUSH
19795: LD_INT 21
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: IN
19813: NOT
19814: OR
19815: PUSH
19816: LD_VAR 0 8
19820: PUSH
19821: LD_INT 5
19823: ARRAY
19824: NOT
19825: OR
19826: PUSH
19827: LD_VAR 0 8
19831: PUSH
19832: LD_INT 6
19834: ARRAY
19835: PUSH
19836: LD_INT 1
19838: PUSH
19839: LD_INT 2
19841: PUSH
19842: LD_INT 7
19844: PUSH
19845: LD_INT 9
19847: PUSH
19848: LD_INT 10
19850: PUSH
19851: LD_INT 11
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: IN
19862: NOT
19863: OR
19864: IFFALSE 19870
// exit ;
19866: POP
19867: POP
19868: GO 19953
// end ;
19870: GO 19541
19872: POP
19873: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
19874: LD_VAR 0 9
19878: PPUSH
19879: LD_VAR 0 3
19883: PPUSH
19884: LD_VAR 0 4
19888: PPUSH
19889: LD_INT 20
19891: PPUSH
19892: CALL 11899 0 4
19896: PUSH
19897: LD_INT 4
19899: ARRAY
19900: IFFALSE 19904
// exit ;
19902: GO 19953
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
19904: LD_VAR 0 2
19908: PUSH
19909: LD_INT 29
19911: PUSH
19912: LD_INT 30
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: IN
19919: PUSH
19920: LD_VAR 0 3
19924: PPUSH
19925: LD_VAR 0 4
19929: PPUSH
19930: LD_VAR 0 9
19934: PPUSH
19935: CALL_OW 440
19939: NOT
19940: AND
19941: IFFALSE 19945
// exit ;
19943: GO 19953
// result := true ;
19945: LD_ADDR_VAR 0 6
19949: PUSH
19950: LD_INT 1
19952: ST_TO_ADDR
// end ;
19953: LD_VAR 0 6
19957: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
19958: LD_INT 0
19960: PPUSH
19961: PPUSH
19962: PPUSH
19963: PPUSH
19964: PPUSH
19965: PPUSH
19966: PPUSH
19967: PPUSH
19968: PPUSH
19969: PPUSH
19970: PPUSH
19971: PPUSH
19972: PPUSH
19973: PPUSH
19974: PPUSH
19975: PPUSH
19976: PPUSH
19977: PPUSH
19978: PPUSH
19979: PPUSH
19980: PPUSH
19981: PPUSH
19982: PPUSH
19983: PPUSH
19984: PPUSH
19985: PPUSH
19986: PPUSH
19987: PPUSH
19988: PPUSH
19989: PPUSH
19990: PPUSH
19991: PPUSH
19992: PPUSH
19993: PPUSH
19994: PPUSH
19995: PPUSH
19996: PPUSH
19997: PPUSH
19998: PPUSH
19999: PPUSH
20000: PPUSH
20001: PPUSH
20002: PPUSH
20003: PPUSH
20004: PPUSH
20005: PPUSH
20006: PPUSH
20007: PPUSH
20008: PPUSH
20009: PPUSH
20010: PPUSH
20011: PPUSH
20012: PPUSH
20013: PPUSH
20014: PPUSH
20015: PPUSH
20016: PPUSH
20017: PPUSH
// result = [ ] ;
20018: LD_ADDR_VAR 0 7
20022: PUSH
20023: EMPTY
20024: ST_TO_ADDR
// temp_list = [ ] ;
20025: LD_ADDR_VAR 0 9
20029: PUSH
20030: EMPTY
20031: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
20032: LD_VAR 0 4
20036: PUSH
20037: LD_INT 0
20039: PUSH
20040: LD_INT 1
20042: PUSH
20043: LD_INT 2
20045: PUSH
20046: LD_INT 3
20048: PUSH
20049: LD_INT 4
20051: PUSH
20052: LD_INT 5
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: IN
20063: NOT
20064: PUSH
20065: LD_VAR 0 1
20069: PUSH
20070: LD_INT 0
20072: PUSH
20073: LD_INT 1
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: IN
20080: PUSH
20081: LD_VAR 0 5
20085: PUSH
20086: LD_INT 1
20088: PUSH
20089: LD_INT 2
20091: PUSH
20092: LD_INT 3
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: LIST
20099: IN
20100: NOT
20101: AND
20102: OR
20103: IFFALSE 20107
// exit ;
20105: GO 38498
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
20107: LD_VAR 0 1
20111: PUSH
20112: LD_INT 6
20114: PUSH
20115: LD_INT 7
20117: PUSH
20118: LD_INT 8
20120: PUSH
20121: LD_INT 13
20123: PUSH
20124: LD_INT 12
20126: PUSH
20127: LD_INT 15
20129: PUSH
20130: LD_INT 11
20132: PUSH
20133: LD_INT 14
20135: PUSH
20136: LD_INT 10
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: IN
20150: IFFALSE 20160
// btype = b_lab ;
20152: LD_ADDR_VAR 0 1
20156: PUSH
20157: LD_INT 6
20159: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
20160: LD_VAR 0 6
20164: PUSH
20165: LD_INT 0
20167: PUSH
20168: LD_INT 1
20170: PUSH
20171: LD_INT 2
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: LIST
20178: IN
20179: NOT
20180: PUSH
20181: LD_VAR 0 1
20185: PUSH
20186: LD_INT 0
20188: PUSH
20189: LD_INT 1
20191: PUSH
20192: LD_INT 2
20194: PUSH
20195: LD_INT 3
20197: PUSH
20198: LD_INT 6
20200: PUSH
20201: LD_INT 36
20203: PUSH
20204: LD_INT 4
20206: PUSH
20207: LD_INT 5
20209: PUSH
20210: LD_INT 31
20212: PUSH
20213: LD_INT 32
20215: PUSH
20216: LD_INT 33
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: IN
20232: NOT
20233: PUSH
20234: LD_VAR 0 6
20238: PUSH
20239: LD_INT 1
20241: EQUAL
20242: AND
20243: OR
20244: PUSH
20245: LD_VAR 0 1
20249: PUSH
20250: LD_INT 2
20252: PUSH
20253: LD_INT 3
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: IN
20260: NOT
20261: PUSH
20262: LD_VAR 0 6
20266: PUSH
20267: LD_INT 2
20269: EQUAL
20270: AND
20271: OR
20272: IFFALSE 20282
// mode = 0 ;
20274: LD_ADDR_VAR 0 6
20278: PUSH
20279: LD_INT 0
20281: ST_TO_ADDR
// case mode of 0 :
20282: LD_VAR 0 6
20286: PUSH
20287: LD_INT 0
20289: DOUBLE
20290: EQUAL
20291: IFTRUE 20295
20293: GO 31748
20295: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
20296: LD_ADDR_VAR 0 11
20300: PUSH
20301: LD_INT 0
20303: PUSH
20304: LD_INT 0
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: LD_INT 0
20313: PUSH
20314: LD_INT 1
20316: NEG
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 1
20324: PUSH
20325: LD_INT 0
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 1
20334: PUSH
20335: LD_INT 1
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 0
20344: PUSH
20345: LD_INT 1
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 1
20354: NEG
20355: PUSH
20356: LD_INT 0
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 1
20365: NEG
20366: PUSH
20367: LD_INT 1
20369: NEG
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 1
20377: NEG
20378: PUSH
20379: LD_INT 2
20381: NEG
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 0
20389: PUSH
20390: LD_INT 2
20392: NEG
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 1
20400: PUSH
20401: LD_INT 1
20403: NEG
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 1
20411: PUSH
20412: LD_INT 2
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 0
20421: PUSH
20422: LD_INT 2
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 1
20431: NEG
20432: PUSH
20433: LD_INT 1
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 1
20442: PUSH
20443: LD_INT 3
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 0
20452: PUSH
20453: LD_INT 3
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 1
20462: NEG
20463: PUSH
20464: LD_INT 2
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
20489: LD_ADDR_VAR 0 12
20493: PUSH
20494: LD_INT 0
20496: PUSH
20497: LD_INT 0
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 0
20506: PUSH
20507: LD_INT 1
20509: NEG
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 1
20517: PUSH
20518: LD_INT 0
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 1
20527: PUSH
20528: LD_INT 1
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 0
20537: PUSH
20538: LD_INT 1
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: LD_INT 1
20547: NEG
20548: PUSH
20549: LD_INT 0
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 1
20558: NEG
20559: PUSH
20560: LD_INT 1
20562: NEG
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 1
20570: PUSH
20571: LD_INT 1
20573: NEG
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 2
20581: PUSH
20582: LD_INT 0
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 2
20591: PUSH
20592: LD_INT 1
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 1
20601: NEG
20602: PUSH
20603: LD_INT 1
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 2
20612: NEG
20613: PUSH
20614: LD_INT 0
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: LD_INT 2
20623: NEG
20624: PUSH
20625: LD_INT 1
20627: NEG
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 2
20635: NEG
20636: PUSH
20637: LD_INT 1
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PUSH
20644: LD_INT 3
20646: NEG
20647: PUSH
20648: LD_INT 0
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 3
20657: NEG
20658: PUSH
20659: LD_INT 1
20661: NEG
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
20685: LD_ADDR_VAR 0 13
20689: PUSH
20690: LD_INT 0
20692: PUSH
20693: LD_INT 0
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 0
20702: PUSH
20703: LD_INT 1
20705: NEG
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 1
20713: PUSH
20714: LD_INT 0
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 1
20723: PUSH
20724: LD_INT 1
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 0
20733: PUSH
20734: LD_INT 1
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PUSH
20741: LD_INT 1
20743: NEG
20744: PUSH
20745: LD_INT 0
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 1
20754: NEG
20755: PUSH
20756: LD_INT 1
20758: NEG
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 1
20766: NEG
20767: PUSH
20768: LD_INT 2
20770: NEG
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 2
20778: PUSH
20779: LD_INT 1
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 2
20788: PUSH
20789: LD_INT 2
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: LD_INT 2
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 2
20808: NEG
20809: PUSH
20810: LD_INT 1
20812: NEG
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 2
20820: NEG
20821: PUSH
20822: LD_INT 2
20824: NEG
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 2
20832: NEG
20833: PUSH
20834: LD_INT 3
20836: NEG
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 3
20844: NEG
20845: PUSH
20846: LD_INT 2
20848: NEG
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 3
20856: NEG
20857: PUSH
20858: LD_INT 3
20860: NEG
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
20884: LD_ADDR_VAR 0 14
20888: PUSH
20889: LD_INT 0
20891: PUSH
20892: LD_INT 0
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 0
20901: PUSH
20902: LD_INT 1
20904: NEG
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 1
20912: PUSH
20913: LD_INT 0
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_INT 1
20922: PUSH
20923: LD_INT 1
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 0
20932: PUSH
20933: LD_INT 1
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: LD_INT 1
20942: NEG
20943: PUSH
20944: LD_INT 0
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 1
20953: NEG
20954: PUSH
20955: LD_INT 1
20957: NEG
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 1
20965: NEG
20966: PUSH
20967: LD_INT 2
20969: NEG
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 0
20977: PUSH
20978: LD_INT 2
20980: NEG
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 1
20988: PUSH
20989: LD_INT 1
20991: NEG
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 1
20999: PUSH
21000: LD_INT 2
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 0
21009: PUSH
21010: LD_INT 2
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 1
21019: NEG
21020: PUSH
21021: LD_INT 1
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 1
21030: NEG
21031: PUSH
21032: LD_INT 3
21034: NEG
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 0
21042: PUSH
21043: LD_INT 3
21045: NEG
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 1
21053: PUSH
21054: LD_INT 2
21056: NEG
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21080: LD_ADDR_VAR 0 15
21084: PUSH
21085: LD_INT 0
21087: PUSH
21088: LD_INT 0
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 0
21097: PUSH
21098: LD_INT 1
21100: NEG
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 1
21108: PUSH
21109: LD_INT 0
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 1
21118: PUSH
21119: LD_INT 1
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 0
21128: PUSH
21129: LD_INT 1
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 1
21138: NEG
21139: PUSH
21140: LD_INT 0
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 1
21149: NEG
21150: PUSH
21151: LD_INT 1
21153: NEG
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PUSH
21159: LD_INT 1
21161: PUSH
21162: LD_INT 1
21164: NEG
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 2
21172: PUSH
21173: LD_INT 0
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 2
21182: PUSH
21183: LD_INT 1
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 1
21192: NEG
21193: PUSH
21194: LD_INT 1
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 2
21203: NEG
21204: PUSH
21205: LD_INT 0
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 2
21214: NEG
21215: PUSH
21216: LD_INT 1
21218: NEG
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 2
21226: PUSH
21227: LD_INT 1
21229: NEG
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 3
21237: PUSH
21238: LD_INT 0
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: LD_INT 3
21247: PUSH
21248: LD_INT 1
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21273: LD_ADDR_VAR 0 16
21277: PUSH
21278: LD_INT 0
21280: PUSH
21281: LD_INT 0
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 0
21290: PUSH
21291: LD_INT 1
21293: NEG
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 1
21301: PUSH
21302: LD_INT 0
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 1
21311: PUSH
21312: LD_INT 1
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 0
21321: PUSH
21322: LD_INT 1
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: LD_INT 1
21331: NEG
21332: PUSH
21333: LD_INT 0
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 1
21342: NEG
21343: PUSH
21344: LD_INT 1
21346: NEG
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 1
21354: NEG
21355: PUSH
21356: LD_INT 2
21358: NEG
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 2
21366: PUSH
21367: LD_INT 1
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: LD_INT 2
21376: PUSH
21377: LD_INT 2
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 1
21386: PUSH
21387: LD_INT 2
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: LD_INT 2
21396: NEG
21397: PUSH
21398: LD_INT 1
21400: NEG
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 2
21408: NEG
21409: PUSH
21410: LD_INT 2
21412: NEG
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 3
21420: PUSH
21421: LD_INT 2
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 3
21430: PUSH
21431: LD_INT 3
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 2
21440: PUSH
21441: LD_INT 3
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21466: LD_ADDR_VAR 0 17
21470: PUSH
21471: LD_INT 0
21473: PUSH
21474: LD_INT 0
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 0
21483: PUSH
21484: LD_INT 1
21486: NEG
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PUSH
21492: LD_INT 1
21494: PUSH
21495: LD_INT 0
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 1
21504: PUSH
21505: LD_INT 1
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 0
21514: PUSH
21515: LD_INT 1
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 1
21524: NEG
21525: PUSH
21526: LD_INT 0
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 1
21535: NEG
21536: PUSH
21537: LD_INT 1
21539: NEG
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 1
21547: NEG
21548: PUSH
21549: LD_INT 2
21551: NEG
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 0
21559: PUSH
21560: LD_INT 2
21562: NEG
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 1
21570: PUSH
21571: LD_INT 1
21573: NEG
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 2
21581: PUSH
21582: LD_INT 0
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PUSH
21589: LD_INT 2
21591: PUSH
21592: LD_INT 1
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 2
21601: PUSH
21602: LD_INT 2
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 1
21611: PUSH
21612: LD_INT 2
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 0
21621: PUSH
21622: LD_INT 2
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 1
21631: NEG
21632: PUSH
21633: LD_INT 1
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 2
21642: NEG
21643: PUSH
21644: LD_INT 0
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 2
21653: NEG
21654: PUSH
21655: LD_INT 1
21657: NEG
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PUSH
21663: LD_INT 2
21665: NEG
21666: PUSH
21667: LD_INT 2
21669: NEG
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21696: LD_ADDR_VAR 0 18
21700: PUSH
21701: LD_INT 0
21703: PUSH
21704: LD_INT 0
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 0
21713: PUSH
21714: LD_INT 1
21716: NEG
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 1
21724: PUSH
21725: LD_INT 0
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 1
21734: PUSH
21735: LD_INT 1
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 0
21744: PUSH
21745: LD_INT 1
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 1
21754: NEG
21755: PUSH
21756: LD_INT 0
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 1
21765: NEG
21766: PUSH
21767: LD_INT 1
21769: NEG
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 1
21777: NEG
21778: PUSH
21779: LD_INT 2
21781: NEG
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 0
21789: PUSH
21790: LD_INT 2
21792: NEG
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 1
21800: PUSH
21801: LD_INT 1
21803: NEG
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 2
21811: PUSH
21812: LD_INT 0
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 2
21821: PUSH
21822: LD_INT 1
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: PUSH
21829: LD_INT 2
21831: PUSH
21832: LD_INT 2
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PUSH
21839: LD_INT 1
21841: PUSH
21842: LD_INT 2
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: LD_INT 0
21851: PUSH
21852: LD_INT 2
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 1
21861: NEG
21862: PUSH
21863: LD_INT 1
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 2
21872: NEG
21873: PUSH
21874: LD_INT 0
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 2
21883: NEG
21884: PUSH
21885: LD_INT 1
21887: NEG
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 2
21895: NEG
21896: PUSH
21897: LD_INT 2
21899: NEG
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21926: LD_ADDR_VAR 0 19
21930: PUSH
21931: LD_INT 0
21933: PUSH
21934: LD_INT 0
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 0
21943: PUSH
21944: LD_INT 1
21946: NEG
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: PUSH
21952: LD_INT 1
21954: PUSH
21955: LD_INT 0
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PUSH
21962: LD_INT 1
21964: PUSH
21965: LD_INT 1
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 0
21974: PUSH
21975: LD_INT 1
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 1
21984: NEG
21985: PUSH
21986: LD_INT 0
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 1
21995: NEG
21996: PUSH
21997: LD_INT 1
21999: NEG
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 1
22007: NEG
22008: PUSH
22009: LD_INT 2
22011: NEG
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 0
22019: PUSH
22020: LD_INT 2
22022: NEG
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 1
22030: PUSH
22031: LD_INT 1
22033: NEG
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 2
22041: PUSH
22042: LD_INT 0
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 2
22051: PUSH
22052: LD_INT 1
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 2
22061: PUSH
22062: LD_INT 2
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 1
22071: PUSH
22072: LD_INT 2
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 0
22081: PUSH
22082: LD_INT 2
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 1
22091: NEG
22092: PUSH
22093: LD_INT 1
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 2
22102: NEG
22103: PUSH
22104: LD_INT 0
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 2
22113: NEG
22114: PUSH
22115: LD_INT 1
22117: NEG
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 2
22125: NEG
22126: PUSH
22127: LD_INT 2
22129: NEG
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22156: LD_ADDR_VAR 0 20
22160: PUSH
22161: LD_INT 0
22163: PUSH
22164: LD_INT 0
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 0
22173: PUSH
22174: LD_INT 1
22176: NEG
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 1
22184: PUSH
22185: LD_INT 0
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 1
22194: PUSH
22195: LD_INT 1
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 0
22204: PUSH
22205: LD_INT 1
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 1
22214: NEG
22215: PUSH
22216: LD_INT 0
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 1
22225: NEG
22226: PUSH
22227: LD_INT 1
22229: NEG
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 1
22237: NEG
22238: PUSH
22239: LD_INT 2
22241: NEG
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 0
22249: PUSH
22250: LD_INT 2
22252: NEG
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 1
22260: PUSH
22261: LD_INT 1
22263: NEG
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 2
22271: PUSH
22272: LD_INT 0
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 2
22281: PUSH
22282: LD_INT 1
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 2
22291: PUSH
22292: LD_INT 2
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 1
22301: PUSH
22302: LD_INT 2
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 0
22311: PUSH
22312: LD_INT 2
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 1
22321: NEG
22322: PUSH
22323: LD_INT 1
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 2
22332: NEG
22333: PUSH
22334: LD_INT 0
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 2
22343: NEG
22344: PUSH
22345: LD_INT 1
22347: NEG
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 2
22355: NEG
22356: PUSH
22357: LD_INT 2
22359: NEG
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22386: LD_ADDR_VAR 0 21
22390: PUSH
22391: LD_INT 0
22393: PUSH
22394: LD_INT 0
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 0
22403: PUSH
22404: LD_INT 1
22406: NEG
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 1
22414: PUSH
22415: LD_INT 0
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 1
22424: PUSH
22425: LD_INT 1
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 0
22434: PUSH
22435: LD_INT 1
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 1
22444: NEG
22445: PUSH
22446: LD_INT 0
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 1
22455: NEG
22456: PUSH
22457: LD_INT 1
22459: NEG
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 1
22467: NEG
22468: PUSH
22469: LD_INT 2
22471: NEG
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 0
22479: PUSH
22480: LD_INT 2
22482: NEG
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 1
22490: PUSH
22491: LD_INT 1
22493: NEG
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 2
22501: PUSH
22502: LD_INT 0
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 2
22511: PUSH
22512: LD_INT 1
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 2
22521: PUSH
22522: LD_INT 2
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 1
22531: PUSH
22532: LD_INT 2
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 0
22541: PUSH
22542: LD_INT 2
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 1
22551: NEG
22552: PUSH
22553: LD_INT 1
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 2
22562: NEG
22563: PUSH
22564: LD_INT 0
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 2
22573: NEG
22574: PUSH
22575: LD_INT 1
22577: NEG
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 2
22585: NEG
22586: PUSH
22587: LD_INT 2
22589: NEG
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22616: LD_ADDR_VAR 0 22
22620: PUSH
22621: LD_INT 0
22623: PUSH
22624: LD_INT 0
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 0
22633: PUSH
22634: LD_INT 1
22636: NEG
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 1
22644: PUSH
22645: LD_INT 0
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 1
22654: PUSH
22655: LD_INT 1
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 0
22664: PUSH
22665: LD_INT 1
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 1
22674: NEG
22675: PUSH
22676: LD_INT 0
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 1
22685: NEG
22686: PUSH
22687: LD_INT 1
22689: NEG
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 1
22697: NEG
22698: PUSH
22699: LD_INT 2
22701: NEG
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 0
22709: PUSH
22710: LD_INT 2
22712: NEG
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 1
22720: PUSH
22721: LD_INT 1
22723: NEG
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 2
22731: PUSH
22732: LD_INT 0
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 2
22741: PUSH
22742: LD_INT 1
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 2
22751: PUSH
22752: LD_INT 2
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 1
22761: PUSH
22762: LD_INT 2
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 0
22771: PUSH
22772: LD_INT 2
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 1
22781: NEG
22782: PUSH
22783: LD_INT 1
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: LD_INT 2
22792: NEG
22793: PUSH
22794: LD_INT 0
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 2
22803: NEG
22804: PUSH
22805: LD_INT 1
22807: NEG
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 2
22815: NEG
22816: PUSH
22817: LD_INT 2
22819: NEG
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
22846: LD_ADDR_VAR 0 23
22850: PUSH
22851: LD_INT 0
22853: PUSH
22854: LD_INT 0
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PUSH
22861: LD_INT 0
22863: PUSH
22864: LD_INT 1
22866: NEG
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 1
22874: PUSH
22875: LD_INT 0
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 1
22884: PUSH
22885: LD_INT 1
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 0
22894: PUSH
22895: LD_INT 1
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 1
22904: NEG
22905: PUSH
22906: LD_INT 0
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 1
22915: NEG
22916: PUSH
22917: LD_INT 1
22919: NEG
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 1
22927: NEG
22928: PUSH
22929: LD_INT 2
22931: NEG
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 0
22939: PUSH
22940: LD_INT 2
22942: NEG
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 1
22950: PUSH
22951: LD_INT 1
22953: NEG
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 2
22961: PUSH
22962: LD_INT 0
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 2
22971: PUSH
22972: LD_INT 1
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 2
22981: PUSH
22982: LD_INT 2
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 1
22991: PUSH
22992: LD_INT 2
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 0
23001: PUSH
23002: LD_INT 2
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 1
23011: NEG
23012: PUSH
23013: LD_INT 1
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 2
23022: NEG
23023: PUSH
23024: LD_INT 0
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 2
23033: NEG
23034: PUSH
23035: LD_INT 1
23037: NEG
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 2
23045: NEG
23046: PUSH
23047: LD_INT 2
23049: NEG
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 2
23057: NEG
23058: PUSH
23059: LD_INT 3
23061: NEG
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 1
23069: NEG
23070: PUSH
23071: LD_INT 3
23073: NEG
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 1
23081: PUSH
23082: LD_INT 2
23084: NEG
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 2
23092: PUSH
23093: LD_INT 1
23095: NEG
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
23126: LD_ADDR_VAR 0 24
23130: PUSH
23131: LD_INT 0
23133: PUSH
23134: LD_INT 0
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 0
23143: PUSH
23144: LD_INT 1
23146: NEG
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 1
23154: PUSH
23155: LD_INT 0
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: LD_INT 1
23164: PUSH
23165: LD_INT 1
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 0
23174: PUSH
23175: LD_INT 1
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 1
23184: NEG
23185: PUSH
23186: LD_INT 0
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: LD_INT 1
23195: NEG
23196: PUSH
23197: LD_INT 1
23199: NEG
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 1
23207: NEG
23208: PUSH
23209: LD_INT 2
23211: NEG
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 0
23219: PUSH
23220: LD_INT 2
23222: NEG
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 1
23230: PUSH
23231: LD_INT 1
23233: NEG
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 2
23241: PUSH
23242: LD_INT 0
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 2
23251: PUSH
23252: LD_INT 1
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 2
23261: PUSH
23262: LD_INT 2
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 1
23271: PUSH
23272: LD_INT 2
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PUSH
23279: LD_INT 0
23281: PUSH
23282: LD_INT 2
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 1
23291: NEG
23292: PUSH
23293: LD_INT 1
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 2
23302: NEG
23303: PUSH
23304: LD_INT 0
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 2
23313: NEG
23314: PUSH
23315: LD_INT 1
23317: NEG
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 2
23325: NEG
23326: PUSH
23327: LD_INT 2
23329: NEG
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 1
23337: PUSH
23338: LD_INT 2
23340: NEG
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 2
23348: PUSH
23349: LD_INT 1
23351: NEG
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 3
23359: PUSH
23360: LD_INT 1
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 3
23369: PUSH
23370: LD_INT 2
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
23402: LD_ADDR_VAR 0 25
23406: PUSH
23407: LD_INT 0
23409: PUSH
23410: LD_INT 0
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: LD_INT 0
23419: PUSH
23420: LD_INT 1
23422: NEG
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 1
23430: PUSH
23431: LD_INT 0
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: LD_INT 1
23440: PUSH
23441: LD_INT 1
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: PUSH
23448: LD_INT 0
23450: PUSH
23451: LD_INT 1
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: LD_INT 1
23460: NEG
23461: PUSH
23462: LD_INT 0
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 1
23471: NEG
23472: PUSH
23473: LD_INT 1
23475: NEG
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 1
23483: NEG
23484: PUSH
23485: LD_INT 2
23487: NEG
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 0
23495: PUSH
23496: LD_INT 2
23498: NEG
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 1
23506: PUSH
23507: LD_INT 1
23509: NEG
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 2
23517: PUSH
23518: LD_INT 0
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: LD_INT 2
23527: PUSH
23528: LD_INT 1
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 2
23537: PUSH
23538: LD_INT 2
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 1
23547: PUSH
23548: LD_INT 2
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 0
23557: PUSH
23558: LD_INT 2
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 1
23567: NEG
23568: PUSH
23569: LD_INT 1
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 2
23578: NEG
23579: PUSH
23580: LD_INT 0
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 2
23589: NEG
23590: PUSH
23591: LD_INT 1
23593: NEG
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 2
23601: NEG
23602: PUSH
23603: LD_INT 2
23605: NEG
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: LD_INT 3
23613: PUSH
23614: LD_INT 1
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: PUSH
23621: LD_INT 3
23623: PUSH
23624: LD_INT 2
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: LD_INT 2
23633: PUSH
23634: LD_INT 3
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: LD_INT 1
23643: PUSH
23644: LD_INT 3
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
23676: LD_ADDR_VAR 0 26
23680: PUSH
23681: LD_INT 0
23683: PUSH
23684: LD_INT 0
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PUSH
23691: LD_INT 0
23693: PUSH
23694: LD_INT 1
23696: NEG
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 1
23704: PUSH
23705: LD_INT 0
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 1
23714: PUSH
23715: LD_INT 1
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 0
23724: PUSH
23725: LD_INT 1
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 1
23734: NEG
23735: PUSH
23736: LD_INT 0
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: LD_INT 1
23745: NEG
23746: PUSH
23747: LD_INT 1
23749: NEG
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 1
23757: NEG
23758: PUSH
23759: LD_INT 2
23761: NEG
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 0
23769: PUSH
23770: LD_INT 2
23772: NEG
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 1
23780: PUSH
23781: LD_INT 1
23783: NEG
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 2
23791: PUSH
23792: LD_INT 0
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 2
23801: PUSH
23802: LD_INT 1
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 2
23811: PUSH
23812: LD_INT 2
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 1
23821: PUSH
23822: LD_INT 2
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 0
23831: PUSH
23832: LD_INT 2
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 1
23841: NEG
23842: PUSH
23843: LD_INT 1
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 2
23852: NEG
23853: PUSH
23854: LD_INT 0
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 2
23863: NEG
23864: PUSH
23865: LD_INT 1
23867: NEG
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 2
23875: NEG
23876: PUSH
23877: LD_INT 2
23879: NEG
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: LD_INT 2
23887: PUSH
23888: LD_INT 3
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 1
23897: PUSH
23898: LD_INT 3
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 1
23907: NEG
23908: PUSH
23909: LD_INT 2
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 2
23918: NEG
23919: PUSH
23920: LD_INT 1
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23952: LD_ADDR_VAR 0 27
23956: PUSH
23957: LD_INT 0
23959: PUSH
23960: LD_INT 0
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 0
23969: PUSH
23970: LD_INT 1
23972: NEG
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 1
23980: PUSH
23981: LD_INT 0
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 1
23990: PUSH
23991: LD_INT 1
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 0
24000: PUSH
24001: LD_INT 1
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 1
24010: NEG
24011: PUSH
24012: LD_INT 0
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 1
24021: NEG
24022: PUSH
24023: LD_INT 1
24025: NEG
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 1
24033: NEG
24034: PUSH
24035: LD_INT 2
24037: NEG
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 0
24045: PUSH
24046: LD_INT 2
24048: NEG
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 1
24056: PUSH
24057: LD_INT 1
24059: NEG
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 2
24067: PUSH
24068: LD_INT 0
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: LD_INT 2
24077: PUSH
24078: LD_INT 1
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 2
24087: PUSH
24088: LD_INT 2
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 1
24097: PUSH
24098: LD_INT 2
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 0
24107: PUSH
24108: LD_INT 2
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 1
24117: NEG
24118: PUSH
24119: LD_INT 1
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 2
24128: NEG
24129: PUSH
24130: LD_INT 0
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 2
24139: NEG
24140: PUSH
24141: LD_INT 1
24143: NEG
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 2
24151: NEG
24152: PUSH
24153: LD_INT 2
24155: NEG
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 1
24163: NEG
24164: PUSH
24165: LD_INT 2
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 2
24174: NEG
24175: PUSH
24176: LD_INT 1
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: LD_INT 3
24185: NEG
24186: PUSH
24187: LD_INT 1
24189: NEG
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 3
24197: NEG
24198: PUSH
24199: LD_INT 2
24201: NEG
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
24232: LD_ADDR_VAR 0 28
24236: PUSH
24237: LD_INT 0
24239: PUSH
24240: LD_INT 0
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: LD_INT 0
24249: PUSH
24250: LD_INT 1
24252: NEG
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 1
24260: PUSH
24261: LD_INT 0
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 1
24270: PUSH
24271: LD_INT 1
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 0
24280: PUSH
24281: LD_INT 1
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 1
24290: NEG
24291: PUSH
24292: LD_INT 0
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 1
24301: NEG
24302: PUSH
24303: LD_INT 1
24305: NEG
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 1
24313: NEG
24314: PUSH
24315: LD_INT 2
24317: NEG
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 0
24325: PUSH
24326: LD_INT 2
24328: NEG
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 1
24336: PUSH
24337: LD_INT 1
24339: NEG
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 2
24347: PUSH
24348: LD_INT 0
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 2
24357: PUSH
24358: LD_INT 1
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 2
24367: PUSH
24368: LD_INT 2
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 1
24377: PUSH
24378: LD_INT 2
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 0
24387: PUSH
24388: LD_INT 2
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 1
24397: NEG
24398: PUSH
24399: LD_INT 1
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 2
24408: NEG
24409: PUSH
24410: LD_INT 0
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 2
24419: NEG
24420: PUSH
24421: LD_INT 1
24423: NEG
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 2
24431: NEG
24432: PUSH
24433: LD_INT 2
24435: NEG
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 2
24443: NEG
24444: PUSH
24445: LD_INT 3
24447: NEG
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 1
24455: NEG
24456: PUSH
24457: LD_INT 3
24459: NEG
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 3
24467: NEG
24468: PUSH
24469: LD_INT 1
24471: NEG
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 3
24479: NEG
24480: PUSH
24481: LD_INT 2
24483: NEG
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24514: LD_ADDR_VAR 0 29
24518: PUSH
24519: LD_INT 0
24521: PUSH
24522: LD_INT 0
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 0
24531: PUSH
24532: LD_INT 1
24534: NEG
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 1
24542: PUSH
24543: LD_INT 0
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 1
24552: PUSH
24553: LD_INT 1
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 0
24562: PUSH
24563: LD_INT 1
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 1
24572: NEG
24573: PUSH
24574: LD_INT 0
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 1
24583: NEG
24584: PUSH
24585: LD_INT 1
24587: NEG
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 1
24595: NEG
24596: PUSH
24597: LD_INT 2
24599: NEG
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 0
24607: PUSH
24608: LD_INT 2
24610: NEG
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 1
24618: PUSH
24619: LD_INT 1
24621: NEG
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 2
24629: PUSH
24630: LD_INT 0
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 2
24639: PUSH
24640: LD_INT 1
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 1
24649: PUSH
24650: LD_INT 2
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 0
24659: PUSH
24660: LD_INT 2
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 1
24669: NEG
24670: PUSH
24671: LD_INT 1
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 2
24680: NEG
24681: PUSH
24682: LD_INT 1
24684: NEG
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 2
24692: NEG
24693: PUSH
24694: LD_INT 2
24696: NEG
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 2
24704: NEG
24705: PUSH
24706: LD_INT 3
24708: NEG
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 2
24716: PUSH
24717: LD_INT 1
24719: NEG
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 3
24727: PUSH
24728: LD_INT 1
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 1
24737: PUSH
24738: LD_INT 3
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: LD_INT 1
24747: NEG
24748: PUSH
24749: LD_INT 2
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 3
24758: NEG
24759: PUSH
24760: LD_INT 2
24762: NEG
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24793: LD_ADDR_VAR 0 30
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: LD_INT 0
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 0
24810: PUSH
24811: LD_INT 1
24813: NEG
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 1
24821: PUSH
24822: LD_INT 0
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 1
24831: PUSH
24832: LD_INT 1
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 0
24841: PUSH
24842: LD_INT 1
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 1
24851: NEG
24852: PUSH
24853: LD_INT 0
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 1
24862: NEG
24863: PUSH
24864: LD_INT 1
24866: NEG
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 1
24874: NEG
24875: PUSH
24876: LD_INT 2
24878: NEG
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: LD_INT 2
24889: NEG
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: LD_INT 1
24900: NEG
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 2
24908: PUSH
24909: LD_INT 0
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 2
24918: PUSH
24919: LD_INT 1
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 2
24928: PUSH
24929: LD_INT 2
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 1
24938: PUSH
24939: LD_INT 2
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 1
24948: NEG
24949: PUSH
24950: LD_INT 1
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 2
24959: NEG
24960: PUSH
24961: LD_INT 0
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 2
24970: NEG
24971: PUSH
24972: LD_INT 1
24974: NEG
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 1
24982: NEG
24983: PUSH
24984: LD_INT 3
24986: NEG
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 1
24994: PUSH
24995: LD_INT 2
24997: NEG
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 3
25005: PUSH
25006: LD_INT 2
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 2
25015: PUSH
25016: LD_INT 3
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 2
25025: NEG
25026: PUSH
25027: LD_INT 1
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 3
25036: NEG
25037: PUSH
25038: LD_INT 1
25040: NEG
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
25071: LD_ADDR_VAR 0 31
25075: PUSH
25076: LD_INT 0
25078: PUSH
25079: LD_INT 0
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 0
25088: PUSH
25089: LD_INT 1
25091: NEG
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 1
25099: PUSH
25100: LD_INT 0
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 1
25109: PUSH
25110: LD_INT 1
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 0
25119: PUSH
25120: LD_INT 1
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 1
25129: NEG
25130: PUSH
25131: LD_INT 0
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 1
25140: NEG
25141: PUSH
25142: LD_INT 1
25144: NEG
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 1
25152: NEG
25153: PUSH
25154: LD_INT 2
25156: NEG
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 1
25164: PUSH
25165: LD_INT 1
25167: NEG
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 2
25175: PUSH
25176: LD_INT 0
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: LD_INT 2
25185: PUSH
25186: LD_INT 1
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 2
25195: PUSH
25196: LD_INT 2
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 1
25205: PUSH
25206: LD_INT 2
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 0
25215: PUSH
25216: LD_INT 2
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 1
25225: NEG
25226: PUSH
25227: LD_INT 1
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 2
25236: NEG
25237: PUSH
25238: LD_INT 1
25240: NEG
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 2
25248: NEG
25249: PUSH
25250: LD_INT 2
25252: NEG
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 2
25260: NEG
25261: PUSH
25262: LD_INT 3
25264: NEG
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 2
25272: PUSH
25273: LD_INT 1
25275: NEG
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 3
25283: PUSH
25284: LD_INT 1
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 1
25293: PUSH
25294: LD_INT 3
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 1
25303: NEG
25304: PUSH
25305: LD_INT 2
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 3
25314: NEG
25315: PUSH
25316: LD_INT 2
25318: NEG
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25349: LD_ADDR_VAR 0 32
25353: PUSH
25354: LD_INT 0
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 0
25366: PUSH
25367: LD_INT 1
25369: NEG
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 1
25377: PUSH
25378: LD_INT 0
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 1
25387: PUSH
25388: LD_INT 1
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 0
25397: PUSH
25398: LD_INT 1
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 1
25407: NEG
25408: PUSH
25409: LD_INT 0
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 1
25418: NEG
25419: PUSH
25420: LD_INT 1
25422: NEG
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 1
25430: NEG
25431: PUSH
25432: LD_INT 2
25434: NEG
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 0
25442: PUSH
25443: LD_INT 2
25445: NEG
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 1
25453: PUSH
25454: LD_INT 1
25456: NEG
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 2
25464: PUSH
25465: LD_INT 1
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 2
25474: PUSH
25475: LD_INT 2
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 1
25484: PUSH
25485: LD_INT 2
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 0
25494: PUSH
25495: LD_INT 2
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 1
25504: NEG
25505: PUSH
25506: LD_INT 1
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 2
25515: NEG
25516: PUSH
25517: LD_INT 0
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 2
25526: NEG
25527: PUSH
25528: LD_INT 1
25530: NEG
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 1
25538: NEG
25539: PUSH
25540: LD_INT 3
25542: NEG
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 1
25550: PUSH
25551: LD_INT 2
25553: NEG
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 3
25561: PUSH
25562: LD_INT 2
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 2
25571: PUSH
25572: LD_INT 3
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 2
25581: NEG
25582: PUSH
25583: LD_INT 1
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 3
25592: NEG
25593: PUSH
25594: LD_INT 1
25596: NEG
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
25627: LD_ADDR_VAR 0 33
25631: PUSH
25632: LD_INT 0
25634: PUSH
25635: LD_INT 0
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 0
25644: PUSH
25645: LD_INT 1
25647: NEG
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 1
25655: PUSH
25656: LD_INT 0
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 1
25665: PUSH
25666: LD_INT 1
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 0
25675: PUSH
25676: LD_INT 1
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 1
25685: NEG
25686: PUSH
25687: LD_INT 0
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 1
25696: NEG
25697: PUSH
25698: LD_INT 1
25700: NEG
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 1
25708: NEG
25709: PUSH
25710: LD_INT 2
25712: NEG
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 1
25720: PUSH
25721: LD_INT 1
25723: NEG
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 2
25731: PUSH
25732: LD_INT 0
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 2
25741: PUSH
25742: LD_INT 1
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 1
25751: PUSH
25752: LD_INT 2
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 0
25761: PUSH
25762: LD_INT 2
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 1
25771: NEG
25772: PUSH
25773: LD_INT 1
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 2
25782: NEG
25783: PUSH
25784: LD_INT 0
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 2
25793: NEG
25794: PUSH
25795: LD_INT 1
25797: NEG
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 2
25805: NEG
25806: PUSH
25807: LD_INT 2
25809: NEG
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 2
25817: NEG
25818: PUSH
25819: LD_INT 3
25821: NEG
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 2
25829: PUSH
25830: LD_INT 1
25832: NEG
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 3
25840: PUSH
25841: LD_INT 1
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 1
25850: PUSH
25851: LD_INT 3
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 1
25860: NEG
25861: PUSH
25862: LD_INT 2
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 3
25871: NEG
25872: PUSH
25873: LD_INT 2
25875: NEG
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25906: LD_ADDR_VAR 0 34
25910: PUSH
25911: LD_INT 0
25913: PUSH
25914: LD_INT 0
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 0
25923: PUSH
25924: LD_INT 1
25926: NEG
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 1
25934: PUSH
25935: LD_INT 0
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 1
25944: PUSH
25945: LD_INT 1
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 0
25954: PUSH
25955: LD_INT 1
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 1
25964: NEG
25965: PUSH
25966: LD_INT 0
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 1
25975: NEG
25976: PUSH
25977: LD_INT 1
25979: NEG
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 1
25987: NEG
25988: PUSH
25989: LD_INT 2
25991: NEG
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 0
25999: PUSH
26000: LD_INT 2
26002: NEG
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 1
26010: PUSH
26011: LD_INT 1
26013: NEG
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 2
26021: PUSH
26022: LD_INT 1
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 2
26031: PUSH
26032: LD_INT 2
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 1
26041: PUSH
26042: LD_INT 2
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 1
26051: NEG
26052: PUSH
26053: LD_INT 1
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 2
26062: NEG
26063: PUSH
26064: LD_INT 0
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 2
26073: NEG
26074: PUSH
26075: LD_INT 1
26077: NEG
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 2
26085: NEG
26086: PUSH
26087: LD_INT 2
26089: NEG
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 1
26097: NEG
26098: PUSH
26099: LD_INT 3
26101: NEG
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 1
26109: PUSH
26110: LD_INT 2
26112: NEG
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 3
26120: PUSH
26121: LD_INT 2
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 2
26130: PUSH
26131: LD_INT 3
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 2
26140: NEG
26141: PUSH
26142: LD_INT 1
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 3
26151: NEG
26152: PUSH
26153: LD_INT 1
26155: NEG
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
26186: LD_ADDR_VAR 0 35
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: LD_INT 0
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 0
26203: PUSH
26204: LD_INT 1
26206: NEG
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 1
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: LD_INT 1
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 0
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 1
26244: NEG
26245: PUSH
26246: LD_INT 0
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 1
26255: NEG
26256: PUSH
26257: LD_INT 1
26259: NEG
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 2
26267: PUSH
26268: LD_INT 1
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 2
26277: NEG
26278: PUSH
26279: LD_INT 1
26281: NEG
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
26298: LD_ADDR_VAR 0 36
26302: PUSH
26303: LD_INT 0
26305: PUSH
26306: LD_INT 0
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: LD_INT 1
26318: NEG
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: LD_INT 1
26326: PUSH
26327: LD_INT 0
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 1
26336: PUSH
26337: LD_INT 1
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 0
26346: PUSH
26347: LD_INT 1
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 1
26356: NEG
26357: PUSH
26358: LD_INT 0
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 1
26367: NEG
26368: PUSH
26369: LD_INT 1
26371: NEG
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 1
26379: NEG
26380: PUSH
26381: LD_INT 2
26383: NEG
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 1
26391: PUSH
26392: LD_INT 2
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
26410: LD_ADDR_VAR 0 37
26414: PUSH
26415: LD_INT 0
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 0
26427: PUSH
26428: LD_INT 1
26430: NEG
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 1
26438: PUSH
26439: LD_INT 0
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: LD_INT 1
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 0
26458: PUSH
26459: LD_INT 1
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 1
26468: NEG
26469: PUSH
26470: LD_INT 0
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 1
26479: NEG
26480: PUSH
26481: LD_INT 1
26483: NEG
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 1
26491: PUSH
26492: LD_INT 1
26494: NEG
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 1
26502: NEG
26503: PUSH
26504: LD_INT 1
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
26522: LD_ADDR_VAR 0 38
26526: PUSH
26527: LD_INT 0
26529: PUSH
26530: LD_INT 0
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 0
26539: PUSH
26540: LD_INT 1
26542: NEG
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 1
26550: PUSH
26551: LD_INT 0
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 1
26560: PUSH
26561: LD_INT 1
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: LD_INT 0
26570: PUSH
26571: LD_INT 1
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 1
26580: NEG
26581: PUSH
26582: LD_INT 0
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 1
26591: NEG
26592: PUSH
26593: LD_INT 1
26595: NEG
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 2
26603: PUSH
26604: LD_INT 1
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 2
26613: NEG
26614: PUSH
26615: LD_INT 1
26617: NEG
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
26634: LD_ADDR_VAR 0 39
26638: PUSH
26639: LD_INT 0
26641: PUSH
26642: LD_INT 0
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 0
26651: PUSH
26652: LD_INT 1
26654: NEG
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 1
26662: PUSH
26663: LD_INT 0
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 1
26672: PUSH
26673: LD_INT 1
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 0
26682: PUSH
26683: LD_INT 1
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 1
26692: NEG
26693: PUSH
26694: LD_INT 0
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 1
26703: NEG
26704: PUSH
26705: LD_INT 1
26707: NEG
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 1
26715: NEG
26716: PUSH
26717: LD_INT 2
26719: NEG
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 1
26727: PUSH
26728: LD_INT 2
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
26746: LD_ADDR_VAR 0 40
26750: PUSH
26751: LD_INT 0
26753: PUSH
26754: LD_INT 0
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 0
26763: PUSH
26764: LD_INT 1
26766: NEG
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: LD_INT 1
26774: PUSH
26775: LD_INT 0
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 1
26784: PUSH
26785: LD_INT 1
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 0
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 1
26804: NEG
26805: PUSH
26806: LD_INT 0
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 1
26815: NEG
26816: PUSH
26817: LD_INT 1
26819: NEG
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 1
26827: PUSH
26828: LD_INT 1
26830: NEG
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 1
26838: NEG
26839: PUSH
26840: LD_INT 1
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26858: LD_ADDR_VAR 0 41
26862: PUSH
26863: LD_INT 0
26865: PUSH
26866: LD_INT 0
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 0
26875: PUSH
26876: LD_INT 1
26878: NEG
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 1
26886: PUSH
26887: LD_INT 0
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 1
26896: PUSH
26897: LD_INT 1
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 0
26906: PUSH
26907: LD_INT 1
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 1
26916: NEG
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 1
26927: NEG
26928: PUSH
26929: LD_INT 1
26931: NEG
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 1
26939: NEG
26940: PUSH
26941: LD_INT 2
26943: NEG
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 1
26951: PUSH
26952: LD_INT 1
26954: NEG
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 2
26962: PUSH
26963: LD_INT 0
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 2
26972: PUSH
26973: LD_INT 1
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 2
26982: PUSH
26983: LD_INT 2
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 1
26992: PUSH
26993: LD_INT 2
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: LD_INT 1
27002: NEG
27003: PUSH
27004: LD_INT 1
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 2
27013: NEG
27014: PUSH
27015: LD_INT 0
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 2
27024: NEG
27025: PUSH
27026: LD_INT 1
27028: NEG
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 2
27036: NEG
27037: PUSH
27038: LD_INT 2
27040: NEG
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 2
27048: NEG
27049: PUSH
27050: LD_INT 3
27052: NEG
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 2
27060: PUSH
27061: LD_INT 1
27063: NEG
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 3
27071: PUSH
27072: LD_INT 0
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 3
27081: PUSH
27082: LD_INT 1
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 3
27091: PUSH
27092: LD_INT 2
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 3
27101: PUSH
27102: LD_INT 3
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 2
27111: PUSH
27112: LD_INT 3
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 2
27121: NEG
27122: PUSH
27123: LD_INT 1
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 3
27132: NEG
27133: PUSH
27134: LD_INT 0
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 3
27143: NEG
27144: PUSH
27145: LD_INT 1
27147: NEG
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 3
27155: NEG
27156: PUSH
27157: LD_INT 2
27159: NEG
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 3
27167: NEG
27168: PUSH
27169: LD_INT 3
27171: NEG
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27208: LD_ADDR_VAR 0 42
27212: PUSH
27213: LD_INT 0
27215: PUSH
27216: LD_INT 0
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 0
27225: PUSH
27226: LD_INT 1
27228: NEG
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 1
27236: PUSH
27237: LD_INT 0
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 1
27246: PUSH
27247: LD_INT 1
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 0
27256: PUSH
27257: LD_INT 1
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 1
27266: NEG
27267: PUSH
27268: LD_INT 0
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 1
27277: NEG
27278: PUSH
27279: LD_INT 1
27281: NEG
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 1
27289: NEG
27290: PUSH
27291: LD_INT 2
27293: NEG
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 0
27301: PUSH
27302: LD_INT 2
27304: NEG
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 1
27312: PUSH
27313: LD_INT 1
27315: NEG
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 2
27323: PUSH
27324: LD_INT 1
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 2
27333: PUSH
27334: LD_INT 2
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 1
27343: PUSH
27344: LD_INT 2
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 0
27353: PUSH
27354: LD_INT 2
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: LD_INT 1
27363: NEG
27364: PUSH
27365: LD_INT 1
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 2
27374: NEG
27375: PUSH
27376: LD_INT 1
27378: NEG
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 2
27386: NEG
27387: PUSH
27388: LD_INT 2
27390: NEG
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 2
27398: NEG
27399: PUSH
27400: LD_INT 3
27402: NEG
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 1
27410: NEG
27411: PUSH
27412: LD_INT 3
27414: NEG
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 0
27422: PUSH
27423: LD_INT 3
27425: NEG
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 1
27433: PUSH
27434: LD_INT 2
27436: NEG
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 3
27444: PUSH
27445: LD_INT 2
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 3
27454: PUSH
27455: LD_INT 3
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: LD_INT 2
27464: PUSH
27465: LD_INT 3
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 1
27474: PUSH
27475: LD_INT 3
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 0
27484: PUSH
27485: LD_INT 3
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 1
27494: NEG
27495: PUSH
27496: LD_INT 2
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: LD_INT 3
27505: NEG
27506: PUSH
27507: LD_INT 2
27509: NEG
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 3
27517: NEG
27518: PUSH
27519: LD_INT 3
27521: NEG
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27558: LD_ADDR_VAR 0 43
27562: PUSH
27563: LD_INT 0
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 0
27575: PUSH
27576: LD_INT 1
27578: NEG
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 1
27586: PUSH
27587: LD_INT 0
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: LD_INT 1
27596: PUSH
27597: LD_INT 1
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 0
27606: PUSH
27607: LD_INT 1
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 1
27616: NEG
27617: PUSH
27618: LD_INT 0
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 1
27627: NEG
27628: PUSH
27629: LD_INT 1
27631: NEG
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 1
27639: NEG
27640: PUSH
27641: LD_INT 2
27643: NEG
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 0
27651: PUSH
27652: LD_INT 2
27654: NEG
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 1
27662: PUSH
27663: LD_INT 1
27665: NEG
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 2
27673: PUSH
27674: LD_INT 0
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 2
27683: PUSH
27684: LD_INT 1
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 1
27693: PUSH
27694: LD_INT 2
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 0
27703: PUSH
27704: LD_INT 2
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 1
27713: NEG
27714: PUSH
27715: LD_INT 1
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 2
27724: NEG
27725: PUSH
27726: LD_INT 0
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 2
27735: NEG
27736: PUSH
27737: LD_INT 1
27739: NEG
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 1
27747: NEG
27748: PUSH
27749: LD_INT 3
27751: NEG
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 0
27759: PUSH
27760: LD_INT 3
27762: NEG
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 1
27770: PUSH
27771: LD_INT 2
27773: NEG
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 2
27781: PUSH
27782: LD_INT 1
27784: NEG
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 3
27792: PUSH
27793: LD_INT 0
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: LD_INT 3
27802: PUSH
27803: LD_INT 1
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 1
27812: PUSH
27813: LD_INT 3
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 0
27822: PUSH
27823: LD_INT 3
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 1
27832: NEG
27833: PUSH
27834: LD_INT 2
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 2
27843: NEG
27844: PUSH
27845: LD_INT 1
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 3
27854: NEG
27855: PUSH
27856: LD_INT 0
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 3
27865: NEG
27866: PUSH
27867: LD_INT 1
27869: NEG
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27906: LD_ADDR_VAR 0 44
27910: PUSH
27911: LD_INT 0
27913: PUSH
27914: LD_INT 0
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 0
27923: PUSH
27924: LD_INT 1
27926: NEG
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 1
27934: PUSH
27935: LD_INT 0
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 1
27944: PUSH
27945: LD_INT 1
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 0
27954: PUSH
27955: LD_INT 1
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 1
27964: NEG
27965: PUSH
27966: LD_INT 0
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 1
27975: NEG
27976: PUSH
27977: LD_INT 1
27979: NEG
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 1
27987: NEG
27988: PUSH
27989: LD_INT 2
27991: NEG
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 1
27999: PUSH
28000: LD_INT 1
28002: NEG
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 2
28010: PUSH
28011: LD_INT 0
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 2
28020: PUSH
28021: LD_INT 1
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 2
28030: PUSH
28031: LD_INT 2
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 1
28040: PUSH
28041: LD_INT 2
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 1
28050: NEG
28051: PUSH
28052: LD_INT 1
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 2
28061: NEG
28062: PUSH
28063: LD_INT 0
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 2
28072: NEG
28073: PUSH
28074: LD_INT 1
28076: NEG
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 2
28084: NEG
28085: PUSH
28086: LD_INT 2
28088: NEG
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 2
28096: NEG
28097: PUSH
28098: LD_INT 3
28100: NEG
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 2
28108: PUSH
28109: LD_INT 1
28111: NEG
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 3
28119: PUSH
28120: LD_INT 0
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 3
28129: PUSH
28130: LD_INT 1
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 3
28139: PUSH
28140: LD_INT 2
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 3
28149: PUSH
28150: LD_INT 3
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 2
28159: PUSH
28160: LD_INT 3
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 2
28169: NEG
28170: PUSH
28171: LD_INT 1
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 3
28180: NEG
28181: PUSH
28182: LD_INT 0
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 3
28191: NEG
28192: PUSH
28193: LD_INT 1
28195: NEG
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 3
28203: NEG
28204: PUSH
28205: LD_INT 2
28207: NEG
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 3
28215: NEG
28216: PUSH
28217: LD_INT 3
28219: NEG
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28256: LD_ADDR_VAR 0 45
28260: PUSH
28261: LD_INT 0
28263: PUSH
28264: LD_INT 0
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 0
28273: PUSH
28274: LD_INT 1
28276: NEG
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 1
28284: PUSH
28285: LD_INT 0
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 1
28294: PUSH
28295: LD_INT 1
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 0
28304: PUSH
28305: LD_INT 1
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 1
28314: NEG
28315: PUSH
28316: LD_INT 0
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 1
28325: NEG
28326: PUSH
28327: LD_INT 1
28329: NEG
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 1
28337: NEG
28338: PUSH
28339: LD_INT 2
28341: NEG
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 0
28349: PUSH
28350: LD_INT 2
28352: NEG
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 1
28360: PUSH
28361: LD_INT 1
28363: NEG
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 2
28371: PUSH
28372: LD_INT 1
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 2
28381: PUSH
28382: LD_INT 2
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 1
28391: PUSH
28392: LD_INT 2
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 0
28401: PUSH
28402: LD_INT 2
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 1
28411: NEG
28412: PUSH
28413: LD_INT 1
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 2
28422: NEG
28423: PUSH
28424: LD_INT 1
28426: NEG
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 2
28434: NEG
28435: PUSH
28436: LD_INT 2
28438: NEG
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: LD_INT 2
28446: NEG
28447: PUSH
28448: LD_INT 3
28450: NEG
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 1
28458: NEG
28459: PUSH
28460: LD_INT 3
28462: NEG
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 0
28470: PUSH
28471: LD_INT 3
28473: NEG
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 1
28481: PUSH
28482: LD_INT 2
28484: NEG
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 3
28492: PUSH
28493: LD_INT 2
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 3
28502: PUSH
28503: LD_INT 3
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 2
28512: PUSH
28513: LD_INT 3
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 1
28522: PUSH
28523: LD_INT 3
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 0
28532: PUSH
28533: LD_INT 3
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 1
28542: NEG
28543: PUSH
28544: LD_INT 2
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 3
28553: NEG
28554: PUSH
28555: LD_INT 2
28557: NEG
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 3
28565: NEG
28566: PUSH
28567: LD_INT 3
28569: NEG
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28606: LD_ADDR_VAR 0 46
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: LD_INT 0
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 0
28623: PUSH
28624: LD_INT 1
28626: NEG
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 1
28634: PUSH
28635: LD_INT 0
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 1
28644: PUSH
28645: LD_INT 1
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 0
28654: PUSH
28655: LD_INT 1
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 1
28664: NEG
28665: PUSH
28666: LD_INT 0
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 1
28675: NEG
28676: PUSH
28677: LD_INT 1
28679: NEG
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 1
28687: NEG
28688: PUSH
28689: LD_INT 2
28691: NEG
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 0
28699: PUSH
28700: LD_INT 2
28702: NEG
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 1
28710: PUSH
28711: LD_INT 1
28713: NEG
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 2
28721: PUSH
28722: LD_INT 0
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 2
28731: PUSH
28732: LD_INT 1
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 1
28741: PUSH
28742: LD_INT 2
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 0
28751: PUSH
28752: LD_INT 2
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 1
28761: NEG
28762: PUSH
28763: LD_INT 1
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 2
28772: NEG
28773: PUSH
28774: LD_INT 0
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 2
28783: NEG
28784: PUSH
28785: LD_INT 1
28787: NEG
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 1
28795: NEG
28796: PUSH
28797: LD_INT 3
28799: NEG
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 0
28807: PUSH
28808: LD_INT 3
28810: NEG
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 1
28818: PUSH
28819: LD_INT 2
28821: NEG
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 2
28829: PUSH
28830: LD_INT 1
28832: NEG
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 3
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 3
28850: PUSH
28851: LD_INT 1
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 1
28860: PUSH
28861: LD_INT 3
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 0
28870: PUSH
28871: LD_INT 3
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 1
28880: NEG
28881: PUSH
28882: LD_INT 2
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 2
28891: NEG
28892: PUSH
28893: LD_INT 1
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 3
28902: NEG
28903: PUSH
28904: LD_INT 0
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 3
28913: NEG
28914: PUSH
28915: LD_INT 1
28917: NEG
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28954: LD_ADDR_VAR 0 47
28958: PUSH
28959: LD_INT 0
28961: PUSH
28962: LD_INT 0
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 0
28971: PUSH
28972: LD_INT 1
28974: NEG
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 1
28982: PUSH
28983: LD_INT 0
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 1
28992: PUSH
28993: LD_INT 1
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 0
29002: PUSH
29003: LD_INT 1
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 1
29012: NEG
29013: PUSH
29014: LD_INT 0
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 1
29023: NEG
29024: PUSH
29025: LD_INT 1
29027: NEG
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 1
29035: NEG
29036: PUSH
29037: LD_INT 2
29039: NEG
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 0
29047: PUSH
29048: LD_INT 2
29050: NEG
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 1
29058: PUSH
29059: LD_INT 1
29061: NEG
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 2
29069: NEG
29070: PUSH
29071: LD_INT 1
29073: NEG
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 2
29081: NEG
29082: PUSH
29083: LD_INT 2
29085: NEG
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29105: LD_ADDR_VAR 0 48
29109: PUSH
29110: LD_INT 0
29112: PUSH
29113: LD_INT 0
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 0
29122: PUSH
29123: LD_INT 1
29125: NEG
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 1
29133: PUSH
29134: LD_INT 0
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 1
29143: PUSH
29144: LD_INT 1
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 0
29153: PUSH
29154: LD_INT 1
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 1
29163: NEG
29164: PUSH
29165: LD_INT 0
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 1
29174: NEG
29175: PUSH
29176: LD_INT 1
29178: NEG
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 1
29186: NEG
29187: PUSH
29188: LD_INT 2
29190: NEG
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: LD_INT 2
29201: NEG
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: LD_INT 1
29212: NEG
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 2
29220: PUSH
29221: LD_INT 0
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 2
29230: PUSH
29231: LD_INT 1
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29252: LD_ADDR_VAR 0 49
29256: PUSH
29257: LD_INT 0
29259: PUSH
29260: LD_INT 0
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 0
29269: PUSH
29270: LD_INT 1
29272: NEG
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 1
29280: PUSH
29281: LD_INT 0
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 1
29290: PUSH
29291: LD_INT 1
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 0
29300: PUSH
29301: LD_INT 1
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: LD_INT 1
29310: NEG
29311: PUSH
29312: LD_INT 0
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 1
29321: NEG
29322: PUSH
29323: LD_INT 1
29325: NEG
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 1
29333: PUSH
29334: LD_INT 1
29336: NEG
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 2
29344: PUSH
29345: LD_INT 0
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 2
29354: PUSH
29355: LD_INT 1
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 2
29364: PUSH
29365: LD_INT 2
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 1
29374: PUSH
29375: LD_INT 2
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29396: LD_ADDR_VAR 0 50
29400: PUSH
29401: LD_INT 0
29403: PUSH
29404: LD_INT 0
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 0
29413: PUSH
29414: LD_INT 1
29416: NEG
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: LD_INT 1
29424: PUSH
29425: LD_INT 0
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: LD_INT 1
29434: PUSH
29435: LD_INT 1
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: LD_INT 0
29444: PUSH
29445: LD_INT 1
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 1
29454: NEG
29455: PUSH
29456: LD_INT 0
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 1
29465: NEG
29466: PUSH
29467: LD_INT 1
29469: NEG
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 2
29477: PUSH
29478: LD_INT 1
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 2
29487: PUSH
29488: LD_INT 2
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 1
29497: PUSH
29498: LD_INT 2
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 0
29507: PUSH
29508: LD_INT 2
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 1
29517: NEG
29518: PUSH
29519: LD_INT 1
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29540: LD_ADDR_VAR 0 51
29544: PUSH
29545: LD_INT 0
29547: PUSH
29548: LD_INT 0
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 0
29557: PUSH
29558: LD_INT 1
29560: NEG
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 1
29568: PUSH
29569: LD_INT 0
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 1
29578: PUSH
29579: LD_INT 1
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 0
29588: PUSH
29589: LD_INT 1
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 1
29598: NEG
29599: PUSH
29600: LD_INT 0
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 1
29609: NEG
29610: PUSH
29611: LD_INT 1
29613: NEG
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: LD_INT 1
29621: PUSH
29622: LD_INT 2
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 0
29631: PUSH
29632: LD_INT 2
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 1
29641: NEG
29642: PUSH
29643: LD_INT 1
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 2
29652: NEG
29653: PUSH
29654: LD_INT 0
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 2
29663: NEG
29664: PUSH
29665: LD_INT 1
29667: NEG
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29687: LD_ADDR_VAR 0 52
29691: PUSH
29692: LD_INT 0
29694: PUSH
29695: LD_INT 0
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 0
29704: PUSH
29705: LD_INT 1
29707: NEG
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 1
29715: PUSH
29716: LD_INT 0
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 1
29725: PUSH
29726: LD_INT 1
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 0
29735: PUSH
29736: LD_INT 1
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 1
29745: NEG
29746: PUSH
29747: LD_INT 0
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 1
29756: NEG
29757: PUSH
29758: LD_INT 1
29760: NEG
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 1
29768: NEG
29769: PUSH
29770: LD_INT 2
29772: NEG
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 1
29780: NEG
29781: PUSH
29782: LD_INT 1
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 2
29791: NEG
29792: PUSH
29793: LD_INT 0
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 2
29802: NEG
29803: PUSH
29804: LD_INT 1
29806: NEG
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 2
29814: NEG
29815: PUSH
29816: LD_INT 2
29818: NEG
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29838: LD_ADDR_VAR 0 53
29842: PUSH
29843: LD_INT 0
29845: PUSH
29846: LD_INT 0
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 0
29855: PUSH
29856: LD_INT 1
29858: NEG
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 1
29866: PUSH
29867: LD_INT 0
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 1
29876: PUSH
29877: LD_INT 1
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 0
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 1
29896: NEG
29897: PUSH
29898: LD_INT 0
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 1
29907: NEG
29908: PUSH
29909: LD_INT 1
29911: NEG
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 1
29919: NEG
29920: PUSH
29921: LD_INT 2
29923: NEG
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 0
29931: PUSH
29932: LD_INT 2
29934: NEG
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 1
29942: PUSH
29943: LD_INT 1
29945: NEG
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 2
29953: PUSH
29954: LD_INT 0
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 2
29963: PUSH
29964: LD_INT 1
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 2
29973: PUSH
29974: LD_INT 2
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 1
29983: PUSH
29984: LD_INT 2
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 0
29993: PUSH
29994: LD_INT 2
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 1
30003: NEG
30004: PUSH
30005: LD_INT 1
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 2
30014: NEG
30015: PUSH
30016: LD_INT 0
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 2
30025: NEG
30026: PUSH
30027: LD_INT 1
30029: NEG
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 2
30037: NEG
30038: PUSH
30039: LD_INT 2
30041: NEG
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30068: LD_ADDR_VAR 0 54
30072: PUSH
30073: LD_INT 0
30075: PUSH
30076: LD_INT 0
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 0
30085: PUSH
30086: LD_INT 1
30088: NEG
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 1
30096: PUSH
30097: LD_INT 0
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 1
30106: PUSH
30107: LD_INT 1
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 0
30116: PUSH
30117: LD_INT 1
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 1
30126: NEG
30127: PUSH
30128: LD_INT 0
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 1
30137: NEG
30138: PUSH
30139: LD_INT 1
30141: NEG
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 1
30149: NEG
30150: PUSH
30151: LD_INT 2
30153: NEG
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 0
30161: PUSH
30162: LD_INT 2
30164: NEG
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 1
30172: PUSH
30173: LD_INT 1
30175: NEG
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 2
30183: PUSH
30184: LD_INT 0
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 2
30193: PUSH
30194: LD_INT 1
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 2
30203: PUSH
30204: LD_INT 2
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 1
30213: PUSH
30214: LD_INT 2
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 0
30223: PUSH
30224: LD_INT 2
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 1
30233: NEG
30234: PUSH
30235: LD_INT 1
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 2
30244: NEG
30245: PUSH
30246: LD_INT 0
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 2
30255: NEG
30256: PUSH
30257: LD_INT 1
30259: NEG
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 2
30267: NEG
30268: PUSH
30269: LD_INT 2
30271: NEG
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30298: LD_ADDR_VAR 0 55
30302: PUSH
30303: LD_INT 0
30305: PUSH
30306: LD_INT 0
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 0
30315: PUSH
30316: LD_INT 1
30318: NEG
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 1
30326: PUSH
30327: LD_INT 0
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 1
30336: PUSH
30337: LD_INT 1
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 0
30346: PUSH
30347: LD_INT 1
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 1
30356: NEG
30357: PUSH
30358: LD_INT 0
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 1
30367: NEG
30368: PUSH
30369: LD_INT 1
30371: NEG
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 1
30379: NEG
30380: PUSH
30381: LD_INT 2
30383: NEG
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 0
30391: PUSH
30392: LD_INT 2
30394: NEG
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 1
30402: PUSH
30403: LD_INT 1
30405: NEG
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 2
30413: PUSH
30414: LD_INT 0
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 2
30423: PUSH
30424: LD_INT 1
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 2
30433: PUSH
30434: LD_INT 2
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 1
30443: PUSH
30444: LD_INT 2
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 0
30453: PUSH
30454: LD_INT 2
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 1
30463: NEG
30464: PUSH
30465: LD_INT 1
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 2
30474: NEG
30475: PUSH
30476: LD_INT 0
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 2
30485: NEG
30486: PUSH
30487: LD_INT 1
30489: NEG
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 2
30497: NEG
30498: PUSH
30499: LD_INT 2
30501: NEG
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30528: LD_ADDR_VAR 0 56
30532: PUSH
30533: LD_INT 0
30535: PUSH
30536: LD_INT 0
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 0
30545: PUSH
30546: LD_INT 1
30548: NEG
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 1
30556: PUSH
30557: LD_INT 0
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 1
30566: PUSH
30567: LD_INT 1
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 0
30576: PUSH
30577: LD_INT 1
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 1
30586: NEG
30587: PUSH
30588: LD_INT 0
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 1
30597: NEG
30598: PUSH
30599: LD_INT 1
30601: NEG
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 1
30609: NEG
30610: PUSH
30611: LD_INT 2
30613: NEG
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 0
30621: PUSH
30622: LD_INT 2
30624: NEG
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 1
30632: PUSH
30633: LD_INT 1
30635: NEG
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 2
30643: PUSH
30644: LD_INT 0
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 2
30653: PUSH
30654: LD_INT 1
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 2
30663: PUSH
30664: LD_INT 2
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 1
30673: PUSH
30674: LD_INT 2
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 0
30683: PUSH
30684: LD_INT 2
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 1
30693: NEG
30694: PUSH
30695: LD_INT 1
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 2
30704: NEG
30705: PUSH
30706: LD_INT 0
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 2
30715: NEG
30716: PUSH
30717: LD_INT 1
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 2
30727: NEG
30728: PUSH
30729: LD_INT 2
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30758: LD_ADDR_VAR 0 57
30762: PUSH
30763: LD_INT 0
30765: PUSH
30766: LD_INT 0
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 0
30775: PUSH
30776: LD_INT 1
30778: NEG
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 1
30786: PUSH
30787: LD_INT 0
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 1
30796: PUSH
30797: LD_INT 1
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 0
30806: PUSH
30807: LD_INT 1
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 1
30816: NEG
30817: PUSH
30818: LD_INT 0
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 1
30827: NEG
30828: PUSH
30829: LD_INT 1
30831: NEG
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 1
30839: NEG
30840: PUSH
30841: LD_INT 2
30843: NEG
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 0
30851: PUSH
30852: LD_INT 2
30854: NEG
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 1
30862: PUSH
30863: LD_INT 1
30865: NEG
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 2
30873: PUSH
30874: LD_INT 0
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 2
30883: PUSH
30884: LD_INT 1
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 2
30893: PUSH
30894: LD_INT 2
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 1
30903: PUSH
30904: LD_INT 2
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 0
30913: PUSH
30914: LD_INT 2
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 1
30923: NEG
30924: PUSH
30925: LD_INT 1
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PUSH
30932: LD_INT 2
30934: NEG
30935: PUSH
30936: LD_INT 0
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 2
30945: NEG
30946: PUSH
30947: LD_INT 1
30949: NEG
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 2
30957: NEG
30958: PUSH
30959: LD_INT 2
30961: NEG
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30988: LD_ADDR_VAR 0 58
30992: PUSH
30993: LD_INT 0
30995: PUSH
30996: LD_INT 0
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 0
31005: PUSH
31006: LD_INT 1
31008: NEG
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 1
31016: PUSH
31017: LD_INT 0
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 1
31026: PUSH
31027: LD_INT 1
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 0
31036: PUSH
31037: LD_INT 1
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 1
31046: NEG
31047: PUSH
31048: LD_INT 0
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 1
31057: NEG
31058: PUSH
31059: LD_INT 1
31061: NEG
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 1
31069: NEG
31070: PUSH
31071: LD_INT 2
31073: NEG
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 0
31081: PUSH
31082: LD_INT 2
31084: NEG
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 1
31092: PUSH
31093: LD_INT 1
31095: NEG
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 2
31103: PUSH
31104: LD_INT 0
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: LD_INT 2
31113: PUSH
31114: LD_INT 1
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 2
31123: PUSH
31124: LD_INT 2
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 1
31133: PUSH
31134: LD_INT 2
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 0
31143: PUSH
31144: LD_INT 2
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 1
31153: NEG
31154: PUSH
31155: LD_INT 1
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 2
31164: NEG
31165: PUSH
31166: LD_INT 0
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 2
31175: NEG
31176: PUSH
31177: LD_INT 1
31179: NEG
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 2
31187: NEG
31188: PUSH
31189: LD_INT 2
31191: NEG
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31218: LD_ADDR_VAR 0 59
31222: PUSH
31223: LD_INT 0
31225: PUSH
31226: LD_INT 0
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 0
31235: PUSH
31236: LD_INT 1
31238: NEG
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 1
31246: PUSH
31247: LD_INT 0
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 1
31256: PUSH
31257: LD_INT 1
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 0
31266: PUSH
31267: LD_INT 1
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 1
31276: NEG
31277: PUSH
31278: LD_INT 0
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 1
31287: NEG
31288: PUSH
31289: LD_INT 1
31291: NEG
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31306: LD_ADDR_VAR 0 60
31310: PUSH
31311: LD_INT 0
31313: PUSH
31314: LD_INT 0
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 0
31323: PUSH
31324: LD_INT 1
31326: NEG
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 1
31334: PUSH
31335: LD_INT 0
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 1
31344: PUSH
31345: LD_INT 1
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 0
31354: PUSH
31355: LD_INT 1
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 1
31364: NEG
31365: PUSH
31366: LD_INT 0
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 1
31375: NEG
31376: PUSH
31377: LD_INT 1
31379: NEG
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31394: LD_ADDR_VAR 0 61
31398: PUSH
31399: LD_INT 0
31401: PUSH
31402: LD_INT 0
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 0
31411: PUSH
31412: LD_INT 1
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 1
31422: PUSH
31423: LD_INT 0
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 1
31432: PUSH
31433: LD_INT 1
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 0
31442: PUSH
31443: LD_INT 1
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 1
31452: NEG
31453: PUSH
31454: LD_INT 0
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 1
31463: NEG
31464: PUSH
31465: LD_INT 1
31467: NEG
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31482: LD_ADDR_VAR 0 62
31486: PUSH
31487: LD_INT 0
31489: PUSH
31490: LD_INT 0
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 0
31499: PUSH
31500: LD_INT 1
31502: NEG
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 1
31510: PUSH
31511: LD_INT 0
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 1
31520: PUSH
31521: LD_INT 1
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 0
31530: PUSH
31531: LD_INT 1
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 1
31540: NEG
31541: PUSH
31542: LD_INT 0
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: PUSH
31553: LD_INT 1
31555: NEG
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31570: LD_ADDR_VAR 0 63
31574: PUSH
31575: LD_INT 0
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 0
31587: PUSH
31588: LD_INT 1
31590: NEG
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 1
31598: PUSH
31599: LD_INT 0
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 1
31608: PUSH
31609: LD_INT 1
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 0
31618: PUSH
31619: LD_INT 1
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 1
31628: NEG
31629: PUSH
31630: LD_INT 0
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 1
31639: NEG
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31658: LD_ADDR_VAR 0 64
31662: PUSH
31663: LD_INT 0
31665: PUSH
31666: LD_INT 0
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 0
31675: PUSH
31676: LD_INT 1
31678: NEG
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 1
31686: PUSH
31687: LD_INT 0
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 1
31696: PUSH
31697: LD_INT 1
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 0
31706: PUSH
31707: LD_INT 1
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 1
31716: NEG
31717: PUSH
31718: LD_INT 0
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 1
31727: NEG
31728: PUSH
31729: LD_INT 1
31731: NEG
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: ST_TO_ADDR
// end ; 1 :
31746: GO 37643
31748: LD_INT 1
31750: DOUBLE
31751: EQUAL
31752: IFTRUE 31756
31754: GO 34379
31756: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31757: LD_ADDR_VAR 0 11
31761: PUSH
31762: LD_INT 1
31764: NEG
31765: PUSH
31766: LD_INT 3
31768: NEG
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 0
31776: PUSH
31777: LD_INT 3
31779: NEG
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 1
31787: PUSH
31788: LD_INT 2
31790: NEG
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: LIST
31800: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31801: LD_ADDR_VAR 0 12
31805: PUSH
31806: LD_INT 2
31808: PUSH
31809: LD_INT 1
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 3
31819: PUSH
31820: LD_INT 0
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 3
31829: PUSH
31830: LD_INT 1
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: LIST
31841: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31842: LD_ADDR_VAR 0 13
31846: PUSH
31847: LD_INT 3
31849: PUSH
31850: LD_INT 2
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 3
31859: PUSH
31860: LD_INT 3
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 2
31869: PUSH
31870: LD_INT 3
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: LIST
31881: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31882: LD_ADDR_VAR 0 14
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: LD_INT 3
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 0
31899: PUSH
31900: LD_INT 3
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 1
31909: NEG
31910: PUSH
31911: LD_INT 2
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: LIST
31922: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31923: LD_ADDR_VAR 0 15
31927: PUSH
31928: LD_INT 2
31930: NEG
31931: PUSH
31932: LD_INT 1
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 3
31941: NEG
31942: PUSH
31943: LD_INT 0
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 3
31952: NEG
31953: PUSH
31954: LD_INT 1
31956: NEG
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: LIST
31966: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31967: LD_ADDR_VAR 0 16
31971: PUSH
31972: LD_INT 2
31974: NEG
31975: PUSH
31976: LD_INT 3
31978: NEG
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 3
31986: NEG
31987: PUSH
31988: LD_INT 2
31990: NEG
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 3
31998: NEG
31999: PUSH
32000: LD_INT 3
32002: NEG
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: LIST
32012: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32013: LD_ADDR_VAR 0 17
32017: PUSH
32018: LD_INT 1
32020: NEG
32021: PUSH
32022: LD_INT 3
32024: NEG
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 0
32032: PUSH
32033: LD_INT 3
32035: NEG
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 1
32043: PUSH
32044: LD_INT 2
32046: NEG
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: LIST
32056: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32057: LD_ADDR_VAR 0 18
32061: PUSH
32062: LD_INT 2
32064: PUSH
32065: LD_INT 1
32067: NEG
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 3
32075: PUSH
32076: LD_INT 0
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 3
32085: PUSH
32086: LD_INT 1
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: LIST
32097: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32098: LD_ADDR_VAR 0 19
32102: PUSH
32103: LD_INT 3
32105: PUSH
32106: LD_INT 2
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 3
32115: PUSH
32116: LD_INT 3
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 2
32125: PUSH
32126: LD_INT 3
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: LIST
32137: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32138: LD_ADDR_VAR 0 20
32142: PUSH
32143: LD_INT 1
32145: PUSH
32146: LD_INT 3
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 0
32155: PUSH
32156: LD_INT 3
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 1
32165: NEG
32166: PUSH
32167: LD_INT 2
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: LIST
32178: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32179: LD_ADDR_VAR 0 21
32183: PUSH
32184: LD_INT 2
32186: NEG
32187: PUSH
32188: LD_INT 1
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 3
32197: NEG
32198: PUSH
32199: LD_INT 0
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 3
32208: NEG
32209: PUSH
32210: LD_INT 1
32212: NEG
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: LIST
32222: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32223: LD_ADDR_VAR 0 22
32227: PUSH
32228: LD_INT 2
32230: NEG
32231: PUSH
32232: LD_INT 3
32234: NEG
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 3
32242: NEG
32243: PUSH
32244: LD_INT 2
32246: NEG
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 3
32254: NEG
32255: PUSH
32256: LD_INT 3
32258: NEG
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: LIST
32268: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
32269: LD_ADDR_VAR 0 23
32273: PUSH
32274: LD_INT 0
32276: PUSH
32277: LD_INT 3
32279: NEG
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 1
32287: NEG
32288: PUSH
32289: LD_INT 4
32291: NEG
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 1
32299: PUSH
32300: LD_INT 3
32302: NEG
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: LIST
32312: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
32313: LD_ADDR_VAR 0 24
32317: PUSH
32318: LD_INT 3
32320: PUSH
32321: LD_INT 0
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 3
32330: PUSH
32331: LD_INT 1
32333: NEG
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 4
32341: PUSH
32342: LD_INT 1
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: LIST
32353: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
32354: LD_ADDR_VAR 0 25
32358: PUSH
32359: LD_INT 3
32361: PUSH
32362: LD_INT 3
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 4
32371: PUSH
32372: LD_INT 3
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 3
32381: PUSH
32382: LD_INT 4
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: LIST
32393: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
32394: LD_ADDR_VAR 0 26
32398: PUSH
32399: LD_INT 0
32401: PUSH
32402: LD_INT 3
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 1
32411: PUSH
32412: LD_INT 4
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 1
32421: NEG
32422: PUSH
32423: LD_INT 3
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: LIST
32434: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
32435: LD_ADDR_VAR 0 27
32439: PUSH
32440: LD_INT 3
32442: NEG
32443: PUSH
32444: LD_INT 0
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 3
32453: NEG
32454: PUSH
32455: LD_INT 1
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 4
32464: NEG
32465: PUSH
32466: LD_INT 1
32468: NEG
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: LIST
32478: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
32479: LD_ADDR_VAR 0 28
32483: PUSH
32484: LD_INT 3
32486: NEG
32487: PUSH
32488: LD_INT 3
32490: NEG
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 3
32498: NEG
32499: PUSH
32500: LD_INT 4
32502: NEG
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 4
32510: NEG
32511: PUSH
32512: LD_INT 3
32514: NEG
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: LIST
32524: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
32525: LD_ADDR_VAR 0 29
32529: PUSH
32530: LD_INT 1
32532: NEG
32533: PUSH
32534: LD_INT 3
32536: NEG
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 0
32544: PUSH
32545: LD_INT 3
32547: NEG
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 1
32555: PUSH
32556: LD_INT 2
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 1
32566: NEG
32567: PUSH
32568: LD_INT 4
32570: NEG
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 0
32578: PUSH
32579: LD_INT 4
32581: NEG
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: LD_INT 3
32592: NEG
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 1
32600: NEG
32601: PUSH
32602: LD_INT 5
32604: NEG
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 0
32612: PUSH
32613: LD_INT 5
32615: NEG
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 1
32623: PUSH
32624: LD_INT 4
32626: NEG
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 1
32634: NEG
32635: PUSH
32636: LD_INT 6
32638: NEG
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 0
32646: PUSH
32647: LD_INT 6
32649: NEG
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 1
32657: PUSH
32658: LD_INT 5
32660: NEG
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
32680: LD_ADDR_VAR 0 30
32684: PUSH
32685: LD_INT 2
32687: PUSH
32688: LD_INT 1
32690: NEG
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 3
32698: PUSH
32699: LD_INT 0
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 3
32708: PUSH
32709: LD_INT 1
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 3
32718: PUSH
32719: LD_INT 1
32721: NEG
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 4
32729: PUSH
32730: LD_INT 0
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 4
32739: PUSH
32740: LD_INT 1
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 4
32749: PUSH
32750: LD_INT 1
32752: NEG
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 5
32760: PUSH
32761: LD_INT 0
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 5
32770: PUSH
32771: LD_INT 1
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 5
32780: PUSH
32781: LD_INT 1
32783: NEG
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 6
32791: PUSH
32792: LD_INT 0
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 6
32801: PUSH
32802: LD_INT 1
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
32823: LD_ADDR_VAR 0 31
32827: PUSH
32828: LD_INT 3
32830: PUSH
32831: LD_INT 2
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 3
32840: PUSH
32841: LD_INT 3
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 2
32850: PUSH
32851: LD_INT 3
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 4
32860: PUSH
32861: LD_INT 3
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 4
32870: PUSH
32871: LD_INT 4
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 3
32880: PUSH
32881: LD_INT 4
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 5
32890: PUSH
32891: LD_INT 4
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 5
32900: PUSH
32901: LD_INT 5
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 4
32910: PUSH
32911: LD_INT 5
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 6
32920: PUSH
32921: LD_INT 5
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 6
32930: PUSH
32931: LD_INT 6
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 5
32940: PUSH
32941: LD_INT 6
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
32962: LD_ADDR_VAR 0 32
32966: PUSH
32967: LD_INT 1
32969: PUSH
32970: LD_INT 3
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 0
32979: PUSH
32980: LD_INT 3
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 1
32989: NEG
32990: PUSH
32991: LD_INT 2
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 1
33000: PUSH
33001: LD_INT 4
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 0
33010: PUSH
33011: LD_INT 4
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 1
33020: NEG
33021: PUSH
33022: LD_INT 3
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 1
33031: PUSH
33032: LD_INT 5
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 0
33041: PUSH
33042: LD_INT 5
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 1
33051: NEG
33052: PUSH
33053: LD_INT 4
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 1
33062: PUSH
33063: LD_INT 6
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 0
33072: PUSH
33073: LD_INT 6
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 1
33082: NEG
33083: PUSH
33084: LD_INT 5
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
33105: LD_ADDR_VAR 0 33
33109: PUSH
33110: LD_INT 2
33112: NEG
33113: PUSH
33114: LD_INT 1
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 3
33123: NEG
33124: PUSH
33125: LD_INT 0
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 3
33134: NEG
33135: PUSH
33136: LD_INT 1
33138: NEG
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 3
33146: NEG
33147: PUSH
33148: LD_INT 1
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 4
33157: NEG
33158: PUSH
33159: LD_INT 0
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 4
33168: NEG
33169: PUSH
33170: LD_INT 1
33172: NEG
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 4
33180: NEG
33181: PUSH
33182: LD_INT 1
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 5
33191: NEG
33192: PUSH
33193: LD_INT 0
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 5
33202: NEG
33203: PUSH
33204: LD_INT 1
33206: NEG
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 5
33214: NEG
33215: PUSH
33216: LD_INT 1
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 6
33225: NEG
33226: PUSH
33227: LD_INT 0
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 6
33236: NEG
33237: PUSH
33238: LD_INT 1
33240: NEG
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
33260: LD_ADDR_VAR 0 34
33264: PUSH
33265: LD_INT 2
33267: NEG
33268: PUSH
33269: LD_INT 3
33271: NEG
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 3
33279: NEG
33280: PUSH
33281: LD_INT 2
33283: NEG
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 3
33291: NEG
33292: PUSH
33293: LD_INT 3
33295: NEG
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 3
33303: NEG
33304: PUSH
33305: LD_INT 4
33307: NEG
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 4
33315: NEG
33316: PUSH
33317: LD_INT 3
33319: NEG
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 4
33327: NEG
33328: PUSH
33329: LD_INT 4
33331: NEG
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 4
33339: NEG
33340: PUSH
33341: LD_INT 5
33343: NEG
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 5
33351: NEG
33352: PUSH
33353: LD_INT 4
33355: NEG
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 5
33363: NEG
33364: PUSH
33365: LD_INT 5
33367: NEG
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 5
33375: NEG
33376: PUSH
33377: LD_INT 6
33379: NEG
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 6
33387: NEG
33388: PUSH
33389: LD_INT 5
33391: NEG
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 6
33399: NEG
33400: PUSH
33401: LD_INT 6
33403: NEG
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
33423: LD_ADDR_VAR 0 41
33427: PUSH
33428: LD_INT 0
33430: PUSH
33431: LD_INT 2
33433: NEG
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 1
33441: NEG
33442: PUSH
33443: LD_INT 3
33445: NEG
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 1
33453: PUSH
33454: LD_INT 2
33456: NEG
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: LIST
33466: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
33467: LD_ADDR_VAR 0 42
33471: PUSH
33472: LD_INT 2
33474: PUSH
33475: LD_INT 0
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 2
33484: PUSH
33485: LD_INT 1
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 3
33495: PUSH
33496: LD_INT 1
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: LIST
33507: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
33508: LD_ADDR_VAR 0 43
33512: PUSH
33513: LD_INT 2
33515: PUSH
33516: LD_INT 2
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 3
33525: PUSH
33526: LD_INT 2
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 2
33535: PUSH
33536: LD_INT 3
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: LIST
33547: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
33548: LD_ADDR_VAR 0 44
33552: PUSH
33553: LD_INT 0
33555: PUSH
33556: LD_INT 2
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 1
33565: PUSH
33566: LD_INT 3
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 1
33575: NEG
33576: PUSH
33577: LD_INT 2
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: LIST
33588: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33589: LD_ADDR_VAR 0 45
33593: PUSH
33594: LD_INT 2
33596: NEG
33597: PUSH
33598: LD_INT 0
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 2
33607: NEG
33608: PUSH
33609: LD_INT 1
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 3
33618: NEG
33619: PUSH
33620: LD_INT 1
33622: NEG
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: LIST
33632: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
33633: LD_ADDR_VAR 0 46
33637: PUSH
33638: LD_INT 2
33640: NEG
33641: PUSH
33642: LD_INT 2
33644: NEG
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 2
33652: NEG
33653: PUSH
33654: LD_INT 3
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 3
33664: NEG
33665: PUSH
33666: LD_INT 2
33668: NEG
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: LIST
33678: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
33679: LD_ADDR_VAR 0 47
33683: PUSH
33684: LD_INT 2
33686: NEG
33687: PUSH
33688: LD_INT 3
33690: NEG
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 1
33698: NEG
33699: PUSH
33700: LD_INT 3
33702: NEG
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33712: LD_ADDR_VAR 0 48
33716: PUSH
33717: LD_INT 1
33719: PUSH
33720: LD_INT 2
33722: NEG
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 2
33730: PUSH
33731: LD_INT 1
33733: NEG
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
33743: LD_ADDR_VAR 0 49
33747: PUSH
33748: LD_INT 3
33750: PUSH
33751: LD_INT 1
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 3
33760: PUSH
33761: LD_INT 2
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
33772: LD_ADDR_VAR 0 50
33776: PUSH
33777: LD_INT 2
33779: PUSH
33780: LD_INT 3
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 1
33789: PUSH
33790: LD_INT 3
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33801: LD_ADDR_VAR 0 51
33805: PUSH
33806: LD_INT 1
33808: NEG
33809: PUSH
33810: LD_INT 2
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 2
33819: NEG
33820: PUSH
33821: LD_INT 1
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33832: LD_ADDR_VAR 0 52
33836: PUSH
33837: LD_INT 3
33839: NEG
33840: PUSH
33841: LD_INT 1
33843: NEG
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 3
33851: NEG
33852: PUSH
33853: LD_INT 2
33855: NEG
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33865: LD_ADDR_VAR 0 53
33869: PUSH
33870: LD_INT 1
33872: NEG
33873: PUSH
33874: LD_INT 3
33876: NEG
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 0
33884: PUSH
33885: LD_INT 3
33887: NEG
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 1
33895: PUSH
33896: LD_INT 2
33898: NEG
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: LIST
33908: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33909: LD_ADDR_VAR 0 54
33913: PUSH
33914: LD_INT 2
33916: PUSH
33917: LD_INT 1
33919: NEG
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 3
33927: PUSH
33928: LD_INT 0
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 3
33937: PUSH
33938: LD_INT 1
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: LIST
33949: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33950: LD_ADDR_VAR 0 55
33954: PUSH
33955: LD_INT 3
33957: PUSH
33958: LD_INT 2
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 3
33967: PUSH
33968: LD_INT 3
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 2
33977: PUSH
33978: LD_INT 3
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: LIST
33989: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33990: LD_ADDR_VAR 0 56
33994: PUSH
33995: LD_INT 1
33997: PUSH
33998: LD_INT 3
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 0
34007: PUSH
34008: LD_INT 3
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 1
34017: NEG
34018: PUSH
34019: LD_INT 2
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: LIST
34030: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34031: LD_ADDR_VAR 0 57
34035: PUSH
34036: LD_INT 2
34038: NEG
34039: PUSH
34040: LD_INT 1
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 3
34049: NEG
34050: PUSH
34051: LD_INT 0
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 3
34060: NEG
34061: PUSH
34062: LD_INT 1
34064: NEG
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: LIST
34074: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34075: LD_ADDR_VAR 0 58
34079: PUSH
34080: LD_INT 2
34082: NEG
34083: PUSH
34084: LD_INT 3
34086: NEG
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 3
34094: NEG
34095: PUSH
34096: LD_INT 2
34098: NEG
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 3
34106: NEG
34107: PUSH
34108: LD_INT 3
34110: NEG
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: LIST
34120: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
34121: LD_ADDR_VAR 0 59
34125: PUSH
34126: LD_INT 1
34128: NEG
34129: PUSH
34130: LD_INT 2
34132: NEG
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 0
34140: PUSH
34141: LD_INT 2
34143: NEG
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 1
34151: PUSH
34152: LD_INT 1
34154: NEG
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: LIST
34164: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34165: LD_ADDR_VAR 0 60
34169: PUSH
34170: LD_INT 1
34172: PUSH
34173: LD_INT 1
34175: NEG
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 2
34183: PUSH
34184: LD_INT 0
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 2
34193: PUSH
34194: LD_INT 1
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: LIST
34205: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34206: LD_ADDR_VAR 0 61
34210: PUSH
34211: LD_INT 2
34213: PUSH
34214: LD_INT 1
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 2
34223: PUSH
34224: LD_INT 2
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: LD_INT 2
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: LIST
34245: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34246: LD_ADDR_VAR 0 62
34250: PUSH
34251: LD_INT 1
34253: PUSH
34254: LD_INT 2
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 0
34263: PUSH
34264: LD_INT 2
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 1
34273: NEG
34274: PUSH
34275: LD_INT 1
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: LIST
34286: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34287: LD_ADDR_VAR 0 63
34291: PUSH
34292: LD_INT 1
34294: NEG
34295: PUSH
34296: LD_INT 1
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 2
34305: NEG
34306: PUSH
34307: LD_INT 0
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 2
34316: NEG
34317: PUSH
34318: LD_INT 1
34320: NEG
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: LIST
34330: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34331: LD_ADDR_VAR 0 64
34335: PUSH
34336: LD_INT 1
34338: NEG
34339: PUSH
34340: LD_INT 2
34342: NEG
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 2
34350: NEG
34351: PUSH
34352: LD_INT 1
34354: NEG
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 2
34362: NEG
34363: PUSH
34364: LD_INT 2
34366: NEG
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: LIST
34376: ST_TO_ADDR
// end ; 2 :
34377: GO 37643
34379: LD_INT 2
34381: DOUBLE
34382: EQUAL
34383: IFTRUE 34387
34385: GO 37642
34387: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
34388: LD_ADDR_VAR 0 29
34392: PUSH
34393: LD_INT 4
34395: PUSH
34396: LD_INT 0
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 4
34405: PUSH
34406: LD_INT 1
34408: NEG
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 5
34416: PUSH
34417: LD_INT 0
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 5
34426: PUSH
34427: LD_INT 1
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 4
34436: PUSH
34437: LD_INT 1
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 3
34446: PUSH
34447: LD_INT 0
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 3
34456: PUSH
34457: LD_INT 1
34459: NEG
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 3
34467: PUSH
34468: LD_INT 2
34470: NEG
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 5
34478: PUSH
34479: LD_INT 2
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 3
34488: PUSH
34489: LD_INT 3
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 3
34498: PUSH
34499: LD_INT 2
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 4
34508: PUSH
34509: LD_INT 3
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 4
34518: PUSH
34519: LD_INT 4
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 3
34528: PUSH
34529: LD_INT 4
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 2
34538: PUSH
34539: LD_INT 3
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 2
34548: PUSH
34549: LD_INT 2
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 4
34558: PUSH
34559: LD_INT 2
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 2
34568: PUSH
34569: LD_INT 4
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 0
34578: PUSH
34579: LD_INT 4
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 0
34588: PUSH
34589: LD_INT 3
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 1
34598: PUSH
34599: LD_INT 4
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 1
34608: PUSH
34609: LD_INT 5
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: LD_INT 0
34618: PUSH
34619: LD_INT 5
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 1
34628: NEG
34629: PUSH
34630: LD_INT 4
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 1
34639: NEG
34640: PUSH
34641: LD_INT 3
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 2
34650: PUSH
34651: LD_INT 5
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 2
34660: NEG
34661: PUSH
34662: LD_INT 3
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 3
34671: NEG
34672: PUSH
34673: LD_INT 0
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 3
34682: NEG
34683: PUSH
34684: LD_INT 1
34686: NEG
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 2
34694: NEG
34695: PUSH
34696: LD_INT 0
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 2
34705: NEG
34706: PUSH
34707: LD_INT 1
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 3
34716: NEG
34717: PUSH
34718: LD_INT 1
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 4
34727: NEG
34728: PUSH
34729: LD_INT 0
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 4
34738: NEG
34739: PUSH
34740: LD_INT 1
34742: NEG
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 4
34750: NEG
34751: PUSH
34752: LD_INT 2
34754: NEG
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 2
34762: NEG
34763: PUSH
34764: LD_INT 2
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 4
34773: NEG
34774: PUSH
34775: LD_INT 4
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 4
34785: NEG
34786: PUSH
34787: LD_INT 5
34789: NEG
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 3
34797: NEG
34798: PUSH
34799: LD_INT 4
34801: NEG
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 3
34809: NEG
34810: PUSH
34811: LD_INT 3
34813: NEG
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 4
34821: NEG
34822: PUSH
34823: LD_INT 3
34825: NEG
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 5
34833: NEG
34834: PUSH
34835: LD_INT 4
34837: NEG
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 5
34845: NEG
34846: PUSH
34847: LD_INT 5
34849: NEG
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 3
34857: NEG
34858: PUSH
34859: LD_INT 5
34861: NEG
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 5
34869: NEG
34870: PUSH
34871: LD_INT 3
34873: NEG
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
34926: LD_ADDR_VAR 0 30
34930: PUSH
34931: LD_INT 4
34933: PUSH
34934: LD_INT 4
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 4
34943: PUSH
34944: LD_INT 3
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 5
34953: PUSH
34954: LD_INT 4
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 5
34963: PUSH
34964: LD_INT 5
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 4
34973: PUSH
34974: LD_INT 5
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 3
34983: PUSH
34984: LD_INT 4
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 3
34993: PUSH
34994: LD_INT 3
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 5
35003: PUSH
35004: LD_INT 3
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 3
35013: PUSH
35014: LD_INT 5
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 0
35023: PUSH
35024: LD_INT 3
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 0
35033: PUSH
35034: LD_INT 2
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 1
35043: PUSH
35044: LD_INT 3
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 1
35053: PUSH
35054: LD_INT 4
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 0
35063: PUSH
35064: LD_INT 4
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: NEG
35074: PUSH
35075: LD_INT 3
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 1
35084: NEG
35085: PUSH
35086: LD_INT 2
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 2
35095: PUSH
35096: LD_INT 4
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 2
35105: NEG
35106: PUSH
35107: LD_INT 2
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 4
35116: NEG
35117: PUSH
35118: LD_INT 0
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 4
35127: NEG
35128: PUSH
35129: LD_INT 1
35131: NEG
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 3
35139: NEG
35140: PUSH
35141: LD_INT 0
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 3
35150: NEG
35151: PUSH
35152: LD_INT 1
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 4
35161: NEG
35162: PUSH
35163: LD_INT 1
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 5
35172: NEG
35173: PUSH
35174: LD_INT 0
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 5
35183: NEG
35184: PUSH
35185: LD_INT 1
35187: NEG
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 5
35195: NEG
35196: PUSH
35197: LD_INT 2
35199: NEG
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 3
35207: NEG
35208: PUSH
35209: LD_INT 2
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 3
35218: NEG
35219: PUSH
35220: LD_INT 3
35222: NEG
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 3
35230: NEG
35231: PUSH
35232: LD_INT 4
35234: NEG
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 2
35242: NEG
35243: PUSH
35244: LD_INT 3
35246: NEG
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 2
35254: NEG
35255: PUSH
35256: LD_INT 2
35258: NEG
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 3
35266: NEG
35267: PUSH
35268: LD_INT 2
35270: NEG
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 4
35278: NEG
35279: PUSH
35280: LD_INT 3
35282: NEG
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 4
35290: NEG
35291: PUSH
35292: LD_INT 4
35294: NEG
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 2
35302: NEG
35303: PUSH
35304: LD_INT 4
35306: NEG
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 4
35314: NEG
35315: PUSH
35316: LD_INT 2
35318: NEG
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 0
35326: PUSH
35327: LD_INT 4
35329: NEG
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 0
35337: PUSH
35338: LD_INT 5
35340: NEG
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 1
35348: PUSH
35349: LD_INT 4
35351: NEG
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 1
35359: PUSH
35360: LD_INT 3
35362: NEG
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 0
35370: PUSH
35371: LD_INT 3
35373: NEG
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 1
35381: NEG
35382: PUSH
35383: LD_INT 4
35385: NEG
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 1
35393: NEG
35394: PUSH
35395: LD_INT 5
35397: NEG
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 2
35405: PUSH
35406: LD_INT 3
35408: NEG
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 2
35416: NEG
35417: PUSH
35418: LD_INT 5
35420: NEG
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
35473: LD_ADDR_VAR 0 31
35477: PUSH
35478: LD_INT 0
35480: PUSH
35481: LD_INT 4
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 0
35490: PUSH
35491: LD_INT 3
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 1
35500: PUSH
35501: LD_INT 4
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 1
35510: PUSH
35511: LD_INT 5
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 0
35520: PUSH
35521: LD_INT 5
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 1
35530: NEG
35531: PUSH
35532: LD_INT 4
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 1
35541: NEG
35542: PUSH
35543: LD_INT 3
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 2
35552: PUSH
35553: LD_INT 5
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 2
35562: NEG
35563: PUSH
35564: LD_INT 3
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 3
35573: NEG
35574: PUSH
35575: LD_INT 0
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 3
35584: NEG
35585: PUSH
35586: LD_INT 1
35588: NEG
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 2
35596: NEG
35597: PUSH
35598: LD_INT 0
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 2
35607: NEG
35608: PUSH
35609: LD_INT 1
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 3
35618: NEG
35619: PUSH
35620: LD_INT 1
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 4
35629: NEG
35630: PUSH
35631: LD_INT 0
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 4
35640: NEG
35641: PUSH
35642: LD_INT 1
35644: NEG
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 4
35652: NEG
35653: PUSH
35654: LD_INT 2
35656: NEG
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 2
35664: NEG
35665: PUSH
35666: LD_INT 2
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 4
35675: NEG
35676: PUSH
35677: LD_INT 4
35679: NEG
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 4
35687: NEG
35688: PUSH
35689: LD_INT 5
35691: NEG
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 3
35699: NEG
35700: PUSH
35701: LD_INT 4
35703: NEG
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 3
35711: NEG
35712: PUSH
35713: LD_INT 3
35715: NEG
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 4
35723: NEG
35724: PUSH
35725: LD_INT 3
35727: NEG
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 5
35735: NEG
35736: PUSH
35737: LD_INT 4
35739: NEG
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 5
35747: NEG
35748: PUSH
35749: LD_INT 5
35751: NEG
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 3
35759: NEG
35760: PUSH
35761: LD_INT 5
35763: NEG
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 5
35771: NEG
35772: PUSH
35773: LD_INT 3
35775: NEG
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 0
35783: PUSH
35784: LD_INT 3
35786: NEG
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 0
35794: PUSH
35795: LD_INT 4
35797: NEG
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 1
35805: PUSH
35806: LD_INT 3
35808: NEG
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 1
35816: PUSH
35817: LD_INT 2
35819: NEG
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 0
35827: PUSH
35828: LD_INT 2
35830: NEG
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 1
35838: NEG
35839: PUSH
35840: LD_INT 3
35842: NEG
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 1
35850: NEG
35851: PUSH
35852: LD_INT 4
35854: NEG
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 2
35862: PUSH
35863: LD_INT 2
35865: NEG
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 2
35873: NEG
35874: PUSH
35875: LD_INT 4
35877: NEG
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 4
35885: PUSH
35886: LD_INT 0
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 4
35895: PUSH
35896: LD_INT 1
35898: NEG
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 5
35906: PUSH
35907: LD_INT 0
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 5
35916: PUSH
35917: LD_INT 1
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 4
35926: PUSH
35927: LD_INT 1
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 3
35936: PUSH
35937: LD_INT 0
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 3
35946: PUSH
35947: LD_INT 1
35949: NEG
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 3
35957: PUSH
35958: LD_INT 2
35960: NEG
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 5
35968: PUSH
35969: LD_INT 2
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
36023: LD_ADDR_VAR 0 32
36027: PUSH
36028: LD_INT 4
36030: NEG
36031: PUSH
36032: LD_INT 0
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 4
36041: NEG
36042: PUSH
36043: LD_INT 1
36045: NEG
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 3
36053: NEG
36054: PUSH
36055: LD_INT 0
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 3
36064: NEG
36065: PUSH
36066: LD_INT 1
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 4
36075: NEG
36076: PUSH
36077: LD_INT 1
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 5
36086: NEG
36087: PUSH
36088: LD_INT 0
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 5
36097: NEG
36098: PUSH
36099: LD_INT 1
36101: NEG
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 5
36109: NEG
36110: PUSH
36111: LD_INT 2
36113: NEG
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 3
36121: NEG
36122: PUSH
36123: LD_INT 2
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 3
36132: NEG
36133: PUSH
36134: LD_INT 3
36136: NEG
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 3
36144: NEG
36145: PUSH
36146: LD_INT 4
36148: NEG
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 2
36156: NEG
36157: PUSH
36158: LD_INT 3
36160: NEG
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 2
36168: NEG
36169: PUSH
36170: LD_INT 2
36172: NEG
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 3
36180: NEG
36181: PUSH
36182: LD_INT 2
36184: NEG
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 4
36192: NEG
36193: PUSH
36194: LD_INT 3
36196: NEG
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 4
36204: NEG
36205: PUSH
36206: LD_INT 4
36208: NEG
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 2
36216: NEG
36217: PUSH
36218: LD_INT 4
36220: NEG
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 4
36228: NEG
36229: PUSH
36230: LD_INT 2
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 0
36240: PUSH
36241: LD_INT 4
36243: NEG
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: LD_INT 5
36254: NEG
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 1
36262: PUSH
36263: LD_INT 4
36265: NEG
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 1
36273: PUSH
36274: LD_INT 3
36276: NEG
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 0
36284: PUSH
36285: LD_INT 3
36287: NEG
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 1
36295: NEG
36296: PUSH
36297: LD_INT 4
36299: NEG
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 1
36307: NEG
36308: PUSH
36309: LD_INT 5
36311: NEG
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 2
36319: PUSH
36320: LD_INT 3
36322: NEG
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 2
36330: NEG
36331: PUSH
36332: LD_INT 5
36334: NEG
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 3
36342: PUSH
36343: LD_INT 0
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 3
36352: PUSH
36353: LD_INT 1
36355: NEG
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 4
36363: PUSH
36364: LD_INT 0
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 4
36373: PUSH
36374: LD_INT 1
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 3
36383: PUSH
36384: LD_INT 1
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 2
36393: PUSH
36394: LD_INT 0
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 2
36403: PUSH
36404: LD_INT 1
36406: NEG
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 2
36414: PUSH
36415: LD_INT 2
36417: NEG
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 4
36425: PUSH
36426: LD_INT 2
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 4
36435: PUSH
36436: LD_INT 4
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 4
36445: PUSH
36446: LD_INT 3
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 5
36455: PUSH
36456: LD_INT 4
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 5
36465: PUSH
36466: LD_INT 5
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 4
36475: PUSH
36476: LD_INT 5
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 3
36485: PUSH
36486: LD_INT 4
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 3
36495: PUSH
36496: LD_INT 3
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 5
36505: PUSH
36506: LD_INT 3
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 3
36515: PUSH
36516: LD_INT 5
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
36570: LD_ADDR_VAR 0 33
36574: PUSH
36575: LD_INT 4
36577: NEG
36578: PUSH
36579: LD_INT 4
36581: NEG
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 4
36589: NEG
36590: PUSH
36591: LD_INT 5
36593: NEG
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 3
36601: NEG
36602: PUSH
36603: LD_INT 4
36605: NEG
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 3
36613: NEG
36614: PUSH
36615: LD_INT 3
36617: NEG
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 4
36625: NEG
36626: PUSH
36627: LD_INT 3
36629: NEG
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 5
36637: NEG
36638: PUSH
36639: LD_INT 4
36641: NEG
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 5
36649: NEG
36650: PUSH
36651: LD_INT 5
36653: NEG
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 3
36661: NEG
36662: PUSH
36663: LD_INT 5
36665: NEG
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 5
36673: NEG
36674: PUSH
36675: LD_INT 3
36677: NEG
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: LD_INT 3
36688: NEG
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 0
36696: PUSH
36697: LD_INT 4
36699: NEG
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 1
36707: PUSH
36708: LD_INT 3
36710: NEG
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 1
36718: PUSH
36719: LD_INT 2
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 0
36729: PUSH
36730: LD_INT 2
36732: NEG
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 1
36740: NEG
36741: PUSH
36742: LD_INT 3
36744: NEG
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 1
36752: NEG
36753: PUSH
36754: LD_INT 4
36756: NEG
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 2
36764: PUSH
36765: LD_INT 2
36767: NEG
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 2
36775: NEG
36776: PUSH
36777: LD_INT 4
36779: NEG
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 4
36787: PUSH
36788: LD_INT 0
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 4
36797: PUSH
36798: LD_INT 1
36800: NEG
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 5
36808: PUSH
36809: LD_INT 0
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 5
36818: PUSH
36819: LD_INT 1
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 4
36828: PUSH
36829: LD_INT 1
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 3
36838: PUSH
36839: LD_INT 0
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 3
36848: PUSH
36849: LD_INT 1
36851: NEG
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 3
36859: PUSH
36860: LD_INT 2
36862: NEG
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 5
36870: PUSH
36871: LD_INT 2
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 3
36880: PUSH
36881: LD_INT 3
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 3
36890: PUSH
36891: LD_INT 2
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 4
36900: PUSH
36901: LD_INT 3
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 4
36910: PUSH
36911: LD_INT 4
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 3
36920: PUSH
36921: LD_INT 4
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 2
36930: PUSH
36931: LD_INT 3
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 2
36940: PUSH
36941: LD_INT 2
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 4
36950: PUSH
36951: LD_INT 2
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 2
36960: PUSH
36961: LD_INT 4
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 0
36970: PUSH
36971: LD_INT 4
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 0
36980: PUSH
36981: LD_INT 3
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 1
36990: PUSH
36991: LD_INT 4
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 1
37000: PUSH
37001: LD_INT 5
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 0
37010: PUSH
37011: LD_INT 5
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 1
37020: NEG
37021: PUSH
37022: LD_INT 4
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 1
37031: NEG
37032: PUSH
37033: LD_INT 3
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 2
37042: PUSH
37043: LD_INT 5
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 2
37052: NEG
37053: PUSH
37054: LD_INT 3
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
37108: LD_ADDR_VAR 0 34
37112: PUSH
37113: LD_INT 0
37115: PUSH
37116: LD_INT 4
37118: NEG
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 0
37126: PUSH
37127: LD_INT 5
37129: NEG
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: LD_INT 1
37137: PUSH
37138: LD_INT 4
37140: NEG
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 1
37148: PUSH
37149: LD_INT 3
37151: NEG
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: LD_INT 3
37162: NEG
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 1
37170: NEG
37171: PUSH
37172: LD_INT 4
37174: NEG
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 1
37182: NEG
37183: PUSH
37184: LD_INT 5
37186: NEG
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 2
37194: PUSH
37195: LD_INT 3
37197: NEG
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 2
37205: NEG
37206: PUSH
37207: LD_INT 5
37209: NEG
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 3
37217: PUSH
37218: LD_INT 0
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 3
37227: PUSH
37228: LD_INT 1
37230: NEG
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 4
37238: PUSH
37239: LD_INT 0
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 4
37248: PUSH
37249: LD_INT 1
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 3
37258: PUSH
37259: LD_INT 1
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 2
37268: PUSH
37269: LD_INT 0
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 2
37278: PUSH
37279: LD_INT 1
37281: NEG
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 2
37289: PUSH
37290: LD_INT 2
37292: NEG
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 4
37300: PUSH
37301: LD_INT 2
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 4
37310: PUSH
37311: LD_INT 4
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 4
37320: PUSH
37321: LD_INT 3
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 5
37330: PUSH
37331: LD_INT 4
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 5
37340: PUSH
37341: LD_INT 5
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: LD_INT 4
37350: PUSH
37351: LD_INT 5
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 3
37360: PUSH
37361: LD_INT 4
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 3
37370: PUSH
37371: LD_INT 3
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 5
37380: PUSH
37381: LD_INT 3
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 3
37390: PUSH
37391: LD_INT 5
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 0
37400: PUSH
37401: LD_INT 3
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 0
37410: PUSH
37411: LD_INT 2
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 1
37420: PUSH
37421: LD_INT 3
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 1
37430: PUSH
37431: LD_INT 4
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 0
37440: PUSH
37441: LD_INT 4
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 1
37450: NEG
37451: PUSH
37452: LD_INT 3
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 1
37461: NEG
37462: PUSH
37463: LD_INT 2
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 2
37472: PUSH
37473: LD_INT 4
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 2
37482: NEG
37483: PUSH
37484: LD_INT 2
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 4
37493: NEG
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 4
37504: NEG
37505: PUSH
37506: LD_INT 1
37508: NEG
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 3
37516: NEG
37517: PUSH
37518: LD_INT 0
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 3
37527: NEG
37528: PUSH
37529: LD_INT 1
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 4
37538: NEG
37539: PUSH
37540: LD_INT 1
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 5
37549: NEG
37550: PUSH
37551: LD_INT 0
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 5
37560: NEG
37561: PUSH
37562: LD_INT 1
37564: NEG
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 5
37572: NEG
37573: PUSH
37574: LD_INT 2
37576: NEG
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 3
37584: NEG
37585: PUSH
37586: LD_INT 2
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: ST_TO_ADDR
// end ; end ;
37640: GO 37643
37642: POP
// case btype of b_depot , b_warehouse :
37643: LD_VAR 0 1
37647: PUSH
37648: LD_INT 0
37650: DOUBLE
37651: EQUAL
37652: IFTRUE 37662
37654: LD_INT 1
37656: DOUBLE
37657: EQUAL
37658: IFTRUE 37662
37660: GO 37863
37662: POP
// case nation of nation_american :
37663: LD_VAR 0 5
37667: PUSH
37668: LD_INT 1
37670: DOUBLE
37671: EQUAL
37672: IFTRUE 37676
37674: GO 37732
37676: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
37677: LD_ADDR_VAR 0 9
37681: PUSH
37682: LD_VAR 0 11
37686: PUSH
37687: LD_VAR 0 12
37691: PUSH
37692: LD_VAR 0 13
37696: PUSH
37697: LD_VAR 0 14
37701: PUSH
37702: LD_VAR 0 15
37706: PUSH
37707: LD_VAR 0 16
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: PUSH
37720: LD_VAR 0 4
37724: PUSH
37725: LD_INT 1
37727: PLUS
37728: ARRAY
37729: ST_TO_ADDR
37730: GO 37861
37732: LD_INT 2
37734: DOUBLE
37735: EQUAL
37736: IFTRUE 37740
37738: GO 37796
37740: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
37741: LD_ADDR_VAR 0 9
37745: PUSH
37746: LD_VAR 0 17
37750: PUSH
37751: LD_VAR 0 18
37755: PUSH
37756: LD_VAR 0 19
37760: PUSH
37761: LD_VAR 0 20
37765: PUSH
37766: LD_VAR 0 21
37770: PUSH
37771: LD_VAR 0 22
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: PUSH
37784: LD_VAR 0 4
37788: PUSH
37789: LD_INT 1
37791: PLUS
37792: ARRAY
37793: ST_TO_ADDR
37794: GO 37861
37796: LD_INT 3
37798: DOUBLE
37799: EQUAL
37800: IFTRUE 37804
37802: GO 37860
37804: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
37805: LD_ADDR_VAR 0 9
37809: PUSH
37810: LD_VAR 0 23
37814: PUSH
37815: LD_VAR 0 24
37819: PUSH
37820: LD_VAR 0 25
37824: PUSH
37825: LD_VAR 0 26
37829: PUSH
37830: LD_VAR 0 27
37834: PUSH
37835: LD_VAR 0 28
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: PUSH
37848: LD_VAR 0 4
37852: PUSH
37853: LD_INT 1
37855: PLUS
37856: ARRAY
37857: ST_TO_ADDR
37858: GO 37861
37860: POP
37861: GO 38416
37863: LD_INT 2
37865: DOUBLE
37866: EQUAL
37867: IFTRUE 37877
37869: LD_INT 3
37871: DOUBLE
37872: EQUAL
37873: IFTRUE 37877
37875: GO 37933
37877: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
37878: LD_ADDR_VAR 0 9
37882: PUSH
37883: LD_VAR 0 29
37887: PUSH
37888: LD_VAR 0 30
37892: PUSH
37893: LD_VAR 0 31
37897: PUSH
37898: LD_VAR 0 32
37902: PUSH
37903: LD_VAR 0 33
37907: PUSH
37908: LD_VAR 0 34
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: PUSH
37921: LD_VAR 0 4
37925: PUSH
37926: LD_INT 1
37928: PLUS
37929: ARRAY
37930: ST_TO_ADDR
37931: GO 38416
37933: LD_INT 16
37935: DOUBLE
37936: EQUAL
37937: IFTRUE 37995
37939: LD_INT 17
37941: DOUBLE
37942: EQUAL
37943: IFTRUE 37995
37945: LD_INT 18
37947: DOUBLE
37948: EQUAL
37949: IFTRUE 37995
37951: LD_INT 19
37953: DOUBLE
37954: EQUAL
37955: IFTRUE 37995
37957: LD_INT 22
37959: DOUBLE
37960: EQUAL
37961: IFTRUE 37995
37963: LD_INT 20
37965: DOUBLE
37966: EQUAL
37967: IFTRUE 37995
37969: LD_INT 21
37971: DOUBLE
37972: EQUAL
37973: IFTRUE 37995
37975: LD_INT 23
37977: DOUBLE
37978: EQUAL
37979: IFTRUE 37995
37981: LD_INT 24
37983: DOUBLE
37984: EQUAL
37985: IFTRUE 37995
37987: LD_INT 25
37989: DOUBLE
37990: EQUAL
37991: IFTRUE 37995
37993: GO 38051
37995: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
37996: LD_ADDR_VAR 0 9
38000: PUSH
38001: LD_VAR 0 35
38005: PUSH
38006: LD_VAR 0 36
38010: PUSH
38011: LD_VAR 0 37
38015: PUSH
38016: LD_VAR 0 38
38020: PUSH
38021: LD_VAR 0 39
38025: PUSH
38026: LD_VAR 0 40
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: PUSH
38039: LD_VAR 0 4
38043: PUSH
38044: LD_INT 1
38046: PLUS
38047: ARRAY
38048: ST_TO_ADDR
38049: GO 38416
38051: LD_INT 6
38053: DOUBLE
38054: EQUAL
38055: IFTRUE 38107
38057: LD_INT 7
38059: DOUBLE
38060: EQUAL
38061: IFTRUE 38107
38063: LD_INT 8
38065: DOUBLE
38066: EQUAL
38067: IFTRUE 38107
38069: LD_INT 13
38071: DOUBLE
38072: EQUAL
38073: IFTRUE 38107
38075: LD_INT 12
38077: DOUBLE
38078: EQUAL
38079: IFTRUE 38107
38081: LD_INT 15
38083: DOUBLE
38084: EQUAL
38085: IFTRUE 38107
38087: LD_INT 11
38089: DOUBLE
38090: EQUAL
38091: IFTRUE 38107
38093: LD_INT 14
38095: DOUBLE
38096: EQUAL
38097: IFTRUE 38107
38099: LD_INT 10
38101: DOUBLE
38102: EQUAL
38103: IFTRUE 38107
38105: GO 38163
38107: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
38108: LD_ADDR_VAR 0 9
38112: PUSH
38113: LD_VAR 0 41
38117: PUSH
38118: LD_VAR 0 42
38122: PUSH
38123: LD_VAR 0 43
38127: PUSH
38128: LD_VAR 0 44
38132: PUSH
38133: LD_VAR 0 45
38137: PUSH
38138: LD_VAR 0 46
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: PUSH
38151: LD_VAR 0 4
38155: PUSH
38156: LD_INT 1
38158: PLUS
38159: ARRAY
38160: ST_TO_ADDR
38161: GO 38416
38163: LD_INT 36
38165: DOUBLE
38166: EQUAL
38167: IFTRUE 38171
38169: GO 38227
38171: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
38172: LD_ADDR_VAR 0 9
38176: PUSH
38177: LD_VAR 0 47
38181: PUSH
38182: LD_VAR 0 48
38186: PUSH
38187: LD_VAR 0 49
38191: PUSH
38192: LD_VAR 0 50
38196: PUSH
38197: LD_VAR 0 51
38201: PUSH
38202: LD_VAR 0 52
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: PUSH
38215: LD_VAR 0 4
38219: PUSH
38220: LD_INT 1
38222: PLUS
38223: ARRAY
38224: ST_TO_ADDR
38225: GO 38416
38227: LD_INT 4
38229: DOUBLE
38230: EQUAL
38231: IFTRUE 38253
38233: LD_INT 5
38235: DOUBLE
38236: EQUAL
38237: IFTRUE 38253
38239: LD_INT 34
38241: DOUBLE
38242: EQUAL
38243: IFTRUE 38253
38245: LD_INT 37
38247: DOUBLE
38248: EQUAL
38249: IFTRUE 38253
38251: GO 38309
38253: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
38254: LD_ADDR_VAR 0 9
38258: PUSH
38259: LD_VAR 0 53
38263: PUSH
38264: LD_VAR 0 54
38268: PUSH
38269: LD_VAR 0 55
38273: PUSH
38274: LD_VAR 0 56
38278: PUSH
38279: LD_VAR 0 57
38283: PUSH
38284: LD_VAR 0 58
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: PUSH
38297: LD_VAR 0 4
38301: PUSH
38302: LD_INT 1
38304: PLUS
38305: ARRAY
38306: ST_TO_ADDR
38307: GO 38416
38309: LD_INT 31
38311: DOUBLE
38312: EQUAL
38313: IFTRUE 38359
38315: LD_INT 32
38317: DOUBLE
38318: EQUAL
38319: IFTRUE 38359
38321: LD_INT 33
38323: DOUBLE
38324: EQUAL
38325: IFTRUE 38359
38327: LD_INT 27
38329: DOUBLE
38330: EQUAL
38331: IFTRUE 38359
38333: LD_INT 26
38335: DOUBLE
38336: EQUAL
38337: IFTRUE 38359
38339: LD_INT 28
38341: DOUBLE
38342: EQUAL
38343: IFTRUE 38359
38345: LD_INT 29
38347: DOUBLE
38348: EQUAL
38349: IFTRUE 38359
38351: LD_INT 30
38353: DOUBLE
38354: EQUAL
38355: IFTRUE 38359
38357: GO 38415
38359: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
38360: LD_ADDR_VAR 0 9
38364: PUSH
38365: LD_VAR 0 59
38369: PUSH
38370: LD_VAR 0 60
38374: PUSH
38375: LD_VAR 0 61
38379: PUSH
38380: LD_VAR 0 62
38384: PUSH
38385: LD_VAR 0 63
38389: PUSH
38390: LD_VAR 0 64
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: PUSH
38403: LD_VAR 0 4
38407: PUSH
38408: LD_INT 1
38410: PLUS
38411: ARRAY
38412: ST_TO_ADDR
38413: GO 38416
38415: POP
// temp_list2 = [ ] ;
38416: LD_ADDR_VAR 0 10
38420: PUSH
38421: EMPTY
38422: ST_TO_ADDR
// for i in temp_list do
38423: LD_ADDR_VAR 0 8
38427: PUSH
38428: LD_VAR 0 9
38432: PUSH
38433: FOR_IN
38434: IFFALSE 38486
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
38436: LD_ADDR_VAR 0 10
38440: PUSH
38441: LD_VAR 0 10
38445: PUSH
38446: LD_VAR 0 8
38450: PUSH
38451: LD_INT 1
38453: ARRAY
38454: PUSH
38455: LD_VAR 0 2
38459: PLUS
38460: PUSH
38461: LD_VAR 0 8
38465: PUSH
38466: LD_INT 2
38468: ARRAY
38469: PUSH
38470: LD_VAR 0 3
38474: PLUS
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: EMPTY
38481: LIST
38482: ADD
38483: ST_TO_ADDR
38484: GO 38433
38486: POP
38487: POP
// result = temp_list2 ;
38488: LD_ADDR_VAR 0 7
38492: PUSH
38493: LD_VAR 0 10
38497: ST_TO_ADDR
// end ;
38498: LD_VAR 0 7
38502: RET
// export function EnemyInRange ( unit , dist ) ; begin
38503: LD_INT 0
38505: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
38506: LD_ADDR_VAR 0 3
38510: PUSH
38511: LD_VAR 0 1
38515: PPUSH
38516: CALL_OW 255
38520: PPUSH
38521: LD_VAR 0 1
38525: PPUSH
38526: CALL_OW 250
38530: PPUSH
38531: LD_VAR 0 1
38535: PPUSH
38536: CALL_OW 251
38540: PPUSH
38541: LD_VAR 0 2
38545: PPUSH
38546: CALL 11899 0 4
38550: PUSH
38551: LD_INT 4
38553: ARRAY
38554: ST_TO_ADDR
// end ;
38555: LD_VAR 0 3
38559: RET
// export function PlayerSeeMe ( unit ) ; begin
38560: LD_INT 0
38562: PPUSH
// result := See ( your_side , unit ) ;
38563: LD_ADDR_VAR 0 2
38567: PUSH
38568: LD_OWVAR 2
38572: PPUSH
38573: LD_VAR 0 1
38577: PPUSH
38578: CALL_OW 292
38582: ST_TO_ADDR
// end ;
38583: LD_VAR 0 2
38587: RET
// export function ReverseDir ( unit ) ; begin
38588: LD_INT 0
38590: PPUSH
// if not unit then
38591: LD_VAR 0 1
38595: NOT
38596: IFFALSE 38600
// exit ;
38598: GO 38623
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
38600: LD_ADDR_VAR 0 2
38604: PUSH
38605: LD_VAR 0 1
38609: PPUSH
38610: CALL_OW 254
38614: PUSH
38615: LD_INT 3
38617: PLUS
38618: PUSH
38619: LD_INT 6
38621: MOD
38622: ST_TO_ADDR
// end ;
38623: LD_VAR 0 2
38627: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
38628: LD_INT 0
38630: PPUSH
38631: PPUSH
38632: PPUSH
38633: PPUSH
38634: PPUSH
// if not hexes then
38635: LD_VAR 0 2
38639: NOT
38640: IFFALSE 38644
// exit ;
38642: GO 38792
// dist := 9999 ;
38644: LD_ADDR_VAR 0 5
38648: PUSH
38649: LD_INT 9999
38651: ST_TO_ADDR
// for i = 1 to hexes do
38652: LD_ADDR_VAR 0 4
38656: PUSH
38657: DOUBLE
38658: LD_INT 1
38660: DEC
38661: ST_TO_ADDR
38662: LD_VAR 0 2
38666: PUSH
38667: FOR_TO
38668: IFFALSE 38780
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
38670: LD_VAR 0 1
38674: PPUSH
38675: LD_VAR 0 2
38679: PUSH
38680: LD_VAR 0 4
38684: ARRAY
38685: PUSH
38686: LD_INT 1
38688: ARRAY
38689: PPUSH
38690: LD_VAR 0 2
38694: PUSH
38695: LD_VAR 0 4
38699: ARRAY
38700: PUSH
38701: LD_INT 2
38703: ARRAY
38704: PPUSH
38705: CALL_OW 297
38709: PUSH
38710: LD_VAR 0 5
38714: LESS
38715: IFFALSE 38778
// begin hex := hexes [ i ] ;
38717: LD_ADDR_VAR 0 7
38721: PUSH
38722: LD_VAR 0 2
38726: PUSH
38727: LD_VAR 0 4
38731: ARRAY
38732: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38733: LD_ADDR_VAR 0 5
38737: PUSH
38738: LD_VAR 0 1
38742: PPUSH
38743: LD_VAR 0 2
38747: PUSH
38748: LD_VAR 0 4
38752: ARRAY
38753: PUSH
38754: LD_INT 1
38756: ARRAY
38757: PPUSH
38758: LD_VAR 0 2
38762: PUSH
38763: LD_VAR 0 4
38767: ARRAY
38768: PUSH
38769: LD_INT 2
38771: ARRAY
38772: PPUSH
38773: CALL_OW 297
38777: ST_TO_ADDR
// end ; end ;
38778: GO 38667
38780: POP
38781: POP
// result := hex ;
38782: LD_ADDR_VAR 0 3
38786: PUSH
38787: LD_VAR 0 7
38791: ST_TO_ADDR
// end ;
38792: LD_VAR 0 3
38796: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
38797: LD_INT 0
38799: PPUSH
38800: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
38801: LD_VAR 0 1
38805: NOT
38806: PUSH
38807: LD_VAR 0 1
38811: PUSH
38812: LD_INT 21
38814: PUSH
38815: LD_INT 2
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 23
38824: PUSH
38825: LD_INT 2
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PPUSH
38836: CALL_OW 69
38840: IN
38841: NOT
38842: OR
38843: IFFALSE 38847
// exit ;
38845: GO 38894
// for i = 1 to 3 do
38847: LD_ADDR_VAR 0 3
38851: PUSH
38852: DOUBLE
38853: LD_INT 1
38855: DEC
38856: ST_TO_ADDR
38857: LD_INT 3
38859: PUSH
38860: FOR_TO
38861: IFFALSE 38892
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
38863: LD_VAR 0 1
38867: PPUSH
38868: CALL_OW 250
38872: PPUSH
38873: LD_VAR 0 1
38877: PPUSH
38878: CALL_OW 251
38882: PPUSH
38883: LD_INT 1
38885: PPUSH
38886: CALL_OW 453
38890: GO 38860
38892: POP
38893: POP
// end ;
38894: LD_VAR 0 2
38898: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
38899: LD_INT 0
38901: PPUSH
38902: PPUSH
38903: PPUSH
38904: PPUSH
38905: PPUSH
38906: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
38907: LD_VAR 0 1
38911: NOT
38912: PUSH
38913: LD_VAR 0 2
38917: NOT
38918: OR
38919: PUSH
38920: LD_VAR 0 1
38924: PPUSH
38925: CALL_OW 314
38929: OR
38930: IFFALSE 38934
// exit ;
38932: GO 39375
// x := GetX ( enemy_unit ) ;
38934: LD_ADDR_VAR 0 7
38938: PUSH
38939: LD_VAR 0 2
38943: PPUSH
38944: CALL_OW 250
38948: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
38949: LD_ADDR_VAR 0 8
38953: PUSH
38954: LD_VAR 0 2
38958: PPUSH
38959: CALL_OW 251
38963: ST_TO_ADDR
// if not x or not y then
38964: LD_VAR 0 7
38968: NOT
38969: PUSH
38970: LD_VAR 0 8
38974: NOT
38975: OR
38976: IFFALSE 38980
// exit ;
38978: GO 39375
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
38980: LD_ADDR_VAR 0 6
38984: PUSH
38985: LD_VAR 0 7
38989: PPUSH
38990: LD_INT 0
38992: PPUSH
38993: LD_INT 4
38995: PPUSH
38996: CALL_OW 272
39000: PUSH
39001: LD_VAR 0 8
39005: PPUSH
39006: LD_INT 0
39008: PPUSH
39009: LD_INT 4
39011: PPUSH
39012: CALL_OW 273
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_VAR 0 7
39025: PPUSH
39026: LD_INT 1
39028: PPUSH
39029: LD_INT 4
39031: PPUSH
39032: CALL_OW 272
39036: PUSH
39037: LD_VAR 0 8
39041: PPUSH
39042: LD_INT 1
39044: PPUSH
39045: LD_INT 4
39047: PPUSH
39048: CALL_OW 273
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_VAR 0 7
39061: PPUSH
39062: LD_INT 2
39064: PPUSH
39065: LD_INT 4
39067: PPUSH
39068: CALL_OW 272
39072: PUSH
39073: LD_VAR 0 8
39077: PPUSH
39078: LD_INT 2
39080: PPUSH
39081: LD_INT 4
39083: PPUSH
39084: CALL_OW 273
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_VAR 0 7
39097: PPUSH
39098: LD_INT 3
39100: PPUSH
39101: LD_INT 4
39103: PPUSH
39104: CALL_OW 272
39108: PUSH
39109: LD_VAR 0 8
39113: PPUSH
39114: LD_INT 3
39116: PPUSH
39117: LD_INT 4
39119: PPUSH
39120: CALL_OW 273
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_VAR 0 7
39133: PPUSH
39134: LD_INT 4
39136: PPUSH
39137: LD_INT 4
39139: PPUSH
39140: CALL_OW 272
39144: PUSH
39145: LD_VAR 0 8
39149: PPUSH
39150: LD_INT 4
39152: PPUSH
39153: LD_INT 4
39155: PPUSH
39156: CALL_OW 273
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_VAR 0 7
39169: PPUSH
39170: LD_INT 5
39172: PPUSH
39173: LD_INT 4
39175: PPUSH
39176: CALL_OW 272
39180: PUSH
39181: LD_VAR 0 8
39185: PPUSH
39186: LD_INT 5
39188: PPUSH
39189: LD_INT 4
39191: PPUSH
39192: CALL_OW 273
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: ST_TO_ADDR
// for i = tmp downto 1 do
39209: LD_ADDR_VAR 0 4
39213: PUSH
39214: DOUBLE
39215: LD_VAR 0 6
39219: INC
39220: ST_TO_ADDR
39221: LD_INT 1
39223: PUSH
39224: FOR_DOWNTO
39225: IFFALSE 39326
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
39227: LD_VAR 0 6
39231: PUSH
39232: LD_VAR 0 4
39236: ARRAY
39237: PUSH
39238: LD_INT 1
39240: ARRAY
39241: PPUSH
39242: LD_VAR 0 6
39246: PUSH
39247: LD_VAR 0 4
39251: ARRAY
39252: PUSH
39253: LD_INT 2
39255: ARRAY
39256: PPUSH
39257: CALL_OW 488
39261: NOT
39262: PUSH
39263: LD_VAR 0 6
39267: PUSH
39268: LD_VAR 0 4
39272: ARRAY
39273: PUSH
39274: LD_INT 1
39276: ARRAY
39277: PPUSH
39278: LD_VAR 0 6
39282: PUSH
39283: LD_VAR 0 4
39287: ARRAY
39288: PUSH
39289: LD_INT 2
39291: ARRAY
39292: PPUSH
39293: CALL_OW 428
39297: PUSH
39298: LD_INT 0
39300: NONEQUAL
39301: OR
39302: IFFALSE 39324
// tmp := Delete ( tmp , i ) ;
39304: LD_ADDR_VAR 0 6
39308: PUSH
39309: LD_VAR 0 6
39313: PPUSH
39314: LD_VAR 0 4
39318: PPUSH
39319: CALL_OW 3
39323: ST_TO_ADDR
39324: GO 39224
39326: POP
39327: POP
// j := GetClosestHex ( unit , tmp ) ;
39328: LD_ADDR_VAR 0 5
39332: PUSH
39333: LD_VAR 0 1
39337: PPUSH
39338: LD_VAR 0 6
39342: PPUSH
39343: CALL 38628 0 2
39347: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
39348: LD_VAR 0 1
39352: PPUSH
39353: LD_VAR 0 5
39357: PUSH
39358: LD_INT 1
39360: ARRAY
39361: PPUSH
39362: LD_VAR 0 5
39366: PUSH
39367: LD_INT 2
39369: ARRAY
39370: PPUSH
39371: CALL_OW 111
// end ;
39375: LD_VAR 0 3
39379: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
39380: LD_INT 0
39382: PPUSH
39383: PPUSH
39384: PPUSH
// uc_side = 0 ;
39385: LD_ADDR_OWVAR 20
39389: PUSH
39390: LD_INT 0
39392: ST_TO_ADDR
// uc_nation = 0 ;
39393: LD_ADDR_OWVAR 21
39397: PUSH
39398: LD_INT 0
39400: ST_TO_ADDR
// InitHc_All ( ) ;
39401: CALL_OW 584
// InitVc ;
39405: CALL_OW 20
// if mastodonts then
39409: LD_VAR 0 6
39413: IFFALSE 39480
// for i = 1 to mastodonts do
39415: LD_ADDR_VAR 0 11
39419: PUSH
39420: DOUBLE
39421: LD_INT 1
39423: DEC
39424: ST_TO_ADDR
39425: LD_VAR 0 6
39429: PUSH
39430: FOR_TO
39431: IFFALSE 39478
// begin vc_chassis := 31 ;
39433: LD_ADDR_OWVAR 37
39437: PUSH
39438: LD_INT 31
39440: ST_TO_ADDR
// vc_control := control_rider ;
39441: LD_ADDR_OWVAR 38
39445: PUSH
39446: LD_INT 4
39448: ST_TO_ADDR
// animal := CreateVehicle ;
39449: LD_ADDR_VAR 0 12
39453: PUSH
39454: CALL_OW 45
39458: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39459: LD_VAR 0 12
39463: PPUSH
39464: LD_VAR 0 8
39468: PPUSH
39469: LD_INT 0
39471: PPUSH
39472: CALL 41615 0 3
// end ;
39476: GO 39430
39478: POP
39479: POP
// if horses then
39480: LD_VAR 0 5
39484: IFFALSE 39551
// for i = 1 to horses do
39486: LD_ADDR_VAR 0 11
39490: PUSH
39491: DOUBLE
39492: LD_INT 1
39494: DEC
39495: ST_TO_ADDR
39496: LD_VAR 0 5
39500: PUSH
39501: FOR_TO
39502: IFFALSE 39549
// begin hc_class := 21 ;
39504: LD_ADDR_OWVAR 28
39508: PUSH
39509: LD_INT 21
39511: ST_TO_ADDR
// hc_gallery :=  ;
39512: LD_ADDR_OWVAR 33
39516: PUSH
39517: LD_STRING 
39519: ST_TO_ADDR
// animal := CreateHuman ;
39520: LD_ADDR_VAR 0 12
39524: PUSH
39525: CALL_OW 44
39529: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39530: LD_VAR 0 12
39534: PPUSH
39535: LD_VAR 0 8
39539: PPUSH
39540: LD_INT 0
39542: PPUSH
39543: CALL 41615 0 3
// end ;
39547: GO 39501
39549: POP
39550: POP
// if birds then
39551: LD_VAR 0 1
39555: IFFALSE 39622
// for i = 1 to birds do
39557: LD_ADDR_VAR 0 11
39561: PUSH
39562: DOUBLE
39563: LD_INT 1
39565: DEC
39566: ST_TO_ADDR
39567: LD_VAR 0 1
39571: PUSH
39572: FOR_TO
39573: IFFALSE 39620
// begin hc_class = 18 ;
39575: LD_ADDR_OWVAR 28
39579: PUSH
39580: LD_INT 18
39582: ST_TO_ADDR
// hc_gallery =  ;
39583: LD_ADDR_OWVAR 33
39587: PUSH
39588: LD_STRING 
39590: ST_TO_ADDR
// animal := CreateHuman ;
39591: LD_ADDR_VAR 0 12
39595: PUSH
39596: CALL_OW 44
39600: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39601: LD_VAR 0 12
39605: PPUSH
39606: LD_VAR 0 8
39610: PPUSH
39611: LD_INT 0
39613: PPUSH
39614: CALL 41615 0 3
// end ;
39618: GO 39572
39620: POP
39621: POP
// if tigers then
39622: LD_VAR 0 2
39626: IFFALSE 39710
// for i = 1 to tigers do
39628: LD_ADDR_VAR 0 11
39632: PUSH
39633: DOUBLE
39634: LD_INT 1
39636: DEC
39637: ST_TO_ADDR
39638: LD_VAR 0 2
39642: PUSH
39643: FOR_TO
39644: IFFALSE 39708
// begin hc_class = class_tiger ;
39646: LD_ADDR_OWVAR 28
39650: PUSH
39651: LD_INT 14
39653: ST_TO_ADDR
// hc_gallery =  ;
39654: LD_ADDR_OWVAR 33
39658: PUSH
39659: LD_STRING 
39661: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
39662: LD_ADDR_OWVAR 35
39666: PUSH
39667: LD_INT 7
39669: NEG
39670: PPUSH
39671: LD_INT 7
39673: PPUSH
39674: CALL_OW 12
39678: ST_TO_ADDR
// animal := CreateHuman ;
39679: LD_ADDR_VAR 0 12
39683: PUSH
39684: CALL_OW 44
39688: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39689: LD_VAR 0 12
39693: PPUSH
39694: LD_VAR 0 8
39698: PPUSH
39699: LD_INT 0
39701: PPUSH
39702: CALL 41615 0 3
// end ;
39706: GO 39643
39708: POP
39709: POP
// if apemans then
39710: LD_VAR 0 3
39714: IFFALSE 39837
// for i = 1 to apemans do
39716: LD_ADDR_VAR 0 11
39720: PUSH
39721: DOUBLE
39722: LD_INT 1
39724: DEC
39725: ST_TO_ADDR
39726: LD_VAR 0 3
39730: PUSH
39731: FOR_TO
39732: IFFALSE 39835
// begin hc_class = class_apeman ;
39734: LD_ADDR_OWVAR 28
39738: PUSH
39739: LD_INT 12
39741: ST_TO_ADDR
// hc_gallery =  ;
39742: LD_ADDR_OWVAR 33
39746: PUSH
39747: LD_STRING 
39749: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
39750: LD_ADDR_OWVAR 35
39754: PUSH
39755: LD_INT 2
39757: NEG
39758: PPUSH
39759: LD_INT 2
39761: PPUSH
39762: CALL_OW 12
39766: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
39767: LD_ADDR_OWVAR 31
39771: PUSH
39772: LD_INT 1
39774: PPUSH
39775: LD_INT 3
39777: PPUSH
39778: CALL_OW 12
39782: PUSH
39783: LD_INT 1
39785: PPUSH
39786: LD_INT 3
39788: PPUSH
39789: CALL_OW 12
39793: PUSH
39794: LD_INT 0
39796: PUSH
39797: LD_INT 0
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: ST_TO_ADDR
// animal := CreateHuman ;
39806: LD_ADDR_VAR 0 12
39810: PUSH
39811: CALL_OW 44
39815: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39816: LD_VAR 0 12
39820: PPUSH
39821: LD_VAR 0 8
39825: PPUSH
39826: LD_INT 0
39828: PPUSH
39829: CALL 41615 0 3
// end ;
39833: GO 39731
39835: POP
39836: POP
// if enchidnas then
39837: LD_VAR 0 4
39841: IFFALSE 39908
// for i = 1 to enchidnas do
39843: LD_ADDR_VAR 0 11
39847: PUSH
39848: DOUBLE
39849: LD_INT 1
39851: DEC
39852: ST_TO_ADDR
39853: LD_VAR 0 4
39857: PUSH
39858: FOR_TO
39859: IFFALSE 39906
// begin hc_class = 13 ;
39861: LD_ADDR_OWVAR 28
39865: PUSH
39866: LD_INT 13
39868: ST_TO_ADDR
// hc_gallery =  ;
39869: LD_ADDR_OWVAR 33
39873: PUSH
39874: LD_STRING 
39876: ST_TO_ADDR
// animal := CreateHuman ;
39877: LD_ADDR_VAR 0 12
39881: PUSH
39882: CALL_OW 44
39886: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
39887: LD_VAR 0 12
39891: PPUSH
39892: LD_VAR 0 8
39896: PPUSH
39897: LD_INT 0
39899: PPUSH
39900: CALL 41615 0 3
// end ;
39904: GO 39858
39906: POP
39907: POP
// if fishes then
39908: LD_VAR 0 7
39912: IFFALSE 39979
// for i = 1 to fishes do
39914: LD_ADDR_VAR 0 11
39918: PUSH
39919: DOUBLE
39920: LD_INT 1
39922: DEC
39923: ST_TO_ADDR
39924: LD_VAR 0 7
39928: PUSH
39929: FOR_TO
39930: IFFALSE 39977
// begin hc_class = 20 ;
39932: LD_ADDR_OWVAR 28
39936: PUSH
39937: LD_INT 20
39939: ST_TO_ADDR
// hc_gallery =  ;
39940: LD_ADDR_OWVAR 33
39944: PUSH
39945: LD_STRING 
39947: ST_TO_ADDR
// animal := CreateHuman ;
39948: LD_ADDR_VAR 0 12
39952: PUSH
39953: CALL_OW 44
39957: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
39958: LD_VAR 0 12
39962: PPUSH
39963: LD_VAR 0 9
39967: PPUSH
39968: LD_INT 0
39970: PPUSH
39971: CALL 41615 0 3
// end ;
39975: GO 39929
39977: POP
39978: POP
// end ;
39979: LD_VAR 0 10
39983: RET
// export function WantHeal ( sci , unit ) ; begin
39984: LD_INT 0
39986: PPUSH
// if GetTaskList ( sci ) > 0 then
39987: LD_VAR 0 1
39991: PPUSH
39992: CALL_OW 437
39996: PUSH
39997: LD_INT 0
39999: GREATER
40000: IFFALSE 40070
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
40002: LD_VAR 0 1
40006: PPUSH
40007: CALL_OW 437
40011: PUSH
40012: LD_INT 1
40014: ARRAY
40015: PUSH
40016: LD_INT 1
40018: ARRAY
40019: PUSH
40020: LD_STRING l
40022: EQUAL
40023: PUSH
40024: LD_VAR 0 1
40028: PPUSH
40029: CALL_OW 437
40033: PUSH
40034: LD_INT 1
40036: ARRAY
40037: PUSH
40038: LD_INT 4
40040: ARRAY
40041: PUSH
40042: LD_VAR 0 2
40046: EQUAL
40047: AND
40048: IFFALSE 40060
// result := true else
40050: LD_ADDR_VAR 0 3
40054: PUSH
40055: LD_INT 1
40057: ST_TO_ADDR
40058: GO 40068
// result := false ;
40060: LD_ADDR_VAR 0 3
40064: PUSH
40065: LD_INT 0
40067: ST_TO_ADDR
// end else
40068: GO 40078
// result := false ;
40070: LD_ADDR_VAR 0 3
40074: PUSH
40075: LD_INT 0
40077: ST_TO_ADDR
// end ;
40078: LD_VAR 0 3
40082: RET
// export function HealTarget ( sci ) ; begin
40083: LD_INT 0
40085: PPUSH
// if not sci then
40086: LD_VAR 0 1
40090: NOT
40091: IFFALSE 40095
// exit ;
40093: GO 40160
// result := 0 ;
40095: LD_ADDR_VAR 0 2
40099: PUSH
40100: LD_INT 0
40102: ST_TO_ADDR
// if GetTaskList ( sci ) then
40103: LD_VAR 0 1
40107: PPUSH
40108: CALL_OW 437
40112: IFFALSE 40160
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
40114: LD_VAR 0 1
40118: PPUSH
40119: CALL_OW 437
40123: PUSH
40124: LD_INT 1
40126: ARRAY
40127: PUSH
40128: LD_INT 1
40130: ARRAY
40131: PUSH
40132: LD_STRING l
40134: EQUAL
40135: IFFALSE 40160
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
40137: LD_ADDR_VAR 0 2
40141: PUSH
40142: LD_VAR 0 1
40146: PPUSH
40147: CALL_OW 437
40151: PUSH
40152: LD_INT 1
40154: ARRAY
40155: PUSH
40156: LD_INT 4
40158: ARRAY
40159: ST_TO_ADDR
// end ;
40160: LD_VAR 0 2
40164: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
40165: LD_INT 0
40167: PPUSH
40168: PPUSH
40169: PPUSH
40170: PPUSH
// if not base_units then
40171: LD_VAR 0 1
40175: NOT
40176: IFFALSE 40180
// exit ;
40178: GO 40267
// result := false ;
40180: LD_ADDR_VAR 0 2
40184: PUSH
40185: LD_INT 0
40187: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
40188: LD_ADDR_VAR 0 5
40192: PUSH
40193: LD_VAR 0 1
40197: PPUSH
40198: LD_INT 21
40200: PUSH
40201: LD_INT 3
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PPUSH
40208: CALL_OW 72
40212: ST_TO_ADDR
// if not tmp then
40213: LD_VAR 0 5
40217: NOT
40218: IFFALSE 40222
// exit ;
40220: GO 40267
// for i in tmp do
40222: LD_ADDR_VAR 0 3
40226: PUSH
40227: LD_VAR 0 5
40231: PUSH
40232: FOR_IN
40233: IFFALSE 40265
// begin result := EnemyInRange ( i , 22 ) ;
40235: LD_ADDR_VAR 0 2
40239: PUSH
40240: LD_VAR 0 3
40244: PPUSH
40245: LD_INT 22
40247: PPUSH
40248: CALL 38503 0 2
40252: ST_TO_ADDR
// if result then
40253: LD_VAR 0 2
40257: IFFALSE 40263
// exit ;
40259: POP
40260: POP
40261: GO 40267
// end ;
40263: GO 40232
40265: POP
40266: POP
// end ;
40267: LD_VAR 0 2
40271: RET
// export function FilterByTag ( units , tag ) ; begin
40272: LD_INT 0
40274: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
40275: LD_ADDR_VAR 0 3
40279: PUSH
40280: LD_VAR 0 1
40284: PPUSH
40285: LD_INT 120
40287: PUSH
40288: LD_VAR 0 2
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PPUSH
40297: CALL_OW 72
40301: ST_TO_ADDR
// end ;
40302: LD_VAR 0 3
40306: RET
// export function IsDriver ( un ) ; begin
40307: LD_INT 0
40309: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
40310: LD_ADDR_VAR 0 2
40314: PUSH
40315: LD_VAR 0 1
40319: PUSH
40320: LD_INT 55
40322: PUSH
40323: EMPTY
40324: LIST
40325: PPUSH
40326: CALL_OW 69
40330: IN
40331: ST_TO_ADDR
// end ;
40332: LD_VAR 0 2
40336: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
40337: LD_INT 0
40339: PPUSH
40340: PPUSH
// list := [ ] ;
40341: LD_ADDR_VAR 0 5
40345: PUSH
40346: EMPTY
40347: ST_TO_ADDR
// case d of 0 :
40348: LD_VAR 0 3
40352: PUSH
40353: LD_INT 0
40355: DOUBLE
40356: EQUAL
40357: IFTRUE 40361
40359: GO 40494
40361: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
40362: LD_ADDR_VAR 0 5
40366: PUSH
40367: LD_VAR 0 1
40371: PUSH
40372: LD_INT 4
40374: MINUS
40375: PUSH
40376: LD_VAR 0 2
40380: PUSH
40381: LD_INT 4
40383: MINUS
40384: PUSH
40385: LD_INT 2
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: LIST
40392: PUSH
40393: LD_VAR 0 1
40397: PUSH
40398: LD_INT 3
40400: MINUS
40401: PUSH
40402: LD_VAR 0 2
40406: PUSH
40407: LD_INT 1
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: LIST
40414: PUSH
40415: LD_VAR 0 1
40419: PUSH
40420: LD_INT 4
40422: PLUS
40423: PUSH
40424: LD_VAR 0 2
40428: PUSH
40429: LD_INT 4
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: LIST
40436: PUSH
40437: LD_VAR 0 1
40441: PUSH
40442: LD_INT 3
40444: PLUS
40445: PUSH
40446: LD_VAR 0 2
40450: PUSH
40451: LD_INT 3
40453: PLUS
40454: PUSH
40455: LD_INT 5
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: LIST
40462: PUSH
40463: LD_VAR 0 1
40467: PUSH
40468: LD_VAR 0 2
40472: PUSH
40473: LD_INT 4
40475: PLUS
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: LIST
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: ST_TO_ADDR
// end ; 1 :
40492: GO 41192
40494: LD_INT 1
40496: DOUBLE
40497: EQUAL
40498: IFTRUE 40502
40500: GO 40635
40502: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
40503: LD_ADDR_VAR 0 5
40507: PUSH
40508: LD_VAR 0 1
40512: PUSH
40513: LD_VAR 0 2
40517: PUSH
40518: LD_INT 4
40520: MINUS
40521: PUSH
40522: LD_INT 3
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: LIST
40529: PUSH
40530: LD_VAR 0 1
40534: PUSH
40535: LD_INT 3
40537: MINUS
40538: PUSH
40539: LD_VAR 0 2
40543: PUSH
40544: LD_INT 3
40546: MINUS
40547: PUSH
40548: LD_INT 2
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: LIST
40555: PUSH
40556: LD_VAR 0 1
40560: PUSH
40561: LD_INT 4
40563: MINUS
40564: PUSH
40565: LD_VAR 0 2
40569: PUSH
40570: LD_INT 1
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: LIST
40577: PUSH
40578: LD_VAR 0 1
40582: PUSH
40583: LD_VAR 0 2
40587: PUSH
40588: LD_INT 3
40590: PLUS
40591: PUSH
40592: LD_INT 0
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: LIST
40599: PUSH
40600: LD_VAR 0 1
40604: PUSH
40605: LD_INT 4
40607: PLUS
40608: PUSH
40609: LD_VAR 0 2
40613: PUSH
40614: LD_INT 4
40616: PLUS
40617: PUSH
40618: LD_INT 5
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: LIST
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: ST_TO_ADDR
// end ; 2 :
40633: GO 41192
40635: LD_INT 2
40637: DOUBLE
40638: EQUAL
40639: IFTRUE 40643
40641: GO 40772
40643: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
40644: LD_ADDR_VAR 0 5
40648: PUSH
40649: LD_VAR 0 1
40653: PUSH
40654: LD_VAR 0 2
40658: PUSH
40659: LD_INT 3
40661: MINUS
40662: PUSH
40663: LD_INT 3
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: LIST
40670: PUSH
40671: LD_VAR 0 1
40675: PUSH
40676: LD_INT 4
40678: PLUS
40679: PUSH
40680: LD_VAR 0 2
40684: PUSH
40685: LD_INT 4
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: LIST
40692: PUSH
40693: LD_VAR 0 1
40697: PUSH
40698: LD_VAR 0 2
40702: PUSH
40703: LD_INT 4
40705: PLUS
40706: PUSH
40707: LD_INT 0
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: LIST
40714: PUSH
40715: LD_VAR 0 1
40719: PUSH
40720: LD_INT 3
40722: MINUS
40723: PUSH
40724: LD_VAR 0 2
40728: PUSH
40729: LD_INT 1
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: LIST
40736: PUSH
40737: LD_VAR 0 1
40741: PUSH
40742: LD_INT 4
40744: MINUS
40745: PUSH
40746: LD_VAR 0 2
40750: PUSH
40751: LD_INT 4
40753: MINUS
40754: PUSH
40755: LD_INT 2
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: LIST
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: ST_TO_ADDR
// end ; 3 :
40770: GO 41192
40772: LD_INT 3
40774: DOUBLE
40775: EQUAL
40776: IFTRUE 40780
40778: GO 40913
40780: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
40781: LD_ADDR_VAR 0 5
40785: PUSH
40786: LD_VAR 0 1
40790: PUSH
40791: LD_INT 3
40793: PLUS
40794: PUSH
40795: LD_VAR 0 2
40799: PUSH
40800: LD_INT 4
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: LIST
40807: PUSH
40808: LD_VAR 0 1
40812: PUSH
40813: LD_INT 4
40815: PLUS
40816: PUSH
40817: LD_VAR 0 2
40821: PUSH
40822: LD_INT 4
40824: PLUS
40825: PUSH
40826: LD_INT 5
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: LIST
40833: PUSH
40834: LD_VAR 0 1
40838: PUSH
40839: LD_INT 4
40841: MINUS
40842: PUSH
40843: LD_VAR 0 2
40847: PUSH
40848: LD_INT 1
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: LIST
40855: PUSH
40856: LD_VAR 0 1
40860: PUSH
40861: LD_VAR 0 2
40865: PUSH
40866: LD_INT 4
40868: MINUS
40869: PUSH
40870: LD_INT 3
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: LIST
40877: PUSH
40878: LD_VAR 0 1
40882: PUSH
40883: LD_INT 3
40885: MINUS
40886: PUSH
40887: LD_VAR 0 2
40891: PUSH
40892: LD_INT 3
40894: MINUS
40895: PUSH
40896: LD_INT 2
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: LIST
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: ST_TO_ADDR
// end ; 4 :
40911: GO 41192
40913: LD_INT 4
40915: DOUBLE
40916: EQUAL
40917: IFTRUE 40921
40919: GO 41054
40921: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
40922: LD_ADDR_VAR 0 5
40926: PUSH
40927: LD_VAR 0 1
40931: PUSH
40932: LD_VAR 0 2
40936: PUSH
40937: LD_INT 4
40939: PLUS
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: LIST
40948: PUSH
40949: LD_VAR 0 1
40953: PUSH
40954: LD_INT 3
40956: PLUS
40957: PUSH
40958: LD_VAR 0 2
40962: PUSH
40963: LD_INT 3
40965: PLUS
40966: PUSH
40967: LD_INT 5
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: LIST
40974: PUSH
40975: LD_VAR 0 1
40979: PUSH
40980: LD_INT 4
40982: PLUS
40983: PUSH
40984: LD_VAR 0 2
40988: PUSH
40989: LD_INT 4
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: LIST
40996: PUSH
40997: LD_VAR 0 1
41001: PUSH
41002: LD_VAR 0 2
41006: PUSH
41007: LD_INT 3
41009: MINUS
41010: PUSH
41011: LD_INT 3
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: LIST
41018: PUSH
41019: LD_VAR 0 1
41023: PUSH
41024: LD_INT 4
41026: MINUS
41027: PUSH
41028: LD_VAR 0 2
41032: PUSH
41033: LD_INT 4
41035: MINUS
41036: PUSH
41037: LD_INT 2
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: LIST
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: ST_TO_ADDR
// end ; 5 :
41052: GO 41192
41054: LD_INT 5
41056: DOUBLE
41057: EQUAL
41058: IFTRUE 41062
41060: GO 41191
41062: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
41063: LD_ADDR_VAR 0 5
41067: PUSH
41068: LD_VAR 0 1
41072: PUSH
41073: LD_INT 4
41075: MINUS
41076: PUSH
41077: LD_VAR 0 2
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: LIST
41089: PUSH
41090: LD_VAR 0 1
41094: PUSH
41095: LD_VAR 0 2
41099: PUSH
41100: LD_INT 4
41102: MINUS
41103: PUSH
41104: LD_INT 3
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: LIST
41111: PUSH
41112: LD_VAR 0 1
41116: PUSH
41117: LD_INT 4
41119: PLUS
41120: PUSH
41121: LD_VAR 0 2
41125: PUSH
41126: LD_INT 4
41128: PLUS
41129: PUSH
41130: LD_INT 5
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: LIST
41137: PUSH
41138: LD_VAR 0 1
41142: PUSH
41143: LD_INT 3
41145: PLUS
41146: PUSH
41147: LD_VAR 0 2
41151: PUSH
41152: LD_INT 4
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: LIST
41159: PUSH
41160: LD_VAR 0 1
41164: PUSH
41165: LD_VAR 0 2
41169: PUSH
41170: LD_INT 3
41172: PLUS
41173: PUSH
41174: LD_INT 0
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: LIST
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: ST_TO_ADDR
// end ; end ;
41189: GO 41192
41191: POP
// result := list ;
41192: LD_ADDR_VAR 0 4
41196: PUSH
41197: LD_VAR 0 5
41201: ST_TO_ADDR
// end ;
41202: LD_VAR 0 4
41206: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
41207: LD_INT 0
41209: PPUSH
41210: PPUSH
41211: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
41212: LD_VAR 0 1
41216: NOT
41217: PUSH
41218: LD_VAR 0 2
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: LD_INT 2
41228: PUSH
41229: LD_INT 3
41231: PUSH
41232: LD_INT 4
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: IN
41241: NOT
41242: OR
41243: IFFALSE 41247
// exit ;
41245: GO 41339
// tmp := [ ] ;
41247: LD_ADDR_VAR 0 5
41251: PUSH
41252: EMPTY
41253: ST_TO_ADDR
// for i in units do
41254: LD_ADDR_VAR 0 4
41258: PUSH
41259: LD_VAR 0 1
41263: PUSH
41264: FOR_IN
41265: IFFALSE 41308
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
41267: LD_ADDR_VAR 0 5
41271: PUSH
41272: LD_VAR 0 5
41276: PPUSH
41277: LD_VAR 0 5
41281: PUSH
41282: LD_INT 1
41284: PLUS
41285: PPUSH
41286: LD_VAR 0 4
41290: PPUSH
41291: LD_VAR 0 2
41295: PPUSH
41296: CALL_OW 259
41300: PPUSH
41301: CALL_OW 2
41305: ST_TO_ADDR
41306: GO 41264
41308: POP
41309: POP
// if not tmp then
41310: LD_VAR 0 5
41314: NOT
41315: IFFALSE 41319
// exit ;
41317: GO 41339
// result := SortListByListDesc ( units , tmp ) ;
41319: LD_ADDR_VAR 0 3
41323: PUSH
41324: LD_VAR 0 1
41328: PPUSH
41329: LD_VAR 0 5
41333: PPUSH
41334: CALL_OW 77
41338: ST_TO_ADDR
// end ;
41339: LD_VAR 0 3
41343: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
41344: LD_INT 0
41346: PPUSH
41347: PPUSH
41348: PPUSH
// result := false ;
41349: LD_ADDR_VAR 0 3
41353: PUSH
41354: LD_INT 0
41356: ST_TO_ADDR
// x := GetX ( building ) ;
41357: LD_ADDR_VAR 0 4
41361: PUSH
41362: LD_VAR 0 2
41366: PPUSH
41367: CALL_OW 250
41371: ST_TO_ADDR
// y := GetY ( building ) ;
41372: LD_ADDR_VAR 0 5
41376: PUSH
41377: LD_VAR 0 2
41381: PPUSH
41382: CALL_OW 251
41386: ST_TO_ADDR
// if not building or not x or not y then
41387: LD_VAR 0 2
41391: NOT
41392: PUSH
41393: LD_VAR 0 4
41397: NOT
41398: OR
41399: PUSH
41400: LD_VAR 0 5
41404: NOT
41405: OR
41406: IFFALSE 41410
// exit ;
41408: GO 41502
// if GetTaskList ( unit ) then
41410: LD_VAR 0 1
41414: PPUSH
41415: CALL_OW 437
41419: IFFALSE 41502
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
41421: LD_STRING e
41423: PUSH
41424: LD_VAR 0 1
41428: PPUSH
41429: CALL_OW 437
41433: PUSH
41434: LD_INT 1
41436: ARRAY
41437: PUSH
41438: LD_INT 1
41440: ARRAY
41441: EQUAL
41442: PUSH
41443: LD_VAR 0 4
41447: PUSH
41448: LD_VAR 0 1
41452: PPUSH
41453: CALL_OW 437
41457: PUSH
41458: LD_INT 1
41460: ARRAY
41461: PUSH
41462: LD_INT 2
41464: ARRAY
41465: EQUAL
41466: AND
41467: PUSH
41468: LD_VAR 0 5
41472: PUSH
41473: LD_VAR 0 1
41477: PPUSH
41478: CALL_OW 437
41482: PUSH
41483: LD_INT 1
41485: ARRAY
41486: PUSH
41487: LD_INT 3
41489: ARRAY
41490: EQUAL
41491: AND
41492: IFFALSE 41502
// result := true end ;
41494: LD_ADDR_VAR 0 3
41498: PUSH
41499: LD_INT 1
41501: ST_TO_ADDR
// end ;
41502: LD_VAR 0 3
41506: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
41507: LD_INT 0
41509: PPUSH
// result := false ;
41510: LD_ADDR_VAR 0 4
41514: PUSH
41515: LD_INT 0
41517: ST_TO_ADDR
// if GetTaskList ( unit ) then
41518: LD_VAR 0 1
41522: PPUSH
41523: CALL_OW 437
41527: IFFALSE 41610
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
41529: LD_STRING M
41531: PUSH
41532: LD_VAR 0 1
41536: PPUSH
41537: CALL_OW 437
41541: PUSH
41542: LD_INT 1
41544: ARRAY
41545: PUSH
41546: LD_INT 1
41548: ARRAY
41549: EQUAL
41550: PUSH
41551: LD_VAR 0 2
41555: PUSH
41556: LD_VAR 0 1
41560: PPUSH
41561: CALL_OW 437
41565: PUSH
41566: LD_INT 1
41568: ARRAY
41569: PUSH
41570: LD_INT 2
41572: ARRAY
41573: EQUAL
41574: AND
41575: PUSH
41576: LD_VAR 0 3
41580: PUSH
41581: LD_VAR 0 1
41585: PPUSH
41586: CALL_OW 437
41590: PUSH
41591: LD_INT 1
41593: ARRAY
41594: PUSH
41595: LD_INT 3
41597: ARRAY
41598: EQUAL
41599: AND
41600: IFFALSE 41610
// result := true ;
41602: LD_ADDR_VAR 0 4
41606: PUSH
41607: LD_INT 1
41609: ST_TO_ADDR
// end ; end ;
41610: LD_VAR 0 4
41614: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
41615: LD_INT 0
41617: PPUSH
41618: PPUSH
41619: PPUSH
41620: PPUSH
// if not unit or not area then
41621: LD_VAR 0 1
41625: NOT
41626: PUSH
41627: LD_VAR 0 2
41631: NOT
41632: OR
41633: IFFALSE 41637
// exit ;
41635: GO 41801
// tmp := AreaToList ( area , i ) ;
41637: LD_ADDR_VAR 0 6
41641: PUSH
41642: LD_VAR 0 2
41646: PPUSH
41647: LD_VAR 0 5
41651: PPUSH
41652: CALL_OW 517
41656: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
41657: LD_ADDR_VAR 0 5
41661: PUSH
41662: DOUBLE
41663: LD_INT 1
41665: DEC
41666: ST_TO_ADDR
41667: LD_VAR 0 6
41671: PUSH
41672: LD_INT 1
41674: ARRAY
41675: PUSH
41676: FOR_TO
41677: IFFALSE 41799
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
41679: LD_ADDR_VAR 0 7
41683: PUSH
41684: LD_VAR 0 6
41688: PUSH
41689: LD_INT 1
41691: ARRAY
41692: PUSH
41693: LD_VAR 0 5
41697: ARRAY
41698: PUSH
41699: LD_VAR 0 6
41703: PUSH
41704: LD_INT 2
41706: ARRAY
41707: PUSH
41708: LD_VAR 0 5
41712: ARRAY
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
41718: LD_VAR 0 7
41722: PUSH
41723: LD_INT 1
41725: ARRAY
41726: PPUSH
41727: LD_VAR 0 7
41731: PUSH
41732: LD_INT 2
41734: ARRAY
41735: PPUSH
41736: CALL_OW 428
41740: PUSH
41741: LD_INT 0
41743: EQUAL
41744: IFFALSE 41797
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
41746: LD_VAR 0 1
41750: PPUSH
41751: LD_VAR 0 7
41755: PUSH
41756: LD_INT 1
41758: ARRAY
41759: PPUSH
41760: LD_VAR 0 7
41764: PUSH
41765: LD_INT 2
41767: ARRAY
41768: PPUSH
41769: LD_VAR 0 3
41773: PPUSH
41774: CALL_OW 48
// result := IsPlaced ( unit ) ;
41778: LD_ADDR_VAR 0 4
41782: PUSH
41783: LD_VAR 0 1
41787: PPUSH
41788: CALL_OW 305
41792: ST_TO_ADDR
// exit ;
41793: POP
41794: POP
41795: GO 41801
// end ; end ;
41797: GO 41676
41799: POP
41800: POP
// end ;
41801: LD_VAR 0 4
41805: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
41806: LD_INT 0
41808: PPUSH
41809: PPUSH
41810: PPUSH
// if not side or side > 8 then
41811: LD_VAR 0 1
41815: NOT
41816: PUSH
41817: LD_VAR 0 1
41821: PUSH
41822: LD_INT 8
41824: GREATER
41825: OR
41826: IFFALSE 41830
// exit ;
41828: GO 42017
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
41830: LD_ADDR_VAR 0 4
41834: PUSH
41835: LD_INT 22
41837: PUSH
41838: LD_VAR 0 1
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 21
41849: PUSH
41850: LD_INT 3
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PPUSH
41861: CALL_OW 69
41865: ST_TO_ADDR
// if not tmp then
41866: LD_VAR 0 4
41870: NOT
41871: IFFALSE 41875
// exit ;
41873: GO 42017
// enable_addtolog := true ;
41875: LD_ADDR_OWVAR 81
41879: PUSH
41880: LD_INT 1
41882: ST_TO_ADDR
// AddToLog ( [ ) ;
41883: LD_STRING [
41885: PPUSH
41886: CALL_OW 561
// for i in tmp do
41890: LD_ADDR_VAR 0 3
41894: PUSH
41895: LD_VAR 0 4
41899: PUSH
41900: FOR_IN
41901: IFFALSE 42008
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
41903: LD_STRING [
41905: PUSH
41906: LD_VAR 0 3
41910: PPUSH
41911: CALL_OW 266
41915: STR
41916: PUSH
41917: LD_STRING , 
41919: STR
41920: PUSH
41921: LD_VAR 0 3
41925: PPUSH
41926: CALL_OW 250
41930: STR
41931: PUSH
41932: LD_STRING , 
41934: STR
41935: PUSH
41936: LD_VAR 0 3
41940: PPUSH
41941: CALL_OW 251
41945: STR
41946: PUSH
41947: LD_STRING , 
41949: STR
41950: PUSH
41951: LD_VAR 0 3
41955: PPUSH
41956: CALL_OW 254
41960: STR
41961: PUSH
41962: LD_STRING , 
41964: STR
41965: PUSH
41966: LD_VAR 0 3
41970: PPUSH
41971: LD_INT 1
41973: PPUSH
41974: CALL_OW 268
41978: STR
41979: PUSH
41980: LD_STRING , 
41982: STR
41983: PUSH
41984: LD_VAR 0 3
41988: PPUSH
41989: LD_INT 2
41991: PPUSH
41992: CALL_OW 268
41996: STR
41997: PUSH
41998: LD_STRING ],
42000: STR
42001: PPUSH
42002: CALL_OW 561
// end ;
42006: GO 41900
42008: POP
42009: POP
// AddToLog ( ]; ) ;
42010: LD_STRING ];
42012: PPUSH
42013: CALL_OW 561
// end ;
42017: LD_VAR 0 2
42021: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
42022: LD_INT 0
42024: PPUSH
42025: PPUSH
42026: PPUSH
42027: PPUSH
42028: PPUSH
// if not area or not rate or not max then
42029: LD_VAR 0 1
42033: NOT
42034: PUSH
42035: LD_VAR 0 2
42039: NOT
42040: OR
42041: PUSH
42042: LD_VAR 0 4
42046: NOT
42047: OR
42048: IFFALSE 42052
// exit ;
42050: GO 42241
// while 1 do
42052: LD_INT 1
42054: IFFALSE 42241
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
42056: LD_ADDR_VAR 0 9
42060: PUSH
42061: LD_VAR 0 1
42065: PPUSH
42066: LD_INT 1
42068: PPUSH
42069: CALL_OW 287
42073: PUSH
42074: LD_INT 10
42076: MUL
42077: ST_TO_ADDR
// r := rate / 10 ;
42078: LD_ADDR_VAR 0 7
42082: PUSH
42083: LD_VAR 0 2
42087: PUSH
42088: LD_INT 10
42090: DIVREAL
42091: ST_TO_ADDR
// time := 1 1$00 ;
42092: LD_ADDR_VAR 0 8
42096: PUSH
42097: LD_INT 2100
42099: ST_TO_ADDR
// if amount < min then
42100: LD_VAR 0 9
42104: PUSH
42105: LD_VAR 0 3
42109: LESS
42110: IFFALSE 42128
// r := r * 2 else
42112: LD_ADDR_VAR 0 7
42116: PUSH
42117: LD_VAR 0 7
42121: PUSH
42122: LD_INT 2
42124: MUL
42125: ST_TO_ADDR
42126: GO 42154
// if amount > max then
42128: LD_VAR 0 9
42132: PUSH
42133: LD_VAR 0 4
42137: GREATER
42138: IFFALSE 42154
// r := r / 2 ;
42140: LD_ADDR_VAR 0 7
42144: PUSH
42145: LD_VAR 0 7
42149: PUSH
42150: LD_INT 2
42152: DIVREAL
42153: ST_TO_ADDR
// time := time / r ;
42154: LD_ADDR_VAR 0 8
42158: PUSH
42159: LD_VAR 0 8
42163: PUSH
42164: LD_VAR 0 7
42168: DIVREAL
42169: ST_TO_ADDR
// if time < 0 then
42170: LD_VAR 0 8
42174: PUSH
42175: LD_INT 0
42177: LESS
42178: IFFALSE 42195
// time := time * - 1 ;
42180: LD_ADDR_VAR 0 8
42184: PUSH
42185: LD_VAR 0 8
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: MUL
42194: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
42195: LD_VAR 0 8
42199: PUSH
42200: LD_INT 35
42202: PPUSH
42203: LD_INT 875
42205: PPUSH
42206: CALL_OW 12
42210: PLUS
42211: PPUSH
42212: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
42216: LD_INT 1
42218: PPUSH
42219: LD_INT 5
42221: PPUSH
42222: CALL_OW 12
42226: PPUSH
42227: LD_VAR 0 1
42231: PPUSH
42232: LD_INT 1
42234: PPUSH
42235: CALL_OW 55
// end ;
42239: GO 42052
// end ;
42241: LD_VAR 0 5
42245: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
42246: LD_INT 0
42248: PPUSH
42249: PPUSH
42250: PPUSH
42251: PPUSH
42252: PPUSH
42253: PPUSH
42254: PPUSH
42255: PPUSH
// if not turrets or not factories then
42256: LD_VAR 0 1
42260: NOT
42261: PUSH
42262: LD_VAR 0 2
42266: NOT
42267: OR
42268: IFFALSE 42272
// exit ;
42270: GO 42579
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
42272: LD_ADDR_VAR 0 10
42276: PUSH
42277: LD_INT 5
42279: PUSH
42280: LD_INT 6
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 2
42289: PUSH
42290: LD_INT 4
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 3
42299: PUSH
42300: LD_INT 5
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 24
42314: PUSH
42315: LD_INT 25
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 23
42324: PUSH
42325: LD_INT 27
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 42
42338: PUSH
42339: LD_INT 43
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 44
42348: PUSH
42349: LD_INT 46
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 45
42358: PUSH
42359: LD_INT 47
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: LIST
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: LIST
42375: ST_TO_ADDR
// result := [ ] ;
42376: LD_ADDR_VAR 0 3
42380: PUSH
42381: EMPTY
42382: ST_TO_ADDR
// for i in turrets do
42383: LD_ADDR_VAR 0 4
42387: PUSH
42388: LD_VAR 0 1
42392: PUSH
42393: FOR_IN
42394: IFFALSE 42577
// begin nat := GetNation ( i ) ;
42396: LD_ADDR_VAR 0 7
42400: PUSH
42401: LD_VAR 0 4
42405: PPUSH
42406: CALL_OW 248
42410: ST_TO_ADDR
// weapon := 0 ;
42411: LD_ADDR_VAR 0 8
42415: PUSH
42416: LD_INT 0
42418: ST_TO_ADDR
// if not nat then
42419: LD_VAR 0 7
42423: NOT
42424: IFFALSE 42428
// continue ;
42426: GO 42393
// for j in list [ nat ] do
42428: LD_ADDR_VAR 0 5
42432: PUSH
42433: LD_VAR 0 10
42437: PUSH
42438: LD_VAR 0 7
42442: ARRAY
42443: PUSH
42444: FOR_IN
42445: IFFALSE 42486
// if GetBWeapon ( i ) = j [ 1 ] then
42447: LD_VAR 0 4
42451: PPUSH
42452: CALL_OW 269
42456: PUSH
42457: LD_VAR 0 5
42461: PUSH
42462: LD_INT 1
42464: ARRAY
42465: EQUAL
42466: IFFALSE 42484
// begin weapon := j [ 2 ] ;
42468: LD_ADDR_VAR 0 8
42472: PUSH
42473: LD_VAR 0 5
42477: PUSH
42478: LD_INT 2
42480: ARRAY
42481: ST_TO_ADDR
// break ;
42482: GO 42486
// end ;
42484: GO 42444
42486: POP
42487: POP
// if not weapon then
42488: LD_VAR 0 8
42492: NOT
42493: IFFALSE 42497
// continue ;
42495: GO 42393
// for k in factories do
42497: LD_ADDR_VAR 0 6
42501: PUSH
42502: LD_VAR 0 2
42506: PUSH
42507: FOR_IN
42508: IFFALSE 42573
// begin weapons := AvailableWeaponList ( k ) ;
42510: LD_ADDR_VAR 0 9
42514: PUSH
42515: LD_VAR 0 6
42519: PPUSH
42520: CALL_OW 478
42524: ST_TO_ADDR
// if not weapons then
42525: LD_VAR 0 9
42529: NOT
42530: IFFALSE 42534
// continue ;
42532: GO 42507
// if weapon in weapons then
42534: LD_VAR 0 8
42538: PUSH
42539: LD_VAR 0 9
42543: IN
42544: IFFALSE 42571
// begin result := [ i , weapon ] ;
42546: LD_ADDR_VAR 0 3
42550: PUSH
42551: LD_VAR 0 4
42555: PUSH
42556: LD_VAR 0 8
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: ST_TO_ADDR
// exit ;
42565: POP
42566: POP
42567: POP
42568: POP
42569: GO 42579
// end ; end ;
42571: GO 42507
42573: POP
42574: POP
// end ;
42575: GO 42393
42577: POP
42578: POP
// end ;
42579: LD_VAR 0 3
42583: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
42584: LD_INT 0
42586: PPUSH
// if not side or side > 8 then
42587: LD_VAR 0 3
42591: NOT
42592: PUSH
42593: LD_VAR 0 3
42597: PUSH
42598: LD_INT 8
42600: GREATER
42601: OR
42602: IFFALSE 42606
// exit ;
42604: GO 42665
// if not range then
42606: LD_VAR 0 4
42610: NOT
42611: IFFALSE 42622
// range := - 12 ;
42613: LD_ADDR_VAR 0 4
42617: PUSH
42618: LD_INT 12
42620: NEG
42621: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
42622: LD_VAR 0 1
42626: PPUSH
42627: LD_VAR 0 2
42631: PPUSH
42632: LD_VAR 0 3
42636: PPUSH
42637: LD_VAR 0 4
42641: PPUSH
42642: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
42646: LD_VAR 0 1
42650: PPUSH
42651: LD_VAR 0 2
42655: PPUSH
42656: LD_VAR 0 3
42660: PPUSH
42661: CALL_OW 331
// end ;
42665: LD_VAR 0 5
42669: RET
// export function Video ( mode ) ; begin
42670: LD_INT 0
42672: PPUSH
// ingame_video = mode ;
42673: LD_ADDR_OWVAR 52
42677: PUSH
42678: LD_VAR 0 1
42682: ST_TO_ADDR
// interface_hidden = mode ;
42683: LD_ADDR_OWVAR 54
42687: PUSH
42688: LD_VAR 0 1
42692: ST_TO_ADDR
// end ;
42693: LD_VAR 0 2
42697: RET
// export function Join ( array , element ) ; begin
42698: LD_INT 0
42700: PPUSH
// result := Replace ( array , array + 1 , element ) ;
42701: LD_ADDR_VAR 0 3
42705: PUSH
42706: LD_VAR 0 1
42710: PPUSH
42711: LD_VAR 0 1
42715: PUSH
42716: LD_INT 1
42718: PLUS
42719: PPUSH
42720: LD_VAR 0 2
42724: PPUSH
42725: CALL_OW 1
42729: ST_TO_ADDR
// end ;
42730: LD_VAR 0 3
42734: RET
// export function JoinUnion ( array , element ) ; begin
42735: LD_INT 0
42737: PPUSH
// result := array union element ;
42738: LD_ADDR_VAR 0 3
42742: PUSH
42743: LD_VAR 0 1
42747: PUSH
42748: LD_VAR 0 2
42752: UNION
42753: ST_TO_ADDR
// end ;
42754: LD_VAR 0 3
42758: RET
// export function GetBehemoths ( side ) ; begin
42759: LD_INT 0
42761: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
42762: LD_ADDR_VAR 0 2
42766: PUSH
42767: LD_INT 22
42769: PUSH
42770: LD_VAR 0 1
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 31
42781: PUSH
42782: LD_INT 25
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PPUSH
42793: CALL_OW 69
42797: ST_TO_ADDR
// end ;
42798: LD_VAR 0 2
42802: RET
// export function Shuffle ( array ) ; var i , index ; begin
42803: LD_INT 0
42805: PPUSH
42806: PPUSH
42807: PPUSH
// result := [ ] ;
42808: LD_ADDR_VAR 0 2
42812: PUSH
42813: EMPTY
42814: ST_TO_ADDR
// if not array then
42815: LD_VAR 0 1
42819: NOT
42820: IFFALSE 42824
// exit ;
42822: GO 42923
// Randomize ;
42824: CALL_OW 10
// for i = array downto 1 do
42828: LD_ADDR_VAR 0 3
42832: PUSH
42833: DOUBLE
42834: LD_VAR 0 1
42838: INC
42839: ST_TO_ADDR
42840: LD_INT 1
42842: PUSH
42843: FOR_DOWNTO
42844: IFFALSE 42921
// begin index := rand ( 1 , array ) ;
42846: LD_ADDR_VAR 0 4
42850: PUSH
42851: LD_INT 1
42853: PPUSH
42854: LD_VAR 0 1
42858: PPUSH
42859: CALL_OW 12
42863: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
42864: LD_ADDR_VAR 0 2
42868: PUSH
42869: LD_VAR 0 2
42873: PPUSH
42874: LD_VAR 0 2
42878: PUSH
42879: LD_INT 1
42881: PLUS
42882: PPUSH
42883: LD_VAR 0 1
42887: PUSH
42888: LD_VAR 0 4
42892: ARRAY
42893: PPUSH
42894: CALL_OW 2
42898: ST_TO_ADDR
// array := Delete ( array , index ) ;
42899: LD_ADDR_VAR 0 1
42903: PUSH
42904: LD_VAR 0 1
42908: PPUSH
42909: LD_VAR 0 4
42913: PPUSH
42914: CALL_OW 3
42918: ST_TO_ADDR
// end ;
42919: GO 42843
42921: POP
42922: POP
// end ;
42923: LD_VAR 0 2
42927: RET
// export function GetBaseMaterials ( base ) ; begin
42928: LD_INT 0
42930: PPUSH
// result := [ 0 , 0 , 0 ] ;
42931: LD_ADDR_VAR 0 2
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: LIST
42949: ST_TO_ADDR
// if not base then
42950: LD_VAR 0 1
42954: NOT
42955: IFFALSE 42959
// exit ;
42957: GO 43008
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
42959: LD_ADDR_VAR 0 2
42963: PUSH
42964: LD_VAR 0 1
42968: PPUSH
42969: LD_INT 1
42971: PPUSH
42972: CALL_OW 275
42976: PUSH
42977: LD_VAR 0 1
42981: PPUSH
42982: LD_INT 2
42984: PPUSH
42985: CALL_OW 275
42989: PUSH
42990: LD_VAR 0 1
42994: PPUSH
42995: LD_INT 3
42997: PPUSH
42998: CALL_OW 275
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: LIST
43007: ST_TO_ADDR
// end ;
43008: LD_VAR 0 2
43012: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
43013: LD_INT 0
43015: PPUSH
43016: PPUSH
// result := array ;
43017: LD_ADDR_VAR 0 3
43021: PUSH
43022: LD_VAR 0 1
43026: ST_TO_ADDR
// if size > 0 then
43027: LD_VAR 0 2
43031: PUSH
43032: LD_INT 0
43034: GREATER
43035: IFFALSE 43081
// for i := array downto size do
43037: LD_ADDR_VAR 0 4
43041: PUSH
43042: DOUBLE
43043: LD_VAR 0 1
43047: INC
43048: ST_TO_ADDR
43049: LD_VAR 0 2
43053: PUSH
43054: FOR_DOWNTO
43055: IFFALSE 43079
// result := Delete ( result , result ) ;
43057: LD_ADDR_VAR 0 3
43061: PUSH
43062: LD_VAR 0 3
43066: PPUSH
43067: LD_VAR 0 3
43071: PPUSH
43072: CALL_OW 3
43076: ST_TO_ADDR
43077: GO 43054
43079: POP
43080: POP
// end ;
43081: LD_VAR 0 3
43085: RET
// export function ComExit ( unit ) ; var tmp ; begin
43086: LD_INT 0
43088: PPUSH
43089: PPUSH
// if not IsInUnit ( unit ) then
43090: LD_VAR 0 1
43094: PPUSH
43095: CALL_OW 310
43099: NOT
43100: IFFALSE 43104
// exit ;
43102: GO 43164
// tmp := IsInUnit ( unit ) ;
43104: LD_ADDR_VAR 0 3
43108: PUSH
43109: LD_VAR 0 1
43113: PPUSH
43114: CALL_OW 310
43118: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
43119: LD_VAR 0 3
43123: PPUSH
43124: CALL_OW 247
43128: PUSH
43129: LD_INT 2
43131: EQUAL
43132: IFFALSE 43145
// ComExitVehicle ( unit ) else
43134: LD_VAR 0 1
43138: PPUSH
43139: CALL_OW 121
43143: GO 43154
// ComExitBuilding ( unit ) ;
43145: LD_VAR 0 1
43149: PPUSH
43150: CALL_OW 122
// result := tmp ;
43154: LD_ADDR_VAR 0 2
43158: PUSH
43159: LD_VAR 0 3
43163: ST_TO_ADDR
// end ;
43164: LD_VAR 0 2
43168: RET
// export function ComExitAll ( units ) ; var i ; begin
43169: LD_INT 0
43171: PPUSH
43172: PPUSH
// if not units then
43173: LD_VAR 0 1
43177: NOT
43178: IFFALSE 43182
// exit ;
43180: GO 43208
// for i in units do
43182: LD_ADDR_VAR 0 3
43186: PUSH
43187: LD_VAR 0 1
43191: PUSH
43192: FOR_IN
43193: IFFALSE 43206
// ComExit ( i ) ;
43195: LD_VAR 0 3
43199: PPUSH
43200: CALL 43086 0 1
43204: GO 43192
43206: POP
43207: POP
// end ;
43208: LD_VAR 0 2
43212: RET
// export function ResetHc ; begin
43213: LD_INT 0
43215: PPUSH
// InitHc ;
43216: CALL_OW 19
// hc_importance := 0 ;
43220: LD_ADDR_OWVAR 32
43224: PUSH
43225: LD_INT 0
43227: ST_TO_ADDR
// end ;
43228: LD_VAR 0 1
43232: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
43233: LD_INT 0
43235: PPUSH
43236: PPUSH
43237: PPUSH
// _x := ( x1 + x2 ) div 2 ;
43238: LD_ADDR_VAR 0 6
43242: PUSH
43243: LD_VAR 0 1
43247: PUSH
43248: LD_VAR 0 3
43252: PLUS
43253: PUSH
43254: LD_INT 2
43256: DIV
43257: ST_TO_ADDR
// if _x < 0 then
43258: LD_VAR 0 6
43262: PUSH
43263: LD_INT 0
43265: LESS
43266: IFFALSE 43283
// _x := _x * - 1 ;
43268: LD_ADDR_VAR 0 6
43272: PUSH
43273: LD_VAR 0 6
43277: PUSH
43278: LD_INT 1
43280: NEG
43281: MUL
43282: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
43283: LD_ADDR_VAR 0 7
43287: PUSH
43288: LD_VAR 0 2
43292: PUSH
43293: LD_VAR 0 4
43297: PLUS
43298: PUSH
43299: LD_INT 2
43301: DIV
43302: ST_TO_ADDR
// if _y < 0 then
43303: LD_VAR 0 7
43307: PUSH
43308: LD_INT 0
43310: LESS
43311: IFFALSE 43328
// _y := _y * - 1 ;
43313: LD_ADDR_VAR 0 7
43317: PUSH
43318: LD_VAR 0 7
43322: PUSH
43323: LD_INT 1
43325: NEG
43326: MUL
43327: ST_TO_ADDR
// result := [ _x , _y ] ;
43328: LD_ADDR_VAR 0 5
43332: PUSH
43333: LD_VAR 0 6
43337: PUSH
43338: LD_VAR 0 7
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: ST_TO_ADDR
// end ;
43347: LD_VAR 0 5
43351: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
43352: LD_INT 0
43354: PPUSH
43355: PPUSH
43356: PPUSH
43357: PPUSH
// task := GetTaskList ( unit ) ;
43358: LD_ADDR_VAR 0 7
43362: PUSH
43363: LD_VAR 0 1
43367: PPUSH
43368: CALL_OW 437
43372: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
43373: LD_VAR 0 7
43377: NOT
43378: PUSH
43379: LD_VAR 0 1
43383: PPUSH
43384: LD_VAR 0 2
43388: PPUSH
43389: CALL_OW 308
43393: NOT
43394: AND
43395: IFFALSE 43399
// exit ;
43397: GO 43517
// if IsInArea ( unit , area ) then
43399: LD_VAR 0 1
43403: PPUSH
43404: LD_VAR 0 2
43408: PPUSH
43409: CALL_OW 308
43413: IFFALSE 43431
// begin ComMoveToArea ( unit , goAway ) ;
43415: LD_VAR 0 1
43419: PPUSH
43420: LD_VAR 0 3
43424: PPUSH
43425: CALL_OW 113
// exit ;
43429: GO 43517
// end ; if task [ 1 ] [ 1 ] <> M then
43431: LD_VAR 0 7
43435: PUSH
43436: LD_INT 1
43438: ARRAY
43439: PUSH
43440: LD_INT 1
43442: ARRAY
43443: PUSH
43444: LD_STRING M
43446: NONEQUAL
43447: IFFALSE 43451
// exit ;
43449: GO 43517
// x := task [ 1 ] [ 2 ] ;
43451: LD_ADDR_VAR 0 5
43455: PUSH
43456: LD_VAR 0 7
43460: PUSH
43461: LD_INT 1
43463: ARRAY
43464: PUSH
43465: LD_INT 2
43467: ARRAY
43468: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
43469: LD_ADDR_VAR 0 6
43473: PUSH
43474: LD_VAR 0 7
43478: PUSH
43479: LD_INT 1
43481: ARRAY
43482: PUSH
43483: LD_INT 3
43485: ARRAY
43486: ST_TO_ADDR
// if InArea ( x , y , area ) then
43487: LD_VAR 0 5
43491: PPUSH
43492: LD_VAR 0 6
43496: PPUSH
43497: LD_VAR 0 2
43501: PPUSH
43502: CALL_OW 309
43506: IFFALSE 43517
// ComStop ( unit ) ;
43508: LD_VAR 0 1
43512: PPUSH
43513: CALL_OW 141
// end ;
43517: LD_VAR 0 4
43521: RET
// export function Abs ( value ) ; begin
43522: LD_INT 0
43524: PPUSH
// result := value ;
43525: LD_ADDR_VAR 0 2
43529: PUSH
43530: LD_VAR 0 1
43534: ST_TO_ADDR
// if value < 0 then
43535: LD_VAR 0 1
43539: PUSH
43540: LD_INT 0
43542: LESS
43543: IFFALSE 43560
// result := value * - 1 ;
43545: LD_ADDR_VAR 0 2
43549: PUSH
43550: LD_VAR 0 1
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: MUL
43559: ST_TO_ADDR
// end ;
43560: LD_VAR 0 2
43564: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
43565: LD_INT 0
43567: PPUSH
43568: PPUSH
43569: PPUSH
43570: PPUSH
43571: PPUSH
43572: PPUSH
43573: PPUSH
43574: PPUSH
// if not unit or not building then
43575: LD_VAR 0 1
43579: NOT
43580: PUSH
43581: LD_VAR 0 2
43585: NOT
43586: OR
43587: IFFALSE 43591
// exit ;
43589: GO 43817
// x := GetX ( building ) ;
43591: LD_ADDR_VAR 0 4
43595: PUSH
43596: LD_VAR 0 2
43600: PPUSH
43601: CALL_OW 250
43605: ST_TO_ADDR
// y := GetY ( building ) ;
43606: LD_ADDR_VAR 0 6
43610: PUSH
43611: LD_VAR 0 2
43615: PPUSH
43616: CALL_OW 251
43620: ST_TO_ADDR
// d := GetDir ( building ) ;
43621: LD_ADDR_VAR 0 8
43625: PUSH
43626: LD_VAR 0 2
43630: PPUSH
43631: CALL_OW 254
43635: ST_TO_ADDR
// r := 4 ;
43636: LD_ADDR_VAR 0 9
43640: PUSH
43641: LD_INT 4
43643: ST_TO_ADDR
// for i := 1 to 5 do
43644: LD_ADDR_VAR 0 10
43648: PUSH
43649: DOUBLE
43650: LD_INT 1
43652: DEC
43653: ST_TO_ADDR
43654: LD_INT 5
43656: PUSH
43657: FOR_TO
43658: IFFALSE 43815
// begin _x := ShiftX ( x , d , r + i ) ;
43660: LD_ADDR_VAR 0 5
43664: PUSH
43665: LD_VAR 0 4
43669: PPUSH
43670: LD_VAR 0 8
43674: PPUSH
43675: LD_VAR 0 9
43679: PUSH
43680: LD_VAR 0 10
43684: PLUS
43685: PPUSH
43686: CALL_OW 272
43690: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
43691: LD_ADDR_VAR 0 7
43695: PUSH
43696: LD_VAR 0 6
43700: PPUSH
43701: LD_VAR 0 8
43705: PPUSH
43706: LD_VAR 0 9
43710: PUSH
43711: LD_VAR 0 10
43715: PLUS
43716: PPUSH
43717: CALL_OW 273
43721: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
43722: LD_VAR 0 5
43726: PPUSH
43727: LD_VAR 0 7
43731: PPUSH
43732: CALL_OW 488
43736: PUSH
43737: LD_VAR 0 5
43741: PPUSH
43742: LD_VAR 0 7
43746: PPUSH
43747: CALL_OW 428
43751: PPUSH
43752: CALL_OW 247
43756: PUSH
43757: LD_INT 3
43759: PUSH
43760: LD_INT 2
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: IN
43767: NOT
43768: AND
43769: IFFALSE 43813
// begin ComMoveXY ( unit , _x , _y ) ;
43771: LD_VAR 0 1
43775: PPUSH
43776: LD_VAR 0 5
43780: PPUSH
43781: LD_VAR 0 7
43785: PPUSH
43786: CALL_OW 111
// result := [ _x , _y ] ;
43790: LD_ADDR_VAR 0 3
43794: PUSH
43795: LD_VAR 0 5
43799: PUSH
43800: LD_VAR 0 7
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: ST_TO_ADDR
// exit ;
43809: POP
43810: POP
43811: GO 43817
// end ; end ;
43813: GO 43657
43815: POP
43816: POP
// end ;
43817: LD_VAR 0 3
43821: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
43822: LD_INT 0
43824: PPUSH
43825: PPUSH
43826: PPUSH
// result := 0 ;
43827: LD_ADDR_VAR 0 3
43831: PUSH
43832: LD_INT 0
43834: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
43835: LD_VAR 0 1
43839: PUSH
43840: LD_INT 0
43842: LESS
43843: PUSH
43844: LD_VAR 0 1
43848: PUSH
43849: LD_INT 8
43851: GREATER
43852: OR
43853: PUSH
43854: LD_VAR 0 2
43858: PUSH
43859: LD_INT 0
43861: LESS
43862: OR
43863: PUSH
43864: LD_VAR 0 2
43868: PUSH
43869: LD_INT 8
43871: GREATER
43872: OR
43873: IFFALSE 43877
// exit ;
43875: GO 43952
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
43877: LD_ADDR_VAR 0 4
43881: PUSH
43882: LD_INT 22
43884: PUSH
43885: LD_VAR 0 2
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PPUSH
43894: CALL_OW 69
43898: PUSH
43899: FOR_IN
43900: IFFALSE 43950
// begin un := UnitShoot ( i ) ;
43902: LD_ADDR_VAR 0 5
43906: PUSH
43907: LD_VAR 0 4
43911: PPUSH
43912: CALL_OW 504
43916: ST_TO_ADDR
// if GetSide ( un ) = side1 then
43917: LD_VAR 0 5
43921: PPUSH
43922: CALL_OW 255
43926: PUSH
43927: LD_VAR 0 1
43931: EQUAL
43932: IFFALSE 43948
// begin result := un ;
43934: LD_ADDR_VAR 0 3
43938: PUSH
43939: LD_VAR 0 5
43943: ST_TO_ADDR
// exit ;
43944: POP
43945: POP
43946: GO 43952
// end ; end ;
43948: GO 43899
43950: POP
43951: POP
// end ;
43952: LD_VAR 0 3
43956: RET
// export function GetCargoBay ( units ) ; begin
43957: LD_INT 0
43959: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
43960: LD_ADDR_VAR 0 2
43964: PUSH
43965: LD_VAR 0 1
43969: PPUSH
43970: LD_INT 2
43972: PUSH
43973: LD_INT 34
43975: PUSH
43976: LD_INT 12
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 34
43985: PUSH
43986: LD_INT 51
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 34
43995: PUSH
43996: LD_INT 32
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 34
44005: PUSH
44006: LD_EXP 77
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: PPUSH
44022: CALL_OW 72
44026: ST_TO_ADDR
// end ;
44027: LD_VAR 0 2
44031: RET
// export function Negate ( value ) ; begin
44032: LD_INT 0
44034: PPUSH
// result := not value ;
44035: LD_ADDR_VAR 0 2
44039: PUSH
44040: LD_VAR 0 1
44044: NOT
44045: ST_TO_ADDR
// end ;
44046: LD_VAR 0 2
44050: RET
// export function Inc ( value ) ; begin
44051: LD_INT 0
44053: PPUSH
// result := value + 1 ;
44054: LD_ADDR_VAR 0 2
44058: PUSH
44059: LD_VAR 0 1
44063: PUSH
44064: LD_INT 1
44066: PLUS
44067: ST_TO_ADDR
// end ;
44068: LD_VAR 0 2
44072: RET
// export function Dec ( value ) ; begin
44073: LD_INT 0
44075: PPUSH
// result := value - 1 ;
44076: LD_ADDR_VAR 0 2
44080: PUSH
44081: LD_VAR 0 1
44085: PUSH
44086: LD_INT 1
44088: MINUS
44089: ST_TO_ADDR
// end ;
44090: LD_VAR 0 2
44094: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
44095: LD_INT 0
44097: PPUSH
44098: PPUSH
44099: PPUSH
44100: PPUSH
44101: PPUSH
44102: PPUSH
44103: PPUSH
44104: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
44105: LD_VAR 0 1
44109: PPUSH
44110: LD_VAR 0 2
44114: PPUSH
44115: CALL_OW 488
44119: NOT
44120: PUSH
44121: LD_VAR 0 3
44125: PPUSH
44126: LD_VAR 0 4
44130: PPUSH
44131: CALL_OW 488
44135: NOT
44136: OR
44137: IFFALSE 44150
// begin result := - 1 ;
44139: LD_ADDR_VAR 0 5
44143: PUSH
44144: LD_INT 1
44146: NEG
44147: ST_TO_ADDR
// exit ;
44148: GO 44385
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
44150: LD_ADDR_VAR 0 12
44154: PUSH
44155: LD_VAR 0 1
44159: PPUSH
44160: LD_VAR 0 2
44164: PPUSH
44165: LD_VAR 0 3
44169: PPUSH
44170: LD_VAR 0 4
44174: PPUSH
44175: CALL 43233 0 4
44179: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
44180: LD_ADDR_VAR 0 11
44184: PUSH
44185: LD_VAR 0 1
44189: PPUSH
44190: LD_VAR 0 2
44194: PPUSH
44195: LD_VAR 0 12
44199: PUSH
44200: LD_INT 1
44202: ARRAY
44203: PPUSH
44204: LD_VAR 0 12
44208: PUSH
44209: LD_INT 2
44211: ARRAY
44212: PPUSH
44213: CALL_OW 298
44217: ST_TO_ADDR
// distance := 9999 ;
44218: LD_ADDR_VAR 0 10
44222: PUSH
44223: LD_INT 9999
44225: ST_TO_ADDR
// for i := 0 to 5 do
44226: LD_ADDR_VAR 0 6
44230: PUSH
44231: DOUBLE
44232: LD_INT 0
44234: DEC
44235: ST_TO_ADDR
44236: LD_INT 5
44238: PUSH
44239: FOR_TO
44240: IFFALSE 44383
// begin _x := ShiftX ( x1 , i , centerDist ) ;
44242: LD_ADDR_VAR 0 7
44246: PUSH
44247: LD_VAR 0 1
44251: PPUSH
44252: LD_VAR 0 6
44256: PPUSH
44257: LD_VAR 0 11
44261: PPUSH
44262: CALL_OW 272
44266: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
44267: LD_ADDR_VAR 0 8
44271: PUSH
44272: LD_VAR 0 2
44276: PPUSH
44277: LD_VAR 0 6
44281: PPUSH
44282: LD_VAR 0 11
44286: PPUSH
44287: CALL_OW 273
44291: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44292: LD_VAR 0 7
44296: PPUSH
44297: LD_VAR 0 8
44301: PPUSH
44302: CALL_OW 488
44306: NOT
44307: IFFALSE 44311
// continue ;
44309: GO 44239
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
44311: LD_ADDR_VAR 0 9
44315: PUSH
44316: LD_VAR 0 12
44320: PUSH
44321: LD_INT 1
44323: ARRAY
44324: PPUSH
44325: LD_VAR 0 12
44329: PUSH
44330: LD_INT 2
44332: ARRAY
44333: PPUSH
44334: LD_VAR 0 7
44338: PPUSH
44339: LD_VAR 0 8
44343: PPUSH
44344: CALL_OW 298
44348: ST_TO_ADDR
// if tmp < distance then
44349: LD_VAR 0 9
44353: PUSH
44354: LD_VAR 0 10
44358: LESS
44359: IFFALSE 44381
// begin result := i ;
44361: LD_ADDR_VAR 0 5
44365: PUSH
44366: LD_VAR 0 6
44370: ST_TO_ADDR
// distance := tmp ;
44371: LD_ADDR_VAR 0 10
44375: PUSH
44376: LD_VAR 0 9
44380: ST_TO_ADDR
// end ; end ;
44381: GO 44239
44383: POP
44384: POP
// end ;
44385: LD_VAR 0 5
44389: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
44390: LD_INT 0
44392: PPUSH
44393: PPUSH
// if not driver or not IsInUnit ( driver ) then
44394: LD_VAR 0 1
44398: NOT
44399: PUSH
44400: LD_VAR 0 1
44404: PPUSH
44405: CALL_OW 310
44409: NOT
44410: OR
44411: IFFALSE 44415
// exit ;
44413: GO 44505
// vehicle := IsInUnit ( driver ) ;
44415: LD_ADDR_VAR 0 3
44419: PUSH
44420: LD_VAR 0 1
44424: PPUSH
44425: CALL_OW 310
44429: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
44430: LD_VAR 0 1
44434: PPUSH
44435: LD_STRING \
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: LD_INT 0
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: PUSH
44465: LD_STRING E
44467: PUSH
44468: LD_INT 0
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: LD_VAR 0 3
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PPUSH
44501: CALL_OW 446
// end ;
44505: LD_VAR 0 2
44509: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
44510: LD_INT 0
44512: PPUSH
44513: PPUSH
// if not driver or not IsInUnit ( driver ) then
44514: LD_VAR 0 1
44518: NOT
44519: PUSH
44520: LD_VAR 0 1
44524: PPUSH
44525: CALL_OW 310
44529: NOT
44530: OR
44531: IFFALSE 44535
// exit ;
44533: GO 44625
// vehicle := IsInUnit ( driver ) ;
44535: LD_ADDR_VAR 0 3
44539: PUSH
44540: LD_VAR 0 1
44544: PPUSH
44545: CALL_OW 310
44549: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
44550: LD_VAR 0 1
44554: PPUSH
44555: LD_STRING \
44557: PUSH
44558: LD_INT 0
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: LD_INT 0
44569: PUSH
44570: LD_INT 0
44572: PUSH
44573: LD_INT 0
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: PUSH
44585: LD_STRING E
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: LD_VAR 0 3
44598: PUSH
44599: LD_INT 0
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PPUSH
44621: CALL_OW 447
// end ;
44625: LD_VAR 0 2
44629: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
44630: LD_INT 0
44632: PPUSH
44633: PPUSH
44634: PPUSH
// tmp := [ ] ;
44635: LD_ADDR_VAR 0 5
44639: PUSH
44640: EMPTY
44641: ST_TO_ADDR
// for i in units do
44642: LD_ADDR_VAR 0 4
44646: PUSH
44647: LD_VAR 0 1
44651: PUSH
44652: FOR_IN
44653: IFFALSE 44691
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
44655: LD_ADDR_VAR 0 5
44659: PUSH
44660: LD_VAR 0 5
44664: PPUSH
44665: LD_VAR 0 5
44669: PUSH
44670: LD_INT 1
44672: PLUS
44673: PPUSH
44674: LD_VAR 0 4
44678: PPUSH
44679: CALL_OW 256
44683: PPUSH
44684: CALL_OW 2
44688: ST_TO_ADDR
44689: GO 44652
44691: POP
44692: POP
// if not tmp then
44693: LD_VAR 0 5
44697: NOT
44698: IFFALSE 44702
// exit ;
44700: GO 44750
// if asc then
44702: LD_VAR 0 2
44706: IFFALSE 44730
// result := SortListByListAsc ( units , tmp ) else
44708: LD_ADDR_VAR 0 3
44712: PUSH
44713: LD_VAR 0 1
44717: PPUSH
44718: LD_VAR 0 5
44722: PPUSH
44723: CALL_OW 76
44727: ST_TO_ADDR
44728: GO 44750
// result := SortListByListDesc ( units , tmp ) ;
44730: LD_ADDR_VAR 0 3
44734: PUSH
44735: LD_VAR 0 1
44739: PPUSH
44740: LD_VAR 0 5
44744: PPUSH
44745: CALL_OW 77
44749: ST_TO_ADDR
// end ;
44750: LD_VAR 0 3
44754: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
44755: LD_INT 0
44757: PPUSH
44758: PPUSH
// task := GetTaskList ( mech ) ;
44759: LD_ADDR_VAR 0 4
44763: PUSH
44764: LD_VAR 0 1
44768: PPUSH
44769: CALL_OW 437
44773: ST_TO_ADDR
// if not task then
44774: LD_VAR 0 4
44778: NOT
44779: IFFALSE 44783
// exit ;
44781: GO 44825
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
44783: LD_ADDR_VAR 0 3
44787: PUSH
44788: LD_VAR 0 4
44792: PUSH
44793: LD_INT 1
44795: ARRAY
44796: PUSH
44797: LD_INT 1
44799: ARRAY
44800: PUSH
44801: LD_STRING r
44803: EQUAL
44804: PUSH
44805: LD_VAR 0 4
44809: PUSH
44810: LD_INT 1
44812: ARRAY
44813: PUSH
44814: LD_INT 4
44816: ARRAY
44817: PUSH
44818: LD_VAR 0 2
44822: EQUAL
44823: AND
44824: ST_TO_ADDR
// end ;
44825: LD_VAR 0 3
44829: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
44830: LD_INT 0
44832: PPUSH
// SetDir ( unit , d ) ;
44833: LD_VAR 0 1
44837: PPUSH
44838: LD_VAR 0 4
44842: PPUSH
44843: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
44847: LD_VAR 0 1
44851: PPUSH
44852: LD_VAR 0 2
44856: PPUSH
44857: LD_VAR 0 3
44861: PPUSH
44862: LD_VAR 0 5
44866: PPUSH
44867: CALL_OW 48
// end ;
44871: LD_VAR 0 6
44875: RET
// export function ToNaturalNumber ( number ) ; begin
44876: LD_INT 0
44878: PPUSH
// result := number div 1 ;
44879: LD_ADDR_VAR 0 2
44883: PUSH
44884: LD_VAR 0 1
44888: PUSH
44889: LD_INT 1
44891: DIV
44892: ST_TO_ADDR
// if number < 0 then
44893: LD_VAR 0 1
44897: PUSH
44898: LD_INT 0
44900: LESS
44901: IFFALSE 44911
// result := 0 ;
44903: LD_ADDR_VAR 0 2
44907: PUSH
44908: LD_INT 0
44910: ST_TO_ADDR
// end ;
44911: LD_VAR 0 2
44915: RET
// export function SortByClass ( units , class ) ; var un ; begin
44916: LD_INT 0
44918: PPUSH
44919: PPUSH
// if not units or not class then
44920: LD_VAR 0 1
44924: NOT
44925: PUSH
44926: LD_VAR 0 2
44930: NOT
44931: OR
44932: IFFALSE 44936
// exit ;
44934: GO 45031
// result := [ ] ;
44936: LD_ADDR_VAR 0 3
44940: PUSH
44941: EMPTY
44942: ST_TO_ADDR
// for un in units do
44943: LD_ADDR_VAR 0 4
44947: PUSH
44948: LD_VAR 0 1
44952: PUSH
44953: FOR_IN
44954: IFFALSE 45029
// if GetClass ( un ) = class then
44956: LD_VAR 0 4
44960: PPUSH
44961: CALL_OW 257
44965: PUSH
44966: LD_VAR 0 2
44970: EQUAL
44971: IFFALSE 44998
// result := Insert ( result , 1 , un ) else
44973: LD_ADDR_VAR 0 3
44977: PUSH
44978: LD_VAR 0 3
44982: PPUSH
44983: LD_INT 1
44985: PPUSH
44986: LD_VAR 0 4
44990: PPUSH
44991: CALL_OW 2
44995: ST_TO_ADDR
44996: GO 45027
// result := Replace ( result , result + 1 , un ) ;
44998: LD_ADDR_VAR 0 3
45002: PUSH
45003: LD_VAR 0 3
45007: PPUSH
45008: LD_VAR 0 3
45012: PUSH
45013: LD_INT 1
45015: PLUS
45016: PPUSH
45017: LD_VAR 0 4
45021: PPUSH
45022: CALL_OW 1
45026: ST_TO_ADDR
45027: GO 44953
45029: POP
45030: POP
// end ;
45031: LD_VAR 0 3
45035: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
45036: LD_INT 0
45038: PPUSH
45039: PPUSH
45040: PPUSH
45041: PPUSH
45042: PPUSH
45043: PPUSH
45044: PPUSH
// result := [ ] ;
45045: LD_ADDR_VAR 0 4
45049: PUSH
45050: EMPTY
45051: ST_TO_ADDR
// if x - r < 0 then
45052: LD_VAR 0 1
45056: PUSH
45057: LD_VAR 0 3
45061: MINUS
45062: PUSH
45063: LD_INT 0
45065: LESS
45066: IFFALSE 45078
// min_x := 0 else
45068: LD_ADDR_VAR 0 8
45072: PUSH
45073: LD_INT 0
45075: ST_TO_ADDR
45076: GO 45094
// min_x := x - r ;
45078: LD_ADDR_VAR 0 8
45082: PUSH
45083: LD_VAR 0 1
45087: PUSH
45088: LD_VAR 0 3
45092: MINUS
45093: ST_TO_ADDR
// if y - r < 0 then
45094: LD_VAR 0 2
45098: PUSH
45099: LD_VAR 0 3
45103: MINUS
45104: PUSH
45105: LD_INT 0
45107: LESS
45108: IFFALSE 45120
// min_y := 0 else
45110: LD_ADDR_VAR 0 7
45114: PUSH
45115: LD_INT 0
45117: ST_TO_ADDR
45118: GO 45136
// min_y := y - r ;
45120: LD_ADDR_VAR 0 7
45124: PUSH
45125: LD_VAR 0 2
45129: PUSH
45130: LD_VAR 0 3
45134: MINUS
45135: ST_TO_ADDR
// max_x := x + r ;
45136: LD_ADDR_VAR 0 9
45140: PUSH
45141: LD_VAR 0 1
45145: PUSH
45146: LD_VAR 0 3
45150: PLUS
45151: ST_TO_ADDR
// max_y := y + r ;
45152: LD_ADDR_VAR 0 10
45156: PUSH
45157: LD_VAR 0 2
45161: PUSH
45162: LD_VAR 0 3
45166: PLUS
45167: ST_TO_ADDR
// for _x = min_x to max_x do
45168: LD_ADDR_VAR 0 5
45172: PUSH
45173: DOUBLE
45174: LD_VAR 0 8
45178: DEC
45179: ST_TO_ADDR
45180: LD_VAR 0 9
45184: PUSH
45185: FOR_TO
45186: IFFALSE 45287
// for _y = min_y to max_y do
45188: LD_ADDR_VAR 0 6
45192: PUSH
45193: DOUBLE
45194: LD_VAR 0 7
45198: DEC
45199: ST_TO_ADDR
45200: LD_VAR 0 10
45204: PUSH
45205: FOR_TO
45206: IFFALSE 45283
// begin if not ValidHex ( _x , _y ) then
45208: LD_VAR 0 5
45212: PPUSH
45213: LD_VAR 0 6
45217: PPUSH
45218: CALL_OW 488
45222: NOT
45223: IFFALSE 45227
// continue ;
45225: GO 45205
// if GetResourceTypeXY ( _x , _y ) then
45227: LD_VAR 0 5
45231: PPUSH
45232: LD_VAR 0 6
45236: PPUSH
45237: CALL_OW 283
45241: IFFALSE 45281
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
45243: LD_ADDR_VAR 0 4
45247: PUSH
45248: LD_VAR 0 4
45252: PPUSH
45253: LD_VAR 0 4
45257: PUSH
45258: LD_INT 1
45260: PLUS
45261: PPUSH
45262: LD_VAR 0 5
45266: PUSH
45267: LD_VAR 0 6
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PPUSH
45276: CALL_OW 1
45280: ST_TO_ADDR
// end ;
45281: GO 45205
45283: POP
45284: POP
45285: GO 45185
45287: POP
45288: POP
// end ;
45289: LD_VAR 0 4
45293: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
45294: LD_INT 0
45296: PPUSH
45297: PPUSH
45298: PPUSH
45299: PPUSH
45300: PPUSH
45301: PPUSH
45302: PPUSH
45303: PPUSH
// if not units then
45304: LD_VAR 0 1
45308: NOT
45309: IFFALSE 45313
// exit ;
45311: GO 45824
// result := UnitFilter ( units , [ f_ok ] ) ;
45313: LD_ADDR_VAR 0 3
45317: PUSH
45318: LD_VAR 0 1
45322: PPUSH
45323: LD_INT 50
45325: PUSH
45326: EMPTY
45327: LIST
45328: PPUSH
45329: CALL_OW 72
45333: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
45334: LD_ADDR_VAR 0 8
45338: PUSH
45339: LD_VAR 0 1
45343: PUSH
45344: LD_INT 1
45346: ARRAY
45347: PPUSH
45348: CALL_OW 255
45352: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
45353: LD_ADDR_VAR 0 10
45357: PUSH
45358: LD_INT 29
45360: PUSH
45361: LD_EXP 80
45365: PUSH
45366: LD_INT 49
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: LIST
45373: ST_TO_ADDR
// if not result then
45374: LD_VAR 0 3
45378: NOT
45379: IFFALSE 45383
// exit ;
45381: GO 45824
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
45383: LD_ADDR_VAR 0 5
45387: PUSH
45388: LD_INT 81
45390: PUSH
45391: LD_VAR 0 8
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PPUSH
45400: CALL_OW 69
45404: ST_TO_ADDR
// for i in result do
45405: LD_ADDR_VAR 0 4
45409: PUSH
45410: LD_VAR 0 3
45414: PUSH
45415: FOR_IN
45416: IFFALSE 45822
// begin tag := GetTag ( i ) + 1 ;
45418: LD_ADDR_VAR 0 9
45422: PUSH
45423: LD_VAR 0 4
45427: PPUSH
45428: CALL_OW 110
45432: PUSH
45433: LD_INT 1
45435: PLUS
45436: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
45437: LD_ADDR_VAR 0 7
45441: PUSH
45442: LD_VAR 0 4
45446: PPUSH
45447: CALL_OW 250
45451: PPUSH
45452: LD_VAR 0 4
45456: PPUSH
45457: CALL_OW 251
45461: PPUSH
45462: LD_INT 6
45464: PPUSH
45465: CALL 45036 0 3
45469: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
45470: LD_VAR 0 7
45474: PUSH
45475: LD_VAR 0 4
45479: PPUSH
45480: CALL_OW 264
45484: PUSH
45485: LD_VAR 0 10
45489: IN
45490: NOT
45491: AND
45492: IFFALSE 45531
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
45494: LD_VAR 0 4
45498: PPUSH
45499: LD_VAR 0 7
45503: PUSH
45504: LD_INT 1
45506: ARRAY
45507: PUSH
45508: LD_INT 1
45510: ARRAY
45511: PPUSH
45512: LD_VAR 0 7
45516: PUSH
45517: LD_INT 1
45519: ARRAY
45520: PUSH
45521: LD_INT 2
45523: ARRAY
45524: PPUSH
45525: CALL_OW 116
45529: GO 45820
// if path > tag then
45531: LD_VAR 0 2
45535: PUSH
45536: LD_VAR 0 9
45540: GREATER
45541: IFFALSE 45749
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
45543: LD_ADDR_VAR 0 6
45547: PUSH
45548: LD_VAR 0 5
45552: PPUSH
45553: LD_INT 91
45555: PUSH
45556: LD_VAR 0 4
45560: PUSH
45561: LD_INT 12
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: LIST
45568: PPUSH
45569: CALL_OW 72
45573: ST_TO_ADDR
// if nearEnemy then
45574: LD_VAR 0 6
45578: IFFALSE 45647
// begin if GetWeapon ( i ) = ru_time_lapser then
45580: LD_VAR 0 4
45584: PPUSH
45585: CALL_OW 264
45589: PUSH
45590: LD_INT 49
45592: EQUAL
45593: IFFALSE 45621
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
45595: LD_VAR 0 4
45599: PPUSH
45600: LD_VAR 0 6
45604: PPUSH
45605: LD_VAR 0 4
45609: PPUSH
45610: CALL_OW 74
45614: PPUSH
45615: CALL_OW 112
45619: GO 45645
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
45621: LD_VAR 0 4
45625: PPUSH
45626: LD_VAR 0 6
45630: PPUSH
45631: LD_VAR 0 4
45635: PPUSH
45636: CALL_OW 74
45640: PPUSH
45641: CALL_OW 115
// end else
45645: GO 45747
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
45647: LD_VAR 0 4
45651: PPUSH
45652: LD_VAR 0 2
45656: PUSH
45657: LD_VAR 0 9
45661: ARRAY
45662: PUSH
45663: LD_INT 1
45665: ARRAY
45666: PPUSH
45667: LD_VAR 0 2
45671: PUSH
45672: LD_VAR 0 9
45676: ARRAY
45677: PUSH
45678: LD_INT 2
45680: ARRAY
45681: PPUSH
45682: CALL_OW 297
45686: PUSH
45687: LD_INT 6
45689: GREATER
45690: IFFALSE 45733
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
45692: LD_VAR 0 4
45696: PPUSH
45697: LD_VAR 0 2
45701: PUSH
45702: LD_VAR 0 9
45706: ARRAY
45707: PUSH
45708: LD_INT 1
45710: ARRAY
45711: PPUSH
45712: LD_VAR 0 2
45716: PUSH
45717: LD_VAR 0 9
45721: ARRAY
45722: PUSH
45723: LD_INT 2
45725: ARRAY
45726: PPUSH
45727: CALL_OW 114
45731: GO 45747
// SetTag ( i , tag ) ;
45733: LD_VAR 0 4
45737: PPUSH
45738: LD_VAR 0 9
45742: PPUSH
45743: CALL_OW 109
// end else
45747: GO 45820
// if enemy then
45749: LD_VAR 0 5
45753: IFFALSE 45820
// begin if GetWeapon ( i ) = ru_time_lapser then
45755: LD_VAR 0 4
45759: PPUSH
45760: CALL_OW 264
45764: PUSH
45765: LD_INT 49
45767: EQUAL
45768: IFFALSE 45796
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
45770: LD_VAR 0 4
45774: PPUSH
45775: LD_VAR 0 5
45779: PPUSH
45780: LD_VAR 0 4
45784: PPUSH
45785: CALL_OW 74
45789: PPUSH
45790: CALL_OW 112
45794: GO 45820
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
45796: LD_VAR 0 4
45800: PPUSH
45801: LD_VAR 0 5
45805: PPUSH
45806: LD_VAR 0 4
45810: PPUSH
45811: CALL_OW 74
45815: PPUSH
45816: CALL_OW 115
// end ; end ;
45820: GO 45415
45822: POP
45823: POP
// end ;
45824: LD_VAR 0 3
45828: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
45829: LD_INT 0
45831: PPUSH
45832: PPUSH
45833: PPUSH
// if not unit or IsInUnit ( unit ) then
45834: LD_VAR 0 1
45838: NOT
45839: PUSH
45840: LD_VAR 0 1
45844: PPUSH
45845: CALL_OW 310
45849: OR
45850: IFFALSE 45854
// exit ;
45852: GO 45945
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
45854: LD_ADDR_VAR 0 4
45858: PUSH
45859: LD_VAR 0 1
45863: PPUSH
45864: CALL_OW 250
45868: PPUSH
45869: LD_VAR 0 2
45873: PPUSH
45874: LD_INT 1
45876: PPUSH
45877: CALL_OW 272
45881: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
45882: LD_ADDR_VAR 0 5
45886: PUSH
45887: LD_VAR 0 1
45891: PPUSH
45892: CALL_OW 251
45896: PPUSH
45897: LD_VAR 0 2
45901: PPUSH
45902: LD_INT 1
45904: PPUSH
45905: CALL_OW 273
45909: ST_TO_ADDR
// if ValidHex ( x , y ) then
45910: LD_VAR 0 4
45914: PPUSH
45915: LD_VAR 0 5
45919: PPUSH
45920: CALL_OW 488
45924: IFFALSE 45945
// ComTurnXY ( unit , x , y ) ;
45926: LD_VAR 0 1
45930: PPUSH
45931: LD_VAR 0 4
45935: PPUSH
45936: LD_VAR 0 5
45940: PPUSH
45941: CALL_OW 118
// end ;
45945: LD_VAR 0 3
45949: RET
// export function SeeUnits ( side , units ) ; var i ; begin
45950: LD_INT 0
45952: PPUSH
45953: PPUSH
// result := false ;
45954: LD_ADDR_VAR 0 3
45958: PUSH
45959: LD_INT 0
45961: ST_TO_ADDR
// if not units then
45962: LD_VAR 0 2
45966: NOT
45967: IFFALSE 45971
// exit ;
45969: GO 46016
// for i in units do
45971: LD_ADDR_VAR 0 4
45975: PUSH
45976: LD_VAR 0 2
45980: PUSH
45981: FOR_IN
45982: IFFALSE 46014
// if See ( side , i ) then
45984: LD_VAR 0 1
45988: PPUSH
45989: LD_VAR 0 4
45993: PPUSH
45994: CALL_OW 292
45998: IFFALSE 46012
// begin result := true ;
46000: LD_ADDR_VAR 0 3
46004: PUSH
46005: LD_INT 1
46007: ST_TO_ADDR
// exit ;
46008: POP
46009: POP
46010: GO 46016
// end ;
46012: GO 45981
46014: POP
46015: POP
// end ;
46016: LD_VAR 0 3
46020: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
46021: LD_INT 0
46023: PPUSH
46024: PPUSH
46025: PPUSH
46026: PPUSH
// if not unit or not points then
46027: LD_VAR 0 1
46031: NOT
46032: PUSH
46033: LD_VAR 0 2
46037: NOT
46038: OR
46039: IFFALSE 46043
// exit ;
46041: GO 46133
// dist := 99999 ;
46043: LD_ADDR_VAR 0 5
46047: PUSH
46048: LD_INT 99999
46050: ST_TO_ADDR
// for i in points do
46051: LD_ADDR_VAR 0 4
46055: PUSH
46056: LD_VAR 0 2
46060: PUSH
46061: FOR_IN
46062: IFFALSE 46131
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46064: LD_ADDR_VAR 0 6
46068: PUSH
46069: LD_VAR 0 1
46073: PPUSH
46074: LD_VAR 0 4
46078: PUSH
46079: LD_INT 1
46081: ARRAY
46082: PPUSH
46083: LD_VAR 0 4
46087: PUSH
46088: LD_INT 2
46090: ARRAY
46091: PPUSH
46092: CALL_OW 297
46096: ST_TO_ADDR
// if tmpDist < dist then
46097: LD_VAR 0 6
46101: PUSH
46102: LD_VAR 0 5
46106: LESS
46107: IFFALSE 46129
// begin result := i ;
46109: LD_ADDR_VAR 0 3
46113: PUSH
46114: LD_VAR 0 4
46118: ST_TO_ADDR
// dist := tmpDist ;
46119: LD_ADDR_VAR 0 5
46123: PUSH
46124: LD_VAR 0 6
46128: ST_TO_ADDR
// end ; end ;
46129: GO 46061
46131: POP
46132: POP
// end ;
46133: LD_VAR 0 3
46137: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
46138: LD_INT 0
46140: PPUSH
// uc_side := side ;
46141: LD_ADDR_OWVAR 20
46145: PUSH
46146: LD_VAR 0 1
46150: ST_TO_ADDR
// uc_nation := 3 ;
46151: LD_ADDR_OWVAR 21
46155: PUSH
46156: LD_INT 3
46158: ST_TO_ADDR
// vc_chassis := 25 ;
46159: LD_ADDR_OWVAR 37
46163: PUSH
46164: LD_INT 25
46166: ST_TO_ADDR
// vc_engine := engine_siberite ;
46167: LD_ADDR_OWVAR 39
46171: PUSH
46172: LD_INT 3
46174: ST_TO_ADDR
// vc_control := control_computer ;
46175: LD_ADDR_OWVAR 38
46179: PUSH
46180: LD_INT 3
46182: ST_TO_ADDR
// vc_weapon := 59 ;
46183: LD_ADDR_OWVAR 40
46187: PUSH
46188: LD_INT 59
46190: ST_TO_ADDR
// result := CreateVehicle ;
46191: LD_ADDR_VAR 0 5
46195: PUSH
46196: CALL_OW 45
46200: ST_TO_ADDR
// SetDir ( result , d ) ;
46201: LD_VAR 0 5
46205: PPUSH
46206: LD_VAR 0 4
46210: PPUSH
46211: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
46215: LD_VAR 0 5
46219: PPUSH
46220: LD_VAR 0 2
46224: PPUSH
46225: LD_VAR 0 3
46229: PPUSH
46230: LD_INT 0
46232: PPUSH
46233: CALL_OW 48
// end ;
46237: LD_VAR 0 5
46241: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
46242: LD_INT 0
46244: PPUSH
46245: PPUSH
46246: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
46247: LD_ADDR_VAR 0 2
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
46270: LD_VAR 0 1
46274: NOT
46275: PUSH
46276: LD_VAR 0 1
46280: PPUSH
46281: CALL_OW 264
46285: PUSH
46286: LD_INT 12
46288: PUSH
46289: LD_INT 51
46291: PUSH
46292: LD_INT 32
46294: PUSH
46295: LD_EXP 77
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: IN
46306: NOT
46307: OR
46308: IFFALSE 46312
// exit ;
46310: GO 46410
// for i := 1 to 3 do
46312: LD_ADDR_VAR 0 3
46316: PUSH
46317: DOUBLE
46318: LD_INT 1
46320: DEC
46321: ST_TO_ADDR
46322: LD_INT 3
46324: PUSH
46325: FOR_TO
46326: IFFALSE 46408
// begin tmp := GetCargo ( cargo , i ) ;
46328: LD_ADDR_VAR 0 4
46332: PUSH
46333: LD_VAR 0 1
46337: PPUSH
46338: LD_VAR 0 3
46342: PPUSH
46343: CALL_OW 289
46347: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
46348: LD_ADDR_VAR 0 2
46352: PUSH
46353: LD_VAR 0 2
46357: PPUSH
46358: LD_VAR 0 3
46362: PPUSH
46363: LD_VAR 0 4
46367: PPUSH
46368: CALL_OW 1
46372: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
46373: LD_ADDR_VAR 0 2
46377: PUSH
46378: LD_VAR 0 2
46382: PPUSH
46383: LD_INT 4
46385: PPUSH
46386: LD_VAR 0 2
46390: PUSH
46391: LD_INT 4
46393: ARRAY
46394: PUSH
46395: LD_VAR 0 4
46399: PLUS
46400: PPUSH
46401: CALL_OW 1
46405: ST_TO_ADDR
// end ;
46406: GO 46325
46408: POP
46409: POP
// end ;
46410: LD_VAR 0 2
46414: RET
// export function Length ( array ) ; begin
46415: LD_INT 0
46417: PPUSH
// result := array + 0 ;
46418: LD_ADDR_VAR 0 2
46422: PUSH
46423: LD_VAR 0 1
46427: PUSH
46428: LD_INT 0
46430: PLUS
46431: ST_TO_ADDR
// end ;
46432: LD_VAR 0 2
46436: RET
// export function PrepareBuilding ( side , nation , level , typ , x , y , dir , isInBuildingStage ) ; begin
46437: LD_INT 0
46439: PPUSH
// uc_side := side ;
46440: LD_ADDR_OWVAR 20
46444: PUSH
46445: LD_VAR 0 1
46449: ST_TO_ADDR
// uc_nation := nation ;
46450: LD_ADDR_OWVAR 21
46454: PUSH
46455: LD_VAR 0 2
46459: ST_TO_ADDR
// bc_level := level ;
46460: LD_ADDR_OWVAR 43
46464: PUSH
46465: LD_VAR 0 3
46469: ST_TO_ADDR
// bc_type := typ ;
46470: LD_ADDR_OWVAR 42
46474: PUSH
46475: LD_VAR 0 4
46479: ST_TO_ADDR
// bc_kind1 := - 1 ;
46480: LD_ADDR_OWVAR 44
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: ST_TO_ADDR
// bc_kind2 := - 1 ;
46489: LD_ADDR_OWVAR 45
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: ST_TO_ADDR
// result := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
46498: LD_ADDR_VAR 0 9
46502: PUSH
46503: LD_VAR 0 5
46507: PPUSH
46508: LD_VAR 0 6
46512: PPUSH
46513: LD_VAR 0 7
46517: PPUSH
46518: CALL_OW 47
46522: ST_TO_ADDR
// if isInBuildingStage then
46523: LD_VAR 0 8
46527: IFFALSE 46538
// SetBuildingStage ( result ) ;
46529: LD_VAR 0 9
46533: PPUSH
46534: CALL_OW 593
// end ; end_of_file
46538: LD_VAR 0 9
46542: RET
// every 0 0$1 do
46543: GO 46545
46545: DISABLE
// begin enable ;
46546: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
46547: LD_STRING updateTimer(
46549: PUSH
46550: LD_OWVAR 1
46554: STR
46555: PUSH
46556: LD_STRING );
46558: STR
46559: PPUSH
46560: CALL_OW 559
// end ;
46564: END
// export function SOS_MapStart ( ) ; begin
46565: LD_INT 0
46567: PPUSH
// if streamModeActive then
46568: LD_EXP 96
46572: IFFALSE 46581
// DefineStreamItems ( true ) ;
46574: LD_INT 1
46576: PPUSH
46577: CALL 48231 0 1
// UpdateFactoryWaypoints ( ) ;
46581: CALL 61815 0 0
// end ;
46585: LD_VAR 0 1
46589: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46590: LD_INT 0
46592: PPUSH
// if p2 = 100 then
46593: LD_VAR 0 2
46597: PUSH
46598: LD_INT 100
46600: EQUAL
46601: IFFALSE 47604
// begin if not StreamModeActive then
46603: LD_EXP 96
46607: NOT
46608: IFFALSE 46618
// StreamModeActive := true ;
46610: LD_ADDR_EXP 96
46614: PUSH
46615: LD_INT 1
46617: ST_TO_ADDR
// if p3 = 0 then
46618: LD_VAR 0 3
46622: PUSH
46623: LD_INT 0
46625: EQUAL
46626: IFFALSE 46632
// InitStreamMode ;
46628: CALL 47767 0 0
// if p3 = 1 then
46632: LD_VAR 0 3
46636: PUSH
46637: LD_INT 1
46639: EQUAL
46640: IFFALSE 46650
// sRocket := true ;
46642: LD_ADDR_EXP 101
46646: PUSH
46647: LD_INT 1
46649: ST_TO_ADDR
// if p3 = 2 then
46650: LD_VAR 0 3
46654: PUSH
46655: LD_INT 2
46657: EQUAL
46658: IFFALSE 46668
// sSpeed := true ;
46660: LD_ADDR_EXP 100
46664: PUSH
46665: LD_INT 1
46667: ST_TO_ADDR
// if p3 = 3 then
46668: LD_VAR 0 3
46672: PUSH
46673: LD_INT 3
46675: EQUAL
46676: IFFALSE 46686
// sEngine := true ;
46678: LD_ADDR_EXP 102
46682: PUSH
46683: LD_INT 1
46685: ST_TO_ADDR
// if p3 = 4 then
46686: LD_VAR 0 3
46690: PUSH
46691: LD_INT 4
46693: EQUAL
46694: IFFALSE 46704
// sSpec := true ;
46696: LD_ADDR_EXP 99
46700: PUSH
46701: LD_INT 1
46703: ST_TO_ADDR
// if p3 = 5 then
46704: LD_VAR 0 3
46708: PUSH
46709: LD_INT 5
46711: EQUAL
46712: IFFALSE 46722
// sLevel := true ;
46714: LD_ADDR_EXP 103
46718: PUSH
46719: LD_INT 1
46721: ST_TO_ADDR
// if p3 = 6 then
46722: LD_VAR 0 3
46726: PUSH
46727: LD_INT 6
46729: EQUAL
46730: IFFALSE 46740
// sArmoury := true ;
46732: LD_ADDR_EXP 104
46736: PUSH
46737: LD_INT 1
46739: ST_TO_ADDR
// if p3 = 7 then
46740: LD_VAR 0 3
46744: PUSH
46745: LD_INT 7
46747: EQUAL
46748: IFFALSE 46758
// sRadar := true ;
46750: LD_ADDR_EXP 105
46754: PUSH
46755: LD_INT 1
46757: ST_TO_ADDR
// if p3 = 8 then
46758: LD_VAR 0 3
46762: PUSH
46763: LD_INT 8
46765: EQUAL
46766: IFFALSE 46776
// sBunker := true ;
46768: LD_ADDR_EXP 106
46772: PUSH
46773: LD_INT 1
46775: ST_TO_ADDR
// if p3 = 9 then
46776: LD_VAR 0 3
46780: PUSH
46781: LD_INT 9
46783: EQUAL
46784: IFFALSE 46794
// sHack := true ;
46786: LD_ADDR_EXP 107
46790: PUSH
46791: LD_INT 1
46793: ST_TO_ADDR
// if p3 = 10 then
46794: LD_VAR 0 3
46798: PUSH
46799: LD_INT 10
46801: EQUAL
46802: IFFALSE 46812
// sFire := true ;
46804: LD_ADDR_EXP 108
46808: PUSH
46809: LD_INT 1
46811: ST_TO_ADDR
// if p3 = 11 then
46812: LD_VAR 0 3
46816: PUSH
46817: LD_INT 11
46819: EQUAL
46820: IFFALSE 46830
// sRefresh := true ;
46822: LD_ADDR_EXP 109
46826: PUSH
46827: LD_INT 1
46829: ST_TO_ADDR
// if p3 = 12 then
46830: LD_VAR 0 3
46834: PUSH
46835: LD_INT 12
46837: EQUAL
46838: IFFALSE 46848
// sExp := true ;
46840: LD_ADDR_EXP 110
46844: PUSH
46845: LD_INT 1
46847: ST_TO_ADDR
// if p3 = 13 then
46848: LD_VAR 0 3
46852: PUSH
46853: LD_INT 13
46855: EQUAL
46856: IFFALSE 46866
// sDepot := true ;
46858: LD_ADDR_EXP 111
46862: PUSH
46863: LD_INT 1
46865: ST_TO_ADDR
// if p3 = 14 then
46866: LD_VAR 0 3
46870: PUSH
46871: LD_INT 14
46873: EQUAL
46874: IFFALSE 46884
// sFlag := true ;
46876: LD_ADDR_EXP 112
46880: PUSH
46881: LD_INT 1
46883: ST_TO_ADDR
// if p3 = 15 then
46884: LD_VAR 0 3
46888: PUSH
46889: LD_INT 15
46891: EQUAL
46892: IFFALSE 46902
// sKamikadze := true ;
46894: LD_ADDR_EXP 120
46898: PUSH
46899: LD_INT 1
46901: ST_TO_ADDR
// if p3 = 16 then
46902: LD_VAR 0 3
46906: PUSH
46907: LD_INT 16
46909: EQUAL
46910: IFFALSE 46920
// sTroll := true ;
46912: LD_ADDR_EXP 121
46916: PUSH
46917: LD_INT 1
46919: ST_TO_ADDR
// if p3 = 17 then
46920: LD_VAR 0 3
46924: PUSH
46925: LD_INT 17
46927: EQUAL
46928: IFFALSE 46938
// sSlow := true ;
46930: LD_ADDR_EXP 122
46934: PUSH
46935: LD_INT 1
46937: ST_TO_ADDR
// if p3 = 18 then
46938: LD_VAR 0 3
46942: PUSH
46943: LD_INT 18
46945: EQUAL
46946: IFFALSE 46956
// sLack := true ;
46948: LD_ADDR_EXP 123
46952: PUSH
46953: LD_INT 1
46955: ST_TO_ADDR
// if p3 = 19 then
46956: LD_VAR 0 3
46960: PUSH
46961: LD_INT 19
46963: EQUAL
46964: IFFALSE 46974
// sTank := true ;
46966: LD_ADDR_EXP 125
46970: PUSH
46971: LD_INT 1
46973: ST_TO_ADDR
// if p3 = 20 then
46974: LD_VAR 0 3
46978: PUSH
46979: LD_INT 20
46981: EQUAL
46982: IFFALSE 46992
// sRemote := true ;
46984: LD_ADDR_EXP 126
46988: PUSH
46989: LD_INT 1
46991: ST_TO_ADDR
// if p3 = 21 then
46992: LD_VAR 0 3
46996: PUSH
46997: LD_INT 21
46999: EQUAL
47000: IFFALSE 47010
// sPowell := true ;
47002: LD_ADDR_EXP 127
47006: PUSH
47007: LD_INT 1
47009: ST_TO_ADDR
// if p3 = 22 then
47010: LD_VAR 0 3
47014: PUSH
47015: LD_INT 22
47017: EQUAL
47018: IFFALSE 47028
// sTeleport := true ;
47020: LD_ADDR_EXP 130
47024: PUSH
47025: LD_INT 1
47027: ST_TO_ADDR
// if p3 = 23 then
47028: LD_VAR 0 3
47032: PUSH
47033: LD_INT 23
47035: EQUAL
47036: IFFALSE 47046
// sOilTower := true ;
47038: LD_ADDR_EXP 132
47042: PUSH
47043: LD_INT 1
47045: ST_TO_ADDR
// if p3 = 24 then
47046: LD_VAR 0 3
47050: PUSH
47051: LD_INT 24
47053: EQUAL
47054: IFFALSE 47064
// sShovel := true ;
47056: LD_ADDR_EXP 133
47060: PUSH
47061: LD_INT 1
47063: ST_TO_ADDR
// if p3 = 25 then
47064: LD_VAR 0 3
47068: PUSH
47069: LD_INT 25
47071: EQUAL
47072: IFFALSE 47082
// sSheik := true ;
47074: LD_ADDR_EXP 134
47078: PUSH
47079: LD_INT 1
47081: ST_TO_ADDR
// if p3 = 26 then
47082: LD_VAR 0 3
47086: PUSH
47087: LD_INT 26
47089: EQUAL
47090: IFFALSE 47100
// sEarthquake := true ;
47092: LD_ADDR_EXP 136
47096: PUSH
47097: LD_INT 1
47099: ST_TO_ADDR
// if p3 = 27 then
47100: LD_VAR 0 3
47104: PUSH
47105: LD_INT 27
47107: EQUAL
47108: IFFALSE 47118
// sAI := true ;
47110: LD_ADDR_EXP 137
47114: PUSH
47115: LD_INT 1
47117: ST_TO_ADDR
// if p3 = 28 then
47118: LD_VAR 0 3
47122: PUSH
47123: LD_INT 28
47125: EQUAL
47126: IFFALSE 47136
// sCargo := true ;
47128: LD_ADDR_EXP 140
47132: PUSH
47133: LD_INT 1
47135: ST_TO_ADDR
// if p3 = 29 then
47136: LD_VAR 0 3
47140: PUSH
47141: LD_INT 29
47143: EQUAL
47144: IFFALSE 47154
// sDLaser := true ;
47146: LD_ADDR_EXP 141
47150: PUSH
47151: LD_INT 1
47153: ST_TO_ADDR
// if p3 = 30 then
47154: LD_VAR 0 3
47158: PUSH
47159: LD_INT 30
47161: EQUAL
47162: IFFALSE 47172
// sExchange := true ;
47164: LD_ADDR_EXP 142
47168: PUSH
47169: LD_INT 1
47171: ST_TO_ADDR
// if p3 = 31 then
47172: LD_VAR 0 3
47176: PUSH
47177: LD_INT 31
47179: EQUAL
47180: IFFALSE 47190
// sFac := true ;
47182: LD_ADDR_EXP 143
47186: PUSH
47187: LD_INT 1
47189: ST_TO_ADDR
// if p3 = 32 then
47190: LD_VAR 0 3
47194: PUSH
47195: LD_INT 32
47197: EQUAL
47198: IFFALSE 47208
// sPower := true ;
47200: LD_ADDR_EXP 144
47204: PUSH
47205: LD_INT 1
47207: ST_TO_ADDR
// if p3 = 33 then
47208: LD_VAR 0 3
47212: PUSH
47213: LD_INT 33
47215: EQUAL
47216: IFFALSE 47226
// sRandom := true ;
47218: LD_ADDR_EXP 145
47222: PUSH
47223: LD_INT 1
47225: ST_TO_ADDR
// if p3 = 34 then
47226: LD_VAR 0 3
47230: PUSH
47231: LD_INT 34
47233: EQUAL
47234: IFFALSE 47244
// sShield := true ;
47236: LD_ADDR_EXP 146
47240: PUSH
47241: LD_INT 1
47243: ST_TO_ADDR
// if p3 = 35 then
47244: LD_VAR 0 3
47248: PUSH
47249: LD_INT 35
47251: EQUAL
47252: IFFALSE 47262
// sTime := true ;
47254: LD_ADDR_EXP 147
47258: PUSH
47259: LD_INT 1
47261: ST_TO_ADDR
// if p3 = 36 then
47262: LD_VAR 0 3
47266: PUSH
47267: LD_INT 36
47269: EQUAL
47270: IFFALSE 47280
// sTools := true ;
47272: LD_ADDR_EXP 148
47276: PUSH
47277: LD_INT 1
47279: ST_TO_ADDR
// if p3 = 101 then
47280: LD_VAR 0 3
47284: PUSH
47285: LD_INT 101
47287: EQUAL
47288: IFFALSE 47298
// sSold := true ;
47290: LD_ADDR_EXP 113
47294: PUSH
47295: LD_INT 1
47297: ST_TO_ADDR
// if p3 = 102 then
47298: LD_VAR 0 3
47302: PUSH
47303: LD_INT 102
47305: EQUAL
47306: IFFALSE 47316
// sDiff := true ;
47308: LD_ADDR_EXP 114
47312: PUSH
47313: LD_INT 1
47315: ST_TO_ADDR
// if p3 = 103 then
47316: LD_VAR 0 3
47320: PUSH
47321: LD_INT 103
47323: EQUAL
47324: IFFALSE 47334
// sFog := true ;
47326: LD_ADDR_EXP 117
47330: PUSH
47331: LD_INT 1
47333: ST_TO_ADDR
// if p3 = 104 then
47334: LD_VAR 0 3
47338: PUSH
47339: LD_INT 104
47341: EQUAL
47342: IFFALSE 47352
// sReset := true ;
47344: LD_ADDR_EXP 118
47348: PUSH
47349: LD_INT 1
47351: ST_TO_ADDR
// if p3 = 105 then
47352: LD_VAR 0 3
47356: PUSH
47357: LD_INT 105
47359: EQUAL
47360: IFFALSE 47370
// sSun := true ;
47362: LD_ADDR_EXP 119
47366: PUSH
47367: LD_INT 1
47369: ST_TO_ADDR
// if p3 = 106 then
47370: LD_VAR 0 3
47374: PUSH
47375: LD_INT 106
47377: EQUAL
47378: IFFALSE 47388
// sTiger := true ;
47380: LD_ADDR_EXP 115
47384: PUSH
47385: LD_INT 1
47387: ST_TO_ADDR
// if p3 = 107 then
47388: LD_VAR 0 3
47392: PUSH
47393: LD_INT 107
47395: EQUAL
47396: IFFALSE 47406
// sBomb := true ;
47398: LD_ADDR_EXP 116
47402: PUSH
47403: LD_INT 1
47405: ST_TO_ADDR
// if p3 = 108 then
47406: LD_VAR 0 3
47410: PUSH
47411: LD_INT 108
47413: EQUAL
47414: IFFALSE 47424
// sWound := true ;
47416: LD_ADDR_EXP 124
47420: PUSH
47421: LD_INT 1
47423: ST_TO_ADDR
// if p3 = 109 then
47424: LD_VAR 0 3
47428: PUSH
47429: LD_INT 109
47431: EQUAL
47432: IFFALSE 47442
// sBetray := true ;
47434: LD_ADDR_EXP 128
47438: PUSH
47439: LD_INT 1
47441: ST_TO_ADDR
// if p3 = 110 then
47442: LD_VAR 0 3
47446: PUSH
47447: LD_INT 110
47449: EQUAL
47450: IFFALSE 47460
// sContamin := true ;
47452: LD_ADDR_EXP 129
47456: PUSH
47457: LD_INT 1
47459: ST_TO_ADDR
// if p3 = 111 then
47460: LD_VAR 0 3
47464: PUSH
47465: LD_INT 111
47467: EQUAL
47468: IFFALSE 47478
// sOil := true ;
47470: LD_ADDR_EXP 131
47474: PUSH
47475: LD_INT 1
47477: ST_TO_ADDR
// if p3 = 112 then
47478: LD_VAR 0 3
47482: PUSH
47483: LD_INT 112
47485: EQUAL
47486: IFFALSE 47496
// sStu := true ;
47488: LD_ADDR_EXP 135
47492: PUSH
47493: LD_INT 1
47495: ST_TO_ADDR
// if p3 = 113 then
47496: LD_VAR 0 3
47500: PUSH
47501: LD_INT 113
47503: EQUAL
47504: IFFALSE 47514
// sBazooka := true ;
47506: LD_ADDR_EXP 138
47510: PUSH
47511: LD_INT 1
47513: ST_TO_ADDR
// if p3 = 114 then
47514: LD_VAR 0 3
47518: PUSH
47519: LD_INT 114
47521: EQUAL
47522: IFFALSE 47532
// sMortar := true ;
47524: LD_ADDR_EXP 139
47528: PUSH
47529: LD_INT 1
47531: ST_TO_ADDR
// if p3 = 115 then
47532: LD_VAR 0 3
47536: PUSH
47537: LD_INT 115
47539: EQUAL
47540: IFFALSE 47550
// sRanger := true ;
47542: LD_ADDR_EXP 149
47546: PUSH
47547: LD_INT 1
47549: ST_TO_ADDR
// if p3 = 116 then
47550: LD_VAR 0 3
47554: PUSH
47555: LD_INT 116
47557: EQUAL
47558: IFFALSE 47568
// sComputer := true ;
47560: LD_ADDR_EXP 150
47564: PUSH
47565: LD_INT 1
47567: ST_TO_ADDR
// if p3 = 117 then
47568: LD_VAR 0 3
47572: PUSH
47573: LD_INT 117
47575: EQUAL
47576: IFFALSE 47586
// s30 := true ;
47578: LD_ADDR_EXP 151
47582: PUSH
47583: LD_INT 1
47585: ST_TO_ADDR
// if p3 = 118 then
47586: LD_VAR 0 3
47590: PUSH
47591: LD_INT 118
47593: EQUAL
47594: IFFALSE 47604
// s60 := true ;
47596: LD_ADDR_EXP 152
47600: PUSH
47601: LD_INT 1
47603: ST_TO_ADDR
// end ; if p2 = 101 then
47604: LD_VAR 0 2
47608: PUSH
47609: LD_INT 101
47611: EQUAL
47612: IFFALSE 47740
// begin case p3 of 1 :
47614: LD_VAR 0 3
47618: PUSH
47619: LD_INT 1
47621: DOUBLE
47622: EQUAL
47623: IFTRUE 47627
47625: GO 47634
47627: POP
// hHackUnlimitedResources ; 2 :
47628: CALL 59838 0 0
47632: GO 47740
47634: LD_INT 2
47636: DOUBLE
47637: EQUAL
47638: IFTRUE 47642
47640: GO 47649
47642: POP
// hHackSetLevel10 ; 3 :
47643: CALL 59971 0 0
47647: GO 47740
47649: LD_INT 3
47651: DOUBLE
47652: EQUAL
47653: IFTRUE 47657
47655: GO 47664
47657: POP
// hHackSetLevel10YourUnits ; 4 :
47658: CALL 60056 0 0
47662: GO 47740
47664: LD_INT 4
47666: DOUBLE
47667: EQUAL
47668: IFTRUE 47672
47670: GO 47679
47672: POP
// hHackInvincible ; 5 :
47673: CALL 60504 0 0
47677: GO 47740
47679: LD_INT 5
47681: DOUBLE
47682: EQUAL
47683: IFTRUE 47687
47685: GO 47694
47687: POP
// hHackInvisible ; 6 :
47688: CALL 60615 0 0
47692: GO 47740
47694: LD_INT 6
47696: DOUBLE
47697: EQUAL
47698: IFTRUE 47702
47700: GO 47709
47702: POP
// hHackChangeYourSide ; 7 :
47703: CALL 60672 0 0
47707: GO 47740
47709: LD_INT 7
47711: DOUBLE
47712: EQUAL
47713: IFTRUE 47717
47715: GO 47724
47717: POP
// hHackChangeUnitSide ; 8 :
47718: CALL 60714 0 0
47722: GO 47740
47724: LD_INT 8
47726: DOUBLE
47727: EQUAL
47728: IFTRUE 47732
47730: GO 47739
47732: POP
// hHackFog ; end ;
47733: CALL 60815 0 0
47737: GO 47740
47739: POP
// end ; end ;
47740: LD_VAR 0 7
47744: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
47745: GO 47747
47747: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
47748: LD_STRING initStreamRollete();
47750: PPUSH
47751: CALL_OW 559
// InitStreamMode ;
47755: CALL 47767 0 0
// DefineStreamItems ( false ) ;
47759: LD_INT 0
47761: PPUSH
47762: CALL 48231 0 1
// end ;
47766: END
// function InitStreamMode ; begin
47767: LD_INT 0
47769: PPUSH
// streamModeActive := false ;
47770: LD_ADDR_EXP 96
47774: PUSH
47775: LD_INT 0
47777: ST_TO_ADDR
// normalCounter := 36 ;
47778: LD_ADDR_EXP 97
47782: PUSH
47783: LD_INT 36
47785: ST_TO_ADDR
// hardcoreCounter := 18 ;
47786: LD_ADDR_EXP 98
47790: PUSH
47791: LD_INT 18
47793: ST_TO_ADDR
// sRocket := false ;
47794: LD_ADDR_EXP 101
47798: PUSH
47799: LD_INT 0
47801: ST_TO_ADDR
// sSpeed := false ;
47802: LD_ADDR_EXP 100
47806: PUSH
47807: LD_INT 0
47809: ST_TO_ADDR
// sEngine := false ;
47810: LD_ADDR_EXP 102
47814: PUSH
47815: LD_INT 0
47817: ST_TO_ADDR
// sSpec := false ;
47818: LD_ADDR_EXP 99
47822: PUSH
47823: LD_INT 0
47825: ST_TO_ADDR
// sLevel := false ;
47826: LD_ADDR_EXP 103
47830: PUSH
47831: LD_INT 0
47833: ST_TO_ADDR
// sArmoury := false ;
47834: LD_ADDR_EXP 104
47838: PUSH
47839: LD_INT 0
47841: ST_TO_ADDR
// sRadar := false ;
47842: LD_ADDR_EXP 105
47846: PUSH
47847: LD_INT 0
47849: ST_TO_ADDR
// sBunker := false ;
47850: LD_ADDR_EXP 106
47854: PUSH
47855: LD_INT 0
47857: ST_TO_ADDR
// sHack := false ;
47858: LD_ADDR_EXP 107
47862: PUSH
47863: LD_INT 0
47865: ST_TO_ADDR
// sFire := false ;
47866: LD_ADDR_EXP 108
47870: PUSH
47871: LD_INT 0
47873: ST_TO_ADDR
// sRefresh := false ;
47874: LD_ADDR_EXP 109
47878: PUSH
47879: LD_INT 0
47881: ST_TO_ADDR
// sExp := false ;
47882: LD_ADDR_EXP 110
47886: PUSH
47887: LD_INT 0
47889: ST_TO_ADDR
// sDepot := false ;
47890: LD_ADDR_EXP 111
47894: PUSH
47895: LD_INT 0
47897: ST_TO_ADDR
// sFlag := false ;
47898: LD_ADDR_EXP 112
47902: PUSH
47903: LD_INT 0
47905: ST_TO_ADDR
// sKamikadze := false ;
47906: LD_ADDR_EXP 120
47910: PUSH
47911: LD_INT 0
47913: ST_TO_ADDR
// sTroll := false ;
47914: LD_ADDR_EXP 121
47918: PUSH
47919: LD_INT 0
47921: ST_TO_ADDR
// sSlow := false ;
47922: LD_ADDR_EXP 122
47926: PUSH
47927: LD_INT 0
47929: ST_TO_ADDR
// sLack := false ;
47930: LD_ADDR_EXP 123
47934: PUSH
47935: LD_INT 0
47937: ST_TO_ADDR
// sTank := false ;
47938: LD_ADDR_EXP 125
47942: PUSH
47943: LD_INT 0
47945: ST_TO_ADDR
// sRemote := false ;
47946: LD_ADDR_EXP 126
47950: PUSH
47951: LD_INT 0
47953: ST_TO_ADDR
// sPowell := false ;
47954: LD_ADDR_EXP 127
47958: PUSH
47959: LD_INT 0
47961: ST_TO_ADDR
// sTeleport := false ;
47962: LD_ADDR_EXP 130
47966: PUSH
47967: LD_INT 0
47969: ST_TO_ADDR
// sOilTower := false ;
47970: LD_ADDR_EXP 132
47974: PUSH
47975: LD_INT 0
47977: ST_TO_ADDR
// sShovel := false ;
47978: LD_ADDR_EXP 133
47982: PUSH
47983: LD_INT 0
47985: ST_TO_ADDR
// sSheik := false ;
47986: LD_ADDR_EXP 134
47990: PUSH
47991: LD_INT 0
47993: ST_TO_ADDR
// sEarthquake := false ;
47994: LD_ADDR_EXP 136
47998: PUSH
47999: LD_INT 0
48001: ST_TO_ADDR
// sAI := false ;
48002: LD_ADDR_EXP 137
48006: PUSH
48007: LD_INT 0
48009: ST_TO_ADDR
// sCargo := false ;
48010: LD_ADDR_EXP 140
48014: PUSH
48015: LD_INT 0
48017: ST_TO_ADDR
// sDLaser := false ;
48018: LD_ADDR_EXP 141
48022: PUSH
48023: LD_INT 0
48025: ST_TO_ADDR
// sExchange := false ;
48026: LD_ADDR_EXP 142
48030: PUSH
48031: LD_INT 0
48033: ST_TO_ADDR
// sFac := false ;
48034: LD_ADDR_EXP 143
48038: PUSH
48039: LD_INT 0
48041: ST_TO_ADDR
// sPower := false ;
48042: LD_ADDR_EXP 144
48046: PUSH
48047: LD_INT 0
48049: ST_TO_ADDR
// sRandom := false ;
48050: LD_ADDR_EXP 145
48054: PUSH
48055: LD_INT 0
48057: ST_TO_ADDR
// sShield := false ;
48058: LD_ADDR_EXP 146
48062: PUSH
48063: LD_INT 0
48065: ST_TO_ADDR
// sTime := false ;
48066: LD_ADDR_EXP 147
48070: PUSH
48071: LD_INT 0
48073: ST_TO_ADDR
// sTools := false ;
48074: LD_ADDR_EXP 148
48078: PUSH
48079: LD_INT 0
48081: ST_TO_ADDR
// sSold := false ;
48082: LD_ADDR_EXP 113
48086: PUSH
48087: LD_INT 0
48089: ST_TO_ADDR
// sDiff := false ;
48090: LD_ADDR_EXP 114
48094: PUSH
48095: LD_INT 0
48097: ST_TO_ADDR
// sFog := false ;
48098: LD_ADDR_EXP 117
48102: PUSH
48103: LD_INT 0
48105: ST_TO_ADDR
// sReset := false ;
48106: LD_ADDR_EXP 118
48110: PUSH
48111: LD_INT 0
48113: ST_TO_ADDR
// sSun := false ;
48114: LD_ADDR_EXP 119
48118: PUSH
48119: LD_INT 0
48121: ST_TO_ADDR
// sTiger := false ;
48122: LD_ADDR_EXP 115
48126: PUSH
48127: LD_INT 0
48129: ST_TO_ADDR
// sBomb := false ;
48130: LD_ADDR_EXP 116
48134: PUSH
48135: LD_INT 0
48137: ST_TO_ADDR
// sWound := false ;
48138: LD_ADDR_EXP 124
48142: PUSH
48143: LD_INT 0
48145: ST_TO_ADDR
// sBetray := false ;
48146: LD_ADDR_EXP 128
48150: PUSH
48151: LD_INT 0
48153: ST_TO_ADDR
// sContamin := false ;
48154: LD_ADDR_EXP 129
48158: PUSH
48159: LD_INT 0
48161: ST_TO_ADDR
// sOil := false ;
48162: LD_ADDR_EXP 131
48166: PUSH
48167: LD_INT 0
48169: ST_TO_ADDR
// sStu := false ;
48170: LD_ADDR_EXP 135
48174: PUSH
48175: LD_INT 0
48177: ST_TO_ADDR
// sBazooka := false ;
48178: LD_ADDR_EXP 138
48182: PUSH
48183: LD_INT 0
48185: ST_TO_ADDR
// sMortar := false ;
48186: LD_ADDR_EXP 139
48190: PUSH
48191: LD_INT 0
48193: ST_TO_ADDR
// sRanger := false ;
48194: LD_ADDR_EXP 149
48198: PUSH
48199: LD_INT 0
48201: ST_TO_ADDR
// sComputer := false ;
48202: LD_ADDR_EXP 150
48206: PUSH
48207: LD_INT 0
48209: ST_TO_ADDR
// s30 := false ;
48210: LD_ADDR_EXP 151
48214: PUSH
48215: LD_INT 0
48217: ST_TO_ADDR
// s60 := false ;
48218: LD_ADDR_EXP 152
48222: PUSH
48223: LD_INT 0
48225: ST_TO_ADDR
// end ;
48226: LD_VAR 0 1
48230: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
48231: LD_INT 0
48233: PPUSH
48234: PPUSH
48235: PPUSH
48236: PPUSH
48237: PPUSH
48238: PPUSH
48239: PPUSH
// result := [ ] ;
48240: LD_ADDR_VAR 0 2
48244: PUSH
48245: EMPTY
48246: ST_TO_ADDR
// if campaign_id = 1 then
48247: LD_OWVAR 69
48251: PUSH
48252: LD_INT 1
48254: EQUAL
48255: IFFALSE 51421
// begin case mission_number of 1 :
48257: LD_OWVAR 70
48261: PUSH
48262: LD_INT 1
48264: DOUBLE
48265: EQUAL
48266: IFTRUE 48270
48268: GO 48346
48270: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
48271: LD_ADDR_VAR 0 2
48275: PUSH
48276: LD_INT 2
48278: PUSH
48279: LD_INT 4
48281: PUSH
48282: LD_INT 11
48284: PUSH
48285: LD_INT 12
48287: PUSH
48288: LD_INT 15
48290: PUSH
48291: LD_INT 16
48293: PUSH
48294: LD_INT 22
48296: PUSH
48297: LD_INT 23
48299: PUSH
48300: LD_INT 26
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 101
48316: PUSH
48317: LD_INT 102
48319: PUSH
48320: LD_INT 106
48322: PUSH
48323: LD_INT 116
48325: PUSH
48326: LD_INT 117
48328: PUSH
48329: LD_INT 118
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: ST_TO_ADDR
48344: GO 51419
48346: LD_INT 2
48348: DOUBLE
48349: EQUAL
48350: IFTRUE 48354
48352: GO 48438
48354: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
48355: LD_ADDR_VAR 0 2
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: LD_INT 4
48365: PUSH
48366: LD_INT 11
48368: PUSH
48369: LD_INT 12
48371: PUSH
48372: LD_INT 15
48374: PUSH
48375: LD_INT 16
48377: PUSH
48378: LD_INT 22
48380: PUSH
48381: LD_INT 23
48383: PUSH
48384: LD_INT 26
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 101
48400: PUSH
48401: LD_INT 102
48403: PUSH
48404: LD_INT 105
48406: PUSH
48407: LD_INT 106
48409: PUSH
48410: LD_INT 108
48412: PUSH
48413: LD_INT 116
48415: PUSH
48416: LD_INT 117
48418: PUSH
48419: LD_INT 118
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: ST_TO_ADDR
48436: GO 51419
48438: LD_INT 3
48440: DOUBLE
48441: EQUAL
48442: IFTRUE 48446
48444: GO 48534
48446: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
48447: LD_ADDR_VAR 0 2
48451: PUSH
48452: LD_INT 2
48454: PUSH
48455: LD_INT 4
48457: PUSH
48458: LD_INT 5
48460: PUSH
48461: LD_INT 11
48463: PUSH
48464: LD_INT 12
48466: PUSH
48467: LD_INT 15
48469: PUSH
48470: LD_INT 16
48472: PUSH
48473: LD_INT 22
48475: PUSH
48476: LD_INT 26
48478: PUSH
48479: LD_INT 36
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 101
48496: PUSH
48497: LD_INT 102
48499: PUSH
48500: LD_INT 105
48502: PUSH
48503: LD_INT 106
48505: PUSH
48506: LD_INT 108
48508: PUSH
48509: LD_INT 116
48511: PUSH
48512: LD_INT 117
48514: PUSH
48515: LD_INT 118
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: ST_TO_ADDR
48532: GO 51419
48534: LD_INT 4
48536: DOUBLE
48537: EQUAL
48538: IFTRUE 48542
48540: GO 48638
48542: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
48543: LD_ADDR_VAR 0 2
48547: PUSH
48548: LD_INT 2
48550: PUSH
48551: LD_INT 4
48553: PUSH
48554: LD_INT 5
48556: PUSH
48557: LD_INT 8
48559: PUSH
48560: LD_INT 11
48562: PUSH
48563: LD_INT 12
48565: PUSH
48566: LD_INT 15
48568: PUSH
48569: LD_INT 16
48571: PUSH
48572: LD_INT 22
48574: PUSH
48575: LD_INT 23
48577: PUSH
48578: LD_INT 26
48580: PUSH
48581: LD_INT 36
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 101
48600: PUSH
48601: LD_INT 102
48603: PUSH
48604: LD_INT 105
48606: PUSH
48607: LD_INT 106
48609: PUSH
48610: LD_INT 108
48612: PUSH
48613: LD_INT 116
48615: PUSH
48616: LD_INT 117
48618: PUSH
48619: LD_INT 118
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: ST_TO_ADDR
48636: GO 51419
48638: LD_INT 5
48640: DOUBLE
48641: EQUAL
48642: IFTRUE 48646
48644: GO 48758
48646: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
48647: LD_ADDR_VAR 0 2
48651: PUSH
48652: LD_INT 2
48654: PUSH
48655: LD_INT 4
48657: PUSH
48658: LD_INT 5
48660: PUSH
48661: LD_INT 6
48663: PUSH
48664: LD_INT 8
48666: PUSH
48667: LD_INT 11
48669: PUSH
48670: LD_INT 12
48672: PUSH
48673: LD_INT 15
48675: PUSH
48676: LD_INT 16
48678: PUSH
48679: LD_INT 22
48681: PUSH
48682: LD_INT 23
48684: PUSH
48685: LD_INT 25
48687: PUSH
48688: LD_INT 26
48690: PUSH
48691: LD_INT 36
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 101
48712: PUSH
48713: LD_INT 102
48715: PUSH
48716: LD_INT 105
48718: PUSH
48719: LD_INT 106
48721: PUSH
48722: LD_INT 108
48724: PUSH
48725: LD_INT 109
48727: PUSH
48728: LD_INT 112
48730: PUSH
48731: LD_INT 116
48733: PUSH
48734: LD_INT 117
48736: PUSH
48737: LD_INT 118
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: ST_TO_ADDR
48756: GO 51419
48758: LD_INT 6
48760: DOUBLE
48761: EQUAL
48762: IFTRUE 48766
48764: GO 48898
48766: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
48767: LD_ADDR_VAR 0 2
48771: PUSH
48772: LD_INT 2
48774: PUSH
48775: LD_INT 4
48777: PUSH
48778: LD_INT 5
48780: PUSH
48781: LD_INT 6
48783: PUSH
48784: LD_INT 8
48786: PUSH
48787: LD_INT 11
48789: PUSH
48790: LD_INT 12
48792: PUSH
48793: LD_INT 15
48795: PUSH
48796: LD_INT 16
48798: PUSH
48799: LD_INT 20
48801: PUSH
48802: LD_INT 21
48804: PUSH
48805: LD_INT 22
48807: PUSH
48808: LD_INT 23
48810: PUSH
48811: LD_INT 25
48813: PUSH
48814: LD_INT 26
48816: PUSH
48817: LD_INT 30
48819: PUSH
48820: LD_INT 31
48822: PUSH
48823: LD_INT 32
48825: PUSH
48826: LD_INT 36
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 101
48852: PUSH
48853: LD_INT 102
48855: PUSH
48856: LD_INT 105
48858: PUSH
48859: LD_INT 106
48861: PUSH
48862: LD_INT 108
48864: PUSH
48865: LD_INT 109
48867: PUSH
48868: LD_INT 112
48870: PUSH
48871: LD_INT 116
48873: PUSH
48874: LD_INT 117
48876: PUSH
48877: LD_INT 118
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: ST_TO_ADDR
48896: GO 51419
48898: LD_INT 7
48900: DOUBLE
48901: EQUAL
48902: IFTRUE 48906
48904: GO 49018
48906: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
48907: LD_ADDR_VAR 0 2
48911: PUSH
48912: LD_INT 2
48914: PUSH
48915: LD_INT 4
48917: PUSH
48918: LD_INT 5
48920: PUSH
48921: LD_INT 7
48923: PUSH
48924: LD_INT 11
48926: PUSH
48927: LD_INT 12
48929: PUSH
48930: LD_INT 15
48932: PUSH
48933: LD_INT 16
48935: PUSH
48936: LD_INT 20
48938: PUSH
48939: LD_INT 21
48941: PUSH
48942: LD_INT 22
48944: PUSH
48945: LD_INT 23
48947: PUSH
48948: LD_INT 25
48950: PUSH
48951: LD_INT 26
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 101
48972: PUSH
48973: LD_INT 102
48975: PUSH
48976: LD_INT 103
48978: PUSH
48979: LD_INT 105
48981: PUSH
48982: LD_INT 106
48984: PUSH
48985: LD_INT 108
48987: PUSH
48988: LD_INT 112
48990: PUSH
48991: LD_INT 116
48993: PUSH
48994: LD_INT 117
48996: PUSH
48997: LD_INT 118
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: ST_TO_ADDR
49016: GO 51419
49018: LD_INT 8
49020: DOUBLE
49021: EQUAL
49022: IFTRUE 49026
49024: GO 49166
49026: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
49027: LD_ADDR_VAR 0 2
49031: PUSH
49032: LD_INT 2
49034: PUSH
49035: LD_INT 4
49037: PUSH
49038: LD_INT 5
49040: PUSH
49041: LD_INT 6
49043: PUSH
49044: LD_INT 7
49046: PUSH
49047: LD_INT 8
49049: PUSH
49050: LD_INT 11
49052: PUSH
49053: LD_INT 12
49055: PUSH
49056: LD_INT 15
49058: PUSH
49059: LD_INT 16
49061: PUSH
49062: LD_INT 20
49064: PUSH
49065: LD_INT 21
49067: PUSH
49068: LD_INT 22
49070: PUSH
49071: LD_INT 23
49073: PUSH
49074: LD_INT 25
49076: PUSH
49077: LD_INT 26
49079: PUSH
49080: LD_INT 30
49082: PUSH
49083: LD_INT 31
49085: PUSH
49086: LD_INT 32
49088: PUSH
49089: LD_INT 36
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 101
49116: PUSH
49117: LD_INT 102
49119: PUSH
49120: LD_INT 103
49122: PUSH
49123: LD_INT 105
49125: PUSH
49126: LD_INT 106
49128: PUSH
49129: LD_INT 108
49131: PUSH
49132: LD_INT 109
49134: PUSH
49135: LD_INT 112
49137: PUSH
49138: LD_INT 116
49140: PUSH
49141: LD_INT 117
49143: PUSH
49144: LD_INT 118
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: ST_TO_ADDR
49164: GO 51419
49166: LD_INT 9
49168: DOUBLE
49169: EQUAL
49170: IFTRUE 49174
49172: GO 49322
49174: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
49175: LD_ADDR_VAR 0 2
49179: PUSH
49180: LD_INT 2
49182: PUSH
49183: LD_INT 4
49185: PUSH
49186: LD_INT 5
49188: PUSH
49189: LD_INT 6
49191: PUSH
49192: LD_INT 7
49194: PUSH
49195: LD_INT 8
49197: PUSH
49198: LD_INT 11
49200: PUSH
49201: LD_INT 12
49203: PUSH
49204: LD_INT 15
49206: PUSH
49207: LD_INT 16
49209: PUSH
49210: LD_INT 20
49212: PUSH
49213: LD_INT 21
49215: PUSH
49216: LD_INT 22
49218: PUSH
49219: LD_INT 23
49221: PUSH
49222: LD_INT 25
49224: PUSH
49225: LD_INT 26
49227: PUSH
49228: LD_INT 28
49230: PUSH
49231: LD_INT 30
49233: PUSH
49234: LD_INT 31
49236: PUSH
49237: LD_INT 32
49239: PUSH
49240: LD_INT 36
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 101
49268: PUSH
49269: LD_INT 102
49271: PUSH
49272: LD_INT 103
49274: PUSH
49275: LD_INT 105
49277: PUSH
49278: LD_INT 106
49280: PUSH
49281: LD_INT 108
49283: PUSH
49284: LD_INT 109
49286: PUSH
49287: LD_INT 112
49289: PUSH
49290: LD_INT 114
49292: PUSH
49293: LD_INT 116
49295: PUSH
49296: LD_INT 117
49298: PUSH
49299: LD_INT 118
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: ST_TO_ADDR
49320: GO 51419
49322: LD_INT 10
49324: DOUBLE
49325: EQUAL
49326: IFTRUE 49330
49328: GO 49526
49330: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
49331: LD_ADDR_VAR 0 2
49335: PUSH
49336: LD_INT 2
49338: PUSH
49339: LD_INT 4
49341: PUSH
49342: LD_INT 5
49344: PUSH
49345: LD_INT 6
49347: PUSH
49348: LD_INT 7
49350: PUSH
49351: LD_INT 8
49353: PUSH
49354: LD_INT 9
49356: PUSH
49357: LD_INT 10
49359: PUSH
49360: LD_INT 11
49362: PUSH
49363: LD_INT 12
49365: PUSH
49366: LD_INT 13
49368: PUSH
49369: LD_INT 14
49371: PUSH
49372: LD_INT 15
49374: PUSH
49375: LD_INT 16
49377: PUSH
49378: LD_INT 17
49380: PUSH
49381: LD_INT 18
49383: PUSH
49384: LD_INT 19
49386: PUSH
49387: LD_INT 20
49389: PUSH
49390: LD_INT 21
49392: PUSH
49393: LD_INT 22
49395: PUSH
49396: LD_INT 23
49398: PUSH
49399: LD_INT 24
49401: PUSH
49402: LD_INT 25
49404: PUSH
49405: LD_INT 26
49407: PUSH
49408: LD_INT 28
49410: PUSH
49411: LD_INT 30
49413: PUSH
49414: LD_INT 31
49416: PUSH
49417: LD_INT 32
49419: PUSH
49420: LD_INT 36
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 101
49456: PUSH
49457: LD_INT 102
49459: PUSH
49460: LD_INT 103
49462: PUSH
49463: LD_INT 104
49465: PUSH
49466: LD_INT 105
49468: PUSH
49469: LD_INT 106
49471: PUSH
49472: LD_INT 107
49474: PUSH
49475: LD_INT 108
49477: PUSH
49478: LD_INT 109
49480: PUSH
49481: LD_INT 110
49483: PUSH
49484: LD_INT 111
49486: PUSH
49487: LD_INT 112
49489: PUSH
49490: LD_INT 114
49492: PUSH
49493: LD_INT 116
49495: PUSH
49496: LD_INT 117
49498: PUSH
49499: LD_INT 118
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: ST_TO_ADDR
49524: GO 51419
49526: LD_INT 11
49528: DOUBLE
49529: EQUAL
49530: IFTRUE 49534
49532: GO 49738
49534: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
49535: LD_ADDR_VAR 0 2
49539: PUSH
49540: LD_INT 2
49542: PUSH
49543: LD_INT 3
49545: PUSH
49546: LD_INT 4
49548: PUSH
49549: LD_INT 5
49551: PUSH
49552: LD_INT 6
49554: PUSH
49555: LD_INT 7
49557: PUSH
49558: LD_INT 8
49560: PUSH
49561: LD_INT 9
49563: PUSH
49564: LD_INT 10
49566: PUSH
49567: LD_INT 11
49569: PUSH
49570: LD_INT 12
49572: PUSH
49573: LD_INT 13
49575: PUSH
49576: LD_INT 14
49578: PUSH
49579: LD_INT 15
49581: PUSH
49582: LD_INT 16
49584: PUSH
49585: LD_INT 17
49587: PUSH
49588: LD_INT 18
49590: PUSH
49591: LD_INT 19
49593: PUSH
49594: LD_INT 20
49596: PUSH
49597: LD_INT 21
49599: PUSH
49600: LD_INT 22
49602: PUSH
49603: LD_INT 23
49605: PUSH
49606: LD_INT 24
49608: PUSH
49609: LD_INT 25
49611: PUSH
49612: LD_INT 26
49614: PUSH
49615: LD_INT 28
49617: PUSH
49618: LD_INT 30
49620: PUSH
49621: LD_INT 31
49623: PUSH
49624: LD_INT 32
49626: PUSH
49627: LD_INT 34
49629: PUSH
49630: LD_INT 36
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 101
49668: PUSH
49669: LD_INT 102
49671: PUSH
49672: LD_INT 103
49674: PUSH
49675: LD_INT 104
49677: PUSH
49678: LD_INT 105
49680: PUSH
49681: LD_INT 106
49683: PUSH
49684: LD_INT 107
49686: PUSH
49687: LD_INT 108
49689: PUSH
49690: LD_INT 109
49692: PUSH
49693: LD_INT 110
49695: PUSH
49696: LD_INT 111
49698: PUSH
49699: LD_INT 112
49701: PUSH
49702: LD_INT 114
49704: PUSH
49705: LD_INT 116
49707: PUSH
49708: LD_INT 117
49710: PUSH
49711: LD_INT 118
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: ST_TO_ADDR
49736: GO 51419
49738: LD_INT 12
49740: DOUBLE
49741: EQUAL
49742: IFTRUE 49746
49744: GO 49966
49746: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
49747: LD_ADDR_VAR 0 2
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: LD_INT 2
49757: PUSH
49758: LD_INT 3
49760: PUSH
49761: LD_INT 4
49763: PUSH
49764: LD_INT 5
49766: PUSH
49767: LD_INT 6
49769: PUSH
49770: LD_INT 7
49772: PUSH
49773: LD_INT 8
49775: PUSH
49776: LD_INT 9
49778: PUSH
49779: LD_INT 10
49781: PUSH
49782: LD_INT 11
49784: PUSH
49785: LD_INT 12
49787: PUSH
49788: LD_INT 13
49790: PUSH
49791: LD_INT 14
49793: PUSH
49794: LD_INT 15
49796: PUSH
49797: LD_INT 16
49799: PUSH
49800: LD_INT 17
49802: PUSH
49803: LD_INT 18
49805: PUSH
49806: LD_INT 19
49808: PUSH
49809: LD_INT 20
49811: PUSH
49812: LD_INT 21
49814: PUSH
49815: LD_INT 22
49817: PUSH
49818: LD_INT 23
49820: PUSH
49821: LD_INT 24
49823: PUSH
49824: LD_INT 25
49826: PUSH
49827: LD_INT 26
49829: PUSH
49830: LD_INT 27
49832: PUSH
49833: LD_INT 28
49835: PUSH
49836: LD_INT 30
49838: PUSH
49839: LD_INT 31
49841: PUSH
49842: LD_INT 32
49844: PUSH
49845: LD_INT 33
49847: PUSH
49848: LD_INT 34
49850: PUSH
49851: LD_INT 36
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 101
49892: PUSH
49893: LD_INT 102
49895: PUSH
49896: LD_INT 103
49898: PUSH
49899: LD_INT 104
49901: PUSH
49902: LD_INT 105
49904: PUSH
49905: LD_INT 106
49907: PUSH
49908: LD_INT 107
49910: PUSH
49911: LD_INT 108
49913: PUSH
49914: LD_INT 109
49916: PUSH
49917: LD_INT 110
49919: PUSH
49920: LD_INT 111
49922: PUSH
49923: LD_INT 112
49925: PUSH
49926: LD_INT 113
49928: PUSH
49929: LD_INT 114
49931: PUSH
49932: LD_INT 116
49934: PUSH
49935: LD_INT 117
49937: PUSH
49938: LD_INT 118
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: ST_TO_ADDR
49964: GO 51419
49966: LD_INT 13
49968: DOUBLE
49969: EQUAL
49970: IFTRUE 49974
49972: GO 50182
49974: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
49975: LD_ADDR_VAR 0 2
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: LD_INT 2
49985: PUSH
49986: LD_INT 3
49988: PUSH
49989: LD_INT 4
49991: PUSH
49992: LD_INT 5
49994: PUSH
49995: LD_INT 8
49997: PUSH
49998: LD_INT 9
50000: PUSH
50001: LD_INT 10
50003: PUSH
50004: LD_INT 11
50006: PUSH
50007: LD_INT 12
50009: PUSH
50010: LD_INT 14
50012: PUSH
50013: LD_INT 15
50015: PUSH
50016: LD_INT 16
50018: PUSH
50019: LD_INT 17
50021: PUSH
50022: LD_INT 18
50024: PUSH
50025: LD_INT 19
50027: PUSH
50028: LD_INT 20
50030: PUSH
50031: LD_INT 21
50033: PUSH
50034: LD_INT 22
50036: PUSH
50037: LD_INT 23
50039: PUSH
50040: LD_INT 24
50042: PUSH
50043: LD_INT 25
50045: PUSH
50046: LD_INT 26
50048: PUSH
50049: LD_INT 27
50051: PUSH
50052: LD_INT 28
50054: PUSH
50055: LD_INT 30
50057: PUSH
50058: LD_INT 31
50060: PUSH
50061: LD_INT 32
50063: PUSH
50064: LD_INT 33
50066: PUSH
50067: LD_INT 34
50069: PUSH
50070: LD_INT 36
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 101
50108: PUSH
50109: LD_INT 102
50111: PUSH
50112: LD_INT 103
50114: PUSH
50115: LD_INT 104
50117: PUSH
50118: LD_INT 105
50120: PUSH
50121: LD_INT 106
50123: PUSH
50124: LD_INT 107
50126: PUSH
50127: LD_INT 108
50129: PUSH
50130: LD_INT 109
50132: PUSH
50133: LD_INT 110
50135: PUSH
50136: LD_INT 111
50138: PUSH
50139: LD_INT 112
50141: PUSH
50142: LD_INT 113
50144: PUSH
50145: LD_INT 114
50147: PUSH
50148: LD_INT 116
50150: PUSH
50151: LD_INT 117
50153: PUSH
50154: LD_INT 118
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: ST_TO_ADDR
50180: GO 51419
50182: LD_INT 14
50184: DOUBLE
50185: EQUAL
50186: IFTRUE 50190
50188: GO 50414
50190: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
50191: LD_ADDR_VAR 0 2
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: LD_INT 3
50204: PUSH
50205: LD_INT 4
50207: PUSH
50208: LD_INT 5
50210: PUSH
50211: LD_INT 6
50213: PUSH
50214: LD_INT 7
50216: PUSH
50217: LD_INT 8
50219: PUSH
50220: LD_INT 9
50222: PUSH
50223: LD_INT 10
50225: PUSH
50226: LD_INT 11
50228: PUSH
50229: LD_INT 12
50231: PUSH
50232: LD_INT 13
50234: PUSH
50235: LD_INT 14
50237: PUSH
50238: LD_INT 15
50240: PUSH
50241: LD_INT 16
50243: PUSH
50244: LD_INT 17
50246: PUSH
50247: LD_INT 18
50249: PUSH
50250: LD_INT 19
50252: PUSH
50253: LD_INT 20
50255: PUSH
50256: LD_INT 21
50258: PUSH
50259: LD_INT 22
50261: PUSH
50262: LD_INT 23
50264: PUSH
50265: LD_INT 24
50267: PUSH
50268: LD_INT 25
50270: PUSH
50271: LD_INT 26
50273: PUSH
50274: LD_INT 27
50276: PUSH
50277: LD_INT 28
50279: PUSH
50280: LD_INT 29
50282: PUSH
50283: LD_INT 30
50285: PUSH
50286: LD_INT 31
50288: PUSH
50289: LD_INT 32
50291: PUSH
50292: LD_INT 33
50294: PUSH
50295: LD_INT 34
50297: PUSH
50298: LD_INT 36
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 101
50340: PUSH
50341: LD_INT 102
50343: PUSH
50344: LD_INT 103
50346: PUSH
50347: LD_INT 104
50349: PUSH
50350: LD_INT 105
50352: PUSH
50353: LD_INT 106
50355: PUSH
50356: LD_INT 107
50358: PUSH
50359: LD_INT 108
50361: PUSH
50362: LD_INT 109
50364: PUSH
50365: LD_INT 110
50367: PUSH
50368: LD_INT 111
50370: PUSH
50371: LD_INT 112
50373: PUSH
50374: LD_INT 113
50376: PUSH
50377: LD_INT 114
50379: PUSH
50380: LD_INT 116
50382: PUSH
50383: LD_INT 117
50385: PUSH
50386: LD_INT 118
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: ST_TO_ADDR
50412: GO 51419
50414: LD_INT 15
50416: DOUBLE
50417: EQUAL
50418: IFTRUE 50422
50420: GO 50646
50422: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
50423: LD_ADDR_VAR 0 2
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: LD_INT 2
50433: PUSH
50434: LD_INT 3
50436: PUSH
50437: LD_INT 4
50439: PUSH
50440: LD_INT 5
50442: PUSH
50443: LD_INT 6
50445: PUSH
50446: LD_INT 7
50448: PUSH
50449: LD_INT 8
50451: PUSH
50452: LD_INT 9
50454: PUSH
50455: LD_INT 10
50457: PUSH
50458: LD_INT 11
50460: PUSH
50461: LD_INT 12
50463: PUSH
50464: LD_INT 13
50466: PUSH
50467: LD_INT 14
50469: PUSH
50470: LD_INT 15
50472: PUSH
50473: LD_INT 16
50475: PUSH
50476: LD_INT 17
50478: PUSH
50479: LD_INT 18
50481: PUSH
50482: LD_INT 19
50484: PUSH
50485: LD_INT 20
50487: PUSH
50488: LD_INT 21
50490: PUSH
50491: LD_INT 22
50493: PUSH
50494: LD_INT 23
50496: PUSH
50497: LD_INT 24
50499: PUSH
50500: LD_INT 25
50502: PUSH
50503: LD_INT 26
50505: PUSH
50506: LD_INT 27
50508: PUSH
50509: LD_INT 28
50511: PUSH
50512: LD_INT 29
50514: PUSH
50515: LD_INT 30
50517: PUSH
50518: LD_INT 31
50520: PUSH
50521: LD_INT 32
50523: PUSH
50524: LD_INT 33
50526: PUSH
50527: LD_INT 34
50529: PUSH
50530: LD_INT 36
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 101
50572: PUSH
50573: LD_INT 102
50575: PUSH
50576: LD_INT 103
50578: PUSH
50579: LD_INT 104
50581: PUSH
50582: LD_INT 105
50584: PUSH
50585: LD_INT 106
50587: PUSH
50588: LD_INT 107
50590: PUSH
50591: LD_INT 108
50593: PUSH
50594: LD_INT 109
50596: PUSH
50597: LD_INT 110
50599: PUSH
50600: LD_INT 111
50602: PUSH
50603: LD_INT 112
50605: PUSH
50606: LD_INT 113
50608: PUSH
50609: LD_INT 114
50611: PUSH
50612: LD_INT 116
50614: PUSH
50615: LD_INT 117
50617: PUSH
50618: LD_INT 118
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: ST_TO_ADDR
50644: GO 51419
50646: LD_INT 16
50648: DOUBLE
50649: EQUAL
50650: IFTRUE 50654
50652: GO 50790
50654: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
50655: LD_ADDR_VAR 0 2
50659: PUSH
50660: LD_INT 2
50662: PUSH
50663: LD_INT 4
50665: PUSH
50666: LD_INT 5
50668: PUSH
50669: LD_INT 7
50671: PUSH
50672: LD_INT 11
50674: PUSH
50675: LD_INT 12
50677: PUSH
50678: LD_INT 15
50680: PUSH
50681: LD_INT 16
50683: PUSH
50684: LD_INT 20
50686: PUSH
50687: LD_INT 21
50689: PUSH
50690: LD_INT 22
50692: PUSH
50693: LD_INT 23
50695: PUSH
50696: LD_INT 25
50698: PUSH
50699: LD_INT 26
50701: PUSH
50702: LD_INT 30
50704: PUSH
50705: LD_INT 31
50707: PUSH
50708: LD_INT 32
50710: PUSH
50711: LD_INT 33
50713: PUSH
50714: LD_INT 34
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 101
50740: PUSH
50741: LD_INT 102
50743: PUSH
50744: LD_INT 103
50746: PUSH
50747: LD_INT 106
50749: PUSH
50750: LD_INT 108
50752: PUSH
50753: LD_INT 112
50755: PUSH
50756: LD_INT 113
50758: PUSH
50759: LD_INT 114
50761: PUSH
50762: LD_INT 116
50764: PUSH
50765: LD_INT 117
50767: PUSH
50768: LD_INT 118
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: ST_TO_ADDR
50788: GO 51419
50790: LD_INT 17
50792: DOUBLE
50793: EQUAL
50794: IFTRUE 50798
50796: GO 51022
50798: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
50799: LD_ADDR_VAR 0 2
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: LD_INT 2
50809: PUSH
50810: LD_INT 3
50812: PUSH
50813: LD_INT 4
50815: PUSH
50816: LD_INT 5
50818: PUSH
50819: LD_INT 6
50821: PUSH
50822: LD_INT 7
50824: PUSH
50825: LD_INT 8
50827: PUSH
50828: LD_INT 9
50830: PUSH
50831: LD_INT 10
50833: PUSH
50834: LD_INT 11
50836: PUSH
50837: LD_INT 12
50839: PUSH
50840: LD_INT 13
50842: PUSH
50843: LD_INT 14
50845: PUSH
50846: LD_INT 15
50848: PUSH
50849: LD_INT 16
50851: PUSH
50852: LD_INT 17
50854: PUSH
50855: LD_INT 18
50857: PUSH
50858: LD_INT 19
50860: PUSH
50861: LD_INT 20
50863: PUSH
50864: LD_INT 21
50866: PUSH
50867: LD_INT 22
50869: PUSH
50870: LD_INT 23
50872: PUSH
50873: LD_INT 24
50875: PUSH
50876: LD_INT 25
50878: PUSH
50879: LD_INT 26
50881: PUSH
50882: LD_INT 27
50884: PUSH
50885: LD_INT 28
50887: PUSH
50888: LD_INT 29
50890: PUSH
50891: LD_INT 30
50893: PUSH
50894: LD_INT 31
50896: PUSH
50897: LD_INT 32
50899: PUSH
50900: LD_INT 33
50902: PUSH
50903: LD_INT 34
50905: PUSH
50906: LD_INT 36
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 101
50948: PUSH
50949: LD_INT 102
50951: PUSH
50952: LD_INT 103
50954: PUSH
50955: LD_INT 104
50957: PUSH
50958: LD_INT 105
50960: PUSH
50961: LD_INT 106
50963: PUSH
50964: LD_INT 107
50966: PUSH
50967: LD_INT 108
50969: PUSH
50970: LD_INT 109
50972: PUSH
50973: LD_INT 110
50975: PUSH
50976: LD_INT 111
50978: PUSH
50979: LD_INT 112
50981: PUSH
50982: LD_INT 113
50984: PUSH
50985: LD_INT 114
50987: PUSH
50988: LD_INT 116
50990: PUSH
50991: LD_INT 117
50993: PUSH
50994: LD_INT 118
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: ST_TO_ADDR
51020: GO 51419
51022: LD_INT 18
51024: DOUBLE
51025: EQUAL
51026: IFTRUE 51030
51028: GO 51178
51030: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
51031: LD_ADDR_VAR 0 2
51035: PUSH
51036: LD_INT 2
51038: PUSH
51039: LD_INT 4
51041: PUSH
51042: LD_INT 5
51044: PUSH
51045: LD_INT 7
51047: PUSH
51048: LD_INT 11
51050: PUSH
51051: LD_INT 12
51053: PUSH
51054: LD_INT 15
51056: PUSH
51057: LD_INT 16
51059: PUSH
51060: LD_INT 20
51062: PUSH
51063: LD_INT 21
51065: PUSH
51066: LD_INT 22
51068: PUSH
51069: LD_INT 23
51071: PUSH
51072: LD_INT 25
51074: PUSH
51075: LD_INT 26
51077: PUSH
51078: LD_INT 30
51080: PUSH
51081: LD_INT 31
51083: PUSH
51084: LD_INT 32
51086: PUSH
51087: LD_INT 33
51089: PUSH
51090: LD_INT 34
51092: PUSH
51093: LD_INT 35
51095: PUSH
51096: LD_INT 36
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 101
51124: PUSH
51125: LD_INT 102
51127: PUSH
51128: LD_INT 103
51130: PUSH
51131: LD_INT 106
51133: PUSH
51134: LD_INT 108
51136: PUSH
51137: LD_INT 112
51139: PUSH
51140: LD_INT 113
51142: PUSH
51143: LD_INT 114
51145: PUSH
51146: LD_INT 115
51148: PUSH
51149: LD_INT 116
51151: PUSH
51152: LD_INT 117
51154: PUSH
51155: LD_INT 118
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: ST_TO_ADDR
51176: GO 51419
51178: LD_INT 19
51180: DOUBLE
51181: EQUAL
51182: IFTRUE 51186
51184: GO 51418
51186: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
51187: LD_ADDR_VAR 0 2
51191: PUSH
51192: LD_INT 1
51194: PUSH
51195: LD_INT 2
51197: PUSH
51198: LD_INT 3
51200: PUSH
51201: LD_INT 4
51203: PUSH
51204: LD_INT 5
51206: PUSH
51207: LD_INT 6
51209: PUSH
51210: LD_INT 7
51212: PUSH
51213: LD_INT 8
51215: PUSH
51216: LD_INT 9
51218: PUSH
51219: LD_INT 10
51221: PUSH
51222: LD_INT 11
51224: PUSH
51225: LD_INT 12
51227: PUSH
51228: LD_INT 13
51230: PUSH
51231: LD_INT 14
51233: PUSH
51234: LD_INT 15
51236: PUSH
51237: LD_INT 16
51239: PUSH
51240: LD_INT 17
51242: PUSH
51243: LD_INT 18
51245: PUSH
51246: LD_INT 19
51248: PUSH
51249: LD_INT 20
51251: PUSH
51252: LD_INT 21
51254: PUSH
51255: LD_INT 22
51257: PUSH
51258: LD_INT 23
51260: PUSH
51261: LD_INT 24
51263: PUSH
51264: LD_INT 25
51266: PUSH
51267: LD_INT 26
51269: PUSH
51270: LD_INT 27
51272: PUSH
51273: LD_INT 28
51275: PUSH
51276: LD_INT 29
51278: PUSH
51279: LD_INT 30
51281: PUSH
51282: LD_INT 31
51284: PUSH
51285: LD_INT 32
51287: PUSH
51288: LD_INT 33
51290: PUSH
51291: LD_INT 34
51293: PUSH
51294: LD_INT 35
51296: PUSH
51297: LD_INT 36
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 101
51340: PUSH
51341: LD_INT 102
51343: PUSH
51344: LD_INT 103
51346: PUSH
51347: LD_INT 104
51349: PUSH
51350: LD_INT 105
51352: PUSH
51353: LD_INT 106
51355: PUSH
51356: LD_INT 107
51358: PUSH
51359: LD_INT 108
51361: PUSH
51362: LD_INT 109
51364: PUSH
51365: LD_INT 110
51367: PUSH
51368: LD_INT 111
51370: PUSH
51371: LD_INT 112
51373: PUSH
51374: LD_INT 113
51376: PUSH
51377: LD_INT 114
51379: PUSH
51380: LD_INT 115
51382: PUSH
51383: LD_INT 116
51385: PUSH
51386: LD_INT 117
51388: PUSH
51389: LD_INT 118
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: ST_TO_ADDR
51416: GO 51419
51418: POP
// end else
51419: GO 51650
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
51421: LD_ADDR_VAR 0 2
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: LD_INT 2
51431: PUSH
51432: LD_INT 3
51434: PUSH
51435: LD_INT 4
51437: PUSH
51438: LD_INT 5
51440: PUSH
51441: LD_INT 6
51443: PUSH
51444: LD_INT 7
51446: PUSH
51447: LD_INT 8
51449: PUSH
51450: LD_INT 9
51452: PUSH
51453: LD_INT 10
51455: PUSH
51456: LD_INT 11
51458: PUSH
51459: LD_INT 12
51461: PUSH
51462: LD_INT 13
51464: PUSH
51465: LD_INT 14
51467: PUSH
51468: LD_INT 15
51470: PUSH
51471: LD_INT 16
51473: PUSH
51474: LD_INT 17
51476: PUSH
51477: LD_INT 18
51479: PUSH
51480: LD_INT 19
51482: PUSH
51483: LD_INT 20
51485: PUSH
51486: LD_INT 21
51488: PUSH
51489: LD_INT 22
51491: PUSH
51492: LD_INT 23
51494: PUSH
51495: LD_INT 24
51497: PUSH
51498: LD_INT 25
51500: PUSH
51501: LD_INT 26
51503: PUSH
51504: LD_INT 27
51506: PUSH
51507: LD_INT 28
51509: PUSH
51510: LD_INT 29
51512: PUSH
51513: LD_INT 30
51515: PUSH
51516: LD_INT 31
51518: PUSH
51519: LD_INT 32
51521: PUSH
51522: LD_INT 33
51524: PUSH
51525: LD_INT 34
51527: PUSH
51528: LD_INT 35
51530: PUSH
51531: LD_INT 36
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 101
51574: PUSH
51575: LD_INT 102
51577: PUSH
51578: LD_INT 103
51580: PUSH
51581: LD_INT 104
51583: PUSH
51584: LD_INT 105
51586: PUSH
51587: LD_INT 106
51589: PUSH
51590: LD_INT 107
51592: PUSH
51593: LD_INT 108
51595: PUSH
51596: LD_INT 109
51598: PUSH
51599: LD_INT 110
51601: PUSH
51602: LD_INT 111
51604: PUSH
51605: LD_INT 112
51607: PUSH
51608: LD_INT 113
51610: PUSH
51611: LD_INT 114
51613: PUSH
51614: LD_INT 115
51616: PUSH
51617: LD_INT 116
51619: PUSH
51620: LD_INT 117
51622: PUSH
51623: LD_INT 118
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: ST_TO_ADDR
// if result then
51650: LD_VAR 0 2
51654: IFFALSE 52440
// begin normal :=  ;
51656: LD_ADDR_VAR 0 5
51660: PUSH
51661: LD_STRING 
51663: ST_TO_ADDR
// hardcore :=  ;
51664: LD_ADDR_VAR 0 6
51668: PUSH
51669: LD_STRING 
51671: ST_TO_ADDR
// active :=  ;
51672: LD_ADDR_VAR 0 7
51676: PUSH
51677: LD_STRING 
51679: ST_TO_ADDR
// for i = 1 to normalCounter do
51680: LD_ADDR_VAR 0 8
51684: PUSH
51685: DOUBLE
51686: LD_INT 1
51688: DEC
51689: ST_TO_ADDR
51690: LD_EXP 97
51694: PUSH
51695: FOR_TO
51696: IFFALSE 51797
// begin tmp := 0 ;
51698: LD_ADDR_VAR 0 3
51702: PUSH
51703: LD_STRING 0
51705: ST_TO_ADDR
// if result [ 1 ] then
51706: LD_VAR 0 2
51710: PUSH
51711: LD_INT 1
51713: ARRAY
51714: IFFALSE 51779
// if result [ 1 ] [ 1 ] = i then
51716: LD_VAR 0 2
51720: PUSH
51721: LD_INT 1
51723: ARRAY
51724: PUSH
51725: LD_INT 1
51727: ARRAY
51728: PUSH
51729: LD_VAR 0 8
51733: EQUAL
51734: IFFALSE 51779
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
51736: LD_ADDR_VAR 0 2
51740: PUSH
51741: LD_VAR 0 2
51745: PPUSH
51746: LD_INT 1
51748: PPUSH
51749: LD_VAR 0 2
51753: PUSH
51754: LD_INT 1
51756: ARRAY
51757: PPUSH
51758: LD_INT 1
51760: PPUSH
51761: CALL_OW 3
51765: PPUSH
51766: CALL_OW 1
51770: ST_TO_ADDR
// tmp := 1 ;
51771: LD_ADDR_VAR 0 3
51775: PUSH
51776: LD_STRING 1
51778: ST_TO_ADDR
// end ; normal := normal & tmp ;
51779: LD_ADDR_VAR 0 5
51783: PUSH
51784: LD_VAR 0 5
51788: PUSH
51789: LD_VAR 0 3
51793: STR
51794: ST_TO_ADDR
// end ;
51795: GO 51695
51797: POP
51798: POP
// for i = 1 to hardcoreCounter do
51799: LD_ADDR_VAR 0 8
51803: PUSH
51804: DOUBLE
51805: LD_INT 1
51807: DEC
51808: ST_TO_ADDR
51809: LD_EXP 98
51813: PUSH
51814: FOR_TO
51815: IFFALSE 51920
// begin tmp := 0 ;
51817: LD_ADDR_VAR 0 3
51821: PUSH
51822: LD_STRING 0
51824: ST_TO_ADDR
// if result [ 2 ] then
51825: LD_VAR 0 2
51829: PUSH
51830: LD_INT 2
51832: ARRAY
51833: IFFALSE 51902
// if result [ 2 ] [ 1 ] = 100 + i then
51835: LD_VAR 0 2
51839: PUSH
51840: LD_INT 2
51842: ARRAY
51843: PUSH
51844: LD_INT 1
51846: ARRAY
51847: PUSH
51848: LD_INT 100
51850: PUSH
51851: LD_VAR 0 8
51855: PLUS
51856: EQUAL
51857: IFFALSE 51902
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
51859: LD_ADDR_VAR 0 2
51863: PUSH
51864: LD_VAR 0 2
51868: PPUSH
51869: LD_INT 2
51871: PPUSH
51872: LD_VAR 0 2
51876: PUSH
51877: LD_INT 2
51879: ARRAY
51880: PPUSH
51881: LD_INT 1
51883: PPUSH
51884: CALL_OW 3
51888: PPUSH
51889: CALL_OW 1
51893: ST_TO_ADDR
// tmp := 1 ;
51894: LD_ADDR_VAR 0 3
51898: PUSH
51899: LD_STRING 1
51901: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
51902: LD_ADDR_VAR 0 6
51906: PUSH
51907: LD_VAR 0 6
51911: PUSH
51912: LD_VAR 0 3
51916: STR
51917: ST_TO_ADDR
// end ;
51918: GO 51814
51920: POP
51921: POP
// if isGameLoad then
51922: LD_VAR 0 1
51926: IFFALSE 52401
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
51928: LD_ADDR_VAR 0 4
51932: PUSH
51933: LD_EXP 101
51937: PUSH
51938: LD_EXP 100
51942: PUSH
51943: LD_EXP 102
51947: PUSH
51948: LD_EXP 99
51952: PUSH
51953: LD_EXP 103
51957: PUSH
51958: LD_EXP 104
51962: PUSH
51963: LD_EXP 105
51967: PUSH
51968: LD_EXP 106
51972: PUSH
51973: LD_EXP 107
51977: PUSH
51978: LD_EXP 108
51982: PUSH
51983: LD_EXP 109
51987: PUSH
51988: LD_EXP 110
51992: PUSH
51993: LD_EXP 111
51997: PUSH
51998: LD_EXP 112
52002: PUSH
52003: LD_EXP 120
52007: PUSH
52008: LD_EXP 121
52012: PUSH
52013: LD_EXP 122
52017: PUSH
52018: LD_EXP 123
52022: PUSH
52023: LD_EXP 125
52027: PUSH
52028: LD_EXP 126
52032: PUSH
52033: LD_EXP 127
52037: PUSH
52038: LD_EXP 130
52042: PUSH
52043: LD_EXP 132
52047: PUSH
52048: LD_EXP 133
52052: PUSH
52053: LD_EXP 134
52057: PUSH
52058: LD_EXP 136
52062: PUSH
52063: LD_EXP 137
52067: PUSH
52068: LD_EXP 140
52072: PUSH
52073: LD_EXP 141
52077: PUSH
52078: LD_EXP 142
52082: PUSH
52083: LD_EXP 143
52087: PUSH
52088: LD_EXP 144
52092: PUSH
52093: LD_EXP 145
52097: PUSH
52098: LD_EXP 146
52102: PUSH
52103: LD_EXP 147
52107: PUSH
52108: LD_EXP 148
52112: PUSH
52113: LD_EXP 113
52117: PUSH
52118: LD_EXP 114
52122: PUSH
52123: LD_EXP 117
52127: PUSH
52128: LD_EXP 118
52132: PUSH
52133: LD_EXP 119
52137: PUSH
52138: LD_EXP 115
52142: PUSH
52143: LD_EXP 116
52147: PUSH
52148: LD_EXP 124
52152: PUSH
52153: LD_EXP 128
52157: PUSH
52158: LD_EXP 129
52162: PUSH
52163: LD_EXP 131
52167: PUSH
52168: LD_EXP 135
52172: PUSH
52173: LD_EXP 138
52177: PUSH
52178: LD_EXP 139
52182: PUSH
52183: LD_EXP 149
52187: PUSH
52188: LD_EXP 150
52192: PUSH
52193: LD_EXP 151
52197: PUSH
52198: LD_EXP 152
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: ST_TO_ADDR
// tmp :=  ;
52259: LD_ADDR_VAR 0 3
52263: PUSH
52264: LD_STRING 
52266: ST_TO_ADDR
// for i = 1 to normalCounter do
52267: LD_ADDR_VAR 0 8
52271: PUSH
52272: DOUBLE
52273: LD_INT 1
52275: DEC
52276: ST_TO_ADDR
52277: LD_EXP 97
52281: PUSH
52282: FOR_TO
52283: IFFALSE 52319
// begin if flags [ i ] then
52285: LD_VAR 0 4
52289: PUSH
52290: LD_VAR 0 8
52294: ARRAY
52295: IFFALSE 52317
// tmp := tmp & i & ; ;
52297: LD_ADDR_VAR 0 3
52301: PUSH
52302: LD_VAR 0 3
52306: PUSH
52307: LD_VAR 0 8
52311: STR
52312: PUSH
52313: LD_STRING ;
52315: STR
52316: ST_TO_ADDR
// end ;
52317: GO 52282
52319: POP
52320: POP
// for i = 1 to hardcoreCounter do
52321: LD_ADDR_VAR 0 8
52325: PUSH
52326: DOUBLE
52327: LD_INT 1
52329: DEC
52330: ST_TO_ADDR
52331: LD_EXP 98
52335: PUSH
52336: FOR_TO
52337: IFFALSE 52383
// begin if flags [ normalCounter + i ] then
52339: LD_VAR 0 4
52343: PUSH
52344: LD_EXP 97
52348: PUSH
52349: LD_VAR 0 8
52353: PLUS
52354: ARRAY
52355: IFFALSE 52381
// tmp := tmp & ( 100 + i ) & ; ;
52357: LD_ADDR_VAR 0 3
52361: PUSH
52362: LD_VAR 0 3
52366: PUSH
52367: LD_INT 100
52369: PUSH
52370: LD_VAR 0 8
52374: PLUS
52375: STR
52376: PUSH
52377: LD_STRING ;
52379: STR
52380: ST_TO_ADDR
// end ;
52381: GO 52336
52383: POP
52384: POP
// if tmp then
52385: LD_VAR 0 3
52389: IFFALSE 52401
// active := tmp ;
52391: LD_ADDR_VAR 0 7
52395: PUSH
52396: LD_VAR 0 3
52400: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
52401: LD_STRING getStreamItemsFromMission("
52403: PUSH
52404: LD_VAR 0 5
52408: STR
52409: PUSH
52410: LD_STRING ","
52412: STR
52413: PUSH
52414: LD_VAR 0 6
52418: STR
52419: PUSH
52420: LD_STRING ","
52422: STR
52423: PUSH
52424: LD_VAR 0 7
52428: STR
52429: PUSH
52430: LD_STRING ")
52432: STR
52433: PPUSH
52434: CALL_OW 559
// end else
52438: GO 52447
// ToLua ( getStreamItemsFromMission("","","") ) ;
52440: LD_STRING getStreamItemsFromMission("","","")
52442: PPUSH
52443: CALL_OW 559
// end ;
52447: LD_VAR 0 2
52451: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
52452: LD_EXP 96
52456: PUSH
52457: LD_EXP 101
52461: AND
52462: IFFALSE 52586
52464: GO 52466
52466: DISABLE
52467: LD_INT 0
52469: PPUSH
52470: PPUSH
// begin enable ;
52471: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
52472: LD_ADDR_VAR 0 2
52476: PUSH
52477: LD_INT 22
52479: PUSH
52480: LD_OWVAR 2
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 2
52491: PUSH
52492: LD_INT 34
52494: PUSH
52495: LD_INT 7
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 34
52504: PUSH
52505: LD_INT 45
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 34
52514: PUSH
52515: LD_INT 28
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 34
52524: PUSH
52525: LD_INT 47
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PPUSH
52543: CALL_OW 69
52547: ST_TO_ADDR
// if not tmp then
52548: LD_VAR 0 2
52552: NOT
52553: IFFALSE 52557
// exit ;
52555: GO 52586
// for i in tmp do
52557: LD_ADDR_VAR 0 1
52561: PUSH
52562: LD_VAR 0 2
52566: PUSH
52567: FOR_IN
52568: IFFALSE 52584
// begin SetLives ( i , 0 ) ;
52570: LD_VAR 0 1
52574: PPUSH
52575: LD_INT 0
52577: PPUSH
52578: CALL_OW 234
// end ;
52582: GO 52567
52584: POP
52585: POP
// end ;
52586: PPOPN 2
52588: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
52589: LD_EXP 96
52593: PUSH
52594: LD_EXP 102
52598: AND
52599: IFFALSE 52683
52601: GO 52603
52603: DISABLE
52604: LD_INT 0
52606: PPUSH
52607: PPUSH
// begin enable ;
52608: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
52609: LD_ADDR_VAR 0 2
52613: PUSH
52614: LD_INT 22
52616: PUSH
52617: LD_OWVAR 2
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 32
52628: PUSH
52629: LD_INT 3
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PPUSH
52640: CALL_OW 69
52644: ST_TO_ADDR
// if not tmp then
52645: LD_VAR 0 2
52649: NOT
52650: IFFALSE 52654
// exit ;
52652: GO 52683
// for i in tmp do
52654: LD_ADDR_VAR 0 1
52658: PUSH
52659: LD_VAR 0 2
52663: PUSH
52664: FOR_IN
52665: IFFALSE 52681
// begin SetLives ( i , 0 ) ;
52667: LD_VAR 0 1
52671: PPUSH
52672: LD_INT 0
52674: PPUSH
52675: CALL_OW 234
// end ;
52679: GO 52664
52681: POP
52682: POP
// end ;
52683: PPOPN 2
52685: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
52686: LD_EXP 96
52690: PUSH
52691: LD_EXP 99
52695: AND
52696: IFFALSE 52789
52698: GO 52700
52700: DISABLE
52701: LD_INT 0
52703: PPUSH
// begin enable ;
52704: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
52705: LD_ADDR_VAR 0 1
52709: PUSH
52710: LD_INT 22
52712: PUSH
52713: LD_OWVAR 2
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 2
52724: PUSH
52725: LD_INT 25
52727: PUSH
52728: LD_INT 5
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 25
52737: PUSH
52738: LD_INT 9
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 25
52747: PUSH
52748: LD_INT 8
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PPUSH
52765: CALL_OW 69
52769: PUSH
52770: FOR_IN
52771: IFFALSE 52787
// begin SetClass ( i , 1 ) ;
52773: LD_VAR 0 1
52777: PPUSH
52778: LD_INT 1
52780: PPUSH
52781: CALL_OW 336
// end ;
52785: GO 52770
52787: POP
52788: POP
// end ;
52789: PPOPN 1
52791: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
52792: LD_EXP 96
52796: PUSH
52797: LD_EXP 100
52801: AND
52802: PUSH
52803: LD_OWVAR 65
52807: PUSH
52808: LD_INT 7
52810: LESS
52811: AND
52812: IFFALSE 52826
52814: GO 52816
52816: DISABLE
// begin enable ;
52817: ENABLE
// game_speed := 7 ;
52818: LD_ADDR_OWVAR 65
52822: PUSH
52823: LD_INT 7
52825: ST_TO_ADDR
// end ;
52826: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
52827: LD_EXP 96
52831: PUSH
52832: LD_EXP 103
52836: AND
52837: IFFALSE 53039
52839: GO 52841
52841: DISABLE
52842: LD_INT 0
52844: PPUSH
52845: PPUSH
52846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
52847: LD_ADDR_VAR 0 3
52851: PUSH
52852: LD_INT 81
52854: PUSH
52855: LD_OWVAR 2
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 21
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PPUSH
52878: CALL_OW 69
52882: ST_TO_ADDR
// if not tmp then
52883: LD_VAR 0 3
52887: NOT
52888: IFFALSE 52892
// exit ;
52890: GO 53039
// if tmp > 5 then
52892: LD_VAR 0 3
52896: PUSH
52897: LD_INT 5
52899: GREATER
52900: IFFALSE 52912
// k := 5 else
52902: LD_ADDR_VAR 0 2
52906: PUSH
52907: LD_INT 5
52909: ST_TO_ADDR
52910: GO 52922
// k := tmp ;
52912: LD_ADDR_VAR 0 2
52916: PUSH
52917: LD_VAR 0 3
52921: ST_TO_ADDR
// for i := 1 to k do
52922: LD_ADDR_VAR 0 1
52926: PUSH
52927: DOUBLE
52928: LD_INT 1
52930: DEC
52931: ST_TO_ADDR
52932: LD_VAR 0 2
52936: PUSH
52937: FOR_TO
52938: IFFALSE 53037
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
52940: LD_VAR 0 3
52944: PUSH
52945: LD_VAR 0 1
52949: ARRAY
52950: PPUSH
52951: LD_VAR 0 1
52955: PUSH
52956: LD_INT 4
52958: MOD
52959: PUSH
52960: LD_INT 1
52962: PLUS
52963: PPUSH
52964: CALL_OW 259
52968: PUSH
52969: LD_INT 10
52971: LESS
52972: IFFALSE 53035
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
52974: LD_VAR 0 3
52978: PUSH
52979: LD_VAR 0 1
52983: ARRAY
52984: PPUSH
52985: LD_VAR 0 1
52989: PUSH
52990: LD_INT 4
52992: MOD
52993: PUSH
52994: LD_INT 1
52996: PLUS
52997: PPUSH
52998: LD_VAR 0 3
53002: PUSH
53003: LD_VAR 0 1
53007: ARRAY
53008: PPUSH
53009: LD_VAR 0 1
53013: PUSH
53014: LD_INT 4
53016: MOD
53017: PUSH
53018: LD_INT 1
53020: PLUS
53021: PPUSH
53022: CALL_OW 259
53026: PUSH
53027: LD_INT 1
53029: PLUS
53030: PPUSH
53031: CALL_OW 237
53035: GO 52937
53037: POP
53038: POP
// end ;
53039: PPOPN 3
53041: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
53042: LD_EXP 96
53046: PUSH
53047: LD_EXP 104
53051: AND
53052: IFFALSE 53072
53054: GO 53056
53056: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
53057: LD_INT 4
53059: PPUSH
53060: LD_OWVAR 2
53064: PPUSH
53065: LD_INT 0
53067: PPUSH
53068: CALL_OW 324
53072: END
// every 0 0$1 trigger StreamModeActive and sShovel do
53073: LD_EXP 96
53077: PUSH
53078: LD_EXP 133
53082: AND
53083: IFFALSE 53103
53085: GO 53087
53087: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
53088: LD_INT 19
53090: PPUSH
53091: LD_OWVAR 2
53095: PPUSH
53096: LD_INT 0
53098: PPUSH
53099: CALL_OW 324
53103: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
53104: LD_EXP 96
53108: PUSH
53109: LD_EXP 105
53113: AND
53114: IFFALSE 53216
53116: GO 53118
53118: DISABLE
53119: LD_INT 0
53121: PPUSH
53122: PPUSH
// begin enable ;
53123: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
53124: LD_ADDR_VAR 0 2
53128: PUSH
53129: LD_INT 22
53131: PUSH
53132: LD_OWVAR 2
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 2
53143: PUSH
53144: LD_INT 34
53146: PUSH
53147: LD_INT 11
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 34
53156: PUSH
53157: LD_INT 30
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: LIST
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PPUSH
53173: CALL_OW 69
53177: ST_TO_ADDR
// if not tmp then
53178: LD_VAR 0 2
53182: NOT
53183: IFFALSE 53187
// exit ;
53185: GO 53216
// for i in tmp do
53187: LD_ADDR_VAR 0 1
53191: PUSH
53192: LD_VAR 0 2
53196: PUSH
53197: FOR_IN
53198: IFFALSE 53214
// begin SetLives ( i , 0 ) ;
53200: LD_VAR 0 1
53204: PPUSH
53205: LD_INT 0
53207: PPUSH
53208: CALL_OW 234
// end ;
53212: GO 53197
53214: POP
53215: POP
// end ;
53216: PPOPN 2
53218: END
// every 0 0$1 trigger StreamModeActive and sBunker do
53219: LD_EXP 96
53223: PUSH
53224: LD_EXP 106
53228: AND
53229: IFFALSE 53249
53231: GO 53233
53233: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
53234: LD_INT 32
53236: PPUSH
53237: LD_OWVAR 2
53241: PPUSH
53242: LD_INT 0
53244: PPUSH
53245: CALL_OW 324
53249: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
53250: LD_EXP 96
53254: PUSH
53255: LD_EXP 107
53259: AND
53260: IFFALSE 53441
53262: GO 53264
53264: DISABLE
53265: LD_INT 0
53267: PPUSH
53268: PPUSH
53269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
53270: LD_ADDR_VAR 0 2
53274: PUSH
53275: LD_INT 22
53277: PUSH
53278: LD_OWVAR 2
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 33
53289: PUSH
53290: LD_INT 3
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PPUSH
53301: CALL_OW 69
53305: ST_TO_ADDR
// if not tmp then
53306: LD_VAR 0 2
53310: NOT
53311: IFFALSE 53315
// exit ;
53313: GO 53441
// side := 0 ;
53315: LD_ADDR_VAR 0 3
53319: PUSH
53320: LD_INT 0
53322: ST_TO_ADDR
// for i := 1 to 8 do
53323: LD_ADDR_VAR 0 1
53327: PUSH
53328: DOUBLE
53329: LD_INT 1
53331: DEC
53332: ST_TO_ADDR
53333: LD_INT 8
53335: PUSH
53336: FOR_TO
53337: IFFALSE 53385
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
53339: LD_OWVAR 2
53343: PUSH
53344: LD_VAR 0 1
53348: NONEQUAL
53349: PUSH
53350: LD_OWVAR 2
53354: PPUSH
53355: LD_VAR 0 1
53359: PPUSH
53360: CALL_OW 81
53364: PUSH
53365: LD_INT 2
53367: EQUAL
53368: AND
53369: IFFALSE 53383
// begin side := i ;
53371: LD_ADDR_VAR 0 3
53375: PUSH
53376: LD_VAR 0 1
53380: ST_TO_ADDR
// break ;
53381: GO 53385
// end ;
53383: GO 53336
53385: POP
53386: POP
// if not side then
53387: LD_VAR 0 3
53391: NOT
53392: IFFALSE 53396
// exit ;
53394: GO 53441
// for i := 1 to tmp do
53396: LD_ADDR_VAR 0 1
53400: PUSH
53401: DOUBLE
53402: LD_INT 1
53404: DEC
53405: ST_TO_ADDR
53406: LD_VAR 0 2
53410: PUSH
53411: FOR_TO
53412: IFFALSE 53439
// if Prob ( 60 ) then
53414: LD_INT 60
53416: PPUSH
53417: CALL_OW 13
53421: IFFALSE 53437
// SetSide ( i , side ) ;
53423: LD_VAR 0 1
53427: PPUSH
53428: LD_VAR 0 3
53432: PPUSH
53433: CALL_OW 235
53437: GO 53411
53439: POP
53440: POP
// end ;
53441: PPOPN 3
53443: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
53444: LD_EXP 96
53448: PUSH
53449: LD_EXP 109
53453: AND
53454: IFFALSE 53573
53456: GO 53458
53458: DISABLE
53459: LD_INT 0
53461: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
53462: LD_ADDR_VAR 0 1
53466: PUSH
53467: LD_INT 22
53469: PUSH
53470: LD_OWVAR 2
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 21
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 3
53491: PUSH
53492: LD_INT 23
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: LIST
53510: PPUSH
53511: CALL_OW 69
53515: PUSH
53516: FOR_IN
53517: IFFALSE 53571
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
53519: LD_VAR 0 1
53523: PPUSH
53524: CALL_OW 257
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: LD_INT 3
53537: PUSH
53538: LD_INT 4
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: IN
53547: IFFALSE 53569
// SetClass ( un , rand ( 1 , 4 ) ) ;
53549: LD_VAR 0 1
53553: PPUSH
53554: LD_INT 1
53556: PPUSH
53557: LD_INT 4
53559: PPUSH
53560: CALL_OW 12
53564: PPUSH
53565: CALL_OW 336
53569: GO 53516
53571: POP
53572: POP
// end ;
53573: PPOPN 1
53575: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
53576: LD_EXP 96
53580: PUSH
53581: LD_EXP 108
53585: AND
53586: IFFALSE 53665
53588: GO 53590
53590: DISABLE
53591: LD_INT 0
53593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
53594: LD_ADDR_VAR 0 1
53598: PUSH
53599: LD_INT 22
53601: PUSH
53602: LD_OWVAR 2
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 21
53613: PUSH
53614: LD_INT 3
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PPUSH
53625: CALL_OW 69
53629: ST_TO_ADDR
// if not tmp then
53630: LD_VAR 0 1
53634: NOT
53635: IFFALSE 53639
// exit ;
53637: GO 53665
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
53639: LD_VAR 0 1
53643: PUSH
53644: LD_INT 1
53646: PPUSH
53647: LD_VAR 0 1
53651: PPUSH
53652: CALL_OW 12
53656: ARRAY
53657: PPUSH
53658: LD_INT 100
53660: PPUSH
53661: CALL_OW 234
// end ;
53665: PPOPN 1
53667: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
53668: LD_EXP 96
53672: PUSH
53673: LD_EXP 110
53677: AND
53678: IFFALSE 53776
53680: GO 53682
53682: DISABLE
53683: LD_INT 0
53685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
53686: LD_ADDR_VAR 0 1
53690: PUSH
53691: LD_INT 22
53693: PUSH
53694: LD_OWVAR 2
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 21
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PPUSH
53717: CALL_OW 69
53721: ST_TO_ADDR
// if not tmp then
53722: LD_VAR 0 1
53726: NOT
53727: IFFALSE 53731
// exit ;
53729: GO 53776
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
53731: LD_VAR 0 1
53735: PUSH
53736: LD_INT 1
53738: PPUSH
53739: LD_VAR 0 1
53743: PPUSH
53744: CALL_OW 12
53748: ARRAY
53749: PPUSH
53750: LD_INT 1
53752: PPUSH
53753: LD_INT 4
53755: PPUSH
53756: CALL_OW 12
53760: PPUSH
53761: LD_INT 3000
53763: PPUSH
53764: LD_INT 9000
53766: PPUSH
53767: CALL_OW 12
53771: PPUSH
53772: CALL_OW 492
// end ;
53776: PPOPN 1
53778: END
// every 0 0$1 trigger StreamModeActive and sDepot do
53779: LD_EXP 96
53783: PUSH
53784: LD_EXP 111
53788: AND
53789: IFFALSE 53809
53791: GO 53793
53793: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
53794: LD_INT 1
53796: PPUSH
53797: LD_OWVAR 2
53801: PPUSH
53802: LD_INT 0
53804: PPUSH
53805: CALL_OW 324
53809: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
53810: LD_EXP 96
53814: PUSH
53815: LD_EXP 112
53819: AND
53820: IFFALSE 53903
53822: GO 53824
53824: DISABLE
53825: LD_INT 0
53827: PPUSH
53828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
53829: LD_ADDR_VAR 0 2
53833: PUSH
53834: LD_INT 22
53836: PUSH
53837: LD_OWVAR 2
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 21
53848: PUSH
53849: LD_INT 3
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PPUSH
53860: CALL_OW 69
53864: ST_TO_ADDR
// if not tmp then
53865: LD_VAR 0 2
53869: NOT
53870: IFFALSE 53874
// exit ;
53872: GO 53903
// for i in tmp do
53874: LD_ADDR_VAR 0 1
53878: PUSH
53879: LD_VAR 0 2
53883: PUSH
53884: FOR_IN
53885: IFFALSE 53901
// SetBLevel ( i , 10 ) ;
53887: LD_VAR 0 1
53891: PPUSH
53892: LD_INT 10
53894: PPUSH
53895: CALL_OW 241
53899: GO 53884
53901: POP
53902: POP
// end ;
53903: PPOPN 2
53905: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
53906: LD_EXP 96
53910: PUSH
53911: LD_EXP 113
53915: AND
53916: IFFALSE 54027
53918: GO 53920
53920: DISABLE
53921: LD_INT 0
53923: PPUSH
53924: PPUSH
53925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53926: LD_ADDR_VAR 0 3
53930: PUSH
53931: LD_INT 22
53933: PUSH
53934: LD_OWVAR 2
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 25
53945: PUSH
53946: LD_INT 1
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PPUSH
53957: CALL_OW 69
53961: ST_TO_ADDR
// if not tmp then
53962: LD_VAR 0 3
53966: NOT
53967: IFFALSE 53971
// exit ;
53969: GO 54027
// un := tmp [ rand ( 1 , tmp ) ] ;
53971: LD_ADDR_VAR 0 2
53975: PUSH
53976: LD_VAR 0 3
53980: PUSH
53981: LD_INT 1
53983: PPUSH
53984: LD_VAR 0 3
53988: PPUSH
53989: CALL_OW 12
53993: ARRAY
53994: ST_TO_ADDR
// if Crawls ( un ) then
53995: LD_VAR 0 2
53999: PPUSH
54000: CALL_OW 318
54004: IFFALSE 54015
// ComWalk ( un ) ;
54006: LD_VAR 0 2
54010: PPUSH
54011: CALL_OW 138
// SetClass ( un , class_sniper ) ;
54015: LD_VAR 0 2
54019: PPUSH
54020: LD_INT 5
54022: PPUSH
54023: CALL_OW 336
// end ;
54027: PPOPN 3
54029: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
54030: LD_EXP 96
54034: PUSH
54035: LD_EXP 114
54039: AND
54040: PUSH
54041: LD_OWVAR 67
54045: PUSH
54046: LD_INT 4
54048: LESS
54049: AND
54050: IFFALSE 54069
54052: GO 54054
54054: DISABLE
// begin Difficulty := Difficulty + 1 ;
54055: LD_ADDR_OWVAR 67
54059: PUSH
54060: LD_OWVAR 67
54064: PUSH
54065: LD_INT 1
54067: PLUS
54068: ST_TO_ADDR
// end ;
54069: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
54070: LD_EXP 96
54074: PUSH
54075: LD_EXP 115
54079: AND
54080: IFFALSE 54183
54082: GO 54084
54084: DISABLE
54085: LD_INT 0
54087: PPUSH
// begin for i := 1 to 5 do
54088: LD_ADDR_VAR 0 1
54092: PUSH
54093: DOUBLE
54094: LD_INT 1
54096: DEC
54097: ST_TO_ADDR
54098: LD_INT 5
54100: PUSH
54101: FOR_TO
54102: IFFALSE 54181
// begin uc_nation := nation_nature ;
54104: LD_ADDR_OWVAR 21
54108: PUSH
54109: LD_INT 0
54111: ST_TO_ADDR
// uc_side := 0 ;
54112: LD_ADDR_OWVAR 20
54116: PUSH
54117: LD_INT 0
54119: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
54120: LD_ADDR_OWVAR 29
54124: PUSH
54125: LD_INT 12
54127: PUSH
54128: LD_INT 12
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: ST_TO_ADDR
// hc_agressivity := 20 ;
54135: LD_ADDR_OWVAR 35
54139: PUSH
54140: LD_INT 20
54142: ST_TO_ADDR
// hc_class := class_tiger ;
54143: LD_ADDR_OWVAR 28
54147: PUSH
54148: LD_INT 14
54150: ST_TO_ADDR
// hc_gallery :=  ;
54151: LD_ADDR_OWVAR 33
54155: PUSH
54156: LD_STRING 
54158: ST_TO_ADDR
// hc_name :=  ;
54159: LD_ADDR_OWVAR 26
54163: PUSH
54164: LD_STRING 
54166: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
54167: CALL_OW 44
54171: PPUSH
54172: LD_INT 0
54174: PPUSH
54175: CALL_OW 51
// end ;
54179: GO 54101
54181: POP
54182: POP
// end ;
54183: PPOPN 1
54185: END
// every 0 0$1 trigger StreamModeActive and sBomb do
54186: LD_EXP 96
54190: PUSH
54191: LD_EXP 116
54195: AND
54196: IFFALSE 54205
54198: GO 54200
54200: DISABLE
// StreamSibBomb ;
54201: CALL 54206 0 0
54205: END
// export function StreamSibBomb ; var i , x , y ; begin
54206: LD_INT 0
54208: PPUSH
54209: PPUSH
54210: PPUSH
54211: PPUSH
// result := false ;
54212: LD_ADDR_VAR 0 1
54216: PUSH
54217: LD_INT 0
54219: ST_TO_ADDR
// for i := 1 to 16 do
54220: LD_ADDR_VAR 0 2
54224: PUSH
54225: DOUBLE
54226: LD_INT 1
54228: DEC
54229: ST_TO_ADDR
54230: LD_INT 16
54232: PUSH
54233: FOR_TO
54234: IFFALSE 54433
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
54236: LD_ADDR_VAR 0 3
54240: PUSH
54241: LD_INT 10
54243: PUSH
54244: LD_INT 20
54246: PUSH
54247: LD_INT 30
54249: PUSH
54250: LD_INT 40
54252: PUSH
54253: LD_INT 50
54255: PUSH
54256: LD_INT 60
54258: PUSH
54259: LD_INT 70
54261: PUSH
54262: LD_INT 80
54264: PUSH
54265: LD_INT 90
54267: PUSH
54268: LD_INT 100
54270: PUSH
54271: LD_INT 110
54273: PUSH
54274: LD_INT 120
54276: PUSH
54277: LD_INT 130
54279: PUSH
54280: LD_INT 140
54282: PUSH
54283: LD_INT 150
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 1
54305: PPUSH
54306: LD_INT 15
54308: PPUSH
54309: CALL_OW 12
54313: ARRAY
54314: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
54315: LD_ADDR_VAR 0 4
54319: PUSH
54320: LD_INT 10
54322: PUSH
54323: LD_INT 20
54325: PUSH
54326: LD_INT 30
54328: PUSH
54329: LD_INT 40
54331: PUSH
54332: LD_INT 50
54334: PUSH
54335: LD_INT 60
54337: PUSH
54338: LD_INT 70
54340: PUSH
54341: LD_INT 80
54343: PUSH
54344: LD_INT 90
54346: PUSH
54347: LD_INT 100
54349: PUSH
54350: LD_INT 110
54352: PUSH
54353: LD_INT 120
54355: PUSH
54356: LD_INT 130
54358: PUSH
54359: LD_INT 140
54361: PUSH
54362: LD_INT 150
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 1
54384: PPUSH
54385: LD_INT 15
54387: PPUSH
54388: CALL_OW 12
54392: ARRAY
54393: ST_TO_ADDR
// if ValidHex ( x , y ) then
54394: LD_VAR 0 3
54398: PPUSH
54399: LD_VAR 0 4
54403: PPUSH
54404: CALL_OW 488
54408: IFFALSE 54431
// begin result := [ x , y ] ;
54410: LD_ADDR_VAR 0 1
54414: PUSH
54415: LD_VAR 0 3
54419: PUSH
54420: LD_VAR 0 4
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: ST_TO_ADDR
// break ;
54429: GO 54433
// end ; end ;
54431: GO 54233
54433: POP
54434: POP
// if result then
54435: LD_VAR 0 1
54439: IFFALSE 54499
// begin ToLua ( playSibBomb() ) ;
54441: LD_STRING playSibBomb()
54443: PPUSH
54444: CALL_OW 559
// wait ( 0 0$14 ) ;
54448: LD_INT 490
54450: PPUSH
54451: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
54455: LD_VAR 0 1
54459: PUSH
54460: LD_INT 1
54462: ARRAY
54463: PPUSH
54464: LD_VAR 0 1
54468: PUSH
54469: LD_INT 2
54471: ARRAY
54472: PPUSH
54473: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
54477: LD_VAR 0 1
54481: PUSH
54482: LD_INT 1
54484: ARRAY
54485: PPUSH
54486: LD_VAR 0 1
54490: PUSH
54491: LD_INT 2
54493: ARRAY
54494: PPUSH
54495: CALL_OW 429
// end ; end ;
54499: LD_VAR 0 1
54503: RET
// every 0 0$1 trigger StreamModeActive and sReset do
54504: LD_EXP 96
54508: PUSH
54509: LD_EXP 118
54513: AND
54514: IFFALSE 54526
54516: GO 54518
54518: DISABLE
// YouLost (  ) ;
54519: LD_STRING 
54521: PPUSH
54522: CALL_OW 104
54526: END
// every 0 0$1 trigger StreamModeActive and sFog do
54527: LD_EXP 96
54531: PUSH
54532: LD_EXP 117
54536: AND
54537: IFFALSE 54551
54539: GO 54541
54541: DISABLE
// FogOff ( your_side ) ;
54542: LD_OWVAR 2
54546: PPUSH
54547: CALL_OW 344
54551: END
// every 0 0$1 trigger StreamModeActive and sSun do
54552: LD_EXP 96
54556: PUSH
54557: LD_EXP 119
54561: AND
54562: IFFALSE 54590
54564: GO 54566
54566: DISABLE
// begin solar_recharge_percent := 0 ;
54567: LD_ADDR_OWVAR 79
54571: PUSH
54572: LD_INT 0
54574: ST_TO_ADDR
// wait ( 5 5$00 ) ;
54575: LD_INT 10500
54577: PPUSH
54578: CALL_OW 67
// solar_recharge_percent := 100 ;
54582: LD_ADDR_OWVAR 79
54586: PUSH
54587: LD_INT 100
54589: ST_TO_ADDR
// end ;
54590: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
54591: LD_EXP 96
54595: PUSH
54596: LD_EXP 120
54600: AND
54601: IFFALSE 54840
54603: GO 54605
54605: DISABLE
54606: LD_INT 0
54608: PPUSH
54609: PPUSH
54610: PPUSH
// begin tmp := [ ] ;
54611: LD_ADDR_VAR 0 3
54615: PUSH
54616: EMPTY
54617: ST_TO_ADDR
// for i := 1 to 6 do
54618: LD_ADDR_VAR 0 1
54622: PUSH
54623: DOUBLE
54624: LD_INT 1
54626: DEC
54627: ST_TO_ADDR
54628: LD_INT 6
54630: PUSH
54631: FOR_TO
54632: IFFALSE 54737
// begin uc_nation := nation_nature ;
54634: LD_ADDR_OWVAR 21
54638: PUSH
54639: LD_INT 0
54641: ST_TO_ADDR
// uc_side := 0 ;
54642: LD_ADDR_OWVAR 20
54646: PUSH
54647: LD_INT 0
54649: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
54650: LD_ADDR_OWVAR 29
54654: PUSH
54655: LD_INT 12
54657: PUSH
54658: LD_INT 12
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: ST_TO_ADDR
// hc_agressivity := 20 ;
54665: LD_ADDR_OWVAR 35
54669: PUSH
54670: LD_INT 20
54672: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
54673: LD_ADDR_OWVAR 28
54677: PUSH
54678: LD_INT 17
54680: ST_TO_ADDR
// hc_gallery :=  ;
54681: LD_ADDR_OWVAR 33
54685: PUSH
54686: LD_STRING 
54688: ST_TO_ADDR
// hc_name :=  ;
54689: LD_ADDR_OWVAR 26
54693: PUSH
54694: LD_STRING 
54696: ST_TO_ADDR
// un := CreateHuman ;
54697: LD_ADDR_VAR 0 2
54701: PUSH
54702: CALL_OW 44
54706: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
54707: LD_VAR 0 2
54711: PPUSH
54712: LD_INT 1
54714: PPUSH
54715: CALL_OW 51
// tmp := tmp ^ un ;
54719: LD_ADDR_VAR 0 3
54723: PUSH
54724: LD_VAR 0 3
54728: PUSH
54729: LD_VAR 0 2
54733: ADD
54734: ST_TO_ADDR
// end ;
54735: GO 54631
54737: POP
54738: POP
// repeat wait ( 0 0$1 ) ;
54739: LD_INT 35
54741: PPUSH
54742: CALL_OW 67
// for un in tmp do
54746: LD_ADDR_VAR 0 2
54750: PUSH
54751: LD_VAR 0 3
54755: PUSH
54756: FOR_IN
54757: IFFALSE 54831
// begin if IsDead ( un ) then
54759: LD_VAR 0 2
54763: PPUSH
54764: CALL_OW 301
54768: IFFALSE 54788
// begin tmp := tmp diff un ;
54770: LD_ADDR_VAR 0 3
54774: PUSH
54775: LD_VAR 0 3
54779: PUSH
54780: LD_VAR 0 2
54784: DIFF
54785: ST_TO_ADDR
// continue ;
54786: GO 54756
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
54788: LD_VAR 0 2
54792: PPUSH
54793: LD_INT 3
54795: PUSH
54796: LD_INT 22
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PPUSH
54810: CALL_OW 69
54814: PPUSH
54815: LD_VAR 0 2
54819: PPUSH
54820: CALL_OW 74
54824: PPUSH
54825: CALL_OW 115
// end ;
54829: GO 54756
54831: POP
54832: POP
// until not tmp ;
54833: LD_VAR 0 3
54837: NOT
54838: IFFALSE 54739
// end ;
54840: PPOPN 3
54842: END
// every 0 0$1 trigger StreamModeActive and sTroll do
54843: LD_EXP 96
54847: PUSH
54848: LD_EXP 121
54852: AND
54853: IFFALSE 54907
54855: GO 54857
54857: DISABLE
// begin ToLua ( displayTroll(); ) ;
54858: LD_STRING displayTroll();
54860: PPUSH
54861: CALL_OW 559
// wait ( 3 3$00 ) ;
54865: LD_INT 6300
54867: PPUSH
54868: CALL_OW 67
// ToLua ( hideTroll(); ) ;
54872: LD_STRING hideTroll();
54874: PPUSH
54875: CALL_OW 559
// wait ( 1 1$00 ) ;
54879: LD_INT 2100
54881: PPUSH
54882: CALL_OW 67
// ToLua ( displayTroll(); ) ;
54886: LD_STRING displayTroll();
54888: PPUSH
54889: CALL_OW 559
// wait ( 1 1$00 ) ;
54893: LD_INT 2100
54895: PPUSH
54896: CALL_OW 67
// ToLua ( hideTroll(); ) ;
54900: LD_STRING hideTroll();
54902: PPUSH
54903: CALL_OW 559
// end ;
54907: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
54908: LD_EXP 96
54912: PUSH
54913: LD_EXP 122
54917: AND
54918: IFFALSE 54981
54920: GO 54922
54922: DISABLE
54923: LD_INT 0
54925: PPUSH
// begin p := 0 ;
54926: LD_ADDR_VAR 0 1
54930: PUSH
54931: LD_INT 0
54933: ST_TO_ADDR
// repeat game_speed := 1 ;
54934: LD_ADDR_OWVAR 65
54938: PUSH
54939: LD_INT 1
54941: ST_TO_ADDR
// wait ( 0 0$1 ) ;
54942: LD_INT 35
54944: PPUSH
54945: CALL_OW 67
// p := p + 1 ;
54949: LD_ADDR_VAR 0 1
54953: PUSH
54954: LD_VAR 0 1
54958: PUSH
54959: LD_INT 1
54961: PLUS
54962: ST_TO_ADDR
// until p >= 60 ;
54963: LD_VAR 0 1
54967: PUSH
54968: LD_INT 60
54970: GREATEREQUAL
54971: IFFALSE 54934
// game_speed := 4 ;
54973: LD_ADDR_OWVAR 65
54977: PUSH
54978: LD_INT 4
54980: ST_TO_ADDR
// end ;
54981: PPOPN 1
54983: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
54984: LD_EXP 96
54988: PUSH
54989: LD_EXP 123
54993: AND
54994: IFFALSE 55140
54996: GO 54998
54998: DISABLE
54999: LD_INT 0
55001: PPUSH
55002: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55003: LD_ADDR_VAR 0 1
55007: PUSH
55008: LD_INT 22
55010: PUSH
55011: LD_OWVAR 2
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 2
55022: PUSH
55023: LD_INT 30
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 30
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: LIST
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PPUSH
55052: CALL_OW 69
55056: ST_TO_ADDR
// if not depot then
55057: LD_VAR 0 1
55061: NOT
55062: IFFALSE 55066
// exit ;
55064: GO 55140
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
55066: LD_ADDR_VAR 0 2
55070: PUSH
55071: LD_VAR 0 1
55075: PUSH
55076: LD_INT 1
55078: PPUSH
55079: LD_VAR 0 1
55083: PPUSH
55084: CALL_OW 12
55088: ARRAY
55089: PPUSH
55090: CALL_OW 274
55094: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
55095: LD_VAR 0 2
55099: PPUSH
55100: LD_INT 1
55102: PPUSH
55103: LD_INT 0
55105: PPUSH
55106: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
55110: LD_VAR 0 2
55114: PPUSH
55115: LD_INT 2
55117: PPUSH
55118: LD_INT 0
55120: PPUSH
55121: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
55125: LD_VAR 0 2
55129: PPUSH
55130: LD_INT 3
55132: PPUSH
55133: LD_INT 0
55135: PPUSH
55136: CALL_OW 277
// end ;
55140: PPOPN 2
55142: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
55143: LD_EXP 96
55147: PUSH
55148: LD_EXP 124
55152: AND
55153: IFFALSE 55250
55155: GO 55157
55157: DISABLE
55158: LD_INT 0
55160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
55161: LD_ADDR_VAR 0 1
55165: PUSH
55166: LD_INT 22
55168: PUSH
55169: LD_OWVAR 2
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 21
55180: PUSH
55181: LD_INT 1
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 3
55190: PUSH
55191: LD_INT 23
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: LIST
55209: PPUSH
55210: CALL_OW 69
55214: ST_TO_ADDR
// if not tmp then
55215: LD_VAR 0 1
55219: NOT
55220: IFFALSE 55224
// exit ;
55222: GO 55250
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
55224: LD_VAR 0 1
55228: PUSH
55229: LD_INT 1
55231: PPUSH
55232: LD_VAR 0 1
55236: PPUSH
55237: CALL_OW 12
55241: ARRAY
55242: PPUSH
55243: LD_INT 200
55245: PPUSH
55246: CALL_OW 234
// end ;
55250: PPOPN 1
55252: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
55253: LD_EXP 96
55257: PUSH
55258: LD_EXP 125
55262: AND
55263: IFFALSE 55342
55265: GO 55267
55267: DISABLE
55268: LD_INT 0
55270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
55271: LD_ADDR_VAR 0 1
55275: PUSH
55276: LD_INT 22
55278: PUSH
55279: LD_OWVAR 2
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 21
55290: PUSH
55291: LD_INT 2
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PPUSH
55302: CALL_OW 69
55306: ST_TO_ADDR
// if not tmp then
55307: LD_VAR 0 1
55311: NOT
55312: IFFALSE 55316
// exit ;
55314: GO 55342
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
55316: LD_VAR 0 1
55320: PUSH
55321: LD_INT 1
55323: PPUSH
55324: LD_VAR 0 1
55328: PPUSH
55329: CALL_OW 12
55333: ARRAY
55334: PPUSH
55335: LD_INT 60
55337: PPUSH
55338: CALL_OW 234
// end ;
55342: PPOPN 1
55344: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
55345: LD_EXP 96
55349: PUSH
55350: LD_EXP 126
55354: AND
55355: IFFALSE 55454
55357: GO 55359
55359: DISABLE
55360: LD_INT 0
55362: PPUSH
55363: PPUSH
// begin enable ;
55364: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
55365: LD_ADDR_VAR 0 1
55369: PUSH
55370: LD_INT 22
55372: PUSH
55373: LD_OWVAR 2
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 61
55384: PUSH
55385: EMPTY
55386: LIST
55387: PUSH
55388: LD_INT 33
55390: PUSH
55391: LD_INT 2
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: LIST
55402: PPUSH
55403: CALL_OW 69
55407: ST_TO_ADDR
// if not tmp then
55408: LD_VAR 0 1
55412: NOT
55413: IFFALSE 55417
// exit ;
55415: GO 55454
// for i in tmp do
55417: LD_ADDR_VAR 0 2
55421: PUSH
55422: LD_VAR 0 1
55426: PUSH
55427: FOR_IN
55428: IFFALSE 55452
// if IsControledBy ( i ) then
55430: LD_VAR 0 2
55434: PPUSH
55435: CALL_OW 312
55439: IFFALSE 55450
// ComUnlink ( i ) ;
55441: LD_VAR 0 2
55445: PPUSH
55446: CALL_OW 136
55450: GO 55427
55452: POP
55453: POP
// end ;
55454: PPOPN 2
55456: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
55457: LD_EXP 96
55461: PUSH
55462: LD_EXP 127
55466: AND
55467: IFFALSE 55607
55469: GO 55471
55471: DISABLE
55472: LD_INT 0
55474: PPUSH
55475: PPUSH
// begin ToLua ( displayPowell(); ) ;
55476: LD_STRING displayPowell();
55478: PPUSH
55479: CALL_OW 559
// uc_side := 0 ;
55483: LD_ADDR_OWVAR 20
55487: PUSH
55488: LD_INT 0
55490: ST_TO_ADDR
// uc_nation := 2 ;
55491: LD_ADDR_OWVAR 21
55495: PUSH
55496: LD_INT 2
55498: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
55499: LD_ADDR_OWVAR 37
55503: PUSH
55504: LD_INT 14
55506: ST_TO_ADDR
// vc_engine := engine_siberite ;
55507: LD_ADDR_OWVAR 39
55511: PUSH
55512: LD_INT 3
55514: ST_TO_ADDR
// vc_control := control_apeman ;
55515: LD_ADDR_OWVAR 38
55519: PUSH
55520: LD_INT 5
55522: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
55523: LD_ADDR_OWVAR 40
55527: PUSH
55528: LD_INT 29
55530: ST_TO_ADDR
// un := CreateVehicle ;
55531: LD_ADDR_VAR 0 2
55535: PUSH
55536: CALL_OW 45
55540: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55541: LD_VAR 0 2
55545: PPUSH
55546: LD_INT 1
55548: PPUSH
55549: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55553: LD_INT 35
55555: PPUSH
55556: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55560: LD_VAR 0 2
55564: PPUSH
55565: LD_INT 22
55567: PUSH
55568: LD_OWVAR 2
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PPUSH
55577: CALL_OW 69
55581: PPUSH
55582: LD_VAR 0 2
55586: PPUSH
55587: CALL_OW 74
55591: PPUSH
55592: CALL_OW 115
// until IsDead ( un ) ;
55596: LD_VAR 0 2
55600: PPUSH
55601: CALL_OW 301
55605: IFFALSE 55553
// end ;
55607: PPOPN 2
55609: END
// every 0 0$1 trigger StreamModeActive and sStu do
55610: LD_EXP 96
55614: PUSH
55615: LD_EXP 135
55619: AND
55620: IFFALSE 55636
55622: GO 55624
55624: DISABLE
// begin ToLua ( displayStucuk(); ) ;
55625: LD_STRING displayStucuk();
55627: PPUSH
55628: CALL_OW 559
// ResetFog ;
55632: CALL_OW 335
// end ;
55636: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
55637: LD_EXP 96
55641: PUSH
55642: LD_EXP 128
55646: AND
55647: IFFALSE 55788
55649: GO 55651
55651: DISABLE
55652: LD_INT 0
55654: PPUSH
55655: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55656: LD_ADDR_VAR 0 2
55660: PUSH
55661: LD_INT 22
55663: PUSH
55664: LD_OWVAR 2
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 21
55675: PUSH
55676: LD_INT 1
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PPUSH
55687: CALL_OW 69
55691: ST_TO_ADDR
// if not tmp then
55692: LD_VAR 0 2
55696: NOT
55697: IFFALSE 55701
// exit ;
55699: GO 55788
// un := tmp [ rand ( 1 , tmp ) ] ;
55701: LD_ADDR_VAR 0 1
55705: PUSH
55706: LD_VAR 0 2
55710: PUSH
55711: LD_INT 1
55713: PPUSH
55714: LD_VAR 0 2
55718: PPUSH
55719: CALL_OW 12
55723: ARRAY
55724: ST_TO_ADDR
// SetSide ( un , 0 ) ;
55725: LD_VAR 0 1
55729: PPUSH
55730: LD_INT 0
55732: PPUSH
55733: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
55737: LD_VAR 0 1
55741: PPUSH
55742: LD_OWVAR 3
55746: PUSH
55747: LD_VAR 0 1
55751: DIFF
55752: PPUSH
55753: LD_VAR 0 1
55757: PPUSH
55758: CALL_OW 74
55762: PPUSH
55763: CALL_OW 115
// wait ( 0 0$20 ) ;
55767: LD_INT 700
55769: PPUSH
55770: CALL_OW 67
// SetSide ( un , your_side ) ;
55774: LD_VAR 0 1
55778: PPUSH
55779: LD_OWVAR 2
55783: PPUSH
55784: CALL_OW 235
// end ;
55788: PPOPN 2
55790: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
55791: LD_EXP 96
55795: PUSH
55796: LD_EXP 129
55800: AND
55801: IFFALSE 55907
55803: GO 55805
55805: DISABLE
55806: LD_INT 0
55808: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55809: LD_ADDR_VAR 0 1
55813: PUSH
55814: LD_INT 22
55816: PUSH
55817: LD_OWVAR 2
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 2
55828: PUSH
55829: LD_INT 30
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 30
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: LIST
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PPUSH
55858: CALL_OW 69
55862: ST_TO_ADDR
// if not depot then
55863: LD_VAR 0 1
55867: NOT
55868: IFFALSE 55872
// exit ;
55870: GO 55907
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
55872: LD_VAR 0 1
55876: PUSH
55877: LD_INT 1
55879: ARRAY
55880: PPUSH
55881: CALL_OW 250
55885: PPUSH
55886: LD_VAR 0 1
55890: PUSH
55891: LD_INT 1
55893: ARRAY
55894: PPUSH
55895: CALL_OW 251
55899: PPUSH
55900: LD_INT 70
55902: PPUSH
55903: CALL_OW 495
// end ;
55907: PPOPN 1
55909: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
55910: LD_EXP 96
55914: PUSH
55915: LD_EXP 130
55919: AND
55920: IFFALSE 56131
55922: GO 55924
55924: DISABLE
55925: LD_INT 0
55927: PPUSH
55928: PPUSH
55929: PPUSH
55930: PPUSH
55931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55932: LD_ADDR_VAR 0 5
55936: PUSH
55937: LD_INT 22
55939: PUSH
55940: LD_OWVAR 2
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 21
55951: PUSH
55952: LD_INT 1
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PPUSH
55963: CALL_OW 69
55967: ST_TO_ADDR
// if not tmp then
55968: LD_VAR 0 5
55972: NOT
55973: IFFALSE 55977
// exit ;
55975: GO 56131
// for i in tmp do
55977: LD_ADDR_VAR 0 1
55981: PUSH
55982: LD_VAR 0 5
55986: PUSH
55987: FOR_IN
55988: IFFALSE 56129
// begin d := rand ( 0 , 5 ) ;
55990: LD_ADDR_VAR 0 4
55994: PUSH
55995: LD_INT 0
55997: PPUSH
55998: LD_INT 5
56000: PPUSH
56001: CALL_OW 12
56005: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
56006: LD_ADDR_VAR 0 2
56010: PUSH
56011: LD_VAR 0 1
56015: PPUSH
56016: CALL_OW 250
56020: PPUSH
56021: LD_VAR 0 4
56025: PPUSH
56026: LD_INT 3
56028: PPUSH
56029: LD_INT 12
56031: PPUSH
56032: CALL_OW 12
56036: PPUSH
56037: CALL_OW 272
56041: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
56042: LD_ADDR_VAR 0 3
56046: PUSH
56047: LD_VAR 0 1
56051: PPUSH
56052: CALL_OW 251
56056: PPUSH
56057: LD_VAR 0 4
56061: PPUSH
56062: LD_INT 3
56064: PPUSH
56065: LD_INT 12
56067: PPUSH
56068: CALL_OW 12
56072: PPUSH
56073: CALL_OW 273
56077: ST_TO_ADDR
// if ValidHex ( x , y ) then
56078: LD_VAR 0 2
56082: PPUSH
56083: LD_VAR 0 3
56087: PPUSH
56088: CALL_OW 488
56092: IFFALSE 56127
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
56094: LD_VAR 0 1
56098: PPUSH
56099: LD_VAR 0 2
56103: PPUSH
56104: LD_VAR 0 3
56108: PPUSH
56109: LD_INT 3
56111: PPUSH
56112: LD_INT 6
56114: PPUSH
56115: CALL_OW 12
56119: PPUSH
56120: LD_INT 1
56122: PPUSH
56123: CALL_OW 483
// end ;
56127: GO 55987
56129: POP
56130: POP
// end ;
56131: PPOPN 5
56133: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
56134: LD_EXP 96
56138: PUSH
56139: LD_EXP 131
56143: AND
56144: IFFALSE 56238
56146: GO 56148
56148: DISABLE
56149: LD_INT 0
56151: PPUSH
56152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
56153: LD_ADDR_VAR 0 2
56157: PUSH
56158: LD_INT 22
56160: PUSH
56161: LD_OWVAR 2
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 32
56172: PUSH
56173: LD_INT 1
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 21
56182: PUSH
56183: LD_INT 2
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: LIST
56194: PPUSH
56195: CALL_OW 69
56199: ST_TO_ADDR
// if not tmp then
56200: LD_VAR 0 2
56204: NOT
56205: IFFALSE 56209
// exit ;
56207: GO 56238
// for i in tmp do
56209: LD_ADDR_VAR 0 1
56213: PUSH
56214: LD_VAR 0 2
56218: PUSH
56219: FOR_IN
56220: IFFALSE 56236
// SetFuel ( i , 0 ) ;
56222: LD_VAR 0 1
56226: PPUSH
56227: LD_INT 0
56229: PPUSH
56230: CALL_OW 240
56234: GO 56219
56236: POP
56237: POP
// end ;
56238: PPOPN 2
56240: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
56241: LD_EXP 96
56245: PUSH
56246: LD_EXP 132
56250: AND
56251: IFFALSE 56317
56253: GO 56255
56255: DISABLE
56256: LD_INT 0
56258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
56259: LD_ADDR_VAR 0 1
56263: PUSH
56264: LD_INT 22
56266: PUSH
56267: LD_OWVAR 2
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 30
56278: PUSH
56279: LD_INT 29
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PPUSH
56290: CALL_OW 69
56294: ST_TO_ADDR
// if not tmp then
56295: LD_VAR 0 1
56299: NOT
56300: IFFALSE 56304
// exit ;
56302: GO 56317
// DestroyUnit ( tmp [ 1 ] ) ;
56304: LD_VAR 0 1
56308: PUSH
56309: LD_INT 1
56311: ARRAY
56312: PPUSH
56313: CALL_OW 65
// end ;
56317: PPOPN 1
56319: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
56320: LD_EXP 96
56324: PUSH
56325: LD_EXP 134
56329: AND
56330: IFFALSE 56459
56332: GO 56334
56334: DISABLE
56335: LD_INT 0
56337: PPUSH
// begin uc_side := 0 ;
56338: LD_ADDR_OWVAR 20
56342: PUSH
56343: LD_INT 0
56345: ST_TO_ADDR
// uc_nation := nation_arabian ;
56346: LD_ADDR_OWVAR 21
56350: PUSH
56351: LD_INT 2
56353: ST_TO_ADDR
// hc_gallery :=  ;
56354: LD_ADDR_OWVAR 33
56358: PUSH
56359: LD_STRING 
56361: ST_TO_ADDR
// hc_name :=  ;
56362: LD_ADDR_OWVAR 26
56366: PUSH
56367: LD_STRING 
56369: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
56370: LD_INT 1
56372: PPUSH
56373: LD_INT 11
56375: PPUSH
56376: LD_INT 10
56378: PPUSH
56379: CALL_OW 380
// un := CreateHuman ;
56383: LD_ADDR_VAR 0 1
56387: PUSH
56388: CALL_OW 44
56392: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56393: LD_VAR 0 1
56397: PPUSH
56398: LD_INT 1
56400: PPUSH
56401: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
56405: LD_INT 35
56407: PPUSH
56408: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
56412: LD_VAR 0 1
56416: PPUSH
56417: LD_INT 22
56419: PUSH
56420: LD_OWVAR 2
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PPUSH
56429: CALL_OW 69
56433: PPUSH
56434: LD_VAR 0 1
56438: PPUSH
56439: CALL_OW 74
56443: PPUSH
56444: CALL_OW 115
// until IsDead ( un ) ;
56448: LD_VAR 0 1
56452: PPUSH
56453: CALL_OW 301
56457: IFFALSE 56405
// end ;
56459: PPOPN 1
56461: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
56462: LD_EXP 96
56466: PUSH
56467: LD_EXP 136
56471: AND
56472: IFFALSE 56484
56474: GO 56476
56476: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
56477: LD_STRING earthquake(getX(game), 0, 32)
56479: PPUSH
56480: CALL_OW 559
56484: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
56485: LD_EXP 96
56489: PUSH
56490: LD_EXP 137
56494: AND
56495: IFFALSE 56586
56497: GO 56499
56499: DISABLE
56500: LD_INT 0
56502: PPUSH
// begin enable ;
56503: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
56504: LD_ADDR_VAR 0 1
56508: PUSH
56509: LD_INT 22
56511: PUSH
56512: LD_OWVAR 2
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 21
56523: PUSH
56524: LD_INT 2
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 33
56533: PUSH
56534: LD_INT 3
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: LIST
56545: PPUSH
56546: CALL_OW 69
56550: ST_TO_ADDR
// if not tmp then
56551: LD_VAR 0 1
56555: NOT
56556: IFFALSE 56560
// exit ;
56558: GO 56586
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56560: LD_VAR 0 1
56564: PUSH
56565: LD_INT 1
56567: PPUSH
56568: LD_VAR 0 1
56572: PPUSH
56573: CALL_OW 12
56577: ARRAY
56578: PPUSH
56579: LD_INT 1
56581: PPUSH
56582: CALL_OW 234
// end ;
56586: PPOPN 1
56588: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
56589: LD_EXP 96
56593: PUSH
56594: LD_EXP 138
56598: AND
56599: IFFALSE 56740
56601: GO 56603
56603: DISABLE
56604: LD_INT 0
56606: PPUSH
56607: PPUSH
56608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56609: LD_ADDR_VAR 0 3
56613: PUSH
56614: LD_INT 22
56616: PUSH
56617: LD_OWVAR 2
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 25
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PPUSH
56640: CALL_OW 69
56644: ST_TO_ADDR
// if not tmp then
56645: LD_VAR 0 3
56649: NOT
56650: IFFALSE 56654
// exit ;
56652: GO 56740
// un := tmp [ rand ( 1 , tmp ) ] ;
56654: LD_ADDR_VAR 0 2
56658: PUSH
56659: LD_VAR 0 3
56663: PUSH
56664: LD_INT 1
56666: PPUSH
56667: LD_VAR 0 3
56671: PPUSH
56672: CALL_OW 12
56676: ARRAY
56677: ST_TO_ADDR
// if Crawls ( un ) then
56678: LD_VAR 0 2
56682: PPUSH
56683: CALL_OW 318
56687: IFFALSE 56698
// ComWalk ( un ) ;
56689: LD_VAR 0 2
56693: PPUSH
56694: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
56698: LD_VAR 0 2
56702: PPUSH
56703: LD_INT 9
56705: PPUSH
56706: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
56710: LD_INT 28
56712: PPUSH
56713: LD_OWVAR 2
56717: PPUSH
56718: LD_INT 2
56720: PPUSH
56721: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
56725: LD_INT 29
56727: PPUSH
56728: LD_OWVAR 2
56732: PPUSH
56733: LD_INT 2
56735: PPUSH
56736: CALL_OW 322
// end ;
56740: PPOPN 3
56742: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
56743: LD_EXP 96
56747: PUSH
56748: LD_EXP 139
56752: AND
56753: IFFALSE 56864
56755: GO 56757
56757: DISABLE
56758: LD_INT 0
56760: PPUSH
56761: PPUSH
56762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56763: LD_ADDR_VAR 0 3
56767: PUSH
56768: LD_INT 22
56770: PUSH
56771: LD_OWVAR 2
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 25
56782: PUSH
56783: LD_INT 1
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PPUSH
56794: CALL_OW 69
56798: ST_TO_ADDR
// if not tmp then
56799: LD_VAR 0 3
56803: NOT
56804: IFFALSE 56808
// exit ;
56806: GO 56864
// un := tmp [ rand ( 1 , tmp ) ] ;
56808: LD_ADDR_VAR 0 2
56812: PUSH
56813: LD_VAR 0 3
56817: PUSH
56818: LD_INT 1
56820: PPUSH
56821: LD_VAR 0 3
56825: PPUSH
56826: CALL_OW 12
56830: ARRAY
56831: ST_TO_ADDR
// if Crawls ( un ) then
56832: LD_VAR 0 2
56836: PPUSH
56837: CALL_OW 318
56841: IFFALSE 56852
// ComWalk ( un ) ;
56843: LD_VAR 0 2
56847: PPUSH
56848: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56852: LD_VAR 0 2
56856: PPUSH
56857: LD_INT 8
56859: PPUSH
56860: CALL_OW 336
// end ;
56864: PPOPN 3
56866: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
56867: LD_EXP 96
56871: PUSH
56872: LD_EXP 140
56876: AND
56877: IFFALSE 57021
56879: GO 56881
56881: DISABLE
56882: LD_INT 0
56884: PPUSH
56885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
56886: LD_ADDR_VAR 0 2
56890: PUSH
56891: LD_INT 22
56893: PUSH
56894: LD_OWVAR 2
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 21
56905: PUSH
56906: LD_INT 2
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 2
56915: PUSH
56916: LD_INT 34
56918: PUSH
56919: LD_INT 12
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 34
56928: PUSH
56929: LD_INT 51
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 34
56938: PUSH
56939: LD_INT 32
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: LIST
56956: PPUSH
56957: CALL_OW 69
56961: ST_TO_ADDR
// if not tmp then
56962: LD_VAR 0 2
56966: NOT
56967: IFFALSE 56971
// exit ;
56969: GO 57021
// for i in tmp do
56971: LD_ADDR_VAR 0 1
56975: PUSH
56976: LD_VAR 0 2
56980: PUSH
56981: FOR_IN
56982: IFFALSE 57019
// if GetCargo ( i , mat_artifact ) = 0 then
56984: LD_VAR 0 1
56988: PPUSH
56989: LD_INT 4
56991: PPUSH
56992: CALL_OW 289
56996: PUSH
56997: LD_INT 0
56999: EQUAL
57000: IFFALSE 57017
// SetCargo ( i , mat_siberit , 100 ) ;
57002: LD_VAR 0 1
57006: PPUSH
57007: LD_INT 3
57009: PPUSH
57010: LD_INT 100
57012: PPUSH
57013: CALL_OW 290
57017: GO 56981
57019: POP
57020: POP
// end ;
57021: PPOPN 2
57023: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
57024: LD_EXP 96
57028: PUSH
57029: LD_EXP 141
57033: AND
57034: IFFALSE 57217
57036: GO 57038
57038: DISABLE
57039: LD_INT 0
57041: PPUSH
57042: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57043: LD_ADDR_VAR 0 2
57047: PUSH
57048: LD_INT 22
57050: PUSH
57051: LD_OWVAR 2
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PPUSH
57060: CALL_OW 69
57064: ST_TO_ADDR
// if not tmp then
57065: LD_VAR 0 2
57069: NOT
57070: IFFALSE 57074
// exit ;
57072: GO 57217
// for i := 1 to 2 do
57074: LD_ADDR_VAR 0 1
57078: PUSH
57079: DOUBLE
57080: LD_INT 1
57082: DEC
57083: ST_TO_ADDR
57084: LD_INT 2
57086: PUSH
57087: FOR_TO
57088: IFFALSE 57215
// begin uc_side := your_side ;
57090: LD_ADDR_OWVAR 20
57094: PUSH
57095: LD_OWVAR 2
57099: ST_TO_ADDR
// uc_nation := nation_american ;
57100: LD_ADDR_OWVAR 21
57104: PUSH
57105: LD_INT 1
57107: ST_TO_ADDR
// vc_chassis := us_morphling ;
57108: LD_ADDR_OWVAR 37
57112: PUSH
57113: LD_INT 5
57115: ST_TO_ADDR
// vc_engine := engine_siberite ;
57116: LD_ADDR_OWVAR 39
57120: PUSH
57121: LD_INT 3
57123: ST_TO_ADDR
// vc_control := control_computer ;
57124: LD_ADDR_OWVAR 38
57128: PUSH
57129: LD_INT 3
57131: ST_TO_ADDR
// vc_weapon := us_double_laser ;
57132: LD_ADDR_OWVAR 40
57136: PUSH
57137: LD_INT 10
57139: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
57140: LD_VAR 0 2
57144: PUSH
57145: LD_INT 1
57147: ARRAY
57148: PPUSH
57149: CALL_OW 310
57153: NOT
57154: IFFALSE 57201
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
57156: CALL_OW 45
57160: PPUSH
57161: LD_VAR 0 2
57165: PUSH
57166: LD_INT 1
57168: ARRAY
57169: PPUSH
57170: CALL_OW 250
57174: PPUSH
57175: LD_VAR 0 2
57179: PUSH
57180: LD_INT 1
57182: ARRAY
57183: PPUSH
57184: CALL_OW 251
57188: PPUSH
57189: LD_INT 12
57191: PPUSH
57192: LD_INT 1
57194: PPUSH
57195: CALL_OW 50
57199: GO 57213
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
57201: CALL_OW 45
57205: PPUSH
57206: LD_INT 1
57208: PPUSH
57209: CALL_OW 51
// end ;
57213: GO 57087
57215: POP
57216: POP
// end ;
57217: PPOPN 2
57219: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
57220: LD_EXP 96
57224: PUSH
57225: LD_EXP 142
57229: AND
57230: IFFALSE 57452
57232: GO 57234
57234: DISABLE
57235: LD_INT 0
57237: PPUSH
57238: PPUSH
57239: PPUSH
57240: PPUSH
57241: PPUSH
57242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57243: LD_ADDR_VAR 0 6
57247: PUSH
57248: LD_INT 22
57250: PUSH
57251: LD_OWVAR 2
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 21
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 3
57272: PUSH
57273: LD_INT 23
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: LIST
57291: PPUSH
57292: CALL_OW 69
57296: ST_TO_ADDR
// if not tmp then
57297: LD_VAR 0 6
57301: NOT
57302: IFFALSE 57306
// exit ;
57304: GO 57452
// s1 := rand ( 1 , 4 ) ;
57306: LD_ADDR_VAR 0 2
57310: PUSH
57311: LD_INT 1
57313: PPUSH
57314: LD_INT 4
57316: PPUSH
57317: CALL_OW 12
57321: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
57322: LD_ADDR_VAR 0 4
57326: PUSH
57327: LD_VAR 0 6
57331: PUSH
57332: LD_INT 1
57334: ARRAY
57335: PPUSH
57336: LD_VAR 0 2
57340: PPUSH
57341: CALL_OW 259
57345: ST_TO_ADDR
// if s1 = 1 then
57346: LD_VAR 0 2
57350: PUSH
57351: LD_INT 1
57353: EQUAL
57354: IFFALSE 57374
// s2 := rand ( 2 , 4 ) else
57356: LD_ADDR_VAR 0 3
57360: PUSH
57361: LD_INT 2
57363: PPUSH
57364: LD_INT 4
57366: PPUSH
57367: CALL_OW 12
57371: ST_TO_ADDR
57372: GO 57382
// s2 := 1 ;
57374: LD_ADDR_VAR 0 3
57378: PUSH
57379: LD_INT 1
57381: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
57382: LD_ADDR_VAR 0 5
57386: PUSH
57387: LD_VAR 0 6
57391: PUSH
57392: LD_INT 1
57394: ARRAY
57395: PPUSH
57396: LD_VAR 0 3
57400: PPUSH
57401: CALL_OW 259
57405: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
57406: LD_VAR 0 6
57410: PUSH
57411: LD_INT 1
57413: ARRAY
57414: PPUSH
57415: LD_VAR 0 2
57419: PPUSH
57420: LD_VAR 0 5
57424: PPUSH
57425: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
57429: LD_VAR 0 6
57433: PUSH
57434: LD_INT 1
57436: ARRAY
57437: PPUSH
57438: LD_VAR 0 3
57442: PPUSH
57443: LD_VAR 0 4
57447: PPUSH
57448: CALL_OW 237
// end ;
57452: PPOPN 6
57454: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
57455: LD_EXP 96
57459: PUSH
57460: LD_EXP 143
57464: AND
57465: IFFALSE 57544
57467: GO 57469
57469: DISABLE
57470: LD_INT 0
57472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
57473: LD_ADDR_VAR 0 1
57477: PUSH
57478: LD_INT 22
57480: PUSH
57481: LD_OWVAR 2
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 30
57492: PUSH
57493: LD_INT 3
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PPUSH
57504: CALL_OW 69
57508: ST_TO_ADDR
// if not tmp then
57509: LD_VAR 0 1
57513: NOT
57514: IFFALSE 57518
// exit ;
57516: GO 57544
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
57518: LD_VAR 0 1
57522: PUSH
57523: LD_INT 1
57525: PPUSH
57526: LD_VAR 0 1
57530: PPUSH
57531: CALL_OW 12
57535: ARRAY
57536: PPUSH
57537: LD_INT 1
57539: PPUSH
57540: CALL_OW 234
// end ;
57544: PPOPN 1
57546: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
57547: LD_EXP 96
57551: PUSH
57552: LD_EXP 144
57556: AND
57557: IFFALSE 57669
57559: GO 57561
57561: DISABLE
57562: LD_INT 0
57564: PPUSH
57565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
57566: LD_ADDR_VAR 0 2
57570: PUSH
57571: LD_INT 22
57573: PUSH
57574: LD_OWVAR 2
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: LD_INT 30
57588: PUSH
57589: LD_INT 27
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 30
57598: PUSH
57599: LD_INT 26
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 30
57608: PUSH
57609: LD_INT 28
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PPUSH
57626: CALL_OW 69
57630: ST_TO_ADDR
// if not tmp then
57631: LD_VAR 0 2
57635: NOT
57636: IFFALSE 57640
// exit ;
57638: GO 57669
// for i in tmp do
57640: LD_ADDR_VAR 0 1
57644: PUSH
57645: LD_VAR 0 2
57649: PUSH
57650: FOR_IN
57651: IFFALSE 57667
// SetLives ( i , 1 ) ;
57653: LD_VAR 0 1
57657: PPUSH
57658: LD_INT 1
57660: PPUSH
57661: CALL_OW 234
57665: GO 57650
57667: POP
57668: POP
// end ;
57669: PPOPN 2
57671: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
57672: LD_EXP 96
57676: PUSH
57677: LD_EXP 145
57681: AND
57682: IFFALSE 57969
57684: GO 57686
57686: DISABLE
57687: LD_INT 0
57689: PPUSH
57690: PPUSH
57691: PPUSH
// begin i := rand ( 1 , 7 ) ;
57692: LD_ADDR_VAR 0 1
57696: PUSH
57697: LD_INT 1
57699: PPUSH
57700: LD_INT 7
57702: PPUSH
57703: CALL_OW 12
57707: ST_TO_ADDR
// case i of 1 :
57708: LD_VAR 0 1
57712: PUSH
57713: LD_INT 1
57715: DOUBLE
57716: EQUAL
57717: IFTRUE 57721
57719: GO 57731
57721: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
57722: LD_STRING earthquake(getX(game), 0, 32)
57724: PPUSH
57725: CALL_OW 559
57729: GO 57969
57731: LD_INT 2
57733: DOUBLE
57734: EQUAL
57735: IFTRUE 57739
57737: GO 57753
57739: POP
// begin ToLua ( displayStucuk(); ) ;
57740: LD_STRING displayStucuk();
57742: PPUSH
57743: CALL_OW 559
// ResetFog ;
57747: CALL_OW 335
// end ; 3 :
57751: GO 57969
57753: LD_INT 3
57755: DOUBLE
57756: EQUAL
57757: IFTRUE 57761
57759: GO 57865
57761: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57762: LD_ADDR_VAR 0 2
57766: PUSH
57767: LD_INT 22
57769: PUSH
57770: LD_OWVAR 2
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 25
57781: PUSH
57782: LD_INT 1
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PPUSH
57793: CALL_OW 69
57797: ST_TO_ADDR
// if not tmp then
57798: LD_VAR 0 2
57802: NOT
57803: IFFALSE 57807
// exit ;
57805: GO 57969
// un := tmp [ rand ( 1 , tmp ) ] ;
57807: LD_ADDR_VAR 0 3
57811: PUSH
57812: LD_VAR 0 2
57816: PUSH
57817: LD_INT 1
57819: PPUSH
57820: LD_VAR 0 2
57824: PPUSH
57825: CALL_OW 12
57829: ARRAY
57830: ST_TO_ADDR
// if Crawls ( un ) then
57831: LD_VAR 0 3
57835: PPUSH
57836: CALL_OW 318
57840: IFFALSE 57851
// ComWalk ( un ) ;
57842: LD_VAR 0 3
57846: PPUSH
57847: CALL_OW 138
// SetClass ( un , class_mortar ) ;
57851: LD_VAR 0 3
57855: PPUSH
57856: LD_INT 8
57858: PPUSH
57859: CALL_OW 336
// end ; 4 :
57863: GO 57969
57865: LD_INT 4
57867: DOUBLE
57868: EQUAL
57869: IFTRUE 57873
57871: GO 57947
57873: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57874: LD_ADDR_VAR 0 2
57878: PUSH
57879: LD_INT 22
57881: PUSH
57882: LD_OWVAR 2
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 30
57893: PUSH
57894: LD_INT 29
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PPUSH
57905: CALL_OW 69
57909: ST_TO_ADDR
// if not tmp then
57910: LD_VAR 0 2
57914: NOT
57915: IFFALSE 57919
// exit ;
57917: GO 57969
// CenterNowOnUnits ( tmp [ 1 ] ) ;
57919: LD_VAR 0 2
57923: PUSH
57924: LD_INT 1
57926: ARRAY
57927: PPUSH
57928: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
57932: LD_VAR 0 2
57936: PUSH
57937: LD_INT 1
57939: ARRAY
57940: PPUSH
57941: CALL_OW 65
// end ; 5 .. 7 :
57945: GO 57969
57947: LD_INT 5
57949: DOUBLE
57950: GREATEREQUAL
57951: IFFALSE 57959
57953: LD_INT 7
57955: DOUBLE
57956: LESSEQUAL
57957: IFTRUE 57961
57959: GO 57968
57961: POP
// StreamSibBomb ; end ;
57962: CALL 54206 0 0
57966: GO 57969
57968: POP
// end ;
57969: PPOPN 3
57971: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
57972: LD_EXP 96
57976: PUSH
57977: LD_EXP 146
57981: AND
57982: IFFALSE 58138
57984: GO 57986
57986: DISABLE
57987: LD_INT 0
57989: PPUSH
57990: PPUSH
57991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
57992: LD_ADDR_VAR 0 2
57996: PUSH
57997: LD_INT 81
57999: PUSH
58000: LD_OWVAR 2
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 2
58011: PUSH
58012: LD_INT 21
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 21
58024: PUSH
58025: LD_INT 2
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: LIST
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PPUSH
58041: CALL_OW 69
58045: ST_TO_ADDR
// if not tmp then
58046: LD_VAR 0 2
58050: NOT
58051: IFFALSE 58055
// exit ;
58053: GO 58138
// p := 0 ;
58055: LD_ADDR_VAR 0 3
58059: PUSH
58060: LD_INT 0
58062: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
58063: LD_INT 35
58065: PPUSH
58066: CALL_OW 67
// p := p + 1 ;
58070: LD_ADDR_VAR 0 3
58074: PUSH
58075: LD_VAR 0 3
58079: PUSH
58080: LD_INT 1
58082: PLUS
58083: ST_TO_ADDR
// for i in tmp do
58084: LD_ADDR_VAR 0 1
58088: PUSH
58089: LD_VAR 0 2
58093: PUSH
58094: FOR_IN
58095: IFFALSE 58126
// if GetLives ( i ) < 1000 then
58097: LD_VAR 0 1
58101: PPUSH
58102: CALL_OW 256
58106: PUSH
58107: LD_INT 1000
58109: LESS
58110: IFFALSE 58124
// SetLives ( i , 1000 ) ;
58112: LD_VAR 0 1
58116: PPUSH
58117: LD_INT 1000
58119: PPUSH
58120: CALL_OW 234
58124: GO 58094
58126: POP
58127: POP
// until p > 20 ;
58128: LD_VAR 0 3
58132: PUSH
58133: LD_INT 20
58135: GREATER
58136: IFFALSE 58063
// end ;
58138: PPOPN 3
58140: END
// every 0 0$1 trigger StreamModeActive and sTime do
58141: LD_EXP 96
58145: PUSH
58146: LD_EXP 147
58150: AND
58151: IFFALSE 58186
58153: GO 58155
58155: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
58156: LD_INT 28
58158: PPUSH
58159: LD_OWVAR 2
58163: PPUSH
58164: LD_INT 2
58166: PPUSH
58167: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
58171: LD_INT 30
58173: PPUSH
58174: LD_OWVAR 2
58178: PPUSH
58179: LD_INT 2
58181: PPUSH
58182: CALL_OW 322
// end ;
58186: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
58187: LD_EXP 96
58191: PUSH
58192: LD_EXP 148
58196: AND
58197: IFFALSE 58318
58199: GO 58201
58201: DISABLE
58202: LD_INT 0
58204: PPUSH
58205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58206: LD_ADDR_VAR 0 2
58210: PUSH
58211: LD_INT 22
58213: PUSH
58214: LD_OWVAR 2
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 21
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 3
58235: PUSH
58236: LD_INT 23
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: LIST
58254: PPUSH
58255: CALL_OW 69
58259: ST_TO_ADDR
// if not tmp then
58260: LD_VAR 0 2
58264: NOT
58265: IFFALSE 58269
// exit ;
58267: GO 58318
// for i in tmp do
58269: LD_ADDR_VAR 0 1
58273: PUSH
58274: LD_VAR 0 2
58278: PUSH
58279: FOR_IN
58280: IFFALSE 58316
// begin if Crawls ( i ) then
58282: LD_VAR 0 1
58286: PPUSH
58287: CALL_OW 318
58291: IFFALSE 58302
// ComWalk ( i ) ;
58293: LD_VAR 0 1
58297: PPUSH
58298: CALL_OW 138
// SetClass ( i , 2 ) ;
58302: LD_VAR 0 1
58306: PPUSH
58307: LD_INT 2
58309: PPUSH
58310: CALL_OW 336
// end ;
58314: GO 58279
58316: POP
58317: POP
// end ;
58318: PPOPN 2
58320: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
58321: LD_EXP 96
58325: PUSH
58326: LD_EXP 149
58330: AND
58331: IFFALSE 58619
58333: GO 58335
58335: DISABLE
58336: LD_INT 0
58338: PPUSH
58339: PPUSH
58340: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
58341: LD_OWVAR 2
58345: PPUSH
58346: LD_INT 9
58348: PPUSH
58349: LD_INT 1
58351: PPUSH
58352: LD_INT 1
58354: PPUSH
58355: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
58359: LD_INT 9
58361: PPUSH
58362: LD_OWVAR 2
58366: PPUSH
58367: CALL_OW 343
// uc_side := 9 ;
58371: LD_ADDR_OWVAR 20
58375: PUSH
58376: LD_INT 9
58378: ST_TO_ADDR
// uc_nation := 2 ;
58379: LD_ADDR_OWVAR 21
58383: PUSH
58384: LD_INT 2
58386: ST_TO_ADDR
// hc_name := Dark Warrior ;
58387: LD_ADDR_OWVAR 26
58391: PUSH
58392: LD_STRING Dark Warrior
58394: ST_TO_ADDR
// hc_gallery :=  ;
58395: LD_ADDR_OWVAR 33
58399: PUSH
58400: LD_STRING 
58402: ST_TO_ADDR
// hc_noskilllimit := true ;
58403: LD_ADDR_OWVAR 76
58407: PUSH
58408: LD_INT 1
58410: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
58411: LD_ADDR_OWVAR 31
58415: PUSH
58416: LD_INT 30
58418: PUSH
58419: LD_INT 30
58421: PUSH
58422: LD_INT 30
58424: PUSH
58425: LD_INT 30
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: ST_TO_ADDR
// un := CreateHuman ;
58434: LD_ADDR_VAR 0 3
58438: PUSH
58439: CALL_OW 44
58443: ST_TO_ADDR
// hc_noskilllimit := false ;
58444: LD_ADDR_OWVAR 76
58448: PUSH
58449: LD_INT 0
58451: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58452: LD_VAR 0 3
58456: PPUSH
58457: LD_INT 1
58459: PPUSH
58460: CALL_OW 51
// ToLua ( playRanger() ) ;
58464: LD_STRING playRanger()
58466: PPUSH
58467: CALL_OW 559
// p := 0 ;
58471: LD_ADDR_VAR 0 2
58475: PUSH
58476: LD_INT 0
58478: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
58479: LD_INT 35
58481: PPUSH
58482: CALL_OW 67
// p := p + 1 ;
58486: LD_ADDR_VAR 0 2
58490: PUSH
58491: LD_VAR 0 2
58495: PUSH
58496: LD_INT 1
58498: PLUS
58499: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
58500: LD_VAR 0 3
58504: PPUSH
58505: CALL_OW 256
58509: PUSH
58510: LD_INT 1000
58512: LESS
58513: IFFALSE 58527
// SetLives ( un , 1000 ) ;
58515: LD_VAR 0 3
58519: PPUSH
58520: LD_INT 1000
58522: PPUSH
58523: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
58527: LD_VAR 0 3
58531: PPUSH
58532: LD_INT 81
58534: PUSH
58535: LD_OWVAR 2
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 91
58546: PUSH
58547: LD_VAR 0 3
58551: PUSH
58552: LD_INT 30
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: LIST
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PPUSH
58564: CALL_OW 69
58568: PPUSH
58569: LD_VAR 0 3
58573: PPUSH
58574: CALL_OW 74
58578: PPUSH
58579: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
58583: LD_VAR 0 2
58587: PUSH
58588: LD_INT 80
58590: GREATER
58591: PUSH
58592: LD_VAR 0 3
58596: PPUSH
58597: CALL_OW 301
58601: OR
58602: IFFALSE 58479
// if un then
58604: LD_VAR 0 3
58608: IFFALSE 58619
// RemoveUnit ( un ) ;
58610: LD_VAR 0 3
58614: PPUSH
58615: CALL_OW 64
// end ;
58619: PPOPN 3
58621: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
58622: LD_EXP 150
58626: IFFALSE 58742
58628: GO 58630
58630: DISABLE
58631: LD_INT 0
58633: PPUSH
58634: PPUSH
58635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
58636: LD_ADDR_VAR 0 2
58640: PUSH
58641: LD_INT 81
58643: PUSH
58644: LD_OWVAR 2
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 21
58655: PUSH
58656: LD_INT 1
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PPUSH
58667: CALL_OW 69
58671: ST_TO_ADDR
// ToLua ( playComputer() ) ;
58672: LD_STRING playComputer()
58674: PPUSH
58675: CALL_OW 559
// if not tmp then
58679: LD_VAR 0 2
58683: NOT
58684: IFFALSE 58688
// exit ;
58686: GO 58742
// for i in tmp do
58688: LD_ADDR_VAR 0 1
58692: PUSH
58693: LD_VAR 0 2
58697: PUSH
58698: FOR_IN
58699: IFFALSE 58740
// for j := 1 to 4 do
58701: LD_ADDR_VAR 0 3
58705: PUSH
58706: DOUBLE
58707: LD_INT 1
58709: DEC
58710: ST_TO_ADDR
58711: LD_INT 4
58713: PUSH
58714: FOR_TO
58715: IFFALSE 58736
// SetSkill ( i , j , 10 ) ;
58717: LD_VAR 0 1
58721: PPUSH
58722: LD_VAR 0 3
58726: PPUSH
58727: LD_INT 10
58729: PPUSH
58730: CALL_OW 237
58734: GO 58714
58736: POP
58737: POP
58738: GO 58698
58740: POP
58741: POP
// end ;
58742: PPOPN 3
58744: END
// every 0 0$1 trigger s30 do var i , tmp ;
58745: LD_EXP 151
58749: IFFALSE 58818
58751: GO 58753
58753: DISABLE
58754: LD_INT 0
58756: PPUSH
58757: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58758: LD_ADDR_VAR 0 2
58762: PUSH
58763: LD_INT 22
58765: PUSH
58766: LD_OWVAR 2
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PPUSH
58775: CALL_OW 69
58779: ST_TO_ADDR
// if not tmp then
58780: LD_VAR 0 2
58784: NOT
58785: IFFALSE 58789
// exit ;
58787: GO 58818
// for i in tmp do
58789: LD_ADDR_VAR 0 1
58793: PUSH
58794: LD_VAR 0 2
58798: PUSH
58799: FOR_IN
58800: IFFALSE 58816
// SetLives ( i , 300 ) ;
58802: LD_VAR 0 1
58806: PPUSH
58807: LD_INT 300
58809: PPUSH
58810: CALL_OW 234
58814: GO 58799
58816: POP
58817: POP
// end ;
58818: PPOPN 2
58820: END
// every 0 0$1 trigger s60 do var i , tmp ;
58821: LD_EXP 152
58825: IFFALSE 58894
58827: GO 58829
58829: DISABLE
58830: LD_INT 0
58832: PPUSH
58833: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58834: LD_ADDR_VAR 0 2
58838: PUSH
58839: LD_INT 22
58841: PUSH
58842: LD_OWVAR 2
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PPUSH
58851: CALL_OW 69
58855: ST_TO_ADDR
// if not tmp then
58856: LD_VAR 0 2
58860: NOT
58861: IFFALSE 58865
// exit ;
58863: GO 58894
// for i in tmp do
58865: LD_ADDR_VAR 0 1
58869: PUSH
58870: LD_VAR 0 2
58874: PUSH
58875: FOR_IN
58876: IFFALSE 58892
// SetLives ( i , 600 ) ;
58878: LD_VAR 0 1
58882: PPUSH
58883: LD_INT 600
58885: PPUSH
58886: CALL_OW 234
58890: GO 58875
58892: POP
58893: POP
// end ;
58894: PPOPN 2
58896: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58897: LD_INT 0
58899: PPUSH
// case cmd of 301 :
58900: LD_VAR 0 1
58904: PUSH
58905: LD_INT 301
58907: DOUBLE
58908: EQUAL
58909: IFTRUE 58913
58911: GO 58945
58913: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
58914: LD_VAR 0 6
58918: PPUSH
58919: LD_VAR 0 7
58923: PPUSH
58924: LD_VAR 0 8
58928: PPUSH
58929: LD_VAR 0 4
58933: PPUSH
58934: LD_VAR 0 5
58938: PPUSH
58939: CALL 60146 0 5
58943: GO 59066
58945: LD_INT 302
58947: DOUBLE
58948: EQUAL
58949: IFTRUE 58953
58951: GO 58990
58953: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
58954: LD_VAR 0 6
58958: PPUSH
58959: LD_VAR 0 7
58963: PPUSH
58964: LD_VAR 0 8
58968: PPUSH
58969: LD_VAR 0 9
58973: PPUSH
58974: LD_VAR 0 4
58978: PPUSH
58979: LD_VAR 0 5
58983: PPUSH
58984: CALL 60237 0 6
58988: GO 59066
58990: LD_INT 303
58992: DOUBLE
58993: EQUAL
58994: IFTRUE 58998
58996: GO 59035
58998: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
58999: LD_VAR 0 6
59003: PPUSH
59004: LD_VAR 0 7
59008: PPUSH
59009: LD_VAR 0 8
59013: PPUSH
59014: LD_VAR 0 9
59018: PPUSH
59019: LD_VAR 0 4
59023: PPUSH
59024: LD_VAR 0 5
59028: PPUSH
59029: CALL 59071 0 6
59033: GO 59066
59035: LD_INT 304
59037: DOUBLE
59038: EQUAL
59039: IFTRUE 59043
59041: GO 59065
59043: POP
// hHackTeleport ( unit , x , y ) ; end ;
59044: LD_VAR 0 2
59048: PPUSH
59049: LD_VAR 0 4
59053: PPUSH
59054: LD_VAR 0 5
59058: PPUSH
59059: CALL 60830 0 3
59063: GO 59066
59065: POP
// end ;
59066: LD_VAR 0 12
59070: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
59071: LD_INT 0
59073: PPUSH
59074: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
59075: LD_VAR 0 1
59079: PUSH
59080: LD_INT 1
59082: LESS
59083: PUSH
59084: LD_VAR 0 1
59088: PUSH
59089: LD_INT 3
59091: GREATER
59092: OR
59093: PUSH
59094: LD_VAR 0 5
59098: PPUSH
59099: LD_VAR 0 6
59103: PPUSH
59104: CALL_OW 428
59108: OR
59109: IFFALSE 59113
// exit ;
59111: GO 59833
// uc_side := your_side ;
59113: LD_ADDR_OWVAR 20
59117: PUSH
59118: LD_OWVAR 2
59122: ST_TO_ADDR
// uc_nation := nation ;
59123: LD_ADDR_OWVAR 21
59127: PUSH
59128: LD_VAR 0 1
59132: ST_TO_ADDR
// bc_level = 1 ;
59133: LD_ADDR_OWVAR 43
59137: PUSH
59138: LD_INT 1
59140: ST_TO_ADDR
// case btype of 1 :
59141: LD_VAR 0 2
59145: PUSH
59146: LD_INT 1
59148: DOUBLE
59149: EQUAL
59150: IFTRUE 59154
59152: GO 59165
59154: POP
// bc_type := b_depot ; 2 :
59155: LD_ADDR_OWVAR 42
59159: PUSH
59160: LD_INT 0
59162: ST_TO_ADDR
59163: GO 59777
59165: LD_INT 2
59167: DOUBLE
59168: EQUAL
59169: IFTRUE 59173
59171: GO 59184
59173: POP
// bc_type := b_warehouse ; 3 :
59174: LD_ADDR_OWVAR 42
59178: PUSH
59179: LD_INT 1
59181: ST_TO_ADDR
59182: GO 59777
59184: LD_INT 3
59186: DOUBLE
59187: EQUAL
59188: IFTRUE 59192
59190: GO 59203
59192: POP
// bc_type := b_lab ; 4 .. 9 :
59193: LD_ADDR_OWVAR 42
59197: PUSH
59198: LD_INT 6
59200: ST_TO_ADDR
59201: GO 59777
59203: LD_INT 4
59205: DOUBLE
59206: GREATEREQUAL
59207: IFFALSE 59215
59209: LD_INT 9
59211: DOUBLE
59212: LESSEQUAL
59213: IFTRUE 59217
59215: GO 59269
59217: POP
// begin bc_type := b_lab_half ;
59218: LD_ADDR_OWVAR 42
59222: PUSH
59223: LD_INT 7
59225: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
59226: LD_ADDR_OWVAR 44
59230: PUSH
59231: LD_INT 10
59233: PUSH
59234: LD_INT 11
59236: PUSH
59237: LD_INT 12
59239: PUSH
59240: LD_INT 15
59242: PUSH
59243: LD_INT 14
59245: PUSH
59246: LD_INT 13
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: PUSH
59257: LD_VAR 0 2
59261: PUSH
59262: LD_INT 3
59264: MINUS
59265: ARRAY
59266: ST_TO_ADDR
// end ; 10 .. 13 :
59267: GO 59777
59269: LD_INT 10
59271: DOUBLE
59272: GREATEREQUAL
59273: IFFALSE 59281
59275: LD_INT 13
59277: DOUBLE
59278: LESSEQUAL
59279: IFTRUE 59283
59281: GO 59360
59283: POP
// begin bc_type := b_lab_full ;
59284: LD_ADDR_OWVAR 42
59288: PUSH
59289: LD_INT 8
59291: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
59292: LD_ADDR_OWVAR 44
59296: PUSH
59297: LD_INT 10
59299: PUSH
59300: LD_INT 12
59302: PUSH
59303: LD_INT 14
59305: PUSH
59306: LD_INT 13
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: PUSH
59315: LD_VAR 0 2
59319: PUSH
59320: LD_INT 9
59322: MINUS
59323: ARRAY
59324: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
59325: LD_ADDR_OWVAR 45
59329: PUSH
59330: LD_INT 11
59332: PUSH
59333: LD_INT 15
59335: PUSH
59336: LD_INT 12
59338: PUSH
59339: LD_INT 15
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: PUSH
59348: LD_VAR 0 2
59352: PUSH
59353: LD_INT 9
59355: MINUS
59356: ARRAY
59357: ST_TO_ADDR
// end ; 14 :
59358: GO 59777
59360: LD_INT 14
59362: DOUBLE
59363: EQUAL
59364: IFTRUE 59368
59366: GO 59379
59368: POP
// bc_type := b_workshop ; 15 :
59369: LD_ADDR_OWVAR 42
59373: PUSH
59374: LD_INT 2
59376: ST_TO_ADDR
59377: GO 59777
59379: LD_INT 15
59381: DOUBLE
59382: EQUAL
59383: IFTRUE 59387
59385: GO 59398
59387: POP
// bc_type := b_factory ; 16 :
59388: LD_ADDR_OWVAR 42
59392: PUSH
59393: LD_INT 3
59395: ST_TO_ADDR
59396: GO 59777
59398: LD_INT 16
59400: DOUBLE
59401: EQUAL
59402: IFTRUE 59406
59404: GO 59417
59406: POP
// bc_type := b_ext_gun ; 17 :
59407: LD_ADDR_OWVAR 42
59411: PUSH
59412: LD_INT 17
59414: ST_TO_ADDR
59415: GO 59777
59417: LD_INT 17
59419: DOUBLE
59420: EQUAL
59421: IFTRUE 59425
59423: GO 59453
59425: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
59426: LD_ADDR_OWVAR 42
59430: PUSH
59431: LD_INT 19
59433: PUSH
59434: LD_INT 23
59436: PUSH
59437: LD_INT 19
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: LIST
59444: PUSH
59445: LD_VAR 0 1
59449: ARRAY
59450: ST_TO_ADDR
59451: GO 59777
59453: LD_INT 18
59455: DOUBLE
59456: EQUAL
59457: IFTRUE 59461
59459: GO 59472
59461: POP
// bc_type := b_ext_radar ; 19 :
59462: LD_ADDR_OWVAR 42
59466: PUSH
59467: LD_INT 20
59469: ST_TO_ADDR
59470: GO 59777
59472: LD_INT 19
59474: DOUBLE
59475: EQUAL
59476: IFTRUE 59480
59478: GO 59491
59480: POP
// bc_type := b_ext_radio ; 20 :
59481: LD_ADDR_OWVAR 42
59485: PUSH
59486: LD_INT 22
59488: ST_TO_ADDR
59489: GO 59777
59491: LD_INT 20
59493: DOUBLE
59494: EQUAL
59495: IFTRUE 59499
59497: GO 59510
59499: POP
// bc_type := b_ext_siberium ; 21 :
59500: LD_ADDR_OWVAR 42
59504: PUSH
59505: LD_INT 21
59507: ST_TO_ADDR
59508: GO 59777
59510: LD_INT 21
59512: DOUBLE
59513: EQUAL
59514: IFTRUE 59518
59516: GO 59529
59518: POP
// bc_type := b_ext_computer ; 22 :
59519: LD_ADDR_OWVAR 42
59523: PUSH
59524: LD_INT 24
59526: ST_TO_ADDR
59527: GO 59777
59529: LD_INT 22
59531: DOUBLE
59532: EQUAL
59533: IFTRUE 59537
59535: GO 59548
59537: POP
// bc_type := b_ext_track ; 23 :
59538: LD_ADDR_OWVAR 42
59542: PUSH
59543: LD_INT 16
59545: ST_TO_ADDR
59546: GO 59777
59548: LD_INT 23
59550: DOUBLE
59551: EQUAL
59552: IFTRUE 59556
59554: GO 59567
59556: POP
// bc_type := b_ext_laser ; 24 :
59557: LD_ADDR_OWVAR 42
59561: PUSH
59562: LD_INT 25
59564: ST_TO_ADDR
59565: GO 59777
59567: LD_INT 24
59569: DOUBLE
59570: EQUAL
59571: IFTRUE 59575
59573: GO 59586
59575: POP
// bc_type := b_control_tower ; 25 :
59576: LD_ADDR_OWVAR 42
59580: PUSH
59581: LD_INT 36
59583: ST_TO_ADDR
59584: GO 59777
59586: LD_INT 25
59588: DOUBLE
59589: EQUAL
59590: IFTRUE 59594
59592: GO 59605
59594: POP
// bc_type := b_breastwork ; 26 :
59595: LD_ADDR_OWVAR 42
59599: PUSH
59600: LD_INT 31
59602: ST_TO_ADDR
59603: GO 59777
59605: LD_INT 26
59607: DOUBLE
59608: EQUAL
59609: IFTRUE 59613
59611: GO 59624
59613: POP
// bc_type := b_bunker ; 27 :
59614: LD_ADDR_OWVAR 42
59618: PUSH
59619: LD_INT 32
59621: ST_TO_ADDR
59622: GO 59777
59624: LD_INT 27
59626: DOUBLE
59627: EQUAL
59628: IFTRUE 59632
59630: GO 59643
59632: POP
// bc_type := b_turret ; 28 :
59633: LD_ADDR_OWVAR 42
59637: PUSH
59638: LD_INT 33
59640: ST_TO_ADDR
59641: GO 59777
59643: LD_INT 28
59645: DOUBLE
59646: EQUAL
59647: IFTRUE 59651
59649: GO 59662
59651: POP
// bc_type := b_armoury ; 29 :
59652: LD_ADDR_OWVAR 42
59656: PUSH
59657: LD_INT 4
59659: ST_TO_ADDR
59660: GO 59777
59662: LD_INT 29
59664: DOUBLE
59665: EQUAL
59666: IFTRUE 59670
59668: GO 59681
59670: POP
// bc_type := b_barracks ; 30 :
59671: LD_ADDR_OWVAR 42
59675: PUSH
59676: LD_INT 5
59678: ST_TO_ADDR
59679: GO 59777
59681: LD_INT 30
59683: DOUBLE
59684: EQUAL
59685: IFTRUE 59689
59687: GO 59700
59689: POP
// bc_type := b_solar_power ; 31 :
59690: LD_ADDR_OWVAR 42
59694: PUSH
59695: LD_INT 27
59697: ST_TO_ADDR
59698: GO 59777
59700: LD_INT 31
59702: DOUBLE
59703: EQUAL
59704: IFTRUE 59708
59706: GO 59719
59708: POP
// bc_type := b_oil_power ; 32 :
59709: LD_ADDR_OWVAR 42
59713: PUSH
59714: LD_INT 26
59716: ST_TO_ADDR
59717: GO 59777
59719: LD_INT 32
59721: DOUBLE
59722: EQUAL
59723: IFTRUE 59727
59725: GO 59738
59727: POP
// bc_type := b_siberite_power ; 33 :
59728: LD_ADDR_OWVAR 42
59732: PUSH
59733: LD_INT 28
59735: ST_TO_ADDR
59736: GO 59777
59738: LD_INT 33
59740: DOUBLE
59741: EQUAL
59742: IFTRUE 59746
59744: GO 59757
59746: POP
// bc_type := b_oil_mine ; 34 :
59747: LD_ADDR_OWVAR 42
59751: PUSH
59752: LD_INT 29
59754: ST_TO_ADDR
59755: GO 59777
59757: LD_INT 34
59759: DOUBLE
59760: EQUAL
59761: IFTRUE 59765
59763: GO 59776
59765: POP
// bc_type := b_siberite_mine ; end ;
59766: LD_ADDR_OWVAR 42
59770: PUSH
59771: LD_INT 30
59773: ST_TO_ADDR
59774: GO 59777
59776: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
59777: LD_ADDR_VAR 0 8
59781: PUSH
59782: LD_VAR 0 5
59786: PPUSH
59787: LD_VAR 0 6
59791: PPUSH
59792: LD_VAR 0 3
59796: PPUSH
59797: CALL_OW 47
59801: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
59802: LD_OWVAR 42
59806: PUSH
59807: LD_INT 32
59809: PUSH
59810: LD_INT 33
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: IN
59817: IFFALSE 59833
// PlaceWeaponTurret ( b , weapon ) ;
59819: LD_VAR 0 8
59823: PPUSH
59824: LD_VAR 0 4
59828: PPUSH
59829: CALL_OW 431
// end ;
59833: LD_VAR 0 7
59837: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
59838: LD_INT 0
59840: PPUSH
59841: PPUSH
59842: PPUSH
59843: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59844: LD_ADDR_VAR 0 4
59848: PUSH
59849: LD_INT 22
59851: PUSH
59852: LD_OWVAR 2
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 2
59863: PUSH
59864: LD_INT 30
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 30
59876: PUSH
59877: LD_INT 1
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: LIST
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PPUSH
59893: CALL_OW 69
59897: ST_TO_ADDR
// if not tmp then
59898: LD_VAR 0 4
59902: NOT
59903: IFFALSE 59907
// exit ;
59905: GO 59966
// for i in tmp do
59907: LD_ADDR_VAR 0 2
59911: PUSH
59912: LD_VAR 0 4
59916: PUSH
59917: FOR_IN
59918: IFFALSE 59964
// for j = 1 to 3 do
59920: LD_ADDR_VAR 0 3
59924: PUSH
59925: DOUBLE
59926: LD_INT 1
59928: DEC
59929: ST_TO_ADDR
59930: LD_INT 3
59932: PUSH
59933: FOR_TO
59934: IFFALSE 59960
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
59936: LD_VAR 0 2
59940: PPUSH
59941: CALL_OW 274
59945: PPUSH
59946: LD_VAR 0 3
59950: PPUSH
59951: LD_INT 99999
59953: PPUSH
59954: CALL_OW 277
59958: GO 59933
59960: POP
59961: POP
59962: GO 59917
59964: POP
59965: POP
// end ;
59966: LD_VAR 0 1
59970: RET
// export function hHackSetLevel10 ; var i , j ; begin
59971: LD_INT 0
59973: PPUSH
59974: PPUSH
59975: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
59976: LD_ADDR_VAR 0 2
59980: PUSH
59981: LD_INT 21
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PPUSH
59991: CALL_OW 69
59995: PUSH
59996: FOR_IN
59997: IFFALSE 60049
// if IsSelected ( i ) then
59999: LD_VAR 0 2
60003: PPUSH
60004: CALL_OW 306
60008: IFFALSE 60047
// begin for j := 1 to 4 do
60010: LD_ADDR_VAR 0 3
60014: PUSH
60015: DOUBLE
60016: LD_INT 1
60018: DEC
60019: ST_TO_ADDR
60020: LD_INT 4
60022: PUSH
60023: FOR_TO
60024: IFFALSE 60045
// SetSkill ( i , j , 10 ) ;
60026: LD_VAR 0 2
60030: PPUSH
60031: LD_VAR 0 3
60035: PPUSH
60036: LD_INT 10
60038: PPUSH
60039: CALL_OW 237
60043: GO 60023
60045: POP
60046: POP
// end ;
60047: GO 59996
60049: POP
60050: POP
// end ;
60051: LD_VAR 0 1
60055: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
60056: LD_INT 0
60058: PPUSH
60059: PPUSH
60060: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
60061: LD_ADDR_VAR 0 2
60065: PUSH
60066: LD_INT 22
60068: PUSH
60069: LD_OWVAR 2
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 21
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PPUSH
60092: CALL_OW 69
60096: PUSH
60097: FOR_IN
60098: IFFALSE 60139
// begin for j := 1 to 4 do
60100: LD_ADDR_VAR 0 3
60104: PUSH
60105: DOUBLE
60106: LD_INT 1
60108: DEC
60109: ST_TO_ADDR
60110: LD_INT 4
60112: PUSH
60113: FOR_TO
60114: IFFALSE 60135
// SetSkill ( i , j , 10 ) ;
60116: LD_VAR 0 2
60120: PPUSH
60121: LD_VAR 0 3
60125: PPUSH
60126: LD_INT 10
60128: PPUSH
60129: CALL_OW 237
60133: GO 60113
60135: POP
60136: POP
// end ;
60137: GO 60097
60139: POP
60140: POP
// end ;
60141: LD_VAR 0 1
60145: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
60146: LD_INT 0
60148: PPUSH
// uc_side := your_side ;
60149: LD_ADDR_OWVAR 20
60153: PUSH
60154: LD_OWVAR 2
60158: ST_TO_ADDR
// uc_nation := nation ;
60159: LD_ADDR_OWVAR 21
60163: PUSH
60164: LD_VAR 0 1
60168: ST_TO_ADDR
// InitHc ;
60169: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
60173: LD_INT 0
60175: PPUSH
60176: LD_VAR 0 2
60180: PPUSH
60181: LD_VAR 0 3
60185: PPUSH
60186: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
60190: LD_VAR 0 4
60194: PPUSH
60195: LD_VAR 0 5
60199: PPUSH
60200: CALL_OW 428
60204: PUSH
60205: LD_INT 0
60207: EQUAL
60208: IFFALSE 60232
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
60210: CALL_OW 44
60214: PPUSH
60215: LD_VAR 0 4
60219: PPUSH
60220: LD_VAR 0 5
60224: PPUSH
60225: LD_INT 1
60227: PPUSH
60228: CALL_OW 48
// end ;
60232: LD_VAR 0 6
60236: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
60237: LD_INT 0
60239: PPUSH
60240: PPUSH
// uc_side := your_side ;
60241: LD_ADDR_OWVAR 20
60245: PUSH
60246: LD_OWVAR 2
60250: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
60251: LD_VAR 0 1
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: LD_INT 2
60261: PUSH
60262: LD_INT 3
60264: PUSH
60265: LD_INT 4
60267: PUSH
60268: LD_INT 5
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: IN
60278: IFFALSE 60290
// uc_nation := nation_american else
60280: LD_ADDR_OWVAR 21
60284: PUSH
60285: LD_INT 1
60287: ST_TO_ADDR
60288: GO 60333
// if chassis in [ 11 , 12 , 13 , 14 ] then
60290: LD_VAR 0 1
60294: PUSH
60295: LD_INT 11
60297: PUSH
60298: LD_INT 12
60300: PUSH
60301: LD_INT 13
60303: PUSH
60304: LD_INT 14
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: IN
60313: IFFALSE 60325
// uc_nation := nation_arabian else
60315: LD_ADDR_OWVAR 21
60319: PUSH
60320: LD_INT 2
60322: ST_TO_ADDR
60323: GO 60333
// uc_nation := nation_russian ;
60325: LD_ADDR_OWVAR 21
60329: PUSH
60330: LD_INT 3
60332: ST_TO_ADDR
// vc_chassis := chassis ;
60333: LD_ADDR_OWVAR 37
60337: PUSH
60338: LD_VAR 0 1
60342: ST_TO_ADDR
// vc_engine := engine ;
60343: LD_ADDR_OWVAR 39
60347: PUSH
60348: LD_VAR 0 2
60352: ST_TO_ADDR
// vc_control := control ;
60353: LD_ADDR_OWVAR 38
60357: PUSH
60358: LD_VAR 0 3
60362: ST_TO_ADDR
// vc_weapon := weapon ;
60363: LD_ADDR_OWVAR 40
60367: PUSH
60368: LD_VAR 0 4
60372: ST_TO_ADDR
// un := CreateVehicle ;
60373: LD_ADDR_VAR 0 8
60377: PUSH
60378: CALL_OW 45
60382: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
60383: LD_VAR 0 8
60387: PPUSH
60388: LD_INT 0
60390: PPUSH
60391: LD_INT 5
60393: PPUSH
60394: CALL_OW 12
60398: PPUSH
60399: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
60403: LD_VAR 0 8
60407: PPUSH
60408: LD_VAR 0 5
60412: PPUSH
60413: LD_VAR 0 6
60417: PPUSH
60418: LD_INT 1
60420: PPUSH
60421: CALL_OW 48
// end ;
60425: LD_VAR 0 7
60429: RET
// export hInvincible ; every 1 do
60430: GO 60432
60432: DISABLE
// hInvincible := [ ] ;
60433: LD_ADDR_EXP 153
60437: PUSH
60438: EMPTY
60439: ST_TO_ADDR
60440: END
// every 10 do var i ;
60441: GO 60443
60443: DISABLE
60444: LD_INT 0
60446: PPUSH
// begin enable ;
60447: ENABLE
// if not hInvincible then
60448: LD_EXP 153
60452: NOT
60453: IFFALSE 60457
// exit ;
60455: GO 60501
// for i in hInvincible do
60457: LD_ADDR_VAR 0 1
60461: PUSH
60462: LD_EXP 153
60466: PUSH
60467: FOR_IN
60468: IFFALSE 60499
// if GetLives ( i ) < 1000 then
60470: LD_VAR 0 1
60474: PPUSH
60475: CALL_OW 256
60479: PUSH
60480: LD_INT 1000
60482: LESS
60483: IFFALSE 60497
// SetLives ( i , 1000 ) ;
60485: LD_VAR 0 1
60489: PPUSH
60490: LD_INT 1000
60492: PPUSH
60493: CALL_OW 234
60497: GO 60467
60499: POP
60500: POP
// end ;
60501: PPOPN 1
60503: END
// export function hHackInvincible ; var i ; begin
60504: LD_INT 0
60506: PPUSH
60507: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
60508: LD_ADDR_VAR 0 2
60512: PUSH
60513: LD_INT 2
60515: PUSH
60516: LD_INT 21
60518: PUSH
60519: LD_INT 1
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 21
60528: PUSH
60529: LD_INT 2
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: LIST
60540: PPUSH
60541: CALL_OW 69
60545: PUSH
60546: FOR_IN
60547: IFFALSE 60608
// if IsSelected ( i ) then
60549: LD_VAR 0 2
60553: PPUSH
60554: CALL_OW 306
60558: IFFALSE 60606
// begin if i in hInvincible then
60560: LD_VAR 0 2
60564: PUSH
60565: LD_EXP 153
60569: IN
60570: IFFALSE 60590
// hInvincible := hInvincible diff i else
60572: LD_ADDR_EXP 153
60576: PUSH
60577: LD_EXP 153
60581: PUSH
60582: LD_VAR 0 2
60586: DIFF
60587: ST_TO_ADDR
60588: GO 60606
// hInvincible := hInvincible union i ;
60590: LD_ADDR_EXP 153
60594: PUSH
60595: LD_EXP 153
60599: PUSH
60600: LD_VAR 0 2
60604: UNION
60605: ST_TO_ADDR
// end ;
60606: GO 60546
60608: POP
60609: POP
// end ;
60610: LD_VAR 0 1
60614: RET
// export function hHackInvisible ; var i , j ; begin
60615: LD_INT 0
60617: PPUSH
60618: PPUSH
60619: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
60620: LD_ADDR_VAR 0 2
60624: PUSH
60625: LD_INT 21
60627: PUSH
60628: LD_INT 1
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PPUSH
60635: CALL_OW 69
60639: PUSH
60640: FOR_IN
60641: IFFALSE 60665
// if IsSelected ( i ) then
60643: LD_VAR 0 2
60647: PPUSH
60648: CALL_OW 306
60652: IFFALSE 60663
// ComForceInvisible ( i ) ;
60654: LD_VAR 0 2
60658: PPUSH
60659: CALL_OW 496
60663: GO 60640
60665: POP
60666: POP
// end ;
60667: LD_VAR 0 1
60671: RET
// export function hHackChangeYourSide ; begin
60672: LD_INT 0
60674: PPUSH
// if your_side = 8 then
60675: LD_OWVAR 2
60679: PUSH
60680: LD_INT 8
60682: EQUAL
60683: IFFALSE 60695
// your_side := 0 else
60685: LD_ADDR_OWVAR 2
60689: PUSH
60690: LD_INT 0
60692: ST_TO_ADDR
60693: GO 60709
// your_side := your_side + 1 ;
60695: LD_ADDR_OWVAR 2
60699: PUSH
60700: LD_OWVAR 2
60704: PUSH
60705: LD_INT 1
60707: PLUS
60708: ST_TO_ADDR
// end ;
60709: LD_VAR 0 1
60713: RET
// export function hHackChangeUnitSide ; var i , j ; begin
60714: LD_INT 0
60716: PPUSH
60717: PPUSH
60718: PPUSH
// for i in all_units do
60719: LD_ADDR_VAR 0 2
60723: PUSH
60724: LD_OWVAR 3
60728: PUSH
60729: FOR_IN
60730: IFFALSE 60808
// if IsSelected ( i ) then
60732: LD_VAR 0 2
60736: PPUSH
60737: CALL_OW 306
60741: IFFALSE 60806
// begin j := GetSide ( i ) ;
60743: LD_ADDR_VAR 0 3
60747: PUSH
60748: LD_VAR 0 2
60752: PPUSH
60753: CALL_OW 255
60757: ST_TO_ADDR
// if j = 8 then
60758: LD_VAR 0 3
60762: PUSH
60763: LD_INT 8
60765: EQUAL
60766: IFFALSE 60778
// j := 0 else
60768: LD_ADDR_VAR 0 3
60772: PUSH
60773: LD_INT 0
60775: ST_TO_ADDR
60776: GO 60792
// j := j + 1 ;
60778: LD_ADDR_VAR 0 3
60782: PUSH
60783: LD_VAR 0 3
60787: PUSH
60788: LD_INT 1
60790: PLUS
60791: ST_TO_ADDR
// SetSide ( i , j ) ;
60792: LD_VAR 0 2
60796: PPUSH
60797: LD_VAR 0 3
60801: PPUSH
60802: CALL_OW 235
// end ;
60806: GO 60729
60808: POP
60809: POP
// end ;
60810: LD_VAR 0 1
60814: RET
// export function hHackFog ; begin
60815: LD_INT 0
60817: PPUSH
// FogOff ( true ) ;
60818: LD_INT 1
60820: PPUSH
60821: CALL_OW 344
// end ;
60825: LD_VAR 0 1
60829: RET
// export function hHackTeleport ( unit , x , y ) ; begin
60830: LD_INT 0
60832: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
60833: LD_VAR 0 1
60837: PPUSH
60838: LD_VAR 0 2
60842: PPUSH
60843: LD_VAR 0 3
60847: PPUSH
60848: LD_INT 1
60850: PPUSH
60851: LD_INT 1
60853: PPUSH
60854: CALL_OW 483
// CenterOnXY ( x , y ) ;
60858: LD_VAR 0 2
60862: PPUSH
60863: LD_VAR 0 3
60867: PPUSH
60868: CALL_OW 84
// end ; end_of_file
60872: LD_VAR 0 4
60876: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
60877: LD_INT 0
60879: PPUSH
60880: PPUSH
60881: PPUSH
60882: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
60883: LD_VAR 0 1
60887: PPUSH
60888: CALL_OW 264
60892: PUSH
60893: LD_EXP 80
60897: EQUAL
60898: IFFALSE 60970
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
60900: LD_INT 68
60902: PPUSH
60903: LD_VAR 0 1
60907: PPUSH
60908: CALL_OW 255
60912: PPUSH
60913: CALL_OW 321
60917: PUSH
60918: LD_INT 2
60920: EQUAL
60921: IFFALSE 60933
// eff := 70 else
60923: LD_ADDR_VAR 0 4
60927: PUSH
60928: LD_INT 70
60930: ST_TO_ADDR
60931: GO 60941
// eff := 30 ;
60933: LD_ADDR_VAR 0 4
60937: PUSH
60938: LD_INT 30
60940: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
60941: LD_VAR 0 1
60945: PPUSH
60946: CALL_OW 250
60950: PPUSH
60951: LD_VAR 0 1
60955: PPUSH
60956: CALL_OW 251
60960: PPUSH
60961: LD_VAR 0 4
60965: PPUSH
60966: CALL_OW 495
// end ; end ;
60970: LD_VAR 0 2
60974: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
60975: LD_INT 0
60977: PPUSH
// end ;
60978: LD_VAR 0 4
60982: RET
// export function SOS_Command ( cmd ) ; begin
60983: LD_INT 0
60985: PPUSH
// end ;
60986: LD_VAR 0 2
60990: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
60991: LD_INT 0
60993: PPUSH
// end ;
60994: LD_VAR 0 6
60998: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
60999: LD_INT 0
61001: PPUSH
61002: PPUSH
// if not vehicle or not factory then
61003: LD_VAR 0 1
61007: NOT
61008: PUSH
61009: LD_VAR 0 2
61013: NOT
61014: OR
61015: IFFALSE 61019
// exit ;
61017: GO 61250
// if factoryWaypoints >= factory then
61019: LD_EXP 154
61023: PUSH
61024: LD_VAR 0 2
61028: GREATEREQUAL
61029: IFFALSE 61250
// if factoryWaypoints [ factory ] then
61031: LD_EXP 154
61035: PUSH
61036: LD_VAR 0 2
61040: ARRAY
61041: IFFALSE 61250
// begin if GetControl ( vehicle ) = control_manual then
61043: LD_VAR 0 1
61047: PPUSH
61048: CALL_OW 263
61052: PUSH
61053: LD_INT 1
61055: EQUAL
61056: IFFALSE 61137
// begin driver := IsDrivenBy ( vehicle ) ;
61058: LD_ADDR_VAR 0 4
61062: PUSH
61063: LD_VAR 0 1
61067: PPUSH
61068: CALL_OW 311
61072: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61073: LD_VAR 0 4
61077: PPUSH
61078: LD_EXP 154
61082: PUSH
61083: LD_VAR 0 2
61087: ARRAY
61088: PUSH
61089: LD_INT 3
61091: ARRAY
61092: PPUSH
61093: LD_EXP 154
61097: PUSH
61098: LD_VAR 0 2
61102: ARRAY
61103: PUSH
61104: LD_INT 4
61106: ARRAY
61107: PPUSH
61108: CALL_OW 171
// AddComExitVehicle ( driver ) ;
61112: LD_VAR 0 4
61116: PPUSH
61117: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
61121: LD_VAR 0 4
61125: PPUSH
61126: LD_VAR 0 2
61130: PPUSH
61131: CALL_OW 180
// end else
61135: GO 61250
// if GetControl ( vehicle ) = control_remote then
61137: LD_VAR 0 1
61141: PPUSH
61142: CALL_OW 263
61146: PUSH
61147: LD_INT 2
61149: EQUAL
61150: IFFALSE 61211
// begin wait ( 0 0$2 ) ;
61152: LD_INT 70
61154: PPUSH
61155: CALL_OW 67
// if Connect ( vehicle ) then
61159: LD_VAR 0 1
61163: PPUSH
61164: CALL 13974 0 1
61168: IFFALSE 61209
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61170: LD_VAR 0 1
61174: PPUSH
61175: LD_EXP 154
61179: PUSH
61180: LD_VAR 0 2
61184: ARRAY
61185: PUSH
61186: LD_INT 3
61188: ARRAY
61189: PPUSH
61190: LD_EXP 154
61194: PUSH
61195: LD_VAR 0 2
61199: ARRAY
61200: PUSH
61201: LD_INT 4
61203: ARRAY
61204: PPUSH
61205: CALL_OW 171
// end else
61209: GO 61250
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61211: LD_VAR 0 1
61215: PPUSH
61216: LD_EXP 154
61220: PUSH
61221: LD_VAR 0 2
61225: ARRAY
61226: PUSH
61227: LD_INT 3
61229: ARRAY
61230: PPUSH
61231: LD_EXP 154
61235: PUSH
61236: LD_VAR 0 2
61240: ARRAY
61241: PUSH
61242: LD_INT 4
61244: ARRAY
61245: PPUSH
61246: CALL_OW 171
// end ; end ;
61250: LD_VAR 0 3
61254: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
61255: LD_INT 0
61257: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
61258: LD_VAR 0 1
61262: PUSH
61263: LD_INT 250
61265: EQUAL
61266: PUSH
61267: LD_VAR 0 2
61271: PPUSH
61272: CALL_OW 264
61276: PUSH
61277: LD_EXP 83
61281: EQUAL
61282: AND
61283: IFFALSE 61304
// MinerPlaceMine ( unit , x , y ) ;
61285: LD_VAR 0 2
61289: PPUSH
61290: LD_VAR 0 4
61294: PPUSH
61295: LD_VAR 0 5
61299: PPUSH
61300: CALL 64032 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
61304: LD_VAR 0 1
61308: PUSH
61309: LD_INT 251
61311: EQUAL
61312: PUSH
61313: LD_VAR 0 2
61317: PPUSH
61318: CALL_OW 264
61322: PUSH
61323: LD_EXP 83
61327: EQUAL
61328: AND
61329: IFFALSE 61350
// MinerDetonateMine ( unit , x , y ) ;
61331: LD_VAR 0 2
61335: PPUSH
61336: LD_VAR 0 4
61340: PPUSH
61341: LD_VAR 0 5
61345: PPUSH
61346: CALL 64309 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
61350: LD_VAR 0 1
61354: PUSH
61355: LD_INT 252
61357: EQUAL
61358: PUSH
61359: LD_VAR 0 2
61363: PPUSH
61364: CALL_OW 264
61368: PUSH
61369: LD_EXP 83
61373: EQUAL
61374: AND
61375: IFFALSE 61396
// MinerCreateMinefield ( unit , x , y ) ;
61377: LD_VAR 0 2
61381: PPUSH
61382: LD_VAR 0 4
61386: PPUSH
61387: LD_VAR 0 5
61391: PPUSH
61392: CALL 64726 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
61396: LD_VAR 0 1
61400: PUSH
61401: LD_INT 253
61403: EQUAL
61404: PUSH
61405: LD_VAR 0 2
61409: PPUSH
61410: CALL_OW 257
61414: PUSH
61415: LD_INT 5
61417: EQUAL
61418: AND
61419: IFFALSE 61440
// ComBinocular ( unit , x , y ) ;
61421: LD_VAR 0 2
61425: PPUSH
61426: LD_VAR 0 4
61430: PPUSH
61431: LD_VAR 0 5
61435: PPUSH
61436: CALL 65097 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
61440: LD_VAR 0 1
61444: PUSH
61445: LD_INT 254
61447: EQUAL
61448: PUSH
61449: LD_VAR 0 2
61453: PPUSH
61454: CALL_OW 264
61458: PUSH
61459: LD_EXP 78
61463: EQUAL
61464: AND
61465: PUSH
61466: LD_VAR 0 3
61470: PPUSH
61471: CALL_OW 263
61475: PUSH
61476: LD_INT 3
61478: EQUAL
61479: AND
61480: IFFALSE 61496
// HackDestroyVehicle ( unit , selectedUnit ) ;
61482: LD_VAR 0 2
61486: PPUSH
61487: LD_VAR 0 3
61491: PPUSH
61492: CALL 63392 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
61496: LD_VAR 0 1
61500: PUSH
61501: LD_INT 255
61503: EQUAL
61504: PUSH
61505: LD_VAR 0 2
61509: PPUSH
61510: CALL_OW 264
61514: PUSH
61515: LD_INT 14
61517: PUSH
61518: LD_INT 53
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: IN
61525: AND
61526: PUSH
61527: LD_VAR 0 4
61531: PPUSH
61532: LD_VAR 0 5
61536: PPUSH
61537: CALL_OW 488
61541: AND
61542: IFFALSE 61566
// CutTreeXYR ( unit , x , y , 12 ) ;
61544: LD_VAR 0 2
61548: PPUSH
61549: LD_VAR 0 4
61553: PPUSH
61554: LD_VAR 0 5
61558: PPUSH
61559: LD_INT 12
61561: PPUSH
61562: CALL 61958 0 4
// if cmd = 256 then
61566: LD_VAR 0 1
61570: PUSH
61571: LD_INT 256
61573: EQUAL
61574: IFFALSE 61595
// SetFactoryWaypoint ( unit , x , y ) ;
61576: LD_VAR 0 2
61580: PPUSH
61581: LD_VAR 0 4
61585: PPUSH
61586: LD_VAR 0 5
61590: PPUSH
61591: CALL 61600 0 3
// end ;
61595: LD_VAR 0 6
61599: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61600: LD_INT 0
61602: PPUSH
61603: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61604: LD_VAR 0 1
61608: NOT
61609: PUSH
61610: LD_VAR 0 2
61614: PPUSH
61615: LD_VAR 0 3
61619: PPUSH
61620: CALL_OW 488
61624: NOT
61625: OR
61626: PUSH
61627: LD_VAR 0 1
61631: PPUSH
61632: CALL_OW 266
61636: PUSH
61637: LD_INT 3
61639: NONEQUAL
61640: PUSH
61641: LD_VAR 0 1
61645: PPUSH
61646: CALL_OW 247
61650: PUSH
61651: LD_INT 1
61653: EQUAL
61654: NOT
61655: AND
61656: OR
61657: IFFALSE 61661
// exit ;
61659: GO 61810
// if GetType ( factory ) = unit_human then
61661: LD_VAR 0 1
61665: PPUSH
61666: CALL_OW 247
61670: PUSH
61671: LD_INT 1
61673: EQUAL
61674: IFFALSE 61691
// factory := IsInUnit ( factory ) ;
61676: LD_ADDR_VAR 0 1
61680: PUSH
61681: LD_VAR 0 1
61685: PPUSH
61686: CALL_OW 310
61690: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61691: LD_VAR 0 1
61695: PPUSH
61696: CALL_OW 266
61700: PUSH
61701: LD_INT 3
61703: NONEQUAL
61704: IFFALSE 61708
// exit ;
61706: GO 61810
// if HexInfo ( x , y ) = factory then
61708: LD_VAR 0 2
61712: PPUSH
61713: LD_VAR 0 3
61717: PPUSH
61718: CALL_OW 428
61722: PUSH
61723: LD_VAR 0 1
61727: EQUAL
61728: IFFALSE 61755
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
61730: LD_ADDR_EXP 154
61734: PUSH
61735: LD_EXP 154
61739: PPUSH
61740: LD_VAR 0 1
61744: PPUSH
61745: LD_INT 0
61747: PPUSH
61748: CALL_OW 1
61752: ST_TO_ADDR
61753: GO 61806
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
61755: LD_ADDR_EXP 154
61759: PUSH
61760: LD_EXP 154
61764: PPUSH
61765: LD_VAR 0 1
61769: PPUSH
61770: LD_VAR 0 1
61774: PPUSH
61775: CALL_OW 255
61779: PUSH
61780: LD_VAR 0 1
61784: PUSH
61785: LD_VAR 0 2
61789: PUSH
61790: LD_VAR 0 3
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: PPUSH
61801: CALL_OW 1
61805: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61806: CALL 61815 0 0
// end ;
61810: LD_VAR 0 4
61814: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
61815: LD_INT 0
61817: PPUSH
61818: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61819: LD_STRING resetFactoryWaypoint();
61821: PPUSH
61822: CALL_OW 559
// if factoryWaypoints then
61826: LD_EXP 154
61830: IFFALSE 61953
// begin for i := 1 to factoryWaypoints do
61832: LD_ADDR_VAR 0 2
61836: PUSH
61837: DOUBLE
61838: LD_INT 1
61840: DEC
61841: ST_TO_ADDR
61842: LD_EXP 154
61846: PUSH
61847: FOR_TO
61848: IFFALSE 61951
// if factoryWaypoints [ i ] then
61850: LD_EXP 154
61854: PUSH
61855: LD_VAR 0 2
61859: ARRAY
61860: IFFALSE 61949
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
61862: LD_STRING setFactoryWaypointXY(
61864: PUSH
61865: LD_EXP 154
61869: PUSH
61870: LD_VAR 0 2
61874: ARRAY
61875: PUSH
61876: LD_INT 1
61878: ARRAY
61879: STR
61880: PUSH
61881: LD_STRING ,
61883: STR
61884: PUSH
61885: LD_EXP 154
61889: PUSH
61890: LD_VAR 0 2
61894: ARRAY
61895: PUSH
61896: LD_INT 2
61898: ARRAY
61899: STR
61900: PUSH
61901: LD_STRING ,
61903: STR
61904: PUSH
61905: LD_EXP 154
61909: PUSH
61910: LD_VAR 0 2
61914: ARRAY
61915: PUSH
61916: LD_INT 3
61918: ARRAY
61919: STR
61920: PUSH
61921: LD_STRING ,
61923: STR
61924: PUSH
61925: LD_EXP 154
61929: PUSH
61930: LD_VAR 0 2
61934: ARRAY
61935: PUSH
61936: LD_INT 4
61938: ARRAY
61939: STR
61940: PUSH
61941: LD_STRING )
61943: STR
61944: PPUSH
61945: CALL_OW 559
61949: GO 61847
61951: POP
61952: POP
// end ; end ;
61953: LD_VAR 0 1
61957: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
61958: LD_INT 0
61960: PPUSH
61961: PPUSH
61962: PPUSH
61963: PPUSH
61964: PPUSH
61965: PPUSH
61966: PPUSH
61967: PPUSH
61968: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
61969: LD_VAR 0 1
61973: NOT
61974: PUSH
61975: LD_VAR 0 2
61979: PPUSH
61980: LD_VAR 0 3
61984: PPUSH
61985: CALL_OW 488
61989: NOT
61990: OR
61991: PUSH
61992: LD_VAR 0 4
61996: NOT
61997: OR
61998: IFFALSE 62002
// exit ;
62000: GO 62342
// list := [ ] ;
62002: LD_ADDR_VAR 0 13
62006: PUSH
62007: EMPTY
62008: ST_TO_ADDR
// if x - r < 0 then
62009: LD_VAR 0 2
62013: PUSH
62014: LD_VAR 0 4
62018: MINUS
62019: PUSH
62020: LD_INT 0
62022: LESS
62023: IFFALSE 62035
// min_x := 0 else
62025: LD_ADDR_VAR 0 7
62029: PUSH
62030: LD_INT 0
62032: ST_TO_ADDR
62033: GO 62051
// min_x := x - r ;
62035: LD_ADDR_VAR 0 7
62039: PUSH
62040: LD_VAR 0 2
62044: PUSH
62045: LD_VAR 0 4
62049: MINUS
62050: ST_TO_ADDR
// if y - r < 0 then
62051: LD_VAR 0 3
62055: PUSH
62056: LD_VAR 0 4
62060: MINUS
62061: PUSH
62062: LD_INT 0
62064: LESS
62065: IFFALSE 62077
// min_y := 0 else
62067: LD_ADDR_VAR 0 8
62071: PUSH
62072: LD_INT 0
62074: ST_TO_ADDR
62075: GO 62093
// min_y := y - r ;
62077: LD_ADDR_VAR 0 8
62081: PUSH
62082: LD_VAR 0 3
62086: PUSH
62087: LD_VAR 0 4
62091: MINUS
62092: ST_TO_ADDR
// max_x := x + r ;
62093: LD_ADDR_VAR 0 9
62097: PUSH
62098: LD_VAR 0 2
62102: PUSH
62103: LD_VAR 0 4
62107: PLUS
62108: ST_TO_ADDR
// max_y := y + r ;
62109: LD_ADDR_VAR 0 10
62113: PUSH
62114: LD_VAR 0 3
62118: PUSH
62119: LD_VAR 0 4
62123: PLUS
62124: ST_TO_ADDR
// for _x = min_x to max_x do
62125: LD_ADDR_VAR 0 11
62129: PUSH
62130: DOUBLE
62131: LD_VAR 0 7
62135: DEC
62136: ST_TO_ADDR
62137: LD_VAR 0 9
62141: PUSH
62142: FOR_TO
62143: IFFALSE 62260
// for _y = min_y to max_y do
62145: LD_ADDR_VAR 0 12
62149: PUSH
62150: DOUBLE
62151: LD_VAR 0 8
62155: DEC
62156: ST_TO_ADDR
62157: LD_VAR 0 10
62161: PUSH
62162: FOR_TO
62163: IFFALSE 62256
// begin if not ValidHex ( _x , _y ) then
62165: LD_VAR 0 11
62169: PPUSH
62170: LD_VAR 0 12
62174: PPUSH
62175: CALL_OW 488
62179: NOT
62180: IFFALSE 62184
// continue ;
62182: GO 62162
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
62184: LD_VAR 0 11
62188: PPUSH
62189: LD_VAR 0 12
62193: PPUSH
62194: CALL_OW 351
62198: PUSH
62199: LD_VAR 0 11
62203: PPUSH
62204: LD_VAR 0 12
62208: PPUSH
62209: CALL_OW 554
62213: AND
62214: IFFALSE 62254
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
62216: LD_ADDR_VAR 0 13
62220: PUSH
62221: LD_VAR 0 13
62225: PPUSH
62226: LD_VAR 0 13
62230: PUSH
62231: LD_INT 1
62233: PLUS
62234: PPUSH
62235: LD_VAR 0 11
62239: PUSH
62240: LD_VAR 0 12
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PPUSH
62249: CALL_OW 2
62253: ST_TO_ADDR
// end ;
62254: GO 62162
62256: POP
62257: POP
62258: GO 62142
62260: POP
62261: POP
// if not list then
62262: LD_VAR 0 13
62266: NOT
62267: IFFALSE 62271
// exit ;
62269: GO 62342
// for i in list do
62271: LD_ADDR_VAR 0 6
62275: PUSH
62276: LD_VAR 0 13
62280: PUSH
62281: FOR_IN
62282: IFFALSE 62340
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
62284: LD_VAR 0 1
62288: PPUSH
62289: LD_STRING M
62291: PUSH
62292: LD_VAR 0 6
62296: PUSH
62297: LD_INT 1
62299: ARRAY
62300: PUSH
62301: LD_VAR 0 6
62305: PUSH
62306: LD_INT 2
62308: ARRAY
62309: PUSH
62310: LD_INT 0
62312: PUSH
62313: LD_INT 0
62315: PUSH
62316: LD_INT 0
62318: PUSH
62319: LD_INT 0
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: PUSH
62331: EMPTY
62332: LIST
62333: PPUSH
62334: CALL_OW 447
62338: GO 62281
62340: POP
62341: POP
// end ;
62342: LD_VAR 0 5
62346: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
62347: LD_EXP 155
62351: NOT
62352: IFFALSE 62402
62354: GO 62356
62356: DISABLE
// begin initHack := true ;
62357: LD_ADDR_EXP 155
62361: PUSH
62362: LD_INT 1
62364: ST_TO_ADDR
// hackTanks := [ ] ;
62365: LD_ADDR_EXP 156
62369: PUSH
62370: EMPTY
62371: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
62372: LD_ADDR_EXP 157
62376: PUSH
62377: EMPTY
62378: ST_TO_ADDR
// hackLimit := 3 ;
62379: LD_ADDR_EXP 158
62383: PUSH
62384: LD_INT 3
62386: ST_TO_ADDR
// hackDist := 12 ;
62387: LD_ADDR_EXP 159
62391: PUSH
62392: LD_INT 12
62394: ST_TO_ADDR
// hackCounter := [ ] ;
62395: LD_ADDR_EXP 160
62399: PUSH
62400: EMPTY
62401: ST_TO_ADDR
// end ;
62402: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
62403: LD_EXP 155
62407: PUSH
62408: LD_INT 34
62410: PUSH
62411: LD_EXP 78
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PPUSH
62420: CALL_OW 69
62424: AND
62425: IFFALSE 62680
62427: GO 62429
62429: DISABLE
62430: LD_INT 0
62432: PPUSH
62433: PPUSH
// begin enable ;
62434: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
62435: LD_ADDR_VAR 0 1
62439: PUSH
62440: LD_INT 34
62442: PUSH
62443: LD_EXP 78
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PPUSH
62452: CALL_OW 69
62456: PUSH
62457: FOR_IN
62458: IFFALSE 62678
// begin if not i in hackTanks then
62460: LD_VAR 0 1
62464: PUSH
62465: LD_EXP 156
62469: IN
62470: NOT
62471: IFFALSE 62554
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
62473: LD_ADDR_EXP 156
62477: PUSH
62478: LD_EXP 156
62482: PPUSH
62483: LD_EXP 156
62487: PUSH
62488: LD_INT 1
62490: PLUS
62491: PPUSH
62492: LD_VAR 0 1
62496: PPUSH
62497: CALL_OW 1
62501: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
62502: LD_ADDR_EXP 157
62506: PUSH
62507: LD_EXP 157
62511: PPUSH
62512: LD_EXP 157
62516: PUSH
62517: LD_INT 1
62519: PLUS
62520: PPUSH
62521: EMPTY
62522: PPUSH
62523: CALL_OW 1
62527: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
62528: LD_ADDR_EXP 160
62532: PUSH
62533: LD_EXP 160
62537: PPUSH
62538: LD_EXP 160
62542: PUSH
62543: LD_INT 1
62545: PLUS
62546: PPUSH
62547: EMPTY
62548: PPUSH
62549: CALL_OW 1
62553: ST_TO_ADDR
// end ; if not IsOk ( i ) then
62554: LD_VAR 0 1
62558: PPUSH
62559: CALL_OW 302
62563: NOT
62564: IFFALSE 62577
// begin HackUnlinkAll ( i ) ;
62566: LD_VAR 0 1
62570: PPUSH
62571: CALL 62683 0 1
// continue ;
62575: GO 62457
// end ; HackCheckCapturedStatus ( i ) ;
62577: LD_VAR 0 1
62581: PPUSH
62582: CALL 63126 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
62586: LD_ADDR_VAR 0 2
62590: PUSH
62591: LD_INT 81
62593: PUSH
62594: LD_VAR 0 1
62598: PPUSH
62599: CALL_OW 255
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 33
62610: PUSH
62611: LD_INT 3
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 91
62620: PUSH
62621: LD_VAR 0 1
62625: PUSH
62626: LD_EXP 159
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 50
62638: PUSH
62639: EMPTY
62640: LIST
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: PPUSH
62648: CALL_OW 69
62652: ST_TO_ADDR
// if not tmp then
62653: LD_VAR 0 2
62657: NOT
62658: IFFALSE 62662
// continue ;
62660: GO 62457
// HackLink ( i , tmp ) ;
62662: LD_VAR 0 1
62666: PPUSH
62667: LD_VAR 0 2
62671: PPUSH
62672: CALL 62819 0 2
// end ;
62676: GO 62457
62678: POP
62679: POP
// end ;
62680: PPOPN 2
62682: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
62683: LD_INT 0
62685: PPUSH
62686: PPUSH
62687: PPUSH
// if not hack in hackTanks then
62688: LD_VAR 0 1
62692: PUSH
62693: LD_EXP 156
62697: IN
62698: NOT
62699: IFFALSE 62703
// exit ;
62701: GO 62814
// index := GetElementIndex ( hackTanks , hack ) ;
62703: LD_ADDR_VAR 0 4
62707: PUSH
62708: LD_EXP 156
62712: PPUSH
62713: LD_VAR 0 1
62717: PPUSH
62718: CALL 10788 0 2
62722: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
62723: LD_EXP 157
62727: PUSH
62728: LD_VAR 0 4
62732: ARRAY
62733: IFFALSE 62814
// begin for i in hackTanksCaptured [ index ] do
62735: LD_ADDR_VAR 0 3
62739: PUSH
62740: LD_EXP 157
62744: PUSH
62745: LD_VAR 0 4
62749: ARRAY
62750: PUSH
62751: FOR_IN
62752: IFFALSE 62778
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
62754: LD_VAR 0 3
62758: PUSH
62759: LD_INT 1
62761: ARRAY
62762: PPUSH
62763: LD_VAR 0 3
62767: PUSH
62768: LD_INT 2
62770: ARRAY
62771: PPUSH
62772: CALL_OW 235
62776: GO 62751
62778: POP
62779: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
62780: LD_ADDR_EXP 157
62784: PUSH
62785: LD_EXP 157
62789: PPUSH
62790: LD_VAR 0 4
62794: PPUSH
62795: EMPTY
62796: PPUSH
62797: CALL_OW 1
62801: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62802: LD_VAR 0 1
62806: PPUSH
62807: LD_INT 0
62809: PPUSH
62810: CALL_OW 505
// end ; end ;
62814: LD_VAR 0 2
62818: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62819: LD_INT 0
62821: PPUSH
62822: PPUSH
62823: PPUSH
// if not hack in hackTanks or not vehicles then
62824: LD_VAR 0 1
62828: PUSH
62829: LD_EXP 156
62833: IN
62834: NOT
62835: PUSH
62836: LD_VAR 0 2
62840: NOT
62841: OR
62842: IFFALSE 62846
// exit ;
62844: GO 63121
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62846: LD_ADDR_VAR 0 2
62850: PUSH
62851: LD_VAR 0 1
62855: PPUSH
62856: LD_VAR 0 2
62860: PPUSH
62861: LD_INT 1
62863: PPUSH
62864: LD_INT 1
62866: PPUSH
62867: CALL 11438 0 4
62871: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62872: LD_ADDR_VAR 0 5
62876: PUSH
62877: LD_EXP 156
62881: PPUSH
62882: LD_VAR 0 1
62886: PPUSH
62887: CALL 10788 0 2
62891: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62892: LD_EXP 157
62896: PUSH
62897: LD_VAR 0 5
62901: ARRAY
62902: PUSH
62903: LD_EXP 158
62907: LESS
62908: IFFALSE 63097
// begin for i := 1 to vehicles do
62910: LD_ADDR_VAR 0 4
62914: PUSH
62915: DOUBLE
62916: LD_INT 1
62918: DEC
62919: ST_TO_ADDR
62920: LD_VAR 0 2
62924: PUSH
62925: FOR_TO
62926: IFFALSE 63095
// begin if hackTanksCaptured [ index ] = hackLimit then
62928: LD_EXP 157
62932: PUSH
62933: LD_VAR 0 5
62937: ARRAY
62938: PUSH
62939: LD_EXP 158
62943: EQUAL
62944: IFFALSE 62948
// break ;
62946: GO 63095
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
62948: LD_ADDR_EXP 160
62952: PUSH
62953: LD_EXP 160
62957: PPUSH
62958: LD_VAR 0 5
62962: PPUSH
62963: LD_EXP 160
62967: PUSH
62968: LD_VAR 0 5
62972: ARRAY
62973: PUSH
62974: LD_INT 1
62976: PLUS
62977: PPUSH
62978: CALL_OW 1
62982: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
62983: LD_ADDR_EXP 157
62987: PUSH
62988: LD_EXP 157
62992: PPUSH
62993: LD_VAR 0 5
62997: PUSH
62998: LD_EXP 157
63002: PUSH
63003: LD_VAR 0 5
63007: ARRAY
63008: PUSH
63009: LD_INT 1
63011: PLUS
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PPUSH
63017: LD_VAR 0 2
63021: PUSH
63022: LD_VAR 0 4
63026: ARRAY
63027: PUSH
63028: LD_VAR 0 2
63032: PUSH
63033: LD_VAR 0 4
63037: ARRAY
63038: PPUSH
63039: CALL_OW 255
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PPUSH
63048: CALL 11003 0 3
63052: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
63053: LD_VAR 0 2
63057: PUSH
63058: LD_VAR 0 4
63062: ARRAY
63063: PPUSH
63064: LD_VAR 0 1
63068: PPUSH
63069: CALL_OW 255
63073: PPUSH
63074: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
63078: LD_VAR 0 2
63082: PUSH
63083: LD_VAR 0 4
63087: ARRAY
63088: PPUSH
63089: CALL_OW 141
// end ;
63093: GO 62925
63095: POP
63096: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63097: LD_VAR 0 1
63101: PPUSH
63102: LD_EXP 157
63106: PUSH
63107: LD_VAR 0 5
63111: ARRAY
63112: PUSH
63113: LD_INT 0
63115: PLUS
63116: PPUSH
63117: CALL_OW 505
// end ;
63121: LD_VAR 0 3
63125: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
63126: LD_INT 0
63128: PPUSH
63129: PPUSH
63130: PPUSH
63131: PPUSH
// if not hack in hackTanks then
63132: LD_VAR 0 1
63136: PUSH
63137: LD_EXP 156
63141: IN
63142: NOT
63143: IFFALSE 63147
// exit ;
63145: GO 63387
// index := GetElementIndex ( hackTanks , hack ) ;
63147: LD_ADDR_VAR 0 4
63151: PUSH
63152: LD_EXP 156
63156: PPUSH
63157: LD_VAR 0 1
63161: PPUSH
63162: CALL 10788 0 2
63166: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
63167: LD_ADDR_VAR 0 3
63171: PUSH
63172: DOUBLE
63173: LD_EXP 157
63177: PUSH
63178: LD_VAR 0 4
63182: ARRAY
63183: INC
63184: ST_TO_ADDR
63185: LD_INT 1
63187: PUSH
63188: FOR_DOWNTO
63189: IFFALSE 63361
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
63191: LD_ADDR_VAR 0 5
63195: PUSH
63196: LD_EXP 157
63200: PUSH
63201: LD_VAR 0 4
63205: ARRAY
63206: PUSH
63207: LD_VAR 0 3
63211: ARRAY
63212: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
63213: LD_VAR 0 5
63217: PUSH
63218: LD_INT 1
63220: ARRAY
63221: PPUSH
63222: CALL_OW 302
63226: NOT
63227: PUSH
63228: LD_VAR 0 5
63232: PUSH
63233: LD_INT 1
63235: ARRAY
63236: PPUSH
63237: CALL_OW 255
63241: PUSH
63242: LD_VAR 0 1
63246: PPUSH
63247: CALL_OW 255
63251: NONEQUAL
63252: OR
63253: IFFALSE 63359
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
63255: LD_VAR 0 5
63259: PUSH
63260: LD_INT 1
63262: ARRAY
63263: PPUSH
63264: CALL_OW 305
63268: PUSH
63269: LD_VAR 0 5
63273: PUSH
63274: LD_INT 1
63276: ARRAY
63277: PPUSH
63278: CALL_OW 255
63282: PUSH
63283: LD_VAR 0 1
63287: PPUSH
63288: CALL_OW 255
63292: EQUAL
63293: AND
63294: IFFALSE 63318
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
63296: LD_VAR 0 5
63300: PUSH
63301: LD_INT 1
63303: ARRAY
63304: PPUSH
63305: LD_VAR 0 5
63309: PUSH
63310: LD_INT 2
63312: ARRAY
63313: PPUSH
63314: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
63318: LD_ADDR_EXP 157
63322: PUSH
63323: LD_EXP 157
63327: PPUSH
63328: LD_VAR 0 4
63332: PPUSH
63333: LD_EXP 157
63337: PUSH
63338: LD_VAR 0 4
63342: ARRAY
63343: PPUSH
63344: LD_VAR 0 3
63348: PPUSH
63349: CALL_OW 3
63353: PPUSH
63354: CALL_OW 1
63358: ST_TO_ADDR
// end ; end ;
63359: GO 63188
63361: POP
63362: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63363: LD_VAR 0 1
63367: PPUSH
63368: LD_EXP 157
63372: PUSH
63373: LD_VAR 0 4
63377: ARRAY
63378: PUSH
63379: LD_INT 0
63381: PLUS
63382: PPUSH
63383: CALL_OW 505
// end ;
63387: LD_VAR 0 2
63391: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
63392: LD_INT 0
63394: PPUSH
63395: PPUSH
63396: PPUSH
63397: PPUSH
// if not hack in hackTanks then
63398: LD_VAR 0 1
63402: PUSH
63403: LD_EXP 156
63407: IN
63408: NOT
63409: IFFALSE 63413
// exit ;
63411: GO 63498
// index := GetElementIndex ( hackTanks , hack ) ;
63413: LD_ADDR_VAR 0 5
63417: PUSH
63418: LD_EXP 156
63422: PPUSH
63423: LD_VAR 0 1
63427: PPUSH
63428: CALL 10788 0 2
63432: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
63433: LD_ADDR_VAR 0 4
63437: PUSH
63438: DOUBLE
63439: LD_INT 1
63441: DEC
63442: ST_TO_ADDR
63443: LD_EXP 157
63447: PUSH
63448: LD_VAR 0 5
63452: ARRAY
63453: PUSH
63454: FOR_TO
63455: IFFALSE 63496
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
63457: LD_EXP 157
63461: PUSH
63462: LD_VAR 0 5
63466: ARRAY
63467: PUSH
63468: LD_VAR 0 4
63472: ARRAY
63473: PUSH
63474: LD_INT 1
63476: ARRAY
63477: PUSH
63478: LD_VAR 0 2
63482: EQUAL
63483: IFFALSE 63494
// KillUnit ( vehicle ) ;
63485: LD_VAR 0 2
63489: PPUSH
63490: CALL_OW 66
63494: GO 63454
63496: POP
63497: POP
// end ;
63498: LD_VAR 0 3
63502: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
63503: LD_EXP 161
63507: NOT
63508: IFFALSE 63543
63510: GO 63512
63512: DISABLE
// begin initMiner := true ;
63513: LD_ADDR_EXP 161
63517: PUSH
63518: LD_INT 1
63520: ST_TO_ADDR
// minersList := [ ] ;
63521: LD_ADDR_EXP 162
63525: PUSH
63526: EMPTY
63527: ST_TO_ADDR
// minerMinesList := [ ] ;
63528: LD_ADDR_EXP 163
63532: PUSH
63533: EMPTY
63534: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
63535: LD_ADDR_EXP 164
63539: PUSH
63540: LD_INT 5
63542: ST_TO_ADDR
// end ;
63543: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
63544: LD_EXP 161
63548: PUSH
63549: LD_INT 34
63551: PUSH
63552: LD_EXP 83
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PPUSH
63561: CALL_OW 69
63565: AND
63566: IFFALSE 64029
63568: GO 63570
63570: DISABLE
63571: LD_INT 0
63573: PPUSH
63574: PPUSH
63575: PPUSH
63576: PPUSH
// begin enable ;
63577: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
63578: LD_ADDR_VAR 0 1
63582: PUSH
63583: LD_INT 34
63585: PUSH
63586: LD_EXP 83
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PPUSH
63595: CALL_OW 69
63599: PUSH
63600: FOR_IN
63601: IFFALSE 63673
// begin if not i in minersList then
63603: LD_VAR 0 1
63607: PUSH
63608: LD_EXP 162
63612: IN
63613: NOT
63614: IFFALSE 63671
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
63616: LD_ADDR_EXP 162
63620: PUSH
63621: LD_EXP 162
63625: PPUSH
63626: LD_EXP 162
63630: PUSH
63631: LD_INT 1
63633: PLUS
63634: PPUSH
63635: LD_VAR 0 1
63639: PPUSH
63640: CALL_OW 1
63644: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
63645: LD_ADDR_EXP 163
63649: PUSH
63650: LD_EXP 163
63654: PPUSH
63655: LD_EXP 163
63659: PUSH
63660: LD_INT 1
63662: PLUS
63663: PPUSH
63664: EMPTY
63665: PPUSH
63666: CALL_OW 1
63670: ST_TO_ADDR
// end end ;
63671: GO 63600
63673: POP
63674: POP
// for i := minerMinesList downto 1 do
63675: LD_ADDR_VAR 0 1
63679: PUSH
63680: DOUBLE
63681: LD_EXP 163
63685: INC
63686: ST_TO_ADDR
63687: LD_INT 1
63689: PUSH
63690: FOR_DOWNTO
63691: IFFALSE 64027
// begin if IsLive ( minersList [ i ] ) then
63693: LD_EXP 162
63697: PUSH
63698: LD_VAR 0 1
63702: ARRAY
63703: PPUSH
63704: CALL_OW 300
63708: IFFALSE 63736
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
63710: LD_EXP 162
63714: PUSH
63715: LD_VAR 0 1
63719: ARRAY
63720: PPUSH
63721: LD_EXP 163
63725: PUSH
63726: LD_VAR 0 1
63730: ARRAY
63731: PPUSH
63732: CALL_OW 505
// if not minerMinesList [ i ] then
63736: LD_EXP 163
63740: PUSH
63741: LD_VAR 0 1
63745: ARRAY
63746: NOT
63747: IFFALSE 63751
// continue ;
63749: GO 63690
// for j := minerMinesList [ i ] downto 1 do
63751: LD_ADDR_VAR 0 2
63755: PUSH
63756: DOUBLE
63757: LD_EXP 163
63761: PUSH
63762: LD_VAR 0 1
63766: ARRAY
63767: INC
63768: ST_TO_ADDR
63769: LD_INT 1
63771: PUSH
63772: FOR_DOWNTO
63773: IFFALSE 64023
// begin side := GetSide ( minersList [ i ] ) ;
63775: LD_ADDR_VAR 0 3
63779: PUSH
63780: LD_EXP 162
63784: PUSH
63785: LD_VAR 0 1
63789: ARRAY
63790: PPUSH
63791: CALL_OW 255
63795: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63796: LD_ADDR_VAR 0 4
63800: PUSH
63801: LD_EXP 163
63805: PUSH
63806: LD_VAR 0 1
63810: ARRAY
63811: PUSH
63812: LD_VAR 0 2
63816: ARRAY
63817: PUSH
63818: LD_INT 1
63820: ARRAY
63821: PPUSH
63822: LD_EXP 163
63826: PUSH
63827: LD_VAR 0 1
63831: ARRAY
63832: PUSH
63833: LD_VAR 0 2
63837: ARRAY
63838: PUSH
63839: LD_INT 2
63841: ARRAY
63842: PPUSH
63843: CALL_OW 428
63847: ST_TO_ADDR
// if not tmp then
63848: LD_VAR 0 4
63852: NOT
63853: IFFALSE 63857
// continue ;
63855: GO 63772
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63857: LD_VAR 0 4
63861: PUSH
63862: LD_INT 81
63864: PUSH
63865: LD_VAR 0 3
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PPUSH
63874: CALL_OW 69
63878: IN
63879: PUSH
63880: LD_EXP 163
63884: PUSH
63885: LD_VAR 0 1
63889: ARRAY
63890: PUSH
63891: LD_VAR 0 2
63895: ARRAY
63896: PUSH
63897: LD_INT 1
63899: ARRAY
63900: PPUSH
63901: LD_EXP 163
63905: PUSH
63906: LD_VAR 0 1
63910: ARRAY
63911: PUSH
63912: LD_VAR 0 2
63916: ARRAY
63917: PUSH
63918: LD_INT 2
63920: ARRAY
63921: PPUSH
63922: CALL_OW 458
63926: AND
63927: IFFALSE 64021
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
63929: LD_EXP 163
63933: PUSH
63934: LD_VAR 0 1
63938: ARRAY
63939: PUSH
63940: LD_VAR 0 2
63944: ARRAY
63945: PUSH
63946: LD_INT 1
63948: ARRAY
63949: PPUSH
63950: LD_EXP 163
63954: PUSH
63955: LD_VAR 0 1
63959: ARRAY
63960: PUSH
63961: LD_VAR 0 2
63965: ARRAY
63966: PUSH
63967: LD_INT 2
63969: ARRAY
63970: PPUSH
63971: LD_VAR 0 3
63975: PPUSH
63976: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63980: LD_ADDR_EXP 163
63984: PUSH
63985: LD_EXP 163
63989: PPUSH
63990: LD_VAR 0 1
63994: PPUSH
63995: LD_EXP 163
63999: PUSH
64000: LD_VAR 0 1
64004: ARRAY
64005: PPUSH
64006: LD_VAR 0 2
64010: PPUSH
64011: CALL_OW 3
64015: PPUSH
64016: CALL_OW 1
64020: ST_TO_ADDR
// end ; end ;
64021: GO 63772
64023: POP
64024: POP
// end ;
64025: GO 63690
64027: POP
64028: POP
// end ;
64029: PPOPN 4
64031: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
64032: LD_INT 0
64034: PPUSH
64035: PPUSH
// result := false ;
64036: LD_ADDR_VAR 0 4
64040: PUSH
64041: LD_INT 0
64043: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
64044: LD_VAR 0 1
64048: PPUSH
64049: CALL_OW 264
64053: PUSH
64054: LD_EXP 83
64058: EQUAL
64059: NOT
64060: IFFALSE 64064
// exit ;
64062: GO 64304
// index := GetElementIndex ( minersList , unit ) ;
64064: LD_ADDR_VAR 0 5
64068: PUSH
64069: LD_EXP 162
64073: PPUSH
64074: LD_VAR 0 1
64078: PPUSH
64079: CALL 10788 0 2
64083: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
64084: LD_EXP 163
64088: PUSH
64089: LD_VAR 0 5
64093: ARRAY
64094: PUSH
64095: LD_EXP 164
64099: GREATEREQUAL
64100: IFFALSE 64104
// exit ;
64102: GO 64304
// ComMoveXY ( unit , x , y ) ;
64104: LD_VAR 0 1
64108: PPUSH
64109: LD_VAR 0 2
64113: PPUSH
64114: LD_VAR 0 3
64118: PPUSH
64119: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64123: LD_INT 35
64125: PPUSH
64126: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
64130: LD_VAR 0 1
64134: PPUSH
64135: LD_VAR 0 2
64139: PPUSH
64140: LD_VAR 0 3
64144: PPUSH
64145: CALL 41507 0 3
64149: NOT
64150: PUSH
64151: LD_VAR 0 1
64155: PPUSH
64156: CALL_OW 314
64160: AND
64161: IFFALSE 64165
// exit ;
64163: GO 64304
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
64165: LD_VAR 0 2
64169: PPUSH
64170: LD_VAR 0 3
64174: PPUSH
64175: CALL_OW 428
64179: PUSH
64180: LD_VAR 0 1
64184: EQUAL
64185: PUSH
64186: LD_VAR 0 1
64190: PPUSH
64191: CALL_OW 314
64195: NOT
64196: AND
64197: IFFALSE 64123
// PlaySoundXY ( x , y , PlantMine ) ;
64199: LD_VAR 0 2
64203: PPUSH
64204: LD_VAR 0 3
64208: PPUSH
64209: LD_STRING PlantMine
64211: PPUSH
64212: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
64216: LD_VAR 0 2
64220: PPUSH
64221: LD_VAR 0 3
64225: PPUSH
64226: LD_VAR 0 1
64230: PPUSH
64231: CALL_OW 255
64235: PPUSH
64236: LD_INT 0
64238: PPUSH
64239: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
64243: LD_ADDR_EXP 163
64247: PUSH
64248: LD_EXP 163
64252: PPUSH
64253: LD_VAR 0 5
64257: PUSH
64258: LD_EXP 163
64262: PUSH
64263: LD_VAR 0 5
64267: ARRAY
64268: PUSH
64269: LD_INT 1
64271: PLUS
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PPUSH
64277: LD_VAR 0 2
64281: PUSH
64282: LD_VAR 0 3
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PPUSH
64291: CALL 11003 0 3
64295: ST_TO_ADDR
// result := true ;
64296: LD_ADDR_VAR 0 4
64300: PUSH
64301: LD_INT 1
64303: ST_TO_ADDR
// end ;
64304: LD_VAR 0 4
64308: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
64309: LD_INT 0
64311: PPUSH
64312: PPUSH
64313: PPUSH
// if not unit in minersList then
64314: LD_VAR 0 1
64318: PUSH
64319: LD_EXP 162
64323: IN
64324: NOT
64325: IFFALSE 64329
// exit ;
64327: GO 64721
// index := GetElementIndex ( minersList , unit ) ;
64329: LD_ADDR_VAR 0 6
64333: PUSH
64334: LD_EXP 162
64338: PPUSH
64339: LD_VAR 0 1
64343: PPUSH
64344: CALL 10788 0 2
64348: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
64349: LD_ADDR_VAR 0 5
64353: PUSH
64354: DOUBLE
64355: LD_EXP 163
64359: PUSH
64360: LD_VAR 0 6
64364: ARRAY
64365: INC
64366: ST_TO_ADDR
64367: LD_INT 1
64369: PUSH
64370: FOR_DOWNTO
64371: IFFALSE 64532
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
64373: LD_EXP 163
64377: PUSH
64378: LD_VAR 0 6
64382: ARRAY
64383: PUSH
64384: LD_VAR 0 5
64388: ARRAY
64389: PUSH
64390: LD_INT 1
64392: ARRAY
64393: PUSH
64394: LD_VAR 0 2
64398: EQUAL
64399: PUSH
64400: LD_EXP 163
64404: PUSH
64405: LD_VAR 0 6
64409: ARRAY
64410: PUSH
64411: LD_VAR 0 5
64415: ARRAY
64416: PUSH
64417: LD_INT 2
64419: ARRAY
64420: PUSH
64421: LD_VAR 0 3
64425: EQUAL
64426: AND
64427: IFFALSE 64530
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64429: LD_EXP 163
64433: PUSH
64434: LD_VAR 0 6
64438: ARRAY
64439: PUSH
64440: LD_VAR 0 5
64444: ARRAY
64445: PUSH
64446: LD_INT 1
64448: ARRAY
64449: PPUSH
64450: LD_EXP 163
64454: PUSH
64455: LD_VAR 0 6
64459: ARRAY
64460: PUSH
64461: LD_VAR 0 5
64465: ARRAY
64466: PUSH
64467: LD_INT 2
64469: ARRAY
64470: PPUSH
64471: LD_VAR 0 1
64475: PPUSH
64476: CALL_OW 255
64480: PPUSH
64481: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64485: LD_ADDR_EXP 163
64489: PUSH
64490: LD_EXP 163
64494: PPUSH
64495: LD_VAR 0 6
64499: PPUSH
64500: LD_EXP 163
64504: PUSH
64505: LD_VAR 0 6
64509: ARRAY
64510: PPUSH
64511: LD_VAR 0 5
64515: PPUSH
64516: CALL_OW 3
64520: PPUSH
64521: CALL_OW 1
64525: ST_TO_ADDR
// exit ;
64526: POP
64527: POP
64528: GO 64721
// end ; end ;
64530: GO 64370
64532: POP
64533: POP
// for i := minerMinesList [ index ] downto 1 do
64534: LD_ADDR_VAR 0 5
64538: PUSH
64539: DOUBLE
64540: LD_EXP 163
64544: PUSH
64545: LD_VAR 0 6
64549: ARRAY
64550: INC
64551: ST_TO_ADDR
64552: LD_INT 1
64554: PUSH
64555: FOR_DOWNTO
64556: IFFALSE 64719
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
64558: LD_EXP 163
64562: PUSH
64563: LD_VAR 0 6
64567: ARRAY
64568: PUSH
64569: LD_VAR 0 5
64573: ARRAY
64574: PUSH
64575: LD_INT 1
64577: ARRAY
64578: PPUSH
64579: LD_EXP 163
64583: PUSH
64584: LD_VAR 0 6
64588: ARRAY
64589: PUSH
64590: LD_VAR 0 5
64594: ARRAY
64595: PUSH
64596: LD_INT 2
64598: ARRAY
64599: PPUSH
64600: LD_VAR 0 2
64604: PPUSH
64605: LD_VAR 0 3
64609: PPUSH
64610: CALL_OW 298
64614: PUSH
64615: LD_INT 6
64617: LESS
64618: IFFALSE 64717
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64620: LD_EXP 163
64624: PUSH
64625: LD_VAR 0 6
64629: ARRAY
64630: PUSH
64631: LD_VAR 0 5
64635: ARRAY
64636: PUSH
64637: LD_INT 1
64639: ARRAY
64640: PPUSH
64641: LD_EXP 163
64645: PUSH
64646: LD_VAR 0 6
64650: ARRAY
64651: PUSH
64652: LD_VAR 0 5
64656: ARRAY
64657: PUSH
64658: LD_INT 2
64660: ARRAY
64661: PPUSH
64662: LD_VAR 0 1
64666: PPUSH
64667: CALL_OW 255
64671: PPUSH
64672: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64676: LD_ADDR_EXP 163
64680: PUSH
64681: LD_EXP 163
64685: PPUSH
64686: LD_VAR 0 6
64690: PPUSH
64691: LD_EXP 163
64695: PUSH
64696: LD_VAR 0 6
64700: ARRAY
64701: PPUSH
64702: LD_VAR 0 5
64706: PPUSH
64707: CALL_OW 3
64711: PPUSH
64712: CALL_OW 1
64716: ST_TO_ADDR
// end ; end ;
64717: GO 64555
64719: POP
64720: POP
// end ;
64721: LD_VAR 0 4
64725: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
64726: LD_INT 0
64728: PPUSH
64729: PPUSH
64730: PPUSH
64731: PPUSH
64732: PPUSH
64733: PPUSH
64734: PPUSH
64735: PPUSH
64736: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
64737: LD_VAR 0 1
64741: PPUSH
64742: CALL_OW 264
64746: PUSH
64747: LD_EXP 83
64751: EQUAL
64752: NOT
64753: PUSH
64754: LD_VAR 0 1
64758: PUSH
64759: LD_EXP 162
64763: IN
64764: NOT
64765: OR
64766: IFFALSE 64770
// exit ;
64768: GO 65092
// index := GetElementIndex ( minersList , unit ) ;
64770: LD_ADDR_VAR 0 6
64774: PUSH
64775: LD_EXP 162
64779: PPUSH
64780: LD_VAR 0 1
64784: PPUSH
64785: CALL 10788 0 2
64789: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64790: LD_ADDR_VAR 0 8
64794: PUSH
64795: LD_EXP 164
64799: PUSH
64800: LD_EXP 163
64804: PUSH
64805: LD_VAR 0 6
64809: ARRAY
64810: MINUS
64811: ST_TO_ADDR
// if not minesFreeAmount then
64812: LD_VAR 0 8
64816: NOT
64817: IFFALSE 64821
// exit ;
64819: GO 65092
// tmp := [ ] ;
64821: LD_ADDR_VAR 0 7
64825: PUSH
64826: EMPTY
64827: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64828: LD_ADDR_VAR 0 5
64832: PUSH
64833: DOUBLE
64834: LD_INT 1
64836: DEC
64837: ST_TO_ADDR
64838: LD_VAR 0 8
64842: PUSH
64843: FOR_TO
64844: IFFALSE 65039
// begin _d := rand ( 0 , 5 ) ;
64846: LD_ADDR_VAR 0 11
64850: PUSH
64851: LD_INT 0
64853: PPUSH
64854: LD_INT 5
64856: PPUSH
64857: CALL_OW 12
64861: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64862: LD_ADDR_VAR 0 12
64866: PUSH
64867: LD_INT 2
64869: PPUSH
64870: LD_INT 6
64872: PPUSH
64873: CALL_OW 12
64877: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64878: LD_ADDR_VAR 0 9
64882: PUSH
64883: LD_VAR 0 2
64887: PPUSH
64888: LD_VAR 0 11
64892: PPUSH
64893: LD_VAR 0 12
64897: PPUSH
64898: CALL_OW 272
64902: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64903: LD_ADDR_VAR 0 10
64907: PUSH
64908: LD_VAR 0 3
64912: PPUSH
64913: LD_VAR 0 11
64917: PPUSH
64918: LD_VAR 0 12
64922: PPUSH
64923: CALL_OW 273
64927: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64928: LD_VAR 0 9
64932: PPUSH
64933: LD_VAR 0 10
64937: PPUSH
64938: CALL_OW 488
64942: PUSH
64943: LD_VAR 0 9
64947: PUSH
64948: LD_VAR 0 10
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_VAR 0 7
64961: IN
64962: NOT
64963: AND
64964: PUSH
64965: LD_VAR 0 9
64969: PPUSH
64970: LD_VAR 0 10
64974: PPUSH
64975: CALL_OW 458
64979: NOT
64980: AND
64981: IFFALSE 65023
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
64983: LD_ADDR_VAR 0 7
64987: PUSH
64988: LD_VAR 0 7
64992: PPUSH
64993: LD_VAR 0 7
64997: PUSH
64998: LD_INT 1
65000: PLUS
65001: PPUSH
65002: LD_VAR 0 9
65006: PUSH
65007: LD_VAR 0 10
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PPUSH
65016: CALL_OW 1
65020: ST_TO_ADDR
65021: GO 65037
// i := i - 1 ;
65023: LD_ADDR_VAR 0 5
65027: PUSH
65028: LD_VAR 0 5
65032: PUSH
65033: LD_INT 1
65035: MINUS
65036: ST_TO_ADDR
// end ;
65037: GO 64843
65039: POP
65040: POP
// for i in tmp do
65041: LD_ADDR_VAR 0 5
65045: PUSH
65046: LD_VAR 0 7
65050: PUSH
65051: FOR_IN
65052: IFFALSE 65090
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
65054: LD_VAR 0 1
65058: PPUSH
65059: LD_VAR 0 5
65063: PUSH
65064: LD_INT 1
65066: ARRAY
65067: PPUSH
65068: LD_VAR 0 5
65072: PUSH
65073: LD_INT 2
65075: ARRAY
65076: PPUSH
65077: CALL 64032 0 3
65081: NOT
65082: IFFALSE 65088
// exit ;
65084: POP
65085: POP
65086: GO 65092
65088: GO 65051
65090: POP
65091: POP
// end ;
65092: LD_VAR 0 4
65096: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
65097: LD_INT 0
65099: PPUSH
65100: PPUSH
65101: PPUSH
65102: PPUSH
65103: PPUSH
65104: PPUSH
65105: PPUSH
// if not GetClass ( unit ) = class_sniper then
65106: LD_VAR 0 1
65110: PPUSH
65111: CALL_OW 257
65115: PUSH
65116: LD_INT 5
65118: EQUAL
65119: NOT
65120: IFFALSE 65124
// exit ;
65122: GO 65512
// dist := 8 ;
65124: LD_ADDR_VAR 0 5
65128: PUSH
65129: LD_INT 8
65131: ST_TO_ADDR
// viewRange := 12 ;
65132: LD_ADDR_VAR 0 7
65136: PUSH
65137: LD_INT 12
65139: ST_TO_ADDR
// side := GetSide ( unit ) ;
65140: LD_ADDR_VAR 0 6
65144: PUSH
65145: LD_VAR 0 1
65149: PPUSH
65150: CALL_OW 255
65154: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
65155: LD_INT 61
65157: PPUSH
65158: LD_VAR 0 6
65162: PPUSH
65163: CALL_OW 321
65167: PUSH
65168: LD_INT 2
65170: EQUAL
65171: IFFALSE 65181
// viewRange := 16 ;
65173: LD_ADDR_VAR 0 7
65177: PUSH
65178: LD_INT 16
65180: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
65181: LD_VAR 0 1
65185: PPUSH
65186: LD_VAR 0 2
65190: PPUSH
65191: LD_VAR 0 3
65195: PPUSH
65196: CALL_OW 297
65200: PUSH
65201: LD_VAR 0 5
65205: GREATER
65206: IFFALSE 65285
// begin ComMoveXY ( unit , x , y ) ;
65208: LD_VAR 0 1
65212: PPUSH
65213: LD_VAR 0 2
65217: PPUSH
65218: LD_VAR 0 3
65222: PPUSH
65223: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65227: LD_INT 35
65229: PPUSH
65230: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
65234: LD_VAR 0 1
65238: PPUSH
65239: LD_VAR 0 2
65243: PPUSH
65244: LD_VAR 0 3
65248: PPUSH
65249: CALL 41507 0 3
65253: NOT
65254: IFFALSE 65258
// exit ;
65256: GO 65512
// until GetDistUnitXY ( unit , x , y ) < dist ;
65258: LD_VAR 0 1
65262: PPUSH
65263: LD_VAR 0 2
65267: PPUSH
65268: LD_VAR 0 3
65272: PPUSH
65273: CALL_OW 297
65277: PUSH
65278: LD_VAR 0 5
65282: LESS
65283: IFFALSE 65227
// end ; ComTurnXY ( unit , x , y ) ;
65285: LD_VAR 0 1
65289: PPUSH
65290: LD_VAR 0 2
65294: PPUSH
65295: LD_VAR 0 3
65299: PPUSH
65300: CALL_OW 118
// wait ( 5 ) ;
65304: LD_INT 5
65306: PPUSH
65307: CALL_OW 67
// _d := GetDir ( unit ) ;
65311: LD_ADDR_VAR 0 10
65315: PUSH
65316: LD_VAR 0 1
65320: PPUSH
65321: CALL_OW 254
65325: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
65326: LD_ADDR_VAR 0 8
65330: PUSH
65331: LD_VAR 0 1
65335: PPUSH
65336: CALL_OW 250
65340: PPUSH
65341: LD_VAR 0 10
65345: PPUSH
65346: LD_VAR 0 5
65350: PPUSH
65351: CALL_OW 272
65355: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
65356: LD_ADDR_VAR 0 9
65360: PUSH
65361: LD_VAR 0 1
65365: PPUSH
65366: CALL_OW 251
65370: PPUSH
65371: LD_VAR 0 10
65375: PPUSH
65376: LD_VAR 0 5
65380: PPUSH
65381: CALL_OW 273
65385: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65386: LD_VAR 0 8
65390: PPUSH
65391: LD_VAR 0 9
65395: PPUSH
65396: CALL_OW 488
65400: NOT
65401: IFFALSE 65405
// exit ;
65403: GO 65512
// ComAnimCustom ( unit , 1 ) ;
65405: LD_VAR 0 1
65409: PPUSH
65410: LD_INT 1
65412: PPUSH
65413: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
65417: LD_VAR 0 8
65421: PPUSH
65422: LD_VAR 0 9
65426: PPUSH
65427: LD_VAR 0 6
65431: PPUSH
65432: LD_VAR 0 7
65436: PPUSH
65437: CALL_OW 330
// repeat wait ( 1 ) ;
65441: LD_INT 1
65443: PPUSH
65444: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
65448: LD_VAR 0 1
65452: PPUSH
65453: CALL_OW 316
65457: PUSH
65458: LD_VAR 0 1
65462: PPUSH
65463: CALL_OW 314
65467: OR
65468: PUSH
65469: LD_VAR 0 1
65473: PPUSH
65474: CALL_OW 302
65478: NOT
65479: OR
65480: PUSH
65481: LD_VAR 0 1
65485: PPUSH
65486: CALL_OW 301
65490: OR
65491: IFFALSE 65441
// RemoveSeeing ( _x , _y , side ) ;
65493: LD_VAR 0 8
65497: PPUSH
65498: LD_VAR 0 9
65502: PPUSH
65503: LD_VAR 0 6
65507: PPUSH
65508: CALL_OW 331
// end ; end_of_file
65512: LD_VAR 0 4
65516: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65517: LD_VAR 0 1
65521: PUSH
65522: LD_INT 200
65524: DOUBLE
65525: GREATEREQUAL
65526: IFFALSE 65534
65528: LD_INT 299
65530: DOUBLE
65531: LESSEQUAL
65532: IFTRUE 65536
65534: GO 65568
65536: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65537: LD_VAR 0 1
65541: PPUSH
65542: LD_VAR 0 2
65546: PPUSH
65547: LD_VAR 0 3
65551: PPUSH
65552: LD_VAR 0 4
65556: PPUSH
65557: LD_VAR 0 5
65561: PPUSH
65562: CALL 61255 0 5
65566: GO 65645
65568: LD_INT 300
65570: DOUBLE
65571: GREATEREQUAL
65572: IFFALSE 65580
65574: LD_INT 399
65576: DOUBLE
65577: LESSEQUAL
65578: IFTRUE 65582
65580: GO 65644
65582: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65583: LD_VAR 0 1
65587: PPUSH
65588: LD_VAR 0 2
65592: PPUSH
65593: LD_VAR 0 3
65597: PPUSH
65598: LD_VAR 0 4
65602: PPUSH
65603: LD_VAR 0 5
65607: PPUSH
65608: LD_VAR 0 6
65612: PPUSH
65613: LD_VAR 0 7
65617: PPUSH
65618: LD_VAR 0 8
65622: PPUSH
65623: LD_VAR 0 9
65627: PPUSH
65628: LD_VAR 0 10
65632: PPUSH
65633: LD_VAR 0 11
65637: PPUSH
65638: CALL 58897 0 11
65642: GO 65645
65644: POP
// end ;
65645: PPOPN 11
65647: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65648: LD_VAR 0 1
65652: PPUSH
65653: LD_VAR 0 2
65657: PPUSH
65658: LD_VAR 0 3
65662: PPUSH
65663: LD_VAR 0 4
65667: PPUSH
65668: LD_VAR 0 5
65672: PPUSH
65673: CALL 60991 0 5
// end ;
65677: PPOPN 5
65679: END
