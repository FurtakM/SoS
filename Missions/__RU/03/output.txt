// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export meetBelkovBrother ; export cratesResources , oilResources ; export vehiclesPreviousMission ; export spawnCrates ; export scholtzeSpawnNearAmericans , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinOpinion , platonovOpinion ; export canDestroyBeriaBase ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 294 0 0
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_MeetBelkovBrother_6
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// cratesResources = LoadVariable ( 02_BeriaResourceCrates_7 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 02_BeriaResourceCrates_7
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// oilResources = LoadVariable ( 02_BeriaResourceOil_8 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_BeriaResourceOil_8
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// vehiclesPreviousMission = LoadVariable ( 02_Vehicles_1 , 0 ) ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_STRING 02_Vehicles_1
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  88: LD_ADDR_EXP 27
  92: PUSH
  93: LD_STRING 02_PlatonovOpinion_9
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// kurinOpinion = - 1 ;
 104: LD_ADDR_EXP 26
 108: PUSH
 109: LD_INT 1
 111: NEG
 112: ST_TO_ADDR
// scholtzeSpawnNearAmericans = false ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// scholtzeSaved = false ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// americanTroopsArriveOmicronCounter = 0 ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// spawnCrates = true ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 1
 144: ST_TO_ADDR
// dialog_track = false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// dialog_workshop = false ;
 153: LD_ADDR_EXP 8
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// dialog_stop = false ;
 161: LD_ADDR_EXP 11
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// counterEnable = false ;
 169: LD_ADDR_EXP 83
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// extraTime = 7 7$00 ;
 177: LD_ADDR_EXP 14
 181: PUSH
 182: LD_INT 14700
 184: ST_TO_ADDR
// kurinGiveMoreTime = false ;
 185: LD_ADDR_EXP 13
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 4200
 200: ST_TO_ADDR
// produceOnlyForYou = false ;
 201: LD_ADDR_EXP 17
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// produceMoreVehicles = false ;
 209: LD_ADDR_EXP 16
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// kurinCheckVehicles = false ;
 217: LD_ADDR_EXP 18
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omicronSurrender = false ;
 225: LD_ADDR_EXP 23
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// canExitBattlefield = true ;
 233: LD_ADDR_EXP 24
 237: PUSH
 238: LD_INT 1
 240: ST_TO_ADDR
// immortalSurvivors = false ;
 241: LD_ADDR_EXP 25
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// canDestroyBeriaBase = false ;
 249: LD_ADDR_EXP 28
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// kirovFactory = 0 ;
 257: LD_ADDR_EXP 21
 261: PUSH
 262: LD_INT 0
 264: ST_TO_ADDR
// kirovCompleteFactory = false ;
 265: LD_ADDR_EXP 22
 269: PUSH
 270: LD_INT 0
 272: ST_TO_ADDR
// PrepareRussians ;
 273: CALL 871 0 0
// PrepareAmericans ;
 277: CALL 5541 0 0
// Nef_PrepareNature ;
 281: CALL 19306 0 0
// MissionIntro ;
 285: CALL 12700 0 0
// end ; end_of_file
 289: LD_VAR 0 1
 293: RET
// export function InitMapConfig ; begin
 294: LD_INT 0
 296: PPUSH
// BaseMapConfig ;
 297: CALL 310 0 0
// MissionMapConfig ;
 301: CALL 408 0 0
// end ;
 305: LD_VAR 0 1
 309: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 310: LD_INT 0
 312: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 ] ;
 313: LD_ADDR_EXP 29
 317: PUSH
 318: LD_INT 8
 320: PUSH
 321: LD_INT 12
 323: PUSH
 324: LD_INT 6
 326: PUSH
 327: LD_INT 6
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: LIST
 334: LIST
 335: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 336: LD_ADDR_EXP 30
 340: PUSH
 341: LD_INT 2
 343: PUSH
 344: LD_INT 2
 346: PUSH
 347: LD_INT 2
 349: PUSH
 350: LD_INT 2
 352: PUSH
 353: EMPTY
 354: LIST
 355: LIST
 356: LIST
 357: LIST
 358: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 359: LD_ADDR_EXP 31
 363: PUSH
 364: LD_INT 5
 366: NEG
 367: PPUSH
 368: LD_INT 5
 370: PPUSH
 371: CALL_OW 12
 375: PUSH
 376: EMPTY
 377: LIST
 378: ST_TO_ADDR
// debugMode = 0 ;
 379: LD_ADDR_EXP 34
 383: PUSH
 384: LD_INT 0
 386: ST_TO_ADDR
// missionPrefix = 03_ ;
 387: LD_ADDR_EXP 32
 391: PUSH
 392: LD_STRING 03_
 394: ST_TO_ADDR
// previousMissionPrefix = 02_ ;
 395: LD_ADDR_EXP 33
 399: PUSH
 400: LD_STRING 02_
 402: ST_TO_ADDR
// end ;
 403: LD_VAR 0 1
 407: RET
// export baseUnitsToChoose , scholtzeSpawnPositions ; export timeToPrepareAttack ; export bonusResourcesCrates , bonusResourcesOil ; export enemySkillLevel ; export americanWeapons , russianWeapons ; export maxAmericanTroopsIgnore ; function MissionMapConfig ; begin
 408: LD_INT 0
 410: PPUSH
// baseUnitsToChoose = [ 7 , 6 , 6 ] [ Difficulty ] ;
 411: LD_ADDR_EXP 35
 415: PUSH
 416: LD_INT 7
 418: PUSH
 419: LD_INT 6
 421: PUSH
 422: LD_INT 6
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: PUSH
 430: LD_OWVAR 67
 434: ARRAY
 435: ST_TO_ADDR
// scholtzeSpawnPositions = [ [ 150 , 144 ] , [ 51 , 7 , 89 , 19 , 118 , 9 ] , [ 150 , 144 , 51 , 7 , 89 , 19 , 118 , 9 ] ] [ Difficulty ] ;
 436: LD_ADDR_EXP 36
 440: PUSH
 441: LD_INT 150
 443: PUSH
 444: LD_INT 144
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: PUSH
 451: LD_INT 51
 453: PUSH
 454: LD_INT 7
 456: PUSH
 457: LD_INT 89
 459: PUSH
 460: LD_INT 19
 462: PUSH
 463: LD_INT 118
 465: PUSH
 466: LD_INT 9
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_INT 150
 479: PUSH
 480: LD_INT 144
 482: PUSH
 483: LD_INT 51
 485: PUSH
 486: LD_INT 7
 488: PUSH
 489: LD_INT 89
 491: PUSH
 492: LD_INT 19
 494: PUSH
 495: LD_INT 118
 497: PUSH
 498: LD_INT 9
 500: PUSH
 501: EMPTY
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: PUSH
 516: LD_OWVAR 67
 520: ARRAY
 521: ST_TO_ADDR
// timeToPrepareAttack = [ 40 40$0 , 35 35$0 , 30 30$0 ] [ Difficulty ] ;
 522: LD_ADDR_EXP 37
 526: PUSH
 527: LD_INT 84000
 529: PUSH
 530: LD_INT 73500
 532: PUSH
 533: LD_INT 63000
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: LIST
 540: PUSH
 541: LD_OWVAR 67
 545: ARRAY
 546: ST_TO_ADDR
// bonusResourcesCrates = [ 150 , 100 , 50 ] [ Difficulty ] ;
 547: LD_ADDR_EXP 38
 551: PUSH
 552: LD_INT 150
 554: PUSH
 555: LD_INT 100
 557: PUSH
 558: LD_INT 50
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: LIST
 565: PUSH
 566: LD_OWVAR 67
 570: ARRAY
 571: ST_TO_ADDR
// bonusResourcesOil = [ 100 , 50 , 0 ] [ Difficulty ] ;
 572: LD_ADDR_EXP 39
 576: PUSH
 577: LD_INT 100
 579: PUSH
 580: LD_INT 50
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: LIST
 590: PUSH
 591: LD_OWVAR 67
 595: ARRAY
 596: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 597: LD_ADDR_EXP 40
 601: PUSH
 602: LD_INT 1
 604: PUSH
 605: LD_INT 2
 607: PUSH
 608: LD_INT 2
 610: PUSH
 611: EMPTY
 612: LIST
 613: LIST
 614: LIST
 615: PUSH
 616: LD_OWVAR 67
 620: ARRAY
 621: ST_TO_ADDR
// maxAmericanTroopsIgnore = [ 8 , 6 , 5 ] [ Difficulty ] ;
 622: LD_ADDR_EXP 43
 626: PUSH
 627: LD_INT 8
 629: PUSH
 630: LD_INT 6
 632: PUSH
 633: LD_INT 5
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: LIST
 640: PUSH
 641: LD_OWVAR 67
 645: ARRAY
 646: ST_TO_ADDR
// end ;
 647: LD_VAR 0 1
 651: RET
// every 0 0$1 trigger debugMode do var i ;
 652: LD_EXP 34
 656: IFFALSE 868
 658: GO 660
 660: DISABLE
 661: LD_INT 0
 663: PPUSH
// begin enable ;
 664: ENABLE
// FogOff ( your_side ) ;
 665: LD_OWVAR 2
 669: PPUSH
 670: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 674: LD_ADDR_VAR 0 1
 678: PUSH
 679: LD_INT 22
 681: PUSH
 682: LD_OWVAR 2
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: PUSH
 691: LD_INT 2
 693: PUSH
 694: LD_INT 21
 696: PUSH
 697: LD_INT 1
 699: PUSH
 700: EMPTY
 701: LIST
 702: LIST
 703: PUSH
 704: LD_INT 21
 706: PUSH
 707: LD_INT 2
 709: PUSH
 710: EMPTY
 711: LIST
 712: LIST
 713: PUSH
 714: EMPTY
 715: LIST
 716: LIST
 717: LIST
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: PPUSH
 723: CALL_OW 69
 727: PUSH
 728: FOR_IN
 729: IFFALSE 745
// SetLives ( i , 1000 ) ;
 731: LD_VAR 0 1
 735: PPUSH
 736: LD_INT 1000
 738: PPUSH
 739: CALL_OW 234
 743: GO 728
 745: POP
 746: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 747: LD_ADDR_VAR 0 1
 751: PUSH
 752: LD_INT 22
 754: PUSH
 755: LD_OWVAR 2
 759: PUSH
 760: EMPTY
 761: LIST
 762: LIST
 763: PUSH
 764: LD_INT 2
 766: PUSH
 767: LD_INT 30
 769: PUSH
 770: LD_INT 0
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: PUSH
 777: LD_INT 30
 779: PUSH
 780: LD_INT 1
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: LIST
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: PPUSH
 796: CALL_OW 69
 800: PUSH
 801: FOR_IN
 802: IFFALSE 866
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 804: LD_VAR 0 1
 808: PPUSH
 809: CALL_OW 274
 813: PPUSH
 814: LD_INT 1
 816: PPUSH
 817: LD_INT 9999
 819: PPUSH
 820: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 824: LD_VAR 0 1
 828: PPUSH
 829: CALL_OW 274
 833: PPUSH
 834: LD_INT 2
 836: PPUSH
 837: LD_INT 9999
 839: PPUSH
 840: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 844: LD_VAR 0 1
 848: PPUSH
 849: CALL_OW 274
 853: PPUSH
 854: LD_INT 3
 856: PPUSH
 857: LD_INT 9999
 859: PPUSH
 860: CALL_OW 277
// end ;
 864: GO 801
 866: POP
 867: POP
// end ; end_of_file
 868: PPOPN 1
 870: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 ; export Scholtze ; export other_survivors ; export playerVehicles ; export otherBeriaUnits , beriaBase , beriaDepot ; export Kurin , Popov , BelkovDialog ; export ruScout ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot ; export ru2_bar1 , ru2_bar2 ; export kirovEng ; export kirovBunkersToMountWeapon , kirovBunkersToOccupy ; export kirovTransportCargo ; export kirovAttackCargo , kirovAttackVehicles ; export secondBaseTeam ; export survivorsArabianAttack ; export survivorsToSpawn ; export neededUnitsSpawn ; export Grishko ; export function PrepareRussians ; begin
 871: LD_INT 0
 873: PPUSH
// neededUnitsSpawn = [ 0 , 0 , 0 , 0 ] ;
 874: LD_ADDR_EXP 75
 878: PUSH
 879: LD_INT 0
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: LD_INT 0
 887: PUSH
 888: LD_INT 0
 890: PUSH
 891: EMPTY
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: ST_TO_ADDR
// kirovAttackCargo = [ ] ;
 897: LD_ADDR_EXP 70
 901: PUSH
 902: EMPTY
 903: ST_TO_ADDR
// PrepareKirovBase ;
 904: CALL 1888 0 0
// KirovUpgradeBase ;
 908: CALL 9342 0 0
// PrepareHeroes ;
 912: CALL 941 0 0
// PrepareBeriaBase ;
 916: CALL 1290 0 0
// PrepareSecondBaseTeam ;
 920: CALL 3779 0 0
// PrepareDzerzhinskyBase ;
 924: CALL 2846 0 0
// PrepareOtherBuildings ;
 928: CALL 3351 0 0
// PrepareVehicles ;
 932: CALL 3155 0 0
// end ;
 936: LD_VAR 0 1
 940: RET
// function PrepareHeroes ; begin
 941: LD_INT 0
 943: PPUSH
// uc_side = 3 ;
 944: LD_ADDR_OWVAR 20
 948: PUSH
 949: LD_INT 3
 951: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true ) ;
 952: LD_ADDR_EXP 44
 956: PUSH
 957: LD_STRING Burlak
 959: PPUSH
 960: LD_INT 1
 962: PPUSH
 963: CALL 7029 0 2
 967: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true ) ;
 968: LD_ADDR_EXP 45
 972: PUSH
 973: LD_STRING Gnyevko
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: CALL 7029 0 2
 983: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true ) ;
 984: LD_ADDR_EXP 47
 988: PUSH
 989: LD_STRING Kovalyuk
 991: PPUSH
 992: LD_INT 1
 994: PPUSH
 995: CALL 7029 0 2
 999: ST_TO_ADDR
// Kirilenkova = CreateCharacter ( 01_Kirilenkova ) ;
1000: LD_ADDR_EXP 46
1004: PUSH
1005: LD_STRING 01_Kirilenkova
1007: PPUSH
1008: CALL_OW 34
1012: ST_TO_ADDR
// uc_side = 6 ;
1013: LD_ADDR_OWVAR 20
1017: PUSH
1018: LD_INT 6
1020: ST_TO_ADDR
// if not meetBelkovBrother and TestCharacters ( 02_Belkov ) then
1021: LD_EXP 1
1025: NOT
1026: PUSH
1027: LD_STRING 02_Belkov
1029: PPUSH
1030: CALL_OW 28
1034: AND
1035: IFFALSE 1127
// begin Belkov := PrepareUnitExt ( Belkov , true ) ;
1037: LD_ADDR_EXP 48
1041: PUSH
1042: LD_STRING Belkov
1044: PPUSH
1045: LD_INT 1
1047: PPUSH
1048: CALL 7029 0 2
1052: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , false ) ;
1053: LD_ADDR_EXP 49
1057: PUSH
1058: LD_STRING Belkov2
1060: PPUSH
1061: LD_INT 0
1063: PPUSH
1064: CALL 7029 0 2
1068: ST_TO_ADDR
// BelkovDialog = Belkov ;
1069: LD_ADDR_EXP 58
1073: PUSH
1074: LD_EXP 48
1078: ST_TO_ADDR
// PlaceUnitXY ( Belkov , 165 , 110 , false ) ;
1079: LD_EXP 48
1083: PPUSH
1084: LD_INT 165
1086: PPUSH
1087: LD_INT 110
1089: PPUSH
1090: LD_INT 0
1092: PPUSH
1093: CALL_OW 48
// PlaceUnitXYR ( Belkov2 , 159 , 107 , 5 , false ) ;
1097: LD_EXP 49
1101: PPUSH
1102: LD_INT 159
1104: PPUSH
1105: LD_INT 107
1107: PPUSH
1108: LD_INT 5
1110: PPUSH
1111: LD_INT 0
1113: PPUSH
1114: CALL_OW 50
// ComHold ( Belkov ) ;
1118: LD_EXP 48
1122: PPUSH
1123: CALL_OW 140
// end ; if meetBelkovBrother and TestCharacters ( 02_Belkov2 ) then
1127: LD_EXP 1
1131: PUSH
1132: LD_STRING 02_Belkov2
1134: PPUSH
1135: CALL_OW 28
1139: AND
1140: IFFALSE 1195
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1142: LD_ADDR_EXP 49
1146: PUSH
1147: LD_STRING Belkov2
1149: PPUSH
1150: LD_INT 1
1152: PPUSH
1153: CALL 7029 0 2
1157: ST_TO_ADDR
// BelkovDialog = Belkov2 ;
1158: LD_ADDR_EXP 58
1162: PUSH
1163: LD_EXP 49
1167: ST_TO_ADDR
// PlaceUnitXY ( Belkov2 , 165 , 110 , false ) ;
1168: LD_EXP 49
1172: PPUSH
1173: LD_INT 165
1175: PPUSH
1176: LD_INT 110
1178: PPUSH
1179: LD_INT 0
1181: PPUSH
1182: CALL_OW 48
// ComHold ( Belkov2 ) ;
1186: LD_EXP 49
1190: PPUSH
1191: CALL_OW 140
// end ; PlaceUnitXY ( Burlak , 164 , 108 , false ) ;
1195: LD_EXP 44
1199: PPUSH
1200: LD_INT 164
1202: PPUSH
1203: LD_INT 108
1205: PPUSH
1206: LD_INT 0
1208: PPUSH
1209: CALL_OW 48
// ComHold ( Burlak ) ;
1213: LD_EXP 44
1217: PPUSH
1218: CALL_OW 140
// PlaceUnitXYR ( Gnyevko , 159 , 107 , 5 , false ) ;
1222: LD_EXP 45
1226: PPUSH
1227: LD_INT 159
1229: PPUSH
1230: LD_INT 107
1232: PPUSH
1233: LD_INT 5
1235: PPUSH
1236: LD_INT 0
1238: PPUSH
1239: CALL_OW 50
// PlaceUnitXYR ( Kovalyuk , 159 , 107 , 5 , false ) ;
1243: LD_EXP 47
1247: PPUSH
1248: LD_INT 159
1250: PPUSH
1251: LD_INT 107
1253: PPUSH
1254: LD_INT 5
1256: PPUSH
1257: LD_INT 0
1259: PPUSH
1260: CALL_OW 50
// PlaceUnitXYR ( Kirilenkova , 159 , 107 , 5 , false ) ;
1264: LD_EXP 46
1268: PPUSH
1269: LD_INT 159
1271: PPUSH
1272: LD_INT 107
1274: PPUSH
1275: LD_INT 5
1277: PPUSH
1278: LD_INT 0
1280: PPUSH
1281: CALL_OW 50
// end ;
1285: LD_VAR 0 1
1289: RET
// function PrepareBeriaBase ; var i , bonusResources ; begin
1290: LD_INT 0
1292: PPUSH
1293: PPUSH
1294: PPUSH
// beriaBase = LoadVariable ( 02_BeriaBase_2 , [ ] ) ;
1295: LD_ADDR_EXP 54
1299: PUSH
1300: LD_STRING 02_BeriaBase_2
1302: PPUSH
1303: EMPTY
1304: PPUSH
1305: CALL_OW 30
1309: ST_TO_ADDR
// otherBeriaUnits = CreateCharacterSet ( 02_other_beria ) ;
1310: LD_ADDR_EXP 53
1314: PUSH
1315: LD_STRING 02_other_beria
1317: PPUSH
1318: CALL_OW 31
1322: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 02_other_survivors ) ;
1323: LD_ADDR_EXP 51
1327: PUSH
1328: LD_STRING 02_other_survivors
1330: PPUSH
1331: CALL_OW 31
1335: ST_TO_ADDR
// uc_side = 3 ;
1336: LD_ADDR_OWVAR 20
1340: PUSH
1341: LD_INT 3
1343: ST_TO_ADDR
// uc_nation = 3 ;
1344: LD_ADDR_OWVAR 21
1348: PUSH
1349: LD_INT 3
1351: ST_TO_ADDR
// for i := 1 to beriaBase do
1352: LD_ADDR_VAR 0 2
1356: PUSH
1357: DOUBLE
1358: LD_INT 1
1360: DEC
1361: ST_TO_ADDR
1362: LD_EXP 54
1366: PUSH
1367: FOR_TO
1368: IFFALSE 1621
// begin bc_type = beriaBase [ i ] [ 1 ] ;
1370: LD_ADDR_OWVAR 42
1374: PUSH
1375: LD_EXP 54
1379: PUSH
1380: LD_VAR 0 2
1384: ARRAY
1385: PUSH
1386: LD_INT 1
1388: ARRAY
1389: ST_TO_ADDR
// bc_level = beriaBase [ i ] [ 5 ] ;
1390: LD_ADDR_OWVAR 43
1394: PUSH
1395: LD_EXP 54
1399: PUSH
1400: LD_VAR 0 2
1404: ARRAY
1405: PUSH
1406: LD_INT 5
1408: ARRAY
1409: ST_TO_ADDR
// if bc_type = b_lab then
1410: LD_OWVAR 42
1414: PUSH
1415: LD_INT 6
1417: EQUAL
1418: IFFALSE 1436
// begin bc_kind1 = b_lab_basic ;
1420: LD_ADDR_OWVAR 44
1424: PUSH
1425: LD_INT 9
1427: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
1428: LD_ADDR_OWVAR 45
1432: PUSH
1433: LD_INT 9
1435: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
1436: LD_OWVAR 42
1440: PUSH
1441: LD_INT 7
1443: EQUAL
1444: PUSH
1445: LD_OWVAR 42
1449: PUSH
1450: LD_INT 8
1452: EQUAL
1453: OR
1454: IFFALSE 1570
// begin if beriaBase [ i ] [ 7 ] then
1456: LD_EXP 54
1460: PUSH
1461: LD_VAR 0 2
1465: ARRAY
1466: PUSH
1467: LD_INT 7
1469: ARRAY
1470: IFFALSE 1492
// bc_kind1 = beriaBase [ i ] [ 7 ] ;
1472: LD_ADDR_OWVAR 44
1476: PUSH
1477: LD_EXP 54
1481: PUSH
1482: LD_VAR 0 2
1486: ARRAY
1487: PUSH
1488: LD_INT 7
1490: ARRAY
1491: ST_TO_ADDR
// if beriaBase [ i ] [ 8 ] then
1492: LD_EXP 54
1496: PUSH
1497: LD_VAR 0 2
1501: ARRAY
1502: PUSH
1503: LD_INT 8
1505: ARRAY
1506: IFFALSE 1528
// bc_kind2 = beriaBase [ i ] [ 8 ] ;
1508: LD_ADDR_OWVAR 45
1512: PUSH
1513: LD_EXP 54
1517: PUSH
1518: LD_VAR 0 2
1522: ARRAY
1523: PUSH
1524: LD_INT 8
1526: ARRAY
1527: ST_TO_ADDR
// if not beriaBase [ i ] [ 7 ] and not beriaBase [ i ] [ 8 ] then
1528: LD_EXP 54
1532: PUSH
1533: LD_VAR 0 2
1537: ARRAY
1538: PUSH
1539: LD_INT 7
1541: ARRAY
1542: NOT
1543: PUSH
1544: LD_EXP 54
1548: PUSH
1549: LD_VAR 0 2
1553: ARRAY
1554: PUSH
1555: LD_INT 8
1557: ARRAY
1558: NOT
1559: AND
1560: IFFALSE 1570
// bc_type := b_lab ;
1562: LD_ADDR_OWVAR 42
1566: PUSH
1567: LD_INT 6
1569: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 2 ] , beriaBase [ i ] [ 3 ] , beriaBase [ i ] [ 4 ] ) ;
1570: LD_EXP 54
1574: PUSH
1575: LD_VAR 0 2
1579: ARRAY
1580: PUSH
1581: LD_INT 2
1583: ARRAY
1584: PPUSH
1585: LD_EXP 54
1589: PUSH
1590: LD_VAR 0 2
1594: ARRAY
1595: PUSH
1596: LD_INT 3
1598: ARRAY
1599: PPUSH
1600: LD_EXP 54
1604: PUSH
1605: LD_VAR 0 2
1609: ARRAY
1610: PUSH
1611: LD_INT 4
1613: ARRAY
1614: PPUSH
1615: CALL_OW 47
// end ;
1619: GO 1367
1621: POP
1622: POP
// beriaDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1623: LD_ADDR_EXP 55
1627: PUSH
1628: LD_INT 22
1630: PUSH
1631: LD_INT 3
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PUSH
1638: LD_INT 30
1640: PUSH
1641: LD_INT 0
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PPUSH
1652: CALL_OW 69
1656: PUSH
1657: LD_INT 1
1659: ARRAY
1660: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1661: LD_EXP 55
1665: PPUSH
1666: LD_STRING beria
1668: PPUSH
1669: CALL_OW 500
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , cratesResources ) ;
1673: LD_EXP 55
1677: PPUSH
1678: CALL_OW 274
1682: PPUSH
1683: LD_INT 1
1685: PPUSH
1686: LD_EXP 2
1690: PPUSH
1691: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , oilResources ) ;
1695: LD_EXP 55
1699: PPUSH
1700: CALL_OW 274
1704: PPUSH
1705: LD_INT 2
1707: PPUSH
1708: LD_EXP 3
1712: PPUSH
1713: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesCrates ) ;
1717: LD_EXP 55
1721: PPUSH
1722: CALL_OW 274
1726: PPUSH
1727: LD_INT 1
1729: PPUSH
1730: LD_EXP 55
1734: PPUSH
1735: CALL_OW 274
1739: PPUSH
1740: LD_INT 2
1742: PPUSH
1743: CALL_OW 275
1747: PUSH
1748: LD_EXP 38
1752: PLUS
1753: PPUSH
1754: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesOil ) ;
1758: LD_EXP 55
1762: PPUSH
1763: CALL_OW 274
1767: PPUSH
1768: LD_INT 2
1770: PPUSH
1771: LD_EXP 55
1775: PPUSH
1776: CALL_OW 274
1780: PPUSH
1781: LD_INT 2
1783: PPUSH
1784: CALL_OW 275
1788: PUSH
1789: LD_EXP 39
1793: PLUS
1794: PPUSH
1795: CALL_OW 277
// uc_side = 6 ;
1799: LD_ADDR_OWVAR 20
1803: PUSH
1804: LD_INT 6
1806: ST_TO_ADDR
// for i in otherBeriaUnits do
1807: LD_ADDR_VAR 0 2
1811: PUSH
1812: LD_EXP 53
1816: PUSH
1817: FOR_IN
1818: IFFALSE 1843
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
1820: LD_VAR 0 2
1824: PPUSH
1825: LD_INT 159
1827: PPUSH
1828: LD_INT 107
1830: PPUSH
1831: LD_INT 10
1833: PPUSH
1834: LD_INT 0
1836: PPUSH
1837: CALL_OW 50
1841: GO 1817
1843: POP
1844: POP
// for i in other_survivors do
1845: LD_ADDR_VAR 0 2
1849: PUSH
1850: LD_EXP 51
1854: PUSH
1855: FOR_IN
1856: IFFALSE 1881
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
1858: LD_VAR 0 2
1862: PPUSH
1863: LD_INT 159
1865: PPUSH
1866: LD_INT 107
1868: PPUSH
1869: LD_INT 10
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 50
1879: GO 1855
1881: POP
1882: POP
// end ;
1883: LD_VAR 0 1
1887: RET
// function PrepareKirovBase ; var i , bunkerCounter ; begin
1888: LD_INT 0
1890: PPUSH
1891: PPUSH
1892: PPUSH
// kirovBase = LoadVariable ( 02_KirovBase_3 , [ ] ) ;
1893: LD_ADDR_EXP 61
1897: PUSH
1898: LD_STRING 02_KirovBase_3
1900: PPUSH
1901: EMPTY
1902: PPUSH
1903: CALL_OW 30
1907: ST_TO_ADDR
// otherKirovUnits = CreateCharacterSet ( 02_other_kirov ) ;
1908: LD_ADDR_EXP 60
1912: PUSH
1913: LD_STRING 02_other_kirov
1915: PPUSH
1916: CALL_OW 31
1920: ST_TO_ADDR
// uc_side = 6 ;
1921: LD_ADDR_OWVAR 20
1925: PUSH
1926: LD_INT 6
1928: ST_TO_ADDR
// uc_nation = 3 ;
1929: LD_ADDR_OWVAR 21
1933: PUSH
1934: LD_INT 3
1936: ST_TO_ADDR
// for i := 1 to kirovBase do
1937: LD_ADDR_VAR 0 2
1941: PUSH
1942: DOUBLE
1943: LD_INT 1
1945: DEC
1946: ST_TO_ADDR
1947: LD_EXP 61
1951: PUSH
1952: FOR_TO
1953: IFFALSE 2266
// begin bc_type = kirovBase [ i ] [ 1 ] ;
1955: LD_ADDR_OWVAR 42
1959: PUSH
1960: LD_EXP 61
1964: PUSH
1965: LD_VAR 0 2
1969: ARRAY
1970: PUSH
1971: LD_INT 1
1973: ARRAY
1974: ST_TO_ADDR
// bc_level = kirovBase [ i ] [ 5 ] ;
1975: LD_ADDR_OWVAR 43
1979: PUSH
1980: LD_EXP 61
1984: PUSH
1985: LD_VAR 0 2
1989: ARRAY
1990: PUSH
1991: LD_INT 5
1993: ARRAY
1994: ST_TO_ADDR
// if bc_type = b_depot then
1995: LD_OWVAR 42
1999: PUSH
2000: LD_INT 0
2002: EQUAL
2003: IFFALSE 2013
// bc_type = b_warehouse ;
2005: LD_ADDR_OWVAR 42
2009: PUSH
2010: LD_INT 1
2012: ST_TO_ADDR
// if bc_type = b_armoury then
2013: LD_OWVAR 42
2017: PUSH
2018: LD_INT 4
2020: EQUAL
2021: IFFALSE 2031
// bc_type = b_barracks ;
2023: LD_ADDR_OWVAR 42
2027: PUSH
2028: LD_INT 5
2030: ST_TO_ADDR
// if bc_type = b_lab then
2031: LD_OWVAR 42
2035: PUSH
2036: LD_INT 6
2038: EQUAL
2039: IFFALSE 2057
// begin bc_kind1 = b_lab_basic ;
2041: LD_ADDR_OWVAR 44
2045: PUSH
2046: LD_INT 9
2048: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2049: LD_ADDR_OWVAR 45
2053: PUSH
2054: LD_INT 9
2056: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
2057: LD_OWVAR 42
2061: PUSH
2062: LD_INT 7
2064: EQUAL
2065: PUSH
2066: LD_OWVAR 42
2070: PUSH
2071: LD_INT 8
2073: EQUAL
2074: OR
2075: IFFALSE 2191
// begin if kirovBase [ i ] [ 7 ] then
2077: LD_EXP 61
2081: PUSH
2082: LD_VAR 0 2
2086: ARRAY
2087: PUSH
2088: LD_INT 7
2090: ARRAY
2091: IFFALSE 2113
// bc_kind1 = kirovBase [ i ] [ 7 ] ;
2093: LD_ADDR_OWVAR 44
2097: PUSH
2098: LD_EXP 61
2102: PUSH
2103: LD_VAR 0 2
2107: ARRAY
2108: PUSH
2109: LD_INT 7
2111: ARRAY
2112: ST_TO_ADDR
// if kirovBase [ i ] [ 8 ] then
2113: LD_EXP 61
2117: PUSH
2118: LD_VAR 0 2
2122: ARRAY
2123: PUSH
2124: LD_INT 8
2126: ARRAY
2127: IFFALSE 2149
// bc_kind2 = kirovBase [ i ] [ 8 ] ;
2129: LD_ADDR_OWVAR 45
2133: PUSH
2134: LD_EXP 61
2138: PUSH
2139: LD_VAR 0 2
2143: ARRAY
2144: PUSH
2145: LD_INT 8
2147: ARRAY
2148: ST_TO_ADDR
// if not kirovBase [ i ] [ 7 ] and not kirovBase [ i ] [ 8 ] then
2149: LD_EXP 61
2153: PUSH
2154: LD_VAR 0 2
2158: ARRAY
2159: PUSH
2160: LD_INT 7
2162: ARRAY
2163: NOT
2164: PUSH
2165: LD_EXP 61
2169: PUSH
2170: LD_VAR 0 2
2174: ARRAY
2175: PUSH
2176: LD_INT 8
2178: ARRAY
2179: NOT
2180: AND
2181: IFFALSE 2191
// bc_type := b_lab ;
2183: LD_ADDR_OWVAR 42
2187: PUSH
2188: LD_INT 6
2190: ST_TO_ADDR
// end ; if bc_type = b_breastwork then
2191: LD_OWVAR 42
2195: PUSH
2196: LD_INT 31
2198: EQUAL
2199: IFFALSE 2215
// bunkerCounter = bunkerCounter + 1 ;
2201: LD_ADDR_VAR 0 3
2205: PUSH
2206: LD_VAR 0 3
2210: PUSH
2211: LD_INT 1
2213: PLUS
2214: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 2 ] , kirovBase [ i ] [ 3 ] , kirovBase [ i ] [ 4 ] ) ;
2215: LD_EXP 61
2219: PUSH
2220: LD_VAR 0 2
2224: ARRAY
2225: PUSH
2226: LD_INT 2
2228: ARRAY
2229: PPUSH
2230: LD_EXP 61
2234: PUSH
2235: LD_VAR 0 2
2239: ARRAY
2240: PUSH
2241: LD_INT 3
2243: ARRAY
2244: PPUSH
2245: LD_EXP 61
2249: PUSH
2250: LD_VAR 0 2
2254: ARRAY
2255: PUSH
2256: LD_INT 4
2258: ARRAY
2259: PPUSH
2260: CALL_OW 47
// end ;
2264: GO 1952
2266: POP
2267: POP
// kirovDepot = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
2268: LD_ADDR_EXP 62
2272: PUSH
2273: LD_INT 22
2275: PUSH
2276: LD_INT 6
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: PUSH
2283: LD_INT 30
2285: PUSH
2286: LD_INT 1
2288: PUSH
2289: EMPTY
2290: LIST
2291: LIST
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: PPUSH
2297: CALL_OW 69
2301: PUSH
2302: LD_INT 1
2304: ARRAY
2305: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
2306: LD_EXP 62
2310: PPUSH
2311: LD_STRING kirov
2313: PPUSH
2314: CALL_OW 500
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 5000 ) ;
2318: LD_EXP 62
2322: PPUSH
2323: CALL_OW 274
2327: PPUSH
2328: LD_INT 1
2330: PPUSH
2331: LD_INT 5000
2333: PPUSH
2334: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 2000 ) ;
2338: LD_EXP 62
2342: PPUSH
2343: CALL_OW 274
2347: PPUSH
2348: LD_INT 2
2350: PPUSH
2351: LD_INT 2000
2353: PPUSH
2354: CALL_OW 277
// ru2_bar1 = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) , 145 , 102 ) ;
2358: LD_ADDR_EXP 64
2362: PUSH
2363: LD_INT 22
2365: PUSH
2366: LD_INT 6
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: PUSH
2373: LD_INT 21
2375: PUSH
2376: LD_INT 3
2378: PUSH
2379: EMPTY
2380: LIST
2381: LIST
2382: PUSH
2383: LD_INT 30
2385: PUSH
2386: LD_INT 5
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: LIST
2397: PPUSH
2398: CALL_OW 69
2402: PPUSH
2403: LD_INT 145
2405: PPUSH
2406: LD_INT 102
2408: PPUSH
2409: CALL_OW 73
2413: ST_TO_ADDR
// ru2_bar2 = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) diff ru2_bar1 ;
2414: LD_ADDR_EXP 65
2418: PUSH
2419: LD_INT 22
2421: PUSH
2422: LD_INT 6
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PUSH
2429: LD_INT 21
2431: PUSH
2432: LD_INT 3
2434: PUSH
2435: EMPTY
2436: LIST
2437: LIST
2438: PUSH
2439: LD_INT 30
2441: PUSH
2442: LD_INT 5
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: LIST
2453: PPUSH
2454: CALL_OW 69
2458: PUSH
2459: LD_EXP 64
2463: DIFF
2464: ST_TO_ADDR
// ru2_bar2 = ru2_bar2 [ 1 ] ;
2465: LD_ADDR_EXP 65
2469: PUSH
2470: LD_EXP 65
2474: PUSH
2475: LD_INT 1
2477: ARRAY
2478: ST_TO_ADDR
// Kurin = PrepareUnitExt ( Kurin , false ) ;
2479: LD_ADDR_EXP 56
2483: PUSH
2484: LD_STRING Kurin
2486: PPUSH
2487: LD_INT 0
2489: PPUSH
2490: CALL 7029 0 2
2494: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 166 , 109 , false ) ;
2495: LD_EXP 56
2499: PPUSH
2500: LD_INT 166
2502: PPUSH
2503: LD_INT 109
2505: PPUSH
2506: LD_INT 0
2508: PPUSH
2509: CALL_OW 48
// ComHold ( Kurin ) ;
2513: LD_EXP 56
2517: PPUSH
2518: CALL_OW 140
// PrepareEngineer ( false , 7 ) ;
2522: LD_INT 0
2524: PPUSH
2525: LD_INT 7
2527: PPUSH
2528: CALL_OW 382
// kirovEng = CreateHuman ;
2532: LD_ADDR_EXP 66
2536: PUSH
2537: CALL_OW 44
2541: ST_TO_ADDR
// PlaceUnitXYR ( kirovEng , 159 , 107 , 10 , false ) ;
2542: LD_EXP 66
2546: PPUSH
2547: LD_INT 159
2549: PPUSH
2550: LD_INT 107
2552: PPUSH
2553: LD_INT 10
2555: PPUSH
2556: LD_INT 0
2558: PPUSH
2559: CALL_OW 50
// Popov = PrepareUnitExt ( Popov , false ) ;
2563: LD_ADDR_EXP 57
2567: PUSH
2568: LD_STRING Popov
2570: PPUSH
2571: LD_INT 0
2573: PPUSH
2574: CALL 7029 0 2
2578: ST_TO_ADDR
// PlaceUnitArea ( Popov , PopovSpawnArea , false ) ;
2579: LD_EXP 57
2583: PPUSH
2584: LD_INT 4
2586: PPUSH
2587: LD_INT 0
2589: PPUSH
2590: CALL_OW 49
// ComTurnXY ( Popov , 98 , 36 ) ;
2594: LD_EXP 57
2598: PPUSH
2599: LD_INT 98
2601: PPUSH
2602: LD_INT 36
2604: PPUSH
2605: CALL_OW 118
// hc_name :=  ;
2609: LD_ADDR_OWVAR 26
2613: PUSH
2614: LD_STRING 
2616: ST_TO_ADDR
// hc_gallery :=  ;
2617: LD_ADDR_OWVAR 33
2621: PUSH
2622: LD_STRING 
2624: ST_TO_ADDR
// PrepareSoldier ( false , 2 ) ;
2625: LD_INT 0
2627: PPUSH
2628: LD_INT 2
2630: PPUSH
2631: CALL_OW 381
// ruScout = CreateHuman ;
2635: LD_ADDR_EXP 59
2639: PUSH
2640: CALL_OW 44
2644: ST_TO_ADDR
// PlaceUnitArea ( ruScout , RuScoutSpawnArea , false ) ;
2645: LD_EXP 59
2649: PPUSH
2650: LD_INT 3
2652: PPUSH
2653: LD_INT 0
2655: PPUSH
2656: CALL_OW 49
// ComCrawl ( ruScout ) ;
2660: LD_EXP 59
2664: PPUSH
2665: CALL_OW 137
// AddComTurnXY ( ruScout , 98 , 36 ) ;
2669: LD_EXP 59
2673: PPUSH
2674: LD_INT 98
2676: PPUSH
2677: LD_INT 36
2679: PPUSH
2680: CALL_OW 178
// uc_side = 6 ;
2684: LD_ADDR_OWVAR 20
2688: PUSH
2689: LD_INT 6
2691: ST_TO_ADDR
// for i in otherKirovUnits do
2692: LD_ADDR_VAR 0 2
2696: PUSH
2697: LD_EXP 60
2701: PUSH
2702: FOR_IN
2703: IFFALSE 2839
// begin SetSide ( i , 6 ) ;
2705: LD_VAR 0 2
2709: PPUSH
2710: LD_INT 6
2712: PPUSH
2713: CALL_OW 235
// if GetClass ( i ) = class_soldier and bunkerCounter > 0 then
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL_OW 257
2726: PUSH
2727: LD_INT 1
2729: EQUAL
2730: PUSH
2731: LD_VAR 0 3
2735: PUSH
2736: LD_INT 0
2738: GREATER
2739: AND
2740: IFFALSE 2816
// begin PlaceHumanInBunker ( i , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) [ bunkerCounter ] ) ;
2742: LD_VAR 0 2
2746: PPUSH
2747: LD_INT 19
2749: PPUSH
2750: LD_INT 22
2752: PUSH
2753: LD_INT 6
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: PUSH
2760: LD_INT 21
2762: PUSH
2763: LD_INT 3
2765: PUSH
2766: EMPTY
2767: LIST
2768: LIST
2769: PUSH
2770: LD_INT 30
2772: PUSH
2773: LD_INT 31
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: LIST
2784: PPUSH
2785: CALL_OW 70
2789: PUSH
2790: LD_VAR 0 3
2794: ARRAY
2795: PPUSH
2796: CALL 7787 0 2
// bunkerCounter = bunkerCounter - 1 ;
2800: LD_ADDR_VAR 0 3
2804: PUSH
2805: LD_VAR 0 3
2809: PUSH
2810: LD_INT 1
2812: MINUS
2813: ST_TO_ADDR
// end else
2814: GO 2837
// begin PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
2816: LD_VAR 0 2
2820: PPUSH
2821: LD_INT 159
2823: PPUSH
2824: LD_INT 107
2826: PPUSH
2827: LD_INT 10
2829: PPUSH
2830: LD_INT 0
2832: PPUSH
2833: CALL_OW 50
// end ; end ;
2837: GO 2702
2839: POP
2840: POP
// end ;
2841: LD_VAR 0 1
2845: RET
// export function PrepareDzerzhinskyBase ; var i , un , turret ; begin
2846: LD_INT 0
2848: PPUSH
2849: PPUSH
2850: PPUSH
2851: PPUSH
// SetBName ( ru3_depot , dzerzhinsky ) ;
2852: LD_INT 226
2854: PPUSH
2855: LD_STRING dzerzhinsky
2857: PPUSH
2858: CALL_OW 500
// uc_side = 8 ;
2862: LD_ADDR_OWVAR 20
2866: PUSH
2867: LD_INT 8
2869: ST_TO_ADDR
// uc_nation = 3 ;
2870: LD_ADDR_OWVAR 21
2874: PUSH
2875: LD_INT 3
2877: ST_TO_ADDR
// Grishko = PrepareUnitExt ( Grishko , false ) ;
2878: LD_ADDR_EXP 76
2882: PUSH
2883: LD_STRING Grishko
2885: PPUSH
2886: LD_INT 0
2888: PPUSH
2889: CALL 7029 0 2
2893: ST_TO_ADDR
// PlaceUnitXYR ( Grishko , 210 , 39 , 3 , false ) ;
2894: LD_EXP 76
2898: PPUSH
2899: LD_INT 210
2901: PPUSH
2902: LD_INT 39
2904: PPUSH
2905: LD_INT 3
2907: PPUSH
2908: LD_INT 0
2910: PPUSH
2911: CALL_OW 50
// ComHold ( Grishko ) ;
2915: LD_EXP 76
2919: PPUSH
2920: CALL_OW 140
// hc_name :=  ;
2924: LD_ADDR_OWVAR 26
2928: PUSH
2929: LD_STRING 
2931: ST_TO_ADDR
// hc_gallery :=  ;
2932: LD_ADDR_OWVAR 33
2936: PUSH
2937: LD_STRING 
2939: ST_TO_ADDR
// for i := 1 to 3 do
2940: LD_ADDR_VAR 0 2
2944: PUSH
2945: DOUBLE
2946: LD_INT 1
2948: DEC
2949: ST_TO_ADDR
2950: LD_INT 3
2952: PUSH
2953: FOR_TO
2954: IFFALSE 2982
// begin PrepareSoldier ( false , enemySkillLevel ) ;
2956: LD_INT 0
2958: PPUSH
2959: LD_EXP 40
2963: PPUSH
2964: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , ru3_bar ) ;
2968: CALL_OW 44
2972: PPUSH
2973: LD_INT 233
2975: PPUSH
2976: CALL_OW 52
// end ;
2980: GO 2953
2982: POP
2983: POP
// for i := 1 to 2 do
2984: LD_ADDR_VAR 0 2
2988: PUSH
2989: DOUBLE
2990: LD_INT 1
2992: DEC
2993: ST_TO_ADDR
2994: LD_INT 2
2996: PUSH
2997: FOR_TO
2998: IFFALSE 3026
// begin PrepareScientist ( false , enemySkillLevel ) ;
3000: LD_INT 0
3002: PPUSH
3003: LD_EXP 40
3007: PPUSH
3008: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , ru3_lab ) ;
3012: CALL_OW 44
3016: PPUSH
3017: LD_INT 262
3019: PPUSH
3020: CALL_OW 52
// end ;
3024: GO 2997
3026: POP
3027: POP
// for i := 1 to 3 do
3028: LD_ADDR_VAR 0 2
3032: PUSH
3033: DOUBLE
3034: LD_INT 1
3036: DEC
3037: ST_TO_ADDR
3038: LD_INT 3
3040: PUSH
3041: FOR_TO
3042: IFFALSE 3070
// begin PrepareMechanic ( false , enemySkillLevel ) ;
3044: LD_INT 0
3046: PPUSH
3047: LD_EXP 40
3051: PPUSH
3052: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ru3_fac ) ;
3056: CALL_OW 44
3060: PPUSH
3061: LD_INT 266
3063: PPUSH
3064: CALL_OW 52
// end ;
3068: GO 3041
3070: POP
3071: POP
// for turret in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
3072: LD_ADDR_VAR 0 4
3076: PUSH
3077: LD_INT 22
3079: PUSH
3080: LD_INT 8
3082: PUSH
3083: EMPTY
3084: LIST
3085: LIST
3086: PUSH
3087: LD_INT 21
3089: PUSH
3090: LD_INT 3
3092: PUSH
3093: EMPTY
3094: LIST
3095: LIST
3096: PUSH
3097: LD_INT 30
3099: PUSH
3100: LD_INT 32
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: EMPTY
3108: LIST
3109: LIST
3110: LIST
3111: PPUSH
3112: CALL_OW 69
3116: PUSH
3117: FOR_IN
3118: IFFALSE 3148
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3120: LD_INT 0
3122: PPUSH
3123: LD_EXP 40
3127: PPUSH
3128: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , turret ) ;
3132: CALL_OW 44
3136: PPUSH
3137: LD_VAR 0 4
3141: PPUSH
3142: CALL_OW 52
// end ;
3146: GO 3117
3148: POP
3149: POP
// end ;
3150: LD_VAR 0 1
3154: RET
// export function PrepareVehicles ; var i , vehicle ; begin
3155: LD_INT 0
3157: PPUSH
3158: PPUSH
3159: PPUSH
// uc_side = 3 ;
3160: LD_ADDR_OWVAR 20
3164: PUSH
3165: LD_INT 3
3167: ST_TO_ADDR
// uc_nation = 3 ;
3168: LD_ADDR_OWVAR 21
3172: PUSH
3173: LD_INT 3
3175: ST_TO_ADDR
// for i := 1 to vehiclesPreviousMission do
3176: LD_ADDR_VAR 0 2
3180: PUSH
3181: DOUBLE
3182: LD_INT 1
3184: DEC
3185: ST_TO_ADDR
3186: LD_EXP 4
3190: PUSH
3191: FOR_TO
3192: IFFALSE 3344
// begin PrepareVehicle ( vehiclesPreviousMission [ i ] [ 1 ] , vehiclesPreviousMission [ i ] [ 2 ] , vehiclesPreviousMission [ i ] [ 3 ] , vehiclesPreviousMission [ i ] [ 4 ] , vehiclesPreviousMission [ i ] [ 5 ] ) ;
3194: LD_EXP 4
3198: PUSH
3199: LD_VAR 0 2
3203: ARRAY
3204: PUSH
3205: LD_INT 1
3207: ARRAY
3208: PPUSH
3209: LD_EXP 4
3213: PUSH
3214: LD_VAR 0 2
3218: ARRAY
3219: PUSH
3220: LD_INT 2
3222: ARRAY
3223: PPUSH
3224: LD_EXP 4
3228: PUSH
3229: LD_VAR 0 2
3233: ARRAY
3234: PUSH
3235: LD_INT 3
3237: ARRAY
3238: PPUSH
3239: LD_EXP 4
3243: PUSH
3244: LD_VAR 0 2
3248: ARRAY
3249: PUSH
3250: LD_INT 4
3252: ARRAY
3253: PPUSH
3254: LD_EXP 4
3258: PUSH
3259: LD_VAR 0 2
3263: ARRAY
3264: PUSH
3265: LD_INT 5
3267: ARRAY
3268: PPUSH
3269: CALL 49958 0 5
// vehicle = CreateVehicle ;
3273: LD_ADDR_VAR 0 3
3277: PUSH
3278: CALL_OW 45
3282: ST_TO_ADDR
// PlaceUnitXYR ( vehicle , GetX ( beriaDepot ) , GetY ( beriaDepot ) , 7 , false ) ;
3283: LD_VAR 0 3
3287: PPUSH
3288: LD_EXP 55
3292: PPUSH
3293: CALL_OW 250
3297: PPUSH
3298: LD_EXP 55
3302: PPUSH
3303: CALL_OW 251
3307: PPUSH
3308: LD_INT 7
3310: PPUSH
3311: LD_INT 0
3313: PPUSH
3314: CALL_OW 50
// SetLives ( vehicle , vehiclesPreviousMission [ i ] [ 6 ] ) ;
3318: LD_VAR 0 3
3322: PPUSH
3323: LD_EXP 4
3327: PUSH
3328: LD_VAR 0 2
3332: ARRAY
3333: PUSH
3334: LD_INT 6
3336: ARRAY
3337: PPUSH
3338: CALL_OW 234
// end ;
3342: GO 3191
3344: POP
3345: POP
// end ;
3346: LD_VAR 0 1
3350: RET
// export function PrepareOtherBuildings ; var i , otherBuildings , building ; begin
3351: LD_INT 0
3353: PPUSH
3354: PPUSH
3355: PPUSH
3356: PPUSH
// otherBuildings = LoadVariable ( 02_PlayerAmericanBuildings_4 , [ ] ) ;
3357: LD_ADDR_VAR 0 3
3361: PUSH
3362: LD_STRING 02_PlayerAmericanBuildings_4
3364: PPUSH
3365: EMPTY
3366: PPUSH
3367: CALL_OW 30
3371: ST_TO_ADDR
// uc_side = 3 ;
3372: LD_ADDR_OWVAR 20
3376: PUSH
3377: LD_INT 3
3379: ST_TO_ADDR
// uc_nation = 1 ;
3380: LD_ADDR_OWVAR 21
3384: PUSH
3385: LD_INT 1
3387: ST_TO_ADDR
// for i := 1 to otherBuildings do
3388: LD_ADDR_VAR 0 2
3392: PUSH
3393: DOUBLE
3394: LD_INT 1
3396: DEC
3397: ST_TO_ADDR
3398: LD_VAR 0 3
3402: PUSH
3403: FOR_TO
3404: IFFALSE 3527
// begin bc_type = otherBuildings [ i ] [ 1 ] ;
3406: LD_ADDR_OWVAR 42
3410: PUSH
3411: LD_VAR 0 3
3415: PUSH
3416: LD_VAR 0 2
3420: ARRAY
3421: PUSH
3422: LD_INT 1
3424: ARRAY
3425: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3426: LD_ADDR_OWVAR 43
3430: PUSH
3431: LD_VAR 0 3
3435: PUSH
3436: LD_VAR 0 2
3440: ARRAY
3441: PUSH
3442: LD_INT 5
3444: ARRAY
3445: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3446: LD_ADDR_VAR 0 4
3450: PUSH
3451: LD_VAR 0 3
3455: PUSH
3456: LD_VAR 0 2
3460: ARRAY
3461: PUSH
3462: LD_INT 2
3464: ARRAY
3465: PPUSH
3466: LD_VAR 0 3
3470: PUSH
3471: LD_VAR 0 2
3475: ARRAY
3476: PUSH
3477: LD_INT 3
3479: ARRAY
3480: PPUSH
3481: LD_VAR 0 3
3485: PUSH
3486: LD_VAR 0 2
3490: ARRAY
3491: PUSH
3492: LD_INT 4
3494: ARRAY
3495: PPUSH
3496: CALL_OW 47
3500: ST_TO_ADDR
// SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3501: LD_VAR 0 4
3505: PPUSH
3506: LD_VAR 0 3
3510: PUSH
3511: LD_VAR 0 2
3515: ARRAY
3516: PUSH
3517: LD_INT 7
3519: ARRAY
3520: PPUSH
3521: CALL_OW 234
// end ;
3525: GO 3403
3527: POP
3528: POP
// otherBuildings = LoadVariable ( 02_AmericanBuildings_5 , [ ] ) ;
3529: LD_ADDR_VAR 0 3
3533: PUSH
3534: LD_STRING 02_AmericanBuildings_5
3536: PPUSH
3537: EMPTY
3538: PPUSH
3539: CALL_OW 30
3543: ST_TO_ADDR
// uc_side = 1 ;
3544: LD_ADDR_OWVAR 20
3548: PUSH
3549: LD_INT 1
3551: ST_TO_ADDR
// for i := 1 to otherBuildings do
3552: LD_ADDR_VAR 0 2
3556: PUSH
3557: DOUBLE
3558: LD_INT 1
3560: DEC
3561: ST_TO_ADDR
3562: LD_VAR 0 3
3566: PUSH
3567: FOR_TO
3568: IFFALSE 3772
// begin bc_type = otherBuildings [ i ] [ 1 ] ;
3570: LD_ADDR_OWVAR 42
3574: PUSH
3575: LD_VAR 0 3
3579: PUSH
3580: LD_VAR 0 2
3584: ARRAY
3585: PUSH
3586: LD_INT 1
3588: ARRAY
3589: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3590: LD_ADDR_OWVAR 43
3594: PUSH
3595: LD_VAR 0 3
3599: PUSH
3600: LD_VAR 0 2
3604: ARRAY
3605: PUSH
3606: LD_INT 5
3608: ARRAY
3609: ST_TO_ADDR
// if bc_type = b_breastwork then
3610: LD_OWVAR 42
3614: PUSH
3615: LD_INT 31
3617: EQUAL
3618: IFFALSE 3691
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3620: LD_ADDR_VAR 0 4
3624: PUSH
3625: LD_VAR 0 3
3629: PUSH
3630: LD_VAR 0 2
3634: ARRAY
3635: PUSH
3636: LD_INT 2
3638: ARRAY
3639: PPUSH
3640: LD_VAR 0 3
3644: PUSH
3645: LD_VAR 0 2
3649: ARRAY
3650: PUSH
3651: LD_INT 3
3653: ARRAY
3654: PPUSH
3655: LD_VAR 0 3
3659: PUSH
3660: LD_VAR 0 2
3664: ARRAY
3665: PUSH
3666: LD_INT 4
3668: ARRAY
3669: PPUSH
3670: CALL_OW 47
3674: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , building ) ;
3675: LD_EXP 40
3679: PPUSH
3680: LD_VAR 0 4
3684: PPUSH
3685: CALL 7877 0 2
// end else
3689: GO 3746
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3691: LD_ADDR_VAR 0 4
3695: PUSH
3696: LD_VAR 0 3
3700: PUSH
3701: LD_VAR 0 2
3705: ARRAY
3706: PUSH
3707: LD_INT 2
3709: ARRAY
3710: PPUSH
3711: LD_VAR 0 3
3715: PUSH
3716: LD_VAR 0 2
3720: ARRAY
3721: PUSH
3722: LD_INT 3
3724: ARRAY
3725: PPUSH
3726: LD_VAR 0 3
3730: PUSH
3731: LD_VAR 0 2
3735: ARRAY
3736: PUSH
3737: LD_INT 4
3739: ARRAY
3740: PPUSH
3741: CALL_OW 47
3745: ST_TO_ADDR
// end ; SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3746: LD_VAR 0 4
3750: PPUSH
3751: LD_VAR 0 3
3755: PUSH
3756: LD_VAR 0 2
3760: ARRAY
3761: PUSH
3762: LD_INT 7
3764: ARRAY
3765: PPUSH
3766: CALL_OW 234
// end ;
3770: GO 3567
3772: POP
3773: POP
// end ;
3774: LD_VAR 0 1
3778: RET
// export function PrepareSecondBaseTeam ; var i ; begin
3779: LD_INT 0
3781: PPUSH
3782: PPUSH
// secondBaseTeam = [ ] ;
3783: LD_ADDR_EXP 72
3787: PUSH
3788: EMPTY
3789: ST_TO_ADDR
// uc_side = 6 ;
3790: LD_ADDR_OWVAR 20
3794: PUSH
3795: LD_INT 6
3797: ST_TO_ADDR
// uc_nation = 3 ;
3798: LD_ADDR_OWVAR 21
3802: PUSH
3803: LD_INT 3
3805: ST_TO_ADDR
// hc_name =  ;
3806: LD_ADDR_OWVAR 26
3810: PUSH
3811: LD_STRING 
3813: ST_TO_ADDR
// hc_gallery =  ;
3814: LD_ADDR_OWVAR 33
3818: PUSH
3819: LD_STRING 
3821: ST_TO_ADDR
// for i := 1 to 3 do
3822: LD_ADDR_VAR 0 2
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_INT 3
3834: PUSH
3835: FOR_TO
3836: IFFALSE 3889
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3838: LD_INT 0
3840: PPUSH
3841: LD_EXP 40
3845: PPUSH
3846: CALL_OW 381
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
3850: LD_ADDR_EXP 72
3854: PUSH
3855: LD_EXP 72
3859: PUSH
3860: CALL_OW 44
3864: ADD
3865: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ i ] , KirovSupportSpawnArea , false ) ;
3866: LD_EXP 72
3870: PUSH
3871: LD_VAR 0 2
3875: ARRAY
3876: PPUSH
3877: LD_INT 20
3879: PPUSH
3880: LD_INT 0
3882: PPUSH
3883: CALL_OW 49
// end ;
3887: GO 3835
3889: POP
3890: POP
// PrepareEngineer ( false , enemySkillLevel ) ;
3891: LD_INT 0
3893: PPUSH
3894: LD_EXP 40
3898: PPUSH
3899: CALL_OW 382
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
3903: LD_ADDR_EXP 72
3907: PUSH
3908: LD_EXP 72
3912: PUSH
3913: CALL_OW 44
3917: ADD
3918: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 4 ] , KirovSupportSpawnArea , false ) ;
3919: LD_EXP 72
3923: PUSH
3924: LD_INT 4
3926: ARRAY
3927: PPUSH
3928: LD_INT 20
3930: PPUSH
3931: LD_INT 0
3933: PPUSH
3934: CALL_OW 49
// PrepareScientist ( false , enemySkillLevel ) ;
3938: LD_INT 0
3940: PPUSH
3941: LD_EXP 40
3945: PPUSH
3946: CALL_OW 384
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
3950: LD_ADDR_EXP 72
3954: PUSH
3955: LD_EXP 72
3959: PUSH
3960: CALL_OW 44
3964: ADD
3965: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 5 ] , KirovSupportSpawnArea , false ) ;
3966: LD_EXP 72
3970: PUSH
3971: LD_INT 5
3973: ARRAY
3974: PPUSH
3975: LD_INT 20
3977: PPUSH
3978: LD_INT 0
3980: PPUSH
3981: CALL_OW 49
// ComMoveXY ( secondBaseTeam , 214 , 105 ) ;
3985: LD_EXP 72
3989: PPUSH
3990: LD_INT 214
3992: PPUSH
3993: LD_INT 105
3995: PPUSH
3996: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 222 , 115 , 0 ) ;
4000: LD_EXP 72
4004: PPUSH
4005: LD_INT 25
4007: PUSH
4008: LD_INT 2
4010: PUSH
4011: EMPTY
4012: LIST
4013: LIST
4014: PPUSH
4015: CALL_OW 72
4019: PPUSH
4020: LD_INT 0
4022: PPUSH
4023: LD_INT 222
4025: PPUSH
4026: LD_INT 115
4028: PPUSH
4029: LD_INT 0
4031: PPUSH
4032: CALL_OW 205
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 224 , 107 ) ;
4036: LD_EXP 72
4040: PPUSH
4041: LD_INT 25
4043: PUSH
4044: LD_INT 2
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PPUSH
4051: CALL_OW 72
4055: PPUSH
4056: LD_INT 224
4058: PPUSH
4059: LD_INT 107
4061: PPUSH
4062: CALL_OW 177
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 228 , 110 ) ;
4066: LD_EXP 72
4070: PPUSH
4071: LD_INT 25
4073: PUSH
4074: LD_INT 2
4076: PUSH
4077: EMPTY
4078: LIST
4079: LIST
4080: PPUSH
4081: CALL_OW 72
4085: PPUSH
4086: LD_INT 228
4088: PPUSH
4089: LD_INT 110
4091: PPUSH
4092: CALL_OW 177
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_armoury , 216 , 114 , 0 ) ;
4096: LD_EXP 72
4100: PPUSH
4101: LD_INT 25
4103: PUSH
4104: LD_INT 2
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: PPUSH
4111: CALL_OW 72
4115: PPUSH
4116: LD_INT 4
4118: PPUSH
4119: LD_INT 216
4121: PPUSH
4122: LD_INT 114
4124: PPUSH
4125: LD_INT 0
4127: PPUSH
4128: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 215 , 103 , 3 ) ;
4132: LD_EXP 72
4136: PPUSH
4137: LD_INT 25
4139: PUSH
4140: LD_INT 2
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: PPUSH
4147: CALL_OW 72
4151: PPUSH
4152: LD_INT 31
4154: PPUSH
4155: LD_INT 215
4157: PPUSH
4158: LD_INT 103
4160: PPUSH
4161: LD_INT 3
4163: PPUSH
4164: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 227 , 116 , 5 ) ;
4168: LD_EXP 72
4172: PPUSH
4173: LD_INT 25
4175: PUSH
4176: LD_INT 2
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PPUSH
4183: CALL_OW 72
4187: PPUSH
4188: LD_INT 31
4190: PPUSH
4191: LD_INT 227
4193: PPUSH
4194: LD_INT 116
4196: PPUSH
4197: LD_INT 5
4199: PPUSH
4200: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_oil_mine , 226 , 109 , 3 ) ;
4204: LD_EXP 72
4208: PPUSH
4209: LD_INT 25
4211: PUSH
4212: LD_INT 2
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PPUSH
4219: CALL_OW 72
4223: PPUSH
4224: LD_INT 29
4226: PPUSH
4227: LD_INT 226
4229: PPUSH
4230: LD_INT 109
4232: PPUSH
4233: LD_INT 3
4235: PPUSH
4236: CALL_OW 205
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 208 , 106 ) ;
4240: LD_EXP 72
4244: PPUSH
4245: LD_INT 25
4247: PUSH
4248: LD_INT 2
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: PPUSH
4255: CALL_OW 72
4259: PPUSH
4260: LD_INT 208
4262: PPUSH
4263: LD_INT 106
4265: PPUSH
4266: CALL_OW 171
// AddComTurnXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 209 , 105 ) ;
4270: LD_EXP 72
4274: PPUSH
4275: LD_INT 25
4277: PUSH
4278: LD_INT 2
4280: PUSH
4281: EMPTY
4282: LIST
4283: LIST
4284: PPUSH
4285: CALL_OW 72
4289: PPUSH
4290: LD_INT 209
4292: PPUSH
4293: LD_INT 105
4295: PPUSH
4296: CALL_OW 178
// AddComMoveXY ( secondBaseTeam [ 5 ] , 209 , 105 ) ;
4300: LD_EXP 72
4304: PUSH
4305: LD_INT 5
4307: ARRAY
4308: PPUSH
4309: LD_INT 209
4311: PPUSH
4312: LD_INT 105
4314: PPUSH
4315: CALL_OW 171
// AddComTurnXY ( secondBaseTeam [ 5 ] , 208 , 106 ) ;
4319: LD_EXP 72
4323: PUSH
4324: LD_INT 5
4326: ARRAY
4327: PPUSH
4328: LD_INT 208
4330: PPUSH
4331: LD_INT 106
4333: PPUSH
4334: CALL_OW 178
// end ;
4338: LD_VAR 0 1
4342: RET
// export function SpawnKirovSupport ; var i , un ; begin
4343: LD_INT 0
4345: PPUSH
4346: PPUSH
4347: PPUSH
// uc_side = 6 ;
4348: LD_ADDR_OWVAR 20
4352: PUSH
4353: LD_INT 6
4355: ST_TO_ADDR
// uc_nation = 3 ;
4356: LD_ADDR_OWVAR 21
4360: PUSH
4361: LD_INT 3
4363: ST_TO_ADDR
// hc_name =  ;
4364: LD_ADDR_OWVAR 26
4368: PUSH
4369: LD_STRING 
4371: ST_TO_ADDR
// hc_gallery :=  ;
4372: LD_ADDR_OWVAR 33
4376: PUSH
4377: LD_STRING 
4379: ST_TO_ADDR
// for i := 1 to survivorsToSpawn do
4380: LD_ADDR_VAR 0 2
4384: PUSH
4385: DOUBLE
4386: LD_INT 1
4388: DEC
4389: ST_TO_ADDR
4390: LD_EXP 74
4394: PUSH
4395: FOR_TO
4396: IFFALSE 4484
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 2 ) ) ;
4398: LD_INT 0
4400: PPUSH
4401: LD_INT 1
4403: PPUSH
4404: LD_INT 4
4406: PPUSH
4407: CALL_OW 12
4411: PPUSH
4412: LD_INT 1
4414: PPUSH
4415: LD_INT 2
4417: PPUSH
4418: CALL_OW 12
4422: PPUSH
4423: CALL_OW 380
// un = CreateHuman ;
4427: LD_ADDR_VAR 0 3
4431: PUSH
4432: CALL_OW 44
4436: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ un ;
4437: LD_ADDR_EXP 73
4441: PUSH
4442: LD_EXP 73
4446: PUSH
4447: LD_VAR 0 3
4451: ADD
4452: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4453: LD_VAR 0 3
4457: PPUSH
4458: LD_INT 20
4460: PPUSH
4461: LD_INT 0
4463: PPUSH
4464: CALL_OW 49
// ComEnterUnit ( un , ru2_bar1 ) ;
4468: LD_VAR 0 3
4472: PPUSH
4473: LD_EXP 64
4477: PPUSH
4478: CALL_OW 120
// end ;
4482: GO 4395
4484: POP
4485: POP
// for i := 1 to neededUnitsSpawn [ 1 ] + 4 do
4486: LD_ADDR_VAR 0 2
4490: PUSH
4491: DOUBLE
4492: LD_INT 1
4494: DEC
4495: ST_TO_ADDR
4496: LD_EXP 75
4500: PUSH
4501: LD_INT 1
4503: ARRAY
4504: PUSH
4505: LD_INT 4
4507: PLUS
4508: PUSH
4509: FOR_TO
4510: IFFALSE 4608
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
4512: LD_INT 0
4514: PPUSH
4515: LD_INT 1
4517: PPUSH
4518: LD_INT 1
4520: PPUSH
4521: LD_INT 3
4523: PPUSH
4524: CALL_OW 12
4528: PPUSH
4529: CALL_OW 380
// un = CreateHuman ;
4533: LD_ADDR_VAR 0 3
4537: PUSH
4538: CALL_OW 44
4542: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4543: LD_VAR 0 3
4547: PPUSH
4548: LD_INT 20
4550: PPUSH
4551: LD_INT 0
4553: PPUSH
4554: CALL_OW 49
// if i > kirovBunkersToOccupy then
4558: LD_VAR 0 2
4562: PUSH
4563: LD_EXP 68
4567: GREATER
4568: IFFALSE 4586
// ComEnterUnit ( un , ru2_bar2 ) else
4570: LD_VAR 0 3
4574: PPUSH
4575: LD_EXP 65
4579: PPUSH
4580: CALL_OW 120
4584: GO 4606
// ComEnterUnit ( un , kirovBunkersToOccupy [ i ] ) ;
4586: LD_VAR 0 3
4590: PPUSH
4591: LD_EXP 68
4595: PUSH
4596: LD_VAR 0 2
4600: ARRAY
4601: PPUSH
4602: CALL_OW 120
// end ;
4606: GO 4509
4608: POP
4609: POP
// for i := 1 to neededUnitsSpawn [ 3 ] do
4610: LD_ADDR_VAR 0 2
4614: PUSH
4615: DOUBLE
4616: LD_INT 1
4618: DEC
4619: ST_TO_ADDR
4620: LD_EXP 75
4624: PUSH
4625: LD_INT 3
4627: ARRAY
4628: PUSH
4629: FOR_TO
4630: IFFALSE 4694
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
4632: LD_INT 0
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: LD_INT 1
4640: PPUSH
4641: LD_INT 3
4643: PPUSH
4644: CALL_OW 12
4648: PPUSH
4649: CALL_OW 380
// un = CreateHuman ;
4653: LD_ADDR_VAR 0 3
4657: PUSH
4658: CALL_OW 44
4662: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4663: LD_VAR 0 3
4667: PPUSH
4668: LD_INT 20
4670: PPUSH
4671: LD_INT 0
4673: PPUSH
4674: CALL_OW 49
// ComEnterUnit ( un , kirovFactory ) ;
4678: LD_VAR 0 3
4682: PPUSH
4683: LD_EXP 21
4687: PPUSH
4688: CALL_OW 120
// end ;
4692: GO 4629
4694: POP
4695: POP
// for i := 1 to neededUnitsSpawn [ 4 ] do
4696: LD_ADDR_VAR 0 2
4700: PUSH
4701: DOUBLE
4702: LD_INT 1
4704: DEC
4705: ST_TO_ADDR
4706: LD_EXP 75
4710: PUSH
4711: LD_INT 4
4713: ARRAY
4714: PUSH
4715: FOR_TO
4716: IFFALSE 4822
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
4718: LD_INT 0
4720: PPUSH
4721: LD_INT 4
4723: PPUSH
4724: LD_INT 1
4726: PPUSH
4727: LD_INT 3
4729: PPUSH
4730: CALL_OW 12
4734: PPUSH
4735: CALL_OW 380
// un = CreateHuman ;
4739: LD_ADDR_VAR 0 3
4743: PUSH
4744: CALL_OW 44
4748: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4749: LD_VAR 0 3
4753: PPUSH
4754: LD_INT 20
4756: PPUSH
4757: LD_INT 0
4759: PPUSH
4760: CALL_OW 49
// ComEnterUnit ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
4764: LD_VAR 0 3
4768: PPUSH
4769: LD_INT 19
4771: PPUSH
4772: LD_INT 22
4774: PUSH
4775: LD_INT 6
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: PUSH
4782: LD_INT 21
4784: PUSH
4785: LD_INT 3
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 30
4794: PUSH
4795: LD_INT 7
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: LIST
4806: PPUSH
4807: CALL_OW 70
4811: PUSH
4812: LD_INT 1
4814: ARRAY
4815: PPUSH
4816: CALL_OW 120
// end ;
4820: GO 4715
4822: POP
4823: POP
// end ;
4824: LD_VAR 0 1
4828: RET
// export function SetSurvivorsArabianAttack ; var limit , unit ; begin
4829: LD_INT 0
4831: PPUSH
4832: PPUSH
4833: PPUSH
// survivorsArabianAttack = [ ] ;
4834: LD_ADDR_EXP 73
4838: PUSH
4839: EMPTY
4840: ST_TO_ADDR
// limit = 9 ;
4841: LD_ADDR_VAR 0 2
4845: PUSH
4846: LD_INT 9
4848: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ Popov ;
4849: LD_ADDR_EXP 73
4853: PUSH
4854: LD_EXP 73
4858: PUSH
4859: LD_EXP 57
4863: ADD
4864: ST_TO_ADDR
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 6 then
4865: LD_EXP 48
4869: PPUSH
4870: CALL_OW 302
4874: PUSH
4875: LD_EXP 48
4879: PPUSH
4880: CALL_OW 255
4884: PUSH
4885: LD_INT 6
4887: EQUAL
4888: AND
4889: IFFALSE 4921
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov ;
4891: LD_ADDR_EXP 73
4895: PUSH
4896: LD_EXP 73
4900: PUSH
4901: LD_EXP 48
4905: ADD
4906: ST_TO_ADDR
// limit = limit - 1 ;
4907: LD_ADDR_VAR 0 2
4911: PUSH
4912: LD_VAR 0 2
4916: PUSH
4917: LD_INT 1
4919: MINUS
4920: ST_TO_ADDR
// end ; if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 6 then
4921: LD_EXP 49
4925: PPUSH
4926: CALL_OW 302
4930: PUSH
4931: LD_EXP 49
4935: PPUSH
4936: CALL_OW 255
4940: PUSH
4941: LD_INT 6
4943: EQUAL
4944: AND
4945: IFFALSE 4977
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov2 ;
4947: LD_ADDR_EXP 73
4951: PUSH
4952: LD_EXP 73
4956: PUSH
4957: LD_EXP 49
4961: ADD
4962: ST_TO_ADDR
// limit = limit - 1 ;
4963: LD_ADDR_VAR 0 2
4967: PUSH
4968: LD_VAR 0 2
4972: PUSH
4973: LD_INT 1
4975: MINUS
4976: ST_TO_ADDR
// end ; for unit in other_survivors do
4977: LD_ADDR_VAR 0 3
4981: PUSH
4982: LD_EXP 51
4986: PUSH
4987: FOR_IN
4988: IFFALSE 5048
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
4990: LD_VAR 0 3
4994: PPUSH
4995: CALL_OW 302
4999: PUSH
5000: LD_VAR 0 3
5004: PPUSH
5005: CALL_OW 255
5009: PUSH
5010: LD_INT 6
5012: EQUAL
5013: AND
5014: IFFALSE 5046
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5016: LD_ADDR_EXP 73
5020: PUSH
5021: LD_EXP 73
5025: PUSH
5026: LD_VAR 0 3
5030: ADD
5031: ST_TO_ADDR
// limit = limit - 1 ;
5032: LD_ADDR_VAR 0 2
5036: PUSH
5037: LD_VAR 0 2
5041: PUSH
5042: LD_INT 1
5044: MINUS
5045: ST_TO_ADDR
// end ; end ;
5046: GO 4987
5048: POP
5049: POP
// for unit in otherBeriaUnits do
5050: LD_ADDR_VAR 0 3
5054: PUSH
5055: LD_EXP 53
5059: PUSH
5060: FOR_IN
5061: IFFALSE 5121
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5063: LD_VAR 0 3
5067: PPUSH
5068: CALL_OW 302
5072: PUSH
5073: LD_VAR 0 3
5077: PPUSH
5078: CALL_OW 255
5082: PUSH
5083: LD_INT 6
5085: EQUAL
5086: AND
5087: IFFALSE 5119
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5089: LD_ADDR_EXP 73
5093: PUSH
5094: LD_EXP 73
5098: PUSH
5099: LD_VAR 0 3
5103: ADD
5104: ST_TO_ADDR
// limit = limit - 1 ;
5105: LD_ADDR_VAR 0 2
5109: PUSH
5110: LD_VAR 0 2
5114: PUSH
5115: LD_INT 1
5117: MINUS
5118: ST_TO_ADDR
// end ; end ;
5119: GO 5060
5121: POP
5122: POP
// if limit > 0 then
5123: LD_VAR 0 2
5127: PUSH
5128: LD_INT 0
5130: GREATER
5131: IFFALSE 5143
// survivorsToSpawn = limit ;
5133: LD_ADDR_EXP 74
5137: PUSH
5138: LD_VAR 0 2
5142: ST_TO_ADDR
// end ;
5143: LD_VAR 0 1
5147: RET
// export function PrepareScholtze ; var rndPos , x , y ; begin
5148: LD_INT 0
5150: PPUSH
5151: PPUSH
5152: PPUSH
5153: PPUSH
// uc_side = 8 ;
5154: LD_ADDR_OWVAR 20
5158: PUSH
5159: LD_INT 8
5161: ST_TO_ADDR
// Scholtze = PrepareUnitExt ( Scholtze , false ) ;
5162: LD_ADDR_EXP 50
5166: PUSH
5167: LD_STRING Scholtze
5169: PPUSH
5170: LD_INT 0
5172: PPUSH
5173: CALL 7029 0 2
5177: ST_TO_ADDR
// case Difficulty of 1 :
5178: LD_OWVAR 67
5182: PUSH
5183: LD_INT 1
5185: DOUBLE
5186: EQUAL
5187: IFTRUE 5191
5189: GO 5227
5191: POP
// PlaceUnitXYR ( Scholtze , scholtzeSpawnPositions [ 1 ] , scholtzeSpawnPositions [ 2 ] , 3 , true ) ; 2 :
5192: LD_EXP 50
5196: PPUSH
5197: LD_EXP 36
5201: PUSH
5202: LD_INT 1
5204: ARRAY
5205: PPUSH
5206: LD_EXP 36
5210: PUSH
5211: LD_INT 2
5213: ARRAY
5214: PPUSH
5215: LD_INT 3
5217: PPUSH
5218: LD_INT 1
5220: PPUSH
5221: CALL_OW 50
5225: GO 5536
5227: LD_INT 2
5229: DOUBLE
5230: EQUAL
5231: IFTRUE 5235
5233: GO 5383
5235: POP
// begin scholtzeSpawnNearAmericans = true ;
5236: LD_ADDR_EXP 6
5240: PUSH
5241: LD_INT 1
5243: ST_TO_ADDR
// rndPos = rand ( 1 , scholtzeSpawnPositions / 2 ) ;
5244: LD_ADDR_VAR 0 2
5248: PUSH
5249: LD_INT 1
5251: PPUSH
5252: LD_EXP 36
5256: PUSH
5257: LD_INT 2
5259: DIVREAL
5260: PPUSH
5261: CALL_OW 12
5265: ST_TO_ADDR
// x = scholtzeSpawnPositions [ rndPos [ 1 ] ] ;
5266: LD_ADDR_VAR 0 3
5270: PUSH
5271: LD_EXP 36
5275: PUSH
5276: LD_VAR 0 2
5280: PUSH
5281: LD_INT 1
5283: ARRAY
5284: ARRAY
5285: ST_TO_ADDR
// y = scholtzeSpawnPositions [ rndPos [ 2 ] ] ;
5286: LD_ADDR_VAR 0 4
5290: PUSH
5291: LD_EXP 36
5295: PUSH
5296: LD_VAR 0 2
5300: PUSH
5301: LD_INT 2
5303: ARRAY
5304: ARRAY
5305: ST_TO_ADDR
// if rndPos > 1 then
5306: LD_VAR 0 2
5310: PUSH
5311: LD_INT 1
5313: GREATER
5314: IFFALSE 5356
// begin x = scholtzeSpawnPositions [ rndPos + 1 ] ;
5316: LD_ADDR_VAR 0 3
5320: PUSH
5321: LD_EXP 36
5325: PUSH
5326: LD_VAR 0 2
5330: PUSH
5331: LD_INT 1
5333: PLUS
5334: ARRAY
5335: ST_TO_ADDR
// y = scholtzeSpawnPositions [ rndPos + 2 ] ;
5336: LD_ADDR_VAR 0 4
5340: PUSH
5341: LD_EXP 36
5345: PUSH
5346: LD_VAR 0 2
5350: PUSH
5351: LD_INT 2
5353: PLUS
5354: ARRAY
5355: ST_TO_ADDR
// end ; PlaceUnitXYR ( Scholtze , x , y , 3 , true ) ;
5356: LD_EXP 50
5360: PPUSH
5361: LD_VAR 0 3
5365: PPUSH
5366: LD_VAR 0 4
5370: PPUSH
5371: LD_INT 3
5373: PPUSH
5374: LD_INT 1
5376: PPUSH
5377: CALL_OW 50
// end ; 3 :
5381: GO 5536
5383: LD_INT 3
5385: DOUBLE
5386: EQUAL
5387: IFTRUE 5391
5389: GO 5535
5391: POP
// begin rndPos = rand ( 1 , scholtzeSpawnPositions / 2 ) ;
5392: LD_ADDR_VAR 0 2
5396: PUSH
5397: LD_INT 1
5399: PPUSH
5400: LD_EXP 36
5404: PUSH
5405: LD_INT 2
5407: DIVREAL
5408: PPUSH
5409: CALL_OW 12
5413: ST_TO_ADDR
// x = scholtzeSpawnPositions [ rndPos ] ;
5414: LD_ADDR_VAR 0 3
5418: PUSH
5419: LD_EXP 36
5423: PUSH
5424: LD_VAR 0 2
5428: ARRAY
5429: ST_TO_ADDR
// y = scholtzeSpawnPositions [ rndPos + 1 ] ;
5430: LD_ADDR_VAR 0 4
5434: PUSH
5435: LD_EXP 36
5439: PUSH
5440: LD_VAR 0 2
5444: PUSH
5445: LD_INT 1
5447: PLUS
5448: ARRAY
5449: ST_TO_ADDR
// if rndPos > 1 then
5450: LD_VAR 0 2
5454: PUSH
5455: LD_INT 1
5457: GREATER
5458: IFFALSE 5508
// begin scholtzeSpawnNearAmericans = true ;
5460: LD_ADDR_EXP 6
5464: PUSH
5465: LD_INT 1
5467: ST_TO_ADDR
// x = scholtzeSpawnPositions [ rndPos + 1 ] ;
5468: LD_ADDR_VAR 0 3
5472: PUSH
5473: LD_EXP 36
5477: PUSH
5478: LD_VAR 0 2
5482: PUSH
5483: LD_INT 1
5485: PLUS
5486: ARRAY
5487: ST_TO_ADDR
// y = scholtzeSpawnPositions [ rndPos + 2 ] ;
5488: LD_ADDR_VAR 0 4
5492: PUSH
5493: LD_EXP 36
5497: PUSH
5498: LD_VAR 0 2
5502: PUSH
5503: LD_INT 2
5505: PLUS
5506: ARRAY
5507: ST_TO_ADDR
// end ; PlaceUnitXYR ( Scholtze , x , y , 3 , true ) ;
5508: LD_EXP 50
5512: PPUSH
5513: LD_VAR 0 3
5517: PPUSH
5518: LD_VAR 0 4
5522: PPUSH
5523: LD_INT 3
5525: PPUSH
5526: LD_INT 1
5528: PPUSH
5529: CALL_OW 50
// end ; end ;
5533: GO 5536
5535: POP
// end ; end_of_file
5536: LD_VAR 0 1
5540: RET
// export amIntroUnits ; export amSupportTroops ; export amPatrol ; export amBase ; export function PrepareAmericans ; begin
5541: LD_INT 0
5543: PPUSH
// amSupportTroops = [ ] ;
5544: LD_ADDR_EXP 78
5548: PUSH
5549: EMPTY
5550: ST_TO_ADDR
// PrepareOmicronBase ;
5551: CALL 5560 0 0
// end ;
5555: LD_VAR 0 1
5559: RET
// function PrepareOmicronBase ; var base ; begin
5560: LD_INT 0
5562: PPUSH
5563: PPUSH
// amBase := PrepareBase ( omikron , OmicronBaseArea , omikron , [ 1 , 2 , 2 ] [ Difficulty ] , [ 3000 , 3000 , 0 ] , [ 6 , 2 , 3 , 1 ] ) ;
5564: LD_ADDR_EXP 80
5568: PUSH
5569: LD_INT 64
5571: PPUSH
5572: LD_INT 13
5574: PPUSH
5575: LD_STRING omikron
5577: PPUSH
5578: LD_INT 1
5580: PUSH
5581: LD_INT 2
5583: PUSH
5584: LD_INT 2
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: LIST
5591: PUSH
5592: LD_OWVAR 67
5596: ARRAY
5597: PPUSH
5598: LD_INT 3000
5600: PUSH
5601: LD_INT 3000
5603: PUSH
5604: LD_INT 0
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: LIST
5611: PPUSH
5612: LD_INT 6
5614: PUSH
5615: LD_INT 2
5617: PUSH
5618: LD_INT 3
5620: PUSH
5621: LD_INT 1
5623: PUSH
5624: EMPTY
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: PPUSH
5630: CALL 53367 0 6
5634: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 1 , amBase ) ;
5635: LD_ADDR_EXP 87
5639: PUSH
5640: LD_EXP 87
5644: PPUSH
5645: LD_INT 1
5647: PPUSH
5648: LD_EXP 80
5652: PPUSH
5653: CALL_OW 1
5657: ST_TO_ADDR
// case Difficulty of 2 :
5658: LD_OWVAR 67
5662: PUSH
5663: LD_INT 2
5665: DOUBLE
5666: EQUAL
5667: IFTRUE 5671
5669: GO 5687
5671: POP
// begin SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5672: LD_INT 51
5674: PPUSH
5675: LD_INT 1
5677: PPUSH
5678: LD_INT 1
5680: PPUSH
5681: CALL_OW 322
// end ; 3 :
5685: GO 5725
5687: LD_INT 3
5689: DOUBLE
5690: EQUAL
5691: IFTRUE 5695
5693: GO 5724
5695: POP
// begin SetTech ( tech_Tech2 , 1 , state_enabled ) ;
5696: LD_INT 49
5698: PPUSH
5699: LD_INT 1
5701: PPUSH
5702: LD_INT 1
5704: PPUSH
5705: CALL_OW 322
// SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5709: LD_INT 51
5711: PPUSH
5712: LD_INT 1
5714: PPUSH
5715: LD_INT 1
5717: PPUSH
5718: CALL_OW 322
// end ; end ;
5722: GO 5725
5724: POP
// end ;
5725: LD_VAR 0 1
5729: RET
// export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
5730: LD_INT 0
5732: PPUSH
5733: PPUSH
5734: PPUSH
5735: PPUSH
// amIntroUnits = [ ] ;
5736: LD_ADDR_EXP 77
5740: PUSH
5741: EMPTY
5742: ST_TO_ADDR
// uc_side = 1 ;
5743: LD_ADDR_OWVAR 20
5747: PUSH
5748: LD_INT 1
5750: ST_TO_ADDR
// uc_nation = nation_american ;
5751: LD_ADDR_OWVAR 21
5755: PUSH
5756: LD_INT 1
5758: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
5759: LD_ADDR_OWVAR 37
5763: PUSH
5764: LD_INT 3
5766: ST_TO_ADDR
// vc_control = control_manual ;
5767: LD_ADDR_OWVAR 38
5771: PUSH
5772: LD_INT 1
5774: ST_TO_ADDR
// vc_engine = engine_combustion ;
5775: LD_ADDR_OWVAR 39
5779: PUSH
5780: LD_INT 1
5782: ST_TO_ADDR
// vc_weapon = us_double_gun ;
5783: LD_ADDR_OWVAR 40
5787: PUSH
5788: LD_INT 5
5790: ST_TO_ADDR
// veh = CreateVehicle ;
5791: LD_ADDR_VAR 0 3
5795: PUSH
5796: CALL_OW 45
5800: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5801: LD_VAR 0 3
5805: PPUSH
5806: LD_INT 4
5808: PPUSH
5809: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
5813: LD_ADDR_EXP 77
5817: PUSH
5818: LD_EXP 77
5822: PUSH
5823: LD_VAR 0 3
5827: ADD
5828: ST_TO_ADDR
// PlaceUnitArea ( veh , CutsceneAmSupportSpawnArea , false ) ;
5829: LD_VAR 0 3
5833: PPUSH
5834: LD_INT 5
5836: PPUSH
5837: LD_INT 0
5839: PPUSH
5840: CALL_OW 49
// for i := 1 to 5 do
5844: LD_ADDR_VAR 0 2
5848: PUSH
5849: DOUBLE
5850: LD_INT 1
5852: DEC
5853: ST_TO_ADDR
5854: LD_INT 5
5856: PUSH
5857: FOR_TO
5858: IFFALSE 5955
// begin hc_name :=  ;
5860: LD_ADDR_OWVAR 26
5864: PUSH
5865: LD_STRING 
5867: ST_TO_ADDR
// hc_gallery :=  ;
5868: LD_ADDR_OWVAR 33
5872: PUSH
5873: LD_STRING 
5875: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
5876: LD_INT 0
5878: PPUSH
5879: LD_INT 1
5881: PPUSH
5882: CALL_OW 381
// human = CreateHuman ;
5886: LD_ADDR_VAR 0 4
5890: PUSH
5891: CALL_OW 44
5895: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
5896: LD_ADDR_EXP 77
5900: PUSH
5901: LD_EXP 77
5905: PUSH
5906: LD_VAR 0 4
5910: ADD
5911: ST_TO_ADDR
// if i < 5 then
5912: LD_VAR 0 2
5916: PUSH
5917: LD_INT 5
5919: LESS
5920: IFFALSE 5939
// PlaceUnitArea ( human , CutsceneAmSupportSpawnArea , false ) else
5922: LD_VAR 0 4
5926: PPUSH
5927: LD_INT 5
5929: PPUSH
5930: LD_INT 0
5932: PPUSH
5933: CALL_OW 49
5937: GO 5953
// begin PlaceHumanInUnit ( human , veh ) ;
5939: LD_VAR 0 4
5943: PPUSH
5944: LD_VAR 0 3
5948: PPUSH
5949: CALL_OW 52
// end ; end ;
5953: GO 5857
5955: POP
5956: POP
// end ;
5957: LD_VAR 0 1
5961: RET
// export function PrepareAmericanSupportTroops ( soldiersAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road ; begin
5962: LD_INT 0
5964: PPUSH
5965: PPUSH
5966: PPUSH
5967: PPUSH
5968: PPUSH
// uc_side := 1 ;
5969: LD_ADDR_OWVAR 20
5973: PUSH
5974: LD_INT 1
5976: ST_TO_ADDR
// uc_nation := 1 ;
5977: LD_ADDR_OWVAR 21
5981: PUSH
5982: LD_INT 1
5984: ST_TO_ADDR
// hc_name :=  ;
5985: LD_ADDR_OWVAR 26
5989: PUSH
5990: LD_STRING 
5992: ST_TO_ADDR
// hc_gallery :=  ;
5993: LD_ADDR_OWVAR 33
5997: PUSH
5998: LD_STRING 
6000: ST_TO_ADDR
// for i := 1 to soldiersAmount do
6001: LD_ADDR_VAR 0 6
6005: PUSH
6006: DOUBLE
6007: LD_INT 1
6009: DEC
6010: ST_TO_ADDR
6011: LD_VAR 0 1
6015: PUSH
6016: FOR_TO
6017: IFFALSE 6076
// begin PrepareSoldier ( false , enemySkillLevel ) ;
6019: LD_INT 0
6021: PPUSH
6022: LD_EXP 40
6026: PPUSH
6027: CALL_OW 381
// un = CreateHuman ;
6031: LD_ADDR_VAR 0 7
6035: PUSH
6036: CALL_OW 44
6040: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6041: LD_ADDR_EXP 78
6045: PUSH
6046: LD_EXP 78
6050: PUSH
6051: LD_VAR 0 7
6055: ADD
6056: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6057: LD_VAR 0 7
6061: PPUSH
6062: LD_VAR 0 4
6066: PPUSH
6067: LD_INT 0
6069: PPUSH
6070: CALL_OW 49
// end ;
6074: GO 6016
6076: POP
6077: POP
// for i := 1 to scientistsAmount do
6078: LD_ADDR_VAR 0 6
6082: PUSH
6083: DOUBLE
6084: LD_INT 1
6086: DEC
6087: ST_TO_ADDR
6088: LD_VAR 0 2
6092: PUSH
6093: FOR_TO
6094: IFFALSE 6153
// begin PrepareScientist ( false , enemySkillLevel ) ;
6096: LD_INT 0
6098: PPUSH
6099: LD_EXP 40
6103: PPUSH
6104: CALL_OW 384
// un = CreateHuman ;
6108: LD_ADDR_VAR 0 7
6112: PUSH
6113: CALL_OW 44
6117: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6118: LD_ADDR_EXP 78
6122: PUSH
6123: LD_EXP 78
6127: PUSH
6128: LD_VAR 0 7
6132: ADD
6133: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6134: LD_VAR 0 7
6138: PPUSH
6139: LD_VAR 0 4
6143: PPUSH
6144: LD_INT 0
6146: PPUSH
6147: CALL_OW 49
// end ;
6151: GO 6093
6153: POP
6154: POP
// for i := 1 to vehiclesAmount do
6155: LD_ADDR_VAR 0 6
6159: PUSH
6160: DOUBLE
6161: LD_INT 1
6163: DEC
6164: ST_TO_ADDR
6165: LD_VAR 0 3
6169: PUSH
6170: FOR_TO
6171: IFFALSE 6325
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
6173: LD_ADDR_OWVAR 40
6177: PUSH
6178: LD_INT 2
6180: PUSH
6181: LD_INT 4
6183: PUSH
6184: LD_INT 3
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: LIST
6191: PUSH
6192: LD_INT 1
6194: PPUSH
6195: LD_INT 3
6197: PPUSH
6198: CALL_OW 12
6202: ARRAY
6203: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
6204: LD_ADDR_OWVAR 37
6208: PUSH
6209: LD_INT 3
6211: ST_TO_ADDR
// vc_control = control_manual ;
6212: LD_ADDR_OWVAR 38
6216: PUSH
6217: LD_INT 1
6219: ST_TO_ADDR
// vc_engine = engine_combustion ;
6220: LD_ADDR_OWVAR 39
6224: PUSH
6225: LD_INT 1
6227: ST_TO_ADDR
// veh = CreateVehicle ;
6228: LD_ADDR_VAR 0 8
6232: PUSH
6233: CALL_OW 45
6237: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ veh ;
6238: LD_ADDR_EXP 78
6242: PUSH
6243: LD_EXP 78
6247: PUSH
6248: LD_VAR 0 8
6252: ADD
6253: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6254: LD_VAR 0 8
6258: PPUSH
6259: LD_VAR 0 4
6263: PPUSH
6264: LD_INT 0
6266: PPUSH
6267: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
6271: LD_INT 0
6273: PPUSH
6274: LD_EXP 40
6278: PPUSH
6279: CALL_OW 383
// un = CreateHuman ;
6283: LD_ADDR_VAR 0 7
6287: PUSH
6288: CALL_OW 44
6292: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6293: LD_ADDR_EXP 78
6297: PUSH
6298: LD_EXP 78
6302: PUSH
6303: LD_VAR 0 7
6307: ADD
6308: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6309: LD_VAR 0 7
6313: PPUSH
6314: LD_VAR 0 8
6318: PPUSH
6319: CALL_OW 52
// end ;
6323: GO 6170
6325: POP
6326: POP
// case area of NorthAmericanSpawnArea :
6327: LD_VAR 0 4
6331: PUSH
6332: LD_INT 7
6334: DOUBLE
6335: EQUAL
6336: IFTRUE 6340
6338: GO 6351
6340: POP
// road = NorthRoadArea ; SouthAmericanSpawnArea1 :
6341: LD_ADDR_VAR 0 9
6345: PUSH
6346: LD_INT 10
6348: ST_TO_ADDR
6349: GO 6390
6351: LD_INT 9
6353: DOUBLE
6354: EQUAL
6355: IFTRUE 6359
6357: GO 6370
6359: POP
// road = SouthRoadArea1 ; SouthAmericanSpawnArea2 :
6360: LD_ADDR_VAR 0 9
6364: PUSH
6365: LD_INT 11
6367: ST_TO_ADDR
6368: GO 6390
6370: LD_INT 8
6372: DOUBLE
6373: EQUAL
6374: IFTRUE 6378
6376: GO 6389
6378: POP
// road = SouthRoadArea2 ; end ;
6379: LD_ADDR_VAR 0 9
6383: PUSH
6384: LD_INT 12
6386: ST_TO_ADDR
6387: GO 6390
6389: POP
// MoveToBase ( amSupportTroops , road ) ;
6390: LD_EXP 78
6394: PPUSH
6395: LD_VAR 0 9
6399: PPUSH
6400: CALL 8381 0 2
// end ;
6404: LD_VAR 0 5
6408: RET
// export function PrepareAmericanPatrol ; var un ; begin
6409: LD_INT 0
6411: PPUSH
6412: PPUSH
// amPatrol = [ ] ;
6413: LD_ADDR_EXP 79
6417: PUSH
6418: EMPTY
6419: ST_TO_ADDR
// uc_side = 1 ;
6420: LD_ADDR_OWVAR 20
6424: PUSH
6425: LD_INT 1
6427: ST_TO_ADDR
// uc_nation = 1 ;
6428: LD_ADDR_OWVAR 21
6432: PUSH
6433: LD_INT 1
6435: ST_TO_ADDR
// un = PrepareUnitExt ( Campell , false ) ;
6436: LD_ADDR_VAR 0 2
6440: PUSH
6441: LD_STRING Campell
6443: PPUSH
6444: LD_INT 0
6446: PPUSH
6447: CALL 7029 0 2
6451: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6452: LD_ADDR_EXP 79
6456: PUSH
6457: LD_EXP 79
6461: PUSH
6462: LD_VAR 0 2
6466: ADD
6467: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6468: LD_VAR 0 2
6472: PPUSH
6473: LD_INT 14
6475: PPUSH
6476: LD_INT 0
6478: PPUSH
6479: CALL_OW 49
// SetClass ( un , 1 ) ;
6483: LD_VAR 0 2
6487: PPUSH
6488: LD_INT 1
6490: PPUSH
6491: CALL_OW 336
// PrepareSoldier ( sex_male , enemySkillLevel ) ;
6495: LD_INT 1
6497: PPUSH
6498: LD_EXP 40
6502: PPUSH
6503: CALL_OW 381
// un = CreateHuman ;
6507: LD_ADDR_VAR 0 2
6511: PUSH
6512: CALL_OW 44
6516: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6517: LD_ADDR_EXP 79
6521: PUSH
6522: LD_EXP 79
6526: PUSH
6527: LD_VAR 0 2
6531: ADD
6532: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6533: LD_VAR 0 2
6537: PPUSH
6538: LD_INT 14
6540: PPUSH
6541: LD_INT 0
6543: PPUSH
6544: CALL_OW 49
// ComAttackUnit ( amPatrol , Scholtze ) ;
6548: LD_EXP 79
6552: PPUSH
6553: LD_EXP 50
6557: PPUSH
6558: CALL_OW 115
// end ; end_of_file
6562: LD_VAR 0 1
6566: RET
// export northGroup , southGroup ; export function PrepareArabian ; var i , un , veh ; begin
6567: LD_INT 0
6569: PPUSH
6570: PPUSH
6571: PPUSH
6572: PPUSH
// northGroup = [ ] ;
6573: LD_ADDR_EXP 81
6577: PUSH
6578: EMPTY
6579: ST_TO_ADDR
// southGroup = [ ] ;
6580: LD_ADDR_EXP 82
6584: PUSH
6585: EMPTY
6586: ST_TO_ADDR
// uc_side = 2 ;
6587: LD_ADDR_OWVAR 20
6591: PUSH
6592: LD_INT 2
6594: ST_TO_ADDR
// uc_nation = 2 ;
6595: LD_ADDR_OWVAR 21
6599: PUSH
6600: LD_INT 2
6602: ST_TO_ADDR
// hc_name :=  ;
6603: LD_ADDR_OWVAR 26
6607: PUSH
6608: LD_STRING 
6610: ST_TO_ADDR
// hc_gallery :=  ;
6611: LD_ADDR_OWVAR 33
6615: PUSH
6616: LD_STRING 
6618: ST_TO_ADDR
// for i := 1 to 10 do
6619: LD_ADDR_VAR 0 2
6623: PUSH
6624: DOUBLE
6625: LD_INT 1
6627: DEC
6628: ST_TO_ADDR
6629: LD_INT 10
6631: PUSH
6632: FOR_TO
6633: IFFALSE 6747
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
6635: LD_INT 13
6637: PPUSH
6638: LD_INT 1
6640: PPUSH
6641: LD_INT 1
6643: PPUSH
6644: LD_INT 26
6646: PPUSH
6647: LD_INT 100
6649: PPUSH
6650: CALL 49958 0 5
// veh = CreateVehicle ;
6654: LD_ADDR_VAR 0 4
6658: PUSH
6659: CALL_OW 45
6663: ST_TO_ADDR
// northGroup = northGroup ^ veh ;
6664: LD_ADDR_EXP 81
6668: PUSH
6669: LD_EXP 81
6673: PUSH
6674: LD_VAR 0 4
6678: ADD
6679: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
6680: LD_VAR 0 4
6684: PPUSH
6685: LD_INT 23
6687: PPUSH
6688: LD_INT 0
6690: PPUSH
6691: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6695: LD_INT 0
6697: PPUSH
6698: LD_INT 8
6700: PPUSH
6701: CALL_OW 383
// un = CreateHuman ;
6705: LD_ADDR_VAR 0 3
6709: PUSH
6710: CALL_OW 44
6714: ST_TO_ADDR
// northGroup = northGroup ^ un ;
6715: LD_ADDR_EXP 81
6719: PUSH
6720: LD_EXP 81
6724: PUSH
6725: LD_VAR 0 3
6729: ADD
6730: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6731: LD_VAR 0 3
6735: PPUSH
6736: LD_VAR 0 4
6740: PPUSH
6741: CALL_OW 52
// end ;
6745: GO 6632
6747: POP
6748: POP
// for i := 1 to 20 do
6749: LD_ADDR_VAR 0 2
6753: PUSH
6754: DOUBLE
6755: LD_INT 1
6757: DEC
6758: ST_TO_ADDR
6759: LD_INT 20
6761: PUSH
6762: FOR_TO
6763: IFFALSE 6818
// begin PrepareSoldier ( false , 8 ) ;
6765: LD_INT 0
6767: PPUSH
6768: LD_INT 8
6770: PPUSH
6771: CALL_OW 381
// un = CreateHuman ;
6775: LD_ADDR_VAR 0 3
6779: PUSH
6780: CALL_OW 44
6784: ST_TO_ADDR
// northGroup = northGroup ^ un ;
6785: LD_ADDR_EXP 81
6789: PUSH
6790: LD_EXP 81
6794: PUSH
6795: LD_VAR 0 3
6799: ADD
6800: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea1 , false ) ;
6801: LD_VAR 0 3
6805: PPUSH
6806: LD_INT 23
6808: PPUSH
6809: LD_INT 0
6811: PPUSH
6812: CALL_OW 49
// end ;
6816: GO 6762
6818: POP
6819: POP
// for i := 1 to 20 do
6820: LD_ADDR_VAR 0 2
6824: PUSH
6825: DOUBLE
6826: LD_INT 1
6828: DEC
6829: ST_TO_ADDR
6830: LD_INT 20
6832: PUSH
6833: FOR_TO
6834: IFFALSE 6892
// begin PrepareHuman ( false , class_mortar , 8 ) ;
6836: LD_INT 0
6838: PPUSH
6839: LD_INT 8
6841: PPUSH
6842: LD_INT 8
6844: PPUSH
6845: CALL_OW 380
// un = CreateHuman ;
6849: LD_ADDR_VAR 0 3
6853: PUSH
6854: CALL_OW 44
6858: ST_TO_ADDR
// northGroup = northGroup ^ un ;
6859: LD_ADDR_EXP 81
6863: PUSH
6864: LD_EXP 81
6868: PUSH
6869: LD_VAR 0 3
6873: ADD
6874: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea1 , false ) ;
6875: LD_VAR 0 3
6879: PPUSH
6880: LD_INT 23
6882: PPUSH
6883: LD_INT 0
6885: PPUSH
6886: CALL_OW 49
// end ;
6890: GO 6833
6892: POP
6893: POP
// for i := 1 to 10 do
6894: LD_ADDR_VAR 0 2
6898: PUSH
6899: DOUBLE
6900: LD_INT 1
6902: DEC
6903: ST_TO_ADDR
6904: LD_INT 10
6906: PUSH
6907: FOR_TO
6908: IFFALSE 7022
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
6910: LD_INT 13
6912: PPUSH
6913: LD_INT 1
6915: PPUSH
6916: LD_INT 1
6918: PPUSH
6919: LD_INT 26
6921: PPUSH
6922: LD_INT 100
6924: PPUSH
6925: CALL 49958 0 5
// veh = CreateVehicle ;
6929: LD_ADDR_VAR 0 4
6933: PUSH
6934: CALL_OW 45
6938: ST_TO_ADDR
// southGroup = southGroup ^ veh ;
6939: LD_ADDR_EXP 82
6943: PUSH
6944: LD_EXP 82
6948: PUSH
6949: LD_VAR 0 4
6953: ADD
6954: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea2 , false ) ;
6955: LD_VAR 0 4
6959: PPUSH
6960: LD_INT 24
6962: PPUSH
6963: LD_INT 0
6965: PPUSH
6966: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6970: LD_INT 0
6972: PPUSH
6973: LD_INT 8
6975: PPUSH
6976: CALL_OW 383
// un = CreateHuman ;
6980: LD_ADDR_VAR 0 3
6984: PUSH
6985: CALL_OW 44
6989: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6990: LD_ADDR_EXP 82
6994: PUSH
6995: LD_EXP 82
6999: PUSH
7000: LD_VAR 0 3
7004: ADD
7005: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7006: LD_VAR 0 3
7010: PPUSH
7011: LD_VAR 0 4
7015: PPUSH
7016: CALL_OW 52
// end ;
7020: GO 6907
7022: POP
7023: POP
// end ; end_of_file
7024: LD_VAR 0 1
7028: RET
// export function PrepareUnitExt ( ident , exist_mode ) ; var unit ; begin
7029: LD_INT 0
7031: PPUSH
7032: PPUSH
// if exist_mode then
7033: LD_VAR 0 2
7037: IFFALSE 7062
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
7039: LD_ADDR_VAR 0 4
7043: PUSH
7044: LD_EXP 33
7048: PUSH
7049: LD_VAR 0 1
7053: STR
7054: PPUSH
7055: CALL_OW 34
7059: ST_TO_ADDR
7060: GO 7077
// unit := NewCharacter ( ident ) ;
7062: LD_ADDR_VAR 0 4
7066: PUSH
7067: LD_VAR 0 1
7071: PPUSH
7072: CALL_OW 25
7076: ST_TO_ADDR
// result := unit ;
7077: LD_ADDR_VAR 0 3
7081: PUSH
7082: LD_VAR 0 4
7086: ST_TO_ADDR
// end ;
7087: LD_VAR 0 3
7091: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
7092: LD_INT 0
7094: PPUSH
7095: PPUSH
7096: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze ] ;
7097: LD_ADDR_VAR 0 1
7101: PUSH
7102: LD_VAR 0 1
7106: PUSH
7107: LD_EXP 44
7111: PUSH
7112: LD_EXP 45
7116: PUSH
7117: LD_EXP 48
7121: PUSH
7122: LD_EXP 49
7126: PUSH
7127: LD_EXP 46
7131: PUSH
7132: LD_EXP 47
7136: PUSH
7137: LD_EXP 50
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: DIFF
7151: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7152: LD_ADDR_VAR 0 7
7156: PUSH
7157: LD_VAR 0 1
7161: PUSH
7162: LD_INT 1
7164: PPUSH
7165: LD_VAR 0 1
7169: PPUSH
7170: CALL_OW 12
7174: ARRAY
7175: ST_TO_ADDR
// if radio then
7176: LD_VAR 0 4
7180: IFFALSE 7229
// begin if GetSex ( speaker ) = sex_male then
7182: LD_VAR 0 7
7186: PPUSH
7187: CALL_OW 258
7191: PUSH
7192: LD_INT 1
7194: EQUAL
7195: IFFALSE 7213
// SayRadio ( speaker , dialogMID ) else
7197: LD_VAR 0 7
7201: PPUSH
7202: LD_VAR 0 2
7206: PPUSH
7207: CALL_OW 94
7211: GO 7227
// SayRadio ( speaker , dialogFID ) ;
7213: LD_VAR 0 7
7217: PPUSH
7218: LD_VAR 0 3
7222: PPUSH
7223: CALL_OW 94
// end else
7227: GO 7274
// begin if GetSex ( speaker ) = sex_male then
7229: LD_VAR 0 7
7233: PPUSH
7234: CALL_OW 258
7238: PUSH
7239: LD_INT 1
7241: EQUAL
7242: IFFALSE 7260
// Say ( speaker , dialogMID ) else
7244: LD_VAR 0 7
7248: PPUSH
7249: LD_VAR 0 2
7253: PPUSH
7254: CALL_OW 88
7258: GO 7274
// Say ( speaker , dialogFID ) ;
7260: LD_VAR 0 7
7264: PPUSH
7265: LD_VAR 0 3
7269: PPUSH
7270: CALL_OW 88
// end ; result := speaker ;
7274: LD_ADDR_VAR 0 5
7278: PUSH
7279: LD_VAR 0 7
7283: ST_TO_ADDR
// end ;
7284: LD_VAR 0 5
7288: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
7289: LD_INT 0
7291: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
7292: LD_VAR 0 1
7296: PPUSH
7297: CALL_OW 255
7301: PUSH
7302: LD_VAR 0 3
7306: EQUAL
7307: PUSH
7308: LD_VAR 0 1
7312: PPUSH
7313: CALL_OW 302
7317: AND
7318: IFFALSE 7340
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
7320: LD_VAR 0 1
7324: PPUSH
7325: LD_EXP 32
7329: PUSH
7330: LD_VAR 0 2
7334: STR
7335: PPUSH
7336: CALL_OW 38
// end ;
7340: LD_VAR 0 4
7344: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
7345: LD_INT 0
7347: PPUSH
7348: PPUSH
7349: PPUSH
// resultCharactersToSave = [ ] ;
7350: LD_ADDR_VAR 0 6
7354: PUSH
7355: EMPTY
7356: ST_TO_ADDR
// for unit in characters do
7357: LD_ADDR_VAR 0 5
7361: PUSH
7362: LD_VAR 0 1
7366: PUSH
7367: FOR_IN
7368: IFFALSE 7416
// if GetSide ( unit ) = side and IsOK ( unit ) then
7370: LD_VAR 0 5
7374: PPUSH
7375: CALL_OW 255
7379: PUSH
7380: LD_VAR 0 3
7384: EQUAL
7385: PUSH
7386: LD_VAR 0 5
7390: PPUSH
7391: CALL_OW 302
7395: AND
7396: IFFALSE 7414
// resultCharactersToSave = resultCharactersToSave ^ unit ;
7398: LD_ADDR_VAR 0 6
7402: PUSH
7403: LD_VAR 0 6
7407: PUSH
7408: LD_VAR 0 5
7412: ADD
7413: ST_TO_ADDR
7414: GO 7367
7416: POP
7417: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
7418: LD_VAR 0 6
7422: PPUSH
7423: LD_EXP 32
7427: PUSH
7428: LD_VAR 0 2
7432: STR
7433: PPUSH
7434: CALL_OW 38
// end ;
7438: LD_VAR 0 4
7442: RET
// export function SelectCharacters ( maxUnitToChoose ) ; var i , charsToChoose , selectedPeople ; begin
7443: LD_INT 0
7445: PPUSH
7446: PPUSH
7447: PPUSH
7448: PPUSH
// charsToChoose = otherKirovUnits ;
7449: LD_ADDR_VAR 0 4
7453: PUSH
7454: LD_EXP 60
7458: ST_TO_ADDR
// charsToChoose = charsToChoose ^ otherBeriaUnits ;
7459: LD_ADDR_VAR 0 4
7463: PUSH
7464: LD_VAR 0 4
7468: PUSH
7469: LD_EXP 53
7473: ADD
7474: ST_TO_ADDR
// charsToChoose = charsToChoose ^ other_survivors ;
7475: LD_ADDR_VAR 0 4
7479: PUSH
7480: LD_VAR 0 4
7484: PUSH
7485: LD_EXP 51
7489: ADD
7490: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov ;
7491: LD_ADDR_VAR 0 4
7495: PUSH
7496: LD_VAR 0 4
7500: PUSH
7501: LD_EXP 48
7505: ADD
7506: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov2 ;
7507: LD_ADDR_VAR 0 4
7511: PUSH
7512: LD_VAR 0 4
7516: PUSH
7517: LD_EXP 49
7521: ADD
7522: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , maxUnitToChoose , maxUnitToChoose , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Kurin ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
7523: LD_ADDR_VAR 0 5
7527: PUSH
7528: LD_STRING text
7530: PPUSH
7531: LD_VAR 0 1
7535: PPUSH
7536: LD_VAR 0 1
7540: PPUSH
7541: LD_INT -5
7543: PUSH
7544: LD_EXP 44
7548: PUSH
7549: LD_EXP 45
7553: PUSH
7554: LD_EXP 47
7558: PUSH
7559: LD_EXP 46
7563: PUSH
7564: LD_INT -6
7566: PUSH
7567: LD_INT -2
7569: PUSH
7570: LD_INT -3
7572: PUSH
7573: LD_INT -5
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: PUSH
7587: LD_VAR 0 4
7591: ADD
7592: PUSH
7593: LD_INT -6
7595: PUSH
7596: LD_INT -4
7598: PUSH
7599: LD_EXP 56
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: LIST
7608: ADD
7609: PPUSH
7610: LD_INT 1
7612: PUSH
7613: LD_INT 3
7615: PUSH
7616: LD_INT 2
7618: PUSH
7619: LD_INT 1
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: LD_INT 4
7628: PUSH
7629: LD_INT 1
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: PPUSH
7642: CALL_OW 42
7646: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
7647: LD_VAR 0 4
7651: PPUSH
7652: LD_INT 6
7654: PPUSH
7655: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
7659: LD_VAR 0 5
7663: PPUSH
7664: LD_INT 3
7666: PPUSH
7667: CALL_OW 235
// SetSurvivorsArabianAttack ;
7671: CALL 4829 0 0
// end ;
7675: LD_VAR 0 2
7679: RET
// export function FindNotFullBuildingInArea ( area , side , buildingType ) ; var building ; begin
7680: LD_INT 0
7682: PPUSH
7683: PPUSH
// for building in FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , buildingType ] ] ) do
7684: LD_ADDR_VAR 0 5
7688: PUSH
7689: LD_VAR 0 1
7693: PPUSH
7694: LD_INT 22
7696: PUSH
7697: LD_VAR 0 2
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: PUSH
7706: LD_INT 21
7708: PUSH
7709: LD_INT 3
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: PUSH
7716: LD_INT 30
7718: PUSH
7719: LD_VAR 0 3
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: LIST
7732: PPUSH
7733: CALL_OW 70
7737: PUSH
7738: FOR_IN
7739: IFFALSE 7772
// begin if UnitsInside ( building ) < 6 then
7741: LD_VAR 0 5
7745: PPUSH
7746: CALL_OW 313
7750: PUSH
7751: LD_INT 6
7753: LESS
7754: IFFALSE 7770
// begin result = building ;
7756: LD_ADDR_VAR 0 4
7760: PUSH
7761: LD_VAR 0 5
7765: ST_TO_ADDR
// exit ;
7766: POP
7767: POP
7768: GO 7782
// end ; end ;
7770: GO 7738
7772: POP
7773: POP
// result = 0 ;
7774: LD_ADDR_VAR 0 4
7778: PUSH
7779: LD_INT 0
7781: ST_TO_ADDR
// end ;
7782: LD_VAR 0 4
7786: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
7787: LD_INT 0
7789: PPUSH
7790: PPUSH
// dir := GetDir ( bunker ) - 3 ;
7791: LD_ADDR_VAR 0 4
7795: PUSH
7796: LD_VAR 0 2
7800: PPUSH
7801: CALL_OW 254
7805: PUSH
7806: LD_INT 3
7808: MINUS
7809: ST_TO_ADDR
// if dir < 0 then
7810: LD_VAR 0 4
7814: PUSH
7815: LD_INT 0
7817: LESS
7818: IFFALSE 7834
// dir := 6 + dir ;
7820: LD_ADDR_VAR 0 4
7824: PUSH
7825: LD_INT 6
7827: PUSH
7828: LD_VAR 0 4
7832: PLUS
7833: ST_TO_ADDR
// SetDir ( un , dir ) ;
7834: LD_VAR 0 1
7838: PPUSH
7839: LD_VAR 0 4
7843: PPUSH
7844: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
7848: LD_VAR 0 1
7852: PPUSH
7853: LD_VAR 0 2
7857: PPUSH
7858: CALL_OW 52
// result = un ;
7862: LD_ADDR_VAR 0 3
7866: PUSH
7867: LD_VAR 0 1
7871: ST_TO_ADDR
// end ;
7872: LD_VAR 0 3
7876: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7877: LD_INT 0
7879: PPUSH
7880: PPUSH
7881: PPUSH
// uc_side := GetSide ( b ) ;
7882: LD_ADDR_OWVAR 20
7886: PUSH
7887: LD_VAR 0 2
7891: PPUSH
7892: CALL_OW 255
7896: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7897: LD_ADDR_OWVAR 21
7901: PUSH
7902: LD_VAR 0 2
7906: PPUSH
7907: CALL_OW 248
7911: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7912: LD_INT 0
7914: PPUSH
7915: LD_INT 1
7917: PPUSH
7918: LD_VAR 0 1
7922: PPUSH
7923: CALL_OW 380
// un = CreateHuman ;
7927: LD_ADDR_VAR 0 4
7931: PUSH
7932: CALL_OW 44
7936: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
7937: LD_ADDR_VAR 0 5
7941: PUSH
7942: LD_VAR 0 2
7946: PPUSH
7947: CALL_OW 254
7951: PUSH
7952: LD_INT 3
7954: MINUS
7955: ST_TO_ADDR
// if dir < 0 then
7956: LD_VAR 0 5
7960: PUSH
7961: LD_INT 0
7963: LESS
7964: IFFALSE 7980
// dir := 6 + dir ;
7966: LD_ADDR_VAR 0 5
7970: PUSH
7971: LD_INT 6
7973: PUSH
7974: LD_VAR 0 5
7978: PLUS
7979: ST_TO_ADDR
// SetDir ( un , dir ) ;
7980: LD_VAR 0 4
7984: PPUSH
7985: LD_VAR 0 5
7989: PPUSH
7990: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7994: LD_VAR 0 4
7998: PPUSH
7999: LD_VAR 0 2
8003: PPUSH
8004: CALL_OW 52
// result = un ;
8008: LD_ADDR_VAR 0 3
8012: PUSH
8013: LD_VAR 0 4
8017: ST_TO_ADDR
// end ;
8018: LD_VAR 0 3
8022: RET
// export function AddComUpgradeBreastwork ( units , buildings , upgradeBType ) ; var building , x , y , dir ; begin
8023: LD_INT 0
8025: PPUSH
8026: PPUSH
8027: PPUSH
8028: PPUSH
8029: PPUSH
// for building in buildings do
8030: LD_ADDR_VAR 0 5
8034: PUSH
8035: LD_VAR 0 2
8039: PUSH
8040: FOR_IN
8041: IFFALSE 8133
// begin x = GetX ( building ) ;
8043: LD_ADDR_VAR 0 6
8047: PUSH
8048: LD_VAR 0 5
8052: PPUSH
8053: CALL_OW 250
8057: ST_TO_ADDR
// y = GetY ( building ) ;
8058: LD_ADDR_VAR 0 7
8062: PUSH
8063: LD_VAR 0 5
8067: PPUSH
8068: CALL_OW 251
8072: ST_TO_ADDR
// dir = GetDir ( building ) ;
8073: LD_ADDR_VAR 0 8
8077: PUSH
8078: LD_VAR 0 5
8082: PPUSH
8083: CALL_OW 254
8087: ST_TO_ADDR
// AddComDismantle ( units , building ) ;
8088: LD_VAR 0 1
8092: PPUSH
8093: LD_VAR 0 5
8097: PPUSH
8098: CALL_OW 227
// AddComBuild ( units , upgradeBType , x , y , dir ) ;
8102: LD_VAR 0 1
8106: PPUSH
8107: LD_VAR 0 3
8111: PPUSH
8112: LD_VAR 0 6
8116: PPUSH
8117: LD_VAR 0 7
8121: PPUSH
8122: LD_VAR 0 8
8126: PPUSH
8127: CALL_OW 205
// end ;
8131: GO 8040
8133: POP
8134: POP
// end ;
8135: LD_VAR 0 4
8139: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8140: LD_INT 0
8142: PPUSH
8143: PPUSH
8144: PPUSH
8145: PPUSH
8146: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8147: LD_ADDR_VAR 0 8
8151: PUSH
8152: LD_INT 48
8154: PUSH
8155: LD_INT 49
8157: PUSH
8158: LD_INT 50
8160: PUSH
8161: LD_INT 20
8163: PUSH
8164: LD_INT 1
8166: PUSH
8167: LD_INT 51
8169: PUSH
8170: LD_INT 52
8172: PUSH
8173: LD_INT 69
8175: PUSH
8176: LD_INT 39
8178: PUSH
8179: LD_INT 34
8181: PUSH
8182: LD_INT 40
8184: PUSH
8185: LD_INT 53
8187: PUSH
8188: LD_INT 71
8190: PUSH
8191: LD_INT 57
8193: PUSH
8194: LD_INT 58
8196: PUSH
8197: LD_INT 44
8199: PUSH
8200: LD_INT 32
8202: PUSH
8203: LD_INT 27
8205: PUSH
8206: LD_INT 23
8208: PUSH
8209: LD_INT 33
8211: PUSH
8212: LD_INT 59
8214: PUSH
8215: LD_INT 54
8217: PUSH
8218: LD_INT 55
8220: PUSH
8221: LD_INT 56
8223: PUSH
8224: LD_INT 63
8226: PUSH
8227: LD_INT 64
8229: PUSH
8230: LD_INT 65
8232: PUSH
8233: LD_INT 30
8235: PUSH
8236: LD_INT 31
8238: PUSH
8239: LD_INT 21
8241: PUSH
8242: LD_INT 22
8244: PUSH
8245: LD_INT 25
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8282: LD_ADDR_VAR 0 5
8286: PUSH
8287: DOUBLE
8288: LD_INT 1
8290: DEC
8291: ST_TO_ADDR
8292: LD_VAR 0 8
8296: PUSH
8297: FOR_TO
8298: IFFALSE 8374
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8300: LD_VAR 0 8
8304: PUSH
8305: LD_VAR 0 5
8309: ARRAY
8310: PPUSH
8311: LD_VAR 0 1
8315: PPUSH
8316: CALL_OW 321
8320: PUSH
8321: LD_INT 1
8323: EQUAL
8324: PUSH
8325: LD_VAR 0 8
8329: PUSH
8330: LD_VAR 0 5
8334: ARRAY
8335: PPUSH
8336: LD_VAR 0 3
8340: PPUSH
8341: CALL_OW 482
8345: PUSH
8346: LD_INT 1
8348: EQUAL
8349: AND
8350: IFFALSE 8372
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8352: LD_VAR 0 2
8356: PPUSH
8357: LD_VAR 0 8
8361: PUSH
8362: LD_VAR 0 5
8366: ARRAY
8367: PPUSH
8368: CALL_OW 184
8372: GO 8297
8374: POP
8375: POP
// end ;
8376: LD_VAR 0 4
8380: RET
// export function MoveToBase ( units , roadArea ) ; var i , unit , playerUnits , playerUnit , enemyUnitsOnRoad , nearUnit , attackUnits , medics , damageUnits , inBase , newBase ; begin
8381: LD_INT 0
8383: PPUSH
8384: PPUSH
8385: PPUSH
8386: PPUSH
8387: PPUSH
8388: PPUSH
8389: PPUSH
8390: PPUSH
8391: PPUSH
8392: PPUSH
8393: PPUSH
8394: PPUSH
// inBase = false ;
8395: LD_ADDR_VAR 0 13
8399: PUSH
8400: LD_INT 0
8402: ST_TO_ADDR
// repeat enemyUnitsOnRoad = FilterUnitsInArea ( roadArea , [ [ f_side , 3 ] ] ) ;
8403: LD_ADDR_VAR 0 8
8407: PUSH
8408: LD_VAR 0 2
8412: PPUSH
8413: LD_INT 22
8415: PUSH
8416: LD_INT 3
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: PUSH
8423: EMPTY
8424: LIST
8425: PPUSH
8426: CALL_OW 70
8430: ST_TO_ADDR
// attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_mechanic ] , [ f_type , unit_vehicle ] ] ] ) ;
8431: LD_ADDR_VAR 0 10
8435: PUSH
8436: LD_VAR 0 1
8440: PPUSH
8441: LD_INT 50
8443: PUSH
8444: EMPTY
8445: LIST
8446: PUSH
8447: LD_INT 2
8449: PUSH
8450: LD_INT 25
8452: PUSH
8453: LD_INT 1
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: PUSH
8460: LD_INT 25
8462: PUSH
8463: LD_INT 3
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PUSH
8470: LD_INT 21
8472: PUSH
8473: LD_INT 2
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PPUSH
8490: CALL_OW 72
8494: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
8495: LD_ADDR_VAR 0 11
8499: PUSH
8500: LD_VAR 0 1
8504: PPUSH
8505: LD_INT 50
8507: PUSH
8508: EMPTY
8509: LIST
8510: PUSH
8511: LD_INT 25
8513: PUSH
8514: LD_INT 4
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: PPUSH
8525: CALL_OW 72
8529: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ f_not , [ f_lives , 1000 ] ] ) ;
8530: LD_ADDR_VAR 0 12
8534: PUSH
8535: LD_VAR 0 1
8539: PPUSH
8540: LD_INT 3
8542: PUSH
8543: LD_INT 24
8545: PUSH
8546: LD_INT 1000
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PPUSH
8557: CALL_OW 72
8561: ST_TO_ADDR
// playerUnits = FilterAllUnits ( [ [ f_side , 3 ] ] ) ;
8562: LD_ADDR_VAR 0 6
8566: PUSH
8567: LD_INT 22
8569: PUSH
8570: LD_INT 3
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: PUSH
8577: EMPTY
8578: LIST
8579: PPUSH
8580: CALL_OW 69
8584: ST_TO_ADDR
// for unit in UnitFilter ( units , [ f_ok ] ) do
8585: LD_ADDR_VAR 0 5
8589: PUSH
8590: LD_VAR 0 1
8594: PPUSH
8595: LD_INT 50
8597: PUSH
8598: EMPTY
8599: LIST
8600: PPUSH
8601: CALL_OW 72
8605: PUSH
8606: FOR_IN
8607: IFFALSE 8884
// begin if attackUnits and medics then
8609: LD_VAR 0 10
8613: PUSH
8614: LD_VAR 0 11
8618: AND
8619: IFFALSE 8686
// begin if damageUnits then
8621: LD_VAR 0 12
8625: IFFALSE 8647
// ComHeal ( medics , damageUnits [ 1 ] ) else
8627: LD_VAR 0 11
8631: PPUSH
8632: LD_VAR 0 12
8636: PUSH
8637: LD_INT 1
8639: ARRAY
8640: PPUSH
8641: CALL_OW 128
8645: GO 8684
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
8647: LD_VAR 0 11
8651: PPUSH
8652: LD_VAR 0 10
8656: PUSH
8657: LD_INT 1
8659: ARRAY
8660: PPUSH
8661: CALL_OW 250
8665: PPUSH
8666: LD_VAR 0 10
8670: PUSH
8671: LD_INT 1
8673: ARRAY
8674: PPUSH
8675: CALL_OW 251
8679: PPUSH
8680: CALL_OW 111
// end else
8684: GO 8715
// begin if not attackUnits and medics then
8686: LD_VAR 0 10
8690: NOT
8691: PUSH
8692: LD_VAR 0 11
8696: AND
8697: IFFALSE 8715
// attackUnits = attackUnits ^ medics ;
8699: LD_ADDR_VAR 0 10
8703: PUSH
8704: LD_VAR 0 10
8708: PUSH
8709: LD_VAR 0 11
8713: ADD
8714: ST_TO_ADDR
// end ; if enemyUnitsOnRoad then
8715: LD_VAR 0 8
8719: IFFALSE 8838
// begin for playerUnit in playerUnits do
8721: LD_ADDR_VAR 0 7
8725: PUSH
8726: LD_VAR 0 6
8730: PUSH
8731: FOR_IN
8732: IFFALSE 8834
// begin if Attacks ( playerUnit ) then
8734: LD_VAR 0 7
8738: PPUSH
8739: CALL_OW 320
8743: IFFALSE 8798
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
8745: LD_VAR 0 7
8749: PPUSH
8750: CALL_OW 320
8754: PUSH
8755: LD_VAR 0 1
8759: IN
8760: PUSH
8761: LD_VAR 0 7
8765: PPUSH
8766: LD_VAR 0 5
8770: PPUSH
8771: CALL_OW 296
8775: PUSH
8776: LD_INT 13
8778: LESS
8779: AND
8780: IFFALSE 8796
// ComAttackUnit ( attackUnits , playerUnit ) end else
8782: LD_VAR 0 10
8786: PPUSH
8787: LD_VAR 0 7
8791: PPUSH
8792: CALL_OW 115
8796: GO 8832
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , unit ) ;
8798: LD_ADDR_VAR 0 9
8802: PUSH
8803: LD_VAR 0 8
8807: PPUSH
8808: LD_VAR 0 5
8812: PPUSH
8813: CALL_OW 74
8817: ST_TO_ADDR
// ComAttackUnit ( attackUnits , nearUnit ) ;
8818: LD_VAR 0 10
8822: PPUSH
8823: LD_VAR 0 9
8827: PPUSH
8828: CALL_OW 115
// end ; end ;
8832: GO 8731
8834: POP
8835: POP
// end else
8836: GO 8853
// begin ComMoveXY ( unit , 27 , 34 ) ;
8838: LD_VAR 0 5
8842: PPUSH
8843: LD_INT 27
8845: PPUSH
8846: LD_INT 34
8848: PPUSH
8849: CALL_OW 111
// end ; if GetDistUnitXY ( unit , 27 , 34 ) < 5 then
8853: LD_VAR 0 5
8857: PPUSH
8858: LD_INT 27
8860: PPUSH
8861: LD_INT 34
8863: PPUSH
8864: CALL_OW 297
8868: PUSH
8869: LD_INT 5
8871: LESS
8872: IFFALSE 8882
// inBase = true ;
8874: LD_ADDR_VAR 0 13
8878: PUSH
8879: LD_INT 1
8881: ST_TO_ADDR
// end ;
8882: GO 8606
8884: POP
8885: POP
// wait ( 0 0$1 ) ;
8886: LD_INT 35
8888: PPUSH
8889: CALL_OW 67
// until UnitFilter ( units , [ f_ok ] ) = 0 or inBase ;
8893: LD_VAR 0 1
8897: PPUSH
8898: LD_INT 50
8900: PUSH
8901: EMPTY
8902: LIST
8903: PPUSH
8904: CALL_OW 72
8908: PUSH
8909: LD_INT 0
8911: EQUAL
8912: PUSH
8913: LD_VAR 0 13
8917: OR
8918: IFFALSE 8403
// ComMoveXY ( units , 27 , 34 ) ;
8920: LD_VAR 0 1
8924: PPUSH
8925: LD_INT 27
8927: PPUSH
8928: LD_INT 34
8930: PPUSH
8931: CALL_OW 111
// for i := 1 to units do
8935: LD_ADDR_VAR 0 4
8939: PUSH
8940: DOUBLE
8941: LD_INT 1
8943: DEC
8944: ST_TO_ADDR
8945: LD_VAR 0 1
8949: PUSH
8950: FOR_TO
8951: IFFALSE 8986
// if IsOk ( units [ i ] ) then
8953: LD_VAR 0 1
8957: PUSH
8958: LD_VAR 0 4
8962: ARRAY
8963: PPUSH
8964: CALL_OW 302
8968: IFFALSE 8984
// americanTroopsArriveOmicronCounter = americanTroopsArriveOmicronCounter + 1 ;
8970: LD_ADDR_EXP 12
8974: PUSH
8975: LD_EXP 12
8979: PUSH
8980: LD_INT 1
8982: PLUS
8983: ST_TO_ADDR
8984: GO 8950
8986: POP
8987: POP
// amSupportTroops = amSupportTroops diff units ;
8988: LD_ADDR_EXP 78
8992: PUSH
8993: LD_EXP 78
8997: PUSH
8998: LD_VAR 0 1
9002: DIFF
9003: ST_TO_ADDR
// newBase = amBase ;
9004: LD_ADDR_VAR 0 14
9008: PUSH
9009: LD_EXP 80
9013: ST_TO_ADDR
// newBase = newBase ^ UnitFilter ( units , [ f_ok ] ) ;
9014: LD_ADDR_VAR 0 14
9018: PUSH
9019: LD_VAR 0 14
9023: PUSH
9024: LD_VAR 0 1
9028: PPUSH
9029: LD_INT 50
9031: PUSH
9032: EMPTY
9033: LIST
9034: PPUSH
9035: CALL_OW 72
9039: ADD
9040: ST_TO_ADDR
// amBase = newBase ;
9041: LD_ADDR_EXP 80
9045: PUSH
9046: LD_VAR 0 14
9050: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 1 , newBase ) ;
9051: LD_ADDR_EXP 87
9055: PUSH
9056: LD_EXP 87
9060: PPUSH
9061: LD_INT 1
9063: PPUSH
9064: LD_VAR 0 14
9068: PPUSH
9069: CALL_OW 1
9073: ST_TO_ADDR
// end ; end_of_file
9074: LD_VAR 0 3
9078: RET
// every 0 0$1 do
9079: GO 9081
9081: DISABLE
// MC_Start ;
9082: CALL 21956 0 0
9086: END
// export function CustomInitMacro ; begin
9087: LD_INT 0
9089: PPUSH
// MC_SetParkingArea ( 1 , OmicronParkingArea ) ;
9090: LD_INT 1
9092: PPUSH
9093: LD_INT 17
9095: PPUSH
9096: CALL 44740 0 2
// case Difficulty of 1 :
9100: LD_OWVAR 67
9104: PUSH
9105: LD_INT 1
9107: DOUBLE
9108: EQUAL
9109: IFTRUE 9113
9111: GO 9182
9113: POP
// MC_SetProduceList ( 1 , [ [ us_medium_tracked , engine_combustion , control_manual , us_machine_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] ] ) ; 2 :
9114: LD_INT 1
9116: PPUSH
9117: LD_INT 3
9119: PUSH
9120: LD_INT 1
9122: PUSH
9123: LD_INT 1
9125: PUSH
9126: LD_INT 2
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: PUSH
9135: LD_INT 3
9137: PUSH
9138: LD_INT 1
9140: PUSH
9141: LD_INT 1
9143: PUSH
9144: LD_INT 4
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: PUSH
9153: LD_INT 3
9155: PUSH
9156: LD_INT 1
9158: PUSH
9159: LD_INT 1
9161: PUSH
9162: LD_INT 4
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: LIST
9175: PPUSH
9176: CALL 43475 0 2
9180: GO 9337
9182: LD_INT 2
9184: DOUBLE
9185: EQUAL
9186: IFTRUE 9190
9188: GO 9259
9190: POP
// MC_SetProduceList ( 1 , [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] ] ) ; 3 :
9191: LD_INT 1
9193: PPUSH
9194: LD_INT 3
9196: PUSH
9197: LD_INT 1
9199: PUSH
9200: LD_INT 1
9202: PUSH
9203: LD_INT 4
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: PUSH
9212: LD_INT 3
9214: PUSH
9215: LD_INT 1
9217: PUSH
9218: LD_INT 1
9220: PUSH
9221: LD_INT 4
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: PUSH
9230: LD_INT 3
9232: PUSH
9233: LD_INT 1
9235: PUSH
9236: LD_INT 1
9238: PUSH
9239: LD_INT 4
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: LIST
9252: PPUSH
9253: CALL 43475 0 2
9257: GO 9337
9259: LD_INT 3
9261: DOUBLE
9262: EQUAL
9263: IFTRUE 9267
9265: GO 9336
9267: POP
// MC_SetProduceList ( 1 , [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] ] ) ; end ;
9268: LD_INT 1
9270: PPUSH
9271: LD_INT 3
9273: PUSH
9274: LD_INT 1
9276: PUSH
9277: LD_INT 1
9279: PUSH
9280: LD_INT 4
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: PUSH
9289: LD_INT 3
9291: PUSH
9292: LD_INT 1
9294: PUSH
9295: LD_INT 1
9297: PUSH
9298: LD_INT 4
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: PUSH
9307: LD_INT 3
9309: PUSH
9310: LD_INT 1
9312: PUSH
9313: LD_INT 1
9315: PUSH
9316: LD_INT 4
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: LIST
9329: PPUSH
9330: CALL 43475 0 2
9334: GO 9337
9336: POP
// end ;
9337: LD_VAR 0 1
9341: RET
// export function KirovUpgradeBase ; var lab , workshop , turret ; begin
9342: LD_INT 0
9344: PPUSH
9345: PPUSH
9346: PPUSH
9347: PPUSH
// lab = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
9348: LD_ADDR_VAR 0 2
9352: PUSH
9353: LD_INT 19
9355: PPUSH
9356: LD_INT 22
9358: PUSH
9359: LD_INT 6
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: PUSH
9366: LD_INT 21
9368: PUSH
9369: LD_INT 3
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PUSH
9376: LD_INT 30
9378: PUSH
9379: LD_INT 6
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: LIST
9390: PPUSH
9391: CALL_OW 70
9395: PUSH
9396: LD_INT 1
9398: ARRAY
9399: ST_TO_ADDR
// workshop = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_workshop ] ] ) [ 1 ] ;
9400: LD_ADDR_VAR 0 3
9404: PUSH
9405: LD_INT 19
9407: PPUSH
9408: LD_INT 22
9410: PUSH
9411: LD_INT 6
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: PUSH
9418: LD_INT 21
9420: PUSH
9421: LD_INT 3
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: PUSH
9428: LD_INT 30
9430: PUSH
9431: LD_INT 2
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: LIST
9442: PPUSH
9443: CALL_OW 70
9447: PUSH
9448: LD_INT 1
9450: ARRAY
9451: ST_TO_ADDR
// AddComUpgradeLab ( lab , b_lab_weapon ) ;
9452: LD_VAR 0 2
9456: PPUSH
9457: LD_INT 10
9459: PPUSH
9460: CALL_OW 207
// AddComUpgrade ( workshop ) ;
9464: LD_VAR 0 3
9468: PPUSH
9469: CALL_OW 206
// end ;
9473: LD_VAR 0 1
9477: RET
// export function MountWeaponTurrent ; var turret , weapons ; begin
9478: LD_INT 0
9480: PPUSH
9481: PPUSH
9482: PPUSH
// weapons = [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] ;
9483: LD_ADDR_VAR 0 3
9487: PUSH
9488: LD_INT 42
9490: PUSH
9491: LD_INT 43
9493: PUSH
9494: LD_INT 44
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: LIST
9501: ST_TO_ADDR
// for turret in kirovBunkersToMountWeapon do
9502: LD_ADDR_VAR 0 2
9506: PUSH
9507: LD_EXP 67
9511: PUSH
9512: FOR_IN
9513: IFFALSE 9545
// AddComPlaceWeapon ( turret , weapons [ rand ( 1 , weapons ) ] ) ;
9515: LD_VAR 0 2
9519: PPUSH
9520: LD_VAR 0 3
9524: PUSH
9525: LD_INT 1
9527: PPUSH
9528: LD_VAR 0 3
9532: PPUSH
9533: CALL_OW 12
9537: ARRAY
9538: PPUSH
9539: CALL_OW 208
9543: GO 9512
9545: POP
9546: POP
// end ;
9547: LD_VAR 0 1
9551: RET
// export function KirovProduceVehicles ( factory ) ; begin
9552: LD_INT 0
9554: PPUSH
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
9555: LD_VAR 0 1
9559: PPUSH
9560: LD_INT 21
9562: PPUSH
9563: LD_INT 1
9565: PPUSH
9566: LD_INT 1
9568: PPUSH
9569: LD_INT 51
9571: PPUSH
9572: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
9576: LD_VAR 0 1
9580: PPUSH
9581: LD_INT 21
9583: PPUSH
9584: LD_INT 1
9586: PPUSH
9587: LD_INT 1
9589: PPUSH
9590: LD_INT 51
9592: PPUSH
9593: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
9597: LD_VAR 0 1
9601: PPUSH
9602: LD_INT 21
9604: PPUSH
9605: LD_INT 1
9607: PPUSH
9608: LD_INT 1
9610: PPUSH
9611: LD_INT 51
9613: PPUSH
9614: CALL_OW 185
// case Difficulty of 1 :
9618: LD_OWVAR 67
9622: PUSH
9623: LD_INT 1
9625: DOUBLE
9626: EQUAL
9627: IFTRUE 9631
9629: GO 9697
9631: POP
// begin AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun ) ;
9632: LD_VAR 0 1
9636: PPUSH
9637: LD_INT 21
9639: PPUSH
9640: LD_INT 1
9642: PPUSH
9643: LD_INT 1
9645: PPUSH
9646: LD_INT 43
9648: PPUSH
9649: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun ) ;
9653: LD_VAR 0 1
9657: PPUSH
9658: LD_INT 21
9660: PPUSH
9661: LD_INT 1
9663: PPUSH
9664: LD_INT 1
9666: PPUSH
9667: LD_INT 43
9669: PPUSH
9670: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_gun ) ;
9674: LD_VAR 0 1
9678: PPUSH
9679: LD_INT 21
9681: PPUSH
9682: LD_INT 1
9684: PPUSH
9685: LD_INT 1
9687: PPUSH
9688: LD_INT 44
9690: PPUSH
9691: CALL_OW 185
// end ; 2 :
9695: GO 9846
9697: LD_INT 2
9699: DOUBLE
9700: EQUAL
9701: IFTRUE 9705
9703: GO 9771
9705: POP
// begin AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
9706: LD_VAR 0 1
9710: PPUSH
9711: LD_INT 21
9713: PPUSH
9714: LD_INT 1
9716: PPUSH
9717: LD_INT 1
9719: PPUSH
9720: LD_INT 42
9722: PPUSH
9723: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun ) ;
9727: LD_VAR 0 1
9731: PPUSH
9732: LD_INT 21
9734: PPUSH
9735: LD_INT 1
9737: PPUSH
9738: LD_INT 1
9740: PPUSH
9741: LD_INT 43
9743: PPUSH
9744: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun ) ;
9748: LD_VAR 0 1
9752: PPUSH
9753: LD_INT 21
9755: PPUSH
9756: LD_INT 1
9758: PPUSH
9759: LD_INT 1
9761: PPUSH
9762: LD_INT 43
9764: PPUSH
9765: CALL_OW 185
// end ; 3 :
9769: GO 9846
9771: LD_INT 3
9773: DOUBLE
9774: EQUAL
9775: IFTRUE 9779
9777: GO 9845
9779: POP
// begin AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
9780: LD_VAR 0 1
9784: PPUSH
9785: LD_INT 21
9787: PPUSH
9788: LD_INT 1
9790: PPUSH
9791: LD_INT 1
9793: PPUSH
9794: LD_INT 42
9796: PPUSH
9797: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
9801: LD_VAR 0 1
9805: PPUSH
9806: LD_INT 21
9808: PPUSH
9809: LD_INT 1
9811: PPUSH
9812: LD_INT 1
9814: PPUSH
9815: LD_INT 42
9817: PPUSH
9818: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun ) ;
9822: LD_VAR 0 1
9826: PPUSH
9827: LD_INT 21
9829: PPUSH
9830: LD_INT 1
9832: PPUSH
9833: LD_INT 1
9835: PPUSH
9836: LD_INT 43
9838: PPUSH
9839: CALL_OW 185
// end ; end ;
9843: GO 9846
9845: POP
// end ;
9846: LD_VAR 0 2
9850: RET
// export function KirovAttackOmicron ; var i , vehicle , vehicles , goodVehs ; begin
9851: LD_INT 0
9853: PPUSH
9854: PPUSH
9855: PPUSH
9856: PPUSH
9857: PPUSH
// vehicles = [ ] ;
9858: LD_ADDR_VAR 0 4
9862: PUSH
9863: EMPTY
9864: ST_TO_ADDR
// for vehicle in kirovAttackVehicles do
9865: LD_ADDR_VAR 0 3
9869: PUSH
9870: LD_EXP 71
9874: PUSH
9875: FOR_IN
9876: IFFALSE 9925
// vehicles = Insert ( vehicles , 1 , [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 1 ] ) ;
9878: LD_ADDR_VAR 0 4
9882: PUSH
9883: LD_VAR 0 4
9887: PPUSH
9888: LD_INT 1
9890: PPUSH
9891: LD_VAR 0 3
9895: PUSH
9896: LD_VAR 0 3
9900: PPUSH
9901: CALL_OW 313
9905: PUSH
9906: LD_INT 1
9908: ARRAY
9909: PUSH
9910: LD_INT 1
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: LIST
9917: PPUSH
9918: CALL_OW 2
9922: ST_TO_ADDR
9923: GO 9875
9925: POP
9926: POP
// repeat for i := 1 to vehicles do
9927: LD_ADDR_VAR 0 2
9931: PUSH
9932: DOUBLE
9933: LD_INT 1
9935: DEC
9936: ST_TO_ADDR
9937: LD_VAR 0 4
9941: PUSH
9942: FOR_TO
9943: IFFALSE 9981
// if vehicles [ i ] [ 3 ] = 1 then
9945: LD_VAR 0 4
9949: PUSH
9950: LD_VAR 0 2
9954: ARRAY
9955: PUSH
9956: LD_INT 3
9958: ARRAY
9959: PUSH
9960: LD_INT 1
9962: EQUAL
9963: IFFALSE 9979
// goodVehs = goodVehs + 1 ;
9965: LD_ADDR_VAR 0 5
9969: PUSH
9970: LD_VAR 0 5
9974: PUSH
9975: LD_INT 1
9977: PLUS
9978: ST_TO_ADDR
9979: GO 9942
9981: POP
9982: POP
// if goodVehs = vehicles then
9983: LD_VAR 0 5
9987: PUSH
9988: LD_VAR 0 4
9992: EQUAL
9993: IFFALSE 10042
// for i := 1 to vehicles do
9995: LD_ADDR_VAR 0 2
9999: PUSH
10000: DOUBLE
10001: LD_INT 1
10003: DEC
10004: ST_TO_ADDR
10005: LD_VAR 0 4
10009: PUSH
10010: FOR_TO
10011: IFFALSE 10040
// ComAgressiveMove ( vehicles [ i ] [ 1 ] , 26 , 35 ) ;
10013: LD_VAR 0 4
10017: PUSH
10018: LD_VAR 0 2
10022: ARRAY
10023: PUSH
10024: LD_INT 1
10026: ARRAY
10027: PPUSH
10028: LD_INT 26
10030: PPUSH
10031: LD_INT 35
10033: PPUSH
10034: CALL_OW 114
10038: GO 10010
10040: POP
10041: POP
// goodVehs = 0 ;
10042: LD_ADDR_VAR 0 5
10046: PUSH
10047: LD_INT 0
10049: ST_TO_ADDR
// for i := 1 to vehicles do
10050: LD_ADDR_VAR 0 2
10054: PUSH
10055: DOUBLE
10056: LD_INT 1
10058: DEC
10059: ST_TO_ADDR
10060: LD_VAR 0 4
10064: PUSH
10065: FOR_TO
10066: IFFALSE 10378
// begin if GetLives ( vehicles [ i ] [ 1 ] ) < 500 then
10068: LD_VAR 0 4
10072: PUSH
10073: LD_VAR 0 2
10077: ARRAY
10078: PUSH
10079: LD_INT 1
10081: ARRAY
10082: PPUSH
10083: CALL_OW 256
10087: PUSH
10088: LD_INT 500
10090: LESS
10091: IFFALSE 10209
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
10093: LD_ADDR_VAR 0 4
10097: PUSH
10098: LD_VAR 0 4
10102: PPUSH
10103: LD_VAR 0 2
10107: PUSH
10108: LD_VAR 0 4
10112: PUSH
10113: LD_VAR 0 2
10117: ARRAY
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PPUSH
10123: LD_INT 2
10125: PPUSH
10126: CALL 50080 0 3
10130: ST_TO_ADDR
// ComMoveXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) ;
10131: LD_VAR 0 4
10135: PUSH
10136: LD_VAR 0 2
10140: ARRAY
10141: PUSH
10142: LD_INT 1
10144: ARRAY
10145: PPUSH
10146: LD_INT 78
10148: PPUSH
10149: LD_INT 39
10151: PPUSH
10152: CALL_OW 111
// AddComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
10156: LD_VAR 0 4
10160: PUSH
10161: LD_VAR 0 2
10165: ARRAY
10166: PUSH
10167: LD_INT 2
10169: ARRAY
10170: PPUSH
10171: CALL_OW 181
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
10175: LD_VAR 0 4
10179: PUSH
10180: LD_VAR 0 2
10184: ARRAY
10185: PUSH
10186: LD_INT 2
10188: ARRAY
10189: PPUSH
10190: LD_VAR 0 4
10194: PUSH
10195: LD_VAR 0 2
10199: ARRAY
10200: PUSH
10201: LD_INT 1
10203: ARRAY
10204: PPUSH
10205: CALL_OW 189
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 and vehicles [ i ] [ 3 ] = 2 then
10209: LD_VAR 0 4
10213: PUSH
10214: LD_VAR 0 2
10218: ARRAY
10219: PUSH
10220: LD_INT 1
10222: ARRAY
10223: PPUSH
10224: CALL_OW 256
10228: PUSH
10229: LD_INT 1000
10231: EQUAL
10232: PUSH
10233: LD_VAR 0 4
10237: PUSH
10238: LD_VAR 0 2
10242: ARRAY
10243: PUSH
10244: LD_INT 3
10246: ARRAY
10247: PUSH
10248: LD_INT 2
10250: EQUAL
10251: AND
10252: IFFALSE 10326
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) ;
10254: LD_ADDR_VAR 0 4
10258: PUSH
10259: LD_VAR 0 4
10263: PPUSH
10264: LD_VAR 0 2
10268: PUSH
10269: LD_VAR 0 4
10273: PUSH
10274: LD_VAR 0 2
10278: ARRAY
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PPUSH
10284: LD_INT 1
10286: PPUSH
10287: CALL 50080 0 3
10291: ST_TO_ADDR
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
10292: LD_VAR 0 4
10296: PUSH
10297: LD_VAR 0 2
10301: ARRAY
10302: PUSH
10303: LD_INT 2
10305: ARRAY
10306: PPUSH
10307: LD_VAR 0 4
10311: PUSH
10312: LD_VAR 0 2
10316: ARRAY
10317: PUSH
10318: LD_INT 1
10320: ARRAY
10321: PPUSH
10322: CALL_OW 120
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
10326: LD_VAR 0 4
10330: PUSH
10331: LD_VAR 0 2
10335: ARRAY
10336: PUSH
10337: LD_INT 1
10339: ARRAY
10340: PPUSH
10341: CALL_OW 256
10345: PUSH
10346: LD_INT 250
10348: LESS
10349: IFFALSE 10376
// vehicles = vehicles diff [ vehicles [ i ] ] ;
10351: LD_ADDR_VAR 0 4
10355: PUSH
10356: LD_VAR 0 4
10360: PUSH
10361: LD_VAR 0 4
10365: PUSH
10366: LD_VAR 0 2
10370: ARRAY
10371: PUSH
10372: EMPTY
10373: LIST
10374: DIFF
10375: ST_TO_ADDR
// end ;
10376: GO 10065
10378: POP
10379: POP
// wait ( 0 0$1 ) ;
10380: LD_INT 35
10382: PPUSH
10383: CALL_OW 67
// until omicronSurrender ;
10387: LD_EXP 23
10391: IFFALSE 9927
// end ; end_of_file
10393: LD_VAR 0 1
10397: RET
// export function Lose_Burlak ; begin
10398: LD_INT 0
10400: PPUSH
// YouLost ( Burlak ) ;
10401: LD_STRING Burlak
10403: PPUSH
10404: CALL_OW 104
// end ;
10408: LD_VAR 0 1
10412: RET
// export function Lose_Omicron ; begin
10413: LD_INT 0
10415: PPUSH
// YouLost ( Omicron ) ;
10416: LD_STRING Omicron
10418: PPUSH
10419: CALL_OW 104
// end ;
10423: LD_VAR 0 1
10427: RET
// export function Lose_Vehicles ; begin
10428: LD_INT 0
10430: PPUSH
// YouLost ( Vehicles ) ;
10431: LD_STRING Vehicles
10433: PPUSH
10434: CALL_OW 104
// end ;
10438: LD_VAR 0 1
10442: RET
// export function Lose_SelfAttack ; begin
10443: LD_INT 0
10445: PPUSH
// YouLost ( SelfAttack ) ;
10446: LD_STRING SelfAttack
10448: PPUSH
10449: CALL_OW 104
// end ;
10453: LD_VAR 0 1
10457: RET
// export function Lose_Delay ; begin
10458: LD_INT 0
10460: PPUSH
// YouLost ( Delay ) ;
10461: LD_STRING Delay
10463: PPUSH
10464: CALL_OW 104
// end ; end_of_file
10468: LD_VAR 0 1
10472: RET
// export function FinishMission ; begin
10473: LD_INT 0
10475: PPUSH
// SetRewards ;
10476: CALL 10497 0 0
// SavePlayerCharacters ;
10480: CALL 10711 0 0
// SaveGlobalVariables ;
10484: CALL 10984 0 0
// YouWin ;
10488: CALL_OW 103
// end ;
10492: LD_VAR 0 1
10496: RET
// function SetRewards ; var unitsToReward ; begin
10497: LD_INT 0
10499: PPUSH
10500: PPUSH
// if produceMoreVehicles then
10501: LD_EXP 16
10505: IFFALSE 10519
// AddMedal ( Surplus , 1 ) else
10507: LD_STRING Surplus
10509: PPUSH
10510: LD_INT 1
10512: PPUSH
10513: CALL_OW 101
10517: GO 10549
// if produceOnlyForYou then
10519: LD_EXP 17
10523: IFFALSE 10538
// AddMedal ( Surplus , - 1 ) else
10525: LD_STRING Surplus
10527: PPUSH
10528: LD_INT 1
10530: NEG
10531: PPUSH
10532: CALL_OW 101
10536: GO 10549
// AddMedal ( Surplus , - 2 ) ;
10538: LD_STRING Surplus
10540: PPUSH
10541: LD_INT 2
10543: NEG
10544: PPUSH
10545: CALL_OW 101
// if americanTroopsArriveOmicronCounter < maxAmericanTroopsIgnore then
10549: LD_EXP 12
10553: PUSH
10554: LD_EXP 43
10558: LESS
10559: IFFALSE 10573
// AddMedal ( PreventReinforcements , 1 ) else
10561: LD_STRING PreventReinforcements
10563: PPUSH
10564: LD_INT 1
10566: PPUSH
10567: CALL_OW 101
10571: GO 10584
// AddMedal ( PreventReinforcements , - 1 ) ;
10573: LD_STRING PreventReinforcements
10575: PPUSH
10576: LD_INT 1
10578: NEG
10579: PPUSH
10580: CALL_OW 101
// if scholtzeSaved and IsOK ( Scholtze ) then
10584: LD_EXP 7
10588: PUSH
10589: LD_EXP 50
10593: PPUSH
10594: CALL_OW 302
10598: AND
10599: IFFALSE 10613
// AddMedal ( Scholtze , 1 ) else
10601: LD_STRING Scholtze
10603: PPUSH
10604: LD_INT 1
10606: PPUSH
10607: CALL_OW 101
10611: GO 10624
// AddMedal ( Scholtze , - 1 ) ;
10613: LD_STRING Scholtze
10615: PPUSH
10616: LD_INT 1
10618: NEG
10619: PPUSH
10620: CALL_OW 101
// GiveMedals ( Main ) ;
10624: LD_STRING Main
10626: PPUSH
10627: CALL_OW 102
// unitsToReward = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
10631: LD_ADDR_VAR 0 2
10635: PUSH
10636: LD_INT 22
10638: PUSH
10639: LD_INT 3
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 21
10648: PUSH
10649: LD_INT 1
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PPUSH
10660: CALL_OW 69
10664: ST_TO_ADDR
// unitsToReward = unitsToReward ^ survivorsArabianAttack ;
10665: LD_ADDR_VAR 0 2
10669: PUSH
10670: LD_VAR 0 2
10674: PUSH
10675: LD_EXP 73
10679: ADD
10680: ST_TO_ADDR
// unitsToReward = unitsToReward diff Popov ;
10681: LD_ADDR_VAR 0 2
10685: PUSH
10686: LD_VAR 0 2
10690: PUSH
10691: LD_EXP 57
10695: DIFF
10696: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
10697: LD_VAR 0 2
10701: PPUSH
10702: CALL_OW 43
// end ;
10706: LD_VAR 0 1
10710: RET
// function SavePlayerCharacters ; var othersYour , othersKirov ; begin
10711: LD_INT 0
10713: PPUSH
10714: PPUSH
10715: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
10716: LD_EXP 44
10720: PPUSH
10721: LD_STRING Burlak
10723: PPUSH
10724: LD_INT 3
10726: PPUSH
10727: CALL 7289 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
10731: LD_EXP 45
10735: PPUSH
10736: LD_STRING Gnyevko
10738: PPUSH
10739: LD_INT 3
10741: PPUSH
10742: CALL 7289 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
10746: LD_EXP 47
10750: PPUSH
10751: LD_STRING Kovalyuk
10753: PPUSH
10754: LD_INT 3
10756: PPUSH
10757: CALL 7289 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
10761: LD_EXP 46
10765: PPUSH
10766: LD_STRING Kirilenkova
10768: PPUSH
10769: LD_INT 3
10771: PPUSH
10772: CALL 7289 0 3
// ExtSaveCharacter ( Scholtze , Scholtze , 3 ) ;
10776: LD_EXP 50
10780: PPUSH
10781: LD_STRING Scholtze
10783: PPUSH
10784: LD_INT 3
10786: PPUSH
10787: CALL 7289 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
10791: LD_EXP 48
10795: PPUSH
10796: LD_STRING Belkov
10798: PPUSH
10799: LD_INT 3
10801: PPUSH
10802: CALL 7289 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
10806: LD_EXP 49
10810: PPUSH
10811: LD_STRING Belkov2
10813: PPUSH
10814: LD_INT 3
10816: PPUSH
10817: CALL 7289 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova , Scholtze ] ;
10821: LD_ADDR_VAR 0 2
10825: PUSH
10826: LD_INT 22
10828: PUSH
10829: LD_INT 3
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: LD_INT 21
10838: PUSH
10839: LD_INT 1
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PPUSH
10850: CALL_OW 69
10854: PUSH
10855: LD_EXP 44
10859: PUSH
10860: LD_EXP 45
10864: PUSH
10865: LD_EXP 48
10869: PUSH
10870: LD_EXP 49
10874: PUSH
10875: LD_EXP 47
10879: PUSH
10880: LD_EXP 46
10884: PUSH
10885: LD_EXP 50
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: DIFF
10899: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
10900: LD_VAR 0 2
10904: PPUSH
10905: LD_STRING other_survivors
10907: PPUSH
10908: LD_INT 3
10910: PPUSH
10911: CALL 7345 0 3
// othersKirov = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff [ Kurin , Popov ] ;
10915: LD_ADDR_VAR 0 3
10919: PUSH
10920: LD_INT 22
10922: PUSH
10923: LD_INT 6
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: PUSH
10930: LD_INT 21
10932: PUSH
10933: LD_INT 1
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: PPUSH
10944: CALL_OW 69
10948: PUSH
10949: LD_EXP 56
10953: PUSH
10954: LD_EXP 57
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: DIFF
10963: ST_TO_ADDR
// ExtSaveCharacters ( othersKirov , other_kirov , 6 ) ;
10964: LD_VAR 0 3
10968: PPUSH
10969: LD_STRING other_kirov
10971: PPUSH
10972: LD_INT 6
10974: PPUSH
10975: CALL 7345 0 3
// end ;
10979: LD_VAR 0 1
10983: RET
// function SaveGlobalVariables ; begin
10984: LD_INT 0
10986: PPUSH
// SaveVariable ( kurinOpinion , 03_KurinOpinion_1 ) ;
10987: LD_EXP 26
10991: PPUSH
10992: LD_STRING 03_KurinOpinion_1
10994: PPUSH
10995: CALL_OW 39
// end ; end_of_file
10999: LD_VAR 0 1
11003: RET
// export function CustomEvent ( event ) ; begin
11004: LD_INT 0
11006: PPUSH
// end ;
11007: LD_VAR 0 2
11011: RET
// on Command ( com ) do var i , j , temp , order , x , y , building ;
11012: LD_INT 0
11014: PPUSH
11015: PPUSH
11016: PPUSH
11017: PPUSH
11018: PPUSH
11019: PPUSH
11020: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
11021: LD_ADDR_VAR 0 2
11025: PUSH
11026: LD_INT 22
11028: PUSH
11029: LD_INT 3
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: PUSH
11036: LD_INT 21
11038: PUSH
11039: LD_INT 1
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PPUSH
11050: CALL_OW 69
11054: PUSH
11055: FOR_IN
11056: IFFALSE 11283
// if GetTaskList ( i ) > 0 then
11058: LD_VAR 0 2
11062: PPUSH
11063: CALL_OW 437
11067: PUSH
11068: LD_INT 0
11070: GREATER
11071: IFFALSE 11281
// for j = 1 to GetTaskList ( i ) do
11073: LD_ADDR_VAR 0 3
11077: PUSH
11078: DOUBLE
11079: LD_INT 1
11081: DEC
11082: ST_TO_ADDR
11083: LD_VAR 0 2
11087: PPUSH
11088: CALL_OW 437
11092: PUSH
11093: FOR_TO
11094: IFFALSE 11279
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
11096: LD_ADDR_VAR 0 4
11100: PUSH
11101: LD_VAR 0 2
11105: PPUSH
11106: CALL_OW 437
11110: PUSH
11111: LD_VAR 0 3
11115: ARRAY
11116: PUSH
11117: LD_INT 4
11119: ARRAY
11120: ST_TO_ADDR
// building = GetTaskList ( i ) [ j ] [ 5 ] ;
11121: LD_ADDR_VAR 0 8
11125: PUSH
11126: LD_VAR 0 2
11130: PPUSH
11131: CALL_OW 437
11135: PUSH
11136: LD_VAR 0 3
11140: ARRAY
11141: PUSH
11142: LD_INT 5
11144: ARRAY
11145: ST_TO_ADDR
// x = GetTaskList ( i ) [ j ] [ 2 ] ;
11146: LD_ADDR_VAR 0 6
11150: PUSH
11151: LD_VAR 0 2
11155: PPUSH
11156: CALL_OW 437
11160: PUSH
11161: LD_VAR 0 3
11165: ARRAY
11166: PUSH
11167: LD_INT 2
11169: ARRAY
11170: ST_TO_ADDR
// y = GetTaskList ( i ) [ j ] [ 3 ] ;
11171: LD_ADDR_VAR 0 7
11175: PUSH
11176: LD_VAR 0 2
11180: PPUSH
11181: CALL_OW 437
11185: PUSH
11186: LD_VAR 0 3
11190: ARRAY
11191: PUSH
11192: LD_INT 3
11194: ARRAY
11195: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
11196: LD_VAR 0 4
11200: PPUSH
11201: CALL_OW 255
11205: PUSH
11206: LD_INT 6
11208: EQUAL
11209: PUSH
11210: LD_VAR 0 2
11214: PPUSH
11215: CALL_OW 437
11219: PUSH
11220: LD_VAR 0 3
11224: ARRAY
11225: PUSH
11226: LD_INT 1
11228: ARRAY
11229: PUSH
11230: LD_STRING <
11232: EQUAL
11233: AND
11234: IFFALSE 11247
// SetTaskList ( i , [ ] ) ;
11236: LD_VAR 0 2
11240: PPUSH
11241: EMPTY
11242: PPUSH
11243: CALL_OW 446
// if InArea ( x , y , HideMapPartArea ) then
11247: LD_VAR 0 6
11251: PPUSH
11252: LD_VAR 0 7
11256: PPUSH
11257: LD_INT 25
11259: PPUSH
11260: CALL_OW 309
11264: IFFALSE 11277
// SetTaskList ( i , [ ] ) ;
11266: LD_VAR 0 2
11270: PPUSH
11271: EMPTY
11272: PPUSH
11273: CALL_OW 446
// end ;
11277: GO 11093
11279: POP
11280: POP
11281: GO 11055
11283: POP
11284: POP
// end ;
11285: PPOPN 8
11287: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
11288: LD_VAR 0 2
11292: PUSH
11293: LD_INT 6
11295: EQUAL
11296: IFFALSE 11310
// SetSide ( building , 6 ) ;
11298: LD_VAR 0 1
11302: PPUSH
11303: LD_INT 6
11305: PPUSH
11306: CALL_OW 235
// end ;
11310: PPOPN 3
11312: END
// on BuildingComplete ( building ) do var diffUnits , canTakeUnits ;
11313: LD_INT 0
11315: PPUSH
11316: PPUSH
// begin diffUnits = [ ] ;
11317: LD_ADDR_VAR 0 2
11321: PUSH
11322: EMPTY
11323: ST_TO_ADDR
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , SecondBurlakBase ) then
11324: LD_VAR 0 1
11328: PPUSH
11329: CALL_OW 255
11333: PUSH
11334: LD_INT 3
11336: EQUAL
11337: PUSH
11338: LD_VAR 0 1
11342: PPUSH
11343: CALL_OW 266
11347: PUSH
11348: LD_INT 0
11350: EQUAL
11351: AND
11352: PUSH
11353: LD_VAR 0 1
11357: PPUSH
11358: LD_INT 22
11360: PPUSH
11361: CALL_OW 308
11365: AND
11366: IFFALSE 11380
// SetBName ( building , kagan ) ;
11368: LD_VAR 0 1
11372: PPUSH
11373: LD_STRING kagan
11375: PPUSH
11376: CALL_OW 500
// if GetSide ( building ) = 6 then
11380: LD_VAR 0 1
11384: PPUSH
11385: CALL_OW 255
11389: PUSH
11390: LD_INT 6
11392: EQUAL
11393: IFFALSE 11901
// begin diffUnits = diffUnits ^ Kurin ;
11395: LD_ADDR_VAR 0 2
11399: PUSH
11400: LD_VAR 0 2
11404: PUSH
11405: LD_EXP 56
11409: ADD
11410: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
11411: LD_ADDR_VAR 0 2
11415: PUSH
11416: LD_VAR 0 2
11420: PUSH
11421: LD_EXP 73
11425: ADD
11426: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
11427: LD_ADDR_VAR 0 2
11431: PUSH
11432: LD_VAR 0 2
11436: PUSH
11437: LD_EXP 66
11441: ADD
11442: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
11443: LD_VAR 0 1
11447: PPUSH
11448: CALL_OW 266
11452: PUSH
11453: LD_INT 32
11455: EQUAL
11456: IFFALSE 11716
// begin kirovBunkersToMountWeapon = kirovBunkersToMountWeapon ^ building ;
11458: LD_ADDR_EXP 67
11462: PUSH
11463: LD_EXP 67
11467: PUSH
11468: LD_VAR 0 1
11472: ADD
11473: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
11474: LD_ADDR_VAR 0 3
11478: PUSH
11479: LD_INT 19
11481: PPUSH
11482: LD_INT 22
11484: PUSH
11485: LD_INT 6
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: LD_INT 21
11494: PUSH
11495: LD_INT 1
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PUSH
11502: LD_INT 3
11504: PUSH
11505: LD_INT 60
11507: PUSH
11508: EMPTY
11509: LIST
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: LIST
11519: PPUSH
11520: CALL_OW 70
11524: PUSH
11525: LD_VAR 0 2
11529: DIFF
11530: ST_TO_ADDR
// if canTakeUnits then
11531: LD_VAR 0 3
11535: IFFALSE 11669
// begin if GetClass ( canTakeUnits [ 1 ] ) <> 1 then
11537: LD_VAR 0 3
11541: PUSH
11542: LD_INT 1
11544: ARRAY
11545: PPUSH
11546: CALL_OW 257
11550: PUSH
11551: LD_INT 1
11553: NONEQUAL
11554: IFFALSE 11649
// begin ComEnterUnit ( canTakeUnits [ 1 ] , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
11556: LD_VAR 0 3
11560: PUSH
11561: LD_INT 1
11563: ARRAY
11564: PPUSH
11565: LD_INT 22
11567: PUSH
11568: LD_INT 6
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: LD_INT 21
11577: PUSH
11578: LD_INT 3
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 30
11587: PUSH
11588: LD_INT 5
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: LIST
11599: PPUSH
11600: CALL_OW 69
11604: PUSH
11605: LD_INT 1
11607: ARRAY
11608: PPUSH
11609: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ 1 ] , 1 ) ;
11613: LD_VAR 0 3
11617: PUSH
11618: LD_INT 1
11620: ARRAY
11621: PPUSH
11622: LD_INT 1
11624: PPUSH
11625: CALL_OW 183
// AddComExitBuilding ( canTakeUnits [ 1 ] ) ;
11629: LD_VAR 0 3
11633: PUSH
11634: LD_INT 1
11636: ARRAY
11637: PPUSH
11638: CALL_OW 182
// wait ( 0 0$1 ) ;
11642: LD_INT 35
11644: PPUSH
11645: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ 1 ] , building ) ;
11649: LD_VAR 0 3
11653: PUSH
11654: LD_INT 1
11656: ARRAY
11657: PPUSH
11658: LD_VAR 0 1
11662: PPUSH
11663: CALL_OW 120
// end else
11667: GO 11716
// begin kirovBunkersToOccupy = kirovBunkersToOccupy ^ building ;
11669: LD_ADDR_EXP 68
11673: PUSH
11674: LD_EXP 68
11678: PUSH
11679: LD_VAR 0 1
11683: ADD
11684: ST_TO_ADDR
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 1 , neededUnitsSpawn [ 1 ] + 1 ) ;
11685: LD_ADDR_EXP 75
11689: PUSH
11690: LD_EXP 75
11694: PPUSH
11695: LD_INT 1
11697: PPUSH
11698: LD_EXP 75
11702: PUSH
11703: LD_INT 1
11705: ARRAY
11706: PUSH
11707: LD_INT 1
11709: PLUS
11710: PPUSH
11711: CALL_OW 1
11715: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_ext_noncombat then
11716: LD_VAR 0 1
11720: PPUSH
11721: CALL_OW 266
11725: PUSH
11726: LD_INT 19
11728: EQUAL
11729: IFFALSE 11755
// begin SpawnKirovSupport ;
11731: CALL 4343 0 0
// MountWeaponTurrent ;
11735: CALL 9478 0 0
// wait ( 3 3$30 ) ;
11739: LD_INT 7350
11741: PPUSH
11742: CALL_OW 67
// KirovProduceVehicles ( kirovFactory ) ;
11746: LD_EXP 21
11750: PPUSH
11751: CALL 9552 0 1
// end ; if GetBType ( building ) = b_depot then
11755: LD_VAR 0 1
11759: PPUSH
11760: CALL_OW 266
11764: PUSH
11765: LD_INT 0
11767: EQUAL
11768: IFFALSE 11800
// begin kirovOilDepot = building ;
11770: LD_ADDR_EXP 63
11774: PUSH
11775: LD_VAR 0 1
11779: ST_TO_ADDR
// SetResourceType ( GetBase ( kirovOilDepot ) , mat_oil , 3000 ) ;
11780: LD_EXP 63
11784: PPUSH
11785: CALL_OW 274
11789: PPUSH
11790: LD_INT 2
11792: PPUSH
11793: LD_INT 3000
11795: PPUSH
11796: CALL_OW 277
// end ; if ( GetBType ( building ) = b_breastwork or GetBType ( building ) = b_armoury ) and IsInArea ( building , SecondKurinBase ) then
11800: LD_VAR 0 1
11804: PPUSH
11805: CALL_OW 266
11809: PUSH
11810: LD_INT 31
11812: EQUAL
11813: PUSH
11814: LD_VAR 0 1
11818: PPUSH
11819: CALL_OW 266
11823: PUSH
11824: LD_INT 4
11826: EQUAL
11827: OR
11828: PUSH
11829: LD_VAR 0 1
11833: PPUSH
11834: LD_INT 21
11836: PPUSH
11837: CALL_OW 308
11841: AND
11842: IFFALSE 11901
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) [ 1 ] , building ) ;
11844: LD_EXP 72
11848: PPUSH
11849: LD_INT 25
11851: PUSH
11852: LD_INT 1
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: PUSH
11859: LD_INT 56
11861: PUSH
11862: EMPTY
11863: LIST
11864: PUSH
11865: LD_INT 3
11867: PUSH
11868: LD_INT 60
11870: PUSH
11871: EMPTY
11872: LIST
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: LIST
11882: PPUSH
11883: CALL_OW 72
11887: PUSH
11888: LD_INT 1
11890: ARRAY
11891: PPUSH
11892: LD_VAR 0 1
11896: PPUSH
11897: CALL_OW 120
// end ; end ;
11901: PPOPN 3
11903: END
// on UpgradeComplete ( building ) do var i , tmp ;
11904: LD_INT 0
11906: PPUSH
11907: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_factory and not dialog_workshop then
11908: LD_VAR 0 1
11912: PPUSH
11913: CALL_OW 255
11917: PUSH
11918: LD_INT 3
11920: EQUAL
11921: PUSH
11922: LD_VAR 0 1
11926: PPUSH
11927: CALL_OW 266
11931: PUSH
11932: LD_INT 3
11934: EQUAL
11935: AND
11936: PUSH
11937: LD_EXP 8
11941: NOT
11942: AND
11943: IFFALSE 11954
// Dial_UpgradeWorkshop ( building ) ;
11945: LD_VAR 0 1
11949: PPUSH
11950: CALL 14907 0 1
// if Getside ( building ) = 6 then
11954: LD_VAR 0 1
11958: PPUSH
11959: CALL_OW 255
11963: PUSH
11964: LD_INT 6
11966: EQUAL
11967: IFFALSE 12333
// begin if GetBType ( building ) = b_lab_half then
11969: LD_VAR 0 1
11973: PPUSH
11974: CALL_OW 266
11978: PUSH
11979: LD_INT 7
11981: EQUAL
11982: IFFALSE 12300
// begin if FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] ] ) then
11984: LD_INT 19
11986: PPUSH
11987: LD_INT 22
11989: PUSH
11990: LD_INT 6
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: PUSH
11997: LD_INT 21
11999: PUSH
12000: LD_INT 1
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PUSH
12007: LD_INT 25
12009: PUSH
12010: LD_INT 4
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: LIST
12021: PPUSH
12022: CALL_OW 70
12026: IFFALSE 12082
// ComEnterUnit ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] ] ) , building ) else
12028: LD_INT 19
12030: PPUSH
12031: LD_INT 22
12033: PUSH
12034: LD_INT 6
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: LD_INT 21
12043: PUSH
12044: LD_INT 1
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: PUSH
12051: LD_INT 25
12053: PUSH
12054: LD_INT 4
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: LIST
12065: PPUSH
12066: CALL_OW 70
12070: PPUSH
12071: LD_VAR 0 1
12075: PPUSH
12076: CALL_OW 120
12080: GO 12285
// begin tmp = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff Kurin ;
12082: LD_ADDR_VAR 0 3
12086: PUSH
12087: LD_INT 19
12089: PPUSH
12090: LD_INT 22
12092: PUSH
12093: LD_INT 6
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 21
12102: PUSH
12103: LD_INT 1
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 3
12112: PUSH
12113: LD_INT 60
12115: PUSH
12116: EMPTY
12117: LIST
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: LIST
12127: PPUSH
12128: CALL_OW 70
12132: PUSH
12133: LD_EXP 56
12137: DIFF
12138: ST_TO_ADDR
// if tmp > 2 then
12139: LD_VAR 0 3
12143: PUSH
12144: LD_INT 2
12146: GREATER
12147: IFFALSE 12217
// begin for i := 1 to rand ( 1 , 2 ) do
12149: LD_ADDR_VAR 0 2
12153: PUSH
12154: DOUBLE
12155: LD_INT 1
12157: DEC
12158: ST_TO_ADDR
12159: LD_INT 1
12161: PPUSH
12162: LD_INT 2
12164: PPUSH
12165: CALL_OW 12
12169: PUSH
12170: FOR_TO
12171: IFFALSE 12213
// begin ComEnterUnit ( tmp [ i ] , building ) ;
12173: LD_VAR 0 3
12177: PUSH
12178: LD_VAR 0 2
12182: ARRAY
12183: PPUSH
12184: LD_VAR 0 1
12188: PPUSH
12189: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_scientistic ) ;
12193: LD_VAR 0 3
12197: PUSH
12198: LD_VAR 0 2
12202: ARRAY
12203: PPUSH
12204: LD_INT 4
12206: PPUSH
12207: CALL_OW 183
// end ;
12211: GO 12170
12213: POP
12214: POP
// end else
12215: GO 12285
// begin for i := 1 to rand ( 1 , tmp ) do
12217: LD_ADDR_VAR 0 2
12221: PUSH
12222: DOUBLE
12223: LD_INT 1
12225: DEC
12226: ST_TO_ADDR
12227: LD_INT 1
12229: PPUSH
12230: LD_VAR 0 3
12234: PPUSH
12235: CALL_OW 12
12239: PUSH
12240: FOR_TO
12241: IFFALSE 12283
// begin ComEnterUnit ( tmp [ i ] , building ) ;
12243: LD_VAR 0 3
12247: PUSH
12248: LD_VAR 0 2
12252: ARRAY
12253: PPUSH
12254: LD_VAR 0 1
12258: PPUSH
12259: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_scientistic ) ;
12263: LD_VAR 0 3
12267: PUSH
12268: LD_VAR 0 2
12272: ARRAY
12273: PPUSH
12274: LD_INT 4
12276: PPUSH
12277: CALL_OW 183
// end ;
12281: GO 12240
12283: POP
12284: POP
// end ; end ; ResAllTechs ( 6 , building , 3 ) ;
12285: LD_INT 6
12287: PPUSH
12288: LD_VAR 0 1
12292: PPUSH
12293: LD_INT 3
12295: PPUSH
12296: CALL 8140 0 3
// end ; if GetBType ( building ) = b_factory then
12300: LD_VAR 0 1
12304: PPUSH
12305: CALL_OW 266
12309: PUSH
12310: LD_INT 3
12312: EQUAL
12313: IFFALSE 12333
// begin kirovFactory = building ;
12315: LD_ADDR_EXP 21
12319: PUSH
12320: LD_VAR 0 1
12324: ST_TO_ADDR
// kirovCompleteFactory = true ;
12325: LD_ADDR_EXP 22
12329: PUSH
12330: LD_INT 1
12332: ST_TO_ADDR
// end ; end ; end ;
12333: PPOPN 3
12335: END
// on UnitDestroyed ( un ) do begin MCE_UnitDestroyed ( un ) ;
12336: LD_VAR 0 1
12340: PPUSH
12341: CALL 83263 0 1
// if un = Burlak then
12345: LD_VAR 0 1
12349: PUSH
12350: LD_EXP 44
12354: EQUAL
12355: IFFALSE 12361
// Lose_Burlak ;
12357: CALL 10398 0 0
// if un = beriaDepot and not canDestroyBeriaBase then
12361: LD_VAR 0 1
12365: PUSH
12366: LD_EXP 55
12370: EQUAL
12371: PUSH
12372: LD_EXP 28
12376: NOT
12377: AND
12378: IFFALSE 12384
// Lose_Omicron ;
12380: CALL 10413 0 0
// end ;
12384: PPOPN 1
12386: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
12387: LD_VAR 0 1
12391: PUSH
12392: LD_INT 3
12394: EQUAL
12395: PUSH
12396: LD_VAR 0 2
12400: PUSH
12401: LD_INT 6
12403: EQUAL
12404: AND
12405: IFFALSE 12411
// Lose_SelfAttack ;
12407: CALL 10443 0 0
// end ;
12411: PPOPN 2
12413: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
12414: LD_VAR 0 1
12418: PPUSH
12419: LD_VAR 0 2
12423: PPUSH
12424: CALL 82175 0 2
// if GetSide ( vehicle ) = 6 then
12428: LD_VAR 0 1
12432: PPUSH
12433: CALL_OW 255
12437: PUSH
12438: LD_INT 6
12440: EQUAL
12441: IFFALSE 12606
// begin if GetWeapon ( vehicle ) = ru_cargo_bay and not kirovTransportCargo then
12443: LD_VAR 0 1
12447: PPUSH
12448: CALL_OW 264
12452: PUSH
12453: LD_INT 51
12455: EQUAL
12456: PUSH
12457: LD_EXP 69
12461: NOT
12462: AND
12463: IFFALSE 12477
// kirovTransportCargo = vehicle else
12465: LD_ADDR_EXP 69
12469: PUSH
12470: LD_VAR 0 1
12474: ST_TO_ADDR
12475: GO 12549
// begin if GetWeapon ( vehicle ) = ru_cargo_bay then
12477: LD_VAR 0 1
12481: PPUSH
12482: CALL_OW 264
12486: PUSH
12487: LD_INT 51
12489: EQUAL
12490: IFFALSE 12549
// begin ComTransport ( vehicle , kirovOilDepot , mat_oil ) ;
12492: LD_VAR 0 1
12496: PPUSH
12497: LD_EXP 63
12501: PPUSH
12502: LD_INT 2
12504: PPUSH
12505: CALL_OW 151
// AddComMoveXY ( vehicle , 137 , 99 ) ;
12509: LD_VAR 0 1
12513: PPUSH
12514: LD_INT 137
12516: PPUSH
12517: LD_INT 99
12519: PPUSH
12520: CALL_OW 171
// AddComHold ( vehicle ) ;
12524: LD_VAR 0 1
12528: PPUSH
12529: CALL_OW 200
// kirovAttackCargo = kirovAttackCargo ^ vehicle ;
12533: LD_ADDR_EXP 70
12537: PUSH
12538: LD_EXP 70
12542: PUSH
12543: LD_VAR 0 1
12547: ADD
12548: ST_TO_ADDR
// end ; end ; if GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
12549: LD_VAR 0 1
12553: PPUSH
12554: CALL_OW 264
12558: PUSH
12559: LD_INT 42
12561: PUSH
12562: LD_INT 43
12564: PUSH
12565: LD_INT 44
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: LIST
12572: IN
12573: IFFALSE 12606
// begin kirovAttackVehicles = kirovAttackVehicles ^ vehicle ;
12575: LD_ADDR_EXP 71
12579: PUSH
12580: LD_EXP 71
12584: PUSH
12585: LD_VAR 0 1
12589: ADD
12590: ST_TO_ADDR
// ComMoveXY ( vehicle , 137 , 99 ) ;
12591: LD_VAR 0 1
12595: PPUSH
12596: LD_INT 137
12598: PPUSH
12599: LD_INT 99
12601: PPUSH
12602: CALL_OW 111
// end ; end ; end ;
12606: PPOPN 2
12608: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
12609: LD_VAR 0 1
12613: PPUSH
12614: LD_VAR 0 2
12618: PPUSH
12619: LD_VAR 0 3
12623: PPUSH
12624: LD_VAR 0 4
12628: PPUSH
12629: CALL 82013 0 4
// if side = 6 then
12633: LD_VAR 0 3
12637: PUSH
12638: LD_INT 6
12640: EQUAL
12641: IFFALSE 12664
// begin ComExitVehicle ( capturing_unit ) ;
12643: LD_VAR 0 4
12647: PPUSH
12648: CALL_OW 121
// SetSide ( new , 6 ) ;
12652: LD_VAR 0 1
12656: PPUSH
12657: LD_INT 6
12659: PPUSH
12660: CALL_OW 235
// end ; end ;
12664: PPOPN 4
12666: END
// on EnterVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 then
12667: LD_VAR 0 1
12671: PPUSH
12672: CALL_OW 255
12676: PUSH
12677: LD_INT 6
12679: EQUAL
12680: IFFALSE 12697
// AddComAgressiveMove ( vehicle , 28 , 35 ) ;
12682: LD_VAR 0 1
12686: PPUSH
12687: LD_INT 28
12689: PPUSH
12690: LD_INT 35
12692: PPUSH
12693: CALL_OW 174
// end ; end_of_file
12697: PPOPN 2
12699: END
// export function MissionIntro ; var unit ; begin
12700: LD_INT 0
12702: PPUSH
12703: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
12704: LD_EXP 44
12708: PUSH
12709: LD_EXP 56
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PPUSH
12718: CALL_OW 87
// ComTurnUnit ( [ Burlak , BelkovDialog ] , Kurin ) ;
12722: LD_EXP 44
12726: PUSH
12727: LD_EXP 58
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PPUSH
12736: LD_EXP 56
12740: PPUSH
12741: CALL_OW 119
// ComTurnUnit ( Kurin , Burlak ) ;
12745: LD_EXP 56
12749: PPUSH
12750: LD_EXP 44
12754: PPUSH
12755: CALL_OW 119
// RevealFogArea ( 3 , RevealMapPartArea ) ;
12759: LD_INT 3
12761: PPUSH
12762: LD_INT 26
12764: PPUSH
12765: CALL_OW 332
// if not IsPlaced ( Belkov ) and not IsPlaced ( Belkov2 ) then
12769: LD_EXP 48
12773: PPUSH
12774: CALL_OW 305
12778: NOT
12779: PUSH
12780: LD_EXP 49
12784: PPUSH
12785: CALL_OW 305
12789: NOT
12790: AND
12791: IFFALSE 12879
// begin Say ( Kurin , D1a-Kur-1 ) ;
12793: LD_EXP 56
12797: PPUSH
12798: LD_STRING D1a-Kur-1
12800: PPUSH
12801: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
12805: LD_EXP 44
12809: PPUSH
12810: LD_STRING D1a-Bur-1
12812: PPUSH
12813: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
12817: LD_EXP 56
12821: PPUSH
12822: LD_STRING D1a-Kur-2
12824: PPUSH
12825: CALL_OW 88
// if platonovOpinion <= 1 then
12829: LD_EXP 27
12833: PUSH
12834: LD_INT 1
12836: LESSEQUAL
12837: IFFALSE 12853
// Say ( Kurin , D1a-Kur-2a ) else
12839: LD_EXP 56
12843: PPUSH
12844: LD_STRING D1a-Kur-2a
12846: PPUSH
12847: CALL_OW 88
12851: GO 12865
// Say ( Kurin , D1a-Kur-2b ) ;
12853: LD_EXP 56
12857: PPUSH
12858: LD_STRING D1a-Kur-2b
12860: PPUSH
12861: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
12865: LD_EXP 44
12869: PPUSH
12870: LD_STRING D1a-Bur-2
12872: PPUSH
12873: CALL_OW 88
// end else
12877: GO 12915
// begin Say ( Kurin , D1b-Kur-1 ) ;
12879: LD_EXP 56
12883: PPUSH
12884: LD_STRING D1b-Kur-1
12886: PPUSH
12887: CALL_OW 88
// Say ( BelkovDialog , D1b-Bel-1 ) ;
12891: LD_EXP 58
12895: PPUSH
12896: LD_STRING D1b-Bel-1
12898: PPUSH
12899: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
12903: LD_EXP 56
12907: PPUSH
12908: LD_STRING D1b-Kur-2
12910: PPUSH
12911: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
12915: LD_EXP 56
12919: PPUSH
12920: LD_STRING D2-Kur-1
12922: PPUSH
12923: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
12927: LD_EXP 44
12931: PPUSH
12932: LD_STRING D2-Bur-1
12934: PPUSH
12935: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
12939: LD_EXP 56
12943: PPUSH
12944: LD_STRING D2-Kur-2
12946: PPUSH
12947: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
12951: LD_EXP 44
12955: PPUSH
12956: LD_STRING D2-Bur-2
12958: PPUSH
12959: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
12963: LD_EXP 56
12967: PPUSH
12968: LD_STRING D2-Kur-3
12970: PPUSH
12971: CALL_OW 88
// SetAttitude ( 1 , 6 , att_friend , true ) ;
12975: LD_INT 1
12977: PPUSH
12978: LD_INT 6
12980: PPUSH
12981: LD_INT 1
12983: PPUSH
12984: LD_INT 1
12986: PPUSH
12987: CALL_OW 80
// PrepareAmericansMissionIntro ;
12991: CALL 5730 0 0
// ComMoveXY ( amIntroUnits , 28 , 35 ) ;
12995: LD_EXP 77
12999: PPUSH
13000: LD_INT 28
13002: PPUSH
13003: LD_INT 35
13005: PPUSH
13006: CALL_OW 111
// CenterOnXY ( 93 , 36 ) ;
13010: LD_INT 93
13012: PPUSH
13013: LD_INT 36
13015: PPUSH
13016: CALL_OW 84
// PlaceSeeing ( 93 , 36 , 3 , - 9 ) ;
13020: LD_INT 93
13022: PPUSH
13023: LD_INT 36
13025: PPUSH
13026: LD_INT 3
13028: PPUSH
13029: LD_INT 9
13031: NEG
13032: PPUSH
13033: CALL_OW 330
// wait ( 0 0$6 ) ;
13037: LD_INT 210
13039: PPUSH
13040: CALL_OW 67
// CenterOnUnits ( Popov ) ;
13044: LD_EXP 57
13048: PPUSH
13049: CALL_OW 85
// wait ( 0 0$1 ) ;
13053: LD_INT 35
13055: PPUSH
13056: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
13060: LD_EXP 57
13064: PPUSH
13065: LD_STRING D2-Pop-3
13067: PPUSH
13068: CALL_OW 94
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
13072: LD_EXP 44
13076: PUSH
13077: LD_EXP 56
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: PPUSH
13086: CALL_OW 87
// wait ( 0 0$1 ) ;
13090: LD_INT 35
13092: PPUSH
13093: CALL_OW 67
// for unit in amIntroUnits do
13097: LD_ADDR_VAR 0 2
13101: PUSH
13102: LD_EXP 77
13106: PUSH
13107: FOR_IN
13108: IFFALSE 13121
// RemoveUnit ( unit ) ;
13110: LD_VAR 0 2
13114: PPUSH
13115: CALL_OW 64
13119: GO 13107
13121: POP
13122: POP
// Say ( Kurin , D2-Kur-4 ) ;
13123: LD_EXP 56
13127: PPUSH
13128: LD_STRING D2-Kur-4
13130: PPUSH
13131: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
13135: LD_EXP 44
13139: PPUSH
13140: LD_STRING D2-Bur-4
13142: PPUSH
13143: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
13147: LD_EXP 56
13151: PPUSH
13152: LD_STRING D2-Kur-5
13154: PPUSH
13155: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
13159: LD_EXP 44
13163: PPUSH
13164: LD_STRING D2-Bur-5
13166: PPUSH
13167: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
13171: LD_EXP 56
13175: PPUSH
13176: LD_STRING D2-Kur-6
13178: PPUSH
13179: CALL_OW 88
// if IsPlaced ( Gnyevko ) then
13183: LD_EXP 45
13187: PPUSH
13188: CALL_OW 305
13192: IFFALSE 13208
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
13194: LD_ADDR_EXP 35
13198: PUSH
13199: LD_EXP 35
13203: PUSH
13204: LD_INT 1
13206: MINUS
13207: ST_TO_ADDR
// if IsPlaced ( Kovalyuk ) then
13208: LD_EXP 47
13212: PPUSH
13213: CALL_OW 305
13217: IFFALSE 13233
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
13219: LD_ADDR_EXP 35
13223: PUSH
13224: LD_EXP 35
13228: PUSH
13229: LD_INT 1
13231: MINUS
13232: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) then
13233: LD_EXP 46
13237: PPUSH
13238: CALL_OW 305
13242: IFFALSE 13258
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
13244: LD_ADDR_EXP 35
13248: PUSH
13249: LD_EXP 35
13253: PUSH
13254: LD_INT 1
13256: MINUS
13257: ST_TO_ADDR
// SelectCharacters ( baseUnitsToChoose ) ;
13258: LD_EXP 35
13262: PPUSH
13263: CALL 7443 0 1
// RemoveSeeing ( 93 , 36 , 3 ) ;
13267: LD_INT 93
13269: PPUSH
13270: LD_INT 36
13272: PPUSH
13273: LD_INT 3
13275: PPUSH
13276: CALL_OW 331
// Resetfog ;
13280: CALL_OW 335
// RevealFogArea ( 3 , RevealMapPartArea ) ;
13284: LD_INT 3
13286: PPUSH
13287: LD_INT 26
13289: PPUSH
13290: CALL_OW 332
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
13294: LD_INT 22
13296: PUSH
13297: LD_INT 3
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PUSH
13304: LD_INT 21
13306: PUSH
13307: LD_INT 1
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PPUSH
13318: CALL_OW 69
13322: PPUSH
13323: CALL_OW 122
// wait ( 0 0$1 ) ;
13327: LD_INT 35
13329: PPUSH
13330: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
13334: LD_INT 22
13336: PUSH
13337: LD_INT 3
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: PUSH
13344: LD_INT 21
13346: PUSH
13347: LD_INT 1
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PPUSH
13358: CALL_OW 69
13362: PPUSH
13363: LD_EXP 55
13367: PPUSH
13368: CALL_OW 250
13372: PPUSH
13373: LD_EXP 55
13377: PPUSH
13378: CALL_OW 251
13382: PPUSH
13383: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
13387: LD_INT 35
13389: PPUSH
13390: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
13394: LD_EXP 44
13398: PPUSH
13399: CALL_OW 87
// until GetDistUnits ( Burlak , beriaDepot ) < 6 ;
13403: LD_EXP 44
13407: PPUSH
13408: LD_EXP 55
13412: PPUSH
13413: CALL_OW 296
13417: PUSH
13418: LD_INT 6
13420: LESS
13421: IFFALSE 13387
// InGameOff ;
13423: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
13427: LD_STRING M1
13429: PPUSH
13430: CALL_OW 337
// SaveForQuickRestart ;
13434: CALL_OW 22
// counterEnable = true ;
13438: LD_ADDR_EXP 83
13442: PUSH
13443: LD_INT 1
13445: ST_TO_ADDR
// counterIndex = 1 ;
13446: LD_ADDR_EXP 84
13450: PUSH
13451: LD_INT 1
13453: ST_TO_ADDR
// HideArea ( 3 , HideMapPartArea ) ;
13454: LD_INT 3
13456: PPUSH
13457: LD_INT 25
13459: PPUSH
13460: CALL_OW 333
// RevealFogArea ( 3 , RevealMapPartArea ) ;
13464: LD_INT 3
13466: PPUSH
13467: LD_INT 26
13469: PPUSH
13470: CALL_OW 332
// ComEnterUnit ( survivorsArabianAttack diff Popov , ru2_bar1 ) ;
13474: LD_EXP 73
13478: PUSH
13479: LD_EXP 57
13483: DIFF
13484: PPUSH
13485: LD_EXP 64
13489: PPUSH
13490: CALL_OW 120
// AddComUpgradeBreastwork ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) , b_bunker ) ;
13494: LD_INT 19
13496: PPUSH
13497: LD_INT 22
13499: PUSH
13500: LD_INT 6
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: LD_INT 21
13509: PUSH
13510: LD_INT 1
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PUSH
13517: LD_INT 25
13519: PUSH
13520: LD_INT 2
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: LIST
13531: PPUSH
13532: CALL_OW 70
13536: PPUSH
13537: LD_INT 19
13539: PPUSH
13540: LD_INT 22
13542: PUSH
13543: LD_INT 6
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 21
13552: PUSH
13553: LD_INT 3
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 30
13562: PUSH
13563: LD_INT 31
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: LIST
13574: PPUSH
13575: CALL_OW 70
13579: PPUSH
13580: LD_INT 32
13582: PPUSH
13583: CALL 8023 0 3
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_oil_power , 158 , 98 , 2 ) ;
13587: LD_INT 19
13589: PPUSH
13590: LD_INT 22
13592: PUSH
13593: LD_INT 6
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: LD_INT 21
13602: PUSH
13603: LD_INT 1
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: LD_INT 25
13612: PUSH
13613: LD_INT 2
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: LIST
13624: PPUSH
13625: CALL_OW 70
13629: PPUSH
13630: LD_INT 26
13632: PPUSH
13633: LD_INT 158
13635: PPUSH
13636: LD_INT 98
13638: PPUSH
13639: LD_INT 2
13641: PPUSH
13642: CALL_OW 205
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_oil_power , 163 , 98 , 2 ) ;
13646: LD_INT 19
13648: PPUSH
13649: LD_INT 22
13651: PUSH
13652: LD_INT 6
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: PUSH
13659: LD_INT 21
13661: PUSH
13662: LD_INT 1
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PUSH
13669: LD_INT 25
13671: PUSH
13672: LD_INT 2
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: LIST
13683: PPUSH
13684: CALL_OW 70
13688: PPUSH
13689: LD_INT 26
13691: PPUSH
13692: LD_INT 163
13694: PPUSH
13695: LD_INT 98
13697: PPUSH
13698: LD_INT 2
13700: PPUSH
13701: CALL_OW 205
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_gun , 159 , 116 , 0 ) ;
13705: LD_INT 19
13707: PPUSH
13708: LD_INT 22
13710: PUSH
13711: LD_INT 6
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: PUSH
13718: LD_INT 21
13720: PUSH
13721: LD_INT 1
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: PUSH
13728: LD_INT 25
13730: PUSH
13731: LD_INT 2
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: LIST
13742: PPUSH
13743: CALL_OW 70
13747: PPUSH
13748: LD_INT 17
13750: PPUSH
13751: LD_INT 159
13753: PPUSH
13754: LD_INT 116
13756: PPUSH
13757: LD_INT 0
13759: PPUSH
13760: CALL_OW 205
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_noncombat , 161 , 115 , 5 ) ;
13764: LD_INT 19
13766: PPUSH
13767: LD_INT 22
13769: PUSH
13770: LD_INT 6
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: LD_INT 21
13779: PUSH
13780: LD_INT 1
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 25
13789: PUSH
13790: LD_INT 2
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: LIST
13801: PPUSH
13802: CALL_OW 70
13806: PPUSH
13807: LD_INT 19
13809: PPUSH
13810: LD_INT 161
13812: PPUSH
13813: LD_INT 115
13815: PPUSH
13816: LD_INT 5
13818: PPUSH
13819: CALL_OW 205
// ComFree ( [ Belkov , Belkov2 ] ) ;
13823: LD_EXP 48
13827: PUSH
13828: LD_EXP 49
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: PPUSH
13837: CALL_OW 139
// ComWalk ( ruScout ) ;
13841: LD_EXP 59
13845: PPUSH
13846: CALL_OW 138
// wait ( 0 0$1 ) ;
13850: LD_INT 35
13852: PPUSH
13853: CALL_OW 67
// AddComMoveXY ( [ ruScout , Popov ] , 99 , 37 ) ;
13857: LD_EXP 59
13861: PUSH
13862: LD_EXP 57
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: PPUSH
13871: LD_INT 99
13873: PPUSH
13874: LD_INT 37
13876: PPUSH
13877: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 88 , 60 ) ;
13881: LD_EXP 59
13885: PUSH
13886: LD_EXP 57
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PPUSH
13895: LD_INT 88
13897: PPUSH
13898: LD_INT 60
13900: PPUSH
13901: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 129 , 99 ) ;
13905: LD_EXP 59
13909: PUSH
13910: LD_EXP 57
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: PPUSH
13919: LD_INT 129
13921: PPUSH
13922: LD_INT 99
13924: PPUSH
13925: CALL_OW 171
// AddComEnterUnit ( [ Popov , ruScout ] , kirovDepot ) ;
13929: LD_EXP 57
13933: PUSH
13934: LD_EXP 59
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PPUSH
13943: LD_EXP 62
13947: PPUSH
13948: CALL_OW 180
// end ;
13952: LD_VAR 0 1
13956: RET
// every 0 0$1 trigger kirovCompleteFactory do var i , tmp , pom , diffUnits , canTakeUnits ;
13957: LD_EXP 22
13961: IFFALSE 14233
13963: GO 13965
13965: DISABLE
13966: LD_INT 0
13968: PPUSH
13969: PPUSH
13970: PPUSH
13971: PPUSH
13972: PPUSH
// begin diffUnits = diffUnits ^ Kurin ;
13973: LD_ADDR_VAR 0 4
13977: PUSH
13978: LD_VAR 0 4
13982: PUSH
13983: LD_EXP 56
13987: ADD
13988: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
13989: LD_ADDR_VAR 0 4
13993: PUSH
13994: LD_VAR 0 4
13998: PUSH
13999: LD_EXP 73
14003: ADD
14004: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
14005: LD_ADDR_VAR 0 4
14009: PUSH
14010: LD_VAR 0 4
14014: PUSH
14015: LD_EXP 66
14019: ADD
14020: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff diffUnits ;
14021: LD_ADDR_VAR 0 5
14025: PUSH
14026: LD_INT 19
14028: PPUSH
14029: LD_INT 22
14031: PUSH
14032: LD_INT 6
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 21
14041: PUSH
14042: LD_INT 1
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: PPUSH
14053: CALL_OW 70
14057: PUSH
14058: LD_VAR 0 4
14062: DIFF
14063: ST_TO_ADDR
// pom = 6 ;
14064: LD_ADDR_VAR 0 3
14068: PUSH
14069: LD_INT 6
14071: ST_TO_ADDR
// if canTakeUnits then
14072: LD_VAR 0 5
14076: IFFALSE 14200
// for i = 1 to canTakeUnits do
14078: LD_ADDR_VAR 0 1
14082: PUSH
14083: DOUBLE
14084: LD_INT 1
14086: DEC
14087: ST_TO_ADDR
14088: LD_VAR 0 5
14092: PUSH
14093: FOR_TO
14094: IFFALSE 14198
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
14096: LD_VAR 0 5
14100: PUSH
14101: LD_VAR 0 1
14105: ARRAY
14106: PPUSH
14107: CALL_OW 257
14111: PUSH
14112: LD_INT 3
14114: NONEQUAL
14115: IFFALSE 14162
// begin ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
14117: LD_VAR 0 5
14121: PUSH
14122: LD_VAR 0 1
14126: ARRAY
14127: PPUSH
14128: LD_EXP 21
14132: PPUSH
14133: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , 1 ) ;
14137: LD_VAR 0 5
14141: PUSH
14142: LD_VAR 0 1
14146: ARRAY
14147: PPUSH
14148: LD_INT 1
14150: PPUSH
14151: CALL_OW 183
// wait ( 0 0$1 ) ;
14155: LD_INT 35
14157: PPUSH
14158: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
14162: LD_VAR 0 5
14166: PUSH
14167: LD_VAR 0 1
14171: ARRAY
14172: PPUSH
14173: LD_EXP 21
14177: PPUSH
14178: CALL_OW 120
// pom = pom - 1 ;
14182: LD_ADDR_VAR 0 3
14186: PUSH
14187: LD_VAR 0 3
14191: PUSH
14192: LD_INT 1
14194: MINUS
14195: ST_TO_ADDR
// end ;
14196: GO 14093
14198: POP
14199: POP
// if pom > 0 then
14200: LD_VAR 0 3
14204: PUSH
14205: LD_INT 0
14207: GREATER
14208: IFFALSE 14233
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
14210: LD_ADDR_EXP 75
14214: PUSH
14215: LD_EXP 75
14219: PPUSH
14220: LD_INT 3
14222: PPUSH
14223: LD_VAR 0 3
14227: PPUSH
14228: CALL_OW 1
14232: ST_TO_ADDR
// end ;
14233: PPOPN 5
14235: END
// every 0 0$1 trigger kirovTransportCargo do
14236: LD_EXP 69
14240: IFFALSE 14289
14242: GO 14244
14244: DISABLE
// begin enable ;
14245: ENABLE
// AddComTransport ( kirovTransportCargo , kirovOilDepot , mat_oil ) ;
14246: LD_EXP 69
14250: PPUSH
14251: LD_EXP 63
14255: PPUSH
14256: LD_INT 2
14258: PPUSH
14259: CALL_OW 211
// AddComGive ( kirovTransportCargo , kirovDepot ) ;
14263: LD_EXP 69
14267: PPUSH
14268: LD_EXP 62
14272: PPUSH
14273: CALL_OW 221
// SetFuel ( kirovTransportCargo , 100 ) ;
14277: LD_EXP 69
14281: PPUSH
14282: LD_INT 100
14284: PPUSH
14285: CALL_OW 240
// end ;
14289: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
14290: LD_INT 78
14292: PPUSH
14293: LD_INT 112
14295: PPUSH
14296: LD_INT 3
14298: PPUSH
14299: CALL_OW 440
14303: IFFALSE 14357
14305: GO 14307
14307: DISABLE
// begin CenterOnXY ( 78 , 112 ) ;
14308: LD_INT 78
14310: PPUSH
14311: LD_INT 112
14313: PPUSH
14314: CALL_OW 84
// DialogueOn ;
14318: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
14322: LD_EXP 44
14326: PPUSH
14327: LD_STRING D2a-Bur-1
14329: PPUSH
14330: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
14334: LD_EXP 56
14338: PPUSH
14339: LD_STRING D2a-Kur-1
14341: PPUSH
14342: CALL_OW 94
// DialogueOff ;
14346: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
14350: LD_STRING M2
14352: PPUSH
14353: CALL_OW 337
// end ;
14357: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
14358: LD_EXP 10
14362: NOT
14363: IFFALSE 14516
14365: GO 14367
14367: DISABLE
14368: LD_INT 0
14370: PPUSH
// begin enable ;
14371: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
14372: LD_ADDR_VAR 0 1
14376: PUSH
14377: LD_INT 22
14379: PUSH
14380: LD_INT 3
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PUSH
14387: LD_INT 21
14389: PUSH
14390: LD_INT 2
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: PUSH
14397: LD_INT 23
14399: PUSH
14400: LD_INT 3
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: LD_INT 2
14409: PUSH
14410: LD_INT 31
14412: PUSH
14413: LD_INT 21
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: PUSH
14420: LD_INT 31
14422: PUSH
14423: LD_INT 23
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: LIST
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: PPUSH
14441: CALL_OW 69
14445: PUSH
14446: FOR_IN
14447: IFFALSE 14514
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
14449: LD_VAR 0 1
14453: PPUSH
14454: LD_INT 48
14456: PPUSH
14457: LD_INT 81
14459: PPUSH
14460: CALL_OW 297
14464: PUSH
14465: LD_INT 7
14467: LESS
14468: IFFALSE 14512
// begin dialog_track = true ;
14470: LD_ADDR_EXP 10
14474: PUSH
14475: LD_INT 1
14477: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
14478: LD_INT 48
14480: PPUSH
14481: LD_INT 81
14483: PPUSH
14484: CALL_OW 86
// DialogueOn ;
14488: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
14492: LD_EXP 44
14496: PPUSH
14497: LD_STRING D5a-Bur-1
14499: PPUSH
14500: CALL_OW 88
// DialogueOff ;
14504: CALL_OW 7
// exit ;
14508: POP
14509: POP
14510: GO 14516
// end ;
14512: GO 14446
14514: POP
14515: POP
// end ;
14516: PPOPN 1
14518: END
// every 5 5$30 do
14519: GO 14521
14521: DISABLE
// begin PrepareScholtze ;
14522: CALL 5148 0 0
// DialogueOn ;
14526: CALL_OW 6
// SayRadio ( Scholtze , D4-Sch-1 ) ;
14530: LD_EXP 50
14534: PPUSH
14535: LD_STRING D4-Sch-1
14537: PPUSH
14538: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
14542: LD_EXP 44
14546: PPUSH
14547: LD_STRING D4-Bur-1
14549: PPUSH
14550: CALL_OW 88
// DialogueOff ;
14554: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
14558: LD_STRING M4
14560: PPUSH
14561: CALL_OW 337
// ComHold ( Scholtze ) ;
14565: LD_EXP 50
14569: PPUSH
14570: CALL_OW 140
// end ;
14574: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and not scholtzeSaved do
14575: LD_INT 3
14577: PPUSH
14578: LD_EXP 50
14582: PPUSH
14583: CALL_OW 292
14587: PUSH
14588: LD_EXP 7
14592: NOT
14593: AND
14594: IFFALSE 14694
14596: GO 14598
14598: DISABLE
// begin scholtzeSaved = true ;
14599: LD_ADDR_EXP 7
14603: PUSH
14604: LD_INT 1
14606: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
14607: LD_EXP 50
14611: PPUSH
14612: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
14616: LD_EXP 50
14620: PPUSH
14621: LD_INT 3
14623: PPUSH
14624: CALL_OW 235
// DialogueOn ;
14628: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
14632: LD_EXP 50
14636: PPUSH
14637: LD_STRING D4a-Sch-1
14639: PPUSH
14640: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
14644: LD_EXP 44
14648: PPUSH
14649: LD_STRING D4a-Bur-1
14651: PPUSH
14652: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
14656: LD_EXP 50
14660: PPUSH
14661: LD_STRING D4a-Sch-2
14663: PPUSH
14664: CALL_OW 88
// DialogueOff ;
14668: CALL_OW 7
// ComMoveXY ( amPatrol , 28 , 36 ) ;
14672: LD_EXP 79
14676: PPUSH
14677: LD_INT 28
14679: PPUSH
14680: LD_INT 36
14682: PPUSH
14683: CALL_OW 111
// ChangeMissionObjectives ( MScholtzeOut ) ;
14687: LD_STRING MScholtzeOut
14689: PPUSH
14690: CALL_OW 337
// end ;
14694: END
// every 8 8$30 trigger IsPlaced ( Scholtze ) and scholtzeSpawnNearAmericans and not scholtzeSaved do
14695: LD_EXP 50
14699: PPUSH
14700: CALL_OW 305
14704: PUSH
14705: LD_EXP 6
14709: AND
14710: PUSH
14711: LD_EXP 7
14715: NOT
14716: AND
14717: IFFALSE 14726
14719: GO 14721
14721: DISABLE
// PrepareAmericanPatrol ;
14722: CALL 6409 0 0
14726: END
// every 0 0$1 trigger See ( 1 , Scholtze ) and amPatrol and not scholtzeSaved do
14727: LD_INT 1
14729: PPUSH
14730: LD_EXP 50
14734: PPUSH
14735: CALL_OW 292
14739: PUSH
14740: LD_EXP 79
14744: AND
14745: PUSH
14746: LD_EXP 7
14750: NOT
14751: AND
14752: IFFALSE 14906
14754: GO 14756
14756: DISABLE
// begin enable ;
14757: ENABLE
// if not IsPlaced ( Scholtze ) then
14758: LD_EXP 50
14762: PPUSH
14763: CALL_OW 305
14767: NOT
14768: IFFALSE 14772
// exit ;
14770: GO 14906
// if Attack ( amPatrol [ 1 ] ) = Scholtze or Attack ( amPatrol [ 2 ] ) = Scholtze then
14772: LD_EXP 79
14776: PUSH
14777: LD_INT 1
14779: ARRAY
14780: PPUSH
14781: CALL 86215 0 1
14785: PUSH
14786: LD_EXP 50
14790: EQUAL
14791: PUSH
14792: LD_EXP 79
14796: PUSH
14797: LD_INT 2
14799: ARRAY
14800: PPUSH
14801: CALL 86215 0 1
14805: PUSH
14806: LD_EXP 50
14810: EQUAL
14811: OR
14812: IFFALSE 14906
// begin DialogueOn ;
14814: CALL_OW 6
// Say ( Scholtze , D4b-Sch-1 ) ;
14818: LD_EXP 50
14822: PPUSH
14823: LD_STRING D4b-Sch-1
14825: PPUSH
14826: CALL_OW 88
// Say ( amPatrol [ 2 ] , D4b-Sol1-1 ) ;
14830: LD_EXP 79
14834: PUSH
14835: LD_INT 2
14837: ARRAY
14838: PPUSH
14839: LD_STRING D4b-Sol1-1
14841: PPUSH
14842: CALL_OW 88
// Say ( amPatrol [ 1 ] , D4b-Sol2-1 ) ;
14846: LD_EXP 79
14850: PUSH
14851: LD_INT 1
14853: ARRAY
14854: PPUSH
14855: LD_STRING D4b-Sol2-1
14857: PPUSH
14858: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
14862: LD_EXP 50
14866: PPUSH
14867: LD_STRING D4b-Sch-2
14869: PPUSH
14870: CALL_OW 88
// Say ( Burlak , D4b-Bur-2 ) ;
14874: LD_EXP 44
14878: PPUSH
14879: LD_STRING D4b-Bur-2
14881: PPUSH
14882: CALL_OW 88
// DialogueOff ;
14886: CALL_OW 7
// Killunit ( Scholtze ) ;
14890: LD_EXP 50
14894: PPUSH
14895: CALL_OW 66
// ChangeMissionObjectives ( MScholtzeDel ) ;
14899: LD_STRING MScholtzeDel
14901: PPUSH
14902: CALL_OW 337
// end ; end ;
14906: END
// export function Dial_UpgradeWorkshop ( building ) ; var maleSci , maleOthers ; begin
14907: LD_INT 0
14909: PPUSH
14910: PPUSH
14911: PPUSH
// dialog_workshop = true ;
14912: LD_ADDR_EXP 8
14916: PUSH
14917: LD_INT 1
14919: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
14920: LD_INT 22
14922: PUSH
14923: LD_INT 3
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PUSH
14930: LD_INT 30
14932: PUSH
14933: LD_INT 26
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: PPUSH
14944: CALL_OW 69
14948: NOT
14949: IFFALSE 15259
// begin CenterNowOnUnits ( building ) ;
14951: LD_VAR 0 1
14955: PPUSH
14956: CALL_OW 87
// DialogueOn ;
14960: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
14964: LD_EXP 44
14968: PPUSH
14969: LD_STRING D3aa-Bur-1
14971: PPUSH
14972: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
14976: LD_EXP 50
14980: PPUSH
14981: CALL_OW 302
14985: PUSH
14986: LD_EXP 50
14990: PPUSH
14991: CALL_OW 255
14995: PUSH
14996: LD_INT 3
14998: EQUAL
14999: AND
15000: IFFALSE 15016
// Say ( Scholtze , D3aa-Sch-1 ) else
15002: LD_EXP 50
15006: PPUSH
15007: LD_STRING D3aa-Sch-1
15009: PPUSH
15010: CALL_OW 88
15014: GO 15243
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
15016: LD_ADDR_VAR 0 3
15020: PUSH
15021: LD_INT 22
15023: PUSH
15024: LD_INT 3
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PUSH
15031: LD_INT 21
15033: PUSH
15034: LD_INT 1
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: LD_INT 25
15043: PUSH
15044: LD_INT 4
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: LD_INT 26
15053: PUSH
15054: LD_INT 1
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PUSH
15061: LD_INT 50
15063: PUSH
15064: EMPTY
15065: LIST
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: PPUSH
15074: CALL_OW 69
15078: PUSH
15079: LD_EXP 44
15083: PUSH
15084: LD_EXP 45
15088: PUSH
15089: LD_EXP 47
15093: PUSH
15094: LD_EXP 48
15098: PUSH
15099: LD_EXP 49
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: DIFF
15111: ST_TO_ADDR
// if maleSci then
15112: LD_VAR 0 3
15116: IFFALSE 15136
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
15118: LD_VAR 0 3
15122: PUSH
15123: LD_INT 1
15125: ARRAY
15126: PPUSH
15127: LD_STRING D3aa-Sci1-1
15129: PPUSH
15130: CALL_OW 88
15134: GO 15243
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
15136: LD_ADDR_VAR 0 4
15140: PUSH
15141: LD_INT 22
15143: PUSH
15144: LD_INT 3
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: PUSH
15151: LD_INT 21
15153: PUSH
15154: LD_INT 1
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: PUSH
15161: LD_INT 26
15163: PUSH
15164: LD_INT 1
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PUSH
15171: LD_INT 50
15173: PUSH
15174: EMPTY
15175: LIST
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: PPUSH
15183: CALL_OW 69
15187: PUSH
15188: LD_EXP 44
15192: PUSH
15193: LD_EXP 45
15197: PUSH
15198: LD_EXP 47
15202: PUSH
15203: LD_EXP 48
15207: PUSH
15208: LD_EXP 49
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: DIFF
15220: ST_TO_ADDR
// if maleOthers then
15221: LD_VAR 0 4
15225: IFFALSE 15243
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) end ;
15227: LD_VAR 0 4
15231: PUSH
15232: LD_INT 1
15234: ARRAY
15235: PPUSH
15236: LD_STRING D3aa-Sci1-1
15238: PPUSH
15239: CALL_OW 88
// end ; Say ( Burlak , D3aa-Bur-2 ) ;
15243: LD_EXP 44
15247: PPUSH
15248: LD_STRING D3aa-Bur-2
15250: PPUSH
15251: CALL_OW 88
// DialogueOff ;
15255: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
15259: LD_STRING M3
15261: PPUSH
15262: CALL_OW 337
// end ;
15266: LD_VAR 0 2
15270: RET
// every 0 0$1 trigger not dialog_amSupportTroops do var amUnit ;
15271: LD_EXP 9
15275: NOT
15276: IFFALSE 15433
15278: GO 15280
15280: DISABLE
15281: LD_INT 0
15283: PPUSH
// begin enable ;
15284: ENABLE
// for amUnit in amSupportTroops do
15285: LD_ADDR_VAR 0 1
15289: PUSH
15290: LD_EXP 78
15294: PUSH
15295: FOR_IN
15296: IFFALSE 15431
// begin if See ( 3 , amUnit ) then
15298: LD_INT 3
15300: PPUSH
15301: LD_VAR 0 1
15305: PPUSH
15306: CALL_OW 292
15310: IFFALSE 15429
// begin dialog_amSupportTroops = true ;
15312: LD_ADDR_EXP 9
15316: PUSH
15317: LD_INT 1
15319: ST_TO_ADDR
// CenterNowOnUnits ( amUnit ) ;
15320: LD_VAR 0 1
15324: PPUSH
15325: CALL_OW 87
// DialogueOn ;
15329: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D3b-RSol1-1 ,  , false ) ;
15333: LD_INT 22
15335: PUSH
15336: LD_INT 3
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: PUSH
15343: LD_INT 21
15345: PUSH
15346: LD_INT 1
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PUSH
15353: LD_INT 26
15355: PUSH
15356: LD_INT 1
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: LIST
15367: PPUSH
15368: CALL_OW 69
15372: PPUSH
15373: LD_STRING D3b-RSol1-1
15375: PPUSH
15376: LD_STRING 
15378: PPUSH
15379: LD_INT 0
15381: PPUSH
15382: CALL 7092 0 4
// if IsOK ( Gnyevko ) then
15386: LD_EXP 45
15390: PPUSH
15391: CALL_OW 302
15395: IFFALSE 15409
// Say ( Gnyevko , D3b-Gny-1 ) ;
15397: LD_EXP 45
15401: PPUSH
15402: LD_STRING D3b-Gny-1
15404: PPUSH
15405: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
15409: LD_EXP 44
15413: PPUSH
15414: LD_STRING D3b-Bur-1
15416: PPUSH
15417: CALL_OW 88
// DialogueOff ;
15421: CALL_OW 7
// exit ;
15425: POP
15426: POP
15427: GO 15433
// end ; end ;
15429: GO 15295
15431: POP
15432: POP
// end ;
15433: PPOPN 1
15435: END
// every 2 2$0 trigger dialog_amSupportTroops do
15436: LD_EXP 9
15440: IFFALSE 15521
15442: GO 15444
15444: DISABLE
// begin if IsOK ( Kovalyuk ) then
15445: LD_EXP 47
15449: PPUSH
15450: CALL_OW 302
15454: IFFALSE 15468
// Say ( Kovalyuk , D3b-Kov-1 ) ;
15456: LD_EXP 47
15460: PPUSH
15461: LD_STRING D3b-Kov-1
15463: PPUSH
15464: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D3b-RSol1-2 ,  , false ) ;
15468: LD_INT 22
15470: PUSH
15471: LD_INT 3
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: LD_INT 21
15480: PUSH
15481: LD_INT 1
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PUSH
15488: LD_INT 26
15490: PUSH
15491: LD_INT 1
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: LIST
15502: PPUSH
15503: CALL_OW 69
15507: PPUSH
15508: LD_STRING D3b-RSol1-2
15510: PPUSH
15511: LD_STRING 
15513: PPUSH
15514: LD_INT 0
15516: PPUSH
15517: CALL 7092 0 4
// end ;
15521: END
// every 0 0$1 trigger timeToPrepareAttack < 0 0$01 do
15522: LD_EXP 37
15526: PUSH
15527: LD_INT 35
15529: LESS
15530: IFFALSE 15758
15532: GO 15534
15534: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
15535: LD_EXP 56
15539: PPUSH
15540: CALL_OW 87
// InGameOn ;
15544: CALL_OW 8
// DialogueOn ;
15548: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
15552: LD_EXP 56
15556: PPUSH
15557: LD_STRING D5-Kur-1
15559: PPUSH
15560: CALL_OW 94
// case Query ( QVehicles ) of 1 :
15564: LD_STRING QVehicles
15566: PPUSH
15567: CALL_OW 97
15571: PUSH
15572: LD_INT 1
15574: DOUBLE
15575: EQUAL
15576: IFTRUE 15580
15578: GO 15623
15580: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
15581: LD_EXP 44
15585: PPUSH
15586: LD_STRING D6a-Bur-1
15588: PPUSH
15589: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
15593: LD_EXP 56
15597: PPUSH
15598: LD_STRING D6a-Kur-1
15600: PPUSH
15601: CALL_OW 94
// meetNearOmicronBase = true ;
15605: LD_ADDR_EXP 19
15609: PUSH
15610: LD_INT 1
15612: ST_TO_ADDR
// kurinCheckVehicles = true ;
15613: LD_ADDR_EXP 18
15617: PUSH
15618: LD_INT 1
15620: ST_TO_ADDR
// end ; 2 :
15621: GO 15750
15623: LD_INT 2
15625: DOUBLE
15626: EQUAL
15627: IFTRUE 15631
15629: GO 15678
15631: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
15632: LD_EXP 44
15636: PPUSH
15637: LD_STRING D6b-Bur-1
15639: PPUSH
15640: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
15644: LD_EXP 56
15648: PPUSH
15649: LD_STRING D6b-Kur-1
15651: PPUSH
15652: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
15656: LD_EXP 44
15660: PPUSH
15661: LD_STRING D6b-Bur-2
15663: PPUSH
15664: CALL_OW 88
// meetNearOmicronBase = true ;
15668: LD_ADDR_EXP 19
15672: PUSH
15673: LD_INT 1
15675: ST_TO_ADDR
// end ; 3 :
15676: GO 15750
15678: LD_INT 3
15680: DOUBLE
15681: EQUAL
15682: IFTRUE 15686
15684: GO 15749
15686: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
15687: LD_EXP 44
15691: PPUSH
15692: LD_STRING D6c-Bur-1
15694: PPUSH
15695: CALL_OW 88
// Say ( Kurin , D6c-Kur-1 ) ;
15699: LD_EXP 56
15703: PPUSH
15704: LD_STRING D6c-Kur-1
15706: PPUSH
15707: CALL_OW 88
// Say ( Burlak , D6c-Bur-2 ) ;
15711: LD_EXP 44
15715: PPUSH
15716: LD_STRING D6c-Bur-2
15718: PPUSH
15719: CALL_OW 88
// kurinGiveMoreTime = true ;
15723: LD_ADDR_EXP 13
15727: PUSH
15728: LD_INT 1
15730: ST_TO_ADDR
// kurinOpinion = 0 ;
15731: LD_ADDR_EXP 26
15735: PUSH
15736: LD_INT 0
15738: ST_TO_ADDR
// counterIndex = 4 ;
15739: LD_ADDR_EXP 84
15743: PUSH
15744: LD_INT 4
15746: ST_TO_ADDR
// end ; end ;
15747: GO 15750
15749: POP
// InGameOff ;
15750: CALL_OW 9
// DialogueOff ;
15754: CALL_OW 7
// end ;
15758: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
15759: LD_EXP 14
15763: PUSH
15764: LD_INT 35
15766: LESS
15767: PUSH
15768: LD_EXP 13
15772: AND
15773: IFFALSE 15806
15775: GO 15777
15777: DISABLE
// begin DialogueOn ;
15778: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
15782: LD_EXP 56
15786: PPUSH
15787: LD_STRING D6c-Kur-2
15789: PPUSH
15790: CALL_OW 94
// DialogueOff ;
15794: CALL_OW 7
// meetNearOmicronBase = true ;
15798: LD_ADDR_EXP 19
15802: PUSH
15803: LD_INT 1
15805: ST_TO_ADDR
// end ;
15806: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs ;
15807: LD_EXP 19
15811: IFFALSE 16396
15813: GO 15815
15815: DISABLE
15816: LD_INT 0
15818: PPUSH
15819: PPUSH
15820: PPUSH
15821: PPUSH
15822: PPUSH
// begin mechs = [ ] ;
15823: LD_ADDR_VAR 0 3
15827: PUSH
15828: EMPTY
15829: ST_TO_ADDR
// vehs = [ ] ;
15830: LD_ADDR_VAR 0 4
15834: PUSH
15835: EMPTY
15836: ST_TO_ADDR
// haveVehs = 0 ;
15837: LD_ADDR_VAR 0 5
15841: PUSH
15842: LD_INT 0
15844: ST_TO_ADDR
// uc_side = 6 ;
15845: LD_ADDR_OWVAR 20
15849: PUSH
15850: LD_INT 6
15852: ST_TO_ADDR
// uc_nation = 3 ;
15853: LD_ADDR_OWVAR 21
15857: PUSH
15858: LD_INT 3
15860: ST_TO_ADDR
// for i := 1 to 2 do
15861: LD_ADDR_VAR 0 1
15865: PUSH
15866: DOUBLE
15867: LD_INT 1
15869: DEC
15870: ST_TO_ADDR
15871: LD_INT 2
15873: PUSH
15874: FOR_TO
15875: IFFALSE 15974
// begin PrepareMechanic ( false , 2 ) ;
15877: LD_INT 0
15879: PPUSH
15880: LD_INT 2
15882: PPUSH
15883: CALL_OW 383
// mech = CreateHuman ;
15887: LD_ADDR_VAR 0 2
15891: PUSH
15892: CALL_OW 44
15896: ST_TO_ADDR
// mechs = mechs ^ mech ;
15897: LD_ADDR_VAR 0 3
15901: PUSH
15902: LD_VAR 0 3
15906: PUSH
15907: LD_VAR 0 2
15911: ADD
15912: ST_TO_ADDR
// PlaceHumanInUnit ( mech , kirovDepot ) ;
15913: LD_VAR 0 2
15917: PPUSH
15918: LD_EXP 62
15922: PPUSH
15923: CALL_OW 52
// ComExitBuilding ( mech ) ;
15927: LD_VAR 0 2
15931: PPUSH
15932: CALL_OW 122
// wait ( 0 0$1 ) ;
15936: LD_INT 35
15938: PPUSH
15939: CALL_OW 67
// AddComMoveXY ( mech , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
15943: LD_VAR 0 2
15947: PPUSH
15948: LD_EXP 55
15952: PPUSH
15953: CALL_OW 250
15957: PPUSH
15958: LD_EXP 55
15962: PPUSH
15963: CALL_OW 251
15967: PPUSH
15968: CALL_OW 171
// end ;
15972: GO 15874
15974: POP
15975: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] ] ) = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) then
15976: LD_INT 22
15978: PUSH
15979: LD_INT 3
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PUSH
15986: LD_INT 21
15988: PUSH
15989: LD_INT 2
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PUSH
15996: LD_INT 23
15998: PUSH
15999: LD_INT 3
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: LIST
16010: PPUSH
16011: CALL_OW 69
16015: PUSH
16016: LD_INT 22
16018: PUSH
16019: LD_INT 3
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: PUSH
16026: LD_INT 21
16028: PUSH
16029: LD_INT 1
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: PPUSH
16040: CALL_OW 69
16044: EQUAL
16045: IFFALSE 16055
// produceOnlyForYou = true ;
16047: LD_ADDR_EXP 17
16051: PUSH
16052: LD_INT 1
16054: ST_TO_ADDR
// wait ( 0 0$20 ) ;
16055: LD_INT 700
16057: PPUSH
16058: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + 2 then
16062: LD_INT 22
16064: PUSH
16065: LD_INT 3
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PUSH
16072: LD_INT 21
16074: PUSH
16075: LD_INT 2
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PUSH
16082: LD_INT 23
16084: PUSH
16085: LD_INT 3
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: LIST
16096: PPUSH
16097: CALL_OW 69
16101: PUSH
16102: LD_INT 22
16104: PUSH
16105: LD_INT 3
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 21
16114: PUSH
16115: LD_INT 1
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PPUSH
16126: CALL_OW 69
16130: PUSH
16131: LD_INT 2
16133: PLUS
16134: GREATEREQUAL
16135: IFFALSE 16366
// begin vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_occupied ] ] ] ) [ 1 ] ;
16137: LD_ADDR_VAR 0 4
16141: PUSH
16142: LD_VAR 0 4
16146: PUSH
16147: LD_INT 22
16149: PUSH
16150: LD_INT 3
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: LD_INT 21
16159: PUSH
16160: LD_INT 2
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 23
16169: PUSH
16170: LD_INT 3
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: LD_INT 3
16179: PUSH
16180: LD_INT 59
16182: PUSH
16183: EMPTY
16184: LIST
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: PPUSH
16196: CALL_OW 69
16200: PUSH
16201: LD_INT 1
16203: ARRAY
16204: ADD
16205: ST_TO_ADDR
// vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_occupied ] ] ] ) [ 2 ] ;
16206: LD_ADDR_VAR 0 4
16210: PUSH
16211: LD_VAR 0 4
16215: PUSH
16216: LD_INT 22
16218: PUSH
16219: LD_INT 3
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: LD_INT 21
16228: PUSH
16229: LD_INT 2
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PUSH
16236: LD_INT 23
16238: PUSH
16239: LD_INT 3
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: LD_INT 3
16248: PUSH
16249: LD_INT 59
16251: PUSH
16252: EMPTY
16253: LIST
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: PPUSH
16265: CALL_OW 69
16269: PUSH
16270: LD_INT 2
16272: ARRAY
16273: ADD
16274: ST_TO_ADDR
// SetSide ( vehs , 6 ) ;
16275: LD_VAR 0 4
16279: PPUSH
16280: LD_INT 6
16282: PPUSH
16283: CALL_OW 235
// produceMoreVehicles = true ;
16287: LD_ADDR_EXP 16
16291: PUSH
16292: LD_INT 1
16294: ST_TO_ADDR
// ComEnterUnit ( mechs [ 1 ] , vehs [ 1 ] ) ;
16295: LD_VAR 0 3
16299: PUSH
16300: LD_INT 1
16302: ARRAY
16303: PPUSH
16304: LD_VAR 0 4
16308: PUSH
16309: LD_INT 1
16311: ARRAY
16312: PPUSH
16313: CALL_OW 120
// ComEnterUnit ( mechs [ 2 ] , vehs [ 2 ] ) ;
16317: LD_VAR 0 3
16321: PUSH
16322: LD_INT 2
16324: ARRAY
16325: PPUSH
16326: LD_VAR 0 4
16330: PUSH
16331: LD_INT 2
16333: ARRAY
16334: PPUSH
16335: CALL_OW 120
// if kurinCheckVehicles and not kurinOpinion = 0 then
16339: LD_EXP 18
16343: PUSH
16344: LD_EXP 26
16348: PUSH
16349: LD_INT 0
16351: EQUAL
16352: NOT
16353: AND
16354: IFFALSE 16364
// kurinOpinion = 1 ;
16356: LD_ADDR_EXP 26
16360: PUSH
16361: LD_INT 1
16363: ST_TO_ADDR
// end else
16364: GO 16396
// begin if kurinCheckVehicles then
16366: LD_EXP 18
16370: IFFALSE 16396
// begin DialogueOn ;
16372: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
16376: LD_EXP 56
16380: PPUSH
16381: LD_STRING D6d-Kur-1
16383: PPUSH
16384: CALL_OW 94
// DialogueOff ;
16388: CALL_OW 7
// Lose_Vehicles ;
16392: CALL 10428 0 0
// end ; end ; end ;
16396: PPOPN 5
16398: END
// every 0 0$1 trigger meetNearOmicronBase do
16399: LD_EXP 19
16403: IFFALSE 16526
16405: GO 16407
16407: DISABLE
// begin spawnCrates = false ;
16408: LD_ADDR_EXP 5
16412: PUSH
16413: LD_INT 0
16415: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
16416: LD_INT 6
16418: PPUSH
16419: LD_INT 1
16421: PPUSH
16422: LD_INT 2
16424: PPUSH
16425: LD_INT 1
16427: PPUSH
16428: CALL_OW 80
// SetRestrict ( b_depot , 3 , false ) ;
16432: LD_INT 0
16434: PPUSH
16435: LD_INT 3
16437: PPUSH
16438: LD_INT 0
16440: PPUSH
16441: CALL_OW 324
// ChangeMissionObjectives ( M3a ) ;
16445: LD_STRING M3a
16447: PPUSH
16448: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
16452: LD_STRING M5
16454: PPUSH
16455: CALL_OW 337
// SetAreaMapShow ( MeetArea , 1 ) ;
16459: LD_INT 15
16461: PPUSH
16462: LD_INT 1
16464: PPUSH
16465: CALL_OW 424
// ComMoveXY ( kirovAttackVehicles , 75 , 38 ) ;
16469: LD_EXP 71
16473: PPUSH
16474: LD_INT 75
16476: PPUSH
16477: LD_INT 38
16479: PPUSH
16480: CALL_OW 111
// ComMoveXY ( kirovAttackCargo , 75 , 38 ) ;
16484: LD_EXP 70
16488: PPUSH
16489: LD_INT 75
16491: PPUSH
16492: LD_INT 38
16494: PPUSH
16495: CALL_OW 111
// counterIndex = 2 ;
16499: LD_ADDR_EXP 84
16503: PUSH
16504: LD_INT 2
16506: ST_TO_ADDR
// if not kurinOpinion = 0 then
16507: LD_EXP 26
16511: PUSH
16512: LD_INT 0
16514: EQUAL
16515: NOT
16516: IFFALSE 16526
// kurinOpinion = 1 ;
16518: LD_ADDR_EXP 26
16522: PUSH
16523: LD_INT 1
16525: ST_TO_ADDR
// end ;
16526: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 2 do
16527: LD_EXP 15
16531: PUSH
16532: LD_INT 35
16534: LESS
16535: PUSH
16536: LD_EXP 84
16540: PUSH
16541: LD_INT 2
16543: EQUAL
16544: AND
16545: IFFALSE 16594
16547: GO 16549
16549: DISABLE
// begin DialogueOn ;
16550: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
16554: LD_EXP 56
16558: PPUSH
16559: LD_STRING D7a-Kur-1
16561: PPUSH
16562: CALL_OW 94
// DialogueOff ;
16566: CALL_OW 7
// counterIndex = 3 ;
16570: LD_ADDR_EXP 84
16574: PUSH
16575: LD_INT 3
16577: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
16578: LD_ADDR_EXP 15
16582: PUSH
16583: LD_INT 4200
16585: ST_TO_ADDR
// kurinOpinion = 0 ;
16586: LD_ADDR_EXP 26
16590: PUSH
16591: LD_INT 0
16593: ST_TO_ADDR
// end ;
16594: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 3 do
16595: LD_EXP 15
16599: PUSH
16600: LD_INT 35
16602: LESS
16603: PUSH
16604: LD_EXP 84
16608: PUSH
16609: LD_INT 3
16611: EQUAL
16612: AND
16613: IFFALSE 16622
16615: GO 16617
16617: DISABLE
// Lose_Delay ;
16618: CALL 10458 0 0
16622: END
// every 0 0$1 trigger meetNearOmicronBase and FilterUnitsExceptArea ( MeetArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
16623: LD_EXP 19
16627: PUSH
16628: LD_INT 15
16630: PPUSH
16631: LD_INT 22
16633: PUSH
16634: LD_INT 3
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 21
16643: PUSH
16644: LD_INT 1
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PPUSH
16655: CALL_OW 71
16659: PUSH
16660: LD_INT 0
16662: EQUAL
16663: AND
16664: IFFALSE 16772
16666: GO 16668
16668: DISABLE
// begin counterEnable = false ;
16669: LD_ADDR_EXP 83
16673: PUSH
16674: LD_INT 0
16676: ST_TO_ADDR
// Display_Strings := [ ] ;
16677: LD_ADDR_OWVAR 47
16681: PUSH
16682: EMPTY
16683: ST_TO_ADDR
// SetAreaMapShow ( MeetArea , 0 ) ;
16684: LD_INT 15
16686: PPUSH
16687: LD_INT 0
16689: PPUSH
16690: CALL_OW 424
// canExitBattlefield = false ;
16694: LD_ADDR_EXP 24
16698: PUSH
16699: LD_INT 0
16701: ST_TO_ADDR
// DialogueOn ;
16702: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
16706: LD_EXP 44
16710: PPUSH
16711: LD_STRING D7-Bur-1
16713: PPUSH
16714: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
16718: LD_EXP 56
16722: PPUSH
16723: LD_STRING D7-Kur-1
16725: PPUSH
16726: CALL_OW 94
// DialogueOff ;
16730: CALL_OW 7
// MC_SetScanArea ( 1 , OmicronScanArea ) ;
16734: LD_INT 1
16736: PPUSH
16737: LD_INT 18
16739: PPUSH
16740: CALL 44796 0 2
// MC_SetDefenderLimit ( 1 , 8 ) ;
16744: LD_INT 1
16746: PPUSH
16747: LD_INT 8
16749: PPUSH
16750: CALL 43660 0 2
// ChangeMissionObjectives ( M5a ) ;
16754: LD_STRING M5a
16756: PPUSH
16757: CALL_OW 337
// Query ( QRefuel ) ;
16761: LD_STRING QRefuel
16763: PPUSH
16764: CALL_OW 97
// KirovAttackOmicron ;
16768: CALL 9851 0 0
// end ;
16772: END
// every 0 0$1 trigger not canExitBattlefield do var unit ;
16773: LD_EXP 24
16777: NOT
16778: IFFALSE 16946
16780: GO 16782
16782: DISABLE
16783: LD_INT 0
16785: PPUSH
// begin enable ;
16786: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16787: LD_ADDR_VAR 0 1
16791: PUSH
16792: LD_INT 22
16794: PUSH
16795: LD_INT 3
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 2
16804: PUSH
16805: LD_INT 21
16807: PUSH
16808: LD_INT 1
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: PUSH
16815: LD_INT 21
16817: PUSH
16818: LD_INT 2
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: LIST
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PPUSH
16834: CALL_OW 69
16838: PUSH
16839: FOR_IN
16840: IFFALSE 16944
// if not IsInArea ( unit , OmicronBattlefieldArea ) and UnitFilter ( unit , [ [ f_occupied ] , [ f_type , unit_vehicle ] ] ) then
16842: LD_VAR 0 1
16846: PPUSH
16847: LD_INT 28
16849: PPUSH
16850: CALL_OW 308
16854: NOT
16855: PUSH
16856: LD_VAR 0 1
16860: PPUSH
16861: LD_INT 59
16863: PUSH
16864: EMPTY
16865: LIST
16866: PUSH
16867: LD_INT 21
16869: PUSH
16870: LD_INT 2
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PPUSH
16881: CALL_OW 72
16885: AND
16886: IFFALSE 16942
// begin ComMoveToArea ( unit , OmicronBattlefieldArea ) ;
16888: LD_VAR 0 1
16892: PPUSH
16893: LD_INT 28
16895: PPUSH
16896: CALL_OW 113
// if not dialog_stop then
16900: LD_EXP 11
16904: NOT
16905: IFFALSE 16942
// begin dialog_stop = true ;
16907: LD_ADDR_EXP 11
16911: PUSH
16912: LD_INT 1
16914: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
16915: LD_EXP 56
16919: PPUSH
16920: LD_STRING D12-Kur-1
16922: PPUSH
16923: CALL_OW 88
// wait ( 0 0$5 ) ;
16927: LD_INT 175
16929: PPUSH
16930: CALL_OW 67
// dialog_stop = false ;
16934: LD_ADDR_EXP 11
16938: PUSH
16939: LD_INT 0
16941: ST_TO_ADDR
// end ; end ;
16942: GO 16839
16944: POP
16945: POP
// end ;
16946: PPOPN 1
16948: END
// every 0 0$1 do var unit ;
16949: GO 16951
16951: DISABLE
16952: LD_INT 0
16954: PPUSH
// begin enable ;
16955: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16956: LD_ADDR_VAR 0 1
16960: PUSH
16961: LD_INT 22
16963: PUSH
16964: LD_INT 3
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: PUSH
16971: LD_INT 2
16973: PUSH
16974: LD_INT 21
16976: PUSH
16977: LD_INT 1
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PUSH
16984: LD_INT 21
16986: PUSH
16987: LD_INT 2
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: LIST
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PPUSH
17003: CALL_OW 69
17007: PUSH
17008: FOR_IN
17009: IFFALSE 17084
// if IsInArea ( unit , SecondKurinBase ) then
17011: LD_VAR 0 1
17015: PPUSH
17016: LD_INT 21
17018: PPUSH
17019: CALL_OW 308
17023: IFFALSE 17082
// begin ComMoveXY ( unit , 200 , 114 ) ;
17025: LD_VAR 0 1
17029: PPUSH
17030: LD_INT 200
17032: PPUSH
17033: LD_INT 114
17035: PPUSH
17036: CALL_OW 111
// if not dialog_stop then
17040: LD_EXP 11
17044: NOT
17045: IFFALSE 17082
// begin dialog_stop = true ;
17047: LD_ADDR_EXP 11
17051: PUSH
17052: LD_INT 1
17054: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
17055: LD_EXP 56
17059: PPUSH
17060: LD_STRING D12-Kur-1
17062: PPUSH
17063: CALL_OW 88
// wait ( 0 0$5 ) ;
17067: LD_INT 175
17069: PPUSH
17070: CALL_OW 67
// dialog_stop = false ;
17074: LD_ADDR_EXP 11
17078: PUSH
17079: LD_INT 0
17081: ST_TO_ADDR
// end ; end ;
17082: GO 17008
17084: POP
17085: POP
// end ;
17086: PPOPN 1
17088: END
// every 0 0$1 trigger canExitBattlefield and IsOK ( Sikorski ) do var unit , randDialog ;
17089: LD_EXP 24
17093: PUSH
17094: LD_INT 290
17096: PPUSH
17097: CALL_OW 302
17101: AND
17102: IFFALSE 17418
17104: GO 17106
17106: DISABLE
17107: LD_INT 0
17109: PPUSH
17110: PPUSH
// begin enable ;
17111: ENABLE
// for unit in FilterUnitsInArea ( OmicronBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
17112: LD_ADDR_VAR 0 1
17116: PUSH
17117: LD_INT 13
17119: PPUSH
17120: LD_INT 22
17122: PUSH
17123: LD_INT 1
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 2
17132: PUSH
17133: LD_INT 21
17135: PUSH
17136: LD_INT 1
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: LD_INT 21
17145: PUSH
17146: LD_INT 2
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PUSH
17153: LD_INT 21
17155: PUSH
17156: LD_INT 3
17158: PUSH
17159: EMPTY
17160: LIST
17161: LIST
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PPUSH
17173: CALL_OW 70
17177: PUSH
17178: FOR_IN
17179: IFFALSE 17416
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
17181: LD_VAR 0 1
17185: PPUSH
17186: LD_INT 22
17188: PUSH
17189: LD_INT 3
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 2
17198: PUSH
17199: LD_INT 21
17201: PUSH
17202: LD_INT 1
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 21
17211: PUSH
17212: LD_INT 2
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: LIST
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PPUSH
17228: CALL_OW 69
17232: PPUSH
17233: LD_VAR 0 1
17237: PPUSH
17238: CALL_OW 74
17242: PPUSH
17243: CALL_OW 296
17247: PUSH
17248: LD_INT 17
17250: LESS
17251: IFFALSE 17414
// begin ComMoveXY ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) , 69 , 85 ) ;
17253: LD_INT 22
17255: PUSH
17256: LD_INT 3
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PUSH
17263: LD_INT 2
17265: PUSH
17266: LD_INT 21
17268: PUSH
17269: LD_INT 1
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: PUSH
17276: LD_INT 21
17278: PUSH
17279: LD_INT 2
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: LIST
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PPUSH
17295: CALL_OW 69
17299: PPUSH
17300: LD_VAR 0 1
17304: PPUSH
17305: CALL_OW 74
17309: PPUSH
17310: LD_INT 69
17312: PPUSH
17313: LD_INT 85
17315: PPUSH
17316: CALL_OW 111
// randDialog = rand ( 1 , 2 ) ;
17320: LD_ADDR_VAR 0 2
17324: PUSH
17325: LD_INT 1
17327: PPUSH
17328: LD_INT 2
17330: PPUSH
17331: CALL_OW 12
17335: ST_TO_ADDR
// if not dialog_stop then
17336: LD_EXP 11
17340: NOT
17341: IFFALSE 17414
// begin dialog_stop = true ;
17343: LD_ADDR_EXP 11
17347: PUSH
17348: LD_INT 1
17350: ST_TO_ADDR
// if randDialog = 1 or not IsOK ( Gnyevko ) then
17351: LD_VAR 0 2
17355: PUSH
17356: LD_INT 1
17358: EQUAL
17359: PUSH
17360: LD_EXP 45
17364: PPUSH
17365: CALL_OW 302
17369: NOT
17370: OR
17371: IFFALSE 17387
// SayRadio ( Kurin , D11-Kur-1 ) else
17373: LD_EXP 56
17377: PPUSH
17378: LD_STRING D11-Kur-1
17380: PPUSH
17381: CALL_OW 94
17385: GO 17399
// Say ( Gnyevko , D11-Gny-1 ) ;
17387: LD_EXP 45
17391: PPUSH
17392: LD_STRING D11-Gny-1
17394: PPUSH
17395: CALL_OW 88
// wait ( 0 0$5 ) ;
17399: LD_INT 175
17401: PPUSH
17402: CALL_OW 67
// dialog_stop = false ;
17406: LD_ADDR_EXP 11
17410: PUSH
17411: LD_INT 0
17413: ST_TO_ADDR
// end ; end ;
17414: GO 17178
17416: POP
17417: POP
// end ;
17418: PPOPN 2
17420: END
// every 0 0$1 trigger IsDead ( Sikorski ) and FilterUnitsInArea ( OmicronBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 3 do var tmpUs , tmpRu , building ;
17421: LD_INT 290
17423: PPUSH
17424: CALL_OW 301
17428: PUSH
17429: LD_INT 13
17431: PPUSH
17432: LD_INT 22
17434: PUSH
17435: LD_INT 1
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: LD_INT 21
17444: PUSH
17445: LD_INT 1
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PPUSH
17456: CALL_OW 70
17460: PUSH
17461: LD_INT 3
17463: LESS
17464: AND
17465: IFFALSE 18808
17467: GO 17469
17469: DISABLE
17470: LD_INT 0
17472: PPUSH
17473: PPUSH
17474: PPUSH
// begin omicronSurrender = true ;
17475: LD_ADDR_EXP 23
17479: PUSH
17480: LD_INT 1
17482: ST_TO_ADDR
// canExitBattlefield = true ;
17483: LD_ADDR_EXP 24
17487: PUSH
17488: LD_INT 1
17490: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , false ) ;
17491: LD_INT 1
17493: PPUSH
17494: LD_INT 3
17496: PPUSH
17497: LD_INT 1
17499: PPUSH
17500: LD_INT 0
17502: PPUSH
17503: CALL_OW 80
// CenterNowOnUnits ( Burlak ) ;
17507: LD_EXP 44
17511: PPUSH
17512: CALL_OW 87
// uc_side = 1 ;
17516: LD_ADDR_OWVAR 20
17520: PUSH
17521: LD_INT 1
17523: ST_TO_ADDR
// uc_nation = 1 ;
17524: LD_ADDR_OWVAR 21
17528: PUSH
17529: LD_INT 1
17531: ST_TO_ADDR
// hc_name :=  ;
17532: LD_ADDR_OWVAR 26
17536: PUSH
17537: LD_STRING 
17539: ST_TO_ADDR
// hc_gallery =  ;
17540: LD_ADDR_OWVAR 33
17544: PUSH
17545: LD_STRING 
17547: ST_TO_ADDR
// PrepareSoldier ( sex_male , 1 ) ;
17548: LD_INT 1
17550: PPUSH
17551: LD_INT 1
17553: PPUSH
17554: CALL_OW 381
// tmpUs = CreateHuman ;
17558: LD_ADDR_VAR 0 1
17562: PUSH
17563: CALL_OW 44
17567: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ f_side , 3 ] ) ) ;
17568: LD_INT 22
17570: PUSH
17571: LD_INT 3
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PPUSH
17578: CALL_OW 69
17582: PPUSH
17583: CALL_OW 141
// InGameOn ;
17587: CALL_OW 8
// DialogueOn ;
17591: CALL_OW 6
// CenterOnXY ( 26 , 33 ) ;
17595: LD_INT 26
17597: PPUSH
17598: LD_INT 33
17600: PPUSH
17601: CALL_OW 84
// ShowArea ( 3 , HideMapPartArea ) ;
17605: LD_INT 3
17607: PPUSH
17608: LD_INT 25
17610: PPUSH
17611: CALL_OW 334
// SayRadio ( tmpUs , D8-Sol1-1 ) ;
17615: LD_VAR 0 1
17619: PPUSH
17620: LD_STRING D8-Sol1-1
17622: PPUSH
17623: CALL_OW 94
// if IsOk ( Kovalyuk ) then
17627: LD_EXP 47
17631: PPUSH
17632: CALL_OW 302
17636: IFFALSE 17650
// Say ( Kovalyuk , D8-Kov-1 ) ;
17638: LD_EXP 47
17642: PPUSH
17643: LD_STRING D8-Kov-1
17645: PPUSH
17646: CALL_OW 88
// tmpRu = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
17650: LD_ADDR_VAR 0 2
17654: PUSH
17655: LD_INT 22
17657: PUSH
17658: LD_INT 3
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: LD_INT 21
17667: PUSH
17668: LD_INT 1
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PUSH
17675: LD_INT 26
17677: PUSH
17678: LD_INT 1
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: LIST
17689: PPUSH
17690: CALL_OW 69
17694: PPUSH
17695: LD_STRING D8-RSol1-1
17697: PPUSH
17698: LD_STRING 
17700: PPUSH
17701: LD_INT 0
17703: PPUSH
17704: CALL 7092 0 4
17708: ST_TO_ADDR
// if IsOk ( Gnyevko ) then
17709: LD_EXP 45
17713: PPUSH
17714: CALL_OW 302
17718: IFFALSE 17732
// Say ( Gnyevko , D8-Gny-1 ) ;
17720: LD_EXP 45
17724: PPUSH
17725: LD_STRING D8-Gny-1
17727: PPUSH
17728: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff tmpRu , D8-RSol2-1 ,  , false ) ;
17732: LD_INT 22
17734: PUSH
17735: LD_INT 3
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 21
17744: PUSH
17745: LD_INT 1
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 26
17754: PUSH
17755: LD_INT 1
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: LIST
17766: PPUSH
17767: CALL_OW 69
17771: PUSH
17772: LD_VAR 0 2
17776: DIFF
17777: PPUSH
17778: LD_STRING D8-RSol2-1
17780: PPUSH
17781: LD_STRING 
17783: PPUSH
17784: LD_INT 0
17786: PPUSH
17787: CALL 7092 0 4
// DialogueOff ;
17791: CALL_OW 7
// if IsPlaced ( Scholtze ) and GetSide ( Scholtze ) = 8 then
17795: LD_EXP 50
17799: PPUSH
17800: CALL_OW 305
17804: PUSH
17805: LD_EXP 50
17809: PPUSH
17810: CALL_OW 255
17814: PUSH
17815: LD_INT 8
17817: EQUAL
17818: AND
17819: IFFALSE 17833
// SetSide ( Scholtze , 0 ) ;
17821: LD_EXP 50
17825: PPUSH
17826: LD_INT 0
17828: PPUSH
17829: CALL_OW 235
// SetSide ( FilterAllUnits ( [ f_side , 8 ] ) , 6 ) ;
17833: LD_INT 22
17835: PUSH
17836: LD_INT 8
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PPUSH
17843: CALL_OW 69
17847: PPUSH
17848: LD_INT 6
17850: PPUSH
17851: CALL_OW 235
// PrepareArabian ;
17855: CALL 6567 0 0
// CenterNowOnXY ( 200 , 32 ) ;
17859: LD_INT 200
17861: PPUSH
17862: LD_INT 32
17864: PPUSH
17865: CALL_OW 86
// ComAgressiveMove ( northGroup , 207 , 37 ) ;
17869: LD_EXP 81
17873: PPUSH
17874: LD_INT 207
17876: PPUSH
17877: LD_INT 37
17879: PPUSH
17880: CALL_OW 114
// AddComAgressiveMove ( northGroup , 216 , 62 ) ;
17884: LD_EXP 81
17888: PPUSH
17889: LD_INT 216
17891: PPUSH
17892: LD_INT 62
17894: PPUSH
17895: CALL_OW 174
// wait ( 0 0$7 ) ;
17899: LD_INT 245
17901: PPUSH
17902: CALL_OW 67
// music_nat = nation_arabian ;
17906: LD_ADDR_OWVAR 71
17910: PUSH
17911: LD_INT 2
17913: ST_TO_ADDR
// game_speed = 4 ;
17914: LD_ADDR_OWVAR 65
17918: PUSH
17919: LD_INT 4
17921: ST_TO_ADDR
// DialogueOn ;
17922: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-1 ) ;
17926: LD_EXP 76
17930: PPUSH
17931: LD_STRING D9-Gri-1
17933: PPUSH
17934: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
17938: LD_EXP 56
17942: PPUSH
17943: LD_STRING D9-Kur-1
17945: PPUSH
17946: CALL_OW 94
// DialogueOff ;
17950: CALL_OW 7
// wait ( 0 0$3 ) ;
17954: LD_INT 105
17956: PPUSH
17957: CALL_OW 67
// DialogueOn ;
17961: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-2 ) ;
17965: LD_EXP 76
17969: PPUSH
17970: LD_STRING D9-Gri-2
17972: PPUSH
17973: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
17977: LD_EXP 56
17981: PPUSH
17982: LD_STRING D9-Kur-2
17984: PPUSH
17985: CALL_OW 94
// DialogueOff ;
17989: CALL_OW 7
// repeat wait ( 1 ) ;
17993: LD_INT 1
17995: PPUSH
17996: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
18000: LD_EXP 76
18004: PPUSH
18005: CALL_OW 256
18009: PUSH
18010: LD_INT 1000
18012: LESS
18013: IFFALSE 17993
// DialogueOn ;
18015: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-3 ) ;
18019: LD_EXP 76
18023: PPUSH
18024: LD_STRING D9-Gri-3
18026: PPUSH
18027: CALL_OW 94
// DialogueOff ;
18031: CALL_OW 7
// KillUnit ( Grishko ) ;
18035: LD_EXP 76
18039: PPUSH
18040: CALL_OW 66
// wait ( 0 0$12 ) ;
18044: LD_INT 420
18046: PPUSH
18047: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
18051: LD_EXP 56
18055: PPUSH
18056: CALL_OW 87
// SayRadio ( Kurin , D9-Kur-3 ) ;
18060: LD_EXP 56
18064: PPUSH
18065: LD_STRING D9-Kur-3
18067: PPUSH
18068: CALL_OW 94
// CenterNowOnXY ( 218 , 109 ) ;
18072: LD_INT 218
18074: PPUSH
18075: LD_INT 109
18077: PPUSH
18078: CALL_OW 86
// ComAgressiveMove ( southGroup , 218 , 109 ) ;
18082: LD_EXP 82
18086: PPUSH
18087: LD_INT 218
18089: PPUSH
18090: LD_INT 109
18092: PPUSH
18093: CALL_OW 114
// wait ( 0 0$25 ) ;
18097: LD_INT 875
18099: PPUSH
18100: CALL_OW 67
// CenterOnXY ( 169 , 109 ) ;
18104: LD_INT 169
18106: PPUSH
18107: LD_INT 109
18109: PPUSH
18110: CALL_OW 84
// AddComAgressiveMove ( northGroup , 161 , 109 ) ;
18114: LD_EXP 81
18118: PPUSH
18119: LD_INT 161
18121: PPUSH
18122: LD_INT 109
18124: PPUSH
18125: CALL_OW 174
// wait ( 0 0$25 ) ;
18129: LD_INT 875
18131: PPUSH
18132: CALL_OW 67
// ComAgressiveMove ( southGroup , 161 , 109 ) ;
18136: LD_EXP 82
18140: PPUSH
18141: LD_INT 161
18143: PPUSH
18144: LD_INT 109
18146: PPUSH
18147: CALL_OW 114
// ComEnterUnit ( Kurin , kirovDepot ) ;
18151: LD_EXP 56
18155: PPUSH
18156: LD_EXP 62
18160: PPUSH
18161: CALL_OW 120
// DialogueOn ;
18165: CALL_OW 6
// SayRadio ( Kurin , D9a-Kur-1 ) ;
18169: LD_EXP 56
18173: PPUSH
18174: LD_STRING D9a-Kur-1
18176: PPUSH
18177: CALL_OW 94
// Say ( Burlak , D9a-Bur-1 ) ;
18181: LD_EXP 44
18185: PPUSH
18186: LD_STRING D9a-Bur-1
18188: PPUSH
18189: CALL_OW 88
// SayRadio ( Kurin , D9a-Kur-2 ) ;
18193: LD_EXP 56
18197: PPUSH
18198: LD_STRING D9a-Kur-2
18200: PPUSH
18201: CALL_OW 94
// DialogueOff ;
18205: CALL_OW 7
// ComExitBuilding ( survivorsArabianAttack ) ;
18209: LD_EXP 73
18213: PPUSH
18214: CALL_OW 122
// wait ( 0 0$1 ) ;
18218: LD_INT 35
18220: PPUSH
18221: CALL_OW 67
// ComMoveXY ( survivorsArabianAttack , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
18225: LD_EXP 73
18229: PPUSH
18230: LD_EXP 55
18234: PPUSH
18235: CALL_OW 250
18239: PPUSH
18240: LD_EXP 55
18244: PPUSH
18245: CALL_OW 251
18249: PPUSH
18250: CALL_OW 111
// immortalSurvivors = true ;
18254: LD_ADDR_EXP 25
18258: PUSH
18259: LD_INT 1
18261: ST_TO_ADDR
// wait ( 0 0$33 ) ;
18262: LD_INT 1155
18264: PPUSH
18265: CALL_OW 67
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
18269: LD_INT 22
18271: PUSH
18272: LD_INT 3
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 21
18281: PUSH
18282: LD_INT 1
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PPUSH
18293: CALL_OW 69
18297: PPUSH
18298: CALL_OW 121
// wait ( 0 0$1 ) ;
18302: LD_INT 35
18304: PPUSH
18305: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
18309: LD_INT 22
18311: PUSH
18312: LD_INT 3
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: LD_INT 21
18321: PUSH
18322: LD_INT 1
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PPUSH
18333: CALL_OW 69
18337: PPUSH
18338: LD_EXP 57
18342: PPUSH
18343: CALL_OW 250
18347: PPUSH
18348: LD_EXP 57
18352: PPUSH
18353: CALL_OW 251
18357: PPUSH
18358: CALL_OW 111
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
18362: LD_INT 22
18364: PUSH
18365: LD_INT 3
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 21
18374: PUSH
18375: LD_INT 1
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PPUSH
18386: CALL_OW 69
18390: PPUSH
18391: LD_EXP 57
18395: PPUSH
18396: CALL_OW 250
18400: PPUSH
18401: LD_EXP 57
18405: PPUSH
18406: CALL_OW 251
18410: PPUSH
18411: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
18415: LD_EXP 44
18419: PPUSH
18420: CALL_OW 87
// wait ( 0 0$1 ) ;
18424: LD_INT 35
18426: PPUSH
18427: CALL_OW 67
// until GetDistUnits ( Burlak , Popov ) < 6 ;
18431: LD_EXP 44
18435: PPUSH
18436: LD_EXP 57
18440: PPUSH
18441: CALL_OW 296
18445: PUSH
18446: LD_INT 6
18448: LESS
18449: IFFALSE 18362
// CenterNowOnUnits ( [ Burlak , Popov ] ) ;
18451: LD_EXP 44
18455: PUSH
18456: LD_EXP 57
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PPUSH
18465: CALL_OW 87
// ComTurnUnit ( Burlak , Popov ) ;
18469: LD_EXP 44
18473: PPUSH
18474: LD_EXP 57
18478: PPUSH
18479: CALL_OW 119
// ComTurnUnit ( Popov , Burlak ) ;
18483: LD_EXP 57
18487: PPUSH
18488: LD_EXP 44
18492: PPUSH
18493: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
18497: LD_EXP 44
18501: PPUSH
18502: LD_STRING D10a-Bur-1
18504: PPUSH
18505: CALL_OW 88
// Say ( Popov , D10a-Pop-1 ) ;
18509: LD_EXP 57
18513: PPUSH
18514: LD_STRING D10a-Pop-1
18516: PPUSH
18517: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
18521: LD_EXP 44
18525: PPUSH
18526: LD_STRING D10a-Bur-2
18528: PPUSH
18529: CALL_OW 88
// Say ( Popov , D10a-Pop-2 ) ;
18533: LD_EXP 57
18537: PPUSH
18538: LD_STRING D10a-Pop-2
18540: PPUSH
18541: CALL_OW 88
// Say ( Burlak , D10a-Bur-3 ) ;
18545: LD_EXP 44
18549: PPUSH
18550: LD_STRING D10a-Bur-3
18552: PPUSH
18553: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
18557: LD_EXP 57
18561: PPUSH
18562: LD_STRING D10a-Pop-3
18564: PPUSH
18565: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
18569: LD_EXP 44
18573: PPUSH
18574: LD_STRING D10a-Bur-4
18576: PPUSH
18577: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
18581: LD_EXP 57
18585: PPUSH
18586: LD_STRING D10a-Pop-4
18588: PPUSH
18589: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
18593: LD_EXP 44
18597: PPUSH
18598: LD_STRING D10a-Bur-5
18600: PPUSH
18601: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
18605: LD_EXP 57
18609: PPUSH
18610: LD_STRING D10a-Pop-5
18612: PPUSH
18613: CALL_OW 88
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 83 , 157 ) ;
18617: LD_INT 22
18619: PUSH
18620: LD_INT 3
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 21
18629: PUSH
18630: LD_INT 1
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PPUSH
18641: CALL_OW 69
18645: PPUSH
18646: LD_INT 83
18648: PPUSH
18649: LD_INT 157
18651: PPUSH
18652: CALL_OW 111
// ComMoveXY ( survivorsArabianAttack , 83 , 157 ) ;
18656: LD_EXP 73
18660: PPUSH
18661: LD_INT 83
18663: PPUSH
18664: LD_INT 157
18666: PPUSH
18667: CALL_OW 111
// repeat CenterNowOnUnits ( Burlak ) ;
18671: LD_EXP 44
18675: PPUSH
18676: CALL_OW 87
// wait ( 0 0$1 ) ;
18680: LD_INT 35
18682: PPUSH
18683: CALL_OW 67
// until GetDistUnits ( Burlak , beriaDepot ) > 19 ;
18687: LD_EXP 44
18691: PPUSH
18692: LD_EXP 55
18696: PPUSH
18697: CALL_OW 296
18701: PUSH
18702: LD_INT 19
18704: GREATER
18705: IFFALSE 18671
// CenterNowOnXY ( 113 , 96 ) ;
18707: LD_INT 113
18709: PPUSH
18710: LD_INT 96
18712: PPUSH
18713: CALL_OW 86
// canDestroyBeriaBase = true ;
18717: LD_ADDR_EXP 28
18721: PUSH
18722: LD_INT 1
18724: ST_TO_ADDR
// for building in FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
18725: LD_ADDR_VAR 0 3
18729: PUSH
18730: LD_INT 27
18732: PPUSH
18733: LD_INT 22
18735: PUSH
18736: LD_INT 3
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 21
18745: PUSH
18746: LD_INT 3
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PPUSH
18757: CALL_OW 70
18761: PUSH
18762: FOR_IN
18763: IFFALSE 18795
// begin AddComAttackUnit ( northGroup , building ) ;
18765: LD_EXP 81
18769: PPUSH
18770: LD_VAR 0 3
18774: PPUSH
18775: CALL_OW 175
// AddComAttackUnit ( southGroup , building ) ;
18779: LD_EXP 82
18783: PPUSH
18784: LD_VAR 0 3
18788: PPUSH
18789: CALL_OW 175
// end ;
18793: GO 18762
18795: POP
18796: POP
// wait ( 0 0$35 ) ;
18797: LD_INT 1225
18799: PPUSH
18800: CALL_OW 67
// FinishMission ;
18804: CALL 10473 0 0
// end ;
18808: PPOPN 3
18810: END
// every 1 trigger immortalSurvivors do var unit ;
18811: LD_EXP 25
18815: IFFALSE 18853
18817: GO 18819
18819: DISABLE
18820: LD_INT 0
18822: PPUSH
// begin enable ;
18823: ENABLE
// for unit in survivorsArabianAttack do
18824: LD_ADDR_VAR 0 1
18828: PUSH
18829: LD_EXP 73
18833: PUSH
18834: FOR_IN
18835: IFFALSE 18851
// SetLives ( unit , 1000 ) ;
18837: LD_VAR 0 1
18841: PPUSH
18842: LD_INT 1000
18844: PPUSH
18845: CALL_OW 234
18849: GO 18834
18851: POP
18852: POP
// end ; end_of_file
18853: PPOPN 1
18855: END
// every 0 0$30 do
18856: GO 18858
18858: DISABLE
// CreateCratesXYR ( rand ( 3 , 5 ) , 76 , 111 , 5 , true ) ;
18859: LD_INT 3
18861: PPUSH
18862: LD_INT 5
18864: PPUSH
18865: CALL_OW 12
18869: PPUSH
18870: LD_INT 76
18872: PPUSH
18873: LD_INT 111
18875: PPUSH
18876: LD_INT 5
18878: PPUSH
18879: LD_INT 1
18881: PPUSH
18882: CALL_OW 56
18886: END
// every 0 0$10 trigger spawnCrates do var spawnDelay ;
18887: LD_EXP 5
18891: IFFALSE 18963
18893: GO 18895
18895: DISABLE
18896: LD_INT 0
18898: PPUSH
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
18899: LD_INT 50
18901: PPUSH
18902: LD_INT 4200
18904: PPUSH
18905: CALL_OW 12
18909: PPUSH
18910: CALL_OW 67
// wait ( spawnDelay * 0 0$5 ) ;
18914: LD_VAR 0 1
18918: PUSH
18919: LD_INT 175
18921: MUL
18922: PPUSH
18923: CALL_OW 67
// spawnDelay = spawnDelay + 1 ;
18927: LD_ADDR_VAR 0 1
18931: PUSH
18932: LD_VAR 0 1
18936: PUSH
18937: LD_INT 1
18939: PLUS
18940: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
18941: LD_INT 3
18943: PPUSH
18944: LD_INT 5
18946: PPUSH
18947: CALL_OW 12
18951: PPUSH
18952: LD_INT 6
18954: PPUSH
18955: LD_INT 1
18957: PPUSH
18958: CALL_OW 55
// enable ;
18962: ENABLE
// end ; end_of_file
18963: PPOPN 1
18965: END
// export counterEnable , counterIndex ; every 0 0$1 trigger counterEnable do
18966: LD_EXP 83
18970: IFFALSE 19133
18972: GO 18974
18974: DISABLE
// begin enable ;
18975: ENABLE
// case counterIndex of 1 :
18976: LD_EXP 84
18980: PUSH
18981: LD_INT 1
18983: DOUBLE
18984: EQUAL
18985: IFTRUE 18989
18987: GO 19006
18989: POP
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ; 2 :
18990: LD_ADDR_EXP 37
18994: PUSH
18995: LD_EXP 37
18999: PUSH
19000: LD_INT 35
19002: MINUS
19003: ST_TO_ADDR
19004: GO 19133
19006: LD_INT 2
19008: DOUBLE
19009: EQUAL
19010: IFTRUE 19014
19012: GO 19048
19014: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
19015: LD_ADDR_OWVAR 47
19019: PUSH
19020: LD_STRING #Ru03-1
19022: PUSH
19023: LD_EXP 15
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
19032: LD_ADDR_EXP 15
19036: PUSH
19037: LD_EXP 15
19041: PUSH
19042: LD_INT 35
19044: MINUS
19045: ST_TO_ADDR
// end ; 3 :
19046: GO 19133
19048: LD_INT 3
19050: DOUBLE
19051: EQUAL
19052: IFTRUE 19056
19054: GO 19090
19056: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
19057: LD_ADDR_OWVAR 47
19061: PUSH
19062: LD_STRING #Ru03-2
19064: PUSH
19065: LD_EXP 15
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
19074: LD_ADDR_EXP 15
19078: PUSH
19079: LD_EXP 15
19083: PUSH
19084: LD_INT 35
19086: MINUS
19087: ST_TO_ADDR
// end ; 4 :
19088: GO 19133
19090: LD_INT 4
19092: DOUBLE
19093: EQUAL
19094: IFTRUE 19098
19096: GO 19132
19098: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
19099: LD_ADDR_OWVAR 47
19103: PUSH
19104: LD_STRING #Ru03-3
19106: PUSH
19107: LD_EXP 14
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
19116: LD_ADDR_EXP 14
19120: PUSH
19121: LD_EXP 14
19125: PUSH
19126: LD_INT 35
19128: MINUS
19129: ST_TO_ADDR
// end ; end ;
19130: GO 19133
19132: POP
// end ; end_of_file
19133: END
// every 7 7$0 do
19134: GO 19136
19136: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 0 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
19137: LD_INT 3
19139: PPUSH
19140: LD_INT 1
19142: PPUSH
19143: LD_INT 0
19145: PPUSH
19146: LD_INT 7
19148: PUSH
19149: LD_INT 9
19151: PUSH
19152: LD_INT 8
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 1
19162: PPUSH
19163: LD_INT 3
19165: PPUSH
19166: CALL_OW 12
19170: ARRAY
19171: PPUSH
19172: CALL 5962 0 4
19176: END
// every 12 12$0 do
19177: GO 19179
19179: DISABLE
// PrepareAmericanSupportTroops ( 4 , 2 , 1 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
19180: LD_INT 4
19182: PPUSH
19183: LD_INT 2
19185: PPUSH
19186: LD_INT 1
19188: PPUSH
19189: LD_INT 7
19191: PUSH
19192: LD_INT 9
19194: PUSH
19195: LD_INT 8
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 1
19205: PPUSH
19206: LD_INT 3
19208: PPUSH
19209: CALL_OW 12
19213: ARRAY
19214: PPUSH
19215: CALL 5962 0 4
19219: END
// every 20 20$0 do
19220: GO 19222
19222: DISABLE
// PrepareAmericanSupportTroops ( 6 , 2 , 0 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
19223: LD_INT 6
19225: PPUSH
19226: LD_INT 2
19228: PPUSH
19229: LD_INT 0
19231: PPUSH
19232: LD_INT 7
19234: PUSH
19235: LD_INT 9
19237: PUSH
19238: LD_INT 8
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 1
19248: PPUSH
19249: LD_INT 3
19251: PPUSH
19252: CALL_OW 12
19256: ARRAY
19257: PPUSH
19258: CALL 5962 0 4
19262: END
// every 23 23$0 do
19263: GO 19265
19265: DISABLE
// PrepareAmericanSupportTroops ( 5 , 1 , 3 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ; end_of_file
19266: LD_INT 5
19268: PPUSH
19269: LD_INT 1
19271: PPUSH
19272: LD_INT 3
19274: PPUSH
19275: LD_INT 7
19277: PUSH
19278: LD_INT 9
19280: PUSH
19281: LD_INT 8
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 1
19291: PPUSH
19292: LD_INT 3
19294: PPUSH
19295: CALL_OW 12
19299: ARRAY
19300: PPUSH
19301: CALL 5962 0 4
19305: END
// export function Nef_PrepareNature ; var i , un ; begin
19306: LD_INT 0
19308: PPUSH
19309: PPUSH
19310: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
19311: LD_ADDR_VAR 0 2
19315: PUSH
19316: DOUBLE
19317: LD_INT 1
19319: DEC
19320: ST_TO_ADDR
19321: LD_EXP 29
19325: PUSH
19326: LD_INT 1
19328: ARRAY
19329: PUSH
19330: FOR_TO
19331: IFFALSE 19441
// begin uc_side = 0 ;
19333: LD_ADDR_OWVAR 20
19337: PUSH
19338: LD_INT 0
19340: ST_TO_ADDR
// uc_nation = nation_nature ;
19341: LD_ADDR_OWVAR 21
19345: PUSH
19346: LD_INT 0
19348: ST_TO_ADDR
// hc_class = class_apeman ;
19349: LD_ADDR_OWVAR 28
19353: PUSH
19354: LD_INT 12
19356: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
19357: LD_ADDR_OWVAR 31
19361: PUSH
19362: LD_EXP 30
19366: PUSH
19367: LD_INT 1
19369: ARRAY
19370: PUSH
19371: LD_EXP 30
19375: PUSH
19376: LD_INT 2
19378: ARRAY
19379: PUSH
19380: LD_EXP 30
19384: PUSH
19385: LD_INT 3
19387: ARRAY
19388: PUSH
19389: LD_EXP 30
19393: PUSH
19394: LD_INT 4
19396: ARRAY
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
19404: LD_ADDR_OWVAR 35
19408: PUSH
19409: LD_EXP 31
19413: ST_TO_ADDR
// un = CreateHuman ;
19414: LD_ADDR_VAR 0 3
19418: PUSH
19419: CALL_OW 44
19423: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19424: LD_VAR 0 3
19428: PPUSH
19429: LD_INT 29
19431: PPUSH
19432: LD_INT 0
19434: PPUSH
19435: CALL_OW 49
// end ;
19439: GO 19330
19441: POP
19442: POP
// for i := 1 to animalsAmount [ 2 ] do
19443: LD_ADDR_VAR 0 2
19447: PUSH
19448: DOUBLE
19449: LD_INT 1
19451: DEC
19452: ST_TO_ADDR
19453: LD_EXP 29
19457: PUSH
19458: LD_INT 2
19460: ARRAY
19461: PUSH
19462: FOR_TO
19463: IFFALSE 19573
// begin uc_side = 0 ;
19465: LD_ADDR_OWVAR 20
19469: PUSH
19470: LD_INT 0
19472: ST_TO_ADDR
// uc_nation = nation_nature ;
19473: LD_ADDR_OWVAR 21
19477: PUSH
19478: LD_INT 0
19480: ST_TO_ADDR
// hc_class = class_phororhacos ;
19481: LD_ADDR_OWVAR 28
19485: PUSH
19486: LD_INT 18
19488: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
19489: LD_ADDR_OWVAR 31
19493: PUSH
19494: LD_EXP 30
19498: PUSH
19499: LD_INT 1
19501: ARRAY
19502: PUSH
19503: LD_EXP 30
19507: PUSH
19508: LD_INT 2
19510: ARRAY
19511: PUSH
19512: LD_EXP 30
19516: PUSH
19517: LD_INT 3
19519: ARRAY
19520: PUSH
19521: LD_EXP 30
19525: PUSH
19526: LD_INT 4
19528: ARRAY
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
19536: LD_ADDR_OWVAR 35
19540: PUSH
19541: LD_EXP 31
19545: ST_TO_ADDR
// un = CreateHuman ;
19546: LD_ADDR_VAR 0 3
19550: PUSH
19551: CALL_OW 44
19555: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19556: LD_VAR 0 3
19560: PPUSH
19561: LD_INT 29
19563: PPUSH
19564: LD_INT 0
19566: PPUSH
19567: CALL_OW 49
// end ;
19571: GO 19462
19573: POP
19574: POP
// for i := 1 to animalsAmount [ 3 ] do
19575: LD_ADDR_VAR 0 2
19579: PUSH
19580: DOUBLE
19581: LD_INT 1
19583: DEC
19584: ST_TO_ADDR
19585: LD_EXP 29
19589: PUSH
19590: LD_INT 3
19592: ARRAY
19593: PUSH
19594: FOR_TO
19595: IFFALSE 19705
// begin uc_side = 0 ;
19597: LD_ADDR_OWVAR 20
19601: PUSH
19602: LD_INT 0
19604: ST_TO_ADDR
// uc_nation = nation_nature ;
19605: LD_ADDR_OWVAR 21
19609: PUSH
19610: LD_INT 0
19612: ST_TO_ADDR
// hc_class = class_tiger ;
19613: LD_ADDR_OWVAR 28
19617: PUSH
19618: LD_INT 14
19620: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
19621: LD_ADDR_OWVAR 31
19625: PUSH
19626: LD_EXP 30
19630: PUSH
19631: LD_INT 1
19633: ARRAY
19634: PUSH
19635: LD_EXP 30
19639: PUSH
19640: LD_INT 2
19642: ARRAY
19643: PUSH
19644: LD_EXP 30
19648: PUSH
19649: LD_INT 3
19651: ARRAY
19652: PUSH
19653: LD_EXP 30
19657: PUSH
19658: LD_INT 4
19660: ARRAY
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
19668: LD_ADDR_OWVAR 35
19672: PUSH
19673: LD_EXP 31
19677: ST_TO_ADDR
// un = CreateHuman ;
19678: LD_ADDR_VAR 0 3
19682: PUSH
19683: CALL_OW 44
19687: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19688: LD_VAR 0 3
19692: PPUSH
19693: LD_INT 29
19695: PPUSH
19696: LD_INT 0
19698: PPUSH
19699: CALL_OW 49
// end ;
19703: GO 19594
19705: POP
19706: POP
// for i := 1 to animalsAmount [ 4 ] do
19707: LD_ADDR_VAR 0 2
19711: PUSH
19712: DOUBLE
19713: LD_INT 1
19715: DEC
19716: ST_TO_ADDR
19717: LD_EXP 29
19721: PUSH
19722: LD_INT 4
19724: ARRAY
19725: PUSH
19726: FOR_TO
19727: IFFALSE 19837
// begin uc_side = 0 ;
19729: LD_ADDR_OWVAR 20
19733: PUSH
19734: LD_INT 0
19736: ST_TO_ADDR
// uc_nation = nation_nature ;
19737: LD_ADDR_OWVAR 21
19741: PUSH
19742: LD_INT 0
19744: ST_TO_ADDR
// hc_class = 21 ;
19745: LD_ADDR_OWVAR 28
19749: PUSH
19750: LD_INT 21
19752: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
19753: LD_ADDR_OWVAR 31
19757: PUSH
19758: LD_EXP 30
19762: PUSH
19763: LD_INT 1
19765: ARRAY
19766: PUSH
19767: LD_EXP 30
19771: PUSH
19772: LD_INT 2
19774: ARRAY
19775: PUSH
19776: LD_EXP 30
19780: PUSH
19781: LD_INT 3
19783: ARRAY
19784: PUSH
19785: LD_EXP 30
19789: PUSH
19790: LD_INT 4
19792: ARRAY
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
19800: LD_ADDR_OWVAR 35
19804: PUSH
19805: LD_EXP 31
19809: ST_TO_ADDR
// un = CreateHuman ;
19810: LD_ADDR_VAR 0 3
19814: PUSH
19815: CALL_OW 44
19819: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19820: LD_VAR 0 3
19824: PPUSH
19825: LD_INT 29
19827: PPUSH
19828: LD_INT 0
19830: PPUSH
19831: CALL_OW 49
// end ;
19835: GO 19726
19837: POP
19838: POP
// end ; end_of_file
19839: LD_VAR 0 1
19843: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
19844: LD_INT 0
19846: PPUSH
19847: PPUSH
// skirmish := false ;
19848: LD_ADDR_EXP 85
19852: PUSH
19853: LD_INT 0
19855: ST_TO_ADDR
// debug_mc := false ;
19856: LD_ADDR_EXP 86
19860: PUSH
19861: LD_INT 0
19863: ST_TO_ADDR
// mc_bases := [ ] ;
19864: LD_ADDR_EXP 87
19868: PUSH
19869: EMPTY
19870: ST_TO_ADDR
// mc_sides := [ ] ;
19871: LD_ADDR_EXP 113
19875: PUSH
19876: EMPTY
19877: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
19878: LD_ADDR_EXP 88
19882: PUSH
19883: EMPTY
19884: ST_TO_ADDR
// mc_building_repairs := [ ] ;
19885: LD_ADDR_EXP 89
19889: PUSH
19890: EMPTY
19891: ST_TO_ADDR
// mc_need_heal := [ ] ;
19892: LD_ADDR_EXP 90
19896: PUSH
19897: EMPTY
19898: ST_TO_ADDR
// mc_healers := [ ] ;
19899: LD_ADDR_EXP 91
19903: PUSH
19904: EMPTY
19905: ST_TO_ADDR
// mc_build_list := [ ] ;
19906: LD_ADDR_EXP 92
19910: PUSH
19911: EMPTY
19912: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
19913: LD_ADDR_EXP 119
19917: PUSH
19918: EMPTY
19919: ST_TO_ADDR
// mc_builders := [ ] ;
19920: LD_ADDR_EXP 93
19924: PUSH
19925: EMPTY
19926: ST_TO_ADDR
// mc_construct_list := [ ] ;
19927: LD_ADDR_EXP 94
19931: PUSH
19932: EMPTY
19933: ST_TO_ADDR
// mc_turret_list := [ ] ;
19934: LD_ADDR_EXP 95
19938: PUSH
19939: EMPTY
19940: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
19941: LD_ADDR_EXP 96
19945: PUSH
19946: EMPTY
19947: ST_TO_ADDR
// mc_miners := [ ] ;
19948: LD_ADDR_EXP 101
19952: PUSH
19953: EMPTY
19954: ST_TO_ADDR
// mc_mines := [ ] ;
19955: LD_ADDR_EXP 100
19959: PUSH
19960: EMPTY
19961: ST_TO_ADDR
// mc_minefields := [ ] ;
19962: LD_ADDR_EXP 102
19966: PUSH
19967: EMPTY
19968: ST_TO_ADDR
// mc_crates := [ ] ;
19969: LD_ADDR_EXP 103
19973: PUSH
19974: EMPTY
19975: ST_TO_ADDR
// mc_crates_collector := [ ] ;
19976: LD_ADDR_EXP 104
19980: PUSH
19981: EMPTY
19982: ST_TO_ADDR
// mc_crates_area := [ ] ;
19983: LD_ADDR_EXP 105
19987: PUSH
19988: EMPTY
19989: ST_TO_ADDR
// mc_vehicles := [ ] ;
19990: LD_ADDR_EXP 106
19994: PUSH
19995: EMPTY
19996: ST_TO_ADDR
// mc_attack := [ ] ;
19997: LD_ADDR_EXP 107
20001: PUSH
20002: EMPTY
20003: ST_TO_ADDR
// mc_produce := [ ] ;
20004: LD_ADDR_EXP 108
20008: PUSH
20009: EMPTY
20010: ST_TO_ADDR
// mc_defender := [ ] ;
20011: LD_ADDR_EXP 109
20015: PUSH
20016: EMPTY
20017: ST_TO_ADDR
// mc_parking := [ ] ;
20018: LD_ADDR_EXP 111
20022: PUSH
20023: EMPTY
20024: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
20025: LD_ADDR_EXP 97
20029: PUSH
20030: EMPTY
20031: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
20032: LD_ADDR_EXP 99
20036: PUSH
20037: EMPTY
20038: ST_TO_ADDR
// mc_scan := [ ] ;
20039: LD_ADDR_EXP 110
20043: PUSH
20044: EMPTY
20045: ST_TO_ADDR
// mc_scan_area := [ ] ;
20046: LD_ADDR_EXP 112
20050: PUSH
20051: EMPTY
20052: ST_TO_ADDR
// mc_tech := [ ] ;
20053: LD_ADDR_EXP 114
20057: PUSH
20058: EMPTY
20059: ST_TO_ADDR
// mc_class := [ ] ;
20060: LD_ADDR_EXP 128
20064: PUSH
20065: EMPTY
20066: ST_TO_ADDR
// mc_class_case_use := [ ] ;
20067: LD_ADDR_EXP 129
20071: PUSH
20072: EMPTY
20073: ST_TO_ADDR
// end ;
20074: LD_VAR 0 1
20078: RET
// export function MC_Kill ( base ) ; begin
20079: LD_INT 0
20081: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
20082: LD_ADDR_EXP 87
20086: PUSH
20087: LD_EXP 87
20091: PPUSH
20092: LD_VAR 0 1
20096: PPUSH
20097: EMPTY
20098: PPUSH
20099: CALL_OW 1
20103: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
20104: LD_ADDR_EXP 88
20108: PUSH
20109: LD_EXP 88
20113: PPUSH
20114: LD_VAR 0 1
20118: PPUSH
20119: EMPTY
20120: PPUSH
20121: CALL_OW 1
20125: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
20126: LD_ADDR_EXP 89
20130: PUSH
20131: LD_EXP 89
20135: PPUSH
20136: LD_VAR 0 1
20140: PPUSH
20141: EMPTY
20142: PPUSH
20143: CALL_OW 1
20147: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
20148: LD_ADDR_EXP 90
20152: PUSH
20153: LD_EXP 90
20157: PPUSH
20158: LD_VAR 0 1
20162: PPUSH
20163: EMPTY
20164: PPUSH
20165: CALL_OW 1
20169: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
20170: LD_ADDR_EXP 91
20174: PUSH
20175: LD_EXP 91
20179: PPUSH
20180: LD_VAR 0 1
20184: PPUSH
20185: EMPTY
20186: PPUSH
20187: CALL_OW 1
20191: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
20192: LD_ADDR_EXP 92
20196: PUSH
20197: LD_EXP 92
20201: PPUSH
20202: LD_VAR 0 1
20206: PPUSH
20207: EMPTY
20208: PPUSH
20209: CALL_OW 1
20213: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
20214: LD_ADDR_EXP 93
20218: PUSH
20219: LD_EXP 93
20223: PPUSH
20224: LD_VAR 0 1
20228: PPUSH
20229: EMPTY
20230: PPUSH
20231: CALL_OW 1
20235: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
20236: LD_ADDR_EXP 94
20240: PUSH
20241: LD_EXP 94
20245: PPUSH
20246: LD_VAR 0 1
20250: PPUSH
20251: EMPTY
20252: PPUSH
20253: CALL_OW 1
20257: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
20258: LD_ADDR_EXP 95
20262: PUSH
20263: LD_EXP 95
20267: PPUSH
20268: LD_VAR 0 1
20272: PPUSH
20273: EMPTY
20274: PPUSH
20275: CALL_OW 1
20279: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
20280: LD_ADDR_EXP 96
20284: PUSH
20285: LD_EXP 96
20289: PPUSH
20290: LD_VAR 0 1
20294: PPUSH
20295: EMPTY
20296: PPUSH
20297: CALL_OW 1
20301: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
20302: LD_ADDR_EXP 97
20306: PUSH
20307: LD_EXP 97
20311: PPUSH
20312: LD_VAR 0 1
20316: PPUSH
20317: EMPTY
20318: PPUSH
20319: CALL_OW 1
20323: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
20324: LD_ADDR_EXP 98
20328: PUSH
20329: LD_EXP 98
20333: PPUSH
20334: LD_VAR 0 1
20338: PPUSH
20339: LD_INT 0
20341: PPUSH
20342: CALL_OW 1
20346: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
20347: LD_ADDR_EXP 99
20351: PUSH
20352: LD_EXP 99
20356: PPUSH
20357: LD_VAR 0 1
20361: PPUSH
20362: EMPTY
20363: PPUSH
20364: CALL_OW 1
20368: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
20369: LD_ADDR_EXP 100
20373: PUSH
20374: LD_EXP 100
20378: PPUSH
20379: LD_VAR 0 1
20383: PPUSH
20384: EMPTY
20385: PPUSH
20386: CALL_OW 1
20390: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
20391: LD_ADDR_EXP 101
20395: PUSH
20396: LD_EXP 101
20400: PPUSH
20401: LD_VAR 0 1
20405: PPUSH
20406: EMPTY
20407: PPUSH
20408: CALL_OW 1
20412: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
20413: LD_ADDR_EXP 102
20417: PUSH
20418: LD_EXP 102
20422: PPUSH
20423: LD_VAR 0 1
20427: PPUSH
20428: EMPTY
20429: PPUSH
20430: CALL_OW 1
20434: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
20435: LD_ADDR_EXP 103
20439: PUSH
20440: LD_EXP 103
20444: PPUSH
20445: LD_VAR 0 1
20449: PPUSH
20450: EMPTY
20451: PPUSH
20452: CALL_OW 1
20456: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
20457: LD_ADDR_EXP 104
20461: PUSH
20462: LD_EXP 104
20466: PPUSH
20467: LD_VAR 0 1
20471: PPUSH
20472: EMPTY
20473: PPUSH
20474: CALL_OW 1
20478: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
20479: LD_ADDR_EXP 105
20483: PUSH
20484: LD_EXP 105
20488: PPUSH
20489: LD_VAR 0 1
20493: PPUSH
20494: EMPTY
20495: PPUSH
20496: CALL_OW 1
20500: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
20501: LD_ADDR_EXP 106
20505: PUSH
20506: LD_EXP 106
20510: PPUSH
20511: LD_VAR 0 1
20515: PPUSH
20516: EMPTY
20517: PPUSH
20518: CALL_OW 1
20522: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
20523: LD_ADDR_EXP 107
20527: PUSH
20528: LD_EXP 107
20532: PPUSH
20533: LD_VAR 0 1
20537: PPUSH
20538: EMPTY
20539: PPUSH
20540: CALL_OW 1
20544: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
20545: LD_ADDR_EXP 108
20549: PUSH
20550: LD_EXP 108
20554: PPUSH
20555: LD_VAR 0 1
20559: PPUSH
20560: EMPTY
20561: PPUSH
20562: CALL_OW 1
20566: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
20567: LD_ADDR_EXP 109
20571: PUSH
20572: LD_EXP 109
20576: PPUSH
20577: LD_VAR 0 1
20581: PPUSH
20582: EMPTY
20583: PPUSH
20584: CALL_OW 1
20588: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
20589: LD_ADDR_EXP 110
20593: PUSH
20594: LD_EXP 110
20598: PPUSH
20599: LD_VAR 0 1
20603: PPUSH
20604: EMPTY
20605: PPUSH
20606: CALL_OW 1
20610: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
20611: LD_ADDR_EXP 111
20615: PUSH
20616: LD_EXP 111
20620: PPUSH
20621: LD_VAR 0 1
20625: PPUSH
20626: EMPTY
20627: PPUSH
20628: CALL_OW 1
20632: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
20633: LD_ADDR_EXP 112
20637: PUSH
20638: LD_EXP 112
20642: PPUSH
20643: LD_VAR 0 1
20647: PPUSH
20648: EMPTY
20649: PPUSH
20650: CALL_OW 1
20654: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
20655: LD_ADDR_EXP 114
20659: PUSH
20660: LD_EXP 114
20664: PPUSH
20665: LD_VAR 0 1
20669: PPUSH
20670: EMPTY
20671: PPUSH
20672: CALL_OW 1
20676: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
20677: LD_ADDR_EXP 116
20681: PUSH
20682: LD_EXP 116
20686: PPUSH
20687: LD_VAR 0 1
20691: PPUSH
20692: EMPTY
20693: PPUSH
20694: CALL_OW 1
20698: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
20699: LD_ADDR_EXP 117
20703: PUSH
20704: LD_EXP 117
20708: PPUSH
20709: LD_VAR 0 1
20713: PPUSH
20714: EMPTY
20715: PPUSH
20716: CALL_OW 1
20720: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
20721: LD_ADDR_EXP 118
20725: PUSH
20726: LD_EXP 118
20730: PPUSH
20731: LD_VAR 0 1
20735: PPUSH
20736: EMPTY
20737: PPUSH
20738: CALL_OW 1
20742: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
20743: LD_ADDR_EXP 119
20747: PUSH
20748: LD_EXP 119
20752: PPUSH
20753: LD_VAR 0 1
20757: PPUSH
20758: EMPTY
20759: PPUSH
20760: CALL_OW 1
20764: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
20765: LD_ADDR_EXP 120
20769: PUSH
20770: LD_EXP 120
20774: PPUSH
20775: LD_VAR 0 1
20779: PPUSH
20780: EMPTY
20781: PPUSH
20782: CALL_OW 1
20786: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
20787: LD_ADDR_EXP 121
20791: PUSH
20792: LD_EXP 121
20796: PPUSH
20797: LD_VAR 0 1
20801: PPUSH
20802: EMPTY
20803: PPUSH
20804: CALL_OW 1
20808: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
20809: LD_ADDR_EXP 122
20813: PUSH
20814: LD_EXP 122
20818: PPUSH
20819: LD_VAR 0 1
20823: PPUSH
20824: EMPTY
20825: PPUSH
20826: CALL_OW 1
20830: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
20831: LD_ADDR_EXP 123
20835: PUSH
20836: LD_EXP 123
20840: PPUSH
20841: LD_VAR 0 1
20845: PPUSH
20846: EMPTY
20847: PPUSH
20848: CALL_OW 1
20852: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
20853: LD_ADDR_EXP 124
20857: PUSH
20858: LD_EXP 124
20862: PPUSH
20863: LD_VAR 0 1
20867: PPUSH
20868: EMPTY
20869: PPUSH
20870: CALL_OW 1
20874: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
20875: LD_ADDR_EXP 125
20879: PUSH
20880: LD_EXP 125
20884: PPUSH
20885: LD_VAR 0 1
20889: PPUSH
20890: EMPTY
20891: PPUSH
20892: CALL_OW 1
20896: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
20897: LD_ADDR_EXP 126
20901: PUSH
20902: LD_EXP 126
20906: PPUSH
20907: LD_VAR 0 1
20911: PPUSH
20912: EMPTY
20913: PPUSH
20914: CALL_OW 1
20918: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
20919: LD_ADDR_EXP 127
20923: PUSH
20924: LD_EXP 127
20928: PPUSH
20929: LD_VAR 0 1
20933: PPUSH
20934: EMPTY
20935: PPUSH
20936: CALL_OW 1
20940: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
20941: LD_ADDR_EXP 128
20945: PUSH
20946: LD_EXP 128
20950: PPUSH
20951: LD_VAR 0 1
20955: PPUSH
20956: EMPTY
20957: PPUSH
20958: CALL_OW 1
20962: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
20963: LD_ADDR_EXP 129
20967: PUSH
20968: LD_EXP 129
20972: PPUSH
20973: LD_VAR 0 1
20977: PPUSH
20978: LD_INT 0
20980: PPUSH
20981: CALL_OW 1
20985: ST_TO_ADDR
// end ;
20986: LD_VAR 0 2
20990: RET
// export function MC_Add ( side , units ) ; var base ; begin
20991: LD_INT 0
20993: PPUSH
20994: PPUSH
// base := mc_bases + 1 ;
20995: LD_ADDR_VAR 0 4
20999: PUSH
21000: LD_EXP 87
21004: PUSH
21005: LD_INT 1
21007: PLUS
21008: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
21009: LD_ADDR_EXP 113
21013: PUSH
21014: LD_EXP 113
21018: PPUSH
21019: LD_VAR 0 4
21023: PPUSH
21024: LD_VAR 0 1
21028: PPUSH
21029: CALL_OW 1
21033: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
21034: LD_ADDR_EXP 87
21038: PUSH
21039: LD_EXP 87
21043: PPUSH
21044: LD_VAR 0 4
21048: PPUSH
21049: LD_VAR 0 2
21053: PPUSH
21054: CALL_OW 1
21058: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
21059: LD_ADDR_EXP 88
21063: PUSH
21064: LD_EXP 88
21068: PPUSH
21069: LD_VAR 0 4
21073: PPUSH
21074: EMPTY
21075: PPUSH
21076: CALL_OW 1
21080: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
21081: LD_ADDR_EXP 89
21085: PUSH
21086: LD_EXP 89
21090: PPUSH
21091: LD_VAR 0 4
21095: PPUSH
21096: EMPTY
21097: PPUSH
21098: CALL_OW 1
21102: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
21103: LD_ADDR_EXP 90
21107: PUSH
21108: LD_EXP 90
21112: PPUSH
21113: LD_VAR 0 4
21117: PPUSH
21118: EMPTY
21119: PPUSH
21120: CALL_OW 1
21124: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
21125: LD_ADDR_EXP 91
21129: PUSH
21130: LD_EXP 91
21134: PPUSH
21135: LD_VAR 0 4
21139: PPUSH
21140: EMPTY
21141: PPUSH
21142: CALL_OW 1
21146: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
21147: LD_ADDR_EXP 92
21151: PUSH
21152: LD_EXP 92
21156: PPUSH
21157: LD_VAR 0 4
21161: PPUSH
21162: EMPTY
21163: PPUSH
21164: CALL_OW 1
21168: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
21169: LD_ADDR_EXP 93
21173: PUSH
21174: LD_EXP 93
21178: PPUSH
21179: LD_VAR 0 4
21183: PPUSH
21184: EMPTY
21185: PPUSH
21186: CALL_OW 1
21190: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
21191: LD_ADDR_EXP 94
21195: PUSH
21196: LD_EXP 94
21200: PPUSH
21201: LD_VAR 0 4
21205: PPUSH
21206: EMPTY
21207: PPUSH
21208: CALL_OW 1
21212: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
21213: LD_ADDR_EXP 95
21217: PUSH
21218: LD_EXP 95
21222: PPUSH
21223: LD_VAR 0 4
21227: PPUSH
21228: EMPTY
21229: PPUSH
21230: CALL_OW 1
21234: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
21235: LD_ADDR_EXP 96
21239: PUSH
21240: LD_EXP 96
21244: PPUSH
21245: LD_VAR 0 4
21249: PPUSH
21250: EMPTY
21251: PPUSH
21252: CALL_OW 1
21256: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
21257: LD_ADDR_EXP 97
21261: PUSH
21262: LD_EXP 97
21266: PPUSH
21267: LD_VAR 0 4
21271: PPUSH
21272: EMPTY
21273: PPUSH
21274: CALL_OW 1
21278: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
21279: LD_ADDR_EXP 98
21283: PUSH
21284: LD_EXP 98
21288: PPUSH
21289: LD_VAR 0 4
21293: PPUSH
21294: LD_INT 0
21296: PPUSH
21297: CALL_OW 1
21301: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
21302: LD_ADDR_EXP 99
21306: PUSH
21307: LD_EXP 99
21311: PPUSH
21312: LD_VAR 0 4
21316: PPUSH
21317: EMPTY
21318: PPUSH
21319: CALL_OW 1
21323: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
21324: LD_ADDR_EXP 100
21328: PUSH
21329: LD_EXP 100
21333: PPUSH
21334: LD_VAR 0 4
21338: PPUSH
21339: EMPTY
21340: PPUSH
21341: CALL_OW 1
21345: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
21346: LD_ADDR_EXP 101
21350: PUSH
21351: LD_EXP 101
21355: PPUSH
21356: LD_VAR 0 4
21360: PPUSH
21361: EMPTY
21362: PPUSH
21363: CALL_OW 1
21367: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
21368: LD_ADDR_EXP 102
21372: PUSH
21373: LD_EXP 102
21377: PPUSH
21378: LD_VAR 0 4
21382: PPUSH
21383: EMPTY
21384: PPUSH
21385: CALL_OW 1
21389: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
21390: LD_ADDR_EXP 103
21394: PUSH
21395: LD_EXP 103
21399: PPUSH
21400: LD_VAR 0 4
21404: PPUSH
21405: EMPTY
21406: PPUSH
21407: CALL_OW 1
21411: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
21412: LD_ADDR_EXP 104
21416: PUSH
21417: LD_EXP 104
21421: PPUSH
21422: LD_VAR 0 4
21426: PPUSH
21427: EMPTY
21428: PPUSH
21429: CALL_OW 1
21433: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
21434: LD_ADDR_EXP 105
21438: PUSH
21439: LD_EXP 105
21443: PPUSH
21444: LD_VAR 0 4
21448: PPUSH
21449: EMPTY
21450: PPUSH
21451: CALL_OW 1
21455: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
21456: LD_ADDR_EXP 106
21460: PUSH
21461: LD_EXP 106
21465: PPUSH
21466: LD_VAR 0 4
21470: PPUSH
21471: EMPTY
21472: PPUSH
21473: CALL_OW 1
21477: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
21478: LD_ADDR_EXP 107
21482: PUSH
21483: LD_EXP 107
21487: PPUSH
21488: LD_VAR 0 4
21492: PPUSH
21493: EMPTY
21494: PPUSH
21495: CALL_OW 1
21499: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
21500: LD_ADDR_EXP 108
21504: PUSH
21505: LD_EXP 108
21509: PPUSH
21510: LD_VAR 0 4
21514: PPUSH
21515: EMPTY
21516: PPUSH
21517: CALL_OW 1
21521: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
21522: LD_ADDR_EXP 109
21526: PUSH
21527: LD_EXP 109
21531: PPUSH
21532: LD_VAR 0 4
21536: PPUSH
21537: EMPTY
21538: PPUSH
21539: CALL_OW 1
21543: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
21544: LD_ADDR_EXP 110
21548: PUSH
21549: LD_EXP 110
21553: PPUSH
21554: LD_VAR 0 4
21558: PPUSH
21559: EMPTY
21560: PPUSH
21561: CALL_OW 1
21565: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
21566: LD_ADDR_EXP 111
21570: PUSH
21571: LD_EXP 111
21575: PPUSH
21576: LD_VAR 0 4
21580: PPUSH
21581: EMPTY
21582: PPUSH
21583: CALL_OW 1
21587: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
21588: LD_ADDR_EXP 112
21592: PUSH
21593: LD_EXP 112
21597: PPUSH
21598: LD_VAR 0 4
21602: PPUSH
21603: EMPTY
21604: PPUSH
21605: CALL_OW 1
21609: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
21610: LD_ADDR_EXP 114
21614: PUSH
21615: LD_EXP 114
21619: PPUSH
21620: LD_VAR 0 4
21624: PPUSH
21625: EMPTY
21626: PPUSH
21627: CALL_OW 1
21631: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
21632: LD_ADDR_EXP 116
21636: PUSH
21637: LD_EXP 116
21641: PPUSH
21642: LD_VAR 0 4
21646: PPUSH
21647: EMPTY
21648: PPUSH
21649: CALL_OW 1
21653: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
21654: LD_ADDR_EXP 117
21658: PUSH
21659: LD_EXP 117
21663: PPUSH
21664: LD_VAR 0 4
21668: PPUSH
21669: EMPTY
21670: PPUSH
21671: CALL_OW 1
21675: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
21676: LD_ADDR_EXP 118
21680: PUSH
21681: LD_EXP 118
21685: PPUSH
21686: LD_VAR 0 4
21690: PPUSH
21691: EMPTY
21692: PPUSH
21693: CALL_OW 1
21697: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
21698: LD_ADDR_EXP 119
21702: PUSH
21703: LD_EXP 119
21707: PPUSH
21708: LD_VAR 0 4
21712: PPUSH
21713: EMPTY
21714: PPUSH
21715: CALL_OW 1
21719: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
21720: LD_ADDR_EXP 120
21724: PUSH
21725: LD_EXP 120
21729: PPUSH
21730: LD_VAR 0 4
21734: PPUSH
21735: EMPTY
21736: PPUSH
21737: CALL_OW 1
21741: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
21742: LD_ADDR_EXP 121
21746: PUSH
21747: LD_EXP 121
21751: PPUSH
21752: LD_VAR 0 4
21756: PPUSH
21757: EMPTY
21758: PPUSH
21759: CALL_OW 1
21763: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
21764: LD_ADDR_EXP 122
21768: PUSH
21769: LD_EXP 122
21773: PPUSH
21774: LD_VAR 0 4
21778: PPUSH
21779: EMPTY
21780: PPUSH
21781: CALL_OW 1
21785: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
21786: LD_ADDR_EXP 123
21790: PUSH
21791: LD_EXP 123
21795: PPUSH
21796: LD_VAR 0 4
21800: PPUSH
21801: EMPTY
21802: PPUSH
21803: CALL_OW 1
21807: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
21808: LD_ADDR_EXP 124
21812: PUSH
21813: LD_EXP 124
21817: PPUSH
21818: LD_VAR 0 4
21822: PPUSH
21823: EMPTY
21824: PPUSH
21825: CALL_OW 1
21829: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
21830: LD_ADDR_EXP 125
21834: PUSH
21835: LD_EXP 125
21839: PPUSH
21840: LD_VAR 0 4
21844: PPUSH
21845: EMPTY
21846: PPUSH
21847: CALL_OW 1
21851: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
21852: LD_ADDR_EXP 126
21856: PUSH
21857: LD_EXP 126
21861: PPUSH
21862: LD_VAR 0 4
21866: PPUSH
21867: EMPTY
21868: PPUSH
21869: CALL_OW 1
21873: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
21874: LD_ADDR_EXP 127
21878: PUSH
21879: LD_EXP 127
21883: PPUSH
21884: LD_VAR 0 4
21888: PPUSH
21889: EMPTY
21890: PPUSH
21891: CALL_OW 1
21895: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
21896: LD_ADDR_EXP 128
21900: PUSH
21901: LD_EXP 128
21905: PPUSH
21906: LD_VAR 0 4
21910: PPUSH
21911: EMPTY
21912: PPUSH
21913: CALL_OW 1
21917: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
21918: LD_ADDR_EXP 129
21922: PUSH
21923: LD_EXP 129
21927: PPUSH
21928: LD_VAR 0 4
21932: PPUSH
21933: LD_INT 0
21935: PPUSH
21936: CALL_OW 1
21940: ST_TO_ADDR
// result := base ;
21941: LD_ADDR_VAR 0 3
21945: PUSH
21946: LD_VAR 0 4
21950: ST_TO_ADDR
// end ;
21951: LD_VAR 0 3
21955: RET
// export function MC_Start ( ) ; var i ; begin
21956: LD_INT 0
21958: PPUSH
21959: PPUSH
// for i = 1 to mc_bases do
21960: LD_ADDR_VAR 0 2
21964: PUSH
21965: DOUBLE
21966: LD_INT 1
21968: DEC
21969: ST_TO_ADDR
21970: LD_EXP 87
21974: PUSH
21975: FOR_TO
21976: IFFALSE 23053
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
21978: LD_ADDR_EXP 87
21982: PUSH
21983: LD_EXP 87
21987: PPUSH
21988: LD_VAR 0 2
21992: PPUSH
21993: LD_EXP 87
21997: PUSH
21998: LD_VAR 0 2
22002: ARRAY
22003: PUSH
22004: LD_INT 0
22006: DIFF
22007: PPUSH
22008: CALL_OW 1
22012: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
22013: LD_ADDR_EXP 88
22017: PUSH
22018: LD_EXP 88
22022: PPUSH
22023: LD_VAR 0 2
22027: PPUSH
22028: EMPTY
22029: PPUSH
22030: CALL_OW 1
22034: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
22035: LD_ADDR_EXP 89
22039: PUSH
22040: LD_EXP 89
22044: PPUSH
22045: LD_VAR 0 2
22049: PPUSH
22050: EMPTY
22051: PPUSH
22052: CALL_OW 1
22056: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
22057: LD_ADDR_EXP 90
22061: PUSH
22062: LD_EXP 90
22066: PPUSH
22067: LD_VAR 0 2
22071: PPUSH
22072: EMPTY
22073: PPUSH
22074: CALL_OW 1
22078: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
22079: LD_ADDR_EXP 91
22083: PUSH
22084: LD_EXP 91
22088: PPUSH
22089: LD_VAR 0 2
22093: PPUSH
22094: EMPTY
22095: PUSH
22096: EMPTY
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PPUSH
22102: CALL_OW 1
22106: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
22107: LD_ADDR_EXP 92
22111: PUSH
22112: LD_EXP 92
22116: PPUSH
22117: LD_VAR 0 2
22121: PPUSH
22122: EMPTY
22123: PPUSH
22124: CALL_OW 1
22128: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
22129: LD_ADDR_EXP 119
22133: PUSH
22134: LD_EXP 119
22138: PPUSH
22139: LD_VAR 0 2
22143: PPUSH
22144: EMPTY
22145: PPUSH
22146: CALL_OW 1
22150: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
22151: LD_ADDR_EXP 93
22155: PUSH
22156: LD_EXP 93
22160: PPUSH
22161: LD_VAR 0 2
22165: PPUSH
22166: EMPTY
22167: PPUSH
22168: CALL_OW 1
22172: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
22173: LD_ADDR_EXP 94
22177: PUSH
22178: LD_EXP 94
22182: PPUSH
22183: LD_VAR 0 2
22187: PPUSH
22188: EMPTY
22189: PPUSH
22190: CALL_OW 1
22194: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
22195: LD_ADDR_EXP 95
22199: PUSH
22200: LD_EXP 95
22204: PPUSH
22205: LD_VAR 0 2
22209: PPUSH
22210: LD_EXP 87
22214: PUSH
22215: LD_VAR 0 2
22219: ARRAY
22220: PPUSH
22221: LD_INT 2
22223: PUSH
22224: LD_INT 30
22226: PUSH
22227: LD_INT 32
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 30
22236: PUSH
22237: LD_INT 33
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: LIST
22248: PPUSH
22249: CALL_OW 72
22253: PPUSH
22254: CALL_OW 1
22258: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
22259: LD_ADDR_EXP 96
22263: PUSH
22264: LD_EXP 96
22268: PPUSH
22269: LD_VAR 0 2
22273: PPUSH
22274: LD_EXP 87
22278: PUSH
22279: LD_VAR 0 2
22283: ARRAY
22284: PPUSH
22285: LD_INT 2
22287: PUSH
22288: LD_INT 30
22290: PUSH
22291: LD_INT 32
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 30
22300: PUSH
22301: LD_INT 31
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 58
22315: PUSH
22316: EMPTY
22317: LIST
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PPUSH
22323: CALL_OW 72
22327: PPUSH
22328: CALL_OW 1
22332: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
22333: LD_ADDR_EXP 97
22337: PUSH
22338: LD_EXP 97
22342: PPUSH
22343: LD_VAR 0 2
22347: PPUSH
22348: EMPTY
22349: PPUSH
22350: CALL_OW 1
22354: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
22355: LD_ADDR_EXP 101
22359: PUSH
22360: LD_EXP 101
22364: PPUSH
22365: LD_VAR 0 2
22369: PPUSH
22370: EMPTY
22371: PPUSH
22372: CALL_OW 1
22376: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
22377: LD_ADDR_EXP 100
22381: PUSH
22382: LD_EXP 100
22386: PPUSH
22387: LD_VAR 0 2
22391: PPUSH
22392: EMPTY
22393: PPUSH
22394: CALL_OW 1
22398: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
22399: LD_ADDR_EXP 102
22403: PUSH
22404: LD_EXP 102
22408: PPUSH
22409: LD_VAR 0 2
22413: PPUSH
22414: EMPTY
22415: PPUSH
22416: CALL_OW 1
22420: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
22421: LD_ADDR_EXP 103
22425: PUSH
22426: LD_EXP 103
22430: PPUSH
22431: LD_VAR 0 2
22435: PPUSH
22436: EMPTY
22437: PPUSH
22438: CALL_OW 1
22442: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
22443: LD_ADDR_EXP 104
22447: PUSH
22448: LD_EXP 104
22452: PPUSH
22453: LD_VAR 0 2
22457: PPUSH
22458: EMPTY
22459: PPUSH
22460: CALL_OW 1
22464: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
22465: LD_ADDR_EXP 105
22469: PUSH
22470: LD_EXP 105
22474: PPUSH
22475: LD_VAR 0 2
22479: PPUSH
22480: EMPTY
22481: PPUSH
22482: CALL_OW 1
22486: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
22487: LD_ADDR_EXP 106
22491: PUSH
22492: LD_EXP 106
22496: PPUSH
22497: LD_VAR 0 2
22501: PPUSH
22502: EMPTY
22503: PPUSH
22504: CALL_OW 1
22508: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
22509: LD_ADDR_EXP 107
22513: PUSH
22514: LD_EXP 107
22518: PPUSH
22519: LD_VAR 0 2
22523: PPUSH
22524: EMPTY
22525: PPUSH
22526: CALL_OW 1
22530: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
22531: LD_ADDR_EXP 108
22535: PUSH
22536: LD_EXP 108
22540: PPUSH
22541: LD_VAR 0 2
22545: PPUSH
22546: EMPTY
22547: PPUSH
22548: CALL_OW 1
22552: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
22553: LD_ADDR_EXP 109
22557: PUSH
22558: LD_EXP 109
22562: PPUSH
22563: LD_VAR 0 2
22567: PPUSH
22568: EMPTY
22569: PPUSH
22570: CALL_OW 1
22574: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
22575: LD_ADDR_EXP 98
22579: PUSH
22580: LD_EXP 98
22584: PPUSH
22585: LD_VAR 0 2
22589: PPUSH
22590: LD_INT 0
22592: PPUSH
22593: CALL_OW 1
22597: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
22598: LD_ADDR_EXP 111
22602: PUSH
22603: LD_EXP 111
22607: PPUSH
22608: LD_VAR 0 2
22612: PPUSH
22613: LD_INT 0
22615: PPUSH
22616: CALL_OW 1
22620: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
22621: LD_ADDR_EXP 99
22625: PUSH
22626: LD_EXP 99
22630: PPUSH
22631: LD_VAR 0 2
22635: PPUSH
22636: EMPTY
22637: PPUSH
22638: CALL_OW 1
22642: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
22643: LD_ADDR_EXP 110
22647: PUSH
22648: LD_EXP 110
22652: PPUSH
22653: LD_VAR 0 2
22657: PPUSH
22658: LD_INT 0
22660: PPUSH
22661: CALL_OW 1
22665: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
22666: LD_ADDR_EXP 112
22670: PUSH
22671: LD_EXP 112
22675: PPUSH
22676: LD_VAR 0 2
22680: PPUSH
22681: EMPTY
22682: PPUSH
22683: CALL_OW 1
22687: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
22688: LD_ADDR_EXP 115
22692: PUSH
22693: LD_EXP 115
22697: PPUSH
22698: LD_VAR 0 2
22702: PPUSH
22703: LD_INT 0
22705: PPUSH
22706: CALL_OW 1
22710: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
22711: LD_ADDR_EXP 116
22715: PUSH
22716: LD_EXP 116
22720: PPUSH
22721: LD_VAR 0 2
22725: PPUSH
22726: EMPTY
22727: PPUSH
22728: CALL_OW 1
22732: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
22733: LD_ADDR_EXP 117
22737: PUSH
22738: LD_EXP 117
22742: PPUSH
22743: LD_VAR 0 2
22747: PPUSH
22748: EMPTY
22749: PPUSH
22750: CALL_OW 1
22754: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
22755: LD_ADDR_EXP 118
22759: PUSH
22760: LD_EXP 118
22764: PPUSH
22765: LD_VAR 0 2
22769: PPUSH
22770: EMPTY
22771: PPUSH
22772: CALL_OW 1
22776: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
22777: LD_ADDR_EXP 120
22781: PUSH
22782: LD_EXP 120
22786: PPUSH
22787: LD_VAR 0 2
22791: PPUSH
22792: LD_EXP 87
22796: PUSH
22797: LD_VAR 0 2
22801: ARRAY
22802: PPUSH
22803: LD_INT 2
22805: PUSH
22806: LD_INT 30
22808: PUSH
22809: LD_INT 6
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 30
22818: PUSH
22819: LD_INT 7
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 30
22828: PUSH
22829: LD_INT 8
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: PPUSH
22842: CALL_OW 72
22846: PPUSH
22847: CALL_OW 1
22851: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
22852: LD_ADDR_EXP 121
22856: PUSH
22857: LD_EXP 121
22861: PPUSH
22862: LD_VAR 0 2
22866: PPUSH
22867: EMPTY
22868: PPUSH
22869: CALL_OW 1
22873: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
22874: LD_ADDR_EXP 122
22878: PUSH
22879: LD_EXP 122
22883: PPUSH
22884: LD_VAR 0 2
22888: PPUSH
22889: EMPTY
22890: PPUSH
22891: CALL_OW 1
22895: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
22896: LD_ADDR_EXP 123
22900: PUSH
22901: LD_EXP 123
22905: PPUSH
22906: LD_VAR 0 2
22910: PPUSH
22911: EMPTY
22912: PPUSH
22913: CALL_OW 1
22917: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
22918: LD_ADDR_EXP 124
22922: PUSH
22923: LD_EXP 124
22927: PPUSH
22928: LD_VAR 0 2
22932: PPUSH
22933: EMPTY
22934: PPUSH
22935: CALL_OW 1
22939: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
22940: LD_ADDR_EXP 125
22944: PUSH
22945: LD_EXP 125
22949: PPUSH
22950: LD_VAR 0 2
22954: PPUSH
22955: EMPTY
22956: PPUSH
22957: CALL_OW 1
22961: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
22962: LD_ADDR_EXP 126
22966: PUSH
22967: LD_EXP 126
22971: PPUSH
22972: LD_VAR 0 2
22976: PPUSH
22977: EMPTY
22978: PPUSH
22979: CALL_OW 1
22983: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
22984: LD_ADDR_EXP 127
22988: PUSH
22989: LD_EXP 127
22993: PPUSH
22994: LD_VAR 0 2
22998: PPUSH
22999: EMPTY
23000: PPUSH
23001: CALL_OW 1
23005: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
23006: LD_ADDR_EXP 128
23010: PUSH
23011: LD_EXP 128
23015: PPUSH
23016: LD_VAR 0 2
23020: PPUSH
23021: EMPTY
23022: PPUSH
23023: CALL_OW 1
23027: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
23028: LD_ADDR_EXP 129
23032: PUSH
23033: LD_EXP 129
23037: PPUSH
23038: LD_VAR 0 2
23042: PPUSH
23043: LD_INT 0
23045: PPUSH
23046: CALL_OW 1
23050: ST_TO_ADDR
// end ;
23051: GO 21975
23053: POP
23054: POP
// MC_InitSides ( ) ;
23055: CALL 23341 0 0
// MC_InitResearch ( ) ;
23059: CALL 23080 0 0
// CustomInitMacro ( ) ;
23063: CALL 9087 0 0
// skirmish := true ;
23067: LD_ADDR_EXP 85
23071: PUSH
23072: LD_INT 1
23074: ST_TO_ADDR
// end ;
23075: LD_VAR 0 1
23079: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
23080: LD_INT 0
23082: PPUSH
23083: PPUSH
23084: PPUSH
23085: PPUSH
23086: PPUSH
23087: PPUSH
// if not mc_bases then
23088: LD_EXP 87
23092: NOT
23093: IFFALSE 23097
// exit ;
23095: GO 23336
// for i = 1 to 8 do
23097: LD_ADDR_VAR 0 2
23101: PUSH
23102: DOUBLE
23103: LD_INT 1
23105: DEC
23106: ST_TO_ADDR
23107: LD_INT 8
23109: PUSH
23110: FOR_TO
23111: IFFALSE 23137
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
23113: LD_ADDR_EXP 114
23117: PUSH
23118: LD_EXP 114
23122: PPUSH
23123: LD_VAR 0 2
23127: PPUSH
23128: EMPTY
23129: PPUSH
23130: CALL_OW 1
23134: ST_TO_ADDR
23135: GO 23110
23137: POP
23138: POP
// tmp := [ ] ;
23139: LD_ADDR_VAR 0 5
23143: PUSH
23144: EMPTY
23145: ST_TO_ADDR
// for i = 1 to mc_sides do
23146: LD_ADDR_VAR 0 2
23150: PUSH
23151: DOUBLE
23152: LD_INT 1
23154: DEC
23155: ST_TO_ADDR
23156: LD_EXP 113
23160: PUSH
23161: FOR_TO
23162: IFFALSE 23220
// if not mc_sides [ i ] in tmp then
23164: LD_EXP 113
23168: PUSH
23169: LD_VAR 0 2
23173: ARRAY
23174: PUSH
23175: LD_VAR 0 5
23179: IN
23180: NOT
23181: IFFALSE 23218
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
23183: LD_ADDR_VAR 0 5
23187: PUSH
23188: LD_VAR 0 5
23192: PPUSH
23193: LD_VAR 0 5
23197: PUSH
23198: LD_INT 1
23200: PLUS
23201: PPUSH
23202: LD_EXP 113
23206: PUSH
23207: LD_VAR 0 2
23211: ARRAY
23212: PPUSH
23213: CALL_OW 2
23217: ST_TO_ADDR
23218: GO 23161
23220: POP
23221: POP
// if not tmp then
23222: LD_VAR 0 5
23226: NOT
23227: IFFALSE 23231
// exit ;
23229: GO 23336
// for j in tmp do
23231: LD_ADDR_VAR 0 3
23235: PUSH
23236: LD_VAR 0 5
23240: PUSH
23241: FOR_IN
23242: IFFALSE 23334
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
23244: LD_ADDR_VAR 0 6
23248: PUSH
23249: LD_INT 22
23251: PUSH
23252: LD_VAR 0 3
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PPUSH
23261: CALL_OW 69
23265: ST_TO_ADDR
// if not un then
23266: LD_VAR 0 6
23270: NOT
23271: IFFALSE 23275
// continue ;
23273: GO 23241
// nation := GetNation ( un [ 1 ] ) ;
23275: LD_ADDR_VAR 0 4
23279: PUSH
23280: LD_VAR 0 6
23284: PUSH
23285: LD_INT 1
23287: ARRAY
23288: PPUSH
23289: CALL_OW 248
23293: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
23294: LD_ADDR_EXP 114
23298: PUSH
23299: LD_EXP 114
23303: PPUSH
23304: LD_VAR 0 3
23308: PPUSH
23309: LD_VAR 0 3
23313: PPUSH
23314: LD_VAR 0 4
23318: PPUSH
23319: LD_INT 1
23321: PPUSH
23322: CALL 45197 0 3
23326: PPUSH
23327: CALL_OW 1
23331: ST_TO_ADDR
// end ;
23332: GO 23241
23334: POP
23335: POP
// end ;
23336: LD_VAR 0 1
23340: RET
// export function MC_InitSides ( ) ; var i ; begin
23341: LD_INT 0
23343: PPUSH
23344: PPUSH
// if not mc_bases then
23345: LD_EXP 87
23349: NOT
23350: IFFALSE 23354
// exit ;
23352: GO 23428
// for i = 1 to mc_bases do
23354: LD_ADDR_VAR 0 2
23358: PUSH
23359: DOUBLE
23360: LD_INT 1
23362: DEC
23363: ST_TO_ADDR
23364: LD_EXP 87
23368: PUSH
23369: FOR_TO
23370: IFFALSE 23426
// if mc_bases [ i ] then
23372: LD_EXP 87
23376: PUSH
23377: LD_VAR 0 2
23381: ARRAY
23382: IFFALSE 23424
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
23384: LD_ADDR_EXP 113
23388: PUSH
23389: LD_EXP 113
23393: PPUSH
23394: LD_VAR 0 2
23398: PPUSH
23399: LD_EXP 87
23403: PUSH
23404: LD_VAR 0 2
23408: ARRAY
23409: PUSH
23410: LD_INT 1
23412: ARRAY
23413: PPUSH
23414: CALL_OW 255
23418: PPUSH
23419: CALL_OW 1
23423: ST_TO_ADDR
23424: GO 23369
23426: POP
23427: POP
// end ;
23428: LD_VAR 0 1
23432: RET
// every 0 0$01 trigger skirmish do
23433: LD_EXP 85
23437: IFFALSE 23591
23439: GO 23441
23441: DISABLE
// begin enable ;
23442: ENABLE
// MC_CheckBuildings ( ) ;
23443: CALL 28089 0 0
// MC_CheckPeopleLife ( ) ;
23447: CALL 28214 0 0
// RaiseSailEvent ( 100 ) ;
23451: LD_INT 100
23453: PPUSH
23454: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
23458: LD_INT 103
23460: PPUSH
23461: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
23465: LD_INT 104
23467: PPUSH
23468: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
23472: LD_INT 105
23474: PPUSH
23475: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
23479: LD_INT 106
23481: PPUSH
23482: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
23486: LD_INT 107
23488: PPUSH
23489: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
23493: LD_INT 108
23495: PPUSH
23496: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
23500: LD_INT 109
23502: PPUSH
23503: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
23507: LD_INT 110
23509: PPUSH
23510: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
23514: LD_INT 111
23516: PPUSH
23517: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
23521: LD_INT 112
23523: PPUSH
23524: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
23528: LD_INT 113
23530: PPUSH
23531: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
23535: LD_INT 120
23537: PPUSH
23538: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
23542: LD_INT 121
23544: PPUSH
23545: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
23549: LD_INT 122
23551: PPUSH
23552: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
23556: LD_INT 123
23558: PPUSH
23559: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
23563: LD_INT 124
23565: PPUSH
23566: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
23570: LD_INT 125
23572: PPUSH
23573: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
23577: LD_INT 126
23579: PPUSH
23580: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
23584: LD_INT 200
23586: PPUSH
23587: CALL_OW 427
// end ;
23591: END
// on SailEvent ( event ) do begin if event < 100 then
23592: LD_VAR 0 1
23596: PUSH
23597: LD_INT 100
23599: LESS
23600: IFFALSE 23611
// CustomEvent ( event ) ;
23602: LD_VAR 0 1
23606: PPUSH
23607: CALL 11004 0 1
// if event = 100 then
23611: LD_VAR 0 1
23615: PUSH
23616: LD_INT 100
23618: EQUAL
23619: IFFALSE 23625
// MC_ClassManager ( ) ;
23621: CALL 24017 0 0
// if event = 101 then
23625: LD_VAR 0 1
23629: PUSH
23630: LD_INT 101
23632: EQUAL
23633: IFFALSE 23639
// MC_RepairBuildings ( ) ;
23635: CALL 28799 0 0
// if event = 102 then
23639: LD_VAR 0 1
23643: PUSH
23644: LD_INT 102
23646: EQUAL
23647: IFFALSE 23653
// MC_Heal ( ) ;
23649: CALL 29658 0 0
// if event = 103 then
23653: LD_VAR 0 1
23657: PUSH
23658: LD_INT 103
23660: EQUAL
23661: IFFALSE 23667
// MC_Build ( ) ;
23663: CALL 30080 0 0
// if event = 104 then
23667: LD_VAR 0 1
23671: PUSH
23672: LD_INT 104
23674: EQUAL
23675: IFFALSE 23681
// MC_TurretWeapon ( ) ;
23677: CALL 31693 0 0
// if event = 105 then
23681: LD_VAR 0 1
23685: PUSH
23686: LD_INT 105
23688: EQUAL
23689: IFFALSE 23695
// MC_BuildUpgrade ( ) ;
23691: CALL 31244 0 0
// if event = 106 then
23695: LD_VAR 0 1
23699: PUSH
23700: LD_INT 106
23702: EQUAL
23703: IFFALSE 23709
// MC_PlantMines ( ) ;
23705: CALL 32123 0 0
// if event = 107 then
23709: LD_VAR 0 1
23713: PUSH
23714: LD_INT 107
23716: EQUAL
23717: IFFALSE 23723
// MC_CollectCrates ( ) ;
23719: CALL 32921 0 0
// if event = 108 then
23723: LD_VAR 0 1
23727: PUSH
23728: LD_INT 108
23730: EQUAL
23731: IFFALSE 23737
// MC_LinkRemoteControl ( ) ;
23733: CALL 34697 0 0
// if event = 109 then
23737: LD_VAR 0 1
23741: PUSH
23742: LD_INT 109
23744: EQUAL
23745: IFFALSE 23751
// MC_ProduceVehicle ( ) ;
23747: CALL 34878 0 0
// if event = 110 then
23751: LD_VAR 0 1
23755: PUSH
23756: LD_INT 110
23758: EQUAL
23759: IFFALSE 23765
// MC_SendAttack ( ) ;
23761: CALL 35344 0 0
// if event = 111 then
23765: LD_VAR 0 1
23769: PUSH
23770: LD_INT 111
23772: EQUAL
23773: IFFALSE 23779
// MC_Defend ( ) ;
23775: CALL 35452 0 0
// if event = 112 then
23779: LD_VAR 0 1
23783: PUSH
23784: LD_INT 112
23786: EQUAL
23787: IFFALSE 23793
// MC_Research ( ) ;
23789: CALL 36057 0 0
// if event = 113 then
23793: LD_VAR 0 1
23797: PUSH
23798: LD_INT 113
23800: EQUAL
23801: IFFALSE 23807
// MC_MinesTrigger ( ) ;
23803: CALL 37171 0 0
// if event = 120 then
23807: LD_VAR 0 1
23811: PUSH
23812: LD_INT 120
23814: EQUAL
23815: IFFALSE 23821
// MC_RepairVehicle ( ) ;
23817: CALL 37270 0 0
// if event = 121 then
23821: LD_VAR 0 1
23825: PUSH
23826: LD_INT 121
23828: EQUAL
23829: IFFALSE 23835
// MC_TameApe ( ) ;
23831: CALL 38000 0 0
// if event = 122 then
23835: LD_VAR 0 1
23839: PUSH
23840: LD_INT 122
23842: EQUAL
23843: IFFALSE 23849
// MC_ChangeApeClass ( ) ;
23845: CALL 38829 0 0
// if event = 123 then
23849: LD_VAR 0 1
23853: PUSH
23854: LD_INT 123
23856: EQUAL
23857: IFFALSE 23863
// MC_Bazooka ( ) ;
23859: CALL 39479 0 0
// if event = 124 then
23863: LD_VAR 0 1
23867: PUSH
23868: LD_INT 124
23870: EQUAL
23871: IFFALSE 23877
// MC_TeleportExit ( ) ;
23873: CALL 39677 0 0
// if event = 125 then
23877: LD_VAR 0 1
23881: PUSH
23882: LD_INT 125
23884: EQUAL
23885: IFFALSE 23891
// MC_Deposits ( ) ;
23887: CALL 40324 0 0
// if event = 126 then
23891: LD_VAR 0 1
23895: PUSH
23896: LD_INT 126
23898: EQUAL
23899: IFFALSE 23905
// MC_RemoteDriver ( ) ;
23901: CALL 40949 0 0
// if event = 200 then
23905: LD_VAR 0 1
23909: PUSH
23910: LD_INT 200
23912: EQUAL
23913: IFFALSE 23919
// MC_Idle ( ) ;
23915: CALL 42898 0 0
// end ;
23919: PPOPN 1
23921: END
// export function MC_Reset ( base , tag ) ; var i ; begin
23922: LD_INT 0
23924: PPUSH
23925: PPUSH
// if not mc_bases [ base ] or not tag then
23926: LD_EXP 87
23930: PUSH
23931: LD_VAR 0 1
23935: ARRAY
23936: NOT
23937: PUSH
23938: LD_VAR 0 2
23942: NOT
23943: OR
23944: IFFALSE 23948
// exit ;
23946: GO 24012
// for i in mc_bases [ base ] union mc_ape [ base ] do
23948: LD_ADDR_VAR 0 4
23952: PUSH
23953: LD_EXP 87
23957: PUSH
23958: LD_VAR 0 1
23962: ARRAY
23963: PUSH
23964: LD_EXP 116
23968: PUSH
23969: LD_VAR 0 1
23973: ARRAY
23974: UNION
23975: PUSH
23976: FOR_IN
23977: IFFALSE 24010
// if GetTag ( i ) = tag then
23979: LD_VAR 0 4
23983: PPUSH
23984: CALL_OW 110
23988: PUSH
23989: LD_VAR 0 2
23993: EQUAL
23994: IFFALSE 24008
// SetTag ( i , 0 ) ;
23996: LD_VAR 0 4
24000: PPUSH
24001: LD_INT 0
24003: PPUSH
24004: CALL_OW 109
24008: GO 23976
24010: POP
24011: POP
// end ;
24012: LD_VAR 0 3
24016: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
24017: LD_INT 0
24019: PPUSH
24020: PPUSH
24021: PPUSH
24022: PPUSH
24023: PPUSH
24024: PPUSH
24025: PPUSH
24026: PPUSH
// if not mc_bases then
24027: LD_EXP 87
24031: NOT
24032: IFFALSE 24036
// exit ;
24034: GO 24494
// for i = 1 to mc_bases do
24036: LD_ADDR_VAR 0 2
24040: PUSH
24041: DOUBLE
24042: LD_INT 1
24044: DEC
24045: ST_TO_ADDR
24046: LD_EXP 87
24050: PUSH
24051: FOR_TO
24052: IFFALSE 24492
// begin tmp := MC_ClassCheckReq ( i ) ;
24054: LD_ADDR_VAR 0 4
24058: PUSH
24059: LD_VAR 0 2
24063: PPUSH
24064: CALL 24499 0 1
24068: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
24069: LD_ADDR_EXP 128
24073: PUSH
24074: LD_EXP 128
24078: PPUSH
24079: LD_VAR 0 2
24083: PPUSH
24084: LD_VAR 0 4
24088: PPUSH
24089: CALL_OW 1
24093: ST_TO_ADDR
// if not tmp then
24094: LD_VAR 0 4
24098: NOT
24099: IFFALSE 24103
// continue ;
24101: GO 24051
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
24103: LD_ADDR_VAR 0 6
24107: PUSH
24108: LD_EXP 87
24112: PUSH
24113: LD_VAR 0 2
24117: ARRAY
24118: PPUSH
24119: LD_INT 2
24121: PUSH
24122: LD_INT 30
24124: PUSH
24125: LD_INT 4
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 30
24134: PUSH
24135: LD_INT 5
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: LIST
24146: PPUSH
24147: CALL_OW 72
24151: PUSH
24152: LD_EXP 87
24156: PUSH
24157: LD_VAR 0 2
24161: ARRAY
24162: PPUSH
24163: LD_INT 2
24165: PUSH
24166: LD_INT 30
24168: PUSH
24169: LD_INT 0
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 30
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: LIST
24190: PPUSH
24191: CALL_OW 72
24195: PUSH
24196: LD_EXP 87
24200: PUSH
24201: LD_VAR 0 2
24205: ARRAY
24206: PPUSH
24207: LD_INT 30
24209: PUSH
24210: LD_INT 3
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PPUSH
24217: CALL_OW 72
24221: PUSH
24222: LD_EXP 87
24226: PUSH
24227: LD_VAR 0 2
24231: ARRAY
24232: PPUSH
24233: LD_INT 2
24235: PUSH
24236: LD_INT 30
24238: PUSH
24239: LD_INT 6
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 30
24248: PUSH
24249: LD_INT 7
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 30
24258: PUSH
24259: LD_INT 8
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: PPUSH
24272: CALL_OW 72
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: ST_TO_ADDR
// for j = 1 to 4 do
24283: LD_ADDR_VAR 0 3
24287: PUSH
24288: DOUBLE
24289: LD_INT 1
24291: DEC
24292: ST_TO_ADDR
24293: LD_INT 4
24295: PUSH
24296: FOR_TO
24297: IFFALSE 24488
// begin if not tmp [ j ] then
24299: LD_VAR 0 4
24303: PUSH
24304: LD_VAR 0 3
24308: ARRAY
24309: NOT
24310: IFFALSE 24314
// continue ;
24312: GO 24296
// for p in tmp [ j ] do
24314: LD_ADDR_VAR 0 5
24318: PUSH
24319: LD_VAR 0 4
24323: PUSH
24324: LD_VAR 0 3
24328: ARRAY
24329: PUSH
24330: FOR_IN
24331: IFFALSE 24484
// begin if not b [ j ] then
24333: LD_VAR 0 6
24337: PUSH
24338: LD_VAR 0 3
24342: ARRAY
24343: NOT
24344: IFFALSE 24348
// break ;
24346: GO 24484
// e := 0 ;
24348: LD_ADDR_VAR 0 7
24352: PUSH
24353: LD_INT 0
24355: ST_TO_ADDR
// for k in b [ j ] do
24356: LD_ADDR_VAR 0 8
24360: PUSH
24361: LD_VAR 0 6
24365: PUSH
24366: LD_VAR 0 3
24370: ARRAY
24371: PUSH
24372: FOR_IN
24373: IFFALSE 24400
// if IsNotFull ( k ) then
24375: LD_VAR 0 8
24379: PPUSH
24380: CALL 47346 0 1
24384: IFFALSE 24398
// begin e := k ;
24386: LD_ADDR_VAR 0 7
24390: PUSH
24391: LD_VAR 0 8
24395: ST_TO_ADDR
// break ;
24396: GO 24400
// end ;
24398: GO 24372
24400: POP
24401: POP
// if e and not UnitGoingToBuilding ( p , e ) then
24402: LD_VAR 0 7
24406: PUSH
24407: LD_VAR 0 5
24411: PPUSH
24412: LD_VAR 0 7
24416: PPUSH
24417: CALL 79766 0 2
24421: NOT
24422: AND
24423: IFFALSE 24482
// begin if IsInUnit ( p ) then
24425: LD_VAR 0 5
24429: PPUSH
24430: CALL_OW 310
24434: IFFALSE 24445
// ComExitBuilding ( p ) ;
24436: LD_VAR 0 5
24440: PPUSH
24441: CALL_OW 122
// ComEnterUnit ( p , e ) ;
24445: LD_VAR 0 5
24449: PPUSH
24450: LD_VAR 0 7
24454: PPUSH
24455: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
24459: LD_VAR 0 5
24463: PPUSH
24464: LD_VAR 0 3
24468: PPUSH
24469: CALL_OW 183
// AddComExitBuilding ( p ) ;
24473: LD_VAR 0 5
24477: PPUSH
24478: CALL_OW 182
// end ; end ;
24482: GO 24330
24484: POP
24485: POP
// end ;
24486: GO 24296
24488: POP
24489: POP
// end ;
24490: GO 24051
24492: POP
24493: POP
// end ;
24494: LD_VAR 0 1
24498: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
24499: LD_INT 0
24501: PPUSH
24502: PPUSH
24503: PPUSH
24504: PPUSH
24505: PPUSH
24506: PPUSH
24507: PPUSH
24508: PPUSH
24509: PPUSH
24510: PPUSH
24511: PPUSH
24512: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
24513: LD_VAR 0 1
24517: NOT
24518: PUSH
24519: LD_EXP 87
24523: PUSH
24524: LD_VAR 0 1
24528: ARRAY
24529: NOT
24530: OR
24531: PUSH
24532: LD_EXP 87
24536: PUSH
24537: LD_VAR 0 1
24541: ARRAY
24542: PPUSH
24543: LD_INT 2
24545: PUSH
24546: LD_INT 30
24548: PUSH
24549: LD_INT 0
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 30
24558: PUSH
24559: LD_INT 1
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: LIST
24570: PPUSH
24571: CALL_OW 72
24575: NOT
24576: OR
24577: IFFALSE 24581
// exit ;
24579: GO 28084
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
24581: LD_ADDR_VAR 0 4
24585: PUSH
24586: LD_EXP 87
24590: PUSH
24591: LD_VAR 0 1
24595: ARRAY
24596: PPUSH
24597: LD_INT 2
24599: PUSH
24600: LD_INT 25
24602: PUSH
24603: LD_INT 1
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 25
24612: PUSH
24613: LD_INT 2
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 25
24622: PUSH
24623: LD_INT 3
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 25
24632: PUSH
24633: LD_INT 4
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 25
24642: PUSH
24643: LD_INT 5
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 25
24652: PUSH
24653: LD_INT 8
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 25
24662: PUSH
24663: LD_INT 9
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: PPUSH
24680: CALL_OW 72
24684: ST_TO_ADDR
// if not tmp then
24685: LD_VAR 0 4
24689: NOT
24690: IFFALSE 24694
// exit ;
24692: GO 28084
// for i in tmp do
24694: LD_ADDR_VAR 0 3
24698: PUSH
24699: LD_VAR 0 4
24703: PUSH
24704: FOR_IN
24705: IFFALSE 24736
// if GetTag ( i ) then
24707: LD_VAR 0 3
24711: PPUSH
24712: CALL_OW 110
24716: IFFALSE 24734
// tmp := tmp diff i ;
24718: LD_ADDR_VAR 0 4
24722: PUSH
24723: LD_VAR 0 4
24727: PUSH
24728: LD_VAR 0 3
24732: DIFF
24733: ST_TO_ADDR
24734: GO 24704
24736: POP
24737: POP
// if not tmp then
24738: LD_VAR 0 4
24742: NOT
24743: IFFALSE 24747
// exit ;
24745: GO 28084
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
24747: LD_ADDR_VAR 0 5
24751: PUSH
24752: LD_EXP 87
24756: PUSH
24757: LD_VAR 0 1
24761: ARRAY
24762: PPUSH
24763: LD_INT 2
24765: PUSH
24766: LD_INT 25
24768: PUSH
24769: LD_INT 1
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 25
24778: PUSH
24779: LD_INT 5
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: LD_INT 25
24788: PUSH
24789: LD_INT 8
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 25
24798: PUSH
24799: LD_INT 9
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: PPUSH
24813: CALL_OW 72
24817: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
24818: LD_ADDR_VAR 0 6
24822: PUSH
24823: LD_EXP 87
24827: PUSH
24828: LD_VAR 0 1
24832: ARRAY
24833: PPUSH
24834: LD_INT 25
24836: PUSH
24837: LD_INT 2
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PPUSH
24844: CALL_OW 72
24848: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
24849: LD_ADDR_VAR 0 7
24853: PUSH
24854: LD_EXP 87
24858: PUSH
24859: LD_VAR 0 1
24863: ARRAY
24864: PPUSH
24865: LD_INT 25
24867: PUSH
24868: LD_INT 3
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PPUSH
24875: CALL_OW 72
24879: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
24880: LD_ADDR_VAR 0 8
24884: PUSH
24885: LD_EXP 87
24889: PUSH
24890: LD_VAR 0 1
24894: ARRAY
24895: PPUSH
24896: LD_INT 25
24898: PUSH
24899: LD_INT 4
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 24
24908: PUSH
24909: LD_INT 251
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PPUSH
24920: CALL_OW 72
24924: ST_TO_ADDR
// if mc_scan [ base ] then
24925: LD_EXP 110
24929: PUSH
24930: LD_VAR 0 1
24934: ARRAY
24935: IFFALSE 25396
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
24937: LD_ADDR_EXP 129
24941: PUSH
24942: LD_EXP 129
24946: PPUSH
24947: LD_VAR 0 1
24951: PPUSH
24952: LD_INT 4
24954: PPUSH
24955: CALL_OW 1
24959: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
24960: LD_ADDR_VAR 0 12
24964: PUSH
24965: LD_EXP 87
24969: PUSH
24970: LD_VAR 0 1
24974: ARRAY
24975: PPUSH
24976: LD_INT 2
24978: PUSH
24979: LD_INT 30
24981: PUSH
24982: LD_INT 4
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 30
24991: PUSH
24992: LD_INT 5
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: LIST
25003: PPUSH
25004: CALL_OW 72
25008: ST_TO_ADDR
// if not b then
25009: LD_VAR 0 12
25013: NOT
25014: IFFALSE 25018
// exit ;
25016: GO 28084
// p := [ ] ;
25018: LD_ADDR_VAR 0 11
25022: PUSH
25023: EMPTY
25024: ST_TO_ADDR
// if sci >= 2 then
25025: LD_VAR 0 8
25029: PUSH
25030: LD_INT 2
25032: GREATEREQUAL
25033: IFFALSE 25064
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
25035: LD_ADDR_VAR 0 8
25039: PUSH
25040: LD_VAR 0 8
25044: PUSH
25045: LD_INT 1
25047: ARRAY
25048: PUSH
25049: LD_VAR 0 8
25053: PUSH
25054: LD_INT 2
25056: ARRAY
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: ST_TO_ADDR
25062: GO 25125
// if sci = 1 then
25064: LD_VAR 0 8
25068: PUSH
25069: LD_INT 1
25071: EQUAL
25072: IFFALSE 25093
// sci := [ sci [ 1 ] ] else
25074: LD_ADDR_VAR 0 8
25078: PUSH
25079: LD_VAR 0 8
25083: PUSH
25084: LD_INT 1
25086: ARRAY
25087: PUSH
25088: EMPTY
25089: LIST
25090: ST_TO_ADDR
25091: GO 25125
// if sci = 0 then
25093: LD_VAR 0 8
25097: PUSH
25098: LD_INT 0
25100: EQUAL
25101: IFFALSE 25125
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
25103: LD_ADDR_VAR 0 11
25107: PUSH
25108: LD_VAR 0 4
25112: PPUSH
25113: LD_INT 4
25115: PPUSH
25116: CALL 79629 0 2
25120: PUSH
25121: LD_INT 1
25123: ARRAY
25124: ST_TO_ADDR
// if eng > 4 then
25125: LD_VAR 0 6
25129: PUSH
25130: LD_INT 4
25132: GREATER
25133: IFFALSE 25179
// for i = eng downto 4 do
25135: LD_ADDR_VAR 0 3
25139: PUSH
25140: DOUBLE
25141: LD_VAR 0 6
25145: INC
25146: ST_TO_ADDR
25147: LD_INT 4
25149: PUSH
25150: FOR_DOWNTO
25151: IFFALSE 25177
// eng := eng diff eng [ i ] ;
25153: LD_ADDR_VAR 0 6
25157: PUSH
25158: LD_VAR 0 6
25162: PUSH
25163: LD_VAR 0 6
25167: PUSH
25168: LD_VAR 0 3
25172: ARRAY
25173: DIFF
25174: ST_TO_ADDR
25175: GO 25150
25177: POP
25178: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
25179: LD_ADDR_VAR 0 4
25183: PUSH
25184: LD_VAR 0 4
25188: PUSH
25189: LD_VAR 0 5
25193: PUSH
25194: LD_VAR 0 6
25198: UNION
25199: PUSH
25200: LD_VAR 0 7
25204: UNION
25205: PUSH
25206: LD_VAR 0 8
25210: UNION
25211: DIFF
25212: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
25213: LD_ADDR_VAR 0 13
25217: PUSH
25218: LD_EXP 87
25222: PUSH
25223: LD_VAR 0 1
25227: ARRAY
25228: PPUSH
25229: LD_INT 2
25231: PUSH
25232: LD_INT 30
25234: PUSH
25235: LD_INT 32
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 30
25244: PUSH
25245: LD_INT 31
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: LIST
25256: PPUSH
25257: CALL_OW 72
25261: PUSH
25262: LD_EXP 87
25266: PUSH
25267: LD_VAR 0 1
25271: ARRAY
25272: PPUSH
25273: LD_INT 2
25275: PUSH
25276: LD_INT 30
25278: PUSH
25279: LD_INT 4
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 30
25288: PUSH
25289: LD_INT 5
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: LIST
25300: PPUSH
25301: CALL_OW 72
25305: PUSH
25306: LD_INT 6
25308: MUL
25309: PLUS
25310: ST_TO_ADDR
// if bcount < tmp then
25311: LD_VAR 0 13
25315: PUSH
25316: LD_VAR 0 4
25320: LESS
25321: IFFALSE 25367
// for i = tmp downto bcount do
25323: LD_ADDR_VAR 0 3
25327: PUSH
25328: DOUBLE
25329: LD_VAR 0 4
25333: INC
25334: ST_TO_ADDR
25335: LD_VAR 0 13
25339: PUSH
25340: FOR_DOWNTO
25341: IFFALSE 25365
// tmp := Delete ( tmp , tmp ) ;
25343: LD_ADDR_VAR 0 4
25347: PUSH
25348: LD_VAR 0 4
25352: PPUSH
25353: LD_VAR 0 4
25357: PPUSH
25358: CALL_OW 3
25362: ST_TO_ADDR
25363: GO 25340
25365: POP
25366: POP
// result := [ tmp , 0 , 0 , p ] ;
25367: LD_ADDR_VAR 0 2
25371: PUSH
25372: LD_VAR 0 4
25376: PUSH
25377: LD_INT 0
25379: PUSH
25380: LD_INT 0
25382: PUSH
25383: LD_VAR 0 11
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: ST_TO_ADDR
// exit ;
25394: GO 28084
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
25396: LD_EXP 87
25400: PUSH
25401: LD_VAR 0 1
25405: ARRAY
25406: PPUSH
25407: LD_INT 2
25409: PUSH
25410: LD_INT 30
25412: PUSH
25413: LD_INT 6
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 30
25422: PUSH
25423: LD_INT 7
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 30
25432: PUSH
25433: LD_INT 8
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: PPUSH
25446: CALL_OW 72
25450: NOT
25451: PUSH
25452: LD_EXP 87
25456: PUSH
25457: LD_VAR 0 1
25461: ARRAY
25462: PPUSH
25463: LD_INT 30
25465: PUSH
25466: LD_INT 3
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PPUSH
25473: CALL_OW 72
25477: NOT
25478: AND
25479: IFFALSE 25551
// begin if eng = tmp then
25481: LD_VAR 0 6
25485: PUSH
25486: LD_VAR 0 4
25490: EQUAL
25491: IFFALSE 25495
// exit ;
25493: GO 28084
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
25495: LD_ADDR_EXP 129
25499: PUSH
25500: LD_EXP 129
25504: PPUSH
25505: LD_VAR 0 1
25509: PPUSH
25510: LD_INT 1
25512: PPUSH
25513: CALL_OW 1
25517: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
25518: LD_ADDR_VAR 0 2
25522: PUSH
25523: LD_INT 0
25525: PUSH
25526: LD_VAR 0 4
25530: PUSH
25531: LD_VAR 0 6
25535: DIFF
25536: PUSH
25537: LD_INT 0
25539: PUSH
25540: LD_INT 0
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: ST_TO_ADDR
// exit ;
25549: GO 28084
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
25551: LD_EXP 114
25555: PUSH
25556: LD_EXP 113
25560: PUSH
25561: LD_VAR 0 1
25565: ARRAY
25566: ARRAY
25567: PUSH
25568: LD_EXP 87
25572: PUSH
25573: LD_VAR 0 1
25577: ARRAY
25578: PPUSH
25579: LD_INT 2
25581: PUSH
25582: LD_INT 30
25584: PUSH
25585: LD_INT 6
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 30
25594: PUSH
25595: LD_INT 7
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 30
25604: PUSH
25605: LD_INT 8
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: PPUSH
25618: CALL_OW 72
25622: AND
25623: PUSH
25624: LD_EXP 87
25628: PUSH
25629: LD_VAR 0 1
25633: ARRAY
25634: PPUSH
25635: LD_INT 30
25637: PUSH
25638: LD_INT 3
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PPUSH
25645: CALL_OW 72
25649: NOT
25650: AND
25651: IFFALSE 25865
// begin if sci >= 6 then
25653: LD_VAR 0 8
25657: PUSH
25658: LD_INT 6
25660: GREATEREQUAL
25661: IFFALSE 25665
// exit ;
25663: GO 28084
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
25665: LD_ADDR_EXP 129
25669: PUSH
25670: LD_EXP 129
25674: PPUSH
25675: LD_VAR 0 1
25679: PPUSH
25680: LD_INT 2
25682: PPUSH
25683: CALL_OW 1
25687: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
25688: LD_ADDR_VAR 0 9
25692: PUSH
25693: LD_VAR 0 4
25697: PUSH
25698: LD_VAR 0 8
25702: DIFF
25703: PPUSH
25704: LD_INT 4
25706: PPUSH
25707: CALL 79629 0 2
25711: ST_TO_ADDR
// p := [ ] ;
25712: LD_ADDR_VAR 0 11
25716: PUSH
25717: EMPTY
25718: ST_TO_ADDR
// if sci < 6 and sort > 6 then
25719: LD_VAR 0 8
25723: PUSH
25724: LD_INT 6
25726: LESS
25727: PUSH
25728: LD_VAR 0 9
25732: PUSH
25733: LD_INT 6
25735: GREATER
25736: AND
25737: IFFALSE 25818
// begin for i = 1 to 6 - sci do
25739: LD_ADDR_VAR 0 3
25743: PUSH
25744: DOUBLE
25745: LD_INT 1
25747: DEC
25748: ST_TO_ADDR
25749: LD_INT 6
25751: PUSH
25752: LD_VAR 0 8
25756: MINUS
25757: PUSH
25758: FOR_TO
25759: IFFALSE 25814
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
25761: LD_ADDR_VAR 0 11
25765: PUSH
25766: LD_VAR 0 11
25770: PPUSH
25771: LD_VAR 0 11
25775: PUSH
25776: LD_INT 1
25778: PLUS
25779: PPUSH
25780: LD_VAR 0 9
25784: PUSH
25785: LD_INT 1
25787: ARRAY
25788: PPUSH
25789: CALL_OW 2
25793: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
25794: LD_ADDR_VAR 0 9
25798: PUSH
25799: LD_VAR 0 9
25803: PPUSH
25804: LD_INT 1
25806: PPUSH
25807: CALL_OW 3
25811: ST_TO_ADDR
// end ;
25812: GO 25758
25814: POP
25815: POP
// end else
25816: GO 25838
// if sort then
25818: LD_VAR 0 9
25822: IFFALSE 25838
// p := sort [ 1 ] ;
25824: LD_ADDR_VAR 0 11
25828: PUSH
25829: LD_VAR 0 9
25833: PUSH
25834: LD_INT 1
25836: ARRAY
25837: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
25838: LD_ADDR_VAR 0 2
25842: PUSH
25843: LD_INT 0
25845: PUSH
25846: LD_INT 0
25848: PUSH
25849: LD_INT 0
25851: PUSH
25852: LD_VAR 0 11
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: ST_TO_ADDR
// exit ;
25863: GO 28084
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
25865: LD_EXP 114
25869: PUSH
25870: LD_EXP 113
25874: PUSH
25875: LD_VAR 0 1
25879: ARRAY
25880: ARRAY
25881: PUSH
25882: LD_EXP 87
25886: PUSH
25887: LD_VAR 0 1
25891: ARRAY
25892: PPUSH
25893: LD_INT 2
25895: PUSH
25896: LD_INT 30
25898: PUSH
25899: LD_INT 6
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 30
25908: PUSH
25909: LD_INT 7
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 30
25918: PUSH
25919: LD_INT 8
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: PPUSH
25932: CALL_OW 72
25936: AND
25937: PUSH
25938: LD_EXP 87
25942: PUSH
25943: LD_VAR 0 1
25947: ARRAY
25948: PPUSH
25949: LD_INT 30
25951: PUSH
25952: LD_INT 3
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PPUSH
25959: CALL_OW 72
25963: AND
25964: IFFALSE 26698
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
25966: LD_ADDR_EXP 129
25970: PUSH
25971: LD_EXP 129
25975: PPUSH
25976: LD_VAR 0 1
25980: PPUSH
25981: LD_INT 3
25983: PPUSH
25984: CALL_OW 1
25988: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
25989: LD_ADDR_VAR 0 2
25993: PUSH
25994: LD_INT 0
25996: PUSH
25997: LD_INT 0
25999: PUSH
26000: LD_INT 0
26002: PUSH
26003: LD_INT 0
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: ST_TO_ADDR
// if not eng then
26012: LD_VAR 0 6
26016: NOT
26017: IFFALSE 26080
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
26019: LD_ADDR_VAR 0 11
26023: PUSH
26024: LD_VAR 0 4
26028: PPUSH
26029: LD_INT 2
26031: PPUSH
26032: CALL 79629 0 2
26036: PUSH
26037: LD_INT 1
26039: ARRAY
26040: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
26041: LD_ADDR_VAR 0 2
26045: PUSH
26046: LD_VAR 0 2
26050: PPUSH
26051: LD_INT 2
26053: PPUSH
26054: LD_VAR 0 11
26058: PPUSH
26059: CALL_OW 1
26063: ST_TO_ADDR
// tmp := tmp diff p ;
26064: LD_ADDR_VAR 0 4
26068: PUSH
26069: LD_VAR 0 4
26073: PUSH
26074: LD_VAR 0 11
26078: DIFF
26079: ST_TO_ADDR
// end ; if tmp and sci < 6 then
26080: LD_VAR 0 4
26084: PUSH
26085: LD_VAR 0 8
26089: PUSH
26090: LD_INT 6
26092: LESS
26093: AND
26094: IFFALSE 26282
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
26096: LD_ADDR_VAR 0 9
26100: PUSH
26101: LD_VAR 0 4
26105: PUSH
26106: LD_VAR 0 8
26110: PUSH
26111: LD_VAR 0 7
26115: UNION
26116: DIFF
26117: PPUSH
26118: LD_INT 4
26120: PPUSH
26121: CALL 79629 0 2
26125: ST_TO_ADDR
// p := [ ] ;
26126: LD_ADDR_VAR 0 11
26130: PUSH
26131: EMPTY
26132: ST_TO_ADDR
// if sort then
26133: LD_VAR 0 9
26137: IFFALSE 26253
// for i = 1 to 6 - sci do
26139: LD_ADDR_VAR 0 3
26143: PUSH
26144: DOUBLE
26145: LD_INT 1
26147: DEC
26148: ST_TO_ADDR
26149: LD_INT 6
26151: PUSH
26152: LD_VAR 0 8
26156: MINUS
26157: PUSH
26158: FOR_TO
26159: IFFALSE 26251
// begin if i = sort then
26161: LD_VAR 0 3
26165: PUSH
26166: LD_VAR 0 9
26170: EQUAL
26171: IFFALSE 26175
// break ;
26173: GO 26251
// if GetClass ( i ) = 4 then
26175: LD_VAR 0 3
26179: PPUSH
26180: CALL_OW 257
26184: PUSH
26185: LD_INT 4
26187: EQUAL
26188: IFFALSE 26192
// continue ;
26190: GO 26158
// p := Insert ( p , p + 1 , sort [ i ] ) ;
26192: LD_ADDR_VAR 0 11
26196: PUSH
26197: LD_VAR 0 11
26201: PPUSH
26202: LD_VAR 0 11
26206: PUSH
26207: LD_INT 1
26209: PLUS
26210: PPUSH
26211: LD_VAR 0 9
26215: PUSH
26216: LD_VAR 0 3
26220: ARRAY
26221: PPUSH
26222: CALL_OW 2
26226: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
26227: LD_ADDR_VAR 0 4
26231: PUSH
26232: LD_VAR 0 4
26236: PUSH
26237: LD_VAR 0 9
26241: PUSH
26242: LD_VAR 0 3
26246: ARRAY
26247: DIFF
26248: ST_TO_ADDR
// end ;
26249: GO 26158
26251: POP
26252: POP
// if p then
26253: LD_VAR 0 11
26257: IFFALSE 26282
// result := Replace ( result , 4 , p ) ;
26259: LD_ADDR_VAR 0 2
26263: PUSH
26264: LD_VAR 0 2
26268: PPUSH
26269: LD_INT 4
26271: PPUSH
26272: LD_VAR 0 11
26276: PPUSH
26277: CALL_OW 1
26281: ST_TO_ADDR
// end ; if tmp and mech < 6 then
26282: LD_VAR 0 4
26286: PUSH
26287: LD_VAR 0 7
26291: PUSH
26292: LD_INT 6
26294: LESS
26295: AND
26296: IFFALSE 26484
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
26298: LD_ADDR_VAR 0 9
26302: PUSH
26303: LD_VAR 0 4
26307: PUSH
26308: LD_VAR 0 8
26312: PUSH
26313: LD_VAR 0 7
26317: UNION
26318: DIFF
26319: PPUSH
26320: LD_INT 3
26322: PPUSH
26323: CALL 79629 0 2
26327: ST_TO_ADDR
// p := [ ] ;
26328: LD_ADDR_VAR 0 11
26332: PUSH
26333: EMPTY
26334: ST_TO_ADDR
// if sort then
26335: LD_VAR 0 9
26339: IFFALSE 26455
// for i = 1 to 6 - mech do
26341: LD_ADDR_VAR 0 3
26345: PUSH
26346: DOUBLE
26347: LD_INT 1
26349: DEC
26350: ST_TO_ADDR
26351: LD_INT 6
26353: PUSH
26354: LD_VAR 0 7
26358: MINUS
26359: PUSH
26360: FOR_TO
26361: IFFALSE 26453
// begin if i = sort then
26363: LD_VAR 0 3
26367: PUSH
26368: LD_VAR 0 9
26372: EQUAL
26373: IFFALSE 26377
// break ;
26375: GO 26453
// if GetClass ( i ) = 3 then
26377: LD_VAR 0 3
26381: PPUSH
26382: CALL_OW 257
26386: PUSH
26387: LD_INT 3
26389: EQUAL
26390: IFFALSE 26394
// continue ;
26392: GO 26360
// p := Insert ( p , p + 1 , sort [ i ] ) ;
26394: LD_ADDR_VAR 0 11
26398: PUSH
26399: LD_VAR 0 11
26403: PPUSH
26404: LD_VAR 0 11
26408: PUSH
26409: LD_INT 1
26411: PLUS
26412: PPUSH
26413: LD_VAR 0 9
26417: PUSH
26418: LD_VAR 0 3
26422: ARRAY
26423: PPUSH
26424: CALL_OW 2
26428: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
26429: LD_ADDR_VAR 0 4
26433: PUSH
26434: LD_VAR 0 4
26438: PUSH
26439: LD_VAR 0 9
26443: PUSH
26444: LD_VAR 0 3
26448: ARRAY
26449: DIFF
26450: ST_TO_ADDR
// end ;
26451: GO 26360
26453: POP
26454: POP
// if p then
26455: LD_VAR 0 11
26459: IFFALSE 26484
// result := Replace ( result , 3 , p ) ;
26461: LD_ADDR_VAR 0 2
26465: PUSH
26466: LD_VAR 0 2
26470: PPUSH
26471: LD_INT 3
26473: PPUSH
26474: LD_VAR 0 11
26478: PPUSH
26479: CALL_OW 1
26483: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
26484: LD_VAR 0 4
26488: PUSH
26489: LD_INT 6
26491: GREATER
26492: PUSH
26493: LD_VAR 0 6
26497: PUSH
26498: LD_INT 6
26500: LESS
26501: AND
26502: IFFALSE 26696
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
26504: LD_ADDR_VAR 0 9
26508: PUSH
26509: LD_VAR 0 4
26513: PUSH
26514: LD_VAR 0 8
26518: PUSH
26519: LD_VAR 0 7
26523: UNION
26524: PUSH
26525: LD_VAR 0 6
26529: UNION
26530: DIFF
26531: PPUSH
26532: LD_INT 2
26534: PPUSH
26535: CALL 79629 0 2
26539: ST_TO_ADDR
// p := [ ] ;
26540: LD_ADDR_VAR 0 11
26544: PUSH
26545: EMPTY
26546: ST_TO_ADDR
// if sort then
26547: LD_VAR 0 9
26551: IFFALSE 26667
// for i = 1 to 6 - eng do
26553: LD_ADDR_VAR 0 3
26557: PUSH
26558: DOUBLE
26559: LD_INT 1
26561: DEC
26562: ST_TO_ADDR
26563: LD_INT 6
26565: PUSH
26566: LD_VAR 0 6
26570: MINUS
26571: PUSH
26572: FOR_TO
26573: IFFALSE 26665
// begin if i = sort then
26575: LD_VAR 0 3
26579: PUSH
26580: LD_VAR 0 9
26584: EQUAL
26585: IFFALSE 26589
// break ;
26587: GO 26665
// if GetClass ( i ) = 2 then
26589: LD_VAR 0 3
26593: PPUSH
26594: CALL_OW 257
26598: PUSH
26599: LD_INT 2
26601: EQUAL
26602: IFFALSE 26606
// continue ;
26604: GO 26572
// p := Insert ( p , p + 1 , sort [ i ] ) ;
26606: LD_ADDR_VAR 0 11
26610: PUSH
26611: LD_VAR 0 11
26615: PPUSH
26616: LD_VAR 0 11
26620: PUSH
26621: LD_INT 1
26623: PLUS
26624: PPUSH
26625: LD_VAR 0 9
26629: PUSH
26630: LD_VAR 0 3
26634: ARRAY
26635: PPUSH
26636: CALL_OW 2
26640: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
26641: LD_ADDR_VAR 0 4
26645: PUSH
26646: LD_VAR 0 4
26650: PUSH
26651: LD_VAR 0 9
26655: PUSH
26656: LD_VAR 0 3
26660: ARRAY
26661: DIFF
26662: ST_TO_ADDR
// end ;
26663: GO 26572
26665: POP
26666: POP
// if p then
26667: LD_VAR 0 11
26671: IFFALSE 26696
// result := Replace ( result , 2 , p ) ;
26673: LD_ADDR_VAR 0 2
26677: PUSH
26678: LD_VAR 0 2
26682: PPUSH
26683: LD_INT 2
26685: PPUSH
26686: LD_VAR 0 11
26690: PPUSH
26691: CALL_OW 1
26695: ST_TO_ADDR
// end ; exit ;
26696: GO 28084
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
26698: LD_EXP 114
26702: PUSH
26703: LD_EXP 113
26707: PUSH
26708: LD_VAR 0 1
26712: ARRAY
26713: ARRAY
26714: NOT
26715: PUSH
26716: LD_EXP 87
26720: PUSH
26721: LD_VAR 0 1
26725: ARRAY
26726: PPUSH
26727: LD_INT 30
26729: PUSH
26730: LD_INT 3
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PPUSH
26737: CALL_OW 72
26741: AND
26742: PUSH
26743: LD_EXP 92
26747: PUSH
26748: LD_VAR 0 1
26752: ARRAY
26753: AND
26754: IFFALSE 27362
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
26756: LD_ADDR_EXP 129
26760: PUSH
26761: LD_EXP 129
26765: PPUSH
26766: LD_VAR 0 1
26770: PPUSH
26771: LD_INT 5
26773: PPUSH
26774: CALL_OW 1
26778: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
26779: LD_ADDR_VAR 0 2
26783: PUSH
26784: LD_INT 0
26786: PUSH
26787: LD_INT 0
26789: PUSH
26790: LD_INT 0
26792: PUSH
26793: LD_INT 0
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: ST_TO_ADDR
// if sci > 1 then
26802: LD_VAR 0 8
26806: PUSH
26807: LD_INT 1
26809: GREATER
26810: IFFALSE 26838
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
26812: LD_ADDR_VAR 0 4
26816: PUSH
26817: LD_VAR 0 4
26821: PUSH
26822: LD_VAR 0 8
26826: PUSH
26827: LD_VAR 0 8
26831: PUSH
26832: LD_INT 1
26834: ARRAY
26835: DIFF
26836: DIFF
26837: ST_TO_ADDR
// if tmp and not sci then
26838: LD_VAR 0 4
26842: PUSH
26843: LD_VAR 0 8
26847: NOT
26848: AND
26849: IFFALSE 26918
// begin sort := SortBySkill ( tmp , 4 ) ;
26851: LD_ADDR_VAR 0 9
26855: PUSH
26856: LD_VAR 0 4
26860: PPUSH
26861: LD_INT 4
26863: PPUSH
26864: CALL 79629 0 2
26868: ST_TO_ADDR
// if sort then
26869: LD_VAR 0 9
26873: IFFALSE 26889
// p := sort [ 1 ] ;
26875: LD_ADDR_VAR 0 11
26879: PUSH
26880: LD_VAR 0 9
26884: PUSH
26885: LD_INT 1
26887: ARRAY
26888: ST_TO_ADDR
// if p then
26889: LD_VAR 0 11
26893: IFFALSE 26918
// result := Replace ( result , 4 , p ) ;
26895: LD_ADDR_VAR 0 2
26899: PUSH
26900: LD_VAR 0 2
26904: PPUSH
26905: LD_INT 4
26907: PPUSH
26908: LD_VAR 0 11
26912: PPUSH
26913: CALL_OW 1
26917: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
26918: LD_ADDR_VAR 0 4
26922: PUSH
26923: LD_VAR 0 4
26927: PUSH
26928: LD_VAR 0 7
26932: DIFF
26933: ST_TO_ADDR
// if tmp and mech < 6 then
26934: LD_VAR 0 4
26938: PUSH
26939: LD_VAR 0 7
26943: PUSH
26944: LD_INT 6
26946: LESS
26947: AND
26948: IFFALSE 27136
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
26950: LD_ADDR_VAR 0 9
26954: PUSH
26955: LD_VAR 0 4
26959: PUSH
26960: LD_VAR 0 8
26964: PUSH
26965: LD_VAR 0 7
26969: UNION
26970: DIFF
26971: PPUSH
26972: LD_INT 3
26974: PPUSH
26975: CALL 79629 0 2
26979: ST_TO_ADDR
// p := [ ] ;
26980: LD_ADDR_VAR 0 11
26984: PUSH
26985: EMPTY
26986: ST_TO_ADDR
// if sort then
26987: LD_VAR 0 9
26991: IFFALSE 27107
// for i = 1 to 6 - mech do
26993: LD_ADDR_VAR 0 3
26997: PUSH
26998: DOUBLE
26999: LD_INT 1
27001: DEC
27002: ST_TO_ADDR
27003: LD_INT 6
27005: PUSH
27006: LD_VAR 0 7
27010: MINUS
27011: PUSH
27012: FOR_TO
27013: IFFALSE 27105
// begin if i = sort then
27015: LD_VAR 0 3
27019: PUSH
27020: LD_VAR 0 9
27024: EQUAL
27025: IFFALSE 27029
// break ;
27027: GO 27105
// if GetClass ( i ) = 3 then
27029: LD_VAR 0 3
27033: PPUSH
27034: CALL_OW 257
27038: PUSH
27039: LD_INT 3
27041: EQUAL
27042: IFFALSE 27046
// continue ;
27044: GO 27012
// p := Insert ( p , p + 1 , sort [ i ] ) ;
27046: LD_ADDR_VAR 0 11
27050: PUSH
27051: LD_VAR 0 11
27055: PPUSH
27056: LD_VAR 0 11
27060: PUSH
27061: LD_INT 1
27063: PLUS
27064: PPUSH
27065: LD_VAR 0 9
27069: PUSH
27070: LD_VAR 0 3
27074: ARRAY
27075: PPUSH
27076: CALL_OW 2
27080: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
27081: LD_ADDR_VAR 0 4
27085: PUSH
27086: LD_VAR 0 4
27090: PUSH
27091: LD_VAR 0 9
27095: PUSH
27096: LD_VAR 0 3
27100: ARRAY
27101: DIFF
27102: ST_TO_ADDR
// end ;
27103: GO 27012
27105: POP
27106: POP
// if p then
27107: LD_VAR 0 11
27111: IFFALSE 27136
// result := Replace ( result , 3 , p ) ;
27113: LD_ADDR_VAR 0 2
27117: PUSH
27118: LD_VAR 0 2
27122: PPUSH
27123: LD_INT 3
27125: PPUSH
27126: LD_VAR 0 11
27130: PPUSH
27131: CALL_OW 1
27135: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
27136: LD_ADDR_VAR 0 4
27140: PUSH
27141: LD_VAR 0 4
27145: PUSH
27146: LD_VAR 0 6
27150: DIFF
27151: ST_TO_ADDR
// if tmp and eng < 6 then
27152: LD_VAR 0 4
27156: PUSH
27157: LD_VAR 0 6
27161: PUSH
27162: LD_INT 6
27164: LESS
27165: AND
27166: IFFALSE 27360
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
27168: LD_ADDR_VAR 0 9
27172: PUSH
27173: LD_VAR 0 4
27177: PUSH
27178: LD_VAR 0 8
27182: PUSH
27183: LD_VAR 0 7
27187: UNION
27188: PUSH
27189: LD_VAR 0 6
27193: UNION
27194: DIFF
27195: PPUSH
27196: LD_INT 2
27198: PPUSH
27199: CALL 79629 0 2
27203: ST_TO_ADDR
// p := [ ] ;
27204: LD_ADDR_VAR 0 11
27208: PUSH
27209: EMPTY
27210: ST_TO_ADDR
// if sort then
27211: LD_VAR 0 9
27215: IFFALSE 27331
// for i = 1 to 6 - eng do
27217: LD_ADDR_VAR 0 3
27221: PUSH
27222: DOUBLE
27223: LD_INT 1
27225: DEC
27226: ST_TO_ADDR
27227: LD_INT 6
27229: PUSH
27230: LD_VAR 0 6
27234: MINUS
27235: PUSH
27236: FOR_TO
27237: IFFALSE 27329
// begin if i = sort then
27239: LD_VAR 0 3
27243: PUSH
27244: LD_VAR 0 9
27248: EQUAL
27249: IFFALSE 27253
// break ;
27251: GO 27329
// if GetClass ( i ) = 2 then
27253: LD_VAR 0 3
27257: PPUSH
27258: CALL_OW 257
27262: PUSH
27263: LD_INT 2
27265: EQUAL
27266: IFFALSE 27270
// continue ;
27268: GO 27236
// p := Insert ( p , p + 1 , sort [ i ] ) ;
27270: LD_ADDR_VAR 0 11
27274: PUSH
27275: LD_VAR 0 11
27279: PPUSH
27280: LD_VAR 0 11
27284: PUSH
27285: LD_INT 1
27287: PLUS
27288: PPUSH
27289: LD_VAR 0 9
27293: PUSH
27294: LD_VAR 0 3
27298: ARRAY
27299: PPUSH
27300: CALL_OW 2
27304: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
27305: LD_ADDR_VAR 0 4
27309: PUSH
27310: LD_VAR 0 4
27314: PUSH
27315: LD_VAR 0 9
27319: PUSH
27320: LD_VAR 0 3
27324: ARRAY
27325: DIFF
27326: ST_TO_ADDR
// end ;
27327: GO 27236
27329: POP
27330: POP
// if p then
27331: LD_VAR 0 11
27335: IFFALSE 27360
// result := Replace ( result , 2 , p ) ;
27337: LD_ADDR_VAR 0 2
27341: PUSH
27342: LD_VAR 0 2
27346: PPUSH
27347: LD_INT 2
27349: PPUSH
27350: LD_VAR 0 11
27354: PPUSH
27355: CALL_OW 1
27359: ST_TO_ADDR
// end ; exit ;
27360: GO 28084
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
27362: LD_EXP 114
27366: PUSH
27367: LD_EXP 113
27371: PUSH
27372: LD_VAR 0 1
27376: ARRAY
27377: ARRAY
27378: NOT
27379: PUSH
27380: LD_EXP 87
27384: PUSH
27385: LD_VAR 0 1
27389: ARRAY
27390: PPUSH
27391: LD_INT 30
27393: PUSH
27394: LD_INT 3
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PPUSH
27401: CALL_OW 72
27405: AND
27406: PUSH
27407: LD_EXP 92
27411: PUSH
27412: LD_VAR 0 1
27416: ARRAY
27417: NOT
27418: AND
27419: IFFALSE 28084
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
27421: LD_ADDR_EXP 129
27425: PUSH
27426: LD_EXP 129
27430: PPUSH
27431: LD_VAR 0 1
27435: PPUSH
27436: LD_INT 6
27438: PPUSH
27439: CALL_OW 1
27443: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
27444: LD_ADDR_VAR 0 2
27448: PUSH
27449: LD_INT 0
27451: PUSH
27452: LD_INT 0
27454: PUSH
27455: LD_INT 0
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: ST_TO_ADDR
// if sci >= 1 then
27467: LD_VAR 0 8
27471: PUSH
27472: LD_INT 1
27474: GREATEREQUAL
27475: IFFALSE 27497
// tmp := tmp diff sci [ 1 ] ;
27477: LD_ADDR_VAR 0 4
27481: PUSH
27482: LD_VAR 0 4
27486: PUSH
27487: LD_VAR 0 8
27491: PUSH
27492: LD_INT 1
27494: ARRAY
27495: DIFF
27496: ST_TO_ADDR
// if tmp and not sci then
27497: LD_VAR 0 4
27501: PUSH
27502: LD_VAR 0 8
27506: NOT
27507: AND
27508: IFFALSE 27577
// begin sort := SortBySkill ( tmp , 4 ) ;
27510: LD_ADDR_VAR 0 9
27514: PUSH
27515: LD_VAR 0 4
27519: PPUSH
27520: LD_INT 4
27522: PPUSH
27523: CALL 79629 0 2
27527: ST_TO_ADDR
// if sort then
27528: LD_VAR 0 9
27532: IFFALSE 27548
// p := sort [ 1 ] ;
27534: LD_ADDR_VAR 0 11
27538: PUSH
27539: LD_VAR 0 9
27543: PUSH
27544: LD_INT 1
27546: ARRAY
27547: ST_TO_ADDR
// if p then
27548: LD_VAR 0 11
27552: IFFALSE 27577
// result := Replace ( result , 4 , p ) ;
27554: LD_ADDR_VAR 0 2
27558: PUSH
27559: LD_VAR 0 2
27563: PPUSH
27564: LD_INT 4
27566: PPUSH
27567: LD_VAR 0 11
27571: PPUSH
27572: CALL_OW 1
27576: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
27577: LD_ADDR_VAR 0 4
27581: PUSH
27582: LD_VAR 0 4
27586: PUSH
27587: LD_VAR 0 7
27591: DIFF
27592: ST_TO_ADDR
// if tmp and mech < 6 then
27593: LD_VAR 0 4
27597: PUSH
27598: LD_VAR 0 7
27602: PUSH
27603: LD_INT 6
27605: LESS
27606: AND
27607: IFFALSE 27789
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
27609: LD_ADDR_VAR 0 9
27613: PUSH
27614: LD_VAR 0 4
27618: PUSH
27619: LD_VAR 0 7
27623: DIFF
27624: PPUSH
27625: LD_INT 3
27627: PPUSH
27628: CALL 79629 0 2
27632: ST_TO_ADDR
// p := [ ] ;
27633: LD_ADDR_VAR 0 11
27637: PUSH
27638: EMPTY
27639: ST_TO_ADDR
// if sort then
27640: LD_VAR 0 9
27644: IFFALSE 27760
// for i = 1 to 6 - mech do
27646: LD_ADDR_VAR 0 3
27650: PUSH
27651: DOUBLE
27652: LD_INT 1
27654: DEC
27655: ST_TO_ADDR
27656: LD_INT 6
27658: PUSH
27659: LD_VAR 0 7
27663: MINUS
27664: PUSH
27665: FOR_TO
27666: IFFALSE 27758
// begin if i = sort then
27668: LD_VAR 0 3
27672: PUSH
27673: LD_VAR 0 9
27677: EQUAL
27678: IFFALSE 27682
// break ;
27680: GO 27758
// if GetClass ( i ) = 3 then
27682: LD_VAR 0 3
27686: PPUSH
27687: CALL_OW 257
27691: PUSH
27692: LD_INT 3
27694: EQUAL
27695: IFFALSE 27699
// continue ;
27697: GO 27665
// p := Insert ( p , p + 1 , sort [ i ] ) ;
27699: LD_ADDR_VAR 0 11
27703: PUSH
27704: LD_VAR 0 11
27708: PPUSH
27709: LD_VAR 0 11
27713: PUSH
27714: LD_INT 1
27716: PLUS
27717: PPUSH
27718: LD_VAR 0 9
27722: PUSH
27723: LD_VAR 0 3
27727: ARRAY
27728: PPUSH
27729: CALL_OW 2
27733: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
27734: LD_ADDR_VAR 0 4
27738: PUSH
27739: LD_VAR 0 4
27743: PUSH
27744: LD_VAR 0 9
27748: PUSH
27749: LD_VAR 0 3
27753: ARRAY
27754: DIFF
27755: ST_TO_ADDR
// end ;
27756: GO 27665
27758: POP
27759: POP
// if p then
27760: LD_VAR 0 11
27764: IFFALSE 27789
// result := Replace ( result , 3 , p ) ;
27766: LD_ADDR_VAR 0 2
27770: PUSH
27771: LD_VAR 0 2
27775: PPUSH
27776: LD_INT 3
27778: PPUSH
27779: LD_VAR 0 11
27783: PPUSH
27784: CALL_OW 1
27788: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
27789: LD_ADDR_VAR 0 4
27793: PUSH
27794: LD_VAR 0 4
27798: PUSH
27799: LD_VAR 0 6
27803: DIFF
27804: ST_TO_ADDR
// if tmp and eng < 4 then
27805: LD_VAR 0 4
27809: PUSH
27810: LD_VAR 0 6
27814: PUSH
27815: LD_INT 4
27817: LESS
27818: AND
27819: IFFALSE 28009
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
27821: LD_ADDR_VAR 0 9
27825: PUSH
27826: LD_VAR 0 4
27830: PUSH
27831: LD_VAR 0 7
27835: PUSH
27836: LD_VAR 0 6
27840: UNION
27841: DIFF
27842: PPUSH
27843: LD_INT 2
27845: PPUSH
27846: CALL 79629 0 2
27850: ST_TO_ADDR
// p := [ ] ;
27851: LD_ADDR_VAR 0 11
27855: PUSH
27856: EMPTY
27857: ST_TO_ADDR
// if sort then
27858: LD_VAR 0 9
27862: IFFALSE 27978
// for i = 1 to 4 - eng do
27864: LD_ADDR_VAR 0 3
27868: PUSH
27869: DOUBLE
27870: LD_INT 1
27872: DEC
27873: ST_TO_ADDR
27874: LD_INT 4
27876: PUSH
27877: LD_VAR 0 6
27881: MINUS
27882: PUSH
27883: FOR_TO
27884: IFFALSE 27976
// begin if i = sort then
27886: LD_VAR 0 3
27890: PUSH
27891: LD_VAR 0 9
27895: EQUAL
27896: IFFALSE 27900
// break ;
27898: GO 27976
// if GetClass ( i ) = 2 then
27900: LD_VAR 0 3
27904: PPUSH
27905: CALL_OW 257
27909: PUSH
27910: LD_INT 2
27912: EQUAL
27913: IFFALSE 27917
// continue ;
27915: GO 27883
// p := Insert ( p , p + 1 , sort [ i ] ) ;
27917: LD_ADDR_VAR 0 11
27921: PUSH
27922: LD_VAR 0 11
27926: PPUSH
27927: LD_VAR 0 11
27931: PUSH
27932: LD_INT 1
27934: PLUS
27935: PPUSH
27936: LD_VAR 0 9
27940: PUSH
27941: LD_VAR 0 3
27945: ARRAY
27946: PPUSH
27947: CALL_OW 2
27951: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
27952: LD_ADDR_VAR 0 4
27956: PUSH
27957: LD_VAR 0 4
27961: PUSH
27962: LD_VAR 0 9
27966: PUSH
27967: LD_VAR 0 3
27971: ARRAY
27972: DIFF
27973: ST_TO_ADDR
// end ;
27974: GO 27883
27976: POP
27977: POP
// if p then
27978: LD_VAR 0 11
27982: IFFALSE 28007
// result := Replace ( result , 2 , p ) ;
27984: LD_ADDR_VAR 0 2
27988: PUSH
27989: LD_VAR 0 2
27993: PPUSH
27994: LD_INT 2
27996: PPUSH
27997: LD_VAR 0 11
28001: PPUSH
28002: CALL_OW 1
28006: ST_TO_ADDR
// end else
28007: GO 28053
// for i = eng downto 5 do
28009: LD_ADDR_VAR 0 3
28013: PUSH
28014: DOUBLE
28015: LD_VAR 0 6
28019: INC
28020: ST_TO_ADDR
28021: LD_INT 5
28023: PUSH
28024: FOR_DOWNTO
28025: IFFALSE 28051
// tmp := tmp union eng [ i ] ;
28027: LD_ADDR_VAR 0 4
28031: PUSH
28032: LD_VAR 0 4
28036: PUSH
28037: LD_VAR 0 6
28041: PUSH
28042: LD_VAR 0 3
28046: ARRAY
28047: UNION
28048: ST_TO_ADDR
28049: GO 28024
28051: POP
28052: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
28053: LD_ADDR_VAR 0 2
28057: PUSH
28058: LD_VAR 0 2
28062: PPUSH
28063: LD_INT 1
28065: PPUSH
28066: LD_VAR 0 4
28070: PUSH
28071: LD_VAR 0 5
28075: DIFF
28076: PPUSH
28077: CALL_OW 1
28081: ST_TO_ADDR
// exit ;
28082: GO 28084
// end ; end ;
28084: LD_VAR 0 2
28088: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
28089: LD_INT 0
28091: PPUSH
28092: PPUSH
28093: PPUSH
// if not mc_bases then
28094: LD_EXP 87
28098: NOT
28099: IFFALSE 28103
// exit ;
28101: GO 28209
// for i = 1 to mc_bases do
28103: LD_ADDR_VAR 0 2
28107: PUSH
28108: DOUBLE
28109: LD_INT 1
28111: DEC
28112: ST_TO_ADDR
28113: LD_EXP 87
28117: PUSH
28118: FOR_TO
28119: IFFALSE 28200
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
28121: LD_ADDR_VAR 0 3
28125: PUSH
28126: LD_EXP 87
28130: PUSH
28131: LD_VAR 0 2
28135: ARRAY
28136: PPUSH
28137: LD_INT 21
28139: PUSH
28140: LD_INT 3
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 3
28149: PUSH
28150: LD_INT 24
28152: PUSH
28153: LD_INT 1000
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PPUSH
28168: CALL_OW 72
28172: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
28173: LD_ADDR_EXP 88
28177: PUSH
28178: LD_EXP 88
28182: PPUSH
28183: LD_VAR 0 2
28187: PPUSH
28188: LD_VAR 0 3
28192: PPUSH
28193: CALL_OW 1
28197: ST_TO_ADDR
// end ;
28198: GO 28118
28200: POP
28201: POP
// RaiseSailEvent ( 101 ) ;
28202: LD_INT 101
28204: PPUSH
28205: CALL_OW 427
// end ;
28209: LD_VAR 0 1
28213: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
28214: LD_INT 0
28216: PPUSH
28217: PPUSH
28218: PPUSH
28219: PPUSH
28220: PPUSH
28221: PPUSH
28222: PPUSH
// if not mc_bases then
28223: LD_EXP 87
28227: NOT
28228: IFFALSE 28232
// exit ;
28230: GO 28794
// for i = 1 to mc_bases do
28232: LD_ADDR_VAR 0 2
28236: PUSH
28237: DOUBLE
28238: LD_INT 1
28240: DEC
28241: ST_TO_ADDR
28242: LD_EXP 87
28246: PUSH
28247: FOR_TO
28248: IFFALSE 28785
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
28250: LD_ADDR_VAR 0 5
28254: PUSH
28255: LD_EXP 87
28259: PUSH
28260: LD_VAR 0 2
28264: ARRAY
28265: PUSH
28266: LD_EXP 116
28270: PUSH
28271: LD_VAR 0 2
28275: ARRAY
28276: UNION
28277: PPUSH
28278: LD_INT 21
28280: PUSH
28281: LD_INT 1
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 1
28290: PUSH
28291: LD_INT 3
28293: PUSH
28294: LD_INT 54
28296: PUSH
28297: EMPTY
28298: LIST
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 3
28306: PUSH
28307: LD_INT 24
28309: PUSH
28310: LD_INT 800
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: LIST
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PPUSH
28330: CALL_OW 72
28334: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
28335: LD_ADDR_VAR 0 6
28339: PUSH
28340: LD_EXP 87
28344: PUSH
28345: LD_VAR 0 2
28349: ARRAY
28350: PPUSH
28351: LD_INT 21
28353: PUSH
28354: LD_INT 1
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 1
28363: PUSH
28364: LD_INT 3
28366: PUSH
28367: LD_INT 54
28369: PUSH
28370: EMPTY
28371: LIST
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 3
28379: PUSH
28380: LD_INT 24
28382: PUSH
28383: LD_INT 250
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: LIST
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PPUSH
28403: CALL_OW 72
28407: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
28408: LD_ADDR_VAR 0 7
28412: PUSH
28413: LD_VAR 0 5
28417: PUSH
28418: LD_VAR 0 6
28422: DIFF
28423: ST_TO_ADDR
// if not need_heal_1 then
28424: LD_VAR 0 6
28428: NOT
28429: IFFALSE 28462
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
28431: LD_ADDR_EXP 90
28435: PUSH
28436: LD_EXP 90
28440: PPUSH
28441: LD_VAR 0 2
28445: PUSH
28446: LD_INT 1
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PPUSH
28453: EMPTY
28454: PPUSH
28455: CALL 50080 0 3
28459: ST_TO_ADDR
28460: GO 28532
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
28462: LD_ADDR_EXP 90
28466: PUSH
28467: LD_EXP 90
28471: PPUSH
28472: LD_VAR 0 2
28476: PUSH
28477: LD_INT 1
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PPUSH
28484: LD_EXP 90
28488: PUSH
28489: LD_VAR 0 2
28493: ARRAY
28494: PUSH
28495: LD_INT 1
28497: ARRAY
28498: PPUSH
28499: LD_INT 3
28501: PUSH
28502: LD_INT 24
28504: PUSH
28505: LD_INT 1000
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PPUSH
28516: CALL_OW 72
28520: PUSH
28521: LD_VAR 0 6
28525: UNION
28526: PPUSH
28527: CALL 50080 0 3
28531: ST_TO_ADDR
// if not need_heal_2 then
28532: LD_VAR 0 7
28536: NOT
28537: IFFALSE 28570
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
28539: LD_ADDR_EXP 90
28543: PUSH
28544: LD_EXP 90
28548: PPUSH
28549: LD_VAR 0 2
28553: PUSH
28554: LD_INT 2
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PPUSH
28561: EMPTY
28562: PPUSH
28563: CALL 50080 0 3
28567: ST_TO_ADDR
28568: GO 28602
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
28570: LD_ADDR_EXP 90
28574: PUSH
28575: LD_EXP 90
28579: PPUSH
28580: LD_VAR 0 2
28584: PUSH
28585: LD_INT 2
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PPUSH
28592: LD_VAR 0 7
28596: PPUSH
28597: CALL 50080 0 3
28601: ST_TO_ADDR
// if need_heal_2 then
28602: LD_VAR 0 7
28606: IFFALSE 28767
// for j in need_heal_2 do
28608: LD_ADDR_VAR 0 3
28612: PUSH
28613: LD_VAR 0 7
28617: PUSH
28618: FOR_IN
28619: IFFALSE 28765
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
28621: LD_ADDR_VAR 0 5
28625: PUSH
28626: LD_EXP 87
28630: PUSH
28631: LD_VAR 0 2
28635: ARRAY
28636: PPUSH
28637: LD_INT 2
28639: PUSH
28640: LD_INT 30
28642: PUSH
28643: LD_INT 6
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 30
28652: PUSH
28653: LD_INT 7
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 30
28662: PUSH
28663: LD_INT 8
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 30
28672: PUSH
28673: LD_INT 0
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 30
28682: PUSH
28683: LD_INT 1
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: PPUSH
28698: CALL_OW 72
28702: ST_TO_ADDR
// if tmp then
28703: LD_VAR 0 5
28707: IFFALSE 28763
// begin k := NearestUnitToUnit ( tmp , j ) ;
28709: LD_ADDR_VAR 0 4
28713: PUSH
28714: LD_VAR 0 5
28718: PPUSH
28719: LD_VAR 0 3
28723: PPUSH
28724: CALL_OW 74
28728: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
28729: LD_VAR 0 3
28733: PPUSH
28734: LD_VAR 0 4
28738: PPUSH
28739: CALL_OW 296
28743: PUSH
28744: LD_INT 5
28746: GREATER
28747: IFFALSE 28763
// ComMoveUnit ( j , k ) ;
28749: LD_VAR 0 3
28753: PPUSH
28754: LD_VAR 0 4
28758: PPUSH
28759: CALL_OW 112
// end ; end ;
28763: GO 28618
28765: POP
28766: POP
// if not need_heal_1 and not need_heal_2 then
28767: LD_VAR 0 6
28771: NOT
28772: PUSH
28773: LD_VAR 0 7
28777: NOT
28778: AND
28779: IFFALSE 28783
// continue ;
28781: GO 28247
// end ;
28783: GO 28247
28785: POP
28786: POP
// RaiseSailEvent ( 102 ) ;
28787: LD_INT 102
28789: PPUSH
28790: CALL_OW 427
// end ;
28794: LD_VAR 0 1
28798: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
28799: LD_INT 0
28801: PPUSH
28802: PPUSH
28803: PPUSH
28804: PPUSH
28805: PPUSH
28806: PPUSH
28807: PPUSH
28808: PPUSH
// if not mc_bases then
28809: LD_EXP 87
28813: NOT
28814: IFFALSE 28818
// exit ;
28816: GO 29653
// for i = 1 to mc_bases do
28818: LD_ADDR_VAR 0 2
28822: PUSH
28823: DOUBLE
28824: LD_INT 1
28826: DEC
28827: ST_TO_ADDR
28828: LD_EXP 87
28832: PUSH
28833: FOR_TO
28834: IFFALSE 29651
// begin if not mc_building_need_repair [ i ] then
28836: LD_EXP 88
28840: PUSH
28841: LD_VAR 0 2
28845: ARRAY
28846: NOT
28847: IFFALSE 29021
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
28849: LD_ADDR_VAR 0 6
28853: PUSH
28854: LD_EXP 106
28858: PUSH
28859: LD_VAR 0 2
28863: ARRAY
28864: PPUSH
28865: LD_INT 3
28867: PUSH
28868: LD_INT 24
28870: PUSH
28871: LD_INT 1000
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 2
28884: PUSH
28885: LD_INT 34
28887: PUSH
28888: LD_INT 13
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 34
28897: PUSH
28898: LD_INT 52
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: LIST
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PPUSH
28914: CALL_OW 72
28918: ST_TO_ADDR
// if cranes then
28919: LD_VAR 0 6
28923: IFFALSE 28985
// for j in cranes do
28925: LD_ADDR_VAR 0 3
28929: PUSH
28930: LD_VAR 0 6
28934: PUSH
28935: FOR_IN
28936: IFFALSE 28983
// if not IsInArea ( j , mc_parking [ i ] ) then
28938: LD_VAR 0 3
28942: PPUSH
28943: LD_EXP 111
28947: PUSH
28948: LD_VAR 0 2
28952: ARRAY
28953: PPUSH
28954: CALL_OW 308
28958: NOT
28959: IFFALSE 28981
// ComMoveToArea ( j , mc_parking [ i ] ) ;
28961: LD_VAR 0 3
28965: PPUSH
28966: LD_EXP 111
28970: PUSH
28971: LD_VAR 0 2
28975: ARRAY
28976: PPUSH
28977: CALL_OW 113
28981: GO 28935
28983: POP
28984: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
28985: LD_ADDR_EXP 89
28989: PUSH
28990: LD_EXP 89
28994: PPUSH
28995: LD_VAR 0 2
28999: PPUSH
29000: EMPTY
29001: PPUSH
29002: CALL_OW 1
29006: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
29007: LD_VAR 0 2
29011: PPUSH
29012: LD_INT 101
29014: PPUSH
29015: CALL 23922 0 2
// continue ;
29019: GO 28833
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
29021: LD_ADDR_EXP 93
29025: PUSH
29026: LD_EXP 93
29030: PPUSH
29031: LD_VAR 0 2
29035: PPUSH
29036: EMPTY
29037: PPUSH
29038: CALL_OW 1
29042: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
29043: LD_VAR 0 2
29047: PPUSH
29048: LD_INT 103
29050: PPUSH
29051: CALL 23922 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
29055: LD_ADDR_VAR 0 5
29059: PUSH
29060: LD_EXP 87
29064: PUSH
29065: LD_VAR 0 2
29069: ARRAY
29070: PUSH
29071: LD_EXP 116
29075: PUSH
29076: LD_VAR 0 2
29080: ARRAY
29081: UNION
29082: PPUSH
29083: LD_INT 2
29085: PUSH
29086: LD_INT 25
29088: PUSH
29089: LD_INT 2
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 25
29098: PUSH
29099: LD_INT 16
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: LIST
29110: PUSH
29111: EMPTY
29112: LIST
29113: PPUSH
29114: CALL_OW 72
29118: PUSH
29119: LD_EXP 90
29123: PUSH
29124: LD_VAR 0 2
29128: ARRAY
29129: PUSH
29130: LD_INT 1
29132: ARRAY
29133: PUSH
29134: LD_EXP 90
29138: PUSH
29139: LD_VAR 0 2
29143: ARRAY
29144: PUSH
29145: LD_INT 2
29147: ARRAY
29148: UNION
29149: DIFF
29150: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
29151: LD_ADDR_VAR 0 6
29155: PUSH
29156: LD_EXP 106
29160: PUSH
29161: LD_VAR 0 2
29165: ARRAY
29166: PPUSH
29167: LD_INT 2
29169: PUSH
29170: LD_INT 34
29172: PUSH
29173: LD_INT 13
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 34
29182: PUSH
29183: LD_INT 52
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: LIST
29194: PPUSH
29195: CALL_OW 72
29199: ST_TO_ADDR
// if cranes then
29200: LD_VAR 0 6
29204: IFFALSE 29340
// begin for j in cranes do
29206: LD_ADDR_VAR 0 3
29210: PUSH
29211: LD_VAR 0 6
29215: PUSH
29216: FOR_IN
29217: IFFALSE 29338
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
29219: LD_VAR 0 3
29223: PPUSH
29224: CALL_OW 256
29228: PUSH
29229: LD_INT 500
29231: GREATEREQUAL
29232: PUSH
29233: LD_VAR 0 3
29237: PPUSH
29238: CALL_OW 314
29242: NOT
29243: AND
29244: IFFALSE 29278
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
29246: LD_VAR 0 3
29250: PPUSH
29251: LD_EXP 88
29255: PUSH
29256: LD_VAR 0 2
29260: ARRAY
29261: PPUSH
29262: LD_VAR 0 3
29266: PPUSH
29267: CALL_OW 74
29271: PPUSH
29272: CALL_OW 130
29276: GO 29336
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
29278: LD_VAR 0 3
29282: PPUSH
29283: CALL_OW 256
29287: PUSH
29288: LD_INT 500
29290: LESS
29291: PUSH
29292: LD_VAR 0 3
29296: PPUSH
29297: LD_EXP 111
29301: PUSH
29302: LD_VAR 0 2
29306: ARRAY
29307: PPUSH
29308: CALL_OW 308
29312: NOT
29313: AND
29314: IFFALSE 29336
// ComMoveToArea ( j , mc_parking [ i ] ) ;
29316: LD_VAR 0 3
29320: PPUSH
29321: LD_EXP 111
29325: PUSH
29326: LD_VAR 0 2
29330: ARRAY
29331: PPUSH
29332: CALL_OW 113
29336: GO 29216
29338: POP
29339: POP
// end ; if tmp > 3 then
29340: LD_VAR 0 5
29344: PUSH
29345: LD_INT 3
29347: GREATER
29348: IFFALSE 29368
// tmp := ShrinkArray ( tmp , 4 ) ;
29350: LD_ADDR_VAR 0 5
29354: PUSH
29355: LD_VAR 0 5
29359: PPUSH
29360: LD_INT 4
29362: PPUSH
29363: CALL 81306 0 2
29367: ST_TO_ADDR
// if not tmp then
29368: LD_VAR 0 5
29372: NOT
29373: IFFALSE 29377
// continue ;
29375: GO 28833
// for j in tmp do
29377: LD_ADDR_VAR 0 3
29381: PUSH
29382: LD_VAR 0 5
29386: PUSH
29387: FOR_IN
29388: IFFALSE 29647
// begin if IsInUnit ( j ) then
29390: LD_VAR 0 3
29394: PPUSH
29395: CALL_OW 310
29399: IFFALSE 29410
// ComExitBuilding ( j ) ;
29401: LD_VAR 0 3
29405: PPUSH
29406: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
29410: LD_VAR 0 3
29414: PUSH
29415: LD_EXP 89
29419: PUSH
29420: LD_VAR 0 2
29424: ARRAY
29425: IN
29426: NOT
29427: IFFALSE 29485
// begin SetTag ( j , 101 ) ;
29429: LD_VAR 0 3
29433: PPUSH
29434: LD_INT 101
29436: PPUSH
29437: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
29441: LD_ADDR_EXP 89
29445: PUSH
29446: LD_EXP 89
29450: PPUSH
29451: LD_VAR 0 2
29455: PUSH
29456: LD_EXP 89
29460: PUSH
29461: LD_VAR 0 2
29465: ARRAY
29466: PUSH
29467: LD_INT 1
29469: PLUS
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PPUSH
29475: LD_VAR 0 3
29479: PPUSH
29480: CALL 50080 0 3
29484: ST_TO_ADDR
// end ; wait ( 1 ) ;
29485: LD_INT 1
29487: PPUSH
29488: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
29492: LD_ADDR_VAR 0 7
29496: PUSH
29497: LD_EXP 88
29501: PUSH
29502: LD_VAR 0 2
29506: ARRAY
29507: ST_TO_ADDR
// if mc_scan [ i ] then
29508: LD_EXP 110
29512: PUSH
29513: LD_VAR 0 2
29517: ARRAY
29518: IFFALSE 29580
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
29520: LD_ADDR_VAR 0 7
29524: PUSH
29525: LD_EXP 88
29529: PUSH
29530: LD_VAR 0 2
29534: ARRAY
29535: PPUSH
29536: LD_INT 3
29538: PUSH
29539: LD_INT 30
29541: PUSH
29542: LD_INT 32
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 30
29551: PUSH
29552: LD_INT 33
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 30
29561: PUSH
29562: LD_INT 31
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: PPUSH
29575: CALL_OW 72
29579: ST_TO_ADDR
// if not to_repair_tmp then
29580: LD_VAR 0 7
29584: NOT
29585: IFFALSE 29589
// continue ;
29587: GO 29387
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
29589: LD_ADDR_VAR 0 8
29593: PUSH
29594: LD_VAR 0 7
29598: PPUSH
29599: LD_VAR 0 3
29603: PPUSH
29604: CALL_OW 74
29608: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 5 then
29609: LD_VAR 0 8
29613: PPUSH
29614: LD_INT 16
29616: PPUSH
29617: CALL 52673 0 2
29621: PUSH
29622: LD_INT 4
29624: ARRAY
29625: PUSH
29626: LD_INT 5
29628: LESS
29629: IFFALSE 29645
// ComRepairBuilding ( j , to_repair ) ;
29631: LD_VAR 0 3
29635: PPUSH
29636: LD_VAR 0 8
29640: PPUSH
29641: CALL_OW 130
// end ;
29645: GO 29387
29647: POP
29648: POP
// end ;
29649: GO 28833
29651: POP
29652: POP
// end ;
29653: LD_VAR 0 1
29657: RET
// export function MC_Heal ; var i , j , tmp ; begin
29658: LD_INT 0
29660: PPUSH
29661: PPUSH
29662: PPUSH
29663: PPUSH
// if not mc_bases then
29664: LD_EXP 87
29668: NOT
29669: IFFALSE 29673
// exit ;
29671: GO 30075
// for i = 1 to mc_bases do
29673: LD_ADDR_VAR 0 2
29677: PUSH
29678: DOUBLE
29679: LD_INT 1
29681: DEC
29682: ST_TO_ADDR
29683: LD_EXP 87
29687: PUSH
29688: FOR_TO
29689: IFFALSE 30073
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
29691: LD_EXP 90
29695: PUSH
29696: LD_VAR 0 2
29700: ARRAY
29701: PUSH
29702: LD_INT 1
29704: ARRAY
29705: NOT
29706: PUSH
29707: LD_EXP 90
29711: PUSH
29712: LD_VAR 0 2
29716: ARRAY
29717: PUSH
29718: LD_INT 2
29720: ARRAY
29721: NOT
29722: AND
29723: IFFALSE 29761
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
29725: LD_ADDR_EXP 91
29729: PUSH
29730: LD_EXP 91
29734: PPUSH
29735: LD_VAR 0 2
29739: PPUSH
29740: EMPTY
29741: PPUSH
29742: CALL_OW 1
29746: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
29747: LD_VAR 0 2
29751: PPUSH
29752: LD_INT 102
29754: PPUSH
29755: CALL 23922 0 2
// continue ;
29759: GO 29688
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
29761: LD_ADDR_VAR 0 4
29765: PUSH
29766: LD_EXP 87
29770: PUSH
29771: LD_VAR 0 2
29775: ARRAY
29776: PPUSH
29777: LD_INT 25
29779: PUSH
29780: LD_INT 4
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PPUSH
29787: CALL_OW 72
29791: ST_TO_ADDR
// if not tmp then
29792: LD_VAR 0 4
29796: NOT
29797: IFFALSE 29801
// continue ;
29799: GO 29688
// if mc_taming [ i ] then
29801: LD_EXP 118
29805: PUSH
29806: LD_VAR 0 2
29810: ARRAY
29811: IFFALSE 29835
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
29813: LD_ADDR_EXP 118
29817: PUSH
29818: LD_EXP 118
29822: PPUSH
29823: LD_VAR 0 2
29827: PPUSH
29828: EMPTY
29829: PPUSH
29830: CALL_OW 1
29834: ST_TO_ADDR
// for j in tmp do
29835: LD_ADDR_VAR 0 3
29839: PUSH
29840: LD_VAR 0 4
29844: PUSH
29845: FOR_IN
29846: IFFALSE 30069
// begin if IsInUnit ( j ) then
29848: LD_VAR 0 3
29852: PPUSH
29853: CALL_OW 310
29857: IFFALSE 29868
// ComExitBuilding ( j ) ;
29859: LD_VAR 0 3
29863: PPUSH
29864: CALL_OW 122
// if not j in mc_healers [ i ] then
29868: LD_VAR 0 3
29872: PUSH
29873: LD_EXP 91
29877: PUSH
29878: LD_VAR 0 2
29882: ARRAY
29883: IN
29884: NOT
29885: IFFALSE 29931
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
29887: LD_ADDR_EXP 91
29891: PUSH
29892: LD_EXP 91
29896: PPUSH
29897: LD_VAR 0 2
29901: PUSH
29902: LD_EXP 91
29906: PUSH
29907: LD_VAR 0 2
29911: ARRAY
29912: PUSH
29913: LD_INT 1
29915: PLUS
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PPUSH
29921: LD_VAR 0 3
29925: PPUSH
29926: CALL 50080 0 3
29930: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
29931: LD_VAR 0 3
29935: PPUSH
29936: CALL_OW 110
29940: PUSH
29941: LD_INT 102
29943: NONEQUAL
29944: IFFALSE 29958
// SetTag ( j , 102 ) ;
29946: LD_VAR 0 3
29950: PPUSH
29951: LD_INT 102
29953: PPUSH
29954: CALL_OW 109
// Wait ( 3 ) ;
29958: LD_INT 3
29960: PPUSH
29961: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
29965: LD_EXP 90
29969: PUSH
29970: LD_VAR 0 2
29974: ARRAY
29975: PUSH
29976: LD_INT 1
29978: ARRAY
29979: IFFALSE 30011
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
29981: LD_VAR 0 3
29985: PPUSH
29986: LD_EXP 90
29990: PUSH
29991: LD_VAR 0 2
29995: ARRAY
29996: PUSH
29997: LD_INT 1
29999: ARRAY
30000: PUSH
30001: LD_INT 1
30003: ARRAY
30004: PPUSH
30005: CALL_OW 128
30009: GO 30067
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
30011: LD_VAR 0 3
30015: PPUSH
30016: CALL_OW 314
30020: NOT
30021: PUSH
30022: LD_EXP 90
30026: PUSH
30027: LD_VAR 0 2
30031: ARRAY
30032: PUSH
30033: LD_INT 2
30035: ARRAY
30036: AND
30037: IFFALSE 30067
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
30039: LD_VAR 0 3
30043: PPUSH
30044: LD_EXP 90
30048: PUSH
30049: LD_VAR 0 2
30053: ARRAY
30054: PUSH
30055: LD_INT 2
30057: ARRAY
30058: PUSH
30059: LD_INT 1
30061: ARRAY
30062: PPUSH
30063: CALL_OW 128
// end ;
30067: GO 29845
30069: POP
30070: POP
// end ;
30071: GO 29688
30073: POP
30074: POP
// end ;
30075: LD_VAR 0 1
30079: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
30080: LD_INT 0
30082: PPUSH
30083: PPUSH
30084: PPUSH
30085: PPUSH
30086: PPUSH
// if not mc_bases then
30087: LD_EXP 87
30091: NOT
30092: IFFALSE 30096
// exit ;
30094: GO 31239
// for i = 1 to mc_bases do
30096: LD_ADDR_VAR 0 2
30100: PUSH
30101: DOUBLE
30102: LD_INT 1
30104: DEC
30105: ST_TO_ADDR
30106: LD_EXP 87
30110: PUSH
30111: FOR_TO
30112: IFFALSE 31237
// begin if mc_scan [ i ] then
30114: LD_EXP 110
30118: PUSH
30119: LD_VAR 0 2
30123: ARRAY
30124: IFFALSE 30128
// continue ;
30126: GO 30111
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
30128: LD_EXP 92
30132: PUSH
30133: LD_VAR 0 2
30137: ARRAY
30138: NOT
30139: PUSH
30140: LD_EXP 94
30144: PUSH
30145: LD_VAR 0 2
30149: ARRAY
30150: NOT
30151: AND
30152: PUSH
30153: LD_EXP 93
30157: PUSH
30158: LD_VAR 0 2
30162: ARRAY
30163: AND
30164: IFFALSE 30202
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
30166: LD_ADDR_EXP 93
30170: PUSH
30171: LD_EXP 93
30175: PPUSH
30176: LD_VAR 0 2
30180: PPUSH
30181: EMPTY
30182: PPUSH
30183: CALL_OW 1
30187: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
30188: LD_VAR 0 2
30192: PPUSH
30193: LD_INT 103
30195: PPUSH
30196: CALL 23922 0 2
// continue ;
30200: GO 30111
// end ; if mc_construct_list [ i ] then
30202: LD_EXP 94
30206: PUSH
30207: LD_VAR 0 2
30211: ARRAY
30212: IFFALSE 30432
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
30214: LD_ADDR_VAR 0 4
30218: PUSH
30219: LD_EXP 87
30223: PUSH
30224: LD_VAR 0 2
30228: ARRAY
30229: PPUSH
30230: LD_INT 25
30232: PUSH
30233: LD_INT 2
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PPUSH
30240: CALL_OW 72
30244: PUSH
30245: LD_EXP 89
30249: PUSH
30250: LD_VAR 0 2
30254: ARRAY
30255: DIFF
30256: ST_TO_ADDR
// if not tmp then
30257: LD_VAR 0 4
30261: NOT
30262: IFFALSE 30266
// continue ;
30264: GO 30111
// for j in tmp do
30266: LD_ADDR_VAR 0 3
30270: PUSH
30271: LD_VAR 0 4
30275: PUSH
30276: FOR_IN
30277: IFFALSE 30428
// begin if not mc_builders [ i ] then
30279: LD_EXP 93
30283: PUSH
30284: LD_VAR 0 2
30288: ARRAY
30289: NOT
30290: IFFALSE 30348
// begin SetTag ( j , 103 ) ;
30292: LD_VAR 0 3
30296: PPUSH
30297: LD_INT 103
30299: PPUSH
30300: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
30304: LD_ADDR_EXP 93
30308: PUSH
30309: LD_EXP 93
30313: PPUSH
30314: LD_VAR 0 2
30318: PUSH
30319: LD_EXP 93
30323: PUSH
30324: LD_VAR 0 2
30328: ARRAY
30329: PUSH
30330: LD_INT 1
30332: PLUS
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PPUSH
30338: LD_VAR 0 3
30342: PPUSH
30343: CALL 50080 0 3
30347: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
30348: LD_VAR 0 3
30352: PPUSH
30353: CALL_OW 310
30357: IFFALSE 30368
// ComExitBuilding ( j ) ;
30359: LD_VAR 0 3
30363: PPUSH
30364: CALL_OW 122
// wait ( 3 ) ;
30368: LD_INT 3
30370: PPUSH
30371: CALL_OW 67
// if not mc_construct_list [ i ] then
30375: LD_EXP 94
30379: PUSH
30380: LD_VAR 0 2
30384: ARRAY
30385: NOT
30386: IFFALSE 30390
// break ;
30388: GO 30428
// if not HasTask ( j ) then
30390: LD_VAR 0 3
30394: PPUSH
30395: CALL_OW 314
30399: NOT
30400: IFFALSE 30426
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
30402: LD_VAR 0 3
30406: PPUSH
30407: LD_EXP 94
30411: PUSH
30412: LD_VAR 0 2
30416: ARRAY
30417: PUSH
30418: LD_INT 1
30420: ARRAY
30421: PPUSH
30422: CALL 52931 0 2
// end ;
30426: GO 30276
30428: POP
30429: POP
// end else
30430: GO 31235
// if mc_build_list [ i ] then
30432: LD_EXP 92
30436: PUSH
30437: LD_VAR 0 2
30441: ARRAY
30442: IFFALSE 31235
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
30444: LD_ADDR_VAR 0 5
30448: PUSH
30449: LD_EXP 87
30453: PUSH
30454: LD_VAR 0 2
30458: ARRAY
30459: PPUSH
30460: LD_INT 2
30462: PUSH
30463: LD_INT 30
30465: PUSH
30466: LD_INT 0
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 30
30475: PUSH
30476: LD_INT 1
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: LIST
30487: PPUSH
30488: CALL_OW 72
30492: ST_TO_ADDR
// if depot then
30493: LD_VAR 0 5
30497: IFFALSE 30515
// depot := depot [ 1 ] else
30499: LD_ADDR_VAR 0 5
30503: PUSH
30504: LD_VAR 0 5
30508: PUSH
30509: LD_INT 1
30511: ARRAY
30512: ST_TO_ADDR
30513: GO 30523
// depot := 0 ;
30515: LD_ADDR_VAR 0 5
30519: PUSH
30520: LD_INT 0
30522: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
30523: LD_EXP 92
30527: PUSH
30528: LD_VAR 0 2
30532: ARRAY
30533: PUSH
30534: LD_INT 1
30536: ARRAY
30537: PUSH
30538: LD_INT 1
30540: ARRAY
30541: PPUSH
30542: CALL 52761 0 1
30546: PUSH
30547: LD_EXP 87
30551: PUSH
30552: LD_VAR 0 2
30556: ARRAY
30557: PPUSH
30558: LD_INT 2
30560: PUSH
30561: LD_INT 30
30563: PUSH
30564: LD_INT 2
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 30
30573: PUSH
30574: LD_INT 3
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: LIST
30585: PPUSH
30586: CALL_OW 72
30590: NOT
30591: AND
30592: IFFALSE 30697
// begin for j = 1 to mc_build_list [ i ] do
30594: LD_ADDR_VAR 0 3
30598: PUSH
30599: DOUBLE
30600: LD_INT 1
30602: DEC
30603: ST_TO_ADDR
30604: LD_EXP 92
30608: PUSH
30609: LD_VAR 0 2
30613: ARRAY
30614: PUSH
30615: FOR_TO
30616: IFFALSE 30695
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
30618: LD_EXP 92
30622: PUSH
30623: LD_VAR 0 2
30627: ARRAY
30628: PUSH
30629: LD_VAR 0 3
30633: ARRAY
30634: PUSH
30635: LD_INT 1
30637: ARRAY
30638: PUSH
30639: LD_INT 2
30641: EQUAL
30642: IFFALSE 30693
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
30644: LD_ADDR_EXP 92
30648: PUSH
30649: LD_EXP 92
30653: PPUSH
30654: LD_VAR 0 2
30658: PPUSH
30659: LD_EXP 92
30663: PUSH
30664: LD_VAR 0 2
30668: ARRAY
30669: PPUSH
30670: LD_VAR 0 3
30674: PPUSH
30675: LD_INT 1
30677: PPUSH
30678: LD_INT 0
30680: PPUSH
30681: CALL 49498 0 4
30685: PPUSH
30686: CALL_OW 1
30690: ST_TO_ADDR
// break ;
30691: GO 30695
// end ;
30693: GO 30615
30695: POP
30696: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
30697: LD_EXP 92
30701: PUSH
30702: LD_VAR 0 2
30706: ARRAY
30707: PUSH
30708: LD_INT 1
30710: ARRAY
30711: PUSH
30712: LD_INT 1
30714: ARRAY
30715: PUSH
30716: LD_INT 0
30718: EQUAL
30719: PUSH
30720: LD_VAR 0 5
30724: PUSH
30725: LD_VAR 0 5
30729: PPUSH
30730: LD_EXP 92
30734: PUSH
30735: LD_VAR 0 2
30739: ARRAY
30740: PUSH
30741: LD_INT 1
30743: ARRAY
30744: PUSH
30745: LD_INT 1
30747: ARRAY
30748: PPUSH
30749: LD_EXP 92
30753: PUSH
30754: LD_VAR 0 2
30758: ARRAY
30759: PUSH
30760: LD_INT 1
30762: ARRAY
30763: PUSH
30764: LD_INT 2
30766: ARRAY
30767: PPUSH
30768: LD_EXP 92
30772: PUSH
30773: LD_VAR 0 2
30777: ARRAY
30778: PUSH
30779: LD_INT 1
30781: ARRAY
30782: PUSH
30783: LD_INT 3
30785: ARRAY
30786: PPUSH
30787: LD_EXP 92
30791: PUSH
30792: LD_VAR 0 2
30796: ARRAY
30797: PUSH
30798: LD_INT 1
30800: ARRAY
30801: PUSH
30802: LD_INT 4
30804: ARRAY
30805: PPUSH
30806: CALL 57495 0 5
30810: AND
30811: OR
30812: IFFALSE 31093
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
30814: LD_ADDR_VAR 0 4
30818: PUSH
30819: LD_EXP 87
30823: PUSH
30824: LD_VAR 0 2
30828: ARRAY
30829: PPUSH
30830: LD_INT 25
30832: PUSH
30833: LD_INT 2
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PPUSH
30840: CALL_OW 72
30844: PUSH
30845: LD_EXP 89
30849: PUSH
30850: LD_VAR 0 2
30854: ARRAY
30855: DIFF
30856: ST_TO_ADDR
// if not tmp then
30857: LD_VAR 0 4
30861: NOT
30862: IFFALSE 30866
// continue ;
30864: GO 30111
// for j in tmp do
30866: LD_ADDR_VAR 0 3
30870: PUSH
30871: LD_VAR 0 4
30875: PUSH
30876: FOR_IN
30877: IFFALSE 31089
// begin if not mc_builders [ i ] then
30879: LD_EXP 93
30883: PUSH
30884: LD_VAR 0 2
30888: ARRAY
30889: NOT
30890: IFFALSE 30948
// begin SetTag ( j , 103 ) ;
30892: LD_VAR 0 3
30896: PPUSH
30897: LD_INT 103
30899: PPUSH
30900: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
30904: LD_ADDR_EXP 93
30908: PUSH
30909: LD_EXP 93
30913: PPUSH
30914: LD_VAR 0 2
30918: PUSH
30919: LD_EXP 93
30923: PUSH
30924: LD_VAR 0 2
30928: ARRAY
30929: PUSH
30930: LD_INT 1
30932: PLUS
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PPUSH
30938: LD_VAR 0 3
30942: PPUSH
30943: CALL 50080 0 3
30947: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
30948: LD_VAR 0 3
30952: PPUSH
30953: CALL_OW 310
30957: IFFALSE 30968
// ComExitBuilding ( j ) ;
30959: LD_VAR 0 3
30963: PPUSH
30964: CALL_OW 122
// wait ( 3 ) ;
30968: LD_INT 3
30970: PPUSH
30971: CALL_OW 67
// if not mc_build_list [ i ] then
30975: LD_EXP 92
30979: PUSH
30980: LD_VAR 0 2
30984: ARRAY
30985: NOT
30986: IFFALSE 30990
// break ;
30988: GO 31089
// if not HasTask ( j ) then
30990: LD_VAR 0 3
30994: PPUSH
30995: CALL_OW 314
30999: NOT
31000: IFFALSE 31087
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
31002: LD_VAR 0 3
31006: PPUSH
31007: LD_EXP 92
31011: PUSH
31012: LD_VAR 0 2
31016: ARRAY
31017: PUSH
31018: LD_INT 1
31020: ARRAY
31021: PUSH
31022: LD_INT 1
31024: ARRAY
31025: PPUSH
31026: LD_EXP 92
31030: PUSH
31031: LD_VAR 0 2
31035: ARRAY
31036: PUSH
31037: LD_INT 1
31039: ARRAY
31040: PUSH
31041: LD_INT 2
31043: ARRAY
31044: PPUSH
31045: LD_EXP 92
31049: PUSH
31050: LD_VAR 0 2
31054: ARRAY
31055: PUSH
31056: LD_INT 1
31058: ARRAY
31059: PUSH
31060: LD_INT 3
31062: ARRAY
31063: PPUSH
31064: LD_EXP 92
31068: PUSH
31069: LD_VAR 0 2
31073: ARRAY
31074: PUSH
31075: LD_INT 1
31077: ARRAY
31078: PUSH
31079: LD_INT 4
31081: ARRAY
31082: PPUSH
31083: CALL_OW 145
// end ;
31087: GO 30876
31089: POP
31090: POP
// end else
31091: GO 31235
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
31093: LD_EXP 87
31097: PUSH
31098: LD_VAR 0 2
31102: ARRAY
31103: PPUSH
31104: LD_EXP 92
31108: PUSH
31109: LD_VAR 0 2
31113: ARRAY
31114: PUSH
31115: LD_INT 1
31117: ARRAY
31118: PUSH
31119: LD_INT 1
31121: ARRAY
31122: PPUSH
31123: LD_EXP 92
31127: PUSH
31128: LD_VAR 0 2
31132: ARRAY
31133: PUSH
31134: LD_INT 1
31136: ARRAY
31137: PUSH
31138: LD_INT 2
31140: ARRAY
31141: PPUSH
31142: LD_EXP 92
31146: PUSH
31147: LD_VAR 0 2
31151: ARRAY
31152: PUSH
31153: LD_INT 1
31155: ARRAY
31156: PUSH
31157: LD_INT 3
31159: ARRAY
31160: PPUSH
31161: LD_EXP 92
31165: PUSH
31166: LD_VAR 0 2
31170: ARRAY
31171: PUSH
31172: LD_INT 1
31174: ARRAY
31175: PUSH
31176: LD_INT 4
31178: ARRAY
31179: PPUSH
31180: CALL 56831 0 5
31184: NOT
31185: IFFALSE 31235
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
31187: LD_ADDR_EXP 92
31191: PUSH
31192: LD_EXP 92
31196: PPUSH
31197: LD_VAR 0 2
31201: PPUSH
31202: LD_EXP 92
31206: PUSH
31207: LD_VAR 0 2
31211: ARRAY
31212: PPUSH
31213: LD_INT 1
31215: PPUSH
31216: LD_INT 1
31218: NEG
31219: PPUSH
31220: LD_INT 0
31222: PPUSH
31223: CALL 49498 0 4
31227: PPUSH
31228: CALL_OW 1
31232: ST_TO_ADDR
// continue ;
31233: GO 30111
// end ; end ; end ;
31235: GO 30111
31237: POP
31238: POP
// end ;
31239: LD_VAR 0 1
31243: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
31244: LD_INT 0
31246: PPUSH
31247: PPUSH
31248: PPUSH
31249: PPUSH
31250: PPUSH
31251: PPUSH
// if not mc_bases then
31252: LD_EXP 87
31256: NOT
31257: IFFALSE 31261
// exit ;
31259: GO 31688
// for i = 1 to mc_bases do
31261: LD_ADDR_VAR 0 2
31265: PUSH
31266: DOUBLE
31267: LD_INT 1
31269: DEC
31270: ST_TO_ADDR
31271: LD_EXP 87
31275: PUSH
31276: FOR_TO
31277: IFFALSE 31686
// begin tmp := mc_build_upgrade [ i ] ;
31279: LD_ADDR_VAR 0 4
31283: PUSH
31284: LD_EXP 119
31288: PUSH
31289: LD_VAR 0 2
31293: ARRAY
31294: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
31295: LD_ADDR_VAR 0 6
31299: PUSH
31300: LD_EXP 120
31304: PUSH
31305: LD_VAR 0 2
31309: ARRAY
31310: PPUSH
31311: LD_INT 2
31313: PUSH
31314: LD_INT 30
31316: PUSH
31317: LD_INT 6
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 30
31326: PUSH
31327: LD_INT 7
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: LIST
31338: PPUSH
31339: CALL_OW 72
31343: ST_TO_ADDR
// if not tmp and not lab then
31344: LD_VAR 0 4
31348: NOT
31349: PUSH
31350: LD_VAR 0 6
31354: NOT
31355: AND
31356: IFFALSE 31360
// continue ;
31358: GO 31276
// if tmp then
31360: LD_VAR 0 4
31364: IFFALSE 31484
// for j in tmp do
31366: LD_ADDR_VAR 0 3
31370: PUSH
31371: LD_VAR 0 4
31375: PUSH
31376: FOR_IN
31377: IFFALSE 31482
// begin if UpgradeCost ( j ) then
31379: LD_VAR 0 3
31383: PPUSH
31384: CALL 56491 0 1
31388: IFFALSE 31480
// begin ComUpgrade ( j ) ;
31390: LD_VAR 0 3
31394: PPUSH
31395: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
31399: LD_ADDR_EXP 119
31403: PUSH
31404: LD_EXP 119
31408: PPUSH
31409: LD_VAR 0 2
31413: PPUSH
31414: LD_EXP 119
31418: PUSH
31419: LD_VAR 0 2
31423: ARRAY
31424: PUSH
31425: LD_VAR 0 3
31429: DIFF
31430: PPUSH
31431: CALL_OW 1
31435: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
31436: LD_ADDR_EXP 94
31440: PUSH
31441: LD_EXP 94
31445: PPUSH
31446: LD_VAR 0 2
31450: PUSH
31451: LD_EXP 94
31455: PUSH
31456: LD_VAR 0 2
31460: ARRAY
31461: PUSH
31462: LD_INT 1
31464: PLUS
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PPUSH
31470: LD_VAR 0 3
31474: PPUSH
31475: CALL 50080 0 3
31479: ST_TO_ADDR
// end ; end ;
31480: GO 31376
31482: POP
31483: POP
// if not lab or not mc_lab_upgrade [ i ] then
31484: LD_VAR 0 6
31488: NOT
31489: PUSH
31490: LD_EXP 121
31494: PUSH
31495: LD_VAR 0 2
31499: ARRAY
31500: NOT
31501: OR
31502: IFFALSE 31506
// continue ;
31504: GO 31276
// for j in lab do
31506: LD_ADDR_VAR 0 3
31510: PUSH
31511: LD_VAR 0 6
31515: PUSH
31516: FOR_IN
31517: IFFALSE 31682
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
31519: LD_VAR 0 3
31523: PPUSH
31524: CALL_OW 266
31528: PUSH
31529: LD_INT 6
31531: PUSH
31532: LD_INT 7
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: IN
31539: PUSH
31540: LD_VAR 0 3
31544: PPUSH
31545: CALL_OW 461
31549: PUSH
31550: LD_INT 1
31552: NONEQUAL
31553: AND
31554: IFFALSE 31680
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
31556: LD_VAR 0 3
31560: PPUSH
31561: LD_EXP 121
31565: PUSH
31566: LD_VAR 0 2
31570: ARRAY
31571: PUSH
31572: LD_INT 1
31574: ARRAY
31575: PPUSH
31576: CALL 56696 0 2
31580: IFFALSE 31680
// begin ComCancel ( j ) ;
31582: LD_VAR 0 3
31586: PPUSH
31587: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
31591: LD_VAR 0 3
31595: PPUSH
31596: LD_EXP 121
31600: PUSH
31601: LD_VAR 0 2
31605: ARRAY
31606: PUSH
31607: LD_INT 1
31609: ARRAY
31610: PPUSH
31611: CALL_OW 207
// if not j in mc_construct_list [ i ] then
31615: LD_VAR 0 3
31619: PUSH
31620: LD_EXP 94
31624: PUSH
31625: LD_VAR 0 2
31629: ARRAY
31630: IN
31631: NOT
31632: IFFALSE 31678
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
31634: LD_ADDR_EXP 94
31638: PUSH
31639: LD_EXP 94
31643: PPUSH
31644: LD_VAR 0 2
31648: PUSH
31649: LD_EXP 94
31653: PUSH
31654: LD_VAR 0 2
31658: ARRAY
31659: PUSH
31660: LD_INT 1
31662: PLUS
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PPUSH
31668: LD_VAR 0 3
31672: PPUSH
31673: CALL 50080 0 3
31677: ST_TO_ADDR
// break ;
31678: GO 31682
// end ; end ; end ;
31680: GO 31516
31682: POP
31683: POP
// end ;
31684: GO 31276
31686: POP
31687: POP
// end ;
31688: LD_VAR 0 1
31692: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
31693: LD_INT 0
31695: PPUSH
31696: PPUSH
31697: PPUSH
31698: PPUSH
31699: PPUSH
31700: PPUSH
31701: PPUSH
31702: PPUSH
31703: PPUSH
// if not mc_bases then
31704: LD_EXP 87
31708: NOT
31709: IFFALSE 31713
// exit ;
31711: GO 32118
// for i = 1 to mc_bases do
31713: LD_ADDR_VAR 0 2
31717: PUSH
31718: DOUBLE
31719: LD_INT 1
31721: DEC
31722: ST_TO_ADDR
31723: LD_EXP 87
31727: PUSH
31728: FOR_TO
31729: IFFALSE 32116
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
31731: LD_EXP 95
31735: PUSH
31736: LD_VAR 0 2
31740: ARRAY
31741: NOT
31742: PUSH
31743: LD_EXP 87
31747: PUSH
31748: LD_VAR 0 2
31752: ARRAY
31753: PPUSH
31754: LD_INT 30
31756: PUSH
31757: LD_INT 3
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PPUSH
31764: CALL_OW 72
31768: NOT
31769: OR
31770: IFFALSE 31774
// continue ;
31772: GO 31728
// busy := false ;
31774: LD_ADDR_VAR 0 8
31778: PUSH
31779: LD_INT 0
31781: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
31782: LD_ADDR_VAR 0 4
31786: PUSH
31787: LD_EXP 87
31791: PUSH
31792: LD_VAR 0 2
31796: ARRAY
31797: PPUSH
31798: LD_INT 30
31800: PUSH
31801: LD_INT 3
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PPUSH
31808: CALL_OW 72
31812: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
31813: LD_ADDR_VAR 0 6
31817: PUSH
31818: LD_EXP 95
31822: PUSH
31823: LD_VAR 0 2
31827: ARRAY
31828: PPUSH
31829: LD_INT 2
31831: PUSH
31832: LD_INT 30
31834: PUSH
31835: LD_INT 32
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 30
31844: PUSH
31845: LD_INT 33
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: LIST
31856: PPUSH
31857: CALL_OW 72
31861: ST_TO_ADDR
// if not t then
31862: LD_VAR 0 6
31866: NOT
31867: IFFALSE 31871
// continue ;
31869: GO 31728
// for j in tmp do
31871: LD_ADDR_VAR 0 3
31875: PUSH
31876: LD_VAR 0 4
31880: PUSH
31881: FOR_IN
31882: IFFALSE 31912
// if not BuildingStatus ( j ) = bs_idle then
31884: LD_VAR 0 3
31888: PPUSH
31889: CALL_OW 461
31893: PUSH
31894: LD_INT 2
31896: EQUAL
31897: NOT
31898: IFFALSE 31910
// begin busy := true ;
31900: LD_ADDR_VAR 0 8
31904: PUSH
31905: LD_INT 1
31907: ST_TO_ADDR
// break ;
31908: GO 31912
// end ;
31910: GO 31881
31912: POP
31913: POP
// if busy then
31914: LD_VAR 0 8
31918: IFFALSE 31922
// continue ;
31920: GO 31728
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
31922: LD_ADDR_VAR 0 7
31926: PUSH
31927: LD_VAR 0 6
31931: PPUSH
31932: LD_INT 35
31934: PUSH
31935: LD_INT 0
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PPUSH
31942: CALL_OW 72
31946: ST_TO_ADDR
// if tw then
31947: LD_VAR 0 7
31951: IFFALSE 32028
// begin tw := tw [ 1 ] ;
31953: LD_ADDR_VAR 0 7
31957: PUSH
31958: LD_VAR 0 7
31962: PUSH
31963: LD_INT 1
31965: ARRAY
31966: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
31967: LD_ADDR_VAR 0 9
31971: PUSH
31972: LD_VAR 0 7
31976: PPUSH
31977: LD_EXP 112
31981: PUSH
31982: LD_VAR 0 2
31986: ARRAY
31987: PPUSH
31988: CALL 55050 0 2
31992: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
31993: LD_EXP 126
31997: PUSH
31998: LD_VAR 0 2
32002: ARRAY
32003: IFFALSE 32026
// if not weapon in mc_allowed_tower_weapons [ i ] then
32005: LD_VAR 0 9
32009: PUSH
32010: LD_EXP 126
32014: PUSH
32015: LD_VAR 0 2
32019: ARRAY
32020: IN
32021: NOT
32022: IFFALSE 32026
// continue ;
32024: GO 31728
// end else
32026: GO 32091
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
32028: LD_ADDR_VAR 0 5
32032: PUSH
32033: LD_EXP 95
32037: PUSH
32038: LD_VAR 0 2
32042: ARRAY
32043: PPUSH
32044: LD_VAR 0 4
32048: PPUSH
32049: CALL 80552 0 2
32053: ST_TO_ADDR
// if not tmp2 then
32054: LD_VAR 0 5
32058: NOT
32059: IFFALSE 32063
// continue ;
32061: GO 31728
// tw := tmp2 [ 1 ] ;
32063: LD_ADDR_VAR 0 7
32067: PUSH
32068: LD_VAR 0 5
32072: PUSH
32073: LD_INT 1
32075: ARRAY
32076: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
32077: LD_ADDR_VAR 0 9
32081: PUSH
32082: LD_VAR 0 5
32086: PUSH
32087: LD_INT 2
32089: ARRAY
32090: ST_TO_ADDR
// end ; if not weapon then
32091: LD_VAR 0 9
32095: NOT
32096: IFFALSE 32100
// continue ;
32098: GO 31728
// ComPlaceWeapon ( tw , weapon ) ;
32100: LD_VAR 0 7
32104: PPUSH
32105: LD_VAR 0 9
32109: PPUSH
32110: CALL_OW 148
// end ;
32114: GO 31728
32116: POP
32117: POP
// end ;
32118: LD_VAR 0 1
32122: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
32123: LD_INT 0
32125: PPUSH
32126: PPUSH
32127: PPUSH
32128: PPUSH
32129: PPUSH
32130: PPUSH
// if not mc_bases then
32131: LD_EXP 87
32135: NOT
32136: IFFALSE 32140
// exit ;
32138: GO 32916
// for i = 1 to mc_bases do
32140: LD_ADDR_VAR 0 2
32144: PUSH
32145: DOUBLE
32146: LD_INT 1
32148: DEC
32149: ST_TO_ADDR
32150: LD_EXP 87
32154: PUSH
32155: FOR_TO
32156: IFFALSE 32914
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
32158: LD_EXP 100
32162: PUSH
32163: LD_VAR 0 2
32167: ARRAY
32168: NOT
32169: PUSH
32170: LD_EXP 100
32174: PUSH
32175: LD_VAR 0 2
32179: ARRAY
32180: PUSH
32181: LD_EXP 101
32185: PUSH
32186: LD_VAR 0 2
32190: ARRAY
32191: EQUAL
32192: OR
32193: PUSH
32194: LD_EXP 110
32198: PUSH
32199: LD_VAR 0 2
32203: ARRAY
32204: OR
32205: IFFALSE 32209
// continue ;
32207: GO 32155
// if mc_miners [ i ] then
32209: LD_EXP 101
32213: PUSH
32214: LD_VAR 0 2
32218: ARRAY
32219: IFFALSE 32601
// begin for j = mc_miners [ i ] downto 1 do
32221: LD_ADDR_VAR 0 3
32225: PUSH
32226: DOUBLE
32227: LD_EXP 101
32231: PUSH
32232: LD_VAR 0 2
32236: ARRAY
32237: INC
32238: ST_TO_ADDR
32239: LD_INT 1
32241: PUSH
32242: FOR_DOWNTO
32243: IFFALSE 32599
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
32245: LD_EXP 101
32249: PUSH
32250: LD_VAR 0 2
32254: ARRAY
32255: PUSH
32256: LD_VAR 0 3
32260: ARRAY
32261: PPUSH
32262: CALL_OW 301
32266: PUSH
32267: LD_EXP 101
32271: PUSH
32272: LD_VAR 0 2
32276: ARRAY
32277: PUSH
32278: LD_VAR 0 3
32282: ARRAY
32283: PPUSH
32284: CALL_OW 257
32288: PUSH
32289: LD_INT 1
32291: NONEQUAL
32292: OR
32293: IFFALSE 32356
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
32295: LD_ADDR_VAR 0 5
32299: PUSH
32300: LD_EXP 101
32304: PUSH
32305: LD_VAR 0 2
32309: ARRAY
32310: PUSH
32311: LD_EXP 101
32315: PUSH
32316: LD_VAR 0 2
32320: ARRAY
32321: PUSH
32322: LD_VAR 0 3
32326: ARRAY
32327: DIFF
32328: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
32329: LD_ADDR_EXP 101
32333: PUSH
32334: LD_EXP 101
32338: PPUSH
32339: LD_VAR 0 2
32343: PPUSH
32344: LD_VAR 0 5
32348: PPUSH
32349: CALL_OW 1
32353: ST_TO_ADDR
// continue ;
32354: GO 32242
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
32356: LD_EXP 101
32360: PUSH
32361: LD_VAR 0 2
32365: ARRAY
32366: PUSH
32367: LD_VAR 0 3
32371: ARRAY
32372: PPUSH
32373: CALL_OW 257
32377: PUSH
32378: LD_INT 1
32380: EQUAL
32381: PUSH
32382: LD_EXP 101
32386: PUSH
32387: LD_VAR 0 2
32391: ARRAY
32392: PUSH
32393: LD_VAR 0 3
32397: ARRAY
32398: PPUSH
32399: CALL_OW 459
32403: NOT
32404: AND
32405: PUSH
32406: LD_EXP 101
32410: PUSH
32411: LD_VAR 0 2
32415: ARRAY
32416: PUSH
32417: LD_VAR 0 3
32421: ARRAY
32422: PPUSH
32423: CALL_OW 314
32427: NOT
32428: AND
32429: IFFALSE 32597
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
32431: LD_EXP 101
32435: PUSH
32436: LD_VAR 0 2
32440: ARRAY
32441: PUSH
32442: LD_VAR 0 3
32446: ARRAY
32447: PPUSH
32448: CALL_OW 310
32452: IFFALSE 32475
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
32454: LD_EXP 101
32458: PUSH
32459: LD_VAR 0 2
32463: ARRAY
32464: PUSH
32465: LD_VAR 0 3
32469: ARRAY
32470: PPUSH
32471: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
32475: LD_EXP 101
32479: PUSH
32480: LD_VAR 0 2
32484: ARRAY
32485: PUSH
32486: LD_VAR 0 3
32490: ARRAY
32491: PPUSH
32492: CALL_OW 314
32496: NOT
32497: IFFALSE 32597
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
32499: LD_EXP 101
32503: PUSH
32504: LD_VAR 0 2
32508: ARRAY
32509: PUSH
32510: LD_VAR 0 3
32514: ARRAY
32515: PPUSH
32516: LD_EXP 100
32520: PUSH
32521: LD_VAR 0 2
32525: ARRAY
32526: PUSH
32527: LD_VAR 0 3
32531: PUSH
32532: LD_EXP 100
32536: PUSH
32537: LD_VAR 0 2
32541: ARRAY
32542: MOD
32543: PUSH
32544: LD_INT 1
32546: PLUS
32547: ARRAY
32548: PUSH
32549: LD_INT 1
32551: ARRAY
32552: PPUSH
32553: LD_EXP 100
32557: PUSH
32558: LD_VAR 0 2
32562: ARRAY
32563: PUSH
32564: LD_VAR 0 3
32568: PUSH
32569: LD_EXP 100
32573: PUSH
32574: LD_VAR 0 2
32578: ARRAY
32579: MOD
32580: PUSH
32581: LD_INT 1
32583: PLUS
32584: ARRAY
32585: PUSH
32586: LD_INT 2
32588: ARRAY
32589: PPUSH
32590: LD_INT 0
32592: PPUSH
32593: CALL_OW 193
// end ; end ;
32597: GO 32242
32599: POP
32600: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
32601: LD_ADDR_VAR 0 5
32605: PUSH
32606: LD_EXP 87
32610: PUSH
32611: LD_VAR 0 2
32615: ARRAY
32616: PPUSH
32617: LD_INT 2
32619: PUSH
32620: LD_INT 30
32622: PUSH
32623: LD_INT 4
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 30
32632: PUSH
32633: LD_INT 5
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 30
32642: PUSH
32643: LD_INT 32
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: PPUSH
32656: CALL_OW 72
32660: ST_TO_ADDR
// if not tmp then
32661: LD_VAR 0 5
32665: NOT
32666: IFFALSE 32670
// continue ;
32668: GO 32155
// list := [ ] ;
32670: LD_ADDR_VAR 0 6
32674: PUSH
32675: EMPTY
32676: ST_TO_ADDR
// for j in tmp do
32677: LD_ADDR_VAR 0 3
32681: PUSH
32682: LD_VAR 0 5
32686: PUSH
32687: FOR_IN
32688: IFFALSE 32757
// begin for k in UnitsInside ( j ) do
32690: LD_ADDR_VAR 0 4
32694: PUSH
32695: LD_VAR 0 3
32699: PPUSH
32700: CALL_OW 313
32704: PUSH
32705: FOR_IN
32706: IFFALSE 32753
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
32708: LD_VAR 0 4
32712: PPUSH
32713: CALL_OW 257
32717: PUSH
32718: LD_INT 1
32720: EQUAL
32721: PUSH
32722: LD_VAR 0 4
32726: PPUSH
32727: CALL_OW 459
32731: NOT
32732: AND
32733: IFFALSE 32751
// list := list ^ k ;
32735: LD_ADDR_VAR 0 6
32739: PUSH
32740: LD_VAR 0 6
32744: PUSH
32745: LD_VAR 0 4
32749: ADD
32750: ST_TO_ADDR
32751: GO 32705
32753: POP
32754: POP
// end ;
32755: GO 32687
32757: POP
32758: POP
// list := list diff mc_miners [ i ] ;
32759: LD_ADDR_VAR 0 6
32763: PUSH
32764: LD_VAR 0 6
32768: PUSH
32769: LD_EXP 101
32773: PUSH
32774: LD_VAR 0 2
32778: ARRAY
32779: DIFF
32780: ST_TO_ADDR
// if not list then
32781: LD_VAR 0 6
32785: NOT
32786: IFFALSE 32790
// continue ;
32788: GO 32155
// k := mc_mines [ i ] - mc_miners [ i ] ;
32790: LD_ADDR_VAR 0 4
32794: PUSH
32795: LD_EXP 100
32799: PUSH
32800: LD_VAR 0 2
32804: ARRAY
32805: PUSH
32806: LD_EXP 101
32810: PUSH
32811: LD_VAR 0 2
32815: ARRAY
32816: MINUS
32817: ST_TO_ADDR
// if k > list then
32818: LD_VAR 0 4
32822: PUSH
32823: LD_VAR 0 6
32827: GREATER
32828: IFFALSE 32840
// k := list ;
32830: LD_ADDR_VAR 0 4
32834: PUSH
32835: LD_VAR 0 6
32839: ST_TO_ADDR
// for j = 1 to k do
32840: LD_ADDR_VAR 0 3
32844: PUSH
32845: DOUBLE
32846: LD_INT 1
32848: DEC
32849: ST_TO_ADDR
32850: LD_VAR 0 4
32854: PUSH
32855: FOR_TO
32856: IFFALSE 32910
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
32858: LD_ADDR_EXP 101
32862: PUSH
32863: LD_EXP 101
32867: PPUSH
32868: LD_VAR 0 2
32872: PUSH
32873: LD_EXP 101
32877: PUSH
32878: LD_VAR 0 2
32882: ARRAY
32883: PUSH
32884: LD_INT 1
32886: PLUS
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PPUSH
32892: LD_VAR 0 6
32896: PUSH
32897: LD_VAR 0 3
32901: ARRAY
32902: PPUSH
32903: CALL 50080 0 3
32907: ST_TO_ADDR
32908: GO 32855
32910: POP
32911: POP
// end ;
32912: GO 32155
32914: POP
32915: POP
// end ;
32916: LD_VAR 0 1
32920: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
32921: LD_INT 0
32923: PPUSH
32924: PPUSH
32925: PPUSH
32926: PPUSH
32927: PPUSH
32928: PPUSH
32929: PPUSH
32930: PPUSH
32931: PPUSH
32932: PPUSH
// if not mc_bases then
32933: LD_EXP 87
32937: NOT
32938: IFFALSE 32942
// exit ;
32940: GO 34692
// for i = 1 to mc_bases do
32942: LD_ADDR_VAR 0 2
32946: PUSH
32947: DOUBLE
32948: LD_INT 1
32950: DEC
32951: ST_TO_ADDR
32952: LD_EXP 87
32956: PUSH
32957: FOR_TO
32958: IFFALSE 34690
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
32960: LD_EXP 87
32964: PUSH
32965: LD_VAR 0 2
32969: ARRAY
32970: NOT
32971: PUSH
32972: LD_EXP 94
32976: PUSH
32977: LD_VAR 0 2
32981: ARRAY
32982: OR
32983: IFFALSE 32987
// continue ;
32985: GO 32957
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
32987: LD_EXP 103
32991: PUSH
32992: LD_VAR 0 2
32996: ARRAY
32997: NOT
32998: PUSH
32999: LD_EXP 104
33003: PUSH
33004: LD_VAR 0 2
33008: ARRAY
33009: AND
33010: IFFALSE 33048
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
33012: LD_ADDR_EXP 104
33016: PUSH
33017: LD_EXP 104
33021: PPUSH
33022: LD_VAR 0 2
33026: PPUSH
33027: EMPTY
33028: PPUSH
33029: CALL_OW 1
33033: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
33034: LD_VAR 0 2
33038: PPUSH
33039: LD_INT 107
33041: PPUSH
33042: CALL 23922 0 2
// continue ;
33046: GO 32957
// end ; target := [ ] ;
33048: LD_ADDR_VAR 0 6
33052: PUSH
33053: EMPTY
33054: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
33055: LD_ADDR_VAR 0 3
33059: PUSH
33060: DOUBLE
33061: LD_EXP 103
33065: PUSH
33066: LD_VAR 0 2
33070: ARRAY
33071: INC
33072: ST_TO_ADDR
33073: LD_INT 1
33075: PUSH
33076: FOR_DOWNTO
33077: IFFALSE 33337
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
33079: LD_EXP 103
33083: PUSH
33084: LD_VAR 0 2
33088: ARRAY
33089: PUSH
33090: LD_VAR 0 3
33094: ARRAY
33095: PUSH
33096: LD_INT 2
33098: ARRAY
33099: PPUSH
33100: LD_EXP 103
33104: PUSH
33105: LD_VAR 0 2
33109: ARRAY
33110: PUSH
33111: LD_VAR 0 3
33115: ARRAY
33116: PUSH
33117: LD_INT 3
33119: ARRAY
33120: PPUSH
33121: CALL_OW 488
33125: PUSH
33126: LD_EXP 103
33130: PUSH
33131: LD_VAR 0 2
33135: ARRAY
33136: PUSH
33137: LD_VAR 0 3
33141: ARRAY
33142: PUSH
33143: LD_INT 2
33145: ARRAY
33146: PPUSH
33147: LD_EXP 103
33151: PUSH
33152: LD_VAR 0 2
33156: ARRAY
33157: PUSH
33158: LD_VAR 0 3
33162: ARRAY
33163: PUSH
33164: LD_INT 3
33166: ARRAY
33167: PPUSH
33168: CALL_OW 284
33172: PUSH
33173: LD_INT 0
33175: EQUAL
33176: AND
33177: IFFALSE 33232
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
33179: LD_ADDR_VAR 0 5
33183: PUSH
33184: LD_EXP 103
33188: PUSH
33189: LD_VAR 0 2
33193: ARRAY
33194: PPUSH
33195: LD_VAR 0 3
33199: PPUSH
33200: CALL_OW 3
33204: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
33205: LD_ADDR_EXP 103
33209: PUSH
33210: LD_EXP 103
33214: PPUSH
33215: LD_VAR 0 2
33219: PPUSH
33220: LD_VAR 0 5
33224: PPUSH
33225: CALL_OW 1
33229: ST_TO_ADDR
// continue ;
33230: GO 33076
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
33232: LD_EXP 87
33236: PUSH
33237: LD_VAR 0 2
33241: ARRAY
33242: PUSH
33243: LD_INT 1
33245: ARRAY
33246: PPUSH
33247: CALL_OW 255
33251: PPUSH
33252: LD_EXP 103
33256: PUSH
33257: LD_VAR 0 2
33261: ARRAY
33262: PUSH
33263: LD_VAR 0 3
33267: ARRAY
33268: PUSH
33269: LD_INT 2
33271: ARRAY
33272: PPUSH
33273: LD_EXP 103
33277: PUSH
33278: LD_VAR 0 2
33282: ARRAY
33283: PUSH
33284: LD_VAR 0 3
33288: ARRAY
33289: PUSH
33290: LD_INT 3
33292: ARRAY
33293: PPUSH
33294: LD_INT 30
33296: PPUSH
33297: CALL 50976 0 4
33301: PUSH
33302: LD_INT 4
33304: ARRAY
33305: PUSH
33306: LD_INT 0
33308: EQUAL
33309: IFFALSE 33335
// begin target := mc_crates [ i ] [ j ] ;
33311: LD_ADDR_VAR 0 6
33315: PUSH
33316: LD_EXP 103
33320: PUSH
33321: LD_VAR 0 2
33325: ARRAY
33326: PUSH
33327: LD_VAR 0 3
33331: ARRAY
33332: ST_TO_ADDR
// break ;
33333: GO 33337
// end ; end ;
33335: GO 33076
33337: POP
33338: POP
// if not target then
33339: LD_VAR 0 6
33343: NOT
33344: IFFALSE 33348
// continue ;
33346: GO 32957
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
33348: LD_ADDR_VAR 0 7
33352: PUSH
33353: LD_EXP 106
33357: PUSH
33358: LD_VAR 0 2
33362: ARRAY
33363: PPUSH
33364: LD_INT 2
33366: PUSH
33367: LD_INT 3
33369: PUSH
33370: LD_INT 58
33372: PUSH
33373: EMPTY
33374: LIST
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 61
33382: PUSH
33383: EMPTY
33384: LIST
33385: PUSH
33386: LD_INT 33
33388: PUSH
33389: LD_INT 5
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 33
33398: PUSH
33399: LD_INT 3
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 2
33415: PUSH
33416: LD_INT 34
33418: PUSH
33419: LD_INT 32
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 34
33428: PUSH
33429: LD_INT 51
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 34
33438: PUSH
33439: LD_INT 12
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PPUSH
33456: CALL_OW 72
33460: ST_TO_ADDR
// if not cargo then
33461: LD_VAR 0 7
33465: NOT
33466: IFFALSE 34109
// begin if mc_crates_collector [ i ] < 5 then
33468: LD_EXP 104
33472: PUSH
33473: LD_VAR 0 2
33477: ARRAY
33478: PUSH
33479: LD_INT 5
33481: LESS
33482: IFFALSE 33848
// begin if mc_ape [ i ] then
33484: LD_EXP 116
33488: PUSH
33489: LD_VAR 0 2
33493: ARRAY
33494: IFFALSE 33541
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
33496: LD_ADDR_VAR 0 5
33500: PUSH
33501: LD_EXP 116
33505: PUSH
33506: LD_VAR 0 2
33510: ARRAY
33511: PPUSH
33512: LD_INT 25
33514: PUSH
33515: LD_INT 16
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 24
33524: PUSH
33525: LD_INT 750
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PPUSH
33536: CALL_OW 72
33540: ST_TO_ADDR
// if not tmp then
33541: LD_VAR 0 5
33545: NOT
33546: IFFALSE 33593
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
33548: LD_ADDR_VAR 0 5
33552: PUSH
33553: LD_EXP 87
33557: PUSH
33558: LD_VAR 0 2
33562: ARRAY
33563: PPUSH
33564: LD_INT 25
33566: PUSH
33567: LD_INT 2
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 24
33576: PUSH
33577: LD_INT 750
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PPUSH
33588: CALL_OW 72
33592: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
33593: LD_EXP 116
33597: PUSH
33598: LD_VAR 0 2
33602: ARRAY
33603: PUSH
33604: LD_EXP 87
33608: PUSH
33609: LD_VAR 0 2
33613: ARRAY
33614: PPUSH
33615: LD_INT 25
33617: PUSH
33618: LD_INT 2
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 24
33627: PUSH
33628: LD_INT 750
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PPUSH
33639: CALL_OW 72
33643: AND
33644: PUSH
33645: LD_VAR 0 5
33649: PUSH
33650: LD_INT 5
33652: LESS
33653: AND
33654: IFFALSE 33736
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
33656: LD_ADDR_VAR 0 3
33660: PUSH
33661: LD_EXP 87
33665: PUSH
33666: LD_VAR 0 2
33670: ARRAY
33671: PPUSH
33672: LD_INT 25
33674: PUSH
33675: LD_INT 2
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 24
33684: PUSH
33685: LD_INT 750
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PPUSH
33696: CALL_OW 72
33700: PUSH
33701: FOR_IN
33702: IFFALSE 33734
// begin tmp := tmp union j ;
33704: LD_ADDR_VAR 0 5
33708: PUSH
33709: LD_VAR 0 5
33713: PUSH
33714: LD_VAR 0 3
33718: UNION
33719: ST_TO_ADDR
// if tmp >= 5 then
33720: LD_VAR 0 5
33724: PUSH
33725: LD_INT 5
33727: GREATEREQUAL
33728: IFFALSE 33732
// break ;
33730: GO 33734
// end ;
33732: GO 33701
33734: POP
33735: POP
// end ; if not tmp then
33736: LD_VAR 0 5
33740: NOT
33741: IFFALSE 33745
// continue ;
33743: GO 32957
// for j in tmp do
33745: LD_ADDR_VAR 0 3
33749: PUSH
33750: LD_VAR 0 5
33754: PUSH
33755: FOR_IN
33756: IFFALSE 33846
// if not GetTag ( j ) then
33758: LD_VAR 0 3
33762: PPUSH
33763: CALL_OW 110
33767: NOT
33768: IFFALSE 33844
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
33770: LD_ADDR_EXP 104
33774: PUSH
33775: LD_EXP 104
33779: PPUSH
33780: LD_VAR 0 2
33784: PUSH
33785: LD_EXP 104
33789: PUSH
33790: LD_VAR 0 2
33794: ARRAY
33795: PUSH
33796: LD_INT 1
33798: PLUS
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PPUSH
33804: LD_VAR 0 3
33808: PPUSH
33809: CALL 50080 0 3
33813: ST_TO_ADDR
// SetTag ( j , 107 ) ;
33814: LD_VAR 0 3
33818: PPUSH
33819: LD_INT 107
33821: PPUSH
33822: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
33826: LD_EXP 104
33830: PUSH
33831: LD_VAR 0 2
33835: ARRAY
33836: PUSH
33837: LD_INT 5
33839: GREATEREQUAL
33840: IFFALSE 33844
// break ;
33842: GO 33846
// end ;
33844: GO 33755
33846: POP
33847: POP
// end ; if mc_crates_collector [ i ] and target then
33848: LD_EXP 104
33852: PUSH
33853: LD_VAR 0 2
33857: ARRAY
33858: PUSH
33859: LD_VAR 0 6
33863: AND
33864: IFFALSE 34107
// begin if mc_crates_collector [ i ] < target [ 1 ] then
33866: LD_EXP 104
33870: PUSH
33871: LD_VAR 0 2
33875: ARRAY
33876: PUSH
33877: LD_VAR 0 6
33881: PUSH
33882: LD_INT 1
33884: ARRAY
33885: LESS
33886: IFFALSE 33906
// tmp := mc_crates_collector [ i ] else
33888: LD_ADDR_VAR 0 5
33892: PUSH
33893: LD_EXP 104
33897: PUSH
33898: LD_VAR 0 2
33902: ARRAY
33903: ST_TO_ADDR
33904: GO 33920
// tmp := target [ 1 ] ;
33906: LD_ADDR_VAR 0 5
33910: PUSH
33911: LD_VAR 0 6
33915: PUSH
33916: LD_INT 1
33918: ARRAY
33919: ST_TO_ADDR
// k := 0 ;
33920: LD_ADDR_VAR 0 4
33924: PUSH
33925: LD_INT 0
33927: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
33928: LD_ADDR_VAR 0 3
33932: PUSH
33933: LD_EXP 104
33937: PUSH
33938: LD_VAR 0 2
33942: ARRAY
33943: PUSH
33944: FOR_IN
33945: IFFALSE 34105
// begin k := k + 1 ;
33947: LD_ADDR_VAR 0 4
33951: PUSH
33952: LD_VAR 0 4
33956: PUSH
33957: LD_INT 1
33959: PLUS
33960: ST_TO_ADDR
// if k > tmp then
33961: LD_VAR 0 4
33965: PUSH
33966: LD_VAR 0 5
33970: GREATER
33971: IFFALSE 33975
// break ;
33973: GO 34105
// if not GetClass ( j ) in [ 2 , 16 ] then
33975: LD_VAR 0 3
33979: PPUSH
33980: CALL_OW 257
33984: PUSH
33985: LD_INT 2
33987: PUSH
33988: LD_INT 16
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: IN
33995: NOT
33996: IFFALSE 34049
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
33998: LD_ADDR_EXP 104
34002: PUSH
34003: LD_EXP 104
34007: PPUSH
34008: LD_VAR 0 2
34012: PPUSH
34013: LD_EXP 104
34017: PUSH
34018: LD_VAR 0 2
34022: ARRAY
34023: PUSH
34024: LD_VAR 0 3
34028: DIFF
34029: PPUSH
34030: CALL_OW 1
34034: ST_TO_ADDR
// SetTag ( j , 0 ) ;
34035: LD_VAR 0 3
34039: PPUSH
34040: LD_INT 0
34042: PPUSH
34043: CALL_OW 109
// continue ;
34047: GO 33944
// end ; if IsInUnit ( j ) then
34049: LD_VAR 0 3
34053: PPUSH
34054: CALL_OW 310
34058: IFFALSE 34069
// ComExitBuilding ( j ) ;
34060: LD_VAR 0 3
34064: PPUSH
34065: CALL_OW 122
// wait ( 3 ) ;
34069: LD_INT 3
34071: PPUSH
34072: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
34076: LD_VAR 0 3
34080: PPUSH
34081: LD_VAR 0 6
34085: PUSH
34086: LD_INT 2
34088: ARRAY
34089: PPUSH
34090: LD_VAR 0 6
34094: PUSH
34095: LD_INT 3
34097: ARRAY
34098: PPUSH
34099: CALL_OW 117
// end ;
34103: GO 33944
34105: POP
34106: POP
// end ; end else
34107: GO 34688
// begin for j in cargo do
34109: LD_ADDR_VAR 0 3
34113: PUSH
34114: LD_VAR 0 7
34118: PUSH
34119: FOR_IN
34120: IFFALSE 34686
// begin if GetTag ( j ) <> 0 then
34122: LD_VAR 0 3
34126: PPUSH
34127: CALL_OW 110
34131: PUSH
34132: LD_INT 0
34134: NONEQUAL
34135: IFFALSE 34139
// continue ;
34137: GO 34119
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
34139: LD_VAR 0 3
34143: PPUSH
34144: CALL_OW 256
34148: PUSH
34149: LD_INT 1000
34151: LESS
34152: PUSH
34153: LD_VAR 0 3
34157: PPUSH
34158: LD_EXP 111
34162: PUSH
34163: LD_VAR 0 2
34167: ARRAY
34168: PPUSH
34169: CALL_OW 308
34173: NOT
34174: AND
34175: IFFALSE 34197
// ComMoveToArea ( j , mc_parking [ i ] ) ;
34177: LD_VAR 0 3
34181: PPUSH
34182: LD_EXP 111
34186: PUSH
34187: LD_VAR 0 2
34191: ARRAY
34192: PPUSH
34193: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
34197: LD_VAR 0 3
34201: PPUSH
34202: CALL_OW 256
34206: PUSH
34207: LD_INT 1000
34209: LESS
34210: PUSH
34211: LD_VAR 0 3
34215: PPUSH
34216: LD_EXP 111
34220: PUSH
34221: LD_VAR 0 2
34225: ARRAY
34226: PPUSH
34227: CALL_OW 308
34231: AND
34232: IFFALSE 34236
// continue ;
34234: GO 34119
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
34236: LD_VAR 0 3
34240: PPUSH
34241: CALL_OW 262
34245: PUSH
34246: LD_INT 2
34248: EQUAL
34249: PUSH
34250: LD_VAR 0 3
34254: PPUSH
34255: CALL_OW 261
34259: PUSH
34260: LD_INT 15
34262: LESS
34263: AND
34264: IFFALSE 34268
// continue ;
34266: GO 34119
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
34268: LD_VAR 0 3
34272: PPUSH
34273: CALL_OW 262
34277: PUSH
34278: LD_INT 1
34280: EQUAL
34281: PUSH
34282: LD_VAR 0 3
34286: PPUSH
34287: CALL_OW 261
34291: PUSH
34292: LD_INT 10
34294: LESS
34295: AND
34296: IFFALSE 34625
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34298: LD_ADDR_VAR 0 8
34302: PUSH
34303: LD_EXP 87
34307: PUSH
34308: LD_VAR 0 2
34312: ARRAY
34313: PPUSH
34314: LD_INT 2
34316: PUSH
34317: LD_INT 30
34319: PUSH
34320: LD_INT 0
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 30
34329: PUSH
34330: LD_INT 1
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: LIST
34341: PPUSH
34342: CALL_OW 72
34346: ST_TO_ADDR
// if not depot then
34347: LD_VAR 0 8
34351: NOT
34352: IFFALSE 34356
// continue ;
34354: GO 34119
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
34356: LD_VAR 0 3
34360: PPUSH
34361: LD_VAR 0 8
34365: PPUSH
34366: LD_VAR 0 3
34370: PPUSH
34371: CALL_OW 74
34375: PPUSH
34376: CALL_OW 296
34380: PUSH
34381: LD_INT 6
34383: LESS
34384: IFFALSE 34400
// SetFuel ( j , 100 ) else
34386: LD_VAR 0 3
34390: PPUSH
34391: LD_INT 100
34393: PPUSH
34394: CALL_OW 240
34398: GO 34625
// if GetFuel ( j ) = 0 then
34400: LD_VAR 0 3
34404: PPUSH
34405: CALL_OW 261
34409: PUSH
34410: LD_INT 0
34412: EQUAL
34413: IFFALSE 34625
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
34415: LD_ADDR_EXP 106
34419: PUSH
34420: LD_EXP 106
34424: PPUSH
34425: LD_VAR 0 2
34429: PPUSH
34430: LD_EXP 106
34434: PUSH
34435: LD_VAR 0 2
34439: ARRAY
34440: PUSH
34441: LD_VAR 0 3
34445: DIFF
34446: PPUSH
34447: CALL_OW 1
34451: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
34452: LD_VAR 0 3
34456: PPUSH
34457: CALL_OW 263
34461: PUSH
34462: LD_INT 1
34464: EQUAL
34465: IFFALSE 34481
// ComExitVehicle ( IsInUnit ( j ) ) ;
34467: LD_VAR 0 3
34471: PPUSH
34472: CALL_OW 310
34476: PPUSH
34477: CALL_OW 121
// if GetControl ( j ) = control_remote then
34481: LD_VAR 0 3
34485: PPUSH
34486: CALL_OW 263
34490: PUSH
34491: LD_INT 2
34493: EQUAL
34494: IFFALSE 34505
// ComUnlink ( j ) ;
34496: LD_VAR 0 3
34500: PPUSH
34501: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
34505: LD_ADDR_VAR 0 9
34509: PUSH
34510: LD_VAR 0 2
34514: PPUSH
34515: LD_INT 3
34517: PPUSH
34518: CALL 43978 0 2
34522: ST_TO_ADDR
// if fac then
34523: LD_VAR 0 9
34527: IFFALSE 34623
// begin for k in fac do
34529: LD_ADDR_VAR 0 4
34533: PUSH
34534: LD_VAR 0 9
34538: PUSH
34539: FOR_IN
34540: IFFALSE 34621
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
34542: LD_ADDR_VAR 0 10
34546: PUSH
34547: LD_VAR 0 9
34551: PPUSH
34552: LD_VAR 0 3
34556: PPUSH
34557: CALL_OW 265
34561: PPUSH
34562: LD_VAR 0 3
34566: PPUSH
34567: CALL_OW 262
34571: PPUSH
34572: LD_VAR 0 3
34576: PPUSH
34577: CALL_OW 263
34581: PPUSH
34582: LD_VAR 0 3
34586: PPUSH
34587: CALL_OW 264
34591: PPUSH
34592: CALL 47612 0 5
34596: ST_TO_ADDR
// if components then
34597: LD_VAR 0 10
34601: IFFALSE 34619
// begin MC_InsertProduceList ( i , components ) ;
34603: LD_VAR 0 2
34607: PPUSH
34608: LD_VAR 0 10
34612: PPUSH
34613: CALL 43523 0 2
// break ;
34617: GO 34621
// end ; end ;
34619: GO 34539
34621: POP
34622: POP
// end ; continue ;
34623: GO 34119
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
34625: LD_VAR 0 3
34629: PPUSH
34630: LD_INT 1
34632: PPUSH
34633: CALL_OW 289
34637: PUSH
34638: LD_INT 100
34640: LESS
34641: PUSH
34642: LD_VAR 0 3
34646: PPUSH
34647: CALL_OW 314
34651: NOT
34652: AND
34653: IFFALSE 34682
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
34655: LD_VAR 0 3
34659: PPUSH
34660: LD_VAR 0 6
34664: PUSH
34665: LD_INT 2
34667: ARRAY
34668: PPUSH
34669: LD_VAR 0 6
34673: PUSH
34674: LD_INT 3
34676: ARRAY
34677: PPUSH
34678: CALL_OW 117
// break ;
34682: GO 34686
// end ;
34684: GO 34119
34686: POP
34687: POP
// end ; end ;
34688: GO 32957
34690: POP
34691: POP
// end ;
34692: LD_VAR 0 1
34696: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
34697: LD_INT 0
34699: PPUSH
34700: PPUSH
34701: PPUSH
34702: PPUSH
// if not mc_bases then
34703: LD_EXP 87
34707: NOT
34708: IFFALSE 34712
// exit ;
34710: GO 34873
// for i = 1 to mc_bases do
34712: LD_ADDR_VAR 0 2
34716: PUSH
34717: DOUBLE
34718: LD_INT 1
34720: DEC
34721: ST_TO_ADDR
34722: LD_EXP 87
34726: PUSH
34727: FOR_TO
34728: IFFALSE 34871
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
34730: LD_ADDR_VAR 0 4
34734: PUSH
34735: LD_EXP 106
34739: PUSH
34740: LD_VAR 0 2
34744: ARRAY
34745: PUSH
34746: LD_EXP 109
34750: PUSH
34751: LD_VAR 0 2
34755: ARRAY
34756: UNION
34757: PPUSH
34758: LD_INT 33
34760: PUSH
34761: LD_INT 2
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PPUSH
34768: CALL_OW 72
34772: ST_TO_ADDR
// if tmp then
34773: LD_VAR 0 4
34777: IFFALSE 34869
// for j in tmp do
34779: LD_ADDR_VAR 0 3
34783: PUSH
34784: LD_VAR 0 4
34788: PUSH
34789: FOR_IN
34790: IFFALSE 34867
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
34792: LD_VAR 0 3
34796: PPUSH
34797: CALL_OW 312
34801: NOT
34802: PUSH
34803: LD_VAR 0 3
34807: PPUSH
34808: CALL_OW 256
34812: PUSH
34813: LD_INT 250
34815: GREATEREQUAL
34816: AND
34817: IFFALSE 34830
// Connect ( j ) else
34819: LD_VAR 0 3
34823: PPUSH
34824: CALL 53013 0 1
34828: GO 34865
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
34830: LD_VAR 0 3
34834: PPUSH
34835: CALL_OW 256
34839: PUSH
34840: LD_INT 250
34842: LESS
34843: PUSH
34844: LD_VAR 0 3
34848: PPUSH
34849: CALL_OW 312
34853: AND
34854: IFFALSE 34865
// ComUnlink ( j ) ;
34856: LD_VAR 0 3
34860: PPUSH
34861: CALL_OW 136
34865: GO 34789
34867: POP
34868: POP
// end ;
34869: GO 34727
34871: POP
34872: POP
// end ;
34873: LD_VAR 0 1
34877: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
34878: LD_INT 0
34880: PPUSH
34881: PPUSH
34882: PPUSH
34883: PPUSH
34884: PPUSH
// if not mc_bases then
34885: LD_EXP 87
34889: NOT
34890: IFFALSE 34894
// exit ;
34892: GO 35339
// for i = 1 to mc_bases do
34894: LD_ADDR_VAR 0 2
34898: PUSH
34899: DOUBLE
34900: LD_INT 1
34902: DEC
34903: ST_TO_ADDR
34904: LD_EXP 87
34908: PUSH
34909: FOR_TO
34910: IFFALSE 35337
// begin if not mc_produce [ i ] then
34912: LD_EXP 108
34916: PUSH
34917: LD_VAR 0 2
34921: ARRAY
34922: NOT
34923: IFFALSE 34927
// continue ;
34925: GO 34909
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
34927: LD_ADDR_VAR 0 5
34931: PUSH
34932: LD_EXP 87
34936: PUSH
34937: LD_VAR 0 2
34941: ARRAY
34942: PPUSH
34943: LD_INT 30
34945: PUSH
34946: LD_INT 3
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PPUSH
34953: CALL_OW 72
34957: ST_TO_ADDR
// if not fac then
34958: LD_VAR 0 5
34962: NOT
34963: IFFALSE 34967
// continue ;
34965: GO 34909
// for j in fac do
34967: LD_ADDR_VAR 0 3
34971: PUSH
34972: LD_VAR 0 5
34976: PUSH
34977: FOR_IN
34978: IFFALSE 35333
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
34980: LD_VAR 0 3
34984: PPUSH
34985: CALL_OW 461
34989: PUSH
34990: LD_INT 2
34992: NONEQUAL
34993: PUSH
34994: LD_VAR 0 3
34998: PPUSH
34999: LD_INT 15
35001: PPUSH
35002: CALL 52673 0 2
35006: PUSH
35007: LD_INT 4
35009: ARRAY
35010: OR
35011: IFFALSE 35015
// continue ;
35013: GO 34977
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
35015: LD_VAR 0 3
35019: PPUSH
35020: LD_EXP 108
35024: PUSH
35025: LD_VAR 0 2
35029: ARRAY
35030: PUSH
35031: LD_INT 1
35033: ARRAY
35034: PUSH
35035: LD_INT 1
35037: ARRAY
35038: PPUSH
35039: LD_EXP 108
35043: PUSH
35044: LD_VAR 0 2
35048: ARRAY
35049: PUSH
35050: LD_INT 1
35052: ARRAY
35053: PUSH
35054: LD_INT 2
35056: ARRAY
35057: PPUSH
35058: LD_EXP 108
35062: PUSH
35063: LD_VAR 0 2
35067: ARRAY
35068: PUSH
35069: LD_INT 1
35071: ARRAY
35072: PUSH
35073: LD_INT 3
35075: ARRAY
35076: PPUSH
35077: LD_EXP 108
35081: PUSH
35082: LD_VAR 0 2
35086: ARRAY
35087: PUSH
35088: LD_INT 1
35090: ARRAY
35091: PUSH
35092: LD_INT 4
35094: ARRAY
35095: PPUSH
35096: CALL_OW 448
35100: PUSH
35101: LD_VAR 0 3
35105: PPUSH
35106: LD_EXP 108
35110: PUSH
35111: LD_VAR 0 2
35115: ARRAY
35116: PUSH
35117: LD_INT 1
35119: ARRAY
35120: PUSH
35121: LD_INT 1
35123: ARRAY
35124: PUSH
35125: LD_EXP 108
35129: PUSH
35130: LD_VAR 0 2
35134: ARRAY
35135: PUSH
35136: LD_INT 1
35138: ARRAY
35139: PUSH
35140: LD_INT 2
35142: ARRAY
35143: PUSH
35144: LD_EXP 108
35148: PUSH
35149: LD_VAR 0 2
35153: ARRAY
35154: PUSH
35155: LD_INT 1
35157: ARRAY
35158: PUSH
35159: LD_INT 3
35161: ARRAY
35162: PUSH
35163: LD_EXP 108
35167: PUSH
35168: LD_VAR 0 2
35172: ARRAY
35173: PUSH
35174: LD_INT 1
35176: ARRAY
35177: PUSH
35178: LD_INT 4
35180: ARRAY
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: PPUSH
35188: CALL 56344 0 2
35192: AND
35193: IFFALSE 35331
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
35195: LD_VAR 0 3
35199: PPUSH
35200: LD_EXP 108
35204: PUSH
35205: LD_VAR 0 2
35209: ARRAY
35210: PUSH
35211: LD_INT 1
35213: ARRAY
35214: PUSH
35215: LD_INT 1
35217: ARRAY
35218: PPUSH
35219: LD_EXP 108
35223: PUSH
35224: LD_VAR 0 2
35228: ARRAY
35229: PUSH
35230: LD_INT 1
35232: ARRAY
35233: PUSH
35234: LD_INT 2
35236: ARRAY
35237: PPUSH
35238: LD_EXP 108
35242: PUSH
35243: LD_VAR 0 2
35247: ARRAY
35248: PUSH
35249: LD_INT 1
35251: ARRAY
35252: PUSH
35253: LD_INT 3
35255: ARRAY
35256: PPUSH
35257: LD_EXP 108
35261: PUSH
35262: LD_VAR 0 2
35266: ARRAY
35267: PUSH
35268: LD_INT 1
35270: ARRAY
35271: PUSH
35272: LD_INT 4
35274: ARRAY
35275: PPUSH
35276: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
35280: LD_ADDR_VAR 0 4
35284: PUSH
35285: LD_EXP 108
35289: PUSH
35290: LD_VAR 0 2
35294: ARRAY
35295: PPUSH
35296: LD_INT 1
35298: PPUSH
35299: CALL_OW 3
35303: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
35304: LD_ADDR_EXP 108
35308: PUSH
35309: LD_EXP 108
35313: PPUSH
35314: LD_VAR 0 2
35318: PPUSH
35319: LD_VAR 0 4
35323: PPUSH
35324: CALL_OW 1
35328: ST_TO_ADDR
// break ;
35329: GO 35333
// end ; end ;
35331: GO 34977
35333: POP
35334: POP
// end ;
35335: GO 34909
35337: POP
35338: POP
// end ;
35339: LD_VAR 0 1
35343: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
35344: LD_INT 0
35346: PPUSH
35347: PPUSH
35348: PPUSH
// if not mc_bases then
35349: LD_EXP 87
35353: NOT
35354: IFFALSE 35358
// exit ;
35356: GO 35447
// for i = 1 to mc_bases do
35358: LD_ADDR_VAR 0 2
35362: PUSH
35363: DOUBLE
35364: LD_INT 1
35366: DEC
35367: ST_TO_ADDR
35368: LD_EXP 87
35372: PUSH
35373: FOR_TO
35374: IFFALSE 35445
// begin if mc_attack [ i ] then
35376: LD_EXP 107
35380: PUSH
35381: LD_VAR 0 2
35385: ARRAY
35386: IFFALSE 35443
// begin tmp := mc_attack [ i ] [ 1 ] ;
35388: LD_ADDR_VAR 0 3
35392: PUSH
35393: LD_EXP 107
35397: PUSH
35398: LD_VAR 0 2
35402: ARRAY
35403: PUSH
35404: LD_INT 1
35406: ARRAY
35407: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
35408: LD_ADDR_EXP 107
35412: PUSH
35413: LD_EXP 107
35417: PPUSH
35418: LD_VAR 0 2
35422: PPUSH
35423: EMPTY
35424: PPUSH
35425: CALL_OW 1
35429: ST_TO_ADDR
// Attack ( tmp ) ;
35430: LD_VAR 0 3
35434: PPUSH
35435: CALL 86215 0 1
// exit ;
35439: POP
35440: POP
35441: GO 35447
// end ; end ;
35443: GO 35373
35445: POP
35446: POP
// end ;
35447: LD_VAR 0 1
35451: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
35452: LD_INT 0
35454: PPUSH
35455: PPUSH
35456: PPUSH
35457: PPUSH
35458: PPUSH
35459: PPUSH
35460: PPUSH
// if not mc_bases then
35461: LD_EXP 87
35465: NOT
35466: IFFALSE 35470
// exit ;
35468: GO 36052
// for i = 1 to mc_bases do
35470: LD_ADDR_VAR 0 2
35474: PUSH
35475: DOUBLE
35476: LD_INT 1
35478: DEC
35479: ST_TO_ADDR
35480: LD_EXP 87
35484: PUSH
35485: FOR_TO
35486: IFFALSE 36050
// begin if not mc_bases [ i ] then
35488: LD_EXP 87
35492: PUSH
35493: LD_VAR 0 2
35497: ARRAY
35498: NOT
35499: IFFALSE 35503
// continue ;
35501: GO 35485
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
35503: LD_ADDR_VAR 0 7
35507: PUSH
35508: LD_EXP 87
35512: PUSH
35513: LD_VAR 0 2
35517: ARRAY
35518: PUSH
35519: LD_INT 1
35521: ARRAY
35522: PPUSH
35523: CALL 46916 0 1
35527: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
35528: LD_ADDR_EXP 110
35532: PUSH
35533: LD_EXP 110
35537: PPUSH
35538: LD_VAR 0 2
35542: PPUSH
35543: LD_EXP 87
35547: PUSH
35548: LD_VAR 0 2
35552: ARRAY
35553: PUSH
35554: LD_INT 1
35556: ARRAY
35557: PPUSH
35558: CALL_OW 255
35562: PPUSH
35563: LD_EXP 112
35567: PUSH
35568: LD_VAR 0 2
35572: ARRAY
35573: PPUSH
35574: CALL 46881 0 2
35578: PPUSH
35579: CALL_OW 1
35583: ST_TO_ADDR
// if not mc_scan [ i ] then
35584: LD_EXP 110
35588: PUSH
35589: LD_VAR 0 2
35593: ARRAY
35594: NOT
35595: IFFALSE 35750
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
35597: LD_ADDR_VAR 0 4
35601: PUSH
35602: LD_EXP 87
35606: PUSH
35607: LD_VAR 0 2
35611: ARRAY
35612: PPUSH
35613: LD_INT 2
35615: PUSH
35616: LD_INT 25
35618: PUSH
35619: LD_INT 5
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 25
35628: PUSH
35629: LD_INT 8
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 25
35638: PUSH
35639: LD_INT 9
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: PPUSH
35652: CALL_OW 72
35656: ST_TO_ADDR
// if not tmp then
35657: LD_VAR 0 4
35661: NOT
35662: IFFALSE 35666
// continue ;
35664: GO 35485
// for j in tmp do
35666: LD_ADDR_VAR 0 3
35670: PUSH
35671: LD_VAR 0 4
35675: PUSH
35676: FOR_IN
35677: IFFALSE 35748
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
35679: LD_VAR 0 3
35683: PPUSH
35684: CALL_OW 310
35688: PPUSH
35689: CALL_OW 266
35693: PUSH
35694: LD_INT 5
35696: EQUAL
35697: PUSH
35698: LD_VAR 0 3
35702: PPUSH
35703: CALL_OW 257
35707: PUSH
35708: LD_INT 1
35710: EQUAL
35711: AND
35712: PUSH
35713: LD_VAR 0 3
35717: PPUSH
35718: CALL_OW 459
35722: NOT
35723: AND
35724: PUSH
35725: LD_VAR 0 7
35729: AND
35730: IFFALSE 35746
// ComChangeProfession ( j , class ) ;
35732: LD_VAR 0 3
35736: PPUSH
35737: LD_VAR 0 7
35741: PPUSH
35742: CALL_OW 123
35746: GO 35676
35748: POP
35749: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
35750: LD_EXP 110
35754: PUSH
35755: LD_VAR 0 2
35759: ARRAY
35760: PUSH
35761: LD_EXP 109
35765: PUSH
35766: LD_VAR 0 2
35770: ARRAY
35771: NOT
35772: AND
35773: PUSH
35774: LD_EXP 87
35778: PUSH
35779: LD_VAR 0 2
35783: ARRAY
35784: PPUSH
35785: LD_INT 30
35787: PUSH
35788: LD_INT 32
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PPUSH
35795: CALL_OW 72
35799: NOT
35800: AND
35801: PUSH
35802: LD_EXP 87
35806: PUSH
35807: LD_VAR 0 2
35811: ARRAY
35812: PPUSH
35813: LD_INT 2
35815: PUSH
35816: LD_INT 30
35818: PUSH
35819: LD_INT 4
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 30
35828: PUSH
35829: LD_INT 5
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: LIST
35840: PPUSH
35841: CALL_OW 72
35845: NOT
35846: AND
35847: IFFALSE 35979
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
35849: LD_ADDR_VAR 0 4
35853: PUSH
35854: LD_EXP 87
35858: PUSH
35859: LD_VAR 0 2
35863: ARRAY
35864: PPUSH
35865: LD_INT 2
35867: PUSH
35868: LD_INT 25
35870: PUSH
35871: LD_INT 1
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 25
35880: PUSH
35881: LD_INT 5
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 25
35890: PUSH
35891: LD_INT 8
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 25
35900: PUSH
35901: LD_INT 9
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: PPUSH
35915: CALL_OW 72
35919: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
35920: LD_ADDR_VAR 0 4
35924: PUSH
35925: LD_VAR 0 4
35929: PUSH
35930: LD_VAR 0 4
35934: PPUSH
35935: LD_INT 18
35937: PPUSH
35938: CALL 78641 0 2
35942: DIFF
35943: ST_TO_ADDR
// if tmp then
35944: LD_VAR 0 4
35948: IFFALSE 35979
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
35950: LD_VAR 0 2
35954: PPUSH
35955: LD_VAR 0 4
35959: PPUSH
35960: LD_EXP 112
35964: PUSH
35965: LD_VAR 0 2
35969: ARRAY
35970: PPUSH
35971: CALL 90924 0 3
// exit ;
35975: POP
35976: POP
35977: GO 36052
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
35979: LD_EXP 110
35983: PUSH
35984: LD_VAR 0 2
35988: ARRAY
35989: PUSH
35990: LD_EXP 109
35994: PUSH
35995: LD_VAR 0 2
35999: ARRAY
36000: AND
36001: IFFALSE 36048
// begin tmp := mc_defender [ i ] ;
36003: LD_ADDR_VAR 0 4
36007: PUSH
36008: LD_EXP 109
36012: PUSH
36013: LD_VAR 0 2
36017: ARRAY
36018: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
36019: LD_VAR 0 2
36023: PPUSH
36024: LD_VAR 0 4
36028: PPUSH
36029: LD_EXP 110
36033: PUSH
36034: LD_VAR 0 2
36038: ARRAY
36039: PPUSH
36040: CALL 91485 0 3
// exit ;
36044: POP
36045: POP
36046: GO 36052
// end ; end ;
36048: GO 35485
36050: POP
36051: POP
// end ;
36052: LD_VAR 0 1
36056: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
36057: LD_INT 0
36059: PPUSH
36060: PPUSH
36061: PPUSH
36062: PPUSH
36063: PPUSH
36064: PPUSH
36065: PPUSH
36066: PPUSH
36067: PPUSH
36068: PPUSH
36069: PPUSH
// if not mc_bases then
36070: LD_EXP 87
36074: NOT
36075: IFFALSE 36079
// exit ;
36077: GO 37166
// for i = 1 to mc_bases do
36079: LD_ADDR_VAR 0 2
36083: PUSH
36084: DOUBLE
36085: LD_INT 1
36087: DEC
36088: ST_TO_ADDR
36089: LD_EXP 87
36093: PUSH
36094: FOR_TO
36095: IFFALSE 37164
// begin tmp := mc_lab [ i ] ;
36097: LD_ADDR_VAR 0 6
36101: PUSH
36102: LD_EXP 120
36106: PUSH
36107: LD_VAR 0 2
36111: ARRAY
36112: ST_TO_ADDR
// if not tmp then
36113: LD_VAR 0 6
36117: NOT
36118: IFFALSE 36122
// continue ;
36120: GO 36094
// idle_lab := 0 ;
36122: LD_ADDR_VAR 0 11
36126: PUSH
36127: LD_INT 0
36129: ST_TO_ADDR
// for j in tmp do
36130: LD_ADDR_VAR 0 3
36134: PUSH
36135: LD_VAR 0 6
36139: PUSH
36140: FOR_IN
36141: IFFALSE 37160
// begin researching := false ;
36143: LD_ADDR_VAR 0 10
36147: PUSH
36148: LD_INT 0
36150: ST_TO_ADDR
// side := GetSide ( j ) ;
36151: LD_ADDR_VAR 0 4
36155: PUSH
36156: LD_VAR 0 3
36160: PPUSH
36161: CALL_OW 255
36165: ST_TO_ADDR
// if not mc_tech [ side ] then
36166: LD_EXP 114
36170: PUSH
36171: LD_VAR 0 4
36175: ARRAY
36176: NOT
36177: IFFALSE 36181
// continue ;
36179: GO 36140
// if BuildingStatus ( j ) = bs_idle then
36181: LD_VAR 0 3
36185: PPUSH
36186: CALL_OW 461
36190: PUSH
36191: LD_INT 2
36193: EQUAL
36194: IFFALSE 36382
// begin if idle_lab and UnitsInside ( j ) < 6 then
36196: LD_VAR 0 11
36200: PUSH
36201: LD_VAR 0 3
36205: PPUSH
36206: CALL_OW 313
36210: PUSH
36211: LD_INT 6
36213: LESS
36214: AND
36215: IFFALSE 36286
// begin tmp2 := UnitsInside ( idle_lab ) ;
36217: LD_ADDR_VAR 0 9
36221: PUSH
36222: LD_VAR 0 11
36226: PPUSH
36227: CALL_OW 313
36231: ST_TO_ADDR
// if tmp2 then
36232: LD_VAR 0 9
36236: IFFALSE 36278
// for x in tmp2 do
36238: LD_ADDR_VAR 0 7
36242: PUSH
36243: LD_VAR 0 9
36247: PUSH
36248: FOR_IN
36249: IFFALSE 36276
// begin ComExitBuilding ( x ) ;
36251: LD_VAR 0 7
36255: PPUSH
36256: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
36260: LD_VAR 0 7
36264: PPUSH
36265: LD_VAR 0 3
36269: PPUSH
36270: CALL_OW 180
// end ;
36274: GO 36248
36276: POP
36277: POP
// idle_lab := 0 ;
36278: LD_ADDR_VAR 0 11
36282: PUSH
36283: LD_INT 0
36285: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
36286: LD_ADDR_VAR 0 5
36290: PUSH
36291: LD_EXP 114
36295: PUSH
36296: LD_VAR 0 4
36300: ARRAY
36301: PUSH
36302: FOR_IN
36303: IFFALSE 36363
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
36305: LD_VAR 0 3
36309: PPUSH
36310: LD_VAR 0 5
36314: PPUSH
36315: CALL_OW 430
36319: PUSH
36320: LD_VAR 0 4
36324: PPUSH
36325: LD_VAR 0 5
36329: PPUSH
36330: CALL 45986 0 2
36334: AND
36335: IFFALSE 36361
// begin researching := true ;
36337: LD_ADDR_VAR 0 10
36341: PUSH
36342: LD_INT 1
36344: ST_TO_ADDR
// ComResearch ( j , t ) ;
36345: LD_VAR 0 3
36349: PPUSH
36350: LD_VAR 0 5
36354: PPUSH
36355: CALL_OW 124
// break ;
36359: GO 36363
// end ;
36361: GO 36302
36363: POP
36364: POP
// if not researching then
36365: LD_VAR 0 10
36369: NOT
36370: IFFALSE 36382
// idle_lab := j ;
36372: LD_ADDR_VAR 0 11
36376: PUSH
36377: LD_VAR 0 3
36381: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
36382: LD_VAR 0 3
36386: PPUSH
36387: CALL_OW 461
36391: PUSH
36392: LD_INT 10
36394: EQUAL
36395: IFFALSE 36983
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
36397: LD_EXP 116
36401: PUSH
36402: LD_VAR 0 2
36406: ARRAY
36407: NOT
36408: PUSH
36409: LD_EXP 117
36413: PUSH
36414: LD_VAR 0 2
36418: ARRAY
36419: NOT
36420: AND
36421: PUSH
36422: LD_EXP 114
36426: PUSH
36427: LD_VAR 0 4
36431: ARRAY
36432: PUSH
36433: LD_INT 1
36435: GREATER
36436: AND
36437: IFFALSE 36568
// begin ComCancel ( j ) ;
36439: LD_VAR 0 3
36443: PPUSH
36444: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
36448: LD_ADDR_EXP 114
36452: PUSH
36453: LD_EXP 114
36457: PPUSH
36458: LD_VAR 0 4
36462: PPUSH
36463: LD_EXP 114
36467: PUSH
36468: LD_VAR 0 4
36472: ARRAY
36473: PPUSH
36474: LD_EXP 114
36478: PUSH
36479: LD_VAR 0 4
36483: ARRAY
36484: PUSH
36485: LD_INT 1
36487: MINUS
36488: PPUSH
36489: LD_EXP 114
36493: PUSH
36494: LD_VAR 0 4
36498: ARRAY
36499: PPUSH
36500: LD_INT 0
36502: PPUSH
36503: CALL 49498 0 4
36507: PPUSH
36508: CALL_OW 1
36512: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
36513: LD_ADDR_EXP 114
36517: PUSH
36518: LD_EXP 114
36522: PPUSH
36523: LD_VAR 0 4
36527: PPUSH
36528: LD_EXP 114
36532: PUSH
36533: LD_VAR 0 4
36537: ARRAY
36538: PPUSH
36539: LD_EXP 114
36543: PUSH
36544: LD_VAR 0 4
36548: ARRAY
36549: PPUSH
36550: LD_INT 1
36552: PPUSH
36553: LD_INT 0
36555: PPUSH
36556: CALL 49498 0 4
36560: PPUSH
36561: CALL_OW 1
36565: ST_TO_ADDR
// continue ;
36566: GO 36140
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
36568: LD_EXP 116
36572: PUSH
36573: LD_VAR 0 2
36577: ARRAY
36578: PUSH
36579: LD_EXP 117
36583: PUSH
36584: LD_VAR 0 2
36588: ARRAY
36589: NOT
36590: AND
36591: IFFALSE 36718
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
36593: LD_ADDR_EXP 117
36597: PUSH
36598: LD_EXP 117
36602: PPUSH
36603: LD_VAR 0 2
36607: PUSH
36608: LD_EXP 117
36612: PUSH
36613: LD_VAR 0 2
36617: ARRAY
36618: PUSH
36619: LD_INT 1
36621: PLUS
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PPUSH
36627: LD_EXP 116
36631: PUSH
36632: LD_VAR 0 2
36636: ARRAY
36637: PUSH
36638: LD_INT 1
36640: ARRAY
36641: PPUSH
36642: CALL 50080 0 3
36646: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
36647: LD_EXP 116
36651: PUSH
36652: LD_VAR 0 2
36656: ARRAY
36657: PUSH
36658: LD_INT 1
36660: ARRAY
36661: PPUSH
36662: LD_INT 112
36664: PPUSH
36665: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
36669: LD_ADDR_VAR 0 9
36673: PUSH
36674: LD_EXP 116
36678: PUSH
36679: LD_VAR 0 2
36683: ARRAY
36684: PPUSH
36685: LD_INT 1
36687: PPUSH
36688: CALL_OW 3
36692: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
36693: LD_ADDR_EXP 116
36697: PUSH
36698: LD_EXP 116
36702: PPUSH
36703: LD_VAR 0 2
36707: PPUSH
36708: LD_VAR 0 9
36712: PPUSH
36713: CALL_OW 1
36717: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
36718: LD_EXP 116
36722: PUSH
36723: LD_VAR 0 2
36727: ARRAY
36728: PUSH
36729: LD_EXP 117
36733: PUSH
36734: LD_VAR 0 2
36738: ARRAY
36739: AND
36740: PUSH
36741: LD_EXP 117
36745: PUSH
36746: LD_VAR 0 2
36750: ARRAY
36751: PUSH
36752: LD_INT 1
36754: ARRAY
36755: PPUSH
36756: CALL_OW 310
36760: NOT
36761: AND
36762: PUSH
36763: LD_VAR 0 3
36767: PPUSH
36768: CALL_OW 313
36772: PUSH
36773: LD_INT 6
36775: EQUAL
36776: AND
36777: IFFALSE 36833
// begin tmp2 := UnitsInside ( j ) ;
36779: LD_ADDR_VAR 0 9
36783: PUSH
36784: LD_VAR 0 3
36788: PPUSH
36789: CALL_OW 313
36793: ST_TO_ADDR
// if tmp2 = 6 then
36794: LD_VAR 0 9
36798: PUSH
36799: LD_INT 6
36801: EQUAL
36802: IFFALSE 36833
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
36804: LD_VAR 0 9
36808: PUSH
36809: LD_INT 1
36811: ARRAY
36812: PPUSH
36813: LD_INT 112
36815: PPUSH
36816: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
36820: LD_VAR 0 9
36824: PUSH
36825: LD_INT 1
36827: ARRAY
36828: PPUSH
36829: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
36833: LD_EXP 117
36837: PUSH
36838: LD_VAR 0 2
36842: ARRAY
36843: PUSH
36844: LD_EXP 117
36848: PUSH
36849: LD_VAR 0 2
36853: ARRAY
36854: PUSH
36855: LD_INT 1
36857: ARRAY
36858: PPUSH
36859: CALL_OW 314
36863: NOT
36864: AND
36865: PUSH
36866: LD_EXP 117
36870: PUSH
36871: LD_VAR 0 2
36875: ARRAY
36876: PUSH
36877: LD_INT 1
36879: ARRAY
36880: PPUSH
36881: CALL_OW 310
36885: NOT
36886: AND
36887: IFFALSE 36913
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
36889: LD_EXP 117
36893: PUSH
36894: LD_VAR 0 2
36898: ARRAY
36899: PUSH
36900: LD_INT 1
36902: ARRAY
36903: PPUSH
36904: LD_VAR 0 3
36908: PPUSH
36909: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
36913: LD_EXP 117
36917: PUSH
36918: LD_VAR 0 2
36922: ARRAY
36923: PUSH
36924: LD_INT 1
36926: ARRAY
36927: PPUSH
36928: CALL_OW 310
36932: PUSH
36933: LD_EXP 117
36937: PUSH
36938: LD_VAR 0 2
36942: ARRAY
36943: PUSH
36944: LD_INT 1
36946: ARRAY
36947: PPUSH
36948: CALL_OW 310
36952: PPUSH
36953: CALL_OW 461
36957: PUSH
36958: LD_INT 3
36960: NONEQUAL
36961: AND
36962: IFFALSE 36983
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
36964: LD_EXP 117
36968: PUSH
36969: LD_VAR 0 2
36973: ARRAY
36974: PUSH
36975: LD_INT 1
36977: ARRAY
36978: PPUSH
36979: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
36983: LD_VAR 0 3
36987: PPUSH
36988: CALL_OW 461
36992: PUSH
36993: LD_INT 6
36995: EQUAL
36996: PUSH
36997: LD_VAR 0 6
37001: PUSH
37002: LD_INT 1
37004: GREATER
37005: AND
37006: IFFALSE 37158
// begin sci := [ ] ;
37008: LD_ADDR_VAR 0 8
37012: PUSH
37013: EMPTY
37014: ST_TO_ADDR
// for x in ( tmp diff j ) do
37015: LD_ADDR_VAR 0 7
37019: PUSH
37020: LD_VAR 0 6
37024: PUSH
37025: LD_VAR 0 3
37029: DIFF
37030: PUSH
37031: FOR_IN
37032: IFFALSE 37084
// begin if sci = 6 then
37034: LD_VAR 0 8
37038: PUSH
37039: LD_INT 6
37041: EQUAL
37042: IFFALSE 37046
// break ;
37044: GO 37084
// if BuildingStatus ( x ) = bs_idle then
37046: LD_VAR 0 7
37050: PPUSH
37051: CALL_OW 461
37055: PUSH
37056: LD_INT 2
37058: EQUAL
37059: IFFALSE 37082
// sci := sci ^ UnitsInside ( x ) ;
37061: LD_ADDR_VAR 0 8
37065: PUSH
37066: LD_VAR 0 8
37070: PUSH
37071: LD_VAR 0 7
37075: PPUSH
37076: CALL_OW 313
37080: ADD
37081: ST_TO_ADDR
// end ;
37082: GO 37031
37084: POP
37085: POP
// if not sci then
37086: LD_VAR 0 8
37090: NOT
37091: IFFALSE 37095
// continue ;
37093: GO 36140
// for x in sci do
37095: LD_ADDR_VAR 0 7
37099: PUSH
37100: LD_VAR 0 8
37104: PUSH
37105: FOR_IN
37106: IFFALSE 37156
// if IsInUnit ( x ) and not HasTask ( x ) then
37108: LD_VAR 0 7
37112: PPUSH
37113: CALL_OW 310
37117: PUSH
37118: LD_VAR 0 7
37122: PPUSH
37123: CALL_OW 314
37127: NOT
37128: AND
37129: IFFALSE 37154
// begin ComExitBuilding ( x ) ;
37131: LD_VAR 0 7
37135: PPUSH
37136: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
37140: LD_VAR 0 7
37144: PPUSH
37145: LD_VAR 0 3
37149: PPUSH
37150: CALL_OW 180
// end ;
37154: GO 37105
37156: POP
37157: POP
// end ; end ;
37158: GO 36140
37160: POP
37161: POP
// end ;
37162: GO 36094
37164: POP
37165: POP
// end ;
37166: LD_VAR 0 1
37170: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
37171: LD_INT 0
37173: PPUSH
37174: PPUSH
// if not mc_bases then
37175: LD_EXP 87
37179: NOT
37180: IFFALSE 37184
// exit ;
37182: GO 37265
// for i = 1 to mc_bases do
37184: LD_ADDR_VAR 0 2
37188: PUSH
37189: DOUBLE
37190: LD_INT 1
37192: DEC
37193: ST_TO_ADDR
37194: LD_EXP 87
37198: PUSH
37199: FOR_TO
37200: IFFALSE 37263
// if mc_mines [ i ] and mc_miners [ i ] then
37202: LD_EXP 100
37206: PUSH
37207: LD_VAR 0 2
37211: ARRAY
37212: PUSH
37213: LD_EXP 101
37217: PUSH
37218: LD_VAR 0 2
37222: ARRAY
37223: AND
37224: IFFALSE 37261
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
37226: LD_EXP 101
37230: PUSH
37231: LD_VAR 0 2
37235: ARRAY
37236: PUSH
37237: LD_INT 1
37239: ARRAY
37240: PPUSH
37241: CALL_OW 255
37245: PPUSH
37246: LD_EXP 100
37250: PUSH
37251: LD_VAR 0 2
37255: ARRAY
37256: PPUSH
37257: CALL 47069 0 2
37261: GO 37199
37263: POP
37264: POP
// end ;
37265: LD_VAR 0 1
37269: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
37270: LD_INT 0
37272: PPUSH
37273: PPUSH
37274: PPUSH
37275: PPUSH
37276: PPUSH
37277: PPUSH
37278: PPUSH
37279: PPUSH
// if not mc_bases or not mc_parking then
37280: LD_EXP 87
37284: NOT
37285: PUSH
37286: LD_EXP 111
37290: NOT
37291: OR
37292: IFFALSE 37296
// exit ;
37294: GO 37995
// for i = 1 to mc_bases do
37296: LD_ADDR_VAR 0 2
37300: PUSH
37301: DOUBLE
37302: LD_INT 1
37304: DEC
37305: ST_TO_ADDR
37306: LD_EXP 87
37310: PUSH
37311: FOR_TO
37312: IFFALSE 37993
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
37314: LD_EXP 87
37318: PUSH
37319: LD_VAR 0 2
37323: ARRAY
37324: NOT
37325: PUSH
37326: LD_EXP 111
37330: PUSH
37331: LD_VAR 0 2
37335: ARRAY
37336: NOT
37337: OR
37338: IFFALSE 37342
// continue ;
37340: GO 37311
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
37342: LD_ADDR_VAR 0 5
37346: PUSH
37347: LD_EXP 87
37351: PUSH
37352: LD_VAR 0 2
37356: ARRAY
37357: PUSH
37358: LD_INT 1
37360: ARRAY
37361: PPUSH
37362: CALL_OW 255
37366: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
37367: LD_ADDR_VAR 0 6
37371: PUSH
37372: LD_EXP 87
37376: PUSH
37377: LD_VAR 0 2
37381: ARRAY
37382: PPUSH
37383: LD_INT 30
37385: PUSH
37386: LD_INT 3
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PPUSH
37393: CALL_OW 72
37397: ST_TO_ADDR
// if not fac then
37398: LD_VAR 0 6
37402: NOT
37403: IFFALSE 37454
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
37405: LD_ADDR_VAR 0 6
37409: PUSH
37410: LD_EXP 87
37414: PUSH
37415: LD_VAR 0 2
37419: ARRAY
37420: PPUSH
37421: LD_INT 2
37423: PUSH
37424: LD_INT 30
37426: PUSH
37427: LD_INT 0
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 30
37436: PUSH
37437: LD_INT 1
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: LIST
37448: PPUSH
37449: CALL_OW 72
37453: ST_TO_ADDR
// if not fac then
37454: LD_VAR 0 6
37458: NOT
37459: IFFALSE 37463
// continue ;
37461: GO 37311
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
37463: LD_ADDR_VAR 0 7
37467: PUSH
37468: LD_EXP 111
37472: PUSH
37473: LD_VAR 0 2
37477: ARRAY
37478: PPUSH
37479: LD_INT 22
37481: PUSH
37482: LD_VAR 0 5
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 21
37493: PUSH
37494: LD_INT 2
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 3
37503: PUSH
37504: LD_INT 24
37506: PUSH
37507: LD_INT 1000
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: LIST
37522: PPUSH
37523: CALL_OW 70
37527: ST_TO_ADDR
// for j in fac do
37528: LD_ADDR_VAR 0 3
37532: PUSH
37533: LD_VAR 0 6
37537: PUSH
37538: FOR_IN
37539: IFFALSE 37620
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
37541: LD_ADDR_VAR 0 7
37545: PUSH
37546: LD_VAR 0 7
37550: PUSH
37551: LD_INT 22
37553: PUSH
37554: LD_VAR 0 5
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 91
37565: PUSH
37566: LD_VAR 0 3
37570: PUSH
37571: LD_INT 15
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 21
37581: PUSH
37582: LD_INT 2
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 3
37591: PUSH
37592: LD_INT 24
37594: PUSH
37595: LD_INT 1000
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: PPUSH
37612: CALL_OW 69
37616: UNION
37617: ST_TO_ADDR
37618: GO 37538
37620: POP
37621: POP
// if not vehs then
37622: LD_VAR 0 7
37626: NOT
37627: IFFALSE 37653
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
37629: LD_ADDR_EXP 99
37633: PUSH
37634: LD_EXP 99
37638: PPUSH
37639: LD_VAR 0 2
37643: PPUSH
37644: EMPTY
37645: PPUSH
37646: CALL_OW 1
37650: ST_TO_ADDR
// continue ;
37651: GO 37311
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
37653: LD_ADDR_VAR 0 8
37657: PUSH
37658: LD_EXP 87
37662: PUSH
37663: LD_VAR 0 2
37667: ARRAY
37668: PPUSH
37669: LD_INT 30
37671: PUSH
37672: LD_INT 3
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PPUSH
37679: CALL_OW 72
37683: ST_TO_ADDR
// if tmp then
37684: LD_VAR 0 8
37688: IFFALSE 37791
// begin for j in tmp do
37690: LD_ADDR_VAR 0 3
37694: PUSH
37695: LD_VAR 0 8
37699: PUSH
37700: FOR_IN
37701: IFFALSE 37789
// for k in UnitsInside ( j ) do
37703: LD_ADDR_VAR 0 4
37707: PUSH
37708: LD_VAR 0 3
37712: PPUSH
37713: CALL_OW 313
37717: PUSH
37718: FOR_IN
37719: IFFALSE 37785
// if k then
37721: LD_VAR 0 4
37725: IFFALSE 37783
// if not k in mc_repair_vehicle [ i ] then
37727: LD_VAR 0 4
37731: PUSH
37732: LD_EXP 99
37736: PUSH
37737: LD_VAR 0 2
37741: ARRAY
37742: IN
37743: NOT
37744: IFFALSE 37783
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
37746: LD_ADDR_EXP 99
37750: PUSH
37751: LD_EXP 99
37755: PPUSH
37756: LD_VAR 0 2
37760: PPUSH
37761: LD_EXP 99
37765: PUSH
37766: LD_VAR 0 2
37770: ARRAY
37771: PUSH
37772: LD_VAR 0 4
37776: UNION
37777: PPUSH
37778: CALL_OW 1
37782: ST_TO_ADDR
37783: GO 37718
37785: POP
37786: POP
37787: GO 37700
37789: POP
37790: POP
// end ; if not mc_repair_vehicle [ i ] then
37791: LD_EXP 99
37795: PUSH
37796: LD_VAR 0 2
37800: ARRAY
37801: NOT
37802: IFFALSE 37806
// continue ;
37804: GO 37311
// for j in mc_repair_vehicle [ i ] do
37806: LD_ADDR_VAR 0 3
37810: PUSH
37811: LD_EXP 99
37815: PUSH
37816: LD_VAR 0 2
37820: ARRAY
37821: PUSH
37822: FOR_IN
37823: IFFALSE 37989
// begin if GetClass ( j ) <> 3 then
37825: LD_VAR 0 3
37829: PPUSH
37830: CALL_OW 257
37834: PUSH
37835: LD_INT 3
37837: NONEQUAL
37838: IFFALSE 37879
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
37840: LD_ADDR_EXP 99
37844: PUSH
37845: LD_EXP 99
37849: PPUSH
37850: LD_VAR 0 2
37854: PPUSH
37855: LD_EXP 99
37859: PUSH
37860: LD_VAR 0 2
37864: ARRAY
37865: PUSH
37866: LD_VAR 0 3
37870: DIFF
37871: PPUSH
37872: CALL_OW 1
37876: ST_TO_ADDR
// continue ;
37877: GO 37822
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
37879: LD_VAR 0 3
37883: PPUSH
37884: CALL_OW 311
37888: NOT
37889: PUSH
37890: LD_VAR 0 3
37894: PUSH
37895: LD_EXP 90
37899: PUSH
37900: LD_VAR 0 2
37904: ARRAY
37905: PUSH
37906: LD_INT 1
37908: ARRAY
37909: IN
37910: NOT
37911: AND
37912: PUSH
37913: LD_VAR 0 3
37917: PUSH
37918: LD_EXP 90
37922: PUSH
37923: LD_VAR 0 2
37927: ARRAY
37928: PUSH
37929: LD_INT 2
37931: ARRAY
37932: IN
37933: NOT
37934: AND
37935: IFFALSE 37987
// begin if IsInUnit ( j ) then
37937: LD_VAR 0 3
37941: PPUSH
37942: CALL_OW 310
37946: IFFALSE 37957
// ComExitBuilding ( j ) ;
37948: LD_VAR 0 3
37952: PPUSH
37953: CALL_OW 122
// if not HasTask ( j ) then
37957: LD_VAR 0 3
37961: PPUSH
37962: CALL_OW 314
37966: NOT
37967: IFFALSE 37987
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
37969: LD_VAR 0 3
37973: PPUSH
37974: LD_VAR 0 7
37978: PUSH
37979: LD_INT 1
37981: ARRAY
37982: PPUSH
37983: CALL_OW 189
// end ; end ;
37987: GO 37822
37989: POP
37990: POP
// end ;
37991: GO 37311
37993: POP
37994: POP
// end ;
37995: LD_VAR 0 1
37999: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
38000: LD_INT 0
38002: PPUSH
38003: PPUSH
38004: PPUSH
38005: PPUSH
38006: PPUSH
38007: PPUSH
38008: PPUSH
38009: PPUSH
38010: PPUSH
38011: PPUSH
38012: PPUSH
// if not mc_bases then
38013: LD_EXP 87
38017: NOT
38018: IFFALSE 38022
// exit ;
38020: GO 38824
// for i = 1 to mc_bases do
38022: LD_ADDR_VAR 0 2
38026: PUSH
38027: DOUBLE
38028: LD_INT 1
38030: DEC
38031: ST_TO_ADDR
38032: LD_EXP 87
38036: PUSH
38037: FOR_TO
38038: IFFALSE 38822
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
38040: LD_EXP 115
38044: PUSH
38045: LD_VAR 0 2
38049: ARRAY
38050: NOT
38051: PUSH
38052: LD_EXP 90
38056: PUSH
38057: LD_VAR 0 2
38061: ARRAY
38062: PUSH
38063: LD_INT 1
38065: ARRAY
38066: OR
38067: PUSH
38068: LD_EXP 90
38072: PUSH
38073: LD_VAR 0 2
38077: ARRAY
38078: PUSH
38079: LD_INT 2
38081: ARRAY
38082: OR
38083: PUSH
38084: LD_EXP 113
38088: PUSH
38089: LD_VAR 0 2
38093: ARRAY
38094: PPUSH
38095: LD_INT 1
38097: PPUSH
38098: CALL_OW 325
38102: NOT
38103: OR
38104: PUSH
38105: LD_EXP 110
38109: PUSH
38110: LD_VAR 0 2
38114: ARRAY
38115: OR
38116: IFFALSE 38120
// continue ;
38118: GO 38037
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
38120: LD_ADDR_VAR 0 8
38124: PUSH
38125: LD_EXP 87
38129: PUSH
38130: LD_VAR 0 2
38134: ARRAY
38135: PPUSH
38136: LD_INT 25
38138: PUSH
38139: LD_INT 4
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 50
38148: PUSH
38149: EMPTY
38150: LIST
38151: PUSH
38152: LD_INT 3
38154: PUSH
38155: LD_INT 60
38157: PUSH
38158: EMPTY
38159: LIST
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: LIST
38169: PPUSH
38170: CALL_OW 72
38174: PUSH
38175: LD_EXP 91
38179: PUSH
38180: LD_VAR 0 2
38184: ARRAY
38185: DIFF
38186: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
38187: LD_ADDR_VAR 0 9
38191: PUSH
38192: LD_EXP 87
38196: PUSH
38197: LD_VAR 0 2
38201: ARRAY
38202: PPUSH
38203: LD_INT 2
38205: PUSH
38206: LD_INT 30
38208: PUSH
38209: LD_INT 0
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 30
38218: PUSH
38219: LD_INT 1
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: LIST
38230: PPUSH
38231: CALL_OW 72
38235: ST_TO_ADDR
// if not tmp or not dep then
38236: LD_VAR 0 8
38240: NOT
38241: PUSH
38242: LD_VAR 0 9
38246: NOT
38247: OR
38248: IFFALSE 38252
// continue ;
38250: GO 38037
// side := GetSide ( tmp [ 1 ] ) ;
38252: LD_ADDR_VAR 0 11
38256: PUSH
38257: LD_VAR 0 8
38261: PUSH
38262: LD_INT 1
38264: ARRAY
38265: PPUSH
38266: CALL_OW 255
38270: ST_TO_ADDR
// dep := dep [ 1 ] ;
38271: LD_ADDR_VAR 0 9
38275: PUSH
38276: LD_VAR 0 9
38280: PUSH
38281: LD_INT 1
38283: ARRAY
38284: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
38285: LD_ADDR_VAR 0 7
38289: PUSH
38290: LD_EXP 115
38294: PUSH
38295: LD_VAR 0 2
38299: ARRAY
38300: PPUSH
38301: LD_INT 22
38303: PUSH
38304: LD_INT 0
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 25
38313: PUSH
38314: LD_INT 12
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PPUSH
38325: CALL_OW 70
38329: PUSH
38330: LD_INT 22
38332: PUSH
38333: LD_INT 0
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 25
38342: PUSH
38343: LD_INT 12
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 91
38352: PUSH
38353: LD_VAR 0 9
38357: PUSH
38358: LD_INT 20
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: LIST
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: LIST
38370: PPUSH
38371: CALL_OW 69
38375: UNION
38376: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
38377: LD_ADDR_VAR 0 10
38381: PUSH
38382: LD_EXP 115
38386: PUSH
38387: LD_VAR 0 2
38391: ARRAY
38392: PPUSH
38393: LD_INT 81
38395: PUSH
38396: LD_VAR 0 11
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PPUSH
38405: CALL_OW 70
38409: ST_TO_ADDR
// if not apes or danger_at_area then
38410: LD_VAR 0 7
38414: NOT
38415: PUSH
38416: LD_VAR 0 10
38420: OR
38421: IFFALSE 38471
// begin if mc_taming [ i ] then
38423: LD_EXP 118
38427: PUSH
38428: LD_VAR 0 2
38432: ARRAY
38433: IFFALSE 38469
// begin MC_Reset ( i , 121 ) ;
38435: LD_VAR 0 2
38439: PPUSH
38440: LD_INT 121
38442: PPUSH
38443: CALL 23922 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
38447: LD_ADDR_EXP 118
38451: PUSH
38452: LD_EXP 118
38456: PPUSH
38457: LD_VAR 0 2
38461: PPUSH
38462: EMPTY
38463: PPUSH
38464: CALL_OW 1
38468: ST_TO_ADDR
// end ; continue ;
38469: GO 38037
// end ; for j in tmp do
38471: LD_ADDR_VAR 0 3
38475: PUSH
38476: LD_VAR 0 8
38480: PUSH
38481: FOR_IN
38482: IFFALSE 38818
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
38484: LD_VAR 0 3
38488: PUSH
38489: LD_EXP 118
38493: PUSH
38494: LD_VAR 0 2
38498: ARRAY
38499: IN
38500: NOT
38501: PUSH
38502: LD_EXP 118
38506: PUSH
38507: LD_VAR 0 2
38511: ARRAY
38512: PUSH
38513: LD_INT 3
38515: LESS
38516: AND
38517: IFFALSE 38575
// begin SetTag ( j , 121 ) ;
38519: LD_VAR 0 3
38523: PPUSH
38524: LD_INT 121
38526: PPUSH
38527: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
38531: LD_ADDR_EXP 118
38535: PUSH
38536: LD_EXP 118
38540: PPUSH
38541: LD_VAR 0 2
38545: PUSH
38546: LD_EXP 118
38550: PUSH
38551: LD_VAR 0 2
38555: ARRAY
38556: PUSH
38557: LD_INT 1
38559: PLUS
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PPUSH
38565: LD_VAR 0 3
38569: PPUSH
38570: CALL 50080 0 3
38574: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
38575: LD_VAR 0 3
38579: PUSH
38580: LD_EXP 118
38584: PUSH
38585: LD_VAR 0 2
38589: ARRAY
38590: IN
38591: IFFALSE 38816
// begin if GetClass ( j ) <> 4 then
38593: LD_VAR 0 3
38597: PPUSH
38598: CALL_OW 257
38602: PUSH
38603: LD_INT 4
38605: NONEQUAL
38606: IFFALSE 38659
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
38608: LD_ADDR_EXP 118
38612: PUSH
38613: LD_EXP 118
38617: PPUSH
38618: LD_VAR 0 2
38622: PPUSH
38623: LD_EXP 118
38627: PUSH
38628: LD_VAR 0 2
38632: ARRAY
38633: PUSH
38634: LD_VAR 0 3
38638: DIFF
38639: PPUSH
38640: CALL_OW 1
38644: ST_TO_ADDR
// SetTag ( j , 0 ) ;
38645: LD_VAR 0 3
38649: PPUSH
38650: LD_INT 0
38652: PPUSH
38653: CALL_OW 109
// continue ;
38657: GO 38481
// end ; if IsInUnit ( j ) then
38659: LD_VAR 0 3
38663: PPUSH
38664: CALL_OW 310
38668: IFFALSE 38679
// ComExitBuilding ( j ) ;
38670: LD_VAR 0 3
38674: PPUSH
38675: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
38679: LD_ADDR_VAR 0 6
38683: PUSH
38684: LD_VAR 0 7
38688: PPUSH
38689: LD_VAR 0 3
38693: PPUSH
38694: CALL_OW 74
38698: ST_TO_ADDR
// if not ape then
38699: LD_VAR 0 6
38703: NOT
38704: IFFALSE 38708
// break ;
38706: GO 38818
// x := GetX ( ape ) ;
38708: LD_ADDR_VAR 0 4
38712: PUSH
38713: LD_VAR 0 6
38717: PPUSH
38718: CALL_OW 250
38722: ST_TO_ADDR
// y := GetY ( ape ) ;
38723: LD_ADDR_VAR 0 5
38727: PUSH
38728: LD_VAR 0 6
38732: PPUSH
38733: CALL_OW 251
38737: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38738: LD_VAR 0 4
38742: PPUSH
38743: LD_VAR 0 5
38747: PPUSH
38748: CALL_OW 488
38752: NOT
38753: PUSH
38754: LD_VAR 0 11
38758: PPUSH
38759: LD_VAR 0 4
38763: PPUSH
38764: LD_VAR 0 5
38768: PPUSH
38769: LD_INT 20
38771: PPUSH
38772: CALL 50976 0 4
38776: PUSH
38777: LD_INT 4
38779: ARRAY
38780: OR
38781: IFFALSE 38785
// break ;
38783: GO 38818
// if not HasTask ( j ) then
38785: LD_VAR 0 3
38789: PPUSH
38790: CALL_OW 314
38794: NOT
38795: IFFALSE 38816
// ComTameXY ( j , x , y ) ;
38797: LD_VAR 0 3
38801: PPUSH
38802: LD_VAR 0 4
38806: PPUSH
38807: LD_VAR 0 5
38811: PPUSH
38812: CALL_OW 131
// end ; end ;
38816: GO 38481
38818: POP
38819: POP
// end ;
38820: GO 38037
38822: POP
38823: POP
// end ;
38824: LD_VAR 0 1
38828: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
38829: LD_INT 0
38831: PPUSH
38832: PPUSH
38833: PPUSH
38834: PPUSH
38835: PPUSH
38836: PPUSH
38837: PPUSH
38838: PPUSH
// if not mc_bases then
38839: LD_EXP 87
38843: NOT
38844: IFFALSE 38848
// exit ;
38846: GO 39474
// for i = 1 to mc_bases do
38848: LD_ADDR_VAR 0 2
38852: PUSH
38853: DOUBLE
38854: LD_INT 1
38856: DEC
38857: ST_TO_ADDR
38858: LD_EXP 87
38862: PUSH
38863: FOR_TO
38864: IFFALSE 39472
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
38866: LD_EXP 116
38870: PUSH
38871: LD_VAR 0 2
38875: ARRAY
38876: NOT
38877: PUSH
38878: LD_EXP 116
38882: PUSH
38883: LD_VAR 0 2
38887: ARRAY
38888: PPUSH
38889: LD_INT 25
38891: PUSH
38892: LD_INT 12
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PPUSH
38899: CALL_OW 72
38903: NOT
38904: OR
38905: IFFALSE 38909
// continue ;
38907: GO 38863
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
38909: LD_ADDR_VAR 0 5
38913: PUSH
38914: LD_EXP 116
38918: PUSH
38919: LD_VAR 0 2
38923: ARRAY
38924: PUSH
38925: LD_INT 1
38927: ARRAY
38928: PPUSH
38929: CALL_OW 255
38933: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
38934: LD_VAR 0 5
38938: PPUSH
38939: LD_INT 2
38941: PPUSH
38942: CALL_OW 325
38946: IFFALSE 39199
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
38948: LD_ADDR_VAR 0 4
38952: PUSH
38953: LD_EXP 116
38957: PUSH
38958: LD_VAR 0 2
38962: ARRAY
38963: PPUSH
38964: LD_INT 25
38966: PUSH
38967: LD_INT 16
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PPUSH
38974: CALL_OW 72
38978: ST_TO_ADDR
// if tmp < 6 then
38979: LD_VAR 0 4
38983: PUSH
38984: LD_INT 6
38986: LESS
38987: IFFALSE 39199
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
38989: LD_ADDR_VAR 0 6
38993: PUSH
38994: LD_EXP 87
38998: PUSH
38999: LD_VAR 0 2
39003: ARRAY
39004: PPUSH
39005: LD_INT 2
39007: PUSH
39008: LD_INT 30
39010: PUSH
39011: LD_INT 0
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 30
39020: PUSH
39021: LD_INT 1
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: LIST
39032: PPUSH
39033: CALL_OW 72
39037: ST_TO_ADDR
// if depot then
39038: LD_VAR 0 6
39042: IFFALSE 39199
// begin selected := 0 ;
39044: LD_ADDR_VAR 0 7
39048: PUSH
39049: LD_INT 0
39051: ST_TO_ADDR
// for j in depot do
39052: LD_ADDR_VAR 0 3
39056: PUSH
39057: LD_VAR 0 6
39061: PUSH
39062: FOR_IN
39063: IFFALSE 39094
// begin if UnitsInside ( j ) < 6 then
39065: LD_VAR 0 3
39069: PPUSH
39070: CALL_OW 313
39074: PUSH
39075: LD_INT 6
39077: LESS
39078: IFFALSE 39092
// begin selected := j ;
39080: LD_ADDR_VAR 0 7
39084: PUSH
39085: LD_VAR 0 3
39089: ST_TO_ADDR
// break ;
39090: GO 39094
// end ; end ;
39092: GO 39062
39094: POP
39095: POP
// if selected then
39096: LD_VAR 0 7
39100: IFFALSE 39199
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
39102: LD_ADDR_VAR 0 3
39106: PUSH
39107: LD_EXP 116
39111: PUSH
39112: LD_VAR 0 2
39116: ARRAY
39117: PPUSH
39118: LD_INT 25
39120: PUSH
39121: LD_INT 12
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PPUSH
39128: CALL_OW 72
39132: PUSH
39133: FOR_IN
39134: IFFALSE 39197
// if not HasTask ( j ) then
39136: LD_VAR 0 3
39140: PPUSH
39141: CALL_OW 314
39145: NOT
39146: IFFALSE 39195
// begin if not IsInUnit ( j ) then
39148: LD_VAR 0 3
39152: PPUSH
39153: CALL_OW 310
39157: NOT
39158: IFFALSE 39174
// ComEnterUnit ( j , selected ) ;
39160: LD_VAR 0 3
39164: PPUSH
39165: LD_VAR 0 7
39169: PPUSH
39170: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
39174: LD_VAR 0 3
39178: PPUSH
39179: LD_INT 16
39181: PPUSH
39182: CALL_OW 183
// AddComExitBuilding ( j ) ;
39186: LD_VAR 0 3
39190: PPUSH
39191: CALL_OW 182
// end ;
39195: GO 39133
39197: POP
39198: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
39199: LD_VAR 0 5
39203: PPUSH
39204: LD_INT 11
39206: PPUSH
39207: CALL_OW 325
39211: IFFALSE 39470
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
39213: LD_ADDR_VAR 0 4
39217: PUSH
39218: LD_EXP 116
39222: PUSH
39223: LD_VAR 0 2
39227: ARRAY
39228: PPUSH
39229: LD_INT 25
39231: PUSH
39232: LD_INT 16
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PPUSH
39239: CALL_OW 72
39243: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
39244: LD_VAR 0 4
39248: PUSH
39249: LD_INT 6
39251: GREATEREQUAL
39252: PUSH
39253: LD_VAR 0 5
39257: PPUSH
39258: LD_INT 2
39260: PPUSH
39261: CALL_OW 325
39265: NOT
39266: OR
39267: IFFALSE 39470
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
39269: LD_ADDR_VAR 0 8
39273: PUSH
39274: LD_EXP 87
39278: PUSH
39279: LD_VAR 0 2
39283: ARRAY
39284: PPUSH
39285: LD_INT 2
39287: PUSH
39288: LD_INT 30
39290: PUSH
39291: LD_INT 4
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 30
39300: PUSH
39301: LD_INT 5
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: LIST
39312: PPUSH
39313: CALL_OW 72
39317: ST_TO_ADDR
// if barracks then
39318: LD_VAR 0 8
39322: IFFALSE 39470
// begin selected := 0 ;
39324: LD_ADDR_VAR 0 7
39328: PUSH
39329: LD_INT 0
39331: ST_TO_ADDR
// for j in barracks do
39332: LD_ADDR_VAR 0 3
39336: PUSH
39337: LD_VAR 0 8
39341: PUSH
39342: FOR_IN
39343: IFFALSE 39374
// begin if UnitsInside ( j ) < 6 then
39345: LD_VAR 0 3
39349: PPUSH
39350: CALL_OW 313
39354: PUSH
39355: LD_INT 6
39357: LESS
39358: IFFALSE 39372
// begin selected := j ;
39360: LD_ADDR_VAR 0 7
39364: PUSH
39365: LD_VAR 0 3
39369: ST_TO_ADDR
// break ;
39370: GO 39374
// end ; end ;
39372: GO 39342
39374: POP
39375: POP
// if selected then
39376: LD_VAR 0 7
39380: IFFALSE 39470
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
39382: LD_ADDR_VAR 0 3
39386: PUSH
39387: LD_EXP 116
39391: PUSH
39392: LD_VAR 0 2
39396: ARRAY
39397: PPUSH
39398: LD_INT 25
39400: PUSH
39401: LD_INT 12
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PPUSH
39408: CALL_OW 72
39412: PUSH
39413: FOR_IN
39414: IFFALSE 39468
// if not IsInUnit ( j ) and not HasTask ( j ) then
39416: LD_VAR 0 3
39420: PPUSH
39421: CALL_OW 310
39425: NOT
39426: PUSH
39427: LD_VAR 0 3
39431: PPUSH
39432: CALL_OW 314
39436: NOT
39437: AND
39438: IFFALSE 39466
// begin ComEnterUnit ( j , selected ) ;
39440: LD_VAR 0 3
39444: PPUSH
39445: LD_VAR 0 7
39449: PPUSH
39450: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
39454: LD_VAR 0 3
39458: PPUSH
39459: LD_INT 15
39461: PPUSH
39462: CALL_OW 183
// end ;
39466: GO 39413
39468: POP
39469: POP
// end ; end ; end ; end ; end ;
39470: GO 38863
39472: POP
39473: POP
// end ;
39474: LD_VAR 0 1
39478: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
39479: LD_INT 0
39481: PPUSH
39482: PPUSH
39483: PPUSH
39484: PPUSH
// if not mc_bases then
39485: LD_EXP 87
39489: NOT
39490: IFFALSE 39494
// exit ;
39492: GO 39672
// for i = 1 to mc_bases do
39494: LD_ADDR_VAR 0 2
39498: PUSH
39499: DOUBLE
39500: LD_INT 1
39502: DEC
39503: ST_TO_ADDR
39504: LD_EXP 87
39508: PUSH
39509: FOR_TO
39510: IFFALSE 39670
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
39512: LD_ADDR_VAR 0 4
39516: PUSH
39517: LD_EXP 87
39521: PUSH
39522: LD_VAR 0 2
39526: ARRAY
39527: PPUSH
39528: LD_INT 25
39530: PUSH
39531: LD_INT 9
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PPUSH
39538: CALL_OW 72
39542: ST_TO_ADDR
// if not tmp then
39543: LD_VAR 0 4
39547: NOT
39548: IFFALSE 39552
// continue ;
39550: GO 39509
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
39552: LD_EXP 113
39556: PUSH
39557: LD_VAR 0 2
39561: ARRAY
39562: PPUSH
39563: LD_INT 29
39565: PPUSH
39566: CALL_OW 325
39570: NOT
39571: PUSH
39572: LD_EXP 113
39576: PUSH
39577: LD_VAR 0 2
39581: ARRAY
39582: PPUSH
39583: LD_INT 28
39585: PPUSH
39586: CALL_OW 325
39590: NOT
39591: AND
39592: IFFALSE 39596
// continue ;
39594: GO 39509
// for j in tmp do
39596: LD_ADDR_VAR 0 3
39600: PUSH
39601: LD_VAR 0 4
39605: PUSH
39606: FOR_IN
39607: IFFALSE 39666
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
39609: LD_VAR 0 3
39613: PUSH
39614: LD_EXP 90
39618: PUSH
39619: LD_VAR 0 2
39623: ARRAY
39624: PUSH
39625: LD_INT 1
39627: ARRAY
39628: IN
39629: NOT
39630: PUSH
39631: LD_VAR 0 3
39635: PUSH
39636: LD_EXP 90
39640: PUSH
39641: LD_VAR 0 2
39645: ARRAY
39646: PUSH
39647: LD_INT 2
39649: ARRAY
39650: IN
39651: NOT
39652: AND
39653: IFFALSE 39664
// ComSpaceTimeShoot ( j ) ;
39655: LD_VAR 0 3
39659: PPUSH
39660: CALL 46077 0 1
39664: GO 39606
39666: POP
39667: POP
// end ;
39668: GO 39509
39670: POP
39671: POP
// end ;
39672: LD_VAR 0 1
39676: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
39677: LD_INT 0
39679: PPUSH
39680: PPUSH
39681: PPUSH
39682: PPUSH
39683: PPUSH
39684: PPUSH
39685: PPUSH
39686: PPUSH
39687: PPUSH
// if not mc_bases then
39688: LD_EXP 87
39692: NOT
39693: IFFALSE 39697
// exit ;
39695: GO 40319
// for i = 1 to mc_bases do
39697: LD_ADDR_VAR 0 2
39701: PUSH
39702: DOUBLE
39703: LD_INT 1
39705: DEC
39706: ST_TO_ADDR
39707: LD_EXP 87
39711: PUSH
39712: FOR_TO
39713: IFFALSE 40317
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
39715: LD_EXP 122
39719: PUSH
39720: LD_VAR 0 2
39724: ARRAY
39725: NOT
39726: PUSH
39727: LD_INT 38
39729: PPUSH
39730: LD_EXP 113
39734: PUSH
39735: LD_VAR 0 2
39739: ARRAY
39740: PPUSH
39741: CALL_OW 321
39745: PUSH
39746: LD_INT 2
39748: NONEQUAL
39749: OR
39750: IFFALSE 39754
// continue ;
39752: GO 39712
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
39754: LD_ADDR_VAR 0 8
39758: PUSH
39759: LD_EXP 87
39763: PUSH
39764: LD_VAR 0 2
39768: ARRAY
39769: PPUSH
39770: LD_INT 30
39772: PUSH
39773: LD_INT 34
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PPUSH
39780: CALL_OW 72
39784: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
39785: LD_ADDR_VAR 0 9
39789: PUSH
39790: LD_EXP 87
39794: PUSH
39795: LD_VAR 0 2
39799: ARRAY
39800: PPUSH
39801: LD_INT 25
39803: PUSH
39804: LD_INT 4
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PPUSH
39811: CALL_OW 72
39815: PPUSH
39816: LD_INT 0
39818: PPUSH
39819: CALL 78641 0 2
39823: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
39824: LD_VAR 0 9
39828: NOT
39829: PUSH
39830: LD_VAR 0 8
39834: NOT
39835: OR
39836: PUSH
39837: LD_EXP 87
39841: PUSH
39842: LD_VAR 0 2
39846: ARRAY
39847: PPUSH
39848: LD_INT 124
39850: PPUSH
39851: CALL 78641 0 2
39855: OR
39856: IFFALSE 39860
// continue ;
39858: GO 39712
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
39860: LD_EXP 123
39864: PUSH
39865: LD_VAR 0 2
39869: ARRAY
39870: PUSH
39871: LD_EXP 122
39875: PUSH
39876: LD_VAR 0 2
39880: ARRAY
39881: LESS
39882: PUSH
39883: LD_EXP 123
39887: PUSH
39888: LD_VAR 0 2
39892: ARRAY
39893: PUSH
39894: LD_VAR 0 8
39898: LESS
39899: AND
39900: IFFALSE 40315
// begin tmp := sci [ 1 ] ;
39902: LD_ADDR_VAR 0 7
39906: PUSH
39907: LD_VAR 0 9
39911: PUSH
39912: LD_INT 1
39914: ARRAY
39915: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
39916: LD_VAR 0 7
39920: PPUSH
39921: LD_INT 124
39923: PPUSH
39924: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
39928: LD_ADDR_VAR 0 3
39932: PUSH
39933: DOUBLE
39934: LD_EXP 122
39938: PUSH
39939: LD_VAR 0 2
39943: ARRAY
39944: INC
39945: ST_TO_ADDR
39946: LD_EXP 122
39950: PUSH
39951: LD_VAR 0 2
39955: ARRAY
39956: PUSH
39957: FOR_DOWNTO
39958: IFFALSE 40301
// begin if IsInUnit ( tmp ) then
39960: LD_VAR 0 7
39964: PPUSH
39965: CALL_OW 310
39969: IFFALSE 39980
// ComExitBuilding ( tmp ) ;
39971: LD_VAR 0 7
39975: PPUSH
39976: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
39980: LD_INT 35
39982: PPUSH
39983: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
39987: LD_VAR 0 7
39991: PPUSH
39992: CALL_OW 310
39996: NOT
39997: PUSH
39998: LD_VAR 0 7
40002: PPUSH
40003: CALL_OW 314
40007: NOT
40008: AND
40009: IFFALSE 39980
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
40011: LD_ADDR_VAR 0 6
40015: PUSH
40016: LD_VAR 0 7
40020: PPUSH
40021: CALL_OW 250
40025: PUSH
40026: LD_VAR 0 7
40030: PPUSH
40031: CALL_OW 251
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40040: LD_INT 35
40042: PPUSH
40043: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
40047: LD_ADDR_VAR 0 4
40051: PUSH
40052: LD_EXP 122
40056: PUSH
40057: LD_VAR 0 2
40061: ARRAY
40062: PUSH
40063: LD_VAR 0 3
40067: ARRAY
40068: PUSH
40069: LD_INT 1
40071: ARRAY
40072: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
40073: LD_ADDR_VAR 0 5
40077: PUSH
40078: LD_EXP 122
40082: PUSH
40083: LD_VAR 0 2
40087: ARRAY
40088: PUSH
40089: LD_VAR 0 3
40093: ARRAY
40094: PUSH
40095: LD_INT 2
40097: ARRAY
40098: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
40099: LD_VAR 0 7
40103: PPUSH
40104: LD_INT 10
40106: PPUSH
40107: CALL 52673 0 2
40111: PUSH
40112: LD_INT 4
40114: ARRAY
40115: IFFALSE 40153
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
40117: LD_VAR 0 7
40121: PPUSH
40122: LD_VAR 0 6
40126: PUSH
40127: LD_INT 1
40129: ARRAY
40130: PPUSH
40131: LD_VAR 0 6
40135: PUSH
40136: LD_INT 2
40138: ARRAY
40139: PPUSH
40140: CALL_OW 111
// wait ( 0 0$10 ) ;
40144: LD_INT 350
40146: PPUSH
40147: CALL_OW 67
// end else
40151: GO 40179
// begin ComMoveXY ( tmp , x , y ) ;
40153: LD_VAR 0 7
40157: PPUSH
40158: LD_VAR 0 4
40162: PPUSH
40163: LD_VAR 0 5
40167: PPUSH
40168: CALL_OW 111
// wait ( 0 0$3 ) ;
40172: LD_INT 105
40174: PPUSH
40175: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
40179: LD_VAR 0 7
40183: PPUSH
40184: LD_VAR 0 4
40188: PPUSH
40189: LD_VAR 0 5
40193: PPUSH
40194: CALL_OW 307
40198: IFFALSE 40040
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
40200: LD_VAR 0 7
40204: PPUSH
40205: LD_VAR 0 4
40209: PPUSH
40210: LD_VAR 0 5
40214: PPUSH
40215: LD_VAR 0 8
40219: PUSH
40220: LD_VAR 0 3
40224: ARRAY
40225: PPUSH
40226: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
40230: LD_INT 35
40232: PPUSH
40233: CALL_OW 67
// until not HasTask ( tmp ) ;
40237: LD_VAR 0 7
40241: PPUSH
40242: CALL_OW 314
40246: NOT
40247: IFFALSE 40230
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
40249: LD_ADDR_EXP 123
40253: PUSH
40254: LD_EXP 123
40258: PPUSH
40259: LD_VAR 0 2
40263: PUSH
40264: LD_EXP 123
40268: PUSH
40269: LD_VAR 0 2
40273: ARRAY
40274: PUSH
40275: LD_INT 1
40277: PLUS
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PPUSH
40283: LD_VAR 0 8
40287: PUSH
40288: LD_VAR 0 3
40292: ARRAY
40293: PPUSH
40294: CALL 50080 0 3
40298: ST_TO_ADDR
// end ;
40299: GO 39957
40301: POP
40302: POP
// MC_Reset ( i , 124 ) ;
40303: LD_VAR 0 2
40307: PPUSH
40308: LD_INT 124
40310: PPUSH
40311: CALL 23922 0 2
// end ; end ;
40315: GO 39712
40317: POP
40318: POP
// end ;
40319: LD_VAR 0 1
40323: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
40324: LD_INT 0
40326: PPUSH
40327: PPUSH
40328: PPUSH
// if not mc_bases then
40329: LD_EXP 87
40333: NOT
40334: IFFALSE 40338
// exit ;
40336: GO 40944
// for i = 1 to mc_bases do
40338: LD_ADDR_VAR 0 2
40342: PUSH
40343: DOUBLE
40344: LD_INT 1
40346: DEC
40347: ST_TO_ADDR
40348: LD_EXP 87
40352: PUSH
40353: FOR_TO
40354: IFFALSE 40942
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
40356: LD_ADDR_VAR 0 3
40360: PUSH
40361: LD_EXP 87
40365: PUSH
40366: LD_VAR 0 2
40370: ARRAY
40371: PPUSH
40372: LD_INT 25
40374: PUSH
40375: LD_INT 4
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PPUSH
40382: CALL_OW 72
40386: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
40387: LD_VAR 0 3
40391: NOT
40392: PUSH
40393: LD_EXP 124
40397: PUSH
40398: LD_VAR 0 2
40402: ARRAY
40403: NOT
40404: OR
40405: PUSH
40406: LD_EXP 87
40410: PUSH
40411: LD_VAR 0 2
40415: ARRAY
40416: PPUSH
40417: LD_INT 2
40419: PUSH
40420: LD_INT 30
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 30
40432: PUSH
40433: LD_INT 1
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: LIST
40444: PPUSH
40445: CALL_OW 72
40449: NOT
40450: OR
40451: IFFALSE 40501
// begin if mc_deposits_finder [ i ] then
40453: LD_EXP 125
40457: PUSH
40458: LD_VAR 0 2
40462: ARRAY
40463: IFFALSE 40499
// begin MC_Reset ( i , 125 ) ;
40465: LD_VAR 0 2
40469: PPUSH
40470: LD_INT 125
40472: PPUSH
40473: CALL 23922 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
40477: LD_ADDR_EXP 125
40481: PUSH
40482: LD_EXP 125
40486: PPUSH
40487: LD_VAR 0 2
40491: PPUSH
40492: EMPTY
40493: PPUSH
40494: CALL_OW 1
40498: ST_TO_ADDR
// end ; continue ;
40499: GO 40353
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
40501: LD_EXP 124
40505: PUSH
40506: LD_VAR 0 2
40510: ARRAY
40511: PUSH
40512: LD_INT 1
40514: ARRAY
40515: PUSH
40516: LD_INT 3
40518: ARRAY
40519: PUSH
40520: LD_INT 1
40522: EQUAL
40523: PUSH
40524: LD_INT 20
40526: PPUSH
40527: LD_EXP 113
40531: PUSH
40532: LD_VAR 0 2
40536: ARRAY
40537: PPUSH
40538: CALL_OW 321
40542: PUSH
40543: LD_INT 2
40545: NONEQUAL
40546: AND
40547: IFFALSE 40597
// begin if mc_deposits_finder [ i ] then
40549: LD_EXP 125
40553: PUSH
40554: LD_VAR 0 2
40558: ARRAY
40559: IFFALSE 40595
// begin MC_Reset ( i , 125 ) ;
40561: LD_VAR 0 2
40565: PPUSH
40566: LD_INT 125
40568: PPUSH
40569: CALL 23922 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
40573: LD_ADDR_EXP 125
40577: PUSH
40578: LD_EXP 125
40582: PPUSH
40583: LD_VAR 0 2
40587: PPUSH
40588: EMPTY
40589: PPUSH
40590: CALL_OW 1
40594: ST_TO_ADDR
// end ; continue ;
40595: GO 40353
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
40597: LD_EXP 124
40601: PUSH
40602: LD_VAR 0 2
40606: ARRAY
40607: PUSH
40608: LD_INT 1
40610: ARRAY
40611: PUSH
40612: LD_INT 1
40614: ARRAY
40615: PPUSH
40616: LD_EXP 124
40620: PUSH
40621: LD_VAR 0 2
40625: ARRAY
40626: PUSH
40627: LD_INT 1
40629: ARRAY
40630: PUSH
40631: LD_INT 2
40633: ARRAY
40634: PPUSH
40635: LD_EXP 113
40639: PUSH
40640: LD_VAR 0 2
40644: ARRAY
40645: PPUSH
40646: CALL_OW 440
40650: IFFALSE 40693
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
40652: LD_ADDR_EXP 124
40656: PUSH
40657: LD_EXP 124
40661: PPUSH
40662: LD_VAR 0 2
40666: PPUSH
40667: LD_EXP 124
40671: PUSH
40672: LD_VAR 0 2
40676: ARRAY
40677: PPUSH
40678: LD_INT 1
40680: PPUSH
40681: CALL_OW 3
40685: PPUSH
40686: CALL_OW 1
40690: ST_TO_ADDR
40691: GO 40940
// begin if not mc_deposits_finder [ i ] then
40693: LD_EXP 125
40697: PUSH
40698: LD_VAR 0 2
40702: ARRAY
40703: NOT
40704: IFFALSE 40756
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
40706: LD_ADDR_EXP 125
40710: PUSH
40711: LD_EXP 125
40715: PPUSH
40716: LD_VAR 0 2
40720: PPUSH
40721: LD_VAR 0 3
40725: PUSH
40726: LD_INT 1
40728: ARRAY
40729: PUSH
40730: EMPTY
40731: LIST
40732: PPUSH
40733: CALL_OW 1
40737: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
40738: LD_VAR 0 3
40742: PUSH
40743: LD_INT 1
40745: ARRAY
40746: PPUSH
40747: LD_INT 125
40749: PPUSH
40750: CALL_OW 109
// end else
40754: GO 40940
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
40756: LD_EXP 125
40760: PUSH
40761: LD_VAR 0 2
40765: ARRAY
40766: PUSH
40767: LD_INT 1
40769: ARRAY
40770: PPUSH
40771: CALL_OW 310
40775: IFFALSE 40798
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
40777: LD_EXP 125
40781: PUSH
40782: LD_VAR 0 2
40786: ARRAY
40787: PUSH
40788: LD_INT 1
40790: ARRAY
40791: PPUSH
40792: CALL_OW 122
40796: GO 40940
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
40798: LD_EXP 125
40802: PUSH
40803: LD_VAR 0 2
40807: ARRAY
40808: PUSH
40809: LD_INT 1
40811: ARRAY
40812: PPUSH
40813: CALL_OW 314
40817: NOT
40818: PUSH
40819: LD_EXP 125
40823: PUSH
40824: LD_VAR 0 2
40828: ARRAY
40829: PUSH
40830: LD_INT 1
40832: ARRAY
40833: PPUSH
40834: LD_EXP 124
40838: PUSH
40839: LD_VAR 0 2
40843: ARRAY
40844: PUSH
40845: LD_INT 1
40847: ARRAY
40848: PUSH
40849: LD_INT 1
40851: ARRAY
40852: PPUSH
40853: LD_EXP 124
40857: PUSH
40858: LD_VAR 0 2
40862: ARRAY
40863: PUSH
40864: LD_INT 1
40866: ARRAY
40867: PUSH
40868: LD_INT 2
40870: ARRAY
40871: PPUSH
40872: CALL_OW 297
40876: PUSH
40877: LD_INT 6
40879: GREATER
40880: AND
40881: IFFALSE 40940
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
40883: LD_EXP 125
40887: PUSH
40888: LD_VAR 0 2
40892: ARRAY
40893: PUSH
40894: LD_INT 1
40896: ARRAY
40897: PPUSH
40898: LD_EXP 124
40902: PUSH
40903: LD_VAR 0 2
40907: ARRAY
40908: PUSH
40909: LD_INT 1
40911: ARRAY
40912: PUSH
40913: LD_INT 1
40915: ARRAY
40916: PPUSH
40917: LD_EXP 124
40921: PUSH
40922: LD_VAR 0 2
40926: ARRAY
40927: PUSH
40928: LD_INT 1
40930: ARRAY
40931: PUSH
40932: LD_INT 2
40934: ARRAY
40935: PPUSH
40936: CALL_OW 111
// end ; end ; end ;
40940: GO 40353
40942: POP
40943: POP
// end ;
40944: LD_VAR 0 1
40948: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
40949: LD_INT 0
40951: PPUSH
40952: PPUSH
40953: PPUSH
40954: PPUSH
40955: PPUSH
40956: PPUSH
40957: PPUSH
40958: PPUSH
40959: PPUSH
40960: PPUSH
40961: PPUSH
// if not mc_bases then
40962: LD_EXP 87
40966: NOT
40967: IFFALSE 40971
// exit ;
40969: GO 41911
// for i = 1 to mc_bases do
40971: LD_ADDR_VAR 0 2
40975: PUSH
40976: DOUBLE
40977: LD_INT 1
40979: DEC
40980: ST_TO_ADDR
40981: LD_EXP 87
40985: PUSH
40986: FOR_TO
40987: IFFALSE 41909
// begin if not mc_bases [ i ] or mc_scan [ i ] then
40989: LD_EXP 87
40993: PUSH
40994: LD_VAR 0 2
40998: ARRAY
40999: NOT
41000: PUSH
41001: LD_EXP 110
41005: PUSH
41006: LD_VAR 0 2
41010: ARRAY
41011: OR
41012: IFFALSE 41016
// continue ;
41014: GO 40986
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
41016: LD_ADDR_VAR 0 7
41020: PUSH
41021: LD_EXP 87
41025: PUSH
41026: LD_VAR 0 2
41030: ARRAY
41031: PUSH
41032: LD_INT 1
41034: ARRAY
41035: PPUSH
41036: CALL_OW 248
41040: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
41041: LD_VAR 0 7
41045: PUSH
41046: LD_INT 3
41048: EQUAL
41049: PUSH
41050: LD_EXP 106
41054: PUSH
41055: LD_VAR 0 2
41059: ARRAY
41060: PUSH
41061: LD_EXP 109
41065: PUSH
41066: LD_VAR 0 2
41070: ARRAY
41071: UNION
41072: PPUSH
41073: LD_INT 33
41075: PUSH
41076: LD_INT 2
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PPUSH
41083: CALL_OW 72
41087: NOT
41088: OR
41089: IFFALSE 41093
// continue ;
41091: GO 40986
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
41093: LD_ADDR_VAR 0 9
41097: PUSH
41098: LD_EXP 87
41102: PUSH
41103: LD_VAR 0 2
41107: ARRAY
41108: PPUSH
41109: LD_INT 30
41111: PUSH
41112: LD_INT 36
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PPUSH
41119: CALL_OW 72
41123: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
41124: LD_ADDR_VAR 0 10
41128: PUSH
41129: LD_EXP 106
41133: PUSH
41134: LD_VAR 0 2
41138: ARRAY
41139: PPUSH
41140: LD_INT 34
41142: PUSH
41143: LD_INT 31
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PPUSH
41150: CALL_OW 72
41154: ST_TO_ADDR
// if not cts and not mcts then
41155: LD_VAR 0 9
41159: NOT
41160: PUSH
41161: LD_VAR 0 10
41165: NOT
41166: AND
41167: IFFALSE 41171
// continue ;
41169: GO 40986
// x := cts ;
41171: LD_ADDR_VAR 0 11
41175: PUSH
41176: LD_VAR 0 9
41180: ST_TO_ADDR
// if not x then
41181: LD_VAR 0 11
41185: NOT
41186: IFFALSE 41198
// x := mcts ;
41188: LD_ADDR_VAR 0 11
41192: PUSH
41193: LD_VAR 0 10
41197: ST_TO_ADDR
// if not x then
41198: LD_VAR 0 11
41202: NOT
41203: IFFALSE 41207
// continue ;
41205: GO 40986
// if mc_remote_driver [ i ] then
41207: LD_EXP 127
41211: PUSH
41212: LD_VAR 0 2
41216: ARRAY
41217: IFFALSE 41604
// for j in mc_remote_driver [ i ] do
41219: LD_ADDR_VAR 0 3
41223: PUSH
41224: LD_EXP 127
41228: PUSH
41229: LD_VAR 0 2
41233: ARRAY
41234: PUSH
41235: FOR_IN
41236: IFFALSE 41602
// begin if GetClass ( j ) <> 3 then
41238: LD_VAR 0 3
41242: PPUSH
41243: CALL_OW 257
41247: PUSH
41248: LD_INT 3
41250: NONEQUAL
41251: IFFALSE 41304
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
41253: LD_ADDR_EXP 127
41257: PUSH
41258: LD_EXP 127
41262: PPUSH
41263: LD_VAR 0 2
41267: PPUSH
41268: LD_EXP 127
41272: PUSH
41273: LD_VAR 0 2
41277: ARRAY
41278: PUSH
41279: LD_VAR 0 3
41283: DIFF
41284: PPUSH
41285: CALL_OW 1
41289: ST_TO_ADDR
// SetTag ( j , 0 ) ;
41290: LD_VAR 0 3
41294: PPUSH
41295: LD_INT 0
41297: PPUSH
41298: CALL_OW 109
// continue ;
41302: GO 41235
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
41304: LD_EXP 106
41308: PUSH
41309: LD_VAR 0 2
41313: ARRAY
41314: PPUSH
41315: LD_INT 34
41317: PUSH
41318: LD_INT 31
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 58
41327: PUSH
41328: EMPTY
41329: LIST
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PPUSH
41335: CALL_OW 72
41339: PUSH
41340: LD_VAR 0 3
41344: PPUSH
41345: CALL 78729 0 1
41349: NOT
41350: AND
41351: IFFALSE 41422
// begin if IsInUnit ( j ) then
41353: LD_VAR 0 3
41357: PPUSH
41358: CALL_OW 310
41362: IFFALSE 41373
// ComExitBuilding ( j ) ;
41364: LD_VAR 0 3
41368: PPUSH
41369: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
41373: LD_VAR 0 3
41377: PPUSH
41378: LD_EXP 106
41382: PUSH
41383: LD_VAR 0 2
41387: ARRAY
41388: PPUSH
41389: LD_INT 34
41391: PUSH
41392: LD_INT 31
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 58
41401: PUSH
41402: EMPTY
41403: LIST
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PPUSH
41409: CALL_OW 72
41413: PUSH
41414: LD_INT 1
41416: ARRAY
41417: PPUSH
41418: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
41422: LD_VAR 0 3
41426: PPUSH
41427: CALL_OW 310
41431: NOT
41432: PUSH
41433: LD_VAR 0 3
41437: PPUSH
41438: CALL_OW 310
41442: PPUSH
41443: CALL_OW 266
41447: PUSH
41448: LD_INT 36
41450: NONEQUAL
41451: PUSH
41452: LD_VAR 0 3
41456: PPUSH
41457: CALL 78729 0 1
41461: NOT
41462: AND
41463: OR
41464: IFFALSE 41600
// begin if IsInUnit ( j ) then
41466: LD_VAR 0 3
41470: PPUSH
41471: CALL_OW 310
41475: IFFALSE 41486
// ComExitBuilding ( j ) ;
41477: LD_VAR 0 3
41481: PPUSH
41482: CALL_OW 122
// ct := 0 ;
41486: LD_ADDR_VAR 0 8
41490: PUSH
41491: LD_INT 0
41493: ST_TO_ADDR
// for k in x do
41494: LD_ADDR_VAR 0 4
41498: PUSH
41499: LD_VAR 0 11
41503: PUSH
41504: FOR_IN
41505: IFFALSE 41578
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
41507: LD_VAR 0 4
41511: PPUSH
41512: CALL_OW 264
41516: PUSH
41517: LD_INT 31
41519: EQUAL
41520: PUSH
41521: LD_VAR 0 4
41525: PPUSH
41526: CALL_OW 311
41530: NOT
41531: AND
41532: PUSH
41533: LD_VAR 0 4
41537: PPUSH
41538: CALL_OW 266
41542: PUSH
41543: LD_INT 36
41545: EQUAL
41546: PUSH
41547: LD_VAR 0 4
41551: PPUSH
41552: CALL_OW 313
41556: PUSH
41557: LD_INT 3
41559: LESS
41560: AND
41561: OR
41562: IFFALSE 41576
// begin ct := k ;
41564: LD_ADDR_VAR 0 8
41568: PUSH
41569: LD_VAR 0 4
41573: ST_TO_ADDR
// break ;
41574: GO 41578
// end ;
41576: GO 41504
41578: POP
41579: POP
// if ct then
41580: LD_VAR 0 8
41584: IFFALSE 41600
// ComEnterUnit ( j , ct ) ;
41586: LD_VAR 0 3
41590: PPUSH
41591: LD_VAR 0 8
41595: PPUSH
41596: CALL_OW 120
// end ; end ;
41600: GO 41235
41602: POP
41603: POP
// places := 0 ;
41604: LD_ADDR_VAR 0 5
41608: PUSH
41609: LD_INT 0
41611: ST_TO_ADDR
// for j = 1 to x do
41612: LD_ADDR_VAR 0 3
41616: PUSH
41617: DOUBLE
41618: LD_INT 1
41620: DEC
41621: ST_TO_ADDR
41622: LD_VAR 0 11
41626: PUSH
41627: FOR_TO
41628: IFFALSE 41704
// if GetWeapon ( x [ j ] ) = ar_control_tower then
41630: LD_VAR 0 11
41634: PUSH
41635: LD_VAR 0 3
41639: ARRAY
41640: PPUSH
41641: CALL_OW 264
41645: PUSH
41646: LD_INT 31
41648: EQUAL
41649: IFFALSE 41667
// places := places + 1 else
41651: LD_ADDR_VAR 0 5
41655: PUSH
41656: LD_VAR 0 5
41660: PUSH
41661: LD_INT 1
41663: PLUS
41664: ST_TO_ADDR
41665: GO 41702
// if GetBType ( x [ j ] ) = b_control_tower then
41667: LD_VAR 0 11
41671: PUSH
41672: LD_VAR 0 3
41676: ARRAY
41677: PPUSH
41678: CALL_OW 266
41682: PUSH
41683: LD_INT 36
41685: EQUAL
41686: IFFALSE 41702
// places := places + 3 ;
41688: LD_ADDR_VAR 0 5
41692: PUSH
41693: LD_VAR 0 5
41697: PUSH
41698: LD_INT 3
41700: PLUS
41701: ST_TO_ADDR
41702: GO 41627
41704: POP
41705: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
41706: LD_VAR 0 5
41710: PUSH
41711: LD_INT 0
41713: EQUAL
41714: PUSH
41715: LD_VAR 0 5
41719: PUSH
41720: LD_EXP 127
41724: PUSH
41725: LD_VAR 0 2
41729: ARRAY
41730: LESSEQUAL
41731: OR
41732: IFFALSE 41736
// continue ;
41734: GO 40986
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
41736: LD_ADDR_VAR 0 6
41740: PUSH
41741: LD_EXP 87
41745: PUSH
41746: LD_VAR 0 2
41750: ARRAY
41751: PPUSH
41752: LD_INT 25
41754: PUSH
41755: LD_INT 3
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PPUSH
41762: CALL_OW 72
41766: PUSH
41767: LD_EXP 127
41771: PUSH
41772: LD_VAR 0 2
41776: ARRAY
41777: DIFF
41778: PPUSH
41779: LD_INT 3
41781: PPUSH
41782: CALL 79629 0 2
41786: ST_TO_ADDR
// for j in tmp do
41787: LD_ADDR_VAR 0 3
41791: PUSH
41792: LD_VAR 0 6
41796: PUSH
41797: FOR_IN
41798: IFFALSE 41833
// if GetTag ( j ) > 0 then
41800: LD_VAR 0 3
41804: PPUSH
41805: CALL_OW 110
41809: PUSH
41810: LD_INT 0
41812: GREATER
41813: IFFALSE 41831
// tmp := tmp diff j ;
41815: LD_ADDR_VAR 0 6
41819: PUSH
41820: LD_VAR 0 6
41824: PUSH
41825: LD_VAR 0 3
41829: DIFF
41830: ST_TO_ADDR
41831: GO 41797
41833: POP
41834: POP
// if not tmp then
41835: LD_VAR 0 6
41839: NOT
41840: IFFALSE 41844
// continue ;
41842: GO 40986
// if places then
41844: LD_VAR 0 5
41848: IFFALSE 41907
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
41850: LD_ADDR_EXP 127
41854: PUSH
41855: LD_EXP 127
41859: PPUSH
41860: LD_VAR 0 2
41864: PPUSH
41865: LD_EXP 127
41869: PUSH
41870: LD_VAR 0 2
41874: ARRAY
41875: PUSH
41876: LD_VAR 0 6
41880: PUSH
41881: LD_INT 1
41883: ARRAY
41884: UNION
41885: PPUSH
41886: CALL_OW 1
41890: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
41891: LD_VAR 0 6
41895: PUSH
41896: LD_INT 1
41898: ARRAY
41899: PPUSH
41900: LD_INT 126
41902: PPUSH
41903: CALL_OW 109
// end ; end ;
41907: GO 40986
41909: POP
41910: POP
// end ;
41911: LD_VAR 0 1
41915: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
41916: LD_INT 0
41918: PPUSH
41919: PPUSH
41920: PPUSH
41921: PPUSH
41922: PPUSH
41923: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
41924: LD_VAR 0 1
41928: NOT
41929: PUSH
41930: LD_VAR 0 2
41934: NOT
41935: OR
41936: PUSH
41937: LD_VAR 0 3
41941: NOT
41942: OR
41943: PUSH
41944: LD_VAR 0 4
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: LD_INT 3
41957: PUSH
41958: LD_INT 4
41960: PUSH
41961: LD_INT 5
41963: PUSH
41964: LD_INT 8
41966: PUSH
41967: LD_INT 9
41969: PUSH
41970: LD_INT 15
41972: PUSH
41973: LD_INT 16
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: IN
41987: NOT
41988: OR
41989: IFFALSE 41993
// exit ;
41991: GO 42893
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
41993: LD_ADDR_VAR 0 2
41997: PUSH
41998: LD_VAR 0 2
42002: PPUSH
42003: LD_INT 21
42005: PUSH
42006: LD_INT 3
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 24
42015: PUSH
42016: LD_INT 250
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PPUSH
42027: CALL_OW 72
42031: ST_TO_ADDR
// case class of 1 , 15 :
42032: LD_VAR 0 4
42036: PUSH
42037: LD_INT 1
42039: DOUBLE
42040: EQUAL
42041: IFTRUE 42051
42043: LD_INT 15
42045: DOUBLE
42046: EQUAL
42047: IFTRUE 42051
42049: GO 42136
42051: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
42052: LD_ADDR_VAR 0 8
42056: PUSH
42057: LD_VAR 0 2
42061: PPUSH
42062: LD_INT 2
42064: PUSH
42065: LD_INT 30
42067: PUSH
42068: LD_INT 32
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 30
42077: PUSH
42078: LD_INT 31
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: LIST
42089: PPUSH
42090: CALL_OW 72
42094: PUSH
42095: LD_VAR 0 2
42099: PPUSH
42100: LD_INT 2
42102: PUSH
42103: LD_INT 30
42105: PUSH
42106: LD_INT 4
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 30
42115: PUSH
42116: LD_INT 5
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: LIST
42127: PPUSH
42128: CALL_OW 72
42132: ADD
42133: ST_TO_ADDR
42134: GO 42382
42136: LD_INT 2
42138: DOUBLE
42139: EQUAL
42140: IFTRUE 42150
42142: LD_INT 16
42144: DOUBLE
42145: EQUAL
42146: IFTRUE 42150
42148: GO 42196
42150: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
42151: LD_ADDR_VAR 0 8
42155: PUSH
42156: LD_VAR 0 2
42160: PPUSH
42161: LD_INT 2
42163: PUSH
42164: LD_INT 30
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 30
42176: PUSH
42177: LD_INT 1
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: LIST
42188: PPUSH
42189: CALL_OW 72
42193: ST_TO_ADDR
42194: GO 42382
42196: LD_INT 3
42198: DOUBLE
42199: EQUAL
42200: IFTRUE 42204
42202: GO 42250
42204: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
42205: LD_ADDR_VAR 0 8
42209: PUSH
42210: LD_VAR 0 2
42214: PPUSH
42215: LD_INT 2
42217: PUSH
42218: LD_INT 30
42220: PUSH
42221: LD_INT 2
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 30
42230: PUSH
42231: LD_INT 3
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: LIST
42242: PPUSH
42243: CALL_OW 72
42247: ST_TO_ADDR
42248: GO 42382
42250: LD_INT 4
42252: DOUBLE
42253: EQUAL
42254: IFTRUE 42258
42256: GO 42315
42258: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
42259: LD_ADDR_VAR 0 8
42263: PUSH
42264: LD_VAR 0 2
42268: PPUSH
42269: LD_INT 2
42271: PUSH
42272: LD_INT 30
42274: PUSH
42275: LD_INT 6
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 30
42284: PUSH
42285: LD_INT 7
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 30
42294: PUSH
42295: LD_INT 8
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: PPUSH
42308: CALL_OW 72
42312: ST_TO_ADDR
42313: GO 42382
42315: LD_INT 5
42317: DOUBLE
42318: EQUAL
42319: IFTRUE 42335
42321: LD_INT 8
42323: DOUBLE
42324: EQUAL
42325: IFTRUE 42335
42327: LD_INT 9
42329: DOUBLE
42330: EQUAL
42331: IFTRUE 42335
42333: GO 42381
42335: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
42336: LD_ADDR_VAR 0 8
42340: PUSH
42341: LD_VAR 0 2
42345: PPUSH
42346: LD_INT 2
42348: PUSH
42349: LD_INT 30
42351: PUSH
42352: LD_INT 4
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 30
42361: PUSH
42362: LD_INT 5
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: LIST
42373: PPUSH
42374: CALL_OW 72
42378: ST_TO_ADDR
42379: GO 42382
42381: POP
// if not tmp then
42382: LD_VAR 0 8
42386: NOT
42387: IFFALSE 42391
// exit ;
42389: GO 42893
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
42391: LD_VAR 0 4
42395: PUSH
42396: LD_INT 1
42398: PUSH
42399: LD_INT 15
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: IN
42406: PUSH
42407: LD_EXP 96
42411: PUSH
42412: LD_VAR 0 1
42416: ARRAY
42417: AND
42418: IFFALSE 42574
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
42420: LD_ADDR_VAR 0 9
42424: PUSH
42425: LD_EXP 96
42429: PUSH
42430: LD_VAR 0 1
42434: ARRAY
42435: PUSH
42436: LD_INT 1
42438: ARRAY
42439: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
42440: LD_VAR 0 9
42444: PUSH
42445: LD_EXP 97
42449: PUSH
42450: LD_VAR 0 1
42454: ARRAY
42455: IN
42456: NOT
42457: IFFALSE 42572
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
42459: LD_ADDR_EXP 97
42463: PUSH
42464: LD_EXP 97
42468: PPUSH
42469: LD_VAR 0 1
42473: PUSH
42474: LD_EXP 97
42478: PUSH
42479: LD_VAR 0 1
42483: ARRAY
42484: PUSH
42485: LD_INT 1
42487: PLUS
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PPUSH
42493: LD_VAR 0 9
42497: PPUSH
42498: CALL 50080 0 3
42502: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
42503: LD_ADDR_EXP 96
42507: PUSH
42508: LD_EXP 96
42512: PPUSH
42513: LD_VAR 0 1
42517: PPUSH
42518: LD_EXP 96
42522: PUSH
42523: LD_VAR 0 1
42527: ARRAY
42528: PUSH
42529: LD_VAR 0 9
42533: DIFF
42534: PPUSH
42535: CALL_OW 1
42539: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
42540: LD_VAR 0 3
42544: PPUSH
42545: LD_EXP 97
42549: PUSH
42550: LD_VAR 0 1
42554: ARRAY
42555: PUSH
42556: LD_EXP 97
42560: PUSH
42561: LD_VAR 0 1
42565: ARRAY
42566: ARRAY
42567: PPUSH
42568: CALL_OW 120
// end ; exit ;
42572: GO 42893
// end ; if tmp > 1 then
42574: LD_VAR 0 8
42578: PUSH
42579: LD_INT 1
42581: GREATER
42582: IFFALSE 42686
// for i = 2 to tmp do
42584: LD_ADDR_VAR 0 6
42588: PUSH
42589: DOUBLE
42590: LD_INT 2
42592: DEC
42593: ST_TO_ADDR
42594: LD_VAR 0 8
42598: PUSH
42599: FOR_TO
42600: IFFALSE 42684
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
42602: LD_VAR 0 8
42606: PUSH
42607: LD_VAR 0 6
42611: ARRAY
42612: PPUSH
42613: CALL_OW 461
42617: PUSH
42618: LD_INT 6
42620: EQUAL
42621: IFFALSE 42682
// begin x := tmp [ i ] ;
42623: LD_ADDR_VAR 0 9
42627: PUSH
42628: LD_VAR 0 8
42632: PUSH
42633: LD_VAR 0 6
42637: ARRAY
42638: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
42639: LD_ADDR_VAR 0 8
42643: PUSH
42644: LD_VAR 0 8
42648: PPUSH
42649: LD_VAR 0 6
42653: PPUSH
42654: CALL_OW 3
42658: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
42659: LD_ADDR_VAR 0 8
42663: PUSH
42664: LD_VAR 0 8
42668: PPUSH
42669: LD_INT 1
42671: PPUSH
42672: LD_VAR 0 9
42676: PPUSH
42677: CALL_OW 2
42681: ST_TO_ADDR
// end ;
42682: GO 42599
42684: POP
42685: POP
// for i in tmp do
42686: LD_ADDR_VAR 0 6
42690: PUSH
42691: LD_VAR 0 8
42695: PUSH
42696: FOR_IN
42697: IFFALSE 42766
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
42699: LD_VAR 0 6
42703: PPUSH
42704: CALL_OW 313
42708: PUSH
42709: LD_INT 6
42711: LESS
42712: PUSH
42713: LD_VAR 0 6
42717: PPUSH
42718: CALL_OW 266
42722: PUSH
42723: LD_INT 31
42725: PUSH
42726: LD_INT 32
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: IN
42733: NOT
42734: AND
42735: PUSH
42736: LD_VAR 0 6
42740: PPUSH
42741: CALL_OW 313
42745: PUSH
42746: LD_INT 0
42748: EQUAL
42749: OR
42750: IFFALSE 42764
// begin j := i ;
42752: LD_ADDR_VAR 0 7
42756: PUSH
42757: LD_VAR 0 6
42761: ST_TO_ADDR
// break ;
42762: GO 42766
// end ; end ;
42764: GO 42696
42766: POP
42767: POP
// if j then
42768: LD_VAR 0 7
42772: IFFALSE 42790
// ComEnterUnit ( unit , j ) else
42774: LD_VAR 0 3
42778: PPUSH
42779: LD_VAR 0 7
42783: PPUSH
42784: CALL_OW 120
42788: GO 42893
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
42790: LD_ADDR_VAR 0 10
42794: PUSH
42795: LD_VAR 0 2
42799: PPUSH
42800: LD_INT 2
42802: PUSH
42803: LD_INT 30
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 30
42815: PUSH
42816: LD_INT 1
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: LIST
42827: PPUSH
42828: CALL_OW 72
42832: ST_TO_ADDR
// if depot then
42833: LD_VAR 0 10
42837: IFFALSE 42893
// begin depot := NearestUnitToUnit ( depot , unit ) ;
42839: LD_ADDR_VAR 0 10
42843: PUSH
42844: LD_VAR 0 10
42848: PPUSH
42849: LD_VAR 0 3
42853: PPUSH
42854: CALL_OW 74
42858: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
42859: LD_VAR 0 3
42863: PPUSH
42864: LD_VAR 0 10
42868: PPUSH
42869: CALL_OW 296
42873: PUSH
42874: LD_INT 10
42876: GREATER
42877: IFFALSE 42893
// ComStandNearbyBuilding ( unit , depot ) ;
42879: LD_VAR 0 3
42883: PPUSH
42884: LD_VAR 0 10
42888: PPUSH
42889: CALL 46694 0 2
// end ; end ; end ;
42893: LD_VAR 0 5
42897: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
42898: LD_INT 0
42900: PPUSH
42901: PPUSH
42902: PPUSH
42903: PPUSH
// if not mc_bases then
42904: LD_EXP 87
42908: NOT
42909: IFFALSE 42913
// exit ;
42911: GO 43152
// for i = 1 to mc_bases do
42913: LD_ADDR_VAR 0 2
42917: PUSH
42918: DOUBLE
42919: LD_INT 1
42921: DEC
42922: ST_TO_ADDR
42923: LD_EXP 87
42927: PUSH
42928: FOR_TO
42929: IFFALSE 43150
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
42931: LD_ADDR_VAR 0 4
42935: PUSH
42936: LD_EXP 87
42940: PUSH
42941: LD_VAR 0 2
42945: ARRAY
42946: PPUSH
42947: LD_INT 21
42949: PUSH
42950: LD_INT 1
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PPUSH
42957: CALL_OW 72
42961: PUSH
42962: LD_EXP 116
42966: PUSH
42967: LD_VAR 0 2
42971: ARRAY
42972: UNION
42973: ST_TO_ADDR
// if not tmp then
42974: LD_VAR 0 4
42978: NOT
42979: IFFALSE 42983
// continue ;
42981: GO 42928
// for j in tmp do
42983: LD_ADDR_VAR 0 3
42987: PUSH
42988: LD_VAR 0 4
42992: PUSH
42993: FOR_IN
42994: IFFALSE 43146
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
42996: LD_VAR 0 3
43000: PPUSH
43001: CALL_OW 110
43005: NOT
43006: PUSH
43007: LD_VAR 0 3
43011: PPUSH
43012: CALL_OW 314
43016: NOT
43017: AND
43018: PUSH
43019: LD_VAR 0 3
43023: PPUSH
43024: CALL_OW 311
43028: NOT
43029: AND
43030: PUSH
43031: LD_VAR 0 3
43035: PPUSH
43036: CALL_OW 310
43040: NOT
43041: AND
43042: PUSH
43043: LD_VAR 0 3
43047: PUSH
43048: LD_EXP 90
43052: PUSH
43053: LD_VAR 0 2
43057: ARRAY
43058: PUSH
43059: LD_INT 1
43061: ARRAY
43062: IN
43063: NOT
43064: AND
43065: PUSH
43066: LD_VAR 0 3
43070: PUSH
43071: LD_EXP 90
43075: PUSH
43076: LD_VAR 0 2
43080: ARRAY
43081: PUSH
43082: LD_INT 2
43084: ARRAY
43085: IN
43086: NOT
43087: AND
43088: PUSH
43089: LD_VAR 0 3
43093: PUSH
43094: LD_EXP 99
43098: PUSH
43099: LD_VAR 0 2
43103: ARRAY
43104: IN
43105: NOT
43106: AND
43107: IFFALSE 43144
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
43109: LD_VAR 0 2
43113: PPUSH
43114: LD_EXP 87
43118: PUSH
43119: LD_VAR 0 2
43123: ARRAY
43124: PPUSH
43125: LD_VAR 0 3
43129: PPUSH
43130: LD_VAR 0 3
43134: PPUSH
43135: CALL_OW 257
43139: PPUSH
43140: CALL 41916 0 4
// end ;
43144: GO 42993
43146: POP
43147: POP
// end ;
43148: GO 42928
43150: POP
43151: POP
// end ;
43152: LD_VAR 0 1
43156: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
43157: LD_INT 0
43159: PPUSH
43160: PPUSH
43161: PPUSH
43162: PPUSH
43163: PPUSH
43164: PPUSH
// if not mc_bases [ base ] then
43165: LD_EXP 87
43169: PUSH
43170: LD_VAR 0 1
43174: ARRAY
43175: NOT
43176: IFFALSE 43180
// exit ;
43178: GO 43362
// tmp := [ ] ;
43180: LD_ADDR_VAR 0 6
43184: PUSH
43185: EMPTY
43186: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
43187: LD_ADDR_VAR 0 7
43191: PUSH
43192: LD_VAR 0 3
43196: PPUSH
43197: LD_INT 0
43199: PPUSH
43200: CALL_OW 517
43204: ST_TO_ADDR
// if not list then
43205: LD_VAR 0 7
43209: NOT
43210: IFFALSE 43214
// exit ;
43212: GO 43362
// for i = 1 to amount do
43214: LD_ADDR_VAR 0 5
43218: PUSH
43219: DOUBLE
43220: LD_INT 1
43222: DEC
43223: ST_TO_ADDR
43224: LD_VAR 0 2
43228: PUSH
43229: FOR_TO
43230: IFFALSE 43310
// begin x := rand ( 1 , list [ 1 ] ) ;
43232: LD_ADDR_VAR 0 8
43236: PUSH
43237: LD_INT 1
43239: PPUSH
43240: LD_VAR 0 7
43244: PUSH
43245: LD_INT 1
43247: ARRAY
43248: PPUSH
43249: CALL_OW 12
43253: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
43254: LD_ADDR_VAR 0 6
43258: PUSH
43259: LD_VAR 0 6
43263: PPUSH
43264: LD_VAR 0 5
43268: PPUSH
43269: LD_VAR 0 7
43273: PUSH
43274: LD_INT 1
43276: ARRAY
43277: PUSH
43278: LD_VAR 0 8
43282: ARRAY
43283: PUSH
43284: LD_VAR 0 7
43288: PUSH
43289: LD_INT 2
43291: ARRAY
43292: PUSH
43293: LD_VAR 0 8
43297: ARRAY
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PPUSH
43303: CALL_OW 1
43307: ST_TO_ADDR
// end ;
43308: GO 43229
43310: POP
43311: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
43312: LD_ADDR_EXP 100
43316: PUSH
43317: LD_EXP 100
43321: PPUSH
43322: LD_VAR 0 1
43326: PPUSH
43327: LD_VAR 0 6
43331: PPUSH
43332: CALL_OW 1
43336: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
43337: LD_ADDR_EXP 102
43341: PUSH
43342: LD_EXP 102
43346: PPUSH
43347: LD_VAR 0 1
43351: PPUSH
43352: LD_VAR 0 3
43356: PPUSH
43357: CALL_OW 1
43361: ST_TO_ADDR
// end ;
43362: LD_VAR 0 4
43366: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
43367: LD_INT 0
43369: PPUSH
// if not mc_bases [ base ] then
43370: LD_EXP 87
43374: PUSH
43375: LD_VAR 0 1
43379: ARRAY
43380: NOT
43381: IFFALSE 43385
// exit ;
43383: GO 43410
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
43385: LD_ADDR_EXP 92
43389: PUSH
43390: LD_EXP 92
43394: PPUSH
43395: LD_VAR 0 1
43399: PPUSH
43400: LD_VAR 0 2
43404: PPUSH
43405: CALL_OW 1
43409: ST_TO_ADDR
// end ;
43410: LD_VAR 0 3
43414: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
43415: LD_INT 0
43417: PPUSH
// if not mc_bases [ base ] then
43418: LD_EXP 87
43422: PUSH
43423: LD_VAR 0 1
43427: ARRAY
43428: NOT
43429: IFFALSE 43433
// exit ;
43431: GO 43470
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
43433: LD_ADDR_EXP 92
43437: PUSH
43438: LD_EXP 92
43442: PPUSH
43443: LD_VAR 0 1
43447: PPUSH
43448: LD_EXP 92
43452: PUSH
43453: LD_VAR 0 1
43457: ARRAY
43458: PUSH
43459: LD_VAR 0 2
43463: UNION
43464: PPUSH
43465: CALL_OW 1
43469: ST_TO_ADDR
// end ;
43470: LD_VAR 0 3
43474: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
43475: LD_INT 0
43477: PPUSH
// if not mc_bases [ base ] then
43478: LD_EXP 87
43482: PUSH
43483: LD_VAR 0 1
43487: ARRAY
43488: NOT
43489: IFFALSE 43493
// exit ;
43491: GO 43518
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
43493: LD_ADDR_EXP 108
43497: PUSH
43498: LD_EXP 108
43502: PPUSH
43503: LD_VAR 0 1
43507: PPUSH
43508: LD_VAR 0 2
43512: PPUSH
43513: CALL_OW 1
43517: ST_TO_ADDR
// end ;
43518: LD_VAR 0 3
43522: RET
// export function MC_InsertProduceList ( base , components ) ; begin
43523: LD_INT 0
43525: PPUSH
// if not mc_bases [ base ] then
43526: LD_EXP 87
43530: PUSH
43531: LD_VAR 0 1
43535: ARRAY
43536: NOT
43537: IFFALSE 43541
// exit ;
43539: GO 43578
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
43541: LD_ADDR_EXP 108
43545: PUSH
43546: LD_EXP 108
43550: PPUSH
43551: LD_VAR 0 1
43555: PPUSH
43556: LD_EXP 108
43560: PUSH
43561: LD_VAR 0 1
43565: ARRAY
43566: PUSH
43567: LD_VAR 0 2
43571: ADD
43572: PPUSH
43573: CALL_OW 1
43577: ST_TO_ADDR
// end ;
43578: LD_VAR 0 3
43582: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
43583: LD_INT 0
43585: PPUSH
// if not mc_bases [ base ] then
43586: LD_EXP 87
43590: PUSH
43591: LD_VAR 0 1
43595: ARRAY
43596: NOT
43597: IFFALSE 43601
// exit ;
43599: GO 43655
// mc_defender := Replace ( mc_defender , base , deflist ) ;
43601: LD_ADDR_EXP 109
43605: PUSH
43606: LD_EXP 109
43610: PPUSH
43611: LD_VAR 0 1
43615: PPUSH
43616: LD_VAR 0 2
43620: PPUSH
43621: CALL_OW 1
43625: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
43626: LD_ADDR_EXP 98
43630: PUSH
43631: LD_EXP 98
43635: PPUSH
43636: LD_VAR 0 1
43640: PPUSH
43641: LD_VAR 0 2
43645: PUSH
43646: LD_INT 0
43648: PLUS
43649: PPUSH
43650: CALL_OW 1
43654: ST_TO_ADDR
// end ;
43655: LD_VAR 0 3
43659: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
43660: LD_INT 0
43662: PPUSH
// if not mc_bases [ base ] then
43663: LD_EXP 87
43667: PUSH
43668: LD_VAR 0 1
43672: ARRAY
43673: NOT
43674: IFFALSE 43678
// exit ;
43676: GO 43703
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
43678: LD_ADDR_EXP 98
43682: PUSH
43683: LD_EXP 98
43687: PPUSH
43688: LD_VAR 0 1
43692: PPUSH
43693: LD_VAR 0 2
43697: PPUSH
43698: CALL_OW 1
43702: ST_TO_ADDR
// end ;
43703: LD_VAR 0 3
43707: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
43708: LD_INT 0
43710: PPUSH
43711: PPUSH
43712: PPUSH
43713: PPUSH
// if not mc_bases [ base ] then
43714: LD_EXP 87
43718: PUSH
43719: LD_VAR 0 1
43723: ARRAY
43724: NOT
43725: IFFALSE 43729
// exit ;
43727: GO 43794
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
43729: LD_ADDR_EXP 107
43733: PUSH
43734: LD_EXP 107
43738: PPUSH
43739: LD_VAR 0 1
43743: PUSH
43744: LD_EXP 107
43748: PUSH
43749: LD_VAR 0 1
43753: ARRAY
43754: PUSH
43755: LD_INT 1
43757: PLUS
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PPUSH
43763: LD_VAR 0 1
43767: PUSH
43768: LD_VAR 0 2
43772: PUSH
43773: LD_VAR 0 3
43777: PUSH
43778: LD_VAR 0 4
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: PPUSH
43789: CALL 50080 0 3
43793: ST_TO_ADDR
// end ;
43794: LD_VAR 0 5
43798: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
43799: LD_INT 0
43801: PPUSH
// if not mc_bases [ base ] then
43802: LD_EXP 87
43806: PUSH
43807: LD_VAR 0 1
43811: ARRAY
43812: NOT
43813: IFFALSE 43817
// exit ;
43815: GO 43842
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
43817: LD_ADDR_EXP 124
43821: PUSH
43822: LD_EXP 124
43826: PPUSH
43827: LD_VAR 0 1
43831: PPUSH
43832: LD_VAR 0 2
43836: PPUSH
43837: CALL_OW 1
43841: ST_TO_ADDR
// end ;
43842: LD_VAR 0 3
43846: RET
// export function MC_GetMinesField ( base ) ; begin
43847: LD_INT 0
43849: PPUSH
// result := mc_mines [ base ] ;
43850: LD_ADDR_VAR 0 2
43854: PUSH
43855: LD_EXP 100
43859: PUSH
43860: LD_VAR 0 1
43864: ARRAY
43865: ST_TO_ADDR
// end ;
43866: LD_VAR 0 2
43870: RET
// export function MC_GetProduceList ( base ) ; begin
43871: LD_INT 0
43873: PPUSH
// result := mc_produce [ base ] ;
43874: LD_ADDR_VAR 0 2
43878: PUSH
43879: LD_EXP 108
43883: PUSH
43884: LD_VAR 0 1
43888: ARRAY
43889: ST_TO_ADDR
// end ;
43890: LD_VAR 0 2
43894: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
43895: LD_INT 0
43897: PPUSH
43898: PPUSH
// if not mc_bases then
43899: LD_EXP 87
43903: NOT
43904: IFFALSE 43908
// exit ;
43906: GO 43973
// if mc_bases [ base ] then
43908: LD_EXP 87
43912: PUSH
43913: LD_VAR 0 1
43917: ARRAY
43918: IFFALSE 43973
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
43920: LD_ADDR_VAR 0 3
43924: PUSH
43925: LD_EXP 87
43929: PUSH
43930: LD_VAR 0 1
43934: ARRAY
43935: PPUSH
43936: LD_INT 30
43938: PUSH
43939: LD_VAR 0 2
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PPUSH
43948: CALL_OW 72
43952: ST_TO_ADDR
// if result then
43953: LD_VAR 0 3
43957: IFFALSE 43973
// result := result [ 1 ] ;
43959: LD_ADDR_VAR 0 3
43963: PUSH
43964: LD_VAR 0 3
43968: PUSH
43969: LD_INT 1
43971: ARRAY
43972: ST_TO_ADDR
// end ; end ;
43973: LD_VAR 0 3
43977: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
43978: LD_INT 0
43980: PPUSH
43981: PPUSH
// if not mc_bases then
43982: LD_EXP 87
43986: NOT
43987: IFFALSE 43991
// exit ;
43989: GO 44036
// if mc_bases [ base ] then
43991: LD_EXP 87
43995: PUSH
43996: LD_VAR 0 1
44000: ARRAY
44001: IFFALSE 44036
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
44003: LD_ADDR_VAR 0 3
44007: PUSH
44008: LD_EXP 87
44012: PUSH
44013: LD_VAR 0 1
44017: ARRAY
44018: PPUSH
44019: LD_INT 30
44021: PUSH
44022: LD_VAR 0 2
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PPUSH
44031: CALL_OW 72
44035: ST_TO_ADDR
// end ;
44036: LD_VAR 0 3
44040: RET
// export function MC_SetTame ( base , area ) ; begin
44041: LD_INT 0
44043: PPUSH
// if not mc_bases or not base then
44044: LD_EXP 87
44048: NOT
44049: PUSH
44050: LD_VAR 0 1
44054: NOT
44055: OR
44056: IFFALSE 44060
// exit ;
44058: GO 44085
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
44060: LD_ADDR_EXP 115
44064: PUSH
44065: LD_EXP 115
44069: PPUSH
44070: LD_VAR 0 1
44074: PPUSH
44075: LD_VAR 0 2
44079: PPUSH
44080: CALL_OW 1
44084: ST_TO_ADDR
// end ;
44085: LD_VAR 0 3
44089: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
44090: LD_INT 0
44092: PPUSH
44093: PPUSH
// if not mc_bases or not base then
44094: LD_EXP 87
44098: NOT
44099: PUSH
44100: LD_VAR 0 1
44104: NOT
44105: OR
44106: IFFALSE 44110
// exit ;
44108: GO 44212
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
44110: LD_ADDR_VAR 0 4
44114: PUSH
44115: LD_EXP 87
44119: PUSH
44120: LD_VAR 0 1
44124: ARRAY
44125: PPUSH
44126: LD_INT 30
44128: PUSH
44129: LD_VAR 0 2
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PPUSH
44138: CALL_OW 72
44142: ST_TO_ADDR
// if not tmp then
44143: LD_VAR 0 4
44147: NOT
44148: IFFALSE 44152
// exit ;
44150: GO 44212
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
44152: LD_ADDR_EXP 119
44156: PUSH
44157: LD_EXP 119
44161: PPUSH
44162: LD_VAR 0 1
44166: PPUSH
44167: LD_EXP 119
44171: PUSH
44172: LD_VAR 0 1
44176: ARRAY
44177: PPUSH
44178: LD_EXP 119
44182: PUSH
44183: LD_VAR 0 1
44187: ARRAY
44188: PUSH
44189: LD_INT 1
44191: PLUS
44192: PPUSH
44193: LD_VAR 0 4
44197: PUSH
44198: LD_INT 1
44200: ARRAY
44201: PPUSH
44202: CALL_OW 2
44206: PPUSH
44207: CALL_OW 1
44211: ST_TO_ADDR
// end ;
44212: LD_VAR 0 3
44216: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
44217: LD_INT 0
44219: PPUSH
44220: PPUSH
// if not mc_bases or not base or not kinds then
44221: LD_EXP 87
44225: NOT
44226: PUSH
44227: LD_VAR 0 1
44231: NOT
44232: OR
44233: PUSH
44234: LD_VAR 0 2
44238: NOT
44239: OR
44240: IFFALSE 44244
// exit ;
44242: GO 44305
// for i in kinds do
44244: LD_ADDR_VAR 0 4
44248: PUSH
44249: LD_VAR 0 2
44253: PUSH
44254: FOR_IN
44255: IFFALSE 44303
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
44257: LD_ADDR_EXP 121
44261: PUSH
44262: LD_EXP 121
44266: PPUSH
44267: LD_VAR 0 1
44271: PUSH
44272: LD_EXP 121
44276: PUSH
44277: LD_VAR 0 1
44281: ARRAY
44282: PUSH
44283: LD_INT 1
44285: PLUS
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PPUSH
44291: LD_VAR 0 4
44295: PPUSH
44296: CALL 50080 0 3
44300: ST_TO_ADDR
44301: GO 44254
44303: POP
44304: POP
// end ;
44305: LD_VAR 0 3
44309: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
44310: LD_INT 0
44312: PPUSH
// if not mc_bases or not base or not areas then
44313: LD_EXP 87
44317: NOT
44318: PUSH
44319: LD_VAR 0 1
44323: NOT
44324: OR
44325: PUSH
44326: LD_VAR 0 2
44330: NOT
44331: OR
44332: IFFALSE 44336
// exit ;
44334: GO 44361
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
44336: LD_ADDR_EXP 105
44340: PUSH
44341: LD_EXP 105
44345: PPUSH
44346: LD_VAR 0 1
44350: PPUSH
44351: LD_VAR 0 2
44355: PPUSH
44356: CALL_OW 1
44360: ST_TO_ADDR
// end ;
44361: LD_VAR 0 3
44365: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
44366: LD_INT 0
44368: PPUSH
// if not mc_bases or not base or not teleports_exit then
44369: LD_EXP 87
44373: NOT
44374: PUSH
44375: LD_VAR 0 1
44379: NOT
44380: OR
44381: PUSH
44382: LD_VAR 0 2
44386: NOT
44387: OR
44388: IFFALSE 44392
// exit ;
44390: GO 44417
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
44392: LD_ADDR_EXP 122
44396: PUSH
44397: LD_EXP 122
44401: PPUSH
44402: LD_VAR 0 1
44406: PPUSH
44407: LD_VAR 0 2
44411: PPUSH
44412: CALL_OW 1
44416: ST_TO_ADDR
// end ;
44417: LD_VAR 0 3
44421: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
44422: LD_INT 0
44424: PPUSH
44425: PPUSH
44426: PPUSH
// if not mc_bases or not base or not ext_list then
44427: LD_EXP 87
44431: NOT
44432: PUSH
44433: LD_VAR 0 1
44437: NOT
44438: OR
44439: PUSH
44440: LD_VAR 0 5
44444: NOT
44445: OR
44446: IFFALSE 44450
// exit ;
44448: GO 44623
// tmp := GetFacExtXYD ( x , y , d ) ;
44450: LD_ADDR_VAR 0 8
44454: PUSH
44455: LD_VAR 0 2
44459: PPUSH
44460: LD_VAR 0 3
44464: PPUSH
44465: LD_VAR 0 4
44469: PPUSH
44470: CALL 78759 0 3
44474: ST_TO_ADDR
// if not tmp then
44475: LD_VAR 0 8
44479: NOT
44480: IFFALSE 44484
// exit ;
44482: GO 44623
// for i in tmp do
44484: LD_ADDR_VAR 0 7
44488: PUSH
44489: LD_VAR 0 8
44493: PUSH
44494: FOR_IN
44495: IFFALSE 44621
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
44497: LD_ADDR_EXP 92
44501: PUSH
44502: LD_EXP 92
44506: PPUSH
44507: LD_VAR 0 1
44511: PPUSH
44512: LD_EXP 92
44516: PUSH
44517: LD_VAR 0 1
44521: ARRAY
44522: PPUSH
44523: LD_EXP 92
44527: PUSH
44528: LD_VAR 0 1
44532: ARRAY
44533: PUSH
44534: LD_INT 1
44536: PLUS
44537: PPUSH
44538: LD_VAR 0 5
44542: PUSH
44543: LD_INT 1
44545: ARRAY
44546: PUSH
44547: LD_VAR 0 7
44551: PUSH
44552: LD_INT 1
44554: ARRAY
44555: PUSH
44556: LD_VAR 0 7
44560: PUSH
44561: LD_INT 2
44563: ARRAY
44564: PUSH
44565: LD_VAR 0 7
44569: PUSH
44570: LD_INT 3
44572: ARRAY
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: PPUSH
44580: CALL_OW 2
44584: PPUSH
44585: CALL_OW 1
44589: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
44590: LD_ADDR_VAR 0 5
44594: PUSH
44595: LD_VAR 0 5
44599: PPUSH
44600: LD_INT 1
44602: PPUSH
44603: CALL_OW 3
44607: ST_TO_ADDR
// if not ext_list then
44608: LD_VAR 0 5
44612: NOT
44613: IFFALSE 44619
// exit ;
44615: POP
44616: POP
44617: GO 44623
// end ;
44619: GO 44494
44621: POP
44622: POP
// end ;
44623: LD_VAR 0 6
44627: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
44628: LD_INT 0
44630: PPUSH
// if not mc_bases or not base or not weapon_list then
44631: LD_EXP 87
44635: NOT
44636: PUSH
44637: LD_VAR 0 1
44641: NOT
44642: OR
44643: PUSH
44644: LD_VAR 0 2
44648: NOT
44649: OR
44650: IFFALSE 44654
// exit ;
44652: GO 44679
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
44654: LD_ADDR_EXP 126
44658: PUSH
44659: LD_EXP 126
44663: PPUSH
44664: LD_VAR 0 1
44668: PPUSH
44669: LD_VAR 0 2
44673: PPUSH
44674: CALL_OW 1
44678: ST_TO_ADDR
// end ;
44679: LD_VAR 0 3
44683: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
44684: LD_INT 0
44686: PPUSH
// if not mc_bases or not base or not tech_list then
44687: LD_EXP 87
44691: NOT
44692: PUSH
44693: LD_VAR 0 1
44697: NOT
44698: OR
44699: PUSH
44700: LD_VAR 0 2
44704: NOT
44705: OR
44706: IFFALSE 44710
// exit ;
44708: GO 44735
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
44710: LD_ADDR_EXP 114
44714: PUSH
44715: LD_EXP 114
44719: PPUSH
44720: LD_VAR 0 1
44724: PPUSH
44725: LD_VAR 0 2
44729: PPUSH
44730: CALL_OW 1
44734: ST_TO_ADDR
// end ;
44735: LD_VAR 0 3
44739: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
44740: LD_INT 0
44742: PPUSH
// if not mc_bases or not parking_area or not base then
44743: LD_EXP 87
44747: NOT
44748: PUSH
44749: LD_VAR 0 2
44753: NOT
44754: OR
44755: PUSH
44756: LD_VAR 0 1
44760: NOT
44761: OR
44762: IFFALSE 44766
// exit ;
44764: GO 44791
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
44766: LD_ADDR_EXP 111
44770: PUSH
44771: LD_EXP 111
44775: PPUSH
44776: LD_VAR 0 1
44780: PPUSH
44781: LD_VAR 0 2
44785: PPUSH
44786: CALL_OW 1
44790: ST_TO_ADDR
// end ;
44791: LD_VAR 0 3
44795: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
44796: LD_INT 0
44798: PPUSH
// if not mc_bases or not base or not scan_area then
44799: LD_EXP 87
44803: NOT
44804: PUSH
44805: LD_VAR 0 1
44809: NOT
44810: OR
44811: PUSH
44812: LD_VAR 0 2
44816: NOT
44817: OR
44818: IFFALSE 44822
// exit ;
44820: GO 44847
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
44822: LD_ADDR_EXP 112
44826: PUSH
44827: LD_EXP 112
44831: PPUSH
44832: LD_VAR 0 1
44836: PPUSH
44837: LD_VAR 0 2
44841: PPUSH
44842: CALL_OW 1
44846: ST_TO_ADDR
// end ;
44847: LD_VAR 0 3
44851: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
44852: LD_INT 0
44854: PPUSH
44855: PPUSH
// if not mc_bases or not base then
44856: LD_EXP 87
44860: NOT
44861: PUSH
44862: LD_VAR 0 1
44866: NOT
44867: OR
44868: IFFALSE 44872
// exit ;
44870: GO 44936
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
44872: LD_ADDR_VAR 0 3
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: LD_INT 2
44882: PUSH
44883: LD_INT 3
44885: PUSH
44886: LD_INT 4
44888: PUSH
44889: LD_INT 11
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
44899: LD_ADDR_EXP 114
44903: PUSH
44904: LD_EXP 114
44908: PPUSH
44909: LD_VAR 0 1
44913: PPUSH
44914: LD_EXP 114
44918: PUSH
44919: LD_VAR 0 1
44923: ARRAY
44924: PUSH
44925: LD_VAR 0 3
44929: DIFF
44930: PPUSH
44931: CALL_OW 1
44935: ST_TO_ADDR
// end ;
44936: LD_VAR 0 2
44940: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
44941: LD_INT 0
44943: PPUSH
// result := mc_vehicles [ base ] ;
44944: LD_ADDR_VAR 0 3
44948: PUSH
44949: LD_EXP 106
44953: PUSH
44954: LD_VAR 0 1
44958: ARRAY
44959: ST_TO_ADDR
// if onlyCombat then
44960: LD_VAR 0 2
44964: IFFALSE 45129
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
44966: LD_ADDR_VAR 0 3
44970: PUSH
44971: LD_VAR 0 3
44975: PUSH
44976: LD_VAR 0 3
44980: PPUSH
44981: LD_INT 2
44983: PUSH
44984: LD_INT 34
44986: PUSH
44987: LD_INT 12
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 34
44996: PUSH
44997: LD_INT 51
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 34
45006: PUSH
45007: LD_EXP 131
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 34
45018: PUSH
45019: LD_INT 32
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 34
45028: PUSH
45029: LD_INT 13
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 34
45038: PUSH
45039: LD_INT 52
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 34
45048: PUSH
45049: LD_INT 14
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 34
45058: PUSH
45059: LD_INT 53
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 34
45068: PUSH
45069: LD_EXP 130
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 34
45080: PUSH
45081: LD_INT 31
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 34
45090: PUSH
45091: LD_INT 48
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 34
45100: PUSH
45101: LD_INT 8
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: PPUSH
45123: CALL_OW 72
45127: DIFF
45128: ST_TO_ADDR
// end ; end_of_file
45129: LD_VAR 0 3
45133: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
45134: LD_INT 0
45136: PPUSH
45137: PPUSH
// if exist_mode then
45138: LD_VAR 0 2
45142: IFFALSE 45167
// unit := CreateCharacter ( prefix & ident ) else
45144: LD_ADDR_VAR 0 5
45148: PUSH
45149: LD_VAR 0 3
45153: PUSH
45154: LD_VAR 0 1
45158: STR
45159: PPUSH
45160: CALL_OW 34
45164: ST_TO_ADDR
45165: GO 45182
// unit := NewCharacter ( ident ) ;
45167: LD_ADDR_VAR 0 5
45171: PUSH
45172: LD_VAR 0 1
45176: PPUSH
45177: CALL_OW 25
45181: ST_TO_ADDR
// result := unit ;
45182: LD_ADDR_VAR 0 4
45186: PUSH
45187: LD_VAR 0 5
45191: ST_TO_ADDR
// end ;
45192: LD_VAR 0 4
45196: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
45197: LD_INT 0
45199: PPUSH
45200: PPUSH
// if not side or not nation then
45201: LD_VAR 0 1
45205: NOT
45206: PUSH
45207: LD_VAR 0 2
45211: NOT
45212: OR
45213: IFFALSE 45217
// exit ;
45215: GO 45981
// case nation of nation_american :
45217: LD_VAR 0 2
45221: PUSH
45222: LD_INT 1
45224: DOUBLE
45225: EQUAL
45226: IFTRUE 45230
45228: GO 45444
45230: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
45231: LD_ADDR_VAR 0 4
45235: PUSH
45236: LD_INT 35
45238: PUSH
45239: LD_INT 45
45241: PUSH
45242: LD_INT 46
45244: PUSH
45245: LD_INT 47
45247: PUSH
45248: LD_INT 82
45250: PUSH
45251: LD_INT 83
45253: PUSH
45254: LD_INT 84
45256: PUSH
45257: LD_INT 85
45259: PUSH
45260: LD_INT 86
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: LD_INT 6
45271: PUSH
45272: LD_INT 15
45274: PUSH
45275: LD_INT 16
45277: PUSH
45278: LD_INT 7
45280: PUSH
45281: LD_INT 12
45283: PUSH
45284: LD_INT 13
45286: PUSH
45287: LD_INT 10
45289: PUSH
45290: LD_INT 14
45292: PUSH
45293: LD_INT 20
45295: PUSH
45296: LD_INT 21
45298: PUSH
45299: LD_INT 22
45301: PUSH
45302: LD_INT 25
45304: PUSH
45305: LD_INT 32
45307: PUSH
45308: LD_INT 27
45310: PUSH
45311: LD_INT 36
45313: PUSH
45314: LD_INT 69
45316: PUSH
45317: LD_INT 39
45319: PUSH
45320: LD_INT 34
45322: PUSH
45323: LD_INT 40
45325: PUSH
45326: LD_INT 48
45328: PUSH
45329: LD_INT 49
45331: PUSH
45332: LD_INT 50
45334: PUSH
45335: LD_INT 51
45337: PUSH
45338: LD_INT 52
45340: PUSH
45341: LD_INT 53
45343: PUSH
45344: LD_INT 54
45346: PUSH
45347: LD_INT 55
45349: PUSH
45350: LD_INT 56
45352: PUSH
45353: LD_INT 57
45355: PUSH
45356: LD_INT 58
45358: PUSH
45359: LD_INT 59
45361: PUSH
45362: LD_INT 60
45364: PUSH
45365: LD_INT 61
45367: PUSH
45368: LD_INT 62
45370: PUSH
45371: LD_INT 80
45373: PUSH
45374: LD_INT 82
45376: PUSH
45377: LD_INT 83
45379: PUSH
45380: LD_INT 84
45382: PUSH
45383: LD_INT 85
45385: PUSH
45386: LD_INT 86
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: ST_TO_ADDR
45442: GO 45905
45444: LD_INT 2
45446: DOUBLE
45447: EQUAL
45448: IFTRUE 45452
45450: GO 45674
45452: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
45453: LD_ADDR_VAR 0 4
45457: PUSH
45458: LD_INT 35
45460: PUSH
45461: LD_INT 45
45463: PUSH
45464: LD_INT 46
45466: PUSH
45467: LD_INT 47
45469: PUSH
45470: LD_INT 82
45472: PUSH
45473: LD_INT 83
45475: PUSH
45476: LD_INT 84
45478: PUSH
45479: LD_INT 85
45481: PUSH
45482: LD_INT 87
45484: PUSH
45485: LD_INT 70
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: LD_INT 11
45493: PUSH
45494: LD_INT 3
45496: PUSH
45497: LD_INT 4
45499: PUSH
45500: LD_INT 5
45502: PUSH
45503: LD_INT 6
45505: PUSH
45506: LD_INT 15
45508: PUSH
45509: LD_INT 18
45511: PUSH
45512: LD_INT 7
45514: PUSH
45515: LD_INT 17
45517: PUSH
45518: LD_INT 8
45520: PUSH
45521: LD_INT 20
45523: PUSH
45524: LD_INT 21
45526: PUSH
45527: LD_INT 22
45529: PUSH
45530: LD_INT 72
45532: PUSH
45533: LD_INT 26
45535: PUSH
45536: LD_INT 69
45538: PUSH
45539: LD_INT 39
45541: PUSH
45542: LD_INT 40
45544: PUSH
45545: LD_INT 41
45547: PUSH
45548: LD_INT 42
45550: PUSH
45551: LD_INT 43
45553: PUSH
45554: LD_INT 48
45556: PUSH
45557: LD_INT 49
45559: PUSH
45560: LD_INT 50
45562: PUSH
45563: LD_INT 51
45565: PUSH
45566: LD_INT 52
45568: PUSH
45569: LD_INT 53
45571: PUSH
45572: LD_INT 54
45574: PUSH
45575: LD_INT 55
45577: PUSH
45578: LD_INT 56
45580: PUSH
45581: LD_INT 60
45583: PUSH
45584: LD_INT 61
45586: PUSH
45587: LD_INT 62
45589: PUSH
45590: LD_INT 66
45592: PUSH
45593: LD_INT 67
45595: PUSH
45596: LD_INT 68
45598: PUSH
45599: LD_INT 81
45601: PUSH
45602: LD_INT 82
45604: PUSH
45605: LD_INT 83
45607: PUSH
45608: LD_INT 84
45610: PUSH
45611: LD_INT 85
45613: PUSH
45614: LD_INT 87
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: ST_TO_ADDR
45672: GO 45905
45674: LD_INT 3
45676: DOUBLE
45677: EQUAL
45678: IFTRUE 45682
45680: GO 45904
45682: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
45683: LD_ADDR_VAR 0 4
45687: PUSH
45688: LD_INT 46
45690: PUSH
45691: LD_INT 47
45693: PUSH
45694: LD_INT 1
45696: PUSH
45697: LD_INT 2
45699: PUSH
45700: LD_INT 82
45702: PUSH
45703: LD_INT 83
45705: PUSH
45706: LD_INT 84
45708: PUSH
45709: LD_INT 85
45711: PUSH
45712: LD_INT 86
45714: PUSH
45715: LD_INT 11
45717: PUSH
45718: LD_INT 9
45720: PUSH
45721: LD_INT 20
45723: PUSH
45724: LD_INT 19
45726: PUSH
45727: LD_INT 21
45729: PUSH
45730: LD_INT 24
45732: PUSH
45733: LD_INT 22
45735: PUSH
45736: LD_INT 25
45738: PUSH
45739: LD_INT 28
45741: PUSH
45742: LD_INT 29
45744: PUSH
45745: LD_INT 30
45747: PUSH
45748: LD_INT 31
45750: PUSH
45751: LD_INT 37
45753: PUSH
45754: LD_INT 38
45756: PUSH
45757: LD_INT 32
45759: PUSH
45760: LD_INT 27
45762: PUSH
45763: LD_INT 33
45765: PUSH
45766: LD_INT 69
45768: PUSH
45769: LD_INT 39
45771: PUSH
45772: LD_INT 34
45774: PUSH
45775: LD_INT 40
45777: PUSH
45778: LD_INT 71
45780: PUSH
45781: LD_INT 23
45783: PUSH
45784: LD_INT 44
45786: PUSH
45787: LD_INT 48
45789: PUSH
45790: LD_INT 49
45792: PUSH
45793: LD_INT 50
45795: PUSH
45796: LD_INT 51
45798: PUSH
45799: LD_INT 52
45801: PUSH
45802: LD_INT 53
45804: PUSH
45805: LD_INT 54
45807: PUSH
45808: LD_INT 55
45810: PUSH
45811: LD_INT 56
45813: PUSH
45814: LD_INT 57
45816: PUSH
45817: LD_INT 58
45819: PUSH
45820: LD_INT 59
45822: PUSH
45823: LD_INT 63
45825: PUSH
45826: LD_INT 64
45828: PUSH
45829: LD_INT 65
45831: PUSH
45832: LD_INT 82
45834: PUSH
45835: LD_INT 83
45837: PUSH
45838: LD_INT 84
45840: PUSH
45841: LD_INT 85
45843: PUSH
45844: LD_INT 86
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: ST_TO_ADDR
45902: GO 45905
45904: POP
// if state > - 1 and state < 3 then
45905: LD_VAR 0 3
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: GREATER
45914: PUSH
45915: LD_VAR 0 3
45919: PUSH
45920: LD_INT 3
45922: LESS
45923: AND
45924: IFFALSE 45981
// for i in result do
45926: LD_ADDR_VAR 0 5
45930: PUSH
45931: LD_VAR 0 4
45935: PUSH
45936: FOR_IN
45937: IFFALSE 45979
// if GetTech ( i , side ) <> state then
45939: LD_VAR 0 5
45943: PPUSH
45944: LD_VAR 0 1
45948: PPUSH
45949: CALL_OW 321
45953: PUSH
45954: LD_VAR 0 3
45958: NONEQUAL
45959: IFFALSE 45977
// result := result diff i ;
45961: LD_ADDR_VAR 0 4
45965: PUSH
45966: LD_VAR 0 4
45970: PUSH
45971: LD_VAR 0 5
45975: DIFF
45976: ST_TO_ADDR
45977: GO 45936
45979: POP
45980: POP
// end ;
45981: LD_VAR 0 4
45985: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
45986: LD_INT 0
45988: PPUSH
45989: PPUSH
45990: PPUSH
// result := true ;
45991: LD_ADDR_VAR 0 3
45995: PUSH
45996: LD_INT 1
45998: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
45999: LD_ADDR_VAR 0 5
46003: PUSH
46004: LD_VAR 0 2
46008: PPUSH
46009: CALL_OW 480
46013: ST_TO_ADDR
// if not tmp then
46014: LD_VAR 0 5
46018: NOT
46019: IFFALSE 46023
// exit ;
46021: GO 46072
// for i in tmp do
46023: LD_ADDR_VAR 0 4
46027: PUSH
46028: LD_VAR 0 5
46032: PUSH
46033: FOR_IN
46034: IFFALSE 46070
// if GetTech ( i , side ) <> state_researched then
46036: LD_VAR 0 4
46040: PPUSH
46041: LD_VAR 0 1
46045: PPUSH
46046: CALL_OW 321
46050: PUSH
46051: LD_INT 2
46053: NONEQUAL
46054: IFFALSE 46068
// begin result := false ;
46056: LD_ADDR_VAR 0 3
46060: PUSH
46061: LD_INT 0
46063: ST_TO_ADDR
// exit ;
46064: POP
46065: POP
46066: GO 46072
// end ;
46068: GO 46033
46070: POP
46071: POP
// end ;
46072: LD_VAR 0 3
46076: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
46077: LD_INT 0
46079: PPUSH
46080: PPUSH
46081: PPUSH
46082: PPUSH
46083: PPUSH
46084: PPUSH
46085: PPUSH
46086: PPUSH
46087: PPUSH
46088: PPUSH
46089: PPUSH
46090: PPUSH
46091: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
46092: LD_VAR 0 1
46096: NOT
46097: PUSH
46098: LD_VAR 0 1
46102: PPUSH
46103: CALL_OW 257
46107: PUSH
46108: LD_INT 9
46110: NONEQUAL
46111: OR
46112: IFFALSE 46116
// exit ;
46114: GO 46689
// side := GetSide ( unit ) ;
46116: LD_ADDR_VAR 0 9
46120: PUSH
46121: LD_VAR 0 1
46125: PPUSH
46126: CALL_OW 255
46130: ST_TO_ADDR
// tech_space := tech_spacanom ;
46131: LD_ADDR_VAR 0 12
46135: PUSH
46136: LD_INT 29
46138: ST_TO_ADDR
// tech_time := tech_taurad ;
46139: LD_ADDR_VAR 0 13
46143: PUSH
46144: LD_INT 28
46146: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
46147: LD_ADDR_VAR 0 11
46151: PUSH
46152: LD_VAR 0 1
46156: PPUSH
46157: CALL_OW 310
46161: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
46162: LD_VAR 0 11
46166: PPUSH
46167: CALL_OW 247
46171: PUSH
46172: LD_INT 2
46174: EQUAL
46175: IFFALSE 46179
// exit ;
46177: GO 46689
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46179: LD_ADDR_VAR 0 8
46183: PUSH
46184: LD_INT 81
46186: PUSH
46187: LD_VAR 0 9
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 3
46198: PUSH
46199: LD_INT 21
46201: PUSH
46202: LD_INT 3
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PPUSH
46217: CALL_OW 69
46221: ST_TO_ADDR
// if not tmp then
46222: LD_VAR 0 8
46226: NOT
46227: IFFALSE 46231
// exit ;
46229: GO 46689
// if in_unit then
46231: LD_VAR 0 11
46235: IFFALSE 46259
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
46237: LD_ADDR_VAR 0 10
46241: PUSH
46242: LD_VAR 0 8
46246: PPUSH
46247: LD_VAR 0 11
46251: PPUSH
46252: CALL_OW 74
46256: ST_TO_ADDR
46257: GO 46279
// enemy := NearestUnitToUnit ( tmp , unit ) ;
46259: LD_ADDR_VAR 0 10
46263: PUSH
46264: LD_VAR 0 8
46268: PPUSH
46269: LD_VAR 0 1
46273: PPUSH
46274: CALL_OW 74
46278: ST_TO_ADDR
// if not enemy then
46279: LD_VAR 0 10
46283: NOT
46284: IFFALSE 46288
// exit ;
46286: GO 46689
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
46288: LD_VAR 0 11
46292: PUSH
46293: LD_VAR 0 11
46297: PPUSH
46298: LD_VAR 0 10
46302: PPUSH
46303: CALL_OW 296
46307: PUSH
46308: LD_INT 13
46310: GREATER
46311: AND
46312: PUSH
46313: LD_VAR 0 1
46317: PPUSH
46318: LD_VAR 0 10
46322: PPUSH
46323: CALL_OW 296
46327: PUSH
46328: LD_INT 12
46330: GREATER
46331: OR
46332: IFFALSE 46336
// exit ;
46334: GO 46689
// missile := [ 1 ] ;
46336: LD_ADDR_VAR 0 14
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: EMPTY
46345: LIST
46346: ST_TO_ADDR
// if Researched ( side , tech_space ) then
46347: LD_VAR 0 9
46351: PPUSH
46352: LD_VAR 0 12
46356: PPUSH
46357: CALL_OW 325
46361: IFFALSE 46390
// missile := Insert ( missile , missile + 1 , 2 ) ;
46363: LD_ADDR_VAR 0 14
46367: PUSH
46368: LD_VAR 0 14
46372: PPUSH
46373: LD_VAR 0 14
46377: PUSH
46378: LD_INT 1
46380: PLUS
46381: PPUSH
46382: LD_INT 2
46384: PPUSH
46385: CALL_OW 2
46389: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
46390: LD_VAR 0 9
46394: PPUSH
46395: LD_VAR 0 13
46399: PPUSH
46400: CALL_OW 325
46404: PUSH
46405: LD_VAR 0 10
46409: PPUSH
46410: CALL_OW 255
46414: PPUSH
46415: LD_VAR 0 13
46419: PPUSH
46420: CALL_OW 325
46424: NOT
46425: AND
46426: IFFALSE 46455
// missile := Insert ( missile , missile + 1 , 3 ) ;
46428: LD_ADDR_VAR 0 14
46432: PUSH
46433: LD_VAR 0 14
46437: PPUSH
46438: LD_VAR 0 14
46442: PUSH
46443: LD_INT 1
46445: PLUS
46446: PPUSH
46447: LD_INT 3
46449: PPUSH
46450: CALL_OW 2
46454: ST_TO_ADDR
// if missile < 2 then
46455: LD_VAR 0 14
46459: PUSH
46460: LD_INT 2
46462: LESS
46463: IFFALSE 46467
// exit ;
46465: GO 46689
// x := GetX ( enemy ) ;
46467: LD_ADDR_VAR 0 4
46471: PUSH
46472: LD_VAR 0 10
46476: PPUSH
46477: CALL_OW 250
46481: ST_TO_ADDR
// y := GetY ( enemy ) ;
46482: LD_ADDR_VAR 0 5
46486: PUSH
46487: LD_VAR 0 10
46491: PPUSH
46492: CALL_OW 251
46496: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
46497: LD_ADDR_VAR 0 6
46501: PUSH
46502: LD_VAR 0 4
46506: PUSH
46507: LD_INT 1
46509: NEG
46510: PPUSH
46511: LD_INT 1
46513: PPUSH
46514: CALL_OW 12
46518: PLUS
46519: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
46520: LD_ADDR_VAR 0 7
46524: PUSH
46525: LD_VAR 0 5
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PPUSH
46534: LD_INT 1
46536: PPUSH
46537: CALL_OW 12
46541: PLUS
46542: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46543: LD_VAR 0 6
46547: PPUSH
46548: LD_VAR 0 7
46552: PPUSH
46553: CALL_OW 488
46557: NOT
46558: IFFALSE 46580
// begin _x := x ;
46560: LD_ADDR_VAR 0 6
46564: PUSH
46565: LD_VAR 0 4
46569: ST_TO_ADDR
// _y := y ;
46570: LD_ADDR_VAR 0 7
46574: PUSH
46575: LD_VAR 0 5
46579: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
46580: LD_ADDR_VAR 0 3
46584: PUSH
46585: LD_INT 1
46587: PPUSH
46588: LD_VAR 0 14
46592: PPUSH
46593: CALL_OW 12
46597: ST_TO_ADDR
// case i of 1 :
46598: LD_VAR 0 3
46602: PUSH
46603: LD_INT 1
46605: DOUBLE
46606: EQUAL
46607: IFTRUE 46611
46609: GO 46628
46611: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
46612: LD_VAR 0 1
46616: PPUSH
46617: LD_VAR 0 10
46621: PPUSH
46622: CALL_OW 115
46626: GO 46689
46628: LD_INT 2
46630: DOUBLE
46631: EQUAL
46632: IFTRUE 46636
46634: GO 46658
46636: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
46637: LD_VAR 0 1
46641: PPUSH
46642: LD_VAR 0 6
46646: PPUSH
46647: LD_VAR 0 7
46651: PPUSH
46652: CALL_OW 153
46656: GO 46689
46658: LD_INT 3
46660: DOUBLE
46661: EQUAL
46662: IFTRUE 46666
46664: GO 46688
46666: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
46667: LD_VAR 0 1
46671: PPUSH
46672: LD_VAR 0 6
46676: PPUSH
46677: LD_VAR 0 7
46681: PPUSH
46682: CALL_OW 154
46686: GO 46689
46688: POP
// end ;
46689: LD_VAR 0 2
46693: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
46694: LD_INT 0
46696: PPUSH
46697: PPUSH
46698: PPUSH
46699: PPUSH
46700: PPUSH
46701: PPUSH
// if not unit or not building then
46702: LD_VAR 0 1
46706: NOT
46707: PUSH
46708: LD_VAR 0 2
46712: NOT
46713: OR
46714: IFFALSE 46718
// exit ;
46716: GO 46876
// x := GetX ( building ) ;
46718: LD_ADDR_VAR 0 5
46722: PUSH
46723: LD_VAR 0 2
46727: PPUSH
46728: CALL_OW 250
46732: ST_TO_ADDR
// y := GetY ( building ) ;
46733: LD_ADDR_VAR 0 6
46737: PUSH
46738: LD_VAR 0 2
46742: PPUSH
46743: CALL_OW 251
46747: ST_TO_ADDR
// for i = 0 to 5 do
46748: LD_ADDR_VAR 0 4
46752: PUSH
46753: DOUBLE
46754: LD_INT 0
46756: DEC
46757: ST_TO_ADDR
46758: LD_INT 5
46760: PUSH
46761: FOR_TO
46762: IFFALSE 46874
// begin _x := ShiftX ( x , i , 3 ) ;
46764: LD_ADDR_VAR 0 7
46768: PUSH
46769: LD_VAR 0 5
46773: PPUSH
46774: LD_VAR 0 4
46778: PPUSH
46779: LD_INT 3
46781: PPUSH
46782: CALL_OW 272
46786: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
46787: LD_ADDR_VAR 0 8
46791: PUSH
46792: LD_VAR 0 6
46796: PPUSH
46797: LD_VAR 0 4
46801: PPUSH
46802: LD_INT 3
46804: PPUSH
46805: CALL_OW 273
46809: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46810: LD_VAR 0 7
46814: PPUSH
46815: LD_VAR 0 8
46819: PPUSH
46820: CALL_OW 488
46824: NOT
46825: IFFALSE 46829
// continue ;
46827: GO 46761
// if HexInfo ( _x , _y ) = 0 then
46829: LD_VAR 0 7
46833: PPUSH
46834: LD_VAR 0 8
46838: PPUSH
46839: CALL_OW 428
46843: PUSH
46844: LD_INT 0
46846: EQUAL
46847: IFFALSE 46872
// begin ComMoveXY ( unit , _x , _y ) ;
46849: LD_VAR 0 1
46853: PPUSH
46854: LD_VAR 0 7
46858: PPUSH
46859: LD_VAR 0 8
46863: PPUSH
46864: CALL_OW 111
// exit ;
46868: POP
46869: POP
46870: GO 46876
// end ; end ;
46872: GO 46761
46874: POP
46875: POP
// end ;
46876: LD_VAR 0 3
46880: RET
// export function ScanBase ( side , base_area ) ; begin
46881: LD_INT 0
46883: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
46884: LD_ADDR_VAR 0 3
46888: PUSH
46889: LD_VAR 0 2
46893: PPUSH
46894: LD_INT 81
46896: PUSH
46897: LD_VAR 0 1
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PPUSH
46906: CALL_OW 70
46910: ST_TO_ADDR
// end ;
46911: LD_VAR 0 3
46915: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
46916: LD_INT 0
46918: PPUSH
46919: PPUSH
46920: PPUSH
46921: PPUSH
// result := false ;
46922: LD_ADDR_VAR 0 2
46926: PUSH
46927: LD_INT 0
46929: ST_TO_ADDR
// side := GetSide ( unit ) ;
46930: LD_ADDR_VAR 0 3
46934: PUSH
46935: LD_VAR 0 1
46939: PPUSH
46940: CALL_OW 255
46944: ST_TO_ADDR
// nat := GetNation ( unit ) ;
46945: LD_ADDR_VAR 0 4
46949: PUSH
46950: LD_VAR 0 1
46954: PPUSH
46955: CALL_OW 248
46959: ST_TO_ADDR
// case nat of 1 :
46960: LD_VAR 0 4
46964: PUSH
46965: LD_INT 1
46967: DOUBLE
46968: EQUAL
46969: IFTRUE 46973
46971: GO 46984
46973: POP
// tech := tech_lassight ; 2 :
46974: LD_ADDR_VAR 0 5
46978: PUSH
46979: LD_INT 12
46981: ST_TO_ADDR
46982: GO 47023
46984: LD_INT 2
46986: DOUBLE
46987: EQUAL
46988: IFTRUE 46992
46990: GO 47003
46992: POP
// tech := tech_mortar ; 3 :
46993: LD_ADDR_VAR 0 5
46997: PUSH
46998: LD_INT 41
47000: ST_TO_ADDR
47001: GO 47023
47003: LD_INT 3
47005: DOUBLE
47006: EQUAL
47007: IFTRUE 47011
47009: GO 47022
47011: POP
// tech := tech_bazooka ; end ;
47012: LD_ADDR_VAR 0 5
47016: PUSH
47017: LD_INT 44
47019: ST_TO_ADDR
47020: GO 47023
47022: POP
// if Researched ( side , tech ) then
47023: LD_VAR 0 3
47027: PPUSH
47028: LD_VAR 0 5
47032: PPUSH
47033: CALL_OW 325
47037: IFFALSE 47064
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
47039: LD_ADDR_VAR 0 2
47043: PUSH
47044: LD_INT 5
47046: PUSH
47047: LD_INT 8
47049: PUSH
47050: LD_INT 9
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: LIST
47057: PUSH
47058: LD_VAR 0 4
47062: ARRAY
47063: ST_TO_ADDR
// end ;
47064: LD_VAR 0 2
47068: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
47069: LD_INT 0
47071: PPUSH
47072: PPUSH
47073: PPUSH
// if not mines then
47074: LD_VAR 0 2
47078: NOT
47079: IFFALSE 47083
// exit ;
47081: GO 47227
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47083: LD_ADDR_VAR 0 5
47087: PUSH
47088: LD_INT 81
47090: PUSH
47091: LD_VAR 0 1
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 3
47102: PUSH
47103: LD_INT 21
47105: PUSH
47106: LD_INT 3
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PPUSH
47121: CALL_OW 69
47125: ST_TO_ADDR
// for i in mines do
47126: LD_ADDR_VAR 0 4
47130: PUSH
47131: LD_VAR 0 2
47135: PUSH
47136: FOR_IN
47137: IFFALSE 47225
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
47139: LD_VAR 0 4
47143: PUSH
47144: LD_INT 1
47146: ARRAY
47147: PPUSH
47148: LD_VAR 0 4
47152: PUSH
47153: LD_INT 2
47155: ARRAY
47156: PPUSH
47157: CALL_OW 458
47161: NOT
47162: IFFALSE 47166
// continue ;
47164: GO 47136
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
47166: LD_VAR 0 4
47170: PUSH
47171: LD_INT 1
47173: ARRAY
47174: PPUSH
47175: LD_VAR 0 4
47179: PUSH
47180: LD_INT 2
47182: ARRAY
47183: PPUSH
47184: CALL_OW 428
47188: PUSH
47189: LD_VAR 0 5
47193: IN
47194: IFFALSE 47223
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
47196: LD_VAR 0 4
47200: PUSH
47201: LD_INT 1
47203: ARRAY
47204: PPUSH
47205: LD_VAR 0 4
47209: PUSH
47210: LD_INT 2
47212: ARRAY
47213: PPUSH
47214: LD_VAR 0 1
47218: PPUSH
47219: CALL_OW 456
// end ;
47223: GO 47136
47225: POP
47226: POP
// end ;
47227: LD_VAR 0 3
47231: RET
// export function Count ( array ) ; var i ; begin
47232: LD_INT 0
47234: PPUSH
47235: PPUSH
// result := 0 ;
47236: LD_ADDR_VAR 0 2
47240: PUSH
47241: LD_INT 0
47243: ST_TO_ADDR
// for i in array do
47244: LD_ADDR_VAR 0 3
47248: PUSH
47249: LD_VAR 0 1
47253: PUSH
47254: FOR_IN
47255: IFFALSE 47279
// if i then
47257: LD_VAR 0 3
47261: IFFALSE 47277
// result := result + 1 ;
47263: LD_ADDR_VAR 0 2
47267: PUSH
47268: LD_VAR 0 2
47272: PUSH
47273: LD_INT 1
47275: PLUS
47276: ST_TO_ADDR
47277: GO 47254
47279: POP
47280: POP
// end ;
47281: LD_VAR 0 2
47285: RET
// export function IsEmpty ( building ) ; begin
47286: LD_INT 0
47288: PPUSH
// if not building then
47289: LD_VAR 0 1
47293: NOT
47294: IFFALSE 47298
// exit ;
47296: GO 47341
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
47298: LD_ADDR_VAR 0 2
47302: PUSH
47303: LD_VAR 0 1
47307: PUSH
47308: LD_INT 22
47310: PUSH
47311: LD_VAR 0 1
47315: PPUSH
47316: CALL_OW 255
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 58
47327: PUSH
47328: EMPTY
47329: LIST
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PPUSH
47335: CALL_OW 69
47339: IN
47340: ST_TO_ADDR
// end ;
47341: LD_VAR 0 2
47345: RET
// export function IsNotFull ( building ) ; begin
47346: LD_INT 0
47348: PPUSH
// if not building then
47349: LD_VAR 0 1
47353: NOT
47354: IFFALSE 47358
// exit ;
47356: GO 47377
// result := UnitsInside ( building ) < 6 ;
47358: LD_ADDR_VAR 0 2
47362: PUSH
47363: LD_VAR 0 1
47367: PPUSH
47368: CALL_OW 313
47372: PUSH
47373: LD_INT 6
47375: LESS
47376: ST_TO_ADDR
// end ;
47377: LD_VAR 0 2
47381: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
47382: LD_INT 0
47384: PPUSH
47385: PPUSH
47386: PPUSH
47387: PPUSH
// tmp := [ ] ;
47388: LD_ADDR_VAR 0 3
47392: PUSH
47393: EMPTY
47394: ST_TO_ADDR
// list := [ ] ;
47395: LD_ADDR_VAR 0 5
47399: PUSH
47400: EMPTY
47401: ST_TO_ADDR
// for i = 16 to 25 do
47402: LD_ADDR_VAR 0 4
47406: PUSH
47407: DOUBLE
47408: LD_INT 16
47410: DEC
47411: ST_TO_ADDR
47412: LD_INT 25
47414: PUSH
47415: FOR_TO
47416: IFFALSE 47489
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
47418: LD_ADDR_VAR 0 3
47422: PUSH
47423: LD_VAR 0 3
47427: PUSH
47428: LD_INT 22
47430: PUSH
47431: LD_VAR 0 1
47435: PPUSH
47436: CALL_OW 255
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 91
47447: PUSH
47448: LD_VAR 0 1
47452: PUSH
47453: LD_INT 6
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 30
47463: PUSH
47464: LD_VAR 0 4
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: LIST
47477: PUSH
47478: EMPTY
47479: LIST
47480: PPUSH
47481: CALL_OW 69
47485: ADD
47486: ST_TO_ADDR
47487: GO 47415
47489: POP
47490: POP
// for i = 1 to tmp do
47491: LD_ADDR_VAR 0 4
47495: PUSH
47496: DOUBLE
47497: LD_INT 1
47499: DEC
47500: ST_TO_ADDR
47501: LD_VAR 0 3
47505: PUSH
47506: FOR_TO
47507: IFFALSE 47595
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
47509: LD_ADDR_VAR 0 5
47513: PUSH
47514: LD_VAR 0 5
47518: PUSH
47519: LD_VAR 0 3
47523: PUSH
47524: LD_VAR 0 4
47528: ARRAY
47529: PPUSH
47530: CALL_OW 266
47534: PUSH
47535: LD_VAR 0 3
47539: PUSH
47540: LD_VAR 0 4
47544: ARRAY
47545: PPUSH
47546: CALL_OW 250
47550: PUSH
47551: LD_VAR 0 3
47555: PUSH
47556: LD_VAR 0 4
47560: ARRAY
47561: PPUSH
47562: CALL_OW 251
47566: PUSH
47567: LD_VAR 0 3
47571: PUSH
47572: LD_VAR 0 4
47576: ARRAY
47577: PPUSH
47578: CALL_OW 254
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: PUSH
47589: EMPTY
47590: LIST
47591: ADD
47592: ST_TO_ADDR
47593: GO 47506
47595: POP
47596: POP
// result := list ;
47597: LD_ADDR_VAR 0 2
47601: PUSH
47602: LD_VAR 0 5
47606: ST_TO_ADDR
// end ;
47607: LD_VAR 0 2
47611: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
47612: LD_INT 0
47614: PPUSH
47615: PPUSH
47616: PPUSH
47617: PPUSH
47618: PPUSH
47619: PPUSH
47620: PPUSH
// if not factory then
47621: LD_VAR 0 1
47625: NOT
47626: IFFALSE 47630
// exit ;
47628: GO 48223
// if control = control_apeman then
47630: LD_VAR 0 4
47634: PUSH
47635: LD_INT 5
47637: EQUAL
47638: IFFALSE 47747
// begin tmp := UnitsInside ( factory ) ;
47640: LD_ADDR_VAR 0 8
47644: PUSH
47645: LD_VAR 0 1
47649: PPUSH
47650: CALL_OW 313
47654: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
47655: LD_VAR 0 8
47659: PPUSH
47660: LD_INT 25
47662: PUSH
47663: LD_INT 12
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PPUSH
47670: CALL_OW 72
47674: NOT
47675: IFFALSE 47685
// control := control_manual ;
47677: LD_ADDR_VAR 0 4
47681: PUSH
47682: LD_INT 1
47684: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
47685: LD_ADDR_VAR 0 8
47689: PUSH
47690: LD_VAR 0 1
47694: PPUSH
47695: CALL 47382 0 1
47699: ST_TO_ADDR
// if tmp then
47700: LD_VAR 0 8
47704: IFFALSE 47747
// begin for i in tmp do
47706: LD_ADDR_VAR 0 7
47710: PUSH
47711: LD_VAR 0 8
47715: PUSH
47716: FOR_IN
47717: IFFALSE 47745
// if i [ 1 ] = b_ext_radio then
47719: LD_VAR 0 7
47723: PUSH
47724: LD_INT 1
47726: ARRAY
47727: PUSH
47728: LD_INT 22
47730: EQUAL
47731: IFFALSE 47743
// begin control := control_remote ;
47733: LD_ADDR_VAR 0 4
47737: PUSH
47738: LD_INT 2
47740: ST_TO_ADDR
// break ;
47741: GO 47745
// end ;
47743: GO 47716
47745: POP
47746: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
47747: LD_VAR 0 1
47751: PPUSH
47752: LD_VAR 0 2
47756: PPUSH
47757: LD_VAR 0 3
47761: PPUSH
47762: LD_VAR 0 4
47766: PPUSH
47767: LD_VAR 0 5
47771: PPUSH
47772: CALL_OW 448
47776: IFFALSE 47811
// begin result := [ chassis , engine , control , weapon ] ;
47778: LD_ADDR_VAR 0 6
47782: PUSH
47783: LD_VAR 0 2
47787: PUSH
47788: LD_VAR 0 3
47792: PUSH
47793: LD_VAR 0 4
47797: PUSH
47798: LD_VAR 0 5
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: ST_TO_ADDR
// exit ;
47809: GO 48223
// end ; _chassis := AvailableChassisList ( factory ) ;
47811: LD_ADDR_VAR 0 9
47815: PUSH
47816: LD_VAR 0 1
47820: PPUSH
47821: CALL_OW 475
47825: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
47826: LD_ADDR_VAR 0 11
47830: PUSH
47831: LD_VAR 0 1
47835: PPUSH
47836: CALL_OW 476
47840: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
47841: LD_ADDR_VAR 0 12
47845: PUSH
47846: LD_VAR 0 1
47850: PPUSH
47851: CALL_OW 477
47855: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
47856: LD_ADDR_VAR 0 10
47860: PUSH
47861: LD_VAR 0 1
47865: PPUSH
47866: CALL_OW 478
47870: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
47871: LD_VAR 0 9
47875: NOT
47876: PUSH
47877: LD_VAR 0 11
47881: NOT
47882: OR
47883: PUSH
47884: LD_VAR 0 12
47888: NOT
47889: OR
47890: PUSH
47891: LD_VAR 0 10
47895: NOT
47896: OR
47897: IFFALSE 47932
// begin result := [ chassis , engine , control , weapon ] ;
47899: LD_ADDR_VAR 0 6
47903: PUSH
47904: LD_VAR 0 2
47908: PUSH
47909: LD_VAR 0 3
47913: PUSH
47914: LD_VAR 0 4
47918: PUSH
47919: LD_VAR 0 5
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: ST_TO_ADDR
// exit ;
47930: GO 48223
// end ; if not chassis in _chassis then
47932: LD_VAR 0 2
47936: PUSH
47937: LD_VAR 0 9
47941: IN
47942: NOT
47943: IFFALSE 47969
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
47945: LD_ADDR_VAR 0 2
47949: PUSH
47950: LD_VAR 0 9
47954: PUSH
47955: LD_INT 1
47957: PPUSH
47958: LD_VAR 0 9
47962: PPUSH
47963: CALL_OW 12
47967: ARRAY
47968: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
47969: LD_VAR 0 2
47973: PPUSH
47974: LD_VAR 0 3
47978: PPUSH
47979: CALL 48228 0 2
47983: NOT
47984: IFFALSE 48043
// repeat engine := _engine [ 1 ] ;
47986: LD_ADDR_VAR 0 3
47990: PUSH
47991: LD_VAR 0 11
47995: PUSH
47996: LD_INT 1
47998: ARRAY
47999: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
48000: LD_ADDR_VAR 0 11
48004: PUSH
48005: LD_VAR 0 11
48009: PPUSH
48010: LD_INT 1
48012: PPUSH
48013: CALL_OW 3
48017: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
48018: LD_VAR 0 2
48022: PPUSH
48023: LD_VAR 0 3
48027: PPUSH
48028: CALL 48228 0 2
48032: PUSH
48033: LD_VAR 0 11
48037: PUSH
48038: EMPTY
48039: EQUAL
48040: OR
48041: IFFALSE 47986
// if not control in _control then
48043: LD_VAR 0 4
48047: PUSH
48048: LD_VAR 0 12
48052: IN
48053: NOT
48054: IFFALSE 48080
// control := _control [ rand ( 1 , _control ) ] ;
48056: LD_ADDR_VAR 0 4
48060: PUSH
48061: LD_VAR 0 12
48065: PUSH
48066: LD_INT 1
48068: PPUSH
48069: LD_VAR 0 12
48073: PPUSH
48074: CALL_OW 12
48078: ARRAY
48079: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
48080: LD_VAR 0 2
48084: PPUSH
48085: LD_VAR 0 5
48089: PPUSH
48090: CALL 48448 0 2
48094: NOT
48095: IFFALSE 48154
// repeat weapon := _weapon [ 1 ] ;
48097: LD_ADDR_VAR 0 5
48101: PUSH
48102: LD_VAR 0 10
48106: PUSH
48107: LD_INT 1
48109: ARRAY
48110: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
48111: LD_ADDR_VAR 0 10
48115: PUSH
48116: LD_VAR 0 10
48120: PPUSH
48121: LD_INT 1
48123: PPUSH
48124: CALL_OW 3
48128: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
48129: LD_VAR 0 2
48133: PPUSH
48134: LD_VAR 0 5
48138: PPUSH
48139: CALL 48448 0 2
48143: PUSH
48144: LD_VAR 0 10
48148: PUSH
48149: EMPTY
48150: EQUAL
48151: OR
48152: IFFALSE 48097
// result := [ ] ;
48154: LD_ADDR_VAR 0 6
48158: PUSH
48159: EMPTY
48160: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
48161: LD_VAR 0 1
48165: PPUSH
48166: LD_VAR 0 2
48170: PPUSH
48171: LD_VAR 0 3
48175: PPUSH
48176: LD_VAR 0 4
48180: PPUSH
48181: LD_VAR 0 5
48185: PPUSH
48186: CALL_OW 448
48190: IFFALSE 48223
// result := [ chassis , engine , control , weapon ] ;
48192: LD_ADDR_VAR 0 6
48196: PUSH
48197: LD_VAR 0 2
48201: PUSH
48202: LD_VAR 0 3
48206: PUSH
48207: LD_VAR 0 4
48211: PUSH
48212: LD_VAR 0 5
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: ST_TO_ADDR
// end ;
48223: LD_VAR 0 6
48227: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
48228: LD_INT 0
48230: PPUSH
// if not chassis or not engine then
48231: LD_VAR 0 1
48235: NOT
48236: PUSH
48237: LD_VAR 0 2
48241: NOT
48242: OR
48243: IFFALSE 48247
// exit ;
48245: GO 48443
// case engine of engine_solar :
48247: LD_VAR 0 2
48251: PUSH
48252: LD_INT 2
48254: DOUBLE
48255: EQUAL
48256: IFTRUE 48260
48258: GO 48298
48260: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
48261: LD_ADDR_VAR 0 3
48265: PUSH
48266: LD_INT 11
48268: PUSH
48269: LD_INT 12
48271: PUSH
48272: LD_INT 13
48274: PUSH
48275: LD_INT 14
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: LD_INT 3
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: ST_TO_ADDR
48296: GO 48427
48298: LD_INT 1
48300: DOUBLE
48301: EQUAL
48302: IFTRUE 48306
48304: GO 48368
48306: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
48307: LD_ADDR_VAR 0 3
48311: PUSH
48312: LD_INT 11
48314: PUSH
48315: LD_INT 12
48317: PUSH
48318: LD_INT 13
48320: PUSH
48321: LD_INT 14
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: LD_INT 2
48329: PUSH
48330: LD_INT 3
48332: PUSH
48333: LD_INT 4
48335: PUSH
48336: LD_INT 5
48338: PUSH
48339: LD_INT 21
48341: PUSH
48342: LD_INT 23
48344: PUSH
48345: LD_INT 22
48347: PUSH
48348: LD_INT 24
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: ST_TO_ADDR
48366: GO 48427
48368: LD_INT 3
48370: DOUBLE
48371: EQUAL
48372: IFTRUE 48376
48374: GO 48426
48376: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
48377: LD_ADDR_VAR 0 3
48381: PUSH
48382: LD_INT 13
48384: PUSH
48385: LD_INT 14
48387: PUSH
48388: LD_INT 2
48390: PUSH
48391: LD_INT 3
48393: PUSH
48394: LD_INT 4
48396: PUSH
48397: LD_INT 5
48399: PUSH
48400: LD_INT 21
48402: PUSH
48403: LD_INT 22
48405: PUSH
48406: LD_INT 23
48408: PUSH
48409: LD_INT 24
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: ST_TO_ADDR
48424: GO 48427
48426: POP
// result := ( chassis in result ) ;
48427: LD_ADDR_VAR 0 3
48431: PUSH
48432: LD_VAR 0 1
48436: PUSH
48437: LD_VAR 0 3
48441: IN
48442: ST_TO_ADDR
// end ;
48443: LD_VAR 0 3
48447: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
48448: LD_INT 0
48450: PPUSH
// if not chassis or not weapon then
48451: LD_VAR 0 1
48455: NOT
48456: PUSH
48457: LD_VAR 0 2
48461: NOT
48462: OR
48463: IFFALSE 48467
// exit ;
48465: GO 49493
// case weapon of us_machine_gun :
48467: LD_VAR 0 2
48471: PUSH
48472: LD_INT 2
48474: DOUBLE
48475: EQUAL
48476: IFTRUE 48480
48478: GO 48510
48480: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
48481: LD_ADDR_VAR 0 3
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: LD_INT 2
48491: PUSH
48492: LD_INT 3
48494: PUSH
48495: LD_INT 4
48497: PUSH
48498: LD_INT 5
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: ST_TO_ADDR
48508: GO 49477
48510: LD_INT 3
48512: DOUBLE
48513: EQUAL
48514: IFTRUE 48518
48516: GO 48548
48518: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
48519: LD_ADDR_VAR 0 3
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: LD_INT 3
48532: PUSH
48533: LD_INT 4
48535: PUSH
48536: LD_INT 5
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: ST_TO_ADDR
48546: GO 49477
48548: LD_INT 11
48550: DOUBLE
48551: EQUAL
48552: IFTRUE 48556
48554: GO 48586
48556: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
48557: LD_ADDR_VAR 0 3
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: LD_INT 3
48570: PUSH
48571: LD_INT 4
48573: PUSH
48574: LD_INT 5
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: ST_TO_ADDR
48584: GO 49477
48586: LD_INT 4
48588: DOUBLE
48589: EQUAL
48590: IFTRUE 48594
48592: GO 48620
48594: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
48595: LD_ADDR_VAR 0 3
48599: PUSH
48600: LD_INT 2
48602: PUSH
48603: LD_INT 3
48605: PUSH
48606: LD_INT 4
48608: PUSH
48609: LD_INT 5
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: ST_TO_ADDR
48618: GO 49477
48620: LD_INT 5
48622: DOUBLE
48623: EQUAL
48624: IFTRUE 48628
48626: GO 48654
48628: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
48629: LD_ADDR_VAR 0 3
48633: PUSH
48634: LD_INT 2
48636: PUSH
48637: LD_INT 3
48639: PUSH
48640: LD_INT 4
48642: PUSH
48643: LD_INT 5
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: ST_TO_ADDR
48652: GO 49477
48654: LD_INT 9
48656: DOUBLE
48657: EQUAL
48658: IFTRUE 48662
48660: GO 48688
48662: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
48663: LD_ADDR_VAR 0 3
48667: PUSH
48668: LD_INT 2
48670: PUSH
48671: LD_INT 3
48673: PUSH
48674: LD_INT 4
48676: PUSH
48677: LD_INT 5
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: ST_TO_ADDR
48686: GO 49477
48688: LD_INT 7
48690: DOUBLE
48691: EQUAL
48692: IFTRUE 48696
48694: GO 48722
48696: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
48697: LD_ADDR_VAR 0 3
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: LD_INT 3
48707: PUSH
48708: LD_INT 4
48710: PUSH
48711: LD_INT 5
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: ST_TO_ADDR
48720: GO 49477
48722: LD_INT 12
48724: DOUBLE
48725: EQUAL
48726: IFTRUE 48730
48728: GO 48756
48730: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
48731: LD_ADDR_VAR 0 3
48735: PUSH
48736: LD_INT 2
48738: PUSH
48739: LD_INT 3
48741: PUSH
48742: LD_INT 4
48744: PUSH
48745: LD_INT 5
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: ST_TO_ADDR
48754: GO 49477
48756: LD_INT 13
48758: DOUBLE
48759: EQUAL
48760: IFTRUE 48764
48762: GO 48790
48764: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
48765: LD_ADDR_VAR 0 3
48769: PUSH
48770: LD_INT 2
48772: PUSH
48773: LD_INT 3
48775: PUSH
48776: LD_INT 4
48778: PUSH
48779: LD_INT 5
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: ST_TO_ADDR
48788: GO 49477
48790: LD_INT 14
48792: DOUBLE
48793: EQUAL
48794: IFTRUE 48798
48796: GO 48816
48798: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
48799: LD_ADDR_VAR 0 3
48803: PUSH
48804: LD_INT 4
48806: PUSH
48807: LD_INT 5
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: ST_TO_ADDR
48814: GO 49477
48816: LD_INT 6
48818: DOUBLE
48819: EQUAL
48820: IFTRUE 48824
48822: GO 48842
48824: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
48825: LD_ADDR_VAR 0 3
48829: PUSH
48830: LD_INT 4
48832: PUSH
48833: LD_INT 5
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: ST_TO_ADDR
48840: GO 49477
48842: LD_INT 10
48844: DOUBLE
48845: EQUAL
48846: IFTRUE 48850
48848: GO 48868
48850: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
48851: LD_ADDR_VAR 0 3
48855: PUSH
48856: LD_INT 4
48858: PUSH
48859: LD_INT 5
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: ST_TO_ADDR
48866: GO 49477
48868: LD_INT 22
48870: DOUBLE
48871: EQUAL
48872: IFTRUE 48876
48874: GO 48902
48876: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
48877: LD_ADDR_VAR 0 3
48881: PUSH
48882: LD_INT 11
48884: PUSH
48885: LD_INT 12
48887: PUSH
48888: LD_INT 13
48890: PUSH
48891: LD_INT 14
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: ST_TO_ADDR
48900: GO 49477
48902: LD_INT 23
48904: DOUBLE
48905: EQUAL
48906: IFTRUE 48910
48908: GO 48936
48910: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
48911: LD_ADDR_VAR 0 3
48915: PUSH
48916: LD_INT 11
48918: PUSH
48919: LD_INT 12
48921: PUSH
48922: LD_INT 13
48924: PUSH
48925: LD_INT 14
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: ST_TO_ADDR
48934: GO 49477
48936: LD_INT 24
48938: DOUBLE
48939: EQUAL
48940: IFTRUE 48944
48942: GO 48970
48944: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
48945: LD_ADDR_VAR 0 3
48949: PUSH
48950: LD_INT 11
48952: PUSH
48953: LD_INT 12
48955: PUSH
48956: LD_INT 13
48958: PUSH
48959: LD_INT 14
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: ST_TO_ADDR
48968: GO 49477
48970: LD_INT 30
48972: DOUBLE
48973: EQUAL
48974: IFTRUE 48978
48976: GO 49004
48978: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
48979: LD_ADDR_VAR 0 3
48983: PUSH
48984: LD_INT 11
48986: PUSH
48987: LD_INT 12
48989: PUSH
48990: LD_INT 13
48992: PUSH
48993: LD_INT 14
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: ST_TO_ADDR
49002: GO 49477
49004: LD_INT 25
49006: DOUBLE
49007: EQUAL
49008: IFTRUE 49012
49010: GO 49030
49012: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
49013: LD_ADDR_VAR 0 3
49017: PUSH
49018: LD_INT 13
49020: PUSH
49021: LD_INT 14
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: ST_TO_ADDR
49028: GO 49477
49030: LD_INT 27
49032: DOUBLE
49033: EQUAL
49034: IFTRUE 49038
49036: GO 49056
49038: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
49039: LD_ADDR_VAR 0 3
49043: PUSH
49044: LD_INT 13
49046: PUSH
49047: LD_INT 14
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: ST_TO_ADDR
49054: GO 49477
49056: LD_INT 28
49058: DOUBLE
49059: EQUAL
49060: IFTRUE 49064
49062: GO 49082
49064: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
49065: LD_ADDR_VAR 0 3
49069: PUSH
49070: LD_INT 13
49072: PUSH
49073: LD_INT 14
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: ST_TO_ADDR
49080: GO 49477
49082: LD_INT 29
49084: DOUBLE
49085: EQUAL
49086: IFTRUE 49090
49088: GO 49108
49090: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
49091: LD_ADDR_VAR 0 3
49095: PUSH
49096: LD_INT 13
49098: PUSH
49099: LD_INT 14
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: ST_TO_ADDR
49106: GO 49477
49108: LD_INT 31
49110: DOUBLE
49111: EQUAL
49112: IFTRUE 49116
49114: GO 49134
49116: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
49117: LD_ADDR_VAR 0 3
49121: PUSH
49122: LD_INT 13
49124: PUSH
49125: LD_INT 14
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: ST_TO_ADDR
49132: GO 49477
49134: LD_INT 26
49136: DOUBLE
49137: EQUAL
49138: IFTRUE 49142
49140: GO 49160
49142: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
49143: LD_ADDR_VAR 0 3
49147: PUSH
49148: LD_INT 13
49150: PUSH
49151: LD_INT 14
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: ST_TO_ADDR
49158: GO 49477
49160: LD_INT 42
49162: DOUBLE
49163: EQUAL
49164: IFTRUE 49168
49166: GO 49194
49168: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
49169: LD_ADDR_VAR 0 3
49173: PUSH
49174: LD_INT 21
49176: PUSH
49177: LD_INT 22
49179: PUSH
49180: LD_INT 23
49182: PUSH
49183: LD_INT 24
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: ST_TO_ADDR
49192: GO 49477
49194: LD_INT 43
49196: DOUBLE
49197: EQUAL
49198: IFTRUE 49202
49200: GO 49228
49202: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
49203: LD_ADDR_VAR 0 3
49207: PUSH
49208: LD_INT 21
49210: PUSH
49211: LD_INT 22
49213: PUSH
49214: LD_INT 23
49216: PUSH
49217: LD_INT 24
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: ST_TO_ADDR
49226: GO 49477
49228: LD_INT 44
49230: DOUBLE
49231: EQUAL
49232: IFTRUE 49236
49234: GO 49262
49236: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
49237: LD_ADDR_VAR 0 3
49241: PUSH
49242: LD_INT 21
49244: PUSH
49245: LD_INT 22
49247: PUSH
49248: LD_INT 23
49250: PUSH
49251: LD_INT 24
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: ST_TO_ADDR
49260: GO 49477
49262: LD_INT 45
49264: DOUBLE
49265: EQUAL
49266: IFTRUE 49270
49268: GO 49296
49270: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
49271: LD_ADDR_VAR 0 3
49275: PUSH
49276: LD_INT 21
49278: PUSH
49279: LD_INT 22
49281: PUSH
49282: LD_INT 23
49284: PUSH
49285: LD_INT 24
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: ST_TO_ADDR
49294: GO 49477
49296: LD_INT 49
49298: DOUBLE
49299: EQUAL
49300: IFTRUE 49304
49302: GO 49330
49304: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
49305: LD_ADDR_VAR 0 3
49309: PUSH
49310: LD_INT 21
49312: PUSH
49313: LD_INT 22
49315: PUSH
49316: LD_INT 23
49318: PUSH
49319: LD_INT 24
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: ST_TO_ADDR
49328: GO 49477
49330: LD_INT 51
49332: DOUBLE
49333: EQUAL
49334: IFTRUE 49338
49336: GO 49364
49338: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
49339: LD_ADDR_VAR 0 3
49343: PUSH
49344: LD_INT 21
49346: PUSH
49347: LD_INT 22
49349: PUSH
49350: LD_INT 23
49352: PUSH
49353: LD_INT 24
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: ST_TO_ADDR
49362: GO 49477
49364: LD_INT 52
49366: DOUBLE
49367: EQUAL
49368: IFTRUE 49372
49370: GO 49398
49372: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
49373: LD_ADDR_VAR 0 3
49377: PUSH
49378: LD_INT 21
49380: PUSH
49381: LD_INT 22
49383: PUSH
49384: LD_INT 23
49386: PUSH
49387: LD_INT 24
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: ST_TO_ADDR
49396: GO 49477
49398: LD_INT 53
49400: DOUBLE
49401: EQUAL
49402: IFTRUE 49406
49404: GO 49424
49406: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
49407: LD_ADDR_VAR 0 3
49411: PUSH
49412: LD_INT 23
49414: PUSH
49415: LD_INT 24
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: ST_TO_ADDR
49422: GO 49477
49424: LD_INT 46
49426: DOUBLE
49427: EQUAL
49428: IFTRUE 49432
49430: GO 49450
49432: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
49433: LD_ADDR_VAR 0 3
49437: PUSH
49438: LD_INT 23
49440: PUSH
49441: LD_INT 24
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: ST_TO_ADDR
49448: GO 49477
49450: LD_INT 47
49452: DOUBLE
49453: EQUAL
49454: IFTRUE 49458
49456: GO 49476
49458: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
49459: LD_ADDR_VAR 0 3
49463: PUSH
49464: LD_INT 23
49466: PUSH
49467: LD_INT 24
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: ST_TO_ADDR
49474: GO 49477
49476: POP
// result := ( chassis in result ) ;
49477: LD_ADDR_VAR 0 3
49481: PUSH
49482: LD_VAR 0 1
49486: PUSH
49487: LD_VAR 0 3
49491: IN
49492: ST_TO_ADDR
// end ;
49493: LD_VAR 0 3
49497: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
49498: LD_INT 0
49500: PPUSH
49501: PPUSH
49502: PPUSH
49503: PPUSH
49504: PPUSH
49505: PPUSH
49506: PPUSH
// result := array ;
49507: LD_ADDR_VAR 0 5
49511: PUSH
49512: LD_VAR 0 1
49516: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
49517: LD_VAR 0 1
49521: NOT
49522: PUSH
49523: LD_VAR 0 2
49527: NOT
49528: OR
49529: PUSH
49530: LD_VAR 0 3
49534: NOT
49535: OR
49536: PUSH
49537: LD_VAR 0 2
49541: PUSH
49542: LD_VAR 0 1
49546: GREATER
49547: OR
49548: PUSH
49549: LD_VAR 0 3
49553: PUSH
49554: LD_VAR 0 1
49558: GREATER
49559: OR
49560: IFFALSE 49564
// exit ;
49562: GO 49860
// if direction then
49564: LD_VAR 0 4
49568: IFFALSE 49632
// begin d := 1 ;
49570: LD_ADDR_VAR 0 9
49574: PUSH
49575: LD_INT 1
49577: ST_TO_ADDR
// if i_from > i_to then
49578: LD_VAR 0 2
49582: PUSH
49583: LD_VAR 0 3
49587: GREATER
49588: IFFALSE 49614
// length := ( array - i_from ) + i_to else
49590: LD_ADDR_VAR 0 11
49594: PUSH
49595: LD_VAR 0 1
49599: PUSH
49600: LD_VAR 0 2
49604: MINUS
49605: PUSH
49606: LD_VAR 0 3
49610: PLUS
49611: ST_TO_ADDR
49612: GO 49630
// length := i_to - i_from ;
49614: LD_ADDR_VAR 0 11
49618: PUSH
49619: LD_VAR 0 3
49623: PUSH
49624: LD_VAR 0 2
49628: MINUS
49629: ST_TO_ADDR
// end else
49630: GO 49693
// begin d := - 1 ;
49632: LD_ADDR_VAR 0 9
49636: PUSH
49637: LD_INT 1
49639: NEG
49640: ST_TO_ADDR
// if i_from > i_to then
49641: LD_VAR 0 2
49645: PUSH
49646: LD_VAR 0 3
49650: GREATER
49651: IFFALSE 49671
// length := i_from - i_to else
49653: LD_ADDR_VAR 0 11
49657: PUSH
49658: LD_VAR 0 2
49662: PUSH
49663: LD_VAR 0 3
49667: MINUS
49668: ST_TO_ADDR
49669: GO 49693
// length := ( array - i_to ) + i_from ;
49671: LD_ADDR_VAR 0 11
49675: PUSH
49676: LD_VAR 0 1
49680: PUSH
49681: LD_VAR 0 3
49685: MINUS
49686: PUSH
49687: LD_VAR 0 2
49691: PLUS
49692: ST_TO_ADDR
// end ; if not length then
49693: LD_VAR 0 11
49697: NOT
49698: IFFALSE 49702
// exit ;
49700: GO 49860
// tmp := array ;
49702: LD_ADDR_VAR 0 10
49706: PUSH
49707: LD_VAR 0 1
49711: ST_TO_ADDR
// for i = 1 to length do
49712: LD_ADDR_VAR 0 6
49716: PUSH
49717: DOUBLE
49718: LD_INT 1
49720: DEC
49721: ST_TO_ADDR
49722: LD_VAR 0 11
49726: PUSH
49727: FOR_TO
49728: IFFALSE 49848
// begin for j = 1 to array do
49730: LD_ADDR_VAR 0 7
49734: PUSH
49735: DOUBLE
49736: LD_INT 1
49738: DEC
49739: ST_TO_ADDR
49740: LD_VAR 0 1
49744: PUSH
49745: FOR_TO
49746: IFFALSE 49834
// begin k := j + d ;
49748: LD_ADDR_VAR 0 8
49752: PUSH
49753: LD_VAR 0 7
49757: PUSH
49758: LD_VAR 0 9
49762: PLUS
49763: ST_TO_ADDR
// if k > array then
49764: LD_VAR 0 8
49768: PUSH
49769: LD_VAR 0 1
49773: GREATER
49774: IFFALSE 49784
// k := 1 ;
49776: LD_ADDR_VAR 0 8
49780: PUSH
49781: LD_INT 1
49783: ST_TO_ADDR
// if not k then
49784: LD_VAR 0 8
49788: NOT
49789: IFFALSE 49801
// k := array ;
49791: LD_ADDR_VAR 0 8
49795: PUSH
49796: LD_VAR 0 1
49800: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
49801: LD_ADDR_VAR 0 10
49805: PUSH
49806: LD_VAR 0 10
49810: PPUSH
49811: LD_VAR 0 8
49815: PPUSH
49816: LD_VAR 0 1
49820: PUSH
49821: LD_VAR 0 7
49825: ARRAY
49826: PPUSH
49827: CALL_OW 1
49831: ST_TO_ADDR
// end ;
49832: GO 49745
49834: POP
49835: POP
// array := tmp ;
49836: LD_ADDR_VAR 0 1
49840: PUSH
49841: LD_VAR 0 10
49845: ST_TO_ADDR
// end ;
49846: GO 49727
49848: POP
49849: POP
// result := array ;
49850: LD_ADDR_VAR 0 5
49854: PUSH
49855: LD_VAR 0 1
49859: ST_TO_ADDR
// end ;
49860: LD_VAR 0 5
49864: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
49865: LD_INT 0
49867: PPUSH
49868: PPUSH
// result := 0 ;
49869: LD_ADDR_VAR 0 3
49873: PUSH
49874: LD_INT 0
49876: ST_TO_ADDR
// if not array or not value in array then
49877: LD_VAR 0 1
49881: NOT
49882: PUSH
49883: LD_VAR 0 2
49887: PUSH
49888: LD_VAR 0 1
49892: IN
49893: NOT
49894: OR
49895: IFFALSE 49899
// exit ;
49897: GO 49953
// for i = 1 to array do
49899: LD_ADDR_VAR 0 4
49903: PUSH
49904: DOUBLE
49905: LD_INT 1
49907: DEC
49908: ST_TO_ADDR
49909: LD_VAR 0 1
49913: PUSH
49914: FOR_TO
49915: IFFALSE 49951
// if value = array [ i ] then
49917: LD_VAR 0 2
49921: PUSH
49922: LD_VAR 0 1
49926: PUSH
49927: LD_VAR 0 4
49931: ARRAY
49932: EQUAL
49933: IFFALSE 49949
// begin result := i ;
49935: LD_ADDR_VAR 0 3
49939: PUSH
49940: LD_VAR 0 4
49944: ST_TO_ADDR
// exit ;
49945: POP
49946: POP
49947: GO 49953
// end ;
49949: GO 49914
49951: POP
49952: POP
// end ;
49953: LD_VAR 0 3
49957: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
49958: LD_INT 0
49960: PPUSH
// vc_chassis := chassis ;
49961: LD_ADDR_OWVAR 37
49965: PUSH
49966: LD_VAR 0 1
49970: ST_TO_ADDR
// vc_engine := engine ;
49971: LD_ADDR_OWVAR 39
49975: PUSH
49976: LD_VAR 0 2
49980: ST_TO_ADDR
// vc_control := control ;
49981: LD_ADDR_OWVAR 38
49985: PUSH
49986: LD_VAR 0 3
49990: ST_TO_ADDR
// vc_weapon := weapon ;
49991: LD_ADDR_OWVAR 40
49995: PUSH
49996: LD_VAR 0 4
50000: ST_TO_ADDR
// vc_fuel_battery := fuel ;
50001: LD_ADDR_OWVAR 41
50005: PUSH
50006: LD_VAR 0 5
50010: ST_TO_ADDR
// end ;
50011: LD_VAR 0 6
50015: RET
// export function WantPlant ( unit ) ; var task ; begin
50016: LD_INT 0
50018: PPUSH
50019: PPUSH
// result := false ;
50020: LD_ADDR_VAR 0 2
50024: PUSH
50025: LD_INT 0
50027: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
50028: LD_ADDR_VAR 0 3
50032: PUSH
50033: LD_VAR 0 1
50037: PPUSH
50038: CALL_OW 437
50042: ST_TO_ADDR
// if task then
50043: LD_VAR 0 3
50047: IFFALSE 50075
// if task [ 1 ] [ 1 ] = p then
50049: LD_VAR 0 3
50053: PUSH
50054: LD_INT 1
50056: ARRAY
50057: PUSH
50058: LD_INT 1
50060: ARRAY
50061: PUSH
50062: LD_STRING p
50064: EQUAL
50065: IFFALSE 50075
// result := true ;
50067: LD_ADDR_VAR 0 2
50071: PUSH
50072: LD_INT 1
50074: ST_TO_ADDR
// end ;
50075: LD_VAR 0 2
50079: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
50080: LD_INT 0
50082: PPUSH
50083: PPUSH
50084: PPUSH
50085: PPUSH
// if pos < 1 then
50086: LD_VAR 0 2
50090: PUSH
50091: LD_INT 1
50093: LESS
50094: IFFALSE 50098
// exit ;
50096: GO 50401
// if pos = 1 then
50098: LD_VAR 0 2
50102: PUSH
50103: LD_INT 1
50105: EQUAL
50106: IFFALSE 50139
// result := Replace ( arr , pos [ 1 ] , value ) else
50108: LD_ADDR_VAR 0 4
50112: PUSH
50113: LD_VAR 0 1
50117: PPUSH
50118: LD_VAR 0 2
50122: PUSH
50123: LD_INT 1
50125: ARRAY
50126: PPUSH
50127: LD_VAR 0 3
50131: PPUSH
50132: CALL_OW 1
50136: ST_TO_ADDR
50137: GO 50401
// begin tmp := arr ;
50139: LD_ADDR_VAR 0 6
50143: PUSH
50144: LD_VAR 0 1
50148: ST_TO_ADDR
// s_arr := [ tmp ] ;
50149: LD_ADDR_VAR 0 7
50153: PUSH
50154: LD_VAR 0 6
50158: PUSH
50159: EMPTY
50160: LIST
50161: ST_TO_ADDR
// for i = 1 to pos - 1 do
50162: LD_ADDR_VAR 0 5
50166: PUSH
50167: DOUBLE
50168: LD_INT 1
50170: DEC
50171: ST_TO_ADDR
50172: LD_VAR 0 2
50176: PUSH
50177: LD_INT 1
50179: MINUS
50180: PUSH
50181: FOR_TO
50182: IFFALSE 50227
// begin tmp := tmp [ pos [ i ] ] ;
50184: LD_ADDR_VAR 0 6
50188: PUSH
50189: LD_VAR 0 6
50193: PUSH
50194: LD_VAR 0 2
50198: PUSH
50199: LD_VAR 0 5
50203: ARRAY
50204: ARRAY
50205: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
50206: LD_ADDR_VAR 0 7
50210: PUSH
50211: LD_VAR 0 7
50215: PUSH
50216: LD_VAR 0 6
50220: PUSH
50221: EMPTY
50222: LIST
50223: ADD
50224: ST_TO_ADDR
// end ;
50225: GO 50181
50227: POP
50228: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
50229: LD_ADDR_VAR 0 6
50233: PUSH
50234: LD_VAR 0 6
50238: PPUSH
50239: LD_VAR 0 2
50243: PUSH
50244: LD_VAR 0 2
50248: ARRAY
50249: PPUSH
50250: LD_VAR 0 3
50254: PPUSH
50255: CALL_OW 1
50259: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
50260: LD_ADDR_VAR 0 7
50264: PUSH
50265: LD_VAR 0 7
50269: PPUSH
50270: LD_VAR 0 7
50274: PPUSH
50275: LD_VAR 0 6
50279: PPUSH
50280: CALL_OW 1
50284: ST_TO_ADDR
// for i = s_arr downto 2 do
50285: LD_ADDR_VAR 0 5
50289: PUSH
50290: DOUBLE
50291: LD_VAR 0 7
50295: INC
50296: ST_TO_ADDR
50297: LD_INT 2
50299: PUSH
50300: FOR_DOWNTO
50301: IFFALSE 50385
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
50303: LD_ADDR_VAR 0 6
50307: PUSH
50308: LD_VAR 0 7
50312: PUSH
50313: LD_VAR 0 5
50317: PUSH
50318: LD_INT 1
50320: MINUS
50321: ARRAY
50322: PPUSH
50323: LD_VAR 0 2
50327: PUSH
50328: LD_VAR 0 5
50332: PUSH
50333: LD_INT 1
50335: MINUS
50336: ARRAY
50337: PPUSH
50338: LD_VAR 0 7
50342: PUSH
50343: LD_VAR 0 5
50347: ARRAY
50348: PPUSH
50349: CALL_OW 1
50353: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
50354: LD_ADDR_VAR 0 7
50358: PUSH
50359: LD_VAR 0 7
50363: PPUSH
50364: LD_VAR 0 5
50368: PUSH
50369: LD_INT 1
50371: MINUS
50372: PPUSH
50373: LD_VAR 0 6
50377: PPUSH
50378: CALL_OW 1
50382: ST_TO_ADDR
// end ;
50383: GO 50300
50385: POP
50386: POP
// result := s_arr [ 1 ] ;
50387: LD_ADDR_VAR 0 4
50391: PUSH
50392: LD_VAR 0 7
50396: PUSH
50397: LD_INT 1
50399: ARRAY
50400: ST_TO_ADDR
// end ; end ;
50401: LD_VAR 0 4
50405: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
50406: LD_INT 0
50408: PPUSH
50409: PPUSH
// if not list then
50410: LD_VAR 0 1
50414: NOT
50415: IFFALSE 50419
// exit ;
50417: GO 50510
// i := list [ pos1 ] ;
50419: LD_ADDR_VAR 0 5
50423: PUSH
50424: LD_VAR 0 1
50428: PUSH
50429: LD_VAR 0 2
50433: ARRAY
50434: ST_TO_ADDR
// if not i then
50435: LD_VAR 0 5
50439: NOT
50440: IFFALSE 50444
// exit ;
50442: GO 50510
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
50444: LD_ADDR_VAR 0 1
50448: PUSH
50449: LD_VAR 0 1
50453: PPUSH
50454: LD_VAR 0 2
50458: PPUSH
50459: LD_VAR 0 1
50463: PUSH
50464: LD_VAR 0 3
50468: ARRAY
50469: PPUSH
50470: CALL_OW 1
50474: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
50475: LD_ADDR_VAR 0 1
50479: PUSH
50480: LD_VAR 0 1
50484: PPUSH
50485: LD_VAR 0 3
50489: PPUSH
50490: LD_VAR 0 5
50494: PPUSH
50495: CALL_OW 1
50499: ST_TO_ADDR
// result := list ;
50500: LD_ADDR_VAR 0 4
50504: PUSH
50505: LD_VAR 0 1
50509: ST_TO_ADDR
// end ;
50510: LD_VAR 0 4
50514: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
50515: LD_INT 0
50517: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
50518: LD_ADDR_VAR 0 5
50522: PUSH
50523: LD_VAR 0 1
50527: PPUSH
50528: CALL_OW 250
50532: PPUSH
50533: LD_VAR 0 1
50537: PPUSH
50538: CALL_OW 251
50542: PPUSH
50543: LD_VAR 0 2
50547: PPUSH
50548: LD_VAR 0 3
50552: PPUSH
50553: LD_VAR 0 4
50557: PPUSH
50558: CALL 50568 0 5
50562: ST_TO_ADDR
// end ;
50563: LD_VAR 0 5
50567: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
50568: LD_INT 0
50570: PPUSH
50571: PPUSH
50572: PPUSH
50573: PPUSH
// if not list then
50574: LD_VAR 0 3
50578: NOT
50579: IFFALSE 50583
// exit ;
50581: GO 50971
// result := [ ] ;
50583: LD_ADDR_VAR 0 6
50587: PUSH
50588: EMPTY
50589: ST_TO_ADDR
// for i in list do
50590: LD_ADDR_VAR 0 7
50594: PUSH
50595: LD_VAR 0 3
50599: PUSH
50600: FOR_IN
50601: IFFALSE 50803
// begin tmp := GetDistUnitXY ( i , x , y ) ;
50603: LD_ADDR_VAR 0 9
50607: PUSH
50608: LD_VAR 0 7
50612: PPUSH
50613: LD_VAR 0 1
50617: PPUSH
50618: LD_VAR 0 2
50622: PPUSH
50623: CALL_OW 297
50627: ST_TO_ADDR
// if not result then
50628: LD_VAR 0 6
50632: NOT
50633: IFFALSE 50659
// result := [ [ i , tmp ] ] else
50635: LD_ADDR_VAR 0 6
50639: PUSH
50640: LD_VAR 0 7
50644: PUSH
50645: LD_VAR 0 9
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: EMPTY
50655: LIST
50656: ST_TO_ADDR
50657: GO 50801
// begin if result [ result ] [ 2 ] < tmp then
50659: LD_VAR 0 6
50663: PUSH
50664: LD_VAR 0 6
50668: ARRAY
50669: PUSH
50670: LD_INT 2
50672: ARRAY
50673: PUSH
50674: LD_VAR 0 9
50678: LESS
50679: IFFALSE 50721
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
50681: LD_ADDR_VAR 0 6
50685: PUSH
50686: LD_VAR 0 6
50690: PPUSH
50691: LD_VAR 0 6
50695: PUSH
50696: LD_INT 1
50698: PLUS
50699: PPUSH
50700: LD_VAR 0 7
50704: PUSH
50705: LD_VAR 0 9
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PPUSH
50714: CALL_OW 2
50718: ST_TO_ADDR
50719: GO 50801
// for j = 1 to result do
50721: LD_ADDR_VAR 0 8
50725: PUSH
50726: DOUBLE
50727: LD_INT 1
50729: DEC
50730: ST_TO_ADDR
50731: LD_VAR 0 6
50735: PUSH
50736: FOR_TO
50737: IFFALSE 50799
// begin if tmp < result [ j ] [ 2 ] then
50739: LD_VAR 0 9
50743: PUSH
50744: LD_VAR 0 6
50748: PUSH
50749: LD_VAR 0 8
50753: ARRAY
50754: PUSH
50755: LD_INT 2
50757: ARRAY
50758: LESS
50759: IFFALSE 50797
// begin result := Insert ( result , j , [ i , tmp ] ) ;
50761: LD_ADDR_VAR 0 6
50765: PUSH
50766: LD_VAR 0 6
50770: PPUSH
50771: LD_VAR 0 8
50775: PPUSH
50776: LD_VAR 0 7
50780: PUSH
50781: LD_VAR 0 9
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PPUSH
50790: CALL_OW 2
50794: ST_TO_ADDR
// break ;
50795: GO 50799
// end ; end ;
50797: GO 50736
50799: POP
50800: POP
// end ; end ;
50801: GO 50600
50803: POP
50804: POP
// if result and not asc then
50805: LD_VAR 0 6
50809: PUSH
50810: LD_VAR 0 4
50814: NOT
50815: AND
50816: IFFALSE 50891
// begin tmp := result ;
50818: LD_ADDR_VAR 0 9
50822: PUSH
50823: LD_VAR 0 6
50827: ST_TO_ADDR
// for i = tmp downto 1 do
50828: LD_ADDR_VAR 0 7
50832: PUSH
50833: DOUBLE
50834: LD_VAR 0 9
50838: INC
50839: ST_TO_ADDR
50840: LD_INT 1
50842: PUSH
50843: FOR_DOWNTO
50844: IFFALSE 50889
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
50846: LD_ADDR_VAR 0 6
50850: PUSH
50851: LD_VAR 0 6
50855: PPUSH
50856: LD_VAR 0 9
50860: PUSH
50861: LD_VAR 0 7
50865: MINUS
50866: PUSH
50867: LD_INT 1
50869: PLUS
50870: PPUSH
50871: LD_VAR 0 9
50875: PUSH
50876: LD_VAR 0 7
50880: ARRAY
50881: PPUSH
50882: CALL_OW 1
50886: ST_TO_ADDR
50887: GO 50843
50889: POP
50890: POP
// end ; tmp := [ ] ;
50891: LD_ADDR_VAR 0 9
50895: PUSH
50896: EMPTY
50897: ST_TO_ADDR
// if mode then
50898: LD_VAR 0 5
50902: IFFALSE 50971
// begin for i = 1 to result do
50904: LD_ADDR_VAR 0 7
50908: PUSH
50909: DOUBLE
50910: LD_INT 1
50912: DEC
50913: ST_TO_ADDR
50914: LD_VAR 0 6
50918: PUSH
50919: FOR_TO
50920: IFFALSE 50959
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
50922: LD_ADDR_VAR 0 9
50926: PUSH
50927: LD_VAR 0 9
50931: PPUSH
50932: LD_VAR 0 7
50936: PPUSH
50937: LD_VAR 0 6
50941: PUSH
50942: LD_VAR 0 7
50946: ARRAY
50947: PUSH
50948: LD_INT 1
50950: ARRAY
50951: PPUSH
50952: CALL_OW 1
50956: ST_TO_ADDR
50957: GO 50919
50959: POP
50960: POP
// result := tmp ;
50961: LD_ADDR_VAR 0 6
50965: PUSH
50966: LD_VAR 0 9
50970: ST_TO_ADDR
// end ; end ;
50971: LD_VAR 0 6
50975: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
50976: LD_INT 0
50978: PPUSH
50979: PPUSH
50980: PPUSH
50981: PPUSH
50982: PPUSH
50983: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
50984: LD_ADDR_VAR 0 5
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: EMPTY
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: ST_TO_ADDR
// if not x or not y then
51006: LD_VAR 0 2
51010: NOT
51011: PUSH
51012: LD_VAR 0 3
51016: NOT
51017: OR
51018: IFFALSE 51022
// exit ;
51020: GO 52668
// if not range then
51022: LD_VAR 0 4
51026: NOT
51027: IFFALSE 51037
// range := 10 ;
51029: LD_ADDR_VAR 0 4
51033: PUSH
51034: LD_INT 10
51036: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
51037: LD_ADDR_VAR 0 8
51041: PUSH
51042: LD_INT 81
51044: PUSH
51045: LD_VAR 0 1
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 92
51056: PUSH
51057: LD_VAR 0 2
51061: PUSH
51062: LD_VAR 0 3
51066: PUSH
51067: LD_VAR 0 4
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 3
51080: PUSH
51081: LD_INT 21
51083: PUSH
51084: LD_INT 3
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: LIST
51099: PPUSH
51100: CALL_OW 69
51104: ST_TO_ADDR
// if not tmp then
51105: LD_VAR 0 8
51109: NOT
51110: IFFALSE 51114
// exit ;
51112: GO 52668
// for i in tmp do
51114: LD_ADDR_VAR 0 6
51118: PUSH
51119: LD_VAR 0 8
51123: PUSH
51124: FOR_IN
51125: IFFALSE 52643
// begin points := [ 0 , 0 , 0 ] ;
51127: LD_ADDR_VAR 0 9
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: LIST
51145: ST_TO_ADDR
// bpoints := 1 ;
51146: LD_ADDR_VAR 0 10
51150: PUSH
51151: LD_INT 1
51153: ST_TO_ADDR
// case GetType ( i ) of unit_human :
51154: LD_VAR 0 6
51158: PPUSH
51159: CALL_OW 247
51163: PUSH
51164: LD_INT 1
51166: DOUBLE
51167: EQUAL
51168: IFTRUE 51172
51170: GO 51750
51172: POP
// begin if GetClass ( i ) = 1 then
51173: LD_VAR 0 6
51177: PPUSH
51178: CALL_OW 257
51182: PUSH
51183: LD_INT 1
51185: EQUAL
51186: IFFALSE 51207
// points := [ 10 , 5 , 3 ] ;
51188: LD_ADDR_VAR 0 9
51192: PUSH
51193: LD_INT 10
51195: PUSH
51196: LD_INT 5
51198: PUSH
51199: LD_INT 3
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: LIST
51206: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
51207: LD_VAR 0 6
51211: PPUSH
51212: CALL_OW 257
51216: PUSH
51217: LD_INT 2
51219: PUSH
51220: LD_INT 3
51222: PUSH
51223: LD_INT 4
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: LIST
51230: IN
51231: IFFALSE 51252
// points := [ 3 , 2 , 1 ] ;
51233: LD_ADDR_VAR 0 9
51237: PUSH
51238: LD_INT 3
51240: PUSH
51241: LD_INT 2
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: LIST
51251: ST_TO_ADDR
// if GetClass ( i ) = 5 then
51252: LD_VAR 0 6
51256: PPUSH
51257: CALL_OW 257
51261: PUSH
51262: LD_INT 5
51264: EQUAL
51265: IFFALSE 51286
// points := [ 130 , 5 , 2 ] ;
51267: LD_ADDR_VAR 0 9
51271: PUSH
51272: LD_INT 130
51274: PUSH
51275: LD_INT 5
51277: PUSH
51278: LD_INT 2
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: LIST
51285: ST_TO_ADDR
// if GetClass ( i ) = 8 then
51286: LD_VAR 0 6
51290: PPUSH
51291: CALL_OW 257
51295: PUSH
51296: LD_INT 8
51298: EQUAL
51299: IFFALSE 51320
// points := [ 35 , 35 , 30 ] ;
51301: LD_ADDR_VAR 0 9
51305: PUSH
51306: LD_INT 35
51308: PUSH
51309: LD_INT 35
51311: PUSH
51312: LD_INT 30
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: LIST
51319: ST_TO_ADDR
// if GetClass ( i ) = 9 then
51320: LD_VAR 0 6
51324: PPUSH
51325: CALL_OW 257
51329: PUSH
51330: LD_INT 9
51332: EQUAL
51333: IFFALSE 51354
// points := [ 20 , 55 , 40 ] ;
51335: LD_ADDR_VAR 0 9
51339: PUSH
51340: LD_INT 20
51342: PUSH
51343: LD_INT 55
51345: PUSH
51346: LD_INT 40
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: LIST
51353: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
51354: LD_VAR 0 6
51358: PPUSH
51359: CALL_OW 257
51363: PUSH
51364: LD_INT 12
51366: PUSH
51367: LD_INT 16
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: IN
51374: IFFALSE 51395
// points := [ 5 , 3 , 2 ] ;
51376: LD_ADDR_VAR 0 9
51380: PUSH
51381: LD_INT 5
51383: PUSH
51384: LD_INT 3
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: LIST
51394: ST_TO_ADDR
// if GetClass ( i ) = 17 then
51395: LD_VAR 0 6
51399: PPUSH
51400: CALL_OW 257
51404: PUSH
51405: LD_INT 17
51407: EQUAL
51408: IFFALSE 51429
// points := [ 100 , 50 , 75 ] ;
51410: LD_ADDR_VAR 0 9
51414: PUSH
51415: LD_INT 100
51417: PUSH
51418: LD_INT 50
51420: PUSH
51421: LD_INT 75
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: LIST
51428: ST_TO_ADDR
// if GetClass ( i ) = 15 then
51429: LD_VAR 0 6
51433: PPUSH
51434: CALL_OW 257
51438: PUSH
51439: LD_INT 15
51441: EQUAL
51442: IFFALSE 51463
// points := [ 10 , 5 , 3 ] ;
51444: LD_ADDR_VAR 0 9
51448: PUSH
51449: LD_INT 10
51451: PUSH
51452: LD_INT 5
51454: PUSH
51455: LD_INT 3
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: LIST
51462: ST_TO_ADDR
// if GetClass ( i ) = 14 then
51463: LD_VAR 0 6
51467: PPUSH
51468: CALL_OW 257
51472: PUSH
51473: LD_INT 14
51475: EQUAL
51476: IFFALSE 51497
// points := [ 10 , 0 , 0 ] ;
51478: LD_ADDR_VAR 0 9
51482: PUSH
51483: LD_INT 10
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: LIST
51496: ST_TO_ADDR
// if GetClass ( i ) = 11 then
51497: LD_VAR 0 6
51501: PPUSH
51502: CALL_OW 257
51506: PUSH
51507: LD_INT 11
51509: EQUAL
51510: IFFALSE 51531
// points := [ 30 , 10 , 5 ] ;
51512: LD_ADDR_VAR 0 9
51516: PUSH
51517: LD_INT 30
51519: PUSH
51520: LD_INT 10
51522: PUSH
51523: LD_INT 5
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: LIST
51530: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
51531: LD_VAR 0 1
51535: PPUSH
51536: LD_INT 5
51538: PPUSH
51539: CALL_OW 321
51543: PUSH
51544: LD_INT 2
51546: EQUAL
51547: IFFALSE 51564
// bpoints := bpoints * 1.8 ;
51549: LD_ADDR_VAR 0 10
51553: PUSH
51554: LD_VAR 0 10
51558: PUSH
51559: LD_REAL  1.80000000000000E+0000
51562: MUL
51563: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
51564: LD_VAR 0 6
51568: PPUSH
51569: CALL_OW 257
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: LD_INT 2
51579: PUSH
51580: LD_INT 3
51582: PUSH
51583: LD_INT 4
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: IN
51592: PUSH
51593: LD_VAR 0 1
51597: PPUSH
51598: LD_INT 51
51600: PPUSH
51601: CALL_OW 321
51605: PUSH
51606: LD_INT 2
51608: EQUAL
51609: AND
51610: IFFALSE 51627
// bpoints := bpoints * 1.2 ;
51612: LD_ADDR_VAR 0 10
51616: PUSH
51617: LD_VAR 0 10
51621: PUSH
51622: LD_REAL  1.20000000000000E+0000
51625: MUL
51626: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
51627: LD_VAR 0 6
51631: PPUSH
51632: CALL_OW 257
51636: PUSH
51637: LD_INT 5
51639: PUSH
51640: LD_INT 7
51642: PUSH
51643: LD_INT 9
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: LIST
51650: IN
51651: PUSH
51652: LD_VAR 0 1
51656: PPUSH
51657: LD_INT 52
51659: PPUSH
51660: CALL_OW 321
51664: PUSH
51665: LD_INT 2
51667: EQUAL
51668: AND
51669: IFFALSE 51686
// bpoints := bpoints * 1.5 ;
51671: LD_ADDR_VAR 0 10
51675: PUSH
51676: LD_VAR 0 10
51680: PUSH
51681: LD_REAL  1.50000000000000E+0000
51684: MUL
51685: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
51686: LD_VAR 0 1
51690: PPUSH
51691: LD_INT 66
51693: PPUSH
51694: CALL_OW 321
51698: PUSH
51699: LD_INT 2
51701: EQUAL
51702: IFFALSE 51719
// bpoints := bpoints * 1.1 ;
51704: LD_ADDR_VAR 0 10
51708: PUSH
51709: LD_VAR 0 10
51713: PUSH
51714: LD_REAL  1.10000000000000E+0000
51717: MUL
51718: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
51719: LD_ADDR_VAR 0 10
51723: PUSH
51724: LD_VAR 0 10
51728: PUSH
51729: LD_VAR 0 6
51733: PPUSH
51734: LD_INT 1
51736: PPUSH
51737: CALL_OW 259
51741: PUSH
51742: LD_REAL  1.15000000000000E+0000
51745: MUL
51746: MUL
51747: ST_TO_ADDR
// end ; unit_vehicle :
51748: GO 52572
51750: LD_INT 2
51752: DOUBLE
51753: EQUAL
51754: IFTRUE 51758
51756: GO 52560
51758: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
51759: LD_VAR 0 6
51763: PPUSH
51764: CALL_OW 264
51768: PUSH
51769: LD_INT 2
51771: PUSH
51772: LD_INT 42
51774: PUSH
51775: LD_INT 24
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: LIST
51782: IN
51783: IFFALSE 51804
// points := [ 25 , 5 , 3 ] ;
51785: LD_ADDR_VAR 0 9
51789: PUSH
51790: LD_INT 25
51792: PUSH
51793: LD_INT 5
51795: PUSH
51796: LD_INT 3
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: LIST
51803: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
51804: LD_VAR 0 6
51808: PPUSH
51809: CALL_OW 264
51813: PUSH
51814: LD_INT 4
51816: PUSH
51817: LD_INT 43
51819: PUSH
51820: LD_INT 25
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: LIST
51827: IN
51828: IFFALSE 51849
// points := [ 40 , 15 , 5 ] ;
51830: LD_ADDR_VAR 0 9
51834: PUSH
51835: LD_INT 40
51837: PUSH
51838: LD_INT 15
51840: PUSH
51841: LD_INT 5
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: LIST
51848: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
51849: LD_VAR 0 6
51853: PPUSH
51854: CALL_OW 264
51858: PUSH
51859: LD_INT 3
51861: PUSH
51862: LD_INT 23
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: IN
51869: IFFALSE 51890
// points := [ 7 , 25 , 8 ] ;
51871: LD_ADDR_VAR 0 9
51875: PUSH
51876: LD_INT 7
51878: PUSH
51879: LD_INT 25
51881: PUSH
51882: LD_INT 8
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: LIST
51889: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
51890: LD_VAR 0 6
51894: PPUSH
51895: CALL_OW 264
51899: PUSH
51900: LD_INT 5
51902: PUSH
51903: LD_INT 27
51905: PUSH
51906: LD_INT 44
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: LIST
51913: IN
51914: IFFALSE 51935
// points := [ 14 , 50 , 16 ] ;
51916: LD_ADDR_VAR 0 9
51920: PUSH
51921: LD_INT 14
51923: PUSH
51924: LD_INT 50
51926: PUSH
51927: LD_INT 16
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: LIST
51934: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
51935: LD_VAR 0 6
51939: PPUSH
51940: CALL_OW 264
51944: PUSH
51945: LD_INT 6
51947: PUSH
51948: LD_INT 46
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: IN
51955: IFFALSE 51976
// points := [ 32 , 120 , 70 ] ;
51957: LD_ADDR_VAR 0 9
51961: PUSH
51962: LD_INT 32
51964: PUSH
51965: LD_INT 120
51967: PUSH
51968: LD_INT 70
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: LIST
51975: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
51976: LD_VAR 0 6
51980: PPUSH
51981: CALL_OW 264
51985: PUSH
51986: LD_INT 7
51988: PUSH
51989: LD_INT 28
51991: PUSH
51992: LD_INT 45
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: LIST
51999: IN
52000: IFFALSE 52021
// points := [ 35 , 20 , 45 ] ;
52002: LD_ADDR_VAR 0 9
52006: PUSH
52007: LD_INT 35
52009: PUSH
52010: LD_INT 20
52012: PUSH
52013: LD_INT 45
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: LIST
52020: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
52021: LD_VAR 0 6
52025: PPUSH
52026: CALL_OW 264
52030: PUSH
52031: LD_INT 47
52033: PUSH
52034: EMPTY
52035: LIST
52036: IN
52037: IFFALSE 52058
// points := [ 67 , 45 , 75 ] ;
52039: LD_ADDR_VAR 0 9
52043: PUSH
52044: LD_INT 67
52046: PUSH
52047: LD_INT 45
52049: PUSH
52050: LD_INT 75
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: LIST
52057: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
52058: LD_VAR 0 6
52062: PPUSH
52063: CALL_OW 264
52067: PUSH
52068: LD_INT 26
52070: PUSH
52071: EMPTY
52072: LIST
52073: IN
52074: IFFALSE 52095
// points := [ 120 , 30 , 80 ] ;
52076: LD_ADDR_VAR 0 9
52080: PUSH
52081: LD_INT 120
52083: PUSH
52084: LD_INT 30
52086: PUSH
52087: LD_INT 80
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: LIST
52094: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
52095: LD_VAR 0 6
52099: PPUSH
52100: CALL_OW 264
52104: PUSH
52105: LD_INT 22
52107: PUSH
52108: EMPTY
52109: LIST
52110: IN
52111: IFFALSE 52132
// points := [ 40 , 1 , 1 ] ;
52113: LD_ADDR_VAR 0 9
52117: PUSH
52118: LD_INT 40
52120: PUSH
52121: LD_INT 1
52123: PUSH
52124: LD_INT 1
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: LIST
52131: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
52132: LD_VAR 0 6
52136: PPUSH
52137: CALL_OW 264
52141: PUSH
52142: LD_INT 29
52144: PUSH
52145: EMPTY
52146: LIST
52147: IN
52148: IFFALSE 52169
// points := [ 70 , 200 , 400 ] ;
52150: LD_ADDR_VAR 0 9
52154: PUSH
52155: LD_INT 70
52157: PUSH
52158: LD_INT 200
52160: PUSH
52161: LD_INT 400
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: LIST
52168: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
52169: LD_VAR 0 6
52173: PPUSH
52174: CALL_OW 264
52178: PUSH
52179: LD_INT 14
52181: PUSH
52182: LD_INT 53
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: IN
52189: IFFALSE 52210
// points := [ 40 , 10 , 20 ] ;
52191: LD_ADDR_VAR 0 9
52195: PUSH
52196: LD_INT 40
52198: PUSH
52199: LD_INT 10
52201: PUSH
52202: LD_INT 20
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: LIST
52209: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
52210: LD_VAR 0 6
52214: PPUSH
52215: CALL_OW 264
52219: PUSH
52220: LD_INT 9
52222: PUSH
52223: EMPTY
52224: LIST
52225: IN
52226: IFFALSE 52247
// points := [ 5 , 70 , 20 ] ;
52228: LD_ADDR_VAR 0 9
52232: PUSH
52233: LD_INT 5
52235: PUSH
52236: LD_INT 70
52238: PUSH
52239: LD_INT 20
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: LIST
52246: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
52247: LD_VAR 0 6
52251: PPUSH
52252: CALL_OW 264
52256: PUSH
52257: LD_INT 10
52259: PUSH
52260: EMPTY
52261: LIST
52262: IN
52263: IFFALSE 52284
// points := [ 35 , 110 , 70 ] ;
52265: LD_ADDR_VAR 0 9
52269: PUSH
52270: LD_INT 35
52272: PUSH
52273: LD_INT 110
52275: PUSH
52276: LD_INT 70
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: LIST
52283: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
52284: LD_VAR 0 6
52288: PPUSH
52289: CALL_OW 265
52293: PUSH
52294: LD_INT 25
52296: EQUAL
52297: IFFALSE 52318
// points := [ 80 , 65 , 100 ] ;
52299: LD_ADDR_VAR 0 9
52303: PUSH
52304: LD_INT 80
52306: PUSH
52307: LD_INT 65
52309: PUSH
52310: LD_INT 100
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: LIST
52317: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
52318: LD_VAR 0 6
52322: PPUSH
52323: CALL_OW 263
52327: PUSH
52328: LD_INT 1
52330: EQUAL
52331: IFFALSE 52366
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
52333: LD_ADDR_VAR 0 10
52337: PUSH
52338: LD_VAR 0 10
52342: PUSH
52343: LD_VAR 0 6
52347: PPUSH
52348: CALL_OW 311
52352: PPUSH
52353: LD_INT 3
52355: PPUSH
52356: CALL_OW 259
52360: PUSH
52361: LD_INT 4
52363: MUL
52364: MUL
52365: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
52366: LD_VAR 0 6
52370: PPUSH
52371: CALL_OW 263
52375: PUSH
52376: LD_INT 2
52378: EQUAL
52379: IFFALSE 52430
// begin j := IsControledBy ( i ) ;
52381: LD_ADDR_VAR 0 7
52385: PUSH
52386: LD_VAR 0 6
52390: PPUSH
52391: CALL_OW 312
52395: ST_TO_ADDR
// if j then
52396: LD_VAR 0 7
52400: IFFALSE 52430
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
52402: LD_ADDR_VAR 0 10
52406: PUSH
52407: LD_VAR 0 10
52411: PUSH
52412: LD_VAR 0 7
52416: PPUSH
52417: LD_INT 3
52419: PPUSH
52420: CALL_OW 259
52424: PUSH
52425: LD_INT 3
52427: MUL
52428: MUL
52429: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
52430: LD_VAR 0 6
52434: PPUSH
52435: CALL_OW 264
52439: PUSH
52440: LD_INT 5
52442: PUSH
52443: LD_INT 6
52445: PUSH
52446: LD_INT 46
52448: PUSH
52449: LD_INT 44
52451: PUSH
52452: LD_INT 47
52454: PUSH
52455: LD_INT 45
52457: PUSH
52458: LD_INT 28
52460: PUSH
52461: LD_INT 7
52463: PUSH
52464: LD_INT 27
52466: PUSH
52467: LD_INT 29
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: IN
52482: PUSH
52483: LD_VAR 0 1
52487: PPUSH
52488: LD_INT 52
52490: PPUSH
52491: CALL_OW 321
52495: PUSH
52496: LD_INT 2
52498: EQUAL
52499: AND
52500: IFFALSE 52517
// bpoints := bpoints * 1.2 ;
52502: LD_ADDR_VAR 0 10
52506: PUSH
52507: LD_VAR 0 10
52511: PUSH
52512: LD_REAL  1.20000000000000E+0000
52515: MUL
52516: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
52517: LD_VAR 0 6
52521: PPUSH
52522: CALL_OW 264
52526: PUSH
52527: LD_INT 6
52529: PUSH
52530: LD_INT 46
52532: PUSH
52533: LD_INT 47
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: LIST
52540: IN
52541: IFFALSE 52558
// bpoints := bpoints * 1.2 ;
52543: LD_ADDR_VAR 0 10
52547: PUSH
52548: LD_VAR 0 10
52552: PUSH
52553: LD_REAL  1.20000000000000E+0000
52556: MUL
52557: ST_TO_ADDR
// end ; unit_building :
52558: GO 52572
52560: LD_INT 3
52562: DOUBLE
52563: EQUAL
52564: IFTRUE 52568
52566: GO 52571
52568: POP
// ; end ;
52569: GO 52572
52571: POP
// for j = 1 to 3 do
52572: LD_ADDR_VAR 0 7
52576: PUSH
52577: DOUBLE
52578: LD_INT 1
52580: DEC
52581: ST_TO_ADDR
52582: LD_INT 3
52584: PUSH
52585: FOR_TO
52586: IFFALSE 52639
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
52588: LD_ADDR_VAR 0 5
52592: PUSH
52593: LD_VAR 0 5
52597: PPUSH
52598: LD_VAR 0 7
52602: PPUSH
52603: LD_VAR 0 5
52607: PUSH
52608: LD_VAR 0 7
52612: ARRAY
52613: PUSH
52614: LD_VAR 0 9
52618: PUSH
52619: LD_VAR 0 7
52623: ARRAY
52624: PUSH
52625: LD_VAR 0 10
52629: MUL
52630: PLUS
52631: PPUSH
52632: CALL_OW 1
52636: ST_TO_ADDR
52637: GO 52585
52639: POP
52640: POP
// end ;
52641: GO 51124
52643: POP
52644: POP
// result := Replace ( result , 4 , tmp ) ;
52645: LD_ADDR_VAR 0 5
52649: PUSH
52650: LD_VAR 0 5
52654: PPUSH
52655: LD_INT 4
52657: PPUSH
52658: LD_VAR 0 8
52662: PPUSH
52663: CALL_OW 1
52667: ST_TO_ADDR
// end ;
52668: LD_VAR 0 5
52672: RET
// export function DangerAtRange ( unit , range ) ; begin
52673: LD_INT 0
52675: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
52676: LD_ADDR_VAR 0 3
52680: PUSH
52681: LD_VAR 0 1
52685: PPUSH
52686: CALL_OW 255
52690: PPUSH
52691: LD_VAR 0 1
52695: PPUSH
52696: CALL_OW 250
52700: PPUSH
52701: LD_VAR 0 1
52705: PPUSH
52706: CALL_OW 251
52710: PPUSH
52711: LD_VAR 0 2
52715: PPUSH
52716: CALL 50976 0 4
52720: ST_TO_ADDR
// end ;
52721: LD_VAR 0 3
52725: RET
// export function DangerInArea ( side , area ) ; begin
52726: LD_INT 0
52728: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
52729: LD_ADDR_VAR 0 3
52733: PUSH
52734: LD_VAR 0 2
52738: PPUSH
52739: LD_INT 81
52741: PUSH
52742: LD_VAR 0 1
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PPUSH
52751: CALL_OW 70
52755: ST_TO_ADDR
// end ;
52756: LD_VAR 0 3
52760: RET
// export function IsExtension ( b ) ; begin
52761: LD_INT 0
52763: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
52764: LD_ADDR_VAR 0 2
52768: PUSH
52769: LD_VAR 0 1
52773: PUSH
52774: LD_INT 23
52776: PUSH
52777: LD_INT 20
52779: PUSH
52780: LD_INT 22
52782: PUSH
52783: LD_INT 17
52785: PUSH
52786: LD_INT 24
52788: PUSH
52789: LD_INT 21
52791: PUSH
52792: LD_INT 19
52794: PUSH
52795: LD_INT 16
52797: PUSH
52798: LD_INT 25
52800: PUSH
52801: LD_INT 18
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: IN
52816: ST_TO_ADDR
// end ;
52817: LD_VAR 0 2
52821: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
52822: LD_INT 0
52824: PPUSH
52825: PPUSH
52826: PPUSH
// result := [ ] ;
52827: LD_ADDR_VAR 0 3
52831: PUSH
52832: EMPTY
52833: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
52834: LD_ADDR_VAR 0 4
52838: PUSH
52839: LD_VAR 0 2
52843: PPUSH
52844: LD_INT 21
52846: PUSH
52847: LD_INT 3
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PPUSH
52854: CALL_OW 70
52858: ST_TO_ADDR
// if not tmp then
52859: LD_VAR 0 4
52863: NOT
52864: IFFALSE 52868
// exit ;
52866: GO 52926
// for i in tmp do
52868: LD_ADDR_VAR 0 5
52872: PUSH
52873: LD_VAR 0 4
52877: PUSH
52878: FOR_IN
52879: IFFALSE 52914
// if GetBase ( i ) <> base then
52881: LD_VAR 0 5
52885: PPUSH
52886: CALL_OW 274
52890: PUSH
52891: LD_VAR 0 1
52895: NONEQUAL
52896: IFFALSE 52912
// ComLinkToBase ( base , i ) ;
52898: LD_VAR 0 1
52902: PPUSH
52903: LD_VAR 0 5
52907: PPUSH
52908: CALL_OW 169
52912: GO 52878
52914: POP
52915: POP
// result := tmp ;
52916: LD_ADDR_VAR 0 3
52920: PUSH
52921: LD_VAR 0 4
52925: ST_TO_ADDR
// end ;
52926: LD_VAR 0 3
52930: RET
// export function ComComplete ( unit , b ) ; var i ; begin
52931: LD_INT 0
52933: PPUSH
52934: PPUSH
// if BuildingStatus ( b ) = bs_build then
52935: LD_VAR 0 2
52939: PPUSH
52940: CALL_OW 461
52944: PUSH
52945: LD_INT 1
52947: EQUAL
52948: IFFALSE 53008
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
52950: LD_VAR 0 1
52954: PPUSH
52955: LD_STRING h
52957: PUSH
52958: LD_VAR 0 2
52962: PPUSH
52963: CALL_OW 250
52967: PUSH
52968: LD_VAR 0 2
52972: PPUSH
52973: CALL_OW 251
52977: PUSH
52978: LD_VAR 0 2
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: PUSH
53001: EMPTY
53002: LIST
53003: PPUSH
53004: CALL_OW 446
// end ;
53008: LD_VAR 0 3
53012: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
53013: LD_INT 0
53015: PPUSH
53016: PPUSH
53017: PPUSH
53018: PPUSH
53019: PPUSH
53020: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
53021: LD_VAR 0 1
53025: NOT
53026: PUSH
53027: LD_VAR 0 1
53031: PPUSH
53032: CALL_OW 263
53036: PUSH
53037: LD_INT 2
53039: EQUAL
53040: NOT
53041: OR
53042: IFFALSE 53046
// exit ;
53044: GO 53362
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
53046: LD_ADDR_VAR 0 6
53050: PUSH
53051: LD_INT 22
53053: PUSH
53054: LD_VAR 0 1
53058: PPUSH
53059: CALL_OW 255
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 2
53070: PUSH
53071: LD_INT 30
53073: PUSH
53074: LD_INT 36
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 34
53083: PUSH
53084: LD_INT 31
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: LIST
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PPUSH
53100: CALL_OW 69
53104: ST_TO_ADDR
// if not tmp then
53105: LD_VAR 0 6
53109: NOT
53110: IFFALSE 53114
// exit ;
53112: GO 53362
// result := [ ] ;
53114: LD_ADDR_VAR 0 2
53118: PUSH
53119: EMPTY
53120: ST_TO_ADDR
// for i in tmp do
53121: LD_ADDR_VAR 0 3
53125: PUSH
53126: LD_VAR 0 6
53130: PUSH
53131: FOR_IN
53132: IFFALSE 53203
// begin t := UnitsInside ( i ) ;
53134: LD_ADDR_VAR 0 4
53138: PUSH
53139: LD_VAR 0 3
53143: PPUSH
53144: CALL_OW 313
53148: ST_TO_ADDR
// if t then
53149: LD_VAR 0 4
53153: IFFALSE 53201
// for j in t do
53155: LD_ADDR_VAR 0 7
53159: PUSH
53160: LD_VAR 0 4
53164: PUSH
53165: FOR_IN
53166: IFFALSE 53199
// result := Insert ( result , result + 1 , j ) ;
53168: LD_ADDR_VAR 0 2
53172: PUSH
53173: LD_VAR 0 2
53177: PPUSH
53178: LD_VAR 0 2
53182: PUSH
53183: LD_INT 1
53185: PLUS
53186: PPUSH
53187: LD_VAR 0 7
53191: PPUSH
53192: CALL_OW 2
53196: ST_TO_ADDR
53197: GO 53165
53199: POP
53200: POP
// end ;
53201: GO 53131
53203: POP
53204: POP
// if not result then
53205: LD_VAR 0 2
53209: NOT
53210: IFFALSE 53214
// exit ;
53212: GO 53362
// mech := result [ 1 ] ;
53214: LD_ADDR_VAR 0 5
53218: PUSH
53219: LD_VAR 0 2
53223: PUSH
53224: LD_INT 1
53226: ARRAY
53227: ST_TO_ADDR
// if result > 1 then
53228: LD_VAR 0 2
53232: PUSH
53233: LD_INT 1
53235: GREATER
53236: IFFALSE 53348
// for i = 2 to result do
53238: LD_ADDR_VAR 0 3
53242: PUSH
53243: DOUBLE
53244: LD_INT 2
53246: DEC
53247: ST_TO_ADDR
53248: LD_VAR 0 2
53252: PUSH
53253: FOR_TO
53254: IFFALSE 53346
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
53256: LD_ADDR_VAR 0 4
53260: PUSH
53261: LD_VAR 0 2
53265: PUSH
53266: LD_VAR 0 3
53270: ARRAY
53271: PPUSH
53272: LD_INT 3
53274: PPUSH
53275: CALL_OW 259
53279: PUSH
53280: LD_VAR 0 2
53284: PUSH
53285: LD_VAR 0 3
53289: ARRAY
53290: PPUSH
53291: CALL_OW 432
53295: MINUS
53296: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
53297: LD_VAR 0 4
53301: PUSH
53302: LD_VAR 0 5
53306: PPUSH
53307: LD_INT 3
53309: PPUSH
53310: CALL_OW 259
53314: PUSH
53315: LD_VAR 0 5
53319: PPUSH
53320: CALL_OW 432
53324: MINUS
53325: GREATEREQUAL
53326: IFFALSE 53344
// mech := result [ i ] ;
53328: LD_ADDR_VAR 0 5
53332: PUSH
53333: LD_VAR 0 2
53337: PUSH
53338: LD_VAR 0 3
53342: ARRAY
53343: ST_TO_ADDR
// end ;
53344: GO 53253
53346: POP
53347: POP
// ComLinkTo ( vehicle , mech ) ;
53348: LD_VAR 0 1
53352: PPUSH
53353: LD_VAR 0 5
53357: PPUSH
53358: CALL_OW 135
// end ;
53362: LD_VAR 0 2
53366: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
53367: LD_INT 0
53369: PPUSH
53370: PPUSH
53371: PPUSH
53372: PPUSH
53373: PPUSH
53374: PPUSH
53375: PPUSH
53376: PPUSH
53377: PPUSH
53378: PPUSH
53379: PPUSH
53380: PPUSH
53381: PPUSH
// result := [ ] ;
53382: LD_ADDR_VAR 0 7
53386: PUSH
53387: EMPTY
53388: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
53389: LD_VAR 0 1
53393: PPUSH
53394: CALL_OW 266
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: IN
53409: NOT
53410: IFFALSE 53414
// exit ;
53412: GO 55045
// if name then
53414: LD_VAR 0 3
53418: IFFALSE 53434
// SetBName ( base_dep , name ) ;
53420: LD_VAR 0 1
53424: PPUSH
53425: LD_VAR 0 3
53429: PPUSH
53430: CALL_OW 500
// base := GetBase ( base_dep ) ;
53434: LD_ADDR_VAR 0 15
53438: PUSH
53439: LD_VAR 0 1
53443: PPUSH
53444: CALL_OW 274
53448: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
53449: LD_ADDR_VAR 0 16
53453: PUSH
53454: LD_VAR 0 1
53458: PPUSH
53459: CALL_OW 255
53463: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
53464: LD_ADDR_VAR 0 17
53468: PUSH
53469: LD_VAR 0 1
53473: PPUSH
53474: CALL_OW 248
53478: ST_TO_ADDR
// if sources then
53479: LD_VAR 0 5
53483: IFFALSE 53530
// for i = 1 to 3 do
53485: LD_ADDR_VAR 0 8
53489: PUSH
53490: DOUBLE
53491: LD_INT 1
53493: DEC
53494: ST_TO_ADDR
53495: LD_INT 3
53497: PUSH
53498: FOR_TO
53499: IFFALSE 53528
// AddResourceType ( base , i , sources [ i ] ) ;
53501: LD_VAR 0 15
53505: PPUSH
53506: LD_VAR 0 8
53510: PPUSH
53511: LD_VAR 0 5
53515: PUSH
53516: LD_VAR 0 8
53520: ARRAY
53521: PPUSH
53522: CALL_OW 276
53526: GO 53498
53528: POP
53529: POP
// buildings := GetBaseBuildings ( base , area ) ;
53530: LD_ADDR_VAR 0 18
53534: PUSH
53535: LD_VAR 0 15
53539: PPUSH
53540: LD_VAR 0 2
53544: PPUSH
53545: CALL 52822 0 2
53549: ST_TO_ADDR
// InitHc ;
53550: CALL_OW 19
// InitUc ;
53554: CALL_OW 18
// uc_side := side ;
53558: LD_ADDR_OWVAR 20
53562: PUSH
53563: LD_VAR 0 16
53567: ST_TO_ADDR
// uc_nation := nation ;
53568: LD_ADDR_OWVAR 21
53572: PUSH
53573: LD_VAR 0 17
53577: ST_TO_ADDR
// if buildings then
53578: LD_VAR 0 18
53582: IFFALSE 54904
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
53584: LD_ADDR_VAR 0 19
53588: PUSH
53589: LD_VAR 0 18
53593: PPUSH
53594: LD_INT 2
53596: PUSH
53597: LD_INT 30
53599: PUSH
53600: LD_INT 29
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 30
53609: PUSH
53610: LD_INT 30
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: LIST
53621: PPUSH
53622: CALL_OW 72
53626: ST_TO_ADDR
// if tmp then
53627: LD_VAR 0 19
53631: IFFALSE 53679
// for i in tmp do
53633: LD_ADDR_VAR 0 8
53637: PUSH
53638: LD_VAR 0 19
53642: PUSH
53643: FOR_IN
53644: IFFALSE 53677
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
53646: LD_VAR 0 8
53650: PPUSH
53651: CALL_OW 250
53655: PPUSH
53656: LD_VAR 0 8
53660: PPUSH
53661: CALL_OW 251
53665: PPUSH
53666: LD_VAR 0 16
53670: PPUSH
53671: CALL_OW 441
53675: GO 53643
53677: POP
53678: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
53679: LD_VAR 0 18
53683: PPUSH
53684: LD_INT 2
53686: PUSH
53687: LD_INT 30
53689: PUSH
53690: LD_INT 32
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 30
53699: PUSH
53700: LD_INT 33
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: LIST
53711: PPUSH
53712: CALL_OW 72
53716: IFFALSE 53804
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
53718: LD_ADDR_VAR 0 8
53722: PUSH
53723: LD_VAR 0 18
53727: PPUSH
53728: LD_INT 2
53730: PUSH
53731: LD_INT 30
53733: PUSH
53734: LD_INT 32
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 30
53743: PUSH
53744: LD_INT 33
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: LIST
53755: PPUSH
53756: CALL_OW 72
53760: PUSH
53761: FOR_IN
53762: IFFALSE 53802
// begin if not GetBWeapon ( i ) then
53764: LD_VAR 0 8
53768: PPUSH
53769: CALL_OW 269
53773: NOT
53774: IFFALSE 53800
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
53776: LD_VAR 0 8
53780: PPUSH
53781: LD_VAR 0 8
53785: PPUSH
53786: LD_VAR 0 2
53790: PPUSH
53791: CALL 55050 0 2
53795: PPUSH
53796: CALL_OW 431
// end ;
53800: GO 53761
53802: POP
53803: POP
// end ; for i = 1 to personel do
53804: LD_ADDR_VAR 0 8
53808: PUSH
53809: DOUBLE
53810: LD_INT 1
53812: DEC
53813: ST_TO_ADDR
53814: LD_VAR 0 6
53818: PUSH
53819: FOR_TO
53820: IFFALSE 54884
// begin if i > 4 then
53822: LD_VAR 0 8
53826: PUSH
53827: LD_INT 4
53829: GREATER
53830: IFFALSE 53834
// break ;
53832: GO 54884
// case i of 1 :
53834: LD_VAR 0 8
53838: PUSH
53839: LD_INT 1
53841: DOUBLE
53842: EQUAL
53843: IFTRUE 53847
53845: GO 53927
53847: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
53848: LD_ADDR_VAR 0 12
53852: PUSH
53853: LD_VAR 0 18
53857: PPUSH
53858: LD_INT 22
53860: PUSH
53861: LD_VAR 0 16
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 58
53872: PUSH
53873: EMPTY
53874: LIST
53875: PUSH
53876: LD_INT 2
53878: PUSH
53879: LD_INT 30
53881: PUSH
53882: LD_INT 32
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 30
53891: PUSH
53892: LD_INT 4
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 30
53901: PUSH
53902: LD_INT 5
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: LIST
53919: PPUSH
53920: CALL_OW 72
53924: ST_TO_ADDR
53925: GO 54149
53927: LD_INT 2
53929: DOUBLE
53930: EQUAL
53931: IFTRUE 53935
53933: GO 53997
53935: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
53936: LD_ADDR_VAR 0 12
53940: PUSH
53941: LD_VAR 0 18
53945: PPUSH
53946: LD_INT 22
53948: PUSH
53949: LD_VAR 0 16
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 2
53960: PUSH
53961: LD_INT 30
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 30
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: LIST
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PPUSH
53990: CALL_OW 72
53994: ST_TO_ADDR
53995: GO 54149
53997: LD_INT 3
53999: DOUBLE
54000: EQUAL
54001: IFTRUE 54005
54003: GO 54067
54005: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
54006: LD_ADDR_VAR 0 12
54010: PUSH
54011: LD_VAR 0 18
54015: PPUSH
54016: LD_INT 22
54018: PUSH
54019: LD_VAR 0 16
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 2
54030: PUSH
54031: LD_INT 30
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 30
54043: PUSH
54044: LD_INT 3
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: LIST
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PPUSH
54060: CALL_OW 72
54064: ST_TO_ADDR
54065: GO 54149
54067: LD_INT 4
54069: DOUBLE
54070: EQUAL
54071: IFTRUE 54075
54073: GO 54148
54075: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
54076: LD_ADDR_VAR 0 12
54080: PUSH
54081: LD_VAR 0 18
54085: PPUSH
54086: LD_INT 22
54088: PUSH
54089: LD_VAR 0 16
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 2
54100: PUSH
54101: LD_INT 30
54103: PUSH
54104: LD_INT 6
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 30
54113: PUSH
54114: LD_INT 7
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 30
54123: PUSH
54124: LD_INT 8
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PPUSH
54141: CALL_OW 72
54145: ST_TO_ADDR
54146: GO 54149
54148: POP
// if i = 1 then
54149: LD_VAR 0 8
54153: PUSH
54154: LD_INT 1
54156: EQUAL
54157: IFFALSE 54268
// begin tmp := [ ] ;
54159: LD_ADDR_VAR 0 19
54163: PUSH
54164: EMPTY
54165: ST_TO_ADDR
// for j in f do
54166: LD_ADDR_VAR 0 9
54170: PUSH
54171: LD_VAR 0 12
54175: PUSH
54176: FOR_IN
54177: IFFALSE 54250
// if GetBType ( j ) = b_bunker then
54179: LD_VAR 0 9
54183: PPUSH
54184: CALL_OW 266
54188: PUSH
54189: LD_INT 32
54191: EQUAL
54192: IFFALSE 54219
// tmp := Insert ( tmp , 1 , j ) else
54194: LD_ADDR_VAR 0 19
54198: PUSH
54199: LD_VAR 0 19
54203: PPUSH
54204: LD_INT 1
54206: PPUSH
54207: LD_VAR 0 9
54211: PPUSH
54212: CALL_OW 2
54216: ST_TO_ADDR
54217: GO 54248
// tmp := Insert ( tmp , tmp + 1 , j ) ;
54219: LD_ADDR_VAR 0 19
54223: PUSH
54224: LD_VAR 0 19
54228: PPUSH
54229: LD_VAR 0 19
54233: PUSH
54234: LD_INT 1
54236: PLUS
54237: PPUSH
54238: LD_VAR 0 9
54242: PPUSH
54243: CALL_OW 2
54247: ST_TO_ADDR
54248: GO 54176
54250: POP
54251: POP
// if tmp then
54252: LD_VAR 0 19
54256: IFFALSE 54268
// f := tmp ;
54258: LD_ADDR_VAR 0 12
54262: PUSH
54263: LD_VAR 0 19
54267: ST_TO_ADDR
// end ; x := personel [ i ] ;
54268: LD_ADDR_VAR 0 13
54272: PUSH
54273: LD_VAR 0 6
54277: PUSH
54278: LD_VAR 0 8
54282: ARRAY
54283: ST_TO_ADDR
// if x = - 1 then
54284: LD_VAR 0 13
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: EQUAL
54293: IFFALSE 54502
// begin for j in f do
54295: LD_ADDR_VAR 0 9
54299: PUSH
54300: LD_VAR 0 12
54304: PUSH
54305: FOR_IN
54306: IFFALSE 54498
// repeat InitHc ;
54308: CALL_OW 19
// if GetBType ( j ) = b_barracks then
54312: LD_VAR 0 9
54316: PPUSH
54317: CALL_OW 266
54321: PUSH
54322: LD_INT 5
54324: EQUAL
54325: IFFALSE 54395
// begin if UnitsInside ( j ) < 3 then
54327: LD_VAR 0 9
54331: PPUSH
54332: CALL_OW 313
54336: PUSH
54337: LD_INT 3
54339: LESS
54340: IFFALSE 54376
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
54342: LD_INT 0
54344: PPUSH
54345: LD_INT 5
54347: PUSH
54348: LD_INT 8
54350: PUSH
54351: LD_INT 9
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: LIST
54358: PUSH
54359: LD_VAR 0 17
54363: ARRAY
54364: PPUSH
54365: LD_VAR 0 4
54369: PPUSH
54370: CALL_OW 380
54374: GO 54393
// PrepareHuman ( false , i , skill ) ;
54376: LD_INT 0
54378: PPUSH
54379: LD_VAR 0 8
54383: PPUSH
54384: LD_VAR 0 4
54388: PPUSH
54389: CALL_OW 380
// end else
54393: GO 54412
// PrepareHuman ( false , i , skill ) ;
54395: LD_INT 0
54397: PPUSH
54398: LD_VAR 0 8
54402: PPUSH
54403: LD_VAR 0 4
54407: PPUSH
54408: CALL_OW 380
// un := CreateHuman ;
54412: LD_ADDR_VAR 0 14
54416: PUSH
54417: CALL_OW 44
54421: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
54422: LD_ADDR_VAR 0 7
54426: PUSH
54427: LD_VAR 0 7
54431: PPUSH
54432: LD_INT 1
54434: PPUSH
54435: LD_VAR 0 14
54439: PPUSH
54440: CALL_OW 2
54444: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
54445: LD_VAR 0 14
54449: PPUSH
54450: LD_VAR 0 9
54454: PPUSH
54455: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
54459: LD_VAR 0 9
54463: PPUSH
54464: CALL_OW 313
54468: PUSH
54469: LD_INT 6
54471: EQUAL
54472: PUSH
54473: LD_VAR 0 9
54477: PPUSH
54478: CALL_OW 266
54482: PUSH
54483: LD_INT 32
54485: PUSH
54486: LD_INT 31
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: IN
54493: OR
54494: IFFALSE 54308
54496: GO 54305
54498: POP
54499: POP
// end else
54500: GO 54882
// for j = 1 to x do
54502: LD_ADDR_VAR 0 9
54506: PUSH
54507: DOUBLE
54508: LD_INT 1
54510: DEC
54511: ST_TO_ADDR
54512: LD_VAR 0 13
54516: PUSH
54517: FOR_TO
54518: IFFALSE 54880
// begin InitHc ;
54520: CALL_OW 19
// if not f then
54524: LD_VAR 0 12
54528: NOT
54529: IFFALSE 54618
// begin PrepareHuman ( false , i , skill ) ;
54531: LD_INT 0
54533: PPUSH
54534: LD_VAR 0 8
54538: PPUSH
54539: LD_VAR 0 4
54543: PPUSH
54544: CALL_OW 380
// un := CreateHuman ;
54548: LD_ADDR_VAR 0 14
54552: PUSH
54553: CALL_OW 44
54557: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
54558: LD_ADDR_VAR 0 7
54562: PUSH
54563: LD_VAR 0 7
54567: PPUSH
54568: LD_INT 1
54570: PPUSH
54571: LD_VAR 0 14
54575: PPUSH
54576: CALL_OW 2
54580: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
54581: LD_VAR 0 14
54585: PPUSH
54586: LD_VAR 0 1
54590: PPUSH
54591: CALL_OW 250
54595: PPUSH
54596: LD_VAR 0 1
54600: PPUSH
54601: CALL_OW 251
54605: PPUSH
54606: LD_INT 10
54608: PPUSH
54609: LD_INT 0
54611: PPUSH
54612: CALL_OW 50
// continue ;
54616: GO 54517
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
54618: LD_VAR 0 12
54622: PUSH
54623: LD_INT 1
54625: ARRAY
54626: PPUSH
54627: CALL_OW 313
54631: PUSH
54632: LD_VAR 0 12
54636: PUSH
54637: LD_INT 1
54639: ARRAY
54640: PPUSH
54641: CALL_OW 266
54645: PUSH
54646: LD_INT 32
54648: PUSH
54649: LD_INT 31
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: IN
54656: AND
54657: PUSH
54658: LD_VAR 0 12
54662: PUSH
54663: LD_INT 1
54665: ARRAY
54666: PPUSH
54667: CALL_OW 313
54671: PUSH
54672: LD_INT 6
54674: EQUAL
54675: OR
54676: IFFALSE 54696
// f := Delete ( f , 1 ) ;
54678: LD_ADDR_VAR 0 12
54682: PUSH
54683: LD_VAR 0 12
54687: PPUSH
54688: LD_INT 1
54690: PPUSH
54691: CALL_OW 3
54695: ST_TO_ADDR
// if not f then
54696: LD_VAR 0 12
54700: NOT
54701: IFFALSE 54719
// begin x := x + 2 ;
54703: LD_ADDR_VAR 0 13
54707: PUSH
54708: LD_VAR 0 13
54712: PUSH
54713: LD_INT 2
54715: PLUS
54716: ST_TO_ADDR
// continue ;
54717: GO 54517
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
54719: LD_VAR 0 12
54723: PUSH
54724: LD_INT 1
54726: ARRAY
54727: PPUSH
54728: CALL_OW 266
54732: PUSH
54733: LD_INT 5
54735: EQUAL
54736: IFFALSE 54810
// begin if UnitsInside ( f [ 1 ] ) < 3 then
54738: LD_VAR 0 12
54742: PUSH
54743: LD_INT 1
54745: ARRAY
54746: PPUSH
54747: CALL_OW 313
54751: PUSH
54752: LD_INT 3
54754: LESS
54755: IFFALSE 54791
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
54757: LD_INT 0
54759: PPUSH
54760: LD_INT 5
54762: PUSH
54763: LD_INT 8
54765: PUSH
54766: LD_INT 9
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: LIST
54773: PUSH
54774: LD_VAR 0 17
54778: ARRAY
54779: PPUSH
54780: LD_VAR 0 4
54784: PPUSH
54785: CALL_OW 380
54789: GO 54808
// PrepareHuman ( false , i , skill ) ;
54791: LD_INT 0
54793: PPUSH
54794: LD_VAR 0 8
54798: PPUSH
54799: LD_VAR 0 4
54803: PPUSH
54804: CALL_OW 380
// end else
54808: GO 54827
// PrepareHuman ( false , i , skill ) ;
54810: LD_INT 0
54812: PPUSH
54813: LD_VAR 0 8
54817: PPUSH
54818: LD_VAR 0 4
54822: PPUSH
54823: CALL_OW 380
// un := CreateHuman ;
54827: LD_ADDR_VAR 0 14
54831: PUSH
54832: CALL_OW 44
54836: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
54837: LD_ADDR_VAR 0 7
54841: PUSH
54842: LD_VAR 0 7
54846: PPUSH
54847: LD_INT 1
54849: PPUSH
54850: LD_VAR 0 14
54854: PPUSH
54855: CALL_OW 2
54859: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
54860: LD_VAR 0 14
54864: PPUSH
54865: LD_VAR 0 12
54869: PUSH
54870: LD_INT 1
54872: ARRAY
54873: PPUSH
54874: CALL_OW 52
// end ;
54878: GO 54517
54880: POP
54881: POP
// end ;
54882: GO 53819
54884: POP
54885: POP
// result := result ^ buildings ;
54886: LD_ADDR_VAR 0 7
54890: PUSH
54891: LD_VAR 0 7
54895: PUSH
54896: LD_VAR 0 18
54900: ADD
54901: ST_TO_ADDR
// end else
54902: GO 55045
// begin for i = 1 to personel do
54904: LD_ADDR_VAR 0 8
54908: PUSH
54909: DOUBLE
54910: LD_INT 1
54912: DEC
54913: ST_TO_ADDR
54914: LD_VAR 0 6
54918: PUSH
54919: FOR_TO
54920: IFFALSE 55043
// begin if i > 4 then
54922: LD_VAR 0 8
54926: PUSH
54927: LD_INT 4
54929: GREATER
54930: IFFALSE 54934
// break ;
54932: GO 55043
// x := personel [ i ] ;
54934: LD_ADDR_VAR 0 13
54938: PUSH
54939: LD_VAR 0 6
54943: PUSH
54944: LD_VAR 0 8
54948: ARRAY
54949: ST_TO_ADDR
// if x = - 1 then
54950: LD_VAR 0 13
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: EQUAL
54959: IFFALSE 54963
// continue ;
54961: GO 54919
// PrepareHuman ( false , i , skill ) ;
54963: LD_INT 0
54965: PPUSH
54966: LD_VAR 0 8
54970: PPUSH
54971: LD_VAR 0 4
54975: PPUSH
54976: CALL_OW 380
// un := CreateHuman ;
54980: LD_ADDR_VAR 0 14
54984: PUSH
54985: CALL_OW 44
54989: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
54990: LD_VAR 0 14
54994: PPUSH
54995: LD_VAR 0 1
54999: PPUSH
55000: CALL_OW 250
55004: PPUSH
55005: LD_VAR 0 1
55009: PPUSH
55010: CALL_OW 251
55014: PPUSH
55015: LD_INT 10
55017: PPUSH
55018: LD_INT 0
55020: PPUSH
55021: CALL_OW 50
// result := result ^ un ;
55025: LD_ADDR_VAR 0 7
55029: PUSH
55030: LD_VAR 0 7
55034: PUSH
55035: LD_VAR 0 14
55039: ADD
55040: ST_TO_ADDR
// end ;
55041: GO 54919
55043: POP
55044: POP
// end ; end ;
55045: LD_VAR 0 7
55049: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
55050: LD_INT 0
55052: PPUSH
55053: PPUSH
55054: PPUSH
55055: PPUSH
55056: PPUSH
55057: PPUSH
55058: PPUSH
55059: PPUSH
55060: PPUSH
55061: PPUSH
55062: PPUSH
55063: PPUSH
55064: PPUSH
55065: PPUSH
55066: PPUSH
55067: PPUSH
// result := false ;
55068: LD_ADDR_VAR 0 3
55072: PUSH
55073: LD_INT 0
55075: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
55076: LD_VAR 0 1
55080: NOT
55081: PUSH
55082: LD_VAR 0 1
55086: PPUSH
55087: CALL_OW 266
55091: PUSH
55092: LD_INT 32
55094: PUSH
55095: LD_INT 33
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: IN
55102: NOT
55103: OR
55104: IFFALSE 55108
// exit ;
55106: GO 56244
// nat := GetNation ( tower ) ;
55108: LD_ADDR_VAR 0 12
55112: PUSH
55113: LD_VAR 0 1
55117: PPUSH
55118: CALL_OW 248
55122: ST_TO_ADDR
// side := GetSide ( tower ) ;
55123: LD_ADDR_VAR 0 16
55127: PUSH
55128: LD_VAR 0 1
55132: PPUSH
55133: CALL_OW 255
55137: ST_TO_ADDR
// x := GetX ( tower ) ;
55138: LD_ADDR_VAR 0 10
55142: PUSH
55143: LD_VAR 0 1
55147: PPUSH
55148: CALL_OW 250
55152: ST_TO_ADDR
// y := GetY ( tower ) ;
55153: LD_ADDR_VAR 0 11
55157: PUSH
55158: LD_VAR 0 1
55162: PPUSH
55163: CALL_OW 251
55167: ST_TO_ADDR
// if not x or not y then
55168: LD_VAR 0 10
55172: NOT
55173: PUSH
55174: LD_VAR 0 11
55178: NOT
55179: OR
55180: IFFALSE 55184
// exit ;
55182: GO 56244
// weapon := 0 ;
55184: LD_ADDR_VAR 0 18
55188: PUSH
55189: LD_INT 0
55191: ST_TO_ADDR
// fac_list := [ ] ;
55192: LD_ADDR_VAR 0 17
55196: PUSH
55197: EMPTY
55198: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
55199: LD_ADDR_VAR 0 6
55203: PUSH
55204: LD_VAR 0 1
55208: PPUSH
55209: CALL_OW 274
55213: PPUSH
55214: LD_VAR 0 2
55218: PPUSH
55219: CALL 52822 0 2
55223: PPUSH
55224: LD_INT 30
55226: PUSH
55227: LD_INT 3
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PPUSH
55234: CALL_OW 72
55238: ST_TO_ADDR
// if not factories then
55239: LD_VAR 0 6
55243: NOT
55244: IFFALSE 55248
// exit ;
55246: GO 56244
// for i in factories do
55248: LD_ADDR_VAR 0 8
55252: PUSH
55253: LD_VAR 0 6
55257: PUSH
55258: FOR_IN
55259: IFFALSE 55284
// fac_list := fac_list union AvailableWeaponList ( i ) ;
55261: LD_ADDR_VAR 0 17
55265: PUSH
55266: LD_VAR 0 17
55270: PUSH
55271: LD_VAR 0 8
55275: PPUSH
55276: CALL_OW 478
55280: UNION
55281: ST_TO_ADDR
55282: GO 55258
55284: POP
55285: POP
// if not fac_list then
55286: LD_VAR 0 17
55290: NOT
55291: IFFALSE 55295
// exit ;
55293: GO 56244
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
55295: LD_ADDR_VAR 0 5
55299: PUSH
55300: LD_INT 4
55302: PUSH
55303: LD_INT 5
55305: PUSH
55306: LD_INT 9
55308: PUSH
55309: LD_INT 10
55311: PUSH
55312: LD_INT 6
55314: PUSH
55315: LD_INT 7
55317: PUSH
55318: LD_INT 11
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 27
55332: PUSH
55333: LD_INT 28
55335: PUSH
55336: LD_INT 26
55338: PUSH
55339: LD_INT 30
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 43
55350: PUSH
55351: LD_INT 44
55353: PUSH
55354: LD_INT 46
55356: PUSH
55357: LD_INT 45
55359: PUSH
55360: LD_INT 47
55362: PUSH
55363: LD_INT 49
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: LIST
55378: PUSH
55379: LD_VAR 0 12
55383: ARRAY
55384: ST_TO_ADDR
// for i in list do
55385: LD_ADDR_VAR 0 8
55389: PUSH
55390: LD_VAR 0 5
55394: PUSH
55395: FOR_IN
55396: IFFALSE 55429
// if not i in fac_list then
55398: LD_VAR 0 8
55402: PUSH
55403: LD_VAR 0 17
55407: IN
55408: NOT
55409: IFFALSE 55427
// list := list diff i ;
55411: LD_ADDR_VAR 0 5
55415: PUSH
55416: LD_VAR 0 5
55420: PUSH
55421: LD_VAR 0 8
55425: DIFF
55426: ST_TO_ADDR
55427: GO 55395
55429: POP
55430: POP
// if not list then
55431: LD_VAR 0 5
55435: NOT
55436: IFFALSE 55440
// exit ;
55438: GO 56244
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
55440: LD_VAR 0 12
55444: PUSH
55445: LD_INT 3
55447: EQUAL
55448: PUSH
55449: LD_INT 49
55451: PUSH
55452: LD_VAR 0 5
55456: IN
55457: AND
55458: PUSH
55459: LD_INT 31
55461: PPUSH
55462: LD_VAR 0 16
55466: PPUSH
55467: CALL_OW 321
55471: PUSH
55472: LD_INT 2
55474: EQUAL
55475: AND
55476: IFFALSE 55536
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
55478: LD_INT 22
55480: PUSH
55481: LD_VAR 0 16
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 35
55492: PUSH
55493: LD_INT 49
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 91
55502: PUSH
55503: LD_VAR 0 1
55507: PUSH
55508: LD_INT 10
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: LIST
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: LIST
55520: PPUSH
55521: CALL_OW 69
55525: NOT
55526: IFFALSE 55536
// weapon := ru_time_lapser ;
55528: LD_ADDR_VAR 0 18
55532: PUSH
55533: LD_INT 49
55535: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
55536: LD_VAR 0 12
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: LD_INT 2
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: IN
55551: PUSH
55552: LD_INT 11
55554: PUSH
55555: LD_VAR 0 5
55559: IN
55560: PUSH
55561: LD_INT 30
55563: PUSH
55564: LD_VAR 0 5
55568: IN
55569: OR
55570: AND
55571: PUSH
55572: LD_INT 6
55574: PPUSH
55575: LD_VAR 0 16
55579: PPUSH
55580: CALL_OW 321
55584: PUSH
55585: LD_INT 2
55587: EQUAL
55588: AND
55589: IFFALSE 55754
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
55591: LD_INT 22
55593: PUSH
55594: LD_VAR 0 16
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 2
55605: PUSH
55606: LD_INT 35
55608: PUSH
55609: LD_INT 11
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 35
55618: PUSH
55619: LD_INT 30
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 91
55633: PUSH
55634: LD_VAR 0 1
55638: PUSH
55639: LD_INT 18
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: LIST
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: LIST
55651: PPUSH
55652: CALL_OW 69
55656: NOT
55657: PUSH
55658: LD_INT 22
55660: PUSH
55661: LD_VAR 0 16
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 2
55672: PUSH
55673: LD_INT 30
55675: PUSH
55676: LD_INT 32
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 30
55685: PUSH
55686: LD_INT 33
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 91
55700: PUSH
55701: LD_VAR 0 1
55705: PUSH
55706: LD_INT 12
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: LIST
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: LIST
55718: PUSH
55719: EMPTY
55720: LIST
55721: PPUSH
55722: CALL_OW 69
55726: PUSH
55727: LD_INT 2
55729: GREATER
55730: AND
55731: IFFALSE 55754
// weapon := [ us_radar , ar_radar ] [ nat ] ;
55733: LD_ADDR_VAR 0 18
55737: PUSH
55738: LD_INT 11
55740: PUSH
55741: LD_INT 30
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_VAR 0 12
55752: ARRAY
55753: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
55754: LD_VAR 0 18
55758: NOT
55759: PUSH
55760: LD_INT 40
55762: PPUSH
55763: LD_VAR 0 16
55767: PPUSH
55768: CALL_OW 321
55772: PUSH
55773: LD_INT 2
55775: EQUAL
55776: AND
55777: PUSH
55778: LD_INT 7
55780: PUSH
55781: LD_VAR 0 5
55785: IN
55786: PUSH
55787: LD_INT 28
55789: PUSH
55790: LD_VAR 0 5
55794: IN
55795: OR
55796: PUSH
55797: LD_INT 45
55799: PUSH
55800: LD_VAR 0 5
55804: IN
55805: OR
55806: AND
55807: IFFALSE 56061
// begin hex := GetHexInfo ( x , y ) ;
55809: LD_ADDR_VAR 0 4
55813: PUSH
55814: LD_VAR 0 10
55818: PPUSH
55819: LD_VAR 0 11
55823: PPUSH
55824: CALL_OW 546
55828: ST_TO_ADDR
// if hex [ 1 ] then
55829: LD_VAR 0 4
55833: PUSH
55834: LD_INT 1
55836: ARRAY
55837: IFFALSE 55841
// exit ;
55839: GO 56244
// height := hex [ 2 ] ;
55841: LD_ADDR_VAR 0 15
55845: PUSH
55846: LD_VAR 0 4
55850: PUSH
55851: LD_INT 2
55853: ARRAY
55854: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
55855: LD_ADDR_VAR 0 14
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: LD_INT 2
55865: PUSH
55866: LD_INT 3
55868: PUSH
55869: LD_INT 5
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: ST_TO_ADDR
// for i in tmp do
55878: LD_ADDR_VAR 0 8
55882: PUSH
55883: LD_VAR 0 14
55887: PUSH
55888: FOR_IN
55889: IFFALSE 56059
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
55891: LD_ADDR_VAR 0 9
55895: PUSH
55896: LD_VAR 0 10
55900: PPUSH
55901: LD_VAR 0 8
55905: PPUSH
55906: LD_INT 5
55908: PPUSH
55909: CALL_OW 272
55913: PUSH
55914: LD_VAR 0 11
55918: PPUSH
55919: LD_VAR 0 8
55923: PPUSH
55924: LD_INT 5
55926: PPUSH
55927: CALL_OW 273
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
55936: LD_VAR 0 9
55940: PUSH
55941: LD_INT 1
55943: ARRAY
55944: PPUSH
55945: LD_VAR 0 9
55949: PUSH
55950: LD_INT 2
55952: ARRAY
55953: PPUSH
55954: CALL_OW 488
55958: IFFALSE 56057
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
55960: LD_ADDR_VAR 0 4
55964: PUSH
55965: LD_VAR 0 9
55969: PUSH
55970: LD_INT 1
55972: ARRAY
55973: PPUSH
55974: LD_VAR 0 9
55978: PUSH
55979: LD_INT 2
55981: ARRAY
55982: PPUSH
55983: CALL_OW 546
55987: ST_TO_ADDR
// if hex [ 1 ] then
55988: LD_VAR 0 4
55992: PUSH
55993: LD_INT 1
55995: ARRAY
55996: IFFALSE 56000
// continue ;
55998: GO 55888
// h := hex [ 2 ] ;
56000: LD_ADDR_VAR 0 13
56004: PUSH
56005: LD_VAR 0 4
56009: PUSH
56010: LD_INT 2
56012: ARRAY
56013: ST_TO_ADDR
// if h + 7 < height then
56014: LD_VAR 0 13
56018: PUSH
56019: LD_INT 7
56021: PLUS
56022: PUSH
56023: LD_VAR 0 15
56027: LESS
56028: IFFALSE 56057
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
56030: LD_ADDR_VAR 0 18
56034: PUSH
56035: LD_INT 7
56037: PUSH
56038: LD_INT 28
56040: PUSH
56041: LD_INT 45
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: LIST
56048: PUSH
56049: LD_VAR 0 12
56053: ARRAY
56054: ST_TO_ADDR
// break ;
56055: GO 56059
// end ; end ; end ;
56057: GO 55888
56059: POP
56060: POP
// end ; if not weapon then
56061: LD_VAR 0 18
56065: NOT
56066: IFFALSE 56126
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
56068: LD_ADDR_VAR 0 5
56072: PUSH
56073: LD_VAR 0 5
56077: PUSH
56078: LD_INT 11
56080: PUSH
56081: LD_INT 30
56083: PUSH
56084: LD_INT 49
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: LIST
56091: DIFF
56092: ST_TO_ADDR
// if not list then
56093: LD_VAR 0 5
56097: NOT
56098: IFFALSE 56102
// exit ;
56100: GO 56244
// weapon := list [ rand ( 1 , list ) ] ;
56102: LD_ADDR_VAR 0 18
56106: PUSH
56107: LD_VAR 0 5
56111: PUSH
56112: LD_INT 1
56114: PPUSH
56115: LD_VAR 0 5
56119: PPUSH
56120: CALL_OW 12
56124: ARRAY
56125: ST_TO_ADDR
// end ; if weapon then
56126: LD_VAR 0 18
56130: IFFALSE 56244
// begin tmp := CostOfWeapon ( weapon ) ;
56132: LD_ADDR_VAR 0 14
56136: PUSH
56137: LD_VAR 0 18
56141: PPUSH
56142: CALL_OW 451
56146: ST_TO_ADDR
// j := GetBase ( tower ) ;
56147: LD_ADDR_VAR 0 9
56151: PUSH
56152: LD_VAR 0 1
56156: PPUSH
56157: CALL_OW 274
56161: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
56162: LD_VAR 0 9
56166: PPUSH
56167: LD_INT 1
56169: PPUSH
56170: CALL_OW 275
56174: PUSH
56175: LD_VAR 0 14
56179: PUSH
56180: LD_INT 1
56182: ARRAY
56183: GREATEREQUAL
56184: PUSH
56185: LD_VAR 0 9
56189: PPUSH
56190: LD_INT 2
56192: PPUSH
56193: CALL_OW 275
56197: PUSH
56198: LD_VAR 0 14
56202: PUSH
56203: LD_INT 2
56205: ARRAY
56206: GREATEREQUAL
56207: AND
56208: PUSH
56209: LD_VAR 0 9
56213: PPUSH
56214: LD_INT 3
56216: PPUSH
56217: CALL_OW 275
56221: PUSH
56222: LD_VAR 0 14
56226: PUSH
56227: LD_INT 3
56229: ARRAY
56230: GREATEREQUAL
56231: AND
56232: IFFALSE 56244
// result := weapon ;
56234: LD_ADDR_VAR 0 3
56238: PUSH
56239: LD_VAR 0 18
56243: ST_TO_ADDR
// end ; end ;
56244: LD_VAR 0 3
56248: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
56249: LD_INT 0
56251: PPUSH
56252: PPUSH
// result := true ;
56253: LD_ADDR_VAR 0 3
56257: PUSH
56258: LD_INT 1
56260: ST_TO_ADDR
// if array1 = array2 then
56261: LD_VAR 0 1
56265: PUSH
56266: LD_VAR 0 2
56270: EQUAL
56271: IFFALSE 56331
// begin for i = 1 to array1 do
56273: LD_ADDR_VAR 0 4
56277: PUSH
56278: DOUBLE
56279: LD_INT 1
56281: DEC
56282: ST_TO_ADDR
56283: LD_VAR 0 1
56287: PUSH
56288: FOR_TO
56289: IFFALSE 56327
// if array1 [ i ] <> array2 [ i ] then
56291: LD_VAR 0 1
56295: PUSH
56296: LD_VAR 0 4
56300: ARRAY
56301: PUSH
56302: LD_VAR 0 2
56306: PUSH
56307: LD_VAR 0 4
56311: ARRAY
56312: NONEQUAL
56313: IFFALSE 56325
// begin result := false ;
56315: LD_ADDR_VAR 0 3
56319: PUSH
56320: LD_INT 0
56322: ST_TO_ADDR
// break ;
56323: GO 56327
// end ;
56325: GO 56288
56327: POP
56328: POP
// end else
56329: GO 56339
// result := false ;
56331: LD_ADDR_VAR 0 3
56335: PUSH
56336: LD_INT 0
56338: ST_TO_ADDR
// end ;
56339: LD_VAR 0 3
56343: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
56344: LD_INT 0
56346: PPUSH
56347: PPUSH
56348: PPUSH
// pom := GetBase ( fac ) ;
56349: LD_ADDR_VAR 0 5
56353: PUSH
56354: LD_VAR 0 1
56358: PPUSH
56359: CALL_OW 274
56363: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
56364: LD_ADDR_VAR 0 4
56368: PUSH
56369: LD_VAR 0 2
56373: PUSH
56374: LD_INT 1
56376: ARRAY
56377: PPUSH
56378: LD_VAR 0 2
56382: PUSH
56383: LD_INT 2
56385: ARRAY
56386: PPUSH
56387: LD_VAR 0 2
56391: PUSH
56392: LD_INT 3
56394: ARRAY
56395: PPUSH
56396: LD_VAR 0 2
56400: PUSH
56401: LD_INT 4
56403: ARRAY
56404: PPUSH
56405: CALL_OW 449
56409: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
56410: LD_ADDR_VAR 0 3
56414: PUSH
56415: LD_VAR 0 5
56419: PPUSH
56420: LD_INT 1
56422: PPUSH
56423: CALL_OW 275
56427: PUSH
56428: LD_VAR 0 4
56432: PUSH
56433: LD_INT 1
56435: ARRAY
56436: GREATEREQUAL
56437: PUSH
56438: LD_VAR 0 5
56442: PPUSH
56443: LD_INT 2
56445: PPUSH
56446: CALL_OW 275
56450: PUSH
56451: LD_VAR 0 4
56455: PUSH
56456: LD_INT 2
56458: ARRAY
56459: GREATEREQUAL
56460: AND
56461: PUSH
56462: LD_VAR 0 5
56466: PPUSH
56467: LD_INT 3
56469: PPUSH
56470: CALL_OW 275
56474: PUSH
56475: LD_VAR 0 4
56479: PUSH
56480: LD_INT 3
56482: ARRAY
56483: GREATEREQUAL
56484: AND
56485: ST_TO_ADDR
// end ;
56486: LD_VAR 0 3
56490: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
56491: LD_INT 0
56493: PPUSH
56494: PPUSH
56495: PPUSH
56496: PPUSH
// pom := GetBase ( building ) ;
56497: LD_ADDR_VAR 0 3
56501: PUSH
56502: LD_VAR 0 1
56506: PPUSH
56507: CALL_OW 274
56511: ST_TO_ADDR
// if not pom then
56512: LD_VAR 0 3
56516: NOT
56517: IFFALSE 56521
// exit ;
56519: GO 56691
// btype := GetBType ( building ) ;
56521: LD_ADDR_VAR 0 5
56525: PUSH
56526: LD_VAR 0 1
56530: PPUSH
56531: CALL_OW 266
56535: ST_TO_ADDR
// if btype = b_armoury then
56536: LD_VAR 0 5
56540: PUSH
56541: LD_INT 4
56543: EQUAL
56544: IFFALSE 56554
// btype := b_barracks ;
56546: LD_ADDR_VAR 0 5
56550: PUSH
56551: LD_INT 5
56553: ST_TO_ADDR
// if btype = b_depot then
56554: LD_VAR 0 5
56558: PUSH
56559: LD_INT 0
56561: EQUAL
56562: IFFALSE 56572
// btype := b_warehouse ;
56564: LD_ADDR_VAR 0 5
56568: PUSH
56569: LD_INT 1
56571: ST_TO_ADDR
// if btype = b_workshop then
56572: LD_VAR 0 5
56576: PUSH
56577: LD_INT 2
56579: EQUAL
56580: IFFALSE 56590
// btype := b_factory ;
56582: LD_ADDR_VAR 0 5
56586: PUSH
56587: LD_INT 3
56589: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
56590: LD_ADDR_VAR 0 4
56594: PUSH
56595: LD_VAR 0 5
56599: PPUSH
56600: LD_VAR 0 1
56604: PPUSH
56605: CALL_OW 248
56609: PPUSH
56610: CALL_OW 450
56614: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
56615: LD_ADDR_VAR 0 2
56619: PUSH
56620: LD_VAR 0 3
56624: PPUSH
56625: LD_INT 1
56627: PPUSH
56628: CALL_OW 275
56632: PUSH
56633: LD_VAR 0 4
56637: PUSH
56638: LD_INT 1
56640: ARRAY
56641: GREATEREQUAL
56642: PUSH
56643: LD_VAR 0 3
56647: PPUSH
56648: LD_INT 2
56650: PPUSH
56651: CALL_OW 275
56655: PUSH
56656: LD_VAR 0 4
56660: PUSH
56661: LD_INT 2
56663: ARRAY
56664: GREATEREQUAL
56665: AND
56666: PUSH
56667: LD_VAR 0 3
56671: PPUSH
56672: LD_INT 3
56674: PPUSH
56675: CALL_OW 275
56679: PUSH
56680: LD_VAR 0 4
56684: PUSH
56685: LD_INT 3
56687: ARRAY
56688: GREATEREQUAL
56689: AND
56690: ST_TO_ADDR
// end ;
56691: LD_VAR 0 2
56695: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
56696: LD_INT 0
56698: PPUSH
56699: PPUSH
56700: PPUSH
// pom := GetBase ( building ) ;
56701: LD_ADDR_VAR 0 4
56705: PUSH
56706: LD_VAR 0 1
56710: PPUSH
56711: CALL_OW 274
56715: ST_TO_ADDR
// if not pom then
56716: LD_VAR 0 4
56720: NOT
56721: IFFALSE 56725
// exit ;
56723: GO 56826
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
56725: LD_ADDR_VAR 0 5
56729: PUSH
56730: LD_VAR 0 2
56734: PPUSH
56735: LD_VAR 0 1
56739: PPUSH
56740: CALL_OW 248
56744: PPUSH
56745: CALL_OW 450
56749: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
56750: LD_ADDR_VAR 0 3
56754: PUSH
56755: LD_VAR 0 4
56759: PPUSH
56760: LD_INT 1
56762: PPUSH
56763: CALL_OW 275
56767: PUSH
56768: LD_VAR 0 5
56772: PUSH
56773: LD_INT 1
56775: ARRAY
56776: GREATEREQUAL
56777: PUSH
56778: LD_VAR 0 4
56782: PPUSH
56783: LD_INT 2
56785: PPUSH
56786: CALL_OW 275
56790: PUSH
56791: LD_VAR 0 5
56795: PUSH
56796: LD_INT 2
56798: ARRAY
56799: GREATEREQUAL
56800: AND
56801: PUSH
56802: LD_VAR 0 4
56806: PPUSH
56807: LD_INT 3
56809: PPUSH
56810: CALL_OW 275
56814: PUSH
56815: LD_VAR 0 5
56819: PUSH
56820: LD_INT 3
56822: ARRAY
56823: GREATEREQUAL
56824: AND
56825: ST_TO_ADDR
// end ;
56826: LD_VAR 0 3
56830: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
56831: LD_INT 0
56833: PPUSH
56834: PPUSH
56835: PPUSH
56836: PPUSH
56837: PPUSH
56838: PPUSH
56839: PPUSH
56840: PPUSH
56841: PPUSH
56842: PPUSH
// result := false ;
56843: LD_ADDR_VAR 0 6
56847: PUSH
56848: LD_INT 0
56850: ST_TO_ADDR
// if not base or not btype or not x or not y then
56851: LD_VAR 0 1
56855: NOT
56856: PUSH
56857: LD_VAR 0 2
56861: NOT
56862: OR
56863: PUSH
56864: LD_VAR 0 3
56868: NOT
56869: OR
56870: PUSH
56871: LD_VAR 0 4
56875: NOT
56876: OR
56877: IFFALSE 56881
// exit ;
56879: GO 57490
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
56881: LD_ADDR_VAR 0 12
56885: PUSH
56886: LD_VAR 0 2
56890: PPUSH
56891: LD_VAR 0 3
56895: PPUSH
56896: LD_VAR 0 4
56900: PPUSH
56901: LD_VAR 0 5
56905: PPUSH
56906: LD_VAR 0 1
56910: PUSH
56911: LD_INT 1
56913: ARRAY
56914: PPUSH
56915: CALL_OW 248
56919: PPUSH
56920: LD_INT 0
56922: PPUSH
56923: CALL 58327 0 6
56927: ST_TO_ADDR
// if not hexes then
56928: LD_VAR 0 12
56932: NOT
56933: IFFALSE 56937
// exit ;
56935: GO 57490
// for i = 1 to hexes do
56937: LD_ADDR_VAR 0 7
56941: PUSH
56942: DOUBLE
56943: LD_INT 1
56945: DEC
56946: ST_TO_ADDR
56947: LD_VAR 0 12
56951: PUSH
56952: FOR_TO
56953: IFFALSE 57488
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56955: LD_ADDR_VAR 0 11
56959: PUSH
56960: LD_VAR 0 12
56964: PUSH
56965: LD_VAR 0 7
56969: ARRAY
56970: PUSH
56971: LD_INT 1
56973: ARRAY
56974: PPUSH
56975: LD_VAR 0 12
56979: PUSH
56980: LD_VAR 0 7
56984: ARRAY
56985: PUSH
56986: LD_INT 2
56988: ARRAY
56989: PPUSH
56990: CALL_OW 428
56994: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
56995: LD_VAR 0 12
56999: PUSH
57000: LD_VAR 0 7
57004: ARRAY
57005: PUSH
57006: LD_INT 1
57008: ARRAY
57009: PPUSH
57010: LD_VAR 0 12
57014: PUSH
57015: LD_VAR 0 7
57019: ARRAY
57020: PUSH
57021: LD_INT 2
57023: ARRAY
57024: PPUSH
57025: CALL_OW 351
57029: PUSH
57030: LD_VAR 0 12
57034: PUSH
57035: LD_VAR 0 7
57039: ARRAY
57040: PUSH
57041: LD_INT 1
57043: ARRAY
57044: PPUSH
57045: LD_VAR 0 12
57049: PUSH
57050: LD_VAR 0 7
57054: ARRAY
57055: PUSH
57056: LD_INT 2
57058: ARRAY
57059: PPUSH
57060: CALL_OW 488
57064: NOT
57065: OR
57066: PUSH
57067: LD_VAR 0 11
57071: PPUSH
57072: CALL_OW 247
57076: PUSH
57077: LD_INT 3
57079: EQUAL
57080: OR
57081: IFFALSE 57087
// exit ;
57083: POP
57084: POP
57085: GO 57490
// if not tmp or not tmp in base then
57087: LD_VAR 0 11
57091: NOT
57092: PUSH
57093: LD_VAR 0 11
57097: PUSH
57098: LD_VAR 0 1
57102: IN
57103: NOT
57104: OR
57105: IFFALSE 57109
// continue ;
57107: GO 56952
// result := true ;
57109: LD_ADDR_VAR 0 6
57113: PUSH
57114: LD_INT 1
57116: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57117: LD_ADDR_VAR 0 15
57121: PUSH
57122: LD_VAR 0 1
57126: PPUSH
57127: LD_INT 22
57129: PUSH
57130: LD_VAR 0 11
57134: PPUSH
57135: CALL_OW 255
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 2
57146: PUSH
57147: LD_INT 30
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 30
57159: PUSH
57160: LD_INT 1
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: LIST
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PPUSH
57176: CALL_OW 72
57180: ST_TO_ADDR
// if dep then
57181: LD_VAR 0 15
57185: IFFALSE 57321
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
57187: LD_ADDR_VAR 0 14
57191: PUSH
57192: LD_VAR 0 15
57196: PUSH
57197: LD_INT 1
57199: ARRAY
57200: PPUSH
57201: CALL_OW 250
57205: PPUSH
57206: LD_VAR 0 15
57210: PUSH
57211: LD_INT 1
57213: ARRAY
57214: PPUSH
57215: CALL_OW 254
57219: PPUSH
57220: LD_INT 5
57222: PPUSH
57223: CALL_OW 272
57227: PUSH
57228: LD_VAR 0 15
57232: PUSH
57233: LD_INT 1
57235: ARRAY
57236: PPUSH
57237: CALL_OW 251
57241: PPUSH
57242: LD_VAR 0 15
57246: PUSH
57247: LD_INT 1
57249: ARRAY
57250: PPUSH
57251: CALL_OW 254
57255: PPUSH
57256: LD_INT 5
57258: PPUSH
57259: CALL_OW 273
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
57268: LD_VAR 0 14
57272: PUSH
57273: LD_INT 1
57275: ARRAY
57276: PPUSH
57277: LD_VAR 0 14
57281: PUSH
57282: LD_INT 2
57284: ARRAY
57285: PPUSH
57286: CALL_OW 488
57290: IFFALSE 57321
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
57292: LD_VAR 0 11
57296: PPUSH
57297: LD_VAR 0 14
57301: PUSH
57302: LD_INT 1
57304: ARRAY
57305: PPUSH
57306: LD_VAR 0 14
57310: PUSH
57311: LD_INT 2
57313: ARRAY
57314: PPUSH
57315: CALL_OW 111
// continue ;
57319: GO 56952
// end ; end ; r := GetDir ( tmp ) ;
57321: LD_ADDR_VAR 0 13
57325: PUSH
57326: LD_VAR 0 11
57330: PPUSH
57331: CALL_OW 254
57335: ST_TO_ADDR
// if r = 5 then
57336: LD_VAR 0 13
57340: PUSH
57341: LD_INT 5
57343: EQUAL
57344: IFFALSE 57354
// r := 0 ;
57346: LD_ADDR_VAR 0 13
57350: PUSH
57351: LD_INT 0
57353: ST_TO_ADDR
// for j = r to 5 do
57354: LD_ADDR_VAR 0 8
57358: PUSH
57359: DOUBLE
57360: LD_VAR 0 13
57364: DEC
57365: ST_TO_ADDR
57366: LD_INT 5
57368: PUSH
57369: FOR_TO
57370: IFFALSE 57484
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
57372: LD_ADDR_VAR 0 9
57376: PUSH
57377: LD_VAR 0 11
57381: PPUSH
57382: CALL_OW 250
57386: PPUSH
57387: LD_VAR 0 8
57391: PPUSH
57392: LD_INT 2
57394: PPUSH
57395: CALL_OW 272
57399: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
57400: LD_ADDR_VAR 0 10
57404: PUSH
57405: LD_VAR 0 11
57409: PPUSH
57410: CALL_OW 251
57414: PPUSH
57415: LD_VAR 0 8
57419: PPUSH
57420: LD_INT 2
57422: PPUSH
57423: CALL_OW 273
57427: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
57428: LD_VAR 0 9
57432: PPUSH
57433: LD_VAR 0 10
57437: PPUSH
57438: CALL_OW 488
57442: PUSH
57443: LD_VAR 0 9
57447: PPUSH
57448: LD_VAR 0 10
57452: PPUSH
57453: CALL_OW 428
57457: NOT
57458: AND
57459: IFFALSE 57482
// begin ComMoveXY ( tmp , _x , _y ) ;
57461: LD_VAR 0 11
57465: PPUSH
57466: LD_VAR 0 9
57470: PPUSH
57471: LD_VAR 0 10
57475: PPUSH
57476: CALL_OW 111
// break ;
57480: GO 57484
// end ; end ;
57482: GO 57369
57484: POP
57485: POP
// end ;
57486: GO 56952
57488: POP
57489: POP
// end ;
57490: LD_VAR 0 6
57494: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
57495: LD_INT 0
57497: PPUSH
57498: PPUSH
57499: PPUSH
57500: PPUSH
57501: PPUSH
57502: PPUSH
57503: PPUSH
57504: PPUSH
57505: PPUSH
57506: PPUSH
// result := false ;
57507: LD_ADDR_VAR 0 6
57511: PUSH
57512: LD_INT 0
57514: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
57515: LD_VAR 0 1
57519: NOT
57520: PUSH
57521: LD_VAR 0 1
57525: PPUSH
57526: CALL_OW 266
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: IN
57541: NOT
57542: OR
57543: PUSH
57544: LD_VAR 0 2
57548: NOT
57549: OR
57550: PUSH
57551: LD_VAR 0 5
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: LD_INT 2
57564: PUSH
57565: LD_INT 3
57567: PUSH
57568: LD_INT 4
57570: PUSH
57571: LD_INT 5
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: IN
57582: NOT
57583: OR
57584: PUSH
57585: LD_VAR 0 3
57589: PPUSH
57590: LD_VAR 0 4
57594: PPUSH
57595: CALL_OW 488
57599: NOT
57600: OR
57601: IFFALSE 57605
// exit ;
57603: GO 58322
// pom := GetBase ( depot ) ;
57605: LD_ADDR_VAR 0 10
57609: PUSH
57610: LD_VAR 0 1
57614: PPUSH
57615: CALL_OW 274
57619: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57620: LD_ADDR_VAR 0 11
57624: PUSH
57625: LD_VAR 0 2
57629: PPUSH
57630: LD_VAR 0 1
57634: PPUSH
57635: CALL_OW 248
57639: PPUSH
57640: CALL_OW 450
57644: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
57645: LD_VAR 0 10
57649: PPUSH
57650: LD_INT 1
57652: PPUSH
57653: CALL_OW 275
57657: PUSH
57658: LD_VAR 0 11
57662: PUSH
57663: LD_INT 1
57665: ARRAY
57666: GREATEREQUAL
57667: PUSH
57668: LD_VAR 0 10
57672: PPUSH
57673: LD_INT 2
57675: PPUSH
57676: CALL_OW 275
57680: PUSH
57681: LD_VAR 0 11
57685: PUSH
57686: LD_INT 2
57688: ARRAY
57689: GREATEREQUAL
57690: AND
57691: PUSH
57692: LD_VAR 0 10
57696: PPUSH
57697: LD_INT 3
57699: PPUSH
57700: CALL_OW 275
57704: PUSH
57705: LD_VAR 0 11
57709: PUSH
57710: LD_INT 3
57712: ARRAY
57713: GREATEREQUAL
57714: AND
57715: NOT
57716: IFFALSE 57720
// exit ;
57718: GO 58322
// if GetBType ( depot ) = b_depot then
57720: LD_VAR 0 1
57724: PPUSH
57725: CALL_OW 266
57729: PUSH
57730: LD_INT 0
57732: EQUAL
57733: IFFALSE 57745
// dist := 28 else
57735: LD_ADDR_VAR 0 14
57739: PUSH
57740: LD_INT 28
57742: ST_TO_ADDR
57743: GO 57753
// dist := 36 ;
57745: LD_ADDR_VAR 0 14
57749: PUSH
57750: LD_INT 36
57752: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
57753: LD_VAR 0 1
57757: PPUSH
57758: LD_VAR 0 3
57762: PPUSH
57763: LD_VAR 0 4
57767: PPUSH
57768: CALL_OW 297
57772: PUSH
57773: LD_VAR 0 14
57777: GREATER
57778: IFFALSE 57782
// exit ;
57780: GO 58322
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
57782: LD_ADDR_VAR 0 12
57786: PUSH
57787: LD_VAR 0 2
57791: PPUSH
57792: LD_VAR 0 3
57796: PPUSH
57797: LD_VAR 0 4
57801: PPUSH
57802: LD_VAR 0 5
57806: PPUSH
57807: LD_VAR 0 1
57811: PPUSH
57812: CALL_OW 248
57816: PPUSH
57817: LD_INT 0
57819: PPUSH
57820: CALL 58327 0 6
57824: ST_TO_ADDR
// if not hexes then
57825: LD_VAR 0 12
57829: NOT
57830: IFFALSE 57834
// exit ;
57832: GO 58322
// hex := GetHexInfo ( x , y ) ;
57834: LD_ADDR_VAR 0 15
57838: PUSH
57839: LD_VAR 0 3
57843: PPUSH
57844: LD_VAR 0 4
57848: PPUSH
57849: CALL_OW 546
57853: ST_TO_ADDR
// if hex [ 1 ] then
57854: LD_VAR 0 15
57858: PUSH
57859: LD_INT 1
57861: ARRAY
57862: IFFALSE 57866
// exit ;
57864: GO 58322
// height := hex [ 2 ] ;
57866: LD_ADDR_VAR 0 13
57870: PUSH
57871: LD_VAR 0 15
57875: PUSH
57876: LD_INT 2
57878: ARRAY
57879: ST_TO_ADDR
// for i = 1 to hexes do
57880: LD_ADDR_VAR 0 7
57884: PUSH
57885: DOUBLE
57886: LD_INT 1
57888: DEC
57889: ST_TO_ADDR
57890: LD_VAR 0 12
57894: PUSH
57895: FOR_TO
57896: IFFALSE 58226
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
57898: LD_VAR 0 12
57902: PUSH
57903: LD_VAR 0 7
57907: ARRAY
57908: PUSH
57909: LD_INT 1
57911: ARRAY
57912: PPUSH
57913: LD_VAR 0 12
57917: PUSH
57918: LD_VAR 0 7
57922: ARRAY
57923: PUSH
57924: LD_INT 2
57926: ARRAY
57927: PPUSH
57928: CALL_OW 488
57932: NOT
57933: PUSH
57934: LD_VAR 0 12
57938: PUSH
57939: LD_VAR 0 7
57943: ARRAY
57944: PUSH
57945: LD_INT 1
57947: ARRAY
57948: PPUSH
57949: LD_VAR 0 12
57953: PUSH
57954: LD_VAR 0 7
57958: ARRAY
57959: PUSH
57960: LD_INT 2
57962: ARRAY
57963: PPUSH
57964: CALL_OW 428
57968: PUSH
57969: LD_INT 0
57971: GREATER
57972: OR
57973: PUSH
57974: LD_VAR 0 12
57978: PUSH
57979: LD_VAR 0 7
57983: ARRAY
57984: PUSH
57985: LD_INT 1
57987: ARRAY
57988: PPUSH
57989: LD_VAR 0 12
57993: PUSH
57994: LD_VAR 0 7
57998: ARRAY
57999: PUSH
58000: LD_INT 2
58002: ARRAY
58003: PPUSH
58004: CALL_OW 351
58008: OR
58009: IFFALSE 58015
// exit ;
58011: POP
58012: POP
58013: GO 58322
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58015: LD_ADDR_VAR 0 8
58019: PUSH
58020: LD_VAR 0 12
58024: PUSH
58025: LD_VAR 0 7
58029: ARRAY
58030: PUSH
58031: LD_INT 1
58033: ARRAY
58034: PPUSH
58035: LD_VAR 0 12
58039: PUSH
58040: LD_VAR 0 7
58044: ARRAY
58045: PUSH
58046: LD_INT 2
58048: ARRAY
58049: PPUSH
58050: CALL_OW 546
58054: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
58055: LD_VAR 0 8
58059: PUSH
58060: LD_INT 1
58062: ARRAY
58063: PUSH
58064: LD_VAR 0 8
58068: PUSH
58069: LD_INT 2
58071: ARRAY
58072: PUSH
58073: LD_VAR 0 13
58077: PUSH
58078: LD_INT 2
58080: PLUS
58081: GREATER
58082: OR
58083: PUSH
58084: LD_VAR 0 8
58088: PUSH
58089: LD_INT 2
58091: ARRAY
58092: PUSH
58093: LD_VAR 0 13
58097: PUSH
58098: LD_INT 2
58100: MINUS
58101: LESS
58102: OR
58103: PUSH
58104: LD_VAR 0 8
58108: PUSH
58109: LD_INT 3
58111: ARRAY
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: LD_INT 8
58118: PUSH
58119: LD_INT 9
58121: PUSH
58122: LD_INT 10
58124: PUSH
58125: LD_INT 11
58127: PUSH
58128: LD_INT 12
58130: PUSH
58131: LD_INT 13
58133: PUSH
58134: LD_INT 16
58136: PUSH
58137: LD_INT 17
58139: PUSH
58140: LD_INT 18
58142: PUSH
58143: LD_INT 19
58145: PUSH
58146: LD_INT 20
58148: PUSH
58149: LD_INT 21
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: IN
58167: NOT
58168: OR
58169: PUSH
58170: LD_VAR 0 8
58174: PUSH
58175: LD_INT 5
58177: ARRAY
58178: NOT
58179: OR
58180: PUSH
58181: LD_VAR 0 8
58185: PUSH
58186: LD_INT 6
58188: ARRAY
58189: PUSH
58190: LD_INT 1
58192: PUSH
58193: LD_INT 2
58195: PUSH
58196: LD_INT 7
58198: PUSH
58199: LD_INT 9
58201: PUSH
58202: LD_INT 10
58204: PUSH
58205: LD_INT 11
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: IN
58216: NOT
58217: OR
58218: IFFALSE 58224
// exit ;
58220: POP
58221: POP
58222: GO 58322
// end ;
58224: GO 57895
58226: POP
58227: POP
// side := GetSide ( depot ) ;
58228: LD_ADDR_VAR 0 9
58232: PUSH
58233: LD_VAR 0 1
58237: PPUSH
58238: CALL_OW 255
58242: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
58243: LD_VAR 0 9
58247: PPUSH
58248: LD_VAR 0 3
58252: PPUSH
58253: LD_VAR 0 4
58257: PPUSH
58258: LD_INT 20
58260: PPUSH
58261: CALL 50976 0 4
58265: PUSH
58266: LD_INT 4
58268: ARRAY
58269: IFFALSE 58273
// exit ;
58271: GO 58322
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
58273: LD_VAR 0 2
58277: PUSH
58278: LD_INT 29
58280: PUSH
58281: LD_INT 30
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: IN
58288: PUSH
58289: LD_VAR 0 3
58293: PPUSH
58294: LD_VAR 0 4
58298: PPUSH
58299: LD_VAR 0 9
58303: PPUSH
58304: CALL_OW 440
58308: NOT
58309: AND
58310: IFFALSE 58314
// exit ;
58312: GO 58322
// result := true ;
58314: LD_ADDR_VAR 0 6
58318: PUSH
58319: LD_INT 1
58321: ST_TO_ADDR
// end ;
58322: LD_VAR 0 6
58326: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
58327: LD_INT 0
58329: PPUSH
58330: PPUSH
58331: PPUSH
58332: PPUSH
58333: PPUSH
58334: PPUSH
58335: PPUSH
58336: PPUSH
58337: PPUSH
58338: PPUSH
58339: PPUSH
58340: PPUSH
58341: PPUSH
58342: PPUSH
58343: PPUSH
58344: PPUSH
58345: PPUSH
58346: PPUSH
58347: PPUSH
58348: PPUSH
58349: PPUSH
58350: PPUSH
58351: PPUSH
58352: PPUSH
58353: PPUSH
58354: PPUSH
58355: PPUSH
58356: PPUSH
58357: PPUSH
58358: PPUSH
58359: PPUSH
58360: PPUSH
58361: PPUSH
58362: PPUSH
58363: PPUSH
58364: PPUSH
58365: PPUSH
58366: PPUSH
58367: PPUSH
58368: PPUSH
58369: PPUSH
58370: PPUSH
58371: PPUSH
58372: PPUSH
58373: PPUSH
58374: PPUSH
58375: PPUSH
58376: PPUSH
58377: PPUSH
58378: PPUSH
58379: PPUSH
58380: PPUSH
58381: PPUSH
58382: PPUSH
58383: PPUSH
58384: PPUSH
58385: PPUSH
58386: PPUSH
// result = [ ] ;
58387: LD_ADDR_VAR 0 7
58391: PUSH
58392: EMPTY
58393: ST_TO_ADDR
// temp_list = [ ] ;
58394: LD_ADDR_VAR 0 9
58398: PUSH
58399: EMPTY
58400: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
58401: LD_VAR 0 4
58405: PUSH
58406: LD_INT 0
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: LD_INT 2
58414: PUSH
58415: LD_INT 3
58417: PUSH
58418: LD_INT 4
58420: PUSH
58421: LD_INT 5
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: IN
58432: NOT
58433: PUSH
58434: LD_VAR 0 1
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: LD_INT 1
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: IN
58449: PUSH
58450: LD_VAR 0 5
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: LD_INT 2
58460: PUSH
58461: LD_INT 3
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: LIST
58468: IN
58469: NOT
58470: AND
58471: OR
58472: IFFALSE 58476
// exit ;
58474: GO 76867
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
58476: LD_VAR 0 1
58480: PUSH
58481: LD_INT 6
58483: PUSH
58484: LD_INT 7
58486: PUSH
58487: LD_INT 8
58489: PUSH
58490: LD_INT 13
58492: PUSH
58493: LD_INT 12
58495: PUSH
58496: LD_INT 15
58498: PUSH
58499: LD_INT 11
58501: PUSH
58502: LD_INT 14
58504: PUSH
58505: LD_INT 10
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: IN
58519: IFFALSE 58529
// btype = b_lab ;
58521: LD_ADDR_VAR 0 1
58525: PUSH
58526: LD_INT 6
58528: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
58529: LD_VAR 0 6
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: LD_INT 2
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: LIST
58547: IN
58548: NOT
58549: PUSH
58550: LD_VAR 0 1
58554: PUSH
58555: LD_INT 0
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: LD_INT 2
58563: PUSH
58564: LD_INT 3
58566: PUSH
58567: LD_INT 6
58569: PUSH
58570: LD_INT 36
58572: PUSH
58573: LD_INT 4
58575: PUSH
58576: LD_INT 5
58578: PUSH
58579: LD_INT 31
58581: PUSH
58582: LD_INT 32
58584: PUSH
58585: LD_INT 33
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: IN
58601: NOT
58602: PUSH
58603: LD_VAR 0 6
58607: PUSH
58608: LD_INT 1
58610: EQUAL
58611: AND
58612: OR
58613: PUSH
58614: LD_VAR 0 1
58618: PUSH
58619: LD_INT 2
58621: PUSH
58622: LD_INT 3
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: IN
58629: NOT
58630: PUSH
58631: LD_VAR 0 6
58635: PUSH
58636: LD_INT 2
58638: EQUAL
58639: AND
58640: OR
58641: IFFALSE 58651
// mode = 0 ;
58643: LD_ADDR_VAR 0 6
58647: PUSH
58648: LD_INT 0
58650: ST_TO_ADDR
// case mode of 0 :
58651: LD_VAR 0 6
58655: PUSH
58656: LD_INT 0
58658: DOUBLE
58659: EQUAL
58660: IFTRUE 58664
58662: GO 70117
58664: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58665: LD_ADDR_VAR 0 11
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 1
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: LD_INT 1
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 1
58723: NEG
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: LD_INT 1
58738: NEG
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 1
58746: NEG
58747: PUSH
58748: LD_INT 2
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 0
58758: PUSH
58759: LD_INT 2
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 1
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: LD_INT 2
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 0
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: NEG
58801: PUSH
58802: LD_INT 1
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 1
58811: PUSH
58812: LD_INT 3
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: LD_INT 3
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: LD_INT 2
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58858: LD_ADDR_VAR 0 12
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: LD_INT 0
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 1
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 1
58896: PUSH
58897: LD_INT 1
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 0
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 1
58939: PUSH
58940: LD_INT 1
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 2
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 2
58960: PUSH
58961: LD_INT 1
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 1
58970: NEG
58971: PUSH
58972: LD_INT 1
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 2
58981: NEG
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 2
58992: NEG
58993: PUSH
58994: LD_INT 1
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 2
59004: NEG
59005: PUSH
59006: LD_INT 1
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 3
59015: NEG
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 3
59026: NEG
59027: PUSH
59028: LD_INT 1
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59054: LD_ADDR_VAR 0 13
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: LD_INT 1
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 1
59092: PUSH
59093: LD_INT 1
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 0
59102: PUSH
59103: LD_INT 1
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 1
59112: NEG
59113: PUSH
59114: LD_INT 0
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: LD_INT 1
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 1
59135: NEG
59136: PUSH
59137: LD_INT 2
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 2
59147: PUSH
59148: LD_INT 1
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 2
59157: PUSH
59158: LD_INT 2
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: PUSH
59168: LD_INT 2
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 2
59177: NEG
59178: PUSH
59179: LD_INT 1
59181: NEG
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 2
59189: NEG
59190: PUSH
59191: LD_INT 2
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 2
59201: NEG
59202: PUSH
59203: LD_INT 3
59205: NEG
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 3
59213: NEG
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 3
59225: NEG
59226: PUSH
59227: LD_INT 3
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59253: LD_ADDR_VAR 0 14
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: LD_INT 0
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 0
59270: PUSH
59271: LD_INT 1
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 1
59281: PUSH
59282: LD_INT 0
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 1
59291: PUSH
59292: LD_INT 1
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: LD_INT 1
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 1
59311: NEG
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: LD_INT 1
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: NEG
59335: PUSH
59336: LD_INT 2
59338: NEG
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: LD_INT 2
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 1
59357: PUSH
59358: LD_INT 1
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 1
59368: PUSH
59369: LD_INT 2
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: LD_INT 2
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 1
59388: NEG
59389: PUSH
59390: LD_INT 1
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: LD_INT 3
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: LD_INT 3
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: PUSH
59423: LD_INT 2
59425: NEG
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59449: LD_ADDR_VAR 0 15
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 0
59466: PUSH
59467: LD_INT 1
59469: NEG
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: LD_INT 0
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 1
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 0
59497: PUSH
59498: LD_INT 1
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 1
59507: NEG
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: LD_INT 1
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 2
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 2
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 1
59561: NEG
59562: PUSH
59563: LD_INT 1
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 2
59572: NEG
59573: PUSH
59574: LD_INT 0
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 2
59583: NEG
59584: PUSH
59585: LD_INT 1
59587: NEG
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 2
59595: PUSH
59596: LD_INT 1
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 3
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 3
59616: PUSH
59617: LD_INT 1
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59642: LD_ADDR_VAR 0 16
59646: PUSH
59647: LD_INT 0
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: LD_INT 1
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 1
59680: PUSH
59681: LD_INT 1
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 0
59690: PUSH
59691: LD_INT 1
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 1
59700: NEG
59701: PUSH
59702: LD_INT 0
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 1
59711: NEG
59712: PUSH
59713: LD_INT 1
59715: NEG
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 1
59723: NEG
59724: PUSH
59725: LD_INT 2
59727: NEG
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 2
59735: PUSH
59736: LD_INT 1
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 2
59745: PUSH
59746: LD_INT 2
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 1
59755: PUSH
59756: LD_INT 2
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 2
59765: NEG
59766: PUSH
59767: LD_INT 1
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 2
59777: NEG
59778: PUSH
59779: LD_INT 2
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 3
59789: PUSH
59790: LD_INT 2
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 3
59799: PUSH
59800: LD_INT 3
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 2
59809: PUSH
59810: LD_INT 3
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59835: LD_ADDR_VAR 0 17
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 0
59852: PUSH
59853: LD_INT 1
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 1
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 0
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 1
59893: NEG
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 1
59904: NEG
59905: PUSH
59906: LD_INT 1
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: NEG
59917: PUSH
59918: LD_INT 2
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 0
59928: PUSH
59929: LD_INT 2
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 1
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 2
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 2
59960: PUSH
59961: LD_INT 1
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 2
59970: PUSH
59971: LD_INT 2
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 1
59980: PUSH
59981: LD_INT 2
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: LD_INT 2
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: LD_INT 1
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 2
60011: NEG
60012: PUSH
60013: LD_INT 0
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 2
60022: NEG
60023: PUSH
60024: LD_INT 1
60026: NEG
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 2
60034: NEG
60035: PUSH
60036: LD_INT 2
60038: NEG
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60065: LD_ADDR_VAR 0 18
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: LD_INT 0
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 0
60082: PUSH
60083: LD_INT 1
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: PUSH
60094: LD_INT 0
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 1
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: LD_INT 1
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: NEG
60124: PUSH
60125: LD_INT 0
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 1
60134: NEG
60135: PUSH
60136: LD_INT 1
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 1
60146: NEG
60147: PUSH
60148: LD_INT 2
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: LD_INT 2
60161: NEG
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: LD_INT 1
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 2
60180: PUSH
60181: LD_INT 0
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 2
60190: PUSH
60191: LD_INT 1
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 2
60200: PUSH
60201: LD_INT 2
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 1
60210: PUSH
60211: LD_INT 2
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: LD_INT 2
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 1
60230: NEG
60231: PUSH
60232: LD_INT 1
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 2
60241: NEG
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 2
60252: NEG
60253: PUSH
60254: LD_INT 1
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 2
60264: NEG
60265: PUSH
60266: LD_INT 2
60268: NEG
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60295: LD_ADDR_VAR 0 19
60299: PUSH
60300: LD_INT 0
60302: PUSH
60303: LD_INT 0
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 0
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 1
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 1
60333: PUSH
60334: LD_INT 1
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: LD_INT 1
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 1
60353: NEG
60354: PUSH
60355: LD_INT 0
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 1
60364: NEG
60365: PUSH
60366: LD_INT 1
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 1
60376: NEG
60377: PUSH
60378: LD_INT 2
60380: NEG
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: LD_INT 2
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 1
60399: PUSH
60400: LD_INT 1
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 2
60410: PUSH
60411: LD_INT 0
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 2
60420: PUSH
60421: LD_INT 1
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 2
60430: PUSH
60431: LD_INT 2
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: LD_INT 2
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: LD_INT 2
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 1
60460: NEG
60461: PUSH
60462: LD_INT 1
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 2
60471: NEG
60472: PUSH
60473: LD_INT 0
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 2
60482: NEG
60483: PUSH
60484: LD_INT 1
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 2
60494: NEG
60495: PUSH
60496: LD_INT 2
60498: NEG
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60525: LD_ADDR_VAR 0 20
60529: PUSH
60530: LD_INT 0
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 0
60542: PUSH
60543: LD_INT 1
60545: NEG
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 1
60553: PUSH
60554: LD_INT 0
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 1
60563: PUSH
60564: LD_INT 1
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 0
60573: PUSH
60574: LD_INT 1
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 1
60594: NEG
60595: PUSH
60596: LD_INT 1
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: PUSH
60608: LD_INT 2
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 0
60618: PUSH
60619: LD_INT 2
60621: NEG
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 1
60629: PUSH
60630: LD_INT 1
60632: NEG
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 2
60640: PUSH
60641: LD_INT 0
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 2
60650: PUSH
60651: LD_INT 1
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 2
60660: PUSH
60661: LD_INT 2
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 1
60670: PUSH
60671: LD_INT 2
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: LD_INT 2
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 1
60690: NEG
60691: PUSH
60692: LD_INT 1
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 2
60701: NEG
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 2
60712: NEG
60713: PUSH
60714: LD_INT 1
60716: NEG
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 2
60724: NEG
60725: PUSH
60726: LD_INT 2
60728: NEG
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60755: LD_ADDR_VAR 0 21
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 1
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 1
60793: PUSH
60794: LD_INT 1
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: LD_INT 1
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 1
60824: NEG
60825: PUSH
60826: LD_INT 1
60828: NEG
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 1
60836: NEG
60837: PUSH
60838: LD_INT 2
60840: NEG
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 0
60848: PUSH
60849: LD_INT 2
60851: NEG
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 1
60859: PUSH
60860: LD_INT 1
60862: NEG
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 2
60870: PUSH
60871: LD_INT 0
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 2
60880: PUSH
60881: LD_INT 1
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 2
60890: PUSH
60891: LD_INT 2
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 1
60900: PUSH
60901: LD_INT 2
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 0
60910: PUSH
60911: LD_INT 2
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 1
60920: NEG
60921: PUSH
60922: LD_INT 1
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 2
60931: NEG
60932: PUSH
60933: LD_INT 0
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 2
60942: NEG
60943: PUSH
60944: LD_INT 1
60946: NEG
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 2
60954: NEG
60955: PUSH
60956: LD_INT 2
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60985: LD_ADDR_VAR 0 22
60989: PUSH
60990: LD_INT 0
60992: PUSH
60993: LD_INT 0
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: LD_INT 1
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 1
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: LD_INT 1
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 0
61033: PUSH
61034: LD_INT 1
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 1
61043: NEG
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 1
61054: NEG
61055: PUSH
61056: LD_INT 1
61058: NEG
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 1
61066: NEG
61067: PUSH
61068: LD_INT 2
61070: NEG
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: LD_INT 2
61081: NEG
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 1
61089: PUSH
61090: LD_INT 1
61092: NEG
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 2
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 2
61110: PUSH
61111: LD_INT 1
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 2
61120: PUSH
61121: LD_INT 2
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 1
61130: PUSH
61131: LD_INT 2
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: LD_INT 2
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 1
61150: NEG
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 2
61161: NEG
61162: PUSH
61163: LD_INT 0
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 2
61172: NEG
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 2
61184: NEG
61185: PUSH
61186: LD_INT 2
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61215: LD_ADDR_VAR 0 23
61219: PUSH
61220: LD_INT 0
61222: PUSH
61223: LD_INT 0
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 0
61232: PUSH
61233: LD_INT 1
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 1
61243: PUSH
61244: LD_INT 0
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 1
61253: PUSH
61254: LD_INT 1
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: LD_INT 1
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 1
61273: NEG
61274: PUSH
61275: LD_INT 0
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 1
61284: NEG
61285: PUSH
61286: LD_INT 1
61288: NEG
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 1
61296: NEG
61297: PUSH
61298: LD_INT 2
61300: NEG
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 0
61308: PUSH
61309: LD_INT 2
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 1
61319: PUSH
61320: LD_INT 1
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 2
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 2
61340: PUSH
61341: LD_INT 1
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 2
61350: PUSH
61351: LD_INT 2
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: LD_INT 2
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: LD_INT 2
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: LD_INT 1
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 2
61391: NEG
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 2
61402: NEG
61403: PUSH
61404: LD_INT 1
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 2
61414: NEG
61415: PUSH
61416: LD_INT 2
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 2
61426: NEG
61427: PUSH
61428: LD_INT 3
61430: NEG
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 1
61438: NEG
61439: PUSH
61440: LD_INT 3
61442: NEG
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 1
61450: PUSH
61451: LD_INT 2
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 2
61461: PUSH
61462: LD_INT 1
61464: NEG
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
61495: LD_ADDR_VAR 0 24
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: LD_INT 1
61515: NEG
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 1
61523: PUSH
61524: LD_INT 0
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 1
61533: PUSH
61534: LD_INT 1
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: LD_INT 1
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 1
61553: NEG
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 1
61564: NEG
61565: PUSH
61566: LD_INT 1
61568: NEG
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 1
61576: NEG
61577: PUSH
61578: LD_INT 2
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 0
61588: PUSH
61589: LD_INT 2
61591: NEG
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 1
61599: PUSH
61600: LD_INT 1
61602: NEG
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 2
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 2
61620: PUSH
61621: LD_INT 1
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 2
61630: PUSH
61631: LD_INT 2
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: LD_INT 2
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: LD_INT 2
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: LD_INT 1
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 2
61671: NEG
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 2
61682: NEG
61683: PUSH
61684: LD_INT 1
61686: NEG
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 2
61694: NEG
61695: PUSH
61696: LD_INT 2
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 1
61706: PUSH
61707: LD_INT 2
61709: NEG
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 2
61717: PUSH
61718: LD_INT 1
61720: NEG
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 3
61728: PUSH
61729: LD_INT 1
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 3
61738: PUSH
61739: LD_INT 2
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
61771: LD_ADDR_VAR 0 25
61775: PUSH
61776: LD_INT 0
61778: PUSH
61779: LD_INT 0
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 0
61788: PUSH
61789: LD_INT 1
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 1
61799: PUSH
61800: LD_INT 0
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: LD_INT 1
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 0
61819: PUSH
61820: LD_INT 1
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 1
61829: NEG
61830: PUSH
61831: LD_INT 0
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 1
61840: NEG
61841: PUSH
61842: LD_INT 1
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 1
61852: NEG
61853: PUSH
61854: LD_INT 2
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 0
61864: PUSH
61865: LD_INT 2
61867: NEG
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: LD_INT 1
61878: NEG
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 2
61886: PUSH
61887: LD_INT 0
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 2
61896: PUSH
61897: LD_INT 1
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 2
61906: PUSH
61907: LD_INT 2
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: PUSH
61917: LD_INT 2
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 0
61926: PUSH
61927: LD_INT 2
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 1
61936: NEG
61937: PUSH
61938: LD_INT 1
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 2
61947: NEG
61948: PUSH
61949: LD_INT 0
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 2
61958: NEG
61959: PUSH
61960: LD_INT 1
61962: NEG
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 2
61970: NEG
61971: PUSH
61972: LD_INT 2
61974: NEG
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 3
61982: PUSH
61983: LD_INT 1
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 3
61992: PUSH
61993: LD_INT 2
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 2
62002: PUSH
62003: LD_INT 3
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 1
62012: PUSH
62013: LD_INT 3
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62045: LD_ADDR_VAR 0 26
62049: PUSH
62050: LD_INT 0
62052: PUSH
62053: LD_INT 0
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: LD_INT 1
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 1
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 1
62083: PUSH
62084: LD_INT 1
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 0
62093: PUSH
62094: LD_INT 1
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 1
62103: NEG
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 1
62114: NEG
62115: PUSH
62116: LD_INT 1
62118: NEG
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 1
62126: NEG
62127: PUSH
62128: LD_INT 2
62130: NEG
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 0
62138: PUSH
62139: LD_INT 2
62141: NEG
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 1
62149: PUSH
62150: LD_INT 1
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 2
62160: PUSH
62161: LD_INT 0
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 2
62170: PUSH
62171: LD_INT 1
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 2
62180: PUSH
62181: LD_INT 2
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 1
62190: PUSH
62191: LD_INT 2
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 0
62200: PUSH
62201: LD_INT 2
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 1
62210: NEG
62211: PUSH
62212: LD_INT 1
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 2
62221: NEG
62222: PUSH
62223: LD_INT 0
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 2
62232: NEG
62233: PUSH
62234: LD_INT 1
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 2
62244: NEG
62245: PUSH
62246: LD_INT 2
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 2
62256: PUSH
62257: LD_INT 3
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 1
62266: PUSH
62267: LD_INT 3
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: LD_INT 2
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 2
62287: NEG
62288: PUSH
62289: LD_INT 1
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62321: LD_ADDR_VAR 0 27
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: LD_INT 0
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 0
62338: PUSH
62339: LD_INT 1
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: LD_INT 0
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 1
62359: PUSH
62360: LD_INT 1
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 0
62369: PUSH
62370: LD_INT 1
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 1
62379: NEG
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 1
62390: NEG
62391: PUSH
62392: LD_INT 1
62394: NEG
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 1
62402: NEG
62403: PUSH
62404: LD_INT 2
62406: NEG
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 0
62414: PUSH
62415: LD_INT 2
62417: NEG
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 1
62425: PUSH
62426: LD_INT 1
62428: NEG
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 2
62436: PUSH
62437: LD_INT 0
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 2
62446: PUSH
62447: LD_INT 1
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 2
62456: PUSH
62457: LD_INT 2
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 1
62466: PUSH
62467: LD_INT 2
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: LD_INT 2
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 1
62486: NEG
62487: PUSH
62488: LD_INT 1
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 2
62497: NEG
62498: PUSH
62499: LD_INT 0
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 2
62508: NEG
62509: PUSH
62510: LD_INT 1
62512: NEG
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 2
62520: NEG
62521: PUSH
62522: LD_INT 2
62524: NEG
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 1
62532: NEG
62533: PUSH
62534: LD_INT 2
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 2
62543: NEG
62544: PUSH
62545: LD_INT 1
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 3
62554: NEG
62555: PUSH
62556: LD_INT 1
62558: NEG
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 3
62566: NEG
62567: PUSH
62568: LD_INT 2
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62601: LD_ADDR_VAR 0 28
62605: PUSH
62606: LD_INT 0
62608: PUSH
62609: LD_INT 0
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: LD_INT 1
62621: NEG
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 1
62629: PUSH
62630: LD_INT 0
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 1
62639: PUSH
62640: LD_INT 1
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 0
62649: PUSH
62650: LD_INT 1
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 1
62659: NEG
62660: PUSH
62661: LD_INT 0
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 1
62670: NEG
62671: PUSH
62672: LD_INT 1
62674: NEG
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 1
62682: NEG
62683: PUSH
62684: LD_INT 2
62686: NEG
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 0
62694: PUSH
62695: LD_INT 2
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 1
62705: PUSH
62706: LD_INT 1
62708: NEG
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 2
62716: PUSH
62717: LD_INT 0
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 2
62726: PUSH
62727: LD_INT 1
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 2
62736: PUSH
62737: LD_INT 2
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 1
62746: PUSH
62747: LD_INT 2
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 0
62756: PUSH
62757: LD_INT 2
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 1
62766: NEG
62767: PUSH
62768: LD_INT 1
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 2
62777: NEG
62778: PUSH
62779: LD_INT 0
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 2
62788: NEG
62789: PUSH
62790: LD_INT 1
62792: NEG
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 2
62800: NEG
62801: PUSH
62802: LD_INT 2
62804: NEG
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 2
62812: NEG
62813: PUSH
62814: LD_INT 3
62816: NEG
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 1
62824: NEG
62825: PUSH
62826: LD_INT 3
62828: NEG
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 3
62836: NEG
62837: PUSH
62838: LD_INT 1
62840: NEG
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 3
62848: NEG
62849: PUSH
62850: LD_INT 2
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62883: LD_ADDR_VAR 0 29
62887: PUSH
62888: LD_INT 0
62890: PUSH
62891: LD_INT 0
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 0
62900: PUSH
62901: LD_INT 1
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 1
62911: PUSH
62912: LD_INT 0
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 1
62921: PUSH
62922: LD_INT 1
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 0
62931: PUSH
62932: LD_INT 1
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 1
62941: NEG
62942: PUSH
62943: LD_INT 0
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 1
62952: NEG
62953: PUSH
62954: LD_INT 1
62956: NEG
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 1
62964: NEG
62965: PUSH
62966: LD_INT 2
62968: NEG
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: LD_INT 2
62979: NEG
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 1
62987: PUSH
62988: LD_INT 1
62990: NEG
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 2
62998: PUSH
62999: LD_INT 0
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 2
63008: PUSH
63009: LD_INT 1
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 1
63018: PUSH
63019: LD_INT 2
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 0
63028: PUSH
63029: LD_INT 2
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 1
63038: NEG
63039: PUSH
63040: LD_INT 1
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 2
63049: NEG
63050: PUSH
63051: LD_INT 1
63053: NEG
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 2
63061: NEG
63062: PUSH
63063: LD_INT 2
63065: NEG
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 2
63073: NEG
63074: PUSH
63075: LD_INT 3
63077: NEG
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 2
63085: PUSH
63086: LD_INT 1
63088: NEG
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 3
63096: PUSH
63097: LD_INT 1
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 1
63106: PUSH
63107: LD_INT 3
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 1
63116: NEG
63117: PUSH
63118: LD_INT 2
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 3
63127: NEG
63128: PUSH
63129: LD_INT 2
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63162: LD_ADDR_VAR 0 30
63166: PUSH
63167: LD_INT 0
63169: PUSH
63170: LD_INT 0
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 0
63179: PUSH
63180: LD_INT 1
63182: NEG
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 1
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 1
63200: PUSH
63201: LD_INT 1
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 0
63210: PUSH
63211: LD_INT 1
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 1
63220: NEG
63221: PUSH
63222: LD_INT 0
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 1
63231: NEG
63232: PUSH
63233: LD_INT 1
63235: NEG
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 1
63243: NEG
63244: PUSH
63245: LD_INT 2
63247: NEG
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: LD_INT 2
63258: NEG
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 1
63266: PUSH
63267: LD_INT 1
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 2
63277: PUSH
63278: LD_INT 0
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 2
63287: PUSH
63288: LD_INT 1
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 2
63297: PUSH
63298: LD_INT 2
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 1
63307: PUSH
63308: LD_INT 2
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 1
63317: NEG
63318: PUSH
63319: LD_INT 1
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 2
63328: NEG
63329: PUSH
63330: LD_INT 0
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 2
63339: NEG
63340: PUSH
63341: LD_INT 1
63343: NEG
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 1
63351: NEG
63352: PUSH
63353: LD_INT 3
63355: NEG
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 1
63363: PUSH
63364: LD_INT 2
63366: NEG
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 3
63374: PUSH
63375: LD_INT 2
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 2
63384: PUSH
63385: LD_INT 3
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 2
63394: NEG
63395: PUSH
63396: LD_INT 1
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 3
63405: NEG
63406: PUSH
63407: LD_INT 1
63409: NEG
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63440: LD_ADDR_VAR 0 31
63444: PUSH
63445: LD_INT 0
63447: PUSH
63448: LD_INT 0
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 0
63457: PUSH
63458: LD_INT 1
63460: NEG
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 1
63468: PUSH
63469: LD_INT 0
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 1
63478: PUSH
63479: LD_INT 1
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: LD_INT 1
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 1
63498: NEG
63499: PUSH
63500: LD_INT 0
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: LD_INT 1
63513: NEG
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 1
63521: NEG
63522: PUSH
63523: LD_INT 2
63525: NEG
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 1
63533: PUSH
63534: LD_INT 1
63536: NEG
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 2
63544: PUSH
63545: LD_INT 0
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 2
63554: PUSH
63555: LD_INT 1
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 2
63564: PUSH
63565: LD_INT 2
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 1
63574: PUSH
63575: LD_INT 2
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 0
63584: PUSH
63585: LD_INT 2
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 1
63594: NEG
63595: PUSH
63596: LD_INT 1
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 2
63605: NEG
63606: PUSH
63607: LD_INT 1
63609: NEG
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 2
63617: NEG
63618: PUSH
63619: LD_INT 2
63621: NEG
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 2
63629: NEG
63630: PUSH
63631: LD_INT 3
63633: NEG
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 2
63641: PUSH
63642: LD_INT 1
63644: NEG
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 3
63652: PUSH
63653: LD_INT 1
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 1
63662: PUSH
63663: LD_INT 3
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 1
63672: NEG
63673: PUSH
63674: LD_INT 2
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 3
63683: NEG
63684: PUSH
63685: LD_INT 2
63687: NEG
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63718: LD_ADDR_VAR 0 32
63722: PUSH
63723: LD_INT 0
63725: PUSH
63726: LD_INT 0
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 0
63735: PUSH
63736: LD_INT 1
63738: NEG
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 1
63746: PUSH
63747: LD_INT 0
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 1
63756: PUSH
63757: LD_INT 1
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 0
63766: PUSH
63767: LD_INT 1
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 1
63776: NEG
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 1
63787: NEG
63788: PUSH
63789: LD_INT 1
63791: NEG
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 1
63799: NEG
63800: PUSH
63801: LD_INT 2
63803: NEG
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 0
63811: PUSH
63812: LD_INT 2
63814: NEG
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 1
63822: PUSH
63823: LD_INT 1
63825: NEG
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 2
63833: PUSH
63834: LD_INT 1
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 2
63843: PUSH
63844: LD_INT 2
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 1
63853: PUSH
63854: LD_INT 2
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 0
63863: PUSH
63864: LD_INT 2
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 1
63873: NEG
63874: PUSH
63875: LD_INT 1
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 2
63884: NEG
63885: PUSH
63886: LD_INT 0
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 2
63895: NEG
63896: PUSH
63897: LD_INT 1
63899: NEG
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 1
63907: NEG
63908: PUSH
63909: LD_INT 3
63911: NEG
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 1
63919: PUSH
63920: LD_INT 2
63922: NEG
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 3
63930: PUSH
63931: LD_INT 2
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 2
63940: PUSH
63941: LD_INT 3
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 2
63950: NEG
63951: PUSH
63952: LD_INT 1
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 3
63961: NEG
63962: PUSH
63963: LD_INT 1
63965: NEG
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63996: LD_ADDR_VAR 0 33
64000: PUSH
64001: LD_INT 0
64003: PUSH
64004: LD_INT 0
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 0
64013: PUSH
64014: LD_INT 1
64016: NEG
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 1
64024: PUSH
64025: LD_INT 0
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 1
64034: PUSH
64035: LD_INT 1
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 0
64044: PUSH
64045: LD_INT 1
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 1
64054: NEG
64055: PUSH
64056: LD_INT 0
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 1
64065: NEG
64066: PUSH
64067: LD_INT 1
64069: NEG
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 1
64077: NEG
64078: PUSH
64079: LD_INT 2
64081: NEG
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 1
64089: PUSH
64090: LD_INT 1
64092: NEG
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 2
64100: PUSH
64101: LD_INT 0
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 2
64110: PUSH
64111: LD_INT 1
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 1
64120: PUSH
64121: LD_INT 2
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 0
64130: PUSH
64131: LD_INT 2
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 1
64140: NEG
64141: PUSH
64142: LD_INT 1
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 2
64151: NEG
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 2
64162: NEG
64163: PUSH
64164: LD_INT 1
64166: NEG
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 2
64174: NEG
64175: PUSH
64176: LD_INT 2
64178: NEG
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 2
64186: NEG
64187: PUSH
64188: LD_INT 3
64190: NEG
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 2
64198: PUSH
64199: LD_INT 1
64201: NEG
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 3
64209: PUSH
64210: LD_INT 1
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 1
64219: PUSH
64220: LD_INT 3
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 1
64229: NEG
64230: PUSH
64231: LD_INT 2
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 3
64240: NEG
64241: PUSH
64242: LD_INT 2
64244: NEG
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64275: LD_ADDR_VAR 0 34
64279: PUSH
64280: LD_INT 0
64282: PUSH
64283: LD_INT 0
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 0
64292: PUSH
64293: LD_INT 1
64295: NEG
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 1
64303: PUSH
64304: LD_INT 0
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 1
64313: PUSH
64314: LD_INT 1
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 0
64323: PUSH
64324: LD_INT 1
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 1
64333: NEG
64334: PUSH
64335: LD_INT 0
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 1
64344: NEG
64345: PUSH
64346: LD_INT 1
64348: NEG
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 1
64356: NEG
64357: PUSH
64358: LD_INT 2
64360: NEG
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 0
64368: PUSH
64369: LD_INT 2
64371: NEG
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 1
64379: PUSH
64380: LD_INT 1
64382: NEG
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 2
64390: PUSH
64391: LD_INT 1
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 2
64400: PUSH
64401: LD_INT 2
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 1
64410: PUSH
64411: LD_INT 2
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 1
64420: NEG
64421: PUSH
64422: LD_INT 1
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 2
64431: NEG
64432: PUSH
64433: LD_INT 0
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 2
64442: NEG
64443: PUSH
64444: LD_INT 1
64446: NEG
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 2
64454: NEG
64455: PUSH
64456: LD_INT 2
64458: NEG
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 1
64466: NEG
64467: PUSH
64468: LD_INT 3
64470: NEG
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 1
64478: PUSH
64479: LD_INT 2
64481: NEG
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 3
64489: PUSH
64490: LD_INT 2
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 2
64499: PUSH
64500: LD_INT 3
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 2
64509: NEG
64510: PUSH
64511: LD_INT 1
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 3
64520: NEG
64521: PUSH
64522: LD_INT 1
64524: NEG
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64555: LD_ADDR_VAR 0 35
64559: PUSH
64560: LD_INT 0
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 0
64572: PUSH
64573: LD_INT 1
64575: NEG
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 1
64583: PUSH
64584: LD_INT 0
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 1
64593: PUSH
64594: LD_INT 1
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 0
64603: PUSH
64604: LD_INT 1
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 1
64613: NEG
64614: PUSH
64615: LD_INT 0
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 1
64624: NEG
64625: PUSH
64626: LD_INT 1
64628: NEG
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 2
64636: PUSH
64637: LD_INT 1
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 2
64646: NEG
64647: PUSH
64648: LD_INT 1
64650: NEG
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64667: LD_ADDR_VAR 0 36
64671: PUSH
64672: LD_INT 0
64674: PUSH
64675: LD_INT 0
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 0
64684: PUSH
64685: LD_INT 1
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 1
64695: PUSH
64696: LD_INT 0
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 1
64705: PUSH
64706: LD_INT 1
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 0
64715: PUSH
64716: LD_INT 1
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 1
64725: NEG
64726: PUSH
64727: LD_INT 0
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 1
64736: NEG
64737: PUSH
64738: LD_INT 1
64740: NEG
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 1
64748: NEG
64749: PUSH
64750: LD_INT 2
64752: NEG
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 1
64760: PUSH
64761: LD_INT 2
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64779: LD_ADDR_VAR 0 37
64783: PUSH
64784: LD_INT 0
64786: PUSH
64787: LD_INT 0
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 0
64796: PUSH
64797: LD_INT 1
64799: NEG
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 1
64807: PUSH
64808: LD_INT 0
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 1
64817: PUSH
64818: LD_INT 1
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 0
64827: PUSH
64828: LD_INT 1
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 1
64837: NEG
64838: PUSH
64839: LD_INT 0
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 1
64848: NEG
64849: PUSH
64850: LD_INT 1
64852: NEG
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 1
64860: PUSH
64861: LD_INT 1
64863: NEG
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 1
64871: NEG
64872: PUSH
64873: LD_INT 1
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64891: LD_ADDR_VAR 0 38
64895: PUSH
64896: LD_INT 0
64898: PUSH
64899: LD_INT 0
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 0
64908: PUSH
64909: LD_INT 1
64911: NEG
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 1
64919: PUSH
64920: LD_INT 0
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 1
64929: PUSH
64930: LD_INT 1
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 0
64939: PUSH
64940: LD_INT 1
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 1
64949: NEG
64950: PUSH
64951: LD_INT 0
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 1
64960: NEG
64961: PUSH
64962: LD_INT 1
64964: NEG
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 2
64972: PUSH
64973: LD_INT 1
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 2
64982: NEG
64983: PUSH
64984: LD_INT 1
64986: NEG
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
65003: LD_ADDR_VAR 0 39
65007: PUSH
65008: LD_INT 0
65010: PUSH
65011: LD_INT 0
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 0
65020: PUSH
65021: LD_INT 1
65023: NEG
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 1
65031: PUSH
65032: LD_INT 0
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 1
65041: PUSH
65042: LD_INT 1
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 0
65051: PUSH
65052: LD_INT 1
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 1
65061: NEG
65062: PUSH
65063: LD_INT 0
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 1
65072: NEG
65073: PUSH
65074: LD_INT 1
65076: NEG
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 1
65084: NEG
65085: PUSH
65086: LD_INT 2
65088: NEG
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 1
65096: PUSH
65097: LD_INT 2
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
65115: LD_ADDR_VAR 0 40
65119: PUSH
65120: LD_INT 0
65122: PUSH
65123: LD_INT 0
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: LD_INT 1
65135: NEG
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 1
65143: PUSH
65144: LD_INT 0
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 1
65153: PUSH
65154: LD_INT 1
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 0
65163: PUSH
65164: LD_INT 1
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 1
65173: NEG
65174: PUSH
65175: LD_INT 0
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 1
65184: NEG
65185: PUSH
65186: LD_INT 1
65188: NEG
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 1
65196: PUSH
65197: LD_INT 1
65199: NEG
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 1
65207: NEG
65208: PUSH
65209: LD_INT 1
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65227: LD_ADDR_VAR 0 41
65231: PUSH
65232: LD_INT 0
65234: PUSH
65235: LD_INT 0
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 0
65244: PUSH
65245: LD_INT 1
65247: NEG
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 1
65255: PUSH
65256: LD_INT 0
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 1
65265: PUSH
65266: LD_INT 1
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 0
65275: PUSH
65276: LD_INT 1
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 1
65285: NEG
65286: PUSH
65287: LD_INT 0
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 1
65296: NEG
65297: PUSH
65298: LD_INT 1
65300: NEG
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 1
65308: NEG
65309: PUSH
65310: LD_INT 2
65312: NEG
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 1
65320: PUSH
65321: LD_INT 1
65323: NEG
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 2
65331: PUSH
65332: LD_INT 0
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 2
65341: PUSH
65342: LD_INT 1
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 2
65351: PUSH
65352: LD_INT 2
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 1
65361: PUSH
65362: LD_INT 2
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 1
65371: NEG
65372: PUSH
65373: LD_INT 1
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 2
65382: NEG
65383: PUSH
65384: LD_INT 0
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 2
65393: NEG
65394: PUSH
65395: LD_INT 1
65397: NEG
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 2
65405: NEG
65406: PUSH
65407: LD_INT 2
65409: NEG
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 2
65417: NEG
65418: PUSH
65419: LD_INT 3
65421: NEG
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 2
65429: PUSH
65430: LD_INT 1
65432: NEG
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 3
65440: PUSH
65441: LD_INT 0
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 3
65450: PUSH
65451: LD_INT 1
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 3
65460: PUSH
65461: LD_INT 2
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 3
65470: PUSH
65471: LD_INT 3
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 2
65480: PUSH
65481: LD_INT 3
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 2
65490: NEG
65491: PUSH
65492: LD_INT 1
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 3
65501: NEG
65502: PUSH
65503: LD_INT 0
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 3
65512: NEG
65513: PUSH
65514: LD_INT 1
65516: NEG
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 3
65524: NEG
65525: PUSH
65526: LD_INT 2
65528: NEG
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 3
65536: NEG
65537: PUSH
65538: LD_INT 3
65540: NEG
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65577: LD_ADDR_VAR 0 42
65581: PUSH
65582: LD_INT 0
65584: PUSH
65585: LD_INT 0
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 0
65594: PUSH
65595: LD_INT 1
65597: NEG
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 1
65605: PUSH
65606: LD_INT 0
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 1
65615: PUSH
65616: LD_INT 1
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 0
65625: PUSH
65626: LD_INT 1
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 1
65635: NEG
65636: PUSH
65637: LD_INT 0
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 1
65646: NEG
65647: PUSH
65648: LD_INT 1
65650: NEG
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 1
65658: NEG
65659: PUSH
65660: LD_INT 2
65662: NEG
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 0
65670: PUSH
65671: LD_INT 2
65673: NEG
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 1
65681: PUSH
65682: LD_INT 1
65684: NEG
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 2
65692: PUSH
65693: LD_INT 1
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 2
65702: PUSH
65703: LD_INT 2
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 1
65712: PUSH
65713: LD_INT 2
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 0
65722: PUSH
65723: LD_INT 2
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 1
65732: NEG
65733: PUSH
65734: LD_INT 1
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 2
65743: NEG
65744: PUSH
65745: LD_INT 1
65747: NEG
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 2
65755: NEG
65756: PUSH
65757: LD_INT 2
65759: NEG
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 2
65767: NEG
65768: PUSH
65769: LD_INT 3
65771: NEG
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 1
65779: NEG
65780: PUSH
65781: LD_INT 3
65783: NEG
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 0
65791: PUSH
65792: LD_INT 3
65794: NEG
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 1
65802: PUSH
65803: LD_INT 2
65805: NEG
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 3
65813: PUSH
65814: LD_INT 2
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 3
65823: PUSH
65824: LD_INT 3
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 2
65833: PUSH
65834: LD_INT 3
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 1
65843: PUSH
65844: LD_INT 3
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 0
65853: PUSH
65854: LD_INT 3
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 1
65863: NEG
65864: PUSH
65865: LD_INT 2
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 3
65874: NEG
65875: PUSH
65876: LD_INT 2
65878: NEG
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 3
65886: NEG
65887: PUSH
65888: LD_INT 3
65890: NEG
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65927: LD_ADDR_VAR 0 43
65931: PUSH
65932: LD_INT 0
65934: PUSH
65935: LD_INT 0
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 0
65944: PUSH
65945: LD_INT 1
65947: NEG
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 1
65955: PUSH
65956: LD_INT 0
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 1
65965: PUSH
65966: LD_INT 1
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 0
65975: PUSH
65976: LD_INT 1
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 1
65985: NEG
65986: PUSH
65987: LD_INT 0
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 1
65996: NEG
65997: PUSH
65998: LD_INT 1
66000: NEG
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: LD_INT 1
66008: NEG
66009: PUSH
66010: LD_INT 2
66012: NEG
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 0
66020: PUSH
66021: LD_INT 2
66023: NEG
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 1
66031: PUSH
66032: LD_INT 1
66034: NEG
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 2
66042: PUSH
66043: LD_INT 0
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 2
66052: PUSH
66053: LD_INT 1
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 1
66062: PUSH
66063: LD_INT 2
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 0
66072: PUSH
66073: LD_INT 2
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 1
66082: NEG
66083: PUSH
66084: LD_INT 1
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 2
66093: NEG
66094: PUSH
66095: LD_INT 0
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 2
66104: NEG
66105: PUSH
66106: LD_INT 1
66108: NEG
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 1
66116: NEG
66117: PUSH
66118: LD_INT 3
66120: NEG
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 0
66128: PUSH
66129: LD_INT 3
66131: NEG
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 1
66139: PUSH
66140: LD_INT 2
66142: NEG
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 2
66150: PUSH
66151: LD_INT 1
66153: NEG
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 3
66161: PUSH
66162: LD_INT 0
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 3
66171: PUSH
66172: LD_INT 1
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 1
66181: PUSH
66182: LD_INT 3
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 0
66191: PUSH
66192: LD_INT 3
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 1
66201: NEG
66202: PUSH
66203: LD_INT 2
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 2
66212: NEG
66213: PUSH
66214: LD_INT 1
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 3
66223: NEG
66224: PUSH
66225: LD_INT 0
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 3
66234: NEG
66235: PUSH
66236: LD_INT 1
66238: NEG
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66275: LD_ADDR_VAR 0 44
66279: PUSH
66280: LD_INT 0
66282: PUSH
66283: LD_INT 0
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 0
66292: PUSH
66293: LD_INT 1
66295: NEG
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 1
66303: PUSH
66304: LD_INT 0
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 1
66313: PUSH
66314: LD_INT 1
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 0
66323: PUSH
66324: LD_INT 1
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 1
66333: NEG
66334: PUSH
66335: LD_INT 0
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 1
66344: NEG
66345: PUSH
66346: LD_INT 1
66348: NEG
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 1
66356: NEG
66357: PUSH
66358: LD_INT 2
66360: NEG
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 1
66368: PUSH
66369: LD_INT 1
66371: NEG
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 2
66379: PUSH
66380: LD_INT 0
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 2
66389: PUSH
66390: LD_INT 1
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 2
66399: PUSH
66400: LD_INT 2
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 1
66409: PUSH
66410: LD_INT 2
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 1
66419: NEG
66420: PUSH
66421: LD_INT 1
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 2
66430: NEG
66431: PUSH
66432: LD_INT 0
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 2
66441: NEG
66442: PUSH
66443: LD_INT 1
66445: NEG
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 2
66453: NEG
66454: PUSH
66455: LD_INT 2
66457: NEG
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 2
66465: NEG
66466: PUSH
66467: LD_INT 3
66469: NEG
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 2
66477: PUSH
66478: LD_INT 1
66480: NEG
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 3
66488: PUSH
66489: LD_INT 0
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 3
66498: PUSH
66499: LD_INT 1
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 3
66508: PUSH
66509: LD_INT 2
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 3
66518: PUSH
66519: LD_INT 3
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 2
66528: PUSH
66529: LD_INT 3
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 2
66538: NEG
66539: PUSH
66540: LD_INT 1
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 3
66549: NEG
66550: PUSH
66551: LD_INT 0
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 3
66560: NEG
66561: PUSH
66562: LD_INT 1
66564: NEG
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 3
66572: NEG
66573: PUSH
66574: LD_INT 2
66576: NEG
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 3
66584: NEG
66585: PUSH
66586: LD_INT 3
66588: NEG
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66625: LD_ADDR_VAR 0 45
66629: PUSH
66630: LD_INT 0
66632: PUSH
66633: LD_INT 0
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 0
66642: PUSH
66643: LD_INT 1
66645: NEG
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 1
66653: PUSH
66654: LD_INT 0
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 1
66663: PUSH
66664: LD_INT 1
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: PUSH
66671: LD_INT 0
66673: PUSH
66674: LD_INT 1
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 1
66683: NEG
66684: PUSH
66685: LD_INT 0
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: LD_INT 1
66694: NEG
66695: PUSH
66696: LD_INT 1
66698: NEG
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 1
66706: NEG
66707: PUSH
66708: LD_INT 2
66710: NEG
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: LD_INT 0
66718: PUSH
66719: LD_INT 2
66721: NEG
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 1
66729: PUSH
66730: LD_INT 1
66732: NEG
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 2
66740: PUSH
66741: LD_INT 1
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 2
66750: PUSH
66751: LD_INT 2
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 1
66760: PUSH
66761: LD_INT 2
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 0
66770: PUSH
66771: LD_INT 2
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 1
66780: NEG
66781: PUSH
66782: LD_INT 1
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 2
66791: NEG
66792: PUSH
66793: LD_INT 1
66795: NEG
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 2
66803: NEG
66804: PUSH
66805: LD_INT 2
66807: NEG
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 2
66815: NEG
66816: PUSH
66817: LD_INT 3
66819: NEG
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: LD_INT 1
66827: NEG
66828: PUSH
66829: LD_INT 3
66831: NEG
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 0
66839: PUSH
66840: LD_INT 3
66842: NEG
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 1
66850: PUSH
66851: LD_INT 2
66853: NEG
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 3
66861: PUSH
66862: LD_INT 2
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 3
66871: PUSH
66872: LD_INT 3
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 2
66881: PUSH
66882: LD_INT 3
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 1
66891: PUSH
66892: LD_INT 3
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 0
66901: PUSH
66902: LD_INT 3
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 1
66911: NEG
66912: PUSH
66913: LD_INT 2
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 3
66922: NEG
66923: PUSH
66924: LD_INT 2
66926: NEG
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 3
66934: NEG
66935: PUSH
66936: LD_INT 3
66938: NEG
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66975: LD_ADDR_VAR 0 46
66979: PUSH
66980: LD_INT 0
66982: PUSH
66983: LD_INT 0
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 0
66992: PUSH
66993: LD_INT 1
66995: NEG
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 1
67003: PUSH
67004: LD_INT 0
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 1
67013: PUSH
67014: LD_INT 1
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 0
67023: PUSH
67024: LD_INT 1
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 1
67033: NEG
67034: PUSH
67035: LD_INT 0
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 1
67044: NEG
67045: PUSH
67046: LD_INT 1
67048: NEG
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PUSH
67054: LD_INT 1
67056: NEG
67057: PUSH
67058: LD_INT 2
67060: NEG
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: PUSH
67066: LD_INT 0
67068: PUSH
67069: LD_INT 2
67071: NEG
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 1
67079: PUSH
67080: LD_INT 1
67082: NEG
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 2
67090: PUSH
67091: LD_INT 0
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 2
67100: PUSH
67101: LD_INT 1
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 1
67110: PUSH
67111: LD_INT 2
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 0
67120: PUSH
67121: LD_INT 2
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 1
67130: NEG
67131: PUSH
67132: LD_INT 1
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 2
67141: NEG
67142: PUSH
67143: LD_INT 0
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 2
67152: NEG
67153: PUSH
67154: LD_INT 1
67156: NEG
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 1
67164: NEG
67165: PUSH
67166: LD_INT 3
67168: NEG
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 0
67176: PUSH
67177: LD_INT 3
67179: NEG
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 1
67187: PUSH
67188: LD_INT 2
67190: NEG
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: PUSH
67196: LD_INT 2
67198: PUSH
67199: LD_INT 1
67201: NEG
67202: PUSH
67203: EMPTY
67204: LIST
67205: LIST
67206: PUSH
67207: LD_INT 3
67209: PUSH
67210: LD_INT 0
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 3
67219: PUSH
67220: LD_INT 1
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 1
67229: PUSH
67230: LD_INT 3
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 0
67239: PUSH
67240: LD_INT 3
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 1
67249: NEG
67250: PUSH
67251: LD_INT 2
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 2
67260: NEG
67261: PUSH
67262: LD_INT 1
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 3
67271: NEG
67272: PUSH
67273: LD_INT 0
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: PUSH
67280: LD_INT 3
67282: NEG
67283: PUSH
67284: LD_INT 1
67286: NEG
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67323: LD_ADDR_VAR 0 47
67327: PUSH
67328: LD_INT 0
67330: PUSH
67331: LD_INT 0
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 0
67340: PUSH
67341: LD_INT 1
67343: NEG
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 1
67351: PUSH
67352: LD_INT 0
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 1
67361: PUSH
67362: LD_INT 1
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 0
67371: PUSH
67372: LD_INT 1
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 1
67381: NEG
67382: PUSH
67383: LD_INT 0
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 1
67392: NEG
67393: PUSH
67394: LD_INT 1
67396: NEG
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 1
67404: NEG
67405: PUSH
67406: LD_INT 2
67408: NEG
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 0
67416: PUSH
67417: LD_INT 2
67419: NEG
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 1
67427: PUSH
67428: LD_INT 1
67430: NEG
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 2
67438: NEG
67439: PUSH
67440: LD_INT 1
67442: NEG
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 2
67450: NEG
67451: PUSH
67452: LD_INT 2
67454: NEG
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67474: LD_ADDR_VAR 0 48
67478: PUSH
67479: LD_INT 0
67481: PUSH
67482: LD_INT 0
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 0
67491: PUSH
67492: LD_INT 1
67494: NEG
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 1
67502: PUSH
67503: LD_INT 0
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 1
67512: PUSH
67513: LD_INT 1
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 0
67522: PUSH
67523: LD_INT 1
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 1
67532: NEG
67533: PUSH
67534: LD_INT 0
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 1
67543: NEG
67544: PUSH
67545: LD_INT 1
67547: NEG
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 1
67555: NEG
67556: PUSH
67557: LD_INT 2
67559: NEG
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 0
67567: PUSH
67568: LD_INT 2
67570: NEG
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 1
67578: PUSH
67579: LD_INT 1
67581: NEG
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: LD_INT 2
67589: PUSH
67590: LD_INT 0
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: LD_INT 2
67599: PUSH
67600: LD_INT 1
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67621: LD_ADDR_VAR 0 49
67625: PUSH
67626: LD_INT 0
67628: PUSH
67629: LD_INT 0
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 0
67638: PUSH
67639: LD_INT 1
67641: NEG
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 1
67649: PUSH
67650: LD_INT 0
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: LD_INT 1
67659: PUSH
67660: LD_INT 1
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: LD_INT 0
67669: PUSH
67670: LD_INT 1
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 1
67679: NEG
67680: PUSH
67681: LD_INT 0
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 1
67690: NEG
67691: PUSH
67692: LD_INT 1
67694: NEG
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 1
67702: PUSH
67703: LD_INT 1
67705: NEG
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 2
67713: PUSH
67714: LD_INT 0
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 2
67723: PUSH
67724: LD_INT 1
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 2
67733: PUSH
67734: LD_INT 2
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 1
67743: PUSH
67744: LD_INT 2
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67765: LD_ADDR_VAR 0 50
67769: PUSH
67770: LD_INT 0
67772: PUSH
67773: LD_INT 0
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 0
67782: PUSH
67783: LD_INT 1
67785: NEG
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 1
67793: PUSH
67794: LD_INT 0
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 1
67803: PUSH
67804: LD_INT 1
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 0
67813: PUSH
67814: LD_INT 1
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 1
67823: NEG
67824: PUSH
67825: LD_INT 0
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 1
67834: NEG
67835: PUSH
67836: LD_INT 1
67838: NEG
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 2
67846: PUSH
67847: LD_INT 1
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: LD_INT 2
67856: PUSH
67857: LD_INT 2
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 1
67866: PUSH
67867: LD_INT 2
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 0
67876: PUSH
67877: LD_INT 2
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 1
67886: NEG
67887: PUSH
67888: LD_INT 1
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67909: LD_ADDR_VAR 0 51
67913: PUSH
67914: LD_INT 0
67916: PUSH
67917: LD_INT 0
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 0
67926: PUSH
67927: LD_INT 1
67929: NEG
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 1
67937: PUSH
67938: LD_INT 0
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 1
67947: PUSH
67948: LD_INT 1
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 0
67957: PUSH
67958: LD_INT 1
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 1
67967: NEG
67968: PUSH
67969: LD_INT 0
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 1
67978: NEG
67979: PUSH
67980: LD_INT 1
67982: NEG
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 1
67990: PUSH
67991: LD_INT 2
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 0
68000: PUSH
68001: LD_INT 2
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 1
68010: NEG
68011: PUSH
68012: LD_INT 1
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 2
68021: NEG
68022: PUSH
68023: LD_INT 0
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 2
68032: NEG
68033: PUSH
68034: LD_INT 1
68036: NEG
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68056: LD_ADDR_VAR 0 52
68060: PUSH
68061: LD_INT 0
68063: PUSH
68064: LD_INT 0
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 0
68073: PUSH
68074: LD_INT 1
68076: NEG
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 1
68084: PUSH
68085: LD_INT 0
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 1
68094: PUSH
68095: LD_INT 1
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 0
68104: PUSH
68105: LD_INT 1
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 1
68114: NEG
68115: PUSH
68116: LD_INT 0
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 1
68125: NEG
68126: PUSH
68127: LD_INT 1
68129: NEG
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: LD_INT 1
68137: NEG
68138: PUSH
68139: LD_INT 2
68141: NEG
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 1
68149: NEG
68150: PUSH
68151: LD_INT 1
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 2
68160: NEG
68161: PUSH
68162: LD_INT 0
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 2
68171: NEG
68172: PUSH
68173: LD_INT 1
68175: NEG
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: LD_INT 2
68183: NEG
68184: PUSH
68185: LD_INT 2
68187: NEG
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: LIST
68202: LIST
68203: LIST
68204: LIST
68205: LIST
68206: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68207: LD_ADDR_VAR 0 53
68211: PUSH
68212: LD_INT 0
68214: PUSH
68215: LD_INT 0
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 0
68224: PUSH
68225: LD_INT 1
68227: NEG
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 1
68235: PUSH
68236: LD_INT 0
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 1
68245: PUSH
68246: LD_INT 1
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 0
68255: PUSH
68256: LD_INT 1
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 1
68265: NEG
68266: PUSH
68267: LD_INT 0
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 1
68276: NEG
68277: PUSH
68278: LD_INT 1
68280: NEG
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 1
68288: NEG
68289: PUSH
68290: LD_INT 2
68292: NEG
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: LD_INT 0
68300: PUSH
68301: LD_INT 2
68303: NEG
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 1
68311: PUSH
68312: LD_INT 1
68314: NEG
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 2
68322: PUSH
68323: LD_INT 0
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: LD_INT 2
68332: PUSH
68333: LD_INT 1
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 2
68342: PUSH
68343: LD_INT 2
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 1
68352: PUSH
68353: LD_INT 2
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: LD_INT 0
68362: PUSH
68363: LD_INT 2
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 1
68372: NEG
68373: PUSH
68374: LD_INT 1
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PUSH
68381: LD_INT 2
68383: NEG
68384: PUSH
68385: LD_INT 0
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 2
68394: NEG
68395: PUSH
68396: LD_INT 1
68398: NEG
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 2
68406: NEG
68407: PUSH
68408: LD_INT 2
68410: NEG
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68437: LD_ADDR_VAR 0 54
68441: PUSH
68442: LD_INT 0
68444: PUSH
68445: LD_INT 0
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 0
68454: PUSH
68455: LD_INT 1
68457: NEG
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: PUSH
68463: LD_INT 1
68465: PUSH
68466: LD_INT 0
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: LD_INT 1
68475: PUSH
68476: LD_INT 1
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 0
68485: PUSH
68486: LD_INT 1
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: PUSH
68493: LD_INT 1
68495: NEG
68496: PUSH
68497: LD_INT 0
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 1
68506: NEG
68507: PUSH
68508: LD_INT 1
68510: NEG
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: LD_INT 1
68518: NEG
68519: PUSH
68520: LD_INT 2
68522: NEG
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 0
68530: PUSH
68531: LD_INT 2
68533: NEG
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 1
68541: PUSH
68542: LD_INT 1
68544: NEG
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 2
68552: PUSH
68553: LD_INT 0
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 2
68562: PUSH
68563: LD_INT 1
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 2
68572: PUSH
68573: LD_INT 2
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 1
68582: PUSH
68583: LD_INT 2
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 0
68592: PUSH
68593: LD_INT 2
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 1
68602: NEG
68603: PUSH
68604: LD_INT 1
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: LD_INT 2
68613: NEG
68614: PUSH
68615: LD_INT 0
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: LD_INT 2
68624: NEG
68625: PUSH
68626: LD_INT 1
68628: NEG
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 2
68636: NEG
68637: PUSH
68638: LD_INT 2
68640: NEG
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68667: LD_ADDR_VAR 0 55
68671: PUSH
68672: LD_INT 0
68674: PUSH
68675: LD_INT 0
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 0
68684: PUSH
68685: LD_INT 1
68687: NEG
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 1
68695: PUSH
68696: LD_INT 0
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 1
68705: PUSH
68706: LD_INT 1
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 0
68715: PUSH
68716: LD_INT 1
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 1
68725: NEG
68726: PUSH
68727: LD_INT 0
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: LD_INT 1
68736: NEG
68737: PUSH
68738: LD_INT 1
68740: NEG
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 1
68748: NEG
68749: PUSH
68750: LD_INT 2
68752: NEG
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 0
68760: PUSH
68761: LD_INT 2
68763: NEG
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 1
68771: PUSH
68772: LD_INT 1
68774: NEG
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: LD_INT 2
68782: PUSH
68783: LD_INT 0
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: PUSH
68790: LD_INT 2
68792: PUSH
68793: LD_INT 1
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 2
68802: PUSH
68803: LD_INT 2
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 1
68812: PUSH
68813: LD_INT 2
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 0
68822: PUSH
68823: LD_INT 2
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 1
68832: NEG
68833: PUSH
68834: LD_INT 1
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: LD_INT 2
68843: NEG
68844: PUSH
68845: LD_INT 0
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 2
68854: NEG
68855: PUSH
68856: LD_INT 1
68858: NEG
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 2
68866: NEG
68867: PUSH
68868: LD_INT 2
68870: NEG
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68897: LD_ADDR_VAR 0 56
68901: PUSH
68902: LD_INT 0
68904: PUSH
68905: LD_INT 0
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 0
68914: PUSH
68915: LD_INT 1
68917: NEG
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 1
68925: PUSH
68926: LD_INT 0
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 1
68935: PUSH
68936: LD_INT 1
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 0
68945: PUSH
68946: LD_INT 1
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 1
68955: NEG
68956: PUSH
68957: LD_INT 0
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 1
68966: NEG
68967: PUSH
68968: LD_INT 1
68970: NEG
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 1
68978: NEG
68979: PUSH
68980: LD_INT 2
68982: NEG
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: LD_INT 0
68990: PUSH
68991: LD_INT 2
68993: NEG
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: LD_INT 1
69001: PUSH
69002: LD_INT 1
69004: NEG
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 2
69012: PUSH
69013: LD_INT 0
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 2
69022: PUSH
69023: LD_INT 1
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 2
69032: PUSH
69033: LD_INT 2
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 1
69042: PUSH
69043: LD_INT 2
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 0
69052: PUSH
69053: LD_INT 2
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 1
69062: NEG
69063: PUSH
69064: LD_INT 1
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 2
69073: NEG
69074: PUSH
69075: LD_INT 0
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: LD_INT 2
69084: NEG
69085: PUSH
69086: LD_INT 1
69088: NEG
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PUSH
69094: LD_INT 2
69096: NEG
69097: PUSH
69098: LD_INT 2
69100: NEG
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69127: LD_ADDR_VAR 0 57
69131: PUSH
69132: LD_INT 0
69134: PUSH
69135: LD_INT 0
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: PUSH
69142: LD_INT 0
69144: PUSH
69145: LD_INT 1
69147: NEG
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: LD_INT 1
69155: PUSH
69156: LD_INT 0
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 1
69165: PUSH
69166: LD_INT 1
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 0
69175: PUSH
69176: LD_INT 1
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 1
69185: NEG
69186: PUSH
69187: LD_INT 0
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 1
69196: NEG
69197: PUSH
69198: LD_INT 1
69200: NEG
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: LD_INT 1
69208: NEG
69209: PUSH
69210: LD_INT 2
69212: NEG
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 0
69220: PUSH
69221: LD_INT 2
69223: NEG
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_INT 1
69231: PUSH
69232: LD_INT 1
69234: NEG
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: LD_INT 2
69242: PUSH
69243: LD_INT 0
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 2
69252: PUSH
69253: LD_INT 1
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 2
69262: PUSH
69263: LD_INT 2
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: LD_INT 1
69272: PUSH
69273: LD_INT 2
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: LD_INT 0
69282: PUSH
69283: LD_INT 2
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 1
69292: NEG
69293: PUSH
69294: LD_INT 1
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: LD_INT 2
69303: NEG
69304: PUSH
69305: LD_INT 0
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: PUSH
69312: LD_INT 2
69314: NEG
69315: PUSH
69316: LD_INT 1
69318: NEG
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 2
69326: NEG
69327: PUSH
69328: LD_INT 2
69330: NEG
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: LIST
69344: LIST
69345: LIST
69346: LIST
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69357: LD_ADDR_VAR 0 58
69361: PUSH
69362: LD_INT 0
69364: PUSH
69365: LD_INT 0
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: PUSH
69372: LD_INT 0
69374: PUSH
69375: LD_INT 1
69377: NEG
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: LD_INT 1
69385: PUSH
69386: LD_INT 0
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 1
69395: PUSH
69396: LD_INT 1
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: LD_INT 0
69405: PUSH
69406: LD_INT 1
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 1
69415: NEG
69416: PUSH
69417: LD_INT 0
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 1
69426: NEG
69427: PUSH
69428: LD_INT 1
69430: NEG
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 1
69438: NEG
69439: PUSH
69440: LD_INT 2
69442: NEG
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: LD_INT 0
69450: PUSH
69451: LD_INT 2
69453: NEG
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: PUSH
69459: LD_INT 1
69461: PUSH
69462: LD_INT 1
69464: NEG
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 2
69472: PUSH
69473: LD_INT 0
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: LD_INT 2
69482: PUSH
69483: LD_INT 1
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 2
69492: PUSH
69493: LD_INT 2
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: LD_INT 1
69502: PUSH
69503: LD_INT 2
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: LD_INT 0
69512: PUSH
69513: LD_INT 2
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: PUSH
69520: LD_INT 1
69522: NEG
69523: PUSH
69524: LD_INT 1
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 2
69533: NEG
69534: PUSH
69535: LD_INT 0
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: PUSH
69542: LD_INT 2
69544: NEG
69545: PUSH
69546: LD_INT 1
69548: NEG
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 2
69556: NEG
69557: PUSH
69558: LD_INT 2
69560: NEG
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69587: LD_ADDR_VAR 0 59
69591: PUSH
69592: LD_INT 0
69594: PUSH
69595: LD_INT 0
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: PUSH
69602: LD_INT 0
69604: PUSH
69605: LD_INT 1
69607: NEG
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 1
69615: PUSH
69616: LD_INT 0
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PUSH
69623: LD_INT 1
69625: PUSH
69626: LD_INT 1
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: LD_INT 0
69635: PUSH
69636: LD_INT 1
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: LD_INT 1
69645: NEG
69646: PUSH
69647: LD_INT 0
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 1
69656: NEG
69657: PUSH
69658: LD_INT 1
69660: NEG
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69675: LD_ADDR_VAR 0 60
69679: PUSH
69680: LD_INT 0
69682: PUSH
69683: LD_INT 0
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 0
69692: PUSH
69693: LD_INT 1
69695: NEG
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: LD_INT 1
69703: PUSH
69704: LD_INT 0
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: PUSH
69711: LD_INT 1
69713: PUSH
69714: LD_INT 1
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: LD_INT 0
69723: PUSH
69724: LD_INT 1
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: LD_INT 1
69733: NEG
69734: PUSH
69735: LD_INT 0
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 1
69744: NEG
69745: PUSH
69746: LD_INT 1
69748: NEG
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69763: LD_ADDR_VAR 0 61
69767: PUSH
69768: LD_INT 0
69770: PUSH
69771: LD_INT 0
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: LD_INT 0
69780: PUSH
69781: LD_INT 1
69783: NEG
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 1
69791: PUSH
69792: LD_INT 0
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 1
69801: PUSH
69802: LD_INT 1
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: LD_INT 0
69811: PUSH
69812: LD_INT 1
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 1
69821: NEG
69822: PUSH
69823: LD_INT 0
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 1
69832: NEG
69833: PUSH
69834: LD_INT 1
69836: NEG
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: LIST
69846: LIST
69847: LIST
69848: LIST
69849: LIST
69850: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69851: LD_ADDR_VAR 0 62
69855: PUSH
69856: LD_INT 0
69858: PUSH
69859: LD_INT 0
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PUSH
69866: LD_INT 0
69868: PUSH
69869: LD_INT 1
69871: NEG
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: PUSH
69877: LD_INT 1
69879: PUSH
69880: LD_INT 0
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 1
69889: PUSH
69890: LD_INT 1
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 0
69899: PUSH
69900: LD_INT 1
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 1
69909: NEG
69910: PUSH
69911: LD_INT 0
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 1
69920: NEG
69921: PUSH
69922: LD_INT 1
69924: NEG
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69939: LD_ADDR_VAR 0 63
69943: PUSH
69944: LD_INT 0
69946: PUSH
69947: LD_INT 0
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 0
69956: PUSH
69957: LD_INT 1
69959: NEG
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 1
69967: PUSH
69968: LD_INT 0
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 1
69977: PUSH
69978: LD_INT 1
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 0
69987: PUSH
69988: LD_INT 1
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 1
69997: NEG
69998: PUSH
69999: LD_INT 0
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 1
70008: NEG
70009: PUSH
70010: LD_INT 1
70012: NEG
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70027: LD_ADDR_VAR 0 64
70031: PUSH
70032: LD_INT 0
70034: PUSH
70035: LD_INT 0
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: LD_INT 0
70044: PUSH
70045: LD_INT 1
70047: NEG
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 1
70055: PUSH
70056: LD_INT 0
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 1
70065: PUSH
70066: LD_INT 1
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: LD_INT 0
70075: PUSH
70076: LD_INT 1
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 1
70085: NEG
70086: PUSH
70087: LD_INT 0
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: PUSH
70094: LD_INT 1
70096: NEG
70097: PUSH
70098: LD_INT 1
70100: NEG
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: LIST
70110: LIST
70111: LIST
70112: LIST
70113: LIST
70114: ST_TO_ADDR
// end ; 1 :
70115: GO 76012
70117: LD_INT 1
70119: DOUBLE
70120: EQUAL
70121: IFTRUE 70125
70123: GO 72748
70125: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70126: LD_ADDR_VAR 0 11
70130: PUSH
70131: LD_INT 1
70133: NEG
70134: PUSH
70135: LD_INT 3
70137: NEG
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: LD_INT 0
70145: PUSH
70146: LD_INT 3
70148: NEG
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: PUSH
70154: LD_INT 1
70156: PUSH
70157: LD_INT 2
70159: NEG
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: LIST
70169: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70170: LD_ADDR_VAR 0 12
70174: PUSH
70175: LD_INT 2
70177: PUSH
70178: LD_INT 1
70180: NEG
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 3
70188: PUSH
70189: LD_INT 0
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PUSH
70196: LD_INT 3
70198: PUSH
70199: LD_INT 1
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: LIST
70210: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70211: LD_ADDR_VAR 0 13
70215: PUSH
70216: LD_INT 3
70218: PUSH
70219: LD_INT 2
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: LD_INT 3
70228: PUSH
70229: LD_INT 3
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: LD_INT 2
70238: PUSH
70239: LD_INT 3
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: LIST
70250: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70251: LD_ADDR_VAR 0 14
70255: PUSH
70256: LD_INT 1
70258: PUSH
70259: LD_INT 3
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: PUSH
70266: LD_INT 0
70268: PUSH
70269: LD_INT 3
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: PUSH
70276: LD_INT 1
70278: NEG
70279: PUSH
70280: LD_INT 2
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: LIST
70291: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70292: LD_ADDR_VAR 0 15
70296: PUSH
70297: LD_INT 2
70299: NEG
70300: PUSH
70301: LD_INT 1
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 3
70310: NEG
70311: PUSH
70312: LD_INT 0
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 3
70321: NEG
70322: PUSH
70323: LD_INT 1
70325: NEG
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: LIST
70335: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70336: LD_ADDR_VAR 0 16
70340: PUSH
70341: LD_INT 2
70343: NEG
70344: PUSH
70345: LD_INT 3
70347: NEG
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: PUSH
70353: LD_INT 3
70355: NEG
70356: PUSH
70357: LD_INT 2
70359: NEG
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: LD_INT 3
70367: NEG
70368: PUSH
70369: LD_INT 3
70371: NEG
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: LIST
70381: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70382: LD_ADDR_VAR 0 17
70386: PUSH
70387: LD_INT 1
70389: NEG
70390: PUSH
70391: LD_INT 3
70393: NEG
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: PUSH
70399: LD_INT 0
70401: PUSH
70402: LD_INT 3
70404: NEG
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 1
70412: PUSH
70413: LD_INT 2
70415: NEG
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: LIST
70425: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70426: LD_ADDR_VAR 0 18
70430: PUSH
70431: LD_INT 2
70433: PUSH
70434: LD_INT 1
70436: NEG
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: PUSH
70442: LD_INT 3
70444: PUSH
70445: LD_INT 0
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: LD_INT 3
70454: PUSH
70455: LD_INT 1
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: LIST
70466: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70467: LD_ADDR_VAR 0 19
70471: PUSH
70472: LD_INT 3
70474: PUSH
70475: LD_INT 2
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: PUSH
70482: LD_INT 3
70484: PUSH
70485: LD_INT 3
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: LD_INT 2
70494: PUSH
70495: LD_INT 3
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: EMPTY
70503: LIST
70504: LIST
70505: LIST
70506: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70507: LD_ADDR_VAR 0 20
70511: PUSH
70512: LD_INT 1
70514: PUSH
70515: LD_INT 3
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 0
70524: PUSH
70525: LD_INT 3
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: PUSH
70532: LD_INT 1
70534: NEG
70535: PUSH
70536: LD_INT 2
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: LIST
70547: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70548: LD_ADDR_VAR 0 21
70552: PUSH
70553: LD_INT 2
70555: NEG
70556: PUSH
70557: LD_INT 1
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 3
70566: NEG
70567: PUSH
70568: LD_INT 0
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PUSH
70575: LD_INT 3
70577: NEG
70578: PUSH
70579: LD_INT 1
70581: NEG
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: LIST
70591: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70592: LD_ADDR_VAR 0 22
70596: PUSH
70597: LD_INT 2
70599: NEG
70600: PUSH
70601: LD_INT 3
70603: NEG
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 3
70611: NEG
70612: PUSH
70613: LD_INT 2
70615: NEG
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: LD_INT 3
70623: NEG
70624: PUSH
70625: LD_INT 3
70627: NEG
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: LIST
70637: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
70638: LD_ADDR_VAR 0 23
70642: PUSH
70643: LD_INT 0
70645: PUSH
70646: LD_INT 3
70648: NEG
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: PUSH
70654: LD_INT 1
70656: NEG
70657: PUSH
70658: LD_INT 4
70660: NEG
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PUSH
70666: LD_INT 1
70668: PUSH
70669: LD_INT 3
70671: NEG
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: LIST
70681: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
70682: LD_ADDR_VAR 0 24
70686: PUSH
70687: LD_INT 3
70689: PUSH
70690: LD_INT 0
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: PUSH
70697: LD_INT 3
70699: PUSH
70700: LD_INT 1
70702: NEG
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: PUSH
70708: LD_INT 4
70710: PUSH
70711: LD_INT 1
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: LIST
70722: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
70723: LD_ADDR_VAR 0 25
70727: PUSH
70728: LD_INT 3
70730: PUSH
70731: LD_INT 3
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: LD_INT 4
70740: PUSH
70741: LD_INT 3
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: PUSH
70748: LD_INT 3
70750: PUSH
70751: LD_INT 4
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: LIST
70762: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
70763: LD_ADDR_VAR 0 26
70767: PUSH
70768: LD_INT 0
70770: PUSH
70771: LD_INT 3
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: PUSH
70778: LD_INT 1
70780: PUSH
70781: LD_INT 4
70783: PUSH
70784: EMPTY
70785: LIST
70786: LIST
70787: PUSH
70788: LD_INT 1
70790: NEG
70791: PUSH
70792: LD_INT 3
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: LIST
70803: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
70804: LD_ADDR_VAR 0 27
70808: PUSH
70809: LD_INT 3
70811: NEG
70812: PUSH
70813: LD_INT 0
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: PUSH
70820: LD_INT 3
70822: NEG
70823: PUSH
70824: LD_INT 1
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PUSH
70831: LD_INT 4
70833: NEG
70834: PUSH
70835: LD_INT 1
70837: NEG
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: PUSH
70843: EMPTY
70844: LIST
70845: LIST
70846: LIST
70847: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
70848: LD_ADDR_VAR 0 28
70852: PUSH
70853: LD_INT 3
70855: NEG
70856: PUSH
70857: LD_INT 3
70859: NEG
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: PUSH
70865: LD_INT 3
70867: NEG
70868: PUSH
70869: LD_INT 4
70871: NEG
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: PUSH
70877: LD_INT 4
70879: NEG
70880: PUSH
70881: LD_INT 3
70883: NEG
70884: PUSH
70885: EMPTY
70886: LIST
70887: LIST
70888: PUSH
70889: EMPTY
70890: LIST
70891: LIST
70892: LIST
70893: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
70894: LD_ADDR_VAR 0 29
70898: PUSH
70899: LD_INT 1
70901: NEG
70902: PUSH
70903: LD_INT 3
70905: NEG
70906: PUSH
70907: EMPTY
70908: LIST
70909: LIST
70910: PUSH
70911: LD_INT 0
70913: PUSH
70914: LD_INT 3
70916: NEG
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: PUSH
70922: LD_INT 1
70924: PUSH
70925: LD_INT 2
70927: NEG
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: LD_INT 1
70935: NEG
70936: PUSH
70937: LD_INT 4
70939: NEG
70940: PUSH
70941: EMPTY
70942: LIST
70943: LIST
70944: PUSH
70945: LD_INT 0
70947: PUSH
70948: LD_INT 4
70950: NEG
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_INT 1
70958: PUSH
70959: LD_INT 3
70961: NEG
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PUSH
70967: LD_INT 1
70969: NEG
70970: PUSH
70971: LD_INT 5
70973: NEG
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 0
70981: PUSH
70982: LD_INT 5
70984: NEG
70985: PUSH
70986: EMPTY
70987: LIST
70988: LIST
70989: PUSH
70990: LD_INT 1
70992: PUSH
70993: LD_INT 4
70995: NEG
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 1
71003: NEG
71004: PUSH
71005: LD_INT 6
71007: NEG
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: PUSH
71013: LD_INT 0
71015: PUSH
71016: LD_INT 6
71018: NEG
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 1
71026: PUSH
71027: LD_INT 5
71029: NEG
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: EMPTY
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
71049: LD_ADDR_VAR 0 30
71053: PUSH
71054: LD_INT 2
71056: PUSH
71057: LD_INT 1
71059: NEG
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: LD_INT 3
71067: PUSH
71068: LD_INT 0
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PUSH
71075: LD_INT 3
71077: PUSH
71078: LD_INT 1
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: PUSH
71085: LD_INT 3
71087: PUSH
71088: LD_INT 1
71090: NEG
71091: PUSH
71092: EMPTY
71093: LIST
71094: LIST
71095: PUSH
71096: LD_INT 4
71098: PUSH
71099: LD_INT 0
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: PUSH
71106: LD_INT 4
71108: PUSH
71109: LD_INT 1
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: PUSH
71116: LD_INT 4
71118: PUSH
71119: LD_INT 1
71121: NEG
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PUSH
71127: LD_INT 5
71129: PUSH
71130: LD_INT 0
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: PUSH
71137: LD_INT 5
71139: PUSH
71140: LD_INT 1
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: LD_INT 5
71149: PUSH
71150: LD_INT 1
71152: NEG
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: PUSH
71158: LD_INT 6
71160: PUSH
71161: LD_INT 0
71163: PUSH
71164: EMPTY
71165: LIST
71166: LIST
71167: PUSH
71168: LD_INT 6
71170: PUSH
71171: LD_INT 1
71173: PUSH
71174: EMPTY
71175: LIST
71176: LIST
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
71192: LD_ADDR_VAR 0 31
71196: PUSH
71197: LD_INT 3
71199: PUSH
71200: LD_INT 2
71202: PUSH
71203: EMPTY
71204: LIST
71205: LIST
71206: PUSH
71207: LD_INT 3
71209: PUSH
71210: LD_INT 3
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PUSH
71217: LD_INT 2
71219: PUSH
71220: LD_INT 3
71222: PUSH
71223: EMPTY
71224: LIST
71225: LIST
71226: PUSH
71227: LD_INT 4
71229: PUSH
71230: LD_INT 3
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: PUSH
71237: LD_INT 4
71239: PUSH
71240: LD_INT 4
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: PUSH
71247: LD_INT 3
71249: PUSH
71250: LD_INT 4
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: PUSH
71257: LD_INT 5
71259: PUSH
71260: LD_INT 4
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: PUSH
71267: LD_INT 5
71269: PUSH
71270: LD_INT 5
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: LD_INT 4
71279: PUSH
71280: LD_INT 5
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 6
71289: PUSH
71290: LD_INT 5
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: PUSH
71297: LD_INT 6
71299: PUSH
71300: LD_INT 6
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_INT 5
71309: PUSH
71310: LD_INT 6
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: PUSH
71317: EMPTY
71318: LIST
71319: LIST
71320: LIST
71321: LIST
71322: LIST
71323: LIST
71324: LIST
71325: LIST
71326: LIST
71327: LIST
71328: LIST
71329: LIST
71330: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
71331: LD_ADDR_VAR 0 32
71335: PUSH
71336: LD_INT 1
71338: PUSH
71339: LD_INT 3
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 0
71348: PUSH
71349: LD_INT 3
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PUSH
71356: LD_INT 1
71358: NEG
71359: PUSH
71360: LD_INT 2
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: PUSH
71367: LD_INT 1
71369: PUSH
71370: LD_INT 4
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 0
71379: PUSH
71380: LD_INT 4
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: PUSH
71387: LD_INT 1
71389: NEG
71390: PUSH
71391: LD_INT 3
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: PUSH
71398: LD_INT 1
71400: PUSH
71401: LD_INT 5
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: PUSH
71408: LD_INT 0
71410: PUSH
71411: LD_INT 5
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 1
71420: NEG
71421: PUSH
71422: LD_INT 4
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: PUSH
71429: LD_INT 1
71431: PUSH
71432: LD_INT 6
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PUSH
71439: LD_INT 0
71441: PUSH
71442: LD_INT 6
71444: PUSH
71445: EMPTY
71446: LIST
71447: LIST
71448: PUSH
71449: LD_INT 1
71451: NEG
71452: PUSH
71453: LD_INT 5
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
71474: LD_ADDR_VAR 0 33
71478: PUSH
71479: LD_INT 2
71481: NEG
71482: PUSH
71483: LD_INT 1
71485: PUSH
71486: EMPTY
71487: LIST
71488: LIST
71489: PUSH
71490: LD_INT 3
71492: NEG
71493: PUSH
71494: LD_INT 0
71496: PUSH
71497: EMPTY
71498: LIST
71499: LIST
71500: PUSH
71501: LD_INT 3
71503: NEG
71504: PUSH
71505: LD_INT 1
71507: NEG
71508: PUSH
71509: EMPTY
71510: LIST
71511: LIST
71512: PUSH
71513: LD_INT 3
71515: NEG
71516: PUSH
71517: LD_INT 1
71519: PUSH
71520: EMPTY
71521: LIST
71522: LIST
71523: PUSH
71524: LD_INT 4
71526: NEG
71527: PUSH
71528: LD_INT 0
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: PUSH
71535: LD_INT 4
71537: NEG
71538: PUSH
71539: LD_INT 1
71541: NEG
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: PUSH
71547: LD_INT 4
71549: NEG
71550: PUSH
71551: LD_INT 1
71553: PUSH
71554: EMPTY
71555: LIST
71556: LIST
71557: PUSH
71558: LD_INT 5
71560: NEG
71561: PUSH
71562: LD_INT 0
71564: PUSH
71565: EMPTY
71566: LIST
71567: LIST
71568: PUSH
71569: LD_INT 5
71571: NEG
71572: PUSH
71573: LD_INT 1
71575: NEG
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: PUSH
71581: LD_INT 5
71583: NEG
71584: PUSH
71585: LD_INT 1
71587: PUSH
71588: EMPTY
71589: LIST
71590: LIST
71591: PUSH
71592: LD_INT 6
71594: NEG
71595: PUSH
71596: LD_INT 0
71598: PUSH
71599: EMPTY
71600: LIST
71601: LIST
71602: PUSH
71603: LD_INT 6
71605: NEG
71606: PUSH
71607: LD_INT 1
71609: NEG
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: PUSH
71615: EMPTY
71616: LIST
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: LIST
71627: LIST
71628: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
71629: LD_ADDR_VAR 0 34
71633: PUSH
71634: LD_INT 2
71636: NEG
71637: PUSH
71638: LD_INT 3
71640: NEG
71641: PUSH
71642: EMPTY
71643: LIST
71644: LIST
71645: PUSH
71646: LD_INT 3
71648: NEG
71649: PUSH
71650: LD_INT 2
71652: NEG
71653: PUSH
71654: EMPTY
71655: LIST
71656: LIST
71657: PUSH
71658: LD_INT 3
71660: NEG
71661: PUSH
71662: LD_INT 3
71664: NEG
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: PUSH
71670: LD_INT 3
71672: NEG
71673: PUSH
71674: LD_INT 4
71676: NEG
71677: PUSH
71678: EMPTY
71679: LIST
71680: LIST
71681: PUSH
71682: LD_INT 4
71684: NEG
71685: PUSH
71686: LD_INT 3
71688: NEG
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: PUSH
71694: LD_INT 4
71696: NEG
71697: PUSH
71698: LD_INT 4
71700: NEG
71701: PUSH
71702: EMPTY
71703: LIST
71704: LIST
71705: PUSH
71706: LD_INT 4
71708: NEG
71709: PUSH
71710: LD_INT 5
71712: NEG
71713: PUSH
71714: EMPTY
71715: LIST
71716: LIST
71717: PUSH
71718: LD_INT 5
71720: NEG
71721: PUSH
71722: LD_INT 4
71724: NEG
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: PUSH
71730: LD_INT 5
71732: NEG
71733: PUSH
71734: LD_INT 5
71736: NEG
71737: PUSH
71738: EMPTY
71739: LIST
71740: LIST
71741: PUSH
71742: LD_INT 5
71744: NEG
71745: PUSH
71746: LD_INT 6
71748: NEG
71749: PUSH
71750: EMPTY
71751: LIST
71752: LIST
71753: PUSH
71754: LD_INT 6
71756: NEG
71757: PUSH
71758: LD_INT 5
71760: NEG
71761: PUSH
71762: EMPTY
71763: LIST
71764: LIST
71765: PUSH
71766: LD_INT 6
71768: NEG
71769: PUSH
71770: LD_INT 6
71772: NEG
71773: PUSH
71774: EMPTY
71775: LIST
71776: LIST
71777: PUSH
71778: EMPTY
71779: LIST
71780: LIST
71781: LIST
71782: LIST
71783: LIST
71784: LIST
71785: LIST
71786: LIST
71787: LIST
71788: LIST
71789: LIST
71790: LIST
71791: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
71792: LD_ADDR_VAR 0 41
71796: PUSH
71797: LD_INT 0
71799: PUSH
71800: LD_INT 2
71802: NEG
71803: PUSH
71804: EMPTY
71805: LIST
71806: LIST
71807: PUSH
71808: LD_INT 1
71810: NEG
71811: PUSH
71812: LD_INT 3
71814: NEG
71815: PUSH
71816: EMPTY
71817: LIST
71818: LIST
71819: PUSH
71820: LD_INT 1
71822: PUSH
71823: LD_INT 2
71825: NEG
71826: PUSH
71827: EMPTY
71828: LIST
71829: LIST
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: LIST
71835: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
71836: LD_ADDR_VAR 0 42
71840: PUSH
71841: LD_INT 2
71843: PUSH
71844: LD_INT 0
71846: PUSH
71847: EMPTY
71848: LIST
71849: LIST
71850: PUSH
71851: LD_INT 2
71853: PUSH
71854: LD_INT 1
71856: NEG
71857: PUSH
71858: EMPTY
71859: LIST
71860: LIST
71861: PUSH
71862: LD_INT 3
71864: PUSH
71865: LD_INT 1
71867: PUSH
71868: EMPTY
71869: LIST
71870: LIST
71871: PUSH
71872: EMPTY
71873: LIST
71874: LIST
71875: LIST
71876: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
71877: LD_ADDR_VAR 0 43
71881: PUSH
71882: LD_INT 2
71884: PUSH
71885: LD_INT 2
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: PUSH
71892: LD_INT 3
71894: PUSH
71895: LD_INT 2
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: PUSH
71902: LD_INT 2
71904: PUSH
71905: LD_INT 3
71907: PUSH
71908: EMPTY
71909: LIST
71910: LIST
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: LIST
71916: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
71917: LD_ADDR_VAR 0 44
71921: PUSH
71922: LD_INT 0
71924: PUSH
71925: LD_INT 2
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: PUSH
71932: LD_INT 1
71934: PUSH
71935: LD_INT 3
71937: PUSH
71938: EMPTY
71939: LIST
71940: LIST
71941: PUSH
71942: LD_INT 1
71944: NEG
71945: PUSH
71946: LD_INT 2
71948: PUSH
71949: EMPTY
71950: LIST
71951: LIST
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: LIST
71957: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
71958: LD_ADDR_VAR 0 45
71962: PUSH
71963: LD_INT 2
71965: NEG
71966: PUSH
71967: LD_INT 0
71969: PUSH
71970: EMPTY
71971: LIST
71972: LIST
71973: PUSH
71974: LD_INT 2
71976: NEG
71977: PUSH
71978: LD_INT 1
71980: PUSH
71981: EMPTY
71982: LIST
71983: LIST
71984: PUSH
71985: LD_INT 3
71987: NEG
71988: PUSH
71989: LD_INT 1
71991: NEG
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: LIST
72001: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
72002: LD_ADDR_VAR 0 46
72006: PUSH
72007: LD_INT 2
72009: NEG
72010: PUSH
72011: LD_INT 2
72013: NEG
72014: PUSH
72015: EMPTY
72016: LIST
72017: LIST
72018: PUSH
72019: LD_INT 2
72021: NEG
72022: PUSH
72023: LD_INT 3
72025: NEG
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: PUSH
72031: LD_INT 3
72033: NEG
72034: PUSH
72035: LD_INT 2
72037: NEG
72038: PUSH
72039: EMPTY
72040: LIST
72041: LIST
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: LIST
72047: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
72048: LD_ADDR_VAR 0 47
72052: PUSH
72053: LD_INT 2
72055: NEG
72056: PUSH
72057: LD_INT 3
72059: NEG
72060: PUSH
72061: EMPTY
72062: LIST
72063: LIST
72064: PUSH
72065: LD_INT 1
72067: NEG
72068: PUSH
72069: LD_INT 3
72071: NEG
72072: PUSH
72073: EMPTY
72074: LIST
72075: LIST
72076: PUSH
72077: EMPTY
72078: LIST
72079: LIST
72080: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
72081: LD_ADDR_VAR 0 48
72085: PUSH
72086: LD_INT 1
72088: PUSH
72089: LD_INT 2
72091: NEG
72092: PUSH
72093: EMPTY
72094: LIST
72095: LIST
72096: PUSH
72097: LD_INT 2
72099: PUSH
72100: LD_INT 1
72102: NEG
72103: PUSH
72104: EMPTY
72105: LIST
72106: LIST
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
72112: LD_ADDR_VAR 0 49
72116: PUSH
72117: LD_INT 3
72119: PUSH
72120: LD_INT 1
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: PUSH
72127: LD_INT 3
72129: PUSH
72130: LD_INT 2
72132: PUSH
72133: EMPTY
72134: LIST
72135: LIST
72136: PUSH
72137: EMPTY
72138: LIST
72139: LIST
72140: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
72141: LD_ADDR_VAR 0 50
72145: PUSH
72146: LD_INT 2
72148: PUSH
72149: LD_INT 3
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: PUSH
72156: LD_INT 1
72158: PUSH
72159: LD_INT 3
72161: PUSH
72162: EMPTY
72163: LIST
72164: LIST
72165: PUSH
72166: EMPTY
72167: LIST
72168: LIST
72169: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
72170: LD_ADDR_VAR 0 51
72174: PUSH
72175: LD_INT 1
72177: NEG
72178: PUSH
72179: LD_INT 2
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: PUSH
72186: LD_INT 2
72188: NEG
72189: PUSH
72190: LD_INT 1
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: PUSH
72197: EMPTY
72198: LIST
72199: LIST
72200: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
72201: LD_ADDR_VAR 0 52
72205: PUSH
72206: LD_INT 3
72208: NEG
72209: PUSH
72210: LD_INT 1
72212: NEG
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: PUSH
72218: LD_INT 3
72220: NEG
72221: PUSH
72222: LD_INT 2
72224: NEG
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: PUSH
72230: EMPTY
72231: LIST
72232: LIST
72233: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72234: LD_ADDR_VAR 0 53
72238: PUSH
72239: LD_INT 1
72241: NEG
72242: PUSH
72243: LD_INT 3
72245: NEG
72246: PUSH
72247: EMPTY
72248: LIST
72249: LIST
72250: PUSH
72251: LD_INT 0
72253: PUSH
72254: LD_INT 3
72256: NEG
72257: PUSH
72258: EMPTY
72259: LIST
72260: LIST
72261: PUSH
72262: LD_INT 1
72264: PUSH
72265: LD_INT 2
72267: NEG
72268: PUSH
72269: EMPTY
72270: LIST
72271: LIST
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: LIST
72277: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72278: LD_ADDR_VAR 0 54
72282: PUSH
72283: LD_INT 2
72285: PUSH
72286: LD_INT 1
72288: NEG
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: PUSH
72294: LD_INT 3
72296: PUSH
72297: LD_INT 0
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: PUSH
72304: LD_INT 3
72306: PUSH
72307: LD_INT 1
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: EMPTY
72315: LIST
72316: LIST
72317: LIST
72318: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72319: LD_ADDR_VAR 0 55
72323: PUSH
72324: LD_INT 3
72326: PUSH
72327: LD_INT 2
72329: PUSH
72330: EMPTY
72331: LIST
72332: LIST
72333: PUSH
72334: LD_INT 3
72336: PUSH
72337: LD_INT 3
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: PUSH
72344: LD_INT 2
72346: PUSH
72347: LD_INT 3
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: LIST
72358: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72359: LD_ADDR_VAR 0 56
72363: PUSH
72364: LD_INT 1
72366: PUSH
72367: LD_INT 3
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PUSH
72374: LD_INT 0
72376: PUSH
72377: LD_INT 3
72379: PUSH
72380: EMPTY
72381: LIST
72382: LIST
72383: PUSH
72384: LD_INT 1
72386: NEG
72387: PUSH
72388: LD_INT 2
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: PUSH
72395: EMPTY
72396: LIST
72397: LIST
72398: LIST
72399: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72400: LD_ADDR_VAR 0 57
72404: PUSH
72405: LD_INT 2
72407: NEG
72408: PUSH
72409: LD_INT 1
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: PUSH
72416: LD_INT 3
72418: NEG
72419: PUSH
72420: LD_INT 0
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: PUSH
72427: LD_INT 3
72429: NEG
72430: PUSH
72431: LD_INT 1
72433: NEG
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: PUSH
72439: EMPTY
72440: LIST
72441: LIST
72442: LIST
72443: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72444: LD_ADDR_VAR 0 58
72448: PUSH
72449: LD_INT 2
72451: NEG
72452: PUSH
72453: LD_INT 3
72455: NEG
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PUSH
72461: LD_INT 3
72463: NEG
72464: PUSH
72465: LD_INT 2
72467: NEG
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: PUSH
72473: LD_INT 3
72475: NEG
72476: PUSH
72477: LD_INT 3
72479: NEG
72480: PUSH
72481: EMPTY
72482: LIST
72483: LIST
72484: PUSH
72485: EMPTY
72486: LIST
72487: LIST
72488: LIST
72489: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
72490: LD_ADDR_VAR 0 59
72494: PUSH
72495: LD_INT 1
72497: NEG
72498: PUSH
72499: LD_INT 2
72501: NEG
72502: PUSH
72503: EMPTY
72504: LIST
72505: LIST
72506: PUSH
72507: LD_INT 0
72509: PUSH
72510: LD_INT 2
72512: NEG
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: PUSH
72518: LD_INT 1
72520: PUSH
72521: LD_INT 1
72523: NEG
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: PUSH
72529: EMPTY
72530: LIST
72531: LIST
72532: LIST
72533: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
72534: LD_ADDR_VAR 0 60
72538: PUSH
72539: LD_INT 1
72541: PUSH
72542: LD_INT 1
72544: NEG
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: PUSH
72550: LD_INT 2
72552: PUSH
72553: LD_INT 0
72555: PUSH
72556: EMPTY
72557: LIST
72558: LIST
72559: PUSH
72560: LD_INT 2
72562: PUSH
72563: LD_INT 1
72565: PUSH
72566: EMPTY
72567: LIST
72568: LIST
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: LIST
72574: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
72575: LD_ADDR_VAR 0 61
72579: PUSH
72580: LD_INT 2
72582: PUSH
72583: LD_INT 1
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: PUSH
72590: LD_INT 2
72592: PUSH
72593: LD_INT 2
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: PUSH
72600: LD_INT 1
72602: PUSH
72603: LD_INT 2
72605: PUSH
72606: EMPTY
72607: LIST
72608: LIST
72609: PUSH
72610: EMPTY
72611: LIST
72612: LIST
72613: LIST
72614: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
72615: LD_ADDR_VAR 0 62
72619: PUSH
72620: LD_INT 1
72622: PUSH
72623: LD_INT 2
72625: PUSH
72626: EMPTY
72627: LIST
72628: LIST
72629: PUSH
72630: LD_INT 0
72632: PUSH
72633: LD_INT 2
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: PUSH
72640: LD_INT 1
72642: NEG
72643: PUSH
72644: LD_INT 1
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: LIST
72655: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72656: LD_ADDR_VAR 0 63
72660: PUSH
72661: LD_INT 1
72663: NEG
72664: PUSH
72665: LD_INT 1
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: PUSH
72672: LD_INT 2
72674: NEG
72675: PUSH
72676: LD_INT 0
72678: PUSH
72679: EMPTY
72680: LIST
72681: LIST
72682: PUSH
72683: LD_INT 2
72685: NEG
72686: PUSH
72687: LD_INT 1
72689: NEG
72690: PUSH
72691: EMPTY
72692: LIST
72693: LIST
72694: PUSH
72695: EMPTY
72696: LIST
72697: LIST
72698: LIST
72699: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72700: LD_ADDR_VAR 0 64
72704: PUSH
72705: LD_INT 1
72707: NEG
72708: PUSH
72709: LD_INT 2
72711: NEG
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: PUSH
72717: LD_INT 2
72719: NEG
72720: PUSH
72721: LD_INT 1
72723: NEG
72724: PUSH
72725: EMPTY
72726: LIST
72727: LIST
72728: PUSH
72729: LD_INT 2
72731: NEG
72732: PUSH
72733: LD_INT 2
72735: NEG
72736: PUSH
72737: EMPTY
72738: LIST
72739: LIST
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: LIST
72745: ST_TO_ADDR
// end ; 2 :
72746: GO 76012
72748: LD_INT 2
72750: DOUBLE
72751: EQUAL
72752: IFTRUE 72756
72754: GO 76011
72756: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
72757: LD_ADDR_VAR 0 29
72761: PUSH
72762: LD_INT 4
72764: PUSH
72765: LD_INT 0
72767: PUSH
72768: EMPTY
72769: LIST
72770: LIST
72771: PUSH
72772: LD_INT 4
72774: PUSH
72775: LD_INT 1
72777: NEG
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: PUSH
72783: LD_INT 5
72785: PUSH
72786: LD_INT 0
72788: PUSH
72789: EMPTY
72790: LIST
72791: LIST
72792: PUSH
72793: LD_INT 5
72795: PUSH
72796: LD_INT 1
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: PUSH
72803: LD_INT 4
72805: PUSH
72806: LD_INT 1
72808: PUSH
72809: EMPTY
72810: LIST
72811: LIST
72812: PUSH
72813: LD_INT 3
72815: PUSH
72816: LD_INT 0
72818: PUSH
72819: EMPTY
72820: LIST
72821: LIST
72822: PUSH
72823: LD_INT 3
72825: PUSH
72826: LD_INT 1
72828: NEG
72829: PUSH
72830: EMPTY
72831: LIST
72832: LIST
72833: PUSH
72834: LD_INT 3
72836: PUSH
72837: LD_INT 2
72839: NEG
72840: PUSH
72841: EMPTY
72842: LIST
72843: LIST
72844: PUSH
72845: LD_INT 5
72847: PUSH
72848: LD_INT 2
72850: PUSH
72851: EMPTY
72852: LIST
72853: LIST
72854: PUSH
72855: LD_INT 3
72857: PUSH
72858: LD_INT 3
72860: PUSH
72861: EMPTY
72862: LIST
72863: LIST
72864: PUSH
72865: LD_INT 3
72867: PUSH
72868: LD_INT 2
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PUSH
72875: LD_INT 4
72877: PUSH
72878: LD_INT 3
72880: PUSH
72881: EMPTY
72882: LIST
72883: LIST
72884: PUSH
72885: LD_INT 4
72887: PUSH
72888: LD_INT 4
72890: PUSH
72891: EMPTY
72892: LIST
72893: LIST
72894: PUSH
72895: LD_INT 3
72897: PUSH
72898: LD_INT 4
72900: PUSH
72901: EMPTY
72902: LIST
72903: LIST
72904: PUSH
72905: LD_INT 2
72907: PUSH
72908: LD_INT 3
72910: PUSH
72911: EMPTY
72912: LIST
72913: LIST
72914: PUSH
72915: LD_INT 2
72917: PUSH
72918: LD_INT 2
72920: PUSH
72921: EMPTY
72922: LIST
72923: LIST
72924: PUSH
72925: LD_INT 4
72927: PUSH
72928: LD_INT 2
72930: PUSH
72931: EMPTY
72932: LIST
72933: LIST
72934: PUSH
72935: LD_INT 2
72937: PUSH
72938: LD_INT 4
72940: PUSH
72941: EMPTY
72942: LIST
72943: LIST
72944: PUSH
72945: LD_INT 0
72947: PUSH
72948: LD_INT 4
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: PUSH
72955: LD_INT 0
72957: PUSH
72958: LD_INT 3
72960: PUSH
72961: EMPTY
72962: LIST
72963: LIST
72964: PUSH
72965: LD_INT 1
72967: PUSH
72968: LD_INT 4
72970: PUSH
72971: EMPTY
72972: LIST
72973: LIST
72974: PUSH
72975: LD_INT 1
72977: PUSH
72978: LD_INT 5
72980: PUSH
72981: EMPTY
72982: LIST
72983: LIST
72984: PUSH
72985: LD_INT 0
72987: PUSH
72988: LD_INT 5
72990: PUSH
72991: EMPTY
72992: LIST
72993: LIST
72994: PUSH
72995: LD_INT 1
72997: NEG
72998: PUSH
72999: LD_INT 4
73001: PUSH
73002: EMPTY
73003: LIST
73004: LIST
73005: PUSH
73006: LD_INT 1
73008: NEG
73009: PUSH
73010: LD_INT 3
73012: PUSH
73013: EMPTY
73014: LIST
73015: LIST
73016: PUSH
73017: LD_INT 2
73019: PUSH
73020: LD_INT 5
73022: PUSH
73023: EMPTY
73024: LIST
73025: LIST
73026: PUSH
73027: LD_INT 2
73029: NEG
73030: PUSH
73031: LD_INT 3
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: PUSH
73038: LD_INT 3
73040: NEG
73041: PUSH
73042: LD_INT 0
73044: PUSH
73045: EMPTY
73046: LIST
73047: LIST
73048: PUSH
73049: LD_INT 3
73051: NEG
73052: PUSH
73053: LD_INT 1
73055: NEG
73056: PUSH
73057: EMPTY
73058: LIST
73059: LIST
73060: PUSH
73061: LD_INT 2
73063: NEG
73064: PUSH
73065: LD_INT 0
73067: PUSH
73068: EMPTY
73069: LIST
73070: LIST
73071: PUSH
73072: LD_INT 2
73074: NEG
73075: PUSH
73076: LD_INT 1
73078: PUSH
73079: EMPTY
73080: LIST
73081: LIST
73082: PUSH
73083: LD_INT 3
73085: NEG
73086: PUSH
73087: LD_INT 1
73089: PUSH
73090: EMPTY
73091: LIST
73092: LIST
73093: PUSH
73094: LD_INT 4
73096: NEG
73097: PUSH
73098: LD_INT 0
73100: PUSH
73101: EMPTY
73102: LIST
73103: LIST
73104: PUSH
73105: LD_INT 4
73107: NEG
73108: PUSH
73109: LD_INT 1
73111: NEG
73112: PUSH
73113: EMPTY
73114: LIST
73115: LIST
73116: PUSH
73117: LD_INT 4
73119: NEG
73120: PUSH
73121: LD_INT 2
73123: NEG
73124: PUSH
73125: EMPTY
73126: LIST
73127: LIST
73128: PUSH
73129: LD_INT 2
73131: NEG
73132: PUSH
73133: LD_INT 2
73135: PUSH
73136: EMPTY
73137: LIST
73138: LIST
73139: PUSH
73140: LD_INT 4
73142: NEG
73143: PUSH
73144: LD_INT 4
73146: NEG
73147: PUSH
73148: EMPTY
73149: LIST
73150: LIST
73151: PUSH
73152: LD_INT 4
73154: NEG
73155: PUSH
73156: LD_INT 5
73158: NEG
73159: PUSH
73160: EMPTY
73161: LIST
73162: LIST
73163: PUSH
73164: LD_INT 3
73166: NEG
73167: PUSH
73168: LD_INT 4
73170: NEG
73171: PUSH
73172: EMPTY
73173: LIST
73174: LIST
73175: PUSH
73176: LD_INT 3
73178: NEG
73179: PUSH
73180: LD_INT 3
73182: NEG
73183: PUSH
73184: EMPTY
73185: LIST
73186: LIST
73187: PUSH
73188: LD_INT 4
73190: NEG
73191: PUSH
73192: LD_INT 3
73194: NEG
73195: PUSH
73196: EMPTY
73197: LIST
73198: LIST
73199: PUSH
73200: LD_INT 5
73202: NEG
73203: PUSH
73204: LD_INT 4
73206: NEG
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: PUSH
73212: LD_INT 5
73214: NEG
73215: PUSH
73216: LD_INT 5
73218: NEG
73219: PUSH
73220: EMPTY
73221: LIST
73222: LIST
73223: PUSH
73224: LD_INT 3
73226: NEG
73227: PUSH
73228: LD_INT 5
73230: NEG
73231: PUSH
73232: EMPTY
73233: LIST
73234: LIST
73235: PUSH
73236: LD_INT 5
73238: NEG
73239: PUSH
73240: LD_INT 3
73242: NEG
73243: PUSH
73244: EMPTY
73245: LIST
73246: LIST
73247: PUSH
73248: EMPTY
73249: LIST
73250: LIST
73251: LIST
73252: LIST
73253: LIST
73254: LIST
73255: LIST
73256: LIST
73257: LIST
73258: LIST
73259: LIST
73260: LIST
73261: LIST
73262: LIST
73263: LIST
73264: LIST
73265: LIST
73266: LIST
73267: LIST
73268: LIST
73269: LIST
73270: LIST
73271: LIST
73272: LIST
73273: LIST
73274: LIST
73275: LIST
73276: LIST
73277: LIST
73278: LIST
73279: LIST
73280: LIST
73281: LIST
73282: LIST
73283: LIST
73284: LIST
73285: LIST
73286: LIST
73287: LIST
73288: LIST
73289: LIST
73290: LIST
73291: LIST
73292: LIST
73293: LIST
73294: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
73295: LD_ADDR_VAR 0 30
73299: PUSH
73300: LD_INT 4
73302: PUSH
73303: LD_INT 4
73305: PUSH
73306: EMPTY
73307: LIST
73308: LIST
73309: PUSH
73310: LD_INT 4
73312: PUSH
73313: LD_INT 3
73315: PUSH
73316: EMPTY
73317: LIST
73318: LIST
73319: PUSH
73320: LD_INT 5
73322: PUSH
73323: LD_INT 4
73325: PUSH
73326: EMPTY
73327: LIST
73328: LIST
73329: PUSH
73330: LD_INT 5
73332: PUSH
73333: LD_INT 5
73335: PUSH
73336: EMPTY
73337: LIST
73338: LIST
73339: PUSH
73340: LD_INT 4
73342: PUSH
73343: LD_INT 5
73345: PUSH
73346: EMPTY
73347: LIST
73348: LIST
73349: PUSH
73350: LD_INT 3
73352: PUSH
73353: LD_INT 4
73355: PUSH
73356: EMPTY
73357: LIST
73358: LIST
73359: PUSH
73360: LD_INT 3
73362: PUSH
73363: LD_INT 3
73365: PUSH
73366: EMPTY
73367: LIST
73368: LIST
73369: PUSH
73370: LD_INT 5
73372: PUSH
73373: LD_INT 3
73375: PUSH
73376: EMPTY
73377: LIST
73378: LIST
73379: PUSH
73380: LD_INT 3
73382: PUSH
73383: LD_INT 5
73385: PUSH
73386: EMPTY
73387: LIST
73388: LIST
73389: PUSH
73390: LD_INT 0
73392: PUSH
73393: LD_INT 3
73395: PUSH
73396: EMPTY
73397: LIST
73398: LIST
73399: PUSH
73400: LD_INT 0
73402: PUSH
73403: LD_INT 2
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: PUSH
73410: LD_INT 1
73412: PUSH
73413: LD_INT 3
73415: PUSH
73416: EMPTY
73417: LIST
73418: LIST
73419: PUSH
73420: LD_INT 1
73422: PUSH
73423: LD_INT 4
73425: PUSH
73426: EMPTY
73427: LIST
73428: LIST
73429: PUSH
73430: LD_INT 0
73432: PUSH
73433: LD_INT 4
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: PUSH
73440: LD_INT 1
73442: NEG
73443: PUSH
73444: LD_INT 3
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: PUSH
73451: LD_INT 1
73453: NEG
73454: PUSH
73455: LD_INT 2
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: PUSH
73462: LD_INT 2
73464: PUSH
73465: LD_INT 4
73467: PUSH
73468: EMPTY
73469: LIST
73470: LIST
73471: PUSH
73472: LD_INT 2
73474: NEG
73475: PUSH
73476: LD_INT 2
73478: PUSH
73479: EMPTY
73480: LIST
73481: LIST
73482: PUSH
73483: LD_INT 4
73485: NEG
73486: PUSH
73487: LD_INT 0
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: PUSH
73494: LD_INT 4
73496: NEG
73497: PUSH
73498: LD_INT 1
73500: NEG
73501: PUSH
73502: EMPTY
73503: LIST
73504: LIST
73505: PUSH
73506: LD_INT 3
73508: NEG
73509: PUSH
73510: LD_INT 0
73512: PUSH
73513: EMPTY
73514: LIST
73515: LIST
73516: PUSH
73517: LD_INT 3
73519: NEG
73520: PUSH
73521: LD_INT 1
73523: PUSH
73524: EMPTY
73525: LIST
73526: LIST
73527: PUSH
73528: LD_INT 4
73530: NEG
73531: PUSH
73532: LD_INT 1
73534: PUSH
73535: EMPTY
73536: LIST
73537: LIST
73538: PUSH
73539: LD_INT 5
73541: NEG
73542: PUSH
73543: LD_INT 0
73545: PUSH
73546: EMPTY
73547: LIST
73548: LIST
73549: PUSH
73550: LD_INT 5
73552: NEG
73553: PUSH
73554: LD_INT 1
73556: NEG
73557: PUSH
73558: EMPTY
73559: LIST
73560: LIST
73561: PUSH
73562: LD_INT 5
73564: NEG
73565: PUSH
73566: LD_INT 2
73568: NEG
73569: PUSH
73570: EMPTY
73571: LIST
73572: LIST
73573: PUSH
73574: LD_INT 3
73576: NEG
73577: PUSH
73578: LD_INT 2
73580: PUSH
73581: EMPTY
73582: LIST
73583: LIST
73584: PUSH
73585: LD_INT 3
73587: NEG
73588: PUSH
73589: LD_INT 3
73591: NEG
73592: PUSH
73593: EMPTY
73594: LIST
73595: LIST
73596: PUSH
73597: LD_INT 3
73599: NEG
73600: PUSH
73601: LD_INT 4
73603: NEG
73604: PUSH
73605: EMPTY
73606: LIST
73607: LIST
73608: PUSH
73609: LD_INT 2
73611: NEG
73612: PUSH
73613: LD_INT 3
73615: NEG
73616: PUSH
73617: EMPTY
73618: LIST
73619: LIST
73620: PUSH
73621: LD_INT 2
73623: NEG
73624: PUSH
73625: LD_INT 2
73627: NEG
73628: PUSH
73629: EMPTY
73630: LIST
73631: LIST
73632: PUSH
73633: LD_INT 3
73635: NEG
73636: PUSH
73637: LD_INT 2
73639: NEG
73640: PUSH
73641: EMPTY
73642: LIST
73643: LIST
73644: PUSH
73645: LD_INT 4
73647: NEG
73648: PUSH
73649: LD_INT 3
73651: NEG
73652: PUSH
73653: EMPTY
73654: LIST
73655: LIST
73656: PUSH
73657: LD_INT 4
73659: NEG
73660: PUSH
73661: LD_INT 4
73663: NEG
73664: PUSH
73665: EMPTY
73666: LIST
73667: LIST
73668: PUSH
73669: LD_INT 2
73671: NEG
73672: PUSH
73673: LD_INT 4
73675: NEG
73676: PUSH
73677: EMPTY
73678: LIST
73679: LIST
73680: PUSH
73681: LD_INT 4
73683: NEG
73684: PUSH
73685: LD_INT 2
73687: NEG
73688: PUSH
73689: EMPTY
73690: LIST
73691: LIST
73692: PUSH
73693: LD_INT 0
73695: PUSH
73696: LD_INT 4
73698: NEG
73699: PUSH
73700: EMPTY
73701: LIST
73702: LIST
73703: PUSH
73704: LD_INT 0
73706: PUSH
73707: LD_INT 5
73709: NEG
73710: PUSH
73711: EMPTY
73712: LIST
73713: LIST
73714: PUSH
73715: LD_INT 1
73717: PUSH
73718: LD_INT 4
73720: NEG
73721: PUSH
73722: EMPTY
73723: LIST
73724: LIST
73725: PUSH
73726: LD_INT 1
73728: PUSH
73729: LD_INT 3
73731: NEG
73732: PUSH
73733: EMPTY
73734: LIST
73735: LIST
73736: PUSH
73737: LD_INT 0
73739: PUSH
73740: LD_INT 3
73742: NEG
73743: PUSH
73744: EMPTY
73745: LIST
73746: LIST
73747: PUSH
73748: LD_INT 1
73750: NEG
73751: PUSH
73752: LD_INT 4
73754: NEG
73755: PUSH
73756: EMPTY
73757: LIST
73758: LIST
73759: PUSH
73760: LD_INT 1
73762: NEG
73763: PUSH
73764: LD_INT 5
73766: NEG
73767: PUSH
73768: EMPTY
73769: LIST
73770: LIST
73771: PUSH
73772: LD_INT 2
73774: PUSH
73775: LD_INT 3
73777: NEG
73778: PUSH
73779: EMPTY
73780: LIST
73781: LIST
73782: PUSH
73783: LD_INT 2
73785: NEG
73786: PUSH
73787: LD_INT 5
73789: NEG
73790: PUSH
73791: EMPTY
73792: LIST
73793: LIST
73794: PUSH
73795: EMPTY
73796: LIST
73797: LIST
73798: LIST
73799: LIST
73800: LIST
73801: LIST
73802: LIST
73803: LIST
73804: LIST
73805: LIST
73806: LIST
73807: LIST
73808: LIST
73809: LIST
73810: LIST
73811: LIST
73812: LIST
73813: LIST
73814: LIST
73815: LIST
73816: LIST
73817: LIST
73818: LIST
73819: LIST
73820: LIST
73821: LIST
73822: LIST
73823: LIST
73824: LIST
73825: LIST
73826: LIST
73827: LIST
73828: LIST
73829: LIST
73830: LIST
73831: LIST
73832: LIST
73833: LIST
73834: LIST
73835: LIST
73836: LIST
73837: LIST
73838: LIST
73839: LIST
73840: LIST
73841: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
73842: LD_ADDR_VAR 0 31
73846: PUSH
73847: LD_INT 0
73849: PUSH
73850: LD_INT 4
73852: PUSH
73853: EMPTY
73854: LIST
73855: LIST
73856: PUSH
73857: LD_INT 0
73859: PUSH
73860: LD_INT 3
73862: PUSH
73863: EMPTY
73864: LIST
73865: LIST
73866: PUSH
73867: LD_INT 1
73869: PUSH
73870: LD_INT 4
73872: PUSH
73873: EMPTY
73874: LIST
73875: LIST
73876: PUSH
73877: LD_INT 1
73879: PUSH
73880: LD_INT 5
73882: PUSH
73883: EMPTY
73884: LIST
73885: LIST
73886: PUSH
73887: LD_INT 0
73889: PUSH
73890: LD_INT 5
73892: PUSH
73893: EMPTY
73894: LIST
73895: LIST
73896: PUSH
73897: LD_INT 1
73899: NEG
73900: PUSH
73901: LD_INT 4
73903: PUSH
73904: EMPTY
73905: LIST
73906: LIST
73907: PUSH
73908: LD_INT 1
73910: NEG
73911: PUSH
73912: LD_INT 3
73914: PUSH
73915: EMPTY
73916: LIST
73917: LIST
73918: PUSH
73919: LD_INT 2
73921: PUSH
73922: LD_INT 5
73924: PUSH
73925: EMPTY
73926: LIST
73927: LIST
73928: PUSH
73929: LD_INT 2
73931: NEG
73932: PUSH
73933: LD_INT 3
73935: PUSH
73936: EMPTY
73937: LIST
73938: LIST
73939: PUSH
73940: LD_INT 3
73942: NEG
73943: PUSH
73944: LD_INT 0
73946: PUSH
73947: EMPTY
73948: LIST
73949: LIST
73950: PUSH
73951: LD_INT 3
73953: NEG
73954: PUSH
73955: LD_INT 1
73957: NEG
73958: PUSH
73959: EMPTY
73960: LIST
73961: LIST
73962: PUSH
73963: LD_INT 2
73965: NEG
73966: PUSH
73967: LD_INT 0
73969: PUSH
73970: EMPTY
73971: LIST
73972: LIST
73973: PUSH
73974: LD_INT 2
73976: NEG
73977: PUSH
73978: LD_INT 1
73980: PUSH
73981: EMPTY
73982: LIST
73983: LIST
73984: PUSH
73985: LD_INT 3
73987: NEG
73988: PUSH
73989: LD_INT 1
73991: PUSH
73992: EMPTY
73993: LIST
73994: LIST
73995: PUSH
73996: LD_INT 4
73998: NEG
73999: PUSH
74000: LD_INT 0
74002: PUSH
74003: EMPTY
74004: LIST
74005: LIST
74006: PUSH
74007: LD_INT 4
74009: NEG
74010: PUSH
74011: LD_INT 1
74013: NEG
74014: PUSH
74015: EMPTY
74016: LIST
74017: LIST
74018: PUSH
74019: LD_INT 4
74021: NEG
74022: PUSH
74023: LD_INT 2
74025: NEG
74026: PUSH
74027: EMPTY
74028: LIST
74029: LIST
74030: PUSH
74031: LD_INT 2
74033: NEG
74034: PUSH
74035: LD_INT 2
74037: PUSH
74038: EMPTY
74039: LIST
74040: LIST
74041: PUSH
74042: LD_INT 4
74044: NEG
74045: PUSH
74046: LD_INT 4
74048: NEG
74049: PUSH
74050: EMPTY
74051: LIST
74052: LIST
74053: PUSH
74054: LD_INT 4
74056: NEG
74057: PUSH
74058: LD_INT 5
74060: NEG
74061: PUSH
74062: EMPTY
74063: LIST
74064: LIST
74065: PUSH
74066: LD_INT 3
74068: NEG
74069: PUSH
74070: LD_INT 4
74072: NEG
74073: PUSH
74074: EMPTY
74075: LIST
74076: LIST
74077: PUSH
74078: LD_INT 3
74080: NEG
74081: PUSH
74082: LD_INT 3
74084: NEG
74085: PUSH
74086: EMPTY
74087: LIST
74088: LIST
74089: PUSH
74090: LD_INT 4
74092: NEG
74093: PUSH
74094: LD_INT 3
74096: NEG
74097: PUSH
74098: EMPTY
74099: LIST
74100: LIST
74101: PUSH
74102: LD_INT 5
74104: NEG
74105: PUSH
74106: LD_INT 4
74108: NEG
74109: PUSH
74110: EMPTY
74111: LIST
74112: LIST
74113: PUSH
74114: LD_INT 5
74116: NEG
74117: PUSH
74118: LD_INT 5
74120: NEG
74121: PUSH
74122: EMPTY
74123: LIST
74124: LIST
74125: PUSH
74126: LD_INT 3
74128: NEG
74129: PUSH
74130: LD_INT 5
74132: NEG
74133: PUSH
74134: EMPTY
74135: LIST
74136: LIST
74137: PUSH
74138: LD_INT 5
74140: NEG
74141: PUSH
74142: LD_INT 3
74144: NEG
74145: PUSH
74146: EMPTY
74147: LIST
74148: LIST
74149: PUSH
74150: LD_INT 0
74152: PUSH
74153: LD_INT 3
74155: NEG
74156: PUSH
74157: EMPTY
74158: LIST
74159: LIST
74160: PUSH
74161: LD_INT 0
74163: PUSH
74164: LD_INT 4
74166: NEG
74167: PUSH
74168: EMPTY
74169: LIST
74170: LIST
74171: PUSH
74172: LD_INT 1
74174: PUSH
74175: LD_INT 3
74177: NEG
74178: PUSH
74179: EMPTY
74180: LIST
74181: LIST
74182: PUSH
74183: LD_INT 1
74185: PUSH
74186: LD_INT 2
74188: NEG
74189: PUSH
74190: EMPTY
74191: LIST
74192: LIST
74193: PUSH
74194: LD_INT 0
74196: PUSH
74197: LD_INT 2
74199: NEG
74200: PUSH
74201: EMPTY
74202: LIST
74203: LIST
74204: PUSH
74205: LD_INT 1
74207: NEG
74208: PUSH
74209: LD_INT 3
74211: NEG
74212: PUSH
74213: EMPTY
74214: LIST
74215: LIST
74216: PUSH
74217: LD_INT 1
74219: NEG
74220: PUSH
74221: LD_INT 4
74223: NEG
74224: PUSH
74225: EMPTY
74226: LIST
74227: LIST
74228: PUSH
74229: LD_INT 2
74231: PUSH
74232: LD_INT 2
74234: NEG
74235: PUSH
74236: EMPTY
74237: LIST
74238: LIST
74239: PUSH
74240: LD_INT 2
74242: NEG
74243: PUSH
74244: LD_INT 4
74246: NEG
74247: PUSH
74248: EMPTY
74249: LIST
74250: LIST
74251: PUSH
74252: LD_INT 4
74254: PUSH
74255: LD_INT 0
74257: PUSH
74258: EMPTY
74259: LIST
74260: LIST
74261: PUSH
74262: LD_INT 4
74264: PUSH
74265: LD_INT 1
74267: NEG
74268: PUSH
74269: EMPTY
74270: LIST
74271: LIST
74272: PUSH
74273: LD_INT 5
74275: PUSH
74276: LD_INT 0
74278: PUSH
74279: EMPTY
74280: LIST
74281: LIST
74282: PUSH
74283: LD_INT 5
74285: PUSH
74286: LD_INT 1
74288: PUSH
74289: EMPTY
74290: LIST
74291: LIST
74292: PUSH
74293: LD_INT 4
74295: PUSH
74296: LD_INT 1
74298: PUSH
74299: EMPTY
74300: LIST
74301: LIST
74302: PUSH
74303: LD_INT 3
74305: PUSH
74306: LD_INT 0
74308: PUSH
74309: EMPTY
74310: LIST
74311: LIST
74312: PUSH
74313: LD_INT 3
74315: PUSH
74316: LD_INT 1
74318: NEG
74319: PUSH
74320: EMPTY
74321: LIST
74322: LIST
74323: PUSH
74324: LD_INT 3
74326: PUSH
74327: LD_INT 2
74329: NEG
74330: PUSH
74331: EMPTY
74332: LIST
74333: LIST
74334: PUSH
74335: LD_INT 5
74337: PUSH
74338: LD_INT 2
74340: PUSH
74341: EMPTY
74342: LIST
74343: LIST
74344: PUSH
74345: EMPTY
74346: LIST
74347: LIST
74348: LIST
74349: LIST
74350: LIST
74351: LIST
74352: LIST
74353: LIST
74354: LIST
74355: LIST
74356: LIST
74357: LIST
74358: LIST
74359: LIST
74360: LIST
74361: LIST
74362: LIST
74363: LIST
74364: LIST
74365: LIST
74366: LIST
74367: LIST
74368: LIST
74369: LIST
74370: LIST
74371: LIST
74372: LIST
74373: LIST
74374: LIST
74375: LIST
74376: LIST
74377: LIST
74378: LIST
74379: LIST
74380: LIST
74381: LIST
74382: LIST
74383: LIST
74384: LIST
74385: LIST
74386: LIST
74387: LIST
74388: LIST
74389: LIST
74390: LIST
74391: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
74392: LD_ADDR_VAR 0 32
74396: PUSH
74397: LD_INT 4
74399: NEG
74400: PUSH
74401: LD_INT 0
74403: PUSH
74404: EMPTY
74405: LIST
74406: LIST
74407: PUSH
74408: LD_INT 4
74410: NEG
74411: PUSH
74412: LD_INT 1
74414: NEG
74415: PUSH
74416: EMPTY
74417: LIST
74418: LIST
74419: PUSH
74420: LD_INT 3
74422: NEG
74423: PUSH
74424: LD_INT 0
74426: PUSH
74427: EMPTY
74428: LIST
74429: LIST
74430: PUSH
74431: LD_INT 3
74433: NEG
74434: PUSH
74435: LD_INT 1
74437: PUSH
74438: EMPTY
74439: LIST
74440: LIST
74441: PUSH
74442: LD_INT 4
74444: NEG
74445: PUSH
74446: LD_INT 1
74448: PUSH
74449: EMPTY
74450: LIST
74451: LIST
74452: PUSH
74453: LD_INT 5
74455: NEG
74456: PUSH
74457: LD_INT 0
74459: PUSH
74460: EMPTY
74461: LIST
74462: LIST
74463: PUSH
74464: LD_INT 5
74466: NEG
74467: PUSH
74468: LD_INT 1
74470: NEG
74471: PUSH
74472: EMPTY
74473: LIST
74474: LIST
74475: PUSH
74476: LD_INT 5
74478: NEG
74479: PUSH
74480: LD_INT 2
74482: NEG
74483: PUSH
74484: EMPTY
74485: LIST
74486: LIST
74487: PUSH
74488: LD_INT 3
74490: NEG
74491: PUSH
74492: LD_INT 2
74494: PUSH
74495: EMPTY
74496: LIST
74497: LIST
74498: PUSH
74499: LD_INT 3
74501: NEG
74502: PUSH
74503: LD_INT 3
74505: NEG
74506: PUSH
74507: EMPTY
74508: LIST
74509: LIST
74510: PUSH
74511: LD_INT 3
74513: NEG
74514: PUSH
74515: LD_INT 4
74517: NEG
74518: PUSH
74519: EMPTY
74520: LIST
74521: LIST
74522: PUSH
74523: LD_INT 2
74525: NEG
74526: PUSH
74527: LD_INT 3
74529: NEG
74530: PUSH
74531: EMPTY
74532: LIST
74533: LIST
74534: PUSH
74535: LD_INT 2
74537: NEG
74538: PUSH
74539: LD_INT 2
74541: NEG
74542: PUSH
74543: EMPTY
74544: LIST
74545: LIST
74546: PUSH
74547: LD_INT 3
74549: NEG
74550: PUSH
74551: LD_INT 2
74553: NEG
74554: PUSH
74555: EMPTY
74556: LIST
74557: LIST
74558: PUSH
74559: LD_INT 4
74561: NEG
74562: PUSH
74563: LD_INT 3
74565: NEG
74566: PUSH
74567: EMPTY
74568: LIST
74569: LIST
74570: PUSH
74571: LD_INT 4
74573: NEG
74574: PUSH
74575: LD_INT 4
74577: NEG
74578: PUSH
74579: EMPTY
74580: LIST
74581: LIST
74582: PUSH
74583: LD_INT 2
74585: NEG
74586: PUSH
74587: LD_INT 4
74589: NEG
74590: PUSH
74591: EMPTY
74592: LIST
74593: LIST
74594: PUSH
74595: LD_INT 4
74597: NEG
74598: PUSH
74599: LD_INT 2
74601: NEG
74602: PUSH
74603: EMPTY
74604: LIST
74605: LIST
74606: PUSH
74607: LD_INT 0
74609: PUSH
74610: LD_INT 4
74612: NEG
74613: PUSH
74614: EMPTY
74615: LIST
74616: LIST
74617: PUSH
74618: LD_INT 0
74620: PUSH
74621: LD_INT 5
74623: NEG
74624: PUSH
74625: EMPTY
74626: LIST
74627: LIST
74628: PUSH
74629: LD_INT 1
74631: PUSH
74632: LD_INT 4
74634: NEG
74635: PUSH
74636: EMPTY
74637: LIST
74638: LIST
74639: PUSH
74640: LD_INT 1
74642: PUSH
74643: LD_INT 3
74645: NEG
74646: PUSH
74647: EMPTY
74648: LIST
74649: LIST
74650: PUSH
74651: LD_INT 0
74653: PUSH
74654: LD_INT 3
74656: NEG
74657: PUSH
74658: EMPTY
74659: LIST
74660: LIST
74661: PUSH
74662: LD_INT 1
74664: NEG
74665: PUSH
74666: LD_INT 4
74668: NEG
74669: PUSH
74670: EMPTY
74671: LIST
74672: LIST
74673: PUSH
74674: LD_INT 1
74676: NEG
74677: PUSH
74678: LD_INT 5
74680: NEG
74681: PUSH
74682: EMPTY
74683: LIST
74684: LIST
74685: PUSH
74686: LD_INT 2
74688: PUSH
74689: LD_INT 3
74691: NEG
74692: PUSH
74693: EMPTY
74694: LIST
74695: LIST
74696: PUSH
74697: LD_INT 2
74699: NEG
74700: PUSH
74701: LD_INT 5
74703: NEG
74704: PUSH
74705: EMPTY
74706: LIST
74707: LIST
74708: PUSH
74709: LD_INT 3
74711: PUSH
74712: LD_INT 0
74714: PUSH
74715: EMPTY
74716: LIST
74717: LIST
74718: PUSH
74719: LD_INT 3
74721: PUSH
74722: LD_INT 1
74724: NEG
74725: PUSH
74726: EMPTY
74727: LIST
74728: LIST
74729: PUSH
74730: LD_INT 4
74732: PUSH
74733: LD_INT 0
74735: PUSH
74736: EMPTY
74737: LIST
74738: LIST
74739: PUSH
74740: LD_INT 4
74742: PUSH
74743: LD_INT 1
74745: PUSH
74746: EMPTY
74747: LIST
74748: LIST
74749: PUSH
74750: LD_INT 3
74752: PUSH
74753: LD_INT 1
74755: PUSH
74756: EMPTY
74757: LIST
74758: LIST
74759: PUSH
74760: LD_INT 2
74762: PUSH
74763: LD_INT 0
74765: PUSH
74766: EMPTY
74767: LIST
74768: LIST
74769: PUSH
74770: LD_INT 2
74772: PUSH
74773: LD_INT 1
74775: NEG
74776: PUSH
74777: EMPTY
74778: LIST
74779: LIST
74780: PUSH
74781: LD_INT 2
74783: PUSH
74784: LD_INT 2
74786: NEG
74787: PUSH
74788: EMPTY
74789: LIST
74790: LIST
74791: PUSH
74792: LD_INT 4
74794: PUSH
74795: LD_INT 2
74797: PUSH
74798: EMPTY
74799: LIST
74800: LIST
74801: PUSH
74802: LD_INT 4
74804: PUSH
74805: LD_INT 4
74807: PUSH
74808: EMPTY
74809: LIST
74810: LIST
74811: PUSH
74812: LD_INT 4
74814: PUSH
74815: LD_INT 3
74817: PUSH
74818: EMPTY
74819: LIST
74820: LIST
74821: PUSH
74822: LD_INT 5
74824: PUSH
74825: LD_INT 4
74827: PUSH
74828: EMPTY
74829: LIST
74830: LIST
74831: PUSH
74832: LD_INT 5
74834: PUSH
74835: LD_INT 5
74837: PUSH
74838: EMPTY
74839: LIST
74840: LIST
74841: PUSH
74842: LD_INT 4
74844: PUSH
74845: LD_INT 5
74847: PUSH
74848: EMPTY
74849: LIST
74850: LIST
74851: PUSH
74852: LD_INT 3
74854: PUSH
74855: LD_INT 4
74857: PUSH
74858: EMPTY
74859: LIST
74860: LIST
74861: PUSH
74862: LD_INT 3
74864: PUSH
74865: LD_INT 3
74867: PUSH
74868: EMPTY
74869: LIST
74870: LIST
74871: PUSH
74872: LD_INT 5
74874: PUSH
74875: LD_INT 3
74877: PUSH
74878: EMPTY
74879: LIST
74880: LIST
74881: PUSH
74882: LD_INT 3
74884: PUSH
74885: LD_INT 5
74887: PUSH
74888: EMPTY
74889: LIST
74890: LIST
74891: PUSH
74892: EMPTY
74893: LIST
74894: LIST
74895: LIST
74896: LIST
74897: LIST
74898: LIST
74899: LIST
74900: LIST
74901: LIST
74902: LIST
74903: LIST
74904: LIST
74905: LIST
74906: LIST
74907: LIST
74908: LIST
74909: LIST
74910: LIST
74911: LIST
74912: LIST
74913: LIST
74914: LIST
74915: LIST
74916: LIST
74917: LIST
74918: LIST
74919: LIST
74920: LIST
74921: LIST
74922: LIST
74923: LIST
74924: LIST
74925: LIST
74926: LIST
74927: LIST
74928: LIST
74929: LIST
74930: LIST
74931: LIST
74932: LIST
74933: LIST
74934: LIST
74935: LIST
74936: LIST
74937: LIST
74938: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
74939: LD_ADDR_VAR 0 33
74943: PUSH
74944: LD_INT 4
74946: NEG
74947: PUSH
74948: LD_INT 4
74950: NEG
74951: PUSH
74952: EMPTY
74953: LIST
74954: LIST
74955: PUSH
74956: LD_INT 4
74958: NEG
74959: PUSH
74960: LD_INT 5
74962: NEG
74963: PUSH
74964: EMPTY
74965: LIST
74966: LIST
74967: PUSH
74968: LD_INT 3
74970: NEG
74971: PUSH
74972: LD_INT 4
74974: NEG
74975: PUSH
74976: EMPTY
74977: LIST
74978: LIST
74979: PUSH
74980: LD_INT 3
74982: NEG
74983: PUSH
74984: LD_INT 3
74986: NEG
74987: PUSH
74988: EMPTY
74989: LIST
74990: LIST
74991: PUSH
74992: LD_INT 4
74994: NEG
74995: PUSH
74996: LD_INT 3
74998: NEG
74999: PUSH
75000: EMPTY
75001: LIST
75002: LIST
75003: PUSH
75004: LD_INT 5
75006: NEG
75007: PUSH
75008: LD_INT 4
75010: NEG
75011: PUSH
75012: EMPTY
75013: LIST
75014: LIST
75015: PUSH
75016: LD_INT 5
75018: NEG
75019: PUSH
75020: LD_INT 5
75022: NEG
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: PUSH
75028: LD_INT 3
75030: NEG
75031: PUSH
75032: LD_INT 5
75034: NEG
75035: PUSH
75036: EMPTY
75037: LIST
75038: LIST
75039: PUSH
75040: LD_INT 5
75042: NEG
75043: PUSH
75044: LD_INT 3
75046: NEG
75047: PUSH
75048: EMPTY
75049: LIST
75050: LIST
75051: PUSH
75052: LD_INT 0
75054: PUSH
75055: LD_INT 3
75057: NEG
75058: PUSH
75059: EMPTY
75060: LIST
75061: LIST
75062: PUSH
75063: LD_INT 0
75065: PUSH
75066: LD_INT 4
75068: NEG
75069: PUSH
75070: EMPTY
75071: LIST
75072: LIST
75073: PUSH
75074: LD_INT 1
75076: PUSH
75077: LD_INT 3
75079: NEG
75080: PUSH
75081: EMPTY
75082: LIST
75083: LIST
75084: PUSH
75085: LD_INT 1
75087: PUSH
75088: LD_INT 2
75090: NEG
75091: PUSH
75092: EMPTY
75093: LIST
75094: LIST
75095: PUSH
75096: LD_INT 0
75098: PUSH
75099: LD_INT 2
75101: NEG
75102: PUSH
75103: EMPTY
75104: LIST
75105: LIST
75106: PUSH
75107: LD_INT 1
75109: NEG
75110: PUSH
75111: LD_INT 3
75113: NEG
75114: PUSH
75115: EMPTY
75116: LIST
75117: LIST
75118: PUSH
75119: LD_INT 1
75121: NEG
75122: PUSH
75123: LD_INT 4
75125: NEG
75126: PUSH
75127: EMPTY
75128: LIST
75129: LIST
75130: PUSH
75131: LD_INT 2
75133: PUSH
75134: LD_INT 2
75136: NEG
75137: PUSH
75138: EMPTY
75139: LIST
75140: LIST
75141: PUSH
75142: LD_INT 2
75144: NEG
75145: PUSH
75146: LD_INT 4
75148: NEG
75149: PUSH
75150: EMPTY
75151: LIST
75152: LIST
75153: PUSH
75154: LD_INT 4
75156: PUSH
75157: LD_INT 0
75159: PUSH
75160: EMPTY
75161: LIST
75162: LIST
75163: PUSH
75164: LD_INT 4
75166: PUSH
75167: LD_INT 1
75169: NEG
75170: PUSH
75171: EMPTY
75172: LIST
75173: LIST
75174: PUSH
75175: LD_INT 5
75177: PUSH
75178: LD_INT 0
75180: PUSH
75181: EMPTY
75182: LIST
75183: LIST
75184: PUSH
75185: LD_INT 5
75187: PUSH
75188: LD_INT 1
75190: PUSH
75191: EMPTY
75192: LIST
75193: LIST
75194: PUSH
75195: LD_INT 4
75197: PUSH
75198: LD_INT 1
75200: PUSH
75201: EMPTY
75202: LIST
75203: LIST
75204: PUSH
75205: LD_INT 3
75207: PUSH
75208: LD_INT 0
75210: PUSH
75211: EMPTY
75212: LIST
75213: LIST
75214: PUSH
75215: LD_INT 3
75217: PUSH
75218: LD_INT 1
75220: NEG
75221: PUSH
75222: EMPTY
75223: LIST
75224: LIST
75225: PUSH
75226: LD_INT 3
75228: PUSH
75229: LD_INT 2
75231: NEG
75232: PUSH
75233: EMPTY
75234: LIST
75235: LIST
75236: PUSH
75237: LD_INT 5
75239: PUSH
75240: LD_INT 2
75242: PUSH
75243: EMPTY
75244: LIST
75245: LIST
75246: PUSH
75247: LD_INT 3
75249: PUSH
75250: LD_INT 3
75252: PUSH
75253: EMPTY
75254: LIST
75255: LIST
75256: PUSH
75257: LD_INT 3
75259: PUSH
75260: LD_INT 2
75262: PUSH
75263: EMPTY
75264: LIST
75265: LIST
75266: PUSH
75267: LD_INT 4
75269: PUSH
75270: LD_INT 3
75272: PUSH
75273: EMPTY
75274: LIST
75275: LIST
75276: PUSH
75277: LD_INT 4
75279: PUSH
75280: LD_INT 4
75282: PUSH
75283: EMPTY
75284: LIST
75285: LIST
75286: PUSH
75287: LD_INT 3
75289: PUSH
75290: LD_INT 4
75292: PUSH
75293: EMPTY
75294: LIST
75295: LIST
75296: PUSH
75297: LD_INT 2
75299: PUSH
75300: LD_INT 3
75302: PUSH
75303: EMPTY
75304: LIST
75305: LIST
75306: PUSH
75307: LD_INT 2
75309: PUSH
75310: LD_INT 2
75312: PUSH
75313: EMPTY
75314: LIST
75315: LIST
75316: PUSH
75317: LD_INT 4
75319: PUSH
75320: LD_INT 2
75322: PUSH
75323: EMPTY
75324: LIST
75325: LIST
75326: PUSH
75327: LD_INT 2
75329: PUSH
75330: LD_INT 4
75332: PUSH
75333: EMPTY
75334: LIST
75335: LIST
75336: PUSH
75337: LD_INT 0
75339: PUSH
75340: LD_INT 4
75342: PUSH
75343: EMPTY
75344: LIST
75345: LIST
75346: PUSH
75347: LD_INT 0
75349: PUSH
75350: LD_INT 3
75352: PUSH
75353: EMPTY
75354: LIST
75355: LIST
75356: PUSH
75357: LD_INT 1
75359: PUSH
75360: LD_INT 4
75362: PUSH
75363: EMPTY
75364: LIST
75365: LIST
75366: PUSH
75367: LD_INT 1
75369: PUSH
75370: LD_INT 5
75372: PUSH
75373: EMPTY
75374: LIST
75375: LIST
75376: PUSH
75377: LD_INT 0
75379: PUSH
75380: LD_INT 5
75382: PUSH
75383: EMPTY
75384: LIST
75385: LIST
75386: PUSH
75387: LD_INT 1
75389: NEG
75390: PUSH
75391: LD_INT 4
75393: PUSH
75394: EMPTY
75395: LIST
75396: LIST
75397: PUSH
75398: LD_INT 1
75400: NEG
75401: PUSH
75402: LD_INT 3
75404: PUSH
75405: EMPTY
75406: LIST
75407: LIST
75408: PUSH
75409: LD_INT 2
75411: PUSH
75412: LD_INT 5
75414: PUSH
75415: EMPTY
75416: LIST
75417: LIST
75418: PUSH
75419: LD_INT 2
75421: NEG
75422: PUSH
75423: LD_INT 3
75425: PUSH
75426: EMPTY
75427: LIST
75428: LIST
75429: PUSH
75430: EMPTY
75431: LIST
75432: LIST
75433: LIST
75434: LIST
75435: LIST
75436: LIST
75437: LIST
75438: LIST
75439: LIST
75440: LIST
75441: LIST
75442: LIST
75443: LIST
75444: LIST
75445: LIST
75446: LIST
75447: LIST
75448: LIST
75449: LIST
75450: LIST
75451: LIST
75452: LIST
75453: LIST
75454: LIST
75455: LIST
75456: LIST
75457: LIST
75458: LIST
75459: LIST
75460: LIST
75461: LIST
75462: LIST
75463: LIST
75464: LIST
75465: LIST
75466: LIST
75467: LIST
75468: LIST
75469: LIST
75470: LIST
75471: LIST
75472: LIST
75473: LIST
75474: LIST
75475: LIST
75476: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
75477: LD_ADDR_VAR 0 34
75481: PUSH
75482: LD_INT 0
75484: PUSH
75485: LD_INT 4
75487: NEG
75488: PUSH
75489: EMPTY
75490: LIST
75491: LIST
75492: PUSH
75493: LD_INT 0
75495: PUSH
75496: LD_INT 5
75498: NEG
75499: PUSH
75500: EMPTY
75501: LIST
75502: LIST
75503: PUSH
75504: LD_INT 1
75506: PUSH
75507: LD_INT 4
75509: NEG
75510: PUSH
75511: EMPTY
75512: LIST
75513: LIST
75514: PUSH
75515: LD_INT 1
75517: PUSH
75518: LD_INT 3
75520: NEG
75521: PUSH
75522: EMPTY
75523: LIST
75524: LIST
75525: PUSH
75526: LD_INT 0
75528: PUSH
75529: LD_INT 3
75531: NEG
75532: PUSH
75533: EMPTY
75534: LIST
75535: LIST
75536: PUSH
75537: LD_INT 1
75539: NEG
75540: PUSH
75541: LD_INT 4
75543: NEG
75544: PUSH
75545: EMPTY
75546: LIST
75547: LIST
75548: PUSH
75549: LD_INT 1
75551: NEG
75552: PUSH
75553: LD_INT 5
75555: NEG
75556: PUSH
75557: EMPTY
75558: LIST
75559: LIST
75560: PUSH
75561: LD_INT 2
75563: PUSH
75564: LD_INT 3
75566: NEG
75567: PUSH
75568: EMPTY
75569: LIST
75570: LIST
75571: PUSH
75572: LD_INT 2
75574: NEG
75575: PUSH
75576: LD_INT 5
75578: NEG
75579: PUSH
75580: EMPTY
75581: LIST
75582: LIST
75583: PUSH
75584: LD_INT 3
75586: PUSH
75587: LD_INT 0
75589: PUSH
75590: EMPTY
75591: LIST
75592: LIST
75593: PUSH
75594: LD_INT 3
75596: PUSH
75597: LD_INT 1
75599: NEG
75600: PUSH
75601: EMPTY
75602: LIST
75603: LIST
75604: PUSH
75605: LD_INT 4
75607: PUSH
75608: LD_INT 0
75610: PUSH
75611: EMPTY
75612: LIST
75613: LIST
75614: PUSH
75615: LD_INT 4
75617: PUSH
75618: LD_INT 1
75620: PUSH
75621: EMPTY
75622: LIST
75623: LIST
75624: PUSH
75625: LD_INT 3
75627: PUSH
75628: LD_INT 1
75630: PUSH
75631: EMPTY
75632: LIST
75633: LIST
75634: PUSH
75635: LD_INT 2
75637: PUSH
75638: LD_INT 0
75640: PUSH
75641: EMPTY
75642: LIST
75643: LIST
75644: PUSH
75645: LD_INT 2
75647: PUSH
75648: LD_INT 1
75650: NEG
75651: PUSH
75652: EMPTY
75653: LIST
75654: LIST
75655: PUSH
75656: LD_INT 2
75658: PUSH
75659: LD_INT 2
75661: NEG
75662: PUSH
75663: EMPTY
75664: LIST
75665: LIST
75666: PUSH
75667: LD_INT 4
75669: PUSH
75670: LD_INT 2
75672: PUSH
75673: EMPTY
75674: LIST
75675: LIST
75676: PUSH
75677: LD_INT 4
75679: PUSH
75680: LD_INT 4
75682: PUSH
75683: EMPTY
75684: LIST
75685: LIST
75686: PUSH
75687: LD_INT 4
75689: PUSH
75690: LD_INT 3
75692: PUSH
75693: EMPTY
75694: LIST
75695: LIST
75696: PUSH
75697: LD_INT 5
75699: PUSH
75700: LD_INT 4
75702: PUSH
75703: EMPTY
75704: LIST
75705: LIST
75706: PUSH
75707: LD_INT 5
75709: PUSH
75710: LD_INT 5
75712: PUSH
75713: EMPTY
75714: LIST
75715: LIST
75716: PUSH
75717: LD_INT 4
75719: PUSH
75720: LD_INT 5
75722: PUSH
75723: EMPTY
75724: LIST
75725: LIST
75726: PUSH
75727: LD_INT 3
75729: PUSH
75730: LD_INT 4
75732: PUSH
75733: EMPTY
75734: LIST
75735: LIST
75736: PUSH
75737: LD_INT 3
75739: PUSH
75740: LD_INT 3
75742: PUSH
75743: EMPTY
75744: LIST
75745: LIST
75746: PUSH
75747: LD_INT 5
75749: PUSH
75750: LD_INT 3
75752: PUSH
75753: EMPTY
75754: LIST
75755: LIST
75756: PUSH
75757: LD_INT 3
75759: PUSH
75760: LD_INT 5
75762: PUSH
75763: EMPTY
75764: LIST
75765: LIST
75766: PUSH
75767: LD_INT 0
75769: PUSH
75770: LD_INT 3
75772: PUSH
75773: EMPTY
75774: LIST
75775: LIST
75776: PUSH
75777: LD_INT 0
75779: PUSH
75780: LD_INT 2
75782: PUSH
75783: EMPTY
75784: LIST
75785: LIST
75786: PUSH
75787: LD_INT 1
75789: PUSH
75790: LD_INT 3
75792: PUSH
75793: EMPTY
75794: LIST
75795: LIST
75796: PUSH
75797: LD_INT 1
75799: PUSH
75800: LD_INT 4
75802: PUSH
75803: EMPTY
75804: LIST
75805: LIST
75806: PUSH
75807: LD_INT 0
75809: PUSH
75810: LD_INT 4
75812: PUSH
75813: EMPTY
75814: LIST
75815: LIST
75816: PUSH
75817: LD_INT 1
75819: NEG
75820: PUSH
75821: LD_INT 3
75823: PUSH
75824: EMPTY
75825: LIST
75826: LIST
75827: PUSH
75828: LD_INT 1
75830: NEG
75831: PUSH
75832: LD_INT 2
75834: PUSH
75835: EMPTY
75836: LIST
75837: LIST
75838: PUSH
75839: LD_INT 2
75841: PUSH
75842: LD_INT 4
75844: PUSH
75845: EMPTY
75846: LIST
75847: LIST
75848: PUSH
75849: LD_INT 2
75851: NEG
75852: PUSH
75853: LD_INT 2
75855: PUSH
75856: EMPTY
75857: LIST
75858: LIST
75859: PUSH
75860: LD_INT 4
75862: NEG
75863: PUSH
75864: LD_INT 0
75866: PUSH
75867: EMPTY
75868: LIST
75869: LIST
75870: PUSH
75871: LD_INT 4
75873: NEG
75874: PUSH
75875: LD_INT 1
75877: NEG
75878: PUSH
75879: EMPTY
75880: LIST
75881: LIST
75882: PUSH
75883: LD_INT 3
75885: NEG
75886: PUSH
75887: LD_INT 0
75889: PUSH
75890: EMPTY
75891: LIST
75892: LIST
75893: PUSH
75894: LD_INT 3
75896: NEG
75897: PUSH
75898: LD_INT 1
75900: PUSH
75901: EMPTY
75902: LIST
75903: LIST
75904: PUSH
75905: LD_INT 4
75907: NEG
75908: PUSH
75909: LD_INT 1
75911: PUSH
75912: EMPTY
75913: LIST
75914: LIST
75915: PUSH
75916: LD_INT 5
75918: NEG
75919: PUSH
75920: LD_INT 0
75922: PUSH
75923: EMPTY
75924: LIST
75925: LIST
75926: PUSH
75927: LD_INT 5
75929: NEG
75930: PUSH
75931: LD_INT 1
75933: NEG
75934: PUSH
75935: EMPTY
75936: LIST
75937: LIST
75938: PUSH
75939: LD_INT 5
75941: NEG
75942: PUSH
75943: LD_INT 2
75945: NEG
75946: PUSH
75947: EMPTY
75948: LIST
75949: LIST
75950: PUSH
75951: LD_INT 3
75953: NEG
75954: PUSH
75955: LD_INT 2
75957: PUSH
75958: EMPTY
75959: LIST
75960: LIST
75961: PUSH
75962: EMPTY
75963: LIST
75964: LIST
75965: LIST
75966: LIST
75967: LIST
75968: LIST
75969: LIST
75970: LIST
75971: LIST
75972: LIST
75973: LIST
75974: LIST
75975: LIST
75976: LIST
75977: LIST
75978: LIST
75979: LIST
75980: LIST
75981: LIST
75982: LIST
75983: LIST
75984: LIST
75985: LIST
75986: LIST
75987: LIST
75988: LIST
75989: LIST
75990: LIST
75991: LIST
75992: LIST
75993: LIST
75994: LIST
75995: LIST
75996: LIST
75997: LIST
75998: LIST
75999: LIST
76000: LIST
76001: LIST
76002: LIST
76003: LIST
76004: LIST
76005: LIST
76006: LIST
76007: LIST
76008: ST_TO_ADDR
// end ; end ;
76009: GO 76012
76011: POP
// case btype of b_depot , b_warehouse :
76012: LD_VAR 0 1
76016: PUSH
76017: LD_INT 0
76019: DOUBLE
76020: EQUAL
76021: IFTRUE 76031
76023: LD_INT 1
76025: DOUBLE
76026: EQUAL
76027: IFTRUE 76031
76029: GO 76232
76031: POP
// case nation of nation_american :
76032: LD_VAR 0 5
76036: PUSH
76037: LD_INT 1
76039: DOUBLE
76040: EQUAL
76041: IFTRUE 76045
76043: GO 76101
76045: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
76046: LD_ADDR_VAR 0 9
76050: PUSH
76051: LD_VAR 0 11
76055: PUSH
76056: LD_VAR 0 12
76060: PUSH
76061: LD_VAR 0 13
76065: PUSH
76066: LD_VAR 0 14
76070: PUSH
76071: LD_VAR 0 15
76075: PUSH
76076: LD_VAR 0 16
76080: PUSH
76081: EMPTY
76082: LIST
76083: LIST
76084: LIST
76085: LIST
76086: LIST
76087: LIST
76088: PUSH
76089: LD_VAR 0 4
76093: PUSH
76094: LD_INT 1
76096: PLUS
76097: ARRAY
76098: ST_TO_ADDR
76099: GO 76230
76101: LD_INT 2
76103: DOUBLE
76104: EQUAL
76105: IFTRUE 76109
76107: GO 76165
76109: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
76110: LD_ADDR_VAR 0 9
76114: PUSH
76115: LD_VAR 0 17
76119: PUSH
76120: LD_VAR 0 18
76124: PUSH
76125: LD_VAR 0 19
76129: PUSH
76130: LD_VAR 0 20
76134: PUSH
76135: LD_VAR 0 21
76139: PUSH
76140: LD_VAR 0 22
76144: PUSH
76145: EMPTY
76146: LIST
76147: LIST
76148: LIST
76149: LIST
76150: LIST
76151: LIST
76152: PUSH
76153: LD_VAR 0 4
76157: PUSH
76158: LD_INT 1
76160: PLUS
76161: ARRAY
76162: ST_TO_ADDR
76163: GO 76230
76165: LD_INT 3
76167: DOUBLE
76168: EQUAL
76169: IFTRUE 76173
76171: GO 76229
76173: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
76174: LD_ADDR_VAR 0 9
76178: PUSH
76179: LD_VAR 0 23
76183: PUSH
76184: LD_VAR 0 24
76188: PUSH
76189: LD_VAR 0 25
76193: PUSH
76194: LD_VAR 0 26
76198: PUSH
76199: LD_VAR 0 27
76203: PUSH
76204: LD_VAR 0 28
76208: PUSH
76209: EMPTY
76210: LIST
76211: LIST
76212: LIST
76213: LIST
76214: LIST
76215: LIST
76216: PUSH
76217: LD_VAR 0 4
76221: PUSH
76222: LD_INT 1
76224: PLUS
76225: ARRAY
76226: ST_TO_ADDR
76227: GO 76230
76229: POP
76230: GO 76785
76232: LD_INT 2
76234: DOUBLE
76235: EQUAL
76236: IFTRUE 76246
76238: LD_INT 3
76240: DOUBLE
76241: EQUAL
76242: IFTRUE 76246
76244: GO 76302
76246: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
76247: LD_ADDR_VAR 0 9
76251: PUSH
76252: LD_VAR 0 29
76256: PUSH
76257: LD_VAR 0 30
76261: PUSH
76262: LD_VAR 0 31
76266: PUSH
76267: LD_VAR 0 32
76271: PUSH
76272: LD_VAR 0 33
76276: PUSH
76277: LD_VAR 0 34
76281: PUSH
76282: EMPTY
76283: LIST
76284: LIST
76285: LIST
76286: LIST
76287: LIST
76288: LIST
76289: PUSH
76290: LD_VAR 0 4
76294: PUSH
76295: LD_INT 1
76297: PLUS
76298: ARRAY
76299: ST_TO_ADDR
76300: GO 76785
76302: LD_INT 16
76304: DOUBLE
76305: EQUAL
76306: IFTRUE 76364
76308: LD_INT 17
76310: DOUBLE
76311: EQUAL
76312: IFTRUE 76364
76314: LD_INT 18
76316: DOUBLE
76317: EQUAL
76318: IFTRUE 76364
76320: LD_INT 19
76322: DOUBLE
76323: EQUAL
76324: IFTRUE 76364
76326: LD_INT 22
76328: DOUBLE
76329: EQUAL
76330: IFTRUE 76364
76332: LD_INT 20
76334: DOUBLE
76335: EQUAL
76336: IFTRUE 76364
76338: LD_INT 21
76340: DOUBLE
76341: EQUAL
76342: IFTRUE 76364
76344: LD_INT 23
76346: DOUBLE
76347: EQUAL
76348: IFTRUE 76364
76350: LD_INT 24
76352: DOUBLE
76353: EQUAL
76354: IFTRUE 76364
76356: LD_INT 25
76358: DOUBLE
76359: EQUAL
76360: IFTRUE 76364
76362: GO 76420
76364: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
76365: LD_ADDR_VAR 0 9
76369: PUSH
76370: LD_VAR 0 35
76374: PUSH
76375: LD_VAR 0 36
76379: PUSH
76380: LD_VAR 0 37
76384: PUSH
76385: LD_VAR 0 38
76389: PUSH
76390: LD_VAR 0 39
76394: PUSH
76395: LD_VAR 0 40
76399: PUSH
76400: EMPTY
76401: LIST
76402: LIST
76403: LIST
76404: LIST
76405: LIST
76406: LIST
76407: PUSH
76408: LD_VAR 0 4
76412: PUSH
76413: LD_INT 1
76415: PLUS
76416: ARRAY
76417: ST_TO_ADDR
76418: GO 76785
76420: LD_INT 6
76422: DOUBLE
76423: EQUAL
76424: IFTRUE 76476
76426: LD_INT 7
76428: DOUBLE
76429: EQUAL
76430: IFTRUE 76476
76432: LD_INT 8
76434: DOUBLE
76435: EQUAL
76436: IFTRUE 76476
76438: LD_INT 13
76440: DOUBLE
76441: EQUAL
76442: IFTRUE 76476
76444: LD_INT 12
76446: DOUBLE
76447: EQUAL
76448: IFTRUE 76476
76450: LD_INT 15
76452: DOUBLE
76453: EQUAL
76454: IFTRUE 76476
76456: LD_INT 11
76458: DOUBLE
76459: EQUAL
76460: IFTRUE 76476
76462: LD_INT 14
76464: DOUBLE
76465: EQUAL
76466: IFTRUE 76476
76468: LD_INT 10
76470: DOUBLE
76471: EQUAL
76472: IFTRUE 76476
76474: GO 76532
76476: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
76477: LD_ADDR_VAR 0 9
76481: PUSH
76482: LD_VAR 0 41
76486: PUSH
76487: LD_VAR 0 42
76491: PUSH
76492: LD_VAR 0 43
76496: PUSH
76497: LD_VAR 0 44
76501: PUSH
76502: LD_VAR 0 45
76506: PUSH
76507: LD_VAR 0 46
76511: PUSH
76512: EMPTY
76513: LIST
76514: LIST
76515: LIST
76516: LIST
76517: LIST
76518: LIST
76519: PUSH
76520: LD_VAR 0 4
76524: PUSH
76525: LD_INT 1
76527: PLUS
76528: ARRAY
76529: ST_TO_ADDR
76530: GO 76785
76532: LD_INT 36
76534: DOUBLE
76535: EQUAL
76536: IFTRUE 76540
76538: GO 76596
76540: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
76541: LD_ADDR_VAR 0 9
76545: PUSH
76546: LD_VAR 0 47
76550: PUSH
76551: LD_VAR 0 48
76555: PUSH
76556: LD_VAR 0 49
76560: PUSH
76561: LD_VAR 0 50
76565: PUSH
76566: LD_VAR 0 51
76570: PUSH
76571: LD_VAR 0 52
76575: PUSH
76576: EMPTY
76577: LIST
76578: LIST
76579: LIST
76580: LIST
76581: LIST
76582: LIST
76583: PUSH
76584: LD_VAR 0 4
76588: PUSH
76589: LD_INT 1
76591: PLUS
76592: ARRAY
76593: ST_TO_ADDR
76594: GO 76785
76596: LD_INT 4
76598: DOUBLE
76599: EQUAL
76600: IFTRUE 76622
76602: LD_INT 5
76604: DOUBLE
76605: EQUAL
76606: IFTRUE 76622
76608: LD_INT 34
76610: DOUBLE
76611: EQUAL
76612: IFTRUE 76622
76614: LD_INT 37
76616: DOUBLE
76617: EQUAL
76618: IFTRUE 76622
76620: GO 76678
76622: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
76623: LD_ADDR_VAR 0 9
76627: PUSH
76628: LD_VAR 0 53
76632: PUSH
76633: LD_VAR 0 54
76637: PUSH
76638: LD_VAR 0 55
76642: PUSH
76643: LD_VAR 0 56
76647: PUSH
76648: LD_VAR 0 57
76652: PUSH
76653: LD_VAR 0 58
76657: PUSH
76658: EMPTY
76659: LIST
76660: LIST
76661: LIST
76662: LIST
76663: LIST
76664: LIST
76665: PUSH
76666: LD_VAR 0 4
76670: PUSH
76671: LD_INT 1
76673: PLUS
76674: ARRAY
76675: ST_TO_ADDR
76676: GO 76785
76678: LD_INT 31
76680: DOUBLE
76681: EQUAL
76682: IFTRUE 76728
76684: LD_INT 32
76686: DOUBLE
76687: EQUAL
76688: IFTRUE 76728
76690: LD_INT 33
76692: DOUBLE
76693: EQUAL
76694: IFTRUE 76728
76696: LD_INT 27
76698: DOUBLE
76699: EQUAL
76700: IFTRUE 76728
76702: LD_INT 26
76704: DOUBLE
76705: EQUAL
76706: IFTRUE 76728
76708: LD_INT 28
76710: DOUBLE
76711: EQUAL
76712: IFTRUE 76728
76714: LD_INT 29
76716: DOUBLE
76717: EQUAL
76718: IFTRUE 76728
76720: LD_INT 30
76722: DOUBLE
76723: EQUAL
76724: IFTRUE 76728
76726: GO 76784
76728: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
76729: LD_ADDR_VAR 0 9
76733: PUSH
76734: LD_VAR 0 59
76738: PUSH
76739: LD_VAR 0 60
76743: PUSH
76744: LD_VAR 0 61
76748: PUSH
76749: LD_VAR 0 62
76753: PUSH
76754: LD_VAR 0 63
76758: PUSH
76759: LD_VAR 0 64
76763: PUSH
76764: EMPTY
76765: LIST
76766: LIST
76767: LIST
76768: LIST
76769: LIST
76770: LIST
76771: PUSH
76772: LD_VAR 0 4
76776: PUSH
76777: LD_INT 1
76779: PLUS
76780: ARRAY
76781: ST_TO_ADDR
76782: GO 76785
76784: POP
// temp_list2 = [ ] ;
76785: LD_ADDR_VAR 0 10
76789: PUSH
76790: EMPTY
76791: ST_TO_ADDR
// for i in temp_list do
76792: LD_ADDR_VAR 0 8
76796: PUSH
76797: LD_VAR 0 9
76801: PUSH
76802: FOR_IN
76803: IFFALSE 76855
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
76805: LD_ADDR_VAR 0 10
76809: PUSH
76810: LD_VAR 0 10
76814: PUSH
76815: LD_VAR 0 8
76819: PUSH
76820: LD_INT 1
76822: ARRAY
76823: PUSH
76824: LD_VAR 0 2
76828: PLUS
76829: PUSH
76830: LD_VAR 0 8
76834: PUSH
76835: LD_INT 2
76837: ARRAY
76838: PUSH
76839: LD_VAR 0 3
76843: PLUS
76844: PUSH
76845: EMPTY
76846: LIST
76847: LIST
76848: PUSH
76849: EMPTY
76850: LIST
76851: ADD
76852: ST_TO_ADDR
76853: GO 76802
76855: POP
76856: POP
// result = temp_list2 ;
76857: LD_ADDR_VAR 0 7
76861: PUSH
76862: LD_VAR 0 10
76866: ST_TO_ADDR
// end ;
76867: LD_VAR 0 7
76871: RET
// export function EnemyInRange ( unit , dist ) ; begin
76872: LD_INT 0
76874: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
76875: LD_ADDR_VAR 0 3
76879: PUSH
76880: LD_VAR 0 1
76884: PPUSH
76885: CALL_OW 255
76889: PPUSH
76890: LD_VAR 0 1
76894: PPUSH
76895: CALL_OW 250
76899: PPUSH
76900: LD_VAR 0 1
76904: PPUSH
76905: CALL_OW 251
76909: PPUSH
76910: LD_VAR 0 2
76914: PPUSH
76915: CALL 50976 0 4
76919: PUSH
76920: LD_INT 4
76922: ARRAY
76923: ST_TO_ADDR
// end ;
76924: LD_VAR 0 3
76928: RET
// export function PlayerSeeMe ( unit ) ; begin
76929: LD_INT 0
76931: PPUSH
// result := See ( your_side , unit ) ;
76932: LD_ADDR_VAR 0 2
76936: PUSH
76937: LD_OWVAR 2
76941: PPUSH
76942: LD_VAR 0 1
76946: PPUSH
76947: CALL_OW 292
76951: ST_TO_ADDR
// end ;
76952: LD_VAR 0 2
76956: RET
// export function ReverseDir ( unit ) ; begin
76957: LD_INT 0
76959: PPUSH
// if not unit then
76960: LD_VAR 0 1
76964: NOT
76965: IFFALSE 76969
// exit ;
76967: GO 76992
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
76969: LD_ADDR_VAR 0 2
76973: PUSH
76974: LD_VAR 0 1
76978: PPUSH
76979: CALL_OW 254
76983: PUSH
76984: LD_INT 3
76986: PLUS
76987: PUSH
76988: LD_INT 6
76990: MOD
76991: ST_TO_ADDR
// end ;
76992: LD_VAR 0 2
76996: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
76997: LD_INT 0
76999: PPUSH
77000: PPUSH
77001: PPUSH
77002: PPUSH
77003: PPUSH
// if not hexes then
77004: LD_VAR 0 2
77008: NOT
77009: IFFALSE 77013
// exit ;
77011: GO 77161
// dist := 9999 ;
77013: LD_ADDR_VAR 0 5
77017: PUSH
77018: LD_INT 9999
77020: ST_TO_ADDR
// for i = 1 to hexes do
77021: LD_ADDR_VAR 0 4
77025: PUSH
77026: DOUBLE
77027: LD_INT 1
77029: DEC
77030: ST_TO_ADDR
77031: LD_VAR 0 2
77035: PUSH
77036: FOR_TO
77037: IFFALSE 77149
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
77039: LD_VAR 0 1
77043: PPUSH
77044: LD_VAR 0 2
77048: PUSH
77049: LD_VAR 0 4
77053: ARRAY
77054: PUSH
77055: LD_INT 1
77057: ARRAY
77058: PPUSH
77059: LD_VAR 0 2
77063: PUSH
77064: LD_VAR 0 4
77068: ARRAY
77069: PUSH
77070: LD_INT 2
77072: ARRAY
77073: PPUSH
77074: CALL_OW 297
77078: PUSH
77079: LD_VAR 0 5
77083: LESS
77084: IFFALSE 77147
// begin hex := hexes [ i ] ;
77086: LD_ADDR_VAR 0 7
77090: PUSH
77091: LD_VAR 0 2
77095: PUSH
77096: LD_VAR 0 4
77100: ARRAY
77101: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
77102: LD_ADDR_VAR 0 5
77106: PUSH
77107: LD_VAR 0 1
77111: PPUSH
77112: LD_VAR 0 2
77116: PUSH
77117: LD_VAR 0 4
77121: ARRAY
77122: PUSH
77123: LD_INT 1
77125: ARRAY
77126: PPUSH
77127: LD_VAR 0 2
77131: PUSH
77132: LD_VAR 0 4
77136: ARRAY
77137: PUSH
77138: LD_INT 2
77140: ARRAY
77141: PPUSH
77142: CALL_OW 297
77146: ST_TO_ADDR
// end ; end ;
77147: GO 77036
77149: POP
77150: POP
// result := hex ;
77151: LD_ADDR_VAR 0 3
77155: PUSH
77156: LD_VAR 0 7
77160: ST_TO_ADDR
// end ;
77161: LD_VAR 0 3
77165: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
77166: LD_INT 0
77168: PPUSH
77169: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
77170: LD_VAR 0 1
77174: NOT
77175: PUSH
77176: LD_VAR 0 1
77180: PUSH
77181: LD_INT 21
77183: PUSH
77184: LD_INT 2
77186: PUSH
77187: EMPTY
77188: LIST
77189: LIST
77190: PUSH
77191: LD_INT 23
77193: PUSH
77194: LD_INT 2
77196: PUSH
77197: EMPTY
77198: LIST
77199: LIST
77200: PUSH
77201: EMPTY
77202: LIST
77203: LIST
77204: PPUSH
77205: CALL_OW 69
77209: IN
77210: NOT
77211: OR
77212: IFFALSE 77216
// exit ;
77214: GO 77263
// for i = 1 to 3 do
77216: LD_ADDR_VAR 0 3
77220: PUSH
77221: DOUBLE
77222: LD_INT 1
77224: DEC
77225: ST_TO_ADDR
77226: LD_INT 3
77228: PUSH
77229: FOR_TO
77230: IFFALSE 77261
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
77232: LD_VAR 0 1
77236: PPUSH
77237: CALL_OW 250
77241: PPUSH
77242: LD_VAR 0 1
77246: PPUSH
77247: CALL_OW 251
77251: PPUSH
77252: LD_INT 1
77254: PPUSH
77255: CALL_OW 453
77259: GO 77229
77261: POP
77262: POP
// end ;
77263: LD_VAR 0 2
77267: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
77268: LD_INT 0
77270: PPUSH
77271: PPUSH
77272: PPUSH
77273: PPUSH
77274: PPUSH
77275: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
77276: LD_VAR 0 1
77280: NOT
77281: PUSH
77282: LD_VAR 0 2
77286: NOT
77287: OR
77288: PUSH
77289: LD_VAR 0 1
77293: PPUSH
77294: CALL_OW 314
77298: OR
77299: IFFALSE 77303
// exit ;
77301: GO 77744
// x := GetX ( enemy_unit ) ;
77303: LD_ADDR_VAR 0 7
77307: PUSH
77308: LD_VAR 0 2
77312: PPUSH
77313: CALL_OW 250
77317: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
77318: LD_ADDR_VAR 0 8
77322: PUSH
77323: LD_VAR 0 2
77327: PPUSH
77328: CALL_OW 251
77332: ST_TO_ADDR
// if not x or not y then
77333: LD_VAR 0 7
77337: NOT
77338: PUSH
77339: LD_VAR 0 8
77343: NOT
77344: OR
77345: IFFALSE 77349
// exit ;
77347: GO 77744
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
77349: LD_ADDR_VAR 0 6
77353: PUSH
77354: LD_VAR 0 7
77358: PPUSH
77359: LD_INT 0
77361: PPUSH
77362: LD_INT 4
77364: PPUSH
77365: CALL_OW 272
77369: PUSH
77370: LD_VAR 0 8
77374: PPUSH
77375: LD_INT 0
77377: PPUSH
77378: LD_INT 4
77380: PPUSH
77381: CALL_OW 273
77385: PUSH
77386: EMPTY
77387: LIST
77388: LIST
77389: PUSH
77390: LD_VAR 0 7
77394: PPUSH
77395: LD_INT 1
77397: PPUSH
77398: LD_INT 4
77400: PPUSH
77401: CALL_OW 272
77405: PUSH
77406: LD_VAR 0 8
77410: PPUSH
77411: LD_INT 1
77413: PPUSH
77414: LD_INT 4
77416: PPUSH
77417: CALL_OW 273
77421: PUSH
77422: EMPTY
77423: LIST
77424: LIST
77425: PUSH
77426: LD_VAR 0 7
77430: PPUSH
77431: LD_INT 2
77433: PPUSH
77434: LD_INT 4
77436: PPUSH
77437: CALL_OW 272
77441: PUSH
77442: LD_VAR 0 8
77446: PPUSH
77447: LD_INT 2
77449: PPUSH
77450: LD_INT 4
77452: PPUSH
77453: CALL_OW 273
77457: PUSH
77458: EMPTY
77459: LIST
77460: LIST
77461: PUSH
77462: LD_VAR 0 7
77466: PPUSH
77467: LD_INT 3
77469: PPUSH
77470: LD_INT 4
77472: PPUSH
77473: CALL_OW 272
77477: PUSH
77478: LD_VAR 0 8
77482: PPUSH
77483: LD_INT 3
77485: PPUSH
77486: LD_INT 4
77488: PPUSH
77489: CALL_OW 273
77493: PUSH
77494: EMPTY
77495: LIST
77496: LIST
77497: PUSH
77498: LD_VAR 0 7
77502: PPUSH
77503: LD_INT 4
77505: PPUSH
77506: LD_INT 4
77508: PPUSH
77509: CALL_OW 272
77513: PUSH
77514: LD_VAR 0 8
77518: PPUSH
77519: LD_INT 4
77521: PPUSH
77522: LD_INT 4
77524: PPUSH
77525: CALL_OW 273
77529: PUSH
77530: EMPTY
77531: LIST
77532: LIST
77533: PUSH
77534: LD_VAR 0 7
77538: PPUSH
77539: LD_INT 5
77541: PPUSH
77542: LD_INT 4
77544: PPUSH
77545: CALL_OW 272
77549: PUSH
77550: LD_VAR 0 8
77554: PPUSH
77555: LD_INT 5
77557: PPUSH
77558: LD_INT 4
77560: PPUSH
77561: CALL_OW 273
77565: PUSH
77566: EMPTY
77567: LIST
77568: LIST
77569: PUSH
77570: EMPTY
77571: LIST
77572: LIST
77573: LIST
77574: LIST
77575: LIST
77576: LIST
77577: ST_TO_ADDR
// for i = tmp downto 1 do
77578: LD_ADDR_VAR 0 4
77582: PUSH
77583: DOUBLE
77584: LD_VAR 0 6
77588: INC
77589: ST_TO_ADDR
77590: LD_INT 1
77592: PUSH
77593: FOR_DOWNTO
77594: IFFALSE 77695
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
77596: LD_VAR 0 6
77600: PUSH
77601: LD_VAR 0 4
77605: ARRAY
77606: PUSH
77607: LD_INT 1
77609: ARRAY
77610: PPUSH
77611: LD_VAR 0 6
77615: PUSH
77616: LD_VAR 0 4
77620: ARRAY
77621: PUSH
77622: LD_INT 2
77624: ARRAY
77625: PPUSH
77626: CALL_OW 488
77630: NOT
77631: PUSH
77632: LD_VAR 0 6
77636: PUSH
77637: LD_VAR 0 4
77641: ARRAY
77642: PUSH
77643: LD_INT 1
77645: ARRAY
77646: PPUSH
77647: LD_VAR 0 6
77651: PUSH
77652: LD_VAR 0 4
77656: ARRAY
77657: PUSH
77658: LD_INT 2
77660: ARRAY
77661: PPUSH
77662: CALL_OW 428
77666: PUSH
77667: LD_INT 0
77669: NONEQUAL
77670: OR
77671: IFFALSE 77693
// tmp := Delete ( tmp , i ) ;
77673: LD_ADDR_VAR 0 6
77677: PUSH
77678: LD_VAR 0 6
77682: PPUSH
77683: LD_VAR 0 4
77687: PPUSH
77688: CALL_OW 3
77692: ST_TO_ADDR
77693: GO 77593
77695: POP
77696: POP
// j := GetClosestHex ( unit , tmp ) ;
77697: LD_ADDR_VAR 0 5
77701: PUSH
77702: LD_VAR 0 1
77706: PPUSH
77707: LD_VAR 0 6
77711: PPUSH
77712: CALL 76997 0 2
77716: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
77717: LD_VAR 0 1
77721: PPUSH
77722: LD_VAR 0 5
77726: PUSH
77727: LD_INT 1
77729: ARRAY
77730: PPUSH
77731: LD_VAR 0 5
77735: PUSH
77736: LD_INT 2
77738: ARRAY
77739: PPUSH
77740: CALL_OW 111
// end ;
77744: LD_VAR 0 3
77748: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
77749: LD_INT 0
77751: PPUSH
77752: PPUSH
77753: PPUSH
// uc_side = 0 ;
77754: LD_ADDR_OWVAR 20
77758: PUSH
77759: LD_INT 0
77761: ST_TO_ADDR
// uc_nation = 0 ;
77762: LD_ADDR_OWVAR 21
77766: PUSH
77767: LD_INT 0
77769: ST_TO_ADDR
// InitHc ;
77770: CALL_OW 19
// InitVc ;
77774: CALL_OW 20
// if mastodonts then
77778: LD_VAR 0 6
77782: IFFALSE 77849
// for i = 1 to mastodonts do
77784: LD_ADDR_VAR 0 11
77788: PUSH
77789: DOUBLE
77790: LD_INT 1
77792: DEC
77793: ST_TO_ADDR
77794: LD_VAR 0 6
77798: PUSH
77799: FOR_TO
77800: IFFALSE 77847
// begin vc_chassis := 31 ;
77802: LD_ADDR_OWVAR 37
77806: PUSH
77807: LD_INT 31
77809: ST_TO_ADDR
// vc_control := control_rider ;
77810: LD_ADDR_OWVAR 38
77814: PUSH
77815: LD_INT 4
77817: ST_TO_ADDR
// animal := CreateVehicle ;
77818: LD_ADDR_VAR 0 12
77822: PUSH
77823: CALL_OW 45
77827: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77828: LD_VAR 0 12
77832: PPUSH
77833: LD_VAR 0 8
77837: PPUSH
77838: LD_INT 0
77840: PPUSH
77841: CALL 79918 0 3
// end ;
77845: GO 77799
77847: POP
77848: POP
// if horses then
77849: LD_VAR 0 5
77853: IFFALSE 77920
// for i = 1 to horses do
77855: LD_ADDR_VAR 0 11
77859: PUSH
77860: DOUBLE
77861: LD_INT 1
77863: DEC
77864: ST_TO_ADDR
77865: LD_VAR 0 5
77869: PUSH
77870: FOR_TO
77871: IFFALSE 77918
// begin hc_class := 21 ;
77873: LD_ADDR_OWVAR 28
77877: PUSH
77878: LD_INT 21
77880: ST_TO_ADDR
// hc_gallery :=  ;
77881: LD_ADDR_OWVAR 33
77885: PUSH
77886: LD_STRING 
77888: ST_TO_ADDR
// animal := CreateHuman ;
77889: LD_ADDR_VAR 0 12
77893: PUSH
77894: CALL_OW 44
77898: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77899: LD_VAR 0 12
77903: PPUSH
77904: LD_VAR 0 8
77908: PPUSH
77909: LD_INT 0
77911: PPUSH
77912: CALL 79918 0 3
// end ;
77916: GO 77870
77918: POP
77919: POP
// if birds then
77920: LD_VAR 0 1
77924: IFFALSE 77991
// for i = 1 to birds do
77926: LD_ADDR_VAR 0 11
77930: PUSH
77931: DOUBLE
77932: LD_INT 1
77934: DEC
77935: ST_TO_ADDR
77936: LD_VAR 0 1
77940: PUSH
77941: FOR_TO
77942: IFFALSE 77989
// begin hc_class = 18 ;
77944: LD_ADDR_OWVAR 28
77948: PUSH
77949: LD_INT 18
77951: ST_TO_ADDR
// hc_gallery =  ;
77952: LD_ADDR_OWVAR 33
77956: PUSH
77957: LD_STRING 
77959: ST_TO_ADDR
// animal := CreateHuman ;
77960: LD_ADDR_VAR 0 12
77964: PUSH
77965: CALL_OW 44
77969: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77970: LD_VAR 0 12
77974: PPUSH
77975: LD_VAR 0 8
77979: PPUSH
77980: LD_INT 0
77982: PPUSH
77983: CALL 79918 0 3
// end ;
77987: GO 77941
77989: POP
77990: POP
// if tigers then
77991: LD_VAR 0 2
77995: IFFALSE 78079
// for i = 1 to tigers do
77997: LD_ADDR_VAR 0 11
78001: PUSH
78002: DOUBLE
78003: LD_INT 1
78005: DEC
78006: ST_TO_ADDR
78007: LD_VAR 0 2
78011: PUSH
78012: FOR_TO
78013: IFFALSE 78077
// begin hc_class = class_tiger ;
78015: LD_ADDR_OWVAR 28
78019: PUSH
78020: LD_INT 14
78022: ST_TO_ADDR
// hc_gallery =  ;
78023: LD_ADDR_OWVAR 33
78027: PUSH
78028: LD_STRING 
78030: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
78031: LD_ADDR_OWVAR 35
78035: PUSH
78036: LD_INT 7
78038: NEG
78039: PPUSH
78040: LD_INT 7
78042: PPUSH
78043: CALL_OW 12
78047: ST_TO_ADDR
// animal := CreateHuman ;
78048: LD_ADDR_VAR 0 12
78052: PUSH
78053: CALL_OW 44
78057: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78058: LD_VAR 0 12
78062: PPUSH
78063: LD_VAR 0 8
78067: PPUSH
78068: LD_INT 0
78070: PPUSH
78071: CALL 79918 0 3
// end ;
78075: GO 78012
78077: POP
78078: POP
// if apemans then
78079: LD_VAR 0 3
78083: IFFALSE 78206
// for i = 1 to apemans do
78085: LD_ADDR_VAR 0 11
78089: PUSH
78090: DOUBLE
78091: LD_INT 1
78093: DEC
78094: ST_TO_ADDR
78095: LD_VAR 0 3
78099: PUSH
78100: FOR_TO
78101: IFFALSE 78204
// begin hc_class = class_apeman ;
78103: LD_ADDR_OWVAR 28
78107: PUSH
78108: LD_INT 12
78110: ST_TO_ADDR
// hc_gallery =  ;
78111: LD_ADDR_OWVAR 33
78115: PUSH
78116: LD_STRING 
78118: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
78119: LD_ADDR_OWVAR 35
78123: PUSH
78124: LD_INT 5
78126: NEG
78127: PPUSH
78128: LD_INT 5
78130: PPUSH
78131: CALL_OW 12
78135: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
78136: LD_ADDR_OWVAR 31
78140: PUSH
78141: LD_INT 1
78143: PPUSH
78144: LD_INT 3
78146: PPUSH
78147: CALL_OW 12
78151: PUSH
78152: LD_INT 1
78154: PPUSH
78155: LD_INT 3
78157: PPUSH
78158: CALL_OW 12
78162: PUSH
78163: LD_INT 0
78165: PUSH
78166: LD_INT 0
78168: PUSH
78169: EMPTY
78170: LIST
78171: LIST
78172: LIST
78173: LIST
78174: ST_TO_ADDR
// animal := CreateHuman ;
78175: LD_ADDR_VAR 0 12
78179: PUSH
78180: CALL_OW 44
78184: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78185: LD_VAR 0 12
78189: PPUSH
78190: LD_VAR 0 8
78194: PPUSH
78195: LD_INT 0
78197: PPUSH
78198: CALL 79918 0 3
// end ;
78202: GO 78100
78204: POP
78205: POP
// if enchidnas then
78206: LD_VAR 0 4
78210: IFFALSE 78277
// for i = 1 to enchidnas do
78212: LD_ADDR_VAR 0 11
78216: PUSH
78217: DOUBLE
78218: LD_INT 1
78220: DEC
78221: ST_TO_ADDR
78222: LD_VAR 0 4
78226: PUSH
78227: FOR_TO
78228: IFFALSE 78275
// begin hc_class = 13 ;
78230: LD_ADDR_OWVAR 28
78234: PUSH
78235: LD_INT 13
78237: ST_TO_ADDR
// hc_gallery =  ;
78238: LD_ADDR_OWVAR 33
78242: PUSH
78243: LD_STRING 
78245: ST_TO_ADDR
// animal := CreateHuman ;
78246: LD_ADDR_VAR 0 12
78250: PUSH
78251: CALL_OW 44
78255: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78256: LD_VAR 0 12
78260: PPUSH
78261: LD_VAR 0 8
78265: PPUSH
78266: LD_INT 0
78268: PPUSH
78269: CALL 79918 0 3
// end ;
78273: GO 78227
78275: POP
78276: POP
// if fishes then
78277: LD_VAR 0 7
78281: IFFALSE 78348
// for i = 1 to fishes do
78283: LD_ADDR_VAR 0 11
78287: PUSH
78288: DOUBLE
78289: LD_INT 1
78291: DEC
78292: ST_TO_ADDR
78293: LD_VAR 0 7
78297: PUSH
78298: FOR_TO
78299: IFFALSE 78346
// begin hc_class = 20 ;
78301: LD_ADDR_OWVAR 28
78305: PUSH
78306: LD_INT 20
78308: ST_TO_ADDR
// hc_gallery =  ;
78309: LD_ADDR_OWVAR 33
78313: PUSH
78314: LD_STRING 
78316: ST_TO_ADDR
// animal := CreateHuman ;
78317: LD_ADDR_VAR 0 12
78321: PUSH
78322: CALL_OW 44
78326: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
78327: LD_VAR 0 12
78331: PPUSH
78332: LD_VAR 0 9
78336: PPUSH
78337: LD_INT 0
78339: PPUSH
78340: CALL 79918 0 3
// end ;
78344: GO 78298
78346: POP
78347: POP
// end ;
78348: LD_VAR 0 10
78352: RET
// export function WantHeal ( sci , unit ) ; begin
78353: LD_INT 0
78355: PPUSH
// if GetTaskList ( sci ) > 0 then
78356: LD_VAR 0 1
78360: PPUSH
78361: CALL_OW 437
78365: PUSH
78366: LD_INT 0
78368: GREATER
78369: IFFALSE 78439
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
78371: LD_VAR 0 1
78375: PPUSH
78376: CALL_OW 437
78380: PUSH
78381: LD_INT 1
78383: ARRAY
78384: PUSH
78385: LD_INT 1
78387: ARRAY
78388: PUSH
78389: LD_STRING l
78391: EQUAL
78392: PUSH
78393: LD_VAR 0 1
78397: PPUSH
78398: CALL_OW 437
78402: PUSH
78403: LD_INT 1
78405: ARRAY
78406: PUSH
78407: LD_INT 4
78409: ARRAY
78410: PUSH
78411: LD_VAR 0 2
78415: EQUAL
78416: AND
78417: IFFALSE 78429
// result := true else
78419: LD_ADDR_VAR 0 3
78423: PUSH
78424: LD_INT 1
78426: ST_TO_ADDR
78427: GO 78437
// result := false ;
78429: LD_ADDR_VAR 0 3
78433: PUSH
78434: LD_INT 0
78436: ST_TO_ADDR
// end else
78437: GO 78447
// result := false ;
78439: LD_ADDR_VAR 0 3
78443: PUSH
78444: LD_INT 0
78446: ST_TO_ADDR
// end ;
78447: LD_VAR 0 3
78451: RET
// export function HealTarget ( sci ) ; begin
78452: LD_INT 0
78454: PPUSH
// if not sci then
78455: LD_VAR 0 1
78459: NOT
78460: IFFALSE 78464
// exit ;
78462: GO 78529
// result := 0 ;
78464: LD_ADDR_VAR 0 2
78468: PUSH
78469: LD_INT 0
78471: ST_TO_ADDR
// if GetTaskList ( sci ) then
78472: LD_VAR 0 1
78476: PPUSH
78477: CALL_OW 437
78481: IFFALSE 78529
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
78483: LD_VAR 0 1
78487: PPUSH
78488: CALL_OW 437
78492: PUSH
78493: LD_INT 1
78495: ARRAY
78496: PUSH
78497: LD_INT 1
78499: ARRAY
78500: PUSH
78501: LD_STRING l
78503: EQUAL
78504: IFFALSE 78529
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
78506: LD_ADDR_VAR 0 2
78510: PUSH
78511: LD_VAR 0 1
78515: PPUSH
78516: CALL_OW 437
78520: PUSH
78521: LD_INT 1
78523: ARRAY
78524: PUSH
78525: LD_INT 4
78527: ARRAY
78528: ST_TO_ADDR
// end ;
78529: LD_VAR 0 2
78533: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
78534: LD_INT 0
78536: PPUSH
78537: PPUSH
78538: PPUSH
78539: PPUSH
// if not base_units then
78540: LD_VAR 0 1
78544: NOT
78545: IFFALSE 78549
// exit ;
78547: GO 78636
// result := false ;
78549: LD_ADDR_VAR 0 2
78553: PUSH
78554: LD_INT 0
78556: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
78557: LD_ADDR_VAR 0 5
78561: PUSH
78562: LD_VAR 0 1
78566: PPUSH
78567: LD_INT 21
78569: PUSH
78570: LD_INT 3
78572: PUSH
78573: EMPTY
78574: LIST
78575: LIST
78576: PPUSH
78577: CALL_OW 72
78581: ST_TO_ADDR
// if not tmp then
78582: LD_VAR 0 5
78586: NOT
78587: IFFALSE 78591
// exit ;
78589: GO 78636
// for i in tmp do
78591: LD_ADDR_VAR 0 3
78595: PUSH
78596: LD_VAR 0 5
78600: PUSH
78601: FOR_IN
78602: IFFALSE 78634
// begin result := EnemyInRange ( i , 22 ) ;
78604: LD_ADDR_VAR 0 2
78608: PUSH
78609: LD_VAR 0 3
78613: PPUSH
78614: LD_INT 22
78616: PPUSH
78617: CALL 76872 0 2
78621: ST_TO_ADDR
// if result then
78622: LD_VAR 0 2
78626: IFFALSE 78632
// exit ;
78628: POP
78629: POP
78630: GO 78636
// end ;
78632: GO 78601
78634: POP
78635: POP
// end ;
78636: LD_VAR 0 2
78640: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
78641: LD_INT 0
78643: PPUSH
78644: PPUSH
// if not units then
78645: LD_VAR 0 1
78649: NOT
78650: IFFALSE 78654
// exit ;
78652: GO 78724
// result := [ ] ;
78654: LD_ADDR_VAR 0 3
78658: PUSH
78659: EMPTY
78660: ST_TO_ADDR
// for i in units do
78661: LD_ADDR_VAR 0 4
78665: PUSH
78666: LD_VAR 0 1
78670: PUSH
78671: FOR_IN
78672: IFFALSE 78722
// if GetTag ( i ) = tag then
78674: LD_VAR 0 4
78678: PPUSH
78679: CALL_OW 110
78683: PUSH
78684: LD_VAR 0 2
78688: EQUAL
78689: IFFALSE 78720
// result := Insert ( result , result + 1 , i ) ;
78691: LD_ADDR_VAR 0 3
78695: PUSH
78696: LD_VAR 0 3
78700: PPUSH
78701: LD_VAR 0 3
78705: PUSH
78706: LD_INT 1
78708: PLUS
78709: PPUSH
78710: LD_VAR 0 4
78714: PPUSH
78715: CALL_OW 2
78719: ST_TO_ADDR
78720: GO 78671
78722: POP
78723: POP
// end ;
78724: LD_VAR 0 3
78728: RET
// export function IsDriver ( un ) ; begin
78729: LD_INT 0
78731: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
78732: LD_ADDR_VAR 0 2
78736: PUSH
78737: LD_VAR 0 1
78741: PUSH
78742: LD_INT 55
78744: PUSH
78745: EMPTY
78746: LIST
78747: PPUSH
78748: CALL_OW 69
78752: IN
78753: ST_TO_ADDR
// end ;
78754: LD_VAR 0 2
78758: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
78759: LD_INT 0
78761: PPUSH
78762: PPUSH
// list := [ ] ;
78763: LD_ADDR_VAR 0 5
78767: PUSH
78768: EMPTY
78769: ST_TO_ADDR
// case d of 0 :
78770: LD_VAR 0 3
78774: PUSH
78775: LD_INT 0
78777: DOUBLE
78778: EQUAL
78779: IFTRUE 78783
78781: GO 78916
78783: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
78784: LD_ADDR_VAR 0 5
78788: PUSH
78789: LD_VAR 0 1
78793: PUSH
78794: LD_INT 4
78796: MINUS
78797: PUSH
78798: LD_VAR 0 2
78802: PUSH
78803: LD_INT 4
78805: MINUS
78806: PUSH
78807: LD_INT 2
78809: PUSH
78810: EMPTY
78811: LIST
78812: LIST
78813: LIST
78814: PUSH
78815: LD_VAR 0 1
78819: PUSH
78820: LD_INT 3
78822: MINUS
78823: PUSH
78824: LD_VAR 0 2
78828: PUSH
78829: LD_INT 1
78831: PUSH
78832: EMPTY
78833: LIST
78834: LIST
78835: LIST
78836: PUSH
78837: LD_VAR 0 1
78841: PUSH
78842: LD_INT 4
78844: PLUS
78845: PUSH
78846: LD_VAR 0 2
78850: PUSH
78851: LD_INT 4
78853: PUSH
78854: EMPTY
78855: LIST
78856: LIST
78857: LIST
78858: PUSH
78859: LD_VAR 0 1
78863: PUSH
78864: LD_INT 3
78866: PLUS
78867: PUSH
78868: LD_VAR 0 2
78872: PUSH
78873: LD_INT 3
78875: PLUS
78876: PUSH
78877: LD_INT 5
78879: PUSH
78880: EMPTY
78881: LIST
78882: LIST
78883: LIST
78884: PUSH
78885: LD_VAR 0 1
78889: PUSH
78890: LD_VAR 0 2
78894: PUSH
78895: LD_INT 4
78897: PLUS
78898: PUSH
78899: LD_INT 0
78901: PUSH
78902: EMPTY
78903: LIST
78904: LIST
78905: LIST
78906: PUSH
78907: EMPTY
78908: LIST
78909: LIST
78910: LIST
78911: LIST
78912: LIST
78913: ST_TO_ADDR
// end ; 1 :
78914: GO 79614
78916: LD_INT 1
78918: DOUBLE
78919: EQUAL
78920: IFTRUE 78924
78922: GO 79057
78924: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
78925: LD_ADDR_VAR 0 5
78929: PUSH
78930: LD_VAR 0 1
78934: PUSH
78935: LD_VAR 0 2
78939: PUSH
78940: LD_INT 4
78942: MINUS
78943: PUSH
78944: LD_INT 3
78946: PUSH
78947: EMPTY
78948: LIST
78949: LIST
78950: LIST
78951: PUSH
78952: LD_VAR 0 1
78956: PUSH
78957: LD_INT 3
78959: MINUS
78960: PUSH
78961: LD_VAR 0 2
78965: PUSH
78966: LD_INT 3
78968: MINUS
78969: PUSH
78970: LD_INT 2
78972: PUSH
78973: EMPTY
78974: LIST
78975: LIST
78976: LIST
78977: PUSH
78978: LD_VAR 0 1
78982: PUSH
78983: LD_INT 4
78985: MINUS
78986: PUSH
78987: LD_VAR 0 2
78991: PUSH
78992: LD_INT 1
78994: PUSH
78995: EMPTY
78996: LIST
78997: LIST
78998: LIST
78999: PUSH
79000: LD_VAR 0 1
79004: PUSH
79005: LD_VAR 0 2
79009: PUSH
79010: LD_INT 3
79012: PLUS
79013: PUSH
79014: LD_INT 0
79016: PUSH
79017: EMPTY
79018: LIST
79019: LIST
79020: LIST
79021: PUSH
79022: LD_VAR 0 1
79026: PUSH
79027: LD_INT 4
79029: PLUS
79030: PUSH
79031: LD_VAR 0 2
79035: PUSH
79036: LD_INT 4
79038: PLUS
79039: PUSH
79040: LD_INT 5
79042: PUSH
79043: EMPTY
79044: LIST
79045: LIST
79046: LIST
79047: PUSH
79048: EMPTY
79049: LIST
79050: LIST
79051: LIST
79052: LIST
79053: LIST
79054: ST_TO_ADDR
// end ; 2 :
79055: GO 79614
79057: LD_INT 2
79059: DOUBLE
79060: EQUAL
79061: IFTRUE 79065
79063: GO 79194
79065: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
79066: LD_ADDR_VAR 0 5
79070: PUSH
79071: LD_VAR 0 1
79075: PUSH
79076: LD_VAR 0 2
79080: PUSH
79081: LD_INT 3
79083: MINUS
79084: PUSH
79085: LD_INT 3
79087: PUSH
79088: EMPTY
79089: LIST
79090: LIST
79091: LIST
79092: PUSH
79093: LD_VAR 0 1
79097: PUSH
79098: LD_INT 4
79100: PLUS
79101: PUSH
79102: LD_VAR 0 2
79106: PUSH
79107: LD_INT 4
79109: PUSH
79110: EMPTY
79111: LIST
79112: LIST
79113: LIST
79114: PUSH
79115: LD_VAR 0 1
79119: PUSH
79120: LD_VAR 0 2
79124: PUSH
79125: LD_INT 4
79127: PLUS
79128: PUSH
79129: LD_INT 0
79131: PUSH
79132: EMPTY
79133: LIST
79134: LIST
79135: LIST
79136: PUSH
79137: LD_VAR 0 1
79141: PUSH
79142: LD_INT 3
79144: MINUS
79145: PUSH
79146: LD_VAR 0 2
79150: PUSH
79151: LD_INT 1
79153: PUSH
79154: EMPTY
79155: LIST
79156: LIST
79157: LIST
79158: PUSH
79159: LD_VAR 0 1
79163: PUSH
79164: LD_INT 4
79166: MINUS
79167: PUSH
79168: LD_VAR 0 2
79172: PUSH
79173: LD_INT 4
79175: MINUS
79176: PUSH
79177: LD_INT 2
79179: PUSH
79180: EMPTY
79181: LIST
79182: LIST
79183: LIST
79184: PUSH
79185: EMPTY
79186: LIST
79187: LIST
79188: LIST
79189: LIST
79190: LIST
79191: ST_TO_ADDR
// end ; 3 :
79192: GO 79614
79194: LD_INT 3
79196: DOUBLE
79197: EQUAL
79198: IFTRUE 79202
79200: GO 79335
79202: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
79203: LD_ADDR_VAR 0 5
79207: PUSH
79208: LD_VAR 0 1
79212: PUSH
79213: LD_INT 3
79215: PLUS
79216: PUSH
79217: LD_VAR 0 2
79221: PUSH
79222: LD_INT 4
79224: PUSH
79225: EMPTY
79226: LIST
79227: LIST
79228: LIST
79229: PUSH
79230: LD_VAR 0 1
79234: PUSH
79235: LD_INT 4
79237: PLUS
79238: PUSH
79239: LD_VAR 0 2
79243: PUSH
79244: LD_INT 4
79246: PLUS
79247: PUSH
79248: LD_INT 5
79250: PUSH
79251: EMPTY
79252: LIST
79253: LIST
79254: LIST
79255: PUSH
79256: LD_VAR 0 1
79260: PUSH
79261: LD_INT 4
79263: MINUS
79264: PUSH
79265: LD_VAR 0 2
79269: PUSH
79270: LD_INT 1
79272: PUSH
79273: EMPTY
79274: LIST
79275: LIST
79276: LIST
79277: PUSH
79278: LD_VAR 0 1
79282: PUSH
79283: LD_VAR 0 2
79287: PUSH
79288: LD_INT 4
79290: MINUS
79291: PUSH
79292: LD_INT 3
79294: PUSH
79295: EMPTY
79296: LIST
79297: LIST
79298: LIST
79299: PUSH
79300: LD_VAR 0 1
79304: PUSH
79305: LD_INT 3
79307: MINUS
79308: PUSH
79309: LD_VAR 0 2
79313: PUSH
79314: LD_INT 3
79316: MINUS
79317: PUSH
79318: LD_INT 2
79320: PUSH
79321: EMPTY
79322: LIST
79323: LIST
79324: LIST
79325: PUSH
79326: EMPTY
79327: LIST
79328: LIST
79329: LIST
79330: LIST
79331: LIST
79332: ST_TO_ADDR
// end ; 4 :
79333: GO 79614
79335: LD_INT 4
79337: DOUBLE
79338: EQUAL
79339: IFTRUE 79343
79341: GO 79476
79343: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
79344: LD_ADDR_VAR 0 5
79348: PUSH
79349: LD_VAR 0 1
79353: PUSH
79354: LD_VAR 0 2
79358: PUSH
79359: LD_INT 4
79361: PLUS
79362: PUSH
79363: LD_INT 0
79365: PUSH
79366: EMPTY
79367: LIST
79368: LIST
79369: LIST
79370: PUSH
79371: LD_VAR 0 1
79375: PUSH
79376: LD_INT 3
79378: PLUS
79379: PUSH
79380: LD_VAR 0 2
79384: PUSH
79385: LD_INT 3
79387: PLUS
79388: PUSH
79389: LD_INT 5
79391: PUSH
79392: EMPTY
79393: LIST
79394: LIST
79395: LIST
79396: PUSH
79397: LD_VAR 0 1
79401: PUSH
79402: LD_INT 4
79404: PLUS
79405: PUSH
79406: LD_VAR 0 2
79410: PUSH
79411: LD_INT 4
79413: PUSH
79414: EMPTY
79415: LIST
79416: LIST
79417: LIST
79418: PUSH
79419: LD_VAR 0 1
79423: PUSH
79424: LD_VAR 0 2
79428: PUSH
79429: LD_INT 3
79431: MINUS
79432: PUSH
79433: LD_INT 3
79435: PUSH
79436: EMPTY
79437: LIST
79438: LIST
79439: LIST
79440: PUSH
79441: LD_VAR 0 1
79445: PUSH
79446: LD_INT 4
79448: MINUS
79449: PUSH
79450: LD_VAR 0 2
79454: PUSH
79455: LD_INT 4
79457: MINUS
79458: PUSH
79459: LD_INT 2
79461: PUSH
79462: EMPTY
79463: LIST
79464: LIST
79465: LIST
79466: PUSH
79467: EMPTY
79468: LIST
79469: LIST
79470: LIST
79471: LIST
79472: LIST
79473: ST_TO_ADDR
// end ; 5 :
79474: GO 79614
79476: LD_INT 5
79478: DOUBLE
79479: EQUAL
79480: IFTRUE 79484
79482: GO 79613
79484: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
79485: LD_ADDR_VAR 0 5
79489: PUSH
79490: LD_VAR 0 1
79494: PUSH
79495: LD_INT 4
79497: MINUS
79498: PUSH
79499: LD_VAR 0 2
79503: PUSH
79504: LD_INT 1
79506: PUSH
79507: EMPTY
79508: LIST
79509: LIST
79510: LIST
79511: PUSH
79512: LD_VAR 0 1
79516: PUSH
79517: LD_VAR 0 2
79521: PUSH
79522: LD_INT 4
79524: MINUS
79525: PUSH
79526: LD_INT 3
79528: PUSH
79529: EMPTY
79530: LIST
79531: LIST
79532: LIST
79533: PUSH
79534: LD_VAR 0 1
79538: PUSH
79539: LD_INT 4
79541: PLUS
79542: PUSH
79543: LD_VAR 0 2
79547: PUSH
79548: LD_INT 4
79550: PLUS
79551: PUSH
79552: LD_INT 5
79554: PUSH
79555: EMPTY
79556: LIST
79557: LIST
79558: LIST
79559: PUSH
79560: LD_VAR 0 1
79564: PUSH
79565: LD_INT 3
79567: PLUS
79568: PUSH
79569: LD_VAR 0 2
79573: PUSH
79574: LD_INT 4
79576: PUSH
79577: EMPTY
79578: LIST
79579: LIST
79580: LIST
79581: PUSH
79582: LD_VAR 0 1
79586: PUSH
79587: LD_VAR 0 2
79591: PUSH
79592: LD_INT 3
79594: PLUS
79595: PUSH
79596: LD_INT 0
79598: PUSH
79599: EMPTY
79600: LIST
79601: LIST
79602: LIST
79603: PUSH
79604: EMPTY
79605: LIST
79606: LIST
79607: LIST
79608: LIST
79609: LIST
79610: ST_TO_ADDR
// end ; end ;
79611: GO 79614
79613: POP
// result := list ;
79614: LD_ADDR_VAR 0 4
79618: PUSH
79619: LD_VAR 0 5
79623: ST_TO_ADDR
// end ;
79624: LD_VAR 0 4
79628: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
79629: LD_INT 0
79631: PPUSH
79632: PPUSH
79633: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
79634: LD_VAR 0 1
79638: NOT
79639: PUSH
79640: LD_VAR 0 2
79644: PUSH
79645: LD_INT 1
79647: PUSH
79648: LD_INT 2
79650: PUSH
79651: LD_INT 3
79653: PUSH
79654: LD_INT 4
79656: PUSH
79657: EMPTY
79658: LIST
79659: LIST
79660: LIST
79661: LIST
79662: IN
79663: NOT
79664: OR
79665: IFFALSE 79669
// exit ;
79667: GO 79761
// tmp := [ ] ;
79669: LD_ADDR_VAR 0 5
79673: PUSH
79674: EMPTY
79675: ST_TO_ADDR
// for i in units do
79676: LD_ADDR_VAR 0 4
79680: PUSH
79681: LD_VAR 0 1
79685: PUSH
79686: FOR_IN
79687: IFFALSE 79730
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
79689: LD_ADDR_VAR 0 5
79693: PUSH
79694: LD_VAR 0 5
79698: PPUSH
79699: LD_VAR 0 5
79703: PUSH
79704: LD_INT 1
79706: PLUS
79707: PPUSH
79708: LD_VAR 0 4
79712: PPUSH
79713: LD_VAR 0 2
79717: PPUSH
79718: CALL_OW 259
79722: PPUSH
79723: CALL_OW 2
79727: ST_TO_ADDR
79728: GO 79686
79730: POP
79731: POP
// if not tmp then
79732: LD_VAR 0 5
79736: NOT
79737: IFFALSE 79741
// exit ;
79739: GO 79761
// result := SortListByListDesc ( units , tmp ) ;
79741: LD_ADDR_VAR 0 3
79745: PUSH
79746: LD_VAR 0 1
79750: PPUSH
79751: LD_VAR 0 5
79755: PPUSH
79756: CALL_OW 77
79760: ST_TO_ADDR
// end ;
79761: LD_VAR 0 3
79765: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
79766: LD_INT 0
79768: PPUSH
79769: PPUSH
79770: PPUSH
// x := GetX ( building ) ;
79771: LD_ADDR_VAR 0 4
79775: PUSH
79776: LD_VAR 0 2
79780: PPUSH
79781: CALL_OW 250
79785: ST_TO_ADDR
// y := GetY ( building ) ;
79786: LD_ADDR_VAR 0 5
79790: PUSH
79791: LD_VAR 0 2
79795: PPUSH
79796: CALL_OW 251
79800: ST_TO_ADDR
// if GetTaskList ( unit ) then
79801: LD_VAR 0 1
79805: PPUSH
79806: CALL_OW 437
79810: IFFALSE 79905
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79812: LD_STRING e
79814: PUSH
79815: LD_VAR 0 1
79819: PPUSH
79820: CALL_OW 437
79824: PUSH
79825: LD_INT 1
79827: ARRAY
79828: PUSH
79829: LD_INT 1
79831: ARRAY
79832: EQUAL
79833: PUSH
79834: LD_VAR 0 4
79838: PUSH
79839: LD_VAR 0 1
79843: PPUSH
79844: CALL_OW 437
79848: PUSH
79849: LD_INT 1
79851: ARRAY
79852: PUSH
79853: LD_INT 2
79855: ARRAY
79856: EQUAL
79857: AND
79858: PUSH
79859: LD_VAR 0 5
79863: PUSH
79864: LD_VAR 0 1
79868: PPUSH
79869: CALL_OW 437
79873: PUSH
79874: LD_INT 1
79876: ARRAY
79877: PUSH
79878: LD_INT 3
79880: ARRAY
79881: EQUAL
79882: AND
79883: IFFALSE 79895
// result := true else
79885: LD_ADDR_VAR 0 3
79889: PUSH
79890: LD_INT 1
79892: ST_TO_ADDR
79893: GO 79903
// result := false ;
79895: LD_ADDR_VAR 0 3
79899: PUSH
79900: LD_INT 0
79902: ST_TO_ADDR
// end else
79903: GO 79913
// result := false ;
79905: LD_ADDR_VAR 0 3
79909: PUSH
79910: LD_INT 0
79912: ST_TO_ADDR
// end ;
79913: LD_VAR 0 3
79917: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79918: LD_INT 0
79920: PPUSH
79921: PPUSH
79922: PPUSH
79923: PPUSH
// if not unit or not area then
79924: LD_VAR 0 1
79928: NOT
79929: PUSH
79930: LD_VAR 0 2
79934: NOT
79935: OR
79936: IFFALSE 79940
// exit ;
79938: GO 80104
// tmp := AreaToList ( area , i ) ;
79940: LD_ADDR_VAR 0 6
79944: PUSH
79945: LD_VAR 0 2
79949: PPUSH
79950: LD_VAR 0 5
79954: PPUSH
79955: CALL_OW 517
79959: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
79960: LD_ADDR_VAR 0 5
79964: PUSH
79965: DOUBLE
79966: LD_INT 1
79968: DEC
79969: ST_TO_ADDR
79970: LD_VAR 0 6
79974: PUSH
79975: LD_INT 1
79977: ARRAY
79978: PUSH
79979: FOR_TO
79980: IFFALSE 80102
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
79982: LD_ADDR_VAR 0 7
79986: PUSH
79987: LD_VAR 0 6
79991: PUSH
79992: LD_INT 1
79994: ARRAY
79995: PUSH
79996: LD_VAR 0 5
80000: ARRAY
80001: PUSH
80002: LD_VAR 0 6
80006: PUSH
80007: LD_INT 2
80009: ARRAY
80010: PUSH
80011: LD_VAR 0 5
80015: ARRAY
80016: PUSH
80017: EMPTY
80018: LIST
80019: LIST
80020: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
80021: LD_VAR 0 7
80025: PUSH
80026: LD_INT 1
80028: ARRAY
80029: PPUSH
80030: LD_VAR 0 7
80034: PUSH
80035: LD_INT 2
80037: ARRAY
80038: PPUSH
80039: CALL_OW 428
80043: PUSH
80044: LD_INT 0
80046: EQUAL
80047: IFFALSE 80100
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
80049: LD_VAR 0 1
80053: PPUSH
80054: LD_VAR 0 7
80058: PUSH
80059: LD_INT 1
80061: ARRAY
80062: PPUSH
80063: LD_VAR 0 7
80067: PUSH
80068: LD_INT 2
80070: ARRAY
80071: PPUSH
80072: LD_VAR 0 3
80076: PPUSH
80077: CALL_OW 48
// result := IsPlaced ( unit ) ;
80081: LD_ADDR_VAR 0 4
80085: PUSH
80086: LD_VAR 0 1
80090: PPUSH
80091: CALL_OW 305
80095: ST_TO_ADDR
// exit ;
80096: POP
80097: POP
80098: GO 80104
// end ; end ;
80100: GO 79979
80102: POP
80103: POP
// end ;
80104: LD_VAR 0 4
80108: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
80109: LD_INT 0
80111: PPUSH
80112: PPUSH
80113: PPUSH
// if not side or side > 8 then
80114: LD_VAR 0 1
80118: NOT
80119: PUSH
80120: LD_VAR 0 1
80124: PUSH
80125: LD_INT 8
80127: GREATER
80128: OR
80129: IFFALSE 80133
// exit ;
80131: GO 80320
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
80133: LD_ADDR_VAR 0 4
80137: PUSH
80138: LD_INT 22
80140: PUSH
80141: LD_VAR 0 1
80145: PUSH
80146: EMPTY
80147: LIST
80148: LIST
80149: PUSH
80150: LD_INT 21
80152: PUSH
80153: LD_INT 3
80155: PUSH
80156: EMPTY
80157: LIST
80158: LIST
80159: PUSH
80160: EMPTY
80161: LIST
80162: LIST
80163: PPUSH
80164: CALL_OW 69
80168: ST_TO_ADDR
// if not tmp then
80169: LD_VAR 0 4
80173: NOT
80174: IFFALSE 80178
// exit ;
80176: GO 80320
// enable_addtolog := true ;
80178: LD_ADDR_OWVAR 81
80182: PUSH
80183: LD_INT 1
80185: ST_TO_ADDR
// AddToLog ( [ ) ;
80186: LD_STRING [
80188: PPUSH
80189: CALL_OW 561
// for i in tmp do
80193: LD_ADDR_VAR 0 3
80197: PUSH
80198: LD_VAR 0 4
80202: PUSH
80203: FOR_IN
80204: IFFALSE 80311
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
80206: LD_STRING [
80208: PUSH
80209: LD_VAR 0 3
80213: PPUSH
80214: CALL_OW 266
80218: STR
80219: PUSH
80220: LD_STRING , 
80222: STR
80223: PUSH
80224: LD_VAR 0 3
80228: PPUSH
80229: CALL_OW 250
80233: STR
80234: PUSH
80235: LD_STRING , 
80237: STR
80238: PUSH
80239: LD_VAR 0 3
80243: PPUSH
80244: CALL_OW 251
80248: STR
80249: PUSH
80250: LD_STRING , 
80252: STR
80253: PUSH
80254: LD_VAR 0 3
80258: PPUSH
80259: CALL_OW 254
80263: STR
80264: PUSH
80265: LD_STRING , 
80267: STR
80268: PUSH
80269: LD_VAR 0 3
80273: PPUSH
80274: LD_INT 1
80276: PPUSH
80277: CALL_OW 268
80281: STR
80282: PUSH
80283: LD_STRING , 
80285: STR
80286: PUSH
80287: LD_VAR 0 3
80291: PPUSH
80292: LD_INT 2
80294: PPUSH
80295: CALL_OW 268
80299: STR
80300: PUSH
80301: LD_STRING ],
80303: STR
80304: PPUSH
80305: CALL_OW 561
// end ;
80309: GO 80203
80311: POP
80312: POP
// AddToLog ( ]; ) ;
80313: LD_STRING ];
80315: PPUSH
80316: CALL_OW 561
// end ;
80320: LD_VAR 0 2
80324: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
80325: LD_INT 0
80327: PPUSH
80328: PPUSH
80329: PPUSH
80330: PPUSH
80331: PPUSH
// if not area or not rate or not max then
80332: LD_VAR 0 1
80336: NOT
80337: PUSH
80338: LD_VAR 0 2
80342: NOT
80343: OR
80344: PUSH
80345: LD_VAR 0 4
80349: NOT
80350: OR
80351: IFFALSE 80355
// exit ;
80353: GO 80547
// while 1 do
80355: LD_INT 1
80357: IFFALSE 80547
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
80359: LD_ADDR_VAR 0 9
80363: PUSH
80364: LD_VAR 0 1
80368: PPUSH
80369: LD_INT 1
80371: PPUSH
80372: CALL_OW 287
80376: PUSH
80377: LD_INT 10
80379: MUL
80380: ST_TO_ADDR
// r := rate / 10 ;
80381: LD_ADDR_VAR 0 7
80385: PUSH
80386: LD_VAR 0 2
80390: PUSH
80391: LD_INT 10
80393: DIVREAL
80394: ST_TO_ADDR
// time := 1 1$00 ;
80395: LD_ADDR_VAR 0 8
80399: PUSH
80400: LD_INT 2100
80402: ST_TO_ADDR
// if amount < min then
80403: LD_VAR 0 9
80407: PUSH
80408: LD_VAR 0 3
80412: LESS
80413: IFFALSE 80431
// r := r * 2 else
80415: LD_ADDR_VAR 0 7
80419: PUSH
80420: LD_VAR 0 7
80424: PUSH
80425: LD_INT 2
80427: MUL
80428: ST_TO_ADDR
80429: GO 80457
// if amount > max then
80431: LD_VAR 0 9
80435: PUSH
80436: LD_VAR 0 4
80440: GREATER
80441: IFFALSE 80457
// r := r / 2 ;
80443: LD_ADDR_VAR 0 7
80447: PUSH
80448: LD_VAR 0 7
80452: PUSH
80453: LD_INT 2
80455: DIVREAL
80456: ST_TO_ADDR
// time := time / r ;
80457: LD_ADDR_VAR 0 8
80461: PUSH
80462: LD_VAR 0 8
80466: PUSH
80467: LD_VAR 0 7
80471: DIVREAL
80472: ST_TO_ADDR
// if time < 0 then
80473: LD_VAR 0 8
80477: PUSH
80478: LD_INT 0
80480: LESS
80481: IFFALSE 80498
// time := time * - 1 ;
80483: LD_ADDR_VAR 0 8
80487: PUSH
80488: LD_VAR 0 8
80492: PUSH
80493: LD_INT 1
80495: NEG
80496: MUL
80497: ST_TO_ADDR
// wait ( time ) ;
80498: LD_VAR 0 8
80502: PPUSH
80503: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
80507: LD_INT 35
80509: PPUSH
80510: LD_INT 875
80512: PPUSH
80513: CALL_OW 12
80517: PPUSH
80518: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
80522: LD_INT 1
80524: PPUSH
80525: LD_INT 5
80527: PPUSH
80528: CALL_OW 12
80532: PPUSH
80533: LD_VAR 0 1
80537: PPUSH
80538: LD_INT 1
80540: PPUSH
80541: CALL_OW 55
// end ;
80545: GO 80355
// end ;
80547: LD_VAR 0 5
80551: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
80552: LD_INT 0
80554: PPUSH
80555: PPUSH
80556: PPUSH
80557: PPUSH
80558: PPUSH
80559: PPUSH
80560: PPUSH
80561: PPUSH
// if not turrets or not factories then
80562: LD_VAR 0 1
80566: NOT
80567: PUSH
80568: LD_VAR 0 2
80572: NOT
80573: OR
80574: IFFALSE 80578
// exit ;
80576: GO 80885
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
80578: LD_ADDR_VAR 0 10
80582: PUSH
80583: LD_INT 5
80585: PUSH
80586: LD_INT 6
80588: PUSH
80589: EMPTY
80590: LIST
80591: LIST
80592: PUSH
80593: LD_INT 2
80595: PUSH
80596: LD_INT 4
80598: PUSH
80599: EMPTY
80600: LIST
80601: LIST
80602: PUSH
80603: LD_INT 3
80605: PUSH
80606: LD_INT 5
80608: PUSH
80609: EMPTY
80610: LIST
80611: LIST
80612: PUSH
80613: EMPTY
80614: LIST
80615: LIST
80616: LIST
80617: PUSH
80618: LD_INT 24
80620: PUSH
80621: LD_INT 25
80623: PUSH
80624: EMPTY
80625: LIST
80626: LIST
80627: PUSH
80628: LD_INT 23
80630: PUSH
80631: LD_INT 27
80633: PUSH
80634: EMPTY
80635: LIST
80636: LIST
80637: PUSH
80638: EMPTY
80639: LIST
80640: LIST
80641: PUSH
80642: LD_INT 42
80644: PUSH
80645: LD_INT 43
80647: PUSH
80648: EMPTY
80649: LIST
80650: LIST
80651: PUSH
80652: LD_INT 44
80654: PUSH
80655: LD_INT 46
80657: PUSH
80658: EMPTY
80659: LIST
80660: LIST
80661: PUSH
80662: LD_INT 45
80664: PUSH
80665: LD_INT 47
80667: PUSH
80668: EMPTY
80669: LIST
80670: LIST
80671: PUSH
80672: EMPTY
80673: LIST
80674: LIST
80675: LIST
80676: PUSH
80677: EMPTY
80678: LIST
80679: LIST
80680: LIST
80681: ST_TO_ADDR
// result := [ ] ;
80682: LD_ADDR_VAR 0 3
80686: PUSH
80687: EMPTY
80688: ST_TO_ADDR
// for i in turrets do
80689: LD_ADDR_VAR 0 4
80693: PUSH
80694: LD_VAR 0 1
80698: PUSH
80699: FOR_IN
80700: IFFALSE 80883
// begin nat := GetNation ( i ) ;
80702: LD_ADDR_VAR 0 7
80706: PUSH
80707: LD_VAR 0 4
80711: PPUSH
80712: CALL_OW 248
80716: ST_TO_ADDR
// weapon := 0 ;
80717: LD_ADDR_VAR 0 8
80721: PUSH
80722: LD_INT 0
80724: ST_TO_ADDR
// if not nat then
80725: LD_VAR 0 7
80729: NOT
80730: IFFALSE 80734
// continue ;
80732: GO 80699
// for j in list [ nat ] do
80734: LD_ADDR_VAR 0 5
80738: PUSH
80739: LD_VAR 0 10
80743: PUSH
80744: LD_VAR 0 7
80748: ARRAY
80749: PUSH
80750: FOR_IN
80751: IFFALSE 80792
// if GetBWeapon ( i ) = j [ 1 ] then
80753: LD_VAR 0 4
80757: PPUSH
80758: CALL_OW 269
80762: PUSH
80763: LD_VAR 0 5
80767: PUSH
80768: LD_INT 1
80770: ARRAY
80771: EQUAL
80772: IFFALSE 80790
// begin weapon := j [ 2 ] ;
80774: LD_ADDR_VAR 0 8
80778: PUSH
80779: LD_VAR 0 5
80783: PUSH
80784: LD_INT 2
80786: ARRAY
80787: ST_TO_ADDR
// break ;
80788: GO 80792
// end ;
80790: GO 80750
80792: POP
80793: POP
// if not weapon then
80794: LD_VAR 0 8
80798: NOT
80799: IFFALSE 80803
// continue ;
80801: GO 80699
// for k in factories do
80803: LD_ADDR_VAR 0 6
80807: PUSH
80808: LD_VAR 0 2
80812: PUSH
80813: FOR_IN
80814: IFFALSE 80879
// begin weapons := AvailableWeaponList ( k ) ;
80816: LD_ADDR_VAR 0 9
80820: PUSH
80821: LD_VAR 0 6
80825: PPUSH
80826: CALL_OW 478
80830: ST_TO_ADDR
// if not weapons then
80831: LD_VAR 0 9
80835: NOT
80836: IFFALSE 80840
// continue ;
80838: GO 80813
// if weapon in weapons then
80840: LD_VAR 0 8
80844: PUSH
80845: LD_VAR 0 9
80849: IN
80850: IFFALSE 80877
// begin result := [ i , weapon ] ;
80852: LD_ADDR_VAR 0 3
80856: PUSH
80857: LD_VAR 0 4
80861: PUSH
80862: LD_VAR 0 8
80866: PUSH
80867: EMPTY
80868: LIST
80869: LIST
80870: ST_TO_ADDR
// exit ;
80871: POP
80872: POP
80873: POP
80874: POP
80875: GO 80885
// end ; end ;
80877: GO 80813
80879: POP
80880: POP
// end ;
80881: GO 80699
80883: POP
80884: POP
// end ;
80885: LD_VAR 0 3
80889: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
80890: LD_INT 0
80892: PPUSH
// if not side or side > 8 then
80893: LD_VAR 0 3
80897: NOT
80898: PUSH
80899: LD_VAR 0 3
80903: PUSH
80904: LD_INT 8
80906: GREATER
80907: OR
80908: IFFALSE 80912
// exit ;
80910: GO 80971
// if not range then
80912: LD_VAR 0 4
80916: NOT
80917: IFFALSE 80928
// range := - 12 ;
80919: LD_ADDR_VAR 0 4
80923: PUSH
80924: LD_INT 12
80926: NEG
80927: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80928: LD_VAR 0 1
80932: PPUSH
80933: LD_VAR 0 2
80937: PPUSH
80938: LD_VAR 0 3
80942: PPUSH
80943: LD_VAR 0 4
80947: PPUSH
80948: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
80952: LD_VAR 0 1
80956: PPUSH
80957: LD_VAR 0 2
80961: PPUSH
80962: LD_VAR 0 3
80966: PPUSH
80967: CALL_OW 331
// end ;
80971: LD_VAR 0 5
80975: RET
// export function Video ( mode ) ; begin
80976: LD_INT 0
80978: PPUSH
// ingame_video = mode ;
80979: LD_ADDR_OWVAR 52
80983: PUSH
80984: LD_VAR 0 1
80988: ST_TO_ADDR
// interface_hidden = mode ;
80989: LD_ADDR_OWVAR 54
80993: PUSH
80994: LD_VAR 0 1
80998: ST_TO_ADDR
// end ;
80999: LD_VAR 0 2
81003: RET
// export function Join ( array , element ) ; begin
81004: LD_INT 0
81006: PPUSH
// result := array ^ element ;
81007: LD_ADDR_VAR 0 3
81011: PUSH
81012: LD_VAR 0 1
81016: PUSH
81017: LD_VAR 0 2
81021: ADD
81022: ST_TO_ADDR
// end ;
81023: LD_VAR 0 3
81027: RET
// export function JoinUnion ( array , element ) ; begin
81028: LD_INT 0
81030: PPUSH
// result := array union element ;
81031: LD_ADDR_VAR 0 3
81035: PUSH
81036: LD_VAR 0 1
81040: PUSH
81041: LD_VAR 0 2
81045: UNION
81046: ST_TO_ADDR
// end ;
81047: LD_VAR 0 3
81051: RET
// export function GetBehemoths ( side ) ; begin
81052: LD_INT 0
81054: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
81055: LD_ADDR_VAR 0 2
81059: PUSH
81060: LD_INT 22
81062: PUSH
81063: LD_VAR 0 1
81067: PUSH
81068: EMPTY
81069: LIST
81070: LIST
81071: PUSH
81072: LD_INT 31
81074: PUSH
81075: LD_INT 25
81077: PUSH
81078: EMPTY
81079: LIST
81080: LIST
81081: PUSH
81082: EMPTY
81083: LIST
81084: LIST
81085: PPUSH
81086: CALL_OW 69
81090: ST_TO_ADDR
// end ;
81091: LD_VAR 0 2
81095: RET
// export function Shuffle ( array ) ; var i , index ; begin
81096: LD_INT 0
81098: PPUSH
81099: PPUSH
81100: PPUSH
// result := [ ] ;
81101: LD_ADDR_VAR 0 2
81105: PUSH
81106: EMPTY
81107: ST_TO_ADDR
// if not array then
81108: LD_VAR 0 1
81112: NOT
81113: IFFALSE 81117
// exit ;
81115: GO 81216
// Randomize ;
81117: CALL_OW 10
// for i = array downto 1 do
81121: LD_ADDR_VAR 0 3
81125: PUSH
81126: DOUBLE
81127: LD_VAR 0 1
81131: INC
81132: ST_TO_ADDR
81133: LD_INT 1
81135: PUSH
81136: FOR_DOWNTO
81137: IFFALSE 81214
// begin index := rand ( 1 , array ) ;
81139: LD_ADDR_VAR 0 4
81143: PUSH
81144: LD_INT 1
81146: PPUSH
81147: LD_VAR 0 1
81151: PPUSH
81152: CALL_OW 12
81156: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
81157: LD_ADDR_VAR 0 2
81161: PUSH
81162: LD_VAR 0 2
81166: PPUSH
81167: LD_VAR 0 2
81171: PUSH
81172: LD_INT 1
81174: PLUS
81175: PPUSH
81176: LD_VAR 0 1
81180: PUSH
81181: LD_VAR 0 4
81185: ARRAY
81186: PPUSH
81187: CALL_OW 2
81191: ST_TO_ADDR
// array := Delete ( array , index ) ;
81192: LD_ADDR_VAR 0 1
81196: PUSH
81197: LD_VAR 0 1
81201: PPUSH
81202: LD_VAR 0 4
81206: PPUSH
81207: CALL_OW 3
81211: ST_TO_ADDR
// end ;
81212: GO 81136
81214: POP
81215: POP
// end ;
81216: LD_VAR 0 2
81220: RET
// export function GetBaseMaterials ( base ) ; begin
81221: LD_INT 0
81223: PPUSH
// result := [ 0 , 0 , 0 ] ;
81224: LD_ADDR_VAR 0 2
81228: PUSH
81229: LD_INT 0
81231: PUSH
81232: LD_INT 0
81234: PUSH
81235: LD_INT 0
81237: PUSH
81238: EMPTY
81239: LIST
81240: LIST
81241: LIST
81242: ST_TO_ADDR
// if not base then
81243: LD_VAR 0 1
81247: NOT
81248: IFFALSE 81252
// exit ;
81250: GO 81301
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
81252: LD_ADDR_VAR 0 2
81256: PUSH
81257: LD_VAR 0 1
81261: PPUSH
81262: LD_INT 1
81264: PPUSH
81265: CALL_OW 275
81269: PUSH
81270: LD_VAR 0 1
81274: PPUSH
81275: LD_INT 2
81277: PPUSH
81278: CALL_OW 275
81282: PUSH
81283: LD_VAR 0 1
81287: PPUSH
81288: LD_INT 3
81290: PPUSH
81291: CALL_OW 275
81295: PUSH
81296: EMPTY
81297: LIST
81298: LIST
81299: LIST
81300: ST_TO_ADDR
// end ;
81301: LD_VAR 0 2
81305: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
81306: LD_INT 0
81308: PPUSH
81309: PPUSH
// result := array ;
81310: LD_ADDR_VAR 0 3
81314: PUSH
81315: LD_VAR 0 1
81319: ST_TO_ADDR
// if size > 0 then
81320: LD_VAR 0 2
81324: PUSH
81325: LD_INT 0
81327: GREATER
81328: IFFALSE 81374
// for i := array downto size do
81330: LD_ADDR_VAR 0 4
81334: PUSH
81335: DOUBLE
81336: LD_VAR 0 1
81340: INC
81341: ST_TO_ADDR
81342: LD_VAR 0 2
81346: PUSH
81347: FOR_DOWNTO
81348: IFFALSE 81372
// result := Delete ( result , result ) ;
81350: LD_ADDR_VAR 0 3
81354: PUSH
81355: LD_VAR 0 3
81359: PPUSH
81360: LD_VAR 0 3
81364: PPUSH
81365: CALL_OW 3
81369: ST_TO_ADDR
81370: GO 81347
81372: POP
81373: POP
// end ;
81374: LD_VAR 0 3
81378: RET
// export function ComExit ( unit ) ; var tmp ; begin
81379: LD_INT 0
81381: PPUSH
81382: PPUSH
// if not IsInUnit ( unit ) then
81383: LD_VAR 0 1
81387: PPUSH
81388: CALL_OW 310
81392: NOT
81393: IFFALSE 81397
// exit ;
81395: GO 81457
// tmp := IsInUnit ( unit ) ;
81397: LD_ADDR_VAR 0 3
81401: PUSH
81402: LD_VAR 0 1
81406: PPUSH
81407: CALL_OW 310
81411: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
81412: LD_VAR 0 3
81416: PPUSH
81417: CALL_OW 247
81421: PUSH
81422: LD_INT 2
81424: EQUAL
81425: IFFALSE 81438
// ComExitVehicle ( unit ) else
81427: LD_VAR 0 1
81431: PPUSH
81432: CALL_OW 121
81436: GO 81447
// ComExitBuilding ( unit ) ;
81438: LD_VAR 0 1
81442: PPUSH
81443: CALL_OW 122
// result := tmp ;
81447: LD_ADDR_VAR 0 2
81451: PUSH
81452: LD_VAR 0 3
81456: ST_TO_ADDR
// end ;
81457: LD_VAR 0 2
81461: RET
// export function ResetHc ; begin
81462: LD_INT 0
81464: PPUSH
// InitHc ;
81465: CALL_OW 19
// hc_importance := 0 ;
81469: LD_ADDR_OWVAR 32
81473: PUSH
81474: LD_INT 0
81476: ST_TO_ADDR
// end ; end_of_file
81477: LD_VAR 0 1
81481: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
81482: LD_INT 0
81484: PPUSH
81485: PPUSH
81486: PPUSH
// if not mc_bases or not skirmish then
81487: LD_EXP 87
81491: NOT
81492: PUSH
81493: LD_EXP 85
81497: NOT
81498: OR
81499: IFFALSE 81503
// exit ;
81501: GO 81668
// for i = 1 to mc_bases do
81503: LD_ADDR_VAR 0 4
81507: PUSH
81508: DOUBLE
81509: LD_INT 1
81511: DEC
81512: ST_TO_ADDR
81513: LD_EXP 87
81517: PUSH
81518: FOR_TO
81519: IFFALSE 81666
// begin if sci in mc_bases [ i ] then
81521: LD_VAR 0 2
81525: PUSH
81526: LD_EXP 87
81530: PUSH
81531: LD_VAR 0 4
81535: ARRAY
81536: IN
81537: IFFALSE 81664
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
81539: LD_ADDR_EXP 116
81543: PUSH
81544: LD_EXP 116
81548: PPUSH
81549: LD_VAR 0 4
81553: PUSH
81554: LD_EXP 116
81558: PUSH
81559: LD_VAR 0 4
81563: ARRAY
81564: PUSH
81565: LD_INT 1
81567: PLUS
81568: PUSH
81569: EMPTY
81570: LIST
81571: LIST
81572: PPUSH
81573: LD_VAR 0 1
81577: PPUSH
81578: CALL 50080 0 3
81582: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
81583: LD_ADDR_VAR 0 5
81587: PUSH
81588: LD_EXP 87
81592: PUSH
81593: LD_VAR 0 4
81597: ARRAY
81598: PPUSH
81599: LD_INT 2
81601: PUSH
81602: LD_INT 30
81604: PUSH
81605: LD_INT 0
81607: PUSH
81608: EMPTY
81609: LIST
81610: LIST
81611: PUSH
81612: LD_INT 30
81614: PUSH
81615: LD_INT 1
81617: PUSH
81618: EMPTY
81619: LIST
81620: LIST
81621: PUSH
81622: EMPTY
81623: LIST
81624: LIST
81625: LIST
81626: PPUSH
81627: CALL_OW 72
81631: PPUSH
81632: LD_VAR 0 1
81636: PPUSH
81637: CALL_OW 74
81641: ST_TO_ADDR
// if tmp then
81642: LD_VAR 0 5
81646: IFFALSE 81662
// ComStandNearbyBuilding ( ape , tmp ) ;
81648: LD_VAR 0 1
81652: PPUSH
81653: LD_VAR 0 5
81657: PPUSH
81658: CALL 46694 0 2
// break ;
81662: GO 81666
// end ; end ;
81664: GO 81518
81666: POP
81667: POP
// end ;
81668: LD_VAR 0 3
81672: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
81673: LD_INT 0
81675: PPUSH
81676: PPUSH
81677: PPUSH
// if not mc_bases or not skirmish then
81678: LD_EXP 87
81682: NOT
81683: PUSH
81684: LD_EXP 85
81688: NOT
81689: OR
81690: IFFALSE 81694
// exit ;
81692: GO 81783
// for i = 1 to mc_bases do
81694: LD_ADDR_VAR 0 4
81698: PUSH
81699: DOUBLE
81700: LD_INT 1
81702: DEC
81703: ST_TO_ADDR
81704: LD_EXP 87
81708: PUSH
81709: FOR_TO
81710: IFFALSE 81781
// begin if building in mc_busy_turret_list [ i ] then
81712: LD_VAR 0 1
81716: PUSH
81717: LD_EXP 97
81721: PUSH
81722: LD_VAR 0 4
81726: ARRAY
81727: IN
81728: IFFALSE 81779
// begin tmp := mc_busy_turret_list [ i ] diff building ;
81730: LD_ADDR_VAR 0 5
81734: PUSH
81735: LD_EXP 97
81739: PUSH
81740: LD_VAR 0 4
81744: ARRAY
81745: PUSH
81746: LD_VAR 0 1
81750: DIFF
81751: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
81752: LD_ADDR_EXP 97
81756: PUSH
81757: LD_EXP 97
81761: PPUSH
81762: LD_VAR 0 4
81766: PPUSH
81767: LD_VAR 0 5
81771: PPUSH
81772: CALL_OW 1
81776: ST_TO_ADDR
// break ;
81777: GO 81781
// end ; end ;
81779: GO 81709
81781: POP
81782: POP
// end ;
81783: LD_VAR 0 3
81787: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
81788: LD_INT 0
81790: PPUSH
81791: PPUSH
81792: PPUSH
// if not mc_bases or not skirmish then
81793: LD_EXP 87
81797: NOT
81798: PUSH
81799: LD_EXP 85
81803: NOT
81804: OR
81805: IFFALSE 81809
// exit ;
81807: GO 82008
// for i = 1 to mc_bases do
81809: LD_ADDR_VAR 0 5
81813: PUSH
81814: DOUBLE
81815: LD_INT 1
81817: DEC
81818: ST_TO_ADDR
81819: LD_EXP 87
81823: PUSH
81824: FOR_TO
81825: IFFALSE 82006
// if building in mc_bases [ i ] then
81827: LD_VAR 0 1
81831: PUSH
81832: LD_EXP 87
81836: PUSH
81837: LD_VAR 0 5
81841: ARRAY
81842: IN
81843: IFFALSE 82004
// begin tmp := mc_bases [ i ] diff building ;
81845: LD_ADDR_VAR 0 6
81849: PUSH
81850: LD_EXP 87
81854: PUSH
81855: LD_VAR 0 5
81859: ARRAY
81860: PUSH
81861: LD_VAR 0 1
81865: DIFF
81866: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
81867: LD_ADDR_EXP 87
81871: PUSH
81872: LD_EXP 87
81876: PPUSH
81877: LD_VAR 0 5
81881: PPUSH
81882: LD_VAR 0 6
81886: PPUSH
81887: CALL_OW 1
81891: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
81892: LD_VAR 0 1
81896: PUSH
81897: LD_EXP 95
81901: PUSH
81902: LD_VAR 0 5
81906: ARRAY
81907: IN
81908: IFFALSE 81947
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
81910: LD_ADDR_EXP 95
81914: PUSH
81915: LD_EXP 95
81919: PPUSH
81920: LD_VAR 0 5
81924: PPUSH
81925: LD_EXP 95
81929: PUSH
81930: LD_VAR 0 5
81934: ARRAY
81935: PUSH
81936: LD_VAR 0 1
81940: DIFF
81941: PPUSH
81942: CALL_OW 1
81946: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
81947: LD_VAR 0 1
81951: PUSH
81952: LD_EXP 96
81956: PUSH
81957: LD_VAR 0 5
81961: ARRAY
81962: IN
81963: IFFALSE 82002
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
81965: LD_ADDR_EXP 96
81969: PUSH
81970: LD_EXP 96
81974: PPUSH
81975: LD_VAR 0 5
81979: PPUSH
81980: LD_EXP 96
81984: PUSH
81985: LD_VAR 0 5
81989: ARRAY
81990: PUSH
81991: LD_VAR 0 1
81995: DIFF
81996: PPUSH
81997: CALL_OW 1
82001: ST_TO_ADDR
// break ;
82002: GO 82006
// end ;
82004: GO 81824
82006: POP
82007: POP
// end ;
82008: LD_VAR 0 4
82012: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
82013: LD_INT 0
82015: PPUSH
82016: PPUSH
82017: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
82018: LD_EXP 87
82022: NOT
82023: PUSH
82024: LD_EXP 85
82028: NOT
82029: OR
82030: PUSH
82031: LD_VAR 0 3
82035: PUSH
82036: LD_EXP 113
82040: IN
82041: NOT
82042: OR
82043: IFFALSE 82047
// exit ;
82045: GO 82170
// for i = 1 to mc_vehicles do
82047: LD_ADDR_VAR 0 6
82051: PUSH
82052: DOUBLE
82053: LD_INT 1
82055: DEC
82056: ST_TO_ADDR
82057: LD_EXP 106
82061: PUSH
82062: FOR_TO
82063: IFFALSE 82168
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
82065: LD_VAR 0 2
82069: PUSH
82070: LD_EXP 106
82074: PUSH
82075: LD_VAR 0 6
82079: ARRAY
82080: IN
82081: PUSH
82082: LD_VAR 0 1
82086: PUSH
82087: LD_EXP 106
82091: PUSH
82092: LD_VAR 0 6
82096: ARRAY
82097: IN
82098: OR
82099: IFFALSE 82166
// begin tmp := mc_vehicles [ i ] diff old ;
82101: LD_ADDR_VAR 0 7
82105: PUSH
82106: LD_EXP 106
82110: PUSH
82111: LD_VAR 0 6
82115: ARRAY
82116: PUSH
82117: LD_VAR 0 2
82121: DIFF
82122: ST_TO_ADDR
// tmp := tmp diff new ;
82123: LD_ADDR_VAR 0 7
82127: PUSH
82128: LD_VAR 0 7
82132: PUSH
82133: LD_VAR 0 1
82137: DIFF
82138: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
82139: LD_ADDR_EXP 106
82143: PUSH
82144: LD_EXP 106
82148: PPUSH
82149: LD_VAR 0 6
82153: PPUSH
82154: LD_VAR 0 7
82158: PPUSH
82159: CALL_OW 1
82163: ST_TO_ADDR
// break ;
82164: GO 82168
// end ;
82166: GO 82062
82168: POP
82169: POP
// end ;
82170: LD_VAR 0 5
82174: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
82175: LD_INT 0
82177: PPUSH
82178: PPUSH
82179: PPUSH
82180: PPUSH
// if not mc_bases or not skirmish then
82181: LD_EXP 87
82185: NOT
82186: PUSH
82187: LD_EXP 85
82191: NOT
82192: OR
82193: IFFALSE 82197
// exit ;
82195: GO 82574
// side := GetSide ( vehicle ) ;
82197: LD_ADDR_VAR 0 5
82201: PUSH
82202: LD_VAR 0 1
82206: PPUSH
82207: CALL_OW 255
82211: ST_TO_ADDR
// for i = 1 to mc_bases do
82212: LD_ADDR_VAR 0 4
82216: PUSH
82217: DOUBLE
82218: LD_INT 1
82220: DEC
82221: ST_TO_ADDR
82222: LD_EXP 87
82226: PUSH
82227: FOR_TO
82228: IFFALSE 82572
// begin if factory in mc_bases [ i ] then
82230: LD_VAR 0 2
82234: PUSH
82235: LD_EXP 87
82239: PUSH
82240: LD_VAR 0 4
82244: ARRAY
82245: IN
82246: IFFALSE 82570
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
82248: LD_EXP 109
82252: PUSH
82253: LD_VAR 0 4
82257: ARRAY
82258: PUSH
82259: LD_EXP 98
82263: PUSH
82264: LD_VAR 0 4
82268: ARRAY
82269: LESS
82270: PUSH
82271: LD_VAR 0 1
82275: PPUSH
82276: CALL_OW 264
82280: PUSH
82281: LD_INT 31
82283: PUSH
82284: LD_INT 32
82286: PUSH
82287: LD_INT 51
82289: PUSH
82290: LD_EXP 131
82294: PUSH
82295: LD_INT 12
82297: PUSH
82298: LD_INT 30
82300: PUSH
82301: LD_EXP 130
82305: PUSH
82306: LD_INT 11
82308: PUSH
82309: LD_INT 53
82311: PUSH
82312: LD_INT 14
82314: PUSH
82315: LD_EXP 134
82319: PUSH
82320: LD_INT 29
82322: PUSH
82323: LD_EXP 132
82327: PUSH
82328: LD_INT 13
82330: PUSH
82331: LD_INT 52
82333: PUSH
82334: LD_INT 48
82336: PUSH
82337: LD_INT 8
82339: PUSH
82340: EMPTY
82341: LIST
82342: LIST
82343: LIST
82344: LIST
82345: LIST
82346: LIST
82347: LIST
82348: LIST
82349: LIST
82350: LIST
82351: LIST
82352: LIST
82353: LIST
82354: LIST
82355: LIST
82356: LIST
82357: LIST
82358: IN
82359: NOT
82360: AND
82361: IFFALSE 82409
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
82363: LD_ADDR_EXP 109
82367: PUSH
82368: LD_EXP 109
82372: PPUSH
82373: LD_VAR 0 4
82377: PUSH
82378: LD_EXP 109
82382: PUSH
82383: LD_VAR 0 4
82387: ARRAY
82388: PUSH
82389: LD_INT 1
82391: PLUS
82392: PUSH
82393: EMPTY
82394: LIST
82395: LIST
82396: PPUSH
82397: LD_VAR 0 1
82401: PPUSH
82402: CALL 50080 0 3
82406: ST_TO_ADDR
82407: GO 82453
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
82409: LD_ADDR_EXP 106
82413: PUSH
82414: LD_EXP 106
82418: PPUSH
82419: LD_VAR 0 4
82423: PUSH
82424: LD_EXP 106
82428: PUSH
82429: LD_VAR 0 4
82433: ARRAY
82434: PUSH
82435: LD_INT 1
82437: PLUS
82438: PUSH
82439: EMPTY
82440: LIST
82441: LIST
82442: PPUSH
82443: LD_VAR 0 1
82447: PPUSH
82448: CALL 50080 0 3
82452: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
82453: LD_VAR 0 1
82457: PPUSH
82458: CALL_OW 263
82462: PUSH
82463: LD_INT 2
82465: EQUAL
82466: IFFALSE 82486
// begin repeat wait ( 0 0$1 ) ;
82468: LD_INT 35
82470: PPUSH
82471: CALL_OW 67
// until IsControledBy ( vehicle ) ;
82475: LD_VAR 0 1
82479: PPUSH
82480: CALL_OW 312
82484: IFFALSE 82468
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
82486: LD_VAR 0 1
82490: PPUSH
82491: LD_EXP 111
82495: PUSH
82496: LD_VAR 0 4
82500: ARRAY
82501: PPUSH
82502: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
82506: LD_VAR 0 1
82510: PPUSH
82511: CALL_OW 263
82515: PUSH
82516: LD_INT 1
82518: NONEQUAL
82519: IFFALSE 82523
// break ;
82521: GO 82572
// repeat wait ( 0 0$1 ) ;
82523: LD_INT 35
82525: PPUSH
82526: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
82530: LD_VAR 0 1
82534: PPUSH
82535: LD_EXP 111
82539: PUSH
82540: LD_VAR 0 4
82544: ARRAY
82545: PPUSH
82546: CALL_OW 308
82550: IFFALSE 82523
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
82552: LD_VAR 0 1
82556: PPUSH
82557: CALL_OW 311
82561: PPUSH
82562: CALL_OW 121
// exit ;
82566: POP
82567: POP
82568: GO 82574
// end ; end ;
82570: GO 82227
82572: POP
82573: POP
// end ;
82574: LD_VAR 0 3
82578: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
82579: LD_INT 0
82581: PPUSH
82582: PPUSH
82583: PPUSH
82584: PPUSH
// if not mc_bases or not skirmish then
82585: LD_EXP 87
82589: NOT
82590: PUSH
82591: LD_EXP 85
82595: NOT
82596: OR
82597: IFFALSE 82601
// exit ;
82599: GO 82954
// repeat wait ( 0 0$1 ) ;
82601: LD_INT 35
82603: PPUSH
82604: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
82608: LD_VAR 0 2
82612: PPUSH
82613: LD_VAR 0 3
82617: PPUSH
82618: CALL_OW 284
82622: IFFALSE 82601
// if GetResourceTypeXY ( x , y ) = mat_artefact then
82624: LD_VAR 0 2
82628: PPUSH
82629: LD_VAR 0 3
82633: PPUSH
82634: CALL_OW 283
82638: PUSH
82639: LD_INT 4
82641: EQUAL
82642: IFFALSE 82646
// exit ;
82644: GO 82954
// for i = 1 to mc_bases do
82646: LD_ADDR_VAR 0 7
82650: PUSH
82651: DOUBLE
82652: LD_INT 1
82654: DEC
82655: ST_TO_ADDR
82656: LD_EXP 87
82660: PUSH
82661: FOR_TO
82662: IFFALSE 82952
// begin if mc_crates_area [ i ] then
82664: LD_EXP 105
82668: PUSH
82669: LD_VAR 0 7
82673: ARRAY
82674: IFFALSE 82785
// for j in mc_crates_area [ i ] do
82676: LD_ADDR_VAR 0 8
82680: PUSH
82681: LD_EXP 105
82685: PUSH
82686: LD_VAR 0 7
82690: ARRAY
82691: PUSH
82692: FOR_IN
82693: IFFALSE 82783
// if InArea ( x , y , j ) then
82695: LD_VAR 0 2
82699: PPUSH
82700: LD_VAR 0 3
82704: PPUSH
82705: LD_VAR 0 8
82709: PPUSH
82710: CALL_OW 309
82714: IFFALSE 82781
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
82716: LD_ADDR_EXP 103
82720: PUSH
82721: LD_EXP 103
82725: PPUSH
82726: LD_VAR 0 7
82730: PUSH
82731: LD_EXP 103
82735: PUSH
82736: LD_VAR 0 7
82740: ARRAY
82741: PUSH
82742: LD_INT 1
82744: PLUS
82745: PUSH
82746: EMPTY
82747: LIST
82748: LIST
82749: PPUSH
82750: LD_VAR 0 4
82754: PUSH
82755: LD_VAR 0 2
82759: PUSH
82760: LD_VAR 0 3
82764: PUSH
82765: EMPTY
82766: LIST
82767: LIST
82768: LIST
82769: PPUSH
82770: CALL 50080 0 3
82774: ST_TO_ADDR
// exit ;
82775: POP
82776: POP
82777: POP
82778: POP
82779: GO 82954
// end ;
82781: GO 82692
82783: POP
82784: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
82785: LD_ADDR_VAR 0 9
82789: PUSH
82790: LD_EXP 87
82794: PUSH
82795: LD_VAR 0 7
82799: ARRAY
82800: PPUSH
82801: LD_INT 2
82803: PUSH
82804: LD_INT 30
82806: PUSH
82807: LD_INT 0
82809: PUSH
82810: EMPTY
82811: LIST
82812: LIST
82813: PUSH
82814: LD_INT 30
82816: PUSH
82817: LD_INT 1
82819: PUSH
82820: EMPTY
82821: LIST
82822: LIST
82823: PUSH
82824: EMPTY
82825: LIST
82826: LIST
82827: LIST
82828: PPUSH
82829: CALL_OW 72
82833: ST_TO_ADDR
// if not depot then
82834: LD_VAR 0 9
82838: NOT
82839: IFFALSE 82843
// continue ;
82841: GO 82661
// for j in depot do
82843: LD_ADDR_VAR 0 8
82847: PUSH
82848: LD_VAR 0 9
82852: PUSH
82853: FOR_IN
82854: IFFALSE 82948
// if GetDistUnitXY ( j , x , y ) < 30 then
82856: LD_VAR 0 8
82860: PPUSH
82861: LD_VAR 0 2
82865: PPUSH
82866: LD_VAR 0 3
82870: PPUSH
82871: CALL_OW 297
82875: PUSH
82876: LD_INT 30
82878: LESS
82879: IFFALSE 82946
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
82881: LD_ADDR_EXP 103
82885: PUSH
82886: LD_EXP 103
82890: PPUSH
82891: LD_VAR 0 7
82895: PUSH
82896: LD_EXP 103
82900: PUSH
82901: LD_VAR 0 7
82905: ARRAY
82906: PUSH
82907: LD_INT 1
82909: PLUS
82910: PUSH
82911: EMPTY
82912: LIST
82913: LIST
82914: PPUSH
82915: LD_VAR 0 4
82919: PUSH
82920: LD_VAR 0 2
82924: PUSH
82925: LD_VAR 0 3
82929: PUSH
82930: EMPTY
82931: LIST
82932: LIST
82933: LIST
82934: PPUSH
82935: CALL 50080 0 3
82939: ST_TO_ADDR
// exit ;
82940: POP
82941: POP
82942: POP
82943: POP
82944: GO 82954
// end ;
82946: GO 82853
82948: POP
82949: POP
// end ;
82950: GO 82661
82952: POP
82953: POP
// end ;
82954: LD_VAR 0 6
82958: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
82959: LD_INT 0
82961: PPUSH
82962: PPUSH
82963: PPUSH
82964: PPUSH
// if not mc_bases or not skirmish then
82965: LD_EXP 87
82969: NOT
82970: PUSH
82971: LD_EXP 85
82975: NOT
82976: OR
82977: IFFALSE 82981
// exit ;
82979: GO 83258
// side := GetSide ( lab ) ;
82981: LD_ADDR_VAR 0 4
82985: PUSH
82986: LD_VAR 0 2
82990: PPUSH
82991: CALL_OW 255
82995: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
82996: LD_VAR 0 4
83000: PUSH
83001: LD_EXP 113
83005: IN
83006: NOT
83007: PUSH
83008: LD_EXP 114
83012: NOT
83013: OR
83014: PUSH
83015: LD_EXP 87
83019: NOT
83020: OR
83021: IFFALSE 83025
// exit ;
83023: GO 83258
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
83025: LD_ADDR_EXP 114
83029: PUSH
83030: LD_EXP 114
83034: PPUSH
83035: LD_VAR 0 4
83039: PPUSH
83040: LD_EXP 114
83044: PUSH
83045: LD_VAR 0 4
83049: ARRAY
83050: PUSH
83051: LD_VAR 0 1
83055: DIFF
83056: PPUSH
83057: CALL_OW 1
83061: ST_TO_ADDR
// for i = 1 to mc_bases do
83062: LD_ADDR_VAR 0 5
83066: PUSH
83067: DOUBLE
83068: LD_INT 1
83070: DEC
83071: ST_TO_ADDR
83072: LD_EXP 87
83076: PUSH
83077: FOR_TO
83078: IFFALSE 83256
// begin if lab in mc_bases [ i ] then
83080: LD_VAR 0 2
83084: PUSH
83085: LD_EXP 87
83089: PUSH
83090: LD_VAR 0 5
83094: ARRAY
83095: IN
83096: IFFALSE 83254
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
83098: LD_VAR 0 1
83102: PUSH
83103: LD_INT 11
83105: PUSH
83106: LD_INT 4
83108: PUSH
83109: LD_INT 3
83111: PUSH
83112: LD_INT 2
83114: PUSH
83115: EMPTY
83116: LIST
83117: LIST
83118: LIST
83119: LIST
83120: IN
83121: PUSH
83122: LD_EXP 117
83126: PUSH
83127: LD_VAR 0 5
83131: ARRAY
83132: AND
83133: IFFALSE 83254
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
83135: LD_ADDR_VAR 0 6
83139: PUSH
83140: LD_EXP 117
83144: PUSH
83145: LD_VAR 0 5
83149: ARRAY
83150: PUSH
83151: LD_INT 1
83153: ARRAY
83154: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
83155: LD_ADDR_EXP 117
83159: PUSH
83160: LD_EXP 117
83164: PPUSH
83165: LD_VAR 0 5
83169: PPUSH
83170: EMPTY
83171: PPUSH
83172: CALL_OW 1
83176: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
83177: LD_VAR 0 6
83181: PPUSH
83182: LD_INT 0
83184: PPUSH
83185: CALL_OW 109
// ComExitBuilding ( tmp ) ;
83189: LD_VAR 0 6
83193: PPUSH
83194: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
83198: LD_ADDR_EXP 116
83202: PUSH
83203: LD_EXP 116
83207: PPUSH
83208: LD_VAR 0 5
83212: PPUSH
83213: LD_EXP 116
83217: PUSH
83218: LD_VAR 0 5
83222: ARRAY
83223: PPUSH
83224: LD_INT 1
83226: PPUSH
83227: LD_VAR 0 6
83231: PPUSH
83232: CALL_OW 2
83236: PPUSH
83237: CALL_OW 1
83241: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
83242: LD_VAR 0 5
83246: PPUSH
83247: LD_INT 112
83249: PPUSH
83250: CALL 23922 0 2
// end ; end ; end ;
83254: GO 83077
83256: POP
83257: POP
// end ;
83258: LD_VAR 0 3
83262: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
83263: LD_INT 0
83265: PPUSH
83266: PPUSH
83267: PPUSH
83268: PPUSH
83269: PPUSH
83270: PPUSH
83271: PPUSH
83272: PPUSH
// if not mc_bases or not skirmish then
83273: LD_EXP 87
83277: NOT
83278: PUSH
83279: LD_EXP 85
83283: NOT
83284: OR
83285: IFFALSE 83289
// exit ;
83287: GO 84660
// for i = 1 to mc_bases do
83289: LD_ADDR_VAR 0 3
83293: PUSH
83294: DOUBLE
83295: LD_INT 1
83297: DEC
83298: ST_TO_ADDR
83299: LD_EXP 87
83303: PUSH
83304: FOR_TO
83305: IFFALSE 84658
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
83307: LD_VAR 0 1
83311: PUSH
83312: LD_EXP 87
83316: PUSH
83317: LD_VAR 0 3
83321: ARRAY
83322: IN
83323: PUSH
83324: LD_VAR 0 1
83328: PUSH
83329: LD_EXP 94
83333: PUSH
83334: LD_VAR 0 3
83338: ARRAY
83339: IN
83340: OR
83341: PUSH
83342: LD_VAR 0 1
83346: PUSH
83347: LD_EXP 109
83351: PUSH
83352: LD_VAR 0 3
83356: ARRAY
83357: IN
83358: OR
83359: PUSH
83360: LD_VAR 0 1
83364: PUSH
83365: LD_EXP 106
83369: PUSH
83370: LD_VAR 0 3
83374: ARRAY
83375: IN
83376: OR
83377: PUSH
83378: LD_VAR 0 1
83382: PUSH
83383: LD_EXP 116
83387: PUSH
83388: LD_VAR 0 3
83392: ARRAY
83393: IN
83394: OR
83395: PUSH
83396: LD_VAR 0 1
83400: PUSH
83401: LD_EXP 117
83405: PUSH
83406: LD_VAR 0 3
83410: ARRAY
83411: IN
83412: OR
83413: IFFALSE 84656
// begin if un in mc_ape [ i ] then
83415: LD_VAR 0 1
83419: PUSH
83420: LD_EXP 116
83424: PUSH
83425: LD_VAR 0 3
83429: ARRAY
83430: IN
83431: IFFALSE 83470
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
83433: LD_ADDR_EXP 116
83437: PUSH
83438: LD_EXP 116
83442: PPUSH
83443: LD_VAR 0 3
83447: PPUSH
83448: LD_EXP 116
83452: PUSH
83453: LD_VAR 0 3
83457: ARRAY
83458: PUSH
83459: LD_VAR 0 1
83463: DIFF
83464: PPUSH
83465: CALL_OW 1
83469: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
83470: LD_VAR 0 1
83474: PUSH
83475: LD_EXP 117
83479: PUSH
83480: LD_VAR 0 3
83484: ARRAY
83485: IN
83486: IFFALSE 83510
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
83488: LD_ADDR_EXP 117
83492: PUSH
83493: LD_EXP 117
83497: PPUSH
83498: LD_VAR 0 3
83502: PPUSH
83503: EMPTY
83504: PPUSH
83505: CALL_OW 1
83509: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
83510: LD_VAR 0 1
83514: PPUSH
83515: CALL_OW 247
83519: PUSH
83520: LD_INT 2
83522: EQUAL
83523: PUSH
83524: LD_VAR 0 1
83528: PPUSH
83529: CALL_OW 110
83533: PUSH
83534: LD_INT 20
83536: EQUAL
83537: PUSH
83538: LD_VAR 0 1
83542: PUSH
83543: LD_EXP 109
83547: PUSH
83548: LD_VAR 0 3
83552: ARRAY
83553: IN
83554: OR
83555: PUSH
83556: LD_VAR 0 1
83560: PPUSH
83561: CALL_OW 264
83565: PUSH
83566: LD_INT 12
83568: PUSH
83569: LD_INT 51
83571: PUSH
83572: LD_EXP 131
83576: PUSH
83577: LD_INT 32
83579: PUSH
83580: LD_INT 13
83582: PUSH
83583: LD_INT 52
83585: PUSH
83586: LD_INT 31
83588: PUSH
83589: EMPTY
83590: LIST
83591: LIST
83592: LIST
83593: LIST
83594: LIST
83595: LIST
83596: LIST
83597: IN
83598: OR
83599: AND
83600: IFFALSE 83908
// begin if un in mc_defender [ i ] then
83602: LD_VAR 0 1
83606: PUSH
83607: LD_EXP 109
83611: PUSH
83612: LD_VAR 0 3
83616: ARRAY
83617: IN
83618: IFFALSE 83657
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
83620: LD_ADDR_EXP 109
83624: PUSH
83625: LD_EXP 109
83629: PPUSH
83630: LD_VAR 0 3
83634: PPUSH
83635: LD_EXP 109
83639: PUSH
83640: LD_VAR 0 3
83644: ARRAY
83645: PUSH
83646: LD_VAR 0 1
83650: DIFF
83651: PPUSH
83652: CALL_OW 1
83656: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
83657: LD_ADDR_VAR 0 8
83661: PUSH
83662: LD_VAR 0 3
83666: PPUSH
83667: LD_INT 3
83669: PPUSH
83670: CALL 43978 0 2
83674: ST_TO_ADDR
// if fac then
83675: LD_VAR 0 8
83679: IFFALSE 83908
// begin for j in fac do
83681: LD_ADDR_VAR 0 4
83685: PUSH
83686: LD_VAR 0 8
83690: PUSH
83691: FOR_IN
83692: IFFALSE 83906
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
83694: LD_ADDR_VAR 0 9
83698: PUSH
83699: LD_VAR 0 8
83703: PPUSH
83704: LD_VAR 0 1
83708: PPUSH
83709: CALL_OW 265
83713: PPUSH
83714: LD_VAR 0 1
83718: PPUSH
83719: CALL_OW 262
83723: PPUSH
83724: LD_VAR 0 1
83728: PPUSH
83729: CALL_OW 263
83733: PPUSH
83734: LD_VAR 0 1
83738: PPUSH
83739: CALL_OW 264
83743: PPUSH
83744: CALL 47612 0 5
83748: ST_TO_ADDR
// if components then
83749: LD_VAR 0 9
83753: IFFALSE 83904
// begin if GetWeapon ( un ) = ar_control_tower then
83755: LD_VAR 0 1
83759: PPUSH
83760: CALL_OW 264
83764: PUSH
83765: LD_INT 31
83767: EQUAL
83768: IFFALSE 83885
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
83770: LD_VAR 0 1
83774: PPUSH
83775: CALL_OW 311
83779: PPUSH
83780: LD_INT 0
83782: PPUSH
83783: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
83787: LD_ADDR_EXP 127
83791: PUSH
83792: LD_EXP 127
83796: PPUSH
83797: LD_VAR 0 3
83801: PPUSH
83802: LD_EXP 127
83806: PUSH
83807: LD_VAR 0 3
83811: ARRAY
83812: PUSH
83813: LD_VAR 0 1
83817: PPUSH
83818: CALL_OW 311
83822: DIFF
83823: PPUSH
83824: CALL_OW 1
83828: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
83829: LD_ADDR_VAR 0 7
83833: PUSH
83834: LD_EXP 108
83838: PUSH
83839: LD_VAR 0 3
83843: ARRAY
83844: PPUSH
83845: LD_INT 1
83847: PPUSH
83848: LD_VAR 0 9
83852: PPUSH
83853: CALL_OW 2
83857: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
83858: LD_ADDR_EXP 108
83862: PUSH
83863: LD_EXP 108
83867: PPUSH
83868: LD_VAR 0 3
83872: PPUSH
83873: LD_VAR 0 7
83877: PPUSH
83878: CALL_OW 1
83882: ST_TO_ADDR
// end else
83883: GO 83902
// MC_InsertProduceList ( i , [ components ] ) ;
83885: LD_VAR 0 3
83889: PPUSH
83890: LD_VAR 0 9
83894: PUSH
83895: EMPTY
83896: LIST
83897: PPUSH
83898: CALL 43523 0 2
// break ;
83902: GO 83906
// end ; end ;
83904: GO 83691
83906: POP
83907: POP
// end ; end ; if GetType ( un ) = unit_building then
83908: LD_VAR 0 1
83912: PPUSH
83913: CALL_OW 247
83917: PUSH
83918: LD_INT 3
83920: EQUAL
83921: IFFALSE 84324
// begin btype := GetBType ( un ) ;
83923: LD_ADDR_VAR 0 5
83927: PUSH
83928: LD_VAR 0 1
83932: PPUSH
83933: CALL_OW 266
83937: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
83938: LD_VAR 0 5
83942: PUSH
83943: LD_INT 29
83945: PUSH
83946: LD_INT 30
83948: PUSH
83949: EMPTY
83950: LIST
83951: LIST
83952: IN
83953: IFFALSE 84026
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
83955: LD_VAR 0 1
83959: PPUSH
83960: CALL_OW 250
83964: PPUSH
83965: LD_VAR 0 1
83969: PPUSH
83970: CALL_OW 251
83974: PPUSH
83975: LD_VAR 0 1
83979: PPUSH
83980: CALL_OW 255
83984: PPUSH
83985: CALL_OW 440
83989: NOT
83990: IFFALSE 84026
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
83992: LD_VAR 0 1
83996: PPUSH
83997: CALL_OW 250
84001: PPUSH
84002: LD_VAR 0 1
84006: PPUSH
84007: CALL_OW 251
84011: PPUSH
84012: LD_VAR 0 1
84016: PPUSH
84017: CALL_OW 255
84021: PPUSH
84022: CALL_OW 441
// end ; if btype = b_warehouse then
84026: LD_VAR 0 5
84030: PUSH
84031: LD_INT 1
84033: EQUAL
84034: IFFALSE 84052
// begin btype := b_depot ;
84036: LD_ADDR_VAR 0 5
84040: PUSH
84041: LD_INT 0
84043: ST_TO_ADDR
// pos := 1 ;
84044: LD_ADDR_VAR 0 6
84048: PUSH
84049: LD_INT 1
84051: ST_TO_ADDR
// end ; if btype = b_factory then
84052: LD_VAR 0 5
84056: PUSH
84057: LD_INT 3
84059: EQUAL
84060: IFFALSE 84078
// begin btype := b_workshop ;
84062: LD_ADDR_VAR 0 5
84066: PUSH
84067: LD_INT 2
84069: ST_TO_ADDR
// pos := 1 ;
84070: LD_ADDR_VAR 0 6
84074: PUSH
84075: LD_INT 1
84077: ST_TO_ADDR
// end ; if btype = b_barracks then
84078: LD_VAR 0 5
84082: PUSH
84083: LD_INT 5
84085: EQUAL
84086: IFFALSE 84096
// btype := b_armoury ;
84088: LD_ADDR_VAR 0 5
84092: PUSH
84093: LD_INT 4
84095: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
84096: LD_VAR 0 5
84100: PUSH
84101: LD_INT 7
84103: PUSH
84104: LD_INT 8
84106: PUSH
84107: EMPTY
84108: LIST
84109: LIST
84110: IN
84111: IFFALSE 84121
// btype := b_lab ;
84113: LD_ADDR_VAR 0 5
84117: PUSH
84118: LD_INT 6
84120: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
84121: LD_ADDR_EXP 92
84125: PUSH
84126: LD_EXP 92
84130: PPUSH
84131: LD_VAR 0 3
84135: PUSH
84136: LD_EXP 92
84140: PUSH
84141: LD_VAR 0 3
84145: ARRAY
84146: PUSH
84147: LD_INT 1
84149: PLUS
84150: PUSH
84151: EMPTY
84152: LIST
84153: LIST
84154: PPUSH
84155: LD_VAR 0 5
84159: PUSH
84160: LD_VAR 0 1
84164: PPUSH
84165: CALL_OW 250
84169: PUSH
84170: LD_VAR 0 1
84174: PPUSH
84175: CALL_OW 251
84179: PUSH
84180: LD_VAR 0 1
84184: PPUSH
84185: CALL_OW 254
84189: PUSH
84190: EMPTY
84191: LIST
84192: LIST
84193: LIST
84194: LIST
84195: PPUSH
84196: CALL 50080 0 3
84200: ST_TO_ADDR
// if pos = 1 then
84201: LD_VAR 0 6
84205: PUSH
84206: LD_INT 1
84208: EQUAL
84209: IFFALSE 84324
// begin tmp := mc_build_list [ i ] ;
84211: LD_ADDR_VAR 0 7
84215: PUSH
84216: LD_EXP 92
84220: PUSH
84221: LD_VAR 0 3
84225: ARRAY
84226: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
84227: LD_VAR 0 7
84231: PPUSH
84232: LD_INT 2
84234: PUSH
84235: LD_INT 30
84237: PUSH
84238: LD_INT 0
84240: PUSH
84241: EMPTY
84242: LIST
84243: LIST
84244: PUSH
84245: LD_INT 30
84247: PUSH
84248: LD_INT 1
84250: PUSH
84251: EMPTY
84252: LIST
84253: LIST
84254: PUSH
84255: EMPTY
84256: LIST
84257: LIST
84258: LIST
84259: PPUSH
84260: CALL_OW 72
84264: IFFALSE 84274
// pos := 2 ;
84266: LD_ADDR_VAR 0 6
84270: PUSH
84271: LD_INT 2
84273: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
84274: LD_ADDR_VAR 0 7
84278: PUSH
84279: LD_VAR 0 7
84283: PPUSH
84284: LD_VAR 0 6
84288: PPUSH
84289: LD_VAR 0 7
84293: PPUSH
84294: CALL 50406 0 3
84298: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
84299: LD_ADDR_EXP 92
84303: PUSH
84304: LD_EXP 92
84308: PPUSH
84309: LD_VAR 0 3
84313: PPUSH
84314: LD_VAR 0 7
84318: PPUSH
84319: CALL_OW 1
84323: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
84324: LD_VAR 0 1
84328: PUSH
84329: LD_EXP 87
84333: PUSH
84334: LD_VAR 0 3
84338: ARRAY
84339: IN
84340: IFFALSE 84379
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
84342: LD_ADDR_EXP 87
84346: PUSH
84347: LD_EXP 87
84351: PPUSH
84352: LD_VAR 0 3
84356: PPUSH
84357: LD_EXP 87
84361: PUSH
84362: LD_VAR 0 3
84366: ARRAY
84367: PUSH
84368: LD_VAR 0 1
84372: DIFF
84373: PPUSH
84374: CALL_OW 1
84378: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
84379: LD_VAR 0 1
84383: PUSH
84384: LD_EXP 94
84388: PUSH
84389: LD_VAR 0 3
84393: ARRAY
84394: IN
84395: IFFALSE 84434
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
84397: LD_ADDR_EXP 94
84401: PUSH
84402: LD_EXP 94
84406: PPUSH
84407: LD_VAR 0 3
84411: PPUSH
84412: LD_EXP 94
84416: PUSH
84417: LD_VAR 0 3
84421: ARRAY
84422: PUSH
84423: LD_VAR 0 1
84427: DIFF
84428: PPUSH
84429: CALL_OW 1
84433: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
84434: LD_VAR 0 1
84438: PUSH
84439: LD_EXP 106
84443: PUSH
84444: LD_VAR 0 3
84448: ARRAY
84449: IN
84450: IFFALSE 84489
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
84452: LD_ADDR_EXP 106
84456: PUSH
84457: LD_EXP 106
84461: PPUSH
84462: LD_VAR 0 3
84466: PPUSH
84467: LD_EXP 106
84471: PUSH
84472: LD_VAR 0 3
84476: ARRAY
84477: PUSH
84478: LD_VAR 0 1
84482: DIFF
84483: PPUSH
84484: CALL_OW 1
84488: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
84489: LD_VAR 0 1
84493: PUSH
84494: LD_EXP 109
84498: PUSH
84499: LD_VAR 0 3
84503: ARRAY
84504: IN
84505: IFFALSE 84544
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
84507: LD_ADDR_EXP 109
84511: PUSH
84512: LD_EXP 109
84516: PPUSH
84517: LD_VAR 0 3
84521: PPUSH
84522: LD_EXP 109
84526: PUSH
84527: LD_VAR 0 3
84531: ARRAY
84532: PUSH
84533: LD_VAR 0 1
84537: DIFF
84538: PPUSH
84539: CALL_OW 1
84543: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
84544: LD_VAR 0 1
84548: PUSH
84549: LD_EXP 96
84553: PUSH
84554: LD_VAR 0 3
84558: ARRAY
84559: IN
84560: IFFALSE 84599
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
84562: LD_ADDR_EXP 96
84566: PUSH
84567: LD_EXP 96
84571: PPUSH
84572: LD_VAR 0 3
84576: PPUSH
84577: LD_EXP 96
84581: PUSH
84582: LD_VAR 0 3
84586: ARRAY
84587: PUSH
84588: LD_VAR 0 1
84592: DIFF
84593: PPUSH
84594: CALL_OW 1
84598: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
84599: LD_VAR 0 1
84603: PUSH
84604: LD_EXP 95
84608: PUSH
84609: LD_VAR 0 3
84613: ARRAY
84614: IN
84615: IFFALSE 84654
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
84617: LD_ADDR_EXP 95
84621: PUSH
84622: LD_EXP 95
84626: PPUSH
84627: LD_VAR 0 3
84631: PPUSH
84632: LD_EXP 95
84636: PUSH
84637: LD_VAR 0 3
84641: ARRAY
84642: PUSH
84643: LD_VAR 0 1
84647: DIFF
84648: PPUSH
84649: CALL_OW 1
84653: ST_TO_ADDR
// end ; break ;
84654: GO 84658
// end ;
84656: GO 83304
84658: POP
84659: POP
// end ;
84660: LD_VAR 0 2
84664: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
84665: LD_INT 0
84667: PPUSH
84668: PPUSH
84669: PPUSH
// if not mc_bases or not skirmish then
84670: LD_EXP 87
84674: NOT
84675: PUSH
84676: LD_EXP 85
84680: NOT
84681: OR
84682: IFFALSE 84686
// exit ;
84684: GO 84901
// for i = 1 to mc_bases do
84686: LD_ADDR_VAR 0 3
84690: PUSH
84691: DOUBLE
84692: LD_INT 1
84694: DEC
84695: ST_TO_ADDR
84696: LD_EXP 87
84700: PUSH
84701: FOR_TO
84702: IFFALSE 84899
// begin if building in mc_construct_list [ i ] then
84704: LD_VAR 0 1
84708: PUSH
84709: LD_EXP 94
84713: PUSH
84714: LD_VAR 0 3
84718: ARRAY
84719: IN
84720: IFFALSE 84897
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
84722: LD_ADDR_EXP 94
84726: PUSH
84727: LD_EXP 94
84731: PPUSH
84732: LD_VAR 0 3
84736: PPUSH
84737: LD_EXP 94
84741: PUSH
84742: LD_VAR 0 3
84746: ARRAY
84747: PUSH
84748: LD_VAR 0 1
84752: DIFF
84753: PPUSH
84754: CALL_OW 1
84758: ST_TO_ADDR
// if building in mc_lab [ i ] then
84759: LD_VAR 0 1
84763: PUSH
84764: LD_EXP 120
84768: PUSH
84769: LD_VAR 0 3
84773: ARRAY
84774: IN
84775: IFFALSE 84830
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
84777: LD_ADDR_EXP 121
84781: PUSH
84782: LD_EXP 121
84786: PPUSH
84787: LD_VAR 0 3
84791: PPUSH
84792: LD_EXP 121
84796: PUSH
84797: LD_VAR 0 3
84801: ARRAY
84802: PPUSH
84803: LD_INT 1
84805: PPUSH
84806: LD_EXP 121
84810: PUSH
84811: LD_VAR 0 3
84815: ARRAY
84816: PPUSH
84817: LD_INT 0
84819: PPUSH
84820: CALL 49498 0 4
84824: PPUSH
84825: CALL_OW 1
84829: ST_TO_ADDR
// if not building in mc_bases [ i ] then
84830: LD_VAR 0 1
84834: PUSH
84835: LD_EXP 87
84839: PUSH
84840: LD_VAR 0 3
84844: ARRAY
84845: IN
84846: NOT
84847: IFFALSE 84893
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
84849: LD_ADDR_EXP 87
84853: PUSH
84854: LD_EXP 87
84858: PPUSH
84859: LD_VAR 0 3
84863: PUSH
84864: LD_EXP 87
84868: PUSH
84869: LD_VAR 0 3
84873: ARRAY
84874: PUSH
84875: LD_INT 1
84877: PLUS
84878: PUSH
84879: EMPTY
84880: LIST
84881: LIST
84882: PPUSH
84883: LD_VAR 0 1
84887: PPUSH
84888: CALL 50080 0 3
84892: ST_TO_ADDR
// exit ;
84893: POP
84894: POP
84895: GO 84901
// end ; end ;
84897: GO 84701
84899: POP
84900: POP
// end ;
84901: LD_VAR 0 2
84905: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
84906: LD_INT 0
84908: PPUSH
84909: PPUSH
84910: PPUSH
84911: PPUSH
84912: PPUSH
84913: PPUSH
84914: PPUSH
// if not mc_bases or not skirmish then
84915: LD_EXP 87
84919: NOT
84920: PUSH
84921: LD_EXP 85
84925: NOT
84926: OR
84927: IFFALSE 84931
// exit ;
84929: GO 85592
// for i = 1 to mc_bases do
84931: LD_ADDR_VAR 0 3
84935: PUSH
84936: DOUBLE
84937: LD_INT 1
84939: DEC
84940: ST_TO_ADDR
84941: LD_EXP 87
84945: PUSH
84946: FOR_TO
84947: IFFALSE 85590
// begin if building in mc_construct_list [ i ] then
84949: LD_VAR 0 1
84953: PUSH
84954: LD_EXP 94
84958: PUSH
84959: LD_VAR 0 3
84963: ARRAY
84964: IN
84965: IFFALSE 85588
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
84967: LD_ADDR_EXP 94
84971: PUSH
84972: LD_EXP 94
84976: PPUSH
84977: LD_VAR 0 3
84981: PPUSH
84982: LD_EXP 94
84986: PUSH
84987: LD_VAR 0 3
84991: ARRAY
84992: PUSH
84993: LD_VAR 0 1
84997: DIFF
84998: PPUSH
84999: CALL_OW 1
85003: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
85004: LD_ADDR_EXP 87
85008: PUSH
85009: LD_EXP 87
85013: PPUSH
85014: LD_VAR 0 3
85018: PUSH
85019: LD_EXP 87
85023: PUSH
85024: LD_VAR 0 3
85028: ARRAY
85029: PUSH
85030: LD_INT 1
85032: PLUS
85033: PUSH
85034: EMPTY
85035: LIST
85036: LIST
85037: PPUSH
85038: LD_VAR 0 1
85042: PPUSH
85043: CALL 50080 0 3
85047: ST_TO_ADDR
// btype := GetBType ( building ) ;
85048: LD_ADDR_VAR 0 5
85052: PUSH
85053: LD_VAR 0 1
85057: PPUSH
85058: CALL_OW 266
85062: ST_TO_ADDR
// side := GetSide ( building ) ;
85063: LD_ADDR_VAR 0 8
85067: PUSH
85068: LD_VAR 0 1
85072: PPUSH
85073: CALL_OW 255
85077: ST_TO_ADDR
// if btype = b_lab then
85078: LD_VAR 0 5
85082: PUSH
85083: LD_INT 6
85085: EQUAL
85086: IFFALSE 85136
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
85088: LD_ADDR_EXP 120
85092: PUSH
85093: LD_EXP 120
85097: PPUSH
85098: LD_VAR 0 3
85102: PUSH
85103: LD_EXP 120
85107: PUSH
85108: LD_VAR 0 3
85112: ARRAY
85113: PUSH
85114: LD_INT 1
85116: PLUS
85117: PUSH
85118: EMPTY
85119: LIST
85120: LIST
85121: PPUSH
85122: LD_VAR 0 1
85126: PPUSH
85127: CALL 50080 0 3
85131: ST_TO_ADDR
// exit ;
85132: POP
85133: POP
85134: GO 85592
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
85136: LD_VAR 0 5
85140: PUSH
85141: LD_INT 0
85143: PUSH
85144: LD_INT 2
85146: PUSH
85147: LD_INT 4
85149: PUSH
85150: EMPTY
85151: LIST
85152: LIST
85153: LIST
85154: IN
85155: IFFALSE 85279
// begin if btype = b_armoury then
85157: LD_VAR 0 5
85161: PUSH
85162: LD_INT 4
85164: EQUAL
85165: IFFALSE 85175
// btype := b_barracks ;
85167: LD_ADDR_VAR 0 5
85171: PUSH
85172: LD_INT 5
85174: ST_TO_ADDR
// if btype = b_depot then
85175: LD_VAR 0 5
85179: PUSH
85180: LD_INT 0
85182: EQUAL
85183: IFFALSE 85193
// btype := b_warehouse ;
85185: LD_ADDR_VAR 0 5
85189: PUSH
85190: LD_INT 1
85192: ST_TO_ADDR
// if btype = b_workshop then
85193: LD_VAR 0 5
85197: PUSH
85198: LD_INT 2
85200: EQUAL
85201: IFFALSE 85211
// btype := b_factory ;
85203: LD_ADDR_VAR 0 5
85207: PUSH
85208: LD_INT 3
85210: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
85211: LD_VAR 0 5
85215: PPUSH
85216: LD_VAR 0 8
85220: PPUSH
85221: CALL_OW 323
85225: PUSH
85226: LD_INT 1
85228: EQUAL
85229: IFFALSE 85275
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
85231: LD_ADDR_EXP 119
85235: PUSH
85236: LD_EXP 119
85240: PPUSH
85241: LD_VAR 0 3
85245: PUSH
85246: LD_EXP 119
85250: PUSH
85251: LD_VAR 0 3
85255: ARRAY
85256: PUSH
85257: LD_INT 1
85259: PLUS
85260: PUSH
85261: EMPTY
85262: LIST
85263: LIST
85264: PPUSH
85265: LD_VAR 0 1
85269: PPUSH
85270: CALL 50080 0 3
85274: ST_TO_ADDR
// exit ;
85275: POP
85276: POP
85277: GO 85592
// end ; if btype in [ b_bunker , b_turret ] then
85279: LD_VAR 0 5
85283: PUSH
85284: LD_INT 32
85286: PUSH
85287: LD_INT 33
85289: PUSH
85290: EMPTY
85291: LIST
85292: LIST
85293: IN
85294: IFFALSE 85584
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
85296: LD_ADDR_EXP 95
85300: PUSH
85301: LD_EXP 95
85305: PPUSH
85306: LD_VAR 0 3
85310: PUSH
85311: LD_EXP 95
85315: PUSH
85316: LD_VAR 0 3
85320: ARRAY
85321: PUSH
85322: LD_INT 1
85324: PLUS
85325: PUSH
85326: EMPTY
85327: LIST
85328: LIST
85329: PPUSH
85330: LD_VAR 0 1
85334: PPUSH
85335: CALL 50080 0 3
85339: ST_TO_ADDR
// if btype = b_bunker then
85340: LD_VAR 0 5
85344: PUSH
85345: LD_INT 32
85347: EQUAL
85348: IFFALSE 85584
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
85350: LD_ADDR_EXP 96
85354: PUSH
85355: LD_EXP 96
85359: PPUSH
85360: LD_VAR 0 3
85364: PUSH
85365: LD_EXP 96
85369: PUSH
85370: LD_VAR 0 3
85374: ARRAY
85375: PUSH
85376: LD_INT 1
85378: PLUS
85379: PUSH
85380: EMPTY
85381: LIST
85382: LIST
85383: PPUSH
85384: LD_VAR 0 1
85388: PPUSH
85389: CALL 50080 0 3
85393: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
85394: LD_ADDR_VAR 0 6
85398: PUSH
85399: LD_EXP 87
85403: PUSH
85404: LD_VAR 0 3
85408: ARRAY
85409: PPUSH
85410: LD_INT 25
85412: PUSH
85413: LD_INT 1
85415: PUSH
85416: EMPTY
85417: LIST
85418: LIST
85419: PUSH
85420: LD_INT 3
85422: PUSH
85423: LD_INT 54
85425: PUSH
85426: EMPTY
85427: LIST
85428: PUSH
85429: EMPTY
85430: LIST
85431: LIST
85432: PUSH
85433: EMPTY
85434: LIST
85435: LIST
85436: PPUSH
85437: CALL_OW 72
85441: ST_TO_ADDR
// if tmp then
85442: LD_VAR 0 6
85446: IFFALSE 85452
// exit ;
85448: POP
85449: POP
85450: GO 85592
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
85452: LD_ADDR_VAR 0 6
85456: PUSH
85457: LD_EXP 87
85461: PUSH
85462: LD_VAR 0 3
85466: ARRAY
85467: PPUSH
85468: LD_INT 2
85470: PUSH
85471: LD_INT 30
85473: PUSH
85474: LD_INT 4
85476: PUSH
85477: EMPTY
85478: LIST
85479: LIST
85480: PUSH
85481: LD_INT 30
85483: PUSH
85484: LD_INT 5
85486: PUSH
85487: EMPTY
85488: LIST
85489: LIST
85490: PUSH
85491: EMPTY
85492: LIST
85493: LIST
85494: LIST
85495: PPUSH
85496: CALL_OW 72
85500: ST_TO_ADDR
// if not tmp then
85501: LD_VAR 0 6
85505: NOT
85506: IFFALSE 85512
// exit ;
85508: POP
85509: POP
85510: GO 85592
// for j in tmp do
85512: LD_ADDR_VAR 0 4
85516: PUSH
85517: LD_VAR 0 6
85521: PUSH
85522: FOR_IN
85523: IFFALSE 85582
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
85525: LD_ADDR_VAR 0 7
85529: PUSH
85530: LD_VAR 0 4
85534: PPUSH
85535: CALL_OW 313
85539: PPUSH
85540: LD_INT 25
85542: PUSH
85543: LD_INT 1
85545: PUSH
85546: EMPTY
85547: LIST
85548: LIST
85549: PPUSH
85550: CALL_OW 72
85554: ST_TO_ADDR
// if units then
85555: LD_VAR 0 7
85559: IFFALSE 85580
// begin ComExitBuilding ( units [ 1 ] ) ;
85561: LD_VAR 0 7
85565: PUSH
85566: LD_INT 1
85568: ARRAY
85569: PPUSH
85570: CALL_OW 122
// exit ;
85574: POP
85575: POP
85576: POP
85577: POP
85578: GO 85592
// end ; end ;
85580: GO 85522
85582: POP
85583: POP
// end ; end ; exit ;
85584: POP
85585: POP
85586: GO 85592
// end ; end ;
85588: GO 84946
85590: POP
85591: POP
// end ;
85592: LD_VAR 0 2
85596: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
85597: LD_INT 0
85599: PPUSH
85600: PPUSH
85601: PPUSH
85602: PPUSH
85603: PPUSH
85604: PPUSH
85605: PPUSH
// if not mc_bases or not skirmish then
85606: LD_EXP 87
85610: NOT
85611: PUSH
85612: LD_EXP 85
85616: NOT
85617: OR
85618: IFFALSE 85622
// exit ;
85620: GO 85853
// btype := GetBType ( building ) ;
85622: LD_ADDR_VAR 0 6
85626: PUSH
85627: LD_VAR 0 1
85631: PPUSH
85632: CALL_OW 266
85636: ST_TO_ADDR
// x := GetX ( building ) ;
85637: LD_ADDR_VAR 0 7
85641: PUSH
85642: LD_VAR 0 1
85646: PPUSH
85647: CALL_OW 250
85651: ST_TO_ADDR
// y := GetY ( building ) ;
85652: LD_ADDR_VAR 0 8
85656: PUSH
85657: LD_VAR 0 1
85661: PPUSH
85662: CALL_OW 251
85666: ST_TO_ADDR
// d := GetDir ( building ) ;
85667: LD_ADDR_VAR 0 9
85671: PUSH
85672: LD_VAR 0 1
85676: PPUSH
85677: CALL_OW 254
85681: ST_TO_ADDR
// for i = 1 to mc_bases do
85682: LD_ADDR_VAR 0 4
85686: PUSH
85687: DOUBLE
85688: LD_INT 1
85690: DEC
85691: ST_TO_ADDR
85692: LD_EXP 87
85696: PUSH
85697: FOR_TO
85698: IFFALSE 85851
// begin if not mc_build_list [ i ] then
85700: LD_EXP 92
85704: PUSH
85705: LD_VAR 0 4
85709: ARRAY
85710: NOT
85711: IFFALSE 85715
// continue ;
85713: GO 85697
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
85715: LD_VAR 0 6
85719: PUSH
85720: LD_VAR 0 7
85724: PUSH
85725: LD_VAR 0 8
85729: PUSH
85730: LD_VAR 0 9
85734: PUSH
85735: EMPTY
85736: LIST
85737: LIST
85738: LIST
85739: LIST
85740: PPUSH
85741: LD_EXP 92
85745: PUSH
85746: LD_VAR 0 4
85750: ARRAY
85751: PUSH
85752: LD_INT 1
85754: ARRAY
85755: PPUSH
85756: CALL 56249 0 2
85760: IFFALSE 85849
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
85762: LD_ADDR_EXP 92
85766: PUSH
85767: LD_EXP 92
85771: PPUSH
85772: LD_VAR 0 4
85776: PPUSH
85777: LD_EXP 92
85781: PUSH
85782: LD_VAR 0 4
85786: ARRAY
85787: PPUSH
85788: LD_INT 1
85790: PPUSH
85791: CALL_OW 3
85795: PPUSH
85796: CALL_OW 1
85800: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
85801: LD_ADDR_EXP 94
85805: PUSH
85806: LD_EXP 94
85810: PPUSH
85811: LD_VAR 0 4
85815: PUSH
85816: LD_EXP 94
85820: PUSH
85821: LD_VAR 0 4
85825: ARRAY
85826: PUSH
85827: LD_INT 1
85829: PLUS
85830: PUSH
85831: EMPTY
85832: LIST
85833: LIST
85834: PPUSH
85835: LD_VAR 0 1
85839: PPUSH
85840: CALL 50080 0 3
85844: ST_TO_ADDR
// exit ;
85845: POP
85846: POP
85847: GO 85853
// end ; end ;
85849: GO 85697
85851: POP
85852: POP
// end ;
85853: LD_VAR 0 3
85857: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
85858: LD_INT 0
85860: PPUSH
85861: PPUSH
85862: PPUSH
// if not mc_bases or not skirmish then
85863: LD_EXP 87
85867: NOT
85868: PUSH
85869: LD_EXP 85
85873: NOT
85874: OR
85875: IFFALSE 85879
// exit ;
85877: GO 86069
// for i = 1 to mc_bases do
85879: LD_ADDR_VAR 0 4
85883: PUSH
85884: DOUBLE
85885: LD_INT 1
85887: DEC
85888: ST_TO_ADDR
85889: LD_EXP 87
85893: PUSH
85894: FOR_TO
85895: IFFALSE 85982
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
85897: LD_VAR 0 1
85901: PUSH
85902: LD_EXP 95
85906: PUSH
85907: LD_VAR 0 4
85911: ARRAY
85912: IN
85913: PUSH
85914: LD_VAR 0 1
85918: PUSH
85919: LD_EXP 96
85923: PUSH
85924: LD_VAR 0 4
85928: ARRAY
85929: IN
85930: NOT
85931: AND
85932: IFFALSE 85980
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
85934: LD_ADDR_EXP 96
85938: PUSH
85939: LD_EXP 96
85943: PPUSH
85944: LD_VAR 0 4
85948: PUSH
85949: LD_EXP 96
85953: PUSH
85954: LD_VAR 0 4
85958: ARRAY
85959: PUSH
85960: LD_INT 1
85962: PLUS
85963: PUSH
85964: EMPTY
85965: LIST
85966: LIST
85967: PPUSH
85968: LD_VAR 0 1
85972: PPUSH
85973: CALL 50080 0 3
85977: ST_TO_ADDR
// break ;
85978: GO 85982
// end ; end ;
85980: GO 85894
85982: POP
85983: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
85984: LD_VAR 0 1
85988: PPUSH
85989: CALL_OW 257
85993: PUSH
85994: LD_EXP 113
85998: IN
85999: PUSH
86000: LD_VAR 0 1
86004: PPUSH
86005: CALL_OW 266
86009: PUSH
86010: LD_INT 5
86012: EQUAL
86013: AND
86014: PUSH
86015: LD_VAR 0 2
86019: PPUSH
86020: CALL_OW 110
86024: PUSH
86025: LD_INT 18
86027: NONEQUAL
86028: AND
86029: IFFALSE 86069
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
86031: LD_VAR 0 2
86035: PPUSH
86036: CALL_OW 257
86040: PUSH
86041: LD_INT 5
86043: PUSH
86044: LD_INT 8
86046: PUSH
86047: LD_INT 9
86049: PUSH
86050: EMPTY
86051: LIST
86052: LIST
86053: LIST
86054: IN
86055: IFFALSE 86069
// SetClass ( unit , 1 ) ;
86057: LD_VAR 0 2
86061: PPUSH
86062: LD_INT 1
86064: PPUSH
86065: CALL_OW 336
// end ;
86069: LD_VAR 0 3
86073: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
86074: LD_INT 0
86076: PPUSH
86077: PPUSH
// if not mc_bases or not skirmish then
86078: LD_EXP 87
86082: NOT
86083: PUSH
86084: LD_EXP 85
86088: NOT
86089: OR
86090: IFFALSE 86094
// exit ;
86092: GO 86210
// if GetLives ( abandoned_vehicle ) > 250 then
86094: LD_VAR 0 2
86098: PPUSH
86099: CALL_OW 256
86103: PUSH
86104: LD_INT 250
86106: GREATER
86107: IFFALSE 86111
// exit ;
86109: GO 86210
// for i = 1 to mc_bases do
86111: LD_ADDR_VAR 0 6
86115: PUSH
86116: DOUBLE
86117: LD_INT 1
86119: DEC
86120: ST_TO_ADDR
86121: LD_EXP 87
86125: PUSH
86126: FOR_TO
86127: IFFALSE 86208
// begin if driver in mc_bases [ i ] then
86129: LD_VAR 0 1
86133: PUSH
86134: LD_EXP 87
86138: PUSH
86139: LD_VAR 0 6
86143: ARRAY
86144: IN
86145: IFFALSE 86206
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
86147: LD_VAR 0 1
86151: PPUSH
86152: LD_EXP 87
86156: PUSH
86157: LD_VAR 0 6
86161: ARRAY
86162: PPUSH
86163: LD_INT 2
86165: PUSH
86166: LD_INT 30
86168: PUSH
86169: LD_INT 0
86171: PUSH
86172: EMPTY
86173: LIST
86174: LIST
86175: PUSH
86176: LD_INT 30
86178: PUSH
86179: LD_INT 1
86181: PUSH
86182: EMPTY
86183: LIST
86184: LIST
86185: PUSH
86186: EMPTY
86187: LIST
86188: LIST
86189: LIST
86190: PPUSH
86191: CALL_OW 72
86195: PUSH
86196: LD_INT 1
86198: ARRAY
86199: PPUSH
86200: CALL_OW 112
// break ;
86204: GO 86208
// end ; end ;
86206: GO 86126
86208: POP
86209: POP
// end ; end_of_file
86210: LD_VAR 0 5
86214: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
86215: LD_INT 0
86217: PPUSH
86218: PPUSH
86219: PPUSH
86220: PPUSH
86221: PPUSH
86222: PPUSH
86223: PPUSH
86224: PPUSH
86225: PPUSH
86226: PPUSH
86227: PPUSH
86228: PPUSH
86229: PPUSH
86230: PPUSH
86231: PPUSH
86232: PPUSH
86233: PPUSH
86234: PPUSH
86235: PPUSH
86236: PPUSH
86237: PPUSH
86238: PPUSH
86239: PPUSH
86240: PPUSH
86241: PPUSH
86242: PPUSH
86243: PPUSH
86244: PPUSH
86245: PPUSH
86246: PPUSH
86247: PPUSH
86248: PPUSH
86249: PPUSH
86250: PPUSH
// if not list then
86251: LD_VAR 0 1
86255: NOT
86256: IFFALSE 86260
// exit ;
86258: GO 90919
// base := list [ 1 ] ;
86260: LD_ADDR_VAR 0 3
86264: PUSH
86265: LD_VAR 0 1
86269: PUSH
86270: LD_INT 1
86272: ARRAY
86273: ST_TO_ADDR
// group := list [ 2 ] ;
86274: LD_ADDR_VAR 0 4
86278: PUSH
86279: LD_VAR 0 1
86283: PUSH
86284: LD_INT 2
86286: ARRAY
86287: ST_TO_ADDR
// path := list [ 3 ] ;
86288: LD_ADDR_VAR 0 5
86292: PUSH
86293: LD_VAR 0 1
86297: PUSH
86298: LD_INT 3
86300: ARRAY
86301: ST_TO_ADDR
// flags := list [ 4 ] ;
86302: LD_ADDR_VAR 0 6
86306: PUSH
86307: LD_VAR 0 1
86311: PUSH
86312: LD_INT 4
86314: ARRAY
86315: ST_TO_ADDR
// mined := [ ] ;
86316: LD_ADDR_VAR 0 27
86320: PUSH
86321: EMPTY
86322: ST_TO_ADDR
// bombed := [ ] ;
86323: LD_ADDR_VAR 0 28
86327: PUSH
86328: EMPTY
86329: ST_TO_ADDR
// healers := [ ] ;
86330: LD_ADDR_VAR 0 31
86334: PUSH
86335: EMPTY
86336: ST_TO_ADDR
// to_heal := [ ] ;
86337: LD_ADDR_VAR 0 30
86341: PUSH
86342: EMPTY
86343: ST_TO_ADDR
// repairs := [ ] ;
86344: LD_ADDR_VAR 0 33
86348: PUSH
86349: EMPTY
86350: ST_TO_ADDR
// to_repair := [ ] ;
86351: LD_ADDR_VAR 0 32
86355: PUSH
86356: EMPTY
86357: ST_TO_ADDR
// if not group or not path then
86358: LD_VAR 0 4
86362: NOT
86363: PUSH
86364: LD_VAR 0 5
86368: NOT
86369: OR
86370: IFFALSE 86374
// exit ;
86372: GO 90919
// side := GetSide ( group [ 1 ] ) ;
86374: LD_ADDR_VAR 0 35
86378: PUSH
86379: LD_VAR 0 4
86383: PUSH
86384: LD_INT 1
86386: ARRAY
86387: PPUSH
86388: CALL_OW 255
86392: ST_TO_ADDR
// if flags then
86393: LD_VAR 0 6
86397: IFFALSE 86541
// begin f_ignore_area := flags [ 1 ] ;
86399: LD_ADDR_VAR 0 17
86403: PUSH
86404: LD_VAR 0 6
86408: PUSH
86409: LD_INT 1
86411: ARRAY
86412: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
86413: LD_ADDR_VAR 0 18
86417: PUSH
86418: LD_VAR 0 6
86422: PUSH
86423: LD_INT 2
86425: ARRAY
86426: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
86427: LD_ADDR_VAR 0 19
86431: PUSH
86432: LD_VAR 0 6
86436: PUSH
86437: LD_INT 3
86439: ARRAY
86440: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
86441: LD_ADDR_VAR 0 20
86445: PUSH
86446: LD_VAR 0 6
86450: PUSH
86451: LD_INT 4
86453: ARRAY
86454: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
86455: LD_ADDR_VAR 0 21
86459: PUSH
86460: LD_VAR 0 6
86464: PUSH
86465: LD_INT 5
86467: ARRAY
86468: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
86469: LD_ADDR_VAR 0 22
86473: PUSH
86474: LD_VAR 0 6
86478: PUSH
86479: LD_INT 6
86481: ARRAY
86482: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
86483: LD_ADDR_VAR 0 23
86487: PUSH
86488: LD_VAR 0 6
86492: PUSH
86493: LD_INT 7
86495: ARRAY
86496: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
86497: LD_ADDR_VAR 0 24
86501: PUSH
86502: LD_VAR 0 6
86506: PUSH
86507: LD_INT 8
86509: ARRAY
86510: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
86511: LD_ADDR_VAR 0 25
86515: PUSH
86516: LD_VAR 0 6
86520: PUSH
86521: LD_INT 9
86523: ARRAY
86524: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
86525: LD_ADDR_VAR 0 26
86529: PUSH
86530: LD_VAR 0 6
86534: PUSH
86535: LD_INT 10
86537: ARRAY
86538: ST_TO_ADDR
// end else
86539: GO 86621
// begin f_ignore_area := false ;
86541: LD_ADDR_VAR 0 17
86545: PUSH
86546: LD_INT 0
86548: ST_TO_ADDR
// f_capture := false ;
86549: LD_ADDR_VAR 0 18
86553: PUSH
86554: LD_INT 0
86556: ST_TO_ADDR
// f_ignore_civ := false ;
86557: LD_ADDR_VAR 0 19
86561: PUSH
86562: LD_INT 0
86564: ST_TO_ADDR
// f_murder := false ;
86565: LD_ADDR_VAR 0 20
86569: PUSH
86570: LD_INT 0
86572: ST_TO_ADDR
// f_mines := false ;
86573: LD_ADDR_VAR 0 21
86577: PUSH
86578: LD_INT 0
86580: ST_TO_ADDR
// f_repair := false ;
86581: LD_ADDR_VAR 0 22
86585: PUSH
86586: LD_INT 0
86588: ST_TO_ADDR
// f_heal := false ;
86589: LD_ADDR_VAR 0 23
86593: PUSH
86594: LD_INT 0
86596: ST_TO_ADDR
// f_spacetime := false ;
86597: LD_ADDR_VAR 0 24
86601: PUSH
86602: LD_INT 0
86604: ST_TO_ADDR
// f_attack_depot := false ;
86605: LD_ADDR_VAR 0 25
86609: PUSH
86610: LD_INT 0
86612: ST_TO_ADDR
// f_crawl := false ;
86613: LD_ADDR_VAR 0 26
86617: PUSH
86618: LD_INT 0
86620: ST_TO_ADDR
// end ; if f_heal then
86621: LD_VAR 0 23
86625: IFFALSE 86652
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
86627: LD_ADDR_VAR 0 31
86631: PUSH
86632: LD_VAR 0 4
86636: PPUSH
86637: LD_INT 25
86639: PUSH
86640: LD_INT 4
86642: PUSH
86643: EMPTY
86644: LIST
86645: LIST
86646: PPUSH
86647: CALL_OW 72
86651: ST_TO_ADDR
// if f_repair then
86652: LD_VAR 0 22
86656: IFFALSE 86683
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
86658: LD_ADDR_VAR 0 33
86662: PUSH
86663: LD_VAR 0 4
86667: PPUSH
86668: LD_INT 25
86670: PUSH
86671: LD_INT 3
86673: PUSH
86674: EMPTY
86675: LIST
86676: LIST
86677: PPUSH
86678: CALL_OW 72
86682: ST_TO_ADDR
// units_path := [ ] ;
86683: LD_ADDR_VAR 0 16
86687: PUSH
86688: EMPTY
86689: ST_TO_ADDR
// for i = 1 to group do
86690: LD_ADDR_VAR 0 7
86694: PUSH
86695: DOUBLE
86696: LD_INT 1
86698: DEC
86699: ST_TO_ADDR
86700: LD_VAR 0 4
86704: PUSH
86705: FOR_TO
86706: IFFALSE 86735
// units_path := Replace ( units_path , i , path ) ;
86708: LD_ADDR_VAR 0 16
86712: PUSH
86713: LD_VAR 0 16
86717: PPUSH
86718: LD_VAR 0 7
86722: PPUSH
86723: LD_VAR 0 5
86727: PPUSH
86728: CALL_OW 1
86732: ST_TO_ADDR
86733: GO 86705
86735: POP
86736: POP
// repeat for i = group downto 1 do
86737: LD_ADDR_VAR 0 7
86741: PUSH
86742: DOUBLE
86743: LD_VAR 0 4
86747: INC
86748: ST_TO_ADDR
86749: LD_INT 1
86751: PUSH
86752: FOR_DOWNTO
86753: IFFALSE 90875
// begin wait ( 5 ) ;
86755: LD_INT 5
86757: PPUSH
86758: CALL_OW 67
// tmp := [ ] ;
86762: LD_ADDR_VAR 0 14
86766: PUSH
86767: EMPTY
86768: ST_TO_ADDR
// attacking := false ;
86769: LD_ADDR_VAR 0 29
86773: PUSH
86774: LD_INT 0
86776: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
86777: LD_VAR 0 4
86781: PUSH
86782: LD_VAR 0 7
86786: ARRAY
86787: PPUSH
86788: CALL_OW 301
86792: PUSH
86793: LD_VAR 0 4
86797: PUSH
86798: LD_VAR 0 7
86802: ARRAY
86803: NOT
86804: OR
86805: IFFALSE 86914
// begin if GetType ( group [ i ] ) = unit_human then
86807: LD_VAR 0 4
86811: PUSH
86812: LD_VAR 0 7
86816: ARRAY
86817: PPUSH
86818: CALL_OW 247
86822: PUSH
86823: LD_INT 1
86825: EQUAL
86826: IFFALSE 86872
// begin to_heal := to_heal diff group [ i ] ;
86828: LD_ADDR_VAR 0 30
86832: PUSH
86833: LD_VAR 0 30
86837: PUSH
86838: LD_VAR 0 4
86842: PUSH
86843: LD_VAR 0 7
86847: ARRAY
86848: DIFF
86849: ST_TO_ADDR
// healers := healers diff group [ i ] ;
86850: LD_ADDR_VAR 0 31
86854: PUSH
86855: LD_VAR 0 31
86859: PUSH
86860: LD_VAR 0 4
86864: PUSH
86865: LD_VAR 0 7
86869: ARRAY
86870: DIFF
86871: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
86872: LD_ADDR_VAR 0 4
86876: PUSH
86877: LD_VAR 0 4
86881: PPUSH
86882: LD_VAR 0 7
86886: PPUSH
86887: CALL_OW 3
86891: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
86892: LD_ADDR_VAR 0 16
86896: PUSH
86897: LD_VAR 0 16
86901: PPUSH
86902: LD_VAR 0 7
86906: PPUSH
86907: CALL_OW 3
86911: ST_TO_ADDR
// continue ;
86912: GO 86752
// end ; if f_repair then
86914: LD_VAR 0 22
86918: IFFALSE 87407
// begin if GetType ( group [ i ] ) = unit_vehicle then
86920: LD_VAR 0 4
86924: PUSH
86925: LD_VAR 0 7
86929: ARRAY
86930: PPUSH
86931: CALL_OW 247
86935: PUSH
86936: LD_INT 2
86938: EQUAL
86939: IFFALSE 87129
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
86941: LD_VAR 0 4
86945: PUSH
86946: LD_VAR 0 7
86950: ARRAY
86951: PPUSH
86952: CALL_OW 256
86956: PUSH
86957: LD_INT 700
86959: LESS
86960: PUSH
86961: LD_VAR 0 4
86965: PUSH
86966: LD_VAR 0 7
86970: ARRAY
86971: PUSH
86972: LD_VAR 0 32
86976: IN
86977: NOT
86978: AND
86979: IFFALSE 87003
// to_repair := to_repair union group [ i ] ;
86981: LD_ADDR_VAR 0 32
86985: PUSH
86986: LD_VAR 0 32
86990: PUSH
86991: LD_VAR 0 4
86995: PUSH
86996: LD_VAR 0 7
87000: ARRAY
87001: UNION
87002: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
87003: LD_VAR 0 4
87007: PUSH
87008: LD_VAR 0 7
87012: ARRAY
87013: PPUSH
87014: CALL_OW 256
87018: PUSH
87019: LD_INT 1000
87021: EQUAL
87022: PUSH
87023: LD_VAR 0 4
87027: PUSH
87028: LD_VAR 0 7
87032: ARRAY
87033: PUSH
87034: LD_VAR 0 32
87038: IN
87039: AND
87040: IFFALSE 87064
// to_repair := to_repair diff group [ i ] ;
87042: LD_ADDR_VAR 0 32
87046: PUSH
87047: LD_VAR 0 32
87051: PUSH
87052: LD_VAR 0 4
87056: PUSH
87057: LD_VAR 0 7
87061: ARRAY
87062: DIFF
87063: ST_TO_ADDR
// if group [ i ] in to_repair then
87064: LD_VAR 0 4
87068: PUSH
87069: LD_VAR 0 7
87073: ARRAY
87074: PUSH
87075: LD_VAR 0 32
87079: IN
87080: IFFALSE 87127
// begin if not IsInArea ( group [ i ] , f_repair ) then
87082: LD_VAR 0 4
87086: PUSH
87087: LD_VAR 0 7
87091: ARRAY
87092: PPUSH
87093: LD_VAR 0 22
87097: PPUSH
87098: CALL_OW 308
87102: NOT
87103: IFFALSE 87125
// ComMoveToArea ( group [ i ] , f_repair ) ;
87105: LD_VAR 0 4
87109: PUSH
87110: LD_VAR 0 7
87114: ARRAY
87115: PPUSH
87116: LD_VAR 0 22
87120: PPUSH
87121: CALL_OW 113
// continue ;
87125: GO 86752
// end ; end else
87127: GO 87407
// if group [ i ] in repairs then
87129: LD_VAR 0 4
87133: PUSH
87134: LD_VAR 0 7
87138: ARRAY
87139: PUSH
87140: LD_VAR 0 33
87144: IN
87145: IFFALSE 87407
// begin if IsInUnit ( group [ i ] ) then
87147: LD_VAR 0 4
87151: PUSH
87152: LD_VAR 0 7
87156: ARRAY
87157: PPUSH
87158: CALL_OW 310
87162: IFFALSE 87230
// begin z := IsInUnit ( group [ i ] ) ;
87164: LD_ADDR_VAR 0 13
87168: PUSH
87169: LD_VAR 0 4
87173: PUSH
87174: LD_VAR 0 7
87178: ARRAY
87179: PPUSH
87180: CALL_OW 310
87184: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
87185: LD_VAR 0 13
87189: PUSH
87190: LD_VAR 0 32
87194: IN
87195: PUSH
87196: LD_VAR 0 13
87200: PPUSH
87201: LD_VAR 0 22
87205: PPUSH
87206: CALL_OW 308
87210: AND
87211: IFFALSE 87228
// ComExitVehicle ( group [ i ] ) ;
87213: LD_VAR 0 4
87217: PUSH
87218: LD_VAR 0 7
87222: ARRAY
87223: PPUSH
87224: CALL_OW 121
// end else
87228: GO 87407
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
87230: LD_ADDR_VAR 0 13
87234: PUSH
87235: LD_VAR 0 4
87239: PPUSH
87240: LD_INT 95
87242: PUSH
87243: LD_VAR 0 22
87247: PUSH
87248: EMPTY
87249: LIST
87250: LIST
87251: PUSH
87252: LD_INT 58
87254: PUSH
87255: EMPTY
87256: LIST
87257: PUSH
87258: EMPTY
87259: LIST
87260: LIST
87261: PPUSH
87262: CALL_OW 72
87266: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
87267: LD_VAR 0 4
87271: PUSH
87272: LD_VAR 0 7
87276: ARRAY
87277: PPUSH
87278: CALL_OW 314
87282: NOT
87283: IFFALSE 87405
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
87285: LD_ADDR_VAR 0 10
87289: PUSH
87290: LD_VAR 0 13
87294: PPUSH
87295: LD_VAR 0 4
87299: PUSH
87300: LD_VAR 0 7
87304: ARRAY
87305: PPUSH
87306: CALL_OW 74
87310: ST_TO_ADDR
// if not x then
87311: LD_VAR 0 10
87315: NOT
87316: IFFALSE 87320
// continue ;
87318: GO 86752
// if GetLives ( x ) < 1000 then
87320: LD_VAR 0 10
87324: PPUSH
87325: CALL_OW 256
87329: PUSH
87330: LD_INT 1000
87332: LESS
87333: IFFALSE 87357
// ComRepairVehicle ( group [ i ] , x ) else
87335: LD_VAR 0 4
87339: PUSH
87340: LD_VAR 0 7
87344: ARRAY
87345: PPUSH
87346: LD_VAR 0 10
87350: PPUSH
87351: CALL_OW 129
87355: GO 87405
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
87357: LD_VAR 0 23
87361: PUSH
87362: LD_VAR 0 4
87366: PUSH
87367: LD_VAR 0 7
87371: ARRAY
87372: PPUSH
87373: CALL_OW 256
87377: PUSH
87378: LD_INT 1000
87380: LESS
87381: AND
87382: NOT
87383: IFFALSE 87405
// ComEnterUnit ( group [ i ] , x ) ;
87385: LD_VAR 0 4
87389: PUSH
87390: LD_VAR 0 7
87394: ARRAY
87395: PPUSH
87396: LD_VAR 0 10
87400: PPUSH
87401: CALL_OW 120
// end ; continue ;
87405: GO 86752
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
87407: LD_VAR 0 23
87411: PUSH
87412: LD_VAR 0 4
87416: PUSH
87417: LD_VAR 0 7
87421: ARRAY
87422: PPUSH
87423: CALL_OW 247
87427: PUSH
87428: LD_INT 1
87430: EQUAL
87431: AND
87432: IFFALSE 87910
// begin if group [ i ] in healers then
87434: LD_VAR 0 4
87438: PUSH
87439: LD_VAR 0 7
87443: ARRAY
87444: PUSH
87445: LD_VAR 0 31
87449: IN
87450: IFFALSE 87723
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
87452: LD_VAR 0 4
87456: PUSH
87457: LD_VAR 0 7
87461: ARRAY
87462: PPUSH
87463: LD_VAR 0 23
87467: PPUSH
87468: CALL_OW 308
87472: NOT
87473: PUSH
87474: LD_VAR 0 4
87478: PUSH
87479: LD_VAR 0 7
87483: ARRAY
87484: PPUSH
87485: CALL_OW 314
87489: NOT
87490: AND
87491: IFFALSE 87515
// ComMoveToArea ( group [ i ] , f_heal ) else
87493: LD_VAR 0 4
87497: PUSH
87498: LD_VAR 0 7
87502: ARRAY
87503: PPUSH
87504: LD_VAR 0 23
87508: PPUSH
87509: CALL_OW 113
87513: GO 87721
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
87515: LD_VAR 0 4
87519: PUSH
87520: LD_VAR 0 7
87524: ARRAY
87525: PPUSH
87526: CALL 78452 0 1
87530: PPUSH
87531: CALL_OW 256
87535: PUSH
87536: LD_INT 1000
87538: EQUAL
87539: IFFALSE 87558
// ComStop ( group [ i ] ) else
87541: LD_VAR 0 4
87545: PUSH
87546: LD_VAR 0 7
87550: ARRAY
87551: PPUSH
87552: CALL_OW 141
87556: GO 87721
// if not HasTask ( group [ i ] ) and to_heal then
87558: LD_VAR 0 4
87562: PUSH
87563: LD_VAR 0 7
87567: ARRAY
87568: PPUSH
87569: CALL_OW 314
87573: NOT
87574: PUSH
87575: LD_VAR 0 30
87579: AND
87580: IFFALSE 87721
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
87582: LD_ADDR_VAR 0 13
87586: PUSH
87587: LD_VAR 0 30
87591: PPUSH
87592: LD_INT 3
87594: PUSH
87595: LD_INT 54
87597: PUSH
87598: EMPTY
87599: LIST
87600: PUSH
87601: EMPTY
87602: LIST
87603: LIST
87604: PPUSH
87605: CALL_OW 72
87609: PPUSH
87610: LD_VAR 0 4
87614: PUSH
87615: LD_VAR 0 7
87619: ARRAY
87620: PPUSH
87621: CALL_OW 74
87625: ST_TO_ADDR
// if z then
87626: LD_VAR 0 13
87630: IFFALSE 87721
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
87632: LD_INT 91
87634: PUSH
87635: LD_VAR 0 13
87639: PUSH
87640: LD_INT 10
87642: PUSH
87643: EMPTY
87644: LIST
87645: LIST
87646: LIST
87647: PUSH
87648: LD_INT 81
87650: PUSH
87651: LD_VAR 0 13
87655: PPUSH
87656: CALL_OW 255
87660: PUSH
87661: EMPTY
87662: LIST
87663: LIST
87664: PUSH
87665: EMPTY
87666: LIST
87667: LIST
87668: PPUSH
87669: CALL_OW 69
87673: PUSH
87674: LD_INT 0
87676: EQUAL
87677: IFFALSE 87701
// ComHeal ( group [ i ] , z ) else
87679: LD_VAR 0 4
87683: PUSH
87684: LD_VAR 0 7
87688: ARRAY
87689: PPUSH
87690: LD_VAR 0 13
87694: PPUSH
87695: CALL_OW 128
87699: GO 87721
// ComMoveToArea ( group [ i ] , f_heal ) ;
87701: LD_VAR 0 4
87705: PUSH
87706: LD_VAR 0 7
87710: ARRAY
87711: PPUSH
87712: LD_VAR 0 23
87716: PPUSH
87717: CALL_OW 113
// end ; continue ;
87721: GO 86752
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
87723: LD_VAR 0 4
87727: PUSH
87728: LD_VAR 0 7
87732: ARRAY
87733: PPUSH
87734: CALL_OW 256
87738: PUSH
87739: LD_INT 700
87741: LESS
87742: PUSH
87743: LD_VAR 0 4
87747: PUSH
87748: LD_VAR 0 7
87752: ARRAY
87753: PUSH
87754: LD_VAR 0 30
87758: IN
87759: NOT
87760: AND
87761: IFFALSE 87785
// to_heal := to_heal union group [ i ] ;
87763: LD_ADDR_VAR 0 30
87767: PUSH
87768: LD_VAR 0 30
87772: PUSH
87773: LD_VAR 0 4
87777: PUSH
87778: LD_VAR 0 7
87782: ARRAY
87783: UNION
87784: ST_TO_ADDR
// if group [ i ] in to_heal then
87785: LD_VAR 0 4
87789: PUSH
87790: LD_VAR 0 7
87794: ARRAY
87795: PUSH
87796: LD_VAR 0 30
87800: IN
87801: IFFALSE 87910
// begin if GetLives ( group [ i ] ) = 1000 then
87803: LD_VAR 0 4
87807: PUSH
87808: LD_VAR 0 7
87812: ARRAY
87813: PPUSH
87814: CALL_OW 256
87818: PUSH
87819: LD_INT 1000
87821: EQUAL
87822: IFFALSE 87848
// to_heal := to_heal diff group [ i ] else
87824: LD_ADDR_VAR 0 30
87828: PUSH
87829: LD_VAR 0 30
87833: PUSH
87834: LD_VAR 0 4
87838: PUSH
87839: LD_VAR 0 7
87843: ARRAY
87844: DIFF
87845: ST_TO_ADDR
87846: GO 87910
// begin if not IsInArea ( group [ i ] , to_heal ) then
87848: LD_VAR 0 4
87852: PUSH
87853: LD_VAR 0 7
87857: ARRAY
87858: PPUSH
87859: LD_VAR 0 30
87863: PPUSH
87864: CALL_OW 308
87868: NOT
87869: IFFALSE 87893
// ComMoveToArea ( group [ i ] , f_heal ) else
87871: LD_VAR 0 4
87875: PUSH
87876: LD_VAR 0 7
87880: ARRAY
87881: PPUSH
87882: LD_VAR 0 23
87886: PPUSH
87887: CALL_OW 113
87891: GO 87908
// ComHold ( group [ i ] ) ;
87893: LD_VAR 0 4
87897: PUSH
87898: LD_VAR 0 7
87902: ARRAY
87903: PPUSH
87904: CALL_OW 140
// continue ;
87908: GO 86752
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
87910: LD_VAR 0 4
87914: PUSH
87915: LD_VAR 0 7
87919: ARRAY
87920: PPUSH
87921: LD_INT 10
87923: PPUSH
87924: CALL 76872 0 2
87928: NOT
87929: PUSH
87930: LD_VAR 0 16
87934: PUSH
87935: LD_VAR 0 7
87939: ARRAY
87940: PUSH
87941: EMPTY
87942: EQUAL
87943: NOT
87944: AND
87945: IFFALSE 88211
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
87947: LD_VAR 0 4
87951: PUSH
87952: LD_VAR 0 7
87956: ARRAY
87957: PPUSH
87958: CALL_OW 262
87962: PUSH
87963: LD_INT 1
87965: PUSH
87966: LD_INT 2
87968: PUSH
87969: EMPTY
87970: LIST
87971: LIST
87972: IN
87973: IFFALSE 88014
// if GetFuel ( group [ i ] ) < 10 then
87975: LD_VAR 0 4
87979: PUSH
87980: LD_VAR 0 7
87984: ARRAY
87985: PPUSH
87986: CALL_OW 261
87990: PUSH
87991: LD_INT 10
87993: LESS
87994: IFFALSE 88014
// SetFuel ( group [ i ] , 12 ) ;
87996: LD_VAR 0 4
88000: PUSH
88001: LD_VAR 0 7
88005: ARRAY
88006: PPUSH
88007: LD_INT 12
88009: PPUSH
88010: CALL_OW 240
// if units_path [ i ] then
88014: LD_VAR 0 16
88018: PUSH
88019: LD_VAR 0 7
88023: ARRAY
88024: IFFALSE 88209
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
88026: LD_VAR 0 4
88030: PUSH
88031: LD_VAR 0 7
88035: ARRAY
88036: PPUSH
88037: LD_VAR 0 16
88041: PUSH
88042: LD_VAR 0 7
88046: ARRAY
88047: PUSH
88048: LD_INT 1
88050: ARRAY
88051: PUSH
88052: LD_INT 1
88054: ARRAY
88055: PPUSH
88056: LD_VAR 0 16
88060: PUSH
88061: LD_VAR 0 7
88065: ARRAY
88066: PUSH
88067: LD_INT 1
88069: ARRAY
88070: PUSH
88071: LD_INT 2
88073: ARRAY
88074: PPUSH
88075: CALL_OW 297
88079: PUSH
88080: LD_INT 6
88082: GREATER
88083: IFFALSE 88158
// begin if not HasTask ( group [ i ] ) then
88085: LD_VAR 0 4
88089: PUSH
88090: LD_VAR 0 7
88094: ARRAY
88095: PPUSH
88096: CALL_OW 314
88100: NOT
88101: IFFALSE 88156
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
88103: LD_VAR 0 4
88107: PUSH
88108: LD_VAR 0 7
88112: ARRAY
88113: PPUSH
88114: LD_VAR 0 16
88118: PUSH
88119: LD_VAR 0 7
88123: ARRAY
88124: PUSH
88125: LD_INT 1
88127: ARRAY
88128: PUSH
88129: LD_INT 1
88131: ARRAY
88132: PPUSH
88133: LD_VAR 0 16
88137: PUSH
88138: LD_VAR 0 7
88142: ARRAY
88143: PUSH
88144: LD_INT 1
88146: ARRAY
88147: PUSH
88148: LD_INT 2
88150: ARRAY
88151: PPUSH
88152: CALL_OW 114
// end else
88156: GO 88209
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
88158: LD_ADDR_VAR 0 15
88162: PUSH
88163: LD_VAR 0 16
88167: PUSH
88168: LD_VAR 0 7
88172: ARRAY
88173: PPUSH
88174: LD_INT 1
88176: PPUSH
88177: CALL_OW 3
88181: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
88182: LD_ADDR_VAR 0 16
88186: PUSH
88187: LD_VAR 0 16
88191: PPUSH
88192: LD_VAR 0 7
88196: PPUSH
88197: LD_VAR 0 15
88201: PPUSH
88202: CALL_OW 1
88206: ST_TO_ADDR
// continue ;
88207: GO 86752
// end ; end ; end else
88209: GO 90873
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
88211: LD_ADDR_VAR 0 14
88215: PUSH
88216: LD_INT 81
88218: PUSH
88219: LD_VAR 0 4
88223: PUSH
88224: LD_VAR 0 7
88228: ARRAY
88229: PPUSH
88230: CALL_OW 255
88234: PUSH
88235: EMPTY
88236: LIST
88237: LIST
88238: PPUSH
88239: CALL_OW 69
88243: ST_TO_ADDR
// if not tmp then
88244: LD_VAR 0 14
88248: NOT
88249: IFFALSE 88253
// continue ;
88251: GO 86752
// if f_ignore_area then
88253: LD_VAR 0 17
88257: IFFALSE 88345
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
88259: LD_ADDR_VAR 0 15
88263: PUSH
88264: LD_VAR 0 14
88268: PPUSH
88269: LD_INT 3
88271: PUSH
88272: LD_INT 92
88274: PUSH
88275: LD_VAR 0 17
88279: PUSH
88280: LD_INT 1
88282: ARRAY
88283: PUSH
88284: LD_VAR 0 17
88288: PUSH
88289: LD_INT 2
88291: ARRAY
88292: PUSH
88293: LD_VAR 0 17
88297: PUSH
88298: LD_INT 3
88300: ARRAY
88301: PUSH
88302: EMPTY
88303: LIST
88304: LIST
88305: LIST
88306: LIST
88307: PUSH
88308: EMPTY
88309: LIST
88310: LIST
88311: PPUSH
88312: CALL_OW 72
88316: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
88317: LD_VAR 0 14
88321: PUSH
88322: LD_VAR 0 15
88326: DIFF
88327: IFFALSE 88345
// tmp := tmp diff tmp2 ;
88329: LD_ADDR_VAR 0 14
88333: PUSH
88334: LD_VAR 0 14
88338: PUSH
88339: LD_VAR 0 15
88343: DIFF
88344: ST_TO_ADDR
// end ; if not f_murder then
88345: LD_VAR 0 20
88349: NOT
88350: IFFALSE 88408
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
88352: LD_ADDR_VAR 0 15
88356: PUSH
88357: LD_VAR 0 14
88361: PPUSH
88362: LD_INT 3
88364: PUSH
88365: LD_INT 50
88367: PUSH
88368: EMPTY
88369: LIST
88370: PUSH
88371: EMPTY
88372: LIST
88373: LIST
88374: PPUSH
88375: CALL_OW 72
88379: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
88380: LD_VAR 0 14
88384: PUSH
88385: LD_VAR 0 15
88389: DIFF
88390: IFFALSE 88408
// tmp := tmp diff tmp2 ;
88392: LD_ADDR_VAR 0 14
88396: PUSH
88397: LD_VAR 0 14
88401: PUSH
88402: LD_VAR 0 15
88406: DIFF
88407: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
88408: LD_ADDR_VAR 0 14
88412: PUSH
88413: LD_VAR 0 4
88417: PUSH
88418: LD_VAR 0 7
88422: ARRAY
88423: PPUSH
88424: LD_VAR 0 14
88428: PPUSH
88429: LD_INT 1
88431: PPUSH
88432: LD_INT 1
88434: PPUSH
88435: CALL 50515 0 4
88439: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
88440: LD_VAR 0 4
88444: PUSH
88445: LD_VAR 0 7
88449: ARRAY
88450: PPUSH
88451: CALL_OW 257
88455: PUSH
88456: LD_INT 1
88458: EQUAL
88459: IFFALSE 88907
// begin if WantPlant ( group [ i ] ) then
88461: LD_VAR 0 4
88465: PUSH
88466: LD_VAR 0 7
88470: ARRAY
88471: PPUSH
88472: CALL 50016 0 1
88476: IFFALSE 88480
// continue ;
88478: GO 86752
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
88480: LD_VAR 0 18
88484: PUSH
88485: LD_VAR 0 4
88489: PUSH
88490: LD_VAR 0 7
88494: ARRAY
88495: PPUSH
88496: CALL_OW 310
88500: NOT
88501: AND
88502: PUSH
88503: LD_VAR 0 14
88507: PUSH
88508: LD_INT 1
88510: ARRAY
88511: PUSH
88512: LD_VAR 0 14
88516: PPUSH
88517: LD_INT 21
88519: PUSH
88520: LD_INT 2
88522: PUSH
88523: EMPTY
88524: LIST
88525: LIST
88526: PUSH
88527: LD_INT 58
88529: PUSH
88530: EMPTY
88531: LIST
88532: PUSH
88533: EMPTY
88534: LIST
88535: LIST
88536: PPUSH
88537: CALL_OW 72
88541: IN
88542: AND
88543: IFFALSE 88579
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
88545: LD_VAR 0 4
88549: PUSH
88550: LD_VAR 0 7
88554: ARRAY
88555: PPUSH
88556: LD_VAR 0 14
88560: PUSH
88561: LD_INT 1
88563: ARRAY
88564: PPUSH
88565: CALL_OW 120
// attacking := true ;
88569: LD_ADDR_VAR 0 29
88573: PUSH
88574: LD_INT 1
88576: ST_TO_ADDR
// continue ;
88577: GO 86752
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
88579: LD_VAR 0 26
88583: PUSH
88584: LD_VAR 0 4
88588: PUSH
88589: LD_VAR 0 7
88593: ARRAY
88594: PPUSH
88595: CALL_OW 257
88599: PUSH
88600: LD_INT 1
88602: EQUAL
88603: AND
88604: PUSH
88605: LD_VAR 0 4
88609: PUSH
88610: LD_VAR 0 7
88614: ARRAY
88615: PPUSH
88616: CALL_OW 256
88620: PUSH
88621: LD_INT 800
88623: LESS
88624: AND
88625: PUSH
88626: LD_VAR 0 4
88630: PUSH
88631: LD_VAR 0 7
88635: ARRAY
88636: PPUSH
88637: CALL_OW 318
88641: NOT
88642: AND
88643: IFFALSE 88660
// ComCrawl ( group [ i ] ) ;
88645: LD_VAR 0 4
88649: PUSH
88650: LD_VAR 0 7
88654: ARRAY
88655: PPUSH
88656: CALL_OW 137
// if f_mines then
88660: LD_VAR 0 21
88664: IFFALSE 88907
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
88666: LD_VAR 0 14
88670: PUSH
88671: LD_INT 1
88673: ARRAY
88674: PPUSH
88675: CALL_OW 247
88679: PUSH
88680: LD_INT 3
88682: EQUAL
88683: PUSH
88684: LD_VAR 0 14
88688: PUSH
88689: LD_INT 1
88691: ARRAY
88692: PUSH
88693: LD_VAR 0 27
88697: IN
88698: NOT
88699: AND
88700: IFFALSE 88907
// begin x := GetX ( tmp [ 1 ] ) ;
88702: LD_ADDR_VAR 0 10
88706: PUSH
88707: LD_VAR 0 14
88711: PUSH
88712: LD_INT 1
88714: ARRAY
88715: PPUSH
88716: CALL_OW 250
88720: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
88721: LD_ADDR_VAR 0 11
88725: PUSH
88726: LD_VAR 0 14
88730: PUSH
88731: LD_INT 1
88733: ARRAY
88734: PPUSH
88735: CALL_OW 251
88739: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
88740: LD_ADDR_VAR 0 12
88744: PUSH
88745: LD_VAR 0 4
88749: PUSH
88750: LD_VAR 0 7
88754: ARRAY
88755: PPUSH
88756: CALL 76957 0 1
88760: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
88761: LD_VAR 0 4
88765: PUSH
88766: LD_VAR 0 7
88770: ARRAY
88771: PPUSH
88772: LD_VAR 0 10
88776: PPUSH
88777: LD_VAR 0 11
88781: PPUSH
88782: LD_VAR 0 14
88786: PUSH
88787: LD_INT 1
88789: ARRAY
88790: PPUSH
88791: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
88795: LD_VAR 0 4
88799: PUSH
88800: LD_VAR 0 7
88804: ARRAY
88805: PPUSH
88806: LD_VAR 0 10
88810: PPUSH
88811: LD_VAR 0 12
88815: PPUSH
88816: LD_INT 7
88818: PPUSH
88819: CALL_OW 272
88823: PPUSH
88824: LD_VAR 0 11
88828: PPUSH
88829: LD_VAR 0 12
88833: PPUSH
88834: LD_INT 7
88836: PPUSH
88837: CALL_OW 273
88841: PPUSH
88842: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
88846: LD_VAR 0 4
88850: PUSH
88851: LD_VAR 0 7
88855: ARRAY
88856: PPUSH
88857: LD_INT 71
88859: PPUSH
88860: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
88864: LD_ADDR_VAR 0 27
88868: PUSH
88869: LD_VAR 0 27
88873: PPUSH
88874: LD_VAR 0 27
88878: PUSH
88879: LD_INT 1
88881: PLUS
88882: PPUSH
88883: LD_VAR 0 14
88887: PUSH
88888: LD_INT 1
88890: ARRAY
88891: PPUSH
88892: CALL_OW 1
88896: ST_TO_ADDR
// attacking := true ;
88897: LD_ADDR_VAR 0 29
88901: PUSH
88902: LD_INT 1
88904: ST_TO_ADDR
// continue ;
88905: GO 86752
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
88907: LD_VAR 0 4
88911: PUSH
88912: LD_VAR 0 7
88916: ARRAY
88917: PPUSH
88918: CALL_OW 257
88922: PUSH
88923: LD_INT 17
88925: EQUAL
88926: PUSH
88927: LD_VAR 0 4
88931: PUSH
88932: LD_VAR 0 7
88936: ARRAY
88937: PPUSH
88938: CALL_OW 110
88942: PUSH
88943: LD_INT 71
88945: EQUAL
88946: NOT
88947: AND
88948: IFFALSE 89094
// begin attacking := false ;
88950: LD_ADDR_VAR 0 29
88954: PUSH
88955: LD_INT 0
88957: ST_TO_ADDR
// k := 5 ;
88958: LD_ADDR_VAR 0 9
88962: PUSH
88963: LD_INT 5
88965: ST_TO_ADDR
// if tmp < k then
88966: LD_VAR 0 14
88970: PUSH
88971: LD_VAR 0 9
88975: LESS
88976: IFFALSE 88988
// k := tmp ;
88978: LD_ADDR_VAR 0 9
88982: PUSH
88983: LD_VAR 0 14
88987: ST_TO_ADDR
// for j = 1 to k do
88988: LD_ADDR_VAR 0 8
88992: PUSH
88993: DOUBLE
88994: LD_INT 1
88996: DEC
88997: ST_TO_ADDR
88998: LD_VAR 0 9
89002: PUSH
89003: FOR_TO
89004: IFFALSE 89092
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
89006: LD_VAR 0 14
89010: PUSH
89011: LD_VAR 0 8
89015: ARRAY
89016: PUSH
89017: LD_VAR 0 14
89021: PPUSH
89022: LD_INT 58
89024: PUSH
89025: EMPTY
89026: LIST
89027: PPUSH
89028: CALL_OW 72
89032: IN
89033: NOT
89034: IFFALSE 89090
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
89036: LD_VAR 0 4
89040: PUSH
89041: LD_VAR 0 7
89045: ARRAY
89046: PPUSH
89047: LD_VAR 0 14
89051: PUSH
89052: LD_VAR 0 8
89056: ARRAY
89057: PPUSH
89058: CALL_OW 115
// attacking := true ;
89062: LD_ADDR_VAR 0 29
89066: PUSH
89067: LD_INT 1
89069: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
89070: LD_VAR 0 4
89074: PUSH
89075: LD_VAR 0 7
89079: ARRAY
89080: PPUSH
89081: LD_INT 71
89083: PPUSH
89084: CALL_OW 109
// continue ;
89088: GO 89003
// end ; end ;
89090: GO 89003
89092: POP
89093: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
89094: LD_VAR 0 4
89098: PUSH
89099: LD_VAR 0 7
89103: ARRAY
89104: PPUSH
89105: CALL_OW 257
89109: PUSH
89110: LD_INT 8
89112: EQUAL
89113: PUSH
89114: LD_VAR 0 4
89118: PUSH
89119: LD_VAR 0 7
89123: ARRAY
89124: PPUSH
89125: CALL_OW 264
89129: PUSH
89130: LD_INT 28
89132: PUSH
89133: LD_INT 45
89135: PUSH
89136: LD_INT 7
89138: PUSH
89139: LD_INT 47
89141: PUSH
89142: EMPTY
89143: LIST
89144: LIST
89145: LIST
89146: LIST
89147: IN
89148: OR
89149: IFFALSE 89405
// begin attacking := false ;
89151: LD_ADDR_VAR 0 29
89155: PUSH
89156: LD_INT 0
89158: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
89159: LD_VAR 0 14
89163: PUSH
89164: LD_INT 1
89166: ARRAY
89167: PPUSH
89168: CALL_OW 266
89172: PUSH
89173: LD_INT 32
89175: PUSH
89176: LD_INT 31
89178: PUSH
89179: LD_INT 33
89181: PUSH
89182: LD_INT 4
89184: PUSH
89185: LD_INT 5
89187: PUSH
89188: EMPTY
89189: LIST
89190: LIST
89191: LIST
89192: LIST
89193: LIST
89194: IN
89195: IFFALSE 89381
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
89197: LD_ADDR_VAR 0 9
89201: PUSH
89202: LD_VAR 0 14
89206: PUSH
89207: LD_INT 1
89209: ARRAY
89210: PPUSH
89211: CALL_OW 266
89215: PPUSH
89216: LD_VAR 0 14
89220: PUSH
89221: LD_INT 1
89223: ARRAY
89224: PPUSH
89225: CALL_OW 250
89229: PPUSH
89230: LD_VAR 0 14
89234: PUSH
89235: LD_INT 1
89237: ARRAY
89238: PPUSH
89239: CALL_OW 251
89243: PPUSH
89244: LD_VAR 0 14
89248: PUSH
89249: LD_INT 1
89251: ARRAY
89252: PPUSH
89253: CALL_OW 254
89257: PPUSH
89258: LD_VAR 0 14
89262: PUSH
89263: LD_INT 1
89265: ARRAY
89266: PPUSH
89267: CALL_OW 248
89271: PPUSH
89272: LD_INT 0
89274: PPUSH
89275: CALL 58327 0 6
89279: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
89280: LD_ADDR_VAR 0 8
89284: PUSH
89285: LD_VAR 0 4
89289: PUSH
89290: LD_VAR 0 7
89294: ARRAY
89295: PPUSH
89296: LD_VAR 0 9
89300: PPUSH
89301: CALL 76997 0 2
89305: ST_TO_ADDR
// if j then
89306: LD_VAR 0 8
89310: IFFALSE 89379
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
89312: LD_VAR 0 8
89316: PUSH
89317: LD_INT 1
89319: ARRAY
89320: PPUSH
89321: LD_VAR 0 8
89325: PUSH
89326: LD_INT 2
89328: ARRAY
89329: PPUSH
89330: CALL_OW 488
89334: IFFALSE 89379
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
89336: LD_VAR 0 4
89340: PUSH
89341: LD_VAR 0 7
89345: ARRAY
89346: PPUSH
89347: LD_VAR 0 8
89351: PUSH
89352: LD_INT 1
89354: ARRAY
89355: PPUSH
89356: LD_VAR 0 8
89360: PUSH
89361: LD_INT 2
89363: ARRAY
89364: PPUSH
89365: CALL_OW 116
// attacking := true ;
89369: LD_ADDR_VAR 0 29
89373: PUSH
89374: LD_INT 1
89376: ST_TO_ADDR
// continue ;
89377: GO 86752
// end ; end else
89379: GO 89405
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
89381: LD_VAR 0 4
89385: PUSH
89386: LD_VAR 0 7
89390: ARRAY
89391: PPUSH
89392: LD_VAR 0 14
89396: PUSH
89397: LD_INT 1
89399: ARRAY
89400: PPUSH
89401: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
89405: LD_VAR 0 4
89409: PUSH
89410: LD_VAR 0 7
89414: ARRAY
89415: PPUSH
89416: CALL_OW 265
89420: PUSH
89421: LD_INT 11
89423: EQUAL
89424: IFFALSE 89702
// begin k := 10 ;
89426: LD_ADDR_VAR 0 9
89430: PUSH
89431: LD_INT 10
89433: ST_TO_ADDR
// x := 0 ;
89434: LD_ADDR_VAR 0 10
89438: PUSH
89439: LD_INT 0
89441: ST_TO_ADDR
// if tmp < k then
89442: LD_VAR 0 14
89446: PUSH
89447: LD_VAR 0 9
89451: LESS
89452: IFFALSE 89464
// k := tmp ;
89454: LD_ADDR_VAR 0 9
89458: PUSH
89459: LD_VAR 0 14
89463: ST_TO_ADDR
// for j = k downto 1 do
89464: LD_ADDR_VAR 0 8
89468: PUSH
89469: DOUBLE
89470: LD_VAR 0 9
89474: INC
89475: ST_TO_ADDR
89476: LD_INT 1
89478: PUSH
89479: FOR_DOWNTO
89480: IFFALSE 89555
// begin if GetType ( tmp [ j ] ) = unit_human then
89482: LD_VAR 0 14
89486: PUSH
89487: LD_VAR 0 8
89491: ARRAY
89492: PPUSH
89493: CALL_OW 247
89497: PUSH
89498: LD_INT 1
89500: EQUAL
89501: IFFALSE 89553
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
89503: LD_VAR 0 4
89507: PUSH
89508: LD_VAR 0 7
89512: ARRAY
89513: PPUSH
89514: LD_VAR 0 14
89518: PUSH
89519: LD_VAR 0 8
89523: ARRAY
89524: PPUSH
89525: CALL 77268 0 2
// x := tmp [ j ] ;
89529: LD_ADDR_VAR 0 10
89533: PUSH
89534: LD_VAR 0 14
89538: PUSH
89539: LD_VAR 0 8
89543: ARRAY
89544: ST_TO_ADDR
// attacking := true ;
89545: LD_ADDR_VAR 0 29
89549: PUSH
89550: LD_INT 1
89552: ST_TO_ADDR
// end ; end ;
89553: GO 89479
89555: POP
89556: POP
// if not x then
89557: LD_VAR 0 10
89561: NOT
89562: IFFALSE 89702
// begin attacking := true ;
89564: LD_ADDR_VAR 0 29
89568: PUSH
89569: LD_INT 1
89571: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
89572: LD_VAR 0 4
89576: PUSH
89577: LD_VAR 0 7
89581: ARRAY
89582: PPUSH
89583: CALL_OW 250
89587: PPUSH
89588: LD_VAR 0 4
89592: PUSH
89593: LD_VAR 0 7
89597: ARRAY
89598: PPUSH
89599: CALL_OW 251
89603: PPUSH
89604: CALL_OW 546
89608: PUSH
89609: LD_INT 2
89611: ARRAY
89612: PUSH
89613: LD_VAR 0 14
89617: PUSH
89618: LD_INT 1
89620: ARRAY
89621: PPUSH
89622: CALL_OW 250
89626: PPUSH
89627: LD_VAR 0 14
89631: PUSH
89632: LD_INT 1
89634: ARRAY
89635: PPUSH
89636: CALL_OW 251
89640: PPUSH
89641: CALL_OW 546
89645: PUSH
89646: LD_INT 2
89648: ARRAY
89649: EQUAL
89650: IFFALSE 89678
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
89652: LD_VAR 0 4
89656: PUSH
89657: LD_VAR 0 7
89661: ARRAY
89662: PPUSH
89663: LD_VAR 0 14
89667: PUSH
89668: LD_INT 1
89670: ARRAY
89671: PPUSH
89672: CALL 77268 0 2
89676: GO 89702
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
89678: LD_VAR 0 4
89682: PUSH
89683: LD_VAR 0 7
89687: ARRAY
89688: PPUSH
89689: LD_VAR 0 14
89693: PUSH
89694: LD_INT 1
89696: ARRAY
89697: PPUSH
89698: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
89702: LD_VAR 0 4
89706: PUSH
89707: LD_VAR 0 7
89711: ARRAY
89712: PPUSH
89713: CALL_OW 264
89717: PUSH
89718: LD_INT 29
89720: EQUAL
89721: IFFALSE 90087
// begin if WantsToAttack ( group [ i ] ) in bombed then
89723: LD_VAR 0 4
89727: PUSH
89728: LD_VAR 0 7
89732: ARRAY
89733: PPUSH
89734: CALL_OW 319
89738: PUSH
89739: LD_VAR 0 28
89743: IN
89744: IFFALSE 89748
// continue ;
89746: GO 86752
// k := 8 ;
89748: LD_ADDR_VAR 0 9
89752: PUSH
89753: LD_INT 8
89755: ST_TO_ADDR
// x := 0 ;
89756: LD_ADDR_VAR 0 10
89760: PUSH
89761: LD_INT 0
89763: ST_TO_ADDR
// if tmp < k then
89764: LD_VAR 0 14
89768: PUSH
89769: LD_VAR 0 9
89773: LESS
89774: IFFALSE 89786
// k := tmp ;
89776: LD_ADDR_VAR 0 9
89780: PUSH
89781: LD_VAR 0 14
89785: ST_TO_ADDR
// for j = 1 to k do
89786: LD_ADDR_VAR 0 8
89790: PUSH
89791: DOUBLE
89792: LD_INT 1
89794: DEC
89795: ST_TO_ADDR
89796: LD_VAR 0 9
89800: PUSH
89801: FOR_TO
89802: IFFALSE 89934
// begin if GetType ( tmp [ j ] ) = unit_building then
89804: LD_VAR 0 14
89808: PUSH
89809: LD_VAR 0 8
89813: ARRAY
89814: PPUSH
89815: CALL_OW 247
89819: PUSH
89820: LD_INT 3
89822: EQUAL
89823: IFFALSE 89932
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
89825: LD_VAR 0 14
89829: PUSH
89830: LD_VAR 0 8
89834: ARRAY
89835: PUSH
89836: LD_VAR 0 28
89840: IN
89841: NOT
89842: PUSH
89843: LD_VAR 0 14
89847: PUSH
89848: LD_VAR 0 8
89852: ARRAY
89853: PPUSH
89854: CALL_OW 313
89858: AND
89859: IFFALSE 89932
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
89861: LD_VAR 0 4
89865: PUSH
89866: LD_VAR 0 7
89870: ARRAY
89871: PPUSH
89872: LD_VAR 0 14
89876: PUSH
89877: LD_VAR 0 8
89881: ARRAY
89882: PPUSH
89883: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
89887: LD_ADDR_VAR 0 28
89891: PUSH
89892: LD_VAR 0 28
89896: PPUSH
89897: LD_VAR 0 28
89901: PUSH
89902: LD_INT 1
89904: PLUS
89905: PPUSH
89906: LD_VAR 0 14
89910: PUSH
89911: LD_VAR 0 8
89915: ARRAY
89916: PPUSH
89917: CALL_OW 1
89921: ST_TO_ADDR
// attacking := true ;
89922: LD_ADDR_VAR 0 29
89926: PUSH
89927: LD_INT 1
89929: ST_TO_ADDR
// break ;
89930: GO 89934
// end ; end ;
89932: GO 89801
89934: POP
89935: POP
// if not attacking and f_attack_depot then
89936: LD_VAR 0 29
89940: NOT
89941: PUSH
89942: LD_VAR 0 25
89946: AND
89947: IFFALSE 90042
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
89949: LD_ADDR_VAR 0 13
89953: PUSH
89954: LD_VAR 0 14
89958: PPUSH
89959: LD_INT 2
89961: PUSH
89962: LD_INT 30
89964: PUSH
89965: LD_INT 0
89967: PUSH
89968: EMPTY
89969: LIST
89970: LIST
89971: PUSH
89972: LD_INT 30
89974: PUSH
89975: LD_INT 1
89977: PUSH
89978: EMPTY
89979: LIST
89980: LIST
89981: PUSH
89982: EMPTY
89983: LIST
89984: LIST
89985: LIST
89986: PPUSH
89987: CALL_OW 72
89991: ST_TO_ADDR
// if z then
89992: LD_VAR 0 13
89996: IFFALSE 90042
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
89998: LD_VAR 0 4
90002: PUSH
90003: LD_VAR 0 7
90007: ARRAY
90008: PPUSH
90009: LD_VAR 0 13
90013: PPUSH
90014: LD_VAR 0 4
90018: PUSH
90019: LD_VAR 0 7
90023: ARRAY
90024: PPUSH
90025: CALL_OW 74
90029: PPUSH
90030: CALL_OW 115
// attacking := true ;
90034: LD_ADDR_VAR 0 29
90038: PUSH
90039: LD_INT 1
90041: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
90042: LD_VAR 0 4
90046: PUSH
90047: LD_VAR 0 7
90051: ARRAY
90052: PPUSH
90053: CALL_OW 256
90057: PUSH
90058: LD_INT 500
90060: LESS
90061: IFFALSE 90087
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
90063: LD_VAR 0 4
90067: PUSH
90068: LD_VAR 0 7
90072: ARRAY
90073: PPUSH
90074: LD_VAR 0 14
90078: PUSH
90079: LD_INT 1
90081: ARRAY
90082: PPUSH
90083: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
90087: LD_VAR 0 4
90091: PUSH
90092: LD_VAR 0 7
90096: ARRAY
90097: PPUSH
90098: CALL_OW 264
90102: PUSH
90103: LD_INT 49
90105: EQUAL
90106: IFFALSE 90227
// begin if not HasTask ( group [ i ] ) then
90108: LD_VAR 0 4
90112: PUSH
90113: LD_VAR 0 7
90117: ARRAY
90118: PPUSH
90119: CALL_OW 314
90123: NOT
90124: IFFALSE 90227
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
90126: LD_ADDR_VAR 0 9
90130: PUSH
90131: LD_INT 81
90133: PUSH
90134: LD_VAR 0 4
90138: PUSH
90139: LD_VAR 0 7
90143: ARRAY
90144: PPUSH
90145: CALL_OW 255
90149: PUSH
90150: EMPTY
90151: LIST
90152: LIST
90153: PPUSH
90154: CALL_OW 69
90158: PPUSH
90159: LD_VAR 0 4
90163: PUSH
90164: LD_VAR 0 7
90168: ARRAY
90169: PPUSH
90170: CALL_OW 74
90174: ST_TO_ADDR
// if k then
90175: LD_VAR 0 9
90179: IFFALSE 90227
// if GetDistUnits ( group [ i ] , k ) > 10 then
90181: LD_VAR 0 4
90185: PUSH
90186: LD_VAR 0 7
90190: ARRAY
90191: PPUSH
90192: LD_VAR 0 9
90196: PPUSH
90197: CALL_OW 296
90201: PUSH
90202: LD_INT 10
90204: GREATER
90205: IFFALSE 90227
// ComMoveUnit ( group [ i ] , k ) ;
90207: LD_VAR 0 4
90211: PUSH
90212: LD_VAR 0 7
90216: ARRAY
90217: PPUSH
90218: LD_VAR 0 9
90222: PPUSH
90223: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
90227: LD_VAR 0 4
90231: PUSH
90232: LD_VAR 0 7
90236: ARRAY
90237: PPUSH
90238: CALL_OW 256
90242: PUSH
90243: LD_INT 250
90245: LESS
90246: PUSH
90247: LD_VAR 0 4
90251: PUSH
90252: LD_VAR 0 7
90256: ARRAY
90257: PUSH
90258: LD_INT 21
90260: PUSH
90261: LD_INT 2
90263: PUSH
90264: EMPTY
90265: LIST
90266: LIST
90267: PUSH
90268: LD_INT 23
90270: PUSH
90271: LD_INT 2
90273: PUSH
90274: EMPTY
90275: LIST
90276: LIST
90277: PUSH
90278: EMPTY
90279: LIST
90280: LIST
90281: PPUSH
90282: CALL_OW 69
90286: IN
90287: AND
90288: IFFALSE 90413
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
90290: LD_ADDR_VAR 0 9
90294: PUSH
90295: LD_OWVAR 3
90299: PUSH
90300: LD_VAR 0 4
90304: PUSH
90305: LD_VAR 0 7
90309: ARRAY
90310: DIFF
90311: PPUSH
90312: LD_VAR 0 4
90316: PUSH
90317: LD_VAR 0 7
90321: ARRAY
90322: PPUSH
90323: CALL_OW 74
90327: ST_TO_ADDR
// if not k then
90328: LD_VAR 0 9
90332: NOT
90333: IFFALSE 90337
// continue ;
90335: GO 86752
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
90337: LD_VAR 0 9
90341: PUSH
90342: LD_INT 81
90344: PUSH
90345: LD_VAR 0 4
90349: PUSH
90350: LD_VAR 0 7
90354: ARRAY
90355: PPUSH
90356: CALL_OW 255
90360: PUSH
90361: EMPTY
90362: LIST
90363: LIST
90364: PPUSH
90365: CALL_OW 69
90369: IN
90370: PUSH
90371: LD_VAR 0 9
90375: PPUSH
90376: LD_VAR 0 4
90380: PUSH
90381: LD_VAR 0 7
90385: ARRAY
90386: PPUSH
90387: CALL_OW 296
90391: PUSH
90392: LD_INT 5
90394: LESS
90395: AND
90396: IFFALSE 90413
// ComAutodestruct ( group [ i ] ) ;
90398: LD_VAR 0 4
90402: PUSH
90403: LD_VAR 0 7
90407: ARRAY
90408: PPUSH
90409: CALL 77166 0 1
// end ; if f_attack_depot then
90413: LD_VAR 0 25
90417: IFFALSE 90529
// begin k := 6 ;
90419: LD_ADDR_VAR 0 9
90423: PUSH
90424: LD_INT 6
90426: ST_TO_ADDR
// if tmp < k then
90427: LD_VAR 0 14
90431: PUSH
90432: LD_VAR 0 9
90436: LESS
90437: IFFALSE 90449
// k := tmp ;
90439: LD_ADDR_VAR 0 9
90443: PUSH
90444: LD_VAR 0 14
90448: ST_TO_ADDR
// for j = 1 to k do
90449: LD_ADDR_VAR 0 8
90453: PUSH
90454: DOUBLE
90455: LD_INT 1
90457: DEC
90458: ST_TO_ADDR
90459: LD_VAR 0 9
90463: PUSH
90464: FOR_TO
90465: IFFALSE 90527
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
90467: LD_VAR 0 8
90471: PPUSH
90472: CALL_OW 266
90476: PUSH
90477: LD_INT 0
90479: PUSH
90480: LD_INT 1
90482: PUSH
90483: EMPTY
90484: LIST
90485: LIST
90486: IN
90487: IFFALSE 90525
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
90489: LD_VAR 0 4
90493: PUSH
90494: LD_VAR 0 7
90498: ARRAY
90499: PPUSH
90500: LD_VAR 0 14
90504: PUSH
90505: LD_VAR 0 8
90509: ARRAY
90510: PPUSH
90511: CALL_OW 115
// attacking := true ;
90515: LD_ADDR_VAR 0 29
90519: PUSH
90520: LD_INT 1
90522: ST_TO_ADDR
// break ;
90523: GO 90527
// end ;
90525: GO 90464
90527: POP
90528: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
90529: LD_VAR 0 4
90533: PUSH
90534: LD_VAR 0 7
90538: ARRAY
90539: PPUSH
90540: CALL_OW 302
90544: PUSH
90545: LD_VAR 0 29
90549: NOT
90550: AND
90551: IFFALSE 90873
// begin if GetTag ( group [ i ] ) = 71 then
90553: LD_VAR 0 4
90557: PUSH
90558: LD_VAR 0 7
90562: ARRAY
90563: PPUSH
90564: CALL_OW 110
90568: PUSH
90569: LD_INT 71
90571: EQUAL
90572: IFFALSE 90613
// begin if HasTask ( group [ i ] ) then
90574: LD_VAR 0 4
90578: PUSH
90579: LD_VAR 0 7
90583: ARRAY
90584: PPUSH
90585: CALL_OW 314
90589: IFFALSE 90595
// continue else
90591: GO 86752
90593: GO 90613
// SetTag ( group [ i ] , 0 ) ;
90595: LD_VAR 0 4
90599: PUSH
90600: LD_VAR 0 7
90604: ARRAY
90605: PPUSH
90606: LD_INT 0
90608: PPUSH
90609: CALL_OW 109
// end ; k := 8 ;
90613: LD_ADDR_VAR 0 9
90617: PUSH
90618: LD_INT 8
90620: ST_TO_ADDR
// x := 0 ;
90621: LD_ADDR_VAR 0 10
90625: PUSH
90626: LD_INT 0
90628: ST_TO_ADDR
// if tmp < k then
90629: LD_VAR 0 14
90633: PUSH
90634: LD_VAR 0 9
90638: LESS
90639: IFFALSE 90651
// k := tmp ;
90641: LD_ADDR_VAR 0 9
90645: PUSH
90646: LD_VAR 0 14
90650: ST_TO_ADDR
// for j = 1 to k do
90651: LD_ADDR_VAR 0 8
90655: PUSH
90656: DOUBLE
90657: LD_INT 1
90659: DEC
90660: ST_TO_ADDR
90661: LD_VAR 0 9
90665: PUSH
90666: FOR_TO
90667: IFFALSE 90765
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
90669: LD_VAR 0 14
90673: PUSH
90674: LD_VAR 0 8
90678: ARRAY
90679: PPUSH
90680: CALL_OW 247
90684: PUSH
90685: LD_INT 1
90687: EQUAL
90688: PUSH
90689: LD_VAR 0 14
90693: PUSH
90694: LD_VAR 0 8
90698: ARRAY
90699: PPUSH
90700: CALL_OW 256
90704: PUSH
90705: LD_INT 250
90707: LESS
90708: PUSH
90709: LD_VAR 0 20
90713: AND
90714: PUSH
90715: LD_VAR 0 20
90719: NOT
90720: PUSH
90721: LD_VAR 0 14
90725: PUSH
90726: LD_VAR 0 8
90730: ARRAY
90731: PPUSH
90732: CALL_OW 256
90736: PUSH
90737: LD_INT 250
90739: GREATEREQUAL
90740: AND
90741: OR
90742: AND
90743: IFFALSE 90763
// begin x := tmp [ j ] ;
90745: LD_ADDR_VAR 0 10
90749: PUSH
90750: LD_VAR 0 14
90754: PUSH
90755: LD_VAR 0 8
90759: ARRAY
90760: ST_TO_ADDR
// break ;
90761: GO 90765
// end ;
90763: GO 90666
90765: POP
90766: POP
// if x then
90767: LD_VAR 0 10
90771: IFFALSE 90795
// ComAttackUnit ( group [ i ] , x ) else
90773: LD_VAR 0 4
90777: PUSH
90778: LD_VAR 0 7
90782: ARRAY
90783: PPUSH
90784: LD_VAR 0 10
90788: PPUSH
90789: CALL_OW 115
90793: GO 90819
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
90795: LD_VAR 0 4
90799: PUSH
90800: LD_VAR 0 7
90804: ARRAY
90805: PPUSH
90806: LD_VAR 0 14
90810: PUSH
90811: LD_INT 1
90813: ARRAY
90814: PPUSH
90815: CALL_OW 115
// if not HasTask ( group [ i ] ) then
90819: LD_VAR 0 4
90823: PUSH
90824: LD_VAR 0 7
90828: ARRAY
90829: PPUSH
90830: CALL_OW 314
90834: NOT
90835: IFFALSE 90873
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
90837: LD_VAR 0 4
90841: PUSH
90842: LD_VAR 0 7
90846: ARRAY
90847: PPUSH
90848: LD_VAR 0 14
90852: PPUSH
90853: LD_VAR 0 4
90857: PUSH
90858: LD_VAR 0 7
90862: ARRAY
90863: PPUSH
90864: CALL_OW 74
90868: PPUSH
90869: CALL_OW 115
// end ; end ; end ;
90873: GO 86752
90875: POP
90876: POP
// wait ( 0 0$2 ) ;
90877: LD_INT 70
90879: PPUSH
90880: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
90884: LD_VAR 0 4
90888: NOT
90889: PUSH
90890: LD_VAR 0 4
90894: PUSH
90895: EMPTY
90896: EQUAL
90897: OR
90898: PUSH
90899: LD_INT 81
90901: PUSH
90902: LD_VAR 0 35
90906: PUSH
90907: EMPTY
90908: LIST
90909: LIST
90910: PPUSH
90911: CALL_OW 69
90915: NOT
90916: OR
90917: IFFALSE 86737
// end ;
90919: LD_VAR 0 2
90923: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
90924: LD_INT 0
90926: PPUSH
90927: PPUSH
90928: PPUSH
90929: PPUSH
90930: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
90931: LD_VAR 0 1
90935: NOT
90936: PUSH
90937: LD_EXP 87
90941: PUSH
90942: LD_VAR 0 1
90946: ARRAY
90947: NOT
90948: OR
90949: PUSH
90950: LD_VAR 0 2
90954: NOT
90955: OR
90956: PUSH
90957: LD_VAR 0 3
90961: NOT
90962: OR
90963: IFFALSE 90967
// exit ;
90965: GO 91480
// side := mc_sides [ base ] ;
90967: LD_ADDR_VAR 0 6
90971: PUSH
90972: LD_EXP 113
90976: PUSH
90977: LD_VAR 0 1
90981: ARRAY
90982: ST_TO_ADDR
// if not side then
90983: LD_VAR 0 6
90987: NOT
90988: IFFALSE 90992
// exit ;
90990: GO 91480
// for i in solds do
90992: LD_ADDR_VAR 0 7
90996: PUSH
90997: LD_VAR 0 2
91001: PUSH
91002: FOR_IN
91003: IFFALSE 91064
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
91005: LD_VAR 0 7
91009: PPUSH
91010: CALL_OW 310
91014: PPUSH
91015: CALL_OW 266
91019: PUSH
91020: LD_INT 32
91022: PUSH
91023: LD_INT 31
91025: PUSH
91026: EMPTY
91027: LIST
91028: LIST
91029: IN
91030: IFFALSE 91050
// solds := solds diff i else
91032: LD_ADDR_VAR 0 2
91036: PUSH
91037: LD_VAR 0 2
91041: PUSH
91042: LD_VAR 0 7
91046: DIFF
91047: ST_TO_ADDR
91048: GO 91062
// SetTag ( i , 18 ) ;
91050: LD_VAR 0 7
91054: PPUSH
91055: LD_INT 18
91057: PPUSH
91058: CALL_OW 109
91062: GO 91002
91064: POP
91065: POP
// if not solds then
91066: LD_VAR 0 2
91070: NOT
91071: IFFALSE 91075
// exit ;
91073: GO 91480
// repeat wait ( 0 0$1 ) ;
91075: LD_INT 35
91077: PPUSH
91078: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
91082: LD_ADDR_VAR 0 5
91086: PUSH
91087: LD_VAR 0 6
91091: PPUSH
91092: LD_VAR 0 3
91096: PPUSH
91097: CALL 46881 0 2
91101: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
91102: LD_EXP 87
91106: PUSH
91107: LD_VAR 0 1
91111: ARRAY
91112: NOT
91113: PUSH
91114: LD_EXP 87
91118: PUSH
91119: LD_VAR 0 1
91123: ARRAY
91124: PUSH
91125: EMPTY
91126: EQUAL
91127: OR
91128: IFFALSE 91165
// begin for i in solds do
91130: LD_ADDR_VAR 0 7
91134: PUSH
91135: LD_VAR 0 2
91139: PUSH
91140: FOR_IN
91141: IFFALSE 91154
// ComStop ( i ) ;
91143: LD_VAR 0 7
91147: PPUSH
91148: CALL_OW 141
91152: GO 91140
91154: POP
91155: POP
// solds := [ ] ;
91156: LD_ADDR_VAR 0 2
91160: PUSH
91161: EMPTY
91162: ST_TO_ADDR
// exit ;
91163: GO 91480
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
91165: LD_VAR 0 5
91169: NOT
91170: PUSH
91171: LD_VAR 0 5
91175: PUSH
91176: LD_INT 3
91178: GREATER
91179: OR
91180: PUSH
91181: LD_EXP 109
91185: PUSH
91186: LD_VAR 0 1
91190: ARRAY
91191: OR
91192: IFFALSE 91233
// begin for i in solds do
91194: LD_ADDR_VAR 0 7
91198: PUSH
91199: LD_VAR 0 2
91203: PUSH
91204: FOR_IN
91205: IFFALSE 91229
// if HasTask ( i ) then
91207: LD_VAR 0 7
91211: PPUSH
91212: CALL_OW 314
91216: IFFALSE 91227
// ComStop ( i ) ;
91218: LD_VAR 0 7
91222: PPUSH
91223: CALL_OW 141
91227: GO 91204
91229: POP
91230: POP
// break ;
91231: GO 91468
// end ; for i in solds do
91233: LD_ADDR_VAR 0 7
91237: PUSH
91238: LD_VAR 0 2
91242: PUSH
91243: FOR_IN
91244: IFFALSE 91460
// begin if IsInUnit ( i ) then
91246: LD_VAR 0 7
91250: PPUSH
91251: CALL_OW 310
91255: IFFALSE 91266
// ComExitBuilding ( i ) ;
91257: LD_VAR 0 7
91261: PPUSH
91262: CALL_OW 122
// if GetLives ( i ) > 333 then
91266: LD_VAR 0 7
91270: PPUSH
91271: CALL_OW 256
91275: PUSH
91276: LD_INT 333
91278: GREATER
91279: IFFALSE 91307
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
91281: LD_VAR 0 7
91285: PPUSH
91286: LD_VAR 0 5
91290: PPUSH
91291: LD_VAR 0 7
91295: PPUSH
91296: CALL_OW 74
91300: PPUSH
91301: CALL_OW 115
91305: GO 91458
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
91307: LD_ADDR_VAR 0 8
91311: PUSH
91312: LD_EXP 87
91316: PUSH
91317: LD_VAR 0 1
91321: ARRAY
91322: PPUSH
91323: LD_INT 2
91325: PUSH
91326: LD_INT 30
91328: PUSH
91329: LD_INT 0
91331: PUSH
91332: EMPTY
91333: LIST
91334: LIST
91335: PUSH
91336: LD_INT 30
91338: PUSH
91339: LD_INT 1
91341: PUSH
91342: EMPTY
91343: LIST
91344: LIST
91345: PUSH
91346: LD_INT 30
91348: PUSH
91349: LD_INT 6
91351: PUSH
91352: EMPTY
91353: LIST
91354: LIST
91355: PUSH
91356: EMPTY
91357: LIST
91358: LIST
91359: LIST
91360: LIST
91361: PPUSH
91362: CALL_OW 72
91366: PPUSH
91367: LD_VAR 0 7
91371: PPUSH
91372: CALL_OW 74
91376: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
91377: LD_VAR 0 7
91381: PPUSH
91382: LD_VAR 0 8
91386: PPUSH
91387: CALL_OW 250
91391: PPUSH
91392: LD_INT 3
91394: PPUSH
91395: LD_INT 5
91397: PPUSH
91398: CALL_OW 272
91402: PPUSH
91403: LD_VAR 0 8
91407: PPUSH
91408: CALL_OW 251
91412: PPUSH
91413: LD_INT 3
91415: PPUSH
91416: LD_INT 5
91418: PPUSH
91419: CALL_OW 273
91423: PPUSH
91424: CALL_OW 111
// SetTag ( i , 0 ) ;
91428: LD_VAR 0 7
91432: PPUSH
91433: LD_INT 0
91435: PPUSH
91436: CALL_OW 109
// solds := solds diff i ;
91440: LD_ADDR_VAR 0 2
91444: PUSH
91445: LD_VAR 0 2
91449: PUSH
91450: LD_VAR 0 7
91454: DIFF
91455: ST_TO_ADDR
// continue ;
91456: GO 91243
// end ; end ;
91458: GO 91243
91460: POP
91461: POP
// until solds ;
91462: LD_VAR 0 2
91466: IFFALSE 91075
// MC_Reset ( base , 18 ) ;
91468: LD_VAR 0 1
91472: PPUSH
91473: LD_INT 18
91475: PPUSH
91476: CALL 23922 0 2
// end ;
91480: LD_VAR 0 4
91484: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
91485: LD_INT 0
91487: PPUSH
91488: PPUSH
91489: PPUSH
91490: PPUSH
91491: PPUSH
91492: PPUSH
91493: PPUSH
91494: PPUSH
91495: PPUSH
91496: PPUSH
91497: PPUSH
91498: PPUSH
91499: PPUSH
91500: PPUSH
91501: PPUSH
91502: PPUSH
91503: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
91504: LD_ADDR_VAR 0 13
91508: PUSH
91509: LD_EXP 87
91513: PUSH
91514: LD_VAR 0 1
91518: ARRAY
91519: PPUSH
91520: LD_INT 25
91522: PUSH
91523: LD_INT 3
91525: PUSH
91526: EMPTY
91527: LIST
91528: LIST
91529: PPUSH
91530: CALL_OW 72
91534: ST_TO_ADDR
// if mc_remote_driver [ base ] then
91535: LD_EXP 127
91539: PUSH
91540: LD_VAR 0 1
91544: ARRAY
91545: IFFALSE 91569
// mechs := mechs diff mc_remote_driver [ base ] ;
91547: LD_ADDR_VAR 0 13
91551: PUSH
91552: LD_VAR 0 13
91556: PUSH
91557: LD_EXP 127
91561: PUSH
91562: LD_VAR 0 1
91566: ARRAY
91567: DIFF
91568: ST_TO_ADDR
// for i in mechs do
91569: LD_ADDR_VAR 0 5
91573: PUSH
91574: LD_VAR 0 13
91578: PUSH
91579: FOR_IN
91580: IFFALSE 91615
// if GetTag ( i ) > 0 then
91582: LD_VAR 0 5
91586: PPUSH
91587: CALL_OW 110
91591: PUSH
91592: LD_INT 0
91594: GREATER
91595: IFFALSE 91613
// mechs := mechs diff i ;
91597: LD_ADDR_VAR 0 13
91601: PUSH
91602: LD_VAR 0 13
91606: PUSH
91607: LD_VAR 0 5
91611: DIFF
91612: ST_TO_ADDR
91613: GO 91579
91615: POP
91616: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
91617: LD_ADDR_VAR 0 9
91621: PUSH
91622: LD_EXP 87
91626: PUSH
91627: LD_VAR 0 1
91631: ARRAY
91632: PPUSH
91633: LD_INT 2
91635: PUSH
91636: LD_INT 25
91638: PUSH
91639: LD_INT 1
91641: PUSH
91642: EMPTY
91643: LIST
91644: LIST
91645: PUSH
91646: LD_INT 25
91648: PUSH
91649: LD_INT 5
91651: PUSH
91652: EMPTY
91653: LIST
91654: LIST
91655: PUSH
91656: LD_INT 25
91658: PUSH
91659: LD_INT 8
91661: PUSH
91662: EMPTY
91663: LIST
91664: LIST
91665: PUSH
91666: LD_INT 25
91668: PUSH
91669: LD_INT 9
91671: PUSH
91672: EMPTY
91673: LIST
91674: LIST
91675: PUSH
91676: EMPTY
91677: LIST
91678: LIST
91679: LIST
91680: LIST
91681: LIST
91682: PPUSH
91683: CALL_OW 72
91687: ST_TO_ADDR
// if not defenders and not solds then
91688: LD_VAR 0 2
91692: NOT
91693: PUSH
91694: LD_VAR 0 9
91698: NOT
91699: AND
91700: IFFALSE 91704
// exit ;
91702: GO 93330
// depot_under_attack := false ;
91704: LD_ADDR_VAR 0 17
91708: PUSH
91709: LD_INT 0
91711: ST_TO_ADDR
// sold_defenders := [ ] ;
91712: LD_ADDR_VAR 0 18
91716: PUSH
91717: EMPTY
91718: ST_TO_ADDR
// if mechs then
91719: LD_VAR 0 13
91723: IFFALSE 91852
// for i in defenders do
91725: LD_ADDR_VAR 0 5
91729: PUSH
91730: LD_VAR 0 2
91734: PUSH
91735: FOR_IN
91736: IFFALSE 91850
// begin SetTag ( i , 20 ) ;
91738: LD_VAR 0 5
91742: PPUSH
91743: LD_INT 20
91745: PPUSH
91746: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
91750: LD_VAR 0 5
91754: PPUSH
91755: CALL_OW 263
91759: PUSH
91760: LD_INT 1
91762: EQUAL
91763: PUSH
91764: LD_VAR 0 5
91768: PPUSH
91769: CALL_OW 311
91773: NOT
91774: AND
91775: PUSH
91776: LD_VAR 0 13
91780: AND
91781: IFFALSE 91848
// begin un := mechs [ 1 ] ;
91783: LD_ADDR_VAR 0 11
91787: PUSH
91788: LD_VAR 0 13
91792: PUSH
91793: LD_INT 1
91795: ARRAY
91796: ST_TO_ADDR
// ComExitBuilding ( un ) ;
91797: LD_VAR 0 11
91801: PPUSH
91802: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
91806: LD_VAR 0 11
91810: PPUSH
91811: LD_VAR 0 5
91815: PPUSH
91816: CALL_OW 180
// SetTag ( un , 19 ) ;
91820: LD_VAR 0 11
91824: PPUSH
91825: LD_INT 19
91827: PPUSH
91828: CALL_OW 109
// mechs := mechs diff un ;
91832: LD_ADDR_VAR 0 13
91836: PUSH
91837: LD_VAR 0 13
91841: PUSH
91842: LD_VAR 0 11
91846: DIFF
91847: ST_TO_ADDR
// end ; end ;
91848: GO 91735
91850: POP
91851: POP
// if solds then
91852: LD_VAR 0 9
91856: IFFALSE 91915
// for i in solds do
91858: LD_ADDR_VAR 0 5
91862: PUSH
91863: LD_VAR 0 9
91867: PUSH
91868: FOR_IN
91869: IFFALSE 91913
// if not GetTag ( i ) then
91871: LD_VAR 0 5
91875: PPUSH
91876: CALL_OW 110
91880: NOT
91881: IFFALSE 91911
// begin defenders := defenders union i ;
91883: LD_ADDR_VAR 0 2
91887: PUSH
91888: LD_VAR 0 2
91892: PUSH
91893: LD_VAR 0 5
91897: UNION
91898: ST_TO_ADDR
// SetTag ( i , 18 ) ;
91899: LD_VAR 0 5
91903: PPUSH
91904: LD_INT 18
91906: PPUSH
91907: CALL_OW 109
// end ;
91911: GO 91868
91913: POP
91914: POP
// repeat wait ( 0 0$1 ) ;
91915: LD_INT 35
91917: PPUSH
91918: CALL_OW 67
// enemy := mc_scan [ base ] ;
91922: LD_ADDR_VAR 0 3
91926: PUSH
91927: LD_EXP 110
91931: PUSH
91932: LD_VAR 0 1
91936: ARRAY
91937: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
91938: LD_EXP 87
91942: PUSH
91943: LD_VAR 0 1
91947: ARRAY
91948: NOT
91949: PUSH
91950: LD_EXP 87
91954: PUSH
91955: LD_VAR 0 1
91959: ARRAY
91960: PUSH
91961: EMPTY
91962: EQUAL
91963: OR
91964: IFFALSE 92001
// begin for i in defenders do
91966: LD_ADDR_VAR 0 5
91970: PUSH
91971: LD_VAR 0 2
91975: PUSH
91976: FOR_IN
91977: IFFALSE 91990
// ComStop ( i ) ;
91979: LD_VAR 0 5
91983: PPUSH
91984: CALL_OW 141
91988: GO 91976
91990: POP
91991: POP
// defenders := [ ] ;
91992: LD_ADDR_VAR 0 2
91996: PUSH
91997: EMPTY
91998: ST_TO_ADDR
// exit ;
91999: GO 93330
// end ; for i in defenders do
92001: LD_ADDR_VAR 0 5
92005: PUSH
92006: LD_VAR 0 2
92010: PUSH
92011: FOR_IN
92012: IFFALSE 92830
// begin e := NearestUnitToUnit ( enemy , i ) ;
92014: LD_ADDR_VAR 0 14
92018: PUSH
92019: LD_VAR 0 3
92023: PPUSH
92024: LD_VAR 0 5
92028: PPUSH
92029: CALL_OW 74
92033: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
92034: LD_ADDR_VAR 0 8
92038: PUSH
92039: LD_EXP 87
92043: PUSH
92044: LD_VAR 0 1
92048: ARRAY
92049: PPUSH
92050: LD_INT 2
92052: PUSH
92053: LD_INT 30
92055: PUSH
92056: LD_INT 0
92058: PUSH
92059: EMPTY
92060: LIST
92061: LIST
92062: PUSH
92063: LD_INT 30
92065: PUSH
92066: LD_INT 1
92068: PUSH
92069: EMPTY
92070: LIST
92071: LIST
92072: PUSH
92073: EMPTY
92074: LIST
92075: LIST
92076: LIST
92077: PPUSH
92078: CALL_OW 72
92082: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
92083: LD_ADDR_VAR 0 17
92087: PUSH
92088: LD_VAR 0 8
92092: NOT
92093: PUSH
92094: LD_VAR 0 8
92098: PPUSH
92099: LD_INT 3
92101: PUSH
92102: LD_INT 24
92104: PUSH
92105: LD_INT 600
92107: PUSH
92108: EMPTY
92109: LIST
92110: LIST
92111: PUSH
92112: EMPTY
92113: LIST
92114: LIST
92115: PPUSH
92116: CALL_OW 72
92120: OR
92121: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
92122: LD_VAR 0 5
92126: PPUSH
92127: CALL_OW 247
92131: PUSH
92132: LD_INT 2
92134: DOUBLE
92135: EQUAL
92136: IFTRUE 92140
92138: GO 92536
92140: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
92141: LD_VAR 0 5
92145: PPUSH
92146: CALL_OW 256
92150: PUSH
92151: LD_INT 650
92153: GREATER
92154: PUSH
92155: LD_VAR 0 5
92159: PPUSH
92160: LD_VAR 0 14
92164: PPUSH
92165: CALL_OW 296
92169: PUSH
92170: LD_INT 40
92172: LESS
92173: PUSH
92174: LD_VAR 0 14
92178: PPUSH
92179: LD_EXP 112
92183: PUSH
92184: LD_VAR 0 1
92188: ARRAY
92189: PPUSH
92190: CALL_OW 308
92194: OR
92195: AND
92196: IFFALSE 92318
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
92198: LD_VAR 0 5
92202: PPUSH
92203: CALL_OW 262
92207: PUSH
92208: LD_INT 1
92210: EQUAL
92211: PUSH
92212: LD_VAR 0 5
92216: PPUSH
92217: CALL_OW 261
92221: PUSH
92222: LD_INT 30
92224: LESS
92225: AND
92226: PUSH
92227: LD_VAR 0 8
92231: AND
92232: IFFALSE 92302
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
92234: LD_VAR 0 5
92238: PPUSH
92239: LD_VAR 0 8
92243: PPUSH
92244: LD_VAR 0 5
92248: PPUSH
92249: CALL_OW 74
92253: PPUSH
92254: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
92258: LD_VAR 0 5
92262: PPUSH
92263: LD_VAR 0 8
92267: PPUSH
92268: LD_VAR 0 5
92272: PPUSH
92273: CALL_OW 74
92277: PPUSH
92278: CALL_OW 296
92282: PUSH
92283: LD_INT 6
92285: LESS
92286: IFFALSE 92300
// SetFuel ( i , 100 ) ;
92288: LD_VAR 0 5
92292: PPUSH
92293: LD_INT 100
92295: PPUSH
92296: CALL_OW 240
// end else
92300: GO 92316
// ComAttackUnit ( i , e ) ;
92302: LD_VAR 0 5
92306: PPUSH
92307: LD_VAR 0 14
92311: PPUSH
92312: CALL_OW 115
// end else
92316: GO 92419
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
92318: LD_VAR 0 14
92322: PPUSH
92323: LD_EXP 112
92327: PUSH
92328: LD_VAR 0 1
92332: ARRAY
92333: PPUSH
92334: CALL_OW 308
92338: NOT
92339: PUSH
92340: LD_VAR 0 5
92344: PPUSH
92345: LD_VAR 0 14
92349: PPUSH
92350: CALL_OW 296
92354: PUSH
92355: LD_INT 40
92357: GREATEREQUAL
92358: AND
92359: PUSH
92360: LD_VAR 0 5
92364: PPUSH
92365: CALL_OW 256
92369: PUSH
92370: LD_INT 650
92372: LESSEQUAL
92373: OR
92374: PUSH
92375: LD_VAR 0 5
92379: PPUSH
92380: LD_EXP 111
92384: PUSH
92385: LD_VAR 0 1
92389: ARRAY
92390: PPUSH
92391: CALL_OW 308
92395: NOT
92396: AND
92397: IFFALSE 92419
// ComMoveToArea ( i , mc_parking [ base ] ) ;
92399: LD_VAR 0 5
92403: PPUSH
92404: LD_EXP 111
92408: PUSH
92409: LD_VAR 0 1
92413: ARRAY
92414: PPUSH
92415: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
92419: LD_VAR 0 5
92423: PPUSH
92424: CALL_OW 256
92428: PUSH
92429: LD_INT 998
92431: LESS
92432: PUSH
92433: LD_VAR 0 5
92437: PPUSH
92438: CALL_OW 263
92442: PUSH
92443: LD_INT 1
92445: EQUAL
92446: AND
92447: PUSH
92448: LD_VAR 0 5
92452: PPUSH
92453: CALL_OW 311
92457: AND
92458: PUSH
92459: LD_VAR 0 5
92463: PPUSH
92464: LD_EXP 111
92468: PUSH
92469: LD_VAR 0 1
92473: ARRAY
92474: PPUSH
92475: CALL_OW 308
92479: AND
92480: IFFALSE 92534
// begin mech := IsDrivenBy ( i ) ;
92482: LD_ADDR_VAR 0 10
92486: PUSH
92487: LD_VAR 0 5
92491: PPUSH
92492: CALL_OW 311
92496: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
92497: LD_VAR 0 10
92501: PPUSH
92502: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
92506: LD_VAR 0 10
92510: PPUSH
92511: LD_VAR 0 5
92515: PPUSH
92516: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
92520: LD_VAR 0 10
92524: PPUSH
92525: LD_VAR 0 5
92529: PPUSH
92530: CALL_OW 180
// end ; end ; unit_human :
92534: GO 92801
92536: LD_INT 1
92538: DOUBLE
92539: EQUAL
92540: IFTRUE 92544
92542: GO 92800
92544: POP
// begin b := IsInUnit ( i ) ;
92545: LD_ADDR_VAR 0 19
92549: PUSH
92550: LD_VAR 0 5
92554: PPUSH
92555: CALL_OW 310
92559: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
92560: LD_ADDR_VAR 0 20
92564: PUSH
92565: LD_VAR 0 19
92569: NOT
92570: PUSH
92571: LD_VAR 0 19
92575: PPUSH
92576: CALL_OW 266
92580: PUSH
92581: LD_INT 32
92583: PUSH
92584: LD_INT 31
92586: PUSH
92587: EMPTY
92588: LIST
92589: LIST
92590: IN
92591: OR
92592: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
92593: LD_VAR 0 17
92597: PUSH
92598: LD_VAR 0 2
92602: PPUSH
92603: LD_INT 21
92605: PUSH
92606: LD_INT 2
92608: PUSH
92609: EMPTY
92610: LIST
92611: LIST
92612: PPUSH
92613: CALL_OW 72
92617: PUSH
92618: LD_INT 1
92620: LESSEQUAL
92621: OR
92622: PUSH
92623: LD_VAR 0 20
92627: AND
92628: PUSH
92629: LD_VAR 0 5
92633: PUSH
92634: LD_VAR 0 18
92638: IN
92639: NOT
92640: AND
92641: IFFALSE 92734
// begin if b then
92643: LD_VAR 0 19
92647: IFFALSE 92696
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
92649: LD_VAR 0 19
92653: PPUSH
92654: LD_VAR 0 3
92658: PPUSH
92659: LD_VAR 0 19
92663: PPUSH
92664: CALL_OW 74
92668: PPUSH
92669: CALL_OW 296
92673: PUSH
92674: LD_INT 10
92676: LESS
92677: PUSH
92678: LD_VAR 0 19
92682: PPUSH
92683: CALL_OW 461
92687: PUSH
92688: LD_INT 7
92690: NONEQUAL
92691: AND
92692: IFFALSE 92696
// continue ;
92694: GO 92011
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
92696: LD_ADDR_VAR 0 18
92700: PUSH
92701: LD_VAR 0 18
92705: PPUSH
92706: LD_VAR 0 18
92710: PUSH
92711: LD_INT 1
92713: PLUS
92714: PPUSH
92715: LD_VAR 0 5
92719: PPUSH
92720: CALL_OW 1
92724: ST_TO_ADDR
// ComExitBuilding ( i ) ;
92725: LD_VAR 0 5
92729: PPUSH
92730: CALL_OW 122
// end ; if sold_defenders then
92734: LD_VAR 0 18
92738: IFFALSE 92798
// if i in sold_defenders then
92740: LD_VAR 0 5
92744: PUSH
92745: LD_VAR 0 18
92749: IN
92750: IFFALSE 92798
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
92752: LD_VAR 0 5
92756: PPUSH
92757: CALL_OW 314
92761: NOT
92762: PUSH
92763: LD_VAR 0 5
92767: PPUSH
92768: LD_VAR 0 14
92772: PPUSH
92773: CALL_OW 296
92777: PUSH
92778: LD_INT 30
92780: LESS
92781: AND
92782: IFFALSE 92798
// ComAttackUnit ( i , e ) ;
92784: LD_VAR 0 5
92788: PPUSH
92789: LD_VAR 0 14
92793: PPUSH
92794: CALL_OW 115
// end ; end ; end ;
92798: GO 92801
92800: POP
// if IsDead ( i ) then
92801: LD_VAR 0 5
92805: PPUSH
92806: CALL_OW 301
92810: IFFALSE 92828
// defenders := defenders diff i ;
92812: LD_ADDR_VAR 0 2
92816: PUSH
92817: LD_VAR 0 2
92821: PUSH
92822: LD_VAR 0 5
92826: DIFF
92827: ST_TO_ADDR
// end ;
92828: GO 92011
92830: POP
92831: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
92832: LD_VAR 0 3
92836: NOT
92837: PUSH
92838: LD_VAR 0 2
92842: NOT
92843: OR
92844: PUSH
92845: LD_EXP 87
92849: PUSH
92850: LD_VAR 0 1
92854: ARRAY
92855: NOT
92856: OR
92857: IFFALSE 91915
// MC_Reset ( base , 18 ) ;
92859: LD_VAR 0 1
92863: PPUSH
92864: LD_INT 18
92866: PPUSH
92867: CALL 23922 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
92871: LD_ADDR_VAR 0 2
92875: PUSH
92876: LD_VAR 0 2
92880: PUSH
92881: LD_VAR 0 2
92885: PPUSH
92886: LD_INT 2
92888: PUSH
92889: LD_INT 25
92891: PUSH
92892: LD_INT 1
92894: PUSH
92895: EMPTY
92896: LIST
92897: LIST
92898: PUSH
92899: LD_INT 25
92901: PUSH
92902: LD_INT 5
92904: PUSH
92905: EMPTY
92906: LIST
92907: LIST
92908: PUSH
92909: LD_INT 25
92911: PUSH
92912: LD_INT 8
92914: PUSH
92915: EMPTY
92916: LIST
92917: LIST
92918: PUSH
92919: LD_INT 25
92921: PUSH
92922: LD_INT 9
92924: PUSH
92925: EMPTY
92926: LIST
92927: LIST
92928: PUSH
92929: EMPTY
92930: LIST
92931: LIST
92932: LIST
92933: LIST
92934: LIST
92935: PPUSH
92936: CALL_OW 72
92940: DIFF
92941: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
92942: LD_VAR 0 3
92946: NOT
92947: PUSH
92948: LD_VAR 0 2
92952: PPUSH
92953: LD_INT 21
92955: PUSH
92956: LD_INT 2
92958: PUSH
92959: EMPTY
92960: LIST
92961: LIST
92962: PPUSH
92963: CALL_OW 72
92967: AND
92968: IFFALSE 93306
// begin tmp := FilterByTag ( defenders , 19 ) ;
92970: LD_ADDR_VAR 0 12
92974: PUSH
92975: LD_VAR 0 2
92979: PPUSH
92980: LD_INT 19
92982: PPUSH
92983: CALL 78641 0 2
92987: ST_TO_ADDR
// if tmp then
92988: LD_VAR 0 12
92992: IFFALSE 93062
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
92994: LD_ADDR_VAR 0 12
92998: PUSH
92999: LD_VAR 0 12
93003: PPUSH
93004: LD_INT 25
93006: PUSH
93007: LD_INT 3
93009: PUSH
93010: EMPTY
93011: LIST
93012: LIST
93013: PPUSH
93014: CALL_OW 72
93018: ST_TO_ADDR
// if tmp then
93019: LD_VAR 0 12
93023: IFFALSE 93062
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
93025: LD_ADDR_EXP 99
93029: PUSH
93030: LD_EXP 99
93034: PPUSH
93035: LD_VAR 0 1
93039: PPUSH
93040: LD_EXP 99
93044: PUSH
93045: LD_VAR 0 1
93049: ARRAY
93050: PUSH
93051: LD_VAR 0 12
93055: UNION
93056: PPUSH
93057: CALL_OW 1
93061: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
93062: LD_VAR 0 1
93066: PPUSH
93067: LD_INT 19
93069: PPUSH
93070: CALL 23922 0 2
// repeat wait ( 0 0$1 ) ;
93074: LD_INT 35
93076: PPUSH
93077: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
93081: LD_EXP 87
93085: PUSH
93086: LD_VAR 0 1
93090: ARRAY
93091: NOT
93092: PUSH
93093: LD_EXP 87
93097: PUSH
93098: LD_VAR 0 1
93102: ARRAY
93103: PUSH
93104: EMPTY
93105: EQUAL
93106: OR
93107: IFFALSE 93144
// begin for i in defenders do
93109: LD_ADDR_VAR 0 5
93113: PUSH
93114: LD_VAR 0 2
93118: PUSH
93119: FOR_IN
93120: IFFALSE 93133
// ComStop ( i ) ;
93122: LD_VAR 0 5
93126: PPUSH
93127: CALL_OW 141
93131: GO 93119
93133: POP
93134: POP
// defenders := [ ] ;
93135: LD_ADDR_VAR 0 2
93139: PUSH
93140: EMPTY
93141: ST_TO_ADDR
// exit ;
93142: GO 93330
// end ; for i in defenders do
93144: LD_ADDR_VAR 0 5
93148: PUSH
93149: LD_VAR 0 2
93153: PUSH
93154: FOR_IN
93155: IFFALSE 93244
// begin if not IsInArea ( i , mc_parking [ base ] ) then
93157: LD_VAR 0 5
93161: PPUSH
93162: LD_EXP 111
93166: PUSH
93167: LD_VAR 0 1
93171: ARRAY
93172: PPUSH
93173: CALL_OW 308
93177: NOT
93178: IFFALSE 93202
// ComMoveToArea ( i , mc_parking [ base ] ) else
93180: LD_VAR 0 5
93184: PPUSH
93185: LD_EXP 111
93189: PUSH
93190: LD_VAR 0 1
93194: ARRAY
93195: PPUSH
93196: CALL_OW 113
93200: GO 93242
// if GetControl ( i ) = control_manual then
93202: LD_VAR 0 5
93206: PPUSH
93207: CALL_OW 263
93211: PUSH
93212: LD_INT 1
93214: EQUAL
93215: IFFALSE 93242
// if IsDrivenBy ( i ) then
93217: LD_VAR 0 5
93221: PPUSH
93222: CALL_OW 311
93226: IFFALSE 93242
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
93228: LD_VAR 0 5
93232: PPUSH
93233: CALL_OW 311
93237: PPUSH
93238: CALL_OW 121
// end ;
93242: GO 93154
93244: POP
93245: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
93246: LD_VAR 0 2
93250: PPUSH
93251: LD_INT 95
93253: PUSH
93254: LD_EXP 111
93258: PUSH
93259: LD_VAR 0 1
93263: ARRAY
93264: PUSH
93265: EMPTY
93266: LIST
93267: LIST
93268: PPUSH
93269: CALL_OW 72
93273: PUSH
93274: LD_VAR 0 2
93278: EQUAL
93279: PUSH
93280: LD_EXP 110
93284: PUSH
93285: LD_VAR 0 1
93289: ARRAY
93290: OR
93291: PUSH
93292: LD_EXP 87
93296: PUSH
93297: LD_VAR 0 1
93301: ARRAY
93302: NOT
93303: OR
93304: IFFALSE 93074
// end ; MC_Reset ( base , 19 ) ;
93306: LD_VAR 0 1
93310: PPUSH
93311: LD_INT 19
93313: PPUSH
93314: CALL 23922 0 2
// MC_Reset ( base , 20 ) ;
93318: LD_VAR 0 1
93322: PPUSH
93323: LD_INT 20
93325: PPUSH
93326: CALL 23922 0 2
// end ; end_of_file
93330: LD_VAR 0 4
93334: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
93335: GO 93337
93337: DISABLE
// begin ru_radar := 98 ;
93338: LD_ADDR_EXP 130
93342: PUSH
93343: LD_INT 98
93345: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
93346: LD_ADDR_EXP 131
93350: PUSH
93351: LD_INT 89
93353: ST_TO_ADDR
// us_hack := 99 ;
93354: LD_ADDR_EXP 132
93358: PUSH
93359: LD_INT 99
93361: ST_TO_ADDR
// us_artillery := 97 ;
93362: LD_ADDR_EXP 133
93366: PUSH
93367: LD_INT 97
93369: ST_TO_ADDR
// ar_bio_bomb := 91 ;
93370: LD_ADDR_EXP 134
93374: PUSH
93375: LD_INT 91
93377: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
93378: LD_ADDR_EXP 135
93382: PUSH
93383: LD_INT 92
93385: ST_TO_ADDR
// tech_Artillery := 80 ;
93386: LD_ADDR_EXP 136
93390: PUSH
93391: LD_INT 80
93393: ST_TO_ADDR
// tech_RadMat := 81 ;
93394: LD_ADDR_EXP 137
93398: PUSH
93399: LD_INT 81
93401: ST_TO_ADDR
// tech_BasicTools := 82 ;
93402: LD_ADDR_EXP 138
93406: PUSH
93407: LD_INT 82
93409: ST_TO_ADDR
// tech_Cargo := 83 ;
93410: LD_ADDR_EXP 139
93414: PUSH
93415: LD_INT 83
93417: ST_TO_ADDR
// tech_Track := 84 ;
93418: LD_ADDR_EXP 140
93422: PUSH
93423: LD_INT 84
93425: ST_TO_ADDR
// tech_Crane := 85 ;
93426: LD_ADDR_EXP 141
93430: PUSH
93431: LD_INT 85
93433: ST_TO_ADDR
// tech_Bulldozer := 86 ;
93434: LD_ADDR_EXP 142
93438: PUSH
93439: LD_INT 86
93441: ST_TO_ADDR
// tech_Hovercraft := 87 ;
93442: LD_ADDR_EXP 143
93446: PUSH
93447: LD_INT 87
93449: ST_TO_ADDR
// end ;
93450: END
