// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export meetBelkovBrother ; export cratesResources , oilResources ; export vehiclesPreviousMission ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinOpinion , platonovOpinion ; export canDestroyBeriaBase ; export enableOmicronAI ; export kirovCanCaptureVehicles ; export endCutscene ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 317 0 0
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_MeetBelkovBrother_6
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// cratesResources = LoadVariable ( 02_BeriaResourceCrates_7 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 02_BeriaResourceCrates_7
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// oilResources = LoadVariable ( 02_BeriaResourceOil_8 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_BeriaResourceOil_8
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// vehiclesPreviousMission = LoadVariable ( 02_Vehicles_1 , 0 ) ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_STRING 02_Vehicles_1
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  88: LD_ADDR_EXP 27
  92: PUSH
  93: LD_STRING 02_PlatonovOpinion_9
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// kurinOpinion = - 1 ;
 104: LD_ADDR_EXP 26
 108: PUSH
 109: LD_INT 1
 111: NEG
 112: ST_TO_ADDR
// scholtzeSpawned = false ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// scholtzeSaved = false ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// americanTroopsArriveOmicronCounter = 0 ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// spawnCrates = true ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 1
 144: ST_TO_ADDR
// dialog_track = false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// dialog_workshop = false ;
 153: LD_ADDR_EXP 8
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// dialog_stop = false ;
 161: LD_ADDR_EXP 11
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// counterEnable = false ;
 169: LD_ADDR_EXP 89
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// extraTime = 7 7$00 ;
 177: LD_ADDR_EXP 14
 181: PUSH
 182: LD_INT 14700
 184: ST_TO_ADDR
// kurinGiveMoreTime = false ;
 185: LD_ADDR_EXP 13
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 4200
 200: ST_TO_ADDR
// produceOnlyForYou = false ;
 201: LD_ADDR_EXP 17
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// produceMoreVehicles = false ;
 209: LD_ADDR_EXP 16
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// kurinCheckVehicles = false ;
 217: LD_ADDR_EXP 18
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omicronSurrender = false ;
 225: LD_ADDR_EXP 23
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// canExitBattlefield = true ;
 233: LD_ADDR_EXP 24
 237: PUSH
 238: LD_INT 1
 240: ST_TO_ADDR
// immortalSurvivors = false ;
 241: LD_ADDR_EXP 25
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// canDestroyBeriaBase = false ;
 249: LD_ADDR_EXP 28
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// endCutscene = false ;
 257: LD_ADDR_EXP 31
 261: PUSH
 262: LD_INT 0
 264: ST_TO_ADDR
// kirovCanCaptureVehicles = [ ] ;
 265: LD_ADDR_EXP 30
 269: PUSH
 270: EMPTY
 271: ST_TO_ADDR
// kirovFactory = 0 ;
 272: LD_ADDR_EXP 21
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// kirovCompleteFactory = false ;
 280: LD_ADDR_EXP 22
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// enableOmicronAI = true ;
 288: LD_ADDR_EXP 29
 292: PUSH
 293: LD_INT 1
 295: ST_TO_ADDR
// PrepareRussians ;
 296: CALL 1013 0 0
// PrepareAmericans ;
 300: CALL 5502 0 0
// Nef_PrepareNature ;
 304: CALL 30790 0 0
// MissionIntro ;
 308: CALL 21822 0 0
// end ; end_of_file
 312: LD_VAR 0 1
 316: RET
// export function InitMapConfig ; begin
 317: LD_INT 0
 319: PPUSH
// BaseMapConfig ;
 320: CALL 333 0 0
// MissionMapConfig ;
 324: CALL 435 0 0
// end ;
 328: LD_VAR 0 1
 332: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 333: LD_INT 0
 335: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 3 ] ;
 336: LD_ADDR_EXP 32
 340: PUSH
 341: LD_INT 8
 343: PUSH
 344: LD_INT 12
 346: PUSH
 347: LD_INT 6
 349: PUSH
 350: LD_INT 6
 352: PUSH
 353: LD_INT 3
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 363: LD_ADDR_EXP 33
 367: PUSH
 368: LD_INT 2
 370: PUSH
 371: LD_INT 2
 373: PUSH
 374: LD_INT 2
 376: PUSH
 377: LD_INT 2
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 386: LD_ADDR_EXP 34
 390: PUSH
 391: LD_INT 5
 393: NEG
 394: PPUSH
 395: LD_INT 5
 397: PPUSH
 398: CALL_OW 12
 402: PUSH
 403: EMPTY
 404: LIST
 405: ST_TO_ADDR
// debugMode = 0 ;
 406: LD_ADDR_EXP 37
 410: PUSH
 411: LD_INT 0
 413: ST_TO_ADDR
// missionPrefix = 03_ ;
 414: LD_ADDR_EXP 35
 418: PUSH
 419: LD_STRING 03_
 421: ST_TO_ADDR
// previousMissionPrefix = 02_ ;
 422: LD_ADDR_EXP 36
 426: PUSH
 427: LD_STRING 02_
 429: ST_TO_ADDR
// end ;
 430: LD_VAR 0 1
 434: RET
// export baseUnitsToChoose , scholtzeSpawnPositions ; export timeToPrepareAttack ; export bonusResourcesCrates , bonusResourcesOil ; export enemySkillLevel ; export americanWeapons , russianWeapons ; export maxAmericanTroopsIgnore ; export animalsSafeTime ; export omicronBlockerPoints ; function MissionMapConfig ; begin
 435: LD_INT 0
 437: PPUSH
// baseUnitsToChoose = [ 7 , 6 , 6 ] [ Difficulty ] ;
 438: LD_ADDR_EXP 38
 442: PUSH
 443: LD_INT 7
 445: PUSH
 446: LD_INT 6
 448: PUSH
 449: LD_INT 6
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: LD_OWVAR 67
 461: ARRAY
 462: ST_TO_ADDR
// timeToPrepareAttack = [ 40 40$0 , 35 35$0 , 30 30$0 ] [ Difficulty ] ;
 463: LD_ADDR_EXP 40
 467: PUSH
 468: LD_INT 84000
 470: PUSH
 471: LD_INT 73500
 473: PUSH
 474: LD_INT 63000
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: LD_OWVAR 67
 486: ARRAY
 487: ST_TO_ADDR
// bonusResourcesCrates = [ 150 , 100 , 50 ] [ Difficulty ] ;
 488: LD_ADDR_EXP 41
 492: PUSH
 493: LD_INT 150
 495: PUSH
 496: LD_INT 100
 498: PUSH
 499: LD_INT 50
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: LIST
 506: PUSH
 507: LD_OWVAR 67
 511: ARRAY
 512: ST_TO_ADDR
// bonusResourcesOil = [ 100 , 50 , 0 ] [ Difficulty ] ;
 513: LD_ADDR_EXP 42
 517: PUSH
 518: LD_INT 100
 520: PUSH
 521: LD_INT 50
 523: PUSH
 524: LD_INT 0
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: PUSH
 532: LD_OWVAR 67
 536: ARRAY
 537: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 538: LD_ADDR_EXP 43
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: LD_INT 2
 548: PUSH
 549: LD_INT 2
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: LIST
 556: PUSH
 557: LD_OWVAR 67
 561: ARRAY
 562: ST_TO_ADDR
// maxAmericanTroopsIgnore = [ 8 , 6 , 5 ] [ Difficulty ] ;
 563: LD_ADDR_EXP 46
 567: PUSH
 568: LD_INT 8
 570: PUSH
 571: LD_INT 6
 573: PUSH
 574: LD_INT 5
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: LIST
 581: PUSH
 582: LD_OWVAR 67
 586: ARRAY
 587: ST_TO_ADDR
// animalsSafeTime = [ 8 8$30 , 8 8$00 , 7 7$30 ] [ Difficulty ] ;
 588: LD_ADDR_EXP 47
 592: PUSH
 593: LD_INT 17850
 595: PUSH
 596: LD_INT 16800
 598: PUSH
 599: LD_INT 15750
 601: PUSH
 602: EMPTY
 603: LIST
 604: LIST
 605: LIST
 606: PUSH
 607: LD_OWVAR 67
 611: ARRAY
 612: ST_TO_ADDR
// omicronBlockerPoints = [ [ 47 , 14 ] , [ 57 , 39 ] , [ 61 , 60 ] , [ 44 , 76 ] , [ 44 , 4 ] , [ 55 , 29 ] ] ;
 613: LD_ADDR_EXP 48
 617: PUSH
 618: LD_INT 47
 620: PUSH
 621: LD_INT 14
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 57
 630: PUSH
 631: LD_INT 39
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 61
 640: PUSH
 641: LD_INT 60
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: PUSH
 648: LD_INT 44
 650: PUSH
 651: LD_INT 76
 653: PUSH
 654: EMPTY
 655: LIST
 656: LIST
 657: PUSH
 658: LD_INT 44
 660: PUSH
 661: LD_INT 4
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: PUSH
 668: LD_INT 55
 670: PUSH
 671: LD_INT 29
 673: PUSH
 674: EMPTY
 675: LIST
 676: LIST
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// end ;
 686: LD_VAR 0 1
 690: RET
// every 0 0$1 trigger debugMode do var i ;
 691: LD_EXP 37
 695: IFFALSE 1010
 697: GO 699
 699: DISABLE
 700: LD_INT 0
 702: PPUSH
// begin enable ;
 703: ENABLE
// FogOff ( your_side ) ;
 704: LD_OWVAR 2
 708: PPUSH
 709: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 713: LD_ADDR_VAR 0 1
 717: PUSH
 718: LD_INT 22
 720: PUSH
 721: LD_OWVAR 2
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PUSH
 730: LD_INT 2
 732: PUSH
 733: LD_INT 21
 735: PUSH
 736: LD_INT 1
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: LD_INT 21
 745: PUSH
 746: LD_INT 2
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: LIST
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: PPUSH
 762: CALL_OW 69
 766: PUSH
 767: FOR_IN
 768: IFFALSE 784
// SetLives ( i , 1000 ) ;
 770: LD_VAR 0 1
 774: PPUSH
 775: LD_INT 1000
 777: PPUSH
 778: CALL_OW 234
 782: GO 767
 784: POP
 785: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 786: LD_ADDR_VAR 0 1
 790: PUSH
 791: LD_INT 22
 793: PUSH
 794: LD_OWVAR 2
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PUSH
 803: LD_INT 21
 805: PUSH
 806: LD_INT 1
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PPUSH
 817: CALL_OW 69
 821: PUSH
 822: FOR_IN
 823: IFFALSE 887
// begin SetSkill ( i , skill_combat , 10 ) ;
 825: LD_VAR 0 1
 829: PPUSH
 830: LD_INT 1
 832: PPUSH
 833: LD_INT 10
 835: PPUSH
 836: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 840: LD_VAR 0 1
 844: PPUSH
 845: LD_INT 2
 847: PPUSH
 848: LD_INT 10
 850: PPUSH
 851: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 855: LD_VAR 0 1
 859: PPUSH
 860: LD_INT 3
 862: PPUSH
 863: LD_INT 10
 865: PPUSH
 866: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 870: LD_VAR 0 1
 874: PPUSH
 875: LD_INT 4
 877: PPUSH
 878: LD_INT 10
 880: PPUSH
 881: CALL_OW 237
// end ;
 885: GO 822
 887: POP
 888: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 889: LD_ADDR_VAR 0 1
 893: PUSH
 894: LD_INT 22
 896: PUSH
 897: LD_OWVAR 2
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PUSH
 906: LD_INT 2
 908: PUSH
 909: LD_INT 30
 911: PUSH
 912: LD_INT 0
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: PUSH
 919: LD_INT 30
 921: PUSH
 922: LD_INT 1
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: LIST
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PPUSH
 938: CALL_OW 69
 942: PUSH
 943: FOR_IN
 944: IFFALSE 1008
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 946: LD_VAR 0 1
 950: PPUSH
 951: CALL_OW 274
 955: PPUSH
 956: LD_INT 1
 958: PPUSH
 959: LD_INT 9999
 961: PPUSH
 962: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 966: LD_VAR 0 1
 970: PPUSH
 971: CALL_OW 274
 975: PPUSH
 976: LD_INT 2
 978: PPUSH
 979: LD_INT 9999
 981: PPUSH
 982: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 986: LD_VAR 0 1
 990: PPUSH
 991: CALL_OW 274
 995: PPUSH
 996: LD_INT 3
 998: PPUSH
 999: LD_INT 9999
1001: PPUSH
1002: CALL_OW 277
// end ;
1006: GO 943
1008: POP
1009: POP
// end ; end_of_file
1010: PPOPN 1
1012: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 ; export Scholtze ; export other_survivors ; export playerVehicles ; export otherBeriaUnits , beriaBase , beriaDepot ; export Kurin , Popov , BelkovDialog ; export ruScout ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot ; export ru2_bar1 , ru2_bar2 ; export kirovEng ; export kirovBunkersToMountWeapon , kirovBunkersToOccupy ; export kirovTransportCargo ; export kirovAttackCargo , kirovAttackVehicles ; export kirovBunkerCounter ; export secondBaseTeam ; export survivorsArabianAttack ; export survivorsToSpawn ; export neededUnitsSpawn ; export Grishko ; export function PrepareRussians ; begin
1013: LD_INT 0
1015: PPUSH
// neededUnitsSpawn = [ 0 , 0 , 0 , 0 ] ;
1016: LD_ADDR_EXP 81
1020: PUSH
1021: LD_INT 0
1023: PUSH
1024: LD_INT 0
1026: PUSH
1027: LD_INT 0
1029: PUSH
1030: LD_INT 0
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: ST_TO_ADDR
// kirovAttackCargo = [ ] ;
1039: LD_ADDR_EXP 75
1043: PUSH
1044: EMPTY
1045: ST_TO_ADDR
// PrepareKirovBase ;
1046: CALL 2102 0 0
// PrepareHeroes ;
1050: CALL 1083 0 0
// PrepareKirovPersonel ;
1054: CALL 2867 0 0
// PrepareBeriaBase ;
1058: CALL 1504 0 0
// PrepareSecondBaseTeam ;
1062: CALL 4030 0 0
// PrepareGrishko ;
1066: CALL 3195 0 0
// PrepareOtherBuildings ;
1070: CALL 3464 0 0
// PrepareVehicles ;
1074: CALL 3268 0 0
// end ;
1078: LD_VAR 0 1
1082: RET
// function PrepareHeroes ; begin
1083: LD_INT 0
1085: PPUSH
// uc_side = 3 ;
1086: LD_ADDR_OWVAR 20
1090: PUSH
1091: LD_INT 3
1093: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true ) ;
1094: LD_ADDR_EXP 49
1098: PUSH
1099: LD_STRING Burlak
1101: PPUSH
1102: LD_INT 1
1104: PPUSH
1105: CALL 6932 0 2
1109: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true ) ;
1110: LD_ADDR_EXP 50
1114: PUSH
1115: LD_STRING Gnyevko
1117: PPUSH
1118: LD_INT 1
1120: PPUSH
1121: CALL 6932 0 2
1125: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true ) ;
1126: LD_ADDR_EXP 52
1130: PUSH
1131: LD_STRING Kovalyuk
1133: PPUSH
1134: LD_INT 1
1136: PPUSH
1137: CALL 6932 0 2
1141: ST_TO_ADDR
// Kirilenkova = PrepareUnitExt ( Kirilenkova , true ) ;
1142: LD_ADDR_EXP 51
1146: PUSH
1147: LD_STRING Kirilenkova
1149: PPUSH
1150: LD_INT 1
1152: PPUSH
1153: CALL 6932 0 2
1157: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
1158: LD_EXP 49
1162: PUSH
1163: LD_EXP 50
1167: PUSH
1168: LD_EXP 52
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: LIST
1177: PPUSH
1178: LD_INT 3
1180: PPUSH
1181: CALL_OW 336
// SetClass ( Kirilenkova , 4 ) ;
1185: LD_EXP 51
1189: PPUSH
1190: LD_INT 4
1192: PPUSH
1193: CALL_OW 336
// uc_side = 6 ;
1197: LD_ADDR_OWVAR 20
1201: PUSH
1202: LD_INT 6
1204: ST_TO_ADDR
// if not meetBelkovBrother and TestCharacters ( 02_Belkov ) then
1205: LD_EXP 1
1209: NOT
1210: PUSH
1211: LD_STRING 02_Belkov
1213: PPUSH
1214: CALL_OW 28
1218: AND
1219: IFFALSE 1320
// begin Belkov := PrepareUnitExt ( Belkov , true ) ;
1221: LD_ADDR_EXP 53
1225: PUSH
1226: LD_STRING Belkov
1228: PPUSH
1229: LD_INT 1
1231: PPUSH
1232: CALL 6932 0 2
1236: ST_TO_ADDR
// if TestCharacters ( 02_Belkov2 ) then
1237: LD_STRING 02_Belkov2
1239: PPUSH
1240: CALL_OW 28
1244: IFFALSE 1283
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1246: LD_ADDR_EXP 54
1250: PUSH
1251: LD_STRING Belkov2
1253: PPUSH
1254: LD_INT 1
1256: PPUSH
1257: CALL 6932 0 2
1261: ST_TO_ADDR
// PlaceUnitXYR ( Belkov2 , 159 , 107 , 5 , false ) ;
1262: LD_EXP 54
1266: PPUSH
1267: LD_INT 159
1269: PPUSH
1270: LD_INT 107
1272: PPUSH
1273: LD_INT 5
1275: PPUSH
1276: LD_INT 0
1278: PPUSH
1279: CALL_OW 50
// end ; BelkovDialog = Belkov ;
1283: LD_ADDR_EXP 63
1287: PUSH
1288: LD_EXP 53
1292: ST_TO_ADDR
// PlaceUnitXY ( Belkov , 165 , 110 , false ) ;
1293: LD_EXP 53
1297: PPUSH
1298: LD_INT 165
1300: PPUSH
1301: LD_INT 110
1303: PPUSH
1304: LD_INT 0
1306: PPUSH
1307: CALL_OW 48
// ComHold ( Belkov ) ;
1311: LD_EXP 53
1315: PPUSH
1316: CALL_OW 140
// end ; if meetBelkovBrother and TestCharacters ( 02_Belkov2 ) then
1320: LD_EXP 1
1324: PUSH
1325: LD_STRING 02_Belkov2
1327: PPUSH
1328: CALL_OW 28
1332: AND
1333: IFFALSE 1388
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1335: LD_ADDR_EXP 54
1339: PUSH
1340: LD_STRING Belkov2
1342: PPUSH
1343: LD_INT 1
1345: PPUSH
1346: CALL 6932 0 2
1350: ST_TO_ADDR
// BelkovDialog = Belkov2 ;
1351: LD_ADDR_EXP 63
1355: PUSH
1356: LD_EXP 54
1360: ST_TO_ADDR
// PlaceUnitXY ( Belkov2 , 165 , 110 , false ) ;
1361: LD_EXP 54
1365: PPUSH
1366: LD_INT 165
1368: PPUSH
1369: LD_INT 110
1371: PPUSH
1372: LD_INT 0
1374: PPUSH
1375: CALL_OW 48
// ComHold ( Belkov2 ) ;
1379: LD_EXP 54
1383: PPUSH
1384: CALL_OW 140
// end ; SetClass ( [ Belkov , Belkov2 ] , 1 ) ;
1388: LD_EXP 53
1392: PUSH
1393: LD_EXP 54
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: LD_INT 1
1404: PPUSH
1405: CALL_OW 336
// PlaceUnitXY ( Burlak , 164 , 108 , false ) ;
1409: LD_EXP 49
1413: PPUSH
1414: LD_INT 164
1416: PPUSH
1417: LD_INT 108
1419: PPUSH
1420: LD_INT 0
1422: PPUSH
1423: CALL_OW 48
// ComHold ( Burlak ) ;
1427: LD_EXP 49
1431: PPUSH
1432: CALL_OW 140
// PlaceUnitXYR ( Gnyevko , 159 , 107 , 5 , false ) ;
1436: LD_EXP 50
1440: PPUSH
1441: LD_INT 159
1443: PPUSH
1444: LD_INT 107
1446: PPUSH
1447: LD_INT 5
1449: PPUSH
1450: LD_INT 0
1452: PPUSH
1453: CALL_OW 50
// PlaceUnitXYR ( Kovalyuk , 159 , 107 , 5 , false ) ;
1457: LD_EXP 52
1461: PPUSH
1462: LD_INT 159
1464: PPUSH
1465: LD_INT 107
1467: PPUSH
1468: LD_INT 5
1470: PPUSH
1471: LD_INT 0
1473: PPUSH
1474: CALL_OW 50
// PlaceUnitXYR ( Kirilenkova , 159 , 107 , 5 , false ) ;
1478: LD_EXP 51
1482: PPUSH
1483: LD_INT 159
1485: PPUSH
1486: LD_INT 107
1488: PPUSH
1489: LD_INT 5
1491: PPUSH
1492: LD_INT 0
1494: PPUSH
1495: CALL_OW 50
// end ;
1499: LD_VAR 0 1
1503: RET
// function PrepareBeriaBase ; var i , bonusResources ; begin
1504: LD_INT 0
1506: PPUSH
1507: PPUSH
1508: PPUSH
// beriaBase = LoadVariable ( 02_BeriaBase_2 , [ ] ) ;
1509: LD_ADDR_EXP 59
1513: PUSH
1514: LD_STRING 02_BeriaBase_2
1516: PPUSH
1517: EMPTY
1518: PPUSH
1519: CALL_OW 30
1523: ST_TO_ADDR
// otherBeriaUnits = CreateCharacterSet ( 02_other_beria ) ;
1524: LD_ADDR_EXP 58
1528: PUSH
1529: LD_STRING 02_other_beria
1531: PPUSH
1532: CALL_OW 31
1536: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 02_other_survivors ) ;
1537: LD_ADDR_EXP 56
1541: PUSH
1542: LD_STRING 02_other_survivors
1544: PPUSH
1545: CALL_OW 31
1549: ST_TO_ADDR
// uc_side = 3 ;
1550: LD_ADDR_OWVAR 20
1554: PUSH
1555: LD_INT 3
1557: ST_TO_ADDR
// uc_nation = 3 ;
1558: LD_ADDR_OWVAR 21
1562: PUSH
1563: LD_INT 3
1565: ST_TO_ADDR
// for i := 1 to beriaBase do
1566: LD_ADDR_VAR 0 2
1570: PUSH
1571: DOUBLE
1572: LD_INT 1
1574: DEC
1575: ST_TO_ADDR
1576: LD_EXP 59
1580: PUSH
1581: FOR_TO
1582: IFFALSE 1835
// begin bc_type = beriaBase [ i ] [ 1 ] ;
1584: LD_ADDR_OWVAR 42
1588: PUSH
1589: LD_EXP 59
1593: PUSH
1594: LD_VAR 0 2
1598: ARRAY
1599: PUSH
1600: LD_INT 1
1602: ARRAY
1603: ST_TO_ADDR
// bc_level = beriaBase [ i ] [ 5 ] ;
1604: LD_ADDR_OWVAR 43
1608: PUSH
1609: LD_EXP 59
1613: PUSH
1614: LD_VAR 0 2
1618: ARRAY
1619: PUSH
1620: LD_INT 5
1622: ARRAY
1623: ST_TO_ADDR
// if bc_type = b_lab then
1624: LD_OWVAR 42
1628: PUSH
1629: LD_INT 6
1631: EQUAL
1632: IFFALSE 1650
// begin bc_kind1 = b_lab_basic ;
1634: LD_ADDR_OWVAR 44
1638: PUSH
1639: LD_INT 9
1641: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
1642: LD_ADDR_OWVAR 45
1646: PUSH
1647: LD_INT 9
1649: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
1650: LD_OWVAR 42
1654: PUSH
1655: LD_INT 7
1657: EQUAL
1658: PUSH
1659: LD_OWVAR 42
1663: PUSH
1664: LD_INT 8
1666: EQUAL
1667: OR
1668: IFFALSE 1784
// begin if beriaBase [ i ] [ 7 ] then
1670: LD_EXP 59
1674: PUSH
1675: LD_VAR 0 2
1679: ARRAY
1680: PUSH
1681: LD_INT 7
1683: ARRAY
1684: IFFALSE 1706
// bc_kind1 = beriaBase [ i ] [ 7 ] ;
1686: LD_ADDR_OWVAR 44
1690: PUSH
1691: LD_EXP 59
1695: PUSH
1696: LD_VAR 0 2
1700: ARRAY
1701: PUSH
1702: LD_INT 7
1704: ARRAY
1705: ST_TO_ADDR
// if beriaBase [ i ] [ 8 ] then
1706: LD_EXP 59
1710: PUSH
1711: LD_VAR 0 2
1715: ARRAY
1716: PUSH
1717: LD_INT 8
1719: ARRAY
1720: IFFALSE 1742
// bc_kind2 = beriaBase [ i ] [ 8 ] ;
1722: LD_ADDR_OWVAR 45
1726: PUSH
1727: LD_EXP 59
1731: PUSH
1732: LD_VAR 0 2
1736: ARRAY
1737: PUSH
1738: LD_INT 8
1740: ARRAY
1741: ST_TO_ADDR
// if not beriaBase [ i ] [ 7 ] and not beriaBase [ i ] [ 8 ] then
1742: LD_EXP 59
1746: PUSH
1747: LD_VAR 0 2
1751: ARRAY
1752: PUSH
1753: LD_INT 7
1755: ARRAY
1756: NOT
1757: PUSH
1758: LD_EXP 59
1762: PUSH
1763: LD_VAR 0 2
1767: ARRAY
1768: PUSH
1769: LD_INT 8
1771: ARRAY
1772: NOT
1773: AND
1774: IFFALSE 1784
// bc_type := b_lab ;
1776: LD_ADDR_OWVAR 42
1780: PUSH
1781: LD_INT 6
1783: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 2 ] , beriaBase [ i ] [ 3 ] , beriaBase [ i ] [ 4 ] ) ;
1784: LD_EXP 59
1788: PUSH
1789: LD_VAR 0 2
1793: ARRAY
1794: PUSH
1795: LD_INT 2
1797: ARRAY
1798: PPUSH
1799: LD_EXP 59
1803: PUSH
1804: LD_VAR 0 2
1808: ARRAY
1809: PUSH
1810: LD_INT 3
1812: ARRAY
1813: PPUSH
1814: LD_EXP 59
1818: PUSH
1819: LD_VAR 0 2
1823: ARRAY
1824: PUSH
1825: LD_INT 4
1827: ARRAY
1828: PPUSH
1829: CALL_OW 47
// end ;
1833: GO 1581
1835: POP
1836: POP
// beriaDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1837: LD_ADDR_EXP 60
1841: PUSH
1842: LD_INT 22
1844: PUSH
1845: LD_INT 3
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 30
1854: PUSH
1855: LD_INT 0
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: PPUSH
1866: CALL_OW 69
1870: PUSH
1871: LD_INT 1
1873: ARRAY
1874: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1875: LD_EXP 60
1879: PPUSH
1880: LD_STRING beria
1882: PPUSH
1883: CALL_OW 500
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , cratesResources ) ;
1887: LD_EXP 60
1891: PPUSH
1892: CALL_OW 274
1896: PPUSH
1897: LD_INT 1
1899: PPUSH
1900: LD_EXP 2
1904: PPUSH
1905: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , oilResources ) ;
1909: LD_EXP 60
1913: PPUSH
1914: CALL_OW 274
1918: PPUSH
1919: LD_INT 2
1921: PPUSH
1922: LD_EXP 3
1926: PPUSH
1927: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesCrates ) ;
1931: LD_EXP 60
1935: PPUSH
1936: CALL_OW 274
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: LD_EXP 60
1948: PPUSH
1949: CALL_OW 274
1953: PPUSH
1954: LD_INT 2
1956: PPUSH
1957: CALL_OW 275
1961: PUSH
1962: LD_EXP 41
1966: PLUS
1967: PPUSH
1968: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesOil ) ;
1972: LD_EXP 60
1976: PPUSH
1977: CALL_OW 274
1981: PPUSH
1982: LD_INT 2
1984: PPUSH
1985: LD_EXP 60
1989: PPUSH
1990: CALL_OW 274
1994: PPUSH
1995: LD_INT 2
1997: PPUSH
1998: CALL_OW 275
2002: PUSH
2003: LD_EXP 42
2007: PLUS
2008: PPUSH
2009: CALL_OW 277
// uc_side = 6 ;
2013: LD_ADDR_OWVAR 20
2017: PUSH
2018: LD_INT 6
2020: ST_TO_ADDR
// for i in otherBeriaUnits do
2021: LD_ADDR_VAR 0 2
2025: PUSH
2026: LD_EXP 58
2030: PUSH
2031: FOR_IN
2032: IFFALSE 2057
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
2034: LD_VAR 0 2
2038: PPUSH
2039: LD_INT 159
2041: PPUSH
2042: LD_INT 107
2044: PPUSH
2045: LD_INT 10
2047: PPUSH
2048: LD_INT 0
2050: PPUSH
2051: CALL_OW 50
2055: GO 2031
2057: POP
2058: POP
// for i in other_survivors do
2059: LD_ADDR_VAR 0 2
2063: PUSH
2064: LD_EXP 56
2068: PUSH
2069: FOR_IN
2070: IFFALSE 2095
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
2072: LD_VAR 0 2
2076: PPUSH
2077: LD_INT 159
2079: PPUSH
2080: LD_INT 107
2082: PPUSH
2083: LD_INT 10
2085: PPUSH
2086: LD_INT 0
2088: PPUSH
2089: CALL_OW 50
2093: GO 2069
2095: POP
2096: POP
// end ;
2097: LD_VAR 0 1
2101: RET
// function PrepareKirovBase ; var i , tmp , building ; begin
2102: LD_INT 0
2104: PPUSH
2105: PPUSH
2106: PPUSH
2107: PPUSH
// kirovBase = LoadVariable ( 02_KirovBase_3 , [ ] ) ;
2108: LD_ADDR_EXP 66
2112: PUSH
2113: LD_STRING 02_KirovBase_3
2115: PPUSH
2116: EMPTY
2117: PPUSH
2118: CALL_OW 30
2122: ST_TO_ADDR
// otherKirovUnits = CreateCharacterSet ( 02_other_kirov ) ;
2123: LD_ADDR_EXP 65
2127: PUSH
2128: LD_STRING 02_other_kirov
2130: PPUSH
2131: CALL_OW 31
2135: ST_TO_ADDR
// uc_side = 6 ;
2136: LD_ADDR_OWVAR 20
2140: PUSH
2141: LD_INT 6
2143: ST_TO_ADDR
// uc_nation = 3 ;
2144: LD_ADDR_OWVAR 21
2148: PUSH
2149: LD_INT 3
2151: ST_TO_ADDR
// Kurin = PrepareUnitExt ( Kurin , false ) ;
2152: LD_ADDR_EXP 61
2156: PUSH
2157: LD_STRING Kurin
2159: PPUSH
2160: LD_INT 0
2162: PPUSH
2163: CALL 6932 0 2
2167: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 166 , 109 , false ) ;
2168: LD_EXP 61
2172: PPUSH
2173: LD_INT 166
2175: PPUSH
2176: LD_INT 109
2178: PPUSH
2179: LD_INT 0
2181: PPUSH
2182: CALL_OW 48
// ComHold ( Kurin ) ;
2186: LD_EXP 61
2190: PPUSH
2191: CALL_OW 140
// for i := 1 to kirovBase do
2195: LD_ADDR_VAR 0 2
2199: PUSH
2200: DOUBLE
2201: LD_INT 1
2203: DEC
2204: ST_TO_ADDR
2205: LD_EXP 66
2209: PUSH
2210: FOR_TO
2211: IFFALSE 2649
// begin bc_type = kirovBase [ i ] [ 1 ] ;
2213: LD_ADDR_OWVAR 42
2217: PUSH
2218: LD_EXP 66
2222: PUSH
2223: LD_VAR 0 2
2227: ARRAY
2228: PUSH
2229: LD_INT 1
2231: ARRAY
2232: ST_TO_ADDR
// bc_level = kirovBase [ i ] [ 5 ] ;
2233: LD_ADDR_OWVAR 43
2237: PUSH
2238: LD_EXP 66
2242: PUSH
2243: LD_VAR 0 2
2247: ARRAY
2248: PUSH
2249: LD_INT 5
2251: ARRAY
2252: ST_TO_ADDR
// if bc_type = b_depot then
2253: LD_OWVAR 42
2257: PUSH
2258: LD_INT 0
2260: EQUAL
2261: IFFALSE 2271
// bc_type = b_warehouse ;
2263: LD_ADDR_OWVAR 42
2267: PUSH
2268: LD_INT 1
2270: ST_TO_ADDR
// if bc_type = b_armoury then
2271: LD_OWVAR 42
2275: PUSH
2276: LD_INT 4
2278: EQUAL
2279: IFFALSE 2289
// bc_type = b_barracks ;
2281: LD_ADDR_OWVAR 42
2285: PUSH
2286: LD_INT 5
2288: ST_TO_ADDR
// if bc_type = b_lab then
2289: LD_OWVAR 42
2293: PUSH
2294: LD_INT 6
2296: EQUAL
2297: IFFALSE 2315
// begin bc_kind1 = b_lab_weapon ;
2299: LD_ADDR_OWVAR 44
2303: PUSH
2304: LD_INT 10
2306: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2307: LD_ADDR_OWVAR 45
2311: PUSH
2312: LD_INT 9
2314: ST_TO_ADDR
// end ; if bc_type = b_workshop then
2315: LD_OWVAR 42
2319: PUSH
2320: LD_INT 2
2322: EQUAL
2323: IFFALSE 2333
// bc_type = b_factory ;
2325: LD_ADDR_OWVAR 42
2329: PUSH
2330: LD_INT 3
2332: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2333: LD_OWVAR 42
2337: PUSH
2338: LD_INT 7
2340: EQUAL
2341: PUSH
2342: LD_OWVAR 42
2346: PUSH
2347: LD_INT 8
2349: EQUAL
2350: OR
2351: IFFALSE 2467
// begin if kirovBase [ i ] [ 7 ] then
2353: LD_EXP 66
2357: PUSH
2358: LD_VAR 0 2
2362: ARRAY
2363: PUSH
2364: LD_INT 7
2366: ARRAY
2367: IFFALSE 2389
// bc_kind1 = kirovBase [ i ] [ 7 ] ;
2369: LD_ADDR_OWVAR 44
2373: PUSH
2374: LD_EXP 66
2378: PUSH
2379: LD_VAR 0 2
2383: ARRAY
2384: PUSH
2385: LD_INT 7
2387: ARRAY
2388: ST_TO_ADDR
// if kirovBase [ i ] [ 8 ] then
2389: LD_EXP 66
2393: PUSH
2394: LD_VAR 0 2
2398: ARRAY
2399: PUSH
2400: LD_INT 8
2402: ARRAY
2403: IFFALSE 2425
// bc_kind2 = kirovBase [ i ] [ 8 ] ;
2405: LD_ADDR_OWVAR 45
2409: PUSH
2410: LD_EXP 66
2414: PUSH
2415: LD_VAR 0 2
2419: ARRAY
2420: PUSH
2421: LD_INT 8
2423: ARRAY
2424: ST_TO_ADDR
// if not kirovBase [ i ] [ 7 ] and not kirovBase [ i ] [ 8 ] then
2425: LD_EXP 66
2429: PUSH
2430: LD_VAR 0 2
2434: ARRAY
2435: PUSH
2436: LD_INT 7
2438: ARRAY
2439: NOT
2440: PUSH
2441: LD_EXP 66
2445: PUSH
2446: LD_VAR 0 2
2450: ARRAY
2451: PUSH
2452: LD_INT 8
2454: ARRAY
2455: NOT
2456: AND
2457: IFFALSE 2467
// bc_type := b_lab ;
2459: LD_ADDR_OWVAR 42
2463: PUSH
2464: LD_INT 6
2466: ST_TO_ADDR
// end ; if bc_type = b_breastwork then
2467: LD_OWVAR 42
2471: PUSH
2472: LD_INT 31
2474: EQUAL
2475: IFFALSE 2499
// begin bc_type = b_bunker ;
2477: LD_ADDR_OWVAR 42
2481: PUSH
2482: LD_INT 32
2484: ST_TO_ADDR
// kirovBunkerCounter = kirovBunkerCounter + 1 ;
2485: LD_ADDR_EXP 77
2489: PUSH
2490: LD_EXP 77
2494: PUSH
2495: LD_INT 1
2497: PLUS
2498: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 2 ] , kirovBase [ i ] [ 3 ] , kirovBase [ i ] [ 4 ] ) ;
2499: LD_ADDR_VAR 0 4
2503: PUSH
2504: LD_EXP 66
2508: PUSH
2509: LD_VAR 0 2
2513: ARRAY
2514: PUSH
2515: LD_INT 2
2517: ARRAY
2518: PPUSH
2519: LD_EXP 66
2523: PUSH
2524: LD_VAR 0 2
2528: ARRAY
2529: PUSH
2530: LD_INT 3
2532: ARRAY
2533: PPUSH
2534: LD_EXP 66
2538: PUSH
2539: LD_VAR 0 2
2543: ARRAY
2544: PUSH
2545: LD_INT 4
2547: ARRAY
2548: PPUSH
2549: CALL_OW 47
2553: ST_TO_ADDR
// if tmp < 4 and bc_type = b_bunker then
2554: LD_VAR 0 3
2558: PUSH
2559: LD_INT 4
2561: LESS
2562: PUSH
2563: LD_OWVAR 42
2567: PUSH
2568: LD_INT 32
2570: EQUAL
2571: AND
2572: IFFALSE 2621
// begin PlaceWeaponTurret ( building , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
2574: LD_VAR 0 4
2578: PPUSH
2579: LD_INT 42
2581: PUSH
2582: LD_INT 43
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PUSH
2589: LD_INT 1
2591: PPUSH
2592: LD_INT 2
2594: PPUSH
2595: CALL_OW 12
2599: ARRAY
2600: PPUSH
2601: CALL_OW 431
// tmp = tmp + 1 ;
2605: LD_ADDR_VAR 0 3
2609: PUSH
2610: LD_VAR 0 3
2614: PUSH
2615: LD_INT 1
2617: PLUS
2618: ST_TO_ADDR
// end else
2619: GO 2647
// if bc_type = b_bunker then
2621: LD_OWVAR 42
2625: PUSH
2626: LD_INT 32
2628: EQUAL
2629: IFFALSE 2647
// kirovBunkersToMountWeapon = kirovBunkersToMountWeapon ^ building ;
2631: LD_ADDR_EXP 72
2635: PUSH
2636: LD_EXP 72
2640: PUSH
2641: LD_VAR 0 4
2645: ADD
2646: ST_TO_ADDR
// end ;
2647: GO 2210
2649: POP
2650: POP
// kirovDepot = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
2651: LD_ADDR_EXP 67
2655: PUSH
2656: LD_INT 22
2658: PUSH
2659: LD_INT 6
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PUSH
2666: LD_INT 30
2668: PUSH
2669: LD_INT 1
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: PPUSH
2680: CALL_OW 69
2684: PUSH
2685: LD_INT 1
2687: ARRAY
2688: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
2689: LD_EXP 67
2693: PPUSH
2694: LD_STRING kirov
2696: PPUSH
2697: CALL_OW 500
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 5000 ) ;
2701: LD_EXP 67
2705: PPUSH
2706: CALL_OW 274
2710: PPUSH
2711: LD_INT 1
2713: PPUSH
2714: LD_INT 5000
2716: PPUSH
2717: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 2000 ) ;
2721: LD_EXP 67
2725: PPUSH
2726: CALL_OW 274
2730: PPUSH
2731: LD_INT 2
2733: PPUSH
2734: LD_INT 2000
2736: PPUSH
2737: CALL_OW 277
// ru2_bar1 = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) , 145 , 102 ) ;
2741: LD_ADDR_EXP 69
2745: PUSH
2746: LD_INT 22
2748: PUSH
2749: LD_INT 6
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: PUSH
2756: LD_INT 21
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: EMPTY
2763: LIST
2764: LIST
2765: PUSH
2766: LD_INT 30
2768: PUSH
2769: LD_INT 5
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 69
2785: PPUSH
2786: LD_INT 145
2788: PPUSH
2789: LD_INT 102
2791: PPUSH
2792: CALL_OW 73
2796: ST_TO_ADDR
// ru2_bar2 = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) diff ru2_bar1 ;
2797: LD_ADDR_EXP 70
2801: PUSH
2802: LD_INT 22
2804: PUSH
2805: LD_INT 6
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: PUSH
2812: LD_INT 21
2814: PUSH
2815: LD_INT 3
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 30
2824: PUSH
2825: LD_INT 5
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: LIST
2836: PPUSH
2837: CALL_OW 69
2841: PUSH
2842: LD_EXP 69
2846: DIFF
2847: ST_TO_ADDR
// ru2_bar2 = ru2_bar2 [ 1 ] ;
2848: LD_ADDR_EXP 70
2852: PUSH
2853: LD_EXP 70
2857: PUSH
2858: LD_INT 1
2860: ARRAY
2861: ST_TO_ADDR
// end ;
2862: LD_VAR 0 1
2866: RET
// export function PrepareKirovPersonel ; var i ; begin
2867: LD_INT 0
2869: PPUSH
2870: PPUSH
// PrepareEngineer ( false , 7 ) ;
2871: LD_INT 0
2873: PPUSH
2874: LD_INT 7
2876: PPUSH
2877: CALL_OW 382
// kirovEng = CreateHuman ;
2881: LD_ADDR_EXP 71
2885: PUSH
2886: CALL_OW 44
2890: ST_TO_ADDR
// PlaceUnitXYR ( kirovEng , 159 , 107 , 10 , false ) ;
2891: LD_EXP 71
2895: PPUSH
2896: LD_INT 159
2898: PPUSH
2899: LD_INT 107
2901: PPUSH
2902: LD_INT 10
2904: PPUSH
2905: LD_INT 0
2907: PPUSH
2908: CALL_OW 50
// Popov = PrepareUnitExt ( Popov , false ) ;
2912: LD_ADDR_EXP 62
2916: PUSH
2917: LD_STRING Popov
2919: PPUSH
2920: LD_INT 0
2922: PPUSH
2923: CALL 6932 0 2
2927: ST_TO_ADDR
// PlaceUnitArea ( Popov , PopovSpawnArea , false ) ;
2928: LD_EXP 62
2932: PPUSH
2933: LD_INT 4
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: CALL_OW 49
// ComTurnXY ( Popov , 98 , 36 ) ;
2943: LD_EXP 62
2947: PPUSH
2948: LD_INT 98
2950: PPUSH
2951: LD_INT 36
2953: PPUSH
2954: CALL_OW 118
// hc_name :=  ;
2958: LD_ADDR_OWVAR 26
2962: PUSH
2963: LD_STRING 
2965: ST_TO_ADDR
// hc_gallery :=  ;
2966: LD_ADDR_OWVAR 33
2970: PUSH
2971: LD_STRING 
2973: ST_TO_ADDR
// PrepareSoldier ( false , 2 ) ;
2974: LD_INT 0
2976: PPUSH
2977: LD_INT 2
2979: PPUSH
2980: CALL_OW 381
// ruScout = CreateHuman ;
2984: LD_ADDR_EXP 64
2988: PUSH
2989: CALL_OW 44
2993: ST_TO_ADDR
// PlaceUnitArea ( ruScout , RuScoutSpawnArea , false ) ;
2994: LD_EXP 64
2998: PPUSH
2999: LD_INT 3
3001: PPUSH
3002: LD_INT 0
3004: PPUSH
3005: CALL_OW 49
// ComCrawl ( ruScout ) ;
3009: LD_EXP 64
3013: PPUSH
3014: CALL_OW 137
// AddComTurnXY ( ruScout , 98 , 36 ) ;
3018: LD_EXP 64
3022: PPUSH
3023: LD_INT 98
3025: PPUSH
3026: LD_INT 36
3028: PPUSH
3029: CALL_OW 178
// uc_side = 6 ;
3033: LD_ADDR_OWVAR 20
3037: PUSH
3038: LD_INT 6
3040: ST_TO_ADDR
// for i in otherKirovUnits do
3041: LD_ADDR_VAR 0 2
3045: PUSH
3046: LD_EXP 65
3050: PUSH
3051: FOR_IN
3052: IFFALSE 3188
// begin SetSide ( i , 6 ) ;
3054: LD_VAR 0 2
3058: PPUSH
3059: LD_INT 6
3061: PPUSH
3062: CALL_OW 235
// if GetClass ( i ) = class_soldier and kirovBunkerCounter > 0 then
3066: LD_VAR 0 2
3070: PPUSH
3071: CALL_OW 257
3075: PUSH
3076: LD_INT 1
3078: EQUAL
3079: PUSH
3080: LD_EXP 77
3084: PUSH
3085: LD_INT 0
3087: GREATER
3088: AND
3089: IFFALSE 3165
// begin PlaceHumanInBunker ( i , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ kirovBunkerCounter ] ) ;
3091: LD_VAR 0 2
3095: PPUSH
3096: LD_INT 18
3098: PPUSH
3099: LD_INT 22
3101: PUSH
3102: LD_INT 6
3104: PUSH
3105: EMPTY
3106: LIST
3107: LIST
3108: PUSH
3109: LD_INT 21
3111: PUSH
3112: LD_INT 3
3114: PUSH
3115: EMPTY
3116: LIST
3117: LIST
3118: PUSH
3119: LD_INT 30
3121: PUSH
3122: LD_INT 32
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: LIST
3133: PPUSH
3134: CALL_OW 70
3138: PUSH
3139: LD_EXP 77
3143: ARRAY
3144: PPUSH
3145: CALL 8476 0 2
// kirovBunkerCounter = kirovBunkerCounter - 1 ;
3149: LD_ADDR_EXP 77
3153: PUSH
3154: LD_EXP 77
3158: PUSH
3159: LD_INT 1
3161: MINUS
3162: ST_TO_ADDR
// end else
3163: GO 3186
// begin PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
3165: LD_VAR 0 2
3169: PPUSH
3170: LD_INT 159
3172: PPUSH
3173: LD_INT 107
3175: PPUSH
3176: LD_INT 10
3178: PPUSH
3179: LD_INT 0
3181: PPUSH
3182: CALL_OW 50
// end ; end ;
3186: GO 3051
3188: POP
3189: POP
// end ;
3190: LD_VAR 0 1
3194: RET
// export function PrepareGrishko ; var i , un , turret ; begin
3195: LD_INT 0
3197: PPUSH
3198: PPUSH
3199: PPUSH
3200: PPUSH
// uc_side = 6 ;
3201: LD_ADDR_OWVAR 20
3205: PUSH
3206: LD_INT 6
3208: ST_TO_ADDR
// uc_nation = 3 ;
3209: LD_ADDR_OWVAR 21
3213: PUSH
3214: LD_INT 3
3216: ST_TO_ADDR
// Grishko = PrepareUnitExt ( Grishko , false ) ;
3217: LD_ADDR_EXP 82
3221: PUSH
3222: LD_STRING Grishko
3224: PPUSH
3225: LD_INT 0
3227: PPUSH
3228: CALL 6932 0 2
3232: ST_TO_ADDR
// PlaceUnitXYR ( Grishko , 218 , 108 , 3 , false ) ;
3233: LD_EXP 82
3237: PPUSH
3238: LD_INT 218
3240: PPUSH
3241: LD_INT 108
3243: PPUSH
3244: LD_INT 3
3246: PPUSH
3247: LD_INT 0
3249: PPUSH
3250: CALL_OW 50
// ComHold ( Grishko ) ;
3254: LD_EXP 82
3258: PPUSH
3259: CALL_OW 140
// end ;
3263: LD_VAR 0 1
3267: RET
// export function PrepareVehicles ; var i , vehicle ; begin
3268: LD_INT 0
3270: PPUSH
3271: PPUSH
3272: PPUSH
// uc_side = 3 ;
3273: LD_ADDR_OWVAR 20
3277: PUSH
3278: LD_INT 3
3280: ST_TO_ADDR
// uc_nation = 3 ;
3281: LD_ADDR_OWVAR 21
3285: PUSH
3286: LD_INT 3
3288: ST_TO_ADDR
// for i := 1 to vehiclesPreviousMission do
3289: LD_ADDR_VAR 0 2
3293: PUSH
3294: DOUBLE
3295: LD_INT 1
3297: DEC
3298: ST_TO_ADDR
3299: LD_EXP 4
3303: PUSH
3304: FOR_TO
3305: IFFALSE 3457
// begin PrepareVehicle ( vehiclesPreviousMission [ i ] [ 1 ] , vehiclesPreviousMission [ i ] [ 2 ] , vehiclesPreviousMission [ i ] [ 3 ] , vehiclesPreviousMission [ i ] [ 4 ] , vehiclesPreviousMission [ i ] [ 5 ] ) ;
3307: LD_EXP 4
3311: PUSH
3312: LD_VAR 0 2
3316: ARRAY
3317: PUSH
3318: LD_INT 1
3320: ARRAY
3321: PPUSH
3322: LD_EXP 4
3326: PUSH
3327: LD_VAR 0 2
3331: ARRAY
3332: PUSH
3333: LD_INT 2
3335: ARRAY
3336: PPUSH
3337: LD_EXP 4
3341: PUSH
3342: LD_VAR 0 2
3346: ARRAY
3347: PUSH
3348: LD_INT 3
3350: ARRAY
3351: PPUSH
3352: LD_EXP 4
3356: PUSH
3357: LD_VAR 0 2
3361: ARRAY
3362: PUSH
3363: LD_INT 4
3365: ARRAY
3366: PPUSH
3367: LD_EXP 4
3371: PUSH
3372: LD_VAR 0 2
3376: ARRAY
3377: PUSH
3378: LD_INT 5
3380: ARRAY
3381: PPUSH
3382: CALL 36433 0 5
// vehicle = CreateVehicle ;
3386: LD_ADDR_VAR 0 3
3390: PUSH
3391: CALL_OW 45
3395: ST_TO_ADDR
// SetDir ( vehicle , rand ( 0 , 5 ) ) ;
3396: LD_VAR 0 3
3400: PPUSH
3401: LD_INT 0
3403: PPUSH
3404: LD_INT 5
3406: PPUSH
3407: CALL_OW 12
3411: PPUSH
3412: CALL_OW 233
// PlaceUnitArea ( vehicle , BeriaBaseArea , false ) ;
3416: LD_VAR 0 3
3420: PPUSH
3421: LD_INT 25
3423: PPUSH
3424: LD_INT 0
3426: PPUSH
3427: CALL_OW 49
// SetLives ( vehicle , vehiclesPreviousMission [ i ] [ 6 ] ) ;
3431: LD_VAR 0 3
3435: PPUSH
3436: LD_EXP 4
3440: PUSH
3441: LD_VAR 0 2
3445: ARRAY
3446: PUSH
3447: LD_INT 6
3449: ARRAY
3450: PPUSH
3451: CALL_OW 234
// end ;
3455: GO 3304
3457: POP
3458: POP
// end ;
3459: LD_VAR 0 1
3463: RET
// export function PrepareOtherBuildings ; var i , otherBuildings , building ; begin
3464: LD_INT 0
3466: PPUSH
3467: PPUSH
3468: PPUSH
3469: PPUSH
// otherBuildings = LoadVariable ( 02_OtherBuildings_4 , [ ] ) ;
3470: LD_ADDR_VAR 0 3
3474: PUSH
3475: LD_STRING 02_OtherBuildings_4
3477: PPUSH
3478: EMPTY
3479: PPUSH
3480: CALL_OW 30
3484: ST_TO_ADDR
// uc_side = 3 ;
3485: LD_ADDR_OWVAR 20
3489: PUSH
3490: LD_INT 3
3492: ST_TO_ADDR
// for i := 1 to otherBuildings do
3493: LD_ADDR_VAR 0 2
3497: PUSH
3498: DOUBLE
3499: LD_INT 1
3501: DEC
3502: ST_TO_ADDR
3503: LD_VAR 0 3
3507: PUSH
3508: FOR_TO
3509: IFFALSE 3770
// begin uc_nation = otherBuildings [ i ] [ 6 ] ;
3511: LD_ADDR_OWVAR 21
3515: PUSH
3516: LD_VAR 0 3
3520: PUSH
3521: LD_VAR 0 2
3525: ARRAY
3526: PUSH
3527: LD_INT 6
3529: ARRAY
3530: ST_TO_ADDR
// bc_type = otherBuildings [ i ] [ 1 ] ;
3531: LD_ADDR_OWVAR 42
3535: PUSH
3536: LD_VAR 0 3
3540: PUSH
3541: LD_VAR 0 2
3545: ARRAY
3546: PUSH
3547: LD_INT 1
3549: ARRAY
3550: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3551: LD_ADDR_OWVAR 43
3555: PUSH
3556: LD_VAR 0 3
3560: PUSH
3561: LD_VAR 0 2
3565: ARRAY
3566: PUSH
3567: LD_INT 5
3569: ARRAY
3570: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3571: LD_ADDR_VAR 0 4
3575: PUSH
3576: LD_VAR 0 3
3580: PUSH
3581: LD_VAR 0 2
3585: ARRAY
3586: PUSH
3587: LD_INT 2
3589: ARRAY
3590: PPUSH
3591: LD_VAR 0 3
3595: PUSH
3596: LD_VAR 0 2
3600: ARRAY
3601: PUSH
3602: LD_INT 3
3604: ARRAY
3605: PPUSH
3606: LD_VAR 0 3
3610: PUSH
3611: LD_VAR 0 2
3615: ARRAY
3616: PUSH
3617: LD_INT 4
3619: ARRAY
3620: PPUSH
3621: CALL_OW 47
3625: ST_TO_ADDR
// SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3626: LD_VAR 0 4
3630: PPUSH
3631: LD_VAR 0 3
3635: PUSH
3636: LD_VAR 0 2
3640: ARRAY
3641: PUSH
3642: LD_INT 7
3644: ARRAY
3645: PPUSH
3646: CALL_OW 234
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
3650: LD_VAR 0 4
3654: PPUSH
3655: CALL_OW 266
3659: PUSH
3660: LD_INT 0
3662: PUSH
3663: LD_INT 1
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: IN
3670: IFFALSE 3768
// begin SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 8 ] ) ;
3672: LD_VAR 0 4
3676: PPUSH
3677: CALL_OW 274
3681: PPUSH
3682: LD_INT 1
3684: PPUSH
3685: LD_VAR 0 3
3689: PUSH
3690: LD_VAR 0 2
3694: ARRAY
3695: PUSH
3696: LD_INT 8
3698: ARRAY
3699: PPUSH
3700: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 9 ] ) ;
3704: LD_VAR 0 4
3708: PPUSH
3709: CALL_OW 274
3713: PPUSH
3714: LD_INT 1
3716: PPUSH
3717: LD_VAR 0 3
3721: PUSH
3722: LD_VAR 0 2
3726: ARRAY
3727: PUSH
3728: LD_INT 9
3730: ARRAY
3731: PPUSH
3732: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 10 ] ) ;
3736: LD_VAR 0 4
3740: PPUSH
3741: CALL_OW 274
3745: PPUSH
3746: LD_INT 1
3748: PPUSH
3749: LD_VAR 0 3
3753: PUSH
3754: LD_VAR 0 2
3758: ARRAY
3759: PUSH
3760: LD_INT 10
3762: ARRAY
3763: PPUSH
3764: CALL_OW 277
// end ; end ;
3768: GO 3508
3770: POP
3771: POP
// otherBuildings = LoadVariable ( 02_AmericanBuildings_5 , [ ] ) ;
3772: LD_ADDR_VAR 0 3
3776: PUSH
3777: LD_STRING 02_AmericanBuildings_5
3779: PPUSH
3780: EMPTY
3781: PPUSH
3782: CALL_OW 30
3786: ST_TO_ADDR
// uc_side = 1 ;
3787: LD_ADDR_OWVAR 20
3791: PUSH
3792: LD_INT 1
3794: ST_TO_ADDR
// uc_nation = 1 ;
3795: LD_ADDR_OWVAR 21
3799: PUSH
3800: LD_INT 1
3802: ST_TO_ADDR
// for i := 1 to otherBuildings do
3803: LD_ADDR_VAR 0 2
3807: PUSH
3808: DOUBLE
3809: LD_INT 1
3811: DEC
3812: ST_TO_ADDR
3813: LD_VAR 0 3
3817: PUSH
3818: FOR_TO
3819: IFFALSE 4023
// begin bc_type = otherBuildings [ i ] [ 1 ] ;
3821: LD_ADDR_OWVAR 42
3825: PUSH
3826: LD_VAR 0 3
3830: PUSH
3831: LD_VAR 0 2
3835: ARRAY
3836: PUSH
3837: LD_INT 1
3839: ARRAY
3840: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3841: LD_ADDR_OWVAR 43
3845: PUSH
3846: LD_VAR 0 3
3850: PUSH
3851: LD_VAR 0 2
3855: ARRAY
3856: PUSH
3857: LD_INT 5
3859: ARRAY
3860: ST_TO_ADDR
// if bc_type = b_breastwork then
3861: LD_OWVAR 42
3865: PUSH
3866: LD_INT 31
3868: EQUAL
3869: IFFALSE 3942
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3871: LD_ADDR_VAR 0 4
3875: PUSH
3876: LD_VAR 0 3
3880: PUSH
3881: LD_VAR 0 2
3885: ARRAY
3886: PUSH
3887: LD_INT 2
3889: ARRAY
3890: PPUSH
3891: LD_VAR 0 3
3895: PUSH
3896: LD_VAR 0 2
3900: ARRAY
3901: PUSH
3902: LD_INT 3
3904: ARRAY
3905: PPUSH
3906: LD_VAR 0 3
3910: PUSH
3911: LD_VAR 0 2
3915: ARRAY
3916: PUSH
3917: LD_INT 4
3919: ARRAY
3920: PPUSH
3921: CALL_OW 47
3925: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , building ) ;
3926: LD_EXP 43
3930: PPUSH
3931: LD_VAR 0 4
3935: PPUSH
3936: CALL 8566 0 2
// end else
3940: GO 3997
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3942: LD_ADDR_VAR 0 4
3946: PUSH
3947: LD_VAR 0 3
3951: PUSH
3952: LD_VAR 0 2
3956: ARRAY
3957: PUSH
3958: LD_INT 2
3960: ARRAY
3961: PPUSH
3962: LD_VAR 0 3
3966: PUSH
3967: LD_VAR 0 2
3971: ARRAY
3972: PUSH
3973: LD_INT 3
3975: ARRAY
3976: PPUSH
3977: LD_VAR 0 3
3981: PUSH
3982: LD_VAR 0 2
3986: ARRAY
3987: PUSH
3988: LD_INT 4
3990: ARRAY
3991: PPUSH
3992: CALL_OW 47
3996: ST_TO_ADDR
// end ; SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3997: LD_VAR 0 4
4001: PPUSH
4002: LD_VAR 0 3
4006: PUSH
4007: LD_VAR 0 2
4011: ARRAY
4012: PUSH
4013: LD_INT 7
4015: ARRAY
4016: PPUSH
4017: CALL_OW 234
// end ;
4021: GO 3818
4023: POP
4024: POP
// end ;
4025: LD_VAR 0 1
4029: RET
// export function PrepareSecondBaseTeam ; var i ; begin
4030: LD_INT 0
4032: PPUSH
4033: PPUSH
// secondBaseTeam = [ ] ;
4034: LD_ADDR_EXP 78
4038: PUSH
4039: EMPTY
4040: ST_TO_ADDR
// SetResourceVisibility ( 226 , 109 , 6 ) ;
4041: LD_INT 226
4043: PPUSH
4044: LD_INT 109
4046: PPUSH
4047: LD_INT 6
4049: PPUSH
4050: CALL_OW 441
// uc_side = 6 ;
4054: LD_ADDR_OWVAR 20
4058: PUSH
4059: LD_INT 6
4061: ST_TO_ADDR
// uc_nation = 3 ;
4062: LD_ADDR_OWVAR 21
4066: PUSH
4067: LD_INT 3
4069: ST_TO_ADDR
// hc_name =  ;
4070: LD_ADDR_OWVAR 26
4074: PUSH
4075: LD_STRING 
4077: ST_TO_ADDR
// hc_gallery =  ;
4078: LD_ADDR_OWVAR 33
4082: PUSH
4083: LD_STRING 
4085: ST_TO_ADDR
// for i := 1 to 3 do
4086: LD_ADDR_VAR 0 2
4090: PUSH
4091: DOUBLE
4092: LD_INT 1
4094: DEC
4095: ST_TO_ADDR
4096: LD_INT 3
4098: PUSH
4099: FOR_TO
4100: IFFALSE 4153
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4102: LD_INT 0
4104: PPUSH
4105: LD_EXP 43
4109: PPUSH
4110: CALL_OW 381
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4114: LD_ADDR_EXP 78
4118: PUSH
4119: LD_EXP 78
4123: PUSH
4124: CALL_OW 44
4128: ADD
4129: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ i ] , KirovSupportSpawnArea , false ) ;
4130: LD_EXP 78
4134: PUSH
4135: LD_VAR 0 2
4139: ARRAY
4140: PPUSH
4141: LD_INT 19
4143: PPUSH
4144: LD_INT 0
4146: PPUSH
4147: CALL_OW 49
// end ;
4151: GO 4099
4153: POP
4154: POP
// PrepareEngineer ( false , enemySkillLevel ) ;
4155: LD_INT 0
4157: PPUSH
4158: LD_EXP 43
4162: PPUSH
4163: CALL_OW 382
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4167: LD_ADDR_EXP 78
4171: PUSH
4172: LD_EXP 78
4176: PUSH
4177: CALL_OW 44
4181: ADD
4182: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 4 ] , KirovSupportSpawnArea , false ) ;
4183: LD_EXP 78
4187: PUSH
4188: LD_INT 4
4190: ARRAY
4191: PPUSH
4192: LD_INT 19
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 49
// PrepareScientist ( false , enemySkillLevel ) ;
4202: LD_INT 0
4204: PPUSH
4205: LD_EXP 43
4209: PPUSH
4210: CALL_OW 384
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4214: LD_ADDR_EXP 78
4218: PUSH
4219: LD_EXP 78
4223: PUSH
4224: CALL_OW 44
4228: ADD
4229: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 5 ] , KirovSupportSpawnArea , false ) ;
4230: LD_EXP 78
4234: PUSH
4235: LD_INT 5
4237: ARRAY
4238: PPUSH
4239: LD_INT 19
4241: PPUSH
4242: LD_INT 0
4244: PPUSH
4245: CALL_OW 49
// ComMoveXY ( secondBaseTeam , 214 , 105 ) ;
4249: LD_EXP 78
4253: PPUSH
4254: LD_INT 214
4256: PPUSH
4257: LD_INT 105
4259: PPUSH
4260: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 222 , 115 , 0 ) ;
4264: LD_EXP 78
4268: PPUSH
4269: LD_INT 25
4271: PUSH
4272: LD_INT 2
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: PPUSH
4279: CALL_OW 72
4283: PPUSH
4284: LD_INT 0
4286: PPUSH
4287: LD_INT 222
4289: PPUSH
4290: LD_INT 115
4292: PPUSH
4293: LD_INT 0
4295: PPUSH
4296: CALL_OW 205
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 224 , 107 ) ;
4300: LD_EXP 78
4304: PPUSH
4305: LD_INT 25
4307: PUSH
4308: LD_INT 2
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PPUSH
4315: CALL_OW 72
4319: PPUSH
4320: LD_INT 224
4322: PPUSH
4323: LD_INT 107
4325: PPUSH
4326: CALL_OW 177
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 228 , 110 ) ;
4330: LD_EXP 78
4334: PPUSH
4335: LD_INT 25
4337: PUSH
4338: LD_INT 2
4340: PUSH
4341: EMPTY
4342: LIST
4343: LIST
4344: PPUSH
4345: CALL_OW 72
4349: PPUSH
4350: LD_INT 228
4352: PPUSH
4353: LD_INT 110
4355: PPUSH
4356: CALL_OW 177
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_oil_mine , 226 , 109 , 3 ) ;
4360: LD_EXP 78
4364: PPUSH
4365: LD_INT 25
4367: PUSH
4368: LD_INT 2
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PPUSH
4375: CALL_OW 72
4379: PPUSH
4380: LD_INT 29
4382: PPUSH
4383: LD_INT 226
4385: PPUSH
4386: LD_INT 109
4388: PPUSH
4389: LD_INT 3
4391: PPUSH
4392: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_armoury , 216 , 114 , 0 ) ;
4396: LD_EXP 78
4400: PPUSH
4401: LD_INT 25
4403: PUSH
4404: LD_INT 2
4406: PUSH
4407: EMPTY
4408: LIST
4409: LIST
4410: PPUSH
4411: CALL_OW 72
4415: PPUSH
4416: LD_INT 4
4418: PPUSH
4419: LD_INT 216
4421: PPUSH
4422: LD_INT 114
4424: PPUSH
4425: LD_INT 0
4427: PPUSH
4428: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 215 , 103 , 3 ) ;
4432: LD_EXP 78
4436: PPUSH
4437: LD_INT 25
4439: PUSH
4440: LD_INT 2
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: PPUSH
4447: CALL_OW 72
4451: PPUSH
4452: LD_INT 31
4454: PPUSH
4455: LD_INT 215
4457: PPUSH
4458: LD_INT 103
4460: PPUSH
4461: LD_INT 3
4463: PPUSH
4464: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 227 , 116 , 5 ) ;
4468: LD_EXP 78
4472: PPUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 2
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PPUSH
4483: CALL_OW 72
4487: PPUSH
4488: LD_INT 31
4490: PPUSH
4491: LD_INT 227
4493: PPUSH
4494: LD_INT 116
4496: PPUSH
4497: LD_INT 5
4499: PPUSH
4500: CALL_OW 205
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 208 , 106 ) ;
4504: LD_EXP 78
4508: PPUSH
4509: LD_INT 25
4511: PUSH
4512: LD_INT 2
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PPUSH
4519: CALL_OW 72
4523: PPUSH
4524: LD_INT 208
4526: PPUSH
4527: LD_INT 106
4529: PPUSH
4530: CALL_OW 171
// AddComTurnXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 209 , 105 ) ;
4534: LD_EXP 78
4538: PPUSH
4539: LD_INT 25
4541: PUSH
4542: LD_INT 2
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: PPUSH
4549: CALL_OW 72
4553: PPUSH
4554: LD_INT 209
4556: PPUSH
4557: LD_INT 105
4559: PPUSH
4560: CALL_OW 178
// AddComMoveXY ( secondBaseTeam [ 5 ] , 209 , 105 ) ;
4564: LD_EXP 78
4568: PUSH
4569: LD_INT 5
4571: ARRAY
4572: PPUSH
4573: LD_INT 209
4575: PPUSH
4576: LD_INT 105
4578: PPUSH
4579: CALL_OW 171
// AddComTurnXY ( secondBaseTeam [ 5 ] , 208 , 106 ) ;
4583: LD_EXP 78
4587: PUSH
4588: LD_INT 5
4590: ARRAY
4591: PPUSH
4592: LD_INT 208
4594: PPUSH
4595: LD_INT 106
4597: PPUSH
4598: CALL_OW 178
// end ;
4602: LD_VAR 0 1
4606: RET
// export function SpawnKirovSupport ; var i , un ; begin
4607: LD_INT 0
4609: PPUSH
4610: PPUSH
4611: PPUSH
// uc_side = 6 ;
4612: LD_ADDR_OWVAR 20
4616: PUSH
4617: LD_INT 6
4619: ST_TO_ADDR
// uc_nation = 3 ;
4620: LD_ADDR_OWVAR 21
4624: PUSH
4625: LD_INT 3
4627: ST_TO_ADDR
// hc_name =  ;
4628: LD_ADDR_OWVAR 26
4632: PUSH
4633: LD_STRING 
4635: ST_TO_ADDR
// hc_gallery :=  ;
4636: LD_ADDR_OWVAR 33
4640: PUSH
4641: LD_STRING 
4643: ST_TO_ADDR
// for i := 1 to survivorsToSpawn do
4644: LD_ADDR_VAR 0 2
4648: PUSH
4649: DOUBLE
4650: LD_INT 1
4652: DEC
4653: ST_TO_ADDR
4654: LD_EXP 80
4658: PUSH
4659: FOR_TO
4660: IFFALSE 4748
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 2 ) ) ;
4662: LD_INT 0
4664: PPUSH
4665: LD_INT 1
4667: PPUSH
4668: LD_INT 4
4670: PPUSH
4671: CALL_OW 12
4675: PPUSH
4676: LD_INT 1
4678: PPUSH
4679: LD_INT 2
4681: PPUSH
4682: CALL_OW 12
4686: PPUSH
4687: CALL_OW 380
// un = CreateHuman ;
4691: LD_ADDR_VAR 0 3
4695: PUSH
4696: CALL_OW 44
4700: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ un ;
4701: LD_ADDR_EXP 79
4705: PUSH
4706: LD_EXP 79
4710: PUSH
4711: LD_VAR 0 3
4715: ADD
4716: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4717: LD_VAR 0 3
4721: PPUSH
4722: LD_INT 19
4724: PPUSH
4725: LD_INT 0
4727: PPUSH
4728: CALL_OW 49
// ComEnterUnit ( un , kirovDepot ) ;
4732: LD_VAR 0 3
4736: PPUSH
4737: LD_EXP 67
4741: PPUSH
4742: CALL_OW 120
// end ;
4746: GO 4659
4748: POP
4749: POP
// for i := 1 to neededUnitsSpawn [ 1 ] + 4 do
4750: LD_ADDR_VAR 0 2
4754: PUSH
4755: DOUBLE
4756: LD_INT 1
4758: DEC
4759: ST_TO_ADDR
4760: LD_EXP 81
4764: PUSH
4765: LD_INT 1
4767: ARRAY
4768: PUSH
4769: LD_INT 4
4771: PLUS
4772: PUSH
4773: FOR_TO
4774: IFFALSE 4872
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
4776: LD_INT 0
4778: PPUSH
4779: LD_INT 1
4781: PPUSH
4782: LD_INT 1
4784: PPUSH
4785: LD_INT 3
4787: PPUSH
4788: CALL_OW 12
4792: PPUSH
4793: CALL_OW 380
// un = CreateHuman ;
4797: LD_ADDR_VAR 0 3
4801: PUSH
4802: CALL_OW 44
4806: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4807: LD_VAR 0 3
4811: PPUSH
4812: LD_INT 19
4814: PPUSH
4815: LD_INT 0
4817: PPUSH
4818: CALL_OW 49
// if i > kirovBunkersToOccupy then
4822: LD_VAR 0 2
4826: PUSH
4827: LD_EXP 73
4831: GREATER
4832: IFFALSE 4850
// ComEnterUnit ( un , ru2_bar2 ) else
4834: LD_VAR 0 3
4838: PPUSH
4839: LD_EXP 70
4843: PPUSH
4844: CALL_OW 120
4848: GO 4870
// ComEnterUnit ( un , kirovBunkersToOccupy [ i ] ) ;
4850: LD_VAR 0 3
4854: PPUSH
4855: LD_EXP 73
4859: PUSH
4860: LD_VAR 0 2
4864: ARRAY
4865: PPUSH
4866: CALL_OW 120
// end ;
4870: GO 4773
4872: POP
4873: POP
// for i := 1 to neededUnitsSpawn [ 3 ] do
4874: LD_ADDR_VAR 0 2
4878: PUSH
4879: DOUBLE
4880: LD_INT 1
4882: DEC
4883: ST_TO_ADDR
4884: LD_EXP 81
4888: PUSH
4889: LD_INT 3
4891: ARRAY
4892: PUSH
4893: FOR_TO
4894: IFFALSE 4997
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
4896: LD_INT 0
4898: PPUSH
4899: LD_INT 3
4901: PPUSH
4902: LD_INT 1
4904: PPUSH
4905: LD_INT 3
4907: PPUSH
4908: CALL_OW 12
4912: PPUSH
4913: CALL_OW 380
// un = CreateHuman ;
4917: LD_ADDR_VAR 0 3
4921: PUSH
4922: CALL_OW 44
4926: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4927: LD_VAR 0 3
4931: PPUSH
4932: LD_INT 19
4934: PPUSH
4935: LD_INT 0
4937: PPUSH
4938: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
4942: LD_VAR 0 3
4946: PPUSH
4947: LD_INT 22
4949: PUSH
4950: LD_INT 6
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: PUSH
4957: LD_INT 21
4959: PUSH
4960: LD_INT 3
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: PUSH
4967: LD_INT 30
4969: PUSH
4970: LD_INT 3
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: LIST
4981: PPUSH
4982: CALL_OW 69
4986: PUSH
4987: LD_INT 1
4989: ARRAY
4990: PPUSH
4991: CALL_OW 120
// end ;
4995: GO 4893
4997: POP
4998: POP
// for i := 1 to neededUnitsSpawn [ 4 ] + 2 do
4999: LD_ADDR_VAR 0 2
5003: PUSH
5004: DOUBLE
5005: LD_INT 1
5007: DEC
5008: ST_TO_ADDR
5009: LD_EXP 81
5013: PUSH
5014: LD_INT 4
5016: ARRAY
5017: PUSH
5018: LD_INT 2
5020: PLUS
5021: PUSH
5022: FOR_TO
5023: IFFALSE 5129
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
5025: LD_INT 0
5027: PPUSH
5028: LD_INT 4
5030: PPUSH
5031: LD_INT 1
5033: PPUSH
5034: LD_INT 3
5036: PPUSH
5037: CALL_OW 12
5041: PPUSH
5042: CALL_OW 380
// un = CreateHuman ;
5046: LD_ADDR_VAR 0 3
5050: PUSH
5051: CALL_OW 44
5055: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
5056: LD_VAR 0 3
5060: PPUSH
5061: LD_INT 19
5063: PPUSH
5064: LD_INT 0
5066: PPUSH
5067: CALL_OW 49
// ComEnterUnit ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ) ;
5071: LD_VAR 0 3
5075: PPUSH
5076: LD_INT 18
5078: PPUSH
5079: LD_INT 22
5081: PUSH
5082: LD_INT 6
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PUSH
5089: LD_INT 21
5091: PUSH
5092: LD_INT 3
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: PUSH
5099: LD_INT 30
5101: PUSH
5102: LD_INT 6
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: LIST
5113: PPUSH
5114: CALL_OW 70
5118: PUSH
5119: LD_INT 1
5121: ARRAY
5122: PPUSH
5123: CALL_OW 120
// end ;
5127: GO 5022
5129: POP
5130: POP
// end ;
5131: LD_VAR 0 1
5135: RET
// export function SetSurvivorsArabianAttack ; var limit , unit ; begin
5136: LD_INT 0
5138: PPUSH
5139: PPUSH
5140: PPUSH
// survivorsArabianAttack = [ ] ;
5141: LD_ADDR_EXP 79
5145: PUSH
5146: EMPTY
5147: ST_TO_ADDR
// limit = 9 ;
5148: LD_ADDR_VAR 0 2
5152: PUSH
5153: LD_INT 9
5155: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ Popov ;
5156: LD_ADDR_EXP 79
5160: PUSH
5161: LD_EXP 79
5165: PUSH
5166: LD_EXP 62
5170: ADD
5171: ST_TO_ADDR
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 6 then
5172: LD_EXP 53
5176: PPUSH
5177: CALL_OW 302
5181: PUSH
5182: LD_EXP 53
5186: PPUSH
5187: CALL_OW 255
5191: PUSH
5192: LD_INT 6
5194: EQUAL
5195: AND
5196: IFFALSE 5228
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov ;
5198: LD_ADDR_EXP 79
5202: PUSH
5203: LD_EXP 79
5207: PUSH
5208: LD_EXP 53
5212: ADD
5213: ST_TO_ADDR
// limit = limit - 1 ;
5214: LD_ADDR_VAR 0 2
5218: PUSH
5219: LD_VAR 0 2
5223: PUSH
5224: LD_INT 1
5226: MINUS
5227: ST_TO_ADDR
// end ; if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 6 then
5228: LD_EXP 54
5232: PPUSH
5233: CALL_OW 302
5237: PUSH
5238: LD_EXP 54
5242: PPUSH
5243: CALL_OW 255
5247: PUSH
5248: LD_INT 6
5250: EQUAL
5251: AND
5252: IFFALSE 5284
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov2 ;
5254: LD_ADDR_EXP 79
5258: PUSH
5259: LD_EXP 79
5263: PUSH
5264: LD_EXP 54
5268: ADD
5269: ST_TO_ADDR
// limit = limit - 1 ;
5270: LD_ADDR_VAR 0 2
5274: PUSH
5275: LD_VAR 0 2
5279: PUSH
5280: LD_INT 1
5282: MINUS
5283: ST_TO_ADDR
// end ; for unit in other_survivors do
5284: LD_ADDR_VAR 0 3
5288: PUSH
5289: LD_EXP 56
5293: PUSH
5294: FOR_IN
5295: IFFALSE 5355
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5297: LD_VAR 0 3
5301: PPUSH
5302: CALL_OW 302
5306: PUSH
5307: LD_VAR 0 3
5311: PPUSH
5312: CALL_OW 255
5316: PUSH
5317: LD_INT 6
5319: EQUAL
5320: AND
5321: IFFALSE 5353
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5323: LD_ADDR_EXP 79
5327: PUSH
5328: LD_EXP 79
5332: PUSH
5333: LD_VAR 0 3
5337: ADD
5338: ST_TO_ADDR
// limit = limit - 1 ;
5339: LD_ADDR_VAR 0 2
5343: PUSH
5344: LD_VAR 0 2
5348: PUSH
5349: LD_INT 1
5351: MINUS
5352: ST_TO_ADDR
// end ; end ;
5353: GO 5294
5355: POP
5356: POP
// for unit in otherBeriaUnits do
5357: LD_ADDR_VAR 0 3
5361: PUSH
5362: LD_EXP 58
5366: PUSH
5367: FOR_IN
5368: IFFALSE 5428
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5370: LD_VAR 0 3
5374: PPUSH
5375: CALL_OW 302
5379: PUSH
5380: LD_VAR 0 3
5384: PPUSH
5385: CALL_OW 255
5389: PUSH
5390: LD_INT 6
5392: EQUAL
5393: AND
5394: IFFALSE 5426
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5396: LD_ADDR_EXP 79
5400: PUSH
5401: LD_EXP 79
5405: PUSH
5406: LD_VAR 0 3
5410: ADD
5411: ST_TO_ADDR
// limit = limit - 1 ;
5412: LD_ADDR_VAR 0 2
5416: PUSH
5417: LD_VAR 0 2
5421: PUSH
5422: LD_INT 1
5424: MINUS
5425: ST_TO_ADDR
// end ; end ;
5426: GO 5367
5428: POP
5429: POP
// if limit > 0 then
5430: LD_VAR 0 2
5434: PUSH
5435: LD_INT 0
5437: GREATER
5438: IFFALSE 5450
// survivorsToSpawn = limit ;
5440: LD_ADDR_EXP 80
5444: PUSH
5445: LD_VAR 0 2
5449: ST_TO_ADDR
// end ;
5450: LD_VAR 0 1
5454: RET
// export function PrepareScholtze ; begin
5455: LD_INT 0
5457: PPUSH
// uc_side = 8 ;
5458: LD_ADDR_OWVAR 20
5462: PUSH
5463: LD_INT 8
5465: ST_TO_ADDR
// Scholtze = PrepareUnitExt ( Scholtze , false ) ;
5466: LD_ADDR_EXP 55
5470: PUSH
5471: LD_STRING Scholtze
5473: PPUSH
5474: LD_INT 0
5476: PPUSH
5477: CALL 6932 0 2
5481: ST_TO_ADDR
// PlaceUnitArea ( Scholtze , ScholtzeSpawnArea , true ) ;
5482: LD_EXP 55
5486: PPUSH
5487: LD_INT 30
5489: PPUSH
5490: LD_INT 1
5492: PPUSH
5493: CALL_OW 49
// end ; end_of_file
5497: LD_VAR 0 1
5501: RET
// export amIntroUnits ; export amSupportTroops ; export amPatrol ; export amBase ; export function PrepareAmericans ; begin
5502: LD_INT 0
5504: PPUSH
// amSupportTroops = [ ] ;
5505: LD_ADDR_EXP 84
5509: PUSH
5510: EMPTY
5511: ST_TO_ADDR
// PrepareOmicronBase ;
5512: CALL 5521 0 0
// end ;
5516: LD_VAR 0 1
5520: RET
// function PrepareOmicronBase ; var base ; begin
5521: LD_INT 0
5523: PPUSH
5524: PPUSH
// amBase := PrepareBase ( omikron , OmicronBaseArea , omikron , [ 1 , 2 , 2 ] [ Difficulty ] , [ 3000 , 3000 , 0 ] , [ 7 , 3 , 4 , 2 ] ) ;
5525: LD_ADDR_EXP 86
5529: PUSH
5530: LD_INT 64
5532: PPUSH
5533: LD_INT 13
5535: PPUSH
5536: LD_STRING omikron
5538: PPUSH
5539: LD_INT 1
5541: PUSH
5542: LD_INT 2
5544: PUSH
5545: LD_INT 2
5547: PUSH
5548: EMPTY
5549: LIST
5550: LIST
5551: LIST
5552: PUSH
5553: LD_OWVAR 67
5557: ARRAY
5558: PPUSH
5559: LD_INT 3000
5561: PUSH
5562: LD_INT 3000
5564: PUSH
5565: LD_INT 0
5567: PUSH
5568: EMPTY
5569: LIST
5570: LIST
5571: LIST
5572: PPUSH
5573: LD_INT 7
5575: PUSH
5576: LD_INT 3
5578: PUSH
5579: LD_INT 4
5581: PUSH
5582: LD_INT 2
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: PPUSH
5591: CALL 39842 0 6
5595: ST_TO_ADDR
// case Difficulty of 2 :
5596: LD_OWVAR 67
5600: PUSH
5601: LD_INT 2
5603: DOUBLE
5604: EQUAL
5605: IFTRUE 5609
5607: GO 5625
5609: POP
// begin SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5610: LD_INT 51
5612: PPUSH
5613: LD_INT 1
5615: PPUSH
5616: LD_INT 1
5618: PPUSH
5619: CALL_OW 322
// end ; 3 :
5623: GO 5663
5625: LD_INT 3
5627: DOUBLE
5628: EQUAL
5629: IFTRUE 5633
5631: GO 5662
5633: POP
// begin SetTech ( tech_Tech2 , 1 , state_enabled ) ;
5634: LD_INT 49
5636: PPUSH
5637: LD_INT 1
5639: PPUSH
5640: LD_INT 1
5642: PPUSH
5643: CALL_OW 322
// SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5647: LD_INT 51
5649: PPUSH
5650: LD_INT 1
5652: PPUSH
5653: LD_INT 1
5655: PPUSH
5656: CALL_OW 322
// end ; end ;
5660: GO 5663
5662: POP
// end ;
5663: LD_VAR 0 1
5667: RET
// export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
5668: LD_INT 0
5670: PPUSH
5671: PPUSH
5672: PPUSH
5673: PPUSH
// amIntroUnits = [ ] ;
5674: LD_ADDR_EXP 83
5678: PUSH
5679: EMPTY
5680: ST_TO_ADDR
// uc_side = 1 ;
5681: LD_ADDR_OWVAR 20
5685: PUSH
5686: LD_INT 1
5688: ST_TO_ADDR
// uc_nation = nation_american ;
5689: LD_ADDR_OWVAR 21
5693: PUSH
5694: LD_INT 1
5696: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
5697: LD_ADDR_OWVAR 37
5701: PUSH
5702: LD_INT 3
5704: ST_TO_ADDR
// vc_control = control_manual ;
5705: LD_ADDR_OWVAR 38
5709: PUSH
5710: LD_INT 1
5712: ST_TO_ADDR
// vc_engine = engine_combustion ;
5713: LD_ADDR_OWVAR 39
5717: PUSH
5718: LD_INT 1
5720: ST_TO_ADDR
// vc_weapon = us_double_gun ;
5721: LD_ADDR_OWVAR 40
5725: PUSH
5726: LD_INT 5
5728: ST_TO_ADDR
// veh = CreateVehicle ;
5729: LD_ADDR_VAR 0 3
5733: PUSH
5734: CALL_OW 45
5738: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5739: LD_VAR 0 3
5743: PPUSH
5744: LD_INT 4
5746: PPUSH
5747: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
5751: LD_ADDR_EXP 83
5755: PUSH
5756: LD_EXP 83
5760: PUSH
5761: LD_VAR 0 3
5765: ADD
5766: ST_TO_ADDR
// PlaceUnitArea ( veh , CutsceneAmSupportSpawnArea , false ) ;
5767: LD_VAR 0 3
5771: PPUSH
5772: LD_INT 5
5774: PPUSH
5775: LD_INT 0
5777: PPUSH
5778: CALL_OW 49
// for i := 1 to 5 do
5782: LD_ADDR_VAR 0 2
5786: PUSH
5787: DOUBLE
5788: LD_INT 1
5790: DEC
5791: ST_TO_ADDR
5792: LD_INT 5
5794: PUSH
5795: FOR_TO
5796: IFFALSE 5893
// begin hc_name :=  ;
5798: LD_ADDR_OWVAR 26
5802: PUSH
5803: LD_STRING 
5805: ST_TO_ADDR
// hc_gallery :=  ;
5806: LD_ADDR_OWVAR 33
5810: PUSH
5811: LD_STRING 
5813: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
5814: LD_INT 0
5816: PPUSH
5817: LD_INT 1
5819: PPUSH
5820: CALL_OW 381
// human = CreateHuman ;
5824: LD_ADDR_VAR 0 4
5828: PUSH
5829: CALL_OW 44
5833: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
5834: LD_ADDR_EXP 83
5838: PUSH
5839: LD_EXP 83
5843: PUSH
5844: LD_VAR 0 4
5848: ADD
5849: ST_TO_ADDR
// if i < 5 then
5850: LD_VAR 0 2
5854: PUSH
5855: LD_INT 5
5857: LESS
5858: IFFALSE 5877
// PlaceUnitArea ( human , CutsceneAmSupportSpawnArea , false ) else
5860: LD_VAR 0 4
5864: PPUSH
5865: LD_INT 5
5867: PPUSH
5868: LD_INT 0
5870: PPUSH
5871: CALL_OW 49
5875: GO 5891
// begin PlaceHumanInUnit ( human , veh ) ;
5877: LD_VAR 0 4
5881: PPUSH
5882: LD_VAR 0 3
5886: PPUSH
5887: CALL_OW 52
// end ; end ;
5891: GO 5795
5893: POP
5894: POP
// end ;
5895: LD_VAR 0 1
5899: RET
// export function PrepareAmericanSupportTroops ( soldiersAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road ; begin
5900: LD_INT 0
5902: PPUSH
5903: PPUSH
5904: PPUSH
5905: PPUSH
5906: PPUSH
// uc_side := 1 ;
5907: LD_ADDR_OWVAR 20
5911: PUSH
5912: LD_INT 1
5914: ST_TO_ADDR
// uc_nation := 1 ;
5915: LD_ADDR_OWVAR 21
5919: PUSH
5920: LD_INT 1
5922: ST_TO_ADDR
// hc_name :=  ;
5923: LD_ADDR_OWVAR 26
5927: PUSH
5928: LD_STRING 
5930: ST_TO_ADDR
// hc_gallery :=  ;
5931: LD_ADDR_OWVAR 33
5935: PUSH
5936: LD_STRING 
5938: ST_TO_ADDR
// for i := 1 to soldiersAmount do
5939: LD_ADDR_VAR 0 6
5943: PUSH
5944: DOUBLE
5945: LD_INT 1
5947: DEC
5948: ST_TO_ADDR
5949: LD_VAR 0 1
5953: PUSH
5954: FOR_TO
5955: IFFALSE 6014
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5957: LD_INT 0
5959: PPUSH
5960: LD_EXP 43
5964: PPUSH
5965: CALL_OW 381
// un = CreateHuman ;
5969: LD_ADDR_VAR 0 7
5973: PUSH
5974: CALL_OW 44
5978: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
5979: LD_ADDR_EXP 84
5983: PUSH
5984: LD_EXP 84
5988: PUSH
5989: LD_VAR 0 7
5993: ADD
5994: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5995: LD_VAR 0 7
5999: PPUSH
6000: LD_VAR 0 4
6004: PPUSH
6005: LD_INT 0
6007: PPUSH
6008: CALL_OW 49
// end ;
6012: GO 5954
6014: POP
6015: POP
// for i := 1 to scientistsAmount do
6016: LD_ADDR_VAR 0 6
6020: PUSH
6021: DOUBLE
6022: LD_INT 1
6024: DEC
6025: ST_TO_ADDR
6026: LD_VAR 0 2
6030: PUSH
6031: FOR_TO
6032: IFFALSE 6091
// begin PrepareScientist ( false , enemySkillLevel ) ;
6034: LD_INT 0
6036: PPUSH
6037: LD_EXP 43
6041: PPUSH
6042: CALL_OW 384
// un = CreateHuman ;
6046: LD_ADDR_VAR 0 7
6050: PUSH
6051: CALL_OW 44
6055: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6056: LD_ADDR_EXP 84
6060: PUSH
6061: LD_EXP 84
6065: PUSH
6066: LD_VAR 0 7
6070: ADD
6071: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6072: LD_VAR 0 7
6076: PPUSH
6077: LD_VAR 0 4
6081: PPUSH
6082: LD_INT 0
6084: PPUSH
6085: CALL_OW 49
// end ;
6089: GO 6031
6091: POP
6092: POP
// for i := 1 to vehiclesAmount do
6093: LD_ADDR_VAR 0 6
6097: PUSH
6098: DOUBLE
6099: LD_INT 1
6101: DEC
6102: ST_TO_ADDR
6103: LD_VAR 0 3
6107: PUSH
6108: FOR_TO
6109: IFFALSE 6275
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
6111: LD_ADDR_OWVAR 40
6115: PUSH
6116: LD_INT 2
6118: PUSH
6119: LD_INT 4
6121: PUSH
6122: LD_INT 3
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: LIST
6129: PUSH
6130: LD_INT 1
6132: PPUSH
6133: LD_INT 3
6135: PPUSH
6136: CALL_OW 12
6140: ARRAY
6141: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
6142: LD_ADDR_OWVAR 37
6146: PUSH
6147: LD_INT 3
6149: ST_TO_ADDR
// vc_control = control_manual ;
6150: LD_ADDR_OWVAR 38
6154: PUSH
6155: LD_INT 1
6157: ST_TO_ADDR
// vc_engine = engine_combustion ;
6158: LD_ADDR_OWVAR 39
6162: PUSH
6163: LD_INT 1
6165: ST_TO_ADDR
// veh = CreateVehicle ;
6166: LD_ADDR_VAR 0 8
6170: PUSH
6171: CALL_OW 45
6175: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ veh ;
6176: LD_ADDR_EXP 84
6180: PUSH
6181: LD_EXP 84
6185: PUSH
6186: LD_VAR 0 8
6190: ADD
6191: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6192: LD_VAR 0 8
6196: PPUSH
6197: LD_VAR 0 4
6201: PPUSH
6202: LD_INT 0
6204: PPUSH
6205: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
6209: LD_INT 0
6211: PPUSH
6212: LD_EXP 43
6216: PPUSH
6217: CALL_OW 383
// un = CreateHuman ;
6221: LD_ADDR_VAR 0 7
6225: PUSH
6226: CALL_OW 44
6230: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6231: LD_ADDR_EXP 84
6235: PUSH
6236: LD_EXP 84
6240: PUSH
6241: LD_VAR 0 7
6245: ADD
6246: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6247: LD_VAR 0 7
6251: PPUSH
6252: LD_VAR 0 8
6256: PPUSH
6257: CALL_OW 52
// SetFuel ( veh , 100 ) ;
6261: LD_VAR 0 8
6265: PPUSH
6266: LD_INT 100
6268: PPUSH
6269: CALL_OW 240
// end ;
6273: GO 6108
6275: POP
6276: POP
// case area of NorthAmericanSpawnArea :
6277: LD_VAR 0 4
6281: PUSH
6282: LD_INT 7
6284: DOUBLE
6285: EQUAL
6286: IFTRUE 6290
6288: GO 6301
6290: POP
// road = NorthRoadArea ; SouthAmericanSpawnArea1 :
6291: LD_ADDR_VAR 0 9
6295: PUSH
6296: LD_INT 10
6298: ST_TO_ADDR
6299: GO 6340
6301: LD_INT 9
6303: DOUBLE
6304: EQUAL
6305: IFTRUE 6309
6307: GO 6320
6309: POP
// road = SouthRoadArea1 ; SouthAmericanSpawnArea2 :
6310: LD_ADDR_VAR 0 9
6314: PUSH
6315: LD_INT 11
6317: ST_TO_ADDR
6318: GO 6340
6320: LD_INT 8
6322: DOUBLE
6323: EQUAL
6324: IFTRUE 6328
6326: GO 6339
6328: POP
// road = SouthRoadArea2 ; end ;
6329: LD_ADDR_VAR 0 9
6333: PUSH
6334: LD_INT 12
6336: ST_TO_ADDR
6337: GO 6340
6339: POP
// MoveToBase ( amSupportTroops , road ) ;
6340: LD_EXP 84
6344: PPUSH
6345: LD_VAR 0 9
6349: PPUSH
6350: CALL 18940 0 2
// end ;
6354: LD_VAR 0 5
6358: RET
// export function PrepareAmericanPatrol ; var un ; begin
6359: LD_INT 0
6361: PPUSH
6362: PPUSH
// amPatrol = [ ] ;
6363: LD_ADDR_EXP 85
6367: PUSH
6368: EMPTY
6369: ST_TO_ADDR
// uc_side = 1 ;
6370: LD_ADDR_OWVAR 20
6374: PUSH
6375: LD_INT 1
6377: ST_TO_ADDR
// uc_nation = 1 ;
6378: LD_ADDR_OWVAR 21
6382: PUSH
6383: LD_INT 1
6385: ST_TO_ADDR
// un = PrepareUnitExt ( Campell , false ) ;
6386: LD_ADDR_VAR 0 2
6390: PUSH
6391: LD_STRING Campell
6393: PPUSH
6394: LD_INT 0
6396: PPUSH
6397: CALL 6932 0 2
6401: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6402: LD_ADDR_EXP 85
6406: PUSH
6407: LD_EXP 85
6411: PUSH
6412: LD_VAR 0 2
6416: ADD
6417: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6418: LD_VAR 0 2
6422: PPUSH
6423: LD_INT 14
6425: PPUSH
6426: LD_INT 0
6428: PPUSH
6429: CALL_OW 49
// SetClass ( un , 1 ) ;
6433: LD_VAR 0 2
6437: PPUSH
6438: LD_INT 1
6440: PPUSH
6441: CALL_OW 336
// PrepareSoldier ( sex_male , enemySkillLevel ) ;
6445: LD_INT 1
6447: PPUSH
6448: LD_EXP 43
6452: PPUSH
6453: CALL_OW 381
// un = CreateHuman ;
6457: LD_ADDR_VAR 0 2
6461: PUSH
6462: CALL_OW 44
6466: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6467: LD_ADDR_EXP 85
6471: PUSH
6472: LD_EXP 85
6476: PUSH
6477: LD_VAR 0 2
6481: ADD
6482: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6483: LD_VAR 0 2
6487: PPUSH
6488: LD_INT 14
6490: PPUSH
6491: LD_INT 0
6493: PPUSH
6494: CALL_OW 49
// ComAttackUnit ( amPatrol , Scholtze ) ;
6498: LD_EXP 85
6502: PPUSH
6503: LD_EXP 55
6507: PPUSH
6508: CALL_OW 115
// end ; end_of_file
6512: LD_VAR 0 1
6516: RET
// export northGroup , southGroup ; export function PrepareArabian ; var i , un , veh ; begin
6517: LD_INT 0
6519: PPUSH
6520: PPUSH
6521: PPUSH
6522: PPUSH
// northGroup = [ ] ;
6523: LD_ADDR_EXP 87
6527: PUSH
6528: EMPTY
6529: ST_TO_ADDR
// southGroup = [ ] ;
6530: LD_ADDR_EXP 88
6534: PUSH
6535: EMPTY
6536: ST_TO_ADDR
// uc_side = 2 ;
6537: LD_ADDR_OWVAR 20
6541: PUSH
6542: LD_INT 2
6544: ST_TO_ADDR
// uc_nation = 2 ;
6545: LD_ADDR_OWVAR 21
6549: PUSH
6550: LD_INT 2
6552: ST_TO_ADDR
// hc_name :=  ;
6553: LD_ADDR_OWVAR 26
6557: PUSH
6558: LD_STRING 
6560: ST_TO_ADDR
// hc_gallery :=  ;
6561: LD_ADDR_OWVAR 33
6565: PUSH
6566: LD_STRING 
6568: ST_TO_ADDR
// for i := 1 to 5 do
6569: LD_ADDR_VAR 0 2
6573: PUSH
6574: DOUBLE
6575: LD_INT 1
6577: DEC
6578: ST_TO_ADDR
6579: LD_INT 5
6581: PUSH
6582: FOR_TO
6583: IFFALSE 6697
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
6585: LD_INT 13
6587: PPUSH
6588: LD_INT 1
6590: PPUSH
6591: LD_INT 1
6593: PPUSH
6594: LD_INT 26
6596: PPUSH
6597: LD_INT 100
6599: PPUSH
6600: CALL 36433 0 5
// veh = CreateVehicle ;
6604: LD_ADDR_VAR 0 4
6608: PUSH
6609: CALL_OW 45
6613: ST_TO_ADDR
// southGroup = southGroup ^ veh ;
6614: LD_ADDR_EXP 88
6618: PUSH
6619: LD_EXP 88
6623: PUSH
6624: LD_VAR 0 4
6628: ADD
6629: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea2 , false ) ;
6630: LD_VAR 0 4
6634: PPUSH
6635: LD_INT 23
6637: PPUSH
6638: LD_INT 0
6640: PPUSH
6641: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6645: LD_INT 0
6647: PPUSH
6648: LD_INT 8
6650: PPUSH
6651: CALL_OW 383
// un = CreateHuman ;
6655: LD_ADDR_VAR 0 3
6659: PUSH
6660: CALL_OW 44
6664: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6665: LD_ADDR_EXP 88
6669: PUSH
6670: LD_EXP 88
6674: PUSH
6675: LD_VAR 0 3
6679: ADD
6680: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6681: LD_VAR 0 3
6685: PPUSH
6686: LD_VAR 0 4
6690: PPUSH
6691: CALL_OW 52
// end ;
6695: GO 6582
6697: POP
6698: POP
// for i := 1 to 5 do
6699: LD_ADDR_VAR 0 2
6703: PUSH
6704: DOUBLE
6705: LD_INT 1
6707: DEC
6708: ST_TO_ADDR
6709: LD_INT 5
6711: PUSH
6712: FOR_TO
6713: IFFALSE 6768
// begin PrepareSoldier ( false , 8 ) ;
6715: LD_INT 0
6717: PPUSH
6718: LD_INT 8
6720: PPUSH
6721: CALL_OW 381
// un = CreateHuman ;
6725: LD_ADDR_VAR 0 3
6729: PUSH
6730: CALL_OW 44
6734: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6735: LD_ADDR_EXP 88
6739: PUSH
6740: LD_EXP 88
6744: PUSH
6745: LD_VAR 0 3
6749: ADD
6750: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6751: LD_VAR 0 3
6755: PPUSH
6756: LD_INT 23
6758: PPUSH
6759: LD_INT 0
6761: PPUSH
6762: CALL_OW 49
// end ;
6766: GO 6712
6768: POP
6769: POP
// for i := 1 to 10 do
6770: LD_ADDR_VAR 0 2
6774: PUSH
6775: DOUBLE
6776: LD_INT 1
6778: DEC
6779: ST_TO_ADDR
6780: LD_INT 10
6782: PUSH
6783: FOR_TO
6784: IFFALSE 6925
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower ] [ Rand ( 1 , 4 ) ] , 100 ) ;
6786: LD_INT 13
6788: PPUSH
6789: LD_INT 1
6791: PPUSH
6792: LD_INT 1
6794: PPUSH
6795: LD_INT 25
6797: PUSH
6798: LD_INT 27
6800: PUSH
6801: LD_INT 23
6803: PUSH
6804: LD_INT 26
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 1
6815: PPUSH
6816: LD_INT 4
6818: PPUSH
6819: CALL_OW 12
6823: ARRAY
6824: PPUSH
6825: LD_INT 100
6827: PPUSH
6828: CALL 36433 0 5
// veh = CreateVehicle ;
6832: LD_ADDR_VAR 0 4
6836: PUSH
6837: CALL_OW 45
6841: ST_TO_ADDR
// northGroup = northGroup ^ veh ;
6842: LD_ADDR_EXP 87
6846: PUSH
6847: LD_EXP 87
6851: PUSH
6852: LD_VAR 0 4
6856: ADD
6857: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
6858: LD_VAR 0 4
6862: PPUSH
6863: LD_INT 22
6865: PPUSH
6866: LD_INT 0
6868: PPUSH
6869: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6873: LD_INT 0
6875: PPUSH
6876: LD_INT 8
6878: PPUSH
6879: CALL_OW 383
// un = CreateHuman ;
6883: LD_ADDR_VAR 0 3
6887: PUSH
6888: CALL_OW 44
6892: ST_TO_ADDR
// northGroup = northGroup ^ un ;
6893: LD_ADDR_EXP 87
6897: PUSH
6898: LD_EXP 87
6902: PUSH
6903: LD_VAR 0 3
6907: ADD
6908: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6909: LD_VAR 0 3
6913: PPUSH
6914: LD_VAR 0 4
6918: PPUSH
6919: CALL_OW 52
// end ;
6923: GO 6783
6925: POP
6926: POP
// end ; end_of_file
6927: LD_VAR 0 1
6931: RET
// export function PrepareUnitExt ( ident , exist_mode ) ; var unit ; begin
6932: LD_INT 0
6934: PPUSH
6935: PPUSH
// if exist_mode then
6936: LD_VAR 0 2
6940: IFFALSE 6965
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
6942: LD_ADDR_VAR 0 4
6946: PUSH
6947: LD_EXP 36
6951: PUSH
6952: LD_VAR 0 1
6956: STR
6957: PPUSH
6958: CALL_OW 34
6962: ST_TO_ADDR
6963: GO 6980
// unit := NewCharacter ( ident ) ;
6965: LD_ADDR_VAR 0 4
6969: PUSH
6970: LD_VAR 0 1
6974: PPUSH
6975: CALL_OW 25
6979: ST_TO_ADDR
// result := unit ;
6980: LD_ADDR_VAR 0 3
6984: PUSH
6985: LD_VAR 0 4
6989: ST_TO_ADDR
// end ;
6990: LD_VAR 0 3
6994: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
6995: LD_INT 0
6997: PPUSH
6998: PPUSH
6999: PPUSH
7000: PPUSH
// units = characters ;
7001: LD_ADDR_VAR 0 9
7005: PUSH
7006: LD_VAR 0 1
7010: ST_TO_ADDR
// units := units diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
7011: LD_ADDR_VAR 0 9
7015: PUSH
7016: LD_VAR 0 9
7020: PUSH
7021: LD_EXP 49
7025: PUSH
7026: LD_EXP 50
7030: PUSH
7031: LD_EXP 51
7035: PUSH
7036: LD_EXP 52
7040: PUSH
7041: LD_EXP 53
7045: PUSH
7046: LD_EXP 54
7050: PUSH
7051: LD_EXP 55
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: DIFF
7065: ST_TO_ADDR
// if not units and not canTalkHero then
7066: LD_VAR 0 9
7070: NOT
7071: PUSH
7072: LD_VAR 0 5
7076: NOT
7077: AND
7078: IFFALSE 7082
// exit ;
7080: GO 7255
// if not units then
7082: LD_VAR 0 9
7086: NOT
7087: IFFALSE 7108
// units = characters diff [ Burlak ] ;
7089: LD_ADDR_VAR 0 9
7093: PUSH
7094: LD_VAR 0 1
7098: PUSH
7099: LD_EXP 49
7103: PUSH
7104: EMPTY
7105: LIST
7106: DIFF
7107: ST_TO_ADDR
// if not units and canTalkHero then
7108: LD_VAR 0 9
7112: NOT
7113: PUSH
7114: LD_VAR 0 5
7118: AND
7119: IFFALSE 7123
// exit ;
7121: GO 7255
// speaker := units [ rand ( 1 , units ) ] ;
7123: LD_ADDR_VAR 0 8
7127: PUSH
7128: LD_VAR 0 9
7132: PUSH
7133: LD_INT 1
7135: PPUSH
7136: LD_VAR 0 9
7140: PPUSH
7141: CALL_OW 12
7145: ARRAY
7146: ST_TO_ADDR
// if radio then
7147: LD_VAR 0 4
7151: IFFALSE 7200
// begin if GetSex ( speaker ) = sex_male then
7153: LD_VAR 0 8
7157: PPUSH
7158: CALL_OW 258
7162: PUSH
7163: LD_INT 1
7165: EQUAL
7166: IFFALSE 7184
// SayRadio ( speaker , dialogMID ) else
7168: LD_VAR 0 8
7172: PPUSH
7173: LD_VAR 0 2
7177: PPUSH
7178: CALL_OW 94
7182: GO 7198
// SayRadio ( speaker , dialogFID ) ;
7184: LD_VAR 0 8
7188: PPUSH
7189: LD_VAR 0 3
7193: PPUSH
7194: CALL_OW 94
// end else
7198: GO 7245
// begin if GetSex ( speaker ) = sex_male then
7200: LD_VAR 0 8
7204: PPUSH
7205: CALL_OW 258
7209: PUSH
7210: LD_INT 1
7212: EQUAL
7213: IFFALSE 7231
// Say ( speaker , dialogMID ) else
7215: LD_VAR 0 8
7219: PPUSH
7220: LD_VAR 0 2
7224: PPUSH
7225: CALL_OW 88
7229: GO 7245
// Say ( speaker , dialogFID ) ;
7231: LD_VAR 0 8
7235: PPUSH
7236: LD_VAR 0 3
7240: PPUSH
7241: CALL_OW 88
// end ; result := speaker ;
7245: LD_ADDR_VAR 0 6
7249: PUSH
7250: LD_VAR 0 8
7254: ST_TO_ADDR
// end ;
7255: LD_VAR 0 6
7259: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
7260: LD_INT 0
7262: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
7263: LD_VAR 0 1
7267: PPUSH
7268: CALL_OW 255
7272: PUSH
7273: LD_VAR 0 3
7277: EQUAL
7278: PUSH
7279: LD_VAR 0 1
7283: PPUSH
7284: CALL_OW 302
7288: AND
7289: IFFALSE 7311
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
7291: LD_VAR 0 1
7295: PPUSH
7296: LD_EXP 35
7300: PUSH
7301: LD_VAR 0 2
7305: STR
7306: PPUSH
7307: CALL_OW 38
// end ;
7311: LD_VAR 0 4
7315: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
7316: LD_INT 0
7318: PPUSH
7319: PPUSH
7320: PPUSH
// resultCharactersToSave = [ ] ;
7321: LD_ADDR_VAR 0 6
7325: PUSH
7326: EMPTY
7327: ST_TO_ADDR
// for unit in characters do
7328: LD_ADDR_VAR 0 5
7332: PUSH
7333: LD_VAR 0 1
7337: PUSH
7338: FOR_IN
7339: IFFALSE 7387
// if GetSide ( unit ) = side and IsOK ( unit ) then
7341: LD_VAR 0 5
7345: PPUSH
7346: CALL_OW 255
7350: PUSH
7351: LD_VAR 0 3
7355: EQUAL
7356: PUSH
7357: LD_VAR 0 5
7361: PPUSH
7362: CALL_OW 302
7366: AND
7367: IFFALSE 7385
// resultCharactersToSave = resultCharactersToSave ^ unit ;
7369: LD_ADDR_VAR 0 6
7373: PUSH
7374: LD_VAR 0 6
7378: PUSH
7379: LD_VAR 0 5
7383: ADD
7384: ST_TO_ADDR
7385: GO 7338
7387: POP
7388: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
7389: LD_VAR 0 6
7393: PPUSH
7394: LD_EXP 35
7398: PUSH
7399: LD_VAR 0 2
7403: STR
7404: PPUSH
7405: CALL_OW 38
// end ;
7409: LD_VAR 0 4
7413: RET
// export function SelectCharacters ( maxUnitToChoose ) ; var i , charsToChoose , selectedPeople ; begin
7414: LD_INT 0
7416: PPUSH
7417: PPUSH
7418: PPUSH
7419: PPUSH
// charsToChoose = otherKirovUnits ;
7420: LD_ADDR_VAR 0 4
7424: PUSH
7425: LD_EXP 65
7429: ST_TO_ADDR
// charsToChoose = charsToChoose ^ otherBeriaUnits ;
7430: LD_ADDR_VAR 0 4
7434: PUSH
7435: LD_VAR 0 4
7439: PUSH
7440: LD_EXP 58
7444: ADD
7445: ST_TO_ADDR
// charsToChoose = charsToChoose ^ other_survivors ;
7446: LD_ADDR_VAR 0 4
7450: PUSH
7451: LD_VAR 0 4
7455: PUSH
7456: LD_EXP 56
7460: ADD
7461: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov ;
7462: LD_ADDR_VAR 0 4
7466: PUSH
7467: LD_VAR 0 4
7471: PUSH
7472: LD_EXP 53
7476: ADD
7477: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov2 ;
7478: LD_ADDR_VAR 0 4
7482: PUSH
7483: LD_VAR 0 4
7487: PUSH
7488: LD_EXP 54
7492: ADD
7493: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , maxUnitToChoose , maxUnitToChoose , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Kurin ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
7494: LD_ADDR_VAR 0 5
7498: PUSH
7499: LD_STRING text
7501: PPUSH
7502: LD_VAR 0 1
7506: PPUSH
7507: LD_VAR 0 1
7511: PPUSH
7512: LD_INT -5
7514: PUSH
7515: LD_EXP 49
7519: PUSH
7520: LD_EXP 50
7524: PUSH
7525: LD_EXP 52
7529: PUSH
7530: LD_EXP 51
7534: PUSH
7535: LD_INT -6
7537: PUSH
7538: LD_INT -2
7540: PUSH
7541: LD_INT -3
7543: PUSH
7544: LD_INT -5
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: PUSH
7558: LD_VAR 0 4
7562: ADD
7563: PUSH
7564: LD_INT -6
7566: PUSH
7567: LD_INT -4
7569: PUSH
7570: LD_EXP 61
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: LIST
7579: ADD
7580: PPUSH
7581: LD_INT 1
7583: PUSH
7584: LD_INT 3
7586: PUSH
7587: LD_INT 2
7589: PUSH
7590: LD_INT 1
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: PUSH
7597: LD_INT 4
7599: PUSH
7600: LD_INT 1
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: PPUSH
7613: CALL_OW 42
7617: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
7618: LD_VAR 0 4
7622: PPUSH
7623: LD_INT 6
7625: PPUSH
7626: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
7630: LD_VAR 0 5
7634: PPUSH
7635: LD_INT 3
7637: PPUSH
7638: CALL_OW 235
// SetSurvivorsArabianAttack ;
7642: CALL 5136 0 0
// MoveKurinUnitsToBuildings ;
7646: CALL 9184 0 0
// end ;
7650: LD_VAR 0 2
7654: RET
// export function FindNotFullBuildingInArea ( area , side , buildingType ) ; var building ; begin
7655: LD_INT 0
7657: PPUSH
7658: PPUSH
// for building in FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , buildingType ] ] ) do
7659: LD_ADDR_VAR 0 5
7663: PUSH
7664: LD_VAR 0 1
7668: PPUSH
7669: LD_INT 22
7671: PUSH
7672: LD_VAR 0 2
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: LD_INT 21
7683: PUSH
7684: LD_INT 3
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: PUSH
7691: LD_INT 30
7693: PUSH
7694: LD_VAR 0 3
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: LIST
7707: PPUSH
7708: CALL_OW 70
7712: PUSH
7713: FOR_IN
7714: IFFALSE 7747
// begin if UnitsInside ( building ) < 6 then
7716: LD_VAR 0 5
7720: PPUSH
7721: CALL_OW 313
7725: PUSH
7726: LD_INT 6
7728: LESS
7729: IFFALSE 7745
// begin result = building ;
7731: LD_ADDR_VAR 0 4
7735: PUSH
7736: LD_VAR 0 5
7740: ST_TO_ADDR
// exit ;
7741: POP
7742: POP
7743: GO 7757
// end ; end ;
7745: GO 7713
7747: POP
7748: POP
// result = 0 ;
7749: LD_ADDR_VAR 0 4
7753: PUSH
7754: LD_INT 0
7756: ST_TO_ADDR
// end ;
7757: LD_VAR 0 4
7761: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
7762: LD_INT 0
7764: PPUSH
7765: PPUSH
7766: PPUSH
7767: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
7768: LD_ADDR_VAR 0 6
7772: PUSH
7773: LD_INT 34
7775: PUSH
7776: LD_INT 71
7778: PUSH
7779: LD_INT 70
7781: PUSH
7782: LD_INT 69
7784: PUSH
7785: LD_INT 39
7787: PUSH
7788: LD_INT 31
7790: PUSH
7791: LD_INT 14
7793: PUSH
7794: LD_INT 10
7796: PUSH
7797: LD_INT 40
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: ST_TO_ADDR
// resultWeapons = [ ] ;
7811: LD_ADDR_VAR 0 5
7815: PUSH
7816: EMPTY
7817: ST_TO_ADDR
// for i := 1 to weaponTechs do
7818: LD_ADDR_VAR 0 4
7822: PUSH
7823: DOUBLE
7824: LD_INT 1
7826: DEC
7827: ST_TO_ADDR
7828: LD_VAR 0 6
7832: PUSH
7833: FOR_TO
7834: IFFALSE 8021
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
7836: LD_VAR 0 6
7840: PUSH
7841: LD_VAR 0 4
7845: ARRAY
7846: PPUSH
7847: LD_VAR 0 2
7851: PPUSH
7852: CALL_OW 482
7856: PUSH
7857: LD_VAR 0 6
7861: PUSH
7862: LD_VAR 0 4
7866: ARRAY
7867: PPUSH
7868: LD_VAR 0 1
7872: PPUSH
7873: CALL_OW 321
7877: PUSH
7878: LD_INT 2
7880: EQUAL
7881: AND
7882: IFFALSE 8019
// case nation of nation_american :
7884: LD_VAR 0 2
7888: PUSH
7889: LD_INT 1
7891: DOUBLE
7892: EQUAL
7893: IFTRUE 7897
7895: GO 7932
7897: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
7898: LD_ADDR_VAR 0 5
7902: PUSH
7903: LD_VAR 0 5
7907: PUSH
7908: LD_VAR 0 6
7912: PUSH
7913: LD_VAR 0 4
7917: ARRAY
7918: PPUSH
7919: LD_VAR 0 2
7923: PPUSH
7924: CALL 8038 0 2
7928: ADD
7929: ST_TO_ADDR
7930: GO 8019
7932: LD_INT 2
7934: DOUBLE
7935: EQUAL
7936: IFTRUE 7940
7938: GO 7975
7940: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
7941: LD_ADDR_VAR 0 5
7945: PUSH
7946: LD_VAR 0 5
7950: PUSH
7951: LD_VAR 0 6
7955: PUSH
7956: LD_VAR 0 4
7960: ARRAY
7961: PPUSH
7962: LD_VAR 0 2
7966: PPUSH
7967: CALL 8038 0 2
7971: ADD
7972: ST_TO_ADDR
7973: GO 8019
7975: LD_INT 3
7977: DOUBLE
7978: EQUAL
7979: IFTRUE 7983
7981: GO 8018
7983: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
7984: LD_ADDR_VAR 0 5
7988: PUSH
7989: LD_VAR 0 5
7993: PUSH
7994: LD_VAR 0 6
7998: PUSH
7999: LD_VAR 0 4
8003: ARRAY
8004: PPUSH
8005: LD_VAR 0 2
8009: PPUSH
8010: CALL 8038 0 2
8014: ADD
8015: ST_TO_ADDR
8016: GO 8019
8018: POP
// end ;
8019: GO 7833
8021: POP
8022: POP
// result = resultWeapons ;
8023: LD_ADDR_VAR 0 3
8027: PUSH
8028: LD_VAR 0 5
8032: ST_TO_ADDR
// end ;
8033: LD_VAR 0 3
8037: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
8038: LD_INT 0
8040: PPUSH
// case tech of tech_AdvMet :
8041: LD_VAR 0 1
8045: PUSH
8046: LD_INT 34
8048: DOUBLE
8049: EQUAL
8050: IFTRUE 8054
8052: GO 8082
8054: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
8055: LD_ADDR_VAR 0 3
8059: PUSH
8060: LD_INT 6
8062: PUSH
8063: LD_STRING 
8065: PUSH
8066: LD_INT 46
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: LIST
8073: PUSH
8074: LD_VAR 0 2
8078: ARRAY
8079: ST_TO_ADDR
8080: GO 8371
8082: LD_INT 71
8084: DOUBLE
8085: EQUAL
8086: IFTRUE 8090
8088: GO 8118
8090: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
8091: LD_ADDR_VAR 0 3
8095: PUSH
8096: LD_STRING 
8098: PUSH
8099: LD_STRING 
8101: PUSH
8102: LD_INT 47
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: LIST
8109: PUSH
8110: LD_VAR 0 2
8114: ARRAY
8115: ST_TO_ADDR
8116: GO 8371
8118: LD_INT 70
8120: DOUBLE
8121: EQUAL
8122: IFTRUE 8126
8124: GO 8154
8126: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
8127: LD_ADDR_VAR 0 3
8131: PUSH
8132: LD_STRING 
8134: PUSH
8135: LD_INT 26
8137: PUSH
8138: LD_STRING 
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: LIST
8145: PUSH
8146: LD_VAR 0 2
8150: ARRAY
8151: ST_TO_ADDR
8152: GO 8371
8154: LD_INT 69
8156: DOUBLE
8157: EQUAL
8158: IFTRUE 8162
8160: GO 8190
8162: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
8163: LD_ADDR_VAR 0 3
8167: PUSH
8168: LD_INT 4
8170: PUSH
8171: LD_INT 25
8173: PUSH
8174: LD_INT 43
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: LIST
8181: PUSH
8182: LD_VAR 0 2
8186: ARRAY
8187: ST_TO_ADDR
8188: GO 8371
8190: LD_INT 39
8192: DOUBLE
8193: EQUAL
8194: IFTRUE 8198
8196: GO 8226
8198: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
8199: LD_ADDR_VAR 0 3
8203: PUSH
8204: LD_INT 5
8206: PUSH
8207: LD_INT 27
8209: PUSH
8210: LD_INT 44
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: LIST
8217: PUSH
8218: LD_VAR 0 2
8222: ARRAY
8223: ST_TO_ADDR
8224: GO 8371
8226: LD_INT 31
8228: DOUBLE
8229: EQUAL
8230: IFTRUE 8234
8232: GO 8262
8234: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
8235: LD_ADDR_VAR 0 3
8239: PUSH
8240: LD_STRING 
8242: PUSH
8243: LD_STRING 
8245: PUSH
8246: LD_INT 49
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: LIST
8253: PUSH
8254: LD_VAR 0 2
8258: ARRAY
8259: ST_TO_ADDR
8260: GO 8371
8262: LD_INT 14
8264: DOUBLE
8265: EQUAL
8266: IFTRUE 8270
8268: GO 8298
8270: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
8271: LD_ADDR_VAR 0 3
8275: PUSH
8276: LD_INT 10
8278: PUSH
8279: LD_STRING 
8281: PUSH
8282: LD_STRING 
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: LIST
8289: PUSH
8290: LD_VAR 0 2
8294: ARRAY
8295: ST_TO_ADDR
8296: GO 8371
8298: LD_INT 10
8300: DOUBLE
8301: EQUAL
8302: IFTRUE 8306
8304: GO 8334
8306: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
8307: LD_ADDR_VAR 0 3
8311: PUSH
8312: LD_INT 9
8314: PUSH
8315: LD_STRING 
8317: PUSH
8318: LD_STRING 
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: LIST
8325: PUSH
8326: LD_VAR 0 2
8330: ARRAY
8331: ST_TO_ADDR
8332: GO 8371
8334: LD_INT 40
8336: DOUBLE
8337: EQUAL
8338: IFTRUE 8342
8340: GO 8370
8342: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
8343: LD_ADDR_VAR 0 3
8347: PUSH
8348: LD_INT 7
8350: PUSH
8351: LD_INT 28
8353: PUSH
8354: LD_INT 45
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: LIST
8361: PUSH
8362: LD_VAR 0 2
8366: ARRAY
8367: ST_TO_ADDR
8368: GO 8371
8370: POP
// end ;
8371: LD_VAR 0 3
8375: RET
// export function ComRefuelFromCargo ( units , cargo ) ; var veh ; begin
8376: LD_INT 0
8378: PPUSH
8379: PPUSH
// for veh in units do
8380: LD_ADDR_VAR 0 4
8384: PUSH
8385: LD_VAR 0 1
8389: PUSH
8390: FOR_IN
8391: IFFALSE 8469
// begin if GetType ( veh ) = unit_vehicle and GetFuel ( veh ) < 100 then
8393: LD_VAR 0 4
8397: PPUSH
8398: CALL_OW 247
8402: PUSH
8403: LD_INT 2
8405: EQUAL
8406: PUSH
8407: LD_VAR 0 4
8411: PPUSH
8412: CALL_OW 261
8416: PUSH
8417: LD_INT 100
8419: LESS
8420: AND
8421: IFFALSE 8467
// SetTaskList ( veh , [ [ X , 0 , 0 , cargo , 0 , 0 , 0 ] ] ) ;
8423: LD_VAR 0 4
8427: PPUSH
8428: LD_STRING X
8430: PUSH
8431: LD_INT 0
8433: PUSH
8434: LD_INT 0
8436: PUSH
8437: LD_VAR 0 2
8441: PUSH
8442: LD_INT 0
8444: PUSH
8445: LD_INT 0
8447: PUSH
8448: LD_INT 0
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: PUSH
8460: EMPTY
8461: LIST
8462: PPUSH
8463: CALL_OW 446
// end ;
8467: GO 8390
8469: POP
8470: POP
// end ;
8471: LD_VAR 0 3
8475: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
8476: LD_INT 0
8478: PPUSH
8479: PPUSH
// dir := GetDir ( bunker ) - 3 ;
8480: LD_ADDR_VAR 0 4
8484: PUSH
8485: LD_VAR 0 2
8489: PPUSH
8490: CALL_OW 254
8494: PUSH
8495: LD_INT 3
8497: MINUS
8498: ST_TO_ADDR
// if dir < 0 then
8499: LD_VAR 0 4
8503: PUSH
8504: LD_INT 0
8506: LESS
8507: IFFALSE 8523
// dir := 6 + dir ;
8509: LD_ADDR_VAR 0 4
8513: PUSH
8514: LD_INT 6
8516: PUSH
8517: LD_VAR 0 4
8521: PLUS
8522: ST_TO_ADDR
// SetDir ( un , dir ) ;
8523: LD_VAR 0 1
8527: PPUSH
8528: LD_VAR 0 4
8532: PPUSH
8533: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
8537: LD_VAR 0 1
8541: PPUSH
8542: LD_VAR 0 2
8546: PPUSH
8547: CALL_OW 52
// result = un ;
8551: LD_ADDR_VAR 0 3
8555: PUSH
8556: LD_VAR 0 1
8560: ST_TO_ADDR
// end ;
8561: LD_VAR 0 3
8565: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8566: LD_INT 0
8568: PPUSH
8569: PPUSH
8570: PPUSH
// uc_side := GetSide ( b ) ;
8571: LD_ADDR_OWVAR 20
8575: PUSH
8576: LD_VAR 0 2
8580: PPUSH
8581: CALL_OW 255
8585: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8586: LD_ADDR_OWVAR 21
8590: PUSH
8591: LD_VAR 0 2
8595: PPUSH
8596: CALL_OW 248
8600: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8601: LD_INT 0
8603: PPUSH
8604: LD_INT 1
8606: PPUSH
8607: LD_VAR 0 1
8611: PPUSH
8612: CALL_OW 380
// un = CreateHuman ;
8616: LD_ADDR_VAR 0 4
8620: PUSH
8621: CALL_OW 44
8625: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8626: LD_ADDR_VAR 0 5
8630: PUSH
8631: LD_VAR 0 2
8635: PPUSH
8636: CALL_OW 254
8640: PUSH
8641: LD_INT 3
8643: MINUS
8644: ST_TO_ADDR
// if dir < 0 then
8645: LD_VAR 0 5
8649: PUSH
8650: LD_INT 0
8652: LESS
8653: IFFALSE 8669
// dir := 6 + dir ;
8655: LD_ADDR_VAR 0 5
8659: PUSH
8660: LD_INT 6
8662: PUSH
8663: LD_VAR 0 5
8667: PLUS
8668: ST_TO_ADDR
// SetDir ( un , dir ) ;
8669: LD_VAR 0 4
8673: PPUSH
8674: LD_VAR 0 5
8678: PPUSH
8679: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8683: LD_VAR 0 4
8687: PPUSH
8688: LD_VAR 0 2
8692: PPUSH
8693: CALL_OW 52
// result = un ;
8697: LD_ADDR_VAR 0 3
8701: PUSH
8702: LD_VAR 0 4
8706: ST_TO_ADDR
// end ;
8707: LD_VAR 0 3
8711: RET
// export function AddComUpgradeBreastwork ( units , buildings , upgradeBType ) ; var building , x , y , dir ; begin
8712: LD_INT 0
8714: PPUSH
8715: PPUSH
8716: PPUSH
8717: PPUSH
8718: PPUSH
// for building in buildings do
8719: LD_ADDR_VAR 0 5
8723: PUSH
8724: LD_VAR 0 2
8728: PUSH
8729: FOR_IN
8730: IFFALSE 8822
// begin x = GetX ( building ) ;
8732: LD_ADDR_VAR 0 6
8736: PUSH
8737: LD_VAR 0 5
8741: PPUSH
8742: CALL_OW 250
8746: ST_TO_ADDR
// y = GetY ( building ) ;
8747: LD_ADDR_VAR 0 7
8751: PUSH
8752: LD_VAR 0 5
8756: PPUSH
8757: CALL_OW 251
8761: ST_TO_ADDR
// dir = GetDir ( building ) ;
8762: LD_ADDR_VAR 0 8
8766: PUSH
8767: LD_VAR 0 5
8771: PPUSH
8772: CALL_OW 254
8776: ST_TO_ADDR
// AddComDismantle ( units , building ) ;
8777: LD_VAR 0 1
8781: PPUSH
8782: LD_VAR 0 5
8786: PPUSH
8787: CALL_OW 227
// AddComBuild ( units , upgradeBType , x , y , dir ) ;
8791: LD_VAR 0 1
8795: PPUSH
8796: LD_VAR 0 3
8800: PPUSH
8801: LD_VAR 0 6
8805: PPUSH
8806: LD_VAR 0 7
8810: PPUSH
8811: LD_VAR 0 8
8815: PPUSH
8816: CALL_OW 205
// end ;
8820: GO 8729
8822: POP
8823: POP
// end ;
8824: LD_VAR 0 4
8828: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list , am_tech_list ; begin
8829: LD_INT 0
8831: PPUSH
8832: PPUSH
8833: PPUSH
8834: PPUSH
8835: PPUSH
8836: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8837: LD_ADDR_VAR 0 8
8841: PUSH
8842: LD_INT 48
8844: PUSH
8845: LD_INT 49
8847: PUSH
8848: LD_INT 50
8850: PUSH
8851: LD_INT 20
8853: PUSH
8854: LD_INT 1
8856: PUSH
8857: LD_INT 51
8859: PUSH
8860: LD_INT 52
8862: PUSH
8863: LD_INT 69
8865: PUSH
8866: LD_INT 39
8868: PUSH
8869: LD_INT 34
8871: PUSH
8872: LD_INT 40
8874: PUSH
8875: LD_INT 53
8877: PUSH
8878: LD_INT 71
8880: PUSH
8881: LD_INT 57
8883: PUSH
8884: LD_INT 58
8886: PUSH
8887: LD_INT 44
8889: PUSH
8890: LD_INT 32
8892: PUSH
8893: LD_INT 27
8895: PUSH
8896: LD_INT 23
8898: PUSH
8899: LD_INT 33
8901: PUSH
8902: LD_INT 59
8904: PUSH
8905: LD_INT 54
8907: PUSH
8908: LD_INT 55
8910: PUSH
8911: LD_INT 56
8913: PUSH
8914: LD_INT 63
8916: PUSH
8917: LD_INT 64
8919: PUSH
8920: LD_INT 65
8922: PUSH
8923: LD_INT 30
8925: PUSH
8926: LD_INT 31
8928: PUSH
8929: LD_INT 21
8931: PUSH
8932: LD_INT 22
8934: PUSH
8935: LD_INT 25
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: ST_TO_ADDR
// am_tech_list = GetTechNation ( 1 , 1 , state_enabled ) ;
8972: LD_ADDR_VAR 0 9
8976: PUSH
8977: LD_INT 1
8979: PPUSH
8980: LD_INT 1
8982: PPUSH
8983: LD_INT 1
8985: PPUSH
8986: CALL 31672 0 3
8990: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8991: LD_ADDR_VAR 0 5
8995: PUSH
8996: DOUBLE
8997: LD_INT 1
8999: DEC
9000: ST_TO_ADDR
9001: LD_VAR 0 8
9005: PUSH
9006: FOR_TO
9007: IFFALSE 9083
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
9009: LD_VAR 0 8
9013: PUSH
9014: LD_VAR 0 5
9018: ARRAY
9019: PPUSH
9020: LD_VAR 0 1
9024: PPUSH
9025: CALL_OW 321
9029: PUSH
9030: LD_INT 1
9032: EQUAL
9033: PUSH
9034: LD_VAR 0 8
9038: PUSH
9039: LD_VAR 0 5
9043: ARRAY
9044: PPUSH
9045: LD_VAR 0 3
9049: PPUSH
9050: CALL_OW 482
9054: PUSH
9055: LD_INT 1
9057: EQUAL
9058: AND
9059: IFFALSE 9081
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
9061: LD_VAR 0 2
9065: PPUSH
9066: LD_VAR 0 8
9070: PUSH
9071: LD_VAR 0 5
9075: ARRAY
9076: PPUSH
9077: CALL_OW 184
9081: GO 9006
9083: POP
9084: POP
// for i = 1 to am_tech_list do
9085: LD_ADDR_VAR 0 5
9089: PUSH
9090: DOUBLE
9091: LD_INT 1
9093: DEC
9094: ST_TO_ADDR
9095: LD_VAR 0 9
9099: PUSH
9100: FOR_TO
9101: IFFALSE 9177
// if GetTech ( am_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( am_tech_list [ i ] , nation ) = true then
9103: LD_VAR 0 9
9107: PUSH
9108: LD_VAR 0 5
9112: ARRAY
9113: PPUSH
9114: LD_VAR 0 1
9118: PPUSH
9119: CALL_OW 321
9123: PUSH
9124: LD_INT 1
9126: EQUAL
9127: PUSH
9128: LD_VAR 0 9
9132: PUSH
9133: LD_VAR 0 5
9137: ARRAY
9138: PPUSH
9139: LD_VAR 0 3
9143: PPUSH
9144: CALL_OW 482
9148: PUSH
9149: LD_INT 1
9151: EQUAL
9152: AND
9153: IFFALSE 9175
// AddComResearch ( lab , am_tech_list [ i ] ) ;
9155: LD_VAR 0 2
9159: PPUSH
9160: LD_VAR 0 9
9164: PUSH
9165: LD_VAR 0 5
9169: ARRAY
9170: PPUSH
9171: CALL_OW 184
9175: GO 9100
9177: POP
9178: POP
// end ;
9179: LD_VAR 0 4
9183: RET
// export function MoveKurinUnitsToBuildings ; var i , lab , fac , bunker , tmp , pom , canTakeUnits , diffUnits ; begin
9184: LD_INT 0
9186: PPUSH
9187: PPUSH
9188: PPUSH
9189: PPUSH
9190: PPUSH
9191: PPUSH
9192: PPUSH
9193: PPUSH
9194: PPUSH
// lab = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
9195: LD_ADDR_VAR 0 3
9199: PUSH
9200: LD_INT 22
9202: PUSH
9203: LD_INT 6
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PUSH
9210: LD_INT 21
9212: PUSH
9213: LD_INT 3
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 30
9222: PUSH
9223: LD_INT 6
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: LIST
9234: PPUSH
9235: CALL_OW 69
9239: PUSH
9240: LD_INT 1
9242: ARRAY
9243: ST_TO_ADDR
// fac = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9244: LD_ADDR_VAR 0 4
9248: PUSH
9249: LD_INT 22
9251: PUSH
9252: LD_INT 6
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: PUSH
9259: LD_INT 21
9261: PUSH
9262: LD_INT 3
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: LD_INT 30
9271: PUSH
9272: LD_INT 3
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: LIST
9283: PPUSH
9284: CALL_OW 69
9288: PUSH
9289: LD_INT 1
9291: ARRAY
9292: ST_TO_ADDR
// diffUnits = diffUnits ^ Kurin ;
9293: LD_ADDR_VAR 0 9
9297: PUSH
9298: LD_VAR 0 9
9302: PUSH
9303: LD_EXP 61
9307: ADD
9308: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
9309: LD_ADDR_VAR 0 9
9313: PUSH
9314: LD_VAR 0 9
9318: PUSH
9319: LD_EXP 79
9323: ADD
9324: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
9325: LD_ADDR_VAR 0 9
9329: PUSH
9330: LD_VAR 0 9
9334: PUSH
9335: LD_EXP 71
9339: ADD
9340: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9341: LD_ADDR_VAR 0 8
9345: PUSH
9346: LD_INT 18
9348: PPUSH
9349: LD_INT 22
9351: PUSH
9352: LD_INT 6
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: LD_INT 21
9361: PUSH
9362: LD_INT 1
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: LD_INT 3
9371: PUSH
9372: LD_INT 60
9374: PUSH
9375: EMPTY
9376: LIST
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: LIST
9386: PPUSH
9387: CALL_OW 70
9391: PUSH
9392: LD_VAR 0 9
9396: DIFF
9397: ST_TO_ADDR
// if not canTakeUnits then
9398: LD_VAR 0 8
9402: NOT
9403: IFFALSE 9436
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 4 , neededUnitsSpawn [ 3 ] + 2 ) ;
9405: LD_ADDR_EXP 81
9409: PUSH
9410: LD_EXP 81
9414: PPUSH
9415: LD_INT 4
9417: PPUSH
9418: LD_EXP 81
9422: PUSH
9423: LD_INT 3
9425: ARRAY
9426: PUSH
9427: LD_INT 2
9429: PLUS
9430: PPUSH
9431: CALL_OW 1
9435: ST_TO_ADDR
// if canTakeUnits > 2 then
9436: LD_VAR 0 8
9440: PUSH
9441: LD_INT 2
9443: GREATER
9444: IFFALSE 9514
// begin for i := 1 to rand ( 1 , 2 ) do
9446: LD_ADDR_VAR 0 2
9450: PUSH
9451: DOUBLE
9452: LD_INT 1
9454: DEC
9455: ST_TO_ADDR
9456: LD_INT 1
9458: PPUSH
9459: LD_INT 2
9461: PPUSH
9462: CALL_OW 12
9466: PUSH
9467: FOR_TO
9468: IFFALSE 9510
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9470: LD_VAR 0 8
9474: PUSH
9475: LD_VAR 0 2
9479: ARRAY
9480: PPUSH
9481: LD_VAR 0 3
9485: PPUSH
9486: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9490: LD_VAR 0 8
9494: PUSH
9495: LD_VAR 0 2
9499: ARRAY
9500: PPUSH
9501: LD_INT 4
9503: PPUSH
9504: CALL_OW 183
// end ;
9508: GO 9467
9510: POP
9511: POP
// end else
9512: GO 9582
// begin for i := 1 to rand ( 1 , canTakeUnits ) do
9514: LD_ADDR_VAR 0 2
9518: PUSH
9519: DOUBLE
9520: LD_INT 1
9522: DEC
9523: ST_TO_ADDR
9524: LD_INT 1
9526: PPUSH
9527: LD_VAR 0 8
9531: PPUSH
9532: CALL_OW 12
9536: PUSH
9537: FOR_TO
9538: IFFALSE 9580
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9540: LD_VAR 0 8
9544: PUSH
9545: LD_VAR 0 2
9549: ARRAY
9550: PPUSH
9551: LD_VAR 0 3
9555: PPUSH
9556: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9560: LD_VAR 0 8
9564: PUSH
9565: LD_VAR 0 2
9569: ARRAY
9570: PPUSH
9571: LD_INT 4
9573: PPUSH
9574: CALL_OW 183
// end ;
9578: GO 9537
9580: POP
9581: POP
// end ; wait ( 0 0$01 ) ;
9582: LD_INT 35
9584: PPUSH
9585: CALL_OW 67
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9589: LD_ADDR_VAR 0 8
9593: PUSH
9594: LD_INT 18
9596: PPUSH
9597: LD_INT 22
9599: PUSH
9600: LD_INT 6
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 21
9609: PUSH
9610: LD_INT 1
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 3
9619: PUSH
9620: LD_INT 60
9622: PUSH
9623: EMPTY
9624: LIST
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: LIST
9634: PPUSH
9635: CALL_OW 70
9639: PUSH
9640: LD_VAR 0 9
9644: DIFF
9645: ST_TO_ADDR
// pom = 6 ;
9646: LD_ADDR_VAR 0 7
9650: PUSH
9651: LD_INT 6
9653: ST_TO_ADDR
// if canTakeUnits then
9654: LD_VAR 0 8
9658: IFFALSE 9775
// for i = 1 to canTakeUnits do
9660: LD_ADDR_VAR 0 2
9664: PUSH
9665: DOUBLE
9666: LD_INT 1
9668: DEC
9669: ST_TO_ADDR
9670: LD_VAR 0 8
9674: PUSH
9675: FOR_TO
9676: IFFALSE 9773
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
9678: LD_VAR 0 8
9682: PUSH
9683: LD_VAR 0 2
9687: ARRAY
9688: PPUSH
9689: CALL_OW 257
9693: PUSH
9694: LD_INT 3
9696: NONEQUAL
9697: IFFALSE 9737
// begin ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9699: LD_VAR 0 8
9703: PUSH
9704: LD_VAR 0 2
9708: ARRAY
9709: PPUSH
9710: LD_VAR 0 4
9714: PPUSH
9715: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_mechanic ) ;
9719: LD_VAR 0 8
9723: PUSH
9724: LD_VAR 0 2
9728: ARRAY
9729: PPUSH
9730: LD_INT 3
9732: PPUSH
9733: CALL_OW 183
// end ; ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9737: LD_VAR 0 8
9741: PUSH
9742: LD_VAR 0 2
9746: ARRAY
9747: PPUSH
9748: LD_VAR 0 4
9752: PPUSH
9753: CALL_OW 120
// pom = pom - 1 ;
9757: LD_ADDR_VAR 0 7
9761: PUSH
9762: LD_VAR 0 7
9766: PUSH
9767: LD_INT 1
9769: MINUS
9770: ST_TO_ADDR
// end ;
9771: GO 9675
9773: POP
9774: POP
// if pom > 0 then
9775: LD_VAR 0 7
9779: PUSH
9780: LD_INT 0
9782: GREATER
9783: IFFALSE 9808
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
9785: LD_ADDR_EXP 81
9789: PUSH
9790: LD_EXP 81
9794: PPUSH
9795: LD_INT 3
9797: PPUSH
9798: LD_VAR 0 7
9802: PPUSH
9803: CALL_OW 1
9807: ST_TO_ADDR
// wait ( 0 0$01 ) ;
9808: LD_INT 35
9810: PPUSH
9811: CALL_OW 67
// for bunker in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_occupied ] ] ] ) do
9815: LD_ADDR_VAR 0 5
9819: PUSH
9820: LD_INT 22
9822: PUSH
9823: LD_INT 6
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: PUSH
9830: LD_INT 21
9832: PUSH
9833: LD_INT 3
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: LD_INT 30
9842: PUSH
9843: LD_INT 32
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 3
9852: PUSH
9853: LD_INT 59
9855: PUSH
9856: EMPTY
9857: LIST
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: PPUSH
9869: CALL_OW 69
9873: PUSH
9874: FOR_IN
9875: IFFALSE 10121
// begin canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9877: LD_ADDR_VAR 0 8
9881: PUSH
9882: LD_INT 18
9884: PPUSH
9885: LD_INT 22
9887: PUSH
9888: LD_INT 6
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PUSH
9895: LD_INT 21
9897: PUSH
9898: LD_INT 1
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PUSH
9905: LD_INT 3
9907: PUSH
9908: LD_INT 60
9910: PUSH
9911: EMPTY
9912: LIST
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: LIST
9922: PPUSH
9923: CALL_OW 70
9927: PUSH
9928: LD_VAR 0 9
9932: DIFF
9933: ST_TO_ADDR
// if canTakeUnits then
9934: LD_VAR 0 8
9938: IFFALSE 10072
// begin if GetClass ( canTakeUnits [ 1 ] ) <> 1 then
9940: LD_VAR 0 8
9944: PUSH
9945: LD_INT 1
9947: ARRAY
9948: PPUSH
9949: CALL_OW 257
9953: PUSH
9954: LD_INT 1
9956: NONEQUAL
9957: IFFALSE 10052
// begin ComEnterUnit ( canTakeUnits [ 1 ] , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
9959: LD_VAR 0 8
9963: PUSH
9964: LD_INT 1
9966: ARRAY
9967: PPUSH
9968: LD_INT 22
9970: PUSH
9971: LD_INT 6
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PUSH
9978: LD_INT 21
9980: PUSH
9981: LD_INT 3
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: PUSH
9988: LD_INT 30
9990: PUSH
9991: LD_INT 5
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: LIST
10002: PPUSH
10003: CALL_OW 69
10007: PUSH
10008: LD_INT 1
10010: ARRAY
10011: PPUSH
10012: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ 1 ] , 1 ) ;
10016: LD_VAR 0 8
10020: PUSH
10021: LD_INT 1
10023: ARRAY
10024: PPUSH
10025: LD_INT 1
10027: PPUSH
10028: CALL_OW 183
// AddComExitBuilding ( canTakeUnits [ 1 ] ) ;
10032: LD_VAR 0 8
10036: PUSH
10037: LD_INT 1
10039: ARRAY
10040: PPUSH
10041: CALL_OW 182
// wait ( 0 0$1 ) ;
10045: LD_INT 35
10047: PPUSH
10048: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ 1 ] , bunker ) ;
10052: LD_VAR 0 8
10056: PUSH
10057: LD_INT 1
10059: ARRAY
10060: PPUSH
10061: LD_VAR 0 5
10065: PPUSH
10066: CALL_OW 120
// end else
10070: GO 10119
// begin kirovBunkersToOccupy = kirovBunkersToOccupy ^ bunker ;
10072: LD_ADDR_EXP 73
10076: PUSH
10077: LD_EXP 73
10081: PUSH
10082: LD_VAR 0 5
10086: ADD
10087: ST_TO_ADDR
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 1 , neededUnitsSpawn [ 1 ] + 1 ) ;
10088: LD_ADDR_EXP 81
10092: PUSH
10093: LD_EXP 81
10097: PPUSH
10098: LD_INT 1
10100: PPUSH
10101: LD_EXP 81
10105: PUSH
10106: LD_INT 1
10108: ARRAY
10109: PUSH
10110: LD_INT 1
10112: PLUS
10113: PPUSH
10114: CALL_OW 1
10118: ST_TO_ADDR
// end ; end ;
10119: GO 9874
10121: POP
10122: POP
// end ;
10123: LD_VAR 0 1
10127: RET
// export function IsEnemyNear ( unit , enemySide ) ; var nearUnit ; begin
10128: LD_INT 0
10130: PPUSH
10131: PPUSH
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , enemySide ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ;
10132: LD_ADDR_VAR 0 4
10136: PUSH
10137: LD_INT 22
10139: PUSH
10140: LD_VAR 0 2
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: LD_INT 50
10151: PUSH
10152: EMPTY
10153: LIST
10154: PUSH
10155: LD_INT 2
10157: PUSH
10158: LD_INT 21
10160: PUSH
10161: LD_INT 1
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PUSH
10168: LD_INT 21
10170: PUSH
10171: LD_INT 2
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: LIST
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: LIST
10187: PPUSH
10188: CALL_OW 69
10192: PPUSH
10193: LD_VAR 0 1
10197: PPUSH
10198: CALL_OW 74
10202: ST_TO_ADDR
// if GetDistUnits ( nearUnit , unit ) < 13 then
10203: LD_VAR 0 4
10207: PPUSH
10208: LD_VAR 0 1
10212: PPUSH
10213: CALL_OW 296
10217: PUSH
10218: LD_INT 13
10220: LESS
10221: IFFALSE 10233
// begin result = true ;
10223: LD_ADDR_VAR 0 3
10227: PUSH
10228: LD_INT 1
10230: ST_TO_ADDR
// exit ;
10231: GO 10241
// end ; result = false ;
10233: LD_ADDR_VAR 0 3
10237: PUSH
10238: LD_INT 0
10240: ST_TO_ADDR
// end ;
10241: LD_VAR 0 3
10245: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
10246: LD_INT 0
10248: PPUSH
10249: PPUSH
10250: PPUSH
10251: PPUSH
10252: PPUSH
10253: PPUSH
10254: PPUSH
10255: PPUSH
10256: PPUSH
10257: PPUSH
10258: PPUSH
10259: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
10260: LD_VAR 0 1
10264: PPUSH
10265: CALL_OW 302
10269: NOT
10270: PUSH
10271: LD_VAR 0 4
10275: PUSH
10276: LD_INT 1
10278: EQUAL
10279: OR
10280: PUSH
10281: LD_VAR 0 2
10285: PPUSH
10286: LD_VAR 0 3
10290: PPUSH
10291: CALL_OW 488
10295: NOT
10296: OR
10297: PUSH
10298: LD_VAR 0 1
10302: PPUSH
10303: LD_VAR 0 2
10307: PPUSH
10308: LD_VAR 0 3
10312: PPUSH
10313: CALL_OW 297
10317: PUSH
10318: LD_VAR 0 4
10322: GREATEREQUAL
10323: OR
10324: PUSH
10325: LD_VAR 0 5
10329: PUSH
10330: LD_INT 1
10332: PUSH
10333: LD_INT 0
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: IN
10340: NOT
10341: OR
10342: IFFALSE 10346
// exit ;
10344: GO 11903
// attempts = 0 ;
10346: LD_ADDR_VAR 0 17
10350: PUSH
10351: LD_INT 0
10353: ST_TO_ADDR
// repeat list_nearest = [ ] ;
10354: LD_ADDR_VAR 0 7
10358: PUSH
10359: EMPTY
10360: ST_TO_ADDR
// list_coords = [ ] ;
10361: LD_ADDR_VAR 0 8
10365: PUSH
10366: EMPTY
10367: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
10368: LD_ADDR_VAR 0 9
10372: PUSH
10373: LD_VAR 0 2
10377: PPUSH
10378: LD_VAR 0 3
10382: PPUSH
10383: LD_VAR 0 1
10387: PPUSH
10388: CALL_OW 250
10392: PPUSH
10393: LD_VAR 0 1
10397: PPUSH
10398: CALL_OW 251
10402: PPUSH
10403: CALL 11908 0 4
10407: ST_TO_ADDR
// if attempts = 0 then
10408: LD_VAR 0 17
10412: PUSH
10413: LD_INT 0
10415: EQUAL
10416: IFFALSE 10524
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
10418: LD_ADDR_VAR 0 10
10422: PUSH
10423: LD_VAR 0 9
10427: PUSH
10428: LD_VAR 0 9
10432: PUSH
10433: LD_INT 1
10435: PLUS
10436: PUSH
10437: LD_VAR 0 9
10441: PUSH
10442: LD_INT 1
10444: MINUS
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: LIST
10450: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
10451: LD_VAR 0 10
10455: PUSH
10456: LD_INT 2
10458: ARRAY
10459: PUSH
10460: LD_INT 6
10462: EQUAL
10463: IFFALSE 10486
// dir_list = Replace ( dir_list , 2 , 0 ) ;
10465: LD_ADDR_VAR 0 10
10469: PUSH
10470: LD_VAR 0 10
10474: PPUSH
10475: LD_INT 2
10477: PPUSH
10478: LD_INT 0
10480: PPUSH
10481: CALL_OW 1
10485: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
10486: LD_VAR 0 10
10490: PUSH
10491: LD_INT 3
10493: ARRAY
10494: PUSH
10495: LD_INT 1
10497: NEG
10498: EQUAL
10499: IFFALSE 10522
// dir_list = Replace ( dir_list , 3 , 5 ) ;
10501: LD_ADDR_VAR 0 10
10505: PUSH
10506: LD_VAR 0 10
10510: PPUSH
10511: LD_INT 3
10513: PPUSH
10514: LD_INT 5
10516: PPUSH
10517: CALL_OW 1
10521: ST_TO_ADDR
// end else
10522: GO 10561
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
10524: LD_ADDR_VAR 0 10
10528: PUSH
10529: LD_INT 0
10531: PUSH
10532: LD_INT 1
10534: PUSH
10535: LD_INT 2
10537: PUSH
10538: LD_INT 3
10540: PUSH
10541: LD_INT 4
10543: PUSH
10544: LD_INT 5
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: PUSH
10555: LD_VAR 0 9
10559: DIFF
10560: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
10561: LD_ADDR_VAR 0 14
10565: PUSH
10566: DOUBLE
10567: LD_INT 1
10569: DEC
10570: ST_TO_ADDR
10571: LD_VAR 0 10
10575: PUSH
10576: LD_INT 0
10578: PLUS
10579: PUSH
10580: FOR_TO
10581: IFFALSE 10903
// case dir_list [ c ] of 0 :
10583: LD_VAR 0 10
10587: PUSH
10588: LD_VAR 0 14
10592: ARRAY
10593: PUSH
10594: LD_INT 0
10596: DOUBLE
10597: EQUAL
10598: IFTRUE 10602
10600: GO 10643
10602: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
10603: LD_ADDR_VAR 0 8
10607: PUSH
10608: LD_VAR 0 8
10612: PPUSH
10613: LD_INT 1
10615: PPUSH
10616: LD_VAR 0 2
10620: PUSH
10621: LD_VAR 0 3
10625: PUSH
10626: LD_VAR 0 4
10630: MINUS
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PPUSH
10636: CALL_OW 2
10640: ST_TO_ADDR
10641: GO 10901
10643: LD_INT 1
10645: DOUBLE
10646: EQUAL
10647: IFTRUE 10651
10649: GO 10692
10651: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
10652: LD_ADDR_VAR 0 8
10656: PUSH
10657: LD_VAR 0 8
10661: PPUSH
10662: LD_INT 1
10664: PPUSH
10665: LD_VAR 0 2
10669: PUSH
10670: LD_VAR 0 4
10674: PLUS
10675: PUSH
10676: LD_VAR 0 3
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PPUSH
10685: CALL_OW 2
10689: ST_TO_ADDR
10690: GO 10901
10692: LD_INT 2
10694: DOUBLE
10695: EQUAL
10696: IFTRUE 10700
10698: GO 10747
10700: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
10701: LD_ADDR_VAR 0 8
10705: PUSH
10706: LD_VAR 0 8
10710: PPUSH
10711: LD_INT 1
10713: PPUSH
10714: LD_VAR 0 2
10718: PUSH
10719: LD_VAR 0 4
10723: PLUS
10724: PUSH
10725: LD_VAR 0 3
10729: PUSH
10730: LD_VAR 0 4
10734: PLUS
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PPUSH
10740: CALL_OW 2
10744: ST_TO_ADDR
10745: GO 10901
10747: LD_INT 3
10749: DOUBLE
10750: EQUAL
10751: IFTRUE 10755
10753: GO 10796
10755: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
10756: LD_ADDR_VAR 0 8
10760: PUSH
10761: LD_VAR 0 8
10765: PPUSH
10766: LD_INT 1
10768: PPUSH
10769: LD_VAR 0 2
10773: PUSH
10774: LD_VAR 0 3
10778: PUSH
10779: LD_VAR 0 4
10783: PLUS
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PPUSH
10789: CALL_OW 2
10793: ST_TO_ADDR
10794: GO 10901
10796: LD_INT 4
10798: DOUBLE
10799: EQUAL
10800: IFTRUE 10804
10802: GO 10845
10804: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
10805: LD_ADDR_VAR 0 8
10809: PUSH
10810: LD_VAR 0 8
10814: PPUSH
10815: LD_INT 1
10817: PPUSH
10818: LD_VAR 0 2
10822: PUSH
10823: LD_VAR 0 4
10827: MINUS
10828: PUSH
10829: LD_VAR 0 3
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: PPUSH
10838: CALL_OW 2
10842: ST_TO_ADDR
10843: GO 10901
10845: LD_INT 5
10847: DOUBLE
10848: EQUAL
10849: IFTRUE 10853
10851: GO 10900
10853: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
10854: LD_ADDR_VAR 0 8
10858: PUSH
10859: LD_VAR 0 8
10863: PPUSH
10864: LD_INT 1
10866: PPUSH
10867: LD_VAR 0 2
10871: PUSH
10872: LD_VAR 0 4
10876: MINUS
10877: PUSH
10878: LD_VAR 0 3
10882: PUSH
10883: LD_VAR 0 4
10887: MINUS
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PPUSH
10893: CALL_OW 2
10897: ST_TO_ADDR
10898: GO 10901
10900: POP
10901: GO 10580
10903: POP
10904: POP
// if dist < 30 then
10905: LD_VAR 0 4
10909: PUSH
10910: LD_INT 30
10912: LESS
10913: IFFALSE 10925
// c = 1 else
10915: LD_ADDR_VAR 0 14
10919: PUSH
10920: LD_INT 1
10922: ST_TO_ADDR
10923: GO 10933
// c = 2 ;
10925: LD_ADDR_VAR 0 14
10929: PUSH
10930: LD_INT 2
10932: ST_TO_ADDR
// b = 1 ;
10933: LD_ADDR_VAR 0 11
10937: PUSH
10938: LD_INT 1
10940: ST_TO_ADDR
// while b <= ( dist - 1 ) do
10941: LD_VAR 0 11
10945: PUSH
10946: LD_VAR 0 4
10950: PUSH
10951: LD_INT 1
10953: MINUS
10954: LESSEQUAL
10955: IFFALSE 11383
// begin if 0 in dir_list and 1 in dir_list then
10957: LD_INT 0
10959: PUSH
10960: LD_VAR 0 10
10964: IN
10965: PUSH
10966: LD_INT 1
10968: PUSH
10969: LD_VAR 0 10
10973: IN
10974: AND
10975: IFFALSE 11027
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
10977: LD_ADDR_VAR 0 8
10981: PUSH
10982: LD_VAR 0 8
10986: PPUSH
10987: LD_INT 1
10989: PPUSH
10990: LD_VAR 0 2
10994: PUSH
10995: LD_VAR 0 11
10999: PLUS
11000: PUSH
11001: LD_VAR 0 3
11005: PUSH
11006: LD_VAR 0 4
11010: MINUS
11011: PUSH
11012: LD_VAR 0 11
11016: PLUS
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: PPUSH
11022: CALL_OW 2
11026: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
11027: LD_INT 1
11029: PUSH
11030: LD_VAR 0 10
11034: IN
11035: PUSH
11036: LD_INT 2
11038: PUSH
11039: LD_VAR 0 10
11043: IN
11044: AND
11045: IFFALSE 11091
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
11047: LD_ADDR_VAR 0 8
11051: PUSH
11052: LD_VAR 0 8
11056: PPUSH
11057: LD_INT 1
11059: PPUSH
11060: LD_VAR 0 2
11064: PUSH
11065: LD_VAR 0 4
11069: PLUS
11070: PUSH
11071: LD_VAR 0 3
11075: PUSH
11076: LD_VAR 0 11
11080: PLUS
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PPUSH
11086: CALL_OW 2
11090: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
11091: LD_INT 2
11093: PUSH
11094: LD_VAR 0 10
11098: IN
11099: PUSH
11100: LD_INT 3
11102: PUSH
11103: LD_VAR 0 10
11107: IN
11108: AND
11109: IFFALSE 11161
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
11111: LD_ADDR_VAR 0 8
11115: PUSH
11116: LD_VAR 0 8
11120: PPUSH
11121: LD_INT 1
11123: PPUSH
11124: LD_VAR 0 2
11128: PUSH
11129: LD_VAR 0 4
11133: PLUS
11134: PUSH
11135: LD_VAR 0 11
11139: MINUS
11140: PUSH
11141: LD_VAR 0 3
11145: PUSH
11146: LD_VAR 0 4
11150: PLUS
11151: PUSH
11152: EMPTY
11153: LIST
11154: LIST
11155: PPUSH
11156: CALL_OW 2
11160: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
11161: LD_INT 3
11163: PUSH
11164: LD_VAR 0 10
11168: IN
11169: PUSH
11170: LD_INT 4
11172: PUSH
11173: LD_VAR 0 10
11177: IN
11178: AND
11179: IFFALSE 11231
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
11181: LD_ADDR_VAR 0 8
11185: PUSH
11186: LD_VAR 0 8
11190: PPUSH
11191: LD_INT 1
11193: PPUSH
11194: LD_VAR 0 2
11198: PUSH
11199: LD_VAR 0 11
11203: MINUS
11204: PUSH
11205: LD_VAR 0 3
11209: PUSH
11210: LD_VAR 0 4
11214: PLUS
11215: PUSH
11216: LD_VAR 0 11
11220: MINUS
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PPUSH
11226: CALL_OW 2
11230: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
11231: LD_INT 4
11233: PUSH
11234: LD_VAR 0 10
11238: IN
11239: PUSH
11240: LD_INT 5
11242: PUSH
11243: LD_VAR 0 10
11247: IN
11248: AND
11249: IFFALSE 11295
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
11251: LD_ADDR_VAR 0 8
11255: PUSH
11256: LD_VAR 0 8
11260: PPUSH
11261: LD_INT 1
11263: PPUSH
11264: LD_VAR 0 2
11268: PUSH
11269: LD_VAR 0 4
11273: MINUS
11274: PUSH
11275: LD_VAR 0 3
11279: PUSH
11280: LD_VAR 0 11
11284: MINUS
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: PPUSH
11290: CALL_OW 2
11294: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
11295: LD_INT 5
11297: PUSH
11298: LD_VAR 0 10
11302: IN
11303: PUSH
11304: LD_INT 0
11306: PUSH
11307: LD_VAR 0 10
11311: IN
11312: AND
11313: IFFALSE 11365
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
11315: LD_ADDR_VAR 0 8
11319: PUSH
11320: LD_VAR 0 8
11324: PPUSH
11325: LD_INT 1
11327: PPUSH
11328: LD_VAR 0 2
11332: PUSH
11333: LD_VAR 0 4
11337: MINUS
11338: PUSH
11339: LD_VAR 0 11
11343: PLUS
11344: PUSH
11345: LD_VAR 0 3
11349: PUSH
11350: LD_VAR 0 4
11354: MINUS
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PPUSH
11360: CALL_OW 2
11364: ST_TO_ADDR
// b = b + c end ;
11365: LD_ADDR_VAR 0 11
11369: PUSH
11370: LD_VAR 0 11
11374: PUSH
11375: LD_VAR 0 14
11379: PLUS
11380: ST_TO_ADDR
11381: GO 10941
// if list_coords = 0 then
11383: LD_VAR 0 8
11387: PUSH
11388: LD_INT 0
11390: EQUAL
11391: IFFALSE 11395
// exit ;
11393: GO 11903
// repeat min_dist = 5000 ;
11395: LD_ADDR_VAR 0 12
11399: PUSH
11400: LD_INT 5000
11402: ST_TO_ADDR
// for b in list_coords do
11403: LD_ADDR_VAR 0 11
11407: PUSH
11408: LD_VAR 0 8
11412: PUSH
11413: FOR_IN
11414: IFFALSE 11473
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
11416: LD_ADDR_VAR 0 13
11420: PUSH
11421: LD_VAR 0 1
11425: PPUSH
11426: LD_VAR 0 11
11430: PUSH
11431: LD_INT 1
11433: ARRAY
11434: PPUSH
11435: LD_VAR 0 11
11439: PUSH
11440: LD_INT 2
11442: ARRAY
11443: PPUSH
11444: CALL_OW 297
11448: ST_TO_ADDR
// if temp_dist < min_dist then
11449: LD_VAR 0 13
11453: PUSH
11454: LD_VAR 0 12
11458: LESS
11459: IFFALSE 11471
// min_dist = temp_dist ;
11461: LD_ADDR_VAR 0 12
11465: PUSH
11466: LD_VAR 0 13
11470: ST_TO_ADDR
// end ;
11471: GO 11413
11473: POP
11474: POP
// c = 0 ;
11475: LD_ADDR_VAR 0 14
11479: PUSH
11480: LD_INT 0
11482: ST_TO_ADDR
// repeat c = c + 1 ;
11483: LD_ADDR_VAR 0 14
11487: PUSH
11488: LD_VAR 0 14
11492: PUSH
11493: LD_INT 1
11495: PLUS
11496: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
11497: LD_VAR 0 1
11501: PPUSH
11502: LD_VAR 0 8
11506: PUSH
11507: LD_VAR 0 14
11511: ARRAY
11512: PUSH
11513: LD_INT 1
11515: ARRAY
11516: PPUSH
11517: LD_VAR 0 8
11521: PUSH
11522: LD_VAR 0 14
11526: ARRAY
11527: PUSH
11528: LD_INT 2
11530: ARRAY
11531: PPUSH
11532: CALL_OW 297
11536: PUSH
11537: LD_VAR 0 12
11541: EQUAL
11542: IFFALSE 11607
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
11544: LD_ADDR_VAR 0 7
11548: PUSH
11549: LD_VAR 0 7
11553: PPUSH
11554: LD_INT 1
11556: PPUSH
11557: LD_VAR 0 8
11561: PUSH
11562: LD_VAR 0 14
11566: ARRAY
11567: PPUSH
11568: CALL_OW 2
11572: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
11573: LD_ADDR_VAR 0 8
11577: PUSH
11578: LD_VAR 0 8
11582: PPUSH
11583: LD_VAR 0 14
11587: PPUSH
11588: CALL_OW 3
11592: ST_TO_ADDR
// c = c - 1 ;
11593: LD_ADDR_VAR 0 14
11597: PUSH
11598: LD_VAR 0 14
11602: PUSH
11603: LD_INT 1
11605: MINUS
11606: ST_TO_ADDR
// end ; until c = list_coords ;
11607: LD_VAR 0 14
11611: PUSH
11612: LD_VAR 0 8
11616: EQUAL
11617: IFFALSE 11483
// c = 0 ;
11619: LD_ADDR_VAR 0 14
11623: PUSH
11624: LD_INT 0
11626: ST_TO_ADDR
// if list_nearest > 0 then
11627: LD_VAR 0 7
11631: PUSH
11632: LD_INT 0
11634: GREATER
11635: IFFALSE 11777
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
11637: LD_ADDR_VAR 0 15
11641: PUSH
11642: LD_INT 1
11644: PPUSH
11645: LD_VAR 0 7
11649: PPUSH
11650: CALL_OW 12
11654: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
11655: LD_ADDR_VAR 0 16
11659: PUSH
11660: LD_VAR 0 7
11664: PUSH
11665: LD_VAR 0 15
11669: ARRAY
11670: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
11671: LD_VAR 0 16
11675: PUSH
11676: LD_INT 1
11678: ARRAY
11679: PPUSH
11680: LD_VAR 0 16
11684: PUSH
11685: LD_INT 2
11687: ARRAY
11688: PPUSH
11689: CALL_OW 488
11693: PUSH
11694: LD_INT 0
11696: GREATER
11697: PUSH
11698: LD_VAR 0 16
11702: PUSH
11703: LD_INT 1
11705: ARRAY
11706: PPUSH
11707: LD_VAR 0 16
11711: PUSH
11712: LD_INT 2
11714: ARRAY
11715: PPUSH
11716: CALL_OW 428
11720: PUSH
11721: LD_INT 0
11723: EQUAL
11724: AND
11725: IFFALSE 11737
// c = 1 else
11727: LD_ADDR_VAR 0 14
11731: PUSH
11732: LD_INT 1
11734: ST_TO_ADDR
11735: GO 11757
// list_nearest = Delete ( list_nearest , rand_num ) ;
11737: LD_ADDR_VAR 0 7
11741: PUSH
11742: LD_VAR 0 7
11746: PPUSH
11747: LD_VAR 0 15
11751: PPUSH
11752: CALL_OW 3
11756: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
11757: LD_VAR 0 14
11761: PUSH
11762: LD_INT 1
11764: EQUAL
11765: PUSH
11766: LD_VAR 0 7
11770: PUSH
11771: LD_INT 0
11773: EQUAL
11774: OR
11775: IFFALSE 11637
// end ; until c = 1 or list_coords = 0 ;
11777: LD_VAR 0 14
11781: PUSH
11782: LD_INT 1
11784: EQUAL
11785: PUSH
11786: LD_VAR 0 8
11790: PUSH
11791: LD_INT 0
11793: EQUAL
11794: OR
11795: IFFALSE 11395
// attempts = attempts + 1 ;
11797: LD_ADDR_VAR 0 17
11801: PUSH
11802: LD_VAR 0 17
11806: PUSH
11807: LD_INT 1
11809: PLUS
11810: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
11811: LD_VAR 0 14
11815: PUSH
11816: LD_INT 1
11818: EQUAL
11819: PUSH
11820: LD_VAR 0 17
11824: PUSH
11825: LD_INT 1
11827: GREATER
11828: OR
11829: IFFALSE 10354
// if c = 1 then
11831: LD_VAR 0 14
11835: PUSH
11836: LD_INT 1
11838: EQUAL
11839: IFFALSE 11903
// if add then
11841: LD_VAR 0 5
11845: IFFALSE 11876
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
11847: LD_VAR 0 1
11851: PPUSH
11852: LD_VAR 0 16
11856: PUSH
11857: LD_INT 1
11859: ARRAY
11860: PPUSH
11861: LD_VAR 0 16
11865: PUSH
11866: LD_INT 2
11868: ARRAY
11869: PPUSH
11870: CALL_OW 171
11874: GO 11903
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
11876: LD_VAR 0 1
11880: PPUSH
11881: LD_VAR 0 16
11885: PUSH
11886: LD_INT 1
11888: ARRAY
11889: PPUSH
11890: LD_VAR 0 16
11894: PUSH
11895: LD_INT 2
11897: ARRAY
11898: PPUSH
11899: CALL_OW 111
// end ;
11903: LD_VAR 0 6
11907: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
11908: LD_INT 0
11910: PPUSH
11911: PPUSH
11912: PPUSH
11913: PPUSH
11914: PPUSH
11915: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
11916: LD_VAR 0 1
11920: PPUSH
11921: LD_VAR 0 2
11925: PPUSH
11926: CALL_OW 488
11930: NOT
11931: PUSH
11932: LD_VAR 0 3
11936: PPUSH
11937: LD_VAR 0 4
11941: PPUSH
11942: CALL_OW 488
11946: NOT
11947: OR
11948: IFFALSE 11961
// begin result = - 1 ;
11950: LD_ADDR_VAR 0 5
11954: PUSH
11955: LD_INT 1
11957: NEG
11958: ST_TO_ADDR
// exit ;
11959: GO 12121
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
11961: LD_ADDR_VAR 0 6
11965: PUSH
11966: LD_VAR 0 1
11970: PPUSH
11971: LD_VAR 0 2
11975: PPUSH
11976: LD_VAR 0 3
11980: PPUSH
11981: LD_VAR 0 4
11985: PPUSH
11986: CALL_OW 298
11990: ST_TO_ADDR
// dist_2 = 99999 ;
11991: LD_ADDR_VAR 0 7
11995: PUSH
11996: LD_INT 99999
11998: ST_TO_ADDR
// for b = 0 to 5 do
11999: LD_ADDR_VAR 0 8
12003: PUSH
12004: DOUBLE
12005: LD_INT 0
12007: DEC
12008: ST_TO_ADDR
12009: LD_INT 5
12011: PUSH
12012: FOR_TO
12013: IFFALSE 12109
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
12015: LD_ADDR_VAR 0 9
12019: PUSH
12020: LD_VAR 0 1
12024: PPUSH
12025: LD_VAR 0 8
12029: PPUSH
12030: LD_VAR 0 6
12034: PPUSH
12035: CALL_OW 272
12039: PPUSH
12040: LD_VAR 0 2
12044: PPUSH
12045: LD_VAR 0 8
12049: PPUSH
12050: LD_VAR 0 6
12054: PPUSH
12055: CALL_OW 273
12059: PPUSH
12060: LD_VAR 0 3
12064: PPUSH
12065: LD_VAR 0 4
12069: PPUSH
12070: CALL_OW 298
12074: ST_TO_ADDR
// if temp_dist < dist_2 then
12075: LD_VAR 0 9
12079: PUSH
12080: LD_VAR 0 7
12084: LESS
12085: IFFALSE 12107
// begin dist_2 = temp_dist ;
12087: LD_ADDR_VAR 0 7
12091: PUSH
12092: LD_VAR 0 9
12096: ST_TO_ADDR
// dir = b ;
12097: LD_ADDR_VAR 0 10
12101: PUSH
12102: LD_VAR 0 8
12106: ST_TO_ADDR
// end ; end ;
12107: GO 12012
12109: POP
12110: POP
// result = dir ;
12111: LD_ADDR_VAR 0 5
12115: PUSH
12116: LD_VAR 0 10
12120: ST_TO_ADDR
// end ; end_of_file
12121: LD_VAR 0 5
12125: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
12126: LD_INT 0
12128: PPUSH
12129: PPUSH
12130: PPUSH
12131: PPUSH
12132: PPUSH
12133: PPUSH
12134: PPUSH
12135: PPUSH
12136: PPUSH
12137: PPUSH
12138: PPUSH
12139: PPUSH
12140: PPUSH
12141: PPUSH
12142: PPUSH
12143: PPUSH
12144: PPUSH
12145: PPUSH
12146: PPUSH
12147: PPUSH
12148: PPUSH
12149: PPUSH
12150: PPUSH
12151: PPUSH
12152: PPUSH
12153: PPUSH
12154: PPUSH
12155: PPUSH
// personel = [ ] ;
12156: LD_ADDR_VAR 0 18
12160: PUSH
12161: EMPTY
12162: ST_TO_ADDR
// vehicles = [ ] ;
12163: LD_ADDR_VAR 0 24
12167: PUSH
12168: EMPTY
12169: ST_TO_ADDR
// for unit in basePersonel do
12170: LD_ADDR_VAR 0 17
12174: PUSH
12175: LD_VAR 0 3
12179: PUSH
12180: FOR_IN
12181: IFFALSE 12229
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
12183: LD_ADDR_VAR 0 18
12187: PUSH
12188: LD_VAR 0 18
12192: PUSH
12193: LD_VAR 0 17
12197: PUSH
12198: LD_VAR 0 17
12202: PPUSH
12203: CALL_OW 310
12207: PUSH
12208: LD_VAR 0 17
12212: PPUSH
12213: CALL_OW 302
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: PUSH
12223: EMPTY
12224: LIST
12225: ADD
12226: ST_TO_ADDR
12227: GO 12180
12229: POP
12230: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) do
12231: LD_ADDR_VAR 0 23
12235: PUSH
12236: LD_VAR 0 4
12240: PPUSH
12241: LD_INT 22
12243: PUSH
12244: LD_VAR 0 1
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: PUSH
12253: LD_INT 21
12255: PUSH
12256: LD_INT 2
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PUSH
12263: LD_INT 50
12265: PUSH
12266: EMPTY
12267: LIST
12268: PUSH
12269: LD_INT 3
12271: PUSH
12272: LD_INT 2
12274: PUSH
12275: LD_INT 34
12277: PUSH
12278: LD_INT 12
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PUSH
12285: LD_INT 34
12287: PUSH
12288: LD_INT 51
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PUSH
12295: LD_INT 34
12297: PUSH
12298: LD_INT 32
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: PPUSH
12321: CALL_OW 70
12325: PUSH
12326: FOR_IN
12327: IFFALSE 12375
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
12329: LD_ADDR_VAR 0 24
12333: PUSH
12334: LD_VAR 0 24
12338: PUSH
12339: LD_VAR 0 23
12343: PUSH
12344: LD_VAR 0 23
12348: PPUSH
12349: CALL_OW 310
12353: PUSH
12354: LD_VAR 0 23
12358: PPUSH
12359: CALL_OW 302
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: LIST
12368: PUSH
12369: EMPTY
12370: LIST
12371: ADD
12372: ST_TO_ADDR
12373: GO 12326
12375: POP
12376: POP
// repeat soldiers = [ ] ;
12377: LD_ADDR_VAR 0 19
12381: PUSH
12382: EMPTY
12383: ST_TO_ADDR
// engineers = [ ] ;
12384: LD_ADDR_VAR 0 20
12388: PUSH
12389: EMPTY
12390: ST_TO_ADDR
// mechanics = [ ] ;
12391: LD_ADDR_VAR 0 21
12395: PUSH
12396: EMPTY
12397: ST_TO_ADDR
// scientists = [ ] ;
12398: LD_ADDR_VAR 0 22
12402: PUSH
12403: EMPTY
12404: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12405: LD_ADDR_VAR 0 29
12409: PUSH
12410: LD_VAR 0 4
12414: PPUSH
12415: LD_INT 22
12417: PUSH
12418: LD_VAR 0 1
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PUSH
12427: LD_INT 21
12429: PUSH
12430: LD_INT 3
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: LD_INT 50
12439: PUSH
12440: EMPTY
12441: LIST
12442: PUSH
12443: LD_INT 2
12445: PUSH
12446: LD_INT 30
12448: PUSH
12449: LD_INT 0
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PUSH
12456: LD_INT 30
12458: PUSH
12459: LD_INT 1
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: LIST
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: PPUSH
12477: CALL_OW 70
12481: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
12482: LD_ADDR_VAR 0 30
12486: PUSH
12487: LD_VAR 0 4
12491: PPUSH
12492: LD_INT 22
12494: PUSH
12495: LD_VAR 0 1
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PUSH
12504: LD_INT 21
12506: PUSH
12507: LD_INT 3
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: LD_INT 50
12516: PUSH
12517: EMPTY
12518: LIST
12519: PUSH
12520: LD_INT 2
12522: PUSH
12523: LD_INT 30
12525: PUSH
12526: LD_INT 2
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: PUSH
12533: LD_INT 30
12535: PUSH
12536: LD_INT 3
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: LIST
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: PPUSH
12554: CALL_OW 70
12558: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
12559: LD_ADDR_VAR 0 31
12563: PUSH
12564: LD_VAR 0 4
12568: PPUSH
12569: LD_INT 22
12571: PUSH
12572: LD_VAR 0 1
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PUSH
12581: LD_INT 21
12583: PUSH
12584: LD_INT 3
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PUSH
12591: LD_INT 50
12593: PUSH
12594: EMPTY
12595: LIST
12596: PUSH
12597: LD_INT 2
12599: PUSH
12600: LD_INT 30
12602: PUSH
12603: LD_INT 6
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PUSH
12610: LD_INT 30
12612: PUSH
12613: LD_INT 7
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 30
12622: PUSH
12623: LD_INT 8
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: PPUSH
12642: CALL_OW 70
12646: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
12647: LD_ADDR_VAR 0 32
12651: PUSH
12652: LD_VAR 0 4
12656: PPUSH
12657: LD_INT 22
12659: PUSH
12660: LD_VAR 0 1
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PUSH
12669: LD_INT 21
12671: PUSH
12672: LD_INT 3
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PUSH
12679: LD_INT 50
12681: PUSH
12682: EMPTY
12683: LIST
12684: PUSH
12685: LD_INT 2
12687: PUSH
12688: LD_INT 30
12690: PUSH
12691: LD_INT 31
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PUSH
12698: LD_INT 30
12700: PUSH
12701: LD_INT 32
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: LIST
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: PPUSH
12719: CALL_OW 70
12723: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
12724: LD_ADDR_VAR 0 33
12728: PUSH
12729: LD_VAR 0 4
12733: PPUSH
12734: LD_INT 22
12736: PUSH
12737: LD_VAR 0 1
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PUSH
12746: LD_INT 21
12748: PUSH
12749: LD_INT 3
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PUSH
12756: LD_INT 50
12758: PUSH
12759: EMPTY
12760: LIST
12761: PUSH
12762: LD_INT 2
12764: PUSH
12765: LD_INT 30
12767: PUSH
12768: LD_INT 4
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: PUSH
12775: LD_INT 30
12777: PUSH
12778: LD_INT 5
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: LIST
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: PPUSH
12796: CALL_OW 70
12800: ST_TO_ADDR
// for i := 1 to personel do
12801: LD_ADDR_VAR 0 13
12805: PUSH
12806: DOUBLE
12807: LD_INT 1
12809: DEC
12810: ST_TO_ADDR
12811: LD_VAR 0 18
12815: PUSH
12816: FOR_TO
12817: IFFALSE 13023
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
12819: LD_VAR 0 18
12823: PUSH
12824: LD_VAR 0 13
12828: ARRAY
12829: PUSH
12830: LD_INT 1
12832: ARRAY
12833: PPUSH
12834: CALL_OW 256
12838: PUSH
12839: LD_INT 1000
12841: EQUAL
12842: IFFALSE 12884
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
12844: LD_ADDR_VAR 0 18
12848: PUSH
12849: LD_VAR 0 18
12853: PPUSH
12854: LD_VAR 0 13
12858: PUSH
12859: LD_VAR 0 18
12863: PUSH
12864: LD_VAR 0 13
12868: ARRAY
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: PPUSH
12874: LD_INT 1
12876: PPUSH
12877: CALL 36555 0 3
12881: ST_TO_ADDR
// end else
12882: GO 12971
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
12884: LD_VAR 0 18
12888: PUSH
12889: LD_VAR 0 13
12893: ARRAY
12894: PUSH
12895: LD_INT 1
12897: ARRAY
12898: PPUSH
12899: CALL_OW 256
12903: PUSH
12904: LD_INT 950
12906: LESSEQUAL
12907: IFFALSE 12971
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 0 ) ;
12909: LD_ADDR_VAR 0 18
12913: PUSH
12914: LD_VAR 0 18
12918: PPUSH
12919: LD_VAR 0 13
12923: PUSH
12924: LD_VAR 0 18
12928: PUSH
12929: LD_VAR 0 13
12933: ARRAY
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PPUSH
12939: LD_INT 0
12941: PPUSH
12942: CALL 36555 0 3
12946: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
12947: LD_VAR 0 18
12951: PUSH
12952: LD_VAR 0 13
12956: ARRAY
12957: PUSH
12958: LD_INT 1
12960: ARRAY
12961: PPUSH
12962: LD_VAR 0 5
12966: PPUSH
12967: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
12971: LD_VAR 0 18
12975: PUSH
12976: LD_VAR 0 13
12980: ARRAY
12981: PUSH
12982: LD_INT 1
12984: ARRAY
12985: PPUSH
12986: CALL_OW 256
12990: PUSH
12991: LD_INT 250
12993: LESS
12994: IFFALSE 13021
// personel = personel diff [ personel [ i ] ] ;
12996: LD_ADDR_VAR 0 18
13000: PUSH
13001: LD_VAR 0 18
13005: PUSH
13006: LD_VAR 0 18
13010: PUSH
13011: LD_VAR 0 13
13015: ARRAY
13016: PUSH
13017: EMPTY
13018: LIST
13019: DIFF
13020: ST_TO_ADDR
// end ;
13021: GO 12816
13023: POP
13024: POP
// for i := 1 to vehicles do
13025: LD_ADDR_VAR 0 13
13029: PUSH
13030: DOUBLE
13031: LD_INT 1
13033: DEC
13034: ST_TO_ADDR
13035: LD_VAR 0 24
13039: PUSH
13040: FOR_TO
13041: IFFALSE 13427
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
13043: LD_VAR 0 24
13047: PUSH
13048: LD_VAR 0 13
13052: ARRAY
13053: PUSH
13054: LD_INT 1
13056: ARRAY
13057: PPUSH
13058: CALL_OW 261
13062: PUSH
13063: LD_INT 50
13065: LESS
13066: IFFALSE 13090
// SetFuel ( vehicles [ i ] [ 1 ] , 100 ) ;
13068: LD_VAR 0 24
13072: PUSH
13073: LD_VAR 0 13
13077: ARRAY
13078: PUSH
13079: LD_INT 1
13081: ARRAY
13082: PPUSH
13083: LD_INT 100
13085: PPUSH
13086: CALL_OW 240
// if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
13090: LD_VAR 0 24
13094: PUSH
13095: LD_VAR 0 13
13099: ARRAY
13100: PUSH
13101: LD_INT 1
13103: ARRAY
13104: PPUSH
13105: CALL_OW 256
13109: PUSH
13110: LD_INT 1000
13112: EQUAL
13113: IFFALSE 13288
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
13115: LD_VAR 0 24
13119: PUSH
13120: LD_VAR 0 13
13124: ARRAY
13125: PUSH
13126: LD_INT 1
13128: ARRAY
13129: PPUSH
13130: CALL_OW 263
13134: PUSH
13135: LD_INT 1
13137: EQUAL
13138: IFFALSE 13196
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
13140: LD_VAR 0 24
13144: PUSH
13145: LD_VAR 0 13
13149: ARRAY
13150: PUSH
13151: LD_INT 2
13153: ARRAY
13154: PPUSH
13155: CALL_OW 310
13159: NOT
13160: IFFALSE 13196
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
13162: LD_VAR 0 24
13166: PUSH
13167: LD_VAR 0 13
13171: ARRAY
13172: PUSH
13173: LD_INT 2
13175: ARRAY
13176: PPUSH
13177: LD_VAR 0 24
13181: PUSH
13182: LD_VAR 0 13
13186: ARRAY
13187: PUSH
13188: LD_INT 1
13190: ARRAY
13191: PPUSH
13192: CALL_OW 120
// if vehicles < vehiclesToAttackAmount then
13196: LD_VAR 0 24
13200: PUSH
13201: LD_VAR 0 10
13205: LESS
13206: IFFALSE 13248
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) else
13208: LD_ADDR_VAR 0 24
13212: PUSH
13213: LD_VAR 0 24
13217: PPUSH
13218: LD_VAR 0 13
13222: PUSH
13223: LD_VAR 0 24
13227: PUSH
13228: LD_VAR 0 13
13232: ARRAY
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PPUSH
13238: LD_INT 1
13240: PPUSH
13241: CALL 36555 0 3
13245: ST_TO_ADDR
13246: GO 13286
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
13248: LD_ADDR_VAR 0 24
13252: PUSH
13253: LD_VAR 0 24
13257: PPUSH
13258: LD_VAR 0 13
13262: PUSH
13263: LD_VAR 0 24
13267: PUSH
13268: LD_VAR 0 13
13272: ARRAY
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PPUSH
13278: LD_INT 2
13280: PPUSH
13281: CALL 36555 0 3
13285: ST_TO_ADDR
// end else
13286: GO 13375
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
13288: LD_VAR 0 24
13292: PUSH
13293: LD_VAR 0 13
13297: ARRAY
13298: PUSH
13299: LD_INT 1
13301: ARRAY
13302: PPUSH
13303: CALL_OW 256
13307: PUSH
13308: LD_INT 650
13310: LESSEQUAL
13311: IFFALSE 13375
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
13313: LD_ADDR_VAR 0 24
13317: PUSH
13318: LD_VAR 0 24
13322: PPUSH
13323: LD_VAR 0 13
13327: PUSH
13328: LD_VAR 0 24
13332: PUSH
13333: LD_VAR 0 13
13337: ARRAY
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: PPUSH
13343: LD_INT 0
13345: PPUSH
13346: CALL 36555 0 3
13350: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
13351: LD_VAR 0 24
13355: PUSH
13356: LD_VAR 0 13
13360: ARRAY
13361: PUSH
13362: LD_INT 1
13364: ARRAY
13365: PPUSH
13366: LD_VAR 0 6
13370: PPUSH
13371: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
13375: LD_VAR 0 24
13379: PUSH
13380: LD_VAR 0 13
13384: ARRAY
13385: PUSH
13386: LD_INT 1
13388: ARRAY
13389: PPUSH
13390: CALL_OW 256
13394: PUSH
13395: LD_INT 250
13397: LESS
13398: IFFALSE 13425
// vehicles = vehicles diff [ vehicles [ i ] ] ;
13400: LD_ADDR_VAR 0 24
13404: PUSH
13405: LD_VAR 0 24
13409: PUSH
13410: LD_VAR 0 24
13414: PUSH
13415: LD_VAR 0 13
13419: ARRAY
13420: PUSH
13421: EMPTY
13422: LIST
13423: DIFF
13424: ST_TO_ADDR
// end ;
13425: GO 13040
13427: POP
13428: POP
// for i := 1 to personel do
13429: LD_ADDR_VAR 0 13
13433: PUSH
13434: DOUBLE
13435: LD_INT 1
13437: DEC
13438: ST_TO_ADDR
13439: LD_VAR 0 18
13443: PUSH
13444: FOR_TO
13445: IFFALSE 13486
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
13447: LD_ADDR_VAR 0 19
13451: PUSH
13452: LD_VAR 0 19
13456: PUSH
13457: LD_VAR 0 18
13461: PUSH
13462: LD_VAR 0 13
13466: ARRAY
13467: PPUSH
13468: LD_INT 25
13470: PUSH
13471: LD_INT 1
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PPUSH
13478: CALL_OW 72
13482: ADD
13483: ST_TO_ADDR
13484: GO 13444
13486: POP
13487: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
13488: LD_VAR 0 19
13492: PUSH
13493: LD_VAR 0 32
13497: PPUSH
13498: LD_INT 3
13500: PUSH
13501: LD_INT 59
13503: PUSH
13504: EMPTY
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PPUSH
13511: CALL_OW 72
13515: AND
13516: IFFALSE 13804
// begin for i := 1 to personel do
13518: LD_ADDR_VAR 0 13
13522: PUSH
13523: DOUBLE
13524: LD_INT 1
13526: DEC
13527: ST_TO_ADDR
13528: LD_VAR 0 18
13532: PUSH
13533: FOR_TO
13534: IFFALSE 13800
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
13536: LD_VAR 0 18
13540: PUSH
13541: LD_VAR 0 13
13545: ARRAY
13546: PUSH
13547: LD_INT 1
13549: ARRAY
13550: PPUSH
13551: CALL_OW 257
13555: PUSH
13556: LD_INT 1
13558: EQUAL
13559: PUSH
13560: LD_VAR 0 18
13564: PUSH
13565: LD_VAR 0 13
13569: ARRAY
13570: PUSH
13571: LD_INT 3
13573: ARRAY
13574: PUSH
13575: LD_INT 1
13577: EQUAL
13578: AND
13579: IFFALSE 13798
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13581: LD_VAR 0 18
13585: PUSH
13586: LD_VAR 0 13
13590: ARRAY
13591: PUSH
13592: LD_INT 1
13594: ARRAY
13595: PPUSH
13596: CALL_OW 437
13600: IFFALSE 13701
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
13602: LD_VAR 0 18
13606: PUSH
13607: LD_VAR 0 13
13611: ARRAY
13612: PUSH
13613: LD_INT 1
13615: ARRAY
13616: PPUSH
13617: CALL_OW 437
13621: PUSH
13622: LD_INT 1
13624: ARRAY
13625: PUSH
13626: LD_INT 1
13628: ARRAY
13629: PUSH
13630: LD_STRING e
13632: EQUAL
13633: PUSH
13634: LD_VAR 0 18
13638: PUSH
13639: LD_VAR 0 13
13643: ARRAY
13644: PUSH
13645: LD_INT 1
13647: ARRAY
13648: PPUSH
13649: CALL_OW 437
13653: PUSH
13654: LD_INT 1
13656: ARRAY
13657: PUSH
13658: LD_INT 4
13660: ARRAY
13661: PPUSH
13662: CALL_OW 266
13666: PUSH
13667: LD_INT 4
13669: PUSH
13670: LD_INT 5
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: IN
13677: AND
13678: IFFALSE 13701
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13680: LD_VAR 0 18
13684: PUSH
13685: LD_VAR 0 13
13689: ARRAY
13690: PUSH
13691: LD_INT 1
13693: ARRAY
13694: PPUSH
13695: EMPTY
13696: PPUSH
13697: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
13701: LD_ADDR_VAR 0 36
13705: PUSH
13706: LD_VAR 0 32
13710: PPUSH
13711: LD_INT 3
13713: PUSH
13714: LD_INT 59
13716: PUSH
13717: EMPTY
13718: LIST
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PPUSH
13724: CALL_OW 72
13728: PUSH
13729: FOR_IN
13730: IFFALSE 13796
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
13732: LD_VAR 0 18
13736: PUSH
13737: LD_VAR 0 13
13741: ARRAY
13742: PUSH
13743: LD_INT 1
13745: ARRAY
13746: PPUSH
13747: CALL_OW 310
13751: PPUSH
13752: CALL_OW 266
13756: PUSH
13757: LD_INT 31
13759: PUSH
13760: LD_INT 32
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: IN
13767: NOT
13768: IFFALSE 13794
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
13770: LD_VAR 0 18
13774: PUSH
13775: LD_VAR 0 13
13779: ARRAY
13780: PUSH
13781: LD_INT 1
13783: ARRAY
13784: PPUSH
13785: LD_VAR 0 36
13789: PPUSH
13790: CALL_OW 120
13794: GO 13729
13796: POP
13797: POP
// end ; end ;
13798: GO 13533
13800: POP
13801: POP
// end else
13802: GO 14019
// if soldiers and barracks then
13804: LD_VAR 0 19
13808: PUSH
13809: LD_VAR 0 33
13813: AND
13814: IFFALSE 14019
// for i := 1 to personel do
13816: LD_ADDR_VAR 0 13
13820: PUSH
13821: DOUBLE
13822: LD_INT 1
13824: DEC
13825: ST_TO_ADDR
13826: LD_VAR 0 18
13830: PUSH
13831: FOR_TO
13832: IFFALSE 14017
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
13834: LD_VAR 0 18
13838: PUSH
13839: LD_VAR 0 13
13843: ARRAY
13844: PUSH
13845: LD_INT 1
13847: ARRAY
13848: PPUSH
13849: CALL_OW 257
13853: PUSH
13854: LD_INT 1
13856: EQUAL
13857: PUSH
13858: LD_VAR 0 18
13862: PUSH
13863: LD_VAR 0 13
13867: ARRAY
13868: PUSH
13869: LD_INT 3
13871: ARRAY
13872: PUSH
13873: LD_INT 1
13875: EQUAL
13876: AND
13877: PUSH
13878: LD_VAR 0 18
13882: PUSH
13883: LD_VAR 0 13
13887: ARRAY
13888: PUSH
13889: LD_INT 1
13891: ARRAY
13892: PPUSH
13893: LD_INT 56
13895: PUSH
13896: EMPTY
13897: LIST
13898: PPUSH
13899: CALL_OW 72
13903: AND
13904: IFFALSE 14015
// begin if not personel [ i ] [ 2 ] then
13906: LD_VAR 0 18
13910: PUSH
13911: LD_VAR 0 13
13915: ARRAY
13916: PUSH
13917: LD_INT 2
13919: ARRAY
13920: NOT
13921: IFFALSE 13981
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
13923: LD_ADDR_VAR 0 18
13927: PUSH
13928: LD_VAR 0 18
13932: PPUSH
13933: LD_VAR 0 13
13937: PUSH
13938: LD_VAR 0 18
13942: PUSH
13943: LD_VAR 0 13
13947: ARRAY
13948: PUSH
13949: LD_INT 1
13951: MINUS
13952: PUSH
13953: EMPTY
13954: LIST
13955: LIST
13956: PPUSH
13957: LD_VAR 0 33
13961: PUSH
13962: LD_INT 1
13964: PPUSH
13965: LD_VAR 0 33
13969: PPUSH
13970: CALL_OW 12
13974: ARRAY
13975: PPUSH
13976: CALL 36555 0 3
13980: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13981: LD_VAR 0 18
13985: PUSH
13986: LD_VAR 0 13
13990: ARRAY
13991: PUSH
13992: LD_INT 1
13994: ARRAY
13995: PPUSH
13996: LD_VAR 0 18
14000: PUSH
14001: LD_VAR 0 13
14005: ARRAY
14006: PUSH
14007: LD_INT 2
14009: ARRAY
14010: PPUSH
14011: CALL_OW 120
// end ;
14015: GO 13831
14017: POP
14018: POP
// for i := 1 to personel do
14019: LD_ADDR_VAR 0 13
14023: PUSH
14024: DOUBLE
14025: LD_INT 1
14027: DEC
14028: ST_TO_ADDR
14029: LD_VAR 0 18
14033: PUSH
14034: FOR_TO
14035: IFFALSE 14076
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
14037: LD_ADDR_VAR 0 20
14041: PUSH
14042: LD_VAR 0 20
14046: PUSH
14047: LD_VAR 0 18
14051: PUSH
14052: LD_VAR 0 13
14056: ARRAY
14057: PPUSH
14058: LD_INT 25
14060: PUSH
14061: LD_INT 2
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PPUSH
14068: CALL_OW 72
14072: ADD
14073: ST_TO_ADDR
14074: GO 14034
14076: POP
14077: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14078: LD_VAR 0 20
14082: PUSH
14083: LD_VAR 0 4
14087: PPUSH
14088: LD_INT 22
14090: PUSH
14091: LD_VAR 0 1
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PUSH
14100: LD_INT 21
14102: PUSH
14103: LD_INT 3
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: LD_INT 3
14112: PUSH
14113: LD_INT 24
14115: PUSH
14116: LD_INT 1000
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: LIST
14131: PPUSH
14132: CALL_OW 70
14136: AND
14137: IFFALSE 14413
// begin for i := 1 to personel do
14139: LD_ADDR_VAR 0 13
14143: PUSH
14144: DOUBLE
14145: LD_INT 1
14147: DEC
14148: ST_TO_ADDR
14149: LD_VAR 0 18
14153: PUSH
14154: FOR_TO
14155: IFFALSE 14409
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
14157: LD_VAR 0 18
14161: PUSH
14162: LD_VAR 0 13
14166: ARRAY
14167: PUSH
14168: LD_INT 1
14170: ARRAY
14171: PPUSH
14172: CALL_OW 257
14176: PUSH
14177: LD_INT 2
14179: EQUAL
14180: PUSH
14181: LD_VAR 0 18
14185: PUSH
14186: LD_VAR 0 13
14190: ARRAY
14191: PUSH
14192: LD_INT 3
14194: ARRAY
14195: PUSH
14196: LD_INT 1
14198: EQUAL
14199: AND
14200: IFFALSE 14407
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14202: LD_VAR 0 18
14206: PUSH
14207: LD_VAR 0 13
14211: ARRAY
14212: PUSH
14213: LD_INT 1
14215: ARRAY
14216: PPUSH
14217: CALL_OW 437
14221: IFFALSE 14277
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14223: LD_VAR 0 18
14227: PUSH
14228: LD_VAR 0 13
14232: ARRAY
14233: PUSH
14234: LD_INT 1
14236: ARRAY
14237: PPUSH
14238: CALL_OW 437
14242: PUSH
14243: LD_INT 1
14245: ARRAY
14246: PUSH
14247: LD_INT 1
14249: ARRAY
14250: PUSH
14251: LD_STRING e
14253: EQUAL
14254: IFFALSE 14277
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14256: LD_VAR 0 18
14260: PUSH
14261: LD_VAR 0 13
14265: ARRAY
14266: PUSH
14267: LD_INT 1
14269: ARRAY
14270: PPUSH
14271: EMPTY
14272: PPUSH
14273: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14277: LD_VAR 0 18
14281: PUSH
14282: LD_VAR 0 13
14286: ARRAY
14287: PUSH
14288: LD_INT 1
14290: ARRAY
14291: PPUSH
14292: CALL_OW 310
14296: IFFALSE 14317
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14298: LD_VAR 0 18
14302: PUSH
14303: LD_VAR 0 13
14307: ARRAY
14308: PUSH
14309: LD_INT 1
14311: ARRAY
14312: PPUSH
14313: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14317: LD_ADDR_VAR 0 34
14321: PUSH
14322: LD_VAR 0 4
14326: PPUSH
14327: LD_INT 22
14329: PUSH
14330: LD_VAR 0 1
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PUSH
14339: LD_INT 21
14341: PUSH
14342: LD_INT 3
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PUSH
14349: LD_INT 3
14351: PUSH
14352: LD_INT 24
14354: PUSH
14355: LD_INT 1000
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: LIST
14370: PPUSH
14371: CALL_OW 70
14375: PUSH
14376: FOR_IN
14377: IFFALSE 14405
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
14379: LD_VAR 0 18
14383: PUSH
14384: LD_VAR 0 13
14388: ARRAY
14389: PUSH
14390: LD_INT 1
14392: ARRAY
14393: PPUSH
14394: LD_VAR 0 34
14398: PPUSH
14399: CALL_OW 190
14403: GO 14376
14405: POP
14406: POP
// end ;
14407: GO 14154
14409: POP
14410: POP
// end else
14411: GO 14675
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
14413: LD_VAR 0 20
14417: PUSH
14418: LD_VAR 0 20
14422: PPUSH
14423: LD_INT 56
14425: PUSH
14426: EMPTY
14427: LIST
14428: PPUSH
14429: CALL_OW 72
14433: AND
14434: PUSH
14435: LD_VAR 0 29
14439: AND
14440: IFFALSE 14675
// for i := 1 to personel do
14442: LD_ADDR_VAR 0 13
14446: PUSH
14447: DOUBLE
14448: LD_INT 1
14450: DEC
14451: ST_TO_ADDR
14452: LD_VAR 0 18
14456: PUSH
14457: FOR_TO
14458: IFFALSE 14673
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
14460: LD_VAR 0 18
14464: PUSH
14465: LD_VAR 0 13
14469: ARRAY
14470: PUSH
14471: LD_INT 1
14473: ARRAY
14474: PPUSH
14475: CALL_OW 257
14479: PUSH
14480: LD_INT 2
14482: EQUAL
14483: PUSH
14484: LD_VAR 0 18
14488: PUSH
14489: LD_VAR 0 13
14493: ARRAY
14494: PUSH
14495: LD_INT 3
14497: ARRAY
14498: PUSH
14499: LD_INT 1
14501: EQUAL
14502: AND
14503: IFFALSE 14671
// begin if not personel [ i ] [ 2 ] then
14505: LD_VAR 0 18
14509: PUSH
14510: LD_VAR 0 13
14514: ARRAY
14515: PUSH
14516: LD_INT 2
14518: ARRAY
14519: NOT
14520: IFFALSE 14637
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
14522: LD_ADDR_VAR 0 18
14526: PUSH
14527: LD_VAR 0 18
14531: PPUSH
14532: LD_VAR 0 13
14536: PUSH
14537: LD_VAR 0 18
14541: PUSH
14542: LD_VAR 0 13
14546: ARRAY
14547: PUSH
14548: LD_INT 1
14550: MINUS
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PPUSH
14556: LD_VAR 0 4
14560: PPUSH
14561: LD_INT 22
14563: PUSH
14564: LD_VAR 0 1
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: PUSH
14573: LD_INT 21
14575: PUSH
14576: LD_INT 3
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PUSH
14583: LD_INT 50
14585: PUSH
14586: EMPTY
14587: LIST
14588: PUSH
14589: LD_INT 2
14591: PUSH
14592: LD_INT 30
14594: PUSH
14595: LD_INT 0
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: LD_INT 30
14604: PUSH
14605: LD_INT 1
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: LIST
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: PPUSH
14623: CALL_OW 70
14627: PUSH
14628: LD_INT 1
14630: ARRAY
14631: PPUSH
14632: CALL 36555 0 3
14636: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14637: LD_VAR 0 18
14641: PUSH
14642: LD_VAR 0 13
14646: ARRAY
14647: PUSH
14648: LD_INT 1
14650: ARRAY
14651: PPUSH
14652: LD_VAR 0 18
14656: PUSH
14657: LD_VAR 0 13
14661: ARRAY
14662: PUSH
14663: LD_INT 2
14665: ARRAY
14666: PPUSH
14667: CALL_OW 120
// end ; end ;
14671: GO 14457
14673: POP
14674: POP
// for i := 1 to personel do
14675: LD_ADDR_VAR 0 13
14679: PUSH
14680: DOUBLE
14681: LD_INT 1
14683: DEC
14684: ST_TO_ADDR
14685: LD_VAR 0 18
14689: PUSH
14690: FOR_TO
14691: IFFALSE 14732
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
14693: LD_ADDR_VAR 0 21
14697: PUSH
14698: LD_VAR 0 21
14702: PUSH
14703: LD_VAR 0 18
14707: PUSH
14708: LD_VAR 0 13
14712: ARRAY
14713: PPUSH
14714: LD_INT 25
14716: PUSH
14717: LD_INT 3
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PPUSH
14724: CALL_OW 72
14728: ADD
14729: ST_TO_ADDR
14730: GO 14690
14732: POP
14733: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14734: LD_VAR 0 21
14738: PUSH
14739: LD_VAR 0 4
14743: PPUSH
14744: LD_INT 22
14746: PUSH
14747: LD_VAR 0 1
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PUSH
14756: LD_INT 21
14758: PUSH
14759: LD_INT 2
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: LD_INT 3
14768: PUSH
14769: LD_INT 24
14771: PUSH
14772: LD_INT 1000
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: LIST
14787: PPUSH
14788: CALL_OW 70
14792: AND
14793: IFFALSE 15397
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14795: LD_ADDR_VAR 0 35
14799: PUSH
14800: LD_VAR 0 4
14804: PPUSH
14805: LD_INT 22
14807: PUSH
14808: LD_VAR 0 1
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 21
14819: PUSH
14820: LD_INT 2
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: LD_INT 3
14829: PUSH
14830: LD_INT 24
14832: PUSH
14833: LD_INT 1000
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: LIST
14848: PPUSH
14849: CALL_OW 70
14853: PUSH
14854: FOR_IN
14855: IFFALSE 15393
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
14857: LD_VAR 0 35
14861: PPUSH
14862: LD_VAR 0 6
14866: PPUSH
14867: CALL_OW 299
14871: PUSH
14872: LD_INT 5
14874: LESS
14875: IFFALSE 15170
// begin for i := 1 to vehicles do
14877: LD_ADDR_VAR 0 13
14881: PUSH
14882: DOUBLE
14883: LD_INT 1
14885: DEC
14886: ST_TO_ADDR
14887: LD_VAR 0 24
14891: PUSH
14892: FOR_TO
14893: IFFALSE 14962
// begin if vehicles [ i ] [ 1 ] = damageUnit then
14895: LD_VAR 0 24
14899: PUSH
14900: LD_VAR 0 13
14904: ARRAY
14905: PUSH
14906: LD_INT 1
14908: ARRAY
14909: PUSH
14910: LD_VAR 0 35
14914: EQUAL
14915: IFFALSE 14936
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
14917: LD_VAR 0 24
14921: PUSH
14922: LD_VAR 0 13
14926: ARRAY
14927: PUSH
14928: LD_INT 2
14930: ARRAY
14931: PPUSH
14932: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
14936: LD_VAR 0 24
14940: PUSH
14941: LD_VAR 0 13
14945: ARRAY
14946: PUSH
14947: LD_INT 2
14949: ARRAY
14950: PPUSH
14951: LD_VAR 0 35
14955: PPUSH
14956: CALL_OW 189
// end ;
14960: GO 14892
14962: POP
14963: POP
// for i := 1 to personel do
14964: LD_ADDR_VAR 0 13
14968: PUSH
14969: DOUBLE
14970: LD_INT 1
14972: DEC
14973: ST_TO_ADDR
14974: LD_VAR 0 18
14978: PUSH
14979: FOR_TO
14980: IFFALSE 15168
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14982: LD_VAR 0 18
14986: PUSH
14987: LD_VAR 0 13
14991: ARRAY
14992: PUSH
14993: LD_INT 1
14995: ARRAY
14996: PPUSH
14997: CALL_OW 257
15001: PUSH
15002: LD_INT 3
15004: EQUAL
15005: PUSH
15006: LD_VAR 0 18
15010: PUSH
15011: LD_VAR 0 13
15015: ARRAY
15016: PUSH
15017: LD_INT 3
15019: ARRAY
15020: PUSH
15021: LD_INT 1
15023: EQUAL
15024: AND
15025: IFFALSE 15166
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15027: LD_VAR 0 18
15031: PUSH
15032: LD_VAR 0 13
15036: ARRAY
15037: PUSH
15038: LD_INT 1
15040: ARRAY
15041: PPUSH
15042: CALL_OW 437
15046: IFFALSE 15102
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15048: LD_VAR 0 18
15052: PUSH
15053: LD_VAR 0 13
15057: ARRAY
15058: PUSH
15059: LD_INT 1
15061: ARRAY
15062: PPUSH
15063: CALL_OW 437
15067: PUSH
15068: LD_INT 1
15070: ARRAY
15071: PUSH
15072: LD_INT 1
15074: ARRAY
15075: PUSH
15076: LD_STRING e
15078: EQUAL
15079: IFFALSE 15102
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15081: LD_VAR 0 18
15085: PUSH
15086: LD_VAR 0 13
15090: ARRAY
15091: PUSH
15092: LD_INT 1
15094: ARRAY
15095: PPUSH
15096: EMPTY
15097: PPUSH
15098: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15102: LD_VAR 0 18
15106: PUSH
15107: LD_VAR 0 13
15111: ARRAY
15112: PUSH
15113: LD_INT 1
15115: ARRAY
15116: PPUSH
15117: CALL_OW 310
15121: IFFALSE 15142
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15123: LD_VAR 0 18
15127: PUSH
15128: LD_VAR 0 13
15132: ARRAY
15133: PUSH
15134: LD_INT 1
15136: ARRAY
15137: PPUSH
15138: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
15142: LD_VAR 0 18
15146: PUSH
15147: LD_VAR 0 13
15151: ARRAY
15152: PUSH
15153: LD_INT 1
15155: ARRAY
15156: PPUSH
15157: LD_VAR 0 35
15161: PPUSH
15162: CALL_OW 189
// end ;
15166: GO 14979
15168: POP
15169: POP
// end ; if GetLives ( damageUnit ) < 250 then
15170: LD_VAR 0 35
15174: PPUSH
15175: CALL_OW 256
15179: PUSH
15180: LD_INT 250
15182: LESS
15183: IFFALSE 15391
// for i := 1 to personel do
15185: LD_ADDR_VAR 0 13
15189: PUSH
15190: DOUBLE
15191: LD_INT 1
15193: DEC
15194: ST_TO_ADDR
15195: LD_VAR 0 18
15199: PUSH
15200: FOR_TO
15201: IFFALSE 15389
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15203: LD_VAR 0 18
15207: PUSH
15208: LD_VAR 0 13
15212: ARRAY
15213: PUSH
15214: LD_INT 1
15216: ARRAY
15217: PPUSH
15218: CALL_OW 257
15222: PUSH
15223: LD_INT 3
15225: EQUAL
15226: PUSH
15227: LD_VAR 0 18
15231: PUSH
15232: LD_VAR 0 13
15236: ARRAY
15237: PUSH
15238: LD_INT 3
15240: ARRAY
15241: PUSH
15242: LD_INT 1
15244: EQUAL
15245: AND
15246: IFFALSE 15387
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15248: LD_VAR 0 18
15252: PUSH
15253: LD_VAR 0 13
15257: ARRAY
15258: PUSH
15259: LD_INT 1
15261: ARRAY
15262: PPUSH
15263: CALL_OW 437
15267: IFFALSE 15323
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15269: LD_VAR 0 18
15273: PUSH
15274: LD_VAR 0 13
15278: ARRAY
15279: PUSH
15280: LD_INT 1
15282: ARRAY
15283: PPUSH
15284: CALL_OW 437
15288: PUSH
15289: LD_INT 1
15291: ARRAY
15292: PUSH
15293: LD_INT 1
15295: ARRAY
15296: PUSH
15297: LD_STRING e
15299: EQUAL
15300: IFFALSE 15323
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15302: LD_VAR 0 18
15306: PUSH
15307: LD_VAR 0 13
15311: ARRAY
15312: PUSH
15313: LD_INT 1
15315: ARRAY
15316: PPUSH
15317: EMPTY
15318: PPUSH
15319: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15323: LD_VAR 0 18
15327: PUSH
15328: LD_VAR 0 13
15332: ARRAY
15333: PUSH
15334: LD_INT 1
15336: ARRAY
15337: PPUSH
15338: CALL_OW 310
15342: IFFALSE 15363
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15344: LD_VAR 0 18
15348: PUSH
15349: LD_VAR 0 13
15353: ARRAY
15354: PUSH
15355: LD_INT 1
15357: ARRAY
15358: PPUSH
15359: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
15363: LD_VAR 0 18
15367: PUSH
15368: LD_VAR 0 13
15372: ARRAY
15373: PUSH
15374: LD_INT 1
15376: ARRAY
15377: PPUSH
15378: LD_VAR 0 35
15382: PPUSH
15383: CALL_OW 189
// end ;
15387: GO 15200
15389: POP
15390: POP
// end ;
15391: GO 14854
15393: POP
15394: POP
// end else
15395: GO 15602
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
15397: LD_VAR 0 21
15401: PUSH
15402: LD_VAR 0 21
15406: PPUSH
15407: LD_INT 56
15409: PUSH
15410: EMPTY
15411: LIST
15412: PPUSH
15413: CALL_OW 72
15417: AND
15418: PUSH
15419: LD_VAR 0 30
15423: AND
15424: IFFALSE 15602
// for i := 1 to personel do
15426: LD_ADDR_VAR 0 13
15430: PUSH
15431: DOUBLE
15432: LD_INT 1
15434: DEC
15435: ST_TO_ADDR
15436: LD_VAR 0 18
15440: PUSH
15441: FOR_TO
15442: IFFALSE 15600
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15444: LD_VAR 0 18
15448: PUSH
15449: LD_VAR 0 13
15453: ARRAY
15454: PUSH
15455: LD_INT 1
15457: ARRAY
15458: PPUSH
15459: CALL_OW 257
15463: PUSH
15464: LD_INT 3
15466: EQUAL
15467: PUSH
15468: LD_VAR 0 18
15472: PUSH
15473: LD_VAR 0 13
15477: ARRAY
15478: PUSH
15479: LD_INT 3
15481: ARRAY
15482: PUSH
15483: LD_INT 1
15485: EQUAL
15486: AND
15487: IFFALSE 15598
// begin if not personel [ i ] [ 2 ] then
15489: LD_VAR 0 18
15493: PUSH
15494: LD_VAR 0 13
15498: ARRAY
15499: PUSH
15500: LD_INT 2
15502: ARRAY
15503: NOT
15504: IFFALSE 15564
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
15506: LD_ADDR_VAR 0 18
15510: PUSH
15511: LD_VAR 0 18
15515: PPUSH
15516: LD_VAR 0 13
15520: PUSH
15521: LD_VAR 0 18
15525: PUSH
15526: LD_VAR 0 13
15530: ARRAY
15531: PUSH
15532: LD_INT 1
15534: MINUS
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: PPUSH
15540: LD_VAR 0 30
15544: PUSH
15545: LD_INT 1
15547: PPUSH
15548: LD_VAR 0 30
15552: PPUSH
15553: CALL_OW 12
15557: ARRAY
15558: PPUSH
15559: CALL 36555 0 3
15563: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15564: LD_VAR 0 18
15568: PUSH
15569: LD_VAR 0 13
15573: ARRAY
15574: PUSH
15575: LD_INT 1
15577: ARRAY
15578: PPUSH
15579: LD_VAR 0 18
15583: PUSH
15584: LD_VAR 0 13
15588: ARRAY
15589: PUSH
15590: LD_INT 2
15592: ARRAY
15593: PPUSH
15594: CALL_OW 120
// end ;
15598: GO 15441
15600: POP
15601: POP
// for i := 1 to personel do
15602: LD_ADDR_VAR 0 13
15606: PUSH
15607: DOUBLE
15608: LD_INT 1
15610: DEC
15611: ST_TO_ADDR
15612: LD_VAR 0 18
15616: PUSH
15617: FOR_TO
15618: IFFALSE 15659
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
15620: LD_ADDR_VAR 0 22
15624: PUSH
15625: LD_VAR 0 22
15629: PUSH
15630: LD_VAR 0 18
15634: PUSH
15635: LD_VAR 0 13
15639: ARRAY
15640: PPUSH
15641: LD_INT 25
15643: PUSH
15644: LD_INT 4
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PPUSH
15651: CALL_OW 72
15655: ADD
15656: ST_TO_ADDR
15657: GO 15617
15659: POP
15660: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
15661: LD_VAR 0 22
15665: PUSH
15666: LD_VAR 0 4
15670: PPUSH
15671: LD_INT 22
15673: PUSH
15674: LD_VAR 0 1
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PUSH
15683: LD_INT 21
15685: PUSH
15686: LD_INT 1
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 3
15695: PUSH
15696: LD_INT 24
15698: PUSH
15699: LD_INT 1000
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: LIST
15714: PPUSH
15715: CALL_OW 70
15719: AND
15720: IFFALSE 16237
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
15722: LD_ADDR_VAR 0 35
15726: PUSH
15727: LD_VAR 0 4
15731: PPUSH
15732: LD_INT 22
15734: PUSH
15735: LD_VAR 0 1
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: LD_INT 21
15746: PUSH
15747: LD_INT 1
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PUSH
15754: LD_INT 3
15756: PUSH
15757: LD_INT 24
15759: PUSH
15760: LD_INT 1000
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: LIST
15775: PPUSH
15776: CALL_OW 70
15780: PUSH
15781: FOR_IN
15782: IFFALSE 16233
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
15784: LD_VAR 0 35
15788: PPUSH
15789: LD_VAR 0 5
15793: PPUSH
15794: CALL_OW 299
15798: PUSH
15799: LD_INT 5
15801: LESS
15802: IFFALSE 16010
// for i := 1 to personel do
15804: LD_ADDR_VAR 0 13
15808: PUSH
15809: DOUBLE
15810: LD_INT 1
15812: DEC
15813: ST_TO_ADDR
15814: LD_VAR 0 18
15818: PUSH
15819: FOR_TO
15820: IFFALSE 16008
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15822: LD_VAR 0 18
15826: PUSH
15827: LD_VAR 0 13
15831: ARRAY
15832: PUSH
15833: LD_INT 1
15835: ARRAY
15836: PPUSH
15837: CALL_OW 257
15841: PUSH
15842: LD_INT 4
15844: EQUAL
15845: PUSH
15846: LD_VAR 0 18
15850: PUSH
15851: LD_VAR 0 13
15855: ARRAY
15856: PUSH
15857: LD_INT 3
15859: ARRAY
15860: PUSH
15861: LD_INT 1
15863: EQUAL
15864: AND
15865: IFFALSE 16006
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15867: LD_VAR 0 18
15871: PUSH
15872: LD_VAR 0 13
15876: ARRAY
15877: PUSH
15878: LD_INT 1
15880: ARRAY
15881: PPUSH
15882: CALL_OW 437
15886: IFFALSE 15942
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15888: LD_VAR 0 18
15892: PUSH
15893: LD_VAR 0 13
15897: ARRAY
15898: PUSH
15899: LD_INT 1
15901: ARRAY
15902: PPUSH
15903: CALL_OW 437
15907: PUSH
15908: LD_INT 1
15910: ARRAY
15911: PUSH
15912: LD_INT 1
15914: ARRAY
15915: PUSH
15916: LD_STRING e
15918: EQUAL
15919: IFFALSE 15942
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15921: LD_VAR 0 18
15925: PUSH
15926: LD_VAR 0 13
15930: ARRAY
15931: PUSH
15932: LD_INT 1
15934: ARRAY
15935: PPUSH
15936: EMPTY
15937: PPUSH
15938: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15942: LD_VAR 0 18
15946: PUSH
15947: LD_VAR 0 13
15951: ARRAY
15952: PUSH
15953: LD_INT 1
15955: ARRAY
15956: PPUSH
15957: CALL_OW 310
15961: IFFALSE 15982
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15963: LD_VAR 0 18
15967: PUSH
15968: LD_VAR 0 13
15972: ARRAY
15973: PUSH
15974: LD_INT 1
15976: ARRAY
15977: PPUSH
15978: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
15982: LD_VAR 0 18
15986: PUSH
15987: LD_VAR 0 13
15991: ARRAY
15992: PUSH
15993: LD_INT 1
15995: ARRAY
15996: PPUSH
15997: LD_VAR 0 35
16001: PPUSH
16002: CALL_OW 188
// end ;
16006: GO 15819
16008: POP
16009: POP
// if GetLives ( damageUnit ) < 250 then
16010: LD_VAR 0 35
16014: PPUSH
16015: CALL_OW 256
16019: PUSH
16020: LD_INT 250
16022: LESS
16023: IFFALSE 16231
// for i := 1 to personel do
16025: LD_ADDR_VAR 0 13
16029: PUSH
16030: DOUBLE
16031: LD_INT 1
16033: DEC
16034: ST_TO_ADDR
16035: LD_VAR 0 18
16039: PUSH
16040: FOR_TO
16041: IFFALSE 16229
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
16043: LD_VAR 0 18
16047: PUSH
16048: LD_VAR 0 13
16052: ARRAY
16053: PUSH
16054: LD_INT 1
16056: ARRAY
16057: PPUSH
16058: CALL_OW 257
16062: PUSH
16063: LD_INT 4
16065: EQUAL
16066: PUSH
16067: LD_VAR 0 18
16071: PUSH
16072: LD_VAR 0 13
16076: ARRAY
16077: PUSH
16078: LD_INT 3
16080: ARRAY
16081: PUSH
16082: LD_INT 1
16084: EQUAL
16085: AND
16086: IFFALSE 16227
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
16088: LD_VAR 0 18
16092: PUSH
16093: LD_VAR 0 13
16097: ARRAY
16098: PUSH
16099: LD_INT 1
16101: ARRAY
16102: PPUSH
16103: CALL_OW 437
16107: IFFALSE 16163
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
16109: LD_VAR 0 18
16113: PUSH
16114: LD_VAR 0 13
16118: ARRAY
16119: PUSH
16120: LD_INT 1
16122: ARRAY
16123: PPUSH
16124: CALL_OW 437
16128: PUSH
16129: LD_INT 1
16131: ARRAY
16132: PUSH
16133: LD_INT 1
16135: ARRAY
16136: PUSH
16137: LD_STRING e
16139: EQUAL
16140: IFFALSE 16163
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
16142: LD_VAR 0 18
16146: PUSH
16147: LD_VAR 0 13
16151: ARRAY
16152: PUSH
16153: LD_INT 1
16155: ARRAY
16156: PPUSH
16157: EMPTY
16158: PPUSH
16159: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
16163: LD_VAR 0 18
16167: PUSH
16168: LD_VAR 0 13
16172: ARRAY
16173: PUSH
16174: LD_INT 1
16176: ARRAY
16177: PPUSH
16178: CALL_OW 310
16182: IFFALSE 16203
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
16184: LD_VAR 0 18
16188: PUSH
16189: LD_VAR 0 13
16193: ARRAY
16194: PUSH
16195: LD_INT 1
16197: ARRAY
16198: PPUSH
16199: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
16203: LD_VAR 0 18
16207: PUSH
16208: LD_VAR 0 13
16212: ARRAY
16213: PUSH
16214: LD_INT 1
16216: ARRAY
16217: PPUSH
16218: LD_VAR 0 35
16222: PPUSH
16223: CALL_OW 188
// end ;
16227: GO 16040
16229: POP
16230: POP
// end ;
16231: GO 15781
16233: POP
16234: POP
// end else
16235: GO 16442
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
16237: LD_VAR 0 22
16241: PUSH
16242: LD_VAR 0 22
16246: PPUSH
16247: LD_INT 56
16249: PUSH
16250: EMPTY
16251: LIST
16252: PPUSH
16253: CALL_OW 72
16257: AND
16258: PUSH
16259: LD_VAR 0 31
16263: AND
16264: IFFALSE 16442
// for i := 1 to personel do
16266: LD_ADDR_VAR 0 13
16270: PUSH
16271: DOUBLE
16272: LD_INT 1
16274: DEC
16275: ST_TO_ADDR
16276: LD_VAR 0 18
16280: PUSH
16281: FOR_TO
16282: IFFALSE 16440
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
16284: LD_VAR 0 18
16288: PUSH
16289: LD_VAR 0 13
16293: ARRAY
16294: PUSH
16295: LD_INT 1
16297: ARRAY
16298: PPUSH
16299: CALL_OW 257
16303: PUSH
16304: LD_INT 4
16306: EQUAL
16307: PUSH
16308: LD_VAR 0 18
16312: PUSH
16313: LD_VAR 0 13
16317: ARRAY
16318: PUSH
16319: LD_INT 3
16321: ARRAY
16322: PUSH
16323: LD_INT 1
16325: EQUAL
16326: AND
16327: IFFALSE 16438
// begin if not personel [ i ] [ 2 ] then
16329: LD_VAR 0 18
16333: PUSH
16334: LD_VAR 0 13
16338: ARRAY
16339: PUSH
16340: LD_INT 2
16342: ARRAY
16343: NOT
16344: IFFALSE 16404
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
16346: LD_ADDR_VAR 0 18
16350: PUSH
16351: LD_VAR 0 18
16355: PPUSH
16356: LD_VAR 0 13
16360: PUSH
16361: LD_VAR 0 18
16365: PUSH
16366: LD_VAR 0 13
16370: ARRAY
16371: PUSH
16372: LD_INT 1
16374: MINUS
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PPUSH
16380: LD_VAR 0 31
16384: PUSH
16385: LD_INT 1
16387: PPUSH
16388: LD_VAR 0 31
16392: PPUSH
16393: CALL_OW 12
16397: ARRAY
16398: PPUSH
16399: CALL 36555 0 3
16403: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
16404: LD_VAR 0 18
16408: PUSH
16409: LD_VAR 0 13
16413: ARRAY
16414: PUSH
16415: LD_INT 1
16417: ARRAY
16418: PPUSH
16419: LD_VAR 0 18
16423: PUSH
16424: LD_VAR 0 13
16428: ARRAY
16429: PUSH
16430: LD_INT 2
16432: ARRAY
16433: PPUSH
16434: CALL_OW 120
// end ;
16438: GO 16281
16440: POP
16441: POP
// wait ( 0 0$01 ) ;
16442: LD_INT 35
16444: PPUSH
16445: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
16449: LD_VAR 0 24
16453: PUSH
16454: LD_VAR 0 8
16458: LESS
16459: PUSH
16460: LD_VAR 0 30
16464: AND
16465: IFFALSE 16715
// begin tmp = vehiclesAmount - vehicles ;
16467: LD_ADDR_VAR 0 15
16471: PUSH
16472: LD_VAR 0 8
16476: PUSH
16477: LD_VAR 0 24
16481: MINUS
16482: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
16483: LD_ADDR_VAR 0 27
16487: PUSH
16488: LD_VAR 0 1
16492: PPUSH
16493: LD_VAR 0 2
16497: PPUSH
16498: CALL 7762 0 2
16502: ST_TO_ADDR
// for i := 1 to tmp do
16503: LD_ADDR_VAR 0 13
16507: PUSH
16508: DOUBLE
16509: LD_INT 1
16511: DEC
16512: ST_TO_ADDR
16513: LD_VAR 0 15
16517: PUSH
16518: FOR_TO
16519: IFFALSE 16711
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
16521: LD_ADDR_VAR 0 15
16525: PUSH
16526: LD_VAR 0 27
16530: PUSH
16531: LD_INT 1
16533: PPUSH
16534: LD_VAR 0 27
16538: PPUSH
16539: CALL_OW 12
16543: ARRAY
16544: ST_TO_ADDR
// if tmp then
16545: LD_VAR 0 15
16549: IFFALSE 16709
// begin if tmp in [ 34 , 14 , 71 ] then
16551: LD_VAR 0 15
16555: PUSH
16556: LD_INT 34
16558: PUSH
16559: LD_INT 14
16561: PUSH
16562: LD_INT 71
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: LIST
16569: IN
16570: IFFALSE 16608
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
16572: LD_ADDR_VAR 0 28
16576: PUSH
16577: LD_INT 4
16579: PUSH
16580: EMPTY
16581: LIST
16582: PUSH
16583: LD_INT 14
16585: PUSH
16586: EMPTY
16587: LIST
16588: PUSH
16589: LD_INT 24
16591: PUSH
16592: EMPTY
16593: LIST
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: LIST
16599: PUSH
16600: LD_VAR 0 2
16604: ARRAY
16605: ST_TO_ADDR
16606: GO 16666
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
16608: LD_ADDR_VAR 0 28
16612: PUSH
16613: LD_INT 2
16615: PUSH
16616: LD_INT 3
16618: PUSH
16619: LD_INT 4
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 13
16629: PUSH
16630: LD_INT 14
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: LD_INT 21
16639: PUSH
16640: LD_INT 23
16642: PUSH
16643: LD_INT 24
16645: PUSH
16646: LD_INT 22
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: LIST
16659: PUSH
16660: LD_VAR 0 2
16664: ARRAY
16665: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
16666: LD_VAR 0 30
16670: PUSH
16671: LD_INT 1
16673: ARRAY
16674: PPUSH
16675: LD_VAR 0 28
16679: PUSH
16680: LD_INT 1
16682: PPUSH
16683: LD_VAR 0 28
16687: PPUSH
16688: CALL_OW 12
16692: ARRAY
16693: PPUSH
16694: LD_INT 1
16696: PPUSH
16697: LD_INT 1
16699: PPUSH
16700: LD_VAR 0 15
16704: PPUSH
16705: CALL_OW 185
// end ; end ;
16709: GO 16518
16711: POP
16712: POP
// end else
16713: GO 16728
// ComCancel ( factory [ 1 ] ) ;
16715: LD_VAR 0 30
16719: PUSH
16720: LD_INT 1
16722: ARRAY
16723: PPUSH
16724: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) do
16728: LD_ADDR_VAR 0 23
16732: PUSH
16733: LD_VAR 0 4
16737: PPUSH
16738: LD_INT 22
16740: PUSH
16741: LD_VAR 0 1
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 21
16752: PUSH
16753: LD_INT 2
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PPUSH
16764: CALL_OW 70
16768: PUSH
16769: FOR_IN
16770: IFFALSE 16940
// begin vehicleInList = false ;
16772: LD_ADDR_VAR 0 25
16776: PUSH
16777: LD_INT 0
16779: ST_TO_ADDR
// for i := 1 to vehicles do
16780: LD_ADDR_VAR 0 13
16784: PUSH
16785: DOUBLE
16786: LD_INT 1
16788: DEC
16789: ST_TO_ADDR
16790: LD_VAR 0 24
16794: PUSH
16795: FOR_TO
16796: IFFALSE 16826
// begin if vehicle in vehicles [ i ] then
16798: LD_VAR 0 23
16802: PUSH
16803: LD_VAR 0 24
16807: PUSH
16808: LD_VAR 0 13
16812: ARRAY
16813: IN
16814: IFFALSE 16824
// vehicleInList = true ;
16816: LD_ADDR_VAR 0 25
16820: PUSH
16821: LD_INT 1
16823: ST_TO_ADDR
// end ;
16824: GO 16795
16826: POP
16827: POP
// if not vehicleInList then
16828: LD_VAR 0 25
16832: NOT
16833: IFFALSE 16938
// if vehicles < vehiclesToAttackAmount then
16835: LD_VAR 0 24
16839: PUSH
16840: LD_VAR 0 10
16844: LESS
16845: IFFALSE 16897
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , IsOK ( vehicle ) ] ] else
16847: LD_ADDR_VAR 0 24
16851: PUSH
16852: LD_VAR 0 24
16856: PUSH
16857: LD_VAR 0 23
16861: PUSH
16862: LD_VAR 0 23
16866: PPUSH
16867: CALL_OW 313
16871: PUSH
16872: LD_INT 1
16874: ARRAY
16875: PUSH
16876: LD_VAR 0 23
16880: PPUSH
16881: CALL_OW 302
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: LIST
16890: PUSH
16891: EMPTY
16892: LIST
16893: ADD
16894: ST_TO_ADDR
16895: GO 16938
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
16897: LD_ADDR_VAR 0 24
16901: PUSH
16902: LD_VAR 0 24
16906: PUSH
16907: LD_VAR 0 23
16911: PUSH
16912: LD_VAR 0 23
16916: PPUSH
16917: CALL_OW 313
16921: PUSH
16922: LD_INT 1
16924: ARRAY
16925: PUSH
16926: LD_INT 2
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: LIST
16933: PUSH
16934: EMPTY
16935: LIST
16936: ADD
16937: ST_TO_ADDR
// end ;
16938: GO 16769
16940: POP
16941: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
16942: LD_ADDR_VAR 0 37
16946: PUSH
16947: LD_VAR 0 7
16951: PPUSH
16952: LD_INT 81
16954: PUSH
16955: LD_VAR 0 1
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PPUSH
16964: CALL_OW 70
16968: PUSH
16969: FOR_IN
16970: IFFALSE 17149
// begin defenceUnits = [ ] ;
16972: LD_ADDR_VAR 0 26
16976: PUSH
16977: EMPTY
16978: ST_TO_ADDR
// for i := 1 to personel do
16979: LD_ADDR_VAR 0 13
16983: PUSH
16984: DOUBLE
16985: LD_INT 1
16987: DEC
16988: ST_TO_ADDR
16989: LD_VAR 0 18
16993: PUSH
16994: FOR_TO
16995: IFFALSE 17045
// if personel [ i ] [ 3 ] = 2 then
16997: LD_VAR 0 18
17001: PUSH
17002: LD_VAR 0 13
17006: ARRAY
17007: PUSH
17008: LD_INT 3
17010: ARRAY
17011: PUSH
17012: LD_INT 2
17014: EQUAL
17015: IFFALSE 17043
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
17017: LD_ADDR_VAR 0 26
17021: PUSH
17022: LD_VAR 0 26
17026: PUSH
17027: LD_VAR 0 18
17031: PUSH
17032: LD_VAR 0 13
17036: ARRAY
17037: PUSH
17038: LD_INT 1
17040: ARRAY
17041: ADD
17042: ST_TO_ADDR
17043: GO 16994
17045: POP
17046: POP
// for i := 1 to vehicles do
17047: LD_ADDR_VAR 0 13
17051: PUSH
17052: DOUBLE
17053: LD_INT 1
17055: DEC
17056: ST_TO_ADDR
17057: LD_VAR 0 24
17061: PUSH
17062: FOR_TO
17063: IFFALSE 17113
// if vehicles [ i ] [ 3 ] = 2 then
17065: LD_VAR 0 24
17069: PUSH
17070: LD_VAR 0 13
17074: ARRAY
17075: PUSH
17076: LD_INT 3
17078: ARRAY
17079: PUSH
17080: LD_INT 2
17082: EQUAL
17083: IFFALSE 17111
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
17085: LD_ADDR_VAR 0 26
17089: PUSH
17090: LD_VAR 0 26
17094: PUSH
17095: LD_VAR 0 24
17099: PUSH
17100: LD_VAR 0 13
17104: ARRAY
17105: PUSH
17106: LD_INT 1
17108: ARRAY
17109: ADD
17110: ST_TO_ADDR
17111: GO 17062
17113: POP
17114: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
17115: LD_VAR 0 26
17119: PPUSH
17120: LD_INT 3
17122: PUSH
17123: LD_INT 60
17125: PUSH
17126: EMPTY
17127: LIST
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PPUSH
17133: CALL_OW 72
17137: PPUSH
17138: LD_VAR 0 37
17142: PPUSH
17143: CALL_OW 175
// end ;
17147: GO 16969
17149: POP
17150: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17151: LD_ADDR_VAR 0 38
17155: PUSH
17156: LD_INT 22
17158: PUSH
17159: LD_VAR 0 1
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: LD_INT 2
17170: PUSH
17171: LD_INT 30
17173: PUSH
17174: LD_INT 31
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 30
17183: PUSH
17184: LD_INT 32
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 30
17193: PUSH
17194: LD_INT 33
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: LD_INT 30
17203: PUSH
17204: LD_INT 4
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: LD_INT 30
17213: PUSH
17214: LD_INT 5
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PPUSH
17233: CALL_OW 69
17237: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
17238: LD_ADDR_VAR 0 39
17242: PUSH
17243: LD_INT 81
17245: PUSH
17246: LD_VAR 0 1
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 21
17257: PUSH
17258: LD_INT 3
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: LD_INT 58
17267: PUSH
17268: EMPTY
17269: LIST
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: LIST
17275: PPUSH
17276: CALL_OW 69
17280: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
17281: LD_VAR 0 38
17285: PUSH
17286: LD_VAR 0 39
17290: AND
17291: IFFALSE 17361
// for i in attackBuildings do
17293: LD_ADDR_VAR 0 13
17297: PUSH
17298: LD_VAR 0 38
17302: PUSH
17303: FOR_IN
17304: IFFALSE 17359
// for j in enemyBuildings do
17306: LD_ADDR_VAR 0 14
17310: PUSH
17311: LD_VAR 0 39
17315: PUSH
17316: FOR_IN
17317: IFFALSE 17355
// if GetDistUnits ( i , j ) < 12 then
17319: LD_VAR 0 13
17323: PPUSH
17324: LD_VAR 0 14
17328: PPUSH
17329: CALL_OW 296
17333: PUSH
17334: LD_INT 12
17336: LESS
17337: IFFALSE 17353
// ComAttackUnit ( i , j ) ;
17339: LD_VAR 0 13
17343: PPUSH
17344: LD_VAR 0 14
17348: PPUSH
17349: CALL_OW 115
17353: GO 17316
17355: POP
17356: POP
17357: GO 17303
17359: POP
17360: POP
// until not personel or not enableOmicronAI ;
17361: LD_VAR 0 18
17365: NOT
17366: PUSH
17367: LD_EXP 29
17371: NOT
17372: OR
17373: IFFALSE 12377
// end ;
17375: LD_VAR 0 12
17379: RET
// export function MountWeaponTurrent ; var turret , weapons ; begin
17380: LD_INT 0
17382: PPUSH
17383: PPUSH
17384: PPUSH
// weapons = [ ru_gun ] ;
17385: LD_ADDR_VAR 0 3
17389: PUSH
17390: LD_INT 44
17392: PUSH
17393: EMPTY
17394: LIST
17395: ST_TO_ADDR
// for turret in kirovBunkersToMountWeapon do
17396: LD_ADDR_VAR 0 2
17400: PUSH
17401: LD_EXP 72
17405: PUSH
17406: FOR_IN
17407: IFFALSE 17439
// AddComPlaceWeapon ( turret , weapons [ rand ( 1 , weapons ) ] ) ;
17409: LD_VAR 0 2
17413: PPUSH
17414: LD_VAR 0 3
17418: PUSH
17419: LD_INT 1
17421: PPUSH
17422: LD_VAR 0 3
17426: PPUSH
17427: CALL_OW 12
17431: ARRAY
17432: PPUSH
17433: CALL_OW 208
17437: GO 17406
17439: POP
17440: POP
// end ;
17441: LD_VAR 0 1
17445: RET
// export function KirovProduceVehicles ( factory ) ; begin
17446: LD_INT 0
17448: PPUSH
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17449: LD_VAR 0 1
17453: PPUSH
17454: LD_INT 21
17456: PPUSH
17457: LD_INT 1
17459: PPUSH
17460: LD_INT 1
17462: PPUSH
17463: LD_INT 51
17465: PPUSH
17466: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17470: LD_VAR 0 1
17474: PPUSH
17475: LD_INT 21
17477: PPUSH
17478: LD_INT 1
17480: PPUSH
17481: LD_INT 1
17483: PPUSH
17484: LD_INT 51
17486: PPUSH
17487: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17491: LD_VAR 0 1
17495: PPUSH
17496: LD_INT 21
17498: PPUSH
17499: LD_INT 1
17501: PPUSH
17502: LD_INT 1
17504: PPUSH
17505: LD_INT 51
17507: PPUSH
17508: CALL_OW 185
// case Difficulty of 1 :
17512: LD_OWVAR 67
17516: PUSH
17517: LD_INT 1
17519: DOUBLE
17520: EQUAL
17521: IFTRUE 17525
17523: GO 17648
17525: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17526: LD_VAR 0 1
17530: PPUSH
17531: LD_INT 21
17533: PUSH
17534: LD_INT 23
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 1
17543: PPUSH
17544: LD_INT 2
17546: PPUSH
17547: CALL_OW 12
17551: ARRAY
17552: PPUSH
17553: LD_INT 1
17555: PPUSH
17556: LD_INT 1
17558: PPUSH
17559: LD_INT 43
17561: PPUSH
17562: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17566: LD_VAR 0 1
17570: PPUSH
17571: LD_INT 21
17573: PUSH
17574: LD_INT 23
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 1
17583: PPUSH
17584: LD_INT 2
17586: PPUSH
17587: CALL_OW 12
17591: ARRAY
17592: PPUSH
17593: LD_INT 1
17595: PPUSH
17596: LD_INT 1
17598: PPUSH
17599: LD_INT 43
17601: PPUSH
17602: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17606: LD_VAR 0 1
17610: PPUSH
17611: LD_INT 21
17613: PUSH
17614: LD_INT 23
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 1
17623: PPUSH
17624: LD_INT 2
17626: PPUSH
17627: CALL_OW 12
17631: ARRAY
17632: PPUSH
17633: LD_INT 1
17635: PPUSH
17636: LD_INT 1
17638: PPUSH
17639: LD_INT 44
17641: PPUSH
17642: CALL_OW 185
// end ; 2 :
17646: GO 17911
17648: LD_INT 2
17650: DOUBLE
17651: EQUAL
17652: IFTRUE 17656
17654: GO 17779
17656: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17657: LD_VAR 0 1
17661: PPUSH
17662: LD_INT 21
17664: PUSH
17665: LD_INT 23
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 1
17674: PPUSH
17675: LD_INT 2
17677: PPUSH
17678: CALL_OW 12
17682: ARRAY
17683: PPUSH
17684: LD_INT 1
17686: PPUSH
17687: LD_INT 1
17689: PPUSH
17690: LD_INT 42
17692: PPUSH
17693: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17697: LD_VAR 0 1
17701: PPUSH
17702: LD_INT 21
17704: PUSH
17705: LD_INT 23
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 1
17714: PPUSH
17715: LD_INT 2
17717: PPUSH
17718: CALL_OW 12
17722: ARRAY
17723: PPUSH
17724: LD_INT 1
17726: PPUSH
17727: LD_INT 1
17729: PPUSH
17730: LD_INT 43
17732: PPUSH
17733: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17737: LD_VAR 0 1
17741: PPUSH
17742: LD_INT 21
17744: PUSH
17745: LD_INT 23
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 1
17754: PPUSH
17755: LD_INT 2
17757: PPUSH
17758: CALL_OW 12
17762: ARRAY
17763: PPUSH
17764: LD_INT 1
17766: PPUSH
17767: LD_INT 1
17769: PPUSH
17770: LD_INT 44
17772: PPUSH
17773: CALL_OW 185
// end ; 3 :
17777: GO 17911
17779: LD_INT 3
17781: DOUBLE
17782: EQUAL
17783: IFTRUE 17787
17785: GO 17910
17787: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17788: LD_VAR 0 1
17792: PPUSH
17793: LD_INT 21
17795: PUSH
17796: LD_INT 23
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: LD_INT 1
17805: PPUSH
17806: LD_INT 2
17808: PPUSH
17809: CALL_OW 12
17813: ARRAY
17814: PPUSH
17815: LD_INT 1
17817: PPUSH
17818: LD_INT 1
17820: PPUSH
17821: LD_INT 42
17823: PPUSH
17824: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17828: LD_VAR 0 1
17832: PPUSH
17833: LD_INT 21
17835: PUSH
17836: LD_INT 23
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 1
17845: PPUSH
17846: LD_INT 2
17848: PPUSH
17849: CALL_OW 12
17853: ARRAY
17854: PPUSH
17855: LD_INT 1
17857: PPUSH
17858: LD_INT 1
17860: PPUSH
17861: LD_INT 42
17863: PPUSH
17864: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17868: LD_VAR 0 1
17872: PPUSH
17873: LD_INT 21
17875: PUSH
17876: LD_INT 23
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: LD_INT 1
17885: PPUSH
17886: LD_INT 2
17888: PPUSH
17889: CALL_OW 12
17893: ARRAY
17894: PPUSH
17895: LD_INT 1
17897: PPUSH
17898: LD_INT 1
17900: PPUSH
17901: LD_INT 44
17903: PPUSH
17904: CALL_OW 185
// end ; end ;
17908: GO 17911
17910: POP
// end ;
17911: LD_VAR 0 2
17915: RET
// export function KirovAttackOmicron ; var i , vehicles , vehicle , goodVehs , cargo , cargoRefuel ; begin
17916: LD_INT 0
17918: PPUSH
17919: PPUSH
17920: PPUSH
17921: PPUSH
17922: PPUSH
17923: PPUSH
17924: PPUSH
// vehicles = [ ] ;
17925: LD_ADDR_VAR 0 3
17929: PUSH
17930: EMPTY
17931: ST_TO_ADDR
// cargoRefuel = [ ] ;
17932: LD_ADDR_VAR 0 7
17936: PUSH
17937: EMPTY
17938: ST_TO_ADDR
// for vehicle in kirovAttackVehicles do
17939: LD_ADDR_VAR 0 4
17943: PUSH
17944: LD_EXP 76
17948: PUSH
17949: FOR_IN
17950: IFFALSE 17999
// vehicles = Insert ( vehicles , 1 , [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 1 ] ) ;
17952: LD_ADDR_VAR 0 3
17956: PUSH
17957: LD_VAR 0 3
17961: PPUSH
17962: LD_INT 1
17964: PPUSH
17965: LD_VAR 0 4
17969: PUSH
17970: LD_VAR 0 4
17974: PPUSH
17975: CALL_OW 313
17979: PUSH
17980: LD_INT 1
17982: ARRAY
17983: PUSH
17984: LD_INT 1
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: LIST
17991: PPUSH
17992: CALL_OW 2
17996: ST_TO_ADDR
17997: GO 17949
17999: POP
18000: POP
// repeat for i := 1 to vehicles do
18001: LD_ADDR_VAR 0 2
18005: PUSH
18006: DOUBLE
18007: LD_INT 1
18009: DEC
18010: ST_TO_ADDR
18011: LD_VAR 0 3
18015: PUSH
18016: FOR_TO
18017: IFFALSE 18055
// if vehicles [ i ] [ 3 ] = 1 then
18019: LD_VAR 0 3
18023: PUSH
18024: LD_VAR 0 2
18028: ARRAY
18029: PUSH
18030: LD_INT 3
18032: ARRAY
18033: PUSH
18034: LD_INT 1
18036: EQUAL
18037: IFFALSE 18053
// goodVehs = goodVehs + 1 ;
18039: LD_ADDR_VAR 0 5
18043: PUSH
18044: LD_VAR 0 5
18048: PUSH
18049: LD_INT 1
18051: PLUS
18052: ST_TO_ADDR
18053: GO 18016
18055: POP
18056: POP
// if goodVehs = vehicles then
18057: LD_VAR 0 5
18061: PUSH
18062: LD_VAR 0 3
18066: EQUAL
18067: IFFALSE 18290
// for i := 1 to vehicles do
18069: LD_ADDR_VAR 0 2
18073: PUSH
18074: DOUBLE
18075: LD_INT 1
18077: DEC
18078: ST_TO_ADDR
18079: LD_VAR 0 3
18083: PUSH
18084: FOR_TO
18085: IFFALSE 18288
// begin if not HasTask ( vehicles [ i ] [ 1 ] ) then
18087: LD_VAR 0 3
18091: PUSH
18092: LD_VAR 0 2
18096: ARRAY
18097: PUSH
18098: LD_INT 1
18100: ARRAY
18101: PPUSH
18102: CALL_OW 314
18106: NOT
18107: IFFALSE 18286
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
18109: LD_VAR 0 3
18113: PUSH
18114: LD_VAR 0 2
18118: ARRAY
18119: PUSH
18120: LD_INT 1
18122: ARRAY
18123: PPUSH
18124: CALL_OW 261
18128: PUSH
18129: LD_INT 50
18131: LESS
18132: IFFALSE 18261
// begin for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] , [ f_ok ] ] ) do
18134: LD_ADDR_VAR 0 6
18138: PUSH
18139: LD_INT 22
18141: PUSH
18142: LD_INT 6
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 21
18151: PUSH
18152: LD_INT 2
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 34
18161: PUSH
18162: LD_INT 51
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: LD_INT 50
18171: PUSH
18172: EMPTY
18173: LIST
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: PPUSH
18181: CALL_OW 69
18185: PUSH
18186: FOR_IN
18187: IFFALSE 18225
// if GetCargo ( cargo , mat_oil ) > 0 then
18189: LD_VAR 0 6
18193: PPUSH
18194: LD_INT 2
18196: PPUSH
18197: CALL_OW 289
18201: PUSH
18202: LD_INT 0
18204: GREATER
18205: IFFALSE 18223
// cargoRefuel = cargoRefuel ^ cargo ;
18207: LD_ADDR_VAR 0 7
18211: PUSH
18212: LD_VAR 0 7
18216: PUSH
18217: LD_VAR 0 6
18221: ADD
18222: ST_TO_ADDR
18223: GO 18186
18225: POP
18226: POP
// if cargo then
18227: LD_VAR 0 6
18231: IFFALSE 18261
// ComRefuelFromCargo ( vehicles [ i ] [ 1 ] , cargo [ 1 ] ) ;
18233: LD_VAR 0 3
18237: PUSH
18238: LD_VAR 0 2
18242: ARRAY
18243: PUSH
18244: LD_INT 1
18246: ARRAY
18247: PPUSH
18248: LD_VAR 0 6
18252: PUSH
18253: LD_INT 1
18255: ARRAY
18256: PPUSH
18257: CALL 8376 0 2
// end ; AddComAgressiveMove ( vehicles [ i ] [ 1 ] , 26 , 35 ) ;
18261: LD_VAR 0 3
18265: PUSH
18266: LD_VAR 0 2
18270: ARRAY
18271: PUSH
18272: LD_INT 1
18274: ARRAY
18275: PPUSH
18276: LD_INT 26
18278: PPUSH
18279: LD_INT 35
18281: PPUSH
18282: CALL_OW 174
// end ; end ;
18286: GO 18084
18288: POP
18289: POP
// if IsEnemyNear ( vehicles [ i ] [ 1 ] , 1 ) and not IsInUnit ( vehicles [ i ] [ 2 ] ) then
18290: LD_VAR 0 3
18294: PUSH
18295: LD_VAR 0 2
18299: ARRAY
18300: PUSH
18301: LD_INT 1
18303: ARRAY
18304: PPUSH
18305: LD_INT 1
18307: PPUSH
18308: CALL 10128 0 2
18312: PUSH
18313: LD_VAR 0 3
18317: PUSH
18318: LD_VAR 0 2
18322: ARRAY
18323: PUSH
18324: LD_INT 2
18326: ARRAY
18327: PPUSH
18328: CALL_OW 310
18332: NOT
18333: AND
18334: IFFALSE 18370
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18336: LD_VAR 0 3
18340: PUSH
18341: LD_VAR 0 2
18345: ARRAY
18346: PUSH
18347: LD_INT 2
18349: ARRAY
18350: PPUSH
18351: LD_VAR 0 3
18355: PUSH
18356: LD_VAR 0 2
18360: ARRAY
18361: PUSH
18362: LD_INT 1
18364: ARRAY
18365: PPUSH
18366: CALL_OW 120
// goodVehs = 0 ;
18370: LD_ADDR_VAR 0 5
18374: PUSH
18375: LD_INT 0
18377: ST_TO_ADDR
// for i := 1 to vehicles do
18378: LD_ADDR_VAR 0 2
18382: PUSH
18383: DOUBLE
18384: LD_INT 1
18386: DEC
18387: ST_TO_ADDR
18388: LD_VAR 0 3
18392: PUSH
18393: FOR_TO
18394: IFFALSE 18920
// begin if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and not GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
18396: LD_VAR 0 3
18400: PUSH
18401: LD_VAR 0 2
18405: ARRAY
18406: PUSH
18407: LD_INT 1
18409: ARRAY
18410: PPUSH
18411: CALL_OW 256
18415: PUSH
18416: LD_INT 500
18418: LESS
18419: PUSH
18420: LD_VAR 0 3
18424: PUSH
18425: LD_VAR 0 2
18429: ARRAY
18430: PUSH
18431: LD_INT 1
18433: ARRAY
18434: PPUSH
18435: LD_INT 78
18437: PPUSH
18438: LD_INT 39
18440: PPUSH
18441: CALL_OW 297
18445: PUSH
18446: LD_INT 9
18448: LESS
18449: NOT
18450: AND
18451: IFFALSE 18516
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
18453: LD_ADDR_VAR 0 3
18457: PUSH
18458: LD_VAR 0 3
18462: PPUSH
18463: LD_VAR 0 2
18467: PUSH
18468: LD_VAR 0 3
18472: PUSH
18473: LD_VAR 0 2
18477: ARRAY
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PPUSH
18483: LD_INT 2
18485: PPUSH
18486: CALL 36555 0 3
18490: ST_TO_ADDR
// ComMoveXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) ;
18491: LD_VAR 0 3
18495: PUSH
18496: LD_VAR 0 2
18500: ARRAY
18501: PUSH
18502: LD_INT 1
18504: ARRAY
18505: PPUSH
18506: LD_INT 78
18508: PPUSH
18509: LD_INT 39
18511: PPUSH
18512: CALL_OW 111
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 and not IsEnemyNear ( vehicles [ i ] [ 1 ] , 1 ) then
18516: LD_VAR 0 3
18520: PUSH
18521: LD_VAR 0 2
18525: ARRAY
18526: PUSH
18527: LD_INT 1
18529: ARRAY
18530: PPUSH
18531: CALL_OW 256
18535: PUSH
18536: LD_INT 500
18538: LESS
18539: PUSH
18540: LD_VAR 0 3
18544: PUSH
18545: LD_VAR 0 2
18549: ARRAY
18550: PUSH
18551: LD_INT 1
18553: ARRAY
18554: PPUSH
18555: LD_INT 78
18557: PPUSH
18558: LD_INT 39
18560: PPUSH
18561: CALL_OW 297
18565: PUSH
18566: LD_INT 9
18568: LESS
18569: AND
18570: PUSH
18571: LD_VAR 0 3
18575: PUSH
18576: LD_VAR 0 2
18580: ARRAY
18581: PUSH
18582: LD_INT 1
18584: ARRAY
18585: PPUSH
18586: LD_INT 1
18588: PPUSH
18589: CALL 10128 0 2
18593: NOT
18594: AND
18595: IFFALSE 18650
// begin AddComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
18597: LD_VAR 0 3
18601: PUSH
18602: LD_VAR 0 2
18606: ARRAY
18607: PUSH
18608: LD_INT 2
18610: ARRAY
18611: PPUSH
18612: CALL_OW 181
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18616: LD_VAR 0 3
18620: PUSH
18621: LD_VAR 0 2
18625: ARRAY
18626: PUSH
18627: LD_INT 2
18629: ARRAY
18630: PPUSH
18631: LD_VAR 0 3
18635: PUSH
18636: LD_VAR 0 2
18640: ARRAY
18641: PUSH
18642: LD_INT 1
18644: ARRAY
18645: PPUSH
18646: CALL_OW 189
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 and vehicles [ i ] [ 3 ] = 2 then
18650: LD_VAR 0 3
18654: PUSH
18655: LD_VAR 0 2
18659: ARRAY
18660: PUSH
18661: LD_INT 1
18663: ARRAY
18664: PPUSH
18665: CALL_OW 256
18669: PUSH
18670: LD_INT 1000
18672: EQUAL
18673: PUSH
18674: LD_VAR 0 3
18678: PUSH
18679: LD_VAR 0 2
18683: ARRAY
18684: PUSH
18685: LD_INT 3
18687: ARRAY
18688: PUSH
18689: LD_INT 2
18691: EQUAL
18692: AND
18693: IFFALSE 18767
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) ;
18695: LD_ADDR_VAR 0 3
18699: PUSH
18700: LD_VAR 0 3
18704: PPUSH
18705: LD_VAR 0 2
18709: PUSH
18710: LD_VAR 0 3
18714: PUSH
18715: LD_VAR 0 2
18719: ARRAY
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PPUSH
18725: LD_INT 1
18727: PPUSH
18728: CALL 36555 0 3
18732: ST_TO_ADDR
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18733: LD_VAR 0 3
18737: PUSH
18738: LD_VAR 0 2
18742: ARRAY
18743: PUSH
18744: LD_INT 2
18746: ARRAY
18747: PPUSH
18748: LD_VAR 0 3
18752: PUSH
18753: LD_VAR 0 2
18757: ARRAY
18758: PUSH
18759: LD_INT 1
18761: ARRAY
18762: PPUSH
18763: CALL_OW 120
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
18767: LD_VAR 0 3
18771: PUSH
18772: LD_VAR 0 2
18776: ARRAY
18777: PUSH
18778: LD_INT 1
18780: ARRAY
18781: PPUSH
18782: CALL_OW 256
18786: PUSH
18787: LD_INT 250
18789: LESS
18790: IFFALSE 18817
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18792: LD_ADDR_VAR 0 3
18796: PUSH
18797: LD_VAR 0 3
18801: PUSH
18802: LD_VAR 0 3
18806: PUSH
18807: LD_VAR 0 2
18811: ARRAY
18812: PUSH
18813: EMPTY
18814: LIST
18815: DIFF
18816: ST_TO_ADDR
// if GetLives ( vehicles [ i ] [ 2 ] ) < 250 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 then
18817: LD_VAR 0 3
18821: PUSH
18822: LD_VAR 0 2
18826: ARRAY
18827: PUSH
18828: LD_INT 2
18830: ARRAY
18831: PPUSH
18832: CALL_OW 256
18836: PUSH
18837: LD_INT 250
18839: LESS
18840: PUSH
18841: LD_VAR 0 3
18845: PUSH
18846: LD_VAR 0 2
18850: ARRAY
18851: PUSH
18852: LD_INT 1
18854: ARRAY
18855: PPUSH
18856: CALL_OW 256
18860: PUSH
18861: LD_INT 250
18863: GREATER
18864: AND
18865: IFFALSE 18918
// begin kirovCanCaptureVehicles = kirovCanCaptureVehicles ^ vehicles [ i ] [ 1 ] ;
18867: LD_ADDR_EXP 30
18871: PUSH
18872: LD_EXP 30
18876: PUSH
18877: LD_VAR 0 3
18881: PUSH
18882: LD_VAR 0 2
18886: ARRAY
18887: PUSH
18888: LD_INT 1
18890: ARRAY
18891: ADD
18892: ST_TO_ADDR
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18893: LD_ADDR_VAR 0 3
18897: PUSH
18898: LD_VAR 0 3
18902: PUSH
18903: LD_VAR 0 3
18907: PUSH
18908: LD_VAR 0 2
18912: ARRAY
18913: PUSH
18914: EMPTY
18915: LIST
18916: DIFF
18917: ST_TO_ADDR
// end ; end ;
18918: GO 18393
18920: POP
18921: POP
// wait ( 0 0$1 ) ;
18922: LD_INT 35
18924: PPUSH
18925: CALL_OW 67
// until omicronSurrender ;
18929: LD_EXP 23
18933: IFFALSE 18001
// end ;
18935: LD_VAR 0 1
18939: RET
// export function MoveToBase ( units , roadArea ) ; var i , unit , playerUnits , playerUnit , enemyUnitsOnRoad , cratesOnRoad , nearUnit , nearCrates , attackUnits , medics , damageUnits , inBase , newBase ; begin
18940: LD_INT 0
18942: PPUSH
18943: PPUSH
18944: PPUSH
18945: PPUSH
18946: PPUSH
18947: PPUSH
18948: PPUSH
18949: PPUSH
18950: PPUSH
18951: PPUSH
18952: PPUSH
18953: PPUSH
18954: PPUSH
18955: PPUSH
// inBase = false ;
18956: LD_ADDR_VAR 0 15
18960: PUSH
18961: LD_INT 0
18963: ST_TO_ADDR
// repeat enemyUnitsOnRoad = FilterUnitsInArea ( roadArea , [ [ f_side , 3 ] ] ) ;
18964: LD_ADDR_VAR 0 8
18968: PUSH
18969: LD_VAR 0 2
18973: PPUSH
18974: LD_INT 22
18976: PUSH
18977: LD_INT 3
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: EMPTY
18985: LIST
18986: PPUSH
18987: CALL_OW 70
18991: ST_TO_ADDR
// cratesOnRoad = GetListOfCratesInArea ( roadArea ) ;
18992: LD_ADDR_VAR 0 9
18996: PUSH
18997: LD_VAR 0 2
19001: PPUSH
19002: CALL_OW 435
19006: ST_TO_ADDR
// attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_mechanic ] , [ f_type , unit_vehicle ] ] ] ) ;
19007: LD_ADDR_VAR 0 12
19011: PUSH
19012: LD_VAR 0 1
19016: PPUSH
19017: LD_INT 50
19019: PUSH
19020: EMPTY
19021: LIST
19022: PUSH
19023: LD_INT 2
19025: PUSH
19026: LD_INT 25
19028: PUSH
19029: LD_INT 1
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 25
19038: PUSH
19039: LD_INT 3
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 21
19048: PUSH
19049: LD_INT 2
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PPUSH
19066: CALL_OW 72
19070: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
19071: LD_ADDR_VAR 0 13
19075: PUSH
19076: LD_VAR 0 1
19080: PPUSH
19081: LD_INT 50
19083: PUSH
19084: EMPTY
19085: LIST
19086: PUSH
19087: LD_INT 25
19089: PUSH
19090: LD_INT 4
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PPUSH
19101: CALL_OW 72
19105: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ f_not , [ f_lives , 1000 ] ] ) ;
19106: LD_ADDR_VAR 0 14
19110: PUSH
19111: LD_VAR 0 1
19115: PPUSH
19116: LD_INT 3
19118: PUSH
19119: LD_INT 24
19121: PUSH
19122: LD_INT 1000
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PPUSH
19133: CALL_OW 72
19137: ST_TO_ADDR
// playerUnits = FilterAllUnits ( [ [ f_side , 3 ] ] ) ;
19138: LD_ADDR_VAR 0 6
19142: PUSH
19143: LD_INT 22
19145: PUSH
19146: LD_INT 3
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: EMPTY
19154: LIST
19155: PPUSH
19156: CALL_OW 69
19160: ST_TO_ADDR
// for unit in UnitFilter ( units , [ [ f_ok ] ] ) do
19161: LD_ADDR_VAR 0 5
19165: PUSH
19166: LD_VAR 0 1
19170: PPUSH
19171: LD_INT 50
19173: PUSH
19174: EMPTY
19175: LIST
19176: PUSH
19177: EMPTY
19178: LIST
19179: PPUSH
19180: CALL_OW 72
19184: PUSH
19185: FOR_IN
19186: IFFALSE 19933
// begin if attackUnits and medics then
19188: LD_VAR 0 12
19192: PUSH
19193: LD_VAR 0 13
19197: AND
19198: IFFALSE 19265
// begin if damageUnits then
19200: LD_VAR 0 14
19204: IFFALSE 19226
// ComHeal ( medics , damageUnits [ 1 ] ) else
19206: LD_VAR 0 13
19210: PPUSH
19211: LD_VAR 0 14
19215: PUSH
19216: LD_INT 1
19218: ARRAY
19219: PPUSH
19220: CALL_OW 128
19224: GO 19263
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
19226: LD_VAR 0 13
19230: PPUSH
19231: LD_VAR 0 12
19235: PUSH
19236: LD_INT 1
19238: ARRAY
19239: PPUSH
19240: CALL_OW 250
19244: PPUSH
19245: LD_VAR 0 12
19249: PUSH
19250: LD_INT 1
19252: ARRAY
19253: PPUSH
19254: CALL_OW 251
19258: PPUSH
19259: CALL_OW 111
// end else
19263: GO 19294
// begin if not attackUnits and medics then
19265: LD_VAR 0 12
19269: NOT
19270: PUSH
19271: LD_VAR 0 13
19275: AND
19276: IFFALSE 19294
// attackUnits = attackUnits ^ medics ;
19278: LD_ADDR_VAR 0 12
19282: PUSH
19283: LD_VAR 0 12
19287: PUSH
19288: LD_VAR 0 13
19292: ADD
19293: ST_TO_ADDR
// end ; for i := 1 to cratesOnRoad / 2 do
19294: LD_ADDR_VAR 0 4
19298: PUSH
19299: DOUBLE
19300: LD_INT 1
19302: DEC
19303: ST_TO_ADDR
19304: LD_VAR 0 9
19308: PUSH
19309: LD_INT 2
19311: DIVREAL
19312: PUSH
19313: FOR_TO
19314: IFFALSE 19353
// AddComAttackPlace ( attackUnits , cratesOnRoad [ i ] , cratesOnRoad [ i + 1 ] ) ;
19316: LD_VAR 0 12
19320: PPUSH
19321: LD_VAR 0 9
19325: PUSH
19326: LD_VAR 0 4
19330: ARRAY
19331: PPUSH
19332: LD_VAR 0 9
19336: PUSH
19337: LD_VAR 0 4
19341: PUSH
19342: LD_INT 1
19344: PLUS
19345: ARRAY
19346: PPUSH
19347: CALL_OW 176
19351: GO 19313
19353: POP
19354: POP
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , 27 , 34 ) ;
19355: LD_VAR 0 12
19359: PPUSH
19360: LD_INT 21
19362: PUSH
19363: LD_INT 1
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: LD_INT 3
19372: PUSH
19373: LD_INT 60
19375: PUSH
19376: EMPTY
19377: LIST
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PPUSH
19387: CALL_OW 72
19391: PPUSH
19392: LD_INT 27
19394: PPUSH
19395: LD_INT 34
19397: PPUSH
19398: CALL_OW 111
// wait ( 0 0$01 ) ;
19402: LD_INT 35
19404: PPUSH
19405: CALL_OW 67
// if enemyUnitsOnRoad and UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) then
19409: LD_VAR 0 8
19413: PUSH
19414: LD_VAR 0 12
19418: PPUSH
19419: LD_INT 21
19421: PUSH
19422: LD_INT 1
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 3
19431: PUSH
19432: LD_INT 60
19434: PUSH
19435: EMPTY
19436: LIST
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PPUSH
19446: CALL_OW 72
19450: AND
19451: IFFALSE 19634
// begin for playerUnit in playerUnits do
19453: LD_ADDR_VAR 0 7
19457: PUSH
19458: LD_VAR 0 6
19462: PUSH
19463: FOR_IN
19464: IFFALSE 19630
// begin if Attacks ( playerUnit ) then
19466: LD_VAR 0 7
19470: PPUSH
19471: CALL_OW 320
19475: IFFALSE 19562
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
19477: LD_VAR 0 7
19481: PPUSH
19482: CALL_OW 320
19486: PUSH
19487: LD_VAR 0 1
19491: IN
19492: PUSH
19493: LD_VAR 0 7
19497: PPUSH
19498: LD_VAR 0 5
19502: PPUSH
19503: CALL_OW 296
19507: PUSH
19508: LD_INT 13
19510: LESS
19511: AND
19512: IFFALSE 19560
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , playerUnit ) end else
19514: LD_VAR 0 12
19518: PPUSH
19519: LD_INT 21
19521: PUSH
19522: LD_INT 1
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 3
19531: PUSH
19532: LD_INT 60
19534: PUSH
19535: EMPTY
19536: LIST
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PPUSH
19546: CALL_OW 72
19550: PPUSH
19551: LD_VAR 0 7
19555: PPUSH
19556: CALL_OW 115
19560: GO 19628
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , unit ) ;
19562: LD_ADDR_VAR 0 10
19566: PUSH
19567: LD_VAR 0 8
19571: PPUSH
19572: LD_VAR 0 5
19576: PPUSH
19577: CALL_OW 74
19581: ST_TO_ADDR
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , nearUnit ) ;
19582: LD_VAR 0 12
19586: PPUSH
19587: LD_INT 21
19589: PUSH
19590: LD_INT 1
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 3
19599: PUSH
19600: LD_INT 60
19602: PUSH
19603: EMPTY
19604: LIST
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PPUSH
19614: CALL_OW 72
19618: PPUSH
19619: LD_VAR 0 10
19623: PPUSH
19624: CALL_OW 115
// end ; end ;
19628: GO 19463
19630: POP
19631: POP
// end else
19632: GO 19681
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , 27 , 34 ) ;
19634: LD_VAR 0 12
19638: PPUSH
19639: LD_INT 21
19641: PUSH
19642: LD_INT 1
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: LD_INT 3
19651: PUSH
19652: LD_INT 60
19654: PUSH
19655: EMPTY
19656: LIST
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PPUSH
19666: CALL_OW 72
19670: PPUSH
19671: LD_INT 27
19673: PPUSH
19674: LD_INT 34
19676: PPUSH
19677: CALL_OW 111
// if enemyUnitsOnRoad then
19681: LD_VAR 0 8
19685: IFFALSE 19869
// begin for playerUnit in playerUnits do
19687: LD_ADDR_VAR 0 7
19691: PUSH
19692: LD_VAR 0 6
19696: PUSH
19697: FOR_IN
19698: IFFALSE 19865
// begin if Attacks ( playerUnit ) then
19700: LD_VAR 0 7
19704: PPUSH
19705: CALL_OW 320
19709: IFFALSE 19782
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
19711: LD_VAR 0 7
19715: PPUSH
19716: CALL_OW 320
19720: PUSH
19721: LD_VAR 0 1
19725: IN
19726: PUSH
19727: LD_VAR 0 7
19731: PPUSH
19732: LD_VAR 0 5
19736: PPUSH
19737: CALL_OW 296
19741: PUSH
19742: LD_INT 13
19744: LESS
19745: AND
19746: IFFALSE 19780
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , playerUnit ) end else
19748: LD_VAR 0 12
19752: PPUSH
19753: LD_INT 21
19755: PUSH
19756: LD_INT 2
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: EMPTY
19764: LIST
19765: PPUSH
19766: CALL_OW 72
19770: PPUSH
19771: LD_VAR 0 7
19775: PPUSH
19776: CALL_OW 115
19780: GO 19863
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) ;
19782: LD_ADDR_VAR 0 10
19786: PUSH
19787: LD_VAR 0 8
19791: PPUSH
19792: LD_VAR 0 12
19796: PPUSH
19797: LD_INT 21
19799: PUSH
19800: LD_INT 2
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 50
19809: PUSH
19810: EMPTY
19811: LIST
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PPUSH
19817: CALL_OW 72
19821: PUSH
19822: LD_INT 1
19824: ARRAY
19825: PPUSH
19826: CALL_OW 74
19830: ST_TO_ADDR
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , nearUnit ) ;
19831: LD_VAR 0 12
19835: PPUSH
19836: LD_INT 21
19838: PUSH
19839: LD_INT 2
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: EMPTY
19847: LIST
19848: PPUSH
19849: CALL_OW 72
19853: PPUSH
19854: LD_VAR 0 10
19858: PPUSH
19859: CALL_OW 115
// end ; end ;
19863: GO 19697
19865: POP
19866: POP
// end else
19867: GO 19902
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , 27 , 34 ) ;
19869: LD_VAR 0 12
19873: PPUSH
19874: LD_INT 21
19876: PUSH
19877: LD_INT 2
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: EMPTY
19885: LIST
19886: PPUSH
19887: CALL_OW 72
19891: PPUSH
19892: LD_INT 27
19894: PPUSH
19895: LD_INT 34
19897: PPUSH
19898: CALL_OW 111
// if GetDistUnitXY ( unit , 27 , 34 ) < 5 then
19902: LD_VAR 0 5
19906: PPUSH
19907: LD_INT 27
19909: PPUSH
19910: LD_INT 34
19912: PPUSH
19913: CALL_OW 297
19917: PUSH
19918: LD_INT 5
19920: LESS
19921: IFFALSE 19931
// inBase = true ;
19923: LD_ADDR_VAR 0 15
19927: PUSH
19928: LD_INT 1
19930: ST_TO_ADDR
// end ;
19931: GO 19185
19933: POP
19934: POP
// wait ( 0 0$1 ) ;
19935: LD_INT 35
19937: PPUSH
19938: CALL_OW 67
// until UnitFilter ( units , [ f_ok ] ) = 0 or inBase ;
19942: LD_VAR 0 1
19946: PPUSH
19947: LD_INT 50
19949: PUSH
19950: EMPTY
19951: LIST
19952: PPUSH
19953: CALL_OW 72
19957: PUSH
19958: LD_INT 0
19960: EQUAL
19961: PUSH
19962: LD_VAR 0 15
19966: OR
19967: IFFALSE 18964
// ComMoveXY ( UnitFilter ( units , [ [ f_type , unit_human ] , [ f_ok ] ] ) , 27 , 34 ) ;
19969: LD_VAR 0 1
19973: PPUSH
19974: LD_INT 21
19976: PUSH
19977: LD_INT 1
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 50
19986: PUSH
19987: EMPTY
19988: LIST
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PPUSH
19994: CALL_OW 72
19998: PPUSH
19999: LD_INT 27
20001: PPUSH
20002: LD_INT 34
20004: PPUSH
20005: CALL_OW 111
// for i := 1 to units do
20009: LD_ADDR_VAR 0 4
20013: PUSH
20014: DOUBLE
20015: LD_INT 1
20017: DEC
20018: ST_TO_ADDR
20019: LD_VAR 0 1
20023: PUSH
20024: FOR_TO
20025: IFFALSE 20060
// if IsOk ( units [ i ] ) then
20027: LD_VAR 0 1
20031: PUSH
20032: LD_VAR 0 4
20036: ARRAY
20037: PPUSH
20038: CALL_OW 302
20042: IFFALSE 20058
// americanTroopsArriveOmicronCounter = americanTroopsArriveOmicronCounter + 1 ;
20044: LD_ADDR_EXP 12
20048: PUSH
20049: LD_EXP 12
20053: PUSH
20054: LD_INT 1
20056: PLUS
20057: ST_TO_ADDR
20058: GO 20024
20060: POP
20061: POP
// amSupportTroops = amSupportTroops diff units ;
20062: LD_ADDR_EXP 84
20066: PUSH
20067: LD_EXP 84
20071: PUSH
20072: LD_VAR 0 1
20076: DIFF
20077: ST_TO_ADDR
// newBase = amBase ;
20078: LD_ADDR_VAR 0 16
20082: PUSH
20083: LD_EXP 86
20087: ST_TO_ADDR
// newBase = newBase ^ UnitFilter ( units , [ f_ok ] ) ;
20088: LD_ADDR_VAR 0 16
20092: PUSH
20093: LD_VAR 0 16
20097: PUSH
20098: LD_VAR 0 1
20102: PPUSH
20103: LD_INT 50
20105: PUSH
20106: EMPTY
20107: LIST
20108: PPUSH
20109: CALL_OW 72
20113: ADD
20114: ST_TO_ADDR
// amBase = newBase ;
20115: LD_ADDR_EXP 86
20119: PUSH
20120: LD_VAR 0 16
20124: ST_TO_ADDR
// end ; end_of_file
20125: LD_VAR 0 3
20129: RET
// export function Lose_Burlak ; begin
20130: LD_INT 0
20132: PPUSH
// YouLost ( Burlak ) ;
20133: LD_STRING Burlak
20135: PPUSH
20136: CALL_OW 104
// end ;
20140: LD_VAR 0 1
20144: RET
// export function Lose_Omicron ; begin
20145: LD_INT 0
20147: PPUSH
// YouLost ( Omicron ) ;
20148: LD_STRING Omicron
20150: PPUSH
20151: CALL_OW 104
// end ;
20155: LD_VAR 0 1
20159: RET
// export function Lose_Vehicles ; begin
20160: LD_INT 0
20162: PPUSH
// YouLost ( Vehicles ) ;
20163: LD_STRING Vehicles
20165: PPUSH
20166: CALL_OW 104
// end ;
20170: LD_VAR 0 1
20174: RET
// export function Lose_SelfAttack ; begin
20175: LD_INT 0
20177: PPUSH
// YouLost ( SelfAttack ) ;
20178: LD_STRING SelfAttack
20180: PPUSH
20181: CALL_OW 104
// end ;
20185: LD_VAR 0 1
20189: RET
// export function Lose_Delay ; begin
20190: LD_INT 0
20192: PPUSH
// YouLost ( Delay ) ;
20193: LD_STRING Delay
20195: PPUSH
20196: CALL_OW 104
// end ; end_of_file
20200: LD_VAR 0 1
20204: RET
// export function FinishMission ; begin
20205: LD_INT 0
20207: PPUSH
// SetRewards ;
20208: CALL 20229 0 0
// SavePlayerCharacters ;
20212: CALL 20443 0 0
// SaveGlobalVariables ;
20216: CALL 20772 0 0
// YouWin ;
20220: CALL_OW 103
// end ;
20224: LD_VAR 0 1
20228: RET
// function SetRewards ; var unitsToReward ; begin
20229: LD_INT 0
20231: PPUSH
20232: PPUSH
// if produceMoreVehicles then
20233: LD_EXP 16
20237: IFFALSE 20251
// AddMedal ( Surplus , 1 ) else
20239: LD_STRING Surplus
20241: PPUSH
20242: LD_INT 1
20244: PPUSH
20245: CALL_OW 101
20249: GO 20281
// if produceOnlyForYou then
20251: LD_EXP 17
20255: IFFALSE 20270
// AddMedal ( Surplus , - 1 ) else
20257: LD_STRING Surplus
20259: PPUSH
20260: LD_INT 1
20262: NEG
20263: PPUSH
20264: CALL_OW 101
20268: GO 20281
// AddMedal ( Surplus , - 2 ) ;
20270: LD_STRING Surplus
20272: PPUSH
20273: LD_INT 2
20275: NEG
20276: PPUSH
20277: CALL_OW 101
// if americanTroopsArriveOmicronCounter < maxAmericanTroopsIgnore then
20281: LD_EXP 12
20285: PUSH
20286: LD_EXP 46
20290: LESS
20291: IFFALSE 20305
// AddMedal ( PreventReinforcements , 1 ) else
20293: LD_STRING PreventReinforcements
20295: PPUSH
20296: LD_INT 1
20298: PPUSH
20299: CALL_OW 101
20303: GO 20316
// AddMedal ( PreventReinforcements , - 1 ) ;
20305: LD_STRING PreventReinforcements
20307: PPUSH
20308: LD_INT 1
20310: NEG
20311: PPUSH
20312: CALL_OW 101
// if scholtzeSaved and IsOK ( Scholtze ) then
20316: LD_EXP 7
20320: PUSH
20321: LD_EXP 55
20325: PPUSH
20326: CALL_OW 302
20330: AND
20331: IFFALSE 20345
// AddMedal ( Scholtze , 1 ) else
20333: LD_STRING Scholtze
20335: PPUSH
20336: LD_INT 1
20338: PPUSH
20339: CALL_OW 101
20343: GO 20356
// AddMedal ( Scholtze , - 1 ) ;
20345: LD_STRING Scholtze
20347: PPUSH
20348: LD_INT 1
20350: NEG
20351: PPUSH
20352: CALL_OW 101
// GiveMedals ( Main ) ;
20356: LD_STRING Main
20358: PPUSH
20359: CALL_OW 102
// unitsToReward = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
20363: LD_ADDR_VAR 0 2
20367: PUSH
20368: LD_INT 22
20370: PUSH
20371: LD_INT 3
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: LD_INT 21
20380: PUSH
20381: LD_INT 1
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PPUSH
20392: CALL_OW 69
20396: ST_TO_ADDR
// unitsToReward = unitsToReward ^ survivorsArabianAttack ;
20397: LD_ADDR_VAR 0 2
20401: PUSH
20402: LD_VAR 0 2
20406: PUSH
20407: LD_EXP 79
20411: ADD
20412: ST_TO_ADDR
// unitsToReward = unitsToReward diff Popov ;
20413: LD_ADDR_VAR 0 2
20417: PUSH
20418: LD_VAR 0 2
20422: PUSH
20423: LD_EXP 62
20427: DIFF
20428: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
20429: LD_VAR 0 2
20433: PPUSH
20434: CALL_OW 43
// end ;
20438: LD_VAR 0 1
20442: RET
// function SavePlayerCharacters ; var othersYour , othersKirov ; begin
20443: LD_INT 0
20445: PPUSH
20446: PPUSH
20447: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
20448: LD_EXP 49
20452: PPUSH
20453: LD_STRING Burlak
20455: PPUSH
20456: LD_INT 3
20458: PPUSH
20459: CALL 7260 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
20463: LD_EXP 50
20467: PPUSH
20468: LD_STRING Gnyevko
20470: PPUSH
20471: LD_INT 3
20473: PPUSH
20474: CALL 7260 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
20478: LD_EXP 52
20482: PPUSH
20483: LD_STRING Kovalyuk
20485: PPUSH
20486: LD_INT 3
20488: PPUSH
20489: CALL 7260 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
20493: LD_EXP 51
20497: PPUSH
20498: LD_STRING Kirilenkova
20500: PPUSH
20501: LD_INT 3
20503: PPUSH
20504: CALL 7260 0 3
// ExtSaveCharacter ( Scholtze , Scholtze , 3 ) ;
20508: LD_EXP 55
20512: PPUSH
20513: LD_STRING Scholtze
20515: PPUSH
20516: LD_INT 3
20518: PPUSH
20519: CALL 7260 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
20523: LD_EXP 53
20527: PPUSH
20528: LD_STRING Belkov
20530: PPUSH
20531: LD_INT 3
20533: PPUSH
20534: CALL 7260 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
20538: LD_EXP 54
20542: PPUSH
20543: LD_STRING Belkov2
20545: PPUSH
20546: LD_INT 3
20548: PPUSH
20549: CALL 7260 0 3
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
20553: LD_EXP 53
20557: PPUSH
20558: LD_STRING Belkov
20560: PPUSH
20561: LD_INT 6
20563: PPUSH
20564: CALL 7260 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
20568: LD_EXP 54
20572: PPUSH
20573: LD_STRING Belkov2
20575: PPUSH
20576: LD_INT 6
20578: PPUSH
20579: CALL 7260 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova , Scholtze ] ;
20583: LD_ADDR_VAR 0 2
20587: PUSH
20588: LD_INT 22
20590: PUSH
20591: LD_INT 3
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 21
20600: PUSH
20601: LD_INT 1
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: LD_INT 50
20610: PUSH
20611: EMPTY
20612: LIST
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: LIST
20618: PPUSH
20619: CALL_OW 69
20623: PUSH
20624: LD_EXP 49
20628: PUSH
20629: LD_EXP 50
20633: PUSH
20634: LD_EXP 53
20638: PUSH
20639: LD_EXP 54
20643: PUSH
20644: LD_EXP 52
20648: PUSH
20649: LD_EXP 51
20653: PUSH
20654: LD_EXP 55
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: DIFF
20668: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
20669: LD_VAR 0 2
20673: PPUSH
20674: LD_STRING other_survivors
20676: PPUSH
20677: LD_INT 3
20679: PPUSH
20680: CALL 7316 0 3
// othersKirov = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Kurin , Popov , Belkov , Belkov2 ] ;
20684: LD_ADDR_VAR 0 3
20688: PUSH
20689: LD_INT 22
20691: PUSH
20692: LD_INT 6
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 21
20701: PUSH
20702: LD_INT 1
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 50
20711: PUSH
20712: EMPTY
20713: LIST
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: LIST
20719: PPUSH
20720: CALL_OW 69
20724: PUSH
20725: LD_EXP 61
20729: PUSH
20730: LD_EXP 62
20734: PUSH
20735: LD_EXP 53
20739: PUSH
20740: LD_EXP 54
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: DIFF
20751: ST_TO_ADDR
// ExtSaveCharacters ( othersKirov , other_kirov , 6 ) ;
20752: LD_VAR 0 3
20756: PPUSH
20757: LD_STRING other_kirov
20759: PPUSH
20760: LD_INT 6
20762: PPUSH
20763: CALL 7316 0 3
// end ;
20767: LD_VAR 0 1
20771: RET
// function SaveGlobalVariables ; begin
20772: LD_INT 0
20774: PPUSH
// SaveVariable ( kurinOpinion , 03_KurinOpinion_1 ) ;
20775: LD_EXP 26
20779: PPUSH
20780: LD_STRING 03_KurinOpinion_1
20782: PPUSH
20783: CALL_OW 39
// end ; end_of_file
20787: LD_VAR 0 1
20791: RET
// export function CustomEvent ( event ) ; begin
20792: LD_INT 0
20794: PPUSH
// end ;
20795: LD_VAR 0 2
20799: RET
// on Command ( com ) do var i , j , temp , order , x , y , building ;
20800: LD_INT 0
20802: PPUSH
20803: PPUSH
20804: PPUSH
20805: PPUSH
20806: PPUSH
20807: PPUSH
20808: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
20809: LD_ADDR_VAR 0 2
20813: PUSH
20814: LD_INT 22
20816: PUSH
20817: LD_INT 3
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: LD_INT 21
20826: PUSH
20827: LD_INT 1
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PPUSH
20838: CALL_OW 69
20842: PUSH
20843: FOR_IN
20844: IFFALSE 21041
// if GetTaskList ( i ) > 0 then
20846: LD_VAR 0 2
20850: PPUSH
20851: CALL_OW 437
20855: PUSH
20856: LD_INT 0
20858: GREATER
20859: IFFALSE 21039
// for j = 1 to GetTaskList ( i ) do
20861: LD_ADDR_VAR 0 3
20865: PUSH
20866: DOUBLE
20867: LD_INT 1
20869: DEC
20870: ST_TO_ADDR
20871: LD_VAR 0 2
20875: PPUSH
20876: CALL_OW 437
20880: PUSH
20881: FOR_TO
20882: IFFALSE 21037
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
20884: LD_ADDR_VAR 0 4
20888: PUSH
20889: LD_VAR 0 2
20893: PPUSH
20894: CALL_OW 437
20898: PUSH
20899: LD_VAR 0 3
20903: ARRAY
20904: PUSH
20905: LD_INT 4
20907: ARRAY
20908: ST_TO_ADDR
// building = GetTaskList ( i ) [ j ] [ 5 ] ;
20909: LD_ADDR_VAR 0 8
20913: PUSH
20914: LD_VAR 0 2
20918: PPUSH
20919: CALL_OW 437
20923: PUSH
20924: LD_VAR 0 3
20928: ARRAY
20929: PUSH
20930: LD_INT 5
20932: ARRAY
20933: ST_TO_ADDR
// x = GetTaskList ( i ) [ j ] [ 2 ] ;
20934: LD_ADDR_VAR 0 6
20938: PUSH
20939: LD_VAR 0 2
20943: PPUSH
20944: CALL_OW 437
20948: PUSH
20949: LD_VAR 0 3
20953: ARRAY
20954: PUSH
20955: LD_INT 2
20957: ARRAY
20958: ST_TO_ADDR
// y = GetTaskList ( i ) [ j ] [ 3 ] ;
20959: LD_ADDR_VAR 0 7
20963: PUSH
20964: LD_VAR 0 2
20968: PPUSH
20969: CALL_OW 437
20973: PUSH
20974: LD_VAR 0 3
20978: ARRAY
20979: PUSH
20980: LD_INT 3
20982: ARRAY
20983: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
20984: LD_VAR 0 4
20988: PPUSH
20989: CALL_OW 255
20993: PUSH
20994: LD_INT 6
20996: EQUAL
20997: PUSH
20998: LD_VAR 0 2
21002: PPUSH
21003: CALL_OW 437
21007: PUSH
21008: LD_VAR 0 3
21012: ARRAY
21013: PUSH
21014: LD_INT 1
21016: ARRAY
21017: PUSH
21018: LD_STRING <
21020: EQUAL
21021: AND
21022: IFFALSE 21035
// SetTaskList ( i , [ ] ) ;
21024: LD_VAR 0 2
21028: PPUSH
21029: EMPTY
21030: PPUSH
21031: CALL_OW 446
// end ;
21035: GO 20881
21037: POP
21038: POP
21039: GO 20843
21041: POP
21042: POP
// end ;
21043: PPOPN 8
21045: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
21046: LD_VAR 0 2
21050: PUSH
21051: LD_INT 6
21053: EQUAL
21054: IFFALSE 21068
// SetSide ( building , 6 ) ;
21056: LD_VAR 0 1
21060: PPUSH
21061: LD_INT 6
21063: PPUSH
21064: CALL_OW 235
// end ;
21068: PPOPN 3
21070: END
// on BuildingComplete ( building ) do var diffUnits , canTakeUnits ;
21071: LD_INT 0
21073: PPUSH
21074: PPUSH
// begin diffUnits = [ ] ;
21075: LD_ADDR_VAR 0 2
21079: PUSH
21080: EMPTY
21081: ST_TO_ADDR
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , SecondBurlakBase ) then
21082: LD_VAR 0 1
21086: PPUSH
21087: CALL_OW 255
21091: PUSH
21092: LD_INT 3
21094: EQUAL
21095: PUSH
21096: LD_VAR 0 1
21100: PPUSH
21101: CALL_OW 266
21105: PUSH
21106: LD_INT 0
21108: EQUAL
21109: AND
21110: PUSH
21111: LD_VAR 0 1
21115: PPUSH
21116: LD_INT 21
21118: PPUSH
21119: CALL_OW 308
21123: AND
21124: IFFALSE 21138
// SetBName ( building , kagan ) ;
21126: LD_VAR 0 1
21130: PPUSH
21131: LD_STRING kagan
21133: PPUSH
21134: CALL_OW 500
// if GetSide ( building ) = 6 then
21138: LD_VAR 0 1
21142: PPUSH
21143: CALL_OW 255
21147: PUSH
21148: LD_INT 6
21150: EQUAL
21151: IFFALSE 21332
// begin if GetBType ( building ) = b_ext_noncombat then
21153: LD_VAR 0 1
21157: PPUSH
21158: CALL_OW 266
21162: PUSH
21163: LD_INT 19
21165: EQUAL
21166: IFFALSE 21172
// begin SpawnKirovSupport ;
21168: CALL 4607 0 0
// end ; if GetBType ( building ) = b_depot then
21172: LD_VAR 0 1
21176: PPUSH
21177: CALL_OW 266
21181: PUSH
21182: LD_INT 0
21184: EQUAL
21185: IFFALSE 21231
// begin kirovOilDepot = building ;
21187: LD_ADDR_EXP 68
21191: PUSH
21192: LD_VAR 0 1
21196: ST_TO_ADDR
// SetResourceType ( GetBase ( kirovOilDepot ) , mat_oil , 3000 ) ;
21197: LD_EXP 68
21201: PPUSH
21202: CALL_OW 274
21206: PPUSH
21207: LD_INT 2
21209: PPUSH
21210: LD_INT 3000
21212: PPUSH
21213: CALL_OW 277
// ComEnterUnit ( Grishko , building ) ;
21217: LD_EXP 82
21221: PPUSH
21222: LD_VAR 0 1
21226: PPUSH
21227: CALL_OW 120
// end ; if ( GetBType ( building ) = b_breastwork or GetBType ( building ) = b_armoury ) and IsInArea ( building , SecondKurinBase ) then
21231: LD_VAR 0 1
21235: PPUSH
21236: CALL_OW 266
21240: PUSH
21241: LD_INT 31
21243: EQUAL
21244: PUSH
21245: LD_VAR 0 1
21249: PPUSH
21250: CALL_OW 266
21254: PUSH
21255: LD_INT 4
21257: EQUAL
21258: OR
21259: PUSH
21260: LD_VAR 0 1
21264: PPUSH
21265: LD_INT 20
21267: PPUSH
21268: CALL_OW 308
21272: AND
21273: IFFALSE 21332
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) [ 1 ] , building ) ;
21275: LD_EXP 78
21279: PPUSH
21280: LD_INT 25
21282: PUSH
21283: LD_INT 1
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 56
21292: PUSH
21293: EMPTY
21294: LIST
21295: PUSH
21296: LD_INT 3
21298: PUSH
21299: LD_INT 60
21301: PUSH
21302: EMPTY
21303: LIST
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: LIST
21313: PPUSH
21314: CALL_OW 72
21318: PUSH
21319: LD_INT 1
21321: ARRAY
21322: PPUSH
21323: LD_VAR 0 1
21327: PPUSH
21328: CALL_OW 120
// end ; end ;
21332: PPOPN 3
21334: END
// on UpgradeComplete ( building ) do var i , tmp ;
21335: LD_INT 0
21337: PPUSH
21338: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_factory and not dialog_workshop then
21339: LD_VAR 0 1
21343: PPUSH
21344: CALL_OW 255
21348: PUSH
21349: LD_INT 3
21351: EQUAL
21352: PUSH
21353: LD_VAR 0 1
21357: PPUSH
21358: CALL_OW 266
21362: PUSH
21363: LD_INT 3
21365: EQUAL
21366: AND
21367: PUSH
21368: LD_EXP 8
21372: NOT
21373: AND
21374: IFFALSE 21385
// Dial_UpgradeWorkshop ( building ) ;
21376: LD_VAR 0 1
21380: PPUSH
21381: CALL 24551 0 1
// end ;
21385: PPOPN 3
21387: END
// on UnitDestroyed ( un ) do begin if un = Burlak then
21388: LD_VAR 0 1
21392: PUSH
21393: LD_EXP 49
21397: EQUAL
21398: IFFALSE 21404
// Lose_Burlak ;
21400: CALL 20130 0 0
// if un = beriaDepot and not canDestroyBeriaBase then
21404: LD_VAR 0 1
21408: PUSH
21409: LD_EXP 60
21413: EQUAL
21414: PUSH
21415: LD_EXP 28
21419: NOT
21420: AND
21421: IFFALSE 21427
// Lose_Omicron ;
21423: CALL 20145 0 0
// end ;
21427: PPOPN 1
21429: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
21430: LD_VAR 0 1
21434: PUSH
21435: LD_INT 3
21437: EQUAL
21438: PUSH
21439: LD_VAR 0 2
21443: PUSH
21444: LD_INT 6
21446: EQUAL
21447: AND
21448: IFFALSE 21454
// Lose_SelfAttack ;
21450: CALL 20175 0 0
// end ;
21454: PPOPN 2
21456: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 6 then
21457: LD_VAR 0 1
21461: PPUSH
21462: CALL_OW 255
21466: PUSH
21467: LD_INT 6
21469: EQUAL
21470: IFFALSE 21635
// begin if GetWeapon ( vehicle ) = ru_cargo_bay and not kirovTransportCargo then
21472: LD_VAR 0 1
21476: PPUSH
21477: CALL_OW 264
21481: PUSH
21482: LD_INT 51
21484: EQUAL
21485: PUSH
21486: LD_EXP 74
21490: NOT
21491: AND
21492: IFFALSE 21506
// kirovTransportCargo = vehicle else
21494: LD_ADDR_EXP 74
21498: PUSH
21499: LD_VAR 0 1
21503: ST_TO_ADDR
21504: GO 21578
// begin if GetWeapon ( vehicle ) = ru_cargo_bay then
21506: LD_VAR 0 1
21510: PPUSH
21511: CALL_OW 264
21515: PUSH
21516: LD_INT 51
21518: EQUAL
21519: IFFALSE 21578
// begin ComTransport ( vehicle , kirovOilDepot , mat_oil ) ;
21521: LD_VAR 0 1
21525: PPUSH
21526: LD_EXP 68
21530: PPUSH
21531: LD_INT 2
21533: PPUSH
21534: CALL_OW 151
// AddComMoveXY ( vehicle , 137 , 99 ) ;
21538: LD_VAR 0 1
21542: PPUSH
21543: LD_INT 137
21545: PPUSH
21546: LD_INT 99
21548: PPUSH
21549: CALL_OW 171
// AddComHold ( vehicle ) ;
21553: LD_VAR 0 1
21557: PPUSH
21558: CALL_OW 200
// kirovAttackCargo = kirovAttackCargo ^ vehicle ;
21562: LD_ADDR_EXP 75
21566: PUSH
21567: LD_EXP 75
21571: PUSH
21572: LD_VAR 0 1
21576: ADD
21577: ST_TO_ADDR
// end ; end ; if GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
21578: LD_VAR 0 1
21582: PPUSH
21583: CALL_OW 264
21587: PUSH
21588: LD_INT 42
21590: PUSH
21591: LD_INT 43
21593: PUSH
21594: LD_INT 44
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: LIST
21601: IN
21602: IFFALSE 21635
// begin kirovAttackVehicles = kirovAttackVehicles ^ vehicle ;
21604: LD_ADDR_EXP 76
21608: PUSH
21609: LD_EXP 76
21613: PUSH
21614: LD_VAR 0 1
21618: ADD
21619: ST_TO_ADDR
// ComMoveXY ( vehicle , 137 , 99 ) ;
21620: LD_VAR 0 1
21624: PPUSH
21625: LD_INT 137
21627: PPUSH
21628: LD_INT 99
21630: PPUSH
21631: CALL_OW 111
// end ; end ; end ;
21635: PPOPN 2
21637: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin if side = 6 and not old in kirovCanCaptureVehicles then
21638: LD_VAR 0 3
21642: PUSH
21643: LD_INT 6
21645: EQUAL
21646: PUSH
21647: LD_VAR 0 2
21651: PUSH
21652: LD_EXP 30
21656: IN
21657: NOT
21658: AND
21659: IFFALSE 21682
// begin ComExitVehicle ( capturing_unit ) ;
21661: LD_VAR 0 4
21665: PPUSH
21666: CALL_OW 121
// SetSide ( new , 6 ) ;
21670: LD_VAR 0 1
21674: PPUSH
21675: LD_INT 6
21677: PPUSH
21678: CALL_OW 235
// end ; end ;
21682: PPOPN 4
21684: END
// on EnterVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 and meetNearOmicronBase then
21685: LD_VAR 0 1
21689: PPUSH
21690: CALL_OW 255
21694: PUSH
21695: LD_INT 6
21697: EQUAL
21698: PUSH
21699: LD_EXP 19
21703: AND
21704: IFFALSE 21732
// begin wait ( 0 0$2 ) ;
21706: LD_INT 70
21708: PPUSH
21709: CALL_OW 67
// AddComAgressiveMove ( vehicle , 78 , 39 ) ;
21713: LD_VAR 0 1
21717: PPUSH
21718: LD_INT 78
21720: PPUSH
21721: LD_INT 39
21723: PPUSH
21724: CALL_OW 174
// KirovAttackOmicron ;
21728: CALL 17916 0 0
// end ; end ;
21732: PPOPN 2
21734: END
// on ResearchComplete ( research , building ) do begin if GetSide ( building ) = 6 and research = tech_gun then
21735: LD_VAR 0 2
21739: PPUSH
21740: CALL_OW 255
21744: PUSH
21745: LD_INT 6
21747: EQUAL
21748: PUSH
21749: LD_VAR 0 1
21753: PUSH
21754: LD_INT 39
21756: EQUAL
21757: AND
21758: IFFALSE 21819
// begin MountWeaponTurrent ;
21760: CALL 17380 0 0
// wait ( 3 3$30 ) ;
21764: LD_INT 7350
21766: PPUSH
21767: CALL_OW 67
// KirovProduceVehicles ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
21771: LD_INT 22
21773: PUSH
21774: LD_INT 6
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: LD_INT 21
21783: PUSH
21784: LD_INT 3
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: LD_INT 30
21793: PUSH
21794: LD_INT 3
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: LIST
21805: PPUSH
21806: CALL_OW 69
21810: PUSH
21811: LD_INT 1
21813: ARRAY
21814: PPUSH
21815: CALL 17446 0 1
// end ; end ; end_of_file
21819: PPOPN 2
21821: END
// export function MissionIntro ; var i , unit , freeSlots , tmp , timer ; begin
21822: LD_INT 0
21824: PPUSH
21825: PPUSH
21826: PPUSH
21827: PPUSH
21828: PPUSH
21829: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
21830: LD_EXP 49
21834: PUSH
21835: LD_EXP 61
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PPUSH
21844: CALL_OW 87
// ComTurnUnit ( [ Burlak , BelkovDialog ] , Kurin ) ;
21848: LD_EXP 49
21852: PUSH
21853: LD_EXP 63
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PPUSH
21862: LD_EXP 61
21866: PPUSH
21867: CALL_OW 119
// ComTurnUnit ( Kurin , Burlak ) ;
21871: LD_EXP 61
21875: PPUSH
21876: LD_EXP 49
21880: PPUSH
21881: CALL_OW 119
// RevealFogArea ( 3 , RevealMapPartArea ) ;
21885: LD_INT 3
21887: PPUSH
21888: LD_INT 24
21890: PPUSH
21891: CALL_OW 332
// if not IsPlaced ( Belkov ) and not IsPlaced ( Belkov2 ) then
21895: LD_EXP 53
21899: PPUSH
21900: CALL_OW 305
21904: NOT
21905: PUSH
21906: LD_EXP 54
21910: PPUSH
21911: CALL_OW 305
21915: NOT
21916: AND
21917: IFFALSE 22005
// begin Say ( Kurin , D1a-Kur-1 ) ;
21919: LD_EXP 61
21923: PPUSH
21924: LD_STRING D1a-Kur-1
21926: PPUSH
21927: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
21931: LD_EXP 49
21935: PPUSH
21936: LD_STRING D1a-Bur-1
21938: PPUSH
21939: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
21943: LD_EXP 61
21947: PPUSH
21948: LD_STRING D1a-Kur-2
21950: PPUSH
21951: CALL_OW 88
// if platonovOpinion <= 1 then
21955: LD_EXP 27
21959: PUSH
21960: LD_INT 1
21962: LESSEQUAL
21963: IFFALSE 21979
// Say ( Kurin , D1a-Kur-2a ) else
21965: LD_EXP 61
21969: PPUSH
21970: LD_STRING D1a-Kur-2a
21972: PPUSH
21973: CALL_OW 88
21977: GO 21991
// Say ( Kurin , D1a-Kur-2b ) ;
21979: LD_EXP 61
21983: PPUSH
21984: LD_STRING D1a-Kur-2b
21986: PPUSH
21987: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
21991: LD_EXP 49
21995: PPUSH
21996: LD_STRING D1a-Bur-2
21998: PPUSH
21999: CALL_OW 88
// end else
22003: GO 22041
// begin Say ( Kurin , D1b-Kur-1 ) ;
22005: LD_EXP 61
22009: PPUSH
22010: LD_STRING D1b-Kur-1
22012: PPUSH
22013: CALL_OW 88
// Say ( BelkovDialog , D1b-Bel-1 ) ;
22017: LD_EXP 63
22021: PPUSH
22022: LD_STRING D1b-Bel-1
22024: PPUSH
22025: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
22029: LD_EXP 61
22033: PPUSH
22034: LD_STRING D1b-Kur-2
22036: PPUSH
22037: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
22041: LD_EXP 61
22045: PPUSH
22046: LD_STRING D2-Kur-1
22048: PPUSH
22049: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
22053: LD_EXP 49
22057: PPUSH
22058: LD_STRING D2-Bur-1
22060: PPUSH
22061: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
22065: LD_EXP 61
22069: PPUSH
22070: LD_STRING D2-Kur-2
22072: PPUSH
22073: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
22077: LD_EXP 49
22081: PPUSH
22082: LD_STRING D2-Bur-2
22084: PPUSH
22085: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
22089: LD_EXP 61
22093: PPUSH
22094: LD_STRING D2-Kur-3
22096: PPUSH
22097: CALL_OW 88
// SetAttitude ( 1 , 6 , att_friend , true ) ;
22101: LD_INT 1
22103: PPUSH
22104: LD_INT 6
22106: PPUSH
22107: LD_INT 1
22109: PPUSH
22110: LD_INT 1
22112: PPUSH
22113: CALL_OW 80
// PrepareAmericansMissionIntro ;
22117: CALL 5668 0 0
// ComMoveXY ( amIntroUnits , 28 , 35 ) ;
22121: LD_EXP 83
22125: PPUSH
22126: LD_INT 28
22128: PPUSH
22129: LD_INT 35
22131: PPUSH
22132: CALL_OW 111
// CenterOnXY ( 93 , 36 ) ;
22136: LD_INT 93
22138: PPUSH
22139: LD_INT 36
22141: PPUSH
22142: CALL_OW 84
// PlaceSeeing ( 93 , 36 , 3 , - 9 ) ;
22146: LD_INT 93
22148: PPUSH
22149: LD_INT 36
22151: PPUSH
22152: LD_INT 3
22154: PPUSH
22155: LD_INT 9
22157: NEG
22158: PPUSH
22159: CALL_OW 330
// wait ( 0 0$6 ) ;
22163: LD_INT 210
22165: PPUSH
22166: CALL_OW 67
// CenterOnUnits ( Popov ) ;
22170: LD_EXP 62
22174: PPUSH
22175: CALL_OW 85
// wait ( 0 0$1 ) ;
22179: LD_INT 35
22181: PPUSH
22182: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
22186: LD_EXP 62
22190: PPUSH
22191: LD_STRING D2-Pop-3
22193: PPUSH
22194: CALL_OW 94
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
22198: LD_EXP 49
22202: PUSH
22203: LD_EXP 61
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PPUSH
22212: CALL_OW 87
// wait ( 0 0$1 ) ;
22216: LD_INT 35
22218: PPUSH
22219: CALL_OW 67
// for unit in amIntroUnits do
22223: LD_ADDR_VAR 0 3
22227: PUSH
22228: LD_EXP 83
22232: PUSH
22233: FOR_IN
22234: IFFALSE 22247
// RemoveUnit ( unit ) ;
22236: LD_VAR 0 3
22240: PPUSH
22241: CALL_OW 64
22245: GO 22233
22247: POP
22248: POP
// Say ( Kurin , D2-Kur-4 ) ;
22249: LD_EXP 61
22253: PPUSH
22254: LD_STRING D2-Kur-4
22256: PPUSH
22257: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
22261: LD_EXP 49
22265: PPUSH
22266: LD_STRING D2-Bur-4
22268: PPUSH
22269: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
22273: LD_EXP 61
22277: PPUSH
22278: LD_STRING D2-Kur-5
22280: PPUSH
22281: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
22285: LD_EXP 49
22289: PPUSH
22290: LD_STRING D2-Bur-5
22292: PPUSH
22293: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
22297: LD_EXP 61
22301: PPUSH
22302: LD_STRING D2-Kur-6
22304: PPUSH
22305: CALL_OW 88
// if IsPlaced ( Gnyevko ) then
22309: LD_EXP 50
22313: PPUSH
22314: CALL_OW 305
22318: IFFALSE 22334
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22320: LD_ADDR_EXP 38
22324: PUSH
22325: LD_EXP 38
22329: PUSH
22330: LD_INT 1
22332: MINUS
22333: ST_TO_ADDR
// if IsPlaced ( Kovalyuk ) then
22334: LD_EXP 52
22338: PPUSH
22339: CALL_OW 305
22343: IFFALSE 22359
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22345: LD_ADDR_EXP 38
22349: PUSH
22350: LD_EXP 38
22354: PUSH
22355: LD_INT 1
22357: MINUS
22358: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) then
22359: LD_EXP 51
22363: PPUSH
22364: CALL_OW 305
22368: IFFALSE 22384
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22370: LD_ADDR_EXP 38
22374: PUSH
22375: LD_EXP 38
22379: PUSH
22380: LD_INT 1
22382: MINUS
22383: ST_TO_ADDR
// SelectCharacters ( baseUnitsToChoose ) ;
22384: LD_EXP 38
22388: PPUSH
22389: CALL 7414 0 1
// RemoveSeeing ( 93 , 36 , 3 ) ;
22393: LD_INT 93
22395: PPUSH
22396: LD_INT 36
22398: PPUSH
22399: LD_INT 3
22401: PPUSH
22402: CALL_OW 331
// RevealFogArea ( 3 , RevealMapPartArea ) ;
22406: LD_INT 3
22408: PPUSH
22409: LD_INT 24
22411: PPUSH
22412: CALL_OW 332
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
22416: LD_INT 22
22418: PUSH
22419: LD_INT 3
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 21
22428: PUSH
22429: LD_INT 1
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PPUSH
22440: CALL_OW 69
22444: PPUSH
22445: CALL_OW 122
// wait ( 0 0$1 ) ;
22449: LD_INT 35
22451: PPUSH
22452: CALL_OW 67
// AddComMoveUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , beriaDepot ) ;
22456: LD_INT 22
22458: PUSH
22459: LD_INT 3
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 21
22468: PUSH
22469: LD_INT 1
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PPUSH
22480: CALL_OW 69
22484: PPUSH
22485: LD_EXP 60
22489: PPUSH
22490: CALL_OW 172
// timer := 0 ;
22494: LD_ADDR_VAR 0 6
22498: PUSH
22499: LD_INT 0
22501: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22502: LD_INT 35
22504: PPUSH
22505: CALL_OW 67
// timer := timer + 1 ;
22509: LD_ADDR_VAR 0 6
22513: PUSH
22514: LD_VAR 0 6
22518: PUSH
22519: LD_INT 1
22521: PLUS
22522: ST_TO_ADDR
// CenterNowOnUnits ( Burlak ) ;
22523: LD_EXP 49
22527: PPUSH
22528: CALL_OW 87
// ComMoveUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , beriaDepot ) ;
22532: LD_INT 22
22534: PUSH
22535: LD_INT 3
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PUSH
22542: LD_INT 21
22544: PUSH
22545: LD_INT 1
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PPUSH
22556: CALL_OW 69
22560: PPUSH
22561: LD_EXP 60
22565: PPUSH
22566: CALL_OW 112
// until GetDistUnits ( Burlak , beriaDepot ) < 6 or not HasTask ( Burlak ) or timer > 10 ;
22570: LD_EXP 49
22574: PPUSH
22575: LD_EXP 60
22579: PPUSH
22580: CALL_OW 296
22584: PUSH
22585: LD_INT 6
22587: LESS
22588: PUSH
22589: LD_EXP 49
22593: PPUSH
22594: CALL_OW 314
22598: NOT
22599: OR
22600: PUSH
22601: LD_VAR 0 6
22605: PUSH
22606: LD_INT 10
22608: GREATER
22609: OR
22610: IFFALSE 22502
// InGameOff ;
22612: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
22616: LD_STRING M1
22618: PPUSH
22619: CALL_OW 337
// SaveForQuickRestart ;
22623: CALL_OW 22
// counterEnable = true ;
22627: LD_ADDR_EXP 89
22631: PUSH
22632: LD_INT 1
22634: ST_TO_ADDR
// counterIndex = 1 ;
22635: LD_ADDR_EXP 90
22639: PUSH
22640: LD_INT 1
22642: ST_TO_ADDR
// RevealFogArea ( 3 , RevealMapPartArea ) ;
22643: LD_INT 3
22645: PPUSH
22646: LD_INT 24
22648: PPUSH
22649: CALL_OW 332
// ResAllTechs ( 6 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] , 3 ) ;
22653: LD_INT 6
22655: PPUSH
22656: LD_INT 22
22658: PUSH
22659: LD_INT 6
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 21
22668: PUSH
22669: LD_INT 3
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 30
22678: PUSH
22679: LD_INT 6
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: LIST
22690: PPUSH
22691: CALL_OW 69
22695: PUSH
22696: LD_INT 1
22698: ARRAY
22699: PPUSH
22700: LD_INT 3
22702: PPUSH
22703: CALL 8829 0 3
// ResAllTechs ( 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_lab_half ] ] ) [ 1 ] , 1 ) ;
22707: LD_INT 1
22709: PPUSH
22710: LD_INT 22
22712: PUSH
22713: LD_INT 1
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 21
22722: PUSH
22723: LD_INT 3
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 30
22732: PUSH
22733: LD_INT 7
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: LIST
22744: PPUSH
22745: CALL_OW 69
22749: PUSH
22750: LD_INT 1
22752: ARRAY
22753: PPUSH
22754: LD_INT 1
22756: PPUSH
22757: CALL 8829 0 3
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_gun , 159 , 116 , 0 ) ;
22761: LD_INT 18
22763: PPUSH
22764: LD_INT 22
22766: PUSH
22767: LD_INT 6
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PUSH
22774: LD_INT 21
22776: PUSH
22777: LD_INT 1
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 25
22786: PUSH
22787: LD_INT 2
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: LIST
22798: PPUSH
22799: CALL_OW 70
22803: PPUSH
22804: LD_INT 17
22806: PPUSH
22807: LD_INT 159
22809: PPUSH
22810: LD_INT 116
22812: PPUSH
22813: LD_INT 0
22815: PPUSH
22816: CALL_OW 205
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_noncombat , 161 , 115 , 5 ) ;
22820: LD_INT 18
22822: PPUSH
22823: LD_INT 22
22825: PUSH
22826: LD_INT 6
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 21
22835: PUSH
22836: LD_INT 1
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 25
22845: PUSH
22846: LD_INT 2
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: LIST
22857: PPUSH
22858: CALL_OW 70
22862: PPUSH
22863: LD_INT 19
22865: PPUSH
22866: LD_INT 161
22868: PPUSH
22869: LD_INT 115
22871: PPUSH
22872: LD_INT 5
22874: PPUSH
22875: CALL_OW 205
// AddComEnterUnit ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , kirovDepot ) ;
22879: LD_INT 18
22881: PPUSH
22882: LD_INT 22
22884: PUSH
22885: LD_INT 6
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 21
22894: PUSH
22895: LD_INT 1
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 25
22904: PUSH
22905: LD_INT 2
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: LIST
22916: PPUSH
22917: CALL_OW 70
22921: PPUSH
22922: LD_EXP 67
22926: PPUSH
22927: CALL_OW 180
// ComFree ( survivorsArabianAttack ) ;
22931: LD_EXP 79
22935: PPUSH
22936: CALL_OW 139
// tmp = survivorsArabianAttack diff Popov ;
22940: LD_ADDR_VAR 0 5
22944: PUSH
22945: LD_EXP 79
22949: PUSH
22950: LD_EXP 62
22954: DIFF
22955: ST_TO_ADDR
// freeSlots = 6 - UnitsInside ( ru2_bar1 ) ;
22956: LD_ADDR_VAR 0 4
22960: PUSH
22961: LD_INT 6
22963: PUSH
22964: LD_EXP 69
22968: PPUSH
22969: CALL_OW 313
22973: MINUS
22974: ST_TO_ADDR
// AddComEnterUnit ( survivorsArabianAttack diff Popov , ru2_bar1 ) ;
22975: LD_EXP 79
22979: PUSH
22980: LD_EXP 62
22984: DIFF
22985: PPUSH
22986: LD_EXP 69
22990: PPUSH
22991: CALL_OW 180
// for i = 1 to tmp do
22995: LD_ADDR_VAR 0 2
22999: PUSH
23000: DOUBLE
23001: LD_INT 1
23003: DEC
23004: ST_TO_ADDR
23005: LD_VAR 0 5
23009: PUSH
23010: FOR_TO
23011: IFFALSE 23063
// begin if freeSlots > 0 then
23013: LD_VAR 0 4
23017: PUSH
23018: LD_INT 0
23020: GREATER
23021: IFFALSE 23059
// begin ComEnterUnit ( tmp [ i ] , ru2_bar1 ) ;
23023: LD_VAR 0 5
23027: PUSH
23028: LD_VAR 0 2
23032: ARRAY
23033: PPUSH
23034: LD_EXP 69
23038: PPUSH
23039: CALL_OW 120
// freeSlots = freeSlots - 1 ;
23043: LD_ADDR_VAR 0 4
23047: PUSH
23048: LD_VAR 0 4
23052: PUSH
23053: LD_INT 1
23055: MINUS
23056: ST_TO_ADDR
// end else
23057: GO 23061
// break ;
23059: GO 23063
// end ;
23061: GO 23010
23063: POP
23064: POP
// wait ( 0 0$1 ) ;
23065: LD_INT 35
23067: PPUSH
23068: CALL_OW 67
// ComEnterUnit ( UnitFilter ( tmp , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) , kirovDepot ) ;
23072: LD_VAR 0 5
23076: PPUSH
23077: LD_INT 56
23079: PUSH
23080: EMPTY
23081: LIST
23082: PUSH
23083: LD_INT 3
23085: PUSH
23086: LD_INT 60
23088: PUSH
23089: EMPTY
23090: LIST
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PPUSH
23100: CALL_OW 72
23104: PPUSH
23105: LD_EXP 67
23109: PPUSH
23110: CALL_OW 120
// ComWalk ( ruScout ) ;
23114: LD_EXP 64
23118: PPUSH
23119: CALL_OW 138
// wait ( 0 0$1 ) ;
23123: LD_INT 35
23125: PPUSH
23126: CALL_OW 67
// AddComMoveXY ( [ ruScout , Popov ] , 99 , 37 ) ;
23130: LD_EXP 64
23134: PUSH
23135: LD_EXP 62
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: PPUSH
23144: LD_INT 99
23146: PPUSH
23147: LD_INT 37
23149: PPUSH
23150: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 88 , 60 ) ;
23154: LD_EXP 64
23158: PUSH
23159: LD_EXP 62
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PPUSH
23168: LD_INT 88
23170: PPUSH
23171: LD_INT 60
23173: PPUSH
23174: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 129 , 99 ) ;
23178: LD_EXP 64
23182: PUSH
23183: LD_EXP 62
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PPUSH
23192: LD_INT 129
23194: PPUSH
23195: LD_INT 99
23197: PPUSH
23198: CALL_OW 171
// AddComEnterUnit ( [ Popov , ruScout ] , kirovDepot ) ;
23202: LD_EXP 62
23206: PUSH
23207: LD_EXP 64
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PPUSH
23216: LD_EXP 67
23220: PPUSH
23221: CALL_OW 180
// end ;
23225: LD_VAR 0 1
23229: RET
// every 0 0$1 trigger kirovCompleteFactory do var i , tmp , pom , diffUnits , canTakeUnits ;
23230: LD_EXP 22
23234: IFFALSE 23506
23236: GO 23238
23238: DISABLE
23239: LD_INT 0
23241: PPUSH
23242: PPUSH
23243: PPUSH
23244: PPUSH
23245: PPUSH
// begin diffUnits = diffUnits ^ Kurin ;
23246: LD_ADDR_VAR 0 4
23250: PUSH
23251: LD_VAR 0 4
23255: PUSH
23256: LD_EXP 61
23260: ADD
23261: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
23262: LD_ADDR_VAR 0 4
23266: PUSH
23267: LD_VAR 0 4
23271: PUSH
23272: LD_EXP 79
23276: ADD
23277: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
23278: LD_ADDR_VAR 0 4
23282: PUSH
23283: LD_VAR 0 4
23287: PUSH
23288: LD_EXP 71
23292: ADD
23293: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff diffUnits ;
23294: LD_ADDR_VAR 0 5
23298: PUSH
23299: LD_INT 18
23301: PPUSH
23302: LD_INT 22
23304: PUSH
23305: LD_INT 6
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 21
23314: PUSH
23315: LD_INT 1
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PPUSH
23326: CALL_OW 70
23330: PUSH
23331: LD_VAR 0 4
23335: DIFF
23336: ST_TO_ADDR
// pom = 6 ;
23337: LD_ADDR_VAR 0 3
23341: PUSH
23342: LD_INT 6
23344: ST_TO_ADDR
// if canTakeUnits then
23345: LD_VAR 0 5
23349: IFFALSE 23473
// for i = 1 to canTakeUnits do
23351: LD_ADDR_VAR 0 1
23355: PUSH
23356: DOUBLE
23357: LD_INT 1
23359: DEC
23360: ST_TO_ADDR
23361: LD_VAR 0 5
23365: PUSH
23366: FOR_TO
23367: IFFALSE 23471
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
23369: LD_VAR 0 5
23373: PUSH
23374: LD_VAR 0 1
23378: ARRAY
23379: PPUSH
23380: CALL_OW 257
23384: PUSH
23385: LD_INT 3
23387: NONEQUAL
23388: IFFALSE 23435
// begin ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
23390: LD_VAR 0 5
23394: PUSH
23395: LD_VAR 0 1
23399: ARRAY
23400: PPUSH
23401: LD_EXP 21
23405: PPUSH
23406: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , 1 ) ;
23410: LD_VAR 0 5
23414: PUSH
23415: LD_VAR 0 1
23419: ARRAY
23420: PPUSH
23421: LD_INT 1
23423: PPUSH
23424: CALL_OW 183
// wait ( 0 0$1 ) ;
23428: LD_INT 35
23430: PPUSH
23431: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
23435: LD_VAR 0 5
23439: PUSH
23440: LD_VAR 0 1
23444: ARRAY
23445: PPUSH
23446: LD_EXP 21
23450: PPUSH
23451: CALL_OW 120
// pom = pom - 1 ;
23455: LD_ADDR_VAR 0 3
23459: PUSH
23460: LD_VAR 0 3
23464: PUSH
23465: LD_INT 1
23467: MINUS
23468: ST_TO_ADDR
// end ;
23469: GO 23366
23471: POP
23472: POP
// if pom > 0 then
23473: LD_VAR 0 3
23477: PUSH
23478: LD_INT 0
23480: GREATER
23481: IFFALSE 23506
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
23483: LD_ADDR_EXP 81
23487: PUSH
23488: LD_EXP 81
23492: PPUSH
23493: LD_INT 3
23495: PPUSH
23496: LD_VAR 0 3
23500: PPUSH
23501: CALL_OW 1
23505: ST_TO_ADDR
// end ;
23506: PPOPN 5
23508: END
// every 0 0$1 trigger kirovTransportCargo and not endCutscene do
23509: LD_EXP 74
23513: PUSH
23514: LD_EXP 31
23518: NOT
23519: AND
23520: IFFALSE 23569
23522: GO 23524
23524: DISABLE
// begin enable ;
23525: ENABLE
// AddComTransport ( kirovTransportCargo , kirovOilDepot , mat_oil ) ;
23526: LD_EXP 74
23530: PPUSH
23531: LD_EXP 68
23535: PPUSH
23536: LD_INT 2
23538: PPUSH
23539: CALL_OW 211
// AddComGive ( kirovTransportCargo , kirovDepot ) ;
23543: LD_EXP 74
23547: PPUSH
23548: LD_EXP 67
23552: PPUSH
23553: CALL_OW 221
// SetFuel ( kirovTransportCargo , 100 ) ;
23557: LD_EXP 74
23561: PPUSH
23562: LD_INT 100
23564: PPUSH
23565: CALL_OW 240
// end ;
23569: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
23570: LD_INT 78
23572: PPUSH
23573: LD_INT 112
23575: PPUSH
23576: LD_INT 3
23578: PPUSH
23579: CALL_OW 440
23583: IFFALSE 23637
23585: GO 23587
23587: DISABLE
// begin CenterOnXY ( 78 , 112 ) ;
23588: LD_INT 78
23590: PPUSH
23591: LD_INT 112
23593: PPUSH
23594: CALL_OW 84
// DialogueOn ;
23598: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
23602: LD_EXP 49
23606: PPUSH
23607: LD_STRING D2a-Bur-1
23609: PPUSH
23610: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
23614: LD_EXP 61
23618: PPUSH
23619: LD_STRING D2a-Kur-1
23621: PPUSH
23622: CALL_OW 94
// DialogueOff ;
23626: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
23630: LD_STRING M2
23632: PPUSH
23633: CALL_OW 337
// end ;
23637: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
23638: LD_EXP 10
23642: NOT
23643: IFFALSE 23851
23645: GO 23647
23647: DISABLE
23648: LD_INT 0
23650: PPUSH
// begin enable ;
23651: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
23652: LD_ADDR_VAR 0 1
23656: PUSH
23657: LD_INT 22
23659: PUSH
23660: LD_INT 3
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 21
23669: PUSH
23670: LD_INT 2
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 23
23679: PUSH
23680: LD_INT 3
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: LD_INT 2
23689: PUSH
23690: LD_INT 31
23692: PUSH
23693: LD_INT 21
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 31
23702: PUSH
23703: LD_INT 23
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: LIST
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: PPUSH
23721: CALL_OW 69
23725: PUSH
23726: FOR_IN
23727: IFFALSE 23849
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
23729: LD_VAR 0 1
23733: PPUSH
23734: LD_INT 48
23736: PPUSH
23737: LD_INT 81
23739: PPUSH
23740: CALL_OW 297
23744: PUSH
23745: LD_INT 7
23747: LESS
23748: IFFALSE 23847
// begin dialog_track = true ;
23750: LD_ADDR_EXP 10
23754: PUSH
23755: LD_INT 1
23757: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
23758: LD_INT 48
23760: PPUSH
23761: LD_INT 81
23763: PPUSH
23764: CALL_OW 86
// DialogueOn ;
23768: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
23772: LD_EXP 49
23776: PPUSH
23777: LD_STRING D5a-Bur-1
23779: PPUSH
23780: CALL_OW 88
// DialogueOff ;
23784: CALL_OW 7
// if GetTech ( 82 , 3 ) = state_disabled then
23788: LD_INT 82
23790: PPUSH
23791: LD_INT 3
23793: PPUSH
23794: CALL_OW 321
23798: PUSH
23799: LD_INT 0
23801: EQUAL
23802: IFFALSE 23817
// SetTech ( 82 , 3 , state_enabled ) ;
23804: LD_INT 82
23806: PPUSH
23807: LD_INT 3
23809: PPUSH
23810: LD_INT 1
23812: PPUSH
23813: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
23817: LD_INT 84
23819: PPUSH
23820: LD_INT 3
23822: PPUSH
23823: LD_INT 1
23825: PPUSH
23826: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
23830: LD_INT 16
23832: PPUSH
23833: LD_INT 3
23835: PPUSH
23836: LD_INT 1
23838: PPUSH
23839: CALL_OW 324
// exit ;
23843: POP
23844: POP
23845: GO 23851
// end ;
23847: GO 23726
23849: POP
23850: POP
// end ;
23851: PPOPN 1
23853: END
// every 5 5$30 do
23854: GO 23856
23856: DISABLE
// begin PrepareScholtze ;
23857: CALL 5455 0 0
// wait ( 0 0$2 ) ;
23861: LD_INT 70
23863: PPUSH
23864: CALL_OW 67
// DialogueOn ;
23868: CALL_OW 6
// SayRadio ( Scholtze , D4-Sch-1 ) ;
23872: LD_EXP 55
23876: PPUSH
23877: LD_STRING D4-Sch-1
23879: PPUSH
23880: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
23884: LD_EXP 49
23888: PPUSH
23889: LD_STRING D4-Bur-1
23891: PPUSH
23892: CALL_OW 88
// DialogueOff ;
23896: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23900: LD_STRING M4
23902: PPUSH
23903: CALL_OW 337
// ComHold ( Scholtze ) ;
23907: LD_EXP 55
23911: PPUSH
23912: CALL_OW 140
// scholtzeSpawned = true ;
23916: LD_ADDR_EXP 6
23920: PUSH
23921: LD_INT 1
23923: ST_TO_ADDR
// end ;
23924: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and scholtzeSpawned and not scholtzeSaved do
23925: LD_INT 3
23927: PPUSH
23928: LD_EXP 55
23932: PPUSH
23933: CALL_OW 292
23937: PUSH
23938: LD_EXP 6
23942: AND
23943: PUSH
23944: LD_EXP 7
23948: NOT
23949: AND
23950: IFFALSE 24131
23952: GO 23954
23954: DISABLE
// begin scholtzeSaved = true ;
23955: LD_ADDR_EXP 7
23959: PUSH
23960: LD_INT 1
23962: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
23963: LD_EXP 55
23967: PPUSH
23968: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
23972: LD_EXP 55
23976: PPUSH
23977: LD_INT 3
23979: PPUSH
23980: CALL_OW 235
// DialogueOn ;
23984: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
23988: LD_EXP 55
23992: PPUSH
23993: LD_STRING D4a-Sch-1
23995: PPUSH
23996: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
24000: LD_EXP 49
24004: PPUSH
24005: LD_STRING D4a-Bur-1
24007: PPUSH
24008: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
24012: LD_EXP 55
24016: PPUSH
24017: LD_STRING D4a-Sch-2
24019: PPUSH
24020: CALL_OW 88
// DialogueOff ;
24024: CALL_OW 7
// ComMoveXY ( amPatrol , 28 , 36 ) ;
24028: LD_EXP 85
24032: PPUSH
24033: LD_INT 28
24035: PPUSH
24036: LD_INT 36
24038: PPUSH
24039: CALL_OW 111
// ChangeMissionObjectives ( MScholtzeOut ) ;
24043: LD_STRING MScholtzeOut
24045: PPUSH
24046: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
24050: LD_INT 49
24052: PPUSH
24053: LD_INT 3
24055: PPUSH
24056: LD_INT 1
24058: PPUSH
24059: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
24063: LD_INT 51
24065: PPUSH
24066: LD_INT 3
24068: PPUSH
24069: LD_INT 1
24071: PPUSH
24072: CALL_OW 322
// if GetTech ( 82 , 3 ) = state_disabled then
24076: LD_INT 82
24078: PPUSH
24079: LD_INT 3
24081: PPUSH
24082: CALL_OW 321
24086: PUSH
24087: LD_INT 0
24089: EQUAL
24090: IFFALSE 24105
// SetTech ( 82 , 3 , state_enabled ) ;
24092: LD_INT 82
24094: PPUSH
24095: LD_INT 3
24097: PPUSH
24098: LD_INT 1
24100: PPUSH
24101: CALL_OW 322
// SetTech ( 83 , 3 , state_enabled ) ;
24105: LD_INT 83
24107: PPUSH
24108: LD_INT 3
24110: PPUSH
24111: LD_INT 1
24113: PPUSH
24114: CALL_OW 322
// SetRestrict ( b_ext_noncombat , 3 , state_enabled ) ;
24118: LD_INT 19
24120: PPUSH
24121: LD_INT 3
24123: PPUSH
24124: LD_INT 1
24126: PPUSH
24127: CALL_OW 324
// end ;
24131: END
// every 2 2$30 trigger IsPlaced ( Scholtze ) and not scholtzeSaved do
24132: LD_EXP 55
24136: PPUSH
24137: CALL_OW 305
24141: PUSH
24142: LD_EXP 7
24146: NOT
24147: AND
24148: IFFALSE 24157
24150: GO 24152
24152: DISABLE
// PrepareAmericanPatrol ;
24153: CALL 6359 0 0
24157: END
// every 0 0$1 trigger IsPlaced ( Scholtze ) and GetSide ( Scholtze ) = 8 and animalsSafeTime > 0 0$01 do var ape , tiger ;
24158: LD_EXP 55
24162: PPUSH
24163: CALL_OW 305
24167: PUSH
24168: LD_EXP 55
24172: PPUSH
24173: CALL_OW 255
24177: PUSH
24178: LD_INT 8
24180: EQUAL
24181: AND
24182: PUSH
24183: LD_EXP 47
24187: PUSH
24188: LD_INT 35
24190: GREATER
24191: AND
24192: IFFALSE 24368
24194: GO 24196
24196: DISABLE
24197: LD_INT 0
24199: PPUSH
24200: PPUSH
// begin enable ;
24201: ENABLE
// animalsSafeTime = animalsSafeTime - 0 0$01 ;
24202: LD_ADDR_EXP 47
24206: PUSH
24207: LD_EXP 47
24211: PUSH
24212: LD_INT 35
24214: MINUS
24215: ST_TO_ADDR
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
24216: LD_ADDR_VAR 0 1
24220: PUSH
24221: LD_INT 22
24223: PUSH
24224: LD_INT 0
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 25
24233: PUSH
24234: LD_INT 12
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PPUSH
24245: CALL_OW 69
24249: PUSH
24250: FOR_IN
24251: IFFALSE 24290
// GetAwayFromXY ( ape , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
24253: LD_VAR 0 1
24257: PPUSH
24258: LD_EXP 55
24262: PPUSH
24263: CALL_OW 250
24267: PPUSH
24268: LD_EXP 55
24272: PPUSH
24273: CALL_OW 251
24277: PPUSH
24278: LD_INT 12
24280: PPUSH
24281: LD_INT 0
24283: PPUSH
24284: CALL 10246 0 5
24288: GO 24250
24290: POP
24291: POP
// for tiger in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_tiger ] ] ) do
24292: LD_ADDR_VAR 0 2
24296: PUSH
24297: LD_INT 22
24299: PUSH
24300: LD_INT 0
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 25
24309: PUSH
24310: LD_INT 14
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PPUSH
24321: CALL_OW 69
24325: PUSH
24326: FOR_IN
24327: IFFALSE 24366
// GetAwayFromXY ( tiger , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
24329: LD_VAR 0 2
24333: PPUSH
24334: LD_EXP 55
24338: PPUSH
24339: CALL_OW 250
24343: PPUSH
24344: LD_EXP 55
24348: PPUSH
24349: CALL_OW 251
24353: PPUSH
24354: LD_INT 12
24356: PPUSH
24357: LD_INT 0
24359: PPUSH
24360: CALL 10246 0 5
24364: GO 24326
24366: POP
24367: POP
// end ;
24368: PPOPN 2
24370: END
// every 0 0$1 trigger See ( 1 , Scholtze ) and amPatrol and not scholtzeSaved do
24371: LD_INT 1
24373: PPUSH
24374: LD_EXP 55
24378: PPUSH
24379: CALL_OW 292
24383: PUSH
24384: LD_EXP 85
24388: AND
24389: PUSH
24390: LD_EXP 7
24394: NOT
24395: AND
24396: IFFALSE 24550
24398: GO 24400
24400: DISABLE
// begin enable ;
24401: ENABLE
// if not IsPlaced ( Scholtze ) then
24402: LD_EXP 55
24406: PPUSH
24407: CALL_OW 305
24411: NOT
24412: IFFALSE 24416
// exit ;
24414: GO 24550
// if Attacks ( amPatrol [ 1 ] ) = Scholtze or Attacks ( amPatrol [ 2 ] ) = Scholtze then
24416: LD_EXP 85
24420: PUSH
24421: LD_INT 1
24423: ARRAY
24424: PPUSH
24425: CALL_OW 320
24429: PUSH
24430: LD_EXP 55
24434: EQUAL
24435: PUSH
24436: LD_EXP 85
24440: PUSH
24441: LD_INT 2
24443: ARRAY
24444: PPUSH
24445: CALL_OW 320
24449: PUSH
24450: LD_EXP 55
24454: EQUAL
24455: OR
24456: IFFALSE 24550
// begin DialogueOn ;
24458: CALL_OW 6
// Say ( Scholtze , D4b-Sch-1 ) ;
24462: LD_EXP 55
24466: PPUSH
24467: LD_STRING D4b-Sch-1
24469: PPUSH
24470: CALL_OW 88
// Say ( amPatrol [ 2 ] , D4b-Sol1-1 ) ;
24474: LD_EXP 85
24478: PUSH
24479: LD_INT 2
24481: ARRAY
24482: PPUSH
24483: LD_STRING D4b-Sol1-1
24485: PPUSH
24486: CALL_OW 88
// Say ( amPatrol [ 1 ] , D4b-Sol2-1 ) ;
24490: LD_EXP 85
24494: PUSH
24495: LD_INT 1
24497: ARRAY
24498: PPUSH
24499: LD_STRING D4b-Sol2-1
24501: PPUSH
24502: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
24506: LD_EXP 55
24510: PPUSH
24511: LD_STRING D4b-Sch-2
24513: PPUSH
24514: CALL_OW 88
// Say ( Burlak , D4b-Bur-2 ) ;
24518: LD_EXP 49
24522: PPUSH
24523: LD_STRING D4b-Bur-2
24525: PPUSH
24526: CALL_OW 88
// DialogueOff ;
24530: CALL_OW 7
// Killunit ( Scholtze ) ;
24534: LD_EXP 55
24538: PPUSH
24539: CALL_OW 66
// ChangeMissionObjectives ( MScholtzeDel ) ;
24543: LD_STRING MScholtzeDel
24545: PPUSH
24546: CALL_OW 337
// end ; end ;
24550: END
// export function Dial_UpgradeWorkshop ( building ) ; var maleSci , maleOthers ; begin
24551: LD_INT 0
24553: PPUSH
24554: PPUSH
24555: PPUSH
// dialog_workshop = true ;
24556: LD_ADDR_EXP 8
24560: PUSH
24561: LD_INT 1
24563: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
24564: LD_INT 22
24566: PUSH
24567: LD_INT 3
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 30
24576: PUSH
24577: LD_INT 26
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PPUSH
24588: CALL_OW 69
24592: NOT
24593: IFFALSE 24982
// begin CenterNowOnUnits ( building ) ;
24595: LD_VAR 0 1
24599: PPUSH
24600: CALL_OW 87
// DialogueOn ;
24604: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
24608: LD_EXP 49
24612: PPUSH
24613: LD_STRING D3aa-Bur-1
24615: PPUSH
24616: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
24620: LD_EXP 55
24624: PPUSH
24625: CALL_OW 302
24629: PUSH
24630: LD_EXP 55
24634: PPUSH
24635: CALL_OW 255
24639: PUSH
24640: LD_INT 3
24642: EQUAL
24643: AND
24644: IFFALSE 24660
// Say ( Scholtze , D3aa-Sch-1 ) else
24646: LD_EXP 55
24650: PPUSH
24651: LD_STRING D3aa-Sch-1
24653: PPUSH
24654: CALL_OW 88
24658: GO 24966
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24660: LD_ADDR_VAR 0 3
24664: PUSH
24665: LD_INT 22
24667: PUSH
24668: LD_INT 3
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 21
24677: PUSH
24678: LD_INT 1
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 25
24687: PUSH
24688: LD_INT 4
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 26
24697: PUSH
24698: LD_INT 1
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 50
24707: PUSH
24708: EMPTY
24709: LIST
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: PPUSH
24718: CALL_OW 69
24722: PUSH
24723: LD_EXP 49
24727: PUSH
24728: LD_EXP 50
24732: PUSH
24733: LD_EXP 52
24737: PUSH
24738: LD_EXP 53
24742: PUSH
24743: LD_EXP 54
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: DIFF
24755: ST_TO_ADDR
// if maleSci then
24756: LD_VAR 0 3
24760: IFFALSE 24780
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
24762: LD_VAR 0 3
24766: PUSH
24767: LD_INT 1
24769: ARRAY
24770: PPUSH
24771: LD_STRING D3aa-Sci1-1
24773: PPUSH
24774: CALL_OW 88
24778: GO 24966
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24780: LD_ADDR_VAR 0 4
24784: PUSH
24785: LD_INT 22
24787: PUSH
24788: LD_INT 3
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 21
24797: PUSH
24798: LD_INT 1
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 26
24807: PUSH
24808: LD_INT 1
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 50
24817: PUSH
24818: EMPTY
24819: LIST
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: PPUSH
24827: CALL_OW 69
24831: PUSH
24832: LD_EXP 49
24836: PUSH
24837: LD_EXP 50
24841: PUSH
24842: LD_EXP 52
24846: PUSH
24847: LD_EXP 53
24851: PUSH
24852: LD_EXP 54
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: DIFF
24864: ST_TO_ADDR
// if maleOthers then
24865: LD_VAR 0 4
24869: IFFALSE 24889
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) else
24871: LD_VAR 0 4
24875: PUSH
24876: LD_INT 1
24878: ARRAY
24879: PPUSH
24880: LD_STRING D3aa-Sci1-1
24882: PPUSH
24883: CALL_OW 88
24887: GO 24966
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
24889: LD_ADDR_VAR 0 4
24893: PUSH
24894: LD_INT 22
24896: PUSH
24897: LD_INT 3
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 21
24906: PUSH
24907: LD_INT 1
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 26
24916: PUSH
24917: LD_INT 1
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 50
24926: PUSH
24927: EMPTY
24928: LIST
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: PPUSH
24936: CALL_OW 69
24940: PUSH
24941: LD_EXP 49
24945: PUSH
24946: EMPTY
24947: LIST
24948: DIFF
24949: ST_TO_ADDR
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) ;
24950: LD_VAR 0 4
24954: PUSH
24955: LD_INT 1
24957: ARRAY
24958: PPUSH
24959: LD_STRING D3aa-Sci1-1
24961: PPUSH
24962: CALL_OW 88
// end ; end ; end ; Say ( Burlak , D3aa-Bur-2 ) ;
24966: LD_EXP 49
24970: PPUSH
24971: LD_STRING D3aa-Bur-2
24973: PPUSH
24974: CALL_OW 88
// DialogueOff ;
24978: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
24982: LD_STRING M3
24984: PPUSH
24985: CALL_OW 337
// end ;
24989: LD_VAR 0 2
24993: RET
// every 0 0$1 trigger not dialog_amSupportTroops do var amUnit , randomMale ;
24994: LD_EXP 9
24998: NOT
24999: IFFALSE 25337
25001: GO 25003
25003: DISABLE
25004: LD_INT 0
25006: PPUSH
25007: PPUSH
// begin enable ;
25008: ENABLE
// for amUnit in amSupportTroops do
25009: LD_ADDR_VAR 0 1
25013: PUSH
25014: LD_EXP 84
25018: PUSH
25019: FOR_IN
25020: IFFALSE 25335
// begin if See ( 3 , amUnit ) then
25022: LD_INT 3
25024: PPUSH
25025: LD_VAR 0 1
25029: PPUSH
25030: CALL_OW 292
25034: IFFALSE 25333
// begin dialog_amSupportTroops = true ;
25036: LD_ADDR_EXP 9
25040: PUSH
25041: LD_INT 1
25043: ST_TO_ADDR
// CenterNowOnUnits ( amUnit ) ;
25044: LD_VAR 0 1
25048: PPUSH
25049: CALL_OW 87
// DialogueOn ;
25053: CALL_OW 6
// randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
25057: LD_ADDR_VAR 0 2
25061: PUSH
25062: LD_INT 22
25064: PUSH
25065: LD_INT 3
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 21
25074: PUSH
25075: LD_INT 1
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 26
25084: PUSH
25085: LD_INT 1
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 50
25094: PUSH
25095: EMPTY
25096: LIST
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: PPUSH
25104: CALL_OW 69
25108: PUSH
25109: LD_EXP 49
25113: PUSH
25114: LD_EXP 50
25118: PUSH
25119: LD_EXP 52
25123: PUSH
25124: LD_EXP 53
25128: PUSH
25129: LD_EXP 54
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: DIFF
25141: ST_TO_ADDR
// if randomMale then
25142: LD_VAR 0 2
25146: IFFALSE 25213
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) , D3b-RSol1-1 ,  , false , true ) else
25148: LD_INT 22
25150: PUSH
25151: LD_INT 3
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 21
25160: PUSH
25161: LD_INT 1
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 26
25170: PUSH
25171: LD_INT 1
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 50
25180: PUSH
25181: EMPTY
25182: LIST
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: PPUSH
25190: CALL_OW 69
25194: PPUSH
25195: LD_STRING D3b-RSol1-1
25197: PPUSH
25198: LD_STRING 
25200: PPUSH
25201: LD_INT 0
25203: PPUSH
25204: LD_INT 1
25206: PPUSH
25207: CALL 6995 0 5
25211: GO 25290
// begin randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
25213: LD_ADDR_VAR 0 2
25217: PUSH
25218: LD_INT 22
25220: PUSH
25221: LD_INT 3
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 21
25230: PUSH
25231: LD_INT 1
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 26
25240: PUSH
25241: LD_INT 1
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 50
25250: PUSH
25251: EMPTY
25252: LIST
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: PPUSH
25260: CALL_OW 69
25264: PUSH
25265: LD_EXP 49
25269: PUSH
25270: EMPTY
25271: LIST
25272: DIFF
25273: ST_TO_ADDR
// Say ( randomMale [ 1 ] , D3b-RSol1-1 ) ;
25274: LD_VAR 0 2
25278: PUSH
25279: LD_INT 1
25281: ARRAY
25282: PPUSH
25283: LD_STRING D3b-RSol1-1
25285: PPUSH
25286: CALL_OW 88
// end ; if IsOK ( Gnyevko ) then
25290: LD_EXP 50
25294: PPUSH
25295: CALL_OW 302
25299: IFFALSE 25313
// Say ( Gnyevko , D3b-Gny-1 ) ;
25301: LD_EXP 50
25305: PPUSH
25306: LD_STRING D3b-Gny-1
25308: PPUSH
25309: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
25313: LD_EXP 49
25317: PPUSH
25318: LD_STRING D3b-Bur-1
25320: PPUSH
25321: CALL_OW 88
// DialogueOff ;
25325: CALL_OW 7
// exit ;
25329: POP
25330: POP
25331: GO 25337
// end ; end ;
25333: GO 25019
25335: POP
25336: POP
// end ;
25337: PPOPN 2
25339: END
// every 2 2$0 trigger dialog_amSupportTroops do
25340: LD_EXP 9
25344: IFFALSE 25428
25346: GO 25348
25348: DISABLE
// begin if IsOK ( Kovalyuk ) then
25349: LD_EXP 52
25353: PPUSH
25354: CALL_OW 302
25358: IFFALSE 25372
// Say ( Kovalyuk , D3b-Kov-1 ) ;
25360: LD_EXP 52
25364: PPUSH
25365: LD_STRING D3b-Kov-1
25367: PPUSH
25368: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D3b-RSol1-2 ,  , false , false ) ;
25372: LD_INT 22
25374: PUSH
25375: LD_INT 3
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 21
25384: PUSH
25385: LD_INT 1
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 26
25394: PUSH
25395: LD_INT 1
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: LIST
25406: PPUSH
25407: CALL_OW 69
25411: PPUSH
25412: LD_STRING D3b-RSol1-2
25414: PPUSH
25415: LD_STRING 
25417: PPUSH
25418: LD_INT 0
25420: PPUSH
25421: LD_INT 0
25423: PPUSH
25424: CALL 6995 0 5
// end ;
25428: END
// every 1 trigger not endCutscene do
25429: LD_EXP 31
25433: NOT
25434: IFFALSE 25452
25436: GO 25438
25438: DISABLE
// begin enable ;
25439: ENABLE
// SetLives ( Kurin , 1000 ) ;
25440: LD_EXP 61
25444: PPUSH
25445: LD_INT 1000
25447: PPUSH
25448: CALL_OW 234
// end ;
25452: END
// every 0 0$1 trigger timeToPrepareAttack < 0 0$01 do
25453: LD_EXP 40
25457: PUSH
25458: LD_INT 35
25460: LESS
25461: IFFALSE 25689
25463: GO 25465
25465: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
25466: LD_EXP 61
25470: PPUSH
25471: CALL_OW 87
// InGameOn ;
25475: CALL_OW 8
// DialogueOn ;
25479: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
25483: LD_EXP 61
25487: PPUSH
25488: LD_STRING D5-Kur-1
25490: PPUSH
25491: CALL_OW 94
// case Query ( QVehicles ) of 1 :
25495: LD_STRING QVehicles
25497: PPUSH
25498: CALL_OW 97
25502: PUSH
25503: LD_INT 1
25505: DOUBLE
25506: EQUAL
25507: IFTRUE 25511
25509: GO 25554
25511: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
25512: LD_EXP 49
25516: PPUSH
25517: LD_STRING D6a-Bur-1
25519: PPUSH
25520: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
25524: LD_EXP 61
25528: PPUSH
25529: LD_STRING D6a-Kur-1
25531: PPUSH
25532: CALL_OW 94
// meetNearOmicronBase = true ;
25536: LD_ADDR_EXP 19
25540: PUSH
25541: LD_INT 1
25543: ST_TO_ADDR
// kurinCheckVehicles = true ;
25544: LD_ADDR_EXP 18
25548: PUSH
25549: LD_INT 1
25551: ST_TO_ADDR
// end ; 2 :
25552: GO 25681
25554: LD_INT 2
25556: DOUBLE
25557: EQUAL
25558: IFTRUE 25562
25560: GO 25609
25562: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
25563: LD_EXP 49
25567: PPUSH
25568: LD_STRING D6b-Bur-1
25570: PPUSH
25571: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
25575: LD_EXP 61
25579: PPUSH
25580: LD_STRING D6b-Kur-1
25582: PPUSH
25583: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
25587: LD_EXP 49
25591: PPUSH
25592: LD_STRING D6b-Bur-2
25594: PPUSH
25595: CALL_OW 88
// meetNearOmicronBase = true ;
25599: LD_ADDR_EXP 19
25603: PUSH
25604: LD_INT 1
25606: ST_TO_ADDR
// end ; 3 :
25607: GO 25681
25609: LD_INT 3
25611: DOUBLE
25612: EQUAL
25613: IFTRUE 25617
25615: GO 25680
25617: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
25618: LD_EXP 49
25622: PPUSH
25623: LD_STRING D6c-Bur-1
25625: PPUSH
25626: CALL_OW 88
// Say ( Kurin , D6c-Kur-1 ) ;
25630: LD_EXP 61
25634: PPUSH
25635: LD_STRING D6c-Kur-1
25637: PPUSH
25638: CALL_OW 88
// Say ( Burlak , D6c-Bur-2 ) ;
25642: LD_EXP 49
25646: PPUSH
25647: LD_STRING D6c-Bur-2
25649: PPUSH
25650: CALL_OW 88
// kurinGiveMoreTime = true ;
25654: LD_ADDR_EXP 13
25658: PUSH
25659: LD_INT 1
25661: ST_TO_ADDR
// kurinOpinion = 0 ;
25662: LD_ADDR_EXP 26
25666: PUSH
25667: LD_INT 0
25669: ST_TO_ADDR
// counterIndex = 4 ;
25670: LD_ADDR_EXP 90
25674: PUSH
25675: LD_INT 4
25677: ST_TO_ADDR
// end ; end ;
25678: GO 25681
25680: POP
// InGameOff ;
25681: CALL_OW 9
// DialogueOff ;
25685: CALL_OW 7
// end ;
25689: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
25690: LD_EXP 14
25694: PUSH
25695: LD_INT 35
25697: LESS
25698: PUSH
25699: LD_EXP 13
25703: AND
25704: IFFALSE 25737
25706: GO 25708
25708: DISABLE
// begin DialogueOn ;
25709: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
25713: LD_EXP 61
25717: PPUSH
25718: LD_STRING D6c-Kur-2
25720: PPUSH
25721: CALL_OW 94
// DialogueOff ;
25725: CALL_OW 7
// meetNearOmicronBase = true ;
25729: LD_ADDR_EXP 19
25733: PUSH
25734: LD_INT 1
25736: ST_TO_ADDR
// end ;
25737: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs ;
25738: LD_EXP 19
25742: IFFALSE 26397
25744: GO 25746
25746: DISABLE
25747: LD_INT 0
25749: PPUSH
25750: PPUSH
25751: PPUSH
25752: PPUSH
25753: PPUSH
// begin mechs = [ ] ;
25754: LD_ADDR_VAR 0 3
25758: PUSH
25759: EMPTY
25760: ST_TO_ADDR
// vehs = [ ] ;
25761: LD_ADDR_VAR 0 4
25765: PUSH
25766: EMPTY
25767: ST_TO_ADDR
// haveVehs = 0 ;
25768: LD_ADDR_VAR 0 5
25772: PUSH
25773: LD_INT 0
25775: ST_TO_ADDR
// uc_side = 6 ;
25776: LD_ADDR_OWVAR 20
25780: PUSH
25781: LD_INT 6
25783: ST_TO_ADDR
// uc_nation = 3 ;
25784: LD_ADDR_OWVAR 21
25788: PUSH
25789: LD_INT 3
25791: ST_TO_ADDR
// for i := 1 to 2 do
25792: LD_ADDR_VAR 0 1
25796: PUSH
25797: DOUBLE
25798: LD_INT 1
25800: DEC
25801: ST_TO_ADDR
25802: LD_INT 2
25804: PUSH
25805: FOR_TO
25806: IFFALSE 25905
// begin PrepareMechanic ( false , 2 ) ;
25808: LD_INT 0
25810: PPUSH
25811: LD_INT 2
25813: PPUSH
25814: CALL_OW 383
// mech = CreateHuman ;
25818: LD_ADDR_VAR 0 2
25822: PUSH
25823: CALL_OW 44
25827: ST_TO_ADDR
// mechs = mechs ^ mech ;
25828: LD_ADDR_VAR 0 3
25832: PUSH
25833: LD_VAR 0 3
25837: PUSH
25838: LD_VAR 0 2
25842: ADD
25843: ST_TO_ADDR
// PlaceHumanInUnit ( mech , kirovDepot ) ;
25844: LD_VAR 0 2
25848: PPUSH
25849: LD_EXP 67
25853: PPUSH
25854: CALL_OW 52
// ComExitBuilding ( mech ) ;
25858: LD_VAR 0 2
25862: PPUSH
25863: CALL_OW 122
// wait ( 0 0$1 ) ;
25867: LD_INT 35
25869: PPUSH
25870: CALL_OW 67
// AddComMoveXY ( mech , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
25874: LD_VAR 0 2
25878: PPUSH
25879: LD_EXP 60
25883: PPUSH
25884: CALL_OW 250
25888: PPUSH
25889: LD_EXP 60
25893: PPUSH
25894: CALL_OW 251
25898: PPUSH
25899: CALL_OW 171
// end ;
25903: GO 25805
25905: POP
25906: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] ] ) = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) then
25907: LD_INT 22
25909: PUSH
25910: LD_INT 3
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 21
25919: PUSH
25920: LD_INT 2
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: LD_INT 23
25929: PUSH
25930: LD_INT 3
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: LIST
25941: PPUSH
25942: CALL_OW 69
25946: PUSH
25947: LD_INT 22
25949: PUSH
25950: LD_INT 3
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 21
25959: PUSH
25960: LD_INT 1
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PPUSH
25971: CALL_OW 69
25975: EQUAL
25976: IFFALSE 25986
// produceOnlyForYou = true ;
25978: LD_ADDR_EXP 17
25982: PUSH
25983: LD_INT 1
25985: ST_TO_ADDR
// wait ( 0 0$20 ) ;
25986: LD_INT 700
25988: PPUSH
25989: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + 2 then
25993: LD_INT 22
25995: PUSH
25996: LD_INT 3
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 21
26005: PUSH
26006: LD_INT 2
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 23
26015: PUSH
26016: LD_INT 3
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 3
26025: PUSH
26026: LD_INT 34
26028: PUSH
26029: LD_INT 51
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: PPUSH
26046: CALL_OW 69
26050: PUSH
26051: LD_INT 22
26053: PUSH
26054: LD_INT 3
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 21
26063: PUSH
26064: LD_INT 1
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PPUSH
26075: CALL_OW 69
26079: PUSH
26080: LD_INT 2
26082: PLUS
26083: GREATEREQUAL
26084: IFFALSE 26367
// begin vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 1 ] ;
26086: LD_ADDR_VAR 0 4
26090: PUSH
26091: LD_VAR 0 4
26095: PUSH
26096: LD_INT 22
26098: PUSH
26099: LD_INT 3
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 21
26108: PUSH
26109: LD_INT 2
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 23
26118: PUSH
26119: LD_INT 3
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 3
26128: PUSH
26129: LD_INT 34
26131: PUSH
26132: LD_INT 51
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 3
26145: PUSH
26146: LD_INT 59
26148: PUSH
26149: EMPTY
26150: LIST
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: PPUSH
26163: CALL_OW 69
26167: PUSH
26168: LD_INT 1
26170: ARRAY
26171: ADD
26172: ST_TO_ADDR
// vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 2 ] ;
26173: LD_ADDR_VAR 0 4
26177: PUSH
26178: LD_VAR 0 4
26182: PUSH
26183: LD_INT 22
26185: PUSH
26186: LD_INT 3
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 21
26195: PUSH
26196: LD_INT 2
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 23
26205: PUSH
26206: LD_INT 3
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 3
26215: PUSH
26216: LD_INT 34
26218: PUSH
26219: LD_INT 51
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 3
26232: PUSH
26233: LD_INT 59
26235: PUSH
26236: EMPTY
26237: LIST
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: PPUSH
26250: CALL_OW 69
26254: PUSH
26255: LD_INT 2
26257: ARRAY
26258: ADD
26259: ST_TO_ADDR
// kirovAttackVehicles = kirovAttackVehicles ^ vehs ;
26260: LD_ADDR_EXP 76
26264: PUSH
26265: LD_EXP 76
26269: PUSH
26270: LD_VAR 0 4
26274: ADD
26275: ST_TO_ADDR
// SetSide ( vehs , 6 ) ;
26276: LD_VAR 0 4
26280: PPUSH
26281: LD_INT 6
26283: PPUSH
26284: CALL_OW 235
// produceMoreVehicles = true ;
26288: LD_ADDR_EXP 16
26292: PUSH
26293: LD_INT 1
26295: ST_TO_ADDR
// ComEnterUnit ( mechs [ 1 ] , vehs [ 1 ] ) ;
26296: LD_VAR 0 3
26300: PUSH
26301: LD_INT 1
26303: ARRAY
26304: PPUSH
26305: LD_VAR 0 4
26309: PUSH
26310: LD_INT 1
26312: ARRAY
26313: PPUSH
26314: CALL_OW 120
// ComEnterUnit ( mechs [ 2 ] , vehs [ 2 ] ) ;
26318: LD_VAR 0 3
26322: PUSH
26323: LD_INT 2
26325: ARRAY
26326: PPUSH
26327: LD_VAR 0 4
26331: PUSH
26332: LD_INT 2
26334: ARRAY
26335: PPUSH
26336: CALL_OW 120
// if kurinCheckVehicles and not kurinOpinion = 0 then
26340: LD_EXP 18
26344: PUSH
26345: LD_EXP 26
26349: PUSH
26350: LD_INT 0
26352: EQUAL
26353: NOT
26354: AND
26355: IFFALSE 26365
// kurinOpinion = 1 ;
26357: LD_ADDR_EXP 26
26361: PUSH
26362: LD_INT 1
26364: ST_TO_ADDR
// end else
26365: GO 26397
// begin if kurinCheckVehicles then
26367: LD_EXP 18
26371: IFFALSE 26397
// begin DialogueOn ;
26373: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
26377: LD_EXP 61
26381: PPUSH
26382: LD_STRING D6d-Kur-1
26384: PPUSH
26385: CALL_OW 94
// DialogueOff ;
26389: CALL_OW 7
// Lose_Vehicles ;
26393: CALL 20160 0 0
// end ; end ; end ;
26397: PPOPN 5
26399: END
// every 0 0$1 trigger meetNearOmicronBase do
26400: LD_EXP 19
26404: IFFALSE 26624
26406: GO 26408
26408: DISABLE
// begin spawnCrates = false ;
26409: LD_ADDR_EXP 5
26413: PUSH
26414: LD_INT 0
26416: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
26417: LD_INT 6
26419: PPUSH
26420: LD_INT 1
26422: PPUSH
26423: LD_INT 2
26425: PPUSH
26426: LD_INT 1
26428: PPUSH
26429: CALL_OW 80
// SetRestrict ( b_depot , 3 , false ) ;
26433: LD_INT 0
26435: PPUSH
26436: LD_INT 3
26438: PPUSH
26439: LD_INT 0
26441: PPUSH
26442: CALL_OW 324
// ChangeMissionObjectives ( M3a ) ;
26446: LD_STRING M3a
26448: PPUSH
26449: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
26453: LD_STRING M5
26455: PPUSH
26456: CALL_OW 337
// SetAreaMapShow ( MeetArea , 1 ) ;
26460: LD_INT 15
26462: PPUSH
26463: LD_INT 1
26465: PPUSH
26466: CALL_OW 424
// ComMoveXY ( kirovAttackVehicles , 75 , 38 ) ;
26470: LD_EXP 76
26474: PPUSH
26475: LD_INT 75
26477: PPUSH
26478: LD_INT 38
26480: PPUSH
26481: CALL_OW 111
// ComMoveXY ( kirovAttackCargo , 75 , 38 ) ;
26485: LD_EXP 75
26489: PPUSH
26490: LD_INT 75
26492: PPUSH
26493: LD_INT 38
26495: PPUSH
26496: CALL_OW 111
// counterIndex = 2 ;
26500: LD_ADDR_EXP 90
26504: PUSH
26505: LD_INT 2
26507: ST_TO_ADDR
// if not kurinOpinion = 0 then
26508: LD_EXP 26
26512: PUSH
26513: LD_INT 0
26515: EQUAL
26516: NOT
26517: IFFALSE 26527
// kurinOpinion = 1 ;
26519: LD_ADDR_EXP 26
26523: PUSH
26524: LD_INT 1
26526: ST_TO_ADDR
// InitAIManager ( 1 , 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , OmicronBaseArea , OmicronHealArea , OmicronParkingArea , OmicronDefenceArea , [ 2 , 3 , 4 ] [ Difficulty ] , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , false ) ;
26527: LD_INT 1
26529: PPUSH
26530: LD_INT 1
26532: PPUSH
26533: LD_INT 22
26535: PUSH
26536: LD_INT 1
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 21
26545: PUSH
26546: LD_INT 1
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PPUSH
26557: CALL_OW 69
26561: PPUSH
26562: LD_INT 13
26564: PPUSH
26565: LD_INT 28
26567: PPUSH
26568: LD_INT 17
26570: PPUSH
26571: LD_INT 29
26573: PPUSH
26574: LD_INT 2
26576: PUSH
26577: LD_INT 3
26579: PUSH
26580: LD_INT 4
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: LIST
26587: PUSH
26588: LD_OWVAR 67
26592: ARRAY
26593: PPUSH
26594: LD_INT 2
26596: PUSH
26597: LD_INT 3
26599: PUSH
26600: LD_INT 4
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: LIST
26607: PUSH
26608: LD_OWVAR 67
26612: ARRAY
26613: PPUSH
26614: LD_INT 0
26616: PPUSH
26617: LD_INT 0
26619: PPUSH
26620: CALL 12126 0 11
// end ;
26624: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 2 do
26625: LD_EXP 15
26629: PUSH
26630: LD_INT 35
26632: LESS
26633: PUSH
26634: LD_EXP 90
26638: PUSH
26639: LD_INT 2
26641: EQUAL
26642: AND
26643: IFFALSE 26692
26645: GO 26647
26647: DISABLE
// begin DialogueOn ;
26648: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
26652: LD_EXP 61
26656: PPUSH
26657: LD_STRING D7a-Kur-1
26659: PPUSH
26660: CALL_OW 94
// DialogueOff ;
26664: CALL_OW 7
// counterIndex = 3 ;
26668: LD_ADDR_EXP 90
26672: PUSH
26673: LD_INT 3
26675: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
26676: LD_ADDR_EXP 15
26680: PUSH
26681: LD_INT 4200
26683: ST_TO_ADDR
// kurinOpinion = 0 ;
26684: LD_ADDR_EXP 26
26688: PUSH
26689: LD_INT 0
26691: ST_TO_ADDR
// end ;
26692: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 3 do
26693: LD_EXP 15
26697: PUSH
26698: LD_INT 35
26700: LESS
26701: PUSH
26702: LD_EXP 90
26706: PUSH
26707: LD_INT 3
26709: EQUAL
26710: AND
26711: IFFALSE 26720
26713: GO 26715
26715: DISABLE
// Lose_Delay ;
26716: CALL 20190 0 0
26720: END
// every 0 0$1 trigger meetNearOmicronBase and FilterUnitsExceptArea ( MeetArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
26721: LD_EXP 19
26725: PUSH
26726: LD_INT 15
26728: PPUSH
26729: LD_INT 22
26731: PUSH
26732: LD_INT 3
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 21
26741: PUSH
26742: LD_INT 1
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PPUSH
26753: CALL_OW 71
26757: PUSH
26758: LD_INT 0
26760: EQUAL
26761: AND
26762: IFFALSE 26850
26764: GO 26766
26766: DISABLE
// begin counterEnable = false ;
26767: LD_ADDR_EXP 89
26771: PUSH
26772: LD_INT 0
26774: ST_TO_ADDR
// Display_strings = [ ] ;
26775: LD_ADDR_OWVAR 47
26779: PUSH
26780: EMPTY
26781: ST_TO_ADDR
// SetAreaMapShow ( MeetArea , 0 ) ;
26782: LD_INT 15
26784: PPUSH
26785: LD_INT 0
26787: PPUSH
26788: CALL_OW 424
// canExitBattlefield = false ;
26792: LD_ADDR_EXP 24
26796: PUSH
26797: LD_INT 0
26799: ST_TO_ADDR
// DialogueOn ;
26800: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
26804: LD_EXP 49
26808: PPUSH
26809: LD_STRING D7-Bur-1
26811: PPUSH
26812: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
26816: LD_EXP 61
26820: PPUSH
26821: LD_STRING D7-Kur-1
26823: PPUSH
26824: CALL_OW 94
// DialogueOff ;
26828: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
26832: LD_STRING M5a
26834: PPUSH
26835: CALL_OW 337
// Query ( QRefuel ) ;
26839: LD_STRING QRefuel
26841: PPUSH
26842: CALL_OW 97
// KirovAttackOmicron ;
26846: CALL 17916 0 0
// end ;
26850: END
// every 1 trigger not canExitBattlefield do var unit ;
26851: LD_EXP 24
26855: NOT
26856: IFFALSE 27025
26858: GO 26860
26860: DISABLE
26861: LD_INT 0
26863: PPUSH
// begin enable ;
26864: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
26865: LD_ADDR_VAR 0 1
26869: PUSH
26870: LD_INT 22
26872: PUSH
26873: LD_INT 3
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 2
26882: PUSH
26883: LD_INT 21
26885: PUSH
26886: LD_INT 1
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 21
26895: PUSH
26896: LD_INT 2
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: LIST
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PPUSH
26912: CALL_OW 69
26916: PUSH
26917: FOR_IN
26918: IFFALSE 27023
// if not IsInArea ( unit , OmicronBattlefieldArea ) and ( UnitFilter ( unit , [ f_type , unit_human ] ) or UnitsInside ( unit ) ) then
26920: LD_VAR 0 1
26924: PPUSH
26925: LD_INT 26
26927: PPUSH
26928: CALL_OW 308
26932: NOT
26933: PUSH
26934: LD_VAR 0 1
26938: PPUSH
26939: LD_INT 21
26941: PUSH
26942: LD_INT 1
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PPUSH
26949: CALL_OW 72
26953: PUSH
26954: LD_VAR 0 1
26958: PPUSH
26959: CALL_OW 313
26963: OR
26964: AND
26965: IFFALSE 27021
// begin ComMoveToArea ( unit , OmicronBattlefieldArea ) ;
26967: LD_VAR 0 1
26971: PPUSH
26972: LD_INT 26
26974: PPUSH
26975: CALL_OW 113
// if not dialog_stop then
26979: LD_EXP 11
26983: NOT
26984: IFFALSE 27021
// begin dialog_stop = true ;
26986: LD_ADDR_EXP 11
26990: PUSH
26991: LD_INT 1
26993: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
26994: LD_EXP 61
26998: PPUSH
26999: LD_STRING D12-Kur-1
27001: PPUSH
27002: CALL_OW 88
// wait ( 0 0$5 ) ;
27006: LD_INT 175
27008: PPUSH
27009: CALL_OW 67
// dialog_stop = false ;
27013: LD_ADDR_EXP 11
27017: PUSH
27018: LD_INT 0
27020: ST_TO_ADDR
// end ; end ;
27021: GO 26917
27023: POP
27024: POP
// end ;
27025: PPOPN 1
27027: END
// every 1 do var unit ;
27028: GO 27030
27030: DISABLE
27031: LD_INT 0
27033: PPUSH
// begin enable ;
27034: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
27035: LD_ADDR_VAR 0 1
27039: PUSH
27040: LD_INT 22
27042: PUSH
27043: LD_INT 3
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 2
27052: PUSH
27053: LD_INT 21
27055: PUSH
27056: LD_INT 1
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 21
27065: PUSH
27066: LD_INT 2
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: LIST
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PPUSH
27082: CALL_OW 69
27086: PUSH
27087: FOR_IN
27088: IFFALSE 27163
// if IsInArea ( unit , SecondKurinBase ) then
27090: LD_VAR 0 1
27094: PPUSH
27095: LD_INT 20
27097: PPUSH
27098: CALL_OW 308
27102: IFFALSE 27161
// begin ComMoveXY ( unit , 200 , 114 ) ;
27104: LD_VAR 0 1
27108: PPUSH
27109: LD_INT 200
27111: PPUSH
27112: LD_INT 114
27114: PPUSH
27115: CALL_OW 111
// if not dialog_stop then
27119: LD_EXP 11
27123: NOT
27124: IFFALSE 27161
// begin dialog_stop = true ;
27126: LD_ADDR_EXP 11
27130: PUSH
27131: LD_INT 1
27133: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
27134: LD_EXP 61
27138: PPUSH
27139: LD_STRING D12-Kur-1
27141: PPUSH
27142: CALL_OW 88
// wait ( 0 0$5 ) ;
27146: LD_INT 175
27148: PPUSH
27149: CALL_OW 67
// dialog_stop = false ;
27153: LD_ADDR_EXP 11
27157: PUSH
27158: LD_INT 0
27160: ST_TO_ADDR
// end ; end ;
27161: GO 27087
27163: POP
27164: POP
// end ;
27165: PPOPN 1
27167: END
// every 1 trigger not meetNearOmicronBase and IsOK ( Sikorski ) do var i , unit , randDialog , currentDist , tmpDist , nearUnit , index ;
27168: LD_EXP 19
27172: NOT
27173: PUSH
27174: LD_INT 290
27176: PPUSH
27177: CALL_OW 302
27181: AND
27182: IFFALSE 27692
27184: GO 27186
27186: DISABLE
27187: LD_INT 0
27189: PPUSH
27190: PPUSH
27191: PPUSH
27192: PPUSH
27193: PPUSH
27194: PPUSH
27195: PPUSH
// begin enable ;
27196: ENABLE
// for unit in FilterUnitsInArea ( OmicronBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
27197: LD_ADDR_VAR 0 2
27201: PUSH
27202: LD_INT 13
27204: PPUSH
27205: LD_INT 22
27207: PUSH
27208: LD_INT 1
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 2
27217: PUSH
27218: LD_INT 21
27220: PUSH
27221: LD_INT 1
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 21
27230: PUSH
27231: LD_INT 2
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 21
27240: PUSH
27241: LD_INT 3
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PPUSH
27258: CALL_OW 70
27262: PUSH
27263: FOR_IN
27264: IFFALSE 27690
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
27266: LD_VAR 0 2
27270: PPUSH
27271: LD_INT 22
27273: PUSH
27274: LD_INT 3
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 2
27283: PUSH
27284: LD_INT 21
27286: PUSH
27287: LD_INT 1
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 21
27296: PUSH
27297: LD_INT 2
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: LIST
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PPUSH
27313: CALL_OW 69
27317: PPUSH
27318: LD_VAR 0 2
27322: PPUSH
27323: CALL_OW 74
27327: PPUSH
27328: CALL_OW 296
27332: PUSH
27333: LD_INT 17
27335: LESS
27336: IFFALSE 27688
// begin nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ;
27338: LD_ADDR_VAR 0 6
27342: PUSH
27343: LD_INT 22
27345: PUSH
27346: LD_INT 3
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 50
27355: PUSH
27356: EMPTY
27357: LIST
27358: PUSH
27359: LD_INT 2
27361: PUSH
27362: LD_INT 21
27364: PUSH
27365: LD_INT 1
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 21
27374: PUSH
27375: LD_INT 2
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: LIST
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: LIST
27391: PPUSH
27392: CALL_OW 69
27396: PPUSH
27397: LD_VAR 0 2
27401: PPUSH
27402: CALL_OW 74
27406: ST_TO_ADDR
// currentDist = GetDistUnitXY ( nearUnit , omicronBlockerPoints [ 1 ] [ 1 ] , omicronBlockerPoints [ 1 ] [ 2 ] ) ;
27407: LD_ADDR_VAR 0 4
27411: PUSH
27412: LD_VAR 0 6
27416: PPUSH
27417: LD_EXP 48
27421: PUSH
27422: LD_INT 1
27424: ARRAY
27425: PUSH
27426: LD_INT 1
27428: ARRAY
27429: PPUSH
27430: LD_EXP 48
27434: PUSH
27435: LD_INT 1
27437: ARRAY
27438: PUSH
27439: LD_INT 2
27441: ARRAY
27442: PPUSH
27443: CALL_OW 297
27447: ST_TO_ADDR
// index = 1 ;
27448: LD_ADDR_VAR 0 7
27452: PUSH
27453: LD_INT 1
27455: ST_TO_ADDR
// for i = 2 to omicronBlockerPoints do
27456: LD_ADDR_VAR 0 1
27460: PUSH
27461: DOUBLE
27462: LD_INT 2
27464: DEC
27465: ST_TO_ADDR
27466: LD_EXP 48
27470: PUSH
27471: FOR_TO
27472: IFFALSE 27553
// begin tmpDist = GetDistUnitXY ( nearUnit , omicronBlockerPoints [ i ] [ 1 ] , omicronBlockerPoints [ i ] [ 2 ] ) ;
27474: LD_ADDR_VAR 0 5
27478: PUSH
27479: LD_VAR 0 6
27483: PPUSH
27484: LD_EXP 48
27488: PUSH
27489: LD_VAR 0 1
27493: ARRAY
27494: PUSH
27495: LD_INT 1
27497: ARRAY
27498: PPUSH
27499: LD_EXP 48
27503: PUSH
27504: LD_VAR 0 1
27508: ARRAY
27509: PUSH
27510: LD_INT 2
27512: ARRAY
27513: PPUSH
27514: CALL_OW 297
27518: ST_TO_ADDR
// if tmpDist < currentDist then
27519: LD_VAR 0 5
27523: PUSH
27524: LD_VAR 0 4
27528: LESS
27529: IFFALSE 27551
// begin index = i ;
27531: LD_ADDR_VAR 0 7
27535: PUSH
27536: LD_VAR 0 1
27540: ST_TO_ADDR
// currentDist = tmpDist ;
27541: LD_ADDR_VAR 0 4
27545: PUSH
27546: LD_VAR 0 5
27550: ST_TO_ADDR
// end ; end ;
27551: GO 27471
27553: POP
27554: POP
// ComMoveXY ( nearUnit , omicronBlockerPoints [ index ] [ 1 ] , omicronBlockerPoints [ index ] [ 2 ] ) ;
27555: LD_VAR 0 6
27559: PPUSH
27560: LD_EXP 48
27564: PUSH
27565: LD_VAR 0 7
27569: ARRAY
27570: PUSH
27571: LD_INT 1
27573: ARRAY
27574: PPUSH
27575: LD_EXP 48
27579: PUSH
27580: LD_VAR 0 7
27584: ARRAY
27585: PUSH
27586: LD_INT 2
27588: ARRAY
27589: PPUSH
27590: CALL_OW 111
// randDialog = rand ( 1 , 2 ) ;
27594: LD_ADDR_VAR 0 3
27598: PUSH
27599: LD_INT 1
27601: PPUSH
27602: LD_INT 2
27604: PPUSH
27605: CALL_OW 12
27609: ST_TO_ADDR
// if not dialog_stop then
27610: LD_EXP 11
27614: NOT
27615: IFFALSE 27688
// begin dialog_stop = true ;
27617: LD_ADDR_EXP 11
27621: PUSH
27622: LD_INT 1
27624: ST_TO_ADDR
// if randDialog = 1 or not IsOK ( Gnyevko ) then
27625: LD_VAR 0 3
27629: PUSH
27630: LD_INT 1
27632: EQUAL
27633: PUSH
27634: LD_EXP 50
27638: PPUSH
27639: CALL_OW 302
27643: NOT
27644: OR
27645: IFFALSE 27661
// SayRadio ( Kurin , D11-Kur-1 ) else
27647: LD_EXP 61
27651: PPUSH
27652: LD_STRING D11-Kur-1
27654: PPUSH
27655: CALL_OW 94
27659: GO 27673
// Say ( Gnyevko , D11-Gny-1 ) ;
27661: LD_EXP 50
27665: PPUSH
27666: LD_STRING D11-Gny-1
27668: PPUSH
27669: CALL_OW 88
// wait ( 0 0$5 ) ;
27673: LD_INT 175
27675: PPUSH
27676: CALL_OW 67
// dialog_stop = false ;
27680: LD_ADDR_EXP 11
27684: PUSH
27685: LD_INT 0
27687: ST_TO_ADDR
// end ; end ;
27688: GO 27263
27690: POP
27691: POP
// end ;
27692: PPOPN 7
27694: END
// every 0 0$1 trigger IsDead ( Sikorski ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 5 do var i , tmpUs , tmpRu , building , beriaBuildings , nearBuilding , turrets , nearTurrets ;
27695: LD_INT 290
27697: PPUSH
27698: CALL_OW 301
27702: PUSH
27703: LD_INT 22
27705: PUSH
27706: LD_INT 1
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 21
27715: PUSH
27716: LD_INT 1
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PPUSH
27727: CALL_OW 69
27731: PUSH
27732: LD_INT 5
27734: LESS
27735: AND
27736: IFFALSE 30346
27738: GO 27740
27740: DISABLE
27741: LD_INT 0
27743: PPUSH
27744: PPUSH
27745: PPUSH
27746: PPUSH
27747: PPUSH
27748: PPUSH
27749: PPUSH
27750: PPUSH
// begin omicronSurrender = true ;
27751: LD_ADDR_EXP 23
27755: PUSH
27756: LD_INT 1
27758: ST_TO_ADDR
// canExitBattlefield = true ;
27759: LD_ADDR_EXP 24
27763: PUSH
27764: LD_INT 1
27766: ST_TO_ADDR
// enableOmicronAI = false ;
27767: LD_ADDR_EXP 29
27771: PUSH
27772: LD_INT 0
27774: ST_TO_ADDR
// endCutscene = true ;
27775: LD_ADDR_EXP 31
27779: PUSH
27780: LD_INT 1
27782: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , false ) ;
27783: LD_INT 1
27785: PPUSH
27786: LD_INT 3
27788: PPUSH
27789: LD_INT 1
27791: PPUSH
27792: LD_INT 0
27794: PPUSH
27795: CALL_OW 80
// SetAttitude ( 2 , 3 , att_friend , true ) ;
27799: LD_INT 2
27801: PPUSH
27802: LD_INT 3
27804: PPUSH
27805: LD_INT 1
27807: PPUSH
27808: LD_INT 1
27810: PPUSH
27811: CALL_OW 80
// CenterNowOnUnits ( Burlak ) ;
27815: LD_EXP 49
27819: PPUSH
27820: CALL_OW 87
// uc_side = 1 ;
27824: LD_ADDR_OWVAR 20
27828: PUSH
27829: LD_INT 1
27831: ST_TO_ADDR
// uc_nation = 1 ;
27832: LD_ADDR_OWVAR 21
27836: PUSH
27837: LD_INT 1
27839: ST_TO_ADDR
// hc_name :=  ;
27840: LD_ADDR_OWVAR 26
27844: PUSH
27845: LD_STRING 
27847: ST_TO_ADDR
// hc_gallery =  ;
27848: LD_ADDR_OWVAR 33
27852: PUSH
27853: LD_STRING 
27855: ST_TO_ADDR
// PrepareSoldier ( sex_male , 1 ) ;
27856: LD_INT 1
27858: PPUSH
27859: LD_INT 1
27861: PPUSH
27862: CALL_OW 381
// tmpUs = CreateHuman ;
27866: LD_ADDR_VAR 0 2
27870: PUSH
27871: CALL_OW 44
27875: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ f_side , 3 ] ) ) ;
27876: LD_INT 22
27878: PUSH
27879: LD_INT 3
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PPUSH
27886: CALL_OW 69
27890: PPUSH
27891: CALL_OW 141
// InGameOn ;
27895: CALL_OW 8
// DialogueOn ;
27899: CALL_OW 6
// CenterOnXY ( 26 , 33 ) ;
27903: LD_INT 26
27905: PPUSH
27906: LD_INT 33
27908: PPUSH
27909: CALL_OW 84
// SayRadio ( tmpUs , D8-Sol1-1 ) ;
27913: LD_VAR 0 2
27917: PPUSH
27918: LD_STRING D8-Sol1-1
27920: PPUSH
27921: CALL_OW 94
// if IsOk ( Kovalyuk ) then
27925: LD_EXP 52
27929: PPUSH
27930: CALL_OW 302
27934: IFFALSE 27948
// Say ( Kovalyuk , D8-Kov-1 ) ;
27936: LD_EXP 52
27940: PPUSH
27941: LD_STRING D8-Kov-1
27943: PPUSH
27944: CALL_OW 88
// tmpRu = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false , false ) ;
27948: LD_ADDR_VAR 0 3
27952: PUSH
27953: LD_INT 22
27955: PUSH
27956: LD_INT 3
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 21
27965: PUSH
27966: LD_INT 1
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 26
27975: PUSH
27976: LD_INT 1
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: LIST
27987: PPUSH
27988: CALL_OW 69
27992: PPUSH
27993: LD_STRING D8-RSol1-1
27995: PPUSH
27996: LD_STRING 
27998: PPUSH
27999: LD_INT 0
28001: PPUSH
28002: LD_INT 0
28004: PPUSH
28005: CALL 6995 0 5
28009: ST_TO_ADDR
// if IsOk ( Gnyevko ) then
28010: LD_EXP 50
28014: PPUSH
28015: CALL_OW 302
28019: IFFALSE 28033
// Say ( Gnyevko , D8-Gny-1 ) ;
28021: LD_EXP 50
28025: PPUSH
28026: LD_STRING D8-Gny-1
28028: PPUSH
28029: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff tmpRu , D8-RSol2-1 ,  , false , false ) ;
28033: LD_INT 22
28035: PUSH
28036: LD_INT 3
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 21
28045: PUSH
28046: LD_INT 1
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 26
28055: PUSH
28056: LD_INT 1
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: LIST
28067: PPUSH
28068: CALL_OW 69
28072: PUSH
28073: LD_VAR 0 3
28077: DIFF
28078: PPUSH
28079: LD_STRING D8-RSol2-1
28081: PPUSH
28082: LD_STRING 
28084: PPUSH
28085: LD_INT 0
28087: PPUSH
28088: LD_INT 0
28090: PPUSH
28091: CALL 6995 0 5
// DialogueOff ;
28095: CALL_OW 7
// PrepareArabian ;
28099: CALL 6517 0 0
// CenterNowOnXY ( 234 , 122 ) ;
28103: LD_INT 234
28105: PPUSH
28106: LD_INT 122
28108: PPUSH
28109: CALL_OW 86
// ComAgressiveMove ( northGroup , 221 , 110 ) ;
28113: LD_EXP 87
28117: PPUSH
28118: LD_INT 221
28120: PPUSH
28121: LD_INT 110
28123: PPUSH
28124: CALL_OW 114
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
28128: LD_EXP 88
28132: PPUSH
28133: LD_INT 21
28135: PUSH
28136: LD_INT 1
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PPUSH
28143: CALL_OW 72
28147: PPUSH
28148: LD_INT 221
28150: PPUSH
28151: LD_INT 110
28153: PPUSH
28154: CALL_OW 114
// wait ( 0 0$7 ) ;
28158: LD_INT 245
28160: PPUSH
28161: CALL_OW 67
// AddComAgressiveMove ( southGroup , 221 , 110 ) ;
28165: LD_EXP 88
28169: PPUSH
28170: LD_INT 221
28172: PPUSH
28173: LD_INT 110
28175: PPUSH
28176: CALL_OW 174
// wait ( 0 0$8 ) ;
28180: LD_INT 280
28182: PPUSH
28183: CALL_OW 67
// music_nat = nation_arabian ;
28187: LD_ADDR_OWVAR 71
28191: PUSH
28192: LD_INT 2
28194: ST_TO_ADDR
// music_class = music_combat ;
28195: LD_ADDR_OWVAR 72
28199: PUSH
28200: LD_INT 1
28202: ST_TO_ADDR
// game_speed = 4 ;
28203: LD_ADDR_OWVAR 65
28207: PUSH
28208: LD_INT 4
28210: ST_TO_ADDR
// DialogueOn ;
28211: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-1 ) ;
28215: LD_EXP 82
28219: PPUSH
28220: LD_STRING D9-Gri-1
28222: PPUSH
28223: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
28227: LD_EXP 61
28231: PPUSH
28232: LD_STRING D9-Kur-1
28234: PPUSH
28235: CALL_OW 94
// DialogueOff ;
28239: CALL_OW 7
// ComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 158 , 105 ) ;
28243: LD_EXP 78
28247: PPUSH
28248: LD_INT 25
28250: PUSH
28251: LD_INT 2
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PPUSH
28258: CALL_OW 72
28262: PPUSH
28263: LD_INT 158
28265: PPUSH
28266: LD_INT 105
28268: PPUSH
28269: CALL_OW 111
// ComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , 158 , 105 ) ;
28273: LD_EXP 78
28277: PPUSH
28278: LD_INT 25
28280: PUSH
28281: LD_INT 4
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PPUSH
28288: CALL_OW 72
28292: PPUSH
28293: LD_INT 158
28295: PPUSH
28296: LD_INT 105
28298: PPUSH
28299: CALL_OW 111
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28303: LD_EXP 78
28307: PPUSH
28308: LD_INT 25
28310: PUSH
28311: LD_INT 2
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PPUSH
28318: CALL_OW 72
28322: PPUSH
28323: LD_EXP 60
28327: PPUSH
28328: CALL_OW 250
28332: PPUSH
28333: LD_EXP 60
28337: PPUSH
28338: CALL_OW 251
28342: PPUSH
28343: CALL_OW 171
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28347: LD_EXP 78
28351: PPUSH
28352: LD_INT 25
28354: PUSH
28355: LD_INT 4
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PPUSH
28362: CALL_OW 72
28366: PPUSH
28367: LD_EXP 60
28371: PPUSH
28372: CALL_OW 250
28376: PPUSH
28377: LD_EXP 60
28381: PPUSH
28382: CALL_OW 251
28386: PPUSH
28387: CALL_OW 171
// ComMoveXY ( kirovTransportCargo , 158 , 105 ) ;
28391: LD_EXP 74
28395: PPUSH
28396: LD_INT 158
28398: PPUSH
28399: LD_INT 105
28401: PPUSH
28402: CALL_OW 111
// AddComMoveXY ( kirovTransportCargo , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28406: LD_EXP 74
28410: PPUSH
28411: LD_EXP 60
28415: PPUSH
28416: CALL_OW 250
28420: PPUSH
28421: LD_EXP 60
28425: PPUSH
28426: CALL_OW 251
28430: PPUSH
28431: CALL_OW 171
// wait ( 0 0$2.5 ) ;
28435: LD_INT 88
28437: PPUSH
28438: CALL_OW 67
// DialogueOn ;
28442: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-2 ) ;
28446: LD_EXP 82
28450: PPUSH
28451: LD_STRING D9-Gri-2
28453: PPUSH
28454: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
28458: LD_EXP 61
28462: PPUSH
28463: LD_STRING D9-Kur-2
28465: PPUSH
28466: CALL_OW 94
// DialogueOff ;
28470: CALL_OW 7
// repeat wait ( 1 ) ;
28474: LD_INT 1
28476: PPUSH
28477: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
28481: LD_EXP 82
28485: PPUSH
28486: CALL_OW 256
28490: PUSH
28491: LD_INT 1000
28493: LESS
28494: IFFALSE 28474
// DialogueOn ;
28496: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-3 ) ;
28500: LD_EXP 82
28504: PPUSH
28505: LD_STRING D9-Gri-3
28507: PPUSH
28508: CALL_OW 94
// DialogueOff ;
28512: CALL_OW 7
// KillUnit ( Grishko ) ;
28516: LD_EXP 82
28520: PPUSH
28521: CALL_OW 66
// wait ( 0 0$12 ) ;
28525: LD_INT 420
28527: PPUSH
28528: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
28532: LD_EXP 61
28536: PPUSH
28537: CALL_OW 87
// SayRadio ( Kurin , D9-Kur-3 ) ;
28541: LD_EXP 61
28545: PPUSH
28546: LD_STRING D9-Kur-3
28548: PPUSH
28549: CALL_OW 94
// CenterNowOnXY ( 176 , 110 ) ;
28553: LD_INT 176
28555: PPUSH
28556: LD_INT 110
28558: PPUSH
28559: CALL_OW 86
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
28563: LD_EXP 88
28567: PPUSH
28568: LD_INT 21
28570: PUSH
28571: LD_INT 1
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PPUSH
28578: CALL_OW 72
28582: PPUSH
28583: LD_INT 221
28585: PPUSH
28586: LD_INT 110
28588: PPUSH
28589: CALL_OW 114
// ComAgressiveMove ( northGroup , 161 , 109 ) ;
28593: LD_EXP 87
28597: PPUSH
28598: LD_INT 161
28600: PPUSH
28601: LD_INT 109
28603: PPUSH
28604: CALL_OW 114
// wait ( 0 0$7 ) ;
28608: LD_INT 245
28610: PPUSH
28611: CALL_OW 67
// ComAgressiveMove ( southGroup , 161 , 109 ) ;
28615: LD_EXP 88
28619: PPUSH
28620: LD_INT 161
28622: PPUSH
28623: LD_INT 109
28625: PPUSH
28626: CALL_OW 114
// wait ( 0 0$11 ) ;
28630: LD_INT 385
28632: PPUSH
28633: CALL_OW 67
// ComEnterUnit ( Kurin , kirovDepot ) ;
28637: LD_EXP 61
28641: PPUSH
28642: LD_EXP 67
28646: PPUSH
28647: CALL_OW 120
// DialogueOn ;
28651: CALL_OW 6
// SayRadio ( Kurin , D9a-Kur-1 ) ;
28655: LD_EXP 61
28659: PPUSH
28660: LD_STRING D9a-Kur-1
28662: PPUSH
28663: CALL_OW 94
// Say ( Burlak , D9a-Bur-1 ) ;
28667: LD_EXP 49
28671: PPUSH
28672: LD_STRING D9a-Bur-1
28674: PPUSH
28675: CALL_OW 88
// SayRadio ( Kurin , D9a-Kur-2 ) ;
28679: LD_EXP 61
28683: PPUSH
28684: LD_STRING D9a-Kur-2
28686: PPUSH
28687: CALL_OW 94
// DialogueOff ;
28691: CALL_OW 7
// ComExitBuilding ( survivorsArabianAttack ) ;
28695: LD_EXP 79
28699: PPUSH
28700: CALL_OW 122
// wait ( 0 0$1 ) ;
28704: LD_INT 35
28706: PPUSH
28707: CALL_OW 67
// ComMoveXY ( survivorsArabianAttack , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28711: LD_EXP 79
28715: PPUSH
28716: LD_EXP 60
28720: PPUSH
28721: CALL_OW 250
28725: PPUSH
28726: LD_EXP 60
28730: PPUSH
28731: CALL_OW 251
28735: PPUSH
28736: CALL_OW 111
// immortalSurvivors = true ;
28740: LD_ADDR_EXP 25
28744: PUSH
28745: LD_INT 1
28747: ST_TO_ADDR
// for tmpUS in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
28748: LD_ADDR_VAR 0 2
28752: PUSH
28753: LD_INT 22
28755: PUSH
28756: LD_INT 1
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 21
28765: PUSH
28766: LD_INT 1
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 50
28775: PUSH
28776: EMPTY
28777: LIST
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: LIST
28783: PPUSH
28784: CALL_OW 69
28788: PUSH
28789: FOR_IN
28790: IFFALSE 28803
// RemoveUnit ( tmpUS ) ;
28792: LD_VAR 0 2
28796: PPUSH
28797: CALL_OW 64
28801: GO 28789
28803: POP
28804: POP
// repeat wait ( 0 0$1 ) ;
28805: LD_INT 35
28807: PPUSH
28808: CALL_OW 67
// until IsDead ( Kurin ) ;
28812: LD_EXP 61
28816: PPUSH
28817: CALL_OW 301
28821: IFFALSE 28805
// wait ( 0 0$1 ) ;
28823: LD_INT 35
28825: PPUSH
28826: CALL_OW 67
// nearTurrets = [ ] ;
28830: LD_ADDR_VAR 0 8
28834: PUSH
28835: EMPTY
28836: ST_TO_ADDR
// turrets = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) ;
28837: LD_ADDR_VAR 0 7
28841: PUSH
28842: LD_INT 22
28844: PUSH
28845: LD_INT 6
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 30
28854: PUSH
28855: LD_INT 32
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 50
28864: PUSH
28865: EMPTY
28866: LIST
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: LIST
28872: PPUSH
28873: CALL_OW 69
28877: ST_TO_ADDR
// for i = 1 to 2 do
28878: LD_ADDR_VAR 0 1
28882: PUSH
28883: DOUBLE
28884: LD_INT 1
28886: DEC
28887: ST_TO_ADDR
28888: LD_INT 2
28890: PUSH
28891: FOR_TO
28892: IFFALSE 29001
// begin nearTurrets = nearTurrets ^ NearestUnitToUnit ( turrets , beriaDepot ) ;
28894: LD_ADDR_VAR 0 8
28898: PUSH
28899: LD_VAR 0 8
28903: PUSH
28904: LD_VAR 0 7
28908: PPUSH
28909: LD_EXP 60
28913: PPUSH
28914: CALL_OW 74
28918: ADD
28919: ST_TO_ADDR
// turrets = turrets diff nearTurrets ;
28920: LD_ADDR_VAR 0 7
28924: PUSH
28925: LD_VAR 0 7
28929: PUSH
28930: LD_VAR 0 8
28934: DIFF
28935: ST_TO_ADDR
// tmpRu = UnitsInside ( nearTurrets [ i ] ) [ 1 ] ;
28936: LD_ADDR_VAR 0 3
28940: PUSH
28941: LD_VAR 0 8
28945: PUSH
28946: LD_VAR 0 1
28950: ARRAY
28951: PPUSH
28952: CALL_OW 313
28956: PUSH
28957: LD_INT 1
28959: ARRAY
28960: ST_TO_ADDR
// ComExitBuilding ( tmpRu ) ;
28961: LD_VAR 0 3
28965: PPUSH
28966: CALL_OW 122
// AddComMoveXY ( tmpRu , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28970: LD_VAR 0 3
28974: PPUSH
28975: LD_EXP 60
28979: PPUSH
28980: CALL_OW 250
28984: PPUSH
28985: LD_EXP 60
28989: PPUSH
28990: CALL_OW 251
28994: PPUSH
28995: CALL_OW 171
// end ;
28999: GO 28891
29001: POP
29002: POP
// tmpRu = UnitsInside ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) [ 1 ] ) ;
29003: LD_ADDR_VAR 0 3
29007: PUSH
29008: LD_INT 22
29010: PUSH
29011: LD_INT 6
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 21
29020: PUSH
29021: LD_INT 3
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 2
29030: PUSH
29031: LD_INT 30
29033: PUSH
29034: LD_INT 6
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 30
29043: PUSH
29044: LD_INT 7
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: LIST
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: LIST
29060: PPUSH
29061: CALL_OW 69
29065: PUSH
29066: LD_INT 1
29068: ARRAY
29069: PPUSH
29070: CALL_OW 313
29074: ST_TO_ADDR
// ComExitBuilding ( tmpRu ) ;
29075: LD_VAR 0 3
29079: PPUSH
29080: CALL_OW 122
// AddComMoveXY ( tmpRu , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29084: LD_VAR 0 3
29088: PPUSH
29089: LD_EXP 60
29093: PPUSH
29094: CALL_OW 250
29098: PPUSH
29099: LD_EXP 60
29103: PPUSH
29104: CALL_OW 251
29108: PPUSH
29109: CALL_OW 171
// wait ( 0 0$14 ) ;
29113: LD_INT 490
29115: PPUSH
29116: CALL_OW 67
// ComExitVehicle ( FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
29120: LD_INT 26
29122: PPUSH
29123: LD_INT 22
29125: PUSH
29126: LD_INT 6
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 21
29135: PUSH
29136: LD_INT 1
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PPUSH
29147: CALL_OW 70
29151: PPUSH
29152: CALL_OW 121
// for i in FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) do
29156: LD_ADDR_VAR 0 1
29160: PUSH
29161: LD_INT 26
29163: PPUSH
29164: LD_INT 22
29166: PUSH
29167: LD_INT 6
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 21
29176: PUSH
29177: LD_INT 2
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PPUSH
29188: CALL_OW 70
29192: PUSH
29193: FOR_IN
29194: IFFALSE 29305
// begin if GetLives ( i ) < 15 then
29196: LD_VAR 0 1
29200: PPUSH
29201: CALL_OW 256
29205: PUSH
29206: LD_INT 15
29208: LESS
29209: IFFALSE 29274
// begin tmpRu = UnitsInside ( i ) ;
29211: LD_ADDR_VAR 0 3
29215: PUSH
29216: LD_VAR 0 1
29220: PPUSH
29221: CALL_OW 313
29225: ST_TO_ADDR
// ComExitVehicle ( tmpRu [ 1 ] ) ;
29226: LD_VAR 0 3
29230: PUSH
29231: LD_INT 1
29233: ARRAY
29234: PPUSH
29235: CALL_OW 121
// AddComMoveXY ( tmpRu [ 1 ] , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29239: LD_VAR 0 3
29243: PUSH
29244: LD_INT 1
29246: ARRAY
29247: PPUSH
29248: LD_EXP 60
29252: PPUSH
29253: CALL_OW 250
29257: PPUSH
29258: LD_EXP 60
29262: PPUSH
29263: CALL_OW 251
29267: PPUSH
29268: CALL_OW 171
// end else
29272: GO 29303
// AddComMoveXY ( i , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29274: LD_VAR 0 1
29278: PPUSH
29279: LD_EXP 60
29283: PPUSH
29284: CALL_OW 250
29288: PPUSH
29289: LD_EXP 60
29293: PPUSH
29294: CALL_OW 251
29298: PPUSH
29299: CALL_OW 171
// end ;
29303: GO 29193
29305: POP
29306: POP
// wait ( 0 0$1 ) ;
29307: LD_INT 35
29309: PPUSH
29310: CALL_OW 67
// AddComMoveXY ( FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29314: LD_INT 26
29316: PPUSH
29317: LD_INT 22
29319: PUSH
29320: LD_INT 6
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 21
29329: PUSH
29330: LD_INT 1
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PPUSH
29341: CALL_OW 70
29345: PPUSH
29346: LD_EXP 60
29350: PPUSH
29351: CALL_OW 250
29355: PPUSH
29356: LD_EXP 60
29360: PPUSH
29361: CALL_OW 251
29365: PPUSH
29366: CALL_OW 171
// ComExitVehicle ( UnitsInside ( kirovTransportCargo ) [ 1 ] ) ;
29370: LD_EXP 74
29374: PPUSH
29375: CALL_OW 313
29379: PUSH
29380: LD_INT 1
29382: ARRAY
29383: PPUSH
29384: CALL_OW 121
// for i in FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
29388: LD_ADDR_VAR 0 1
29392: PUSH
29393: LD_INT 26
29395: PPUSH
29396: LD_INT 22
29398: PUSH
29399: LD_INT 3
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 21
29408: PUSH
29409: LD_INT 2
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PPUSH
29420: CALL_OW 70
29424: PUSH
29425: FOR_IN
29426: IFFALSE 29537
// begin if GetLives ( i ) < 15 then
29428: LD_VAR 0 1
29432: PPUSH
29433: CALL_OW 256
29437: PUSH
29438: LD_INT 15
29440: LESS
29441: IFFALSE 29506
// begin tmpRu = UnitsInside ( i ) ;
29443: LD_ADDR_VAR 0 3
29447: PUSH
29448: LD_VAR 0 1
29452: PPUSH
29453: CALL_OW 313
29457: ST_TO_ADDR
// ComExitVehicle ( tmpRu [ 1 ] ) ;
29458: LD_VAR 0 3
29462: PUSH
29463: LD_INT 1
29465: ARRAY
29466: PPUSH
29467: CALL_OW 121
// AddComMoveXY ( tmpRu [ 1 ] , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29471: LD_VAR 0 3
29475: PUSH
29476: LD_INT 1
29478: ARRAY
29479: PPUSH
29480: LD_EXP 60
29484: PPUSH
29485: CALL_OW 250
29489: PPUSH
29490: LD_EXP 60
29494: PPUSH
29495: CALL_OW 251
29499: PPUSH
29500: CALL_OW 171
// end else
29504: GO 29535
// AddComMoveXY ( i , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29506: LD_VAR 0 1
29510: PPUSH
29511: LD_EXP 60
29515: PPUSH
29516: CALL_OW 250
29520: PPUSH
29521: LD_EXP 60
29525: PPUSH
29526: CALL_OW 251
29530: PPUSH
29531: CALL_OW 171
// end ;
29535: GO 29425
29537: POP
29538: POP
// wait ( 0 0$1 ) ;
29539: LD_INT 35
29541: PPUSH
29542: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
29546: LD_INT 22
29548: PUSH
29549: LD_INT 3
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 21
29558: PUSH
29559: LD_INT 1
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PPUSH
29570: CALL_OW 69
29574: PPUSH
29575: LD_EXP 62
29579: PPUSH
29580: CALL_OW 250
29584: PPUSH
29585: LD_EXP 62
29589: PPUSH
29590: CALL_OW 251
29594: PPUSH
29595: CALL_OW 111
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
29599: LD_INT 22
29601: PUSH
29602: LD_INT 3
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 21
29611: PUSH
29612: LD_INT 1
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PPUSH
29623: CALL_OW 69
29627: PPUSH
29628: LD_EXP 62
29632: PPUSH
29633: CALL_OW 250
29637: PPUSH
29638: LD_EXP 62
29642: PPUSH
29643: CALL_OW 251
29647: PPUSH
29648: CALL_OW 111
// ComMoveXY ( IsInUnit ( Burlak ) , GetX ( Popov ) , GetY ( Popov ) ) ;
29652: LD_EXP 49
29656: PPUSH
29657: CALL_OW 310
29661: PPUSH
29662: LD_EXP 62
29666: PPUSH
29667: CALL_OW 250
29671: PPUSH
29672: LD_EXP 62
29676: PPUSH
29677: CALL_OW 251
29681: PPUSH
29682: CALL_OW 111
// if IsInUnit ( Burlak ) then
29686: LD_EXP 49
29690: PPUSH
29691: CALL_OW 310
29695: IFFALSE 29713
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) else
29697: LD_EXP 49
29701: PPUSH
29702: CALL_OW 310
29706: PPUSH
29707: CALL_OW 87
29711: GO 29722
// CenterNowOnUnits ( Burlak ) ;
29713: LD_EXP 49
29717: PPUSH
29718: CALL_OW 87
// wait ( 0 0$1 ) ;
29722: LD_INT 35
29724: PPUSH
29725: CALL_OW 67
// until GetDistUnits ( Burlak , Popov ) < 8 or ( IsInUnit ( Burlak ) < 8 and IsInUnit ( Burlak ) ) ;
29729: LD_EXP 49
29733: PPUSH
29734: LD_EXP 62
29738: PPUSH
29739: CALL_OW 296
29743: PUSH
29744: LD_INT 8
29746: LESS
29747: PUSH
29748: LD_EXP 49
29752: PPUSH
29753: CALL_OW 310
29757: PUSH
29758: LD_INT 8
29760: LESS
29761: PUSH
29762: LD_EXP 49
29766: PPUSH
29767: CALL_OW 310
29771: AND
29772: OR
29773: IFFALSE 29599
// if IsInUnit ( Burlak ) then
29775: LD_EXP 49
29779: PPUSH
29780: CALL_OW 310
29784: IFFALSE 29802
// begin ComExitVehicle ( Burlak ) ;
29786: LD_EXP 49
29790: PPUSH
29791: CALL_OW 121
// wait ( 0 0$1 ) ;
29795: LD_INT 35
29797: PPUSH
29798: CALL_OW 67
// end ; CenterNowOnUnits ( [ Burlak , Popov ] ) ;
29802: LD_EXP 49
29806: PUSH
29807: LD_EXP 62
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PPUSH
29816: CALL_OW 87
// ComTurnUnit ( Burlak , Popov ) ;
29820: LD_EXP 49
29824: PPUSH
29825: LD_EXP 62
29829: PPUSH
29830: CALL_OW 119
// ComTurnUnit ( Popov , Burlak ) ;
29834: LD_EXP 62
29838: PPUSH
29839: LD_EXP 49
29843: PPUSH
29844: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
29848: LD_EXP 49
29852: PPUSH
29853: LD_STRING D10a-Bur-1
29855: PPUSH
29856: CALL_OW 88
// Say ( Popov , D10a-Pop-1 ) ;
29860: LD_EXP 62
29864: PPUSH
29865: LD_STRING D10a-Pop-1
29867: PPUSH
29868: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
29872: LD_EXP 49
29876: PPUSH
29877: LD_STRING D10a-Bur-2
29879: PPUSH
29880: CALL_OW 88
// Say ( Popov , D10a-Pop-2 ) ;
29884: LD_EXP 62
29888: PPUSH
29889: LD_STRING D10a-Pop-2
29891: PPUSH
29892: CALL_OW 88
// Say ( Burlak , D10a-Bur-3 ) ;
29896: LD_EXP 49
29900: PPUSH
29901: LD_STRING D10a-Bur-3
29903: PPUSH
29904: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
29908: LD_EXP 62
29912: PPUSH
29913: LD_STRING D10a-Pop-3
29915: PPUSH
29916: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
29920: LD_EXP 49
29924: PPUSH
29925: LD_STRING D10a-Bur-4
29927: PPUSH
29928: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
29932: LD_EXP 62
29936: PPUSH
29937: LD_STRING D10a-Pop-4
29939: PPUSH
29940: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
29944: LD_EXP 49
29948: PPUSH
29949: LD_STRING D10a-Bur-5
29951: PPUSH
29952: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
29956: LD_EXP 62
29960: PPUSH
29961: LD_STRING D10a-Pop-5
29963: PPUSH
29964: CALL_OW 88
// survivorsArabianAttack = [ ] ;
29968: LD_ADDR_EXP 79
29972: PUSH
29973: EMPTY
29974: ST_TO_ADDR
// survivorsArabianAttack = FilterAllUnits ( [ [ f_side , 6 ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
29975: LD_ADDR_EXP 79
29979: PUSH
29980: LD_INT 22
29982: PUSH
29983: LD_INT 6
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 50
29992: PUSH
29993: EMPTY
29994: LIST
29995: PUSH
29996: LD_INT 21
29998: PUSH
29999: LD_INT 1
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: LIST
30010: PPUSH
30011: CALL_OW 69
30015: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , 83 , 157 ) ;
30016: LD_INT 22
30018: PUSH
30019: LD_INT 3
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 2
30028: PUSH
30029: LD_INT 21
30031: PUSH
30032: LD_INT 1
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 21
30041: PUSH
30042: LD_INT 2
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: LIST
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PPUSH
30058: CALL_OW 69
30062: PPUSH
30063: LD_INT 83
30065: PPUSH
30066: LD_INT 157
30068: PPUSH
30069: CALL_OW 111
// ComMoveXY ( survivorsArabianAttack , 83 , 157 ) ;
30073: LD_EXP 79
30077: PPUSH
30078: LD_INT 83
30080: PPUSH
30081: LD_INT 157
30083: PPUSH
30084: CALL_OW 111
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) , 83 , 157 ) ;
30088: LD_INT 22
30090: PUSH
30091: LD_INT 6
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 21
30100: PUSH
30101: LD_INT 2
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PPUSH
30112: CALL_OW 69
30116: PPUSH
30117: LD_INT 83
30119: PPUSH
30120: LD_INT 157
30122: PPUSH
30123: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
30127: LD_EXP 49
30131: PPUSH
30132: CALL_OW 87
// wait ( 0 0$1 ) ;
30136: LD_INT 35
30138: PPUSH
30139: CALL_OW 67
// until GetDistUnits ( Burlak , beriaDepot ) > 23 ;
30143: LD_EXP 49
30147: PPUSH
30148: LD_EXP 60
30152: PPUSH
30153: CALL_OW 296
30157: PUSH
30158: LD_INT 23
30160: GREATER
30161: IFFALSE 30088
// PlaceSeeing ( 113 , 96 , 3 , - 12 ) ;
30163: LD_INT 113
30165: PPUSH
30166: LD_INT 96
30168: PPUSH
30169: LD_INT 3
30171: PPUSH
30172: LD_INT 12
30174: NEG
30175: PPUSH
30176: CALL_OW 330
// CenterNowOnXY ( 113 , 96 ) ;
30180: LD_INT 113
30182: PPUSH
30183: LD_INT 96
30185: PPUSH
30186: CALL_OW 86
// canDestroyBeriaBase = true ;
30190: LD_ADDR_EXP 28
30194: PUSH
30195: LD_INT 1
30197: ST_TO_ADDR
// beriaBuildings = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
30198: LD_ADDR_VAR 0 5
30202: PUSH
30203: LD_INT 25
30205: PPUSH
30206: LD_INT 22
30208: PUSH
30209: LD_INT 3
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 21
30218: PUSH
30219: LD_INT 3
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PPUSH
30230: CALL_OW 70
30234: ST_TO_ADDR
// for i = 1 to beriaBuildings do
30235: LD_ADDR_VAR 0 1
30239: PUSH
30240: DOUBLE
30241: LD_INT 1
30243: DEC
30244: ST_TO_ADDR
30245: LD_VAR 0 5
30249: PUSH
30250: FOR_TO
30251: IFFALSE 30333
// begin nearBuilding = NearestUnitToUnit ( beriaBuildings , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
30253: LD_ADDR_VAR 0 6
30257: PUSH
30258: LD_VAR 0 5
30262: PPUSH
30263: LD_INT 22
30265: PUSH
30266: LD_INT 2
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PPUSH
30273: CALL_OW 69
30277: PUSH
30278: LD_INT 1
30280: ARRAY
30281: PPUSH
30282: CALL_OW 74
30286: ST_TO_ADDR
// beriaBuildings = beriaBuildings diff nearBuilding ;
30287: LD_ADDR_VAR 0 5
30291: PUSH
30292: LD_VAR 0 5
30296: PUSH
30297: LD_VAR 0 6
30301: DIFF
30302: ST_TO_ADDR
// AddComAttackUnit ( northGroup , nearBuilding ) ;
30303: LD_EXP 87
30307: PPUSH
30308: LD_VAR 0 6
30312: PPUSH
30313: CALL_OW 175
// AddComAttackUnit ( southGroup , nearBuilding ) ;
30317: LD_EXP 88
30321: PPUSH
30322: LD_VAR 0 6
30326: PPUSH
30327: CALL_OW 175
// end ;
30331: GO 30250
30333: POP
30334: POP
// wait ( 0 0$35 ) ;
30335: LD_INT 1225
30337: PPUSH
30338: CALL_OW 67
// FinishMission ;
30342: CALL 20205 0 0
// end ;
30346: PPOPN 8
30348: END
// every 1 trigger immortalSurvivors do var unit ;
30349: LD_EXP 25
30353: IFFALSE 30391
30355: GO 30357
30357: DISABLE
30358: LD_INT 0
30360: PPUSH
// begin enable ;
30361: ENABLE
// for unit in survivorsArabianAttack do
30362: LD_ADDR_VAR 0 1
30366: PUSH
30367: LD_EXP 79
30371: PUSH
30372: FOR_IN
30373: IFFALSE 30389
// SetLives ( unit , 1000 ) ;
30375: LD_VAR 0 1
30379: PPUSH
30380: LD_INT 1000
30382: PPUSH
30383: CALL_OW 234
30387: GO 30372
30389: POP
30390: POP
// end ; end_of_file
30391: PPOPN 1
30393: END
// every 0 0$30 do
30394: GO 30396
30396: DISABLE
// CreateCratesXYR ( rand ( 3 , 5 ) , 76 , 111 , 5 , true ) ;
30397: LD_INT 3
30399: PPUSH
30400: LD_INT 5
30402: PPUSH
30403: CALL_OW 12
30407: PPUSH
30408: LD_INT 76
30410: PPUSH
30411: LD_INT 111
30413: PPUSH
30414: LD_INT 5
30416: PPUSH
30417: LD_INT 1
30419: PPUSH
30420: CALL_OW 56
30424: END
// every 0 0$10 trigger spawnCrates do var spawnDelay ;
30425: LD_EXP 5
30429: IFFALSE 30501
30431: GO 30433
30433: DISABLE
30434: LD_INT 0
30436: PPUSH
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
30437: LD_INT 50
30439: PPUSH
30440: LD_INT 4200
30442: PPUSH
30443: CALL_OW 12
30447: PPUSH
30448: CALL_OW 67
// wait ( spawnDelay * 0 0$5 ) ;
30452: LD_VAR 0 1
30456: PUSH
30457: LD_INT 175
30459: MUL
30460: PPUSH
30461: CALL_OW 67
// spawnDelay = spawnDelay + 1 ;
30465: LD_ADDR_VAR 0 1
30469: PUSH
30470: LD_VAR 0 1
30474: PUSH
30475: LD_INT 1
30477: PLUS
30478: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
30479: LD_INT 3
30481: PPUSH
30482: LD_INT 5
30484: PPUSH
30485: CALL_OW 12
30489: PPUSH
30490: LD_INT 6
30492: PPUSH
30493: LD_INT 1
30495: PPUSH
30496: CALL_OW 55
// enable ;
30500: ENABLE
// end ; end_of_file
30501: PPOPN 1
30503: END
// export counterEnable , counterIndex ; every 0 0$1 trigger counterEnable do
30504: LD_EXP 89
30508: IFFALSE 30671
30510: GO 30512
30512: DISABLE
// begin enable ;
30513: ENABLE
// case counterIndex of 1 :
30514: LD_EXP 90
30518: PUSH
30519: LD_INT 1
30521: DOUBLE
30522: EQUAL
30523: IFTRUE 30527
30525: GO 30544
30527: POP
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ; 2 :
30528: LD_ADDR_EXP 40
30532: PUSH
30533: LD_EXP 40
30537: PUSH
30538: LD_INT 35
30540: MINUS
30541: ST_TO_ADDR
30542: GO 30671
30544: LD_INT 2
30546: DOUBLE
30547: EQUAL
30548: IFTRUE 30552
30550: GO 30586
30552: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
30553: LD_ADDR_OWVAR 47
30557: PUSH
30558: LD_STRING #Ru03-1
30560: PUSH
30561: LD_EXP 15
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
30570: LD_ADDR_EXP 15
30574: PUSH
30575: LD_EXP 15
30579: PUSH
30580: LD_INT 35
30582: MINUS
30583: ST_TO_ADDR
// end ; 3 :
30584: GO 30671
30586: LD_INT 3
30588: DOUBLE
30589: EQUAL
30590: IFTRUE 30594
30592: GO 30628
30594: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
30595: LD_ADDR_OWVAR 47
30599: PUSH
30600: LD_STRING #Ru03-2
30602: PUSH
30603: LD_EXP 15
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
30612: LD_ADDR_EXP 15
30616: PUSH
30617: LD_EXP 15
30621: PUSH
30622: LD_INT 35
30624: MINUS
30625: ST_TO_ADDR
// end ; 4 :
30626: GO 30671
30628: LD_INT 4
30630: DOUBLE
30631: EQUAL
30632: IFTRUE 30636
30634: GO 30670
30636: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
30637: LD_ADDR_OWVAR 47
30641: PUSH
30642: LD_STRING #Ru03-3
30644: PUSH
30645: LD_EXP 14
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
30654: LD_ADDR_EXP 14
30658: PUSH
30659: LD_EXP 14
30663: PUSH
30664: LD_INT 35
30666: MINUS
30667: ST_TO_ADDR
// end ; end ;
30668: GO 30671
30670: POP
// end ; end_of_file
30671: END
// every 7 7$0 do
30672: GO 30674
30674: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 0 , NorthAmericanSpawnArea ) ;
30675: LD_INT 3
30677: PPUSH
30678: LD_INT 1
30680: PPUSH
30681: LD_INT 0
30683: PPUSH
30684: LD_INT 7
30686: PPUSH
30687: CALL 5900 0 4
30691: END
// every 12 12$0 do
30692: GO 30694
30694: DISABLE
// PrepareAmericanSupportTroops ( 2 , 2 , 1 , [ SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
30695: LD_INT 2
30697: PPUSH
30698: LD_INT 2
30700: PPUSH
30701: LD_INT 1
30703: PPUSH
30704: LD_INT 9
30706: PUSH
30707: LD_INT 8
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 1
30716: PPUSH
30717: LD_INT 2
30719: PPUSH
30720: CALL_OW 12
30724: ARRAY
30725: PPUSH
30726: CALL 5900 0 4
30730: END
// every 20 20$0 do
30731: GO 30733
30733: DISABLE
// PrepareAmericanSupportTroops ( 4 , 2 , 0 , NorthAmericanSpawnArea ) ;
30734: LD_INT 4
30736: PPUSH
30737: LD_INT 2
30739: PPUSH
30740: LD_INT 0
30742: PPUSH
30743: LD_INT 7
30745: PPUSH
30746: CALL 5900 0 4
30750: END
// every 23 23$0 do
30751: GO 30753
30753: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 2 , [ SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ; end_of_file
30754: LD_INT 3
30756: PPUSH
30757: LD_INT 1
30759: PPUSH
30760: LD_INT 2
30762: PPUSH
30763: LD_INT 9
30765: PUSH
30766: LD_INT 8
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 1
30775: PPUSH
30776: LD_INT 2
30778: PPUSH
30779: CALL_OW 12
30783: ARRAY
30784: PPUSH
30785: CALL 5900 0 4
30789: END
// export function Nef_PrepareNature ; var i , un ; begin
30790: LD_INT 0
30792: PPUSH
30793: PPUSH
30794: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
30795: LD_ADDR_VAR 0 2
30799: PUSH
30800: DOUBLE
30801: LD_INT 1
30803: DEC
30804: ST_TO_ADDR
30805: LD_EXP 32
30809: PUSH
30810: LD_INT 1
30812: ARRAY
30813: PUSH
30814: FOR_TO
30815: IFFALSE 30925
// begin uc_side = 0 ;
30817: LD_ADDR_OWVAR 20
30821: PUSH
30822: LD_INT 0
30824: ST_TO_ADDR
// uc_nation = nation_nature ;
30825: LD_ADDR_OWVAR 21
30829: PUSH
30830: LD_INT 0
30832: ST_TO_ADDR
// hc_class = class_apeman ;
30833: LD_ADDR_OWVAR 28
30837: PUSH
30838: LD_INT 12
30840: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
30841: LD_ADDR_OWVAR 31
30845: PUSH
30846: LD_EXP 33
30850: PUSH
30851: LD_INT 1
30853: ARRAY
30854: PUSH
30855: LD_EXP 33
30859: PUSH
30860: LD_INT 2
30862: ARRAY
30863: PUSH
30864: LD_EXP 33
30868: PUSH
30869: LD_INT 3
30871: ARRAY
30872: PUSH
30873: LD_EXP 33
30877: PUSH
30878: LD_INT 4
30880: ARRAY
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
30888: LD_ADDR_OWVAR 35
30892: PUSH
30893: LD_EXP 34
30897: ST_TO_ADDR
// un = CreateHuman ;
30898: LD_ADDR_VAR 0 3
30902: PUSH
30903: CALL_OW 44
30907: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
30908: LD_VAR 0 3
30912: PPUSH
30913: LD_INT 27
30915: PPUSH
30916: LD_INT 0
30918: PPUSH
30919: CALL_OW 49
// end ;
30923: GO 30814
30925: POP
30926: POP
// for i := 1 to animalsAmount [ 2 ] do
30927: LD_ADDR_VAR 0 2
30931: PUSH
30932: DOUBLE
30933: LD_INT 1
30935: DEC
30936: ST_TO_ADDR
30937: LD_EXP 32
30941: PUSH
30942: LD_INT 2
30944: ARRAY
30945: PUSH
30946: FOR_TO
30947: IFFALSE 31057
// begin uc_side = 0 ;
30949: LD_ADDR_OWVAR 20
30953: PUSH
30954: LD_INT 0
30956: ST_TO_ADDR
// uc_nation = nation_nature ;
30957: LD_ADDR_OWVAR 21
30961: PUSH
30962: LD_INT 0
30964: ST_TO_ADDR
// hc_class = class_phororhacos ;
30965: LD_ADDR_OWVAR 28
30969: PUSH
30970: LD_INT 18
30972: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
30973: LD_ADDR_OWVAR 31
30977: PUSH
30978: LD_EXP 33
30982: PUSH
30983: LD_INT 1
30985: ARRAY
30986: PUSH
30987: LD_EXP 33
30991: PUSH
30992: LD_INT 2
30994: ARRAY
30995: PUSH
30996: LD_EXP 33
31000: PUSH
31001: LD_INT 3
31003: ARRAY
31004: PUSH
31005: LD_EXP 33
31009: PUSH
31010: LD_INT 4
31012: ARRAY
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
31020: LD_ADDR_OWVAR 35
31024: PUSH
31025: LD_EXP 34
31029: ST_TO_ADDR
// un = CreateHuman ;
31030: LD_ADDR_VAR 0 3
31034: PUSH
31035: CALL_OW 44
31039: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
31040: LD_VAR 0 3
31044: PPUSH
31045: LD_INT 27
31047: PPUSH
31048: LD_INT 0
31050: PPUSH
31051: CALL_OW 49
// end ;
31055: GO 30946
31057: POP
31058: POP
// for i := 1 to animalsAmount [ 3 ] do
31059: LD_ADDR_VAR 0 2
31063: PUSH
31064: DOUBLE
31065: LD_INT 1
31067: DEC
31068: ST_TO_ADDR
31069: LD_EXP 32
31073: PUSH
31074: LD_INT 3
31076: ARRAY
31077: PUSH
31078: FOR_TO
31079: IFFALSE 31189
// begin uc_side = 0 ;
31081: LD_ADDR_OWVAR 20
31085: PUSH
31086: LD_INT 0
31088: ST_TO_ADDR
// uc_nation = nation_nature ;
31089: LD_ADDR_OWVAR 21
31093: PUSH
31094: LD_INT 0
31096: ST_TO_ADDR
// hc_class = class_tiger ;
31097: LD_ADDR_OWVAR 28
31101: PUSH
31102: LD_INT 14
31104: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
31105: LD_ADDR_OWVAR 31
31109: PUSH
31110: LD_EXP 33
31114: PUSH
31115: LD_INT 1
31117: ARRAY
31118: PUSH
31119: LD_EXP 33
31123: PUSH
31124: LD_INT 2
31126: ARRAY
31127: PUSH
31128: LD_EXP 33
31132: PUSH
31133: LD_INT 3
31135: ARRAY
31136: PUSH
31137: LD_EXP 33
31141: PUSH
31142: LD_INT 4
31144: ARRAY
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
31152: LD_ADDR_OWVAR 35
31156: PUSH
31157: LD_EXP 34
31161: ST_TO_ADDR
// un = CreateHuman ;
31162: LD_ADDR_VAR 0 3
31166: PUSH
31167: CALL_OW 44
31171: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
31172: LD_VAR 0 3
31176: PPUSH
31177: LD_INT 27
31179: PPUSH
31180: LD_INT 0
31182: PPUSH
31183: CALL_OW 49
// end ;
31187: GO 31078
31189: POP
31190: POP
// for i := 1 to animalsAmount [ 4 ] do
31191: LD_ADDR_VAR 0 2
31195: PUSH
31196: DOUBLE
31197: LD_INT 1
31199: DEC
31200: ST_TO_ADDR
31201: LD_EXP 32
31205: PUSH
31206: LD_INT 4
31208: ARRAY
31209: PUSH
31210: FOR_TO
31211: IFFALSE 31321
// begin uc_side = 0 ;
31213: LD_ADDR_OWVAR 20
31217: PUSH
31218: LD_INT 0
31220: ST_TO_ADDR
// uc_nation = nation_nature ;
31221: LD_ADDR_OWVAR 21
31225: PUSH
31226: LD_INT 0
31228: ST_TO_ADDR
// hc_class = 21 ;
31229: LD_ADDR_OWVAR 28
31233: PUSH
31234: LD_INT 21
31236: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
31237: LD_ADDR_OWVAR 31
31241: PUSH
31242: LD_EXP 33
31246: PUSH
31247: LD_INT 1
31249: ARRAY
31250: PUSH
31251: LD_EXP 33
31255: PUSH
31256: LD_INT 2
31258: ARRAY
31259: PUSH
31260: LD_EXP 33
31264: PUSH
31265: LD_INT 3
31267: ARRAY
31268: PUSH
31269: LD_EXP 33
31273: PUSH
31274: LD_INT 4
31276: ARRAY
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
31284: LD_ADDR_OWVAR 35
31288: PUSH
31289: LD_EXP 34
31293: ST_TO_ADDR
// un = CreateHuman ;
31294: LD_ADDR_VAR 0 3
31298: PUSH
31299: CALL_OW 44
31303: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
31304: LD_VAR 0 3
31308: PPUSH
31309: LD_INT 27
31311: PPUSH
31312: LD_INT 0
31314: PPUSH
31315: CALL_OW 49
// end ;
31319: GO 31210
31321: POP
31322: POP
// for i := 1 to animalsAmount [ 5 ] do
31323: LD_ADDR_VAR 0 2
31327: PUSH
31328: DOUBLE
31329: LD_INT 1
31331: DEC
31332: ST_TO_ADDR
31333: LD_EXP 32
31337: PUSH
31338: LD_INT 5
31340: ARRAY
31341: PUSH
31342: FOR_TO
31343: IFFALSE 31404
// begin uc_side = 0 ;
31345: LD_ADDR_OWVAR 20
31349: PUSH
31350: LD_INT 0
31352: ST_TO_ADDR
// uc_nation = nation_nature ;
31353: LD_ADDR_OWVAR 21
31357: PUSH
31358: LD_INT 0
31360: ST_TO_ADDR
// vc_chassis := 31 ;
31361: LD_ADDR_OWVAR 37
31365: PUSH
31366: LD_INT 31
31368: ST_TO_ADDR
// vc_control := control_rider ;
31369: LD_ADDR_OWVAR 38
31373: PUSH
31374: LD_INT 4
31376: ST_TO_ADDR
// un := CreateVehicle ;
31377: LD_ADDR_VAR 0 3
31381: PUSH
31382: CALL_OW 45
31386: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
31387: LD_VAR 0 3
31391: PPUSH
31392: LD_INT 27
31394: PPUSH
31395: LD_INT 0
31397: PPUSH
31398: CALL_OW 49
// end ;
31402: GO 31342
31404: POP
31405: POP
// end ; end_of_file
31406: LD_VAR 0 1
31410: RET
// every 1 trigger scholtzeSaved do
31411: LD_EXP 7
31415: IFFALSE 31427
31417: GO 31419
31419: DISABLE
// SetAchievement ( ACH_PROFESSOR ) ;
31420: LD_STRING ACH_PROFESSOR
31422: PPUSH
31423: CALL_OW 543
31427: END
// every 1 trigger IsDead ( Sikorski ) do
31428: LD_INT 290
31430: PPUSH
31431: CALL_OW 301
31435: IFFALSE 31447
31437: GO 31439
31439: DISABLE
// SetAchievement ( ACH_SIKORSKI ) ;
31440: LD_STRING ACH_SIKORSKI
31442: PPUSH
31443: CALL_OW 543
31447: END
// every 1 trigger not americanTroopsArriveOmicronCounter and not canExitBattlefield do
31448: LD_EXP 12
31452: NOT
31453: PUSH
31454: LD_EXP 24
31458: NOT
31459: AND
31460: IFFALSE 31472
31462: GO 31464
31464: DISABLE
// SetAchievement ( ACH_REINFORCE ) ; end_of_file
31465: LD_STRING ACH_REINFORCE
31467: PPUSH
31468: CALL_OW 543
31472: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
31473: LD_INT 0
31475: PPUSH
// ar_crane := 88 ;
31476: LD_ADDR_EXP 97
31480: PUSH
31481: LD_INT 88
31483: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
31484: LD_ADDR_EXP 92
31488: PUSH
31489: LD_INT 89
31491: ST_TO_ADDR
// us_hack := 99 ;
31492: LD_ADDR_EXP 93
31496: PUSH
31497: LD_INT 99
31499: ST_TO_ADDR
// us_artillery := 97 ;
31500: LD_ADDR_EXP 94
31504: PUSH
31505: LD_INT 97
31507: ST_TO_ADDR
// ar_bio_bomb := 91 ;
31508: LD_ADDR_EXP 95
31512: PUSH
31513: LD_INT 91
31515: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
31516: LD_ADDR_EXP 96
31520: PUSH
31521: LD_INT 92
31523: ST_TO_ADDR
// ru_radar := 98 ;
31524: LD_ADDR_EXP 91
31528: PUSH
31529: LD_INT 98
31531: ST_TO_ADDR
// tech_Artillery := 80 ;
31532: LD_ADDR_EXP 98
31536: PUSH
31537: LD_INT 80
31539: ST_TO_ADDR
// tech_RadMat := 81 ;
31540: LD_ADDR_EXP 99
31544: PUSH
31545: LD_INT 81
31547: ST_TO_ADDR
// tech_BasicTools := 82 ;
31548: LD_ADDR_EXP 100
31552: PUSH
31553: LD_INT 82
31555: ST_TO_ADDR
// tech_Cargo := 83 ;
31556: LD_ADDR_EXP 101
31560: PUSH
31561: LD_INT 83
31563: ST_TO_ADDR
// tech_Track := 84 ;
31564: LD_ADDR_EXP 102
31568: PUSH
31569: LD_INT 84
31571: ST_TO_ADDR
// tech_Crane := 85 ;
31572: LD_ADDR_EXP 103
31576: PUSH
31577: LD_INT 85
31579: ST_TO_ADDR
// tech_Bulldozer := 86 ;
31580: LD_ADDR_EXP 104
31584: PUSH
31585: LD_INT 86
31587: ST_TO_ADDR
// tech_Hovercraft := 87 ;
31588: LD_ADDR_EXP 105
31592: PUSH
31593: LD_INT 87
31595: ST_TO_ADDR
// end ;
31596: LD_VAR 0 1
31600: RET
// every 1 do
31601: GO 31603
31603: DISABLE
// InitGlobalVariables ; end_of_file
31604: CALL 31473 0 0
31608: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31609: LD_INT 0
31611: PPUSH
31612: PPUSH
// if exist_mode then
31613: LD_VAR 0 2
31617: IFFALSE 31642
// unit := CreateCharacter ( prefix & ident ) else
31619: LD_ADDR_VAR 0 5
31623: PUSH
31624: LD_VAR 0 3
31628: PUSH
31629: LD_VAR 0 1
31633: STR
31634: PPUSH
31635: CALL_OW 34
31639: ST_TO_ADDR
31640: GO 31657
// unit := NewCharacter ( ident ) ;
31642: LD_ADDR_VAR 0 5
31646: PUSH
31647: LD_VAR 0 1
31651: PPUSH
31652: CALL_OW 25
31656: ST_TO_ADDR
// result := unit ;
31657: LD_ADDR_VAR 0 4
31661: PUSH
31662: LD_VAR 0 5
31666: ST_TO_ADDR
// end ;
31667: LD_VAR 0 4
31671: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31672: LD_INT 0
31674: PPUSH
31675: PPUSH
// if not side or not nation then
31676: LD_VAR 0 1
31680: NOT
31681: PUSH
31682: LD_VAR 0 2
31686: NOT
31687: OR
31688: IFFALSE 31692
// exit ;
31690: GO 32456
// case nation of nation_american :
31692: LD_VAR 0 2
31696: PUSH
31697: LD_INT 1
31699: DOUBLE
31700: EQUAL
31701: IFTRUE 31705
31703: GO 31919
31705: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31706: LD_ADDR_VAR 0 4
31710: PUSH
31711: LD_INT 35
31713: PUSH
31714: LD_INT 45
31716: PUSH
31717: LD_INT 46
31719: PUSH
31720: LD_INT 47
31722: PUSH
31723: LD_INT 82
31725: PUSH
31726: LD_INT 83
31728: PUSH
31729: LD_INT 84
31731: PUSH
31732: LD_INT 85
31734: PUSH
31735: LD_INT 86
31737: PUSH
31738: LD_INT 1
31740: PUSH
31741: LD_INT 2
31743: PUSH
31744: LD_INT 6
31746: PUSH
31747: LD_INT 15
31749: PUSH
31750: LD_INT 16
31752: PUSH
31753: LD_INT 7
31755: PUSH
31756: LD_INT 12
31758: PUSH
31759: LD_INT 13
31761: PUSH
31762: LD_INT 10
31764: PUSH
31765: LD_INT 14
31767: PUSH
31768: LD_INT 20
31770: PUSH
31771: LD_INT 21
31773: PUSH
31774: LD_INT 22
31776: PUSH
31777: LD_INT 25
31779: PUSH
31780: LD_INT 32
31782: PUSH
31783: LD_INT 27
31785: PUSH
31786: LD_INT 36
31788: PUSH
31789: LD_INT 69
31791: PUSH
31792: LD_INT 39
31794: PUSH
31795: LD_INT 34
31797: PUSH
31798: LD_INT 40
31800: PUSH
31801: LD_INT 48
31803: PUSH
31804: LD_INT 49
31806: PUSH
31807: LD_INT 50
31809: PUSH
31810: LD_INT 51
31812: PUSH
31813: LD_INT 52
31815: PUSH
31816: LD_INT 53
31818: PUSH
31819: LD_INT 54
31821: PUSH
31822: LD_INT 55
31824: PUSH
31825: LD_INT 56
31827: PUSH
31828: LD_INT 57
31830: PUSH
31831: LD_INT 58
31833: PUSH
31834: LD_INT 59
31836: PUSH
31837: LD_INT 60
31839: PUSH
31840: LD_INT 61
31842: PUSH
31843: LD_INT 62
31845: PUSH
31846: LD_INT 80
31848: PUSH
31849: LD_INT 82
31851: PUSH
31852: LD_INT 83
31854: PUSH
31855: LD_INT 84
31857: PUSH
31858: LD_INT 85
31860: PUSH
31861: LD_INT 86
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: ST_TO_ADDR
31917: GO 32380
31919: LD_INT 2
31921: DOUBLE
31922: EQUAL
31923: IFTRUE 31927
31925: GO 32149
31927: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
31928: LD_ADDR_VAR 0 4
31932: PUSH
31933: LD_INT 35
31935: PUSH
31936: LD_INT 45
31938: PUSH
31939: LD_INT 46
31941: PUSH
31942: LD_INT 47
31944: PUSH
31945: LD_INT 82
31947: PUSH
31948: LD_INT 83
31950: PUSH
31951: LD_INT 84
31953: PUSH
31954: LD_INT 85
31956: PUSH
31957: LD_INT 87
31959: PUSH
31960: LD_INT 70
31962: PUSH
31963: LD_INT 1
31965: PUSH
31966: LD_INT 11
31968: PUSH
31969: LD_INT 3
31971: PUSH
31972: LD_INT 4
31974: PUSH
31975: LD_INT 5
31977: PUSH
31978: LD_INT 6
31980: PUSH
31981: LD_INT 15
31983: PUSH
31984: LD_INT 18
31986: PUSH
31987: LD_INT 7
31989: PUSH
31990: LD_INT 17
31992: PUSH
31993: LD_INT 8
31995: PUSH
31996: LD_INT 20
31998: PUSH
31999: LD_INT 21
32001: PUSH
32002: LD_INT 22
32004: PUSH
32005: LD_INT 72
32007: PUSH
32008: LD_INT 26
32010: PUSH
32011: LD_INT 69
32013: PUSH
32014: LD_INT 39
32016: PUSH
32017: LD_INT 40
32019: PUSH
32020: LD_INT 41
32022: PUSH
32023: LD_INT 42
32025: PUSH
32026: LD_INT 43
32028: PUSH
32029: LD_INT 48
32031: PUSH
32032: LD_INT 49
32034: PUSH
32035: LD_INT 50
32037: PUSH
32038: LD_INT 51
32040: PUSH
32041: LD_INT 52
32043: PUSH
32044: LD_INT 53
32046: PUSH
32047: LD_INT 54
32049: PUSH
32050: LD_INT 55
32052: PUSH
32053: LD_INT 56
32055: PUSH
32056: LD_INT 60
32058: PUSH
32059: LD_INT 61
32061: PUSH
32062: LD_INT 62
32064: PUSH
32065: LD_INT 66
32067: PUSH
32068: LD_INT 67
32070: PUSH
32071: LD_INT 68
32073: PUSH
32074: LD_INT 81
32076: PUSH
32077: LD_INT 82
32079: PUSH
32080: LD_INT 83
32082: PUSH
32083: LD_INT 84
32085: PUSH
32086: LD_INT 85
32088: PUSH
32089: LD_INT 87
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: ST_TO_ADDR
32147: GO 32380
32149: LD_INT 3
32151: DOUBLE
32152: EQUAL
32153: IFTRUE 32157
32155: GO 32379
32157: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32158: LD_ADDR_VAR 0 4
32162: PUSH
32163: LD_INT 46
32165: PUSH
32166: LD_INT 47
32168: PUSH
32169: LD_INT 1
32171: PUSH
32172: LD_INT 2
32174: PUSH
32175: LD_INT 82
32177: PUSH
32178: LD_INT 83
32180: PUSH
32181: LD_INT 84
32183: PUSH
32184: LD_INT 85
32186: PUSH
32187: LD_INT 86
32189: PUSH
32190: LD_INT 11
32192: PUSH
32193: LD_INT 9
32195: PUSH
32196: LD_INT 20
32198: PUSH
32199: LD_INT 19
32201: PUSH
32202: LD_INT 21
32204: PUSH
32205: LD_INT 24
32207: PUSH
32208: LD_INT 22
32210: PUSH
32211: LD_INT 25
32213: PUSH
32214: LD_INT 28
32216: PUSH
32217: LD_INT 29
32219: PUSH
32220: LD_INT 30
32222: PUSH
32223: LD_INT 31
32225: PUSH
32226: LD_INT 37
32228: PUSH
32229: LD_INT 38
32231: PUSH
32232: LD_INT 32
32234: PUSH
32235: LD_INT 27
32237: PUSH
32238: LD_INT 33
32240: PUSH
32241: LD_INT 69
32243: PUSH
32244: LD_INT 39
32246: PUSH
32247: LD_INT 34
32249: PUSH
32250: LD_INT 40
32252: PUSH
32253: LD_INT 71
32255: PUSH
32256: LD_INT 23
32258: PUSH
32259: LD_INT 44
32261: PUSH
32262: LD_INT 48
32264: PUSH
32265: LD_INT 49
32267: PUSH
32268: LD_INT 50
32270: PUSH
32271: LD_INT 51
32273: PUSH
32274: LD_INT 52
32276: PUSH
32277: LD_INT 53
32279: PUSH
32280: LD_INT 54
32282: PUSH
32283: LD_INT 55
32285: PUSH
32286: LD_INT 56
32288: PUSH
32289: LD_INT 57
32291: PUSH
32292: LD_INT 58
32294: PUSH
32295: LD_INT 59
32297: PUSH
32298: LD_INT 63
32300: PUSH
32301: LD_INT 64
32303: PUSH
32304: LD_INT 65
32306: PUSH
32307: LD_INT 82
32309: PUSH
32310: LD_INT 83
32312: PUSH
32313: LD_INT 84
32315: PUSH
32316: LD_INT 85
32318: PUSH
32319: LD_INT 86
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: ST_TO_ADDR
32377: GO 32380
32379: POP
// if state > - 1 and state < 3 then
32380: LD_VAR 0 3
32384: PUSH
32385: LD_INT 1
32387: NEG
32388: GREATER
32389: PUSH
32390: LD_VAR 0 3
32394: PUSH
32395: LD_INT 3
32397: LESS
32398: AND
32399: IFFALSE 32456
// for i in result do
32401: LD_ADDR_VAR 0 5
32405: PUSH
32406: LD_VAR 0 4
32410: PUSH
32411: FOR_IN
32412: IFFALSE 32454
// if GetTech ( i , side ) <> state then
32414: LD_VAR 0 5
32418: PPUSH
32419: LD_VAR 0 1
32423: PPUSH
32424: CALL_OW 321
32428: PUSH
32429: LD_VAR 0 3
32433: NONEQUAL
32434: IFFALSE 32452
// result := result diff i ;
32436: LD_ADDR_VAR 0 4
32440: PUSH
32441: LD_VAR 0 4
32445: PUSH
32446: LD_VAR 0 5
32450: DIFF
32451: ST_TO_ADDR
32452: GO 32411
32454: POP
32455: POP
// end ;
32456: LD_VAR 0 4
32460: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32461: LD_INT 0
32463: PPUSH
32464: PPUSH
32465: PPUSH
// result := true ;
32466: LD_ADDR_VAR 0 3
32470: PUSH
32471: LD_INT 1
32473: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32474: LD_ADDR_VAR 0 5
32478: PUSH
32479: LD_VAR 0 2
32483: PPUSH
32484: CALL_OW 480
32488: ST_TO_ADDR
// if not tmp then
32489: LD_VAR 0 5
32493: NOT
32494: IFFALSE 32498
// exit ;
32496: GO 32547
// for i in tmp do
32498: LD_ADDR_VAR 0 4
32502: PUSH
32503: LD_VAR 0 5
32507: PUSH
32508: FOR_IN
32509: IFFALSE 32545
// if GetTech ( i , side ) <> state_researched then
32511: LD_VAR 0 4
32515: PPUSH
32516: LD_VAR 0 1
32520: PPUSH
32521: CALL_OW 321
32525: PUSH
32526: LD_INT 2
32528: NONEQUAL
32529: IFFALSE 32543
// begin result := false ;
32531: LD_ADDR_VAR 0 3
32535: PUSH
32536: LD_INT 0
32538: ST_TO_ADDR
// exit ;
32539: POP
32540: POP
32541: GO 32547
// end ;
32543: GO 32508
32545: POP
32546: POP
// end ;
32547: LD_VAR 0 3
32551: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32552: LD_INT 0
32554: PPUSH
32555: PPUSH
32556: PPUSH
32557: PPUSH
32558: PPUSH
32559: PPUSH
32560: PPUSH
32561: PPUSH
32562: PPUSH
32563: PPUSH
32564: PPUSH
32565: PPUSH
32566: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32567: LD_VAR 0 1
32571: NOT
32572: PUSH
32573: LD_VAR 0 1
32577: PPUSH
32578: CALL_OW 257
32582: PUSH
32583: LD_INT 9
32585: NONEQUAL
32586: OR
32587: IFFALSE 32591
// exit ;
32589: GO 33164
// side := GetSide ( unit ) ;
32591: LD_ADDR_VAR 0 9
32595: PUSH
32596: LD_VAR 0 1
32600: PPUSH
32601: CALL_OW 255
32605: ST_TO_ADDR
// tech_space := tech_spacanom ;
32606: LD_ADDR_VAR 0 12
32610: PUSH
32611: LD_INT 29
32613: ST_TO_ADDR
// tech_time := tech_taurad ;
32614: LD_ADDR_VAR 0 13
32618: PUSH
32619: LD_INT 28
32621: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32622: LD_ADDR_VAR 0 11
32626: PUSH
32627: LD_VAR 0 1
32631: PPUSH
32632: CALL_OW 310
32636: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32637: LD_VAR 0 11
32641: PPUSH
32642: CALL_OW 247
32646: PUSH
32647: LD_INT 2
32649: EQUAL
32650: IFFALSE 32654
// exit ;
32652: GO 33164
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32654: LD_ADDR_VAR 0 8
32658: PUSH
32659: LD_INT 81
32661: PUSH
32662: LD_VAR 0 9
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 3
32673: PUSH
32674: LD_INT 21
32676: PUSH
32677: LD_INT 3
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PPUSH
32692: CALL_OW 69
32696: ST_TO_ADDR
// if not tmp then
32697: LD_VAR 0 8
32701: NOT
32702: IFFALSE 32706
// exit ;
32704: GO 33164
// if in_unit then
32706: LD_VAR 0 11
32710: IFFALSE 32734
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32712: LD_ADDR_VAR 0 10
32716: PUSH
32717: LD_VAR 0 8
32721: PPUSH
32722: LD_VAR 0 11
32726: PPUSH
32727: CALL_OW 74
32731: ST_TO_ADDR
32732: GO 32754
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32734: LD_ADDR_VAR 0 10
32738: PUSH
32739: LD_VAR 0 8
32743: PPUSH
32744: LD_VAR 0 1
32748: PPUSH
32749: CALL_OW 74
32753: ST_TO_ADDR
// if not enemy then
32754: LD_VAR 0 10
32758: NOT
32759: IFFALSE 32763
// exit ;
32761: GO 33164
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32763: LD_VAR 0 11
32767: PUSH
32768: LD_VAR 0 11
32772: PPUSH
32773: LD_VAR 0 10
32777: PPUSH
32778: CALL_OW 296
32782: PUSH
32783: LD_INT 13
32785: GREATER
32786: AND
32787: PUSH
32788: LD_VAR 0 1
32792: PPUSH
32793: LD_VAR 0 10
32797: PPUSH
32798: CALL_OW 296
32802: PUSH
32803: LD_INT 12
32805: GREATER
32806: OR
32807: IFFALSE 32811
// exit ;
32809: GO 33164
// missile := [ 1 ] ;
32811: LD_ADDR_VAR 0 14
32815: PUSH
32816: LD_INT 1
32818: PUSH
32819: EMPTY
32820: LIST
32821: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32822: LD_VAR 0 9
32826: PPUSH
32827: LD_VAR 0 12
32831: PPUSH
32832: CALL_OW 325
32836: IFFALSE 32865
// missile := Insert ( missile , missile + 1 , 2 ) ;
32838: LD_ADDR_VAR 0 14
32842: PUSH
32843: LD_VAR 0 14
32847: PPUSH
32848: LD_VAR 0 14
32852: PUSH
32853: LD_INT 1
32855: PLUS
32856: PPUSH
32857: LD_INT 2
32859: PPUSH
32860: CALL_OW 2
32864: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32865: LD_VAR 0 9
32869: PPUSH
32870: LD_VAR 0 13
32874: PPUSH
32875: CALL_OW 325
32879: PUSH
32880: LD_VAR 0 10
32884: PPUSH
32885: CALL_OW 255
32889: PPUSH
32890: LD_VAR 0 13
32894: PPUSH
32895: CALL_OW 325
32899: NOT
32900: AND
32901: IFFALSE 32930
// missile := Insert ( missile , missile + 1 , 3 ) ;
32903: LD_ADDR_VAR 0 14
32907: PUSH
32908: LD_VAR 0 14
32912: PPUSH
32913: LD_VAR 0 14
32917: PUSH
32918: LD_INT 1
32920: PLUS
32921: PPUSH
32922: LD_INT 3
32924: PPUSH
32925: CALL_OW 2
32929: ST_TO_ADDR
// if missile < 2 then
32930: LD_VAR 0 14
32934: PUSH
32935: LD_INT 2
32937: LESS
32938: IFFALSE 32942
// exit ;
32940: GO 33164
// x := GetX ( enemy ) ;
32942: LD_ADDR_VAR 0 4
32946: PUSH
32947: LD_VAR 0 10
32951: PPUSH
32952: CALL_OW 250
32956: ST_TO_ADDR
// y := GetY ( enemy ) ;
32957: LD_ADDR_VAR 0 5
32961: PUSH
32962: LD_VAR 0 10
32966: PPUSH
32967: CALL_OW 251
32971: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32972: LD_ADDR_VAR 0 6
32976: PUSH
32977: LD_VAR 0 4
32981: PUSH
32982: LD_INT 1
32984: NEG
32985: PPUSH
32986: LD_INT 1
32988: PPUSH
32989: CALL_OW 12
32993: PLUS
32994: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32995: LD_ADDR_VAR 0 7
32999: PUSH
33000: LD_VAR 0 5
33004: PUSH
33005: LD_INT 1
33007: NEG
33008: PPUSH
33009: LD_INT 1
33011: PPUSH
33012: CALL_OW 12
33016: PLUS
33017: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33018: LD_VAR 0 6
33022: PPUSH
33023: LD_VAR 0 7
33027: PPUSH
33028: CALL_OW 488
33032: NOT
33033: IFFALSE 33055
// begin _x := x ;
33035: LD_ADDR_VAR 0 6
33039: PUSH
33040: LD_VAR 0 4
33044: ST_TO_ADDR
// _y := y ;
33045: LD_ADDR_VAR 0 7
33049: PUSH
33050: LD_VAR 0 5
33054: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33055: LD_ADDR_VAR 0 3
33059: PUSH
33060: LD_INT 1
33062: PPUSH
33063: LD_VAR 0 14
33067: PPUSH
33068: CALL_OW 12
33072: ST_TO_ADDR
// case i of 1 :
33073: LD_VAR 0 3
33077: PUSH
33078: LD_INT 1
33080: DOUBLE
33081: EQUAL
33082: IFTRUE 33086
33084: GO 33103
33086: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33087: LD_VAR 0 1
33091: PPUSH
33092: LD_VAR 0 10
33096: PPUSH
33097: CALL_OW 115
33101: GO 33164
33103: LD_INT 2
33105: DOUBLE
33106: EQUAL
33107: IFTRUE 33111
33109: GO 33133
33111: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33112: LD_VAR 0 1
33116: PPUSH
33117: LD_VAR 0 6
33121: PPUSH
33122: LD_VAR 0 7
33126: PPUSH
33127: CALL_OW 153
33131: GO 33164
33133: LD_INT 3
33135: DOUBLE
33136: EQUAL
33137: IFTRUE 33141
33139: GO 33163
33141: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33142: LD_VAR 0 1
33146: PPUSH
33147: LD_VAR 0 6
33151: PPUSH
33152: LD_VAR 0 7
33156: PPUSH
33157: CALL_OW 154
33161: GO 33164
33163: POP
// end ;
33164: LD_VAR 0 2
33168: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33169: LD_INT 0
33171: PPUSH
33172: PPUSH
33173: PPUSH
33174: PPUSH
33175: PPUSH
33176: PPUSH
// if not unit or not building then
33177: LD_VAR 0 1
33181: NOT
33182: PUSH
33183: LD_VAR 0 2
33187: NOT
33188: OR
33189: IFFALSE 33193
// exit ;
33191: GO 33351
// x := GetX ( building ) ;
33193: LD_ADDR_VAR 0 5
33197: PUSH
33198: LD_VAR 0 2
33202: PPUSH
33203: CALL_OW 250
33207: ST_TO_ADDR
// y := GetY ( building ) ;
33208: LD_ADDR_VAR 0 6
33212: PUSH
33213: LD_VAR 0 2
33217: PPUSH
33218: CALL_OW 251
33222: ST_TO_ADDR
// for i = 0 to 5 do
33223: LD_ADDR_VAR 0 4
33227: PUSH
33228: DOUBLE
33229: LD_INT 0
33231: DEC
33232: ST_TO_ADDR
33233: LD_INT 5
33235: PUSH
33236: FOR_TO
33237: IFFALSE 33349
// begin _x := ShiftX ( x , i , 3 ) ;
33239: LD_ADDR_VAR 0 7
33243: PUSH
33244: LD_VAR 0 5
33248: PPUSH
33249: LD_VAR 0 4
33253: PPUSH
33254: LD_INT 3
33256: PPUSH
33257: CALL_OW 272
33261: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33262: LD_ADDR_VAR 0 8
33266: PUSH
33267: LD_VAR 0 6
33271: PPUSH
33272: LD_VAR 0 4
33276: PPUSH
33277: LD_INT 3
33279: PPUSH
33280: CALL_OW 273
33284: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33285: LD_VAR 0 7
33289: PPUSH
33290: LD_VAR 0 8
33294: PPUSH
33295: CALL_OW 488
33299: NOT
33300: IFFALSE 33304
// continue ;
33302: GO 33236
// if HexInfo ( _x , _y ) = 0 then
33304: LD_VAR 0 7
33308: PPUSH
33309: LD_VAR 0 8
33313: PPUSH
33314: CALL_OW 428
33318: PUSH
33319: LD_INT 0
33321: EQUAL
33322: IFFALSE 33347
// begin ComMoveXY ( unit , _x , _y ) ;
33324: LD_VAR 0 1
33328: PPUSH
33329: LD_VAR 0 7
33333: PPUSH
33334: LD_VAR 0 8
33338: PPUSH
33339: CALL_OW 111
// exit ;
33343: POP
33344: POP
33345: GO 33351
// end ; end ;
33347: GO 33236
33349: POP
33350: POP
// end ;
33351: LD_VAR 0 3
33355: RET
// export function ScanBase ( side , base_area ) ; begin
33356: LD_INT 0
33358: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33359: LD_ADDR_VAR 0 3
33363: PUSH
33364: LD_VAR 0 2
33368: PPUSH
33369: LD_INT 81
33371: PUSH
33372: LD_VAR 0 1
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PPUSH
33381: CALL_OW 70
33385: ST_TO_ADDR
// end ;
33386: LD_VAR 0 3
33390: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33391: LD_INT 0
33393: PPUSH
33394: PPUSH
33395: PPUSH
33396: PPUSH
// result := false ;
33397: LD_ADDR_VAR 0 2
33401: PUSH
33402: LD_INT 0
33404: ST_TO_ADDR
// side := GetSide ( unit ) ;
33405: LD_ADDR_VAR 0 3
33409: PUSH
33410: LD_VAR 0 1
33414: PPUSH
33415: CALL_OW 255
33419: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33420: LD_ADDR_VAR 0 4
33424: PUSH
33425: LD_VAR 0 1
33429: PPUSH
33430: CALL_OW 248
33434: ST_TO_ADDR
// case nat of 1 :
33435: LD_VAR 0 4
33439: PUSH
33440: LD_INT 1
33442: DOUBLE
33443: EQUAL
33444: IFTRUE 33448
33446: GO 33459
33448: POP
// tech := tech_lassight ; 2 :
33449: LD_ADDR_VAR 0 5
33453: PUSH
33454: LD_INT 12
33456: ST_TO_ADDR
33457: GO 33498
33459: LD_INT 2
33461: DOUBLE
33462: EQUAL
33463: IFTRUE 33467
33465: GO 33478
33467: POP
// tech := tech_mortar ; 3 :
33468: LD_ADDR_VAR 0 5
33472: PUSH
33473: LD_INT 41
33475: ST_TO_ADDR
33476: GO 33498
33478: LD_INT 3
33480: DOUBLE
33481: EQUAL
33482: IFTRUE 33486
33484: GO 33497
33486: POP
// tech := tech_bazooka ; end ;
33487: LD_ADDR_VAR 0 5
33491: PUSH
33492: LD_INT 44
33494: ST_TO_ADDR
33495: GO 33498
33497: POP
// if Researched ( side , tech ) then
33498: LD_VAR 0 3
33502: PPUSH
33503: LD_VAR 0 5
33507: PPUSH
33508: CALL_OW 325
33512: IFFALSE 33539
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33514: LD_ADDR_VAR 0 2
33518: PUSH
33519: LD_INT 5
33521: PUSH
33522: LD_INT 8
33524: PUSH
33525: LD_INT 9
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: LIST
33532: PUSH
33533: LD_VAR 0 4
33537: ARRAY
33538: ST_TO_ADDR
// end ;
33539: LD_VAR 0 2
33543: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33544: LD_INT 0
33546: PPUSH
33547: PPUSH
33548: PPUSH
// if not mines then
33549: LD_VAR 0 2
33553: NOT
33554: IFFALSE 33558
// exit ;
33556: GO 33702
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33558: LD_ADDR_VAR 0 5
33562: PUSH
33563: LD_INT 81
33565: PUSH
33566: LD_VAR 0 1
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 3
33577: PUSH
33578: LD_INT 21
33580: PUSH
33581: LD_INT 3
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PPUSH
33596: CALL_OW 69
33600: ST_TO_ADDR
// for i in mines do
33601: LD_ADDR_VAR 0 4
33605: PUSH
33606: LD_VAR 0 2
33610: PUSH
33611: FOR_IN
33612: IFFALSE 33700
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33614: LD_VAR 0 4
33618: PUSH
33619: LD_INT 1
33621: ARRAY
33622: PPUSH
33623: LD_VAR 0 4
33627: PUSH
33628: LD_INT 2
33630: ARRAY
33631: PPUSH
33632: CALL_OW 458
33636: NOT
33637: IFFALSE 33641
// continue ;
33639: GO 33611
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33641: LD_VAR 0 4
33645: PUSH
33646: LD_INT 1
33648: ARRAY
33649: PPUSH
33650: LD_VAR 0 4
33654: PUSH
33655: LD_INT 2
33657: ARRAY
33658: PPUSH
33659: CALL_OW 428
33663: PUSH
33664: LD_VAR 0 5
33668: IN
33669: IFFALSE 33698
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33671: LD_VAR 0 4
33675: PUSH
33676: LD_INT 1
33678: ARRAY
33679: PPUSH
33680: LD_VAR 0 4
33684: PUSH
33685: LD_INT 2
33687: ARRAY
33688: PPUSH
33689: LD_VAR 0 1
33693: PPUSH
33694: CALL_OW 456
// end ;
33698: GO 33611
33700: POP
33701: POP
// end ;
33702: LD_VAR 0 3
33706: RET
// export function Count ( array ) ; var i ; begin
33707: LD_INT 0
33709: PPUSH
33710: PPUSH
// result := 0 ;
33711: LD_ADDR_VAR 0 2
33715: PUSH
33716: LD_INT 0
33718: ST_TO_ADDR
// for i in array do
33719: LD_ADDR_VAR 0 3
33723: PUSH
33724: LD_VAR 0 1
33728: PUSH
33729: FOR_IN
33730: IFFALSE 33754
// if i then
33732: LD_VAR 0 3
33736: IFFALSE 33752
// result := result + 1 ;
33738: LD_ADDR_VAR 0 2
33742: PUSH
33743: LD_VAR 0 2
33747: PUSH
33748: LD_INT 1
33750: PLUS
33751: ST_TO_ADDR
33752: GO 33729
33754: POP
33755: POP
// end ;
33756: LD_VAR 0 2
33760: RET
// export function IsEmpty ( building ) ; begin
33761: LD_INT 0
33763: PPUSH
// if not building then
33764: LD_VAR 0 1
33768: NOT
33769: IFFALSE 33773
// exit ;
33771: GO 33816
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33773: LD_ADDR_VAR 0 2
33777: PUSH
33778: LD_VAR 0 1
33782: PUSH
33783: LD_INT 22
33785: PUSH
33786: LD_VAR 0 1
33790: PPUSH
33791: CALL_OW 255
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 58
33802: PUSH
33803: EMPTY
33804: LIST
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PPUSH
33810: CALL_OW 69
33814: IN
33815: ST_TO_ADDR
// end ;
33816: LD_VAR 0 2
33820: RET
// export function IsNotFull ( building ) ; begin
33821: LD_INT 0
33823: PPUSH
// if not building then
33824: LD_VAR 0 1
33828: NOT
33829: IFFALSE 33833
// exit ;
33831: GO 33852
// result := UnitsInside ( building ) < 6 ;
33833: LD_ADDR_VAR 0 2
33837: PUSH
33838: LD_VAR 0 1
33842: PPUSH
33843: CALL_OW 313
33847: PUSH
33848: LD_INT 6
33850: LESS
33851: ST_TO_ADDR
// end ;
33852: LD_VAR 0 2
33856: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33857: LD_INT 0
33859: PPUSH
33860: PPUSH
33861: PPUSH
33862: PPUSH
// tmp := [ ] ;
33863: LD_ADDR_VAR 0 3
33867: PUSH
33868: EMPTY
33869: ST_TO_ADDR
// list := [ ] ;
33870: LD_ADDR_VAR 0 5
33874: PUSH
33875: EMPTY
33876: ST_TO_ADDR
// for i = 16 to 25 do
33877: LD_ADDR_VAR 0 4
33881: PUSH
33882: DOUBLE
33883: LD_INT 16
33885: DEC
33886: ST_TO_ADDR
33887: LD_INT 25
33889: PUSH
33890: FOR_TO
33891: IFFALSE 33964
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33893: LD_ADDR_VAR 0 3
33897: PUSH
33898: LD_VAR 0 3
33902: PUSH
33903: LD_INT 22
33905: PUSH
33906: LD_VAR 0 1
33910: PPUSH
33911: CALL_OW 255
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 91
33922: PUSH
33923: LD_VAR 0 1
33927: PUSH
33928: LD_INT 6
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 30
33938: PUSH
33939: LD_VAR 0 4
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: LIST
33952: PUSH
33953: EMPTY
33954: LIST
33955: PPUSH
33956: CALL_OW 69
33960: ADD
33961: ST_TO_ADDR
33962: GO 33890
33964: POP
33965: POP
// for i = 1 to tmp do
33966: LD_ADDR_VAR 0 4
33970: PUSH
33971: DOUBLE
33972: LD_INT 1
33974: DEC
33975: ST_TO_ADDR
33976: LD_VAR 0 3
33980: PUSH
33981: FOR_TO
33982: IFFALSE 34070
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33984: LD_ADDR_VAR 0 5
33988: PUSH
33989: LD_VAR 0 5
33993: PUSH
33994: LD_VAR 0 3
33998: PUSH
33999: LD_VAR 0 4
34003: ARRAY
34004: PPUSH
34005: CALL_OW 266
34009: PUSH
34010: LD_VAR 0 3
34014: PUSH
34015: LD_VAR 0 4
34019: ARRAY
34020: PPUSH
34021: CALL_OW 250
34025: PUSH
34026: LD_VAR 0 3
34030: PUSH
34031: LD_VAR 0 4
34035: ARRAY
34036: PPUSH
34037: CALL_OW 251
34041: PUSH
34042: LD_VAR 0 3
34046: PUSH
34047: LD_VAR 0 4
34051: ARRAY
34052: PPUSH
34053: CALL_OW 254
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: PUSH
34064: EMPTY
34065: LIST
34066: ADD
34067: ST_TO_ADDR
34068: GO 33981
34070: POP
34071: POP
// result := list ;
34072: LD_ADDR_VAR 0 2
34076: PUSH
34077: LD_VAR 0 5
34081: ST_TO_ADDR
// end ;
34082: LD_VAR 0 2
34086: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34087: LD_INT 0
34089: PPUSH
34090: PPUSH
34091: PPUSH
34092: PPUSH
34093: PPUSH
34094: PPUSH
34095: PPUSH
// if not factory then
34096: LD_VAR 0 1
34100: NOT
34101: IFFALSE 34105
// exit ;
34103: GO 34698
// if control = control_apeman then
34105: LD_VAR 0 4
34109: PUSH
34110: LD_INT 5
34112: EQUAL
34113: IFFALSE 34222
// begin tmp := UnitsInside ( factory ) ;
34115: LD_ADDR_VAR 0 8
34119: PUSH
34120: LD_VAR 0 1
34124: PPUSH
34125: CALL_OW 313
34129: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34130: LD_VAR 0 8
34134: PPUSH
34135: LD_INT 25
34137: PUSH
34138: LD_INT 12
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PPUSH
34145: CALL_OW 72
34149: NOT
34150: IFFALSE 34160
// control := control_manual ;
34152: LD_ADDR_VAR 0 4
34156: PUSH
34157: LD_INT 1
34159: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34160: LD_ADDR_VAR 0 8
34164: PUSH
34165: LD_VAR 0 1
34169: PPUSH
34170: CALL 33857 0 1
34174: ST_TO_ADDR
// if tmp then
34175: LD_VAR 0 8
34179: IFFALSE 34222
// begin for i in tmp do
34181: LD_ADDR_VAR 0 7
34185: PUSH
34186: LD_VAR 0 8
34190: PUSH
34191: FOR_IN
34192: IFFALSE 34220
// if i [ 1 ] = b_ext_radio then
34194: LD_VAR 0 7
34198: PUSH
34199: LD_INT 1
34201: ARRAY
34202: PUSH
34203: LD_INT 22
34205: EQUAL
34206: IFFALSE 34218
// begin control := control_remote ;
34208: LD_ADDR_VAR 0 4
34212: PUSH
34213: LD_INT 2
34215: ST_TO_ADDR
// break ;
34216: GO 34220
// end ;
34218: GO 34191
34220: POP
34221: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34222: LD_VAR 0 1
34226: PPUSH
34227: LD_VAR 0 2
34231: PPUSH
34232: LD_VAR 0 3
34236: PPUSH
34237: LD_VAR 0 4
34241: PPUSH
34242: LD_VAR 0 5
34246: PPUSH
34247: CALL_OW 448
34251: IFFALSE 34286
// begin result := [ chassis , engine , control , weapon ] ;
34253: LD_ADDR_VAR 0 6
34257: PUSH
34258: LD_VAR 0 2
34262: PUSH
34263: LD_VAR 0 3
34267: PUSH
34268: LD_VAR 0 4
34272: PUSH
34273: LD_VAR 0 5
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: ST_TO_ADDR
// exit ;
34284: GO 34698
// end ; _chassis := AvailableChassisList ( factory ) ;
34286: LD_ADDR_VAR 0 9
34290: PUSH
34291: LD_VAR 0 1
34295: PPUSH
34296: CALL_OW 475
34300: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34301: LD_ADDR_VAR 0 11
34305: PUSH
34306: LD_VAR 0 1
34310: PPUSH
34311: CALL_OW 476
34315: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34316: LD_ADDR_VAR 0 12
34320: PUSH
34321: LD_VAR 0 1
34325: PPUSH
34326: CALL_OW 477
34330: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34331: LD_ADDR_VAR 0 10
34335: PUSH
34336: LD_VAR 0 1
34340: PPUSH
34341: CALL_OW 478
34345: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34346: LD_VAR 0 9
34350: NOT
34351: PUSH
34352: LD_VAR 0 11
34356: NOT
34357: OR
34358: PUSH
34359: LD_VAR 0 12
34363: NOT
34364: OR
34365: PUSH
34366: LD_VAR 0 10
34370: NOT
34371: OR
34372: IFFALSE 34407
// begin result := [ chassis , engine , control , weapon ] ;
34374: LD_ADDR_VAR 0 6
34378: PUSH
34379: LD_VAR 0 2
34383: PUSH
34384: LD_VAR 0 3
34388: PUSH
34389: LD_VAR 0 4
34393: PUSH
34394: LD_VAR 0 5
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: ST_TO_ADDR
// exit ;
34405: GO 34698
// end ; if not chassis in _chassis then
34407: LD_VAR 0 2
34411: PUSH
34412: LD_VAR 0 9
34416: IN
34417: NOT
34418: IFFALSE 34444
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34420: LD_ADDR_VAR 0 2
34424: PUSH
34425: LD_VAR 0 9
34429: PUSH
34430: LD_INT 1
34432: PPUSH
34433: LD_VAR 0 9
34437: PPUSH
34438: CALL_OW 12
34442: ARRAY
34443: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34444: LD_VAR 0 2
34448: PPUSH
34449: LD_VAR 0 3
34453: PPUSH
34454: CALL 34703 0 2
34458: NOT
34459: IFFALSE 34518
// repeat engine := _engine [ 1 ] ;
34461: LD_ADDR_VAR 0 3
34465: PUSH
34466: LD_VAR 0 11
34470: PUSH
34471: LD_INT 1
34473: ARRAY
34474: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34475: LD_ADDR_VAR 0 11
34479: PUSH
34480: LD_VAR 0 11
34484: PPUSH
34485: LD_INT 1
34487: PPUSH
34488: CALL_OW 3
34492: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34493: LD_VAR 0 2
34497: PPUSH
34498: LD_VAR 0 3
34502: PPUSH
34503: CALL 34703 0 2
34507: PUSH
34508: LD_VAR 0 11
34512: PUSH
34513: EMPTY
34514: EQUAL
34515: OR
34516: IFFALSE 34461
// if not control in _control then
34518: LD_VAR 0 4
34522: PUSH
34523: LD_VAR 0 12
34527: IN
34528: NOT
34529: IFFALSE 34555
// control := _control [ rand ( 1 , _control ) ] ;
34531: LD_ADDR_VAR 0 4
34535: PUSH
34536: LD_VAR 0 12
34540: PUSH
34541: LD_INT 1
34543: PPUSH
34544: LD_VAR 0 12
34548: PPUSH
34549: CALL_OW 12
34553: ARRAY
34554: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34555: LD_VAR 0 2
34559: PPUSH
34560: LD_VAR 0 5
34564: PPUSH
34565: CALL 34923 0 2
34569: NOT
34570: IFFALSE 34629
// repeat weapon := _weapon [ 1 ] ;
34572: LD_ADDR_VAR 0 5
34576: PUSH
34577: LD_VAR 0 10
34581: PUSH
34582: LD_INT 1
34584: ARRAY
34585: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34586: LD_ADDR_VAR 0 10
34590: PUSH
34591: LD_VAR 0 10
34595: PPUSH
34596: LD_INT 1
34598: PPUSH
34599: CALL_OW 3
34603: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34604: LD_VAR 0 2
34608: PPUSH
34609: LD_VAR 0 5
34613: PPUSH
34614: CALL 34923 0 2
34618: PUSH
34619: LD_VAR 0 10
34623: PUSH
34624: EMPTY
34625: EQUAL
34626: OR
34627: IFFALSE 34572
// result := [ ] ;
34629: LD_ADDR_VAR 0 6
34633: PUSH
34634: EMPTY
34635: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34636: LD_VAR 0 1
34640: PPUSH
34641: LD_VAR 0 2
34645: PPUSH
34646: LD_VAR 0 3
34650: PPUSH
34651: LD_VAR 0 4
34655: PPUSH
34656: LD_VAR 0 5
34660: PPUSH
34661: CALL_OW 448
34665: IFFALSE 34698
// result := [ chassis , engine , control , weapon ] ;
34667: LD_ADDR_VAR 0 6
34671: PUSH
34672: LD_VAR 0 2
34676: PUSH
34677: LD_VAR 0 3
34681: PUSH
34682: LD_VAR 0 4
34686: PUSH
34687: LD_VAR 0 5
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: ST_TO_ADDR
// end ;
34698: LD_VAR 0 6
34702: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34703: LD_INT 0
34705: PPUSH
// if not chassis or not engine then
34706: LD_VAR 0 1
34710: NOT
34711: PUSH
34712: LD_VAR 0 2
34716: NOT
34717: OR
34718: IFFALSE 34722
// exit ;
34720: GO 34918
// case engine of engine_solar :
34722: LD_VAR 0 2
34726: PUSH
34727: LD_INT 2
34729: DOUBLE
34730: EQUAL
34731: IFTRUE 34735
34733: GO 34773
34735: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34736: LD_ADDR_VAR 0 3
34740: PUSH
34741: LD_INT 11
34743: PUSH
34744: LD_INT 12
34746: PUSH
34747: LD_INT 13
34749: PUSH
34750: LD_INT 14
34752: PUSH
34753: LD_INT 1
34755: PUSH
34756: LD_INT 2
34758: PUSH
34759: LD_INT 3
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: ST_TO_ADDR
34771: GO 34902
34773: LD_INT 1
34775: DOUBLE
34776: EQUAL
34777: IFTRUE 34781
34779: GO 34843
34781: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34782: LD_ADDR_VAR 0 3
34786: PUSH
34787: LD_INT 11
34789: PUSH
34790: LD_INT 12
34792: PUSH
34793: LD_INT 13
34795: PUSH
34796: LD_INT 14
34798: PUSH
34799: LD_INT 1
34801: PUSH
34802: LD_INT 2
34804: PUSH
34805: LD_INT 3
34807: PUSH
34808: LD_INT 4
34810: PUSH
34811: LD_INT 5
34813: PUSH
34814: LD_INT 21
34816: PUSH
34817: LD_INT 23
34819: PUSH
34820: LD_INT 22
34822: PUSH
34823: LD_INT 24
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: ST_TO_ADDR
34841: GO 34902
34843: LD_INT 3
34845: DOUBLE
34846: EQUAL
34847: IFTRUE 34851
34849: GO 34901
34851: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34852: LD_ADDR_VAR 0 3
34856: PUSH
34857: LD_INT 13
34859: PUSH
34860: LD_INT 14
34862: PUSH
34863: LD_INT 2
34865: PUSH
34866: LD_INT 3
34868: PUSH
34869: LD_INT 4
34871: PUSH
34872: LD_INT 5
34874: PUSH
34875: LD_INT 21
34877: PUSH
34878: LD_INT 22
34880: PUSH
34881: LD_INT 23
34883: PUSH
34884: LD_INT 24
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: ST_TO_ADDR
34899: GO 34902
34901: POP
// result := ( chassis in result ) ;
34902: LD_ADDR_VAR 0 3
34906: PUSH
34907: LD_VAR 0 1
34911: PUSH
34912: LD_VAR 0 3
34916: IN
34917: ST_TO_ADDR
// end ;
34918: LD_VAR 0 3
34922: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34923: LD_INT 0
34925: PPUSH
// if not chassis or not weapon then
34926: LD_VAR 0 1
34930: NOT
34931: PUSH
34932: LD_VAR 0 2
34936: NOT
34937: OR
34938: IFFALSE 34942
// exit ;
34940: GO 35968
// case weapon of us_machine_gun :
34942: LD_VAR 0 2
34946: PUSH
34947: LD_INT 2
34949: DOUBLE
34950: EQUAL
34951: IFTRUE 34955
34953: GO 34985
34955: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34956: LD_ADDR_VAR 0 3
34960: PUSH
34961: LD_INT 1
34963: PUSH
34964: LD_INT 2
34966: PUSH
34967: LD_INT 3
34969: PUSH
34970: LD_INT 4
34972: PUSH
34973: LD_INT 5
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: ST_TO_ADDR
34983: GO 35952
34985: LD_INT 3
34987: DOUBLE
34988: EQUAL
34989: IFTRUE 34993
34991: GO 35023
34993: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34994: LD_ADDR_VAR 0 3
34998: PUSH
34999: LD_INT 1
35001: PUSH
35002: LD_INT 2
35004: PUSH
35005: LD_INT 3
35007: PUSH
35008: LD_INT 4
35010: PUSH
35011: LD_INT 5
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: ST_TO_ADDR
35021: GO 35952
35023: LD_INT 11
35025: DOUBLE
35026: EQUAL
35027: IFTRUE 35031
35029: GO 35061
35031: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35032: LD_ADDR_VAR 0 3
35036: PUSH
35037: LD_INT 1
35039: PUSH
35040: LD_INT 2
35042: PUSH
35043: LD_INT 3
35045: PUSH
35046: LD_INT 4
35048: PUSH
35049: LD_INT 5
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: ST_TO_ADDR
35059: GO 35952
35061: LD_INT 4
35063: DOUBLE
35064: EQUAL
35065: IFTRUE 35069
35067: GO 35095
35069: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35070: LD_ADDR_VAR 0 3
35074: PUSH
35075: LD_INT 2
35077: PUSH
35078: LD_INT 3
35080: PUSH
35081: LD_INT 4
35083: PUSH
35084: LD_INT 5
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: ST_TO_ADDR
35093: GO 35952
35095: LD_INT 5
35097: DOUBLE
35098: EQUAL
35099: IFTRUE 35103
35101: GO 35129
35103: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35104: LD_ADDR_VAR 0 3
35108: PUSH
35109: LD_INT 2
35111: PUSH
35112: LD_INT 3
35114: PUSH
35115: LD_INT 4
35117: PUSH
35118: LD_INT 5
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: ST_TO_ADDR
35127: GO 35952
35129: LD_INT 9
35131: DOUBLE
35132: EQUAL
35133: IFTRUE 35137
35135: GO 35163
35137: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35138: LD_ADDR_VAR 0 3
35142: PUSH
35143: LD_INT 2
35145: PUSH
35146: LD_INT 3
35148: PUSH
35149: LD_INT 4
35151: PUSH
35152: LD_INT 5
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: ST_TO_ADDR
35161: GO 35952
35163: LD_INT 7
35165: DOUBLE
35166: EQUAL
35167: IFTRUE 35171
35169: GO 35197
35171: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35172: LD_ADDR_VAR 0 3
35176: PUSH
35177: LD_INT 2
35179: PUSH
35180: LD_INT 3
35182: PUSH
35183: LD_INT 4
35185: PUSH
35186: LD_INT 5
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: ST_TO_ADDR
35195: GO 35952
35197: LD_INT 12
35199: DOUBLE
35200: EQUAL
35201: IFTRUE 35205
35203: GO 35231
35205: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35206: LD_ADDR_VAR 0 3
35210: PUSH
35211: LD_INT 2
35213: PUSH
35214: LD_INT 3
35216: PUSH
35217: LD_INT 4
35219: PUSH
35220: LD_INT 5
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: ST_TO_ADDR
35229: GO 35952
35231: LD_INT 13
35233: DOUBLE
35234: EQUAL
35235: IFTRUE 35239
35237: GO 35265
35239: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35240: LD_ADDR_VAR 0 3
35244: PUSH
35245: LD_INT 2
35247: PUSH
35248: LD_INT 3
35250: PUSH
35251: LD_INT 4
35253: PUSH
35254: LD_INT 5
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: ST_TO_ADDR
35263: GO 35952
35265: LD_INT 14
35267: DOUBLE
35268: EQUAL
35269: IFTRUE 35273
35271: GO 35291
35273: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35274: LD_ADDR_VAR 0 3
35278: PUSH
35279: LD_INT 4
35281: PUSH
35282: LD_INT 5
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: ST_TO_ADDR
35289: GO 35952
35291: LD_INT 6
35293: DOUBLE
35294: EQUAL
35295: IFTRUE 35299
35297: GO 35317
35299: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35300: LD_ADDR_VAR 0 3
35304: PUSH
35305: LD_INT 4
35307: PUSH
35308: LD_INT 5
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: ST_TO_ADDR
35315: GO 35952
35317: LD_INT 10
35319: DOUBLE
35320: EQUAL
35321: IFTRUE 35325
35323: GO 35343
35325: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35326: LD_ADDR_VAR 0 3
35330: PUSH
35331: LD_INT 4
35333: PUSH
35334: LD_INT 5
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: ST_TO_ADDR
35341: GO 35952
35343: LD_INT 22
35345: DOUBLE
35346: EQUAL
35347: IFTRUE 35351
35349: GO 35377
35351: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35352: LD_ADDR_VAR 0 3
35356: PUSH
35357: LD_INT 11
35359: PUSH
35360: LD_INT 12
35362: PUSH
35363: LD_INT 13
35365: PUSH
35366: LD_INT 14
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: ST_TO_ADDR
35375: GO 35952
35377: LD_INT 23
35379: DOUBLE
35380: EQUAL
35381: IFTRUE 35385
35383: GO 35411
35385: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35386: LD_ADDR_VAR 0 3
35390: PUSH
35391: LD_INT 11
35393: PUSH
35394: LD_INT 12
35396: PUSH
35397: LD_INT 13
35399: PUSH
35400: LD_INT 14
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: ST_TO_ADDR
35409: GO 35952
35411: LD_INT 24
35413: DOUBLE
35414: EQUAL
35415: IFTRUE 35419
35417: GO 35445
35419: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35420: LD_ADDR_VAR 0 3
35424: PUSH
35425: LD_INT 11
35427: PUSH
35428: LD_INT 12
35430: PUSH
35431: LD_INT 13
35433: PUSH
35434: LD_INT 14
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: ST_TO_ADDR
35443: GO 35952
35445: LD_INT 30
35447: DOUBLE
35448: EQUAL
35449: IFTRUE 35453
35451: GO 35479
35453: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35454: LD_ADDR_VAR 0 3
35458: PUSH
35459: LD_INT 11
35461: PUSH
35462: LD_INT 12
35464: PUSH
35465: LD_INT 13
35467: PUSH
35468: LD_INT 14
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: ST_TO_ADDR
35477: GO 35952
35479: LD_INT 25
35481: DOUBLE
35482: EQUAL
35483: IFTRUE 35487
35485: GO 35505
35487: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35488: LD_ADDR_VAR 0 3
35492: PUSH
35493: LD_INT 13
35495: PUSH
35496: LD_INT 14
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: ST_TO_ADDR
35503: GO 35952
35505: LD_INT 27
35507: DOUBLE
35508: EQUAL
35509: IFTRUE 35513
35511: GO 35531
35513: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35514: LD_ADDR_VAR 0 3
35518: PUSH
35519: LD_INT 13
35521: PUSH
35522: LD_INT 14
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: ST_TO_ADDR
35529: GO 35952
35531: LD_INT 28
35533: DOUBLE
35534: EQUAL
35535: IFTRUE 35539
35537: GO 35557
35539: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35540: LD_ADDR_VAR 0 3
35544: PUSH
35545: LD_INT 13
35547: PUSH
35548: LD_INT 14
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: ST_TO_ADDR
35555: GO 35952
35557: LD_INT 29
35559: DOUBLE
35560: EQUAL
35561: IFTRUE 35565
35563: GO 35583
35565: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35566: LD_ADDR_VAR 0 3
35570: PUSH
35571: LD_INT 13
35573: PUSH
35574: LD_INT 14
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: ST_TO_ADDR
35581: GO 35952
35583: LD_INT 31
35585: DOUBLE
35586: EQUAL
35587: IFTRUE 35591
35589: GO 35609
35591: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35592: LD_ADDR_VAR 0 3
35596: PUSH
35597: LD_INT 13
35599: PUSH
35600: LD_INT 14
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: ST_TO_ADDR
35607: GO 35952
35609: LD_INT 26
35611: DOUBLE
35612: EQUAL
35613: IFTRUE 35617
35615: GO 35635
35617: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35618: LD_ADDR_VAR 0 3
35622: PUSH
35623: LD_INT 13
35625: PUSH
35626: LD_INT 14
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: ST_TO_ADDR
35633: GO 35952
35635: LD_INT 42
35637: DOUBLE
35638: EQUAL
35639: IFTRUE 35643
35641: GO 35669
35643: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35644: LD_ADDR_VAR 0 3
35648: PUSH
35649: LD_INT 21
35651: PUSH
35652: LD_INT 22
35654: PUSH
35655: LD_INT 23
35657: PUSH
35658: LD_INT 24
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: ST_TO_ADDR
35667: GO 35952
35669: LD_INT 43
35671: DOUBLE
35672: EQUAL
35673: IFTRUE 35677
35675: GO 35703
35677: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35678: LD_ADDR_VAR 0 3
35682: PUSH
35683: LD_INT 21
35685: PUSH
35686: LD_INT 22
35688: PUSH
35689: LD_INT 23
35691: PUSH
35692: LD_INT 24
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: ST_TO_ADDR
35701: GO 35952
35703: LD_INT 44
35705: DOUBLE
35706: EQUAL
35707: IFTRUE 35711
35709: GO 35737
35711: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35712: LD_ADDR_VAR 0 3
35716: PUSH
35717: LD_INT 21
35719: PUSH
35720: LD_INT 22
35722: PUSH
35723: LD_INT 23
35725: PUSH
35726: LD_INT 24
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: ST_TO_ADDR
35735: GO 35952
35737: LD_INT 45
35739: DOUBLE
35740: EQUAL
35741: IFTRUE 35745
35743: GO 35771
35745: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35746: LD_ADDR_VAR 0 3
35750: PUSH
35751: LD_INT 21
35753: PUSH
35754: LD_INT 22
35756: PUSH
35757: LD_INT 23
35759: PUSH
35760: LD_INT 24
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: ST_TO_ADDR
35769: GO 35952
35771: LD_INT 49
35773: DOUBLE
35774: EQUAL
35775: IFTRUE 35779
35777: GO 35805
35779: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35780: LD_ADDR_VAR 0 3
35784: PUSH
35785: LD_INT 21
35787: PUSH
35788: LD_INT 22
35790: PUSH
35791: LD_INT 23
35793: PUSH
35794: LD_INT 24
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: ST_TO_ADDR
35803: GO 35952
35805: LD_INT 51
35807: DOUBLE
35808: EQUAL
35809: IFTRUE 35813
35811: GO 35839
35813: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35814: LD_ADDR_VAR 0 3
35818: PUSH
35819: LD_INT 21
35821: PUSH
35822: LD_INT 22
35824: PUSH
35825: LD_INT 23
35827: PUSH
35828: LD_INT 24
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: ST_TO_ADDR
35837: GO 35952
35839: LD_INT 52
35841: DOUBLE
35842: EQUAL
35843: IFTRUE 35847
35845: GO 35873
35847: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35848: LD_ADDR_VAR 0 3
35852: PUSH
35853: LD_INT 21
35855: PUSH
35856: LD_INT 22
35858: PUSH
35859: LD_INT 23
35861: PUSH
35862: LD_INT 24
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: ST_TO_ADDR
35871: GO 35952
35873: LD_INT 53
35875: DOUBLE
35876: EQUAL
35877: IFTRUE 35881
35879: GO 35899
35881: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35882: LD_ADDR_VAR 0 3
35886: PUSH
35887: LD_INT 23
35889: PUSH
35890: LD_INT 24
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: ST_TO_ADDR
35897: GO 35952
35899: LD_INT 46
35901: DOUBLE
35902: EQUAL
35903: IFTRUE 35907
35905: GO 35925
35907: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35908: LD_ADDR_VAR 0 3
35912: PUSH
35913: LD_INT 23
35915: PUSH
35916: LD_INT 24
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: ST_TO_ADDR
35923: GO 35952
35925: LD_INT 47
35927: DOUBLE
35928: EQUAL
35929: IFTRUE 35933
35931: GO 35951
35933: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35934: LD_ADDR_VAR 0 3
35938: PUSH
35939: LD_INT 23
35941: PUSH
35942: LD_INT 24
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: ST_TO_ADDR
35949: GO 35952
35951: POP
// result := ( chassis in result ) ;
35952: LD_ADDR_VAR 0 3
35956: PUSH
35957: LD_VAR 0 1
35961: PUSH
35962: LD_VAR 0 3
35966: IN
35967: ST_TO_ADDR
// end ;
35968: LD_VAR 0 3
35972: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35973: LD_INT 0
35975: PPUSH
35976: PPUSH
35977: PPUSH
35978: PPUSH
35979: PPUSH
35980: PPUSH
35981: PPUSH
// result := array ;
35982: LD_ADDR_VAR 0 5
35986: PUSH
35987: LD_VAR 0 1
35991: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35992: LD_VAR 0 1
35996: NOT
35997: PUSH
35998: LD_VAR 0 2
36002: NOT
36003: OR
36004: PUSH
36005: LD_VAR 0 3
36009: NOT
36010: OR
36011: PUSH
36012: LD_VAR 0 2
36016: PUSH
36017: LD_VAR 0 1
36021: GREATER
36022: OR
36023: PUSH
36024: LD_VAR 0 3
36028: PUSH
36029: LD_VAR 0 1
36033: GREATER
36034: OR
36035: IFFALSE 36039
// exit ;
36037: GO 36335
// if direction then
36039: LD_VAR 0 4
36043: IFFALSE 36107
// begin d := 1 ;
36045: LD_ADDR_VAR 0 9
36049: PUSH
36050: LD_INT 1
36052: ST_TO_ADDR
// if i_from > i_to then
36053: LD_VAR 0 2
36057: PUSH
36058: LD_VAR 0 3
36062: GREATER
36063: IFFALSE 36089
// length := ( array - i_from ) + i_to else
36065: LD_ADDR_VAR 0 11
36069: PUSH
36070: LD_VAR 0 1
36074: PUSH
36075: LD_VAR 0 2
36079: MINUS
36080: PUSH
36081: LD_VAR 0 3
36085: PLUS
36086: ST_TO_ADDR
36087: GO 36105
// length := i_to - i_from ;
36089: LD_ADDR_VAR 0 11
36093: PUSH
36094: LD_VAR 0 3
36098: PUSH
36099: LD_VAR 0 2
36103: MINUS
36104: ST_TO_ADDR
// end else
36105: GO 36168
// begin d := - 1 ;
36107: LD_ADDR_VAR 0 9
36111: PUSH
36112: LD_INT 1
36114: NEG
36115: ST_TO_ADDR
// if i_from > i_to then
36116: LD_VAR 0 2
36120: PUSH
36121: LD_VAR 0 3
36125: GREATER
36126: IFFALSE 36146
// length := i_from - i_to else
36128: LD_ADDR_VAR 0 11
36132: PUSH
36133: LD_VAR 0 2
36137: PUSH
36138: LD_VAR 0 3
36142: MINUS
36143: ST_TO_ADDR
36144: GO 36168
// length := ( array - i_to ) + i_from ;
36146: LD_ADDR_VAR 0 11
36150: PUSH
36151: LD_VAR 0 1
36155: PUSH
36156: LD_VAR 0 3
36160: MINUS
36161: PUSH
36162: LD_VAR 0 2
36166: PLUS
36167: ST_TO_ADDR
// end ; if not length then
36168: LD_VAR 0 11
36172: NOT
36173: IFFALSE 36177
// exit ;
36175: GO 36335
// tmp := array ;
36177: LD_ADDR_VAR 0 10
36181: PUSH
36182: LD_VAR 0 1
36186: ST_TO_ADDR
// for i = 1 to length do
36187: LD_ADDR_VAR 0 6
36191: PUSH
36192: DOUBLE
36193: LD_INT 1
36195: DEC
36196: ST_TO_ADDR
36197: LD_VAR 0 11
36201: PUSH
36202: FOR_TO
36203: IFFALSE 36323
// begin for j = 1 to array do
36205: LD_ADDR_VAR 0 7
36209: PUSH
36210: DOUBLE
36211: LD_INT 1
36213: DEC
36214: ST_TO_ADDR
36215: LD_VAR 0 1
36219: PUSH
36220: FOR_TO
36221: IFFALSE 36309
// begin k := j + d ;
36223: LD_ADDR_VAR 0 8
36227: PUSH
36228: LD_VAR 0 7
36232: PUSH
36233: LD_VAR 0 9
36237: PLUS
36238: ST_TO_ADDR
// if k > array then
36239: LD_VAR 0 8
36243: PUSH
36244: LD_VAR 0 1
36248: GREATER
36249: IFFALSE 36259
// k := 1 ;
36251: LD_ADDR_VAR 0 8
36255: PUSH
36256: LD_INT 1
36258: ST_TO_ADDR
// if not k then
36259: LD_VAR 0 8
36263: NOT
36264: IFFALSE 36276
// k := array ;
36266: LD_ADDR_VAR 0 8
36270: PUSH
36271: LD_VAR 0 1
36275: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36276: LD_ADDR_VAR 0 10
36280: PUSH
36281: LD_VAR 0 10
36285: PPUSH
36286: LD_VAR 0 8
36290: PPUSH
36291: LD_VAR 0 1
36295: PUSH
36296: LD_VAR 0 7
36300: ARRAY
36301: PPUSH
36302: CALL_OW 1
36306: ST_TO_ADDR
// end ;
36307: GO 36220
36309: POP
36310: POP
// array := tmp ;
36311: LD_ADDR_VAR 0 1
36315: PUSH
36316: LD_VAR 0 10
36320: ST_TO_ADDR
// end ;
36321: GO 36202
36323: POP
36324: POP
// result := array ;
36325: LD_ADDR_VAR 0 5
36329: PUSH
36330: LD_VAR 0 1
36334: ST_TO_ADDR
// end ;
36335: LD_VAR 0 5
36339: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36340: LD_INT 0
36342: PPUSH
36343: PPUSH
// result := 0 ;
36344: LD_ADDR_VAR 0 3
36348: PUSH
36349: LD_INT 0
36351: ST_TO_ADDR
// if not array or not value in array then
36352: LD_VAR 0 1
36356: NOT
36357: PUSH
36358: LD_VAR 0 2
36362: PUSH
36363: LD_VAR 0 1
36367: IN
36368: NOT
36369: OR
36370: IFFALSE 36374
// exit ;
36372: GO 36428
// for i = 1 to array do
36374: LD_ADDR_VAR 0 4
36378: PUSH
36379: DOUBLE
36380: LD_INT 1
36382: DEC
36383: ST_TO_ADDR
36384: LD_VAR 0 1
36388: PUSH
36389: FOR_TO
36390: IFFALSE 36426
// if value = array [ i ] then
36392: LD_VAR 0 2
36396: PUSH
36397: LD_VAR 0 1
36401: PUSH
36402: LD_VAR 0 4
36406: ARRAY
36407: EQUAL
36408: IFFALSE 36424
// begin result := i ;
36410: LD_ADDR_VAR 0 3
36414: PUSH
36415: LD_VAR 0 4
36419: ST_TO_ADDR
// exit ;
36420: POP
36421: POP
36422: GO 36428
// end ;
36424: GO 36389
36426: POP
36427: POP
// end ;
36428: LD_VAR 0 3
36432: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36433: LD_INT 0
36435: PPUSH
// vc_chassis := chassis ;
36436: LD_ADDR_OWVAR 37
36440: PUSH
36441: LD_VAR 0 1
36445: ST_TO_ADDR
// vc_engine := engine ;
36446: LD_ADDR_OWVAR 39
36450: PUSH
36451: LD_VAR 0 2
36455: ST_TO_ADDR
// vc_control := control ;
36456: LD_ADDR_OWVAR 38
36460: PUSH
36461: LD_VAR 0 3
36465: ST_TO_ADDR
// vc_weapon := weapon ;
36466: LD_ADDR_OWVAR 40
36470: PUSH
36471: LD_VAR 0 4
36475: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36476: LD_ADDR_OWVAR 41
36480: PUSH
36481: LD_VAR 0 5
36485: ST_TO_ADDR
// end ;
36486: LD_VAR 0 6
36490: RET
// export function WantPlant ( unit ) ; var task ; begin
36491: LD_INT 0
36493: PPUSH
36494: PPUSH
// result := false ;
36495: LD_ADDR_VAR 0 2
36499: PUSH
36500: LD_INT 0
36502: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36503: LD_ADDR_VAR 0 3
36507: PUSH
36508: LD_VAR 0 1
36512: PPUSH
36513: CALL_OW 437
36517: ST_TO_ADDR
// if task then
36518: LD_VAR 0 3
36522: IFFALSE 36550
// if task [ 1 ] [ 1 ] = p then
36524: LD_VAR 0 3
36528: PUSH
36529: LD_INT 1
36531: ARRAY
36532: PUSH
36533: LD_INT 1
36535: ARRAY
36536: PUSH
36537: LD_STRING p
36539: EQUAL
36540: IFFALSE 36550
// result := true ;
36542: LD_ADDR_VAR 0 2
36546: PUSH
36547: LD_INT 1
36549: ST_TO_ADDR
// end ;
36550: LD_VAR 0 2
36554: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36555: LD_INT 0
36557: PPUSH
36558: PPUSH
36559: PPUSH
36560: PPUSH
// if pos < 1 then
36561: LD_VAR 0 2
36565: PUSH
36566: LD_INT 1
36568: LESS
36569: IFFALSE 36573
// exit ;
36571: GO 36876
// if pos = 1 then
36573: LD_VAR 0 2
36577: PUSH
36578: LD_INT 1
36580: EQUAL
36581: IFFALSE 36614
// result := Replace ( arr , pos [ 1 ] , value ) else
36583: LD_ADDR_VAR 0 4
36587: PUSH
36588: LD_VAR 0 1
36592: PPUSH
36593: LD_VAR 0 2
36597: PUSH
36598: LD_INT 1
36600: ARRAY
36601: PPUSH
36602: LD_VAR 0 3
36606: PPUSH
36607: CALL_OW 1
36611: ST_TO_ADDR
36612: GO 36876
// begin tmp := arr ;
36614: LD_ADDR_VAR 0 6
36618: PUSH
36619: LD_VAR 0 1
36623: ST_TO_ADDR
// s_arr := [ tmp ] ;
36624: LD_ADDR_VAR 0 7
36628: PUSH
36629: LD_VAR 0 6
36633: PUSH
36634: EMPTY
36635: LIST
36636: ST_TO_ADDR
// for i = 1 to pos - 1 do
36637: LD_ADDR_VAR 0 5
36641: PUSH
36642: DOUBLE
36643: LD_INT 1
36645: DEC
36646: ST_TO_ADDR
36647: LD_VAR 0 2
36651: PUSH
36652: LD_INT 1
36654: MINUS
36655: PUSH
36656: FOR_TO
36657: IFFALSE 36702
// begin tmp := tmp [ pos [ i ] ] ;
36659: LD_ADDR_VAR 0 6
36663: PUSH
36664: LD_VAR 0 6
36668: PUSH
36669: LD_VAR 0 2
36673: PUSH
36674: LD_VAR 0 5
36678: ARRAY
36679: ARRAY
36680: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36681: LD_ADDR_VAR 0 7
36685: PUSH
36686: LD_VAR 0 7
36690: PUSH
36691: LD_VAR 0 6
36695: PUSH
36696: EMPTY
36697: LIST
36698: ADD
36699: ST_TO_ADDR
// end ;
36700: GO 36656
36702: POP
36703: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36704: LD_ADDR_VAR 0 6
36708: PUSH
36709: LD_VAR 0 6
36713: PPUSH
36714: LD_VAR 0 2
36718: PUSH
36719: LD_VAR 0 2
36723: ARRAY
36724: PPUSH
36725: LD_VAR 0 3
36729: PPUSH
36730: CALL_OW 1
36734: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36735: LD_ADDR_VAR 0 7
36739: PUSH
36740: LD_VAR 0 7
36744: PPUSH
36745: LD_VAR 0 7
36749: PPUSH
36750: LD_VAR 0 6
36754: PPUSH
36755: CALL_OW 1
36759: ST_TO_ADDR
// for i = s_arr downto 2 do
36760: LD_ADDR_VAR 0 5
36764: PUSH
36765: DOUBLE
36766: LD_VAR 0 7
36770: INC
36771: ST_TO_ADDR
36772: LD_INT 2
36774: PUSH
36775: FOR_DOWNTO
36776: IFFALSE 36860
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36778: LD_ADDR_VAR 0 6
36782: PUSH
36783: LD_VAR 0 7
36787: PUSH
36788: LD_VAR 0 5
36792: PUSH
36793: LD_INT 1
36795: MINUS
36796: ARRAY
36797: PPUSH
36798: LD_VAR 0 2
36802: PUSH
36803: LD_VAR 0 5
36807: PUSH
36808: LD_INT 1
36810: MINUS
36811: ARRAY
36812: PPUSH
36813: LD_VAR 0 7
36817: PUSH
36818: LD_VAR 0 5
36822: ARRAY
36823: PPUSH
36824: CALL_OW 1
36828: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36829: LD_ADDR_VAR 0 7
36833: PUSH
36834: LD_VAR 0 7
36838: PPUSH
36839: LD_VAR 0 5
36843: PUSH
36844: LD_INT 1
36846: MINUS
36847: PPUSH
36848: LD_VAR 0 6
36852: PPUSH
36853: CALL_OW 1
36857: ST_TO_ADDR
// end ;
36858: GO 36775
36860: POP
36861: POP
// result := s_arr [ 1 ] ;
36862: LD_ADDR_VAR 0 4
36866: PUSH
36867: LD_VAR 0 7
36871: PUSH
36872: LD_INT 1
36874: ARRAY
36875: ST_TO_ADDR
// end ; end ;
36876: LD_VAR 0 4
36880: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36881: LD_INT 0
36883: PPUSH
36884: PPUSH
// if not list then
36885: LD_VAR 0 1
36889: NOT
36890: IFFALSE 36894
// exit ;
36892: GO 36985
// i := list [ pos1 ] ;
36894: LD_ADDR_VAR 0 5
36898: PUSH
36899: LD_VAR 0 1
36903: PUSH
36904: LD_VAR 0 2
36908: ARRAY
36909: ST_TO_ADDR
// if not i then
36910: LD_VAR 0 5
36914: NOT
36915: IFFALSE 36919
// exit ;
36917: GO 36985
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36919: LD_ADDR_VAR 0 1
36923: PUSH
36924: LD_VAR 0 1
36928: PPUSH
36929: LD_VAR 0 2
36933: PPUSH
36934: LD_VAR 0 1
36938: PUSH
36939: LD_VAR 0 3
36943: ARRAY
36944: PPUSH
36945: CALL_OW 1
36949: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36950: LD_ADDR_VAR 0 1
36954: PUSH
36955: LD_VAR 0 1
36959: PPUSH
36960: LD_VAR 0 3
36964: PPUSH
36965: LD_VAR 0 5
36969: PPUSH
36970: CALL_OW 1
36974: ST_TO_ADDR
// result := list ;
36975: LD_ADDR_VAR 0 4
36979: PUSH
36980: LD_VAR 0 1
36984: ST_TO_ADDR
// end ;
36985: LD_VAR 0 4
36989: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36990: LD_INT 0
36992: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36993: LD_ADDR_VAR 0 5
36997: PUSH
36998: LD_VAR 0 1
37002: PPUSH
37003: CALL_OW 250
37007: PPUSH
37008: LD_VAR 0 1
37012: PPUSH
37013: CALL_OW 251
37017: PPUSH
37018: LD_VAR 0 2
37022: PPUSH
37023: LD_VAR 0 3
37027: PPUSH
37028: LD_VAR 0 4
37032: PPUSH
37033: CALL 37043 0 5
37037: ST_TO_ADDR
// end ;
37038: LD_VAR 0 5
37042: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37043: LD_INT 0
37045: PPUSH
37046: PPUSH
37047: PPUSH
37048: PPUSH
// if not list then
37049: LD_VAR 0 3
37053: NOT
37054: IFFALSE 37058
// exit ;
37056: GO 37446
// result := [ ] ;
37058: LD_ADDR_VAR 0 6
37062: PUSH
37063: EMPTY
37064: ST_TO_ADDR
// for i in list do
37065: LD_ADDR_VAR 0 7
37069: PUSH
37070: LD_VAR 0 3
37074: PUSH
37075: FOR_IN
37076: IFFALSE 37278
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37078: LD_ADDR_VAR 0 9
37082: PUSH
37083: LD_VAR 0 7
37087: PPUSH
37088: LD_VAR 0 1
37092: PPUSH
37093: LD_VAR 0 2
37097: PPUSH
37098: CALL_OW 297
37102: ST_TO_ADDR
// if not result then
37103: LD_VAR 0 6
37107: NOT
37108: IFFALSE 37134
// result := [ [ i , tmp ] ] else
37110: LD_ADDR_VAR 0 6
37114: PUSH
37115: LD_VAR 0 7
37119: PUSH
37120: LD_VAR 0 9
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: EMPTY
37130: LIST
37131: ST_TO_ADDR
37132: GO 37276
// begin if result [ result ] [ 2 ] < tmp then
37134: LD_VAR 0 6
37138: PUSH
37139: LD_VAR 0 6
37143: ARRAY
37144: PUSH
37145: LD_INT 2
37147: ARRAY
37148: PUSH
37149: LD_VAR 0 9
37153: LESS
37154: IFFALSE 37196
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37156: LD_ADDR_VAR 0 6
37160: PUSH
37161: LD_VAR 0 6
37165: PPUSH
37166: LD_VAR 0 6
37170: PUSH
37171: LD_INT 1
37173: PLUS
37174: PPUSH
37175: LD_VAR 0 7
37179: PUSH
37180: LD_VAR 0 9
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PPUSH
37189: CALL_OW 2
37193: ST_TO_ADDR
37194: GO 37276
// for j = 1 to result do
37196: LD_ADDR_VAR 0 8
37200: PUSH
37201: DOUBLE
37202: LD_INT 1
37204: DEC
37205: ST_TO_ADDR
37206: LD_VAR 0 6
37210: PUSH
37211: FOR_TO
37212: IFFALSE 37274
// begin if tmp < result [ j ] [ 2 ] then
37214: LD_VAR 0 9
37218: PUSH
37219: LD_VAR 0 6
37223: PUSH
37224: LD_VAR 0 8
37228: ARRAY
37229: PUSH
37230: LD_INT 2
37232: ARRAY
37233: LESS
37234: IFFALSE 37272
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37236: LD_ADDR_VAR 0 6
37240: PUSH
37241: LD_VAR 0 6
37245: PPUSH
37246: LD_VAR 0 8
37250: PPUSH
37251: LD_VAR 0 7
37255: PUSH
37256: LD_VAR 0 9
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PPUSH
37265: CALL_OW 2
37269: ST_TO_ADDR
// break ;
37270: GO 37274
// end ; end ;
37272: GO 37211
37274: POP
37275: POP
// end ; end ;
37276: GO 37075
37278: POP
37279: POP
// if result and not asc then
37280: LD_VAR 0 6
37284: PUSH
37285: LD_VAR 0 4
37289: NOT
37290: AND
37291: IFFALSE 37366
// begin tmp := result ;
37293: LD_ADDR_VAR 0 9
37297: PUSH
37298: LD_VAR 0 6
37302: ST_TO_ADDR
// for i = tmp downto 1 do
37303: LD_ADDR_VAR 0 7
37307: PUSH
37308: DOUBLE
37309: LD_VAR 0 9
37313: INC
37314: ST_TO_ADDR
37315: LD_INT 1
37317: PUSH
37318: FOR_DOWNTO
37319: IFFALSE 37364
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37321: LD_ADDR_VAR 0 6
37325: PUSH
37326: LD_VAR 0 6
37330: PPUSH
37331: LD_VAR 0 9
37335: PUSH
37336: LD_VAR 0 7
37340: MINUS
37341: PUSH
37342: LD_INT 1
37344: PLUS
37345: PPUSH
37346: LD_VAR 0 9
37350: PUSH
37351: LD_VAR 0 7
37355: ARRAY
37356: PPUSH
37357: CALL_OW 1
37361: ST_TO_ADDR
37362: GO 37318
37364: POP
37365: POP
// end ; tmp := [ ] ;
37366: LD_ADDR_VAR 0 9
37370: PUSH
37371: EMPTY
37372: ST_TO_ADDR
// if mode then
37373: LD_VAR 0 5
37377: IFFALSE 37446
// begin for i = 1 to result do
37379: LD_ADDR_VAR 0 7
37383: PUSH
37384: DOUBLE
37385: LD_INT 1
37387: DEC
37388: ST_TO_ADDR
37389: LD_VAR 0 6
37393: PUSH
37394: FOR_TO
37395: IFFALSE 37434
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37397: LD_ADDR_VAR 0 9
37401: PUSH
37402: LD_VAR 0 9
37406: PPUSH
37407: LD_VAR 0 7
37411: PPUSH
37412: LD_VAR 0 6
37416: PUSH
37417: LD_VAR 0 7
37421: ARRAY
37422: PUSH
37423: LD_INT 1
37425: ARRAY
37426: PPUSH
37427: CALL_OW 1
37431: ST_TO_ADDR
37432: GO 37394
37434: POP
37435: POP
// result := tmp ;
37436: LD_ADDR_VAR 0 6
37440: PUSH
37441: LD_VAR 0 9
37445: ST_TO_ADDR
// end ; end ;
37446: LD_VAR 0 6
37450: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37451: LD_INT 0
37453: PPUSH
37454: PPUSH
37455: PPUSH
37456: PPUSH
37457: PPUSH
37458: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37459: LD_ADDR_VAR 0 5
37463: PUSH
37464: LD_INT 0
37466: PUSH
37467: LD_INT 0
37469: PUSH
37470: LD_INT 0
37472: PUSH
37473: EMPTY
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: ST_TO_ADDR
// if not x or not y then
37481: LD_VAR 0 2
37485: NOT
37486: PUSH
37487: LD_VAR 0 3
37491: NOT
37492: OR
37493: IFFALSE 37497
// exit ;
37495: GO 39143
// if not range then
37497: LD_VAR 0 4
37501: NOT
37502: IFFALSE 37512
// range := 10 ;
37504: LD_ADDR_VAR 0 4
37508: PUSH
37509: LD_INT 10
37511: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37512: LD_ADDR_VAR 0 8
37516: PUSH
37517: LD_INT 81
37519: PUSH
37520: LD_VAR 0 1
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 92
37531: PUSH
37532: LD_VAR 0 2
37536: PUSH
37537: LD_VAR 0 3
37541: PUSH
37542: LD_VAR 0 4
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 3
37555: PUSH
37556: LD_INT 21
37558: PUSH
37559: LD_INT 3
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: LIST
37574: PPUSH
37575: CALL_OW 69
37579: ST_TO_ADDR
// if not tmp then
37580: LD_VAR 0 8
37584: NOT
37585: IFFALSE 37589
// exit ;
37587: GO 39143
// for i in tmp do
37589: LD_ADDR_VAR 0 6
37593: PUSH
37594: LD_VAR 0 8
37598: PUSH
37599: FOR_IN
37600: IFFALSE 39118
// begin points := [ 0 , 0 , 0 ] ;
37602: LD_ADDR_VAR 0 9
37606: PUSH
37607: LD_INT 0
37609: PUSH
37610: LD_INT 0
37612: PUSH
37613: LD_INT 0
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: LIST
37620: ST_TO_ADDR
// bpoints := 1 ;
37621: LD_ADDR_VAR 0 10
37625: PUSH
37626: LD_INT 1
37628: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37629: LD_VAR 0 6
37633: PPUSH
37634: CALL_OW 247
37638: PUSH
37639: LD_INT 1
37641: DOUBLE
37642: EQUAL
37643: IFTRUE 37647
37645: GO 38225
37647: POP
// begin if GetClass ( i ) = 1 then
37648: LD_VAR 0 6
37652: PPUSH
37653: CALL_OW 257
37657: PUSH
37658: LD_INT 1
37660: EQUAL
37661: IFFALSE 37682
// points := [ 10 , 5 , 3 ] ;
37663: LD_ADDR_VAR 0 9
37667: PUSH
37668: LD_INT 10
37670: PUSH
37671: LD_INT 5
37673: PUSH
37674: LD_INT 3
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: LIST
37681: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37682: LD_VAR 0 6
37686: PPUSH
37687: CALL_OW 257
37691: PUSH
37692: LD_INT 2
37694: PUSH
37695: LD_INT 3
37697: PUSH
37698: LD_INT 4
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: LIST
37705: IN
37706: IFFALSE 37727
// points := [ 3 , 2 , 1 ] ;
37708: LD_ADDR_VAR 0 9
37712: PUSH
37713: LD_INT 3
37715: PUSH
37716: LD_INT 2
37718: PUSH
37719: LD_INT 1
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: LIST
37726: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37727: LD_VAR 0 6
37731: PPUSH
37732: CALL_OW 257
37736: PUSH
37737: LD_INT 5
37739: EQUAL
37740: IFFALSE 37761
// points := [ 130 , 5 , 2 ] ;
37742: LD_ADDR_VAR 0 9
37746: PUSH
37747: LD_INT 130
37749: PUSH
37750: LD_INT 5
37752: PUSH
37753: LD_INT 2
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: LIST
37760: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37761: LD_VAR 0 6
37765: PPUSH
37766: CALL_OW 257
37770: PUSH
37771: LD_INT 8
37773: EQUAL
37774: IFFALSE 37795
// points := [ 35 , 35 , 30 ] ;
37776: LD_ADDR_VAR 0 9
37780: PUSH
37781: LD_INT 35
37783: PUSH
37784: LD_INT 35
37786: PUSH
37787: LD_INT 30
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: LIST
37794: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37795: LD_VAR 0 6
37799: PPUSH
37800: CALL_OW 257
37804: PUSH
37805: LD_INT 9
37807: EQUAL
37808: IFFALSE 37829
// points := [ 20 , 55 , 40 ] ;
37810: LD_ADDR_VAR 0 9
37814: PUSH
37815: LD_INT 20
37817: PUSH
37818: LD_INT 55
37820: PUSH
37821: LD_INT 40
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: LIST
37828: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37829: LD_VAR 0 6
37833: PPUSH
37834: CALL_OW 257
37838: PUSH
37839: LD_INT 12
37841: PUSH
37842: LD_INT 16
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: IN
37849: IFFALSE 37870
// points := [ 5 , 3 , 2 ] ;
37851: LD_ADDR_VAR 0 9
37855: PUSH
37856: LD_INT 5
37858: PUSH
37859: LD_INT 3
37861: PUSH
37862: LD_INT 2
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: LIST
37869: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37870: LD_VAR 0 6
37874: PPUSH
37875: CALL_OW 257
37879: PUSH
37880: LD_INT 17
37882: EQUAL
37883: IFFALSE 37904
// points := [ 100 , 50 , 75 ] ;
37885: LD_ADDR_VAR 0 9
37889: PUSH
37890: LD_INT 100
37892: PUSH
37893: LD_INT 50
37895: PUSH
37896: LD_INT 75
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: LIST
37903: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37904: LD_VAR 0 6
37908: PPUSH
37909: CALL_OW 257
37913: PUSH
37914: LD_INT 15
37916: EQUAL
37917: IFFALSE 37938
// points := [ 10 , 5 , 3 ] ;
37919: LD_ADDR_VAR 0 9
37923: PUSH
37924: LD_INT 10
37926: PUSH
37927: LD_INT 5
37929: PUSH
37930: LD_INT 3
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: LIST
37937: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37938: LD_VAR 0 6
37942: PPUSH
37943: CALL_OW 257
37947: PUSH
37948: LD_INT 14
37950: EQUAL
37951: IFFALSE 37972
// points := [ 10 , 0 , 0 ] ;
37953: LD_ADDR_VAR 0 9
37957: PUSH
37958: LD_INT 10
37960: PUSH
37961: LD_INT 0
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: LIST
37971: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37972: LD_VAR 0 6
37976: PPUSH
37977: CALL_OW 257
37981: PUSH
37982: LD_INT 11
37984: EQUAL
37985: IFFALSE 38006
// points := [ 30 , 10 , 5 ] ;
37987: LD_ADDR_VAR 0 9
37991: PUSH
37992: LD_INT 30
37994: PUSH
37995: LD_INT 10
37997: PUSH
37998: LD_INT 5
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: LIST
38005: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38006: LD_VAR 0 1
38010: PPUSH
38011: LD_INT 5
38013: PPUSH
38014: CALL_OW 321
38018: PUSH
38019: LD_INT 2
38021: EQUAL
38022: IFFALSE 38039
// bpoints := bpoints * 1.8 ;
38024: LD_ADDR_VAR 0 10
38028: PUSH
38029: LD_VAR 0 10
38033: PUSH
38034: LD_REAL  1.80000000000000E+0000
38037: MUL
38038: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38039: LD_VAR 0 6
38043: PPUSH
38044: CALL_OW 257
38048: PUSH
38049: LD_INT 1
38051: PUSH
38052: LD_INT 2
38054: PUSH
38055: LD_INT 3
38057: PUSH
38058: LD_INT 4
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: IN
38067: PUSH
38068: LD_VAR 0 1
38072: PPUSH
38073: LD_INT 51
38075: PPUSH
38076: CALL_OW 321
38080: PUSH
38081: LD_INT 2
38083: EQUAL
38084: AND
38085: IFFALSE 38102
// bpoints := bpoints * 1.2 ;
38087: LD_ADDR_VAR 0 10
38091: PUSH
38092: LD_VAR 0 10
38096: PUSH
38097: LD_REAL  1.20000000000000E+0000
38100: MUL
38101: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38102: LD_VAR 0 6
38106: PPUSH
38107: CALL_OW 257
38111: PUSH
38112: LD_INT 5
38114: PUSH
38115: LD_INT 7
38117: PUSH
38118: LD_INT 9
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: LIST
38125: IN
38126: PUSH
38127: LD_VAR 0 1
38131: PPUSH
38132: LD_INT 52
38134: PPUSH
38135: CALL_OW 321
38139: PUSH
38140: LD_INT 2
38142: EQUAL
38143: AND
38144: IFFALSE 38161
// bpoints := bpoints * 1.5 ;
38146: LD_ADDR_VAR 0 10
38150: PUSH
38151: LD_VAR 0 10
38155: PUSH
38156: LD_REAL  1.50000000000000E+0000
38159: MUL
38160: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38161: LD_VAR 0 1
38165: PPUSH
38166: LD_INT 66
38168: PPUSH
38169: CALL_OW 321
38173: PUSH
38174: LD_INT 2
38176: EQUAL
38177: IFFALSE 38194
// bpoints := bpoints * 1.1 ;
38179: LD_ADDR_VAR 0 10
38183: PUSH
38184: LD_VAR 0 10
38188: PUSH
38189: LD_REAL  1.10000000000000E+0000
38192: MUL
38193: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38194: LD_ADDR_VAR 0 10
38198: PUSH
38199: LD_VAR 0 10
38203: PUSH
38204: LD_VAR 0 6
38208: PPUSH
38209: LD_INT 1
38211: PPUSH
38212: CALL_OW 259
38216: PUSH
38217: LD_REAL  1.15000000000000E+0000
38220: MUL
38221: MUL
38222: ST_TO_ADDR
// end ; unit_vehicle :
38223: GO 39047
38225: LD_INT 2
38227: DOUBLE
38228: EQUAL
38229: IFTRUE 38233
38231: GO 39035
38233: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38234: LD_VAR 0 6
38238: PPUSH
38239: CALL_OW 264
38243: PUSH
38244: LD_INT 2
38246: PUSH
38247: LD_INT 42
38249: PUSH
38250: LD_INT 24
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: LIST
38257: IN
38258: IFFALSE 38279
// points := [ 25 , 5 , 3 ] ;
38260: LD_ADDR_VAR 0 9
38264: PUSH
38265: LD_INT 25
38267: PUSH
38268: LD_INT 5
38270: PUSH
38271: LD_INT 3
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: LIST
38278: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38279: LD_VAR 0 6
38283: PPUSH
38284: CALL_OW 264
38288: PUSH
38289: LD_INT 4
38291: PUSH
38292: LD_INT 43
38294: PUSH
38295: LD_INT 25
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: LIST
38302: IN
38303: IFFALSE 38324
// points := [ 40 , 15 , 5 ] ;
38305: LD_ADDR_VAR 0 9
38309: PUSH
38310: LD_INT 40
38312: PUSH
38313: LD_INT 15
38315: PUSH
38316: LD_INT 5
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: LIST
38323: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38324: LD_VAR 0 6
38328: PPUSH
38329: CALL_OW 264
38333: PUSH
38334: LD_INT 3
38336: PUSH
38337: LD_INT 23
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: IN
38344: IFFALSE 38365
// points := [ 7 , 25 , 8 ] ;
38346: LD_ADDR_VAR 0 9
38350: PUSH
38351: LD_INT 7
38353: PUSH
38354: LD_INT 25
38356: PUSH
38357: LD_INT 8
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: LIST
38364: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38365: LD_VAR 0 6
38369: PPUSH
38370: CALL_OW 264
38374: PUSH
38375: LD_INT 5
38377: PUSH
38378: LD_INT 27
38380: PUSH
38381: LD_INT 44
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: LIST
38388: IN
38389: IFFALSE 38410
// points := [ 14 , 50 , 16 ] ;
38391: LD_ADDR_VAR 0 9
38395: PUSH
38396: LD_INT 14
38398: PUSH
38399: LD_INT 50
38401: PUSH
38402: LD_INT 16
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: LIST
38409: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38410: LD_VAR 0 6
38414: PPUSH
38415: CALL_OW 264
38419: PUSH
38420: LD_INT 6
38422: PUSH
38423: LD_INT 46
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: IN
38430: IFFALSE 38451
// points := [ 32 , 120 , 70 ] ;
38432: LD_ADDR_VAR 0 9
38436: PUSH
38437: LD_INT 32
38439: PUSH
38440: LD_INT 120
38442: PUSH
38443: LD_INT 70
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: LIST
38450: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
38451: LD_VAR 0 6
38455: PPUSH
38456: CALL_OW 264
38460: PUSH
38461: LD_INT 7
38463: PUSH
38464: LD_INT 28
38466: PUSH
38467: LD_INT 45
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: LIST
38474: IN
38475: IFFALSE 38496
// points := [ 35 , 20 , 45 ] ;
38477: LD_ADDR_VAR 0 9
38481: PUSH
38482: LD_INT 35
38484: PUSH
38485: LD_INT 20
38487: PUSH
38488: LD_INT 45
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: LIST
38495: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38496: LD_VAR 0 6
38500: PPUSH
38501: CALL_OW 264
38505: PUSH
38506: LD_INT 47
38508: PUSH
38509: EMPTY
38510: LIST
38511: IN
38512: IFFALSE 38533
// points := [ 67 , 45 , 75 ] ;
38514: LD_ADDR_VAR 0 9
38518: PUSH
38519: LD_INT 67
38521: PUSH
38522: LD_INT 45
38524: PUSH
38525: LD_INT 75
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: LIST
38532: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38533: LD_VAR 0 6
38537: PPUSH
38538: CALL_OW 264
38542: PUSH
38543: LD_INT 26
38545: PUSH
38546: EMPTY
38547: LIST
38548: IN
38549: IFFALSE 38570
// points := [ 120 , 30 , 80 ] ;
38551: LD_ADDR_VAR 0 9
38555: PUSH
38556: LD_INT 120
38558: PUSH
38559: LD_INT 30
38561: PUSH
38562: LD_INT 80
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: LIST
38569: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38570: LD_VAR 0 6
38574: PPUSH
38575: CALL_OW 264
38579: PUSH
38580: LD_INT 22
38582: PUSH
38583: EMPTY
38584: LIST
38585: IN
38586: IFFALSE 38607
// points := [ 40 , 1 , 1 ] ;
38588: LD_ADDR_VAR 0 9
38592: PUSH
38593: LD_INT 40
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: LD_INT 1
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: LIST
38606: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38607: LD_VAR 0 6
38611: PPUSH
38612: CALL_OW 264
38616: PUSH
38617: LD_INT 29
38619: PUSH
38620: EMPTY
38621: LIST
38622: IN
38623: IFFALSE 38644
// points := [ 70 , 200 , 400 ] ;
38625: LD_ADDR_VAR 0 9
38629: PUSH
38630: LD_INT 70
38632: PUSH
38633: LD_INT 200
38635: PUSH
38636: LD_INT 400
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: LIST
38643: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38644: LD_VAR 0 6
38648: PPUSH
38649: CALL_OW 264
38653: PUSH
38654: LD_INT 14
38656: PUSH
38657: LD_INT 53
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: IN
38664: IFFALSE 38685
// points := [ 40 , 10 , 20 ] ;
38666: LD_ADDR_VAR 0 9
38670: PUSH
38671: LD_INT 40
38673: PUSH
38674: LD_INT 10
38676: PUSH
38677: LD_INT 20
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: LIST
38684: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38685: LD_VAR 0 6
38689: PPUSH
38690: CALL_OW 264
38694: PUSH
38695: LD_INT 9
38697: PUSH
38698: EMPTY
38699: LIST
38700: IN
38701: IFFALSE 38722
// points := [ 5 , 70 , 20 ] ;
38703: LD_ADDR_VAR 0 9
38707: PUSH
38708: LD_INT 5
38710: PUSH
38711: LD_INT 70
38713: PUSH
38714: LD_INT 20
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: LIST
38721: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38722: LD_VAR 0 6
38726: PPUSH
38727: CALL_OW 264
38731: PUSH
38732: LD_INT 10
38734: PUSH
38735: EMPTY
38736: LIST
38737: IN
38738: IFFALSE 38759
// points := [ 35 , 110 , 70 ] ;
38740: LD_ADDR_VAR 0 9
38744: PUSH
38745: LD_INT 35
38747: PUSH
38748: LD_INT 110
38750: PUSH
38751: LD_INT 70
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: LIST
38758: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38759: LD_VAR 0 6
38763: PPUSH
38764: CALL_OW 265
38768: PUSH
38769: LD_INT 25
38771: EQUAL
38772: IFFALSE 38793
// points := [ 80 , 65 , 100 ] ;
38774: LD_ADDR_VAR 0 9
38778: PUSH
38779: LD_INT 80
38781: PUSH
38782: LD_INT 65
38784: PUSH
38785: LD_INT 100
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: LIST
38792: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38793: LD_VAR 0 6
38797: PPUSH
38798: CALL_OW 263
38802: PUSH
38803: LD_INT 1
38805: EQUAL
38806: IFFALSE 38841
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38808: LD_ADDR_VAR 0 10
38812: PUSH
38813: LD_VAR 0 10
38817: PUSH
38818: LD_VAR 0 6
38822: PPUSH
38823: CALL_OW 311
38827: PPUSH
38828: LD_INT 3
38830: PPUSH
38831: CALL_OW 259
38835: PUSH
38836: LD_INT 4
38838: MUL
38839: MUL
38840: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38841: LD_VAR 0 6
38845: PPUSH
38846: CALL_OW 263
38850: PUSH
38851: LD_INT 2
38853: EQUAL
38854: IFFALSE 38905
// begin j := IsControledBy ( i ) ;
38856: LD_ADDR_VAR 0 7
38860: PUSH
38861: LD_VAR 0 6
38865: PPUSH
38866: CALL_OW 312
38870: ST_TO_ADDR
// if j then
38871: LD_VAR 0 7
38875: IFFALSE 38905
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38877: LD_ADDR_VAR 0 10
38881: PUSH
38882: LD_VAR 0 10
38886: PUSH
38887: LD_VAR 0 7
38891: PPUSH
38892: LD_INT 3
38894: PPUSH
38895: CALL_OW 259
38899: PUSH
38900: LD_INT 3
38902: MUL
38903: MUL
38904: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38905: LD_VAR 0 6
38909: PPUSH
38910: CALL_OW 264
38914: PUSH
38915: LD_INT 5
38917: PUSH
38918: LD_INT 6
38920: PUSH
38921: LD_INT 46
38923: PUSH
38924: LD_INT 44
38926: PUSH
38927: LD_INT 47
38929: PUSH
38930: LD_INT 45
38932: PUSH
38933: LD_INT 28
38935: PUSH
38936: LD_INT 7
38938: PUSH
38939: LD_INT 27
38941: PUSH
38942: LD_INT 29
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: IN
38957: PUSH
38958: LD_VAR 0 1
38962: PPUSH
38963: LD_INT 52
38965: PPUSH
38966: CALL_OW 321
38970: PUSH
38971: LD_INT 2
38973: EQUAL
38974: AND
38975: IFFALSE 38992
// bpoints := bpoints * 1.2 ;
38977: LD_ADDR_VAR 0 10
38981: PUSH
38982: LD_VAR 0 10
38986: PUSH
38987: LD_REAL  1.20000000000000E+0000
38990: MUL
38991: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38992: LD_VAR 0 6
38996: PPUSH
38997: CALL_OW 264
39001: PUSH
39002: LD_INT 6
39004: PUSH
39005: LD_INT 46
39007: PUSH
39008: LD_INT 47
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: LIST
39015: IN
39016: IFFALSE 39033
// bpoints := bpoints * 1.2 ;
39018: LD_ADDR_VAR 0 10
39022: PUSH
39023: LD_VAR 0 10
39027: PUSH
39028: LD_REAL  1.20000000000000E+0000
39031: MUL
39032: ST_TO_ADDR
// end ; unit_building :
39033: GO 39047
39035: LD_INT 3
39037: DOUBLE
39038: EQUAL
39039: IFTRUE 39043
39041: GO 39046
39043: POP
// ; end ;
39044: GO 39047
39046: POP
// for j = 1 to 3 do
39047: LD_ADDR_VAR 0 7
39051: PUSH
39052: DOUBLE
39053: LD_INT 1
39055: DEC
39056: ST_TO_ADDR
39057: LD_INT 3
39059: PUSH
39060: FOR_TO
39061: IFFALSE 39114
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39063: LD_ADDR_VAR 0 5
39067: PUSH
39068: LD_VAR 0 5
39072: PPUSH
39073: LD_VAR 0 7
39077: PPUSH
39078: LD_VAR 0 5
39082: PUSH
39083: LD_VAR 0 7
39087: ARRAY
39088: PUSH
39089: LD_VAR 0 9
39093: PUSH
39094: LD_VAR 0 7
39098: ARRAY
39099: PUSH
39100: LD_VAR 0 10
39104: MUL
39105: PLUS
39106: PPUSH
39107: CALL_OW 1
39111: ST_TO_ADDR
39112: GO 39060
39114: POP
39115: POP
// end ;
39116: GO 37599
39118: POP
39119: POP
// result := Replace ( result , 4 , tmp ) ;
39120: LD_ADDR_VAR 0 5
39124: PUSH
39125: LD_VAR 0 5
39129: PPUSH
39130: LD_INT 4
39132: PPUSH
39133: LD_VAR 0 8
39137: PPUSH
39138: CALL_OW 1
39142: ST_TO_ADDR
// end ;
39143: LD_VAR 0 5
39147: RET
// export function DangerAtRange ( unit , range ) ; begin
39148: LD_INT 0
39150: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39151: LD_ADDR_VAR 0 3
39155: PUSH
39156: LD_VAR 0 1
39160: PPUSH
39161: CALL_OW 255
39165: PPUSH
39166: LD_VAR 0 1
39170: PPUSH
39171: CALL_OW 250
39175: PPUSH
39176: LD_VAR 0 1
39180: PPUSH
39181: CALL_OW 251
39185: PPUSH
39186: LD_VAR 0 2
39190: PPUSH
39191: CALL 37451 0 4
39195: ST_TO_ADDR
// end ;
39196: LD_VAR 0 3
39200: RET
// export function DangerInArea ( side , area ) ; begin
39201: LD_INT 0
39203: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39204: LD_ADDR_VAR 0 3
39208: PUSH
39209: LD_VAR 0 2
39213: PPUSH
39214: LD_INT 81
39216: PUSH
39217: LD_VAR 0 1
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PPUSH
39226: CALL_OW 70
39230: ST_TO_ADDR
// end ;
39231: LD_VAR 0 3
39235: RET
// export function IsExtension ( b ) ; begin
39236: LD_INT 0
39238: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39239: LD_ADDR_VAR 0 2
39243: PUSH
39244: LD_VAR 0 1
39248: PUSH
39249: LD_INT 23
39251: PUSH
39252: LD_INT 20
39254: PUSH
39255: LD_INT 22
39257: PUSH
39258: LD_INT 17
39260: PUSH
39261: LD_INT 24
39263: PUSH
39264: LD_INT 21
39266: PUSH
39267: LD_INT 19
39269: PUSH
39270: LD_INT 16
39272: PUSH
39273: LD_INT 25
39275: PUSH
39276: LD_INT 18
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: IN
39291: ST_TO_ADDR
// end ;
39292: LD_VAR 0 2
39296: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
39297: LD_INT 0
39299: PPUSH
39300: PPUSH
39301: PPUSH
// result := [ ] ;
39302: LD_ADDR_VAR 0 3
39306: PUSH
39307: EMPTY
39308: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39309: LD_ADDR_VAR 0 4
39313: PUSH
39314: LD_VAR 0 2
39318: PPUSH
39319: LD_INT 21
39321: PUSH
39322: LD_INT 3
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PPUSH
39329: CALL_OW 70
39333: ST_TO_ADDR
// if not tmp then
39334: LD_VAR 0 4
39338: NOT
39339: IFFALSE 39343
// exit ;
39341: GO 39401
// for i in tmp do
39343: LD_ADDR_VAR 0 5
39347: PUSH
39348: LD_VAR 0 4
39352: PUSH
39353: FOR_IN
39354: IFFALSE 39389
// if GetBase ( i ) <> base then
39356: LD_VAR 0 5
39360: PPUSH
39361: CALL_OW 274
39365: PUSH
39366: LD_VAR 0 1
39370: NONEQUAL
39371: IFFALSE 39387
// ComLinkToBase ( base , i ) ;
39373: LD_VAR 0 1
39377: PPUSH
39378: LD_VAR 0 5
39382: PPUSH
39383: CALL_OW 169
39387: GO 39353
39389: POP
39390: POP
// result := tmp ;
39391: LD_ADDR_VAR 0 3
39395: PUSH
39396: LD_VAR 0 4
39400: ST_TO_ADDR
// end ;
39401: LD_VAR 0 3
39405: RET
// export function ComComplete ( unit , b ) ; var i ; begin
39406: LD_INT 0
39408: PPUSH
39409: PPUSH
// if BuildingStatus ( b ) = bs_build then
39410: LD_VAR 0 2
39414: PPUSH
39415: CALL_OW 461
39419: PUSH
39420: LD_INT 1
39422: EQUAL
39423: IFFALSE 39483
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39425: LD_VAR 0 1
39429: PPUSH
39430: LD_STRING h
39432: PUSH
39433: LD_VAR 0 2
39437: PPUSH
39438: CALL_OW 250
39442: PUSH
39443: LD_VAR 0 2
39447: PPUSH
39448: CALL_OW 251
39452: PUSH
39453: LD_VAR 0 2
39457: PUSH
39458: LD_INT 0
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: LD_INT 0
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: PUSH
39476: EMPTY
39477: LIST
39478: PPUSH
39479: CALL_OW 446
// end ;
39483: LD_VAR 0 3
39487: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39488: LD_INT 0
39490: PPUSH
39491: PPUSH
39492: PPUSH
39493: PPUSH
39494: PPUSH
39495: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
39496: LD_VAR 0 1
39500: NOT
39501: PUSH
39502: LD_VAR 0 1
39506: PPUSH
39507: CALL_OW 263
39511: PUSH
39512: LD_INT 2
39514: EQUAL
39515: NOT
39516: OR
39517: IFFALSE 39521
// exit ;
39519: GO 39837
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39521: LD_ADDR_VAR 0 6
39525: PUSH
39526: LD_INT 22
39528: PUSH
39529: LD_VAR 0 1
39533: PPUSH
39534: CALL_OW 255
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 2
39545: PUSH
39546: LD_INT 30
39548: PUSH
39549: LD_INT 36
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 34
39558: PUSH
39559: LD_INT 31
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: LIST
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PPUSH
39575: CALL_OW 69
39579: ST_TO_ADDR
// if not tmp then
39580: LD_VAR 0 6
39584: NOT
39585: IFFALSE 39589
// exit ;
39587: GO 39837
// result := [ ] ;
39589: LD_ADDR_VAR 0 2
39593: PUSH
39594: EMPTY
39595: ST_TO_ADDR
// for i in tmp do
39596: LD_ADDR_VAR 0 3
39600: PUSH
39601: LD_VAR 0 6
39605: PUSH
39606: FOR_IN
39607: IFFALSE 39678
// begin t := UnitsInside ( i ) ;
39609: LD_ADDR_VAR 0 4
39613: PUSH
39614: LD_VAR 0 3
39618: PPUSH
39619: CALL_OW 313
39623: ST_TO_ADDR
// if t then
39624: LD_VAR 0 4
39628: IFFALSE 39676
// for j in t do
39630: LD_ADDR_VAR 0 7
39634: PUSH
39635: LD_VAR 0 4
39639: PUSH
39640: FOR_IN
39641: IFFALSE 39674
// result := Insert ( result , result + 1 , j ) ;
39643: LD_ADDR_VAR 0 2
39647: PUSH
39648: LD_VAR 0 2
39652: PPUSH
39653: LD_VAR 0 2
39657: PUSH
39658: LD_INT 1
39660: PLUS
39661: PPUSH
39662: LD_VAR 0 7
39666: PPUSH
39667: CALL_OW 2
39671: ST_TO_ADDR
39672: GO 39640
39674: POP
39675: POP
// end ;
39676: GO 39606
39678: POP
39679: POP
// if not result then
39680: LD_VAR 0 2
39684: NOT
39685: IFFALSE 39689
// exit ;
39687: GO 39837
// mech := result [ 1 ] ;
39689: LD_ADDR_VAR 0 5
39693: PUSH
39694: LD_VAR 0 2
39698: PUSH
39699: LD_INT 1
39701: ARRAY
39702: ST_TO_ADDR
// if result > 1 then
39703: LD_VAR 0 2
39707: PUSH
39708: LD_INT 1
39710: GREATER
39711: IFFALSE 39823
// for i = 2 to result do
39713: LD_ADDR_VAR 0 3
39717: PUSH
39718: DOUBLE
39719: LD_INT 2
39721: DEC
39722: ST_TO_ADDR
39723: LD_VAR 0 2
39727: PUSH
39728: FOR_TO
39729: IFFALSE 39821
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39731: LD_ADDR_VAR 0 4
39735: PUSH
39736: LD_VAR 0 2
39740: PUSH
39741: LD_VAR 0 3
39745: ARRAY
39746: PPUSH
39747: LD_INT 3
39749: PPUSH
39750: CALL_OW 259
39754: PUSH
39755: LD_VAR 0 2
39759: PUSH
39760: LD_VAR 0 3
39764: ARRAY
39765: PPUSH
39766: CALL_OW 432
39770: MINUS
39771: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39772: LD_VAR 0 4
39776: PUSH
39777: LD_VAR 0 5
39781: PPUSH
39782: LD_INT 3
39784: PPUSH
39785: CALL_OW 259
39789: PUSH
39790: LD_VAR 0 5
39794: PPUSH
39795: CALL_OW 432
39799: MINUS
39800: GREATEREQUAL
39801: IFFALSE 39819
// mech := result [ i ] ;
39803: LD_ADDR_VAR 0 5
39807: PUSH
39808: LD_VAR 0 2
39812: PUSH
39813: LD_VAR 0 3
39817: ARRAY
39818: ST_TO_ADDR
// end ;
39819: GO 39728
39821: POP
39822: POP
// ComLinkTo ( vehicle , mech ) ;
39823: LD_VAR 0 1
39827: PPUSH
39828: LD_VAR 0 5
39832: PPUSH
39833: CALL_OW 135
// end ;
39837: LD_VAR 0 2
39841: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39842: LD_INT 0
39844: PPUSH
39845: PPUSH
39846: PPUSH
39847: PPUSH
39848: PPUSH
39849: PPUSH
39850: PPUSH
39851: PPUSH
39852: PPUSH
39853: PPUSH
39854: PPUSH
39855: PPUSH
39856: PPUSH
// result := [ ] ;
39857: LD_ADDR_VAR 0 7
39861: PUSH
39862: EMPTY
39863: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39864: LD_VAR 0 1
39868: PPUSH
39869: CALL_OW 266
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: LD_INT 1
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: IN
39884: NOT
39885: IFFALSE 39889
// exit ;
39887: GO 41520
// if name then
39889: LD_VAR 0 3
39893: IFFALSE 39909
// SetBName ( base_dep , name ) ;
39895: LD_VAR 0 1
39899: PPUSH
39900: LD_VAR 0 3
39904: PPUSH
39905: CALL_OW 500
// base := GetBase ( base_dep ) ;
39909: LD_ADDR_VAR 0 15
39913: PUSH
39914: LD_VAR 0 1
39918: PPUSH
39919: CALL_OW 274
39923: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39924: LD_ADDR_VAR 0 16
39928: PUSH
39929: LD_VAR 0 1
39933: PPUSH
39934: CALL_OW 255
39938: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39939: LD_ADDR_VAR 0 17
39943: PUSH
39944: LD_VAR 0 1
39948: PPUSH
39949: CALL_OW 248
39953: ST_TO_ADDR
// if sources then
39954: LD_VAR 0 5
39958: IFFALSE 40005
// for i = 1 to 3 do
39960: LD_ADDR_VAR 0 8
39964: PUSH
39965: DOUBLE
39966: LD_INT 1
39968: DEC
39969: ST_TO_ADDR
39970: LD_INT 3
39972: PUSH
39973: FOR_TO
39974: IFFALSE 40003
// AddResourceType ( base , i , sources [ i ] ) ;
39976: LD_VAR 0 15
39980: PPUSH
39981: LD_VAR 0 8
39985: PPUSH
39986: LD_VAR 0 5
39990: PUSH
39991: LD_VAR 0 8
39995: ARRAY
39996: PPUSH
39997: CALL_OW 276
40001: GO 39973
40003: POP
40004: POP
// buildings := GetBaseBuildings ( base , area ) ;
40005: LD_ADDR_VAR 0 18
40009: PUSH
40010: LD_VAR 0 15
40014: PPUSH
40015: LD_VAR 0 2
40019: PPUSH
40020: CALL 39297 0 2
40024: ST_TO_ADDR
// InitHc ;
40025: CALL_OW 19
// InitUc ;
40029: CALL_OW 18
// uc_side := side ;
40033: LD_ADDR_OWVAR 20
40037: PUSH
40038: LD_VAR 0 16
40042: ST_TO_ADDR
// uc_nation := nation ;
40043: LD_ADDR_OWVAR 21
40047: PUSH
40048: LD_VAR 0 17
40052: ST_TO_ADDR
// if buildings then
40053: LD_VAR 0 18
40057: IFFALSE 41379
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40059: LD_ADDR_VAR 0 19
40063: PUSH
40064: LD_VAR 0 18
40068: PPUSH
40069: LD_INT 2
40071: PUSH
40072: LD_INT 30
40074: PUSH
40075: LD_INT 29
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 30
40084: PUSH
40085: LD_INT 30
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: LIST
40096: PPUSH
40097: CALL_OW 72
40101: ST_TO_ADDR
// if tmp then
40102: LD_VAR 0 19
40106: IFFALSE 40154
// for i in tmp do
40108: LD_ADDR_VAR 0 8
40112: PUSH
40113: LD_VAR 0 19
40117: PUSH
40118: FOR_IN
40119: IFFALSE 40152
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40121: LD_VAR 0 8
40125: PPUSH
40126: CALL_OW 250
40130: PPUSH
40131: LD_VAR 0 8
40135: PPUSH
40136: CALL_OW 251
40140: PPUSH
40141: LD_VAR 0 16
40145: PPUSH
40146: CALL_OW 441
40150: GO 40118
40152: POP
40153: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40154: LD_VAR 0 18
40158: PPUSH
40159: LD_INT 2
40161: PUSH
40162: LD_INT 30
40164: PUSH
40165: LD_INT 32
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 30
40174: PUSH
40175: LD_INT 33
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: LIST
40186: PPUSH
40187: CALL_OW 72
40191: IFFALSE 40279
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40193: LD_ADDR_VAR 0 8
40197: PUSH
40198: LD_VAR 0 18
40202: PPUSH
40203: LD_INT 2
40205: PUSH
40206: LD_INT 30
40208: PUSH
40209: LD_INT 32
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 30
40218: PUSH
40219: LD_INT 33
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: LIST
40230: PPUSH
40231: CALL_OW 72
40235: PUSH
40236: FOR_IN
40237: IFFALSE 40277
// begin if not GetBWeapon ( i ) then
40239: LD_VAR 0 8
40243: PPUSH
40244: CALL_OW 269
40248: NOT
40249: IFFALSE 40275
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40251: LD_VAR 0 8
40255: PPUSH
40256: LD_VAR 0 8
40260: PPUSH
40261: LD_VAR 0 2
40265: PPUSH
40266: CALL 41525 0 2
40270: PPUSH
40271: CALL_OW 431
// end ;
40275: GO 40236
40277: POP
40278: POP
// end ; for i = 1 to personel do
40279: LD_ADDR_VAR 0 8
40283: PUSH
40284: DOUBLE
40285: LD_INT 1
40287: DEC
40288: ST_TO_ADDR
40289: LD_VAR 0 6
40293: PUSH
40294: FOR_TO
40295: IFFALSE 41359
// begin if i > 4 then
40297: LD_VAR 0 8
40301: PUSH
40302: LD_INT 4
40304: GREATER
40305: IFFALSE 40309
// break ;
40307: GO 41359
// case i of 1 :
40309: LD_VAR 0 8
40313: PUSH
40314: LD_INT 1
40316: DOUBLE
40317: EQUAL
40318: IFTRUE 40322
40320: GO 40402
40322: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40323: LD_ADDR_VAR 0 12
40327: PUSH
40328: LD_VAR 0 18
40332: PPUSH
40333: LD_INT 22
40335: PUSH
40336: LD_VAR 0 16
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 58
40347: PUSH
40348: EMPTY
40349: LIST
40350: PUSH
40351: LD_INT 2
40353: PUSH
40354: LD_INT 30
40356: PUSH
40357: LD_INT 32
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 30
40366: PUSH
40367: LD_INT 4
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 30
40376: PUSH
40377: LD_INT 5
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: LIST
40394: PPUSH
40395: CALL_OW 72
40399: ST_TO_ADDR
40400: GO 40624
40402: LD_INT 2
40404: DOUBLE
40405: EQUAL
40406: IFTRUE 40410
40408: GO 40472
40410: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40411: LD_ADDR_VAR 0 12
40415: PUSH
40416: LD_VAR 0 18
40420: PPUSH
40421: LD_INT 22
40423: PUSH
40424: LD_VAR 0 16
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 2
40435: PUSH
40436: LD_INT 30
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 30
40448: PUSH
40449: LD_INT 1
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: LIST
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PPUSH
40465: CALL_OW 72
40469: ST_TO_ADDR
40470: GO 40624
40472: LD_INT 3
40474: DOUBLE
40475: EQUAL
40476: IFTRUE 40480
40478: GO 40542
40480: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40481: LD_ADDR_VAR 0 12
40485: PUSH
40486: LD_VAR 0 18
40490: PPUSH
40491: LD_INT 22
40493: PUSH
40494: LD_VAR 0 16
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 2
40505: PUSH
40506: LD_INT 30
40508: PUSH
40509: LD_INT 2
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 30
40518: PUSH
40519: LD_INT 3
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: LIST
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PPUSH
40535: CALL_OW 72
40539: ST_TO_ADDR
40540: GO 40624
40542: LD_INT 4
40544: DOUBLE
40545: EQUAL
40546: IFTRUE 40550
40548: GO 40623
40550: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40551: LD_ADDR_VAR 0 12
40555: PUSH
40556: LD_VAR 0 18
40560: PPUSH
40561: LD_INT 22
40563: PUSH
40564: LD_VAR 0 16
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 2
40575: PUSH
40576: LD_INT 30
40578: PUSH
40579: LD_INT 6
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 30
40588: PUSH
40589: LD_INT 7
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 30
40598: PUSH
40599: LD_INT 8
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PPUSH
40616: CALL_OW 72
40620: ST_TO_ADDR
40621: GO 40624
40623: POP
// if i = 1 then
40624: LD_VAR 0 8
40628: PUSH
40629: LD_INT 1
40631: EQUAL
40632: IFFALSE 40743
// begin tmp := [ ] ;
40634: LD_ADDR_VAR 0 19
40638: PUSH
40639: EMPTY
40640: ST_TO_ADDR
// for j in f do
40641: LD_ADDR_VAR 0 9
40645: PUSH
40646: LD_VAR 0 12
40650: PUSH
40651: FOR_IN
40652: IFFALSE 40725
// if GetBType ( j ) = b_bunker then
40654: LD_VAR 0 9
40658: PPUSH
40659: CALL_OW 266
40663: PUSH
40664: LD_INT 32
40666: EQUAL
40667: IFFALSE 40694
// tmp := Insert ( tmp , 1 , j ) else
40669: LD_ADDR_VAR 0 19
40673: PUSH
40674: LD_VAR 0 19
40678: PPUSH
40679: LD_INT 1
40681: PPUSH
40682: LD_VAR 0 9
40686: PPUSH
40687: CALL_OW 2
40691: ST_TO_ADDR
40692: GO 40723
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40694: LD_ADDR_VAR 0 19
40698: PUSH
40699: LD_VAR 0 19
40703: PPUSH
40704: LD_VAR 0 19
40708: PUSH
40709: LD_INT 1
40711: PLUS
40712: PPUSH
40713: LD_VAR 0 9
40717: PPUSH
40718: CALL_OW 2
40722: ST_TO_ADDR
40723: GO 40651
40725: POP
40726: POP
// if tmp then
40727: LD_VAR 0 19
40731: IFFALSE 40743
// f := tmp ;
40733: LD_ADDR_VAR 0 12
40737: PUSH
40738: LD_VAR 0 19
40742: ST_TO_ADDR
// end ; x := personel [ i ] ;
40743: LD_ADDR_VAR 0 13
40747: PUSH
40748: LD_VAR 0 6
40752: PUSH
40753: LD_VAR 0 8
40757: ARRAY
40758: ST_TO_ADDR
// if x = - 1 then
40759: LD_VAR 0 13
40763: PUSH
40764: LD_INT 1
40766: NEG
40767: EQUAL
40768: IFFALSE 40977
// begin for j in f do
40770: LD_ADDR_VAR 0 9
40774: PUSH
40775: LD_VAR 0 12
40779: PUSH
40780: FOR_IN
40781: IFFALSE 40973
// repeat InitHc ;
40783: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40787: LD_VAR 0 9
40791: PPUSH
40792: CALL_OW 266
40796: PUSH
40797: LD_INT 5
40799: EQUAL
40800: IFFALSE 40870
// begin if UnitsInside ( j ) < 3 then
40802: LD_VAR 0 9
40806: PPUSH
40807: CALL_OW 313
40811: PUSH
40812: LD_INT 3
40814: LESS
40815: IFFALSE 40851
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40817: LD_INT 0
40819: PPUSH
40820: LD_INT 5
40822: PUSH
40823: LD_INT 8
40825: PUSH
40826: LD_INT 9
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: LIST
40833: PUSH
40834: LD_VAR 0 17
40838: ARRAY
40839: PPUSH
40840: LD_VAR 0 4
40844: PPUSH
40845: CALL_OW 380
40849: GO 40868
// PrepareHuman ( false , i , skill ) ;
40851: LD_INT 0
40853: PPUSH
40854: LD_VAR 0 8
40858: PPUSH
40859: LD_VAR 0 4
40863: PPUSH
40864: CALL_OW 380
// end else
40868: GO 40887
// PrepareHuman ( false , i , skill ) ;
40870: LD_INT 0
40872: PPUSH
40873: LD_VAR 0 8
40877: PPUSH
40878: LD_VAR 0 4
40882: PPUSH
40883: CALL_OW 380
// un := CreateHuman ;
40887: LD_ADDR_VAR 0 14
40891: PUSH
40892: CALL_OW 44
40896: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40897: LD_ADDR_VAR 0 7
40901: PUSH
40902: LD_VAR 0 7
40906: PPUSH
40907: LD_INT 1
40909: PPUSH
40910: LD_VAR 0 14
40914: PPUSH
40915: CALL_OW 2
40919: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40920: LD_VAR 0 14
40924: PPUSH
40925: LD_VAR 0 9
40929: PPUSH
40930: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40934: LD_VAR 0 9
40938: PPUSH
40939: CALL_OW 313
40943: PUSH
40944: LD_INT 6
40946: EQUAL
40947: PUSH
40948: LD_VAR 0 9
40952: PPUSH
40953: CALL_OW 266
40957: PUSH
40958: LD_INT 32
40960: PUSH
40961: LD_INT 31
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: IN
40968: OR
40969: IFFALSE 40783
40971: GO 40780
40973: POP
40974: POP
// end else
40975: GO 41357
// for j = 1 to x do
40977: LD_ADDR_VAR 0 9
40981: PUSH
40982: DOUBLE
40983: LD_INT 1
40985: DEC
40986: ST_TO_ADDR
40987: LD_VAR 0 13
40991: PUSH
40992: FOR_TO
40993: IFFALSE 41355
// begin InitHc ;
40995: CALL_OW 19
// if not f then
40999: LD_VAR 0 12
41003: NOT
41004: IFFALSE 41093
// begin PrepareHuman ( false , i , skill ) ;
41006: LD_INT 0
41008: PPUSH
41009: LD_VAR 0 8
41013: PPUSH
41014: LD_VAR 0 4
41018: PPUSH
41019: CALL_OW 380
// un := CreateHuman ;
41023: LD_ADDR_VAR 0 14
41027: PUSH
41028: CALL_OW 44
41032: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41033: LD_ADDR_VAR 0 7
41037: PUSH
41038: LD_VAR 0 7
41042: PPUSH
41043: LD_INT 1
41045: PPUSH
41046: LD_VAR 0 14
41050: PPUSH
41051: CALL_OW 2
41055: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41056: LD_VAR 0 14
41060: PPUSH
41061: LD_VAR 0 1
41065: PPUSH
41066: CALL_OW 250
41070: PPUSH
41071: LD_VAR 0 1
41075: PPUSH
41076: CALL_OW 251
41080: PPUSH
41081: LD_INT 10
41083: PPUSH
41084: LD_INT 0
41086: PPUSH
41087: CALL_OW 50
// continue ;
41091: GO 40992
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41093: LD_VAR 0 12
41097: PUSH
41098: LD_INT 1
41100: ARRAY
41101: PPUSH
41102: CALL_OW 313
41106: PUSH
41107: LD_VAR 0 12
41111: PUSH
41112: LD_INT 1
41114: ARRAY
41115: PPUSH
41116: CALL_OW 266
41120: PUSH
41121: LD_INT 32
41123: PUSH
41124: LD_INT 31
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: IN
41131: AND
41132: PUSH
41133: LD_VAR 0 12
41137: PUSH
41138: LD_INT 1
41140: ARRAY
41141: PPUSH
41142: CALL_OW 313
41146: PUSH
41147: LD_INT 6
41149: EQUAL
41150: OR
41151: IFFALSE 41171
// f := Delete ( f , 1 ) ;
41153: LD_ADDR_VAR 0 12
41157: PUSH
41158: LD_VAR 0 12
41162: PPUSH
41163: LD_INT 1
41165: PPUSH
41166: CALL_OW 3
41170: ST_TO_ADDR
// if not f then
41171: LD_VAR 0 12
41175: NOT
41176: IFFALSE 41194
// begin x := x + 2 ;
41178: LD_ADDR_VAR 0 13
41182: PUSH
41183: LD_VAR 0 13
41187: PUSH
41188: LD_INT 2
41190: PLUS
41191: ST_TO_ADDR
// continue ;
41192: GO 40992
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41194: LD_VAR 0 12
41198: PUSH
41199: LD_INT 1
41201: ARRAY
41202: PPUSH
41203: CALL_OW 266
41207: PUSH
41208: LD_INT 5
41210: EQUAL
41211: IFFALSE 41285
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41213: LD_VAR 0 12
41217: PUSH
41218: LD_INT 1
41220: ARRAY
41221: PPUSH
41222: CALL_OW 313
41226: PUSH
41227: LD_INT 3
41229: LESS
41230: IFFALSE 41266
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41232: LD_INT 0
41234: PPUSH
41235: LD_INT 5
41237: PUSH
41238: LD_INT 8
41240: PUSH
41241: LD_INT 9
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: LIST
41248: PUSH
41249: LD_VAR 0 17
41253: ARRAY
41254: PPUSH
41255: LD_VAR 0 4
41259: PPUSH
41260: CALL_OW 380
41264: GO 41283
// PrepareHuman ( false , i , skill ) ;
41266: LD_INT 0
41268: PPUSH
41269: LD_VAR 0 8
41273: PPUSH
41274: LD_VAR 0 4
41278: PPUSH
41279: CALL_OW 380
// end else
41283: GO 41302
// PrepareHuman ( false , i , skill ) ;
41285: LD_INT 0
41287: PPUSH
41288: LD_VAR 0 8
41292: PPUSH
41293: LD_VAR 0 4
41297: PPUSH
41298: CALL_OW 380
// un := CreateHuman ;
41302: LD_ADDR_VAR 0 14
41306: PUSH
41307: CALL_OW 44
41311: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41312: LD_ADDR_VAR 0 7
41316: PUSH
41317: LD_VAR 0 7
41321: PPUSH
41322: LD_INT 1
41324: PPUSH
41325: LD_VAR 0 14
41329: PPUSH
41330: CALL_OW 2
41334: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41335: LD_VAR 0 14
41339: PPUSH
41340: LD_VAR 0 12
41344: PUSH
41345: LD_INT 1
41347: ARRAY
41348: PPUSH
41349: CALL_OW 52
// end ;
41353: GO 40992
41355: POP
41356: POP
// end ;
41357: GO 40294
41359: POP
41360: POP
// result := result ^ buildings ;
41361: LD_ADDR_VAR 0 7
41365: PUSH
41366: LD_VAR 0 7
41370: PUSH
41371: LD_VAR 0 18
41375: ADD
41376: ST_TO_ADDR
// end else
41377: GO 41520
// begin for i = 1 to personel do
41379: LD_ADDR_VAR 0 8
41383: PUSH
41384: DOUBLE
41385: LD_INT 1
41387: DEC
41388: ST_TO_ADDR
41389: LD_VAR 0 6
41393: PUSH
41394: FOR_TO
41395: IFFALSE 41518
// begin if i > 4 then
41397: LD_VAR 0 8
41401: PUSH
41402: LD_INT 4
41404: GREATER
41405: IFFALSE 41409
// break ;
41407: GO 41518
// x := personel [ i ] ;
41409: LD_ADDR_VAR 0 13
41413: PUSH
41414: LD_VAR 0 6
41418: PUSH
41419: LD_VAR 0 8
41423: ARRAY
41424: ST_TO_ADDR
// if x = - 1 then
41425: LD_VAR 0 13
41429: PUSH
41430: LD_INT 1
41432: NEG
41433: EQUAL
41434: IFFALSE 41438
// continue ;
41436: GO 41394
// PrepareHuman ( false , i , skill ) ;
41438: LD_INT 0
41440: PPUSH
41441: LD_VAR 0 8
41445: PPUSH
41446: LD_VAR 0 4
41450: PPUSH
41451: CALL_OW 380
// un := CreateHuman ;
41455: LD_ADDR_VAR 0 14
41459: PUSH
41460: CALL_OW 44
41464: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41465: LD_VAR 0 14
41469: PPUSH
41470: LD_VAR 0 1
41474: PPUSH
41475: CALL_OW 250
41479: PPUSH
41480: LD_VAR 0 1
41484: PPUSH
41485: CALL_OW 251
41489: PPUSH
41490: LD_INT 10
41492: PPUSH
41493: LD_INT 0
41495: PPUSH
41496: CALL_OW 50
// result := result ^ un ;
41500: LD_ADDR_VAR 0 7
41504: PUSH
41505: LD_VAR 0 7
41509: PUSH
41510: LD_VAR 0 14
41514: ADD
41515: ST_TO_ADDR
// end ;
41516: GO 41394
41518: POP
41519: POP
// end ; end ;
41520: LD_VAR 0 7
41524: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41525: LD_INT 0
41527: PPUSH
41528: PPUSH
41529: PPUSH
41530: PPUSH
41531: PPUSH
41532: PPUSH
41533: PPUSH
41534: PPUSH
41535: PPUSH
41536: PPUSH
41537: PPUSH
41538: PPUSH
41539: PPUSH
41540: PPUSH
41541: PPUSH
41542: PPUSH
// result := false ;
41543: LD_ADDR_VAR 0 3
41547: PUSH
41548: LD_INT 0
41550: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41551: LD_VAR 0 1
41555: NOT
41556: PUSH
41557: LD_VAR 0 1
41561: PPUSH
41562: CALL_OW 266
41566: PUSH
41567: LD_INT 32
41569: PUSH
41570: LD_INT 33
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: IN
41577: NOT
41578: OR
41579: IFFALSE 41583
// exit ;
41581: GO 42719
// nat := GetNation ( tower ) ;
41583: LD_ADDR_VAR 0 12
41587: PUSH
41588: LD_VAR 0 1
41592: PPUSH
41593: CALL_OW 248
41597: ST_TO_ADDR
// side := GetSide ( tower ) ;
41598: LD_ADDR_VAR 0 16
41602: PUSH
41603: LD_VAR 0 1
41607: PPUSH
41608: CALL_OW 255
41612: ST_TO_ADDR
// x := GetX ( tower ) ;
41613: LD_ADDR_VAR 0 10
41617: PUSH
41618: LD_VAR 0 1
41622: PPUSH
41623: CALL_OW 250
41627: ST_TO_ADDR
// y := GetY ( tower ) ;
41628: LD_ADDR_VAR 0 11
41632: PUSH
41633: LD_VAR 0 1
41637: PPUSH
41638: CALL_OW 251
41642: ST_TO_ADDR
// if not x or not y then
41643: LD_VAR 0 10
41647: NOT
41648: PUSH
41649: LD_VAR 0 11
41653: NOT
41654: OR
41655: IFFALSE 41659
// exit ;
41657: GO 42719
// weapon := 0 ;
41659: LD_ADDR_VAR 0 18
41663: PUSH
41664: LD_INT 0
41666: ST_TO_ADDR
// fac_list := [ ] ;
41667: LD_ADDR_VAR 0 17
41671: PUSH
41672: EMPTY
41673: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
41674: LD_ADDR_VAR 0 6
41678: PUSH
41679: LD_VAR 0 1
41683: PPUSH
41684: CALL_OW 274
41688: PPUSH
41689: LD_VAR 0 2
41693: PPUSH
41694: CALL 39297 0 2
41698: PPUSH
41699: LD_INT 30
41701: PUSH
41702: LD_INT 3
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PPUSH
41709: CALL_OW 72
41713: ST_TO_ADDR
// if not factories then
41714: LD_VAR 0 6
41718: NOT
41719: IFFALSE 41723
// exit ;
41721: GO 42719
// for i in factories do
41723: LD_ADDR_VAR 0 8
41727: PUSH
41728: LD_VAR 0 6
41732: PUSH
41733: FOR_IN
41734: IFFALSE 41759
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41736: LD_ADDR_VAR 0 17
41740: PUSH
41741: LD_VAR 0 17
41745: PUSH
41746: LD_VAR 0 8
41750: PPUSH
41751: CALL_OW 478
41755: UNION
41756: ST_TO_ADDR
41757: GO 41733
41759: POP
41760: POP
// if not fac_list then
41761: LD_VAR 0 17
41765: NOT
41766: IFFALSE 41770
// exit ;
41768: GO 42719
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41770: LD_ADDR_VAR 0 5
41774: PUSH
41775: LD_INT 4
41777: PUSH
41778: LD_INT 5
41780: PUSH
41781: LD_INT 9
41783: PUSH
41784: LD_INT 10
41786: PUSH
41787: LD_INT 6
41789: PUSH
41790: LD_INT 7
41792: PUSH
41793: LD_INT 11
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 27
41807: PUSH
41808: LD_INT 28
41810: PUSH
41811: LD_INT 26
41813: PUSH
41814: LD_INT 30
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 43
41825: PUSH
41826: LD_INT 44
41828: PUSH
41829: LD_INT 46
41831: PUSH
41832: LD_INT 45
41834: PUSH
41835: LD_INT 47
41837: PUSH
41838: LD_INT 49
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: LIST
41853: PUSH
41854: LD_VAR 0 12
41858: ARRAY
41859: ST_TO_ADDR
// for i in list do
41860: LD_ADDR_VAR 0 8
41864: PUSH
41865: LD_VAR 0 5
41869: PUSH
41870: FOR_IN
41871: IFFALSE 41904
// if not i in fac_list then
41873: LD_VAR 0 8
41877: PUSH
41878: LD_VAR 0 17
41882: IN
41883: NOT
41884: IFFALSE 41902
// list := list diff i ;
41886: LD_ADDR_VAR 0 5
41890: PUSH
41891: LD_VAR 0 5
41895: PUSH
41896: LD_VAR 0 8
41900: DIFF
41901: ST_TO_ADDR
41902: GO 41870
41904: POP
41905: POP
// if not list then
41906: LD_VAR 0 5
41910: NOT
41911: IFFALSE 41915
// exit ;
41913: GO 42719
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41915: LD_VAR 0 12
41919: PUSH
41920: LD_INT 3
41922: EQUAL
41923: PUSH
41924: LD_INT 49
41926: PUSH
41927: LD_VAR 0 5
41931: IN
41932: AND
41933: PUSH
41934: LD_INT 31
41936: PPUSH
41937: LD_VAR 0 16
41941: PPUSH
41942: CALL_OW 321
41946: PUSH
41947: LD_INT 2
41949: EQUAL
41950: AND
41951: IFFALSE 42011
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41953: LD_INT 22
41955: PUSH
41956: LD_VAR 0 16
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 35
41967: PUSH
41968: LD_INT 49
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 91
41977: PUSH
41978: LD_VAR 0 1
41982: PUSH
41983: LD_INT 10
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: LIST
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: LIST
41995: PPUSH
41996: CALL_OW 69
42000: NOT
42001: IFFALSE 42011
// weapon := ru_time_lapser ;
42003: LD_ADDR_VAR 0 18
42007: PUSH
42008: LD_INT 49
42010: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42011: LD_VAR 0 12
42015: PUSH
42016: LD_INT 1
42018: PUSH
42019: LD_INT 2
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: IN
42026: PUSH
42027: LD_INT 11
42029: PUSH
42030: LD_VAR 0 5
42034: IN
42035: PUSH
42036: LD_INT 30
42038: PUSH
42039: LD_VAR 0 5
42043: IN
42044: OR
42045: AND
42046: PUSH
42047: LD_INT 6
42049: PPUSH
42050: LD_VAR 0 16
42054: PPUSH
42055: CALL_OW 321
42059: PUSH
42060: LD_INT 2
42062: EQUAL
42063: AND
42064: IFFALSE 42229
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42066: LD_INT 22
42068: PUSH
42069: LD_VAR 0 16
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 2
42080: PUSH
42081: LD_INT 35
42083: PUSH
42084: LD_INT 11
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 35
42093: PUSH
42094: LD_INT 30
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 91
42108: PUSH
42109: LD_VAR 0 1
42113: PUSH
42114: LD_INT 18
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: LIST
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: LIST
42126: PPUSH
42127: CALL_OW 69
42131: NOT
42132: PUSH
42133: LD_INT 22
42135: PUSH
42136: LD_VAR 0 16
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 2
42147: PUSH
42148: LD_INT 30
42150: PUSH
42151: LD_INT 32
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 30
42160: PUSH
42161: LD_INT 33
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 91
42175: PUSH
42176: LD_VAR 0 1
42180: PUSH
42181: LD_INT 12
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: LIST
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: LIST
42193: PUSH
42194: EMPTY
42195: LIST
42196: PPUSH
42197: CALL_OW 69
42201: PUSH
42202: LD_INT 2
42204: GREATER
42205: AND
42206: IFFALSE 42229
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42208: LD_ADDR_VAR 0 18
42212: PUSH
42213: LD_INT 11
42215: PUSH
42216: LD_INT 30
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_VAR 0 12
42227: ARRAY
42228: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42229: LD_VAR 0 18
42233: NOT
42234: PUSH
42235: LD_INT 40
42237: PPUSH
42238: LD_VAR 0 16
42242: PPUSH
42243: CALL_OW 321
42247: PUSH
42248: LD_INT 2
42250: EQUAL
42251: AND
42252: PUSH
42253: LD_INT 7
42255: PUSH
42256: LD_VAR 0 5
42260: IN
42261: PUSH
42262: LD_INT 28
42264: PUSH
42265: LD_VAR 0 5
42269: IN
42270: OR
42271: PUSH
42272: LD_INT 45
42274: PUSH
42275: LD_VAR 0 5
42279: IN
42280: OR
42281: AND
42282: IFFALSE 42536
// begin hex := GetHexInfo ( x , y ) ;
42284: LD_ADDR_VAR 0 4
42288: PUSH
42289: LD_VAR 0 10
42293: PPUSH
42294: LD_VAR 0 11
42298: PPUSH
42299: CALL_OW 546
42303: ST_TO_ADDR
// if hex [ 1 ] then
42304: LD_VAR 0 4
42308: PUSH
42309: LD_INT 1
42311: ARRAY
42312: IFFALSE 42316
// exit ;
42314: GO 42719
// height := hex [ 2 ] ;
42316: LD_ADDR_VAR 0 15
42320: PUSH
42321: LD_VAR 0 4
42325: PUSH
42326: LD_INT 2
42328: ARRAY
42329: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42330: LD_ADDR_VAR 0 14
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: LD_INT 2
42340: PUSH
42341: LD_INT 3
42343: PUSH
42344: LD_INT 5
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: ST_TO_ADDR
// for i in tmp do
42353: LD_ADDR_VAR 0 8
42357: PUSH
42358: LD_VAR 0 14
42362: PUSH
42363: FOR_IN
42364: IFFALSE 42534
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42366: LD_ADDR_VAR 0 9
42370: PUSH
42371: LD_VAR 0 10
42375: PPUSH
42376: LD_VAR 0 8
42380: PPUSH
42381: LD_INT 5
42383: PPUSH
42384: CALL_OW 272
42388: PUSH
42389: LD_VAR 0 11
42393: PPUSH
42394: LD_VAR 0 8
42398: PPUSH
42399: LD_INT 5
42401: PPUSH
42402: CALL_OW 273
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42411: LD_VAR 0 9
42415: PUSH
42416: LD_INT 1
42418: ARRAY
42419: PPUSH
42420: LD_VAR 0 9
42424: PUSH
42425: LD_INT 2
42427: ARRAY
42428: PPUSH
42429: CALL_OW 488
42433: IFFALSE 42532
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42435: LD_ADDR_VAR 0 4
42439: PUSH
42440: LD_VAR 0 9
42444: PUSH
42445: LD_INT 1
42447: ARRAY
42448: PPUSH
42449: LD_VAR 0 9
42453: PUSH
42454: LD_INT 2
42456: ARRAY
42457: PPUSH
42458: CALL_OW 546
42462: ST_TO_ADDR
// if hex [ 1 ] then
42463: LD_VAR 0 4
42467: PUSH
42468: LD_INT 1
42470: ARRAY
42471: IFFALSE 42475
// continue ;
42473: GO 42363
// h := hex [ 2 ] ;
42475: LD_ADDR_VAR 0 13
42479: PUSH
42480: LD_VAR 0 4
42484: PUSH
42485: LD_INT 2
42487: ARRAY
42488: ST_TO_ADDR
// if h + 7 < height then
42489: LD_VAR 0 13
42493: PUSH
42494: LD_INT 7
42496: PLUS
42497: PUSH
42498: LD_VAR 0 15
42502: LESS
42503: IFFALSE 42532
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42505: LD_ADDR_VAR 0 18
42509: PUSH
42510: LD_INT 7
42512: PUSH
42513: LD_INT 28
42515: PUSH
42516: LD_INT 45
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: LIST
42523: PUSH
42524: LD_VAR 0 12
42528: ARRAY
42529: ST_TO_ADDR
// break ;
42530: GO 42534
// end ; end ; end ;
42532: GO 42363
42534: POP
42535: POP
// end ; if not weapon then
42536: LD_VAR 0 18
42540: NOT
42541: IFFALSE 42601
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42543: LD_ADDR_VAR 0 5
42547: PUSH
42548: LD_VAR 0 5
42552: PUSH
42553: LD_INT 11
42555: PUSH
42556: LD_INT 30
42558: PUSH
42559: LD_INT 49
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: LIST
42566: DIFF
42567: ST_TO_ADDR
// if not list then
42568: LD_VAR 0 5
42572: NOT
42573: IFFALSE 42577
// exit ;
42575: GO 42719
// weapon := list [ rand ( 1 , list ) ] ;
42577: LD_ADDR_VAR 0 18
42581: PUSH
42582: LD_VAR 0 5
42586: PUSH
42587: LD_INT 1
42589: PPUSH
42590: LD_VAR 0 5
42594: PPUSH
42595: CALL_OW 12
42599: ARRAY
42600: ST_TO_ADDR
// end ; if weapon then
42601: LD_VAR 0 18
42605: IFFALSE 42719
// begin tmp := CostOfWeapon ( weapon ) ;
42607: LD_ADDR_VAR 0 14
42611: PUSH
42612: LD_VAR 0 18
42616: PPUSH
42617: CALL_OW 451
42621: ST_TO_ADDR
// j := GetBase ( tower ) ;
42622: LD_ADDR_VAR 0 9
42626: PUSH
42627: LD_VAR 0 1
42631: PPUSH
42632: CALL_OW 274
42636: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42637: LD_VAR 0 9
42641: PPUSH
42642: LD_INT 1
42644: PPUSH
42645: CALL_OW 275
42649: PUSH
42650: LD_VAR 0 14
42654: PUSH
42655: LD_INT 1
42657: ARRAY
42658: GREATEREQUAL
42659: PUSH
42660: LD_VAR 0 9
42664: PPUSH
42665: LD_INT 2
42667: PPUSH
42668: CALL_OW 275
42672: PUSH
42673: LD_VAR 0 14
42677: PUSH
42678: LD_INT 2
42680: ARRAY
42681: GREATEREQUAL
42682: AND
42683: PUSH
42684: LD_VAR 0 9
42688: PPUSH
42689: LD_INT 3
42691: PPUSH
42692: CALL_OW 275
42696: PUSH
42697: LD_VAR 0 14
42701: PUSH
42702: LD_INT 3
42704: ARRAY
42705: GREATEREQUAL
42706: AND
42707: IFFALSE 42719
// result := weapon ;
42709: LD_ADDR_VAR 0 3
42713: PUSH
42714: LD_VAR 0 18
42718: ST_TO_ADDR
// end ; end ;
42719: LD_VAR 0 3
42723: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42724: LD_INT 0
42726: PPUSH
42727: PPUSH
// result := true ;
42728: LD_ADDR_VAR 0 3
42732: PUSH
42733: LD_INT 1
42735: ST_TO_ADDR
// if array1 = array2 then
42736: LD_VAR 0 1
42740: PUSH
42741: LD_VAR 0 2
42745: EQUAL
42746: IFFALSE 42806
// begin for i = 1 to array1 do
42748: LD_ADDR_VAR 0 4
42752: PUSH
42753: DOUBLE
42754: LD_INT 1
42756: DEC
42757: ST_TO_ADDR
42758: LD_VAR 0 1
42762: PUSH
42763: FOR_TO
42764: IFFALSE 42802
// if array1 [ i ] <> array2 [ i ] then
42766: LD_VAR 0 1
42770: PUSH
42771: LD_VAR 0 4
42775: ARRAY
42776: PUSH
42777: LD_VAR 0 2
42781: PUSH
42782: LD_VAR 0 4
42786: ARRAY
42787: NONEQUAL
42788: IFFALSE 42800
// begin result := false ;
42790: LD_ADDR_VAR 0 3
42794: PUSH
42795: LD_INT 0
42797: ST_TO_ADDR
// break ;
42798: GO 42802
// end ;
42800: GO 42763
42802: POP
42803: POP
// end else
42804: GO 42814
// result := false ;
42806: LD_ADDR_VAR 0 3
42810: PUSH
42811: LD_INT 0
42813: ST_TO_ADDR
// end ;
42814: LD_VAR 0 3
42818: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42819: LD_INT 0
42821: PPUSH
42822: PPUSH
42823: PPUSH
// pom := GetBase ( fac ) ;
42824: LD_ADDR_VAR 0 5
42828: PUSH
42829: LD_VAR 0 1
42833: PPUSH
42834: CALL_OW 274
42838: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42839: LD_ADDR_VAR 0 4
42843: PUSH
42844: LD_VAR 0 2
42848: PUSH
42849: LD_INT 1
42851: ARRAY
42852: PPUSH
42853: LD_VAR 0 2
42857: PUSH
42858: LD_INT 2
42860: ARRAY
42861: PPUSH
42862: LD_VAR 0 2
42866: PUSH
42867: LD_INT 3
42869: ARRAY
42870: PPUSH
42871: LD_VAR 0 2
42875: PUSH
42876: LD_INT 4
42878: ARRAY
42879: PPUSH
42880: CALL_OW 449
42884: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42885: LD_ADDR_VAR 0 3
42889: PUSH
42890: LD_VAR 0 5
42894: PPUSH
42895: LD_INT 1
42897: PPUSH
42898: CALL_OW 275
42902: PUSH
42903: LD_VAR 0 4
42907: PUSH
42908: LD_INT 1
42910: ARRAY
42911: GREATEREQUAL
42912: PUSH
42913: LD_VAR 0 5
42917: PPUSH
42918: LD_INT 2
42920: PPUSH
42921: CALL_OW 275
42925: PUSH
42926: LD_VAR 0 4
42930: PUSH
42931: LD_INT 2
42933: ARRAY
42934: GREATEREQUAL
42935: AND
42936: PUSH
42937: LD_VAR 0 5
42941: PPUSH
42942: LD_INT 3
42944: PPUSH
42945: CALL_OW 275
42949: PUSH
42950: LD_VAR 0 4
42954: PUSH
42955: LD_INT 3
42957: ARRAY
42958: GREATEREQUAL
42959: AND
42960: ST_TO_ADDR
// end ;
42961: LD_VAR 0 3
42965: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42966: LD_INT 0
42968: PPUSH
42969: PPUSH
42970: PPUSH
42971: PPUSH
// pom := GetBase ( building ) ;
42972: LD_ADDR_VAR 0 3
42976: PUSH
42977: LD_VAR 0 1
42981: PPUSH
42982: CALL_OW 274
42986: ST_TO_ADDR
// if not pom then
42987: LD_VAR 0 3
42991: NOT
42992: IFFALSE 42996
// exit ;
42994: GO 43166
// btype := GetBType ( building ) ;
42996: LD_ADDR_VAR 0 5
43000: PUSH
43001: LD_VAR 0 1
43005: PPUSH
43006: CALL_OW 266
43010: ST_TO_ADDR
// if btype = b_armoury then
43011: LD_VAR 0 5
43015: PUSH
43016: LD_INT 4
43018: EQUAL
43019: IFFALSE 43029
// btype := b_barracks ;
43021: LD_ADDR_VAR 0 5
43025: PUSH
43026: LD_INT 5
43028: ST_TO_ADDR
// if btype = b_depot then
43029: LD_VAR 0 5
43033: PUSH
43034: LD_INT 0
43036: EQUAL
43037: IFFALSE 43047
// btype := b_warehouse ;
43039: LD_ADDR_VAR 0 5
43043: PUSH
43044: LD_INT 1
43046: ST_TO_ADDR
// if btype = b_workshop then
43047: LD_VAR 0 5
43051: PUSH
43052: LD_INT 2
43054: EQUAL
43055: IFFALSE 43065
// btype := b_factory ;
43057: LD_ADDR_VAR 0 5
43061: PUSH
43062: LD_INT 3
43064: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43065: LD_ADDR_VAR 0 4
43069: PUSH
43070: LD_VAR 0 5
43074: PPUSH
43075: LD_VAR 0 1
43079: PPUSH
43080: CALL_OW 248
43084: PPUSH
43085: CALL_OW 450
43089: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43090: LD_ADDR_VAR 0 2
43094: PUSH
43095: LD_VAR 0 3
43099: PPUSH
43100: LD_INT 1
43102: PPUSH
43103: CALL_OW 275
43107: PUSH
43108: LD_VAR 0 4
43112: PUSH
43113: LD_INT 1
43115: ARRAY
43116: GREATEREQUAL
43117: PUSH
43118: LD_VAR 0 3
43122: PPUSH
43123: LD_INT 2
43125: PPUSH
43126: CALL_OW 275
43130: PUSH
43131: LD_VAR 0 4
43135: PUSH
43136: LD_INT 2
43138: ARRAY
43139: GREATEREQUAL
43140: AND
43141: PUSH
43142: LD_VAR 0 3
43146: PPUSH
43147: LD_INT 3
43149: PPUSH
43150: CALL_OW 275
43154: PUSH
43155: LD_VAR 0 4
43159: PUSH
43160: LD_INT 3
43162: ARRAY
43163: GREATEREQUAL
43164: AND
43165: ST_TO_ADDR
// end ;
43166: LD_VAR 0 2
43170: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43171: LD_INT 0
43173: PPUSH
43174: PPUSH
43175: PPUSH
// pom := GetBase ( building ) ;
43176: LD_ADDR_VAR 0 4
43180: PUSH
43181: LD_VAR 0 1
43185: PPUSH
43186: CALL_OW 274
43190: ST_TO_ADDR
// if not pom then
43191: LD_VAR 0 4
43195: NOT
43196: IFFALSE 43200
// exit ;
43198: GO 43301
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43200: LD_ADDR_VAR 0 5
43204: PUSH
43205: LD_VAR 0 2
43209: PPUSH
43210: LD_VAR 0 1
43214: PPUSH
43215: CALL_OW 248
43219: PPUSH
43220: CALL_OW 450
43224: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43225: LD_ADDR_VAR 0 3
43229: PUSH
43230: LD_VAR 0 4
43234: PPUSH
43235: LD_INT 1
43237: PPUSH
43238: CALL_OW 275
43242: PUSH
43243: LD_VAR 0 5
43247: PUSH
43248: LD_INT 1
43250: ARRAY
43251: GREATEREQUAL
43252: PUSH
43253: LD_VAR 0 4
43257: PPUSH
43258: LD_INT 2
43260: PPUSH
43261: CALL_OW 275
43265: PUSH
43266: LD_VAR 0 5
43270: PUSH
43271: LD_INT 2
43273: ARRAY
43274: GREATEREQUAL
43275: AND
43276: PUSH
43277: LD_VAR 0 4
43281: PPUSH
43282: LD_INT 3
43284: PPUSH
43285: CALL_OW 275
43289: PUSH
43290: LD_VAR 0 5
43294: PUSH
43295: LD_INT 3
43297: ARRAY
43298: GREATEREQUAL
43299: AND
43300: ST_TO_ADDR
// end ;
43301: LD_VAR 0 3
43305: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
43306: LD_INT 0
43308: PPUSH
43309: PPUSH
43310: PPUSH
43311: PPUSH
43312: PPUSH
43313: PPUSH
43314: PPUSH
43315: PPUSH
43316: PPUSH
43317: PPUSH
// result := false ;
43318: LD_ADDR_VAR 0 6
43322: PUSH
43323: LD_INT 0
43325: ST_TO_ADDR
// if not base or not btype or not x or not y then
43326: LD_VAR 0 1
43330: NOT
43331: PUSH
43332: LD_VAR 0 2
43336: NOT
43337: OR
43338: PUSH
43339: LD_VAR 0 3
43343: NOT
43344: OR
43345: PUSH
43346: LD_VAR 0 4
43350: NOT
43351: OR
43352: IFFALSE 43356
// exit ;
43354: GO 43965
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
43356: LD_ADDR_VAR 0 12
43360: PUSH
43361: LD_VAR 0 2
43365: PPUSH
43366: LD_VAR 0 3
43370: PPUSH
43371: LD_VAR 0 4
43375: PPUSH
43376: LD_VAR 0 5
43380: PPUSH
43381: LD_VAR 0 1
43385: PUSH
43386: LD_INT 1
43388: ARRAY
43389: PPUSH
43390: CALL_OW 248
43394: PPUSH
43395: LD_INT 0
43397: PPUSH
43398: CALL 44802 0 6
43402: ST_TO_ADDR
// if not hexes then
43403: LD_VAR 0 12
43407: NOT
43408: IFFALSE 43412
// exit ;
43410: GO 43965
// for i = 1 to hexes do
43412: LD_ADDR_VAR 0 7
43416: PUSH
43417: DOUBLE
43418: LD_INT 1
43420: DEC
43421: ST_TO_ADDR
43422: LD_VAR 0 12
43426: PUSH
43427: FOR_TO
43428: IFFALSE 43963
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43430: LD_ADDR_VAR 0 11
43434: PUSH
43435: LD_VAR 0 12
43439: PUSH
43440: LD_VAR 0 7
43444: ARRAY
43445: PUSH
43446: LD_INT 1
43448: ARRAY
43449: PPUSH
43450: LD_VAR 0 12
43454: PUSH
43455: LD_VAR 0 7
43459: ARRAY
43460: PUSH
43461: LD_INT 2
43463: ARRAY
43464: PPUSH
43465: CALL_OW 428
43469: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43470: LD_VAR 0 12
43474: PUSH
43475: LD_VAR 0 7
43479: ARRAY
43480: PUSH
43481: LD_INT 1
43483: ARRAY
43484: PPUSH
43485: LD_VAR 0 12
43489: PUSH
43490: LD_VAR 0 7
43494: ARRAY
43495: PUSH
43496: LD_INT 2
43498: ARRAY
43499: PPUSH
43500: CALL_OW 351
43504: PUSH
43505: LD_VAR 0 12
43509: PUSH
43510: LD_VAR 0 7
43514: ARRAY
43515: PUSH
43516: LD_INT 1
43518: ARRAY
43519: PPUSH
43520: LD_VAR 0 12
43524: PUSH
43525: LD_VAR 0 7
43529: ARRAY
43530: PUSH
43531: LD_INT 2
43533: ARRAY
43534: PPUSH
43535: CALL_OW 488
43539: NOT
43540: OR
43541: PUSH
43542: LD_VAR 0 11
43546: PPUSH
43547: CALL_OW 247
43551: PUSH
43552: LD_INT 3
43554: EQUAL
43555: OR
43556: IFFALSE 43562
// exit ;
43558: POP
43559: POP
43560: GO 43965
// if not tmp or not tmp in base then
43562: LD_VAR 0 11
43566: NOT
43567: PUSH
43568: LD_VAR 0 11
43572: PUSH
43573: LD_VAR 0 1
43577: IN
43578: NOT
43579: OR
43580: IFFALSE 43584
// continue ;
43582: GO 43427
// result := true ;
43584: LD_ADDR_VAR 0 6
43588: PUSH
43589: LD_INT 1
43591: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43592: LD_ADDR_VAR 0 15
43596: PUSH
43597: LD_VAR 0 1
43601: PPUSH
43602: LD_INT 22
43604: PUSH
43605: LD_VAR 0 11
43609: PPUSH
43610: CALL_OW 255
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 2
43621: PUSH
43622: LD_INT 30
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 30
43634: PUSH
43635: LD_INT 1
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: LIST
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PPUSH
43651: CALL_OW 72
43655: ST_TO_ADDR
// if dep then
43656: LD_VAR 0 15
43660: IFFALSE 43796
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43662: LD_ADDR_VAR 0 14
43666: PUSH
43667: LD_VAR 0 15
43671: PUSH
43672: LD_INT 1
43674: ARRAY
43675: PPUSH
43676: CALL_OW 250
43680: PPUSH
43681: LD_VAR 0 15
43685: PUSH
43686: LD_INT 1
43688: ARRAY
43689: PPUSH
43690: CALL_OW 254
43694: PPUSH
43695: LD_INT 5
43697: PPUSH
43698: CALL_OW 272
43702: PUSH
43703: LD_VAR 0 15
43707: PUSH
43708: LD_INT 1
43710: ARRAY
43711: PPUSH
43712: CALL_OW 251
43716: PPUSH
43717: LD_VAR 0 15
43721: PUSH
43722: LD_INT 1
43724: ARRAY
43725: PPUSH
43726: CALL_OW 254
43730: PPUSH
43731: LD_INT 5
43733: PPUSH
43734: CALL_OW 273
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43743: LD_VAR 0 14
43747: PUSH
43748: LD_INT 1
43750: ARRAY
43751: PPUSH
43752: LD_VAR 0 14
43756: PUSH
43757: LD_INT 2
43759: ARRAY
43760: PPUSH
43761: CALL_OW 488
43765: IFFALSE 43796
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43767: LD_VAR 0 11
43771: PPUSH
43772: LD_VAR 0 14
43776: PUSH
43777: LD_INT 1
43779: ARRAY
43780: PPUSH
43781: LD_VAR 0 14
43785: PUSH
43786: LD_INT 2
43788: ARRAY
43789: PPUSH
43790: CALL_OW 111
// continue ;
43794: GO 43427
// end ; end ; r := GetDir ( tmp ) ;
43796: LD_ADDR_VAR 0 13
43800: PUSH
43801: LD_VAR 0 11
43805: PPUSH
43806: CALL_OW 254
43810: ST_TO_ADDR
// if r = 5 then
43811: LD_VAR 0 13
43815: PUSH
43816: LD_INT 5
43818: EQUAL
43819: IFFALSE 43829
// r := 0 ;
43821: LD_ADDR_VAR 0 13
43825: PUSH
43826: LD_INT 0
43828: ST_TO_ADDR
// for j = r to 5 do
43829: LD_ADDR_VAR 0 8
43833: PUSH
43834: DOUBLE
43835: LD_VAR 0 13
43839: DEC
43840: ST_TO_ADDR
43841: LD_INT 5
43843: PUSH
43844: FOR_TO
43845: IFFALSE 43959
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43847: LD_ADDR_VAR 0 9
43851: PUSH
43852: LD_VAR 0 11
43856: PPUSH
43857: CALL_OW 250
43861: PPUSH
43862: LD_VAR 0 8
43866: PPUSH
43867: LD_INT 2
43869: PPUSH
43870: CALL_OW 272
43874: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43875: LD_ADDR_VAR 0 10
43879: PUSH
43880: LD_VAR 0 11
43884: PPUSH
43885: CALL_OW 251
43889: PPUSH
43890: LD_VAR 0 8
43894: PPUSH
43895: LD_INT 2
43897: PPUSH
43898: CALL_OW 273
43902: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43903: LD_VAR 0 9
43907: PPUSH
43908: LD_VAR 0 10
43912: PPUSH
43913: CALL_OW 488
43917: PUSH
43918: LD_VAR 0 9
43922: PPUSH
43923: LD_VAR 0 10
43927: PPUSH
43928: CALL_OW 428
43932: NOT
43933: AND
43934: IFFALSE 43957
// begin ComMoveXY ( tmp , _x , _y ) ;
43936: LD_VAR 0 11
43940: PPUSH
43941: LD_VAR 0 9
43945: PPUSH
43946: LD_VAR 0 10
43950: PPUSH
43951: CALL_OW 111
// break ;
43955: GO 43959
// end ; end ;
43957: GO 43844
43959: POP
43960: POP
// end ;
43961: GO 43427
43963: POP
43964: POP
// end ;
43965: LD_VAR 0 6
43969: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
43970: LD_INT 0
43972: PPUSH
43973: PPUSH
43974: PPUSH
43975: PPUSH
43976: PPUSH
43977: PPUSH
43978: PPUSH
43979: PPUSH
43980: PPUSH
43981: PPUSH
// result := false ;
43982: LD_ADDR_VAR 0 6
43986: PUSH
43987: LD_INT 0
43989: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43990: LD_VAR 0 1
43994: NOT
43995: PUSH
43996: LD_VAR 0 1
44000: PPUSH
44001: CALL_OW 266
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: LD_INT 1
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: IN
44016: NOT
44017: OR
44018: PUSH
44019: LD_VAR 0 2
44023: NOT
44024: OR
44025: PUSH
44026: LD_VAR 0 5
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: LD_INT 3
44042: PUSH
44043: LD_INT 4
44045: PUSH
44046: LD_INT 5
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: IN
44057: NOT
44058: OR
44059: PUSH
44060: LD_VAR 0 3
44064: PPUSH
44065: LD_VAR 0 4
44069: PPUSH
44070: CALL_OW 488
44074: NOT
44075: OR
44076: IFFALSE 44080
// exit ;
44078: GO 44797
// pom := GetBase ( depot ) ;
44080: LD_ADDR_VAR 0 10
44084: PUSH
44085: LD_VAR 0 1
44089: PPUSH
44090: CALL_OW 274
44094: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44095: LD_ADDR_VAR 0 11
44099: PUSH
44100: LD_VAR 0 2
44104: PPUSH
44105: LD_VAR 0 1
44109: PPUSH
44110: CALL_OW 248
44114: PPUSH
44115: CALL_OW 450
44119: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44120: LD_VAR 0 10
44124: PPUSH
44125: LD_INT 1
44127: PPUSH
44128: CALL_OW 275
44132: PUSH
44133: LD_VAR 0 11
44137: PUSH
44138: LD_INT 1
44140: ARRAY
44141: GREATEREQUAL
44142: PUSH
44143: LD_VAR 0 10
44147: PPUSH
44148: LD_INT 2
44150: PPUSH
44151: CALL_OW 275
44155: PUSH
44156: LD_VAR 0 11
44160: PUSH
44161: LD_INT 2
44163: ARRAY
44164: GREATEREQUAL
44165: AND
44166: PUSH
44167: LD_VAR 0 10
44171: PPUSH
44172: LD_INT 3
44174: PPUSH
44175: CALL_OW 275
44179: PUSH
44180: LD_VAR 0 11
44184: PUSH
44185: LD_INT 3
44187: ARRAY
44188: GREATEREQUAL
44189: AND
44190: NOT
44191: IFFALSE 44195
// exit ;
44193: GO 44797
// if GetBType ( depot ) = b_depot then
44195: LD_VAR 0 1
44199: PPUSH
44200: CALL_OW 266
44204: PUSH
44205: LD_INT 0
44207: EQUAL
44208: IFFALSE 44220
// dist := 28 else
44210: LD_ADDR_VAR 0 14
44214: PUSH
44215: LD_INT 28
44217: ST_TO_ADDR
44218: GO 44228
// dist := 36 ;
44220: LD_ADDR_VAR 0 14
44224: PUSH
44225: LD_INT 36
44227: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44228: LD_VAR 0 1
44232: PPUSH
44233: LD_VAR 0 3
44237: PPUSH
44238: LD_VAR 0 4
44242: PPUSH
44243: CALL_OW 297
44247: PUSH
44248: LD_VAR 0 14
44252: GREATER
44253: IFFALSE 44257
// exit ;
44255: GO 44797
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44257: LD_ADDR_VAR 0 12
44261: PUSH
44262: LD_VAR 0 2
44266: PPUSH
44267: LD_VAR 0 3
44271: PPUSH
44272: LD_VAR 0 4
44276: PPUSH
44277: LD_VAR 0 5
44281: PPUSH
44282: LD_VAR 0 1
44286: PPUSH
44287: CALL_OW 248
44291: PPUSH
44292: LD_INT 0
44294: PPUSH
44295: CALL 44802 0 6
44299: ST_TO_ADDR
// if not hexes then
44300: LD_VAR 0 12
44304: NOT
44305: IFFALSE 44309
// exit ;
44307: GO 44797
// hex := GetHexInfo ( x , y ) ;
44309: LD_ADDR_VAR 0 15
44313: PUSH
44314: LD_VAR 0 3
44318: PPUSH
44319: LD_VAR 0 4
44323: PPUSH
44324: CALL_OW 546
44328: ST_TO_ADDR
// if hex [ 1 ] then
44329: LD_VAR 0 15
44333: PUSH
44334: LD_INT 1
44336: ARRAY
44337: IFFALSE 44341
// exit ;
44339: GO 44797
// height := hex [ 2 ] ;
44341: LD_ADDR_VAR 0 13
44345: PUSH
44346: LD_VAR 0 15
44350: PUSH
44351: LD_INT 2
44353: ARRAY
44354: ST_TO_ADDR
// for i = 1 to hexes do
44355: LD_ADDR_VAR 0 7
44359: PUSH
44360: DOUBLE
44361: LD_INT 1
44363: DEC
44364: ST_TO_ADDR
44365: LD_VAR 0 12
44369: PUSH
44370: FOR_TO
44371: IFFALSE 44701
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44373: LD_VAR 0 12
44377: PUSH
44378: LD_VAR 0 7
44382: ARRAY
44383: PUSH
44384: LD_INT 1
44386: ARRAY
44387: PPUSH
44388: LD_VAR 0 12
44392: PUSH
44393: LD_VAR 0 7
44397: ARRAY
44398: PUSH
44399: LD_INT 2
44401: ARRAY
44402: PPUSH
44403: CALL_OW 488
44407: NOT
44408: PUSH
44409: LD_VAR 0 12
44413: PUSH
44414: LD_VAR 0 7
44418: ARRAY
44419: PUSH
44420: LD_INT 1
44422: ARRAY
44423: PPUSH
44424: LD_VAR 0 12
44428: PUSH
44429: LD_VAR 0 7
44433: ARRAY
44434: PUSH
44435: LD_INT 2
44437: ARRAY
44438: PPUSH
44439: CALL_OW 428
44443: PUSH
44444: LD_INT 0
44446: GREATER
44447: OR
44448: PUSH
44449: LD_VAR 0 12
44453: PUSH
44454: LD_VAR 0 7
44458: ARRAY
44459: PUSH
44460: LD_INT 1
44462: ARRAY
44463: PPUSH
44464: LD_VAR 0 12
44468: PUSH
44469: LD_VAR 0 7
44473: ARRAY
44474: PUSH
44475: LD_INT 2
44477: ARRAY
44478: PPUSH
44479: CALL_OW 351
44483: OR
44484: IFFALSE 44490
// exit ;
44486: POP
44487: POP
44488: GO 44797
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44490: LD_ADDR_VAR 0 8
44494: PUSH
44495: LD_VAR 0 12
44499: PUSH
44500: LD_VAR 0 7
44504: ARRAY
44505: PUSH
44506: LD_INT 1
44508: ARRAY
44509: PPUSH
44510: LD_VAR 0 12
44514: PUSH
44515: LD_VAR 0 7
44519: ARRAY
44520: PUSH
44521: LD_INT 2
44523: ARRAY
44524: PPUSH
44525: CALL_OW 546
44529: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44530: LD_VAR 0 8
44534: PUSH
44535: LD_INT 1
44537: ARRAY
44538: PUSH
44539: LD_VAR 0 8
44543: PUSH
44544: LD_INT 2
44546: ARRAY
44547: PUSH
44548: LD_VAR 0 13
44552: PUSH
44553: LD_INT 2
44555: PLUS
44556: GREATER
44557: OR
44558: PUSH
44559: LD_VAR 0 8
44563: PUSH
44564: LD_INT 2
44566: ARRAY
44567: PUSH
44568: LD_VAR 0 13
44572: PUSH
44573: LD_INT 2
44575: MINUS
44576: LESS
44577: OR
44578: PUSH
44579: LD_VAR 0 8
44583: PUSH
44584: LD_INT 3
44586: ARRAY
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: LD_INT 8
44593: PUSH
44594: LD_INT 9
44596: PUSH
44597: LD_INT 10
44599: PUSH
44600: LD_INT 11
44602: PUSH
44603: LD_INT 12
44605: PUSH
44606: LD_INT 13
44608: PUSH
44609: LD_INT 16
44611: PUSH
44612: LD_INT 17
44614: PUSH
44615: LD_INT 18
44617: PUSH
44618: LD_INT 19
44620: PUSH
44621: LD_INT 20
44623: PUSH
44624: LD_INT 21
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: IN
44642: NOT
44643: OR
44644: PUSH
44645: LD_VAR 0 8
44649: PUSH
44650: LD_INT 5
44652: ARRAY
44653: NOT
44654: OR
44655: PUSH
44656: LD_VAR 0 8
44660: PUSH
44661: LD_INT 6
44663: ARRAY
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: LD_INT 7
44673: PUSH
44674: LD_INT 9
44676: PUSH
44677: LD_INT 10
44679: PUSH
44680: LD_INT 11
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: IN
44691: NOT
44692: OR
44693: IFFALSE 44699
// exit ;
44695: POP
44696: POP
44697: GO 44797
// end ;
44699: GO 44370
44701: POP
44702: POP
// side := GetSide ( depot ) ;
44703: LD_ADDR_VAR 0 9
44707: PUSH
44708: LD_VAR 0 1
44712: PPUSH
44713: CALL_OW 255
44717: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44718: LD_VAR 0 9
44722: PPUSH
44723: LD_VAR 0 3
44727: PPUSH
44728: LD_VAR 0 4
44732: PPUSH
44733: LD_INT 20
44735: PPUSH
44736: CALL 37451 0 4
44740: PUSH
44741: LD_INT 4
44743: ARRAY
44744: IFFALSE 44748
// exit ;
44746: GO 44797
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44748: LD_VAR 0 2
44752: PUSH
44753: LD_INT 29
44755: PUSH
44756: LD_INT 30
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: IN
44763: PUSH
44764: LD_VAR 0 3
44768: PPUSH
44769: LD_VAR 0 4
44773: PPUSH
44774: LD_VAR 0 9
44778: PPUSH
44779: CALL_OW 440
44783: NOT
44784: AND
44785: IFFALSE 44789
// exit ;
44787: GO 44797
// result := true ;
44789: LD_ADDR_VAR 0 6
44793: PUSH
44794: LD_INT 1
44796: ST_TO_ADDR
// end ;
44797: LD_VAR 0 6
44801: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
44802: LD_INT 0
44804: PPUSH
44805: PPUSH
44806: PPUSH
44807: PPUSH
44808: PPUSH
44809: PPUSH
44810: PPUSH
44811: PPUSH
44812: PPUSH
44813: PPUSH
44814: PPUSH
44815: PPUSH
44816: PPUSH
44817: PPUSH
44818: PPUSH
44819: PPUSH
44820: PPUSH
44821: PPUSH
44822: PPUSH
44823: PPUSH
44824: PPUSH
44825: PPUSH
44826: PPUSH
44827: PPUSH
44828: PPUSH
44829: PPUSH
44830: PPUSH
44831: PPUSH
44832: PPUSH
44833: PPUSH
44834: PPUSH
44835: PPUSH
44836: PPUSH
44837: PPUSH
44838: PPUSH
44839: PPUSH
44840: PPUSH
44841: PPUSH
44842: PPUSH
44843: PPUSH
44844: PPUSH
44845: PPUSH
44846: PPUSH
44847: PPUSH
44848: PPUSH
44849: PPUSH
44850: PPUSH
44851: PPUSH
44852: PPUSH
44853: PPUSH
44854: PPUSH
44855: PPUSH
44856: PPUSH
44857: PPUSH
44858: PPUSH
44859: PPUSH
44860: PPUSH
44861: PPUSH
// result = [ ] ;
44862: LD_ADDR_VAR 0 7
44866: PUSH
44867: EMPTY
44868: ST_TO_ADDR
// temp_list = [ ] ;
44869: LD_ADDR_VAR 0 9
44873: PUSH
44874: EMPTY
44875: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44876: LD_VAR 0 4
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: LD_INT 2
44889: PUSH
44890: LD_INT 3
44892: PUSH
44893: LD_INT 4
44895: PUSH
44896: LD_INT 5
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: IN
44907: NOT
44908: PUSH
44909: LD_VAR 0 1
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: IN
44924: PUSH
44925: LD_VAR 0 5
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: LD_INT 2
44935: PUSH
44936: LD_INT 3
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: LIST
44943: IN
44944: NOT
44945: AND
44946: OR
44947: IFFALSE 44951
// exit ;
44949: GO 63342
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44951: LD_VAR 0 1
44955: PUSH
44956: LD_INT 6
44958: PUSH
44959: LD_INT 7
44961: PUSH
44962: LD_INT 8
44964: PUSH
44965: LD_INT 13
44967: PUSH
44968: LD_INT 12
44970: PUSH
44971: LD_INT 15
44973: PUSH
44974: LD_INT 11
44976: PUSH
44977: LD_INT 14
44979: PUSH
44980: LD_INT 10
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: IN
44994: IFFALSE 45004
// btype = b_lab ;
44996: LD_ADDR_VAR 0 1
45000: PUSH
45001: LD_INT 6
45003: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45004: LD_VAR 0 6
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: LD_INT 2
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: LIST
45022: IN
45023: NOT
45024: PUSH
45025: LD_VAR 0 1
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: LD_INT 2
45038: PUSH
45039: LD_INT 3
45041: PUSH
45042: LD_INT 6
45044: PUSH
45045: LD_INT 36
45047: PUSH
45048: LD_INT 4
45050: PUSH
45051: LD_INT 5
45053: PUSH
45054: LD_INT 31
45056: PUSH
45057: LD_INT 32
45059: PUSH
45060: LD_INT 33
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: IN
45076: NOT
45077: PUSH
45078: LD_VAR 0 6
45082: PUSH
45083: LD_INT 1
45085: EQUAL
45086: AND
45087: OR
45088: PUSH
45089: LD_VAR 0 1
45093: PUSH
45094: LD_INT 2
45096: PUSH
45097: LD_INT 3
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: IN
45104: NOT
45105: PUSH
45106: LD_VAR 0 6
45110: PUSH
45111: LD_INT 2
45113: EQUAL
45114: AND
45115: OR
45116: IFFALSE 45126
// mode = 0 ;
45118: LD_ADDR_VAR 0 6
45122: PUSH
45123: LD_INT 0
45125: ST_TO_ADDR
// case mode of 0 :
45126: LD_VAR 0 6
45130: PUSH
45131: LD_INT 0
45133: DOUBLE
45134: EQUAL
45135: IFTRUE 45139
45137: GO 56592
45139: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45140: LD_ADDR_VAR 0 11
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 0
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 1
45209: NEG
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: LD_INT 2
45236: NEG
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: LD_INT 1
45247: NEG
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: LD_INT 2
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: LD_INT 3
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: LD_INT 3
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 1
45306: NEG
45307: PUSH
45308: LD_INT 2
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45333: LD_ADDR_VAR 0 12
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: LD_INT 0
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: NEG
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 2
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 2
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 2
45456: NEG
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 2
45467: NEG
45468: PUSH
45469: LD_INT 1
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 2
45479: NEG
45480: PUSH
45481: LD_INT 1
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 3
45490: NEG
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 3
45501: NEG
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45529: LD_ADDR_VAR 0 13
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: LD_INT 2
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 2
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 2
45632: PUSH
45633: LD_INT 2
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: LD_INT 2
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 2
45652: NEG
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 2
45664: NEG
45665: PUSH
45666: LD_INT 2
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 2
45676: NEG
45677: PUSH
45678: LD_INT 3
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 3
45688: NEG
45689: PUSH
45690: LD_INT 2
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 3
45700: NEG
45701: PUSH
45702: LD_INT 3
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45728: LD_ADDR_VAR 0 14
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: LD_INT 1
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: LD_INT 1
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: LD_INT 2
45813: NEG
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: LD_INT 2
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: LD_INT 1
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: LD_INT 2
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: LD_INT 2
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: LD_INT 3
45878: NEG
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: LD_INT 3
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: LD_INT 2
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45924: LD_ADDR_VAR 0 15
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: LD_INT 1
45944: NEG
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: LD_INT 1
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 2
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 2
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 2
46047: NEG
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 2
46058: NEG
46059: PUSH
46060: LD_INT 1
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 2
46070: PUSH
46071: LD_INT 1
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 3
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 3
46091: PUSH
46092: LD_INT 1
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46117: LD_ADDR_VAR 0 16
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: LD_INT 2
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 2
46220: PUSH
46221: LD_INT 2
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: LD_INT 2
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 2
46240: NEG
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 2
46252: NEG
46253: PUSH
46254: LD_INT 2
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 3
46264: PUSH
46265: LD_INT 2
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 3
46274: PUSH
46275: LD_INT 3
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 2
46284: PUSH
46285: LD_INT 3
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46310: LD_ADDR_VAR 0 17
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 1
46379: NEG
46380: PUSH
46381: LD_INT 1
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: NEG
46392: PUSH
46393: LD_INT 2
46395: NEG
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: LD_INT 2
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 2
46425: PUSH
46426: LD_INT 0
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 2
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 2
46445: PUSH
46446: LD_INT 2
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 1
46455: PUSH
46456: LD_INT 2
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: LD_INT 2
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 1
46475: NEG
46476: PUSH
46477: LD_INT 1
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 2
46486: NEG
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 2
46497: NEG
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 2
46509: NEG
46510: PUSH
46511: LD_INT 2
46513: NEG
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46540: LD_ADDR_VAR 0 18
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: LD_INT 0
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: LD_INT 0
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: LD_INT 2
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: LD_INT 2
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 2
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: LD_INT 1
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: PUSH
46676: LD_INT 2
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 2
46716: NEG
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 2
46727: NEG
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 2
46739: NEG
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46770: LD_ADDR_VAR 0 19
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: LD_INT 2
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: LD_INT 2
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: LD_INT 2
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: LD_INT 2
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 2
46946: NEG
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 2
46957: NEG
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 2
46969: NEG
46970: PUSH
46971: LD_INT 2
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47000: LD_ADDR_VAR 0 20
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 2
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: LD_INT 2
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 2
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: LD_INT 2
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 0
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: NEG
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 2
47176: NEG
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 2
47187: NEG
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: LD_INT 2
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47230: LD_ADDR_VAR 0 21
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: LD_INT 1
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: NEG
47312: PUSH
47313: LD_INT 2
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: LD_INT 2
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 2
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: LD_INT 2
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: LD_INT 2
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: LD_INT 2
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: NEG
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 2
47406: NEG
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 2
47417: NEG
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 2
47429: NEG
47430: PUSH
47431: LD_INT 2
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47460: LD_ADDR_VAR 0 22
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: NEG
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: LD_INT 2
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: LD_INT 2
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 2
47585: PUSH
47586: LD_INT 1
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 2
47595: PUSH
47596: LD_INT 2
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 2
47636: NEG
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 2
47647: NEG
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 2
47659: NEG
47660: PUSH
47661: LD_INT 2
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47690: LD_ADDR_VAR 0 23
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 0
47707: PUSH
47708: LD_INT 1
47710: NEG
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 1
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: LD_INT 1
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: LD_INT 2
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: LD_INT 2
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 2
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: LD_INT 2
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: LD_INT 2
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: LD_INT 2
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 1
47855: NEG
47856: PUSH
47857: LD_INT 1
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 2
47866: NEG
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 2
47877: NEG
47878: PUSH
47879: LD_INT 1
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 2
47889: NEG
47890: PUSH
47891: LD_INT 2
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: NEG
47902: PUSH
47903: LD_INT 3
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: LD_INT 3
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: LD_INT 2
47928: NEG
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 2
47936: PUSH
47937: LD_INT 1
47939: NEG
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47970: LD_ADDR_VAR 0 24
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 1
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 1
48051: NEG
48052: PUSH
48053: LD_INT 2
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 2
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 2
48085: PUSH
48086: LD_INT 0
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 2
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 2
48105: PUSH
48106: LD_INT 2
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 2
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 2
48146: NEG
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 2
48157: NEG
48158: PUSH
48159: LD_INT 1
48161: NEG
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 2
48169: NEG
48170: PUSH
48171: LD_INT 2
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: LD_INT 2
48184: NEG
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 2
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 3
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 3
48213: PUSH
48214: LD_INT 2
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48246: LD_ADDR_VAR 0 25
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: LD_INT 2
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: LD_INT 2
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 2
48361: PUSH
48362: LD_INT 0
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 2
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 2
48381: PUSH
48382: LD_INT 2
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: LD_INT 2
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: LD_INT 2
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 2
48422: NEG
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 2
48433: NEG
48434: PUSH
48435: LD_INT 1
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 2
48445: NEG
48446: PUSH
48447: LD_INT 2
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 3
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 3
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 2
48477: PUSH
48478: LD_INT 3
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: LD_INT 3
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48520: LD_ADDR_VAR 0 26
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: LD_INT 1
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 0
48613: PUSH
48614: LD_INT 2
48616: NEG
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 2
48655: PUSH
48656: LD_INT 2
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: LD_INT 2
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: LD_INT 2
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: NEG
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 2
48696: NEG
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 2
48707: NEG
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 2
48719: NEG
48720: PUSH
48721: LD_INT 2
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 2
48731: PUSH
48732: LD_INT 3
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: PUSH
48742: LD_INT 3
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 2
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48796: LD_ADDR_VAR 0 27
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: LD_INT 0
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: LD_INT 1
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: LD_INT 2
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: LD_INT 2
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 2
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: LD_INT 2
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: LD_INT 2
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: NEG
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: NEG
48984: PUSH
48985: LD_INT 1
48987: NEG
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 2
48995: NEG
48996: PUSH
48997: LD_INT 2
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: LD_INT 2
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 2
49018: NEG
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 3
49029: NEG
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 3
49041: NEG
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49076: LD_ADDR_VAR 0 28
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: LD_INT 2
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: LD_INT 2
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: LD_INT 1
49183: NEG
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 2
49191: PUSH
49192: LD_INT 0
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 2
49211: PUSH
49212: LD_INT 2
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: LD_INT 2
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 2
49252: NEG
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 2
49263: NEG
49264: PUSH
49265: LD_INT 1
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 2
49275: NEG
49276: PUSH
49277: LD_INT 2
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 2
49287: NEG
49288: PUSH
49289: LD_INT 3
49291: NEG
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: LD_INT 3
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 3
49311: NEG
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 3
49323: NEG
49324: PUSH
49325: LD_INT 2
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49358: LD_ADDR_VAR 0 29
49362: PUSH
49363: LD_INT 0
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: LD_INT 2
49443: NEG
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: LD_INT 2
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 2
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 2
49524: NEG
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 2
49536: NEG
49537: PUSH
49538: LD_INT 2
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 2
49548: NEG
49549: PUSH
49550: LD_INT 3
49552: NEG
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 2
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 3
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: LD_INT 3
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 1
49591: NEG
49592: PUSH
49593: LD_INT 2
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 3
49602: NEG
49603: PUSH
49604: LD_INT 2
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49637: LD_ADDR_VAR 0 30
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: LD_INT 2
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: LD_INT 2
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: PUSH
49742: LD_INT 1
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 2
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 2
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 2
49772: PUSH
49773: LD_INT 2
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 1
49782: PUSH
49783: LD_INT 2
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 1
49792: NEG
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 2
49803: NEG
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 2
49814: NEG
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: NEG
49827: PUSH
49828: LD_INT 3
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 3
49849: PUSH
49850: LD_INT 2
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 2
49859: PUSH
49860: LD_INT 3
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 2
49869: NEG
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 3
49880: NEG
49881: PUSH
49882: LD_INT 1
49884: NEG
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49915: LD_ADDR_VAR 0 31
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 0
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 1
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: LD_INT 1
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 1
49984: NEG
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: LD_INT 2
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 2
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 2
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 2
50039: PUSH
50040: LD_INT 2
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 1
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: NEG
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 2
50080: NEG
50081: PUSH
50082: LD_INT 1
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 2
50092: NEG
50093: PUSH
50094: LD_INT 2
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 2
50104: NEG
50105: PUSH
50106: LD_INT 3
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 2
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 3
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: LD_INT 3
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: LD_INT 2
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 3
50158: NEG
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50193: LD_ADDR_VAR 0 32
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 1
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: LD_INT 2
50278: NEG
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: LD_INT 2
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 2
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 2
50318: PUSH
50319: LD_INT 2
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: PUSH
50329: LD_INT 2
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: LD_INT 2
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: LD_INT 1
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 2
50359: NEG
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 2
50370: NEG
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: LD_INT 3
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: LD_INT 2
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 3
50405: PUSH
50406: LD_INT 2
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 2
50415: PUSH
50416: LD_INT 3
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 2
50425: NEG
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 3
50436: NEG
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50471: LD_ADDR_VAR 0 33
50475: PUSH
50476: LD_INT 0
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 1
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: LD_INT 1
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: LD_INT 1
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 1
50529: NEG
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: LD_INT 1
50544: NEG
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: LD_INT 2
50556: NEG
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 2
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: LD_INT 2
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: LD_INT 2
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 1
50615: NEG
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 2
50626: NEG
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 2
50637: NEG
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 2
50649: NEG
50650: PUSH
50651: LD_INT 2
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 2
50661: NEG
50662: PUSH
50663: LD_INT 3
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 2
50673: PUSH
50674: LD_INT 1
50676: NEG
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 3
50684: PUSH
50685: LD_INT 1
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: LD_INT 3
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 1
50704: NEG
50705: PUSH
50706: LD_INT 2
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 3
50715: NEG
50716: PUSH
50717: LD_INT 2
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50750: LD_ADDR_VAR 0 34
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 1
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: LD_INT 2
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: LD_INT 2
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 2
50875: PUSH
50876: LD_INT 2
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: LD_INT 2
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: LD_INT 1
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 2
50906: NEG
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 2
50917: NEG
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 2
50929: NEG
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: LD_INT 3
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 3
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 2
50974: PUSH
50975: LD_INT 3
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 2
50984: NEG
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 3
50995: NEG
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51030: LD_ADDR_VAR 0 35
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 2
51121: NEG
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51142: LD_ADDR_VAR 0 36
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: LD_INT 1
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: LD_INT 0
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: LD_INT 1
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: LD_INT 1
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: NEG
51212: PUSH
51213: LD_INT 1
51215: NEG
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 1
51223: NEG
51224: PUSH
51225: LD_INT 2
51227: NEG
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: LD_INT 2
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51254: LD_ADDR_VAR 0 37
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: NEG
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51366: LD_ADDR_VAR 0 38
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 2
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 2
51457: NEG
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51478: LD_ADDR_VAR 0 39
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: LD_INT 2
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: LD_INT 2
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51590: LD_ADDR_VAR 0 40
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: LD_INT 1
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: PUSH
51672: LD_INT 1
51674: NEG
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 1
51682: NEG
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51702: LD_ADDR_VAR 0 41
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: LD_INT 2
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 2
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 2
51826: PUSH
51827: LD_INT 2
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: LD_INT 2
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: LD_INT 1
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 2
51857: NEG
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 2
51868: NEG
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 2
51880: NEG
51881: PUSH
51882: LD_INT 2
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 2
51892: NEG
51893: PUSH
51894: LD_INT 3
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 3
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 3
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 3
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 3
51945: PUSH
51946: LD_INT 3
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: PUSH
51956: LD_INT 3
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 2
51965: NEG
51966: PUSH
51967: LD_INT 1
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 3
51976: NEG
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 3
51987: NEG
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 3
51999: NEG
52000: PUSH
52001: LD_INT 2
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 3
52011: NEG
52012: PUSH
52013: LD_INT 3
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52052: LD_ADDR_VAR 0 42
52056: PUSH
52057: LD_INT 0
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 0
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: LD_INT 1
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: LD_INT 2
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: LD_INT 2
52148: NEG
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: LD_INT 2
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: PUSH
52188: LD_INT 2
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: LD_INT 2
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 2
52218: NEG
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 2
52230: NEG
52231: PUSH
52232: LD_INT 2
52234: NEG
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 2
52242: NEG
52243: PUSH
52244: LD_INT 3
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: LD_INT 3
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: LD_INT 3
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: LD_INT 2
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 3
52288: PUSH
52289: LD_INT 2
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 3
52298: PUSH
52299: LD_INT 3
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 2
52308: PUSH
52309: LD_INT 3
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 1
52318: PUSH
52319: LD_INT 3
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 0
52328: PUSH
52329: LD_INT 3
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 1
52338: NEG
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 3
52349: NEG
52350: PUSH
52351: LD_INT 2
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 3
52361: NEG
52362: PUSH
52363: LD_INT 3
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52402: LD_ADDR_VAR 0 43
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: LD_INT 0
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: LD_INT 1
52422: NEG
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: PUSH
52441: LD_INT 1
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: LD_INT 1
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 1
52483: NEG
52484: PUSH
52485: LD_INT 2
52487: NEG
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: LD_INT 2
52498: NEG
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 2
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 2
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: LD_INT 2
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: LD_INT 2
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 2
52568: NEG
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 2
52579: NEG
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: LD_INT 3
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 0
52603: PUSH
52604: LD_INT 3
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: LD_INT 2
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 2
52625: PUSH
52626: LD_INT 1
52628: NEG
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 3
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 3
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: LD_INT 3
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: LD_INT 3
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: NEG
52677: PUSH
52678: LD_INT 2
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 2
52687: NEG
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 3
52698: NEG
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 3
52709: NEG
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52750: LD_ADDR_VAR 0 44
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: NEG
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: LD_INT 2
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 1
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 2
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 2
52874: PUSH
52875: LD_INT 2
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: LD_INT 2
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 2
52905: NEG
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 2
52916: NEG
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 2
52928: NEG
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 2
52940: NEG
52941: PUSH
52942: LD_INT 3
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 2
52952: PUSH
52953: LD_INT 1
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 3
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 3
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 3
52983: PUSH
52984: LD_INT 2
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 3
52993: PUSH
52994: LD_INT 3
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 2
53003: PUSH
53004: LD_INT 3
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 2
53013: NEG
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 3
53024: NEG
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 3
53035: NEG
53036: PUSH
53037: LD_INT 1
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 3
53047: NEG
53048: PUSH
53049: LD_INT 2
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 3
53059: NEG
53060: PUSH
53061: LD_INT 3
53063: NEG
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53100: LD_ADDR_VAR 0 45
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 0
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 1
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: LD_INT 0
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: LD_INT 2
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: LD_INT 2
53196: NEG
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 2
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 2
53225: PUSH
53226: LD_INT 2
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: LD_INT 2
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: LD_INT 2
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 2
53266: NEG
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 2
53278: NEG
53279: PUSH
53280: LD_INT 2
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 2
53290: NEG
53291: PUSH
53292: LD_INT 3
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: LD_INT 3
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: LD_INT 3
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: LD_INT 2
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 3
53336: PUSH
53337: LD_INT 2
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 3
53346: PUSH
53347: LD_INT 3
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 2
53356: PUSH
53357: LD_INT 3
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: LD_INT 3
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: LD_INT 3
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: LD_INT 2
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 3
53397: NEG
53398: PUSH
53399: LD_INT 2
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 3
53409: NEG
53410: PUSH
53411: LD_INT 3
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53450: LD_ADDR_VAR 0 46
53454: PUSH
53455: LD_INT 0
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: LD_INT 1
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 0
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: NEG
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: LD_INT 1
53523: NEG
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: LD_INT 2
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: LD_INT 2
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: LD_INT 0
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 2
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: LD_INT 2
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: LD_INT 2
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 2
53616: NEG
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 2
53627: NEG
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 1
53639: NEG
53640: PUSH
53641: LD_INT 3
53643: NEG
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: LD_INT 3
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: LD_INT 2
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 2
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 3
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 3
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 1
53704: PUSH
53705: LD_INT 3
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: LD_INT 3
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: LD_INT 2
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 2
53735: NEG
53736: PUSH
53737: LD_INT 1
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 3
53746: NEG
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 3
53757: NEG
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53798: LD_ADDR_VAR 0 47
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 1
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: LD_INT 2
53883: NEG
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 1
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 2
53913: NEG
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 2
53925: NEG
53926: PUSH
53927: LD_INT 2
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53949: LD_ADDR_VAR 0 48
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: LD_INT 0
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: LD_INT 1
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: LD_INT 1
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 1
54030: NEG
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: LD_INT 1
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 2
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 2
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54096: LD_ADDR_VAR 0 49
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 1
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 1
54154: NEG
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 2
54198: PUSH
54199: LD_INT 1
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 2
54208: PUSH
54209: LD_INT 2
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: LD_INT 2
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54240: LD_ADDR_VAR 0 50
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 1
54309: NEG
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 2
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 2
54331: PUSH
54332: LD_INT 2
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: LD_INT 2
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: LD_INT 2
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54384: LD_ADDR_VAR 0 51
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: PUSH
54466: LD_INT 2
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: LD_INT 2
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 2
54507: NEG
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54531: LD_ADDR_VAR 0 52
54535: PUSH
54536: LD_INT 0
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: LD_INT 1
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: NEG
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 1
54612: NEG
54613: PUSH
54614: LD_INT 2
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 2
54635: NEG
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 2
54646: NEG
54647: PUSH
54648: LD_INT 1
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 2
54658: NEG
54659: PUSH
54660: LD_INT 2
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54682: LD_ADDR_VAR 0 53
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 0
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 1
54740: NEG
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: NEG
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: LD_INT 2
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: LD_INT 2
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: LD_INT 1
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 2
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 2
54807: PUSH
54808: LD_INT 1
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 2
54817: PUSH
54818: LD_INT 2
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: LD_INT 2
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: LD_INT 2
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 2
54858: NEG
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 2
54869: NEG
54870: PUSH
54871: LD_INT 1
54873: NEG
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 2
54881: NEG
54882: PUSH
54883: LD_INT 2
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54912: LD_ADDR_VAR 0 54
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 0
54929: PUSH
54930: LD_INT 1
54932: NEG
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: LD_INT 2
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: LD_INT 2
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: LD_INT 1
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 2
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 2
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 2
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: LD_INT 2
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: LD_INT 2
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 2
55088: NEG
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 2
55099: NEG
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 2
55111: NEG
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55142: LD_ADDR_VAR 0 55
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 1
55180: PUSH
55181: LD_INT 1
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: LD_INT 1
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: LD_INT 2
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: LD_INT 2
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 2
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 2
55267: PUSH
55268: LD_INT 1
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 2
55277: PUSH
55278: LD_INT 2
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: LD_INT 2
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: LD_INT 2
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: NEG
55308: PUSH
55309: LD_INT 1
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 2
55318: NEG
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: LD_INT 1
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 2
55341: NEG
55342: PUSH
55343: LD_INT 2
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55372: LD_ADDR_VAR 0 56
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: LD_INT 1
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: LD_INT 2
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: LD_INT 2
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 2
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 2
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 2
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: LD_INT 2
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: LD_INT 2
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 1
55537: NEG
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 2
55548: NEG
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 2
55559: NEG
55560: PUSH
55561: LD_INT 1
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 2
55571: NEG
55572: PUSH
55573: LD_INT 2
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55602: LD_ADDR_VAR 0 57
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: LD_INT 0
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: PUSH
55641: LD_INT 1
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: LD_INT 2
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: LD_INT 2
55698: NEG
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 2
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 2
55727: PUSH
55728: LD_INT 1
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 2
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: LD_INT 2
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: LD_INT 2
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: LD_INT 1
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 2
55778: NEG
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 2
55789: NEG
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 2
55801: NEG
55802: PUSH
55803: LD_INT 2
55805: NEG
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55832: LD_ADDR_VAR 0 58
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: LD_INT 1
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 1
55890: NEG
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: LD_INT 2
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: LD_INT 2
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 2
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 2
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 2
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: LD_INT 2
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: LD_INT 2
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: LD_INT 1
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 2
56008: NEG
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 2
56019: NEG
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 2
56031: NEG
56032: PUSH
56033: LD_INT 2
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56062: LD_ADDR_VAR 0 59
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56150: LD_ADDR_VAR 0 60
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: PUSH
56189: LD_INT 1
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: LD_INT 1
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: LD_INT 1
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56238: LD_ADDR_VAR 0 61
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: LD_INT 1
56258: NEG
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: PUSH
56277: LD_INT 1
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: LD_INT 1
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: NEG
56308: PUSH
56309: LD_INT 1
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56326: LD_ADDR_VAR 0 62
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: LD_INT 0
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: LD_INT 1
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: LD_INT 1
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56414: LD_ADDR_VAR 0 63
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: LD_INT 0
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: NEG
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56502: LD_ADDR_VAR 0 64
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: LD_INT 1
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: LD_INT 1
56575: NEG
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: ST_TO_ADDR
// end ; 1 :
56590: GO 62487
56592: LD_INT 1
56594: DOUBLE
56595: EQUAL
56596: IFTRUE 56600
56598: GO 59223
56600: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56601: LD_ADDR_VAR 0 11
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: LD_INT 3
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: LD_INT 3
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: LD_INT 2
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: LIST
56644: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56645: LD_ADDR_VAR 0 12
56649: PUSH
56650: LD_INT 2
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 3
56663: PUSH
56664: LD_INT 0
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 3
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: LIST
56685: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56686: LD_ADDR_VAR 0 13
56690: PUSH
56691: LD_INT 3
56693: PUSH
56694: LD_INT 2
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 3
56703: PUSH
56704: LD_INT 3
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 2
56713: PUSH
56714: LD_INT 3
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: LIST
56725: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56726: LD_ADDR_VAR 0 14
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: LD_INT 3
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: LD_INT 3
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 1
56753: NEG
56754: PUSH
56755: LD_INT 2
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: LIST
56766: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56767: LD_ADDR_VAR 0 15
56771: PUSH
56772: LD_INT 2
56774: NEG
56775: PUSH
56776: LD_INT 1
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 3
56785: NEG
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 3
56796: NEG
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: LIST
56810: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56811: LD_ADDR_VAR 0 16
56815: PUSH
56816: LD_INT 2
56818: NEG
56819: PUSH
56820: LD_INT 3
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 3
56830: NEG
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 3
56842: NEG
56843: PUSH
56844: LD_INT 3
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: LIST
56856: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56857: LD_ADDR_VAR 0 17
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: LD_INT 3
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: LD_INT 3
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: LD_INT 2
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: LIST
56900: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56901: LD_ADDR_VAR 0 18
56905: PUSH
56906: LD_INT 2
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 3
56919: PUSH
56920: LD_INT 0
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 3
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: LIST
56941: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56942: LD_ADDR_VAR 0 19
56946: PUSH
56947: LD_INT 3
56949: PUSH
56950: LD_INT 2
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 3
56959: PUSH
56960: LD_INT 3
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 2
56969: PUSH
56970: LD_INT 3
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: LIST
56981: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56982: LD_ADDR_VAR 0 20
56986: PUSH
56987: LD_INT 1
56989: PUSH
56990: LD_INT 3
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 0
56999: PUSH
57000: LD_INT 3
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 1
57009: NEG
57010: PUSH
57011: LD_INT 2
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: LIST
57022: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57023: LD_ADDR_VAR 0 21
57027: PUSH
57028: LD_INT 2
57030: NEG
57031: PUSH
57032: LD_INT 1
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 3
57041: NEG
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 3
57052: NEG
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: LIST
57066: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57067: LD_ADDR_VAR 0 22
57071: PUSH
57072: LD_INT 2
57074: NEG
57075: PUSH
57076: LD_INT 3
57078: NEG
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 3
57086: NEG
57087: PUSH
57088: LD_INT 2
57090: NEG
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 3
57098: NEG
57099: PUSH
57100: LD_INT 3
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: LIST
57112: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57113: LD_ADDR_VAR 0 23
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: LD_INT 3
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: LD_INT 4
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: LD_INT 3
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: LIST
57156: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57157: LD_ADDR_VAR 0 24
57161: PUSH
57162: LD_INT 3
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 3
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 4
57185: PUSH
57186: LD_INT 1
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: LIST
57197: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57198: LD_ADDR_VAR 0 25
57202: PUSH
57203: LD_INT 3
57205: PUSH
57206: LD_INT 3
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 4
57215: PUSH
57216: LD_INT 3
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 3
57225: PUSH
57226: LD_INT 4
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: LIST
57237: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57238: LD_ADDR_VAR 0 26
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: LD_INT 3
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: LD_INT 4
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: LD_INT 3
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: LIST
57278: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57279: LD_ADDR_VAR 0 27
57283: PUSH
57284: LD_INT 3
57286: NEG
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 3
57297: NEG
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 4
57308: NEG
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: LIST
57322: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57323: LD_ADDR_VAR 0 28
57327: PUSH
57328: LD_INT 3
57330: NEG
57331: PUSH
57332: LD_INT 3
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 3
57342: NEG
57343: PUSH
57344: LD_INT 4
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 4
57354: NEG
57355: PUSH
57356: LD_INT 3
57358: NEG
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: LIST
57368: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57369: LD_ADDR_VAR 0 29
57373: PUSH
57374: LD_INT 1
57376: NEG
57377: PUSH
57378: LD_INT 3
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: LD_INT 3
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: LD_INT 2
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 1
57410: NEG
57411: PUSH
57412: LD_INT 4
57414: NEG
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 0
57422: PUSH
57423: LD_INT 4
57425: NEG
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 1
57433: PUSH
57434: LD_INT 3
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: LD_INT 5
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: LD_INT 5
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: LD_INT 4
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 1
57478: NEG
57479: PUSH
57480: LD_INT 6
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: LD_INT 6
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 1
57501: PUSH
57502: LD_INT 5
57504: NEG
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57524: LD_ADDR_VAR 0 30
57528: PUSH
57529: LD_INT 2
57531: PUSH
57532: LD_INT 1
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 3
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 3
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 3
57562: PUSH
57563: LD_INT 1
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 4
57573: PUSH
57574: LD_INT 0
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 4
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 4
57593: PUSH
57594: LD_INT 1
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 5
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 5
57614: PUSH
57615: LD_INT 1
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 5
57624: PUSH
57625: LD_INT 1
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 6
57635: PUSH
57636: LD_INT 0
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 6
57645: PUSH
57646: LD_INT 1
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57667: LD_ADDR_VAR 0 31
57671: PUSH
57672: LD_INT 3
57674: PUSH
57675: LD_INT 2
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 3
57684: PUSH
57685: LD_INT 3
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 2
57694: PUSH
57695: LD_INT 3
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 4
57704: PUSH
57705: LD_INT 3
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 4
57714: PUSH
57715: LD_INT 4
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 3
57724: PUSH
57725: LD_INT 4
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 5
57734: PUSH
57735: LD_INT 4
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 5
57744: PUSH
57745: LD_INT 5
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 4
57754: PUSH
57755: LD_INT 5
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 6
57764: PUSH
57765: LD_INT 5
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 6
57774: PUSH
57775: LD_INT 6
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 5
57784: PUSH
57785: LD_INT 6
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57806: LD_ADDR_VAR 0 32
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: LD_INT 3
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 0
57823: PUSH
57824: LD_INT 3
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: LD_INT 2
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 1
57844: PUSH
57845: LD_INT 4
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 0
57854: PUSH
57855: LD_INT 4
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: NEG
57865: PUSH
57866: LD_INT 3
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 1
57875: PUSH
57876: LD_INT 5
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: LD_INT 5
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: LD_INT 4
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 1
57906: PUSH
57907: LD_INT 6
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: LD_INT 6
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 1
57926: NEG
57927: PUSH
57928: LD_INT 5
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57949: LD_ADDR_VAR 0 33
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PUSH
57958: LD_INT 1
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 3
57967: NEG
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 3
57978: NEG
57979: PUSH
57980: LD_INT 1
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 3
57990: NEG
57991: PUSH
57992: LD_INT 1
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 4
58001: NEG
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 4
58012: NEG
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 4
58024: NEG
58025: PUSH
58026: LD_INT 1
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 5
58035: NEG
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 5
58046: NEG
58047: PUSH
58048: LD_INT 1
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 5
58058: NEG
58059: PUSH
58060: LD_INT 1
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 6
58069: NEG
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 6
58080: NEG
58081: PUSH
58082: LD_INT 1
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58104: LD_ADDR_VAR 0 34
58108: PUSH
58109: LD_INT 2
58111: NEG
58112: PUSH
58113: LD_INT 3
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 3
58123: NEG
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 3
58135: NEG
58136: PUSH
58137: LD_INT 3
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 3
58147: NEG
58148: PUSH
58149: LD_INT 4
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 4
58159: NEG
58160: PUSH
58161: LD_INT 3
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 4
58171: NEG
58172: PUSH
58173: LD_INT 4
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 4
58183: NEG
58184: PUSH
58185: LD_INT 5
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 5
58195: NEG
58196: PUSH
58197: LD_INT 4
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 5
58207: NEG
58208: PUSH
58209: LD_INT 5
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 5
58219: NEG
58220: PUSH
58221: LD_INT 6
58223: NEG
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 6
58231: NEG
58232: PUSH
58233: LD_INT 5
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 6
58243: NEG
58244: PUSH
58245: LD_INT 6
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58267: LD_ADDR_VAR 0 41
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: LD_INT 2
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 1
58285: NEG
58286: PUSH
58287: LD_INT 3
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 1
58297: PUSH
58298: LD_INT 2
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: LIST
58310: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58311: LD_ADDR_VAR 0 42
58315: PUSH
58316: LD_INT 2
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 2
58328: PUSH
58329: LD_INT 1
58331: NEG
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 3
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: LIST
58351: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58352: LD_ADDR_VAR 0 43
58356: PUSH
58357: LD_INT 2
58359: PUSH
58360: LD_INT 2
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 3
58369: PUSH
58370: LD_INT 2
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 2
58379: PUSH
58380: LD_INT 3
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: LIST
58391: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58392: LD_ADDR_VAR 0 44
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: LD_INT 2
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 1
58409: PUSH
58410: LD_INT 3
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: NEG
58420: PUSH
58421: LD_INT 2
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: LIST
58432: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58433: LD_ADDR_VAR 0 45
58437: PUSH
58438: LD_INT 2
58440: NEG
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 2
58451: NEG
58452: PUSH
58453: LD_INT 1
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 3
58462: NEG
58463: PUSH
58464: LD_INT 1
58466: NEG
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: LIST
58476: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58477: LD_ADDR_VAR 0 46
58481: PUSH
58482: LD_INT 2
58484: NEG
58485: PUSH
58486: LD_INT 2
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 2
58496: NEG
58497: PUSH
58498: LD_INT 3
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 3
58508: NEG
58509: PUSH
58510: LD_INT 2
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: LIST
58522: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58523: LD_ADDR_VAR 0 47
58527: PUSH
58528: LD_INT 2
58530: NEG
58531: PUSH
58532: LD_INT 3
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: LD_INT 3
58546: NEG
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58556: LD_ADDR_VAR 0 48
58560: PUSH
58561: LD_INT 1
58563: PUSH
58564: LD_INT 2
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 2
58574: PUSH
58575: LD_INT 1
58577: NEG
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58587: LD_ADDR_VAR 0 49
58591: PUSH
58592: LD_INT 3
58594: PUSH
58595: LD_INT 1
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 3
58604: PUSH
58605: LD_INT 2
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58616: LD_ADDR_VAR 0 50
58620: PUSH
58621: LD_INT 2
58623: PUSH
58624: LD_INT 3
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: LD_INT 3
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58645: LD_ADDR_VAR 0 51
58649: PUSH
58650: LD_INT 1
58652: NEG
58653: PUSH
58654: LD_INT 2
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 2
58663: NEG
58664: PUSH
58665: LD_INT 1
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58676: LD_ADDR_VAR 0 52
58680: PUSH
58681: LD_INT 3
58683: NEG
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 3
58695: NEG
58696: PUSH
58697: LD_INT 2
58699: NEG
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58709: LD_ADDR_VAR 0 53
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: LD_INT 3
58720: NEG
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: LD_INT 3
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 1
58739: PUSH
58740: LD_INT 2
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: LIST
58752: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58753: LD_ADDR_VAR 0 54
58757: PUSH
58758: LD_INT 2
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 3
58771: PUSH
58772: LD_INT 0
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 3
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: LIST
58793: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58794: LD_ADDR_VAR 0 55
58798: PUSH
58799: LD_INT 3
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 3
58811: PUSH
58812: LD_INT 3
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 2
58821: PUSH
58822: LD_INT 3
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: LIST
58833: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58834: LD_ADDR_VAR 0 56
58838: PUSH
58839: LD_INT 1
58841: PUSH
58842: LD_INT 3
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: LD_INT 3
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: LD_INT 2
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: LIST
58874: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58875: LD_ADDR_VAR 0 57
58879: PUSH
58880: LD_INT 2
58882: NEG
58883: PUSH
58884: LD_INT 1
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 3
58893: NEG
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 3
58904: NEG
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: LIST
58918: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58919: LD_ADDR_VAR 0 58
58923: PUSH
58924: LD_INT 2
58926: NEG
58927: PUSH
58928: LD_INT 3
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 3
58938: NEG
58939: PUSH
58940: LD_INT 2
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 3
58950: NEG
58951: PUSH
58952: LD_INT 3
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: LIST
58964: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58965: LD_ADDR_VAR 0 59
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: LD_INT 2
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: LD_INT 2
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: LIST
59008: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59009: LD_ADDR_VAR 0 60
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: LD_INT 1
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 2
59027: PUSH
59028: LD_INT 0
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 2
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: LIST
59049: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59050: LD_ADDR_VAR 0 61
59054: PUSH
59055: LD_INT 2
59057: PUSH
59058: LD_INT 1
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 2
59067: PUSH
59068: LD_INT 2
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 1
59077: PUSH
59078: LD_INT 2
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: LIST
59089: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59090: LD_ADDR_VAR 0 62
59094: PUSH
59095: LD_INT 1
59097: PUSH
59098: LD_INT 2
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: LD_INT 2
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 1
59117: NEG
59118: PUSH
59119: LD_INT 1
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: LIST
59130: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59131: LD_ADDR_VAR 0 63
59135: PUSH
59136: LD_INT 1
59138: NEG
59139: PUSH
59140: LD_INT 1
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 2
59149: NEG
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 2
59160: NEG
59161: PUSH
59162: LD_INT 1
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: LIST
59174: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59175: LD_ADDR_VAR 0 64
59179: PUSH
59180: LD_INT 1
59182: NEG
59183: PUSH
59184: LD_INT 2
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 2
59194: NEG
59195: PUSH
59196: LD_INT 1
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: LD_INT 2
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: LIST
59220: ST_TO_ADDR
// end ; 2 :
59221: GO 62487
59223: LD_INT 2
59225: DOUBLE
59226: EQUAL
59227: IFTRUE 59231
59229: GO 62486
59231: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59232: LD_ADDR_VAR 0 29
59236: PUSH
59237: LD_INT 4
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 4
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 5
59260: PUSH
59261: LD_INT 0
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 5
59270: PUSH
59271: LD_INT 1
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 4
59280: PUSH
59281: LD_INT 1
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 3
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 3
59300: PUSH
59301: LD_INT 1
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 3
59311: PUSH
59312: LD_INT 2
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 5
59322: PUSH
59323: LD_INT 2
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 3
59332: PUSH
59333: LD_INT 3
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 3
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 4
59352: PUSH
59353: LD_INT 3
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 4
59362: PUSH
59363: LD_INT 4
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 3
59372: PUSH
59373: LD_INT 4
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 2
59382: PUSH
59383: LD_INT 3
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 2
59392: PUSH
59393: LD_INT 2
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 4
59402: PUSH
59403: LD_INT 2
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: LD_INT 4
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: LD_INT 4
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: LD_INT 3
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 1
59442: PUSH
59443: LD_INT 4
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: LD_INT 5
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: LD_INT 5
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: LD_INT 4
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 1
59483: NEG
59484: PUSH
59485: LD_INT 3
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 2
59494: PUSH
59495: LD_INT 5
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 2
59504: NEG
59505: PUSH
59506: LD_INT 3
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 3
59515: NEG
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 3
59526: NEG
59527: PUSH
59528: LD_INT 1
59530: NEG
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 2
59538: NEG
59539: PUSH
59540: LD_INT 0
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 2
59549: NEG
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 3
59560: NEG
59561: PUSH
59562: LD_INT 1
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 4
59571: NEG
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 4
59582: NEG
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 4
59594: NEG
59595: PUSH
59596: LD_INT 2
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 2
59606: NEG
59607: PUSH
59608: LD_INT 2
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 4
59617: NEG
59618: PUSH
59619: LD_INT 4
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 4
59629: NEG
59630: PUSH
59631: LD_INT 5
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 3
59641: NEG
59642: PUSH
59643: LD_INT 4
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 3
59653: NEG
59654: PUSH
59655: LD_INT 3
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 4
59665: NEG
59666: PUSH
59667: LD_INT 3
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 5
59677: NEG
59678: PUSH
59679: LD_INT 4
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 5
59689: NEG
59690: PUSH
59691: LD_INT 5
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 3
59701: NEG
59702: PUSH
59703: LD_INT 5
59705: NEG
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 5
59713: NEG
59714: PUSH
59715: LD_INT 3
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59770: LD_ADDR_VAR 0 30
59774: PUSH
59775: LD_INT 4
59777: PUSH
59778: LD_INT 4
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 4
59787: PUSH
59788: LD_INT 3
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 5
59797: PUSH
59798: LD_INT 4
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 5
59807: PUSH
59808: LD_INT 5
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 4
59817: PUSH
59818: LD_INT 5
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 3
59827: PUSH
59828: LD_INT 4
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 3
59837: PUSH
59838: LD_INT 3
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 5
59847: PUSH
59848: LD_INT 3
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 3
59857: PUSH
59858: LD_INT 5
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: LD_INT 3
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 0
59877: PUSH
59878: LD_INT 2
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: PUSH
59888: LD_INT 3
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 1
59897: PUSH
59898: LD_INT 4
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 0
59907: PUSH
59908: LD_INT 4
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 1
59917: NEG
59918: PUSH
59919: LD_INT 3
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: LD_INT 2
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 2
59939: PUSH
59940: LD_INT 4
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 2
59949: NEG
59950: PUSH
59951: LD_INT 2
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 4
59960: NEG
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 4
59971: NEG
59972: PUSH
59973: LD_INT 1
59975: NEG
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 3
59983: NEG
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 3
59994: NEG
59995: PUSH
59996: LD_INT 1
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 4
60005: NEG
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 5
60016: NEG
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 5
60027: NEG
60028: PUSH
60029: LD_INT 1
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 5
60039: NEG
60040: PUSH
60041: LD_INT 2
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 3
60051: NEG
60052: PUSH
60053: LD_INT 2
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 3
60062: NEG
60063: PUSH
60064: LD_INT 3
60066: NEG
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 3
60074: NEG
60075: PUSH
60076: LD_INT 4
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 2
60086: NEG
60087: PUSH
60088: LD_INT 3
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 2
60098: NEG
60099: PUSH
60100: LD_INT 2
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 3
60110: NEG
60111: PUSH
60112: LD_INT 2
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 4
60122: NEG
60123: PUSH
60124: LD_INT 3
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 4
60134: NEG
60135: PUSH
60136: LD_INT 4
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 2
60146: NEG
60147: PUSH
60148: LD_INT 4
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 4
60158: NEG
60159: PUSH
60160: LD_INT 2
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 0
60170: PUSH
60171: LD_INT 4
60173: NEG
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: LD_INT 5
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 1
60192: PUSH
60193: LD_INT 4
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 1
60203: PUSH
60204: LD_INT 3
60206: NEG
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: LD_INT 3
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: LD_INT 4
60229: NEG
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 1
60237: NEG
60238: PUSH
60239: LD_INT 5
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 2
60249: PUSH
60250: LD_INT 3
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 2
60260: NEG
60261: PUSH
60262: LD_INT 5
60264: NEG
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60317: LD_ADDR_VAR 0 31
60321: PUSH
60322: LD_INT 0
60324: PUSH
60325: LD_INT 4
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 0
60334: PUSH
60335: LD_INT 3
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 1
60344: PUSH
60345: LD_INT 4
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 1
60354: PUSH
60355: LD_INT 5
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 0
60364: PUSH
60365: LD_INT 5
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 1
60374: NEG
60375: PUSH
60376: LD_INT 4
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 1
60385: NEG
60386: PUSH
60387: LD_INT 3
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 2
60396: PUSH
60397: LD_INT 5
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 2
60406: NEG
60407: PUSH
60408: LD_INT 3
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 3
60417: NEG
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 3
60428: NEG
60429: PUSH
60430: LD_INT 1
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 2
60440: NEG
60441: PUSH
60442: LD_INT 0
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 2
60451: NEG
60452: PUSH
60453: LD_INT 1
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 3
60462: NEG
60463: PUSH
60464: LD_INT 1
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 4
60473: NEG
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 4
60484: NEG
60485: PUSH
60486: LD_INT 1
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 4
60496: NEG
60497: PUSH
60498: LD_INT 2
60500: NEG
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 2
60508: NEG
60509: PUSH
60510: LD_INT 2
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 4
60519: NEG
60520: PUSH
60521: LD_INT 4
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 4
60531: NEG
60532: PUSH
60533: LD_INT 5
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 3
60543: NEG
60544: PUSH
60545: LD_INT 4
60547: NEG
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 3
60555: NEG
60556: PUSH
60557: LD_INT 3
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 4
60567: NEG
60568: PUSH
60569: LD_INT 3
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 5
60579: NEG
60580: PUSH
60581: LD_INT 4
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 5
60591: NEG
60592: PUSH
60593: LD_INT 5
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 3
60603: NEG
60604: PUSH
60605: LD_INT 5
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 5
60615: NEG
60616: PUSH
60617: LD_INT 3
60619: NEG
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 0
60627: PUSH
60628: LD_INT 3
60630: NEG
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 0
60638: PUSH
60639: LD_INT 4
60641: NEG
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 1
60649: PUSH
60650: LD_INT 3
60652: NEG
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 1
60660: PUSH
60661: LD_INT 2
60663: NEG
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 0
60671: PUSH
60672: LD_INT 2
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 1
60682: NEG
60683: PUSH
60684: LD_INT 3
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 1
60694: NEG
60695: PUSH
60696: LD_INT 4
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 2
60706: PUSH
60707: LD_INT 2
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 2
60717: NEG
60718: PUSH
60719: LD_INT 4
60721: NEG
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 4
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 4
60739: PUSH
60740: LD_INT 1
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 5
60750: PUSH
60751: LD_INT 0
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 5
60760: PUSH
60761: LD_INT 1
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 4
60770: PUSH
60771: LD_INT 1
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 3
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 3
60790: PUSH
60791: LD_INT 1
60793: NEG
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 3
60801: PUSH
60802: LD_INT 2
60804: NEG
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 5
60812: PUSH
60813: LD_INT 2
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60867: LD_ADDR_VAR 0 32
60871: PUSH
60872: LD_INT 4
60874: NEG
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 4
60885: NEG
60886: PUSH
60887: LD_INT 1
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 3
60897: NEG
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 3
60908: NEG
60909: PUSH
60910: LD_INT 1
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 4
60919: NEG
60920: PUSH
60921: LD_INT 1
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 5
60930: NEG
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 5
60941: NEG
60942: PUSH
60943: LD_INT 1
60945: NEG
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 5
60953: NEG
60954: PUSH
60955: LD_INT 2
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 3
60965: NEG
60966: PUSH
60967: LD_INT 2
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 3
60976: NEG
60977: PUSH
60978: LD_INT 3
60980: NEG
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 3
60988: NEG
60989: PUSH
60990: LD_INT 4
60992: NEG
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 2
61000: NEG
61001: PUSH
61002: LD_INT 3
61004: NEG
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 2
61012: NEG
61013: PUSH
61014: LD_INT 2
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 3
61024: NEG
61025: PUSH
61026: LD_INT 2
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 4
61036: NEG
61037: PUSH
61038: LD_INT 3
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 4
61048: NEG
61049: PUSH
61050: LD_INT 4
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 2
61060: NEG
61061: PUSH
61062: LD_INT 4
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 4
61072: NEG
61073: PUSH
61074: LD_INT 2
61076: NEG
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 0
61084: PUSH
61085: LD_INT 4
61087: NEG
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 0
61095: PUSH
61096: LD_INT 5
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 1
61106: PUSH
61107: LD_INT 4
61109: NEG
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 1
61117: PUSH
61118: LD_INT 3
61120: NEG
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: LD_INT 3
61131: NEG
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: LD_INT 4
61143: NEG
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 1
61151: NEG
61152: PUSH
61153: LD_INT 5
61155: NEG
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 2
61163: PUSH
61164: LD_INT 3
61166: NEG
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 2
61174: NEG
61175: PUSH
61176: LD_INT 5
61178: NEG
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 3
61186: PUSH
61187: LD_INT 0
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 3
61196: PUSH
61197: LD_INT 1
61199: NEG
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 4
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 4
61217: PUSH
61218: LD_INT 1
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 3
61227: PUSH
61228: LD_INT 1
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 2
61237: PUSH
61238: LD_INT 0
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 2
61247: PUSH
61248: LD_INT 1
61250: NEG
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 2
61258: PUSH
61259: LD_INT 2
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 4
61269: PUSH
61270: LD_INT 2
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 4
61279: PUSH
61280: LD_INT 4
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 4
61289: PUSH
61290: LD_INT 3
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 5
61299: PUSH
61300: LD_INT 4
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 5
61309: PUSH
61310: LD_INT 5
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 4
61319: PUSH
61320: LD_INT 5
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 3
61329: PUSH
61330: LD_INT 4
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 3
61339: PUSH
61340: LD_INT 3
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 5
61349: PUSH
61350: LD_INT 3
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 3
61359: PUSH
61360: LD_INT 5
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61414: LD_ADDR_VAR 0 33
61418: PUSH
61419: LD_INT 4
61421: NEG
61422: PUSH
61423: LD_INT 4
61425: NEG
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 4
61433: NEG
61434: PUSH
61435: LD_INT 5
61437: NEG
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 3
61445: NEG
61446: PUSH
61447: LD_INT 4
61449: NEG
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 3
61457: NEG
61458: PUSH
61459: LD_INT 3
61461: NEG
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 4
61469: NEG
61470: PUSH
61471: LD_INT 3
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 5
61481: NEG
61482: PUSH
61483: LD_INT 4
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 5
61493: NEG
61494: PUSH
61495: LD_INT 5
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 3
61505: NEG
61506: PUSH
61507: LD_INT 5
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 5
61517: NEG
61518: PUSH
61519: LD_INT 3
61521: NEG
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 0
61529: PUSH
61530: LD_INT 3
61532: NEG
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: LD_INT 4
61543: NEG
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 1
61551: PUSH
61552: LD_INT 3
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: LD_INT 2
61565: NEG
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 0
61573: PUSH
61574: LD_INT 2
61576: NEG
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 1
61584: NEG
61585: PUSH
61586: LD_INT 3
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: LD_INT 4
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 2
61608: PUSH
61609: LD_INT 2
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 2
61619: NEG
61620: PUSH
61621: LD_INT 4
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 4
61631: PUSH
61632: LD_INT 0
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 4
61641: PUSH
61642: LD_INT 1
61644: NEG
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 5
61652: PUSH
61653: LD_INT 0
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 5
61662: PUSH
61663: LD_INT 1
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 4
61672: PUSH
61673: LD_INT 1
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 3
61682: PUSH
61683: LD_INT 0
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 3
61692: PUSH
61693: LD_INT 1
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 3
61703: PUSH
61704: LD_INT 2
61706: NEG
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 5
61714: PUSH
61715: LD_INT 2
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 3
61724: PUSH
61725: LD_INT 3
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 3
61734: PUSH
61735: LD_INT 2
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 4
61744: PUSH
61745: LD_INT 3
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 4
61754: PUSH
61755: LD_INT 4
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 3
61764: PUSH
61765: LD_INT 4
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 2
61774: PUSH
61775: LD_INT 3
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 2
61784: PUSH
61785: LD_INT 2
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 4
61794: PUSH
61795: LD_INT 2
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 2
61804: PUSH
61805: LD_INT 4
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: LD_INT 4
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 0
61824: PUSH
61825: LD_INT 3
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: LD_INT 4
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 1
61844: PUSH
61845: LD_INT 5
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 0
61854: PUSH
61855: LD_INT 5
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 1
61864: NEG
61865: PUSH
61866: LD_INT 4
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: LD_INT 3
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 2
61886: PUSH
61887: LD_INT 5
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 2
61896: NEG
61897: PUSH
61898: LD_INT 3
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61952: LD_ADDR_VAR 0 34
61956: PUSH
61957: LD_INT 0
61959: PUSH
61960: LD_INT 4
61962: NEG
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: LD_INT 5
61973: NEG
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 1
61981: PUSH
61982: LD_INT 4
61984: NEG
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 1
61992: PUSH
61993: LD_INT 3
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 0
62003: PUSH
62004: LD_INT 3
62006: NEG
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 1
62014: NEG
62015: PUSH
62016: LD_INT 4
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 1
62026: NEG
62027: PUSH
62028: LD_INT 5
62030: NEG
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 2
62038: PUSH
62039: LD_INT 3
62041: NEG
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 2
62049: NEG
62050: PUSH
62051: LD_INT 5
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 3
62061: PUSH
62062: LD_INT 0
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 3
62071: PUSH
62072: LD_INT 1
62074: NEG
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 4
62082: PUSH
62083: LD_INT 0
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 4
62092: PUSH
62093: LD_INT 1
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 3
62102: PUSH
62103: LD_INT 1
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 2
62112: PUSH
62113: LD_INT 0
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 2
62122: PUSH
62123: LD_INT 1
62125: NEG
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 2
62133: PUSH
62134: LD_INT 2
62136: NEG
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 4
62144: PUSH
62145: LD_INT 2
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 4
62154: PUSH
62155: LD_INT 4
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 4
62164: PUSH
62165: LD_INT 3
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 5
62174: PUSH
62175: LD_INT 4
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 5
62184: PUSH
62185: LD_INT 5
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 4
62194: PUSH
62195: LD_INT 5
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 3
62204: PUSH
62205: LD_INT 4
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 3
62214: PUSH
62215: LD_INT 3
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 5
62224: PUSH
62225: LD_INT 3
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 3
62234: PUSH
62235: LD_INT 5
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 0
62244: PUSH
62245: LD_INT 3
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: LD_INT 2
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 1
62264: PUSH
62265: LD_INT 3
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 1
62274: PUSH
62275: LD_INT 4
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: LD_INT 4
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 1
62294: NEG
62295: PUSH
62296: LD_INT 3
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 1
62305: NEG
62306: PUSH
62307: LD_INT 2
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 2
62316: PUSH
62317: LD_INT 4
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 2
62326: NEG
62327: PUSH
62328: LD_INT 2
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 4
62337: NEG
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 4
62348: NEG
62349: PUSH
62350: LD_INT 1
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 3
62360: NEG
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 3
62371: NEG
62372: PUSH
62373: LD_INT 1
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 4
62382: NEG
62383: PUSH
62384: LD_INT 1
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 5
62393: NEG
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 5
62404: NEG
62405: PUSH
62406: LD_INT 1
62408: NEG
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 5
62416: NEG
62417: PUSH
62418: LD_INT 2
62420: NEG
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 3
62428: NEG
62429: PUSH
62430: LD_INT 2
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: ST_TO_ADDR
// end ; end ;
62484: GO 62487
62486: POP
// case btype of b_depot , b_warehouse :
62487: LD_VAR 0 1
62491: PUSH
62492: LD_INT 0
62494: DOUBLE
62495: EQUAL
62496: IFTRUE 62506
62498: LD_INT 1
62500: DOUBLE
62501: EQUAL
62502: IFTRUE 62506
62504: GO 62707
62506: POP
// case nation of nation_american :
62507: LD_VAR 0 5
62511: PUSH
62512: LD_INT 1
62514: DOUBLE
62515: EQUAL
62516: IFTRUE 62520
62518: GO 62576
62520: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
62521: LD_ADDR_VAR 0 9
62525: PUSH
62526: LD_VAR 0 11
62530: PUSH
62531: LD_VAR 0 12
62535: PUSH
62536: LD_VAR 0 13
62540: PUSH
62541: LD_VAR 0 14
62545: PUSH
62546: LD_VAR 0 15
62550: PUSH
62551: LD_VAR 0 16
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: PUSH
62564: LD_VAR 0 4
62568: PUSH
62569: LD_INT 1
62571: PLUS
62572: ARRAY
62573: ST_TO_ADDR
62574: GO 62705
62576: LD_INT 2
62578: DOUBLE
62579: EQUAL
62580: IFTRUE 62584
62582: GO 62640
62584: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
62585: LD_ADDR_VAR 0 9
62589: PUSH
62590: LD_VAR 0 17
62594: PUSH
62595: LD_VAR 0 18
62599: PUSH
62600: LD_VAR 0 19
62604: PUSH
62605: LD_VAR 0 20
62609: PUSH
62610: LD_VAR 0 21
62614: PUSH
62615: LD_VAR 0 22
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: PUSH
62628: LD_VAR 0 4
62632: PUSH
62633: LD_INT 1
62635: PLUS
62636: ARRAY
62637: ST_TO_ADDR
62638: GO 62705
62640: LD_INT 3
62642: DOUBLE
62643: EQUAL
62644: IFTRUE 62648
62646: GO 62704
62648: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62649: LD_ADDR_VAR 0 9
62653: PUSH
62654: LD_VAR 0 23
62658: PUSH
62659: LD_VAR 0 24
62663: PUSH
62664: LD_VAR 0 25
62668: PUSH
62669: LD_VAR 0 26
62673: PUSH
62674: LD_VAR 0 27
62678: PUSH
62679: LD_VAR 0 28
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: PUSH
62692: LD_VAR 0 4
62696: PUSH
62697: LD_INT 1
62699: PLUS
62700: ARRAY
62701: ST_TO_ADDR
62702: GO 62705
62704: POP
62705: GO 63260
62707: LD_INT 2
62709: DOUBLE
62710: EQUAL
62711: IFTRUE 62721
62713: LD_INT 3
62715: DOUBLE
62716: EQUAL
62717: IFTRUE 62721
62719: GO 62777
62721: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62722: LD_ADDR_VAR 0 9
62726: PUSH
62727: LD_VAR 0 29
62731: PUSH
62732: LD_VAR 0 30
62736: PUSH
62737: LD_VAR 0 31
62741: PUSH
62742: LD_VAR 0 32
62746: PUSH
62747: LD_VAR 0 33
62751: PUSH
62752: LD_VAR 0 34
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: PUSH
62765: LD_VAR 0 4
62769: PUSH
62770: LD_INT 1
62772: PLUS
62773: ARRAY
62774: ST_TO_ADDR
62775: GO 63260
62777: LD_INT 16
62779: DOUBLE
62780: EQUAL
62781: IFTRUE 62839
62783: LD_INT 17
62785: DOUBLE
62786: EQUAL
62787: IFTRUE 62839
62789: LD_INT 18
62791: DOUBLE
62792: EQUAL
62793: IFTRUE 62839
62795: LD_INT 19
62797: DOUBLE
62798: EQUAL
62799: IFTRUE 62839
62801: LD_INT 22
62803: DOUBLE
62804: EQUAL
62805: IFTRUE 62839
62807: LD_INT 20
62809: DOUBLE
62810: EQUAL
62811: IFTRUE 62839
62813: LD_INT 21
62815: DOUBLE
62816: EQUAL
62817: IFTRUE 62839
62819: LD_INT 23
62821: DOUBLE
62822: EQUAL
62823: IFTRUE 62839
62825: LD_INT 24
62827: DOUBLE
62828: EQUAL
62829: IFTRUE 62839
62831: LD_INT 25
62833: DOUBLE
62834: EQUAL
62835: IFTRUE 62839
62837: GO 62895
62839: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62840: LD_ADDR_VAR 0 9
62844: PUSH
62845: LD_VAR 0 35
62849: PUSH
62850: LD_VAR 0 36
62854: PUSH
62855: LD_VAR 0 37
62859: PUSH
62860: LD_VAR 0 38
62864: PUSH
62865: LD_VAR 0 39
62869: PUSH
62870: LD_VAR 0 40
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: PUSH
62883: LD_VAR 0 4
62887: PUSH
62888: LD_INT 1
62890: PLUS
62891: ARRAY
62892: ST_TO_ADDR
62893: GO 63260
62895: LD_INT 6
62897: DOUBLE
62898: EQUAL
62899: IFTRUE 62951
62901: LD_INT 7
62903: DOUBLE
62904: EQUAL
62905: IFTRUE 62951
62907: LD_INT 8
62909: DOUBLE
62910: EQUAL
62911: IFTRUE 62951
62913: LD_INT 13
62915: DOUBLE
62916: EQUAL
62917: IFTRUE 62951
62919: LD_INT 12
62921: DOUBLE
62922: EQUAL
62923: IFTRUE 62951
62925: LD_INT 15
62927: DOUBLE
62928: EQUAL
62929: IFTRUE 62951
62931: LD_INT 11
62933: DOUBLE
62934: EQUAL
62935: IFTRUE 62951
62937: LD_INT 14
62939: DOUBLE
62940: EQUAL
62941: IFTRUE 62951
62943: LD_INT 10
62945: DOUBLE
62946: EQUAL
62947: IFTRUE 62951
62949: GO 63007
62951: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
62952: LD_ADDR_VAR 0 9
62956: PUSH
62957: LD_VAR 0 41
62961: PUSH
62962: LD_VAR 0 42
62966: PUSH
62967: LD_VAR 0 43
62971: PUSH
62972: LD_VAR 0 44
62976: PUSH
62977: LD_VAR 0 45
62981: PUSH
62982: LD_VAR 0 46
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: PUSH
62995: LD_VAR 0 4
62999: PUSH
63000: LD_INT 1
63002: PLUS
63003: ARRAY
63004: ST_TO_ADDR
63005: GO 63260
63007: LD_INT 36
63009: DOUBLE
63010: EQUAL
63011: IFTRUE 63015
63013: GO 63071
63015: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63016: LD_ADDR_VAR 0 9
63020: PUSH
63021: LD_VAR 0 47
63025: PUSH
63026: LD_VAR 0 48
63030: PUSH
63031: LD_VAR 0 49
63035: PUSH
63036: LD_VAR 0 50
63040: PUSH
63041: LD_VAR 0 51
63045: PUSH
63046: LD_VAR 0 52
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: PUSH
63059: LD_VAR 0 4
63063: PUSH
63064: LD_INT 1
63066: PLUS
63067: ARRAY
63068: ST_TO_ADDR
63069: GO 63260
63071: LD_INT 4
63073: DOUBLE
63074: EQUAL
63075: IFTRUE 63097
63077: LD_INT 5
63079: DOUBLE
63080: EQUAL
63081: IFTRUE 63097
63083: LD_INT 34
63085: DOUBLE
63086: EQUAL
63087: IFTRUE 63097
63089: LD_INT 37
63091: DOUBLE
63092: EQUAL
63093: IFTRUE 63097
63095: GO 63153
63097: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63098: LD_ADDR_VAR 0 9
63102: PUSH
63103: LD_VAR 0 53
63107: PUSH
63108: LD_VAR 0 54
63112: PUSH
63113: LD_VAR 0 55
63117: PUSH
63118: LD_VAR 0 56
63122: PUSH
63123: LD_VAR 0 57
63127: PUSH
63128: LD_VAR 0 58
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: PUSH
63141: LD_VAR 0 4
63145: PUSH
63146: LD_INT 1
63148: PLUS
63149: ARRAY
63150: ST_TO_ADDR
63151: GO 63260
63153: LD_INT 31
63155: DOUBLE
63156: EQUAL
63157: IFTRUE 63203
63159: LD_INT 32
63161: DOUBLE
63162: EQUAL
63163: IFTRUE 63203
63165: LD_INT 33
63167: DOUBLE
63168: EQUAL
63169: IFTRUE 63203
63171: LD_INT 27
63173: DOUBLE
63174: EQUAL
63175: IFTRUE 63203
63177: LD_INT 26
63179: DOUBLE
63180: EQUAL
63181: IFTRUE 63203
63183: LD_INT 28
63185: DOUBLE
63186: EQUAL
63187: IFTRUE 63203
63189: LD_INT 29
63191: DOUBLE
63192: EQUAL
63193: IFTRUE 63203
63195: LD_INT 30
63197: DOUBLE
63198: EQUAL
63199: IFTRUE 63203
63201: GO 63259
63203: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
63204: LD_ADDR_VAR 0 9
63208: PUSH
63209: LD_VAR 0 59
63213: PUSH
63214: LD_VAR 0 60
63218: PUSH
63219: LD_VAR 0 61
63223: PUSH
63224: LD_VAR 0 62
63228: PUSH
63229: LD_VAR 0 63
63233: PUSH
63234: LD_VAR 0 64
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: PUSH
63247: LD_VAR 0 4
63251: PUSH
63252: LD_INT 1
63254: PLUS
63255: ARRAY
63256: ST_TO_ADDR
63257: GO 63260
63259: POP
// temp_list2 = [ ] ;
63260: LD_ADDR_VAR 0 10
63264: PUSH
63265: EMPTY
63266: ST_TO_ADDR
// for i in temp_list do
63267: LD_ADDR_VAR 0 8
63271: PUSH
63272: LD_VAR 0 9
63276: PUSH
63277: FOR_IN
63278: IFFALSE 63330
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63280: LD_ADDR_VAR 0 10
63284: PUSH
63285: LD_VAR 0 10
63289: PUSH
63290: LD_VAR 0 8
63294: PUSH
63295: LD_INT 1
63297: ARRAY
63298: PUSH
63299: LD_VAR 0 2
63303: PLUS
63304: PUSH
63305: LD_VAR 0 8
63309: PUSH
63310: LD_INT 2
63312: ARRAY
63313: PUSH
63314: LD_VAR 0 3
63318: PLUS
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: EMPTY
63325: LIST
63326: ADD
63327: ST_TO_ADDR
63328: GO 63277
63330: POP
63331: POP
// result = temp_list2 ;
63332: LD_ADDR_VAR 0 7
63336: PUSH
63337: LD_VAR 0 10
63341: ST_TO_ADDR
// end ;
63342: LD_VAR 0 7
63346: RET
// export function EnemyInRange ( unit , dist ) ; begin
63347: LD_INT 0
63349: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63350: LD_ADDR_VAR 0 3
63354: PUSH
63355: LD_VAR 0 1
63359: PPUSH
63360: CALL_OW 255
63364: PPUSH
63365: LD_VAR 0 1
63369: PPUSH
63370: CALL_OW 250
63374: PPUSH
63375: LD_VAR 0 1
63379: PPUSH
63380: CALL_OW 251
63384: PPUSH
63385: LD_VAR 0 2
63389: PPUSH
63390: CALL 37451 0 4
63394: PUSH
63395: LD_INT 4
63397: ARRAY
63398: ST_TO_ADDR
// end ;
63399: LD_VAR 0 3
63403: RET
// export function PlayerSeeMe ( unit ) ; begin
63404: LD_INT 0
63406: PPUSH
// result := See ( your_side , unit ) ;
63407: LD_ADDR_VAR 0 2
63411: PUSH
63412: LD_OWVAR 2
63416: PPUSH
63417: LD_VAR 0 1
63421: PPUSH
63422: CALL_OW 292
63426: ST_TO_ADDR
// end ;
63427: LD_VAR 0 2
63431: RET
// export function ReverseDir ( unit ) ; begin
63432: LD_INT 0
63434: PPUSH
// if not unit then
63435: LD_VAR 0 1
63439: NOT
63440: IFFALSE 63444
// exit ;
63442: GO 63467
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63444: LD_ADDR_VAR 0 2
63448: PUSH
63449: LD_VAR 0 1
63453: PPUSH
63454: CALL_OW 254
63458: PUSH
63459: LD_INT 3
63461: PLUS
63462: PUSH
63463: LD_INT 6
63465: MOD
63466: ST_TO_ADDR
// end ;
63467: LD_VAR 0 2
63471: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63472: LD_INT 0
63474: PPUSH
63475: PPUSH
63476: PPUSH
63477: PPUSH
63478: PPUSH
// if not hexes then
63479: LD_VAR 0 2
63483: NOT
63484: IFFALSE 63488
// exit ;
63486: GO 63636
// dist := 9999 ;
63488: LD_ADDR_VAR 0 5
63492: PUSH
63493: LD_INT 9999
63495: ST_TO_ADDR
// for i = 1 to hexes do
63496: LD_ADDR_VAR 0 4
63500: PUSH
63501: DOUBLE
63502: LD_INT 1
63504: DEC
63505: ST_TO_ADDR
63506: LD_VAR 0 2
63510: PUSH
63511: FOR_TO
63512: IFFALSE 63624
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63514: LD_VAR 0 1
63518: PPUSH
63519: LD_VAR 0 2
63523: PUSH
63524: LD_VAR 0 4
63528: ARRAY
63529: PUSH
63530: LD_INT 1
63532: ARRAY
63533: PPUSH
63534: LD_VAR 0 2
63538: PUSH
63539: LD_VAR 0 4
63543: ARRAY
63544: PUSH
63545: LD_INT 2
63547: ARRAY
63548: PPUSH
63549: CALL_OW 297
63553: PUSH
63554: LD_VAR 0 5
63558: LESS
63559: IFFALSE 63622
// begin hex := hexes [ i ] ;
63561: LD_ADDR_VAR 0 7
63565: PUSH
63566: LD_VAR 0 2
63570: PUSH
63571: LD_VAR 0 4
63575: ARRAY
63576: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63577: LD_ADDR_VAR 0 5
63581: PUSH
63582: LD_VAR 0 1
63586: PPUSH
63587: LD_VAR 0 2
63591: PUSH
63592: LD_VAR 0 4
63596: ARRAY
63597: PUSH
63598: LD_INT 1
63600: ARRAY
63601: PPUSH
63602: LD_VAR 0 2
63606: PUSH
63607: LD_VAR 0 4
63611: ARRAY
63612: PUSH
63613: LD_INT 2
63615: ARRAY
63616: PPUSH
63617: CALL_OW 297
63621: ST_TO_ADDR
// end ; end ;
63622: GO 63511
63624: POP
63625: POP
// result := hex ;
63626: LD_ADDR_VAR 0 3
63630: PUSH
63631: LD_VAR 0 7
63635: ST_TO_ADDR
// end ;
63636: LD_VAR 0 3
63640: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63641: LD_INT 0
63643: PPUSH
63644: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63645: LD_VAR 0 1
63649: NOT
63650: PUSH
63651: LD_VAR 0 1
63655: PUSH
63656: LD_INT 21
63658: PUSH
63659: LD_INT 2
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 23
63668: PUSH
63669: LD_INT 2
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PPUSH
63680: CALL_OW 69
63684: IN
63685: NOT
63686: OR
63687: IFFALSE 63691
// exit ;
63689: GO 63738
// for i = 1 to 3 do
63691: LD_ADDR_VAR 0 3
63695: PUSH
63696: DOUBLE
63697: LD_INT 1
63699: DEC
63700: ST_TO_ADDR
63701: LD_INT 3
63703: PUSH
63704: FOR_TO
63705: IFFALSE 63736
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63707: LD_VAR 0 1
63711: PPUSH
63712: CALL_OW 250
63716: PPUSH
63717: LD_VAR 0 1
63721: PPUSH
63722: CALL_OW 251
63726: PPUSH
63727: LD_INT 1
63729: PPUSH
63730: CALL_OW 453
63734: GO 63704
63736: POP
63737: POP
// end ;
63738: LD_VAR 0 2
63742: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63743: LD_INT 0
63745: PPUSH
63746: PPUSH
63747: PPUSH
63748: PPUSH
63749: PPUSH
63750: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63751: LD_VAR 0 1
63755: NOT
63756: PUSH
63757: LD_VAR 0 2
63761: NOT
63762: OR
63763: PUSH
63764: LD_VAR 0 1
63768: PPUSH
63769: CALL_OW 314
63773: OR
63774: IFFALSE 63778
// exit ;
63776: GO 64219
// x := GetX ( enemy_unit ) ;
63778: LD_ADDR_VAR 0 7
63782: PUSH
63783: LD_VAR 0 2
63787: PPUSH
63788: CALL_OW 250
63792: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63793: LD_ADDR_VAR 0 8
63797: PUSH
63798: LD_VAR 0 2
63802: PPUSH
63803: CALL_OW 251
63807: ST_TO_ADDR
// if not x or not y then
63808: LD_VAR 0 7
63812: NOT
63813: PUSH
63814: LD_VAR 0 8
63818: NOT
63819: OR
63820: IFFALSE 63824
// exit ;
63822: GO 64219
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63824: LD_ADDR_VAR 0 6
63828: PUSH
63829: LD_VAR 0 7
63833: PPUSH
63834: LD_INT 0
63836: PPUSH
63837: LD_INT 4
63839: PPUSH
63840: CALL_OW 272
63844: PUSH
63845: LD_VAR 0 8
63849: PPUSH
63850: LD_INT 0
63852: PPUSH
63853: LD_INT 4
63855: PPUSH
63856: CALL_OW 273
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_VAR 0 7
63869: PPUSH
63870: LD_INT 1
63872: PPUSH
63873: LD_INT 4
63875: PPUSH
63876: CALL_OW 272
63880: PUSH
63881: LD_VAR 0 8
63885: PPUSH
63886: LD_INT 1
63888: PPUSH
63889: LD_INT 4
63891: PPUSH
63892: CALL_OW 273
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_VAR 0 7
63905: PPUSH
63906: LD_INT 2
63908: PPUSH
63909: LD_INT 4
63911: PPUSH
63912: CALL_OW 272
63916: PUSH
63917: LD_VAR 0 8
63921: PPUSH
63922: LD_INT 2
63924: PPUSH
63925: LD_INT 4
63927: PPUSH
63928: CALL_OW 273
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_VAR 0 7
63941: PPUSH
63942: LD_INT 3
63944: PPUSH
63945: LD_INT 4
63947: PPUSH
63948: CALL_OW 272
63952: PUSH
63953: LD_VAR 0 8
63957: PPUSH
63958: LD_INT 3
63960: PPUSH
63961: LD_INT 4
63963: PPUSH
63964: CALL_OW 273
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_VAR 0 7
63977: PPUSH
63978: LD_INT 4
63980: PPUSH
63981: LD_INT 4
63983: PPUSH
63984: CALL_OW 272
63988: PUSH
63989: LD_VAR 0 8
63993: PPUSH
63994: LD_INT 4
63996: PPUSH
63997: LD_INT 4
63999: PPUSH
64000: CALL_OW 273
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_VAR 0 7
64013: PPUSH
64014: LD_INT 5
64016: PPUSH
64017: LD_INT 4
64019: PPUSH
64020: CALL_OW 272
64024: PUSH
64025: LD_VAR 0 8
64029: PPUSH
64030: LD_INT 5
64032: PPUSH
64033: LD_INT 4
64035: PPUSH
64036: CALL_OW 273
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: ST_TO_ADDR
// for i = tmp downto 1 do
64053: LD_ADDR_VAR 0 4
64057: PUSH
64058: DOUBLE
64059: LD_VAR 0 6
64063: INC
64064: ST_TO_ADDR
64065: LD_INT 1
64067: PUSH
64068: FOR_DOWNTO
64069: IFFALSE 64170
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64071: LD_VAR 0 6
64075: PUSH
64076: LD_VAR 0 4
64080: ARRAY
64081: PUSH
64082: LD_INT 1
64084: ARRAY
64085: PPUSH
64086: LD_VAR 0 6
64090: PUSH
64091: LD_VAR 0 4
64095: ARRAY
64096: PUSH
64097: LD_INT 2
64099: ARRAY
64100: PPUSH
64101: CALL_OW 488
64105: NOT
64106: PUSH
64107: LD_VAR 0 6
64111: PUSH
64112: LD_VAR 0 4
64116: ARRAY
64117: PUSH
64118: LD_INT 1
64120: ARRAY
64121: PPUSH
64122: LD_VAR 0 6
64126: PUSH
64127: LD_VAR 0 4
64131: ARRAY
64132: PUSH
64133: LD_INT 2
64135: ARRAY
64136: PPUSH
64137: CALL_OW 428
64141: PUSH
64142: LD_INT 0
64144: NONEQUAL
64145: OR
64146: IFFALSE 64168
// tmp := Delete ( tmp , i ) ;
64148: LD_ADDR_VAR 0 6
64152: PUSH
64153: LD_VAR 0 6
64157: PPUSH
64158: LD_VAR 0 4
64162: PPUSH
64163: CALL_OW 3
64167: ST_TO_ADDR
64168: GO 64068
64170: POP
64171: POP
// j := GetClosestHex ( unit , tmp ) ;
64172: LD_ADDR_VAR 0 5
64176: PUSH
64177: LD_VAR 0 1
64181: PPUSH
64182: LD_VAR 0 6
64186: PPUSH
64187: CALL 63472 0 2
64191: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64192: LD_VAR 0 1
64196: PPUSH
64197: LD_VAR 0 5
64201: PUSH
64202: LD_INT 1
64204: ARRAY
64205: PPUSH
64206: LD_VAR 0 5
64210: PUSH
64211: LD_INT 2
64213: ARRAY
64214: PPUSH
64215: CALL_OW 111
// end ;
64219: LD_VAR 0 3
64223: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64224: LD_INT 0
64226: PPUSH
64227: PPUSH
64228: PPUSH
// uc_side = 0 ;
64229: LD_ADDR_OWVAR 20
64233: PUSH
64234: LD_INT 0
64236: ST_TO_ADDR
// uc_nation = 0 ;
64237: LD_ADDR_OWVAR 21
64241: PUSH
64242: LD_INT 0
64244: ST_TO_ADDR
// InitHc ;
64245: CALL_OW 19
// InitVc ;
64249: CALL_OW 20
// if mastodonts then
64253: LD_VAR 0 6
64257: IFFALSE 64324
// for i = 1 to mastodonts do
64259: LD_ADDR_VAR 0 11
64263: PUSH
64264: DOUBLE
64265: LD_INT 1
64267: DEC
64268: ST_TO_ADDR
64269: LD_VAR 0 6
64273: PUSH
64274: FOR_TO
64275: IFFALSE 64322
// begin vc_chassis := 31 ;
64277: LD_ADDR_OWVAR 37
64281: PUSH
64282: LD_INT 31
64284: ST_TO_ADDR
// vc_control := control_rider ;
64285: LD_ADDR_OWVAR 38
64289: PUSH
64290: LD_INT 4
64292: ST_TO_ADDR
// animal := CreateVehicle ;
64293: LD_ADDR_VAR 0 12
64297: PUSH
64298: CALL_OW 45
64302: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64303: LD_VAR 0 12
64307: PPUSH
64308: LD_VAR 0 8
64312: PPUSH
64313: LD_INT 0
64315: PPUSH
64316: CALL 66393 0 3
// end ;
64320: GO 64274
64322: POP
64323: POP
// if horses then
64324: LD_VAR 0 5
64328: IFFALSE 64395
// for i = 1 to horses do
64330: LD_ADDR_VAR 0 11
64334: PUSH
64335: DOUBLE
64336: LD_INT 1
64338: DEC
64339: ST_TO_ADDR
64340: LD_VAR 0 5
64344: PUSH
64345: FOR_TO
64346: IFFALSE 64393
// begin hc_class := 21 ;
64348: LD_ADDR_OWVAR 28
64352: PUSH
64353: LD_INT 21
64355: ST_TO_ADDR
// hc_gallery :=  ;
64356: LD_ADDR_OWVAR 33
64360: PUSH
64361: LD_STRING 
64363: ST_TO_ADDR
// animal := CreateHuman ;
64364: LD_ADDR_VAR 0 12
64368: PUSH
64369: CALL_OW 44
64373: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64374: LD_VAR 0 12
64378: PPUSH
64379: LD_VAR 0 8
64383: PPUSH
64384: LD_INT 0
64386: PPUSH
64387: CALL 66393 0 3
// end ;
64391: GO 64345
64393: POP
64394: POP
// if birds then
64395: LD_VAR 0 1
64399: IFFALSE 64466
// for i = 1 to birds do
64401: LD_ADDR_VAR 0 11
64405: PUSH
64406: DOUBLE
64407: LD_INT 1
64409: DEC
64410: ST_TO_ADDR
64411: LD_VAR 0 1
64415: PUSH
64416: FOR_TO
64417: IFFALSE 64464
// begin hc_class = 18 ;
64419: LD_ADDR_OWVAR 28
64423: PUSH
64424: LD_INT 18
64426: ST_TO_ADDR
// hc_gallery =  ;
64427: LD_ADDR_OWVAR 33
64431: PUSH
64432: LD_STRING 
64434: ST_TO_ADDR
// animal := CreateHuman ;
64435: LD_ADDR_VAR 0 12
64439: PUSH
64440: CALL_OW 44
64444: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64445: LD_VAR 0 12
64449: PPUSH
64450: LD_VAR 0 8
64454: PPUSH
64455: LD_INT 0
64457: PPUSH
64458: CALL 66393 0 3
// end ;
64462: GO 64416
64464: POP
64465: POP
// if tigers then
64466: LD_VAR 0 2
64470: IFFALSE 64554
// for i = 1 to tigers do
64472: LD_ADDR_VAR 0 11
64476: PUSH
64477: DOUBLE
64478: LD_INT 1
64480: DEC
64481: ST_TO_ADDR
64482: LD_VAR 0 2
64486: PUSH
64487: FOR_TO
64488: IFFALSE 64552
// begin hc_class = class_tiger ;
64490: LD_ADDR_OWVAR 28
64494: PUSH
64495: LD_INT 14
64497: ST_TO_ADDR
// hc_gallery =  ;
64498: LD_ADDR_OWVAR 33
64502: PUSH
64503: LD_STRING 
64505: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64506: LD_ADDR_OWVAR 35
64510: PUSH
64511: LD_INT 7
64513: NEG
64514: PPUSH
64515: LD_INT 7
64517: PPUSH
64518: CALL_OW 12
64522: ST_TO_ADDR
// animal := CreateHuman ;
64523: LD_ADDR_VAR 0 12
64527: PUSH
64528: CALL_OW 44
64532: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64533: LD_VAR 0 12
64537: PPUSH
64538: LD_VAR 0 8
64542: PPUSH
64543: LD_INT 0
64545: PPUSH
64546: CALL 66393 0 3
// end ;
64550: GO 64487
64552: POP
64553: POP
// if apemans then
64554: LD_VAR 0 3
64558: IFFALSE 64681
// for i = 1 to apemans do
64560: LD_ADDR_VAR 0 11
64564: PUSH
64565: DOUBLE
64566: LD_INT 1
64568: DEC
64569: ST_TO_ADDR
64570: LD_VAR 0 3
64574: PUSH
64575: FOR_TO
64576: IFFALSE 64679
// begin hc_class = class_apeman ;
64578: LD_ADDR_OWVAR 28
64582: PUSH
64583: LD_INT 12
64585: ST_TO_ADDR
// hc_gallery =  ;
64586: LD_ADDR_OWVAR 33
64590: PUSH
64591: LD_STRING 
64593: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
64594: LD_ADDR_OWVAR 35
64598: PUSH
64599: LD_INT 5
64601: NEG
64602: PPUSH
64603: LD_INT 5
64605: PPUSH
64606: CALL_OW 12
64610: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64611: LD_ADDR_OWVAR 31
64615: PUSH
64616: LD_INT 1
64618: PPUSH
64619: LD_INT 3
64621: PPUSH
64622: CALL_OW 12
64626: PUSH
64627: LD_INT 1
64629: PPUSH
64630: LD_INT 3
64632: PPUSH
64633: CALL_OW 12
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: LD_INT 0
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: ST_TO_ADDR
// animal := CreateHuman ;
64650: LD_ADDR_VAR 0 12
64654: PUSH
64655: CALL_OW 44
64659: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64660: LD_VAR 0 12
64664: PPUSH
64665: LD_VAR 0 8
64669: PPUSH
64670: LD_INT 0
64672: PPUSH
64673: CALL 66393 0 3
// end ;
64677: GO 64575
64679: POP
64680: POP
// if enchidnas then
64681: LD_VAR 0 4
64685: IFFALSE 64752
// for i = 1 to enchidnas do
64687: LD_ADDR_VAR 0 11
64691: PUSH
64692: DOUBLE
64693: LD_INT 1
64695: DEC
64696: ST_TO_ADDR
64697: LD_VAR 0 4
64701: PUSH
64702: FOR_TO
64703: IFFALSE 64750
// begin hc_class = 13 ;
64705: LD_ADDR_OWVAR 28
64709: PUSH
64710: LD_INT 13
64712: ST_TO_ADDR
// hc_gallery =  ;
64713: LD_ADDR_OWVAR 33
64717: PUSH
64718: LD_STRING 
64720: ST_TO_ADDR
// animal := CreateHuman ;
64721: LD_ADDR_VAR 0 12
64725: PUSH
64726: CALL_OW 44
64730: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64731: LD_VAR 0 12
64735: PPUSH
64736: LD_VAR 0 8
64740: PPUSH
64741: LD_INT 0
64743: PPUSH
64744: CALL 66393 0 3
// end ;
64748: GO 64702
64750: POP
64751: POP
// if fishes then
64752: LD_VAR 0 7
64756: IFFALSE 64823
// for i = 1 to fishes do
64758: LD_ADDR_VAR 0 11
64762: PUSH
64763: DOUBLE
64764: LD_INT 1
64766: DEC
64767: ST_TO_ADDR
64768: LD_VAR 0 7
64772: PUSH
64773: FOR_TO
64774: IFFALSE 64821
// begin hc_class = 20 ;
64776: LD_ADDR_OWVAR 28
64780: PUSH
64781: LD_INT 20
64783: ST_TO_ADDR
// hc_gallery =  ;
64784: LD_ADDR_OWVAR 33
64788: PUSH
64789: LD_STRING 
64791: ST_TO_ADDR
// animal := CreateHuman ;
64792: LD_ADDR_VAR 0 12
64796: PUSH
64797: CALL_OW 44
64801: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64802: LD_VAR 0 12
64806: PPUSH
64807: LD_VAR 0 9
64811: PPUSH
64812: LD_INT 0
64814: PPUSH
64815: CALL 66393 0 3
// end ;
64819: GO 64773
64821: POP
64822: POP
// end ;
64823: LD_VAR 0 10
64827: RET
// export function WantHeal ( sci , unit ) ; begin
64828: LD_INT 0
64830: PPUSH
// if GetTaskList ( sci ) > 0 then
64831: LD_VAR 0 1
64835: PPUSH
64836: CALL_OW 437
64840: PUSH
64841: LD_INT 0
64843: GREATER
64844: IFFALSE 64914
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64846: LD_VAR 0 1
64850: PPUSH
64851: CALL_OW 437
64855: PUSH
64856: LD_INT 1
64858: ARRAY
64859: PUSH
64860: LD_INT 1
64862: ARRAY
64863: PUSH
64864: LD_STRING l
64866: EQUAL
64867: PUSH
64868: LD_VAR 0 1
64872: PPUSH
64873: CALL_OW 437
64877: PUSH
64878: LD_INT 1
64880: ARRAY
64881: PUSH
64882: LD_INT 4
64884: ARRAY
64885: PUSH
64886: LD_VAR 0 2
64890: EQUAL
64891: AND
64892: IFFALSE 64904
// result := true else
64894: LD_ADDR_VAR 0 3
64898: PUSH
64899: LD_INT 1
64901: ST_TO_ADDR
64902: GO 64912
// result := false ;
64904: LD_ADDR_VAR 0 3
64908: PUSH
64909: LD_INT 0
64911: ST_TO_ADDR
// end else
64912: GO 64922
// result := false ;
64914: LD_ADDR_VAR 0 3
64918: PUSH
64919: LD_INT 0
64921: ST_TO_ADDR
// end ;
64922: LD_VAR 0 3
64926: RET
// export function HealTarget ( sci ) ; begin
64927: LD_INT 0
64929: PPUSH
// if not sci then
64930: LD_VAR 0 1
64934: NOT
64935: IFFALSE 64939
// exit ;
64937: GO 65004
// result := 0 ;
64939: LD_ADDR_VAR 0 2
64943: PUSH
64944: LD_INT 0
64946: ST_TO_ADDR
// if GetTaskList ( sci ) then
64947: LD_VAR 0 1
64951: PPUSH
64952: CALL_OW 437
64956: IFFALSE 65004
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64958: LD_VAR 0 1
64962: PPUSH
64963: CALL_OW 437
64967: PUSH
64968: LD_INT 1
64970: ARRAY
64971: PUSH
64972: LD_INT 1
64974: ARRAY
64975: PUSH
64976: LD_STRING l
64978: EQUAL
64979: IFFALSE 65004
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64981: LD_ADDR_VAR 0 2
64985: PUSH
64986: LD_VAR 0 1
64990: PPUSH
64991: CALL_OW 437
64995: PUSH
64996: LD_INT 1
64998: ARRAY
64999: PUSH
65000: LD_INT 4
65002: ARRAY
65003: ST_TO_ADDR
// end ;
65004: LD_VAR 0 2
65008: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65009: LD_INT 0
65011: PPUSH
65012: PPUSH
65013: PPUSH
65014: PPUSH
// if not base_units then
65015: LD_VAR 0 1
65019: NOT
65020: IFFALSE 65024
// exit ;
65022: GO 65111
// result := false ;
65024: LD_ADDR_VAR 0 2
65028: PUSH
65029: LD_INT 0
65031: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65032: LD_ADDR_VAR 0 5
65036: PUSH
65037: LD_VAR 0 1
65041: PPUSH
65042: LD_INT 21
65044: PUSH
65045: LD_INT 3
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PPUSH
65052: CALL_OW 72
65056: ST_TO_ADDR
// if not tmp then
65057: LD_VAR 0 5
65061: NOT
65062: IFFALSE 65066
// exit ;
65064: GO 65111
// for i in tmp do
65066: LD_ADDR_VAR 0 3
65070: PUSH
65071: LD_VAR 0 5
65075: PUSH
65076: FOR_IN
65077: IFFALSE 65109
// begin result := EnemyInRange ( i , 22 ) ;
65079: LD_ADDR_VAR 0 2
65083: PUSH
65084: LD_VAR 0 3
65088: PPUSH
65089: LD_INT 22
65091: PPUSH
65092: CALL 63347 0 2
65096: ST_TO_ADDR
// if result then
65097: LD_VAR 0 2
65101: IFFALSE 65107
// exit ;
65103: POP
65104: POP
65105: GO 65111
// end ;
65107: GO 65076
65109: POP
65110: POP
// end ;
65111: LD_VAR 0 2
65115: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
65116: LD_INT 0
65118: PPUSH
65119: PPUSH
// if not units then
65120: LD_VAR 0 1
65124: NOT
65125: IFFALSE 65129
// exit ;
65127: GO 65199
// result := [ ] ;
65129: LD_ADDR_VAR 0 3
65133: PUSH
65134: EMPTY
65135: ST_TO_ADDR
// for i in units do
65136: LD_ADDR_VAR 0 4
65140: PUSH
65141: LD_VAR 0 1
65145: PUSH
65146: FOR_IN
65147: IFFALSE 65197
// if GetTag ( i ) = tag then
65149: LD_VAR 0 4
65153: PPUSH
65154: CALL_OW 110
65158: PUSH
65159: LD_VAR 0 2
65163: EQUAL
65164: IFFALSE 65195
// result := Insert ( result , result + 1 , i ) ;
65166: LD_ADDR_VAR 0 3
65170: PUSH
65171: LD_VAR 0 3
65175: PPUSH
65176: LD_VAR 0 3
65180: PUSH
65181: LD_INT 1
65183: PLUS
65184: PPUSH
65185: LD_VAR 0 4
65189: PPUSH
65190: CALL_OW 2
65194: ST_TO_ADDR
65195: GO 65146
65197: POP
65198: POP
// end ;
65199: LD_VAR 0 3
65203: RET
// export function IsDriver ( un ) ; begin
65204: LD_INT 0
65206: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65207: LD_ADDR_VAR 0 2
65211: PUSH
65212: LD_VAR 0 1
65216: PUSH
65217: LD_INT 55
65219: PUSH
65220: EMPTY
65221: LIST
65222: PPUSH
65223: CALL_OW 69
65227: IN
65228: ST_TO_ADDR
// end ;
65229: LD_VAR 0 2
65233: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65234: LD_INT 0
65236: PPUSH
65237: PPUSH
// list := [ ] ;
65238: LD_ADDR_VAR 0 5
65242: PUSH
65243: EMPTY
65244: ST_TO_ADDR
// case d of 0 :
65245: LD_VAR 0 3
65249: PUSH
65250: LD_INT 0
65252: DOUBLE
65253: EQUAL
65254: IFTRUE 65258
65256: GO 65391
65258: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65259: LD_ADDR_VAR 0 5
65263: PUSH
65264: LD_VAR 0 1
65268: PUSH
65269: LD_INT 4
65271: MINUS
65272: PUSH
65273: LD_VAR 0 2
65277: PUSH
65278: LD_INT 4
65280: MINUS
65281: PUSH
65282: LD_INT 2
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: LIST
65289: PUSH
65290: LD_VAR 0 1
65294: PUSH
65295: LD_INT 3
65297: MINUS
65298: PUSH
65299: LD_VAR 0 2
65303: PUSH
65304: LD_INT 1
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: LIST
65311: PUSH
65312: LD_VAR 0 1
65316: PUSH
65317: LD_INT 4
65319: PLUS
65320: PUSH
65321: LD_VAR 0 2
65325: PUSH
65326: LD_INT 4
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: LIST
65333: PUSH
65334: LD_VAR 0 1
65338: PUSH
65339: LD_INT 3
65341: PLUS
65342: PUSH
65343: LD_VAR 0 2
65347: PUSH
65348: LD_INT 3
65350: PLUS
65351: PUSH
65352: LD_INT 5
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: LIST
65359: PUSH
65360: LD_VAR 0 1
65364: PUSH
65365: LD_VAR 0 2
65369: PUSH
65370: LD_INT 4
65372: PLUS
65373: PUSH
65374: LD_INT 0
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: LIST
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: LIST
65386: LIST
65387: LIST
65388: ST_TO_ADDR
// end ; 1 :
65389: GO 66089
65391: LD_INT 1
65393: DOUBLE
65394: EQUAL
65395: IFTRUE 65399
65397: GO 65532
65399: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65400: LD_ADDR_VAR 0 5
65404: PUSH
65405: LD_VAR 0 1
65409: PUSH
65410: LD_VAR 0 2
65414: PUSH
65415: LD_INT 4
65417: MINUS
65418: PUSH
65419: LD_INT 3
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: LIST
65426: PUSH
65427: LD_VAR 0 1
65431: PUSH
65432: LD_INT 3
65434: MINUS
65435: PUSH
65436: LD_VAR 0 2
65440: PUSH
65441: LD_INT 3
65443: MINUS
65444: PUSH
65445: LD_INT 2
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: LIST
65452: PUSH
65453: LD_VAR 0 1
65457: PUSH
65458: LD_INT 4
65460: MINUS
65461: PUSH
65462: LD_VAR 0 2
65466: PUSH
65467: LD_INT 1
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: LIST
65474: PUSH
65475: LD_VAR 0 1
65479: PUSH
65480: LD_VAR 0 2
65484: PUSH
65485: LD_INT 3
65487: PLUS
65488: PUSH
65489: LD_INT 0
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: LIST
65496: PUSH
65497: LD_VAR 0 1
65501: PUSH
65502: LD_INT 4
65504: PLUS
65505: PUSH
65506: LD_VAR 0 2
65510: PUSH
65511: LD_INT 4
65513: PLUS
65514: PUSH
65515: LD_INT 5
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: LIST
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: ST_TO_ADDR
// end ; 2 :
65530: GO 66089
65532: LD_INT 2
65534: DOUBLE
65535: EQUAL
65536: IFTRUE 65540
65538: GO 65669
65540: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65541: LD_ADDR_VAR 0 5
65545: PUSH
65546: LD_VAR 0 1
65550: PUSH
65551: LD_VAR 0 2
65555: PUSH
65556: LD_INT 3
65558: MINUS
65559: PUSH
65560: LD_INT 3
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: LIST
65567: PUSH
65568: LD_VAR 0 1
65572: PUSH
65573: LD_INT 4
65575: PLUS
65576: PUSH
65577: LD_VAR 0 2
65581: PUSH
65582: LD_INT 4
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: LIST
65589: PUSH
65590: LD_VAR 0 1
65594: PUSH
65595: LD_VAR 0 2
65599: PUSH
65600: LD_INT 4
65602: PLUS
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: LIST
65611: PUSH
65612: LD_VAR 0 1
65616: PUSH
65617: LD_INT 3
65619: MINUS
65620: PUSH
65621: LD_VAR 0 2
65625: PUSH
65626: LD_INT 1
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: LIST
65633: PUSH
65634: LD_VAR 0 1
65638: PUSH
65639: LD_INT 4
65641: MINUS
65642: PUSH
65643: LD_VAR 0 2
65647: PUSH
65648: LD_INT 4
65650: MINUS
65651: PUSH
65652: LD_INT 2
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: LIST
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: ST_TO_ADDR
// end ; 3 :
65667: GO 66089
65669: LD_INT 3
65671: DOUBLE
65672: EQUAL
65673: IFTRUE 65677
65675: GO 65810
65677: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65678: LD_ADDR_VAR 0 5
65682: PUSH
65683: LD_VAR 0 1
65687: PUSH
65688: LD_INT 3
65690: PLUS
65691: PUSH
65692: LD_VAR 0 2
65696: PUSH
65697: LD_INT 4
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: LIST
65704: PUSH
65705: LD_VAR 0 1
65709: PUSH
65710: LD_INT 4
65712: PLUS
65713: PUSH
65714: LD_VAR 0 2
65718: PUSH
65719: LD_INT 4
65721: PLUS
65722: PUSH
65723: LD_INT 5
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: LIST
65730: PUSH
65731: LD_VAR 0 1
65735: PUSH
65736: LD_INT 4
65738: MINUS
65739: PUSH
65740: LD_VAR 0 2
65744: PUSH
65745: LD_INT 1
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: LIST
65752: PUSH
65753: LD_VAR 0 1
65757: PUSH
65758: LD_VAR 0 2
65762: PUSH
65763: LD_INT 4
65765: MINUS
65766: PUSH
65767: LD_INT 3
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: LIST
65774: PUSH
65775: LD_VAR 0 1
65779: PUSH
65780: LD_INT 3
65782: MINUS
65783: PUSH
65784: LD_VAR 0 2
65788: PUSH
65789: LD_INT 3
65791: MINUS
65792: PUSH
65793: LD_INT 2
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: LIST
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: ST_TO_ADDR
// end ; 4 :
65808: GO 66089
65810: LD_INT 4
65812: DOUBLE
65813: EQUAL
65814: IFTRUE 65818
65816: GO 65951
65818: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65819: LD_ADDR_VAR 0 5
65823: PUSH
65824: LD_VAR 0 1
65828: PUSH
65829: LD_VAR 0 2
65833: PUSH
65834: LD_INT 4
65836: PLUS
65837: PUSH
65838: LD_INT 0
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: LIST
65845: PUSH
65846: LD_VAR 0 1
65850: PUSH
65851: LD_INT 3
65853: PLUS
65854: PUSH
65855: LD_VAR 0 2
65859: PUSH
65860: LD_INT 3
65862: PLUS
65863: PUSH
65864: LD_INT 5
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: LIST
65871: PUSH
65872: LD_VAR 0 1
65876: PUSH
65877: LD_INT 4
65879: PLUS
65880: PUSH
65881: LD_VAR 0 2
65885: PUSH
65886: LD_INT 4
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: LIST
65893: PUSH
65894: LD_VAR 0 1
65898: PUSH
65899: LD_VAR 0 2
65903: PUSH
65904: LD_INT 3
65906: MINUS
65907: PUSH
65908: LD_INT 3
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: LIST
65915: PUSH
65916: LD_VAR 0 1
65920: PUSH
65921: LD_INT 4
65923: MINUS
65924: PUSH
65925: LD_VAR 0 2
65929: PUSH
65930: LD_INT 4
65932: MINUS
65933: PUSH
65934: LD_INT 2
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: LIST
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: ST_TO_ADDR
// end ; 5 :
65949: GO 66089
65951: LD_INT 5
65953: DOUBLE
65954: EQUAL
65955: IFTRUE 65959
65957: GO 66088
65959: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65960: LD_ADDR_VAR 0 5
65964: PUSH
65965: LD_VAR 0 1
65969: PUSH
65970: LD_INT 4
65972: MINUS
65973: PUSH
65974: LD_VAR 0 2
65978: PUSH
65979: LD_INT 1
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: LIST
65986: PUSH
65987: LD_VAR 0 1
65991: PUSH
65992: LD_VAR 0 2
65996: PUSH
65997: LD_INT 4
65999: MINUS
66000: PUSH
66001: LD_INT 3
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: LIST
66008: PUSH
66009: LD_VAR 0 1
66013: PUSH
66014: LD_INT 4
66016: PLUS
66017: PUSH
66018: LD_VAR 0 2
66022: PUSH
66023: LD_INT 4
66025: PLUS
66026: PUSH
66027: LD_INT 5
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: LIST
66034: PUSH
66035: LD_VAR 0 1
66039: PUSH
66040: LD_INT 3
66042: PLUS
66043: PUSH
66044: LD_VAR 0 2
66048: PUSH
66049: LD_INT 4
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: LIST
66056: PUSH
66057: LD_VAR 0 1
66061: PUSH
66062: LD_VAR 0 2
66066: PUSH
66067: LD_INT 3
66069: PLUS
66070: PUSH
66071: LD_INT 0
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: LIST
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: ST_TO_ADDR
// end ; end ;
66086: GO 66089
66088: POP
// result := list ;
66089: LD_ADDR_VAR 0 4
66093: PUSH
66094: LD_VAR 0 5
66098: ST_TO_ADDR
// end ;
66099: LD_VAR 0 4
66103: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66104: LD_INT 0
66106: PPUSH
66107: PPUSH
66108: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66109: LD_VAR 0 1
66113: NOT
66114: PUSH
66115: LD_VAR 0 2
66119: PUSH
66120: LD_INT 1
66122: PUSH
66123: LD_INT 2
66125: PUSH
66126: LD_INT 3
66128: PUSH
66129: LD_INT 4
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: IN
66138: NOT
66139: OR
66140: IFFALSE 66144
// exit ;
66142: GO 66236
// tmp := [ ] ;
66144: LD_ADDR_VAR 0 5
66148: PUSH
66149: EMPTY
66150: ST_TO_ADDR
// for i in units do
66151: LD_ADDR_VAR 0 4
66155: PUSH
66156: LD_VAR 0 1
66160: PUSH
66161: FOR_IN
66162: IFFALSE 66205
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66164: LD_ADDR_VAR 0 5
66168: PUSH
66169: LD_VAR 0 5
66173: PPUSH
66174: LD_VAR 0 5
66178: PUSH
66179: LD_INT 1
66181: PLUS
66182: PPUSH
66183: LD_VAR 0 4
66187: PPUSH
66188: LD_VAR 0 2
66192: PPUSH
66193: CALL_OW 259
66197: PPUSH
66198: CALL_OW 2
66202: ST_TO_ADDR
66203: GO 66161
66205: POP
66206: POP
// if not tmp then
66207: LD_VAR 0 5
66211: NOT
66212: IFFALSE 66216
// exit ;
66214: GO 66236
// result := SortListByListDesc ( units , tmp ) ;
66216: LD_ADDR_VAR 0 3
66220: PUSH
66221: LD_VAR 0 1
66225: PPUSH
66226: LD_VAR 0 5
66230: PPUSH
66231: CALL_OW 77
66235: ST_TO_ADDR
// end ;
66236: LD_VAR 0 3
66240: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66241: LD_INT 0
66243: PPUSH
66244: PPUSH
66245: PPUSH
// x := GetX ( building ) ;
66246: LD_ADDR_VAR 0 4
66250: PUSH
66251: LD_VAR 0 2
66255: PPUSH
66256: CALL_OW 250
66260: ST_TO_ADDR
// y := GetY ( building ) ;
66261: LD_ADDR_VAR 0 5
66265: PUSH
66266: LD_VAR 0 2
66270: PPUSH
66271: CALL_OW 251
66275: ST_TO_ADDR
// if GetTaskList ( unit ) then
66276: LD_VAR 0 1
66280: PPUSH
66281: CALL_OW 437
66285: IFFALSE 66380
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66287: LD_STRING e
66289: PUSH
66290: LD_VAR 0 1
66294: PPUSH
66295: CALL_OW 437
66299: PUSH
66300: LD_INT 1
66302: ARRAY
66303: PUSH
66304: LD_INT 1
66306: ARRAY
66307: EQUAL
66308: PUSH
66309: LD_VAR 0 4
66313: PUSH
66314: LD_VAR 0 1
66318: PPUSH
66319: CALL_OW 437
66323: PUSH
66324: LD_INT 1
66326: ARRAY
66327: PUSH
66328: LD_INT 2
66330: ARRAY
66331: EQUAL
66332: AND
66333: PUSH
66334: LD_VAR 0 5
66338: PUSH
66339: LD_VAR 0 1
66343: PPUSH
66344: CALL_OW 437
66348: PUSH
66349: LD_INT 1
66351: ARRAY
66352: PUSH
66353: LD_INT 3
66355: ARRAY
66356: EQUAL
66357: AND
66358: IFFALSE 66370
// result := true else
66360: LD_ADDR_VAR 0 3
66364: PUSH
66365: LD_INT 1
66367: ST_TO_ADDR
66368: GO 66378
// result := false ;
66370: LD_ADDR_VAR 0 3
66374: PUSH
66375: LD_INT 0
66377: ST_TO_ADDR
// end else
66378: GO 66388
// result := false ;
66380: LD_ADDR_VAR 0 3
66384: PUSH
66385: LD_INT 0
66387: ST_TO_ADDR
// end ;
66388: LD_VAR 0 3
66392: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66393: LD_INT 0
66395: PPUSH
66396: PPUSH
66397: PPUSH
66398: PPUSH
// if not unit or not area then
66399: LD_VAR 0 1
66403: NOT
66404: PUSH
66405: LD_VAR 0 2
66409: NOT
66410: OR
66411: IFFALSE 66415
// exit ;
66413: GO 66579
// tmp := AreaToList ( area , i ) ;
66415: LD_ADDR_VAR 0 6
66419: PUSH
66420: LD_VAR 0 2
66424: PPUSH
66425: LD_VAR 0 5
66429: PPUSH
66430: CALL_OW 517
66434: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66435: LD_ADDR_VAR 0 5
66439: PUSH
66440: DOUBLE
66441: LD_INT 1
66443: DEC
66444: ST_TO_ADDR
66445: LD_VAR 0 6
66449: PUSH
66450: LD_INT 1
66452: ARRAY
66453: PUSH
66454: FOR_TO
66455: IFFALSE 66577
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66457: LD_ADDR_VAR 0 7
66461: PUSH
66462: LD_VAR 0 6
66466: PUSH
66467: LD_INT 1
66469: ARRAY
66470: PUSH
66471: LD_VAR 0 5
66475: ARRAY
66476: PUSH
66477: LD_VAR 0 6
66481: PUSH
66482: LD_INT 2
66484: ARRAY
66485: PUSH
66486: LD_VAR 0 5
66490: ARRAY
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66496: LD_VAR 0 7
66500: PUSH
66501: LD_INT 1
66503: ARRAY
66504: PPUSH
66505: LD_VAR 0 7
66509: PUSH
66510: LD_INT 2
66512: ARRAY
66513: PPUSH
66514: CALL_OW 428
66518: PUSH
66519: LD_INT 0
66521: EQUAL
66522: IFFALSE 66575
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66524: LD_VAR 0 1
66528: PPUSH
66529: LD_VAR 0 7
66533: PUSH
66534: LD_INT 1
66536: ARRAY
66537: PPUSH
66538: LD_VAR 0 7
66542: PUSH
66543: LD_INT 2
66545: ARRAY
66546: PPUSH
66547: LD_VAR 0 3
66551: PPUSH
66552: CALL_OW 48
// result := IsPlaced ( unit ) ;
66556: LD_ADDR_VAR 0 4
66560: PUSH
66561: LD_VAR 0 1
66565: PPUSH
66566: CALL_OW 305
66570: ST_TO_ADDR
// exit ;
66571: POP
66572: POP
66573: GO 66579
// end ; end ;
66575: GO 66454
66577: POP
66578: POP
// end ;
66579: LD_VAR 0 4
66583: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66584: LD_INT 0
66586: PPUSH
66587: PPUSH
66588: PPUSH
// if not side or side > 8 then
66589: LD_VAR 0 1
66593: NOT
66594: PUSH
66595: LD_VAR 0 1
66599: PUSH
66600: LD_INT 8
66602: GREATER
66603: OR
66604: IFFALSE 66608
// exit ;
66606: GO 66795
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66608: LD_ADDR_VAR 0 4
66612: PUSH
66613: LD_INT 22
66615: PUSH
66616: LD_VAR 0 1
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 21
66627: PUSH
66628: LD_INT 3
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PPUSH
66639: CALL_OW 69
66643: ST_TO_ADDR
// if not tmp then
66644: LD_VAR 0 4
66648: NOT
66649: IFFALSE 66653
// exit ;
66651: GO 66795
// enable_addtolog := true ;
66653: LD_ADDR_OWVAR 81
66657: PUSH
66658: LD_INT 1
66660: ST_TO_ADDR
// AddToLog ( [ ) ;
66661: LD_STRING [
66663: PPUSH
66664: CALL_OW 561
// for i in tmp do
66668: LD_ADDR_VAR 0 3
66672: PUSH
66673: LD_VAR 0 4
66677: PUSH
66678: FOR_IN
66679: IFFALSE 66786
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66681: LD_STRING [
66683: PUSH
66684: LD_VAR 0 3
66688: PPUSH
66689: CALL_OW 266
66693: STR
66694: PUSH
66695: LD_STRING , 
66697: STR
66698: PUSH
66699: LD_VAR 0 3
66703: PPUSH
66704: CALL_OW 250
66708: STR
66709: PUSH
66710: LD_STRING , 
66712: STR
66713: PUSH
66714: LD_VAR 0 3
66718: PPUSH
66719: CALL_OW 251
66723: STR
66724: PUSH
66725: LD_STRING , 
66727: STR
66728: PUSH
66729: LD_VAR 0 3
66733: PPUSH
66734: CALL_OW 254
66738: STR
66739: PUSH
66740: LD_STRING , 
66742: STR
66743: PUSH
66744: LD_VAR 0 3
66748: PPUSH
66749: LD_INT 1
66751: PPUSH
66752: CALL_OW 268
66756: STR
66757: PUSH
66758: LD_STRING , 
66760: STR
66761: PUSH
66762: LD_VAR 0 3
66766: PPUSH
66767: LD_INT 2
66769: PPUSH
66770: CALL_OW 268
66774: STR
66775: PUSH
66776: LD_STRING ],
66778: STR
66779: PPUSH
66780: CALL_OW 561
// end ;
66784: GO 66678
66786: POP
66787: POP
// AddToLog ( ]; ) ;
66788: LD_STRING ];
66790: PPUSH
66791: CALL_OW 561
// end ;
66795: LD_VAR 0 2
66799: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66800: LD_INT 0
66802: PPUSH
66803: PPUSH
66804: PPUSH
66805: PPUSH
66806: PPUSH
// if not area or not rate or not max then
66807: LD_VAR 0 1
66811: NOT
66812: PUSH
66813: LD_VAR 0 2
66817: NOT
66818: OR
66819: PUSH
66820: LD_VAR 0 4
66824: NOT
66825: OR
66826: IFFALSE 66830
// exit ;
66828: GO 67022
// while 1 do
66830: LD_INT 1
66832: IFFALSE 67022
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66834: LD_ADDR_VAR 0 9
66838: PUSH
66839: LD_VAR 0 1
66843: PPUSH
66844: LD_INT 1
66846: PPUSH
66847: CALL_OW 287
66851: PUSH
66852: LD_INT 10
66854: MUL
66855: ST_TO_ADDR
// r := rate / 10 ;
66856: LD_ADDR_VAR 0 7
66860: PUSH
66861: LD_VAR 0 2
66865: PUSH
66866: LD_INT 10
66868: DIVREAL
66869: ST_TO_ADDR
// time := 1 1$00 ;
66870: LD_ADDR_VAR 0 8
66874: PUSH
66875: LD_INT 2100
66877: ST_TO_ADDR
// if amount < min then
66878: LD_VAR 0 9
66882: PUSH
66883: LD_VAR 0 3
66887: LESS
66888: IFFALSE 66906
// r := r * 2 else
66890: LD_ADDR_VAR 0 7
66894: PUSH
66895: LD_VAR 0 7
66899: PUSH
66900: LD_INT 2
66902: MUL
66903: ST_TO_ADDR
66904: GO 66932
// if amount > max then
66906: LD_VAR 0 9
66910: PUSH
66911: LD_VAR 0 4
66915: GREATER
66916: IFFALSE 66932
// r := r / 2 ;
66918: LD_ADDR_VAR 0 7
66922: PUSH
66923: LD_VAR 0 7
66927: PUSH
66928: LD_INT 2
66930: DIVREAL
66931: ST_TO_ADDR
// time := time / r ;
66932: LD_ADDR_VAR 0 8
66936: PUSH
66937: LD_VAR 0 8
66941: PUSH
66942: LD_VAR 0 7
66946: DIVREAL
66947: ST_TO_ADDR
// if time < 0 then
66948: LD_VAR 0 8
66952: PUSH
66953: LD_INT 0
66955: LESS
66956: IFFALSE 66973
// time := time * - 1 ;
66958: LD_ADDR_VAR 0 8
66962: PUSH
66963: LD_VAR 0 8
66967: PUSH
66968: LD_INT 1
66970: NEG
66971: MUL
66972: ST_TO_ADDR
// wait ( time ) ;
66973: LD_VAR 0 8
66977: PPUSH
66978: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
66982: LD_INT 35
66984: PPUSH
66985: LD_INT 875
66987: PPUSH
66988: CALL_OW 12
66992: PPUSH
66993: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66997: LD_INT 1
66999: PPUSH
67000: LD_INT 5
67002: PPUSH
67003: CALL_OW 12
67007: PPUSH
67008: LD_VAR 0 1
67012: PPUSH
67013: LD_INT 1
67015: PPUSH
67016: CALL_OW 55
// end ;
67020: GO 66830
// end ;
67022: LD_VAR 0 5
67026: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67027: LD_INT 0
67029: PPUSH
67030: PPUSH
67031: PPUSH
67032: PPUSH
67033: PPUSH
67034: PPUSH
67035: PPUSH
67036: PPUSH
// if not turrets or not factories then
67037: LD_VAR 0 1
67041: NOT
67042: PUSH
67043: LD_VAR 0 2
67047: NOT
67048: OR
67049: IFFALSE 67053
// exit ;
67051: GO 67360
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67053: LD_ADDR_VAR 0 10
67057: PUSH
67058: LD_INT 5
67060: PUSH
67061: LD_INT 6
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 2
67070: PUSH
67071: LD_INT 4
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 3
67080: PUSH
67081: LD_INT 5
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 24
67095: PUSH
67096: LD_INT 25
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 23
67105: PUSH
67106: LD_INT 27
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 42
67119: PUSH
67120: LD_INT 43
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 44
67129: PUSH
67130: LD_INT 46
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 45
67139: PUSH
67140: LD_INT 47
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: LIST
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: LIST
67156: ST_TO_ADDR
// result := [ ] ;
67157: LD_ADDR_VAR 0 3
67161: PUSH
67162: EMPTY
67163: ST_TO_ADDR
// for i in turrets do
67164: LD_ADDR_VAR 0 4
67168: PUSH
67169: LD_VAR 0 1
67173: PUSH
67174: FOR_IN
67175: IFFALSE 67358
// begin nat := GetNation ( i ) ;
67177: LD_ADDR_VAR 0 7
67181: PUSH
67182: LD_VAR 0 4
67186: PPUSH
67187: CALL_OW 248
67191: ST_TO_ADDR
// weapon := 0 ;
67192: LD_ADDR_VAR 0 8
67196: PUSH
67197: LD_INT 0
67199: ST_TO_ADDR
// if not nat then
67200: LD_VAR 0 7
67204: NOT
67205: IFFALSE 67209
// continue ;
67207: GO 67174
// for j in list [ nat ] do
67209: LD_ADDR_VAR 0 5
67213: PUSH
67214: LD_VAR 0 10
67218: PUSH
67219: LD_VAR 0 7
67223: ARRAY
67224: PUSH
67225: FOR_IN
67226: IFFALSE 67267
// if GetBWeapon ( i ) = j [ 1 ] then
67228: LD_VAR 0 4
67232: PPUSH
67233: CALL_OW 269
67237: PUSH
67238: LD_VAR 0 5
67242: PUSH
67243: LD_INT 1
67245: ARRAY
67246: EQUAL
67247: IFFALSE 67265
// begin weapon := j [ 2 ] ;
67249: LD_ADDR_VAR 0 8
67253: PUSH
67254: LD_VAR 0 5
67258: PUSH
67259: LD_INT 2
67261: ARRAY
67262: ST_TO_ADDR
// break ;
67263: GO 67267
// end ;
67265: GO 67225
67267: POP
67268: POP
// if not weapon then
67269: LD_VAR 0 8
67273: NOT
67274: IFFALSE 67278
// continue ;
67276: GO 67174
// for k in factories do
67278: LD_ADDR_VAR 0 6
67282: PUSH
67283: LD_VAR 0 2
67287: PUSH
67288: FOR_IN
67289: IFFALSE 67354
// begin weapons := AvailableWeaponList ( k ) ;
67291: LD_ADDR_VAR 0 9
67295: PUSH
67296: LD_VAR 0 6
67300: PPUSH
67301: CALL_OW 478
67305: ST_TO_ADDR
// if not weapons then
67306: LD_VAR 0 9
67310: NOT
67311: IFFALSE 67315
// continue ;
67313: GO 67288
// if weapon in weapons then
67315: LD_VAR 0 8
67319: PUSH
67320: LD_VAR 0 9
67324: IN
67325: IFFALSE 67352
// begin result := [ i , weapon ] ;
67327: LD_ADDR_VAR 0 3
67331: PUSH
67332: LD_VAR 0 4
67336: PUSH
67337: LD_VAR 0 8
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: ST_TO_ADDR
// exit ;
67346: POP
67347: POP
67348: POP
67349: POP
67350: GO 67360
// end ; end ;
67352: GO 67288
67354: POP
67355: POP
// end ;
67356: GO 67174
67358: POP
67359: POP
// end ;
67360: LD_VAR 0 3
67364: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67365: LD_INT 0
67367: PPUSH
// if not side or side > 8 then
67368: LD_VAR 0 3
67372: NOT
67373: PUSH
67374: LD_VAR 0 3
67378: PUSH
67379: LD_INT 8
67381: GREATER
67382: OR
67383: IFFALSE 67387
// exit ;
67385: GO 67446
// if not range then
67387: LD_VAR 0 4
67391: NOT
67392: IFFALSE 67403
// range := - 12 ;
67394: LD_ADDR_VAR 0 4
67398: PUSH
67399: LD_INT 12
67401: NEG
67402: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67403: LD_VAR 0 1
67407: PPUSH
67408: LD_VAR 0 2
67412: PPUSH
67413: LD_VAR 0 3
67417: PPUSH
67418: LD_VAR 0 4
67422: PPUSH
67423: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67427: LD_VAR 0 1
67431: PPUSH
67432: LD_VAR 0 2
67436: PPUSH
67437: LD_VAR 0 3
67441: PPUSH
67442: CALL_OW 331
// end ;
67446: LD_VAR 0 5
67450: RET
// export function Video ( mode ) ; begin
67451: LD_INT 0
67453: PPUSH
// ingame_video = mode ;
67454: LD_ADDR_OWVAR 52
67458: PUSH
67459: LD_VAR 0 1
67463: ST_TO_ADDR
// interface_hidden = mode ;
67464: LD_ADDR_OWVAR 54
67468: PUSH
67469: LD_VAR 0 1
67473: ST_TO_ADDR
// end ;
67474: LD_VAR 0 2
67478: RET
// export function Join ( array , element ) ; begin
67479: LD_INT 0
67481: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67482: LD_ADDR_VAR 0 3
67486: PUSH
67487: LD_VAR 0 1
67491: PPUSH
67492: LD_VAR 0 1
67496: PUSH
67497: LD_INT 1
67499: PLUS
67500: PPUSH
67501: LD_VAR 0 2
67505: PPUSH
67506: CALL_OW 1
67510: ST_TO_ADDR
// end ;
67511: LD_VAR 0 3
67515: RET
// export function JoinUnion ( array , element ) ; begin
67516: LD_INT 0
67518: PPUSH
// result := array union element ;
67519: LD_ADDR_VAR 0 3
67523: PUSH
67524: LD_VAR 0 1
67528: PUSH
67529: LD_VAR 0 2
67533: UNION
67534: ST_TO_ADDR
// end ;
67535: LD_VAR 0 3
67539: RET
// export function GetBehemoths ( side ) ; begin
67540: LD_INT 0
67542: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
67543: LD_ADDR_VAR 0 2
67547: PUSH
67548: LD_INT 22
67550: PUSH
67551: LD_VAR 0 1
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 31
67562: PUSH
67563: LD_INT 25
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PPUSH
67574: CALL_OW 69
67578: ST_TO_ADDR
// end ;
67579: LD_VAR 0 2
67583: RET
// export function Shuffle ( array ) ; var i , index ; begin
67584: LD_INT 0
67586: PPUSH
67587: PPUSH
67588: PPUSH
// result := [ ] ;
67589: LD_ADDR_VAR 0 2
67593: PUSH
67594: EMPTY
67595: ST_TO_ADDR
// if not array then
67596: LD_VAR 0 1
67600: NOT
67601: IFFALSE 67605
// exit ;
67603: GO 67704
// Randomize ;
67605: CALL_OW 10
// for i = array downto 1 do
67609: LD_ADDR_VAR 0 3
67613: PUSH
67614: DOUBLE
67615: LD_VAR 0 1
67619: INC
67620: ST_TO_ADDR
67621: LD_INT 1
67623: PUSH
67624: FOR_DOWNTO
67625: IFFALSE 67702
// begin index := rand ( 1 , array ) ;
67627: LD_ADDR_VAR 0 4
67631: PUSH
67632: LD_INT 1
67634: PPUSH
67635: LD_VAR 0 1
67639: PPUSH
67640: CALL_OW 12
67644: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67645: LD_ADDR_VAR 0 2
67649: PUSH
67650: LD_VAR 0 2
67654: PPUSH
67655: LD_VAR 0 2
67659: PUSH
67660: LD_INT 1
67662: PLUS
67663: PPUSH
67664: LD_VAR 0 1
67668: PUSH
67669: LD_VAR 0 4
67673: ARRAY
67674: PPUSH
67675: CALL_OW 2
67679: ST_TO_ADDR
// array := Delete ( array , index ) ;
67680: LD_ADDR_VAR 0 1
67684: PUSH
67685: LD_VAR 0 1
67689: PPUSH
67690: LD_VAR 0 4
67694: PPUSH
67695: CALL_OW 3
67699: ST_TO_ADDR
// end ;
67700: GO 67624
67702: POP
67703: POP
// end ;
67704: LD_VAR 0 2
67708: RET
// export function GetBaseMaterials ( base ) ; begin
67709: LD_INT 0
67711: PPUSH
// result := [ 0 , 0 , 0 ] ;
67712: LD_ADDR_VAR 0 2
67716: PUSH
67717: LD_INT 0
67719: PUSH
67720: LD_INT 0
67722: PUSH
67723: LD_INT 0
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: LIST
67730: ST_TO_ADDR
// if not base then
67731: LD_VAR 0 1
67735: NOT
67736: IFFALSE 67740
// exit ;
67738: GO 67789
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67740: LD_ADDR_VAR 0 2
67744: PUSH
67745: LD_VAR 0 1
67749: PPUSH
67750: LD_INT 1
67752: PPUSH
67753: CALL_OW 275
67757: PUSH
67758: LD_VAR 0 1
67762: PPUSH
67763: LD_INT 2
67765: PPUSH
67766: CALL_OW 275
67770: PUSH
67771: LD_VAR 0 1
67775: PPUSH
67776: LD_INT 3
67778: PPUSH
67779: CALL_OW 275
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: LIST
67788: ST_TO_ADDR
// end ;
67789: LD_VAR 0 2
67793: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67794: LD_INT 0
67796: PPUSH
67797: PPUSH
// result := array ;
67798: LD_ADDR_VAR 0 3
67802: PUSH
67803: LD_VAR 0 1
67807: ST_TO_ADDR
// if size > 0 then
67808: LD_VAR 0 2
67812: PUSH
67813: LD_INT 0
67815: GREATER
67816: IFFALSE 67862
// for i := array downto size do
67818: LD_ADDR_VAR 0 4
67822: PUSH
67823: DOUBLE
67824: LD_VAR 0 1
67828: INC
67829: ST_TO_ADDR
67830: LD_VAR 0 2
67834: PUSH
67835: FOR_DOWNTO
67836: IFFALSE 67860
// result := Delete ( result , result ) ;
67838: LD_ADDR_VAR 0 3
67842: PUSH
67843: LD_VAR 0 3
67847: PPUSH
67848: LD_VAR 0 3
67852: PPUSH
67853: CALL_OW 3
67857: ST_TO_ADDR
67858: GO 67835
67860: POP
67861: POP
// end ;
67862: LD_VAR 0 3
67866: RET
// export function ComExit ( unit ) ; var tmp ; begin
67867: LD_INT 0
67869: PPUSH
67870: PPUSH
// if not IsInUnit ( unit ) then
67871: LD_VAR 0 1
67875: PPUSH
67876: CALL_OW 310
67880: NOT
67881: IFFALSE 67885
// exit ;
67883: GO 67945
// tmp := IsInUnit ( unit ) ;
67885: LD_ADDR_VAR 0 3
67889: PUSH
67890: LD_VAR 0 1
67894: PPUSH
67895: CALL_OW 310
67899: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67900: LD_VAR 0 3
67904: PPUSH
67905: CALL_OW 247
67909: PUSH
67910: LD_INT 2
67912: EQUAL
67913: IFFALSE 67926
// ComExitVehicle ( unit ) else
67915: LD_VAR 0 1
67919: PPUSH
67920: CALL_OW 121
67924: GO 67935
// ComExitBuilding ( unit ) ;
67926: LD_VAR 0 1
67930: PPUSH
67931: CALL_OW 122
// result := tmp ;
67935: LD_ADDR_VAR 0 2
67939: PUSH
67940: LD_VAR 0 3
67944: ST_TO_ADDR
// end ;
67945: LD_VAR 0 2
67949: RET
// export function ResetHc ; begin
67950: LD_INT 0
67952: PPUSH
// InitHc ;
67953: CALL_OW 19
// hc_importance := 0 ;
67957: LD_ADDR_OWVAR 32
67961: PUSH
67962: LD_INT 0
67964: ST_TO_ADDR
// end ; end_of_file
67965: LD_VAR 0 1
67969: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
67970: LD_VAR 0 2
67974: PUSH
67975: LD_INT 100
67977: EQUAL
67978: IFFALSE 68927
// begin if not StreamModeActive then
67980: LD_EXP 106
67984: NOT
67985: IFFALSE 67995
// StreamModeActive := true ;
67987: LD_ADDR_EXP 106
67991: PUSH
67992: LD_INT 1
67994: ST_TO_ADDR
// if p3 = 0 then
67995: LD_VAR 0 3
67999: PUSH
68000: LD_INT 0
68002: EQUAL
68003: IFFALSE 68009
// InitStreamMode ;
68005: CALL 69160 0 0
// if p3 = 1 then
68009: LD_VAR 0 3
68013: PUSH
68014: LD_INT 1
68016: EQUAL
68017: IFFALSE 68027
// sRocket := true ;
68019: LD_ADDR_EXP 111
68023: PUSH
68024: LD_INT 1
68026: ST_TO_ADDR
// if p3 = 2 then
68027: LD_VAR 0 3
68031: PUSH
68032: LD_INT 2
68034: EQUAL
68035: IFFALSE 68045
// sSpeed := true ;
68037: LD_ADDR_EXP 110
68041: PUSH
68042: LD_INT 1
68044: ST_TO_ADDR
// if p3 = 3 then
68045: LD_VAR 0 3
68049: PUSH
68050: LD_INT 3
68052: EQUAL
68053: IFFALSE 68063
// sEngine := true ;
68055: LD_ADDR_EXP 112
68059: PUSH
68060: LD_INT 1
68062: ST_TO_ADDR
// if p3 = 4 then
68063: LD_VAR 0 3
68067: PUSH
68068: LD_INT 4
68070: EQUAL
68071: IFFALSE 68081
// sSpec := true ;
68073: LD_ADDR_EXP 109
68077: PUSH
68078: LD_INT 1
68080: ST_TO_ADDR
// if p3 = 5 then
68081: LD_VAR 0 3
68085: PUSH
68086: LD_INT 5
68088: EQUAL
68089: IFFALSE 68099
// sLevel := true ;
68091: LD_ADDR_EXP 113
68095: PUSH
68096: LD_INT 1
68098: ST_TO_ADDR
// if p3 = 6 then
68099: LD_VAR 0 3
68103: PUSH
68104: LD_INT 6
68106: EQUAL
68107: IFFALSE 68117
// sArmoury := true ;
68109: LD_ADDR_EXP 114
68113: PUSH
68114: LD_INT 1
68116: ST_TO_ADDR
// if p3 = 7 then
68117: LD_VAR 0 3
68121: PUSH
68122: LD_INT 7
68124: EQUAL
68125: IFFALSE 68135
// sRadar := true ;
68127: LD_ADDR_EXP 115
68131: PUSH
68132: LD_INT 1
68134: ST_TO_ADDR
// if p3 = 8 then
68135: LD_VAR 0 3
68139: PUSH
68140: LD_INT 8
68142: EQUAL
68143: IFFALSE 68153
// sBunker := true ;
68145: LD_ADDR_EXP 116
68149: PUSH
68150: LD_INT 1
68152: ST_TO_ADDR
// if p3 = 9 then
68153: LD_VAR 0 3
68157: PUSH
68158: LD_INT 9
68160: EQUAL
68161: IFFALSE 68171
// sHack := true ;
68163: LD_ADDR_EXP 117
68167: PUSH
68168: LD_INT 1
68170: ST_TO_ADDR
// if p3 = 10 then
68171: LD_VAR 0 3
68175: PUSH
68176: LD_INT 10
68178: EQUAL
68179: IFFALSE 68189
// sFire := true ;
68181: LD_ADDR_EXP 118
68185: PUSH
68186: LD_INT 1
68188: ST_TO_ADDR
// if p3 = 11 then
68189: LD_VAR 0 3
68193: PUSH
68194: LD_INT 11
68196: EQUAL
68197: IFFALSE 68207
// sRefresh := true ;
68199: LD_ADDR_EXP 119
68203: PUSH
68204: LD_INT 1
68206: ST_TO_ADDR
// if p3 = 12 then
68207: LD_VAR 0 3
68211: PUSH
68212: LD_INT 12
68214: EQUAL
68215: IFFALSE 68225
// sExp := true ;
68217: LD_ADDR_EXP 120
68221: PUSH
68222: LD_INT 1
68224: ST_TO_ADDR
// if p3 = 13 then
68225: LD_VAR 0 3
68229: PUSH
68230: LD_INT 13
68232: EQUAL
68233: IFFALSE 68243
// sDepot := true ;
68235: LD_ADDR_EXP 121
68239: PUSH
68240: LD_INT 1
68242: ST_TO_ADDR
// if p3 = 14 then
68243: LD_VAR 0 3
68247: PUSH
68248: LD_INT 14
68250: EQUAL
68251: IFFALSE 68261
// sFlag := true ;
68253: LD_ADDR_EXP 122
68257: PUSH
68258: LD_INT 1
68260: ST_TO_ADDR
// if p3 = 15 then
68261: LD_VAR 0 3
68265: PUSH
68266: LD_INT 15
68268: EQUAL
68269: IFFALSE 68279
// sKamikadze := true ;
68271: LD_ADDR_EXP 130
68275: PUSH
68276: LD_INT 1
68278: ST_TO_ADDR
// if p3 = 16 then
68279: LD_VAR 0 3
68283: PUSH
68284: LD_INT 16
68286: EQUAL
68287: IFFALSE 68297
// sTroll := true ;
68289: LD_ADDR_EXP 131
68293: PUSH
68294: LD_INT 1
68296: ST_TO_ADDR
// if p3 = 17 then
68297: LD_VAR 0 3
68301: PUSH
68302: LD_INT 17
68304: EQUAL
68305: IFFALSE 68315
// sSlow := true ;
68307: LD_ADDR_EXP 132
68311: PUSH
68312: LD_INT 1
68314: ST_TO_ADDR
// if p3 = 18 then
68315: LD_VAR 0 3
68319: PUSH
68320: LD_INT 18
68322: EQUAL
68323: IFFALSE 68333
// sLack := true ;
68325: LD_ADDR_EXP 133
68329: PUSH
68330: LD_INT 1
68332: ST_TO_ADDR
// if p3 = 19 then
68333: LD_VAR 0 3
68337: PUSH
68338: LD_INT 19
68340: EQUAL
68341: IFFALSE 68351
// sTank := true ;
68343: LD_ADDR_EXP 135
68347: PUSH
68348: LD_INT 1
68350: ST_TO_ADDR
// if p3 = 20 then
68351: LD_VAR 0 3
68355: PUSH
68356: LD_INT 20
68358: EQUAL
68359: IFFALSE 68369
// sRemote := true ;
68361: LD_ADDR_EXP 136
68365: PUSH
68366: LD_INT 1
68368: ST_TO_ADDR
// if p3 = 21 then
68369: LD_VAR 0 3
68373: PUSH
68374: LD_INT 21
68376: EQUAL
68377: IFFALSE 68387
// sPowell := true ;
68379: LD_ADDR_EXP 137
68383: PUSH
68384: LD_INT 1
68386: ST_TO_ADDR
// if p3 = 22 then
68387: LD_VAR 0 3
68391: PUSH
68392: LD_INT 22
68394: EQUAL
68395: IFFALSE 68405
// sTeleport := true ;
68397: LD_ADDR_EXP 140
68401: PUSH
68402: LD_INT 1
68404: ST_TO_ADDR
// if p3 = 23 then
68405: LD_VAR 0 3
68409: PUSH
68410: LD_INT 23
68412: EQUAL
68413: IFFALSE 68423
// sOilTower := true ;
68415: LD_ADDR_EXP 142
68419: PUSH
68420: LD_INT 1
68422: ST_TO_ADDR
// if p3 = 24 then
68423: LD_VAR 0 3
68427: PUSH
68428: LD_INT 24
68430: EQUAL
68431: IFFALSE 68441
// sShovel := true ;
68433: LD_ADDR_EXP 143
68437: PUSH
68438: LD_INT 1
68440: ST_TO_ADDR
// if p3 = 25 then
68441: LD_VAR 0 3
68445: PUSH
68446: LD_INT 25
68448: EQUAL
68449: IFFALSE 68459
// sSheik := true ;
68451: LD_ADDR_EXP 144
68455: PUSH
68456: LD_INT 1
68458: ST_TO_ADDR
// if p3 = 26 then
68459: LD_VAR 0 3
68463: PUSH
68464: LD_INT 26
68466: EQUAL
68467: IFFALSE 68477
// sEarthquake := true ;
68469: LD_ADDR_EXP 146
68473: PUSH
68474: LD_INT 1
68476: ST_TO_ADDR
// if p3 = 27 then
68477: LD_VAR 0 3
68481: PUSH
68482: LD_INT 27
68484: EQUAL
68485: IFFALSE 68495
// sAI := true ;
68487: LD_ADDR_EXP 147
68491: PUSH
68492: LD_INT 1
68494: ST_TO_ADDR
// if p3 = 28 then
68495: LD_VAR 0 3
68499: PUSH
68500: LD_INT 28
68502: EQUAL
68503: IFFALSE 68513
// sCargo := true ;
68505: LD_ADDR_EXP 150
68509: PUSH
68510: LD_INT 1
68512: ST_TO_ADDR
// if p3 = 29 then
68513: LD_VAR 0 3
68517: PUSH
68518: LD_INT 29
68520: EQUAL
68521: IFFALSE 68531
// sDLaser := true ;
68523: LD_ADDR_EXP 151
68527: PUSH
68528: LD_INT 1
68530: ST_TO_ADDR
// if p3 = 30 then
68531: LD_VAR 0 3
68535: PUSH
68536: LD_INT 30
68538: EQUAL
68539: IFFALSE 68549
// sExchange := true ;
68541: LD_ADDR_EXP 152
68545: PUSH
68546: LD_INT 1
68548: ST_TO_ADDR
// if p3 = 31 then
68549: LD_VAR 0 3
68553: PUSH
68554: LD_INT 31
68556: EQUAL
68557: IFFALSE 68567
// sFac := true ;
68559: LD_ADDR_EXP 153
68563: PUSH
68564: LD_INT 1
68566: ST_TO_ADDR
// if p3 = 32 then
68567: LD_VAR 0 3
68571: PUSH
68572: LD_INT 32
68574: EQUAL
68575: IFFALSE 68585
// sPower := true ;
68577: LD_ADDR_EXP 154
68581: PUSH
68582: LD_INT 1
68584: ST_TO_ADDR
// if p3 = 33 then
68585: LD_VAR 0 3
68589: PUSH
68590: LD_INT 33
68592: EQUAL
68593: IFFALSE 68603
// sRandom := true ;
68595: LD_ADDR_EXP 155
68599: PUSH
68600: LD_INT 1
68602: ST_TO_ADDR
// if p3 = 34 then
68603: LD_VAR 0 3
68607: PUSH
68608: LD_INT 34
68610: EQUAL
68611: IFFALSE 68621
// sShield := true ;
68613: LD_ADDR_EXP 156
68617: PUSH
68618: LD_INT 1
68620: ST_TO_ADDR
// if p3 = 35 then
68621: LD_VAR 0 3
68625: PUSH
68626: LD_INT 35
68628: EQUAL
68629: IFFALSE 68639
// sTime := true ;
68631: LD_ADDR_EXP 157
68635: PUSH
68636: LD_INT 1
68638: ST_TO_ADDR
// if p3 = 36 then
68639: LD_VAR 0 3
68643: PUSH
68644: LD_INT 36
68646: EQUAL
68647: IFFALSE 68657
// sTools := true ;
68649: LD_ADDR_EXP 158
68653: PUSH
68654: LD_INT 1
68656: ST_TO_ADDR
// if p3 = 101 then
68657: LD_VAR 0 3
68661: PUSH
68662: LD_INT 101
68664: EQUAL
68665: IFFALSE 68675
// sSold := true ;
68667: LD_ADDR_EXP 123
68671: PUSH
68672: LD_INT 1
68674: ST_TO_ADDR
// if p3 = 102 then
68675: LD_VAR 0 3
68679: PUSH
68680: LD_INT 102
68682: EQUAL
68683: IFFALSE 68693
// sDiff := true ;
68685: LD_ADDR_EXP 124
68689: PUSH
68690: LD_INT 1
68692: ST_TO_ADDR
// if p3 = 103 then
68693: LD_VAR 0 3
68697: PUSH
68698: LD_INT 103
68700: EQUAL
68701: IFFALSE 68711
// sFog := true ;
68703: LD_ADDR_EXP 127
68707: PUSH
68708: LD_INT 1
68710: ST_TO_ADDR
// if p3 = 104 then
68711: LD_VAR 0 3
68715: PUSH
68716: LD_INT 104
68718: EQUAL
68719: IFFALSE 68729
// sReset := true ;
68721: LD_ADDR_EXP 128
68725: PUSH
68726: LD_INT 1
68728: ST_TO_ADDR
// if p3 = 105 then
68729: LD_VAR 0 3
68733: PUSH
68734: LD_INT 105
68736: EQUAL
68737: IFFALSE 68747
// sSun := true ;
68739: LD_ADDR_EXP 129
68743: PUSH
68744: LD_INT 1
68746: ST_TO_ADDR
// if p3 = 106 then
68747: LD_VAR 0 3
68751: PUSH
68752: LD_INT 106
68754: EQUAL
68755: IFFALSE 68765
// sTiger := true ;
68757: LD_ADDR_EXP 125
68761: PUSH
68762: LD_INT 1
68764: ST_TO_ADDR
// if p3 = 107 then
68765: LD_VAR 0 3
68769: PUSH
68770: LD_INT 107
68772: EQUAL
68773: IFFALSE 68783
// sBomb := true ;
68775: LD_ADDR_EXP 126
68779: PUSH
68780: LD_INT 1
68782: ST_TO_ADDR
// if p3 = 108 then
68783: LD_VAR 0 3
68787: PUSH
68788: LD_INT 108
68790: EQUAL
68791: IFFALSE 68801
// sWound := true ;
68793: LD_ADDR_EXP 134
68797: PUSH
68798: LD_INT 1
68800: ST_TO_ADDR
// if p3 = 109 then
68801: LD_VAR 0 3
68805: PUSH
68806: LD_INT 109
68808: EQUAL
68809: IFFALSE 68819
// sBetray := true ;
68811: LD_ADDR_EXP 138
68815: PUSH
68816: LD_INT 1
68818: ST_TO_ADDR
// if p3 = 110 then
68819: LD_VAR 0 3
68823: PUSH
68824: LD_INT 110
68826: EQUAL
68827: IFFALSE 68837
// sContamin := true ;
68829: LD_ADDR_EXP 139
68833: PUSH
68834: LD_INT 1
68836: ST_TO_ADDR
// if p3 = 111 then
68837: LD_VAR 0 3
68841: PUSH
68842: LD_INT 111
68844: EQUAL
68845: IFFALSE 68855
// sOil := true ;
68847: LD_ADDR_EXP 141
68851: PUSH
68852: LD_INT 1
68854: ST_TO_ADDR
// if p3 = 112 then
68855: LD_VAR 0 3
68859: PUSH
68860: LD_INT 112
68862: EQUAL
68863: IFFALSE 68873
// sStu := true ;
68865: LD_ADDR_EXP 145
68869: PUSH
68870: LD_INT 1
68872: ST_TO_ADDR
// if p3 = 113 then
68873: LD_VAR 0 3
68877: PUSH
68878: LD_INT 113
68880: EQUAL
68881: IFFALSE 68891
// sBazooka := true ;
68883: LD_ADDR_EXP 148
68887: PUSH
68888: LD_INT 1
68890: ST_TO_ADDR
// if p3 = 114 then
68891: LD_VAR 0 3
68895: PUSH
68896: LD_INT 114
68898: EQUAL
68899: IFFALSE 68909
// sMortar := true ;
68901: LD_ADDR_EXP 149
68905: PUSH
68906: LD_INT 1
68908: ST_TO_ADDR
// if p3 = 115 then
68909: LD_VAR 0 3
68913: PUSH
68914: LD_INT 115
68916: EQUAL
68917: IFFALSE 68927
// sRanger := true ;
68919: LD_ADDR_EXP 159
68923: PUSH
68924: LD_INT 1
68926: ST_TO_ADDR
// end ; if p2 = 101 then
68927: LD_VAR 0 2
68931: PUSH
68932: LD_INT 101
68934: EQUAL
68935: IFFALSE 69138
// begin case p3 of 1 :
68937: LD_VAR 0 3
68941: PUSH
68942: LD_INT 1
68944: DOUBLE
68945: EQUAL
68946: IFTRUE 68950
68948: GO 68957
68950: POP
// hHackUnlimitedResources ; 2 :
68951: CALL 79232 0 0
68955: GO 69138
68957: LD_INT 2
68959: DOUBLE
68960: EQUAL
68961: IFTRUE 68965
68963: GO 68972
68965: POP
// hHackSetLevel10 ; 3 :
68966: CALL 79365 0 0
68970: GO 69138
68972: LD_INT 3
68974: DOUBLE
68975: EQUAL
68976: IFTRUE 68980
68978: GO 68987
68980: POP
// hHackSetLevel10YourUnits ; 4 :
68981: CALL 79450 0 0
68985: GO 69138
68987: LD_INT 4
68989: DOUBLE
68990: EQUAL
68991: IFTRUE 68995
68993: GO 69017
68995: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
68996: LD_VAR 0 4
69000: PPUSH
69001: LD_VAR 0 5
69005: PPUSH
69006: LD_VAR 0 6
69010: PPUSH
69011: CALL 79540 0 3
69015: GO 69138
69017: LD_INT 5
69019: DOUBLE
69020: EQUAL
69021: IFTRUE 69025
69023: GO 69032
69025: POP
// hHackSpawnVehicle ; 6 :
69026: CALL 79601 0 0
69030: GO 69138
69032: LD_INT 6
69034: DOUBLE
69035: EQUAL
69036: IFTRUE 69040
69038: GO 69047
69040: POP
// hHackInvincible ; 7 :
69041: CALL 80147 0 0
69045: GO 69138
69047: LD_INT 7
69049: DOUBLE
69050: EQUAL
69051: IFTRUE 69055
69053: GO 69062
69055: POP
// hHackInvisible ; 8 :
69056: CALL 80258 0 0
69060: GO 69138
69062: LD_INT 8
69064: DOUBLE
69065: EQUAL
69066: IFTRUE 69070
69068: GO 69077
69070: POP
// hHackChangeYourSide ; 9 :
69071: CALL 80315 0 0
69075: GO 69138
69077: LD_INT 9
69079: DOUBLE
69080: EQUAL
69081: IFTRUE 69085
69083: GO 69092
69085: POP
// hHackChangeUnitSide ; 10 :
69086: CALL 80357 0 0
69090: GO 69138
69092: LD_INT 10
69094: DOUBLE
69095: EQUAL
69096: IFTRUE 69100
69098: GO 69107
69100: POP
// hHackFog ; 11 :
69101: CALL 80458 0 0
69105: GO 69138
69107: LD_INT 11
69109: DOUBLE
69110: EQUAL
69111: IFTRUE 69115
69113: GO 69122
69115: POP
// hHackApeman ; 12 :
69116: CALL 80473 0 0
69120: GO 69138
69122: LD_INT 12
69124: DOUBLE
69125: EQUAL
69126: IFTRUE 69130
69128: GO 69137
69130: POP
// hHackBoom ; end ;
69131: CALL 80558 0 0
69135: GO 69138
69137: POP
// end ; end ;
69138: PPOPN 6
69140: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
69141: GO 69143
69143: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
69144: LD_STRING initStreamRollete();
69146: PPUSH
69147: CALL_OW 559
// InitStreamMode ;
69151: CALL 69160 0 0
// DefineStreamItems ( ) ;
69155: CALL 69600 0 0
// end ;
69159: END
// function InitStreamMode ; begin
69160: LD_INT 0
69162: PPUSH
// streamModeActive := false ;
69163: LD_ADDR_EXP 106
69167: PUSH
69168: LD_INT 0
69170: ST_TO_ADDR
// normalCounter := 36 ;
69171: LD_ADDR_EXP 107
69175: PUSH
69176: LD_INT 36
69178: ST_TO_ADDR
// hardcoreCounter := 16 ;
69179: LD_ADDR_EXP 108
69183: PUSH
69184: LD_INT 16
69186: ST_TO_ADDR
// sRocket := false ;
69187: LD_ADDR_EXP 111
69191: PUSH
69192: LD_INT 0
69194: ST_TO_ADDR
// sSpeed := false ;
69195: LD_ADDR_EXP 110
69199: PUSH
69200: LD_INT 0
69202: ST_TO_ADDR
// sEngine := false ;
69203: LD_ADDR_EXP 112
69207: PUSH
69208: LD_INT 0
69210: ST_TO_ADDR
// sSpec := false ;
69211: LD_ADDR_EXP 109
69215: PUSH
69216: LD_INT 0
69218: ST_TO_ADDR
// sLevel := false ;
69219: LD_ADDR_EXP 113
69223: PUSH
69224: LD_INT 0
69226: ST_TO_ADDR
// sArmoury := false ;
69227: LD_ADDR_EXP 114
69231: PUSH
69232: LD_INT 0
69234: ST_TO_ADDR
// sRadar := false ;
69235: LD_ADDR_EXP 115
69239: PUSH
69240: LD_INT 0
69242: ST_TO_ADDR
// sBunker := false ;
69243: LD_ADDR_EXP 116
69247: PUSH
69248: LD_INT 0
69250: ST_TO_ADDR
// sHack := false ;
69251: LD_ADDR_EXP 117
69255: PUSH
69256: LD_INT 0
69258: ST_TO_ADDR
// sFire := false ;
69259: LD_ADDR_EXP 118
69263: PUSH
69264: LD_INT 0
69266: ST_TO_ADDR
// sRefresh := false ;
69267: LD_ADDR_EXP 119
69271: PUSH
69272: LD_INT 0
69274: ST_TO_ADDR
// sExp := false ;
69275: LD_ADDR_EXP 120
69279: PUSH
69280: LD_INT 0
69282: ST_TO_ADDR
// sDepot := false ;
69283: LD_ADDR_EXP 121
69287: PUSH
69288: LD_INT 0
69290: ST_TO_ADDR
// sFlag := false ;
69291: LD_ADDR_EXP 122
69295: PUSH
69296: LD_INT 0
69298: ST_TO_ADDR
// sKamikadze := false ;
69299: LD_ADDR_EXP 130
69303: PUSH
69304: LD_INT 0
69306: ST_TO_ADDR
// sTroll := false ;
69307: LD_ADDR_EXP 131
69311: PUSH
69312: LD_INT 0
69314: ST_TO_ADDR
// sSlow := false ;
69315: LD_ADDR_EXP 132
69319: PUSH
69320: LD_INT 0
69322: ST_TO_ADDR
// sLack := false ;
69323: LD_ADDR_EXP 133
69327: PUSH
69328: LD_INT 0
69330: ST_TO_ADDR
// sTank := false ;
69331: LD_ADDR_EXP 135
69335: PUSH
69336: LD_INT 0
69338: ST_TO_ADDR
// sRemote := false ;
69339: LD_ADDR_EXP 136
69343: PUSH
69344: LD_INT 0
69346: ST_TO_ADDR
// sPowell := false ;
69347: LD_ADDR_EXP 137
69351: PUSH
69352: LD_INT 0
69354: ST_TO_ADDR
// sTeleport := false ;
69355: LD_ADDR_EXP 140
69359: PUSH
69360: LD_INT 0
69362: ST_TO_ADDR
// sOilTower := false ;
69363: LD_ADDR_EXP 142
69367: PUSH
69368: LD_INT 0
69370: ST_TO_ADDR
// sShovel := false ;
69371: LD_ADDR_EXP 143
69375: PUSH
69376: LD_INT 0
69378: ST_TO_ADDR
// sSheik := false ;
69379: LD_ADDR_EXP 144
69383: PUSH
69384: LD_INT 0
69386: ST_TO_ADDR
// sEarthquake := false ;
69387: LD_ADDR_EXP 146
69391: PUSH
69392: LD_INT 0
69394: ST_TO_ADDR
// sAI := false ;
69395: LD_ADDR_EXP 147
69399: PUSH
69400: LD_INT 0
69402: ST_TO_ADDR
// sCargo := false ;
69403: LD_ADDR_EXP 150
69407: PUSH
69408: LD_INT 0
69410: ST_TO_ADDR
// sDLaser := false ;
69411: LD_ADDR_EXP 151
69415: PUSH
69416: LD_INT 0
69418: ST_TO_ADDR
// sExchange := false ;
69419: LD_ADDR_EXP 152
69423: PUSH
69424: LD_INT 0
69426: ST_TO_ADDR
// sFac := false ;
69427: LD_ADDR_EXP 153
69431: PUSH
69432: LD_INT 0
69434: ST_TO_ADDR
// sPower := false ;
69435: LD_ADDR_EXP 154
69439: PUSH
69440: LD_INT 0
69442: ST_TO_ADDR
// sRandom := false ;
69443: LD_ADDR_EXP 155
69447: PUSH
69448: LD_INT 0
69450: ST_TO_ADDR
// sShield := false ;
69451: LD_ADDR_EXP 156
69455: PUSH
69456: LD_INT 0
69458: ST_TO_ADDR
// sTime := false ;
69459: LD_ADDR_EXP 157
69463: PUSH
69464: LD_INT 0
69466: ST_TO_ADDR
// sTools := false ;
69467: LD_ADDR_EXP 158
69471: PUSH
69472: LD_INT 0
69474: ST_TO_ADDR
// sSold := false ;
69475: LD_ADDR_EXP 123
69479: PUSH
69480: LD_INT 0
69482: ST_TO_ADDR
// sDiff := false ;
69483: LD_ADDR_EXP 124
69487: PUSH
69488: LD_INT 0
69490: ST_TO_ADDR
// sFog := false ;
69491: LD_ADDR_EXP 127
69495: PUSH
69496: LD_INT 0
69498: ST_TO_ADDR
// sReset := false ;
69499: LD_ADDR_EXP 128
69503: PUSH
69504: LD_INT 0
69506: ST_TO_ADDR
// sSun := false ;
69507: LD_ADDR_EXP 129
69511: PUSH
69512: LD_INT 0
69514: ST_TO_ADDR
// sTiger := false ;
69515: LD_ADDR_EXP 125
69519: PUSH
69520: LD_INT 0
69522: ST_TO_ADDR
// sBomb := false ;
69523: LD_ADDR_EXP 126
69527: PUSH
69528: LD_INT 0
69530: ST_TO_ADDR
// sWound := false ;
69531: LD_ADDR_EXP 134
69535: PUSH
69536: LD_INT 0
69538: ST_TO_ADDR
// sBetray := false ;
69539: LD_ADDR_EXP 138
69543: PUSH
69544: LD_INT 0
69546: ST_TO_ADDR
// sContamin := false ;
69547: LD_ADDR_EXP 139
69551: PUSH
69552: LD_INT 0
69554: ST_TO_ADDR
// sOil := false ;
69555: LD_ADDR_EXP 141
69559: PUSH
69560: LD_INT 0
69562: ST_TO_ADDR
// sStu := false ;
69563: LD_ADDR_EXP 145
69567: PUSH
69568: LD_INT 0
69570: ST_TO_ADDR
// sBazooka := false ;
69571: LD_ADDR_EXP 148
69575: PUSH
69576: LD_INT 0
69578: ST_TO_ADDR
// sMortar := false ;
69579: LD_ADDR_EXP 149
69583: PUSH
69584: LD_INT 0
69586: ST_TO_ADDR
// sRanger := false ;
69587: LD_ADDR_EXP 159
69591: PUSH
69592: LD_INT 0
69594: ST_TO_ADDR
// end ;
69595: LD_VAR 0 1
69599: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
69600: LD_INT 0
69602: PPUSH
69603: PPUSH
69604: PPUSH
69605: PPUSH
69606: PPUSH
// result := [ ] ;
69607: LD_ADDR_VAR 0 1
69611: PUSH
69612: EMPTY
69613: ST_TO_ADDR
// if campaign_id = 1 then
69614: LD_OWVAR 69
69618: PUSH
69619: LD_INT 1
69621: EQUAL
69622: IFFALSE 72560
// begin case mission_number of 1 :
69624: LD_OWVAR 70
69628: PUSH
69629: LD_INT 1
69631: DOUBLE
69632: EQUAL
69633: IFTRUE 69637
69635: GO 69701
69637: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
69638: LD_ADDR_VAR 0 1
69642: PUSH
69643: LD_INT 2
69645: PUSH
69646: LD_INT 4
69648: PUSH
69649: LD_INT 11
69651: PUSH
69652: LD_INT 12
69654: PUSH
69655: LD_INT 15
69657: PUSH
69658: LD_INT 16
69660: PUSH
69661: LD_INT 22
69663: PUSH
69664: LD_INT 23
69666: PUSH
69667: LD_INT 26
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: PUSH
69681: LD_INT 101
69683: PUSH
69684: LD_INT 102
69686: PUSH
69687: LD_INT 106
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: LIST
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: ST_TO_ADDR
69699: GO 72558
69701: LD_INT 2
69703: DOUBLE
69704: EQUAL
69705: IFTRUE 69709
69707: GO 69781
69709: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
69710: LD_ADDR_VAR 0 1
69714: PUSH
69715: LD_INT 2
69717: PUSH
69718: LD_INT 4
69720: PUSH
69721: LD_INT 11
69723: PUSH
69724: LD_INT 12
69726: PUSH
69727: LD_INT 15
69729: PUSH
69730: LD_INT 16
69732: PUSH
69733: LD_INT 22
69735: PUSH
69736: LD_INT 23
69738: PUSH
69739: LD_INT 26
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: LIST
69752: PUSH
69753: LD_INT 101
69755: PUSH
69756: LD_INT 102
69758: PUSH
69759: LD_INT 105
69761: PUSH
69762: LD_INT 106
69764: PUSH
69765: LD_INT 108
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: ST_TO_ADDR
69779: GO 72558
69781: LD_INT 3
69783: DOUBLE
69784: EQUAL
69785: IFTRUE 69789
69787: GO 69865
69789: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
69790: LD_ADDR_VAR 0 1
69794: PUSH
69795: LD_INT 2
69797: PUSH
69798: LD_INT 4
69800: PUSH
69801: LD_INT 5
69803: PUSH
69804: LD_INT 11
69806: PUSH
69807: LD_INT 12
69809: PUSH
69810: LD_INT 15
69812: PUSH
69813: LD_INT 16
69815: PUSH
69816: LD_INT 22
69818: PUSH
69819: LD_INT 26
69821: PUSH
69822: LD_INT 36
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: PUSH
69837: LD_INT 101
69839: PUSH
69840: LD_INT 102
69842: PUSH
69843: LD_INT 105
69845: PUSH
69846: LD_INT 106
69848: PUSH
69849: LD_INT 108
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: ST_TO_ADDR
69863: GO 72558
69865: LD_INT 4
69867: DOUBLE
69868: EQUAL
69869: IFTRUE 69873
69871: GO 69957
69873: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
69874: LD_ADDR_VAR 0 1
69878: PUSH
69879: LD_INT 2
69881: PUSH
69882: LD_INT 4
69884: PUSH
69885: LD_INT 5
69887: PUSH
69888: LD_INT 8
69890: PUSH
69891: LD_INT 11
69893: PUSH
69894: LD_INT 12
69896: PUSH
69897: LD_INT 15
69899: PUSH
69900: LD_INT 16
69902: PUSH
69903: LD_INT 22
69905: PUSH
69906: LD_INT 23
69908: PUSH
69909: LD_INT 26
69911: PUSH
69912: LD_INT 36
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 101
69931: PUSH
69932: LD_INT 102
69934: PUSH
69935: LD_INT 105
69937: PUSH
69938: LD_INT 106
69940: PUSH
69941: LD_INT 108
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: ST_TO_ADDR
69955: GO 72558
69957: LD_INT 5
69959: DOUBLE
69960: EQUAL
69961: IFTRUE 69965
69963: GO 70065
69965: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
69966: LD_ADDR_VAR 0 1
69970: PUSH
69971: LD_INT 2
69973: PUSH
69974: LD_INT 4
69976: PUSH
69977: LD_INT 5
69979: PUSH
69980: LD_INT 6
69982: PUSH
69983: LD_INT 8
69985: PUSH
69986: LD_INT 11
69988: PUSH
69989: LD_INT 12
69991: PUSH
69992: LD_INT 15
69994: PUSH
69995: LD_INT 16
69997: PUSH
69998: LD_INT 22
70000: PUSH
70001: LD_INT 23
70003: PUSH
70004: LD_INT 25
70006: PUSH
70007: LD_INT 26
70009: PUSH
70010: LD_INT 36
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: LIST
70017: LIST
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 101
70031: PUSH
70032: LD_INT 102
70034: PUSH
70035: LD_INT 105
70037: PUSH
70038: LD_INT 106
70040: PUSH
70041: LD_INT 108
70043: PUSH
70044: LD_INT 109
70046: PUSH
70047: LD_INT 112
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: ST_TO_ADDR
70063: GO 72558
70065: LD_INT 6
70067: DOUBLE
70068: EQUAL
70069: IFTRUE 70073
70071: GO 70193
70073: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
70074: LD_ADDR_VAR 0 1
70078: PUSH
70079: LD_INT 2
70081: PUSH
70082: LD_INT 4
70084: PUSH
70085: LD_INT 5
70087: PUSH
70088: LD_INT 6
70090: PUSH
70091: LD_INT 8
70093: PUSH
70094: LD_INT 11
70096: PUSH
70097: LD_INT 12
70099: PUSH
70100: LD_INT 15
70102: PUSH
70103: LD_INT 16
70105: PUSH
70106: LD_INT 20
70108: PUSH
70109: LD_INT 21
70111: PUSH
70112: LD_INT 22
70114: PUSH
70115: LD_INT 23
70117: PUSH
70118: LD_INT 25
70120: PUSH
70121: LD_INT 26
70123: PUSH
70124: LD_INT 30
70126: PUSH
70127: LD_INT 31
70129: PUSH
70130: LD_INT 32
70132: PUSH
70133: LD_INT 36
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 101
70159: PUSH
70160: LD_INT 102
70162: PUSH
70163: LD_INT 105
70165: PUSH
70166: LD_INT 106
70168: PUSH
70169: LD_INT 108
70171: PUSH
70172: LD_INT 109
70174: PUSH
70175: LD_INT 112
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: ST_TO_ADDR
70191: GO 72558
70193: LD_INT 7
70195: DOUBLE
70196: EQUAL
70197: IFTRUE 70201
70199: GO 70301
70201: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
70202: LD_ADDR_VAR 0 1
70206: PUSH
70207: LD_INT 2
70209: PUSH
70210: LD_INT 4
70212: PUSH
70213: LD_INT 5
70215: PUSH
70216: LD_INT 7
70218: PUSH
70219: LD_INT 11
70221: PUSH
70222: LD_INT 12
70224: PUSH
70225: LD_INT 15
70227: PUSH
70228: LD_INT 16
70230: PUSH
70231: LD_INT 20
70233: PUSH
70234: LD_INT 21
70236: PUSH
70237: LD_INT 22
70239: PUSH
70240: LD_INT 23
70242: PUSH
70243: LD_INT 25
70245: PUSH
70246: LD_INT 26
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: PUSH
70265: LD_INT 101
70267: PUSH
70268: LD_INT 102
70270: PUSH
70271: LD_INT 103
70273: PUSH
70274: LD_INT 105
70276: PUSH
70277: LD_INT 106
70279: PUSH
70280: LD_INT 108
70282: PUSH
70283: LD_INT 112
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: ST_TO_ADDR
70299: GO 72558
70301: LD_INT 8
70303: DOUBLE
70304: EQUAL
70305: IFTRUE 70309
70307: GO 70437
70309: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
70310: LD_ADDR_VAR 0 1
70314: PUSH
70315: LD_INT 2
70317: PUSH
70318: LD_INT 4
70320: PUSH
70321: LD_INT 5
70323: PUSH
70324: LD_INT 6
70326: PUSH
70327: LD_INT 7
70329: PUSH
70330: LD_INT 8
70332: PUSH
70333: LD_INT 11
70335: PUSH
70336: LD_INT 12
70338: PUSH
70339: LD_INT 15
70341: PUSH
70342: LD_INT 16
70344: PUSH
70345: LD_INT 20
70347: PUSH
70348: LD_INT 21
70350: PUSH
70351: LD_INT 22
70353: PUSH
70354: LD_INT 23
70356: PUSH
70357: LD_INT 25
70359: PUSH
70360: LD_INT 26
70362: PUSH
70363: LD_INT 30
70365: PUSH
70366: LD_INT 31
70368: PUSH
70369: LD_INT 32
70371: PUSH
70372: LD_INT 36
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: LIST
70390: LIST
70391: LIST
70392: LIST
70393: LIST
70394: LIST
70395: LIST
70396: PUSH
70397: LD_INT 101
70399: PUSH
70400: LD_INT 102
70402: PUSH
70403: LD_INT 103
70405: PUSH
70406: LD_INT 105
70408: PUSH
70409: LD_INT 106
70411: PUSH
70412: LD_INT 108
70414: PUSH
70415: LD_INT 109
70417: PUSH
70418: LD_INT 112
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: LIST
70425: LIST
70426: LIST
70427: LIST
70428: LIST
70429: LIST
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: ST_TO_ADDR
70435: GO 72558
70437: LD_INT 9
70439: DOUBLE
70440: EQUAL
70441: IFTRUE 70445
70443: GO 70581
70445: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
70446: LD_ADDR_VAR 0 1
70450: PUSH
70451: LD_INT 2
70453: PUSH
70454: LD_INT 4
70456: PUSH
70457: LD_INT 5
70459: PUSH
70460: LD_INT 6
70462: PUSH
70463: LD_INT 7
70465: PUSH
70466: LD_INT 8
70468: PUSH
70469: LD_INT 11
70471: PUSH
70472: LD_INT 12
70474: PUSH
70475: LD_INT 15
70477: PUSH
70478: LD_INT 16
70480: PUSH
70481: LD_INT 20
70483: PUSH
70484: LD_INT 21
70486: PUSH
70487: LD_INT 22
70489: PUSH
70490: LD_INT 23
70492: PUSH
70493: LD_INT 25
70495: PUSH
70496: LD_INT 26
70498: PUSH
70499: LD_INT 28
70501: PUSH
70502: LD_INT 30
70504: PUSH
70505: LD_INT 31
70507: PUSH
70508: LD_INT 32
70510: PUSH
70511: LD_INT 36
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: PUSH
70537: LD_INT 101
70539: PUSH
70540: LD_INT 102
70542: PUSH
70543: LD_INT 103
70545: PUSH
70546: LD_INT 105
70548: PUSH
70549: LD_INT 106
70551: PUSH
70552: LD_INT 108
70554: PUSH
70555: LD_INT 109
70557: PUSH
70558: LD_INT 112
70560: PUSH
70561: LD_INT 114
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: LIST
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: ST_TO_ADDR
70579: GO 72558
70581: LD_INT 10
70583: DOUBLE
70584: EQUAL
70585: IFTRUE 70589
70587: GO 70773
70589: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
70590: LD_ADDR_VAR 0 1
70594: PUSH
70595: LD_INT 2
70597: PUSH
70598: LD_INT 4
70600: PUSH
70601: LD_INT 5
70603: PUSH
70604: LD_INT 6
70606: PUSH
70607: LD_INT 7
70609: PUSH
70610: LD_INT 8
70612: PUSH
70613: LD_INT 9
70615: PUSH
70616: LD_INT 10
70618: PUSH
70619: LD_INT 11
70621: PUSH
70622: LD_INT 12
70624: PUSH
70625: LD_INT 13
70627: PUSH
70628: LD_INT 14
70630: PUSH
70631: LD_INT 15
70633: PUSH
70634: LD_INT 16
70636: PUSH
70637: LD_INT 17
70639: PUSH
70640: LD_INT 18
70642: PUSH
70643: LD_INT 19
70645: PUSH
70646: LD_INT 20
70648: PUSH
70649: LD_INT 21
70651: PUSH
70652: LD_INT 22
70654: PUSH
70655: LD_INT 23
70657: PUSH
70658: LD_INT 24
70660: PUSH
70661: LD_INT 25
70663: PUSH
70664: LD_INT 26
70666: PUSH
70667: LD_INT 28
70669: PUSH
70670: LD_INT 30
70672: PUSH
70673: LD_INT 31
70675: PUSH
70676: LD_INT 32
70678: PUSH
70679: LD_INT 36
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: LIST
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: PUSH
70713: LD_INT 101
70715: PUSH
70716: LD_INT 102
70718: PUSH
70719: LD_INT 103
70721: PUSH
70722: LD_INT 104
70724: PUSH
70725: LD_INT 105
70727: PUSH
70728: LD_INT 106
70730: PUSH
70731: LD_INT 107
70733: PUSH
70734: LD_INT 108
70736: PUSH
70737: LD_INT 109
70739: PUSH
70740: LD_INT 110
70742: PUSH
70743: LD_INT 111
70745: PUSH
70746: LD_INT 112
70748: PUSH
70749: LD_INT 114
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: LIST
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: PUSH
70767: EMPTY
70768: LIST
70769: LIST
70770: ST_TO_ADDR
70771: GO 72558
70773: LD_INT 11
70775: DOUBLE
70776: EQUAL
70777: IFTRUE 70781
70779: GO 70973
70781: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
70782: LD_ADDR_VAR 0 1
70786: PUSH
70787: LD_INT 2
70789: PUSH
70790: LD_INT 3
70792: PUSH
70793: LD_INT 4
70795: PUSH
70796: LD_INT 5
70798: PUSH
70799: LD_INT 6
70801: PUSH
70802: LD_INT 7
70804: PUSH
70805: LD_INT 8
70807: PUSH
70808: LD_INT 9
70810: PUSH
70811: LD_INT 10
70813: PUSH
70814: LD_INT 11
70816: PUSH
70817: LD_INT 12
70819: PUSH
70820: LD_INT 13
70822: PUSH
70823: LD_INT 14
70825: PUSH
70826: LD_INT 15
70828: PUSH
70829: LD_INT 16
70831: PUSH
70832: LD_INT 17
70834: PUSH
70835: LD_INT 18
70837: PUSH
70838: LD_INT 19
70840: PUSH
70841: LD_INT 20
70843: PUSH
70844: LD_INT 21
70846: PUSH
70847: LD_INT 22
70849: PUSH
70850: LD_INT 23
70852: PUSH
70853: LD_INT 24
70855: PUSH
70856: LD_INT 25
70858: PUSH
70859: LD_INT 26
70861: PUSH
70862: LD_INT 28
70864: PUSH
70865: LD_INT 30
70867: PUSH
70868: LD_INT 31
70870: PUSH
70871: LD_INT 32
70873: PUSH
70874: LD_INT 34
70876: PUSH
70877: LD_INT 36
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: LIST
70887: LIST
70888: LIST
70889: LIST
70890: LIST
70891: LIST
70892: LIST
70893: LIST
70894: LIST
70895: LIST
70896: LIST
70897: LIST
70898: LIST
70899: LIST
70900: LIST
70901: LIST
70902: LIST
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: LIST
70908: LIST
70909: LIST
70910: LIST
70911: LIST
70912: PUSH
70913: LD_INT 101
70915: PUSH
70916: LD_INT 102
70918: PUSH
70919: LD_INT 103
70921: PUSH
70922: LD_INT 104
70924: PUSH
70925: LD_INT 105
70927: PUSH
70928: LD_INT 106
70930: PUSH
70931: LD_INT 107
70933: PUSH
70934: LD_INT 108
70936: PUSH
70937: LD_INT 109
70939: PUSH
70940: LD_INT 110
70942: PUSH
70943: LD_INT 111
70945: PUSH
70946: LD_INT 112
70948: PUSH
70949: LD_INT 114
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: PUSH
70967: EMPTY
70968: LIST
70969: LIST
70970: ST_TO_ADDR
70971: GO 72558
70973: LD_INT 12
70975: DOUBLE
70976: EQUAL
70977: IFTRUE 70981
70979: GO 71189
70981: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
70982: LD_ADDR_VAR 0 1
70986: PUSH
70987: LD_INT 1
70989: PUSH
70990: LD_INT 2
70992: PUSH
70993: LD_INT 3
70995: PUSH
70996: LD_INT 4
70998: PUSH
70999: LD_INT 5
71001: PUSH
71002: LD_INT 6
71004: PUSH
71005: LD_INT 7
71007: PUSH
71008: LD_INT 8
71010: PUSH
71011: LD_INT 9
71013: PUSH
71014: LD_INT 10
71016: PUSH
71017: LD_INT 11
71019: PUSH
71020: LD_INT 12
71022: PUSH
71023: LD_INT 13
71025: PUSH
71026: LD_INT 14
71028: PUSH
71029: LD_INT 15
71031: PUSH
71032: LD_INT 16
71034: PUSH
71035: LD_INT 17
71037: PUSH
71038: LD_INT 18
71040: PUSH
71041: LD_INT 19
71043: PUSH
71044: LD_INT 20
71046: PUSH
71047: LD_INT 21
71049: PUSH
71050: LD_INT 22
71052: PUSH
71053: LD_INT 23
71055: PUSH
71056: LD_INT 24
71058: PUSH
71059: LD_INT 25
71061: PUSH
71062: LD_INT 26
71064: PUSH
71065: LD_INT 27
71067: PUSH
71068: LD_INT 28
71070: PUSH
71071: LD_INT 30
71073: PUSH
71074: LD_INT 31
71076: PUSH
71077: LD_INT 32
71079: PUSH
71080: LD_INT 33
71082: PUSH
71083: LD_INT 34
71085: PUSH
71086: LD_INT 36
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: LIST
71093: LIST
71094: LIST
71095: LIST
71096: LIST
71097: LIST
71098: LIST
71099: LIST
71100: LIST
71101: LIST
71102: LIST
71103: LIST
71104: LIST
71105: LIST
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: LIST
71111: LIST
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: LIST
71117: LIST
71118: LIST
71119: LIST
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: PUSH
71125: LD_INT 101
71127: PUSH
71128: LD_INT 102
71130: PUSH
71131: LD_INT 103
71133: PUSH
71134: LD_INT 104
71136: PUSH
71137: LD_INT 105
71139: PUSH
71140: LD_INT 106
71142: PUSH
71143: LD_INT 107
71145: PUSH
71146: LD_INT 108
71148: PUSH
71149: LD_INT 109
71151: PUSH
71152: LD_INT 110
71154: PUSH
71155: LD_INT 111
71157: PUSH
71158: LD_INT 112
71160: PUSH
71161: LD_INT 113
71163: PUSH
71164: LD_INT 114
71166: PUSH
71167: EMPTY
71168: LIST
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: ST_TO_ADDR
71187: GO 72558
71189: LD_INT 13
71191: DOUBLE
71192: EQUAL
71193: IFTRUE 71197
71195: GO 71393
71197: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
71198: LD_ADDR_VAR 0 1
71202: PUSH
71203: LD_INT 1
71205: PUSH
71206: LD_INT 2
71208: PUSH
71209: LD_INT 3
71211: PUSH
71212: LD_INT 4
71214: PUSH
71215: LD_INT 5
71217: PUSH
71218: LD_INT 8
71220: PUSH
71221: LD_INT 9
71223: PUSH
71224: LD_INT 10
71226: PUSH
71227: LD_INT 11
71229: PUSH
71230: LD_INT 12
71232: PUSH
71233: LD_INT 14
71235: PUSH
71236: LD_INT 15
71238: PUSH
71239: LD_INT 16
71241: PUSH
71242: LD_INT 17
71244: PUSH
71245: LD_INT 18
71247: PUSH
71248: LD_INT 19
71250: PUSH
71251: LD_INT 20
71253: PUSH
71254: LD_INT 21
71256: PUSH
71257: LD_INT 22
71259: PUSH
71260: LD_INT 23
71262: PUSH
71263: LD_INT 24
71265: PUSH
71266: LD_INT 25
71268: PUSH
71269: LD_INT 26
71271: PUSH
71272: LD_INT 27
71274: PUSH
71275: LD_INT 28
71277: PUSH
71278: LD_INT 30
71280: PUSH
71281: LD_INT 31
71283: PUSH
71284: LD_INT 32
71286: PUSH
71287: LD_INT 33
71289: PUSH
71290: LD_INT 34
71292: PUSH
71293: LD_INT 36
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: LIST
71300: LIST
71301: LIST
71302: LIST
71303: LIST
71304: LIST
71305: LIST
71306: LIST
71307: LIST
71308: LIST
71309: LIST
71310: LIST
71311: LIST
71312: LIST
71313: LIST
71314: LIST
71315: LIST
71316: LIST
71317: LIST
71318: LIST
71319: LIST
71320: LIST
71321: LIST
71322: LIST
71323: LIST
71324: LIST
71325: LIST
71326: LIST
71327: LIST
71328: PUSH
71329: LD_INT 101
71331: PUSH
71332: LD_INT 102
71334: PUSH
71335: LD_INT 103
71337: PUSH
71338: LD_INT 104
71340: PUSH
71341: LD_INT 105
71343: PUSH
71344: LD_INT 106
71346: PUSH
71347: LD_INT 107
71349: PUSH
71350: LD_INT 108
71352: PUSH
71353: LD_INT 109
71355: PUSH
71356: LD_INT 110
71358: PUSH
71359: LD_INT 111
71361: PUSH
71362: LD_INT 112
71364: PUSH
71365: LD_INT 113
71367: PUSH
71368: LD_INT 114
71370: PUSH
71371: EMPTY
71372: LIST
71373: LIST
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: LIST
71379: LIST
71380: LIST
71381: LIST
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: ST_TO_ADDR
71391: GO 72558
71393: LD_INT 14
71395: DOUBLE
71396: EQUAL
71397: IFTRUE 71401
71399: GO 71613
71401: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
71402: LD_ADDR_VAR 0 1
71406: PUSH
71407: LD_INT 1
71409: PUSH
71410: LD_INT 2
71412: PUSH
71413: LD_INT 3
71415: PUSH
71416: LD_INT 4
71418: PUSH
71419: LD_INT 5
71421: PUSH
71422: LD_INT 6
71424: PUSH
71425: LD_INT 7
71427: PUSH
71428: LD_INT 8
71430: PUSH
71431: LD_INT 9
71433: PUSH
71434: LD_INT 10
71436: PUSH
71437: LD_INT 11
71439: PUSH
71440: LD_INT 12
71442: PUSH
71443: LD_INT 13
71445: PUSH
71446: LD_INT 14
71448: PUSH
71449: LD_INT 15
71451: PUSH
71452: LD_INT 16
71454: PUSH
71455: LD_INT 17
71457: PUSH
71458: LD_INT 18
71460: PUSH
71461: LD_INT 19
71463: PUSH
71464: LD_INT 20
71466: PUSH
71467: LD_INT 21
71469: PUSH
71470: LD_INT 22
71472: PUSH
71473: LD_INT 23
71475: PUSH
71476: LD_INT 24
71478: PUSH
71479: LD_INT 25
71481: PUSH
71482: LD_INT 26
71484: PUSH
71485: LD_INT 27
71487: PUSH
71488: LD_INT 28
71490: PUSH
71491: LD_INT 29
71493: PUSH
71494: LD_INT 30
71496: PUSH
71497: LD_INT 31
71499: PUSH
71500: LD_INT 32
71502: PUSH
71503: LD_INT 33
71505: PUSH
71506: LD_INT 34
71508: PUSH
71509: LD_INT 36
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: LIST
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: LIST
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: LIST
71538: LIST
71539: LIST
71540: LIST
71541: LIST
71542: LIST
71543: LIST
71544: LIST
71545: LIST
71546: LIST
71547: LIST
71548: PUSH
71549: LD_INT 101
71551: PUSH
71552: LD_INT 102
71554: PUSH
71555: LD_INT 103
71557: PUSH
71558: LD_INT 104
71560: PUSH
71561: LD_INT 105
71563: PUSH
71564: LD_INT 106
71566: PUSH
71567: LD_INT 107
71569: PUSH
71570: LD_INT 108
71572: PUSH
71573: LD_INT 109
71575: PUSH
71576: LD_INT 110
71578: PUSH
71579: LD_INT 111
71581: PUSH
71582: LD_INT 112
71584: PUSH
71585: LD_INT 113
71587: PUSH
71588: LD_INT 114
71590: PUSH
71591: EMPTY
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: ST_TO_ADDR
71611: GO 72558
71613: LD_INT 15
71615: DOUBLE
71616: EQUAL
71617: IFTRUE 71621
71619: GO 71833
71621: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
71622: LD_ADDR_VAR 0 1
71626: PUSH
71627: LD_INT 1
71629: PUSH
71630: LD_INT 2
71632: PUSH
71633: LD_INT 3
71635: PUSH
71636: LD_INT 4
71638: PUSH
71639: LD_INT 5
71641: PUSH
71642: LD_INT 6
71644: PUSH
71645: LD_INT 7
71647: PUSH
71648: LD_INT 8
71650: PUSH
71651: LD_INT 9
71653: PUSH
71654: LD_INT 10
71656: PUSH
71657: LD_INT 11
71659: PUSH
71660: LD_INT 12
71662: PUSH
71663: LD_INT 13
71665: PUSH
71666: LD_INT 14
71668: PUSH
71669: LD_INT 15
71671: PUSH
71672: LD_INT 16
71674: PUSH
71675: LD_INT 17
71677: PUSH
71678: LD_INT 18
71680: PUSH
71681: LD_INT 19
71683: PUSH
71684: LD_INT 20
71686: PUSH
71687: LD_INT 21
71689: PUSH
71690: LD_INT 22
71692: PUSH
71693: LD_INT 23
71695: PUSH
71696: LD_INT 24
71698: PUSH
71699: LD_INT 25
71701: PUSH
71702: LD_INT 26
71704: PUSH
71705: LD_INT 27
71707: PUSH
71708: LD_INT 28
71710: PUSH
71711: LD_INT 29
71713: PUSH
71714: LD_INT 30
71716: PUSH
71717: LD_INT 31
71719: PUSH
71720: LD_INT 32
71722: PUSH
71723: LD_INT 33
71725: PUSH
71726: LD_INT 34
71728: PUSH
71729: LD_INT 36
71731: PUSH
71732: EMPTY
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: LIST
71740: LIST
71741: LIST
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: LIST
71747: LIST
71748: LIST
71749: LIST
71750: LIST
71751: LIST
71752: LIST
71753: LIST
71754: LIST
71755: LIST
71756: LIST
71757: LIST
71758: LIST
71759: LIST
71760: LIST
71761: LIST
71762: LIST
71763: LIST
71764: LIST
71765: LIST
71766: LIST
71767: LIST
71768: PUSH
71769: LD_INT 101
71771: PUSH
71772: LD_INT 102
71774: PUSH
71775: LD_INT 103
71777: PUSH
71778: LD_INT 104
71780: PUSH
71781: LD_INT 105
71783: PUSH
71784: LD_INT 106
71786: PUSH
71787: LD_INT 107
71789: PUSH
71790: LD_INT 108
71792: PUSH
71793: LD_INT 109
71795: PUSH
71796: LD_INT 110
71798: PUSH
71799: LD_INT 111
71801: PUSH
71802: LD_INT 112
71804: PUSH
71805: LD_INT 113
71807: PUSH
71808: LD_INT 114
71810: PUSH
71811: EMPTY
71812: LIST
71813: LIST
71814: LIST
71815: LIST
71816: LIST
71817: LIST
71818: LIST
71819: LIST
71820: LIST
71821: LIST
71822: LIST
71823: LIST
71824: LIST
71825: LIST
71826: PUSH
71827: EMPTY
71828: LIST
71829: LIST
71830: ST_TO_ADDR
71831: GO 72558
71833: LD_INT 16
71835: DOUBLE
71836: EQUAL
71837: IFTRUE 71841
71839: GO 71965
71841: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
71842: LD_ADDR_VAR 0 1
71846: PUSH
71847: LD_INT 2
71849: PUSH
71850: LD_INT 4
71852: PUSH
71853: LD_INT 5
71855: PUSH
71856: LD_INT 7
71858: PUSH
71859: LD_INT 11
71861: PUSH
71862: LD_INT 12
71864: PUSH
71865: LD_INT 15
71867: PUSH
71868: LD_INT 16
71870: PUSH
71871: LD_INT 20
71873: PUSH
71874: LD_INT 21
71876: PUSH
71877: LD_INT 22
71879: PUSH
71880: LD_INT 23
71882: PUSH
71883: LD_INT 25
71885: PUSH
71886: LD_INT 26
71888: PUSH
71889: LD_INT 30
71891: PUSH
71892: LD_INT 31
71894: PUSH
71895: LD_INT 32
71897: PUSH
71898: LD_INT 33
71900: PUSH
71901: LD_INT 34
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: LIST
71908: LIST
71909: LIST
71910: LIST
71911: LIST
71912: LIST
71913: LIST
71914: LIST
71915: LIST
71916: LIST
71917: LIST
71918: LIST
71919: LIST
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: PUSH
71925: LD_INT 101
71927: PUSH
71928: LD_INT 102
71930: PUSH
71931: LD_INT 103
71933: PUSH
71934: LD_INT 106
71936: PUSH
71937: LD_INT 108
71939: PUSH
71940: LD_INT 112
71942: PUSH
71943: LD_INT 113
71945: PUSH
71946: LD_INT 114
71948: PUSH
71949: EMPTY
71950: LIST
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: PUSH
71959: EMPTY
71960: LIST
71961: LIST
71962: ST_TO_ADDR
71963: GO 72558
71965: LD_INT 17
71967: DOUBLE
71968: EQUAL
71969: IFTRUE 71973
71971: GO 72185
71973: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
71974: LD_ADDR_VAR 0 1
71978: PUSH
71979: LD_INT 1
71981: PUSH
71982: LD_INT 2
71984: PUSH
71985: LD_INT 3
71987: PUSH
71988: LD_INT 4
71990: PUSH
71991: LD_INT 5
71993: PUSH
71994: LD_INT 6
71996: PUSH
71997: LD_INT 7
71999: PUSH
72000: LD_INT 8
72002: PUSH
72003: LD_INT 9
72005: PUSH
72006: LD_INT 10
72008: PUSH
72009: LD_INT 11
72011: PUSH
72012: LD_INT 12
72014: PUSH
72015: LD_INT 13
72017: PUSH
72018: LD_INT 14
72020: PUSH
72021: LD_INT 15
72023: PUSH
72024: LD_INT 16
72026: PUSH
72027: LD_INT 17
72029: PUSH
72030: LD_INT 18
72032: PUSH
72033: LD_INT 19
72035: PUSH
72036: LD_INT 20
72038: PUSH
72039: LD_INT 21
72041: PUSH
72042: LD_INT 22
72044: PUSH
72045: LD_INT 23
72047: PUSH
72048: LD_INT 24
72050: PUSH
72051: LD_INT 25
72053: PUSH
72054: LD_INT 26
72056: PUSH
72057: LD_INT 27
72059: PUSH
72060: LD_INT 28
72062: PUSH
72063: LD_INT 29
72065: PUSH
72066: LD_INT 30
72068: PUSH
72069: LD_INT 31
72071: PUSH
72072: LD_INT 32
72074: PUSH
72075: LD_INT 33
72077: PUSH
72078: LD_INT 34
72080: PUSH
72081: LD_INT 36
72083: PUSH
72084: EMPTY
72085: LIST
72086: LIST
72087: LIST
72088: LIST
72089: LIST
72090: LIST
72091: LIST
72092: LIST
72093: LIST
72094: LIST
72095: LIST
72096: LIST
72097: LIST
72098: LIST
72099: LIST
72100: LIST
72101: LIST
72102: LIST
72103: LIST
72104: LIST
72105: LIST
72106: LIST
72107: LIST
72108: LIST
72109: LIST
72110: LIST
72111: LIST
72112: LIST
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: PUSH
72121: LD_INT 101
72123: PUSH
72124: LD_INT 102
72126: PUSH
72127: LD_INT 103
72129: PUSH
72130: LD_INT 104
72132: PUSH
72133: LD_INT 105
72135: PUSH
72136: LD_INT 106
72138: PUSH
72139: LD_INT 107
72141: PUSH
72142: LD_INT 108
72144: PUSH
72145: LD_INT 109
72147: PUSH
72148: LD_INT 110
72150: PUSH
72151: LD_INT 111
72153: PUSH
72154: LD_INT 112
72156: PUSH
72157: LD_INT 113
72159: PUSH
72160: LD_INT 114
72162: PUSH
72163: EMPTY
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: LIST
72177: LIST
72178: PUSH
72179: EMPTY
72180: LIST
72181: LIST
72182: ST_TO_ADDR
72183: GO 72558
72185: LD_INT 18
72187: DOUBLE
72188: EQUAL
72189: IFTRUE 72193
72191: GO 72329
72193: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
72194: LD_ADDR_VAR 0 1
72198: PUSH
72199: LD_INT 2
72201: PUSH
72202: LD_INT 4
72204: PUSH
72205: LD_INT 5
72207: PUSH
72208: LD_INT 7
72210: PUSH
72211: LD_INT 11
72213: PUSH
72214: LD_INT 12
72216: PUSH
72217: LD_INT 15
72219: PUSH
72220: LD_INT 16
72222: PUSH
72223: LD_INT 20
72225: PUSH
72226: LD_INT 21
72228: PUSH
72229: LD_INT 22
72231: PUSH
72232: LD_INT 23
72234: PUSH
72235: LD_INT 25
72237: PUSH
72238: LD_INT 26
72240: PUSH
72241: LD_INT 30
72243: PUSH
72244: LD_INT 31
72246: PUSH
72247: LD_INT 32
72249: PUSH
72250: LD_INT 33
72252: PUSH
72253: LD_INT 34
72255: PUSH
72256: LD_INT 35
72258: PUSH
72259: LD_INT 36
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: LIST
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: LIST
72271: LIST
72272: LIST
72273: LIST
72274: LIST
72275: LIST
72276: LIST
72277: LIST
72278: LIST
72279: LIST
72280: LIST
72281: LIST
72282: LIST
72283: LIST
72284: PUSH
72285: LD_INT 101
72287: PUSH
72288: LD_INT 102
72290: PUSH
72291: LD_INT 103
72293: PUSH
72294: LD_INT 106
72296: PUSH
72297: LD_INT 108
72299: PUSH
72300: LD_INT 112
72302: PUSH
72303: LD_INT 113
72305: PUSH
72306: LD_INT 114
72308: PUSH
72309: LD_INT 115
72311: PUSH
72312: EMPTY
72313: LIST
72314: LIST
72315: LIST
72316: LIST
72317: LIST
72318: LIST
72319: LIST
72320: LIST
72321: LIST
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: ST_TO_ADDR
72327: GO 72558
72329: LD_INT 19
72331: DOUBLE
72332: EQUAL
72333: IFTRUE 72337
72335: GO 72557
72337: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
72338: LD_ADDR_VAR 0 1
72342: PUSH
72343: LD_INT 1
72345: PUSH
72346: LD_INT 2
72348: PUSH
72349: LD_INT 3
72351: PUSH
72352: LD_INT 4
72354: PUSH
72355: LD_INT 5
72357: PUSH
72358: LD_INT 6
72360: PUSH
72361: LD_INT 7
72363: PUSH
72364: LD_INT 8
72366: PUSH
72367: LD_INT 9
72369: PUSH
72370: LD_INT 10
72372: PUSH
72373: LD_INT 11
72375: PUSH
72376: LD_INT 12
72378: PUSH
72379: LD_INT 13
72381: PUSH
72382: LD_INT 14
72384: PUSH
72385: LD_INT 15
72387: PUSH
72388: LD_INT 16
72390: PUSH
72391: LD_INT 17
72393: PUSH
72394: LD_INT 18
72396: PUSH
72397: LD_INT 19
72399: PUSH
72400: LD_INT 20
72402: PUSH
72403: LD_INT 21
72405: PUSH
72406: LD_INT 22
72408: PUSH
72409: LD_INT 23
72411: PUSH
72412: LD_INT 24
72414: PUSH
72415: LD_INT 25
72417: PUSH
72418: LD_INT 26
72420: PUSH
72421: LD_INT 27
72423: PUSH
72424: LD_INT 28
72426: PUSH
72427: LD_INT 29
72429: PUSH
72430: LD_INT 30
72432: PUSH
72433: LD_INT 31
72435: PUSH
72436: LD_INT 32
72438: PUSH
72439: LD_INT 33
72441: PUSH
72442: LD_INT 34
72444: PUSH
72445: LD_INT 35
72447: PUSH
72448: LD_INT 36
72450: PUSH
72451: EMPTY
72452: LIST
72453: LIST
72454: LIST
72455: LIST
72456: LIST
72457: LIST
72458: LIST
72459: LIST
72460: LIST
72461: LIST
72462: LIST
72463: LIST
72464: LIST
72465: LIST
72466: LIST
72467: LIST
72468: LIST
72469: LIST
72470: LIST
72471: LIST
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: PUSH
72489: LD_INT 101
72491: PUSH
72492: LD_INT 102
72494: PUSH
72495: LD_INT 103
72497: PUSH
72498: LD_INT 104
72500: PUSH
72501: LD_INT 105
72503: PUSH
72504: LD_INT 106
72506: PUSH
72507: LD_INT 107
72509: PUSH
72510: LD_INT 108
72512: PUSH
72513: LD_INT 109
72515: PUSH
72516: LD_INT 110
72518: PUSH
72519: LD_INT 111
72521: PUSH
72522: LD_INT 112
72524: PUSH
72525: LD_INT 113
72527: PUSH
72528: LD_INT 114
72530: PUSH
72531: LD_INT 115
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: LIST
72538: LIST
72539: LIST
72540: LIST
72541: LIST
72542: LIST
72543: LIST
72544: LIST
72545: LIST
72546: LIST
72547: LIST
72548: LIST
72549: LIST
72550: PUSH
72551: EMPTY
72552: LIST
72553: LIST
72554: ST_TO_ADDR
72555: GO 72558
72557: POP
// end else
72558: GO 72777
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
72560: LD_ADDR_VAR 0 1
72564: PUSH
72565: LD_INT 1
72567: PUSH
72568: LD_INT 2
72570: PUSH
72571: LD_INT 3
72573: PUSH
72574: LD_INT 4
72576: PUSH
72577: LD_INT 5
72579: PUSH
72580: LD_INT 6
72582: PUSH
72583: LD_INT 7
72585: PUSH
72586: LD_INT 8
72588: PUSH
72589: LD_INT 9
72591: PUSH
72592: LD_INT 10
72594: PUSH
72595: LD_INT 11
72597: PUSH
72598: LD_INT 12
72600: PUSH
72601: LD_INT 13
72603: PUSH
72604: LD_INT 14
72606: PUSH
72607: LD_INT 15
72609: PUSH
72610: LD_INT 16
72612: PUSH
72613: LD_INT 17
72615: PUSH
72616: LD_INT 18
72618: PUSH
72619: LD_INT 19
72621: PUSH
72622: LD_INT 20
72624: PUSH
72625: LD_INT 21
72627: PUSH
72628: LD_INT 22
72630: PUSH
72631: LD_INT 23
72633: PUSH
72634: LD_INT 24
72636: PUSH
72637: LD_INT 25
72639: PUSH
72640: LD_INT 26
72642: PUSH
72643: LD_INT 27
72645: PUSH
72646: LD_INT 28
72648: PUSH
72649: LD_INT 29
72651: PUSH
72652: LD_INT 30
72654: PUSH
72655: LD_INT 31
72657: PUSH
72658: LD_INT 32
72660: PUSH
72661: LD_INT 33
72663: PUSH
72664: LD_INT 34
72666: PUSH
72667: LD_INT 35
72669: PUSH
72670: LD_INT 36
72672: PUSH
72673: EMPTY
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: LIST
72690: LIST
72691: LIST
72692: LIST
72693: LIST
72694: LIST
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: LIST
72701: LIST
72702: LIST
72703: LIST
72704: LIST
72705: LIST
72706: LIST
72707: LIST
72708: LIST
72709: LIST
72710: PUSH
72711: LD_INT 101
72713: PUSH
72714: LD_INT 102
72716: PUSH
72717: LD_INT 103
72719: PUSH
72720: LD_INT 104
72722: PUSH
72723: LD_INT 105
72725: PUSH
72726: LD_INT 106
72728: PUSH
72729: LD_INT 107
72731: PUSH
72732: LD_INT 108
72734: PUSH
72735: LD_INT 109
72737: PUSH
72738: LD_INT 110
72740: PUSH
72741: LD_INT 111
72743: PUSH
72744: LD_INT 112
72746: PUSH
72747: LD_INT 113
72749: PUSH
72750: LD_INT 114
72752: PUSH
72753: LD_INT 115
72755: PUSH
72756: EMPTY
72757: LIST
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: LIST
72764: LIST
72765: LIST
72766: LIST
72767: LIST
72768: LIST
72769: LIST
72770: LIST
72771: LIST
72772: PUSH
72773: EMPTY
72774: LIST
72775: LIST
72776: ST_TO_ADDR
// if result then
72777: LD_VAR 0 1
72781: IFFALSE 73070
// begin normal :=  ;
72783: LD_ADDR_VAR 0 3
72787: PUSH
72788: LD_STRING 
72790: ST_TO_ADDR
// hardcore :=  ;
72791: LD_ADDR_VAR 0 4
72795: PUSH
72796: LD_STRING 
72798: ST_TO_ADDR
// for i = 1 to normalCounter do
72799: LD_ADDR_VAR 0 5
72803: PUSH
72804: DOUBLE
72805: LD_INT 1
72807: DEC
72808: ST_TO_ADDR
72809: LD_EXP 107
72813: PUSH
72814: FOR_TO
72815: IFFALSE 72916
// begin tmp := 0 ;
72817: LD_ADDR_VAR 0 2
72821: PUSH
72822: LD_STRING 0
72824: ST_TO_ADDR
// if result [ 1 ] then
72825: LD_VAR 0 1
72829: PUSH
72830: LD_INT 1
72832: ARRAY
72833: IFFALSE 72898
// if result [ 1 ] [ 1 ] = i then
72835: LD_VAR 0 1
72839: PUSH
72840: LD_INT 1
72842: ARRAY
72843: PUSH
72844: LD_INT 1
72846: ARRAY
72847: PUSH
72848: LD_VAR 0 5
72852: EQUAL
72853: IFFALSE 72898
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
72855: LD_ADDR_VAR 0 1
72859: PUSH
72860: LD_VAR 0 1
72864: PPUSH
72865: LD_INT 1
72867: PPUSH
72868: LD_VAR 0 1
72872: PUSH
72873: LD_INT 1
72875: ARRAY
72876: PPUSH
72877: LD_INT 1
72879: PPUSH
72880: CALL_OW 3
72884: PPUSH
72885: CALL_OW 1
72889: ST_TO_ADDR
// tmp := 1 ;
72890: LD_ADDR_VAR 0 2
72894: PUSH
72895: LD_STRING 1
72897: ST_TO_ADDR
// end ; normal := normal & tmp ;
72898: LD_ADDR_VAR 0 3
72902: PUSH
72903: LD_VAR 0 3
72907: PUSH
72908: LD_VAR 0 2
72912: STR
72913: ST_TO_ADDR
// end ;
72914: GO 72814
72916: POP
72917: POP
// for i = 1 to hardcoreCounter do
72918: LD_ADDR_VAR 0 5
72922: PUSH
72923: DOUBLE
72924: LD_INT 1
72926: DEC
72927: ST_TO_ADDR
72928: LD_EXP 108
72932: PUSH
72933: FOR_TO
72934: IFFALSE 73039
// begin tmp := 0 ;
72936: LD_ADDR_VAR 0 2
72940: PUSH
72941: LD_STRING 0
72943: ST_TO_ADDR
// if result [ 2 ] then
72944: LD_VAR 0 1
72948: PUSH
72949: LD_INT 2
72951: ARRAY
72952: IFFALSE 73021
// if result [ 2 ] [ 1 ] = 100 + i then
72954: LD_VAR 0 1
72958: PUSH
72959: LD_INT 2
72961: ARRAY
72962: PUSH
72963: LD_INT 1
72965: ARRAY
72966: PUSH
72967: LD_INT 100
72969: PUSH
72970: LD_VAR 0 5
72974: PLUS
72975: EQUAL
72976: IFFALSE 73021
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
72978: LD_ADDR_VAR 0 1
72982: PUSH
72983: LD_VAR 0 1
72987: PPUSH
72988: LD_INT 2
72990: PPUSH
72991: LD_VAR 0 1
72995: PUSH
72996: LD_INT 2
72998: ARRAY
72999: PPUSH
73000: LD_INT 1
73002: PPUSH
73003: CALL_OW 3
73007: PPUSH
73008: CALL_OW 1
73012: ST_TO_ADDR
// tmp := 1 ;
73013: LD_ADDR_VAR 0 2
73017: PUSH
73018: LD_STRING 1
73020: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
73021: LD_ADDR_VAR 0 4
73025: PUSH
73026: LD_VAR 0 4
73030: PUSH
73031: LD_VAR 0 2
73035: STR
73036: ST_TO_ADDR
// end ;
73037: GO 72933
73039: POP
73040: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
73041: LD_STRING getStreamItemsFromMission("
73043: PUSH
73044: LD_VAR 0 3
73048: STR
73049: PUSH
73050: LD_STRING ","
73052: STR
73053: PUSH
73054: LD_VAR 0 4
73058: STR
73059: PUSH
73060: LD_STRING ")
73062: STR
73063: PPUSH
73064: CALL_OW 559
// end else
73068: GO 73077
// ToLua ( getStreamItemsFromMission("","") ) ;
73070: LD_STRING getStreamItemsFromMission("","")
73072: PPUSH
73073: CALL_OW 559
// end ;
73077: LD_VAR 0 1
73081: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
73082: LD_EXP 106
73086: PUSH
73087: LD_EXP 111
73091: AND
73092: IFFALSE 73216
73094: GO 73096
73096: DISABLE
73097: LD_INT 0
73099: PPUSH
73100: PPUSH
// begin enable ;
73101: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
73102: LD_ADDR_VAR 0 2
73106: PUSH
73107: LD_INT 22
73109: PUSH
73110: LD_OWVAR 2
73114: PUSH
73115: EMPTY
73116: LIST
73117: LIST
73118: PUSH
73119: LD_INT 2
73121: PUSH
73122: LD_INT 34
73124: PUSH
73125: LD_INT 7
73127: PUSH
73128: EMPTY
73129: LIST
73130: LIST
73131: PUSH
73132: LD_INT 34
73134: PUSH
73135: LD_INT 45
73137: PUSH
73138: EMPTY
73139: LIST
73140: LIST
73141: PUSH
73142: LD_INT 34
73144: PUSH
73145: LD_INT 28
73147: PUSH
73148: EMPTY
73149: LIST
73150: LIST
73151: PUSH
73152: LD_INT 34
73154: PUSH
73155: LD_INT 47
73157: PUSH
73158: EMPTY
73159: LIST
73160: LIST
73161: PUSH
73162: EMPTY
73163: LIST
73164: LIST
73165: LIST
73166: LIST
73167: LIST
73168: PUSH
73169: EMPTY
73170: LIST
73171: LIST
73172: PPUSH
73173: CALL_OW 69
73177: ST_TO_ADDR
// if not tmp then
73178: LD_VAR 0 2
73182: NOT
73183: IFFALSE 73187
// exit ;
73185: GO 73216
// for i in tmp do
73187: LD_ADDR_VAR 0 1
73191: PUSH
73192: LD_VAR 0 2
73196: PUSH
73197: FOR_IN
73198: IFFALSE 73214
// begin SetLives ( i , 0 ) ;
73200: LD_VAR 0 1
73204: PPUSH
73205: LD_INT 0
73207: PPUSH
73208: CALL_OW 234
// end ;
73212: GO 73197
73214: POP
73215: POP
// end ;
73216: PPOPN 2
73218: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
73219: LD_EXP 106
73223: PUSH
73224: LD_EXP 112
73228: AND
73229: IFFALSE 73313
73231: GO 73233
73233: DISABLE
73234: LD_INT 0
73236: PPUSH
73237: PPUSH
// begin enable ;
73238: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
73239: LD_ADDR_VAR 0 2
73243: PUSH
73244: LD_INT 22
73246: PUSH
73247: LD_OWVAR 2
73251: PUSH
73252: EMPTY
73253: LIST
73254: LIST
73255: PUSH
73256: LD_INT 32
73258: PUSH
73259: LD_INT 3
73261: PUSH
73262: EMPTY
73263: LIST
73264: LIST
73265: PUSH
73266: EMPTY
73267: LIST
73268: LIST
73269: PPUSH
73270: CALL_OW 69
73274: ST_TO_ADDR
// if not tmp then
73275: LD_VAR 0 2
73279: NOT
73280: IFFALSE 73284
// exit ;
73282: GO 73313
// for i in tmp do
73284: LD_ADDR_VAR 0 1
73288: PUSH
73289: LD_VAR 0 2
73293: PUSH
73294: FOR_IN
73295: IFFALSE 73311
// begin SetLives ( i , 0 ) ;
73297: LD_VAR 0 1
73301: PPUSH
73302: LD_INT 0
73304: PPUSH
73305: CALL_OW 234
// end ;
73309: GO 73294
73311: POP
73312: POP
// end ;
73313: PPOPN 2
73315: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
73316: LD_EXP 106
73320: PUSH
73321: LD_EXP 109
73325: AND
73326: IFFALSE 73419
73328: GO 73330
73330: DISABLE
73331: LD_INT 0
73333: PPUSH
// begin enable ;
73334: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
73335: LD_ADDR_VAR 0 1
73339: PUSH
73340: LD_INT 22
73342: PUSH
73343: LD_OWVAR 2
73347: PUSH
73348: EMPTY
73349: LIST
73350: LIST
73351: PUSH
73352: LD_INT 2
73354: PUSH
73355: LD_INT 25
73357: PUSH
73358: LD_INT 5
73360: PUSH
73361: EMPTY
73362: LIST
73363: LIST
73364: PUSH
73365: LD_INT 25
73367: PUSH
73368: LD_INT 9
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: PUSH
73375: LD_INT 25
73377: PUSH
73378: LD_INT 8
73380: PUSH
73381: EMPTY
73382: LIST
73383: LIST
73384: PUSH
73385: EMPTY
73386: LIST
73387: LIST
73388: LIST
73389: LIST
73390: PUSH
73391: EMPTY
73392: LIST
73393: LIST
73394: PPUSH
73395: CALL_OW 69
73399: PUSH
73400: FOR_IN
73401: IFFALSE 73417
// begin SetClass ( i , 1 ) ;
73403: LD_VAR 0 1
73407: PPUSH
73408: LD_INT 1
73410: PPUSH
73411: CALL_OW 336
// end ;
73415: GO 73400
73417: POP
73418: POP
// end ;
73419: PPOPN 1
73421: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
73422: LD_EXP 106
73426: PUSH
73427: LD_EXP 110
73431: AND
73432: PUSH
73433: LD_OWVAR 65
73437: PUSH
73438: LD_INT 7
73440: LESS
73441: AND
73442: IFFALSE 73456
73444: GO 73446
73446: DISABLE
// begin enable ;
73447: ENABLE
// game_speed := 7 ;
73448: LD_ADDR_OWVAR 65
73452: PUSH
73453: LD_INT 7
73455: ST_TO_ADDR
// end ;
73456: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
73457: LD_EXP 106
73461: PUSH
73462: LD_EXP 113
73466: AND
73467: IFFALSE 73669
73469: GO 73471
73471: DISABLE
73472: LD_INT 0
73474: PPUSH
73475: PPUSH
73476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
73477: LD_ADDR_VAR 0 3
73481: PUSH
73482: LD_INT 81
73484: PUSH
73485: LD_OWVAR 2
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: PUSH
73494: LD_INT 21
73496: PUSH
73497: LD_INT 1
73499: PUSH
73500: EMPTY
73501: LIST
73502: LIST
73503: PUSH
73504: EMPTY
73505: LIST
73506: LIST
73507: PPUSH
73508: CALL_OW 69
73512: ST_TO_ADDR
// if not tmp then
73513: LD_VAR 0 3
73517: NOT
73518: IFFALSE 73522
// exit ;
73520: GO 73669
// if tmp > 5 then
73522: LD_VAR 0 3
73526: PUSH
73527: LD_INT 5
73529: GREATER
73530: IFFALSE 73542
// k := 5 else
73532: LD_ADDR_VAR 0 2
73536: PUSH
73537: LD_INT 5
73539: ST_TO_ADDR
73540: GO 73552
// k := tmp ;
73542: LD_ADDR_VAR 0 2
73546: PUSH
73547: LD_VAR 0 3
73551: ST_TO_ADDR
// for i := 1 to k do
73552: LD_ADDR_VAR 0 1
73556: PUSH
73557: DOUBLE
73558: LD_INT 1
73560: DEC
73561: ST_TO_ADDR
73562: LD_VAR 0 2
73566: PUSH
73567: FOR_TO
73568: IFFALSE 73667
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
73570: LD_VAR 0 3
73574: PUSH
73575: LD_VAR 0 1
73579: ARRAY
73580: PPUSH
73581: LD_VAR 0 1
73585: PUSH
73586: LD_INT 4
73588: MOD
73589: PUSH
73590: LD_INT 1
73592: PLUS
73593: PPUSH
73594: CALL_OW 259
73598: PUSH
73599: LD_INT 10
73601: LESS
73602: IFFALSE 73665
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
73604: LD_VAR 0 3
73608: PUSH
73609: LD_VAR 0 1
73613: ARRAY
73614: PPUSH
73615: LD_VAR 0 1
73619: PUSH
73620: LD_INT 4
73622: MOD
73623: PUSH
73624: LD_INT 1
73626: PLUS
73627: PPUSH
73628: LD_VAR 0 3
73632: PUSH
73633: LD_VAR 0 1
73637: ARRAY
73638: PPUSH
73639: LD_VAR 0 1
73643: PUSH
73644: LD_INT 4
73646: MOD
73647: PUSH
73648: LD_INT 1
73650: PLUS
73651: PPUSH
73652: CALL_OW 259
73656: PUSH
73657: LD_INT 1
73659: PLUS
73660: PPUSH
73661: CALL_OW 237
73665: GO 73567
73667: POP
73668: POP
// end ;
73669: PPOPN 3
73671: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
73672: LD_EXP 106
73676: PUSH
73677: LD_EXP 114
73681: AND
73682: IFFALSE 73702
73684: GO 73686
73686: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
73687: LD_INT 4
73689: PPUSH
73690: LD_OWVAR 2
73694: PPUSH
73695: LD_INT 0
73697: PPUSH
73698: CALL_OW 324
73702: END
// every 0 0$1 trigger StreamModeActive and sShovel do
73703: LD_EXP 106
73707: PUSH
73708: LD_EXP 143
73712: AND
73713: IFFALSE 73733
73715: GO 73717
73717: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
73718: LD_INT 19
73720: PPUSH
73721: LD_OWVAR 2
73725: PPUSH
73726: LD_INT 0
73728: PPUSH
73729: CALL_OW 324
73733: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
73734: LD_EXP 106
73738: PUSH
73739: LD_EXP 115
73743: AND
73744: IFFALSE 73846
73746: GO 73748
73748: DISABLE
73749: LD_INT 0
73751: PPUSH
73752: PPUSH
// begin enable ;
73753: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
73754: LD_ADDR_VAR 0 2
73758: PUSH
73759: LD_INT 22
73761: PUSH
73762: LD_OWVAR 2
73766: PUSH
73767: EMPTY
73768: LIST
73769: LIST
73770: PUSH
73771: LD_INT 2
73773: PUSH
73774: LD_INT 34
73776: PUSH
73777: LD_INT 11
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: PUSH
73784: LD_INT 34
73786: PUSH
73787: LD_INT 30
73789: PUSH
73790: EMPTY
73791: LIST
73792: LIST
73793: PUSH
73794: EMPTY
73795: LIST
73796: LIST
73797: LIST
73798: PUSH
73799: EMPTY
73800: LIST
73801: LIST
73802: PPUSH
73803: CALL_OW 69
73807: ST_TO_ADDR
// if not tmp then
73808: LD_VAR 0 2
73812: NOT
73813: IFFALSE 73817
// exit ;
73815: GO 73846
// for i in tmp do
73817: LD_ADDR_VAR 0 1
73821: PUSH
73822: LD_VAR 0 2
73826: PUSH
73827: FOR_IN
73828: IFFALSE 73844
// begin SetLives ( i , 0 ) ;
73830: LD_VAR 0 1
73834: PPUSH
73835: LD_INT 0
73837: PPUSH
73838: CALL_OW 234
// end ;
73842: GO 73827
73844: POP
73845: POP
// end ;
73846: PPOPN 2
73848: END
// every 0 0$1 trigger StreamModeActive and sBunker do
73849: LD_EXP 106
73853: PUSH
73854: LD_EXP 116
73858: AND
73859: IFFALSE 73879
73861: GO 73863
73863: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
73864: LD_INT 32
73866: PPUSH
73867: LD_OWVAR 2
73871: PPUSH
73872: LD_INT 0
73874: PPUSH
73875: CALL_OW 324
73879: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
73880: LD_EXP 106
73884: PUSH
73885: LD_EXP 117
73889: AND
73890: IFFALSE 74071
73892: GO 73894
73894: DISABLE
73895: LD_INT 0
73897: PPUSH
73898: PPUSH
73899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
73900: LD_ADDR_VAR 0 2
73904: PUSH
73905: LD_INT 22
73907: PUSH
73908: LD_OWVAR 2
73912: PUSH
73913: EMPTY
73914: LIST
73915: LIST
73916: PUSH
73917: LD_INT 33
73919: PUSH
73920: LD_INT 3
73922: PUSH
73923: EMPTY
73924: LIST
73925: LIST
73926: PUSH
73927: EMPTY
73928: LIST
73929: LIST
73930: PPUSH
73931: CALL_OW 69
73935: ST_TO_ADDR
// if not tmp then
73936: LD_VAR 0 2
73940: NOT
73941: IFFALSE 73945
// exit ;
73943: GO 74071
// side := 0 ;
73945: LD_ADDR_VAR 0 3
73949: PUSH
73950: LD_INT 0
73952: ST_TO_ADDR
// for i := 1 to 8 do
73953: LD_ADDR_VAR 0 1
73957: PUSH
73958: DOUBLE
73959: LD_INT 1
73961: DEC
73962: ST_TO_ADDR
73963: LD_INT 8
73965: PUSH
73966: FOR_TO
73967: IFFALSE 74015
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
73969: LD_OWVAR 2
73973: PUSH
73974: LD_VAR 0 1
73978: NONEQUAL
73979: PUSH
73980: LD_OWVAR 2
73984: PPUSH
73985: LD_VAR 0 1
73989: PPUSH
73990: CALL_OW 81
73994: PUSH
73995: LD_INT 2
73997: EQUAL
73998: AND
73999: IFFALSE 74013
// begin side := i ;
74001: LD_ADDR_VAR 0 3
74005: PUSH
74006: LD_VAR 0 1
74010: ST_TO_ADDR
// break ;
74011: GO 74015
// end ;
74013: GO 73966
74015: POP
74016: POP
// if not side then
74017: LD_VAR 0 3
74021: NOT
74022: IFFALSE 74026
// exit ;
74024: GO 74071
// for i := 1 to tmp do
74026: LD_ADDR_VAR 0 1
74030: PUSH
74031: DOUBLE
74032: LD_INT 1
74034: DEC
74035: ST_TO_ADDR
74036: LD_VAR 0 2
74040: PUSH
74041: FOR_TO
74042: IFFALSE 74069
// if Prob ( 60 ) then
74044: LD_INT 60
74046: PPUSH
74047: CALL_OW 13
74051: IFFALSE 74067
// SetSide ( i , side ) ;
74053: LD_VAR 0 1
74057: PPUSH
74058: LD_VAR 0 3
74062: PPUSH
74063: CALL_OW 235
74067: GO 74041
74069: POP
74070: POP
// end ;
74071: PPOPN 3
74073: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
74074: LD_EXP 106
74078: PUSH
74079: LD_EXP 119
74083: AND
74084: IFFALSE 74203
74086: GO 74088
74088: DISABLE
74089: LD_INT 0
74091: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
74092: LD_ADDR_VAR 0 1
74096: PUSH
74097: LD_INT 22
74099: PUSH
74100: LD_OWVAR 2
74104: PUSH
74105: EMPTY
74106: LIST
74107: LIST
74108: PUSH
74109: LD_INT 21
74111: PUSH
74112: LD_INT 1
74114: PUSH
74115: EMPTY
74116: LIST
74117: LIST
74118: PUSH
74119: LD_INT 3
74121: PUSH
74122: LD_INT 23
74124: PUSH
74125: LD_INT 0
74127: PUSH
74128: EMPTY
74129: LIST
74130: LIST
74131: PUSH
74132: EMPTY
74133: LIST
74134: LIST
74135: PUSH
74136: EMPTY
74137: LIST
74138: LIST
74139: LIST
74140: PPUSH
74141: CALL_OW 69
74145: PUSH
74146: FOR_IN
74147: IFFALSE 74201
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
74149: LD_VAR 0 1
74153: PPUSH
74154: CALL_OW 257
74158: PUSH
74159: LD_INT 1
74161: PUSH
74162: LD_INT 2
74164: PUSH
74165: LD_INT 3
74167: PUSH
74168: LD_INT 4
74170: PUSH
74171: EMPTY
74172: LIST
74173: LIST
74174: LIST
74175: LIST
74176: IN
74177: IFFALSE 74199
// SetClass ( un , rand ( 1 , 4 ) ) ;
74179: LD_VAR 0 1
74183: PPUSH
74184: LD_INT 1
74186: PPUSH
74187: LD_INT 4
74189: PPUSH
74190: CALL_OW 12
74194: PPUSH
74195: CALL_OW 336
74199: GO 74146
74201: POP
74202: POP
// end ;
74203: PPOPN 1
74205: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
74206: LD_EXP 106
74210: PUSH
74211: LD_EXP 118
74215: AND
74216: IFFALSE 74295
74218: GO 74220
74220: DISABLE
74221: LD_INT 0
74223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
74224: LD_ADDR_VAR 0 1
74228: PUSH
74229: LD_INT 22
74231: PUSH
74232: LD_OWVAR 2
74236: PUSH
74237: EMPTY
74238: LIST
74239: LIST
74240: PUSH
74241: LD_INT 21
74243: PUSH
74244: LD_INT 3
74246: PUSH
74247: EMPTY
74248: LIST
74249: LIST
74250: PUSH
74251: EMPTY
74252: LIST
74253: LIST
74254: PPUSH
74255: CALL_OW 69
74259: ST_TO_ADDR
// if not tmp then
74260: LD_VAR 0 1
74264: NOT
74265: IFFALSE 74269
// exit ;
74267: GO 74295
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
74269: LD_VAR 0 1
74273: PUSH
74274: LD_INT 1
74276: PPUSH
74277: LD_VAR 0 1
74281: PPUSH
74282: CALL_OW 12
74286: ARRAY
74287: PPUSH
74288: LD_INT 100
74290: PPUSH
74291: CALL_OW 234
// end ;
74295: PPOPN 1
74297: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
74298: LD_EXP 106
74302: PUSH
74303: LD_EXP 120
74307: AND
74308: IFFALSE 74406
74310: GO 74312
74312: DISABLE
74313: LD_INT 0
74315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
74316: LD_ADDR_VAR 0 1
74320: PUSH
74321: LD_INT 22
74323: PUSH
74324: LD_OWVAR 2
74328: PUSH
74329: EMPTY
74330: LIST
74331: LIST
74332: PUSH
74333: LD_INT 21
74335: PUSH
74336: LD_INT 1
74338: PUSH
74339: EMPTY
74340: LIST
74341: LIST
74342: PUSH
74343: EMPTY
74344: LIST
74345: LIST
74346: PPUSH
74347: CALL_OW 69
74351: ST_TO_ADDR
// if not tmp then
74352: LD_VAR 0 1
74356: NOT
74357: IFFALSE 74361
// exit ;
74359: GO 74406
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
74361: LD_VAR 0 1
74365: PUSH
74366: LD_INT 1
74368: PPUSH
74369: LD_VAR 0 1
74373: PPUSH
74374: CALL_OW 12
74378: ARRAY
74379: PPUSH
74380: LD_INT 1
74382: PPUSH
74383: LD_INT 4
74385: PPUSH
74386: CALL_OW 12
74390: PPUSH
74391: LD_INT 3000
74393: PPUSH
74394: LD_INT 9000
74396: PPUSH
74397: CALL_OW 12
74401: PPUSH
74402: CALL_OW 492
// end ;
74406: PPOPN 1
74408: END
// every 0 0$1 trigger StreamModeActive and sDepot do
74409: LD_EXP 106
74413: PUSH
74414: LD_EXP 121
74418: AND
74419: IFFALSE 74439
74421: GO 74423
74423: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
74424: LD_INT 1
74426: PPUSH
74427: LD_OWVAR 2
74431: PPUSH
74432: LD_INT 0
74434: PPUSH
74435: CALL_OW 324
74439: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
74440: LD_EXP 106
74444: PUSH
74445: LD_EXP 122
74449: AND
74450: IFFALSE 74533
74452: GO 74454
74454: DISABLE
74455: LD_INT 0
74457: PPUSH
74458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
74459: LD_ADDR_VAR 0 2
74463: PUSH
74464: LD_INT 22
74466: PUSH
74467: LD_OWVAR 2
74471: PUSH
74472: EMPTY
74473: LIST
74474: LIST
74475: PUSH
74476: LD_INT 21
74478: PUSH
74479: LD_INT 3
74481: PUSH
74482: EMPTY
74483: LIST
74484: LIST
74485: PUSH
74486: EMPTY
74487: LIST
74488: LIST
74489: PPUSH
74490: CALL_OW 69
74494: ST_TO_ADDR
// if not tmp then
74495: LD_VAR 0 2
74499: NOT
74500: IFFALSE 74504
// exit ;
74502: GO 74533
// for i in tmp do
74504: LD_ADDR_VAR 0 1
74508: PUSH
74509: LD_VAR 0 2
74513: PUSH
74514: FOR_IN
74515: IFFALSE 74531
// SetBLevel ( i , 10 ) ;
74517: LD_VAR 0 1
74521: PPUSH
74522: LD_INT 10
74524: PPUSH
74525: CALL_OW 241
74529: GO 74514
74531: POP
74532: POP
// end ;
74533: PPOPN 2
74535: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
74536: LD_EXP 106
74540: PUSH
74541: LD_EXP 123
74545: AND
74546: IFFALSE 74657
74548: GO 74550
74550: DISABLE
74551: LD_INT 0
74553: PPUSH
74554: PPUSH
74555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74556: LD_ADDR_VAR 0 3
74560: PUSH
74561: LD_INT 22
74563: PUSH
74564: LD_OWVAR 2
74568: PUSH
74569: EMPTY
74570: LIST
74571: LIST
74572: PUSH
74573: LD_INT 25
74575: PUSH
74576: LD_INT 1
74578: PUSH
74579: EMPTY
74580: LIST
74581: LIST
74582: PUSH
74583: EMPTY
74584: LIST
74585: LIST
74586: PPUSH
74587: CALL_OW 69
74591: ST_TO_ADDR
// if not tmp then
74592: LD_VAR 0 3
74596: NOT
74597: IFFALSE 74601
// exit ;
74599: GO 74657
// un := tmp [ rand ( 1 , tmp ) ] ;
74601: LD_ADDR_VAR 0 2
74605: PUSH
74606: LD_VAR 0 3
74610: PUSH
74611: LD_INT 1
74613: PPUSH
74614: LD_VAR 0 3
74618: PPUSH
74619: CALL_OW 12
74623: ARRAY
74624: ST_TO_ADDR
// if Crawls ( un ) then
74625: LD_VAR 0 2
74629: PPUSH
74630: CALL_OW 318
74634: IFFALSE 74645
// ComWalk ( un ) ;
74636: LD_VAR 0 2
74640: PPUSH
74641: CALL_OW 138
// SetClass ( un , class_sniper ) ;
74645: LD_VAR 0 2
74649: PPUSH
74650: LD_INT 5
74652: PPUSH
74653: CALL_OW 336
// end ;
74657: PPOPN 3
74659: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
74660: LD_EXP 106
74664: PUSH
74665: LD_EXP 124
74669: AND
74670: PUSH
74671: LD_OWVAR 67
74675: PUSH
74676: LD_INT 3
74678: LESS
74679: AND
74680: IFFALSE 74699
74682: GO 74684
74684: DISABLE
// Difficulty := Difficulty + 1 ;
74685: LD_ADDR_OWVAR 67
74689: PUSH
74690: LD_OWVAR 67
74694: PUSH
74695: LD_INT 1
74697: PLUS
74698: ST_TO_ADDR
74699: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
74700: LD_EXP 106
74704: PUSH
74705: LD_EXP 125
74709: AND
74710: IFFALSE 74813
74712: GO 74714
74714: DISABLE
74715: LD_INT 0
74717: PPUSH
// begin for i := 1 to 5 do
74718: LD_ADDR_VAR 0 1
74722: PUSH
74723: DOUBLE
74724: LD_INT 1
74726: DEC
74727: ST_TO_ADDR
74728: LD_INT 5
74730: PUSH
74731: FOR_TO
74732: IFFALSE 74811
// begin uc_nation := nation_nature ;
74734: LD_ADDR_OWVAR 21
74738: PUSH
74739: LD_INT 0
74741: ST_TO_ADDR
// uc_side := 0 ;
74742: LD_ADDR_OWVAR 20
74746: PUSH
74747: LD_INT 0
74749: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74750: LD_ADDR_OWVAR 29
74754: PUSH
74755: LD_INT 12
74757: PUSH
74758: LD_INT 12
74760: PUSH
74761: EMPTY
74762: LIST
74763: LIST
74764: ST_TO_ADDR
// hc_agressivity := 20 ;
74765: LD_ADDR_OWVAR 35
74769: PUSH
74770: LD_INT 20
74772: ST_TO_ADDR
// hc_class := class_tiger ;
74773: LD_ADDR_OWVAR 28
74777: PUSH
74778: LD_INT 14
74780: ST_TO_ADDR
// hc_gallery :=  ;
74781: LD_ADDR_OWVAR 33
74785: PUSH
74786: LD_STRING 
74788: ST_TO_ADDR
// hc_name :=  ;
74789: LD_ADDR_OWVAR 26
74793: PUSH
74794: LD_STRING 
74796: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
74797: CALL_OW 44
74801: PPUSH
74802: LD_INT 0
74804: PPUSH
74805: CALL_OW 51
// end ;
74809: GO 74731
74811: POP
74812: POP
// end ;
74813: PPOPN 1
74815: END
// every 0 0$1 trigger StreamModeActive and sBomb do
74816: LD_EXP 106
74820: PUSH
74821: LD_EXP 126
74825: AND
74826: IFFALSE 74835
74828: GO 74830
74830: DISABLE
// StreamSibBomb ;
74831: CALL 74836 0 0
74835: END
// export function StreamSibBomb ; var i , x , y ; begin
74836: LD_INT 0
74838: PPUSH
74839: PPUSH
74840: PPUSH
74841: PPUSH
// result := false ;
74842: LD_ADDR_VAR 0 1
74846: PUSH
74847: LD_INT 0
74849: ST_TO_ADDR
// for i := 1 to 16 do
74850: LD_ADDR_VAR 0 2
74854: PUSH
74855: DOUBLE
74856: LD_INT 1
74858: DEC
74859: ST_TO_ADDR
74860: LD_INT 16
74862: PUSH
74863: FOR_TO
74864: IFFALSE 75063
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74866: LD_ADDR_VAR 0 3
74870: PUSH
74871: LD_INT 10
74873: PUSH
74874: LD_INT 20
74876: PUSH
74877: LD_INT 30
74879: PUSH
74880: LD_INT 40
74882: PUSH
74883: LD_INT 50
74885: PUSH
74886: LD_INT 60
74888: PUSH
74889: LD_INT 70
74891: PUSH
74892: LD_INT 80
74894: PUSH
74895: LD_INT 90
74897: PUSH
74898: LD_INT 100
74900: PUSH
74901: LD_INT 110
74903: PUSH
74904: LD_INT 120
74906: PUSH
74907: LD_INT 130
74909: PUSH
74910: LD_INT 140
74912: PUSH
74913: LD_INT 150
74915: PUSH
74916: EMPTY
74917: LIST
74918: LIST
74919: LIST
74920: LIST
74921: LIST
74922: LIST
74923: LIST
74924: LIST
74925: LIST
74926: LIST
74927: LIST
74928: LIST
74929: LIST
74930: LIST
74931: LIST
74932: PUSH
74933: LD_INT 1
74935: PPUSH
74936: LD_INT 15
74938: PPUSH
74939: CALL_OW 12
74943: ARRAY
74944: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74945: LD_ADDR_VAR 0 4
74949: PUSH
74950: LD_INT 10
74952: PUSH
74953: LD_INT 20
74955: PUSH
74956: LD_INT 30
74958: PUSH
74959: LD_INT 40
74961: PUSH
74962: LD_INT 50
74964: PUSH
74965: LD_INT 60
74967: PUSH
74968: LD_INT 70
74970: PUSH
74971: LD_INT 80
74973: PUSH
74974: LD_INT 90
74976: PUSH
74977: LD_INT 100
74979: PUSH
74980: LD_INT 110
74982: PUSH
74983: LD_INT 120
74985: PUSH
74986: LD_INT 130
74988: PUSH
74989: LD_INT 140
74991: PUSH
74992: LD_INT 150
74994: PUSH
74995: EMPTY
74996: LIST
74997: LIST
74998: LIST
74999: LIST
75000: LIST
75001: LIST
75002: LIST
75003: LIST
75004: LIST
75005: LIST
75006: LIST
75007: LIST
75008: LIST
75009: LIST
75010: LIST
75011: PUSH
75012: LD_INT 1
75014: PPUSH
75015: LD_INT 15
75017: PPUSH
75018: CALL_OW 12
75022: ARRAY
75023: ST_TO_ADDR
// if ValidHex ( x , y ) then
75024: LD_VAR 0 3
75028: PPUSH
75029: LD_VAR 0 4
75033: PPUSH
75034: CALL_OW 488
75038: IFFALSE 75061
// begin result := [ x , y ] ;
75040: LD_ADDR_VAR 0 1
75044: PUSH
75045: LD_VAR 0 3
75049: PUSH
75050: LD_VAR 0 4
75054: PUSH
75055: EMPTY
75056: LIST
75057: LIST
75058: ST_TO_ADDR
// break ;
75059: GO 75063
// end ; end ;
75061: GO 74863
75063: POP
75064: POP
// if result then
75065: LD_VAR 0 1
75069: IFFALSE 75129
// begin ToLua ( playSibBomb() ) ;
75071: LD_STRING playSibBomb()
75073: PPUSH
75074: CALL_OW 559
// wait ( 0 0$14 ) ;
75078: LD_INT 490
75080: PPUSH
75081: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
75085: LD_VAR 0 1
75089: PUSH
75090: LD_INT 1
75092: ARRAY
75093: PPUSH
75094: LD_VAR 0 1
75098: PUSH
75099: LD_INT 2
75101: ARRAY
75102: PPUSH
75103: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
75107: LD_VAR 0 1
75111: PUSH
75112: LD_INT 1
75114: ARRAY
75115: PPUSH
75116: LD_VAR 0 1
75120: PUSH
75121: LD_INT 2
75123: ARRAY
75124: PPUSH
75125: CALL_OW 429
// end ; end ;
75129: LD_VAR 0 1
75133: RET
// every 0 0$1 trigger StreamModeActive and sReset do
75134: LD_EXP 106
75138: PUSH
75139: LD_EXP 128
75143: AND
75144: IFFALSE 75156
75146: GO 75148
75148: DISABLE
// YouLost (  ) ;
75149: LD_STRING 
75151: PPUSH
75152: CALL_OW 104
75156: END
// every 0 0$1 trigger StreamModeActive and sFog do
75157: LD_EXP 106
75161: PUSH
75162: LD_EXP 127
75166: AND
75167: IFFALSE 75181
75169: GO 75171
75171: DISABLE
// FogOff ( your_side ) ;
75172: LD_OWVAR 2
75176: PPUSH
75177: CALL_OW 344
75181: END
// every 0 0$1 trigger StreamModeActive and sSun do
75182: LD_EXP 106
75186: PUSH
75187: LD_EXP 129
75191: AND
75192: IFFALSE 75220
75194: GO 75196
75196: DISABLE
// begin solar_recharge_percent := 0 ;
75197: LD_ADDR_OWVAR 79
75201: PUSH
75202: LD_INT 0
75204: ST_TO_ADDR
// wait ( 5 5$00 ) ;
75205: LD_INT 10500
75207: PPUSH
75208: CALL_OW 67
// solar_recharge_percent := 100 ;
75212: LD_ADDR_OWVAR 79
75216: PUSH
75217: LD_INT 100
75219: ST_TO_ADDR
// end ;
75220: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
75221: LD_EXP 106
75225: PUSH
75226: LD_EXP 130
75230: AND
75231: IFFALSE 75470
75233: GO 75235
75235: DISABLE
75236: LD_INT 0
75238: PPUSH
75239: PPUSH
75240: PPUSH
// begin tmp := [ ] ;
75241: LD_ADDR_VAR 0 3
75245: PUSH
75246: EMPTY
75247: ST_TO_ADDR
// for i := 1 to 6 do
75248: LD_ADDR_VAR 0 1
75252: PUSH
75253: DOUBLE
75254: LD_INT 1
75256: DEC
75257: ST_TO_ADDR
75258: LD_INT 6
75260: PUSH
75261: FOR_TO
75262: IFFALSE 75367
// begin uc_nation := nation_nature ;
75264: LD_ADDR_OWVAR 21
75268: PUSH
75269: LD_INT 0
75271: ST_TO_ADDR
// uc_side := 0 ;
75272: LD_ADDR_OWVAR 20
75276: PUSH
75277: LD_INT 0
75279: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75280: LD_ADDR_OWVAR 29
75284: PUSH
75285: LD_INT 12
75287: PUSH
75288: LD_INT 12
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: ST_TO_ADDR
// hc_agressivity := 20 ;
75295: LD_ADDR_OWVAR 35
75299: PUSH
75300: LD_INT 20
75302: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
75303: LD_ADDR_OWVAR 28
75307: PUSH
75308: LD_INT 17
75310: ST_TO_ADDR
// hc_gallery :=  ;
75311: LD_ADDR_OWVAR 33
75315: PUSH
75316: LD_STRING 
75318: ST_TO_ADDR
// hc_name :=  ;
75319: LD_ADDR_OWVAR 26
75323: PUSH
75324: LD_STRING 
75326: ST_TO_ADDR
// un := CreateHuman ;
75327: LD_ADDR_VAR 0 2
75331: PUSH
75332: CALL_OW 44
75336: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
75337: LD_VAR 0 2
75341: PPUSH
75342: LD_INT 1
75344: PPUSH
75345: CALL_OW 51
// tmp := tmp ^ un ;
75349: LD_ADDR_VAR 0 3
75353: PUSH
75354: LD_VAR 0 3
75358: PUSH
75359: LD_VAR 0 2
75363: ADD
75364: ST_TO_ADDR
// end ;
75365: GO 75261
75367: POP
75368: POP
// repeat wait ( 0 0$1 ) ;
75369: LD_INT 35
75371: PPUSH
75372: CALL_OW 67
// for un in tmp do
75376: LD_ADDR_VAR 0 2
75380: PUSH
75381: LD_VAR 0 3
75385: PUSH
75386: FOR_IN
75387: IFFALSE 75461
// begin if IsDead ( un ) then
75389: LD_VAR 0 2
75393: PPUSH
75394: CALL_OW 301
75398: IFFALSE 75418
// begin tmp := tmp diff un ;
75400: LD_ADDR_VAR 0 3
75404: PUSH
75405: LD_VAR 0 3
75409: PUSH
75410: LD_VAR 0 2
75414: DIFF
75415: ST_TO_ADDR
// continue ;
75416: GO 75386
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
75418: LD_VAR 0 2
75422: PPUSH
75423: LD_INT 3
75425: PUSH
75426: LD_INT 22
75428: PUSH
75429: LD_INT 0
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: PUSH
75436: EMPTY
75437: LIST
75438: LIST
75439: PPUSH
75440: CALL_OW 69
75444: PPUSH
75445: LD_VAR 0 2
75449: PPUSH
75450: CALL_OW 74
75454: PPUSH
75455: CALL_OW 115
// end ;
75459: GO 75386
75461: POP
75462: POP
// until not tmp ;
75463: LD_VAR 0 3
75467: NOT
75468: IFFALSE 75369
// end ;
75470: PPOPN 3
75472: END
// every 0 0$1 trigger StreamModeActive and sTroll do
75473: LD_EXP 106
75477: PUSH
75478: LD_EXP 131
75482: AND
75483: IFFALSE 75537
75485: GO 75487
75487: DISABLE
// begin ToLua ( displayTroll(); ) ;
75488: LD_STRING displayTroll();
75490: PPUSH
75491: CALL_OW 559
// wait ( 3 3$00 ) ;
75495: LD_INT 6300
75497: PPUSH
75498: CALL_OW 67
// ToLua ( hideTroll(); ) ;
75502: LD_STRING hideTroll();
75504: PPUSH
75505: CALL_OW 559
// wait ( 1 1$00 ) ;
75509: LD_INT 2100
75511: PPUSH
75512: CALL_OW 67
// ToLua ( displayTroll(); ) ;
75516: LD_STRING displayTroll();
75518: PPUSH
75519: CALL_OW 559
// wait ( 1 1$00 ) ;
75523: LD_INT 2100
75525: PPUSH
75526: CALL_OW 67
// ToLua ( hideTroll(); ) ;
75530: LD_STRING hideTroll();
75532: PPUSH
75533: CALL_OW 559
// end ;
75537: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
75538: LD_EXP 106
75542: PUSH
75543: LD_EXP 132
75547: AND
75548: IFFALSE 75611
75550: GO 75552
75552: DISABLE
75553: LD_INT 0
75555: PPUSH
// begin p := 0 ;
75556: LD_ADDR_VAR 0 1
75560: PUSH
75561: LD_INT 0
75563: ST_TO_ADDR
// repeat game_speed := 1 ;
75564: LD_ADDR_OWVAR 65
75568: PUSH
75569: LD_INT 1
75571: ST_TO_ADDR
// wait ( 0 0$1 ) ;
75572: LD_INT 35
75574: PPUSH
75575: CALL_OW 67
// p := p + 1 ;
75579: LD_ADDR_VAR 0 1
75583: PUSH
75584: LD_VAR 0 1
75588: PUSH
75589: LD_INT 1
75591: PLUS
75592: ST_TO_ADDR
// until p >= 60 ;
75593: LD_VAR 0 1
75597: PUSH
75598: LD_INT 60
75600: GREATEREQUAL
75601: IFFALSE 75564
// game_speed := 4 ;
75603: LD_ADDR_OWVAR 65
75607: PUSH
75608: LD_INT 4
75610: ST_TO_ADDR
// end ;
75611: PPOPN 1
75613: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
75614: LD_EXP 106
75618: PUSH
75619: LD_EXP 133
75623: AND
75624: IFFALSE 75770
75626: GO 75628
75628: DISABLE
75629: LD_INT 0
75631: PPUSH
75632: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75633: LD_ADDR_VAR 0 1
75637: PUSH
75638: LD_INT 22
75640: PUSH
75641: LD_OWVAR 2
75645: PUSH
75646: EMPTY
75647: LIST
75648: LIST
75649: PUSH
75650: LD_INT 2
75652: PUSH
75653: LD_INT 30
75655: PUSH
75656: LD_INT 0
75658: PUSH
75659: EMPTY
75660: LIST
75661: LIST
75662: PUSH
75663: LD_INT 30
75665: PUSH
75666: LD_INT 1
75668: PUSH
75669: EMPTY
75670: LIST
75671: LIST
75672: PUSH
75673: EMPTY
75674: LIST
75675: LIST
75676: LIST
75677: PUSH
75678: EMPTY
75679: LIST
75680: LIST
75681: PPUSH
75682: CALL_OW 69
75686: ST_TO_ADDR
// if not depot then
75687: LD_VAR 0 1
75691: NOT
75692: IFFALSE 75696
// exit ;
75694: GO 75770
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
75696: LD_ADDR_VAR 0 2
75700: PUSH
75701: LD_VAR 0 1
75705: PUSH
75706: LD_INT 1
75708: PPUSH
75709: LD_VAR 0 1
75713: PPUSH
75714: CALL_OW 12
75718: ARRAY
75719: PPUSH
75720: CALL_OW 274
75724: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
75725: LD_VAR 0 2
75729: PPUSH
75730: LD_INT 1
75732: PPUSH
75733: LD_INT 0
75735: PPUSH
75736: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
75740: LD_VAR 0 2
75744: PPUSH
75745: LD_INT 2
75747: PPUSH
75748: LD_INT 0
75750: PPUSH
75751: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
75755: LD_VAR 0 2
75759: PPUSH
75760: LD_INT 3
75762: PPUSH
75763: LD_INT 0
75765: PPUSH
75766: CALL_OW 277
// end ;
75770: PPOPN 2
75772: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
75773: LD_EXP 106
75777: PUSH
75778: LD_EXP 134
75782: AND
75783: IFFALSE 75880
75785: GO 75787
75787: DISABLE
75788: LD_INT 0
75790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75791: LD_ADDR_VAR 0 1
75795: PUSH
75796: LD_INT 22
75798: PUSH
75799: LD_OWVAR 2
75803: PUSH
75804: EMPTY
75805: LIST
75806: LIST
75807: PUSH
75808: LD_INT 21
75810: PUSH
75811: LD_INT 1
75813: PUSH
75814: EMPTY
75815: LIST
75816: LIST
75817: PUSH
75818: LD_INT 3
75820: PUSH
75821: LD_INT 23
75823: PUSH
75824: LD_INT 0
75826: PUSH
75827: EMPTY
75828: LIST
75829: LIST
75830: PUSH
75831: EMPTY
75832: LIST
75833: LIST
75834: PUSH
75835: EMPTY
75836: LIST
75837: LIST
75838: LIST
75839: PPUSH
75840: CALL_OW 69
75844: ST_TO_ADDR
// if not tmp then
75845: LD_VAR 0 1
75849: NOT
75850: IFFALSE 75854
// exit ;
75852: GO 75880
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
75854: LD_VAR 0 1
75858: PUSH
75859: LD_INT 1
75861: PPUSH
75862: LD_VAR 0 1
75866: PPUSH
75867: CALL_OW 12
75871: ARRAY
75872: PPUSH
75873: LD_INT 200
75875: PPUSH
75876: CALL_OW 234
// end ;
75880: PPOPN 1
75882: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
75883: LD_EXP 106
75887: PUSH
75888: LD_EXP 135
75892: AND
75893: IFFALSE 75972
75895: GO 75897
75897: DISABLE
75898: LD_INT 0
75900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
75901: LD_ADDR_VAR 0 1
75905: PUSH
75906: LD_INT 22
75908: PUSH
75909: LD_OWVAR 2
75913: PUSH
75914: EMPTY
75915: LIST
75916: LIST
75917: PUSH
75918: LD_INT 21
75920: PUSH
75921: LD_INT 2
75923: PUSH
75924: EMPTY
75925: LIST
75926: LIST
75927: PUSH
75928: EMPTY
75929: LIST
75930: LIST
75931: PPUSH
75932: CALL_OW 69
75936: ST_TO_ADDR
// if not tmp then
75937: LD_VAR 0 1
75941: NOT
75942: IFFALSE 75946
// exit ;
75944: GO 75972
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
75946: LD_VAR 0 1
75950: PUSH
75951: LD_INT 1
75953: PPUSH
75954: LD_VAR 0 1
75958: PPUSH
75959: CALL_OW 12
75963: ARRAY
75964: PPUSH
75965: LD_INT 60
75967: PPUSH
75968: CALL_OW 234
// end ;
75972: PPOPN 1
75974: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
75975: LD_EXP 106
75979: PUSH
75980: LD_EXP 136
75984: AND
75985: IFFALSE 76084
75987: GO 75989
75989: DISABLE
75990: LD_INT 0
75992: PPUSH
75993: PPUSH
// begin enable ;
75994: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
75995: LD_ADDR_VAR 0 1
75999: PUSH
76000: LD_INT 22
76002: PUSH
76003: LD_OWVAR 2
76007: PUSH
76008: EMPTY
76009: LIST
76010: LIST
76011: PUSH
76012: LD_INT 61
76014: PUSH
76015: EMPTY
76016: LIST
76017: PUSH
76018: LD_INT 33
76020: PUSH
76021: LD_INT 2
76023: PUSH
76024: EMPTY
76025: LIST
76026: LIST
76027: PUSH
76028: EMPTY
76029: LIST
76030: LIST
76031: LIST
76032: PPUSH
76033: CALL_OW 69
76037: ST_TO_ADDR
// if not tmp then
76038: LD_VAR 0 1
76042: NOT
76043: IFFALSE 76047
// exit ;
76045: GO 76084
// for i in tmp do
76047: LD_ADDR_VAR 0 2
76051: PUSH
76052: LD_VAR 0 1
76056: PUSH
76057: FOR_IN
76058: IFFALSE 76082
// if IsControledBy ( i ) then
76060: LD_VAR 0 2
76064: PPUSH
76065: CALL_OW 312
76069: IFFALSE 76080
// ComUnlink ( i ) ;
76071: LD_VAR 0 2
76075: PPUSH
76076: CALL_OW 136
76080: GO 76057
76082: POP
76083: POP
// end ;
76084: PPOPN 2
76086: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
76087: LD_EXP 106
76091: PUSH
76092: LD_EXP 137
76096: AND
76097: IFFALSE 76237
76099: GO 76101
76101: DISABLE
76102: LD_INT 0
76104: PPUSH
76105: PPUSH
// begin ToLua ( displayPowell(); ) ;
76106: LD_STRING displayPowell();
76108: PPUSH
76109: CALL_OW 559
// uc_side := 0 ;
76113: LD_ADDR_OWVAR 20
76117: PUSH
76118: LD_INT 0
76120: ST_TO_ADDR
// uc_nation := 2 ;
76121: LD_ADDR_OWVAR 21
76125: PUSH
76126: LD_INT 2
76128: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
76129: LD_ADDR_OWVAR 37
76133: PUSH
76134: LD_INT 14
76136: ST_TO_ADDR
// vc_engine := engine_siberite ;
76137: LD_ADDR_OWVAR 39
76141: PUSH
76142: LD_INT 3
76144: ST_TO_ADDR
// vc_control := control_apeman ;
76145: LD_ADDR_OWVAR 38
76149: PUSH
76150: LD_INT 5
76152: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
76153: LD_ADDR_OWVAR 40
76157: PUSH
76158: LD_INT 29
76160: ST_TO_ADDR
// un := CreateVehicle ;
76161: LD_ADDR_VAR 0 2
76165: PUSH
76166: CALL_OW 45
76170: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76171: LD_VAR 0 2
76175: PPUSH
76176: LD_INT 1
76178: PPUSH
76179: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
76183: LD_INT 35
76185: PPUSH
76186: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
76190: LD_VAR 0 2
76194: PPUSH
76195: LD_INT 22
76197: PUSH
76198: LD_OWVAR 2
76202: PUSH
76203: EMPTY
76204: LIST
76205: LIST
76206: PPUSH
76207: CALL_OW 69
76211: PPUSH
76212: LD_VAR 0 2
76216: PPUSH
76217: CALL_OW 74
76221: PPUSH
76222: CALL_OW 115
// until IsDead ( un ) ;
76226: LD_VAR 0 2
76230: PPUSH
76231: CALL_OW 301
76235: IFFALSE 76183
// end ;
76237: PPOPN 2
76239: END
// every 0 0$1 trigger StreamModeActive and sStu do
76240: LD_EXP 106
76244: PUSH
76245: LD_EXP 145
76249: AND
76250: IFFALSE 76266
76252: GO 76254
76254: DISABLE
// begin ToLua ( displayStucuk(); ) ;
76255: LD_STRING displayStucuk();
76257: PPUSH
76258: CALL_OW 559
// ResetFog ;
76262: CALL_OW 335
// end ;
76266: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
76267: LD_EXP 106
76271: PUSH
76272: LD_EXP 138
76276: AND
76277: IFFALSE 76418
76279: GO 76281
76281: DISABLE
76282: LD_INT 0
76284: PPUSH
76285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
76286: LD_ADDR_VAR 0 2
76290: PUSH
76291: LD_INT 22
76293: PUSH
76294: LD_OWVAR 2
76298: PUSH
76299: EMPTY
76300: LIST
76301: LIST
76302: PUSH
76303: LD_INT 21
76305: PUSH
76306: LD_INT 1
76308: PUSH
76309: EMPTY
76310: LIST
76311: LIST
76312: PUSH
76313: EMPTY
76314: LIST
76315: LIST
76316: PPUSH
76317: CALL_OW 69
76321: ST_TO_ADDR
// if not tmp then
76322: LD_VAR 0 2
76326: NOT
76327: IFFALSE 76331
// exit ;
76329: GO 76418
// un := tmp [ rand ( 1 , tmp ) ] ;
76331: LD_ADDR_VAR 0 1
76335: PUSH
76336: LD_VAR 0 2
76340: PUSH
76341: LD_INT 1
76343: PPUSH
76344: LD_VAR 0 2
76348: PPUSH
76349: CALL_OW 12
76353: ARRAY
76354: ST_TO_ADDR
// SetSide ( un , 0 ) ;
76355: LD_VAR 0 1
76359: PPUSH
76360: LD_INT 0
76362: PPUSH
76363: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
76367: LD_VAR 0 1
76371: PPUSH
76372: LD_OWVAR 3
76376: PUSH
76377: LD_VAR 0 1
76381: DIFF
76382: PPUSH
76383: LD_VAR 0 1
76387: PPUSH
76388: CALL_OW 74
76392: PPUSH
76393: CALL_OW 115
// wait ( 0 0$20 ) ;
76397: LD_INT 700
76399: PPUSH
76400: CALL_OW 67
// SetSide ( un , your_side ) ;
76404: LD_VAR 0 1
76408: PPUSH
76409: LD_OWVAR 2
76413: PPUSH
76414: CALL_OW 235
// end ;
76418: PPOPN 2
76420: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
76421: LD_EXP 106
76425: PUSH
76426: LD_EXP 139
76430: AND
76431: IFFALSE 76537
76433: GO 76435
76435: DISABLE
76436: LD_INT 0
76438: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
76439: LD_ADDR_VAR 0 1
76443: PUSH
76444: LD_INT 22
76446: PUSH
76447: LD_OWVAR 2
76451: PUSH
76452: EMPTY
76453: LIST
76454: LIST
76455: PUSH
76456: LD_INT 2
76458: PUSH
76459: LD_INT 30
76461: PUSH
76462: LD_INT 0
76464: PUSH
76465: EMPTY
76466: LIST
76467: LIST
76468: PUSH
76469: LD_INT 30
76471: PUSH
76472: LD_INT 1
76474: PUSH
76475: EMPTY
76476: LIST
76477: LIST
76478: PUSH
76479: EMPTY
76480: LIST
76481: LIST
76482: LIST
76483: PUSH
76484: EMPTY
76485: LIST
76486: LIST
76487: PPUSH
76488: CALL_OW 69
76492: ST_TO_ADDR
// if not depot then
76493: LD_VAR 0 1
76497: NOT
76498: IFFALSE 76502
// exit ;
76500: GO 76537
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
76502: LD_VAR 0 1
76506: PUSH
76507: LD_INT 1
76509: ARRAY
76510: PPUSH
76511: CALL_OW 250
76515: PPUSH
76516: LD_VAR 0 1
76520: PUSH
76521: LD_INT 1
76523: ARRAY
76524: PPUSH
76525: CALL_OW 251
76529: PPUSH
76530: LD_INT 70
76532: PPUSH
76533: CALL_OW 495
// end ;
76537: PPOPN 1
76539: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
76540: LD_EXP 106
76544: PUSH
76545: LD_EXP 140
76549: AND
76550: IFFALSE 76761
76552: GO 76554
76554: DISABLE
76555: LD_INT 0
76557: PPUSH
76558: PPUSH
76559: PPUSH
76560: PPUSH
76561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
76562: LD_ADDR_VAR 0 5
76566: PUSH
76567: LD_INT 22
76569: PUSH
76570: LD_OWVAR 2
76574: PUSH
76575: EMPTY
76576: LIST
76577: LIST
76578: PUSH
76579: LD_INT 21
76581: PUSH
76582: LD_INT 1
76584: PUSH
76585: EMPTY
76586: LIST
76587: LIST
76588: PUSH
76589: EMPTY
76590: LIST
76591: LIST
76592: PPUSH
76593: CALL_OW 69
76597: ST_TO_ADDR
// if not tmp then
76598: LD_VAR 0 5
76602: NOT
76603: IFFALSE 76607
// exit ;
76605: GO 76761
// for i in tmp do
76607: LD_ADDR_VAR 0 1
76611: PUSH
76612: LD_VAR 0 5
76616: PUSH
76617: FOR_IN
76618: IFFALSE 76759
// begin d := rand ( 0 , 5 ) ;
76620: LD_ADDR_VAR 0 4
76624: PUSH
76625: LD_INT 0
76627: PPUSH
76628: LD_INT 5
76630: PPUSH
76631: CALL_OW 12
76635: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
76636: LD_ADDR_VAR 0 2
76640: PUSH
76641: LD_VAR 0 1
76645: PPUSH
76646: CALL_OW 250
76650: PPUSH
76651: LD_VAR 0 4
76655: PPUSH
76656: LD_INT 3
76658: PPUSH
76659: LD_INT 12
76661: PPUSH
76662: CALL_OW 12
76666: PPUSH
76667: CALL_OW 272
76671: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
76672: LD_ADDR_VAR 0 3
76676: PUSH
76677: LD_VAR 0 1
76681: PPUSH
76682: CALL_OW 251
76686: PPUSH
76687: LD_VAR 0 4
76691: PPUSH
76692: LD_INT 3
76694: PPUSH
76695: LD_INT 12
76697: PPUSH
76698: CALL_OW 12
76702: PPUSH
76703: CALL_OW 273
76707: ST_TO_ADDR
// if ValidHex ( x , y ) then
76708: LD_VAR 0 2
76712: PPUSH
76713: LD_VAR 0 3
76717: PPUSH
76718: CALL_OW 488
76722: IFFALSE 76757
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
76724: LD_VAR 0 1
76728: PPUSH
76729: LD_VAR 0 2
76733: PPUSH
76734: LD_VAR 0 3
76738: PPUSH
76739: LD_INT 3
76741: PPUSH
76742: LD_INT 6
76744: PPUSH
76745: CALL_OW 12
76749: PPUSH
76750: LD_INT 1
76752: PPUSH
76753: CALL_OW 483
// end ;
76757: GO 76617
76759: POP
76760: POP
// end ;
76761: PPOPN 5
76763: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
76764: LD_EXP 106
76768: PUSH
76769: LD_EXP 141
76773: AND
76774: IFFALSE 76868
76776: GO 76778
76778: DISABLE
76779: LD_INT 0
76781: PPUSH
76782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
76783: LD_ADDR_VAR 0 2
76787: PUSH
76788: LD_INT 22
76790: PUSH
76791: LD_OWVAR 2
76795: PUSH
76796: EMPTY
76797: LIST
76798: LIST
76799: PUSH
76800: LD_INT 32
76802: PUSH
76803: LD_INT 1
76805: PUSH
76806: EMPTY
76807: LIST
76808: LIST
76809: PUSH
76810: LD_INT 21
76812: PUSH
76813: LD_INT 2
76815: PUSH
76816: EMPTY
76817: LIST
76818: LIST
76819: PUSH
76820: EMPTY
76821: LIST
76822: LIST
76823: LIST
76824: PPUSH
76825: CALL_OW 69
76829: ST_TO_ADDR
// if not tmp then
76830: LD_VAR 0 2
76834: NOT
76835: IFFALSE 76839
// exit ;
76837: GO 76868
// for i in tmp do
76839: LD_ADDR_VAR 0 1
76843: PUSH
76844: LD_VAR 0 2
76848: PUSH
76849: FOR_IN
76850: IFFALSE 76866
// SetFuel ( i , 0 ) ;
76852: LD_VAR 0 1
76856: PPUSH
76857: LD_INT 0
76859: PPUSH
76860: CALL_OW 240
76864: GO 76849
76866: POP
76867: POP
// end ;
76868: PPOPN 2
76870: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
76871: LD_EXP 106
76875: PUSH
76876: LD_EXP 142
76880: AND
76881: IFFALSE 76947
76883: GO 76885
76885: DISABLE
76886: LD_INT 0
76888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
76889: LD_ADDR_VAR 0 1
76893: PUSH
76894: LD_INT 22
76896: PUSH
76897: LD_OWVAR 2
76901: PUSH
76902: EMPTY
76903: LIST
76904: LIST
76905: PUSH
76906: LD_INT 30
76908: PUSH
76909: LD_INT 29
76911: PUSH
76912: EMPTY
76913: LIST
76914: LIST
76915: PUSH
76916: EMPTY
76917: LIST
76918: LIST
76919: PPUSH
76920: CALL_OW 69
76924: ST_TO_ADDR
// if not tmp then
76925: LD_VAR 0 1
76929: NOT
76930: IFFALSE 76934
// exit ;
76932: GO 76947
// DestroyUnit ( tmp [ 1 ] ) ;
76934: LD_VAR 0 1
76938: PUSH
76939: LD_INT 1
76941: ARRAY
76942: PPUSH
76943: CALL_OW 65
// end ;
76947: PPOPN 1
76949: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
76950: LD_EXP 106
76954: PUSH
76955: LD_EXP 144
76959: AND
76960: IFFALSE 77089
76962: GO 76964
76964: DISABLE
76965: LD_INT 0
76967: PPUSH
// begin uc_side := 0 ;
76968: LD_ADDR_OWVAR 20
76972: PUSH
76973: LD_INT 0
76975: ST_TO_ADDR
// uc_nation := nation_arabian ;
76976: LD_ADDR_OWVAR 21
76980: PUSH
76981: LD_INT 2
76983: ST_TO_ADDR
// hc_gallery :=  ;
76984: LD_ADDR_OWVAR 33
76988: PUSH
76989: LD_STRING 
76991: ST_TO_ADDR
// hc_name :=  ;
76992: LD_ADDR_OWVAR 26
76996: PUSH
76997: LD_STRING 
76999: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
77000: LD_INT 1
77002: PPUSH
77003: LD_INT 11
77005: PPUSH
77006: LD_INT 10
77008: PPUSH
77009: CALL_OW 380
// un := CreateHuman ;
77013: LD_ADDR_VAR 0 1
77017: PUSH
77018: CALL_OW 44
77022: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
77023: LD_VAR 0 1
77027: PPUSH
77028: LD_INT 1
77030: PPUSH
77031: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
77035: LD_INT 35
77037: PPUSH
77038: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
77042: LD_VAR 0 1
77046: PPUSH
77047: LD_INT 22
77049: PUSH
77050: LD_OWVAR 2
77054: PUSH
77055: EMPTY
77056: LIST
77057: LIST
77058: PPUSH
77059: CALL_OW 69
77063: PPUSH
77064: LD_VAR 0 1
77068: PPUSH
77069: CALL_OW 74
77073: PPUSH
77074: CALL_OW 115
// until IsDead ( un ) ;
77078: LD_VAR 0 1
77082: PPUSH
77083: CALL_OW 301
77087: IFFALSE 77035
// end ;
77089: PPOPN 1
77091: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
77092: LD_EXP 106
77096: PUSH
77097: LD_EXP 146
77101: AND
77102: IFFALSE 77114
77104: GO 77106
77106: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
77107: LD_STRING earthquake(getX(game), 0, 32)
77109: PPUSH
77110: CALL_OW 559
77114: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
77115: LD_EXP 106
77119: PUSH
77120: LD_EXP 147
77124: AND
77125: IFFALSE 77216
77127: GO 77129
77129: DISABLE
77130: LD_INT 0
77132: PPUSH
// begin enable ;
77133: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
77134: LD_ADDR_VAR 0 1
77138: PUSH
77139: LD_INT 22
77141: PUSH
77142: LD_OWVAR 2
77146: PUSH
77147: EMPTY
77148: LIST
77149: LIST
77150: PUSH
77151: LD_INT 21
77153: PUSH
77154: LD_INT 2
77156: PUSH
77157: EMPTY
77158: LIST
77159: LIST
77160: PUSH
77161: LD_INT 33
77163: PUSH
77164: LD_INT 3
77166: PUSH
77167: EMPTY
77168: LIST
77169: LIST
77170: PUSH
77171: EMPTY
77172: LIST
77173: LIST
77174: LIST
77175: PPUSH
77176: CALL_OW 69
77180: ST_TO_ADDR
// if not tmp then
77181: LD_VAR 0 1
77185: NOT
77186: IFFALSE 77190
// exit ;
77188: GO 77216
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
77190: LD_VAR 0 1
77194: PUSH
77195: LD_INT 1
77197: PPUSH
77198: LD_VAR 0 1
77202: PPUSH
77203: CALL_OW 12
77207: ARRAY
77208: PPUSH
77209: LD_INT 1
77211: PPUSH
77212: CALL_OW 234
// end ;
77216: PPOPN 1
77218: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
77219: LD_EXP 106
77223: PUSH
77224: LD_EXP 148
77228: AND
77229: IFFALSE 77370
77231: GO 77233
77233: DISABLE
77234: LD_INT 0
77236: PPUSH
77237: PPUSH
77238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77239: LD_ADDR_VAR 0 3
77243: PUSH
77244: LD_INT 22
77246: PUSH
77247: LD_OWVAR 2
77251: PUSH
77252: EMPTY
77253: LIST
77254: LIST
77255: PUSH
77256: LD_INT 25
77258: PUSH
77259: LD_INT 1
77261: PUSH
77262: EMPTY
77263: LIST
77264: LIST
77265: PUSH
77266: EMPTY
77267: LIST
77268: LIST
77269: PPUSH
77270: CALL_OW 69
77274: ST_TO_ADDR
// if not tmp then
77275: LD_VAR 0 3
77279: NOT
77280: IFFALSE 77284
// exit ;
77282: GO 77370
// un := tmp [ rand ( 1 , tmp ) ] ;
77284: LD_ADDR_VAR 0 2
77288: PUSH
77289: LD_VAR 0 3
77293: PUSH
77294: LD_INT 1
77296: PPUSH
77297: LD_VAR 0 3
77301: PPUSH
77302: CALL_OW 12
77306: ARRAY
77307: ST_TO_ADDR
// if Crawls ( un ) then
77308: LD_VAR 0 2
77312: PPUSH
77313: CALL_OW 318
77317: IFFALSE 77328
// ComWalk ( un ) ;
77319: LD_VAR 0 2
77323: PPUSH
77324: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
77328: LD_VAR 0 2
77332: PPUSH
77333: LD_INT 9
77335: PPUSH
77336: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
77340: LD_INT 28
77342: PPUSH
77343: LD_OWVAR 2
77347: PPUSH
77348: LD_INT 2
77350: PPUSH
77351: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
77355: LD_INT 29
77357: PPUSH
77358: LD_OWVAR 2
77362: PPUSH
77363: LD_INT 2
77365: PPUSH
77366: CALL_OW 322
// end ;
77370: PPOPN 3
77372: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
77373: LD_EXP 106
77377: PUSH
77378: LD_EXP 149
77382: AND
77383: IFFALSE 77494
77385: GO 77387
77387: DISABLE
77388: LD_INT 0
77390: PPUSH
77391: PPUSH
77392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77393: LD_ADDR_VAR 0 3
77397: PUSH
77398: LD_INT 22
77400: PUSH
77401: LD_OWVAR 2
77405: PUSH
77406: EMPTY
77407: LIST
77408: LIST
77409: PUSH
77410: LD_INT 25
77412: PUSH
77413: LD_INT 1
77415: PUSH
77416: EMPTY
77417: LIST
77418: LIST
77419: PUSH
77420: EMPTY
77421: LIST
77422: LIST
77423: PPUSH
77424: CALL_OW 69
77428: ST_TO_ADDR
// if not tmp then
77429: LD_VAR 0 3
77433: NOT
77434: IFFALSE 77438
// exit ;
77436: GO 77494
// un := tmp [ rand ( 1 , tmp ) ] ;
77438: LD_ADDR_VAR 0 2
77442: PUSH
77443: LD_VAR 0 3
77447: PUSH
77448: LD_INT 1
77450: PPUSH
77451: LD_VAR 0 3
77455: PPUSH
77456: CALL_OW 12
77460: ARRAY
77461: ST_TO_ADDR
// if Crawls ( un ) then
77462: LD_VAR 0 2
77466: PPUSH
77467: CALL_OW 318
77471: IFFALSE 77482
// ComWalk ( un ) ;
77473: LD_VAR 0 2
77477: PPUSH
77478: CALL_OW 138
// SetClass ( un , class_mortar ) ;
77482: LD_VAR 0 2
77486: PPUSH
77487: LD_INT 8
77489: PPUSH
77490: CALL_OW 336
// end ;
77494: PPOPN 3
77496: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
77497: LD_EXP 106
77501: PUSH
77502: LD_EXP 150
77506: AND
77507: IFFALSE 77651
77509: GO 77511
77511: DISABLE
77512: LD_INT 0
77514: PPUSH
77515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
77516: LD_ADDR_VAR 0 2
77520: PUSH
77521: LD_INT 22
77523: PUSH
77524: LD_OWVAR 2
77528: PUSH
77529: EMPTY
77530: LIST
77531: LIST
77532: PUSH
77533: LD_INT 21
77535: PUSH
77536: LD_INT 2
77538: PUSH
77539: EMPTY
77540: LIST
77541: LIST
77542: PUSH
77543: LD_INT 2
77545: PUSH
77546: LD_INT 34
77548: PUSH
77549: LD_INT 12
77551: PUSH
77552: EMPTY
77553: LIST
77554: LIST
77555: PUSH
77556: LD_INT 34
77558: PUSH
77559: LD_INT 51
77561: PUSH
77562: EMPTY
77563: LIST
77564: LIST
77565: PUSH
77566: LD_INT 34
77568: PUSH
77569: LD_INT 32
77571: PUSH
77572: EMPTY
77573: LIST
77574: LIST
77575: PUSH
77576: EMPTY
77577: LIST
77578: LIST
77579: LIST
77580: LIST
77581: PUSH
77582: EMPTY
77583: LIST
77584: LIST
77585: LIST
77586: PPUSH
77587: CALL_OW 69
77591: ST_TO_ADDR
// if not tmp then
77592: LD_VAR 0 2
77596: NOT
77597: IFFALSE 77601
// exit ;
77599: GO 77651
// for i in tmp do
77601: LD_ADDR_VAR 0 1
77605: PUSH
77606: LD_VAR 0 2
77610: PUSH
77611: FOR_IN
77612: IFFALSE 77649
// if GetCargo ( i , mat_artifact ) = 0 then
77614: LD_VAR 0 1
77618: PPUSH
77619: LD_INT 4
77621: PPUSH
77622: CALL_OW 289
77626: PUSH
77627: LD_INT 0
77629: EQUAL
77630: IFFALSE 77647
// SetCargo ( i , mat_siberit , 100 ) ;
77632: LD_VAR 0 1
77636: PPUSH
77637: LD_INT 3
77639: PPUSH
77640: LD_INT 100
77642: PPUSH
77643: CALL_OW 290
77647: GO 77611
77649: POP
77650: POP
// end ;
77651: PPOPN 2
77653: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
77654: LD_EXP 106
77658: PUSH
77659: LD_EXP 151
77663: AND
77664: IFFALSE 77847
77666: GO 77668
77668: DISABLE
77669: LD_INT 0
77671: PPUSH
77672: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
77673: LD_ADDR_VAR 0 2
77677: PUSH
77678: LD_INT 22
77680: PUSH
77681: LD_OWVAR 2
77685: PUSH
77686: EMPTY
77687: LIST
77688: LIST
77689: PPUSH
77690: CALL_OW 69
77694: ST_TO_ADDR
// if not tmp then
77695: LD_VAR 0 2
77699: NOT
77700: IFFALSE 77704
// exit ;
77702: GO 77847
// for i := 1 to 2 do
77704: LD_ADDR_VAR 0 1
77708: PUSH
77709: DOUBLE
77710: LD_INT 1
77712: DEC
77713: ST_TO_ADDR
77714: LD_INT 2
77716: PUSH
77717: FOR_TO
77718: IFFALSE 77845
// begin uc_side := your_side ;
77720: LD_ADDR_OWVAR 20
77724: PUSH
77725: LD_OWVAR 2
77729: ST_TO_ADDR
// uc_nation := nation_american ;
77730: LD_ADDR_OWVAR 21
77734: PUSH
77735: LD_INT 1
77737: ST_TO_ADDR
// vc_chassis := us_morphling ;
77738: LD_ADDR_OWVAR 37
77742: PUSH
77743: LD_INT 5
77745: ST_TO_ADDR
// vc_engine := engine_siberite ;
77746: LD_ADDR_OWVAR 39
77750: PUSH
77751: LD_INT 3
77753: ST_TO_ADDR
// vc_control := control_computer ;
77754: LD_ADDR_OWVAR 38
77758: PUSH
77759: LD_INT 3
77761: ST_TO_ADDR
// vc_weapon := us_double_laser ;
77762: LD_ADDR_OWVAR 40
77766: PUSH
77767: LD_INT 10
77769: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
77770: LD_VAR 0 2
77774: PUSH
77775: LD_INT 1
77777: ARRAY
77778: PPUSH
77779: CALL_OW 310
77783: NOT
77784: IFFALSE 77831
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
77786: CALL_OW 45
77790: PPUSH
77791: LD_VAR 0 2
77795: PUSH
77796: LD_INT 1
77798: ARRAY
77799: PPUSH
77800: CALL_OW 250
77804: PPUSH
77805: LD_VAR 0 2
77809: PUSH
77810: LD_INT 1
77812: ARRAY
77813: PPUSH
77814: CALL_OW 251
77818: PPUSH
77819: LD_INT 12
77821: PPUSH
77822: LD_INT 1
77824: PPUSH
77825: CALL_OW 50
77829: GO 77843
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
77831: CALL_OW 45
77835: PPUSH
77836: LD_INT 1
77838: PPUSH
77839: CALL_OW 51
// end ;
77843: GO 77717
77845: POP
77846: POP
// end ;
77847: PPOPN 2
77849: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
77850: LD_EXP 106
77854: PUSH
77855: LD_EXP 152
77859: AND
77860: IFFALSE 78082
77862: GO 77864
77864: DISABLE
77865: LD_INT 0
77867: PPUSH
77868: PPUSH
77869: PPUSH
77870: PPUSH
77871: PPUSH
77872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
77873: LD_ADDR_VAR 0 6
77877: PUSH
77878: LD_INT 22
77880: PUSH
77881: LD_OWVAR 2
77885: PUSH
77886: EMPTY
77887: LIST
77888: LIST
77889: PUSH
77890: LD_INT 21
77892: PUSH
77893: LD_INT 1
77895: PUSH
77896: EMPTY
77897: LIST
77898: LIST
77899: PUSH
77900: LD_INT 3
77902: PUSH
77903: LD_INT 23
77905: PUSH
77906: LD_INT 0
77908: PUSH
77909: EMPTY
77910: LIST
77911: LIST
77912: PUSH
77913: EMPTY
77914: LIST
77915: LIST
77916: PUSH
77917: EMPTY
77918: LIST
77919: LIST
77920: LIST
77921: PPUSH
77922: CALL_OW 69
77926: ST_TO_ADDR
// if not tmp then
77927: LD_VAR 0 6
77931: NOT
77932: IFFALSE 77936
// exit ;
77934: GO 78082
// s1 := rand ( 1 , 4 ) ;
77936: LD_ADDR_VAR 0 2
77940: PUSH
77941: LD_INT 1
77943: PPUSH
77944: LD_INT 4
77946: PPUSH
77947: CALL_OW 12
77951: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
77952: LD_ADDR_VAR 0 4
77956: PUSH
77957: LD_VAR 0 6
77961: PUSH
77962: LD_INT 1
77964: ARRAY
77965: PPUSH
77966: LD_VAR 0 2
77970: PPUSH
77971: CALL_OW 259
77975: ST_TO_ADDR
// if s1 = 1 then
77976: LD_VAR 0 2
77980: PUSH
77981: LD_INT 1
77983: EQUAL
77984: IFFALSE 78004
// s2 := rand ( 2 , 4 ) else
77986: LD_ADDR_VAR 0 3
77990: PUSH
77991: LD_INT 2
77993: PPUSH
77994: LD_INT 4
77996: PPUSH
77997: CALL_OW 12
78001: ST_TO_ADDR
78002: GO 78012
// s2 := 1 ;
78004: LD_ADDR_VAR 0 3
78008: PUSH
78009: LD_INT 1
78011: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
78012: LD_ADDR_VAR 0 5
78016: PUSH
78017: LD_VAR 0 6
78021: PUSH
78022: LD_INT 1
78024: ARRAY
78025: PPUSH
78026: LD_VAR 0 3
78030: PPUSH
78031: CALL_OW 259
78035: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
78036: LD_VAR 0 6
78040: PUSH
78041: LD_INT 1
78043: ARRAY
78044: PPUSH
78045: LD_VAR 0 2
78049: PPUSH
78050: LD_VAR 0 5
78054: PPUSH
78055: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
78059: LD_VAR 0 6
78063: PUSH
78064: LD_INT 1
78066: ARRAY
78067: PPUSH
78068: LD_VAR 0 3
78072: PPUSH
78073: LD_VAR 0 4
78077: PPUSH
78078: CALL_OW 237
// end ;
78082: PPOPN 6
78084: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
78085: LD_EXP 106
78089: PUSH
78090: LD_EXP 153
78094: AND
78095: IFFALSE 78174
78097: GO 78099
78099: DISABLE
78100: LD_INT 0
78102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
78103: LD_ADDR_VAR 0 1
78107: PUSH
78108: LD_INT 22
78110: PUSH
78111: LD_OWVAR 2
78115: PUSH
78116: EMPTY
78117: LIST
78118: LIST
78119: PUSH
78120: LD_INT 30
78122: PUSH
78123: LD_INT 3
78125: PUSH
78126: EMPTY
78127: LIST
78128: LIST
78129: PUSH
78130: EMPTY
78131: LIST
78132: LIST
78133: PPUSH
78134: CALL_OW 69
78138: ST_TO_ADDR
// if not tmp then
78139: LD_VAR 0 1
78143: NOT
78144: IFFALSE 78148
// exit ;
78146: GO 78174
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
78148: LD_VAR 0 1
78152: PUSH
78153: LD_INT 1
78155: PPUSH
78156: LD_VAR 0 1
78160: PPUSH
78161: CALL_OW 12
78165: ARRAY
78166: PPUSH
78167: LD_INT 1
78169: PPUSH
78170: CALL_OW 234
// end ;
78174: PPOPN 1
78176: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
78177: LD_EXP 106
78181: PUSH
78182: LD_EXP 154
78186: AND
78187: IFFALSE 78299
78189: GO 78191
78191: DISABLE
78192: LD_INT 0
78194: PPUSH
78195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
78196: LD_ADDR_VAR 0 2
78200: PUSH
78201: LD_INT 22
78203: PUSH
78204: LD_OWVAR 2
78208: PUSH
78209: EMPTY
78210: LIST
78211: LIST
78212: PUSH
78213: LD_INT 2
78215: PUSH
78216: LD_INT 30
78218: PUSH
78219: LD_INT 27
78221: PUSH
78222: EMPTY
78223: LIST
78224: LIST
78225: PUSH
78226: LD_INT 30
78228: PUSH
78229: LD_INT 26
78231: PUSH
78232: EMPTY
78233: LIST
78234: LIST
78235: PUSH
78236: LD_INT 30
78238: PUSH
78239: LD_INT 28
78241: PUSH
78242: EMPTY
78243: LIST
78244: LIST
78245: PUSH
78246: EMPTY
78247: LIST
78248: LIST
78249: LIST
78250: LIST
78251: PUSH
78252: EMPTY
78253: LIST
78254: LIST
78255: PPUSH
78256: CALL_OW 69
78260: ST_TO_ADDR
// if not tmp then
78261: LD_VAR 0 2
78265: NOT
78266: IFFALSE 78270
// exit ;
78268: GO 78299
// for i in tmp do
78270: LD_ADDR_VAR 0 1
78274: PUSH
78275: LD_VAR 0 2
78279: PUSH
78280: FOR_IN
78281: IFFALSE 78297
// SetLives ( i , 1 ) ;
78283: LD_VAR 0 1
78287: PPUSH
78288: LD_INT 1
78290: PPUSH
78291: CALL_OW 234
78295: GO 78280
78297: POP
78298: POP
// end ;
78299: PPOPN 2
78301: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
78302: LD_EXP 106
78306: PUSH
78307: LD_EXP 155
78311: AND
78312: IFFALSE 78586
78314: GO 78316
78316: DISABLE
78317: LD_INT 0
78319: PPUSH
78320: PPUSH
78321: PPUSH
// begin i := rand ( 1 , 7 ) ;
78322: LD_ADDR_VAR 0 1
78326: PUSH
78327: LD_INT 1
78329: PPUSH
78330: LD_INT 7
78332: PPUSH
78333: CALL_OW 12
78337: ST_TO_ADDR
// case i of 1 :
78338: LD_VAR 0 1
78342: PUSH
78343: LD_INT 1
78345: DOUBLE
78346: EQUAL
78347: IFTRUE 78351
78349: GO 78361
78351: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
78352: LD_STRING earthquake(getX(game), 0, 32)
78354: PPUSH
78355: CALL_OW 559
78359: GO 78586
78361: LD_INT 2
78363: DOUBLE
78364: EQUAL
78365: IFTRUE 78369
78367: GO 78383
78369: POP
// begin ToLua ( displayStucuk(); ) ;
78370: LD_STRING displayStucuk();
78372: PPUSH
78373: CALL_OW 559
// ResetFog ;
78377: CALL_OW 335
// end ; 3 :
78381: GO 78586
78383: LD_INT 3
78385: DOUBLE
78386: EQUAL
78387: IFTRUE 78391
78389: GO 78495
78391: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78392: LD_ADDR_VAR 0 2
78396: PUSH
78397: LD_INT 22
78399: PUSH
78400: LD_OWVAR 2
78404: PUSH
78405: EMPTY
78406: LIST
78407: LIST
78408: PUSH
78409: LD_INT 25
78411: PUSH
78412: LD_INT 1
78414: PUSH
78415: EMPTY
78416: LIST
78417: LIST
78418: PUSH
78419: EMPTY
78420: LIST
78421: LIST
78422: PPUSH
78423: CALL_OW 69
78427: ST_TO_ADDR
// if not tmp then
78428: LD_VAR 0 2
78432: NOT
78433: IFFALSE 78437
// exit ;
78435: GO 78586
// un := tmp [ rand ( 1 , tmp ) ] ;
78437: LD_ADDR_VAR 0 3
78441: PUSH
78442: LD_VAR 0 2
78446: PUSH
78447: LD_INT 1
78449: PPUSH
78450: LD_VAR 0 2
78454: PPUSH
78455: CALL_OW 12
78459: ARRAY
78460: ST_TO_ADDR
// if Crawls ( un ) then
78461: LD_VAR 0 3
78465: PPUSH
78466: CALL_OW 318
78470: IFFALSE 78481
// ComWalk ( un ) ;
78472: LD_VAR 0 3
78476: PPUSH
78477: CALL_OW 138
// SetClass ( un , class_mortar ) ;
78481: LD_VAR 0 3
78485: PPUSH
78486: LD_INT 8
78488: PPUSH
78489: CALL_OW 336
// end ; 4 :
78493: GO 78586
78495: LD_INT 4
78497: DOUBLE
78498: EQUAL
78499: IFTRUE 78503
78501: GO 78564
78503: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
78504: LD_ADDR_VAR 0 2
78508: PUSH
78509: LD_INT 22
78511: PUSH
78512: LD_OWVAR 2
78516: PUSH
78517: EMPTY
78518: LIST
78519: LIST
78520: PUSH
78521: LD_INT 30
78523: PUSH
78524: LD_INT 29
78526: PUSH
78527: EMPTY
78528: LIST
78529: LIST
78530: PUSH
78531: EMPTY
78532: LIST
78533: LIST
78534: PPUSH
78535: CALL_OW 69
78539: ST_TO_ADDR
// if not tmp then
78540: LD_VAR 0 2
78544: NOT
78545: IFFALSE 78549
// exit ;
78547: GO 78586
// DestroyUnit ( tmp [ 1 ] ) ;
78549: LD_VAR 0 2
78553: PUSH
78554: LD_INT 1
78556: ARRAY
78557: PPUSH
78558: CALL_OW 65
// end ; 5 .. 7 :
78562: GO 78586
78564: LD_INT 5
78566: DOUBLE
78567: GREATEREQUAL
78568: IFFALSE 78576
78570: LD_INT 7
78572: DOUBLE
78573: LESSEQUAL
78574: IFTRUE 78578
78576: GO 78585
78578: POP
// StreamSibBomb ; end ;
78579: CALL 74836 0 0
78583: GO 78586
78585: POP
// end ;
78586: PPOPN 3
78588: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
78589: LD_EXP 106
78593: PUSH
78594: LD_EXP 156
78598: AND
78599: IFFALSE 78755
78601: GO 78603
78603: DISABLE
78604: LD_INT 0
78606: PPUSH
78607: PPUSH
78608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
78609: LD_ADDR_VAR 0 2
78613: PUSH
78614: LD_INT 81
78616: PUSH
78617: LD_OWVAR 2
78621: PUSH
78622: EMPTY
78623: LIST
78624: LIST
78625: PUSH
78626: LD_INT 2
78628: PUSH
78629: LD_INT 21
78631: PUSH
78632: LD_INT 1
78634: PUSH
78635: EMPTY
78636: LIST
78637: LIST
78638: PUSH
78639: LD_INT 21
78641: PUSH
78642: LD_INT 2
78644: PUSH
78645: EMPTY
78646: LIST
78647: LIST
78648: PUSH
78649: EMPTY
78650: LIST
78651: LIST
78652: LIST
78653: PUSH
78654: EMPTY
78655: LIST
78656: LIST
78657: PPUSH
78658: CALL_OW 69
78662: ST_TO_ADDR
// if not tmp then
78663: LD_VAR 0 2
78667: NOT
78668: IFFALSE 78672
// exit ;
78670: GO 78755
// p := 0 ;
78672: LD_ADDR_VAR 0 3
78676: PUSH
78677: LD_INT 0
78679: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
78680: LD_INT 35
78682: PPUSH
78683: CALL_OW 67
// p := p + 1 ;
78687: LD_ADDR_VAR 0 3
78691: PUSH
78692: LD_VAR 0 3
78696: PUSH
78697: LD_INT 1
78699: PLUS
78700: ST_TO_ADDR
// for i in tmp do
78701: LD_ADDR_VAR 0 1
78705: PUSH
78706: LD_VAR 0 2
78710: PUSH
78711: FOR_IN
78712: IFFALSE 78743
// if GetLives ( i ) < 1000 then
78714: LD_VAR 0 1
78718: PPUSH
78719: CALL_OW 256
78723: PUSH
78724: LD_INT 1000
78726: LESS
78727: IFFALSE 78741
// SetLives ( i , 1000 ) ;
78729: LD_VAR 0 1
78733: PPUSH
78734: LD_INT 1000
78736: PPUSH
78737: CALL_OW 234
78741: GO 78711
78743: POP
78744: POP
// until p > 20 ;
78745: LD_VAR 0 3
78749: PUSH
78750: LD_INT 20
78752: GREATER
78753: IFFALSE 78680
// end ;
78755: PPOPN 3
78757: END
// every 0 0$1 trigger StreamModeActive and sTime do
78758: LD_EXP 106
78762: PUSH
78763: LD_EXP 157
78767: AND
78768: IFFALSE 78803
78770: GO 78772
78772: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
78773: LD_INT 28
78775: PPUSH
78776: LD_OWVAR 2
78780: PPUSH
78781: LD_INT 2
78783: PPUSH
78784: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
78788: LD_INT 30
78790: PPUSH
78791: LD_OWVAR 2
78795: PPUSH
78796: LD_INT 2
78798: PPUSH
78799: CALL_OW 322
// end ;
78803: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
78804: LD_EXP 106
78808: PUSH
78809: LD_EXP 158
78813: AND
78814: IFFALSE 78935
78816: GO 78818
78818: DISABLE
78819: LD_INT 0
78821: PPUSH
78822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78823: LD_ADDR_VAR 0 2
78827: PUSH
78828: LD_INT 22
78830: PUSH
78831: LD_OWVAR 2
78835: PUSH
78836: EMPTY
78837: LIST
78838: LIST
78839: PUSH
78840: LD_INT 21
78842: PUSH
78843: LD_INT 1
78845: PUSH
78846: EMPTY
78847: LIST
78848: LIST
78849: PUSH
78850: LD_INT 3
78852: PUSH
78853: LD_INT 23
78855: PUSH
78856: LD_INT 0
78858: PUSH
78859: EMPTY
78860: LIST
78861: LIST
78862: PUSH
78863: EMPTY
78864: LIST
78865: LIST
78866: PUSH
78867: EMPTY
78868: LIST
78869: LIST
78870: LIST
78871: PPUSH
78872: CALL_OW 69
78876: ST_TO_ADDR
// if not tmp then
78877: LD_VAR 0 2
78881: NOT
78882: IFFALSE 78886
// exit ;
78884: GO 78935
// for i in tmp do
78886: LD_ADDR_VAR 0 1
78890: PUSH
78891: LD_VAR 0 2
78895: PUSH
78896: FOR_IN
78897: IFFALSE 78933
// begin if Crawls ( i ) then
78899: LD_VAR 0 1
78903: PPUSH
78904: CALL_OW 318
78908: IFFALSE 78919
// ComWalk ( i ) ;
78910: LD_VAR 0 1
78914: PPUSH
78915: CALL_OW 138
// SetClass ( i , 2 ) ;
78919: LD_VAR 0 1
78923: PPUSH
78924: LD_INT 2
78926: PPUSH
78927: CALL_OW 336
// end ;
78931: GO 78896
78933: POP
78934: POP
// end ;
78935: PPOPN 2
78937: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
78938: LD_EXP 106
78942: PUSH
78943: LD_EXP 159
78947: AND
78948: IFFALSE 79229
78950: GO 78952
78952: DISABLE
78953: LD_INT 0
78955: PPUSH
78956: PPUSH
78957: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
78958: LD_OWVAR 2
78962: PPUSH
78963: LD_INT 9
78965: PPUSH
78966: LD_INT 1
78968: PPUSH
78969: LD_INT 1
78971: PPUSH
78972: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
78976: LD_INT 9
78978: PPUSH
78979: LD_OWVAR 2
78983: PPUSH
78984: CALL_OW 343
// uc_side := 9 ;
78988: LD_ADDR_OWVAR 20
78992: PUSH
78993: LD_INT 9
78995: ST_TO_ADDR
// uc_nation := 2 ;
78996: LD_ADDR_OWVAR 21
79000: PUSH
79001: LD_INT 2
79003: ST_TO_ADDR
// hc_name := Dark Warrior ;
79004: LD_ADDR_OWVAR 26
79008: PUSH
79009: LD_STRING Dark Warrior
79011: ST_TO_ADDR
// hc_gallery :=  ;
79012: LD_ADDR_OWVAR 33
79016: PUSH
79017: LD_STRING 
79019: ST_TO_ADDR
// hc_noskilllimit := true ;
79020: LD_ADDR_OWVAR 76
79024: PUSH
79025: LD_INT 1
79027: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
79028: LD_ADDR_OWVAR 31
79032: PUSH
79033: LD_INT 30
79035: PUSH
79036: LD_INT 30
79038: PUSH
79039: LD_INT 30
79041: PUSH
79042: LD_INT 30
79044: PUSH
79045: EMPTY
79046: LIST
79047: LIST
79048: LIST
79049: LIST
79050: ST_TO_ADDR
// un := CreateHuman ;
79051: LD_ADDR_VAR 0 3
79055: PUSH
79056: CALL_OW 44
79060: ST_TO_ADDR
// hc_noskilllimit := false ;
79061: LD_ADDR_OWVAR 76
79065: PUSH
79066: LD_INT 0
79068: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
79069: LD_VAR 0 3
79073: PPUSH
79074: LD_INT 1
79076: PPUSH
79077: CALL_OW 51
// p := 0 ;
79081: LD_ADDR_VAR 0 2
79085: PUSH
79086: LD_INT 0
79088: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
79089: LD_INT 35
79091: PPUSH
79092: CALL_OW 67
// p := p + 1 ;
79096: LD_ADDR_VAR 0 2
79100: PUSH
79101: LD_VAR 0 2
79105: PUSH
79106: LD_INT 1
79108: PLUS
79109: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
79110: LD_VAR 0 3
79114: PPUSH
79115: CALL_OW 256
79119: PUSH
79120: LD_INT 1000
79122: LESS
79123: IFFALSE 79137
// SetLives ( un , 1000 ) ;
79125: LD_VAR 0 3
79129: PPUSH
79130: LD_INT 1000
79132: PPUSH
79133: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
79137: LD_VAR 0 3
79141: PPUSH
79142: LD_INT 81
79144: PUSH
79145: LD_OWVAR 2
79149: PUSH
79150: EMPTY
79151: LIST
79152: LIST
79153: PUSH
79154: LD_INT 91
79156: PUSH
79157: LD_VAR 0 3
79161: PUSH
79162: LD_INT 30
79164: PUSH
79165: EMPTY
79166: LIST
79167: LIST
79168: LIST
79169: PUSH
79170: EMPTY
79171: LIST
79172: LIST
79173: PPUSH
79174: CALL_OW 69
79178: PPUSH
79179: LD_VAR 0 3
79183: PPUSH
79184: CALL_OW 74
79188: PPUSH
79189: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
79193: LD_VAR 0 2
79197: PUSH
79198: LD_INT 60
79200: GREATER
79201: PUSH
79202: LD_VAR 0 3
79206: PPUSH
79207: CALL_OW 301
79211: OR
79212: IFFALSE 79089
// if un then
79214: LD_VAR 0 3
79218: IFFALSE 79229
// RemoveUnit ( un ) ;
79220: LD_VAR 0 3
79224: PPUSH
79225: CALL_OW 64
// end ;
79229: PPOPN 3
79231: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
79232: LD_INT 0
79234: PPUSH
79235: PPUSH
79236: PPUSH
79237: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79238: LD_ADDR_VAR 0 4
79242: PUSH
79243: LD_INT 22
79245: PUSH
79246: LD_OWVAR 2
79250: PUSH
79251: EMPTY
79252: LIST
79253: LIST
79254: PUSH
79255: LD_INT 2
79257: PUSH
79258: LD_INT 30
79260: PUSH
79261: LD_INT 0
79263: PUSH
79264: EMPTY
79265: LIST
79266: LIST
79267: PUSH
79268: LD_INT 30
79270: PUSH
79271: LD_INT 1
79273: PUSH
79274: EMPTY
79275: LIST
79276: LIST
79277: PUSH
79278: EMPTY
79279: LIST
79280: LIST
79281: LIST
79282: PUSH
79283: EMPTY
79284: LIST
79285: LIST
79286: PPUSH
79287: CALL_OW 69
79291: ST_TO_ADDR
// if not tmp then
79292: LD_VAR 0 4
79296: NOT
79297: IFFALSE 79301
// exit ;
79299: GO 79360
// for i in tmp do
79301: LD_ADDR_VAR 0 2
79305: PUSH
79306: LD_VAR 0 4
79310: PUSH
79311: FOR_IN
79312: IFFALSE 79358
// for j = 1 to 3 do
79314: LD_ADDR_VAR 0 3
79318: PUSH
79319: DOUBLE
79320: LD_INT 1
79322: DEC
79323: ST_TO_ADDR
79324: LD_INT 3
79326: PUSH
79327: FOR_TO
79328: IFFALSE 79354
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
79330: LD_VAR 0 2
79334: PPUSH
79335: CALL_OW 274
79339: PPUSH
79340: LD_VAR 0 3
79344: PPUSH
79345: LD_INT 99999
79347: PPUSH
79348: CALL_OW 277
79352: GO 79327
79354: POP
79355: POP
79356: GO 79311
79358: POP
79359: POP
// end ;
79360: LD_VAR 0 1
79364: RET
// export function hHackSetLevel10 ; var i , j ; begin
79365: LD_INT 0
79367: PPUSH
79368: PPUSH
79369: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
79370: LD_ADDR_VAR 0 2
79374: PUSH
79375: LD_INT 21
79377: PUSH
79378: LD_INT 1
79380: PUSH
79381: EMPTY
79382: LIST
79383: LIST
79384: PPUSH
79385: CALL_OW 69
79389: PUSH
79390: FOR_IN
79391: IFFALSE 79443
// if IsSelected ( i ) then
79393: LD_VAR 0 2
79397: PPUSH
79398: CALL_OW 306
79402: IFFALSE 79441
// begin for j := 1 to 4 do
79404: LD_ADDR_VAR 0 3
79408: PUSH
79409: DOUBLE
79410: LD_INT 1
79412: DEC
79413: ST_TO_ADDR
79414: LD_INT 4
79416: PUSH
79417: FOR_TO
79418: IFFALSE 79439
// SetSkill ( i , j , 10 ) ;
79420: LD_VAR 0 2
79424: PPUSH
79425: LD_VAR 0 3
79429: PPUSH
79430: LD_INT 10
79432: PPUSH
79433: CALL_OW 237
79437: GO 79417
79439: POP
79440: POP
// end ;
79441: GO 79390
79443: POP
79444: POP
// end ;
79445: LD_VAR 0 1
79449: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
79450: LD_INT 0
79452: PPUSH
79453: PPUSH
79454: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
79455: LD_ADDR_VAR 0 2
79459: PUSH
79460: LD_INT 22
79462: PUSH
79463: LD_OWVAR 2
79467: PUSH
79468: EMPTY
79469: LIST
79470: LIST
79471: PUSH
79472: LD_INT 21
79474: PUSH
79475: LD_INT 1
79477: PUSH
79478: EMPTY
79479: LIST
79480: LIST
79481: PUSH
79482: EMPTY
79483: LIST
79484: LIST
79485: PPUSH
79486: CALL_OW 69
79490: PUSH
79491: FOR_IN
79492: IFFALSE 79533
// begin for j := 1 to 4 do
79494: LD_ADDR_VAR 0 3
79498: PUSH
79499: DOUBLE
79500: LD_INT 1
79502: DEC
79503: ST_TO_ADDR
79504: LD_INT 4
79506: PUSH
79507: FOR_TO
79508: IFFALSE 79529
// SetSkill ( i , j , 10 ) ;
79510: LD_VAR 0 2
79514: PPUSH
79515: LD_VAR 0 3
79519: PPUSH
79520: LD_INT 10
79522: PPUSH
79523: CALL_OW 237
79527: GO 79507
79529: POP
79530: POP
// end ;
79531: GO 79491
79533: POP
79534: POP
// end ;
79535: LD_VAR 0 1
79539: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
79540: LD_INT 0
79542: PPUSH
// uc_side := your_side ;
79543: LD_ADDR_OWVAR 20
79547: PUSH
79548: LD_OWVAR 2
79552: ST_TO_ADDR
// uc_nation := nation ;
79553: LD_ADDR_OWVAR 21
79557: PUSH
79558: LD_VAR 0 1
79562: ST_TO_ADDR
// InitHc ;
79563: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
79567: LD_INT 0
79569: PPUSH
79570: LD_VAR 0 2
79574: PPUSH
79575: LD_VAR 0 3
79579: PPUSH
79580: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
79584: CALL_OW 44
79588: PPUSH
79589: LD_INT 1
79591: PPUSH
79592: CALL_OW 51
// end ;
79596: LD_VAR 0 4
79600: RET
// export function hHackSpawnVehicle ; begin
79601: LD_INT 0
79603: PPUSH
// uc_side := your_side ;
79604: LD_ADDR_OWVAR 20
79608: PUSH
79609: LD_OWVAR 2
79613: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
79614: LD_ADDR_OWVAR 21
79618: PUSH
79619: LD_INT 1
79621: PPUSH
79622: LD_INT 3
79624: PPUSH
79625: CALL_OW 12
79629: ST_TO_ADDR
// InitVc ;
79630: CALL_OW 20
// case uc_nation of 1 :
79634: LD_OWVAR 21
79638: PUSH
79639: LD_INT 1
79641: DOUBLE
79642: EQUAL
79643: IFTRUE 79647
79645: GO 79791
79647: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
79648: LD_ADDR_OWVAR 37
79652: PUSH
79653: LD_INT 1
79655: PUSH
79656: LD_INT 2
79658: PUSH
79659: LD_INT 3
79661: PUSH
79662: LD_INT 4
79664: PUSH
79665: LD_INT 5
79667: PUSH
79668: EMPTY
79669: LIST
79670: LIST
79671: LIST
79672: LIST
79673: LIST
79674: PUSH
79675: LD_INT 1
79677: PPUSH
79678: LD_INT 5
79680: PPUSH
79681: CALL_OW 12
79685: ARRAY
79686: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
79687: LD_ADDR_OWVAR 39
79691: PUSH
79692: LD_INT 1
79694: PPUSH
79695: LD_INT 3
79697: PPUSH
79698: CALL_OW 12
79702: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
79703: LD_ADDR_OWVAR 38
79707: PUSH
79708: LD_INT 1
79710: PUSH
79711: LD_INT 2
79713: PUSH
79714: LD_INT 3
79716: PUSH
79717: EMPTY
79718: LIST
79719: LIST
79720: LIST
79721: PUSH
79722: LD_INT 1
79724: PPUSH
79725: LD_INT 3
79727: PPUSH
79728: CALL_OW 12
79732: ARRAY
79733: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
79734: LD_ADDR_OWVAR 40
79738: PUSH
79739: LD_INT 2
79741: PUSH
79742: LD_INT 4
79744: PUSH
79745: LD_INT 5
79747: PUSH
79748: LD_INT 3
79750: PUSH
79751: LD_INT 7
79753: PUSH
79754: LD_INT 8
79756: PUSH
79757: LD_INT 9
79759: PUSH
79760: LD_INT 10
79762: PUSH
79763: LD_INT 6
79765: PUSH
79766: EMPTY
79767: LIST
79768: LIST
79769: LIST
79770: LIST
79771: LIST
79772: LIST
79773: LIST
79774: LIST
79775: LIST
79776: PUSH
79777: LD_INT 1
79779: PPUSH
79780: LD_INT 9
79782: PPUSH
79783: CALL_OW 12
79787: ARRAY
79788: ST_TO_ADDR
// end ; 2 :
79789: GO 80056
79791: LD_INT 2
79793: DOUBLE
79794: EQUAL
79795: IFTRUE 79799
79797: GO 79923
79799: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
79800: LD_ADDR_OWVAR 37
79804: PUSH
79805: LD_INT 11
79807: PUSH
79808: LD_INT 12
79810: PUSH
79811: LD_INT 13
79813: PUSH
79814: LD_INT 14
79816: PUSH
79817: EMPTY
79818: LIST
79819: LIST
79820: LIST
79821: LIST
79822: PUSH
79823: LD_INT 1
79825: PPUSH
79826: LD_INT 4
79828: PPUSH
79829: CALL_OW 12
79833: ARRAY
79834: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
79835: LD_ADDR_OWVAR 39
79839: PUSH
79840: LD_INT 1
79842: PPUSH
79843: LD_INT 3
79845: PPUSH
79846: CALL_OW 12
79850: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
79851: LD_ADDR_OWVAR 38
79855: PUSH
79856: LD_INT 1
79858: PUSH
79859: LD_INT 2
79861: PUSH
79862: LD_INT 5
79864: PUSH
79865: EMPTY
79866: LIST
79867: LIST
79868: LIST
79869: PUSH
79870: LD_INT 1
79872: PPUSH
79873: LD_INT 3
79875: PPUSH
79876: CALL_OW 12
79880: ARRAY
79881: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
79882: LD_ADDR_OWVAR 40
79886: PUSH
79887: LD_INT 24
79889: PUSH
79890: LD_INT 26
79892: PUSH
79893: LD_INT 27
79895: PUSH
79896: LD_INT 28
79898: PUSH
79899: LD_INT 29
79901: PUSH
79902: EMPTY
79903: LIST
79904: LIST
79905: LIST
79906: LIST
79907: LIST
79908: PUSH
79909: LD_INT 1
79911: PPUSH
79912: LD_INT 5
79914: PPUSH
79915: CALL_OW 12
79919: ARRAY
79920: ST_TO_ADDR
// end ; 3 :
79921: GO 80056
79923: LD_INT 3
79925: DOUBLE
79926: EQUAL
79927: IFTRUE 79931
79929: GO 80055
79931: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
79932: LD_ADDR_OWVAR 37
79936: PUSH
79937: LD_INT 21
79939: PUSH
79940: LD_INT 23
79942: PUSH
79943: LD_INT 22
79945: PUSH
79946: LD_INT 24
79948: PUSH
79949: EMPTY
79950: LIST
79951: LIST
79952: LIST
79953: LIST
79954: PUSH
79955: LD_INT 1
79957: PPUSH
79958: LD_INT 4
79960: PPUSH
79961: CALL_OW 12
79965: ARRAY
79966: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
79967: LD_ADDR_OWVAR 39
79971: PUSH
79972: LD_INT 1
79974: PPUSH
79975: LD_INT 3
79977: PPUSH
79978: CALL_OW 12
79982: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
79983: LD_ADDR_OWVAR 38
79987: PUSH
79988: LD_INT 1
79990: PUSH
79991: LD_INT 3
79993: PUSH
79994: EMPTY
79995: LIST
79996: LIST
79997: PUSH
79998: LD_INT 1
80000: PPUSH
80001: LD_INT 2
80003: PPUSH
80004: CALL_OW 12
80008: ARRAY
80009: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
80010: LD_ADDR_OWVAR 40
80014: PUSH
80015: LD_INT 42
80017: PUSH
80018: LD_INT 43
80020: PUSH
80021: LD_INT 44
80023: PUSH
80024: LD_INT 46
80026: PUSH
80027: LD_INT 48
80029: PUSH
80030: LD_INT 47
80032: PUSH
80033: EMPTY
80034: LIST
80035: LIST
80036: LIST
80037: LIST
80038: LIST
80039: LIST
80040: PUSH
80041: LD_INT 1
80043: PPUSH
80044: LD_INT 6
80046: PPUSH
80047: CALL_OW 12
80051: ARRAY
80052: ST_TO_ADDR
// end ; end ;
80053: GO 80056
80055: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
80056: CALL_OW 45
80060: PPUSH
80061: LD_INT 1
80063: PPUSH
80064: CALL_OW 51
// end ;
80068: LD_VAR 0 1
80072: RET
// export hInvincible ; every 1 do
80073: GO 80075
80075: DISABLE
// hInvincible := [ ] ;
80076: LD_ADDR_EXP 160
80080: PUSH
80081: EMPTY
80082: ST_TO_ADDR
80083: END
// every 10 do var i ;
80084: GO 80086
80086: DISABLE
80087: LD_INT 0
80089: PPUSH
// begin enable ;
80090: ENABLE
// if not hInvincible then
80091: LD_EXP 160
80095: NOT
80096: IFFALSE 80100
// exit ;
80098: GO 80144
// for i in hInvincible do
80100: LD_ADDR_VAR 0 1
80104: PUSH
80105: LD_EXP 160
80109: PUSH
80110: FOR_IN
80111: IFFALSE 80142
// if GetLives ( i ) < 1000 then
80113: LD_VAR 0 1
80117: PPUSH
80118: CALL_OW 256
80122: PUSH
80123: LD_INT 1000
80125: LESS
80126: IFFALSE 80140
// SetLives ( i , 1000 ) ;
80128: LD_VAR 0 1
80132: PPUSH
80133: LD_INT 1000
80135: PPUSH
80136: CALL_OW 234
80140: GO 80110
80142: POP
80143: POP
// end ;
80144: PPOPN 1
80146: END
// export function hHackInvincible ; var i ; begin
80147: LD_INT 0
80149: PPUSH
80150: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
80151: LD_ADDR_VAR 0 2
80155: PUSH
80156: LD_INT 2
80158: PUSH
80159: LD_INT 21
80161: PUSH
80162: LD_INT 1
80164: PUSH
80165: EMPTY
80166: LIST
80167: LIST
80168: PUSH
80169: LD_INT 21
80171: PUSH
80172: LD_INT 2
80174: PUSH
80175: EMPTY
80176: LIST
80177: LIST
80178: PUSH
80179: EMPTY
80180: LIST
80181: LIST
80182: LIST
80183: PPUSH
80184: CALL_OW 69
80188: PUSH
80189: FOR_IN
80190: IFFALSE 80251
// if IsSelected ( i ) then
80192: LD_VAR 0 2
80196: PPUSH
80197: CALL_OW 306
80201: IFFALSE 80249
// begin if i in hInvincible then
80203: LD_VAR 0 2
80207: PUSH
80208: LD_EXP 160
80212: IN
80213: IFFALSE 80233
// hInvincible := hInvincible diff i else
80215: LD_ADDR_EXP 160
80219: PUSH
80220: LD_EXP 160
80224: PUSH
80225: LD_VAR 0 2
80229: DIFF
80230: ST_TO_ADDR
80231: GO 80249
// hInvincible := hInvincible union i ;
80233: LD_ADDR_EXP 160
80237: PUSH
80238: LD_EXP 160
80242: PUSH
80243: LD_VAR 0 2
80247: UNION
80248: ST_TO_ADDR
// end ;
80249: GO 80189
80251: POP
80252: POP
// end ;
80253: LD_VAR 0 1
80257: RET
// export function hHackInvisible ; var i , j ; begin
80258: LD_INT 0
80260: PPUSH
80261: PPUSH
80262: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
80263: LD_ADDR_VAR 0 2
80267: PUSH
80268: LD_INT 21
80270: PUSH
80271: LD_INT 1
80273: PUSH
80274: EMPTY
80275: LIST
80276: LIST
80277: PPUSH
80278: CALL_OW 69
80282: PUSH
80283: FOR_IN
80284: IFFALSE 80308
// if IsSelected ( i ) then
80286: LD_VAR 0 2
80290: PPUSH
80291: CALL_OW 306
80295: IFFALSE 80306
// ComForceInvisible ( i ) ;
80297: LD_VAR 0 2
80301: PPUSH
80302: CALL_OW 496
80306: GO 80283
80308: POP
80309: POP
// end ;
80310: LD_VAR 0 1
80314: RET
// export function hHackChangeYourSide ; begin
80315: LD_INT 0
80317: PPUSH
// if your_side = 8 then
80318: LD_OWVAR 2
80322: PUSH
80323: LD_INT 8
80325: EQUAL
80326: IFFALSE 80338
// your_side := 0 else
80328: LD_ADDR_OWVAR 2
80332: PUSH
80333: LD_INT 0
80335: ST_TO_ADDR
80336: GO 80352
// your_side := your_side + 1 ;
80338: LD_ADDR_OWVAR 2
80342: PUSH
80343: LD_OWVAR 2
80347: PUSH
80348: LD_INT 1
80350: PLUS
80351: ST_TO_ADDR
// end ;
80352: LD_VAR 0 1
80356: RET
// export function hHackChangeUnitSide ; var i , j ; begin
80357: LD_INT 0
80359: PPUSH
80360: PPUSH
80361: PPUSH
// for i in all_units do
80362: LD_ADDR_VAR 0 2
80366: PUSH
80367: LD_OWVAR 3
80371: PUSH
80372: FOR_IN
80373: IFFALSE 80451
// if IsSelected ( i ) then
80375: LD_VAR 0 2
80379: PPUSH
80380: CALL_OW 306
80384: IFFALSE 80449
// begin j := GetSide ( i ) ;
80386: LD_ADDR_VAR 0 3
80390: PUSH
80391: LD_VAR 0 2
80395: PPUSH
80396: CALL_OW 255
80400: ST_TO_ADDR
// if j = 8 then
80401: LD_VAR 0 3
80405: PUSH
80406: LD_INT 8
80408: EQUAL
80409: IFFALSE 80421
// j := 0 else
80411: LD_ADDR_VAR 0 3
80415: PUSH
80416: LD_INT 0
80418: ST_TO_ADDR
80419: GO 80435
// j := j + 1 ;
80421: LD_ADDR_VAR 0 3
80425: PUSH
80426: LD_VAR 0 3
80430: PUSH
80431: LD_INT 1
80433: PLUS
80434: ST_TO_ADDR
// SetSide ( i , j ) ;
80435: LD_VAR 0 2
80439: PPUSH
80440: LD_VAR 0 3
80444: PPUSH
80445: CALL_OW 235
// end ;
80449: GO 80372
80451: POP
80452: POP
// end ;
80453: LD_VAR 0 1
80457: RET
// export function hHackFog ; begin
80458: LD_INT 0
80460: PPUSH
// FogOff ( true ) ;
80461: LD_INT 1
80463: PPUSH
80464: CALL_OW 344
// end ;
80468: LD_VAR 0 1
80472: RET
// export function hHackApeman ; begin
80473: LD_INT 0
80475: PPUSH
// uc_side := your_side ;
80476: LD_ADDR_OWVAR 20
80480: PUSH
80481: LD_OWVAR 2
80485: ST_TO_ADDR
// uc_nation := 0 ;
80486: LD_ADDR_OWVAR 21
80490: PUSH
80491: LD_INT 0
80493: ST_TO_ADDR
// hc_name :=  ;
80494: LD_ADDR_OWVAR 26
80498: PUSH
80499: LD_STRING 
80501: ST_TO_ADDR
// hc_gallery :=  ;
80502: LD_ADDR_OWVAR 33
80506: PUSH
80507: LD_STRING 
80509: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
80510: LD_ADDR_OWVAR 31
80514: PUSH
80515: LD_INT 0
80517: PUSH
80518: LD_INT 0
80520: PUSH
80521: LD_INT 0
80523: PUSH
80524: LD_INT 0
80526: PUSH
80527: EMPTY
80528: LIST
80529: LIST
80530: LIST
80531: LIST
80532: ST_TO_ADDR
// hc_class := class_apeman ;
80533: LD_ADDR_OWVAR 28
80537: PUSH
80538: LD_INT 12
80540: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
80541: CALL_OW 44
80545: PPUSH
80546: LD_INT 1
80548: PPUSH
80549: CALL_OW 51
// end ;
80553: LD_VAR 0 1
80557: RET
// export function hHackBoom ; begin
80558: LD_INT 0
80560: PPUSH
// uc_side := your_side ;
80561: LD_ADDR_OWVAR 20
80565: PUSH
80566: LD_OWVAR 2
80570: ST_TO_ADDR
// uc_nation := 1 ;
80571: LD_ADDR_OWVAR 21
80575: PUSH
80576: LD_INT 1
80578: ST_TO_ADDR
// vc_chassis := us_morphling ;
80579: LD_ADDR_OWVAR 37
80583: PUSH
80584: LD_INT 5
80586: ST_TO_ADDR
// vc_engine := engine_siberite ;
80587: LD_ADDR_OWVAR 39
80591: PUSH
80592: LD_INT 3
80594: ST_TO_ADDR
// vc_control := control_computer ;
80595: LD_ADDR_OWVAR 38
80599: PUSH
80600: LD_INT 3
80602: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
80603: LD_ADDR_OWVAR 40
80607: PUSH
80608: LD_INT 8
80610: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
80611: CALL_OW 45
80615: PPUSH
80616: LD_INT 1
80618: PPUSH
80619: CALL_OW 51
// end ;
80623: LD_VAR 0 1
80627: RET
