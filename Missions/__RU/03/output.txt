// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export meetBelkovBrother ; export cratesResources , oilResources ; export vehiclesPreviousMission ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinOpinion , platonovOpinion ; export canDestroyBeriaBase ; export enableOmicronAI ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 302 0 0
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_MeetBelkovBrother_6
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// cratesResources = LoadVariable ( 02_BeriaResourceCrates_7 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 02_BeriaResourceCrates_7
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// oilResources = LoadVariable ( 02_BeriaResourceOil_8 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_BeriaResourceOil_8
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// vehiclesPreviousMission = LoadVariable ( 02_Vehicles_1 , 0 ) ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_STRING 02_Vehicles_1
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  88: LD_ADDR_EXP 27
  92: PUSH
  93: LD_STRING 02_PlatonovOpinion_9
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// kurinOpinion = - 1 ;
 104: LD_ADDR_EXP 26
 108: PUSH
 109: LD_INT 1
 111: NEG
 112: ST_TO_ADDR
// scholtzeSpawned = false ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// scholtzeSaved = false ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// americanTroopsArriveOmicronCounter = 0 ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// spawnCrates = true ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 1
 144: ST_TO_ADDR
// dialog_track = false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// dialog_workshop = false ;
 153: LD_ADDR_EXP 8
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// dialog_stop = false ;
 161: LD_ADDR_EXP 11
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// counterEnable = false ;
 169: LD_ADDR_EXP 86
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// extraTime = 7 7$00 ;
 177: LD_ADDR_EXP 14
 181: PUSH
 182: LD_INT 14700
 184: ST_TO_ADDR
// kurinGiveMoreTime = false ;
 185: LD_ADDR_EXP 13
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 4200
 200: ST_TO_ADDR
// produceOnlyForYou = false ;
 201: LD_ADDR_EXP 17
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// produceMoreVehicles = false ;
 209: LD_ADDR_EXP 16
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// kurinCheckVehicles = false ;
 217: LD_ADDR_EXP 18
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omicronSurrender = false ;
 225: LD_ADDR_EXP 23
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// canExitBattlefield = true ;
 233: LD_ADDR_EXP 24
 237: PUSH
 238: LD_INT 1
 240: ST_TO_ADDR
// immortalSurvivors = false ;
 241: LD_ADDR_EXP 25
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// canDestroyBeriaBase = false ;
 249: LD_ADDR_EXP 28
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// kirovFactory = 0 ;
 257: LD_ADDR_EXP 21
 261: PUSH
 262: LD_INT 0
 264: ST_TO_ADDR
// kirovCompleteFactory = false ;
 265: LD_ADDR_EXP 22
 269: PUSH
 270: LD_INT 0
 272: ST_TO_ADDR
// enableOmicronAI = true ;
 273: LD_ADDR_EXP 29
 277: PUSH
 278: LD_INT 1
 280: ST_TO_ADDR
// PrepareRussians ;
 281: CALL 925 0 0
// PrepareAmericans ;
 285: CALL 5369 0 0
// Nef_PrepareNature ;
 289: CALL 27677 0 0
// MissionIntro ;
 293: CALL 20334 0 0
// end ; end_of_file
 297: LD_VAR 0 1
 301: RET
// export function InitMapConfig ; begin
 302: LD_INT 0
 304: PPUSH
// BaseMapConfig ;
 305: CALL 318 0 0
// MissionMapConfig ;
 309: CALL 420 0 0
// end ;
 313: LD_VAR 0 1
 317: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 318: LD_INT 0
 320: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 3 ] ;
 321: LD_ADDR_EXP 30
 325: PUSH
 326: LD_INT 8
 328: PUSH
 329: LD_INT 12
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: LIST
 346: LIST
 347: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 348: LD_ADDR_EXP 31
 352: PUSH
 353: LD_INT 2
 355: PUSH
 356: LD_INT 2
 358: PUSH
 359: LD_INT 2
 361: PUSH
 362: LD_INT 2
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: LIST
 369: LIST
 370: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 371: LD_ADDR_EXP 32
 375: PUSH
 376: LD_INT 5
 378: NEG
 379: PPUSH
 380: LD_INT 5
 382: PPUSH
 383: CALL_OW 12
 387: PUSH
 388: EMPTY
 389: LIST
 390: ST_TO_ADDR
// debugMode = 0 ;
 391: LD_ADDR_EXP 35
 395: PUSH
 396: LD_INT 0
 398: ST_TO_ADDR
// missionPrefix = 03_ ;
 399: LD_ADDR_EXP 33
 403: PUSH
 404: LD_STRING 03_
 406: ST_TO_ADDR
// previousMissionPrefix = 02_ ;
 407: LD_ADDR_EXP 34
 411: PUSH
 412: LD_STRING 02_
 414: ST_TO_ADDR
// end ;
 415: LD_VAR 0 1
 419: RET
// export baseUnitsToChoose , scholtzeSpawnPositions ; export timeToPrepareAttack ; export bonusResourcesCrates , bonusResourcesOil ; export enemySkillLevel ; export americanWeapons , russianWeapons ; export maxAmericanTroopsIgnore ; export animalsSafeTime ; function MissionMapConfig ; begin
 420: LD_INT 0
 422: PPUSH
// baseUnitsToChoose = [ 7 , 6 , 6 ] [ Difficulty ] ;
 423: LD_ADDR_EXP 36
 427: PUSH
 428: LD_INT 7
 430: PUSH
 431: LD_INT 6
 433: PUSH
 434: LD_INT 6
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: LIST
 441: PUSH
 442: LD_OWVAR 67
 446: ARRAY
 447: ST_TO_ADDR
// timeToPrepareAttack = [ 40 40$0 , 35 35$0 , 30 30$0 ] [ Difficulty ] ;
 448: LD_ADDR_EXP 38
 452: PUSH
 453: LD_INT 84000
 455: PUSH
 456: LD_INT 73500
 458: PUSH
 459: LD_INT 63000
 461: PUSH
 462: EMPTY
 463: LIST
 464: LIST
 465: LIST
 466: PUSH
 467: LD_OWVAR 67
 471: ARRAY
 472: ST_TO_ADDR
// bonusResourcesCrates = [ 150 , 100 , 50 ] [ Difficulty ] ;
 473: LD_ADDR_EXP 39
 477: PUSH
 478: LD_INT 150
 480: PUSH
 481: LD_INT 100
 483: PUSH
 484: LD_INT 50
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_OWVAR 67
 496: ARRAY
 497: ST_TO_ADDR
// bonusResourcesOil = [ 100 , 50 , 0 ] [ Difficulty ] ;
 498: LD_ADDR_EXP 40
 502: PUSH
 503: LD_INT 100
 505: PUSH
 506: LD_INT 50
 508: PUSH
 509: LD_INT 0
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: PUSH
 517: LD_OWVAR 67
 521: ARRAY
 522: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 523: LD_ADDR_EXP 41
 527: PUSH
 528: LD_INT 1
 530: PUSH
 531: LD_INT 2
 533: PUSH
 534: LD_INT 2
 536: PUSH
 537: EMPTY
 538: LIST
 539: LIST
 540: LIST
 541: PUSH
 542: LD_OWVAR 67
 546: ARRAY
 547: ST_TO_ADDR
// maxAmericanTroopsIgnore = [ 8 , 6 , 5 ] [ Difficulty ] ;
 548: LD_ADDR_EXP 44
 552: PUSH
 553: LD_INT 8
 555: PUSH
 556: LD_INT 6
 558: PUSH
 559: LD_INT 5
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: LIST
 566: PUSH
 567: LD_OWVAR 67
 571: ARRAY
 572: ST_TO_ADDR
// animalsSafeTime = [ 8 8$30 , 8 8$00 , 7 7$30 ] [ Difficulty ] ;
 573: LD_ADDR_EXP 45
 577: PUSH
 578: LD_INT 17850
 580: PUSH
 581: LD_INT 16800
 583: PUSH
 584: LD_INT 15750
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: LIST
 591: PUSH
 592: LD_OWVAR 67
 596: ARRAY
 597: ST_TO_ADDR
// end ;
 598: LD_VAR 0 1
 602: RET
// every 0 0$1 trigger debugMode do var i ;
 603: LD_EXP 35
 607: IFFALSE 922
 609: GO 611
 611: DISABLE
 612: LD_INT 0
 614: PPUSH
// begin enable ;
 615: ENABLE
// FogOff ( your_side ) ;
 616: LD_OWVAR 2
 620: PPUSH
 621: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 625: LD_ADDR_VAR 0 1
 629: PUSH
 630: LD_INT 22
 632: PUSH
 633: LD_OWVAR 2
 637: PUSH
 638: EMPTY
 639: LIST
 640: LIST
 641: PUSH
 642: LD_INT 2
 644: PUSH
 645: LD_INT 21
 647: PUSH
 648: LD_INT 1
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: PUSH
 655: LD_INT 21
 657: PUSH
 658: LD_INT 2
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PPUSH
 674: CALL_OW 69
 678: PUSH
 679: FOR_IN
 680: IFFALSE 696
// SetLives ( i , 1000 ) ;
 682: LD_VAR 0 1
 686: PPUSH
 687: LD_INT 1000
 689: PPUSH
 690: CALL_OW 234
 694: GO 679
 696: POP
 697: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 698: LD_ADDR_VAR 0 1
 702: PUSH
 703: LD_INT 22
 705: PUSH
 706: LD_OWVAR 2
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: PUSH
 715: LD_INT 21
 717: PUSH
 718: LD_INT 1
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: PPUSH
 729: CALL_OW 69
 733: PUSH
 734: FOR_IN
 735: IFFALSE 799
// begin SetSkill ( i , skill_combat , 10 ) ;
 737: LD_VAR 0 1
 741: PPUSH
 742: LD_INT 1
 744: PPUSH
 745: LD_INT 10
 747: PPUSH
 748: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 752: LD_VAR 0 1
 756: PPUSH
 757: LD_INT 2
 759: PPUSH
 760: LD_INT 10
 762: PPUSH
 763: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 767: LD_VAR 0 1
 771: PPUSH
 772: LD_INT 3
 774: PPUSH
 775: LD_INT 10
 777: PPUSH
 778: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 782: LD_VAR 0 1
 786: PPUSH
 787: LD_INT 4
 789: PPUSH
 790: LD_INT 10
 792: PPUSH
 793: CALL_OW 237
// end ;
 797: GO 734
 799: POP
 800: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 801: LD_ADDR_VAR 0 1
 805: PUSH
 806: LD_INT 22
 808: PUSH
 809: LD_OWVAR 2
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: PUSH
 818: LD_INT 2
 820: PUSH
 821: LD_INT 30
 823: PUSH
 824: LD_INT 0
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PUSH
 831: LD_INT 30
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: LIST
 845: PUSH
 846: EMPTY
 847: LIST
 848: LIST
 849: PPUSH
 850: CALL_OW 69
 854: PUSH
 855: FOR_IN
 856: IFFALSE 920
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 858: LD_VAR 0 1
 862: PPUSH
 863: CALL_OW 274
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: LD_INT 9999
 873: PPUSH
 874: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 878: LD_VAR 0 1
 882: PPUSH
 883: CALL_OW 274
 887: PPUSH
 888: LD_INT 2
 890: PPUSH
 891: LD_INT 9999
 893: PPUSH
 894: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 898: LD_VAR 0 1
 902: PPUSH
 903: CALL_OW 274
 907: PPUSH
 908: LD_INT 3
 910: PPUSH
 911: LD_INT 9999
 913: PPUSH
 914: CALL_OW 277
// end ;
 918: GO 855
 920: POP
 921: POP
// end ; end_of_file
 922: PPOPN 1
 924: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 ; export Scholtze ; export other_survivors ; export playerVehicles ; export otherBeriaUnits , beriaBase , beriaDepot ; export Kurin , Popov , BelkovDialog ; export ruScout ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot ; export ru2_bar1 , ru2_bar2 ; export kirovEng ; export kirovBunkersToMountWeapon , kirovBunkersToOccupy ; export kirovTransportCargo ; export kirovAttackCargo , kirovAttackVehicles ; export kirovBunkerCounter ; export secondBaseTeam ; export survivorsArabianAttack ; export survivorsToSpawn ; export neededUnitsSpawn ; export Grishko ; export function PrepareRussians ; begin
 925: LD_INT 0
 927: PPUSH
// neededUnitsSpawn = [ 0 , 0 , 0 , 0 ] ;
 928: LD_ADDR_EXP 78
 932: PUSH
 933: LD_INT 0
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: LD_INT 0
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: ST_TO_ADDR
// kirovAttackCargo = [ ] ;
 951: LD_ADDR_EXP 72
 955: PUSH
 956: EMPTY
 957: ST_TO_ADDR
// PrepareKirovBase ;
 958: CALL 1993 0 0
// PrepareHeroes ;
 962: CALL 995 0 0
// PrepareKirovPersonel ;
 966: CALL 2758 0 0
// PrepareBeriaBase ;
 970: CALL 1395 0 0
// PrepareSecondBaseTeam ;
 974: CALL 3901 0 0
// PrepareGrishko ;
 978: CALL 3086 0 0
// PrepareOtherBuildings ;
 982: CALL 3335 0 0
// PrepareVehicles ;
 986: CALL 3159 0 0
// end ;
 990: LD_VAR 0 1
 994: RET
// function PrepareHeroes ; begin
 995: LD_INT 0
 997: PPUSH
// uc_side = 3 ;
 998: LD_ADDR_OWVAR 20
1002: PUSH
1003: LD_INT 3
1005: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true ) ;
1006: LD_ADDR_EXP 46
1010: PUSH
1011: LD_STRING Burlak
1013: PPUSH
1014: LD_INT 1
1016: PPUSH
1017: CALL 6846 0 2
1021: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true ) ;
1022: LD_ADDR_EXP 47
1026: PUSH
1027: LD_STRING Gnyevko
1029: PPUSH
1030: LD_INT 1
1032: PPUSH
1033: CALL 6846 0 2
1037: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true ) ;
1038: LD_ADDR_EXP 49
1042: PUSH
1043: LD_STRING Kovalyuk
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 6846 0 2
1053: ST_TO_ADDR
// Kirilenkova = PrepareUnitExt ( Kirilenkova , true ) ;
1054: LD_ADDR_EXP 48
1058: PUSH
1059: LD_STRING Kirilenkova
1061: PPUSH
1062: LD_INT 1
1064: PPUSH
1065: CALL 6846 0 2
1069: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
1070: LD_EXP 46
1074: PUSH
1075: LD_EXP 47
1079: PUSH
1080: LD_EXP 49
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: LIST
1089: PPUSH
1090: LD_INT 3
1092: PPUSH
1093: CALL_OW 336
// uc_side = 6 ;
1097: LD_ADDR_OWVAR 20
1101: PUSH
1102: LD_INT 6
1104: ST_TO_ADDR
// if not meetBelkovBrother and TestCharacters ( 02_Belkov ) then
1105: LD_EXP 1
1109: NOT
1110: PUSH
1111: LD_STRING 02_Belkov
1113: PPUSH
1114: CALL_OW 28
1118: AND
1119: IFFALSE 1211
// begin Belkov := PrepareUnitExt ( Belkov , true ) ;
1121: LD_ADDR_EXP 50
1125: PUSH
1126: LD_STRING Belkov
1128: PPUSH
1129: LD_INT 1
1131: PPUSH
1132: CALL 6846 0 2
1136: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , false ) ;
1137: LD_ADDR_EXP 51
1141: PUSH
1142: LD_STRING Belkov2
1144: PPUSH
1145: LD_INT 0
1147: PPUSH
1148: CALL 6846 0 2
1152: ST_TO_ADDR
// BelkovDialog = Belkov ;
1153: LD_ADDR_EXP 60
1157: PUSH
1158: LD_EXP 50
1162: ST_TO_ADDR
// PlaceUnitXY ( Belkov , 165 , 110 , false ) ;
1163: LD_EXP 50
1167: PPUSH
1168: LD_INT 165
1170: PPUSH
1171: LD_INT 110
1173: PPUSH
1174: LD_INT 0
1176: PPUSH
1177: CALL_OW 48
// PlaceUnitXYR ( Belkov2 , 159 , 107 , 5 , false ) ;
1181: LD_EXP 51
1185: PPUSH
1186: LD_INT 159
1188: PPUSH
1189: LD_INT 107
1191: PPUSH
1192: LD_INT 5
1194: PPUSH
1195: LD_INT 0
1197: PPUSH
1198: CALL_OW 50
// ComHold ( Belkov ) ;
1202: LD_EXP 50
1206: PPUSH
1207: CALL_OW 140
// end ; if meetBelkovBrother and TestCharacters ( 02_Belkov2 ) then
1211: LD_EXP 1
1215: PUSH
1216: LD_STRING 02_Belkov2
1218: PPUSH
1219: CALL_OW 28
1223: AND
1224: IFFALSE 1279
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1226: LD_ADDR_EXP 51
1230: PUSH
1231: LD_STRING Belkov2
1233: PPUSH
1234: LD_INT 1
1236: PPUSH
1237: CALL 6846 0 2
1241: ST_TO_ADDR
// BelkovDialog = Belkov2 ;
1242: LD_ADDR_EXP 60
1246: PUSH
1247: LD_EXP 51
1251: ST_TO_ADDR
// PlaceUnitXY ( Belkov2 , 165 , 110 , false ) ;
1252: LD_EXP 51
1256: PPUSH
1257: LD_INT 165
1259: PPUSH
1260: LD_INT 110
1262: PPUSH
1263: LD_INT 0
1265: PPUSH
1266: CALL_OW 48
// ComHold ( Belkov2 ) ;
1270: LD_EXP 51
1274: PPUSH
1275: CALL_OW 140
// end ; SetClass ( [ Belkov , Belkov2 ] , 1 ) ;
1279: LD_EXP 50
1283: PUSH
1284: LD_EXP 51
1288: PUSH
1289: EMPTY
1290: LIST
1291: LIST
1292: PPUSH
1293: LD_INT 1
1295: PPUSH
1296: CALL_OW 336
// PlaceUnitXY ( Burlak , 164 , 108 , false ) ;
1300: LD_EXP 46
1304: PPUSH
1305: LD_INT 164
1307: PPUSH
1308: LD_INT 108
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 48
// ComHold ( Burlak ) ;
1318: LD_EXP 46
1322: PPUSH
1323: CALL_OW 140
// PlaceUnitXYR ( Gnyevko , 159 , 107 , 5 , false ) ;
1327: LD_EXP 47
1331: PPUSH
1332: LD_INT 159
1334: PPUSH
1335: LD_INT 107
1337: PPUSH
1338: LD_INT 5
1340: PPUSH
1341: LD_INT 0
1343: PPUSH
1344: CALL_OW 50
// PlaceUnitXYR ( Kovalyuk , 159 , 107 , 5 , false ) ;
1348: LD_EXP 49
1352: PPUSH
1353: LD_INT 159
1355: PPUSH
1356: LD_INT 107
1358: PPUSH
1359: LD_INT 5
1361: PPUSH
1362: LD_INT 0
1364: PPUSH
1365: CALL_OW 50
// PlaceUnitXYR ( Kirilenkova , 159 , 107 , 5 , false ) ;
1369: LD_EXP 48
1373: PPUSH
1374: LD_INT 159
1376: PPUSH
1377: LD_INT 107
1379: PPUSH
1380: LD_INT 5
1382: PPUSH
1383: LD_INT 0
1385: PPUSH
1386: CALL_OW 50
// end ;
1390: LD_VAR 0 1
1394: RET
// function PrepareBeriaBase ; var i , bonusResources ; begin
1395: LD_INT 0
1397: PPUSH
1398: PPUSH
1399: PPUSH
// beriaBase = LoadVariable ( 02_BeriaBase_2 , [ ] ) ;
1400: LD_ADDR_EXP 56
1404: PUSH
1405: LD_STRING 02_BeriaBase_2
1407: PPUSH
1408: EMPTY
1409: PPUSH
1410: CALL_OW 30
1414: ST_TO_ADDR
// otherBeriaUnits = CreateCharacterSet ( 02_other_beria ) ;
1415: LD_ADDR_EXP 55
1419: PUSH
1420: LD_STRING 02_other_beria
1422: PPUSH
1423: CALL_OW 31
1427: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 02_other_survivors ) ;
1428: LD_ADDR_EXP 53
1432: PUSH
1433: LD_STRING 02_other_survivors
1435: PPUSH
1436: CALL_OW 31
1440: ST_TO_ADDR
// uc_side = 3 ;
1441: LD_ADDR_OWVAR 20
1445: PUSH
1446: LD_INT 3
1448: ST_TO_ADDR
// uc_nation = 3 ;
1449: LD_ADDR_OWVAR 21
1453: PUSH
1454: LD_INT 3
1456: ST_TO_ADDR
// for i := 1 to beriaBase do
1457: LD_ADDR_VAR 0 2
1461: PUSH
1462: DOUBLE
1463: LD_INT 1
1465: DEC
1466: ST_TO_ADDR
1467: LD_EXP 56
1471: PUSH
1472: FOR_TO
1473: IFFALSE 1726
// begin bc_type = beriaBase [ i ] [ 1 ] ;
1475: LD_ADDR_OWVAR 42
1479: PUSH
1480: LD_EXP 56
1484: PUSH
1485: LD_VAR 0 2
1489: ARRAY
1490: PUSH
1491: LD_INT 1
1493: ARRAY
1494: ST_TO_ADDR
// bc_level = beriaBase [ i ] [ 5 ] ;
1495: LD_ADDR_OWVAR 43
1499: PUSH
1500: LD_EXP 56
1504: PUSH
1505: LD_VAR 0 2
1509: ARRAY
1510: PUSH
1511: LD_INT 5
1513: ARRAY
1514: ST_TO_ADDR
// if bc_type = b_lab then
1515: LD_OWVAR 42
1519: PUSH
1520: LD_INT 6
1522: EQUAL
1523: IFFALSE 1541
// begin bc_kind1 = b_lab_basic ;
1525: LD_ADDR_OWVAR 44
1529: PUSH
1530: LD_INT 9
1532: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
1533: LD_ADDR_OWVAR 45
1537: PUSH
1538: LD_INT 9
1540: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
1541: LD_OWVAR 42
1545: PUSH
1546: LD_INT 7
1548: EQUAL
1549: PUSH
1550: LD_OWVAR 42
1554: PUSH
1555: LD_INT 8
1557: EQUAL
1558: OR
1559: IFFALSE 1675
// begin if beriaBase [ i ] [ 7 ] then
1561: LD_EXP 56
1565: PUSH
1566: LD_VAR 0 2
1570: ARRAY
1571: PUSH
1572: LD_INT 7
1574: ARRAY
1575: IFFALSE 1597
// bc_kind1 = beriaBase [ i ] [ 7 ] ;
1577: LD_ADDR_OWVAR 44
1581: PUSH
1582: LD_EXP 56
1586: PUSH
1587: LD_VAR 0 2
1591: ARRAY
1592: PUSH
1593: LD_INT 7
1595: ARRAY
1596: ST_TO_ADDR
// if beriaBase [ i ] [ 8 ] then
1597: LD_EXP 56
1601: PUSH
1602: LD_VAR 0 2
1606: ARRAY
1607: PUSH
1608: LD_INT 8
1610: ARRAY
1611: IFFALSE 1633
// bc_kind2 = beriaBase [ i ] [ 8 ] ;
1613: LD_ADDR_OWVAR 45
1617: PUSH
1618: LD_EXP 56
1622: PUSH
1623: LD_VAR 0 2
1627: ARRAY
1628: PUSH
1629: LD_INT 8
1631: ARRAY
1632: ST_TO_ADDR
// if not beriaBase [ i ] [ 7 ] and not beriaBase [ i ] [ 8 ] then
1633: LD_EXP 56
1637: PUSH
1638: LD_VAR 0 2
1642: ARRAY
1643: PUSH
1644: LD_INT 7
1646: ARRAY
1647: NOT
1648: PUSH
1649: LD_EXP 56
1653: PUSH
1654: LD_VAR 0 2
1658: ARRAY
1659: PUSH
1660: LD_INT 8
1662: ARRAY
1663: NOT
1664: AND
1665: IFFALSE 1675
// bc_type := b_lab ;
1667: LD_ADDR_OWVAR 42
1671: PUSH
1672: LD_INT 6
1674: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 2 ] , beriaBase [ i ] [ 3 ] , beriaBase [ i ] [ 4 ] ) ;
1675: LD_EXP 56
1679: PUSH
1680: LD_VAR 0 2
1684: ARRAY
1685: PUSH
1686: LD_INT 2
1688: ARRAY
1689: PPUSH
1690: LD_EXP 56
1694: PUSH
1695: LD_VAR 0 2
1699: ARRAY
1700: PUSH
1701: LD_INT 3
1703: ARRAY
1704: PPUSH
1705: LD_EXP 56
1709: PUSH
1710: LD_VAR 0 2
1714: ARRAY
1715: PUSH
1716: LD_INT 4
1718: ARRAY
1719: PPUSH
1720: CALL_OW 47
// end ;
1724: GO 1472
1726: POP
1727: POP
// beriaDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1728: LD_ADDR_EXP 57
1732: PUSH
1733: LD_INT 22
1735: PUSH
1736: LD_INT 3
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 30
1745: PUSH
1746: LD_INT 0
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PPUSH
1757: CALL_OW 69
1761: PUSH
1762: LD_INT 1
1764: ARRAY
1765: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1766: LD_EXP 57
1770: PPUSH
1771: LD_STRING beria
1773: PPUSH
1774: CALL_OW 500
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , cratesResources ) ;
1778: LD_EXP 57
1782: PPUSH
1783: CALL_OW 274
1787: PPUSH
1788: LD_INT 1
1790: PPUSH
1791: LD_EXP 2
1795: PPUSH
1796: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , oilResources ) ;
1800: LD_EXP 57
1804: PPUSH
1805: CALL_OW 274
1809: PPUSH
1810: LD_INT 2
1812: PPUSH
1813: LD_EXP 3
1817: PPUSH
1818: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesCrates ) ;
1822: LD_EXP 57
1826: PPUSH
1827: CALL_OW 274
1831: PPUSH
1832: LD_INT 1
1834: PPUSH
1835: LD_EXP 57
1839: PPUSH
1840: CALL_OW 274
1844: PPUSH
1845: LD_INT 2
1847: PPUSH
1848: CALL_OW 275
1852: PUSH
1853: LD_EXP 39
1857: PLUS
1858: PPUSH
1859: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesOil ) ;
1863: LD_EXP 57
1867: PPUSH
1868: CALL_OW 274
1872: PPUSH
1873: LD_INT 2
1875: PPUSH
1876: LD_EXP 57
1880: PPUSH
1881: CALL_OW 274
1885: PPUSH
1886: LD_INT 2
1888: PPUSH
1889: CALL_OW 275
1893: PUSH
1894: LD_EXP 40
1898: PLUS
1899: PPUSH
1900: CALL_OW 277
// uc_side = 6 ;
1904: LD_ADDR_OWVAR 20
1908: PUSH
1909: LD_INT 6
1911: ST_TO_ADDR
// for i in otherBeriaUnits do
1912: LD_ADDR_VAR 0 2
1916: PUSH
1917: LD_EXP 55
1921: PUSH
1922: FOR_IN
1923: IFFALSE 1948
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
1925: LD_VAR 0 2
1929: PPUSH
1930: LD_INT 159
1932: PPUSH
1933: LD_INT 107
1935: PPUSH
1936: LD_INT 10
1938: PPUSH
1939: LD_INT 0
1941: PPUSH
1942: CALL_OW 50
1946: GO 1922
1948: POP
1949: POP
// for i in other_survivors do
1950: LD_ADDR_VAR 0 2
1954: PUSH
1955: LD_EXP 53
1959: PUSH
1960: FOR_IN
1961: IFFALSE 1986
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
1963: LD_VAR 0 2
1967: PPUSH
1968: LD_INT 159
1970: PPUSH
1971: LD_INT 107
1973: PPUSH
1974: LD_INT 10
1976: PPUSH
1977: LD_INT 0
1979: PPUSH
1980: CALL_OW 50
1984: GO 1960
1986: POP
1987: POP
// end ;
1988: LD_VAR 0 1
1992: RET
// function PrepareKirovBase ; var i , tmp , building ; begin
1993: LD_INT 0
1995: PPUSH
1996: PPUSH
1997: PPUSH
1998: PPUSH
// kirovBase = LoadVariable ( 02_KirovBase_3 , [ ] ) ;
1999: LD_ADDR_EXP 63
2003: PUSH
2004: LD_STRING 02_KirovBase_3
2006: PPUSH
2007: EMPTY
2008: PPUSH
2009: CALL_OW 30
2013: ST_TO_ADDR
// otherKirovUnits = CreateCharacterSet ( 02_other_kirov ) ;
2014: LD_ADDR_EXP 62
2018: PUSH
2019: LD_STRING 02_other_kirov
2021: PPUSH
2022: CALL_OW 31
2026: ST_TO_ADDR
// uc_side = 6 ;
2027: LD_ADDR_OWVAR 20
2031: PUSH
2032: LD_INT 6
2034: ST_TO_ADDR
// uc_nation = 3 ;
2035: LD_ADDR_OWVAR 21
2039: PUSH
2040: LD_INT 3
2042: ST_TO_ADDR
// Kurin = PrepareUnitExt ( Kurin , false ) ;
2043: LD_ADDR_EXP 58
2047: PUSH
2048: LD_STRING Kurin
2050: PPUSH
2051: LD_INT 0
2053: PPUSH
2054: CALL 6846 0 2
2058: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 166 , 109 , false ) ;
2059: LD_EXP 58
2063: PPUSH
2064: LD_INT 166
2066: PPUSH
2067: LD_INT 109
2069: PPUSH
2070: LD_INT 0
2072: PPUSH
2073: CALL_OW 48
// ComHold ( Kurin ) ;
2077: LD_EXP 58
2081: PPUSH
2082: CALL_OW 140
// for i := 1 to kirovBase do
2086: LD_ADDR_VAR 0 2
2090: PUSH
2091: DOUBLE
2092: LD_INT 1
2094: DEC
2095: ST_TO_ADDR
2096: LD_EXP 63
2100: PUSH
2101: FOR_TO
2102: IFFALSE 2540
// begin bc_type = kirovBase [ i ] [ 1 ] ;
2104: LD_ADDR_OWVAR 42
2108: PUSH
2109: LD_EXP 63
2113: PUSH
2114: LD_VAR 0 2
2118: ARRAY
2119: PUSH
2120: LD_INT 1
2122: ARRAY
2123: ST_TO_ADDR
// bc_level = kirovBase [ i ] [ 5 ] ;
2124: LD_ADDR_OWVAR 43
2128: PUSH
2129: LD_EXP 63
2133: PUSH
2134: LD_VAR 0 2
2138: ARRAY
2139: PUSH
2140: LD_INT 5
2142: ARRAY
2143: ST_TO_ADDR
// if bc_type = b_depot then
2144: LD_OWVAR 42
2148: PUSH
2149: LD_INT 0
2151: EQUAL
2152: IFFALSE 2162
// bc_type = b_warehouse ;
2154: LD_ADDR_OWVAR 42
2158: PUSH
2159: LD_INT 1
2161: ST_TO_ADDR
// if bc_type = b_armoury then
2162: LD_OWVAR 42
2166: PUSH
2167: LD_INT 4
2169: EQUAL
2170: IFFALSE 2180
// bc_type = b_barracks ;
2172: LD_ADDR_OWVAR 42
2176: PUSH
2177: LD_INT 5
2179: ST_TO_ADDR
// if bc_type = b_lab then
2180: LD_OWVAR 42
2184: PUSH
2185: LD_INT 6
2187: EQUAL
2188: IFFALSE 2206
// begin bc_kind1 = b_lab_weapon ;
2190: LD_ADDR_OWVAR 44
2194: PUSH
2195: LD_INT 10
2197: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2198: LD_ADDR_OWVAR 45
2202: PUSH
2203: LD_INT 9
2205: ST_TO_ADDR
// end ; if bc_type = b_workshop then
2206: LD_OWVAR 42
2210: PUSH
2211: LD_INT 2
2213: EQUAL
2214: IFFALSE 2224
// bc_type = b_factory ;
2216: LD_ADDR_OWVAR 42
2220: PUSH
2221: LD_INT 3
2223: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2224: LD_OWVAR 42
2228: PUSH
2229: LD_INT 7
2231: EQUAL
2232: PUSH
2233: LD_OWVAR 42
2237: PUSH
2238: LD_INT 8
2240: EQUAL
2241: OR
2242: IFFALSE 2358
// begin if kirovBase [ i ] [ 7 ] then
2244: LD_EXP 63
2248: PUSH
2249: LD_VAR 0 2
2253: ARRAY
2254: PUSH
2255: LD_INT 7
2257: ARRAY
2258: IFFALSE 2280
// bc_kind1 = kirovBase [ i ] [ 7 ] ;
2260: LD_ADDR_OWVAR 44
2264: PUSH
2265: LD_EXP 63
2269: PUSH
2270: LD_VAR 0 2
2274: ARRAY
2275: PUSH
2276: LD_INT 7
2278: ARRAY
2279: ST_TO_ADDR
// if kirovBase [ i ] [ 8 ] then
2280: LD_EXP 63
2284: PUSH
2285: LD_VAR 0 2
2289: ARRAY
2290: PUSH
2291: LD_INT 8
2293: ARRAY
2294: IFFALSE 2316
// bc_kind2 = kirovBase [ i ] [ 8 ] ;
2296: LD_ADDR_OWVAR 45
2300: PUSH
2301: LD_EXP 63
2305: PUSH
2306: LD_VAR 0 2
2310: ARRAY
2311: PUSH
2312: LD_INT 8
2314: ARRAY
2315: ST_TO_ADDR
// if not kirovBase [ i ] [ 7 ] and not kirovBase [ i ] [ 8 ] then
2316: LD_EXP 63
2320: PUSH
2321: LD_VAR 0 2
2325: ARRAY
2326: PUSH
2327: LD_INT 7
2329: ARRAY
2330: NOT
2331: PUSH
2332: LD_EXP 63
2336: PUSH
2337: LD_VAR 0 2
2341: ARRAY
2342: PUSH
2343: LD_INT 8
2345: ARRAY
2346: NOT
2347: AND
2348: IFFALSE 2358
// bc_type := b_lab ;
2350: LD_ADDR_OWVAR 42
2354: PUSH
2355: LD_INT 6
2357: ST_TO_ADDR
// end ; if bc_type = b_breastwork then
2358: LD_OWVAR 42
2362: PUSH
2363: LD_INT 31
2365: EQUAL
2366: IFFALSE 2390
// begin bc_type = b_bunker ;
2368: LD_ADDR_OWVAR 42
2372: PUSH
2373: LD_INT 32
2375: ST_TO_ADDR
// kirovBunkerCounter = kirovBunkerCounter + 1 ;
2376: LD_ADDR_EXP 74
2380: PUSH
2381: LD_EXP 74
2385: PUSH
2386: LD_INT 1
2388: PLUS
2389: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 2 ] , kirovBase [ i ] [ 3 ] , kirovBase [ i ] [ 4 ] ) ;
2390: LD_ADDR_VAR 0 4
2394: PUSH
2395: LD_EXP 63
2399: PUSH
2400: LD_VAR 0 2
2404: ARRAY
2405: PUSH
2406: LD_INT 2
2408: ARRAY
2409: PPUSH
2410: LD_EXP 63
2414: PUSH
2415: LD_VAR 0 2
2419: ARRAY
2420: PUSH
2421: LD_INT 3
2423: ARRAY
2424: PPUSH
2425: LD_EXP 63
2429: PUSH
2430: LD_VAR 0 2
2434: ARRAY
2435: PUSH
2436: LD_INT 4
2438: ARRAY
2439: PPUSH
2440: CALL_OW 47
2444: ST_TO_ADDR
// if tmp < 4 and bc_type = b_bunker then
2445: LD_VAR 0 3
2449: PUSH
2450: LD_INT 4
2452: LESS
2453: PUSH
2454: LD_OWVAR 42
2458: PUSH
2459: LD_INT 32
2461: EQUAL
2462: AND
2463: IFFALSE 2512
// begin PlaceWeaponTurret ( building , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
2465: LD_VAR 0 4
2469: PPUSH
2470: LD_INT 42
2472: PUSH
2473: LD_INT 43
2475: PUSH
2476: EMPTY
2477: LIST
2478: LIST
2479: PUSH
2480: LD_INT 1
2482: PPUSH
2483: LD_INT 2
2485: PPUSH
2486: CALL_OW 12
2490: ARRAY
2491: PPUSH
2492: CALL_OW 431
// tmp = tmp + 1 ;
2496: LD_ADDR_VAR 0 3
2500: PUSH
2501: LD_VAR 0 3
2505: PUSH
2506: LD_INT 1
2508: PLUS
2509: ST_TO_ADDR
// end else
2510: GO 2538
// if bc_type = b_bunker then
2512: LD_OWVAR 42
2516: PUSH
2517: LD_INT 32
2519: EQUAL
2520: IFFALSE 2538
// kirovBunkersToMountWeapon = kirovBunkersToMountWeapon ^ building ;
2522: LD_ADDR_EXP 69
2526: PUSH
2527: LD_EXP 69
2531: PUSH
2532: LD_VAR 0 4
2536: ADD
2537: ST_TO_ADDR
// end ;
2538: GO 2101
2540: POP
2541: POP
// kirovDepot = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
2542: LD_ADDR_EXP 64
2546: PUSH
2547: LD_INT 22
2549: PUSH
2550: LD_INT 6
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: PUSH
2557: LD_INT 30
2559: PUSH
2560: LD_INT 1
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: PPUSH
2571: CALL_OW 69
2575: PUSH
2576: LD_INT 1
2578: ARRAY
2579: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
2580: LD_EXP 64
2584: PPUSH
2585: LD_STRING kirov
2587: PPUSH
2588: CALL_OW 500
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 5000 ) ;
2592: LD_EXP 64
2596: PPUSH
2597: CALL_OW 274
2601: PPUSH
2602: LD_INT 1
2604: PPUSH
2605: LD_INT 5000
2607: PPUSH
2608: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 2000 ) ;
2612: LD_EXP 64
2616: PPUSH
2617: CALL_OW 274
2621: PPUSH
2622: LD_INT 2
2624: PPUSH
2625: LD_INT 2000
2627: PPUSH
2628: CALL_OW 277
// ru2_bar1 = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) , 145 , 102 ) ;
2632: LD_ADDR_EXP 66
2636: PUSH
2637: LD_INT 22
2639: PUSH
2640: LD_INT 6
2642: PUSH
2643: EMPTY
2644: LIST
2645: LIST
2646: PUSH
2647: LD_INT 21
2649: PUSH
2650: LD_INT 3
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: PUSH
2657: LD_INT 30
2659: PUSH
2660: LD_INT 5
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: PUSH
2667: EMPTY
2668: LIST
2669: LIST
2670: LIST
2671: PPUSH
2672: CALL_OW 69
2676: PPUSH
2677: LD_INT 145
2679: PPUSH
2680: LD_INT 102
2682: PPUSH
2683: CALL_OW 73
2687: ST_TO_ADDR
// ru2_bar2 = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) diff ru2_bar1 ;
2688: LD_ADDR_EXP 67
2692: PUSH
2693: LD_INT 22
2695: PUSH
2696: LD_INT 6
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PUSH
2703: LD_INT 21
2705: PUSH
2706: LD_INT 3
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PUSH
2713: LD_INT 30
2715: PUSH
2716: LD_INT 5
2718: PUSH
2719: EMPTY
2720: LIST
2721: LIST
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: LIST
2727: PPUSH
2728: CALL_OW 69
2732: PUSH
2733: LD_EXP 66
2737: DIFF
2738: ST_TO_ADDR
// ru2_bar2 = ru2_bar2 [ 1 ] ;
2739: LD_ADDR_EXP 67
2743: PUSH
2744: LD_EXP 67
2748: PUSH
2749: LD_INT 1
2751: ARRAY
2752: ST_TO_ADDR
// end ;
2753: LD_VAR 0 1
2757: RET
// export function PrepareKirovPersonel ; var i ; begin
2758: LD_INT 0
2760: PPUSH
2761: PPUSH
// PrepareEngineer ( false , 7 ) ;
2762: LD_INT 0
2764: PPUSH
2765: LD_INT 7
2767: PPUSH
2768: CALL_OW 382
// kirovEng = CreateHuman ;
2772: LD_ADDR_EXP 68
2776: PUSH
2777: CALL_OW 44
2781: ST_TO_ADDR
// PlaceUnitXYR ( kirovEng , 159 , 107 , 10 , false ) ;
2782: LD_EXP 68
2786: PPUSH
2787: LD_INT 159
2789: PPUSH
2790: LD_INT 107
2792: PPUSH
2793: LD_INT 10
2795: PPUSH
2796: LD_INT 0
2798: PPUSH
2799: CALL_OW 50
// Popov = PrepareUnitExt ( Popov , false ) ;
2803: LD_ADDR_EXP 59
2807: PUSH
2808: LD_STRING Popov
2810: PPUSH
2811: LD_INT 0
2813: PPUSH
2814: CALL 6846 0 2
2818: ST_TO_ADDR
// PlaceUnitArea ( Popov , PopovSpawnArea , false ) ;
2819: LD_EXP 59
2823: PPUSH
2824: LD_INT 4
2826: PPUSH
2827: LD_INT 0
2829: PPUSH
2830: CALL_OW 49
// ComTurnXY ( Popov , 98 , 36 ) ;
2834: LD_EXP 59
2838: PPUSH
2839: LD_INT 98
2841: PPUSH
2842: LD_INT 36
2844: PPUSH
2845: CALL_OW 118
// hc_name :=  ;
2849: LD_ADDR_OWVAR 26
2853: PUSH
2854: LD_STRING 
2856: ST_TO_ADDR
// hc_gallery :=  ;
2857: LD_ADDR_OWVAR 33
2861: PUSH
2862: LD_STRING 
2864: ST_TO_ADDR
// PrepareSoldier ( false , 2 ) ;
2865: LD_INT 0
2867: PPUSH
2868: LD_INT 2
2870: PPUSH
2871: CALL_OW 381
// ruScout = CreateHuman ;
2875: LD_ADDR_EXP 61
2879: PUSH
2880: CALL_OW 44
2884: ST_TO_ADDR
// PlaceUnitArea ( ruScout , RuScoutSpawnArea , false ) ;
2885: LD_EXP 61
2889: PPUSH
2890: LD_INT 3
2892: PPUSH
2893: LD_INT 0
2895: PPUSH
2896: CALL_OW 49
// ComCrawl ( ruScout ) ;
2900: LD_EXP 61
2904: PPUSH
2905: CALL_OW 137
// AddComTurnXY ( ruScout , 98 , 36 ) ;
2909: LD_EXP 61
2913: PPUSH
2914: LD_INT 98
2916: PPUSH
2917: LD_INT 36
2919: PPUSH
2920: CALL_OW 178
// uc_side = 6 ;
2924: LD_ADDR_OWVAR 20
2928: PUSH
2929: LD_INT 6
2931: ST_TO_ADDR
// for i in otherKirovUnits do
2932: LD_ADDR_VAR 0 2
2936: PUSH
2937: LD_EXP 62
2941: PUSH
2942: FOR_IN
2943: IFFALSE 3079
// begin SetSide ( i , 6 ) ;
2945: LD_VAR 0 2
2949: PPUSH
2950: LD_INT 6
2952: PPUSH
2953: CALL_OW 235
// if GetClass ( i ) = class_soldier and kirovBunkerCounter > 0 then
2957: LD_VAR 0 2
2961: PPUSH
2962: CALL_OW 257
2966: PUSH
2967: LD_INT 1
2969: EQUAL
2970: PUSH
2971: LD_EXP 74
2975: PUSH
2976: LD_INT 0
2978: GREATER
2979: AND
2980: IFFALSE 3056
// begin PlaceHumanInBunker ( i , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ kirovBunkerCounter ] ) ;
2982: LD_VAR 0 2
2986: PPUSH
2987: LD_INT 18
2989: PPUSH
2990: LD_INT 22
2992: PUSH
2993: LD_INT 6
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: PUSH
3000: LD_INT 21
3002: PUSH
3003: LD_INT 3
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PUSH
3010: LD_INT 30
3012: PUSH
3013: LD_INT 32
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: LIST
3024: PPUSH
3025: CALL_OW 70
3029: PUSH
3030: LD_EXP 74
3034: ARRAY
3035: PPUSH
3036: CALL 8222 0 2
// kirovBunkerCounter = kirovBunkerCounter - 1 ;
3040: LD_ADDR_EXP 74
3044: PUSH
3045: LD_EXP 74
3049: PUSH
3050: LD_INT 1
3052: MINUS
3053: ST_TO_ADDR
// end else
3054: GO 3077
// begin PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
3056: LD_VAR 0 2
3060: PPUSH
3061: LD_INT 159
3063: PPUSH
3064: LD_INT 107
3066: PPUSH
3067: LD_INT 10
3069: PPUSH
3070: LD_INT 0
3072: PPUSH
3073: CALL_OW 50
// end ; end ;
3077: GO 2942
3079: POP
3080: POP
// end ;
3081: LD_VAR 0 1
3085: RET
// export function PrepareGrishko ; var i , un , turret ; begin
3086: LD_INT 0
3088: PPUSH
3089: PPUSH
3090: PPUSH
3091: PPUSH
// uc_side = 6 ;
3092: LD_ADDR_OWVAR 20
3096: PUSH
3097: LD_INT 6
3099: ST_TO_ADDR
// uc_nation = 3 ;
3100: LD_ADDR_OWVAR 21
3104: PUSH
3105: LD_INT 3
3107: ST_TO_ADDR
// Grishko = PrepareUnitExt ( Grishko , false ) ;
3108: LD_ADDR_EXP 79
3112: PUSH
3113: LD_STRING Grishko
3115: PPUSH
3116: LD_INT 0
3118: PPUSH
3119: CALL 6846 0 2
3123: ST_TO_ADDR
// PlaceUnitXYR ( Grishko , 218 , 108 , 3 , false ) ;
3124: LD_EXP 79
3128: PPUSH
3129: LD_INT 218
3131: PPUSH
3132: LD_INT 108
3134: PPUSH
3135: LD_INT 3
3137: PPUSH
3138: LD_INT 0
3140: PPUSH
3141: CALL_OW 50
// ComHold ( Grishko ) ;
3145: LD_EXP 79
3149: PPUSH
3150: CALL_OW 140
// end ;
3154: LD_VAR 0 1
3158: RET
// export function PrepareVehicles ; var i , vehicle ; begin
3159: LD_INT 0
3161: PPUSH
3162: PPUSH
3163: PPUSH
// uc_side = 3 ;
3164: LD_ADDR_OWVAR 20
3168: PUSH
3169: LD_INT 3
3171: ST_TO_ADDR
// uc_nation = 3 ;
3172: LD_ADDR_OWVAR 21
3176: PUSH
3177: LD_INT 3
3179: ST_TO_ADDR
// for i := 1 to vehiclesPreviousMission do
3180: LD_ADDR_VAR 0 2
3184: PUSH
3185: DOUBLE
3186: LD_INT 1
3188: DEC
3189: ST_TO_ADDR
3190: LD_EXP 4
3194: PUSH
3195: FOR_TO
3196: IFFALSE 3328
// begin PrepareVehicle ( vehiclesPreviousMission [ i ] [ 1 ] , vehiclesPreviousMission [ i ] [ 2 ] , vehiclesPreviousMission [ i ] [ 3 ] , vehiclesPreviousMission [ i ] [ 4 ] , vehiclesPreviousMission [ i ] [ 5 ] ) ;
3198: LD_EXP 4
3202: PUSH
3203: LD_VAR 0 2
3207: ARRAY
3208: PUSH
3209: LD_INT 1
3211: ARRAY
3212: PPUSH
3213: LD_EXP 4
3217: PUSH
3218: LD_VAR 0 2
3222: ARRAY
3223: PUSH
3224: LD_INT 2
3226: ARRAY
3227: PPUSH
3228: LD_EXP 4
3232: PUSH
3233: LD_VAR 0 2
3237: ARRAY
3238: PUSH
3239: LD_INT 3
3241: ARRAY
3242: PPUSH
3243: LD_EXP 4
3247: PUSH
3248: LD_VAR 0 2
3252: ARRAY
3253: PUSH
3254: LD_INT 4
3256: ARRAY
3257: PPUSH
3258: LD_EXP 4
3262: PUSH
3263: LD_VAR 0 2
3267: ARRAY
3268: PUSH
3269: LD_INT 5
3271: ARRAY
3272: PPUSH
3273: CALL 33238 0 5
// vehicle = CreateVehicle ;
3277: LD_ADDR_VAR 0 3
3281: PUSH
3282: CALL_OW 45
3286: ST_TO_ADDR
// PlaceUnitArea ( vehicle , BeriaBaseArea , false ) ;
3287: LD_VAR 0 3
3291: PPUSH
3292: LD_INT 25
3294: PPUSH
3295: LD_INT 0
3297: PPUSH
3298: CALL_OW 49
// SetLives ( vehicle , vehiclesPreviousMission [ i ] [ 6 ] ) ;
3302: LD_VAR 0 3
3306: PPUSH
3307: LD_EXP 4
3311: PUSH
3312: LD_VAR 0 2
3316: ARRAY
3317: PUSH
3318: LD_INT 6
3320: ARRAY
3321: PPUSH
3322: CALL_OW 234
// end ;
3326: GO 3195
3328: POP
3329: POP
// end ;
3330: LD_VAR 0 1
3334: RET
// export function PrepareOtherBuildings ; var i , otherBuildings , building ; begin
3335: LD_INT 0
3337: PPUSH
3338: PPUSH
3339: PPUSH
3340: PPUSH
// otherBuildings = LoadVariable ( 02_OtherBuildings_4 , [ ] ) ;
3341: LD_ADDR_VAR 0 3
3345: PUSH
3346: LD_STRING 02_OtherBuildings_4
3348: PPUSH
3349: EMPTY
3350: PPUSH
3351: CALL_OW 30
3355: ST_TO_ADDR
// uc_side = 3 ;
3356: LD_ADDR_OWVAR 20
3360: PUSH
3361: LD_INT 3
3363: ST_TO_ADDR
// for i := 1 to otherBuildings do
3364: LD_ADDR_VAR 0 2
3368: PUSH
3369: DOUBLE
3370: LD_INT 1
3372: DEC
3373: ST_TO_ADDR
3374: LD_VAR 0 3
3378: PUSH
3379: FOR_TO
3380: IFFALSE 3641
// begin uc_nation = otherBuildings [ i ] [ 6 ] ;
3382: LD_ADDR_OWVAR 21
3386: PUSH
3387: LD_VAR 0 3
3391: PUSH
3392: LD_VAR 0 2
3396: ARRAY
3397: PUSH
3398: LD_INT 6
3400: ARRAY
3401: ST_TO_ADDR
// bc_type = otherBuildings [ i ] [ 1 ] ;
3402: LD_ADDR_OWVAR 42
3406: PUSH
3407: LD_VAR 0 3
3411: PUSH
3412: LD_VAR 0 2
3416: ARRAY
3417: PUSH
3418: LD_INT 1
3420: ARRAY
3421: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3422: LD_ADDR_OWVAR 43
3426: PUSH
3427: LD_VAR 0 3
3431: PUSH
3432: LD_VAR 0 2
3436: ARRAY
3437: PUSH
3438: LD_INT 5
3440: ARRAY
3441: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3442: LD_ADDR_VAR 0 4
3446: PUSH
3447: LD_VAR 0 3
3451: PUSH
3452: LD_VAR 0 2
3456: ARRAY
3457: PUSH
3458: LD_INT 2
3460: ARRAY
3461: PPUSH
3462: LD_VAR 0 3
3466: PUSH
3467: LD_VAR 0 2
3471: ARRAY
3472: PUSH
3473: LD_INT 3
3475: ARRAY
3476: PPUSH
3477: LD_VAR 0 3
3481: PUSH
3482: LD_VAR 0 2
3486: ARRAY
3487: PUSH
3488: LD_INT 4
3490: ARRAY
3491: PPUSH
3492: CALL_OW 47
3496: ST_TO_ADDR
// SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3497: LD_VAR 0 4
3501: PPUSH
3502: LD_VAR 0 3
3506: PUSH
3507: LD_VAR 0 2
3511: ARRAY
3512: PUSH
3513: LD_INT 7
3515: ARRAY
3516: PPUSH
3517: CALL_OW 234
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
3521: LD_VAR 0 4
3525: PPUSH
3526: CALL_OW 266
3530: PUSH
3531: LD_INT 0
3533: PUSH
3534: LD_INT 1
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: IN
3541: IFFALSE 3639
// begin SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 8 ] ) ;
3543: LD_VAR 0 4
3547: PPUSH
3548: CALL_OW 274
3552: PPUSH
3553: LD_INT 1
3555: PPUSH
3556: LD_VAR 0 3
3560: PUSH
3561: LD_VAR 0 2
3565: ARRAY
3566: PUSH
3567: LD_INT 8
3569: ARRAY
3570: PPUSH
3571: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 9 ] ) ;
3575: LD_VAR 0 4
3579: PPUSH
3580: CALL_OW 274
3584: PPUSH
3585: LD_INT 1
3587: PPUSH
3588: LD_VAR 0 3
3592: PUSH
3593: LD_VAR 0 2
3597: ARRAY
3598: PUSH
3599: LD_INT 9
3601: ARRAY
3602: PPUSH
3603: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 10 ] ) ;
3607: LD_VAR 0 4
3611: PPUSH
3612: CALL_OW 274
3616: PPUSH
3617: LD_INT 1
3619: PPUSH
3620: LD_VAR 0 3
3624: PUSH
3625: LD_VAR 0 2
3629: ARRAY
3630: PUSH
3631: LD_INT 10
3633: ARRAY
3634: PPUSH
3635: CALL_OW 277
// end ; end ;
3639: GO 3379
3641: POP
3642: POP
// otherBuildings = LoadVariable ( 02_AmericanBuildings_5 , [ ] ) ;
3643: LD_ADDR_VAR 0 3
3647: PUSH
3648: LD_STRING 02_AmericanBuildings_5
3650: PPUSH
3651: EMPTY
3652: PPUSH
3653: CALL_OW 30
3657: ST_TO_ADDR
// uc_side = 1 ;
3658: LD_ADDR_OWVAR 20
3662: PUSH
3663: LD_INT 1
3665: ST_TO_ADDR
// uc_nation = 1 ;
3666: LD_ADDR_OWVAR 21
3670: PUSH
3671: LD_INT 1
3673: ST_TO_ADDR
// for i := 1 to otherBuildings do
3674: LD_ADDR_VAR 0 2
3678: PUSH
3679: DOUBLE
3680: LD_INT 1
3682: DEC
3683: ST_TO_ADDR
3684: LD_VAR 0 3
3688: PUSH
3689: FOR_TO
3690: IFFALSE 3894
// begin bc_type = otherBuildings [ i ] [ 1 ] ;
3692: LD_ADDR_OWVAR 42
3696: PUSH
3697: LD_VAR 0 3
3701: PUSH
3702: LD_VAR 0 2
3706: ARRAY
3707: PUSH
3708: LD_INT 1
3710: ARRAY
3711: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3712: LD_ADDR_OWVAR 43
3716: PUSH
3717: LD_VAR 0 3
3721: PUSH
3722: LD_VAR 0 2
3726: ARRAY
3727: PUSH
3728: LD_INT 5
3730: ARRAY
3731: ST_TO_ADDR
// if bc_type = b_breastwork then
3732: LD_OWVAR 42
3736: PUSH
3737: LD_INT 31
3739: EQUAL
3740: IFFALSE 3813
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3742: LD_ADDR_VAR 0 4
3746: PUSH
3747: LD_VAR 0 3
3751: PUSH
3752: LD_VAR 0 2
3756: ARRAY
3757: PUSH
3758: LD_INT 2
3760: ARRAY
3761: PPUSH
3762: LD_VAR 0 3
3766: PUSH
3767: LD_VAR 0 2
3771: ARRAY
3772: PUSH
3773: LD_INT 3
3775: ARRAY
3776: PPUSH
3777: LD_VAR 0 3
3781: PUSH
3782: LD_VAR 0 2
3786: ARRAY
3787: PUSH
3788: LD_INT 4
3790: ARRAY
3791: PPUSH
3792: CALL_OW 47
3796: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , building ) ;
3797: LD_EXP 41
3801: PPUSH
3802: LD_VAR 0 4
3806: PPUSH
3807: CALL 8312 0 2
// end else
3811: GO 3868
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3813: LD_ADDR_VAR 0 4
3817: PUSH
3818: LD_VAR 0 3
3822: PUSH
3823: LD_VAR 0 2
3827: ARRAY
3828: PUSH
3829: LD_INT 2
3831: ARRAY
3832: PPUSH
3833: LD_VAR 0 3
3837: PUSH
3838: LD_VAR 0 2
3842: ARRAY
3843: PUSH
3844: LD_INT 3
3846: ARRAY
3847: PPUSH
3848: LD_VAR 0 3
3852: PUSH
3853: LD_VAR 0 2
3857: ARRAY
3858: PUSH
3859: LD_INT 4
3861: ARRAY
3862: PPUSH
3863: CALL_OW 47
3867: ST_TO_ADDR
// end ; SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3868: LD_VAR 0 4
3872: PPUSH
3873: LD_VAR 0 3
3877: PUSH
3878: LD_VAR 0 2
3882: ARRAY
3883: PUSH
3884: LD_INT 7
3886: ARRAY
3887: PPUSH
3888: CALL_OW 234
// end ;
3892: GO 3689
3894: POP
3895: POP
// end ;
3896: LD_VAR 0 1
3900: RET
// export function PrepareSecondBaseTeam ; var i ; begin
3901: LD_INT 0
3903: PPUSH
3904: PPUSH
// secondBaseTeam = [ ] ;
3905: LD_ADDR_EXP 75
3909: PUSH
3910: EMPTY
3911: ST_TO_ADDR
// SetResourceVisibility ( 226 , 109 , 6 ) ;
3912: LD_INT 226
3914: PPUSH
3915: LD_INT 109
3917: PPUSH
3918: LD_INT 6
3920: PPUSH
3921: CALL_OW 441
// uc_side = 6 ;
3925: LD_ADDR_OWVAR 20
3929: PUSH
3930: LD_INT 6
3932: ST_TO_ADDR
// uc_nation = 3 ;
3933: LD_ADDR_OWVAR 21
3937: PUSH
3938: LD_INT 3
3940: ST_TO_ADDR
// hc_name =  ;
3941: LD_ADDR_OWVAR 26
3945: PUSH
3946: LD_STRING 
3948: ST_TO_ADDR
// hc_gallery =  ;
3949: LD_ADDR_OWVAR 33
3953: PUSH
3954: LD_STRING 
3956: ST_TO_ADDR
// for i := 1 to 3 do
3957: LD_ADDR_VAR 0 2
3961: PUSH
3962: DOUBLE
3963: LD_INT 1
3965: DEC
3966: ST_TO_ADDR
3967: LD_INT 3
3969: PUSH
3970: FOR_TO
3971: IFFALSE 4024
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3973: LD_INT 0
3975: PPUSH
3976: LD_EXP 41
3980: PPUSH
3981: CALL_OW 381
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
3985: LD_ADDR_EXP 75
3989: PUSH
3990: LD_EXP 75
3994: PUSH
3995: CALL_OW 44
3999: ADD
4000: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ i ] , KirovSupportSpawnArea , false ) ;
4001: LD_EXP 75
4005: PUSH
4006: LD_VAR 0 2
4010: ARRAY
4011: PPUSH
4012: LD_INT 19
4014: PPUSH
4015: LD_INT 0
4017: PPUSH
4018: CALL_OW 49
// end ;
4022: GO 3970
4024: POP
4025: POP
// PrepareEngineer ( false , enemySkillLevel ) ;
4026: LD_INT 0
4028: PPUSH
4029: LD_EXP 41
4033: PPUSH
4034: CALL_OW 382
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4038: LD_ADDR_EXP 75
4042: PUSH
4043: LD_EXP 75
4047: PUSH
4048: CALL_OW 44
4052: ADD
4053: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 4 ] , KirovSupportSpawnArea , false ) ;
4054: LD_EXP 75
4058: PUSH
4059: LD_INT 4
4061: ARRAY
4062: PPUSH
4063: LD_INT 19
4065: PPUSH
4066: LD_INT 0
4068: PPUSH
4069: CALL_OW 49
// PrepareScientist ( false , enemySkillLevel ) ;
4073: LD_INT 0
4075: PPUSH
4076: LD_EXP 41
4080: PPUSH
4081: CALL_OW 384
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4085: LD_ADDR_EXP 75
4089: PUSH
4090: LD_EXP 75
4094: PUSH
4095: CALL_OW 44
4099: ADD
4100: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 5 ] , KirovSupportSpawnArea , false ) ;
4101: LD_EXP 75
4105: PUSH
4106: LD_INT 5
4108: ARRAY
4109: PPUSH
4110: LD_INT 19
4112: PPUSH
4113: LD_INT 0
4115: PPUSH
4116: CALL_OW 49
// ComMoveXY ( secondBaseTeam , 214 , 105 ) ;
4120: LD_EXP 75
4124: PPUSH
4125: LD_INT 214
4127: PPUSH
4128: LD_INT 105
4130: PPUSH
4131: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 222 , 115 , 0 ) ;
4135: LD_EXP 75
4139: PPUSH
4140: LD_INT 25
4142: PUSH
4143: LD_INT 2
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: PPUSH
4150: CALL_OW 72
4154: PPUSH
4155: LD_INT 0
4157: PPUSH
4158: LD_INT 222
4160: PPUSH
4161: LD_INT 115
4163: PPUSH
4164: LD_INT 0
4166: PPUSH
4167: CALL_OW 205
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 224 , 107 ) ;
4171: LD_EXP 75
4175: PPUSH
4176: LD_INT 25
4178: PUSH
4179: LD_INT 2
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: PPUSH
4186: CALL_OW 72
4190: PPUSH
4191: LD_INT 224
4193: PPUSH
4194: LD_INT 107
4196: PPUSH
4197: CALL_OW 177
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 228 , 110 ) ;
4201: LD_EXP 75
4205: PPUSH
4206: LD_INT 25
4208: PUSH
4209: LD_INT 2
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 72
4220: PPUSH
4221: LD_INT 228
4223: PPUSH
4224: LD_INT 110
4226: PPUSH
4227: CALL_OW 177
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_armoury , 216 , 114 , 0 ) ;
4231: LD_EXP 75
4235: PPUSH
4236: LD_INT 25
4238: PUSH
4239: LD_INT 2
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: PPUSH
4246: CALL_OW 72
4250: PPUSH
4251: LD_INT 4
4253: PPUSH
4254: LD_INT 216
4256: PPUSH
4257: LD_INT 114
4259: PPUSH
4260: LD_INT 0
4262: PPUSH
4263: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 215 , 103 , 3 ) ;
4267: LD_EXP 75
4271: PPUSH
4272: LD_INT 25
4274: PUSH
4275: LD_INT 2
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PPUSH
4282: CALL_OW 72
4286: PPUSH
4287: LD_INT 31
4289: PPUSH
4290: LD_INT 215
4292: PPUSH
4293: LD_INT 103
4295: PPUSH
4296: LD_INT 3
4298: PPUSH
4299: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 227 , 116 , 5 ) ;
4303: LD_EXP 75
4307: PPUSH
4308: LD_INT 25
4310: PUSH
4311: LD_INT 2
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: PPUSH
4318: CALL_OW 72
4322: PPUSH
4323: LD_INT 31
4325: PPUSH
4326: LD_INT 227
4328: PPUSH
4329: LD_INT 116
4331: PPUSH
4332: LD_INT 5
4334: PPUSH
4335: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_oil_mine , 226 , 109 , 3 ) ;
4339: LD_EXP 75
4343: PPUSH
4344: LD_INT 25
4346: PUSH
4347: LD_INT 2
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PPUSH
4354: CALL_OW 72
4358: PPUSH
4359: LD_INT 29
4361: PPUSH
4362: LD_INT 226
4364: PPUSH
4365: LD_INT 109
4367: PPUSH
4368: LD_INT 3
4370: PPUSH
4371: CALL_OW 205
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 208 , 106 ) ;
4375: LD_EXP 75
4379: PPUSH
4380: LD_INT 25
4382: PUSH
4383: LD_INT 2
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PPUSH
4390: CALL_OW 72
4394: PPUSH
4395: LD_INT 208
4397: PPUSH
4398: LD_INT 106
4400: PPUSH
4401: CALL_OW 171
// AddComTurnXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 209 , 105 ) ;
4405: LD_EXP 75
4409: PPUSH
4410: LD_INT 25
4412: PUSH
4413: LD_INT 2
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: PPUSH
4420: CALL_OW 72
4424: PPUSH
4425: LD_INT 209
4427: PPUSH
4428: LD_INT 105
4430: PPUSH
4431: CALL_OW 178
// AddComMoveXY ( secondBaseTeam [ 5 ] , 209 , 105 ) ;
4435: LD_EXP 75
4439: PUSH
4440: LD_INT 5
4442: ARRAY
4443: PPUSH
4444: LD_INT 209
4446: PPUSH
4447: LD_INT 105
4449: PPUSH
4450: CALL_OW 171
// AddComTurnXY ( secondBaseTeam [ 5 ] , 208 , 106 ) ;
4454: LD_EXP 75
4458: PUSH
4459: LD_INT 5
4461: ARRAY
4462: PPUSH
4463: LD_INT 208
4465: PPUSH
4466: LD_INT 106
4468: PPUSH
4469: CALL_OW 178
// end ;
4473: LD_VAR 0 1
4477: RET
// export function SpawnKirovSupport ; var i , un ; begin
4478: LD_INT 0
4480: PPUSH
4481: PPUSH
4482: PPUSH
// uc_side = 6 ;
4483: LD_ADDR_OWVAR 20
4487: PUSH
4488: LD_INT 6
4490: ST_TO_ADDR
// uc_nation = 3 ;
4491: LD_ADDR_OWVAR 21
4495: PUSH
4496: LD_INT 3
4498: ST_TO_ADDR
// hc_name =  ;
4499: LD_ADDR_OWVAR 26
4503: PUSH
4504: LD_STRING 
4506: ST_TO_ADDR
// hc_gallery :=  ;
4507: LD_ADDR_OWVAR 33
4511: PUSH
4512: LD_STRING 
4514: ST_TO_ADDR
// for i := 1 to survivorsToSpawn do
4515: LD_ADDR_VAR 0 2
4519: PUSH
4520: DOUBLE
4521: LD_INT 1
4523: DEC
4524: ST_TO_ADDR
4525: LD_EXP 77
4529: PUSH
4530: FOR_TO
4531: IFFALSE 4619
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 2 ) ) ;
4533: LD_INT 0
4535: PPUSH
4536: LD_INT 1
4538: PPUSH
4539: LD_INT 4
4541: PPUSH
4542: CALL_OW 12
4546: PPUSH
4547: LD_INT 1
4549: PPUSH
4550: LD_INT 2
4552: PPUSH
4553: CALL_OW 12
4557: PPUSH
4558: CALL_OW 380
// un = CreateHuman ;
4562: LD_ADDR_VAR 0 3
4566: PUSH
4567: CALL_OW 44
4571: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ un ;
4572: LD_ADDR_EXP 76
4576: PUSH
4577: LD_EXP 76
4581: PUSH
4582: LD_VAR 0 3
4586: ADD
4587: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4588: LD_VAR 0 3
4592: PPUSH
4593: LD_INT 19
4595: PPUSH
4596: LD_INT 0
4598: PPUSH
4599: CALL_OW 49
// ComEnterUnit ( un , ru2_bar1 ) ;
4603: LD_VAR 0 3
4607: PPUSH
4608: LD_EXP 66
4612: PPUSH
4613: CALL_OW 120
// end ;
4617: GO 4530
4619: POP
4620: POP
// for i := 1 to neededUnitsSpawn [ 1 ] + 4 do
4621: LD_ADDR_VAR 0 2
4625: PUSH
4626: DOUBLE
4627: LD_INT 1
4629: DEC
4630: ST_TO_ADDR
4631: LD_EXP 78
4635: PUSH
4636: LD_INT 1
4638: ARRAY
4639: PUSH
4640: LD_INT 4
4642: PLUS
4643: PUSH
4644: FOR_TO
4645: IFFALSE 4743
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
4647: LD_INT 0
4649: PPUSH
4650: LD_INT 1
4652: PPUSH
4653: LD_INT 1
4655: PPUSH
4656: LD_INT 3
4658: PPUSH
4659: CALL_OW 12
4663: PPUSH
4664: CALL_OW 380
// un = CreateHuman ;
4668: LD_ADDR_VAR 0 3
4672: PUSH
4673: CALL_OW 44
4677: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4678: LD_VAR 0 3
4682: PPUSH
4683: LD_INT 19
4685: PPUSH
4686: LD_INT 0
4688: PPUSH
4689: CALL_OW 49
// if i > kirovBunkersToOccupy then
4693: LD_VAR 0 2
4697: PUSH
4698: LD_EXP 70
4702: GREATER
4703: IFFALSE 4721
// ComEnterUnit ( un , ru2_bar2 ) else
4705: LD_VAR 0 3
4709: PPUSH
4710: LD_EXP 67
4714: PPUSH
4715: CALL_OW 120
4719: GO 4741
// ComEnterUnit ( un , kirovBunkersToOccupy [ i ] ) ;
4721: LD_VAR 0 3
4725: PPUSH
4726: LD_EXP 70
4730: PUSH
4731: LD_VAR 0 2
4735: ARRAY
4736: PPUSH
4737: CALL_OW 120
// end ;
4741: GO 4644
4743: POP
4744: POP
// for i := 1 to neededUnitsSpawn [ 3 ] do
4745: LD_ADDR_VAR 0 2
4749: PUSH
4750: DOUBLE
4751: LD_INT 1
4753: DEC
4754: ST_TO_ADDR
4755: LD_EXP 78
4759: PUSH
4760: LD_INT 3
4762: ARRAY
4763: PUSH
4764: FOR_TO
4765: IFFALSE 4868
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
4767: LD_INT 0
4769: PPUSH
4770: LD_INT 3
4772: PPUSH
4773: LD_INT 1
4775: PPUSH
4776: LD_INT 3
4778: PPUSH
4779: CALL_OW 12
4783: PPUSH
4784: CALL_OW 380
// un = CreateHuman ;
4788: LD_ADDR_VAR 0 3
4792: PUSH
4793: CALL_OW 44
4797: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4798: LD_VAR 0 3
4802: PPUSH
4803: LD_INT 19
4805: PPUSH
4806: LD_INT 0
4808: PPUSH
4809: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
4813: LD_VAR 0 3
4817: PPUSH
4818: LD_INT 22
4820: PUSH
4821: LD_INT 6
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 21
4830: PUSH
4831: LD_INT 3
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 30
4840: PUSH
4841: LD_INT 3
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: LIST
4852: PPUSH
4853: CALL_OW 69
4857: PUSH
4858: LD_INT 1
4860: ARRAY
4861: PPUSH
4862: CALL_OW 120
// end ;
4866: GO 4764
4868: POP
4869: POP
// for i := 1 to neededUnitsSpawn [ 4 ] do
4870: LD_ADDR_VAR 0 2
4874: PUSH
4875: DOUBLE
4876: LD_INT 1
4878: DEC
4879: ST_TO_ADDR
4880: LD_EXP 78
4884: PUSH
4885: LD_INT 4
4887: ARRAY
4888: PUSH
4889: FOR_TO
4890: IFFALSE 4996
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
4892: LD_INT 0
4894: PPUSH
4895: LD_INT 4
4897: PPUSH
4898: LD_INT 1
4900: PPUSH
4901: LD_INT 3
4903: PPUSH
4904: CALL_OW 12
4908: PPUSH
4909: CALL_OW 380
// un = CreateHuman ;
4913: LD_ADDR_VAR 0 3
4917: PUSH
4918: CALL_OW 44
4922: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4923: LD_VAR 0 3
4927: PPUSH
4928: LD_INT 19
4930: PPUSH
4931: LD_INT 0
4933: PPUSH
4934: CALL_OW 49
// ComEnterUnit ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ) ;
4938: LD_VAR 0 3
4942: PPUSH
4943: LD_INT 18
4945: PPUSH
4946: LD_INT 22
4948: PUSH
4949: LD_INT 6
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: LD_INT 21
4958: PUSH
4959: LD_INT 3
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 30
4968: PUSH
4969: LD_INT 6
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: LIST
4980: PPUSH
4981: CALL_OW 70
4985: PUSH
4986: LD_INT 1
4988: ARRAY
4989: PPUSH
4990: CALL_OW 120
// end ;
4994: GO 4889
4996: POP
4997: POP
// end ;
4998: LD_VAR 0 1
5002: RET
// export function SetSurvivorsArabianAttack ; var limit , unit ; begin
5003: LD_INT 0
5005: PPUSH
5006: PPUSH
5007: PPUSH
// survivorsArabianAttack = [ ] ;
5008: LD_ADDR_EXP 76
5012: PUSH
5013: EMPTY
5014: ST_TO_ADDR
// limit = 9 ;
5015: LD_ADDR_VAR 0 2
5019: PUSH
5020: LD_INT 9
5022: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ Popov ;
5023: LD_ADDR_EXP 76
5027: PUSH
5028: LD_EXP 76
5032: PUSH
5033: LD_EXP 59
5037: ADD
5038: ST_TO_ADDR
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 6 then
5039: LD_EXP 50
5043: PPUSH
5044: CALL_OW 302
5048: PUSH
5049: LD_EXP 50
5053: PPUSH
5054: CALL_OW 255
5058: PUSH
5059: LD_INT 6
5061: EQUAL
5062: AND
5063: IFFALSE 5095
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov ;
5065: LD_ADDR_EXP 76
5069: PUSH
5070: LD_EXP 76
5074: PUSH
5075: LD_EXP 50
5079: ADD
5080: ST_TO_ADDR
// limit = limit - 1 ;
5081: LD_ADDR_VAR 0 2
5085: PUSH
5086: LD_VAR 0 2
5090: PUSH
5091: LD_INT 1
5093: MINUS
5094: ST_TO_ADDR
// end ; if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 6 then
5095: LD_EXP 51
5099: PPUSH
5100: CALL_OW 302
5104: PUSH
5105: LD_EXP 51
5109: PPUSH
5110: CALL_OW 255
5114: PUSH
5115: LD_INT 6
5117: EQUAL
5118: AND
5119: IFFALSE 5151
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov2 ;
5121: LD_ADDR_EXP 76
5125: PUSH
5126: LD_EXP 76
5130: PUSH
5131: LD_EXP 51
5135: ADD
5136: ST_TO_ADDR
// limit = limit - 1 ;
5137: LD_ADDR_VAR 0 2
5141: PUSH
5142: LD_VAR 0 2
5146: PUSH
5147: LD_INT 1
5149: MINUS
5150: ST_TO_ADDR
// end ; for unit in other_survivors do
5151: LD_ADDR_VAR 0 3
5155: PUSH
5156: LD_EXP 53
5160: PUSH
5161: FOR_IN
5162: IFFALSE 5222
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5164: LD_VAR 0 3
5168: PPUSH
5169: CALL_OW 302
5173: PUSH
5174: LD_VAR 0 3
5178: PPUSH
5179: CALL_OW 255
5183: PUSH
5184: LD_INT 6
5186: EQUAL
5187: AND
5188: IFFALSE 5220
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5190: LD_ADDR_EXP 76
5194: PUSH
5195: LD_EXP 76
5199: PUSH
5200: LD_VAR 0 3
5204: ADD
5205: ST_TO_ADDR
// limit = limit - 1 ;
5206: LD_ADDR_VAR 0 2
5210: PUSH
5211: LD_VAR 0 2
5215: PUSH
5216: LD_INT 1
5218: MINUS
5219: ST_TO_ADDR
// end ; end ;
5220: GO 5161
5222: POP
5223: POP
// for unit in otherBeriaUnits do
5224: LD_ADDR_VAR 0 3
5228: PUSH
5229: LD_EXP 55
5233: PUSH
5234: FOR_IN
5235: IFFALSE 5295
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5237: LD_VAR 0 3
5241: PPUSH
5242: CALL_OW 302
5246: PUSH
5247: LD_VAR 0 3
5251: PPUSH
5252: CALL_OW 255
5256: PUSH
5257: LD_INT 6
5259: EQUAL
5260: AND
5261: IFFALSE 5293
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5263: LD_ADDR_EXP 76
5267: PUSH
5268: LD_EXP 76
5272: PUSH
5273: LD_VAR 0 3
5277: ADD
5278: ST_TO_ADDR
// limit = limit - 1 ;
5279: LD_ADDR_VAR 0 2
5283: PUSH
5284: LD_VAR 0 2
5288: PUSH
5289: LD_INT 1
5291: MINUS
5292: ST_TO_ADDR
// end ; end ;
5293: GO 5234
5295: POP
5296: POP
// if limit > 0 then
5297: LD_VAR 0 2
5301: PUSH
5302: LD_INT 0
5304: GREATER
5305: IFFALSE 5317
// survivorsToSpawn = limit ;
5307: LD_ADDR_EXP 77
5311: PUSH
5312: LD_VAR 0 2
5316: ST_TO_ADDR
// end ;
5317: LD_VAR 0 1
5321: RET
// export function PrepareScholtze ; begin
5322: LD_INT 0
5324: PPUSH
// uc_side = 8 ;
5325: LD_ADDR_OWVAR 20
5329: PUSH
5330: LD_INT 8
5332: ST_TO_ADDR
// Scholtze = PrepareUnitExt ( Scholtze , false ) ;
5333: LD_ADDR_EXP 52
5337: PUSH
5338: LD_STRING Scholtze
5340: PPUSH
5341: LD_INT 0
5343: PPUSH
5344: CALL 6846 0 2
5348: ST_TO_ADDR
// PlaceUnitArea ( Scholtze , ScholtzeSpawnArea , true ) ;
5349: LD_EXP 52
5353: PPUSH
5354: LD_INT 30
5356: PPUSH
5357: LD_INT 1
5359: PPUSH
5360: CALL_OW 49
// end ; end_of_file
5364: LD_VAR 0 1
5368: RET
// export amIntroUnits ; export amSupportTroops ; export amPatrol ; export amBase ; export function PrepareAmericans ; begin
5369: LD_INT 0
5371: PPUSH
// amSupportTroops = [ ] ;
5372: LD_ADDR_EXP 81
5376: PUSH
5377: EMPTY
5378: ST_TO_ADDR
// PrepareOmicronBase ;
5379: CALL 5388 0 0
// end ;
5383: LD_VAR 0 1
5387: RET
// function PrepareOmicronBase ; var base ; begin
5388: LD_INT 0
5390: PPUSH
5391: PPUSH
// amBase := PrepareBase ( omikron , OmicronBaseArea , omikron , [ 1 , 2 , 2 ] [ Difficulty ] , [ 3000 , 3000 , 0 ] , [ 7 , 3 , 4 , 2 ] ) ;
5392: LD_ADDR_EXP 83
5396: PUSH
5397: LD_INT 64
5399: PPUSH
5400: LD_INT 13
5402: PPUSH
5403: LD_STRING omikron
5405: PPUSH
5406: LD_INT 1
5408: PUSH
5409: LD_INT 2
5411: PUSH
5412: LD_INT 2
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: LIST
5419: PUSH
5420: LD_OWVAR 67
5424: ARRAY
5425: PPUSH
5426: LD_INT 3000
5428: PUSH
5429: LD_INT 3000
5431: PUSH
5432: LD_INT 0
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: LIST
5439: PPUSH
5440: LD_INT 7
5442: PUSH
5443: LD_INT 3
5445: PUSH
5446: LD_INT 4
5448: PUSH
5449: LD_INT 2
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL 36647 0 6
5462: ST_TO_ADDR
// case Difficulty of 2 :
5463: LD_OWVAR 67
5467: PUSH
5468: LD_INT 2
5470: DOUBLE
5471: EQUAL
5472: IFTRUE 5476
5474: GO 5492
5476: POP
// begin SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5477: LD_INT 51
5479: PPUSH
5480: LD_INT 1
5482: PPUSH
5483: LD_INT 1
5485: PPUSH
5486: CALL_OW 322
// end ; 3 :
5490: GO 5530
5492: LD_INT 3
5494: DOUBLE
5495: EQUAL
5496: IFTRUE 5500
5498: GO 5529
5500: POP
// begin SetTech ( tech_Tech2 , 1 , state_enabled ) ;
5501: LD_INT 49
5503: PPUSH
5504: LD_INT 1
5506: PPUSH
5507: LD_INT 1
5509: PPUSH
5510: CALL_OW 322
// SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5514: LD_INT 51
5516: PPUSH
5517: LD_INT 1
5519: PPUSH
5520: LD_INT 1
5522: PPUSH
5523: CALL_OW 322
// end ; end ;
5527: GO 5530
5529: POP
// end ;
5530: LD_VAR 0 1
5534: RET
// export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
5535: LD_INT 0
5537: PPUSH
5538: PPUSH
5539: PPUSH
5540: PPUSH
// amIntroUnits = [ ] ;
5541: LD_ADDR_EXP 80
5545: PUSH
5546: EMPTY
5547: ST_TO_ADDR
// uc_side = 1 ;
5548: LD_ADDR_OWVAR 20
5552: PUSH
5553: LD_INT 1
5555: ST_TO_ADDR
// uc_nation = nation_american ;
5556: LD_ADDR_OWVAR 21
5560: PUSH
5561: LD_INT 1
5563: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
5564: LD_ADDR_OWVAR 37
5568: PUSH
5569: LD_INT 3
5571: ST_TO_ADDR
// vc_control = control_manual ;
5572: LD_ADDR_OWVAR 38
5576: PUSH
5577: LD_INT 1
5579: ST_TO_ADDR
// vc_engine = engine_combustion ;
5580: LD_ADDR_OWVAR 39
5584: PUSH
5585: LD_INT 1
5587: ST_TO_ADDR
// vc_weapon = us_double_gun ;
5588: LD_ADDR_OWVAR 40
5592: PUSH
5593: LD_INT 5
5595: ST_TO_ADDR
// veh = CreateVehicle ;
5596: LD_ADDR_VAR 0 3
5600: PUSH
5601: CALL_OW 45
5605: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5606: LD_VAR 0 3
5610: PPUSH
5611: LD_INT 4
5613: PPUSH
5614: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
5618: LD_ADDR_EXP 80
5622: PUSH
5623: LD_EXP 80
5627: PUSH
5628: LD_VAR 0 3
5632: ADD
5633: ST_TO_ADDR
// PlaceUnitArea ( veh , CutsceneAmSupportSpawnArea , false ) ;
5634: LD_VAR 0 3
5638: PPUSH
5639: LD_INT 5
5641: PPUSH
5642: LD_INT 0
5644: PPUSH
5645: CALL_OW 49
// for i := 1 to 5 do
5649: LD_ADDR_VAR 0 2
5653: PUSH
5654: DOUBLE
5655: LD_INT 1
5657: DEC
5658: ST_TO_ADDR
5659: LD_INT 5
5661: PUSH
5662: FOR_TO
5663: IFFALSE 5760
// begin hc_name :=  ;
5665: LD_ADDR_OWVAR 26
5669: PUSH
5670: LD_STRING 
5672: ST_TO_ADDR
// hc_gallery :=  ;
5673: LD_ADDR_OWVAR 33
5677: PUSH
5678: LD_STRING 
5680: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
5681: LD_INT 0
5683: PPUSH
5684: LD_INT 1
5686: PPUSH
5687: CALL_OW 381
// human = CreateHuman ;
5691: LD_ADDR_VAR 0 4
5695: PUSH
5696: CALL_OW 44
5700: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
5701: LD_ADDR_EXP 80
5705: PUSH
5706: LD_EXP 80
5710: PUSH
5711: LD_VAR 0 4
5715: ADD
5716: ST_TO_ADDR
// if i < 5 then
5717: LD_VAR 0 2
5721: PUSH
5722: LD_INT 5
5724: LESS
5725: IFFALSE 5744
// PlaceUnitArea ( human , CutsceneAmSupportSpawnArea , false ) else
5727: LD_VAR 0 4
5731: PPUSH
5732: LD_INT 5
5734: PPUSH
5735: LD_INT 0
5737: PPUSH
5738: CALL_OW 49
5742: GO 5758
// begin PlaceHumanInUnit ( human , veh ) ;
5744: LD_VAR 0 4
5748: PPUSH
5749: LD_VAR 0 3
5753: PPUSH
5754: CALL_OW 52
// end ; end ;
5758: GO 5662
5760: POP
5761: POP
// end ;
5762: LD_VAR 0 1
5766: RET
// export function PrepareAmericanSupportTroops ( soldiersAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road ; begin
5767: LD_INT 0
5769: PPUSH
5770: PPUSH
5771: PPUSH
5772: PPUSH
5773: PPUSH
// uc_side := 1 ;
5774: LD_ADDR_OWVAR 20
5778: PUSH
5779: LD_INT 1
5781: ST_TO_ADDR
// uc_nation := 1 ;
5782: LD_ADDR_OWVAR 21
5786: PUSH
5787: LD_INT 1
5789: ST_TO_ADDR
// hc_name :=  ;
5790: LD_ADDR_OWVAR 26
5794: PUSH
5795: LD_STRING 
5797: ST_TO_ADDR
// hc_gallery :=  ;
5798: LD_ADDR_OWVAR 33
5802: PUSH
5803: LD_STRING 
5805: ST_TO_ADDR
// for i := 1 to soldiersAmount do
5806: LD_ADDR_VAR 0 6
5810: PUSH
5811: DOUBLE
5812: LD_INT 1
5814: DEC
5815: ST_TO_ADDR
5816: LD_VAR 0 1
5820: PUSH
5821: FOR_TO
5822: IFFALSE 5881
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5824: LD_INT 0
5826: PPUSH
5827: LD_EXP 41
5831: PPUSH
5832: CALL_OW 381
// un = CreateHuman ;
5836: LD_ADDR_VAR 0 7
5840: PUSH
5841: CALL_OW 44
5845: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
5846: LD_ADDR_EXP 81
5850: PUSH
5851: LD_EXP 81
5855: PUSH
5856: LD_VAR 0 7
5860: ADD
5861: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5862: LD_VAR 0 7
5866: PPUSH
5867: LD_VAR 0 4
5871: PPUSH
5872: LD_INT 0
5874: PPUSH
5875: CALL_OW 49
// end ;
5879: GO 5821
5881: POP
5882: POP
// for i := 1 to scientistsAmount do
5883: LD_ADDR_VAR 0 6
5887: PUSH
5888: DOUBLE
5889: LD_INT 1
5891: DEC
5892: ST_TO_ADDR
5893: LD_VAR 0 2
5897: PUSH
5898: FOR_TO
5899: IFFALSE 5958
// begin PrepareScientist ( false , enemySkillLevel ) ;
5901: LD_INT 0
5903: PPUSH
5904: LD_EXP 41
5908: PPUSH
5909: CALL_OW 384
// un = CreateHuman ;
5913: LD_ADDR_VAR 0 7
5917: PUSH
5918: CALL_OW 44
5922: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
5923: LD_ADDR_EXP 81
5927: PUSH
5928: LD_EXP 81
5932: PUSH
5933: LD_VAR 0 7
5937: ADD
5938: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5939: LD_VAR 0 7
5943: PPUSH
5944: LD_VAR 0 4
5948: PPUSH
5949: LD_INT 0
5951: PPUSH
5952: CALL_OW 49
// end ;
5956: GO 5898
5958: POP
5959: POP
// for i := 1 to vehiclesAmount do
5960: LD_ADDR_VAR 0 6
5964: PUSH
5965: DOUBLE
5966: LD_INT 1
5968: DEC
5969: ST_TO_ADDR
5970: LD_VAR 0 3
5974: PUSH
5975: FOR_TO
5976: IFFALSE 6142
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5978: LD_ADDR_OWVAR 40
5982: PUSH
5983: LD_INT 2
5985: PUSH
5986: LD_INT 4
5988: PUSH
5989: LD_INT 3
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: LIST
5996: PUSH
5997: LD_INT 1
5999: PPUSH
6000: LD_INT 3
6002: PPUSH
6003: CALL_OW 12
6007: ARRAY
6008: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
6009: LD_ADDR_OWVAR 37
6013: PUSH
6014: LD_INT 3
6016: ST_TO_ADDR
// vc_control = control_manual ;
6017: LD_ADDR_OWVAR 38
6021: PUSH
6022: LD_INT 1
6024: ST_TO_ADDR
// vc_engine = engine_combustion ;
6025: LD_ADDR_OWVAR 39
6029: PUSH
6030: LD_INT 1
6032: ST_TO_ADDR
// veh = CreateVehicle ;
6033: LD_ADDR_VAR 0 8
6037: PUSH
6038: CALL_OW 45
6042: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ veh ;
6043: LD_ADDR_EXP 81
6047: PUSH
6048: LD_EXP 81
6052: PUSH
6053: LD_VAR 0 8
6057: ADD
6058: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6059: LD_VAR 0 8
6063: PPUSH
6064: LD_VAR 0 4
6068: PPUSH
6069: LD_INT 0
6071: PPUSH
6072: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
6076: LD_INT 0
6078: PPUSH
6079: LD_EXP 41
6083: PPUSH
6084: CALL_OW 383
// un = CreateHuman ;
6088: LD_ADDR_VAR 0 7
6092: PUSH
6093: CALL_OW 44
6097: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6098: LD_ADDR_EXP 81
6102: PUSH
6103: LD_EXP 81
6107: PUSH
6108: LD_VAR 0 7
6112: ADD
6113: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6114: LD_VAR 0 7
6118: PPUSH
6119: LD_VAR 0 8
6123: PPUSH
6124: CALL_OW 52
// SetFuel ( veh , 100 ) ;
6128: LD_VAR 0 8
6132: PPUSH
6133: LD_INT 100
6135: PPUSH
6136: CALL_OW 240
// end ;
6140: GO 5975
6142: POP
6143: POP
// case area of NorthAmericanSpawnArea :
6144: LD_VAR 0 4
6148: PUSH
6149: LD_INT 7
6151: DOUBLE
6152: EQUAL
6153: IFTRUE 6157
6155: GO 6168
6157: POP
// road = NorthRoadArea ; SouthAmericanSpawnArea1 :
6158: LD_ADDR_VAR 0 9
6162: PUSH
6163: LD_INT 10
6165: ST_TO_ADDR
6166: GO 6207
6168: LD_INT 9
6170: DOUBLE
6171: EQUAL
6172: IFTRUE 6176
6174: GO 6187
6176: POP
// road = SouthRoadArea1 ; SouthAmericanSpawnArea2 :
6177: LD_ADDR_VAR 0 9
6181: PUSH
6182: LD_INT 11
6184: ST_TO_ADDR
6185: GO 6207
6187: LD_INT 8
6189: DOUBLE
6190: EQUAL
6191: IFTRUE 6195
6193: GO 6206
6195: POP
// road = SouthRoadArea2 ; end ;
6196: LD_ADDR_VAR 0 9
6200: PUSH
6201: LD_INT 12
6203: ST_TO_ADDR
6204: GO 6207
6206: POP
// MoveToBase ( amSupportTroops , road ) ;
6207: LD_EXP 81
6211: PPUSH
6212: LD_VAR 0 9
6216: PPUSH
6217: CALL 17927 0 2
// end ;
6221: LD_VAR 0 5
6225: RET
// export function PrepareAmericanPatrol ; var un ; begin
6226: LD_INT 0
6228: PPUSH
6229: PPUSH
// amPatrol = [ ] ;
6230: LD_ADDR_EXP 82
6234: PUSH
6235: EMPTY
6236: ST_TO_ADDR
// uc_side = 1 ;
6237: LD_ADDR_OWVAR 20
6241: PUSH
6242: LD_INT 1
6244: ST_TO_ADDR
// uc_nation = 1 ;
6245: LD_ADDR_OWVAR 21
6249: PUSH
6250: LD_INT 1
6252: ST_TO_ADDR
// un = PrepareUnitExt ( Campell , false ) ;
6253: LD_ADDR_VAR 0 2
6257: PUSH
6258: LD_STRING Campell
6260: PPUSH
6261: LD_INT 0
6263: PPUSH
6264: CALL 6846 0 2
6268: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6269: LD_ADDR_EXP 82
6273: PUSH
6274: LD_EXP 82
6278: PUSH
6279: LD_VAR 0 2
6283: ADD
6284: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6285: LD_VAR 0 2
6289: PPUSH
6290: LD_INT 14
6292: PPUSH
6293: LD_INT 0
6295: PPUSH
6296: CALL_OW 49
// SetClass ( un , 1 ) ;
6300: LD_VAR 0 2
6304: PPUSH
6305: LD_INT 1
6307: PPUSH
6308: CALL_OW 336
// PrepareSoldier ( sex_male , enemySkillLevel ) ;
6312: LD_INT 1
6314: PPUSH
6315: LD_EXP 41
6319: PPUSH
6320: CALL_OW 381
// un = CreateHuman ;
6324: LD_ADDR_VAR 0 2
6328: PUSH
6329: CALL_OW 44
6333: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6334: LD_ADDR_EXP 82
6338: PUSH
6339: LD_EXP 82
6343: PUSH
6344: LD_VAR 0 2
6348: ADD
6349: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6350: LD_VAR 0 2
6354: PPUSH
6355: LD_INT 14
6357: PPUSH
6358: LD_INT 0
6360: PPUSH
6361: CALL_OW 49
// ComAttackUnit ( amPatrol , Scholtze ) ;
6365: LD_EXP 82
6369: PPUSH
6370: LD_EXP 52
6374: PPUSH
6375: CALL_OW 115
// end ; end_of_file
6379: LD_VAR 0 1
6383: RET
// export northGroup , southGroup ; export function PrepareArabian ; var i , un , veh ; begin
6384: LD_INT 0
6386: PPUSH
6387: PPUSH
6388: PPUSH
6389: PPUSH
// northGroup = [ ] ;
6390: LD_ADDR_EXP 84
6394: PUSH
6395: EMPTY
6396: ST_TO_ADDR
// southGroup = [ ] ;
6397: LD_ADDR_EXP 85
6401: PUSH
6402: EMPTY
6403: ST_TO_ADDR
// uc_side = 2 ;
6404: LD_ADDR_OWVAR 20
6408: PUSH
6409: LD_INT 2
6411: ST_TO_ADDR
// uc_nation = 2 ;
6412: LD_ADDR_OWVAR 21
6416: PUSH
6417: LD_INT 2
6419: ST_TO_ADDR
// hc_name :=  ;
6420: LD_ADDR_OWVAR 26
6424: PUSH
6425: LD_STRING 
6427: ST_TO_ADDR
// hc_gallery :=  ;
6428: LD_ADDR_OWVAR 33
6432: PUSH
6433: LD_STRING 
6435: ST_TO_ADDR
// for i := 1 to 10 do
6436: LD_ADDR_VAR 0 2
6440: PUSH
6441: DOUBLE
6442: LD_INT 1
6444: DEC
6445: ST_TO_ADDR
6446: LD_INT 10
6448: PUSH
6449: FOR_TO
6450: IFFALSE 6564
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
6452: LD_INT 13
6454: PPUSH
6455: LD_INT 1
6457: PPUSH
6458: LD_INT 1
6460: PPUSH
6461: LD_INT 26
6463: PPUSH
6464: LD_INT 100
6466: PPUSH
6467: CALL 33238 0 5
// veh = CreateVehicle ;
6471: LD_ADDR_VAR 0 4
6475: PUSH
6476: CALL_OW 45
6480: ST_TO_ADDR
// southGroup = southGroup ^ veh ;
6481: LD_ADDR_EXP 85
6485: PUSH
6486: LD_EXP 85
6490: PUSH
6491: LD_VAR 0 4
6495: ADD
6496: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea2 , false ) ;
6497: LD_VAR 0 4
6501: PPUSH
6502: LD_INT 23
6504: PPUSH
6505: LD_INT 0
6507: PPUSH
6508: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6512: LD_INT 0
6514: PPUSH
6515: LD_INT 8
6517: PPUSH
6518: CALL_OW 383
// un = CreateHuman ;
6522: LD_ADDR_VAR 0 3
6526: PUSH
6527: CALL_OW 44
6531: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6532: LD_ADDR_EXP 85
6536: PUSH
6537: LD_EXP 85
6541: PUSH
6542: LD_VAR 0 3
6546: ADD
6547: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6548: LD_VAR 0 3
6552: PPUSH
6553: LD_VAR 0 4
6557: PPUSH
6558: CALL_OW 52
// end ;
6562: GO 6449
6564: POP
6565: POP
// for i := 1 to 20 do
6566: LD_ADDR_VAR 0 2
6570: PUSH
6571: DOUBLE
6572: LD_INT 1
6574: DEC
6575: ST_TO_ADDR
6576: LD_INT 20
6578: PUSH
6579: FOR_TO
6580: IFFALSE 6635
// begin PrepareSoldier ( false , 8 ) ;
6582: LD_INT 0
6584: PPUSH
6585: LD_INT 8
6587: PPUSH
6588: CALL_OW 381
// un = CreateHuman ;
6592: LD_ADDR_VAR 0 3
6596: PUSH
6597: CALL_OW 44
6601: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6602: LD_ADDR_EXP 85
6606: PUSH
6607: LD_EXP 85
6611: PUSH
6612: LD_VAR 0 3
6616: ADD
6617: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6618: LD_VAR 0 3
6622: PPUSH
6623: LD_INT 23
6625: PPUSH
6626: LD_INT 0
6628: PPUSH
6629: CALL_OW 49
// end ;
6633: GO 6579
6635: POP
6636: POP
// for i := 1 to 20 do
6637: LD_ADDR_VAR 0 2
6641: PUSH
6642: DOUBLE
6643: LD_INT 1
6645: DEC
6646: ST_TO_ADDR
6647: LD_INT 20
6649: PUSH
6650: FOR_TO
6651: IFFALSE 6709
// begin PrepareHuman ( false , class_mortar , 8 ) ;
6653: LD_INT 0
6655: PPUSH
6656: LD_INT 8
6658: PPUSH
6659: LD_INT 8
6661: PPUSH
6662: CALL_OW 380
// un = CreateHuman ;
6666: LD_ADDR_VAR 0 3
6670: PUSH
6671: CALL_OW 44
6675: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6676: LD_ADDR_EXP 85
6680: PUSH
6681: LD_EXP 85
6685: PUSH
6686: LD_VAR 0 3
6690: ADD
6691: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6692: LD_VAR 0 3
6696: PPUSH
6697: LD_INT 23
6699: PPUSH
6700: LD_INT 0
6702: PPUSH
6703: CALL_OW 49
// end ;
6707: GO 6650
6709: POP
6710: POP
// for i := 1 to 10 do
6711: LD_ADDR_VAR 0 2
6715: PUSH
6716: DOUBLE
6717: LD_INT 1
6719: DEC
6720: ST_TO_ADDR
6721: LD_INT 10
6723: PUSH
6724: FOR_TO
6725: IFFALSE 6839
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
6727: LD_INT 13
6729: PPUSH
6730: LD_INT 1
6732: PPUSH
6733: LD_INT 1
6735: PPUSH
6736: LD_INT 26
6738: PPUSH
6739: LD_INT 100
6741: PPUSH
6742: CALL 33238 0 5
// veh = CreateVehicle ;
6746: LD_ADDR_VAR 0 4
6750: PUSH
6751: CALL_OW 45
6755: ST_TO_ADDR
// northGroup = northGroup ^ veh ;
6756: LD_ADDR_EXP 84
6760: PUSH
6761: LD_EXP 84
6765: PUSH
6766: LD_VAR 0 4
6770: ADD
6771: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
6772: LD_VAR 0 4
6776: PPUSH
6777: LD_INT 22
6779: PPUSH
6780: LD_INT 0
6782: PPUSH
6783: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6787: LD_INT 0
6789: PPUSH
6790: LD_INT 8
6792: PPUSH
6793: CALL_OW 383
// un = CreateHuman ;
6797: LD_ADDR_VAR 0 3
6801: PUSH
6802: CALL_OW 44
6806: ST_TO_ADDR
// northGroup = northGroup ^ un ;
6807: LD_ADDR_EXP 84
6811: PUSH
6812: LD_EXP 84
6816: PUSH
6817: LD_VAR 0 3
6821: ADD
6822: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6823: LD_VAR 0 3
6827: PPUSH
6828: LD_VAR 0 4
6832: PPUSH
6833: CALL_OW 52
// end ;
6837: GO 6724
6839: POP
6840: POP
// end ; end_of_file
6841: LD_VAR 0 1
6845: RET
// export function PrepareUnitExt ( ident , exist_mode ) ; var unit ; begin
6846: LD_INT 0
6848: PPUSH
6849: PPUSH
// if exist_mode then
6850: LD_VAR 0 2
6854: IFFALSE 6879
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
6856: LD_ADDR_VAR 0 4
6860: PUSH
6861: LD_EXP 34
6865: PUSH
6866: LD_VAR 0 1
6870: STR
6871: PPUSH
6872: CALL_OW 34
6876: ST_TO_ADDR
6877: GO 6894
// unit := NewCharacter ( ident ) ;
6879: LD_ADDR_VAR 0 4
6883: PUSH
6884: LD_VAR 0 1
6888: PPUSH
6889: CALL_OW 25
6893: ST_TO_ADDR
// result := unit ;
6894: LD_ADDR_VAR 0 3
6898: PUSH
6899: LD_VAR 0 4
6903: ST_TO_ADDR
// end ;
6904: LD_VAR 0 3
6908: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
6909: LD_INT 0
6911: PPUSH
6912: PPUSH
6913: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze ] ;
6914: LD_ADDR_VAR 0 1
6918: PUSH
6919: LD_VAR 0 1
6923: PUSH
6924: LD_EXP 46
6928: PUSH
6929: LD_EXP 47
6933: PUSH
6934: LD_EXP 50
6938: PUSH
6939: LD_EXP 51
6943: PUSH
6944: LD_EXP 48
6948: PUSH
6949: LD_EXP 49
6953: PUSH
6954: LD_EXP 52
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: DIFF
6968: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
6969: LD_ADDR_VAR 0 7
6973: PUSH
6974: LD_VAR 0 1
6978: PUSH
6979: LD_INT 1
6981: PPUSH
6982: LD_VAR 0 1
6986: PPUSH
6987: CALL_OW 12
6991: ARRAY
6992: ST_TO_ADDR
// if radio then
6993: LD_VAR 0 4
6997: IFFALSE 7046
// begin if GetSex ( speaker ) = sex_male then
6999: LD_VAR 0 7
7003: PPUSH
7004: CALL_OW 258
7008: PUSH
7009: LD_INT 1
7011: EQUAL
7012: IFFALSE 7030
// SayRadio ( speaker , dialogMID ) else
7014: LD_VAR 0 7
7018: PPUSH
7019: LD_VAR 0 2
7023: PPUSH
7024: CALL_OW 94
7028: GO 7044
// SayRadio ( speaker , dialogFID ) ;
7030: LD_VAR 0 7
7034: PPUSH
7035: LD_VAR 0 3
7039: PPUSH
7040: CALL_OW 94
// end else
7044: GO 7091
// begin if GetSex ( speaker ) = sex_male then
7046: LD_VAR 0 7
7050: PPUSH
7051: CALL_OW 258
7055: PUSH
7056: LD_INT 1
7058: EQUAL
7059: IFFALSE 7077
// Say ( speaker , dialogMID ) else
7061: LD_VAR 0 7
7065: PPUSH
7066: LD_VAR 0 2
7070: PPUSH
7071: CALL_OW 88
7075: GO 7091
// Say ( speaker , dialogFID ) ;
7077: LD_VAR 0 7
7081: PPUSH
7082: LD_VAR 0 3
7086: PPUSH
7087: CALL_OW 88
// end ; result := speaker ;
7091: LD_ADDR_VAR 0 5
7095: PUSH
7096: LD_VAR 0 7
7100: ST_TO_ADDR
// end ;
7101: LD_VAR 0 5
7105: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
7106: LD_INT 0
7108: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
7109: LD_VAR 0 1
7113: PPUSH
7114: CALL_OW 255
7118: PUSH
7119: LD_VAR 0 3
7123: EQUAL
7124: PUSH
7125: LD_VAR 0 1
7129: PPUSH
7130: CALL_OW 302
7134: AND
7135: IFFALSE 7157
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
7137: LD_VAR 0 1
7141: PPUSH
7142: LD_EXP 33
7146: PUSH
7147: LD_VAR 0 2
7151: STR
7152: PPUSH
7153: CALL_OW 38
// end ;
7157: LD_VAR 0 4
7161: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
7162: LD_INT 0
7164: PPUSH
7165: PPUSH
7166: PPUSH
// resultCharactersToSave = [ ] ;
7167: LD_ADDR_VAR 0 6
7171: PUSH
7172: EMPTY
7173: ST_TO_ADDR
// for unit in characters do
7174: LD_ADDR_VAR 0 5
7178: PUSH
7179: LD_VAR 0 1
7183: PUSH
7184: FOR_IN
7185: IFFALSE 7233
// if GetSide ( unit ) = side and IsOK ( unit ) then
7187: LD_VAR 0 5
7191: PPUSH
7192: CALL_OW 255
7196: PUSH
7197: LD_VAR 0 3
7201: EQUAL
7202: PUSH
7203: LD_VAR 0 5
7207: PPUSH
7208: CALL_OW 302
7212: AND
7213: IFFALSE 7231
// resultCharactersToSave = resultCharactersToSave ^ unit ;
7215: LD_ADDR_VAR 0 6
7219: PUSH
7220: LD_VAR 0 6
7224: PUSH
7225: LD_VAR 0 5
7229: ADD
7230: ST_TO_ADDR
7231: GO 7184
7233: POP
7234: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
7235: LD_VAR 0 6
7239: PPUSH
7240: LD_EXP 33
7244: PUSH
7245: LD_VAR 0 2
7249: STR
7250: PPUSH
7251: CALL_OW 38
// end ;
7255: LD_VAR 0 4
7259: RET
// export function SelectCharacters ( maxUnitToChoose ) ; var i , charsToChoose , selectedPeople ; begin
7260: LD_INT 0
7262: PPUSH
7263: PPUSH
7264: PPUSH
7265: PPUSH
// charsToChoose = otherKirovUnits ;
7266: LD_ADDR_VAR 0 4
7270: PUSH
7271: LD_EXP 62
7275: ST_TO_ADDR
// charsToChoose = charsToChoose ^ otherBeriaUnits ;
7276: LD_ADDR_VAR 0 4
7280: PUSH
7281: LD_VAR 0 4
7285: PUSH
7286: LD_EXP 55
7290: ADD
7291: ST_TO_ADDR
// charsToChoose = charsToChoose ^ other_survivors ;
7292: LD_ADDR_VAR 0 4
7296: PUSH
7297: LD_VAR 0 4
7301: PUSH
7302: LD_EXP 53
7306: ADD
7307: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov ;
7308: LD_ADDR_VAR 0 4
7312: PUSH
7313: LD_VAR 0 4
7317: PUSH
7318: LD_EXP 50
7322: ADD
7323: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov2 ;
7324: LD_ADDR_VAR 0 4
7328: PUSH
7329: LD_VAR 0 4
7333: PUSH
7334: LD_EXP 51
7338: ADD
7339: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , maxUnitToChoose , maxUnitToChoose , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Kurin ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
7340: LD_ADDR_VAR 0 5
7344: PUSH
7345: LD_STRING text
7347: PPUSH
7348: LD_VAR 0 1
7352: PPUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: LD_INT -5
7360: PUSH
7361: LD_EXP 46
7365: PUSH
7366: LD_EXP 47
7370: PUSH
7371: LD_EXP 49
7375: PUSH
7376: LD_EXP 48
7380: PUSH
7381: LD_INT -6
7383: PUSH
7384: LD_INT -2
7386: PUSH
7387: LD_INT -3
7389: PUSH
7390: LD_INT -5
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: PUSH
7404: LD_VAR 0 4
7408: ADD
7409: PUSH
7410: LD_INT -6
7412: PUSH
7413: LD_INT -4
7415: PUSH
7416: LD_EXP 58
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: LIST
7425: ADD
7426: PPUSH
7427: LD_INT 1
7429: PUSH
7430: LD_INT 3
7432: PUSH
7433: LD_INT 2
7435: PUSH
7436: LD_INT 1
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: PUSH
7443: LD_INT 4
7445: PUSH
7446: LD_INT 1
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: PPUSH
7459: CALL_OW 42
7463: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
7464: LD_VAR 0 4
7468: PPUSH
7469: LD_INT 6
7471: PPUSH
7472: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
7476: LD_VAR 0 5
7480: PPUSH
7481: LD_INT 3
7483: PPUSH
7484: CALL_OW 235
// SetSurvivorsArabianAttack ;
7488: CALL 5003 0 0
// MoveKurinUnitsToBuildings ;
7492: CALL 8930 0 0
// end ;
7496: LD_VAR 0 2
7500: RET
// export function FindNotFullBuildingInArea ( area , side , buildingType ) ; var building ; begin
7501: LD_INT 0
7503: PPUSH
7504: PPUSH
// for building in FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , buildingType ] ] ) do
7505: LD_ADDR_VAR 0 5
7509: PUSH
7510: LD_VAR 0 1
7514: PPUSH
7515: LD_INT 22
7517: PUSH
7518: LD_VAR 0 2
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: PUSH
7527: LD_INT 21
7529: PUSH
7530: LD_INT 3
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PUSH
7537: LD_INT 30
7539: PUSH
7540: LD_VAR 0 3
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: LIST
7553: PPUSH
7554: CALL_OW 70
7558: PUSH
7559: FOR_IN
7560: IFFALSE 7593
// begin if UnitsInside ( building ) < 6 then
7562: LD_VAR 0 5
7566: PPUSH
7567: CALL_OW 313
7571: PUSH
7572: LD_INT 6
7574: LESS
7575: IFFALSE 7591
// begin result = building ;
7577: LD_ADDR_VAR 0 4
7581: PUSH
7582: LD_VAR 0 5
7586: ST_TO_ADDR
// exit ;
7587: POP
7588: POP
7589: GO 7603
// end ; end ;
7591: GO 7559
7593: POP
7594: POP
// result = 0 ;
7595: LD_ADDR_VAR 0 4
7599: PUSH
7600: LD_INT 0
7602: ST_TO_ADDR
// end ;
7603: LD_VAR 0 4
7607: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
7608: LD_INT 0
7610: PPUSH
7611: PPUSH
7612: PPUSH
7613: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
7614: LD_ADDR_VAR 0 6
7618: PUSH
7619: LD_INT 34
7621: PUSH
7622: LD_INT 71
7624: PUSH
7625: LD_INT 70
7627: PUSH
7628: LD_INT 69
7630: PUSH
7631: LD_INT 39
7633: PUSH
7634: LD_INT 31
7636: PUSH
7637: LD_INT 14
7639: PUSH
7640: LD_INT 10
7642: PUSH
7643: LD_INT 40
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: ST_TO_ADDR
// resultWeapons = [ ] ;
7657: LD_ADDR_VAR 0 5
7661: PUSH
7662: EMPTY
7663: ST_TO_ADDR
// for i := 1 to weaponTechs do
7664: LD_ADDR_VAR 0 4
7668: PUSH
7669: DOUBLE
7670: LD_INT 1
7672: DEC
7673: ST_TO_ADDR
7674: LD_VAR 0 6
7678: PUSH
7679: FOR_TO
7680: IFFALSE 7867
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
7682: LD_VAR 0 6
7686: PUSH
7687: LD_VAR 0 4
7691: ARRAY
7692: PPUSH
7693: LD_VAR 0 2
7697: PPUSH
7698: CALL_OW 482
7702: PUSH
7703: LD_VAR 0 6
7707: PUSH
7708: LD_VAR 0 4
7712: ARRAY
7713: PPUSH
7714: LD_VAR 0 1
7718: PPUSH
7719: CALL_OW 321
7723: PUSH
7724: LD_INT 2
7726: EQUAL
7727: AND
7728: IFFALSE 7865
// case nation of nation_american :
7730: LD_VAR 0 2
7734: PUSH
7735: LD_INT 1
7737: DOUBLE
7738: EQUAL
7739: IFTRUE 7743
7741: GO 7778
7743: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
7744: LD_ADDR_VAR 0 5
7748: PUSH
7749: LD_VAR 0 5
7753: PUSH
7754: LD_VAR 0 6
7758: PUSH
7759: LD_VAR 0 4
7763: ARRAY
7764: PPUSH
7765: LD_VAR 0 2
7769: PPUSH
7770: CALL 7884 0 2
7774: ADD
7775: ST_TO_ADDR
7776: GO 7865
7778: LD_INT 2
7780: DOUBLE
7781: EQUAL
7782: IFTRUE 7786
7784: GO 7821
7786: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
7787: LD_ADDR_VAR 0 5
7791: PUSH
7792: LD_VAR 0 5
7796: PUSH
7797: LD_VAR 0 6
7801: PUSH
7802: LD_VAR 0 4
7806: ARRAY
7807: PPUSH
7808: LD_VAR 0 2
7812: PPUSH
7813: CALL 7884 0 2
7817: ADD
7818: ST_TO_ADDR
7819: GO 7865
7821: LD_INT 3
7823: DOUBLE
7824: EQUAL
7825: IFTRUE 7829
7827: GO 7864
7829: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
7830: LD_ADDR_VAR 0 5
7834: PUSH
7835: LD_VAR 0 5
7839: PUSH
7840: LD_VAR 0 6
7844: PUSH
7845: LD_VAR 0 4
7849: ARRAY
7850: PPUSH
7851: LD_VAR 0 2
7855: PPUSH
7856: CALL 7884 0 2
7860: ADD
7861: ST_TO_ADDR
7862: GO 7865
7864: POP
// end ;
7865: GO 7679
7867: POP
7868: POP
// result = resultWeapons ;
7869: LD_ADDR_VAR 0 3
7873: PUSH
7874: LD_VAR 0 5
7878: ST_TO_ADDR
// end ;
7879: LD_VAR 0 3
7883: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
7884: LD_INT 0
7886: PPUSH
// case tech of tech_AdvMet :
7887: LD_VAR 0 1
7891: PUSH
7892: LD_INT 34
7894: DOUBLE
7895: EQUAL
7896: IFTRUE 7900
7898: GO 7928
7900: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
7901: LD_ADDR_VAR 0 3
7905: PUSH
7906: LD_INT 6
7908: PUSH
7909: LD_STRING 
7911: PUSH
7912: LD_INT 46
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: LIST
7919: PUSH
7920: LD_VAR 0 2
7924: ARRAY
7925: ST_TO_ADDR
7926: GO 8217
7928: LD_INT 71
7930: DOUBLE
7931: EQUAL
7932: IFTRUE 7936
7934: GO 7964
7936: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
7937: LD_ADDR_VAR 0 3
7941: PUSH
7942: LD_STRING 
7944: PUSH
7945: LD_STRING 
7947: PUSH
7948: LD_INT 47
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: LIST
7955: PUSH
7956: LD_VAR 0 2
7960: ARRAY
7961: ST_TO_ADDR
7962: GO 8217
7964: LD_INT 70
7966: DOUBLE
7967: EQUAL
7968: IFTRUE 7972
7970: GO 8000
7972: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
7973: LD_ADDR_VAR 0 3
7977: PUSH
7978: LD_STRING 
7980: PUSH
7981: LD_INT 26
7983: PUSH
7984: LD_STRING 
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: LIST
7991: PUSH
7992: LD_VAR 0 2
7996: ARRAY
7997: ST_TO_ADDR
7998: GO 8217
8000: LD_INT 69
8002: DOUBLE
8003: EQUAL
8004: IFTRUE 8008
8006: GO 8036
8008: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
8009: LD_ADDR_VAR 0 3
8013: PUSH
8014: LD_INT 4
8016: PUSH
8017: LD_INT 25
8019: PUSH
8020: LD_INT 43
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: PUSH
8028: LD_VAR 0 2
8032: ARRAY
8033: ST_TO_ADDR
8034: GO 8217
8036: LD_INT 39
8038: DOUBLE
8039: EQUAL
8040: IFTRUE 8044
8042: GO 8072
8044: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
8045: LD_ADDR_VAR 0 3
8049: PUSH
8050: LD_INT 5
8052: PUSH
8053: LD_INT 27
8055: PUSH
8056: LD_INT 44
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: LIST
8063: PUSH
8064: LD_VAR 0 2
8068: ARRAY
8069: ST_TO_ADDR
8070: GO 8217
8072: LD_INT 31
8074: DOUBLE
8075: EQUAL
8076: IFTRUE 8080
8078: GO 8108
8080: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
8081: LD_ADDR_VAR 0 3
8085: PUSH
8086: LD_STRING 
8088: PUSH
8089: LD_STRING 
8091: PUSH
8092: LD_INT 49
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: LIST
8099: PUSH
8100: LD_VAR 0 2
8104: ARRAY
8105: ST_TO_ADDR
8106: GO 8217
8108: LD_INT 14
8110: DOUBLE
8111: EQUAL
8112: IFTRUE 8116
8114: GO 8144
8116: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
8117: LD_ADDR_VAR 0 3
8121: PUSH
8122: LD_INT 10
8124: PUSH
8125: LD_STRING 
8127: PUSH
8128: LD_STRING 
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: LIST
8135: PUSH
8136: LD_VAR 0 2
8140: ARRAY
8141: ST_TO_ADDR
8142: GO 8217
8144: LD_INT 10
8146: DOUBLE
8147: EQUAL
8148: IFTRUE 8152
8150: GO 8180
8152: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
8153: LD_ADDR_VAR 0 3
8157: PUSH
8158: LD_INT 9
8160: PUSH
8161: LD_STRING 
8163: PUSH
8164: LD_STRING 
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: PUSH
8172: LD_VAR 0 2
8176: ARRAY
8177: ST_TO_ADDR
8178: GO 8217
8180: LD_INT 40
8182: DOUBLE
8183: EQUAL
8184: IFTRUE 8188
8186: GO 8216
8188: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
8189: LD_ADDR_VAR 0 3
8193: PUSH
8194: LD_INT 7
8196: PUSH
8197: LD_INT 28
8199: PUSH
8200: LD_INT 45
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: LIST
8207: PUSH
8208: LD_VAR 0 2
8212: ARRAY
8213: ST_TO_ADDR
8214: GO 8217
8216: POP
// end ;
8217: LD_VAR 0 3
8221: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
8222: LD_INT 0
8224: PPUSH
8225: PPUSH
// dir := GetDir ( bunker ) - 3 ;
8226: LD_ADDR_VAR 0 4
8230: PUSH
8231: LD_VAR 0 2
8235: PPUSH
8236: CALL_OW 254
8240: PUSH
8241: LD_INT 3
8243: MINUS
8244: ST_TO_ADDR
// if dir < 0 then
8245: LD_VAR 0 4
8249: PUSH
8250: LD_INT 0
8252: LESS
8253: IFFALSE 8269
// dir := 6 + dir ;
8255: LD_ADDR_VAR 0 4
8259: PUSH
8260: LD_INT 6
8262: PUSH
8263: LD_VAR 0 4
8267: PLUS
8268: ST_TO_ADDR
// SetDir ( un , dir ) ;
8269: LD_VAR 0 1
8273: PPUSH
8274: LD_VAR 0 4
8278: PPUSH
8279: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
8283: LD_VAR 0 1
8287: PPUSH
8288: LD_VAR 0 2
8292: PPUSH
8293: CALL_OW 52
// result = un ;
8297: LD_ADDR_VAR 0 3
8301: PUSH
8302: LD_VAR 0 1
8306: ST_TO_ADDR
// end ;
8307: LD_VAR 0 3
8311: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8312: LD_INT 0
8314: PPUSH
8315: PPUSH
8316: PPUSH
// uc_side := GetSide ( b ) ;
8317: LD_ADDR_OWVAR 20
8321: PUSH
8322: LD_VAR 0 2
8326: PPUSH
8327: CALL_OW 255
8331: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8332: LD_ADDR_OWVAR 21
8336: PUSH
8337: LD_VAR 0 2
8341: PPUSH
8342: CALL_OW 248
8346: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8347: LD_INT 0
8349: PPUSH
8350: LD_INT 1
8352: PPUSH
8353: LD_VAR 0 1
8357: PPUSH
8358: CALL_OW 380
// un = CreateHuman ;
8362: LD_ADDR_VAR 0 4
8366: PUSH
8367: CALL_OW 44
8371: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8372: LD_ADDR_VAR 0 5
8376: PUSH
8377: LD_VAR 0 2
8381: PPUSH
8382: CALL_OW 254
8386: PUSH
8387: LD_INT 3
8389: MINUS
8390: ST_TO_ADDR
// if dir < 0 then
8391: LD_VAR 0 5
8395: PUSH
8396: LD_INT 0
8398: LESS
8399: IFFALSE 8415
// dir := 6 + dir ;
8401: LD_ADDR_VAR 0 5
8405: PUSH
8406: LD_INT 6
8408: PUSH
8409: LD_VAR 0 5
8413: PLUS
8414: ST_TO_ADDR
// SetDir ( un , dir ) ;
8415: LD_VAR 0 4
8419: PPUSH
8420: LD_VAR 0 5
8424: PPUSH
8425: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8429: LD_VAR 0 4
8433: PPUSH
8434: LD_VAR 0 2
8438: PPUSH
8439: CALL_OW 52
// result = un ;
8443: LD_ADDR_VAR 0 3
8447: PUSH
8448: LD_VAR 0 4
8452: ST_TO_ADDR
// end ;
8453: LD_VAR 0 3
8457: RET
// export function AddComUpgradeBreastwork ( units , buildings , upgradeBType ) ; var building , x , y , dir ; begin
8458: LD_INT 0
8460: PPUSH
8461: PPUSH
8462: PPUSH
8463: PPUSH
8464: PPUSH
// for building in buildings do
8465: LD_ADDR_VAR 0 5
8469: PUSH
8470: LD_VAR 0 2
8474: PUSH
8475: FOR_IN
8476: IFFALSE 8568
// begin x = GetX ( building ) ;
8478: LD_ADDR_VAR 0 6
8482: PUSH
8483: LD_VAR 0 5
8487: PPUSH
8488: CALL_OW 250
8492: ST_TO_ADDR
// y = GetY ( building ) ;
8493: LD_ADDR_VAR 0 7
8497: PUSH
8498: LD_VAR 0 5
8502: PPUSH
8503: CALL_OW 251
8507: ST_TO_ADDR
// dir = GetDir ( building ) ;
8508: LD_ADDR_VAR 0 8
8512: PUSH
8513: LD_VAR 0 5
8517: PPUSH
8518: CALL_OW 254
8522: ST_TO_ADDR
// AddComDismantle ( units , building ) ;
8523: LD_VAR 0 1
8527: PPUSH
8528: LD_VAR 0 5
8532: PPUSH
8533: CALL_OW 227
// AddComBuild ( units , upgradeBType , x , y , dir ) ;
8537: LD_VAR 0 1
8541: PPUSH
8542: LD_VAR 0 3
8546: PPUSH
8547: LD_VAR 0 6
8551: PPUSH
8552: LD_VAR 0 7
8556: PPUSH
8557: LD_VAR 0 8
8561: PPUSH
8562: CALL_OW 205
// end ;
8566: GO 8475
8568: POP
8569: POP
// end ;
8570: LD_VAR 0 4
8574: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list , am_tech_list ; begin
8575: LD_INT 0
8577: PPUSH
8578: PPUSH
8579: PPUSH
8580: PPUSH
8581: PPUSH
8582: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8583: LD_ADDR_VAR 0 8
8587: PUSH
8588: LD_INT 48
8590: PUSH
8591: LD_INT 49
8593: PUSH
8594: LD_INT 50
8596: PUSH
8597: LD_INT 20
8599: PUSH
8600: LD_INT 1
8602: PUSH
8603: LD_INT 51
8605: PUSH
8606: LD_INT 52
8608: PUSH
8609: LD_INT 69
8611: PUSH
8612: LD_INT 39
8614: PUSH
8615: LD_INT 34
8617: PUSH
8618: LD_INT 40
8620: PUSH
8621: LD_INT 53
8623: PUSH
8624: LD_INT 71
8626: PUSH
8627: LD_INT 57
8629: PUSH
8630: LD_INT 58
8632: PUSH
8633: LD_INT 44
8635: PUSH
8636: LD_INT 32
8638: PUSH
8639: LD_INT 27
8641: PUSH
8642: LD_INT 23
8644: PUSH
8645: LD_INT 33
8647: PUSH
8648: LD_INT 59
8650: PUSH
8651: LD_INT 54
8653: PUSH
8654: LD_INT 55
8656: PUSH
8657: LD_INT 56
8659: PUSH
8660: LD_INT 63
8662: PUSH
8663: LD_INT 64
8665: PUSH
8666: LD_INT 65
8668: PUSH
8669: LD_INT 30
8671: PUSH
8672: LD_INT 31
8674: PUSH
8675: LD_INT 21
8677: PUSH
8678: LD_INT 22
8680: PUSH
8681: LD_INT 25
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: ST_TO_ADDR
// am_tech_list = GetTechNation ( 1 , 1 , state_enabled ) ;
8718: LD_ADDR_VAR 0 9
8722: PUSH
8723: LD_INT 1
8725: PPUSH
8726: LD_INT 1
8728: PPUSH
8729: LD_INT 1
8731: PPUSH
8732: CALL 28477 0 3
8736: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8737: LD_ADDR_VAR 0 5
8741: PUSH
8742: DOUBLE
8743: LD_INT 1
8745: DEC
8746: ST_TO_ADDR
8747: LD_VAR 0 8
8751: PUSH
8752: FOR_TO
8753: IFFALSE 8829
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8755: LD_VAR 0 8
8759: PUSH
8760: LD_VAR 0 5
8764: ARRAY
8765: PPUSH
8766: LD_VAR 0 1
8770: PPUSH
8771: CALL_OW 321
8775: PUSH
8776: LD_INT 1
8778: EQUAL
8779: PUSH
8780: LD_VAR 0 8
8784: PUSH
8785: LD_VAR 0 5
8789: ARRAY
8790: PPUSH
8791: LD_VAR 0 3
8795: PPUSH
8796: CALL_OW 482
8800: PUSH
8801: LD_INT 1
8803: EQUAL
8804: AND
8805: IFFALSE 8827
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8807: LD_VAR 0 2
8811: PPUSH
8812: LD_VAR 0 8
8816: PUSH
8817: LD_VAR 0 5
8821: ARRAY
8822: PPUSH
8823: CALL_OW 184
8827: GO 8752
8829: POP
8830: POP
// for i = 1 to am_tech_list do
8831: LD_ADDR_VAR 0 5
8835: PUSH
8836: DOUBLE
8837: LD_INT 1
8839: DEC
8840: ST_TO_ADDR
8841: LD_VAR 0 9
8845: PUSH
8846: FOR_TO
8847: IFFALSE 8923
// if GetTech ( am_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( am_tech_list [ i ] , nation ) = true then
8849: LD_VAR 0 9
8853: PUSH
8854: LD_VAR 0 5
8858: ARRAY
8859: PPUSH
8860: LD_VAR 0 1
8864: PPUSH
8865: CALL_OW 321
8869: PUSH
8870: LD_INT 1
8872: EQUAL
8873: PUSH
8874: LD_VAR 0 9
8878: PUSH
8879: LD_VAR 0 5
8883: ARRAY
8884: PPUSH
8885: LD_VAR 0 3
8889: PPUSH
8890: CALL_OW 482
8894: PUSH
8895: LD_INT 1
8897: EQUAL
8898: AND
8899: IFFALSE 8921
// AddComResearch ( lab , am_tech_list [ i ] ) ;
8901: LD_VAR 0 2
8905: PPUSH
8906: LD_VAR 0 9
8910: PUSH
8911: LD_VAR 0 5
8915: ARRAY
8916: PPUSH
8917: CALL_OW 184
8921: GO 8846
8923: POP
8924: POP
// end ;
8925: LD_VAR 0 4
8929: RET
// export function MoveKurinUnitsToBuildings ; var i , lab , fac , bunker , tmp , pom , canTakeUnits , diffUnits ; begin
8930: LD_INT 0
8932: PPUSH
8933: PPUSH
8934: PPUSH
8935: PPUSH
8936: PPUSH
8937: PPUSH
8938: PPUSH
8939: PPUSH
8940: PPUSH
// lab = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
8941: LD_ADDR_VAR 0 3
8945: PUSH
8946: LD_INT 22
8948: PUSH
8949: LD_INT 6
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PUSH
8956: LD_INT 21
8958: PUSH
8959: LD_INT 3
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: LD_INT 30
8968: PUSH
8969: LD_INT 6
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: LIST
8980: PPUSH
8981: CALL_OW 69
8985: PUSH
8986: LD_INT 1
8988: ARRAY
8989: ST_TO_ADDR
// fac = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8990: LD_ADDR_VAR 0 4
8994: PUSH
8995: LD_INT 22
8997: PUSH
8998: LD_INT 6
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: PUSH
9005: LD_INT 21
9007: PUSH
9008: LD_INT 3
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: PUSH
9015: LD_INT 30
9017: PUSH
9018: LD_INT 3
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: LIST
9029: PPUSH
9030: CALL_OW 69
9034: PUSH
9035: LD_INT 1
9037: ARRAY
9038: ST_TO_ADDR
// diffUnits = diffUnits ^ Kurin ;
9039: LD_ADDR_VAR 0 9
9043: PUSH
9044: LD_VAR 0 9
9048: PUSH
9049: LD_EXP 58
9053: ADD
9054: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
9055: LD_ADDR_VAR 0 9
9059: PUSH
9060: LD_VAR 0 9
9064: PUSH
9065: LD_EXP 76
9069: ADD
9070: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
9071: LD_ADDR_VAR 0 9
9075: PUSH
9076: LD_VAR 0 9
9080: PUSH
9081: LD_EXP 68
9085: ADD
9086: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9087: LD_ADDR_VAR 0 8
9091: PUSH
9092: LD_INT 18
9094: PPUSH
9095: LD_INT 22
9097: PUSH
9098: LD_INT 6
9100: PUSH
9101: EMPTY
9102: LIST
9103: LIST
9104: PUSH
9105: LD_INT 21
9107: PUSH
9108: LD_INT 1
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: PUSH
9115: LD_INT 3
9117: PUSH
9118: LD_INT 60
9120: PUSH
9121: EMPTY
9122: LIST
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: LIST
9132: PPUSH
9133: CALL_OW 70
9137: PUSH
9138: LD_VAR 0 9
9142: DIFF
9143: ST_TO_ADDR
// if not canTakeUnits then
9144: LD_VAR 0 8
9148: NOT
9149: IFFALSE 9182
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 4 , neededUnitsSpawn [ 3 ] + 2 ) ;
9151: LD_ADDR_EXP 78
9155: PUSH
9156: LD_EXP 78
9160: PPUSH
9161: LD_INT 4
9163: PPUSH
9164: LD_EXP 78
9168: PUSH
9169: LD_INT 3
9171: ARRAY
9172: PUSH
9173: LD_INT 2
9175: PLUS
9176: PPUSH
9177: CALL_OW 1
9181: ST_TO_ADDR
// if canTakeUnits > 2 then
9182: LD_VAR 0 8
9186: PUSH
9187: LD_INT 2
9189: GREATER
9190: IFFALSE 9260
// begin for i := 1 to rand ( 1 , 2 ) do
9192: LD_ADDR_VAR 0 2
9196: PUSH
9197: DOUBLE
9198: LD_INT 1
9200: DEC
9201: ST_TO_ADDR
9202: LD_INT 1
9204: PPUSH
9205: LD_INT 2
9207: PPUSH
9208: CALL_OW 12
9212: PUSH
9213: FOR_TO
9214: IFFALSE 9256
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9216: LD_VAR 0 8
9220: PUSH
9221: LD_VAR 0 2
9225: ARRAY
9226: PPUSH
9227: LD_VAR 0 3
9231: PPUSH
9232: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9236: LD_VAR 0 8
9240: PUSH
9241: LD_VAR 0 2
9245: ARRAY
9246: PPUSH
9247: LD_INT 4
9249: PPUSH
9250: CALL_OW 183
// end ;
9254: GO 9213
9256: POP
9257: POP
// end else
9258: GO 9328
// begin for i := 1 to rand ( 1 , canTakeUnits ) do
9260: LD_ADDR_VAR 0 2
9264: PUSH
9265: DOUBLE
9266: LD_INT 1
9268: DEC
9269: ST_TO_ADDR
9270: LD_INT 1
9272: PPUSH
9273: LD_VAR 0 8
9277: PPUSH
9278: CALL_OW 12
9282: PUSH
9283: FOR_TO
9284: IFFALSE 9326
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9286: LD_VAR 0 8
9290: PUSH
9291: LD_VAR 0 2
9295: ARRAY
9296: PPUSH
9297: LD_VAR 0 3
9301: PPUSH
9302: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9306: LD_VAR 0 8
9310: PUSH
9311: LD_VAR 0 2
9315: ARRAY
9316: PPUSH
9317: LD_INT 4
9319: PPUSH
9320: CALL_OW 183
// end ;
9324: GO 9283
9326: POP
9327: POP
// end ; wait ( 0 0$01 ) ;
9328: LD_INT 35
9330: PPUSH
9331: CALL_OW 67
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9335: LD_ADDR_VAR 0 8
9339: PUSH
9340: LD_INT 18
9342: PPUSH
9343: LD_INT 22
9345: PUSH
9346: LD_INT 6
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: PUSH
9353: LD_INT 21
9355: PUSH
9356: LD_INT 1
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PUSH
9363: LD_INT 3
9365: PUSH
9366: LD_INT 60
9368: PUSH
9369: EMPTY
9370: LIST
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: LIST
9380: PPUSH
9381: CALL_OW 70
9385: PUSH
9386: LD_VAR 0 9
9390: DIFF
9391: ST_TO_ADDR
// pom = 6 ;
9392: LD_ADDR_VAR 0 7
9396: PUSH
9397: LD_INT 6
9399: ST_TO_ADDR
// if canTakeUnits then
9400: LD_VAR 0 8
9404: IFFALSE 9521
// for i = 1 to canTakeUnits do
9406: LD_ADDR_VAR 0 2
9410: PUSH
9411: DOUBLE
9412: LD_INT 1
9414: DEC
9415: ST_TO_ADDR
9416: LD_VAR 0 8
9420: PUSH
9421: FOR_TO
9422: IFFALSE 9519
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
9424: LD_VAR 0 8
9428: PUSH
9429: LD_VAR 0 2
9433: ARRAY
9434: PPUSH
9435: CALL_OW 257
9439: PUSH
9440: LD_INT 3
9442: NONEQUAL
9443: IFFALSE 9483
// begin ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9445: LD_VAR 0 8
9449: PUSH
9450: LD_VAR 0 2
9454: ARRAY
9455: PPUSH
9456: LD_VAR 0 4
9460: PPUSH
9461: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_mechanic ) ;
9465: LD_VAR 0 8
9469: PUSH
9470: LD_VAR 0 2
9474: ARRAY
9475: PPUSH
9476: LD_INT 3
9478: PPUSH
9479: CALL_OW 183
// end ; ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9483: LD_VAR 0 8
9487: PUSH
9488: LD_VAR 0 2
9492: ARRAY
9493: PPUSH
9494: LD_VAR 0 4
9498: PPUSH
9499: CALL_OW 120
// pom = pom - 1 ;
9503: LD_ADDR_VAR 0 7
9507: PUSH
9508: LD_VAR 0 7
9512: PUSH
9513: LD_INT 1
9515: MINUS
9516: ST_TO_ADDR
// end ;
9517: GO 9421
9519: POP
9520: POP
// if pom > 0 then
9521: LD_VAR 0 7
9525: PUSH
9526: LD_INT 0
9528: GREATER
9529: IFFALSE 9554
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
9531: LD_ADDR_EXP 78
9535: PUSH
9536: LD_EXP 78
9540: PPUSH
9541: LD_INT 3
9543: PPUSH
9544: LD_VAR 0 7
9548: PPUSH
9549: CALL_OW 1
9553: ST_TO_ADDR
// wait ( 0 0$01 ) ;
9554: LD_INT 35
9556: PPUSH
9557: CALL_OW 67
// for bunker in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_occupied ] ] ] ) do
9561: LD_ADDR_VAR 0 5
9565: PUSH
9566: LD_INT 22
9568: PUSH
9569: LD_INT 6
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PUSH
9576: LD_INT 21
9578: PUSH
9579: LD_INT 3
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 30
9588: PUSH
9589: LD_INT 32
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: LD_INT 3
9598: PUSH
9599: LD_INT 59
9601: PUSH
9602: EMPTY
9603: LIST
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: PPUSH
9615: CALL_OW 69
9619: PUSH
9620: FOR_IN
9621: IFFALSE 9867
// begin canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9623: LD_ADDR_VAR 0 8
9627: PUSH
9628: LD_INT 18
9630: PPUSH
9631: LD_INT 22
9633: PUSH
9634: LD_INT 6
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: PUSH
9641: LD_INT 21
9643: PUSH
9644: LD_INT 1
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PUSH
9651: LD_INT 3
9653: PUSH
9654: LD_INT 60
9656: PUSH
9657: EMPTY
9658: LIST
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: LIST
9668: PPUSH
9669: CALL_OW 70
9673: PUSH
9674: LD_VAR 0 9
9678: DIFF
9679: ST_TO_ADDR
// if canTakeUnits then
9680: LD_VAR 0 8
9684: IFFALSE 9818
// begin if GetClass ( canTakeUnits [ 1 ] ) <> 1 then
9686: LD_VAR 0 8
9690: PUSH
9691: LD_INT 1
9693: ARRAY
9694: PPUSH
9695: CALL_OW 257
9699: PUSH
9700: LD_INT 1
9702: NONEQUAL
9703: IFFALSE 9798
// begin ComEnterUnit ( canTakeUnits [ 1 ] , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
9705: LD_VAR 0 8
9709: PUSH
9710: LD_INT 1
9712: ARRAY
9713: PPUSH
9714: LD_INT 22
9716: PUSH
9717: LD_INT 6
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 21
9726: PUSH
9727: LD_INT 3
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: LD_INT 30
9736: PUSH
9737: LD_INT 5
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: LIST
9748: PPUSH
9749: CALL_OW 69
9753: PUSH
9754: LD_INT 1
9756: ARRAY
9757: PPUSH
9758: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ 1 ] , 1 ) ;
9762: LD_VAR 0 8
9766: PUSH
9767: LD_INT 1
9769: ARRAY
9770: PPUSH
9771: LD_INT 1
9773: PPUSH
9774: CALL_OW 183
// AddComExitBuilding ( canTakeUnits [ 1 ] ) ;
9778: LD_VAR 0 8
9782: PUSH
9783: LD_INT 1
9785: ARRAY
9786: PPUSH
9787: CALL_OW 182
// wait ( 0 0$1 ) ;
9791: LD_INT 35
9793: PPUSH
9794: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ 1 ] , bunker ) ;
9798: LD_VAR 0 8
9802: PUSH
9803: LD_INT 1
9805: ARRAY
9806: PPUSH
9807: LD_VAR 0 5
9811: PPUSH
9812: CALL_OW 120
// end else
9816: GO 9865
// begin kirovBunkersToOccupy = kirovBunkersToOccupy ^ bunker ;
9818: LD_ADDR_EXP 70
9822: PUSH
9823: LD_EXP 70
9827: PUSH
9828: LD_VAR 0 5
9832: ADD
9833: ST_TO_ADDR
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 1 , neededUnitsSpawn [ 1 ] + 1 ) ;
9834: LD_ADDR_EXP 78
9838: PUSH
9839: LD_EXP 78
9843: PPUSH
9844: LD_INT 1
9846: PPUSH
9847: LD_EXP 78
9851: PUSH
9852: LD_INT 1
9854: ARRAY
9855: PUSH
9856: LD_INT 1
9858: PLUS
9859: PPUSH
9860: CALL_OW 1
9864: ST_TO_ADDR
// end ; end ;
9865: GO 9620
9867: POP
9868: POP
// end ;
9869: LD_VAR 0 1
9873: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
9874: LD_INT 0
9876: PPUSH
9877: PPUSH
9878: PPUSH
9879: PPUSH
9880: PPUSH
9881: PPUSH
9882: PPUSH
9883: PPUSH
9884: PPUSH
9885: PPUSH
9886: PPUSH
9887: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
9888: LD_VAR 0 1
9892: PPUSH
9893: CALL_OW 302
9897: NOT
9898: PUSH
9899: LD_VAR 0 4
9903: PUSH
9904: LD_INT 1
9906: EQUAL
9907: OR
9908: PUSH
9909: LD_VAR 0 2
9913: PPUSH
9914: LD_VAR 0 3
9918: PPUSH
9919: CALL_OW 488
9923: NOT
9924: OR
9925: PUSH
9926: LD_VAR 0 1
9930: PPUSH
9931: LD_VAR 0 2
9935: PPUSH
9936: LD_VAR 0 3
9940: PPUSH
9941: CALL_OW 297
9945: PUSH
9946: LD_VAR 0 4
9950: GREATEREQUAL
9951: OR
9952: PUSH
9953: LD_VAR 0 5
9957: PUSH
9958: LD_INT 1
9960: PUSH
9961: LD_INT 0
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: IN
9968: NOT
9969: OR
9970: IFFALSE 9974
// exit ;
9972: GO 11531
// attempts = 0 ;
9974: LD_ADDR_VAR 0 17
9978: PUSH
9979: LD_INT 0
9981: ST_TO_ADDR
// repeat list_nearest = [ ] ;
9982: LD_ADDR_VAR 0 7
9986: PUSH
9987: EMPTY
9988: ST_TO_ADDR
// list_coords = [ ] ;
9989: LD_ADDR_VAR 0 8
9993: PUSH
9994: EMPTY
9995: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
9996: LD_ADDR_VAR 0 9
10000: PUSH
10001: LD_VAR 0 2
10005: PPUSH
10006: LD_VAR 0 3
10010: PPUSH
10011: LD_VAR 0 1
10015: PPUSH
10016: CALL_OW 250
10020: PPUSH
10021: LD_VAR 0 1
10025: PPUSH
10026: CALL_OW 251
10030: PPUSH
10031: CALL 11536 0 4
10035: ST_TO_ADDR
// if attempts = 0 then
10036: LD_VAR 0 17
10040: PUSH
10041: LD_INT 0
10043: EQUAL
10044: IFFALSE 10152
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
10046: LD_ADDR_VAR 0 10
10050: PUSH
10051: LD_VAR 0 9
10055: PUSH
10056: LD_VAR 0 9
10060: PUSH
10061: LD_INT 1
10063: PLUS
10064: PUSH
10065: LD_VAR 0 9
10069: PUSH
10070: LD_INT 1
10072: MINUS
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: LIST
10078: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
10079: LD_VAR 0 10
10083: PUSH
10084: LD_INT 2
10086: ARRAY
10087: PUSH
10088: LD_INT 6
10090: EQUAL
10091: IFFALSE 10114
// dir_list = Replace ( dir_list , 2 , 0 ) ;
10093: LD_ADDR_VAR 0 10
10097: PUSH
10098: LD_VAR 0 10
10102: PPUSH
10103: LD_INT 2
10105: PPUSH
10106: LD_INT 0
10108: PPUSH
10109: CALL_OW 1
10113: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
10114: LD_VAR 0 10
10118: PUSH
10119: LD_INT 3
10121: ARRAY
10122: PUSH
10123: LD_INT 1
10125: NEG
10126: EQUAL
10127: IFFALSE 10150
// dir_list = Replace ( dir_list , 3 , 5 ) ;
10129: LD_ADDR_VAR 0 10
10133: PUSH
10134: LD_VAR 0 10
10138: PPUSH
10139: LD_INT 3
10141: PPUSH
10142: LD_INT 5
10144: PPUSH
10145: CALL_OW 1
10149: ST_TO_ADDR
// end else
10150: GO 10189
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
10152: LD_ADDR_VAR 0 10
10156: PUSH
10157: LD_INT 0
10159: PUSH
10160: LD_INT 1
10162: PUSH
10163: LD_INT 2
10165: PUSH
10166: LD_INT 3
10168: PUSH
10169: LD_INT 4
10171: PUSH
10172: LD_INT 5
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: PUSH
10183: LD_VAR 0 9
10187: DIFF
10188: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
10189: LD_ADDR_VAR 0 14
10193: PUSH
10194: DOUBLE
10195: LD_INT 1
10197: DEC
10198: ST_TO_ADDR
10199: LD_VAR 0 10
10203: PUSH
10204: LD_INT 0
10206: PLUS
10207: PUSH
10208: FOR_TO
10209: IFFALSE 10531
// case dir_list [ c ] of 0 :
10211: LD_VAR 0 10
10215: PUSH
10216: LD_VAR 0 14
10220: ARRAY
10221: PUSH
10222: LD_INT 0
10224: DOUBLE
10225: EQUAL
10226: IFTRUE 10230
10228: GO 10271
10230: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
10231: LD_ADDR_VAR 0 8
10235: PUSH
10236: LD_VAR 0 8
10240: PPUSH
10241: LD_INT 1
10243: PPUSH
10244: LD_VAR 0 2
10248: PUSH
10249: LD_VAR 0 3
10253: PUSH
10254: LD_VAR 0 4
10258: MINUS
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PPUSH
10264: CALL_OW 2
10268: ST_TO_ADDR
10269: GO 10529
10271: LD_INT 1
10273: DOUBLE
10274: EQUAL
10275: IFTRUE 10279
10277: GO 10320
10279: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
10280: LD_ADDR_VAR 0 8
10284: PUSH
10285: LD_VAR 0 8
10289: PPUSH
10290: LD_INT 1
10292: PPUSH
10293: LD_VAR 0 2
10297: PUSH
10298: LD_VAR 0 4
10302: PLUS
10303: PUSH
10304: LD_VAR 0 3
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PPUSH
10313: CALL_OW 2
10317: ST_TO_ADDR
10318: GO 10529
10320: LD_INT 2
10322: DOUBLE
10323: EQUAL
10324: IFTRUE 10328
10326: GO 10375
10328: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
10329: LD_ADDR_VAR 0 8
10333: PUSH
10334: LD_VAR 0 8
10338: PPUSH
10339: LD_INT 1
10341: PPUSH
10342: LD_VAR 0 2
10346: PUSH
10347: LD_VAR 0 4
10351: PLUS
10352: PUSH
10353: LD_VAR 0 3
10357: PUSH
10358: LD_VAR 0 4
10362: PLUS
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PPUSH
10368: CALL_OW 2
10372: ST_TO_ADDR
10373: GO 10529
10375: LD_INT 3
10377: DOUBLE
10378: EQUAL
10379: IFTRUE 10383
10381: GO 10424
10383: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
10384: LD_ADDR_VAR 0 8
10388: PUSH
10389: LD_VAR 0 8
10393: PPUSH
10394: LD_INT 1
10396: PPUSH
10397: LD_VAR 0 2
10401: PUSH
10402: LD_VAR 0 3
10406: PUSH
10407: LD_VAR 0 4
10411: PLUS
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PPUSH
10417: CALL_OW 2
10421: ST_TO_ADDR
10422: GO 10529
10424: LD_INT 4
10426: DOUBLE
10427: EQUAL
10428: IFTRUE 10432
10430: GO 10473
10432: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
10433: LD_ADDR_VAR 0 8
10437: PUSH
10438: LD_VAR 0 8
10442: PPUSH
10443: LD_INT 1
10445: PPUSH
10446: LD_VAR 0 2
10450: PUSH
10451: LD_VAR 0 4
10455: MINUS
10456: PUSH
10457: LD_VAR 0 3
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PPUSH
10466: CALL_OW 2
10470: ST_TO_ADDR
10471: GO 10529
10473: LD_INT 5
10475: DOUBLE
10476: EQUAL
10477: IFTRUE 10481
10479: GO 10528
10481: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
10482: LD_ADDR_VAR 0 8
10486: PUSH
10487: LD_VAR 0 8
10491: PPUSH
10492: LD_INT 1
10494: PPUSH
10495: LD_VAR 0 2
10499: PUSH
10500: LD_VAR 0 4
10504: MINUS
10505: PUSH
10506: LD_VAR 0 3
10510: PUSH
10511: LD_VAR 0 4
10515: MINUS
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PPUSH
10521: CALL_OW 2
10525: ST_TO_ADDR
10526: GO 10529
10528: POP
10529: GO 10208
10531: POP
10532: POP
// if dist < 30 then
10533: LD_VAR 0 4
10537: PUSH
10538: LD_INT 30
10540: LESS
10541: IFFALSE 10553
// c = 1 else
10543: LD_ADDR_VAR 0 14
10547: PUSH
10548: LD_INT 1
10550: ST_TO_ADDR
10551: GO 10561
// c = 2 ;
10553: LD_ADDR_VAR 0 14
10557: PUSH
10558: LD_INT 2
10560: ST_TO_ADDR
// b = 1 ;
10561: LD_ADDR_VAR 0 11
10565: PUSH
10566: LD_INT 1
10568: ST_TO_ADDR
// while b <= ( dist - 1 ) do
10569: LD_VAR 0 11
10573: PUSH
10574: LD_VAR 0 4
10578: PUSH
10579: LD_INT 1
10581: MINUS
10582: LESSEQUAL
10583: IFFALSE 11011
// begin if 0 in dir_list and 1 in dir_list then
10585: LD_INT 0
10587: PUSH
10588: LD_VAR 0 10
10592: IN
10593: PUSH
10594: LD_INT 1
10596: PUSH
10597: LD_VAR 0 10
10601: IN
10602: AND
10603: IFFALSE 10655
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
10605: LD_ADDR_VAR 0 8
10609: PUSH
10610: LD_VAR 0 8
10614: PPUSH
10615: LD_INT 1
10617: PPUSH
10618: LD_VAR 0 2
10622: PUSH
10623: LD_VAR 0 11
10627: PLUS
10628: PUSH
10629: LD_VAR 0 3
10633: PUSH
10634: LD_VAR 0 4
10638: MINUS
10639: PUSH
10640: LD_VAR 0 11
10644: PLUS
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: PPUSH
10650: CALL_OW 2
10654: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
10655: LD_INT 1
10657: PUSH
10658: LD_VAR 0 10
10662: IN
10663: PUSH
10664: LD_INT 2
10666: PUSH
10667: LD_VAR 0 10
10671: IN
10672: AND
10673: IFFALSE 10719
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
10675: LD_ADDR_VAR 0 8
10679: PUSH
10680: LD_VAR 0 8
10684: PPUSH
10685: LD_INT 1
10687: PPUSH
10688: LD_VAR 0 2
10692: PUSH
10693: LD_VAR 0 4
10697: PLUS
10698: PUSH
10699: LD_VAR 0 3
10703: PUSH
10704: LD_VAR 0 11
10708: PLUS
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PPUSH
10714: CALL_OW 2
10718: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
10719: LD_INT 2
10721: PUSH
10722: LD_VAR 0 10
10726: IN
10727: PUSH
10728: LD_INT 3
10730: PUSH
10731: LD_VAR 0 10
10735: IN
10736: AND
10737: IFFALSE 10789
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
10739: LD_ADDR_VAR 0 8
10743: PUSH
10744: LD_VAR 0 8
10748: PPUSH
10749: LD_INT 1
10751: PPUSH
10752: LD_VAR 0 2
10756: PUSH
10757: LD_VAR 0 4
10761: PLUS
10762: PUSH
10763: LD_VAR 0 11
10767: MINUS
10768: PUSH
10769: LD_VAR 0 3
10773: PUSH
10774: LD_VAR 0 4
10778: PLUS
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: PPUSH
10784: CALL_OW 2
10788: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
10789: LD_INT 3
10791: PUSH
10792: LD_VAR 0 10
10796: IN
10797: PUSH
10798: LD_INT 4
10800: PUSH
10801: LD_VAR 0 10
10805: IN
10806: AND
10807: IFFALSE 10859
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
10809: LD_ADDR_VAR 0 8
10813: PUSH
10814: LD_VAR 0 8
10818: PPUSH
10819: LD_INT 1
10821: PPUSH
10822: LD_VAR 0 2
10826: PUSH
10827: LD_VAR 0 11
10831: MINUS
10832: PUSH
10833: LD_VAR 0 3
10837: PUSH
10838: LD_VAR 0 4
10842: PLUS
10843: PUSH
10844: LD_VAR 0 11
10848: MINUS
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PPUSH
10854: CALL_OW 2
10858: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
10859: LD_INT 4
10861: PUSH
10862: LD_VAR 0 10
10866: IN
10867: PUSH
10868: LD_INT 5
10870: PUSH
10871: LD_VAR 0 10
10875: IN
10876: AND
10877: IFFALSE 10923
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
10879: LD_ADDR_VAR 0 8
10883: PUSH
10884: LD_VAR 0 8
10888: PPUSH
10889: LD_INT 1
10891: PPUSH
10892: LD_VAR 0 2
10896: PUSH
10897: LD_VAR 0 4
10901: MINUS
10902: PUSH
10903: LD_VAR 0 3
10907: PUSH
10908: LD_VAR 0 11
10912: MINUS
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PPUSH
10918: CALL_OW 2
10922: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
10923: LD_INT 5
10925: PUSH
10926: LD_VAR 0 10
10930: IN
10931: PUSH
10932: LD_INT 0
10934: PUSH
10935: LD_VAR 0 10
10939: IN
10940: AND
10941: IFFALSE 10993
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
10943: LD_ADDR_VAR 0 8
10947: PUSH
10948: LD_VAR 0 8
10952: PPUSH
10953: LD_INT 1
10955: PPUSH
10956: LD_VAR 0 2
10960: PUSH
10961: LD_VAR 0 4
10965: MINUS
10966: PUSH
10967: LD_VAR 0 11
10971: PLUS
10972: PUSH
10973: LD_VAR 0 3
10977: PUSH
10978: LD_VAR 0 4
10982: MINUS
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PPUSH
10988: CALL_OW 2
10992: ST_TO_ADDR
// b = b + c end ;
10993: LD_ADDR_VAR 0 11
10997: PUSH
10998: LD_VAR 0 11
11002: PUSH
11003: LD_VAR 0 14
11007: PLUS
11008: ST_TO_ADDR
11009: GO 10569
// if list_coords = 0 then
11011: LD_VAR 0 8
11015: PUSH
11016: LD_INT 0
11018: EQUAL
11019: IFFALSE 11023
// exit ;
11021: GO 11531
// repeat min_dist = 5000 ;
11023: LD_ADDR_VAR 0 12
11027: PUSH
11028: LD_INT 5000
11030: ST_TO_ADDR
// for b in list_coords do
11031: LD_ADDR_VAR 0 11
11035: PUSH
11036: LD_VAR 0 8
11040: PUSH
11041: FOR_IN
11042: IFFALSE 11101
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
11044: LD_ADDR_VAR 0 13
11048: PUSH
11049: LD_VAR 0 1
11053: PPUSH
11054: LD_VAR 0 11
11058: PUSH
11059: LD_INT 1
11061: ARRAY
11062: PPUSH
11063: LD_VAR 0 11
11067: PUSH
11068: LD_INT 2
11070: ARRAY
11071: PPUSH
11072: CALL_OW 297
11076: ST_TO_ADDR
// if temp_dist < min_dist then
11077: LD_VAR 0 13
11081: PUSH
11082: LD_VAR 0 12
11086: LESS
11087: IFFALSE 11099
// min_dist = temp_dist ;
11089: LD_ADDR_VAR 0 12
11093: PUSH
11094: LD_VAR 0 13
11098: ST_TO_ADDR
// end ;
11099: GO 11041
11101: POP
11102: POP
// c = 0 ;
11103: LD_ADDR_VAR 0 14
11107: PUSH
11108: LD_INT 0
11110: ST_TO_ADDR
// repeat c = c + 1 ;
11111: LD_ADDR_VAR 0 14
11115: PUSH
11116: LD_VAR 0 14
11120: PUSH
11121: LD_INT 1
11123: PLUS
11124: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
11125: LD_VAR 0 1
11129: PPUSH
11130: LD_VAR 0 8
11134: PUSH
11135: LD_VAR 0 14
11139: ARRAY
11140: PUSH
11141: LD_INT 1
11143: ARRAY
11144: PPUSH
11145: LD_VAR 0 8
11149: PUSH
11150: LD_VAR 0 14
11154: ARRAY
11155: PUSH
11156: LD_INT 2
11158: ARRAY
11159: PPUSH
11160: CALL_OW 297
11164: PUSH
11165: LD_VAR 0 12
11169: EQUAL
11170: IFFALSE 11235
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
11172: LD_ADDR_VAR 0 7
11176: PUSH
11177: LD_VAR 0 7
11181: PPUSH
11182: LD_INT 1
11184: PPUSH
11185: LD_VAR 0 8
11189: PUSH
11190: LD_VAR 0 14
11194: ARRAY
11195: PPUSH
11196: CALL_OW 2
11200: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
11201: LD_ADDR_VAR 0 8
11205: PUSH
11206: LD_VAR 0 8
11210: PPUSH
11211: LD_VAR 0 14
11215: PPUSH
11216: CALL_OW 3
11220: ST_TO_ADDR
// c = c - 1 ;
11221: LD_ADDR_VAR 0 14
11225: PUSH
11226: LD_VAR 0 14
11230: PUSH
11231: LD_INT 1
11233: MINUS
11234: ST_TO_ADDR
// end ; until c = list_coords ;
11235: LD_VAR 0 14
11239: PUSH
11240: LD_VAR 0 8
11244: EQUAL
11245: IFFALSE 11111
// c = 0 ;
11247: LD_ADDR_VAR 0 14
11251: PUSH
11252: LD_INT 0
11254: ST_TO_ADDR
// if list_nearest > 0 then
11255: LD_VAR 0 7
11259: PUSH
11260: LD_INT 0
11262: GREATER
11263: IFFALSE 11405
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
11265: LD_ADDR_VAR 0 15
11269: PUSH
11270: LD_INT 1
11272: PPUSH
11273: LD_VAR 0 7
11277: PPUSH
11278: CALL_OW 12
11282: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
11283: LD_ADDR_VAR 0 16
11287: PUSH
11288: LD_VAR 0 7
11292: PUSH
11293: LD_VAR 0 15
11297: ARRAY
11298: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
11299: LD_VAR 0 16
11303: PUSH
11304: LD_INT 1
11306: ARRAY
11307: PPUSH
11308: LD_VAR 0 16
11312: PUSH
11313: LD_INT 2
11315: ARRAY
11316: PPUSH
11317: CALL_OW 488
11321: PUSH
11322: LD_INT 0
11324: GREATER
11325: PUSH
11326: LD_VAR 0 16
11330: PUSH
11331: LD_INT 1
11333: ARRAY
11334: PPUSH
11335: LD_VAR 0 16
11339: PUSH
11340: LD_INT 2
11342: ARRAY
11343: PPUSH
11344: CALL_OW 428
11348: PUSH
11349: LD_INT 0
11351: EQUAL
11352: AND
11353: IFFALSE 11365
// c = 1 else
11355: LD_ADDR_VAR 0 14
11359: PUSH
11360: LD_INT 1
11362: ST_TO_ADDR
11363: GO 11385
// list_nearest = Delete ( list_nearest , rand_num ) ;
11365: LD_ADDR_VAR 0 7
11369: PUSH
11370: LD_VAR 0 7
11374: PPUSH
11375: LD_VAR 0 15
11379: PPUSH
11380: CALL_OW 3
11384: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
11385: LD_VAR 0 14
11389: PUSH
11390: LD_INT 1
11392: EQUAL
11393: PUSH
11394: LD_VAR 0 7
11398: PUSH
11399: LD_INT 0
11401: EQUAL
11402: OR
11403: IFFALSE 11265
// end ; until c = 1 or list_coords = 0 ;
11405: LD_VAR 0 14
11409: PUSH
11410: LD_INT 1
11412: EQUAL
11413: PUSH
11414: LD_VAR 0 8
11418: PUSH
11419: LD_INT 0
11421: EQUAL
11422: OR
11423: IFFALSE 11023
// attempts = attempts + 1 ;
11425: LD_ADDR_VAR 0 17
11429: PUSH
11430: LD_VAR 0 17
11434: PUSH
11435: LD_INT 1
11437: PLUS
11438: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
11439: LD_VAR 0 14
11443: PUSH
11444: LD_INT 1
11446: EQUAL
11447: PUSH
11448: LD_VAR 0 17
11452: PUSH
11453: LD_INT 1
11455: GREATER
11456: OR
11457: IFFALSE 9982
// if c = 1 then
11459: LD_VAR 0 14
11463: PUSH
11464: LD_INT 1
11466: EQUAL
11467: IFFALSE 11531
// if add then
11469: LD_VAR 0 5
11473: IFFALSE 11504
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
11475: LD_VAR 0 1
11479: PPUSH
11480: LD_VAR 0 16
11484: PUSH
11485: LD_INT 1
11487: ARRAY
11488: PPUSH
11489: LD_VAR 0 16
11493: PUSH
11494: LD_INT 2
11496: ARRAY
11497: PPUSH
11498: CALL_OW 171
11502: GO 11531
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
11504: LD_VAR 0 1
11508: PPUSH
11509: LD_VAR 0 16
11513: PUSH
11514: LD_INT 1
11516: ARRAY
11517: PPUSH
11518: LD_VAR 0 16
11522: PUSH
11523: LD_INT 2
11525: ARRAY
11526: PPUSH
11527: CALL_OW 111
// end ;
11531: LD_VAR 0 6
11535: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
11536: LD_INT 0
11538: PPUSH
11539: PPUSH
11540: PPUSH
11541: PPUSH
11542: PPUSH
11543: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
11544: LD_VAR 0 1
11548: PPUSH
11549: LD_VAR 0 2
11553: PPUSH
11554: CALL_OW 488
11558: NOT
11559: PUSH
11560: LD_VAR 0 3
11564: PPUSH
11565: LD_VAR 0 4
11569: PPUSH
11570: CALL_OW 488
11574: NOT
11575: OR
11576: IFFALSE 11589
// begin result = - 1 ;
11578: LD_ADDR_VAR 0 5
11582: PUSH
11583: LD_INT 1
11585: NEG
11586: ST_TO_ADDR
// exit ;
11587: GO 11749
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
11589: LD_ADDR_VAR 0 6
11593: PUSH
11594: LD_VAR 0 1
11598: PPUSH
11599: LD_VAR 0 2
11603: PPUSH
11604: LD_VAR 0 3
11608: PPUSH
11609: LD_VAR 0 4
11613: PPUSH
11614: CALL_OW 298
11618: ST_TO_ADDR
// dist_2 = 99999 ;
11619: LD_ADDR_VAR 0 7
11623: PUSH
11624: LD_INT 99999
11626: ST_TO_ADDR
// for b = 0 to 5 do
11627: LD_ADDR_VAR 0 8
11631: PUSH
11632: DOUBLE
11633: LD_INT 0
11635: DEC
11636: ST_TO_ADDR
11637: LD_INT 5
11639: PUSH
11640: FOR_TO
11641: IFFALSE 11737
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
11643: LD_ADDR_VAR 0 9
11647: PUSH
11648: LD_VAR 0 1
11652: PPUSH
11653: LD_VAR 0 8
11657: PPUSH
11658: LD_VAR 0 6
11662: PPUSH
11663: CALL_OW 272
11667: PPUSH
11668: LD_VAR 0 2
11672: PPUSH
11673: LD_VAR 0 8
11677: PPUSH
11678: LD_VAR 0 6
11682: PPUSH
11683: CALL_OW 273
11687: PPUSH
11688: LD_VAR 0 3
11692: PPUSH
11693: LD_VAR 0 4
11697: PPUSH
11698: CALL_OW 298
11702: ST_TO_ADDR
// if temp_dist < dist_2 then
11703: LD_VAR 0 9
11707: PUSH
11708: LD_VAR 0 7
11712: LESS
11713: IFFALSE 11735
// begin dist_2 = temp_dist ;
11715: LD_ADDR_VAR 0 7
11719: PUSH
11720: LD_VAR 0 9
11724: ST_TO_ADDR
// dir = b ;
11725: LD_ADDR_VAR 0 10
11729: PUSH
11730: LD_VAR 0 8
11734: ST_TO_ADDR
// end ; end ;
11735: GO 11640
11737: POP
11738: POP
// result = dir ;
11739: LD_ADDR_VAR 0 5
11743: PUSH
11744: LD_VAR 0 10
11748: ST_TO_ADDR
// end ; end_of_file
11749: LD_VAR 0 5
11753: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits ; begin
11754: LD_INT 0
11756: PPUSH
11757: PPUSH
11758: PPUSH
11759: PPUSH
11760: PPUSH
11761: PPUSH
11762: PPUSH
11763: PPUSH
11764: PPUSH
11765: PPUSH
11766: PPUSH
11767: PPUSH
11768: PPUSH
11769: PPUSH
11770: PPUSH
11771: PPUSH
11772: PPUSH
11773: PPUSH
11774: PPUSH
11775: PPUSH
11776: PPUSH
11777: PPUSH
11778: PPUSH
11779: PPUSH
11780: PPUSH
// personel = [ ] ;
11781: LD_ADDR_VAR 0 17
11785: PUSH
11786: EMPTY
11787: ST_TO_ADDR
// vehicles = [ ] ;
11788: LD_ADDR_VAR 0 23
11792: PUSH
11793: EMPTY
11794: ST_TO_ADDR
// for unit in basePersonel do
11795: LD_ADDR_VAR 0 16
11799: PUSH
11800: LD_VAR 0 3
11804: PUSH
11805: FOR_IN
11806: IFFALSE 11854
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
11808: LD_ADDR_VAR 0 17
11812: PUSH
11813: LD_VAR 0 17
11817: PUSH
11818: LD_VAR 0 16
11822: PUSH
11823: LD_VAR 0 16
11827: PPUSH
11828: CALL_OW 310
11832: PUSH
11833: LD_VAR 0 16
11837: PPUSH
11838: CALL_OW 302
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: LIST
11847: PUSH
11848: EMPTY
11849: LIST
11850: ADD
11851: ST_TO_ADDR
11852: GO 11805
11854: POP
11855: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) do
11856: LD_ADDR_VAR 0 22
11860: PUSH
11861: LD_VAR 0 4
11865: PPUSH
11866: LD_INT 22
11868: PUSH
11869: LD_VAR 0 1
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PUSH
11878: LD_INT 21
11880: PUSH
11881: LD_INT 2
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: PUSH
11888: LD_INT 50
11890: PUSH
11891: EMPTY
11892: LIST
11893: PUSH
11894: LD_INT 3
11896: PUSH
11897: LD_INT 2
11899: PUSH
11900: LD_INT 34
11902: PUSH
11903: LD_INT 12
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PUSH
11910: LD_INT 34
11912: PUSH
11913: LD_INT 51
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PUSH
11920: LD_INT 34
11922: PUSH
11923: LD_INT 32
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: PPUSH
11946: CALL_OW 70
11950: PUSH
11951: FOR_IN
11952: IFFALSE 12000
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
11954: LD_ADDR_VAR 0 23
11958: PUSH
11959: LD_VAR 0 23
11963: PUSH
11964: LD_VAR 0 22
11968: PUSH
11969: LD_VAR 0 22
11973: PPUSH
11974: CALL_OW 310
11978: PUSH
11979: LD_VAR 0 22
11983: PPUSH
11984: CALL_OW 302
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: LIST
11993: PUSH
11994: EMPTY
11995: LIST
11996: ADD
11997: ST_TO_ADDR
11998: GO 11951
12000: POP
12001: POP
// repeat soldiers = [ ] ;
12002: LD_ADDR_VAR 0 18
12006: PUSH
12007: EMPTY
12008: ST_TO_ADDR
// engineers = [ ] ;
12009: LD_ADDR_VAR 0 19
12013: PUSH
12014: EMPTY
12015: ST_TO_ADDR
// mechanics = [ ] ;
12016: LD_ADDR_VAR 0 20
12020: PUSH
12021: EMPTY
12022: ST_TO_ADDR
// scientists = [ ] ;
12023: LD_ADDR_VAR 0 21
12027: PUSH
12028: EMPTY
12029: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12030: LD_ADDR_VAR 0 28
12034: PUSH
12035: LD_VAR 0 4
12039: PPUSH
12040: LD_INT 22
12042: PUSH
12043: LD_VAR 0 1
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: LD_INT 21
12054: PUSH
12055: LD_INT 3
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: PUSH
12062: LD_INT 50
12064: PUSH
12065: EMPTY
12066: LIST
12067: PUSH
12068: LD_INT 2
12070: PUSH
12071: LD_INT 30
12073: PUSH
12074: LD_INT 0
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 30
12083: PUSH
12084: LD_INT 1
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: LIST
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: PPUSH
12102: CALL_OW 70
12106: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
12107: LD_ADDR_VAR 0 29
12111: PUSH
12112: LD_VAR 0 4
12116: PPUSH
12117: LD_INT 22
12119: PUSH
12120: LD_VAR 0 1
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PUSH
12129: LD_INT 21
12131: PUSH
12132: LD_INT 3
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PUSH
12139: LD_INT 50
12141: PUSH
12142: EMPTY
12143: LIST
12144: PUSH
12145: LD_INT 2
12147: PUSH
12148: LD_INT 30
12150: PUSH
12151: LD_INT 2
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: LD_INT 30
12160: PUSH
12161: LD_INT 3
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: LIST
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: PPUSH
12179: CALL_OW 70
12183: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
12184: LD_ADDR_VAR 0 30
12188: PUSH
12189: LD_VAR 0 4
12193: PPUSH
12194: LD_INT 22
12196: PUSH
12197: LD_VAR 0 1
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PUSH
12206: LD_INT 21
12208: PUSH
12209: LD_INT 3
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PUSH
12216: LD_INT 50
12218: PUSH
12219: EMPTY
12220: LIST
12221: PUSH
12222: LD_INT 2
12224: PUSH
12225: LD_INT 30
12227: PUSH
12228: LD_INT 6
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PUSH
12235: LD_INT 30
12237: PUSH
12238: LD_INT 7
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PUSH
12245: LD_INT 30
12247: PUSH
12248: LD_INT 8
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: PPUSH
12267: CALL_OW 70
12271: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
12272: LD_ADDR_VAR 0 31
12276: PUSH
12277: LD_VAR 0 4
12281: PPUSH
12282: LD_INT 22
12284: PUSH
12285: LD_VAR 0 1
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: PUSH
12294: LD_INT 21
12296: PUSH
12297: LD_INT 3
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PUSH
12304: LD_INT 50
12306: PUSH
12307: EMPTY
12308: LIST
12309: PUSH
12310: LD_INT 2
12312: PUSH
12313: LD_INT 30
12315: PUSH
12316: LD_INT 31
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 30
12325: PUSH
12326: LD_INT 32
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: LIST
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: PPUSH
12344: CALL_OW 70
12348: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
12349: LD_ADDR_VAR 0 32
12353: PUSH
12354: LD_VAR 0 4
12358: PPUSH
12359: LD_INT 22
12361: PUSH
12362: LD_VAR 0 1
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PUSH
12371: LD_INT 21
12373: PUSH
12374: LD_INT 3
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PUSH
12381: LD_INT 50
12383: PUSH
12384: EMPTY
12385: LIST
12386: PUSH
12387: LD_INT 2
12389: PUSH
12390: LD_INT 30
12392: PUSH
12393: LD_INT 4
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PUSH
12400: LD_INT 30
12402: PUSH
12403: LD_INT 5
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: LIST
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: PPUSH
12421: CALL_OW 70
12425: ST_TO_ADDR
// for i := 1 to personel do
12426: LD_ADDR_VAR 0 13
12430: PUSH
12431: DOUBLE
12432: LD_INT 1
12434: DEC
12435: ST_TO_ADDR
12436: LD_VAR 0 17
12440: PUSH
12441: FOR_TO
12442: IFFALSE 12652
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
12444: LD_VAR 0 17
12448: PUSH
12449: LD_VAR 0 13
12453: ARRAY
12454: PUSH
12455: LD_INT 1
12457: ARRAY
12458: PPUSH
12459: CALL_OW 256
12463: PUSH
12464: LD_INT 1000
12466: EQUAL
12467: IFFALSE 12509
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
12469: LD_ADDR_VAR 0 17
12473: PUSH
12474: LD_VAR 0 17
12478: PPUSH
12479: LD_VAR 0 13
12483: PUSH
12484: LD_VAR 0 17
12488: PUSH
12489: LD_VAR 0 13
12493: ARRAY
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: PPUSH
12499: LD_INT 1
12501: PPUSH
12502: CALL 33360 0 3
12506: ST_TO_ADDR
// end else
12507: GO 12600
// if GetLives ( personel [ i ] [ 1 ] ) <= 650 then
12509: LD_VAR 0 17
12513: PUSH
12514: LD_VAR 0 13
12518: ARRAY
12519: PUSH
12520: LD_INT 1
12522: ARRAY
12523: PPUSH
12524: CALL_OW 256
12528: PUSH
12529: LD_INT 650
12531: LESSEQUAL
12532: IFFALSE 12600
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , 0 ) ;
12534: LD_ADDR_VAR 0 17
12538: PUSH
12539: LD_VAR 0 17
12543: PPUSH
12544: LD_VAR 0 13
12548: PUSH
12549: LD_VAR 0 17
12553: PUSH
12554: LD_VAR 0 13
12558: ARRAY
12559: PUSH
12560: LD_INT 1
12562: MINUS
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PPUSH
12568: LD_INT 0
12570: PPUSH
12571: CALL 33360 0 3
12575: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
12576: LD_VAR 0 17
12580: PUSH
12581: LD_VAR 0 13
12585: ARRAY
12586: PUSH
12587: LD_INT 1
12589: ARRAY
12590: PPUSH
12591: LD_VAR 0 5
12595: PPUSH
12596: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
12600: LD_VAR 0 17
12604: PUSH
12605: LD_VAR 0 13
12609: ARRAY
12610: PUSH
12611: LD_INT 1
12613: ARRAY
12614: PPUSH
12615: CALL_OW 256
12619: PUSH
12620: LD_INT 250
12622: LESS
12623: IFFALSE 12650
// personel = personel diff [ personel [ i ] ] ;
12625: LD_ADDR_VAR 0 17
12629: PUSH
12630: LD_VAR 0 17
12634: PUSH
12635: LD_VAR 0 17
12639: PUSH
12640: LD_VAR 0 13
12644: ARRAY
12645: PUSH
12646: EMPTY
12647: LIST
12648: DIFF
12649: ST_TO_ADDR
// end ;
12650: GO 12441
12652: POP
12653: POP
// for i := 1 to vehicles do
12654: LD_ADDR_VAR 0 13
12658: PUSH
12659: DOUBLE
12660: LD_INT 1
12662: DEC
12663: ST_TO_ADDR
12664: LD_VAR 0 23
12668: PUSH
12669: FOR_TO
12670: IFFALSE 13009
// begin if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
12672: LD_VAR 0 23
12676: PUSH
12677: LD_VAR 0 13
12681: ARRAY
12682: PUSH
12683: LD_INT 1
12685: ARRAY
12686: PPUSH
12687: CALL_OW 256
12691: PUSH
12692: LD_INT 1000
12694: EQUAL
12695: IFFALSE 12870
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
12697: LD_VAR 0 23
12701: PUSH
12702: LD_VAR 0 13
12706: ARRAY
12707: PUSH
12708: LD_INT 1
12710: ARRAY
12711: PPUSH
12712: CALL_OW 263
12716: PUSH
12717: LD_INT 1
12719: EQUAL
12720: IFFALSE 12778
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
12722: LD_VAR 0 23
12726: PUSH
12727: LD_VAR 0 13
12731: ARRAY
12732: PUSH
12733: LD_INT 2
12735: ARRAY
12736: PPUSH
12737: CALL_OW 310
12741: NOT
12742: IFFALSE 12778
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
12744: LD_VAR 0 23
12748: PUSH
12749: LD_VAR 0 13
12753: ARRAY
12754: PUSH
12755: LD_INT 2
12757: ARRAY
12758: PPUSH
12759: LD_VAR 0 23
12763: PUSH
12764: LD_VAR 0 13
12768: ARRAY
12769: PUSH
12770: LD_INT 1
12772: ARRAY
12773: PPUSH
12774: CALL_OW 120
// if vehicles < vehiclesToAttackAmount then
12778: LD_VAR 0 23
12782: PUSH
12783: LD_VAR 0 10
12787: LESS
12788: IFFALSE 12830
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) else
12790: LD_ADDR_VAR 0 23
12794: PUSH
12795: LD_VAR 0 23
12799: PPUSH
12800: LD_VAR 0 13
12804: PUSH
12805: LD_VAR 0 23
12809: PUSH
12810: LD_VAR 0 13
12814: ARRAY
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PPUSH
12820: LD_INT 1
12822: PPUSH
12823: CALL 33360 0 3
12827: ST_TO_ADDR
12828: GO 12868
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
12830: LD_ADDR_VAR 0 23
12834: PUSH
12835: LD_VAR 0 23
12839: PPUSH
12840: LD_VAR 0 13
12844: PUSH
12845: LD_VAR 0 23
12849: PUSH
12850: LD_VAR 0 13
12854: ARRAY
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: PPUSH
12860: LD_INT 2
12862: PPUSH
12863: CALL 33360 0 3
12867: ST_TO_ADDR
// end else
12868: GO 12957
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
12870: LD_VAR 0 23
12874: PUSH
12875: LD_VAR 0 13
12879: ARRAY
12880: PUSH
12881: LD_INT 1
12883: ARRAY
12884: PPUSH
12885: CALL_OW 256
12889: PUSH
12890: LD_INT 650
12892: LESSEQUAL
12893: IFFALSE 12957
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
12895: LD_ADDR_VAR 0 23
12899: PUSH
12900: LD_VAR 0 23
12904: PPUSH
12905: LD_VAR 0 13
12909: PUSH
12910: LD_VAR 0 23
12914: PUSH
12915: LD_VAR 0 13
12919: ARRAY
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PPUSH
12925: LD_INT 0
12927: PPUSH
12928: CALL 33360 0 3
12932: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
12933: LD_VAR 0 23
12937: PUSH
12938: LD_VAR 0 13
12942: ARRAY
12943: PUSH
12944: LD_INT 1
12946: ARRAY
12947: PPUSH
12948: LD_VAR 0 6
12952: PPUSH
12953: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
12957: LD_VAR 0 23
12961: PUSH
12962: LD_VAR 0 13
12966: ARRAY
12967: PUSH
12968: LD_INT 1
12970: ARRAY
12971: PPUSH
12972: CALL_OW 256
12976: PUSH
12977: LD_INT 250
12979: LESS
12980: IFFALSE 13007
// vehicles = vehicles diff [ vehicles [ i ] ] ;
12982: LD_ADDR_VAR 0 23
12986: PUSH
12987: LD_VAR 0 23
12991: PUSH
12992: LD_VAR 0 23
12996: PUSH
12997: LD_VAR 0 13
13001: ARRAY
13002: PUSH
13003: EMPTY
13004: LIST
13005: DIFF
13006: ST_TO_ADDR
// end ;
13007: GO 12669
13009: POP
13010: POP
// for i := 1 to personel do
13011: LD_ADDR_VAR 0 13
13015: PUSH
13016: DOUBLE
13017: LD_INT 1
13019: DEC
13020: ST_TO_ADDR
13021: LD_VAR 0 17
13025: PUSH
13026: FOR_TO
13027: IFFALSE 13068
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
13029: LD_ADDR_VAR 0 18
13033: PUSH
13034: LD_VAR 0 18
13038: PUSH
13039: LD_VAR 0 17
13043: PUSH
13044: LD_VAR 0 13
13048: ARRAY
13049: PPUSH
13050: LD_INT 25
13052: PUSH
13053: LD_INT 1
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PPUSH
13060: CALL_OW 72
13064: ADD
13065: ST_TO_ADDR
13066: GO 13026
13068: POP
13069: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
13070: LD_VAR 0 18
13074: PUSH
13075: LD_VAR 0 31
13079: PPUSH
13080: LD_INT 3
13082: PUSH
13083: LD_INT 59
13085: PUSH
13086: EMPTY
13087: LIST
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: PPUSH
13093: CALL_OW 72
13097: AND
13098: IFFALSE 13386
// begin for i := 1 to personel do
13100: LD_ADDR_VAR 0 13
13104: PUSH
13105: DOUBLE
13106: LD_INT 1
13108: DEC
13109: ST_TO_ADDR
13110: LD_VAR 0 17
13114: PUSH
13115: FOR_TO
13116: IFFALSE 13382
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
13118: LD_VAR 0 17
13122: PUSH
13123: LD_VAR 0 13
13127: ARRAY
13128: PUSH
13129: LD_INT 1
13131: ARRAY
13132: PPUSH
13133: CALL_OW 257
13137: PUSH
13138: LD_INT 1
13140: EQUAL
13141: PUSH
13142: LD_VAR 0 17
13146: PUSH
13147: LD_VAR 0 13
13151: ARRAY
13152: PUSH
13153: LD_INT 3
13155: ARRAY
13156: PUSH
13157: LD_INT 1
13159: EQUAL
13160: AND
13161: IFFALSE 13380
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13163: LD_VAR 0 17
13167: PUSH
13168: LD_VAR 0 13
13172: ARRAY
13173: PUSH
13174: LD_INT 1
13176: ARRAY
13177: PPUSH
13178: CALL_OW 437
13182: IFFALSE 13283
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
13184: LD_VAR 0 17
13188: PUSH
13189: LD_VAR 0 13
13193: ARRAY
13194: PUSH
13195: LD_INT 1
13197: ARRAY
13198: PPUSH
13199: CALL_OW 437
13203: PUSH
13204: LD_INT 1
13206: ARRAY
13207: PUSH
13208: LD_INT 1
13210: ARRAY
13211: PUSH
13212: LD_STRING e
13214: EQUAL
13215: PUSH
13216: LD_VAR 0 17
13220: PUSH
13221: LD_VAR 0 13
13225: ARRAY
13226: PUSH
13227: LD_INT 1
13229: ARRAY
13230: PPUSH
13231: CALL_OW 437
13235: PUSH
13236: LD_INT 1
13238: ARRAY
13239: PUSH
13240: LD_INT 4
13242: ARRAY
13243: PPUSH
13244: CALL_OW 266
13248: PUSH
13249: LD_INT 4
13251: PUSH
13252: LD_INT 5
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: IN
13259: AND
13260: IFFALSE 13283
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13262: LD_VAR 0 17
13266: PUSH
13267: LD_VAR 0 13
13271: ARRAY
13272: PUSH
13273: LD_INT 1
13275: ARRAY
13276: PPUSH
13277: EMPTY
13278: PPUSH
13279: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
13283: LD_ADDR_VAR 0 35
13287: PUSH
13288: LD_VAR 0 31
13292: PPUSH
13293: LD_INT 3
13295: PUSH
13296: LD_INT 59
13298: PUSH
13299: EMPTY
13300: LIST
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PPUSH
13306: CALL_OW 72
13310: PUSH
13311: FOR_IN
13312: IFFALSE 13378
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
13314: LD_VAR 0 17
13318: PUSH
13319: LD_VAR 0 13
13323: ARRAY
13324: PUSH
13325: LD_INT 1
13327: ARRAY
13328: PPUSH
13329: CALL_OW 310
13333: PPUSH
13334: CALL_OW 266
13338: PUSH
13339: LD_INT 31
13341: PUSH
13342: LD_INT 32
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: IN
13349: NOT
13350: IFFALSE 13376
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
13352: LD_VAR 0 17
13356: PUSH
13357: LD_VAR 0 13
13361: ARRAY
13362: PUSH
13363: LD_INT 1
13365: ARRAY
13366: PPUSH
13367: LD_VAR 0 35
13371: PPUSH
13372: CALL_OW 120
13376: GO 13311
13378: POP
13379: POP
// end ; end ;
13380: GO 13115
13382: POP
13383: POP
// end else
13384: GO 13601
// if soldiers and barracks then
13386: LD_VAR 0 18
13390: PUSH
13391: LD_VAR 0 32
13395: AND
13396: IFFALSE 13601
// for i := 1 to personel do
13398: LD_ADDR_VAR 0 13
13402: PUSH
13403: DOUBLE
13404: LD_INT 1
13406: DEC
13407: ST_TO_ADDR
13408: LD_VAR 0 17
13412: PUSH
13413: FOR_TO
13414: IFFALSE 13599
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
13416: LD_VAR 0 17
13420: PUSH
13421: LD_VAR 0 13
13425: ARRAY
13426: PUSH
13427: LD_INT 1
13429: ARRAY
13430: PPUSH
13431: CALL_OW 257
13435: PUSH
13436: LD_INT 1
13438: EQUAL
13439: PUSH
13440: LD_VAR 0 17
13444: PUSH
13445: LD_VAR 0 13
13449: ARRAY
13450: PUSH
13451: LD_INT 3
13453: ARRAY
13454: PUSH
13455: LD_INT 1
13457: EQUAL
13458: AND
13459: PUSH
13460: LD_VAR 0 17
13464: PUSH
13465: LD_VAR 0 13
13469: ARRAY
13470: PUSH
13471: LD_INT 1
13473: ARRAY
13474: PPUSH
13475: LD_INT 56
13477: PUSH
13478: EMPTY
13479: LIST
13480: PPUSH
13481: CALL_OW 72
13485: AND
13486: IFFALSE 13597
// begin if not personel [ i ] [ 2 ] then
13488: LD_VAR 0 17
13492: PUSH
13493: LD_VAR 0 13
13497: ARRAY
13498: PUSH
13499: LD_INT 2
13501: ARRAY
13502: NOT
13503: IFFALSE 13563
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
13505: LD_ADDR_VAR 0 17
13509: PUSH
13510: LD_VAR 0 17
13514: PPUSH
13515: LD_VAR 0 13
13519: PUSH
13520: LD_VAR 0 17
13524: PUSH
13525: LD_VAR 0 13
13529: ARRAY
13530: PUSH
13531: LD_INT 1
13533: MINUS
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: PPUSH
13539: LD_VAR 0 32
13543: PUSH
13544: LD_INT 1
13546: PPUSH
13547: LD_VAR 0 32
13551: PPUSH
13552: CALL_OW 12
13556: ARRAY
13557: PPUSH
13558: CALL 33360 0 3
13562: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13563: LD_VAR 0 17
13567: PUSH
13568: LD_VAR 0 13
13572: ARRAY
13573: PUSH
13574: LD_INT 1
13576: ARRAY
13577: PPUSH
13578: LD_VAR 0 17
13582: PUSH
13583: LD_VAR 0 13
13587: ARRAY
13588: PUSH
13589: LD_INT 2
13591: ARRAY
13592: PPUSH
13593: CALL_OW 120
// end ;
13597: GO 13413
13599: POP
13600: POP
// for i := 1 to personel do
13601: LD_ADDR_VAR 0 13
13605: PUSH
13606: DOUBLE
13607: LD_INT 1
13609: DEC
13610: ST_TO_ADDR
13611: LD_VAR 0 17
13615: PUSH
13616: FOR_TO
13617: IFFALSE 13658
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
13619: LD_ADDR_VAR 0 19
13623: PUSH
13624: LD_VAR 0 19
13628: PUSH
13629: LD_VAR 0 17
13633: PUSH
13634: LD_VAR 0 13
13638: ARRAY
13639: PPUSH
13640: LD_INT 25
13642: PUSH
13643: LD_INT 2
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: PPUSH
13650: CALL_OW 72
13654: ADD
13655: ST_TO_ADDR
13656: GO 13616
13658: POP
13659: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
13660: LD_VAR 0 19
13664: PUSH
13665: LD_VAR 0 4
13669: PPUSH
13670: LD_INT 22
13672: PUSH
13673: LD_VAR 0 1
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: LD_INT 21
13684: PUSH
13685: LD_INT 3
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PUSH
13692: LD_INT 3
13694: PUSH
13695: LD_INT 24
13697: PUSH
13698: LD_INT 1000
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: LIST
13713: PPUSH
13714: CALL_OW 70
13718: AND
13719: IFFALSE 13995
// begin for i := 1 to personel do
13721: LD_ADDR_VAR 0 13
13725: PUSH
13726: DOUBLE
13727: LD_INT 1
13729: DEC
13730: ST_TO_ADDR
13731: LD_VAR 0 17
13735: PUSH
13736: FOR_TO
13737: IFFALSE 13991
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
13739: LD_VAR 0 17
13743: PUSH
13744: LD_VAR 0 13
13748: ARRAY
13749: PUSH
13750: LD_INT 1
13752: ARRAY
13753: PPUSH
13754: CALL_OW 257
13758: PUSH
13759: LD_INT 2
13761: EQUAL
13762: PUSH
13763: LD_VAR 0 17
13767: PUSH
13768: LD_VAR 0 13
13772: ARRAY
13773: PUSH
13774: LD_INT 3
13776: ARRAY
13777: PUSH
13778: LD_INT 1
13780: EQUAL
13781: AND
13782: IFFALSE 13989
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13784: LD_VAR 0 17
13788: PUSH
13789: LD_VAR 0 13
13793: ARRAY
13794: PUSH
13795: LD_INT 1
13797: ARRAY
13798: PPUSH
13799: CALL_OW 437
13803: IFFALSE 13859
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13805: LD_VAR 0 17
13809: PUSH
13810: LD_VAR 0 13
13814: ARRAY
13815: PUSH
13816: LD_INT 1
13818: ARRAY
13819: PPUSH
13820: CALL_OW 437
13824: PUSH
13825: LD_INT 1
13827: ARRAY
13828: PUSH
13829: LD_INT 1
13831: ARRAY
13832: PUSH
13833: LD_STRING e
13835: EQUAL
13836: IFFALSE 13859
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13838: LD_VAR 0 17
13842: PUSH
13843: LD_VAR 0 13
13847: ARRAY
13848: PUSH
13849: LD_INT 1
13851: ARRAY
13852: PPUSH
13853: EMPTY
13854: PPUSH
13855: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13859: LD_VAR 0 17
13863: PUSH
13864: LD_VAR 0 13
13868: ARRAY
13869: PUSH
13870: LD_INT 1
13872: ARRAY
13873: PPUSH
13874: CALL_OW 310
13878: IFFALSE 13899
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
13880: LD_VAR 0 17
13884: PUSH
13885: LD_VAR 0 13
13889: ARRAY
13890: PUSH
13891: LD_INT 1
13893: ARRAY
13894: PPUSH
13895: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
13899: LD_ADDR_VAR 0 33
13903: PUSH
13904: LD_VAR 0 4
13908: PPUSH
13909: LD_INT 22
13911: PUSH
13912: LD_VAR 0 1
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: LD_INT 21
13923: PUSH
13924: LD_INT 3
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PUSH
13931: LD_INT 3
13933: PUSH
13934: LD_INT 24
13936: PUSH
13937: LD_INT 1000
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: LIST
13952: PPUSH
13953: CALL_OW 70
13957: PUSH
13958: FOR_IN
13959: IFFALSE 13987
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
13961: LD_VAR 0 17
13965: PUSH
13966: LD_VAR 0 13
13970: ARRAY
13971: PUSH
13972: LD_INT 1
13974: ARRAY
13975: PPUSH
13976: LD_VAR 0 33
13980: PPUSH
13981: CALL_OW 190
13985: GO 13958
13987: POP
13988: POP
// end ;
13989: GO 13736
13991: POP
13992: POP
// end else
13993: GO 14257
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
13995: LD_VAR 0 19
13999: PUSH
14000: LD_VAR 0 19
14004: PPUSH
14005: LD_INT 56
14007: PUSH
14008: EMPTY
14009: LIST
14010: PPUSH
14011: CALL_OW 72
14015: AND
14016: PUSH
14017: LD_VAR 0 28
14021: AND
14022: IFFALSE 14257
// for i := 1 to personel do
14024: LD_ADDR_VAR 0 13
14028: PUSH
14029: DOUBLE
14030: LD_INT 1
14032: DEC
14033: ST_TO_ADDR
14034: LD_VAR 0 17
14038: PUSH
14039: FOR_TO
14040: IFFALSE 14255
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
14042: LD_VAR 0 17
14046: PUSH
14047: LD_VAR 0 13
14051: ARRAY
14052: PUSH
14053: LD_INT 1
14055: ARRAY
14056: PPUSH
14057: CALL_OW 257
14061: PUSH
14062: LD_INT 2
14064: EQUAL
14065: PUSH
14066: LD_VAR 0 17
14070: PUSH
14071: LD_VAR 0 13
14075: ARRAY
14076: PUSH
14077: LD_INT 3
14079: ARRAY
14080: PUSH
14081: LD_INT 1
14083: EQUAL
14084: AND
14085: IFFALSE 14253
// begin if not personel [ i ] [ 2 ] then
14087: LD_VAR 0 17
14091: PUSH
14092: LD_VAR 0 13
14096: ARRAY
14097: PUSH
14098: LD_INT 2
14100: ARRAY
14101: NOT
14102: IFFALSE 14219
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
14104: LD_ADDR_VAR 0 17
14108: PUSH
14109: LD_VAR 0 17
14113: PPUSH
14114: LD_VAR 0 13
14118: PUSH
14119: LD_VAR 0 17
14123: PUSH
14124: LD_VAR 0 13
14128: ARRAY
14129: PUSH
14130: LD_INT 1
14132: MINUS
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: PPUSH
14138: LD_VAR 0 4
14142: PPUSH
14143: LD_INT 22
14145: PUSH
14146: LD_VAR 0 1
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PUSH
14155: LD_INT 21
14157: PUSH
14158: LD_INT 3
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: PUSH
14165: LD_INT 50
14167: PUSH
14168: EMPTY
14169: LIST
14170: PUSH
14171: LD_INT 2
14173: PUSH
14174: LD_INT 30
14176: PUSH
14177: LD_INT 0
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PUSH
14184: LD_INT 30
14186: PUSH
14187: LD_INT 1
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: LIST
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: PPUSH
14205: CALL_OW 70
14209: PUSH
14210: LD_INT 1
14212: ARRAY
14213: PPUSH
14214: CALL 33360 0 3
14218: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14219: LD_VAR 0 17
14223: PUSH
14224: LD_VAR 0 13
14228: ARRAY
14229: PUSH
14230: LD_INT 1
14232: ARRAY
14233: PPUSH
14234: LD_VAR 0 17
14238: PUSH
14239: LD_VAR 0 13
14243: ARRAY
14244: PUSH
14245: LD_INT 2
14247: ARRAY
14248: PPUSH
14249: CALL_OW 120
// end ; end ;
14253: GO 14039
14255: POP
14256: POP
// for i := 1 to personel do
14257: LD_ADDR_VAR 0 13
14261: PUSH
14262: DOUBLE
14263: LD_INT 1
14265: DEC
14266: ST_TO_ADDR
14267: LD_VAR 0 17
14271: PUSH
14272: FOR_TO
14273: IFFALSE 14314
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
14275: LD_ADDR_VAR 0 20
14279: PUSH
14280: LD_VAR 0 20
14284: PUSH
14285: LD_VAR 0 17
14289: PUSH
14290: LD_VAR 0 13
14294: ARRAY
14295: PPUSH
14296: LD_INT 25
14298: PUSH
14299: LD_INT 3
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PPUSH
14306: CALL_OW 72
14310: ADD
14311: ST_TO_ADDR
14312: GO 14272
14314: POP
14315: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14316: LD_VAR 0 20
14320: PUSH
14321: LD_VAR 0 4
14325: PPUSH
14326: LD_INT 22
14328: PUSH
14329: LD_VAR 0 1
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: LD_INT 21
14340: PUSH
14341: LD_INT 2
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 3
14350: PUSH
14351: LD_INT 24
14353: PUSH
14354: LD_INT 1000
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: LIST
14369: PPUSH
14370: CALL_OW 70
14374: AND
14375: IFFALSE 14979
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14377: LD_ADDR_VAR 0 34
14381: PUSH
14382: LD_VAR 0 4
14386: PPUSH
14387: LD_INT 22
14389: PUSH
14390: LD_VAR 0 1
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 21
14401: PUSH
14402: LD_INT 2
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: LD_INT 3
14411: PUSH
14412: LD_INT 24
14414: PUSH
14415: LD_INT 1000
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: LIST
14430: PPUSH
14431: CALL_OW 70
14435: PUSH
14436: FOR_IN
14437: IFFALSE 14975
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
14439: LD_VAR 0 34
14443: PPUSH
14444: LD_VAR 0 6
14448: PPUSH
14449: CALL_OW 299
14453: PUSH
14454: LD_INT 5
14456: LESS
14457: IFFALSE 14752
// begin for i := 1 to vehicles do
14459: LD_ADDR_VAR 0 13
14463: PUSH
14464: DOUBLE
14465: LD_INT 1
14467: DEC
14468: ST_TO_ADDR
14469: LD_VAR 0 23
14473: PUSH
14474: FOR_TO
14475: IFFALSE 14544
// begin if vehicles [ i ] [ 1 ] = damageUnit then
14477: LD_VAR 0 23
14481: PUSH
14482: LD_VAR 0 13
14486: ARRAY
14487: PUSH
14488: LD_INT 1
14490: ARRAY
14491: PUSH
14492: LD_VAR 0 34
14496: EQUAL
14497: IFFALSE 14518
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
14499: LD_VAR 0 23
14503: PUSH
14504: LD_VAR 0 13
14508: ARRAY
14509: PUSH
14510: LD_INT 2
14512: ARRAY
14513: PPUSH
14514: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
14518: LD_VAR 0 23
14522: PUSH
14523: LD_VAR 0 13
14527: ARRAY
14528: PUSH
14529: LD_INT 2
14531: ARRAY
14532: PPUSH
14533: LD_VAR 0 34
14537: PPUSH
14538: CALL_OW 189
// end ;
14542: GO 14474
14544: POP
14545: POP
// for i := 1 to personel do
14546: LD_ADDR_VAR 0 13
14550: PUSH
14551: DOUBLE
14552: LD_INT 1
14554: DEC
14555: ST_TO_ADDR
14556: LD_VAR 0 17
14560: PUSH
14561: FOR_TO
14562: IFFALSE 14750
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14564: LD_VAR 0 17
14568: PUSH
14569: LD_VAR 0 13
14573: ARRAY
14574: PUSH
14575: LD_INT 1
14577: ARRAY
14578: PPUSH
14579: CALL_OW 257
14583: PUSH
14584: LD_INT 3
14586: EQUAL
14587: PUSH
14588: LD_VAR 0 17
14592: PUSH
14593: LD_VAR 0 13
14597: ARRAY
14598: PUSH
14599: LD_INT 3
14601: ARRAY
14602: PUSH
14603: LD_INT 1
14605: EQUAL
14606: AND
14607: IFFALSE 14748
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14609: LD_VAR 0 17
14613: PUSH
14614: LD_VAR 0 13
14618: ARRAY
14619: PUSH
14620: LD_INT 1
14622: ARRAY
14623: PPUSH
14624: CALL_OW 437
14628: IFFALSE 14684
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14630: LD_VAR 0 17
14634: PUSH
14635: LD_VAR 0 13
14639: ARRAY
14640: PUSH
14641: LD_INT 1
14643: ARRAY
14644: PPUSH
14645: CALL_OW 437
14649: PUSH
14650: LD_INT 1
14652: ARRAY
14653: PUSH
14654: LD_INT 1
14656: ARRAY
14657: PUSH
14658: LD_STRING e
14660: EQUAL
14661: IFFALSE 14684
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14663: LD_VAR 0 17
14667: PUSH
14668: LD_VAR 0 13
14672: ARRAY
14673: PUSH
14674: LD_INT 1
14676: ARRAY
14677: PPUSH
14678: EMPTY
14679: PPUSH
14680: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14684: LD_VAR 0 17
14688: PUSH
14689: LD_VAR 0 13
14693: ARRAY
14694: PUSH
14695: LD_INT 1
14697: ARRAY
14698: PPUSH
14699: CALL_OW 310
14703: IFFALSE 14724
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14705: LD_VAR 0 17
14709: PUSH
14710: LD_VAR 0 13
14714: ARRAY
14715: PUSH
14716: LD_INT 1
14718: ARRAY
14719: PPUSH
14720: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
14724: LD_VAR 0 17
14728: PUSH
14729: LD_VAR 0 13
14733: ARRAY
14734: PUSH
14735: LD_INT 1
14737: ARRAY
14738: PPUSH
14739: LD_VAR 0 34
14743: PPUSH
14744: CALL_OW 189
// end ;
14748: GO 14561
14750: POP
14751: POP
// end ; if GetLives ( damageUnit ) < 250 then
14752: LD_VAR 0 34
14756: PPUSH
14757: CALL_OW 256
14761: PUSH
14762: LD_INT 250
14764: LESS
14765: IFFALSE 14973
// for i := 1 to personel do
14767: LD_ADDR_VAR 0 13
14771: PUSH
14772: DOUBLE
14773: LD_INT 1
14775: DEC
14776: ST_TO_ADDR
14777: LD_VAR 0 17
14781: PUSH
14782: FOR_TO
14783: IFFALSE 14971
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14785: LD_VAR 0 17
14789: PUSH
14790: LD_VAR 0 13
14794: ARRAY
14795: PUSH
14796: LD_INT 1
14798: ARRAY
14799: PPUSH
14800: CALL_OW 257
14804: PUSH
14805: LD_INT 3
14807: EQUAL
14808: PUSH
14809: LD_VAR 0 17
14813: PUSH
14814: LD_VAR 0 13
14818: ARRAY
14819: PUSH
14820: LD_INT 3
14822: ARRAY
14823: PUSH
14824: LD_INT 1
14826: EQUAL
14827: AND
14828: IFFALSE 14969
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14830: LD_VAR 0 17
14834: PUSH
14835: LD_VAR 0 13
14839: ARRAY
14840: PUSH
14841: LD_INT 1
14843: ARRAY
14844: PPUSH
14845: CALL_OW 437
14849: IFFALSE 14905
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14851: LD_VAR 0 17
14855: PUSH
14856: LD_VAR 0 13
14860: ARRAY
14861: PUSH
14862: LD_INT 1
14864: ARRAY
14865: PPUSH
14866: CALL_OW 437
14870: PUSH
14871: LD_INT 1
14873: ARRAY
14874: PUSH
14875: LD_INT 1
14877: ARRAY
14878: PUSH
14879: LD_STRING e
14881: EQUAL
14882: IFFALSE 14905
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14884: LD_VAR 0 17
14888: PUSH
14889: LD_VAR 0 13
14893: ARRAY
14894: PUSH
14895: LD_INT 1
14897: ARRAY
14898: PPUSH
14899: EMPTY
14900: PPUSH
14901: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14905: LD_VAR 0 17
14909: PUSH
14910: LD_VAR 0 13
14914: ARRAY
14915: PUSH
14916: LD_INT 1
14918: ARRAY
14919: PPUSH
14920: CALL_OW 310
14924: IFFALSE 14945
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14926: LD_VAR 0 17
14930: PUSH
14931: LD_VAR 0 13
14935: ARRAY
14936: PUSH
14937: LD_INT 1
14939: ARRAY
14940: PPUSH
14941: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
14945: LD_VAR 0 17
14949: PUSH
14950: LD_VAR 0 13
14954: ARRAY
14955: PUSH
14956: LD_INT 1
14958: ARRAY
14959: PPUSH
14960: LD_VAR 0 34
14964: PPUSH
14965: CALL_OW 189
// end ;
14969: GO 14782
14971: POP
14972: POP
// end ;
14973: GO 14436
14975: POP
14976: POP
// end else
14977: GO 15184
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
14979: LD_VAR 0 20
14983: PUSH
14984: LD_VAR 0 20
14988: PPUSH
14989: LD_INT 56
14991: PUSH
14992: EMPTY
14993: LIST
14994: PPUSH
14995: CALL_OW 72
14999: AND
15000: PUSH
15001: LD_VAR 0 29
15005: AND
15006: IFFALSE 15184
// for i := 1 to personel do
15008: LD_ADDR_VAR 0 13
15012: PUSH
15013: DOUBLE
15014: LD_INT 1
15016: DEC
15017: ST_TO_ADDR
15018: LD_VAR 0 17
15022: PUSH
15023: FOR_TO
15024: IFFALSE 15182
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15026: LD_VAR 0 17
15030: PUSH
15031: LD_VAR 0 13
15035: ARRAY
15036: PUSH
15037: LD_INT 1
15039: ARRAY
15040: PPUSH
15041: CALL_OW 257
15045: PUSH
15046: LD_INT 3
15048: EQUAL
15049: PUSH
15050: LD_VAR 0 17
15054: PUSH
15055: LD_VAR 0 13
15059: ARRAY
15060: PUSH
15061: LD_INT 3
15063: ARRAY
15064: PUSH
15065: LD_INT 1
15067: EQUAL
15068: AND
15069: IFFALSE 15180
// begin if not personel [ i ] [ 2 ] then
15071: LD_VAR 0 17
15075: PUSH
15076: LD_VAR 0 13
15080: ARRAY
15081: PUSH
15082: LD_INT 2
15084: ARRAY
15085: NOT
15086: IFFALSE 15146
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
15088: LD_ADDR_VAR 0 17
15092: PUSH
15093: LD_VAR 0 17
15097: PPUSH
15098: LD_VAR 0 13
15102: PUSH
15103: LD_VAR 0 17
15107: PUSH
15108: LD_VAR 0 13
15112: ARRAY
15113: PUSH
15114: LD_INT 1
15116: MINUS
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: PPUSH
15122: LD_VAR 0 29
15126: PUSH
15127: LD_INT 1
15129: PPUSH
15130: LD_VAR 0 29
15134: PPUSH
15135: CALL_OW 12
15139: ARRAY
15140: PPUSH
15141: CALL 33360 0 3
15145: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15146: LD_VAR 0 17
15150: PUSH
15151: LD_VAR 0 13
15155: ARRAY
15156: PUSH
15157: LD_INT 1
15159: ARRAY
15160: PPUSH
15161: LD_VAR 0 17
15165: PUSH
15166: LD_VAR 0 13
15170: ARRAY
15171: PUSH
15172: LD_INT 2
15174: ARRAY
15175: PPUSH
15176: CALL_OW 120
// end ;
15180: GO 15023
15182: POP
15183: POP
// for i := 1 to personel do
15184: LD_ADDR_VAR 0 13
15188: PUSH
15189: DOUBLE
15190: LD_INT 1
15192: DEC
15193: ST_TO_ADDR
15194: LD_VAR 0 17
15198: PUSH
15199: FOR_TO
15200: IFFALSE 15241
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
15202: LD_ADDR_VAR 0 21
15206: PUSH
15207: LD_VAR 0 21
15211: PUSH
15212: LD_VAR 0 17
15216: PUSH
15217: LD_VAR 0 13
15221: ARRAY
15222: PPUSH
15223: LD_INT 25
15225: PUSH
15226: LD_INT 4
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: PPUSH
15233: CALL_OW 72
15237: ADD
15238: ST_TO_ADDR
15239: GO 15199
15241: POP
15242: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
15243: LD_VAR 0 21
15247: PUSH
15248: LD_VAR 0 4
15252: PPUSH
15253: LD_INT 22
15255: PUSH
15256: LD_VAR 0 1
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PUSH
15265: LD_INT 21
15267: PUSH
15268: LD_INT 1
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PUSH
15275: LD_INT 3
15277: PUSH
15278: LD_INT 24
15280: PUSH
15281: LD_INT 1000
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: LIST
15296: PPUSH
15297: CALL_OW 70
15301: AND
15302: IFFALSE 15819
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
15304: LD_ADDR_VAR 0 34
15308: PUSH
15309: LD_VAR 0 4
15313: PPUSH
15314: LD_INT 22
15316: PUSH
15317: LD_VAR 0 1
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: LD_INT 21
15328: PUSH
15329: LD_INT 1
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: LD_INT 3
15338: PUSH
15339: LD_INT 24
15341: PUSH
15342: LD_INT 1000
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: LIST
15357: PPUSH
15358: CALL_OW 70
15362: PUSH
15363: FOR_IN
15364: IFFALSE 15815
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
15366: LD_VAR 0 34
15370: PPUSH
15371: LD_VAR 0 5
15375: PPUSH
15376: CALL_OW 299
15380: PUSH
15381: LD_INT 5
15383: LESS
15384: IFFALSE 15592
// for i := 1 to personel do
15386: LD_ADDR_VAR 0 13
15390: PUSH
15391: DOUBLE
15392: LD_INT 1
15394: DEC
15395: ST_TO_ADDR
15396: LD_VAR 0 17
15400: PUSH
15401: FOR_TO
15402: IFFALSE 15590
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15404: LD_VAR 0 17
15408: PUSH
15409: LD_VAR 0 13
15413: ARRAY
15414: PUSH
15415: LD_INT 1
15417: ARRAY
15418: PPUSH
15419: CALL_OW 257
15423: PUSH
15424: LD_INT 4
15426: EQUAL
15427: PUSH
15428: LD_VAR 0 17
15432: PUSH
15433: LD_VAR 0 13
15437: ARRAY
15438: PUSH
15439: LD_INT 3
15441: ARRAY
15442: PUSH
15443: LD_INT 1
15445: EQUAL
15446: AND
15447: IFFALSE 15588
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15449: LD_VAR 0 17
15453: PUSH
15454: LD_VAR 0 13
15458: ARRAY
15459: PUSH
15460: LD_INT 1
15462: ARRAY
15463: PPUSH
15464: CALL_OW 437
15468: IFFALSE 15524
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15470: LD_VAR 0 17
15474: PUSH
15475: LD_VAR 0 13
15479: ARRAY
15480: PUSH
15481: LD_INT 1
15483: ARRAY
15484: PPUSH
15485: CALL_OW 437
15489: PUSH
15490: LD_INT 1
15492: ARRAY
15493: PUSH
15494: LD_INT 1
15496: ARRAY
15497: PUSH
15498: LD_STRING e
15500: EQUAL
15501: IFFALSE 15524
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15503: LD_VAR 0 17
15507: PUSH
15508: LD_VAR 0 13
15512: ARRAY
15513: PUSH
15514: LD_INT 1
15516: ARRAY
15517: PPUSH
15518: EMPTY
15519: PPUSH
15520: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15524: LD_VAR 0 17
15528: PUSH
15529: LD_VAR 0 13
15533: ARRAY
15534: PUSH
15535: LD_INT 1
15537: ARRAY
15538: PPUSH
15539: CALL_OW 310
15543: IFFALSE 15564
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15545: LD_VAR 0 17
15549: PUSH
15550: LD_VAR 0 13
15554: ARRAY
15555: PUSH
15556: LD_INT 1
15558: ARRAY
15559: PPUSH
15560: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
15564: LD_VAR 0 17
15568: PUSH
15569: LD_VAR 0 13
15573: ARRAY
15574: PUSH
15575: LD_INT 1
15577: ARRAY
15578: PPUSH
15579: LD_VAR 0 34
15583: PPUSH
15584: CALL_OW 188
// end ;
15588: GO 15401
15590: POP
15591: POP
// if GetLives ( damageUnit ) < 250 then
15592: LD_VAR 0 34
15596: PPUSH
15597: CALL_OW 256
15601: PUSH
15602: LD_INT 250
15604: LESS
15605: IFFALSE 15813
// for i := 1 to personel do
15607: LD_ADDR_VAR 0 13
15611: PUSH
15612: DOUBLE
15613: LD_INT 1
15615: DEC
15616: ST_TO_ADDR
15617: LD_VAR 0 17
15621: PUSH
15622: FOR_TO
15623: IFFALSE 15811
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15625: LD_VAR 0 17
15629: PUSH
15630: LD_VAR 0 13
15634: ARRAY
15635: PUSH
15636: LD_INT 1
15638: ARRAY
15639: PPUSH
15640: CALL_OW 257
15644: PUSH
15645: LD_INT 4
15647: EQUAL
15648: PUSH
15649: LD_VAR 0 17
15653: PUSH
15654: LD_VAR 0 13
15658: ARRAY
15659: PUSH
15660: LD_INT 3
15662: ARRAY
15663: PUSH
15664: LD_INT 1
15666: EQUAL
15667: AND
15668: IFFALSE 15809
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15670: LD_VAR 0 17
15674: PUSH
15675: LD_VAR 0 13
15679: ARRAY
15680: PUSH
15681: LD_INT 1
15683: ARRAY
15684: PPUSH
15685: CALL_OW 437
15689: IFFALSE 15745
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15691: LD_VAR 0 17
15695: PUSH
15696: LD_VAR 0 13
15700: ARRAY
15701: PUSH
15702: LD_INT 1
15704: ARRAY
15705: PPUSH
15706: CALL_OW 437
15710: PUSH
15711: LD_INT 1
15713: ARRAY
15714: PUSH
15715: LD_INT 1
15717: ARRAY
15718: PUSH
15719: LD_STRING e
15721: EQUAL
15722: IFFALSE 15745
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15724: LD_VAR 0 17
15728: PUSH
15729: LD_VAR 0 13
15733: ARRAY
15734: PUSH
15735: LD_INT 1
15737: ARRAY
15738: PPUSH
15739: EMPTY
15740: PPUSH
15741: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15745: LD_VAR 0 17
15749: PUSH
15750: LD_VAR 0 13
15754: ARRAY
15755: PUSH
15756: LD_INT 1
15758: ARRAY
15759: PPUSH
15760: CALL_OW 310
15764: IFFALSE 15785
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15766: LD_VAR 0 17
15770: PUSH
15771: LD_VAR 0 13
15775: ARRAY
15776: PUSH
15777: LD_INT 1
15779: ARRAY
15780: PPUSH
15781: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
15785: LD_VAR 0 17
15789: PUSH
15790: LD_VAR 0 13
15794: ARRAY
15795: PUSH
15796: LD_INT 1
15798: ARRAY
15799: PPUSH
15800: LD_VAR 0 34
15804: PPUSH
15805: CALL_OW 188
// end ;
15809: GO 15622
15811: POP
15812: POP
// end ;
15813: GO 15363
15815: POP
15816: POP
// end else
15817: GO 16024
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
15819: LD_VAR 0 21
15823: PUSH
15824: LD_VAR 0 21
15828: PPUSH
15829: LD_INT 56
15831: PUSH
15832: EMPTY
15833: LIST
15834: PPUSH
15835: CALL_OW 72
15839: AND
15840: PUSH
15841: LD_VAR 0 30
15845: AND
15846: IFFALSE 16024
// for i := 1 to personel do
15848: LD_ADDR_VAR 0 13
15852: PUSH
15853: DOUBLE
15854: LD_INT 1
15856: DEC
15857: ST_TO_ADDR
15858: LD_VAR 0 17
15862: PUSH
15863: FOR_TO
15864: IFFALSE 16022
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15866: LD_VAR 0 17
15870: PUSH
15871: LD_VAR 0 13
15875: ARRAY
15876: PUSH
15877: LD_INT 1
15879: ARRAY
15880: PPUSH
15881: CALL_OW 257
15885: PUSH
15886: LD_INT 4
15888: EQUAL
15889: PUSH
15890: LD_VAR 0 17
15894: PUSH
15895: LD_VAR 0 13
15899: ARRAY
15900: PUSH
15901: LD_INT 3
15903: ARRAY
15904: PUSH
15905: LD_INT 1
15907: EQUAL
15908: AND
15909: IFFALSE 16020
// begin if not personel [ i ] [ 2 ] then
15911: LD_VAR 0 17
15915: PUSH
15916: LD_VAR 0 13
15920: ARRAY
15921: PUSH
15922: LD_INT 2
15924: ARRAY
15925: NOT
15926: IFFALSE 15986
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
15928: LD_ADDR_VAR 0 17
15932: PUSH
15933: LD_VAR 0 17
15937: PPUSH
15938: LD_VAR 0 13
15942: PUSH
15943: LD_VAR 0 17
15947: PUSH
15948: LD_VAR 0 13
15952: ARRAY
15953: PUSH
15954: LD_INT 1
15956: MINUS
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PPUSH
15962: LD_VAR 0 30
15966: PUSH
15967: LD_INT 1
15969: PPUSH
15970: LD_VAR 0 30
15974: PPUSH
15975: CALL_OW 12
15979: ARRAY
15980: PPUSH
15981: CALL 33360 0 3
15985: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15986: LD_VAR 0 17
15990: PUSH
15991: LD_VAR 0 13
15995: ARRAY
15996: PUSH
15997: LD_INT 1
15999: ARRAY
16000: PPUSH
16001: LD_VAR 0 17
16005: PUSH
16006: LD_VAR 0 13
16010: ARRAY
16011: PUSH
16012: LD_INT 2
16014: ARRAY
16015: PPUSH
16016: CALL_OW 120
// end ;
16020: GO 15863
16022: POP
16023: POP
// wait ( 0 0$01 ) ;
16024: LD_INT 35
16026: PPUSH
16027: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
16031: LD_VAR 0 23
16035: PUSH
16036: LD_VAR 0 8
16040: LESS
16041: PUSH
16042: LD_VAR 0 29
16046: AND
16047: IFFALSE 16297
// begin tmp = vehiclesAmount - vehicles ;
16049: LD_ADDR_VAR 0 14
16053: PUSH
16054: LD_VAR 0 8
16058: PUSH
16059: LD_VAR 0 23
16063: MINUS
16064: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
16065: LD_ADDR_VAR 0 26
16069: PUSH
16070: LD_VAR 0 1
16074: PPUSH
16075: LD_VAR 0 2
16079: PPUSH
16080: CALL 7608 0 2
16084: ST_TO_ADDR
// for i := 1 to tmp do
16085: LD_ADDR_VAR 0 13
16089: PUSH
16090: DOUBLE
16091: LD_INT 1
16093: DEC
16094: ST_TO_ADDR
16095: LD_VAR 0 14
16099: PUSH
16100: FOR_TO
16101: IFFALSE 16293
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
16103: LD_ADDR_VAR 0 14
16107: PUSH
16108: LD_VAR 0 26
16112: PUSH
16113: LD_INT 1
16115: PPUSH
16116: LD_VAR 0 26
16120: PPUSH
16121: CALL_OW 12
16125: ARRAY
16126: ST_TO_ADDR
// if tmp then
16127: LD_VAR 0 14
16131: IFFALSE 16291
// begin if tmp in [ 34 , 14 , 71 ] then
16133: LD_VAR 0 14
16137: PUSH
16138: LD_INT 34
16140: PUSH
16141: LD_INT 14
16143: PUSH
16144: LD_INT 71
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: LIST
16151: IN
16152: IFFALSE 16190
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
16154: LD_ADDR_VAR 0 27
16158: PUSH
16159: LD_INT 4
16161: PUSH
16162: EMPTY
16163: LIST
16164: PUSH
16165: LD_INT 14
16167: PUSH
16168: EMPTY
16169: LIST
16170: PUSH
16171: LD_INT 24
16173: PUSH
16174: EMPTY
16175: LIST
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: LIST
16181: PUSH
16182: LD_VAR 0 2
16186: ARRAY
16187: ST_TO_ADDR
16188: GO 16248
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
16190: LD_ADDR_VAR 0 27
16194: PUSH
16195: LD_INT 2
16197: PUSH
16198: LD_INT 3
16200: PUSH
16201: LD_INT 4
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: LIST
16208: PUSH
16209: LD_INT 13
16211: PUSH
16212: LD_INT 14
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PUSH
16219: LD_INT 21
16221: PUSH
16222: LD_INT 23
16224: PUSH
16225: LD_INT 24
16227: PUSH
16228: LD_INT 22
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: LIST
16241: PUSH
16242: LD_VAR 0 2
16246: ARRAY
16247: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
16248: LD_VAR 0 29
16252: PUSH
16253: LD_INT 1
16255: ARRAY
16256: PPUSH
16257: LD_VAR 0 27
16261: PUSH
16262: LD_INT 1
16264: PPUSH
16265: LD_VAR 0 27
16269: PPUSH
16270: CALL_OW 12
16274: ARRAY
16275: PPUSH
16276: LD_INT 1
16278: PPUSH
16279: LD_INT 1
16281: PPUSH
16282: LD_VAR 0 14
16286: PPUSH
16287: CALL_OW 185
// end ; end ;
16291: GO 16100
16293: POP
16294: POP
// end else
16295: GO 16310
// ComCancel ( factory [ 1 ] ) ;
16297: LD_VAR 0 29
16301: PUSH
16302: LD_INT 1
16304: ARRAY
16305: PPUSH
16306: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) do
16310: LD_ADDR_VAR 0 22
16314: PUSH
16315: LD_VAR 0 4
16319: PPUSH
16320: LD_INT 22
16322: PUSH
16323: LD_VAR 0 1
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 21
16334: PUSH
16335: LD_INT 2
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PPUSH
16346: CALL_OW 70
16350: PUSH
16351: FOR_IN
16352: IFFALSE 16522
// begin vehicleInList = false ;
16354: LD_ADDR_VAR 0 24
16358: PUSH
16359: LD_INT 0
16361: ST_TO_ADDR
// for i := 1 to vehicles do
16362: LD_ADDR_VAR 0 13
16366: PUSH
16367: DOUBLE
16368: LD_INT 1
16370: DEC
16371: ST_TO_ADDR
16372: LD_VAR 0 23
16376: PUSH
16377: FOR_TO
16378: IFFALSE 16408
// begin if vehicle in vehicles [ i ] then
16380: LD_VAR 0 22
16384: PUSH
16385: LD_VAR 0 23
16389: PUSH
16390: LD_VAR 0 13
16394: ARRAY
16395: IN
16396: IFFALSE 16406
// vehicleInList = true ;
16398: LD_ADDR_VAR 0 24
16402: PUSH
16403: LD_INT 1
16405: ST_TO_ADDR
// end ;
16406: GO 16377
16408: POP
16409: POP
// if not vehicleInList then
16410: LD_VAR 0 24
16414: NOT
16415: IFFALSE 16520
// if vehicles < vehiclesToAttackAmount then
16417: LD_VAR 0 23
16421: PUSH
16422: LD_VAR 0 10
16426: LESS
16427: IFFALSE 16479
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , IsOK ( vehicle ) ] ] else
16429: LD_ADDR_VAR 0 23
16433: PUSH
16434: LD_VAR 0 23
16438: PUSH
16439: LD_VAR 0 22
16443: PUSH
16444: LD_VAR 0 22
16448: PPUSH
16449: CALL_OW 313
16453: PUSH
16454: LD_INT 1
16456: ARRAY
16457: PUSH
16458: LD_VAR 0 22
16462: PPUSH
16463: CALL_OW 302
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: LIST
16472: PUSH
16473: EMPTY
16474: LIST
16475: ADD
16476: ST_TO_ADDR
16477: GO 16520
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
16479: LD_ADDR_VAR 0 23
16483: PUSH
16484: LD_VAR 0 23
16488: PUSH
16489: LD_VAR 0 22
16493: PUSH
16494: LD_VAR 0 22
16498: PPUSH
16499: CALL_OW 313
16503: PUSH
16504: LD_INT 1
16506: ARRAY
16507: PUSH
16508: LD_INT 2
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: LIST
16515: PUSH
16516: EMPTY
16517: LIST
16518: ADD
16519: ST_TO_ADDR
// end ;
16520: GO 16351
16522: POP
16523: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
16524: LD_ADDR_VAR 0 36
16528: PUSH
16529: LD_VAR 0 7
16533: PPUSH
16534: LD_INT 81
16536: PUSH
16537: LD_VAR 0 1
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PPUSH
16546: CALL_OW 70
16550: PUSH
16551: FOR_IN
16552: IFFALSE 16731
// begin defenceUnits = [ ] ;
16554: LD_ADDR_VAR 0 25
16558: PUSH
16559: EMPTY
16560: ST_TO_ADDR
// for i := 1 to personel do
16561: LD_ADDR_VAR 0 13
16565: PUSH
16566: DOUBLE
16567: LD_INT 1
16569: DEC
16570: ST_TO_ADDR
16571: LD_VAR 0 17
16575: PUSH
16576: FOR_TO
16577: IFFALSE 16627
// if personel [ i ] [ 3 ] = 2 then
16579: LD_VAR 0 17
16583: PUSH
16584: LD_VAR 0 13
16588: ARRAY
16589: PUSH
16590: LD_INT 3
16592: ARRAY
16593: PUSH
16594: LD_INT 2
16596: EQUAL
16597: IFFALSE 16625
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
16599: LD_ADDR_VAR 0 25
16603: PUSH
16604: LD_VAR 0 25
16608: PUSH
16609: LD_VAR 0 17
16613: PUSH
16614: LD_VAR 0 13
16618: ARRAY
16619: PUSH
16620: LD_INT 1
16622: ARRAY
16623: ADD
16624: ST_TO_ADDR
16625: GO 16576
16627: POP
16628: POP
// for i := 1 to vehicles do
16629: LD_ADDR_VAR 0 13
16633: PUSH
16634: DOUBLE
16635: LD_INT 1
16637: DEC
16638: ST_TO_ADDR
16639: LD_VAR 0 23
16643: PUSH
16644: FOR_TO
16645: IFFALSE 16695
// if vehicles [ i ] [ 3 ] = 2 then
16647: LD_VAR 0 23
16651: PUSH
16652: LD_VAR 0 13
16656: ARRAY
16657: PUSH
16658: LD_INT 3
16660: ARRAY
16661: PUSH
16662: LD_INT 2
16664: EQUAL
16665: IFFALSE 16693
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
16667: LD_ADDR_VAR 0 25
16671: PUSH
16672: LD_VAR 0 25
16676: PUSH
16677: LD_VAR 0 23
16681: PUSH
16682: LD_VAR 0 13
16686: ARRAY
16687: PUSH
16688: LD_INT 1
16690: ARRAY
16691: ADD
16692: ST_TO_ADDR
16693: GO 16644
16695: POP
16696: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16697: LD_VAR 0 25
16701: PPUSH
16702: LD_INT 3
16704: PUSH
16705: LD_INT 60
16707: PUSH
16708: EMPTY
16709: LIST
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PPUSH
16715: CALL_OW 72
16719: PPUSH
16720: LD_VAR 0 36
16724: PPUSH
16725: CALL_OW 175
// end ;
16729: GO 16551
16731: POP
16732: POP
// until not personel or not enableOmicronAI ;
16733: LD_VAR 0 17
16737: NOT
16738: PUSH
16739: LD_EXP 29
16743: NOT
16744: OR
16745: IFFALSE 12002
// end ;
16747: LD_VAR 0 12
16751: RET
// export function MountWeaponTurrent ; var turret , weapons ; begin
16752: LD_INT 0
16754: PPUSH
16755: PPUSH
16756: PPUSH
// weapons = [ ru_gatling_gun , ru_gun ] ;
16757: LD_ADDR_VAR 0 3
16761: PUSH
16762: LD_INT 43
16764: PUSH
16765: LD_INT 44
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: ST_TO_ADDR
// for turret in kirovBunkersToMountWeapon do
16772: LD_ADDR_VAR 0 2
16776: PUSH
16777: LD_EXP 69
16781: PUSH
16782: FOR_IN
16783: IFFALSE 16815
// AddComPlaceWeapon ( turret , weapons [ rand ( 1 , weapons ) ] ) ;
16785: LD_VAR 0 2
16789: PPUSH
16790: LD_VAR 0 3
16794: PUSH
16795: LD_INT 1
16797: PPUSH
16798: LD_VAR 0 3
16802: PPUSH
16803: CALL_OW 12
16807: ARRAY
16808: PPUSH
16809: CALL_OW 208
16813: GO 16782
16815: POP
16816: POP
// end ;
16817: LD_VAR 0 1
16821: RET
// export function KirovProduceVehicles ( factory ) ; begin
16822: LD_INT 0
16824: PPUSH
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
16825: LD_VAR 0 1
16829: PPUSH
16830: LD_INT 21
16832: PPUSH
16833: LD_INT 1
16835: PPUSH
16836: LD_INT 1
16838: PPUSH
16839: LD_INT 51
16841: PPUSH
16842: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
16846: LD_VAR 0 1
16850: PPUSH
16851: LD_INT 21
16853: PPUSH
16854: LD_INT 1
16856: PPUSH
16857: LD_INT 1
16859: PPUSH
16860: LD_INT 51
16862: PPUSH
16863: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
16867: LD_VAR 0 1
16871: PPUSH
16872: LD_INT 21
16874: PPUSH
16875: LD_INT 1
16877: PPUSH
16878: LD_INT 1
16880: PPUSH
16881: LD_INT 51
16883: PPUSH
16884: CALL_OW 185
// case Difficulty of 1 :
16888: LD_OWVAR 67
16892: PUSH
16893: LD_INT 1
16895: DOUBLE
16896: EQUAL
16897: IFTRUE 16901
16899: GO 17024
16901: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
16902: LD_VAR 0 1
16906: PPUSH
16907: LD_INT 21
16909: PUSH
16910: LD_INT 23
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: LD_INT 1
16919: PPUSH
16920: LD_INT 2
16922: PPUSH
16923: CALL_OW 12
16927: ARRAY
16928: PPUSH
16929: LD_INT 1
16931: PPUSH
16932: LD_INT 1
16934: PPUSH
16935: LD_INT 43
16937: PPUSH
16938: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
16942: LD_VAR 0 1
16946: PPUSH
16947: LD_INT 21
16949: PUSH
16950: LD_INT 23
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PUSH
16957: LD_INT 1
16959: PPUSH
16960: LD_INT 2
16962: PPUSH
16963: CALL_OW 12
16967: ARRAY
16968: PPUSH
16969: LD_INT 1
16971: PPUSH
16972: LD_INT 1
16974: PPUSH
16975: LD_INT 43
16977: PPUSH
16978: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
16982: LD_VAR 0 1
16986: PPUSH
16987: LD_INT 21
16989: PUSH
16990: LD_INT 23
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: LD_INT 1
16999: PPUSH
17000: LD_INT 2
17002: PPUSH
17003: CALL_OW 12
17007: ARRAY
17008: PPUSH
17009: LD_INT 1
17011: PPUSH
17012: LD_INT 1
17014: PPUSH
17015: LD_INT 44
17017: PPUSH
17018: CALL_OW 185
// end ; 2 :
17022: GO 17287
17024: LD_INT 2
17026: DOUBLE
17027: EQUAL
17028: IFTRUE 17032
17030: GO 17155
17032: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17033: LD_VAR 0 1
17037: PPUSH
17038: LD_INT 21
17040: PUSH
17041: LD_INT 23
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 1
17050: PPUSH
17051: LD_INT 2
17053: PPUSH
17054: CALL_OW 12
17058: ARRAY
17059: PPUSH
17060: LD_INT 1
17062: PPUSH
17063: LD_INT 1
17065: PPUSH
17066: LD_INT 42
17068: PPUSH
17069: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17073: LD_VAR 0 1
17077: PPUSH
17078: LD_INT 21
17080: PUSH
17081: LD_INT 23
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 1
17090: PPUSH
17091: LD_INT 2
17093: PPUSH
17094: CALL_OW 12
17098: ARRAY
17099: PPUSH
17100: LD_INT 1
17102: PPUSH
17103: LD_INT 1
17105: PPUSH
17106: LD_INT 43
17108: PPUSH
17109: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17113: LD_VAR 0 1
17117: PPUSH
17118: LD_INT 21
17120: PUSH
17121: LD_INT 23
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: LD_INT 1
17130: PPUSH
17131: LD_INT 2
17133: PPUSH
17134: CALL_OW 12
17138: ARRAY
17139: PPUSH
17140: LD_INT 1
17142: PPUSH
17143: LD_INT 1
17145: PPUSH
17146: LD_INT 43
17148: PPUSH
17149: CALL_OW 185
// end ; 3 :
17153: GO 17287
17155: LD_INT 3
17157: DOUBLE
17158: EQUAL
17159: IFTRUE 17163
17161: GO 17286
17163: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17164: LD_VAR 0 1
17168: PPUSH
17169: LD_INT 21
17171: PUSH
17172: LD_INT 23
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PUSH
17179: LD_INT 1
17181: PPUSH
17182: LD_INT 2
17184: PPUSH
17185: CALL_OW 12
17189: ARRAY
17190: PPUSH
17191: LD_INT 1
17193: PPUSH
17194: LD_INT 1
17196: PPUSH
17197: LD_INT 42
17199: PPUSH
17200: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17204: LD_VAR 0 1
17208: PPUSH
17209: LD_INT 21
17211: PUSH
17212: LD_INT 23
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: LD_INT 1
17221: PPUSH
17222: LD_INT 2
17224: PPUSH
17225: CALL_OW 12
17229: ARRAY
17230: PPUSH
17231: LD_INT 1
17233: PPUSH
17234: LD_INT 1
17236: PPUSH
17237: LD_INT 42
17239: PPUSH
17240: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17244: LD_VAR 0 1
17248: PPUSH
17249: LD_INT 21
17251: PUSH
17252: LD_INT 23
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 1
17261: PPUSH
17262: LD_INT 2
17264: PPUSH
17265: CALL_OW 12
17269: ARRAY
17270: PPUSH
17271: LD_INT 1
17273: PPUSH
17274: LD_INT 1
17276: PPUSH
17277: LD_INT 43
17279: PPUSH
17280: CALL_OW 185
// end ; end ;
17284: GO 17287
17286: POP
// end ;
17287: LD_VAR 0 2
17291: RET
// export function KirovAttackOmicron ; var i , vehicles , vehicle , goodVehs ; begin
17292: LD_INT 0
17294: PPUSH
17295: PPUSH
17296: PPUSH
17297: PPUSH
17298: PPUSH
// vehicles = [ ] ;
17299: LD_ADDR_VAR 0 3
17303: PUSH
17304: EMPTY
17305: ST_TO_ADDR
// for vehicle in kirovAttackVehicles do
17306: LD_ADDR_VAR 0 4
17310: PUSH
17311: LD_EXP 73
17315: PUSH
17316: FOR_IN
17317: IFFALSE 17366
// vehicles = Insert ( vehicles , 1 , [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 1 ] ) ;
17319: LD_ADDR_VAR 0 3
17323: PUSH
17324: LD_VAR 0 3
17328: PPUSH
17329: LD_INT 1
17331: PPUSH
17332: LD_VAR 0 4
17336: PUSH
17337: LD_VAR 0 4
17341: PPUSH
17342: CALL_OW 313
17346: PUSH
17347: LD_INT 1
17349: ARRAY
17350: PUSH
17351: LD_INT 1
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: LIST
17358: PPUSH
17359: CALL_OW 2
17363: ST_TO_ADDR
17364: GO 17316
17366: POP
17367: POP
// repeat for i := 1 to vehicles do
17368: LD_ADDR_VAR 0 2
17372: PUSH
17373: DOUBLE
17374: LD_INT 1
17376: DEC
17377: ST_TO_ADDR
17378: LD_VAR 0 3
17382: PUSH
17383: FOR_TO
17384: IFFALSE 17422
// if vehicles [ i ] [ 3 ] = 1 then
17386: LD_VAR 0 3
17390: PUSH
17391: LD_VAR 0 2
17395: ARRAY
17396: PUSH
17397: LD_INT 3
17399: ARRAY
17400: PUSH
17401: LD_INT 1
17403: EQUAL
17404: IFFALSE 17420
// goodVehs = goodVehs + 1 ;
17406: LD_ADDR_VAR 0 5
17410: PUSH
17411: LD_VAR 0 5
17415: PUSH
17416: LD_INT 1
17418: PLUS
17419: ST_TO_ADDR
17420: GO 17383
17422: POP
17423: POP
// if goodVehs = vehicles then
17424: LD_VAR 0 5
17428: PUSH
17429: LD_VAR 0 3
17433: EQUAL
17434: IFFALSE 17483
// for i := 1 to vehicles do
17436: LD_ADDR_VAR 0 2
17440: PUSH
17441: DOUBLE
17442: LD_INT 1
17444: DEC
17445: ST_TO_ADDR
17446: LD_VAR 0 3
17450: PUSH
17451: FOR_TO
17452: IFFALSE 17481
// ComAgressiveMove ( vehicles [ i ] [ 1 ] , 26 , 35 ) ;
17454: LD_VAR 0 3
17458: PUSH
17459: LD_VAR 0 2
17463: ARRAY
17464: PUSH
17465: LD_INT 1
17467: ARRAY
17468: PPUSH
17469: LD_INT 26
17471: PPUSH
17472: LD_INT 35
17474: PPUSH
17475: CALL_OW 114
17479: GO 17451
17481: POP
17482: POP
// goodVehs = 0 ;
17483: LD_ADDR_VAR 0 5
17487: PUSH
17488: LD_INT 0
17490: ST_TO_ADDR
// for i := 1 to vehicles do
17491: LD_ADDR_VAR 0 2
17495: PUSH
17496: DOUBLE
17497: LD_INT 1
17499: DEC
17500: ST_TO_ADDR
17501: LD_VAR 0 3
17505: PUSH
17506: FOR_TO
17507: IFFALSE 17907
// begin if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and not GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
17509: LD_VAR 0 3
17513: PUSH
17514: LD_VAR 0 2
17518: ARRAY
17519: PUSH
17520: LD_INT 1
17522: ARRAY
17523: PPUSH
17524: CALL_OW 256
17528: PUSH
17529: LD_INT 500
17531: LESS
17532: PUSH
17533: LD_VAR 0 3
17537: PUSH
17538: LD_VAR 0 2
17542: ARRAY
17543: PUSH
17544: LD_INT 1
17546: ARRAY
17547: PPUSH
17548: LD_INT 78
17550: PPUSH
17551: LD_INT 39
17553: PPUSH
17554: CALL_OW 297
17558: PUSH
17559: LD_INT 9
17561: LESS
17562: NOT
17563: AND
17564: IFFALSE 17629
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
17566: LD_ADDR_VAR 0 3
17570: PUSH
17571: LD_VAR 0 3
17575: PPUSH
17576: LD_VAR 0 2
17580: PUSH
17581: LD_VAR 0 3
17585: PUSH
17586: LD_VAR 0 2
17590: ARRAY
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PPUSH
17596: LD_INT 2
17598: PPUSH
17599: CALL 33360 0 3
17603: ST_TO_ADDR
// ComMoveXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) ;
17604: LD_VAR 0 3
17608: PUSH
17609: LD_VAR 0 2
17613: ARRAY
17614: PUSH
17615: LD_INT 1
17617: ARRAY
17618: PPUSH
17619: LD_INT 78
17621: PPUSH
17622: LD_INT 39
17624: PPUSH
17625: CALL_OW 111
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
17629: LD_VAR 0 3
17633: PUSH
17634: LD_VAR 0 2
17638: ARRAY
17639: PUSH
17640: LD_INT 1
17642: ARRAY
17643: PPUSH
17644: CALL_OW 256
17648: PUSH
17649: LD_INT 500
17651: LESS
17652: PUSH
17653: LD_VAR 0 3
17657: PUSH
17658: LD_VAR 0 2
17662: ARRAY
17663: PUSH
17664: LD_INT 1
17666: ARRAY
17667: PPUSH
17668: LD_INT 78
17670: PPUSH
17671: LD_INT 39
17673: PPUSH
17674: CALL_OW 297
17678: PUSH
17679: LD_INT 9
17681: LESS
17682: AND
17683: IFFALSE 17738
// begin AddComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
17685: LD_VAR 0 3
17689: PUSH
17690: LD_VAR 0 2
17694: ARRAY
17695: PUSH
17696: LD_INT 2
17698: ARRAY
17699: PPUSH
17700: CALL_OW 181
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
17704: LD_VAR 0 3
17708: PUSH
17709: LD_VAR 0 2
17713: ARRAY
17714: PUSH
17715: LD_INT 2
17717: ARRAY
17718: PPUSH
17719: LD_VAR 0 3
17723: PUSH
17724: LD_VAR 0 2
17728: ARRAY
17729: PUSH
17730: LD_INT 1
17732: ARRAY
17733: PPUSH
17734: CALL_OW 189
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 and vehicles [ i ] [ 3 ] = 2 then
17738: LD_VAR 0 3
17742: PUSH
17743: LD_VAR 0 2
17747: ARRAY
17748: PUSH
17749: LD_INT 1
17751: ARRAY
17752: PPUSH
17753: CALL_OW 256
17757: PUSH
17758: LD_INT 1000
17760: EQUAL
17761: PUSH
17762: LD_VAR 0 3
17766: PUSH
17767: LD_VAR 0 2
17771: ARRAY
17772: PUSH
17773: LD_INT 3
17775: ARRAY
17776: PUSH
17777: LD_INT 2
17779: EQUAL
17780: AND
17781: IFFALSE 17855
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) ;
17783: LD_ADDR_VAR 0 3
17787: PUSH
17788: LD_VAR 0 3
17792: PPUSH
17793: LD_VAR 0 2
17797: PUSH
17798: LD_VAR 0 3
17802: PUSH
17803: LD_VAR 0 2
17807: ARRAY
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PPUSH
17813: LD_INT 1
17815: PPUSH
17816: CALL 33360 0 3
17820: ST_TO_ADDR
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
17821: LD_VAR 0 3
17825: PUSH
17826: LD_VAR 0 2
17830: ARRAY
17831: PUSH
17832: LD_INT 2
17834: ARRAY
17835: PPUSH
17836: LD_VAR 0 3
17840: PUSH
17841: LD_VAR 0 2
17845: ARRAY
17846: PUSH
17847: LD_INT 1
17849: ARRAY
17850: PPUSH
17851: CALL_OW 120
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
17855: LD_VAR 0 3
17859: PUSH
17860: LD_VAR 0 2
17864: ARRAY
17865: PUSH
17866: LD_INT 1
17868: ARRAY
17869: PPUSH
17870: CALL_OW 256
17874: PUSH
17875: LD_INT 250
17877: LESS
17878: IFFALSE 17905
// vehicles = vehicles diff [ vehicles [ i ] ] ;
17880: LD_ADDR_VAR 0 3
17884: PUSH
17885: LD_VAR 0 3
17889: PUSH
17890: LD_VAR 0 3
17894: PUSH
17895: LD_VAR 0 2
17899: ARRAY
17900: PUSH
17901: EMPTY
17902: LIST
17903: DIFF
17904: ST_TO_ADDR
// end ;
17905: GO 17506
17907: POP
17908: POP
// wait ( 0 0$1 ) ;
17909: LD_INT 35
17911: PPUSH
17912: CALL_OW 67
// until omicronSurrender ;
17916: LD_EXP 23
17920: IFFALSE 17368
// end ;
17922: LD_VAR 0 1
17926: RET
// export function MoveToBase ( units , roadArea ) ; var i , unit , playerUnits , playerUnit , enemyUnitsOnRoad , cratesOnRoad , nearUnit , nearCrates , attackUnits , medics , damageUnits , inBase , newBase ; begin
17927: LD_INT 0
17929: PPUSH
17930: PPUSH
17931: PPUSH
17932: PPUSH
17933: PPUSH
17934: PPUSH
17935: PPUSH
17936: PPUSH
17937: PPUSH
17938: PPUSH
17939: PPUSH
17940: PPUSH
17941: PPUSH
17942: PPUSH
// inBase = false ;
17943: LD_ADDR_VAR 0 15
17947: PUSH
17948: LD_INT 0
17950: ST_TO_ADDR
// repeat enemyUnitsOnRoad = FilterUnitsInArea ( roadArea , [ [ f_side , 3 ] ] ) ;
17951: LD_ADDR_VAR 0 8
17955: PUSH
17956: LD_VAR 0 2
17960: PPUSH
17961: LD_INT 22
17963: PUSH
17964: LD_INT 3
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: EMPTY
17972: LIST
17973: PPUSH
17974: CALL_OW 70
17978: ST_TO_ADDR
// cratesOnRoad = GetListOfCratesInArea ( roadArea ) ;
17979: LD_ADDR_VAR 0 9
17983: PUSH
17984: LD_VAR 0 2
17988: PPUSH
17989: CALL_OW 435
17993: ST_TO_ADDR
// attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_mechanic ] , [ f_type , unit_vehicle ] ] ] ) ;
17994: LD_ADDR_VAR 0 12
17998: PUSH
17999: LD_VAR 0 1
18003: PPUSH
18004: LD_INT 50
18006: PUSH
18007: EMPTY
18008: LIST
18009: PUSH
18010: LD_INT 2
18012: PUSH
18013: LD_INT 25
18015: PUSH
18016: LD_INT 1
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 25
18025: PUSH
18026: LD_INT 3
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: LD_INT 21
18035: PUSH
18036: LD_INT 2
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PPUSH
18053: CALL_OW 72
18057: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
18058: LD_ADDR_VAR 0 13
18062: PUSH
18063: LD_VAR 0 1
18067: PPUSH
18068: LD_INT 50
18070: PUSH
18071: EMPTY
18072: LIST
18073: PUSH
18074: LD_INT 25
18076: PUSH
18077: LD_INT 4
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PPUSH
18088: CALL_OW 72
18092: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ f_not , [ f_lives , 1000 ] ] ) ;
18093: LD_ADDR_VAR 0 14
18097: PUSH
18098: LD_VAR 0 1
18102: PPUSH
18103: LD_INT 3
18105: PUSH
18106: LD_INT 24
18108: PUSH
18109: LD_INT 1000
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PPUSH
18120: CALL_OW 72
18124: ST_TO_ADDR
// playerUnits = FilterAllUnits ( [ [ f_side , 3 ] ] ) ;
18125: LD_ADDR_VAR 0 6
18129: PUSH
18130: LD_INT 22
18132: PUSH
18133: LD_INT 3
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: EMPTY
18141: LIST
18142: PPUSH
18143: CALL_OW 69
18147: ST_TO_ADDR
// for unit in UnitFilter ( units , [ [ f_ok ] ] ) do
18148: LD_ADDR_VAR 0 5
18152: PUSH
18153: LD_VAR 0 1
18157: PPUSH
18158: LD_INT 50
18160: PUSH
18161: EMPTY
18162: LIST
18163: PUSH
18164: EMPTY
18165: LIST
18166: PPUSH
18167: CALL_OW 72
18171: PUSH
18172: FOR_IN
18173: IFFALSE 18511
// begin if attackUnits and medics then
18175: LD_VAR 0 12
18179: PUSH
18180: LD_VAR 0 13
18184: AND
18185: IFFALSE 18252
// begin if damageUnits then
18187: LD_VAR 0 14
18191: IFFALSE 18213
// ComHeal ( medics , damageUnits [ 1 ] ) else
18193: LD_VAR 0 13
18197: PPUSH
18198: LD_VAR 0 14
18202: PUSH
18203: LD_INT 1
18205: ARRAY
18206: PPUSH
18207: CALL_OW 128
18211: GO 18250
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
18213: LD_VAR 0 13
18217: PPUSH
18218: LD_VAR 0 12
18222: PUSH
18223: LD_INT 1
18225: ARRAY
18226: PPUSH
18227: CALL_OW 250
18231: PPUSH
18232: LD_VAR 0 12
18236: PUSH
18237: LD_INT 1
18239: ARRAY
18240: PPUSH
18241: CALL_OW 251
18245: PPUSH
18246: CALL_OW 111
// end else
18250: GO 18281
// begin if not attackUnits and medics then
18252: LD_VAR 0 12
18256: NOT
18257: PUSH
18258: LD_VAR 0 13
18262: AND
18263: IFFALSE 18281
// attackUnits = attackUnits ^ medics ;
18265: LD_ADDR_VAR 0 12
18269: PUSH
18270: LD_VAR 0 12
18274: PUSH
18275: LD_VAR 0 13
18279: ADD
18280: ST_TO_ADDR
// end ; for i := 1 to cratesOnRoad / 2 do
18281: LD_ADDR_VAR 0 4
18285: PUSH
18286: DOUBLE
18287: LD_INT 1
18289: DEC
18290: ST_TO_ADDR
18291: LD_VAR 0 9
18295: PUSH
18296: LD_INT 2
18298: DIVREAL
18299: PUSH
18300: FOR_TO
18301: IFFALSE 18340
// AddComAttackPlace ( attackUnits , cratesOnRoad [ i ] , cratesOnRoad [ i + 1 ] ) ;
18303: LD_VAR 0 12
18307: PPUSH
18308: LD_VAR 0 9
18312: PUSH
18313: LD_VAR 0 4
18317: ARRAY
18318: PPUSH
18319: LD_VAR 0 9
18323: PUSH
18324: LD_VAR 0 4
18328: PUSH
18329: LD_INT 1
18331: PLUS
18332: ARRAY
18333: PPUSH
18334: CALL_OW 176
18338: GO 18300
18340: POP
18341: POP
// if enemyUnitsOnRoad then
18342: LD_VAR 0 8
18346: IFFALSE 18465
// begin for playerUnit in playerUnits do
18348: LD_ADDR_VAR 0 7
18352: PUSH
18353: LD_VAR 0 6
18357: PUSH
18358: FOR_IN
18359: IFFALSE 18461
// begin if Attacks ( playerUnit ) then
18361: LD_VAR 0 7
18365: PPUSH
18366: CALL_OW 320
18370: IFFALSE 18425
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
18372: LD_VAR 0 7
18376: PPUSH
18377: CALL_OW 320
18381: PUSH
18382: LD_VAR 0 1
18386: IN
18387: PUSH
18388: LD_VAR 0 7
18392: PPUSH
18393: LD_VAR 0 5
18397: PPUSH
18398: CALL_OW 296
18402: PUSH
18403: LD_INT 13
18405: LESS
18406: AND
18407: IFFALSE 18423
// ComAttackUnit ( attackUnits , playerUnit ) end else
18409: LD_VAR 0 12
18413: PPUSH
18414: LD_VAR 0 7
18418: PPUSH
18419: CALL_OW 115
18423: GO 18459
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , unit ) ;
18425: LD_ADDR_VAR 0 10
18429: PUSH
18430: LD_VAR 0 8
18434: PPUSH
18435: LD_VAR 0 5
18439: PPUSH
18440: CALL_OW 74
18444: ST_TO_ADDR
// ComAttackUnit ( attackUnits , nearUnit ) ;
18445: LD_VAR 0 12
18449: PPUSH
18450: LD_VAR 0 10
18454: PPUSH
18455: CALL_OW 115
// end ; end ;
18459: GO 18358
18461: POP
18462: POP
// end else
18463: GO 18480
// begin ComMoveXY ( unit , 27 , 34 ) ;
18465: LD_VAR 0 5
18469: PPUSH
18470: LD_INT 27
18472: PPUSH
18473: LD_INT 34
18475: PPUSH
18476: CALL_OW 111
// end ; if GetDistUnitXY ( unit , 27 , 34 ) < 5 then
18480: LD_VAR 0 5
18484: PPUSH
18485: LD_INT 27
18487: PPUSH
18488: LD_INT 34
18490: PPUSH
18491: CALL_OW 297
18495: PUSH
18496: LD_INT 5
18498: LESS
18499: IFFALSE 18509
// inBase = true ;
18501: LD_ADDR_VAR 0 15
18505: PUSH
18506: LD_INT 1
18508: ST_TO_ADDR
// end ;
18509: GO 18172
18511: POP
18512: POP
// wait ( 0 0$1 ) ;
18513: LD_INT 35
18515: PPUSH
18516: CALL_OW 67
// until UnitFilter ( units , [ f_ok ] ) = 0 or inBase ;
18520: LD_VAR 0 1
18524: PPUSH
18525: LD_INT 50
18527: PUSH
18528: EMPTY
18529: LIST
18530: PPUSH
18531: CALL_OW 72
18535: PUSH
18536: LD_INT 0
18538: EQUAL
18539: PUSH
18540: LD_VAR 0 15
18544: OR
18545: IFFALSE 17951
// ComMoveXY ( units , 27 , 34 ) ;
18547: LD_VAR 0 1
18551: PPUSH
18552: LD_INT 27
18554: PPUSH
18555: LD_INT 34
18557: PPUSH
18558: CALL_OW 111
// for i := 1 to units do
18562: LD_ADDR_VAR 0 4
18566: PUSH
18567: DOUBLE
18568: LD_INT 1
18570: DEC
18571: ST_TO_ADDR
18572: LD_VAR 0 1
18576: PUSH
18577: FOR_TO
18578: IFFALSE 18613
// if IsOk ( units [ i ] ) then
18580: LD_VAR 0 1
18584: PUSH
18585: LD_VAR 0 4
18589: ARRAY
18590: PPUSH
18591: CALL_OW 302
18595: IFFALSE 18611
// americanTroopsArriveOmicronCounter = americanTroopsArriveOmicronCounter + 1 ;
18597: LD_ADDR_EXP 12
18601: PUSH
18602: LD_EXP 12
18606: PUSH
18607: LD_INT 1
18609: PLUS
18610: ST_TO_ADDR
18611: GO 18577
18613: POP
18614: POP
// amSupportTroops = amSupportTroops diff units ;
18615: LD_ADDR_EXP 81
18619: PUSH
18620: LD_EXP 81
18624: PUSH
18625: LD_VAR 0 1
18629: DIFF
18630: ST_TO_ADDR
// newBase = amBase ;
18631: LD_ADDR_VAR 0 16
18635: PUSH
18636: LD_EXP 83
18640: ST_TO_ADDR
// newBase = newBase ^ UnitFilter ( units , [ f_ok ] ) ;
18641: LD_ADDR_VAR 0 16
18645: PUSH
18646: LD_VAR 0 16
18650: PUSH
18651: LD_VAR 0 1
18655: PPUSH
18656: LD_INT 50
18658: PUSH
18659: EMPTY
18660: LIST
18661: PPUSH
18662: CALL_OW 72
18666: ADD
18667: ST_TO_ADDR
// amBase = newBase ;
18668: LD_ADDR_EXP 83
18672: PUSH
18673: LD_VAR 0 16
18677: ST_TO_ADDR
// end ; end_of_file
18678: LD_VAR 0 3
18682: RET
// export function Lose_Burlak ; begin
18683: LD_INT 0
18685: PPUSH
// YouLost ( Burlak ) ;
18686: LD_STRING Burlak
18688: PPUSH
18689: CALL_OW 104
// end ;
18693: LD_VAR 0 1
18697: RET
// export function Lose_Omicron ; begin
18698: LD_INT 0
18700: PPUSH
// YouLost ( Omicron ) ;
18701: LD_STRING Omicron
18703: PPUSH
18704: CALL_OW 104
// end ;
18708: LD_VAR 0 1
18712: RET
// export function Lose_Vehicles ; begin
18713: LD_INT 0
18715: PPUSH
// YouLost ( Vehicles ) ;
18716: LD_STRING Vehicles
18718: PPUSH
18719: CALL_OW 104
// end ;
18723: LD_VAR 0 1
18727: RET
// export function Lose_SelfAttack ; begin
18728: LD_INT 0
18730: PPUSH
// YouLost ( SelfAttack ) ;
18731: LD_STRING SelfAttack
18733: PPUSH
18734: CALL_OW 104
// end ;
18738: LD_VAR 0 1
18742: RET
// export function Lose_Delay ; begin
18743: LD_INT 0
18745: PPUSH
// YouLost ( Delay ) ;
18746: LD_STRING Delay
18748: PPUSH
18749: CALL_OW 104
// end ; end_of_file
18753: LD_VAR 0 1
18757: RET
// export function FinishMission ; begin
18758: LD_INT 0
18760: PPUSH
// SetRewards ;
18761: CALL 18782 0 0
// SavePlayerCharacters ;
18765: CALL 18996 0 0
// SaveGlobalVariables ;
18769: CALL 19325 0 0
// YouWin ;
18773: CALL_OW 103
// end ;
18777: LD_VAR 0 1
18781: RET
// function SetRewards ; var unitsToReward ; begin
18782: LD_INT 0
18784: PPUSH
18785: PPUSH
// if produceMoreVehicles then
18786: LD_EXP 16
18790: IFFALSE 18804
// AddMedal ( Surplus , 1 ) else
18792: LD_STRING Surplus
18794: PPUSH
18795: LD_INT 1
18797: PPUSH
18798: CALL_OW 101
18802: GO 18834
// if produceOnlyForYou then
18804: LD_EXP 17
18808: IFFALSE 18823
// AddMedal ( Surplus , - 1 ) else
18810: LD_STRING Surplus
18812: PPUSH
18813: LD_INT 1
18815: NEG
18816: PPUSH
18817: CALL_OW 101
18821: GO 18834
// AddMedal ( Surplus , - 2 ) ;
18823: LD_STRING Surplus
18825: PPUSH
18826: LD_INT 2
18828: NEG
18829: PPUSH
18830: CALL_OW 101
// if americanTroopsArriveOmicronCounter < maxAmericanTroopsIgnore then
18834: LD_EXP 12
18838: PUSH
18839: LD_EXP 44
18843: LESS
18844: IFFALSE 18858
// AddMedal ( PreventReinforcements , 1 ) else
18846: LD_STRING PreventReinforcements
18848: PPUSH
18849: LD_INT 1
18851: PPUSH
18852: CALL_OW 101
18856: GO 18869
// AddMedal ( PreventReinforcements , - 1 ) ;
18858: LD_STRING PreventReinforcements
18860: PPUSH
18861: LD_INT 1
18863: NEG
18864: PPUSH
18865: CALL_OW 101
// if scholtzeSaved and IsOK ( Scholtze ) then
18869: LD_EXP 7
18873: PUSH
18874: LD_EXP 52
18878: PPUSH
18879: CALL_OW 302
18883: AND
18884: IFFALSE 18898
// AddMedal ( Scholtze , 1 ) else
18886: LD_STRING Scholtze
18888: PPUSH
18889: LD_INT 1
18891: PPUSH
18892: CALL_OW 101
18896: GO 18909
// AddMedal ( Scholtze , - 1 ) ;
18898: LD_STRING Scholtze
18900: PPUSH
18901: LD_INT 1
18903: NEG
18904: PPUSH
18905: CALL_OW 101
// GiveMedals ( Main ) ;
18909: LD_STRING Main
18911: PPUSH
18912: CALL_OW 102
// unitsToReward = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
18916: LD_ADDR_VAR 0 2
18920: PUSH
18921: LD_INT 22
18923: PUSH
18924: LD_INT 3
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 21
18933: PUSH
18934: LD_INT 1
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PPUSH
18945: CALL_OW 69
18949: ST_TO_ADDR
// unitsToReward = unitsToReward ^ survivorsArabianAttack ;
18950: LD_ADDR_VAR 0 2
18954: PUSH
18955: LD_VAR 0 2
18959: PUSH
18960: LD_EXP 76
18964: ADD
18965: ST_TO_ADDR
// unitsToReward = unitsToReward diff Popov ;
18966: LD_ADDR_VAR 0 2
18970: PUSH
18971: LD_VAR 0 2
18975: PUSH
18976: LD_EXP 59
18980: DIFF
18981: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
18982: LD_VAR 0 2
18986: PPUSH
18987: CALL_OW 43
// end ;
18991: LD_VAR 0 1
18995: RET
// function SavePlayerCharacters ; var othersYour , othersKirov ; begin
18996: LD_INT 0
18998: PPUSH
18999: PPUSH
19000: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
19001: LD_EXP 46
19005: PPUSH
19006: LD_STRING Burlak
19008: PPUSH
19009: LD_INT 3
19011: PPUSH
19012: CALL 7106 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
19016: LD_EXP 47
19020: PPUSH
19021: LD_STRING Gnyevko
19023: PPUSH
19024: LD_INT 3
19026: PPUSH
19027: CALL 7106 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
19031: LD_EXP 49
19035: PPUSH
19036: LD_STRING Kovalyuk
19038: PPUSH
19039: LD_INT 3
19041: PPUSH
19042: CALL 7106 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
19046: LD_EXP 48
19050: PPUSH
19051: LD_STRING Kirilenkova
19053: PPUSH
19054: LD_INT 3
19056: PPUSH
19057: CALL 7106 0 3
// ExtSaveCharacter ( Scholtze , Scholtze , 3 ) ;
19061: LD_EXP 52
19065: PPUSH
19066: LD_STRING Scholtze
19068: PPUSH
19069: LD_INT 3
19071: PPUSH
19072: CALL 7106 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
19076: LD_EXP 50
19080: PPUSH
19081: LD_STRING Belkov
19083: PPUSH
19084: LD_INT 3
19086: PPUSH
19087: CALL 7106 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
19091: LD_EXP 51
19095: PPUSH
19096: LD_STRING Belkov2
19098: PPUSH
19099: LD_INT 3
19101: PPUSH
19102: CALL 7106 0 3
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
19106: LD_EXP 50
19110: PPUSH
19111: LD_STRING Belkov
19113: PPUSH
19114: LD_INT 6
19116: PPUSH
19117: CALL 7106 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
19121: LD_EXP 51
19125: PPUSH
19126: LD_STRING Belkov2
19128: PPUSH
19129: LD_INT 6
19131: PPUSH
19132: CALL 7106 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova , Scholtze ] ;
19136: LD_ADDR_VAR 0 2
19140: PUSH
19141: LD_INT 22
19143: PUSH
19144: LD_INT 3
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 21
19153: PUSH
19154: LD_INT 1
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 50
19163: PUSH
19164: EMPTY
19165: LIST
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: LIST
19171: PPUSH
19172: CALL_OW 69
19176: PUSH
19177: LD_EXP 46
19181: PUSH
19182: LD_EXP 47
19186: PUSH
19187: LD_EXP 50
19191: PUSH
19192: LD_EXP 51
19196: PUSH
19197: LD_EXP 49
19201: PUSH
19202: LD_EXP 48
19206: PUSH
19207: LD_EXP 52
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: DIFF
19221: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
19222: LD_VAR 0 2
19226: PPUSH
19227: LD_STRING other_survivors
19229: PPUSH
19230: LD_INT 3
19232: PPUSH
19233: CALL 7162 0 3
// othersKirov = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Kurin , Popov , Belkov , Belkov2 ] ;
19237: LD_ADDR_VAR 0 3
19241: PUSH
19242: LD_INT 22
19244: PUSH
19245: LD_INT 6
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: LD_INT 21
19254: PUSH
19255: LD_INT 1
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PUSH
19262: LD_INT 50
19264: PUSH
19265: EMPTY
19266: LIST
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: LIST
19272: PPUSH
19273: CALL_OW 69
19277: PUSH
19278: LD_EXP 58
19282: PUSH
19283: LD_EXP 59
19287: PUSH
19288: LD_EXP 50
19292: PUSH
19293: LD_EXP 51
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: DIFF
19304: ST_TO_ADDR
// ExtSaveCharacters ( othersKirov , other_kirov , 6 ) ;
19305: LD_VAR 0 3
19309: PPUSH
19310: LD_STRING other_kirov
19312: PPUSH
19313: LD_INT 6
19315: PPUSH
19316: CALL 7162 0 3
// end ;
19320: LD_VAR 0 1
19324: RET
// function SaveGlobalVariables ; begin
19325: LD_INT 0
19327: PPUSH
// SaveVariable ( kurinOpinion , 03_KurinOpinion_1 ) ;
19328: LD_EXP 26
19332: PPUSH
19333: LD_STRING 03_KurinOpinion_1
19335: PPUSH
19336: CALL_OW 39
// end ; end_of_file
19340: LD_VAR 0 1
19344: RET
// export function CustomEvent ( event ) ; begin
19345: LD_INT 0
19347: PPUSH
// end ;
19348: LD_VAR 0 2
19352: RET
// on Command ( com ) do var i , j , temp , order , x , y , building ;
19353: LD_INT 0
19355: PPUSH
19356: PPUSH
19357: PPUSH
19358: PPUSH
19359: PPUSH
19360: PPUSH
19361: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
19362: LD_ADDR_VAR 0 2
19366: PUSH
19367: LD_INT 22
19369: PUSH
19370: LD_INT 3
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 21
19379: PUSH
19380: LD_INT 1
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PPUSH
19391: CALL_OW 69
19395: PUSH
19396: FOR_IN
19397: IFFALSE 19594
// if GetTaskList ( i ) > 0 then
19399: LD_VAR 0 2
19403: PPUSH
19404: CALL_OW 437
19408: PUSH
19409: LD_INT 0
19411: GREATER
19412: IFFALSE 19592
// for j = 1 to GetTaskList ( i ) do
19414: LD_ADDR_VAR 0 3
19418: PUSH
19419: DOUBLE
19420: LD_INT 1
19422: DEC
19423: ST_TO_ADDR
19424: LD_VAR 0 2
19428: PPUSH
19429: CALL_OW 437
19433: PUSH
19434: FOR_TO
19435: IFFALSE 19590
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
19437: LD_ADDR_VAR 0 4
19441: PUSH
19442: LD_VAR 0 2
19446: PPUSH
19447: CALL_OW 437
19451: PUSH
19452: LD_VAR 0 3
19456: ARRAY
19457: PUSH
19458: LD_INT 4
19460: ARRAY
19461: ST_TO_ADDR
// building = GetTaskList ( i ) [ j ] [ 5 ] ;
19462: LD_ADDR_VAR 0 8
19466: PUSH
19467: LD_VAR 0 2
19471: PPUSH
19472: CALL_OW 437
19476: PUSH
19477: LD_VAR 0 3
19481: ARRAY
19482: PUSH
19483: LD_INT 5
19485: ARRAY
19486: ST_TO_ADDR
// x = GetTaskList ( i ) [ j ] [ 2 ] ;
19487: LD_ADDR_VAR 0 6
19491: PUSH
19492: LD_VAR 0 2
19496: PPUSH
19497: CALL_OW 437
19501: PUSH
19502: LD_VAR 0 3
19506: ARRAY
19507: PUSH
19508: LD_INT 2
19510: ARRAY
19511: ST_TO_ADDR
// y = GetTaskList ( i ) [ j ] [ 3 ] ;
19512: LD_ADDR_VAR 0 7
19516: PUSH
19517: LD_VAR 0 2
19521: PPUSH
19522: CALL_OW 437
19526: PUSH
19527: LD_VAR 0 3
19531: ARRAY
19532: PUSH
19533: LD_INT 3
19535: ARRAY
19536: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
19537: LD_VAR 0 4
19541: PPUSH
19542: CALL_OW 255
19546: PUSH
19547: LD_INT 6
19549: EQUAL
19550: PUSH
19551: LD_VAR 0 2
19555: PPUSH
19556: CALL_OW 437
19560: PUSH
19561: LD_VAR 0 3
19565: ARRAY
19566: PUSH
19567: LD_INT 1
19569: ARRAY
19570: PUSH
19571: LD_STRING <
19573: EQUAL
19574: AND
19575: IFFALSE 19588
// SetTaskList ( i , [ ] ) ;
19577: LD_VAR 0 2
19581: PPUSH
19582: EMPTY
19583: PPUSH
19584: CALL_OW 446
// end ;
19588: GO 19434
19590: POP
19591: POP
19592: GO 19396
19594: POP
19595: POP
// end ;
19596: PPOPN 8
19598: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
19599: LD_VAR 0 2
19603: PUSH
19604: LD_INT 6
19606: EQUAL
19607: IFFALSE 19621
// SetSide ( building , 6 ) ;
19609: LD_VAR 0 1
19613: PPUSH
19614: LD_INT 6
19616: PPUSH
19617: CALL_OW 235
// end ;
19621: PPOPN 3
19623: END
// on BuildingComplete ( building ) do var diffUnits , canTakeUnits ;
19624: LD_INT 0
19626: PPUSH
19627: PPUSH
// begin diffUnits = [ ] ;
19628: LD_ADDR_VAR 0 2
19632: PUSH
19633: EMPTY
19634: ST_TO_ADDR
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , SecondBurlakBase ) then
19635: LD_VAR 0 1
19639: PPUSH
19640: CALL_OW 255
19644: PUSH
19645: LD_INT 3
19647: EQUAL
19648: PUSH
19649: LD_VAR 0 1
19653: PPUSH
19654: CALL_OW 266
19658: PUSH
19659: LD_INT 0
19661: EQUAL
19662: AND
19663: PUSH
19664: LD_VAR 0 1
19668: PPUSH
19669: LD_INT 21
19671: PPUSH
19672: CALL_OW 308
19676: AND
19677: IFFALSE 19691
// SetBName ( building , kagan ) ;
19679: LD_VAR 0 1
19683: PPUSH
19684: LD_STRING kagan
19686: PPUSH
19687: CALL_OW 500
// if GetSide ( building ) = 6 then
19691: LD_VAR 0 1
19695: PPUSH
19696: CALL_OW 255
19700: PUSH
19701: LD_INT 6
19703: EQUAL
19704: IFFALSE 19944
// begin if GetBType ( building ) = b_ext_noncombat then
19706: LD_VAR 0 1
19710: PPUSH
19711: CALL_OW 266
19715: PUSH
19716: LD_INT 19
19718: EQUAL
19719: IFFALSE 19784
// begin SpawnKirovSupport ;
19721: CALL 4478 0 0
// MountWeaponTurrent ;
19725: CALL 16752 0 0
// wait ( 3 3$30 ) ;
19729: LD_INT 7350
19731: PPUSH
19732: CALL_OW 67
// KirovProduceVehicles ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
19736: LD_INT 22
19738: PUSH
19739: LD_INT 6
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 21
19748: PUSH
19749: LD_INT 3
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: LD_INT 30
19758: PUSH
19759: LD_INT 3
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: LIST
19770: PPUSH
19771: CALL_OW 69
19775: PUSH
19776: LD_INT 1
19778: ARRAY
19779: PPUSH
19780: CALL 16822 0 1
// end ; if GetBType ( building ) = b_depot then
19784: LD_VAR 0 1
19788: PPUSH
19789: CALL_OW 266
19793: PUSH
19794: LD_INT 0
19796: EQUAL
19797: IFFALSE 19843
// begin kirovOilDepot = building ;
19799: LD_ADDR_EXP 65
19803: PUSH
19804: LD_VAR 0 1
19808: ST_TO_ADDR
// SetResourceType ( GetBase ( kirovOilDepot ) , mat_oil , 3000 ) ;
19809: LD_EXP 65
19813: PPUSH
19814: CALL_OW 274
19818: PPUSH
19819: LD_INT 2
19821: PPUSH
19822: LD_INT 3000
19824: PPUSH
19825: CALL_OW 277
// ComEnterUnit ( Grishko , building ) ;
19829: LD_EXP 79
19833: PPUSH
19834: LD_VAR 0 1
19838: PPUSH
19839: CALL_OW 120
// end ; if ( GetBType ( building ) = b_breastwork or GetBType ( building ) = b_armoury ) and IsInArea ( building , SecondKurinBase ) then
19843: LD_VAR 0 1
19847: PPUSH
19848: CALL_OW 266
19852: PUSH
19853: LD_INT 31
19855: EQUAL
19856: PUSH
19857: LD_VAR 0 1
19861: PPUSH
19862: CALL_OW 266
19866: PUSH
19867: LD_INT 4
19869: EQUAL
19870: OR
19871: PUSH
19872: LD_VAR 0 1
19876: PPUSH
19877: LD_INT 20
19879: PPUSH
19880: CALL_OW 308
19884: AND
19885: IFFALSE 19944
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) [ 1 ] , building ) ;
19887: LD_EXP 75
19891: PPUSH
19892: LD_INT 25
19894: PUSH
19895: LD_INT 1
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 56
19904: PUSH
19905: EMPTY
19906: LIST
19907: PUSH
19908: LD_INT 3
19910: PUSH
19911: LD_INT 60
19913: PUSH
19914: EMPTY
19915: LIST
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: LIST
19925: PPUSH
19926: CALL_OW 72
19930: PUSH
19931: LD_INT 1
19933: ARRAY
19934: PPUSH
19935: LD_VAR 0 1
19939: PPUSH
19940: CALL_OW 120
// end ; end ;
19944: PPOPN 3
19946: END
// on UpgradeComplete ( building ) do var i , tmp ;
19947: LD_INT 0
19949: PPUSH
19950: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_factory and not dialog_workshop then
19951: LD_VAR 0 1
19955: PPUSH
19956: CALL_OW 255
19960: PUSH
19961: LD_INT 3
19963: EQUAL
19964: PUSH
19965: LD_VAR 0 1
19969: PPUSH
19970: CALL_OW 266
19974: PUSH
19975: LD_INT 3
19977: EQUAL
19978: AND
19979: PUSH
19980: LD_EXP 8
19984: NOT
19985: AND
19986: IFFALSE 19997
// Dial_UpgradeWorkshop ( building ) ;
19988: LD_VAR 0 1
19992: PPUSH
19993: CALL 22815 0 1
// end ;
19997: PPOPN 3
19999: END
// on UnitDestroyed ( un ) do begin if un = Burlak then
20000: LD_VAR 0 1
20004: PUSH
20005: LD_EXP 46
20009: EQUAL
20010: IFFALSE 20016
// Lose_Burlak ;
20012: CALL 18683 0 0
// if un = beriaDepot and not canDestroyBeriaBase then
20016: LD_VAR 0 1
20020: PUSH
20021: LD_EXP 57
20025: EQUAL
20026: PUSH
20027: LD_EXP 28
20031: NOT
20032: AND
20033: IFFALSE 20039
// Lose_Omicron ;
20035: CALL 18698 0 0
// end ;
20039: PPOPN 1
20041: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
20042: LD_VAR 0 1
20046: PUSH
20047: LD_INT 3
20049: EQUAL
20050: PUSH
20051: LD_VAR 0 2
20055: PUSH
20056: LD_INT 6
20058: EQUAL
20059: AND
20060: IFFALSE 20066
// Lose_SelfAttack ;
20062: CALL 18728 0 0
// end ;
20066: PPOPN 2
20068: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 6 then
20069: LD_VAR 0 1
20073: PPUSH
20074: CALL_OW 255
20078: PUSH
20079: LD_INT 6
20081: EQUAL
20082: IFFALSE 20247
// begin if GetWeapon ( vehicle ) = ru_cargo_bay and not kirovTransportCargo then
20084: LD_VAR 0 1
20088: PPUSH
20089: CALL_OW 264
20093: PUSH
20094: LD_INT 51
20096: EQUAL
20097: PUSH
20098: LD_EXP 71
20102: NOT
20103: AND
20104: IFFALSE 20118
// kirovTransportCargo = vehicle else
20106: LD_ADDR_EXP 71
20110: PUSH
20111: LD_VAR 0 1
20115: ST_TO_ADDR
20116: GO 20190
// begin if GetWeapon ( vehicle ) = ru_cargo_bay then
20118: LD_VAR 0 1
20122: PPUSH
20123: CALL_OW 264
20127: PUSH
20128: LD_INT 51
20130: EQUAL
20131: IFFALSE 20190
// begin ComTransport ( vehicle , kirovOilDepot , mat_oil ) ;
20133: LD_VAR 0 1
20137: PPUSH
20138: LD_EXP 65
20142: PPUSH
20143: LD_INT 2
20145: PPUSH
20146: CALL_OW 151
// AddComMoveXY ( vehicle , 137 , 99 ) ;
20150: LD_VAR 0 1
20154: PPUSH
20155: LD_INT 137
20157: PPUSH
20158: LD_INT 99
20160: PPUSH
20161: CALL_OW 171
// AddComHold ( vehicle ) ;
20165: LD_VAR 0 1
20169: PPUSH
20170: CALL_OW 200
// kirovAttackCargo = kirovAttackCargo ^ vehicle ;
20174: LD_ADDR_EXP 72
20178: PUSH
20179: LD_EXP 72
20183: PUSH
20184: LD_VAR 0 1
20188: ADD
20189: ST_TO_ADDR
// end ; end ; if GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
20190: LD_VAR 0 1
20194: PPUSH
20195: CALL_OW 264
20199: PUSH
20200: LD_INT 42
20202: PUSH
20203: LD_INT 43
20205: PUSH
20206: LD_INT 44
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: LIST
20213: IN
20214: IFFALSE 20247
// begin kirovAttackVehicles = kirovAttackVehicles ^ vehicle ;
20216: LD_ADDR_EXP 73
20220: PUSH
20221: LD_EXP 73
20225: PUSH
20226: LD_VAR 0 1
20230: ADD
20231: ST_TO_ADDR
// ComMoveXY ( vehicle , 137 , 99 ) ;
20232: LD_VAR 0 1
20236: PPUSH
20237: LD_INT 137
20239: PPUSH
20240: LD_INT 99
20242: PPUSH
20243: CALL_OW 111
// end ; end ; end ;
20247: PPOPN 2
20249: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin if side = 6 then
20250: LD_VAR 0 3
20254: PUSH
20255: LD_INT 6
20257: EQUAL
20258: IFFALSE 20281
// begin ComExitVehicle ( capturing_unit ) ;
20260: LD_VAR 0 4
20264: PPUSH
20265: CALL_OW 121
// SetSide ( new , 6 ) ;
20269: LD_VAR 0 1
20273: PPUSH
20274: LD_INT 6
20276: PPUSH
20277: CALL_OW 235
// end ; end ;
20281: PPOPN 4
20283: END
// on EnterVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 and meetNearOmicronBase then
20284: LD_VAR 0 1
20288: PPUSH
20289: CALL_OW 255
20293: PUSH
20294: LD_INT 6
20296: EQUAL
20297: PUSH
20298: LD_EXP 19
20302: AND
20303: IFFALSE 20331
// begin wait ( 0 0$2 ) ;
20305: LD_INT 70
20307: PPUSH
20308: CALL_OW 67
// AddComAgressiveMove ( vehicle , 78 , 39 ) ;
20312: LD_VAR 0 1
20316: PPUSH
20317: LD_INT 78
20319: PPUSH
20320: LD_INT 39
20322: PPUSH
20323: CALL_OW 174
// KirovAttackOmicron ;
20327: CALL 17292 0 0
// end ; end ; end_of_file
20331: PPOPN 2
20333: END
// export function MissionIntro ; var unit ; begin
20334: LD_INT 0
20336: PPUSH
20337: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
20338: LD_EXP 46
20342: PUSH
20343: LD_EXP 58
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PPUSH
20352: CALL_OW 87
// ComTurnUnit ( [ Burlak , BelkovDialog ] , Kurin ) ;
20356: LD_EXP 46
20360: PUSH
20361: LD_EXP 60
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PPUSH
20370: LD_EXP 58
20374: PPUSH
20375: CALL_OW 119
// ComTurnUnit ( Kurin , Burlak ) ;
20379: LD_EXP 58
20383: PPUSH
20384: LD_EXP 46
20388: PPUSH
20389: CALL_OW 119
// RevealFogArea ( 3 , RevealMapPartArea ) ;
20393: LD_INT 3
20395: PPUSH
20396: LD_INT 24
20398: PPUSH
20399: CALL_OW 332
// if not IsPlaced ( Belkov ) and not IsPlaced ( Belkov2 ) then
20403: LD_EXP 50
20407: PPUSH
20408: CALL_OW 305
20412: NOT
20413: PUSH
20414: LD_EXP 51
20418: PPUSH
20419: CALL_OW 305
20423: NOT
20424: AND
20425: IFFALSE 20513
// begin Say ( Kurin , D1a-Kur-1 ) ;
20427: LD_EXP 58
20431: PPUSH
20432: LD_STRING D1a-Kur-1
20434: PPUSH
20435: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
20439: LD_EXP 46
20443: PPUSH
20444: LD_STRING D1a-Bur-1
20446: PPUSH
20447: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
20451: LD_EXP 58
20455: PPUSH
20456: LD_STRING D1a-Kur-2
20458: PPUSH
20459: CALL_OW 88
// if platonovOpinion <= 1 then
20463: LD_EXP 27
20467: PUSH
20468: LD_INT 1
20470: LESSEQUAL
20471: IFFALSE 20487
// Say ( Kurin , D1a-Kur-2a ) else
20473: LD_EXP 58
20477: PPUSH
20478: LD_STRING D1a-Kur-2a
20480: PPUSH
20481: CALL_OW 88
20485: GO 20499
// Say ( Kurin , D1a-Kur-2b ) ;
20487: LD_EXP 58
20491: PPUSH
20492: LD_STRING D1a-Kur-2b
20494: PPUSH
20495: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
20499: LD_EXP 46
20503: PPUSH
20504: LD_STRING D1a-Bur-2
20506: PPUSH
20507: CALL_OW 88
// end else
20511: GO 20549
// begin Say ( Kurin , D1b-Kur-1 ) ;
20513: LD_EXP 58
20517: PPUSH
20518: LD_STRING D1b-Kur-1
20520: PPUSH
20521: CALL_OW 88
// Say ( BelkovDialog , D1b-Bel-1 ) ;
20525: LD_EXP 60
20529: PPUSH
20530: LD_STRING D1b-Bel-1
20532: PPUSH
20533: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
20537: LD_EXP 58
20541: PPUSH
20542: LD_STRING D1b-Kur-2
20544: PPUSH
20545: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
20549: LD_EXP 58
20553: PPUSH
20554: LD_STRING D2-Kur-1
20556: PPUSH
20557: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
20561: LD_EXP 46
20565: PPUSH
20566: LD_STRING D2-Bur-1
20568: PPUSH
20569: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
20573: LD_EXP 58
20577: PPUSH
20578: LD_STRING D2-Kur-2
20580: PPUSH
20581: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
20585: LD_EXP 46
20589: PPUSH
20590: LD_STRING D2-Bur-2
20592: PPUSH
20593: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
20597: LD_EXP 58
20601: PPUSH
20602: LD_STRING D2-Kur-3
20604: PPUSH
20605: CALL_OW 88
// SetAttitude ( 1 , 6 , att_friend , true ) ;
20609: LD_INT 1
20611: PPUSH
20612: LD_INT 6
20614: PPUSH
20615: LD_INT 1
20617: PPUSH
20618: LD_INT 1
20620: PPUSH
20621: CALL_OW 80
// PrepareAmericansMissionIntro ;
20625: CALL 5535 0 0
// ComMoveXY ( amIntroUnits , 28 , 35 ) ;
20629: LD_EXP 80
20633: PPUSH
20634: LD_INT 28
20636: PPUSH
20637: LD_INT 35
20639: PPUSH
20640: CALL_OW 111
// CenterOnXY ( 93 , 36 ) ;
20644: LD_INT 93
20646: PPUSH
20647: LD_INT 36
20649: PPUSH
20650: CALL_OW 84
// PlaceSeeing ( 93 , 36 , 3 , - 9 ) ;
20654: LD_INT 93
20656: PPUSH
20657: LD_INT 36
20659: PPUSH
20660: LD_INT 3
20662: PPUSH
20663: LD_INT 9
20665: NEG
20666: PPUSH
20667: CALL_OW 330
// wait ( 0 0$6 ) ;
20671: LD_INT 210
20673: PPUSH
20674: CALL_OW 67
// CenterOnUnits ( Popov ) ;
20678: LD_EXP 59
20682: PPUSH
20683: CALL_OW 85
// wait ( 0 0$1 ) ;
20687: LD_INT 35
20689: PPUSH
20690: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
20694: LD_EXP 59
20698: PPUSH
20699: LD_STRING D2-Pop-3
20701: PPUSH
20702: CALL_OW 94
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
20706: LD_EXP 46
20710: PUSH
20711: LD_EXP 58
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PPUSH
20720: CALL_OW 87
// wait ( 0 0$1 ) ;
20724: LD_INT 35
20726: PPUSH
20727: CALL_OW 67
// for unit in amIntroUnits do
20731: LD_ADDR_VAR 0 2
20735: PUSH
20736: LD_EXP 80
20740: PUSH
20741: FOR_IN
20742: IFFALSE 20755
// RemoveUnit ( unit ) ;
20744: LD_VAR 0 2
20748: PPUSH
20749: CALL_OW 64
20753: GO 20741
20755: POP
20756: POP
// Say ( Kurin , D2-Kur-4 ) ;
20757: LD_EXP 58
20761: PPUSH
20762: LD_STRING D2-Kur-4
20764: PPUSH
20765: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
20769: LD_EXP 46
20773: PPUSH
20774: LD_STRING D2-Bur-4
20776: PPUSH
20777: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
20781: LD_EXP 58
20785: PPUSH
20786: LD_STRING D2-Kur-5
20788: PPUSH
20789: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
20793: LD_EXP 46
20797: PPUSH
20798: LD_STRING D2-Bur-5
20800: PPUSH
20801: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
20805: LD_EXP 58
20809: PPUSH
20810: LD_STRING D2-Kur-6
20812: PPUSH
20813: CALL_OW 88
// if IsPlaced ( Gnyevko ) then
20817: LD_EXP 47
20821: PPUSH
20822: CALL_OW 305
20826: IFFALSE 20842
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
20828: LD_ADDR_EXP 36
20832: PUSH
20833: LD_EXP 36
20837: PUSH
20838: LD_INT 1
20840: MINUS
20841: ST_TO_ADDR
// if IsPlaced ( Kovalyuk ) then
20842: LD_EXP 49
20846: PPUSH
20847: CALL_OW 305
20851: IFFALSE 20867
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
20853: LD_ADDR_EXP 36
20857: PUSH
20858: LD_EXP 36
20862: PUSH
20863: LD_INT 1
20865: MINUS
20866: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) then
20867: LD_EXP 48
20871: PPUSH
20872: CALL_OW 305
20876: IFFALSE 20892
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
20878: LD_ADDR_EXP 36
20882: PUSH
20883: LD_EXP 36
20887: PUSH
20888: LD_INT 1
20890: MINUS
20891: ST_TO_ADDR
// SelectCharacters ( baseUnitsToChoose ) ;
20892: LD_EXP 36
20896: PPUSH
20897: CALL 7260 0 1
// RemoveSeeing ( 93 , 36 , 3 ) ;
20901: LD_INT 93
20903: PPUSH
20904: LD_INT 36
20906: PPUSH
20907: LD_INT 3
20909: PPUSH
20910: CALL_OW 331
// RevealFogArea ( 3 , RevealMapPartArea ) ;
20914: LD_INT 3
20916: PPUSH
20917: LD_INT 24
20919: PPUSH
20920: CALL_OW 332
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
20924: LD_INT 22
20926: PUSH
20927: LD_INT 3
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 21
20936: PUSH
20937: LD_INT 1
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PPUSH
20948: CALL_OW 69
20952: PPUSH
20953: CALL_OW 122
// wait ( 0 0$1 ) ;
20957: LD_INT 35
20959: PPUSH
20960: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
20964: LD_INT 22
20966: PUSH
20967: LD_INT 3
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 21
20976: PUSH
20977: LD_INT 1
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PPUSH
20988: CALL_OW 69
20992: PPUSH
20993: LD_EXP 57
20997: PPUSH
20998: CALL_OW 250
21002: PPUSH
21003: LD_EXP 57
21007: PPUSH
21008: CALL_OW 251
21012: PPUSH
21013: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
21017: LD_INT 35
21019: PPUSH
21020: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
21024: LD_EXP 46
21028: PPUSH
21029: CALL_OW 87
// until GetDistUnits ( Burlak , beriaDepot ) < 6 ;
21033: LD_EXP 46
21037: PPUSH
21038: LD_EXP 57
21042: PPUSH
21043: CALL_OW 296
21047: PUSH
21048: LD_INT 6
21050: LESS
21051: IFFALSE 21017
// InGameOff ;
21053: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
21057: LD_STRING M1
21059: PPUSH
21060: CALL_OW 337
// SaveForQuickRestart ;
21064: CALL_OW 22
// counterEnable = true ;
21068: LD_ADDR_EXP 86
21072: PUSH
21073: LD_INT 1
21075: ST_TO_ADDR
// counterIndex = 1 ;
21076: LD_ADDR_EXP 87
21080: PUSH
21081: LD_INT 1
21083: ST_TO_ADDR
// RevealFogArea ( 3 , RevealMapPartArea ) ;
21084: LD_INT 3
21086: PPUSH
21087: LD_INT 24
21089: PPUSH
21090: CALL_OW 332
// ResAllTechs ( 6 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] , 3 ) ;
21094: LD_INT 6
21096: PPUSH
21097: LD_INT 22
21099: PUSH
21100: LD_INT 6
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 21
21109: PUSH
21110: LD_INT 3
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 30
21119: PUSH
21120: LD_INT 6
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: LIST
21131: PPUSH
21132: CALL_OW 69
21136: PUSH
21137: LD_INT 1
21139: ARRAY
21140: PPUSH
21141: LD_INT 3
21143: PPUSH
21144: CALL 8575 0 3
// ResAllTechs ( 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_lab_half ] ] ) [ 1 ] , 1 ) ;
21148: LD_INT 1
21150: PPUSH
21151: LD_INT 22
21153: PUSH
21154: LD_INT 1
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 21
21163: PUSH
21164: LD_INT 3
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 30
21173: PUSH
21174: LD_INT 7
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: LIST
21185: PPUSH
21186: CALL_OW 69
21190: PUSH
21191: LD_INT 1
21193: ARRAY
21194: PPUSH
21195: LD_INT 1
21197: PPUSH
21198: CALL 8575 0 3
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_gun , 159 , 116 , 0 ) ;
21202: LD_INT 18
21204: PPUSH
21205: LD_INT 22
21207: PUSH
21208: LD_INT 6
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 21
21217: PUSH
21218: LD_INT 1
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: LD_INT 25
21227: PUSH
21228: LD_INT 2
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: LIST
21239: PPUSH
21240: CALL_OW 70
21244: PPUSH
21245: LD_INT 17
21247: PPUSH
21248: LD_INT 159
21250: PPUSH
21251: LD_INT 116
21253: PPUSH
21254: LD_INT 0
21256: PPUSH
21257: CALL_OW 205
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_noncombat , 161 , 115 , 5 ) ;
21261: LD_INT 18
21263: PPUSH
21264: LD_INT 22
21266: PUSH
21267: LD_INT 6
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 21
21276: PUSH
21277: LD_INT 1
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 25
21286: PUSH
21287: LD_INT 2
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: LIST
21298: PPUSH
21299: CALL_OW 70
21303: PPUSH
21304: LD_INT 19
21306: PPUSH
21307: LD_INT 161
21309: PPUSH
21310: LD_INT 115
21312: PPUSH
21313: LD_INT 5
21315: PPUSH
21316: CALL_OW 205
// AddComEnterUnit ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , kirovDepot ) ;
21320: LD_INT 18
21322: PPUSH
21323: LD_INT 22
21325: PUSH
21326: LD_INT 6
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 21
21335: PUSH
21336: LD_INT 1
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 25
21345: PUSH
21346: LD_INT 2
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: LIST
21357: PPUSH
21358: CALL_OW 70
21362: PPUSH
21363: LD_EXP 64
21367: PPUSH
21368: CALL_OW 180
// ComFree ( survivorsArabianAttack ) ;
21372: LD_EXP 76
21376: PPUSH
21377: CALL_OW 139
// AddComEnterUnit ( survivorsArabianAttack diff Popov , ru2_bar1 ) ;
21381: LD_EXP 76
21385: PUSH
21386: LD_EXP 59
21390: DIFF
21391: PPUSH
21392: LD_EXP 66
21396: PPUSH
21397: CALL_OW 180
// ComWalk ( ruScout ) ;
21401: LD_EXP 61
21405: PPUSH
21406: CALL_OW 138
// wait ( 0 0$1 ) ;
21410: LD_INT 35
21412: PPUSH
21413: CALL_OW 67
// AddComMoveXY ( [ ruScout , Popov ] , 99 , 37 ) ;
21417: LD_EXP 61
21421: PUSH
21422: LD_EXP 59
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PPUSH
21431: LD_INT 99
21433: PPUSH
21434: LD_INT 37
21436: PPUSH
21437: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 88 , 60 ) ;
21441: LD_EXP 61
21445: PUSH
21446: LD_EXP 59
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PPUSH
21455: LD_INT 88
21457: PPUSH
21458: LD_INT 60
21460: PPUSH
21461: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 129 , 99 ) ;
21465: LD_EXP 61
21469: PUSH
21470: LD_EXP 59
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PPUSH
21479: LD_INT 129
21481: PPUSH
21482: LD_INT 99
21484: PPUSH
21485: CALL_OW 171
// AddComEnterUnit ( [ Popov , ruScout ] , kirovDepot ) ;
21489: LD_EXP 59
21493: PUSH
21494: LD_EXP 61
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PPUSH
21503: LD_EXP 64
21507: PPUSH
21508: CALL_OW 180
// end ;
21512: LD_VAR 0 1
21516: RET
// every 0 0$1 trigger kirovCompleteFactory do var i , tmp , pom , diffUnits , canTakeUnits ;
21517: LD_EXP 22
21521: IFFALSE 21793
21523: GO 21525
21525: DISABLE
21526: LD_INT 0
21528: PPUSH
21529: PPUSH
21530: PPUSH
21531: PPUSH
21532: PPUSH
// begin diffUnits = diffUnits ^ Kurin ;
21533: LD_ADDR_VAR 0 4
21537: PUSH
21538: LD_VAR 0 4
21542: PUSH
21543: LD_EXP 58
21547: ADD
21548: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
21549: LD_ADDR_VAR 0 4
21553: PUSH
21554: LD_VAR 0 4
21558: PUSH
21559: LD_EXP 76
21563: ADD
21564: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
21565: LD_ADDR_VAR 0 4
21569: PUSH
21570: LD_VAR 0 4
21574: PUSH
21575: LD_EXP 68
21579: ADD
21580: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff diffUnits ;
21581: LD_ADDR_VAR 0 5
21585: PUSH
21586: LD_INT 18
21588: PPUSH
21589: LD_INT 22
21591: PUSH
21592: LD_INT 6
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 21
21601: PUSH
21602: LD_INT 1
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: PPUSH
21613: CALL_OW 70
21617: PUSH
21618: LD_VAR 0 4
21622: DIFF
21623: ST_TO_ADDR
// pom = 6 ;
21624: LD_ADDR_VAR 0 3
21628: PUSH
21629: LD_INT 6
21631: ST_TO_ADDR
// if canTakeUnits then
21632: LD_VAR 0 5
21636: IFFALSE 21760
// for i = 1 to canTakeUnits do
21638: LD_ADDR_VAR 0 1
21642: PUSH
21643: DOUBLE
21644: LD_INT 1
21646: DEC
21647: ST_TO_ADDR
21648: LD_VAR 0 5
21652: PUSH
21653: FOR_TO
21654: IFFALSE 21758
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
21656: LD_VAR 0 5
21660: PUSH
21661: LD_VAR 0 1
21665: ARRAY
21666: PPUSH
21667: CALL_OW 257
21671: PUSH
21672: LD_INT 3
21674: NONEQUAL
21675: IFFALSE 21722
// begin ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
21677: LD_VAR 0 5
21681: PUSH
21682: LD_VAR 0 1
21686: ARRAY
21687: PPUSH
21688: LD_EXP 21
21692: PPUSH
21693: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , 1 ) ;
21697: LD_VAR 0 5
21701: PUSH
21702: LD_VAR 0 1
21706: ARRAY
21707: PPUSH
21708: LD_INT 1
21710: PPUSH
21711: CALL_OW 183
// wait ( 0 0$1 ) ;
21715: LD_INT 35
21717: PPUSH
21718: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
21722: LD_VAR 0 5
21726: PUSH
21727: LD_VAR 0 1
21731: ARRAY
21732: PPUSH
21733: LD_EXP 21
21737: PPUSH
21738: CALL_OW 120
// pom = pom - 1 ;
21742: LD_ADDR_VAR 0 3
21746: PUSH
21747: LD_VAR 0 3
21751: PUSH
21752: LD_INT 1
21754: MINUS
21755: ST_TO_ADDR
// end ;
21756: GO 21653
21758: POP
21759: POP
// if pom > 0 then
21760: LD_VAR 0 3
21764: PUSH
21765: LD_INT 0
21767: GREATER
21768: IFFALSE 21793
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
21770: LD_ADDR_EXP 78
21774: PUSH
21775: LD_EXP 78
21779: PPUSH
21780: LD_INT 3
21782: PPUSH
21783: LD_VAR 0 3
21787: PPUSH
21788: CALL_OW 1
21792: ST_TO_ADDR
// end ;
21793: PPOPN 5
21795: END
// every 0 0$1 trigger kirovTransportCargo do
21796: LD_EXP 71
21800: IFFALSE 21849
21802: GO 21804
21804: DISABLE
// begin enable ;
21805: ENABLE
// AddComTransport ( kirovTransportCargo , kirovOilDepot , mat_oil ) ;
21806: LD_EXP 71
21810: PPUSH
21811: LD_EXP 65
21815: PPUSH
21816: LD_INT 2
21818: PPUSH
21819: CALL_OW 211
// AddComGive ( kirovTransportCargo , kirovDepot ) ;
21823: LD_EXP 71
21827: PPUSH
21828: LD_EXP 64
21832: PPUSH
21833: CALL_OW 221
// SetFuel ( kirovTransportCargo , 100 ) ;
21837: LD_EXP 71
21841: PPUSH
21842: LD_INT 100
21844: PPUSH
21845: CALL_OW 240
// end ;
21849: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
21850: LD_INT 78
21852: PPUSH
21853: LD_INT 112
21855: PPUSH
21856: LD_INT 3
21858: PPUSH
21859: CALL_OW 440
21863: IFFALSE 21917
21865: GO 21867
21867: DISABLE
// begin CenterOnXY ( 78 , 112 ) ;
21868: LD_INT 78
21870: PPUSH
21871: LD_INT 112
21873: PPUSH
21874: CALL_OW 84
// DialogueOn ;
21878: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
21882: LD_EXP 46
21886: PPUSH
21887: LD_STRING D2a-Bur-1
21889: PPUSH
21890: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
21894: LD_EXP 58
21898: PPUSH
21899: LD_STRING D2a-Kur-1
21901: PPUSH
21902: CALL_OW 94
// DialogueOff ;
21906: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
21910: LD_STRING M2
21912: PPUSH
21913: CALL_OW 337
// end ;
21917: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
21918: LD_EXP 10
21922: NOT
21923: IFFALSE 22115
21925: GO 21927
21927: DISABLE
21928: LD_INT 0
21930: PPUSH
// begin enable ;
21931: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
21932: LD_ADDR_VAR 0 1
21936: PUSH
21937: LD_INT 22
21939: PUSH
21940: LD_INT 3
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 21
21949: PUSH
21950: LD_INT 2
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: LD_INT 23
21959: PUSH
21960: LD_INT 3
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 2
21969: PUSH
21970: LD_INT 31
21972: PUSH
21973: LD_INT 21
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 31
21982: PUSH
21983: LD_INT 23
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: LIST
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: PPUSH
22001: CALL_OW 69
22005: PUSH
22006: FOR_IN
22007: IFFALSE 22113
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
22009: LD_VAR 0 1
22013: PPUSH
22014: LD_INT 48
22016: PPUSH
22017: LD_INT 81
22019: PPUSH
22020: CALL_OW 297
22024: PUSH
22025: LD_INT 7
22027: LESS
22028: IFFALSE 22111
// begin dialog_track = true ;
22030: LD_ADDR_EXP 10
22034: PUSH
22035: LD_INT 1
22037: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
22038: LD_INT 48
22040: PPUSH
22041: LD_INT 81
22043: PPUSH
22044: CALL_OW 86
// DialogueOn ;
22048: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
22052: LD_EXP 46
22056: PPUSH
22057: LD_STRING D5a-Bur-1
22059: PPUSH
22060: CALL_OW 88
// DialogueOff ;
22064: CALL_OW 7
// SetTech ( 82 , 3 , state_enabled ) ;
22068: LD_INT 82
22070: PPUSH
22071: LD_INT 3
22073: PPUSH
22074: LD_INT 1
22076: PPUSH
22077: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
22081: LD_INT 84
22083: PPUSH
22084: LD_INT 3
22086: PPUSH
22087: LD_INT 1
22089: PPUSH
22090: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
22094: LD_INT 16
22096: PPUSH
22097: LD_INT 3
22099: PPUSH
22100: LD_INT 1
22102: PPUSH
22103: CALL_OW 324
// exit ;
22107: POP
22108: POP
22109: GO 22115
// end ;
22111: GO 22006
22113: POP
22114: POP
// end ;
22115: PPOPN 1
22117: END
// every 5 5$30 do
22118: GO 22120
22120: DISABLE
// begin PrepareScholtze ;
22121: CALL 5322 0 0
// wait ( 0 0$2 ) ;
22125: LD_INT 70
22127: PPUSH
22128: CALL_OW 67
// DialogueOn ;
22132: CALL_OW 6
// SayRadio ( Scholtze , D4-Sch-1 ) ;
22136: LD_EXP 52
22140: PPUSH
22141: LD_STRING D4-Sch-1
22143: PPUSH
22144: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
22148: LD_EXP 46
22152: PPUSH
22153: LD_STRING D4-Bur-1
22155: PPUSH
22156: CALL_OW 88
// DialogueOff ;
22160: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
22164: LD_STRING M4
22166: PPUSH
22167: CALL_OW 337
// ComHold ( Scholtze ) ;
22171: LD_EXP 52
22175: PPUSH
22176: CALL_OW 140
// scholtzeSpawned = true ;
22180: LD_ADDR_EXP 6
22184: PUSH
22185: LD_INT 1
22187: ST_TO_ADDR
// end ;
22188: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and scholtzeSpawned and not scholtzeSaved do
22189: LD_INT 3
22191: PPUSH
22192: LD_EXP 52
22196: PPUSH
22197: CALL_OW 292
22201: PUSH
22202: LD_EXP 6
22206: AND
22207: PUSH
22208: LD_EXP 7
22212: NOT
22213: AND
22214: IFFALSE 22395
22216: GO 22218
22218: DISABLE
// begin scholtzeSaved = true ;
22219: LD_ADDR_EXP 7
22223: PUSH
22224: LD_INT 1
22226: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
22227: LD_EXP 52
22231: PPUSH
22232: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
22236: LD_EXP 52
22240: PPUSH
22241: LD_INT 3
22243: PPUSH
22244: CALL_OW 235
// DialogueOn ;
22248: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
22252: LD_EXP 52
22256: PPUSH
22257: LD_STRING D4a-Sch-1
22259: PPUSH
22260: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
22264: LD_EXP 46
22268: PPUSH
22269: LD_STRING D4a-Bur-1
22271: PPUSH
22272: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
22276: LD_EXP 52
22280: PPUSH
22281: LD_STRING D4a-Sch-2
22283: PPUSH
22284: CALL_OW 88
// DialogueOff ;
22288: CALL_OW 7
// ComMoveXY ( amPatrol , 28 , 36 ) ;
22292: LD_EXP 82
22296: PPUSH
22297: LD_INT 28
22299: PPUSH
22300: LD_INT 36
22302: PPUSH
22303: CALL_OW 111
// ChangeMissionObjectives ( MScholtzeOut ) ;
22307: LD_STRING MScholtzeOut
22309: PPUSH
22310: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
22314: LD_INT 49
22316: PPUSH
22317: LD_INT 3
22319: PPUSH
22320: LD_INT 1
22322: PPUSH
22323: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
22327: LD_INT 51
22329: PPUSH
22330: LD_INT 3
22332: PPUSH
22333: LD_INT 1
22335: PPUSH
22336: CALL_OW 322
// if GetTech ( 82 , 3 ) = state_disabled then
22340: LD_INT 82
22342: PPUSH
22343: LD_INT 3
22345: PPUSH
22346: CALL_OW 321
22350: PUSH
22351: LD_INT 0
22353: EQUAL
22354: IFFALSE 22369
// SetTech ( 82 , 3 , state_enabled ) ;
22356: LD_INT 82
22358: PPUSH
22359: LD_INT 3
22361: PPUSH
22362: LD_INT 1
22364: PPUSH
22365: CALL_OW 322
// SetTech ( 83 , 3 , state_enabled ) ;
22369: LD_INT 83
22371: PPUSH
22372: LD_INT 3
22374: PPUSH
22375: LD_INT 1
22377: PPUSH
22378: CALL_OW 322
// SetRestrict ( b_ext_noncombat , 3 , state_enabled ) ;
22382: LD_INT 19
22384: PPUSH
22385: LD_INT 3
22387: PPUSH
22388: LD_INT 1
22390: PPUSH
22391: CALL_OW 324
// end ;
22395: END
// every 2 2$30 trigger IsPlaced ( Scholtze ) and not scholtzeSaved do
22396: LD_EXP 52
22400: PPUSH
22401: CALL_OW 305
22405: PUSH
22406: LD_EXP 7
22410: NOT
22411: AND
22412: IFFALSE 22421
22414: GO 22416
22416: DISABLE
// PrepareAmericanPatrol ;
22417: CALL 6226 0 0
22421: END
// every 0 0$1 trigger IsPlaced ( Scholtze ) and GetSide ( Scholtze ) = 8 and animalsSafeTime > 0 0$01 do var ape , tiger ;
22422: LD_EXP 52
22426: PPUSH
22427: CALL_OW 305
22431: PUSH
22432: LD_EXP 52
22436: PPUSH
22437: CALL_OW 255
22441: PUSH
22442: LD_INT 8
22444: EQUAL
22445: AND
22446: PUSH
22447: LD_EXP 45
22451: PUSH
22452: LD_INT 35
22454: GREATER
22455: AND
22456: IFFALSE 22632
22458: GO 22460
22460: DISABLE
22461: LD_INT 0
22463: PPUSH
22464: PPUSH
// begin enable ;
22465: ENABLE
// animalsSafeTime = animalsSafeTime - 0 0$01 ;
22466: LD_ADDR_EXP 45
22470: PUSH
22471: LD_EXP 45
22475: PUSH
22476: LD_INT 35
22478: MINUS
22479: ST_TO_ADDR
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
22480: LD_ADDR_VAR 0 1
22484: PUSH
22485: LD_INT 22
22487: PUSH
22488: LD_INT 0
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 25
22497: PUSH
22498: LD_INT 12
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PPUSH
22509: CALL_OW 69
22513: PUSH
22514: FOR_IN
22515: IFFALSE 22554
// GetAwayFromXY ( ape , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
22517: LD_VAR 0 1
22521: PPUSH
22522: LD_EXP 52
22526: PPUSH
22527: CALL_OW 250
22531: PPUSH
22532: LD_EXP 52
22536: PPUSH
22537: CALL_OW 251
22541: PPUSH
22542: LD_INT 12
22544: PPUSH
22545: LD_INT 0
22547: PPUSH
22548: CALL 9874 0 5
22552: GO 22514
22554: POP
22555: POP
// for tiger in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_tiger ] ] ) do
22556: LD_ADDR_VAR 0 2
22560: PUSH
22561: LD_INT 22
22563: PUSH
22564: LD_INT 0
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 25
22573: PUSH
22574: LD_INT 14
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PPUSH
22585: CALL_OW 69
22589: PUSH
22590: FOR_IN
22591: IFFALSE 22630
// GetAwayFromXY ( tiger , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
22593: LD_VAR 0 2
22597: PPUSH
22598: LD_EXP 52
22602: PPUSH
22603: CALL_OW 250
22607: PPUSH
22608: LD_EXP 52
22612: PPUSH
22613: CALL_OW 251
22617: PPUSH
22618: LD_INT 12
22620: PPUSH
22621: LD_INT 0
22623: PPUSH
22624: CALL 9874 0 5
22628: GO 22590
22630: POP
22631: POP
// end ;
22632: PPOPN 2
22634: END
// every 0 0$1 trigger See ( 1 , Scholtze ) and amPatrol and not scholtzeSaved do
22635: LD_INT 1
22637: PPUSH
22638: LD_EXP 52
22642: PPUSH
22643: CALL_OW 292
22647: PUSH
22648: LD_EXP 82
22652: AND
22653: PUSH
22654: LD_EXP 7
22658: NOT
22659: AND
22660: IFFALSE 22814
22662: GO 22664
22664: DISABLE
// begin enable ;
22665: ENABLE
// if not IsPlaced ( Scholtze ) then
22666: LD_EXP 52
22670: PPUSH
22671: CALL_OW 305
22675: NOT
22676: IFFALSE 22680
// exit ;
22678: GO 22814
// if Attacks ( amPatrol [ 1 ] ) = Scholtze or Attacks ( amPatrol [ 2 ] ) = Scholtze then
22680: LD_EXP 82
22684: PUSH
22685: LD_INT 1
22687: ARRAY
22688: PPUSH
22689: CALL_OW 320
22693: PUSH
22694: LD_EXP 52
22698: EQUAL
22699: PUSH
22700: LD_EXP 82
22704: PUSH
22705: LD_INT 2
22707: ARRAY
22708: PPUSH
22709: CALL_OW 320
22713: PUSH
22714: LD_EXP 52
22718: EQUAL
22719: OR
22720: IFFALSE 22814
// begin DialogueOn ;
22722: CALL_OW 6
// Say ( Scholtze , D4b-Sch-1 ) ;
22726: LD_EXP 52
22730: PPUSH
22731: LD_STRING D4b-Sch-1
22733: PPUSH
22734: CALL_OW 88
// Say ( amPatrol [ 2 ] , D4b-Sol1-1 ) ;
22738: LD_EXP 82
22742: PUSH
22743: LD_INT 2
22745: ARRAY
22746: PPUSH
22747: LD_STRING D4b-Sol1-1
22749: PPUSH
22750: CALL_OW 88
// Say ( amPatrol [ 1 ] , D4b-Sol2-1 ) ;
22754: LD_EXP 82
22758: PUSH
22759: LD_INT 1
22761: ARRAY
22762: PPUSH
22763: LD_STRING D4b-Sol2-1
22765: PPUSH
22766: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
22770: LD_EXP 52
22774: PPUSH
22775: LD_STRING D4b-Sch-2
22777: PPUSH
22778: CALL_OW 88
// Say ( Burlak , D4b-Bur-2 ) ;
22782: LD_EXP 46
22786: PPUSH
22787: LD_STRING D4b-Bur-2
22789: PPUSH
22790: CALL_OW 88
// DialogueOff ;
22794: CALL_OW 7
// Killunit ( Scholtze ) ;
22798: LD_EXP 52
22802: PPUSH
22803: CALL_OW 66
// ChangeMissionObjectives ( MScholtzeDel ) ;
22807: LD_STRING MScholtzeDel
22809: PPUSH
22810: CALL_OW 337
// end ; end ;
22814: END
// export function Dial_UpgradeWorkshop ( building ) ; var maleSci , maleOthers ; begin
22815: LD_INT 0
22817: PPUSH
22818: PPUSH
22819: PPUSH
// dialog_workshop = true ;
22820: LD_ADDR_EXP 8
22824: PUSH
22825: LD_INT 1
22827: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
22828: LD_INT 22
22830: PUSH
22831: LD_INT 3
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 30
22840: PUSH
22841: LD_INT 26
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PPUSH
22852: CALL_OW 69
22856: NOT
22857: IFFALSE 23246
// begin CenterNowOnUnits ( building ) ;
22859: LD_VAR 0 1
22863: PPUSH
22864: CALL_OW 87
// DialogueOn ;
22868: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
22872: LD_EXP 46
22876: PPUSH
22877: LD_STRING D3aa-Bur-1
22879: PPUSH
22880: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
22884: LD_EXP 52
22888: PPUSH
22889: CALL_OW 302
22893: PUSH
22894: LD_EXP 52
22898: PPUSH
22899: CALL_OW 255
22903: PUSH
22904: LD_INT 3
22906: EQUAL
22907: AND
22908: IFFALSE 22924
// Say ( Scholtze , D3aa-Sch-1 ) else
22910: LD_EXP 52
22914: PPUSH
22915: LD_STRING D3aa-Sch-1
22917: PPUSH
22918: CALL_OW 88
22922: GO 23230
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
22924: LD_ADDR_VAR 0 3
22928: PUSH
22929: LD_INT 22
22931: PUSH
22932: LD_INT 3
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 21
22941: PUSH
22942: LD_INT 1
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 25
22951: PUSH
22952: LD_INT 4
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 26
22961: PUSH
22962: LD_INT 1
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 50
22971: PUSH
22972: EMPTY
22973: LIST
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: PPUSH
22982: CALL_OW 69
22986: PUSH
22987: LD_EXP 46
22991: PUSH
22992: LD_EXP 47
22996: PUSH
22997: LD_EXP 49
23001: PUSH
23002: LD_EXP 50
23006: PUSH
23007: LD_EXP 51
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: DIFF
23019: ST_TO_ADDR
// if maleSci then
23020: LD_VAR 0 3
23024: IFFALSE 23044
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
23026: LD_VAR 0 3
23030: PUSH
23031: LD_INT 1
23033: ARRAY
23034: PPUSH
23035: LD_STRING D3aa-Sci1-1
23037: PPUSH
23038: CALL_OW 88
23042: GO 23230
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
23044: LD_ADDR_VAR 0 4
23048: PUSH
23049: LD_INT 22
23051: PUSH
23052: LD_INT 3
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 21
23061: PUSH
23062: LD_INT 1
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 26
23071: PUSH
23072: LD_INT 1
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 50
23081: PUSH
23082: EMPTY
23083: LIST
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: PPUSH
23091: CALL_OW 69
23095: PUSH
23096: LD_EXP 46
23100: PUSH
23101: LD_EXP 47
23105: PUSH
23106: LD_EXP 49
23110: PUSH
23111: LD_EXP 50
23115: PUSH
23116: LD_EXP 51
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: DIFF
23128: ST_TO_ADDR
// if maleOthers then
23129: LD_VAR 0 4
23133: IFFALSE 23153
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) else
23135: LD_VAR 0 4
23139: PUSH
23140: LD_INT 1
23142: ARRAY
23143: PPUSH
23144: LD_STRING D3aa-Sci1-1
23146: PPUSH
23147: CALL_OW 88
23151: GO 23230
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
23153: LD_ADDR_VAR 0 4
23157: PUSH
23158: LD_INT 22
23160: PUSH
23161: LD_INT 3
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 21
23170: PUSH
23171: LD_INT 1
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 26
23180: PUSH
23181: LD_INT 1
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: LD_INT 50
23190: PUSH
23191: EMPTY
23192: LIST
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: PPUSH
23200: CALL_OW 69
23204: PUSH
23205: LD_EXP 46
23209: PUSH
23210: EMPTY
23211: LIST
23212: DIFF
23213: ST_TO_ADDR
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) ;
23214: LD_VAR 0 4
23218: PUSH
23219: LD_INT 1
23221: ARRAY
23222: PPUSH
23223: LD_STRING D3aa-Sci1-1
23225: PPUSH
23226: CALL_OW 88
// end ; end ; end ; Say ( Burlak , D3aa-Bur-2 ) ;
23230: LD_EXP 46
23234: PPUSH
23235: LD_STRING D3aa-Bur-2
23237: PPUSH
23238: CALL_OW 88
// DialogueOff ;
23242: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
23246: LD_STRING M3
23248: PPUSH
23249: CALL_OW 337
// end ;
23253: LD_VAR 0 2
23257: RET
// every 0 0$1 trigger not dialog_amSupportTroops do var amUnit , randomMale ;
23258: LD_EXP 9
23262: NOT
23263: IFFALSE 23598
23265: GO 23267
23267: DISABLE
23268: LD_INT 0
23270: PPUSH
23271: PPUSH
// begin enable ;
23272: ENABLE
// for amUnit in amSupportTroops do
23273: LD_ADDR_VAR 0 1
23277: PUSH
23278: LD_EXP 81
23282: PUSH
23283: FOR_IN
23284: IFFALSE 23596
// begin if See ( 3 , amUnit ) then
23286: LD_INT 3
23288: PPUSH
23289: LD_VAR 0 1
23293: PPUSH
23294: CALL_OW 292
23298: IFFALSE 23594
// begin dialog_amSupportTroops = true ;
23300: LD_ADDR_EXP 9
23304: PUSH
23305: LD_INT 1
23307: ST_TO_ADDR
// CenterNowOnUnits ( amUnit ) ;
23308: LD_VAR 0 1
23312: PPUSH
23313: CALL_OW 87
// DialogueOn ;
23317: CALL_OW 6
// randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
23321: LD_ADDR_VAR 0 2
23325: PUSH
23326: LD_INT 22
23328: PUSH
23329: LD_INT 3
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 21
23338: PUSH
23339: LD_INT 1
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 26
23348: PUSH
23349: LD_INT 1
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 50
23358: PUSH
23359: EMPTY
23360: LIST
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: PPUSH
23368: CALL_OW 69
23372: PUSH
23373: LD_EXP 46
23377: PUSH
23378: LD_EXP 47
23382: PUSH
23383: LD_EXP 49
23387: PUSH
23388: LD_EXP 50
23392: PUSH
23393: LD_EXP 51
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: DIFF
23405: ST_TO_ADDR
// if randomMale then
23406: LD_VAR 0 2
23410: IFFALSE 23474
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) , D3b-RSol1-1 ,  , false ) else
23412: LD_INT 22
23414: PUSH
23415: LD_INT 3
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 21
23424: PUSH
23425: LD_INT 1
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 26
23434: PUSH
23435: LD_INT 1
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 50
23444: PUSH
23445: EMPTY
23446: LIST
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: PPUSH
23454: CALL_OW 69
23458: PPUSH
23459: LD_STRING D3b-RSol1-1
23461: PPUSH
23462: LD_STRING 
23464: PPUSH
23465: LD_INT 0
23467: PPUSH
23468: CALL 6909 0 4
23472: GO 23551
// begin randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
23474: LD_ADDR_VAR 0 2
23478: PUSH
23479: LD_INT 22
23481: PUSH
23482: LD_INT 3
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: LD_INT 21
23491: PUSH
23492: LD_INT 1
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 26
23501: PUSH
23502: LD_INT 1
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 50
23511: PUSH
23512: EMPTY
23513: LIST
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: PPUSH
23521: CALL_OW 69
23525: PUSH
23526: LD_EXP 46
23530: PUSH
23531: EMPTY
23532: LIST
23533: DIFF
23534: ST_TO_ADDR
// Say ( randomMale [ 1 ] , D3b-RSol1-1 ) ;
23535: LD_VAR 0 2
23539: PUSH
23540: LD_INT 1
23542: ARRAY
23543: PPUSH
23544: LD_STRING D3b-RSol1-1
23546: PPUSH
23547: CALL_OW 88
// end ; if IsOK ( Gnyevko ) then
23551: LD_EXP 47
23555: PPUSH
23556: CALL_OW 302
23560: IFFALSE 23574
// Say ( Gnyevko , D3b-Gny-1 ) ;
23562: LD_EXP 47
23566: PPUSH
23567: LD_STRING D3b-Gny-1
23569: PPUSH
23570: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
23574: LD_EXP 46
23578: PPUSH
23579: LD_STRING D3b-Bur-1
23581: PPUSH
23582: CALL_OW 88
// DialogueOff ;
23586: CALL_OW 7
// exit ;
23590: POP
23591: POP
23592: GO 23598
// end ; end ;
23594: GO 23283
23596: POP
23597: POP
// end ;
23598: PPOPN 2
23600: END
// every 2 2$0 trigger dialog_amSupportTroops do
23601: LD_EXP 9
23605: IFFALSE 23686
23607: GO 23609
23609: DISABLE
// begin if IsOK ( Kovalyuk ) then
23610: LD_EXP 49
23614: PPUSH
23615: CALL_OW 302
23619: IFFALSE 23633
// Say ( Kovalyuk , D3b-Kov-1 ) ;
23621: LD_EXP 49
23625: PPUSH
23626: LD_STRING D3b-Kov-1
23628: PPUSH
23629: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D3b-RSol1-2 ,  , false ) ;
23633: LD_INT 22
23635: PUSH
23636: LD_INT 3
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: LD_INT 21
23645: PUSH
23646: LD_INT 1
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PUSH
23653: LD_INT 26
23655: PUSH
23656: LD_INT 1
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: LIST
23667: PPUSH
23668: CALL_OW 69
23672: PPUSH
23673: LD_STRING D3b-RSol1-2
23675: PPUSH
23676: LD_STRING 
23678: PPUSH
23679: LD_INT 0
23681: PPUSH
23682: CALL 6909 0 4
// end ;
23686: END
// every 0 0$1 trigger timeToPrepareAttack < 0 0$01 do
23687: LD_EXP 38
23691: PUSH
23692: LD_INT 35
23694: LESS
23695: IFFALSE 23923
23697: GO 23699
23699: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
23700: LD_EXP 58
23704: PPUSH
23705: CALL_OW 87
// InGameOn ;
23709: CALL_OW 8
// DialogueOn ;
23713: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
23717: LD_EXP 58
23721: PPUSH
23722: LD_STRING D5-Kur-1
23724: PPUSH
23725: CALL_OW 94
// case Query ( QVehicles ) of 1 :
23729: LD_STRING QVehicles
23731: PPUSH
23732: CALL_OW 97
23736: PUSH
23737: LD_INT 1
23739: DOUBLE
23740: EQUAL
23741: IFTRUE 23745
23743: GO 23788
23745: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
23746: LD_EXP 46
23750: PPUSH
23751: LD_STRING D6a-Bur-1
23753: PPUSH
23754: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
23758: LD_EXP 58
23762: PPUSH
23763: LD_STRING D6a-Kur-1
23765: PPUSH
23766: CALL_OW 94
// meetNearOmicronBase = true ;
23770: LD_ADDR_EXP 19
23774: PUSH
23775: LD_INT 1
23777: ST_TO_ADDR
// kurinCheckVehicles = true ;
23778: LD_ADDR_EXP 18
23782: PUSH
23783: LD_INT 1
23785: ST_TO_ADDR
// end ; 2 :
23786: GO 23915
23788: LD_INT 2
23790: DOUBLE
23791: EQUAL
23792: IFTRUE 23796
23794: GO 23843
23796: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
23797: LD_EXP 46
23801: PPUSH
23802: LD_STRING D6b-Bur-1
23804: PPUSH
23805: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
23809: LD_EXP 58
23813: PPUSH
23814: LD_STRING D6b-Kur-1
23816: PPUSH
23817: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
23821: LD_EXP 46
23825: PPUSH
23826: LD_STRING D6b-Bur-2
23828: PPUSH
23829: CALL_OW 88
// meetNearOmicronBase = true ;
23833: LD_ADDR_EXP 19
23837: PUSH
23838: LD_INT 1
23840: ST_TO_ADDR
// end ; 3 :
23841: GO 23915
23843: LD_INT 3
23845: DOUBLE
23846: EQUAL
23847: IFTRUE 23851
23849: GO 23914
23851: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
23852: LD_EXP 46
23856: PPUSH
23857: LD_STRING D6c-Bur-1
23859: PPUSH
23860: CALL_OW 88
// Say ( Kurin , D6c-Kur-1 ) ;
23864: LD_EXP 58
23868: PPUSH
23869: LD_STRING D6c-Kur-1
23871: PPUSH
23872: CALL_OW 88
// Say ( Burlak , D6c-Bur-2 ) ;
23876: LD_EXP 46
23880: PPUSH
23881: LD_STRING D6c-Bur-2
23883: PPUSH
23884: CALL_OW 88
// kurinGiveMoreTime = true ;
23888: LD_ADDR_EXP 13
23892: PUSH
23893: LD_INT 1
23895: ST_TO_ADDR
// kurinOpinion = 0 ;
23896: LD_ADDR_EXP 26
23900: PUSH
23901: LD_INT 0
23903: ST_TO_ADDR
// counterIndex = 4 ;
23904: LD_ADDR_EXP 87
23908: PUSH
23909: LD_INT 4
23911: ST_TO_ADDR
// end ; end ;
23912: GO 23915
23914: POP
// InGameOff ;
23915: CALL_OW 9
// DialogueOff ;
23919: CALL_OW 7
// end ;
23923: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
23924: LD_EXP 14
23928: PUSH
23929: LD_INT 35
23931: LESS
23932: PUSH
23933: LD_EXP 13
23937: AND
23938: IFFALSE 23971
23940: GO 23942
23942: DISABLE
// begin DialogueOn ;
23943: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
23947: LD_EXP 58
23951: PPUSH
23952: LD_STRING D6c-Kur-2
23954: PPUSH
23955: CALL_OW 94
// DialogueOff ;
23959: CALL_OW 7
// meetNearOmicronBase = true ;
23963: LD_ADDR_EXP 19
23967: PUSH
23968: LD_INT 1
23970: ST_TO_ADDR
// end ;
23971: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs ;
23972: LD_EXP 19
23976: IFFALSE 24631
23978: GO 23980
23980: DISABLE
23981: LD_INT 0
23983: PPUSH
23984: PPUSH
23985: PPUSH
23986: PPUSH
23987: PPUSH
// begin mechs = [ ] ;
23988: LD_ADDR_VAR 0 3
23992: PUSH
23993: EMPTY
23994: ST_TO_ADDR
// vehs = [ ] ;
23995: LD_ADDR_VAR 0 4
23999: PUSH
24000: EMPTY
24001: ST_TO_ADDR
// haveVehs = 0 ;
24002: LD_ADDR_VAR 0 5
24006: PUSH
24007: LD_INT 0
24009: ST_TO_ADDR
// uc_side = 6 ;
24010: LD_ADDR_OWVAR 20
24014: PUSH
24015: LD_INT 6
24017: ST_TO_ADDR
// uc_nation = 3 ;
24018: LD_ADDR_OWVAR 21
24022: PUSH
24023: LD_INT 3
24025: ST_TO_ADDR
// for i := 1 to 2 do
24026: LD_ADDR_VAR 0 1
24030: PUSH
24031: DOUBLE
24032: LD_INT 1
24034: DEC
24035: ST_TO_ADDR
24036: LD_INT 2
24038: PUSH
24039: FOR_TO
24040: IFFALSE 24139
// begin PrepareMechanic ( false , 2 ) ;
24042: LD_INT 0
24044: PPUSH
24045: LD_INT 2
24047: PPUSH
24048: CALL_OW 383
// mech = CreateHuman ;
24052: LD_ADDR_VAR 0 2
24056: PUSH
24057: CALL_OW 44
24061: ST_TO_ADDR
// mechs = mechs ^ mech ;
24062: LD_ADDR_VAR 0 3
24066: PUSH
24067: LD_VAR 0 3
24071: PUSH
24072: LD_VAR 0 2
24076: ADD
24077: ST_TO_ADDR
// PlaceHumanInUnit ( mech , kirovDepot ) ;
24078: LD_VAR 0 2
24082: PPUSH
24083: LD_EXP 64
24087: PPUSH
24088: CALL_OW 52
// ComExitBuilding ( mech ) ;
24092: LD_VAR 0 2
24096: PPUSH
24097: CALL_OW 122
// wait ( 0 0$1 ) ;
24101: LD_INT 35
24103: PPUSH
24104: CALL_OW 67
// AddComMoveXY ( mech , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
24108: LD_VAR 0 2
24112: PPUSH
24113: LD_EXP 57
24117: PPUSH
24118: CALL_OW 250
24122: PPUSH
24123: LD_EXP 57
24127: PPUSH
24128: CALL_OW 251
24132: PPUSH
24133: CALL_OW 171
// end ;
24137: GO 24039
24139: POP
24140: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] ] ) = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) then
24141: LD_INT 22
24143: PUSH
24144: LD_INT 3
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 21
24153: PUSH
24154: LD_INT 2
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 23
24163: PUSH
24164: LD_INT 3
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: LIST
24175: PPUSH
24176: CALL_OW 69
24180: PUSH
24181: LD_INT 22
24183: PUSH
24184: LD_INT 3
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 21
24193: PUSH
24194: LD_INT 1
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PPUSH
24205: CALL_OW 69
24209: EQUAL
24210: IFFALSE 24220
// produceOnlyForYou = true ;
24212: LD_ADDR_EXP 17
24216: PUSH
24217: LD_INT 1
24219: ST_TO_ADDR
// wait ( 0 0$20 ) ;
24220: LD_INT 700
24222: PPUSH
24223: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + 2 then
24227: LD_INT 22
24229: PUSH
24230: LD_INT 3
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 21
24239: PUSH
24240: LD_INT 2
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: LD_INT 23
24249: PUSH
24250: LD_INT 3
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 3
24259: PUSH
24260: LD_INT 34
24262: PUSH
24263: LD_INT 51
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: PPUSH
24280: CALL_OW 69
24284: PUSH
24285: LD_INT 22
24287: PUSH
24288: LD_INT 3
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 21
24297: PUSH
24298: LD_INT 1
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PPUSH
24309: CALL_OW 69
24313: PUSH
24314: LD_INT 2
24316: PLUS
24317: GREATEREQUAL
24318: IFFALSE 24601
// begin vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 1 ] ;
24320: LD_ADDR_VAR 0 4
24324: PUSH
24325: LD_VAR 0 4
24329: PUSH
24330: LD_INT 22
24332: PUSH
24333: LD_INT 3
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 21
24342: PUSH
24343: LD_INT 2
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 23
24352: PUSH
24353: LD_INT 3
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 3
24362: PUSH
24363: LD_INT 34
24365: PUSH
24366: LD_INT 51
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 3
24379: PUSH
24380: LD_INT 59
24382: PUSH
24383: EMPTY
24384: LIST
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: PPUSH
24397: CALL_OW 69
24401: PUSH
24402: LD_INT 1
24404: ARRAY
24405: ADD
24406: ST_TO_ADDR
// vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 2 ] ;
24407: LD_ADDR_VAR 0 4
24411: PUSH
24412: LD_VAR 0 4
24416: PUSH
24417: LD_INT 22
24419: PUSH
24420: LD_INT 3
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 21
24429: PUSH
24430: LD_INT 2
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 23
24439: PUSH
24440: LD_INT 3
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: LD_INT 3
24449: PUSH
24450: LD_INT 34
24452: PUSH
24453: LD_INT 51
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 3
24466: PUSH
24467: LD_INT 59
24469: PUSH
24470: EMPTY
24471: LIST
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: PPUSH
24484: CALL_OW 69
24488: PUSH
24489: LD_INT 2
24491: ARRAY
24492: ADD
24493: ST_TO_ADDR
// kirovAttackVehicles = kirovAttackVehicles ^ vehs ;
24494: LD_ADDR_EXP 73
24498: PUSH
24499: LD_EXP 73
24503: PUSH
24504: LD_VAR 0 4
24508: ADD
24509: ST_TO_ADDR
// SetSide ( vehs , 6 ) ;
24510: LD_VAR 0 4
24514: PPUSH
24515: LD_INT 6
24517: PPUSH
24518: CALL_OW 235
// produceMoreVehicles = true ;
24522: LD_ADDR_EXP 16
24526: PUSH
24527: LD_INT 1
24529: ST_TO_ADDR
// ComEnterUnit ( mechs [ 1 ] , vehs [ 1 ] ) ;
24530: LD_VAR 0 3
24534: PUSH
24535: LD_INT 1
24537: ARRAY
24538: PPUSH
24539: LD_VAR 0 4
24543: PUSH
24544: LD_INT 1
24546: ARRAY
24547: PPUSH
24548: CALL_OW 120
// ComEnterUnit ( mechs [ 2 ] , vehs [ 2 ] ) ;
24552: LD_VAR 0 3
24556: PUSH
24557: LD_INT 2
24559: ARRAY
24560: PPUSH
24561: LD_VAR 0 4
24565: PUSH
24566: LD_INT 2
24568: ARRAY
24569: PPUSH
24570: CALL_OW 120
// if kurinCheckVehicles and not kurinOpinion = 0 then
24574: LD_EXP 18
24578: PUSH
24579: LD_EXP 26
24583: PUSH
24584: LD_INT 0
24586: EQUAL
24587: NOT
24588: AND
24589: IFFALSE 24599
// kurinOpinion = 1 ;
24591: LD_ADDR_EXP 26
24595: PUSH
24596: LD_INT 1
24598: ST_TO_ADDR
// end else
24599: GO 24631
// begin if kurinCheckVehicles then
24601: LD_EXP 18
24605: IFFALSE 24631
// begin DialogueOn ;
24607: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
24611: LD_EXP 58
24615: PPUSH
24616: LD_STRING D6d-Kur-1
24618: PPUSH
24619: CALL_OW 94
// DialogueOff ;
24623: CALL_OW 7
// Lose_Vehicles ;
24627: CALL 18713 0 0
// end ; end ; end ;
24631: PPOPN 5
24633: END
// every 0 0$1 trigger meetNearOmicronBase do
24634: LD_EXP 19
24638: IFFALSE 24858
24640: GO 24642
24642: DISABLE
// begin spawnCrates = false ;
24643: LD_ADDR_EXP 5
24647: PUSH
24648: LD_INT 0
24650: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
24651: LD_INT 6
24653: PPUSH
24654: LD_INT 1
24656: PPUSH
24657: LD_INT 2
24659: PPUSH
24660: LD_INT 1
24662: PPUSH
24663: CALL_OW 80
// SetRestrict ( b_depot , 3 , false ) ;
24667: LD_INT 0
24669: PPUSH
24670: LD_INT 3
24672: PPUSH
24673: LD_INT 0
24675: PPUSH
24676: CALL_OW 324
// ChangeMissionObjectives ( M3a ) ;
24680: LD_STRING M3a
24682: PPUSH
24683: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
24687: LD_STRING M5
24689: PPUSH
24690: CALL_OW 337
// SetAreaMapShow ( MeetArea , 1 ) ;
24694: LD_INT 15
24696: PPUSH
24697: LD_INT 1
24699: PPUSH
24700: CALL_OW 424
// ComMoveXY ( kirovAttackVehicles , 75 , 38 ) ;
24704: LD_EXP 73
24708: PPUSH
24709: LD_INT 75
24711: PPUSH
24712: LD_INT 38
24714: PPUSH
24715: CALL_OW 111
// ComMoveXY ( kirovAttackCargo , 75 , 38 ) ;
24719: LD_EXP 72
24723: PPUSH
24724: LD_INT 75
24726: PPUSH
24727: LD_INT 38
24729: PPUSH
24730: CALL_OW 111
// counterIndex = 2 ;
24734: LD_ADDR_EXP 87
24738: PUSH
24739: LD_INT 2
24741: ST_TO_ADDR
// if not kurinOpinion = 0 then
24742: LD_EXP 26
24746: PUSH
24747: LD_INT 0
24749: EQUAL
24750: NOT
24751: IFFALSE 24761
// kurinOpinion = 1 ;
24753: LD_ADDR_EXP 26
24757: PUSH
24758: LD_INT 1
24760: ST_TO_ADDR
// InitAIManager ( 1 , 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , OmicronBaseArea , OmicronHealArea , OmicronParkingArea , OmicronDefenceArea , [ 2 , 3 , 4 ] [ Difficulty ] , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , false ) ;
24761: LD_INT 1
24763: PPUSH
24764: LD_INT 1
24766: PPUSH
24767: LD_INT 22
24769: PUSH
24770: LD_INT 1
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 21
24779: PUSH
24780: LD_INT 1
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PPUSH
24791: CALL_OW 69
24795: PPUSH
24796: LD_INT 13
24798: PPUSH
24799: LD_INT 28
24801: PPUSH
24802: LD_INT 17
24804: PPUSH
24805: LD_INT 29
24807: PPUSH
24808: LD_INT 2
24810: PUSH
24811: LD_INT 3
24813: PUSH
24814: LD_INT 4
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: LIST
24821: PUSH
24822: LD_OWVAR 67
24826: ARRAY
24827: PPUSH
24828: LD_INT 2
24830: PUSH
24831: LD_INT 3
24833: PUSH
24834: LD_INT 4
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: LIST
24841: PUSH
24842: LD_OWVAR 67
24846: ARRAY
24847: PPUSH
24848: LD_INT 0
24850: PPUSH
24851: LD_INT 0
24853: PPUSH
24854: CALL 11754 0 11
// end ;
24858: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 2 do
24859: LD_EXP 15
24863: PUSH
24864: LD_INT 35
24866: LESS
24867: PUSH
24868: LD_EXP 87
24872: PUSH
24873: LD_INT 2
24875: EQUAL
24876: AND
24877: IFFALSE 24926
24879: GO 24881
24881: DISABLE
// begin DialogueOn ;
24882: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
24886: LD_EXP 58
24890: PPUSH
24891: LD_STRING D7a-Kur-1
24893: PPUSH
24894: CALL_OW 94
// DialogueOff ;
24898: CALL_OW 7
// counterIndex = 3 ;
24902: LD_ADDR_EXP 87
24906: PUSH
24907: LD_INT 3
24909: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
24910: LD_ADDR_EXP 15
24914: PUSH
24915: LD_INT 4200
24917: ST_TO_ADDR
// kurinOpinion = 0 ;
24918: LD_ADDR_EXP 26
24922: PUSH
24923: LD_INT 0
24925: ST_TO_ADDR
// end ;
24926: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 3 do
24927: LD_EXP 15
24931: PUSH
24932: LD_INT 35
24934: LESS
24935: PUSH
24936: LD_EXP 87
24940: PUSH
24941: LD_INT 3
24943: EQUAL
24944: AND
24945: IFFALSE 24954
24947: GO 24949
24949: DISABLE
// Lose_Delay ;
24950: CALL 18743 0 0
24954: END
// every 0 0$1 trigger meetNearOmicronBase and FilterUnitsExceptArea ( MeetArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
24955: LD_EXP 19
24959: PUSH
24960: LD_INT 15
24962: PPUSH
24963: LD_INT 22
24965: PUSH
24966: LD_INT 3
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 21
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PPUSH
24987: CALL_OW 71
24991: PUSH
24992: LD_INT 0
24994: EQUAL
24995: AND
24996: IFFALSE 25084
24998: GO 25000
25000: DISABLE
// begin counterEnable = false ;
25001: LD_ADDR_EXP 86
25005: PUSH
25006: LD_INT 0
25008: ST_TO_ADDR
// Display_strings = [ ] ;
25009: LD_ADDR_OWVAR 47
25013: PUSH
25014: EMPTY
25015: ST_TO_ADDR
// SetAreaMapShow ( MeetArea , 0 ) ;
25016: LD_INT 15
25018: PPUSH
25019: LD_INT 0
25021: PPUSH
25022: CALL_OW 424
// canExitBattlefield = false ;
25026: LD_ADDR_EXP 24
25030: PUSH
25031: LD_INT 0
25033: ST_TO_ADDR
// DialogueOn ;
25034: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
25038: LD_EXP 46
25042: PPUSH
25043: LD_STRING D7-Bur-1
25045: PPUSH
25046: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
25050: LD_EXP 58
25054: PPUSH
25055: LD_STRING D7-Kur-1
25057: PPUSH
25058: CALL_OW 94
// DialogueOff ;
25062: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
25066: LD_STRING M5a
25068: PPUSH
25069: CALL_OW 337
// Query ( QRefuel ) ;
25073: LD_STRING QRefuel
25075: PPUSH
25076: CALL_OW 97
// KirovAttackOmicron ;
25080: CALL 17292 0 0
// end ;
25084: END
// every 0 0$1 trigger not canExitBattlefield do var unit ;
25085: LD_EXP 24
25089: NOT
25090: IFFALSE 25258
25092: GO 25094
25094: DISABLE
25095: LD_INT 0
25097: PPUSH
// begin enable ;
25098: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
25099: LD_ADDR_VAR 0 1
25103: PUSH
25104: LD_INT 22
25106: PUSH
25107: LD_INT 3
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 2
25116: PUSH
25117: LD_INT 21
25119: PUSH
25120: LD_INT 1
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 21
25129: PUSH
25130: LD_INT 2
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: LIST
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PPUSH
25146: CALL_OW 69
25150: PUSH
25151: FOR_IN
25152: IFFALSE 25256
// if not IsInArea ( unit , OmicronBattlefieldArea ) and UnitFilter ( unit , [ [ f_occupied ] , [ f_type , unit_vehicle ] ] ) then
25154: LD_VAR 0 1
25158: PPUSH
25159: LD_INT 26
25161: PPUSH
25162: CALL_OW 308
25166: NOT
25167: PUSH
25168: LD_VAR 0 1
25172: PPUSH
25173: LD_INT 59
25175: PUSH
25176: EMPTY
25177: LIST
25178: PUSH
25179: LD_INT 21
25181: PUSH
25182: LD_INT 2
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PPUSH
25193: CALL_OW 72
25197: AND
25198: IFFALSE 25254
// begin ComMoveToArea ( unit , OmicronBattlefieldArea ) ;
25200: LD_VAR 0 1
25204: PPUSH
25205: LD_INT 26
25207: PPUSH
25208: CALL_OW 113
// if not dialog_stop then
25212: LD_EXP 11
25216: NOT
25217: IFFALSE 25254
// begin dialog_stop = true ;
25219: LD_ADDR_EXP 11
25223: PUSH
25224: LD_INT 1
25226: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
25227: LD_EXP 58
25231: PPUSH
25232: LD_STRING D12-Kur-1
25234: PPUSH
25235: CALL_OW 88
// wait ( 0 0$5 ) ;
25239: LD_INT 175
25241: PPUSH
25242: CALL_OW 67
// dialog_stop = false ;
25246: LD_ADDR_EXP 11
25250: PUSH
25251: LD_INT 0
25253: ST_TO_ADDR
// end ; end ;
25254: GO 25151
25256: POP
25257: POP
// end ;
25258: PPOPN 1
25260: END
// every 0 0$1 do var unit ;
25261: GO 25263
25263: DISABLE
25264: LD_INT 0
25266: PPUSH
// begin enable ;
25267: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
25268: LD_ADDR_VAR 0 1
25272: PUSH
25273: LD_INT 22
25275: PUSH
25276: LD_INT 3
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 2
25285: PUSH
25286: LD_INT 21
25288: PUSH
25289: LD_INT 1
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 21
25298: PUSH
25299: LD_INT 2
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: LIST
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PPUSH
25315: CALL_OW 69
25319: PUSH
25320: FOR_IN
25321: IFFALSE 25396
// if IsInArea ( unit , SecondKurinBase ) then
25323: LD_VAR 0 1
25327: PPUSH
25328: LD_INT 20
25330: PPUSH
25331: CALL_OW 308
25335: IFFALSE 25394
// begin ComMoveXY ( unit , 200 , 114 ) ;
25337: LD_VAR 0 1
25341: PPUSH
25342: LD_INT 200
25344: PPUSH
25345: LD_INT 114
25347: PPUSH
25348: CALL_OW 111
// if not dialog_stop then
25352: LD_EXP 11
25356: NOT
25357: IFFALSE 25394
// begin dialog_stop = true ;
25359: LD_ADDR_EXP 11
25363: PUSH
25364: LD_INT 1
25366: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
25367: LD_EXP 58
25371: PPUSH
25372: LD_STRING D12-Kur-1
25374: PPUSH
25375: CALL_OW 88
// wait ( 0 0$5 ) ;
25379: LD_INT 175
25381: PPUSH
25382: CALL_OW 67
// dialog_stop = false ;
25386: LD_ADDR_EXP 11
25390: PUSH
25391: LD_INT 0
25393: ST_TO_ADDR
// end ; end ;
25394: GO 25320
25396: POP
25397: POP
// end ;
25398: PPOPN 1
25400: END
// every 0 0$1 trigger not meetNearOmicronBase and IsOK ( Sikorski ) do var unit , randDialog ;
25401: LD_EXP 19
25405: NOT
25406: PUSH
25407: LD_INT 290
25409: PPUSH
25410: CALL_OW 302
25414: AND
25415: IFFALSE 25731
25417: GO 25419
25419: DISABLE
25420: LD_INT 0
25422: PPUSH
25423: PPUSH
// begin enable ;
25424: ENABLE
// for unit in FilterUnitsInArea ( OmicronBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
25425: LD_ADDR_VAR 0 1
25429: PUSH
25430: LD_INT 13
25432: PPUSH
25433: LD_INT 22
25435: PUSH
25436: LD_INT 1
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 2
25445: PUSH
25446: LD_INT 21
25448: PUSH
25449: LD_INT 1
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 21
25458: PUSH
25459: LD_INT 2
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 21
25468: PUSH
25469: LD_INT 3
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PPUSH
25486: CALL_OW 70
25490: PUSH
25491: FOR_IN
25492: IFFALSE 25729
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
25494: LD_VAR 0 1
25498: PPUSH
25499: LD_INT 22
25501: PUSH
25502: LD_INT 3
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 2
25511: PUSH
25512: LD_INT 21
25514: PUSH
25515: LD_INT 1
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 21
25524: PUSH
25525: LD_INT 2
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: LIST
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PPUSH
25541: CALL_OW 69
25545: PPUSH
25546: LD_VAR 0 1
25550: PPUSH
25551: CALL_OW 74
25555: PPUSH
25556: CALL_OW 296
25560: PUSH
25561: LD_INT 17
25563: LESS
25564: IFFALSE 25727
// begin ComMoveXY ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) , 69 , 85 ) ;
25566: LD_INT 22
25568: PUSH
25569: LD_INT 3
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 2
25578: PUSH
25579: LD_INT 21
25581: PUSH
25582: LD_INT 1
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 21
25591: PUSH
25592: LD_INT 2
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: LIST
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PPUSH
25608: CALL_OW 69
25612: PPUSH
25613: LD_VAR 0 1
25617: PPUSH
25618: CALL_OW 74
25622: PPUSH
25623: LD_INT 69
25625: PPUSH
25626: LD_INT 85
25628: PPUSH
25629: CALL_OW 111
// randDialog = rand ( 1 , 2 ) ;
25633: LD_ADDR_VAR 0 2
25637: PUSH
25638: LD_INT 1
25640: PPUSH
25641: LD_INT 2
25643: PPUSH
25644: CALL_OW 12
25648: ST_TO_ADDR
// if not dialog_stop then
25649: LD_EXP 11
25653: NOT
25654: IFFALSE 25727
// begin dialog_stop = true ;
25656: LD_ADDR_EXP 11
25660: PUSH
25661: LD_INT 1
25663: ST_TO_ADDR
// if randDialog = 1 or not IsOK ( Gnyevko ) then
25664: LD_VAR 0 2
25668: PUSH
25669: LD_INT 1
25671: EQUAL
25672: PUSH
25673: LD_EXP 47
25677: PPUSH
25678: CALL_OW 302
25682: NOT
25683: OR
25684: IFFALSE 25700
// SayRadio ( Kurin , D11-Kur-1 ) else
25686: LD_EXP 58
25690: PPUSH
25691: LD_STRING D11-Kur-1
25693: PPUSH
25694: CALL_OW 94
25698: GO 25712
// Say ( Gnyevko , D11-Gny-1 ) ;
25700: LD_EXP 47
25704: PPUSH
25705: LD_STRING D11-Gny-1
25707: PPUSH
25708: CALL_OW 88
// wait ( 0 0$5 ) ;
25712: LD_INT 175
25714: PPUSH
25715: CALL_OW 67
// dialog_stop = false ;
25719: LD_ADDR_EXP 11
25723: PUSH
25724: LD_INT 0
25726: ST_TO_ADDR
// end ; end ;
25727: GO 25491
25729: POP
25730: POP
// end ;
25731: PPOPN 2
25733: END
// every 0 0$1 trigger IsDead ( Sikorski ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 5 do var tmpUs , tmpRu , building ;
25734: LD_INT 290
25736: PPUSH
25737: CALL_OW 301
25741: PUSH
25742: LD_INT 22
25744: PUSH
25745: LD_INT 1
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 21
25754: PUSH
25755: LD_INT 1
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PPUSH
25766: CALL_OW 69
25770: PUSH
25771: LD_INT 5
25773: LESS
25774: AND
25775: IFFALSE 27179
25777: GO 25779
25779: DISABLE
25780: LD_INT 0
25782: PPUSH
25783: PPUSH
25784: PPUSH
// begin omicronSurrender = true ;
25785: LD_ADDR_EXP 23
25789: PUSH
25790: LD_INT 1
25792: ST_TO_ADDR
// canExitBattlefield = true ;
25793: LD_ADDR_EXP 24
25797: PUSH
25798: LD_INT 1
25800: ST_TO_ADDR
// enableOmicronAI = false ;
25801: LD_ADDR_EXP 29
25805: PUSH
25806: LD_INT 0
25808: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , false ) ;
25809: LD_INT 1
25811: PPUSH
25812: LD_INT 3
25814: PPUSH
25815: LD_INT 1
25817: PPUSH
25818: LD_INT 0
25820: PPUSH
25821: CALL_OW 80
// SetAttitude ( 2 , 3 , att_friend , true ) ;
25825: LD_INT 2
25827: PPUSH
25828: LD_INT 3
25830: PPUSH
25831: LD_INT 1
25833: PPUSH
25834: LD_INT 1
25836: PPUSH
25837: CALL_OW 80
// CenterNowOnUnits ( Burlak ) ;
25841: LD_EXP 46
25845: PPUSH
25846: CALL_OW 87
// uc_side = 1 ;
25850: LD_ADDR_OWVAR 20
25854: PUSH
25855: LD_INT 1
25857: ST_TO_ADDR
// uc_nation = 1 ;
25858: LD_ADDR_OWVAR 21
25862: PUSH
25863: LD_INT 1
25865: ST_TO_ADDR
// hc_name :=  ;
25866: LD_ADDR_OWVAR 26
25870: PUSH
25871: LD_STRING 
25873: ST_TO_ADDR
// hc_gallery =  ;
25874: LD_ADDR_OWVAR 33
25878: PUSH
25879: LD_STRING 
25881: ST_TO_ADDR
// PrepareSoldier ( sex_male , 1 ) ;
25882: LD_INT 1
25884: PPUSH
25885: LD_INT 1
25887: PPUSH
25888: CALL_OW 381
// tmpUs = CreateHuman ;
25892: LD_ADDR_VAR 0 1
25896: PUSH
25897: CALL_OW 44
25901: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ f_side , 3 ] ) ) ;
25902: LD_INT 22
25904: PUSH
25905: LD_INT 3
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PPUSH
25912: CALL_OW 69
25916: PPUSH
25917: CALL_OW 141
// InGameOn ;
25921: CALL_OW 8
// DialogueOn ;
25925: CALL_OW 6
// CenterOnXY ( 26 , 33 ) ;
25929: LD_INT 26
25931: PPUSH
25932: LD_INT 33
25934: PPUSH
25935: CALL_OW 84
// SayRadio ( tmpUs , D8-Sol1-1 ) ;
25939: LD_VAR 0 1
25943: PPUSH
25944: LD_STRING D8-Sol1-1
25946: PPUSH
25947: CALL_OW 94
// if IsOk ( Kovalyuk ) then
25951: LD_EXP 49
25955: PPUSH
25956: CALL_OW 302
25960: IFFALSE 25974
// Say ( Kovalyuk , D8-Kov-1 ) ;
25962: LD_EXP 49
25966: PPUSH
25967: LD_STRING D8-Kov-1
25969: PPUSH
25970: CALL_OW 88
// tmpRu = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
25974: LD_ADDR_VAR 0 2
25978: PUSH
25979: LD_INT 22
25981: PUSH
25982: LD_INT 3
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 21
25991: PUSH
25992: LD_INT 1
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 26
26001: PUSH
26002: LD_INT 1
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: LIST
26013: PPUSH
26014: CALL_OW 69
26018: PPUSH
26019: LD_STRING D8-RSol1-1
26021: PPUSH
26022: LD_STRING 
26024: PPUSH
26025: LD_INT 0
26027: PPUSH
26028: CALL 6909 0 4
26032: ST_TO_ADDR
// if IsOk ( Gnyevko ) then
26033: LD_EXP 47
26037: PPUSH
26038: CALL_OW 302
26042: IFFALSE 26056
// Say ( Gnyevko , D8-Gny-1 ) ;
26044: LD_EXP 47
26048: PPUSH
26049: LD_STRING D8-Gny-1
26051: PPUSH
26052: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff tmpRu , D8-RSol2-1 ,  , false ) ;
26056: LD_INT 22
26058: PUSH
26059: LD_INT 3
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 21
26068: PUSH
26069: LD_INT 1
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 26
26078: PUSH
26079: LD_INT 1
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: LIST
26090: PPUSH
26091: CALL_OW 69
26095: PUSH
26096: LD_VAR 0 2
26100: DIFF
26101: PPUSH
26102: LD_STRING D8-RSol2-1
26104: PPUSH
26105: LD_STRING 
26107: PPUSH
26108: LD_INT 0
26110: PPUSH
26111: CALL 6909 0 4
// DialogueOff ;
26115: CALL_OW 7
// PrepareArabian ;
26119: CALL 6384 0 0
// CenterNowOnXY ( 234 , 122 ) ;
26123: LD_INT 234
26125: PPUSH
26126: LD_INT 122
26128: PPUSH
26129: CALL_OW 86
// ComAgressiveMove ( northGroup , 221 , 110 ) ;
26133: LD_EXP 84
26137: PPUSH
26138: LD_INT 221
26140: PPUSH
26141: LD_INT 110
26143: PPUSH
26144: CALL_OW 114
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
26148: LD_EXP 85
26152: PPUSH
26153: LD_INT 21
26155: PUSH
26156: LD_INT 1
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PPUSH
26163: CALL_OW 72
26167: PPUSH
26168: LD_INT 221
26170: PPUSH
26171: LD_INT 110
26173: PPUSH
26174: CALL_OW 114
// wait ( 0 0$7 ) ;
26178: LD_INT 245
26180: PPUSH
26181: CALL_OW 67
// AddComAgressiveMove ( southGroup , 221 , 110 ) ;
26185: LD_EXP 85
26189: PPUSH
26190: LD_INT 221
26192: PPUSH
26193: LD_INT 110
26195: PPUSH
26196: CALL_OW 174
// wait ( 0 0$8 ) ;
26200: LD_INT 280
26202: PPUSH
26203: CALL_OW 67
// music_nat = nation_arabian ;
26207: LD_ADDR_OWVAR 71
26211: PUSH
26212: LD_INT 2
26214: ST_TO_ADDR
// music_class = music_combat ;
26215: LD_ADDR_OWVAR 72
26219: PUSH
26220: LD_INT 1
26222: ST_TO_ADDR
// game_speed = 4 ;
26223: LD_ADDR_OWVAR 65
26227: PUSH
26228: LD_INT 4
26230: ST_TO_ADDR
// DialogueOn ;
26231: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-1 ) ;
26235: LD_EXP 79
26239: PPUSH
26240: LD_STRING D9-Gri-1
26242: PPUSH
26243: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
26247: LD_EXP 58
26251: PPUSH
26252: LD_STRING D9-Kur-1
26254: PPUSH
26255: CALL_OW 94
// DialogueOff ;
26259: CALL_OW 7
// wait ( 0 0$2.5 ) ;
26263: LD_INT 88
26265: PPUSH
26266: CALL_OW 67
// DialogueOn ;
26270: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-2 ) ;
26274: LD_EXP 79
26278: PPUSH
26279: LD_STRING D9-Gri-2
26281: PPUSH
26282: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
26286: LD_EXP 58
26290: PPUSH
26291: LD_STRING D9-Kur-2
26293: PPUSH
26294: CALL_OW 94
// DialogueOff ;
26298: CALL_OW 7
// repeat wait ( 1 ) ;
26302: LD_INT 1
26304: PPUSH
26305: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
26309: LD_EXP 79
26313: PPUSH
26314: CALL_OW 256
26318: PUSH
26319: LD_INT 1000
26321: LESS
26322: IFFALSE 26302
// DialogueOn ;
26324: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-3 ) ;
26328: LD_EXP 79
26332: PPUSH
26333: LD_STRING D9-Gri-3
26335: PPUSH
26336: CALL_OW 94
// DialogueOff ;
26340: CALL_OW 7
// KillUnit ( Grishko ) ;
26344: LD_EXP 79
26348: PPUSH
26349: CALL_OW 66
// wait ( 0 0$12 ) ;
26353: LD_INT 420
26355: PPUSH
26356: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
26360: LD_EXP 58
26364: PPUSH
26365: CALL_OW 87
// SayRadio ( Kurin , D9-Kur-3 ) ;
26369: LD_EXP 58
26373: PPUSH
26374: LD_STRING D9-Kur-3
26376: PPUSH
26377: CALL_OW 94
// CenterNowOnXY ( 176 , 110 ) ;
26381: LD_INT 176
26383: PPUSH
26384: LD_INT 110
26386: PPUSH
26387: CALL_OW 86
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
26391: LD_EXP 85
26395: PPUSH
26396: LD_INT 21
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PPUSH
26406: CALL_OW 72
26410: PPUSH
26411: LD_INT 221
26413: PPUSH
26414: LD_INT 110
26416: PPUSH
26417: CALL_OW 114
// ComAgressiveMove ( northGroup , 161 , 109 ) ;
26421: LD_EXP 84
26425: PPUSH
26426: LD_INT 161
26428: PPUSH
26429: LD_INT 109
26431: PPUSH
26432: CALL_OW 114
// wait ( 0 0$7 ) ;
26436: LD_INT 245
26438: PPUSH
26439: CALL_OW 67
// ComAgressiveMove ( southGroup , 161 , 109 ) ;
26443: LD_EXP 85
26447: PPUSH
26448: LD_INT 161
26450: PPUSH
26451: LD_INT 109
26453: PPUSH
26454: CALL_OW 114
// wait ( 0 0$11 ) ;
26458: LD_INT 385
26460: PPUSH
26461: CALL_OW 67
// ComEnterUnit ( Kurin , kirovDepot ) ;
26465: LD_EXP 58
26469: PPUSH
26470: LD_EXP 64
26474: PPUSH
26475: CALL_OW 120
// DialogueOn ;
26479: CALL_OW 6
// SayRadio ( Kurin , D9a-Kur-1 ) ;
26483: LD_EXP 58
26487: PPUSH
26488: LD_STRING D9a-Kur-1
26490: PPUSH
26491: CALL_OW 94
// Say ( Burlak , D9a-Bur-1 ) ;
26495: LD_EXP 46
26499: PPUSH
26500: LD_STRING D9a-Bur-1
26502: PPUSH
26503: CALL_OW 88
// SayRadio ( Kurin , D9a-Kur-2 ) ;
26507: LD_EXP 58
26511: PPUSH
26512: LD_STRING D9a-Kur-2
26514: PPUSH
26515: CALL_OW 94
// DialogueOff ;
26519: CALL_OW 7
// ComExitBuilding ( survivorsArabianAttack ) ;
26523: LD_EXP 76
26527: PPUSH
26528: CALL_OW 122
// wait ( 0 0$1 ) ;
26532: LD_INT 35
26534: PPUSH
26535: CALL_OW 67
// ComMoveXY ( survivorsArabianAttack , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
26539: LD_EXP 76
26543: PPUSH
26544: LD_EXP 57
26548: PPUSH
26549: CALL_OW 250
26553: PPUSH
26554: LD_EXP 57
26558: PPUSH
26559: CALL_OW 251
26563: PPUSH
26564: CALL_OW 111
// immortalSurvivors = true ;
26568: LD_ADDR_EXP 25
26572: PUSH
26573: LD_INT 1
26575: ST_TO_ADDR
// for tmpUS in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
26576: LD_ADDR_VAR 0 1
26580: PUSH
26581: LD_INT 22
26583: PUSH
26584: LD_INT 1
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 21
26593: PUSH
26594: LD_INT 1
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 50
26603: PUSH
26604: EMPTY
26605: LIST
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: LIST
26611: PPUSH
26612: CALL_OW 69
26616: PUSH
26617: FOR_IN
26618: IFFALSE 26631
// RemoveUnit ( tmpUS ) ;
26620: LD_VAR 0 1
26624: PPUSH
26625: CALL_OW 64
26629: GO 26617
26631: POP
26632: POP
// wait ( 0 0$33 ) ;
26633: LD_INT 1155
26635: PPUSH
26636: CALL_OW 67
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
26640: LD_INT 22
26642: PUSH
26643: LD_INT 3
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 21
26652: PUSH
26653: LD_INT 1
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PPUSH
26664: CALL_OW 69
26668: PPUSH
26669: CALL_OW 121
// wait ( 0 0$1 ) ;
26673: LD_INT 35
26675: PPUSH
26676: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
26680: LD_INT 22
26682: PUSH
26683: LD_INT 3
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 21
26692: PUSH
26693: LD_INT 1
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PPUSH
26704: CALL_OW 69
26708: PPUSH
26709: LD_EXP 59
26713: PPUSH
26714: CALL_OW 250
26718: PPUSH
26719: LD_EXP 59
26723: PPUSH
26724: CALL_OW 251
26728: PPUSH
26729: CALL_OW 111
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
26733: LD_INT 22
26735: PUSH
26736: LD_INT 3
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 21
26745: PUSH
26746: LD_INT 1
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PPUSH
26757: CALL_OW 69
26761: PPUSH
26762: LD_EXP 59
26766: PPUSH
26767: CALL_OW 250
26771: PPUSH
26772: LD_EXP 59
26776: PPUSH
26777: CALL_OW 251
26781: PPUSH
26782: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
26786: LD_EXP 46
26790: PPUSH
26791: CALL_OW 87
// wait ( 0 0$1 ) ;
26795: LD_INT 35
26797: PPUSH
26798: CALL_OW 67
// until GetDistUnits ( Burlak , Popov ) < 6 ;
26802: LD_EXP 46
26806: PPUSH
26807: LD_EXP 59
26811: PPUSH
26812: CALL_OW 296
26816: PUSH
26817: LD_INT 6
26819: LESS
26820: IFFALSE 26733
// CenterNowOnUnits ( [ Burlak , Popov ] ) ;
26822: LD_EXP 46
26826: PUSH
26827: LD_EXP 59
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PPUSH
26836: CALL_OW 87
// ComTurnUnit ( Burlak , Popov ) ;
26840: LD_EXP 46
26844: PPUSH
26845: LD_EXP 59
26849: PPUSH
26850: CALL_OW 119
// ComTurnUnit ( Popov , Burlak ) ;
26854: LD_EXP 59
26858: PPUSH
26859: LD_EXP 46
26863: PPUSH
26864: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
26868: LD_EXP 46
26872: PPUSH
26873: LD_STRING D10a-Bur-1
26875: PPUSH
26876: CALL_OW 88
// Say ( Popov , D10a-Pop-1 ) ;
26880: LD_EXP 59
26884: PPUSH
26885: LD_STRING D10a-Pop-1
26887: PPUSH
26888: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
26892: LD_EXP 46
26896: PPUSH
26897: LD_STRING D10a-Bur-2
26899: PPUSH
26900: CALL_OW 88
// Say ( Popov , D10a-Pop-2 ) ;
26904: LD_EXP 59
26908: PPUSH
26909: LD_STRING D10a-Pop-2
26911: PPUSH
26912: CALL_OW 88
// Say ( Burlak , D10a-Bur-3 ) ;
26916: LD_EXP 46
26920: PPUSH
26921: LD_STRING D10a-Bur-3
26923: PPUSH
26924: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
26928: LD_EXP 59
26932: PPUSH
26933: LD_STRING D10a-Pop-3
26935: PPUSH
26936: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
26940: LD_EXP 46
26944: PPUSH
26945: LD_STRING D10a-Bur-4
26947: PPUSH
26948: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
26952: LD_EXP 59
26956: PPUSH
26957: LD_STRING D10a-Pop-4
26959: PPUSH
26960: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
26964: LD_EXP 46
26968: PPUSH
26969: LD_STRING D10a-Bur-5
26971: PPUSH
26972: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
26976: LD_EXP 59
26980: PPUSH
26981: LD_STRING D10a-Pop-5
26983: PPUSH
26984: CALL_OW 88
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 83 , 157 ) ;
26988: LD_INT 22
26990: PUSH
26991: LD_INT 3
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 21
27000: PUSH
27001: LD_INT 1
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PPUSH
27012: CALL_OW 69
27016: PPUSH
27017: LD_INT 83
27019: PPUSH
27020: LD_INT 157
27022: PPUSH
27023: CALL_OW 111
// ComMoveXY ( survivorsArabianAttack , 83 , 157 ) ;
27027: LD_EXP 76
27031: PPUSH
27032: LD_INT 83
27034: PPUSH
27035: LD_INT 157
27037: PPUSH
27038: CALL_OW 111
// repeat CenterNowOnUnits ( Burlak ) ;
27042: LD_EXP 46
27046: PPUSH
27047: CALL_OW 87
// wait ( 0 0$1 ) ;
27051: LD_INT 35
27053: PPUSH
27054: CALL_OW 67
// until GetDistUnits ( Burlak , beriaDepot ) > 19 ;
27058: LD_EXP 46
27062: PPUSH
27063: LD_EXP 57
27067: PPUSH
27068: CALL_OW 296
27072: PUSH
27073: LD_INT 19
27075: GREATER
27076: IFFALSE 27042
// CenterNowOnXY ( 113 , 96 ) ;
27078: LD_INT 113
27080: PPUSH
27081: LD_INT 96
27083: PPUSH
27084: CALL_OW 86
// canDestroyBeriaBase = true ;
27088: LD_ADDR_EXP 28
27092: PUSH
27093: LD_INT 1
27095: ST_TO_ADDR
// for building in FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
27096: LD_ADDR_VAR 0 3
27100: PUSH
27101: LD_INT 25
27103: PPUSH
27104: LD_INT 22
27106: PUSH
27107: LD_INT 3
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 21
27116: PUSH
27117: LD_INT 3
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PPUSH
27128: CALL_OW 70
27132: PUSH
27133: FOR_IN
27134: IFFALSE 27166
// begin AddComAttackUnit ( northGroup , building ) ;
27136: LD_EXP 84
27140: PPUSH
27141: LD_VAR 0 3
27145: PPUSH
27146: CALL_OW 175
// AddComAttackUnit ( southGroup , building ) ;
27150: LD_EXP 85
27154: PPUSH
27155: LD_VAR 0 3
27159: PPUSH
27160: CALL_OW 175
// end ;
27164: GO 27133
27166: POP
27167: POP
// wait ( 0 0$35 ) ;
27168: LD_INT 1225
27170: PPUSH
27171: CALL_OW 67
// FinishMission ;
27175: CALL 18758 0 0
// end ;
27179: PPOPN 3
27181: END
// every 1 trigger immortalSurvivors do var unit ;
27182: LD_EXP 25
27186: IFFALSE 27224
27188: GO 27190
27190: DISABLE
27191: LD_INT 0
27193: PPUSH
// begin enable ;
27194: ENABLE
// for unit in survivorsArabianAttack do
27195: LD_ADDR_VAR 0 1
27199: PUSH
27200: LD_EXP 76
27204: PUSH
27205: FOR_IN
27206: IFFALSE 27222
// SetLives ( unit , 1000 ) ;
27208: LD_VAR 0 1
27212: PPUSH
27213: LD_INT 1000
27215: PPUSH
27216: CALL_OW 234
27220: GO 27205
27222: POP
27223: POP
// end ; end_of_file
27224: PPOPN 1
27226: END
// every 0 0$30 do
27227: GO 27229
27229: DISABLE
// CreateCratesXYR ( rand ( 3 , 5 ) , 76 , 111 , 5 , true ) ;
27230: LD_INT 3
27232: PPUSH
27233: LD_INT 5
27235: PPUSH
27236: CALL_OW 12
27240: PPUSH
27241: LD_INT 76
27243: PPUSH
27244: LD_INT 111
27246: PPUSH
27247: LD_INT 5
27249: PPUSH
27250: LD_INT 1
27252: PPUSH
27253: CALL_OW 56
27257: END
// every 0 0$10 trigger spawnCrates do var spawnDelay ;
27258: LD_EXP 5
27262: IFFALSE 27334
27264: GO 27266
27266: DISABLE
27267: LD_INT 0
27269: PPUSH
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
27270: LD_INT 50
27272: PPUSH
27273: LD_INT 4200
27275: PPUSH
27276: CALL_OW 12
27280: PPUSH
27281: CALL_OW 67
// wait ( spawnDelay * 0 0$5 ) ;
27285: LD_VAR 0 1
27289: PUSH
27290: LD_INT 175
27292: MUL
27293: PPUSH
27294: CALL_OW 67
// spawnDelay = spawnDelay + 1 ;
27298: LD_ADDR_VAR 0 1
27302: PUSH
27303: LD_VAR 0 1
27307: PUSH
27308: LD_INT 1
27310: PLUS
27311: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
27312: LD_INT 3
27314: PPUSH
27315: LD_INT 5
27317: PPUSH
27318: CALL_OW 12
27322: PPUSH
27323: LD_INT 6
27325: PPUSH
27326: LD_INT 1
27328: PPUSH
27329: CALL_OW 55
// enable ;
27333: ENABLE
// end ; end_of_file
27334: PPOPN 1
27336: END
// export counterEnable , counterIndex ; every 0 0$1 trigger counterEnable do
27337: LD_EXP 86
27341: IFFALSE 27504
27343: GO 27345
27345: DISABLE
// begin enable ;
27346: ENABLE
// case counterIndex of 1 :
27347: LD_EXP 87
27351: PUSH
27352: LD_INT 1
27354: DOUBLE
27355: EQUAL
27356: IFTRUE 27360
27358: GO 27377
27360: POP
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ; 2 :
27361: LD_ADDR_EXP 38
27365: PUSH
27366: LD_EXP 38
27370: PUSH
27371: LD_INT 35
27373: MINUS
27374: ST_TO_ADDR
27375: GO 27504
27377: LD_INT 2
27379: DOUBLE
27380: EQUAL
27381: IFTRUE 27385
27383: GO 27419
27385: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
27386: LD_ADDR_OWVAR 47
27390: PUSH
27391: LD_STRING #Ru03-1
27393: PUSH
27394: LD_EXP 15
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
27403: LD_ADDR_EXP 15
27407: PUSH
27408: LD_EXP 15
27412: PUSH
27413: LD_INT 35
27415: MINUS
27416: ST_TO_ADDR
// end ; 3 :
27417: GO 27504
27419: LD_INT 3
27421: DOUBLE
27422: EQUAL
27423: IFTRUE 27427
27425: GO 27461
27427: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
27428: LD_ADDR_OWVAR 47
27432: PUSH
27433: LD_STRING #Ru03-2
27435: PUSH
27436: LD_EXP 15
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
27445: LD_ADDR_EXP 15
27449: PUSH
27450: LD_EXP 15
27454: PUSH
27455: LD_INT 35
27457: MINUS
27458: ST_TO_ADDR
// end ; 4 :
27459: GO 27504
27461: LD_INT 4
27463: DOUBLE
27464: EQUAL
27465: IFTRUE 27469
27467: GO 27503
27469: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
27470: LD_ADDR_OWVAR 47
27474: PUSH
27475: LD_STRING #Ru03-3
27477: PUSH
27478: LD_EXP 14
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
27487: LD_ADDR_EXP 14
27491: PUSH
27492: LD_EXP 14
27496: PUSH
27497: LD_INT 35
27499: MINUS
27500: ST_TO_ADDR
// end ; end ;
27501: GO 27504
27503: POP
// end ; end_of_file
27504: END
// every 7 7$0 do
27505: GO 27507
27507: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 0 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
27508: LD_INT 3
27510: PPUSH
27511: LD_INT 1
27513: PPUSH
27514: LD_INT 0
27516: PPUSH
27517: LD_INT 7
27519: PUSH
27520: LD_INT 9
27522: PUSH
27523: LD_INT 8
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 1
27533: PPUSH
27534: LD_INT 3
27536: PPUSH
27537: CALL_OW 12
27541: ARRAY
27542: PPUSH
27543: CALL 5767 0 4
27547: END
// every 12 12$0 do
27548: GO 27550
27550: DISABLE
// PrepareAmericanSupportTroops ( 4 , 2 , 1 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
27551: LD_INT 4
27553: PPUSH
27554: LD_INT 2
27556: PPUSH
27557: LD_INT 1
27559: PPUSH
27560: LD_INT 7
27562: PUSH
27563: LD_INT 9
27565: PUSH
27566: LD_INT 8
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 1
27576: PPUSH
27577: LD_INT 3
27579: PPUSH
27580: CALL_OW 12
27584: ARRAY
27585: PPUSH
27586: CALL 5767 0 4
27590: END
// every 20 20$0 do
27591: GO 27593
27593: DISABLE
// PrepareAmericanSupportTroops ( 6 , 2 , 0 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
27594: LD_INT 6
27596: PPUSH
27597: LD_INT 2
27599: PPUSH
27600: LD_INT 0
27602: PPUSH
27603: LD_INT 7
27605: PUSH
27606: LD_INT 9
27608: PUSH
27609: LD_INT 8
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 1
27619: PPUSH
27620: LD_INT 3
27622: PPUSH
27623: CALL_OW 12
27627: ARRAY
27628: PPUSH
27629: CALL 5767 0 4
27633: END
// every 23 23$0 do
27634: GO 27636
27636: DISABLE
// PrepareAmericanSupportTroops ( 5 , 1 , 3 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ; end_of_file
27637: LD_INT 5
27639: PPUSH
27640: LD_INT 1
27642: PPUSH
27643: LD_INT 3
27645: PPUSH
27646: LD_INT 7
27648: PUSH
27649: LD_INT 9
27651: PUSH
27652: LD_INT 8
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 1
27662: PPUSH
27663: LD_INT 3
27665: PPUSH
27666: CALL_OW 12
27670: ARRAY
27671: PPUSH
27672: CALL 5767 0 4
27676: END
// export function Nef_PrepareNature ; var i , un ; begin
27677: LD_INT 0
27679: PPUSH
27680: PPUSH
27681: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
27682: LD_ADDR_VAR 0 2
27686: PUSH
27687: DOUBLE
27688: LD_INT 1
27690: DEC
27691: ST_TO_ADDR
27692: LD_EXP 30
27696: PUSH
27697: LD_INT 1
27699: ARRAY
27700: PUSH
27701: FOR_TO
27702: IFFALSE 27812
// begin uc_side = 0 ;
27704: LD_ADDR_OWVAR 20
27708: PUSH
27709: LD_INT 0
27711: ST_TO_ADDR
// uc_nation = nation_nature ;
27712: LD_ADDR_OWVAR 21
27716: PUSH
27717: LD_INT 0
27719: ST_TO_ADDR
// hc_class = class_apeman ;
27720: LD_ADDR_OWVAR 28
27724: PUSH
27725: LD_INT 12
27727: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27728: LD_ADDR_OWVAR 31
27732: PUSH
27733: LD_EXP 31
27737: PUSH
27738: LD_INT 1
27740: ARRAY
27741: PUSH
27742: LD_EXP 31
27746: PUSH
27747: LD_INT 2
27749: ARRAY
27750: PUSH
27751: LD_EXP 31
27755: PUSH
27756: LD_INT 3
27758: ARRAY
27759: PUSH
27760: LD_EXP 31
27764: PUSH
27765: LD_INT 4
27767: ARRAY
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27775: LD_ADDR_OWVAR 35
27779: PUSH
27780: LD_EXP 32
27784: ST_TO_ADDR
// un = CreateHuman ;
27785: LD_ADDR_VAR 0 3
27789: PUSH
27790: CALL_OW 44
27794: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27795: LD_VAR 0 3
27799: PPUSH
27800: LD_INT 27
27802: PPUSH
27803: LD_INT 0
27805: PPUSH
27806: CALL_OW 49
// end ;
27810: GO 27701
27812: POP
27813: POP
// for i := 1 to animalsAmount [ 2 ] do
27814: LD_ADDR_VAR 0 2
27818: PUSH
27819: DOUBLE
27820: LD_INT 1
27822: DEC
27823: ST_TO_ADDR
27824: LD_EXP 30
27828: PUSH
27829: LD_INT 2
27831: ARRAY
27832: PUSH
27833: FOR_TO
27834: IFFALSE 27944
// begin uc_side = 0 ;
27836: LD_ADDR_OWVAR 20
27840: PUSH
27841: LD_INT 0
27843: ST_TO_ADDR
// uc_nation = nation_nature ;
27844: LD_ADDR_OWVAR 21
27848: PUSH
27849: LD_INT 0
27851: ST_TO_ADDR
// hc_class = class_phororhacos ;
27852: LD_ADDR_OWVAR 28
27856: PUSH
27857: LD_INT 18
27859: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27860: LD_ADDR_OWVAR 31
27864: PUSH
27865: LD_EXP 31
27869: PUSH
27870: LD_INT 1
27872: ARRAY
27873: PUSH
27874: LD_EXP 31
27878: PUSH
27879: LD_INT 2
27881: ARRAY
27882: PUSH
27883: LD_EXP 31
27887: PUSH
27888: LD_INT 3
27890: ARRAY
27891: PUSH
27892: LD_EXP 31
27896: PUSH
27897: LD_INT 4
27899: ARRAY
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27907: LD_ADDR_OWVAR 35
27911: PUSH
27912: LD_EXP 32
27916: ST_TO_ADDR
// un = CreateHuman ;
27917: LD_ADDR_VAR 0 3
27921: PUSH
27922: CALL_OW 44
27926: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27927: LD_VAR 0 3
27931: PPUSH
27932: LD_INT 27
27934: PPUSH
27935: LD_INT 0
27937: PPUSH
27938: CALL_OW 49
// end ;
27942: GO 27833
27944: POP
27945: POP
// for i := 1 to animalsAmount [ 3 ] do
27946: LD_ADDR_VAR 0 2
27950: PUSH
27951: DOUBLE
27952: LD_INT 1
27954: DEC
27955: ST_TO_ADDR
27956: LD_EXP 30
27960: PUSH
27961: LD_INT 3
27963: ARRAY
27964: PUSH
27965: FOR_TO
27966: IFFALSE 28076
// begin uc_side = 0 ;
27968: LD_ADDR_OWVAR 20
27972: PUSH
27973: LD_INT 0
27975: ST_TO_ADDR
// uc_nation = nation_nature ;
27976: LD_ADDR_OWVAR 21
27980: PUSH
27981: LD_INT 0
27983: ST_TO_ADDR
// hc_class = class_tiger ;
27984: LD_ADDR_OWVAR 28
27988: PUSH
27989: LD_INT 14
27991: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27992: LD_ADDR_OWVAR 31
27996: PUSH
27997: LD_EXP 31
28001: PUSH
28002: LD_INT 1
28004: ARRAY
28005: PUSH
28006: LD_EXP 31
28010: PUSH
28011: LD_INT 2
28013: ARRAY
28014: PUSH
28015: LD_EXP 31
28019: PUSH
28020: LD_INT 3
28022: ARRAY
28023: PUSH
28024: LD_EXP 31
28028: PUSH
28029: LD_INT 4
28031: ARRAY
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
28039: LD_ADDR_OWVAR 35
28043: PUSH
28044: LD_EXP 32
28048: ST_TO_ADDR
// un = CreateHuman ;
28049: LD_ADDR_VAR 0 3
28053: PUSH
28054: CALL_OW 44
28058: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
28059: LD_VAR 0 3
28063: PPUSH
28064: LD_INT 27
28066: PPUSH
28067: LD_INT 0
28069: PPUSH
28070: CALL_OW 49
// end ;
28074: GO 27965
28076: POP
28077: POP
// for i := 1 to animalsAmount [ 4 ] do
28078: LD_ADDR_VAR 0 2
28082: PUSH
28083: DOUBLE
28084: LD_INT 1
28086: DEC
28087: ST_TO_ADDR
28088: LD_EXP 30
28092: PUSH
28093: LD_INT 4
28095: ARRAY
28096: PUSH
28097: FOR_TO
28098: IFFALSE 28208
// begin uc_side = 0 ;
28100: LD_ADDR_OWVAR 20
28104: PUSH
28105: LD_INT 0
28107: ST_TO_ADDR
// uc_nation = nation_nature ;
28108: LD_ADDR_OWVAR 21
28112: PUSH
28113: LD_INT 0
28115: ST_TO_ADDR
// hc_class = 21 ;
28116: LD_ADDR_OWVAR 28
28120: PUSH
28121: LD_INT 21
28123: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
28124: LD_ADDR_OWVAR 31
28128: PUSH
28129: LD_EXP 31
28133: PUSH
28134: LD_INT 1
28136: ARRAY
28137: PUSH
28138: LD_EXP 31
28142: PUSH
28143: LD_INT 2
28145: ARRAY
28146: PUSH
28147: LD_EXP 31
28151: PUSH
28152: LD_INT 3
28154: ARRAY
28155: PUSH
28156: LD_EXP 31
28160: PUSH
28161: LD_INT 4
28163: ARRAY
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
28171: LD_ADDR_OWVAR 35
28175: PUSH
28176: LD_EXP 32
28180: ST_TO_ADDR
// un = CreateHuman ;
28181: LD_ADDR_VAR 0 3
28185: PUSH
28186: CALL_OW 44
28190: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
28191: LD_VAR 0 3
28195: PPUSH
28196: LD_INT 27
28198: PPUSH
28199: LD_INT 0
28201: PPUSH
28202: CALL_OW 49
// end ;
28206: GO 28097
28208: POP
28209: POP
// for i := 1 to animalsAmount [ 5 ] do
28210: LD_ADDR_VAR 0 2
28214: PUSH
28215: DOUBLE
28216: LD_INT 1
28218: DEC
28219: ST_TO_ADDR
28220: LD_EXP 30
28224: PUSH
28225: LD_INT 5
28227: ARRAY
28228: PUSH
28229: FOR_TO
28230: IFFALSE 28291
// begin uc_side = 0 ;
28232: LD_ADDR_OWVAR 20
28236: PUSH
28237: LD_INT 0
28239: ST_TO_ADDR
// uc_nation = nation_nature ;
28240: LD_ADDR_OWVAR 21
28244: PUSH
28245: LD_INT 0
28247: ST_TO_ADDR
// vc_chassis := 31 ;
28248: LD_ADDR_OWVAR 37
28252: PUSH
28253: LD_INT 31
28255: ST_TO_ADDR
// vc_control := control_rider ;
28256: LD_ADDR_OWVAR 38
28260: PUSH
28261: LD_INT 4
28263: ST_TO_ADDR
// un := CreateVehicle ;
28264: LD_ADDR_VAR 0 3
28268: PUSH
28269: CALL_OW 45
28273: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
28274: LD_VAR 0 3
28278: PPUSH
28279: LD_INT 27
28281: PPUSH
28282: LD_INT 0
28284: PPUSH
28285: CALL_OW 49
// end ;
28289: GO 28229
28291: POP
28292: POP
// end ; end_of_file
28293: LD_VAR 0 1
28297: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
28298: GO 28300
28300: DISABLE
// begin ru_radar := 98 ;
28301: LD_ADDR_EXP 88
28305: PUSH
28306: LD_INT 98
28308: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
28309: LD_ADDR_EXP 89
28313: PUSH
28314: LD_INT 89
28316: ST_TO_ADDR
// us_hack := 99 ;
28317: LD_ADDR_EXP 90
28321: PUSH
28322: LD_INT 99
28324: ST_TO_ADDR
// us_artillery := 97 ;
28325: LD_ADDR_EXP 91
28329: PUSH
28330: LD_INT 97
28332: ST_TO_ADDR
// ar_bio_bomb := 91 ;
28333: LD_ADDR_EXP 92
28337: PUSH
28338: LD_INT 91
28340: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
28341: LD_ADDR_EXP 93
28345: PUSH
28346: LD_INT 92
28348: ST_TO_ADDR
// tech_Artillery := 80 ;
28349: LD_ADDR_EXP 94
28353: PUSH
28354: LD_INT 80
28356: ST_TO_ADDR
// tech_RadMat := 81 ;
28357: LD_ADDR_EXP 95
28361: PUSH
28362: LD_INT 81
28364: ST_TO_ADDR
// tech_BasicTools := 82 ;
28365: LD_ADDR_EXP 96
28369: PUSH
28370: LD_INT 82
28372: ST_TO_ADDR
// tech_Cargo := 83 ;
28373: LD_ADDR_EXP 97
28377: PUSH
28378: LD_INT 83
28380: ST_TO_ADDR
// tech_Track := 84 ;
28381: LD_ADDR_EXP 98
28385: PUSH
28386: LD_INT 84
28388: ST_TO_ADDR
// tech_Crane := 85 ;
28389: LD_ADDR_EXP 99
28393: PUSH
28394: LD_INT 85
28396: ST_TO_ADDR
// tech_Bulldozer := 86 ;
28397: LD_ADDR_EXP 100
28401: PUSH
28402: LD_INT 86
28404: ST_TO_ADDR
// tech_Hovercraft := 87 ;
28405: LD_ADDR_EXP 101
28409: PUSH
28410: LD_INT 87
28412: ST_TO_ADDR
// end ; end_of_file
28413: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28414: LD_INT 0
28416: PPUSH
28417: PPUSH
// if exist_mode then
28418: LD_VAR 0 2
28422: IFFALSE 28447
// unit := CreateCharacter ( prefix & ident ) else
28424: LD_ADDR_VAR 0 5
28428: PUSH
28429: LD_VAR 0 3
28433: PUSH
28434: LD_VAR 0 1
28438: STR
28439: PPUSH
28440: CALL_OW 34
28444: ST_TO_ADDR
28445: GO 28462
// unit := NewCharacter ( ident ) ;
28447: LD_ADDR_VAR 0 5
28451: PUSH
28452: LD_VAR 0 1
28456: PPUSH
28457: CALL_OW 25
28461: ST_TO_ADDR
// result := unit ;
28462: LD_ADDR_VAR 0 4
28466: PUSH
28467: LD_VAR 0 5
28471: ST_TO_ADDR
// end ;
28472: LD_VAR 0 4
28476: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28477: LD_INT 0
28479: PPUSH
28480: PPUSH
// if not side or not nation then
28481: LD_VAR 0 1
28485: NOT
28486: PUSH
28487: LD_VAR 0 2
28491: NOT
28492: OR
28493: IFFALSE 28497
// exit ;
28495: GO 29261
// case nation of nation_american :
28497: LD_VAR 0 2
28501: PUSH
28502: LD_INT 1
28504: DOUBLE
28505: EQUAL
28506: IFTRUE 28510
28508: GO 28724
28510: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28511: LD_ADDR_VAR 0 4
28515: PUSH
28516: LD_INT 35
28518: PUSH
28519: LD_INT 45
28521: PUSH
28522: LD_INT 46
28524: PUSH
28525: LD_INT 47
28527: PUSH
28528: LD_INT 82
28530: PUSH
28531: LD_INT 83
28533: PUSH
28534: LD_INT 84
28536: PUSH
28537: LD_INT 85
28539: PUSH
28540: LD_INT 86
28542: PUSH
28543: LD_INT 1
28545: PUSH
28546: LD_INT 2
28548: PUSH
28549: LD_INT 6
28551: PUSH
28552: LD_INT 15
28554: PUSH
28555: LD_INT 16
28557: PUSH
28558: LD_INT 7
28560: PUSH
28561: LD_INT 12
28563: PUSH
28564: LD_INT 13
28566: PUSH
28567: LD_INT 10
28569: PUSH
28570: LD_INT 14
28572: PUSH
28573: LD_INT 20
28575: PUSH
28576: LD_INT 21
28578: PUSH
28579: LD_INT 22
28581: PUSH
28582: LD_INT 25
28584: PUSH
28585: LD_INT 32
28587: PUSH
28588: LD_INT 27
28590: PUSH
28591: LD_INT 36
28593: PUSH
28594: LD_INT 69
28596: PUSH
28597: LD_INT 39
28599: PUSH
28600: LD_INT 34
28602: PUSH
28603: LD_INT 40
28605: PUSH
28606: LD_INT 48
28608: PUSH
28609: LD_INT 49
28611: PUSH
28612: LD_INT 50
28614: PUSH
28615: LD_INT 51
28617: PUSH
28618: LD_INT 52
28620: PUSH
28621: LD_INT 53
28623: PUSH
28624: LD_INT 54
28626: PUSH
28627: LD_INT 55
28629: PUSH
28630: LD_INT 56
28632: PUSH
28633: LD_INT 57
28635: PUSH
28636: LD_INT 58
28638: PUSH
28639: LD_INT 59
28641: PUSH
28642: LD_INT 60
28644: PUSH
28645: LD_INT 61
28647: PUSH
28648: LD_INT 62
28650: PUSH
28651: LD_INT 80
28653: PUSH
28654: LD_INT 82
28656: PUSH
28657: LD_INT 83
28659: PUSH
28660: LD_INT 84
28662: PUSH
28663: LD_INT 85
28665: PUSH
28666: LD_INT 86
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: ST_TO_ADDR
28722: GO 29185
28724: LD_INT 2
28726: DOUBLE
28727: EQUAL
28728: IFTRUE 28732
28730: GO 28954
28732: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
28733: LD_ADDR_VAR 0 4
28737: PUSH
28738: LD_INT 35
28740: PUSH
28741: LD_INT 45
28743: PUSH
28744: LD_INT 46
28746: PUSH
28747: LD_INT 47
28749: PUSH
28750: LD_INT 82
28752: PUSH
28753: LD_INT 83
28755: PUSH
28756: LD_INT 84
28758: PUSH
28759: LD_INT 85
28761: PUSH
28762: LD_INT 87
28764: PUSH
28765: LD_INT 70
28767: PUSH
28768: LD_INT 1
28770: PUSH
28771: LD_INT 11
28773: PUSH
28774: LD_INT 3
28776: PUSH
28777: LD_INT 4
28779: PUSH
28780: LD_INT 5
28782: PUSH
28783: LD_INT 6
28785: PUSH
28786: LD_INT 15
28788: PUSH
28789: LD_INT 18
28791: PUSH
28792: LD_INT 7
28794: PUSH
28795: LD_INT 17
28797: PUSH
28798: LD_INT 8
28800: PUSH
28801: LD_INT 20
28803: PUSH
28804: LD_INT 21
28806: PUSH
28807: LD_INT 22
28809: PUSH
28810: LD_INT 72
28812: PUSH
28813: LD_INT 26
28815: PUSH
28816: LD_INT 69
28818: PUSH
28819: LD_INT 39
28821: PUSH
28822: LD_INT 40
28824: PUSH
28825: LD_INT 41
28827: PUSH
28828: LD_INT 42
28830: PUSH
28831: LD_INT 43
28833: PUSH
28834: LD_INT 48
28836: PUSH
28837: LD_INT 49
28839: PUSH
28840: LD_INT 50
28842: PUSH
28843: LD_INT 51
28845: PUSH
28846: LD_INT 52
28848: PUSH
28849: LD_INT 53
28851: PUSH
28852: LD_INT 54
28854: PUSH
28855: LD_INT 55
28857: PUSH
28858: LD_INT 56
28860: PUSH
28861: LD_INT 60
28863: PUSH
28864: LD_INT 61
28866: PUSH
28867: LD_INT 62
28869: PUSH
28870: LD_INT 66
28872: PUSH
28873: LD_INT 67
28875: PUSH
28876: LD_INT 68
28878: PUSH
28879: LD_INT 81
28881: PUSH
28882: LD_INT 82
28884: PUSH
28885: LD_INT 83
28887: PUSH
28888: LD_INT 84
28890: PUSH
28891: LD_INT 85
28893: PUSH
28894: LD_INT 87
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: ST_TO_ADDR
28952: GO 29185
28954: LD_INT 3
28956: DOUBLE
28957: EQUAL
28958: IFTRUE 28962
28960: GO 29184
28962: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28963: LD_ADDR_VAR 0 4
28967: PUSH
28968: LD_INT 46
28970: PUSH
28971: LD_INT 47
28973: PUSH
28974: LD_INT 1
28976: PUSH
28977: LD_INT 2
28979: PUSH
28980: LD_INT 82
28982: PUSH
28983: LD_INT 83
28985: PUSH
28986: LD_INT 84
28988: PUSH
28989: LD_INT 85
28991: PUSH
28992: LD_INT 86
28994: PUSH
28995: LD_INT 11
28997: PUSH
28998: LD_INT 9
29000: PUSH
29001: LD_INT 20
29003: PUSH
29004: LD_INT 19
29006: PUSH
29007: LD_INT 21
29009: PUSH
29010: LD_INT 24
29012: PUSH
29013: LD_INT 22
29015: PUSH
29016: LD_INT 25
29018: PUSH
29019: LD_INT 28
29021: PUSH
29022: LD_INT 29
29024: PUSH
29025: LD_INT 30
29027: PUSH
29028: LD_INT 31
29030: PUSH
29031: LD_INT 37
29033: PUSH
29034: LD_INT 38
29036: PUSH
29037: LD_INT 32
29039: PUSH
29040: LD_INT 27
29042: PUSH
29043: LD_INT 33
29045: PUSH
29046: LD_INT 69
29048: PUSH
29049: LD_INT 39
29051: PUSH
29052: LD_INT 34
29054: PUSH
29055: LD_INT 40
29057: PUSH
29058: LD_INT 71
29060: PUSH
29061: LD_INT 23
29063: PUSH
29064: LD_INT 44
29066: PUSH
29067: LD_INT 48
29069: PUSH
29070: LD_INT 49
29072: PUSH
29073: LD_INT 50
29075: PUSH
29076: LD_INT 51
29078: PUSH
29079: LD_INT 52
29081: PUSH
29082: LD_INT 53
29084: PUSH
29085: LD_INT 54
29087: PUSH
29088: LD_INT 55
29090: PUSH
29091: LD_INT 56
29093: PUSH
29094: LD_INT 57
29096: PUSH
29097: LD_INT 58
29099: PUSH
29100: LD_INT 59
29102: PUSH
29103: LD_INT 63
29105: PUSH
29106: LD_INT 64
29108: PUSH
29109: LD_INT 65
29111: PUSH
29112: LD_INT 82
29114: PUSH
29115: LD_INT 83
29117: PUSH
29118: LD_INT 84
29120: PUSH
29121: LD_INT 85
29123: PUSH
29124: LD_INT 86
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: ST_TO_ADDR
29182: GO 29185
29184: POP
// if state > - 1 and state < 3 then
29185: LD_VAR 0 3
29189: PUSH
29190: LD_INT 1
29192: NEG
29193: GREATER
29194: PUSH
29195: LD_VAR 0 3
29199: PUSH
29200: LD_INT 3
29202: LESS
29203: AND
29204: IFFALSE 29261
// for i in result do
29206: LD_ADDR_VAR 0 5
29210: PUSH
29211: LD_VAR 0 4
29215: PUSH
29216: FOR_IN
29217: IFFALSE 29259
// if GetTech ( i , side ) <> state then
29219: LD_VAR 0 5
29223: PPUSH
29224: LD_VAR 0 1
29228: PPUSH
29229: CALL_OW 321
29233: PUSH
29234: LD_VAR 0 3
29238: NONEQUAL
29239: IFFALSE 29257
// result := result diff i ;
29241: LD_ADDR_VAR 0 4
29245: PUSH
29246: LD_VAR 0 4
29250: PUSH
29251: LD_VAR 0 5
29255: DIFF
29256: ST_TO_ADDR
29257: GO 29216
29259: POP
29260: POP
// end ;
29261: LD_VAR 0 4
29265: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29266: LD_INT 0
29268: PPUSH
29269: PPUSH
29270: PPUSH
// result := true ;
29271: LD_ADDR_VAR 0 3
29275: PUSH
29276: LD_INT 1
29278: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29279: LD_ADDR_VAR 0 5
29283: PUSH
29284: LD_VAR 0 2
29288: PPUSH
29289: CALL_OW 480
29293: ST_TO_ADDR
// if not tmp then
29294: LD_VAR 0 5
29298: NOT
29299: IFFALSE 29303
// exit ;
29301: GO 29352
// for i in tmp do
29303: LD_ADDR_VAR 0 4
29307: PUSH
29308: LD_VAR 0 5
29312: PUSH
29313: FOR_IN
29314: IFFALSE 29350
// if GetTech ( i , side ) <> state_researched then
29316: LD_VAR 0 4
29320: PPUSH
29321: LD_VAR 0 1
29325: PPUSH
29326: CALL_OW 321
29330: PUSH
29331: LD_INT 2
29333: NONEQUAL
29334: IFFALSE 29348
// begin result := false ;
29336: LD_ADDR_VAR 0 3
29340: PUSH
29341: LD_INT 0
29343: ST_TO_ADDR
// exit ;
29344: POP
29345: POP
29346: GO 29352
// end ;
29348: GO 29313
29350: POP
29351: POP
// end ;
29352: LD_VAR 0 3
29356: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29357: LD_INT 0
29359: PPUSH
29360: PPUSH
29361: PPUSH
29362: PPUSH
29363: PPUSH
29364: PPUSH
29365: PPUSH
29366: PPUSH
29367: PPUSH
29368: PPUSH
29369: PPUSH
29370: PPUSH
29371: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29372: LD_VAR 0 1
29376: NOT
29377: PUSH
29378: LD_VAR 0 1
29382: PPUSH
29383: CALL_OW 257
29387: PUSH
29388: LD_INT 9
29390: NONEQUAL
29391: OR
29392: IFFALSE 29396
// exit ;
29394: GO 29969
// side := GetSide ( unit ) ;
29396: LD_ADDR_VAR 0 9
29400: PUSH
29401: LD_VAR 0 1
29405: PPUSH
29406: CALL_OW 255
29410: ST_TO_ADDR
// tech_space := tech_spacanom ;
29411: LD_ADDR_VAR 0 12
29415: PUSH
29416: LD_INT 29
29418: ST_TO_ADDR
// tech_time := tech_taurad ;
29419: LD_ADDR_VAR 0 13
29423: PUSH
29424: LD_INT 28
29426: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29427: LD_ADDR_VAR 0 11
29431: PUSH
29432: LD_VAR 0 1
29436: PPUSH
29437: CALL_OW 310
29441: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29442: LD_VAR 0 11
29446: PPUSH
29447: CALL_OW 247
29451: PUSH
29452: LD_INT 2
29454: EQUAL
29455: IFFALSE 29459
// exit ;
29457: GO 29969
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29459: LD_ADDR_VAR 0 8
29463: PUSH
29464: LD_INT 81
29466: PUSH
29467: LD_VAR 0 9
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 3
29478: PUSH
29479: LD_INT 21
29481: PUSH
29482: LD_INT 3
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PPUSH
29497: CALL_OW 69
29501: ST_TO_ADDR
// if not tmp then
29502: LD_VAR 0 8
29506: NOT
29507: IFFALSE 29511
// exit ;
29509: GO 29969
// if in_unit then
29511: LD_VAR 0 11
29515: IFFALSE 29539
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29517: LD_ADDR_VAR 0 10
29521: PUSH
29522: LD_VAR 0 8
29526: PPUSH
29527: LD_VAR 0 11
29531: PPUSH
29532: CALL_OW 74
29536: ST_TO_ADDR
29537: GO 29559
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29539: LD_ADDR_VAR 0 10
29543: PUSH
29544: LD_VAR 0 8
29548: PPUSH
29549: LD_VAR 0 1
29553: PPUSH
29554: CALL_OW 74
29558: ST_TO_ADDR
// if not enemy then
29559: LD_VAR 0 10
29563: NOT
29564: IFFALSE 29568
// exit ;
29566: GO 29969
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29568: LD_VAR 0 11
29572: PUSH
29573: LD_VAR 0 11
29577: PPUSH
29578: LD_VAR 0 10
29582: PPUSH
29583: CALL_OW 296
29587: PUSH
29588: LD_INT 13
29590: GREATER
29591: AND
29592: PUSH
29593: LD_VAR 0 1
29597: PPUSH
29598: LD_VAR 0 10
29602: PPUSH
29603: CALL_OW 296
29607: PUSH
29608: LD_INT 12
29610: GREATER
29611: OR
29612: IFFALSE 29616
// exit ;
29614: GO 29969
// missile := [ 1 ] ;
29616: LD_ADDR_VAR 0 14
29620: PUSH
29621: LD_INT 1
29623: PUSH
29624: EMPTY
29625: LIST
29626: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29627: LD_VAR 0 9
29631: PPUSH
29632: LD_VAR 0 12
29636: PPUSH
29637: CALL_OW 325
29641: IFFALSE 29670
// missile := Insert ( missile , missile + 1 , 2 ) ;
29643: LD_ADDR_VAR 0 14
29647: PUSH
29648: LD_VAR 0 14
29652: PPUSH
29653: LD_VAR 0 14
29657: PUSH
29658: LD_INT 1
29660: PLUS
29661: PPUSH
29662: LD_INT 2
29664: PPUSH
29665: CALL_OW 2
29669: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29670: LD_VAR 0 9
29674: PPUSH
29675: LD_VAR 0 13
29679: PPUSH
29680: CALL_OW 325
29684: PUSH
29685: LD_VAR 0 10
29689: PPUSH
29690: CALL_OW 255
29694: PPUSH
29695: LD_VAR 0 13
29699: PPUSH
29700: CALL_OW 325
29704: NOT
29705: AND
29706: IFFALSE 29735
// missile := Insert ( missile , missile + 1 , 3 ) ;
29708: LD_ADDR_VAR 0 14
29712: PUSH
29713: LD_VAR 0 14
29717: PPUSH
29718: LD_VAR 0 14
29722: PUSH
29723: LD_INT 1
29725: PLUS
29726: PPUSH
29727: LD_INT 3
29729: PPUSH
29730: CALL_OW 2
29734: ST_TO_ADDR
// if missile < 2 then
29735: LD_VAR 0 14
29739: PUSH
29740: LD_INT 2
29742: LESS
29743: IFFALSE 29747
// exit ;
29745: GO 29969
// x := GetX ( enemy ) ;
29747: LD_ADDR_VAR 0 4
29751: PUSH
29752: LD_VAR 0 10
29756: PPUSH
29757: CALL_OW 250
29761: ST_TO_ADDR
// y := GetY ( enemy ) ;
29762: LD_ADDR_VAR 0 5
29766: PUSH
29767: LD_VAR 0 10
29771: PPUSH
29772: CALL_OW 251
29776: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29777: LD_ADDR_VAR 0 6
29781: PUSH
29782: LD_VAR 0 4
29786: PUSH
29787: LD_INT 1
29789: NEG
29790: PPUSH
29791: LD_INT 1
29793: PPUSH
29794: CALL_OW 12
29798: PLUS
29799: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29800: LD_ADDR_VAR 0 7
29804: PUSH
29805: LD_VAR 0 5
29809: PUSH
29810: LD_INT 1
29812: NEG
29813: PPUSH
29814: LD_INT 1
29816: PPUSH
29817: CALL_OW 12
29821: PLUS
29822: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29823: LD_VAR 0 6
29827: PPUSH
29828: LD_VAR 0 7
29832: PPUSH
29833: CALL_OW 488
29837: NOT
29838: IFFALSE 29860
// begin _x := x ;
29840: LD_ADDR_VAR 0 6
29844: PUSH
29845: LD_VAR 0 4
29849: ST_TO_ADDR
// _y := y ;
29850: LD_ADDR_VAR 0 7
29854: PUSH
29855: LD_VAR 0 5
29859: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29860: LD_ADDR_VAR 0 3
29864: PUSH
29865: LD_INT 1
29867: PPUSH
29868: LD_VAR 0 14
29872: PPUSH
29873: CALL_OW 12
29877: ST_TO_ADDR
// case i of 1 :
29878: LD_VAR 0 3
29882: PUSH
29883: LD_INT 1
29885: DOUBLE
29886: EQUAL
29887: IFTRUE 29891
29889: GO 29908
29891: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29892: LD_VAR 0 1
29896: PPUSH
29897: LD_VAR 0 10
29901: PPUSH
29902: CALL_OW 115
29906: GO 29969
29908: LD_INT 2
29910: DOUBLE
29911: EQUAL
29912: IFTRUE 29916
29914: GO 29938
29916: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29917: LD_VAR 0 1
29921: PPUSH
29922: LD_VAR 0 6
29926: PPUSH
29927: LD_VAR 0 7
29931: PPUSH
29932: CALL_OW 153
29936: GO 29969
29938: LD_INT 3
29940: DOUBLE
29941: EQUAL
29942: IFTRUE 29946
29944: GO 29968
29946: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29947: LD_VAR 0 1
29951: PPUSH
29952: LD_VAR 0 6
29956: PPUSH
29957: LD_VAR 0 7
29961: PPUSH
29962: CALL_OW 154
29966: GO 29969
29968: POP
// end ;
29969: LD_VAR 0 2
29973: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29974: LD_INT 0
29976: PPUSH
29977: PPUSH
29978: PPUSH
29979: PPUSH
29980: PPUSH
29981: PPUSH
// if not unit or not building then
29982: LD_VAR 0 1
29986: NOT
29987: PUSH
29988: LD_VAR 0 2
29992: NOT
29993: OR
29994: IFFALSE 29998
// exit ;
29996: GO 30156
// x := GetX ( building ) ;
29998: LD_ADDR_VAR 0 5
30002: PUSH
30003: LD_VAR 0 2
30007: PPUSH
30008: CALL_OW 250
30012: ST_TO_ADDR
// y := GetY ( building ) ;
30013: LD_ADDR_VAR 0 6
30017: PUSH
30018: LD_VAR 0 2
30022: PPUSH
30023: CALL_OW 251
30027: ST_TO_ADDR
// for i = 0 to 5 do
30028: LD_ADDR_VAR 0 4
30032: PUSH
30033: DOUBLE
30034: LD_INT 0
30036: DEC
30037: ST_TO_ADDR
30038: LD_INT 5
30040: PUSH
30041: FOR_TO
30042: IFFALSE 30154
// begin _x := ShiftX ( x , i , 3 ) ;
30044: LD_ADDR_VAR 0 7
30048: PUSH
30049: LD_VAR 0 5
30053: PPUSH
30054: LD_VAR 0 4
30058: PPUSH
30059: LD_INT 3
30061: PPUSH
30062: CALL_OW 272
30066: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30067: LD_ADDR_VAR 0 8
30071: PUSH
30072: LD_VAR 0 6
30076: PPUSH
30077: LD_VAR 0 4
30081: PPUSH
30082: LD_INT 3
30084: PPUSH
30085: CALL_OW 273
30089: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30090: LD_VAR 0 7
30094: PPUSH
30095: LD_VAR 0 8
30099: PPUSH
30100: CALL_OW 488
30104: NOT
30105: IFFALSE 30109
// continue ;
30107: GO 30041
// if HexInfo ( _x , _y ) = 0 then
30109: LD_VAR 0 7
30113: PPUSH
30114: LD_VAR 0 8
30118: PPUSH
30119: CALL_OW 428
30123: PUSH
30124: LD_INT 0
30126: EQUAL
30127: IFFALSE 30152
// begin ComMoveXY ( unit , _x , _y ) ;
30129: LD_VAR 0 1
30133: PPUSH
30134: LD_VAR 0 7
30138: PPUSH
30139: LD_VAR 0 8
30143: PPUSH
30144: CALL_OW 111
// exit ;
30148: POP
30149: POP
30150: GO 30156
// end ; end ;
30152: GO 30041
30154: POP
30155: POP
// end ;
30156: LD_VAR 0 3
30160: RET
// export function ScanBase ( side , base_area ) ; begin
30161: LD_INT 0
30163: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30164: LD_ADDR_VAR 0 3
30168: PUSH
30169: LD_VAR 0 2
30173: PPUSH
30174: LD_INT 81
30176: PUSH
30177: LD_VAR 0 1
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PPUSH
30186: CALL_OW 70
30190: ST_TO_ADDR
// end ;
30191: LD_VAR 0 3
30195: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30196: LD_INT 0
30198: PPUSH
30199: PPUSH
30200: PPUSH
30201: PPUSH
// result := false ;
30202: LD_ADDR_VAR 0 2
30206: PUSH
30207: LD_INT 0
30209: ST_TO_ADDR
// side := GetSide ( unit ) ;
30210: LD_ADDR_VAR 0 3
30214: PUSH
30215: LD_VAR 0 1
30219: PPUSH
30220: CALL_OW 255
30224: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30225: LD_ADDR_VAR 0 4
30229: PUSH
30230: LD_VAR 0 1
30234: PPUSH
30235: CALL_OW 248
30239: ST_TO_ADDR
// case nat of 1 :
30240: LD_VAR 0 4
30244: PUSH
30245: LD_INT 1
30247: DOUBLE
30248: EQUAL
30249: IFTRUE 30253
30251: GO 30264
30253: POP
// tech := tech_lassight ; 2 :
30254: LD_ADDR_VAR 0 5
30258: PUSH
30259: LD_INT 12
30261: ST_TO_ADDR
30262: GO 30303
30264: LD_INT 2
30266: DOUBLE
30267: EQUAL
30268: IFTRUE 30272
30270: GO 30283
30272: POP
// tech := tech_mortar ; 3 :
30273: LD_ADDR_VAR 0 5
30277: PUSH
30278: LD_INT 41
30280: ST_TO_ADDR
30281: GO 30303
30283: LD_INT 3
30285: DOUBLE
30286: EQUAL
30287: IFTRUE 30291
30289: GO 30302
30291: POP
// tech := tech_bazooka ; end ;
30292: LD_ADDR_VAR 0 5
30296: PUSH
30297: LD_INT 44
30299: ST_TO_ADDR
30300: GO 30303
30302: POP
// if Researched ( side , tech ) then
30303: LD_VAR 0 3
30307: PPUSH
30308: LD_VAR 0 5
30312: PPUSH
30313: CALL_OW 325
30317: IFFALSE 30344
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30319: LD_ADDR_VAR 0 2
30323: PUSH
30324: LD_INT 5
30326: PUSH
30327: LD_INT 8
30329: PUSH
30330: LD_INT 9
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: LIST
30337: PUSH
30338: LD_VAR 0 4
30342: ARRAY
30343: ST_TO_ADDR
// end ;
30344: LD_VAR 0 2
30348: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30349: LD_INT 0
30351: PPUSH
30352: PPUSH
30353: PPUSH
// if not mines then
30354: LD_VAR 0 2
30358: NOT
30359: IFFALSE 30363
// exit ;
30361: GO 30507
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30363: LD_ADDR_VAR 0 5
30367: PUSH
30368: LD_INT 81
30370: PUSH
30371: LD_VAR 0 1
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 3
30382: PUSH
30383: LD_INT 21
30385: PUSH
30386: LD_INT 3
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PPUSH
30401: CALL_OW 69
30405: ST_TO_ADDR
// for i in mines do
30406: LD_ADDR_VAR 0 4
30410: PUSH
30411: LD_VAR 0 2
30415: PUSH
30416: FOR_IN
30417: IFFALSE 30505
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30419: LD_VAR 0 4
30423: PUSH
30424: LD_INT 1
30426: ARRAY
30427: PPUSH
30428: LD_VAR 0 4
30432: PUSH
30433: LD_INT 2
30435: ARRAY
30436: PPUSH
30437: CALL_OW 458
30441: NOT
30442: IFFALSE 30446
// continue ;
30444: GO 30416
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30446: LD_VAR 0 4
30450: PUSH
30451: LD_INT 1
30453: ARRAY
30454: PPUSH
30455: LD_VAR 0 4
30459: PUSH
30460: LD_INT 2
30462: ARRAY
30463: PPUSH
30464: CALL_OW 428
30468: PUSH
30469: LD_VAR 0 5
30473: IN
30474: IFFALSE 30503
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30476: LD_VAR 0 4
30480: PUSH
30481: LD_INT 1
30483: ARRAY
30484: PPUSH
30485: LD_VAR 0 4
30489: PUSH
30490: LD_INT 2
30492: ARRAY
30493: PPUSH
30494: LD_VAR 0 1
30498: PPUSH
30499: CALL_OW 456
// end ;
30503: GO 30416
30505: POP
30506: POP
// end ;
30507: LD_VAR 0 3
30511: RET
// export function Count ( array ) ; var i ; begin
30512: LD_INT 0
30514: PPUSH
30515: PPUSH
// result := 0 ;
30516: LD_ADDR_VAR 0 2
30520: PUSH
30521: LD_INT 0
30523: ST_TO_ADDR
// for i in array do
30524: LD_ADDR_VAR 0 3
30528: PUSH
30529: LD_VAR 0 1
30533: PUSH
30534: FOR_IN
30535: IFFALSE 30559
// if i then
30537: LD_VAR 0 3
30541: IFFALSE 30557
// result := result + 1 ;
30543: LD_ADDR_VAR 0 2
30547: PUSH
30548: LD_VAR 0 2
30552: PUSH
30553: LD_INT 1
30555: PLUS
30556: ST_TO_ADDR
30557: GO 30534
30559: POP
30560: POP
// end ;
30561: LD_VAR 0 2
30565: RET
// export function IsEmpty ( building ) ; begin
30566: LD_INT 0
30568: PPUSH
// if not building then
30569: LD_VAR 0 1
30573: NOT
30574: IFFALSE 30578
// exit ;
30576: GO 30621
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30578: LD_ADDR_VAR 0 2
30582: PUSH
30583: LD_VAR 0 1
30587: PUSH
30588: LD_INT 22
30590: PUSH
30591: LD_VAR 0 1
30595: PPUSH
30596: CALL_OW 255
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 58
30607: PUSH
30608: EMPTY
30609: LIST
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PPUSH
30615: CALL_OW 69
30619: IN
30620: ST_TO_ADDR
// end ;
30621: LD_VAR 0 2
30625: RET
// export function IsNotFull ( building ) ; begin
30626: LD_INT 0
30628: PPUSH
// if not building then
30629: LD_VAR 0 1
30633: NOT
30634: IFFALSE 30638
// exit ;
30636: GO 30657
// result := UnitsInside ( building ) < 6 ;
30638: LD_ADDR_VAR 0 2
30642: PUSH
30643: LD_VAR 0 1
30647: PPUSH
30648: CALL_OW 313
30652: PUSH
30653: LD_INT 6
30655: LESS
30656: ST_TO_ADDR
// end ;
30657: LD_VAR 0 2
30661: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30662: LD_INT 0
30664: PPUSH
30665: PPUSH
30666: PPUSH
30667: PPUSH
// tmp := [ ] ;
30668: LD_ADDR_VAR 0 3
30672: PUSH
30673: EMPTY
30674: ST_TO_ADDR
// list := [ ] ;
30675: LD_ADDR_VAR 0 5
30679: PUSH
30680: EMPTY
30681: ST_TO_ADDR
// for i = 16 to 25 do
30682: LD_ADDR_VAR 0 4
30686: PUSH
30687: DOUBLE
30688: LD_INT 16
30690: DEC
30691: ST_TO_ADDR
30692: LD_INT 25
30694: PUSH
30695: FOR_TO
30696: IFFALSE 30769
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30698: LD_ADDR_VAR 0 3
30702: PUSH
30703: LD_VAR 0 3
30707: PUSH
30708: LD_INT 22
30710: PUSH
30711: LD_VAR 0 1
30715: PPUSH
30716: CALL_OW 255
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 91
30727: PUSH
30728: LD_VAR 0 1
30732: PUSH
30733: LD_INT 6
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 30
30743: PUSH
30744: LD_VAR 0 4
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: LIST
30757: PUSH
30758: EMPTY
30759: LIST
30760: PPUSH
30761: CALL_OW 69
30765: ADD
30766: ST_TO_ADDR
30767: GO 30695
30769: POP
30770: POP
// for i = 1 to tmp do
30771: LD_ADDR_VAR 0 4
30775: PUSH
30776: DOUBLE
30777: LD_INT 1
30779: DEC
30780: ST_TO_ADDR
30781: LD_VAR 0 3
30785: PUSH
30786: FOR_TO
30787: IFFALSE 30875
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30789: LD_ADDR_VAR 0 5
30793: PUSH
30794: LD_VAR 0 5
30798: PUSH
30799: LD_VAR 0 3
30803: PUSH
30804: LD_VAR 0 4
30808: ARRAY
30809: PPUSH
30810: CALL_OW 266
30814: PUSH
30815: LD_VAR 0 3
30819: PUSH
30820: LD_VAR 0 4
30824: ARRAY
30825: PPUSH
30826: CALL_OW 250
30830: PUSH
30831: LD_VAR 0 3
30835: PUSH
30836: LD_VAR 0 4
30840: ARRAY
30841: PPUSH
30842: CALL_OW 251
30846: PUSH
30847: LD_VAR 0 3
30851: PUSH
30852: LD_VAR 0 4
30856: ARRAY
30857: PPUSH
30858: CALL_OW 254
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: PUSH
30869: EMPTY
30870: LIST
30871: ADD
30872: ST_TO_ADDR
30873: GO 30786
30875: POP
30876: POP
// result := list ;
30877: LD_ADDR_VAR 0 2
30881: PUSH
30882: LD_VAR 0 5
30886: ST_TO_ADDR
// end ;
30887: LD_VAR 0 2
30891: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30892: LD_INT 0
30894: PPUSH
30895: PPUSH
30896: PPUSH
30897: PPUSH
30898: PPUSH
30899: PPUSH
30900: PPUSH
// if not factory then
30901: LD_VAR 0 1
30905: NOT
30906: IFFALSE 30910
// exit ;
30908: GO 31503
// if control = control_apeman then
30910: LD_VAR 0 4
30914: PUSH
30915: LD_INT 5
30917: EQUAL
30918: IFFALSE 31027
// begin tmp := UnitsInside ( factory ) ;
30920: LD_ADDR_VAR 0 8
30924: PUSH
30925: LD_VAR 0 1
30929: PPUSH
30930: CALL_OW 313
30934: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30935: LD_VAR 0 8
30939: PPUSH
30940: LD_INT 25
30942: PUSH
30943: LD_INT 12
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PPUSH
30950: CALL_OW 72
30954: NOT
30955: IFFALSE 30965
// control := control_manual ;
30957: LD_ADDR_VAR 0 4
30961: PUSH
30962: LD_INT 1
30964: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30965: LD_ADDR_VAR 0 8
30969: PUSH
30970: LD_VAR 0 1
30974: PPUSH
30975: CALL 30662 0 1
30979: ST_TO_ADDR
// if tmp then
30980: LD_VAR 0 8
30984: IFFALSE 31027
// begin for i in tmp do
30986: LD_ADDR_VAR 0 7
30990: PUSH
30991: LD_VAR 0 8
30995: PUSH
30996: FOR_IN
30997: IFFALSE 31025
// if i [ 1 ] = b_ext_radio then
30999: LD_VAR 0 7
31003: PUSH
31004: LD_INT 1
31006: ARRAY
31007: PUSH
31008: LD_INT 22
31010: EQUAL
31011: IFFALSE 31023
// begin control := control_remote ;
31013: LD_ADDR_VAR 0 4
31017: PUSH
31018: LD_INT 2
31020: ST_TO_ADDR
// break ;
31021: GO 31025
// end ;
31023: GO 30996
31025: POP
31026: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31027: LD_VAR 0 1
31031: PPUSH
31032: LD_VAR 0 2
31036: PPUSH
31037: LD_VAR 0 3
31041: PPUSH
31042: LD_VAR 0 4
31046: PPUSH
31047: LD_VAR 0 5
31051: PPUSH
31052: CALL_OW 448
31056: IFFALSE 31091
// begin result := [ chassis , engine , control , weapon ] ;
31058: LD_ADDR_VAR 0 6
31062: PUSH
31063: LD_VAR 0 2
31067: PUSH
31068: LD_VAR 0 3
31072: PUSH
31073: LD_VAR 0 4
31077: PUSH
31078: LD_VAR 0 5
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: ST_TO_ADDR
// exit ;
31089: GO 31503
// end ; _chassis := AvailableChassisList ( factory ) ;
31091: LD_ADDR_VAR 0 9
31095: PUSH
31096: LD_VAR 0 1
31100: PPUSH
31101: CALL_OW 475
31105: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31106: LD_ADDR_VAR 0 11
31110: PUSH
31111: LD_VAR 0 1
31115: PPUSH
31116: CALL_OW 476
31120: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31121: LD_ADDR_VAR 0 12
31125: PUSH
31126: LD_VAR 0 1
31130: PPUSH
31131: CALL_OW 477
31135: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31136: LD_ADDR_VAR 0 10
31140: PUSH
31141: LD_VAR 0 1
31145: PPUSH
31146: CALL_OW 478
31150: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31151: LD_VAR 0 9
31155: NOT
31156: PUSH
31157: LD_VAR 0 11
31161: NOT
31162: OR
31163: PUSH
31164: LD_VAR 0 12
31168: NOT
31169: OR
31170: PUSH
31171: LD_VAR 0 10
31175: NOT
31176: OR
31177: IFFALSE 31212
// begin result := [ chassis , engine , control , weapon ] ;
31179: LD_ADDR_VAR 0 6
31183: PUSH
31184: LD_VAR 0 2
31188: PUSH
31189: LD_VAR 0 3
31193: PUSH
31194: LD_VAR 0 4
31198: PUSH
31199: LD_VAR 0 5
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: ST_TO_ADDR
// exit ;
31210: GO 31503
// end ; if not chassis in _chassis then
31212: LD_VAR 0 2
31216: PUSH
31217: LD_VAR 0 9
31221: IN
31222: NOT
31223: IFFALSE 31249
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31225: LD_ADDR_VAR 0 2
31229: PUSH
31230: LD_VAR 0 9
31234: PUSH
31235: LD_INT 1
31237: PPUSH
31238: LD_VAR 0 9
31242: PPUSH
31243: CALL_OW 12
31247: ARRAY
31248: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31249: LD_VAR 0 2
31253: PPUSH
31254: LD_VAR 0 3
31258: PPUSH
31259: CALL 31508 0 2
31263: NOT
31264: IFFALSE 31323
// repeat engine := _engine [ 1 ] ;
31266: LD_ADDR_VAR 0 3
31270: PUSH
31271: LD_VAR 0 11
31275: PUSH
31276: LD_INT 1
31278: ARRAY
31279: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31280: LD_ADDR_VAR 0 11
31284: PUSH
31285: LD_VAR 0 11
31289: PPUSH
31290: LD_INT 1
31292: PPUSH
31293: CALL_OW 3
31297: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31298: LD_VAR 0 2
31302: PPUSH
31303: LD_VAR 0 3
31307: PPUSH
31308: CALL 31508 0 2
31312: PUSH
31313: LD_VAR 0 11
31317: PUSH
31318: EMPTY
31319: EQUAL
31320: OR
31321: IFFALSE 31266
// if not control in _control then
31323: LD_VAR 0 4
31327: PUSH
31328: LD_VAR 0 12
31332: IN
31333: NOT
31334: IFFALSE 31360
// control := _control [ rand ( 1 , _control ) ] ;
31336: LD_ADDR_VAR 0 4
31340: PUSH
31341: LD_VAR 0 12
31345: PUSH
31346: LD_INT 1
31348: PPUSH
31349: LD_VAR 0 12
31353: PPUSH
31354: CALL_OW 12
31358: ARRAY
31359: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31360: LD_VAR 0 2
31364: PPUSH
31365: LD_VAR 0 5
31369: PPUSH
31370: CALL 31728 0 2
31374: NOT
31375: IFFALSE 31434
// repeat weapon := _weapon [ 1 ] ;
31377: LD_ADDR_VAR 0 5
31381: PUSH
31382: LD_VAR 0 10
31386: PUSH
31387: LD_INT 1
31389: ARRAY
31390: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31391: LD_ADDR_VAR 0 10
31395: PUSH
31396: LD_VAR 0 10
31400: PPUSH
31401: LD_INT 1
31403: PPUSH
31404: CALL_OW 3
31408: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31409: LD_VAR 0 2
31413: PPUSH
31414: LD_VAR 0 5
31418: PPUSH
31419: CALL 31728 0 2
31423: PUSH
31424: LD_VAR 0 10
31428: PUSH
31429: EMPTY
31430: EQUAL
31431: OR
31432: IFFALSE 31377
// result := [ ] ;
31434: LD_ADDR_VAR 0 6
31438: PUSH
31439: EMPTY
31440: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31441: LD_VAR 0 1
31445: PPUSH
31446: LD_VAR 0 2
31450: PPUSH
31451: LD_VAR 0 3
31455: PPUSH
31456: LD_VAR 0 4
31460: PPUSH
31461: LD_VAR 0 5
31465: PPUSH
31466: CALL_OW 448
31470: IFFALSE 31503
// result := [ chassis , engine , control , weapon ] ;
31472: LD_ADDR_VAR 0 6
31476: PUSH
31477: LD_VAR 0 2
31481: PUSH
31482: LD_VAR 0 3
31486: PUSH
31487: LD_VAR 0 4
31491: PUSH
31492: LD_VAR 0 5
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: ST_TO_ADDR
// end ;
31503: LD_VAR 0 6
31507: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31508: LD_INT 0
31510: PPUSH
// if not chassis or not engine then
31511: LD_VAR 0 1
31515: NOT
31516: PUSH
31517: LD_VAR 0 2
31521: NOT
31522: OR
31523: IFFALSE 31527
// exit ;
31525: GO 31723
// case engine of engine_solar :
31527: LD_VAR 0 2
31531: PUSH
31532: LD_INT 2
31534: DOUBLE
31535: EQUAL
31536: IFTRUE 31540
31538: GO 31578
31540: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31541: LD_ADDR_VAR 0 3
31545: PUSH
31546: LD_INT 11
31548: PUSH
31549: LD_INT 12
31551: PUSH
31552: LD_INT 13
31554: PUSH
31555: LD_INT 14
31557: PUSH
31558: LD_INT 1
31560: PUSH
31561: LD_INT 2
31563: PUSH
31564: LD_INT 3
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: ST_TO_ADDR
31576: GO 31707
31578: LD_INT 1
31580: DOUBLE
31581: EQUAL
31582: IFTRUE 31586
31584: GO 31648
31586: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31587: LD_ADDR_VAR 0 3
31591: PUSH
31592: LD_INT 11
31594: PUSH
31595: LD_INT 12
31597: PUSH
31598: LD_INT 13
31600: PUSH
31601: LD_INT 14
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: LD_INT 2
31609: PUSH
31610: LD_INT 3
31612: PUSH
31613: LD_INT 4
31615: PUSH
31616: LD_INT 5
31618: PUSH
31619: LD_INT 21
31621: PUSH
31622: LD_INT 23
31624: PUSH
31625: LD_INT 22
31627: PUSH
31628: LD_INT 24
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: ST_TO_ADDR
31646: GO 31707
31648: LD_INT 3
31650: DOUBLE
31651: EQUAL
31652: IFTRUE 31656
31654: GO 31706
31656: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31657: LD_ADDR_VAR 0 3
31661: PUSH
31662: LD_INT 13
31664: PUSH
31665: LD_INT 14
31667: PUSH
31668: LD_INT 2
31670: PUSH
31671: LD_INT 3
31673: PUSH
31674: LD_INT 4
31676: PUSH
31677: LD_INT 5
31679: PUSH
31680: LD_INT 21
31682: PUSH
31683: LD_INT 22
31685: PUSH
31686: LD_INT 23
31688: PUSH
31689: LD_INT 24
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: ST_TO_ADDR
31704: GO 31707
31706: POP
// result := ( chassis in result ) ;
31707: LD_ADDR_VAR 0 3
31711: PUSH
31712: LD_VAR 0 1
31716: PUSH
31717: LD_VAR 0 3
31721: IN
31722: ST_TO_ADDR
// end ;
31723: LD_VAR 0 3
31727: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31728: LD_INT 0
31730: PPUSH
// if not chassis or not weapon then
31731: LD_VAR 0 1
31735: NOT
31736: PUSH
31737: LD_VAR 0 2
31741: NOT
31742: OR
31743: IFFALSE 31747
// exit ;
31745: GO 32773
// case weapon of us_machine_gun :
31747: LD_VAR 0 2
31751: PUSH
31752: LD_INT 2
31754: DOUBLE
31755: EQUAL
31756: IFTRUE 31760
31758: GO 31790
31760: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31761: LD_ADDR_VAR 0 3
31765: PUSH
31766: LD_INT 1
31768: PUSH
31769: LD_INT 2
31771: PUSH
31772: LD_INT 3
31774: PUSH
31775: LD_INT 4
31777: PUSH
31778: LD_INT 5
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: ST_TO_ADDR
31788: GO 32757
31790: LD_INT 3
31792: DOUBLE
31793: EQUAL
31794: IFTRUE 31798
31796: GO 31828
31798: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31799: LD_ADDR_VAR 0 3
31803: PUSH
31804: LD_INT 1
31806: PUSH
31807: LD_INT 2
31809: PUSH
31810: LD_INT 3
31812: PUSH
31813: LD_INT 4
31815: PUSH
31816: LD_INT 5
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: ST_TO_ADDR
31826: GO 32757
31828: LD_INT 11
31830: DOUBLE
31831: EQUAL
31832: IFTRUE 31836
31834: GO 31866
31836: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31837: LD_ADDR_VAR 0 3
31841: PUSH
31842: LD_INT 1
31844: PUSH
31845: LD_INT 2
31847: PUSH
31848: LD_INT 3
31850: PUSH
31851: LD_INT 4
31853: PUSH
31854: LD_INT 5
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: ST_TO_ADDR
31864: GO 32757
31866: LD_INT 4
31868: DOUBLE
31869: EQUAL
31870: IFTRUE 31874
31872: GO 31900
31874: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31875: LD_ADDR_VAR 0 3
31879: PUSH
31880: LD_INT 2
31882: PUSH
31883: LD_INT 3
31885: PUSH
31886: LD_INT 4
31888: PUSH
31889: LD_INT 5
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: ST_TO_ADDR
31898: GO 32757
31900: LD_INT 5
31902: DOUBLE
31903: EQUAL
31904: IFTRUE 31908
31906: GO 31934
31908: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31909: LD_ADDR_VAR 0 3
31913: PUSH
31914: LD_INT 2
31916: PUSH
31917: LD_INT 3
31919: PUSH
31920: LD_INT 4
31922: PUSH
31923: LD_INT 5
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: ST_TO_ADDR
31932: GO 32757
31934: LD_INT 9
31936: DOUBLE
31937: EQUAL
31938: IFTRUE 31942
31940: GO 31968
31942: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31943: LD_ADDR_VAR 0 3
31947: PUSH
31948: LD_INT 2
31950: PUSH
31951: LD_INT 3
31953: PUSH
31954: LD_INT 4
31956: PUSH
31957: LD_INT 5
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: ST_TO_ADDR
31966: GO 32757
31968: LD_INT 7
31970: DOUBLE
31971: EQUAL
31972: IFTRUE 31976
31974: GO 32002
31976: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31977: LD_ADDR_VAR 0 3
31981: PUSH
31982: LD_INT 2
31984: PUSH
31985: LD_INT 3
31987: PUSH
31988: LD_INT 4
31990: PUSH
31991: LD_INT 5
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: ST_TO_ADDR
32000: GO 32757
32002: LD_INT 12
32004: DOUBLE
32005: EQUAL
32006: IFTRUE 32010
32008: GO 32036
32010: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32011: LD_ADDR_VAR 0 3
32015: PUSH
32016: LD_INT 2
32018: PUSH
32019: LD_INT 3
32021: PUSH
32022: LD_INT 4
32024: PUSH
32025: LD_INT 5
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: ST_TO_ADDR
32034: GO 32757
32036: LD_INT 13
32038: DOUBLE
32039: EQUAL
32040: IFTRUE 32044
32042: GO 32070
32044: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32045: LD_ADDR_VAR 0 3
32049: PUSH
32050: LD_INT 2
32052: PUSH
32053: LD_INT 3
32055: PUSH
32056: LD_INT 4
32058: PUSH
32059: LD_INT 5
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: ST_TO_ADDR
32068: GO 32757
32070: LD_INT 14
32072: DOUBLE
32073: EQUAL
32074: IFTRUE 32078
32076: GO 32096
32078: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32079: LD_ADDR_VAR 0 3
32083: PUSH
32084: LD_INT 4
32086: PUSH
32087: LD_INT 5
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: ST_TO_ADDR
32094: GO 32757
32096: LD_INT 6
32098: DOUBLE
32099: EQUAL
32100: IFTRUE 32104
32102: GO 32122
32104: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32105: LD_ADDR_VAR 0 3
32109: PUSH
32110: LD_INT 4
32112: PUSH
32113: LD_INT 5
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: ST_TO_ADDR
32120: GO 32757
32122: LD_INT 10
32124: DOUBLE
32125: EQUAL
32126: IFTRUE 32130
32128: GO 32148
32130: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32131: LD_ADDR_VAR 0 3
32135: PUSH
32136: LD_INT 4
32138: PUSH
32139: LD_INT 5
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: ST_TO_ADDR
32146: GO 32757
32148: LD_INT 22
32150: DOUBLE
32151: EQUAL
32152: IFTRUE 32156
32154: GO 32182
32156: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32157: LD_ADDR_VAR 0 3
32161: PUSH
32162: LD_INT 11
32164: PUSH
32165: LD_INT 12
32167: PUSH
32168: LD_INT 13
32170: PUSH
32171: LD_INT 14
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: ST_TO_ADDR
32180: GO 32757
32182: LD_INT 23
32184: DOUBLE
32185: EQUAL
32186: IFTRUE 32190
32188: GO 32216
32190: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32191: LD_ADDR_VAR 0 3
32195: PUSH
32196: LD_INT 11
32198: PUSH
32199: LD_INT 12
32201: PUSH
32202: LD_INT 13
32204: PUSH
32205: LD_INT 14
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: ST_TO_ADDR
32214: GO 32757
32216: LD_INT 24
32218: DOUBLE
32219: EQUAL
32220: IFTRUE 32224
32222: GO 32250
32224: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32225: LD_ADDR_VAR 0 3
32229: PUSH
32230: LD_INT 11
32232: PUSH
32233: LD_INT 12
32235: PUSH
32236: LD_INT 13
32238: PUSH
32239: LD_INT 14
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: ST_TO_ADDR
32248: GO 32757
32250: LD_INT 30
32252: DOUBLE
32253: EQUAL
32254: IFTRUE 32258
32256: GO 32284
32258: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32259: LD_ADDR_VAR 0 3
32263: PUSH
32264: LD_INT 11
32266: PUSH
32267: LD_INT 12
32269: PUSH
32270: LD_INT 13
32272: PUSH
32273: LD_INT 14
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: ST_TO_ADDR
32282: GO 32757
32284: LD_INT 25
32286: DOUBLE
32287: EQUAL
32288: IFTRUE 32292
32290: GO 32310
32292: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32293: LD_ADDR_VAR 0 3
32297: PUSH
32298: LD_INT 13
32300: PUSH
32301: LD_INT 14
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: ST_TO_ADDR
32308: GO 32757
32310: LD_INT 27
32312: DOUBLE
32313: EQUAL
32314: IFTRUE 32318
32316: GO 32336
32318: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32319: LD_ADDR_VAR 0 3
32323: PUSH
32324: LD_INT 13
32326: PUSH
32327: LD_INT 14
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: ST_TO_ADDR
32334: GO 32757
32336: LD_INT 28
32338: DOUBLE
32339: EQUAL
32340: IFTRUE 32344
32342: GO 32362
32344: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32345: LD_ADDR_VAR 0 3
32349: PUSH
32350: LD_INT 13
32352: PUSH
32353: LD_INT 14
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: ST_TO_ADDR
32360: GO 32757
32362: LD_INT 29
32364: DOUBLE
32365: EQUAL
32366: IFTRUE 32370
32368: GO 32388
32370: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32371: LD_ADDR_VAR 0 3
32375: PUSH
32376: LD_INT 13
32378: PUSH
32379: LD_INT 14
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: ST_TO_ADDR
32386: GO 32757
32388: LD_INT 31
32390: DOUBLE
32391: EQUAL
32392: IFTRUE 32396
32394: GO 32414
32396: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32397: LD_ADDR_VAR 0 3
32401: PUSH
32402: LD_INT 13
32404: PUSH
32405: LD_INT 14
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: ST_TO_ADDR
32412: GO 32757
32414: LD_INT 26
32416: DOUBLE
32417: EQUAL
32418: IFTRUE 32422
32420: GO 32440
32422: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32423: LD_ADDR_VAR 0 3
32427: PUSH
32428: LD_INT 13
32430: PUSH
32431: LD_INT 14
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: ST_TO_ADDR
32438: GO 32757
32440: LD_INT 42
32442: DOUBLE
32443: EQUAL
32444: IFTRUE 32448
32446: GO 32474
32448: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32449: LD_ADDR_VAR 0 3
32453: PUSH
32454: LD_INT 21
32456: PUSH
32457: LD_INT 22
32459: PUSH
32460: LD_INT 23
32462: PUSH
32463: LD_INT 24
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: ST_TO_ADDR
32472: GO 32757
32474: LD_INT 43
32476: DOUBLE
32477: EQUAL
32478: IFTRUE 32482
32480: GO 32508
32482: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32483: LD_ADDR_VAR 0 3
32487: PUSH
32488: LD_INT 21
32490: PUSH
32491: LD_INT 22
32493: PUSH
32494: LD_INT 23
32496: PUSH
32497: LD_INT 24
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: ST_TO_ADDR
32506: GO 32757
32508: LD_INT 44
32510: DOUBLE
32511: EQUAL
32512: IFTRUE 32516
32514: GO 32542
32516: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32517: LD_ADDR_VAR 0 3
32521: PUSH
32522: LD_INT 21
32524: PUSH
32525: LD_INT 22
32527: PUSH
32528: LD_INT 23
32530: PUSH
32531: LD_INT 24
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: ST_TO_ADDR
32540: GO 32757
32542: LD_INT 45
32544: DOUBLE
32545: EQUAL
32546: IFTRUE 32550
32548: GO 32576
32550: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32551: LD_ADDR_VAR 0 3
32555: PUSH
32556: LD_INT 21
32558: PUSH
32559: LD_INT 22
32561: PUSH
32562: LD_INT 23
32564: PUSH
32565: LD_INT 24
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: ST_TO_ADDR
32574: GO 32757
32576: LD_INT 49
32578: DOUBLE
32579: EQUAL
32580: IFTRUE 32584
32582: GO 32610
32584: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32585: LD_ADDR_VAR 0 3
32589: PUSH
32590: LD_INT 21
32592: PUSH
32593: LD_INT 22
32595: PUSH
32596: LD_INT 23
32598: PUSH
32599: LD_INT 24
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: ST_TO_ADDR
32608: GO 32757
32610: LD_INT 51
32612: DOUBLE
32613: EQUAL
32614: IFTRUE 32618
32616: GO 32644
32618: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32619: LD_ADDR_VAR 0 3
32623: PUSH
32624: LD_INT 21
32626: PUSH
32627: LD_INT 22
32629: PUSH
32630: LD_INT 23
32632: PUSH
32633: LD_INT 24
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: ST_TO_ADDR
32642: GO 32757
32644: LD_INT 52
32646: DOUBLE
32647: EQUAL
32648: IFTRUE 32652
32650: GO 32678
32652: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32653: LD_ADDR_VAR 0 3
32657: PUSH
32658: LD_INT 21
32660: PUSH
32661: LD_INT 22
32663: PUSH
32664: LD_INT 23
32666: PUSH
32667: LD_INT 24
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: ST_TO_ADDR
32676: GO 32757
32678: LD_INT 53
32680: DOUBLE
32681: EQUAL
32682: IFTRUE 32686
32684: GO 32704
32686: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32687: LD_ADDR_VAR 0 3
32691: PUSH
32692: LD_INT 23
32694: PUSH
32695: LD_INT 24
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: ST_TO_ADDR
32702: GO 32757
32704: LD_INT 46
32706: DOUBLE
32707: EQUAL
32708: IFTRUE 32712
32710: GO 32730
32712: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32713: LD_ADDR_VAR 0 3
32717: PUSH
32718: LD_INT 23
32720: PUSH
32721: LD_INT 24
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: ST_TO_ADDR
32728: GO 32757
32730: LD_INT 47
32732: DOUBLE
32733: EQUAL
32734: IFTRUE 32738
32736: GO 32756
32738: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32739: LD_ADDR_VAR 0 3
32743: PUSH
32744: LD_INT 23
32746: PUSH
32747: LD_INT 24
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: ST_TO_ADDR
32754: GO 32757
32756: POP
// result := ( chassis in result ) ;
32757: LD_ADDR_VAR 0 3
32761: PUSH
32762: LD_VAR 0 1
32766: PUSH
32767: LD_VAR 0 3
32771: IN
32772: ST_TO_ADDR
// end ;
32773: LD_VAR 0 3
32777: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32778: LD_INT 0
32780: PPUSH
32781: PPUSH
32782: PPUSH
32783: PPUSH
32784: PPUSH
32785: PPUSH
32786: PPUSH
// result := array ;
32787: LD_ADDR_VAR 0 5
32791: PUSH
32792: LD_VAR 0 1
32796: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32797: LD_VAR 0 1
32801: NOT
32802: PUSH
32803: LD_VAR 0 2
32807: NOT
32808: OR
32809: PUSH
32810: LD_VAR 0 3
32814: NOT
32815: OR
32816: PUSH
32817: LD_VAR 0 2
32821: PUSH
32822: LD_VAR 0 1
32826: GREATER
32827: OR
32828: PUSH
32829: LD_VAR 0 3
32833: PUSH
32834: LD_VAR 0 1
32838: GREATER
32839: OR
32840: IFFALSE 32844
// exit ;
32842: GO 33140
// if direction then
32844: LD_VAR 0 4
32848: IFFALSE 32912
// begin d := 1 ;
32850: LD_ADDR_VAR 0 9
32854: PUSH
32855: LD_INT 1
32857: ST_TO_ADDR
// if i_from > i_to then
32858: LD_VAR 0 2
32862: PUSH
32863: LD_VAR 0 3
32867: GREATER
32868: IFFALSE 32894
// length := ( array - i_from ) + i_to else
32870: LD_ADDR_VAR 0 11
32874: PUSH
32875: LD_VAR 0 1
32879: PUSH
32880: LD_VAR 0 2
32884: MINUS
32885: PUSH
32886: LD_VAR 0 3
32890: PLUS
32891: ST_TO_ADDR
32892: GO 32910
// length := i_to - i_from ;
32894: LD_ADDR_VAR 0 11
32898: PUSH
32899: LD_VAR 0 3
32903: PUSH
32904: LD_VAR 0 2
32908: MINUS
32909: ST_TO_ADDR
// end else
32910: GO 32973
// begin d := - 1 ;
32912: LD_ADDR_VAR 0 9
32916: PUSH
32917: LD_INT 1
32919: NEG
32920: ST_TO_ADDR
// if i_from > i_to then
32921: LD_VAR 0 2
32925: PUSH
32926: LD_VAR 0 3
32930: GREATER
32931: IFFALSE 32951
// length := i_from - i_to else
32933: LD_ADDR_VAR 0 11
32937: PUSH
32938: LD_VAR 0 2
32942: PUSH
32943: LD_VAR 0 3
32947: MINUS
32948: ST_TO_ADDR
32949: GO 32973
// length := ( array - i_to ) + i_from ;
32951: LD_ADDR_VAR 0 11
32955: PUSH
32956: LD_VAR 0 1
32960: PUSH
32961: LD_VAR 0 3
32965: MINUS
32966: PUSH
32967: LD_VAR 0 2
32971: PLUS
32972: ST_TO_ADDR
// end ; if not length then
32973: LD_VAR 0 11
32977: NOT
32978: IFFALSE 32982
// exit ;
32980: GO 33140
// tmp := array ;
32982: LD_ADDR_VAR 0 10
32986: PUSH
32987: LD_VAR 0 1
32991: ST_TO_ADDR
// for i = 1 to length do
32992: LD_ADDR_VAR 0 6
32996: PUSH
32997: DOUBLE
32998: LD_INT 1
33000: DEC
33001: ST_TO_ADDR
33002: LD_VAR 0 11
33006: PUSH
33007: FOR_TO
33008: IFFALSE 33128
// begin for j = 1 to array do
33010: LD_ADDR_VAR 0 7
33014: PUSH
33015: DOUBLE
33016: LD_INT 1
33018: DEC
33019: ST_TO_ADDR
33020: LD_VAR 0 1
33024: PUSH
33025: FOR_TO
33026: IFFALSE 33114
// begin k := j + d ;
33028: LD_ADDR_VAR 0 8
33032: PUSH
33033: LD_VAR 0 7
33037: PUSH
33038: LD_VAR 0 9
33042: PLUS
33043: ST_TO_ADDR
// if k > array then
33044: LD_VAR 0 8
33048: PUSH
33049: LD_VAR 0 1
33053: GREATER
33054: IFFALSE 33064
// k := 1 ;
33056: LD_ADDR_VAR 0 8
33060: PUSH
33061: LD_INT 1
33063: ST_TO_ADDR
// if not k then
33064: LD_VAR 0 8
33068: NOT
33069: IFFALSE 33081
// k := array ;
33071: LD_ADDR_VAR 0 8
33075: PUSH
33076: LD_VAR 0 1
33080: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33081: LD_ADDR_VAR 0 10
33085: PUSH
33086: LD_VAR 0 10
33090: PPUSH
33091: LD_VAR 0 8
33095: PPUSH
33096: LD_VAR 0 1
33100: PUSH
33101: LD_VAR 0 7
33105: ARRAY
33106: PPUSH
33107: CALL_OW 1
33111: ST_TO_ADDR
// end ;
33112: GO 33025
33114: POP
33115: POP
// array := tmp ;
33116: LD_ADDR_VAR 0 1
33120: PUSH
33121: LD_VAR 0 10
33125: ST_TO_ADDR
// end ;
33126: GO 33007
33128: POP
33129: POP
// result := array ;
33130: LD_ADDR_VAR 0 5
33134: PUSH
33135: LD_VAR 0 1
33139: ST_TO_ADDR
// end ;
33140: LD_VAR 0 5
33144: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33145: LD_INT 0
33147: PPUSH
33148: PPUSH
// result := 0 ;
33149: LD_ADDR_VAR 0 3
33153: PUSH
33154: LD_INT 0
33156: ST_TO_ADDR
// if not array or not value in array then
33157: LD_VAR 0 1
33161: NOT
33162: PUSH
33163: LD_VAR 0 2
33167: PUSH
33168: LD_VAR 0 1
33172: IN
33173: NOT
33174: OR
33175: IFFALSE 33179
// exit ;
33177: GO 33233
// for i = 1 to array do
33179: LD_ADDR_VAR 0 4
33183: PUSH
33184: DOUBLE
33185: LD_INT 1
33187: DEC
33188: ST_TO_ADDR
33189: LD_VAR 0 1
33193: PUSH
33194: FOR_TO
33195: IFFALSE 33231
// if value = array [ i ] then
33197: LD_VAR 0 2
33201: PUSH
33202: LD_VAR 0 1
33206: PUSH
33207: LD_VAR 0 4
33211: ARRAY
33212: EQUAL
33213: IFFALSE 33229
// begin result := i ;
33215: LD_ADDR_VAR 0 3
33219: PUSH
33220: LD_VAR 0 4
33224: ST_TO_ADDR
// exit ;
33225: POP
33226: POP
33227: GO 33233
// end ;
33229: GO 33194
33231: POP
33232: POP
// end ;
33233: LD_VAR 0 3
33237: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33238: LD_INT 0
33240: PPUSH
// vc_chassis := chassis ;
33241: LD_ADDR_OWVAR 37
33245: PUSH
33246: LD_VAR 0 1
33250: ST_TO_ADDR
// vc_engine := engine ;
33251: LD_ADDR_OWVAR 39
33255: PUSH
33256: LD_VAR 0 2
33260: ST_TO_ADDR
// vc_control := control ;
33261: LD_ADDR_OWVAR 38
33265: PUSH
33266: LD_VAR 0 3
33270: ST_TO_ADDR
// vc_weapon := weapon ;
33271: LD_ADDR_OWVAR 40
33275: PUSH
33276: LD_VAR 0 4
33280: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33281: LD_ADDR_OWVAR 41
33285: PUSH
33286: LD_VAR 0 5
33290: ST_TO_ADDR
// end ;
33291: LD_VAR 0 6
33295: RET
// export function WantPlant ( unit ) ; var task ; begin
33296: LD_INT 0
33298: PPUSH
33299: PPUSH
// result := false ;
33300: LD_ADDR_VAR 0 2
33304: PUSH
33305: LD_INT 0
33307: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33308: LD_ADDR_VAR 0 3
33312: PUSH
33313: LD_VAR 0 1
33317: PPUSH
33318: CALL_OW 437
33322: ST_TO_ADDR
// if task then
33323: LD_VAR 0 3
33327: IFFALSE 33355
// if task [ 1 ] [ 1 ] = p then
33329: LD_VAR 0 3
33333: PUSH
33334: LD_INT 1
33336: ARRAY
33337: PUSH
33338: LD_INT 1
33340: ARRAY
33341: PUSH
33342: LD_STRING p
33344: EQUAL
33345: IFFALSE 33355
// result := true ;
33347: LD_ADDR_VAR 0 2
33351: PUSH
33352: LD_INT 1
33354: ST_TO_ADDR
// end ;
33355: LD_VAR 0 2
33359: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33360: LD_INT 0
33362: PPUSH
33363: PPUSH
33364: PPUSH
33365: PPUSH
// if pos < 1 then
33366: LD_VAR 0 2
33370: PUSH
33371: LD_INT 1
33373: LESS
33374: IFFALSE 33378
// exit ;
33376: GO 33681
// if pos = 1 then
33378: LD_VAR 0 2
33382: PUSH
33383: LD_INT 1
33385: EQUAL
33386: IFFALSE 33419
// result := Replace ( arr , pos [ 1 ] , value ) else
33388: LD_ADDR_VAR 0 4
33392: PUSH
33393: LD_VAR 0 1
33397: PPUSH
33398: LD_VAR 0 2
33402: PUSH
33403: LD_INT 1
33405: ARRAY
33406: PPUSH
33407: LD_VAR 0 3
33411: PPUSH
33412: CALL_OW 1
33416: ST_TO_ADDR
33417: GO 33681
// begin tmp := arr ;
33419: LD_ADDR_VAR 0 6
33423: PUSH
33424: LD_VAR 0 1
33428: ST_TO_ADDR
// s_arr := [ tmp ] ;
33429: LD_ADDR_VAR 0 7
33433: PUSH
33434: LD_VAR 0 6
33438: PUSH
33439: EMPTY
33440: LIST
33441: ST_TO_ADDR
// for i = 1 to pos - 1 do
33442: LD_ADDR_VAR 0 5
33446: PUSH
33447: DOUBLE
33448: LD_INT 1
33450: DEC
33451: ST_TO_ADDR
33452: LD_VAR 0 2
33456: PUSH
33457: LD_INT 1
33459: MINUS
33460: PUSH
33461: FOR_TO
33462: IFFALSE 33507
// begin tmp := tmp [ pos [ i ] ] ;
33464: LD_ADDR_VAR 0 6
33468: PUSH
33469: LD_VAR 0 6
33473: PUSH
33474: LD_VAR 0 2
33478: PUSH
33479: LD_VAR 0 5
33483: ARRAY
33484: ARRAY
33485: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33486: LD_ADDR_VAR 0 7
33490: PUSH
33491: LD_VAR 0 7
33495: PUSH
33496: LD_VAR 0 6
33500: PUSH
33501: EMPTY
33502: LIST
33503: ADD
33504: ST_TO_ADDR
// end ;
33505: GO 33461
33507: POP
33508: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33509: LD_ADDR_VAR 0 6
33513: PUSH
33514: LD_VAR 0 6
33518: PPUSH
33519: LD_VAR 0 2
33523: PUSH
33524: LD_VAR 0 2
33528: ARRAY
33529: PPUSH
33530: LD_VAR 0 3
33534: PPUSH
33535: CALL_OW 1
33539: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33540: LD_ADDR_VAR 0 7
33544: PUSH
33545: LD_VAR 0 7
33549: PPUSH
33550: LD_VAR 0 7
33554: PPUSH
33555: LD_VAR 0 6
33559: PPUSH
33560: CALL_OW 1
33564: ST_TO_ADDR
// for i = s_arr downto 2 do
33565: LD_ADDR_VAR 0 5
33569: PUSH
33570: DOUBLE
33571: LD_VAR 0 7
33575: INC
33576: ST_TO_ADDR
33577: LD_INT 2
33579: PUSH
33580: FOR_DOWNTO
33581: IFFALSE 33665
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33583: LD_ADDR_VAR 0 6
33587: PUSH
33588: LD_VAR 0 7
33592: PUSH
33593: LD_VAR 0 5
33597: PUSH
33598: LD_INT 1
33600: MINUS
33601: ARRAY
33602: PPUSH
33603: LD_VAR 0 2
33607: PUSH
33608: LD_VAR 0 5
33612: PUSH
33613: LD_INT 1
33615: MINUS
33616: ARRAY
33617: PPUSH
33618: LD_VAR 0 7
33622: PUSH
33623: LD_VAR 0 5
33627: ARRAY
33628: PPUSH
33629: CALL_OW 1
33633: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33634: LD_ADDR_VAR 0 7
33638: PUSH
33639: LD_VAR 0 7
33643: PPUSH
33644: LD_VAR 0 5
33648: PUSH
33649: LD_INT 1
33651: MINUS
33652: PPUSH
33653: LD_VAR 0 6
33657: PPUSH
33658: CALL_OW 1
33662: ST_TO_ADDR
// end ;
33663: GO 33580
33665: POP
33666: POP
// result := s_arr [ 1 ] ;
33667: LD_ADDR_VAR 0 4
33671: PUSH
33672: LD_VAR 0 7
33676: PUSH
33677: LD_INT 1
33679: ARRAY
33680: ST_TO_ADDR
// end ; end ;
33681: LD_VAR 0 4
33685: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33686: LD_INT 0
33688: PPUSH
33689: PPUSH
// if not list then
33690: LD_VAR 0 1
33694: NOT
33695: IFFALSE 33699
// exit ;
33697: GO 33790
// i := list [ pos1 ] ;
33699: LD_ADDR_VAR 0 5
33703: PUSH
33704: LD_VAR 0 1
33708: PUSH
33709: LD_VAR 0 2
33713: ARRAY
33714: ST_TO_ADDR
// if not i then
33715: LD_VAR 0 5
33719: NOT
33720: IFFALSE 33724
// exit ;
33722: GO 33790
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33724: LD_ADDR_VAR 0 1
33728: PUSH
33729: LD_VAR 0 1
33733: PPUSH
33734: LD_VAR 0 2
33738: PPUSH
33739: LD_VAR 0 1
33743: PUSH
33744: LD_VAR 0 3
33748: ARRAY
33749: PPUSH
33750: CALL_OW 1
33754: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33755: LD_ADDR_VAR 0 1
33759: PUSH
33760: LD_VAR 0 1
33764: PPUSH
33765: LD_VAR 0 3
33769: PPUSH
33770: LD_VAR 0 5
33774: PPUSH
33775: CALL_OW 1
33779: ST_TO_ADDR
// result := list ;
33780: LD_ADDR_VAR 0 4
33784: PUSH
33785: LD_VAR 0 1
33789: ST_TO_ADDR
// end ;
33790: LD_VAR 0 4
33794: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33795: LD_INT 0
33797: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33798: LD_ADDR_VAR 0 5
33802: PUSH
33803: LD_VAR 0 1
33807: PPUSH
33808: CALL_OW 250
33812: PPUSH
33813: LD_VAR 0 1
33817: PPUSH
33818: CALL_OW 251
33822: PPUSH
33823: LD_VAR 0 2
33827: PPUSH
33828: LD_VAR 0 3
33832: PPUSH
33833: LD_VAR 0 4
33837: PPUSH
33838: CALL 33848 0 5
33842: ST_TO_ADDR
// end ;
33843: LD_VAR 0 5
33847: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33848: LD_INT 0
33850: PPUSH
33851: PPUSH
33852: PPUSH
33853: PPUSH
// if not list then
33854: LD_VAR 0 3
33858: NOT
33859: IFFALSE 33863
// exit ;
33861: GO 34251
// result := [ ] ;
33863: LD_ADDR_VAR 0 6
33867: PUSH
33868: EMPTY
33869: ST_TO_ADDR
// for i in list do
33870: LD_ADDR_VAR 0 7
33874: PUSH
33875: LD_VAR 0 3
33879: PUSH
33880: FOR_IN
33881: IFFALSE 34083
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33883: LD_ADDR_VAR 0 9
33887: PUSH
33888: LD_VAR 0 7
33892: PPUSH
33893: LD_VAR 0 1
33897: PPUSH
33898: LD_VAR 0 2
33902: PPUSH
33903: CALL_OW 297
33907: ST_TO_ADDR
// if not result then
33908: LD_VAR 0 6
33912: NOT
33913: IFFALSE 33939
// result := [ [ i , tmp ] ] else
33915: LD_ADDR_VAR 0 6
33919: PUSH
33920: LD_VAR 0 7
33924: PUSH
33925: LD_VAR 0 9
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: EMPTY
33935: LIST
33936: ST_TO_ADDR
33937: GO 34081
// begin if result [ result ] [ 2 ] < tmp then
33939: LD_VAR 0 6
33943: PUSH
33944: LD_VAR 0 6
33948: ARRAY
33949: PUSH
33950: LD_INT 2
33952: ARRAY
33953: PUSH
33954: LD_VAR 0 9
33958: LESS
33959: IFFALSE 34001
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33961: LD_ADDR_VAR 0 6
33965: PUSH
33966: LD_VAR 0 6
33970: PPUSH
33971: LD_VAR 0 6
33975: PUSH
33976: LD_INT 1
33978: PLUS
33979: PPUSH
33980: LD_VAR 0 7
33984: PUSH
33985: LD_VAR 0 9
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PPUSH
33994: CALL_OW 2
33998: ST_TO_ADDR
33999: GO 34081
// for j = 1 to result do
34001: LD_ADDR_VAR 0 8
34005: PUSH
34006: DOUBLE
34007: LD_INT 1
34009: DEC
34010: ST_TO_ADDR
34011: LD_VAR 0 6
34015: PUSH
34016: FOR_TO
34017: IFFALSE 34079
// begin if tmp < result [ j ] [ 2 ] then
34019: LD_VAR 0 9
34023: PUSH
34024: LD_VAR 0 6
34028: PUSH
34029: LD_VAR 0 8
34033: ARRAY
34034: PUSH
34035: LD_INT 2
34037: ARRAY
34038: LESS
34039: IFFALSE 34077
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34041: LD_ADDR_VAR 0 6
34045: PUSH
34046: LD_VAR 0 6
34050: PPUSH
34051: LD_VAR 0 8
34055: PPUSH
34056: LD_VAR 0 7
34060: PUSH
34061: LD_VAR 0 9
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PPUSH
34070: CALL_OW 2
34074: ST_TO_ADDR
// break ;
34075: GO 34079
// end ; end ;
34077: GO 34016
34079: POP
34080: POP
// end ; end ;
34081: GO 33880
34083: POP
34084: POP
// if result and not asc then
34085: LD_VAR 0 6
34089: PUSH
34090: LD_VAR 0 4
34094: NOT
34095: AND
34096: IFFALSE 34171
// begin tmp := result ;
34098: LD_ADDR_VAR 0 9
34102: PUSH
34103: LD_VAR 0 6
34107: ST_TO_ADDR
// for i = tmp downto 1 do
34108: LD_ADDR_VAR 0 7
34112: PUSH
34113: DOUBLE
34114: LD_VAR 0 9
34118: INC
34119: ST_TO_ADDR
34120: LD_INT 1
34122: PUSH
34123: FOR_DOWNTO
34124: IFFALSE 34169
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34126: LD_ADDR_VAR 0 6
34130: PUSH
34131: LD_VAR 0 6
34135: PPUSH
34136: LD_VAR 0 9
34140: PUSH
34141: LD_VAR 0 7
34145: MINUS
34146: PUSH
34147: LD_INT 1
34149: PLUS
34150: PPUSH
34151: LD_VAR 0 9
34155: PUSH
34156: LD_VAR 0 7
34160: ARRAY
34161: PPUSH
34162: CALL_OW 1
34166: ST_TO_ADDR
34167: GO 34123
34169: POP
34170: POP
// end ; tmp := [ ] ;
34171: LD_ADDR_VAR 0 9
34175: PUSH
34176: EMPTY
34177: ST_TO_ADDR
// if mode then
34178: LD_VAR 0 5
34182: IFFALSE 34251
// begin for i = 1 to result do
34184: LD_ADDR_VAR 0 7
34188: PUSH
34189: DOUBLE
34190: LD_INT 1
34192: DEC
34193: ST_TO_ADDR
34194: LD_VAR 0 6
34198: PUSH
34199: FOR_TO
34200: IFFALSE 34239
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34202: LD_ADDR_VAR 0 9
34206: PUSH
34207: LD_VAR 0 9
34211: PPUSH
34212: LD_VAR 0 7
34216: PPUSH
34217: LD_VAR 0 6
34221: PUSH
34222: LD_VAR 0 7
34226: ARRAY
34227: PUSH
34228: LD_INT 1
34230: ARRAY
34231: PPUSH
34232: CALL_OW 1
34236: ST_TO_ADDR
34237: GO 34199
34239: POP
34240: POP
// result := tmp ;
34241: LD_ADDR_VAR 0 6
34245: PUSH
34246: LD_VAR 0 9
34250: ST_TO_ADDR
// end ; end ;
34251: LD_VAR 0 6
34255: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34256: LD_INT 0
34258: PPUSH
34259: PPUSH
34260: PPUSH
34261: PPUSH
34262: PPUSH
34263: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34264: LD_ADDR_VAR 0 5
34268: PUSH
34269: LD_INT 0
34271: PUSH
34272: LD_INT 0
34274: PUSH
34275: LD_INT 0
34277: PUSH
34278: EMPTY
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: ST_TO_ADDR
// if not x or not y then
34286: LD_VAR 0 2
34290: NOT
34291: PUSH
34292: LD_VAR 0 3
34296: NOT
34297: OR
34298: IFFALSE 34302
// exit ;
34300: GO 35948
// if not range then
34302: LD_VAR 0 4
34306: NOT
34307: IFFALSE 34317
// range := 10 ;
34309: LD_ADDR_VAR 0 4
34313: PUSH
34314: LD_INT 10
34316: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34317: LD_ADDR_VAR 0 8
34321: PUSH
34322: LD_INT 81
34324: PUSH
34325: LD_VAR 0 1
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 92
34336: PUSH
34337: LD_VAR 0 2
34341: PUSH
34342: LD_VAR 0 3
34346: PUSH
34347: LD_VAR 0 4
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 3
34360: PUSH
34361: LD_INT 21
34363: PUSH
34364: LD_INT 3
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: LIST
34379: PPUSH
34380: CALL_OW 69
34384: ST_TO_ADDR
// if not tmp then
34385: LD_VAR 0 8
34389: NOT
34390: IFFALSE 34394
// exit ;
34392: GO 35948
// for i in tmp do
34394: LD_ADDR_VAR 0 6
34398: PUSH
34399: LD_VAR 0 8
34403: PUSH
34404: FOR_IN
34405: IFFALSE 35923
// begin points := [ 0 , 0 , 0 ] ;
34407: LD_ADDR_VAR 0 9
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: LD_INT 0
34417: PUSH
34418: LD_INT 0
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: LIST
34425: ST_TO_ADDR
// bpoints := 1 ;
34426: LD_ADDR_VAR 0 10
34430: PUSH
34431: LD_INT 1
34433: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34434: LD_VAR 0 6
34438: PPUSH
34439: CALL_OW 247
34443: PUSH
34444: LD_INT 1
34446: DOUBLE
34447: EQUAL
34448: IFTRUE 34452
34450: GO 35030
34452: POP
// begin if GetClass ( i ) = 1 then
34453: LD_VAR 0 6
34457: PPUSH
34458: CALL_OW 257
34462: PUSH
34463: LD_INT 1
34465: EQUAL
34466: IFFALSE 34487
// points := [ 10 , 5 , 3 ] ;
34468: LD_ADDR_VAR 0 9
34472: PUSH
34473: LD_INT 10
34475: PUSH
34476: LD_INT 5
34478: PUSH
34479: LD_INT 3
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: LIST
34486: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34487: LD_VAR 0 6
34491: PPUSH
34492: CALL_OW 257
34496: PUSH
34497: LD_INT 2
34499: PUSH
34500: LD_INT 3
34502: PUSH
34503: LD_INT 4
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: LIST
34510: IN
34511: IFFALSE 34532
// points := [ 3 , 2 , 1 ] ;
34513: LD_ADDR_VAR 0 9
34517: PUSH
34518: LD_INT 3
34520: PUSH
34521: LD_INT 2
34523: PUSH
34524: LD_INT 1
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: LIST
34531: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34532: LD_VAR 0 6
34536: PPUSH
34537: CALL_OW 257
34541: PUSH
34542: LD_INT 5
34544: EQUAL
34545: IFFALSE 34566
// points := [ 130 , 5 , 2 ] ;
34547: LD_ADDR_VAR 0 9
34551: PUSH
34552: LD_INT 130
34554: PUSH
34555: LD_INT 5
34557: PUSH
34558: LD_INT 2
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: LIST
34565: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34566: LD_VAR 0 6
34570: PPUSH
34571: CALL_OW 257
34575: PUSH
34576: LD_INT 8
34578: EQUAL
34579: IFFALSE 34600
// points := [ 35 , 35 , 30 ] ;
34581: LD_ADDR_VAR 0 9
34585: PUSH
34586: LD_INT 35
34588: PUSH
34589: LD_INT 35
34591: PUSH
34592: LD_INT 30
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: LIST
34599: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34600: LD_VAR 0 6
34604: PPUSH
34605: CALL_OW 257
34609: PUSH
34610: LD_INT 9
34612: EQUAL
34613: IFFALSE 34634
// points := [ 20 , 55 , 40 ] ;
34615: LD_ADDR_VAR 0 9
34619: PUSH
34620: LD_INT 20
34622: PUSH
34623: LD_INT 55
34625: PUSH
34626: LD_INT 40
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: LIST
34633: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34634: LD_VAR 0 6
34638: PPUSH
34639: CALL_OW 257
34643: PUSH
34644: LD_INT 12
34646: PUSH
34647: LD_INT 16
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: IN
34654: IFFALSE 34675
// points := [ 5 , 3 , 2 ] ;
34656: LD_ADDR_VAR 0 9
34660: PUSH
34661: LD_INT 5
34663: PUSH
34664: LD_INT 3
34666: PUSH
34667: LD_INT 2
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: LIST
34674: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34675: LD_VAR 0 6
34679: PPUSH
34680: CALL_OW 257
34684: PUSH
34685: LD_INT 17
34687: EQUAL
34688: IFFALSE 34709
// points := [ 100 , 50 , 75 ] ;
34690: LD_ADDR_VAR 0 9
34694: PUSH
34695: LD_INT 100
34697: PUSH
34698: LD_INT 50
34700: PUSH
34701: LD_INT 75
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: LIST
34708: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34709: LD_VAR 0 6
34713: PPUSH
34714: CALL_OW 257
34718: PUSH
34719: LD_INT 15
34721: EQUAL
34722: IFFALSE 34743
// points := [ 10 , 5 , 3 ] ;
34724: LD_ADDR_VAR 0 9
34728: PUSH
34729: LD_INT 10
34731: PUSH
34732: LD_INT 5
34734: PUSH
34735: LD_INT 3
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: LIST
34742: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34743: LD_VAR 0 6
34747: PPUSH
34748: CALL_OW 257
34752: PUSH
34753: LD_INT 14
34755: EQUAL
34756: IFFALSE 34777
// points := [ 10 , 0 , 0 ] ;
34758: LD_ADDR_VAR 0 9
34762: PUSH
34763: LD_INT 10
34765: PUSH
34766: LD_INT 0
34768: PUSH
34769: LD_INT 0
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: LIST
34776: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34777: LD_VAR 0 6
34781: PPUSH
34782: CALL_OW 257
34786: PUSH
34787: LD_INT 11
34789: EQUAL
34790: IFFALSE 34811
// points := [ 30 , 10 , 5 ] ;
34792: LD_ADDR_VAR 0 9
34796: PUSH
34797: LD_INT 30
34799: PUSH
34800: LD_INT 10
34802: PUSH
34803: LD_INT 5
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: LIST
34810: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34811: LD_VAR 0 1
34815: PPUSH
34816: LD_INT 5
34818: PPUSH
34819: CALL_OW 321
34823: PUSH
34824: LD_INT 2
34826: EQUAL
34827: IFFALSE 34844
// bpoints := bpoints * 1.8 ;
34829: LD_ADDR_VAR 0 10
34833: PUSH
34834: LD_VAR 0 10
34838: PUSH
34839: LD_REAL  1.80000000000000E+0000
34842: MUL
34843: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34844: LD_VAR 0 6
34848: PPUSH
34849: CALL_OW 257
34853: PUSH
34854: LD_INT 1
34856: PUSH
34857: LD_INT 2
34859: PUSH
34860: LD_INT 3
34862: PUSH
34863: LD_INT 4
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: IN
34872: PUSH
34873: LD_VAR 0 1
34877: PPUSH
34878: LD_INT 51
34880: PPUSH
34881: CALL_OW 321
34885: PUSH
34886: LD_INT 2
34888: EQUAL
34889: AND
34890: IFFALSE 34907
// bpoints := bpoints * 1.2 ;
34892: LD_ADDR_VAR 0 10
34896: PUSH
34897: LD_VAR 0 10
34901: PUSH
34902: LD_REAL  1.20000000000000E+0000
34905: MUL
34906: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34907: LD_VAR 0 6
34911: PPUSH
34912: CALL_OW 257
34916: PUSH
34917: LD_INT 5
34919: PUSH
34920: LD_INT 7
34922: PUSH
34923: LD_INT 9
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: LIST
34930: IN
34931: PUSH
34932: LD_VAR 0 1
34936: PPUSH
34937: LD_INT 52
34939: PPUSH
34940: CALL_OW 321
34944: PUSH
34945: LD_INT 2
34947: EQUAL
34948: AND
34949: IFFALSE 34966
// bpoints := bpoints * 1.5 ;
34951: LD_ADDR_VAR 0 10
34955: PUSH
34956: LD_VAR 0 10
34960: PUSH
34961: LD_REAL  1.50000000000000E+0000
34964: MUL
34965: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34966: LD_VAR 0 1
34970: PPUSH
34971: LD_INT 66
34973: PPUSH
34974: CALL_OW 321
34978: PUSH
34979: LD_INT 2
34981: EQUAL
34982: IFFALSE 34999
// bpoints := bpoints * 1.1 ;
34984: LD_ADDR_VAR 0 10
34988: PUSH
34989: LD_VAR 0 10
34993: PUSH
34994: LD_REAL  1.10000000000000E+0000
34997: MUL
34998: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34999: LD_ADDR_VAR 0 10
35003: PUSH
35004: LD_VAR 0 10
35008: PUSH
35009: LD_VAR 0 6
35013: PPUSH
35014: LD_INT 1
35016: PPUSH
35017: CALL_OW 259
35021: PUSH
35022: LD_REAL  1.15000000000000E+0000
35025: MUL
35026: MUL
35027: ST_TO_ADDR
// end ; unit_vehicle :
35028: GO 35852
35030: LD_INT 2
35032: DOUBLE
35033: EQUAL
35034: IFTRUE 35038
35036: GO 35840
35038: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35039: LD_VAR 0 6
35043: PPUSH
35044: CALL_OW 264
35048: PUSH
35049: LD_INT 2
35051: PUSH
35052: LD_INT 42
35054: PUSH
35055: LD_INT 24
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: LIST
35062: IN
35063: IFFALSE 35084
// points := [ 25 , 5 , 3 ] ;
35065: LD_ADDR_VAR 0 9
35069: PUSH
35070: LD_INT 25
35072: PUSH
35073: LD_INT 5
35075: PUSH
35076: LD_INT 3
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: LIST
35083: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35084: LD_VAR 0 6
35088: PPUSH
35089: CALL_OW 264
35093: PUSH
35094: LD_INT 4
35096: PUSH
35097: LD_INT 43
35099: PUSH
35100: LD_INT 25
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: LIST
35107: IN
35108: IFFALSE 35129
// points := [ 40 , 15 , 5 ] ;
35110: LD_ADDR_VAR 0 9
35114: PUSH
35115: LD_INT 40
35117: PUSH
35118: LD_INT 15
35120: PUSH
35121: LD_INT 5
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: LIST
35128: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35129: LD_VAR 0 6
35133: PPUSH
35134: CALL_OW 264
35138: PUSH
35139: LD_INT 3
35141: PUSH
35142: LD_INT 23
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: IN
35149: IFFALSE 35170
// points := [ 7 , 25 , 8 ] ;
35151: LD_ADDR_VAR 0 9
35155: PUSH
35156: LD_INT 7
35158: PUSH
35159: LD_INT 25
35161: PUSH
35162: LD_INT 8
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: LIST
35169: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35170: LD_VAR 0 6
35174: PPUSH
35175: CALL_OW 264
35179: PUSH
35180: LD_INT 5
35182: PUSH
35183: LD_INT 27
35185: PUSH
35186: LD_INT 44
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: LIST
35193: IN
35194: IFFALSE 35215
// points := [ 14 , 50 , 16 ] ;
35196: LD_ADDR_VAR 0 9
35200: PUSH
35201: LD_INT 14
35203: PUSH
35204: LD_INT 50
35206: PUSH
35207: LD_INT 16
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: LIST
35214: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35215: LD_VAR 0 6
35219: PPUSH
35220: CALL_OW 264
35224: PUSH
35225: LD_INT 6
35227: PUSH
35228: LD_INT 46
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: IN
35235: IFFALSE 35256
// points := [ 32 , 120 , 70 ] ;
35237: LD_ADDR_VAR 0 9
35241: PUSH
35242: LD_INT 32
35244: PUSH
35245: LD_INT 120
35247: PUSH
35248: LD_INT 70
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: LIST
35255: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
35256: LD_VAR 0 6
35260: PPUSH
35261: CALL_OW 264
35265: PUSH
35266: LD_INT 7
35268: PUSH
35269: LD_INT 28
35271: PUSH
35272: LD_INT 45
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: LIST
35279: IN
35280: IFFALSE 35301
// points := [ 35 , 20 , 45 ] ;
35282: LD_ADDR_VAR 0 9
35286: PUSH
35287: LD_INT 35
35289: PUSH
35290: LD_INT 20
35292: PUSH
35293: LD_INT 45
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: LIST
35300: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35301: LD_VAR 0 6
35305: PPUSH
35306: CALL_OW 264
35310: PUSH
35311: LD_INT 47
35313: PUSH
35314: EMPTY
35315: LIST
35316: IN
35317: IFFALSE 35338
// points := [ 67 , 45 , 75 ] ;
35319: LD_ADDR_VAR 0 9
35323: PUSH
35324: LD_INT 67
35326: PUSH
35327: LD_INT 45
35329: PUSH
35330: LD_INT 75
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: LIST
35337: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35338: LD_VAR 0 6
35342: PPUSH
35343: CALL_OW 264
35347: PUSH
35348: LD_INT 26
35350: PUSH
35351: EMPTY
35352: LIST
35353: IN
35354: IFFALSE 35375
// points := [ 120 , 30 , 80 ] ;
35356: LD_ADDR_VAR 0 9
35360: PUSH
35361: LD_INT 120
35363: PUSH
35364: LD_INT 30
35366: PUSH
35367: LD_INT 80
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: LIST
35374: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35375: LD_VAR 0 6
35379: PPUSH
35380: CALL_OW 264
35384: PUSH
35385: LD_INT 22
35387: PUSH
35388: EMPTY
35389: LIST
35390: IN
35391: IFFALSE 35412
// points := [ 40 , 1 , 1 ] ;
35393: LD_ADDR_VAR 0 9
35397: PUSH
35398: LD_INT 40
35400: PUSH
35401: LD_INT 1
35403: PUSH
35404: LD_INT 1
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: LIST
35411: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35412: LD_VAR 0 6
35416: PPUSH
35417: CALL_OW 264
35421: PUSH
35422: LD_INT 29
35424: PUSH
35425: EMPTY
35426: LIST
35427: IN
35428: IFFALSE 35449
// points := [ 70 , 200 , 400 ] ;
35430: LD_ADDR_VAR 0 9
35434: PUSH
35435: LD_INT 70
35437: PUSH
35438: LD_INT 200
35440: PUSH
35441: LD_INT 400
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: LIST
35448: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35449: LD_VAR 0 6
35453: PPUSH
35454: CALL_OW 264
35458: PUSH
35459: LD_INT 14
35461: PUSH
35462: LD_INT 53
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: IN
35469: IFFALSE 35490
// points := [ 40 , 10 , 20 ] ;
35471: LD_ADDR_VAR 0 9
35475: PUSH
35476: LD_INT 40
35478: PUSH
35479: LD_INT 10
35481: PUSH
35482: LD_INT 20
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: LIST
35489: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35490: LD_VAR 0 6
35494: PPUSH
35495: CALL_OW 264
35499: PUSH
35500: LD_INT 9
35502: PUSH
35503: EMPTY
35504: LIST
35505: IN
35506: IFFALSE 35527
// points := [ 5 , 70 , 20 ] ;
35508: LD_ADDR_VAR 0 9
35512: PUSH
35513: LD_INT 5
35515: PUSH
35516: LD_INT 70
35518: PUSH
35519: LD_INT 20
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: LIST
35526: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35527: LD_VAR 0 6
35531: PPUSH
35532: CALL_OW 264
35536: PUSH
35537: LD_INT 10
35539: PUSH
35540: EMPTY
35541: LIST
35542: IN
35543: IFFALSE 35564
// points := [ 35 , 110 , 70 ] ;
35545: LD_ADDR_VAR 0 9
35549: PUSH
35550: LD_INT 35
35552: PUSH
35553: LD_INT 110
35555: PUSH
35556: LD_INT 70
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: LIST
35563: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35564: LD_VAR 0 6
35568: PPUSH
35569: CALL_OW 265
35573: PUSH
35574: LD_INT 25
35576: EQUAL
35577: IFFALSE 35598
// points := [ 80 , 65 , 100 ] ;
35579: LD_ADDR_VAR 0 9
35583: PUSH
35584: LD_INT 80
35586: PUSH
35587: LD_INT 65
35589: PUSH
35590: LD_INT 100
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: LIST
35597: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35598: LD_VAR 0 6
35602: PPUSH
35603: CALL_OW 263
35607: PUSH
35608: LD_INT 1
35610: EQUAL
35611: IFFALSE 35646
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35613: LD_ADDR_VAR 0 10
35617: PUSH
35618: LD_VAR 0 10
35622: PUSH
35623: LD_VAR 0 6
35627: PPUSH
35628: CALL_OW 311
35632: PPUSH
35633: LD_INT 3
35635: PPUSH
35636: CALL_OW 259
35640: PUSH
35641: LD_INT 4
35643: MUL
35644: MUL
35645: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35646: LD_VAR 0 6
35650: PPUSH
35651: CALL_OW 263
35655: PUSH
35656: LD_INT 2
35658: EQUAL
35659: IFFALSE 35710
// begin j := IsControledBy ( i ) ;
35661: LD_ADDR_VAR 0 7
35665: PUSH
35666: LD_VAR 0 6
35670: PPUSH
35671: CALL_OW 312
35675: ST_TO_ADDR
// if j then
35676: LD_VAR 0 7
35680: IFFALSE 35710
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35682: LD_ADDR_VAR 0 10
35686: PUSH
35687: LD_VAR 0 10
35691: PUSH
35692: LD_VAR 0 7
35696: PPUSH
35697: LD_INT 3
35699: PPUSH
35700: CALL_OW 259
35704: PUSH
35705: LD_INT 3
35707: MUL
35708: MUL
35709: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35710: LD_VAR 0 6
35714: PPUSH
35715: CALL_OW 264
35719: PUSH
35720: LD_INT 5
35722: PUSH
35723: LD_INT 6
35725: PUSH
35726: LD_INT 46
35728: PUSH
35729: LD_INT 44
35731: PUSH
35732: LD_INT 47
35734: PUSH
35735: LD_INT 45
35737: PUSH
35738: LD_INT 28
35740: PUSH
35741: LD_INT 7
35743: PUSH
35744: LD_INT 27
35746: PUSH
35747: LD_INT 29
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: IN
35762: PUSH
35763: LD_VAR 0 1
35767: PPUSH
35768: LD_INT 52
35770: PPUSH
35771: CALL_OW 321
35775: PUSH
35776: LD_INT 2
35778: EQUAL
35779: AND
35780: IFFALSE 35797
// bpoints := bpoints * 1.2 ;
35782: LD_ADDR_VAR 0 10
35786: PUSH
35787: LD_VAR 0 10
35791: PUSH
35792: LD_REAL  1.20000000000000E+0000
35795: MUL
35796: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35797: LD_VAR 0 6
35801: PPUSH
35802: CALL_OW 264
35806: PUSH
35807: LD_INT 6
35809: PUSH
35810: LD_INT 46
35812: PUSH
35813: LD_INT 47
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: LIST
35820: IN
35821: IFFALSE 35838
// bpoints := bpoints * 1.2 ;
35823: LD_ADDR_VAR 0 10
35827: PUSH
35828: LD_VAR 0 10
35832: PUSH
35833: LD_REAL  1.20000000000000E+0000
35836: MUL
35837: ST_TO_ADDR
// end ; unit_building :
35838: GO 35852
35840: LD_INT 3
35842: DOUBLE
35843: EQUAL
35844: IFTRUE 35848
35846: GO 35851
35848: POP
// ; end ;
35849: GO 35852
35851: POP
// for j = 1 to 3 do
35852: LD_ADDR_VAR 0 7
35856: PUSH
35857: DOUBLE
35858: LD_INT 1
35860: DEC
35861: ST_TO_ADDR
35862: LD_INT 3
35864: PUSH
35865: FOR_TO
35866: IFFALSE 35919
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35868: LD_ADDR_VAR 0 5
35872: PUSH
35873: LD_VAR 0 5
35877: PPUSH
35878: LD_VAR 0 7
35882: PPUSH
35883: LD_VAR 0 5
35887: PUSH
35888: LD_VAR 0 7
35892: ARRAY
35893: PUSH
35894: LD_VAR 0 9
35898: PUSH
35899: LD_VAR 0 7
35903: ARRAY
35904: PUSH
35905: LD_VAR 0 10
35909: MUL
35910: PLUS
35911: PPUSH
35912: CALL_OW 1
35916: ST_TO_ADDR
35917: GO 35865
35919: POP
35920: POP
// end ;
35921: GO 34404
35923: POP
35924: POP
// result := Replace ( result , 4 , tmp ) ;
35925: LD_ADDR_VAR 0 5
35929: PUSH
35930: LD_VAR 0 5
35934: PPUSH
35935: LD_INT 4
35937: PPUSH
35938: LD_VAR 0 8
35942: PPUSH
35943: CALL_OW 1
35947: ST_TO_ADDR
// end ;
35948: LD_VAR 0 5
35952: RET
// export function DangerAtRange ( unit , range ) ; begin
35953: LD_INT 0
35955: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35956: LD_ADDR_VAR 0 3
35960: PUSH
35961: LD_VAR 0 1
35965: PPUSH
35966: CALL_OW 255
35970: PPUSH
35971: LD_VAR 0 1
35975: PPUSH
35976: CALL_OW 250
35980: PPUSH
35981: LD_VAR 0 1
35985: PPUSH
35986: CALL_OW 251
35990: PPUSH
35991: LD_VAR 0 2
35995: PPUSH
35996: CALL 34256 0 4
36000: ST_TO_ADDR
// end ;
36001: LD_VAR 0 3
36005: RET
// export function DangerInArea ( side , area ) ; begin
36006: LD_INT 0
36008: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36009: LD_ADDR_VAR 0 3
36013: PUSH
36014: LD_VAR 0 2
36018: PPUSH
36019: LD_INT 81
36021: PUSH
36022: LD_VAR 0 1
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PPUSH
36031: CALL_OW 70
36035: ST_TO_ADDR
// end ;
36036: LD_VAR 0 3
36040: RET
// export function IsExtension ( b ) ; begin
36041: LD_INT 0
36043: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36044: LD_ADDR_VAR 0 2
36048: PUSH
36049: LD_VAR 0 1
36053: PUSH
36054: LD_INT 23
36056: PUSH
36057: LD_INT 20
36059: PUSH
36060: LD_INT 22
36062: PUSH
36063: LD_INT 17
36065: PUSH
36066: LD_INT 24
36068: PUSH
36069: LD_INT 21
36071: PUSH
36072: LD_INT 19
36074: PUSH
36075: LD_INT 16
36077: PUSH
36078: LD_INT 25
36080: PUSH
36081: LD_INT 18
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: IN
36096: ST_TO_ADDR
// end ;
36097: LD_VAR 0 2
36101: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
36102: LD_INT 0
36104: PPUSH
36105: PPUSH
36106: PPUSH
// result := [ ] ;
36107: LD_ADDR_VAR 0 3
36111: PUSH
36112: EMPTY
36113: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36114: LD_ADDR_VAR 0 4
36118: PUSH
36119: LD_VAR 0 2
36123: PPUSH
36124: LD_INT 21
36126: PUSH
36127: LD_INT 3
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PPUSH
36134: CALL_OW 70
36138: ST_TO_ADDR
// if not tmp then
36139: LD_VAR 0 4
36143: NOT
36144: IFFALSE 36148
// exit ;
36146: GO 36206
// for i in tmp do
36148: LD_ADDR_VAR 0 5
36152: PUSH
36153: LD_VAR 0 4
36157: PUSH
36158: FOR_IN
36159: IFFALSE 36194
// if GetBase ( i ) <> base then
36161: LD_VAR 0 5
36165: PPUSH
36166: CALL_OW 274
36170: PUSH
36171: LD_VAR 0 1
36175: NONEQUAL
36176: IFFALSE 36192
// ComLinkToBase ( base , i ) ;
36178: LD_VAR 0 1
36182: PPUSH
36183: LD_VAR 0 5
36187: PPUSH
36188: CALL_OW 169
36192: GO 36158
36194: POP
36195: POP
// result := tmp ;
36196: LD_ADDR_VAR 0 3
36200: PUSH
36201: LD_VAR 0 4
36205: ST_TO_ADDR
// end ;
36206: LD_VAR 0 3
36210: RET
// export function ComComplete ( unit , b ) ; var i ; begin
36211: LD_INT 0
36213: PPUSH
36214: PPUSH
// if BuildingStatus ( b ) = bs_build then
36215: LD_VAR 0 2
36219: PPUSH
36220: CALL_OW 461
36224: PUSH
36225: LD_INT 1
36227: EQUAL
36228: IFFALSE 36288
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36230: LD_VAR 0 1
36234: PPUSH
36235: LD_STRING h
36237: PUSH
36238: LD_VAR 0 2
36242: PPUSH
36243: CALL_OW 250
36247: PUSH
36248: LD_VAR 0 2
36252: PPUSH
36253: CALL_OW 251
36257: PUSH
36258: LD_VAR 0 2
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: LD_INT 0
36268: PUSH
36269: LD_INT 0
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: PUSH
36281: EMPTY
36282: LIST
36283: PPUSH
36284: CALL_OW 446
// end ;
36288: LD_VAR 0 3
36292: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36293: LD_INT 0
36295: PPUSH
36296: PPUSH
36297: PPUSH
36298: PPUSH
36299: PPUSH
36300: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
36301: LD_VAR 0 1
36305: NOT
36306: PUSH
36307: LD_VAR 0 1
36311: PPUSH
36312: CALL_OW 263
36316: PUSH
36317: LD_INT 2
36319: EQUAL
36320: NOT
36321: OR
36322: IFFALSE 36326
// exit ;
36324: GO 36642
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36326: LD_ADDR_VAR 0 6
36330: PUSH
36331: LD_INT 22
36333: PUSH
36334: LD_VAR 0 1
36338: PPUSH
36339: CALL_OW 255
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 2
36350: PUSH
36351: LD_INT 30
36353: PUSH
36354: LD_INT 36
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 34
36363: PUSH
36364: LD_INT 31
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: LIST
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PPUSH
36380: CALL_OW 69
36384: ST_TO_ADDR
// if not tmp then
36385: LD_VAR 0 6
36389: NOT
36390: IFFALSE 36394
// exit ;
36392: GO 36642
// result := [ ] ;
36394: LD_ADDR_VAR 0 2
36398: PUSH
36399: EMPTY
36400: ST_TO_ADDR
// for i in tmp do
36401: LD_ADDR_VAR 0 3
36405: PUSH
36406: LD_VAR 0 6
36410: PUSH
36411: FOR_IN
36412: IFFALSE 36483
// begin t := UnitsInside ( i ) ;
36414: LD_ADDR_VAR 0 4
36418: PUSH
36419: LD_VAR 0 3
36423: PPUSH
36424: CALL_OW 313
36428: ST_TO_ADDR
// if t then
36429: LD_VAR 0 4
36433: IFFALSE 36481
// for j in t do
36435: LD_ADDR_VAR 0 7
36439: PUSH
36440: LD_VAR 0 4
36444: PUSH
36445: FOR_IN
36446: IFFALSE 36479
// result := Insert ( result , result + 1 , j ) ;
36448: LD_ADDR_VAR 0 2
36452: PUSH
36453: LD_VAR 0 2
36457: PPUSH
36458: LD_VAR 0 2
36462: PUSH
36463: LD_INT 1
36465: PLUS
36466: PPUSH
36467: LD_VAR 0 7
36471: PPUSH
36472: CALL_OW 2
36476: ST_TO_ADDR
36477: GO 36445
36479: POP
36480: POP
// end ;
36481: GO 36411
36483: POP
36484: POP
// if not result then
36485: LD_VAR 0 2
36489: NOT
36490: IFFALSE 36494
// exit ;
36492: GO 36642
// mech := result [ 1 ] ;
36494: LD_ADDR_VAR 0 5
36498: PUSH
36499: LD_VAR 0 2
36503: PUSH
36504: LD_INT 1
36506: ARRAY
36507: ST_TO_ADDR
// if result > 1 then
36508: LD_VAR 0 2
36512: PUSH
36513: LD_INT 1
36515: GREATER
36516: IFFALSE 36628
// for i = 2 to result do
36518: LD_ADDR_VAR 0 3
36522: PUSH
36523: DOUBLE
36524: LD_INT 2
36526: DEC
36527: ST_TO_ADDR
36528: LD_VAR 0 2
36532: PUSH
36533: FOR_TO
36534: IFFALSE 36626
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36536: LD_ADDR_VAR 0 4
36540: PUSH
36541: LD_VAR 0 2
36545: PUSH
36546: LD_VAR 0 3
36550: ARRAY
36551: PPUSH
36552: LD_INT 3
36554: PPUSH
36555: CALL_OW 259
36559: PUSH
36560: LD_VAR 0 2
36564: PUSH
36565: LD_VAR 0 3
36569: ARRAY
36570: PPUSH
36571: CALL_OW 432
36575: MINUS
36576: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36577: LD_VAR 0 4
36581: PUSH
36582: LD_VAR 0 5
36586: PPUSH
36587: LD_INT 3
36589: PPUSH
36590: CALL_OW 259
36594: PUSH
36595: LD_VAR 0 5
36599: PPUSH
36600: CALL_OW 432
36604: MINUS
36605: GREATEREQUAL
36606: IFFALSE 36624
// mech := result [ i ] ;
36608: LD_ADDR_VAR 0 5
36612: PUSH
36613: LD_VAR 0 2
36617: PUSH
36618: LD_VAR 0 3
36622: ARRAY
36623: ST_TO_ADDR
// end ;
36624: GO 36533
36626: POP
36627: POP
// ComLinkTo ( vehicle , mech ) ;
36628: LD_VAR 0 1
36632: PPUSH
36633: LD_VAR 0 5
36637: PPUSH
36638: CALL_OW 135
// end ;
36642: LD_VAR 0 2
36646: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36647: LD_INT 0
36649: PPUSH
36650: PPUSH
36651: PPUSH
36652: PPUSH
36653: PPUSH
36654: PPUSH
36655: PPUSH
36656: PPUSH
36657: PPUSH
36658: PPUSH
36659: PPUSH
36660: PPUSH
36661: PPUSH
// result := [ ] ;
36662: LD_ADDR_VAR 0 7
36666: PUSH
36667: EMPTY
36668: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36669: LD_VAR 0 1
36673: PPUSH
36674: CALL_OW 266
36678: PUSH
36679: LD_INT 0
36681: PUSH
36682: LD_INT 1
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: IN
36689: NOT
36690: IFFALSE 36694
// exit ;
36692: GO 38325
// if name then
36694: LD_VAR 0 3
36698: IFFALSE 36714
// SetBName ( base_dep , name ) ;
36700: LD_VAR 0 1
36704: PPUSH
36705: LD_VAR 0 3
36709: PPUSH
36710: CALL_OW 500
// base := GetBase ( base_dep ) ;
36714: LD_ADDR_VAR 0 15
36718: PUSH
36719: LD_VAR 0 1
36723: PPUSH
36724: CALL_OW 274
36728: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36729: LD_ADDR_VAR 0 16
36733: PUSH
36734: LD_VAR 0 1
36738: PPUSH
36739: CALL_OW 255
36743: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36744: LD_ADDR_VAR 0 17
36748: PUSH
36749: LD_VAR 0 1
36753: PPUSH
36754: CALL_OW 248
36758: ST_TO_ADDR
// if sources then
36759: LD_VAR 0 5
36763: IFFALSE 36810
// for i = 1 to 3 do
36765: LD_ADDR_VAR 0 8
36769: PUSH
36770: DOUBLE
36771: LD_INT 1
36773: DEC
36774: ST_TO_ADDR
36775: LD_INT 3
36777: PUSH
36778: FOR_TO
36779: IFFALSE 36808
// AddResourceType ( base , i , sources [ i ] ) ;
36781: LD_VAR 0 15
36785: PPUSH
36786: LD_VAR 0 8
36790: PPUSH
36791: LD_VAR 0 5
36795: PUSH
36796: LD_VAR 0 8
36800: ARRAY
36801: PPUSH
36802: CALL_OW 276
36806: GO 36778
36808: POP
36809: POP
// buildings := GetBaseBuildings ( base , area ) ;
36810: LD_ADDR_VAR 0 18
36814: PUSH
36815: LD_VAR 0 15
36819: PPUSH
36820: LD_VAR 0 2
36824: PPUSH
36825: CALL 36102 0 2
36829: ST_TO_ADDR
// InitHc ;
36830: CALL_OW 19
// InitUc ;
36834: CALL_OW 18
// uc_side := side ;
36838: LD_ADDR_OWVAR 20
36842: PUSH
36843: LD_VAR 0 16
36847: ST_TO_ADDR
// uc_nation := nation ;
36848: LD_ADDR_OWVAR 21
36852: PUSH
36853: LD_VAR 0 17
36857: ST_TO_ADDR
// if buildings then
36858: LD_VAR 0 18
36862: IFFALSE 38184
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36864: LD_ADDR_VAR 0 19
36868: PUSH
36869: LD_VAR 0 18
36873: PPUSH
36874: LD_INT 2
36876: PUSH
36877: LD_INT 30
36879: PUSH
36880: LD_INT 29
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 30
36889: PUSH
36890: LD_INT 30
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: LIST
36901: PPUSH
36902: CALL_OW 72
36906: ST_TO_ADDR
// if tmp then
36907: LD_VAR 0 19
36911: IFFALSE 36959
// for i in tmp do
36913: LD_ADDR_VAR 0 8
36917: PUSH
36918: LD_VAR 0 19
36922: PUSH
36923: FOR_IN
36924: IFFALSE 36957
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36926: LD_VAR 0 8
36930: PPUSH
36931: CALL_OW 250
36935: PPUSH
36936: LD_VAR 0 8
36940: PPUSH
36941: CALL_OW 251
36945: PPUSH
36946: LD_VAR 0 16
36950: PPUSH
36951: CALL_OW 441
36955: GO 36923
36957: POP
36958: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36959: LD_VAR 0 18
36963: PPUSH
36964: LD_INT 2
36966: PUSH
36967: LD_INT 30
36969: PUSH
36970: LD_INT 32
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 30
36979: PUSH
36980: LD_INT 33
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: LIST
36991: PPUSH
36992: CALL_OW 72
36996: IFFALSE 37084
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36998: LD_ADDR_VAR 0 8
37002: PUSH
37003: LD_VAR 0 18
37007: PPUSH
37008: LD_INT 2
37010: PUSH
37011: LD_INT 30
37013: PUSH
37014: LD_INT 32
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 30
37023: PUSH
37024: LD_INT 33
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: LIST
37035: PPUSH
37036: CALL_OW 72
37040: PUSH
37041: FOR_IN
37042: IFFALSE 37082
// begin if not GetBWeapon ( i ) then
37044: LD_VAR 0 8
37048: PPUSH
37049: CALL_OW 269
37053: NOT
37054: IFFALSE 37080
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37056: LD_VAR 0 8
37060: PPUSH
37061: LD_VAR 0 8
37065: PPUSH
37066: LD_VAR 0 2
37070: PPUSH
37071: CALL 38330 0 2
37075: PPUSH
37076: CALL_OW 431
// end ;
37080: GO 37041
37082: POP
37083: POP
// end ; for i = 1 to personel do
37084: LD_ADDR_VAR 0 8
37088: PUSH
37089: DOUBLE
37090: LD_INT 1
37092: DEC
37093: ST_TO_ADDR
37094: LD_VAR 0 6
37098: PUSH
37099: FOR_TO
37100: IFFALSE 38164
// begin if i > 4 then
37102: LD_VAR 0 8
37106: PUSH
37107: LD_INT 4
37109: GREATER
37110: IFFALSE 37114
// break ;
37112: GO 38164
// case i of 1 :
37114: LD_VAR 0 8
37118: PUSH
37119: LD_INT 1
37121: DOUBLE
37122: EQUAL
37123: IFTRUE 37127
37125: GO 37207
37127: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37128: LD_ADDR_VAR 0 12
37132: PUSH
37133: LD_VAR 0 18
37137: PPUSH
37138: LD_INT 22
37140: PUSH
37141: LD_VAR 0 16
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 58
37152: PUSH
37153: EMPTY
37154: LIST
37155: PUSH
37156: LD_INT 2
37158: PUSH
37159: LD_INT 30
37161: PUSH
37162: LD_INT 32
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 30
37171: PUSH
37172: LD_INT 4
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 30
37181: PUSH
37182: LD_INT 5
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: LIST
37199: PPUSH
37200: CALL_OW 72
37204: ST_TO_ADDR
37205: GO 37429
37207: LD_INT 2
37209: DOUBLE
37210: EQUAL
37211: IFTRUE 37215
37213: GO 37277
37215: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37216: LD_ADDR_VAR 0 12
37220: PUSH
37221: LD_VAR 0 18
37225: PPUSH
37226: LD_INT 22
37228: PUSH
37229: LD_VAR 0 16
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 2
37240: PUSH
37241: LD_INT 30
37243: PUSH
37244: LD_INT 0
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 30
37253: PUSH
37254: LD_INT 1
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: LIST
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PPUSH
37270: CALL_OW 72
37274: ST_TO_ADDR
37275: GO 37429
37277: LD_INT 3
37279: DOUBLE
37280: EQUAL
37281: IFTRUE 37285
37283: GO 37347
37285: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37286: LD_ADDR_VAR 0 12
37290: PUSH
37291: LD_VAR 0 18
37295: PPUSH
37296: LD_INT 22
37298: PUSH
37299: LD_VAR 0 16
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 2
37310: PUSH
37311: LD_INT 30
37313: PUSH
37314: LD_INT 2
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 30
37323: PUSH
37324: LD_INT 3
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: LIST
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PPUSH
37340: CALL_OW 72
37344: ST_TO_ADDR
37345: GO 37429
37347: LD_INT 4
37349: DOUBLE
37350: EQUAL
37351: IFTRUE 37355
37353: GO 37428
37355: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37356: LD_ADDR_VAR 0 12
37360: PUSH
37361: LD_VAR 0 18
37365: PPUSH
37366: LD_INT 22
37368: PUSH
37369: LD_VAR 0 16
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 2
37380: PUSH
37381: LD_INT 30
37383: PUSH
37384: LD_INT 6
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 30
37393: PUSH
37394: LD_INT 7
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 30
37403: PUSH
37404: LD_INT 8
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PPUSH
37421: CALL_OW 72
37425: ST_TO_ADDR
37426: GO 37429
37428: POP
// if i = 1 then
37429: LD_VAR 0 8
37433: PUSH
37434: LD_INT 1
37436: EQUAL
37437: IFFALSE 37548
// begin tmp := [ ] ;
37439: LD_ADDR_VAR 0 19
37443: PUSH
37444: EMPTY
37445: ST_TO_ADDR
// for j in f do
37446: LD_ADDR_VAR 0 9
37450: PUSH
37451: LD_VAR 0 12
37455: PUSH
37456: FOR_IN
37457: IFFALSE 37530
// if GetBType ( j ) = b_bunker then
37459: LD_VAR 0 9
37463: PPUSH
37464: CALL_OW 266
37468: PUSH
37469: LD_INT 32
37471: EQUAL
37472: IFFALSE 37499
// tmp := Insert ( tmp , 1 , j ) else
37474: LD_ADDR_VAR 0 19
37478: PUSH
37479: LD_VAR 0 19
37483: PPUSH
37484: LD_INT 1
37486: PPUSH
37487: LD_VAR 0 9
37491: PPUSH
37492: CALL_OW 2
37496: ST_TO_ADDR
37497: GO 37528
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37499: LD_ADDR_VAR 0 19
37503: PUSH
37504: LD_VAR 0 19
37508: PPUSH
37509: LD_VAR 0 19
37513: PUSH
37514: LD_INT 1
37516: PLUS
37517: PPUSH
37518: LD_VAR 0 9
37522: PPUSH
37523: CALL_OW 2
37527: ST_TO_ADDR
37528: GO 37456
37530: POP
37531: POP
// if tmp then
37532: LD_VAR 0 19
37536: IFFALSE 37548
// f := tmp ;
37538: LD_ADDR_VAR 0 12
37542: PUSH
37543: LD_VAR 0 19
37547: ST_TO_ADDR
// end ; x := personel [ i ] ;
37548: LD_ADDR_VAR 0 13
37552: PUSH
37553: LD_VAR 0 6
37557: PUSH
37558: LD_VAR 0 8
37562: ARRAY
37563: ST_TO_ADDR
// if x = - 1 then
37564: LD_VAR 0 13
37568: PUSH
37569: LD_INT 1
37571: NEG
37572: EQUAL
37573: IFFALSE 37782
// begin for j in f do
37575: LD_ADDR_VAR 0 9
37579: PUSH
37580: LD_VAR 0 12
37584: PUSH
37585: FOR_IN
37586: IFFALSE 37778
// repeat InitHc ;
37588: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37592: LD_VAR 0 9
37596: PPUSH
37597: CALL_OW 266
37601: PUSH
37602: LD_INT 5
37604: EQUAL
37605: IFFALSE 37675
// begin if UnitsInside ( j ) < 3 then
37607: LD_VAR 0 9
37611: PPUSH
37612: CALL_OW 313
37616: PUSH
37617: LD_INT 3
37619: LESS
37620: IFFALSE 37656
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37622: LD_INT 0
37624: PPUSH
37625: LD_INT 5
37627: PUSH
37628: LD_INT 8
37630: PUSH
37631: LD_INT 9
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: LIST
37638: PUSH
37639: LD_VAR 0 17
37643: ARRAY
37644: PPUSH
37645: LD_VAR 0 4
37649: PPUSH
37650: CALL_OW 380
37654: GO 37673
// PrepareHuman ( false , i , skill ) ;
37656: LD_INT 0
37658: PPUSH
37659: LD_VAR 0 8
37663: PPUSH
37664: LD_VAR 0 4
37668: PPUSH
37669: CALL_OW 380
// end else
37673: GO 37692
// PrepareHuman ( false , i , skill ) ;
37675: LD_INT 0
37677: PPUSH
37678: LD_VAR 0 8
37682: PPUSH
37683: LD_VAR 0 4
37687: PPUSH
37688: CALL_OW 380
// un := CreateHuman ;
37692: LD_ADDR_VAR 0 14
37696: PUSH
37697: CALL_OW 44
37701: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37702: LD_ADDR_VAR 0 7
37706: PUSH
37707: LD_VAR 0 7
37711: PPUSH
37712: LD_INT 1
37714: PPUSH
37715: LD_VAR 0 14
37719: PPUSH
37720: CALL_OW 2
37724: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37725: LD_VAR 0 14
37729: PPUSH
37730: LD_VAR 0 9
37734: PPUSH
37735: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37739: LD_VAR 0 9
37743: PPUSH
37744: CALL_OW 313
37748: PUSH
37749: LD_INT 6
37751: EQUAL
37752: PUSH
37753: LD_VAR 0 9
37757: PPUSH
37758: CALL_OW 266
37762: PUSH
37763: LD_INT 32
37765: PUSH
37766: LD_INT 31
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: IN
37773: OR
37774: IFFALSE 37588
37776: GO 37585
37778: POP
37779: POP
// end else
37780: GO 38162
// for j = 1 to x do
37782: LD_ADDR_VAR 0 9
37786: PUSH
37787: DOUBLE
37788: LD_INT 1
37790: DEC
37791: ST_TO_ADDR
37792: LD_VAR 0 13
37796: PUSH
37797: FOR_TO
37798: IFFALSE 38160
// begin InitHc ;
37800: CALL_OW 19
// if not f then
37804: LD_VAR 0 12
37808: NOT
37809: IFFALSE 37898
// begin PrepareHuman ( false , i , skill ) ;
37811: LD_INT 0
37813: PPUSH
37814: LD_VAR 0 8
37818: PPUSH
37819: LD_VAR 0 4
37823: PPUSH
37824: CALL_OW 380
// un := CreateHuman ;
37828: LD_ADDR_VAR 0 14
37832: PUSH
37833: CALL_OW 44
37837: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37838: LD_ADDR_VAR 0 7
37842: PUSH
37843: LD_VAR 0 7
37847: PPUSH
37848: LD_INT 1
37850: PPUSH
37851: LD_VAR 0 14
37855: PPUSH
37856: CALL_OW 2
37860: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37861: LD_VAR 0 14
37865: PPUSH
37866: LD_VAR 0 1
37870: PPUSH
37871: CALL_OW 250
37875: PPUSH
37876: LD_VAR 0 1
37880: PPUSH
37881: CALL_OW 251
37885: PPUSH
37886: LD_INT 10
37888: PPUSH
37889: LD_INT 0
37891: PPUSH
37892: CALL_OW 50
// continue ;
37896: GO 37797
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37898: LD_VAR 0 12
37902: PUSH
37903: LD_INT 1
37905: ARRAY
37906: PPUSH
37907: CALL_OW 313
37911: PUSH
37912: LD_VAR 0 12
37916: PUSH
37917: LD_INT 1
37919: ARRAY
37920: PPUSH
37921: CALL_OW 266
37925: PUSH
37926: LD_INT 32
37928: PUSH
37929: LD_INT 31
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: IN
37936: AND
37937: PUSH
37938: LD_VAR 0 12
37942: PUSH
37943: LD_INT 1
37945: ARRAY
37946: PPUSH
37947: CALL_OW 313
37951: PUSH
37952: LD_INT 6
37954: EQUAL
37955: OR
37956: IFFALSE 37976
// f := Delete ( f , 1 ) ;
37958: LD_ADDR_VAR 0 12
37962: PUSH
37963: LD_VAR 0 12
37967: PPUSH
37968: LD_INT 1
37970: PPUSH
37971: CALL_OW 3
37975: ST_TO_ADDR
// if not f then
37976: LD_VAR 0 12
37980: NOT
37981: IFFALSE 37999
// begin x := x + 2 ;
37983: LD_ADDR_VAR 0 13
37987: PUSH
37988: LD_VAR 0 13
37992: PUSH
37993: LD_INT 2
37995: PLUS
37996: ST_TO_ADDR
// continue ;
37997: GO 37797
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37999: LD_VAR 0 12
38003: PUSH
38004: LD_INT 1
38006: ARRAY
38007: PPUSH
38008: CALL_OW 266
38012: PUSH
38013: LD_INT 5
38015: EQUAL
38016: IFFALSE 38090
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38018: LD_VAR 0 12
38022: PUSH
38023: LD_INT 1
38025: ARRAY
38026: PPUSH
38027: CALL_OW 313
38031: PUSH
38032: LD_INT 3
38034: LESS
38035: IFFALSE 38071
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38037: LD_INT 0
38039: PPUSH
38040: LD_INT 5
38042: PUSH
38043: LD_INT 8
38045: PUSH
38046: LD_INT 9
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: LIST
38053: PUSH
38054: LD_VAR 0 17
38058: ARRAY
38059: PPUSH
38060: LD_VAR 0 4
38064: PPUSH
38065: CALL_OW 380
38069: GO 38088
// PrepareHuman ( false , i , skill ) ;
38071: LD_INT 0
38073: PPUSH
38074: LD_VAR 0 8
38078: PPUSH
38079: LD_VAR 0 4
38083: PPUSH
38084: CALL_OW 380
// end else
38088: GO 38107
// PrepareHuman ( false , i , skill ) ;
38090: LD_INT 0
38092: PPUSH
38093: LD_VAR 0 8
38097: PPUSH
38098: LD_VAR 0 4
38102: PPUSH
38103: CALL_OW 380
// un := CreateHuman ;
38107: LD_ADDR_VAR 0 14
38111: PUSH
38112: CALL_OW 44
38116: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38117: LD_ADDR_VAR 0 7
38121: PUSH
38122: LD_VAR 0 7
38126: PPUSH
38127: LD_INT 1
38129: PPUSH
38130: LD_VAR 0 14
38134: PPUSH
38135: CALL_OW 2
38139: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38140: LD_VAR 0 14
38144: PPUSH
38145: LD_VAR 0 12
38149: PUSH
38150: LD_INT 1
38152: ARRAY
38153: PPUSH
38154: CALL_OW 52
// end ;
38158: GO 37797
38160: POP
38161: POP
// end ;
38162: GO 37099
38164: POP
38165: POP
// result := result ^ buildings ;
38166: LD_ADDR_VAR 0 7
38170: PUSH
38171: LD_VAR 0 7
38175: PUSH
38176: LD_VAR 0 18
38180: ADD
38181: ST_TO_ADDR
// end else
38182: GO 38325
// begin for i = 1 to personel do
38184: LD_ADDR_VAR 0 8
38188: PUSH
38189: DOUBLE
38190: LD_INT 1
38192: DEC
38193: ST_TO_ADDR
38194: LD_VAR 0 6
38198: PUSH
38199: FOR_TO
38200: IFFALSE 38323
// begin if i > 4 then
38202: LD_VAR 0 8
38206: PUSH
38207: LD_INT 4
38209: GREATER
38210: IFFALSE 38214
// break ;
38212: GO 38323
// x := personel [ i ] ;
38214: LD_ADDR_VAR 0 13
38218: PUSH
38219: LD_VAR 0 6
38223: PUSH
38224: LD_VAR 0 8
38228: ARRAY
38229: ST_TO_ADDR
// if x = - 1 then
38230: LD_VAR 0 13
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: EQUAL
38239: IFFALSE 38243
// continue ;
38241: GO 38199
// PrepareHuman ( false , i , skill ) ;
38243: LD_INT 0
38245: PPUSH
38246: LD_VAR 0 8
38250: PPUSH
38251: LD_VAR 0 4
38255: PPUSH
38256: CALL_OW 380
// un := CreateHuman ;
38260: LD_ADDR_VAR 0 14
38264: PUSH
38265: CALL_OW 44
38269: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38270: LD_VAR 0 14
38274: PPUSH
38275: LD_VAR 0 1
38279: PPUSH
38280: CALL_OW 250
38284: PPUSH
38285: LD_VAR 0 1
38289: PPUSH
38290: CALL_OW 251
38294: PPUSH
38295: LD_INT 10
38297: PPUSH
38298: LD_INT 0
38300: PPUSH
38301: CALL_OW 50
// result := result ^ un ;
38305: LD_ADDR_VAR 0 7
38309: PUSH
38310: LD_VAR 0 7
38314: PUSH
38315: LD_VAR 0 14
38319: ADD
38320: ST_TO_ADDR
// end ;
38321: GO 38199
38323: POP
38324: POP
// end ; end ;
38325: LD_VAR 0 7
38329: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38330: LD_INT 0
38332: PPUSH
38333: PPUSH
38334: PPUSH
38335: PPUSH
38336: PPUSH
38337: PPUSH
38338: PPUSH
38339: PPUSH
38340: PPUSH
38341: PPUSH
38342: PPUSH
38343: PPUSH
38344: PPUSH
38345: PPUSH
38346: PPUSH
38347: PPUSH
// result := false ;
38348: LD_ADDR_VAR 0 3
38352: PUSH
38353: LD_INT 0
38355: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38356: LD_VAR 0 1
38360: NOT
38361: PUSH
38362: LD_VAR 0 1
38366: PPUSH
38367: CALL_OW 266
38371: PUSH
38372: LD_INT 32
38374: PUSH
38375: LD_INT 33
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: IN
38382: NOT
38383: OR
38384: IFFALSE 38388
// exit ;
38386: GO 39524
// nat := GetNation ( tower ) ;
38388: LD_ADDR_VAR 0 12
38392: PUSH
38393: LD_VAR 0 1
38397: PPUSH
38398: CALL_OW 248
38402: ST_TO_ADDR
// side := GetSide ( tower ) ;
38403: LD_ADDR_VAR 0 16
38407: PUSH
38408: LD_VAR 0 1
38412: PPUSH
38413: CALL_OW 255
38417: ST_TO_ADDR
// x := GetX ( tower ) ;
38418: LD_ADDR_VAR 0 10
38422: PUSH
38423: LD_VAR 0 1
38427: PPUSH
38428: CALL_OW 250
38432: ST_TO_ADDR
// y := GetY ( tower ) ;
38433: LD_ADDR_VAR 0 11
38437: PUSH
38438: LD_VAR 0 1
38442: PPUSH
38443: CALL_OW 251
38447: ST_TO_ADDR
// if not x or not y then
38448: LD_VAR 0 10
38452: NOT
38453: PUSH
38454: LD_VAR 0 11
38458: NOT
38459: OR
38460: IFFALSE 38464
// exit ;
38462: GO 39524
// weapon := 0 ;
38464: LD_ADDR_VAR 0 18
38468: PUSH
38469: LD_INT 0
38471: ST_TO_ADDR
// fac_list := [ ] ;
38472: LD_ADDR_VAR 0 17
38476: PUSH
38477: EMPTY
38478: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
38479: LD_ADDR_VAR 0 6
38483: PUSH
38484: LD_VAR 0 1
38488: PPUSH
38489: CALL_OW 274
38493: PPUSH
38494: LD_VAR 0 2
38498: PPUSH
38499: CALL 36102 0 2
38503: PPUSH
38504: LD_INT 30
38506: PUSH
38507: LD_INT 3
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PPUSH
38514: CALL_OW 72
38518: ST_TO_ADDR
// if not factories then
38519: LD_VAR 0 6
38523: NOT
38524: IFFALSE 38528
// exit ;
38526: GO 39524
// for i in factories do
38528: LD_ADDR_VAR 0 8
38532: PUSH
38533: LD_VAR 0 6
38537: PUSH
38538: FOR_IN
38539: IFFALSE 38564
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38541: LD_ADDR_VAR 0 17
38545: PUSH
38546: LD_VAR 0 17
38550: PUSH
38551: LD_VAR 0 8
38555: PPUSH
38556: CALL_OW 478
38560: UNION
38561: ST_TO_ADDR
38562: GO 38538
38564: POP
38565: POP
// if not fac_list then
38566: LD_VAR 0 17
38570: NOT
38571: IFFALSE 38575
// exit ;
38573: GO 39524
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38575: LD_ADDR_VAR 0 5
38579: PUSH
38580: LD_INT 4
38582: PUSH
38583: LD_INT 5
38585: PUSH
38586: LD_INT 9
38588: PUSH
38589: LD_INT 10
38591: PUSH
38592: LD_INT 6
38594: PUSH
38595: LD_INT 7
38597: PUSH
38598: LD_INT 11
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 27
38612: PUSH
38613: LD_INT 28
38615: PUSH
38616: LD_INT 26
38618: PUSH
38619: LD_INT 30
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 43
38630: PUSH
38631: LD_INT 44
38633: PUSH
38634: LD_INT 46
38636: PUSH
38637: LD_INT 45
38639: PUSH
38640: LD_INT 47
38642: PUSH
38643: LD_INT 49
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: LIST
38658: PUSH
38659: LD_VAR 0 12
38663: ARRAY
38664: ST_TO_ADDR
// for i in list do
38665: LD_ADDR_VAR 0 8
38669: PUSH
38670: LD_VAR 0 5
38674: PUSH
38675: FOR_IN
38676: IFFALSE 38709
// if not i in fac_list then
38678: LD_VAR 0 8
38682: PUSH
38683: LD_VAR 0 17
38687: IN
38688: NOT
38689: IFFALSE 38707
// list := list diff i ;
38691: LD_ADDR_VAR 0 5
38695: PUSH
38696: LD_VAR 0 5
38700: PUSH
38701: LD_VAR 0 8
38705: DIFF
38706: ST_TO_ADDR
38707: GO 38675
38709: POP
38710: POP
// if not list then
38711: LD_VAR 0 5
38715: NOT
38716: IFFALSE 38720
// exit ;
38718: GO 39524
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38720: LD_VAR 0 12
38724: PUSH
38725: LD_INT 3
38727: EQUAL
38728: PUSH
38729: LD_INT 49
38731: PUSH
38732: LD_VAR 0 5
38736: IN
38737: AND
38738: PUSH
38739: LD_INT 31
38741: PPUSH
38742: LD_VAR 0 16
38746: PPUSH
38747: CALL_OW 321
38751: PUSH
38752: LD_INT 2
38754: EQUAL
38755: AND
38756: IFFALSE 38816
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38758: LD_INT 22
38760: PUSH
38761: LD_VAR 0 16
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 35
38772: PUSH
38773: LD_INT 49
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 91
38782: PUSH
38783: LD_VAR 0 1
38787: PUSH
38788: LD_INT 10
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: LIST
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: LIST
38800: PPUSH
38801: CALL_OW 69
38805: NOT
38806: IFFALSE 38816
// weapon := ru_time_lapser ;
38808: LD_ADDR_VAR 0 18
38812: PUSH
38813: LD_INT 49
38815: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38816: LD_VAR 0 12
38820: PUSH
38821: LD_INT 1
38823: PUSH
38824: LD_INT 2
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: IN
38831: PUSH
38832: LD_INT 11
38834: PUSH
38835: LD_VAR 0 5
38839: IN
38840: PUSH
38841: LD_INT 30
38843: PUSH
38844: LD_VAR 0 5
38848: IN
38849: OR
38850: AND
38851: PUSH
38852: LD_INT 6
38854: PPUSH
38855: LD_VAR 0 16
38859: PPUSH
38860: CALL_OW 321
38864: PUSH
38865: LD_INT 2
38867: EQUAL
38868: AND
38869: IFFALSE 39034
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38871: LD_INT 22
38873: PUSH
38874: LD_VAR 0 16
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 2
38885: PUSH
38886: LD_INT 35
38888: PUSH
38889: LD_INT 11
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 35
38898: PUSH
38899: LD_INT 30
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 91
38913: PUSH
38914: LD_VAR 0 1
38918: PUSH
38919: LD_INT 18
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: LIST
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: LIST
38931: PPUSH
38932: CALL_OW 69
38936: NOT
38937: PUSH
38938: LD_INT 22
38940: PUSH
38941: LD_VAR 0 16
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 2
38952: PUSH
38953: LD_INT 30
38955: PUSH
38956: LD_INT 32
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 30
38965: PUSH
38966: LD_INT 33
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 91
38980: PUSH
38981: LD_VAR 0 1
38985: PUSH
38986: LD_INT 12
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: LIST
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: LIST
38998: PUSH
38999: EMPTY
39000: LIST
39001: PPUSH
39002: CALL_OW 69
39006: PUSH
39007: LD_INT 2
39009: GREATER
39010: AND
39011: IFFALSE 39034
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39013: LD_ADDR_VAR 0 18
39017: PUSH
39018: LD_INT 11
39020: PUSH
39021: LD_INT 30
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_VAR 0 12
39032: ARRAY
39033: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39034: LD_VAR 0 18
39038: NOT
39039: PUSH
39040: LD_INT 40
39042: PPUSH
39043: LD_VAR 0 16
39047: PPUSH
39048: CALL_OW 321
39052: PUSH
39053: LD_INT 2
39055: EQUAL
39056: AND
39057: PUSH
39058: LD_INT 7
39060: PUSH
39061: LD_VAR 0 5
39065: IN
39066: PUSH
39067: LD_INT 28
39069: PUSH
39070: LD_VAR 0 5
39074: IN
39075: OR
39076: PUSH
39077: LD_INT 45
39079: PUSH
39080: LD_VAR 0 5
39084: IN
39085: OR
39086: AND
39087: IFFALSE 39341
// begin hex := GetHexInfo ( x , y ) ;
39089: LD_ADDR_VAR 0 4
39093: PUSH
39094: LD_VAR 0 10
39098: PPUSH
39099: LD_VAR 0 11
39103: PPUSH
39104: CALL_OW 546
39108: ST_TO_ADDR
// if hex [ 1 ] then
39109: LD_VAR 0 4
39113: PUSH
39114: LD_INT 1
39116: ARRAY
39117: IFFALSE 39121
// exit ;
39119: GO 39524
// height := hex [ 2 ] ;
39121: LD_ADDR_VAR 0 15
39125: PUSH
39126: LD_VAR 0 4
39130: PUSH
39131: LD_INT 2
39133: ARRAY
39134: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39135: LD_ADDR_VAR 0 14
39139: PUSH
39140: LD_INT 0
39142: PUSH
39143: LD_INT 2
39145: PUSH
39146: LD_INT 3
39148: PUSH
39149: LD_INT 5
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: ST_TO_ADDR
// for i in tmp do
39158: LD_ADDR_VAR 0 8
39162: PUSH
39163: LD_VAR 0 14
39167: PUSH
39168: FOR_IN
39169: IFFALSE 39339
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39171: LD_ADDR_VAR 0 9
39175: PUSH
39176: LD_VAR 0 10
39180: PPUSH
39181: LD_VAR 0 8
39185: PPUSH
39186: LD_INT 5
39188: PPUSH
39189: CALL_OW 272
39193: PUSH
39194: LD_VAR 0 11
39198: PPUSH
39199: LD_VAR 0 8
39203: PPUSH
39204: LD_INT 5
39206: PPUSH
39207: CALL_OW 273
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39216: LD_VAR 0 9
39220: PUSH
39221: LD_INT 1
39223: ARRAY
39224: PPUSH
39225: LD_VAR 0 9
39229: PUSH
39230: LD_INT 2
39232: ARRAY
39233: PPUSH
39234: CALL_OW 488
39238: IFFALSE 39337
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39240: LD_ADDR_VAR 0 4
39244: PUSH
39245: LD_VAR 0 9
39249: PUSH
39250: LD_INT 1
39252: ARRAY
39253: PPUSH
39254: LD_VAR 0 9
39258: PUSH
39259: LD_INT 2
39261: ARRAY
39262: PPUSH
39263: CALL_OW 546
39267: ST_TO_ADDR
// if hex [ 1 ] then
39268: LD_VAR 0 4
39272: PUSH
39273: LD_INT 1
39275: ARRAY
39276: IFFALSE 39280
// continue ;
39278: GO 39168
// h := hex [ 2 ] ;
39280: LD_ADDR_VAR 0 13
39284: PUSH
39285: LD_VAR 0 4
39289: PUSH
39290: LD_INT 2
39292: ARRAY
39293: ST_TO_ADDR
// if h + 7 < height then
39294: LD_VAR 0 13
39298: PUSH
39299: LD_INT 7
39301: PLUS
39302: PUSH
39303: LD_VAR 0 15
39307: LESS
39308: IFFALSE 39337
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39310: LD_ADDR_VAR 0 18
39314: PUSH
39315: LD_INT 7
39317: PUSH
39318: LD_INT 28
39320: PUSH
39321: LD_INT 45
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: LIST
39328: PUSH
39329: LD_VAR 0 12
39333: ARRAY
39334: ST_TO_ADDR
// break ;
39335: GO 39339
// end ; end ; end ;
39337: GO 39168
39339: POP
39340: POP
// end ; if not weapon then
39341: LD_VAR 0 18
39345: NOT
39346: IFFALSE 39406
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39348: LD_ADDR_VAR 0 5
39352: PUSH
39353: LD_VAR 0 5
39357: PUSH
39358: LD_INT 11
39360: PUSH
39361: LD_INT 30
39363: PUSH
39364: LD_INT 49
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: LIST
39371: DIFF
39372: ST_TO_ADDR
// if not list then
39373: LD_VAR 0 5
39377: NOT
39378: IFFALSE 39382
// exit ;
39380: GO 39524
// weapon := list [ rand ( 1 , list ) ] ;
39382: LD_ADDR_VAR 0 18
39386: PUSH
39387: LD_VAR 0 5
39391: PUSH
39392: LD_INT 1
39394: PPUSH
39395: LD_VAR 0 5
39399: PPUSH
39400: CALL_OW 12
39404: ARRAY
39405: ST_TO_ADDR
// end ; if weapon then
39406: LD_VAR 0 18
39410: IFFALSE 39524
// begin tmp := CostOfWeapon ( weapon ) ;
39412: LD_ADDR_VAR 0 14
39416: PUSH
39417: LD_VAR 0 18
39421: PPUSH
39422: CALL_OW 451
39426: ST_TO_ADDR
// j := GetBase ( tower ) ;
39427: LD_ADDR_VAR 0 9
39431: PUSH
39432: LD_VAR 0 1
39436: PPUSH
39437: CALL_OW 274
39441: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39442: LD_VAR 0 9
39446: PPUSH
39447: LD_INT 1
39449: PPUSH
39450: CALL_OW 275
39454: PUSH
39455: LD_VAR 0 14
39459: PUSH
39460: LD_INT 1
39462: ARRAY
39463: GREATEREQUAL
39464: PUSH
39465: LD_VAR 0 9
39469: PPUSH
39470: LD_INT 2
39472: PPUSH
39473: CALL_OW 275
39477: PUSH
39478: LD_VAR 0 14
39482: PUSH
39483: LD_INT 2
39485: ARRAY
39486: GREATEREQUAL
39487: AND
39488: PUSH
39489: LD_VAR 0 9
39493: PPUSH
39494: LD_INT 3
39496: PPUSH
39497: CALL_OW 275
39501: PUSH
39502: LD_VAR 0 14
39506: PUSH
39507: LD_INT 3
39509: ARRAY
39510: GREATEREQUAL
39511: AND
39512: IFFALSE 39524
// result := weapon ;
39514: LD_ADDR_VAR 0 3
39518: PUSH
39519: LD_VAR 0 18
39523: ST_TO_ADDR
// end ; end ;
39524: LD_VAR 0 3
39528: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39529: LD_INT 0
39531: PPUSH
39532: PPUSH
// result := true ;
39533: LD_ADDR_VAR 0 3
39537: PUSH
39538: LD_INT 1
39540: ST_TO_ADDR
// if array1 = array2 then
39541: LD_VAR 0 1
39545: PUSH
39546: LD_VAR 0 2
39550: EQUAL
39551: IFFALSE 39611
// begin for i = 1 to array1 do
39553: LD_ADDR_VAR 0 4
39557: PUSH
39558: DOUBLE
39559: LD_INT 1
39561: DEC
39562: ST_TO_ADDR
39563: LD_VAR 0 1
39567: PUSH
39568: FOR_TO
39569: IFFALSE 39607
// if array1 [ i ] <> array2 [ i ] then
39571: LD_VAR 0 1
39575: PUSH
39576: LD_VAR 0 4
39580: ARRAY
39581: PUSH
39582: LD_VAR 0 2
39586: PUSH
39587: LD_VAR 0 4
39591: ARRAY
39592: NONEQUAL
39593: IFFALSE 39605
// begin result := false ;
39595: LD_ADDR_VAR 0 3
39599: PUSH
39600: LD_INT 0
39602: ST_TO_ADDR
// break ;
39603: GO 39607
// end ;
39605: GO 39568
39607: POP
39608: POP
// end else
39609: GO 39619
// result := false ;
39611: LD_ADDR_VAR 0 3
39615: PUSH
39616: LD_INT 0
39618: ST_TO_ADDR
// end ;
39619: LD_VAR 0 3
39623: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39624: LD_INT 0
39626: PPUSH
39627: PPUSH
39628: PPUSH
// pom := GetBase ( fac ) ;
39629: LD_ADDR_VAR 0 5
39633: PUSH
39634: LD_VAR 0 1
39638: PPUSH
39639: CALL_OW 274
39643: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39644: LD_ADDR_VAR 0 4
39648: PUSH
39649: LD_VAR 0 2
39653: PUSH
39654: LD_INT 1
39656: ARRAY
39657: PPUSH
39658: LD_VAR 0 2
39662: PUSH
39663: LD_INT 2
39665: ARRAY
39666: PPUSH
39667: LD_VAR 0 2
39671: PUSH
39672: LD_INT 3
39674: ARRAY
39675: PPUSH
39676: LD_VAR 0 2
39680: PUSH
39681: LD_INT 4
39683: ARRAY
39684: PPUSH
39685: CALL_OW 449
39689: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39690: LD_ADDR_VAR 0 3
39694: PUSH
39695: LD_VAR 0 5
39699: PPUSH
39700: LD_INT 1
39702: PPUSH
39703: CALL_OW 275
39707: PUSH
39708: LD_VAR 0 4
39712: PUSH
39713: LD_INT 1
39715: ARRAY
39716: GREATEREQUAL
39717: PUSH
39718: LD_VAR 0 5
39722: PPUSH
39723: LD_INT 2
39725: PPUSH
39726: CALL_OW 275
39730: PUSH
39731: LD_VAR 0 4
39735: PUSH
39736: LD_INT 2
39738: ARRAY
39739: GREATEREQUAL
39740: AND
39741: PUSH
39742: LD_VAR 0 5
39746: PPUSH
39747: LD_INT 3
39749: PPUSH
39750: CALL_OW 275
39754: PUSH
39755: LD_VAR 0 4
39759: PUSH
39760: LD_INT 3
39762: ARRAY
39763: GREATEREQUAL
39764: AND
39765: ST_TO_ADDR
// end ;
39766: LD_VAR 0 3
39770: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39771: LD_INT 0
39773: PPUSH
39774: PPUSH
39775: PPUSH
39776: PPUSH
// pom := GetBase ( building ) ;
39777: LD_ADDR_VAR 0 3
39781: PUSH
39782: LD_VAR 0 1
39786: PPUSH
39787: CALL_OW 274
39791: ST_TO_ADDR
// if not pom then
39792: LD_VAR 0 3
39796: NOT
39797: IFFALSE 39801
// exit ;
39799: GO 39971
// btype := GetBType ( building ) ;
39801: LD_ADDR_VAR 0 5
39805: PUSH
39806: LD_VAR 0 1
39810: PPUSH
39811: CALL_OW 266
39815: ST_TO_ADDR
// if btype = b_armoury then
39816: LD_VAR 0 5
39820: PUSH
39821: LD_INT 4
39823: EQUAL
39824: IFFALSE 39834
// btype := b_barracks ;
39826: LD_ADDR_VAR 0 5
39830: PUSH
39831: LD_INT 5
39833: ST_TO_ADDR
// if btype = b_depot then
39834: LD_VAR 0 5
39838: PUSH
39839: LD_INT 0
39841: EQUAL
39842: IFFALSE 39852
// btype := b_warehouse ;
39844: LD_ADDR_VAR 0 5
39848: PUSH
39849: LD_INT 1
39851: ST_TO_ADDR
// if btype = b_workshop then
39852: LD_VAR 0 5
39856: PUSH
39857: LD_INT 2
39859: EQUAL
39860: IFFALSE 39870
// btype := b_factory ;
39862: LD_ADDR_VAR 0 5
39866: PUSH
39867: LD_INT 3
39869: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39870: LD_ADDR_VAR 0 4
39874: PUSH
39875: LD_VAR 0 5
39879: PPUSH
39880: LD_VAR 0 1
39884: PPUSH
39885: CALL_OW 248
39889: PPUSH
39890: CALL_OW 450
39894: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39895: LD_ADDR_VAR 0 2
39899: PUSH
39900: LD_VAR 0 3
39904: PPUSH
39905: LD_INT 1
39907: PPUSH
39908: CALL_OW 275
39912: PUSH
39913: LD_VAR 0 4
39917: PUSH
39918: LD_INT 1
39920: ARRAY
39921: GREATEREQUAL
39922: PUSH
39923: LD_VAR 0 3
39927: PPUSH
39928: LD_INT 2
39930: PPUSH
39931: CALL_OW 275
39935: PUSH
39936: LD_VAR 0 4
39940: PUSH
39941: LD_INT 2
39943: ARRAY
39944: GREATEREQUAL
39945: AND
39946: PUSH
39947: LD_VAR 0 3
39951: PPUSH
39952: LD_INT 3
39954: PPUSH
39955: CALL_OW 275
39959: PUSH
39960: LD_VAR 0 4
39964: PUSH
39965: LD_INT 3
39967: ARRAY
39968: GREATEREQUAL
39969: AND
39970: ST_TO_ADDR
// end ;
39971: LD_VAR 0 2
39975: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39976: LD_INT 0
39978: PPUSH
39979: PPUSH
39980: PPUSH
// pom := GetBase ( building ) ;
39981: LD_ADDR_VAR 0 4
39985: PUSH
39986: LD_VAR 0 1
39990: PPUSH
39991: CALL_OW 274
39995: ST_TO_ADDR
// if not pom then
39996: LD_VAR 0 4
40000: NOT
40001: IFFALSE 40005
// exit ;
40003: GO 40106
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40005: LD_ADDR_VAR 0 5
40009: PUSH
40010: LD_VAR 0 2
40014: PPUSH
40015: LD_VAR 0 1
40019: PPUSH
40020: CALL_OW 248
40024: PPUSH
40025: CALL_OW 450
40029: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40030: LD_ADDR_VAR 0 3
40034: PUSH
40035: LD_VAR 0 4
40039: PPUSH
40040: LD_INT 1
40042: PPUSH
40043: CALL_OW 275
40047: PUSH
40048: LD_VAR 0 5
40052: PUSH
40053: LD_INT 1
40055: ARRAY
40056: GREATEREQUAL
40057: PUSH
40058: LD_VAR 0 4
40062: PPUSH
40063: LD_INT 2
40065: PPUSH
40066: CALL_OW 275
40070: PUSH
40071: LD_VAR 0 5
40075: PUSH
40076: LD_INT 2
40078: ARRAY
40079: GREATEREQUAL
40080: AND
40081: PUSH
40082: LD_VAR 0 4
40086: PPUSH
40087: LD_INT 3
40089: PPUSH
40090: CALL_OW 275
40094: PUSH
40095: LD_VAR 0 5
40099: PUSH
40100: LD_INT 3
40102: ARRAY
40103: GREATEREQUAL
40104: AND
40105: ST_TO_ADDR
// end ;
40106: LD_VAR 0 3
40110: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
40111: LD_INT 0
40113: PPUSH
40114: PPUSH
40115: PPUSH
40116: PPUSH
40117: PPUSH
40118: PPUSH
40119: PPUSH
40120: PPUSH
40121: PPUSH
40122: PPUSH
// result := false ;
40123: LD_ADDR_VAR 0 6
40127: PUSH
40128: LD_INT 0
40130: ST_TO_ADDR
// if not base or not btype or not x or not y then
40131: LD_VAR 0 1
40135: NOT
40136: PUSH
40137: LD_VAR 0 2
40141: NOT
40142: OR
40143: PUSH
40144: LD_VAR 0 3
40148: NOT
40149: OR
40150: PUSH
40151: LD_VAR 0 4
40155: NOT
40156: OR
40157: IFFALSE 40161
// exit ;
40159: GO 40770
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
40161: LD_ADDR_VAR 0 12
40165: PUSH
40166: LD_VAR 0 2
40170: PPUSH
40171: LD_VAR 0 3
40175: PPUSH
40176: LD_VAR 0 4
40180: PPUSH
40181: LD_VAR 0 5
40185: PPUSH
40186: LD_VAR 0 1
40190: PUSH
40191: LD_INT 1
40193: ARRAY
40194: PPUSH
40195: CALL_OW 248
40199: PPUSH
40200: LD_INT 0
40202: PPUSH
40203: CALL 41607 0 6
40207: ST_TO_ADDR
// if not hexes then
40208: LD_VAR 0 12
40212: NOT
40213: IFFALSE 40217
// exit ;
40215: GO 40770
// for i = 1 to hexes do
40217: LD_ADDR_VAR 0 7
40221: PUSH
40222: DOUBLE
40223: LD_INT 1
40225: DEC
40226: ST_TO_ADDR
40227: LD_VAR 0 12
40231: PUSH
40232: FOR_TO
40233: IFFALSE 40768
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40235: LD_ADDR_VAR 0 11
40239: PUSH
40240: LD_VAR 0 12
40244: PUSH
40245: LD_VAR 0 7
40249: ARRAY
40250: PUSH
40251: LD_INT 1
40253: ARRAY
40254: PPUSH
40255: LD_VAR 0 12
40259: PUSH
40260: LD_VAR 0 7
40264: ARRAY
40265: PUSH
40266: LD_INT 2
40268: ARRAY
40269: PPUSH
40270: CALL_OW 428
40274: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40275: LD_VAR 0 12
40279: PUSH
40280: LD_VAR 0 7
40284: ARRAY
40285: PUSH
40286: LD_INT 1
40288: ARRAY
40289: PPUSH
40290: LD_VAR 0 12
40294: PUSH
40295: LD_VAR 0 7
40299: ARRAY
40300: PUSH
40301: LD_INT 2
40303: ARRAY
40304: PPUSH
40305: CALL_OW 351
40309: PUSH
40310: LD_VAR 0 12
40314: PUSH
40315: LD_VAR 0 7
40319: ARRAY
40320: PUSH
40321: LD_INT 1
40323: ARRAY
40324: PPUSH
40325: LD_VAR 0 12
40329: PUSH
40330: LD_VAR 0 7
40334: ARRAY
40335: PUSH
40336: LD_INT 2
40338: ARRAY
40339: PPUSH
40340: CALL_OW 488
40344: NOT
40345: OR
40346: PUSH
40347: LD_VAR 0 11
40351: PPUSH
40352: CALL_OW 247
40356: PUSH
40357: LD_INT 3
40359: EQUAL
40360: OR
40361: IFFALSE 40367
// exit ;
40363: POP
40364: POP
40365: GO 40770
// if not tmp or not tmp in base then
40367: LD_VAR 0 11
40371: NOT
40372: PUSH
40373: LD_VAR 0 11
40377: PUSH
40378: LD_VAR 0 1
40382: IN
40383: NOT
40384: OR
40385: IFFALSE 40389
// continue ;
40387: GO 40232
// result := true ;
40389: LD_ADDR_VAR 0 6
40393: PUSH
40394: LD_INT 1
40396: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40397: LD_ADDR_VAR 0 15
40401: PUSH
40402: LD_VAR 0 1
40406: PPUSH
40407: LD_INT 22
40409: PUSH
40410: LD_VAR 0 11
40414: PPUSH
40415: CALL_OW 255
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 2
40426: PUSH
40427: LD_INT 30
40429: PUSH
40430: LD_INT 0
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 30
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: LIST
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PPUSH
40456: CALL_OW 72
40460: ST_TO_ADDR
// if dep then
40461: LD_VAR 0 15
40465: IFFALSE 40601
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40467: LD_ADDR_VAR 0 14
40471: PUSH
40472: LD_VAR 0 15
40476: PUSH
40477: LD_INT 1
40479: ARRAY
40480: PPUSH
40481: CALL_OW 250
40485: PPUSH
40486: LD_VAR 0 15
40490: PUSH
40491: LD_INT 1
40493: ARRAY
40494: PPUSH
40495: CALL_OW 254
40499: PPUSH
40500: LD_INT 5
40502: PPUSH
40503: CALL_OW 272
40507: PUSH
40508: LD_VAR 0 15
40512: PUSH
40513: LD_INT 1
40515: ARRAY
40516: PPUSH
40517: CALL_OW 251
40521: PPUSH
40522: LD_VAR 0 15
40526: PUSH
40527: LD_INT 1
40529: ARRAY
40530: PPUSH
40531: CALL_OW 254
40535: PPUSH
40536: LD_INT 5
40538: PPUSH
40539: CALL_OW 273
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40548: LD_VAR 0 14
40552: PUSH
40553: LD_INT 1
40555: ARRAY
40556: PPUSH
40557: LD_VAR 0 14
40561: PUSH
40562: LD_INT 2
40564: ARRAY
40565: PPUSH
40566: CALL_OW 488
40570: IFFALSE 40601
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40572: LD_VAR 0 11
40576: PPUSH
40577: LD_VAR 0 14
40581: PUSH
40582: LD_INT 1
40584: ARRAY
40585: PPUSH
40586: LD_VAR 0 14
40590: PUSH
40591: LD_INT 2
40593: ARRAY
40594: PPUSH
40595: CALL_OW 111
// continue ;
40599: GO 40232
// end ; end ; r := GetDir ( tmp ) ;
40601: LD_ADDR_VAR 0 13
40605: PUSH
40606: LD_VAR 0 11
40610: PPUSH
40611: CALL_OW 254
40615: ST_TO_ADDR
// if r = 5 then
40616: LD_VAR 0 13
40620: PUSH
40621: LD_INT 5
40623: EQUAL
40624: IFFALSE 40634
// r := 0 ;
40626: LD_ADDR_VAR 0 13
40630: PUSH
40631: LD_INT 0
40633: ST_TO_ADDR
// for j = r to 5 do
40634: LD_ADDR_VAR 0 8
40638: PUSH
40639: DOUBLE
40640: LD_VAR 0 13
40644: DEC
40645: ST_TO_ADDR
40646: LD_INT 5
40648: PUSH
40649: FOR_TO
40650: IFFALSE 40764
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40652: LD_ADDR_VAR 0 9
40656: PUSH
40657: LD_VAR 0 11
40661: PPUSH
40662: CALL_OW 250
40666: PPUSH
40667: LD_VAR 0 8
40671: PPUSH
40672: LD_INT 2
40674: PPUSH
40675: CALL_OW 272
40679: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40680: LD_ADDR_VAR 0 10
40684: PUSH
40685: LD_VAR 0 11
40689: PPUSH
40690: CALL_OW 251
40694: PPUSH
40695: LD_VAR 0 8
40699: PPUSH
40700: LD_INT 2
40702: PPUSH
40703: CALL_OW 273
40707: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40708: LD_VAR 0 9
40712: PPUSH
40713: LD_VAR 0 10
40717: PPUSH
40718: CALL_OW 488
40722: PUSH
40723: LD_VAR 0 9
40727: PPUSH
40728: LD_VAR 0 10
40732: PPUSH
40733: CALL_OW 428
40737: NOT
40738: AND
40739: IFFALSE 40762
// begin ComMoveXY ( tmp , _x , _y ) ;
40741: LD_VAR 0 11
40745: PPUSH
40746: LD_VAR 0 9
40750: PPUSH
40751: LD_VAR 0 10
40755: PPUSH
40756: CALL_OW 111
// break ;
40760: GO 40764
// end ; end ;
40762: GO 40649
40764: POP
40765: POP
// end ;
40766: GO 40232
40768: POP
40769: POP
// end ;
40770: LD_VAR 0 6
40774: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
40775: LD_INT 0
40777: PPUSH
40778: PPUSH
40779: PPUSH
40780: PPUSH
40781: PPUSH
40782: PPUSH
40783: PPUSH
40784: PPUSH
40785: PPUSH
40786: PPUSH
// result := false ;
40787: LD_ADDR_VAR 0 6
40791: PUSH
40792: LD_INT 0
40794: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40795: LD_VAR 0 1
40799: NOT
40800: PUSH
40801: LD_VAR 0 1
40805: PPUSH
40806: CALL_OW 266
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: LD_INT 1
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: IN
40821: NOT
40822: OR
40823: PUSH
40824: LD_VAR 0 2
40828: NOT
40829: OR
40830: PUSH
40831: LD_VAR 0 5
40835: PUSH
40836: LD_INT 0
40838: PUSH
40839: LD_INT 1
40841: PUSH
40842: LD_INT 2
40844: PUSH
40845: LD_INT 3
40847: PUSH
40848: LD_INT 4
40850: PUSH
40851: LD_INT 5
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: IN
40862: NOT
40863: OR
40864: PUSH
40865: LD_VAR 0 3
40869: PPUSH
40870: LD_VAR 0 4
40874: PPUSH
40875: CALL_OW 488
40879: NOT
40880: OR
40881: IFFALSE 40885
// exit ;
40883: GO 41602
// pom := GetBase ( depot ) ;
40885: LD_ADDR_VAR 0 10
40889: PUSH
40890: LD_VAR 0 1
40894: PPUSH
40895: CALL_OW 274
40899: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40900: LD_ADDR_VAR 0 11
40904: PUSH
40905: LD_VAR 0 2
40909: PPUSH
40910: LD_VAR 0 1
40914: PPUSH
40915: CALL_OW 248
40919: PPUSH
40920: CALL_OW 450
40924: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40925: LD_VAR 0 10
40929: PPUSH
40930: LD_INT 1
40932: PPUSH
40933: CALL_OW 275
40937: PUSH
40938: LD_VAR 0 11
40942: PUSH
40943: LD_INT 1
40945: ARRAY
40946: GREATEREQUAL
40947: PUSH
40948: LD_VAR 0 10
40952: PPUSH
40953: LD_INT 2
40955: PPUSH
40956: CALL_OW 275
40960: PUSH
40961: LD_VAR 0 11
40965: PUSH
40966: LD_INT 2
40968: ARRAY
40969: GREATEREQUAL
40970: AND
40971: PUSH
40972: LD_VAR 0 10
40976: PPUSH
40977: LD_INT 3
40979: PPUSH
40980: CALL_OW 275
40984: PUSH
40985: LD_VAR 0 11
40989: PUSH
40990: LD_INT 3
40992: ARRAY
40993: GREATEREQUAL
40994: AND
40995: NOT
40996: IFFALSE 41000
// exit ;
40998: GO 41602
// if GetBType ( depot ) = b_depot then
41000: LD_VAR 0 1
41004: PPUSH
41005: CALL_OW 266
41009: PUSH
41010: LD_INT 0
41012: EQUAL
41013: IFFALSE 41025
// dist := 28 else
41015: LD_ADDR_VAR 0 14
41019: PUSH
41020: LD_INT 28
41022: ST_TO_ADDR
41023: GO 41033
// dist := 36 ;
41025: LD_ADDR_VAR 0 14
41029: PUSH
41030: LD_INT 36
41032: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41033: LD_VAR 0 1
41037: PPUSH
41038: LD_VAR 0 3
41042: PPUSH
41043: LD_VAR 0 4
41047: PPUSH
41048: CALL_OW 297
41052: PUSH
41053: LD_VAR 0 14
41057: GREATER
41058: IFFALSE 41062
// exit ;
41060: GO 41602
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41062: LD_ADDR_VAR 0 12
41066: PUSH
41067: LD_VAR 0 2
41071: PPUSH
41072: LD_VAR 0 3
41076: PPUSH
41077: LD_VAR 0 4
41081: PPUSH
41082: LD_VAR 0 5
41086: PPUSH
41087: LD_VAR 0 1
41091: PPUSH
41092: CALL_OW 248
41096: PPUSH
41097: LD_INT 0
41099: PPUSH
41100: CALL 41607 0 6
41104: ST_TO_ADDR
// if not hexes then
41105: LD_VAR 0 12
41109: NOT
41110: IFFALSE 41114
// exit ;
41112: GO 41602
// hex := GetHexInfo ( x , y ) ;
41114: LD_ADDR_VAR 0 15
41118: PUSH
41119: LD_VAR 0 3
41123: PPUSH
41124: LD_VAR 0 4
41128: PPUSH
41129: CALL_OW 546
41133: ST_TO_ADDR
// if hex [ 1 ] then
41134: LD_VAR 0 15
41138: PUSH
41139: LD_INT 1
41141: ARRAY
41142: IFFALSE 41146
// exit ;
41144: GO 41602
// height := hex [ 2 ] ;
41146: LD_ADDR_VAR 0 13
41150: PUSH
41151: LD_VAR 0 15
41155: PUSH
41156: LD_INT 2
41158: ARRAY
41159: ST_TO_ADDR
// for i = 1 to hexes do
41160: LD_ADDR_VAR 0 7
41164: PUSH
41165: DOUBLE
41166: LD_INT 1
41168: DEC
41169: ST_TO_ADDR
41170: LD_VAR 0 12
41174: PUSH
41175: FOR_TO
41176: IFFALSE 41506
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41178: LD_VAR 0 12
41182: PUSH
41183: LD_VAR 0 7
41187: ARRAY
41188: PUSH
41189: LD_INT 1
41191: ARRAY
41192: PPUSH
41193: LD_VAR 0 12
41197: PUSH
41198: LD_VAR 0 7
41202: ARRAY
41203: PUSH
41204: LD_INT 2
41206: ARRAY
41207: PPUSH
41208: CALL_OW 488
41212: NOT
41213: PUSH
41214: LD_VAR 0 12
41218: PUSH
41219: LD_VAR 0 7
41223: ARRAY
41224: PUSH
41225: LD_INT 1
41227: ARRAY
41228: PPUSH
41229: LD_VAR 0 12
41233: PUSH
41234: LD_VAR 0 7
41238: ARRAY
41239: PUSH
41240: LD_INT 2
41242: ARRAY
41243: PPUSH
41244: CALL_OW 428
41248: PUSH
41249: LD_INT 0
41251: GREATER
41252: OR
41253: PUSH
41254: LD_VAR 0 12
41258: PUSH
41259: LD_VAR 0 7
41263: ARRAY
41264: PUSH
41265: LD_INT 1
41267: ARRAY
41268: PPUSH
41269: LD_VAR 0 12
41273: PUSH
41274: LD_VAR 0 7
41278: ARRAY
41279: PUSH
41280: LD_INT 2
41282: ARRAY
41283: PPUSH
41284: CALL_OW 351
41288: OR
41289: IFFALSE 41295
// exit ;
41291: POP
41292: POP
41293: GO 41602
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41295: LD_ADDR_VAR 0 8
41299: PUSH
41300: LD_VAR 0 12
41304: PUSH
41305: LD_VAR 0 7
41309: ARRAY
41310: PUSH
41311: LD_INT 1
41313: ARRAY
41314: PPUSH
41315: LD_VAR 0 12
41319: PUSH
41320: LD_VAR 0 7
41324: ARRAY
41325: PUSH
41326: LD_INT 2
41328: ARRAY
41329: PPUSH
41330: CALL_OW 546
41334: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41335: LD_VAR 0 8
41339: PUSH
41340: LD_INT 1
41342: ARRAY
41343: PUSH
41344: LD_VAR 0 8
41348: PUSH
41349: LD_INT 2
41351: ARRAY
41352: PUSH
41353: LD_VAR 0 13
41357: PUSH
41358: LD_INT 2
41360: PLUS
41361: GREATER
41362: OR
41363: PUSH
41364: LD_VAR 0 8
41368: PUSH
41369: LD_INT 2
41371: ARRAY
41372: PUSH
41373: LD_VAR 0 13
41377: PUSH
41378: LD_INT 2
41380: MINUS
41381: LESS
41382: OR
41383: PUSH
41384: LD_VAR 0 8
41388: PUSH
41389: LD_INT 3
41391: ARRAY
41392: PUSH
41393: LD_INT 0
41395: PUSH
41396: LD_INT 8
41398: PUSH
41399: LD_INT 9
41401: PUSH
41402: LD_INT 10
41404: PUSH
41405: LD_INT 11
41407: PUSH
41408: LD_INT 12
41410: PUSH
41411: LD_INT 13
41413: PUSH
41414: LD_INT 16
41416: PUSH
41417: LD_INT 17
41419: PUSH
41420: LD_INT 18
41422: PUSH
41423: LD_INT 19
41425: PUSH
41426: LD_INT 20
41428: PUSH
41429: LD_INT 21
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: IN
41447: NOT
41448: OR
41449: PUSH
41450: LD_VAR 0 8
41454: PUSH
41455: LD_INT 5
41457: ARRAY
41458: NOT
41459: OR
41460: PUSH
41461: LD_VAR 0 8
41465: PUSH
41466: LD_INT 6
41468: ARRAY
41469: PUSH
41470: LD_INT 1
41472: PUSH
41473: LD_INT 2
41475: PUSH
41476: LD_INT 7
41478: PUSH
41479: LD_INT 9
41481: PUSH
41482: LD_INT 10
41484: PUSH
41485: LD_INT 11
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: IN
41496: NOT
41497: OR
41498: IFFALSE 41504
// exit ;
41500: POP
41501: POP
41502: GO 41602
// end ;
41504: GO 41175
41506: POP
41507: POP
// side := GetSide ( depot ) ;
41508: LD_ADDR_VAR 0 9
41512: PUSH
41513: LD_VAR 0 1
41517: PPUSH
41518: CALL_OW 255
41522: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41523: LD_VAR 0 9
41527: PPUSH
41528: LD_VAR 0 3
41532: PPUSH
41533: LD_VAR 0 4
41537: PPUSH
41538: LD_INT 20
41540: PPUSH
41541: CALL 34256 0 4
41545: PUSH
41546: LD_INT 4
41548: ARRAY
41549: IFFALSE 41553
// exit ;
41551: GO 41602
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41553: LD_VAR 0 2
41557: PUSH
41558: LD_INT 29
41560: PUSH
41561: LD_INT 30
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: IN
41568: PUSH
41569: LD_VAR 0 3
41573: PPUSH
41574: LD_VAR 0 4
41578: PPUSH
41579: LD_VAR 0 9
41583: PPUSH
41584: CALL_OW 440
41588: NOT
41589: AND
41590: IFFALSE 41594
// exit ;
41592: GO 41602
// result := true ;
41594: LD_ADDR_VAR 0 6
41598: PUSH
41599: LD_INT 1
41601: ST_TO_ADDR
// end ;
41602: LD_VAR 0 6
41606: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
41607: LD_INT 0
41609: PPUSH
41610: PPUSH
41611: PPUSH
41612: PPUSH
41613: PPUSH
41614: PPUSH
41615: PPUSH
41616: PPUSH
41617: PPUSH
41618: PPUSH
41619: PPUSH
41620: PPUSH
41621: PPUSH
41622: PPUSH
41623: PPUSH
41624: PPUSH
41625: PPUSH
41626: PPUSH
41627: PPUSH
41628: PPUSH
41629: PPUSH
41630: PPUSH
41631: PPUSH
41632: PPUSH
41633: PPUSH
41634: PPUSH
41635: PPUSH
41636: PPUSH
41637: PPUSH
41638: PPUSH
41639: PPUSH
41640: PPUSH
41641: PPUSH
41642: PPUSH
41643: PPUSH
41644: PPUSH
41645: PPUSH
41646: PPUSH
41647: PPUSH
41648: PPUSH
41649: PPUSH
41650: PPUSH
41651: PPUSH
41652: PPUSH
41653: PPUSH
41654: PPUSH
41655: PPUSH
41656: PPUSH
41657: PPUSH
41658: PPUSH
41659: PPUSH
41660: PPUSH
41661: PPUSH
41662: PPUSH
41663: PPUSH
41664: PPUSH
41665: PPUSH
41666: PPUSH
// result = [ ] ;
41667: LD_ADDR_VAR 0 7
41671: PUSH
41672: EMPTY
41673: ST_TO_ADDR
// temp_list = [ ] ;
41674: LD_ADDR_VAR 0 9
41678: PUSH
41679: EMPTY
41680: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41681: LD_VAR 0 4
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: LD_INT 1
41691: PUSH
41692: LD_INT 2
41694: PUSH
41695: LD_INT 3
41697: PUSH
41698: LD_INT 4
41700: PUSH
41701: LD_INT 5
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: IN
41712: NOT
41713: PUSH
41714: LD_VAR 0 1
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: LD_INT 1
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: IN
41729: PUSH
41730: LD_VAR 0 5
41734: PUSH
41735: LD_INT 1
41737: PUSH
41738: LD_INT 2
41740: PUSH
41741: LD_INT 3
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: LIST
41748: IN
41749: NOT
41750: AND
41751: OR
41752: IFFALSE 41756
// exit ;
41754: GO 60147
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41756: LD_VAR 0 1
41760: PUSH
41761: LD_INT 6
41763: PUSH
41764: LD_INT 7
41766: PUSH
41767: LD_INT 8
41769: PUSH
41770: LD_INT 13
41772: PUSH
41773: LD_INT 12
41775: PUSH
41776: LD_INT 15
41778: PUSH
41779: LD_INT 11
41781: PUSH
41782: LD_INT 14
41784: PUSH
41785: LD_INT 10
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: IN
41799: IFFALSE 41809
// btype = b_lab ;
41801: LD_ADDR_VAR 0 1
41805: PUSH
41806: LD_INT 6
41808: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41809: LD_VAR 0 6
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: LD_INT 1
41819: PUSH
41820: LD_INT 2
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: LIST
41827: IN
41828: NOT
41829: PUSH
41830: LD_VAR 0 1
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: LD_INT 1
41840: PUSH
41841: LD_INT 2
41843: PUSH
41844: LD_INT 3
41846: PUSH
41847: LD_INT 6
41849: PUSH
41850: LD_INT 36
41852: PUSH
41853: LD_INT 4
41855: PUSH
41856: LD_INT 5
41858: PUSH
41859: LD_INT 31
41861: PUSH
41862: LD_INT 32
41864: PUSH
41865: LD_INT 33
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: IN
41881: NOT
41882: PUSH
41883: LD_VAR 0 6
41887: PUSH
41888: LD_INT 1
41890: EQUAL
41891: AND
41892: OR
41893: PUSH
41894: LD_VAR 0 1
41898: PUSH
41899: LD_INT 2
41901: PUSH
41902: LD_INT 3
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: IN
41909: NOT
41910: PUSH
41911: LD_VAR 0 6
41915: PUSH
41916: LD_INT 2
41918: EQUAL
41919: AND
41920: OR
41921: IFFALSE 41931
// mode = 0 ;
41923: LD_ADDR_VAR 0 6
41927: PUSH
41928: LD_INT 0
41930: ST_TO_ADDR
// case mode of 0 :
41931: LD_VAR 0 6
41935: PUSH
41936: LD_INT 0
41938: DOUBLE
41939: EQUAL
41940: IFTRUE 41944
41942: GO 53397
41944: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41945: LD_ADDR_VAR 0 11
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 0
41962: PUSH
41963: LD_INT 1
41965: NEG
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 1
41973: PUSH
41974: LD_INT 0
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 1
41983: PUSH
41984: LD_INT 1
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: LD_INT 1
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 1
42003: NEG
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: NEG
42015: PUSH
42016: LD_INT 1
42018: NEG
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 1
42026: NEG
42027: PUSH
42028: LD_INT 2
42030: NEG
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: LD_INT 2
42041: NEG
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: PUSH
42061: LD_INT 2
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 0
42070: PUSH
42071: LD_INT 2
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: NEG
42081: PUSH
42082: LD_INT 1
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 1
42091: PUSH
42092: LD_INT 3
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 0
42101: PUSH
42102: LD_INT 3
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 1
42111: NEG
42112: PUSH
42113: LD_INT 2
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42138: LD_ADDR_VAR 0 12
42142: PUSH
42143: LD_INT 0
42145: PUSH
42146: LD_INT 0
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: LD_INT 1
42158: NEG
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 1
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: LD_INT 1
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: NEG
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 1
42207: NEG
42208: PUSH
42209: LD_INT 1
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: PUSH
42220: LD_INT 1
42222: NEG
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 2
42230: PUSH
42231: LD_INT 0
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 2
42240: PUSH
42241: LD_INT 1
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 2
42261: NEG
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 2
42272: NEG
42273: PUSH
42274: LD_INT 1
42276: NEG
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 2
42284: NEG
42285: PUSH
42286: LD_INT 1
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 3
42295: NEG
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 3
42306: NEG
42307: PUSH
42308: LD_INT 1
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42334: LD_ADDR_VAR 0 13
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: LD_INT 0
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 1
42392: NEG
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 1
42415: NEG
42416: PUSH
42417: LD_INT 2
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 2
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 2
42437: PUSH
42438: LD_INT 2
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 1
42447: PUSH
42448: LD_INT 2
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 2
42457: NEG
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 2
42469: NEG
42470: PUSH
42471: LD_INT 2
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 2
42481: NEG
42482: PUSH
42483: LD_INT 3
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 3
42493: NEG
42494: PUSH
42495: LD_INT 2
42497: NEG
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 3
42505: NEG
42506: PUSH
42507: LD_INT 3
42509: NEG
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42533: LD_ADDR_VAR 0 14
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: LD_INT 0
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: LD_INT 1
42553: NEG
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 1
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 1
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 1
42591: NEG
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 1
42602: NEG
42603: PUSH
42604: LD_INT 1
42606: NEG
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 1
42614: NEG
42615: PUSH
42616: LD_INT 2
42618: NEG
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: LD_INT 2
42629: NEG
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 1
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 1
42648: PUSH
42649: LD_INT 2
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: LD_INT 2
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 1
42668: NEG
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: NEG
42680: PUSH
42681: LD_INT 3
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 0
42691: PUSH
42692: LD_INT 3
42694: NEG
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: LD_INT 2
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42729: LD_ADDR_VAR 0 15
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 0
42746: PUSH
42747: LD_INT 1
42749: NEG
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 1
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 1
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 0
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 1
42787: NEG
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: LD_INT 1
42813: NEG
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 2
42821: PUSH
42822: LD_INT 0
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 2
42831: PUSH
42832: LD_INT 1
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 1
42841: NEG
42842: PUSH
42843: LD_INT 1
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 2
42852: NEG
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 2
42863: NEG
42864: PUSH
42865: LD_INT 1
42867: NEG
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 2
42875: PUSH
42876: LD_INT 1
42878: NEG
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 3
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 3
42896: PUSH
42897: LD_INT 1
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42922: LD_ADDR_VAR 0 16
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: NEG
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: LD_INT 2
43007: NEG
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 2
43015: PUSH
43016: LD_INT 1
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 2
43025: PUSH
43026: LD_INT 2
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: LD_INT 2
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 2
43045: NEG
43046: PUSH
43047: LD_INT 1
43049: NEG
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 2
43057: NEG
43058: PUSH
43059: LD_INT 2
43061: NEG
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 3
43069: PUSH
43070: LD_INT 2
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 3
43079: PUSH
43080: LD_INT 3
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 2
43089: PUSH
43090: LD_INT 3
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43115: LD_ADDR_VAR 0 17
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: LD_INT 1
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: LD_INT 0
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 1
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: NEG
43174: PUSH
43175: LD_INT 0
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: LD_INT 1
43188: NEG
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: LD_INT 2
43200: NEG
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: LD_INT 2
43211: NEG
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 2
43230: PUSH
43231: LD_INT 0
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 2
43240: PUSH
43241: LD_INT 1
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 2
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: LD_INT 2
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: LD_INT 2
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 1
43280: NEG
43281: PUSH
43282: LD_INT 1
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 2
43291: NEG
43292: PUSH
43293: LD_INT 0
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 2
43302: NEG
43303: PUSH
43304: LD_INT 1
43306: NEG
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 2
43314: NEG
43315: PUSH
43316: LD_INT 2
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43345: LD_ADDR_VAR 0 18
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: LD_INT 0
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 0
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: LD_INT 0
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 1
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: LD_INT 1
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: NEG
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 1
43414: NEG
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: LD_INT 2
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: LD_INT 2
43441: NEG
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: LD_INT 1
43452: NEG
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 2
43460: PUSH
43461: LD_INT 0
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 2
43470: PUSH
43471: LD_INT 1
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 2
43480: PUSH
43481: LD_INT 2
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: LD_INT 2
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: LD_INT 2
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 2
43521: NEG
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 2
43532: NEG
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 2
43544: NEG
43545: PUSH
43546: LD_INT 2
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43575: LD_ADDR_VAR 0 19
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 0
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 1
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 1
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: LD_INT 1
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 1
43644: NEG
43645: PUSH
43646: LD_INT 1
43648: NEG
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: LD_INT 2
43660: NEG
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: LD_INT 2
43671: NEG
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 1
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 2
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 2
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: LD_INT 2
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: PUSH
43721: LD_INT 2
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: LD_INT 2
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 2
43751: NEG
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 2
43762: NEG
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 2
43774: NEG
43775: PUSH
43776: LD_INT 2
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43805: LD_ADDR_VAR 0 20
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: LD_INT 0
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: LD_INT 1
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 1
43874: NEG
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: NEG
43887: PUSH
43888: LD_INT 2
43890: NEG
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: LD_INT 2
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 2
43940: PUSH
43941: LD_INT 2
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 1
43950: PUSH
43951: LD_INT 2
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: LD_INT 2
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 2
43981: NEG
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 2
43992: NEG
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 2
44004: NEG
44005: PUSH
44006: LD_INT 2
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44035: LD_ADDR_VAR 0 21
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: LD_INT 0
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 1
44063: PUSH
44064: LD_INT 0
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 1
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: NEG
44094: PUSH
44095: LD_INT 0
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 1
44104: NEG
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 1
44116: NEG
44117: PUSH
44118: LD_INT 2
44120: NEG
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: LD_INT 2
44131: NEG
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 2
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 2
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 2
44170: PUSH
44171: LD_INT 2
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 1
44180: PUSH
44181: LD_INT 2
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: LD_INT 2
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 1
44200: NEG
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 2
44211: NEG
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 2
44222: NEG
44223: PUSH
44224: LD_INT 1
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 2
44234: NEG
44235: PUSH
44236: LD_INT 2
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44265: LD_ADDR_VAR 0 22
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 1
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 1
44303: PUSH
44304: LD_INT 1
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 1
44323: NEG
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: NEG
44335: PUSH
44336: LD_INT 1
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 1
44346: NEG
44347: PUSH
44348: LD_INT 2
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: LD_INT 2
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: LD_INT 1
44372: NEG
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 2
44380: PUSH
44381: LD_INT 0
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 2
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 2
44400: PUSH
44401: LD_INT 2
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 1
44410: PUSH
44411: LD_INT 2
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 0
44420: PUSH
44421: LD_INT 2
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 1
44430: NEG
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 2
44441: NEG
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 2
44452: NEG
44453: PUSH
44454: LD_INT 1
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 2
44464: NEG
44465: PUSH
44466: LD_INT 2
44468: NEG
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44495: LD_ADDR_VAR 0 23
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: LD_INT 1
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 1
44553: NEG
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 1
44564: NEG
44565: PUSH
44566: LD_INT 1
44568: NEG
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: LD_INT 2
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: LD_INT 2
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: LD_INT 1
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 2
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 2
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 2
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: LD_INT 2
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: LD_INT 2
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 2
44671: NEG
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 2
44682: NEG
44683: PUSH
44684: LD_INT 1
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 2
44694: NEG
44695: PUSH
44696: LD_INT 2
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 2
44706: NEG
44707: PUSH
44708: LD_INT 3
44710: NEG
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 1
44718: NEG
44719: PUSH
44720: LD_INT 3
44722: NEG
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 1
44730: PUSH
44731: LD_INT 2
44733: NEG
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 2
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44775: LD_ADDR_VAR 0 24
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: LD_INT 0
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 0
44792: PUSH
44793: LD_INT 1
44795: NEG
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: LD_INT 0
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: LD_INT 2
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: LD_INT 2
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 2
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 2
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 2
44910: PUSH
44911: LD_INT 2
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: PUSH
44921: LD_INT 2
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: LD_INT 2
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 1
44940: NEG
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 2
44951: NEG
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 2
44962: NEG
44963: PUSH
44964: LD_INT 1
44966: NEG
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 2
44974: NEG
44975: PUSH
44976: LD_INT 2
44978: NEG
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: LD_INT 2
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 2
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 3
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 3
45018: PUSH
45019: LD_INT 2
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45051: LD_ADDR_VAR 0 25
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: LD_INT 0
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: NEG
45133: PUSH
45134: LD_INT 2
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: LD_INT 2
45147: NEG
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 2
45166: PUSH
45167: LD_INT 0
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 2
45176: PUSH
45177: LD_INT 1
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 2
45186: PUSH
45187: LD_INT 2
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: LD_INT 2
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: LD_INT 2
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: NEG
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 2
45227: NEG
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: LD_INT 2
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 3
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 3
45272: PUSH
45273: LD_INT 2
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 2
45282: PUSH
45283: LD_INT 3
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: LD_INT 3
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45325: LD_ADDR_VAR 0 26
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: LD_INT 1
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: LD_INT 2
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: PUSH
45430: LD_INT 1
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 2
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 2
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 2
45460: PUSH
45461: LD_INT 2
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 2
45501: NEG
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 2
45512: NEG
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: LD_INT 2
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 2
45536: PUSH
45537: LD_INT 3
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 1
45546: PUSH
45547: LD_INT 3
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: LD_INT 2
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 2
45567: NEG
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45601: LD_ADDR_VAR 0 27
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 1
45670: NEG
45671: PUSH
45672: LD_INT 1
45674: NEG
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 1
45682: NEG
45683: PUSH
45684: LD_INT 2
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: LD_INT 2
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 1
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 2
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 2
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 1
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: LD_INT 2
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 1
45766: NEG
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 2
45777: NEG
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 2
45788: NEG
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 2
45800: NEG
45801: PUSH
45802: LD_INT 2
45804: NEG
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 2
45823: NEG
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 3
45834: NEG
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 3
45846: NEG
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45881: LD_ADDR_VAR 0 28
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 1
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: LD_INT 2
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 0
45974: PUSH
45975: LD_INT 2
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 2
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 2
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 2
46016: PUSH
46017: LD_INT 2
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 2
46057: NEG
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 2
46068: NEG
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 2
46080: NEG
46081: PUSH
46082: LD_INT 2
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 2
46092: NEG
46093: PUSH
46094: LD_INT 3
46096: NEG
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: LD_INT 3
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 3
46116: NEG
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 3
46128: NEG
46129: PUSH
46130: LD_INT 2
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46163: LD_ADDR_VAR 0 29
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: LD_INT 1
46183: NEG
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 1
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 0
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: NEG
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: NEG
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: LD_INT 2
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: LD_INT 2
46259: NEG
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 2
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 2
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: LD_INT 2
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: LD_INT 2
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: NEG
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 2
46329: NEG
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 2
46341: NEG
46342: PUSH
46343: LD_INT 2
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 2
46353: NEG
46354: PUSH
46355: LD_INT 3
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 2
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 3
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: LD_INT 3
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: NEG
46397: PUSH
46398: LD_INT 2
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 3
46407: NEG
46408: PUSH
46409: LD_INT 2
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46442: LD_ADDR_VAR 0 30
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: LD_INT 1
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 2
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: LD_INT 2
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 2
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 2
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: LD_INT 2
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 2
46608: NEG
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: LD_INT 3
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 1
46643: PUSH
46644: LD_INT 2
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 3
46654: PUSH
46655: LD_INT 2
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: PUSH
46665: LD_INT 3
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 2
46674: NEG
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 3
46685: NEG
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46720: LD_ADDR_VAR 0 31
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 2
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 2
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: PUSH
46845: LD_INT 2
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: LD_INT 2
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: LD_INT 2
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: NEG
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 2
46885: NEG
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 2
46897: NEG
46898: PUSH
46899: LD_INT 2
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 2
46909: NEG
46910: PUSH
46911: LD_INT 3
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 2
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 3
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 1
46942: PUSH
46943: LD_INT 3
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: NEG
46953: PUSH
46954: LD_INT 2
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 3
46963: NEG
46964: PUSH
46965: LD_INT 2
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46998: LD_ADDR_VAR 0 32
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 0
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 1
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 0
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 1
47067: NEG
47068: PUSH
47069: LD_INT 1
47071: NEG
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 1
47079: NEG
47080: PUSH
47081: LD_INT 2
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: LD_INT 2
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 2
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 2
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: LD_INT 2
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: LD_INT 2
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 2
47164: NEG
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 2
47175: NEG
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: LD_INT 3
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: LD_INT 2
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 3
47210: PUSH
47211: LD_INT 2
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 2
47220: PUSH
47221: LD_INT 3
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 2
47230: NEG
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 3
47241: NEG
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47276: LD_ADDR_VAR 0 33
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: LD_INT 0
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: LD_INT 1
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 1
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: LD_INT 2
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 2
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 2
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: LD_INT 2
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: LD_INT 2
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: NEG
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 2
47431: NEG
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 2
47442: NEG
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: NEG
47455: PUSH
47456: LD_INT 2
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 2
47466: NEG
47467: PUSH
47468: LD_INT 3
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 2
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 3
47489: PUSH
47490: LD_INT 1
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: PUSH
47500: LD_INT 3
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: LD_INT 2
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 3
47520: NEG
47521: PUSH
47522: LD_INT 2
47524: NEG
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47555: LD_ADDR_VAR 0 34
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: LD_INT 1
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 1
47613: NEG
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: NEG
47637: PUSH
47638: LD_INT 2
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: LD_INT 2
47651: NEG
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 1
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 2
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 2
47680: PUSH
47681: LD_INT 2
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: LD_INT 2
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 2
47711: NEG
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 2
47722: NEG
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 2
47734: NEG
47735: PUSH
47736: LD_INT 2
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: LD_INT 3
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: LD_INT 2
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 3
47769: PUSH
47770: LD_INT 2
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 2
47779: PUSH
47780: LD_INT 3
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 2
47789: NEG
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 3
47800: NEG
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47835: LD_ADDR_VAR 0 35
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: LD_INT 1
47855: NEG
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: PUSH
47874: LD_INT 1
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 1
47904: NEG
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 2
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 2
47926: NEG
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47947: LD_ADDR_VAR 0 36
47951: PUSH
47952: LD_INT 0
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: NEG
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 1
48016: NEG
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: LD_INT 2
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 1
48040: PUSH
48041: LD_INT 2
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48059: LD_ADDR_VAR 0 37
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 1
48117: NEG
48118: PUSH
48119: LD_INT 0
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: LD_INT 1
48132: NEG
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: LD_INT 1
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48171: LD_ADDR_VAR 0 38
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 1
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 1
48240: NEG
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 2
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 2
48262: NEG
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48283: LD_ADDR_VAR 0 39
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: LD_INT 1
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: LD_INT 1
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: NEG
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: LD_INT 2
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: LD_INT 2
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48395: LD_ADDR_VAR 0 40
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48507: LD_ADDR_VAR 0 41
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 1
48576: NEG
48577: PUSH
48578: LD_INT 1
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 1
48588: NEG
48589: PUSH
48590: LD_INT 2
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 2
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 2
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 2
48631: PUSH
48632: LD_INT 2
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: LD_INT 2
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 2
48662: NEG
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 2
48673: NEG
48674: PUSH
48675: LD_INT 1
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 2
48685: NEG
48686: PUSH
48687: LD_INT 2
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 2
48697: NEG
48698: PUSH
48699: LD_INT 3
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 2
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 3
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 3
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 3
48740: PUSH
48741: LD_INT 2
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 3
48750: PUSH
48751: LD_INT 3
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 2
48760: PUSH
48761: LD_INT 3
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 2
48770: NEG
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 3
48781: NEG
48782: PUSH
48783: LD_INT 0
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 3
48792: NEG
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 3
48804: NEG
48805: PUSH
48806: LD_INT 2
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 3
48816: NEG
48817: PUSH
48818: LD_INT 3
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48857: LD_ADDR_VAR 0 42
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: LD_INT 1
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: NEG
48939: PUSH
48940: LD_INT 2
48942: NEG
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: LD_INT 2
48953: NEG
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 2
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: LD_INT 2
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: LD_INT 2
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: LD_INT 1
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: NEG
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 2
49035: NEG
49036: PUSH
49037: LD_INT 2
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 2
49047: NEG
49048: PUSH
49049: LD_INT 3
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: LD_INT 3
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: LD_INT 3
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: LD_INT 2
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 3
49093: PUSH
49094: LD_INT 2
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 3
49103: PUSH
49104: LD_INT 3
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 2
49113: PUSH
49114: LD_INT 3
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: LD_INT 3
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: LD_INT 3
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: LD_INT 2
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 3
49154: NEG
49155: PUSH
49156: LD_INT 2
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 3
49166: NEG
49167: PUSH
49168: LD_INT 3
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49207: LD_ADDR_VAR 0 43
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: LD_INT 0
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: LD_INT 1
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: PUSH
49236: LD_INT 0
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: LD_INT 1
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: NEG
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 1
49288: NEG
49289: PUSH
49290: LD_INT 2
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: LD_INT 2
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 2
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: LD_INT 1
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: LD_INT 2
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 2
49373: NEG
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 2
49384: NEG
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: LD_INT 3
49400: NEG
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 3
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: LD_INT 2
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 2
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 3
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 3
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: LD_INT 3
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: LD_INT 3
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: LD_INT 2
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 2
49492: NEG
49493: PUSH
49494: LD_INT 1
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 3
49503: NEG
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 3
49514: NEG
49515: PUSH
49516: LD_INT 1
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49555: LD_ADDR_VAR 0 44
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: LD_INT 1
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: LD_INT 2
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: LD_INT 1
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 2
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 2
49669: PUSH
49670: LD_INT 1
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 2
49679: PUSH
49680: LD_INT 2
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: LD_INT 2
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 1
49699: NEG
49700: PUSH
49701: LD_INT 1
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 2
49710: NEG
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 2
49721: NEG
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 2
49733: NEG
49734: PUSH
49735: LD_INT 2
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 2
49745: NEG
49746: PUSH
49747: LD_INT 3
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 2
49757: PUSH
49758: LD_INT 1
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 3
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 3
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 3
49788: PUSH
49789: LD_INT 2
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 3
49798: PUSH
49799: LD_INT 3
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 2
49808: PUSH
49809: LD_INT 3
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 3
49829: NEG
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 3
49840: NEG
49841: PUSH
49842: LD_INT 1
49844: NEG
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 3
49852: NEG
49853: PUSH
49854: LD_INT 2
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 3
49864: NEG
49865: PUSH
49866: LD_INT 3
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49905: LD_ADDR_VAR 0 45
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 1
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 1
49986: NEG
49987: PUSH
49988: LD_INT 2
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: LD_INT 2
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 2
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 2
50030: PUSH
50031: LD_INT 2
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: PUSH
50041: LD_INT 2
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: LD_INT 2
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: LD_INT 1
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 2
50083: NEG
50084: PUSH
50085: LD_INT 2
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 2
50095: NEG
50096: PUSH
50097: LD_INT 3
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 1
50107: NEG
50108: PUSH
50109: LD_INT 3
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: LD_INT 3
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: LD_INT 2
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 3
50141: PUSH
50142: LD_INT 2
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 3
50151: PUSH
50152: LD_INT 3
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 2
50161: PUSH
50162: LD_INT 3
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: LD_INT 3
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 0
50181: PUSH
50182: LD_INT 3
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: NEG
50192: PUSH
50193: LD_INT 2
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 3
50202: NEG
50203: PUSH
50204: LD_INT 2
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 3
50214: NEG
50215: PUSH
50216: LD_INT 3
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50255: LD_ADDR_VAR 0 46
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: LD_INT 2
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: PUSH
50360: LD_INT 1
50362: NEG
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 2
50370: PUSH
50371: LD_INT 0
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: LD_INT 1
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: LD_INT 2
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 2
50421: NEG
50422: PUSH
50423: LD_INT 0
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 2
50432: NEG
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: LD_INT 3
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: LD_INT 3
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 1
50467: PUSH
50468: LD_INT 2
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 2
50478: PUSH
50479: LD_INT 1
50481: NEG
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 3
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 3
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: LD_INT 3
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: LD_INT 3
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 1
50529: NEG
50530: PUSH
50531: LD_INT 2
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 2
50540: NEG
50541: PUSH
50542: LD_INT 1
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 3
50551: NEG
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 3
50562: NEG
50563: PUSH
50564: LD_INT 1
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50603: LD_ADDR_VAR 0 47
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: LD_INT 1
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: LD_INT 0
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: LD_INT 1
50676: NEG
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: LD_INT 2
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: LD_INT 2
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 2
50718: NEG
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 2
50730: NEG
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50754: LD_ADDR_VAR 0 48
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: LD_INT 1
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: LD_INT 2
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: LD_INT 2
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 1
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 2
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50901: LD_ADDR_VAR 0 49
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 2
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 2
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 2
51013: PUSH
51014: LD_INT 2
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: LD_INT 2
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51045: LD_ADDR_VAR 0 50
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 2
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 2
51136: PUSH
51137: LD_INT 2
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: LD_INT 2
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: LD_INT 2
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51189: LD_ADDR_VAR 0 51
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: LD_INT 2
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: LD_INT 2
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 2
51301: NEG
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51336: LD_ADDR_VAR 0 52
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: LD_INT 2
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 2
51440: NEG
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 2
51451: NEG
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 2
51463: NEG
51464: PUSH
51465: LD_INT 2
51467: NEG
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51487: LD_ADDR_VAR 0 53
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: LD_INT 2
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 2
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: LD_INT 2
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: LD_INT 2
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 2
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: NEG
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 2
51663: NEG
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 2
51674: NEG
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 2
51686: NEG
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51717: LD_ADDR_VAR 0 54
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: LD_INT 2
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: LD_INT 2
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 2
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 2
51852: PUSH
51853: LD_INT 2
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: LD_INT 2
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: LD_INT 2
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 2
51893: NEG
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: NEG
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 2
51916: NEG
51917: PUSH
51918: LD_INT 2
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51947: LD_ADDR_VAR 0 55
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 1
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: LD_INT 1
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: LD_INT 2
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: LD_INT 2
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 2
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 2
52082: PUSH
52083: LD_INT 2
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: PUSH
52093: LD_INT 2
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 0
52102: PUSH
52103: LD_INT 2
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 1
52112: NEG
52113: PUSH
52114: LD_INT 1
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 2
52123: NEG
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 2
52134: NEG
52135: PUSH
52136: LD_INT 1
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 2
52146: NEG
52147: PUSH
52148: LD_INT 2
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52177: LD_ADDR_VAR 0 56
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: LD_INT 1
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: LD_INT 1
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: LD_INT 1
52250: NEG
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: LD_INT 2
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: LD_INT 2
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 2
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 2
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 2
52312: PUSH
52313: LD_INT 2
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: PUSH
52323: LD_INT 2
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: LD_INT 2
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 1
52342: NEG
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 2
52353: NEG
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 2
52364: NEG
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 2
52376: NEG
52377: PUSH
52378: LD_INT 2
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52407: LD_ADDR_VAR 0 57
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 1
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 1
52465: NEG
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: LD_INT 1
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: LD_INT 2
52492: NEG
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: LD_INT 2
52503: NEG
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 2
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 2
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 2
52542: PUSH
52543: LD_INT 2
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: LD_INT 2
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: LD_INT 2
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 1
52572: NEG
52573: PUSH
52574: LD_INT 1
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 2
52583: NEG
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 2
52594: NEG
52595: PUSH
52596: LD_INT 1
52598: NEG
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 2
52606: NEG
52607: PUSH
52608: LD_INT 2
52610: NEG
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52637: LD_ADDR_VAR 0 58
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: LD_INT 2
52722: NEG
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: LD_INT 2
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 2
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 2
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 2
52772: PUSH
52773: LD_INT 2
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: PUSH
52783: LD_INT 2
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 0
52792: PUSH
52793: LD_INT 2
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: NEG
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 2
52813: NEG
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 2
52824: NEG
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 2
52836: NEG
52837: PUSH
52838: LD_INT 2
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52867: LD_ADDR_VAR 0 59
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: LD_INT 1
52887: NEG
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: LD_INT 1
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 1
52925: NEG
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: NEG
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52955: LD_ADDR_VAR 0 60
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53043: LD_ADDR_VAR 0 61
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: LD_INT 1
53063: NEG
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: LD_INT 1
53116: NEG
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53131: LD_ADDR_VAR 0 62
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: LD_INT 0
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: LD_INT 1
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: NEG
53201: PUSH
53202: LD_INT 1
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53219: LD_ADDR_VAR 0 63
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53307: LD_ADDR_VAR 0 64
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: NEG
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: LD_INT 1
53380: NEG
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: ST_TO_ADDR
// end ; 1 :
53395: GO 59292
53397: LD_INT 1
53399: DOUBLE
53400: EQUAL
53401: IFTRUE 53405
53403: GO 56028
53405: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53406: LD_ADDR_VAR 0 11
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: LD_INT 3
53417: NEG
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: LD_INT 3
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: LD_INT 2
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: LIST
53449: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53450: LD_ADDR_VAR 0 12
53454: PUSH
53455: LD_INT 2
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 3
53468: PUSH
53469: LD_INT 0
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 3
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: LIST
53490: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53491: LD_ADDR_VAR 0 13
53495: PUSH
53496: LD_INT 3
53498: PUSH
53499: LD_INT 2
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 3
53508: PUSH
53509: LD_INT 3
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 2
53518: PUSH
53519: LD_INT 3
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: LIST
53530: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53531: LD_ADDR_VAR 0 14
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: LD_INT 3
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: LD_INT 3
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: LD_INT 2
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: LIST
53571: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53572: LD_ADDR_VAR 0 15
53576: PUSH
53577: LD_INT 2
53579: NEG
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 3
53590: NEG
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 3
53601: NEG
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: LIST
53615: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53616: LD_ADDR_VAR 0 16
53620: PUSH
53621: LD_INT 2
53623: NEG
53624: PUSH
53625: LD_INT 3
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 3
53635: NEG
53636: PUSH
53637: LD_INT 2
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 3
53647: NEG
53648: PUSH
53649: LD_INT 3
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: LIST
53661: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53662: LD_ADDR_VAR 0 17
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: LD_INT 3
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: LD_INT 3
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: LD_INT 2
53695: NEG
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: LIST
53705: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53706: LD_ADDR_VAR 0 18
53710: PUSH
53711: LD_INT 2
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 3
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 3
53734: PUSH
53735: LD_INT 1
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: LIST
53746: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53747: LD_ADDR_VAR 0 19
53751: PUSH
53752: LD_INT 3
53754: PUSH
53755: LD_INT 2
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 3
53764: PUSH
53765: LD_INT 3
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 2
53774: PUSH
53775: LD_INT 3
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: LIST
53786: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53787: LD_ADDR_VAR 0 20
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: LD_INT 3
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: LD_INT 3
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: LD_INT 2
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: LIST
53827: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53828: LD_ADDR_VAR 0 21
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 3
53846: NEG
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 3
53857: NEG
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: LIST
53871: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53872: LD_ADDR_VAR 0 22
53876: PUSH
53877: LD_INT 2
53879: NEG
53880: PUSH
53881: LD_INT 3
53883: NEG
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 3
53891: NEG
53892: PUSH
53893: LD_INT 2
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 3
53903: NEG
53904: PUSH
53905: LD_INT 3
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: LIST
53917: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53918: LD_ADDR_VAR 0 23
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: LD_INT 3
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: NEG
53937: PUSH
53938: LD_INT 4
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: PUSH
53949: LD_INT 3
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: LIST
53961: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53962: LD_ADDR_VAR 0 24
53966: PUSH
53967: LD_INT 3
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 3
53979: PUSH
53980: LD_INT 1
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 4
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: LIST
54002: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54003: LD_ADDR_VAR 0 25
54007: PUSH
54008: LD_INT 3
54010: PUSH
54011: LD_INT 3
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 4
54020: PUSH
54021: LD_INT 3
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 3
54030: PUSH
54031: LD_INT 4
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: LIST
54042: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54043: LD_ADDR_VAR 0 26
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: LD_INT 3
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: PUSH
54061: LD_INT 4
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: LD_INT 3
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: LIST
54083: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54084: LD_ADDR_VAR 0 27
54088: PUSH
54089: LD_INT 3
54091: NEG
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 3
54102: NEG
54103: PUSH
54104: LD_INT 1
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 4
54113: NEG
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: LIST
54127: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54128: LD_ADDR_VAR 0 28
54132: PUSH
54133: LD_INT 3
54135: NEG
54136: PUSH
54137: LD_INT 3
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 3
54147: NEG
54148: PUSH
54149: LD_INT 4
54151: NEG
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 4
54159: NEG
54160: PUSH
54161: LD_INT 3
54163: NEG
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: LIST
54173: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54174: LD_ADDR_VAR 0 29
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: LD_INT 3
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: LD_INT 3
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: LD_INT 2
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: LD_INT 4
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: LD_INT 4
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: LD_INT 3
54241: NEG
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: LD_INT 5
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: LD_INT 5
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: LD_INT 4
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: LD_INT 6
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: LD_INT 6
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: LD_INT 5
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54329: LD_ADDR_VAR 0 30
54333: PUSH
54334: LD_INT 2
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 3
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 3
54357: PUSH
54358: LD_INT 1
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 3
54367: PUSH
54368: LD_INT 1
54370: NEG
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 4
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 4
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 4
54398: PUSH
54399: LD_INT 1
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 5
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 5
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 5
54429: PUSH
54430: LD_INT 1
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 6
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 6
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54472: LD_ADDR_VAR 0 31
54476: PUSH
54477: LD_INT 3
54479: PUSH
54480: LD_INT 2
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 3
54489: PUSH
54490: LD_INT 3
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 2
54499: PUSH
54500: LD_INT 3
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 4
54509: PUSH
54510: LD_INT 3
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 4
54519: PUSH
54520: LD_INT 4
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 3
54529: PUSH
54530: LD_INT 4
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 5
54539: PUSH
54540: LD_INT 4
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 5
54549: PUSH
54550: LD_INT 5
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 4
54559: PUSH
54560: LD_INT 5
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 6
54569: PUSH
54570: LD_INT 5
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 6
54579: PUSH
54580: LD_INT 6
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 5
54589: PUSH
54590: LD_INT 6
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54611: LD_ADDR_VAR 0 32
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: LD_INT 3
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: LD_INT 3
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: LD_INT 2
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: LD_INT 4
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: LD_INT 4
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: LD_INT 3
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 1
54680: PUSH
54681: LD_INT 5
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: LD_INT 5
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: NEG
54701: PUSH
54702: LD_INT 4
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: LD_INT 6
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: LD_INT 6
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: LD_INT 5
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54754: LD_ADDR_VAR 0 33
54758: PUSH
54759: LD_INT 2
54761: NEG
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 3
54772: NEG
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 3
54783: NEG
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 3
54795: NEG
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 4
54806: NEG
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 4
54817: NEG
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 4
54829: NEG
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 5
54840: NEG
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 5
54851: NEG
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 5
54863: NEG
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 6
54874: NEG
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 6
54885: NEG
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54909: LD_ADDR_VAR 0 34
54913: PUSH
54914: LD_INT 2
54916: NEG
54917: PUSH
54918: LD_INT 3
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 3
54928: NEG
54929: PUSH
54930: LD_INT 2
54932: NEG
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 3
54940: NEG
54941: PUSH
54942: LD_INT 3
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 3
54952: NEG
54953: PUSH
54954: LD_INT 4
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 4
54964: NEG
54965: PUSH
54966: LD_INT 3
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 4
54976: NEG
54977: PUSH
54978: LD_INT 4
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 4
54988: NEG
54989: PUSH
54990: LD_INT 5
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 5
55000: NEG
55001: PUSH
55002: LD_INT 4
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 5
55012: NEG
55013: PUSH
55014: LD_INT 5
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 5
55024: NEG
55025: PUSH
55026: LD_INT 6
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 6
55036: NEG
55037: PUSH
55038: LD_INT 5
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 6
55048: NEG
55049: PUSH
55050: LD_INT 6
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55072: LD_ADDR_VAR 0 41
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: LD_INT 3
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: PUSH
55103: LD_INT 2
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: LIST
55115: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55116: LD_ADDR_VAR 0 42
55120: PUSH
55121: LD_INT 2
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 2
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 3
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: LIST
55156: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55157: LD_ADDR_VAR 0 43
55161: PUSH
55162: LD_INT 2
55164: PUSH
55165: LD_INT 2
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 3
55174: PUSH
55175: LD_INT 2
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: LD_INT 3
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: LIST
55196: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55197: LD_ADDR_VAR 0 44
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: LD_INT 2
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: LD_INT 3
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: LD_INT 2
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: LIST
55237: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55238: LD_ADDR_VAR 0 45
55242: PUSH
55243: LD_INT 2
55245: NEG
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 2
55256: NEG
55257: PUSH
55258: LD_INT 1
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 3
55267: NEG
55268: PUSH
55269: LD_INT 1
55271: NEG
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: LIST
55281: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55282: LD_ADDR_VAR 0 46
55286: PUSH
55287: LD_INT 2
55289: NEG
55290: PUSH
55291: LD_INT 2
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 2
55301: NEG
55302: PUSH
55303: LD_INT 3
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 3
55313: NEG
55314: PUSH
55315: LD_INT 2
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: LIST
55327: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55328: LD_ADDR_VAR 0 47
55332: PUSH
55333: LD_INT 2
55335: NEG
55336: PUSH
55337: LD_INT 3
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: LD_INT 3
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55361: LD_ADDR_VAR 0 48
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: LD_INT 2
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 2
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55392: LD_ADDR_VAR 0 49
55396: PUSH
55397: LD_INT 3
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 3
55409: PUSH
55410: LD_INT 2
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55421: LD_ADDR_VAR 0 50
55425: PUSH
55426: LD_INT 2
55428: PUSH
55429: LD_INT 3
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: LD_INT 3
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55450: LD_ADDR_VAR 0 51
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: LD_INT 2
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 2
55468: NEG
55469: PUSH
55470: LD_INT 1
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55481: LD_ADDR_VAR 0 52
55485: PUSH
55486: LD_INT 3
55488: NEG
55489: PUSH
55490: LD_INT 1
55492: NEG
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 3
55500: NEG
55501: PUSH
55502: LD_INT 2
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55514: LD_ADDR_VAR 0 53
55518: PUSH
55519: LD_INT 1
55521: NEG
55522: PUSH
55523: LD_INT 3
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: LD_INT 3
55536: NEG
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: LD_INT 2
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: LIST
55557: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55558: LD_ADDR_VAR 0 54
55562: PUSH
55563: LD_INT 2
55565: PUSH
55566: LD_INT 1
55568: NEG
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 3
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 3
55586: PUSH
55587: LD_INT 1
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: LIST
55598: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55599: LD_ADDR_VAR 0 55
55603: PUSH
55604: LD_INT 3
55606: PUSH
55607: LD_INT 2
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 3
55616: PUSH
55617: LD_INT 3
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 2
55626: PUSH
55627: LD_INT 3
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: LIST
55638: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55639: LD_ADDR_VAR 0 56
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: LD_INT 3
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: LD_INT 3
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: NEG
55667: PUSH
55668: LD_INT 2
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: LIST
55679: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55680: LD_ADDR_VAR 0 57
55684: PUSH
55685: LD_INT 2
55687: NEG
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 3
55698: NEG
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 3
55709: NEG
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: LIST
55723: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55724: LD_ADDR_VAR 0 58
55728: PUSH
55729: LD_INT 2
55731: NEG
55732: PUSH
55733: LD_INT 3
55735: NEG
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 3
55743: NEG
55744: PUSH
55745: LD_INT 2
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 3
55755: NEG
55756: PUSH
55757: LD_INT 3
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: LIST
55769: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55770: LD_ADDR_VAR 0 59
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: LD_INT 2
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: LD_INT 2
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: LIST
55813: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55814: LD_ADDR_VAR 0 60
55818: PUSH
55819: LD_INT 1
55821: PUSH
55822: LD_INT 1
55824: NEG
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 2
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 2
55842: PUSH
55843: LD_INT 1
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: LIST
55854: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55855: LD_ADDR_VAR 0 61
55859: PUSH
55860: LD_INT 2
55862: PUSH
55863: LD_INT 1
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 2
55872: PUSH
55873: LD_INT 2
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: LD_INT 2
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: LIST
55894: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55895: LD_ADDR_VAR 0 62
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: LD_INT 2
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: LD_INT 2
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: LD_INT 1
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: LIST
55935: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55936: LD_ADDR_VAR 0 63
55940: PUSH
55941: LD_INT 1
55943: NEG
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 2
55954: NEG
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 2
55965: NEG
55966: PUSH
55967: LD_INT 1
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: LIST
55979: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55980: LD_ADDR_VAR 0 64
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: LD_INT 2
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 2
55999: NEG
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 2
56011: NEG
56012: PUSH
56013: LD_INT 2
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: LIST
56025: ST_TO_ADDR
// end ; 2 :
56026: GO 59292
56028: LD_INT 2
56030: DOUBLE
56031: EQUAL
56032: IFTRUE 56036
56034: GO 59291
56036: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56037: LD_ADDR_VAR 0 29
56041: PUSH
56042: LD_INT 4
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 4
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 5
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 5
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 4
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 3
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 3
56105: PUSH
56106: LD_INT 1
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 3
56116: PUSH
56117: LD_INT 2
56119: NEG
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 5
56127: PUSH
56128: LD_INT 2
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 3
56137: PUSH
56138: LD_INT 3
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 3
56147: PUSH
56148: LD_INT 2
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 4
56157: PUSH
56158: LD_INT 3
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 4
56167: PUSH
56168: LD_INT 4
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 3
56177: PUSH
56178: LD_INT 4
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 2
56187: PUSH
56188: LD_INT 3
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 4
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: LD_INT 4
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 4
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: LD_INT 3
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: LD_INT 4
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: LD_INT 5
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: LD_INT 5
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: LD_INT 4
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 1
56288: NEG
56289: PUSH
56290: LD_INT 3
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 2
56299: PUSH
56300: LD_INT 5
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 2
56309: NEG
56310: PUSH
56311: LD_INT 3
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 3
56320: NEG
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 3
56331: NEG
56332: PUSH
56333: LD_INT 1
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 2
56343: NEG
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 2
56354: NEG
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 3
56365: NEG
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 4
56376: NEG
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 4
56387: NEG
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 4
56399: NEG
56400: PUSH
56401: LD_INT 2
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 2
56411: NEG
56412: PUSH
56413: LD_INT 2
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 4
56422: NEG
56423: PUSH
56424: LD_INT 4
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 4
56434: NEG
56435: PUSH
56436: LD_INT 5
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 3
56446: NEG
56447: PUSH
56448: LD_INT 4
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 3
56458: NEG
56459: PUSH
56460: LD_INT 3
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 4
56470: NEG
56471: PUSH
56472: LD_INT 3
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 5
56482: NEG
56483: PUSH
56484: LD_INT 4
56486: NEG
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 5
56494: NEG
56495: PUSH
56496: LD_INT 5
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 3
56506: NEG
56507: PUSH
56508: LD_INT 5
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 5
56518: NEG
56519: PUSH
56520: LD_INT 3
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56575: LD_ADDR_VAR 0 30
56579: PUSH
56580: LD_INT 4
56582: PUSH
56583: LD_INT 4
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 4
56592: PUSH
56593: LD_INT 3
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 5
56602: PUSH
56603: LD_INT 4
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 5
56612: PUSH
56613: LD_INT 5
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 4
56622: PUSH
56623: LD_INT 5
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 3
56632: PUSH
56633: LD_INT 4
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 3
56642: PUSH
56643: LD_INT 3
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 5
56652: PUSH
56653: LD_INT 3
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 3
56662: PUSH
56663: LD_INT 5
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 0
56672: PUSH
56673: LD_INT 3
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: LD_INT 2
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: LD_INT 3
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: LD_INT 4
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: LD_INT 4
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: LD_INT 3
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: LD_INT 2
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 2
56744: PUSH
56745: LD_INT 4
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 2
56754: NEG
56755: PUSH
56756: LD_INT 2
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 4
56765: NEG
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 4
56776: NEG
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 3
56788: NEG
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 3
56799: NEG
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 4
56810: NEG
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 5
56821: NEG
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 5
56832: NEG
56833: PUSH
56834: LD_INT 1
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 5
56844: NEG
56845: PUSH
56846: LD_INT 2
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 3
56856: NEG
56857: PUSH
56858: LD_INT 2
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 3
56867: NEG
56868: PUSH
56869: LD_INT 3
56871: NEG
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 3
56879: NEG
56880: PUSH
56881: LD_INT 4
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 2
56891: NEG
56892: PUSH
56893: LD_INT 3
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 2
56903: NEG
56904: PUSH
56905: LD_INT 2
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 3
56915: NEG
56916: PUSH
56917: LD_INT 2
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 4
56927: NEG
56928: PUSH
56929: LD_INT 3
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 4
56939: NEG
56940: PUSH
56941: LD_INT 4
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 2
56951: NEG
56952: PUSH
56953: LD_INT 4
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 4
56963: NEG
56964: PUSH
56965: LD_INT 2
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: LD_INT 4
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: LD_INT 5
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: LD_INT 4
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: PUSH
57009: LD_INT 3
57011: NEG
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: LD_INT 3
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 1
57030: NEG
57031: PUSH
57032: LD_INT 4
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 1
57042: NEG
57043: PUSH
57044: LD_INT 5
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 2
57054: PUSH
57055: LD_INT 3
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 2
57065: NEG
57066: PUSH
57067: LD_INT 5
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57122: LD_ADDR_VAR 0 31
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: LD_INT 4
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 0
57139: PUSH
57140: LD_INT 3
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: LD_INT 4
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 1
57159: PUSH
57160: LD_INT 5
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: LD_INT 5
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 1
57179: NEG
57180: PUSH
57181: LD_INT 4
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: LD_INT 3
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 2
57201: PUSH
57202: LD_INT 5
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 2
57211: NEG
57212: PUSH
57213: LD_INT 3
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 3
57222: NEG
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 3
57233: NEG
57234: PUSH
57235: LD_INT 1
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 2
57245: NEG
57246: PUSH
57247: LD_INT 0
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 2
57256: NEG
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 3
57267: NEG
57268: PUSH
57269: LD_INT 1
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 4
57278: NEG
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 4
57289: NEG
57290: PUSH
57291: LD_INT 1
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 4
57301: NEG
57302: PUSH
57303: LD_INT 2
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 2
57313: NEG
57314: PUSH
57315: LD_INT 2
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 4
57324: NEG
57325: PUSH
57326: LD_INT 4
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 4
57336: NEG
57337: PUSH
57338: LD_INT 5
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 3
57348: NEG
57349: PUSH
57350: LD_INT 4
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 3
57360: NEG
57361: PUSH
57362: LD_INT 3
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 4
57372: NEG
57373: PUSH
57374: LD_INT 3
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 5
57384: NEG
57385: PUSH
57386: LD_INT 4
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 5
57396: NEG
57397: PUSH
57398: LD_INT 5
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 3
57408: NEG
57409: PUSH
57410: LD_INT 5
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 5
57420: NEG
57421: PUSH
57422: LD_INT 3
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 0
57432: PUSH
57433: LD_INT 3
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: LD_INT 4
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 1
57454: PUSH
57455: LD_INT 3
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: LD_INT 2
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: LD_INT 2
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: LD_INT 3
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 1
57499: NEG
57500: PUSH
57501: LD_INT 4
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 2
57511: PUSH
57512: LD_INT 2
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 2
57522: NEG
57523: PUSH
57524: LD_INT 4
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 4
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 4
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 5
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 5
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 4
57575: PUSH
57576: LD_INT 1
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 3
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 3
57595: PUSH
57596: LD_INT 1
57598: NEG
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 3
57606: PUSH
57607: LD_INT 2
57609: NEG
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 5
57617: PUSH
57618: LD_INT 2
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57672: LD_ADDR_VAR 0 32
57676: PUSH
57677: LD_INT 4
57679: NEG
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 4
57690: NEG
57691: PUSH
57692: LD_INT 1
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 3
57702: NEG
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 3
57713: NEG
57714: PUSH
57715: LD_INT 1
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 4
57724: NEG
57725: PUSH
57726: LD_INT 1
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 5
57735: NEG
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 5
57746: NEG
57747: PUSH
57748: LD_INT 1
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 5
57758: NEG
57759: PUSH
57760: LD_INT 2
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 3
57770: NEG
57771: PUSH
57772: LD_INT 2
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 3
57781: NEG
57782: PUSH
57783: LD_INT 3
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 3
57793: NEG
57794: PUSH
57795: LD_INT 4
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 2
57805: NEG
57806: PUSH
57807: LD_INT 3
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 2
57817: NEG
57818: PUSH
57819: LD_INT 2
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 3
57829: NEG
57830: PUSH
57831: LD_INT 2
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 4
57841: NEG
57842: PUSH
57843: LD_INT 3
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 4
57853: NEG
57854: PUSH
57855: LD_INT 4
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 2
57865: NEG
57866: PUSH
57867: LD_INT 4
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 4
57877: NEG
57878: PUSH
57879: LD_INT 2
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: LD_INT 4
57892: NEG
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 0
57900: PUSH
57901: LD_INT 5
57903: NEG
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: LD_INT 4
57914: NEG
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 1
57922: PUSH
57923: LD_INT 3
57925: NEG
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: LD_INT 3
57936: NEG
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 1
57944: NEG
57945: PUSH
57946: LD_INT 4
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: LD_INT 5
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 2
57968: PUSH
57969: LD_INT 3
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 2
57979: NEG
57980: PUSH
57981: LD_INT 5
57983: NEG
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 3
57991: PUSH
57992: LD_INT 0
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 3
58001: PUSH
58002: LD_INT 1
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 4
58012: PUSH
58013: LD_INT 0
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 4
58022: PUSH
58023: LD_INT 1
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 3
58032: PUSH
58033: LD_INT 1
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 2
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 2
58052: PUSH
58053: LD_INT 1
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 2
58063: PUSH
58064: LD_INT 2
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 4
58074: PUSH
58075: LD_INT 2
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 4
58084: PUSH
58085: LD_INT 4
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 4
58094: PUSH
58095: LD_INT 3
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 5
58104: PUSH
58105: LD_INT 4
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 5
58114: PUSH
58115: LD_INT 5
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 4
58124: PUSH
58125: LD_INT 5
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 3
58134: PUSH
58135: LD_INT 4
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 3
58144: PUSH
58145: LD_INT 3
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 5
58154: PUSH
58155: LD_INT 3
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 3
58164: PUSH
58165: LD_INT 5
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58219: LD_ADDR_VAR 0 33
58223: PUSH
58224: LD_INT 4
58226: NEG
58227: PUSH
58228: LD_INT 4
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 4
58238: NEG
58239: PUSH
58240: LD_INT 5
58242: NEG
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 3
58250: NEG
58251: PUSH
58252: LD_INT 4
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 3
58262: NEG
58263: PUSH
58264: LD_INT 3
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 4
58274: NEG
58275: PUSH
58276: LD_INT 3
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 5
58286: NEG
58287: PUSH
58288: LD_INT 4
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 5
58298: NEG
58299: PUSH
58300: LD_INT 5
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 3
58310: NEG
58311: PUSH
58312: LD_INT 5
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 5
58322: NEG
58323: PUSH
58324: LD_INT 3
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: LD_INT 3
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: LD_INT 4
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: LD_INT 3
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: LD_INT 2
58370: NEG
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: LD_INT 2
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: LD_INT 3
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 1
58401: NEG
58402: PUSH
58403: LD_INT 4
58405: NEG
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 2
58413: PUSH
58414: LD_INT 2
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: LD_INT 4
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 4
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 4
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 5
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 5
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 4
58477: PUSH
58478: LD_INT 1
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 3
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 3
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 3
58508: PUSH
58509: LD_INT 2
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 5
58519: PUSH
58520: LD_INT 2
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 3
58529: PUSH
58530: LD_INT 3
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 3
58539: PUSH
58540: LD_INT 2
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 4
58549: PUSH
58550: LD_INT 3
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 4
58559: PUSH
58560: LD_INT 4
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 3
58569: PUSH
58570: LD_INT 4
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 2
58579: PUSH
58580: LD_INT 3
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 2
58589: PUSH
58590: LD_INT 2
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 4
58599: PUSH
58600: LD_INT 2
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 2
58609: PUSH
58610: LD_INT 4
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: LD_INT 4
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: LD_INT 3
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 1
58639: PUSH
58640: LD_INT 4
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 1
58649: PUSH
58650: LD_INT 5
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 0
58659: PUSH
58660: LD_INT 5
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: NEG
58670: PUSH
58671: LD_INT 4
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 1
58680: NEG
58681: PUSH
58682: LD_INT 3
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 2
58691: PUSH
58692: LD_INT 5
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 2
58701: NEG
58702: PUSH
58703: LD_INT 3
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58757: LD_ADDR_VAR 0 34
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: LD_INT 4
58767: NEG
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 0
58775: PUSH
58776: LD_INT 5
58778: NEG
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 1
58786: PUSH
58787: LD_INT 4
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 1
58797: PUSH
58798: LD_INT 3
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 0
58808: PUSH
58809: LD_INT 3
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 1
58819: NEG
58820: PUSH
58821: LD_INT 4
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: LD_INT 5
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 2
58843: PUSH
58844: LD_INT 3
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 2
58854: NEG
58855: PUSH
58856: LD_INT 5
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 3
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 3
58876: PUSH
58877: LD_INT 1
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 4
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 4
58897: PUSH
58898: LD_INT 1
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 3
58907: PUSH
58908: LD_INT 1
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 2
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 2
58927: PUSH
58928: LD_INT 1
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 2
58938: PUSH
58939: LD_INT 2
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 4
58949: PUSH
58950: LD_INT 2
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 4
58959: PUSH
58960: LD_INT 4
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 4
58969: PUSH
58970: LD_INT 3
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 5
58979: PUSH
58980: LD_INT 4
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 5
58989: PUSH
58990: LD_INT 5
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 4
58999: PUSH
59000: LD_INT 5
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 3
59009: PUSH
59010: LD_INT 4
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 3
59019: PUSH
59020: LD_INT 3
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 5
59029: PUSH
59030: LD_INT 3
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 3
59039: PUSH
59040: LD_INT 5
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 0
59049: PUSH
59050: LD_INT 3
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: LD_INT 2
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 1
59069: PUSH
59070: LD_INT 3
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 1
59079: PUSH
59080: LD_INT 4
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 0
59089: PUSH
59090: LD_INT 4
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 1
59099: NEG
59100: PUSH
59101: LD_INT 3
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 1
59110: NEG
59111: PUSH
59112: LD_INT 2
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 2
59121: PUSH
59122: LD_INT 4
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 2
59131: NEG
59132: PUSH
59133: LD_INT 2
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 4
59142: NEG
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 4
59153: NEG
59154: PUSH
59155: LD_INT 1
59157: NEG
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 3
59165: NEG
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 3
59176: NEG
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 4
59187: NEG
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 5
59198: NEG
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 5
59209: NEG
59210: PUSH
59211: LD_INT 1
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 5
59221: NEG
59222: PUSH
59223: LD_INT 2
59225: NEG
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 3
59233: NEG
59234: PUSH
59235: LD_INT 2
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: ST_TO_ADDR
// end ; end ;
59289: GO 59292
59291: POP
// case btype of b_depot , b_warehouse :
59292: LD_VAR 0 1
59296: PUSH
59297: LD_INT 0
59299: DOUBLE
59300: EQUAL
59301: IFTRUE 59311
59303: LD_INT 1
59305: DOUBLE
59306: EQUAL
59307: IFTRUE 59311
59309: GO 59512
59311: POP
// case nation of nation_american :
59312: LD_VAR 0 5
59316: PUSH
59317: LD_INT 1
59319: DOUBLE
59320: EQUAL
59321: IFTRUE 59325
59323: GO 59381
59325: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
59326: LD_ADDR_VAR 0 9
59330: PUSH
59331: LD_VAR 0 11
59335: PUSH
59336: LD_VAR 0 12
59340: PUSH
59341: LD_VAR 0 13
59345: PUSH
59346: LD_VAR 0 14
59350: PUSH
59351: LD_VAR 0 15
59355: PUSH
59356: LD_VAR 0 16
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: PUSH
59369: LD_VAR 0 4
59373: PUSH
59374: LD_INT 1
59376: PLUS
59377: ARRAY
59378: ST_TO_ADDR
59379: GO 59510
59381: LD_INT 2
59383: DOUBLE
59384: EQUAL
59385: IFTRUE 59389
59387: GO 59445
59389: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
59390: LD_ADDR_VAR 0 9
59394: PUSH
59395: LD_VAR 0 17
59399: PUSH
59400: LD_VAR 0 18
59404: PUSH
59405: LD_VAR 0 19
59409: PUSH
59410: LD_VAR 0 20
59414: PUSH
59415: LD_VAR 0 21
59419: PUSH
59420: LD_VAR 0 22
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: PUSH
59433: LD_VAR 0 4
59437: PUSH
59438: LD_INT 1
59440: PLUS
59441: ARRAY
59442: ST_TO_ADDR
59443: GO 59510
59445: LD_INT 3
59447: DOUBLE
59448: EQUAL
59449: IFTRUE 59453
59451: GO 59509
59453: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59454: LD_ADDR_VAR 0 9
59458: PUSH
59459: LD_VAR 0 23
59463: PUSH
59464: LD_VAR 0 24
59468: PUSH
59469: LD_VAR 0 25
59473: PUSH
59474: LD_VAR 0 26
59478: PUSH
59479: LD_VAR 0 27
59483: PUSH
59484: LD_VAR 0 28
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: PUSH
59497: LD_VAR 0 4
59501: PUSH
59502: LD_INT 1
59504: PLUS
59505: ARRAY
59506: ST_TO_ADDR
59507: GO 59510
59509: POP
59510: GO 60065
59512: LD_INT 2
59514: DOUBLE
59515: EQUAL
59516: IFTRUE 59526
59518: LD_INT 3
59520: DOUBLE
59521: EQUAL
59522: IFTRUE 59526
59524: GO 59582
59526: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59527: LD_ADDR_VAR 0 9
59531: PUSH
59532: LD_VAR 0 29
59536: PUSH
59537: LD_VAR 0 30
59541: PUSH
59542: LD_VAR 0 31
59546: PUSH
59547: LD_VAR 0 32
59551: PUSH
59552: LD_VAR 0 33
59556: PUSH
59557: LD_VAR 0 34
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: PUSH
59570: LD_VAR 0 4
59574: PUSH
59575: LD_INT 1
59577: PLUS
59578: ARRAY
59579: ST_TO_ADDR
59580: GO 60065
59582: LD_INT 16
59584: DOUBLE
59585: EQUAL
59586: IFTRUE 59644
59588: LD_INT 17
59590: DOUBLE
59591: EQUAL
59592: IFTRUE 59644
59594: LD_INT 18
59596: DOUBLE
59597: EQUAL
59598: IFTRUE 59644
59600: LD_INT 19
59602: DOUBLE
59603: EQUAL
59604: IFTRUE 59644
59606: LD_INT 22
59608: DOUBLE
59609: EQUAL
59610: IFTRUE 59644
59612: LD_INT 20
59614: DOUBLE
59615: EQUAL
59616: IFTRUE 59644
59618: LD_INT 21
59620: DOUBLE
59621: EQUAL
59622: IFTRUE 59644
59624: LD_INT 23
59626: DOUBLE
59627: EQUAL
59628: IFTRUE 59644
59630: LD_INT 24
59632: DOUBLE
59633: EQUAL
59634: IFTRUE 59644
59636: LD_INT 25
59638: DOUBLE
59639: EQUAL
59640: IFTRUE 59644
59642: GO 59700
59644: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59645: LD_ADDR_VAR 0 9
59649: PUSH
59650: LD_VAR 0 35
59654: PUSH
59655: LD_VAR 0 36
59659: PUSH
59660: LD_VAR 0 37
59664: PUSH
59665: LD_VAR 0 38
59669: PUSH
59670: LD_VAR 0 39
59674: PUSH
59675: LD_VAR 0 40
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: PUSH
59688: LD_VAR 0 4
59692: PUSH
59693: LD_INT 1
59695: PLUS
59696: ARRAY
59697: ST_TO_ADDR
59698: GO 60065
59700: LD_INT 6
59702: DOUBLE
59703: EQUAL
59704: IFTRUE 59756
59706: LD_INT 7
59708: DOUBLE
59709: EQUAL
59710: IFTRUE 59756
59712: LD_INT 8
59714: DOUBLE
59715: EQUAL
59716: IFTRUE 59756
59718: LD_INT 13
59720: DOUBLE
59721: EQUAL
59722: IFTRUE 59756
59724: LD_INT 12
59726: DOUBLE
59727: EQUAL
59728: IFTRUE 59756
59730: LD_INT 15
59732: DOUBLE
59733: EQUAL
59734: IFTRUE 59756
59736: LD_INT 11
59738: DOUBLE
59739: EQUAL
59740: IFTRUE 59756
59742: LD_INT 14
59744: DOUBLE
59745: EQUAL
59746: IFTRUE 59756
59748: LD_INT 10
59750: DOUBLE
59751: EQUAL
59752: IFTRUE 59756
59754: GO 59812
59756: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
59757: LD_ADDR_VAR 0 9
59761: PUSH
59762: LD_VAR 0 41
59766: PUSH
59767: LD_VAR 0 42
59771: PUSH
59772: LD_VAR 0 43
59776: PUSH
59777: LD_VAR 0 44
59781: PUSH
59782: LD_VAR 0 45
59786: PUSH
59787: LD_VAR 0 46
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: PUSH
59800: LD_VAR 0 4
59804: PUSH
59805: LD_INT 1
59807: PLUS
59808: ARRAY
59809: ST_TO_ADDR
59810: GO 60065
59812: LD_INT 36
59814: DOUBLE
59815: EQUAL
59816: IFTRUE 59820
59818: GO 59876
59820: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59821: LD_ADDR_VAR 0 9
59825: PUSH
59826: LD_VAR 0 47
59830: PUSH
59831: LD_VAR 0 48
59835: PUSH
59836: LD_VAR 0 49
59840: PUSH
59841: LD_VAR 0 50
59845: PUSH
59846: LD_VAR 0 51
59850: PUSH
59851: LD_VAR 0 52
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: PUSH
59864: LD_VAR 0 4
59868: PUSH
59869: LD_INT 1
59871: PLUS
59872: ARRAY
59873: ST_TO_ADDR
59874: GO 60065
59876: LD_INT 4
59878: DOUBLE
59879: EQUAL
59880: IFTRUE 59902
59882: LD_INT 5
59884: DOUBLE
59885: EQUAL
59886: IFTRUE 59902
59888: LD_INT 34
59890: DOUBLE
59891: EQUAL
59892: IFTRUE 59902
59894: LD_INT 37
59896: DOUBLE
59897: EQUAL
59898: IFTRUE 59902
59900: GO 59958
59902: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59903: LD_ADDR_VAR 0 9
59907: PUSH
59908: LD_VAR 0 53
59912: PUSH
59913: LD_VAR 0 54
59917: PUSH
59918: LD_VAR 0 55
59922: PUSH
59923: LD_VAR 0 56
59927: PUSH
59928: LD_VAR 0 57
59932: PUSH
59933: LD_VAR 0 58
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: PUSH
59946: LD_VAR 0 4
59950: PUSH
59951: LD_INT 1
59953: PLUS
59954: ARRAY
59955: ST_TO_ADDR
59956: GO 60065
59958: LD_INT 31
59960: DOUBLE
59961: EQUAL
59962: IFTRUE 60008
59964: LD_INT 32
59966: DOUBLE
59967: EQUAL
59968: IFTRUE 60008
59970: LD_INT 33
59972: DOUBLE
59973: EQUAL
59974: IFTRUE 60008
59976: LD_INT 27
59978: DOUBLE
59979: EQUAL
59980: IFTRUE 60008
59982: LD_INT 26
59984: DOUBLE
59985: EQUAL
59986: IFTRUE 60008
59988: LD_INT 28
59990: DOUBLE
59991: EQUAL
59992: IFTRUE 60008
59994: LD_INT 29
59996: DOUBLE
59997: EQUAL
59998: IFTRUE 60008
60000: LD_INT 30
60002: DOUBLE
60003: EQUAL
60004: IFTRUE 60008
60006: GO 60064
60008: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
60009: LD_ADDR_VAR 0 9
60013: PUSH
60014: LD_VAR 0 59
60018: PUSH
60019: LD_VAR 0 60
60023: PUSH
60024: LD_VAR 0 61
60028: PUSH
60029: LD_VAR 0 62
60033: PUSH
60034: LD_VAR 0 63
60038: PUSH
60039: LD_VAR 0 64
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: PUSH
60052: LD_VAR 0 4
60056: PUSH
60057: LD_INT 1
60059: PLUS
60060: ARRAY
60061: ST_TO_ADDR
60062: GO 60065
60064: POP
// temp_list2 = [ ] ;
60065: LD_ADDR_VAR 0 10
60069: PUSH
60070: EMPTY
60071: ST_TO_ADDR
// for i in temp_list do
60072: LD_ADDR_VAR 0 8
60076: PUSH
60077: LD_VAR 0 9
60081: PUSH
60082: FOR_IN
60083: IFFALSE 60135
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60085: LD_ADDR_VAR 0 10
60089: PUSH
60090: LD_VAR 0 10
60094: PUSH
60095: LD_VAR 0 8
60099: PUSH
60100: LD_INT 1
60102: ARRAY
60103: PUSH
60104: LD_VAR 0 2
60108: PLUS
60109: PUSH
60110: LD_VAR 0 8
60114: PUSH
60115: LD_INT 2
60117: ARRAY
60118: PUSH
60119: LD_VAR 0 3
60123: PLUS
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: EMPTY
60130: LIST
60131: ADD
60132: ST_TO_ADDR
60133: GO 60082
60135: POP
60136: POP
// result = temp_list2 ;
60137: LD_ADDR_VAR 0 7
60141: PUSH
60142: LD_VAR 0 10
60146: ST_TO_ADDR
// end ;
60147: LD_VAR 0 7
60151: RET
// export function EnemyInRange ( unit , dist ) ; begin
60152: LD_INT 0
60154: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60155: LD_ADDR_VAR 0 3
60159: PUSH
60160: LD_VAR 0 1
60164: PPUSH
60165: CALL_OW 255
60169: PPUSH
60170: LD_VAR 0 1
60174: PPUSH
60175: CALL_OW 250
60179: PPUSH
60180: LD_VAR 0 1
60184: PPUSH
60185: CALL_OW 251
60189: PPUSH
60190: LD_VAR 0 2
60194: PPUSH
60195: CALL 34256 0 4
60199: PUSH
60200: LD_INT 4
60202: ARRAY
60203: ST_TO_ADDR
// end ;
60204: LD_VAR 0 3
60208: RET
// export function PlayerSeeMe ( unit ) ; begin
60209: LD_INT 0
60211: PPUSH
// result := See ( your_side , unit ) ;
60212: LD_ADDR_VAR 0 2
60216: PUSH
60217: LD_OWVAR 2
60221: PPUSH
60222: LD_VAR 0 1
60226: PPUSH
60227: CALL_OW 292
60231: ST_TO_ADDR
// end ;
60232: LD_VAR 0 2
60236: RET
// export function ReverseDir ( unit ) ; begin
60237: LD_INT 0
60239: PPUSH
// if not unit then
60240: LD_VAR 0 1
60244: NOT
60245: IFFALSE 60249
// exit ;
60247: GO 60272
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60249: LD_ADDR_VAR 0 2
60253: PUSH
60254: LD_VAR 0 1
60258: PPUSH
60259: CALL_OW 254
60263: PUSH
60264: LD_INT 3
60266: PLUS
60267: PUSH
60268: LD_INT 6
60270: MOD
60271: ST_TO_ADDR
// end ;
60272: LD_VAR 0 2
60276: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60277: LD_INT 0
60279: PPUSH
60280: PPUSH
60281: PPUSH
60282: PPUSH
60283: PPUSH
// if not hexes then
60284: LD_VAR 0 2
60288: NOT
60289: IFFALSE 60293
// exit ;
60291: GO 60441
// dist := 9999 ;
60293: LD_ADDR_VAR 0 5
60297: PUSH
60298: LD_INT 9999
60300: ST_TO_ADDR
// for i = 1 to hexes do
60301: LD_ADDR_VAR 0 4
60305: PUSH
60306: DOUBLE
60307: LD_INT 1
60309: DEC
60310: ST_TO_ADDR
60311: LD_VAR 0 2
60315: PUSH
60316: FOR_TO
60317: IFFALSE 60429
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60319: LD_VAR 0 1
60323: PPUSH
60324: LD_VAR 0 2
60328: PUSH
60329: LD_VAR 0 4
60333: ARRAY
60334: PUSH
60335: LD_INT 1
60337: ARRAY
60338: PPUSH
60339: LD_VAR 0 2
60343: PUSH
60344: LD_VAR 0 4
60348: ARRAY
60349: PUSH
60350: LD_INT 2
60352: ARRAY
60353: PPUSH
60354: CALL_OW 297
60358: PUSH
60359: LD_VAR 0 5
60363: LESS
60364: IFFALSE 60427
// begin hex := hexes [ i ] ;
60366: LD_ADDR_VAR 0 7
60370: PUSH
60371: LD_VAR 0 2
60375: PUSH
60376: LD_VAR 0 4
60380: ARRAY
60381: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60382: LD_ADDR_VAR 0 5
60386: PUSH
60387: LD_VAR 0 1
60391: PPUSH
60392: LD_VAR 0 2
60396: PUSH
60397: LD_VAR 0 4
60401: ARRAY
60402: PUSH
60403: LD_INT 1
60405: ARRAY
60406: PPUSH
60407: LD_VAR 0 2
60411: PUSH
60412: LD_VAR 0 4
60416: ARRAY
60417: PUSH
60418: LD_INT 2
60420: ARRAY
60421: PPUSH
60422: CALL_OW 297
60426: ST_TO_ADDR
// end ; end ;
60427: GO 60316
60429: POP
60430: POP
// result := hex ;
60431: LD_ADDR_VAR 0 3
60435: PUSH
60436: LD_VAR 0 7
60440: ST_TO_ADDR
// end ;
60441: LD_VAR 0 3
60445: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60446: LD_INT 0
60448: PPUSH
60449: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60450: LD_VAR 0 1
60454: NOT
60455: PUSH
60456: LD_VAR 0 1
60460: PUSH
60461: LD_INT 21
60463: PUSH
60464: LD_INT 2
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 23
60473: PUSH
60474: LD_INT 2
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PPUSH
60485: CALL_OW 69
60489: IN
60490: NOT
60491: OR
60492: IFFALSE 60496
// exit ;
60494: GO 60543
// for i = 1 to 3 do
60496: LD_ADDR_VAR 0 3
60500: PUSH
60501: DOUBLE
60502: LD_INT 1
60504: DEC
60505: ST_TO_ADDR
60506: LD_INT 3
60508: PUSH
60509: FOR_TO
60510: IFFALSE 60541
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60512: LD_VAR 0 1
60516: PPUSH
60517: CALL_OW 250
60521: PPUSH
60522: LD_VAR 0 1
60526: PPUSH
60527: CALL_OW 251
60531: PPUSH
60532: LD_INT 1
60534: PPUSH
60535: CALL_OW 453
60539: GO 60509
60541: POP
60542: POP
// end ;
60543: LD_VAR 0 2
60547: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60548: LD_INT 0
60550: PPUSH
60551: PPUSH
60552: PPUSH
60553: PPUSH
60554: PPUSH
60555: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60556: LD_VAR 0 1
60560: NOT
60561: PUSH
60562: LD_VAR 0 2
60566: NOT
60567: OR
60568: PUSH
60569: LD_VAR 0 1
60573: PPUSH
60574: CALL_OW 314
60578: OR
60579: IFFALSE 60583
// exit ;
60581: GO 61024
// x := GetX ( enemy_unit ) ;
60583: LD_ADDR_VAR 0 7
60587: PUSH
60588: LD_VAR 0 2
60592: PPUSH
60593: CALL_OW 250
60597: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60598: LD_ADDR_VAR 0 8
60602: PUSH
60603: LD_VAR 0 2
60607: PPUSH
60608: CALL_OW 251
60612: ST_TO_ADDR
// if not x or not y then
60613: LD_VAR 0 7
60617: NOT
60618: PUSH
60619: LD_VAR 0 8
60623: NOT
60624: OR
60625: IFFALSE 60629
// exit ;
60627: GO 61024
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60629: LD_ADDR_VAR 0 6
60633: PUSH
60634: LD_VAR 0 7
60638: PPUSH
60639: LD_INT 0
60641: PPUSH
60642: LD_INT 4
60644: PPUSH
60645: CALL_OW 272
60649: PUSH
60650: LD_VAR 0 8
60654: PPUSH
60655: LD_INT 0
60657: PPUSH
60658: LD_INT 4
60660: PPUSH
60661: CALL_OW 273
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_VAR 0 7
60674: PPUSH
60675: LD_INT 1
60677: PPUSH
60678: LD_INT 4
60680: PPUSH
60681: CALL_OW 272
60685: PUSH
60686: LD_VAR 0 8
60690: PPUSH
60691: LD_INT 1
60693: PPUSH
60694: LD_INT 4
60696: PPUSH
60697: CALL_OW 273
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_VAR 0 7
60710: PPUSH
60711: LD_INT 2
60713: PPUSH
60714: LD_INT 4
60716: PPUSH
60717: CALL_OW 272
60721: PUSH
60722: LD_VAR 0 8
60726: PPUSH
60727: LD_INT 2
60729: PPUSH
60730: LD_INT 4
60732: PPUSH
60733: CALL_OW 273
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_VAR 0 7
60746: PPUSH
60747: LD_INT 3
60749: PPUSH
60750: LD_INT 4
60752: PPUSH
60753: CALL_OW 272
60757: PUSH
60758: LD_VAR 0 8
60762: PPUSH
60763: LD_INT 3
60765: PPUSH
60766: LD_INT 4
60768: PPUSH
60769: CALL_OW 273
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_VAR 0 7
60782: PPUSH
60783: LD_INT 4
60785: PPUSH
60786: LD_INT 4
60788: PPUSH
60789: CALL_OW 272
60793: PUSH
60794: LD_VAR 0 8
60798: PPUSH
60799: LD_INT 4
60801: PPUSH
60802: LD_INT 4
60804: PPUSH
60805: CALL_OW 273
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_VAR 0 7
60818: PPUSH
60819: LD_INT 5
60821: PPUSH
60822: LD_INT 4
60824: PPUSH
60825: CALL_OW 272
60829: PUSH
60830: LD_VAR 0 8
60834: PPUSH
60835: LD_INT 5
60837: PPUSH
60838: LD_INT 4
60840: PPUSH
60841: CALL_OW 273
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: ST_TO_ADDR
// for i = tmp downto 1 do
60858: LD_ADDR_VAR 0 4
60862: PUSH
60863: DOUBLE
60864: LD_VAR 0 6
60868: INC
60869: ST_TO_ADDR
60870: LD_INT 1
60872: PUSH
60873: FOR_DOWNTO
60874: IFFALSE 60975
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60876: LD_VAR 0 6
60880: PUSH
60881: LD_VAR 0 4
60885: ARRAY
60886: PUSH
60887: LD_INT 1
60889: ARRAY
60890: PPUSH
60891: LD_VAR 0 6
60895: PUSH
60896: LD_VAR 0 4
60900: ARRAY
60901: PUSH
60902: LD_INT 2
60904: ARRAY
60905: PPUSH
60906: CALL_OW 488
60910: NOT
60911: PUSH
60912: LD_VAR 0 6
60916: PUSH
60917: LD_VAR 0 4
60921: ARRAY
60922: PUSH
60923: LD_INT 1
60925: ARRAY
60926: PPUSH
60927: LD_VAR 0 6
60931: PUSH
60932: LD_VAR 0 4
60936: ARRAY
60937: PUSH
60938: LD_INT 2
60940: ARRAY
60941: PPUSH
60942: CALL_OW 428
60946: PUSH
60947: LD_INT 0
60949: NONEQUAL
60950: OR
60951: IFFALSE 60973
// tmp := Delete ( tmp , i ) ;
60953: LD_ADDR_VAR 0 6
60957: PUSH
60958: LD_VAR 0 6
60962: PPUSH
60963: LD_VAR 0 4
60967: PPUSH
60968: CALL_OW 3
60972: ST_TO_ADDR
60973: GO 60873
60975: POP
60976: POP
// j := GetClosestHex ( unit , tmp ) ;
60977: LD_ADDR_VAR 0 5
60981: PUSH
60982: LD_VAR 0 1
60986: PPUSH
60987: LD_VAR 0 6
60991: PPUSH
60992: CALL 60277 0 2
60996: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60997: LD_VAR 0 1
61001: PPUSH
61002: LD_VAR 0 5
61006: PUSH
61007: LD_INT 1
61009: ARRAY
61010: PPUSH
61011: LD_VAR 0 5
61015: PUSH
61016: LD_INT 2
61018: ARRAY
61019: PPUSH
61020: CALL_OW 111
// end ;
61024: LD_VAR 0 3
61028: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61029: LD_INT 0
61031: PPUSH
61032: PPUSH
61033: PPUSH
// uc_side = 0 ;
61034: LD_ADDR_OWVAR 20
61038: PUSH
61039: LD_INT 0
61041: ST_TO_ADDR
// uc_nation = 0 ;
61042: LD_ADDR_OWVAR 21
61046: PUSH
61047: LD_INT 0
61049: ST_TO_ADDR
// InitHc ;
61050: CALL_OW 19
// InitVc ;
61054: CALL_OW 20
// if mastodonts then
61058: LD_VAR 0 6
61062: IFFALSE 61129
// for i = 1 to mastodonts do
61064: LD_ADDR_VAR 0 11
61068: PUSH
61069: DOUBLE
61070: LD_INT 1
61072: DEC
61073: ST_TO_ADDR
61074: LD_VAR 0 6
61078: PUSH
61079: FOR_TO
61080: IFFALSE 61127
// begin vc_chassis := 31 ;
61082: LD_ADDR_OWVAR 37
61086: PUSH
61087: LD_INT 31
61089: ST_TO_ADDR
// vc_control := control_rider ;
61090: LD_ADDR_OWVAR 38
61094: PUSH
61095: LD_INT 4
61097: ST_TO_ADDR
// animal := CreateVehicle ;
61098: LD_ADDR_VAR 0 12
61102: PUSH
61103: CALL_OW 45
61107: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61108: LD_VAR 0 12
61112: PPUSH
61113: LD_VAR 0 8
61117: PPUSH
61118: LD_INT 0
61120: PPUSH
61121: CALL 63198 0 3
// end ;
61125: GO 61079
61127: POP
61128: POP
// if horses then
61129: LD_VAR 0 5
61133: IFFALSE 61200
// for i = 1 to horses do
61135: LD_ADDR_VAR 0 11
61139: PUSH
61140: DOUBLE
61141: LD_INT 1
61143: DEC
61144: ST_TO_ADDR
61145: LD_VAR 0 5
61149: PUSH
61150: FOR_TO
61151: IFFALSE 61198
// begin hc_class := 21 ;
61153: LD_ADDR_OWVAR 28
61157: PUSH
61158: LD_INT 21
61160: ST_TO_ADDR
// hc_gallery :=  ;
61161: LD_ADDR_OWVAR 33
61165: PUSH
61166: LD_STRING 
61168: ST_TO_ADDR
// animal := CreateHuman ;
61169: LD_ADDR_VAR 0 12
61173: PUSH
61174: CALL_OW 44
61178: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61179: LD_VAR 0 12
61183: PPUSH
61184: LD_VAR 0 8
61188: PPUSH
61189: LD_INT 0
61191: PPUSH
61192: CALL 63198 0 3
// end ;
61196: GO 61150
61198: POP
61199: POP
// if birds then
61200: LD_VAR 0 1
61204: IFFALSE 61271
// for i = 1 to birds do
61206: LD_ADDR_VAR 0 11
61210: PUSH
61211: DOUBLE
61212: LD_INT 1
61214: DEC
61215: ST_TO_ADDR
61216: LD_VAR 0 1
61220: PUSH
61221: FOR_TO
61222: IFFALSE 61269
// begin hc_class = 18 ;
61224: LD_ADDR_OWVAR 28
61228: PUSH
61229: LD_INT 18
61231: ST_TO_ADDR
// hc_gallery =  ;
61232: LD_ADDR_OWVAR 33
61236: PUSH
61237: LD_STRING 
61239: ST_TO_ADDR
// animal := CreateHuman ;
61240: LD_ADDR_VAR 0 12
61244: PUSH
61245: CALL_OW 44
61249: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61250: LD_VAR 0 12
61254: PPUSH
61255: LD_VAR 0 8
61259: PPUSH
61260: LD_INT 0
61262: PPUSH
61263: CALL 63198 0 3
// end ;
61267: GO 61221
61269: POP
61270: POP
// if tigers then
61271: LD_VAR 0 2
61275: IFFALSE 61359
// for i = 1 to tigers do
61277: LD_ADDR_VAR 0 11
61281: PUSH
61282: DOUBLE
61283: LD_INT 1
61285: DEC
61286: ST_TO_ADDR
61287: LD_VAR 0 2
61291: PUSH
61292: FOR_TO
61293: IFFALSE 61357
// begin hc_class = class_tiger ;
61295: LD_ADDR_OWVAR 28
61299: PUSH
61300: LD_INT 14
61302: ST_TO_ADDR
// hc_gallery =  ;
61303: LD_ADDR_OWVAR 33
61307: PUSH
61308: LD_STRING 
61310: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61311: LD_ADDR_OWVAR 35
61315: PUSH
61316: LD_INT 7
61318: NEG
61319: PPUSH
61320: LD_INT 7
61322: PPUSH
61323: CALL_OW 12
61327: ST_TO_ADDR
// animal := CreateHuman ;
61328: LD_ADDR_VAR 0 12
61332: PUSH
61333: CALL_OW 44
61337: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61338: LD_VAR 0 12
61342: PPUSH
61343: LD_VAR 0 8
61347: PPUSH
61348: LD_INT 0
61350: PPUSH
61351: CALL 63198 0 3
// end ;
61355: GO 61292
61357: POP
61358: POP
// if apemans then
61359: LD_VAR 0 3
61363: IFFALSE 61486
// for i = 1 to apemans do
61365: LD_ADDR_VAR 0 11
61369: PUSH
61370: DOUBLE
61371: LD_INT 1
61373: DEC
61374: ST_TO_ADDR
61375: LD_VAR 0 3
61379: PUSH
61380: FOR_TO
61381: IFFALSE 61484
// begin hc_class = class_apeman ;
61383: LD_ADDR_OWVAR 28
61387: PUSH
61388: LD_INT 12
61390: ST_TO_ADDR
// hc_gallery =  ;
61391: LD_ADDR_OWVAR 33
61395: PUSH
61396: LD_STRING 
61398: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
61399: LD_ADDR_OWVAR 35
61403: PUSH
61404: LD_INT 5
61406: NEG
61407: PPUSH
61408: LD_INT 5
61410: PPUSH
61411: CALL_OW 12
61415: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61416: LD_ADDR_OWVAR 31
61420: PUSH
61421: LD_INT 1
61423: PPUSH
61424: LD_INT 3
61426: PPUSH
61427: CALL_OW 12
61431: PUSH
61432: LD_INT 1
61434: PPUSH
61435: LD_INT 3
61437: PPUSH
61438: CALL_OW 12
61442: PUSH
61443: LD_INT 0
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: ST_TO_ADDR
// animal := CreateHuman ;
61455: LD_ADDR_VAR 0 12
61459: PUSH
61460: CALL_OW 44
61464: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61465: LD_VAR 0 12
61469: PPUSH
61470: LD_VAR 0 8
61474: PPUSH
61475: LD_INT 0
61477: PPUSH
61478: CALL 63198 0 3
// end ;
61482: GO 61380
61484: POP
61485: POP
// if enchidnas then
61486: LD_VAR 0 4
61490: IFFALSE 61557
// for i = 1 to enchidnas do
61492: LD_ADDR_VAR 0 11
61496: PUSH
61497: DOUBLE
61498: LD_INT 1
61500: DEC
61501: ST_TO_ADDR
61502: LD_VAR 0 4
61506: PUSH
61507: FOR_TO
61508: IFFALSE 61555
// begin hc_class = 13 ;
61510: LD_ADDR_OWVAR 28
61514: PUSH
61515: LD_INT 13
61517: ST_TO_ADDR
// hc_gallery =  ;
61518: LD_ADDR_OWVAR 33
61522: PUSH
61523: LD_STRING 
61525: ST_TO_ADDR
// animal := CreateHuman ;
61526: LD_ADDR_VAR 0 12
61530: PUSH
61531: CALL_OW 44
61535: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61536: LD_VAR 0 12
61540: PPUSH
61541: LD_VAR 0 8
61545: PPUSH
61546: LD_INT 0
61548: PPUSH
61549: CALL 63198 0 3
// end ;
61553: GO 61507
61555: POP
61556: POP
// if fishes then
61557: LD_VAR 0 7
61561: IFFALSE 61628
// for i = 1 to fishes do
61563: LD_ADDR_VAR 0 11
61567: PUSH
61568: DOUBLE
61569: LD_INT 1
61571: DEC
61572: ST_TO_ADDR
61573: LD_VAR 0 7
61577: PUSH
61578: FOR_TO
61579: IFFALSE 61626
// begin hc_class = 20 ;
61581: LD_ADDR_OWVAR 28
61585: PUSH
61586: LD_INT 20
61588: ST_TO_ADDR
// hc_gallery =  ;
61589: LD_ADDR_OWVAR 33
61593: PUSH
61594: LD_STRING 
61596: ST_TO_ADDR
// animal := CreateHuman ;
61597: LD_ADDR_VAR 0 12
61601: PUSH
61602: CALL_OW 44
61606: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61607: LD_VAR 0 12
61611: PPUSH
61612: LD_VAR 0 9
61616: PPUSH
61617: LD_INT 0
61619: PPUSH
61620: CALL 63198 0 3
// end ;
61624: GO 61578
61626: POP
61627: POP
// end ;
61628: LD_VAR 0 10
61632: RET
// export function WantHeal ( sci , unit ) ; begin
61633: LD_INT 0
61635: PPUSH
// if GetTaskList ( sci ) > 0 then
61636: LD_VAR 0 1
61640: PPUSH
61641: CALL_OW 437
61645: PUSH
61646: LD_INT 0
61648: GREATER
61649: IFFALSE 61719
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61651: LD_VAR 0 1
61655: PPUSH
61656: CALL_OW 437
61660: PUSH
61661: LD_INT 1
61663: ARRAY
61664: PUSH
61665: LD_INT 1
61667: ARRAY
61668: PUSH
61669: LD_STRING l
61671: EQUAL
61672: PUSH
61673: LD_VAR 0 1
61677: PPUSH
61678: CALL_OW 437
61682: PUSH
61683: LD_INT 1
61685: ARRAY
61686: PUSH
61687: LD_INT 4
61689: ARRAY
61690: PUSH
61691: LD_VAR 0 2
61695: EQUAL
61696: AND
61697: IFFALSE 61709
// result := true else
61699: LD_ADDR_VAR 0 3
61703: PUSH
61704: LD_INT 1
61706: ST_TO_ADDR
61707: GO 61717
// result := false ;
61709: LD_ADDR_VAR 0 3
61713: PUSH
61714: LD_INT 0
61716: ST_TO_ADDR
// end else
61717: GO 61727
// result := false ;
61719: LD_ADDR_VAR 0 3
61723: PUSH
61724: LD_INT 0
61726: ST_TO_ADDR
// end ;
61727: LD_VAR 0 3
61731: RET
// export function HealTarget ( sci ) ; begin
61732: LD_INT 0
61734: PPUSH
// if not sci then
61735: LD_VAR 0 1
61739: NOT
61740: IFFALSE 61744
// exit ;
61742: GO 61809
// result := 0 ;
61744: LD_ADDR_VAR 0 2
61748: PUSH
61749: LD_INT 0
61751: ST_TO_ADDR
// if GetTaskList ( sci ) then
61752: LD_VAR 0 1
61756: PPUSH
61757: CALL_OW 437
61761: IFFALSE 61809
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61763: LD_VAR 0 1
61767: PPUSH
61768: CALL_OW 437
61772: PUSH
61773: LD_INT 1
61775: ARRAY
61776: PUSH
61777: LD_INT 1
61779: ARRAY
61780: PUSH
61781: LD_STRING l
61783: EQUAL
61784: IFFALSE 61809
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61786: LD_ADDR_VAR 0 2
61790: PUSH
61791: LD_VAR 0 1
61795: PPUSH
61796: CALL_OW 437
61800: PUSH
61801: LD_INT 1
61803: ARRAY
61804: PUSH
61805: LD_INT 4
61807: ARRAY
61808: ST_TO_ADDR
// end ;
61809: LD_VAR 0 2
61813: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61814: LD_INT 0
61816: PPUSH
61817: PPUSH
61818: PPUSH
61819: PPUSH
// if not base_units then
61820: LD_VAR 0 1
61824: NOT
61825: IFFALSE 61829
// exit ;
61827: GO 61916
// result := false ;
61829: LD_ADDR_VAR 0 2
61833: PUSH
61834: LD_INT 0
61836: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61837: LD_ADDR_VAR 0 5
61841: PUSH
61842: LD_VAR 0 1
61846: PPUSH
61847: LD_INT 21
61849: PUSH
61850: LD_INT 3
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PPUSH
61857: CALL_OW 72
61861: ST_TO_ADDR
// if not tmp then
61862: LD_VAR 0 5
61866: NOT
61867: IFFALSE 61871
// exit ;
61869: GO 61916
// for i in tmp do
61871: LD_ADDR_VAR 0 3
61875: PUSH
61876: LD_VAR 0 5
61880: PUSH
61881: FOR_IN
61882: IFFALSE 61914
// begin result := EnemyInRange ( i , 22 ) ;
61884: LD_ADDR_VAR 0 2
61888: PUSH
61889: LD_VAR 0 3
61893: PPUSH
61894: LD_INT 22
61896: PPUSH
61897: CALL 60152 0 2
61901: ST_TO_ADDR
// if result then
61902: LD_VAR 0 2
61906: IFFALSE 61912
// exit ;
61908: POP
61909: POP
61910: GO 61916
// end ;
61912: GO 61881
61914: POP
61915: POP
// end ;
61916: LD_VAR 0 2
61920: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61921: LD_INT 0
61923: PPUSH
61924: PPUSH
// if not units then
61925: LD_VAR 0 1
61929: NOT
61930: IFFALSE 61934
// exit ;
61932: GO 62004
// result := [ ] ;
61934: LD_ADDR_VAR 0 3
61938: PUSH
61939: EMPTY
61940: ST_TO_ADDR
// for i in units do
61941: LD_ADDR_VAR 0 4
61945: PUSH
61946: LD_VAR 0 1
61950: PUSH
61951: FOR_IN
61952: IFFALSE 62002
// if GetTag ( i ) = tag then
61954: LD_VAR 0 4
61958: PPUSH
61959: CALL_OW 110
61963: PUSH
61964: LD_VAR 0 2
61968: EQUAL
61969: IFFALSE 62000
// result := Insert ( result , result + 1 , i ) ;
61971: LD_ADDR_VAR 0 3
61975: PUSH
61976: LD_VAR 0 3
61980: PPUSH
61981: LD_VAR 0 3
61985: PUSH
61986: LD_INT 1
61988: PLUS
61989: PPUSH
61990: LD_VAR 0 4
61994: PPUSH
61995: CALL_OW 2
61999: ST_TO_ADDR
62000: GO 61951
62002: POP
62003: POP
// end ;
62004: LD_VAR 0 3
62008: RET
// export function IsDriver ( un ) ; begin
62009: LD_INT 0
62011: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62012: LD_ADDR_VAR 0 2
62016: PUSH
62017: LD_VAR 0 1
62021: PUSH
62022: LD_INT 55
62024: PUSH
62025: EMPTY
62026: LIST
62027: PPUSH
62028: CALL_OW 69
62032: IN
62033: ST_TO_ADDR
// end ;
62034: LD_VAR 0 2
62038: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62039: LD_INT 0
62041: PPUSH
62042: PPUSH
// list := [ ] ;
62043: LD_ADDR_VAR 0 5
62047: PUSH
62048: EMPTY
62049: ST_TO_ADDR
// case d of 0 :
62050: LD_VAR 0 3
62054: PUSH
62055: LD_INT 0
62057: DOUBLE
62058: EQUAL
62059: IFTRUE 62063
62061: GO 62196
62063: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62064: LD_ADDR_VAR 0 5
62068: PUSH
62069: LD_VAR 0 1
62073: PUSH
62074: LD_INT 4
62076: MINUS
62077: PUSH
62078: LD_VAR 0 2
62082: PUSH
62083: LD_INT 4
62085: MINUS
62086: PUSH
62087: LD_INT 2
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: LIST
62094: PUSH
62095: LD_VAR 0 1
62099: PUSH
62100: LD_INT 3
62102: MINUS
62103: PUSH
62104: LD_VAR 0 2
62108: PUSH
62109: LD_INT 1
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: LIST
62116: PUSH
62117: LD_VAR 0 1
62121: PUSH
62122: LD_INT 4
62124: PLUS
62125: PUSH
62126: LD_VAR 0 2
62130: PUSH
62131: LD_INT 4
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: LIST
62138: PUSH
62139: LD_VAR 0 1
62143: PUSH
62144: LD_INT 3
62146: PLUS
62147: PUSH
62148: LD_VAR 0 2
62152: PUSH
62153: LD_INT 3
62155: PLUS
62156: PUSH
62157: LD_INT 5
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: LIST
62164: PUSH
62165: LD_VAR 0 1
62169: PUSH
62170: LD_VAR 0 2
62174: PUSH
62175: LD_INT 4
62177: PLUS
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: LIST
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: ST_TO_ADDR
// end ; 1 :
62194: GO 62894
62196: LD_INT 1
62198: DOUBLE
62199: EQUAL
62200: IFTRUE 62204
62202: GO 62337
62204: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62205: LD_ADDR_VAR 0 5
62209: PUSH
62210: LD_VAR 0 1
62214: PUSH
62215: LD_VAR 0 2
62219: PUSH
62220: LD_INT 4
62222: MINUS
62223: PUSH
62224: LD_INT 3
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: LIST
62231: PUSH
62232: LD_VAR 0 1
62236: PUSH
62237: LD_INT 3
62239: MINUS
62240: PUSH
62241: LD_VAR 0 2
62245: PUSH
62246: LD_INT 3
62248: MINUS
62249: PUSH
62250: LD_INT 2
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: LIST
62257: PUSH
62258: LD_VAR 0 1
62262: PUSH
62263: LD_INT 4
62265: MINUS
62266: PUSH
62267: LD_VAR 0 2
62271: PUSH
62272: LD_INT 1
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: LIST
62279: PUSH
62280: LD_VAR 0 1
62284: PUSH
62285: LD_VAR 0 2
62289: PUSH
62290: LD_INT 3
62292: PLUS
62293: PUSH
62294: LD_INT 0
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: LIST
62301: PUSH
62302: LD_VAR 0 1
62306: PUSH
62307: LD_INT 4
62309: PLUS
62310: PUSH
62311: LD_VAR 0 2
62315: PUSH
62316: LD_INT 4
62318: PLUS
62319: PUSH
62320: LD_INT 5
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: LIST
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: ST_TO_ADDR
// end ; 2 :
62335: GO 62894
62337: LD_INT 2
62339: DOUBLE
62340: EQUAL
62341: IFTRUE 62345
62343: GO 62474
62345: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62346: LD_ADDR_VAR 0 5
62350: PUSH
62351: LD_VAR 0 1
62355: PUSH
62356: LD_VAR 0 2
62360: PUSH
62361: LD_INT 3
62363: MINUS
62364: PUSH
62365: LD_INT 3
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: LIST
62372: PUSH
62373: LD_VAR 0 1
62377: PUSH
62378: LD_INT 4
62380: PLUS
62381: PUSH
62382: LD_VAR 0 2
62386: PUSH
62387: LD_INT 4
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: LIST
62394: PUSH
62395: LD_VAR 0 1
62399: PUSH
62400: LD_VAR 0 2
62404: PUSH
62405: LD_INT 4
62407: PLUS
62408: PUSH
62409: LD_INT 0
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: LIST
62416: PUSH
62417: LD_VAR 0 1
62421: PUSH
62422: LD_INT 3
62424: MINUS
62425: PUSH
62426: LD_VAR 0 2
62430: PUSH
62431: LD_INT 1
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: LIST
62438: PUSH
62439: LD_VAR 0 1
62443: PUSH
62444: LD_INT 4
62446: MINUS
62447: PUSH
62448: LD_VAR 0 2
62452: PUSH
62453: LD_INT 4
62455: MINUS
62456: PUSH
62457: LD_INT 2
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: LIST
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: ST_TO_ADDR
// end ; 3 :
62472: GO 62894
62474: LD_INT 3
62476: DOUBLE
62477: EQUAL
62478: IFTRUE 62482
62480: GO 62615
62482: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62483: LD_ADDR_VAR 0 5
62487: PUSH
62488: LD_VAR 0 1
62492: PUSH
62493: LD_INT 3
62495: PLUS
62496: PUSH
62497: LD_VAR 0 2
62501: PUSH
62502: LD_INT 4
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: LIST
62509: PUSH
62510: LD_VAR 0 1
62514: PUSH
62515: LD_INT 4
62517: PLUS
62518: PUSH
62519: LD_VAR 0 2
62523: PUSH
62524: LD_INT 4
62526: PLUS
62527: PUSH
62528: LD_INT 5
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: LIST
62535: PUSH
62536: LD_VAR 0 1
62540: PUSH
62541: LD_INT 4
62543: MINUS
62544: PUSH
62545: LD_VAR 0 2
62549: PUSH
62550: LD_INT 1
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: LIST
62557: PUSH
62558: LD_VAR 0 1
62562: PUSH
62563: LD_VAR 0 2
62567: PUSH
62568: LD_INT 4
62570: MINUS
62571: PUSH
62572: LD_INT 3
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: LIST
62579: PUSH
62580: LD_VAR 0 1
62584: PUSH
62585: LD_INT 3
62587: MINUS
62588: PUSH
62589: LD_VAR 0 2
62593: PUSH
62594: LD_INT 3
62596: MINUS
62597: PUSH
62598: LD_INT 2
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: LIST
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: ST_TO_ADDR
// end ; 4 :
62613: GO 62894
62615: LD_INT 4
62617: DOUBLE
62618: EQUAL
62619: IFTRUE 62623
62621: GO 62756
62623: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62624: LD_ADDR_VAR 0 5
62628: PUSH
62629: LD_VAR 0 1
62633: PUSH
62634: LD_VAR 0 2
62638: PUSH
62639: LD_INT 4
62641: PLUS
62642: PUSH
62643: LD_INT 0
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: LIST
62650: PUSH
62651: LD_VAR 0 1
62655: PUSH
62656: LD_INT 3
62658: PLUS
62659: PUSH
62660: LD_VAR 0 2
62664: PUSH
62665: LD_INT 3
62667: PLUS
62668: PUSH
62669: LD_INT 5
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: LIST
62676: PUSH
62677: LD_VAR 0 1
62681: PUSH
62682: LD_INT 4
62684: PLUS
62685: PUSH
62686: LD_VAR 0 2
62690: PUSH
62691: LD_INT 4
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: LIST
62698: PUSH
62699: LD_VAR 0 1
62703: PUSH
62704: LD_VAR 0 2
62708: PUSH
62709: LD_INT 3
62711: MINUS
62712: PUSH
62713: LD_INT 3
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: LIST
62720: PUSH
62721: LD_VAR 0 1
62725: PUSH
62726: LD_INT 4
62728: MINUS
62729: PUSH
62730: LD_VAR 0 2
62734: PUSH
62735: LD_INT 4
62737: MINUS
62738: PUSH
62739: LD_INT 2
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: LIST
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: ST_TO_ADDR
// end ; 5 :
62754: GO 62894
62756: LD_INT 5
62758: DOUBLE
62759: EQUAL
62760: IFTRUE 62764
62762: GO 62893
62764: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62765: LD_ADDR_VAR 0 5
62769: PUSH
62770: LD_VAR 0 1
62774: PUSH
62775: LD_INT 4
62777: MINUS
62778: PUSH
62779: LD_VAR 0 2
62783: PUSH
62784: LD_INT 1
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: LIST
62791: PUSH
62792: LD_VAR 0 1
62796: PUSH
62797: LD_VAR 0 2
62801: PUSH
62802: LD_INT 4
62804: MINUS
62805: PUSH
62806: LD_INT 3
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: LIST
62813: PUSH
62814: LD_VAR 0 1
62818: PUSH
62819: LD_INT 4
62821: PLUS
62822: PUSH
62823: LD_VAR 0 2
62827: PUSH
62828: LD_INT 4
62830: PLUS
62831: PUSH
62832: LD_INT 5
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: LIST
62839: PUSH
62840: LD_VAR 0 1
62844: PUSH
62845: LD_INT 3
62847: PLUS
62848: PUSH
62849: LD_VAR 0 2
62853: PUSH
62854: LD_INT 4
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: LIST
62861: PUSH
62862: LD_VAR 0 1
62866: PUSH
62867: LD_VAR 0 2
62871: PUSH
62872: LD_INT 3
62874: PLUS
62875: PUSH
62876: LD_INT 0
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: LIST
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: ST_TO_ADDR
// end ; end ;
62891: GO 62894
62893: POP
// result := list ;
62894: LD_ADDR_VAR 0 4
62898: PUSH
62899: LD_VAR 0 5
62903: ST_TO_ADDR
// end ;
62904: LD_VAR 0 4
62908: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62909: LD_INT 0
62911: PPUSH
62912: PPUSH
62913: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62914: LD_VAR 0 1
62918: NOT
62919: PUSH
62920: LD_VAR 0 2
62924: PUSH
62925: LD_INT 1
62927: PUSH
62928: LD_INT 2
62930: PUSH
62931: LD_INT 3
62933: PUSH
62934: LD_INT 4
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: IN
62943: NOT
62944: OR
62945: IFFALSE 62949
// exit ;
62947: GO 63041
// tmp := [ ] ;
62949: LD_ADDR_VAR 0 5
62953: PUSH
62954: EMPTY
62955: ST_TO_ADDR
// for i in units do
62956: LD_ADDR_VAR 0 4
62960: PUSH
62961: LD_VAR 0 1
62965: PUSH
62966: FOR_IN
62967: IFFALSE 63010
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62969: LD_ADDR_VAR 0 5
62973: PUSH
62974: LD_VAR 0 5
62978: PPUSH
62979: LD_VAR 0 5
62983: PUSH
62984: LD_INT 1
62986: PLUS
62987: PPUSH
62988: LD_VAR 0 4
62992: PPUSH
62993: LD_VAR 0 2
62997: PPUSH
62998: CALL_OW 259
63002: PPUSH
63003: CALL_OW 2
63007: ST_TO_ADDR
63008: GO 62966
63010: POP
63011: POP
// if not tmp then
63012: LD_VAR 0 5
63016: NOT
63017: IFFALSE 63021
// exit ;
63019: GO 63041
// result := SortListByListDesc ( units , tmp ) ;
63021: LD_ADDR_VAR 0 3
63025: PUSH
63026: LD_VAR 0 1
63030: PPUSH
63031: LD_VAR 0 5
63035: PPUSH
63036: CALL_OW 77
63040: ST_TO_ADDR
// end ;
63041: LD_VAR 0 3
63045: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63046: LD_INT 0
63048: PPUSH
63049: PPUSH
63050: PPUSH
// x := GetX ( building ) ;
63051: LD_ADDR_VAR 0 4
63055: PUSH
63056: LD_VAR 0 2
63060: PPUSH
63061: CALL_OW 250
63065: ST_TO_ADDR
// y := GetY ( building ) ;
63066: LD_ADDR_VAR 0 5
63070: PUSH
63071: LD_VAR 0 2
63075: PPUSH
63076: CALL_OW 251
63080: ST_TO_ADDR
// if GetTaskList ( unit ) then
63081: LD_VAR 0 1
63085: PPUSH
63086: CALL_OW 437
63090: IFFALSE 63185
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63092: LD_STRING e
63094: PUSH
63095: LD_VAR 0 1
63099: PPUSH
63100: CALL_OW 437
63104: PUSH
63105: LD_INT 1
63107: ARRAY
63108: PUSH
63109: LD_INT 1
63111: ARRAY
63112: EQUAL
63113: PUSH
63114: LD_VAR 0 4
63118: PUSH
63119: LD_VAR 0 1
63123: PPUSH
63124: CALL_OW 437
63128: PUSH
63129: LD_INT 1
63131: ARRAY
63132: PUSH
63133: LD_INT 2
63135: ARRAY
63136: EQUAL
63137: AND
63138: PUSH
63139: LD_VAR 0 5
63143: PUSH
63144: LD_VAR 0 1
63148: PPUSH
63149: CALL_OW 437
63153: PUSH
63154: LD_INT 1
63156: ARRAY
63157: PUSH
63158: LD_INT 3
63160: ARRAY
63161: EQUAL
63162: AND
63163: IFFALSE 63175
// result := true else
63165: LD_ADDR_VAR 0 3
63169: PUSH
63170: LD_INT 1
63172: ST_TO_ADDR
63173: GO 63183
// result := false ;
63175: LD_ADDR_VAR 0 3
63179: PUSH
63180: LD_INT 0
63182: ST_TO_ADDR
// end else
63183: GO 63193
// result := false ;
63185: LD_ADDR_VAR 0 3
63189: PUSH
63190: LD_INT 0
63192: ST_TO_ADDR
// end ;
63193: LD_VAR 0 3
63197: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63198: LD_INT 0
63200: PPUSH
63201: PPUSH
63202: PPUSH
63203: PPUSH
// if not unit or not area then
63204: LD_VAR 0 1
63208: NOT
63209: PUSH
63210: LD_VAR 0 2
63214: NOT
63215: OR
63216: IFFALSE 63220
// exit ;
63218: GO 63384
// tmp := AreaToList ( area , i ) ;
63220: LD_ADDR_VAR 0 6
63224: PUSH
63225: LD_VAR 0 2
63229: PPUSH
63230: LD_VAR 0 5
63234: PPUSH
63235: CALL_OW 517
63239: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63240: LD_ADDR_VAR 0 5
63244: PUSH
63245: DOUBLE
63246: LD_INT 1
63248: DEC
63249: ST_TO_ADDR
63250: LD_VAR 0 6
63254: PUSH
63255: LD_INT 1
63257: ARRAY
63258: PUSH
63259: FOR_TO
63260: IFFALSE 63382
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63262: LD_ADDR_VAR 0 7
63266: PUSH
63267: LD_VAR 0 6
63271: PUSH
63272: LD_INT 1
63274: ARRAY
63275: PUSH
63276: LD_VAR 0 5
63280: ARRAY
63281: PUSH
63282: LD_VAR 0 6
63286: PUSH
63287: LD_INT 2
63289: ARRAY
63290: PUSH
63291: LD_VAR 0 5
63295: ARRAY
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63301: LD_VAR 0 7
63305: PUSH
63306: LD_INT 1
63308: ARRAY
63309: PPUSH
63310: LD_VAR 0 7
63314: PUSH
63315: LD_INT 2
63317: ARRAY
63318: PPUSH
63319: CALL_OW 428
63323: PUSH
63324: LD_INT 0
63326: EQUAL
63327: IFFALSE 63380
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63329: LD_VAR 0 1
63333: PPUSH
63334: LD_VAR 0 7
63338: PUSH
63339: LD_INT 1
63341: ARRAY
63342: PPUSH
63343: LD_VAR 0 7
63347: PUSH
63348: LD_INT 2
63350: ARRAY
63351: PPUSH
63352: LD_VAR 0 3
63356: PPUSH
63357: CALL_OW 48
// result := IsPlaced ( unit ) ;
63361: LD_ADDR_VAR 0 4
63365: PUSH
63366: LD_VAR 0 1
63370: PPUSH
63371: CALL_OW 305
63375: ST_TO_ADDR
// exit ;
63376: POP
63377: POP
63378: GO 63384
// end ; end ;
63380: GO 63259
63382: POP
63383: POP
// end ;
63384: LD_VAR 0 4
63388: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63389: LD_INT 0
63391: PPUSH
63392: PPUSH
63393: PPUSH
// if not side or side > 8 then
63394: LD_VAR 0 1
63398: NOT
63399: PUSH
63400: LD_VAR 0 1
63404: PUSH
63405: LD_INT 8
63407: GREATER
63408: OR
63409: IFFALSE 63413
// exit ;
63411: GO 63600
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63413: LD_ADDR_VAR 0 4
63417: PUSH
63418: LD_INT 22
63420: PUSH
63421: LD_VAR 0 1
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 21
63432: PUSH
63433: LD_INT 3
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PPUSH
63444: CALL_OW 69
63448: ST_TO_ADDR
// if not tmp then
63449: LD_VAR 0 4
63453: NOT
63454: IFFALSE 63458
// exit ;
63456: GO 63600
// enable_addtolog := true ;
63458: LD_ADDR_OWVAR 81
63462: PUSH
63463: LD_INT 1
63465: ST_TO_ADDR
// AddToLog ( [ ) ;
63466: LD_STRING [
63468: PPUSH
63469: CALL_OW 561
// for i in tmp do
63473: LD_ADDR_VAR 0 3
63477: PUSH
63478: LD_VAR 0 4
63482: PUSH
63483: FOR_IN
63484: IFFALSE 63591
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63486: LD_STRING [
63488: PUSH
63489: LD_VAR 0 3
63493: PPUSH
63494: CALL_OW 266
63498: STR
63499: PUSH
63500: LD_STRING , 
63502: STR
63503: PUSH
63504: LD_VAR 0 3
63508: PPUSH
63509: CALL_OW 250
63513: STR
63514: PUSH
63515: LD_STRING , 
63517: STR
63518: PUSH
63519: LD_VAR 0 3
63523: PPUSH
63524: CALL_OW 251
63528: STR
63529: PUSH
63530: LD_STRING , 
63532: STR
63533: PUSH
63534: LD_VAR 0 3
63538: PPUSH
63539: CALL_OW 254
63543: STR
63544: PUSH
63545: LD_STRING , 
63547: STR
63548: PUSH
63549: LD_VAR 0 3
63553: PPUSH
63554: LD_INT 1
63556: PPUSH
63557: CALL_OW 268
63561: STR
63562: PUSH
63563: LD_STRING , 
63565: STR
63566: PUSH
63567: LD_VAR 0 3
63571: PPUSH
63572: LD_INT 2
63574: PPUSH
63575: CALL_OW 268
63579: STR
63580: PUSH
63581: LD_STRING ],
63583: STR
63584: PPUSH
63585: CALL_OW 561
// end ;
63589: GO 63483
63591: POP
63592: POP
// AddToLog ( ]; ) ;
63593: LD_STRING ];
63595: PPUSH
63596: CALL_OW 561
// end ;
63600: LD_VAR 0 2
63604: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63605: LD_INT 0
63607: PPUSH
63608: PPUSH
63609: PPUSH
63610: PPUSH
63611: PPUSH
// if not area or not rate or not max then
63612: LD_VAR 0 1
63616: NOT
63617: PUSH
63618: LD_VAR 0 2
63622: NOT
63623: OR
63624: PUSH
63625: LD_VAR 0 4
63629: NOT
63630: OR
63631: IFFALSE 63635
// exit ;
63633: GO 63827
// while 1 do
63635: LD_INT 1
63637: IFFALSE 63827
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63639: LD_ADDR_VAR 0 9
63643: PUSH
63644: LD_VAR 0 1
63648: PPUSH
63649: LD_INT 1
63651: PPUSH
63652: CALL_OW 287
63656: PUSH
63657: LD_INT 10
63659: MUL
63660: ST_TO_ADDR
// r := rate / 10 ;
63661: LD_ADDR_VAR 0 7
63665: PUSH
63666: LD_VAR 0 2
63670: PUSH
63671: LD_INT 10
63673: DIVREAL
63674: ST_TO_ADDR
// time := 1 1$00 ;
63675: LD_ADDR_VAR 0 8
63679: PUSH
63680: LD_INT 2100
63682: ST_TO_ADDR
// if amount < min then
63683: LD_VAR 0 9
63687: PUSH
63688: LD_VAR 0 3
63692: LESS
63693: IFFALSE 63711
// r := r * 2 else
63695: LD_ADDR_VAR 0 7
63699: PUSH
63700: LD_VAR 0 7
63704: PUSH
63705: LD_INT 2
63707: MUL
63708: ST_TO_ADDR
63709: GO 63737
// if amount > max then
63711: LD_VAR 0 9
63715: PUSH
63716: LD_VAR 0 4
63720: GREATER
63721: IFFALSE 63737
// r := r / 2 ;
63723: LD_ADDR_VAR 0 7
63727: PUSH
63728: LD_VAR 0 7
63732: PUSH
63733: LD_INT 2
63735: DIVREAL
63736: ST_TO_ADDR
// time := time / r ;
63737: LD_ADDR_VAR 0 8
63741: PUSH
63742: LD_VAR 0 8
63746: PUSH
63747: LD_VAR 0 7
63751: DIVREAL
63752: ST_TO_ADDR
// if time < 0 then
63753: LD_VAR 0 8
63757: PUSH
63758: LD_INT 0
63760: LESS
63761: IFFALSE 63778
// time := time * - 1 ;
63763: LD_ADDR_VAR 0 8
63767: PUSH
63768: LD_VAR 0 8
63772: PUSH
63773: LD_INT 1
63775: NEG
63776: MUL
63777: ST_TO_ADDR
// wait ( time ) ;
63778: LD_VAR 0 8
63782: PPUSH
63783: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63787: LD_INT 35
63789: PPUSH
63790: LD_INT 875
63792: PPUSH
63793: CALL_OW 12
63797: PPUSH
63798: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63802: LD_INT 1
63804: PPUSH
63805: LD_INT 5
63807: PPUSH
63808: CALL_OW 12
63812: PPUSH
63813: LD_VAR 0 1
63817: PPUSH
63818: LD_INT 1
63820: PPUSH
63821: CALL_OW 55
// end ;
63825: GO 63635
// end ;
63827: LD_VAR 0 5
63831: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63832: LD_INT 0
63834: PPUSH
63835: PPUSH
63836: PPUSH
63837: PPUSH
63838: PPUSH
63839: PPUSH
63840: PPUSH
63841: PPUSH
// if not turrets or not factories then
63842: LD_VAR 0 1
63846: NOT
63847: PUSH
63848: LD_VAR 0 2
63852: NOT
63853: OR
63854: IFFALSE 63858
// exit ;
63856: GO 64165
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63858: LD_ADDR_VAR 0 10
63862: PUSH
63863: LD_INT 5
63865: PUSH
63866: LD_INT 6
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 2
63875: PUSH
63876: LD_INT 4
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 3
63885: PUSH
63886: LD_INT 5
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 24
63900: PUSH
63901: LD_INT 25
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 23
63910: PUSH
63911: LD_INT 27
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 42
63924: PUSH
63925: LD_INT 43
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 44
63934: PUSH
63935: LD_INT 46
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 45
63944: PUSH
63945: LD_INT 47
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: LIST
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: LIST
63961: ST_TO_ADDR
// result := [ ] ;
63962: LD_ADDR_VAR 0 3
63966: PUSH
63967: EMPTY
63968: ST_TO_ADDR
// for i in turrets do
63969: LD_ADDR_VAR 0 4
63973: PUSH
63974: LD_VAR 0 1
63978: PUSH
63979: FOR_IN
63980: IFFALSE 64163
// begin nat := GetNation ( i ) ;
63982: LD_ADDR_VAR 0 7
63986: PUSH
63987: LD_VAR 0 4
63991: PPUSH
63992: CALL_OW 248
63996: ST_TO_ADDR
// weapon := 0 ;
63997: LD_ADDR_VAR 0 8
64001: PUSH
64002: LD_INT 0
64004: ST_TO_ADDR
// if not nat then
64005: LD_VAR 0 7
64009: NOT
64010: IFFALSE 64014
// continue ;
64012: GO 63979
// for j in list [ nat ] do
64014: LD_ADDR_VAR 0 5
64018: PUSH
64019: LD_VAR 0 10
64023: PUSH
64024: LD_VAR 0 7
64028: ARRAY
64029: PUSH
64030: FOR_IN
64031: IFFALSE 64072
// if GetBWeapon ( i ) = j [ 1 ] then
64033: LD_VAR 0 4
64037: PPUSH
64038: CALL_OW 269
64042: PUSH
64043: LD_VAR 0 5
64047: PUSH
64048: LD_INT 1
64050: ARRAY
64051: EQUAL
64052: IFFALSE 64070
// begin weapon := j [ 2 ] ;
64054: LD_ADDR_VAR 0 8
64058: PUSH
64059: LD_VAR 0 5
64063: PUSH
64064: LD_INT 2
64066: ARRAY
64067: ST_TO_ADDR
// break ;
64068: GO 64072
// end ;
64070: GO 64030
64072: POP
64073: POP
// if not weapon then
64074: LD_VAR 0 8
64078: NOT
64079: IFFALSE 64083
// continue ;
64081: GO 63979
// for k in factories do
64083: LD_ADDR_VAR 0 6
64087: PUSH
64088: LD_VAR 0 2
64092: PUSH
64093: FOR_IN
64094: IFFALSE 64159
// begin weapons := AvailableWeaponList ( k ) ;
64096: LD_ADDR_VAR 0 9
64100: PUSH
64101: LD_VAR 0 6
64105: PPUSH
64106: CALL_OW 478
64110: ST_TO_ADDR
// if not weapons then
64111: LD_VAR 0 9
64115: NOT
64116: IFFALSE 64120
// continue ;
64118: GO 64093
// if weapon in weapons then
64120: LD_VAR 0 8
64124: PUSH
64125: LD_VAR 0 9
64129: IN
64130: IFFALSE 64157
// begin result := [ i , weapon ] ;
64132: LD_ADDR_VAR 0 3
64136: PUSH
64137: LD_VAR 0 4
64141: PUSH
64142: LD_VAR 0 8
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: ST_TO_ADDR
// exit ;
64151: POP
64152: POP
64153: POP
64154: POP
64155: GO 64165
// end ; end ;
64157: GO 64093
64159: POP
64160: POP
// end ;
64161: GO 63979
64163: POP
64164: POP
// end ;
64165: LD_VAR 0 3
64169: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64170: LD_INT 0
64172: PPUSH
// if not side or side > 8 then
64173: LD_VAR 0 3
64177: NOT
64178: PUSH
64179: LD_VAR 0 3
64183: PUSH
64184: LD_INT 8
64186: GREATER
64187: OR
64188: IFFALSE 64192
// exit ;
64190: GO 64251
// if not range then
64192: LD_VAR 0 4
64196: NOT
64197: IFFALSE 64208
// range := - 12 ;
64199: LD_ADDR_VAR 0 4
64203: PUSH
64204: LD_INT 12
64206: NEG
64207: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64208: LD_VAR 0 1
64212: PPUSH
64213: LD_VAR 0 2
64217: PPUSH
64218: LD_VAR 0 3
64222: PPUSH
64223: LD_VAR 0 4
64227: PPUSH
64228: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64232: LD_VAR 0 1
64236: PPUSH
64237: LD_VAR 0 2
64241: PPUSH
64242: LD_VAR 0 3
64246: PPUSH
64247: CALL_OW 331
// end ;
64251: LD_VAR 0 5
64255: RET
// export function Video ( mode ) ; begin
64256: LD_INT 0
64258: PPUSH
// ingame_video = mode ;
64259: LD_ADDR_OWVAR 52
64263: PUSH
64264: LD_VAR 0 1
64268: ST_TO_ADDR
// interface_hidden = mode ;
64269: LD_ADDR_OWVAR 54
64273: PUSH
64274: LD_VAR 0 1
64278: ST_TO_ADDR
// end ;
64279: LD_VAR 0 2
64283: RET
// export function Join ( array , element ) ; begin
64284: LD_INT 0
64286: PPUSH
// result := array ^ element ;
64287: LD_ADDR_VAR 0 3
64291: PUSH
64292: LD_VAR 0 1
64296: PUSH
64297: LD_VAR 0 2
64301: ADD
64302: ST_TO_ADDR
// end ;
64303: LD_VAR 0 3
64307: RET
// export function JoinUnion ( array , element ) ; begin
64308: LD_INT 0
64310: PPUSH
// result := array union element ;
64311: LD_ADDR_VAR 0 3
64315: PUSH
64316: LD_VAR 0 1
64320: PUSH
64321: LD_VAR 0 2
64325: UNION
64326: ST_TO_ADDR
// end ;
64327: LD_VAR 0 3
64331: RET
// export function GetBehemoths ( side ) ; begin
64332: LD_INT 0
64334: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64335: LD_ADDR_VAR 0 2
64339: PUSH
64340: LD_INT 22
64342: PUSH
64343: LD_VAR 0 1
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 31
64354: PUSH
64355: LD_INT 25
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PPUSH
64366: CALL_OW 69
64370: ST_TO_ADDR
// end ;
64371: LD_VAR 0 2
64375: RET
// export function Shuffle ( array ) ; var i , index ; begin
64376: LD_INT 0
64378: PPUSH
64379: PPUSH
64380: PPUSH
// result := [ ] ;
64381: LD_ADDR_VAR 0 2
64385: PUSH
64386: EMPTY
64387: ST_TO_ADDR
// if not array then
64388: LD_VAR 0 1
64392: NOT
64393: IFFALSE 64397
// exit ;
64395: GO 64496
// Randomize ;
64397: CALL_OW 10
// for i = array downto 1 do
64401: LD_ADDR_VAR 0 3
64405: PUSH
64406: DOUBLE
64407: LD_VAR 0 1
64411: INC
64412: ST_TO_ADDR
64413: LD_INT 1
64415: PUSH
64416: FOR_DOWNTO
64417: IFFALSE 64494
// begin index := rand ( 1 , array ) ;
64419: LD_ADDR_VAR 0 4
64423: PUSH
64424: LD_INT 1
64426: PPUSH
64427: LD_VAR 0 1
64431: PPUSH
64432: CALL_OW 12
64436: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64437: LD_ADDR_VAR 0 2
64441: PUSH
64442: LD_VAR 0 2
64446: PPUSH
64447: LD_VAR 0 2
64451: PUSH
64452: LD_INT 1
64454: PLUS
64455: PPUSH
64456: LD_VAR 0 1
64460: PUSH
64461: LD_VAR 0 4
64465: ARRAY
64466: PPUSH
64467: CALL_OW 2
64471: ST_TO_ADDR
// array := Delete ( array , index ) ;
64472: LD_ADDR_VAR 0 1
64476: PUSH
64477: LD_VAR 0 1
64481: PPUSH
64482: LD_VAR 0 4
64486: PPUSH
64487: CALL_OW 3
64491: ST_TO_ADDR
// end ;
64492: GO 64416
64494: POP
64495: POP
// end ;
64496: LD_VAR 0 2
64500: RET
// export function GetBaseMaterials ( base ) ; begin
64501: LD_INT 0
64503: PPUSH
// result := [ 0 , 0 , 0 ] ;
64504: LD_ADDR_VAR 0 2
64508: PUSH
64509: LD_INT 0
64511: PUSH
64512: LD_INT 0
64514: PUSH
64515: LD_INT 0
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: LIST
64522: ST_TO_ADDR
// if not base then
64523: LD_VAR 0 1
64527: NOT
64528: IFFALSE 64532
// exit ;
64530: GO 64581
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64532: LD_ADDR_VAR 0 2
64536: PUSH
64537: LD_VAR 0 1
64541: PPUSH
64542: LD_INT 1
64544: PPUSH
64545: CALL_OW 275
64549: PUSH
64550: LD_VAR 0 1
64554: PPUSH
64555: LD_INT 2
64557: PPUSH
64558: CALL_OW 275
64562: PUSH
64563: LD_VAR 0 1
64567: PPUSH
64568: LD_INT 3
64570: PPUSH
64571: CALL_OW 275
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: LIST
64580: ST_TO_ADDR
// end ;
64581: LD_VAR 0 2
64585: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64586: LD_INT 0
64588: PPUSH
64589: PPUSH
// result := array ;
64590: LD_ADDR_VAR 0 3
64594: PUSH
64595: LD_VAR 0 1
64599: ST_TO_ADDR
// if size > 0 then
64600: LD_VAR 0 2
64604: PUSH
64605: LD_INT 0
64607: GREATER
64608: IFFALSE 64654
// for i := array downto size do
64610: LD_ADDR_VAR 0 4
64614: PUSH
64615: DOUBLE
64616: LD_VAR 0 1
64620: INC
64621: ST_TO_ADDR
64622: LD_VAR 0 2
64626: PUSH
64627: FOR_DOWNTO
64628: IFFALSE 64652
// result := Delete ( result , result ) ;
64630: LD_ADDR_VAR 0 3
64634: PUSH
64635: LD_VAR 0 3
64639: PPUSH
64640: LD_VAR 0 3
64644: PPUSH
64645: CALL_OW 3
64649: ST_TO_ADDR
64650: GO 64627
64652: POP
64653: POP
// end ;
64654: LD_VAR 0 3
64658: RET
// export function ComExit ( unit ) ; var tmp ; begin
64659: LD_INT 0
64661: PPUSH
64662: PPUSH
// if not IsInUnit ( unit ) then
64663: LD_VAR 0 1
64667: PPUSH
64668: CALL_OW 310
64672: NOT
64673: IFFALSE 64677
// exit ;
64675: GO 64737
// tmp := IsInUnit ( unit ) ;
64677: LD_ADDR_VAR 0 3
64681: PUSH
64682: LD_VAR 0 1
64686: PPUSH
64687: CALL_OW 310
64691: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64692: LD_VAR 0 3
64696: PPUSH
64697: CALL_OW 247
64701: PUSH
64702: LD_INT 2
64704: EQUAL
64705: IFFALSE 64718
// ComExitVehicle ( unit ) else
64707: LD_VAR 0 1
64711: PPUSH
64712: CALL_OW 121
64716: GO 64727
// ComExitBuilding ( unit ) ;
64718: LD_VAR 0 1
64722: PPUSH
64723: CALL_OW 122
// result := tmp ;
64727: LD_ADDR_VAR 0 2
64731: PUSH
64732: LD_VAR 0 3
64736: ST_TO_ADDR
// end ;
64737: LD_VAR 0 2
64741: RET
// export function ResetHc ; begin
64742: LD_INT 0
64744: PPUSH
// InitHc ;
64745: CALL_OW 19
// hc_importance := 0 ;
64749: LD_ADDR_OWVAR 32
64753: PUSH
64754: LD_INT 0
64756: ST_TO_ADDR
// end ;
64757: LD_VAR 0 1
64761: RET
