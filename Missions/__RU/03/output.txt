// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export meetBelkovBrother ; export cratesResources , oilResources ; export vehiclesPreviousMission ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinOpinion , platonovOpinion ; export canDestroyBeriaBase ; export enableOmicronAI ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 302 0 0
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_MeetBelkovBrother_6
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// cratesResources = LoadVariable ( 02_BeriaResourceCrates_7 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 02_BeriaResourceCrates_7
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// oilResources = LoadVariable ( 02_BeriaResourceOil_8 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_BeriaResourceOil_8
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// vehiclesPreviousMission = LoadVariable ( 02_Vehicles_1 , 0 ) ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_STRING 02_Vehicles_1
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  88: LD_ADDR_EXP 27
  92: PUSH
  93: LD_STRING 02_PlatonovOpinion_9
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// kurinOpinion = - 1 ;
 104: LD_ADDR_EXP 26
 108: PUSH
 109: LD_INT 1
 111: NEG
 112: ST_TO_ADDR
// scholtzeSpawned = false ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// scholtzeSaved = false ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// americanTroopsArriveOmicronCounter = 0 ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// spawnCrates = true ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 1
 144: ST_TO_ADDR
// dialog_track = false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// dialog_workshop = false ;
 153: LD_ADDR_EXP 8
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// dialog_stop = false ;
 161: LD_ADDR_EXP 11
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// counterEnable = false ;
 169: LD_ADDR_EXP 86
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// extraTime = 7 7$00 ;
 177: LD_ADDR_EXP 14
 181: PUSH
 182: LD_INT 14700
 184: ST_TO_ADDR
// kurinGiveMoreTime = false ;
 185: LD_ADDR_EXP 13
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 4200
 200: ST_TO_ADDR
// produceOnlyForYou = false ;
 201: LD_ADDR_EXP 17
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// produceMoreVehicles = false ;
 209: LD_ADDR_EXP 16
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// kurinCheckVehicles = false ;
 217: LD_ADDR_EXP 18
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omicronSurrender = false ;
 225: LD_ADDR_EXP 23
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// canExitBattlefield = true ;
 233: LD_ADDR_EXP 24
 237: PUSH
 238: LD_INT 1
 240: ST_TO_ADDR
// immortalSurvivors = false ;
 241: LD_ADDR_EXP 25
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// canDestroyBeriaBase = false ;
 249: LD_ADDR_EXP 28
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// kirovFactory = 0 ;
 257: LD_ADDR_EXP 21
 261: PUSH
 262: LD_INT 0
 264: ST_TO_ADDR
// kirovCompleteFactory = false ;
 265: LD_ADDR_EXP 22
 269: PUSH
 270: LD_INT 0
 272: ST_TO_ADDR
// enableOmicronAI = true ;
 273: LD_ADDR_EXP 29
 277: PUSH
 278: LD_INT 1
 280: ST_TO_ADDR
// PrepareRussians ;
 281: CALL 925 0 0
// PrepareAmericans ;
 285: CALL 5382 0 0
// Nef_PrepareNature ;
 289: CALL 28034 0 0
// MissionIntro ;
 293: CALL 20679 0 0
// end ; end_of_file
 297: LD_VAR 0 1
 301: RET
// export function InitMapConfig ; begin
 302: LD_INT 0
 304: PPUSH
// BaseMapConfig ;
 305: CALL 318 0 0
// MissionMapConfig ;
 309: CALL 420 0 0
// end ;
 313: LD_VAR 0 1
 317: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 318: LD_INT 0
 320: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 3 ] ;
 321: LD_ADDR_EXP 30
 325: PUSH
 326: LD_INT 8
 328: PUSH
 329: LD_INT 12
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: LIST
 346: LIST
 347: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 348: LD_ADDR_EXP 31
 352: PUSH
 353: LD_INT 2
 355: PUSH
 356: LD_INT 2
 358: PUSH
 359: LD_INT 2
 361: PUSH
 362: LD_INT 2
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: LIST
 369: LIST
 370: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 371: LD_ADDR_EXP 32
 375: PUSH
 376: LD_INT 5
 378: NEG
 379: PPUSH
 380: LD_INT 5
 382: PPUSH
 383: CALL_OW 12
 387: PUSH
 388: EMPTY
 389: LIST
 390: ST_TO_ADDR
// debugMode = 0 ;
 391: LD_ADDR_EXP 35
 395: PUSH
 396: LD_INT 0
 398: ST_TO_ADDR
// missionPrefix = 03_ ;
 399: LD_ADDR_EXP 33
 403: PUSH
 404: LD_STRING 03_
 406: ST_TO_ADDR
// previousMissionPrefix = 02_ ;
 407: LD_ADDR_EXP 34
 411: PUSH
 412: LD_STRING 02_
 414: ST_TO_ADDR
// end ;
 415: LD_VAR 0 1
 419: RET
// export baseUnitsToChoose , scholtzeSpawnPositions ; export timeToPrepareAttack ; export bonusResourcesCrates , bonusResourcesOil ; export enemySkillLevel ; export americanWeapons , russianWeapons ; export maxAmericanTroopsIgnore ; export animalsSafeTime ; function MissionMapConfig ; begin
 420: LD_INT 0
 422: PPUSH
// baseUnitsToChoose = [ 7 , 6 , 6 ] [ Difficulty ] ;
 423: LD_ADDR_EXP 36
 427: PUSH
 428: LD_INT 7
 430: PUSH
 431: LD_INT 6
 433: PUSH
 434: LD_INT 6
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: LIST
 441: PUSH
 442: LD_OWVAR 67
 446: ARRAY
 447: ST_TO_ADDR
// timeToPrepareAttack = [ 40 40$0 , 35 35$0 , 30 30$0 ] [ Difficulty ] ;
 448: LD_ADDR_EXP 38
 452: PUSH
 453: LD_INT 84000
 455: PUSH
 456: LD_INT 73500
 458: PUSH
 459: LD_INT 63000
 461: PUSH
 462: EMPTY
 463: LIST
 464: LIST
 465: LIST
 466: PUSH
 467: LD_OWVAR 67
 471: ARRAY
 472: ST_TO_ADDR
// bonusResourcesCrates = [ 150 , 100 , 50 ] [ Difficulty ] ;
 473: LD_ADDR_EXP 39
 477: PUSH
 478: LD_INT 150
 480: PUSH
 481: LD_INT 100
 483: PUSH
 484: LD_INT 50
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_OWVAR 67
 496: ARRAY
 497: ST_TO_ADDR
// bonusResourcesOil = [ 100 , 50 , 0 ] [ Difficulty ] ;
 498: LD_ADDR_EXP 40
 502: PUSH
 503: LD_INT 100
 505: PUSH
 506: LD_INT 50
 508: PUSH
 509: LD_INT 0
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: PUSH
 517: LD_OWVAR 67
 521: ARRAY
 522: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 523: LD_ADDR_EXP 41
 527: PUSH
 528: LD_INT 1
 530: PUSH
 531: LD_INT 2
 533: PUSH
 534: LD_INT 2
 536: PUSH
 537: EMPTY
 538: LIST
 539: LIST
 540: LIST
 541: PUSH
 542: LD_OWVAR 67
 546: ARRAY
 547: ST_TO_ADDR
// maxAmericanTroopsIgnore = [ 8 , 6 , 5 ] [ Difficulty ] ;
 548: LD_ADDR_EXP 44
 552: PUSH
 553: LD_INT 8
 555: PUSH
 556: LD_INT 6
 558: PUSH
 559: LD_INT 5
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: LIST
 566: PUSH
 567: LD_OWVAR 67
 571: ARRAY
 572: ST_TO_ADDR
// animalsSafeTime = [ 8 8$30 , 8 8$00 , 7 7$30 ] [ Difficulty ] ;
 573: LD_ADDR_EXP 45
 577: PUSH
 578: LD_INT 17850
 580: PUSH
 581: LD_INT 16800
 583: PUSH
 584: LD_INT 15750
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: LIST
 591: PUSH
 592: LD_OWVAR 67
 596: ARRAY
 597: ST_TO_ADDR
// end ;
 598: LD_VAR 0 1
 602: RET
// every 0 0$1 trigger debugMode do var i ;
 603: LD_EXP 35
 607: IFFALSE 922
 609: GO 611
 611: DISABLE
 612: LD_INT 0
 614: PPUSH
// begin enable ;
 615: ENABLE
// FogOff ( your_side ) ;
 616: LD_OWVAR 2
 620: PPUSH
 621: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 625: LD_ADDR_VAR 0 1
 629: PUSH
 630: LD_INT 22
 632: PUSH
 633: LD_OWVAR 2
 637: PUSH
 638: EMPTY
 639: LIST
 640: LIST
 641: PUSH
 642: LD_INT 2
 644: PUSH
 645: LD_INT 21
 647: PUSH
 648: LD_INT 1
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: PUSH
 655: LD_INT 21
 657: PUSH
 658: LD_INT 2
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PPUSH
 674: CALL_OW 69
 678: PUSH
 679: FOR_IN
 680: IFFALSE 696
// SetLives ( i , 1000 ) ;
 682: LD_VAR 0 1
 686: PPUSH
 687: LD_INT 1000
 689: PPUSH
 690: CALL_OW 234
 694: GO 679
 696: POP
 697: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 698: LD_ADDR_VAR 0 1
 702: PUSH
 703: LD_INT 22
 705: PUSH
 706: LD_OWVAR 2
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: PUSH
 715: LD_INT 21
 717: PUSH
 718: LD_INT 1
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: PPUSH
 729: CALL_OW 69
 733: PUSH
 734: FOR_IN
 735: IFFALSE 799
// begin SetSkill ( i , skill_combat , 10 ) ;
 737: LD_VAR 0 1
 741: PPUSH
 742: LD_INT 1
 744: PPUSH
 745: LD_INT 10
 747: PPUSH
 748: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 752: LD_VAR 0 1
 756: PPUSH
 757: LD_INT 2
 759: PPUSH
 760: LD_INT 10
 762: PPUSH
 763: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 767: LD_VAR 0 1
 771: PPUSH
 772: LD_INT 3
 774: PPUSH
 775: LD_INT 10
 777: PPUSH
 778: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 782: LD_VAR 0 1
 786: PPUSH
 787: LD_INT 4
 789: PPUSH
 790: LD_INT 10
 792: PPUSH
 793: CALL_OW 237
// end ;
 797: GO 734
 799: POP
 800: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 801: LD_ADDR_VAR 0 1
 805: PUSH
 806: LD_INT 22
 808: PUSH
 809: LD_OWVAR 2
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: PUSH
 818: LD_INT 2
 820: PUSH
 821: LD_INT 30
 823: PUSH
 824: LD_INT 0
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PUSH
 831: LD_INT 30
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: LIST
 845: PUSH
 846: EMPTY
 847: LIST
 848: LIST
 849: PPUSH
 850: CALL_OW 69
 854: PUSH
 855: FOR_IN
 856: IFFALSE 920
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 858: LD_VAR 0 1
 862: PPUSH
 863: CALL_OW 274
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: LD_INT 9999
 873: PPUSH
 874: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 878: LD_VAR 0 1
 882: PPUSH
 883: CALL_OW 274
 887: PPUSH
 888: LD_INT 2
 890: PPUSH
 891: LD_INT 9999
 893: PPUSH
 894: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 898: LD_VAR 0 1
 902: PPUSH
 903: CALL_OW 274
 907: PPUSH
 908: LD_INT 3
 910: PPUSH
 911: LD_INT 9999
 913: PPUSH
 914: CALL_OW 277
// end ;
 918: GO 855
 920: POP
 921: POP
// end ; end_of_file
 922: PPOPN 1
 924: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 ; export Scholtze ; export other_survivors ; export playerVehicles ; export otherBeriaUnits , beriaBase , beriaDepot ; export Kurin , Popov , BelkovDialog ; export ruScout ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot ; export ru2_bar1 , ru2_bar2 ; export kirovEng ; export kirovBunkersToMountWeapon , kirovBunkersToOccupy ; export kirovTransportCargo ; export kirovAttackCargo , kirovAttackVehicles ; export kirovBunkerCounter ; export secondBaseTeam ; export survivorsArabianAttack ; export survivorsToSpawn ; export neededUnitsSpawn ; export Grishko ; export function PrepareRussians ; begin
 925: LD_INT 0
 927: PPUSH
// neededUnitsSpawn = [ 0 , 0 , 0 , 0 ] ;
 928: LD_ADDR_EXP 78
 932: PUSH
 933: LD_INT 0
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: LD_INT 0
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: ST_TO_ADDR
// kirovAttackCargo = [ ] ;
 951: LD_ADDR_EXP 72
 955: PUSH
 956: EMPTY
 957: ST_TO_ADDR
// PrepareKirovBase ;
 958: CALL 2002 0 0
// PrepareHeroes ;
 962: CALL 995 0 0
// PrepareKirovPersonel ;
 966: CALL 2767 0 0
// PrepareBeriaBase ;
 970: CALL 1404 0 0
// PrepareSecondBaseTeam ;
 974: CALL 3910 0 0
// PrepareGrishko ;
 978: CALL 3095 0 0
// PrepareOtherBuildings ;
 982: CALL 3344 0 0
// PrepareVehicles ;
 986: CALL 3168 0 0
// end ;
 990: LD_VAR 0 1
 994: RET
// function PrepareHeroes ; begin
 995: LD_INT 0
 997: PPUSH
// uc_side = 3 ;
 998: LD_ADDR_OWVAR 20
1002: PUSH
1003: LD_INT 3
1005: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true ) ;
1006: LD_ADDR_EXP 46
1010: PUSH
1011: LD_STRING Burlak
1013: PPUSH
1014: LD_INT 1
1016: PPUSH
1017: CALL 6886 0 2
1021: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true ) ;
1022: LD_ADDR_EXP 47
1026: PUSH
1027: LD_STRING Gnyevko
1029: PPUSH
1030: LD_INT 1
1032: PPUSH
1033: CALL 6886 0 2
1037: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true ) ;
1038: LD_ADDR_EXP 49
1042: PUSH
1043: LD_STRING Kovalyuk
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 6886 0 2
1053: ST_TO_ADDR
// Kirilenkova = PrepareUnitExt ( Kirilenkova , true ) ;
1054: LD_ADDR_EXP 48
1058: PUSH
1059: LD_STRING Kirilenkova
1061: PPUSH
1062: LD_INT 1
1064: PPUSH
1065: CALL 6886 0 2
1069: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
1070: LD_EXP 46
1074: PUSH
1075: LD_EXP 47
1079: PUSH
1080: LD_EXP 49
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: LIST
1089: PPUSH
1090: LD_INT 3
1092: PPUSH
1093: CALL_OW 336
// uc_side = 6 ;
1097: LD_ADDR_OWVAR 20
1101: PUSH
1102: LD_INT 6
1104: ST_TO_ADDR
// if not meetBelkovBrother and TestCharacters ( 02_Belkov ) then
1105: LD_EXP 1
1109: NOT
1110: PUSH
1111: LD_STRING 02_Belkov
1113: PPUSH
1114: CALL_OW 28
1118: AND
1119: IFFALSE 1220
// begin Belkov := PrepareUnitExt ( Belkov , true ) ;
1121: LD_ADDR_EXP 50
1125: PUSH
1126: LD_STRING Belkov
1128: PPUSH
1129: LD_INT 1
1131: PPUSH
1132: CALL 6886 0 2
1136: ST_TO_ADDR
// if TestCharacters ( 02_Belkov2 ) then
1137: LD_STRING 02_Belkov2
1139: PPUSH
1140: CALL_OW 28
1144: IFFALSE 1183
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1146: LD_ADDR_EXP 51
1150: PUSH
1151: LD_STRING Belkov2
1153: PPUSH
1154: LD_INT 1
1156: PPUSH
1157: CALL 6886 0 2
1161: ST_TO_ADDR
// PlaceUnitXYR ( Belkov2 , 159 , 107 , 5 , false ) ;
1162: LD_EXP 51
1166: PPUSH
1167: LD_INT 159
1169: PPUSH
1170: LD_INT 107
1172: PPUSH
1173: LD_INT 5
1175: PPUSH
1176: LD_INT 0
1178: PPUSH
1179: CALL_OW 50
// end ; BelkovDialog = Belkov ;
1183: LD_ADDR_EXP 60
1187: PUSH
1188: LD_EXP 50
1192: ST_TO_ADDR
// PlaceUnitXY ( Belkov , 165 , 110 , false ) ;
1193: LD_EXP 50
1197: PPUSH
1198: LD_INT 165
1200: PPUSH
1201: LD_INT 110
1203: PPUSH
1204: LD_INT 0
1206: PPUSH
1207: CALL_OW 48
// ComHold ( Belkov ) ;
1211: LD_EXP 50
1215: PPUSH
1216: CALL_OW 140
// end ; if meetBelkovBrother and TestCharacters ( 02_Belkov2 ) then
1220: LD_EXP 1
1224: PUSH
1225: LD_STRING 02_Belkov2
1227: PPUSH
1228: CALL_OW 28
1232: AND
1233: IFFALSE 1288
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1235: LD_ADDR_EXP 51
1239: PUSH
1240: LD_STRING Belkov2
1242: PPUSH
1243: LD_INT 1
1245: PPUSH
1246: CALL 6886 0 2
1250: ST_TO_ADDR
// BelkovDialog = Belkov2 ;
1251: LD_ADDR_EXP 60
1255: PUSH
1256: LD_EXP 51
1260: ST_TO_ADDR
// PlaceUnitXY ( Belkov2 , 165 , 110 , false ) ;
1261: LD_EXP 51
1265: PPUSH
1266: LD_INT 165
1268: PPUSH
1269: LD_INT 110
1271: PPUSH
1272: LD_INT 0
1274: PPUSH
1275: CALL_OW 48
// ComHold ( Belkov2 ) ;
1279: LD_EXP 51
1283: PPUSH
1284: CALL_OW 140
// end ; SetClass ( [ Belkov , Belkov2 ] , 1 ) ;
1288: LD_EXP 50
1292: PUSH
1293: LD_EXP 51
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PPUSH
1302: LD_INT 1
1304: PPUSH
1305: CALL_OW 336
// PlaceUnitXY ( Burlak , 164 , 108 , false ) ;
1309: LD_EXP 46
1313: PPUSH
1314: LD_INT 164
1316: PPUSH
1317: LD_INT 108
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 48
// ComHold ( Burlak ) ;
1327: LD_EXP 46
1331: PPUSH
1332: CALL_OW 140
// PlaceUnitXYR ( Gnyevko , 159 , 107 , 5 , false ) ;
1336: LD_EXP 47
1340: PPUSH
1341: LD_INT 159
1343: PPUSH
1344: LD_INT 107
1346: PPUSH
1347: LD_INT 5
1349: PPUSH
1350: LD_INT 0
1352: PPUSH
1353: CALL_OW 50
// PlaceUnitXYR ( Kovalyuk , 159 , 107 , 5 , false ) ;
1357: LD_EXP 49
1361: PPUSH
1362: LD_INT 159
1364: PPUSH
1365: LD_INT 107
1367: PPUSH
1368: LD_INT 5
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 50
// PlaceUnitXYR ( Kirilenkova , 159 , 107 , 5 , false ) ;
1378: LD_EXP 48
1382: PPUSH
1383: LD_INT 159
1385: PPUSH
1386: LD_INT 107
1388: PPUSH
1389: LD_INT 5
1391: PPUSH
1392: LD_INT 0
1394: PPUSH
1395: CALL_OW 50
// end ;
1399: LD_VAR 0 1
1403: RET
// function PrepareBeriaBase ; var i , bonusResources ; begin
1404: LD_INT 0
1406: PPUSH
1407: PPUSH
1408: PPUSH
// beriaBase = LoadVariable ( 02_BeriaBase_2 , [ ] ) ;
1409: LD_ADDR_EXP 56
1413: PUSH
1414: LD_STRING 02_BeriaBase_2
1416: PPUSH
1417: EMPTY
1418: PPUSH
1419: CALL_OW 30
1423: ST_TO_ADDR
// otherBeriaUnits = CreateCharacterSet ( 02_other_beria ) ;
1424: LD_ADDR_EXP 55
1428: PUSH
1429: LD_STRING 02_other_beria
1431: PPUSH
1432: CALL_OW 31
1436: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 02_other_survivors ) ;
1437: LD_ADDR_EXP 53
1441: PUSH
1442: LD_STRING 02_other_survivors
1444: PPUSH
1445: CALL_OW 31
1449: ST_TO_ADDR
// uc_side = 3 ;
1450: LD_ADDR_OWVAR 20
1454: PUSH
1455: LD_INT 3
1457: ST_TO_ADDR
// uc_nation = 3 ;
1458: LD_ADDR_OWVAR 21
1462: PUSH
1463: LD_INT 3
1465: ST_TO_ADDR
// for i := 1 to beriaBase do
1466: LD_ADDR_VAR 0 2
1470: PUSH
1471: DOUBLE
1472: LD_INT 1
1474: DEC
1475: ST_TO_ADDR
1476: LD_EXP 56
1480: PUSH
1481: FOR_TO
1482: IFFALSE 1735
// begin bc_type = beriaBase [ i ] [ 1 ] ;
1484: LD_ADDR_OWVAR 42
1488: PUSH
1489: LD_EXP 56
1493: PUSH
1494: LD_VAR 0 2
1498: ARRAY
1499: PUSH
1500: LD_INT 1
1502: ARRAY
1503: ST_TO_ADDR
// bc_level = beriaBase [ i ] [ 5 ] ;
1504: LD_ADDR_OWVAR 43
1508: PUSH
1509: LD_EXP 56
1513: PUSH
1514: LD_VAR 0 2
1518: ARRAY
1519: PUSH
1520: LD_INT 5
1522: ARRAY
1523: ST_TO_ADDR
// if bc_type = b_lab then
1524: LD_OWVAR 42
1528: PUSH
1529: LD_INT 6
1531: EQUAL
1532: IFFALSE 1550
// begin bc_kind1 = b_lab_basic ;
1534: LD_ADDR_OWVAR 44
1538: PUSH
1539: LD_INT 9
1541: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
1542: LD_ADDR_OWVAR 45
1546: PUSH
1547: LD_INT 9
1549: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
1550: LD_OWVAR 42
1554: PUSH
1555: LD_INT 7
1557: EQUAL
1558: PUSH
1559: LD_OWVAR 42
1563: PUSH
1564: LD_INT 8
1566: EQUAL
1567: OR
1568: IFFALSE 1684
// begin if beriaBase [ i ] [ 7 ] then
1570: LD_EXP 56
1574: PUSH
1575: LD_VAR 0 2
1579: ARRAY
1580: PUSH
1581: LD_INT 7
1583: ARRAY
1584: IFFALSE 1606
// bc_kind1 = beriaBase [ i ] [ 7 ] ;
1586: LD_ADDR_OWVAR 44
1590: PUSH
1591: LD_EXP 56
1595: PUSH
1596: LD_VAR 0 2
1600: ARRAY
1601: PUSH
1602: LD_INT 7
1604: ARRAY
1605: ST_TO_ADDR
// if beriaBase [ i ] [ 8 ] then
1606: LD_EXP 56
1610: PUSH
1611: LD_VAR 0 2
1615: ARRAY
1616: PUSH
1617: LD_INT 8
1619: ARRAY
1620: IFFALSE 1642
// bc_kind2 = beriaBase [ i ] [ 8 ] ;
1622: LD_ADDR_OWVAR 45
1626: PUSH
1627: LD_EXP 56
1631: PUSH
1632: LD_VAR 0 2
1636: ARRAY
1637: PUSH
1638: LD_INT 8
1640: ARRAY
1641: ST_TO_ADDR
// if not beriaBase [ i ] [ 7 ] and not beriaBase [ i ] [ 8 ] then
1642: LD_EXP 56
1646: PUSH
1647: LD_VAR 0 2
1651: ARRAY
1652: PUSH
1653: LD_INT 7
1655: ARRAY
1656: NOT
1657: PUSH
1658: LD_EXP 56
1662: PUSH
1663: LD_VAR 0 2
1667: ARRAY
1668: PUSH
1669: LD_INT 8
1671: ARRAY
1672: NOT
1673: AND
1674: IFFALSE 1684
// bc_type := b_lab ;
1676: LD_ADDR_OWVAR 42
1680: PUSH
1681: LD_INT 6
1683: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 2 ] , beriaBase [ i ] [ 3 ] , beriaBase [ i ] [ 4 ] ) ;
1684: LD_EXP 56
1688: PUSH
1689: LD_VAR 0 2
1693: ARRAY
1694: PUSH
1695: LD_INT 2
1697: ARRAY
1698: PPUSH
1699: LD_EXP 56
1703: PUSH
1704: LD_VAR 0 2
1708: ARRAY
1709: PUSH
1710: LD_INT 3
1712: ARRAY
1713: PPUSH
1714: LD_EXP 56
1718: PUSH
1719: LD_VAR 0 2
1723: ARRAY
1724: PUSH
1725: LD_INT 4
1727: ARRAY
1728: PPUSH
1729: CALL_OW 47
// end ;
1733: GO 1481
1735: POP
1736: POP
// beriaDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1737: LD_ADDR_EXP 57
1741: PUSH
1742: LD_INT 22
1744: PUSH
1745: LD_INT 3
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: PUSH
1752: LD_INT 30
1754: PUSH
1755: LD_INT 0
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PPUSH
1766: CALL_OW 69
1770: PUSH
1771: LD_INT 1
1773: ARRAY
1774: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1775: LD_EXP 57
1779: PPUSH
1780: LD_STRING beria
1782: PPUSH
1783: CALL_OW 500
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , cratesResources ) ;
1787: LD_EXP 57
1791: PPUSH
1792: CALL_OW 274
1796: PPUSH
1797: LD_INT 1
1799: PPUSH
1800: LD_EXP 2
1804: PPUSH
1805: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , oilResources ) ;
1809: LD_EXP 57
1813: PPUSH
1814: CALL_OW 274
1818: PPUSH
1819: LD_INT 2
1821: PPUSH
1822: LD_EXP 3
1826: PPUSH
1827: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesCrates ) ;
1831: LD_EXP 57
1835: PPUSH
1836: CALL_OW 274
1840: PPUSH
1841: LD_INT 1
1843: PPUSH
1844: LD_EXP 57
1848: PPUSH
1849: CALL_OW 274
1853: PPUSH
1854: LD_INT 2
1856: PPUSH
1857: CALL_OW 275
1861: PUSH
1862: LD_EXP 39
1866: PLUS
1867: PPUSH
1868: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesOil ) ;
1872: LD_EXP 57
1876: PPUSH
1877: CALL_OW 274
1881: PPUSH
1882: LD_INT 2
1884: PPUSH
1885: LD_EXP 57
1889: PPUSH
1890: CALL_OW 274
1894: PPUSH
1895: LD_INT 2
1897: PPUSH
1898: CALL_OW 275
1902: PUSH
1903: LD_EXP 40
1907: PLUS
1908: PPUSH
1909: CALL_OW 277
// uc_side = 6 ;
1913: LD_ADDR_OWVAR 20
1917: PUSH
1918: LD_INT 6
1920: ST_TO_ADDR
// for i in otherBeriaUnits do
1921: LD_ADDR_VAR 0 2
1925: PUSH
1926: LD_EXP 55
1930: PUSH
1931: FOR_IN
1932: IFFALSE 1957
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
1934: LD_VAR 0 2
1938: PPUSH
1939: LD_INT 159
1941: PPUSH
1942: LD_INT 107
1944: PPUSH
1945: LD_INT 10
1947: PPUSH
1948: LD_INT 0
1950: PPUSH
1951: CALL_OW 50
1955: GO 1931
1957: POP
1958: POP
// for i in other_survivors do
1959: LD_ADDR_VAR 0 2
1963: PUSH
1964: LD_EXP 53
1968: PUSH
1969: FOR_IN
1970: IFFALSE 1995
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
1972: LD_VAR 0 2
1976: PPUSH
1977: LD_INT 159
1979: PPUSH
1980: LD_INT 107
1982: PPUSH
1983: LD_INT 10
1985: PPUSH
1986: LD_INT 0
1988: PPUSH
1989: CALL_OW 50
1993: GO 1969
1995: POP
1996: POP
// end ;
1997: LD_VAR 0 1
2001: RET
// function PrepareKirovBase ; var i , tmp , building ; begin
2002: LD_INT 0
2004: PPUSH
2005: PPUSH
2006: PPUSH
2007: PPUSH
// kirovBase = LoadVariable ( 02_KirovBase_3 , [ ] ) ;
2008: LD_ADDR_EXP 63
2012: PUSH
2013: LD_STRING 02_KirovBase_3
2015: PPUSH
2016: EMPTY
2017: PPUSH
2018: CALL_OW 30
2022: ST_TO_ADDR
// otherKirovUnits = CreateCharacterSet ( 02_other_kirov ) ;
2023: LD_ADDR_EXP 62
2027: PUSH
2028: LD_STRING 02_other_kirov
2030: PPUSH
2031: CALL_OW 31
2035: ST_TO_ADDR
// uc_side = 6 ;
2036: LD_ADDR_OWVAR 20
2040: PUSH
2041: LD_INT 6
2043: ST_TO_ADDR
// uc_nation = 3 ;
2044: LD_ADDR_OWVAR 21
2048: PUSH
2049: LD_INT 3
2051: ST_TO_ADDR
// Kurin = PrepareUnitExt ( Kurin , false ) ;
2052: LD_ADDR_EXP 58
2056: PUSH
2057: LD_STRING Kurin
2059: PPUSH
2060: LD_INT 0
2062: PPUSH
2063: CALL 6886 0 2
2067: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 166 , 109 , false ) ;
2068: LD_EXP 58
2072: PPUSH
2073: LD_INT 166
2075: PPUSH
2076: LD_INT 109
2078: PPUSH
2079: LD_INT 0
2081: PPUSH
2082: CALL_OW 48
// ComHold ( Kurin ) ;
2086: LD_EXP 58
2090: PPUSH
2091: CALL_OW 140
// for i := 1 to kirovBase do
2095: LD_ADDR_VAR 0 2
2099: PUSH
2100: DOUBLE
2101: LD_INT 1
2103: DEC
2104: ST_TO_ADDR
2105: LD_EXP 63
2109: PUSH
2110: FOR_TO
2111: IFFALSE 2549
// begin bc_type = kirovBase [ i ] [ 1 ] ;
2113: LD_ADDR_OWVAR 42
2117: PUSH
2118: LD_EXP 63
2122: PUSH
2123: LD_VAR 0 2
2127: ARRAY
2128: PUSH
2129: LD_INT 1
2131: ARRAY
2132: ST_TO_ADDR
// bc_level = kirovBase [ i ] [ 5 ] ;
2133: LD_ADDR_OWVAR 43
2137: PUSH
2138: LD_EXP 63
2142: PUSH
2143: LD_VAR 0 2
2147: ARRAY
2148: PUSH
2149: LD_INT 5
2151: ARRAY
2152: ST_TO_ADDR
// if bc_type = b_depot then
2153: LD_OWVAR 42
2157: PUSH
2158: LD_INT 0
2160: EQUAL
2161: IFFALSE 2171
// bc_type = b_warehouse ;
2163: LD_ADDR_OWVAR 42
2167: PUSH
2168: LD_INT 1
2170: ST_TO_ADDR
// if bc_type = b_armoury then
2171: LD_OWVAR 42
2175: PUSH
2176: LD_INT 4
2178: EQUAL
2179: IFFALSE 2189
// bc_type = b_barracks ;
2181: LD_ADDR_OWVAR 42
2185: PUSH
2186: LD_INT 5
2188: ST_TO_ADDR
// if bc_type = b_lab then
2189: LD_OWVAR 42
2193: PUSH
2194: LD_INT 6
2196: EQUAL
2197: IFFALSE 2215
// begin bc_kind1 = b_lab_weapon ;
2199: LD_ADDR_OWVAR 44
2203: PUSH
2204: LD_INT 10
2206: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2207: LD_ADDR_OWVAR 45
2211: PUSH
2212: LD_INT 9
2214: ST_TO_ADDR
// end ; if bc_type = b_workshop then
2215: LD_OWVAR 42
2219: PUSH
2220: LD_INT 2
2222: EQUAL
2223: IFFALSE 2233
// bc_type = b_factory ;
2225: LD_ADDR_OWVAR 42
2229: PUSH
2230: LD_INT 3
2232: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2233: LD_OWVAR 42
2237: PUSH
2238: LD_INT 7
2240: EQUAL
2241: PUSH
2242: LD_OWVAR 42
2246: PUSH
2247: LD_INT 8
2249: EQUAL
2250: OR
2251: IFFALSE 2367
// begin if kirovBase [ i ] [ 7 ] then
2253: LD_EXP 63
2257: PUSH
2258: LD_VAR 0 2
2262: ARRAY
2263: PUSH
2264: LD_INT 7
2266: ARRAY
2267: IFFALSE 2289
// bc_kind1 = kirovBase [ i ] [ 7 ] ;
2269: LD_ADDR_OWVAR 44
2273: PUSH
2274: LD_EXP 63
2278: PUSH
2279: LD_VAR 0 2
2283: ARRAY
2284: PUSH
2285: LD_INT 7
2287: ARRAY
2288: ST_TO_ADDR
// if kirovBase [ i ] [ 8 ] then
2289: LD_EXP 63
2293: PUSH
2294: LD_VAR 0 2
2298: ARRAY
2299: PUSH
2300: LD_INT 8
2302: ARRAY
2303: IFFALSE 2325
// bc_kind2 = kirovBase [ i ] [ 8 ] ;
2305: LD_ADDR_OWVAR 45
2309: PUSH
2310: LD_EXP 63
2314: PUSH
2315: LD_VAR 0 2
2319: ARRAY
2320: PUSH
2321: LD_INT 8
2323: ARRAY
2324: ST_TO_ADDR
// if not kirovBase [ i ] [ 7 ] and not kirovBase [ i ] [ 8 ] then
2325: LD_EXP 63
2329: PUSH
2330: LD_VAR 0 2
2334: ARRAY
2335: PUSH
2336: LD_INT 7
2338: ARRAY
2339: NOT
2340: PUSH
2341: LD_EXP 63
2345: PUSH
2346: LD_VAR 0 2
2350: ARRAY
2351: PUSH
2352: LD_INT 8
2354: ARRAY
2355: NOT
2356: AND
2357: IFFALSE 2367
// bc_type := b_lab ;
2359: LD_ADDR_OWVAR 42
2363: PUSH
2364: LD_INT 6
2366: ST_TO_ADDR
// end ; if bc_type = b_breastwork then
2367: LD_OWVAR 42
2371: PUSH
2372: LD_INT 31
2374: EQUAL
2375: IFFALSE 2399
// begin bc_type = b_bunker ;
2377: LD_ADDR_OWVAR 42
2381: PUSH
2382: LD_INT 32
2384: ST_TO_ADDR
// kirovBunkerCounter = kirovBunkerCounter + 1 ;
2385: LD_ADDR_EXP 74
2389: PUSH
2390: LD_EXP 74
2394: PUSH
2395: LD_INT 1
2397: PLUS
2398: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 2 ] , kirovBase [ i ] [ 3 ] , kirovBase [ i ] [ 4 ] ) ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_EXP 63
2408: PUSH
2409: LD_VAR 0 2
2413: ARRAY
2414: PUSH
2415: LD_INT 2
2417: ARRAY
2418: PPUSH
2419: LD_EXP 63
2423: PUSH
2424: LD_VAR 0 2
2428: ARRAY
2429: PUSH
2430: LD_INT 3
2432: ARRAY
2433: PPUSH
2434: LD_EXP 63
2438: PUSH
2439: LD_VAR 0 2
2443: ARRAY
2444: PUSH
2445: LD_INT 4
2447: ARRAY
2448: PPUSH
2449: CALL_OW 47
2453: ST_TO_ADDR
// if tmp < 4 and bc_type = b_bunker then
2454: LD_VAR 0 3
2458: PUSH
2459: LD_INT 4
2461: LESS
2462: PUSH
2463: LD_OWVAR 42
2467: PUSH
2468: LD_INT 32
2470: EQUAL
2471: AND
2472: IFFALSE 2521
// begin PlaceWeaponTurret ( building , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
2474: LD_VAR 0 4
2478: PPUSH
2479: LD_INT 42
2481: PUSH
2482: LD_INT 43
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: PUSH
2489: LD_INT 1
2491: PPUSH
2492: LD_INT 2
2494: PPUSH
2495: CALL_OW 12
2499: ARRAY
2500: PPUSH
2501: CALL_OW 431
// tmp = tmp + 1 ;
2505: LD_ADDR_VAR 0 3
2509: PUSH
2510: LD_VAR 0 3
2514: PUSH
2515: LD_INT 1
2517: PLUS
2518: ST_TO_ADDR
// end else
2519: GO 2547
// if bc_type = b_bunker then
2521: LD_OWVAR 42
2525: PUSH
2526: LD_INT 32
2528: EQUAL
2529: IFFALSE 2547
// kirovBunkersToMountWeapon = kirovBunkersToMountWeapon ^ building ;
2531: LD_ADDR_EXP 69
2535: PUSH
2536: LD_EXP 69
2540: PUSH
2541: LD_VAR 0 4
2545: ADD
2546: ST_TO_ADDR
// end ;
2547: GO 2110
2549: POP
2550: POP
// kirovDepot = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
2551: LD_ADDR_EXP 64
2555: PUSH
2556: LD_INT 22
2558: PUSH
2559: LD_INT 6
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: PUSH
2566: LD_INT 30
2568: PUSH
2569: LD_INT 1
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PPUSH
2580: CALL_OW 69
2584: PUSH
2585: LD_INT 1
2587: ARRAY
2588: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
2589: LD_EXP 64
2593: PPUSH
2594: LD_STRING kirov
2596: PPUSH
2597: CALL_OW 500
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 5000 ) ;
2601: LD_EXP 64
2605: PPUSH
2606: CALL_OW 274
2610: PPUSH
2611: LD_INT 1
2613: PPUSH
2614: LD_INT 5000
2616: PPUSH
2617: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 2000 ) ;
2621: LD_EXP 64
2625: PPUSH
2626: CALL_OW 274
2630: PPUSH
2631: LD_INT 2
2633: PPUSH
2634: LD_INT 2000
2636: PPUSH
2637: CALL_OW 277
// ru2_bar1 = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) , 145 , 102 ) ;
2641: LD_ADDR_EXP 66
2645: PUSH
2646: LD_INT 22
2648: PUSH
2649: LD_INT 6
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: PUSH
2656: LD_INT 21
2658: PUSH
2659: LD_INT 3
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PUSH
2666: LD_INT 30
2668: PUSH
2669: LD_INT 5
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: LIST
2680: PPUSH
2681: CALL_OW 69
2685: PPUSH
2686: LD_INT 145
2688: PPUSH
2689: LD_INT 102
2691: PPUSH
2692: CALL_OW 73
2696: ST_TO_ADDR
// ru2_bar2 = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) diff ru2_bar1 ;
2697: LD_ADDR_EXP 67
2701: PUSH
2702: LD_INT 22
2704: PUSH
2705: LD_INT 6
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PUSH
2712: LD_INT 21
2714: PUSH
2715: LD_INT 3
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: LD_INT 30
2724: PUSH
2725: LD_INT 5
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: LIST
2736: PPUSH
2737: CALL_OW 69
2741: PUSH
2742: LD_EXP 66
2746: DIFF
2747: ST_TO_ADDR
// ru2_bar2 = ru2_bar2 [ 1 ] ;
2748: LD_ADDR_EXP 67
2752: PUSH
2753: LD_EXP 67
2757: PUSH
2758: LD_INT 1
2760: ARRAY
2761: ST_TO_ADDR
// end ;
2762: LD_VAR 0 1
2766: RET
// export function PrepareKirovPersonel ; var i ; begin
2767: LD_INT 0
2769: PPUSH
2770: PPUSH
// PrepareEngineer ( false , 7 ) ;
2771: LD_INT 0
2773: PPUSH
2774: LD_INT 7
2776: PPUSH
2777: CALL_OW 382
// kirovEng = CreateHuman ;
2781: LD_ADDR_EXP 68
2785: PUSH
2786: CALL_OW 44
2790: ST_TO_ADDR
// PlaceUnitXYR ( kirovEng , 159 , 107 , 10 , false ) ;
2791: LD_EXP 68
2795: PPUSH
2796: LD_INT 159
2798: PPUSH
2799: LD_INT 107
2801: PPUSH
2802: LD_INT 10
2804: PPUSH
2805: LD_INT 0
2807: PPUSH
2808: CALL_OW 50
// Popov = PrepareUnitExt ( Popov , false ) ;
2812: LD_ADDR_EXP 59
2816: PUSH
2817: LD_STRING Popov
2819: PPUSH
2820: LD_INT 0
2822: PPUSH
2823: CALL 6886 0 2
2827: ST_TO_ADDR
// PlaceUnitArea ( Popov , PopovSpawnArea , false ) ;
2828: LD_EXP 59
2832: PPUSH
2833: LD_INT 4
2835: PPUSH
2836: LD_INT 0
2838: PPUSH
2839: CALL_OW 49
// ComTurnXY ( Popov , 98 , 36 ) ;
2843: LD_EXP 59
2847: PPUSH
2848: LD_INT 98
2850: PPUSH
2851: LD_INT 36
2853: PPUSH
2854: CALL_OW 118
// hc_name :=  ;
2858: LD_ADDR_OWVAR 26
2862: PUSH
2863: LD_STRING 
2865: ST_TO_ADDR
// hc_gallery :=  ;
2866: LD_ADDR_OWVAR 33
2870: PUSH
2871: LD_STRING 
2873: ST_TO_ADDR
// PrepareSoldier ( false , 2 ) ;
2874: LD_INT 0
2876: PPUSH
2877: LD_INT 2
2879: PPUSH
2880: CALL_OW 381
// ruScout = CreateHuman ;
2884: LD_ADDR_EXP 61
2888: PUSH
2889: CALL_OW 44
2893: ST_TO_ADDR
// PlaceUnitArea ( ruScout , RuScoutSpawnArea , false ) ;
2894: LD_EXP 61
2898: PPUSH
2899: LD_INT 3
2901: PPUSH
2902: LD_INT 0
2904: PPUSH
2905: CALL_OW 49
// ComCrawl ( ruScout ) ;
2909: LD_EXP 61
2913: PPUSH
2914: CALL_OW 137
// AddComTurnXY ( ruScout , 98 , 36 ) ;
2918: LD_EXP 61
2922: PPUSH
2923: LD_INT 98
2925: PPUSH
2926: LD_INT 36
2928: PPUSH
2929: CALL_OW 178
// uc_side = 6 ;
2933: LD_ADDR_OWVAR 20
2937: PUSH
2938: LD_INT 6
2940: ST_TO_ADDR
// for i in otherKirovUnits do
2941: LD_ADDR_VAR 0 2
2945: PUSH
2946: LD_EXP 62
2950: PUSH
2951: FOR_IN
2952: IFFALSE 3088
// begin SetSide ( i , 6 ) ;
2954: LD_VAR 0 2
2958: PPUSH
2959: LD_INT 6
2961: PPUSH
2962: CALL_OW 235
// if GetClass ( i ) = class_soldier and kirovBunkerCounter > 0 then
2966: LD_VAR 0 2
2970: PPUSH
2971: CALL_OW 257
2975: PUSH
2976: LD_INT 1
2978: EQUAL
2979: PUSH
2980: LD_EXP 74
2984: PUSH
2985: LD_INT 0
2987: GREATER
2988: AND
2989: IFFALSE 3065
// begin PlaceHumanInBunker ( i , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ kirovBunkerCounter ] ) ;
2991: LD_VAR 0 2
2995: PPUSH
2996: LD_INT 18
2998: PPUSH
2999: LD_INT 22
3001: PUSH
3002: LD_INT 6
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PUSH
3009: LD_INT 21
3011: PUSH
3012: LD_INT 3
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: LD_INT 30
3021: PUSH
3022: LD_INT 32
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: LIST
3033: PPUSH
3034: CALL_OW 70
3038: PUSH
3039: LD_EXP 74
3043: ARRAY
3044: PPUSH
3045: CALL 8330 0 2
// kirovBunkerCounter = kirovBunkerCounter - 1 ;
3049: LD_ADDR_EXP 74
3053: PUSH
3054: LD_EXP 74
3058: PUSH
3059: LD_INT 1
3061: MINUS
3062: ST_TO_ADDR
// end else
3063: GO 3086
// begin PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
3065: LD_VAR 0 2
3069: PPUSH
3070: LD_INT 159
3072: PPUSH
3073: LD_INT 107
3075: PPUSH
3076: LD_INT 10
3078: PPUSH
3079: LD_INT 0
3081: PPUSH
3082: CALL_OW 50
// end ; end ;
3086: GO 2951
3088: POP
3089: POP
// end ;
3090: LD_VAR 0 1
3094: RET
// export function PrepareGrishko ; var i , un , turret ; begin
3095: LD_INT 0
3097: PPUSH
3098: PPUSH
3099: PPUSH
3100: PPUSH
// uc_side = 6 ;
3101: LD_ADDR_OWVAR 20
3105: PUSH
3106: LD_INT 6
3108: ST_TO_ADDR
// uc_nation = 3 ;
3109: LD_ADDR_OWVAR 21
3113: PUSH
3114: LD_INT 3
3116: ST_TO_ADDR
// Grishko = PrepareUnitExt ( Grishko , false ) ;
3117: LD_ADDR_EXP 79
3121: PUSH
3122: LD_STRING Grishko
3124: PPUSH
3125: LD_INT 0
3127: PPUSH
3128: CALL 6886 0 2
3132: ST_TO_ADDR
// PlaceUnitXYR ( Grishko , 218 , 108 , 3 , false ) ;
3133: LD_EXP 79
3137: PPUSH
3138: LD_INT 218
3140: PPUSH
3141: LD_INT 108
3143: PPUSH
3144: LD_INT 3
3146: PPUSH
3147: LD_INT 0
3149: PPUSH
3150: CALL_OW 50
// ComHold ( Grishko ) ;
3154: LD_EXP 79
3158: PPUSH
3159: CALL_OW 140
// end ;
3163: LD_VAR 0 1
3167: RET
// export function PrepareVehicles ; var i , vehicle ; begin
3168: LD_INT 0
3170: PPUSH
3171: PPUSH
3172: PPUSH
// uc_side = 3 ;
3173: LD_ADDR_OWVAR 20
3177: PUSH
3178: LD_INT 3
3180: ST_TO_ADDR
// uc_nation = 3 ;
3181: LD_ADDR_OWVAR 21
3185: PUSH
3186: LD_INT 3
3188: ST_TO_ADDR
// for i := 1 to vehiclesPreviousMission do
3189: LD_ADDR_VAR 0 2
3193: PUSH
3194: DOUBLE
3195: LD_INT 1
3197: DEC
3198: ST_TO_ADDR
3199: LD_EXP 4
3203: PUSH
3204: FOR_TO
3205: IFFALSE 3337
// begin PrepareVehicle ( vehiclesPreviousMission [ i ] [ 1 ] , vehiclesPreviousMission [ i ] [ 2 ] , vehiclesPreviousMission [ i ] [ 3 ] , vehiclesPreviousMission [ i ] [ 4 ] , vehiclesPreviousMission [ i ] [ 5 ] ) ;
3207: LD_EXP 4
3211: PUSH
3212: LD_VAR 0 2
3216: ARRAY
3217: PUSH
3218: LD_INT 1
3220: ARRAY
3221: PPUSH
3222: LD_EXP 4
3226: PUSH
3227: LD_VAR 0 2
3231: ARRAY
3232: PUSH
3233: LD_INT 2
3235: ARRAY
3236: PPUSH
3237: LD_EXP 4
3241: PUSH
3242: LD_VAR 0 2
3246: ARRAY
3247: PUSH
3248: LD_INT 3
3250: ARRAY
3251: PPUSH
3252: LD_EXP 4
3256: PUSH
3257: LD_VAR 0 2
3261: ARRAY
3262: PUSH
3263: LD_INT 4
3265: ARRAY
3266: PPUSH
3267: LD_EXP 4
3271: PUSH
3272: LD_VAR 0 2
3276: ARRAY
3277: PUSH
3278: LD_INT 5
3280: ARRAY
3281: PPUSH
3282: CALL 33595 0 5
// vehicle = CreateVehicle ;
3286: LD_ADDR_VAR 0 3
3290: PUSH
3291: CALL_OW 45
3295: ST_TO_ADDR
// PlaceUnitArea ( vehicle , BeriaBaseArea , false ) ;
3296: LD_VAR 0 3
3300: PPUSH
3301: LD_INT 25
3303: PPUSH
3304: LD_INT 0
3306: PPUSH
3307: CALL_OW 49
// SetLives ( vehicle , vehiclesPreviousMission [ i ] [ 6 ] ) ;
3311: LD_VAR 0 3
3315: PPUSH
3316: LD_EXP 4
3320: PUSH
3321: LD_VAR 0 2
3325: ARRAY
3326: PUSH
3327: LD_INT 6
3329: ARRAY
3330: PPUSH
3331: CALL_OW 234
// end ;
3335: GO 3204
3337: POP
3338: POP
// end ;
3339: LD_VAR 0 1
3343: RET
// export function PrepareOtherBuildings ; var i , otherBuildings , building ; begin
3344: LD_INT 0
3346: PPUSH
3347: PPUSH
3348: PPUSH
3349: PPUSH
// otherBuildings = LoadVariable ( 02_OtherBuildings_4 , [ ] ) ;
3350: LD_ADDR_VAR 0 3
3354: PUSH
3355: LD_STRING 02_OtherBuildings_4
3357: PPUSH
3358: EMPTY
3359: PPUSH
3360: CALL_OW 30
3364: ST_TO_ADDR
// uc_side = 3 ;
3365: LD_ADDR_OWVAR 20
3369: PUSH
3370: LD_INT 3
3372: ST_TO_ADDR
// for i := 1 to otherBuildings do
3373: LD_ADDR_VAR 0 2
3377: PUSH
3378: DOUBLE
3379: LD_INT 1
3381: DEC
3382: ST_TO_ADDR
3383: LD_VAR 0 3
3387: PUSH
3388: FOR_TO
3389: IFFALSE 3650
// begin uc_nation = otherBuildings [ i ] [ 6 ] ;
3391: LD_ADDR_OWVAR 21
3395: PUSH
3396: LD_VAR 0 3
3400: PUSH
3401: LD_VAR 0 2
3405: ARRAY
3406: PUSH
3407: LD_INT 6
3409: ARRAY
3410: ST_TO_ADDR
// bc_type = otherBuildings [ i ] [ 1 ] ;
3411: LD_ADDR_OWVAR 42
3415: PUSH
3416: LD_VAR 0 3
3420: PUSH
3421: LD_VAR 0 2
3425: ARRAY
3426: PUSH
3427: LD_INT 1
3429: ARRAY
3430: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3431: LD_ADDR_OWVAR 43
3435: PUSH
3436: LD_VAR 0 3
3440: PUSH
3441: LD_VAR 0 2
3445: ARRAY
3446: PUSH
3447: LD_INT 5
3449: ARRAY
3450: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3451: LD_ADDR_VAR 0 4
3455: PUSH
3456: LD_VAR 0 3
3460: PUSH
3461: LD_VAR 0 2
3465: ARRAY
3466: PUSH
3467: LD_INT 2
3469: ARRAY
3470: PPUSH
3471: LD_VAR 0 3
3475: PUSH
3476: LD_VAR 0 2
3480: ARRAY
3481: PUSH
3482: LD_INT 3
3484: ARRAY
3485: PPUSH
3486: LD_VAR 0 3
3490: PUSH
3491: LD_VAR 0 2
3495: ARRAY
3496: PUSH
3497: LD_INT 4
3499: ARRAY
3500: PPUSH
3501: CALL_OW 47
3505: ST_TO_ADDR
// SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3506: LD_VAR 0 4
3510: PPUSH
3511: LD_VAR 0 3
3515: PUSH
3516: LD_VAR 0 2
3520: ARRAY
3521: PUSH
3522: LD_INT 7
3524: ARRAY
3525: PPUSH
3526: CALL_OW 234
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
3530: LD_VAR 0 4
3534: PPUSH
3535: CALL_OW 266
3539: PUSH
3540: LD_INT 0
3542: PUSH
3543: LD_INT 1
3545: PUSH
3546: EMPTY
3547: LIST
3548: LIST
3549: IN
3550: IFFALSE 3648
// begin SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 8 ] ) ;
3552: LD_VAR 0 4
3556: PPUSH
3557: CALL_OW 274
3561: PPUSH
3562: LD_INT 1
3564: PPUSH
3565: LD_VAR 0 3
3569: PUSH
3570: LD_VAR 0 2
3574: ARRAY
3575: PUSH
3576: LD_INT 8
3578: ARRAY
3579: PPUSH
3580: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 9 ] ) ;
3584: LD_VAR 0 4
3588: PPUSH
3589: CALL_OW 274
3593: PPUSH
3594: LD_INT 1
3596: PPUSH
3597: LD_VAR 0 3
3601: PUSH
3602: LD_VAR 0 2
3606: ARRAY
3607: PUSH
3608: LD_INT 9
3610: ARRAY
3611: PPUSH
3612: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 10 ] ) ;
3616: LD_VAR 0 4
3620: PPUSH
3621: CALL_OW 274
3625: PPUSH
3626: LD_INT 1
3628: PPUSH
3629: LD_VAR 0 3
3633: PUSH
3634: LD_VAR 0 2
3638: ARRAY
3639: PUSH
3640: LD_INT 10
3642: ARRAY
3643: PPUSH
3644: CALL_OW 277
// end ; end ;
3648: GO 3388
3650: POP
3651: POP
// otherBuildings = LoadVariable ( 02_AmericanBuildings_5 , [ ] ) ;
3652: LD_ADDR_VAR 0 3
3656: PUSH
3657: LD_STRING 02_AmericanBuildings_5
3659: PPUSH
3660: EMPTY
3661: PPUSH
3662: CALL_OW 30
3666: ST_TO_ADDR
// uc_side = 1 ;
3667: LD_ADDR_OWVAR 20
3671: PUSH
3672: LD_INT 1
3674: ST_TO_ADDR
// uc_nation = 1 ;
3675: LD_ADDR_OWVAR 21
3679: PUSH
3680: LD_INT 1
3682: ST_TO_ADDR
// for i := 1 to otherBuildings do
3683: LD_ADDR_VAR 0 2
3687: PUSH
3688: DOUBLE
3689: LD_INT 1
3691: DEC
3692: ST_TO_ADDR
3693: LD_VAR 0 3
3697: PUSH
3698: FOR_TO
3699: IFFALSE 3903
// begin bc_type = otherBuildings [ i ] [ 1 ] ;
3701: LD_ADDR_OWVAR 42
3705: PUSH
3706: LD_VAR 0 3
3710: PUSH
3711: LD_VAR 0 2
3715: ARRAY
3716: PUSH
3717: LD_INT 1
3719: ARRAY
3720: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3721: LD_ADDR_OWVAR 43
3725: PUSH
3726: LD_VAR 0 3
3730: PUSH
3731: LD_VAR 0 2
3735: ARRAY
3736: PUSH
3737: LD_INT 5
3739: ARRAY
3740: ST_TO_ADDR
// if bc_type = b_breastwork then
3741: LD_OWVAR 42
3745: PUSH
3746: LD_INT 31
3748: EQUAL
3749: IFFALSE 3822
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3751: LD_ADDR_VAR 0 4
3755: PUSH
3756: LD_VAR 0 3
3760: PUSH
3761: LD_VAR 0 2
3765: ARRAY
3766: PUSH
3767: LD_INT 2
3769: ARRAY
3770: PPUSH
3771: LD_VAR 0 3
3775: PUSH
3776: LD_VAR 0 2
3780: ARRAY
3781: PUSH
3782: LD_INT 3
3784: ARRAY
3785: PPUSH
3786: LD_VAR 0 3
3790: PUSH
3791: LD_VAR 0 2
3795: ARRAY
3796: PUSH
3797: LD_INT 4
3799: ARRAY
3800: PPUSH
3801: CALL_OW 47
3805: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , building ) ;
3806: LD_EXP 41
3810: PPUSH
3811: LD_VAR 0 4
3815: PPUSH
3816: CALL 8420 0 2
// end else
3820: GO 3877
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3822: LD_ADDR_VAR 0 4
3826: PUSH
3827: LD_VAR 0 3
3831: PUSH
3832: LD_VAR 0 2
3836: ARRAY
3837: PUSH
3838: LD_INT 2
3840: ARRAY
3841: PPUSH
3842: LD_VAR 0 3
3846: PUSH
3847: LD_VAR 0 2
3851: ARRAY
3852: PUSH
3853: LD_INT 3
3855: ARRAY
3856: PPUSH
3857: LD_VAR 0 3
3861: PUSH
3862: LD_VAR 0 2
3866: ARRAY
3867: PUSH
3868: LD_INT 4
3870: ARRAY
3871: PPUSH
3872: CALL_OW 47
3876: ST_TO_ADDR
// end ; SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3877: LD_VAR 0 4
3881: PPUSH
3882: LD_VAR 0 3
3886: PUSH
3887: LD_VAR 0 2
3891: ARRAY
3892: PUSH
3893: LD_INT 7
3895: ARRAY
3896: PPUSH
3897: CALL_OW 234
// end ;
3901: GO 3698
3903: POP
3904: POP
// end ;
3905: LD_VAR 0 1
3909: RET
// export function PrepareSecondBaseTeam ; var i ; begin
3910: LD_INT 0
3912: PPUSH
3913: PPUSH
// secondBaseTeam = [ ] ;
3914: LD_ADDR_EXP 75
3918: PUSH
3919: EMPTY
3920: ST_TO_ADDR
// SetResourceVisibility ( 226 , 109 , 6 ) ;
3921: LD_INT 226
3923: PPUSH
3924: LD_INT 109
3926: PPUSH
3927: LD_INT 6
3929: PPUSH
3930: CALL_OW 441
// uc_side = 6 ;
3934: LD_ADDR_OWVAR 20
3938: PUSH
3939: LD_INT 6
3941: ST_TO_ADDR
// uc_nation = 3 ;
3942: LD_ADDR_OWVAR 21
3946: PUSH
3947: LD_INT 3
3949: ST_TO_ADDR
// hc_name =  ;
3950: LD_ADDR_OWVAR 26
3954: PUSH
3955: LD_STRING 
3957: ST_TO_ADDR
// hc_gallery =  ;
3958: LD_ADDR_OWVAR 33
3962: PUSH
3963: LD_STRING 
3965: ST_TO_ADDR
// for i := 1 to 3 do
3966: LD_ADDR_VAR 0 2
3970: PUSH
3971: DOUBLE
3972: LD_INT 1
3974: DEC
3975: ST_TO_ADDR
3976: LD_INT 3
3978: PUSH
3979: FOR_TO
3980: IFFALSE 4033
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3982: LD_INT 0
3984: PPUSH
3985: LD_EXP 41
3989: PPUSH
3990: CALL_OW 381
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
3994: LD_ADDR_EXP 75
3998: PUSH
3999: LD_EXP 75
4003: PUSH
4004: CALL_OW 44
4008: ADD
4009: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ i ] , KirovSupportSpawnArea , false ) ;
4010: LD_EXP 75
4014: PUSH
4015: LD_VAR 0 2
4019: ARRAY
4020: PPUSH
4021: LD_INT 19
4023: PPUSH
4024: LD_INT 0
4026: PPUSH
4027: CALL_OW 49
// end ;
4031: GO 3979
4033: POP
4034: POP
// PrepareEngineer ( false , enemySkillLevel ) ;
4035: LD_INT 0
4037: PPUSH
4038: LD_EXP 41
4042: PPUSH
4043: CALL_OW 382
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4047: LD_ADDR_EXP 75
4051: PUSH
4052: LD_EXP 75
4056: PUSH
4057: CALL_OW 44
4061: ADD
4062: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 4 ] , KirovSupportSpawnArea , false ) ;
4063: LD_EXP 75
4067: PUSH
4068: LD_INT 4
4070: ARRAY
4071: PPUSH
4072: LD_INT 19
4074: PPUSH
4075: LD_INT 0
4077: PPUSH
4078: CALL_OW 49
// PrepareScientist ( false , enemySkillLevel ) ;
4082: LD_INT 0
4084: PPUSH
4085: LD_EXP 41
4089: PPUSH
4090: CALL_OW 384
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4094: LD_ADDR_EXP 75
4098: PUSH
4099: LD_EXP 75
4103: PUSH
4104: CALL_OW 44
4108: ADD
4109: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 5 ] , KirovSupportSpawnArea , false ) ;
4110: LD_EXP 75
4114: PUSH
4115: LD_INT 5
4117: ARRAY
4118: PPUSH
4119: LD_INT 19
4121: PPUSH
4122: LD_INT 0
4124: PPUSH
4125: CALL_OW 49
// ComMoveXY ( secondBaseTeam , 214 , 105 ) ;
4129: LD_EXP 75
4133: PPUSH
4134: LD_INT 214
4136: PPUSH
4137: LD_INT 105
4139: PPUSH
4140: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 222 , 115 , 0 ) ;
4144: LD_EXP 75
4148: PPUSH
4149: LD_INT 25
4151: PUSH
4152: LD_INT 2
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PPUSH
4159: CALL_OW 72
4163: PPUSH
4164: LD_INT 0
4166: PPUSH
4167: LD_INT 222
4169: PPUSH
4170: LD_INT 115
4172: PPUSH
4173: LD_INT 0
4175: PPUSH
4176: CALL_OW 205
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 224 , 107 ) ;
4180: LD_EXP 75
4184: PPUSH
4185: LD_INT 25
4187: PUSH
4188: LD_INT 2
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: PPUSH
4195: CALL_OW 72
4199: PPUSH
4200: LD_INT 224
4202: PPUSH
4203: LD_INT 107
4205: PPUSH
4206: CALL_OW 177
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 228 , 110 ) ;
4210: LD_EXP 75
4214: PPUSH
4215: LD_INT 25
4217: PUSH
4218: LD_INT 2
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: PPUSH
4225: CALL_OW 72
4229: PPUSH
4230: LD_INT 228
4232: PPUSH
4233: LD_INT 110
4235: PPUSH
4236: CALL_OW 177
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_oil_mine , 226 , 109 , 3 ) ;
4240: LD_EXP 75
4244: PPUSH
4245: LD_INT 25
4247: PUSH
4248: LD_INT 2
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: PPUSH
4255: CALL_OW 72
4259: PPUSH
4260: LD_INT 29
4262: PPUSH
4263: LD_INT 226
4265: PPUSH
4266: LD_INT 109
4268: PPUSH
4269: LD_INT 3
4271: PPUSH
4272: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_armoury , 216 , 114 , 0 ) ;
4276: LD_EXP 75
4280: PPUSH
4281: LD_INT 25
4283: PUSH
4284: LD_INT 2
4286: PUSH
4287: EMPTY
4288: LIST
4289: LIST
4290: PPUSH
4291: CALL_OW 72
4295: PPUSH
4296: LD_INT 4
4298: PPUSH
4299: LD_INT 216
4301: PPUSH
4302: LD_INT 114
4304: PPUSH
4305: LD_INT 0
4307: PPUSH
4308: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 215 , 103 , 3 ) ;
4312: LD_EXP 75
4316: PPUSH
4317: LD_INT 25
4319: PUSH
4320: LD_INT 2
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PPUSH
4327: CALL_OW 72
4331: PPUSH
4332: LD_INT 31
4334: PPUSH
4335: LD_INT 215
4337: PPUSH
4338: LD_INT 103
4340: PPUSH
4341: LD_INT 3
4343: PPUSH
4344: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 227 , 116 , 5 ) ;
4348: LD_EXP 75
4352: PPUSH
4353: LD_INT 25
4355: PUSH
4356: LD_INT 2
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: PPUSH
4363: CALL_OW 72
4367: PPUSH
4368: LD_INT 31
4370: PPUSH
4371: LD_INT 227
4373: PPUSH
4374: LD_INT 116
4376: PPUSH
4377: LD_INT 5
4379: PPUSH
4380: CALL_OW 205
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 208 , 106 ) ;
4384: LD_EXP 75
4388: PPUSH
4389: LD_INT 25
4391: PUSH
4392: LD_INT 2
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: PPUSH
4399: CALL_OW 72
4403: PPUSH
4404: LD_INT 208
4406: PPUSH
4407: LD_INT 106
4409: PPUSH
4410: CALL_OW 171
// AddComTurnXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 209 , 105 ) ;
4414: LD_EXP 75
4418: PPUSH
4419: LD_INT 25
4421: PUSH
4422: LD_INT 2
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: PPUSH
4429: CALL_OW 72
4433: PPUSH
4434: LD_INT 209
4436: PPUSH
4437: LD_INT 105
4439: PPUSH
4440: CALL_OW 178
// AddComMoveXY ( secondBaseTeam [ 5 ] , 209 , 105 ) ;
4444: LD_EXP 75
4448: PUSH
4449: LD_INT 5
4451: ARRAY
4452: PPUSH
4453: LD_INT 209
4455: PPUSH
4456: LD_INT 105
4458: PPUSH
4459: CALL_OW 171
// AddComTurnXY ( secondBaseTeam [ 5 ] , 208 , 106 ) ;
4463: LD_EXP 75
4467: PUSH
4468: LD_INT 5
4470: ARRAY
4471: PPUSH
4472: LD_INT 208
4474: PPUSH
4475: LD_INT 106
4477: PPUSH
4478: CALL_OW 178
// end ;
4482: LD_VAR 0 1
4486: RET
// export function SpawnKirovSupport ; var i , un ; begin
4487: LD_INT 0
4489: PPUSH
4490: PPUSH
4491: PPUSH
// uc_side = 6 ;
4492: LD_ADDR_OWVAR 20
4496: PUSH
4497: LD_INT 6
4499: ST_TO_ADDR
// uc_nation = 3 ;
4500: LD_ADDR_OWVAR 21
4504: PUSH
4505: LD_INT 3
4507: ST_TO_ADDR
// hc_name =  ;
4508: LD_ADDR_OWVAR 26
4512: PUSH
4513: LD_STRING 
4515: ST_TO_ADDR
// hc_gallery :=  ;
4516: LD_ADDR_OWVAR 33
4520: PUSH
4521: LD_STRING 
4523: ST_TO_ADDR
// for i := 1 to survivorsToSpawn do
4524: LD_ADDR_VAR 0 2
4528: PUSH
4529: DOUBLE
4530: LD_INT 1
4532: DEC
4533: ST_TO_ADDR
4534: LD_EXP 77
4538: PUSH
4539: FOR_TO
4540: IFFALSE 4628
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 2 ) ) ;
4542: LD_INT 0
4544: PPUSH
4545: LD_INT 1
4547: PPUSH
4548: LD_INT 4
4550: PPUSH
4551: CALL_OW 12
4555: PPUSH
4556: LD_INT 1
4558: PPUSH
4559: LD_INT 2
4561: PPUSH
4562: CALL_OW 12
4566: PPUSH
4567: CALL_OW 380
// un = CreateHuman ;
4571: LD_ADDR_VAR 0 3
4575: PUSH
4576: CALL_OW 44
4580: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ un ;
4581: LD_ADDR_EXP 76
4585: PUSH
4586: LD_EXP 76
4590: PUSH
4591: LD_VAR 0 3
4595: ADD
4596: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4597: LD_VAR 0 3
4601: PPUSH
4602: LD_INT 19
4604: PPUSH
4605: LD_INT 0
4607: PPUSH
4608: CALL_OW 49
// ComEnterUnit ( un , ru2_bar1 ) ;
4612: LD_VAR 0 3
4616: PPUSH
4617: LD_EXP 66
4621: PPUSH
4622: CALL_OW 120
// end ;
4626: GO 4539
4628: POP
4629: POP
// for i := 1 to neededUnitsSpawn [ 1 ] + 4 do
4630: LD_ADDR_VAR 0 2
4634: PUSH
4635: DOUBLE
4636: LD_INT 1
4638: DEC
4639: ST_TO_ADDR
4640: LD_EXP 78
4644: PUSH
4645: LD_INT 1
4647: ARRAY
4648: PUSH
4649: LD_INT 4
4651: PLUS
4652: PUSH
4653: FOR_TO
4654: IFFALSE 4752
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
4656: LD_INT 0
4658: PPUSH
4659: LD_INT 1
4661: PPUSH
4662: LD_INT 1
4664: PPUSH
4665: LD_INT 3
4667: PPUSH
4668: CALL_OW 12
4672: PPUSH
4673: CALL_OW 380
// un = CreateHuman ;
4677: LD_ADDR_VAR 0 3
4681: PUSH
4682: CALL_OW 44
4686: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4687: LD_VAR 0 3
4691: PPUSH
4692: LD_INT 19
4694: PPUSH
4695: LD_INT 0
4697: PPUSH
4698: CALL_OW 49
// if i > kirovBunkersToOccupy then
4702: LD_VAR 0 2
4706: PUSH
4707: LD_EXP 70
4711: GREATER
4712: IFFALSE 4730
// ComEnterUnit ( un , ru2_bar2 ) else
4714: LD_VAR 0 3
4718: PPUSH
4719: LD_EXP 67
4723: PPUSH
4724: CALL_OW 120
4728: GO 4750
// ComEnterUnit ( un , kirovBunkersToOccupy [ i ] ) ;
4730: LD_VAR 0 3
4734: PPUSH
4735: LD_EXP 70
4739: PUSH
4740: LD_VAR 0 2
4744: ARRAY
4745: PPUSH
4746: CALL_OW 120
// end ;
4750: GO 4653
4752: POP
4753: POP
// for i := 1 to neededUnitsSpawn [ 3 ] do
4754: LD_ADDR_VAR 0 2
4758: PUSH
4759: DOUBLE
4760: LD_INT 1
4762: DEC
4763: ST_TO_ADDR
4764: LD_EXP 78
4768: PUSH
4769: LD_INT 3
4771: ARRAY
4772: PUSH
4773: FOR_TO
4774: IFFALSE 4877
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
4776: LD_INT 0
4778: PPUSH
4779: LD_INT 3
4781: PPUSH
4782: LD_INT 1
4784: PPUSH
4785: LD_INT 3
4787: PPUSH
4788: CALL_OW 12
4792: PPUSH
4793: CALL_OW 380
// un = CreateHuman ;
4797: LD_ADDR_VAR 0 3
4801: PUSH
4802: CALL_OW 44
4806: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4807: LD_VAR 0 3
4811: PPUSH
4812: LD_INT 19
4814: PPUSH
4815: LD_INT 0
4817: PPUSH
4818: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
4822: LD_VAR 0 3
4826: PPUSH
4827: LD_INT 22
4829: PUSH
4830: LD_INT 6
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: LD_INT 21
4839: PUSH
4840: LD_INT 3
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: PUSH
4847: LD_INT 30
4849: PUSH
4850: LD_INT 3
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: LIST
4861: PPUSH
4862: CALL_OW 69
4866: PUSH
4867: LD_INT 1
4869: ARRAY
4870: PPUSH
4871: CALL_OW 120
// end ;
4875: GO 4773
4877: POP
4878: POP
// for i := 1 to neededUnitsSpawn [ 4 ] + 2 do
4879: LD_ADDR_VAR 0 2
4883: PUSH
4884: DOUBLE
4885: LD_INT 1
4887: DEC
4888: ST_TO_ADDR
4889: LD_EXP 78
4893: PUSH
4894: LD_INT 4
4896: ARRAY
4897: PUSH
4898: LD_INT 2
4900: PLUS
4901: PUSH
4902: FOR_TO
4903: IFFALSE 5009
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
4905: LD_INT 0
4907: PPUSH
4908: LD_INT 4
4910: PPUSH
4911: LD_INT 1
4913: PPUSH
4914: LD_INT 3
4916: PPUSH
4917: CALL_OW 12
4921: PPUSH
4922: CALL_OW 380
// un = CreateHuman ;
4926: LD_ADDR_VAR 0 3
4930: PUSH
4931: CALL_OW 44
4935: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4936: LD_VAR 0 3
4940: PPUSH
4941: LD_INT 19
4943: PPUSH
4944: LD_INT 0
4946: PPUSH
4947: CALL_OW 49
// ComEnterUnit ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ) ;
4951: LD_VAR 0 3
4955: PPUSH
4956: LD_INT 18
4958: PPUSH
4959: LD_INT 22
4961: PUSH
4962: LD_INT 6
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: PUSH
4969: LD_INT 21
4971: PUSH
4972: LD_INT 3
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: PUSH
4979: LD_INT 30
4981: PUSH
4982: LD_INT 6
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: LIST
4993: PPUSH
4994: CALL_OW 70
4998: PUSH
4999: LD_INT 1
5001: ARRAY
5002: PPUSH
5003: CALL_OW 120
// end ;
5007: GO 4902
5009: POP
5010: POP
// end ;
5011: LD_VAR 0 1
5015: RET
// export function SetSurvivorsArabianAttack ; var limit , unit ; begin
5016: LD_INT 0
5018: PPUSH
5019: PPUSH
5020: PPUSH
// survivorsArabianAttack = [ ] ;
5021: LD_ADDR_EXP 76
5025: PUSH
5026: EMPTY
5027: ST_TO_ADDR
// limit = 9 ;
5028: LD_ADDR_VAR 0 2
5032: PUSH
5033: LD_INT 9
5035: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ Popov ;
5036: LD_ADDR_EXP 76
5040: PUSH
5041: LD_EXP 76
5045: PUSH
5046: LD_EXP 59
5050: ADD
5051: ST_TO_ADDR
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 6 then
5052: LD_EXP 50
5056: PPUSH
5057: CALL_OW 302
5061: PUSH
5062: LD_EXP 50
5066: PPUSH
5067: CALL_OW 255
5071: PUSH
5072: LD_INT 6
5074: EQUAL
5075: AND
5076: IFFALSE 5108
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov ;
5078: LD_ADDR_EXP 76
5082: PUSH
5083: LD_EXP 76
5087: PUSH
5088: LD_EXP 50
5092: ADD
5093: ST_TO_ADDR
// limit = limit - 1 ;
5094: LD_ADDR_VAR 0 2
5098: PUSH
5099: LD_VAR 0 2
5103: PUSH
5104: LD_INT 1
5106: MINUS
5107: ST_TO_ADDR
// end ; if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 6 then
5108: LD_EXP 51
5112: PPUSH
5113: CALL_OW 302
5117: PUSH
5118: LD_EXP 51
5122: PPUSH
5123: CALL_OW 255
5127: PUSH
5128: LD_INT 6
5130: EQUAL
5131: AND
5132: IFFALSE 5164
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov2 ;
5134: LD_ADDR_EXP 76
5138: PUSH
5139: LD_EXP 76
5143: PUSH
5144: LD_EXP 51
5148: ADD
5149: ST_TO_ADDR
// limit = limit - 1 ;
5150: LD_ADDR_VAR 0 2
5154: PUSH
5155: LD_VAR 0 2
5159: PUSH
5160: LD_INT 1
5162: MINUS
5163: ST_TO_ADDR
// end ; for unit in other_survivors do
5164: LD_ADDR_VAR 0 3
5168: PUSH
5169: LD_EXP 53
5173: PUSH
5174: FOR_IN
5175: IFFALSE 5235
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5177: LD_VAR 0 3
5181: PPUSH
5182: CALL_OW 302
5186: PUSH
5187: LD_VAR 0 3
5191: PPUSH
5192: CALL_OW 255
5196: PUSH
5197: LD_INT 6
5199: EQUAL
5200: AND
5201: IFFALSE 5233
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5203: LD_ADDR_EXP 76
5207: PUSH
5208: LD_EXP 76
5212: PUSH
5213: LD_VAR 0 3
5217: ADD
5218: ST_TO_ADDR
// limit = limit - 1 ;
5219: LD_ADDR_VAR 0 2
5223: PUSH
5224: LD_VAR 0 2
5228: PUSH
5229: LD_INT 1
5231: MINUS
5232: ST_TO_ADDR
// end ; end ;
5233: GO 5174
5235: POP
5236: POP
// for unit in otherBeriaUnits do
5237: LD_ADDR_VAR 0 3
5241: PUSH
5242: LD_EXP 55
5246: PUSH
5247: FOR_IN
5248: IFFALSE 5308
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5250: LD_VAR 0 3
5254: PPUSH
5255: CALL_OW 302
5259: PUSH
5260: LD_VAR 0 3
5264: PPUSH
5265: CALL_OW 255
5269: PUSH
5270: LD_INT 6
5272: EQUAL
5273: AND
5274: IFFALSE 5306
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5276: LD_ADDR_EXP 76
5280: PUSH
5281: LD_EXP 76
5285: PUSH
5286: LD_VAR 0 3
5290: ADD
5291: ST_TO_ADDR
// limit = limit - 1 ;
5292: LD_ADDR_VAR 0 2
5296: PUSH
5297: LD_VAR 0 2
5301: PUSH
5302: LD_INT 1
5304: MINUS
5305: ST_TO_ADDR
// end ; end ;
5306: GO 5247
5308: POP
5309: POP
// if limit > 0 then
5310: LD_VAR 0 2
5314: PUSH
5315: LD_INT 0
5317: GREATER
5318: IFFALSE 5330
// survivorsToSpawn = limit ;
5320: LD_ADDR_EXP 77
5324: PUSH
5325: LD_VAR 0 2
5329: ST_TO_ADDR
// end ;
5330: LD_VAR 0 1
5334: RET
// export function PrepareScholtze ; begin
5335: LD_INT 0
5337: PPUSH
// uc_side = 8 ;
5338: LD_ADDR_OWVAR 20
5342: PUSH
5343: LD_INT 8
5345: ST_TO_ADDR
// Scholtze = PrepareUnitExt ( Scholtze , false ) ;
5346: LD_ADDR_EXP 52
5350: PUSH
5351: LD_STRING Scholtze
5353: PPUSH
5354: LD_INT 0
5356: PPUSH
5357: CALL 6886 0 2
5361: ST_TO_ADDR
// PlaceUnitArea ( Scholtze , ScholtzeSpawnArea , true ) ;
5362: LD_EXP 52
5366: PPUSH
5367: LD_INT 30
5369: PPUSH
5370: LD_INT 1
5372: PPUSH
5373: CALL_OW 49
// end ; end_of_file
5377: LD_VAR 0 1
5381: RET
// export amIntroUnits ; export amSupportTroops ; export amPatrol ; export amBase ; export function PrepareAmericans ; begin
5382: LD_INT 0
5384: PPUSH
// amSupportTroops = [ ] ;
5385: LD_ADDR_EXP 81
5389: PUSH
5390: EMPTY
5391: ST_TO_ADDR
// PrepareOmicronBase ;
5392: CALL 5401 0 0
// end ;
5396: LD_VAR 0 1
5400: RET
// function PrepareOmicronBase ; var base ; begin
5401: LD_INT 0
5403: PPUSH
5404: PPUSH
// amBase := PrepareBase ( omikron , OmicronBaseArea , omikron , [ 1 , 2 , 2 ] [ Difficulty ] , [ 3000 , 3000 , 0 ] , [ 7 , 3 , 4 , 2 ] ) ;
5405: LD_ADDR_EXP 83
5409: PUSH
5410: LD_INT 64
5412: PPUSH
5413: LD_INT 13
5415: PPUSH
5416: LD_STRING omikron
5418: PPUSH
5419: LD_INT 1
5421: PUSH
5422: LD_INT 2
5424: PUSH
5425: LD_INT 2
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: LIST
5432: PUSH
5433: LD_OWVAR 67
5437: ARRAY
5438: PPUSH
5439: LD_INT 3000
5441: PUSH
5442: LD_INT 3000
5444: PUSH
5445: LD_INT 0
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: LIST
5452: PPUSH
5453: LD_INT 7
5455: PUSH
5456: LD_INT 3
5458: PUSH
5459: LD_INT 4
5461: PUSH
5462: LD_INT 2
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: PPUSH
5471: CALL 37004 0 6
5475: ST_TO_ADDR
// case Difficulty of 2 :
5476: LD_OWVAR 67
5480: PUSH
5481: LD_INT 2
5483: DOUBLE
5484: EQUAL
5485: IFTRUE 5489
5487: GO 5505
5489: POP
// begin SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5490: LD_INT 51
5492: PPUSH
5493: LD_INT 1
5495: PPUSH
5496: LD_INT 1
5498: PPUSH
5499: CALL_OW 322
// end ; 3 :
5503: GO 5543
5505: LD_INT 3
5507: DOUBLE
5508: EQUAL
5509: IFTRUE 5513
5511: GO 5542
5513: POP
// begin SetTech ( tech_Tech2 , 1 , state_enabled ) ;
5514: LD_INT 49
5516: PPUSH
5517: LD_INT 1
5519: PPUSH
5520: LD_INT 1
5522: PPUSH
5523: CALL_OW 322
// SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5527: LD_INT 51
5529: PPUSH
5530: LD_INT 1
5532: PPUSH
5533: LD_INT 1
5535: PPUSH
5536: CALL_OW 322
// end ; end ;
5540: GO 5543
5542: POP
// end ;
5543: LD_VAR 0 1
5547: RET
// export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
5548: LD_INT 0
5550: PPUSH
5551: PPUSH
5552: PPUSH
5553: PPUSH
// amIntroUnits = [ ] ;
5554: LD_ADDR_EXP 80
5558: PUSH
5559: EMPTY
5560: ST_TO_ADDR
// uc_side = 1 ;
5561: LD_ADDR_OWVAR 20
5565: PUSH
5566: LD_INT 1
5568: ST_TO_ADDR
// uc_nation = nation_american ;
5569: LD_ADDR_OWVAR 21
5573: PUSH
5574: LD_INT 1
5576: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
5577: LD_ADDR_OWVAR 37
5581: PUSH
5582: LD_INT 3
5584: ST_TO_ADDR
// vc_control = control_manual ;
5585: LD_ADDR_OWVAR 38
5589: PUSH
5590: LD_INT 1
5592: ST_TO_ADDR
// vc_engine = engine_combustion ;
5593: LD_ADDR_OWVAR 39
5597: PUSH
5598: LD_INT 1
5600: ST_TO_ADDR
// vc_weapon = us_double_gun ;
5601: LD_ADDR_OWVAR 40
5605: PUSH
5606: LD_INT 5
5608: ST_TO_ADDR
// veh = CreateVehicle ;
5609: LD_ADDR_VAR 0 3
5613: PUSH
5614: CALL_OW 45
5618: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5619: LD_VAR 0 3
5623: PPUSH
5624: LD_INT 4
5626: PPUSH
5627: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
5631: LD_ADDR_EXP 80
5635: PUSH
5636: LD_EXP 80
5640: PUSH
5641: LD_VAR 0 3
5645: ADD
5646: ST_TO_ADDR
// PlaceUnitArea ( veh , CutsceneAmSupportSpawnArea , false ) ;
5647: LD_VAR 0 3
5651: PPUSH
5652: LD_INT 5
5654: PPUSH
5655: LD_INT 0
5657: PPUSH
5658: CALL_OW 49
// for i := 1 to 5 do
5662: LD_ADDR_VAR 0 2
5666: PUSH
5667: DOUBLE
5668: LD_INT 1
5670: DEC
5671: ST_TO_ADDR
5672: LD_INT 5
5674: PUSH
5675: FOR_TO
5676: IFFALSE 5773
// begin hc_name :=  ;
5678: LD_ADDR_OWVAR 26
5682: PUSH
5683: LD_STRING 
5685: ST_TO_ADDR
// hc_gallery :=  ;
5686: LD_ADDR_OWVAR 33
5690: PUSH
5691: LD_STRING 
5693: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
5694: LD_INT 0
5696: PPUSH
5697: LD_INT 1
5699: PPUSH
5700: CALL_OW 381
// human = CreateHuman ;
5704: LD_ADDR_VAR 0 4
5708: PUSH
5709: CALL_OW 44
5713: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
5714: LD_ADDR_EXP 80
5718: PUSH
5719: LD_EXP 80
5723: PUSH
5724: LD_VAR 0 4
5728: ADD
5729: ST_TO_ADDR
// if i < 5 then
5730: LD_VAR 0 2
5734: PUSH
5735: LD_INT 5
5737: LESS
5738: IFFALSE 5757
// PlaceUnitArea ( human , CutsceneAmSupportSpawnArea , false ) else
5740: LD_VAR 0 4
5744: PPUSH
5745: LD_INT 5
5747: PPUSH
5748: LD_INT 0
5750: PPUSH
5751: CALL_OW 49
5755: GO 5771
// begin PlaceHumanInUnit ( human , veh ) ;
5757: LD_VAR 0 4
5761: PPUSH
5762: LD_VAR 0 3
5766: PPUSH
5767: CALL_OW 52
// end ; end ;
5771: GO 5675
5773: POP
5774: POP
// end ;
5775: LD_VAR 0 1
5779: RET
// export function PrepareAmericanSupportTroops ( soldiersAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road ; begin
5780: LD_INT 0
5782: PPUSH
5783: PPUSH
5784: PPUSH
5785: PPUSH
5786: PPUSH
// uc_side := 1 ;
5787: LD_ADDR_OWVAR 20
5791: PUSH
5792: LD_INT 1
5794: ST_TO_ADDR
// uc_nation := 1 ;
5795: LD_ADDR_OWVAR 21
5799: PUSH
5800: LD_INT 1
5802: ST_TO_ADDR
// hc_name :=  ;
5803: LD_ADDR_OWVAR 26
5807: PUSH
5808: LD_STRING 
5810: ST_TO_ADDR
// hc_gallery :=  ;
5811: LD_ADDR_OWVAR 33
5815: PUSH
5816: LD_STRING 
5818: ST_TO_ADDR
// for i := 1 to soldiersAmount do
5819: LD_ADDR_VAR 0 6
5823: PUSH
5824: DOUBLE
5825: LD_INT 1
5827: DEC
5828: ST_TO_ADDR
5829: LD_VAR 0 1
5833: PUSH
5834: FOR_TO
5835: IFFALSE 5894
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5837: LD_INT 0
5839: PPUSH
5840: LD_EXP 41
5844: PPUSH
5845: CALL_OW 381
// un = CreateHuman ;
5849: LD_ADDR_VAR 0 7
5853: PUSH
5854: CALL_OW 44
5858: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
5859: LD_ADDR_EXP 81
5863: PUSH
5864: LD_EXP 81
5868: PUSH
5869: LD_VAR 0 7
5873: ADD
5874: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5875: LD_VAR 0 7
5879: PPUSH
5880: LD_VAR 0 4
5884: PPUSH
5885: LD_INT 0
5887: PPUSH
5888: CALL_OW 49
// end ;
5892: GO 5834
5894: POP
5895: POP
// for i := 1 to scientistsAmount do
5896: LD_ADDR_VAR 0 6
5900: PUSH
5901: DOUBLE
5902: LD_INT 1
5904: DEC
5905: ST_TO_ADDR
5906: LD_VAR 0 2
5910: PUSH
5911: FOR_TO
5912: IFFALSE 5971
// begin PrepareScientist ( false , enemySkillLevel ) ;
5914: LD_INT 0
5916: PPUSH
5917: LD_EXP 41
5921: PPUSH
5922: CALL_OW 384
// un = CreateHuman ;
5926: LD_ADDR_VAR 0 7
5930: PUSH
5931: CALL_OW 44
5935: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
5936: LD_ADDR_EXP 81
5940: PUSH
5941: LD_EXP 81
5945: PUSH
5946: LD_VAR 0 7
5950: ADD
5951: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5952: LD_VAR 0 7
5956: PPUSH
5957: LD_VAR 0 4
5961: PPUSH
5962: LD_INT 0
5964: PPUSH
5965: CALL_OW 49
// end ;
5969: GO 5911
5971: POP
5972: POP
// for i := 1 to vehiclesAmount do
5973: LD_ADDR_VAR 0 6
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_VAR 0 3
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6155
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5991: LD_ADDR_OWVAR 40
5995: PUSH
5996: LD_INT 2
5998: PUSH
5999: LD_INT 4
6001: PUSH
6002: LD_INT 3
6004: PUSH
6005: EMPTY
6006: LIST
6007: LIST
6008: LIST
6009: PUSH
6010: LD_INT 1
6012: PPUSH
6013: LD_INT 3
6015: PPUSH
6016: CALL_OW 12
6020: ARRAY
6021: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
6022: LD_ADDR_OWVAR 37
6026: PUSH
6027: LD_INT 3
6029: ST_TO_ADDR
// vc_control = control_manual ;
6030: LD_ADDR_OWVAR 38
6034: PUSH
6035: LD_INT 1
6037: ST_TO_ADDR
// vc_engine = engine_combustion ;
6038: LD_ADDR_OWVAR 39
6042: PUSH
6043: LD_INT 1
6045: ST_TO_ADDR
// veh = CreateVehicle ;
6046: LD_ADDR_VAR 0 8
6050: PUSH
6051: CALL_OW 45
6055: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ veh ;
6056: LD_ADDR_EXP 81
6060: PUSH
6061: LD_EXP 81
6065: PUSH
6066: LD_VAR 0 8
6070: ADD
6071: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6072: LD_VAR 0 8
6076: PPUSH
6077: LD_VAR 0 4
6081: PPUSH
6082: LD_INT 0
6084: PPUSH
6085: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
6089: LD_INT 0
6091: PPUSH
6092: LD_EXP 41
6096: PPUSH
6097: CALL_OW 383
// un = CreateHuman ;
6101: LD_ADDR_VAR 0 7
6105: PUSH
6106: CALL_OW 44
6110: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6111: LD_ADDR_EXP 81
6115: PUSH
6116: LD_EXP 81
6120: PUSH
6121: LD_VAR 0 7
6125: ADD
6126: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6127: LD_VAR 0 7
6131: PPUSH
6132: LD_VAR 0 8
6136: PPUSH
6137: CALL_OW 52
// SetFuel ( veh , 100 ) ;
6141: LD_VAR 0 8
6145: PPUSH
6146: LD_INT 100
6148: PPUSH
6149: CALL_OW 240
// end ;
6153: GO 5988
6155: POP
6156: POP
// case area of NorthAmericanSpawnArea :
6157: LD_VAR 0 4
6161: PUSH
6162: LD_INT 7
6164: DOUBLE
6165: EQUAL
6166: IFTRUE 6170
6168: GO 6181
6170: POP
// road = NorthRoadArea ; SouthAmericanSpawnArea1 :
6171: LD_ADDR_VAR 0 9
6175: PUSH
6176: LD_INT 10
6178: ST_TO_ADDR
6179: GO 6220
6181: LD_INT 9
6183: DOUBLE
6184: EQUAL
6185: IFTRUE 6189
6187: GO 6200
6189: POP
// road = SouthRoadArea1 ; SouthAmericanSpawnArea2 :
6190: LD_ADDR_VAR 0 9
6194: PUSH
6195: LD_INT 11
6197: ST_TO_ADDR
6198: GO 6220
6200: LD_INT 8
6202: DOUBLE
6203: EQUAL
6204: IFTRUE 6208
6206: GO 6219
6208: POP
// road = SouthRoadArea2 ; end ;
6209: LD_ADDR_VAR 0 9
6213: PUSH
6214: LD_INT 12
6216: ST_TO_ADDR
6217: GO 6220
6219: POP
// MoveToBase ( amSupportTroops , road ) ;
6220: LD_EXP 81
6224: PPUSH
6225: LD_VAR 0 9
6229: PPUSH
6230: CALL 18244 0 2
// end ;
6234: LD_VAR 0 5
6238: RET
// export function PrepareAmericanPatrol ; var un ; begin
6239: LD_INT 0
6241: PPUSH
6242: PPUSH
// amPatrol = [ ] ;
6243: LD_ADDR_EXP 82
6247: PUSH
6248: EMPTY
6249: ST_TO_ADDR
// uc_side = 1 ;
6250: LD_ADDR_OWVAR 20
6254: PUSH
6255: LD_INT 1
6257: ST_TO_ADDR
// uc_nation = 1 ;
6258: LD_ADDR_OWVAR 21
6262: PUSH
6263: LD_INT 1
6265: ST_TO_ADDR
// un = PrepareUnitExt ( Campell , false ) ;
6266: LD_ADDR_VAR 0 2
6270: PUSH
6271: LD_STRING Campell
6273: PPUSH
6274: LD_INT 0
6276: PPUSH
6277: CALL 6886 0 2
6281: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6282: LD_ADDR_EXP 82
6286: PUSH
6287: LD_EXP 82
6291: PUSH
6292: LD_VAR 0 2
6296: ADD
6297: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6298: LD_VAR 0 2
6302: PPUSH
6303: LD_INT 14
6305: PPUSH
6306: LD_INT 0
6308: PPUSH
6309: CALL_OW 49
// SetClass ( un , 1 ) ;
6313: LD_VAR 0 2
6317: PPUSH
6318: LD_INT 1
6320: PPUSH
6321: CALL_OW 336
// PrepareSoldier ( sex_male , enemySkillLevel ) ;
6325: LD_INT 1
6327: PPUSH
6328: LD_EXP 41
6332: PPUSH
6333: CALL_OW 381
// un = CreateHuman ;
6337: LD_ADDR_VAR 0 2
6341: PUSH
6342: CALL_OW 44
6346: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6347: LD_ADDR_EXP 82
6351: PUSH
6352: LD_EXP 82
6356: PUSH
6357: LD_VAR 0 2
6361: ADD
6362: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6363: LD_VAR 0 2
6367: PPUSH
6368: LD_INT 14
6370: PPUSH
6371: LD_INT 0
6373: PPUSH
6374: CALL_OW 49
// ComAttackUnit ( amPatrol , Scholtze ) ;
6378: LD_EXP 82
6382: PPUSH
6383: LD_EXP 52
6387: PPUSH
6388: CALL_OW 115
// end ; end_of_file
6392: LD_VAR 0 1
6396: RET
// export northGroup , southGroup ; export function PrepareArabian ; var i , un , veh ; begin
6397: LD_INT 0
6399: PPUSH
6400: PPUSH
6401: PPUSH
6402: PPUSH
// northGroup = [ ] ;
6403: LD_ADDR_EXP 84
6407: PUSH
6408: EMPTY
6409: ST_TO_ADDR
// southGroup = [ ] ;
6410: LD_ADDR_EXP 85
6414: PUSH
6415: EMPTY
6416: ST_TO_ADDR
// uc_side = 2 ;
6417: LD_ADDR_OWVAR 20
6421: PUSH
6422: LD_INT 2
6424: ST_TO_ADDR
// uc_nation = 2 ;
6425: LD_ADDR_OWVAR 21
6429: PUSH
6430: LD_INT 2
6432: ST_TO_ADDR
// hc_name :=  ;
6433: LD_ADDR_OWVAR 26
6437: PUSH
6438: LD_STRING 
6440: ST_TO_ADDR
// hc_gallery :=  ;
6441: LD_ADDR_OWVAR 33
6445: PUSH
6446: LD_STRING 
6448: ST_TO_ADDR
// for i := 1 to 10 do
6449: LD_ADDR_VAR 0 2
6453: PUSH
6454: DOUBLE
6455: LD_INT 1
6457: DEC
6458: ST_TO_ADDR
6459: LD_INT 10
6461: PUSH
6462: FOR_TO
6463: IFFALSE 6577
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
6465: LD_INT 13
6467: PPUSH
6468: LD_INT 1
6470: PPUSH
6471: LD_INT 1
6473: PPUSH
6474: LD_INT 26
6476: PPUSH
6477: LD_INT 100
6479: PPUSH
6480: CALL 33595 0 5
// veh = CreateVehicle ;
6484: LD_ADDR_VAR 0 4
6488: PUSH
6489: CALL_OW 45
6493: ST_TO_ADDR
// southGroup = southGroup ^ veh ;
6494: LD_ADDR_EXP 85
6498: PUSH
6499: LD_EXP 85
6503: PUSH
6504: LD_VAR 0 4
6508: ADD
6509: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea2 , false ) ;
6510: LD_VAR 0 4
6514: PPUSH
6515: LD_INT 23
6517: PPUSH
6518: LD_INT 0
6520: PPUSH
6521: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6525: LD_INT 0
6527: PPUSH
6528: LD_INT 8
6530: PPUSH
6531: CALL_OW 383
// un = CreateHuman ;
6535: LD_ADDR_VAR 0 3
6539: PUSH
6540: CALL_OW 44
6544: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6545: LD_ADDR_EXP 85
6549: PUSH
6550: LD_EXP 85
6554: PUSH
6555: LD_VAR 0 3
6559: ADD
6560: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6561: LD_VAR 0 3
6565: PPUSH
6566: LD_VAR 0 4
6570: PPUSH
6571: CALL_OW 52
// end ;
6575: GO 6462
6577: POP
6578: POP
// for i := 1 to 20 do
6579: LD_ADDR_VAR 0 2
6583: PUSH
6584: DOUBLE
6585: LD_INT 1
6587: DEC
6588: ST_TO_ADDR
6589: LD_INT 20
6591: PUSH
6592: FOR_TO
6593: IFFALSE 6648
// begin PrepareSoldier ( false , 8 ) ;
6595: LD_INT 0
6597: PPUSH
6598: LD_INT 8
6600: PPUSH
6601: CALL_OW 381
// un = CreateHuman ;
6605: LD_ADDR_VAR 0 3
6609: PUSH
6610: CALL_OW 44
6614: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6615: LD_ADDR_EXP 85
6619: PUSH
6620: LD_EXP 85
6624: PUSH
6625: LD_VAR 0 3
6629: ADD
6630: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6631: LD_VAR 0 3
6635: PPUSH
6636: LD_INT 23
6638: PPUSH
6639: LD_INT 0
6641: PPUSH
6642: CALL_OW 49
// end ;
6646: GO 6592
6648: POP
6649: POP
// for i := 1 to 20 do
6650: LD_ADDR_VAR 0 2
6654: PUSH
6655: DOUBLE
6656: LD_INT 1
6658: DEC
6659: ST_TO_ADDR
6660: LD_INT 20
6662: PUSH
6663: FOR_TO
6664: IFFALSE 6722
// begin PrepareHuman ( false , class_mortar , 8 ) ;
6666: LD_INT 0
6668: PPUSH
6669: LD_INT 8
6671: PPUSH
6672: LD_INT 8
6674: PPUSH
6675: CALL_OW 380
// un = CreateHuman ;
6679: LD_ADDR_VAR 0 3
6683: PUSH
6684: CALL_OW 44
6688: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6689: LD_ADDR_EXP 85
6693: PUSH
6694: LD_EXP 85
6698: PUSH
6699: LD_VAR 0 3
6703: ADD
6704: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6705: LD_VAR 0 3
6709: PPUSH
6710: LD_INT 23
6712: PPUSH
6713: LD_INT 0
6715: PPUSH
6716: CALL_OW 49
// end ;
6720: GO 6663
6722: POP
6723: POP
// for i := 1 to 10 do
6724: LD_ADDR_VAR 0 2
6728: PUSH
6729: DOUBLE
6730: LD_INT 1
6732: DEC
6733: ST_TO_ADDR
6734: LD_INT 10
6736: PUSH
6737: FOR_TO
6738: IFFALSE 6879
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower ] [ Rand ( 1 , 4 ) ] , 100 ) ;
6740: LD_INT 13
6742: PPUSH
6743: LD_INT 1
6745: PPUSH
6746: LD_INT 1
6748: PPUSH
6749: LD_INT 25
6751: PUSH
6752: LD_INT 27
6754: PUSH
6755: LD_INT 23
6757: PUSH
6758: LD_INT 26
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 1
6769: PPUSH
6770: LD_INT 4
6772: PPUSH
6773: CALL_OW 12
6777: ARRAY
6778: PPUSH
6779: LD_INT 100
6781: PPUSH
6782: CALL 33595 0 5
// veh = CreateVehicle ;
6786: LD_ADDR_VAR 0 4
6790: PUSH
6791: CALL_OW 45
6795: ST_TO_ADDR
// northGroup = northGroup ^ veh ;
6796: LD_ADDR_EXP 84
6800: PUSH
6801: LD_EXP 84
6805: PUSH
6806: LD_VAR 0 4
6810: ADD
6811: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
6812: LD_VAR 0 4
6816: PPUSH
6817: LD_INT 22
6819: PPUSH
6820: LD_INT 0
6822: PPUSH
6823: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6827: LD_INT 0
6829: PPUSH
6830: LD_INT 8
6832: PPUSH
6833: CALL_OW 383
// un = CreateHuman ;
6837: LD_ADDR_VAR 0 3
6841: PUSH
6842: CALL_OW 44
6846: ST_TO_ADDR
// northGroup = northGroup ^ un ;
6847: LD_ADDR_EXP 84
6851: PUSH
6852: LD_EXP 84
6856: PUSH
6857: LD_VAR 0 3
6861: ADD
6862: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6863: LD_VAR 0 3
6867: PPUSH
6868: LD_VAR 0 4
6872: PPUSH
6873: CALL_OW 52
// end ;
6877: GO 6737
6879: POP
6880: POP
// end ; end_of_file
6881: LD_VAR 0 1
6885: RET
// export function PrepareUnitExt ( ident , exist_mode ) ; var unit ; begin
6886: LD_INT 0
6888: PPUSH
6889: PPUSH
// if exist_mode then
6890: LD_VAR 0 2
6894: IFFALSE 6919
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
6896: LD_ADDR_VAR 0 4
6900: PUSH
6901: LD_EXP 34
6905: PUSH
6906: LD_VAR 0 1
6910: STR
6911: PPUSH
6912: CALL_OW 34
6916: ST_TO_ADDR
6917: GO 6934
// unit := NewCharacter ( ident ) ;
6919: LD_ADDR_VAR 0 4
6923: PUSH
6924: LD_VAR 0 1
6928: PPUSH
6929: CALL_OW 25
6933: ST_TO_ADDR
// result := unit ;
6934: LD_ADDR_VAR 0 3
6938: PUSH
6939: LD_VAR 0 4
6943: ST_TO_ADDR
// end ;
6944: LD_VAR 0 3
6948: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
6949: LD_INT 0
6951: PPUSH
6952: PPUSH
6953: PPUSH
6954: PPUSH
// units = characters ;
6955: LD_ADDR_VAR 0 9
6959: PUSH
6960: LD_VAR 0 1
6964: ST_TO_ADDR
// units := units diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
6965: LD_ADDR_VAR 0 9
6969: PUSH
6970: LD_VAR 0 9
6974: PUSH
6975: LD_EXP 46
6979: PUSH
6980: LD_EXP 47
6984: PUSH
6985: LD_EXP 48
6989: PUSH
6990: LD_EXP 49
6994: PUSH
6995: LD_EXP 50
6999: PUSH
7000: LD_EXP 51
7004: PUSH
7005: LD_EXP 52
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: DIFF
7019: ST_TO_ADDR
// if not units and not canTalkHero then
7020: LD_VAR 0 9
7024: NOT
7025: PUSH
7026: LD_VAR 0 5
7030: NOT
7031: AND
7032: IFFALSE 7036
// exit ;
7034: GO 7209
// if not units then
7036: LD_VAR 0 9
7040: NOT
7041: IFFALSE 7062
// units = characters diff [ Burlak ] ;
7043: LD_ADDR_VAR 0 9
7047: PUSH
7048: LD_VAR 0 1
7052: PUSH
7053: LD_EXP 46
7057: PUSH
7058: EMPTY
7059: LIST
7060: DIFF
7061: ST_TO_ADDR
// if not units and canTalkHero then
7062: LD_VAR 0 9
7066: NOT
7067: PUSH
7068: LD_VAR 0 5
7072: AND
7073: IFFALSE 7077
// exit ;
7075: GO 7209
// speaker := units [ rand ( 1 , units ) ] ;
7077: LD_ADDR_VAR 0 8
7081: PUSH
7082: LD_VAR 0 9
7086: PUSH
7087: LD_INT 1
7089: PPUSH
7090: LD_VAR 0 9
7094: PPUSH
7095: CALL_OW 12
7099: ARRAY
7100: ST_TO_ADDR
// if radio then
7101: LD_VAR 0 4
7105: IFFALSE 7154
// begin if GetSex ( speaker ) = sex_male then
7107: LD_VAR 0 8
7111: PPUSH
7112: CALL_OW 258
7116: PUSH
7117: LD_INT 1
7119: EQUAL
7120: IFFALSE 7138
// SayRadio ( speaker , dialogMID ) else
7122: LD_VAR 0 8
7126: PPUSH
7127: LD_VAR 0 2
7131: PPUSH
7132: CALL_OW 94
7136: GO 7152
// SayRadio ( speaker , dialogFID ) ;
7138: LD_VAR 0 8
7142: PPUSH
7143: LD_VAR 0 3
7147: PPUSH
7148: CALL_OW 94
// end else
7152: GO 7199
// begin if GetSex ( speaker ) = sex_male then
7154: LD_VAR 0 8
7158: PPUSH
7159: CALL_OW 258
7163: PUSH
7164: LD_INT 1
7166: EQUAL
7167: IFFALSE 7185
// Say ( speaker , dialogMID ) else
7169: LD_VAR 0 8
7173: PPUSH
7174: LD_VAR 0 2
7178: PPUSH
7179: CALL_OW 88
7183: GO 7199
// Say ( speaker , dialogFID ) ;
7185: LD_VAR 0 8
7189: PPUSH
7190: LD_VAR 0 3
7194: PPUSH
7195: CALL_OW 88
// end ; result := speaker ;
7199: LD_ADDR_VAR 0 6
7203: PUSH
7204: LD_VAR 0 8
7208: ST_TO_ADDR
// end ;
7209: LD_VAR 0 6
7213: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
7214: LD_INT 0
7216: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
7217: LD_VAR 0 1
7221: PPUSH
7222: CALL_OW 255
7226: PUSH
7227: LD_VAR 0 3
7231: EQUAL
7232: PUSH
7233: LD_VAR 0 1
7237: PPUSH
7238: CALL_OW 302
7242: AND
7243: IFFALSE 7265
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
7245: LD_VAR 0 1
7249: PPUSH
7250: LD_EXP 33
7254: PUSH
7255: LD_VAR 0 2
7259: STR
7260: PPUSH
7261: CALL_OW 38
// end ;
7265: LD_VAR 0 4
7269: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
7270: LD_INT 0
7272: PPUSH
7273: PPUSH
7274: PPUSH
// resultCharactersToSave = [ ] ;
7275: LD_ADDR_VAR 0 6
7279: PUSH
7280: EMPTY
7281: ST_TO_ADDR
// for unit in characters do
7282: LD_ADDR_VAR 0 5
7286: PUSH
7287: LD_VAR 0 1
7291: PUSH
7292: FOR_IN
7293: IFFALSE 7341
// if GetSide ( unit ) = side and IsOK ( unit ) then
7295: LD_VAR 0 5
7299: PPUSH
7300: CALL_OW 255
7304: PUSH
7305: LD_VAR 0 3
7309: EQUAL
7310: PUSH
7311: LD_VAR 0 5
7315: PPUSH
7316: CALL_OW 302
7320: AND
7321: IFFALSE 7339
// resultCharactersToSave = resultCharactersToSave ^ unit ;
7323: LD_ADDR_VAR 0 6
7327: PUSH
7328: LD_VAR 0 6
7332: PUSH
7333: LD_VAR 0 5
7337: ADD
7338: ST_TO_ADDR
7339: GO 7292
7341: POP
7342: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
7343: LD_VAR 0 6
7347: PPUSH
7348: LD_EXP 33
7352: PUSH
7353: LD_VAR 0 2
7357: STR
7358: PPUSH
7359: CALL_OW 38
// end ;
7363: LD_VAR 0 4
7367: RET
// export function SelectCharacters ( maxUnitToChoose ) ; var i , charsToChoose , selectedPeople ; begin
7368: LD_INT 0
7370: PPUSH
7371: PPUSH
7372: PPUSH
7373: PPUSH
// charsToChoose = otherKirovUnits ;
7374: LD_ADDR_VAR 0 4
7378: PUSH
7379: LD_EXP 62
7383: ST_TO_ADDR
// charsToChoose = charsToChoose ^ otherBeriaUnits ;
7384: LD_ADDR_VAR 0 4
7388: PUSH
7389: LD_VAR 0 4
7393: PUSH
7394: LD_EXP 55
7398: ADD
7399: ST_TO_ADDR
// charsToChoose = charsToChoose ^ other_survivors ;
7400: LD_ADDR_VAR 0 4
7404: PUSH
7405: LD_VAR 0 4
7409: PUSH
7410: LD_EXP 53
7414: ADD
7415: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov ;
7416: LD_ADDR_VAR 0 4
7420: PUSH
7421: LD_VAR 0 4
7425: PUSH
7426: LD_EXP 50
7430: ADD
7431: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov2 ;
7432: LD_ADDR_VAR 0 4
7436: PUSH
7437: LD_VAR 0 4
7441: PUSH
7442: LD_EXP 51
7446: ADD
7447: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , maxUnitToChoose , maxUnitToChoose , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Kurin ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
7448: LD_ADDR_VAR 0 5
7452: PUSH
7453: LD_STRING text
7455: PPUSH
7456: LD_VAR 0 1
7460: PPUSH
7461: LD_VAR 0 1
7465: PPUSH
7466: LD_INT -5
7468: PUSH
7469: LD_EXP 46
7473: PUSH
7474: LD_EXP 47
7478: PUSH
7479: LD_EXP 49
7483: PUSH
7484: LD_EXP 48
7488: PUSH
7489: LD_INT -6
7491: PUSH
7492: LD_INT -2
7494: PUSH
7495: LD_INT -3
7497: PUSH
7498: LD_INT -5
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: PUSH
7512: LD_VAR 0 4
7516: ADD
7517: PUSH
7518: LD_INT -6
7520: PUSH
7521: LD_INT -4
7523: PUSH
7524: LD_EXP 58
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: LIST
7533: ADD
7534: PPUSH
7535: LD_INT 1
7537: PUSH
7538: LD_INT 3
7540: PUSH
7541: LD_INT 2
7543: PUSH
7544: LD_INT 1
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: PUSH
7551: LD_INT 4
7553: PUSH
7554: LD_INT 1
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: PPUSH
7567: CALL_OW 42
7571: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
7572: LD_VAR 0 4
7576: PPUSH
7577: LD_INT 6
7579: PPUSH
7580: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
7584: LD_VAR 0 5
7588: PPUSH
7589: LD_INT 3
7591: PPUSH
7592: CALL_OW 235
// SetSurvivorsArabianAttack ;
7596: CALL 5016 0 0
// MoveKurinUnitsToBuildings ;
7600: CALL 9038 0 0
// end ;
7604: LD_VAR 0 2
7608: RET
// export function FindNotFullBuildingInArea ( area , side , buildingType ) ; var building ; begin
7609: LD_INT 0
7611: PPUSH
7612: PPUSH
// for building in FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , buildingType ] ] ) do
7613: LD_ADDR_VAR 0 5
7617: PUSH
7618: LD_VAR 0 1
7622: PPUSH
7623: LD_INT 22
7625: PUSH
7626: LD_VAR 0 2
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PUSH
7635: LD_INT 21
7637: PUSH
7638: LD_INT 3
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: LD_INT 30
7647: PUSH
7648: LD_VAR 0 3
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: LIST
7661: PPUSH
7662: CALL_OW 70
7666: PUSH
7667: FOR_IN
7668: IFFALSE 7701
// begin if UnitsInside ( building ) < 6 then
7670: LD_VAR 0 5
7674: PPUSH
7675: CALL_OW 313
7679: PUSH
7680: LD_INT 6
7682: LESS
7683: IFFALSE 7699
// begin result = building ;
7685: LD_ADDR_VAR 0 4
7689: PUSH
7690: LD_VAR 0 5
7694: ST_TO_ADDR
// exit ;
7695: POP
7696: POP
7697: GO 7711
// end ; end ;
7699: GO 7667
7701: POP
7702: POP
// result = 0 ;
7703: LD_ADDR_VAR 0 4
7707: PUSH
7708: LD_INT 0
7710: ST_TO_ADDR
// end ;
7711: LD_VAR 0 4
7715: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
7716: LD_INT 0
7718: PPUSH
7719: PPUSH
7720: PPUSH
7721: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
7722: LD_ADDR_VAR 0 6
7726: PUSH
7727: LD_INT 34
7729: PUSH
7730: LD_INT 71
7732: PUSH
7733: LD_INT 70
7735: PUSH
7736: LD_INT 69
7738: PUSH
7739: LD_INT 39
7741: PUSH
7742: LD_INT 31
7744: PUSH
7745: LD_INT 14
7747: PUSH
7748: LD_INT 10
7750: PUSH
7751: LD_INT 40
7753: PUSH
7754: EMPTY
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: ST_TO_ADDR
// resultWeapons = [ ] ;
7765: LD_ADDR_VAR 0 5
7769: PUSH
7770: EMPTY
7771: ST_TO_ADDR
// for i := 1 to weaponTechs do
7772: LD_ADDR_VAR 0 4
7776: PUSH
7777: DOUBLE
7778: LD_INT 1
7780: DEC
7781: ST_TO_ADDR
7782: LD_VAR 0 6
7786: PUSH
7787: FOR_TO
7788: IFFALSE 7975
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
7790: LD_VAR 0 6
7794: PUSH
7795: LD_VAR 0 4
7799: ARRAY
7800: PPUSH
7801: LD_VAR 0 2
7805: PPUSH
7806: CALL_OW 482
7810: PUSH
7811: LD_VAR 0 6
7815: PUSH
7816: LD_VAR 0 4
7820: ARRAY
7821: PPUSH
7822: LD_VAR 0 1
7826: PPUSH
7827: CALL_OW 321
7831: PUSH
7832: LD_INT 2
7834: EQUAL
7835: AND
7836: IFFALSE 7973
// case nation of nation_american :
7838: LD_VAR 0 2
7842: PUSH
7843: LD_INT 1
7845: DOUBLE
7846: EQUAL
7847: IFTRUE 7851
7849: GO 7886
7851: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
7852: LD_ADDR_VAR 0 5
7856: PUSH
7857: LD_VAR 0 5
7861: PUSH
7862: LD_VAR 0 6
7866: PUSH
7867: LD_VAR 0 4
7871: ARRAY
7872: PPUSH
7873: LD_VAR 0 2
7877: PPUSH
7878: CALL 7992 0 2
7882: ADD
7883: ST_TO_ADDR
7884: GO 7973
7886: LD_INT 2
7888: DOUBLE
7889: EQUAL
7890: IFTRUE 7894
7892: GO 7929
7894: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
7895: LD_ADDR_VAR 0 5
7899: PUSH
7900: LD_VAR 0 5
7904: PUSH
7905: LD_VAR 0 6
7909: PUSH
7910: LD_VAR 0 4
7914: ARRAY
7915: PPUSH
7916: LD_VAR 0 2
7920: PPUSH
7921: CALL 7992 0 2
7925: ADD
7926: ST_TO_ADDR
7927: GO 7973
7929: LD_INT 3
7931: DOUBLE
7932: EQUAL
7933: IFTRUE 7937
7935: GO 7972
7937: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
7938: LD_ADDR_VAR 0 5
7942: PUSH
7943: LD_VAR 0 5
7947: PUSH
7948: LD_VAR 0 6
7952: PUSH
7953: LD_VAR 0 4
7957: ARRAY
7958: PPUSH
7959: LD_VAR 0 2
7963: PPUSH
7964: CALL 7992 0 2
7968: ADD
7969: ST_TO_ADDR
7970: GO 7973
7972: POP
// end ;
7973: GO 7787
7975: POP
7976: POP
// result = resultWeapons ;
7977: LD_ADDR_VAR 0 3
7981: PUSH
7982: LD_VAR 0 5
7986: ST_TO_ADDR
// end ;
7987: LD_VAR 0 3
7991: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
7992: LD_INT 0
7994: PPUSH
// case tech of tech_AdvMet :
7995: LD_VAR 0 1
7999: PUSH
8000: LD_INT 34
8002: DOUBLE
8003: EQUAL
8004: IFTRUE 8008
8006: GO 8036
8008: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
8009: LD_ADDR_VAR 0 3
8013: PUSH
8014: LD_INT 6
8016: PUSH
8017: LD_STRING 
8019: PUSH
8020: LD_INT 46
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: PUSH
8028: LD_VAR 0 2
8032: ARRAY
8033: ST_TO_ADDR
8034: GO 8325
8036: LD_INT 71
8038: DOUBLE
8039: EQUAL
8040: IFTRUE 8044
8042: GO 8072
8044: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
8045: LD_ADDR_VAR 0 3
8049: PUSH
8050: LD_STRING 
8052: PUSH
8053: LD_STRING 
8055: PUSH
8056: LD_INT 47
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: LIST
8063: PUSH
8064: LD_VAR 0 2
8068: ARRAY
8069: ST_TO_ADDR
8070: GO 8325
8072: LD_INT 70
8074: DOUBLE
8075: EQUAL
8076: IFTRUE 8080
8078: GO 8108
8080: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
8081: LD_ADDR_VAR 0 3
8085: PUSH
8086: LD_STRING 
8088: PUSH
8089: LD_INT 26
8091: PUSH
8092: LD_STRING 
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: LIST
8099: PUSH
8100: LD_VAR 0 2
8104: ARRAY
8105: ST_TO_ADDR
8106: GO 8325
8108: LD_INT 69
8110: DOUBLE
8111: EQUAL
8112: IFTRUE 8116
8114: GO 8144
8116: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
8117: LD_ADDR_VAR 0 3
8121: PUSH
8122: LD_INT 4
8124: PUSH
8125: LD_INT 25
8127: PUSH
8128: LD_INT 43
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: LIST
8135: PUSH
8136: LD_VAR 0 2
8140: ARRAY
8141: ST_TO_ADDR
8142: GO 8325
8144: LD_INT 39
8146: DOUBLE
8147: EQUAL
8148: IFTRUE 8152
8150: GO 8180
8152: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
8153: LD_ADDR_VAR 0 3
8157: PUSH
8158: LD_INT 5
8160: PUSH
8161: LD_INT 27
8163: PUSH
8164: LD_INT 44
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: PUSH
8172: LD_VAR 0 2
8176: ARRAY
8177: ST_TO_ADDR
8178: GO 8325
8180: LD_INT 31
8182: DOUBLE
8183: EQUAL
8184: IFTRUE 8188
8186: GO 8216
8188: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
8189: LD_ADDR_VAR 0 3
8193: PUSH
8194: LD_STRING 
8196: PUSH
8197: LD_STRING 
8199: PUSH
8200: LD_INT 49
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: LIST
8207: PUSH
8208: LD_VAR 0 2
8212: ARRAY
8213: ST_TO_ADDR
8214: GO 8325
8216: LD_INT 14
8218: DOUBLE
8219: EQUAL
8220: IFTRUE 8224
8222: GO 8252
8224: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
8225: LD_ADDR_VAR 0 3
8229: PUSH
8230: LD_INT 10
8232: PUSH
8233: LD_STRING 
8235: PUSH
8236: LD_STRING 
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: LIST
8243: PUSH
8244: LD_VAR 0 2
8248: ARRAY
8249: ST_TO_ADDR
8250: GO 8325
8252: LD_INT 10
8254: DOUBLE
8255: EQUAL
8256: IFTRUE 8260
8258: GO 8288
8260: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
8261: LD_ADDR_VAR 0 3
8265: PUSH
8266: LD_INT 9
8268: PUSH
8269: LD_STRING 
8271: PUSH
8272: LD_STRING 
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: LIST
8279: PUSH
8280: LD_VAR 0 2
8284: ARRAY
8285: ST_TO_ADDR
8286: GO 8325
8288: LD_INT 40
8290: DOUBLE
8291: EQUAL
8292: IFTRUE 8296
8294: GO 8324
8296: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
8297: LD_ADDR_VAR 0 3
8301: PUSH
8302: LD_INT 7
8304: PUSH
8305: LD_INT 28
8307: PUSH
8308: LD_INT 45
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: LIST
8315: PUSH
8316: LD_VAR 0 2
8320: ARRAY
8321: ST_TO_ADDR
8322: GO 8325
8324: POP
// end ;
8325: LD_VAR 0 3
8329: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
8330: LD_INT 0
8332: PPUSH
8333: PPUSH
// dir := GetDir ( bunker ) - 3 ;
8334: LD_ADDR_VAR 0 4
8338: PUSH
8339: LD_VAR 0 2
8343: PPUSH
8344: CALL_OW 254
8348: PUSH
8349: LD_INT 3
8351: MINUS
8352: ST_TO_ADDR
// if dir < 0 then
8353: LD_VAR 0 4
8357: PUSH
8358: LD_INT 0
8360: LESS
8361: IFFALSE 8377
// dir := 6 + dir ;
8363: LD_ADDR_VAR 0 4
8367: PUSH
8368: LD_INT 6
8370: PUSH
8371: LD_VAR 0 4
8375: PLUS
8376: ST_TO_ADDR
// SetDir ( un , dir ) ;
8377: LD_VAR 0 1
8381: PPUSH
8382: LD_VAR 0 4
8386: PPUSH
8387: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
8391: LD_VAR 0 1
8395: PPUSH
8396: LD_VAR 0 2
8400: PPUSH
8401: CALL_OW 52
// result = un ;
8405: LD_ADDR_VAR 0 3
8409: PUSH
8410: LD_VAR 0 1
8414: ST_TO_ADDR
// end ;
8415: LD_VAR 0 3
8419: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8420: LD_INT 0
8422: PPUSH
8423: PPUSH
8424: PPUSH
// uc_side := GetSide ( b ) ;
8425: LD_ADDR_OWVAR 20
8429: PUSH
8430: LD_VAR 0 2
8434: PPUSH
8435: CALL_OW 255
8439: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8440: LD_ADDR_OWVAR 21
8444: PUSH
8445: LD_VAR 0 2
8449: PPUSH
8450: CALL_OW 248
8454: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8455: LD_INT 0
8457: PPUSH
8458: LD_INT 1
8460: PPUSH
8461: LD_VAR 0 1
8465: PPUSH
8466: CALL_OW 380
// un = CreateHuman ;
8470: LD_ADDR_VAR 0 4
8474: PUSH
8475: CALL_OW 44
8479: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8480: LD_ADDR_VAR 0 5
8484: PUSH
8485: LD_VAR 0 2
8489: PPUSH
8490: CALL_OW 254
8494: PUSH
8495: LD_INT 3
8497: MINUS
8498: ST_TO_ADDR
// if dir < 0 then
8499: LD_VAR 0 5
8503: PUSH
8504: LD_INT 0
8506: LESS
8507: IFFALSE 8523
// dir := 6 + dir ;
8509: LD_ADDR_VAR 0 5
8513: PUSH
8514: LD_INT 6
8516: PUSH
8517: LD_VAR 0 5
8521: PLUS
8522: ST_TO_ADDR
// SetDir ( un , dir ) ;
8523: LD_VAR 0 4
8527: PPUSH
8528: LD_VAR 0 5
8532: PPUSH
8533: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8537: LD_VAR 0 4
8541: PPUSH
8542: LD_VAR 0 2
8546: PPUSH
8547: CALL_OW 52
// result = un ;
8551: LD_ADDR_VAR 0 3
8555: PUSH
8556: LD_VAR 0 4
8560: ST_TO_ADDR
// end ;
8561: LD_VAR 0 3
8565: RET
// export function AddComUpgradeBreastwork ( units , buildings , upgradeBType ) ; var building , x , y , dir ; begin
8566: LD_INT 0
8568: PPUSH
8569: PPUSH
8570: PPUSH
8571: PPUSH
8572: PPUSH
// for building in buildings do
8573: LD_ADDR_VAR 0 5
8577: PUSH
8578: LD_VAR 0 2
8582: PUSH
8583: FOR_IN
8584: IFFALSE 8676
// begin x = GetX ( building ) ;
8586: LD_ADDR_VAR 0 6
8590: PUSH
8591: LD_VAR 0 5
8595: PPUSH
8596: CALL_OW 250
8600: ST_TO_ADDR
// y = GetY ( building ) ;
8601: LD_ADDR_VAR 0 7
8605: PUSH
8606: LD_VAR 0 5
8610: PPUSH
8611: CALL_OW 251
8615: ST_TO_ADDR
// dir = GetDir ( building ) ;
8616: LD_ADDR_VAR 0 8
8620: PUSH
8621: LD_VAR 0 5
8625: PPUSH
8626: CALL_OW 254
8630: ST_TO_ADDR
// AddComDismantle ( units , building ) ;
8631: LD_VAR 0 1
8635: PPUSH
8636: LD_VAR 0 5
8640: PPUSH
8641: CALL_OW 227
// AddComBuild ( units , upgradeBType , x , y , dir ) ;
8645: LD_VAR 0 1
8649: PPUSH
8650: LD_VAR 0 3
8654: PPUSH
8655: LD_VAR 0 6
8659: PPUSH
8660: LD_VAR 0 7
8664: PPUSH
8665: LD_VAR 0 8
8669: PPUSH
8670: CALL_OW 205
// end ;
8674: GO 8583
8676: POP
8677: POP
// end ;
8678: LD_VAR 0 4
8682: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list , am_tech_list ; begin
8683: LD_INT 0
8685: PPUSH
8686: PPUSH
8687: PPUSH
8688: PPUSH
8689: PPUSH
8690: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8691: LD_ADDR_VAR 0 8
8695: PUSH
8696: LD_INT 48
8698: PUSH
8699: LD_INT 49
8701: PUSH
8702: LD_INT 50
8704: PUSH
8705: LD_INT 20
8707: PUSH
8708: LD_INT 1
8710: PUSH
8711: LD_INT 51
8713: PUSH
8714: LD_INT 52
8716: PUSH
8717: LD_INT 69
8719: PUSH
8720: LD_INT 39
8722: PUSH
8723: LD_INT 34
8725: PUSH
8726: LD_INT 40
8728: PUSH
8729: LD_INT 53
8731: PUSH
8732: LD_INT 71
8734: PUSH
8735: LD_INT 57
8737: PUSH
8738: LD_INT 58
8740: PUSH
8741: LD_INT 44
8743: PUSH
8744: LD_INT 32
8746: PUSH
8747: LD_INT 27
8749: PUSH
8750: LD_INT 23
8752: PUSH
8753: LD_INT 33
8755: PUSH
8756: LD_INT 59
8758: PUSH
8759: LD_INT 54
8761: PUSH
8762: LD_INT 55
8764: PUSH
8765: LD_INT 56
8767: PUSH
8768: LD_INT 63
8770: PUSH
8771: LD_INT 64
8773: PUSH
8774: LD_INT 65
8776: PUSH
8777: LD_INT 30
8779: PUSH
8780: LD_INT 31
8782: PUSH
8783: LD_INT 21
8785: PUSH
8786: LD_INT 22
8788: PUSH
8789: LD_INT 25
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: ST_TO_ADDR
// am_tech_list = GetTechNation ( 1 , 1 , state_enabled ) ;
8826: LD_ADDR_VAR 0 9
8830: PUSH
8831: LD_INT 1
8833: PPUSH
8834: LD_INT 1
8836: PPUSH
8837: LD_INT 1
8839: PPUSH
8840: CALL 28834 0 3
8844: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8845: LD_ADDR_VAR 0 5
8849: PUSH
8850: DOUBLE
8851: LD_INT 1
8853: DEC
8854: ST_TO_ADDR
8855: LD_VAR 0 8
8859: PUSH
8860: FOR_TO
8861: IFFALSE 8937
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8863: LD_VAR 0 8
8867: PUSH
8868: LD_VAR 0 5
8872: ARRAY
8873: PPUSH
8874: LD_VAR 0 1
8878: PPUSH
8879: CALL_OW 321
8883: PUSH
8884: LD_INT 1
8886: EQUAL
8887: PUSH
8888: LD_VAR 0 8
8892: PUSH
8893: LD_VAR 0 5
8897: ARRAY
8898: PPUSH
8899: LD_VAR 0 3
8903: PPUSH
8904: CALL_OW 482
8908: PUSH
8909: LD_INT 1
8911: EQUAL
8912: AND
8913: IFFALSE 8935
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8915: LD_VAR 0 2
8919: PPUSH
8920: LD_VAR 0 8
8924: PUSH
8925: LD_VAR 0 5
8929: ARRAY
8930: PPUSH
8931: CALL_OW 184
8935: GO 8860
8937: POP
8938: POP
// for i = 1 to am_tech_list do
8939: LD_ADDR_VAR 0 5
8943: PUSH
8944: DOUBLE
8945: LD_INT 1
8947: DEC
8948: ST_TO_ADDR
8949: LD_VAR 0 9
8953: PUSH
8954: FOR_TO
8955: IFFALSE 9031
// if GetTech ( am_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( am_tech_list [ i ] , nation ) = true then
8957: LD_VAR 0 9
8961: PUSH
8962: LD_VAR 0 5
8966: ARRAY
8967: PPUSH
8968: LD_VAR 0 1
8972: PPUSH
8973: CALL_OW 321
8977: PUSH
8978: LD_INT 1
8980: EQUAL
8981: PUSH
8982: LD_VAR 0 9
8986: PUSH
8987: LD_VAR 0 5
8991: ARRAY
8992: PPUSH
8993: LD_VAR 0 3
8997: PPUSH
8998: CALL_OW 482
9002: PUSH
9003: LD_INT 1
9005: EQUAL
9006: AND
9007: IFFALSE 9029
// AddComResearch ( lab , am_tech_list [ i ] ) ;
9009: LD_VAR 0 2
9013: PPUSH
9014: LD_VAR 0 9
9018: PUSH
9019: LD_VAR 0 5
9023: ARRAY
9024: PPUSH
9025: CALL_OW 184
9029: GO 8954
9031: POP
9032: POP
// end ;
9033: LD_VAR 0 4
9037: RET
// export function MoveKurinUnitsToBuildings ; var i , lab , fac , bunker , tmp , pom , canTakeUnits , diffUnits ; begin
9038: LD_INT 0
9040: PPUSH
9041: PPUSH
9042: PPUSH
9043: PPUSH
9044: PPUSH
9045: PPUSH
9046: PPUSH
9047: PPUSH
9048: PPUSH
// lab = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
9049: LD_ADDR_VAR 0 3
9053: PUSH
9054: LD_INT 22
9056: PUSH
9057: LD_INT 6
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PUSH
9064: LD_INT 21
9066: PUSH
9067: LD_INT 3
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: PUSH
9074: LD_INT 30
9076: PUSH
9077: LD_INT 6
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: LIST
9088: PPUSH
9089: CALL_OW 69
9093: PUSH
9094: LD_INT 1
9096: ARRAY
9097: ST_TO_ADDR
// fac = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9098: LD_ADDR_VAR 0 4
9102: PUSH
9103: LD_INT 22
9105: PUSH
9106: LD_INT 6
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PUSH
9113: LD_INT 21
9115: PUSH
9116: LD_INT 3
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: LD_INT 30
9125: PUSH
9126: LD_INT 3
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: LIST
9137: PPUSH
9138: CALL_OW 69
9142: PUSH
9143: LD_INT 1
9145: ARRAY
9146: ST_TO_ADDR
// diffUnits = diffUnits ^ Kurin ;
9147: LD_ADDR_VAR 0 9
9151: PUSH
9152: LD_VAR 0 9
9156: PUSH
9157: LD_EXP 58
9161: ADD
9162: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
9163: LD_ADDR_VAR 0 9
9167: PUSH
9168: LD_VAR 0 9
9172: PUSH
9173: LD_EXP 76
9177: ADD
9178: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
9179: LD_ADDR_VAR 0 9
9183: PUSH
9184: LD_VAR 0 9
9188: PUSH
9189: LD_EXP 68
9193: ADD
9194: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9195: LD_ADDR_VAR 0 8
9199: PUSH
9200: LD_INT 18
9202: PPUSH
9203: LD_INT 22
9205: PUSH
9206: LD_INT 6
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: PUSH
9213: LD_INT 21
9215: PUSH
9216: LD_INT 1
9218: PUSH
9219: EMPTY
9220: LIST
9221: LIST
9222: PUSH
9223: LD_INT 3
9225: PUSH
9226: LD_INT 60
9228: PUSH
9229: EMPTY
9230: LIST
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: LIST
9240: PPUSH
9241: CALL_OW 70
9245: PUSH
9246: LD_VAR 0 9
9250: DIFF
9251: ST_TO_ADDR
// if not canTakeUnits then
9252: LD_VAR 0 8
9256: NOT
9257: IFFALSE 9290
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 4 , neededUnitsSpawn [ 3 ] + 2 ) ;
9259: LD_ADDR_EXP 78
9263: PUSH
9264: LD_EXP 78
9268: PPUSH
9269: LD_INT 4
9271: PPUSH
9272: LD_EXP 78
9276: PUSH
9277: LD_INT 3
9279: ARRAY
9280: PUSH
9281: LD_INT 2
9283: PLUS
9284: PPUSH
9285: CALL_OW 1
9289: ST_TO_ADDR
// if canTakeUnits > 2 then
9290: LD_VAR 0 8
9294: PUSH
9295: LD_INT 2
9297: GREATER
9298: IFFALSE 9368
// begin for i := 1 to rand ( 1 , 2 ) do
9300: LD_ADDR_VAR 0 2
9304: PUSH
9305: DOUBLE
9306: LD_INT 1
9308: DEC
9309: ST_TO_ADDR
9310: LD_INT 1
9312: PPUSH
9313: LD_INT 2
9315: PPUSH
9316: CALL_OW 12
9320: PUSH
9321: FOR_TO
9322: IFFALSE 9364
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9324: LD_VAR 0 8
9328: PUSH
9329: LD_VAR 0 2
9333: ARRAY
9334: PPUSH
9335: LD_VAR 0 3
9339: PPUSH
9340: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9344: LD_VAR 0 8
9348: PUSH
9349: LD_VAR 0 2
9353: ARRAY
9354: PPUSH
9355: LD_INT 4
9357: PPUSH
9358: CALL_OW 183
// end ;
9362: GO 9321
9364: POP
9365: POP
// end else
9366: GO 9436
// begin for i := 1 to rand ( 1 , canTakeUnits ) do
9368: LD_ADDR_VAR 0 2
9372: PUSH
9373: DOUBLE
9374: LD_INT 1
9376: DEC
9377: ST_TO_ADDR
9378: LD_INT 1
9380: PPUSH
9381: LD_VAR 0 8
9385: PPUSH
9386: CALL_OW 12
9390: PUSH
9391: FOR_TO
9392: IFFALSE 9434
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9394: LD_VAR 0 8
9398: PUSH
9399: LD_VAR 0 2
9403: ARRAY
9404: PPUSH
9405: LD_VAR 0 3
9409: PPUSH
9410: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9414: LD_VAR 0 8
9418: PUSH
9419: LD_VAR 0 2
9423: ARRAY
9424: PPUSH
9425: LD_INT 4
9427: PPUSH
9428: CALL_OW 183
// end ;
9432: GO 9391
9434: POP
9435: POP
// end ; wait ( 0 0$01 ) ;
9436: LD_INT 35
9438: PPUSH
9439: CALL_OW 67
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9443: LD_ADDR_VAR 0 8
9447: PUSH
9448: LD_INT 18
9450: PPUSH
9451: LD_INT 22
9453: PUSH
9454: LD_INT 6
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: PUSH
9461: LD_INT 21
9463: PUSH
9464: LD_INT 1
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: PUSH
9471: LD_INT 3
9473: PUSH
9474: LD_INT 60
9476: PUSH
9477: EMPTY
9478: LIST
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: LIST
9488: PPUSH
9489: CALL_OW 70
9493: PUSH
9494: LD_VAR 0 9
9498: DIFF
9499: ST_TO_ADDR
// pom = 6 ;
9500: LD_ADDR_VAR 0 7
9504: PUSH
9505: LD_INT 6
9507: ST_TO_ADDR
// if canTakeUnits then
9508: LD_VAR 0 8
9512: IFFALSE 9629
// for i = 1 to canTakeUnits do
9514: LD_ADDR_VAR 0 2
9518: PUSH
9519: DOUBLE
9520: LD_INT 1
9522: DEC
9523: ST_TO_ADDR
9524: LD_VAR 0 8
9528: PUSH
9529: FOR_TO
9530: IFFALSE 9627
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
9532: LD_VAR 0 8
9536: PUSH
9537: LD_VAR 0 2
9541: ARRAY
9542: PPUSH
9543: CALL_OW 257
9547: PUSH
9548: LD_INT 3
9550: NONEQUAL
9551: IFFALSE 9591
// begin ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9553: LD_VAR 0 8
9557: PUSH
9558: LD_VAR 0 2
9562: ARRAY
9563: PPUSH
9564: LD_VAR 0 4
9568: PPUSH
9569: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_mechanic ) ;
9573: LD_VAR 0 8
9577: PUSH
9578: LD_VAR 0 2
9582: ARRAY
9583: PPUSH
9584: LD_INT 3
9586: PPUSH
9587: CALL_OW 183
// end ; ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9591: LD_VAR 0 8
9595: PUSH
9596: LD_VAR 0 2
9600: ARRAY
9601: PPUSH
9602: LD_VAR 0 4
9606: PPUSH
9607: CALL_OW 120
// pom = pom - 1 ;
9611: LD_ADDR_VAR 0 7
9615: PUSH
9616: LD_VAR 0 7
9620: PUSH
9621: LD_INT 1
9623: MINUS
9624: ST_TO_ADDR
// end ;
9625: GO 9529
9627: POP
9628: POP
// if pom > 0 then
9629: LD_VAR 0 7
9633: PUSH
9634: LD_INT 0
9636: GREATER
9637: IFFALSE 9662
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
9639: LD_ADDR_EXP 78
9643: PUSH
9644: LD_EXP 78
9648: PPUSH
9649: LD_INT 3
9651: PPUSH
9652: LD_VAR 0 7
9656: PPUSH
9657: CALL_OW 1
9661: ST_TO_ADDR
// wait ( 0 0$01 ) ;
9662: LD_INT 35
9664: PPUSH
9665: CALL_OW 67
// for bunker in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_occupied ] ] ] ) do
9669: LD_ADDR_VAR 0 5
9673: PUSH
9674: LD_INT 22
9676: PUSH
9677: LD_INT 6
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PUSH
9684: LD_INT 21
9686: PUSH
9687: LD_INT 3
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PUSH
9694: LD_INT 30
9696: PUSH
9697: LD_INT 32
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PUSH
9704: LD_INT 3
9706: PUSH
9707: LD_INT 59
9709: PUSH
9710: EMPTY
9711: LIST
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: PPUSH
9723: CALL_OW 69
9727: PUSH
9728: FOR_IN
9729: IFFALSE 9975
// begin canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9731: LD_ADDR_VAR 0 8
9735: PUSH
9736: LD_INT 18
9738: PPUSH
9739: LD_INT 22
9741: PUSH
9742: LD_INT 6
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: PUSH
9749: LD_INT 21
9751: PUSH
9752: LD_INT 1
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: LD_INT 3
9761: PUSH
9762: LD_INT 60
9764: PUSH
9765: EMPTY
9766: LIST
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: LIST
9776: PPUSH
9777: CALL_OW 70
9781: PUSH
9782: LD_VAR 0 9
9786: DIFF
9787: ST_TO_ADDR
// if canTakeUnits then
9788: LD_VAR 0 8
9792: IFFALSE 9926
// begin if GetClass ( canTakeUnits [ 1 ] ) <> 1 then
9794: LD_VAR 0 8
9798: PUSH
9799: LD_INT 1
9801: ARRAY
9802: PPUSH
9803: CALL_OW 257
9807: PUSH
9808: LD_INT 1
9810: NONEQUAL
9811: IFFALSE 9906
// begin ComEnterUnit ( canTakeUnits [ 1 ] , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
9813: LD_VAR 0 8
9817: PUSH
9818: LD_INT 1
9820: ARRAY
9821: PPUSH
9822: LD_INT 22
9824: PUSH
9825: LD_INT 6
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: PUSH
9832: LD_INT 21
9834: PUSH
9835: LD_INT 3
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: PUSH
9842: LD_INT 30
9844: PUSH
9845: LD_INT 5
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: LIST
9856: PPUSH
9857: CALL_OW 69
9861: PUSH
9862: LD_INT 1
9864: ARRAY
9865: PPUSH
9866: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ 1 ] , 1 ) ;
9870: LD_VAR 0 8
9874: PUSH
9875: LD_INT 1
9877: ARRAY
9878: PPUSH
9879: LD_INT 1
9881: PPUSH
9882: CALL_OW 183
// AddComExitBuilding ( canTakeUnits [ 1 ] ) ;
9886: LD_VAR 0 8
9890: PUSH
9891: LD_INT 1
9893: ARRAY
9894: PPUSH
9895: CALL_OW 182
// wait ( 0 0$1 ) ;
9899: LD_INT 35
9901: PPUSH
9902: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ 1 ] , bunker ) ;
9906: LD_VAR 0 8
9910: PUSH
9911: LD_INT 1
9913: ARRAY
9914: PPUSH
9915: LD_VAR 0 5
9919: PPUSH
9920: CALL_OW 120
// end else
9924: GO 9973
// begin kirovBunkersToOccupy = kirovBunkersToOccupy ^ bunker ;
9926: LD_ADDR_EXP 70
9930: PUSH
9931: LD_EXP 70
9935: PUSH
9936: LD_VAR 0 5
9940: ADD
9941: ST_TO_ADDR
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 1 , neededUnitsSpawn [ 1 ] + 1 ) ;
9942: LD_ADDR_EXP 78
9946: PUSH
9947: LD_EXP 78
9951: PPUSH
9952: LD_INT 1
9954: PPUSH
9955: LD_EXP 78
9959: PUSH
9960: LD_INT 1
9962: ARRAY
9963: PUSH
9964: LD_INT 1
9966: PLUS
9967: PPUSH
9968: CALL_OW 1
9972: ST_TO_ADDR
// end ; end ;
9973: GO 9728
9975: POP
9976: POP
// end ;
9977: LD_VAR 0 1
9981: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
9982: LD_INT 0
9984: PPUSH
9985: PPUSH
9986: PPUSH
9987: PPUSH
9988: PPUSH
9989: PPUSH
9990: PPUSH
9991: PPUSH
9992: PPUSH
9993: PPUSH
9994: PPUSH
9995: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
9996: LD_VAR 0 1
10000: PPUSH
10001: CALL_OW 302
10005: NOT
10006: PUSH
10007: LD_VAR 0 4
10011: PUSH
10012: LD_INT 1
10014: EQUAL
10015: OR
10016: PUSH
10017: LD_VAR 0 2
10021: PPUSH
10022: LD_VAR 0 3
10026: PPUSH
10027: CALL_OW 488
10031: NOT
10032: OR
10033: PUSH
10034: LD_VAR 0 1
10038: PPUSH
10039: LD_VAR 0 2
10043: PPUSH
10044: LD_VAR 0 3
10048: PPUSH
10049: CALL_OW 297
10053: PUSH
10054: LD_VAR 0 4
10058: GREATEREQUAL
10059: OR
10060: PUSH
10061: LD_VAR 0 5
10065: PUSH
10066: LD_INT 1
10068: PUSH
10069: LD_INT 0
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: IN
10076: NOT
10077: OR
10078: IFFALSE 10082
// exit ;
10080: GO 11639
// attempts = 0 ;
10082: LD_ADDR_VAR 0 17
10086: PUSH
10087: LD_INT 0
10089: ST_TO_ADDR
// repeat list_nearest = [ ] ;
10090: LD_ADDR_VAR 0 7
10094: PUSH
10095: EMPTY
10096: ST_TO_ADDR
// list_coords = [ ] ;
10097: LD_ADDR_VAR 0 8
10101: PUSH
10102: EMPTY
10103: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
10104: LD_ADDR_VAR 0 9
10108: PUSH
10109: LD_VAR 0 2
10113: PPUSH
10114: LD_VAR 0 3
10118: PPUSH
10119: LD_VAR 0 1
10123: PPUSH
10124: CALL_OW 250
10128: PPUSH
10129: LD_VAR 0 1
10133: PPUSH
10134: CALL_OW 251
10138: PPUSH
10139: CALL 11644 0 4
10143: ST_TO_ADDR
// if attempts = 0 then
10144: LD_VAR 0 17
10148: PUSH
10149: LD_INT 0
10151: EQUAL
10152: IFFALSE 10260
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
10154: LD_ADDR_VAR 0 10
10158: PUSH
10159: LD_VAR 0 9
10163: PUSH
10164: LD_VAR 0 9
10168: PUSH
10169: LD_INT 1
10171: PLUS
10172: PUSH
10173: LD_VAR 0 9
10177: PUSH
10178: LD_INT 1
10180: MINUS
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: LIST
10186: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
10187: LD_VAR 0 10
10191: PUSH
10192: LD_INT 2
10194: ARRAY
10195: PUSH
10196: LD_INT 6
10198: EQUAL
10199: IFFALSE 10222
// dir_list = Replace ( dir_list , 2 , 0 ) ;
10201: LD_ADDR_VAR 0 10
10205: PUSH
10206: LD_VAR 0 10
10210: PPUSH
10211: LD_INT 2
10213: PPUSH
10214: LD_INT 0
10216: PPUSH
10217: CALL_OW 1
10221: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
10222: LD_VAR 0 10
10226: PUSH
10227: LD_INT 3
10229: ARRAY
10230: PUSH
10231: LD_INT 1
10233: NEG
10234: EQUAL
10235: IFFALSE 10258
// dir_list = Replace ( dir_list , 3 , 5 ) ;
10237: LD_ADDR_VAR 0 10
10241: PUSH
10242: LD_VAR 0 10
10246: PPUSH
10247: LD_INT 3
10249: PPUSH
10250: LD_INT 5
10252: PPUSH
10253: CALL_OW 1
10257: ST_TO_ADDR
// end else
10258: GO 10297
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
10260: LD_ADDR_VAR 0 10
10264: PUSH
10265: LD_INT 0
10267: PUSH
10268: LD_INT 1
10270: PUSH
10271: LD_INT 2
10273: PUSH
10274: LD_INT 3
10276: PUSH
10277: LD_INT 4
10279: PUSH
10280: LD_INT 5
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: PUSH
10291: LD_VAR 0 9
10295: DIFF
10296: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
10297: LD_ADDR_VAR 0 14
10301: PUSH
10302: DOUBLE
10303: LD_INT 1
10305: DEC
10306: ST_TO_ADDR
10307: LD_VAR 0 10
10311: PUSH
10312: LD_INT 0
10314: PLUS
10315: PUSH
10316: FOR_TO
10317: IFFALSE 10639
// case dir_list [ c ] of 0 :
10319: LD_VAR 0 10
10323: PUSH
10324: LD_VAR 0 14
10328: ARRAY
10329: PUSH
10330: LD_INT 0
10332: DOUBLE
10333: EQUAL
10334: IFTRUE 10338
10336: GO 10379
10338: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
10339: LD_ADDR_VAR 0 8
10343: PUSH
10344: LD_VAR 0 8
10348: PPUSH
10349: LD_INT 1
10351: PPUSH
10352: LD_VAR 0 2
10356: PUSH
10357: LD_VAR 0 3
10361: PUSH
10362: LD_VAR 0 4
10366: MINUS
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PPUSH
10372: CALL_OW 2
10376: ST_TO_ADDR
10377: GO 10637
10379: LD_INT 1
10381: DOUBLE
10382: EQUAL
10383: IFTRUE 10387
10385: GO 10428
10387: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
10388: LD_ADDR_VAR 0 8
10392: PUSH
10393: LD_VAR 0 8
10397: PPUSH
10398: LD_INT 1
10400: PPUSH
10401: LD_VAR 0 2
10405: PUSH
10406: LD_VAR 0 4
10410: PLUS
10411: PUSH
10412: LD_VAR 0 3
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PPUSH
10421: CALL_OW 2
10425: ST_TO_ADDR
10426: GO 10637
10428: LD_INT 2
10430: DOUBLE
10431: EQUAL
10432: IFTRUE 10436
10434: GO 10483
10436: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
10437: LD_ADDR_VAR 0 8
10441: PUSH
10442: LD_VAR 0 8
10446: PPUSH
10447: LD_INT 1
10449: PPUSH
10450: LD_VAR 0 2
10454: PUSH
10455: LD_VAR 0 4
10459: PLUS
10460: PUSH
10461: LD_VAR 0 3
10465: PUSH
10466: LD_VAR 0 4
10470: PLUS
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PPUSH
10476: CALL_OW 2
10480: ST_TO_ADDR
10481: GO 10637
10483: LD_INT 3
10485: DOUBLE
10486: EQUAL
10487: IFTRUE 10491
10489: GO 10532
10491: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
10492: LD_ADDR_VAR 0 8
10496: PUSH
10497: LD_VAR 0 8
10501: PPUSH
10502: LD_INT 1
10504: PPUSH
10505: LD_VAR 0 2
10509: PUSH
10510: LD_VAR 0 3
10514: PUSH
10515: LD_VAR 0 4
10519: PLUS
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PPUSH
10525: CALL_OW 2
10529: ST_TO_ADDR
10530: GO 10637
10532: LD_INT 4
10534: DOUBLE
10535: EQUAL
10536: IFTRUE 10540
10538: GO 10581
10540: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
10541: LD_ADDR_VAR 0 8
10545: PUSH
10546: LD_VAR 0 8
10550: PPUSH
10551: LD_INT 1
10553: PPUSH
10554: LD_VAR 0 2
10558: PUSH
10559: LD_VAR 0 4
10563: MINUS
10564: PUSH
10565: LD_VAR 0 3
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PPUSH
10574: CALL_OW 2
10578: ST_TO_ADDR
10579: GO 10637
10581: LD_INT 5
10583: DOUBLE
10584: EQUAL
10585: IFTRUE 10589
10587: GO 10636
10589: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
10590: LD_ADDR_VAR 0 8
10594: PUSH
10595: LD_VAR 0 8
10599: PPUSH
10600: LD_INT 1
10602: PPUSH
10603: LD_VAR 0 2
10607: PUSH
10608: LD_VAR 0 4
10612: MINUS
10613: PUSH
10614: LD_VAR 0 3
10618: PUSH
10619: LD_VAR 0 4
10623: MINUS
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PPUSH
10629: CALL_OW 2
10633: ST_TO_ADDR
10634: GO 10637
10636: POP
10637: GO 10316
10639: POP
10640: POP
// if dist < 30 then
10641: LD_VAR 0 4
10645: PUSH
10646: LD_INT 30
10648: LESS
10649: IFFALSE 10661
// c = 1 else
10651: LD_ADDR_VAR 0 14
10655: PUSH
10656: LD_INT 1
10658: ST_TO_ADDR
10659: GO 10669
// c = 2 ;
10661: LD_ADDR_VAR 0 14
10665: PUSH
10666: LD_INT 2
10668: ST_TO_ADDR
// b = 1 ;
10669: LD_ADDR_VAR 0 11
10673: PUSH
10674: LD_INT 1
10676: ST_TO_ADDR
// while b <= ( dist - 1 ) do
10677: LD_VAR 0 11
10681: PUSH
10682: LD_VAR 0 4
10686: PUSH
10687: LD_INT 1
10689: MINUS
10690: LESSEQUAL
10691: IFFALSE 11119
// begin if 0 in dir_list and 1 in dir_list then
10693: LD_INT 0
10695: PUSH
10696: LD_VAR 0 10
10700: IN
10701: PUSH
10702: LD_INT 1
10704: PUSH
10705: LD_VAR 0 10
10709: IN
10710: AND
10711: IFFALSE 10763
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
10713: LD_ADDR_VAR 0 8
10717: PUSH
10718: LD_VAR 0 8
10722: PPUSH
10723: LD_INT 1
10725: PPUSH
10726: LD_VAR 0 2
10730: PUSH
10731: LD_VAR 0 11
10735: PLUS
10736: PUSH
10737: LD_VAR 0 3
10741: PUSH
10742: LD_VAR 0 4
10746: MINUS
10747: PUSH
10748: LD_VAR 0 11
10752: PLUS
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: PPUSH
10758: CALL_OW 2
10762: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
10763: LD_INT 1
10765: PUSH
10766: LD_VAR 0 10
10770: IN
10771: PUSH
10772: LD_INT 2
10774: PUSH
10775: LD_VAR 0 10
10779: IN
10780: AND
10781: IFFALSE 10827
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
10783: LD_ADDR_VAR 0 8
10787: PUSH
10788: LD_VAR 0 8
10792: PPUSH
10793: LD_INT 1
10795: PPUSH
10796: LD_VAR 0 2
10800: PUSH
10801: LD_VAR 0 4
10805: PLUS
10806: PUSH
10807: LD_VAR 0 3
10811: PUSH
10812: LD_VAR 0 11
10816: PLUS
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PPUSH
10822: CALL_OW 2
10826: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
10827: LD_INT 2
10829: PUSH
10830: LD_VAR 0 10
10834: IN
10835: PUSH
10836: LD_INT 3
10838: PUSH
10839: LD_VAR 0 10
10843: IN
10844: AND
10845: IFFALSE 10897
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
10847: LD_ADDR_VAR 0 8
10851: PUSH
10852: LD_VAR 0 8
10856: PPUSH
10857: LD_INT 1
10859: PPUSH
10860: LD_VAR 0 2
10864: PUSH
10865: LD_VAR 0 4
10869: PLUS
10870: PUSH
10871: LD_VAR 0 11
10875: MINUS
10876: PUSH
10877: LD_VAR 0 3
10881: PUSH
10882: LD_VAR 0 4
10886: PLUS
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: PPUSH
10892: CALL_OW 2
10896: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
10897: LD_INT 3
10899: PUSH
10900: LD_VAR 0 10
10904: IN
10905: PUSH
10906: LD_INT 4
10908: PUSH
10909: LD_VAR 0 10
10913: IN
10914: AND
10915: IFFALSE 10967
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
10917: LD_ADDR_VAR 0 8
10921: PUSH
10922: LD_VAR 0 8
10926: PPUSH
10927: LD_INT 1
10929: PPUSH
10930: LD_VAR 0 2
10934: PUSH
10935: LD_VAR 0 11
10939: MINUS
10940: PUSH
10941: LD_VAR 0 3
10945: PUSH
10946: LD_VAR 0 4
10950: PLUS
10951: PUSH
10952: LD_VAR 0 11
10956: MINUS
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PPUSH
10962: CALL_OW 2
10966: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
10967: LD_INT 4
10969: PUSH
10970: LD_VAR 0 10
10974: IN
10975: PUSH
10976: LD_INT 5
10978: PUSH
10979: LD_VAR 0 10
10983: IN
10984: AND
10985: IFFALSE 11031
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
10987: LD_ADDR_VAR 0 8
10991: PUSH
10992: LD_VAR 0 8
10996: PPUSH
10997: LD_INT 1
10999: PPUSH
11000: LD_VAR 0 2
11004: PUSH
11005: LD_VAR 0 4
11009: MINUS
11010: PUSH
11011: LD_VAR 0 3
11015: PUSH
11016: LD_VAR 0 11
11020: MINUS
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: PPUSH
11026: CALL_OW 2
11030: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
11031: LD_INT 5
11033: PUSH
11034: LD_VAR 0 10
11038: IN
11039: PUSH
11040: LD_INT 0
11042: PUSH
11043: LD_VAR 0 10
11047: IN
11048: AND
11049: IFFALSE 11101
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
11051: LD_ADDR_VAR 0 8
11055: PUSH
11056: LD_VAR 0 8
11060: PPUSH
11061: LD_INT 1
11063: PPUSH
11064: LD_VAR 0 2
11068: PUSH
11069: LD_VAR 0 4
11073: MINUS
11074: PUSH
11075: LD_VAR 0 11
11079: PLUS
11080: PUSH
11081: LD_VAR 0 3
11085: PUSH
11086: LD_VAR 0 4
11090: MINUS
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PPUSH
11096: CALL_OW 2
11100: ST_TO_ADDR
// b = b + c end ;
11101: LD_ADDR_VAR 0 11
11105: PUSH
11106: LD_VAR 0 11
11110: PUSH
11111: LD_VAR 0 14
11115: PLUS
11116: ST_TO_ADDR
11117: GO 10677
// if list_coords = 0 then
11119: LD_VAR 0 8
11123: PUSH
11124: LD_INT 0
11126: EQUAL
11127: IFFALSE 11131
// exit ;
11129: GO 11639
// repeat min_dist = 5000 ;
11131: LD_ADDR_VAR 0 12
11135: PUSH
11136: LD_INT 5000
11138: ST_TO_ADDR
// for b in list_coords do
11139: LD_ADDR_VAR 0 11
11143: PUSH
11144: LD_VAR 0 8
11148: PUSH
11149: FOR_IN
11150: IFFALSE 11209
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
11152: LD_ADDR_VAR 0 13
11156: PUSH
11157: LD_VAR 0 1
11161: PPUSH
11162: LD_VAR 0 11
11166: PUSH
11167: LD_INT 1
11169: ARRAY
11170: PPUSH
11171: LD_VAR 0 11
11175: PUSH
11176: LD_INT 2
11178: ARRAY
11179: PPUSH
11180: CALL_OW 297
11184: ST_TO_ADDR
// if temp_dist < min_dist then
11185: LD_VAR 0 13
11189: PUSH
11190: LD_VAR 0 12
11194: LESS
11195: IFFALSE 11207
// min_dist = temp_dist ;
11197: LD_ADDR_VAR 0 12
11201: PUSH
11202: LD_VAR 0 13
11206: ST_TO_ADDR
// end ;
11207: GO 11149
11209: POP
11210: POP
// c = 0 ;
11211: LD_ADDR_VAR 0 14
11215: PUSH
11216: LD_INT 0
11218: ST_TO_ADDR
// repeat c = c + 1 ;
11219: LD_ADDR_VAR 0 14
11223: PUSH
11224: LD_VAR 0 14
11228: PUSH
11229: LD_INT 1
11231: PLUS
11232: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
11233: LD_VAR 0 1
11237: PPUSH
11238: LD_VAR 0 8
11242: PUSH
11243: LD_VAR 0 14
11247: ARRAY
11248: PUSH
11249: LD_INT 1
11251: ARRAY
11252: PPUSH
11253: LD_VAR 0 8
11257: PUSH
11258: LD_VAR 0 14
11262: ARRAY
11263: PUSH
11264: LD_INT 2
11266: ARRAY
11267: PPUSH
11268: CALL_OW 297
11272: PUSH
11273: LD_VAR 0 12
11277: EQUAL
11278: IFFALSE 11343
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
11280: LD_ADDR_VAR 0 7
11284: PUSH
11285: LD_VAR 0 7
11289: PPUSH
11290: LD_INT 1
11292: PPUSH
11293: LD_VAR 0 8
11297: PUSH
11298: LD_VAR 0 14
11302: ARRAY
11303: PPUSH
11304: CALL_OW 2
11308: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
11309: LD_ADDR_VAR 0 8
11313: PUSH
11314: LD_VAR 0 8
11318: PPUSH
11319: LD_VAR 0 14
11323: PPUSH
11324: CALL_OW 3
11328: ST_TO_ADDR
// c = c - 1 ;
11329: LD_ADDR_VAR 0 14
11333: PUSH
11334: LD_VAR 0 14
11338: PUSH
11339: LD_INT 1
11341: MINUS
11342: ST_TO_ADDR
// end ; until c = list_coords ;
11343: LD_VAR 0 14
11347: PUSH
11348: LD_VAR 0 8
11352: EQUAL
11353: IFFALSE 11219
// c = 0 ;
11355: LD_ADDR_VAR 0 14
11359: PUSH
11360: LD_INT 0
11362: ST_TO_ADDR
// if list_nearest > 0 then
11363: LD_VAR 0 7
11367: PUSH
11368: LD_INT 0
11370: GREATER
11371: IFFALSE 11513
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
11373: LD_ADDR_VAR 0 15
11377: PUSH
11378: LD_INT 1
11380: PPUSH
11381: LD_VAR 0 7
11385: PPUSH
11386: CALL_OW 12
11390: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
11391: LD_ADDR_VAR 0 16
11395: PUSH
11396: LD_VAR 0 7
11400: PUSH
11401: LD_VAR 0 15
11405: ARRAY
11406: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
11407: LD_VAR 0 16
11411: PUSH
11412: LD_INT 1
11414: ARRAY
11415: PPUSH
11416: LD_VAR 0 16
11420: PUSH
11421: LD_INT 2
11423: ARRAY
11424: PPUSH
11425: CALL_OW 488
11429: PUSH
11430: LD_INT 0
11432: GREATER
11433: PUSH
11434: LD_VAR 0 16
11438: PUSH
11439: LD_INT 1
11441: ARRAY
11442: PPUSH
11443: LD_VAR 0 16
11447: PUSH
11448: LD_INT 2
11450: ARRAY
11451: PPUSH
11452: CALL_OW 428
11456: PUSH
11457: LD_INT 0
11459: EQUAL
11460: AND
11461: IFFALSE 11473
// c = 1 else
11463: LD_ADDR_VAR 0 14
11467: PUSH
11468: LD_INT 1
11470: ST_TO_ADDR
11471: GO 11493
// list_nearest = Delete ( list_nearest , rand_num ) ;
11473: LD_ADDR_VAR 0 7
11477: PUSH
11478: LD_VAR 0 7
11482: PPUSH
11483: LD_VAR 0 15
11487: PPUSH
11488: CALL_OW 3
11492: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
11493: LD_VAR 0 14
11497: PUSH
11498: LD_INT 1
11500: EQUAL
11501: PUSH
11502: LD_VAR 0 7
11506: PUSH
11507: LD_INT 0
11509: EQUAL
11510: OR
11511: IFFALSE 11373
// end ; until c = 1 or list_coords = 0 ;
11513: LD_VAR 0 14
11517: PUSH
11518: LD_INT 1
11520: EQUAL
11521: PUSH
11522: LD_VAR 0 8
11526: PUSH
11527: LD_INT 0
11529: EQUAL
11530: OR
11531: IFFALSE 11131
// attempts = attempts + 1 ;
11533: LD_ADDR_VAR 0 17
11537: PUSH
11538: LD_VAR 0 17
11542: PUSH
11543: LD_INT 1
11545: PLUS
11546: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
11547: LD_VAR 0 14
11551: PUSH
11552: LD_INT 1
11554: EQUAL
11555: PUSH
11556: LD_VAR 0 17
11560: PUSH
11561: LD_INT 1
11563: GREATER
11564: OR
11565: IFFALSE 10090
// if c = 1 then
11567: LD_VAR 0 14
11571: PUSH
11572: LD_INT 1
11574: EQUAL
11575: IFFALSE 11639
// if add then
11577: LD_VAR 0 5
11581: IFFALSE 11612
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
11583: LD_VAR 0 1
11587: PPUSH
11588: LD_VAR 0 16
11592: PUSH
11593: LD_INT 1
11595: ARRAY
11596: PPUSH
11597: LD_VAR 0 16
11601: PUSH
11602: LD_INT 2
11604: ARRAY
11605: PPUSH
11606: CALL_OW 171
11610: GO 11639
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
11612: LD_VAR 0 1
11616: PPUSH
11617: LD_VAR 0 16
11621: PUSH
11622: LD_INT 1
11624: ARRAY
11625: PPUSH
11626: LD_VAR 0 16
11630: PUSH
11631: LD_INT 2
11633: ARRAY
11634: PPUSH
11635: CALL_OW 111
// end ;
11639: LD_VAR 0 6
11643: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
11644: LD_INT 0
11646: PPUSH
11647: PPUSH
11648: PPUSH
11649: PPUSH
11650: PPUSH
11651: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
11652: LD_VAR 0 1
11656: PPUSH
11657: LD_VAR 0 2
11661: PPUSH
11662: CALL_OW 488
11666: NOT
11667: PUSH
11668: LD_VAR 0 3
11672: PPUSH
11673: LD_VAR 0 4
11677: PPUSH
11678: CALL_OW 488
11682: NOT
11683: OR
11684: IFFALSE 11697
// begin result = - 1 ;
11686: LD_ADDR_VAR 0 5
11690: PUSH
11691: LD_INT 1
11693: NEG
11694: ST_TO_ADDR
// exit ;
11695: GO 11857
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
11697: LD_ADDR_VAR 0 6
11701: PUSH
11702: LD_VAR 0 1
11706: PPUSH
11707: LD_VAR 0 2
11711: PPUSH
11712: LD_VAR 0 3
11716: PPUSH
11717: LD_VAR 0 4
11721: PPUSH
11722: CALL_OW 298
11726: ST_TO_ADDR
// dist_2 = 99999 ;
11727: LD_ADDR_VAR 0 7
11731: PUSH
11732: LD_INT 99999
11734: ST_TO_ADDR
// for b = 0 to 5 do
11735: LD_ADDR_VAR 0 8
11739: PUSH
11740: DOUBLE
11741: LD_INT 0
11743: DEC
11744: ST_TO_ADDR
11745: LD_INT 5
11747: PUSH
11748: FOR_TO
11749: IFFALSE 11845
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
11751: LD_ADDR_VAR 0 9
11755: PUSH
11756: LD_VAR 0 1
11760: PPUSH
11761: LD_VAR 0 8
11765: PPUSH
11766: LD_VAR 0 6
11770: PPUSH
11771: CALL_OW 272
11775: PPUSH
11776: LD_VAR 0 2
11780: PPUSH
11781: LD_VAR 0 8
11785: PPUSH
11786: LD_VAR 0 6
11790: PPUSH
11791: CALL_OW 273
11795: PPUSH
11796: LD_VAR 0 3
11800: PPUSH
11801: LD_VAR 0 4
11805: PPUSH
11806: CALL_OW 298
11810: ST_TO_ADDR
// if temp_dist < dist_2 then
11811: LD_VAR 0 9
11815: PUSH
11816: LD_VAR 0 7
11820: LESS
11821: IFFALSE 11843
// begin dist_2 = temp_dist ;
11823: LD_ADDR_VAR 0 7
11827: PUSH
11828: LD_VAR 0 9
11832: ST_TO_ADDR
// dir = b ;
11833: LD_ADDR_VAR 0 10
11837: PUSH
11838: LD_VAR 0 8
11842: ST_TO_ADDR
// end ; end ;
11843: GO 11748
11845: POP
11846: POP
// result = dir ;
11847: LD_ADDR_VAR 0 5
11851: PUSH
11852: LD_VAR 0 10
11856: ST_TO_ADDR
// end ; end_of_file
11857: LD_VAR 0 5
11861: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
11862: LD_INT 0
11864: PPUSH
11865: PPUSH
11866: PPUSH
11867: PPUSH
11868: PPUSH
11869: PPUSH
11870: PPUSH
11871: PPUSH
11872: PPUSH
11873: PPUSH
11874: PPUSH
11875: PPUSH
11876: PPUSH
11877: PPUSH
11878: PPUSH
11879: PPUSH
11880: PPUSH
11881: PPUSH
11882: PPUSH
11883: PPUSH
11884: PPUSH
11885: PPUSH
11886: PPUSH
11887: PPUSH
11888: PPUSH
11889: PPUSH
11890: PPUSH
11891: PPUSH
// personel = [ ] ;
11892: LD_ADDR_VAR 0 18
11896: PUSH
11897: EMPTY
11898: ST_TO_ADDR
// vehicles = [ ] ;
11899: LD_ADDR_VAR 0 24
11903: PUSH
11904: EMPTY
11905: ST_TO_ADDR
// for unit in basePersonel do
11906: LD_ADDR_VAR 0 17
11910: PUSH
11911: LD_VAR 0 3
11915: PUSH
11916: FOR_IN
11917: IFFALSE 11965
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
11919: LD_ADDR_VAR 0 18
11923: PUSH
11924: LD_VAR 0 18
11928: PUSH
11929: LD_VAR 0 17
11933: PUSH
11934: LD_VAR 0 17
11938: PPUSH
11939: CALL_OW 310
11943: PUSH
11944: LD_VAR 0 17
11948: PPUSH
11949: CALL_OW 302
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: LIST
11958: PUSH
11959: EMPTY
11960: LIST
11961: ADD
11962: ST_TO_ADDR
11963: GO 11916
11965: POP
11966: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) do
11967: LD_ADDR_VAR 0 23
11971: PUSH
11972: LD_VAR 0 4
11976: PPUSH
11977: LD_INT 22
11979: PUSH
11980: LD_VAR 0 1
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 21
11991: PUSH
11992: LD_INT 2
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 50
12001: PUSH
12002: EMPTY
12003: LIST
12004: PUSH
12005: LD_INT 3
12007: PUSH
12008: LD_INT 2
12010: PUSH
12011: LD_INT 34
12013: PUSH
12014: LD_INT 12
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: LD_INT 34
12023: PUSH
12024: LD_INT 51
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 34
12033: PUSH
12034: LD_INT 32
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: PPUSH
12057: CALL_OW 70
12061: PUSH
12062: FOR_IN
12063: IFFALSE 12111
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
12065: LD_ADDR_VAR 0 24
12069: PUSH
12070: LD_VAR 0 24
12074: PUSH
12075: LD_VAR 0 23
12079: PUSH
12080: LD_VAR 0 23
12084: PPUSH
12085: CALL_OW 310
12089: PUSH
12090: LD_VAR 0 23
12094: PPUSH
12095: CALL_OW 302
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: LIST
12104: PUSH
12105: EMPTY
12106: LIST
12107: ADD
12108: ST_TO_ADDR
12109: GO 12062
12111: POP
12112: POP
// repeat soldiers = [ ] ;
12113: LD_ADDR_VAR 0 19
12117: PUSH
12118: EMPTY
12119: ST_TO_ADDR
// engineers = [ ] ;
12120: LD_ADDR_VAR 0 20
12124: PUSH
12125: EMPTY
12126: ST_TO_ADDR
// mechanics = [ ] ;
12127: LD_ADDR_VAR 0 21
12131: PUSH
12132: EMPTY
12133: ST_TO_ADDR
// scientists = [ ] ;
12134: LD_ADDR_VAR 0 22
12138: PUSH
12139: EMPTY
12140: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12141: LD_ADDR_VAR 0 29
12145: PUSH
12146: LD_VAR 0 4
12150: PPUSH
12151: LD_INT 22
12153: PUSH
12154: LD_VAR 0 1
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PUSH
12163: LD_INT 21
12165: PUSH
12166: LD_INT 3
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PUSH
12173: LD_INT 50
12175: PUSH
12176: EMPTY
12177: LIST
12178: PUSH
12179: LD_INT 2
12181: PUSH
12182: LD_INT 30
12184: PUSH
12185: LD_INT 0
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: LD_INT 30
12194: PUSH
12195: LD_INT 1
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: LIST
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: PPUSH
12213: CALL_OW 70
12217: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
12218: LD_ADDR_VAR 0 30
12222: PUSH
12223: LD_VAR 0 4
12227: PPUSH
12228: LD_INT 22
12230: PUSH
12231: LD_VAR 0 1
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PUSH
12240: LD_INT 21
12242: PUSH
12243: LD_INT 3
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PUSH
12250: LD_INT 50
12252: PUSH
12253: EMPTY
12254: LIST
12255: PUSH
12256: LD_INT 2
12258: PUSH
12259: LD_INT 30
12261: PUSH
12262: LD_INT 2
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: LD_INT 30
12271: PUSH
12272: LD_INT 3
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: LIST
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: PPUSH
12290: CALL_OW 70
12294: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
12295: LD_ADDR_VAR 0 31
12299: PUSH
12300: LD_VAR 0 4
12304: PPUSH
12305: LD_INT 22
12307: PUSH
12308: LD_VAR 0 1
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: PUSH
12317: LD_INT 21
12319: PUSH
12320: LD_INT 3
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: PUSH
12327: LD_INT 50
12329: PUSH
12330: EMPTY
12331: LIST
12332: PUSH
12333: LD_INT 2
12335: PUSH
12336: LD_INT 30
12338: PUSH
12339: LD_INT 6
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: LD_INT 30
12348: PUSH
12349: LD_INT 7
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PUSH
12356: LD_INT 30
12358: PUSH
12359: LD_INT 8
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: PPUSH
12378: CALL_OW 70
12382: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
12383: LD_ADDR_VAR 0 32
12387: PUSH
12388: LD_VAR 0 4
12392: PPUSH
12393: LD_INT 22
12395: PUSH
12396: LD_VAR 0 1
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: LD_INT 21
12407: PUSH
12408: LD_INT 3
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: LD_INT 50
12417: PUSH
12418: EMPTY
12419: LIST
12420: PUSH
12421: LD_INT 2
12423: PUSH
12424: LD_INT 30
12426: PUSH
12427: LD_INT 31
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PUSH
12434: LD_INT 30
12436: PUSH
12437: LD_INT 32
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: LIST
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: PPUSH
12455: CALL_OW 70
12459: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
12460: LD_ADDR_VAR 0 33
12464: PUSH
12465: LD_VAR 0 4
12469: PPUSH
12470: LD_INT 22
12472: PUSH
12473: LD_VAR 0 1
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 21
12484: PUSH
12485: LD_INT 3
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: LD_INT 50
12494: PUSH
12495: EMPTY
12496: LIST
12497: PUSH
12498: LD_INT 2
12500: PUSH
12501: LD_INT 30
12503: PUSH
12504: LD_INT 4
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: LD_INT 30
12513: PUSH
12514: LD_INT 5
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: LIST
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: PPUSH
12532: CALL_OW 70
12536: ST_TO_ADDR
// for i := 1 to personel do
12537: LD_ADDR_VAR 0 13
12541: PUSH
12542: DOUBLE
12543: LD_INT 1
12545: DEC
12546: ST_TO_ADDR
12547: LD_VAR 0 18
12551: PUSH
12552: FOR_TO
12553: IFFALSE 12763
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
12555: LD_VAR 0 18
12559: PUSH
12560: LD_VAR 0 13
12564: ARRAY
12565: PUSH
12566: LD_INT 1
12568: ARRAY
12569: PPUSH
12570: CALL_OW 256
12574: PUSH
12575: LD_INT 1000
12577: EQUAL
12578: IFFALSE 12620
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
12580: LD_ADDR_VAR 0 18
12584: PUSH
12585: LD_VAR 0 18
12589: PPUSH
12590: LD_VAR 0 13
12594: PUSH
12595: LD_VAR 0 18
12599: PUSH
12600: LD_VAR 0 13
12604: ARRAY
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PPUSH
12610: LD_INT 1
12612: PPUSH
12613: CALL 33717 0 3
12617: ST_TO_ADDR
// end else
12618: GO 12711
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
12620: LD_VAR 0 18
12624: PUSH
12625: LD_VAR 0 13
12629: ARRAY
12630: PUSH
12631: LD_INT 1
12633: ARRAY
12634: PPUSH
12635: CALL_OW 256
12639: PUSH
12640: LD_INT 950
12642: LESSEQUAL
12643: IFFALSE 12711
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , 0 ) ;
12645: LD_ADDR_VAR 0 18
12649: PUSH
12650: LD_VAR 0 18
12654: PPUSH
12655: LD_VAR 0 13
12659: PUSH
12660: LD_VAR 0 18
12664: PUSH
12665: LD_VAR 0 13
12669: ARRAY
12670: PUSH
12671: LD_INT 1
12673: MINUS
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PPUSH
12679: LD_INT 0
12681: PPUSH
12682: CALL 33717 0 3
12686: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
12687: LD_VAR 0 18
12691: PUSH
12692: LD_VAR 0 13
12696: ARRAY
12697: PUSH
12698: LD_INT 1
12700: ARRAY
12701: PPUSH
12702: LD_VAR 0 5
12706: PPUSH
12707: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
12711: LD_VAR 0 18
12715: PUSH
12716: LD_VAR 0 13
12720: ARRAY
12721: PUSH
12722: LD_INT 1
12724: ARRAY
12725: PPUSH
12726: CALL_OW 256
12730: PUSH
12731: LD_INT 250
12733: LESS
12734: IFFALSE 12761
// personel = personel diff [ personel [ i ] ] ;
12736: LD_ADDR_VAR 0 18
12740: PUSH
12741: LD_VAR 0 18
12745: PUSH
12746: LD_VAR 0 18
12750: PUSH
12751: LD_VAR 0 13
12755: ARRAY
12756: PUSH
12757: EMPTY
12758: LIST
12759: DIFF
12760: ST_TO_ADDR
// end ;
12761: GO 12552
12763: POP
12764: POP
// for i := 1 to vehicles do
12765: LD_ADDR_VAR 0 13
12769: PUSH
12770: DOUBLE
12771: LD_INT 1
12773: DEC
12774: ST_TO_ADDR
12775: LD_VAR 0 24
12779: PUSH
12780: FOR_TO
12781: IFFALSE 13120
// begin if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
12783: LD_VAR 0 24
12787: PUSH
12788: LD_VAR 0 13
12792: ARRAY
12793: PUSH
12794: LD_INT 1
12796: ARRAY
12797: PPUSH
12798: CALL_OW 256
12802: PUSH
12803: LD_INT 1000
12805: EQUAL
12806: IFFALSE 12981
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
12808: LD_VAR 0 24
12812: PUSH
12813: LD_VAR 0 13
12817: ARRAY
12818: PUSH
12819: LD_INT 1
12821: ARRAY
12822: PPUSH
12823: CALL_OW 263
12827: PUSH
12828: LD_INT 1
12830: EQUAL
12831: IFFALSE 12889
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
12833: LD_VAR 0 24
12837: PUSH
12838: LD_VAR 0 13
12842: ARRAY
12843: PUSH
12844: LD_INT 2
12846: ARRAY
12847: PPUSH
12848: CALL_OW 310
12852: NOT
12853: IFFALSE 12889
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
12855: LD_VAR 0 24
12859: PUSH
12860: LD_VAR 0 13
12864: ARRAY
12865: PUSH
12866: LD_INT 2
12868: ARRAY
12869: PPUSH
12870: LD_VAR 0 24
12874: PUSH
12875: LD_VAR 0 13
12879: ARRAY
12880: PUSH
12881: LD_INT 1
12883: ARRAY
12884: PPUSH
12885: CALL_OW 120
// if vehicles < vehiclesToAttackAmount then
12889: LD_VAR 0 24
12893: PUSH
12894: LD_VAR 0 10
12898: LESS
12899: IFFALSE 12941
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) else
12901: LD_ADDR_VAR 0 24
12905: PUSH
12906: LD_VAR 0 24
12910: PPUSH
12911: LD_VAR 0 13
12915: PUSH
12916: LD_VAR 0 24
12920: PUSH
12921: LD_VAR 0 13
12925: ARRAY
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PPUSH
12931: LD_INT 1
12933: PPUSH
12934: CALL 33717 0 3
12938: ST_TO_ADDR
12939: GO 12979
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
12941: LD_ADDR_VAR 0 24
12945: PUSH
12946: LD_VAR 0 24
12950: PPUSH
12951: LD_VAR 0 13
12955: PUSH
12956: LD_VAR 0 24
12960: PUSH
12961: LD_VAR 0 13
12965: ARRAY
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: PPUSH
12971: LD_INT 2
12973: PPUSH
12974: CALL 33717 0 3
12978: ST_TO_ADDR
// end else
12979: GO 13068
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
12981: LD_VAR 0 24
12985: PUSH
12986: LD_VAR 0 13
12990: ARRAY
12991: PUSH
12992: LD_INT 1
12994: ARRAY
12995: PPUSH
12996: CALL_OW 256
13000: PUSH
13001: LD_INT 650
13003: LESSEQUAL
13004: IFFALSE 13068
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
13006: LD_ADDR_VAR 0 24
13010: PUSH
13011: LD_VAR 0 24
13015: PPUSH
13016: LD_VAR 0 13
13020: PUSH
13021: LD_VAR 0 24
13025: PUSH
13026: LD_VAR 0 13
13030: ARRAY
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PPUSH
13036: LD_INT 0
13038: PPUSH
13039: CALL 33717 0 3
13043: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
13044: LD_VAR 0 24
13048: PUSH
13049: LD_VAR 0 13
13053: ARRAY
13054: PUSH
13055: LD_INT 1
13057: ARRAY
13058: PPUSH
13059: LD_VAR 0 6
13063: PPUSH
13064: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
13068: LD_VAR 0 24
13072: PUSH
13073: LD_VAR 0 13
13077: ARRAY
13078: PUSH
13079: LD_INT 1
13081: ARRAY
13082: PPUSH
13083: CALL_OW 256
13087: PUSH
13088: LD_INT 250
13090: LESS
13091: IFFALSE 13118
// vehicles = vehicles diff [ vehicles [ i ] ] ;
13093: LD_ADDR_VAR 0 24
13097: PUSH
13098: LD_VAR 0 24
13102: PUSH
13103: LD_VAR 0 24
13107: PUSH
13108: LD_VAR 0 13
13112: ARRAY
13113: PUSH
13114: EMPTY
13115: LIST
13116: DIFF
13117: ST_TO_ADDR
// end ;
13118: GO 12780
13120: POP
13121: POP
// for i := 1 to personel do
13122: LD_ADDR_VAR 0 13
13126: PUSH
13127: DOUBLE
13128: LD_INT 1
13130: DEC
13131: ST_TO_ADDR
13132: LD_VAR 0 18
13136: PUSH
13137: FOR_TO
13138: IFFALSE 13179
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
13140: LD_ADDR_VAR 0 19
13144: PUSH
13145: LD_VAR 0 19
13149: PUSH
13150: LD_VAR 0 18
13154: PUSH
13155: LD_VAR 0 13
13159: ARRAY
13160: PPUSH
13161: LD_INT 25
13163: PUSH
13164: LD_INT 1
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: PPUSH
13171: CALL_OW 72
13175: ADD
13176: ST_TO_ADDR
13177: GO 13137
13179: POP
13180: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
13181: LD_VAR 0 19
13185: PUSH
13186: LD_VAR 0 32
13190: PPUSH
13191: LD_INT 3
13193: PUSH
13194: LD_INT 59
13196: PUSH
13197: EMPTY
13198: LIST
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PPUSH
13204: CALL_OW 72
13208: AND
13209: IFFALSE 13497
// begin for i := 1 to personel do
13211: LD_ADDR_VAR 0 13
13215: PUSH
13216: DOUBLE
13217: LD_INT 1
13219: DEC
13220: ST_TO_ADDR
13221: LD_VAR 0 18
13225: PUSH
13226: FOR_TO
13227: IFFALSE 13493
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
13229: LD_VAR 0 18
13233: PUSH
13234: LD_VAR 0 13
13238: ARRAY
13239: PUSH
13240: LD_INT 1
13242: ARRAY
13243: PPUSH
13244: CALL_OW 257
13248: PUSH
13249: LD_INT 1
13251: EQUAL
13252: PUSH
13253: LD_VAR 0 18
13257: PUSH
13258: LD_VAR 0 13
13262: ARRAY
13263: PUSH
13264: LD_INT 3
13266: ARRAY
13267: PUSH
13268: LD_INT 1
13270: EQUAL
13271: AND
13272: IFFALSE 13491
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13274: LD_VAR 0 18
13278: PUSH
13279: LD_VAR 0 13
13283: ARRAY
13284: PUSH
13285: LD_INT 1
13287: ARRAY
13288: PPUSH
13289: CALL_OW 437
13293: IFFALSE 13394
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
13295: LD_VAR 0 18
13299: PUSH
13300: LD_VAR 0 13
13304: ARRAY
13305: PUSH
13306: LD_INT 1
13308: ARRAY
13309: PPUSH
13310: CALL_OW 437
13314: PUSH
13315: LD_INT 1
13317: ARRAY
13318: PUSH
13319: LD_INT 1
13321: ARRAY
13322: PUSH
13323: LD_STRING e
13325: EQUAL
13326: PUSH
13327: LD_VAR 0 18
13331: PUSH
13332: LD_VAR 0 13
13336: ARRAY
13337: PUSH
13338: LD_INT 1
13340: ARRAY
13341: PPUSH
13342: CALL_OW 437
13346: PUSH
13347: LD_INT 1
13349: ARRAY
13350: PUSH
13351: LD_INT 4
13353: ARRAY
13354: PPUSH
13355: CALL_OW 266
13359: PUSH
13360: LD_INT 4
13362: PUSH
13363: LD_INT 5
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: IN
13370: AND
13371: IFFALSE 13394
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13373: LD_VAR 0 18
13377: PUSH
13378: LD_VAR 0 13
13382: ARRAY
13383: PUSH
13384: LD_INT 1
13386: ARRAY
13387: PPUSH
13388: EMPTY
13389: PPUSH
13390: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
13394: LD_ADDR_VAR 0 36
13398: PUSH
13399: LD_VAR 0 32
13403: PPUSH
13404: LD_INT 3
13406: PUSH
13407: LD_INT 59
13409: PUSH
13410: EMPTY
13411: LIST
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PPUSH
13417: CALL_OW 72
13421: PUSH
13422: FOR_IN
13423: IFFALSE 13489
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
13425: LD_VAR 0 18
13429: PUSH
13430: LD_VAR 0 13
13434: ARRAY
13435: PUSH
13436: LD_INT 1
13438: ARRAY
13439: PPUSH
13440: CALL_OW 310
13444: PPUSH
13445: CALL_OW 266
13449: PUSH
13450: LD_INT 31
13452: PUSH
13453: LD_INT 32
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: IN
13460: NOT
13461: IFFALSE 13487
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
13463: LD_VAR 0 18
13467: PUSH
13468: LD_VAR 0 13
13472: ARRAY
13473: PUSH
13474: LD_INT 1
13476: ARRAY
13477: PPUSH
13478: LD_VAR 0 36
13482: PPUSH
13483: CALL_OW 120
13487: GO 13422
13489: POP
13490: POP
// end ; end ;
13491: GO 13226
13493: POP
13494: POP
// end else
13495: GO 13712
// if soldiers and barracks then
13497: LD_VAR 0 19
13501: PUSH
13502: LD_VAR 0 33
13506: AND
13507: IFFALSE 13712
// for i := 1 to personel do
13509: LD_ADDR_VAR 0 13
13513: PUSH
13514: DOUBLE
13515: LD_INT 1
13517: DEC
13518: ST_TO_ADDR
13519: LD_VAR 0 18
13523: PUSH
13524: FOR_TO
13525: IFFALSE 13710
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
13527: LD_VAR 0 18
13531: PUSH
13532: LD_VAR 0 13
13536: ARRAY
13537: PUSH
13538: LD_INT 1
13540: ARRAY
13541: PPUSH
13542: CALL_OW 257
13546: PUSH
13547: LD_INT 1
13549: EQUAL
13550: PUSH
13551: LD_VAR 0 18
13555: PUSH
13556: LD_VAR 0 13
13560: ARRAY
13561: PUSH
13562: LD_INT 3
13564: ARRAY
13565: PUSH
13566: LD_INT 1
13568: EQUAL
13569: AND
13570: PUSH
13571: LD_VAR 0 18
13575: PUSH
13576: LD_VAR 0 13
13580: ARRAY
13581: PUSH
13582: LD_INT 1
13584: ARRAY
13585: PPUSH
13586: LD_INT 56
13588: PUSH
13589: EMPTY
13590: LIST
13591: PPUSH
13592: CALL_OW 72
13596: AND
13597: IFFALSE 13708
// begin if not personel [ i ] [ 2 ] then
13599: LD_VAR 0 18
13603: PUSH
13604: LD_VAR 0 13
13608: ARRAY
13609: PUSH
13610: LD_INT 2
13612: ARRAY
13613: NOT
13614: IFFALSE 13674
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
13616: LD_ADDR_VAR 0 18
13620: PUSH
13621: LD_VAR 0 18
13625: PPUSH
13626: LD_VAR 0 13
13630: PUSH
13631: LD_VAR 0 18
13635: PUSH
13636: LD_VAR 0 13
13640: ARRAY
13641: PUSH
13642: LD_INT 1
13644: MINUS
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: PPUSH
13650: LD_VAR 0 33
13654: PUSH
13655: LD_INT 1
13657: PPUSH
13658: LD_VAR 0 33
13662: PPUSH
13663: CALL_OW 12
13667: ARRAY
13668: PPUSH
13669: CALL 33717 0 3
13673: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13674: LD_VAR 0 18
13678: PUSH
13679: LD_VAR 0 13
13683: ARRAY
13684: PUSH
13685: LD_INT 1
13687: ARRAY
13688: PPUSH
13689: LD_VAR 0 18
13693: PUSH
13694: LD_VAR 0 13
13698: ARRAY
13699: PUSH
13700: LD_INT 2
13702: ARRAY
13703: PPUSH
13704: CALL_OW 120
// end ;
13708: GO 13524
13710: POP
13711: POP
// for i := 1 to personel do
13712: LD_ADDR_VAR 0 13
13716: PUSH
13717: DOUBLE
13718: LD_INT 1
13720: DEC
13721: ST_TO_ADDR
13722: LD_VAR 0 18
13726: PUSH
13727: FOR_TO
13728: IFFALSE 13769
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
13730: LD_ADDR_VAR 0 20
13734: PUSH
13735: LD_VAR 0 20
13739: PUSH
13740: LD_VAR 0 18
13744: PUSH
13745: LD_VAR 0 13
13749: ARRAY
13750: PPUSH
13751: LD_INT 25
13753: PUSH
13754: LD_INT 2
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PPUSH
13761: CALL_OW 72
13765: ADD
13766: ST_TO_ADDR
13767: GO 13727
13769: POP
13770: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
13771: LD_VAR 0 20
13775: PUSH
13776: LD_VAR 0 4
13780: PPUSH
13781: LD_INT 22
13783: PUSH
13784: LD_VAR 0 1
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 21
13795: PUSH
13796: LD_INT 3
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: PUSH
13803: LD_INT 3
13805: PUSH
13806: LD_INT 24
13808: PUSH
13809: LD_INT 1000
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: LIST
13824: PPUSH
13825: CALL_OW 70
13829: AND
13830: IFFALSE 14106
// begin for i := 1 to personel do
13832: LD_ADDR_VAR 0 13
13836: PUSH
13837: DOUBLE
13838: LD_INT 1
13840: DEC
13841: ST_TO_ADDR
13842: LD_VAR 0 18
13846: PUSH
13847: FOR_TO
13848: IFFALSE 14102
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
13850: LD_VAR 0 18
13854: PUSH
13855: LD_VAR 0 13
13859: ARRAY
13860: PUSH
13861: LD_INT 1
13863: ARRAY
13864: PPUSH
13865: CALL_OW 257
13869: PUSH
13870: LD_INT 2
13872: EQUAL
13873: PUSH
13874: LD_VAR 0 18
13878: PUSH
13879: LD_VAR 0 13
13883: ARRAY
13884: PUSH
13885: LD_INT 3
13887: ARRAY
13888: PUSH
13889: LD_INT 1
13891: EQUAL
13892: AND
13893: IFFALSE 14100
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13895: LD_VAR 0 18
13899: PUSH
13900: LD_VAR 0 13
13904: ARRAY
13905: PUSH
13906: LD_INT 1
13908: ARRAY
13909: PPUSH
13910: CALL_OW 437
13914: IFFALSE 13970
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13916: LD_VAR 0 18
13920: PUSH
13921: LD_VAR 0 13
13925: ARRAY
13926: PUSH
13927: LD_INT 1
13929: ARRAY
13930: PPUSH
13931: CALL_OW 437
13935: PUSH
13936: LD_INT 1
13938: ARRAY
13939: PUSH
13940: LD_INT 1
13942: ARRAY
13943: PUSH
13944: LD_STRING e
13946: EQUAL
13947: IFFALSE 13970
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13949: LD_VAR 0 18
13953: PUSH
13954: LD_VAR 0 13
13958: ARRAY
13959: PUSH
13960: LD_INT 1
13962: ARRAY
13963: PPUSH
13964: EMPTY
13965: PPUSH
13966: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13970: LD_VAR 0 18
13974: PUSH
13975: LD_VAR 0 13
13979: ARRAY
13980: PUSH
13981: LD_INT 1
13983: ARRAY
13984: PPUSH
13985: CALL_OW 310
13989: IFFALSE 14010
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
13991: LD_VAR 0 18
13995: PUSH
13996: LD_VAR 0 13
14000: ARRAY
14001: PUSH
14002: LD_INT 1
14004: ARRAY
14005: PPUSH
14006: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14010: LD_ADDR_VAR 0 34
14014: PUSH
14015: LD_VAR 0 4
14019: PPUSH
14020: LD_INT 22
14022: PUSH
14023: LD_VAR 0 1
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: PUSH
14032: LD_INT 21
14034: PUSH
14035: LD_INT 3
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PUSH
14042: LD_INT 3
14044: PUSH
14045: LD_INT 24
14047: PUSH
14048: LD_INT 1000
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: LIST
14063: PPUSH
14064: CALL_OW 70
14068: PUSH
14069: FOR_IN
14070: IFFALSE 14098
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
14072: LD_VAR 0 18
14076: PUSH
14077: LD_VAR 0 13
14081: ARRAY
14082: PUSH
14083: LD_INT 1
14085: ARRAY
14086: PPUSH
14087: LD_VAR 0 34
14091: PPUSH
14092: CALL_OW 190
14096: GO 14069
14098: POP
14099: POP
// end ;
14100: GO 13847
14102: POP
14103: POP
// end else
14104: GO 14368
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
14106: LD_VAR 0 20
14110: PUSH
14111: LD_VAR 0 20
14115: PPUSH
14116: LD_INT 56
14118: PUSH
14119: EMPTY
14120: LIST
14121: PPUSH
14122: CALL_OW 72
14126: AND
14127: PUSH
14128: LD_VAR 0 29
14132: AND
14133: IFFALSE 14368
// for i := 1 to personel do
14135: LD_ADDR_VAR 0 13
14139: PUSH
14140: DOUBLE
14141: LD_INT 1
14143: DEC
14144: ST_TO_ADDR
14145: LD_VAR 0 18
14149: PUSH
14150: FOR_TO
14151: IFFALSE 14366
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
14153: LD_VAR 0 18
14157: PUSH
14158: LD_VAR 0 13
14162: ARRAY
14163: PUSH
14164: LD_INT 1
14166: ARRAY
14167: PPUSH
14168: CALL_OW 257
14172: PUSH
14173: LD_INT 2
14175: EQUAL
14176: PUSH
14177: LD_VAR 0 18
14181: PUSH
14182: LD_VAR 0 13
14186: ARRAY
14187: PUSH
14188: LD_INT 3
14190: ARRAY
14191: PUSH
14192: LD_INT 1
14194: EQUAL
14195: AND
14196: IFFALSE 14364
// begin if not personel [ i ] [ 2 ] then
14198: LD_VAR 0 18
14202: PUSH
14203: LD_VAR 0 13
14207: ARRAY
14208: PUSH
14209: LD_INT 2
14211: ARRAY
14212: NOT
14213: IFFALSE 14330
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
14215: LD_ADDR_VAR 0 18
14219: PUSH
14220: LD_VAR 0 18
14224: PPUSH
14225: LD_VAR 0 13
14229: PUSH
14230: LD_VAR 0 18
14234: PUSH
14235: LD_VAR 0 13
14239: ARRAY
14240: PUSH
14241: LD_INT 1
14243: MINUS
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PPUSH
14249: LD_VAR 0 4
14253: PPUSH
14254: LD_INT 22
14256: PUSH
14257: LD_VAR 0 1
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PUSH
14266: LD_INT 21
14268: PUSH
14269: LD_INT 3
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: PUSH
14276: LD_INT 50
14278: PUSH
14279: EMPTY
14280: LIST
14281: PUSH
14282: LD_INT 2
14284: PUSH
14285: LD_INT 30
14287: PUSH
14288: LD_INT 0
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 30
14297: PUSH
14298: LD_INT 1
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: LIST
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: PPUSH
14316: CALL_OW 70
14320: PUSH
14321: LD_INT 1
14323: ARRAY
14324: PPUSH
14325: CALL 33717 0 3
14329: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14330: LD_VAR 0 18
14334: PUSH
14335: LD_VAR 0 13
14339: ARRAY
14340: PUSH
14341: LD_INT 1
14343: ARRAY
14344: PPUSH
14345: LD_VAR 0 18
14349: PUSH
14350: LD_VAR 0 13
14354: ARRAY
14355: PUSH
14356: LD_INT 2
14358: ARRAY
14359: PPUSH
14360: CALL_OW 120
// end ; end ;
14364: GO 14150
14366: POP
14367: POP
// for i := 1 to personel do
14368: LD_ADDR_VAR 0 13
14372: PUSH
14373: DOUBLE
14374: LD_INT 1
14376: DEC
14377: ST_TO_ADDR
14378: LD_VAR 0 18
14382: PUSH
14383: FOR_TO
14384: IFFALSE 14425
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
14386: LD_ADDR_VAR 0 21
14390: PUSH
14391: LD_VAR 0 21
14395: PUSH
14396: LD_VAR 0 18
14400: PUSH
14401: LD_VAR 0 13
14405: ARRAY
14406: PPUSH
14407: LD_INT 25
14409: PUSH
14410: LD_INT 3
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PPUSH
14417: CALL_OW 72
14421: ADD
14422: ST_TO_ADDR
14423: GO 14383
14425: POP
14426: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14427: LD_VAR 0 21
14431: PUSH
14432: LD_VAR 0 4
14436: PPUSH
14437: LD_INT 22
14439: PUSH
14440: LD_VAR 0 1
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: PUSH
14449: LD_INT 21
14451: PUSH
14452: LD_INT 2
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PUSH
14459: LD_INT 3
14461: PUSH
14462: LD_INT 24
14464: PUSH
14465: LD_INT 1000
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: LIST
14480: PPUSH
14481: CALL_OW 70
14485: AND
14486: IFFALSE 15090
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14488: LD_ADDR_VAR 0 35
14492: PUSH
14493: LD_VAR 0 4
14497: PPUSH
14498: LD_INT 22
14500: PUSH
14501: LD_VAR 0 1
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: LD_INT 21
14512: PUSH
14513: LD_INT 2
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: LD_INT 3
14522: PUSH
14523: LD_INT 24
14525: PUSH
14526: LD_INT 1000
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: LIST
14541: PPUSH
14542: CALL_OW 70
14546: PUSH
14547: FOR_IN
14548: IFFALSE 15086
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
14550: LD_VAR 0 35
14554: PPUSH
14555: LD_VAR 0 6
14559: PPUSH
14560: CALL_OW 299
14564: PUSH
14565: LD_INT 5
14567: LESS
14568: IFFALSE 14863
// begin for i := 1 to vehicles do
14570: LD_ADDR_VAR 0 13
14574: PUSH
14575: DOUBLE
14576: LD_INT 1
14578: DEC
14579: ST_TO_ADDR
14580: LD_VAR 0 24
14584: PUSH
14585: FOR_TO
14586: IFFALSE 14655
// begin if vehicles [ i ] [ 1 ] = damageUnit then
14588: LD_VAR 0 24
14592: PUSH
14593: LD_VAR 0 13
14597: ARRAY
14598: PUSH
14599: LD_INT 1
14601: ARRAY
14602: PUSH
14603: LD_VAR 0 35
14607: EQUAL
14608: IFFALSE 14629
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
14610: LD_VAR 0 24
14614: PUSH
14615: LD_VAR 0 13
14619: ARRAY
14620: PUSH
14621: LD_INT 2
14623: ARRAY
14624: PPUSH
14625: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
14629: LD_VAR 0 24
14633: PUSH
14634: LD_VAR 0 13
14638: ARRAY
14639: PUSH
14640: LD_INT 2
14642: ARRAY
14643: PPUSH
14644: LD_VAR 0 35
14648: PPUSH
14649: CALL_OW 189
// end ;
14653: GO 14585
14655: POP
14656: POP
// for i := 1 to personel do
14657: LD_ADDR_VAR 0 13
14661: PUSH
14662: DOUBLE
14663: LD_INT 1
14665: DEC
14666: ST_TO_ADDR
14667: LD_VAR 0 18
14671: PUSH
14672: FOR_TO
14673: IFFALSE 14861
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14675: LD_VAR 0 18
14679: PUSH
14680: LD_VAR 0 13
14684: ARRAY
14685: PUSH
14686: LD_INT 1
14688: ARRAY
14689: PPUSH
14690: CALL_OW 257
14694: PUSH
14695: LD_INT 3
14697: EQUAL
14698: PUSH
14699: LD_VAR 0 18
14703: PUSH
14704: LD_VAR 0 13
14708: ARRAY
14709: PUSH
14710: LD_INT 3
14712: ARRAY
14713: PUSH
14714: LD_INT 1
14716: EQUAL
14717: AND
14718: IFFALSE 14859
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14720: LD_VAR 0 18
14724: PUSH
14725: LD_VAR 0 13
14729: ARRAY
14730: PUSH
14731: LD_INT 1
14733: ARRAY
14734: PPUSH
14735: CALL_OW 437
14739: IFFALSE 14795
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14741: LD_VAR 0 18
14745: PUSH
14746: LD_VAR 0 13
14750: ARRAY
14751: PUSH
14752: LD_INT 1
14754: ARRAY
14755: PPUSH
14756: CALL_OW 437
14760: PUSH
14761: LD_INT 1
14763: ARRAY
14764: PUSH
14765: LD_INT 1
14767: ARRAY
14768: PUSH
14769: LD_STRING e
14771: EQUAL
14772: IFFALSE 14795
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14774: LD_VAR 0 18
14778: PUSH
14779: LD_VAR 0 13
14783: ARRAY
14784: PUSH
14785: LD_INT 1
14787: ARRAY
14788: PPUSH
14789: EMPTY
14790: PPUSH
14791: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14795: LD_VAR 0 18
14799: PUSH
14800: LD_VAR 0 13
14804: ARRAY
14805: PUSH
14806: LD_INT 1
14808: ARRAY
14809: PPUSH
14810: CALL_OW 310
14814: IFFALSE 14835
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14816: LD_VAR 0 18
14820: PUSH
14821: LD_VAR 0 13
14825: ARRAY
14826: PUSH
14827: LD_INT 1
14829: ARRAY
14830: PPUSH
14831: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
14835: LD_VAR 0 18
14839: PUSH
14840: LD_VAR 0 13
14844: ARRAY
14845: PUSH
14846: LD_INT 1
14848: ARRAY
14849: PPUSH
14850: LD_VAR 0 35
14854: PPUSH
14855: CALL_OW 189
// end ;
14859: GO 14672
14861: POP
14862: POP
// end ; if GetLives ( damageUnit ) < 250 then
14863: LD_VAR 0 35
14867: PPUSH
14868: CALL_OW 256
14872: PUSH
14873: LD_INT 250
14875: LESS
14876: IFFALSE 15084
// for i := 1 to personel do
14878: LD_ADDR_VAR 0 13
14882: PUSH
14883: DOUBLE
14884: LD_INT 1
14886: DEC
14887: ST_TO_ADDR
14888: LD_VAR 0 18
14892: PUSH
14893: FOR_TO
14894: IFFALSE 15082
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14896: LD_VAR 0 18
14900: PUSH
14901: LD_VAR 0 13
14905: ARRAY
14906: PUSH
14907: LD_INT 1
14909: ARRAY
14910: PPUSH
14911: CALL_OW 257
14915: PUSH
14916: LD_INT 3
14918: EQUAL
14919: PUSH
14920: LD_VAR 0 18
14924: PUSH
14925: LD_VAR 0 13
14929: ARRAY
14930: PUSH
14931: LD_INT 3
14933: ARRAY
14934: PUSH
14935: LD_INT 1
14937: EQUAL
14938: AND
14939: IFFALSE 15080
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14941: LD_VAR 0 18
14945: PUSH
14946: LD_VAR 0 13
14950: ARRAY
14951: PUSH
14952: LD_INT 1
14954: ARRAY
14955: PPUSH
14956: CALL_OW 437
14960: IFFALSE 15016
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14962: LD_VAR 0 18
14966: PUSH
14967: LD_VAR 0 13
14971: ARRAY
14972: PUSH
14973: LD_INT 1
14975: ARRAY
14976: PPUSH
14977: CALL_OW 437
14981: PUSH
14982: LD_INT 1
14984: ARRAY
14985: PUSH
14986: LD_INT 1
14988: ARRAY
14989: PUSH
14990: LD_STRING e
14992: EQUAL
14993: IFFALSE 15016
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14995: LD_VAR 0 18
14999: PUSH
15000: LD_VAR 0 13
15004: ARRAY
15005: PUSH
15006: LD_INT 1
15008: ARRAY
15009: PPUSH
15010: EMPTY
15011: PPUSH
15012: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15016: LD_VAR 0 18
15020: PUSH
15021: LD_VAR 0 13
15025: ARRAY
15026: PUSH
15027: LD_INT 1
15029: ARRAY
15030: PPUSH
15031: CALL_OW 310
15035: IFFALSE 15056
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15037: LD_VAR 0 18
15041: PUSH
15042: LD_VAR 0 13
15046: ARRAY
15047: PUSH
15048: LD_INT 1
15050: ARRAY
15051: PPUSH
15052: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
15056: LD_VAR 0 18
15060: PUSH
15061: LD_VAR 0 13
15065: ARRAY
15066: PUSH
15067: LD_INT 1
15069: ARRAY
15070: PPUSH
15071: LD_VAR 0 35
15075: PPUSH
15076: CALL_OW 189
// end ;
15080: GO 14893
15082: POP
15083: POP
// end ;
15084: GO 14547
15086: POP
15087: POP
// end else
15088: GO 15295
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
15090: LD_VAR 0 21
15094: PUSH
15095: LD_VAR 0 21
15099: PPUSH
15100: LD_INT 56
15102: PUSH
15103: EMPTY
15104: LIST
15105: PPUSH
15106: CALL_OW 72
15110: AND
15111: PUSH
15112: LD_VAR 0 30
15116: AND
15117: IFFALSE 15295
// for i := 1 to personel do
15119: LD_ADDR_VAR 0 13
15123: PUSH
15124: DOUBLE
15125: LD_INT 1
15127: DEC
15128: ST_TO_ADDR
15129: LD_VAR 0 18
15133: PUSH
15134: FOR_TO
15135: IFFALSE 15293
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15137: LD_VAR 0 18
15141: PUSH
15142: LD_VAR 0 13
15146: ARRAY
15147: PUSH
15148: LD_INT 1
15150: ARRAY
15151: PPUSH
15152: CALL_OW 257
15156: PUSH
15157: LD_INT 3
15159: EQUAL
15160: PUSH
15161: LD_VAR 0 18
15165: PUSH
15166: LD_VAR 0 13
15170: ARRAY
15171: PUSH
15172: LD_INT 3
15174: ARRAY
15175: PUSH
15176: LD_INT 1
15178: EQUAL
15179: AND
15180: IFFALSE 15291
// begin if not personel [ i ] [ 2 ] then
15182: LD_VAR 0 18
15186: PUSH
15187: LD_VAR 0 13
15191: ARRAY
15192: PUSH
15193: LD_INT 2
15195: ARRAY
15196: NOT
15197: IFFALSE 15257
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
15199: LD_ADDR_VAR 0 18
15203: PUSH
15204: LD_VAR 0 18
15208: PPUSH
15209: LD_VAR 0 13
15213: PUSH
15214: LD_VAR 0 18
15218: PUSH
15219: LD_VAR 0 13
15223: ARRAY
15224: PUSH
15225: LD_INT 1
15227: MINUS
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: PPUSH
15233: LD_VAR 0 30
15237: PUSH
15238: LD_INT 1
15240: PPUSH
15241: LD_VAR 0 30
15245: PPUSH
15246: CALL_OW 12
15250: ARRAY
15251: PPUSH
15252: CALL 33717 0 3
15256: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15257: LD_VAR 0 18
15261: PUSH
15262: LD_VAR 0 13
15266: ARRAY
15267: PUSH
15268: LD_INT 1
15270: ARRAY
15271: PPUSH
15272: LD_VAR 0 18
15276: PUSH
15277: LD_VAR 0 13
15281: ARRAY
15282: PUSH
15283: LD_INT 2
15285: ARRAY
15286: PPUSH
15287: CALL_OW 120
// end ;
15291: GO 15134
15293: POP
15294: POP
// for i := 1 to personel do
15295: LD_ADDR_VAR 0 13
15299: PUSH
15300: DOUBLE
15301: LD_INT 1
15303: DEC
15304: ST_TO_ADDR
15305: LD_VAR 0 18
15309: PUSH
15310: FOR_TO
15311: IFFALSE 15352
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
15313: LD_ADDR_VAR 0 22
15317: PUSH
15318: LD_VAR 0 22
15322: PUSH
15323: LD_VAR 0 18
15327: PUSH
15328: LD_VAR 0 13
15332: ARRAY
15333: PPUSH
15334: LD_INT 25
15336: PUSH
15337: LD_INT 4
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PPUSH
15344: CALL_OW 72
15348: ADD
15349: ST_TO_ADDR
15350: GO 15310
15352: POP
15353: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
15354: LD_VAR 0 22
15358: PUSH
15359: LD_VAR 0 4
15363: PPUSH
15364: LD_INT 22
15366: PUSH
15367: LD_VAR 0 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 21
15378: PUSH
15379: LD_INT 1
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 3
15388: PUSH
15389: LD_INT 24
15391: PUSH
15392: LD_INT 1000
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: LIST
15407: PPUSH
15408: CALL_OW 70
15412: AND
15413: IFFALSE 15930
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
15415: LD_ADDR_VAR 0 35
15419: PUSH
15420: LD_VAR 0 4
15424: PPUSH
15425: LD_INT 22
15427: PUSH
15428: LD_VAR 0 1
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: PUSH
15437: LD_INT 21
15439: PUSH
15440: LD_INT 1
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PUSH
15447: LD_INT 3
15449: PUSH
15450: LD_INT 24
15452: PUSH
15453: LD_INT 1000
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: LIST
15468: PPUSH
15469: CALL_OW 70
15473: PUSH
15474: FOR_IN
15475: IFFALSE 15926
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
15477: LD_VAR 0 35
15481: PPUSH
15482: LD_VAR 0 5
15486: PPUSH
15487: CALL_OW 299
15491: PUSH
15492: LD_INT 5
15494: LESS
15495: IFFALSE 15703
// for i := 1 to personel do
15497: LD_ADDR_VAR 0 13
15501: PUSH
15502: DOUBLE
15503: LD_INT 1
15505: DEC
15506: ST_TO_ADDR
15507: LD_VAR 0 18
15511: PUSH
15512: FOR_TO
15513: IFFALSE 15701
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15515: LD_VAR 0 18
15519: PUSH
15520: LD_VAR 0 13
15524: ARRAY
15525: PUSH
15526: LD_INT 1
15528: ARRAY
15529: PPUSH
15530: CALL_OW 257
15534: PUSH
15535: LD_INT 4
15537: EQUAL
15538: PUSH
15539: LD_VAR 0 18
15543: PUSH
15544: LD_VAR 0 13
15548: ARRAY
15549: PUSH
15550: LD_INT 3
15552: ARRAY
15553: PUSH
15554: LD_INT 1
15556: EQUAL
15557: AND
15558: IFFALSE 15699
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15560: LD_VAR 0 18
15564: PUSH
15565: LD_VAR 0 13
15569: ARRAY
15570: PUSH
15571: LD_INT 1
15573: ARRAY
15574: PPUSH
15575: CALL_OW 437
15579: IFFALSE 15635
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15581: LD_VAR 0 18
15585: PUSH
15586: LD_VAR 0 13
15590: ARRAY
15591: PUSH
15592: LD_INT 1
15594: ARRAY
15595: PPUSH
15596: CALL_OW 437
15600: PUSH
15601: LD_INT 1
15603: ARRAY
15604: PUSH
15605: LD_INT 1
15607: ARRAY
15608: PUSH
15609: LD_STRING e
15611: EQUAL
15612: IFFALSE 15635
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15614: LD_VAR 0 18
15618: PUSH
15619: LD_VAR 0 13
15623: ARRAY
15624: PUSH
15625: LD_INT 1
15627: ARRAY
15628: PPUSH
15629: EMPTY
15630: PPUSH
15631: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15635: LD_VAR 0 18
15639: PUSH
15640: LD_VAR 0 13
15644: ARRAY
15645: PUSH
15646: LD_INT 1
15648: ARRAY
15649: PPUSH
15650: CALL_OW 310
15654: IFFALSE 15675
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15656: LD_VAR 0 18
15660: PUSH
15661: LD_VAR 0 13
15665: ARRAY
15666: PUSH
15667: LD_INT 1
15669: ARRAY
15670: PPUSH
15671: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
15675: LD_VAR 0 18
15679: PUSH
15680: LD_VAR 0 13
15684: ARRAY
15685: PUSH
15686: LD_INT 1
15688: ARRAY
15689: PPUSH
15690: LD_VAR 0 35
15694: PPUSH
15695: CALL_OW 188
// end ;
15699: GO 15512
15701: POP
15702: POP
// if GetLives ( damageUnit ) < 250 then
15703: LD_VAR 0 35
15707: PPUSH
15708: CALL_OW 256
15712: PUSH
15713: LD_INT 250
15715: LESS
15716: IFFALSE 15924
// for i := 1 to personel do
15718: LD_ADDR_VAR 0 13
15722: PUSH
15723: DOUBLE
15724: LD_INT 1
15726: DEC
15727: ST_TO_ADDR
15728: LD_VAR 0 18
15732: PUSH
15733: FOR_TO
15734: IFFALSE 15922
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15736: LD_VAR 0 18
15740: PUSH
15741: LD_VAR 0 13
15745: ARRAY
15746: PUSH
15747: LD_INT 1
15749: ARRAY
15750: PPUSH
15751: CALL_OW 257
15755: PUSH
15756: LD_INT 4
15758: EQUAL
15759: PUSH
15760: LD_VAR 0 18
15764: PUSH
15765: LD_VAR 0 13
15769: ARRAY
15770: PUSH
15771: LD_INT 3
15773: ARRAY
15774: PUSH
15775: LD_INT 1
15777: EQUAL
15778: AND
15779: IFFALSE 15920
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15781: LD_VAR 0 18
15785: PUSH
15786: LD_VAR 0 13
15790: ARRAY
15791: PUSH
15792: LD_INT 1
15794: ARRAY
15795: PPUSH
15796: CALL_OW 437
15800: IFFALSE 15856
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15802: LD_VAR 0 18
15806: PUSH
15807: LD_VAR 0 13
15811: ARRAY
15812: PUSH
15813: LD_INT 1
15815: ARRAY
15816: PPUSH
15817: CALL_OW 437
15821: PUSH
15822: LD_INT 1
15824: ARRAY
15825: PUSH
15826: LD_INT 1
15828: ARRAY
15829: PUSH
15830: LD_STRING e
15832: EQUAL
15833: IFFALSE 15856
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15835: LD_VAR 0 18
15839: PUSH
15840: LD_VAR 0 13
15844: ARRAY
15845: PUSH
15846: LD_INT 1
15848: ARRAY
15849: PPUSH
15850: EMPTY
15851: PPUSH
15852: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15856: LD_VAR 0 18
15860: PUSH
15861: LD_VAR 0 13
15865: ARRAY
15866: PUSH
15867: LD_INT 1
15869: ARRAY
15870: PPUSH
15871: CALL_OW 310
15875: IFFALSE 15896
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15877: LD_VAR 0 18
15881: PUSH
15882: LD_VAR 0 13
15886: ARRAY
15887: PUSH
15888: LD_INT 1
15890: ARRAY
15891: PPUSH
15892: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
15896: LD_VAR 0 18
15900: PUSH
15901: LD_VAR 0 13
15905: ARRAY
15906: PUSH
15907: LD_INT 1
15909: ARRAY
15910: PPUSH
15911: LD_VAR 0 35
15915: PPUSH
15916: CALL_OW 188
// end ;
15920: GO 15733
15922: POP
15923: POP
// end ;
15924: GO 15474
15926: POP
15927: POP
// end else
15928: GO 16135
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
15930: LD_VAR 0 22
15934: PUSH
15935: LD_VAR 0 22
15939: PPUSH
15940: LD_INT 56
15942: PUSH
15943: EMPTY
15944: LIST
15945: PPUSH
15946: CALL_OW 72
15950: AND
15951: PUSH
15952: LD_VAR 0 31
15956: AND
15957: IFFALSE 16135
// for i := 1 to personel do
15959: LD_ADDR_VAR 0 13
15963: PUSH
15964: DOUBLE
15965: LD_INT 1
15967: DEC
15968: ST_TO_ADDR
15969: LD_VAR 0 18
15973: PUSH
15974: FOR_TO
15975: IFFALSE 16133
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15977: LD_VAR 0 18
15981: PUSH
15982: LD_VAR 0 13
15986: ARRAY
15987: PUSH
15988: LD_INT 1
15990: ARRAY
15991: PPUSH
15992: CALL_OW 257
15996: PUSH
15997: LD_INT 4
15999: EQUAL
16000: PUSH
16001: LD_VAR 0 18
16005: PUSH
16006: LD_VAR 0 13
16010: ARRAY
16011: PUSH
16012: LD_INT 3
16014: ARRAY
16015: PUSH
16016: LD_INT 1
16018: EQUAL
16019: AND
16020: IFFALSE 16131
// begin if not personel [ i ] [ 2 ] then
16022: LD_VAR 0 18
16026: PUSH
16027: LD_VAR 0 13
16031: ARRAY
16032: PUSH
16033: LD_INT 2
16035: ARRAY
16036: NOT
16037: IFFALSE 16097
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
16039: LD_ADDR_VAR 0 18
16043: PUSH
16044: LD_VAR 0 18
16048: PPUSH
16049: LD_VAR 0 13
16053: PUSH
16054: LD_VAR 0 18
16058: PUSH
16059: LD_VAR 0 13
16063: ARRAY
16064: PUSH
16065: LD_INT 1
16067: MINUS
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PPUSH
16073: LD_VAR 0 31
16077: PUSH
16078: LD_INT 1
16080: PPUSH
16081: LD_VAR 0 31
16085: PPUSH
16086: CALL_OW 12
16090: ARRAY
16091: PPUSH
16092: CALL 33717 0 3
16096: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
16097: LD_VAR 0 18
16101: PUSH
16102: LD_VAR 0 13
16106: ARRAY
16107: PUSH
16108: LD_INT 1
16110: ARRAY
16111: PPUSH
16112: LD_VAR 0 18
16116: PUSH
16117: LD_VAR 0 13
16121: ARRAY
16122: PUSH
16123: LD_INT 2
16125: ARRAY
16126: PPUSH
16127: CALL_OW 120
// end ;
16131: GO 15974
16133: POP
16134: POP
// wait ( 0 0$01 ) ;
16135: LD_INT 35
16137: PPUSH
16138: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
16142: LD_VAR 0 24
16146: PUSH
16147: LD_VAR 0 8
16151: LESS
16152: PUSH
16153: LD_VAR 0 30
16157: AND
16158: IFFALSE 16408
// begin tmp = vehiclesAmount - vehicles ;
16160: LD_ADDR_VAR 0 15
16164: PUSH
16165: LD_VAR 0 8
16169: PUSH
16170: LD_VAR 0 24
16174: MINUS
16175: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
16176: LD_ADDR_VAR 0 27
16180: PUSH
16181: LD_VAR 0 1
16185: PPUSH
16186: LD_VAR 0 2
16190: PPUSH
16191: CALL 7716 0 2
16195: ST_TO_ADDR
// for i := 1 to tmp do
16196: LD_ADDR_VAR 0 13
16200: PUSH
16201: DOUBLE
16202: LD_INT 1
16204: DEC
16205: ST_TO_ADDR
16206: LD_VAR 0 15
16210: PUSH
16211: FOR_TO
16212: IFFALSE 16404
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
16214: LD_ADDR_VAR 0 15
16218: PUSH
16219: LD_VAR 0 27
16223: PUSH
16224: LD_INT 1
16226: PPUSH
16227: LD_VAR 0 27
16231: PPUSH
16232: CALL_OW 12
16236: ARRAY
16237: ST_TO_ADDR
// if tmp then
16238: LD_VAR 0 15
16242: IFFALSE 16402
// begin if tmp in [ 34 , 14 , 71 ] then
16244: LD_VAR 0 15
16248: PUSH
16249: LD_INT 34
16251: PUSH
16252: LD_INT 14
16254: PUSH
16255: LD_INT 71
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: LIST
16262: IN
16263: IFFALSE 16301
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
16265: LD_ADDR_VAR 0 28
16269: PUSH
16270: LD_INT 4
16272: PUSH
16273: EMPTY
16274: LIST
16275: PUSH
16276: LD_INT 14
16278: PUSH
16279: EMPTY
16280: LIST
16281: PUSH
16282: LD_INT 24
16284: PUSH
16285: EMPTY
16286: LIST
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: LIST
16292: PUSH
16293: LD_VAR 0 2
16297: ARRAY
16298: ST_TO_ADDR
16299: GO 16359
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
16301: LD_ADDR_VAR 0 28
16305: PUSH
16306: LD_INT 2
16308: PUSH
16309: LD_INT 3
16311: PUSH
16312: LD_INT 4
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 13
16322: PUSH
16323: LD_INT 14
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 21
16332: PUSH
16333: LD_INT 23
16335: PUSH
16336: LD_INT 24
16338: PUSH
16339: LD_INT 22
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: LIST
16352: PUSH
16353: LD_VAR 0 2
16357: ARRAY
16358: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
16359: LD_VAR 0 30
16363: PUSH
16364: LD_INT 1
16366: ARRAY
16367: PPUSH
16368: LD_VAR 0 28
16372: PUSH
16373: LD_INT 1
16375: PPUSH
16376: LD_VAR 0 28
16380: PPUSH
16381: CALL_OW 12
16385: ARRAY
16386: PPUSH
16387: LD_INT 1
16389: PPUSH
16390: LD_INT 1
16392: PPUSH
16393: LD_VAR 0 15
16397: PPUSH
16398: CALL_OW 185
// end ; end ;
16402: GO 16211
16404: POP
16405: POP
// end else
16406: GO 16421
// ComCancel ( factory [ 1 ] ) ;
16408: LD_VAR 0 30
16412: PUSH
16413: LD_INT 1
16415: ARRAY
16416: PPUSH
16417: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) do
16421: LD_ADDR_VAR 0 23
16425: PUSH
16426: LD_VAR 0 4
16430: PPUSH
16431: LD_INT 22
16433: PUSH
16434: LD_VAR 0 1
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: LD_INT 21
16445: PUSH
16446: LD_INT 2
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PPUSH
16457: CALL_OW 70
16461: PUSH
16462: FOR_IN
16463: IFFALSE 16633
// begin vehicleInList = false ;
16465: LD_ADDR_VAR 0 25
16469: PUSH
16470: LD_INT 0
16472: ST_TO_ADDR
// for i := 1 to vehicles do
16473: LD_ADDR_VAR 0 13
16477: PUSH
16478: DOUBLE
16479: LD_INT 1
16481: DEC
16482: ST_TO_ADDR
16483: LD_VAR 0 24
16487: PUSH
16488: FOR_TO
16489: IFFALSE 16519
// begin if vehicle in vehicles [ i ] then
16491: LD_VAR 0 23
16495: PUSH
16496: LD_VAR 0 24
16500: PUSH
16501: LD_VAR 0 13
16505: ARRAY
16506: IN
16507: IFFALSE 16517
// vehicleInList = true ;
16509: LD_ADDR_VAR 0 25
16513: PUSH
16514: LD_INT 1
16516: ST_TO_ADDR
// end ;
16517: GO 16488
16519: POP
16520: POP
// if not vehicleInList then
16521: LD_VAR 0 25
16525: NOT
16526: IFFALSE 16631
// if vehicles < vehiclesToAttackAmount then
16528: LD_VAR 0 24
16532: PUSH
16533: LD_VAR 0 10
16537: LESS
16538: IFFALSE 16590
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , IsOK ( vehicle ) ] ] else
16540: LD_ADDR_VAR 0 24
16544: PUSH
16545: LD_VAR 0 24
16549: PUSH
16550: LD_VAR 0 23
16554: PUSH
16555: LD_VAR 0 23
16559: PPUSH
16560: CALL_OW 313
16564: PUSH
16565: LD_INT 1
16567: ARRAY
16568: PUSH
16569: LD_VAR 0 23
16573: PPUSH
16574: CALL_OW 302
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: LIST
16583: PUSH
16584: EMPTY
16585: LIST
16586: ADD
16587: ST_TO_ADDR
16588: GO 16631
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
16590: LD_ADDR_VAR 0 24
16594: PUSH
16595: LD_VAR 0 24
16599: PUSH
16600: LD_VAR 0 23
16604: PUSH
16605: LD_VAR 0 23
16609: PPUSH
16610: CALL_OW 313
16614: PUSH
16615: LD_INT 1
16617: ARRAY
16618: PUSH
16619: LD_INT 2
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: LIST
16626: PUSH
16627: EMPTY
16628: LIST
16629: ADD
16630: ST_TO_ADDR
// end ;
16631: GO 16462
16633: POP
16634: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
16635: LD_ADDR_VAR 0 37
16639: PUSH
16640: LD_VAR 0 7
16644: PPUSH
16645: LD_INT 81
16647: PUSH
16648: LD_VAR 0 1
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PPUSH
16657: CALL_OW 70
16661: PUSH
16662: FOR_IN
16663: IFFALSE 16842
// begin defenceUnits = [ ] ;
16665: LD_ADDR_VAR 0 26
16669: PUSH
16670: EMPTY
16671: ST_TO_ADDR
// for i := 1 to personel do
16672: LD_ADDR_VAR 0 13
16676: PUSH
16677: DOUBLE
16678: LD_INT 1
16680: DEC
16681: ST_TO_ADDR
16682: LD_VAR 0 18
16686: PUSH
16687: FOR_TO
16688: IFFALSE 16738
// if personel [ i ] [ 3 ] = 2 then
16690: LD_VAR 0 18
16694: PUSH
16695: LD_VAR 0 13
16699: ARRAY
16700: PUSH
16701: LD_INT 3
16703: ARRAY
16704: PUSH
16705: LD_INT 2
16707: EQUAL
16708: IFFALSE 16736
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
16710: LD_ADDR_VAR 0 26
16714: PUSH
16715: LD_VAR 0 26
16719: PUSH
16720: LD_VAR 0 18
16724: PUSH
16725: LD_VAR 0 13
16729: ARRAY
16730: PUSH
16731: LD_INT 1
16733: ARRAY
16734: ADD
16735: ST_TO_ADDR
16736: GO 16687
16738: POP
16739: POP
// for i := 1 to vehicles do
16740: LD_ADDR_VAR 0 13
16744: PUSH
16745: DOUBLE
16746: LD_INT 1
16748: DEC
16749: ST_TO_ADDR
16750: LD_VAR 0 24
16754: PUSH
16755: FOR_TO
16756: IFFALSE 16806
// if vehicles [ i ] [ 3 ] = 2 then
16758: LD_VAR 0 24
16762: PUSH
16763: LD_VAR 0 13
16767: ARRAY
16768: PUSH
16769: LD_INT 3
16771: ARRAY
16772: PUSH
16773: LD_INT 2
16775: EQUAL
16776: IFFALSE 16804
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
16778: LD_ADDR_VAR 0 26
16782: PUSH
16783: LD_VAR 0 26
16787: PUSH
16788: LD_VAR 0 24
16792: PUSH
16793: LD_VAR 0 13
16797: ARRAY
16798: PUSH
16799: LD_INT 1
16801: ARRAY
16802: ADD
16803: ST_TO_ADDR
16804: GO 16755
16806: POP
16807: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16808: LD_VAR 0 26
16812: PPUSH
16813: LD_INT 3
16815: PUSH
16816: LD_INT 60
16818: PUSH
16819: EMPTY
16820: LIST
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PPUSH
16826: CALL_OW 72
16830: PPUSH
16831: LD_VAR 0 37
16835: PPUSH
16836: CALL_OW 175
// end ;
16840: GO 16662
16842: POP
16843: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16844: LD_ADDR_VAR 0 38
16848: PUSH
16849: LD_INT 22
16851: PUSH
16852: LD_VAR 0 1
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PUSH
16861: LD_INT 2
16863: PUSH
16864: LD_INT 30
16866: PUSH
16867: LD_INT 31
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 30
16876: PUSH
16877: LD_INT 32
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 30
16886: PUSH
16887: LD_INT 33
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: LD_INT 30
16896: PUSH
16897: LD_INT 4
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: LD_INT 30
16906: PUSH
16907: LD_INT 5
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: PPUSH
16926: CALL_OW 69
16930: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
16931: LD_ADDR_VAR 0 39
16935: PUSH
16936: LD_INT 81
16938: PUSH
16939: LD_VAR 0 1
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PUSH
16948: LD_INT 21
16950: PUSH
16951: LD_INT 3
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: LD_INT 58
16960: PUSH
16961: EMPTY
16962: LIST
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: LIST
16968: PPUSH
16969: CALL_OW 69
16973: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
16974: LD_VAR 0 38
16978: PUSH
16979: LD_VAR 0 39
16983: AND
16984: IFFALSE 17054
// for i in attackBuildings do
16986: LD_ADDR_VAR 0 13
16990: PUSH
16991: LD_VAR 0 38
16995: PUSH
16996: FOR_IN
16997: IFFALSE 17052
// for j in enemyBuildings do
16999: LD_ADDR_VAR 0 14
17003: PUSH
17004: LD_VAR 0 39
17008: PUSH
17009: FOR_IN
17010: IFFALSE 17048
// if GetDistUnits ( i , j ) < 12 then
17012: LD_VAR 0 13
17016: PPUSH
17017: LD_VAR 0 14
17021: PPUSH
17022: CALL_OW 296
17026: PUSH
17027: LD_INT 12
17029: LESS
17030: IFFALSE 17046
// ComAttackUnit ( i , j ) ;
17032: LD_VAR 0 13
17036: PPUSH
17037: LD_VAR 0 14
17041: PPUSH
17042: CALL_OW 115
17046: GO 17009
17048: POP
17049: POP
17050: GO 16996
17052: POP
17053: POP
// until not personel or not enableOmicronAI ;
17054: LD_VAR 0 18
17058: NOT
17059: PUSH
17060: LD_EXP 29
17064: NOT
17065: OR
17066: IFFALSE 12113
// end ;
17068: LD_VAR 0 12
17072: RET
// export function MountWeaponTurrent ; var turret , weapons ; begin
17073: LD_INT 0
17075: PPUSH
17076: PPUSH
17077: PPUSH
// weapons = [ ru_gun ] ;
17078: LD_ADDR_VAR 0 3
17082: PUSH
17083: LD_INT 44
17085: PUSH
17086: EMPTY
17087: LIST
17088: ST_TO_ADDR
// for turret in kirovBunkersToMountWeapon do
17089: LD_ADDR_VAR 0 2
17093: PUSH
17094: LD_EXP 69
17098: PUSH
17099: FOR_IN
17100: IFFALSE 17132
// AddComPlaceWeapon ( turret , weapons [ rand ( 1 , weapons ) ] ) ;
17102: LD_VAR 0 2
17106: PPUSH
17107: LD_VAR 0 3
17111: PUSH
17112: LD_INT 1
17114: PPUSH
17115: LD_VAR 0 3
17119: PPUSH
17120: CALL_OW 12
17124: ARRAY
17125: PPUSH
17126: CALL_OW 208
17130: GO 17099
17132: POP
17133: POP
// end ;
17134: LD_VAR 0 1
17138: RET
// export function KirovProduceVehicles ( factory ) ; begin
17139: LD_INT 0
17141: PPUSH
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17142: LD_VAR 0 1
17146: PPUSH
17147: LD_INT 21
17149: PPUSH
17150: LD_INT 1
17152: PPUSH
17153: LD_INT 1
17155: PPUSH
17156: LD_INT 51
17158: PPUSH
17159: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17163: LD_VAR 0 1
17167: PPUSH
17168: LD_INT 21
17170: PPUSH
17171: LD_INT 1
17173: PPUSH
17174: LD_INT 1
17176: PPUSH
17177: LD_INT 51
17179: PPUSH
17180: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17184: LD_VAR 0 1
17188: PPUSH
17189: LD_INT 21
17191: PPUSH
17192: LD_INT 1
17194: PPUSH
17195: LD_INT 1
17197: PPUSH
17198: LD_INT 51
17200: PPUSH
17201: CALL_OW 185
// case Difficulty of 1 :
17205: LD_OWVAR 67
17209: PUSH
17210: LD_INT 1
17212: DOUBLE
17213: EQUAL
17214: IFTRUE 17218
17216: GO 17341
17218: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17219: LD_VAR 0 1
17223: PPUSH
17224: LD_INT 21
17226: PUSH
17227: LD_INT 23
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: LD_INT 1
17236: PPUSH
17237: LD_INT 2
17239: PPUSH
17240: CALL_OW 12
17244: ARRAY
17245: PPUSH
17246: LD_INT 1
17248: PPUSH
17249: LD_INT 1
17251: PPUSH
17252: LD_INT 43
17254: PPUSH
17255: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17259: LD_VAR 0 1
17263: PPUSH
17264: LD_INT 21
17266: PUSH
17267: LD_INT 23
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PUSH
17274: LD_INT 1
17276: PPUSH
17277: LD_INT 2
17279: PPUSH
17280: CALL_OW 12
17284: ARRAY
17285: PPUSH
17286: LD_INT 1
17288: PPUSH
17289: LD_INT 1
17291: PPUSH
17292: LD_INT 43
17294: PPUSH
17295: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17299: LD_VAR 0 1
17303: PPUSH
17304: LD_INT 21
17306: PUSH
17307: LD_INT 23
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 1
17316: PPUSH
17317: LD_INT 2
17319: PPUSH
17320: CALL_OW 12
17324: ARRAY
17325: PPUSH
17326: LD_INT 1
17328: PPUSH
17329: LD_INT 1
17331: PPUSH
17332: LD_INT 44
17334: PPUSH
17335: CALL_OW 185
// end ; 2 :
17339: GO 17604
17341: LD_INT 2
17343: DOUBLE
17344: EQUAL
17345: IFTRUE 17349
17347: GO 17472
17349: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17350: LD_VAR 0 1
17354: PPUSH
17355: LD_INT 21
17357: PUSH
17358: LD_INT 23
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: LD_INT 1
17367: PPUSH
17368: LD_INT 2
17370: PPUSH
17371: CALL_OW 12
17375: ARRAY
17376: PPUSH
17377: LD_INT 1
17379: PPUSH
17380: LD_INT 1
17382: PPUSH
17383: LD_INT 42
17385: PPUSH
17386: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17390: LD_VAR 0 1
17394: PPUSH
17395: LD_INT 21
17397: PUSH
17398: LD_INT 23
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 1
17407: PPUSH
17408: LD_INT 2
17410: PPUSH
17411: CALL_OW 12
17415: ARRAY
17416: PPUSH
17417: LD_INT 1
17419: PPUSH
17420: LD_INT 1
17422: PPUSH
17423: LD_INT 43
17425: PPUSH
17426: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17430: LD_VAR 0 1
17434: PPUSH
17435: LD_INT 21
17437: PUSH
17438: LD_INT 23
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PUSH
17445: LD_INT 1
17447: PPUSH
17448: LD_INT 2
17450: PPUSH
17451: CALL_OW 12
17455: ARRAY
17456: PPUSH
17457: LD_INT 1
17459: PPUSH
17460: LD_INT 1
17462: PPUSH
17463: LD_INT 44
17465: PPUSH
17466: CALL_OW 185
// end ; 3 :
17470: GO 17604
17472: LD_INT 3
17474: DOUBLE
17475: EQUAL
17476: IFTRUE 17480
17478: GO 17603
17480: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17481: LD_VAR 0 1
17485: PPUSH
17486: LD_INT 21
17488: PUSH
17489: LD_INT 23
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: LD_INT 1
17498: PPUSH
17499: LD_INT 2
17501: PPUSH
17502: CALL_OW 12
17506: ARRAY
17507: PPUSH
17508: LD_INT 1
17510: PPUSH
17511: LD_INT 1
17513: PPUSH
17514: LD_INT 42
17516: PPUSH
17517: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17521: LD_VAR 0 1
17525: PPUSH
17526: LD_INT 21
17528: PUSH
17529: LD_INT 23
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 1
17538: PPUSH
17539: LD_INT 2
17541: PPUSH
17542: CALL_OW 12
17546: ARRAY
17547: PPUSH
17548: LD_INT 1
17550: PPUSH
17551: LD_INT 1
17553: PPUSH
17554: LD_INT 42
17556: PPUSH
17557: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17561: LD_VAR 0 1
17565: PPUSH
17566: LD_INT 21
17568: PUSH
17569: LD_INT 23
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PUSH
17576: LD_INT 1
17578: PPUSH
17579: LD_INT 2
17581: PPUSH
17582: CALL_OW 12
17586: ARRAY
17587: PPUSH
17588: LD_INT 1
17590: PPUSH
17591: LD_INT 1
17593: PPUSH
17594: LD_INT 44
17596: PPUSH
17597: CALL_OW 185
// end ; end ;
17601: GO 17604
17603: POP
// end ;
17604: LD_VAR 0 2
17608: RET
// export function KirovAttackOmicron ; var i , vehicles , vehicle , goodVehs ; begin
17609: LD_INT 0
17611: PPUSH
17612: PPUSH
17613: PPUSH
17614: PPUSH
17615: PPUSH
// vehicles = [ ] ;
17616: LD_ADDR_VAR 0 3
17620: PUSH
17621: EMPTY
17622: ST_TO_ADDR
// for vehicle in kirovAttackVehicles do
17623: LD_ADDR_VAR 0 4
17627: PUSH
17628: LD_EXP 73
17632: PUSH
17633: FOR_IN
17634: IFFALSE 17683
// vehicles = Insert ( vehicles , 1 , [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 1 ] ) ;
17636: LD_ADDR_VAR 0 3
17640: PUSH
17641: LD_VAR 0 3
17645: PPUSH
17646: LD_INT 1
17648: PPUSH
17649: LD_VAR 0 4
17653: PUSH
17654: LD_VAR 0 4
17658: PPUSH
17659: CALL_OW 313
17663: PUSH
17664: LD_INT 1
17666: ARRAY
17667: PUSH
17668: LD_INT 1
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: LIST
17675: PPUSH
17676: CALL_OW 2
17680: ST_TO_ADDR
17681: GO 17633
17683: POP
17684: POP
// repeat for i := 1 to vehicles do
17685: LD_ADDR_VAR 0 2
17689: PUSH
17690: DOUBLE
17691: LD_INT 1
17693: DEC
17694: ST_TO_ADDR
17695: LD_VAR 0 3
17699: PUSH
17700: FOR_TO
17701: IFFALSE 17739
// if vehicles [ i ] [ 3 ] = 1 then
17703: LD_VAR 0 3
17707: PUSH
17708: LD_VAR 0 2
17712: ARRAY
17713: PUSH
17714: LD_INT 3
17716: ARRAY
17717: PUSH
17718: LD_INT 1
17720: EQUAL
17721: IFFALSE 17737
// goodVehs = goodVehs + 1 ;
17723: LD_ADDR_VAR 0 5
17727: PUSH
17728: LD_VAR 0 5
17732: PUSH
17733: LD_INT 1
17735: PLUS
17736: ST_TO_ADDR
17737: GO 17700
17739: POP
17740: POP
// if goodVehs = vehicles then
17741: LD_VAR 0 5
17745: PUSH
17746: LD_VAR 0 3
17750: EQUAL
17751: IFFALSE 17800
// for i := 1 to vehicles do
17753: LD_ADDR_VAR 0 2
17757: PUSH
17758: DOUBLE
17759: LD_INT 1
17761: DEC
17762: ST_TO_ADDR
17763: LD_VAR 0 3
17767: PUSH
17768: FOR_TO
17769: IFFALSE 17798
// ComAgressiveMove ( vehicles [ i ] [ 1 ] , 26 , 35 ) ;
17771: LD_VAR 0 3
17775: PUSH
17776: LD_VAR 0 2
17780: ARRAY
17781: PUSH
17782: LD_INT 1
17784: ARRAY
17785: PPUSH
17786: LD_INT 26
17788: PPUSH
17789: LD_INT 35
17791: PPUSH
17792: CALL_OW 114
17796: GO 17768
17798: POP
17799: POP
// goodVehs = 0 ;
17800: LD_ADDR_VAR 0 5
17804: PUSH
17805: LD_INT 0
17807: ST_TO_ADDR
// for i := 1 to vehicles do
17808: LD_ADDR_VAR 0 2
17812: PUSH
17813: DOUBLE
17814: LD_INT 1
17816: DEC
17817: ST_TO_ADDR
17818: LD_VAR 0 3
17822: PUSH
17823: FOR_TO
17824: IFFALSE 18224
// begin if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and not GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
17826: LD_VAR 0 3
17830: PUSH
17831: LD_VAR 0 2
17835: ARRAY
17836: PUSH
17837: LD_INT 1
17839: ARRAY
17840: PPUSH
17841: CALL_OW 256
17845: PUSH
17846: LD_INT 500
17848: LESS
17849: PUSH
17850: LD_VAR 0 3
17854: PUSH
17855: LD_VAR 0 2
17859: ARRAY
17860: PUSH
17861: LD_INT 1
17863: ARRAY
17864: PPUSH
17865: LD_INT 78
17867: PPUSH
17868: LD_INT 39
17870: PPUSH
17871: CALL_OW 297
17875: PUSH
17876: LD_INT 9
17878: LESS
17879: NOT
17880: AND
17881: IFFALSE 17946
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
17883: LD_ADDR_VAR 0 3
17887: PUSH
17888: LD_VAR 0 3
17892: PPUSH
17893: LD_VAR 0 2
17897: PUSH
17898: LD_VAR 0 3
17902: PUSH
17903: LD_VAR 0 2
17907: ARRAY
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PPUSH
17913: LD_INT 2
17915: PPUSH
17916: CALL 33717 0 3
17920: ST_TO_ADDR
// ComMoveXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) ;
17921: LD_VAR 0 3
17925: PUSH
17926: LD_VAR 0 2
17930: ARRAY
17931: PUSH
17932: LD_INT 1
17934: ARRAY
17935: PPUSH
17936: LD_INT 78
17938: PPUSH
17939: LD_INT 39
17941: PPUSH
17942: CALL_OW 111
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
17946: LD_VAR 0 3
17950: PUSH
17951: LD_VAR 0 2
17955: ARRAY
17956: PUSH
17957: LD_INT 1
17959: ARRAY
17960: PPUSH
17961: CALL_OW 256
17965: PUSH
17966: LD_INT 500
17968: LESS
17969: PUSH
17970: LD_VAR 0 3
17974: PUSH
17975: LD_VAR 0 2
17979: ARRAY
17980: PUSH
17981: LD_INT 1
17983: ARRAY
17984: PPUSH
17985: LD_INT 78
17987: PPUSH
17988: LD_INT 39
17990: PPUSH
17991: CALL_OW 297
17995: PUSH
17996: LD_INT 9
17998: LESS
17999: AND
18000: IFFALSE 18055
// begin AddComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
18002: LD_VAR 0 3
18006: PUSH
18007: LD_VAR 0 2
18011: ARRAY
18012: PUSH
18013: LD_INT 2
18015: ARRAY
18016: PPUSH
18017: CALL_OW 181
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18021: LD_VAR 0 3
18025: PUSH
18026: LD_VAR 0 2
18030: ARRAY
18031: PUSH
18032: LD_INT 2
18034: ARRAY
18035: PPUSH
18036: LD_VAR 0 3
18040: PUSH
18041: LD_VAR 0 2
18045: ARRAY
18046: PUSH
18047: LD_INT 1
18049: ARRAY
18050: PPUSH
18051: CALL_OW 189
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 and vehicles [ i ] [ 3 ] = 2 then
18055: LD_VAR 0 3
18059: PUSH
18060: LD_VAR 0 2
18064: ARRAY
18065: PUSH
18066: LD_INT 1
18068: ARRAY
18069: PPUSH
18070: CALL_OW 256
18074: PUSH
18075: LD_INT 1000
18077: EQUAL
18078: PUSH
18079: LD_VAR 0 3
18083: PUSH
18084: LD_VAR 0 2
18088: ARRAY
18089: PUSH
18090: LD_INT 3
18092: ARRAY
18093: PUSH
18094: LD_INT 2
18096: EQUAL
18097: AND
18098: IFFALSE 18172
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) ;
18100: LD_ADDR_VAR 0 3
18104: PUSH
18105: LD_VAR 0 3
18109: PPUSH
18110: LD_VAR 0 2
18114: PUSH
18115: LD_VAR 0 3
18119: PUSH
18120: LD_VAR 0 2
18124: ARRAY
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PPUSH
18130: LD_INT 1
18132: PPUSH
18133: CALL 33717 0 3
18137: ST_TO_ADDR
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18138: LD_VAR 0 3
18142: PUSH
18143: LD_VAR 0 2
18147: ARRAY
18148: PUSH
18149: LD_INT 2
18151: ARRAY
18152: PPUSH
18153: LD_VAR 0 3
18157: PUSH
18158: LD_VAR 0 2
18162: ARRAY
18163: PUSH
18164: LD_INT 1
18166: ARRAY
18167: PPUSH
18168: CALL_OW 120
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
18172: LD_VAR 0 3
18176: PUSH
18177: LD_VAR 0 2
18181: ARRAY
18182: PUSH
18183: LD_INT 1
18185: ARRAY
18186: PPUSH
18187: CALL_OW 256
18191: PUSH
18192: LD_INT 250
18194: LESS
18195: IFFALSE 18222
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18197: LD_ADDR_VAR 0 3
18201: PUSH
18202: LD_VAR 0 3
18206: PUSH
18207: LD_VAR 0 3
18211: PUSH
18212: LD_VAR 0 2
18216: ARRAY
18217: PUSH
18218: EMPTY
18219: LIST
18220: DIFF
18221: ST_TO_ADDR
// end ;
18222: GO 17823
18224: POP
18225: POP
// wait ( 0 0$1 ) ;
18226: LD_INT 35
18228: PPUSH
18229: CALL_OW 67
// until omicronSurrender ;
18233: LD_EXP 23
18237: IFFALSE 17685
// end ;
18239: LD_VAR 0 1
18243: RET
// export function MoveToBase ( units , roadArea ) ; var i , unit , playerUnits , playerUnit , enemyUnitsOnRoad , cratesOnRoad , nearUnit , nearCrates , attackUnits , medics , damageUnits , inBase , newBase ; begin
18244: LD_INT 0
18246: PPUSH
18247: PPUSH
18248: PPUSH
18249: PPUSH
18250: PPUSH
18251: PPUSH
18252: PPUSH
18253: PPUSH
18254: PPUSH
18255: PPUSH
18256: PPUSH
18257: PPUSH
18258: PPUSH
18259: PPUSH
// inBase = false ;
18260: LD_ADDR_VAR 0 15
18264: PUSH
18265: LD_INT 0
18267: ST_TO_ADDR
// repeat enemyUnitsOnRoad = FilterUnitsInArea ( roadArea , [ [ f_side , 3 ] ] ) ;
18268: LD_ADDR_VAR 0 8
18272: PUSH
18273: LD_VAR 0 2
18277: PPUSH
18278: LD_INT 22
18280: PUSH
18281: LD_INT 3
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: EMPTY
18289: LIST
18290: PPUSH
18291: CALL_OW 70
18295: ST_TO_ADDR
// cratesOnRoad = GetListOfCratesInArea ( roadArea ) ;
18296: LD_ADDR_VAR 0 9
18300: PUSH
18301: LD_VAR 0 2
18305: PPUSH
18306: CALL_OW 435
18310: ST_TO_ADDR
// attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_mechanic ] , [ f_type , unit_vehicle ] ] ] ) ;
18311: LD_ADDR_VAR 0 12
18315: PUSH
18316: LD_VAR 0 1
18320: PPUSH
18321: LD_INT 50
18323: PUSH
18324: EMPTY
18325: LIST
18326: PUSH
18327: LD_INT 2
18329: PUSH
18330: LD_INT 25
18332: PUSH
18333: LD_INT 1
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 25
18342: PUSH
18343: LD_INT 3
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 21
18352: PUSH
18353: LD_INT 2
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PPUSH
18370: CALL_OW 72
18374: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
18375: LD_ADDR_VAR 0 13
18379: PUSH
18380: LD_VAR 0 1
18384: PPUSH
18385: LD_INT 50
18387: PUSH
18388: EMPTY
18389: LIST
18390: PUSH
18391: LD_INT 25
18393: PUSH
18394: LD_INT 4
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PPUSH
18405: CALL_OW 72
18409: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ f_not , [ f_lives , 1000 ] ] ) ;
18410: LD_ADDR_VAR 0 14
18414: PUSH
18415: LD_VAR 0 1
18419: PPUSH
18420: LD_INT 3
18422: PUSH
18423: LD_INT 24
18425: PUSH
18426: LD_INT 1000
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PPUSH
18437: CALL_OW 72
18441: ST_TO_ADDR
// playerUnits = FilterAllUnits ( [ [ f_side , 3 ] ] ) ;
18442: LD_ADDR_VAR 0 6
18446: PUSH
18447: LD_INT 22
18449: PUSH
18450: LD_INT 3
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: EMPTY
18458: LIST
18459: PPUSH
18460: CALL_OW 69
18464: ST_TO_ADDR
// for unit in UnitFilter ( units , [ [ f_ok ] ] ) do
18465: LD_ADDR_VAR 0 5
18469: PUSH
18470: LD_VAR 0 1
18474: PPUSH
18475: LD_INT 50
18477: PUSH
18478: EMPTY
18479: LIST
18480: PUSH
18481: EMPTY
18482: LIST
18483: PPUSH
18484: CALL_OW 72
18488: PUSH
18489: FOR_IN
18490: IFFALSE 18828
// begin if attackUnits and medics then
18492: LD_VAR 0 12
18496: PUSH
18497: LD_VAR 0 13
18501: AND
18502: IFFALSE 18569
// begin if damageUnits then
18504: LD_VAR 0 14
18508: IFFALSE 18530
// ComHeal ( medics , damageUnits [ 1 ] ) else
18510: LD_VAR 0 13
18514: PPUSH
18515: LD_VAR 0 14
18519: PUSH
18520: LD_INT 1
18522: ARRAY
18523: PPUSH
18524: CALL_OW 128
18528: GO 18567
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
18530: LD_VAR 0 13
18534: PPUSH
18535: LD_VAR 0 12
18539: PUSH
18540: LD_INT 1
18542: ARRAY
18543: PPUSH
18544: CALL_OW 250
18548: PPUSH
18549: LD_VAR 0 12
18553: PUSH
18554: LD_INT 1
18556: ARRAY
18557: PPUSH
18558: CALL_OW 251
18562: PPUSH
18563: CALL_OW 111
// end else
18567: GO 18598
// begin if not attackUnits and medics then
18569: LD_VAR 0 12
18573: NOT
18574: PUSH
18575: LD_VAR 0 13
18579: AND
18580: IFFALSE 18598
// attackUnits = attackUnits ^ medics ;
18582: LD_ADDR_VAR 0 12
18586: PUSH
18587: LD_VAR 0 12
18591: PUSH
18592: LD_VAR 0 13
18596: ADD
18597: ST_TO_ADDR
// end ; for i := 1 to cratesOnRoad / 2 do
18598: LD_ADDR_VAR 0 4
18602: PUSH
18603: DOUBLE
18604: LD_INT 1
18606: DEC
18607: ST_TO_ADDR
18608: LD_VAR 0 9
18612: PUSH
18613: LD_INT 2
18615: DIVREAL
18616: PUSH
18617: FOR_TO
18618: IFFALSE 18657
// AddComAttackPlace ( attackUnits , cratesOnRoad [ i ] , cratesOnRoad [ i + 1 ] ) ;
18620: LD_VAR 0 12
18624: PPUSH
18625: LD_VAR 0 9
18629: PUSH
18630: LD_VAR 0 4
18634: ARRAY
18635: PPUSH
18636: LD_VAR 0 9
18640: PUSH
18641: LD_VAR 0 4
18645: PUSH
18646: LD_INT 1
18648: PLUS
18649: ARRAY
18650: PPUSH
18651: CALL_OW 176
18655: GO 18617
18657: POP
18658: POP
// if enemyUnitsOnRoad then
18659: LD_VAR 0 8
18663: IFFALSE 18782
// begin for playerUnit in playerUnits do
18665: LD_ADDR_VAR 0 7
18669: PUSH
18670: LD_VAR 0 6
18674: PUSH
18675: FOR_IN
18676: IFFALSE 18778
// begin if Attacks ( playerUnit ) then
18678: LD_VAR 0 7
18682: PPUSH
18683: CALL_OW 320
18687: IFFALSE 18742
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
18689: LD_VAR 0 7
18693: PPUSH
18694: CALL_OW 320
18698: PUSH
18699: LD_VAR 0 1
18703: IN
18704: PUSH
18705: LD_VAR 0 7
18709: PPUSH
18710: LD_VAR 0 5
18714: PPUSH
18715: CALL_OW 296
18719: PUSH
18720: LD_INT 13
18722: LESS
18723: AND
18724: IFFALSE 18740
// ComAttackUnit ( attackUnits , playerUnit ) end else
18726: LD_VAR 0 12
18730: PPUSH
18731: LD_VAR 0 7
18735: PPUSH
18736: CALL_OW 115
18740: GO 18776
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , unit ) ;
18742: LD_ADDR_VAR 0 10
18746: PUSH
18747: LD_VAR 0 8
18751: PPUSH
18752: LD_VAR 0 5
18756: PPUSH
18757: CALL_OW 74
18761: ST_TO_ADDR
// ComAttackUnit ( attackUnits , nearUnit ) ;
18762: LD_VAR 0 12
18766: PPUSH
18767: LD_VAR 0 10
18771: PPUSH
18772: CALL_OW 115
// end ; end ;
18776: GO 18675
18778: POP
18779: POP
// end else
18780: GO 18797
// begin ComMoveXY ( unit , 27 , 34 ) ;
18782: LD_VAR 0 5
18786: PPUSH
18787: LD_INT 27
18789: PPUSH
18790: LD_INT 34
18792: PPUSH
18793: CALL_OW 111
// end ; if GetDistUnitXY ( unit , 27 , 34 ) < 5 then
18797: LD_VAR 0 5
18801: PPUSH
18802: LD_INT 27
18804: PPUSH
18805: LD_INT 34
18807: PPUSH
18808: CALL_OW 297
18812: PUSH
18813: LD_INT 5
18815: LESS
18816: IFFALSE 18826
// inBase = true ;
18818: LD_ADDR_VAR 0 15
18822: PUSH
18823: LD_INT 1
18825: ST_TO_ADDR
// end ;
18826: GO 18489
18828: POP
18829: POP
// wait ( 0 0$1 ) ;
18830: LD_INT 35
18832: PPUSH
18833: CALL_OW 67
// until UnitFilter ( units , [ f_ok ] ) = 0 or inBase ;
18837: LD_VAR 0 1
18841: PPUSH
18842: LD_INT 50
18844: PUSH
18845: EMPTY
18846: LIST
18847: PPUSH
18848: CALL_OW 72
18852: PUSH
18853: LD_INT 0
18855: EQUAL
18856: PUSH
18857: LD_VAR 0 15
18861: OR
18862: IFFALSE 18268
// ComMoveXY ( units , 27 , 34 ) ;
18864: LD_VAR 0 1
18868: PPUSH
18869: LD_INT 27
18871: PPUSH
18872: LD_INT 34
18874: PPUSH
18875: CALL_OW 111
// for i := 1 to units do
18879: LD_ADDR_VAR 0 4
18883: PUSH
18884: DOUBLE
18885: LD_INT 1
18887: DEC
18888: ST_TO_ADDR
18889: LD_VAR 0 1
18893: PUSH
18894: FOR_TO
18895: IFFALSE 18930
// if IsOk ( units [ i ] ) then
18897: LD_VAR 0 1
18901: PUSH
18902: LD_VAR 0 4
18906: ARRAY
18907: PPUSH
18908: CALL_OW 302
18912: IFFALSE 18928
// americanTroopsArriveOmicronCounter = americanTroopsArriveOmicronCounter + 1 ;
18914: LD_ADDR_EXP 12
18918: PUSH
18919: LD_EXP 12
18923: PUSH
18924: LD_INT 1
18926: PLUS
18927: ST_TO_ADDR
18928: GO 18894
18930: POP
18931: POP
// amSupportTroops = amSupportTroops diff units ;
18932: LD_ADDR_EXP 81
18936: PUSH
18937: LD_EXP 81
18941: PUSH
18942: LD_VAR 0 1
18946: DIFF
18947: ST_TO_ADDR
// newBase = amBase ;
18948: LD_ADDR_VAR 0 16
18952: PUSH
18953: LD_EXP 83
18957: ST_TO_ADDR
// newBase = newBase ^ UnitFilter ( units , [ f_ok ] ) ;
18958: LD_ADDR_VAR 0 16
18962: PUSH
18963: LD_VAR 0 16
18967: PUSH
18968: LD_VAR 0 1
18972: PPUSH
18973: LD_INT 50
18975: PUSH
18976: EMPTY
18977: LIST
18978: PPUSH
18979: CALL_OW 72
18983: ADD
18984: ST_TO_ADDR
// amBase = newBase ;
18985: LD_ADDR_EXP 83
18989: PUSH
18990: LD_VAR 0 16
18994: ST_TO_ADDR
// end ; end_of_file
18995: LD_VAR 0 3
18999: RET
// export function Lose_Burlak ; begin
19000: LD_INT 0
19002: PPUSH
// YouLost ( Burlak ) ;
19003: LD_STRING Burlak
19005: PPUSH
19006: CALL_OW 104
// end ;
19010: LD_VAR 0 1
19014: RET
// export function Lose_Omicron ; begin
19015: LD_INT 0
19017: PPUSH
// YouLost ( Omicron ) ;
19018: LD_STRING Omicron
19020: PPUSH
19021: CALL_OW 104
// end ;
19025: LD_VAR 0 1
19029: RET
// export function Lose_Vehicles ; begin
19030: LD_INT 0
19032: PPUSH
// YouLost ( Vehicles ) ;
19033: LD_STRING Vehicles
19035: PPUSH
19036: CALL_OW 104
// end ;
19040: LD_VAR 0 1
19044: RET
// export function Lose_SelfAttack ; begin
19045: LD_INT 0
19047: PPUSH
// YouLost ( SelfAttack ) ;
19048: LD_STRING SelfAttack
19050: PPUSH
19051: CALL_OW 104
// end ;
19055: LD_VAR 0 1
19059: RET
// export function Lose_Delay ; begin
19060: LD_INT 0
19062: PPUSH
// YouLost ( Delay ) ;
19063: LD_STRING Delay
19065: PPUSH
19066: CALL_OW 104
// end ; end_of_file
19070: LD_VAR 0 1
19074: RET
// export function FinishMission ; begin
19075: LD_INT 0
19077: PPUSH
// SetRewards ;
19078: CALL 19099 0 0
// SavePlayerCharacters ;
19082: CALL 19313 0 0
// SaveGlobalVariables ;
19086: CALL 19642 0 0
// YouWin ;
19090: CALL_OW 103
// end ;
19094: LD_VAR 0 1
19098: RET
// function SetRewards ; var unitsToReward ; begin
19099: LD_INT 0
19101: PPUSH
19102: PPUSH
// if produceMoreVehicles then
19103: LD_EXP 16
19107: IFFALSE 19121
// AddMedal ( Surplus , 1 ) else
19109: LD_STRING Surplus
19111: PPUSH
19112: LD_INT 1
19114: PPUSH
19115: CALL_OW 101
19119: GO 19151
// if produceOnlyForYou then
19121: LD_EXP 17
19125: IFFALSE 19140
// AddMedal ( Surplus , - 1 ) else
19127: LD_STRING Surplus
19129: PPUSH
19130: LD_INT 1
19132: NEG
19133: PPUSH
19134: CALL_OW 101
19138: GO 19151
// AddMedal ( Surplus , - 2 ) ;
19140: LD_STRING Surplus
19142: PPUSH
19143: LD_INT 2
19145: NEG
19146: PPUSH
19147: CALL_OW 101
// if americanTroopsArriveOmicronCounter < maxAmericanTroopsIgnore then
19151: LD_EXP 12
19155: PUSH
19156: LD_EXP 44
19160: LESS
19161: IFFALSE 19175
// AddMedal ( PreventReinforcements , 1 ) else
19163: LD_STRING PreventReinforcements
19165: PPUSH
19166: LD_INT 1
19168: PPUSH
19169: CALL_OW 101
19173: GO 19186
// AddMedal ( PreventReinforcements , - 1 ) ;
19175: LD_STRING PreventReinforcements
19177: PPUSH
19178: LD_INT 1
19180: NEG
19181: PPUSH
19182: CALL_OW 101
// if scholtzeSaved and IsOK ( Scholtze ) then
19186: LD_EXP 7
19190: PUSH
19191: LD_EXP 52
19195: PPUSH
19196: CALL_OW 302
19200: AND
19201: IFFALSE 19215
// AddMedal ( Scholtze , 1 ) else
19203: LD_STRING Scholtze
19205: PPUSH
19206: LD_INT 1
19208: PPUSH
19209: CALL_OW 101
19213: GO 19226
// AddMedal ( Scholtze , - 1 ) ;
19215: LD_STRING Scholtze
19217: PPUSH
19218: LD_INT 1
19220: NEG
19221: PPUSH
19222: CALL_OW 101
// GiveMedals ( Main ) ;
19226: LD_STRING Main
19228: PPUSH
19229: CALL_OW 102
// unitsToReward = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
19233: LD_ADDR_VAR 0 2
19237: PUSH
19238: LD_INT 22
19240: PUSH
19241: LD_INT 3
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 21
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PPUSH
19262: CALL_OW 69
19266: ST_TO_ADDR
// unitsToReward = unitsToReward ^ survivorsArabianAttack ;
19267: LD_ADDR_VAR 0 2
19271: PUSH
19272: LD_VAR 0 2
19276: PUSH
19277: LD_EXP 76
19281: ADD
19282: ST_TO_ADDR
// unitsToReward = unitsToReward diff Popov ;
19283: LD_ADDR_VAR 0 2
19287: PUSH
19288: LD_VAR 0 2
19292: PUSH
19293: LD_EXP 59
19297: DIFF
19298: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
19299: LD_VAR 0 2
19303: PPUSH
19304: CALL_OW 43
// end ;
19308: LD_VAR 0 1
19312: RET
// function SavePlayerCharacters ; var othersYour , othersKirov ; begin
19313: LD_INT 0
19315: PPUSH
19316: PPUSH
19317: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
19318: LD_EXP 46
19322: PPUSH
19323: LD_STRING Burlak
19325: PPUSH
19326: LD_INT 3
19328: PPUSH
19329: CALL 7214 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
19333: LD_EXP 47
19337: PPUSH
19338: LD_STRING Gnyevko
19340: PPUSH
19341: LD_INT 3
19343: PPUSH
19344: CALL 7214 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
19348: LD_EXP 49
19352: PPUSH
19353: LD_STRING Kovalyuk
19355: PPUSH
19356: LD_INT 3
19358: PPUSH
19359: CALL 7214 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
19363: LD_EXP 48
19367: PPUSH
19368: LD_STRING Kirilenkova
19370: PPUSH
19371: LD_INT 3
19373: PPUSH
19374: CALL 7214 0 3
// ExtSaveCharacter ( Scholtze , Scholtze , 3 ) ;
19378: LD_EXP 52
19382: PPUSH
19383: LD_STRING Scholtze
19385: PPUSH
19386: LD_INT 3
19388: PPUSH
19389: CALL 7214 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
19393: LD_EXP 50
19397: PPUSH
19398: LD_STRING Belkov
19400: PPUSH
19401: LD_INT 3
19403: PPUSH
19404: CALL 7214 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
19408: LD_EXP 51
19412: PPUSH
19413: LD_STRING Belkov2
19415: PPUSH
19416: LD_INT 3
19418: PPUSH
19419: CALL 7214 0 3
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
19423: LD_EXP 50
19427: PPUSH
19428: LD_STRING Belkov
19430: PPUSH
19431: LD_INT 6
19433: PPUSH
19434: CALL 7214 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
19438: LD_EXP 51
19442: PPUSH
19443: LD_STRING Belkov2
19445: PPUSH
19446: LD_INT 6
19448: PPUSH
19449: CALL 7214 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova , Scholtze ] ;
19453: LD_ADDR_VAR 0 2
19457: PUSH
19458: LD_INT 22
19460: PUSH
19461: LD_INT 3
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 21
19470: PUSH
19471: LD_INT 1
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 50
19480: PUSH
19481: EMPTY
19482: LIST
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: LIST
19488: PPUSH
19489: CALL_OW 69
19493: PUSH
19494: LD_EXP 46
19498: PUSH
19499: LD_EXP 47
19503: PUSH
19504: LD_EXP 50
19508: PUSH
19509: LD_EXP 51
19513: PUSH
19514: LD_EXP 49
19518: PUSH
19519: LD_EXP 48
19523: PUSH
19524: LD_EXP 52
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: DIFF
19538: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
19539: LD_VAR 0 2
19543: PPUSH
19544: LD_STRING other_survivors
19546: PPUSH
19547: LD_INT 3
19549: PPUSH
19550: CALL 7270 0 3
// othersKirov = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Kurin , Popov , Belkov , Belkov2 ] ;
19554: LD_ADDR_VAR 0 3
19558: PUSH
19559: LD_INT 22
19561: PUSH
19562: LD_INT 6
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 21
19571: PUSH
19572: LD_INT 1
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 50
19581: PUSH
19582: EMPTY
19583: LIST
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: LIST
19589: PPUSH
19590: CALL_OW 69
19594: PUSH
19595: LD_EXP 58
19599: PUSH
19600: LD_EXP 59
19604: PUSH
19605: LD_EXP 50
19609: PUSH
19610: LD_EXP 51
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: DIFF
19621: ST_TO_ADDR
// ExtSaveCharacters ( othersKirov , other_kirov , 6 ) ;
19622: LD_VAR 0 3
19626: PPUSH
19627: LD_STRING other_kirov
19629: PPUSH
19630: LD_INT 6
19632: PPUSH
19633: CALL 7270 0 3
// end ;
19637: LD_VAR 0 1
19641: RET
// function SaveGlobalVariables ; begin
19642: LD_INT 0
19644: PPUSH
// SaveVariable ( kurinOpinion , 03_KurinOpinion_1 ) ;
19645: LD_EXP 26
19649: PPUSH
19650: LD_STRING 03_KurinOpinion_1
19652: PPUSH
19653: CALL_OW 39
// end ; end_of_file
19657: LD_VAR 0 1
19661: RET
// export function CustomEvent ( event ) ; begin
19662: LD_INT 0
19664: PPUSH
// end ;
19665: LD_VAR 0 2
19669: RET
// on Command ( com ) do var i , j , temp , order , x , y , building ;
19670: LD_INT 0
19672: PPUSH
19673: PPUSH
19674: PPUSH
19675: PPUSH
19676: PPUSH
19677: PPUSH
19678: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
19679: LD_ADDR_VAR 0 2
19683: PUSH
19684: LD_INT 22
19686: PUSH
19687: LD_INT 3
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 21
19696: PUSH
19697: LD_INT 1
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PPUSH
19708: CALL_OW 69
19712: PUSH
19713: FOR_IN
19714: IFFALSE 19911
// if GetTaskList ( i ) > 0 then
19716: LD_VAR 0 2
19720: PPUSH
19721: CALL_OW 437
19725: PUSH
19726: LD_INT 0
19728: GREATER
19729: IFFALSE 19909
// for j = 1 to GetTaskList ( i ) do
19731: LD_ADDR_VAR 0 3
19735: PUSH
19736: DOUBLE
19737: LD_INT 1
19739: DEC
19740: ST_TO_ADDR
19741: LD_VAR 0 2
19745: PPUSH
19746: CALL_OW 437
19750: PUSH
19751: FOR_TO
19752: IFFALSE 19907
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
19754: LD_ADDR_VAR 0 4
19758: PUSH
19759: LD_VAR 0 2
19763: PPUSH
19764: CALL_OW 437
19768: PUSH
19769: LD_VAR 0 3
19773: ARRAY
19774: PUSH
19775: LD_INT 4
19777: ARRAY
19778: ST_TO_ADDR
// building = GetTaskList ( i ) [ j ] [ 5 ] ;
19779: LD_ADDR_VAR 0 8
19783: PUSH
19784: LD_VAR 0 2
19788: PPUSH
19789: CALL_OW 437
19793: PUSH
19794: LD_VAR 0 3
19798: ARRAY
19799: PUSH
19800: LD_INT 5
19802: ARRAY
19803: ST_TO_ADDR
// x = GetTaskList ( i ) [ j ] [ 2 ] ;
19804: LD_ADDR_VAR 0 6
19808: PUSH
19809: LD_VAR 0 2
19813: PPUSH
19814: CALL_OW 437
19818: PUSH
19819: LD_VAR 0 3
19823: ARRAY
19824: PUSH
19825: LD_INT 2
19827: ARRAY
19828: ST_TO_ADDR
// y = GetTaskList ( i ) [ j ] [ 3 ] ;
19829: LD_ADDR_VAR 0 7
19833: PUSH
19834: LD_VAR 0 2
19838: PPUSH
19839: CALL_OW 437
19843: PUSH
19844: LD_VAR 0 3
19848: ARRAY
19849: PUSH
19850: LD_INT 3
19852: ARRAY
19853: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
19854: LD_VAR 0 4
19858: PPUSH
19859: CALL_OW 255
19863: PUSH
19864: LD_INT 6
19866: EQUAL
19867: PUSH
19868: LD_VAR 0 2
19872: PPUSH
19873: CALL_OW 437
19877: PUSH
19878: LD_VAR 0 3
19882: ARRAY
19883: PUSH
19884: LD_INT 1
19886: ARRAY
19887: PUSH
19888: LD_STRING <
19890: EQUAL
19891: AND
19892: IFFALSE 19905
// SetTaskList ( i , [ ] ) ;
19894: LD_VAR 0 2
19898: PPUSH
19899: EMPTY
19900: PPUSH
19901: CALL_OW 446
// end ;
19905: GO 19751
19907: POP
19908: POP
19909: GO 19713
19911: POP
19912: POP
// end ;
19913: PPOPN 8
19915: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
19916: LD_VAR 0 2
19920: PUSH
19921: LD_INT 6
19923: EQUAL
19924: IFFALSE 19938
// SetSide ( building , 6 ) ;
19926: LD_VAR 0 1
19930: PPUSH
19931: LD_INT 6
19933: PPUSH
19934: CALL_OW 235
// end ;
19938: PPOPN 3
19940: END
// on BuildingComplete ( building ) do var diffUnits , canTakeUnits ;
19941: LD_INT 0
19943: PPUSH
19944: PPUSH
// begin diffUnits = [ ] ;
19945: LD_ADDR_VAR 0 2
19949: PUSH
19950: EMPTY
19951: ST_TO_ADDR
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , SecondBurlakBase ) then
19952: LD_VAR 0 1
19956: PPUSH
19957: CALL_OW 255
19961: PUSH
19962: LD_INT 3
19964: EQUAL
19965: PUSH
19966: LD_VAR 0 1
19970: PPUSH
19971: CALL_OW 266
19975: PUSH
19976: LD_INT 0
19978: EQUAL
19979: AND
19980: PUSH
19981: LD_VAR 0 1
19985: PPUSH
19986: LD_INT 21
19988: PPUSH
19989: CALL_OW 308
19993: AND
19994: IFFALSE 20008
// SetBName ( building , kagan ) ;
19996: LD_VAR 0 1
20000: PPUSH
20001: LD_STRING kagan
20003: PPUSH
20004: CALL_OW 500
// if GetSide ( building ) = 6 then
20008: LD_VAR 0 1
20012: PPUSH
20013: CALL_OW 255
20017: PUSH
20018: LD_INT 6
20020: EQUAL
20021: IFFALSE 20202
// begin if GetBType ( building ) = b_ext_noncombat then
20023: LD_VAR 0 1
20027: PPUSH
20028: CALL_OW 266
20032: PUSH
20033: LD_INT 19
20035: EQUAL
20036: IFFALSE 20042
// begin SpawnKirovSupport ;
20038: CALL 4487 0 0
// end ; if GetBType ( building ) = b_depot then
20042: LD_VAR 0 1
20046: PPUSH
20047: CALL_OW 266
20051: PUSH
20052: LD_INT 0
20054: EQUAL
20055: IFFALSE 20101
// begin kirovOilDepot = building ;
20057: LD_ADDR_EXP 65
20061: PUSH
20062: LD_VAR 0 1
20066: ST_TO_ADDR
// SetResourceType ( GetBase ( kirovOilDepot ) , mat_oil , 3000 ) ;
20067: LD_EXP 65
20071: PPUSH
20072: CALL_OW 274
20076: PPUSH
20077: LD_INT 2
20079: PPUSH
20080: LD_INT 3000
20082: PPUSH
20083: CALL_OW 277
// ComEnterUnit ( Grishko , building ) ;
20087: LD_EXP 79
20091: PPUSH
20092: LD_VAR 0 1
20096: PPUSH
20097: CALL_OW 120
// end ; if ( GetBType ( building ) = b_breastwork or GetBType ( building ) = b_armoury ) and IsInArea ( building , SecondKurinBase ) then
20101: LD_VAR 0 1
20105: PPUSH
20106: CALL_OW 266
20110: PUSH
20111: LD_INT 31
20113: EQUAL
20114: PUSH
20115: LD_VAR 0 1
20119: PPUSH
20120: CALL_OW 266
20124: PUSH
20125: LD_INT 4
20127: EQUAL
20128: OR
20129: PUSH
20130: LD_VAR 0 1
20134: PPUSH
20135: LD_INT 20
20137: PPUSH
20138: CALL_OW 308
20142: AND
20143: IFFALSE 20202
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) [ 1 ] , building ) ;
20145: LD_EXP 75
20149: PPUSH
20150: LD_INT 25
20152: PUSH
20153: LD_INT 1
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 56
20162: PUSH
20163: EMPTY
20164: LIST
20165: PUSH
20166: LD_INT 3
20168: PUSH
20169: LD_INT 60
20171: PUSH
20172: EMPTY
20173: LIST
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: LIST
20183: PPUSH
20184: CALL_OW 72
20188: PUSH
20189: LD_INT 1
20191: ARRAY
20192: PPUSH
20193: LD_VAR 0 1
20197: PPUSH
20198: CALL_OW 120
// end ; end ;
20202: PPOPN 3
20204: END
// on UpgradeComplete ( building ) do var i , tmp ;
20205: LD_INT 0
20207: PPUSH
20208: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_factory and not dialog_workshop then
20209: LD_VAR 0 1
20213: PPUSH
20214: CALL_OW 255
20218: PUSH
20219: LD_INT 3
20221: EQUAL
20222: PUSH
20223: LD_VAR 0 1
20227: PPUSH
20228: CALL_OW 266
20232: PUSH
20233: LD_INT 3
20235: EQUAL
20236: AND
20237: PUSH
20238: LD_EXP 8
20242: NOT
20243: AND
20244: IFFALSE 20255
// Dial_UpgradeWorkshop ( building ) ;
20246: LD_VAR 0 1
20250: PPUSH
20251: CALL 23160 0 1
// end ;
20255: PPOPN 3
20257: END
// on UnitDestroyed ( un ) do begin if un = Burlak then
20258: LD_VAR 0 1
20262: PUSH
20263: LD_EXP 46
20267: EQUAL
20268: IFFALSE 20274
// Lose_Burlak ;
20270: CALL 19000 0 0
// if un = beriaDepot and not canDestroyBeriaBase then
20274: LD_VAR 0 1
20278: PUSH
20279: LD_EXP 57
20283: EQUAL
20284: PUSH
20285: LD_EXP 28
20289: NOT
20290: AND
20291: IFFALSE 20297
// Lose_Omicron ;
20293: CALL 19015 0 0
// end ;
20297: PPOPN 1
20299: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
20300: LD_VAR 0 1
20304: PUSH
20305: LD_INT 3
20307: EQUAL
20308: PUSH
20309: LD_VAR 0 2
20313: PUSH
20314: LD_INT 6
20316: EQUAL
20317: AND
20318: IFFALSE 20324
// Lose_SelfAttack ;
20320: CALL 19045 0 0
// end ;
20324: PPOPN 2
20326: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 6 then
20327: LD_VAR 0 1
20331: PPUSH
20332: CALL_OW 255
20336: PUSH
20337: LD_INT 6
20339: EQUAL
20340: IFFALSE 20505
// begin if GetWeapon ( vehicle ) = ru_cargo_bay and not kirovTransportCargo then
20342: LD_VAR 0 1
20346: PPUSH
20347: CALL_OW 264
20351: PUSH
20352: LD_INT 51
20354: EQUAL
20355: PUSH
20356: LD_EXP 71
20360: NOT
20361: AND
20362: IFFALSE 20376
// kirovTransportCargo = vehicle else
20364: LD_ADDR_EXP 71
20368: PUSH
20369: LD_VAR 0 1
20373: ST_TO_ADDR
20374: GO 20448
// begin if GetWeapon ( vehicle ) = ru_cargo_bay then
20376: LD_VAR 0 1
20380: PPUSH
20381: CALL_OW 264
20385: PUSH
20386: LD_INT 51
20388: EQUAL
20389: IFFALSE 20448
// begin ComTransport ( vehicle , kirovOilDepot , mat_oil ) ;
20391: LD_VAR 0 1
20395: PPUSH
20396: LD_EXP 65
20400: PPUSH
20401: LD_INT 2
20403: PPUSH
20404: CALL_OW 151
// AddComMoveXY ( vehicle , 137 , 99 ) ;
20408: LD_VAR 0 1
20412: PPUSH
20413: LD_INT 137
20415: PPUSH
20416: LD_INT 99
20418: PPUSH
20419: CALL_OW 171
// AddComHold ( vehicle ) ;
20423: LD_VAR 0 1
20427: PPUSH
20428: CALL_OW 200
// kirovAttackCargo = kirovAttackCargo ^ vehicle ;
20432: LD_ADDR_EXP 72
20436: PUSH
20437: LD_EXP 72
20441: PUSH
20442: LD_VAR 0 1
20446: ADD
20447: ST_TO_ADDR
// end ; end ; if GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
20448: LD_VAR 0 1
20452: PPUSH
20453: CALL_OW 264
20457: PUSH
20458: LD_INT 42
20460: PUSH
20461: LD_INT 43
20463: PUSH
20464: LD_INT 44
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: LIST
20471: IN
20472: IFFALSE 20505
// begin kirovAttackVehicles = kirovAttackVehicles ^ vehicle ;
20474: LD_ADDR_EXP 73
20478: PUSH
20479: LD_EXP 73
20483: PUSH
20484: LD_VAR 0 1
20488: ADD
20489: ST_TO_ADDR
// ComMoveXY ( vehicle , 137 , 99 ) ;
20490: LD_VAR 0 1
20494: PPUSH
20495: LD_INT 137
20497: PPUSH
20498: LD_INT 99
20500: PPUSH
20501: CALL_OW 111
// end ; end ; end ;
20505: PPOPN 2
20507: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin if side = 6 then
20508: LD_VAR 0 3
20512: PUSH
20513: LD_INT 6
20515: EQUAL
20516: IFFALSE 20539
// begin ComExitVehicle ( capturing_unit ) ;
20518: LD_VAR 0 4
20522: PPUSH
20523: CALL_OW 121
// SetSide ( new , 6 ) ;
20527: LD_VAR 0 1
20531: PPUSH
20532: LD_INT 6
20534: PPUSH
20535: CALL_OW 235
// end ; end ;
20539: PPOPN 4
20541: END
// on EnterVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 and meetNearOmicronBase then
20542: LD_VAR 0 1
20546: PPUSH
20547: CALL_OW 255
20551: PUSH
20552: LD_INT 6
20554: EQUAL
20555: PUSH
20556: LD_EXP 19
20560: AND
20561: IFFALSE 20589
// begin wait ( 0 0$2 ) ;
20563: LD_INT 70
20565: PPUSH
20566: CALL_OW 67
// AddComAgressiveMove ( vehicle , 78 , 39 ) ;
20570: LD_VAR 0 1
20574: PPUSH
20575: LD_INT 78
20577: PPUSH
20578: LD_INT 39
20580: PPUSH
20581: CALL_OW 174
// KirovAttackOmicron ;
20585: CALL 17609 0 0
// end ; end ;
20589: PPOPN 2
20591: END
// on ResearchComplete ( research , building ) do begin if GetSide ( building ) = 6 and research = tech_gun then
20592: LD_VAR 0 2
20596: PPUSH
20597: CALL_OW 255
20601: PUSH
20602: LD_INT 6
20604: EQUAL
20605: PUSH
20606: LD_VAR 0 1
20610: PUSH
20611: LD_INT 39
20613: EQUAL
20614: AND
20615: IFFALSE 20676
// begin MountWeaponTurrent ;
20617: CALL 17073 0 0
// wait ( 3 3$30 ) ;
20621: LD_INT 7350
20623: PPUSH
20624: CALL_OW 67
// KirovProduceVehicles ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
20628: LD_INT 22
20630: PUSH
20631: LD_INT 6
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 21
20640: PUSH
20641: LD_INT 3
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 30
20650: PUSH
20651: LD_INT 3
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: LIST
20662: PPUSH
20663: CALL_OW 69
20667: PUSH
20668: LD_INT 1
20670: ARRAY
20671: PPUSH
20672: CALL 17139 0 1
// end ; end ; end_of_file
20676: PPOPN 2
20678: END
// export function MissionIntro ; var unit ; begin
20679: LD_INT 0
20681: PPUSH
20682: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
20683: LD_EXP 46
20687: PUSH
20688: LD_EXP 58
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PPUSH
20697: CALL_OW 87
// ComTurnUnit ( [ Burlak , BelkovDialog ] , Kurin ) ;
20701: LD_EXP 46
20705: PUSH
20706: LD_EXP 60
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PPUSH
20715: LD_EXP 58
20719: PPUSH
20720: CALL_OW 119
// ComTurnUnit ( Kurin , Burlak ) ;
20724: LD_EXP 58
20728: PPUSH
20729: LD_EXP 46
20733: PPUSH
20734: CALL_OW 119
// RevealFogArea ( 3 , RevealMapPartArea ) ;
20738: LD_INT 3
20740: PPUSH
20741: LD_INT 24
20743: PPUSH
20744: CALL_OW 332
// if not IsPlaced ( Belkov ) and not IsPlaced ( Belkov2 ) then
20748: LD_EXP 50
20752: PPUSH
20753: CALL_OW 305
20757: NOT
20758: PUSH
20759: LD_EXP 51
20763: PPUSH
20764: CALL_OW 305
20768: NOT
20769: AND
20770: IFFALSE 20858
// begin Say ( Kurin , D1a-Kur-1 ) ;
20772: LD_EXP 58
20776: PPUSH
20777: LD_STRING D1a-Kur-1
20779: PPUSH
20780: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
20784: LD_EXP 46
20788: PPUSH
20789: LD_STRING D1a-Bur-1
20791: PPUSH
20792: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
20796: LD_EXP 58
20800: PPUSH
20801: LD_STRING D1a-Kur-2
20803: PPUSH
20804: CALL_OW 88
// if platonovOpinion <= 1 then
20808: LD_EXP 27
20812: PUSH
20813: LD_INT 1
20815: LESSEQUAL
20816: IFFALSE 20832
// Say ( Kurin , D1a-Kur-2a ) else
20818: LD_EXP 58
20822: PPUSH
20823: LD_STRING D1a-Kur-2a
20825: PPUSH
20826: CALL_OW 88
20830: GO 20844
// Say ( Kurin , D1a-Kur-2b ) ;
20832: LD_EXP 58
20836: PPUSH
20837: LD_STRING D1a-Kur-2b
20839: PPUSH
20840: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
20844: LD_EXP 46
20848: PPUSH
20849: LD_STRING D1a-Bur-2
20851: PPUSH
20852: CALL_OW 88
// end else
20856: GO 20894
// begin Say ( Kurin , D1b-Kur-1 ) ;
20858: LD_EXP 58
20862: PPUSH
20863: LD_STRING D1b-Kur-1
20865: PPUSH
20866: CALL_OW 88
// Say ( BelkovDialog , D1b-Bel-1 ) ;
20870: LD_EXP 60
20874: PPUSH
20875: LD_STRING D1b-Bel-1
20877: PPUSH
20878: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
20882: LD_EXP 58
20886: PPUSH
20887: LD_STRING D1b-Kur-2
20889: PPUSH
20890: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
20894: LD_EXP 58
20898: PPUSH
20899: LD_STRING D2-Kur-1
20901: PPUSH
20902: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
20906: LD_EXP 46
20910: PPUSH
20911: LD_STRING D2-Bur-1
20913: PPUSH
20914: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
20918: LD_EXP 58
20922: PPUSH
20923: LD_STRING D2-Kur-2
20925: PPUSH
20926: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
20930: LD_EXP 46
20934: PPUSH
20935: LD_STRING D2-Bur-2
20937: PPUSH
20938: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
20942: LD_EXP 58
20946: PPUSH
20947: LD_STRING D2-Kur-3
20949: PPUSH
20950: CALL_OW 88
// SetAttitude ( 1 , 6 , att_friend , true ) ;
20954: LD_INT 1
20956: PPUSH
20957: LD_INT 6
20959: PPUSH
20960: LD_INT 1
20962: PPUSH
20963: LD_INT 1
20965: PPUSH
20966: CALL_OW 80
// PrepareAmericansMissionIntro ;
20970: CALL 5548 0 0
// ComMoveXY ( amIntroUnits , 28 , 35 ) ;
20974: LD_EXP 80
20978: PPUSH
20979: LD_INT 28
20981: PPUSH
20982: LD_INT 35
20984: PPUSH
20985: CALL_OW 111
// CenterOnXY ( 93 , 36 ) ;
20989: LD_INT 93
20991: PPUSH
20992: LD_INT 36
20994: PPUSH
20995: CALL_OW 84
// PlaceSeeing ( 93 , 36 , 3 , - 9 ) ;
20999: LD_INT 93
21001: PPUSH
21002: LD_INT 36
21004: PPUSH
21005: LD_INT 3
21007: PPUSH
21008: LD_INT 9
21010: NEG
21011: PPUSH
21012: CALL_OW 330
// wait ( 0 0$6 ) ;
21016: LD_INT 210
21018: PPUSH
21019: CALL_OW 67
// CenterOnUnits ( Popov ) ;
21023: LD_EXP 59
21027: PPUSH
21028: CALL_OW 85
// wait ( 0 0$1 ) ;
21032: LD_INT 35
21034: PPUSH
21035: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
21039: LD_EXP 59
21043: PPUSH
21044: LD_STRING D2-Pop-3
21046: PPUSH
21047: CALL_OW 94
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
21051: LD_EXP 46
21055: PUSH
21056: LD_EXP 58
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PPUSH
21065: CALL_OW 87
// wait ( 0 0$1 ) ;
21069: LD_INT 35
21071: PPUSH
21072: CALL_OW 67
// for unit in amIntroUnits do
21076: LD_ADDR_VAR 0 2
21080: PUSH
21081: LD_EXP 80
21085: PUSH
21086: FOR_IN
21087: IFFALSE 21100
// RemoveUnit ( unit ) ;
21089: LD_VAR 0 2
21093: PPUSH
21094: CALL_OW 64
21098: GO 21086
21100: POP
21101: POP
// Say ( Kurin , D2-Kur-4 ) ;
21102: LD_EXP 58
21106: PPUSH
21107: LD_STRING D2-Kur-4
21109: PPUSH
21110: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
21114: LD_EXP 46
21118: PPUSH
21119: LD_STRING D2-Bur-4
21121: PPUSH
21122: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
21126: LD_EXP 58
21130: PPUSH
21131: LD_STRING D2-Kur-5
21133: PPUSH
21134: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
21138: LD_EXP 46
21142: PPUSH
21143: LD_STRING D2-Bur-5
21145: PPUSH
21146: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
21150: LD_EXP 58
21154: PPUSH
21155: LD_STRING D2-Kur-6
21157: PPUSH
21158: CALL_OW 88
// if IsPlaced ( Gnyevko ) then
21162: LD_EXP 47
21166: PPUSH
21167: CALL_OW 305
21171: IFFALSE 21187
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
21173: LD_ADDR_EXP 36
21177: PUSH
21178: LD_EXP 36
21182: PUSH
21183: LD_INT 1
21185: MINUS
21186: ST_TO_ADDR
// if IsPlaced ( Kovalyuk ) then
21187: LD_EXP 49
21191: PPUSH
21192: CALL_OW 305
21196: IFFALSE 21212
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
21198: LD_ADDR_EXP 36
21202: PUSH
21203: LD_EXP 36
21207: PUSH
21208: LD_INT 1
21210: MINUS
21211: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) then
21212: LD_EXP 48
21216: PPUSH
21217: CALL_OW 305
21221: IFFALSE 21237
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
21223: LD_ADDR_EXP 36
21227: PUSH
21228: LD_EXP 36
21232: PUSH
21233: LD_INT 1
21235: MINUS
21236: ST_TO_ADDR
// SelectCharacters ( baseUnitsToChoose ) ;
21237: LD_EXP 36
21241: PPUSH
21242: CALL 7368 0 1
// RemoveSeeing ( 93 , 36 , 3 ) ;
21246: LD_INT 93
21248: PPUSH
21249: LD_INT 36
21251: PPUSH
21252: LD_INT 3
21254: PPUSH
21255: CALL_OW 331
// RevealFogArea ( 3 , RevealMapPartArea ) ;
21259: LD_INT 3
21261: PPUSH
21262: LD_INT 24
21264: PPUSH
21265: CALL_OW 332
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
21269: LD_INT 22
21271: PUSH
21272: LD_INT 3
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 21
21281: PUSH
21282: LD_INT 1
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PPUSH
21293: CALL_OW 69
21297: PPUSH
21298: CALL_OW 122
// wait ( 0 0$1 ) ;
21302: LD_INT 35
21304: PPUSH
21305: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
21309: LD_INT 22
21311: PUSH
21312: LD_INT 3
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 21
21321: PUSH
21322: LD_INT 1
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PPUSH
21333: CALL_OW 69
21337: PPUSH
21338: LD_EXP 57
21342: PPUSH
21343: CALL_OW 250
21347: PPUSH
21348: LD_EXP 57
21352: PPUSH
21353: CALL_OW 251
21357: PPUSH
21358: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
21362: LD_INT 35
21364: PPUSH
21365: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
21369: LD_EXP 46
21373: PPUSH
21374: CALL_OW 87
// until GetDistUnits ( Burlak , beriaDepot ) < 6 ;
21378: LD_EXP 46
21382: PPUSH
21383: LD_EXP 57
21387: PPUSH
21388: CALL_OW 296
21392: PUSH
21393: LD_INT 6
21395: LESS
21396: IFFALSE 21362
// InGameOff ;
21398: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
21402: LD_STRING M1
21404: PPUSH
21405: CALL_OW 337
// SaveForQuickRestart ;
21409: CALL_OW 22
// counterEnable = true ;
21413: LD_ADDR_EXP 86
21417: PUSH
21418: LD_INT 1
21420: ST_TO_ADDR
// counterIndex = 1 ;
21421: LD_ADDR_EXP 87
21425: PUSH
21426: LD_INT 1
21428: ST_TO_ADDR
// RevealFogArea ( 3 , RevealMapPartArea ) ;
21429: LD_INT 3
21431: PPUSH
21432: LD_INT 24
21434: PPUSH
21435: CALL_OW 332
// ResAllTechs ( 6 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] , 3 ) ;
21439: LD_INT 6
21441: PPUSH
21442: LD_INT 22
21444: PUSH
21445: LD_INT 6
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 21
21454: PUSH
21455: LD_INT 3
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 30
21464: PUSH
21465: LD_INT 6
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: LIST
21476: PPUSH
21477: CALL_OW 69
21481: PUSH
21482: LD_INT 1
21484: ARRAY
21485: PPUSH
21486: LD_INT 3
21488: PPUSH
21489: CALL 8683 0 3
// ResAllTechs ( 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_lab_half ] ] ) [ 1 ] , 1 ) ;
21493: LD_INT 1
21495: PPUSH
21496: LD_INT 22
21498: PUSH
21499: LD_INT 1
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 21
21508: PUSH
21509: LD_INT 3
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 30
21518: PUSH
21519: LD_INT 7
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: LIST
21530: PPUSH
21531: CALL_OW 69
21535: PUSH
21536: LD_INT 1
21538: ARRAY
21539: PPUSH
21540: LD_INT 1
21542: PPUSH
21543: CALL 8683 0 3
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_gun , 159 , 116 , 0 ) ;
21547: LD_INT 18
21549: PPUSH
21550: LD_INT 22
21552: PUSH
21553: LD_INT 6
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 21
21562: PUSH
21563: LD_INT 1
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: LD_INT 25
21572: PUSH
21573: LD_INT 2
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: LIST
21584: PPUSH
21585: CALL_OW 70
21589: PPUSH
21590: LD_INT 17
21592: PPUSH
21593: LD_INT 159
21595: PPUSH
21596: LD_INT 116
21598: PPUSH
21599: LD_INT 0
21601: PPUSH
21602: CALL_OW 205
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_noncombat , 161 , 115 , 5 ) ;
21606: LD_INT 18
21608: PPUSH
21609: LD_INT 22
21611: PUSH
21612: LD_INT 6
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 21
21621: PUSH
21622: LD_INT 1
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 25
21631: PUSH
21632: LD_INT 2
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: LIST
21643: PPUSH
21644: CALL_OW 70
21648: PPUSH
21649: LD_INT 19
21651: PPUSH
21652: LD_INT 161
21654: PPUSH
21655: LD_INT 115
21657: PPUSH
21658: LD_INT 5
21660: PPUSH
21661: CALL_OW 205
// AddComEnterUnit ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , kirovDepot ) ;
21665: LD_INT 18
21667: PPUSH
21668: LD_INT 22
21670: PUSH
21671: LD_INT 6
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 21
21680: PUSH
21681: LD_INT 1
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 25
21690: PUSH
21691: LD_INT 2
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: LIST
21702: PPUSH
21703: CALL_OW 70
21707: PPUSH
21708: LD_EXP 64
21712: PPUSH
21713: CALL_OW 180
// ComFree ( survivorsArabianAttack ) ;
21717: LD_EXP 76
21721: PPUSH
21722: CALL_OW 139
// AddComEnterUnit ( survivorsArabianAttack diff Popov , ru2_bar1 ) ;
21726: LD_EXP 76
21730: PUSH
21731: LD_EXP 59
21735: DIFF
21736: PPUSH
21737: LD_EXP 66
21741: PPUSH
21742: CALL_OW 180
// ComWalk ( ruScout ) ;
21746: LD_EXP 61
21750: PPUSH
21751: CALL_OW 138
// wait ( 0 0$1 ) ;
21755: LD_INT 35
21757: PPUSH
21758: CALL_OW 67
// AddComMoveXY ( [ ruScout , Popov ] , 99 , 37 ) ;
21762: LD_EXP 61
21766: PUSH
21767: LD_EXP 59
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PPUSH
21776: LD_INT 99
21778: PPUSH
21779: LD_INT 37
21781: PPUSH
21782: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 88 , 60 ) ;
21786: LD_EXP 61
21790: PUSH
21791: LD_EXP 59
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PPUSH
21800: LD_INT 88
21802: PPUSH
21803: LD_INT 60
21805: PPUSH
21806: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 129 , 99 ) ;
21810: LD_EXP 61
21814: PUSH
21815: LD_EXP 59
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PPUSH
21824: LD_INT 129
21826: PPUSH
21827: LD_INT 99
21829: PPUSH
21830: CALL_OW 171
// AddComEnterUnit ( [ Popov , ruScout ] , kirovDepot ) ;
21834: LD_EXP 59
21838: PUSH
21839: LD_EXP 61
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: PPUSH
21848: LD_EXP 64
21852: PPUSH
21853: CALL_OW 180
// end ;
21857: LD_VAR 0 1
21861: RET
// every 0 0$1 trigger kirovCompleteFactory do var i , tmp , pom , diffUnits , canTakeUnits ;
21862: LD_EXP 22
21866: IFFALSE 22138
21868: GO 21870
21870: DISABLE
21871: LD_INT 0
21873: PPUSH
21874: PPUSH
21875: PPUSH
21876: PPUSH
21877: PPUSH
// begin diffUnits = diffUnits ^ Kurin ;
21878: LD_ADDR_VAR 0 4
21882: PUSH
21883: LD_VAR 0 4
21887: PUSH
21888: LD_EXP 58
21892: ADD
21893: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
21894: LD_ADDR_VAR 0 4
21898: PUSH
21899: LD_VAR 0 4
21903: PUSH
21904: LD_EXP 76
21908: ADD
21909: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
21910: LD_ADDR_VAR 0 4
21914: PUSH
21915: LD_VAR 0 4
21919: PUSH
21920: LD_EXP 68
21924: ADD
21925: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff diffUnits ;
21926: LD_ADDR_VAR 0 5
21930: PUSH
21931: LD_INT 18
21933: PPUSH
21934: LD_INT 22
21936: PUSH
21937: LD_INT 6
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 21
21946: PUSH
21947: LD_INT 1
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PPUSH
21958: CALL_OW 70
21962: PUSH
21963: LD_VAR 0 4
21967: DIFF
21968: ST_TO_ADDR
// pom = 6 ;
21969: LD_ADDR_VAR 0 3
21973: PUSH
21974: LD_INT 6
21976: ST_TO_ADDR
// if canTakeUnits then
21977: LD_VAR 0 5
21981: IFFALSE 22105
// for i = 1 to canTakeUnits do
21983: LD_ADDR_VAR 0 1
21987: PUSH
21988: DOUBLE
21989: LD_INT 1
21991: DEC
21992: ST_TO_ADDR
21993: LD_VAR 0 5
21997: PUSH
21998: FOR_TO
21999: IFFALSE 22103
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
22001: LD_VAR 0 5
22005: PUSH
22006: LD_VAR 0 1
22010: ARRAY
22011: PPUSH
22012: CALL_OW 257
22016: PUSH
22017: LD_INT 3
22019: NONEQUAL
22020: IFFALSE 22067
// begin ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
22022: LD_VAR 0 5
22026: PUSH
22027: LD_VAR 0 1
22031: ARRAY
22032: PPUSH
22033: LD_EXP 21
22037: PPUSH
22038: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , 1 ) ;
22042: LD_VAR 0 5
22046: PUSH
22047: LD_VAR 0 1
22051: ARRAY
22052: PPUSH
22053: LD_INT 1
22055: PPUSH
22056: CALL_OW 183
// wait ( 0 0$1 ) ;
22060: LD_INT 35
22062: PPUSH
22063: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
22067: LD_VAR 0 5
22071: PUSH
22072: LD_VAR 0 1
22076: ARRAY
22077: PPUSH
22078: LD_EXP 21
22082: PPUSH
22083: CALL_OW 120
// pom = pom - 1 ;
22087: LD_ADDR_VAR 0 3
22091: PUSH
22092: LD_VAR 0 3
22096: PUSH
22097: LD_INT 1
22099: MINUS
22100: ST_TO_ADDR
// end ;
22101: GO 21998
22103: POP
22104: POP
// if pom > 0 then
22105: LD_VAR 0 3
22109: PUSH
22110: LD_INT 0
22112: GREATER
22113: IFFALSE 22138
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
22115: LD_ADDR_EXP 78
22119: PUSH
22120: LD_EXP 78
22124: PPUSH
22125: LD_INT 3
22127: PPUSH
22128: LD_VAR 0 3
22132: PPUSH
22133: CALL_OW 1
22137: ST_TO_ADDR
// end ;
22138: PPOPN 5
22140: END
// every 0 0$1 trigger kirovTransportCargo do
22141: LD_EXP 71
22145: IFFALSE 22194
22147: GO 22149
22149: DISABLE
// begin enable ;
22150: ENABLE
// AddComTransport ( kirovTransportCargo , kirovOilDepot , mat_oil ) ;
22151: LD_EXP 71
22155: PPUSH
22156: LD_EXP 65
22160: PPUSH
22161: LD_INT 2
22163: PPUSH
22164: CALL_OW 211
// AddComGive ( kirovTransportCargo , kirovDepot ) ;
22168: LD_EXP 71
22172: PPUSH
22173: LD_EXP 64
22177: PPUSH
22178: CALL_OW 221
// SetFuel ( kirovTransportCargo , 100 ) ;
22182: LD_EXP 71
22186: PPUSH
22187: LD_INT 100
22189: PPUSH
22190: CALL_OW 240
// end ;
22194: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
22195: LD_INT 78
22197: PPUSH
22198: LD_INT 112
22200: PPUSH
22201: LD_INT 3
22203: PPUSH
22204: CALL_OW 440
22208: IFFALSE 22262
22210: GO 22212
22212: DISABLE
// begin CenterOnXY ( 78 , 112 ) ;
22213: LD_INT 78
22215: PPUSH
22216: LD_INT 112
22218: PPUSH
22219: CALL_OW 84
// DialogueOn ;
22223: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
22227: LD_EXP 46
22231: PPUSH
22232: LD_STRING D2a-Bur-1
22234: PPUSH
22235: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
22239: LD_EXP 58
22243: PPUSH
22244: LD_STRING D2a-Kur-1
22246: PPUSH
22247: CALL_OW 94
// DialogueOff ;
22251: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
22255: LD_STRING M2
22257: PPUSH
22258: CALL_OW 337
// end ;
22262: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
22263: LD_EXP 10
22267: NOT
22268: IFFALSE 22460
22270: GO 22272
22272: DISABLE
22273: LD_INT 0
22275: PPUSH
// begin enable ;
22276: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
22277: LD_ADDR_VAR 0 1
22281: PUSH
22282: LD_INT 22
22284: PUSH
22285: LD_INT 3
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 21
22294: PUSH
22295: LD_INT 2
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 23
22304: PUSH
22305: LD_INT 3
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 2
22314: PUSH
22315: LD_INT 31
22317: PUSH
22318: LD_INT 21
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 31
22327: PUSH
22328: LD_INT 23
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: LIST
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: PPUSH
22346: CALL_OW 69
22350: PUSH
22351: FOR_IN
22352: IFFALSE 22458
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
22354: LD_VAR 0 1
22358: PPUSH
22359: LD_INT 48
22361: PPUSH
22362: LD_INT 81
22364: PPUSH
22365: CALL_OW 297
22369: PUSH
22370: LD_INT 7
22372: LESS
22373: IFFALSE 22456
// begin dialog_track = true ;
22375: LD_ADDR_EXP 10
22379: PUSH
22380: LD_INT 1
22382: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
22383: LD_INT 48
22385: PPUSH
22386: LD_INT 81
22388: PPUSH
22389: CALL_OW 86
// DialogueOn ;
22393: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
22397: LD_EXP 46
22401: PPUSH
22402: LD_STRING D5a-Bur-1
22404: PPUSH
22405: CALL_OW 88
// DialogueOff ;
22409: CALL_OW 7
// SetTech ( 82 , 3 , state_enabled ) ;
22413: LD_INT 82
22415: PPUSH
22416: LD_INT 3
22418: PPUSH
22419: LD_INT 1
22421: PPUSH
22422: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
22426: LD_INT 84
22428: PPUSH
22429: LD_INT 3
22431: PPUSH
22432: LD_INT 1
22434: PPUSH
22435: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
22439: LD_INT 16
22441: PPUSH
22442: LD_INT 3
22444: PPUSH
22445: LD_INT 1
22447: PPUSH
22448: CALL_OW 324
// exit ;
22452: POP
22453: POP
22454: GO 22460
// end ;
22456: GO 22351
22458: POP
22459: POP
// end ;
22460: PPOPN 1
22462: END
// every 5 5$30 do
22463: GO 22465
22465: DISABLE
// begin PrepareScholtze ;
22466: CALL 5335 0 0
// wait ( 0 0$2 ) ;
22470: LD_INT 70
22472: PPUSH
22473: CALL_OW 67
// DialogueOn ;
22477: CALL_OW 6
// SayRadio ( Scholtze , D4-Sch-1 ) ;
22481: LD_EXP 52
22485: PPUSH
22486: LD_STRING D4-Sch-1
22488: PPUSH
22489: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
22493: LD_EXP 46
22497: PPUSH
22498: LD_STRING D4-Bur-1
22500: PPUSH
22501: CALL_OW 88
// DialogueOff ;
22505: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
22509: LD_STRING M4
22511: PPUSH
22512: CALL_OW 337
// ComHold ( Scholtze ) ;
22516: LD_EXP 52
22520: PPUSH
22521: CALL_OW 140
// scholtzeSpawned = true ;
22525: LD_ADDR_EXP 6
22529: PUSH
22530: LD_INT 1
22532: ST_TO_ADDR
// end ;
22533: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and scholtzeSpawned and not scholtzeSaved do
22534: LD_INT 3
22536: PPUSH
22537: LD_EXP 52
22541: PPUSH
22542: CALL_OW 292
22546: PUSH
22547: LD_EXP 6
22551: AND
22552: PUSH
22553: LD_EXP 7
22557: NOT
22558: AND
22559: IFFALSE 22740
22561: GO 22563
22563: DISABLE
// begin scholtzeSaved = true ;
22564: LD_ADDR_EXP 7
22568: PUSH
22569: LD_INT 1
22571: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
22572: LD_EXP 52
22576: PPUSH
22577: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
22581: LD_EXP 52
22585: PPUSH
22586: LD_INT 3
22588: PPUSH
22589: CALL_OW 235
// DialogueOn ;
22593: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
22597: LD_EXP 52
22601: PPUSH
22602: LD_STRING D4a-Sch-1
22604: PPUSH
22605: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
22609: LD_EXP 46
22613: PPUSH
22614: LD_STRING D4a-Bur-1
22616: PPUSH
22617: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
22621: LD_EXP 52
22625: PPUSH
22626: LD_STRING D4a-Sch-2
22628: PPUSH
22629: CALL_OW 88
// DialogueOff ;
22633: CALL_OW 7
// ComMoveXY ( amPatrol , 28 , 36 ) ;
22637: LD_EXP 82
22641: PPUSH
22642: LD_INT 28
22644: PPUSH
22645: LD_INT 36
22647: PPUSH
22648: CALL_OW 111
// ChangeMissionObjectives ( MScholtzeOut ) ;
22652: LD_STRING MScholtzeOut
22654: PPUSH
22655: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
22659: LD_INT 49
22661: PPUSH
22662: LD_INT 3
22664: PPUSH
22665: LD_INT 1
22667: PPUSH
22668: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
22672: LD_INT 51
22674: PPUSH
22675: LD_INT 3
22677: PPUSH
22678: LD_INT 1
22680: PPUSH
22681: CALL_OW 322
// if GetTech ( 82 , 3 ) = state_disabled then
22685: LD_INT 82
22687: PPUSH
22688: LD_INT 3
22690: PPUSH
22691: CALL_OW 321
22695: PUSH
22696: LD_INT 0
22698: EQUAL
22699: IFFALSE 22714
// SetTech ( 82 , 3 , state_enabled ) ;
22701: LD_INT 82
22703: PPUSH
22704: LD_INT 3
22706: PPUSH
22707: LD_INT 1
22709: PPUSH
22710: CALL_OW 322
// SetTech ( 83 , 3 , state_enabled ) ;
22714: LD_INT 83
22716: PPUSH
22717: LD_INT 3
22719: PPUSH
22720: LD_INT 1
22722: PPUSH
22723: CALL_OW 322
// SetRestrict ( b_ext_noncombat , 3 , state_enabled ) ;
22727: LD_INT 19
22729: PPUSH
22730: LD_INT 3
22732: PPUSH
22733: LD_INT 1
22735: PPUSH
22736: CALL_OW 324
// end ;
22740: END
// every 2 2$30 trigger IsPlaced ( Scholtze ) and not scholtzeSaved do
22741: LD_EXP 52
22745: PPUSH
22746: CALL_OW 305
22750: PUSH
22751: LD_EXP 7
22755: NOT
22756: AND
22757: IFFALSE 22766
22759: GO 22761
22761: DISABLE
// PrepareAmericanPatrol ;
22762: CALL 6239 0 0
22766: END
// every 0 0$1 trigger IsPlaced ( Scholtze ) and GetSide ( Scholtze ) = 8 and animalsSafeTime > 0 0$01 do var ape , tiger ;
22767: LD_EXP 52
22771: PPUSH
22772: CALL_OW 305
22776: PUSH
22777: LD_EXP 52
22781: PPUSH
22782: CALL_OW 255
22786: PUSH
22787: LD_INT 8
22789: EQUAL
22790: AND
22791: PUSH
22792: LD_EXP 45
22796: PUSH
22797: LD_INT 35
22799: GREATER
22800: AND
22801: IFFALSE 22977
22803: GO 22805
22805: DISABLE
22806: LD_INT 0
22808: PPUSH
22809: PPUSH
// begin enable ;
22810: ENABLE
// animalsSafeTime = animalsSafeTime - 0 0$01 ;
22811: LD_ADDR_EXP 45
22815: PUSH
22816: LD_EXP 45
22820: PUSH
22821: LD_INT 35
22823: MINUS
22824: ST_TO_ADDR
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
22825: LD_ADDR_VAR 0 1
22829: PUSH
22830: LD_INT 22
22832: PUSH
22833: LD_INT 0
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 25
22842: PUSH
22843: LD_INT 12
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PPUSH
22854: CALL_OW 69
22858: PUSH
22859: FOR_IN
22860: IFFALSE 22899
// GetAwayFromXY ( ape , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
22862: LD_VAR 0 1
22866: PPUSH
22867: LD_EXP 52
22871: PPUSH
22872: CALL_OW 250
22876: PPUSH
22877: LD_EXP 52
22881: PPUSH
22882: CALL_OW 251
22886: PPUSH
22887: LD_INT 12
22889: PPUSH
22890: LD_INT 0
22892: PPUSH
22893: CALL 9982 0 5
22897: GO 22859
22899: POP
22900: POP
// for tiger in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_tiger ] ] ) do
22901: LD_ADDR_VAR 0 2
22905: PUSH
22906: LD_INT 22
22908: PUSH
22909: LD_INT 0
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 25
22918: PUSH
22919: LD_INT 14
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PPUSH
22930: CALL_OW 69
22934: PUSH
22935: FOR_IN
22936: IFFALSE 22975
// GetAwayFromXY ( tiger , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
22938: LD_VAR 0 2
22942: PPUSH
22943: LD_EXP 52
22947: PPUSH
22948: CALL_OW 250
22952: PPUSH
22953: LD_EXP 52
22957: PPUSH
22958: CALL_OW 251
22962: PPUSH
22963: LD_INT 12
22965: PPUSH
22966: LD_INT 0
22968: PPUSH
22969: CALL 9982 0 5
22973: GO 22935
22975: POP
22976: POP
// end ;
22977: PPOPN 2
22979: END
// every 0 0$1 trigger See ( 1 , Scholtze ) and amPatrol and not scholtzeSaved do
22980: LD_INT 1
22982: PPUSH
22983: LD_EXP 52
22987: PPUSH
22988: CALL_OW 292
22992: PUSH
22993: LD_EXP 82
22997: AND
22998: PUSH
22999: LD_EXP 7
23003: NOT
23004: AND
23005: IFFALSE 23159
23007: GO 23009
23009: DISABLE
// begin enable ;
23010: ENABLE
// if not IsPlaced ( Scholtze ) then
23011: LD_EXP 52
23015: PPUSH
23016: CALL_OW 305
23020: NOT
23021: IFFALSE 23025
// exit ;
23023: GO 23159
// if Attacks ( amPatrol [ 1 ] ) = Scholtze or Attacks ( amPatrol [ 2 ] ) = Scholtze then
23025: LD_EXP 82
23029: PUSH
23030: LD_INT 1
23032: ARRAY
23033: PPUSH
23034: CALL_OW 320
23038: PUSH
23039: LD_EXP 52
23043: EQUAL
23044: PUSH
23045: LD_EXP 82
23049: PUSH
23050: LD_INT 2
23052: ARRAY
23053: PPUSH
23054: CALL_OW 320
23058: PUSH
23059: LD_EXP 52
23063: EQUAL
23064: OR
23065: IFFALSE 23159
// begin DialogueOn ;
23067: CALL_OW 6
// Say ( Scholtze , D4b-Sch-1 ) ;
23071: LD_EXP 52
23075: PPUSH
23076: LD_STRING D4b-Sch-1
23078: PPUSH
23079: CALL_OW 88
// Say ( amPatrol [ 2 ] , D4b-Sol1-1 ) ;
23083: LD_EXP 82
23087: PUSH
23088: LD_INT 2
23090: ARRAY
23091: PPUSH
23092: LD_STRING D4b-Sol1-1
23094: PPUSH
23095: CALL_OW 88
// Say ( amPatrol [ 1 ] , D4b-Sol2-1 ) ;
23099: LD_EXP 82
23103: PUSH
23104: LD_INT 1
23106: ARRAY
23107: PPUSH
23108: LD_STRING D4b-Sol2-1
23110: PPUSH
23111: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
23115: LD_EXP 52
23119: PPUSH
23120: LD_STRING D4b-Sch-2
23122: PPUSH
23123: CALL_OW 88
// Say ( Burlak , D4b-Bur-2 ) ;
23127: LD_EXP 46
23131: PPUSH
23132: LD_STRING D4b-Bur-2
23134: PPUSH
23135: CALL_OW 88
// DialogueOff ;
23139: CALL_OW 7
// Killunit ( Scholtze ) ;
23143: LD_EXP 52
23147: PPUSH
23148: CALL_OW 66
// ChangeMissionObjectives ( MScholtzeDel ) ;
23152: LD_STRING MScholtzeDel
23154: PPUSH
23155: CALL_OW 337
// end ; end ;
23159: END
// export function Dial_UpgradeWorkshop ( building ) ; var maleSci , maleOthers ; begin
23160: LD_INT 0
23162: PPUSH
23163: PPUSH
23164: PPUSH
// dialog_workshop = true ;
23165: LD_ADDR_EXP 8
23169: PUSH
23170: LD_INT 1
23172: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
23173: LD_INT 22
23175: PUSH
23176: LD_INT 3
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 30
23185: PUSH
23186: LD_INT 26
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PPUSH
23197: CALL_OW 69
23201: NOT
23202: IFFALSE 23591
// begin CenterNowOnUnits ( building ) ;
23204: LD_VAR 0 1
23208: PPUSH
23209: CALL_OW 87
// DialogueOn ;
23213: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
23217: LD_EXP 46
23221: PPUSH
23222: LD_STRING D3aa-Bur-1
23224: PPUSH
23225: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
23229: LD_EXP 52
23233: PPUSH
23234: CALL_OW 302
23238: PUSH
23239: LD_EXP 52
23243: PPUSH
23244: CALL_OW 255
23248: PUSH
23249: LD_INT 3
23251: EQUAL
23252: AND
23253: IFFALSE 23269
// Say ( Scholtze , D3aa-Sch-1 ) else
23255: LD_EXP 52
23259: PPUSH
23260: LD_STRING D3aa-Sch-1
23262: PPUSH
23263: CALL_OW 88
23267: GO 23575
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
23269: LD_ADDR_VAR 0 3
23273: PUSH
23274: LD_INT 22
23276: PUSH
23277: LD_INT 3
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 21
23286: PUSH
23287: LD_INT 1
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 25
23296: PUSH
23297: LD_INT 4
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 26
23306: PUSH
23307: LD_INT 1
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 50
23316: PUSH
23317: EMPTY
23318: LIST
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: PPUSH
23327: CALL_OW 69
23331: PUSH
23332: LD_EXP 46
23336: PUSH
23337: LD_EXP 47
23341: PUSH
23342: LD_EXP 49
23346: PUSH
23347: LD_EXP 50
23351: PUSH
23352: LD_EXP 51
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: DIFF
23364: ST_TO_ADDR
// if maleSci then
23365: LD_VAR 0 3
23369: IFFALSE 23389
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
23371: LD_VAR 0 3
23375: PUSH
23376: LD_INT 1
23378: ARRAY
23379: PPUSH
23380: LD_STRING D3aa-Sci1-1
23382: PPUSH
23383: CALL_OW 88
23387: GO 23575
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
23389: LD_ADDR_VAR 0 4
23393: PUSH
23394: LD_INT 22
23396: PUSH
23397: LD_INT 3
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 21
23406: PUSH
23407: LD_INT 1
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 26
23416: PUSH
23417: LD_INT 1
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 50
23426: PUSH
23427: EMPTY
23428: LIST
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: PPUSH
23436: CALL_OW 69
23440: PUSH
23441: LD_EXP 46
23445: PUSH
23446: LD_EXP 47
23450: PUSH
23451: LD_EXP 49
23455: PUSH
23456: LD_EXP 50
23460: PUSH
23461: LD_EXP 51
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: DIFF
23473: ST_TO_ADDR
// if maleOthers then
23474: LD_VAR 0 4
23478: IFFALSE 23498
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) else
23480: LD_VAR 0 4
23484: PUSH
23485: LD_INT 1
23487: ARRAY
23488: PPUSH
23489: LD_STRING D3aa-Sci1-1
23491: PPUSH
23492: CALL_OW 88
23496: GO 23575
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
23498: LD_ADDR_VAR 0 4
23502: PUSH
23503: LD_INT 22
23505: PUSH
23506: LD_INT 3
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 21
23515: PUSH
23516: LD_INT 1
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 26
23525: PUSH
23526: LD_INT 1
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 50
23535: PUSH
23536: EMPTY
23537: LIST
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: PPUSH
23545: CALL_OW 69
23549: PUSH
23550: LD_EXP 46
23554: PUSH
23555: EMPTY
23556: LIST
23557: DIFF
23558: ST_TO_ADDR
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) ;
23559: LD_VAR 0 4
23563: PUSH
23564: LD_INT 1
23566: ARRAY
23567: PPUSH
23568: LD_STRING D3aa-Sci1-1
23570: PPUSH
23571: CALL_OW 88
// end ; end ; end ; Say ( Burlak , D3aa-Bur-2 ) ;
23575: LD_EXP 46
23579: PPUSH
23580: LD_STRING D3aa-Bur-2
23582: PPUSH
23583: CALL_OW 88
// DialogueOff ;
23587: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
23591: LD_STRING M3
23593: PPUSH
23594: CALL_OW 337
// end ;
23598: LD_VAR 0 2
23602: RET
// every 0 0$1 trigger not dialog_amSupportTroops do var amUnit , randomMale ;
23603: LD_EXP 9
23607: NOT
23608: IFFALSE 23946
23610: GO 23612
23612: DISABLE
23613: LD_INT 0
23615: PPUSH
23616: PPUSH
// begin enable ;
23617: ENABLE
// for amUnit in amSupportTroops do
23618: LD_ADDR_VAR 0 1
23622: PUSH
23623: LD_EXP 81
23627: PUSH
23628: FOR_IN
23629: IFFALSE 23944
// begin if See ( 3 , amUnit ) then
23631: LD_INT 3
23633: PPUSH
23634: LD_VAR 0 1
23638: PPUSH
23639: CALL_OW 292
23643: IFFALSE 23942
// begin dialog_amSupportTroops = true ;
23645: LD_ADDR_EXP 9
23649: PUSH
23650: LD_INT 1
23652: ST_TO_ADDR
// CenterNowOnUnits ( amUnit ) ;
23653: LD_VAR 0 1
23657: PPUSH
23658: CALL_OW 87
// DialogueOn ;
23662: CALL_OW 6
// randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
23666: LD_ADDR_VAR 0 2
23670: PUSH
23671: LD_INT 22
23673: PUSH
23674: LD_INT 3
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 21
23683: PUSH
23684: LD_INT 1
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PUSH
23691: LD_INT 26
23693: PUSH
23694: LD_INT 1
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 50
23703: PUSH
23704: EMPTY
23705: LIST
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: PPUSH
23713: CALL_OW 69
23717: PUSH
23718: LD_EXP 46
23722: PUSH
23723: LD_EXP 47
23727: PUSH
23728: LD_EXP 49
23732: PUSH
23733: LD_EXP 50
23737: PUSH
23738: LD_EXP 51
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: DIFF
23750: ST_TO_ADDR
// if randomMale then
23751: LD_VAR 0 2
23755: IFFALSE 23822
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) , D3b-RSol1-1 ,  , false , true ) else
23757: LD_INT 22
23759: PUSH
23760: LD_INT 3
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 21
23769: PUSH
23770: LD_INT 1
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PUSH
23777: LD_INT 26
23779: PUSH
23780: LD_INT 1
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 50
23789: PUSH
23790: EMPTY
23791: LIST
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: PPUSH
23799: CALL_OW 69
23803: PPUSH
23804: LD_STRING D3b-RSol1-1
23806: PPUSH
23807: LD_STRING 
23809: PPUSH
23810: LD_INT 0
23812: PPUSH
23813: LD_INT 1
23815: PPUSH
23816: CALL 6949 0 5
23820: GO 23899
// begin randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
23822: LD_ADDR_VAR 0 2
23826: PUSH
23827: LD_INT 22
23829: PUSH
23830: LD_INT 3
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 21
23839: PUSH
23840: LD_INT 1
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 26
23849: PUSH
23850: LD_INT 1
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: PUSH
23857: LD_INT 50
23859: PUSH
23860: EMPTY
23861: LIST
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: PPUSH
23869: CALL_OW 69
23873: PUSH
23874: LD_EXP 46
23878: PUSH
23879: EMPTY
23880: LIST
23881: DIFF
23882: ST_TO_ADDR
// Say ( randomMale [ 1 ] , D3b-RSol1-1 ) ;
23883: LD_VAR 0 2
23887: PUSH
23888: LD_INT 1
23890: ARRAY
23891: PPUSH
23892: LD_STRING D3b-RSol1-1
23894: PPUSH
23895: CALL_OW 88
// end ; if IsOK ( Gnyevko ) then
23899: LD_EXP 47
23903: PPUSH
23904: CALL_OW 302
23908: IFFALSE 23922
// Say ( Gnyevko , D3b-Gny-1 ) ;
23910: LD_EXP 47
23914: PPUSH
23915: LD_STRING D3b-Gny-1
23917: PPUSH
23918: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
23922: LD_EXP 46
23926: PPUSH
23927: LD_STRING D3b-Bur-1
23929: PPUSH
23930: CALL_OW 88
// DialogueOff ;
23934: CALL_OW 7
// exit ;
23938: POP
23939: POP
23940: GO 23946
// end ; end ;
23942: GO 23628
23944: POP
23945: POP
// end ;
23946: PPOPN 2
23948: END
// every 2 2$0 trigger dialog_amSupportTroops do
23949: LD_EXP 9
23953: IFFALSE 24037
23955: GO 23957
23957: DISABLE
// begin if IsOK ( Kovalyuk ) then
23958: LD_EXP 49
23962: PPUSH
23963: CALL_OW 302
23967: IFFALSE 23981
// Say ( Kovalyuk , D3b-Kov-1 ) ;
23969: LD_EXP 49
23973: PPUSH
23974: LD_STRING D3b-Kov-1
23976: PPUSH
23977: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D3b-RSol1-2 ,  , false , false ) ;
23981: LD_INT 22
23983: PUSH
23984: LD_INT 3
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 21
23993: PUSH
23994: LD_INT 1
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 26
24003: PUSH
24004: LD_INT 1
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: LIST
24015: PPUSH
24016: CALL_OW 69
24020: PPUSH
24021: LD_STRING D3b-RSol1-2
24023: PPUSH
24024: LD_STRING 
24026: PPUSH
24027: LD_INT 0
24029: PPUSH
24030: LD_INT 0
24032: PPUSH
24033: CALL 6949 0 5
// end ;
24037: END
// every 0 0$1 trigger timeToPrepareAttack < 0 0$01 do
24038: LD_EXP 38
24042: PUSH
24043: LD_INT 35
24045: LESS
24046: IFFALSE 24274
24048: GO 24050
24050: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
24051: LD_EXP 58
24055: PPUSH
24056: CALL_OW 87
// InGameOn ;
24060: CALL_OW 8
// DialogueOn ;
24064: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
24068: LD_EXP 58
24072: PPUSH
24073: LD_STRING D5-Kur-1
24075: PPUSH
24076: CALL_OW 94
// case Query ( QVehicles ) of 1 :
24080: LD_STRING QVehicles
24082: PPUSH
24083: CALL_OW 97
24087: PUSH
24088: LD_INT 1
24090: DOUBLE
24091: EQUAL
24092: IFTRUE 24096
24094: GO 24139
24096: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
24097: LD_EXP 46
24101: PPUSH
24102: LD_STRING D6a-Bur-1
24104: PPUSH
24105: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
24109: LD_EXP 58
24113: PPUSH
24114: LD_STRING D6a-Kur-1
24116: PPUSH
24117: CALL_OW 94
// meetNearOmicronBase = true ;
24121: LD_ADDR_EXP 19
24125: PUSH
24126: LD_INT 1
24128: ST_TO_ADDR
// kurinCheckVehicles = true ;
24129: LD_ADDR_EXP 18
24133: PUSH
24134: LD_INT 1
24136: ST_TO_ADDR
// end ; 2 :
24137: GO 24266
24139: LD_INT 2
24141: DOUBLE
24142: EQUAL
24143: IFTRUE 24147
24145: GO 24194
24147: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
24148: LD_EXP 46
24152: PPUSH
24153: LD_STRING D6b-Bur-1
24155: PPUSH
24156: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
24160: LD_EXP 58
24164: PPUSH
24165: LD_STRING D6b-Kur-1
24167: PPUSH
24168: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
24172: LD_EXP 46
24176: PPUSH
24177: LD_STRING D6b-Bur-2
24179: PPUSH
24180: CALL_OW 88
// meetNearOmicronBase = true ;
24184: LD_ADDR_EXP 19
24188: PUSH
24189: LD_INT 1
24191: ST_TO_ADDR
// end ; 3 :
24192: GO 24266
24194: LD_INT 3
24196: DOUBLE
24197: EQUAL
24198: IFTRUE 24202
24200: GO 24265
24202: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
24203: LD_EXP 46
24207: PPUSH
24208: LD_STRING D6c-Bur-1
24210: PPUSH
24211: CALL_OW 88
// Say ( Kurin , D6c-Kur-1 ) ;
24215: LD_EXP 58
24219: PPUSH
24220: LD_STRING D6c-Kur-1
24222: PPUSH
24223: CALL_OW 88
// Say ( Burlak , D6c-Bur-2 ) ;
24227: LD_EXP 46
24231: PPUSH
24232: LD_STRING D6c-Bur-2
24234: PPUSH
24235: CALL_OW 88
// kurinGiveMoreTime = true ;
24239: LD_ADDR_EXP 13
24243: PUSH
24244: LD_INT 1
24246: ST_TO_ADDR
// kurinOpinion = 0 ;
24247: LD_ADDR_EXP 26
24251: PUSH
24252: LD_INT 0
24254: ST_TO_ADDR
// counterIndex = 4 ;
24255: LD_ADDR_EXP 87
24259: PUSH
24260: LD_INT 4
24262: ST_TO_ADDR
// end ; end ;
24263: GO 24266
24265: POP
// InGameOff ;
24266: CALL_OW 9
// DialogueOff ;
24270: CALL_OW 7
// end ;
24274: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
24275: LD_EXP 14
24279: PUSH
24280: LD_INT 35
24282: LESS
24283: PUSH
24284: LD_EXP 13
24288: AND
24289: IFFALSE 24322
24291: GO 24293
24293: DISABLE
// begin DialogueOn ;
24294: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
24298: LD_EXP 58
24302: PPUSH
24303: LD_STRING D6c-Kur-2
24305: PPUSH
24306: CALL_OW 94
// DialogueOff ;
24310: CALL_OW 7
// meetNearOmicronBase = true ;
24314: LD_ADDR_EXP 19
24318: PUSH
24319: LD_INT 1
24321: ST_TO_ADDR
// end ;
24322: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs ;
24323: LD_EXP 19
24327: IFFALSE 24982
24329: GO 24331
24331: DISABLE
24332: LD_INT 0
24334: PPUSH
24335: PPUSH
24336: PPUSH
24337: PPUSH
24338: PPUSH
// begin mechs = [ ] ;
24339: LD_ADDR_VAR 0 3
24343: PUSH
24344: EMPTY
24345: ST_TO_ADDR
// vehs = [ ] ;
24346: LD_ADDR_VAR 0 4
24350: PUSH
24351: EMPTY
24352: ST_TO_ADDR
// haveVehs = 0 ;
24353: LD_ADDR_VAR 0 5
24357: PUSH
24358: LD_INT 0
24360: ST_TO_ADDR
// uc_side = 6 ;
24361: LD_ADDR_OWVAR 20
24365: PUSH
24366: LD_INT 6
24368: ST_TO_ADDR
// uc_nation = 3 ;
24369: LD_ADDR_OWVAR 21
24373: PUSH
24374: LD_INT 3
24376: ST_TO_ADDR
// for i := 1 to 2 do
24377: LD_ADDR_VAR 0 1
24381: PUSH
24382: DOUBLE
24383: LD_INT 1
24385: DEC
24386: ST_TO_ADDR
24387: LD_INT 2
24389: PUSH
24390: FOR_TO
24391: IFFALSE 24490
// begin PrepareMechanic ( false , 2 ) ;
24393: LD_INT 0
24395: PPUSH
24396: LD_INT 2
24398: PPUSH
24399: CALL_OW 383
// mech = CreateHuman ;
24403: LD_ADDR_VAR 0 2
24407: PUSH
24408: CALL_OW 44
24412: ST_TO_ADDR
// mechs = mechs ^ mech ;
24413: LD_ADDR_VAR 0 3
24417: PUSH
24418: LD_VAR 0 3
24422: PUSH
24423: LD_VAR 0 2
24427: ADD
24428: ST_TO_ADDR
// PlaceHumanInUnit ( mech , kirovDepot ) ;
24429: LD_VAR 0 2
24433: PPUSH
24434: LD_EXP 64
24438: PPUSH
24439: CALL_OW 52
// ComExitBuilding ( mech ) ;
24443: LD_VAR 0 2
24447: PPUSH
24448: CALL_OW 122
// wait ( 0 0$1 ) ;
24452: LD_INT 35
24454: PPUSH
24455: CALL_OW 67
// AddComMoveXY ( mech , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
24459: LD_VAR 0 2
24463: PPUSH
24464: LD_EXP 57
24468: PPUSH
24469: CALL_OW 250
24473: PPUSH
24474: LD_EXP 57
24478: PPUSH
24479: CALL_OW 251
24483: PPUSH
24484: CALL_OW 171
// end ;
24488: GO 24390
24490: POP
24491: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] ] ) = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) then
24492: LD_INT 22
24494: PUSH
24495: LD_INT 3
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 21
24504: PUSH
24505: LD_INT 2
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 23
24514: PUSH
24515: LD_INT 3
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: LIST
24526: PPUSH
24527: CALL_OW 69
24531: PUSH
24532: LD_INT 22
24534: PUSH
24535: LD_INT 3
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 21
24544: PUSH
24545: LD_INT 1
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PPUSH
24556: CALL_OW 69
24560: EQUAL
24561: IFFALSE 24571
// produceOnlyForYou = true ;
24563: LD_ADDR_EXP 17
24567: PUSH
24568: LD_INT 1
24570: ST_TO_ADDR
// wait ( 0 0$20 ) ;
24571: LD_INT 700
24573: PPUSH
24574: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + 2 then
24578: LD_INT 22
24580: PUSH
24581: LD_INT 3
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 21
24590: PUSH
24591: LD_INT 2
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 23
24600: PUSH
24601: LD_INT 3
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 3
24610: PUSH
24611: LD_INT 34
24613: PUSH
24614: LD_INT 51
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: PPUSH
24631: CALL_OW 69
24635: PUSH
24636: LD_INT 22
24638: PUSH
24639: LD_INT 3
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 21
24648: PUSH
24649: LD_INT 1
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PPUSH
24660: CALL_OW 69
24664: PUSH
24665: LD_INT 2
24667: PLUS
24668: GREATEREQUAL
24669: IFFALSE 24952
// begin vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 1 ] ;
24671: LD_ADDR_VAR 0 4
24675: PUSH
24676: LD_VAR 0 4
24680: PUSH
24681: LD_INT 22
24683: PUSH
24684: LD_INT 3
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 21
24693: PUSH
24694: LD_INT 2
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 23
24703: PUSH
24704: LD_INT 3
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 3
24713: PUSH
24714: LD_INT 34
24716: PUSH
24717: LD_INT 51
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 3
24730: PUSH
24731: LD_INT 59
24733: PUSH
24734: EMPTY
24735: LIST
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: PPUSH
24748: CALL_OW 69
24752: PUSH
24753: LD_INT 1
24755: ARRAY
24756: ADD
24757: ST_TO_ADDR
// vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 2 ] ;
24758: LD_ADDR_VAR 0 4
24762: PUSH
24763: LD_VAR 0 4
24767: PUSH
24768: LD_INT 22
24770: PUSH
24771: LD_INT 3
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 21
24780: PUSH
24781: LD_INT 2
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 23
24790: PUSH
24791: LD_INT 3
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 3
24800: PUSH
24801: LD_INT 34
24803: PUSH
24804: LD_INT 51
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 3
24817: PUSH
24818: LD_INT 59
24820: PUSH
24821: EMPTY
24822: LIST
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: PPUSH
24835: CALL_OW 69
24839: PUSH
24840: LD_INT 2
24842: ARRAY
24843: ADD
24844: ST_TO_ADDR
// kirovAttackVehicles = kirovAttackVehicles ^ vehs ;
24845: LD_ADDR_EXP 73
24849: PUSH
24850: LD_EXP 73
24854: PUSH
24855: LD_VAR 0 4
24859: ADD
24860: ST_TO_ADDR
// SetSide ( vehs , 6 ) ;
24861: LD_VAR 0 4
24865: PPUSH
24866: LD_INT 6
24868: PPUSH
24869: CALL_OW 235
// produceMoreVehicles = true ;
24873: LD_ADDR_EXP 16
24877: PUSH
24878: LD_INT 1
24880: ST_TO_ADDR
// ComEnterUnit ( mechs [ 1 ] , vehs [ 1 ] ) ;
24881: LD_VAR 0 3
24885: PUSH
24886: LD_INT 1
24888: ARRAY
24889: PPUSH
24890: LD_VAR 0 4
24894: PUSH
24895: LD_INT 1
24897: ARRAY
24898: PPUSH
24899: CALL_OW 120
// ComEnterUnit ( mechs [ 2 ] , vehs [ 2 ] ) ;
24903: LD_VAR 0 3
24907: PUSH
24908: LD_INT 2
24910: ARRAY
24911: PPUSH
24912: LD_VAR 0 4
24916: PUSH
24917: LD_INT 2
24919: ARRAY
24920: PPUSH
24921: CALL_OW 120
// if kurinCheckVehicles and not kurinOpinion = 0 then
24925: LD_EXP 18
24929: PUSH
24930: LD_EXP 26
24934: PUSH
24935: LD_INT 0
24937: EQUAL
24938: NOT
24939: AND
24940: IFFALSE 24950
// kurinOpinion = 1 ;
24942: LD_ADDR_EXP 26
24946: PUSH
24947: LD_INT 1
24949: ST_TO_ADDR
// end else
24950: GO 24982
// begin if kurinCheckVehicles then
24952: LD_EXP 18
24956: IFFALSE 24982
// begin DialogueOn ;
24958: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
24962: LD_EXP 58
24966: PPUSH
24967: LD_STRING D6d-Kur-1
24969: PPUSH
24970: CALL_OW 94
// DialogueOff ;
24974: CALL_OW 7
// Lose_Vehicles ;
24978: CALL 19030 0 0
// end ; end ; end ;
24982: PPOPN 5
24984: END
// every 0 0$1 trigger meetNearOmicronBase do
24985: LD_EXP 19
24989: IFFALSE 25209
24991: GO 24993
24993: DISABLE
// begin spawnCrates = false ;
24994: LD_ADDR_EXP 5
24998: PUSH
24999: LD_INT 0
25001: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
25002: LD_INT 6
25004: PPUSH
25005: LD_INT 1
25007: PPUSH
25008: LD_INT 2
25010: PPUSH
25011: LD_INT 1
25013: PPUSH
25014: CALL_OW 80
// SetRestrict ( b_depot , 3 , false ) ;
25018: LD_INT 0
25020: PPUSH
25021: LD_INT 3
25023: PPUSH
25024: LD_INT 0
25026: PPUSH
25027: CALL_OW 324
// ChangeMissionObjectives ( M3a ) ;
25031: LD_STRING M3a
25033: PPUSH
25034: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
25038: LD_STRING M5
25040: PPUSH
25041: CALL_OW 337
// SetAreaMapShow ( MeetArea , 1 ) ;
25045: LD_INT 15
25047: PPUSH
25048: LD_INT 1
25050: PPUSH
25051: CALL_OW 424
// ComMoveXY ( kirovAttackVehicles , 75 , 38 ) ;
25055: LD_EXP 73
25059: PPUSH
25060: LD_INT 75
25062: PPUSH
25063: LD_INT 38
25065: PPUSH
25066: CALL_OW 111
// ComMoveXY ( kirovAttackCargo , 75 , 38 ) ;
25070: LD_EXP 72
25074: PPUSH
25075: LD_INT 75
25077: PPUSH
25078: LD_INT 38
25080: PPUSH
25081: CALL_OW 111
// counterIndex = 2 ;
25085: LD_ADDR_EXP 87
25089: PUSH
25090: LD_INT 2
25092: ST_TO_ADDR
// if not kurinOpinion = 0 then
25093: LD_EXP 26
25097: PUSH
25098: LD_INT 0
25100: EQUAL
25101: NOT
25102: IFFALSE 25112
// kurinOpinion = 1 ;
25104: LD_ADDR_EXP 26
25108: PUSH
25109: LD_INT 1
25111: ST_TO_ADDR
// InitAIManager ( 1 , 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , OmicronBaseArea , OmicronHealArea , OmicronParkingArea , OmicronDefenceArea , [ 2 , 3 , 4 ] [ Difficulty ] , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , false ) ;
25112: LD_INT 1
25114: PPUSH
25115: LD_INT 1
25117: PPUSH
25118: LD_INT 22
25120: PUSH
25121: LD_INT 1
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 21
25130: PUSH
25131: LD_INT 1
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PPUSH
25142: CALL_OW 69
25146: PPUSH
25147: LD_INT 13
25149: PPUSH
25150: LD_INT 28
25152: PPUSH
25153: LD_INT 17
25155: PPUSH
25156: LD_INT 29
25158: PPUSH
25159: LD_INT 2
25161: PUSH
25162: LD_INT 3
25164: PUSH
25165: LD_INT 4
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: LIST
25172: PUSH
25173: LD_OWVAR 67
25177: ARRAY
25178: PPUSH
25179: LD_INT 2
25181: PUSH
25182: LD_INT 3
25184: PUSH
25185: LD_INT 4
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: LIST
25192: PUSH
25193: LD_OWVAR 67
25197: ARRAY
25198: PPUSH
25199: LD_INT 0
25201: PPUSH
25202: LD_INT 0
25204: PPUSH
25205: CALL 11862 0 11
// end ;
25209: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 2 do
25210: LD_EXP 15
25214: PUSH
25215: LD_INT 35
25217: LESS
25218: PUSH
25219: LD_EXP 87
25223: PUSH
25224: LD_INT 2
25226: EQUAL
25227: AND
25228: IFFALSE 25277
25230: GO 25232
25232: DISABLE
// begin DialogueOn ;
25233: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
25237: LD_EXP 58
25241: PPUSH
25242: LD_STRING D7a-Kur-1
25244: PPUSH
25245: CALL_OW 94
// DialogueOff ;
25249: CALL_OW 7
// counterIndex = 3 ;
25253: LD_ADDR_EXP 87
25257: PUSH
25258: LD_INT 3
25260: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
25261: LD_ADDR_EXP 15
25265: PUSH
25266: LD_INT 4200
25268: ST_TO_ADDR
// kurinOpinion = 0 ;
25269: LD_ADDR_EXP 26
25273: PUSH
25274: LD_INT 0
25276: ST_TO_ADDR
// end ;
25277: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 3 do
25278: LD_EXP 15
25282: PUSH
25283: LD_INT 35
25285: LESS
25286: PUSH
25287: LD_EXP 87
25291: PUSH
25292: LD_INT 3
25294: EQUAL
25295: AND
25296: IFFALSE 25305
25298: GO 25300
25300: DISABLE
// Lose_Delay ;
25301: CALL 19060 0 0
25305: END
// every 0 0$1 trigger meetNearOmicronBase and FilterUnitsExceptArea ( MeetArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25306: LD_EXP 19
25310: PUSH
25311: LD_INT 15
25313: PPUSH
25314: LD_INT 22
25316: PUSH
25317: LD_INT 3
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 21
25326: PUSH
25327: LD_INT 1
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PPUSH
25338: CALL_OW 71
25342: PUSH
25343: LD_INT 0
25345: EQUAL
25346: AND
25347: IFFALSE 25435
25349: GO 25351
25351: DISABLE
// begin counterEnable = false ;
25352: LD_ADDR_EXP 86
25356: PUSH
25357: LD_INT 0
25359: ST_TO_ADDR
// Display_strings = [ ] ;
25360: LD_ADDR_OWVAR 47
25364: PUSH
25365: EMPTY
25366: ST_TO_ADDR
// SetAreaMapShow ( MeetArea , 0 ) ;
25367: LD_INT 15
25369: PPUSH
25370: LD_INT 0
25372: PPUSH
25373: CALL_OW 424
// canExitBattlefield = false ;
25377: LD_ADDR_EXP 24
25381: PUSH
25382: LD_INT 0
25384: ST_TO_ADDR
// DialogueOn ;
25385: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
25389: LD_EXP 46
25393: PPUSH
25394: LD_STRING D7-Bur-1
25396: PPUSH
25397: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
25401: LD_EXP 58
25405: PPUSH
25406: LD_STRING D7-Kur-1
25408: PPUSH
25409: CALL_OW 94
// DialogueOff ;
25413: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
25417: LD_STRING M5a
25419: PPUSH
25420: CALL_OW 337
// Query ( QRefuel ) ;
25424: LD_STRING QRefuel
25426: PPUSH
25427: CALL_OW 97
// KirovAttackOmicron ;
25431: CALL 17609 0 0
// end ;
25435: END
// every 1 trigger not canExitBattlefield do var unit ;
25436: LD_EXP 24
25440: NOT
25441: IFFALSE 25609
25443: GO 25445
25445: DISABLE
25446: LD_INT 0
25448: PPUSH
// begin enable ;
25449: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
25450: LD_ADDR_VAR 0 1
25454: PUSH
25455: LD_INT 22
25457: PUSH
25458: LD_INT 3
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 2
25467: PUSH
25468: LD_INT 21
25470: PUSH
25471: LD_INT 1
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 21
25480: PUSH
25481: LD_INT 2
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: LIST
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PPUSH
25497: CALL_OW 69
25501: PUSH
25502: FOR_IN
25503: IFFALSE 25607
// if not IsInArea ( unit , OmicronBattlefieldArea ) and UnitFilter ( unit , [ [ f_occupied ] , [ f_type , unit_vehicle ] ] ) then
25505: LD_VAR 0 1
25509: PPUSH
25510: LD_INT 26
25512: PPUSH
25513: CALL_OW 308
25517: NOT
25518: PUSH
25519: LD_VAR 0 1
25523: PPUSH
25524: LD_INT 59
25526: PUSH
25527: EMPTY
25528: LIST
25529: PUSH
25530: LD_INT 21
25532: PUSH
25533: LD_INT 2
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PPUSH
25544: CALL_OW 72
25548: AND
25549: IFFALSE 25605
// begin ComMoveToArea ( unit , OmicronBattlefieldArea ) ;
25551: LD_VAR 0 1
25555: PPUSH
25556: LD_INT 26
25558: PPUSH
25559: CALL_OW 113
// if not dialog_stop then
25563: LD_EXP 11
25567: NOT
25568: IFFALSE 25605
// begin dialog_stop = true ;
25570: LD_ADDR_EXP 11
25574: PUSH
25575: LD_INT 1
25577: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
25578: LD_EXP 58
25582: PPUSH
25583: LD_STRING D12-Kur-1
25585: PPUSH
25586: CALL_OW 88
// wait ( 0 0$5 ) ;
25590: LD_INT 175
25592: PPUSH
25593: CALL_OW 67
// dialog_stop = false ;
25597: LD_ADDR_EXP 11
25601: PUSH
25602: LD_INT 0
25604: ST_TO_ADDR
// end ; end ;
25605: GO 25502
25607: POP
25608: POP
// end ;
25609: PPOPN 1
25611: END
// every 1 do var unit ;
25612: GO 25614
25614: DISABLE
25615: LD_INT 0
25617: PPUSH
// begin enable ;
25618: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
25619: LD_ADDR_VAR 0 1
25623: PUSH
25624: LD_INT 22
25626: PUSH
25627: LD_INT 3
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 2
25636: PUSH
25637: LD_INT 21
25639: PUSH
25640: LD_INT 1
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 21
25649: PUSH
25650: LD_INT 2
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: LIST
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PPUSH
25666: CALL_OW 69
25670: PUSH
25671: FOR_IN
25672: IFFALSE 25747
// if IsInArea ( unit , SecondKurinBase ) then
25674: LD_VAR 0 1
25678: PPUSH
25679: LD_INT 20
25681: PPUSH
25682: CALL_OW 308
25686: IFFALSE 25745
// begin ComMoveXY ( unit , 200 , 114 ) ;
25688: LD_VAR 0 1
25692: PPUSH
25693: LD_INT 200
25695: PPUSH
25696: LD_INT 114
25698: PPUSH
25699: CALL_OW 111
// if not dialog_stop then
25703: LD_EXP 11
25707: NOT
25708: IFFALSE 25745
// begin dialog_stop = true ;
25710: LD_ADDR_EXP 11
25714: PUSH
25715: LD_INT 1
25717: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
25718: LD_EXP 58
25722: PPUSH
25723: LD_STRING D12-Kur-1
25725: PPUSH
25726: CALL_OW 88
// wait ( 0 0$5 ) ;
25730: LD_INT 175
25732: PPUSH
25733: CALL_OW 67
// dialog_stop = false ;
25737: LD_ADDR_EXP 11
25741: PUSH
25742: LD_INT 0
25744: ST_TO_ADDR
// end ; end ;
25745: GO 25671
25747: POP
25748: POP
// end ;
25749: PPOPN 1
25751: END
// every 1 trigger not meetNearOmicronBase and IsOK ( Sikorski ) do var unit , randDialog ;
25752: LD_EXP 19
25756: NOT
25757: PUSH
25758: LD_INT 290
25760: PPUSH
25761: CALL_OW 302
25765: AND
25766: IFFALSE 26082
25768: GO 25770
25770: DISABLE
25771: LD_INT 0
25773: PPUSH
25774: PPUSH
// begin enable ;
25775: ENABLE
// for unit in FilterUnitsInArea ( OmicronBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
25776: LD_ADDR_VAR 0 1
25780: PUSH
25781: LD_INT 13
25783: PPUSH
25784: LD_INT 22
25786: PUSH
25787: LD_INT 1
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 2
25796: PUSH
25797: LD_INT 21
25799: PUSH
25800: LD_INT 1
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 21
25809: PUSH
25810: LD_INT 2
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 21
25819: PUSH
25820: LD_INT 3
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PPUSH
25837: CALL_OW 70
25841: PUSH
25842: FOR_IN
25843: IFFALSE 26080
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
25845: LD_VAR 0 1
25849: PPUSH
25850: LD_INT 22
25852: PUSH
25853: LD_INT 3
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 2
25862: PUSH
25863: LD_INT 21
25865: PUSH
25866: LD_INT 1
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 21
25875: PUSH
25876: LD_INT 2
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: LIST
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PPUSH
25892: CALL_OW 69
25896: PPUSH
25897: LD_VAR 0 1
25901: PPUSH
25902: CALL_OW 74
25906: PPUSH
25907: CALL_OW 296
25911: PUSH
25912: LD_INT 17
25914: LESS
25915: IFFALSE 26078
// begin ComMoveXY ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) , 69 , 85 ) ;
25917: LD_INT 22
25919: PUSH
25920: LD_INT 3
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: LD_INT 2
25929: PUSH
25930: LD_INT 21
25932: PUSH
25933: LD_INT 1
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 21
25942: PUSH
25943: LD_INT 2
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: LIST
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PPUSH
25959: CALL_OW 69
25963: PPUSH
25964: LD_VAR 0 1
25968: PPUSH
25969: CALL_OW 74
25973: PPUSH
25974: LD_INT 69
25976: PPUSH
25977: LD_INT 85
25979: PPUSH
25980: CALL_OW 111
// randDialog = rand ( 1 , 2 ) ;
25984: LD_ADDR_VAR 0 2
25988: PUSH
25989: LD_INT 1
25991: PPUSH
25992: LD_INT 2
25994: PPUSH
25995: CALL_OW 12
25999: ST_TO_ADDR
// if not dialog_stop then
26000: LD_EXP 11
26004: NOT
26005: IFFALSE 26078
// begin dialog_stop = true ;
26007: LD_ADDR_EXP 11
26011: PUSH
26012: LD_INT 1
26014: ST_TO_ADDR
// if randDialog = 1 or not IsOK ( Gnyevko ) then
26015: LD_VAR 0 2
26019: PUSH
26020: LD_INT 1
26022: EQUAL
26023: PUSH
26024: LD_EXP 47
26028: PPUSH
26029: CALL_OW 302
26033: NOT
26034: OR
26035: IFFALSE 26051
// SayRadio ( Kurin , D11-Kur-1 ) else
26037: LD_EXP 58
26041: PPUSH
26042: LD_STRING D11-Kur-1
26044: PPUSH
26045: CALL_OW 94
26049: GO 26063
// Say ( Gnyevko , D11-Gny-1 ) ;
26051: LD_EXP 47
26055: PPUSH
26056: LD_STRING D11-Gny-1
26058: PPUSH
26059: CALL_OW 88
// wait ( 0 0$5 ) ;
26063: LD_INT 175
26065: PPUSH
26066: CALL_OW 67
// dialog_stop = false ;
26070: LD_ADDR_EXP 11
26074: PUSH
26075: LD_INT 0
26077: ST_TO_ADDR
// end ; end ;
26078: GO 25842
26080: POP
26081: POP
// end ;
26082: PPOPN 2
26084: END
// every 0 0$1 trigger IsDead ( Sikorski ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 5 do var tmpUs , tmpRu , building ;
26085: LD_INT 290
26087: PPUSH
26088: CALL_OW 301
26092: PUSH
26093: LD_INT 22
26095: PUSH
26096: LD_INT 1
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 21
26105: PUSH
26106: LD_INT 1
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PPUSH
26117: CALL_OW 69
26121: PUSH
26122: LD_INT 5
26124: LESS
26125: AND
26126: IFFALSE 27536
26128: GO 26130
26130: DISABLE
26131: LD_INT 0
26133: PPUSH
26134: PPUSH
26135: PPUSH
// begin omicronSurrender = true ;
26136: LD_ADDR_EXP 23
26140: PUSH
26141: LD_INT 1
26143: ST_TO_ADDR
// canExitBattlefield = true ;
26144: LD_ADDR_EXP 24
26148: PUSH
26149: LD_INT 1
26151: ST_TO_ADDR
// enableOmicronAI = false ;
26152: LD_ADDR_EXP 29
26156: PUSH
26157: LD_INT 0
26159: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , false ) ;
26160: LD_INT 1
26162: PPUSH
26163: LD_INT 3
26165: PPUSH
26166: LD_INT 1
26168: PPUSH
26169: LD_INT 0
26171: PPUSH
26172: CALL_OW 80
// SetAttitude ( 2 , 3 , att_friend , true ) ;
26176: LD_INT 2
26178: PPUSH
26179: LD_INT 3
26181: PPUSH
26182: LD_INT 1
26184: PPUSH
26185: LD_INT 1
26187: PPUSH
26188: CALL_OW 80
// CenterNowOnUnits ( Burlak ) ;
26192: LD_EXP 46
26196: PPUSH
26197: CALL_OW 87
// uc_side = 1 ;
26201: LD_ADDR_OWVAR 20
26205: PUSH
26206: LD_INT 1
26208: ST_TO_ADDR
// uc_nation = 1 ;
26209: LD_ADDR_OWVAR 21
26213: PUSH
26214: LD_INT 1
26216: ST_TO_ADDR
// hc_name :=  ;
26217: LD_ADDR_OWVAR 26
26221: PUSH
26222: LD_STRING 
26224: ST_TO_ADDR
// hc_gallery =  ;
26225: LD_ADDR_OWVAR 33
26229: PUSH
26230: LD_STRING 
26232: ST_TO_ADDR
// PrepareSoldier ( sex_male , 1 ) ;
26233: LD_INT 1
26235: PPUSH
26236: LD_INT 1
26238: PPUSH
26239: CALL_OW 381
// tmpUs = CreateHuman ;
26243: LD_ADDR_VAR 0 1
26247: PUSH
26248: CALL_OW 44
26252: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ f_side , 3 ] ) ) ;
26253: LD_INT 22
26255: PUSH
26256: LD_INT 3
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PPUSH
26263: CALL_OW 69
26267: PPUSH
26268: CALL_OW 141
// InGameOn ;
26272: CALL_OW 8
// DialogueOn ;
26276: CALL_OW 6
// CenterOnXY ( 26 , 33 ) ;
26280: LD_INT 26
26282: PPUSH
26283: LD_INT 33
26285: PPUSH
26286: CALL_OW 84
// SayRadio ( tmpUs , D8-Sol1-1 ) ;
26290: LD_VAR 0 1
26294: PPUSH
26295: LD_STRING D8-Sol1-1
26297: PPUSH
26298: CALL_OW 94
// if IsOk ( Kovalyuk ) then
26302: LD_EXP 49
26306: PPUSH
26307: CALL_OW 302
26311: IFFALSE 26325
// Say ( Kovalyuk , D8-Kov-1 ) ;
26313: LD_EXP 49
26317: PPUSH
26318: LD_STRING D8-Kov-1
26320: PPUSH
26321: CALL_OW 88
// tmpRu = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false , false ) ;
26325: LD_ADDR_VAR 0 2
26329: PUSH
26330: LD_INT 22
26332: PUSH
26333: LD_INT 3
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 21
26342: PUSH
26343: LD_INT 1
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 26
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: LIST
26364: PPUSH
26365: CALL_OW 69
26369: PPUSH
26370: LD_STRING D8-RSol1-1
26372: PPUSH
26373: LD_STRING 
26375: PPUSH
26376: LD_INT 0
26378: PPUSH
26379: LD_INT 0
26381: PPUSH
26382: CALL 6949 0 5
26386: ST_TO_ADDR
// if IsOk ( Gnyevko ) then
26387: LD_EXP 47
26391: PPUSH
26392: CALL_OW 302
26396: IFFALSE 26410
// Say ( Gnyevko , D8-Gny-1 ) ;
26398: LD_EXP 47
26402: PPUSH
26403: LD_STRING D8-Gny-1
26405: PPUSH
26406: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff tmpRu , D8-RSol2-1 ,  , false , false ) ;
26410: LD_INT 22
26412: PUSH
26413: LD_INT 3
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 21
26422: PUSH
26423: LD_INT 1
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 26
26432: PUSH
26433: LD_INT 1
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: LIST
26444: PPUSH
26445: CALL_OW 69
26449: PUSH
26450: LD_VAR 0 2
26454: DIFF
26455: PPUSH
26456: LD_STRING D8-RSol2-1
26458: PPUSH
26459: LD_STRING 
26461: PPUSH
26462: LD_INT 0
26464: PPUSH
26465: LD_INT 0
26467: PPUSH
26468: CALL 6949 0 5
// DialogueOff ;
26472: CALL_OW 7
// PrepareArabian ;
26476: CALL 6397 0 0
// CenterNowOnXY ( 234 , 122 ) ;
26480: LD_INT 234
26482: PPUSH
26483: LD_INT 122
26485: PPUSH
26486: CALL_OW 86
// ComAgressiveMove ( northGroup , 221 , 110 ) ;
26490: LD_EXP 84
26494: PPUSH
26495: LD_INT 221
26497: PPUSH
26498: LD_INT 110
26500: PPUSH
26501: CALL_OW 114
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
26505: LD_EXP 85
26509: PPUSH
26510: LD_INT 21
26512: PUSH
26513: LD_INT 1
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PPUSH
26520: CALL_OW 72
26524: PPUSH
26525: LD_INT 221
26527: PPUSH
26528: LD_INT 110
26530: PPUSH
26531: CALL_OW 114
// wait ( 0 0$7 ) ;
26535: LD_INT 245
26537: PPUSH
26538: CALL_OW 67
// AddComAgressiveMove ( southGroup , 221 , 110 ) ;
26542: LD_EXP 85
26546: PPUSH
26547: LD_INT 221
26549: PPUSH
26550: LD_INT 110
26552: PPUSH
26553: CALL_OW 174
// wait ( 0 0$8 ) ;
26557: LD_INT 280
26559: PPUSH
26560: CALL_OW 67
// music_nat = nation_arabian ;
26564: LD_ADDR_OWVAR 71
26568: PUSH
26569: LD_INT 2
26571: ST_TO_ADDR
// music_class = music_combat ;
26572: LD_ADDR_OWVAR 72
26576: PUSH
26577: LD_INT 1
26579: ST_TO_ADDR
// game_speed = 4 ;
26580: LD_ADDR_OWVAR 65
26584: PUSH
26585: LD_INT 4
26587: ST_TO_ADDR
// DialogueOn ;
26588: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-1 ) ;
26592: LD_EXP 79
26596: PPUSH
26597: LD_STRING D9-Gri-1
26599: PPUSH
26600: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
26604: LD_EXP 58
26608: PPUSH
26609: LD_STRING D9-Kur-1
26611: PPUSH
26612: CALL_OW 94
// DialogueOff ;
26616: CALL_OW 7
// wait ( 0 0$2.5 ) ;
26620: LD_INT 88
26622: PPUSH
26623: CALL_OW 67
// DialogueOn ;
26627: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-2 ) ;
26631: LD_EXP 79
26635: PPUSH
26636: LD_STRING D9-Gri-2
26638: PPUSH
26639: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
26643: LD_EXP 58
26647: PPUSH
26648: LD_STRING D9-Kur-2
26650: PPUSH
26651: CALL_OW 94
// DialogueOff ;
26655: CALL_OW 7
// repeat wait ( 1 ) ;
26659: LD_INT 1
26661: PPUSH
26662: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
26666: LD_EXP 79
26670: PPUSH
26671: CALL_OW 256
26675: PUSH
26676: LD_INT 1000
26678: LESS
26679: IFFALSE 26659
// DialogueOn ;
26681: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-3 ) ;
26685: LD_EXP 79
26689: PPUSH
26690: LD_STRING D9-Gri-3
26692: PPUSH
26693: CALL_OW 94
// DialogueOff ;
26697: CALL_OW 7
// KillUnit ( Grishko ) ;
26701: LD_EXP 79
26705: PPUSH
26706: CALL_OW 66
// wait ( 0 0$12 ) ;
26710: LD_INT 420
26712: PPUSH
26713: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
26717: LD_EXP 58
26721: PPUSH
26722: CALL_OW 87
// SayRadio ( Kurin , D9-Kur-3 ) ;
26726: LD_EXP 58
26730: PPUSH
26731: LD_STRING D9-Kur-3
26733: PPUSH
26734: CALL_OW 94
// CenterNowOnXY ( 176 , 110 ) ;
26738: LD_INT 176
26740: PPUSH
26741: LD_INT 110
26743: PPUSH
26744: CALL_OW 86
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
26748: LD_EXP 85
26752: PPUSH
26753: LD_INT 21
26755: PUSH
26756: LD_INT 1
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PPUSH
26763: CALL_OW 72
26767: PPUSH
26768: LD_INT 221
26770: PPUSH
26771: LD_INT 110
26773: PPUSH
26774: CALL_OW 114
// ComAgressiveMove ( northGroup , 161 , 109 ) ;
26778: LD_EXP 84
26782: PPUSH
26783: LD_INT 161
26785: PPUSH
26786: LD_INT 109
26788: PPUSH
26789: CALL_OW 114
// wait ( 0 0$7 ) ;
26793: LD_INT 245
26795: PPUSH
26796: CALL_OW 67
// ComAgressiveMove ( southGroup , 161 , 109 ) ;
26800: LD_EXP 85
26804: PPUSH
26805: LD_INT 161
26807: PPUSH
26808: LD_INT 109
26810: PPUSH
26811: CALL_OW 114
// wait ( 0 0$11 ) ;
26815: LD_INT 385
26817: PPUSH
26818: CALL_OW 67
// ComEnterUnit ( Kurin , kirovDepot ) ;
26822: LD_EXP 58
26826: PPUSH
26827: LD_EXP 64
26831: PPUSH
26832: CALL_OW 120
// DialogueOn ;
26836: CALL_OW 6
// SayRadio ( Kurin , D9a-Kur-1 ) ;
26840: LD_EXP 58
26844: PPUSH
26845: LD_STRING D9a-Kur-1
26847: PPUSH
26848: CALL_OW 94
// Say ( Burlak , D9a-Bur-1 ) ;
26852: LD_EXP 46
26856: PPUSH
26857: LD_STRING D9a-Bur-1
26859: PPUSH
26860: CALL_OW 88
// SayRadio ( Kurin , D9a-Kur-2 ) ;
26864: LD_EXP 58
26868: PPUSH
26869: LD_STRING D9a-Kur-2
26871: PPUSH
26872: CALL_OW 94
// DialogueOff ;
26876: CALL_OW 7
// ComExitBuilding ( survivorsArabianAttack ) ;
26880: LD_EXP 76
26884: PPUSH
26885: CALL_OW 122
// wait ( 0 0$1 ) ;
26889: LD_INT 35
26891: PPUSH
26892: CALL_OW 67
// ComMoveXY ( survivorsArabianAttack , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
26896: LD_EXP 76
26900: PPUSH
26901: LD_EXP 57
26905: PPUSH
26906: CALL_OW 250
26910: PPUSH
26911: LD_EXP 57
26915: PPUSH
26916: CALL_OW 251
26920: PPUSH
26921: CALL_OW 111
// immortalSurvivors = true ;
26925: LD_ADDR_EXP 25
26929: PUSH
26930: LD_INT 1
26932: ST_TO_ADDR
// for tmpUS in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
26933: LD_ADDR_VAR 0 1
26937: PUSH
26938: LD_INT 22
26940: PUSH
26941: LD_INT 1
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: LD_INT 21
26950: PUSH
26951: LD_INT 1
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PUSH
26958: LD_INT 50
26960: PUSH
26961: EMPTY
26962: LIST
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: LIST
26968: PPUSH
26969: CALL_OW 69
26973: PUSH
26974: FOR_IN
26975: IFFALSE 26988
// RemoveUnit ( tmpUS ) ;
26977: LD_VAR 0 1
26981: PPUSH
26982: CALL_OW 64
26986: GO 26974
26988: POP
26989: POP
// wait ( 0 0$33 ) ;
26990: LD_INT 1155
26992: PPUSH
26993: CALL_OW 67
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
26997: LD_INT 22
26999: PUSH
27000: LD_INT 3
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 21
27009: PUSH
27010: LD_INT 1
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PPUSH
27021: CALL_OW 69
27025: PPUSH
27026: CALL_OW 121
// wait ( 0 0$1 ) ;
27030: LD_INT 35
27032: PPUSH
27033: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
27037: LD_INT 22
27039: PUSH
27040: LD_INT 3
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 21
27049: PUSH
27050: LD_INT 1
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PPUSH
27061: CALL_OW 69
27065: PPUSH
27066: LD_EXP 59
27070: PPUSH
27071: CALL_OW 250
27075: PPUSH
27076: LD_EXP 59
27080: PPUSH
27081: CALL_OW 251
27085: PPUSH
27086: CALL_OW 111
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
27090: LD_INT 22
27092: PUSH
27093: LD_INT 3
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 21
27102: PUSH
27103: LD_INT 1
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PPUSH
27114: CALL_OW 69
27118: PPUSH
27119: LD_EXP 59
27123: PPUSH
27124: CALL_OW 250
27128: PPUSH
27129: LD_EXP 59
27133: PPUSH
27134: CALL_OW 251
27138: PPUSH
27139: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
27143: LD_EXP 46
27147: PPUSH
27148: CALL_OW 87
// wait ( 0 0$1 ) ;
27152: LD_INT 35
27154: PPUSH
27155: CALL_OW 67
// until GetDistUnits ( Burlak , Popov ) < 6 ;
27159: LD_EXP 46
27163: PPUSH
27164: LD_EXP 59
27168: PPUSH
27169: CALL_OW 296
27173: PUSH
27174: LD_INT 6
27176: LESS
27177: IFFALSE 27090
// CenterNowOnUnits ( [ Burlak , Popov ] ) ;
27179: LD_EXP 46
27183: PUSH
27184: LD_EXP 59
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PPUSH
27193: CALL_OW 87
// ComTurnUnit ( Burlak , Popov ) ;
27197: LD_EXP 46
27201: PPUSH
27202: LD_EXP 59
27206: PPUSH
27207: CALL_OW 119
// ComTurnUnit ( Popov , Burlak ) ;
27211: LD_EXP 59
27215: PPUSH
27216: LD_EXP 46
27220: PPUSH
27221: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
27225: LD_EXP 46
27229: PPUSH
27230: LD_STRING D10a-Bur-1
27232: PPUSH
27233: CALL_OW 88
// Say ( Popov , D10a-Pop-1 ) ;
27237: LD_EXP 59
27241: PPUSH
27242: LD_STRING D10a-Pop-1
27244: PPUSH
27245: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
27249: LD_EXP 46
27253: PPUSH
27254: LD_STRING D10a-Bur-2
27256: PPUSH
27257: CALL_OW 88
// Say ( Popov , D10a-Pop-2 ) ;
27261: LD_EXP 59
27265: PPUSH
27266: LD_STRING D10a-Pop-2
27268: PPUSH
27269: CALL_OW 88
// Say ( Burlak , D10a-Bur-3 ) ;
27273: LD_EXP 46
27277: PPUSH
27278: LD_STRING D10a-Bur-3
27280: PPUSH
27281: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
27285: LD_EXP 59
27289: PPUSH
27290: LD_STRING D10a-Pop-3
27292: PPUSH
27293: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
27297: LD_EXP 46
27301: PPUSH
27302: LD_STRING D10a-Bur-4
27304: PPUSH
27305: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
27309: LD_EXP 59
27313: PPUSH
27314: LD_STRING D10a-Pop-4
27316: PPUSH
27317: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
27321: LD_EXP 46
27325: PPUSH
27326: LD_STRING D10a-Bur-5
27328: PPUSH
27329: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
27333: LD_EXP 59
27337: PPUSH
27338: LD_STRING D10a-Pop-5
27340: PPUSH
27341: CALL_OW 88
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 83 , 157 ) ;
27345: LD_INT 22
27347: PUSH
27348: LD_INT 3
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 21
27357: PUSH
27358: LD_INT 1
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PPUSH
27369: CALL_OW 69
27373: PPUSH
27374: LD_INT 83
27376: PPUSH
27377: LD_INT 157
27379: PPUSH
27380: CALL_OW 111
// ComMoveXY ( survivorsArabianAttack , 83 , 157 ) ;
27384: LD_EXP 76
27388: PPUSH
27389: LD_INT 83
27391: PPUSH
27392: LD_INT 157
27394: PPUSH
27395: CALL_OW 111
// repeat CenterNowOnUnits ( Burlak ) ;
27399: LD_EXP 46
27403: PPUSH
27404: CALL_OW 87
// wait ( 0 0$1 ) ;
27408: LD_INT 35
27410: PPUSH
27411: CALL_OW 67
// until GetDistUnits ( Burlak , beriaDepot ) > 19 ;
27415: LD_EXP 46
27419: PPUSH
27420: LD_EXP 57
27424: PPUSH
27425: CALL_OW 296
27429: PUSH
27430: LD_INT 19
27432: GREATER
27433: IFFALSE 27399
// CenterNowOnXY ( 113 , 96 ) ;
27435: LD_INT 113
27437: PPUSH
27438: LD_INT 96
27440: PPUSH
27441: CALL_OW 86
// canDestroyBeriaBase = true ;
27445: LD_ADDR_EXP 28
27449: PUSH
27450: LD_INT 1
27452: ST_TO_ADDR
// for building in FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
27453: LD_ADDR_VAR 0 3
27457: PUSH
27458: LD_INT 25
27460: PPUSH
27461: LD_INT 22
27463: PUSH
27464: LD_INT 3
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 21
27473: PUSH
27474: LD_INT 3
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PPUSH
27485: CALL_OW 70
27489: PUSH
27490: FOR_IN
27491: IFFALSE 27523
// begin AddComAttackUnit ( northGroup , building ) ;
27493: LD_EXP 84
27497: PPUSH
27498: LD_VAR 0 3
27502: PPUSH
27503: CALL_OW 175
// AddComAttackUnit ( southGroup , building ) ;
27507: LD_EXP 85
27511: PPUSH
27512: LD_VAR 0 3
27516: PPUSH
27517: CALL_OW 175
// end ;
27521: GO 27490
27523: POP
27524: POP
// wait ( 0 0$35 ) ;
27525: LD_INT 1225
27527: PPUSH
27528: CALL_OW 67
// FinishMission ;
27532: CALL 19075 0 0
// end ;
27536: PPOPN 3
27538: END
// every 1 trigger immortalSurvivors do var unit ;
27539: LD_EXP 25
27543: IFFALSE 27581
27545: GO 27547
27547: DISABLE
27548: LD_INT 0
27550: PPUSH
// begin enable ;
27551: ENABLE
// for unit in survivorsArabianAttack do
27552: LD_ADDR_VAR 0 1
27556: PUSH
27557: LD_EXP 76
27561: PUSH
27562: FOR_IN
27563: IFFALSE 27579
// SetLives ( unit , 1000 ) ;
27565: LD_VAR 0 1
27569: PPUSH
27570: LD_INT 1000
27572: PPUSH
27573: CALL_OW 234
27577: GO 27562
27579: POP
27580: POP
// end ; end_of_file
27581: PPOPN 1
27583: END
// every 0 0$30 do
27584: GO 27586
27586: DISABLE
// CreateCratesXYR ( rand ( 3 , 5 ) , 76 , 111 , 5 , true ) ;
27587: LD_INT 3
27589: PPUSH
27590: LD_INT 5
27592: PPUSH
27593: CALL_OW 12
27597: PPUSH
27598: LD_INT 76
27600: PPUSH
27601: LD_INT 111
27603: PPUSH
27604: LD_INT 5
27606: PPUSH
27607: LD_INT 1
27609: PPUSH
27610: CALL_OW 56
27614: END
// every 0 0$10 trigger spawnCrates do var spawnDelay ;
27615: LD_EXP 5
27619: IFFALSE 27691
27621: GO 27623
27623: DISABLE
27624: LD_INT 0
27626: PPUSH
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
27627: LD_INT 50
27629: PPUSH
27630: LD_INT 4200
27632: PPUSH
27633: CALL_OW 12
27637: PPUSH
27638: CALL_OW 67
// wait ( spawnDelay * 0 0$5 ) ;
27642: LD_VAR 0 1
27646: PUSH
27647: LD_INT 175
27649: MUL
27650: PPUSH
27651: CALL_OW 67
// spawnDelay = spawnDelay + 1 ;
27655: LD_ADDR_VAR 0 1
27659: PUSH
27660: LD_VAR 0 1
27664: PUSH
27665: LD_INT 1
27667: PLUS
27668: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
27669: LD_INT 3
27671: PPUSH
27672: LD_INT 5
27674: PPUSH
27675: CALL_OW 12
27679: PPUSH
27680: LD_INT 6
27682: PPUSH
27683: LD_INT 1
27685: PPUSH
27686: CALL_OW 55
// enable ;
27690: ENABLE
// end ; end_of_file
27691: PPOPN 1
27693: END
// export counterEnable , counterIndex ; every 0 0$1 trigger counterEnable do
27694: LD_EXP 86
27698: IFFALSE 27861
27700: GO 27702
27702: DISABLE
// begin enable ;
27703: ENABLE
// case counterIndex of 1 :
27704: LD_EXP 87
27708: PUSH
27709: LD_INT 1
27711: DOUBLE
27712: EQUAL
27713: IFTRUE 27717
27715: GO 27734
27717: POP
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ; 2 :
27718: LD_ADDR_EXP 38
27722: PUSH
27723: LD_EXP 38
27727: PUSH
27728: LD_INT 35
27730: MINUS
27731: ST_TO_ADDR
27732: GO 27861
27734: LD_INT 2
27736: DOUBLE
27737: EQUAL
27738: IFTRUE 27742
27740: GO 27776
27742: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
27743: LD_ADDR_OWVAR 47
27747: PUSH
27748: LD_STRING #Ru03-1
27750: PUSH
27751: LD_EXP 15
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
27760: LD_ADDR_EXP 15
27764: PUSH
27765: LD_EXP 15
27769: PUSH
27770: LD_INT 35
27772: MINUS
27773: ST_TO_ADDR
// end ; 3 :
27774: GO 27861
27776: LD_INT 3
27778: DOUBLE
27779: EQUAL
27780: IFTRUE 27784
27782: GO 27818
27784: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
27785: LD_ADDR_OWVAR 47
27789: PUSH
27790: LD_STRING #Ru03-2
27792: PUSH
27793: LD_EXP 15
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
27802: LD_ADDR_EXP 15
27806: PUSH
27807: LD_EXP 15
27811: PUSH
27812: LD_INT 35
27814: MINUS
27815: ST_TO_ADDR
// end ; 4 :
27816: GO 27861
27818: LD_INT 4
27820: DOUBLE
27821: EQUAL
27822: IFTRUE 27826
27824: GO 27860
27826: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
27827: LD_ADDR_OWVAR 47
27831: PUSH
27832: LD_STRING #Ru03-3
27834: PUSH
27835: LD_EXP 14
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
27844: LD_ADDR_EXP 14
27848: PUSH
27849: LD_EXP 14
27853: PUSH
27854: LD_INT 35
27856: MINUS
27857: ST_TO_ADDR
// end ; end ;
27858: GO 27861
27860: POP
// end ; end_of_file
27861: END
// every 7 7$0 do
27862: GO 27864
27864: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 0 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
27865: LD_INT 3
27867: PPUSH
27868: LD_INT 1
27870: PPUSH
27871: LD_INT 0
27873: PPUSH
27874: LD_INT 7
27876: PUSH
27877: LD_INT 9
27879: PUSH
27880: LD_INT 8
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 1
27890: PPUSH
27891: LD_INT 3
27893: PPUSH
27894: CALL_OW 12
27898: ARRAY
27899: PPUSH
27900: CALL 5780 0 4
27904: END
// every 12 12$0 do
27905: GO 27907
27907: DISABLE
// PrepareAmericanSupportTroops ( 4 , 2 , 1 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
27908: LD_INT 4
27910: PPUSH
27911: LD_INT 2
27913: PPUSH
27914: LD_INT 1
27916: PPUSH
27917: LD_INT 7
27919: PUSH
27920: LD_INT 9
27922: PUSH
27923: LD_INT 8
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 1
27933: PPUSH
27934: LD_INT 3
27936: PPUSH
27937: CALL_OW 12
27941: ARRAY
27942: PPUSH
27943: CALL 5780 0 4
27947: END
// every 20 20$0 do
27948: GO 27950
27950: DISABLE
// PrepareAmericanSupportTroops ( 6 , 2 , 0 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
27951: LD_INT 6
27953: PPUSH
27954: LD_INT 2
27956: PPUSH
27957: LD_INT 0
27959: PPUSH
27960: LD_INT 7
27962: PUSH
27963: LD_INT 9
27965: PUSH
27966: LD_INT 8
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 1
27976: PPUSH
27977: LD_INT 3
27979: PPUSH
27980: CALL_OW 12
27984: ARRAY
27985: PPUSH
27986: CALL 5780 0 4
27990: END
// every 23 23$0 do
27991: GO 27993
27993: DISABLE
// PrepareAmericanSupportTroops ( 5 , 1 , 3 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ; end_of_file
27994: LD_INT 5
27996: PPUSH
27997: LD_INT 1
27999: PPUSH
28000: LD_INT 3
28002: PPUSH
28003: LD_INT 7
28005: PUSH
28006: LD_INT 9
28008: PUSH
28009: LD_INT 8
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 1
28019: PPUSH
28020: LD_INT 3
28022: PPUSH
28023: CALL_OW 12
28027: ARRAY
28028: PPUSH
28029: CALL 5780 0 4
28033: END
// export function Nef_PrepareNature ; var i , un ; begin
28034: LD_INT 0
28036: PPUSH
28037: PPUSH
28038: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
28039: LD_ADDR_VAR 0 2
28043: PUSH
28044: DOUBLE
28045: LD_INT 1
28047: DEC
28048: ST_TO_ADDR
28049: LD_EXP 30
28053: PUSH
28054: LD_INT 1
28056: ARRAY
28057: PUSH
28058: FOR_TO
28059: IFFALSE 28169
// begin uc_side = 0 ;
28061: LD_ADDR_OWVAR 20
28065: PUSH
28066: LD_INT 0
28068: ST_TO_ADDR
// uc_nation = nation_nature ;
28069: LD_ADDR_OWVAR 21
28073: PUSH
28074: LD_INT 0
28076: ST_TO_ADDR
// hc_class = class_apeman ;
28077: LD_ADDR_OWVAR 28
28081: PUSH
28082: LD_INT 12
28084: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
28085: LD_ADDR_OWVAR 31
28089: PUSH
28090: LD_EXP 31
28094: PUSH
28095: LD_INT 1
28097: ARRAY
28098: PUSH
28099: LD_EXP 31
28103: PUSH
28104: LD_INT 2
28106: ARRAY
28107: PUSH
28108: LD_EXP 31
28112: PUSH
28113: LD_INT 3
28115: ARRAY
28116: PUSH
28117: LD_EXP 31
28121: PUSH
28122: LD_INT 4
28124: ARRAY
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
28132: LD_ADDR_OWVAR 35
28136: PUSH
28137: LD_EXP 32
28141: ST_TO_ADDR
// un = CreateHuman ;
28142: LD_ADDR_VAR 0 3
28146: PUSH
28147: CALL_OW 44
28151: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
28152: LD_VAR 0 3
28156: PPUSH
28157: LD_INT 27
28159: PPUSH
28160: LD_INT 0
28162: PPUSH
28163: CALL_OW 49
// end ;
28167: GO 28058
28169: POP
28170: POP
// for i := 1 to animalsAmount [ 2 ] do
28171: LD_ADDR_VAR 0 2
28175: PUSH
28176: DOUBLE
28177: LD_INT 1
28179: DEC
28180: ST_TO_ADDR
28181: LD_EXP 30
28185: PUSH
28186: LD_INT 2
28188: ARRAY
28189: PUSH
28190: FOR_TO
28191: IFFALSE 28301
// begin uc_side = 0 ;
28193: LD_ADDR_OWVAR 20
28197: PUSH
28198: LD_INT 0
28200: ST_TO_ADDR
// uc_nation = nation_nature ;
28201: LD_ADDR_OWVAR 21
28205: PUSH
28206: LD_INT 0
28208: ST_TO_ADDR
// hc_class = class_phororhacos ;
28209: LD_ADDR_OWVAR 28
28213: PUSH
28214: LD_INT 18
28216: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
28217: LD_ADDR_OWVAR 31
28221: PUSH
28222: LD_EXP 31
28226: PUSH
28227: LD_INT 1
28229: ARRAY
28230: PUSH
28231: LD_EXP 31
28235: PUSH
28236: LD_INT 2
28238: ARRAY
28239: PUSH
28240: LD_EXP 31
28244: PUSH
28245: LD_INT 3
28247: ARRAY
28248: PUSH
28249: LD_EXP 31
28253: PUSH
28254: LD_INT 4
28256: ARRAY
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
28264: LD_ADDR_OWVAR 35
28268: PUSH
28269: LD_EXP 32
28273: ST_TO_ADDR
// un = CreateHuman ;
28274: LD_ADDR_VAR 0 3
28278: PUSH
28279: CALL_OW 44
28283: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
28284: LD_VAR 0 3
28288: PPUSH
28289: LD_INT 27
28291: PPUSH
28292: LD_INT 0
28294: PPUSH
28295: CALL_OW 49
// end ;
28299: GO 28190
28301: POP
28302: POP
// for i := 1 to animalsAmount [ 3 ] do
28303: LD_ADDR_VAR 0 2
28307: PUSH
28308: DOUBLE
28309: LD_INT 1
28311: DEC
28312: ST_TO_ADDR
28313: LD_EXP 30
28317: PUSH
28318: LD_INT 3
28320: ARRAY
28321: PUSH
28322: FOR_TO
28323: IFFALSE 28433
// begin uc_side = 0 ;
28325: LD_ADDR_OWVAR 20
28329: PUSH
28330: LD_INT 0
28332: ST_TO_ADDR
// uc_nation = nation_nature ;
28333: LD_ADDR_OWVAR 21
28337: PUSH
28338: LD_INT 0
28340: ST_TO_ADDR
// hc_class = class_tiger ;
28341: LD_ADDR_OWVAR 28
28345: PUSH
28346: LD_INT 14
28348: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
28349: LD_ADDR_OWVAR 31
28353: PUSH
28354: LD_EXP 31
28358: PUSH
28359: LD_INT 1
28361: ARRAY
28362: PUSH
28363: LD_EXP 31
28367: PUSH
28368: LD_INT 2
28370: ARRAY
28371: PUSH
28372: LD_EXP 31
28376: PUSH
28377: LD_INT 3
28379: ARRAY
28380: PUSH
28381: LD_EXP 31
28385: PUSH
28386: LD_INT 4
28388: ARRAY
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
28396: LD_ADDR_OWVAR 35
28400: PUSH
28401: LD_EXP 32
28405: ST_TO_ADDR
// un = CreateHuman ;
28406: LD_ADDR_VAR 0 3
28410: PUSH
28411: CALL_OW 44
28415: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
28416: LD_VAR 0 3
28420: PPUSH
28421: LD_INT 27
28423: PPUSH
28424: LD_INT 0
28426: PPUSH
28427: CALL_OW 49
// end ;
28431: GO 28322
28433: POP
28434: POP
// for i := 1 to animalsAmount [ 4 ] do
28435: LD_ADDR_VAR 0 2
28439: PUSH
28440: DOUBLE
28441: LD_INT 1
28443: DEC
28444: ST_TO_ADDR
28445: LD_EXP 30
28449: PUSH
28450: LD_INT 4
28452: ARRAY
28453: PUSH
28454: FOR_TO
28455: IFFALSE 28565
// begin uc_side = 0 ;
28457: LD_ADDR_OWVAR 20
28461: PUSH
28462: LD_INT 0
28464: ST_TO_ADDR
// uc_nation = nation_nature ;
28465: LD_ADDR_OWVAR 21
28469: PUSH
28470: LD_INT 0
28472: ST_TO_ADDR
// hc_class = 21 ;
28473: LD_ADDR_OWVAR 28
28477: PUSH
28478: LD_INT 21
28480: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
28481: LD_ADDR_OWVAR 31
28485: PUSH
28486: LD_EXP 31
28490: PUSH
28491: LD_INT 1
28493: ARRAY
28494: PUSH
28495: LD_EXP 31
28499: PUSH
28500: LD_INT 2
28502: ARRAY
28503: PUSH
28504: LD_EXP 31
28508: PUSH
28509: LD_INT 3
28511: ARRAY
28512: PUSH
28513: LD_EXP 31
28517: PUSH
28518: LD_INT 4
28520: ARRAY
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
28528: LD_ADDR_OWVAR 35
28532: PUSH
28533: LD_EXP 32
28537: ST_TO_ADDR
// un = CreateHuman ;
28538: LD_ADDR_VAR 0 3
28542: PUSH
28543: CALL_OW 44
28547: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
28548: LD_VAR 0 3
28552: PPUSH
28553: LD_INT 27
28555: PPUSH
28556: LD_INT 0
28558: PPUSH
28559: CALL_OW 49
// end ;
28563: GO 28454
28565: POP
28566: POP
// for i := 1 to animalsAmount [ 5 ] do
28567: LD_ADDR_VAR 0 2
28571: PUSH
28572: DOUBLE
28573: LD_INT 1
28575: DEC
28576: ST_TO_ADDR
28577: LD_EXP 30
28581: PUSH
28582: LD_INT 5
28584: ARRAY
28585: PUSH
28586: FOR_TO
28587: IFFALSE 28648
// begin uc_side = 0 ;
28589: LD_ADDR_OWVAR 20
28593: PUSH
28594: LD_INT 0
28596: ST_TO_ADDR
// uc_nation = nation_nature ;
28597: LD_ADDR_OWVAR 21
28601: PUSH
28602: LD_INT 0
28604: ST_TO_ADDR
// vc_chassis := 31 ;
28605: LD_ADDR_OWVAR 37
28609: PUSH
28610: LD_INT 31
28612: ST_TO_ADDR
// vc_control := control_rider ;
28613: LD_ADDR_OWVAR 38
28617: PUSH
28618: LD_INT 4
28620: ST_TO_ADDR
// un := CreateVehicle ;
28621: LD_ADDR_VAR 0 3
28625: PUSH
28626: CALL_OW 45
28630: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
28631: LD_VAR 0 3
28635: PPUSH
28636: LD_INT 27
28638: PPUSH
28639: LD_INT 0
28641: PPUSH
28642: CALL_OW 49
// end ;
28646: GO 28586
28648: POP
28649: POP
// end ; end_of_file
28650: LD_VAR 0 1
28654: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
28655: GO 28657
28657: DISABLE
// begin ru_radar := 98 ;
28658: LD_ADDR_EXP 88
28662: PUSH
28663: LD_INT 98
28665: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
28666: LD_ADDR_EXP 89
28670: PUSH
28671: LD_INT 89
28673: ST_TO_ADDR
// us_hack := 99 ;
28674: LD_ADDR_EXP 90
28678: PUSH
28679: LD_INT 99
28681: ST_TO_ADDR
// us_artillery := 97 ;
28682: LD_ADDR_EXP 91
28686: PUSH
28687: LD_INT 97
28689: ST_TO_ADDR
// ar_bio_bomb := 91 ;
28690: LD_ADDR_EXP 92
28694: PUSH
28695: LD_INT 91
28697: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
28698: LD_ADDR_EXP 93
28702: PUSH
28703: LD_INT 92
28705: ST_TO_ADDR
// tech_Artillery := 80 ;
28706: LD_ADDR_EXP 94
28710: PUSH
28711: LD_INT 80
28713: ST_TO_ADDR
// tech_RadMat := 81 ;
28714: LD_ADDR_EXP 95
28718: PUSH
28719: LD_INT 81
28721: ST_TO_ADDR
// tech_BasicTools := 82 ;
28722: LD_ADDR_EXP 96
28726: PUSH
28727: LD_INT 82
28729: ST_TO_ADDR
// tech_Cargo := 83 ;
28730: LD_ADDR_EXP 97
28734: PUSH
28735: LD_INT 83
28737: ST_TO_ADDR
// tech_Track := 84 ;
28738: LD_ADDR_EXP 98
28742: PUSH
28743: LD_INT 84
28745: ST_TO_ADDR
// tech_Crane := 85 ;
28746: LD_ADDR_EXP 99
28750: PUSH
28751: LD_INT 85
28753: ST_TO_ADDR
// tech_Bulldozer := 86 ;
28754: LD_ADDR_EXP 100
28758: PUSH
28759: LD_INT 86
28761: ST_TO_ADDR
// tech_Hovercraft := 87 ;
28762: LD_ADDR_EXP 101
28766: PUSH
28767: LD_INT 87
28769: ST_TO_ADDR
// end ; end_of_file
28770: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28771: LD_INT 0
28773: PPUSH
28774: PPUSH
// if exist_mode then
28775: LD_VAR 0 2
28779: IFFALSE 28804
// unit := CreateCharacter ( prefix & ident ) else
28781: LD_ADDR_VAR 0 5
28785: PUSH
28786: LD_VAR 0 3
28790: PUSH
28791: LD_VAR 0 1
28795: STR
28796: PPUSH
28797: CALL_OW 34
28801: ST_TO_ADDR
28802: GO 28819
// unit := NewCharacter ( ident ) ;
28804: LD_ADDR_VAR 0 5
28808: PUSH
28809: LD_VAR 0 1
28813: PPUSH
28814: CALL_OW 25
28818: ST_TO_ADDR
// result := unit ;
28819: LD_ADDR_VAR 0 4
28823: PUSH
28824: LD_VAR 0 5
28828: ST_TO_ADDR
// end ;
28829: LD_VAR 0 4
28833: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28834: LD_INT 0
28836: PPUSH
28837: PPUSH
// if not side or not nation then
28838: LD_VAR 0 1
28842: NOT
28843: PUSH
28844: LD_VAR 0 2
28848: NOT
28849: OR
28850: IFFALSE 28854
// exit ;
28852: GO 29618
// case nation of nation_american :
28854: LD_VAR 0 2
28858: PUSH
28859: LD_INT 1
28861: DOUBLE
28862: EQUAL
28863: IFTRUE 28867
28865: GO 29081
28867: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28868: LD_ADDR_VAR 0 4
28872: PUSH
28873: LD_INT 35
28875: PUSH
28876: LD_INT 45
28878: PUSH
28879: LD_INT 46
28881: PUSH
28882: LD_INT 47
28884: PUSH
28885: LD_INT 82
28887: PUSH
28888: LD_INT 83
28890: PUSH
28891: LD_INT 84
28893: PUSH
28894: LD_INT 85
28896: PUSH
28897: LD_INT 86
28899: PUSH
28900: LD_INT 1
28902: PUSH
28903: LD_INT 2
28905: PUSH
28906: LD_INT 6
28908: PUSH
28909: LD_INT 15
28911: PUSH
28912: LD_INT 16
28914: PUSH
28915: LD_INT 7
28917: PUSH
28918: LD_INT 12
28920: PUSH
28921: LD_INT 13
28923: PUSH
28924: LD_INT 10
28926: PUSH
28927: LD_INT 14
28929: PUSH
28930: LD_INT 20
28932: PUSH
28933: LD_INT 21
28935: PUSH
28936: LD_INT 22
28938: PUSH
28939: LD_INT 25
28941: PUSH
28942: LD_INT 32
28944: PUSH
28945: LD_INT 27
28947: PUSH
28948: LD_INT 36
28950: PUSH
28951: LD_INT 69
28953: PUSH
28954: LD_INT 39
28956: PUSH
28957: LD_INT 34
28959: PUSH
28960: LD_INT 40
28962: PUSH
28963: LD_INT 48
28965: PUSH
28966: LD_INT 49
28968: PUSH
28969: LD_INT 50
28971: PUSH
28972: LD_INT 51
28974: PUSH
28975: LD_INT 52
28977: PUSH
28978: LD_INT 53
28980: PUSH
28981: LD_INT 54
28983: PUSH
28984: LD_INT 55
28986: PUSH
28987: LD_INT 56
28989: PUSH
28990: LD_INT 57
28992: PUSH
28993: LD_INT 58
28995: PUSH
28996: LD_INT 59
28998: PUSH
28999: LD_INT 60
29001: PUSH
29002: LD_INT 61
29004: PUSH
29005: LD_INT 62
29007: PUSH
29008: LD_INT 80
29010: PUSH
29011: LD_INT 82
29013: PUSH
29014: LD_INT 83
29016: PUSH
29017: LD_INT 84
29019: PUSH
29020: LD_INT 85
29022: PUSH
29023: LD_INT 86
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: ST_TO_ADDR
29079: GO 29542
29081: LD_INT 2
29083: DOUBLE
29084: EQUAL
29085: IFTRUE 29089
29087: GO 29311
29089: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
29090: LD_ADDR_VAR 0 4
29094: PUSH
29095: LD_INT 35
29097: PUSH
29098: LD_INT 45
29100: PUSH
29101: LD_INT 46
29103: PUSH
29104: LD_INT 47
29106: PUSH
29107: LD_INT 82
29109: PUSH
29110: LD_INT 83
29112: PUSH
29113: LD_INT 84
29115: PUSH
29116: LD_INT 85
29118: PUSH
29119: LD_INT 87
29121: PUSH
29122: LD_INT 70
29124: PUSH
29125: LD_INT 1
29127: PUSH
29128: LD_INT 11
29130: PUSH
29131: LD_INT 3
29133: PUSH
29134: LD_INT 4
29136: PUSH
29137: LD_INT 5
29139: PUSH
29140: LD_INT 6
29142: PUSH
29143: LD_INT 15
29145: PUSH
29146: LD_INT 18
29148: PUSH
29149: LD_INT 7
29151: PUSH
29152: LD_INT 17
29154: PUSH
29155: LD_INT 8
29157: PUSH
29158: LD_INT 20
29160: PUSH
29161: LD_INT 21
29163: PUSH
29164: LD_INT 22
29166: PUSH
29167: LD_INT 72
29169: PUSH
29170: LD_INT 26
29172: PUSH
29173: LD_INT 69
29175: PUSH
29176: LD_INT 39
29178: PUSH
29179: LD_INT 40
29181: PUSH
29182: LD_INT 41
29184: PUSH
29185: LD_INT 42
29187: PUSH
29188: LD_INT 43
29190: PUSH
29191: LD_INT 48
29193: PUSH
29194: LD_INT 49
29196: PUSH
29197: LD_INT 50
29199: PUSH
29200: LD_INT 51
29202: PUSH
29203: LD_INT 52
29205: PUSH
29206: LD_INT 53
29208: PUSH
29209: LD_INT 54
29211: PUSH
29212: LD_INT 55
29214: PUSH
29215: LD_INT 56
29217: PUSH
29218: LD_INT 60
29220: PUSH
29221: LD_INT 61
29223: PUSH
29224: LD_INT 62
29226: PUSH
29227: LD_INT 66
29229: PUSH
29230: LD_INT 67
29232: PUSH
29233: LD_INT 68
29235: PUSH
29236: LD_INT 81
29238: PUSH
29239: LD_INT 82
29241: PUSH
29242: LD_INT 83
29244: PUSH
29245: LD_INT 84
29247: PUSH
29248: LD_INT 85
29250: PUSH
29251: LD_INT 87
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: ST_TO_ADDR
29309: GO 29542
29311: LD_INT 3
29313: DOUBLE
29314: EQUAL
29315: IFTRUE 29319
29317: GO 29541
29319: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29320: LD_ADDR_VAR 0 4
29324: PUSH
29325: LD_INT 46
29327: PUSH
29328: LD_INT 47
29330: PUSH
29331: LD_INT 1
29333: PUSH
29334: LD_INT 2
29336: PUSH
29337: LD_INT 82
29339: PUSH
29340: LD_INT 83
29342: PUSH
29343: LD_INT 84
29345: PUSH
29346: LD_INT 85
29348: PUSH
29349: LD_INT 86
29351: PUSH
29352: LD_INT 11
29354: PUSH
29355: LD_INT 9
29357: PUSH
29358: LD_INT 20
29360: PUSH
29361: LD_INT 19
29363: PUSH
29364: LD_INT 21
29366: PUSH
29367: LD_INT 24
29369: PUSH
29370: LD_INT 22
29372: PUSH
29373: LD_INT 25
29375: PUSH
29376: LD_INT 28
29378: PUSH
29379: LD_INT 29
29381: PUSH
29382: LD_INT 30
29384: PUSH
29385: LD_INT 31
29387: PUSH
29388: LD_INT 37
29390: PUSH
29391: LD_INT 38
29393: PUSH
29394: LD_INT 32
29396: PUSH
29397: LD_INT 27
29399: PUSH
29400: LD_INT 33
29402: PUSH
29403: LD_INT 69
29405: PUSH
29406: LD_INT 39
29408: PUSH
29409: LD_INT 34
29411: PUSH
29412: LD_INT 40
29414: PUSH
29415: LD_INT 71
29417: PUSH
29418: LD_INT 23
29420: PUSH
29421: LD_INT 44
29423: PUSH
29424: LD_INT 48
29426: PUSH
29427: LD_INT 49
29429: PUSH
29430: LD_INT 50
29432: PUSH
29433: LD_INT 51
29435: PUSH
29436: LD_INT 52
29438: PUSH
29439: LD_INT 53
29441: PUSH
29442: LD_INT 54
29444: PUSH
29445: LD_INT 55
29447: PUSH
29448: LD_INT 56
29450: PUSH
29451: LD_INT 57
29453: PUSH
29454: LD_INT 58
29456: PUSH
29457: LD_INT 59
29459: PUSH
29460: LD_INT 63
29462: PUSH
29463: LD_INT 64
29465: PUSH
29466: LD_INT 65
29468: PUSH
29469: LD_INT 82
29471: PUSH
29472: LD_INT 83
29474: PUSH
29475: LD_INT 84
29477: PUSH
29478: LD_INT 85
29480: PUSH
29481: LD_INT 86
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: ST_TO_ADDR
29539: GO 29542
29541: POP
// if state > - 1 and state < 3 then
29542: LD_VAR 0 3
29546: PUSH
29547: LD_INT 1
29549: NEG
29550: GREATER
29551: PUSH
29552: LD_VAR 0 3
29556: PUSH
29557: LD_INT 3
29559: LESS
29560: AND
29561: IFFALSE 29618
// for i in result do
29563: LD_ADDR_VAR 0 5
29567: PUSH
29568: LD_VAR 0 4
29572: PUSH
29573: FOR_IN
29574: IFFALSE 29616
// if GetTech ( i , side ) <> state then
29576: LD_VAR 0 5
29580: PPUSH
29581: LD_VAR 0 1
29585: PPUSH
29586: CALL_OW 321
29590: PUSH
29591: LD_VAR 0 3
29595: NONEQUAL
29596: IFFALSE 29614
// result := result diff i ;
29598: LD_ADDR_VAR 0 4
29602: PUSH
29603: LD_VAR 0 4
29607: PUSH
29608: LD_VAR 0 5
29612: DIFF
29613: ST_TO_ADDR
29614: GO 29573
29616: POP
29617: POP
// end ;
29618: LD_VAR 0 4
29622: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29623: LD_INT 0
29625: PPUSH
29626: PPUSH
29627: PPUSH
// result := true ;
29628: LD_ADDR_VAR 0 3
29632: PUSH
29633: LD_INT 1
29635: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29636: LD_ADDR_VAR 0 5
29640: PUSH
29641: LD_VAR 0 2
29645: PPUSH
29646: CALL_OW 480
29650: ST_TO_ADDR
// if not tmp then
29651: LD_VAR 0 5
29655: NOT
29656: IFFALSE 29660
// exit ;
29658: GO 29709
// for i in tmp do
29660: LD_ADDR_VAR 0 4
29664: PUSH
29665: LD_VAR 0 5
29669: PUSH
29670: FOR_IN
29671: IFFALSE 29707
// if GetTech ( i , side ) <> state_researched then
29673: LD_VAR 0 4
29677: PPUSH
29678: LD_VAR 0 1
29682: PPUSH
29683: CALL_OW 321
29687: PUSH
29688: LD_INT 2
29690: NONEQUAL
29691: IFFALSE 29705
// begin result := false ;
29693: LD_ADDR_VAR 0 3
29697: PUSH
29698: LD_INT 0
29700: ST_TO_ADDR
// exit ;
29701: POP
29702: POP
29703: GO 29709
// end ;
29705: GO 29670
29707: POP
29708: POP
// end ;
29709: LD_VAR 0 3
29713: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29714: LD_INT 0
29716: PPUSH
29717: PPUSH
29718: PPUSH
29719: PPUSH
29720: PPUSH
29721: PPUSH
29722: PPUSH
29723: PPUSH
29724: PPUSH
29725: PPUSH
29726: PPUSH
29727: PPUSH
29728: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29729: LD_VAR 0 1
29733: NOT
29734: PUSH
29735: LD_VAR 0 1
29739: PPUSH
29740: CALL_OW 257
29744: PUSH
29745: LD_INT 9
29747: NONEQUAL
29748: OR
29749: IFFALSE 29753
// exit ;
29751: GO 30326
// side := GetSide ( unit ) ;
29753: LD_ADDR_VAR 0 9
29757: PUSH
29758: LD_VAR 0 1
29762: PPUSH
29763: CALL_OW 255
29767: ST_TO_ADDR
// tech_space := tech_spacanom ;
29768: LD_ADDR_VAR 0 12
29772: PUSH
29773: LD_INT 29
29775: ST_TO_ADDR
// tech_time := tech_taurad ;
29776: LD_ADDR_VAR 0 13
29780: PUSH
29781: LD_INT 28
29783: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29784: LD_ADDR_VAR 0 11
29788: PUSH
29789: LD_VAR 0 1
29793: PPUSH
29794: CALL_OW 310
29798: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29799: LD_VAR 0 11
29803: PPUSH
29804: CALL_OW 247
29808: PUSH
29809: LD_INT 2
29811: EQUAL
29812: IFFALSE 29816
// exit ;
29814: GO 30326
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29816: LD_ADDR_VAR 0 8
29820: PUSH
29821: LD_INT 81
29823: PUSH
29824: LD_VAR 0 9
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 3
29835: PUSH
29836: LD_INT 21
29838: PUSH
29839: LD_INT 3
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PPUSH
29854: CALL_OW 69
29858: ST_TO_ADDR
// if not tmp then
29859: LD_VAR 0 8
29863: NOT
29864: IFFALSE 29868
// exit ;
29866: GO 30326
// if in_unit then
29868: LD_VAR 0 11
29872: IFFALSE 29896
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29874: LD_ADDR_VAR 0 10
29878: PUSH
29879: LD_VAR 0 8
29883: PPUSH
29884: LD_VAR 0 11
29888: PPUSH
29889: CALL_OW 74
29893: ST_TO_ADDR
29894: GO 29916
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29896: LD_ADDR_VAR 0 10
29900: PUSH
29901: LD_VAR 0 8
29905: PPUSH
29906: LD_VAR 0 1
29910: PPUSH
29911: CALL_OW 74
29915: ST_TO_ADDR
// if not enemy then
29916: LD_VAR 0 10
29920: NOT
29921: IFFALSE 29925
// exit ;
29923: GO 30326
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29925: LD_VAR 0 11
29929: PUSH
29930: LD_VAR 0 11
29934: PPUSH
29935: LD_VAR 0 10
29939: PPUSH
29940: CALL_OW 296
29944: PUSH
29945: LD_INT 13
29947: GREATER
29948: AND
29949: PUSH
29950: LD_VAR 0 1
29954: PPUSH
29955: LD_VAR 0 10
29959: PPUSH
29960: CALL_OW 296
29964: PUSH
29965: LD_INT 12
29967: GREATER
29968: OR
29969: IFFALSE 29973
// exit ;
29971: GO 30326
// missile := [ 1 ] ;
29973: LD_ADDR_VAR 0 14
29977: PUSH
29978: LD_INT 1
29980: PUSH
29981: EMPTY
29982: LIST
29983: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29984: LD_VAR 0 9
29988: PPUSH
29989: LD_VAR 0 12
29993: PPUSH
29994: CALL_OW 325
29998: IFFALSE 30027
// missile := Insert ( missile , missile + 1 , 2 ) ;
30000: LD_ADDR_VAR 0 14
30004: PUSH
30005: LD_VAR 0 14
30009: PPUSH
30010: LD_VAR 0 14
30014: PUSH
30015: LD_INT 1
30017: PLUS
30018: PPUSH
30019: LD_INT 2
30021: PPUSH
30022: CALL_OW 2
30026: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30027: LD_VAR 0 9
30031: PPUSH
30032: LD_VAR 0 13
30036: PPUSH
30037: CALL_OW 325
30041: PUSH
30042: LD_VAR 0 10
30046: PPUSH
30047: CALL_OW 255
30051: PPUSH
30052: LD_VAR 0 13
30056: PPUSH
30057: CALL_OW 325
30061: NOT
30062: AND
30063: IFFALSE 30092
// missile := Insert ( missile , missile + 1 , 3 ) ;
30065: LD_ADDR_VAR 0 14
30069: PUSH
30070: LD_VAR 0 14
30074: PPUSH
30075: LD_VAR 0 14
30079: PUSH
30080: LD_INT 1
30082: PLUS
30083: PPUSH
30084: LD_INT 3
30086: PPUSH
30087: CALL_OW 2
30091: ST_TO_ADDR
// if missile < 2 then
30092: LD_VAR 0 14
30096: PUSH
30097: LD_INT 2
30099: LESS
30100: IFFALSE 30104
// exit ;
30102: GO 30326
// x := GetX ( enemy ) ;
30104: LD_ADDR_VAR 0 4
30108: PUSH
30109: LD_VAR 0 10
30113: PPUSH
30114: CALL_OW 250
30118: ST_TO_ADDR
// y := GetY ( enemy ) ;
30119: LD_ADDR_VAR 0 5
30123: PUSH
30124: LD_VAR 0 10
30128: PPUSH
30129: CALL_OW 251
30133: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30134: LD_ADDR_VAR 0 6
30138: PUSH
30139: LD_VAR 0 4
30143: PUSH
30144: LD_INT 1
30146: NEG
30147: PPUSH
30148: LD_INT 1
30150: PPUSH
30151: CALL_OW 12
30155: PLUS
30156: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30157: LD_ADDR_VAR 0 7
30161: PUSH
30162: LD_VAR 0 5
30166: PUSH
30167: LD_INT 1
30169: NEG
30170: PPUSH
30171: LD_INT 1
30173: PPUSH
30174: CALL_OW 12
30178: PLUS
30179: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30180: LD_VAR 0 6
30184: PPUSH
30185: LD_VAR 0 7
30189: PPUSH
30190: CALL_OW 488
30194: NOT
30195: IFFALSE 30217
// begin _x := x ;
30197: LD_ADDR_VAR 0 6
30201: PUSH
30202: LD_VAR 0 4
30206: ST_TO_ADDR
// _y := y ;
30207: LD_ADDR_VAR 0 7
30211: PUSH
30212: LD_VAR 0 5
30216: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30217: LD_ADDR_VAR 0 3
30221: PUSH
30222: LD_INT 1
30224: PPUSH
30225: LD_VAR 0 14
30229: PPUSH
30230: CALL_OW 12
30234: ST_TO_ADDR
// case i of 1 :
30235: LD_VAR 0 3
30239: PUSH
30240: LD_INT 1
30242: DOUBLE
30243: EQUAL
30244: IFTRUE 30248
30246: GO 30265
30248: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30249: LD_VAR 0 1
30253: PPUSH
30254: LD_VAR 0 10
30258: PPUSH
30259: CALL_OW 115
30263: GO 30326
30265: LD_INT 2
30267: DOUBLE
30268: EQUAL
30269: IFTRUE 30273
30271: GO 30295
30273: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30274: LD_VAR 0 1
30278: PPUSH
30279: LD_VAR 0 6
30283: PPUSH
30284: LD_VAR 0 7
30288: PPUSH
30289: CALL_OW 153
30293: GO 30326
30295: LD_INT 3
30297: DOUBLE
30298: EQUAL
30299: IFTRUE 30303
30301: GO 30325
30303: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30304: LD_VAR 0 1
30308: PPUSH
30309: LD_VAR 0 6
30313: PPUSH
30314: LD_VAR 0 7
30318: PPUSH
30319: CALL_OW 154
30323: GO 30326
30325: POP
// end ;
30326: LD_VAR 0 2
30330: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30331: LD_INT 0
30333: PPUSH
30334: PPUSH
30335: PPUSH
30336: PPUSH
30337: PPUSH
30338: PPUSH
// if not unit or not building then
30339: LD_VAR 0 1
30343: NOT
30344: PUSH
30345: LD_VAR 0 2
30349: NOT
30350: OR
30351: IFFALSE 30355
// exit ;
30353: GO 30513
// x := GetX ( building ) ;
30355: LD_ADDR_VAR 0 5
30359: PUSH
30360: LD_VAR 0 2
30364: PPUSH
30365: CALL_OW 250
30369: ST_TO_ADDR
// y := GetY ( building ) ;
30370: LD_ADDR_VAR 0 6
30374: PUSH
30375: LD_VAR 0 2
30379: PPUSH
30380: CALL_OW 251
30384: ST_TO_ADDR
// for i = 0 to 5 do
30385: LD_ADDR_VAR 0 4
30389: PUSH
30390: DOUBLE
30391: LD_INT 0
30393: DEC
30394: ST_TO_ADDR
30395: LD_INT 5
30397: PUSH
30398: FOR_TO
30399: IFFALSE 30511
// begin _x := ShiftX ( x , i , 3 ) ;
30401: LD_ADDR_VAR 0 7
30405: PUSH
30406: LD_VAR 0 5
30410: PPUSH
30411: LD_VAR 0 4
30415: PPUSH
30416: LD_INT 3
30418: PPUSH
30419: CALL_OW 272
30423: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30424: LD_ADDR_VAR 0 8
30428: PUSH
30429: LD_VAR 0 6
30433: PPUSH
30434: LD_VAR 0 4
30438: PPUSH
30439: LD_INT 3
30441: PPUSH
30442: CALL_OW 273
30446: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30447: LD_VAR 0 7
30451: PPUSH
30452: LD_VAR 0 8
30456: PPUSH
30457: CALL_OW 488
30461: NOT
30462: IFFALSE 30466
// continue ;
30464: GO 30398
// if HexInfo ( _x , _y ) = 0 then
30466: LD_VAR 0 7
30470: PPUSH
30471: LD_VAR 0 8
30475: PPUSH
30476: CALL_OW 428
30480: PUSH
30481: LD_INT 0
30483: EQUAL
30484: IFFALSE 30509
// begin ComMoveXY ( unit , _x , _y ) ;
30486: LD_VAR 0 1
30490: PPUSH
30491: LD_VAR 0 7
30495: PPUSH
30496: LD_VAR 0 8
30500: PPUSH
30501: CALL_OW 111
// exit ;
30505: POP
30506: POP
30507: GO 30513
// end ; end ;
30509: GO 30398
30511: POP
30512: POP
// end ;
30513: LD_VAR 0 3
30517: RET
// export function ScanBase ( side , base_area ) ; begin
30518: LD_INT 0
30520: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30521: LD_ADDR_VAR 0 3
30525: PUSH
30526: LD_VAR 0 2
30530: PPUSH
30531: LD_INT 81
30533: PUSH
30534: LD_VAR 0 1
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PPUSH
30543: CALL_OW 70
30547: ST_TO_ADDR
// end ;
30548: LD_VAR 0 3
30552: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30553: LD_INT 0
30555: PPUSH
30556: PPUSH
30557: PPUSH
30558: PPUSH
// result := false ;
30559: LD_ADDR_VAR 0 2
30563: PUSH
30564: LD_INT 0
30566: ST_TO_ADDR
// side := GetSide ( unit ) ;
30567: LD_ADDR_VAR 0 3
30571: PUSH
30572: LD_VAR 0 1
30576: PPUSH
30577: CALL_OW 255
30581: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30582: LD_ADDR_VAR 0 4
30586: PUSH
30587: LD_VAR 0 1
30591: PPUSH
30592: CALL_OW 248
30596: ST_TO_ADDR
// case nat of 1 :
30597: LD_VAR 0 4
30601: PUSH
30602: LD_INT 1
30604: DOUBLE
30605: EQUAL
30606: IFTRUE 30610
30608: GO 30621
30610: POP
// tech := tech_lassight ; 2 :
30611: LD_ADDR_VAR 0 5
30615: PUSH
30616: LD_INT 12
30618: ST_TO_ADDR
30619: GO 30660
30621: LD_INT 2
30623: DOUBLE
30624: EQUAL
30625: IFTRUE 30629
30627: GO 30640
30629: POP
// tech := tech_mortar ; 3 :
30630: LD_ADDR_VAR 0 5
30634: PUSH
30635: LD_INT 41
30637: ST_TO_ADDR
30638: GO 30660
30640: LD_INT 3
30642: DOUBLE
30643: EQUAL
30644: IFTRUE 30648
30646: GO 30659
30648: POP
// tech := tech_bazooka ; end ;
30649: LD_ADDR_VAR 0 5
30653: PUSH
30654: LD_INT 44
30656: ST_TO_ADDR
30657: GO 30660
30659: POP
// if Researched ( side , tech ) then
30660: LD_VAR 0 3
30664: PPUSH
30665: LD_VAR 0 5
30669: PPUSH
30670: CALL_OW 325
30674: IFFALSE 30701
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30676: LD_ADDR_VAR 0 2
30680: PUSH
30681: LD_INT 5
30683: PUSH
30684: LD_INT 8
30686: PUSH
30687: LD_INT 9
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: LIST
30694: PUSH
30695: LD_VAR 0 4
30699: ARRAY
30700: ST_TO_ADDR
// end ;
30701: LD_VAR 0 2
30705: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30706: LD_INT 0
30708: PPUSH
30709: PPUSH
30710: PPUSH
// if not mines then
30711: LD_VAR 0 2
30715: NOT
30716: IFFALSE 30720
// exit ;
30718: GO 30864
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30720: LD_ADDR_VAR 0 5
30724: PUSH
30725: LD_INT 81
30727: PUSH
30728: LD_VAR 0 1
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 3
30739: PUSH
30740: LD_INT 21
30742: PUSH
30743: LD_INT 3
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PPUSH
30758: CALL_OW 69
30762: ST_TO_ADDR
// for i in mines do
30763: LD_ADDR_VAR 0 4
30767: PUSH
30768: LD_VAR 0 2
30772: PUSH
30773: FOR_IN
30774: IFFALSE 30862
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30776: LD_VAR 0 4
30780: PUSH
30781: LD_INT 1
30783: ARRAY
30784: PPUSH
30785: LD_VAR 0 4
30789: PUSH
30790: LD_INT 2
30792: ARRAY
30793: PPUSH
30794: CALL_OW 458
30798: NOT
30799: IFFALSE 30803
// continue ;
30801: GO 30773
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30803: LD_VAR 0 4
30807: PUSH
30808: LD_INT 1
30810: ARRAY
30811: PPUSH
30812: LD_VAR 0 4
30816: PUSH
30817: LD_INT 2
30819: ARRAY
30820: PPUSH
30821: CALL_OW 428
30825: PUSH
30826: LD_VAR 0 5
30830: IN
30831: IFFALSE 30860
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30833: LD_VAR 0 4
30837: PUSH
30838: LD_INT 1
30840: ARRAY
30841: PPUSH
30842: LD_VAR 0 4
30846: PUSH
30847: LD_INT 2
30849: ARRAY
30850: PPUSH
30851: LD_VAR 0 1
30855: PPUSH
30856: CALL_OW 456
// end ;
30860: GO 30773
30862: POP
30863: POP
// end ;
30864: LD_VAR 0 3
30868: RET
// export function Count ( array ) ; var i ; begin
30869: LD_INT 0
30871: PPUSH
30872: PPUSH
// result := 0 ;
30873: LD_ADDR_VAR 0 2
30877: PUSH
30878: LD_INT 0
30880: ST_TO_ADDR
// for i in array do
30881: LD_ADDR_VAR 0 3
30885: PUSH
30886: LD_VAR 0 1
30890: PUSH
30891: FOR_IN
30892: IFFALSE 30916
// if i then
30894: LD_VAR 0 3
30898: IFFALSE 30914
// result := result + 1 ;
30900: LD_ADDR_VAR 0 2
30904: PUSH
30905: LD_VAR 0 2
30909: PUSH
30910: LD_INT 1
30912: PLUS
30913: ST_TO_ADDR
30914: GO 30891
30916: POP
30917: POP
// end ;
30918: LD_VAR 0 2
30922: RET
// export function IsEmpty ( building ) ; begin
30923: LD_INT 0
30925: PPUSH
// if not building then
30926: LD_VAR 0 1
30930: NOT
30931: IFFALSE 30935
// exit ;
30933: GO 30978
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30935: LD_ADDR_VAR 0 2
30939: PUSH
30940: LD_VAR 0 1
30944: PUSH
30945: LD_INT 22
30947: PUSH
30948: LD_VAR 0 1
30952: PPUSH
30953: CALL_OW 255
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 58
30964: PUSH
30965: EMPTY
30966: LIST
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PPUSH
30972: CALL_OW 69
30976: IN
30977: ST_TO_ADDR
// end ;
30978: LD_VAR 0 2
30982: RET
// export function IsNotFull ( building ) ; begin
30983: LD_INT 0
30985: PPUSH
// if not building then
30986: LD_VAR 0 1
30990: NOT
30991: IFFALSE 30995
// exit ;
30993: GO 31014
// result := UnitsInside ( building ) < 6 ;
30995: LD_ADDR_VAR 0 2
30999: PUSH
31000: LD_VAR 0 1
31004: PPUSH
31005: CALL_OW 313
31009: PUSH
31010: LD_INT 6
31012: LESS
31013: ST_TO_ADDR
// end ;
31014: LD_VAR 0 2
31018: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31019: LD_INT 0
31021: PPUSH
31022: PPUSH
31023: PPUSH
31024: PPUSH
// tmp := [ ] ;
31025: LD_ADDR_VAR 0 3
31029: PUSH
31030: EMPTY
31031: ST_TO_ADDR
// list := [ ] ;
31032: LD_ADDR_VAR 0 5
31036: PUSH
31037: EMPTY
31038: ST_TO_ADDR
// for i = 16 to 25 do
31039: LD_ADDR_VAR 0 4
31043: PUSH
31044: DOUBLE
31045: LD_INT 16
31047: DEC
31048: ST_TO_ADDR
31049: LD_INT 25
31051: PUSH
31052: FOR_TO
31053: IFFALSE 31126
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31055: LD_ADDR_VAR 0 3
31059: PUSH
31060: LD_VAR 0 3
31064: PUSH
31065: LD_INT 22
31067: PUSH
31068: LD_VAR 0 1
31072: PPUSH
31073: CALL_OW 255
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 91
31084: PUSH
31085: LD_VAR 0 1
31089: PUSH
31090: LD_INT 6
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 30
31100: PUSH
31101: LD_VAR 0 4
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: LIST
31114: PUSH
31115: EMPTY
31116: LIST
31117: PPUSH
31118: CALL_OW 69
31122: ADD
31123: ST_TO_ADDR
31124: GO 31052
31126: POP
31127: POP
// for i = 1 to tmp do
31128: LD_ADDR_VAR 0 4
31132: PUSH
31133: DOUBLE
31134: LD_INT 1
31136: DEC
31137: ST_TO_ADDR
31138: LD_VAR 0 3
31142: PUSH
31143: FOR_TO
31144: IFFALSE 31232
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31146: LD_ADDR_VAR 0 5
31150: PUSH
31151: LD_VAR 0 5
31155: PUSH
31156: LD_VAR 0 3
31160: PUSH
31161: LD_VAR 0 4
31165: ARRAY
31166: PPUSH
31167: CALL_OW 266
31171: PUSH
31172: LD_VAR 0 3
31176: PUSH
31177: LD_VAR 0 4
31181: ARRAY
31182: PPUSH
31183: CALL_OW 250
31187: PUSH
31188: LD_VAR 0 3
31192: PUSH
31193: LD_VAR 0 4
31197: ARRAY
31198: PPUSH
31199: CALL_OW 251
31203: PUSH
31204: LD_VAR 0 3
31208: PUSH
31209: LD_VAR 0 4
31213: ARRAY
31214: PPUSH
31215: CALL_OW 254
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: PUSH
31226: EMPTY
31227: LIST
31228: ADD
31229: ST_TO_ADDR
31230: GO 31143
31232: POP
31233: POP
// result := list ;
31234: LD_ADDR_VAR 0 2
31238: PUSH
31239: LD_VAR 0 5
31243: ST_TO_ADDR
// end ;
31244: LD_VAR 0 2
31248: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31249: LD_INT 0
31251: PPUSH
31252: PPUSH
31253: PPUSH
31254: PPUSH
31255: PPUSH
31256: PPUSH
31257: PPUSH
// if not factory then
31258: LD_VAR 0 1
31262: NOT
31263: IFFALSE 31267
// exit ;
31265: GO 31860
// if control = control_apeman then
31267: LD_VAR 0 4
31271: PUSH
31272: LD_INT 5
31274: EQUAL
31275: IFFALSE 31384
// begin tmp := UnitsInside ( factory ) ;
31277: LD_ADDR_VAR 0 8
31281: PUSH
31282: LD_VAR 0 1
31286: PPUSH
31287: CALL_OW 313
31291: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31292: LD_VAR 0 8
31296: PPUSH
31297: LD_INT 25
31299: PUSH
31300: LD_INT 12
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PPUSH
31307: CALL_OW 72
31311: NOT
31312: IFFALSE 31322
// control := control_manual ;
31314: LD_ADDR_VAR 0 4
31318: PUSH
31319: LD_INT 1
31321: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31322: LD_ADDR_VAR 0 8
31326: PUSH
31327: LD_VAR 0 1
31331: PPUSH
31332: CALL 31019 0 1
31336: ST_TO_ADDR
// if tmp then
31337: LD_VAR 0 8
31341: IFFALSE 31384
// begin for i in tmp do
31343: LD_ADDR_VAR 0 7
31347: PUSH
31348: LD_VAR 0 8
31352: PUSH
31353: FOR_IN
31354: IFFALSE 31382
// if i [ 1 ] = b_ext_radio then
31356: LD_VAR 0 7
31360: PUSH
31361: LD_INT 1
31363: ARRAY
31364: PUSH
31365: LD_INT 22
31367: EQUAL
31368: IFFALSE 31380
// begin control := control_remote ;
31370: LD_ADDR_VAR 0 4
31374: PUSH
31375: LD_INT 2
31377: ST_TO_ADDR
// break ;
31378: GO 31382
// end ;
31380: GO 31353
31382: POP
31383: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31384: LD_VAR 0 1
31388: PPUSH
31389: LD_VAR 0 2
31393: PPUSH
31394: LD_VAR 0 3
31398: PPUSH
31399: LD_VAR 0 4
31403: PPUSH
31404: LD_VAR 0 5
31408: PPUSH
31409: CALL_OW 448
31413: IFFALSE 31448
// begin result := [ chassis , engine , control , weapon ] ;
31415: LD_ADDR_VAR 0 6
31419: PUSH
31420: LD_VAR 0 2
31424: PUSH
31425: LD_VAR 0 3
31429: PUSH
31430: LD_VAR 0 4
31434: PUSH
31435: LD_VAR 0 5
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: ST_TO_ADDR
// exit ;
31446: GO 31860
// end ; _chassis := AvailableChassisList ( factory ) ;
31448: LD_ADDR_VAR 0 9
31452: PUSH
31453: LD_VAR 0 1
31457: PPUSH
31458: CALL_OW 475
31462: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31463: LD_ADDR_VAR 0 11
31467: PUSH
31468: LD_VAR 0 1
31472: PPUSH
31473: CALL_OW 476
31477: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31478: LD_ADDR_VAR 0 12
31482: PUSH
31483: LD_VAR 0 1
31487: PPUSH
31488: CALL_OW 477
31492: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31493: LD_ADDR_VAR 0 10
31497: PUSH
31498: LD_VAR 0 1
31502: PPUSH
31503: CALL_OW 478
31507: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31508: LD_VAR 0 9
31512: NOT
31513: PUSH
31514: LD_VAR 0 11
31518: NOT
31519: OR
31520: PUSH
31521: LD_VAR 0 12
31525: NOT
31526: OR
31527: PUSH
31528: LD_VAR 0 10
31532: NOT
31533: OR
31534: IFFALSE 31569
// begin result := [ chassis , engine , control , weapon ] ;
31536: LD_ADDR_VAR 0 6
31540: PUSH
31541: LD_VAR 0 2
31545: PUSH
31546: LD_VAR 0 3
31550: PUSH
31551: LD_VAR 0 4
31555: PUSH
31556: LD_VAR 0 5
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: ST_TO_ADDR
// exit ;
31567: GO 31860
// end ; if not chassis in _chassis then
31569: LD_VAR 0 2
31573: PUSH
31574: LD_VAR 0 9
31578: IN
31579: NOT
31580: IFFALSE 31606
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31582: LD_ADDR_VAR 0 2
31586: PUSH
31587: LD_VAR 0 9
31591: PUSH
31592: LD_INT 1
31594: PPUSH
31595: LD_VAR 0 9
31599: PPUSH
31600: CALL_OW 12
31604: ARRAY
31605: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31606: LD_VAR 0 2
31610: PPUSH
31611: LD_VAR 0 3
31615: PPUSH
31616: CALL 31865 0 2
31620: NOT
31621: IFFALSE 31680
// repeat engine := _engine [ 1 ] ;
31623: LD_ADDR_VAR 0 3
31627: PUSH
31628: LD_VAR 0 11
31632: PUSH
31633: LD_INT 1
31635: ARRAY
31636: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31637: LD_ADDR_VAR 0 11
31641: PUSH
31642: LD_VAR 0 11
31646: PPUSH
31647: LD_INT 1
31649: PPUSH
31650: CALL_OW 3
31654: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31655: LD_VAR 0 2
31659: PPUSH
31660: LD_VAR 0 3
31664: PPUSH
31665: CALL 31865 0 2
31669: PUSH
31670: LD_VAR 0 11
31674: PUSH
31675: EMPTY
31676: EQUAL
31677: OR
31678: IFFALSE 31623
// if not control in _control then
31680: LD_VAR 0 4
31684: PUSH
31685: LD_VAR 0 12
31689: IN
31690: NOT
31691: IFFALSE 31717
// control := _control [ rand ( 1 , _control ) ] ;
31693: LD_ADDR_VAR 0 4
31697: PUSH
31698: LD_VAR 0 12
31702: PUSH
31703: LD_INT 1
31705: PPUSH
31706: LD_VAR 0 12
31710: PPUSH
31711: CALL_OW 12
31715: ARRAY
31716: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31717: LD_VAR 0 2
31721: PPUSH
31722: LD_VAR 0 5
31726: PPUSH
31727: CALL 32085 0 2
31731: NOT
31732: IFFALSE 31791
// repeat weapon := _weapon [ 1 ] ;
31734: LD_ADDR_VAR 0 5
31738: PUSH
31739: LD_VAR 0 10
31743: PUSH
31744: LD_INT 1
31746: ARRAY
31747: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31748: LD_ADDR_VAR 0 10
31752: PUSH
31753: LD_VAR 0 10
31757: PPUSH
31758: LD_INT 1
31760: PPUSH
31761: CALL_OW 3
31765: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31766: LD_VAR 0 2
31770: PPUSH
31771: LD_VAR 0 5
31775: PPUSH
31776: CALL 32085 0 2
31780: PUSH
31781: LD_VAR 0 10
31785: PUSH
31786: EMPTY
31787: EQUAL
31788: OR
31789: IFFALSE 31734
// result := [ ] ;
31791: LD_ADDR_VAR 0 6
31795: PUSH
31796: EMPTY
31797: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31798: LD_VAR 0 1
31802: PPUSH
31803: LD_VAR 0 2
31807: PPUSH
31808: LD_VAR 0 3
31812: PPUSH
31813: LD_VAR 0 4
31817: PPUSH
31818: LD_VAR 0 5
31822: PPUSH
31823: CALL_OW 448
31827: IFFALSE 31860
// result := [ chassis , engine , control , weapon ] ;
31829: LD_ADDR_VAR 0 6
31833: PUSH
31834: LD_VAR 0 2
31838: PUSH
31839: LD_VAR 0 3
31843: PUSH
31844: LD_VAR 0 4
31848: PUSH
31849: LD_VAR 0 5
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: ST_TO_ADDR
// end ;
31860: LD_VAR 0 6
31864: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31865: LD_INT 0
31867: PPUSH
// if not chassis or not engine then
31868: LD_VAR 0 1
31872: NOT
31873: PUSH
31874: LD_VAR 0 2
31878: NOT
31879: OR
31880: IFFALSE 31884
// exit ;
31882: GO 32080
// case engine of engine_solar :
31884: LD_VAR 0 2
31888: PUSH
31889: LD_INT 2
31891: DOUBLE
31892: EQUAL
31893: IFTRUE 31897
31895: GO 31935
31897: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31898: LD_ADDR_VAR 0 3
31902: PUSH
31903: LD_INT 11
31905: PUSH
31906: LD_INT 12
31908: PUSH
31909: LD_INT 13
31911: PUSH
31912: LD_INT 14
31914: PUSH
31915: LD_INT 1
31917: PUSH
31918: LD_INT 2
31920: PUSH
31921: LD_INT 3
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: ST_TO_ADDR
31933: GO 32064
31935: LD_INT 1
31937: DOUBLE
31938: EQUAL
31939: IFTRUE 31943
31941: GO 32005
31943: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31944: LD_ADDR_VAR 0 3
31948: PUSH
31949: LD_INT 11
31951: PUSH
31952: LD_INT 12
31954: PUSH
31955: LD_INT 13
31957: PUSH
31958: LD_INT 14
31960: PUSH
31961: LD_INT 1
31963: PUSH
31964: LD_INT 2
31966: PUSH
31967: LD_INT 3
31969: PUSH
31970: LD_INT 4
31972: PUSH
31973: LD_INT 5
31975: PUSH
31976: LD_INT 21
31978: PUSH
31979: LD_INT 23
31981: PUSH
31982: LD_INT 22
31984: PUSH
31985: LD_INT 24
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: ST_TO_ADDR
32003: GO 32064
32005: LD_INT 3
32007: DOUBLE
32008: EQUAL
32009: IFTRUE 32013
32011: GO 32063
32013: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32014: LD_ADDR_VAR 0 3
32018: PUSH
32019: LD_INT 13
32021: PUSH
32022: LD_INT 14
32024: PUSH
32025: LD_INT 2
32027: PUSH
32028: LD_INT 3
32030: PUSH
32031: LD_INT 4
32033: PUSH
32034: LD_INT 5
32036: PUSH
32037: LD_INT 21
32039: PUSH
32040: LD_INT 22
32042: PUSH
32043: LD_INT 23
32045: PUSH
32046: LD_INT 24
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: ST_TO_ADDR
32061: GO 32064
32063: POP
// result := ( chassis in result ) ;
32064: LD_ADDR_VAR 0 3
32068: PUSH
32069: LD_VAR 0 1
32073: PUSH
32074: LD_VAR 0 3
32078: IN
32079: ST_TO_ADDR
// end ;
32080: LD_VAR 0 3
32084: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32085: LD_INT 0
32087: PPUSH
// if not chassis or not weapon then
32088: LD_VAR 0 1
32092: NOT
32093: PUSH
32094: LD_VAR 0 2
32098: NOT
32099: OR
32100: IFFALSE 32104
// exit ;
32102: GO 33130
// case weapon of us_machine_gun :
32104: LD_VAR 0 2
32108: PUSH
32109: LD_INT 2
32111: DOUBLE
32112: EQUAL
32113: IFTRUE 32117
32115: GO 32147
32117: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32118: LD_ADDR_VAR 0 3
32122: PUSH
32123: LD_INT 1
32125: PUSH
32126: LD_INT 2
32128: PUSH
32129: LD_INT 3
32131: PUSH
32132: LD_INT 4
32134: PUSH
32135: LD_INT 5
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: ST_TO_ADDR
32145: GO 33114
32147: LD_INT 3
32149: DOUBLE
32150: EQUAL
32151: IFTRUE 32155
32153: GO 32185
32155: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32156: LD_ADDR_VAR 0 3
32160: PUSH
32161: LD_INT 1
32163: PUSH
32164: LD_INT 2
32166: PUSH
32167: LD_INT 3
32169: PUSH
32170: LD_INT 4
32172: PUSH
32173: LD_INT 5
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: ST_TO_ADDR
32183: GO 33114
32185: LD_INT 11
32187: DOUBLE
32188: EQUAL
32189: IFTRUE 32193
32191: GO 32223
32193: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32194: LD_ADDR_VAR 0 3
32198: PUSH
32199: LD_INT 1
32201: PUSH
32202: LD_INT 2
32204: PUSH
32205: LD_INT 3
32207: PUSH
32208: LD_INT 4
32210: PUSH
32211: LD_INT 5
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: ST_TO_ADDR
32221: GO 33114
32223: LD_INT 4
32225: DOUBLE
32226: EQUAL
32227: IFTRUE 32231
32229: GO 32257
32231: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32232: LD_ADDR_VAR 0 3
32236: PUSH
32237: LD_INT 2
32239: PUSH
32240: LD_INT 3
32242: PUSH
32243: LD_INT 4
32245: PUSH
32246: LD_INT 5
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: ST_TO_ADDR
32255: GO 33114
32257: LD_INT 5
32259: DOUBLE
32260: EQUAL
32261: IFTRUE 32265
32263: GO 32291
32265: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32266: LD_ADDR_VAR 0 3
32270: PUSH
32271: LD_INT 2
32273: PUSH
32274: LD_INT 3
32276: PUSH
32277: LD_INT 4
32279: PUSH
32280: LD_INT 5
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: ST_TO_ADDR
32289: GO 33114
32291: LD_INT 9
32293: DOUBLE
32294: EQUAL
32295: IFTRUE 32299
32297: GO 32325
32299: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32300: LD_ADDR_VAR 0 3
32304: PUSH
32305: LD_INT 2
32307: PUSH
32308: LD_INT 3
32310: PUSH
32311: LD_INT 4
32313: PUSH
32314: LD_INT 5
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: ST_TO_ADDR
32323: GO 33114
32325: LD_INT 7
32327: DOUBLE
32328: EQUAL
32329: IFTRUE 32333
32331: GO 32359
32333: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32334: LD_ADDR_VAR 0 3
32338: PUSH
32339: LD_INT 2
32341: PUSH
32342: LD_INT 3
32344: PUSH
32345: LD_INT 4
32347: PUSH
32348: LD_INT 5
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: ST_TO_ADDR
32357: GO 33114
32359: LD_INT 12
32361: DOUBLE
32362: EQUAL
32363: IFTRUE 32367
32365: GO 32393
32367: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32368: LD_ADDR_VAR 0 3
32372: PUSH
32373: LD_INT 2
32375: PUSH
32376: LD_INT 3
32378: PUSH
32379: LD_INT 4
32381: PUSH
32382: LD_INT 5
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: ST_TO_ADDR
32391: GO 33114
32393: LD_INT 13
32395: DOUBLE
32396: EQUAL
32397: IFTRUE 32401
32399: GO 32427
32401: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32402: LD_ADDR_VAR 0 3
32406: PUSH
32407: LD_INT 2
32409: PUSH
32410: LD_INT 3
32412: PUSH
32413: LD_INT 4
32415: PUSH
32416: LD_INT 5
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: ST_TO_ADDR
32425: GO 33114
32427: LD_INT 14
32429: DOUBLE
32430: EQUAL
32431: IFTRUE 32435
32433: GO 32453
32435: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32436: LD_ADDR_VAR 0 3
32440: PUSH
32441: LD_INT 4
32443: PUSH
32444: LD_INT 5
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: ST_TO_ADDR
32451: GO 33114
32453: LD_INT 6
32455: DOUBLE
32456: EQUAL
32457: IFTRUE 32461
32459: GO 32479
32461: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32462: LD_ADDR_VAR 0 3
32466: PUSH
32467: LD_INT 4
32469: PUSH
32470: LD_INT 5
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: ST_TO_ADDR
32477: GO 33114
32479: LD_INT 10
32481: DOUBLE
32482: EQUAL
32483: IFTRUE 32487
32485: GO 32505
32487: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32488: LD_ADDR_VAR 0 3
32492: PUSH
32493: LD_INT 4
32495: PUSH
32496: LD_INT 5
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: ST_TO_ADDR
32503: GO 33114
32505: LD_INT 22
32507: DOUBLE
32508: EQUAL
32509: IFTRUE 32513
32511: GO 32539
32513: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32514: LD_ADDR_VAR 0 3
32518: PUSH
32519: LD_INT 11
32521: PUSH
32522: LD_INT 12
32524: PUSH
32525: LD_INT 13
32527: PUSH
32528: LD_INT 14
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: ST_TO_ADDR
32537: GO 33114
32539: LD_INT 23
32541: DOUBLE
32542: EQUAL
32543: IFTRUE 32547
32545: GO 32573
32547: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32548: LD_ADDR_VAR 0 3
32552: PUSH
32553: LD_INT 11
32555: PUSH
32556: LD_INT 12
32558: PUSH
32559: LD_INT 13
32561: PUSH
32562: LD_INT 14
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: ST_TO_ADDR
32571: GO 33114
32573: LD_INT 24
32575: DOUBLE
32576: EQUAL
32577: IFTRUE 32581
32579: GO 32607
32581: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32582: LD_ADDR_VAR 0 3
32586: PUSH
32587: LD_INT 11
32589: PUSH
32590: LD_INT 12
32592: PUSH
32593: LD_INT 13
32595: PUSH
32596: LD_INT 14
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: ST_TO_ADDR
32605: GO 33114
32607: LD_INT 30
32609: DOUBLE
32610: EQUAL
32611: IFTRUE 32615
32613: GO 32641
32615: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32616: LD_ADDR_VAR 0 3
32620: PUSH
32621: LD_INT 11
32623: PUSH
32624: LD_INT 12
32626: PUSH
32627: LD_INT 13
32629: PUSH
32630: LD_INT 14
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: ST_TO_ADDR
32639: GO 33114
32641: LD_INT 25
32643: DOUBLE
32644: EQUAL
32645: IFTRUE 32649
32647: GO 32667
32649: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32650: LD_ADDR_VAR 0 3
32654: PUSH
32655: LD_INT 13
32657: PUSH
32658: LD_INT 14
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: ST_TO_ADDR
32665: GO 33114
32667: LD_INT 27
32669: DOUBLE
32670: EQUAL
32671: IFTRUE 32675
32673: GO 32693
32675: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32676: LD_ADDR_VAR 0 3
32680: PUSH
32681: LD_INT 13
32683: PUSH
32684: LD_INT 14
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: ST_TO_ADDR
32691: GO 33114
32693: LD_INT 28
32695: DOUBLE
32696: EQUAL
32697: IFTRUE 32701
32699: GO 32719
32701: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32702: LD_ADDR_VAR 0 3
32706: PUSH
32707: LD_INT 13
32709: PUSH
32710: LD_INT 14
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: ST_TO_ADDR
32717: GO 33114
32719: LD_INT 29
32721: DOUBLE
32722: EQUAL
32723: IFTRUE 32727
32725: GO 32745
32727: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32728: LD_ADDR_VAR 0 3
32732: PUSH
32733: LD_INT 13
32735: PUSH
32736: LD_INT 14
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: ST_TO_ADDR
32743: GO 33114
32745: LD_INT 31
32747: DOUBLE
32748: EQUAL
32749: IFTRUE 32753
32751: GO 32771
32753: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32754: LD_ADDR_VAR 0 3
32758: PUSH
32759: LD_INT 13
32761: PUSH
32762: LD_INT 14
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: ST_TO_ADDR
32769: GO 33114
32771: LD_INT 26
32773: DOUBLE
32774: EQUAL
32775: IFTRUE 32779
32777: GO 32797
32779: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32780: LD_ADDR_VAR 0 3
32784: PUSH
32785: LD_INT 13
32787: PUSH
32788: LD_INT 14
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: ST_TO_ADDR
32795: GO 33114
32797: LD_INT 42
32799: DOUBLE
32800: EQUAL
32801: IFTRUE 32805
32803: GO 32831
32805: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32806: LD_ADDR_VAR 0 3
32810: PUSH
32811: LD_INT 21
32813: PUSH
32814: LD_INT 22
32816: PUSH
32817: LD_INT 23
32819: PUSH
32820: LD_INT 24
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: ST_TO_ADDR
32829: GO 33114
32831: LD_INT 43
32833: DOUBLE
32834: EQUAL
32835: IFTRUE 32839
32837: GO 32865
32839: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32840: LD_ADDR_VAR 0 3
32844: PUSH
32845: LD_INT 21
32847: PUSH
32848: LD_INT 22
32850: PUSH
32851: LD_INT 23
32853: PUSH
32854: LD_INT 24
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: ST_TO_ADDR
32863: GO 33114
32865: LD_INT 44
32867: DOUBLE
32868: EQUAL
32869: IFTRUE 32873
32871: GO 32899
32873: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32874: LD_ADDR_VAR 0 3
32878: PUSH
32879: LD_INT 21
32881: PUSH
32882: LD_INT 22
32884: PUSH
32885: LD_INT 23
32887: PUSH
32888: LD_INT 24
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: ST_TO_ADDR
32897: GO 33114
32899: LD_INT 45
32901: DOUBLE
32902: EQUAL
32903: IFTRUE 32907
32905: GO 32933
32907: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32908: LD_ADDR_VAR 0 3
32912: PUSH
32913: LD_INT 21
32915: PUSH
32916: LD_INT 22
32918: PUSH
32919: LD_INT 23
32921: PUSH
32922: LD_INT 24
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: ST_TO_ADDR
32931: GO 33114
32933: LD_INT 49
32935: DOUBLE
32936: EQUAL
32937: IFTRUE 32941
32939: GO 32967
32941: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32942: LD_ADDR_VAR 0 3
32946: PUSH
32947: LD_INT 21
32949: PUSH
32950: LD_INT 22
32952: PUSH
32953: LD_INT 23
32955: PUSH
32956: LD_INT 24
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: ST_TO_ADDR
32965: GO 33114
32967: LD_INT 51
32969: DOUBLE
32970: EQUAL
32971: IFTRUE 32975
32973: GO 33001
32975: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32976: LD_ADDR_VAR 0 3
32980: PUSH
32981: LD_INT 21
32983: PUSH
32984: LD_INT 22
32986: PUSH
32987: LD_INT 23
32989: PUSH
32990: LD_INT 24
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: ST_TO_ADDR
32999: GO 33114
33001: LD_INT 52
33003: DOUBLE
33004: EQUAL
33005: IFTRUE 33009
33007: GO 33035
33009: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33010: LD_ADDR_VAR 0 3
33014: PUSH
33015: LD_INT 21
33017: PUSH
33018: LD_INT 22
33020: PUSH
33021: LD_INT 23
33023: PUSH
33024: LD_INT 24
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: ST_TO_ADDR
33033: GO 33114
33035: LD_INT 53
33037: DOUBLE
33038: EQUAL
33039: IFTRUE 33043
33041: GO 33061
33043: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33044: LD_ADDR_VAR 0 3
33048: PUSH
33049: LD_INT 23
33051: PUSH
33052: LD_INT 24
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: ST_TO_ADDR
33059: GO 33114
33061: LD_INT 46
33063: DOUBLE
33064: EQUAL
33065: IFTRUE 33069
33067: GO 33087
33069: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33070: LD_ADDR_VAR 0 3
33074: PUSH
33075: LD_INT 23
33077: PUSH
33078: LD_INT 24
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: ST_TO_ADDR
33085: GO 33114
33087: LD_INT 47
33089: DOUBLE
33090: EQUAL
33091: IFTRUE 33095
33093: GO 33113
33095: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33096: LD_ADDR_VAR 0 3
33100: PUSH
33101: LD_INT 23
33103: PUSH
33104: LD_INT 24
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: ST_TO_ADDR
33111: GO 33114
33113: POP
// result := ( chassis in result ) ;
33114: LD_ADDR_VAR 0 3
33118: PUSH
33119: LD_VAR 0 1
33123: PUSH
33124: LD_VAR 0 3
33128: IN
33129: ST_TO_ADDR
// end ;
33130: LD_VAR 0 3
33134: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33135: LD_INT 0
33137: PPUSH
33138: PPUSH
33139: PPUSH
33140: PPUSH
33141: PPUSH
33142: PPUSH
33143: PPUSH
// result := array ;
33144: LD_ADDR_VAR 0 5
33148: PUSH
33149: LD_VAR 0 1
33153: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33154: LD_VAR 0 1
33158: NOT
33159: PUSH
33160: LD_VAR 0 2
33164: NOT
33165: OR
33166: PUSH
33167: LD_VAR 0 3
33171: NOT
33172: OR
33173: PUSH
33174: LD_VAR 0 2
33178: PUSH
33179: LD_VAR 0 1
33183: GREATER
33184: OR
33185: PUSH
33186: LD_VAR 0 3
33190: PUSH
33191: LD_VAR 0 1
33195: GREATER
33196: OR
33197: IFFALSE 33201
// exit ;
33199: GO 33497
// if direction then
33201: LD_VAR 0 4
33205: IFFALSE 33269
// begin d := 1 ;
33207: LD_ADDR_VAR 0 9
33211: PUSH
33212: LD_INT 1
33214: ST_TO_ADDR
// if i_from > i_to then
33215: LD_VAR 0 2
33219: PUSH
33220: LD_VAR 0 3
33224: GREATER
33225: IFFALSE 33251
// length := ( array - i_from ) + i_to else
33227: LD_ADDR_VAR 0 11
33231: PUSH
33232: LD_VAR 0 1
33236: PUSH
33237: LD_VAR 0 2
33241: MINUS
33242: PUSH
33243: LD_VAR 0 3
33247: PLUS
33248: ST_TO_ADDR
33249: GO 33267
// length := i_to - i_from ;
33251: LD_ADDR_VAR 0 11
33255: PUSH
33256: LD_VAR 0 3
33260: PUSH
33261: LD_VAR 0 2
33265: MINUS
33266: ST_TO_ADDR
// end else
33267: GO 33330
// begin d := - 1 ;
33269: LD_ADDR_VAR 0 9
33273: PUSH
33274: LD_INT 1
33276: NEG
33277: ST_TO_ADDR
// if i_from > i_to then
33278: LD_VAR 0 2
33282: PUSH
33283: LD_VAR 0 3
33287: GREATER
33288: IFFALSE 33308
// length := i_from - i_to else
33290: LD_ADDR_VAR 0 11
33294: PUSH
33295: LD_VAR 0 2
33299: PUSH
33300: LD_VAR 0 3
33304: MINUS
33305: ST_TO_ADDR
33306: GO 33330
// length := ( array - i_to ) + i_from ;
33308: LD_ADDR_VAR 0 11
33312: PUSH
33313: LD_VAR 0 1
33317: PUSH
33318: LD_VAR 0 3
33322: MINUS
33323: PUSH
33324: LD_VAR 0 2
33328: PLUS
33329: ST_TO_ADDR
// end ; if not length then
33330: LD_VAR 0 11
33334: NOT
33335: IFFALSE 33339
// exit ;
33337: GO 33497
// tmp := array ;
33339: LD_ADDR_VAR 0 10
33343: PUSH
33344: LD_VAR 0 1
33348: ST_TO_ADDR
// for i = 1 to length do
33349: LD_ADDR_VAR 0 6
33353: PUSH
33354: DOUBLE
33355: LD_INT 1
33357: DEC
33358: ST_TO_ADDR
33359: LD_VAR 0 11
33363: PUSH
33364: FOR_TO
33365: IFFALSE 33485
// begin for j = 1 to array do
33367: LD_ADDR_VAR 0 7
33371: PUSH
33372: DOUBLE
33373: LD_INT 1
33375: DEC
33376: ST_TO_ADDR
33377: LD_VAR 0 1
33381: PUSH
33382: FOR_TO
33383: IFFALSE 33471
// begin k := j + d ;
33385: LD_ADDR_VAR 0 8
33389: PUSH
33390: LD_VAR 0 7
33394: PUSH
33395: LD_VAR 0 9
33399: PLUS
33400: ST_TO_ADDR
// if k > array then
33401: LD_VAR 0 8
33405: PUSH
33406: LD_VAR 0 1
33410: GREATER
33411: IFFALSE 33421
// k := 1 ;
33413: LD_ADDR_VAR 0 8
33417: PUSH
33418: LD_INT 1
33420: ST_TO_ADDR
// if not k then
33421: LD_VAR 0 8
33425: NOT
33426: IFFALSE 33438
// k := array ;
33428: LD_ADDR_VAR 0 8
33432: PUSH
33433: LD_VAR 0 1
33437: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33438: LD_ADDR_VAR 0 10
33442: PUSH
33443: LD_VAR 0 10
33447: PPUSH
33448: LD_VAR 0 8
33452: PPUSH
33453: LD_VAR 0 1
33457: PUSH
33458: LD_VAR 0 7
33462: ARRAY
33463: PPUSH
33464: CALL_OW 1
33468: ST_TO_ADDR
// end ;
33469: GO 33382
33471: POP
33472: POP
// array := tmp ;
33473: LD_ADDR_VAR 0 1
33477: PUSH
33478: LD_VAR 0 10
33482: ST_TO_ADDR
// end ;
33483: GO 33364
33485: POP
33486: POP
// result := array ;
33487: LD_ADDR_VAR 0 5
33491: PUSH
33492: LD_VAR 0 1
33496: ST_TO_ADDR
// end ;
33497: LD_VAR 0 5
33501: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33502: LD_INT 0
33504: PPUSH
33505: PPUSH
// result := 0 ;
33506: LD_ADDR_VAR 0 3
33510: PUSH
33511: LD_INT 0
33513: ST_TO_ADDR
// if not array or not value in array then
33514: LD_VAR 0 1
33518: NOT
33519: PUSH
33520: LD_VAR 0 2
33524: PUSH
33525: LD_VAR 0 1
33529: IN
33530: NOT
33531: OR
33532: IFFALSE 33536
// exit ;
33534: GO 33590
// for i = 1 to array do
33536: LD_ADDR_VAR 0 4
33540: PUSH
33541: DOUBLE
33542: LD_INT 1
33544: DEC
33545: ST_TO_ADDR
33546: LD_VAR 0 1
33550: PUSH
33551: FOR_TO
33552: IFFALSE 33588
// if value = array [ i ] then
33554: LD_VAR 0 2
33558: PUSH
33559: LD_VAR 0 1
33563: PUSH
33564: LD_VAR 0 4
33568: ARRAY
33569: EQUAL
33570: IFFALSE 33586
// begin result := i ;
33572: LD_ADDR_VAR 0 3
33576: PUSH
33577: LD_VAR 0 4
33581: ST_TO_ADDR
// exit ;
33582: POP
33583: POP
33584: GO 33590
// end ;
33586: GO 33551
33588: POP
33589: POP
// end ;
33590: LD_VAR 0 3
33594: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33595: LD_INT 0
33597: PPUSH
// vc_chassis := chassis ;
33598: LD_ADDR_OWVAR 37
33602: PUSH
33603: LD_VAR 0 1
33607: ST_TO_ADDR
// vc_engine := engine ;
33608: LD_ADDR_OWVAR 39
33612: PUSH
33613: LD_VAR 0 2
33617: ST_TO_ADDR
// vc_control := control ;
33618: LD_ADDR_OWVAR 38
33622: PUSH
33623: LD_VAR 0 3
33627: ST_TO_ADDR
// vc_weapon := weapon ;
33628: LD_ADDR_OWVAR 40
33632: PUSH
33633: LD_VAR 0 4
33637: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33638: LD_ADDR_OWVAR 41
33642: PUSH
33643: LD_VAR 0 5
33647: ST_TO_ADDR
// end ;
33648: LD_VAR 0 6
33652: RET
// export function WantPlant ( unit ) ; var task ; begin
33653: LD_INT 0
33655: PPUSH
33656: PPUSH
// result := false ;
33657: LD_ADDR_VAR 0 2
33661: PUSH
33662: LD_INT 0
33664: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33665: LD_ADDR_VAR 0 3
33669: PUSH
33670: LD_VAR 0 1
33674: PPUSH
33675: CALL_OW 437
33679: ST_TO_ADDR
// if task then
33680: LD_VAR 0 3
33684: IFFALSE 33712
// if task [ 1 ] [ 1 ] = p then
33686: LD_VAR 0 3
33690: PUSH
33691: LD_INT 1
33693: ARRAY
33694: PUSH
33695: LD_INT 1
33697: ARRAY
33698: PUSH
33699: LD_STRING p
33701: EQUAL
33702: IFFALSE 33712
// result := true ;
33704: LD_ADDR_VAR 0 2
33708: PUSH
33709: LD_INT 1
33711: ST_TO_ADDR
// end ;
33712: LD_VAR 0 2
33716: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33717: LD_INT 0
33719: PPUSH
33720: PPUSH
33721: PPUSH
33722: PPUSH
// if pos < 1 then
33723: LD_VAR 0 2
33727: PUSH
33728: LD_INT 1
33730: LESS
33731: IFFALSE 33735
// exit ;
33733: GO 34038
// if pos = 1 then
33735: LD_VAR 0 2
33739: PUSH
33740: LD_INT 1
33742: EQUAL
33743: IFFALSE 33776
// result := Replace ( arr , pos [ 1 ] , value ) else
33745: LD_ADDR_VAR 0 4
33749: PUSH
33750: LD_VAR 0 1
33754: PPUSH
33755: LD_VAR 0 2
33759: PUSH
33760: LD_INT 1
33762: ARRAY
33763: PPUSH
33764: LD_VAR 0 3
33768: PPUSH
33769: CALL_OW 1
33773: ST_TO_ADDR
33774: GO 34038
// begin tmp := arr ;
33776: LD_ADDR_VAR 0 6
33780: PUSH
33781: LD_VAR 0 1
33785: ST_TO_ADDR
// s_arr := [ tmp ] ;
33786: LD_ADDR_VAR 0 7
33790: PUSH
33791: LD_VAR 0 6
33795: PUSH
33796: EMPTY
33797: LIST
33798: ST_TO_ADDR
// for i = 1 to pos - 1 do
33799: LD_ADDR_VAR 0 5
33803: PUSH
33804: DOUBLE
33805: LD_INT 1
33807: DEC
33808: ST_TO_ADDR
33809: LD_VAR 0 2
33813: PUSH
33814: LD_INT 1
33816: MINUS
33817: PUSH
33818: FOR_TO
33819: IFFALSE 33864
// begin tmp := tmp [ pos [ i ] ] ;
33821: LD_ADDR_VAR 0 6
33825: PUSH
33826: LD_VAR 0 6
33830: PUSH
33831: LD_VAR 0 2
33835: PUSH
33836: LD_VAR 0 5
33840: ARRAY
33841: ARRAY
33842: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33843: LD_ADDR_VAR 0 7
33847: PUSH
33848: LD_VAR 0 7
33852: PUSH
33853: LD_VAR 0 6
33857: PUSH
33858: EMPTY
33859: LIST
33860: ADD
33861: ST_TO_ADDR
// end ;
33862: GO 33818
33864: POP
33865: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33866: LD_ADDR_VAR 0 6
33870: PUSH
33871: LD_VAR 0 6
33875: PPUSH
33876: LD_VAR 0 2
33880: PUSH
33881: LD_VAR 0 2
33885: ARRAY
33886: PPUSH
33887: LD_VAR 0 3
33891: PPUSH
33892: CALL_OW 1
33896: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33897: LD_ADDR_VAR 0 7
33901: PUSH
33902: LD_VAR 0 7
33906: PPUSH
33907: LD_VAR 0 7
33911: PPUSH
33912: LD_VAR 0 6
33916: PPUSH
33917: CALL_OW 1
33921: ST_TO_ADDR
// for i = s_arr downto 2 do
33922: LD_ADDR_VAR 0 5
33926: PUSH
33927: DOUBLE
33928: LD_VAR 0 7
33932: INC
33933: ST_TO_ADDR
33934: LD_INT 2
33936: PUSH
33937: FOR_DOWNTO
33938: IFFALSE 34022
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33940: LD_ADDR_VAR 0 6
33944: PUSH
33945: LD_VAR 0 7
33949: PUSH
33950: LD_VAR 0 5
33954: PUSH
33955: LD_INT 1
33957: MINUS
33958: ARRAY
33959: PPUSH
33960: LD_VAR 0 2
33964: PUSH
33965: LD_VAR 0 5
33969: PUSH
33970: LD_INT 1
33972: MINUS
33973: ARRAY
33974: PPUSH
33975: LD_VAR 0 7
33979: PUSH
33980: LD_VAR 0 5
33984: ARRAY
33985: PPUSH
33986: CALL_OW 1
33990: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33991: LD_ADDR_VAR 0 7
33995: PUSH
33996: LD_VAR 0 7
34000: PPUSH
34001: LD_VAR 0 5
34005: PUSH
34006: LD_INT 1
34008: MINUS
34009: PPUSH
34010: LD_VAR 0 6
34014: PPUSH
34015: CALL_OW 1
34019: ST_TO_ADDR
// end ;
34020: GO 33937
34022: POP
34023: POP
// result := s_arr [ 1 ] ;
34024: LD_ADDR_VAR 0 4
34028: PUSH
34029: LD_VAR 0 7
34033: PUSH
34034: LD_INT 1
34036: ARRAY
34037: ST_TO_ADDR
// end ; end ;
34038: LD_VAR 0 4
34042: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34043: LD_INT 0
34045: PPUSH
34046: PPUSH
// if not list then
34047: LD_VAR 0 1
34051: NOT
34052: IFFALSE 34056
// exit ;
34054: GO 34147
// i := list [ pos1 ] ;
34056: LD_ADDR_VAR 0 5
34060: PUSH
34061: LD_VAR 0 1
34065: PUSH
34066: LD_VAR 0 2
34070: ARRAY
34071: ST_TO_ADDR
// if not i then
34072: LD_VAR 0 5
34076: NOT
34077: IFFALSE 34081
// exit ;
34079: GO 34147
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34081: LD_ADDR_VAR 0 1
34085: PUSH
34086: LD_VAR 0 1
34090: PPUSH
34091: LD_VAR 0 2
34095: PPUSH
34096: LD_VAR 0 1
34100: PUSH
34101: LD_VAR 0 3
34105: ARRAY
34106: PPUSH
34107: CALL_OW 1
34111: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34112: LD_ADDR_VAR 0 1
34116: PUSH
34117: LD_VAR 0 1
34121: PPUSH
34122: LD_VAR 0 3
34126: PPUSH
34127: LD_VAR 0 5
34131: PPUSH
34132: CALL_OW 1
34136: ST_TO_ADDR
// result := list ;
34137: LD_ADDR_VAR 0 4
34141: PUSH
34142: LD_VAR 0 1
34146: ST_TO_ADDR
// end ;
34147: LD_VAR 0 4
34151: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34152: LD_INT 0
34154: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34155: LD_ADDR_VAR 0 5
34159: PUSH
34160: LD_VAR 0 1
34164: PPUSH
34165: CALL_OW 250
34169: PPUSH
34170: LD_VAR 0 1
34174: PPUSH
34175: CALL_OW 251
34179: PPUSH
34180: LD_VAR 0 2
34184: PPUSH
34185: LD_VAR 0 3
34189: PPUSH
34190: LD_VAR 0 4
34194: PPUSH
34195: CALL 34205 0 5
34199: ST_TO_ADDR
// end ;
34200: LD_VAR 0 5
34204: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34205: LD_INT 0
34207: PPUSH
34208: PPUSH
34209: PPUSH
34210: PPUSH
// if not list then
34211: LD_VAR 0 3
34215: NOT
34216: IFFALSE 34220
// exit ;
34218: GO 34608
// result := [ ] ;
34220: LD_ADDR_VAR 0 6
34224: PUSH
34225: EMPTY
34226: ST_TO_ADDR
// for i in list do
34227: LD_ADDR_VAR 0 7
34231: PUSH
34232: LD_VAR 0 3
34236: PUSH
34237: FOR_IN
34238: IFFALSE 34440
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34240: LD_ADDR_VAR 0 9
34244: PUSH
34245: LD_VAR 0 7
34249: PPUSH
34250: LD_VAR 0 1
34254: PPUSH
34255: LD_VAR 0 2
34259: PPUSH
34260: CALL_OW 297
34264: ST_TO_ADDR
// if not result then
34265: LD_VAR 0 6
34269: NOT
34270: IFFALSE 34296
// result := [ [ i , tmp ] ] else
34272: LD_ADDR_VAR 0 6
34276: PUSH
34277: LD_VAR 0 7
34281: PUSH
34282: LD_VAR 0 9
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: EMPTY
34292: LIST
34293: ST_TO_ADDR
34294: GO 34438
// begin if result [ result ] [ 2 ] < tmp then
34296: LD_VAR 0 6
34300: PUSH
34301: LD_VAR 0 6
34305: ARRAY
34306: PUSH
34307: LD_INT 2
34309: ARRAY
34310: PUSH
34311: LD_VAR 0 9
34315: LESS
34316: IFFALSE 34358
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34318: LD_ADDR_VAR 0 6
34322: PUSH
34323: LD_VAR 0 6
34327: PPUSH
34328: LD_VAR 0 6
34332: PUSH
34333: LD_INT 1
34335: PLUS
34336: PPUSH
34337: LD_VAR 0 7
34341: PUSH
34342: LD_VAR 0 9
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PPUSH
34351: CALL_OW 2
34355: ST_TO_ADDR
34356: GO 34438
// for j = 1 to result do
34358: LD_ADDR_VAR 0 8
34362: PUSH
34363: DOUBLE
34364: LD_INT 1
34366: DEC
34367: ST_TO_ADDR
34368: LD_VAR 0 6
34372: PUSH
34373: FOR_TO
34374: IFFALSE 34436
// begin if tmp < result [ j ] [ 2 ] then
34376: LD_VAR 0 9
34380: PUSH
34381: LD_VAR 0 6
34385: PUSH
34386: LD_VAR 0 8
34390: ARRAY
34391: PUSH
34392: LD_INT 2
34394: ARRAY
34395: LESS
34396: IFFALSE 34434
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34398: LD_ADDR_VAR 0 6
34402: PUSH
34403: LD_VAR 0 6
34407: PPUSH
34408: LD_VAR 0 8
34412: PPUSH
34413: LD_VAR 0 7
34417: PUSH
34418: LD_VAR 0 9
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PPUSH
34427: CALL_OW 2
34431: ST_TO_ADDR
// break ;
34432: GO 34436
// end ; end ;
34434: GO 34373
34436: POP
34437: POP
// end ; end ;
34438: GO 34237
34440: POP
34441: POP
// if result and not asc then
34442: LD_VAR 0 6
34446: PUSH
34447: LD_VAR 0 4
34451: NOT
34452: AND
34453: IFFALSE 34528
// begin tmp := result ;
34455: LD_ADDR_VAR 0 9
34459: PUSH
34460: LD_VAR 0 6
34464: ST_TO_ADDR
// for i = tmp downto 1 do
34465: LD_ADDR_VAR 0 7
34469: PUSH
34470: DOUBLE
34471: LD_VAR 0 9
34475: INC
34476: ST_TO_ADDR
34477: LD_INT 1
34479: PUSH
34480: FOR_DOWNTO
34481: IFFALSE 34526
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34483: LD_ADDR_VAR 0 6
34487: PUSH
34488: LD_VAR 0 6
34492: PPUSH
34493: LD_VAR 0 9
34497: PUSH
34498: LD_VAR 0 7
34502: MINUS
34503: PUSH
34504: LD_INT 1
34506: PLUS
34507: PPUSH
34508: LD_VAR 0 9
34512: PUSH
34513: LD_VAR 0 7
34517: ARRAY
34518: PPUSH
34519: CALL_OW 1
34523: ST_TO_ADDR
34524: GO 34480
34526: POP
34527: POP
// end ; tmp := [ ] ;
34528: LD_ADDR_VAR 0 9
34532: PUSH
34533: EMPTY
34534: ST_TO_ADDR
// if mode then
34535: LD_VAR 0 5
34539: IFFALSE 34608
// begin for i = 1 to result do
34541: LD_ADDR_VAR 0 7
34545: PUSH
34546: DOUBLE
34547: LD_INT 1
34549: DEC
34550: ST_TO_ADDR
34551: LD_VAR 0 6
34555: PUSH
34556: FOR_TO
34557: IFFALSE 34596
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34559: LD_ADDR_VAR 0 9
34563: PUSH
34564: LD_VAR 0 9
34568: PPUSH
34569: LD_VAR 0 7
34573: PPUSH
34574: LD_VAR 0 6
34578: PUSH
34579: LD_VAR 0 7
34583: ARRAY
34584: PUSH
34585: LD_INT 1
34587: ARRAY
34588: PPUSH
34589: CALL_OW 1
34593: ST_TO_ADDR
34594: GO 34556
34596: POP
34597: POP
// result := tmp ;
34598: LD_ADDR_VAR 0 6
34602: PUSH
34603: LD_VAR 0 9
34607: ST_TO_ADDR
// end ; end ;
34608: LD_VAR 0 6
34612: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34613: LD_INT 0
34615: PPUSH
34616: PPUSH
34617: PPUSH
34618: PPUSH
34619: PPUSH
34620: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34621: LD_ADDR_VAR 0 5
34625: PUSH
34626: LD_INT 0
34628: PUSH
34629: LD_INT 0
34631: PUSH
34632: LD_INT 0
34634: PUSH
34635: EMPTY
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: ST_TO_ADDR
// if not x or not y then
34643: LD_VAR 0 2
34647: NOT
34648: PUSH
34649: LD_VAR 0 3
34653: NOT
34654: OR
34655: IFFALSE 34659
// exit ;
34657: GO 36305
// if not range then
34659: LD_VAR 0 4
34663: NOT
34664: IFFALSE 34674
// range := 10 ;
34666: LD_ADDR_VAR 0 4
34670: PUSH
34671: LD_INT 10
34673: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34674: LD_ADDR_VAR 0 8
34678: PUSH
34679: LD_INT 81
34681: PUSH
34682: LD_VAR 0 1
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 92
34693: PUSH
34694: LD_VAR 0 2
34698: PUSH
34699: LD_VAR 0 3
34703: PUSH
34704: LD_VAR 0 4
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 3
34717: PUSH
34718: LD_INT 21
34720: PUSH
34721: LD_INT 3
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: LIST
34736: PPUSH
34737: CALL_OW 69
34741: ST_TO_ADDR
// if not tmp then
34742: LD_VAR 0 8
34746: NOT
34747: IFFALSE 34751
// exit ;
34749: GO 36305
// for i in tmp do
34751: LD_ADDR_VAR 0 6
34755: PUSH
34756: LD_VAR 0 8
34760: PUSH
34761: FOR_IN
34762: IFFALSE 36280
// begin points := [ 0 , 0 , 0 ] ;
34764: LD_ADDR_VAR 0 9
34768: PUSH
34769: LD_INT 0
34771: PUSH
34772: LD_INT 0
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: LIST
34782: ST_TO_ADDR
// bpoints := 1 ;
34783: LD_ADDR_VAR 0 10
34787: PUSH
34788: LD_INT 1
34790: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34791: LD_VAR 0 6
34795: PPUSH
34796: CALL_OW 247
34800: PUSH
34801: LD_INT 1
34803: DOUBLE
34804: EQUAL
34805: IFTRUE 34809
34807: GO 35387
34809: POP
// begin if GetClass ( i ) = 1 then
34810: LD_VAR 0 6
34814: PPUSH
34815: CALL_OW 257
34819: PUSH
34820: LD_INT 1
34822: EQUAL
34823: IFFALSE 34844
// points := [ 10 , 5 , 3 ] ;
34825: LD_ADDR_VAR 0 9
34829: PUSH
34830: LD_INT 10
34832: PUSH
34833: LD_INT 5
34835: PUSH
34836: LD_INT 3
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: LIST
34843: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34844: LD_VAR 0 6
34848: PPUSH
34849: CALL_OW 257
34853: PUSH
34854: LD_INT 2
34856: PUSH
34857: LD_INT 3
34859: PUSH
34860: LD_INT 4
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: LIST
34867: IN
34868: IFFALSE 34889
// points := [ 3 , 2 , 1 ] ;
34870: LD_ADDR_VAR 0 9
34874: PUSH
34875: LD_INT 3
34877: PUSH
34878: LD_INT 2
34880: PUSH
34881: LD_INT 1
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: LIST
34888: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34889: LD_VAR 0 6
34893: PPUSH
34894: CALL_OW 257
34898: PUSH
34899: LD_INT 5
34901: EQUAL
34902: IFFALSE 34923
// points := [ 130 , 5 , 2 ] ;
34904: LD_ADDR_VAR 0 9
34908: PUSH
34909: LD_INT 130
34911: PUSH
34912: LD_INT 5
34914: PUSH
34915: LD_INT 2
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: LIST
34922: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34923: LD_VAR 0 6
34927: PPUSH
34928: CALL_OW 257
34932: PUSH
34933: LD_INT 8
34935: EQUAL
34936: IFFALSE 34957
// points := [ 35 , 35 , 30 ] ;
34938: LD_ADDR_VAR 0 9
34942: PUSH
34943: LD_INT 35
34945: PUSH
34946: LD_INT 35
34948: PUSH
34949: LD_INT 30
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: LIST
34956: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34957: LD_VAR 0 6
34961: PPUSH
34962: CALL_OW 257
34966: PUSH
34967: LD_INT 9
34969: EQUAL
34970: IFFALSE 34991
// points := [ 20 , 55 , 40 ] ;
34972: LD_ADDR_VAR 0 9
34976: PUSH
34977: LD_INT 20
34979: PUSH
34980: LD_INT 55
34982: PUSH
34983: LD_INT 40
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: LIST
34990: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34991: LD_VAR 0 6
34995: PPUSH
34996: CALL_OW 257
35000: PUSH
35001: LD_INT 12
35003: PUSH
35004: LD_INT 16
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: IN
35011: IFFALSE 35032
// points := [ 5 , 3 , 2 ] ;
35013: LD_ADDR_VAR 0 9
35017: PUSH
35018: LD_INT 5
35020: PUSH
35021: LD_INT 3
35023: PUSH
35024: LD_INT 2
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: LIST
35031: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35032: LD_VAR 0 6
35036: PPUSH
35037: CALL_OW 257
35041: PUSH
35042: LD_INT 17
35044: EQUAL
35045: IFFALSE 35066
// points := [ 100 , 50 , 75 ] ;
35047: LD_ADDR_VAR 0 9
35051: PUSH
35052: LD_INT 100
35054: PUSH
35055: LD_INT 50
35057: PUSH
35058: LD_INT 75
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: LIST
35065: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35066: LD_VAR 0 6
35070: PPUSH
35071: CALL_OW 257
35075: PUSH
35076: LD_INT 15
35078: EQUAL
35079: IFFALSE 35100
// points := [ 10 , 5 , 3 ] ;
35081: LD_ADDR_VAR 0 9
35085: PUSH
35086: LD_INT 10
35088: PUSH
35089: LD_INT 5
35091: PUSH
35092: LD_INT 3
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: LIST
35099: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35100: LD_VAR 0 6
35104: PPUSH
35105: CALL_OW 257
35109: PUSH
35110: LD_INT 14
35112: EQUAL
35113: IFFALSE 35134
// points := [ 10 , 0 , 0 ] ;
35115: LD_ADDR_VAR 0 9
35119: PUSH
35120: LD_INT 10
35122: PUSH
35123: LD_INT 0
35125: PUSH
35126: LD_INT 0
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: LIST
35133: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35134: LD_VAR 0 6
35138: PPUSH
35139: CALL_OW 257
35143: PUSH
35144: LD_INT 11
35146: EQUAL
35147: IFFALSE 35168
// points := [ 30 , 10 , 5 ] ;
35149: LD_ADDR_VAR 0 9
35153: PUSH
35154: LD_INT 30
35156: PUSH
35157: LD_INT 10
35159: PUSH
35160: LD_INT 5
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: LIST
35167: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35168: LD_VAR 0 1
35172: PPUSH
35173: LD_INT 5
35175: PPUSH
35176: CALL_OW 321
35180: PUSH
35181: LD_INT 2
35183: EQUAL
35184: IFFALSE 35201
// bpoints := bpoints * 1.8 ;
35186: LD_ADDR_VAR 0 10
35190: PUSH
35191: LD_VAR 0 10
35195: PUSH
35196: LD_REAL  1.80000000000000E+0000
35199: MUL
35200: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35201: LD_VAR 0 6
35205: PPUSH
35206: CALL_OW 257
35210: PUSH
35211: LD_INT 1
35213: PUSH
35214: LD_INT 2
35216: PUSH
35217: LD_INT 3
35219: PUSH
35220: LD_INT 4
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: IN
35229: PUSH
35230: LD_VAR 0 1
35234: PPUSH
35235: LD_INT 51
35237: PPUSH
35238: CALL_OW 321
35242: PUSH
35243: LD_INT 2
35245: EQUAL
35246: AND
35247: IFFALSE 35264
// bpoints := bpoints * 1.2 ;
35249: LD_ADDR_VAR 0 10
35253: PUSH
35254: LD_VAR 0 10
35258: PUSH
35259: LD_REAL  1.20000000000000E+0000
35262: MUL
35263: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35264: LD_VAR 0 6
35268: PPUSH
35269: CALL_OW 257
35273: PUSH
35274: LD_INT 5
35276: PUSH
35277: LD_INT 7
35279: PUSH
35280: LD_INT 9
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: LIST
35287: IN
35288: PUSH
35289: LD_VAR 0 1
35293: PPUSH
35294: LD_INT 52
35296: PPUSH
35297: CALL_OW 321
35301: PUSH
35302: LD_INT 2
35304: EQUAL
35305: AND
35306: IFFALSE 35323
// bpoints := bpoints * 1.5 ;
35308: LD_ADDR_VAR 0 10
35312: PUSH
35313: LD_VAR 0 10
35317: PUSH
35318: LD_REAL  1.50000000000000E+0000
35321: MUL
35322: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35323: LD_VAR 0 1
35327: PPUSH
35328: LD_INT 66
35330: PPUSH
35331: CALL_OW 321
35335: PUSH
35336: LD_INT 2
35338: EQUAL
35339: IFFALSE 35356
// bpoints := bpoints * 1.1 ;
35341: LD_ADDR_VAR 0 10
35345: PUSH
35346: LD_VAR 0 10
35350: PUSH
35351: LD_REAL  1.10000000000000E+0000
35354: MUL
35355: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35356: LD_ADDR_VAR 0 10
35360: PUSH
35361: LD_VAR 0 10
35365: PUSH
35366: LD_VAR 0 6
35370: PPUSH
35371: LD_INT 1
35373: PPUSH
35374: CALL_OW 259
35378: PUSH
35379: LD_REAL  1.15000000000000E+0000
35382: MUL
35383: MUL
35384: ST_TO_ADDR
// end ; unit_vehicle :
35385: GO 36209
35387: LD_INT 2
35389: DOUBLE
35390: EQUAL
35391: IFTRUE 35395
35393: GO 36197
35395: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35396: LD_VAR 0 6
35400: PPUSH
35401: CALL_OW 264
35405: PUSH
35406: LD_INT 2
35408: PUSH
35409: LD_INT 42
35411: PUSH
35412: LD_INT 24
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: LIST
35419: IN
35420: IFFALSE 35441
// points := [ 25 , 5 , 3 ] ;
35422: LD_ADDR_VAR 0 9
35426: PUSH
35427: LD_INT 25
35429: PUSH
35430: LD_INT 5
35432: PUSH
35433: LD_INT 3
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: LIST
35440: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35441: LD_VAR 0 6
35445: PPUSH
35446: CALL_OW 264
35450: PUSH
35451: LD_INT 4
35453: PUSH
35454: LD_INT 43
35456: PUSH
35457: LD_INT 25
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: LIST
35464: IN
35465: IFFALSE 35486
// points := [ 40 , 15 , 5 ] ;
35467: LD_ADDR_VAR 0 9
35471: PUSH
35472: LD_INT 40
35474: PUSH
35475: LD_INT 15
35477: PUSH
35478: LD_INT 5
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: LIST
35485: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35486: LD_VAR 0 6
35490: PPUSH
35491: CALL_OW 264
35495: PUSH
35496: LD_INT 3
35498: PUSH
35499: LD_INT 23
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: IN
35506: IFFALSE 35527
// points := [ 7 , 25 , 8 ] ;
35508: LD_ADDR_VAR 0 9
35512: PUSH
35513: LD_INT 7
35515: PUSH
35516: LD_INT 25
35518: PUSH
35519: LD_INT 8
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: LIST
35526: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35527: LD_VAR 0 6
35531: PPUSH
35532: CALL_OW 264
35536: PUSH
35537: LD_INT 5
35539: PUSH
35540: LD_INT 27
35542: PUSH
35543: LD_INT 44
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: LIST
35550: IN
35551: IFFALSE 35572
// points := [ 14 , 50 , 16 ] ;
35553: LD_ADDR_VAR 0 9
35557: PUSH
35558: LD_INT 14
35560: PUSH
35561: LD_INT 50
35563: PUSH
35564: LD_INT 16
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: LIST
35571: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35572: LD_VAR 0 6
35576: PPUSH
35577: CALL_OW 264
35581: PUSH
35582: LD_INT 6
35584: PUSH
35585: LD_INT 46
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: IN
35592: IFFALSE 35613
// points := [ 32 , 120 , 70 ] ;
35594: LD_ADDR_VAR 0 9
35598: PUSH
35599: LD_INT 32
35601: PUSH
35602: LD_INT 120
35604: PUSH
35605: LD_INT 70
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: LIST
35612: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
35613: LD_VAR 0 6
35617: PPUSH
35618: CALL_OW 264
35622: PUSH
35623: LD_INT 7
35625: PUSH
35626: LD_INT 28
35628: PUSH
35629: LD_INT 45
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: LIST
35636: IN
35637: IFFALSE 35658
// points := [ 35 , 20 , 45 ] ;
35639: LD_ADDR_VAR 0 9
35643: PUSH
35644: LD_INT 35
35646: PUSH
35647: LD_INT 20
35649: PUSH
35650: LD_INT 45
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: LIST
35657: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35658: LD_VAR 0 6
35662: PPUSH
35663: CALL_OW 264
35667: PUSH
35668: LD_INT 47
35670: PUSH
35671: EMPTY
35672: LIST
35673: IN
35674: IFFALSE 35695
// points := [ 67 , 45 , 75 ] ;
35676: LD_ADDR_VAR 0 9
35680: PUSH
35681: LD_INT 67
35683: PUSH
35684: LD_INT 45
35686: PUSH
35687: LD_INT 75
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: LIST
35694: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35695: LD_VAR 0 6
35699: PPUSH
35700: CALL_OW 264
35704: PUSH
35705: LD_INT 26
35707: PUSH
35708: EMPTY
35709: LIST
35710: IN
35711: IFFALSE 35732
// points := [ 120 , 30 , 80 ] ;
35713: LD_ADDR_VAR 0 9
35717: PUSH
35718: LD_INT 120
35720: PUSH
35721: LD_INT 30
35723: PUSH
35724: LD_INT 80
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: LIST
35731: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35732: LD_VAR 0 6
35736: PPUSH
35737: CALL_OW 264
35741: PUSH
35742: LD_INT 22
35744: PUSH
35745: EMPTY
35746: LIST
35747: IN
35748: IFFALSE 35769
// points := [ 40 , 1 , 1 ] ;
35750: LD_ADDR_VAR 0 9
35754: PUSH
35755: LD_INT 40
35757: PUSH
35758: LD_INT 1
35760: PUSH
35761: LD_INT 1
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: LIST
35768: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35769: LD_VAR 0 6
35773: PPUSH
35774: CALL_OW 264
35778: PUSH
35779: LD_INT 29
35781: PUSH
35782: EMPTY
35783: LIST
35784: IN
35785: IFFALSE 35806
// points := [ 70 , 200 , 400 ] ;
35787: LD_ADDR_VAR 0 9
35791: PUSH
35792: LD_INT 70
35794: PUSH
35795: LD_INT 200
35797: PUSH
35798: LD_INT 400
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: LIST
35805: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35806: LD_VAR 0 6
35810: PPUSH
35811: CALL_OW 264
35815: PUSH
35816: LD_INT 14
35818: PUSH
35819: LD_INT 53
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: IN
35826: IFFALSE 35847
// points := [ 40 , 10 , 20 ] ;
35828: LD_ADDR_VAR 0 9
35832: PUSH
35833: LD_INT 40
35835: PUSH
35836: LD_INT 10
35838: PUSH
35839: LD_INT 20
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: LIST
35846: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35847: LD_VAR 0 6
35851: PPUSH
35852: CALL_OW 264
35856: PUSH
35857: LD_INT 9
35859: PUSH
35860: EMPTY
35861: LIST
35862: IN
35863: IFFALSE 35884
// points := [ 5 , 70 , 20 ] ;
35865: LD_ADDR_VAR 0 9
35869: PUSH
35870: LD_INT 5
35872: PUSH
35873: LD_INT 70
35875: PUSH
35876: LD_INT 20
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: LIST
35883: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35884: LD_VAR 0 6
35888: PPUSH
35889: CALL_OW 264
35893: PUSH
35894: LD_INT 10
35896: PUSH
35897: EMPTY
35898: LIST
35899: IN
35900: IFFALSE 35921
// points := [ 35 , 110 , 70 ] ;
35902: LD_ADDR_VAR 0 9
35906: PUSH
35907: LD_INT 35
35909: PUSH
35910: LD_INT 110
35912: PUSH
35913: LD_INT 70
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: LIST
35920: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35921: LD_VAR 0 6
35925: PPUSH
35926: CALL_OW 265
35930: PUSH
35931: LD_INT 25
35933: EQUAL
35934: IFFALSE 35955
// points := [ 80 , 65 , 100 ] ;
35936: LD_ADDR_VAR 0 9
35940: PUSH
35941: LD_INT 80
35943: PUSH
35944: LD_INT 65
35946: PUSH
35947: LD_INT 100
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: LIST
35954: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35955: LD_VAR 0 6
35959: PPUSH
35960: CALL_OW 263
35964: PUSH
35965: LD_INT 1
35967: EQUAL
35968: IFFALSE 36003
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35970: LD_ADDR_VAR 0 10
35974: PUSH
35975: LD_VAR 0 10
35979: PUSH
35980: LD_VAR 0 6
35984: PPUSH
35985: CALL_OW 311
35989: PPUSH
35990: LD_INT 3
35992: PPUSH
35993: CALL_OW 259
35997: PUSH
35998: LD_INT 4
36000: MUL
36001: MUL
36002: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36003: LD_VAR 0 6
36007: PPUSH
36008: CALL_OW 263
36012: PUSH
36013: LD_INT 2
36015: EQUAL
36016: IFFALSE 36067
// begin j := IsControledBy ( i ) ;
36018: LD_ADDR_VAR 0 7
36022: PUSH
36023: LD_VAR 0 6
36027: PPUSH
36028: CALL_OW 312
36032: ST_TO_ADDR
// if j then
36033: LD_VAR 0 7
36037: IFFALSE 36067
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36039: LD_ADDR_VAR 0 10
36043: PUSH
36044: LD_VAR 0 10
36048: PUSH
36049: LD_VAR 0 7
36053: PPUSH
36054: LD_INT 3
36056: PPUSH
36057: CALL_OW 259
36061: PUSH
36062: LD_INT 3
36064: MUL
36065: MUL
36066: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36067: LD_VAR 0 6
36071: PPUSH
36072: CALL_OW 264
36076: PUSH
36077: LD_INT 5
36079: PUSH
36080: LD_INT 6
36082: PUSH
36083: LD_INT 46
36085: PUSH
36086: LD_INT 44
36088: PUSH
36089: LD_INT 47
36091: PUSH
36092: LD_INT 45
36094: PUSH
36095: LD_INT 28
36097: PUSH
36098: LD_INT 7
36100: PUSH
36101: LD_INT 27
36103: PUSH
36104: LD_INT 29
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: IN
36119: PUSH
36120: LD_VAR 0 1
36124: PPUSH
36125: LD_INT 52
36127: PPUSH
36128: CALL_OW 321
36132: PUSH
36133: LD_INT 2
36135: EQUAL
36136: AND
36137: IFFALSE 36154
// bpoints := bpoints * 1.2 ;
36139: LD_ADDR_VAR 0 10
36143: PUSH
36144: LD_VAR 0 10
36148: PUSH
36149: LD_REAL  1.20000000000000E+0000
36152: MUL
36153: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36154: LD_VAR 0 6
36158: PPUSH
36159: CALL_OW 264
36163: PUSH
36164: LD_INT 6
36166: PUSH
36167: LD_INT 46
36169: PUSH
36170: LD_INT 47
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: LIST
36177: IN
36178: IFFALSE 36195
// bpoints := bpoints * 1.2 ;
36180: LD_ADDR_VAR 0 10
36184: PUSH
36185: LD_VAR 0 10
36189: PUSH
36190: LD_REAL  1.20000000000000E+0000
36193: MUL
36194: ST_TO_ADDR
// end ; unit_building :
36195: GO 36209
36197: LD_INT 3
36199: DOUBLE
36200: EQUAL
36201: IFTRUE 36205
36203: GO 36208
36205: POP
// ; end ;
36206: GO 36209
36208: POP
// for j = 1 to 3 do
36209: LD_ADDR_VAR 0 7
36213: PUSH
36214: DOUBLE
36215: LD_INT 1
36217: DEC
36218: ST_TO_ADDR
36219: LD_INT 3
36221: PUSH
36222: FOR_TO
36223: IFFALSE 36276
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36225: LD_ADDR_VAR 0 5
36229: PUSH
36230: LD_VAR 0 5
36234: PPUSH
36235: LD_VAR 0 7
36239: PPUSH
36240: LD_VAR 0 5
36244: PUSH
36245: LD_VAR 0 7
36249: ARRAY
36250: PUSH
36251: LD_VAR 0 9
36255: PUSH
36256: LD_VAR 0 7
36260: ARRAY
36261: PUSH
36262: LD_VAR 0 10
36266: MUL
36267: PLUS
36268: PPUSH
36269: CALL_OW 1
36273: ST_TO_ADDR
36274: GO 36222
36276: POP
36277: POP
// end ;
36278: GO 34761
36280: POP
36281: POP
// result := Replace ( result , 4 , tmp ) ;
36282: LD_ADDR_VAR 0 5
36286: PUSH
36287: LD_VAR 0 5
36291: PPUSH
36292: LD_INT 4
36294: PPUSH
36295: LD_VAR 0 8
36299: PPUSH
36300: CALL_OW 1
36304: ST_TO_ADDR
// end ;
36305: LD_VAR 0 5
36309: RET
// export function DangerAtRange ( unit , range ) ; begin
36310: LD_INT 0
36312: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36313: LD_ADDR_VAR 0 3
36317: PUSH
36318: LD_VAR 0 1
36322: PPUSH
36323: CALL_OW 255
36327: PPUSH
36328: LD_VAR 0 1
36332: PPUSH
36333: CALL_OW 250
36337: PPUSH
36338: LD_VAR 0 1
36342: PPUSH
36343: CALL_OW 251
36347: PPUSH
36348: LD_VAR 0 2
36352: PPUSH
36353: CALL 34613 0 4
36357: ST_TO_ADDR
// end ;
36358: LD_VAR 0 3
36362: RET
// export function DangerInArea ( side , area ) ; begin
36363: LD_INT 0
36365: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36366: LD_ADDR_VAR 0 3
36370: PUSH
36371: LD_VAR 0 2
36375: PPUSH
36376: LD_INT 81
36378: PUSH
36379: LD_VAR 0 1
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PPUSH
36388: CALL_OW 70
36392: ST_TO_ADDR
// end ;
36393: LD_VAR 0 3
36397: RET
// export function IsExtension ( b ) ; begin
36398: LD_INT 0
36400: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36401: LD_ADDR_VAR 0 2
36405: PUSH
36406: LD_VAR 0 1
36410: PUSH
36411: LD_INT 23
36413: PUSH
36414: LD_INT 20
36416: PUSH
36417: LD_INT 22
36419: PUSH
36420: LD_INT 17
36422: PUSH
36423: LD_INT 24
36425: PUSH
36426: LD_INT 21
36428: PUSH
36429: LD_INT 19
36431: PUSH
36432: LD_INT 16
36434: PUSH
36435: LD_INT 25
36437: PUSH
36438: LD_INT 18
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: IN
36453: ST_TO_ADDR
// end ;
36454: LD_VAR 0 2
36458: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
36459: LD_INT 0
36461: PPUSH
36462: PPUSH
36463: PPUSH
// result := [ ] ;
36464: LD_ADDR_VAR 0 3
36468: PUSH
36469: EMPTY
36470: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36471: LD_ADDR_VAR 0 4
36475: PUSH
36476: LD_VAR 0 2
36480: PPUSH
36481: LD_INT 21
36483: PUSH
36484: LD_INT 3
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PPUSH
36491: CALL_OW 70
36495: ST_TO_ADDR
// if not tmp then
36496: LD_VAR 0 4
36500: NOT
36501: IFFALSE 36505
// exit ;
36503: GO 36563
// for i in tmp do
36505: LD_ADDR_VAR 0 5
36509: PUSH
36510: LD_VAR 0 4
36514: PUSH
36515: FOR_IN
36516: IFFALSE 36551
// if GetBase ( i ) <> base then
36518: LD_VAR 0 5
36522: PPUSH
36523: CALL_OW 274
36527: PUSH
36528: LD_VAR 0 1
36532: NONEQUAL
36533: IFFALSE 36549
// ComLinkToBase ( base , i ) ;
36535: LD_VAR 0 1
36539: PPUSH
36540: LD_VAR 0 5
36544: PPUSH
36545: CALL_OW 169
36549: GO 36515
36551: POP
36552: POP
// result := tmp ;
36553: LD_ADDR_VAR 0 3
36557: PUSH
36558: LD_VAR 0 4
36562: ST_TO_ADDR
// end ;
36563: LD_VAR 0 3
36567: RET
// export function ComComplete ( unit , b ) ; var i ; begin
36568: LD_INT 0
36570: PPUSH
36571: PPUSH
// if BuildingStatus ( b ) = bs_build then
36572: LD_VAR 0 2
36576: PPUSH
36577: CALL_OW 461
36581: PUSH
36582: LD_INT 1
36584: EQUAL
36585: IFFALSE 36645
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36587: LD_VAR 0 1
36591: PPUSH
36592: LD_STRING h
36594: PUSH
36595: LD_VAR 0 2
36599: PPUSH
36600: CALL_OW 250
36604: PUSH
36605: LD_VAR 0 2
36609: PPUSH
36610: CALL_OW 251
36614: PUSH
36615: LD_VAR 0 2
36619: PUSH
36620: LD_INT 0
36622: PUSH
36623: LD_INT 0
36625: PUSH
36626: LD_INT 0
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: PUSH
36638: EMPTY
36639: LIST
36640: PPUSH
36641: CALL_OW 446
// end ;
36645: LD_VAR 0 3
36649: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36650: LD_INT 0
36652: PPUSH
36653: PPUSH
36654: PPUSH
36655: PPUSH
36656: PPUSH
36657: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
36658: LD_VAR 0 1
36662: NOT
36663: PUSH
36664: LD_VAR 0 1
36668: PPUSH
36669: CALL_OW 263
36673: PUSH
36674: LD_INT 2
36676: EQUAL
36677: NOT
36678: OR
36679: IFFALSE 36683
// exit ;
36681: GO 36999
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36683: LD_ADDR_VAR 0 6
36687: PUSH
36688: LD_INT 22
36690: PUSH
36691: LD_VAR 0 1
36695: PPUSH
36696: CALL_OW 255
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 2
36707: PUSH
36708: LD_INT 30
36710: PUSH
36711: LD_INT 36
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 34
36720: PUSH
36721: LD_INT 31
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: LIST
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PPUSH
36737: CALL_OW 69
36741: ST_TO_ADDR
// if not tmp then
36742: LD_VAR 0 6
36746: NOT
36747: IFFALSE 36751
// exit ;
36749: GO 36999
// result := [ ] ;
36751: LD_ADDR_VAR 0 2
36755: PUSH
36756: EMPTY
36757: ST_TO_ADDR
// for i in tmp do
36758: LD_ADDR_VAR 0 3
36762: PUSH
36763: LD_VAR 0 6
36767: PUSH
36768: FOR_IN
36769: IFFALSE 36840
// begin t := UnitsInside ( i ) ;
36771: LD_ADDR_VAR 0 4
36775: PUSH
36776: LD_VAR 0 3
36780: PPUSH
36781: CALL_OW 313
36785: ST_TO_ADDR
// if t then
36786: LD_VAR 0 4
36790: IFFALSE 36838
// for j in t do
36792: LD_ADDR_VAR 0 7
36796: PUSH
36797: LD_VAR 0 4
36801: PUSH
36802: FOR_IN
36803: IFFALSE 36836
// result := Insert ( result , result + 1 , j ) ;
36805: LD_ADDR_VAR 0 2
36809: PUSH
36810: LD_VAR 0 2
36814: PPUSH
36815: LD_VAR 0 2
36819: PUSH
36820: LD_INT 1
36822: PLUS
36823: PPUSH
36824: LD_VAR 0 7
36828: PPUSH
36829: CALL_OW 2
36833: ST_TO_ADDR
36834: GO 36802
36836: POP
36837: POP
// end ;
36838: GO 36768
36840: POP
36841: POP
// if not result then
36842: LD_VAR 0 2
36846: NOT
36847: IFFALSE 36851
// exit ;
36849: GO 36999
// mech := result [ 1 ] ;
36851: LD_ADDR_VAR 0 5
36855: PUSH
36856: LD_VAR 0 2
36860: PUSH
36861: LD_INT 1
36863: ARRAY
36864: ST_TO_ADDR
// if result > 1 then
36865: LD_VAR 0 2
36869: PUSH
36870: LD_INT 1
36872: GREATER
36873: IFFALSE 36985
// for i = 2 to result do
36875: LD_ADDR_VAR 0 3
36879: PUSH
36880: DOUBLE
36881: LD_INT 2
36883: DEC
36884: ST_TO_ADDR
36885: LD_VAR 0 2
36889: PUSH
36890: FOR_TO
36891: IFFALSE 36983
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36893: LD_ADDR_VAR 0 4
36897: PUSH
36898: LD_VAR 0 2
36902: PUSH
36903: LD_VAR 0 3
36907: ARRAY
36908: PPUSH
36909: LD_INT 3
36911: PPUSH
36912: CALL_OW 259
36916: PUSH
36917: LD_VAR 0 2
36921: PUSH
36922: LD_VAR 0 3
36926: ARRAY
36927: PPUSH
36928: CALL_OW 432
36932: MINUS
36933: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36934: LD_VAR 0 4
36938: PUSH
36939: LD_VAR 0 5
36943: PPUSH
36944: LD_INT 3
36946: PPUSH
36947: CALL_OW 259
36951: PUSH
36952: LD_VAR 0 5
36956: PPUSH
36957: CALL_OW 432
36961: MINUS
36962: GREATEREQUAL
36963: IFFALSE 36981
// mech := result [ i ] ;
36965: LD_ADDR_VAR 0 5
36969: PUSH
36970: LD_VAR 0 2
36974: PUSH
36975: LD_VAR 0 3
36979: ARRAY
36980: ST_TO_ADDR
// end ;
36981: GO 36890
36983: POP
36984: POP
// ComLinkTo ( vehicle , mech ) ;
36985: LD_VAR 0 1
36989: PPUSH
36990: LD_VAR 0 5
36994: PPUSH
36995: CALL_OW 135
// end ;
36999: LD_VAR 0 2
37003: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37004: LD_INT 0
37006: PPUSH
37007: PPUSH
37008: PPUSH
37009: PPUSH
37010: PPUSH
37011: PPUSH
37012: PPUSH
37013: PPUSH
37014: PPUSH
37015: PPUSH
37016: PPUSH
37017: PPUSH
37018: PPUSH
// result := [ ] ;
37019: LD_ADDR_VAR 0 7
37023: PUSH
37024: EMPTY
37025: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37026: LD_VAR 0 1
37030: PPUSH
37031: CALL_OW 266
37035: PUSH
37036: LD_INT 0
37038: PUSH
37039: LD_INT 1
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: IN
37046: NOT
37047: IFFALSE 37051
// exit ;
37049: GO 38682
// if name then
37051: LD_VAR 0 3
37055: IFFALSE 37071
// SetBName ( base_dep , name ) ;
37057: LD_VAR 0 1
37061: PPUSH
37062: LD_VAR 0 3
37066: PPUSH
37067: CALL_OW 500
// base := GetBase ( base_dep ) ;
37071: LD_ADDR_VAR 0 15
37075: PUSH
37076: LD_VAR 0 1
37080: PPUSH
37081: CALL_OW 274
37085: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37086: LD_ADDR_VAR 0 16
37090: PUSH
37091: LD_VAR 0 1
37095: PPUSH
37096: CALL_OW 255
37100: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37101: LD_ADDR_VAR 0 17
37105: PUSH
37106: LD_VAR 0 1
37110: PPUSH
37111: CALL_OW 248
37115: ST_TO_ADDR
// if sources then
37116: LD_VAR 0 5
37120: IFFALSE 37167
// for i = 1 to 3 do
37122: LD_ADDR_VAR 0 8
37126: PUSH
37127: DOUBLE
37128: LD_INT 1
37130: DEC
37131: ST_TO_ADDR
37132: LD_INT 3
37134: PUSH
37135: FOR_TO
37136: IFFALSE 37165
// AddResourceType ( base , i , sources [ i ] ) ;
37138: LD_VAR 0 15
37142: PPUSH
37143: LD_VAR 0 8
37147: PPUSH
37148: LD_VAR 0 5
37152: PUSH
37153: LD_VAR 0 8
37157: ARRAY
37158: PPUSH
37159: CALL_OW 276
37163: GO 37135
37165: POP
37166: POP
// buildings := GetBaseBuildings ( base , area ) ;
37167: LD_ADDR_VAR 0 18
37171: PUSH
37172: LD_VAR 0 15
37176: PPUSH
37177: LD_VAR 0 2
37181: PPUSH
37182: CALL 36459 0 2
37186: ST_TO_ADDR
// InitHc ;
37187: CALL_OW 19
// InitUc ;
37191: CALL_OW 18
// uc_side := side ;
37195: LD_ADDR_OWVAR 20
37199: PUSH
37200: LD_VAR 0 16
37204: ST_TO_ADDR
// uc_nation := nation ;
37205: LD_ADDR_OWVAR 21
37209: PUSH
37210: LD_VAR 0 17
37214: ST_TO_ADDR
// if buildings then
37215: LD_VAR 0 18
37219: IFFALSE 38541
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37221: LD_ADDR_VAR 0 19
37225: PUSH
37226: LD_VAR 0 18
37230: PPUSH
37231: LD_INT 2
37233: PUSH
37234: LD_INT 30
37236: PUSH
37237: LD_INT 29
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 30
37246: PUSH
37247: LD_INT 30
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: LIST
37258: PPUSH
37259: CALL_OW 72
37263: ST_TO_ADDR
// if tmp then
37264: LD_VAR 0 19
37268: IFFALSE 37316
// for i in tmp do
37270: LD_ADDR_VAR 0 8
37274: PUSH
37275: LD_VAR 0 19
37279: PUSH
37280: FOR_IN
37281: IFFALSE 37314
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37283: LD_VAR 0 8
37287: PPUSH
37288: CALL_OW 250
37292: PPUSH
37293: LD_VAR 0 8
37297: PPUSH
37298: CALL_OW 251
37302: PPUSH
37303: LD_VAR 0 16
37307: PPUSH
37308: CALL_OW 441
37312: GO 37280
37314: POP
37315: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37316: LD_VAR 0 18
37320: PPUSH
37321: LD_INT 2
37323: PUSH
37324: LD_INT 30
37326: PUSH
37327: LD_INT 32
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 30
37336: PUSH
37337: LD_INT 33
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: LIST
37348: PPUSH
37349: CALL_OW 72
37353: IFFALSE 37441
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37355: LD_ADDR_VAR 0 8
37359: PUSH
37360: LD_VAR 0 18
37364: PPUSH
37365: LD_INT 2
37367: PUSH
37368: LD_INT 30
37370: PUSH
37371: LD_INT 32
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 30
37380: PUSH
37381: LD_INT 33
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: LIST
37392: PPUSH
37393: CALL_OW 72
37397: PUSH
37398: FOR_IN
37399: IFFALSE 37439
// begin if not GetBWeapon ( i ) then
37401: LD_VAR 0 8
37405: PPUSH
37406: CALL_OW 269
37410: NOT
37411: IFFALSE 37437
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37413: LD_VAR 0 8
37417: PPUSH
37418: LD_VAR 0 8
37422: PPUSH
37423: LD_VAR 0 2
37427: PPUSH
37428: CALL 38687 0 2
37432: PPUSH
37433: CALL_OW 431
// end ;
37437: GO 37398
37439: POP
37440: POP
// end ; for i = 1 to personel do
37441: LD_ADDR_VAR 0 8
37445: PUSH
37446: DOUBLE
37447: LD_INT 1
37449: DEC
37450: ST_TO_ADDR
37451: LD_VAR 0 6
37455: PUSH
37456: FOR_TO
37457: IFFALSE 38521
// begin if i > 4 then
37459: LD_VAR 0 8
37463: PUSH
37464: LD_INT 4
37466: GREATER
37467: IFFALSE 37471
// break ;
37469: GO 38521
// case i of 1 :
37471: LD_VAR 0 8
37475: PUSH
37476: LD_INT 1
37478: DOUBLE
37479: EQUAL
37480: IFTRUE 37484
37482: GO 37564
37484: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37485: LD_ADDR_VAR 0 12
37489: PUSH
37490: LD_VAR 0 18
37494: PPUSH
37495: LD_INT 22
37497: PUSH
37498: LD_VAR 0 16
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 58
37509: PUSH
37510: EMPTY
37511: LIST
37512: PUSH
37513: LD_INT 2
37515: PUSH
37516: LD_INT 30
37518: PUSH
37519: LD_INT 32
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 30
37528: PUSH
37529: LD_INT 4
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 30
37538: PUSH
37539: LD_INT 5
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: LIST
37556: PPUSH
37557: CALL_OW 72
37561: ST_TO_ADDR
37562: GO 37786
37564: LD_INT 2
37566: DOUBLE
37567: EQUAL
37568: IFTRUE 37572
37570: GO 37634
37572: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37573: LD_ADDR_VAR 0 12
37577: PUSH
37578: LD_VAR 0 18
37582: PPUSH
37583: LD_INT 22
37585: PUSH
37586: LD_VAR 0 16
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 2
37597: PUSH
37598: LD_INT 30
37600: PUSH
37601: LD_INT 0
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 30
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: LIST
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PPUSH
37627: CALL_OW 72
37631: ST_TO_ADDR
37632: GO 37786
37634: LD_INT 3
37636: DOUBLE
37637: EQUAL
37638: IFTRUE 37642
37640: GO 37704
37642: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37643: LD_ADDR_VAR 0 12
37647: PUSH
37648: LD_VAR 0 18
37652: PPUSH
37653: LD_INT 22
37655: PUSH
37656: LD_VAR 0 16
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 2
37667: PUSH
37668: LD_INT 30
37670: PUSH
37671: LD_INT 2
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 30
37680: PUSH
37681: LD_INT 3
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: LIST
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PPUSH
37697: CALL_OW 72
37701: ST_TO_ADDR
37702: GO 37786
37704: LD_INT 4
37706: DOUBLE
37707: EQUAL
37708: IFTRUE 37712
37710: GO 37785
37712: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37713: LD_ADDR_VAR 0 12
37717: PUSH
37718: LD_VAR 0 18
37722: PPUSH
37723: LD_INT 22
37725: PUSH
37726: LD_VAR 0 16
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 2
37737: PUSH
37738: LD_INT 30
37740: PUSH
37741: LD_INT 6
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 30
37750: PUSH
37751: LD_INT 7
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 30
37760: PUSH
37761: LD_INT 8
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PPUSH
37778: CALL_OW 72
37782: ST_TO_ADDR
37783: GO 37786
37785: POP
// if i = 1 then
37786: LD_VAR 0 8
37790: PUSH
37791: LD_INT 1
37793: EQUAL
37794: IFFALSE 37905
// begin tmp := [ ] ;
37796: LD_ADDR_VAR 0 19
37800: PUSH
37801: EMPTY
37802: ST_TO_ADDR
// for j in f do
37803: LD_ADDR_VAR 0 9
37807: PUSH
37808: LD_VAR 0 12
37812: PUSH
37813: FOR_IN
37814: IFFALSE 37887
// if GetBType ( j ) = b_bunker then
37816: LD_VAR 0 9
37820: PPUSH
37821: CALL_OW 266
37825: PUSH
37826: LD_INT 32
37828: EQUAL
37829: IFFALSE 37856
// tmp := Insert ( tmp , 1 , j ) else
37831: LD_ADDR_VAR 0 19
37835: PUSH
37836: LD_VAR 0 19
37840: PPUSH
37841: LD_INT 1
37843: PPUSH
37844: LD_VAR 0 9
37848: PPUSH
37849: CALL_OW 2
37853: ST_TO_ADDR
37854: GO 37885
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37856: LD_ADDR_VAR 0 19
37860: PUSH
37861: LD_VAR 0 19
37865: PPUSH
37866: LD_VAR 0 19
37870: PUSH
37871: LD_INT 1
37873: PLUS
37874: PPUSH
37875: LD_VAR 0 9
37879: PPUSH
37880: CALL_OW 2
37884: ST_TO_ADDR
37885: GO 37813
37887: POP
37888: POP
// if tmp then
37889: LD_VAR 0 19
37893: IFFALSE 37905
// f := tmp ;
37895: LD_ADDR_VAR 0 12
37899: PUSH
37900: LD_VAR 0 19
37904: ST_TO_ADDR
// end ; x := personel [ i ] ;
37905: LD_ADDR_VAR 0 13
37909: PUSH
37910: LD_VAR 0 6
37914: PUSH
37915: LD_VAR 0 8
37919: ARRAY
37920: ST_TO_ADDR
// if x = - 1 then
37921: LD_VAR 0 13
37925: PUSH
37926: LD_INT 1
37928: NEG
37929: EQUAL
37930: IFFALSE 38139
// begin for j in f do
37932: LD_ADDR_VAR 0 9
37936: PUSH
37937: LD_VAR 0 12
37941: PUSH
37942: FOR_IN
37943: IFFALSE 38135
// repeat InitHc ;
37945: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37949: LD_VAR 0 9
37953: PPUSH
37954: CALL_OW 266
37958: PUSH
37959: LD_INT 5
37961: EQUAL
37962: IFFALSE 38032
// begin if UnitsInside ( j ) < 3 then
37964: LD_VAR 0 9
37968: PPUSH
37969: CALL_OW 313
37973: PUSH
37974: LD_INT 3
37976: LESS
37977: IFFALSE 38013
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37979: LD_INT 0
37981: PPUSH
37982: LD_INT 5
37984: PUSH
37985: LD_INT 8
37987: PUSH
37988: LD_INT 9
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: LIST
37995: PUSH
37996: LD_VAR 0 17
38000: ARRAY
38001: PPUSH
38002: LD_VAR 0 4
38006: PPUSH
38007: CALL_OW 380
38011: GO 38030
// PrepareHuman ( false , i , skill ) ;
38013: LD_INT 0
38015: PPUSH
38016: LD_VAR 0 8
38020: PPUSH
38021: LD_VAR 0 4
38025: PPUSH
38026: CALL_OW 380
// end else
38030: GO 38049
// PrepareHuman ( false , i , skill ) ;
38032: LD_INT 0
38034: PPUSH
38035: LD_VAR 0 8
38039: PPUSH
38040: LD_VAR 0 4
38044: PPUSH
38045: CALL_OW 380
// un := CreateHuman ;
38049: LD_ADDR_VAR 0 14
38053: PUSH
38054: CALL_OW 44
38058: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38059: LD_ADDR_VAR 0 7
38063: PUSH
38064: LD_VAR 0 7
38068: PPUSH
38069: LD_INT 1
38071: PPUSH
38072: LD_VAR 0 14
38076: PPUSH
38077: CALL_OW 2
38081: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38082: LD_VAR 0 14
38086: PPUSH
38087: LD_VAR 0 9
38091: PPUSH
38092: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38096: LD_VAR 0 9
38100: PPUSH
38101: CALL_OW 313
38105: PUSH
38106: LD_INT 6
38108: EQUAL
38109: PUSH
38110: LD_VAR 0 9
38114: PPUSH
38115: CALL_OW 266
38119: PUSH
38120: LD_INT 32
38122: PUSH
38123: LD_INT 31
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: IN
38130: OR
38131: IFFALSE 37945
38133: GO 37942
38135: POP
38136: POP
// end else
38137: GO 38519
// for j = 1 to x do
38139: LD_ADDR_VAR 0 9
38143: PUSH
38144: DOUBLE
38145: LD_INT 1
38147: DEC
38148: ST_TO_ADDR
38149: LD_VAR 0 13
38153: PUSH
38154: FOR_TO
38155: IFFALSE 38517
// begin InitHc ;
38157: CALL_OW 19
// if not f then
38161: LD_VAR 0 12
38165: NOT
38166: IFFALSE 38255
// begin PrepareHuman ( false , i , skill ) ;
38168: LD_INT 0
38170: PPUSH
38171: LD_VAR 0 8
38175: PPUSH
38176: LD_VAR 0 4
38180: PPUSH
38181: CALL_OW 380
// un := CreateHuman ;
38185: LD_ADDR_VAR 0 14
38189: PUSH
38190: CALL_OW 44
38194: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38195: LD_ADDR_VAR 0 7
38199: PUSH
38200: LD_VAR 0 7
38204: PPUSH
38205: LD_INT 1
38207: PPUSH
38208: LD_VAR 0 14
38212: PPUSH
38213: CALL_OW 2
38217: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38218: LD_VAR 0 14
38222: PPUSH
38223: LD_VAR 0 1
38227: PPUSH
38228: CALL_OW 250
38232: PPUSH
38233: LD_VAR 0 1
38237: PPUSH
38238: CALL_OW 251
38242: PPUSH
38243: LD_INT 10
38245: PPUSH
38246: LD_INT 0
38248: PPUSH
38249: CALL_OW 50
// continue ;
38253: GO 38154
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38255: LD_VAR 0 12
38259: PUSH
38260: LD_INT 1
38262: ARRAY
38263: PPUSH
38264: CALL_OW 313
38268: PUSH
38269: LD_VAR 0 12
38273: PUSH
38274: LD_INT 1
38276: ARRAY
38277: PPUSH
38278: CALL_OW 266
38282: PUSH
38283: LD_INT 32
38285: PUSH
38286: LD_INT 31
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: IN
38293: AND
38294: PUSH
38295: LD_VAR 0 12
38299: PUSH
38300: LD_INT 1
38302: ARRAY
38303: PPUSH
38304: CALL_OW 313
38308: PUSH
38309: LD_INT 6
38311: EQUAL
38312: OR
38313: IFFALSE 38333
// f := Delete ( f , 1 ) ;
38315: LD_ADDR_VAR 0 12
38319: PUSH
38320: LD_VAR 0 12
38324: PPUSH
38325: LD_INT 1
38327: PPUSH
38328: CALL_OW 3
38332: ST_TO_ADDR
// if not f then
38333: LD_VAR 0 12
38337: NOT
38338: IFFALSE 38356
// begin x := x + 2 ;
38340: LD_ADDR_VAR 0 13
38344: PUSH
38345: LD_VAR 0 13
38349: PUSH
38350: LD_INT 2
38352: PLUS
38353: ST_TO_ADDR
// continue ;
38354: GO 38154
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38356: LD_VAR 0 12
38360: PUSH
38361: LD_INT 1
38363: ARRAY
38364: PPUSH
38365: CALL_OW 266
38369: PUSH
38370: LD_INT 5
38372: EQUAL
38373: IFFALSE 38447
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38375: LD_VAR 0 12
38379: PUSH
38380: LD_INT 1
38382: ARRAY
38383: PPUSH
38384: CALL_OW 313
38388: PUSH
38389: LD_INT 3
38391: LESS
38392: IFFALSE 38428
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38394: LD_INT 0
38396: PPUSH
38397: LD_INT 5
38399: PUSH
38400: LD_INT 8
38402: PUSH
38403: LD_INT 9
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: LIST
38410: PUSH
38411: LD_VAR 0 17
38415: ARRAY
38416: PPUSH
38417: LD_VAR 0 4
38421: PPUSH
38422: CALL_OW 380
38426: GO 38445
// PrepareHuman ( false , i , skill ) ;
38428: LD_INT 0
38430: PPUSH
38431: LD_VAR 0 8
38435: PPUSH
38436: LD_VAR 0 4
38440: PPUSH
38441: CALL_OW 380
// end else
38445: GO 38464
// PrepareHuman ( false , i , skill ) ;
38447: LD_INT 0
38449: PPUSH
38450: LD_VAR 0 8
38454: PPUSH
38455: LD_VAR 0 4
38459: PPUSH
38460: CALL_OW 380
// un := CreateHuman ;
38464: LD_ADDR_VAR 0 14
38468: PUSH
38469: CALL_OW 44
38473: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38474: LD_ADDR_VAR 0 7
38478: PUSH
38479: LD_VAR 0 7
38483: PPUSH
38484: LD_INT 1
38486: PPUSH
38487: LD_VAR 0 14
38491: PPUSH
38492: CALL_OW 2
38496: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38497: LD_VAR 0 14
38501: PPUSH
38502: LD_VAR 0 12
38506: PUSH
38507: LD_INT 1
38509: ARRAY
38510: PPUSH
38511: CALL_OW 52
// end ;
38515: GO 38154
38517: POP
38518: POP
// end ;
38519: GO 37456
38521: POP
38522: POP
// result := result ^ buildings ;
38523: LD_ADDR_VAR 0 7
38527: PUSH
38528: LD_VAR 0 7
38532: PUSH
38533: LD_VAR 0 18
38537: ADD
38538: ST_TO_ADDR
// end else
38539: GO 38682
// begin for i = 1 to personel do
38541: LD_ADDR_VAR 0 8
38545: PUSH
38546: DOUBLE
38547: LD_INT 1
38549: DEC
38550: ST_TO_ADDR
38551: LD_VAR 0 6
38555: PUSH
38556: FOR_TO
38557: IFFALSE 38680
// begin if i > 4 then
38559: LD_VAR 0 8
38563: PUSH
38564: LD_INT 4
38566: GREATER
38567: IFFALSE 38571
// break ;
38569: GO 38680
// x := personel [ i ] ;
38571: LD_ADDR_VAR 0 13
38575: PUSH
38576: LD_VAR 0 6
38580: PUSH
38581: LD_VAR 0 8
38585: ARRAY
38586: ST_TO_ADDR
// if x = - 1 then
38587: LD_VAR 0 13
38591: PUSH
38592: LD_INT 1
38594: NEG
38595: EQUAL
38596: IFFALSE 38600
// continue ;
38598: GO 38556
// PrepareHuman ( false , i , skill ) ;
38600: LD_INT 0
38602: PPUSH
38603: LD_VAR 0 8
38607: PPUSH
38608: LD_VAR 0 4
38612: PPUSH
38613: CALL_OW 380
// un := CreateHuman ;
38617: LD_ADDR_VAR 0 14
38621: PUSH
38622: CALL_OW 44
38626: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38627: LD_VAR 0 14
38631: PPUSH
38632: LD_VAR 0 1
38636: PPUSH
38637: CALL_OW 250
38641: PPUSH
38642: LD_VAR 0 1
38646: PPUSH
38647: CALL_OW 251
38651: PPUSH
38652: LD_INT 10
38654: PPUSH
38655: LD_INT 0
38657: PPUSH
38658: CALL_OW 50
// result := result ^ un ;
38662: LD_ADDR_VAR 0 7
38666: PUSH
38667: LD_VAR 0 7
38671: PUSH
38672: LD_VAR 0 14
38676: ADD
38677: ST_TO_ADDR
// end ;
38678: GO 38556
38680: POP
38681: POP
// end ; end ;
38682: LD_VAR 0 7
38686: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38687: LD_INT 0
38689: PPUSH
38690: PPUSH
38691: PPUSH
38692: PPUSH
38693: PPUSH
38694: PPUSH
38695: PPUSH
38696: PPUSH
38697: PPUSH
38698: PPUSH
38699: PPUSH
38700: PPUSH
38701: PPUSH
38702: PPUSH
38703: PPUSH
38704: PPUSH
// result := false ;
38705: LD_ADDR_VAR 0 3
38709: PUSH
38710: LD_INT 0
38712: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38713: LD_VAR 0 1
38717: NOT
38718: PUSH
38719: LD_VAR 0 1
38723: PPUSH
38724: CALL_OW 266
38728: PUSH
38729: LD_INT 32
38731: PUSH
38732: LD_INT 33
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: IN
38739: NOT
38740: OR
38741: IFFALSE 38745
// exit ;
38743: GO 39881
// nat := GetNation ( tower ) ;
38745: LD_ADDR_VAR 0 12
38749: PUSH
38750: LD_VAR 0 1
38754: PPUSH
38755: CALL_OW 248
38759: ST_TO_ADDR
// side := GetSide ( tower ) ;
38760: LD_ADDR_VAR 0 16
38764: PUSH
38765: LD_VAR 0 1
38769: PPUSH
38770: CALL_OW 255
38774: ST_TO_ADDR
// x := GetX ( tower ) ;
38775: LD_ADDR_VAR 0 10
38779: PUSH
38780: LD_VAR 0 1
38784: PPUSH
38785: CALL_OW 250
38789: ST_TO_ADDR
// y := GetY ( tower ) ;
38790: LD_ADDR_VAR 0 11
38794: PUSH
38795: LD_VAR 0 1
38799: PPUSH
38800: CALL_OW 251
38804: ST_TO_ADDR
// if not x or not y then
38805: LD_VAR 0 10
38809: NOT
38810: PUSH
38811: LD_VAR 0 11
38815: NOT
38816: OR
38817: IFFALSE 38821
// exit ;
38819: GO 39881
// weapon := 0 ;
38821: LD_ADDR_VAR 0 18
38825: PUSH
38826: LD_INT 0
38828: ST_TO_ADDR
// fac_list := [ ] ;
38829: LD_ADDR_VAR 0 17
38833: PUSH
38834: EMPTY
38835: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
38836: LD_ADDR_VAR 0 6
38840: PUSH
38841: LD_VAR 0 1
38845: PPUSH
38846: CALL_OW 274
38850: PPUSH
38851: LD_VAR 0 2
38855: PPUSH
38856: CALL 36459 0 2
38860: PPUSH
38861: LD_INT 30
38863: PUSH
38864: LD_INT 3
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PPUSH
38871: CALL_OW 72
38875: ST_TO_ADDR
// if not factories then
38876: LD_VAR 0 6
38880: NOT
38881: IFFALSE 38885
// exit ;
38883: GO 39881
// for i in factories do
38885: LD_ADDR_VAR 0 8
38889: PUSH
38890: LD_VAR 0 6
38894: PUSH
38895: FOR_IN
38896: IFFALSE 38921
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38898: LD_ADDR_VAR 0 17
38902: PUSH
38903: LD_VAR 0 17
38907: PUSH
38908: LD_VAR 0 8
38912: PPUSH
38913: CALL_OW 478
38917: UNION
38918: ST_TO_ADDR
38919: GO 38895
38921: POP
38922: POP
// if not fac_list then
38923: LD_VAR 0 17
38927: NOT
38928: IFFALSE 38932
// exit ;
38930: GO 39881
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38932: LD_ADDR_VAR 0 5
38936: PUSH
38937: LD_INT 4
38939: PUSH
38940: LD_INT 5
38942: PUSH
38943: LD_INT 9
38945: PUSH
38946: LD_INT 10
38948: PUSH
38949: LD_INT 6
38951: PUSH
38952: LD_INT 7
38954: PUSH
38955: LD_INT 11
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 27
38969: PUSH
38970: LD_INT 28
38972: PUSH
38973: LD_INT 26
38975: PUSH
38976: LD_INT 30
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 43
38987: PUSH
38988: LD_INT 44
38990: PUSH
38991: LD_INT 46
38993: PUSH
38994: LD_INT 45
38996: PUSH
38997: LD_INT 47
38999: PUSH
39000: LD_INT 49
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: LIST
39015: PUSH
39016: LD_VAR 0 12
39020: ARRAY
39021: ST_TO_ADDR
// for i in list do
39022: LD_ADDR_VAR 0 8
39026: PUSH
39027: LD_VAR 0 5
39031: PUSH
39032: FOR_IN
39033: IFFALSE 39066
// if not i in fac_list then
39035: LD_VAR 0 8
39039: PUSH
39040: LD_VAR 0 17
39044: IN
39045: NOT
39046: IFFALSE 39064
// list := list diff i ;
39048: LD_ADDR_VAR 0 5
39052: PUSH
39053: LD_VAR 0 5
39057: PUSH
39058: LD_VAR 0 8
39062: DIFF
39063: ST_TO_ADDR
39064: GO 39032
39066: POP
39067: POP
// if not list then
39068: LD_VAR 0 5
39072: NOT
39073: IFFALSE 39077
// exit ;
39075: GO 39881
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39077: LD_VAR 0 12
39081: PUSH
39082: LD_INT 3
39084: EQUAL
39085: PUSH
39086: LD_INT 49
39088: PUSH
39089: LD_VAR 0 5
39093: IN
39094: AND
39095: PUSH
39096: LD_INT 31
39098: PPUSH
39099: LD_VAR 0 16
39103: PPUSH
39104: CALL_OW 321
39108: PUSH
39109: LD_INT 2
39111: EQUAL
39112: AND
39113: IFFALSE 39173
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39115: LD_INT 22
39117: PUSH
39118: LD_VAR 0 16
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 35
39129: PUSH
39130: LD_INT 49
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 91
39139: PUSH
39140: LD_VAR 0 1
39144: PUSH
39145: LD_INT 10
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: LIST
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: LIST
39157: PPUSH
39158: CALL_OW 69
39162: NOT
39163: IFFALSE 39173
// weapon := ru_time_lapser ;
39165: LD_ADDR_VAR 0 18
39169: PUSH
39170: LD_INT 49
39172: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39173: LD_VAR 0 12
39177: PUSH
39178: LD_INT 1
39180: PUSH
39181: LD_INT 2
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: IN
39188: PUSH
39189: LD_INT 11
39191: PUSH
39192: LD_VAR 0 5
39196: IN
39197: PUSH
39198: LD_INT 30
39200: PUSH
39201: LD_VAR 0 5
39205: IN
39206: OR
39207: AND
39208: PUSH
39209: LD_INT 6
39211: PPUSH
39212: LD_VAR 0 16
39216: PPUSH
39217: CALL_OW 321
39221: PUSH
39222: LD_INT 2
39224: EQUAL
39225: AND
39226: IFFALSE 39391
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39228: LD_INT 22
39230: PUSH
39231: LD_VAR 0 16
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 2
39242: PUSH
39243: LD_INT 35
39245: PUSH
39246: LD_INT 11
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 35
39255: PUSH
39256: LD_INT 30
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 91
39270: PUSH
39271: LD_VAR 0 1
39275: PUSH
39276: LD_INT 18
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: LIST
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: LIST
39288: PPUSH
39289: CALL_OW 69
39293: NOT
39294: PUSH
39295: LD_INT 22
39297: PUSH
39298: LD_VAR 0 16
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 2
39309: PUSH
39310: LD_INT 30
39312: PUSH
39313: LD_INT 32
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 30
39322: PUSH
39323: LD_INT 33
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 91
39337: PUSH
39338: LD_VAR 0 1
39342: PUSH
39343: LD_INT 12
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: LIST
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: LIST
39355: PUSH
39356: EMPTY
39357: LIST
39358: PPUSH
39359: CALL_OW 69
39363: PUSH
39364: LD_INT 2
39366: GREATER
39367: AND
39368: IFFALSE 39391
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39370: LD_ADDR_VAR 0 18
39374: PUSH
39375: LD_INT 11
39377: PUSH
39378: LD_INT 30
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_VAR 0 12
39389: ARRAY
39390: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39391: LD_VAR 0 18
39395: NOT
39396: PUSH
39397: LD_INT 40
39399: PPUSH
39400: LD_VAR 0 16
39404: PPUSH
39405: CALL_OW 321
39409: PUSH
39410: LD_INT 2
39412: EQUAL
39413: AND
39414: PUSH
39415: LD_INT 7
39417: PUSH
39418: LD_VAR 0 5
39422: IN
39423: PUSH
39424: LD_INT 28
39426: PUSH
39427: LD_VAR 0 5
39431: IN
39432: OR
39433: PUSH
39434: LD_INT 45
39436: PUSH
39437: LD_VAR 0 5
39441: IN
39442: OR
39443: AND
39444: IFFALSE 39698
// begin hex := GetHexInfo ( x , y ) ;
39446: LD_ADDR_VAR 0 4
39450: PUSH
39451: LD_VAR 0 10
39455: PPUSH
39456: LD_VAR 0 11
39460: PPUSH
39461: CALL_OW 546
39465: ST_TO_ADDR
// if hex [ 1 ] then
39466: LD_VAR 0 4
39470: PUSH
39471: LD_INT 1
39473: ARRAY
39474: IFFALSE 39478
// exit ;
39476: GO 39881
// height := hex [ 2 ] ;
39478: LD_ADDR_VAR 0 15
39482: PUSH
39483: LD_VAR 0 4
39487: PUSH
39488: LD_INT 2
39490: ARRAY
39491: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39492: LD_ADDR_VAR 0 14
39496: PUSH
39497: LD_INT 0
39499: PUSH
39500: LD_INT 2
39502: PUSH
39503: LD_INT 3
39505: PUSH
39506: LD_INT 5
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: ST_TO_ADDR
// for i in tmp do
39515: LD_ADDR_VAR 0 8
39519: PUSH
39520: LD_VAR 0 14
39524: PUSH
39525: FOR_IN
39526: IFFALSE 39696
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39528: LD_ADDR_VAR 0 9
39532: PUSH
39533: LD_VAR 0 10
39537: PPUSH
39538: LD_VAR 0 8
39542: PPUSH
39543: LD_INT 5
39545: PPUSH
39546: CALL_OW 272
39550: PUSH
39551: LD_VAR 0 11
39555: PPUSH
39556: LD_VAR 0 8
39560: PPUSH
39561: LD_INT 5
39563: PPUSH
39564: CALL_OW 273
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39573: LD_VAR 0 9
39577: PUSH
39578: LD_INT 1
39580: ARRAY
39581: PPUSH
39582: LD_VAR 0 9
39586: PUSH
39587: LD_INT 2
39589: ARRAY
39590: PPUSH
39591: CALL_OW 488
39595: IFFALSE 39694
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39597: LD_ADDR_VAR 0 4
39601: PUSH
39602: LD_VAR 0 9
39606: PUSH
39607: LD_INT 1
39609: ARRAY
39610: PPUSH
39611: LD_VAR 0 9
39615: PUSH
39616: LD_INT 2
39618: ARRAY
39619: PPUSH
39620: CALL_OW 546
39624: ST_TO_ADDR
// if hex [ 1 ] then
39625: LD_VAR 0 4
39629: PUSH
39630: LD_INT 1
39632: ARRAY
39633: IFFALSE 39637
// continue ;
39635: GO 39525
// h := hex [ 2 ] ;
39637: LD_ADDR_VAR 0 13
39641: PUSH
39642: LD_VAR 0 4
39646: PUSH
39647: LD_INT 2
39649: ARRAY
39650: ST_TO_ADDR
// if h + 7 < height then
39651: LD_VAR 0 13
39655: PUSH
39656: LD_INT 7
39658: PLUS
39659: PUSH
39660: LD_VAR 0 15
39664: LESS
39665: IFFALSE 39694
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39667: LD_ADDR_VAR 0 18
39671: PUSH
39672: LD_INT 7
39674: PUSH
39675: LD_INT 28
39677: PUSH
39678: LD_INT 45
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: LIST
39685: PUSH
39686: LD_VAR 0 12
39690: ARRAY
39691: ST_TO_ADDR
// break ;
39692: GO 39696
// end ; end ; end ;
39694: GO 39525
39696: POP
39697: POP
// end ; if not weapon then
39698: LD_VAR 0 18
39702: NOT
39703: IFFALSE 39763
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39705: LD_ADDR_VAR 0 5
39709: PUSH
39710: LD_VAR 0 5
39714: PUSH
39715: LD_INT 11
39717: PUSH
39718: LD_INT 30
39720: PUSH
39721: LD_INT 49
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: LIST
39728: DIFF
39729: ST_TO_ADDR
// if not list then
39730: LD_VAR 0 5
39734: NOT
39735: IFFALSE 39739
// exit ;
39737: GO 39881
// weapon := list [ rand ( 1 , list ) ] ;
39739: LD_ADDR_VAR 0 18
39743: PUSH
39744: LD_VAR 0 5
39748: PUSH
39749: LD_INT 1
39751: PPUSH
39752: LD_VAR 0 5
39756: PPUSH
39757: CALL_OW 12
39761: ARRAY
39762: ST_TO_ADDR
// end ; if weapon then
39763: LD_VAR 0 18
39767: IFFALSE 39881
// begin tmp := CostOfWeapon ( weapon ) ;
39769: LD_ADDR_VAR 0 14
39773: PUSH
39774: LD_VAR 0 18
39778: PPUSH
39779: CALL_OW 451
39783: ST_TO_ADDR
// j := GetBase ( tower ) ;
39784: LD_ADDR_VAR 0 9
39788: PUSH
39789: LD_VAR 0 1
39793: PPUSH
39794: CALL_OW 274
39798: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39799: LD_VAR 0 9
39803: PPUSH
39804: LD_INT 1
39806: PPUSH
39807: CALL_OW 275
39811: PUSH
39812: LD_VAR 0 14
39816: PUSH
39817: LD_INT 1
39819: ARRAY
39820: GREATEREQUAL
39821: PUSH
39822: LD_VAR 0 9
39826: PPUSH
39827: LD_INT 2
39829: PPUSH
39830: CALL_OW 275
39834: PUSH
39835: LD_VAR 0 14
39839: PUSH
39840: LD_INT 2
39842: ARRAY
39843: GREATEREQUAL
39844: AND
39845: PUSH
39846: LD_VAR 0 9
39850: PPUSH
39851: LD_INT 3
39853: PPUSH
39854: CALL_OW 275
39858: PUSH
39859: LD_VAR 0 14
39863: PUSH
39864: LD_INT 3
39866: ARRAY
39867: GREATEREQUAL
39868: AND
39869: IFFALSE 39881
// result := weapon ;
39871: LD_ADDR_VAR 0 3
39875: PUSH
39876: LD_VAR 0 18
39880: ST_TO_ADDR
// end ; end ;
39881: LD_VAR 0 3
39885: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39886: LD_INT 0
39888: PPUSH
39889: PPUSH
// result := true ;
39890: LD_ADDR_VAR 0 3
39894: PUSH
39895: LD_INT 1
39897: ST_TO_ADDR
// if array1 = array2 then
39898: LD_VAR 0 1
39902: PUSH
39903: LD_VAR 0 2
39907: EQUAL
39908: IFFALSE 39968
// begin for i = 1 to array1 do
39910: LD_ADDR_VAR 0 4
39914: PUSH
39915: DOUBLE
39916: LD_INT 1
39918: DEC
39919: ST_TO_ADDR
39920: LD_VAR 0 1
39924: PUSH
39925: FOR_TO
39926: IFFALSE 39964
// if array1 [ i ] <> array2 [ i ] then
39928: LD_VAR 0 1
39932: PUSH
39933: LD_VAR 0 4
39937: ARRAY
39938: PUSH
39939: LD_VAR 0 2
39943: PUSH
39944: LD_VAR 0 4
39948: ARRAY
39949: NONEQUAL
39950: IFFALSE 39962
// begin result := false ;
39952: LD_ADDR_VAR 0 3
39956: PUSH
39957: LD_INT 0
39959: ST_TO_ADDR
// break ;
39960: GO 39964
// end ;
39962: GO 39925
39964: POP
39965: POP
// end else
39966: GO 39976
// result := false ;
39968: LD_ADDR_VAR 0 3
39972: PUSH
39973: LD_INT 0
39975: ST_TO_ADDR
// end ;
39976: LD_VAR 0 3
39980: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39981: LD_INT 0
39983: PPUSH
39984: PPUSH
39985: PPUSH
// pom := GetBase ( fac ) ;
39986: LD_ADDR_VAR 0 5
39990: PUSH
39991: LD_VAR 0 1
39995: PPUSH
39996: CALL_OW 274
40000: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40001: LD_ADDR_VAR 0 4
40005: PUSH
40006: LD_VAR 0 2
40010: PUSH
40011: LD_INT 1
40013: ARRAY
40014: PPUSH
40015: LD_VAR 0 2
40019: PUSH
40020: LD_INT 2
40022: ARRAY
40023: PPUSH
40024: LD_VAR 0 2
40028: PUSH
40029: LD_INT 3
40031: ARRAY
40032: PPUSH
40033: LD_VAR 0 2
40037: PUSH
40038: LD_INT 4
40040: ARRAY
40041: PPUSH
40042: CALL_OW 449
40046: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40047: LD_ADDR_VAR 0 3
40051: PUSH
40052: LD_VAR 0 5
40056: PPUSH
40057: LD_INT 1
40059: PPUSH
40060: CALL_OW 275
40064: PUSH
40065: LD_VAR 0 4
40069: PUSH
40070: LD_INT 1
40072: ARRAY
40073: GREATEREQUAL
40074: PUSH
40075: LD_VAR 0 5
40079: PPUSH
40080: LD_INT 2
40082: PPUSH
40083: CALL_OW 275
40087: PUSH
40088: LD_VAR 0 4
40092: PUSH
40093: LD_INT 2
40095: ARRAY
40096: GREATEREQUAL
40097: AND
40098: PUSH
40099: LD_VAR 0 5
40103: PPUSH
40104: LD_INT 3
40106: PPUSH
40107: CALL_OW 275
40111: PUSH
40112: LD_VAR 0 4
40116: PUSH
40117: LD_INT 3
40119: ARRAY
40120: GREATEREQUAL
40121: AND
40122: ST_TO_ADDR
// end ;
40123: LD_VAR 0 3
40127: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40128: LD_INT 0
40130: PPUSH
40131: PPUSH
40132: PPUSH
40133: PPUSH
// pom := GetBase ( building ) ;
40134: LD_ADDR_VAR 0 3
40138: PUSH
40139: LD_VAR 0 1
40143: PPUSH
40144: CALL_OW 274
40148: ST_TO_ADDR
// if not pom then
40149: LD_VAR 0 3
40153: NOT
40154: IFFALSE 40158
// exit ;
40156: GO 40328
// btype := GetBType ( building ) ;
40158: LD_ADDR_VAR 0 5
40162: PUSH
40163: LD_VAR 0 1
40167: PPUSH
40168: CALL_OW 266
40172: ST_TO_ADDR
// if btype = b_armoury then
40173: LD_VAR 0 5
40177: PUSH
40178: LD_INT 4
40180: EQUAL
40181: IFFALSE 40191
// btype := b_barracks ;
40183: LD_ADDR_VAR 0 5
40187: PUSH
40188: LD_INT 5
40190: ST_TO_ADDR
// if btype = b_depot then
40191: LD_VAR 0 5
40195: PUSH
40196: LD_INT 0
40198: EQUAL
40199: IFFALSE 40209
// btype := b_warehouse ;
40201: LD_ADDR_VAR 0 5
40205: PUSH
40206: LD_INT 1
40208: ST_TO_ADDR
// if btype = b_workshop then
40209: LD_VAR 0 5
40213: PUSH
40214: LD_INT 2
40216: EQUAL
40217: IFFALSE 40227
// btype := b_factory ;
40219: LD_ADDR_VAR 0 5
40223: PUSH
40224: LD_INT 3
40226: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40227: LD_ADDR_VAR 0 4
40231: PUSH
40232: LD_VAR 0 5
40236: PPUSH
40237: LD_VAR 0 1
40241: PPUSH
40242: CALL_OW 248
40246: PPUSH
40247: CALL_OW 450
40251: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40252: LD_ADDR_VAR 0 2
40256: PUSH
40257: LD_VAR 0 3
40261: PPUSH
40262: LD_INT 1
40264: PPUSH
40265: CALL_OW 275
40269: PUSH
40270: LD_VAR 0 4
40274: PUSH
40275: LD_INT 1
40277: ARRAY
40278: GREATEREQUAL
40279: PUSH
40280: LD_VAR 0 3
40284: PPUSH
40285: LD_INT 2
40287: PPUSH
40288: CALL_OW 275
40292: PUSH
40293: LD_VAR 0 4
40297: PUSH
40298: LD_INT 2
40300: ARRAY
40301: GREATEREQUAL
40302: AND
40303: PUSH
40304: LD_VAR 0 3
40308: PPUSH
40309: LD_INT 3
40311: PPUSH
40312: CALL_OW 275
40316: PUSH
40317: LD_VAR 0 4
40321: PUSH
40322: LD_INT 3
40324: ARRAY
40325: GREATEREQUAL
40326: AND
40327: ST_TO_ADDR
// end ;
40328: LD_VAR 0 2
40332: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40333: LD_INT 0
40335: PPUSH
40336: PPUSH
40337: PPUSH
// pom := GetBase ( building ) ;
40338: LD_ADDR_VAR 0 4
40342: PUSH
40343: LD_VAR 0 1
40347: PPUSH
40348: CALL_OW 274
40352: ST_TO_ADDR
// if not pom then
40353: LD_VAR 0 4
40357: NOT
40358: IFFALSE 40362
// exit ;
40360: GO 40463
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40362: LD_ADDR_VAR 0 5
40366: PUSH
40367: LD_VAR 0 2
40371: PPUSH
40372: LD_VAR 0 1
40376: PPUSH
40377: CALL_OW 248
40381: PPUSH
40382: CALL_OW 450
40386: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40387: LD_ADDR_VAR 0 3
40391: PUSH
40392: LD_VAR 0 4
40396: PPUSH
40397: LD_INT 1
40399: PPUSH
40400: CALL_OW 275
40404: PUSH
40405: LD_VAR 0 5
40409: PUSH
40410: LD_INT 1
40412: ARRAY
40413: GREATEREQUAL
40414: PUSH
40415: LD_VAR 0 4
40419: PPUSH
40420: LD_INT 2
40422: PPUSH
40423: CALL_OW 275
40427: PUSH
40428: LD_VAR 0 5
40432: PUSH
40433: LD_INT 2
40435: ARRAY
40436: GREATEREQUAL
40437: AND
40438: PUSH
40439: LD_VAR 0 4
40443: PPUSH
40444: LD_INT 3
40446: PPUSH
40447: CALL_OW 275
40451: PUSH
40452: LD_VAR 0 5
40456: PUSH
40457: LD_INT 3
40459: ARRAY
40460: GREATEREQUAL
40461: AND
40462: ST_TO_ADDR
// end ;
40463: LD_VAR 0 3
40467: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
40468: LD_INT 0
40470: PPUSH
40471: PPUSH
40472: PPUSH
40473: PPUSH
40474: PPUSH
40475: PPUSH
40476: PPUSH
40477: PPUSH
40478: PPUSH
40479: PPUSH
// result := false ;
40480: LD_ADDR_VAR 0 6
40484: PUSH
40485: LD_INT 0
40487: ST_TO_ADDR
// if not base or not btype or not x or not y then
40488: LD_VAR 0 1
40492: NOT
40493: PUSH
40494: LD_VAR 0 2
40498: NOT
40499: OR
40500: PUSH
40501: LD_VAR 0 3
40505: NOT
40506: OR
40507: PUSH
40508: LD_VAR 0 4
40512: NOT
40513: OR
40514: IFFALSE 40518
// exit ;
40516: GO 41127
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
40518: LD_ADDR_VAR 0 12
40522: PUSH
40523: LD_VAR 0 2
40527: PPUSH
40528: LD_VAR 0 3
40532: PPUSH
40533: LD_VAR 0 4
40537: PPUSH
40538: LD_VAR 0 5
40542: PPUSH
40543: LD_VAR 0 1
40547: PUSH
40548: LD_INT 1
40550: ARRAY
40551: PPUSH
40552: CALL_OW 248
40556: PPUSH
40557: LD_INT 0
40559: PPUSH
40560: CALL 41964 0 6
40564: ST_TO_ADDR
// if not hexes then
40565: LD_VAR 0 12
40569: NOT
40570: IFFALSE 40574
// exit ;
40572: GO 41127
// for i = 1 to hexes do
40574: LD_ADDR_VAR 0 7
40578: PUSH
40579: DOUBLE
40580: LD_INT 1
40582: DEC
40583: ST_TO_ADDR
40584: LD_VAR 0 12
40588: PUSH
40589: FOR_TO
40590: IFFALSE 41125
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40592: LD_ADDR_VAR 0 11
40596: PUSH
40597: LD_VAR 0 12
40601: PUSH
40602: LD_VAR 0 7
40606: ARRAY
40607: PUSH
40608: LD_INT 1
40610: ARRAY
40611: PPUSH
40612: LD_VAR 0 12
40616: PUSH
40617: LD_VAR 0 7
40621: ARRAY
40622: PUSH
40623: LD_INT 2
40625: ARRAY
40626: PPUSH
40627: CALL_OW 428
40631: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40632: LD_VAR 0 12
40636: PUSH
40637: LD_VAR 0 7
40641: ARRAY
40642: PUSH
40643: LD_INT 1
40645: ARRAY
40646: PPUSH
40647: LD_VAR 0 12
40651: PUSH
40652: LD_VAR 0 7
40656: ARRAY
40657: PUSH
40658: LD_INT 2
40660: ARRAY
40661: PPUSH
40662: CALL_OW 351
40666: PUSH
40667: LD_VAR 0 12
40671: PUSH
40672: LD_VAR 0 7
40676: ARRAY
40677: PUSH
40678: LD_INT 1
40680: ARRAY
40681: PPUSH
40682: LD_VAR 0 12
40686: PUSH
40687: LD_VAR 0 7
40691: ARRAY
40692: PUSH
40693: LD_INT 2
40695: ARRAY
40696: PPUSH
40697: CALL_OW 488
40701: NOT
40702: OR
40703: PUSH
40704: LD_VAR 0 11
40708: PPUSH
40709: CALL_OW 247
40713: PUSH
40714: LD_INT 3
40716: EQUAL
40717: OR
40718: IFFALSE 40724
// exit ;
40720: POP
40721: POP
40722: GO 41127
// if not tmp or not tmp in base then
40724: LD_VAR 0 11
40728: NOT
40729: PUSH
40730: LD_VAR 0 11
40734: PUSH
40735: LD_VAR 0 1
40739: IN
40740: NOT
40741: OR
40742: IFFALSE 40746
// continue ;
40744: GO 40589
// result := true ;
40746: LD_ADDR_VAR 0 6
40750: PUSH
40751: LD_INT 1
40753: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40754: LD_ADDR_VAR 0 15
40758: PUSH
40759: LD_VAR 0 1
40763: PPUSH
40764: LD_INT 22
40766: PUSH
40767: LD_VAR 0 11
40771: PPUSH
40772: CALL_OW 255
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 2
40783: PUSH
40784: LD_INT 30
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 30
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: LIST
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PPUSH
40813: CALL_OW 72
40817: ST_TO_ADDR
// if dep then
40818: LD_VAR 0 15
40822: IFFALSE 40958
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40824: LD_ADDR_VAR 0 14
40828: PUSH
40829: LD_VAR 0 15
40833: PUSH
40834: LD_INT 1
40836: ARRAY
40837: PPUSH
40838: CALL_OW 250
40842: PPUSH
40843: LD_VAR 0 15
40847: PUSH
40848: LD_INT 1
40850: ARRAY
40851: PPUSH
40852: CALL_OW 254
40856: PPUSH
40857: LD_INT 5
40859: PPUSH
40860: CALL_OW 272
40864: PUSH
40865: LD_VAR 0 15
40869: PUSH
40870: LD_INT 1
40872: ARRAY
40873: PPUSH
40874: CALL_OW 251
40878: PPUSH
40879: LD_VAR 0 15
40883: PUSH
40884: LD_INT 1
40886: ARRAY
40887: PPUSH
40888: CALL_OW 254
40892: PPUSH
40893: LD_INT 5
40895: PPUSH
40896: CALL_OW 273
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40905: LD_VAR 0 14
40909: PUSH
40910: LD_INT 1
40912: ARRAY
40913: PPUSH
40914: LD_VAR 0 14
40918: PUSH
40919: LD_INT 2
40921: ARRAY
40922: PPUSH
40923: CALL_OW 488
40927: IFFALSE 40958
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40929: LD_VAR 0 11
40933: PPUSH
40934: LD_VAR 0 14
40938: PUSH
40939: LD_INT 1
40941: ARRAY
40942: PPUSH
40943: LD_VAR 0 14
40947: PUSH
40948: LD_INT 2
40950: ARRAY
40951: PPUSH
40952: CALL_OW 111
// continue ;
40956: GO 40589
// end ; end ; r := GetDir ( tmp ) ;
40958: LD_ADDR_VAR 0 13
40962: PUSH
40963: LD_VAR 0 11
40967: PPUSH
40968: CALL_OW 254
40972: ST_TO_ADDR
// if r = 5 then
40973: LD_VAR 0 13
40977: PUSH
40978: LD_INT 5
40980: EQUAL
40981: IFFALSE 40991
// r := 0 ;
40983: LD_ADDR_VAR 0 13
40987: PUSH
40988: LD_INT 0
40990: ST_TO_ADDR
// for j = r to 5 do
40991: LD_ADDR_VAR 0 8
40995: PUSH
40996: DOUBLE
40997: LD_VAR 0 13
41001: DEC
41002: ST_TO_ADDR
41003: LD_INT 5
41005: PUSH
41006: FOR_TO
41007: IFFALSE 41121
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41009: LD_ADDR_VAR 0 9
41013: PUSH
41014: LD_VAR 0 11
41018: PPUSH
41019: CALL_OW 250
41023: PPUSH
41024: LD_VAR 0 8
41028: PPUSH
41029: LD_INT 2
41031: PPUSH
41032: CALL_OW 272
41036: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41037: LD_ADDR_VAR 0 10
41041: PUSH
41042: LD_VAR 0 11
41046: PPUSH
41047: CALL_OW 251
41051: PPUSH
41052: LD_VAR 0 8
41056: PPUSH
41057: LD_INT 2
41059: PPUSH
41060: CALL_OW 273
41064: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41065: LD_VAR 0 9
41069: PPUSH
41070: LD_VAR 0 10
41074: PPUSH
41075: CALL_OW 488
41079: PUSH
41080: LD_VAR 0 9
41084: PPUSH
41085: LD_VAR 0 10
41089: PPUSH
41090: CALL_OW 428
41094: NOT
41095: AND
41096: IFFALSE 41119
// begin ComMoveXY ( tmp , _x , _y ) ;
41098: LD_VAR 0 11
41102: PPUSH
41103: LD_VAR 0 9
41107: PPUSH
41108: LD_VAR 0 10
41112: PPUSH
41113: CALL_OW 111
// break ;
41117: GO 41121
// end ; end ;
41119: GO 41006
41121: POP
41122: POP
// end ;
41123: GO 40589
41125: POP
41126: POP
// end ;
41127: LD_VAR 0 6
41131: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
41132: LD_INT 0
41134: PPUSH
41135: PPUSH
41136: PPUSH
41137: PPUSH
41138: PPUSH
41139: PPUSH
41140: PPUSH
41141: PPUSH
41142: PPUSH
41143: PPUSH
// result := false ;
41144: LD_ADDR_VAR 0 6
41148: PUSH
41149: LD_INT 0
41151: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41152: LD_VAR 0 1
41156: NOT
41157: PUSH
41158: LD_VAR 0 1
41162: PPUSH
41163: CALL_OW 266
41167: PUSH
41168: LD_INT 0
41170: PUSH
41171: LD_INT 1
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: IN
41178: NOT
41179: OR
41180: PUSH
41181: LD_VAR 0 2
41185: NOT
41186: OR
41187: PUSH
41188: LD_VAR 0 5
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: LD_INT 2
41201: PUSH
41202: LD_INT 3
41204: PUSH
41205: LD_INT 4
41207: PUSH
41208: LD_INT 5
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: IN
41219: NOT
41220: OR
41221: PUSH
41222: LD_VAR 0 3
41226: PPUSH
41227: LD_VAR 0 4
41231: PPUSH
41232: CALL_OW 488
41236: NOT
41237: OR
41238: IFFALSE 41242
// exit ;
41240: GO 41959
// pom := GetBase ( depot ) ;
41242: LD_ADDR_VAR 0 10
41246: PUSH
41247: LD_VAR 0 1
41251: PPUSH
41252: CALL_OW 274
41256: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41257: LD_ADDR_VAR 0 11
41261: PUSH
41262: LD_VAR 0 2
41266: PPUSH
41267: LD_VAR 0 1
41271: PPUSH
41272: CALL_OW 248
41276: PPUSH
41277: CALL_OW 450
41281: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41282: LD_VAR 0 10
41286: PPUSH
41287: LD_INT 1
41289: PPUSH
41290: CALL_OW 275
41294: PUSH
41295: LD_VAR 0 11
41299: PUSH
41300: LD_INT 1
41302: ARRAY
41303: GREATEREQUAL
41304: PUSH
41305: LD_VAR 0 10
41309: PPUSH
41310: LD_INT 2
41312: PPUSH
41313: CALL_OW 275
41317: PUSH
41318: LD_VAR 0 11
41322: PUSH
41323: LD_INT 2
41325: ARRAY
41326: GREATEREQUAL
41327: AND
41328: PUSH
41329: LD_VAR 0 10
41333: PPUSH
41334: LD_INT 3
41336: PPUSH
41337: CALL_OW 275
41341: PUSH
41342: LD_VAR 0 11
41346: PUSH
41347: LD_INT 3
41349: ARRAY
41350: GREATEREQUAL
41351: AND
41352: NOT
41353: IFFALSE 41357
// exit ;
41355: GO 41959
// if GetBType ( depot ) = b_depot then
41357: LD_VAR 0 1
41361: PPUSH
41362: CALL_OW 266
41366: PUSH
41367: LD_INT 0
41369: EQUAL
41370: IFFALSE 41382
// dist := 28 else
41372: LD_ADDR_VAR 0 14
41376: PUSH
41377: LD_INT 28
41379: ST_TO_ADDR
41380: GO 41390
// dist := 36 ;
41382: LD_ADDR_VAR 0 14
41386: PUSH
41387: LD_INT 36
41389: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41390: LD_VAR 0 1
41394: PPUSH
41395: LD_VAR 0 3
41399: PPUSH
41400: LD_VAR 0 4
41404: PPUSH
41405: CALL_OW 297
41409: PUSH
41410: LD_VAR 0 14
41414: GREATER
41415: IFFALSE 41419
// exit ;
41417: GO 41959
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41419: LD_ADDR_VAR 0 12
41423: PUSH
41424: LD_VAR 0 2
41428: PPUSH
41429: LD_VAR 0 3
41433: PPUSH
41434: LD_VAR 0 4
41438: PPUSH
41439: LD_VAR 0 5
41443: PPUSH
41444: LD_VAR 0 1
41448: PPUSH
41449: CALL_OW 248
41453: PPUSH
41454: LD_INT 0
41456: PPUSH
41457: CALL 41964 0 6
41461: ST_TO_ADDR
// if not hexes then
41462: LD_VAR 0 12
41466: NOT
41467: IFFALSE 41471
// exit ;
41469: GO 41959
// hex := GetHexInfo ( x , y ) ;
41471: LD_ADDR_VAR 0 15
41475: PUSH
41476: LD_VAR 0 3
41480: PPUSH
41481: LD_VAR 0 4
41485: PPUSH
41486: CALL_OW 546
41490: ST_TO_ADDR
// if hex [ 1 ] then
41491: LD_VAR 0 15
41495: PUSH
41496: LD_INT 1
41498: ARRAY
41499: IFFALSE 41503
// exit ;
41501: GO 41959
// height := hex [ 2 ] ;
41503: LD_ADDR_VAR 0 13
41507: PUSH
41508: LD_VAR 0 15
41512: PUSH
41513: LD_INT 2
41515: ARRAY
41516: ST_TO_ADDR
// for i = 1 to hexes do
41517: LD_ADDR_VAR 0 7
41521: PUSH
41522: DOUBLE
41523: LD_INT 1
41525: DEC
41526: ST_TO_ADDR
41527: LD_VAR 0 12
41531: PUSH
41532: FOR_TO
41533: IFFALSE 41863
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41535: LD_VAR 0 12
41539: PUSH
41540: LD_VAR 0 7
41544: ARRAY
41545: PUSH
41546: LD_INT 1
41548: ARRAY
41549: PPUSH
41550: LD_VAR 0 12
41554: PUSH
41555: LD_VAR 0 7
41559: ARRAY
41560: PUSH
41561: LD_INT 2
41563: ARRAY
41564: PPUSH
41565: CALL_OW 488
41569: NOT
41570: PUSH
41571: LD_VAR 0 12
41575: PUSH
41576: LD_VAR 0 7
41580: ARRAY
41581: PUSH
41582: LD_INT 1
41584: ARRAY
41585: PPUSH
41586: LD_VAR 0 12
41590: PUSH
41591: LD_VAR 0 7
41595: ARRAY
41596: PUSH
41597: LD_INT 2
41599: ARRAY
41600: PPUSH
41601: CALL_OW 428
41605: PUSH
41606: LD_INT 0
41608: GREATER
41609: OR
41610: PUSH
41611: LD_VAR 0 12
41615: PUSH
41616: LD_VAR 0 7
41620: ARRAY
41621: PUSH
41622: LD_INT 1
41624: ARRAY
41625: PPUSH
41626: LD_VAR 0 12
41630: PUSH
41631: LD_VAR 0 7
41635: ARRAY
41636: PUSH
41637: LD_INT 2
41639: ARRAY
41640: PPUSH
41641: CALL_OW 351
41645: OR
41646: IFFALSE 41652
// exit ;
41648: POP
41649: POP
41650: GO 41959
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41652: LD_ADDR_VAR 0 8
41656: PUSH
41657: LD_VAR 0 12
41661: PUSH
41662: LD_VAR 0 7
41666: ARRAY
41667: PUSH
41668: LD_INT 1
41670: ARRAY
41671: PPUSH
41672: LD_VAR 0 12
41676: PUSH
41677: LD_VAR 0 7
41681: ARRAY
41682: PUSH
41683: LD_INT 2
41685: ARRAY
41686: PPUSH
41687: CALL_OW 546
41691: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41692: LD_VAR 0 8
41696: PUSH
41697: LD_INT 1
41699: ARRAY
41700: PUSH
41701: LD_VAR 0 8
41705: PUSH
41706: LD_INT 2
41708: ARRAY
41709: PUSH
41710: LD_VAR 0 13
41714: PUSH
41715: LD_INT 2
41717: PLUS
41718: GREATER
41719: OR
41720: PUSH
41721: LD_VAR 0 8
41725: PUSH
41726: LD_INT 2
41728: ARRAY
41729: PUSH
41730: LD_VAR 0 13
41734: PUSH
41735: LD_INT 2
41737: MINUS
41738: LESS
41739: OR
41740: PUSH
41741: LD_VAR 0 8
41745: PUSH
41746: LD_INT 3
41748: ARRAY
41749: PUSH
41750: LD_INT 0
41752: PUSH
41753: LD_INT 8
41755: PUSH
41756: LD_INT 9
41758: PUSH
41759: LD_INT 10
41761: PUSH
41762: LD_INT 11
41764: PUSH
41765: LD_INT 12
41767: PUSH
41768: LD_INT 13
41770: PUSH
41771: LD_INT 16
41773: PUSH
41774: LD_INT 17
41776: PUSH
41777: LD_INT 18
41779: PUSH
41780: LD_INT 19
41782: PUSH
41783: LD_INT 20
41785: PUSH
41786: LD_INT 21
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: IN
41804: NOT
41805: OR
41806: PUSH
41807: LD_VAR 0 8
41811: PUSH
41812: LD_INT 5
41814: ARRAY
41815: NOT
41816: OR
41817: PUSH
41818: LD_VAR 0 8
41822: PUSH
41823: LD_INT 6
41825: ARRAY
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: LD_INT 2
41832: PUSH
41833: LD_INT 7
41835: PUSH
41836: LD_INT 9
41838: PUSH
41839: LD_INT 10
41841: PUSH
41842: LD_INT 11
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: IN
41853: NOT
41854: OR
41855: IFFALSE 41861
// exit ;
41857: POP
41858: POP
41859: GO 41959
// end ;
41861: GO 41532
41863: POP
41864: POP
// side := GetSide ( depot ) ;
41865: LD_ADDR_VAR 0 9
41869: PUSH
41870: LD_VAR 0 1
41874: PPUSH
41875: CALL_OW 255
41879: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41880: LD_VAR 0 9
41884: PPUSH
41885: LD_VAR 0 3
41889: PPUSH
41890: LD_VAR 0 4
41894: PPUSH
41895: LD_INT 20
41897: PPUSH
41898: CALL 34613 0 4
41902: PUSH
41903: LD_INT 4
41905: ARRAY
41906: IFFALSE 41910
// exit ;
41908: GO 41959
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41910: LD_VAR 0 2
41914: PUSH
41915: LD_INT 29
41917: PUSH
41918: LD_INT 30
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: IN
41925: PUSH
41926: LD_VAR 0 3
41930: PPUSH
41931: LD_VAR 0 4
41935: PPUSH
41936: LD_VAR 0 9
41940: PPUSH
41941: CALL_OW 440
41945: NOT
41946: AND
41947: IFFALSE 41951
// exit ;
41949: GO 41959
// result := true ;
41951: LD_ADDR_VAR 0 6
41955: PUSH
41956: LD_INT 1
41958: ST_TO_ADDR
// end ;
41959: LD_VAR 0 6
41963: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
41964: LD_INT 0
41966: PPUSH
41967: PPUSH
41968: PPUSH
41969: PPUSH
41970: PPUSH
41971: PPUSH
41972: PPUSH
41973: PPUSH
41974: PPUSH
41975: PPUSH
41976: PPUSH
41977: PPUSH
41978: PPUSH
41979: PPUSH
41980: PPUSH
41981: PPUSH
41982: PPUSH
41983: PPUSH
41984: PPUSH
41985: PPUSH
41986: PPUSH
41987: PPUSH
41988: PPUSH
41989: PPUSH
41990: PPUSH
41991: PPUSH
41992: PPUSH
41993: PPUSH
41994: PPUSH
41995: PPUSH
41996: PPUSH
41997: PPUSH
41998: PPUSH
41999: PPUSH
42000: PPUSH
42001: PPUSH
42002: PPUSH
42003: PPUSH
42004: PPUSH
42005: PPUSH
42006: PPUSH
42007: PPUSH
42008: PPUSH
42009: PPUSH
42010: PPUSH
42011: PPUSH
42012: PPUSH
42013: PPUSH
42014: PPUSH
42015: PPUSH
42016: PPUSH
42017: PPUSH
42018: PPUSH
42019: PPUSH
42020: PPUSH
42021: PPUSH
42022: PPUSH
42023: PPUSH
// result = [ ] ;
42024: LD_ADDR_VAR 0 7
42028: PUSH
42029: EMPTY
42030: ST_TO_ADDR
// temp_list = [ ] ;
42031: LD_ADDR_VAR 0 9
42035: PUSH
42036: EMPTY
42037: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42038: LD_VAR 0 4
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: LD_INT 1
42048: PUSH
42049: LD_INT 2
42051: PUSH
42052: LD_INT 3
42054: PUSH
42055: LD_INT 4
42057: PUSH
42058: LD_INT 5
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: IN
42069: NOT
42070: PUSH
42071: LD_VAR 0 1
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: LD_INT 1
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: IN
42086: PUSH
42087: LD_VAR 0 5
42091: PUSH
42092: LD_INT 1
42094: PUSH
42095: LD_INT 2
42097: PUSH
42098: LD_INT 3
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: LIST
42105: IN
42106: NOT
42107: AND
42108: OR
42109: IFFALSE 42113
// exit ;
42111: GO 60504
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42113: LD_VAR 0 1
42117: PUSH
42118: LD_INT 6
42120: PUSH
42121: LD_INT 7
42123: PUSH
42124: LD_INT 8
42126: PUSH
42127: LD_INT 13
42129: PUSH
42130: LD_INT 12
42132: PUSH
42133: LD_INT 15
42135: PUSH
42136: LD_INT 11
42138: PUSH
42139: LD_INT 14
42141: PUSH
42142: LD_INT 10
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: IN
42156: IFFALSE 42166
// btype = b_lab ;
42158: LD_ADDR_VAR 0 1
42162: PUSH
42163: LD_INT 6
42165: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42166: LD_VAR 0 6
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: LD_INT 2
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: LIST
42184: IN
42185: NOT
42186: PUSH
42187: LD_VAR 0 1
42191: PUSH
42192: LD_INT 0
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: LD_INT 2
42200: PUSH
42201: LD_INT 3
42203: PUSH
42204: LD_INT 6
42206: PUSH
42207: LD_INT 36
42209: PUSH
42210: LD_INT 4
42212: PUSH
42213: LD_INT 5
42215: PUSH
42216: LD_INT 31
42218: PUSH
42219: LD_INT 32
42221: PUSH
42222: LD_INT 33
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: IN
42238: NOT
42239: PUSH
42240: LD_VAR 0 6
42244: PUSH
42245: LD_INT 1
42247: EQUAL
42248: AND
42249: OR
42250: PUSH
42251: LD_VAR 0 1
42255: PUSH
42256: LD_INT 2
42258: PUSH
42259: LD_INT 3
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: IN
42266: NOT
42267: PUSH
42268: LD_VAR 0 6
42272: PUSH
42273: LD_INT 2
42275: EQUAL
42276: AND
42277: OR
42278: IFFALSE 42288
// mode = 0 ;
42280: LD_ADDR_VAR 0 6
42284: PUSH
42285: LD_INT 0
42287: ST_TO_ADDR
// case mode of 0 :
42288: LD_VAR 0 6
42292: PUSH
42293: LD_INT 0
42295: DOUBLE
42296: EQUAL
42297: IFTRUE 42301
42299: GO 53754
42301: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42302: LD_ADDR_VAR 0 11
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 0
42319: PUSH
42320: LD_INT 1
42322: NEG
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 1
42340: PUSH
42341: LD_INT 1
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: LD_INT 1
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: LD_INT 1
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 1
42383: NEG
42384: PUSH
42385: LD_INT 2
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: LD_INT 2
42398: NEG
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: LD_INT 2
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: LD_INT 2
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 1
42437: NEG
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: LD_INT 3
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 0
42458: PUSH
42459: LD_INT 3
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 1
42468: NEG
42469: PUSH
42470: LD_INT 2
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42495: LD_ADDR_VAR 0 12
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 1
42533: PUSH
42534: LD_INT 1
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 0
42543: PUSH
42544: LD_INT 1
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 1
42553: NEG
42554: PUSH
42555: LD_INT 0
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 1
42564: NEG
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 1
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 2
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 2
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 1
42607: NEG
42608: PUSH
42609: LD_INT 1
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 2
42618: NEG
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 2
42629: NEG
42630: PUSH
42631: LD_INT 1
42633: NEG
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 2
42641: NEG
42642: PUSH
42643: LD_INT 1
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 3
42652: NEG
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 3
42663: NEG
42664: PUSH
42665: LD_INT 1
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42691: LD_ADDR_VAR 0 13
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: LD_INT 0
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: LD_INT 1
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 1
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: LD_INT 1
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: NEG
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 1
42760: NEG
42761: PUSH
42762: LD_INT 1
42764: NEG
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 1
42772: NEG
42773: PUSH
42774: LD_INT 2
42776: NEG
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 2
42784: PUSH
42785: LD_INT 1
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 2
42794: PUSH
42795: LD_INT 2
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 1
42804: PUSH
42805: LD_INT 2
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 2
42814: NEG
42815: PUSH
42816: LD_INT 1
42818: NEG
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 2
42826: NEG
42827: PUSH
42828: LD_INT 2
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 2
42838: NEG
42839: PUSH
42840: LD_INT 3
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 3
42850: NEG
42851: PUSH
42852: LD_INT 2
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 3
42862: NEG
42863: PUSH
42864: LD_INT 3
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42890: LD_ADDR_VAR 0 14
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 0
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: LD_INT 0
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 1
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: LD_INT 1
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 1
42959: NEG
42960: PUSH
42961: LD_INT 1
42963: NEG
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 1
42971: NEG
42972: PUSH
42973: LD_INT 2
42975: NEG
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: LD_INT 2
42986: NEG
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: LD_INT 1
42997: NEG
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: LD_INT 2
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: LD_INT 2
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: NEG
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: LD_INT 3
43040: NEG
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: LD_INT 3
43051: NEG
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 1
43059: PUSH
43060: LD_INT 2
43062: NEG
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43086: LD_ADDR_VAR 0 15
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 0
43103: PUSH
43104: LD_INT 1
43106: NEG
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 1
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: LD_INT 1
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 0
43134: PUSH
43135: LD_INT 1
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: NEG
43145: PUSH
43146: LD_INT 0
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 1
43155: NEG
43156: PUSH
43157: LD_INT 1
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 2
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 2
43188: PUSH
43189: LD_INT 1
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 1
43198: NEG
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 2
43209: NEG
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 2
43220: NEG
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 2
43232: PUSH
43233: LD_INT 1
43235: NEG
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 3
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 3
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43279: LD_ADDR_VAR 0 16
43283: PUSH
43284: LD_INT 0
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 0
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 1
43307: PUSH
43308: LD_INT 0
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 1
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: LD_INT 1
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 1
43337: NEG
43338: PUSH
43339: LD_INT 0
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 1
43348: NEG
43349: PUSH
43350: LD_INT 1
43352: NEG
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 1
43360: NEG
43361: PUSH
43362: LD_INT 2
43364: NEG
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 2
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 2
43382: PUSH
43383: LD_INT 2
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 1
43392: PUSH
43393: LD_INT 2
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 2
43402: NEG
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 2
43414: NEG
43415: PUSH
43416: LD_INT 2
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 3
43426: PUSH
43427: LD_INT 2
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 3
43436: PUSH
43437: LD_INT 3
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 2
43446: PUSH
43447: LD_INT 3
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43472: LD_ADDR_VAR 0 17
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 0
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 1
43530: NEG
43531: PUSH
43532: LD_INT 0
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 1
43541: NEG
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 1
43553: NEG
43554: PUSH
43555: LD_INT 2
43557: NEG
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: LD_INT 2
43568: NEG
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: LD_INT 1
43579: NEG
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 2
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 2
43597: PUSH
43598: LD_INT 1
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 2
43607: PUSH
43608: LD_INT 2
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: LD_INT 2
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: LD_INT 2
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: NEG
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 2
43648: NEG
43649: PUSH
43650: LD_INT 0
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 2
43659: NEG
43660: PUSH
43661: LD_INT 1
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 2
43671: NEG
43672: PUSH
43673: LD_INT 2
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43702: LD_ADDR_VAR 0 18
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: LD_INT 0
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: LD_INT 1
43722: NEG
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 1
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: LD_INT 1
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 1
43760: NEG
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 1
43783: NEG
43784: PUSH
43785: LD_INT 2
43787: NEG
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: LD_INT 2
43798: NEG
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 2
43817: PUSH
43818: LD_INT 0
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 2
43827: PUSH
43828: LD_INT 1
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 2
43837: PUSH
43838: LD_INT 2
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 1
43847: PUSH
43848: LD_INT 2
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: LD_INT 2
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 2
43878: NEG
43879: PUSH
43880: LD_INT 0
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 2
43889: NEG
43890: PUSH
43891: LD_INT 1
43893: NEG
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 2
43901: NEG
43902: PUSH
43903: LD_INT 2
43905: NEG
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43932: LD_ADDR_VAR 0 19
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: LD_INT 1
43952: NEG
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 1
43960: PUSH
43961: LD_INT 0
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 1
43970: PUSH
43971: LD_INT 1
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: NEG
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: LD_INT 1
44005: NEG
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 1
44013: NEG
44014: PUSH
44015: LD_INT 2
44017: NEG
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: LD_INT 2
44028: NEG
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: LD_INT 1
44039: NEG
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 2
44047: PUSH
44048: LD_INT 0
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 2
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 2
44067: PUSH
44068: LD_INT 2
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: LD_INT 2
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: LD_INT 2
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 1
44097: NEG
44098: PUSH
44099: LD_INT 1
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 2
44108: NEG
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 2
44119: NEG
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 2
44131: NEG
44132: PUSH
44133: LD_INT 2
44135: NEG
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44162: LD_ADDR_VAR 0 20
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 0
44179: PUSH
44180: LD_INT 1
44182: NEG
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 1
44190: PUSH
44191: LD_INT 0
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 1
44200: PUSH
44201: LD_INT 1
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 0
44210: PUSH
44211: LD_INT 1
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 1
44220: NEG
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 1
44231: NEG
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 1
44243: NEG
44244: PUSH
44245: LD_INT 2
44247: NEG
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 2
44258: NEG
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 2
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 2
44287: PUSH
44288: LD_INT 1
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 2
44297: PUSH
44298: LD_INT 2
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: PUSH
44308: LD_INT 2
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: LD_INT 2
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 1
44327: NEG
44328: PUSH
44329: LD_INT 1
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 2
44338: NEG
44339: PUSH
44340: LD_INT 0
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 2
44349: NEG
44350: PUSH
44351: LD_INT 1
44353: NEG
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 2
44361: NEG
44362: PUSH
44363: LD_INT 2
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44392: LD_ADDR_VAR 0 21
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: LD_INT 1
44412: NEG
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 1
44420: PUSH
44421: LD_INT 0
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 1
44430: PUSH
44431: LD_INT 1
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 1
44461: NEG
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 1
44473: NEG
44474: PUSH
44475: LD_INT 2
44477: NEG
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: LD_INT 2
44488: NEG
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 1
44496: PUSH
44497: LD_INT 1
44499: NEG
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 2
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 2
44517: PUSH
44518: LD_INT 1
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 2
44527: PUSH
44528: LD_INT 2
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: LD_INT 2
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: LD_INT 2
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 1
44557: NEG
44558: PUSH
44559: LD_INT 1
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 2
44568: NEG
44569: PUSH
44570: LD_INT 0
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 2
44579: NEG
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 2
44591: NEG
44592: PUSH
44593: LD_INT 2
44595: NEG
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44622: LD_ADDR_VAR 0 22
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: NEG
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 1
44703: NEG
44704: PUSH
44705: LD_INT 2
44707: NEG
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: LD_INT 2
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 1
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 2
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 2
44747: PUSH
44748: LD_INT 1
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 2
44757: PUSH
44758: LD_INT 2
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: LD_INT 1
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 2
44798: NEG
44799: PUSH
44800: LD_INT 0
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 2
44809: NEG
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 2
44821: NEG
44822: PUSH
44823: LD_INT 2
44825: NEG
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44852: LD_ADDR_VAR 0 23
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: LD_INT 1
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: LD_INT 1
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 1
44910: NEG
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: NEG
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: LD_INT 2
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 0
44945: PUSH
44946: LD_INT 2
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: LD_INT 1
44959: NEG
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 2
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 2
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 2
44987: PUSH
44988: LD_INT 2
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 1
44997: PUSH
44998: LD_INT 2
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 1
45017: NEG
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 2
45028: NEG
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 2
45039: NEG
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 2
45051: NEG
45052: PUSH
45053: LD_INT 2
45055: NEG
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 2
45063: NEG
45064: PUSH
45065: LD_INT 3
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 1
45075: NEG
45076: PUSH
45077: LD_INT 3
45079: NEG
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: LD_INT 2
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 2
45098: PUSH
45099: LD_INT 1
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45132: LD_ADDR_VAR 0 24
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 1
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: NEG
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: LD_INT 2
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: LD_INT 2
45228: NEG
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: LD_INT 1
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 2
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 2
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 2
45267: PUSH
45268: LD_INT 2
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: LD_INT 2
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: LD_INT 2
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 2
45308: NEG
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 2
45319: NEG
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 2
45331: NEG
45332: PUSH
45333: LD_INT 2
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: LD_INT 2
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 2
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 3
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 3
45375: PUSH
45376: LD_INT 2
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45408: LD_ADDR_VAR 0 25
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 0
45425: PUSH
45426: LD_INT 1
45428: NEG
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: LD_INT 1
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 1
45466: NEG
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 1
45477: NEG
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: LD_INT 2
45493: NEG
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: LD_INT 2
45504: NEG
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: LD_INT 1
45515: NEG
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 2
45523: PUSH
45524: LD_INT 0
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 2
45533: PUSH
45534: LD_INT 1
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 2
45543: PUSH
45544: LD_INT 2
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 1
45553: PUSH
45554: LD_INT 2
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: LD_INT 2
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: NEG
45574: PUSH
45575: LD_INT 1
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 2
45584: NEG
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 2
45595: NEG
45596: PUSH
45597: LD_INT 1
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 2
45607: NEG
45608: PUSH
45609: LD_INT 2
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 3
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 3
45629: PUSH
45630: LD_INT 2
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 2
45639: PUSH
45640: LD_INT 3
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: LD_INT 3
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45682: LD_ADDR_VAR 0 26
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 0
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 1
45740: NEG
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: LD_INT 2
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: LD_INT 2
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 2
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 2
45807: PUSH
45808: LD_INT 1
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 2
45817: PUSH
45818: LD_INT 2
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: LD_INT 2
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: LD_INT 2
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 2
45858: NEG
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 2
45869: NEG
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 2
45881: NEG
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 2
45893: PUSH
45894: LD_INT 3
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: PUSH
45904: LD_INT 3
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: NEG
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 2
45924: NEG
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45958: LD_ADDR_VAR 0 27
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: LD_INT 0
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: PUSH
45997: LD_INT 1
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: LD_INT 2
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 2
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 1
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 2
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 2
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 2
46093: PUSH
46094: LD_INT 2
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: LD_INT 2
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: LD_INT 2
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 2
46134: NEG
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 2
46145: NEG
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 2
46157: NEG
46158: PUSH
46159: LD_INT 2
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: LD_INT 2
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 2
46180: NEG
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 3
46191: NEG
46192: PUSH
46193: LD_INT 1
46195: NEG
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 3
46203: NEG
46204: PUSH
46205: LD_INT 2
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46238: LD_ADDR_VAR 0 28
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: LD_INT 2
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 0
46331: PUSH
46332: LD_INT 2
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: LD_INT 1
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 2
46363: PUSH
46364: LD_INT 1
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 2
46373: PUSH
46374: LD_INT 2
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: LD_INT 2
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: LD_INT 2
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: LD_INT 1
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 2
46414: NEG
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 2
46425: NEG
46426: PUSH
46427: LD_INT 1
46429: NEG
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 2
46437: NEG
46438: PUSH
46439: LD_INT 2
46441: NEG
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 2
46449: NEG
46450: PUSH
46451: LD_INT 3
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 1
46461: NEG
46462: PUSH
46463: LD_INT 3
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 3
46473: NEG
46474: PUSH
46475: LD_INT 1
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 3
46485: NEG
46486: PUSH
46487: LD_INT 2
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46520: LD_ADDR_VAR 0 29
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: LD_INT 1
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: LD_INT 2
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: LD_INT 2
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 2
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 2
46645: PUSH
46646: LD_INT 1
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: LD_INT 2
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: LD_INT 2
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 2
46686: NEG
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 2
46698: NEG
46699: PUSH
46700: LD_INT 2
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 2
46710: NEG
46711: PUSH
46712: LD_INT 3
46714: NEG
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 2
46722: PUSH
46723: LD_INT 1
46725: NEG
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 3
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 1
46743: PUSH
46744: LD_INT 3
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: LD_INT 2
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 3
46764: NEG
46765: PUSH
46766: LD_INT 2
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46799: LD_ADDR_VAR 0 30
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: LD_INT 1
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: LD_INT 2
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: LD_INT 2
46895: NEG
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 2
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: PUSH
46935: LD_INT 2
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: LD_INT 2
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 1
46954: NEG
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 2
46965: NEG
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 2
46976: NEG
46977: PUSH
46978: LD_INT 1
46980: NEG
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: LD_INT 3
46992: NEG
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: LD_INT 2
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 3
47011: PUSH
47012: LD_INT 2
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 2
47021: PUSH
47022: LD_INT 3
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 2
47031: NEG
47032: PUSH
47033: LD_INT 1
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 3
47042: NEG
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47077: LD_ADDR_VAR 0 31
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: LD_INT 1
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: NEG
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: LD_INT 2
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: LD_INT 1
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 2
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: PUSH
47202: LD_INT 2
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: LD_INT 2
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 2
47242: NEG
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: NEG
47255: PUSH
47256: LD_INT 2
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 2
47266: NEG
47267: PUSH
47268: LD_INT 3
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 2
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 3
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: LD_INT 3
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 3
47320: NEG
47321: PUSH
47322: LD_INT 2
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47355: LD_ADDR_VAR 0 32
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: NEG
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: LD_INT 2
47440: NEG
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: LD_INT 2
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 1
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 2
47470: PUSH
47471: LD_INT 1
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: LD_INT 2
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: LD_INT 2
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: LD_INT 2
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 2
47521: NEG
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 2
47532: NEG
47533: PUSH
47534: LD_INT 1
47536: NEG
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: LD_INT 3
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: LD_INT 2
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 3
47567: PUSH
47568: LD_INT 2
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 2
47577: PUSH
47578: LD_INT 3
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 2
47587: NEG
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 3
47598: NEG
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47633: LD_ADDR_VAR 0 33
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: LD_INT 2
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 2
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 2
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: LD_INT 2
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: LD_INT 2
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: LD_INT 1
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 2
47788: NEG
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 2
47799: NEG
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 2
47811: NEG
47812: PUSH
47813: LD_INT 2
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 2
47823: NEG
47824: PUSH
47825: LD_INT 3
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 2
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 3
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: LD_INT 3
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: LD_INT 2
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 3
47877: NEG
47878: PUSH
47879: LD_INT 2
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47912: LD_ADDR_VAR 0 34
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: LD_INT 2
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 2
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 2
48037: PUSH
48038: LD_INT 2
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: LD_INT 2
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: NEG
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 2
48068: NEG
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 2
48079: NEG
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 2
48091: NEG
48092: PUSH
48093: LD_INT 2
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: LD_INT 3
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 2
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 3
48126: PUSH
48127: LD_INT 2
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 2
48136: PUSH
48137: LD_INT 3
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 2
48146: NEG
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 3
48157: NEG
48158: PUSH
48159: LD_INT 1
48161: NEG
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48192: LD_ADDR_VAR 0 35
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: LD_INT 1
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: LD_INT 1
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 1
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: NEG
48251: PUSH
48252: LD_INT 0
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: NEG
48262: PUSH
48263: LD_INT 1
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: NEG
48284: PUSH
48285: LD_INT 1
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48304: LD_ADDR_VAR 0 36
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 0
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: LD_INT 2
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48416: LD_ADDR_VAR 0 37
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 0
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 1
48474: NEG
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 1
48485: NEG
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: LD_INT 1
48500: NEG
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48528: LD_ADDR_VAR 0 38
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: NEG
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 2
48619: NEG
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48640: LD_ADDR_VAR 0 39
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 1
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: LD_INT 1
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: LD_INT 1
48713: NEG
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: LD_INT 2
48725: NEG
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: LD_INT 2
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48752: LD_ADDR_VAR 0 40
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: LD_INT 1
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: NEG
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: LD_INT 1
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48864: LD_ADDR_VAR 0 41
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 0
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: LD_INT 1
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: NEG
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: LD_INT 2
48949: NEG
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 2
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: LD_INT 1
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: LD_INT 2
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: LD_INT 2
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 1
49008: NEG
49009: PUSH
49010: LD_INT 1
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 2
49019: NEG
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 2
49030: NEG
49031: PUSH
49032: LD_INT 1
49034: NEG
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 2
49042: NEG
49043: PUSH
49044: LD_INT 2
49046: NEG
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: LD_INT 3
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 2
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 3
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 3
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 3
49097: PUSH
49098: LD_INT 2
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 3
49107: PUSH
49108: LD_INT 3
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 2
49117: PUSH
49118: LD_INT 3
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 2
49127: NEG
49128: PUSH
49129: LD_INT 1
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 3
49138: NEG
49139: PUSH
49140: LD_INT 0
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 3
49149: NEG
49150: PUSH
49151: LD_INT 1
49153: NEG
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 3
49161: NEG
49162: PUSH
49163: LD_INT 2
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 3
49173: NEG
49174: PUSH
49175: LD_INT 3
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49214: LD_ADDR_VAR 0 42
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 0
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 1
49272: NEG
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: LD_INT 2
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: LD_INT 2
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 2
49339: PUSH
49340: LD_INT 2
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 0
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 2
49392: NEG
49393: PUSH
49394: LD_INT 2
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 2
49404: NEG
49405: PUSH
49406: LD_INT 3
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: LD_INT 3
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: LD_INT 3
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: LD_INT 2
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 3
49450: PUSH
49451: LD_INT 2
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 3
49460: PUSH
49461: LD_INT 3
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 2
49470: PUSH
49471: LD_INT 3
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: LD_INT 3
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: LD_INT 3
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: NEG
49501: PUSH
49502: LD_INT 2
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 3
49511: NEG
49512: PUSH
49513: LD_INT 2
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 3
49523: NEG
49524: PUSH
49525: LD_INT 3
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49564: LD_ADDR_VAR 0 43
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 1
49645: NEG
49646: PUSH
49647: LD_INT 2
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: LD_INT 2
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 2
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 2
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: LD_INT 2
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: LD_INT 2
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: NEG
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 2
49741: NEG
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: LD_INT 3
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: LD_INT 3
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: LD_INT 2
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 2
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 3
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 3
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: LD_INT 3
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: LD_INT 3
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 1
49838: NEG
49839: PUSH
49840: LD_INT 2
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 2
49849: NEG
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 3
49860: NEG
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 3
49871: NEG
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49912: LD_ADDR_VAR 0 44
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: LD_INT 1
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 1
49970: NEG
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: NEG
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: LD_INT 2
49997: NEG
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 2
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 2
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 2
50036: PUSH
50037: LD_INT 2
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: LD_INT 2
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 2
50067: NEG
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 2
50078: NEG
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 2
50090: NEG
50091: PUSH
50092: LD_INT 2
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 2
50102: NEG
50103: PUSH
50104: LD_INT 3
50106: NEG
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 2
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 3
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 3
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 3
50145: PUSH
50146: LD_INT 2
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 3
50155: PUSH
50156: LD_INT 3
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 2
50165: PUSH
50166: LD_INT 3
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 2
50175: NEG
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 3
50186: NEG
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 3
50197: NEG
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 3
50209: NEG
50210: PUSH
50211: LD_INT 2
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 3
50221: NEG
50222: PUSH
50223: LD_INT 3
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50262: LD_ADDR_VAR 0 45
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: LD_INT 1
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: LD_INT 2
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: LD_INT 2
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: LD_INT 1
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 2
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 2
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 1
50397: PUSH
50398: LD_INT 2
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: LD_INT 2
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 2
50428: NEG
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 2
50440: NEG
50441: PUSH
50442: LD_INT 2
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 2
50452: NEG
50453: PUSH
50454: LD_INT 3
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 1
50464: NEG
50465: PUSH
50466: LD_INT 3
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: LD_INT 3
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: LD_INT 2
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 3
50498: PUSH
50499: LD_INT 2
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 3
50508: PUSH
50509: LD_INT 3
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 2
50518: PUSH
50519: LD_INT 3
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: LD_INT 3
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: LD_INT 3
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: LD_INT 2
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 3
50559: NEG
50560: PUSH
50561: LD_INT 2
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 3
50571: NEG
50572: PUSH
50573: LD_INT 3
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50612: LD_ADDR_VAR 0 46
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: LD_INT 2
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: LD_INT 2
50708: NEG
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 2
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 2
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: LD_INT 2
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: LD_INT 2
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 2
50778: NEG
50779: PUSH
50780: LD_INT 0
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 2
50789: NEG
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: NEG
50802: PUSH
50803: LD_INT 3
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: LD_INT 3
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: PUSH
50825: LD_INT 2
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 2
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 3
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 3
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: LD_INT 3
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: LD_INT 3
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: LD_INT 2
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 2
50897: NEG
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 3
50908: NEG
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 3
50919: NEG
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50960: LD_ADDR_VAR 0 47
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 0
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 1
51018: NEG
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: LD_INT 1
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: LD_INT 2
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: LD_INT 2
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: LD_INT 1
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 2
51075: NEG
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 2
51087: NEG
51088: PUSH
51089: LD_INT 2
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51111: LD_ADDR_VAR 0 48
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: LD_INT 1
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: NEG
51170: PUSH
51171: LD_INT 0
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: LD_INT 2
51196: NEG
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: LD_INT 2
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: LD_INT 1
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 2
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 2
51236: PUSH
51237: LD_INT 1
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51258: LD_ADDR_VAR 0 49
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: LD_INT 1
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 2
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 2
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 2
51370: PUSH
51371: LD_INT 2
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: LD_INT 2
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51402: LD_ADDR_VAR 0 50
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: LD_INT 1
51422: NEG
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: LD_INT 1
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: LD_INT 1
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: LD_INT 0
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 2
51483: PUSH
51484: LD_INT 1
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 2
51493: PUSH
51494: LD_INT 2
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: LD_INT 2
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 0
51513: PUSH
51514: LD_INT 2
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 1
51523: NEG
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51546: LD_ADDR_VAR 0 51
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: LD_INT 1
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: LD_INT 0
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: LD_INT 1
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: LD_INT 2
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: LD_INT 2
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 2
51658: NEG
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 2
51669: NEG
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51693: LD_ADDR_VAR 0 52
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: LD_INT 1
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 1
51762: NEG
51763: PUSH
51764: LD_INT 1
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 1
51774: NEG
51775: PUSH
51776: LD_INT 2
51778: NEG
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 2
51797: NEG
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 2
51808: NEG
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 2
51820: NEG
51821: PUSH
51822: LD_INT 2
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51844: LD_ADDR_VAR 0 53
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: LD_INT 1
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: NEG
51903: PUSH
51904: LD_INT 0
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 1
51913: NEG
51914: PUSH
51915: LD_INT 1
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: LD_INT 2
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: LD_INT 2
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: LD_INT 1
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 2
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 2
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 2
51979: PUSH
51980: LD_INT 2
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: LD_INT 2
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 0
51999: PUSH
52000: LD_INT 2
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: LD_INT 1
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 2
52020: NEG
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 2
52031: NEG
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 2
52043: NEG
52044: PUSH
52045: LD_INT 2
52047: NEG
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52074: LD_ADDR_VAR 0 54
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 1
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: NEG
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: NEG
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: LD_INT 2
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: LD_INT 2
52170: NEG
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 1
52178: PUSH
52179: LD_INT 1
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 2
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 2
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 2
52209: PUSH
52210: LD_INT 2
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 1
52219: PUSH
52220: LD_INT 2
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: LD_INT 2
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 2
52250: NEG
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 2
52261: NEG
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 2
52273: NEG
52274: PUSH
52275: LD_INT 2
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52304: LD_ADDR_VAR 0 55
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: LD_INT 0
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 1
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: NEG
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: NEG
52386: PUSH
52387: LD_INT 2
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: LD_INT 2
52400: NEG
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: LD_INT 1
52411: NEG
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 2
52419: PUSH
52420: LD_INT 0
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 2
52429: PUSH
52430: LD_INT 1
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 2
52439: PUSH
52440: LD_INT 2
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 1
52449: PUSH
52450: LD_INT 2
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: LD_INT 2
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 2
52480: NEG
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 2
52491: NEG
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 2
52503: NEG
52504: PUSH
52505: LD_INT 2
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52534: LD_ADDR_VAR 0 56
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 1
52562: PUSH
52563: LD_INT 0
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 1
52572: PUSH
52573: LD_INT 1
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: LD_INT 2
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: LD_INT 2
52630: NEG
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 2
52649: PUSH
52650: LD_INT 0
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 2
52659: PUSH
52660: LD_INT 1
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 2
52669: PUSH
52670: LD_INT 2
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 1
52679: PUSH
52680: LD_INT 2
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 0
52689: PUSH
52690: LD_INT 2
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 1
52699: NEG
52700: PUSH
52701: LD_INT 1
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 2
52710: NEG
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 2
52721: NEG
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 2
52733: NEG
52734: PUSH
52735: LD_INT 2
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52764: LD_ADDR_VAR 0 57
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: NEG
52846: PUSH
52847: LD_INT 2
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: LD_INT 2
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 2
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 2
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 2
52899: PUSH
52900: LD_INT 2
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: LD_INT 2
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: LD_INT 2
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 2
52940: NEG
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 2
52951: NEG
52952: PUSH
52953: LD_INT 1
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 2
52963: NEG
52964: PUSH
52965: LD_INT 2
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52994: LD_ADDR_VAR 0 58
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 1
53052: NEG
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 1
53063: NEG
53064: PUSH
53065: LD_INT 1
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: LD_INT 2
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: LD_INT 2
53090: NEG
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 1
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 2
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 2
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 2
53129: PUSH
53130: LD_INT 2
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: LD_INT 2
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: LD_INT 2
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: NEG
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 2
53170: NEG
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 2
53181: NEG
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 2
53193: NEG
53194: PUSH
53195: LD_INT 2
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53224: LD_ADDR_VAR 0 59
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53312: LD_ADDR_VAR 0 60
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53400: LD_ADDR_VAR 0 61
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 0
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53488: LD_ADDR_VAR 0 62
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 0
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: LD_INT 1
53508: NEG
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53576: LD_ADDR_VAR 0 63
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: LD_INT 1
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53664: LD_ADDR_VAR 0 64
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 0
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: LD_INT 1
53737: NEG
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: ST_TO_ADDR
// end ; 1 :
53752: GO 59649
53754: LD_INT 1
53756: DOUBLE
53757: EQUAL
53758: IFTRUE 53762
53760: GO 56385
53762: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53763: LD_ADDR_VAR 0 11
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: LD_INT 3
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: LD_INT 3
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: PUSH
53794: LD_INT 2
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: LIST
53806: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53807: LD_ADDR_VAR 0 12
53811: PUSH
53812: LD_INT 2
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 3
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 3
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: LIST
53847: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53848: LD_ADDR_VAR 0 13
53852: PUSH
53853: LD_INT 3
53855: PUSH
53856: LD_INT 2
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 3
53865: PUSH
53866: LD_INT 3
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 2
53875: PUSH
53876: LD_INT 3
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: LIST
53887: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53888: LD_ADDR_VAR 0 14
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: LD_INT 3
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: LD_INT 3
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: LD_INT 2
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: LIST
53928: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53929: LD_ADDR_VAR 0 15
53933: PUSH
53934: LD_INT 2
53936: NEG
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 3
53947: NEG
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 3
53958: NEG
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: LIST
53972: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53973: LD_ADDR_VAR 0 16
53977: PUSH
53978: LD_INT 2
53980: NEG
53981: PUSH
53982: LD_INT 3
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 3
53992: NEG
53993: PUSH
53994: LD_INT 2
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 3
54004: NEG
54005: PUSH
54006: LD_INT 3
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: LIST
54018: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54019: LD_ADDR_VAR 0 17
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: LD_INT 3
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: LD_INT 3
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: LD_INT 2
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: LIST
54062: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54063: LD_ADDR_VAR 0 18
54067: PUSH
54068: LD_INT 2
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 3
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 3
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: LIST
54103: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54104: LD_ADDR_VAR 0 19
54108: PUSH
54109: LD_INT 3
54111: PUSH
54112: LD_INT 2
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 3
54121: PUSH
54122: LD_INT 3
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 2
54131: PUSH
54132: LD_INT 3
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: LIST
54143: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54144: LD_ADDR_VAR 0 20
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: LD_INT 3
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: LD_INT 3
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: LD_INT 2
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: LIST
54184: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54185: LD_ADDR_VAR 0 21
54189: PUSH
54190: LD_INT 2
54192: NEG
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 3
54203: NEG
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 3
54214: NEG
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: LIST
54228: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54229: LD_ADDR_VAR 0 22
54233: PUSH
54234: LD_INT 2
54236: NEG
54237: PUSH
54238: LD_INT 3
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 3
54248: NEG
54249: PUSH
54250: LD_INT 2
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 3
54260: NEG
54261: PUSH
54262: LD_INT 3
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: LIST
54274: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54275: LD_ADDR_VAR 0 23
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: LD_INT 3
54285: NEG
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: NEG
54294: PUSH
54295: LD_INT 4
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: LD_INT 3
54308: NEG
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: LIST
54318: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54319: LD_ADDR_VAR 0 24
54323: PUSH
54324: LD_INT 3
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 3
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 4
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: LIST
54359: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54360: LD_ADDR_VAR 0 25
54364: PUSH
54365: LD_INT 3
54367: PUSH
54368: LD_INT 3
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 4
54377: PUSH
54378: LD_INT 3
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 3
54387: PUSH
54388: LD_INT 4
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: LIST
54399: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54400: LD_ADDR_VAR 0 26
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: LD_INT 3
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: LD_INT 4
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: LD_INT 3
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: LIST
54440: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54441: LD_ADDR_VAR 0 27
54445: PUSH
54446: LD_INT 3
54448: NEG
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 3
54459: NEG
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 4
54470: NEG
54471: PUSH
54472: LD_INT 1
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: LIST
54484: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54485: LD_ADDR_VAR 0 28
54489: PUSH
54490: LD_INT 3
54492: NEG
54493: PUSH
54494: LD_INT 3
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 3
54504: NEG
54505: PUSH
54506: LD_INT 4
54508: NEG
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 4
54516: NEG
54517: PUSH
54518: LD_INT 3
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: LIST
54530: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54531: LD_ADDR_VAR 0 29
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: LD_INT 3
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: LD_INT 3
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: LD_INT 2
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: LD_INT 4
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: LD_INT 4
54587: NEG
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 1
54595: PUSH
54596: LD_INT 3
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 1
54606: NEG
54607: PUSH
54608: LD_INT 5
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: LD_INT 5
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: LD_INT 4
54632: NEG
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: NEG
54641: PUSH
54642: LD_INT 6
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: LD_INT 6
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: PUSH
54664: LD_INT 5
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54686: LD_ADDR_VAR 0 30
54690: PUSH
54691: LD_INT 2
54693: PUSH
54694: LD_INT 1
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 3
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 3
54714: PUSH
54715: LD_INT 1
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 3
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 4
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 4
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 4
54755: PUSH
54756: LD_INT 1
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 5
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 5
54776: PUSH
54777: LD_INT 1
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 5
54786: PUSH
54787: LD_INT 1
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 6
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 6
54807: PUSH
54808: LD_INT 1
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54829: LD_ADDR_VAR 0 31
54833: PUSH
54834: LD_INT 3
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 3
54846: PUSH
54847: LD_INT 3
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 2
54856: PUSH
54857: LD_INT 3
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 4
54866: PUSH
54867: LD_INT 3
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 4
54876: PUSH
54877: LD_INT 4
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 3
54886: PUSH
54887: LD_INT 4
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 5
54896: PUSH
54897: LD_INT 4
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 5
54906: PUSH
54907: LD_INT 5
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 4
54916: PUSH
54917: LD_INT 5
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 6
54926: PUSH
54927: LD_INT 5
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 6
54936: PUSH
54937: LD_INT 6
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 5
54946: PUSH
54947: LD_INT 6
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54968: LD_ADDR_VAR 0 32
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: LD_INT 3
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: LD_INT 3
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: NEG
54996: PUSH
54997: LD_INT 2
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: LD_INT 4
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 0
55016: PUSH
55017: LD_INT 4
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 1
55026: NEG
55027: PUSH
55028: LD_INT 3
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: LD_INT 5
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: LD_INT 5
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: LD_INT 4
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: LD_INT 6
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: LD_INT 6
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: LD_INT 5
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55111: LD_ADDR_VAR 0 33
55115: PUSH
55116: LD_INT 2
55118: NEG
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 3
55129: NEG
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 3
55140: NEG
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 3
55152: NEG
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 4
55163: NEG
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 4
55174: NEG
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 4
55186: NEG
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 5
55197: NEG
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 5
55208: NEG
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 5
55220: NEG
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 6
55231: NEG
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 6
55242: NEG
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55266: LD_ADDR_VAR 0 34
55270: PUSH
55271: LD_INT 2
55273: NEG
55274: PUSH
55275: LD_INT 3
55277: NEG
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 3
55285: NEG
55286: PUSH
55287: LD_INT 2
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 3
55297: NEG
55298: PUSH
55299: LD_INT 3
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 3
55309: NEG
55310: PUSH
55311: LD_INT 4
55313: NEG
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 4
55321: NEG
55322: PUSH
55323: LD_INT 3
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 4
55333: NEG
55334: PUSH
55335: LD_INT 4
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 4
55345: NEG
55346: PUSH
55347: LD_INT 5
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 5
55357: NEG
55358: PUSH
55359: LD_INT 4
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 5
55369: NEG
55370: PUSH
55371: LD_INT 5
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 5
55381: NEG
55382: PUSH
55383: LD_INT 6
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 6
55393: NEG
55394: PUSH
55395: LD_INT 5
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 6
55405: NEG
55406: PUSH
55407: LD_INT 6
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55429: LD_ADDR_VAR 0 41
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: LD_INT 2
55439: NEG
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: LD_INT 3
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 1
55459: PUSH
55460: LD_INT 2
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: LIST
55472: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55473: LD_ADDR_VAR 0 42
55477: PUSH
55478: LD_INT 2
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 2
55490: PUSH
55491: LD_INT 1
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 3
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: LIST
55513: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55514: LD_ADDR_VAR 0 43
55518: PUSH
55519: LD_INT 2
55521: PUSH
55522: LD_INT 2
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 3
55531: PUSH
55532: LD_INT 2
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 2
55541: PUSH
55542: LD_INT 3
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: LIST
55553: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55554: LD_ADDR_VAR 0 44
55558: PUSH
55559: LD_INT 0
55561: PUSH
55562: LD_INT 2
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: LD_INT 3
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 1
55581: NEG
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: LIST
55594: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55595: LD_ADDR_VAR 0 45
55599: PUSH
55600: LD_INT 2
55602: NEG
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 2
55613: NEG
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 3
55624: NEG
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: LIST
55638: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55639: LD_ADDR_VAR 0 46
55643: PUSH
55644: LD_INT 2
55646: NEG
55647: PUSH
55648: LD_INT 2
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 2
55658: NEG
55659: PUSH
55660: LD_INT 3
55662: NEG
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 3
55670: NEG
55671: PUSH
55672: LD_INT 2
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: LIST
55684: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55685: LD_ADDR_VAR 0 47
55689: PUSH
55690: LD_INT 2
55692: NEG
55693: PUSH
55694: LD_INT 3
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: LD_INT 3
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55718: LD_ADDR_VAR 0 48
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: LD_INT 2
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 2
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55749: LD_ADDR_VAR 0 49
55753: PUSH
55754: LD_INT 3
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 3
55766: PUSH
55767: LD_INT 2
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55778: LD_ADDR_VAR 0 50
55782: PUSH
55783: LD_INT 2
55785: PUSH
55786: LD_INT 3
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: LD_INT 3
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55807: LD_ADDR_VAR 0 51
55811: PUSH
55812: LD_INT 1
55814: NEG
55815: PUSH
55816: LD_INT 2
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 2
55825: NEG
55826: PUSH
55827: LD_INT 1
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55838: LD_ADDR_VAR 0 52
55842: PUSH
55843: LD_INT 3
55845: NEG
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 3
55857: NEG
55858: PUSH
55859: LD_INT 2
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55871: LD_ADDR_VAR 0 53
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: LD_INT 3
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: LD_INT 3
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: PUSH
55902: LD_INT 2
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: LIST
55914: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55915: LD_ADDR_VAR 0 54
55919: PUSH
55920: LD_INT 2
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 3
55933: PUSH
55934: LD_INT 0
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 3
55943: PUSH
55944: LD_INT 1
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: LIST
55955: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55956: LD_ADDR_VAR 0 55
55960: PUSH
55961: LD_INT 3
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 3
55973: PUSH
55974: LD_INT 3
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 2
55983: PUSH
55984: LD_INT 3
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: LIST
55995: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55996: LD_ADDR_VAR 0 56
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: LD_INT 3
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: LD_INT 3
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: LD_INT 2
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: LIST
56036: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56037: LD_ADDR_VAR 0 57
56041: PUSH
56042: LD_INT 2
56044: NEG
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 3
56055: NEG
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 3
56066: NEG
56067: PUSH
56068: LD_INT 1
56070: NEG
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: LIST
56080: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56081: LD_ADDR_VAR 0 58
56085: PUSH
56086: LD_INT 2
56088: NEG
56089: PUSH
56090: LD_INT 3
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 3
56100: NEG
56101: PUSH
56102: LD_INT 2
56104: NEG
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 3
56112: NEG
56113: PUSH
56114: LD_INT 3
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: LIST
56126: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56127: LD_ADDR_VAR 0 59
56131: PUSH
56132: LD_INT 1
56134: NEG
56135: PUSH
56136: LD_INT 2
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: LD_INT 1
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: LIST
56170: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56171: LD_ADDR_VAR 0 60
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 2
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 2
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: LIST
56211: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56212: LD_ADDR_VAR 0 61
56216: PUSH
56217: LD_INT 2
56219: PUSH
56220: LD_INT 1
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 2
56229: PUSH
56230: LD_INT 2
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: LD_INT 2
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: LIST
56251: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56252: LD_ADDR_VAR 0 62
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: LD_INT 2
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: LD_INT 2
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: LIST
56292: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56293: LD_ADDR_VAR 0 63
56297: PUSH
56298: LD_INT 1
56300: NEG
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 2
56311: NEG
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 2
56322: NEG
56323: PUSH
56324: LD_INT 1
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: LIST
56336: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56337: LD_ADDR_VAR 0 64
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: LD_INT 2
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 2
56356: NEG
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 2
56368: NEG
56369: PUSH
56370: LD_INT 2
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: LIST
56382: ST_TO_ADDR
// end ; 2 :
56383: GO 59649
56385: LD_INT 2
56387: DOUBLE
56388: EQUAL
56389: IFTRUE 56393
56391: GO 59648
56393: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56394: LD_ADDR_VAR 0 29
56398: PUSH
56399: LD_INT 4
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 4
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 5
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 5
56432: PUSH
56433: LD_INT 1
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 4
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 3
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 3
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 3
56473: PUSH
56474: LD_INT 2
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 5
56484: PUSH
56485: LD_INT 2
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 3
56494: PUSH
56495: LD_INT 3
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 3
56504: PUSH
56505: LD_INT 2
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 4
56514: PUSH
56515: LD_INT 3
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 4
56524: PUSH
56525: LD_INT 4
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 3
56534: PUSH
56535: LD_INT 4
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 2
56544: PUSH
56545: LD_INT 3
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 2
56554: PUSH
56555: LD_INT 2
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 4
56564: PUSH
56565: LD_INT 2
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 2
56574: PUSH
56575: LD_INT 4
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: LD_INT 4
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 0
56594: PUSH
56595: LD_INT 3
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 1
56604: PUSH
56605: LD_INT 4
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: LD_INT 5
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: LD_INT 5
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: LD_INT 4
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: LD_INT 3
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 2
56656: PUSH
56657: LD_INT 5
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 2
56666: NEG
56667: PUSH
56668: LD_INT 3
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 3
56677: NEG
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 3
56688: NEG
56689: PUSH
56690: LD_INT 1
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 2
56700: NEG
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 2
56711: NEG
56712: PUSH
56713: LD_INT 1
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 3
56722: NEG
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 4
56733: NEG
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 4
56744: NEG
56745: PUSH
56746: LD_INT 1
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 4
56756: NEG
56757: PUSH
56758: LD_INT 2
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 2
56768: NEG
56769: PUSH
56770: LD_INT 2
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 4
56779: NEG
56780: PUSH
56781: LD_INT 4
56783: NEG
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 4
56791: NEG
56792: PUSH
56793: LD_INT 5
56795: NEG
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 3
56803: NEG
56804: PUSH
56805: LD_INT 4
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 3
56815: NEG
56816: PUSH
56817: LD_INT 3
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 4
56827: NEG
56828: PUSH
56829: LD_INT 3
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 5
56839: NEG
56840: PUSH
56841: LD_INT 4
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 5
56851: NEG
56852: PUSH
56853: LD_INT 5
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 3
56863: NEG
56864: PUSH
56865: LD_INT 5
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 5
56875: NEG
56876: PUSH
56877: LD_INT 3
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56932: LD_ADDR_VAR 0 30
56936: PUSH
56937: LD_INT 4
56939: PUSH
56940: LD_INT 4
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 4
56949: PUSH
56950: LD_INT 3
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 5
56959: PUSH
56960: LD_INT 4
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 5
56969: PUSH
56970: LD_INT 5
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 4
56979: PUSH
56980: LD_INT 5
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 3
56989: PUSH
56990: LD_INT 4
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 3
56999: PUSH
57000: LD_INT 3
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 5
57009: PUSH
57010: LD_INT 3
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 3
57019: PUSH
57020: LD_INT 5
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: LD_INT 3
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: LD_INT 2
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: LD_INT 3
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: LD_INT 4
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: LD_INT 4
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: LD_INT 3
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: NEG
57091: PUSH
57092: LD_INT 2
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 2
57101: PUSH
57102: LD_INT 4
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 2
57111: NEG
57112: PUSH
57113: LD_INT 2
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 4
57122: NEG
57123: PUSH
57124: LD_INT 0
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 4
57133: NEG
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 3
57145: NEG
57146: PUSH
57147: LD_INT 0
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 3
57156: NEG
57157: PUSH
57158: LD_INT 1
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 4
57167: NEG
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 5
57178: NEG
57179: PUSH
57180: LD_INT 0
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 5
57189: NEG
57190: PUSH
57191: LD_INT 1
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 5
57201: NEG
57202: PUSH
57203: LD_INT 2
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 3
57213: NEG
57214: PUSH
57215: LD_INT 2
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 3
57224: NEG
57225: PUSH
57226: LD_INT 3
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 3
57236: NEG
57237: PUSH
57238: LD_INT 4
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 2
57248: NEG
57249: PUSH
57250: LD_INT 3
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 2
57260: NEG
57261: PUSH
57262: LD_INT 2
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 3
57272: NEG
57273: PUSH
57274: LD_INT 2
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 4
57284: NEG
57285: PUSH
57286: LD_INT 3
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 4
57296: NEG
57297: PUSH
57298: LD_INT 4
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 2
57308: NEG
57309: PUSH
57310: LD_INT 4
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 4
57320: NEG
57321: PUSH
57322: LD_INT 2
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: LD_INT 4
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: LD_INT 5
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: LD_INT 4
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 1
57365: PUSH
57366: LD_INT 3
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: LD_INT 3
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 1
57387: NEG
57388: PUSH
57389: LD_INT 4
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 1
57399: NEG
57400: PUSH
57401: LD_INT 5
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 2
57411: PUSH
57412: LD_INT 3
57414: NEG
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 2
57422: NEG
57423: PUSH
57424: LD_INT 5
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57479: LD_ADDR_VAR 0 31
57483: PUSH
57484: LD_INT 0
57486: PUSH
57487: LD_INT 4
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: LD_INT 3
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: PUSH
57507: LD_INT 4
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: LD_INT 5
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: LD_INT 5
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: LD_INT 4
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: LD_INT 3
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 2
57558: PUSH
57559: LD_INT 5
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 2
57568: NEG
57569: PUSH
57570: LD_INT 3
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 3
57579: NEG
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 3
57590: NEG
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 2
57602: NEG
57603: PUSH
57604: LD_INT 0
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 2
57613: NEG
57614: PUSH
57615: LD_INT 1
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 3
57624: NEG
57625: PUSH
57626: LD_INT 1
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 4
57635: NEG
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 4
57646: NEG
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 4
57658: NEG
57659: PUSH
57660: LD_INT 2
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 2
57670: NEG
57671: PUSH
57672: LD_INT 2
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 4
57681: NEG
57682: PUSH
57683: LD_INT 4
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 4
57693: NEG
57694: PUSH
57695: LD_INT 5
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 3
57705: NEG
57706: PUSH
57707: LD_INT 4
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 3
57717: NEG
57718: PUSH
57719: LD_INT 3
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 4
57729: NEG
57730: PUSH
57731: LD_INT 3
57733: NEG
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 5
57741: NEG
57742: PUSH
57743: LD_INT 4
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 5
57753: NEG
57754: PUSH
57755: LD_INT 5
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 3
57765: NEG
57766: PUSH
57767: LD_INT 5
57769: NEG
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 5
57777: NEG
57778: PUSH
57779: LD_INT 3
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: LD_INT 3
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: LD_INT 4
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: LD_INT 3
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: LD_INT 2
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 0
57833: PUSH
57834: LD_INT 2
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 1
57844: NEG
57845: PUSH
57846: LD_INT 3
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: NEG
57857: PUSH
57858: LD_INT 4
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 2
57868: PUSH
57869: LD_INT 2
57871: NEG
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 2
57879: NEG
57880: PUSH
57881: LD_INT 4
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 4
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 4
57901: PUSH
57902: LD_INT 1
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 5
57912: PUSH
57913: LD_INT 0
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 5
57922: PUSH
57923: LD_INT 1
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 4
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 3
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 3
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 3
57963: PUSH
57964: LD_INT 2
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 5
57974: PUSH
57975: LD_INT 2
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58029: LD_ADDR_VAR 0 32
58033: PUSH
58034: LD_INT 4
58036: NEG
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 4
58047: NEG
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 3
58059: NEG
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 3
58070: NEG
58071: PUSH
58072: LD_INT 1
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 4
58081: NEG
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 5
58092: NEG
58093: PUSH
58094: LD_INT 0
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 5
58103: NEG
58104: PUSH
58105: LD_INT 1
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 5
58115: NEG
58116: PUSH
58117: LD_INT 2
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 3
58127: NEG
58128: PUSH
58129: LD_INT 2
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 3
58138: NEG
58139: PUSH
58140: LD_INT 3
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 3
58150: NEG
58151: PUSH
58152: LD_INT 4
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 2
58162: NEG
58163: PUSH
58164: LD_INT 3
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 2
58174: NEG
58175: PUSH
58176: LD_INT 2
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 3
58186: NEG
58187: PUSH
58188: LD_INT 2
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 4
58198: NEG
58199: PUSH
58200: LD_INT 3
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 4
58210: NEG
58211: PUSH
58212: LD_INT 4
58214: NEG
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 2
58222: NEG
58223: PUSH
58224: LD_INT 4
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 4
58234: NEG
58235: PUSH
58236: LD_INT 2
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: LD_INT 4
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: LD_INT 5
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: LD_INT 4
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 1
58279: PUSH
58280: LD_INT 3
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 0
58290: PUSH
58291: LD_INT 3
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 1
58301: NEG
58302: PUSH
58303: LD_INT 4
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 1
58313: NEG
58314: PUSH
58315: LD_INT 5
58317: NEG
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 2
58325: PUSH
58326: LD_INT 3
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 2
58336: NEG
58337: PUSH
58338: LD_INT 5
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 3
58348: PUSH
58349: LD_INT 0
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 3
58358: PUSH
58359: LD_INT 1
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 4
58369: PUSH
58370: LD_INT 0
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 4
58379: PUSH
58380: LD_INT 1
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 3
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 2
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 2
58409: PUSH
58410: LD_INT 1
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 2
58420: PUSH
58421: LD_INT 2
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 4
58431: PUSH
58432: LD_INT 2
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 4
58441: PUSH
58442: LD_INT 4
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 4
58451: PUSH
58452: LD_INT 3
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 5
58461: PUSH
58462: LD_INT 4
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 5
58471: PUSH
58472: LD_INT 5
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 4
58481: PUSH
58482: LD_INT 5
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 3
58491: PUSH
58492: LD_INT 4
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 3
58501: PUSH
58502: LD_INT 3
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 5
58511: PUSH
58512: LD_INT 3
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 3
58521: PUSH
58522: LD_INT 5
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58576: LD_ADDR_VAR 0 33
58580: PUSH
58581: LD_INT 4
58583: NEG
58584: PUSH
58585: LD_INT 4
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 4
58595: NEG
58596: PUSH
58597: LD_INT 5
58599: NEG
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 3
58607: NEG
58608: PUSH
58609: LD_INT 4
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 3
58619: NEG
58620: PUSH
58621: LD_INT 3
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 4
58631: NEG
58632: PUSH
58633: LD_INT 3
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 5
58643: NEG
58644: PUSH
58645: LD_INT 4
58647: NEG
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 5
58655: NEG
58656: PUSH
58657: LD_INT 5
58659: NEG
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 3
58667: NEG
58668: PUSH
58669: LD_INT 5
58671: NEG
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 5
58679: NEG
58680: PUSH
58681: LD_INT 3
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: LD_INT 3
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: LD_INT 4
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: LD_INT 3
58716: NEG
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: PUSH
58725: LD_INT 2
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 0
58735: PUSH
58736: LD_INT 2
58738: NEG
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 1
58746: NEG
58747: PUSH
58748: LD_INT 3
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: LD_INT 4
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 2
58770: PUSH
58771: LD_INT 2
58773: NEG
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 2
58781: NEG
58782: PUSH
58783: LD_INT 4
58785: NEG
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 4
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 4
58803: PUSH
58804: LD_INT 1
58806: NEG
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 5
58814: PUSH
58815: LD_INT 0
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 5
58824: PUSH
58825: LD_INT 1
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 4
58834: PUSH
58835: LD_INT 1
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 3
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 3
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 3
58865: PUSH
58866: LD_INT 2
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 5
58876: PUSH
58877: LD_INT 2
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 3
58886: PUSH
58887: LD_INT 3
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 3
58896: PUSH
58897: LD_INT 2
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 4
58906: PUSH
58907: LD_INT 3
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 4
58916: PUSH
58917: LD_INT 4
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 3
58926: PUSH
58927: LD_INT 4
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 2
58936: PUSH
58937: LD_INT 3
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 2
58946: PUSH
58947: LD_INT 2
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 4
58956: PUSH
58957: LD_INT 2
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 2
58966: PUSH
58967: LD_INT 4
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: LD_INT 4
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 0
58986: PUSH
58987: LD_INT 3
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 1
58996: PUSH
58997: LD_INT 4
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 1
59006: PUSH
59007: LD_INT 5
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: LD_INT 5
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 1
59026: NEG
59027: PUSH
59028: LD_INT 4
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 1
59037: NEG
59038: PUSH
59039: LD_INT 3
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 2
59048: PUSH
59049: LD_INT 5
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: NEG
59059: PUSH
59060: LD_INT 3
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59114: LD_ADDR_VAR 0 34
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: LD_INT 4
59124: NEG
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: LD_INT 5
59135: NEG
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 1
59143: PUSH
59144: LD_INT 4
59146: NEG
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 1
59154: PUSH
59155: LD_INT 3
59157: NEG
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: LD_INT 3
59168: NEG
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 1
59176: NEG
59177: PUSH
59178: LD_INT 4
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 1
59188: NEG
59189: PUSH
59190: LD_INT 5
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 2
59200: PUSH
59201: LD_INT 3
59203: NEG
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 2
59211: NEG
59212: PUSH
59213: LD_INT 5
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 3
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 3
59233: PUSH
59234: LD_INT 1
59236: NEG
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 4
59244: PUSH
59245: LD_INT 0
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 4
59254: PUSH
59255: LD_INT 1
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 3
59264: PUSH
59265: LD_INT 1
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 2
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 2
59284: PUSH
59285: LD_INT 1
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 2
59295: PUSH
59296: LD_INT 2
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 4
59306: PUSH
59307: LD_INT 2
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 4
59316: PUSH
59317: LD_INT 4
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 4
59326: PUSH
59327: LD_INT 3
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 5
59336: PUSH
59337: LD_INT 4
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 5
59346: PUSH
59347: LD_INT 5
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 4
59356: PUSH
59357: LD_INT 5
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 3
59366: PUSH
59367: LD_INT 4
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 3
59376: PUSH
59377: LD_INT 3
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 5
59386: PUSH
59387: LD_INT 3
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 3
59396: PUSH
59397: LD_INT 5
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 0
59406: PUSH
59407: LD_INT 3
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: LD_INT 2
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: LD_INT 3
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: LD_INT 4
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: LD_INT 4
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 1
59456: NEG
59457: PUSH
59458: LD_INT 3
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: LD_INT 2
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 2
59478: PUSH
59479: LD_INT 4
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 2
59488: NEG
59489: PUSH
59490: LD_INT 2
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 4
59499: NEG
59500: PUSH
59501: LD_INT 0
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 4
59510: NEG
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 3
59522: NEG
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 3
59533: NEG
59534: PUSH
59535: LD_INT 1
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 4
59544: NEG
59545: PUSH
59546: LD_INT 1
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 5
59555: NEG
59556: PUSH
59557: LD_INT 0
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 5
59566: NEG
59567: PUSH
59568: LD_INT 1
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 5
59578: NEG
59579: PUSH
59580: LD_INT 2
59582: NEG
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 3
59590: NEG
59591: PUSH
59592: LD_INT 2
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: ST_TO_ADDR
// end ; end ;
59646: GO 59649
59648: POP
// case btype of b_depot , b_warehouse :
59649: LD_VAR 0 1
59653: PUSH
59654: LD_INT 0
59656: DOUBLE
59657: EQUAL
59658: IFTRUE 59668
59660: LD_INT 1
59662: DOUBLE
59663: EQUAL
59664: IFTRUE 59668
59666: GO 59869
59668: POP
// case nation of nation_american :
59669: LD_VAR 0 5
59673: PUSH
59674: LD_INT 1
59676: DOUBLE
59677: EQUAL
59678: IFTRUE 59682
59680: GO 59738
59682: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
59683: LD_ADDR_VAR 0 9
59687: PUSH
59688: LD_VAR 0 11
59692: PUSH
59693: LD_VAR 0 12
59697: PUSH
59698: LD_VAR 0 13
59702: PUSH
59703: LD_VAR 0 14
59707: PUSH
59708: LD_VAR 0 15
59712: PUSH
59713: LD_VAR 0 16
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: PUSH
59726: LD_VAR 0 4
59730: PUSH
59731: LD_INT 1
59733: PLUS
59734: ARRAY
59735: ST_TO_ADDR
59736: GO 59867
59738: LD_INT 2
59740: DOUBLE
59741: EQUAL
59742: IFTRUE 59746
59744: GO 59802
59746: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
59747: LD_ADDR_VAR 0 9
59751: PUSH
59752: LD_VAR 0 17
59756: PUSH
59757: LD_VAR 0 18
59761: PUSH
59762: LD_VAR 0 19
59766: PUSH
59767: LD_VAR 0 20
59771: PUSH
59772: LD_VAR 0 21
59776: PUSH
59777: LD_VAR 0 22
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: PUSH
59790: LD_VAR 0 4
59794: PUSH
59795: LD_INT 1
59797: PLUS
59798: ARRAY
59799: ST_TO_ADDR
59800: GO 59867
59802: LD_INT 3
59804: DOUBLE
59805: EQUAL
59806: IFTRUE 59810
59808: GO 59866
59810: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59811: LD_ADDR_VAR 0 9
59815: PUSH
59816: LD_VAR 0 23
59820: PUSH
59821: LD_VAR 0 24
59825: PUSH
59826: LD_VAR 0 25
59830: PUSH
59831: LD_VAR 0 26
59835: PUSH
59836: LD_VAR 0 27
59840: PUSH
59841: LD_VAR 0 28
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: PUSH
59854: LD_VAR 0 4
59858: PUSH
59859: LD_INT 1
59861: PLUS
59862: ARRAY
59863: ST_TO_ADDR
59864: GO 59867
59866: POP
59867: GO 60422
59869: LD_INT 2
59871: DOUBLE
59872: EQUAL
59873: IFTRUE 59883
59875: LD_INT 3
59877: DOUBLE
59878: EQUAL
59879: IFTRUE 59883
59881: GO 59939
59883: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59884: LD_ADDR_VAR 0 9
59888: PUSH
59889: LD_VAR 0 29
59893: PUSH
59894: LD_VAR 0 30
59898: PUSH
59899: LD_VAR 0 31
59903: PUSH
59904: LD_VAR 0 32
59908: PUSH
59909: LD_VAR 0 33
59913: PUSH
59914: LD_VAR 0 34
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: PUSH
59927: LD_VAR 0 4
59931: PUSH
59932: LD_INT 1
59934: PLUS
59935: ARRAY
59936: ST_TO_ADDR
59937: GO 60422
59939: LD_INT 16
59941: DOUBLE
59942: EQUAL
59943: IFTRUE 60001
59945: LD_INT 17
59947: DOUBLE
59948: EQUAL
59949: IFTRUE 60001
59951: LD_INT 18
59953: DOUBLE
59954: EQUAL
59955: IFTRUE 60001
59957: LD_INT 19
59959: DOUBLE
59960: EQUAL
59961: IFTRUE 60001
59963: LD_INT 22
59965: DOUBLE
59966: EQUAL
59967: IFTRUE 60001
59969: LD_INT 20
59971: DOUBLE
59972: EQUAL
59973: IFTRUE 60001
59975: LD_INT 21
59977: DOUBLE
59978: EQUAL
59979: IFTRUE 60001
59981: LD_INT 23
59983: DOUBLE
59984: EQUAL
59985: IFTRUE 60001
59987: LD_INT 24
59989: DOUBLE
59990: EQUAL
59991: IFTRUE 60001
59993: LD_INT 25
59995: DOUBLE
59996: EQUAL
59997: IFTRUE 60001
59999: GO 60057
60001: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60002: LD_ADDR_VAR 0 9
60006: PUSH
60007: LD_VAR 0 35
60011: PUSH
60012: LD_VAR 0 36
60016: PUSH
60017: LD_VAR 0 37
60021: PUSH
60022: LD_VAR 0 38
60026: PUSH
60027: LD_VAR 0 39
60031: PUSH
60032: LD_VAR 0 40
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: PUSH
60045: LD_VAR 0 4
60049: PUSH
60050: LD_INT 1
60052: PLUS
60053: ARRAY
60054: ST_TO_ADDR
60055: GO 60422
60057: LD_INT 6
60059: DOUBLE
60060: EQUAL
60061: IFTRUE 60113
60063: LD_INT 7
60065: DOUBLE
60066: EQUAL
60067: IFTRUE 60113
60069: LD_INT 8
60071: DOUBLE
60072: EQUAL
60073: IFTRUE 60113
60075: LD_INT 13
60077: DOUBLE
60078: EQUAL
60079: IFTRUE 60113
60081: LD_INT 12
60083: DOUBLE
60084: EQUAL
60085: IFTRUE 60113
60087: LD_INT 15
60089: DOUBLE
60090: EQUAL
60091: IFTRUE 60113
60093: LD_INT 11
60095: DOUBLE
60096: EQUAL
60097: IFTRUE 60113
60099: LD_INT 14
60101: DOUBLE
60102: EQUAL
60103: IFTRUE 60113
60105: LD_INT 10
60107: DOUBLE
60108: EQUAL
60109: IFTRUE 60113
60111: GO 60169
60113: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
60114: LD_ADDR_VAR 0 9
60118: PUSH
60119: LD_VAR 0 41
60123: PUSH
60124: LD_VAR 0 42
60128: PUSH
60129: LD_VAR 0 43
60133: PUSH
60134: LD_VAR 0 44
60138: PUSH
60139: LD_VAR 0 45
60143: PUSH
60144: LD_VAR 0 46
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: PUSH
60157: LD_VAR 0 4
60161: PUSH
60162: LD_INT 1
60164: PLUS
60165: ARRAY
60166: ST_TO_ADDR
60167: GO 60422
60169: LD_INT 36
60171: DOUBLE
60172: EQUAL
60173: IFTRUE 60177
60175: GO 60233
60177: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60178: LD_ADDR_VAR 0 9
60182: PUSH
60183: LD_VAR 0 47
60187: PUSH
60188: LD_VAR 0 48
60192: PUSH
60193: LD_VAR 0 49
60197: PUSH
60198: LD_VAR 0 50
60202: PUSH
60203: LD_VAR 0 51
60207: PUSH
60208: LD_VAR 0 52
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: PUSH
60221: LD_VAR 0 4
60225: PUSH
60226: LD_INT 1
60228: PLUS
60229: ARRAY
60230: ST_TO_ADDR
60231: GO 60422
60233: LD_INT 4
60235: DOUBLE
60236: EQUAL
60237: IFTRUE 60259
60239: LD_INT 5
60241: DOUBLE
60242: EQUAL
60243: IFTRUE 60259
60245: LD_INT 34
60247: DOUBLE
60248: EQUAL
60249: IFTRUE 60259
60251: LD_INT 37
60253: DOUBLE
60254: EQUAL
60255: IFTRUE 60259
60257: GO 60315
60259: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60260: LD_ADDR_VAR 0 9
60264: PUSH
60265: LD_VAR 0 53
60269: PUSH
60270: LD_VAR 0 54
60274: PUSH
60275: LD_VAR 0 55
60279: PUSH
60280: LD_VAR 0 56
60284: PUSH
60285: LD_VAR 0 57
60289: PUSH
60290: LD_VAR 0 58
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: PUSH
60303: LD_VAR 0 4
60307: PUSH
60308: LD_INT 1
60310: PLUS
60311: ARRAY
60312: ST_TO_ADDR
60313: GO 60422
60315: LD_INT 31
60317: DOUBLE
60318: EQUAL
60319: IFTRUE 60365
60321: LD_INT 32
60323: DOUBLE
60324: EQUAL
60325: IFTRUE 60365
60327: LD_INT 33
60329: DOUBLE
60330: EQUAL
60331: IFTRUE 60365
60333: LD_INT 27
60335: DOUBLE
60336: EQUAL
60337: IFTRUE 60365
60339: LD_INT 26
60341: DOUBLE
60342: EQUAL
60343: IFTRUE 60365
60345: LD_INT 28
60347: DOUBLE
60348: EQUAL
60349: IFTRUE 60365
60351: LD_INT 29
60353: DOUBLE
60354: EQUAL
60355: IFTRUE 60365
60357: LD_INT 30
60359: DOUBLE
60360: EQUAL
60361: IFTRUE 60365
60363: GO 60421
60365: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
60366: LD_ADDR_VAR 0 9
60370: PUSH
60371: LD_VAR 0 59
60375: PUSH
60376: LD_VAR 0 60
60380: PUSH
60381: LD_VAR 0 61
60385: PUSH
60386: LD_VAR 0 62
60390: PUSH
60391: LD_VAR 0 63
60395: PUSH
60396: LD_VAR 0 64
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: PUSH
60409: LD_VAR 0 4
60413: PUSH
60414: LD_INT 1
60416: PLUS
60417: ARRAY
60418: ST_TO_ADDR
60419: GO 60422
60421: POP
// temp_list2 = [ ] ;
60422: LD_ADDR_VAR 0 10
60426: PUSH
60427: EMPTY
60428: ST_TO_ADDR
// for i in temp_list do
60429: LD_ADDR_VAR 0 8
60433: PUSH
60434: LD_VAR 0 9
60438: PUSH
60439: FOR_IN
60440: IFFALSE 60492
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60442: LD_ADDR_VAR 0 10
60446: PUSH
60447: LD_VAR 0 10
60451: PUSH
60452: LD_VAR 0 8
60456: PUSH
60457: LD_INT 1
60459: ARRAY
60460: PUSH
60461: LD_VAR 0 2
60465: PLUS
60466: PUSH
60467: LD_VAR 0 8
60471: PUSH
60472: LD_INT 2
60474: ARRAY
60475: PUSH
60476: LD_VAR 0 3
60480: PLUS
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: EMPTY
60487: LIST
60488: ADD
60489: ST_TO_ADDR
60490: GO 60439
60492: POP
60493: POP
// result = temp_list2 ;
60494: LD_ADDR_VAR 0 7
60498: PUSH
60499: LD_VAR 0 10
60503: ST_TO_ADDR
// end ;
60504: LD_VAR 0 7
60508: RET
// export function EnemyInRange ( unit , dist ) ; begin
60509: LD_INT 0
60511: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60512: LD_ADDR_VAR 0 3
60516: PUSH
60517: LD_VAR 0 1
60521: PPUSH
60522: CALL_OW 255
60526: PPUSH
60527: LD_VAR 0 1
60531: PPUSH
60532: CALL_OW 250
60536: PPUSH
60537: LD_VAR 0 1
60541: PPUSH
60542: CALL_OW 251
60546: PPUSH
60547: LD_VAR 0 2
60551: PPUSH
60552: CALL 34613 0 4
60556: PUSH
60557: LD_INT 4
60559: ARRAY
60560: ST_TO_ADDR
// end ;
60561: LD_VAR 0 3
60565: RET
// export function PlayerSeeMe ( unit ) ; begin
60566: LD_INT 0
60568: PPUSH
// result := See ( your_side , unit ) ;
60569: LD_ADDR_VAR 0 2
60573: PUSH
60574: LD_OWVAR 2
60578: PPUSH
60579: LD_VAR 0 1
60583: PPUSH
60584: CALL_OW 292
60588: ST_TO_ADDR
// end ;
60589: LD_VAR 0 2
60593: RET
// export function ReverseDir ( unit ) ; begin
60594: LD_INT 0
60596: PPUSH
// if not unit then
60597: LD_VAR 0 1
60601: NOT
60602: IFFALSE 60606
// exit ;
60604: GO 60629
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60606: LD_ADDR_VAR 0 2
60610: PUSH
60611: LD_VAR 0 1
60615: PPUSH
60616: CALL_OW 254
60620: PUSH
60621: LD_INT 3
60623: PLUS
60624: PUSH
60625: LD_INT 6
60627: MOD
60628: ST_TO_ADDR
// end ;
60629: LD_VAR 0 2
60633: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60634: LD_INT 0
60636: PPUSH
60637: PPUSH
60638: PPUSH
60639: PPUSH
60640: PPUSH
// if not hexes then
60641: LD_VAR 0 2
60645: NOT
60646: IFFALSE 60650
// exit ;
60648: GO 60798
// dist := 9999 ;
60650: LD_ADDR_VAR 0 5
60654: PUSH
60655: LD_INT 9999
60657: ST_TO_ADDR
// for i = 1 to hexes do
60658: LD_ADDR_VAR 0 4
60662: PUSH
60663: DOUBLE
60664: LD_INT 1
60666: DEC
60667: ST_TO_ADDR
60668: LD_VAR 0 2
60672: PUSH
60673: FOR_TO
60674: IFFALSE 60786
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60676: LD_VAR 0 1
60680: PPUSH
60681: LD_VAR 0 2
60685: PUSH
60686: LD_VAR 0 4
60690: ARRAY
60691: PUSH
60692: LD_INT 1
60694: ARRAY
60695: PPUSH
60696: LD_VAR 0 2
60700: PUSH
60701: LD_VAR 0 4
60705: ARRAY
60706: PUSH
60707: LD_INT 2
60709: ARRAY
60710: PPUSH
60711: CALL_OW 297
60715: PUSH
60716: LD_VAR 0 5
60720: LESS
60721: IFFALSE 60784
// begin hex := hexes [ i ] ;
60723: LD_ADDR_VAR 0 7
60727: PUSH
60728: LD_VAR 0 2
60732: PUSH
60733: LD_VAR 0 4
60737: ARRAY
60738: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60739: LD_ADDR_VAR 0 5
60743: PUSH
60744: LD_VAR 0 1
60748: PPUSH
60749: LD_VAR 0 2
60753: PUSH
60754: LD_VAR 0 4
60758: ARRAY
60759: PUSH
60760: LD_INT 1
60762: ARRAY
60763: PPUSH
60764: LD_VAR 0 2
60768: PUSH
60769: LD_VAR 0 4
60773: ARRAY
60774: PUSH
60775: LD_INT 2
60777: ARRAY
60778: PPUSH
60779: CALL_OW 297
60783: ST_TO_ADDR
// end ; end ;
60784: GO 60673
60786: POP
60787: POP
// result := hex ;
60788: LD_ADDR_VAR 0 3
60792: PUSH
60793: LD_VAR 0 7
60797: ST_TO_ADDR
// end ;
60798: LD_VAR 0 3
60802: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60803: LD_INT 0
60805: PPUSH
60806: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60807: LD_VAR 0 1
60811: NOT
60812: PUSH
60813: LD_VAR 0 1
60817: PUSH
60818: LD_INT 21
60820: PUSH
60821: LD_INT 2
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 23
60830: PUSH
60831: LD_INT 2
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PPUSH
60842: CALL_OW 69
60846: IN
60847: NOT
60848: OR
60849: IFFALSE 60853
// exit ;
60851: GO 60900
// for i = 1 to 3 do
60853: LD_ADDR_VAR 0 3
60857: PUSH
60858: DOUBLE
60859: LD_INT 1
60861: DEC
60862: ST_TO_ADDR
60863: LD_INT 3
60865: PUSH
60866: FOR_TO
60867: IFFALSE 60898
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60869: LD_VAR 0 1
60873: PPUSH
60874: CALL_OW 250
60878: PPUSH
60879: LD_VAR 0 1
60883: PPUSH
60884: CALL_OW 251
60888: PPUSH
60889: LD_INT 1
60891: PPUSH
60892: CALL_OW 453
60896: GO 60866
60898: POP
60899: POP
// end ;
60900: LD_VAR 0 2
60904: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60905: LD_INT 0
60907: PPUSH
60908: PPUSH
60909: PPUSH
60910: PPUSH
60911: PPUSH
60912: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60913: LD_VAR 0 1
60917: NOT
60918: PUSH
60919: LD_VAR 0 2
60923: NOT
60924: OR
60925: PUSH
60926: LD_VAR 0 1
60930: PPUSH
60931: CALL_OW 314
60935: OR
60936: IFFALSE 60940
// exit ;
60938: GO 61381
// x := GetX ( enemy_unit ) ;
60940: LD_ADDR_VAR 0 7
60944: PUSH
60945: LD_VAR 0 2
60949: PPUSH
60950: CALL_OW 250
60954: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60955: LD_ADDR_VAR 0 8
60959: PUSH
60960: LD_VAR 0 2
60964: PPUSH
60965: CALL_OW 251
60969: ST_TO_ADDR
// if not x or not y then
60970: LD_VAR 0 7
60974: NOT
60975: PUSH
60976: LD_VAR 0 8
60980: NOT
60981: OR
60982: IFFALSE 60986
// exit ;
60984: GO 61381
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60986: LD_ADDR_VAR 0 6
60990: PUSH
60991: LD_VAR 0 7
60995: PPUSH
60996: LD_INT 0
60998: PPUSH
60999: LD_INT 4
61001: PPUSH
61002: CALL_OW 272
61006: PUSH
61007: LD_VAR 0 8
61011: PPUSH
61012: LD_INT 0
61014: PPUSH
61015: LD_INT 4
61017: PPUSH
61018: CALL_OW 273
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_VAR 0 7
61031: PPUSH
61032: LD_INT 1
61034: PPUSH
61035: LD_INT 4
61037: PPUSH
61038: CALL_OW 272
61042: PUSH
61043: LD_VAR 0 8
61047: PPUSH
61048: LD_INT 1
61050: PPUSH
61051: LD_INT 4
61053: PPUSH
61054: CALL_OW 273
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_VAR 0 7
61067: PPUSH
61068: LD_INT 2
61070: PPUSH
61071: LD_INT 4
61073: PPUSH
61074: CALL_OW 272
61078: PUSH
61079: LD_VAR 0 8
61083: PPUSH
61084: LD_INT 2
61086: PPUSH
61087: LD_INT 4
61089: PPUSH
61090: CALL_OW 273
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_VAR 0 7
61103: PPUSH
61104: LD_INT 3
61106: PPUSH
61107: LD_INT 4
61109: PPUSH
61110: CALL_OW 272
61114: PUSH
61115: LD_VAR 0 8
61119: PPUSH
61120: LD_INT 3
61122: PPUSH
61123: LD_INT 4
61125: PPUSH
61126: CALL_OW 273
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_VAR 0 7
61139: PPUSH
61140: LD_INT 4
61142: PPUSH
61143: LD_INT 4
61145: PPUSH
61146: CALL_OW 272
61150: PUSH
61151: LD_VAR 0 8
61155: PPUSH
61156: LD_INT 4
61158: PPUSH
61159: LD_INT 4
61161: PPUSH
61162: CALL_OW 273
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_VAR 0 7
61175: PPUSH
61176: LD_INT 5
61178: PPUSH
61179: LD_INT 4
61181: PPUSH
61182: CALL_OW 272
61186: PUSH
61187: LD_VAR 0 8
61191: PPUSH
61192: LD_INT 5
61194: PPUSH
61195: LD_INT 4
61197: PPUSH
61198: CALL_OW 273
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: ST_TO_ADDR
// for i = tmp downto 1 do
61215: LD_ADDR_VAR 0 4
61219: PUSH
61220: DOUBLE
61221: LD_VAR 0 6
61225: INC
61226: ST_TO_ADDR
61227: LD_INT 1
61229: PUSH
61230: FOR_DOWNTO
61231: IFFALSE 61332
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61233: LD_VAR 0 6
61237: PUSH
61238: LD_VAR 0 4
61242: ARRAY
61243: PUSH
61244: LD_INT 1
61246: ARRAY
61247: PPUSH
61248: LD_VAR 0 6
61252: PUSH
61253: LD_VAR 0 4
61257: ARRAY
61258: PUSH
61259: LD_INT 2
61261: ARRAY
61262: PPUSH
61263: CALL_OW 488
61267: NOT
61268: PUSH
61269: LD_VAR 0 6
61273: PUSH
61274: LD_VAR 0 4
61278: ARRAY
61279: PUSH
61280: LD_INT 1
61282: ARRAY
61283: PPUSH
61284: LD_VAR 0 6
61288: PUSH
61289: LD_VAR 0 4
61293: ARRAY
61294: PUSH
61295: LD_INT 2
61297: ARRAY
61298: PPUSH
61299: CALL_OW 428
61303: PUSH
61304: LD_INT 0
61306: NONEQUAL
61307: OR
61308: IFFALSE 61330
// tmp := Delete ( tmp , i ) ;
61310: LD_ADDR_VAR 0 6
61314: PUSH
61315: LD_VAR 0 6
61319: PPUSH
61320: LD_VAR 0 4
61324: PPUSH
61325: CALL_OW 3
61329: ST_TO_ADDR
61330: GO 61230
61332: POP
61333: POP
// j := GetClosestHex ( unit , tmp ) ;
61334: LD_ADDR_VAR 0 5
61338: PUSH
61339: LD_VAR 0 1
61343: PPUSH
61344: LD_VAR 0 6
61348: PPUSH
61349: CALL 60634 0 2
61353: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61354: LD_VAR 0 1
61358: PPUSH
61359: LD_VAR 0 5
61363: PUSH
61364: LD_INT 1
61366: ARRAY
61367: PPUSH
61368: LD_VAR 0 5
61372: PUSH
61373: LD_INT 2
61375: ARRAY
61376: PPUSH
61377: CALL_OW 111
// end ;
61381: LD_VAR 0 3
61385: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61386: LD_INT 0
61388: PPUSH
61389: PPUSH
61390: PPUSH
// uc_side = 0 ;
61391: LD_ADDR_OWVAR 20
61395: PUSH
61396: LD_INT 0
61398: ST_TO_ADDR
// uc_nation = 0 ;
61399: LD_ADDR_OWVAR 21
61403: PUSH
61404: LD_INT 0
61406: ST_TO_ADDR
// InitHc ;
61407: CALL_OW 19
// InitVc ;
61411: CALL_OW 20
// if mastodonts then
61415: LD_VAR 0 6
61419: IFFALSE 61486
// for i = 1 to mastodonts do
61421: LD_ADDR_VAR 0 11
61425: PUSH
61426: DOUBLE
61427: LD_INT 1
61429: DEC
61430: ST_TO_ADDR
61431: LD_VAR 0 6
61435: PUSH
61436: FOR_TO
61437: IFFALSE 61484
// begin vc_chassis := 31 ;
61439: LD_ADDR_OWVAR 37
61443: PUSH
61444: LD_INT 31
61446: ST_TO_ADDR
// vc_control := control_rider ;
61447: LD_ADDR_OWVAR 38
61451: PUSH
61452: LD_INT 4
61454: ST_TO_ADDR
// animal := CreateVehicle ;
61455: LD_ADDR_VAR 0 12
61459: PUSH
61460: CALL_OW 45
61464: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61465: LD_VAR 0 12
61469: PPUSH
61470: LD_VAR 0 8
61474: PPUSH
61475: LD_INT 0
61477: PPUSH
61478: CALL 63555 0 3
// end ;
61482: GO 61436
61484: POP
61485: POP
// if horses then
61486: LD_VAR 0 5
61490: IFFALSE 61557
// for i = 1 to horses do
61492: LD_ADDR_VAR 0 11
61496: PUSH
61497: DOUBLE
61498: LD_INT 1
61500: DEC
61501: ST_TO_ADDR
61502: LD_VAR 0 5
61506: PUSH
61507: FOR_TO
61508: IFFALSE 61555
// begin hc_class := 21 ;
61510: LD_ADDR_OWVAR 28
61514: PUSH
61515: LD_INT 21
61517: ST_TO_ADDR
// hc_gallery :=  ;
61518: LD_ADDR_OWVAR 33
61522: PUSH
61523: LD_STRING 
61525: ST_TO_ADDR
// animal := CreateHuman ;
61526: LD_ADDR_VAR 0 12
61530: PUSH
61531: CALL_OW 44
61535: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61536: LD_VAR 0 12
61540: PPUSH
61541: LD_VAR 0 8
61545: PPUSH
61546: LD_INT 0
61548: PPUSH
61549: CALL 63555 0 3
// end ;
61553: GO 61507
61555: POP
61556: POP
// if birds then
61557: LD_VAR 0 1
61561: IFFALSE 61628
// for i = 1 to birds do
61563: LD_ADDR_VAR 0 11
61567: PUSH
61568: DOUBLE
61569: LD_INT 1
61571: DEC
61572: ST_TO_ADDR
61573: LD_VAR 0 1
61577: PUSH
61578: FOR_TO
61579: IFFALSE 61626
// begin hc_class = 18 ;
61581: LD_ADDR_OWVAR 28
61585: PUSH
61586: LD_INT 18
61588: ST_TO_ADDR
// hc_gallery =  ;
61589: LD_ADDR_OWVAR 33
61593: PUSH
61594: LD_STRING 
61596: ST_TO_ADDR
// animal := CreateHuman ;
61597: LD_ADDR_VAR 0 12
61601: PUSH
61602: CALL_OW 44
61606: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61607: LD_VAR 0 12
61611: PPUSH
61612: LD_VAR 0 8
61616: PPUSH
61617: LD_INT 0
61619: PPUSH
61620: CALL 63555 0 3
// end ;
61624: GO 61578
61626: POP
61627: POP
// if tigers then
61628: LD_VAR 0 2
61632: IFFALSE 61716
// for i = 1 to tigers do
61634: LD_ADDR_VAR 0 11
61638: PUSH
61639: DOUBLE
61640: LD_INT 1
61642: DEC
61643: ST_TO_ADDR
61644: LD_VAR 0 2
61648: PUSH
61649: FOR_TO
61650: IFFALSE 61714
// begin hc_class = class_tiger ;
61652: LD_ADDR_OWVAR 28
61656: PUSH
61657: LD_INT 14
61659: ST_TO_ADDR
// hc_gallery =  ;
61660: LD_ADDR_OWVAR 33
61664: PUSH
61665: LD_STRING 
61667: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61668: LD_ADDR_OWVAR 35
61672: PUSH
61673: LD_INT 7
61675: NEG
61676: PPUSH
61677: LD_INT 7
61679: PPUSH
61680: CALL_OW 12
61684: ST_TO_ADDR
// animal := CreateHuman ;
61685: LD_ADDR_VAR 0 12
61689: PUSH
61690: CALL_OW 44
61694: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61695: LD_VAR 0 12
61699: PPUSH
61700: LD_VAR 0 8
61704: PPUSH
61705: LD_INT 0
61707: PPUSH
61708: CALL 63555 0 3
// end ;
61712: GO 61649
61714: POP
61715: POP
// if apemans then
61716: LD_VAR 0 3
61720: IFFALSE 61843
// for i = 1 to apemans do
61722: LD_ADDR_VAR 0 11
61726: PUSH
61727: DOUBLE
61728: LD_INT 1
61730: DEC
61731: ST_TO_ADDR
61732: LD_VAR 0 3
61736: PUSH
61737: FOR_TO
61738: IFFALSE 61841
// begin hc_class = class_apeman ;
61740: LD_ADDR_OWVAR 28
61744: PUSH
61745: LD_INT 12
61747: ST_TO_ADDR
// hc_gallery =  ;
61748: LD_ADDR_OWVAR 33
61752: PUSH
61753: LD_STRING 
61755: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
61756: LD_ADDR_OWVAR 35
61760: PUSH
61761: LD_INT 5
61763: NEG
61764: PPUSH
61765: LD_INT 5
61767: PPUSH
61768: CALL_OW 12
61772: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61773: LD_ADDR_OWVAR 31
61777: PUSH
61778: LD_INT 1
61780: PPUSH
61781: LD_INT 3
61783: PPUSH
61784: CALL_OW 12
61788: PUSH
61789: LD_INT 1
61791: PPUSH
61792: LD_INT 3
61794: PPUSH
61795: CALL_OW 12
61799: PUSH
61800: LD_INT 0
61802: PUSH
61803: LD_INT 0
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: ST_TO_ADDR
// animal := CreateHuman ;
61812: LD_ADDR_VAR 0 12
61816: PUSH
61817: CALL_OW 44
61821: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61822: LD_VAR 0 12
61826: PPUSH
61827: LD_VAR 0 8
61831: PPUSH
61832: LD_INT 0
61834: PPUSH
61835: CALL 63555 0 3
// end ;
61839: GO 61737
61841: POP
61842: POP
// if enchidnas then
61843: LD_VAR 0 4
61847: IFFALSE 61914
// for i = 1 to enchidnas do
61849: LD_ADDR_VAR 0 11
61853: PUSH
61854: DOUBLE
61855: LD_INT 1
61857: DEC
61858: ST_TO_ADDR
61859: LD_VAR 0 4
61863: PUSH
61864: FOR_TO
61865: IFFALSE 61912
// begin hc_class = 13 ;
61867: LD_ADDR_OWVAR 28
61871: PUSH
61872: LD_INT 13
61874: ST_TO_ADDR
// hc_gallery =  ;
61875: LD_ADDR_OWVAR 33
61879: PUSH
61880: LD_STRING 
61882: ST_TO_ADDR
// animal := CreateHuman ;
61883: LD_ADDR_VAR 0 12
61887: PUSH
61888: CALL_OW 44
61892: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61893: LD_VAR 0 12
61897: PPUSH
61898: LD_VAR 0 8
61902: PPUSH
61903: LD_INT 0
61905: PPUSH
61906: CALL 63555 0 3
// end ;
61910: GO 61864
61912: POP
61913: POP
// if fishes then
61914: LD_VAR 0 7
61918: IFFALSE 61985
// for i = 1 to fishes do
61920: LD_ADDR_VAR 0 11
61924: PUSH
61925: DOUBLE
61926: LD_INT 1
61928: DEC
61929: ST_TO_ADDR
61930: LD_VAR 0 7
61934: PUSH
61935: FOR_TO
61936: IFFALSE 61983
// begin hc_class = 20 ;
61938: LD_ADDR_OWVAR 28
61942: PUSH
61943: LD_INT 20
61945: ST_TO_ADDR
// hc_gallery =  ;
61946: LD_ADDR_OWVAR 33
61950: PUSH
61951: LD_STRING 
61953: ST_TO_ADDR
// animal := CreateHuman ;
61954: LD_ADDR_VAR 0 12
61958: PUSH
61959: CALL_OW 44
61963: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61964: LD_VAR 0 12
61968: PPUSH
61969: LD_VAR 0 9
61973: PPUSH
61974: LD_INT 0
61976: PPUSH
61977: CALL 63555 0 3
// end ;
61981: GO 61935
61983: POP
61984: POP
// end ;
61985: LD_VAR 0 10
61989: RET
// export function WantHeal ( sci , unit ) ; begin
61990: LD_INT 0
61992: PPUSH
// if GetTaskList ( sci ) > 0 then
61993: LD_VAR 0 1
61997: PPUSH
61998: CALL_OW 437
62002: PUSH
62003: LD_INT 0
62005: GREATER
62006: IFFALSE 62076
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62008: LD_VAR 0 1
62012: PPUSH
62013: CALL_OW 437
62017: PUSH
62018: LD_INT 1
62020: ARRAY
62021: PUSH
62022: LD_INT 1
62024: ARRAY
62025: PUSH
62026: LD_STRING l
62028: EQUAL
62029: PUSH
62030: LD_VAR 0 1
62034: PPUSH
62035: CALL_OW 437
62039: PUSH
62040: LD_INT 1
62042: ARRAY
62043: PUSH
62044: LD_INT 4
62046: ARRAY
62047: PUSH
62048: LD_VAR 0 2
62052: EQUAL
62053: AND
62054: IFFALSE 62066
// result := true else
62056: LD_ADDR_VAR 0 3
62060: PUSH
62061: LD_INT 1
62063: ST_TO_ADDR
62064: GO 62074
// result := false ;
62066: LD_ADDR_VAR 0 3
62070: PUSH
62071: LD_INT 0
62073: ST_TO_ADDR
// end else
62074: GO 62084
// result := false ;
62076: LD_ADDR_VAR 0 3
62080: PUSH
62081: LD_INT 0
62083: ST_TO_ADDR
// end ;
62084: LD_VAR 0 3
62088: RET
// export function HealTarget ( sci ) ; begin
62089: LD_INT 0
62091: PPUSH
// if not sci then
62092: LD_VAR 0 1
62096: NOT
62097: IFFALSE 62101
// exit ;
62099: GO 62166
// result := 0 ;
62101: LD_ADDR_VAR 0 2
62105: PUSH
62106: LD_INT 0
62108: ST_TO_ADDR
// if GetTaskList ( sci ) then
62109: LD_VAR 0 1
62113: PPUSH
62114: CALL_OW 437
62118: IFFALSE 62166
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62120: LD_VAR 0 1
62124: PPUSH
62125: CALL_OW 437
62129: PUSH
62130: LD_INT 1
62132: ARRAY
62133: PUSH
62134: LD_INT 1
62136: ARRAY
62137: PUSH
62138: LD_STRING l
62140: EQUAL
62141: IFFALSE 62166
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62143: LD_ADDR_VAR 0 2
62147: PUSH
62148: LD_VAR 0 1
62152: PPUSH
62153: CALL_OW 437
62157: PUSH
62158: LD_INT 1
62160: ARRAY
62161: PUSH
62162: LD_INT 4
62164: ARRAY
62165: ST_TO_ADDR
// end ;
62166: LD_VAR 0 2
62170: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62171: LD_INT 0
62173: PPUSH
62174: PPUSH
62175: PPUSH
62176: PPUSH
// if not base_units then
62177: LD_VAR 0 1
62181: NOT
62182: IFFALSE 62186
// exit ;
62184: GO 62273
// result := false ;
62186: LD_ADDR_VAR 0 2
62190: PUSH
62191: LD_INT 0
62193: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62194: LD_ADDR_VAR 0 5
62198: PUSH
62199: LD_VAR 0 1
62203: PPUSH
62204: LD_INT 21
62206: PUSH
62207: LD_INT 3
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PPUSH
62214: CALL_OW 72
62218: ST_TO_ADDR
// if not tmp then
62219: LD_VAR 0 5
62223: NOT
62224: IFFALSE 62228
// exit ;
62226: GO 62273
// for i in tmp do
62228: LD_ADDR_VAR 0 3
62232: PUSH
62233: LD_VAR 0 5
62237: PUSH
62238: FOR_IN
62239: IFFALSE 62271
// begin result := EnemyInRange ( i , 22 ) ;
62241: LD_ADDR_VAR 0 2
62245: PUSH
62246: LD_VAR 0 3
62250: PPUSH
62251: LD_INT 22
62253: PPUSH
62254: CALL 60509 0 2
62258: ST_TO_ADDR
// if result then
62259: LD_VAR 0 2
62263: IFFALSE 62269
// exit ;
62265: POP
62266: POP
62267: GO 62273
// end ;
62269: GO 62238
62271: POP
62272: POP
// end ;
62273: LD_VAR 0 2
62277: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
62278: LD_INT 0
62280: PPUSH
62281: PPUSH
// if not units then
62282: LD_VAR 0 1
62286: NOT
62287: IFFALSE 62291
// exit ;
62289: GO 62361
// result := [ ] ;
62291: LD_ADDR_VAR 0 3
62295: PUSH
62296: EMPTY
62297: ST_TO_ADDR
// for i in units do
62298: LD_ADDR_VAR 0 4
62302: PUSH
62303: LD_VAR 0 1
62307: PUSH
62308: FOR_IN
62309: IFFALSE 62359
// if GetTag ( i ) = tag then
62311: LD_VAR 0 4
62315: PPUSH
62316: CALL_OW 110
62320: PUSH
62321: LD_VAR 0 2
62325: EQUAL
62326: IFFALSE 62357
// result := Insert ( result , result + 1 , i ) ;
62328: LD_ADDR_VAR 0 3
62332: PUSH
62333: LD_VAR 0 3
62337: PPUSH
62338: LD_VAR 0 3
62342: PUSH
62343: LD_INT 1
62345: PLUS
62346: PPUSH
62347: LD_VAR 0 4
62351: PPUSH
62352: CALL_OW 2
62356: ST_TO_ADDR
62357: GO 62308
62359: POP
62360: POP
// end ;
62361: LD_VAR 0 3
62365: RET
// export function IsDriver ( un ) ; begin
62366: LD_INT 0
62368: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62369: LD_ADDR_VAR 0 2
62373: PUSH
62374: LD_VAR 0 1
62378: PUSH
62379: LD_INT 55
62381: PUSH
62382: EMPTY
62383: LIST
62384: PPUSH
62385: CALL_OW 69
62389: IN
62390: ST_TO_ADDR
// end ;
62391: LD_VAR 0 2
62395: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62396: LD_INT 0
62398: PPUSH
62399: PPUSH
// list := [ ] ;
62400: LD_ADDR_VAR 0 5
62404: PUSH
62405: EMPTY
62406: ST_TO_ADDR
// case d of 0 :
62407: LD_VAR 0 3
62411: PUSH
62412: LD_INT 0
62414: DOUBLE
62415: EQUAL
62416: IFTRUE 62420
62418: GO 62553
62420: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62421: LD_ADDR_VAR 0 5
62425: PUSH
62426: LD_VAR 0 1
62430: PUSH
62431: LD_INT 4
62433: MINUS
62434: PUSH
62435: LD_VAR 0 2
62439: PUSH
62440: LD_INT 4
62442: MINUS
62443: PUSH
62444: LD_INT 2
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: LIST
62451: PUSH
62452: LD_VAR 0 1
62456: PUSH
62457: LD_INT 3
62459: MINUS
62460: PUSH
62461: LD_VAR 0 2
62465: PUSH
62466: LD_INT 1
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: LIST
62473: PUSH
62474: LD_VAR 0 1
62478: PUSH
62479: LD_INT 4
62481: PLUS
62482: PUSH
62483: LD_VAR 0 2
62487: PUSH
62488: LD_INT 4
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: LIST
62495: PUSH
62496: LD_VAR 0 1
62500: PUSH
62501: LD_INT 3
62503: PLUS
62504: PUSH
62505: LD_VAR 0 2
62509: PUSH
62510: LD_INT 3
62512: PLUS
62513: PUSH
62514: LD_INT 5
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: LIST
62521: PUSH
62522: LD_VAR 0 1
62526: PUSH
62527: LD_VAR 0 2
62531: PUSH
62532: LD_INT 4
62534: PLUS
62535: PUSH
62536: LD_INT 0
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: LIST
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: ST_TO_ADDR
// end ; 1 :
62551: GO 63251
62553: LD_INT 1
62555: DOUBLE
62556: EQUAL
62557: IFTRUE 62561
62559: GO 62694
62561: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62562: LD_ADDR_VAR 0 5
62566: PUSH
62567: LD_VAR 0 1
62571: PUSH
62572: LD_VAR 0 2
62576: PUSH
62577: LD_INT 4
62579: MINUS
62580: PUSH
62581: LD_INT 3
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: LIST
62588: PUSH
62589: LD_VAR 0 1
62593: PUSH
62594: LD_INT 3
62596: MINUS
62597: PUSH
62598: LD_VAR 0 2
62602: PUSH
62603: LD_INT 3
62605: MINUS
62606: PUSH
62607: LD_INT 2
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: LIST
62614: PUSH
62615: LD_VAR 0 1
62619: PUSH
62620: LD_INT 4
62622: MINUS
62623: PUSH
62624: LD_VAR 0 2
62628: PUSH
62629: LD_INT 1
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: LIST
62636: PUSH
62637: LD_VAR 0 1
62641: PUSH
62642: LD_VAR 0 2
62646: PUSH
62647: LD_INT 3
62649: PLUS
62650: PUSH
62651: LD_INT 0
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: LIST
62658: PUSH
62659: LD_VAR 0 1
62663: PUSH
62664: LD_INT 4
62666: PLUS
62667: PUSH
62668: LD_VAR 0 2
62672: PUSH
62673: LD_INT 4
62675: PLUS
62676: PUSH
62677: LD_INT 5
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: LIST
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: ST_TO_ADDR
// end ; 2 :
62692: GO 63251
62694: LD_INT 2
62696: DOUBLE
62697: EQUAL
62698: IFTRUE 62702
62700: GO 62831
62702: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62703: LD_ADDR_VAR 0 5
62707: PUSH
62708: LD_VAR 0 1
62712: PUSH
62713: LD_VAR 0 2
62717: PUSH
62718: LD_INT 3
62720: MINUS
62721: PUSH
62722: LD_INT 3
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: LIST
62729: PUSH
62730: LD_VAR 0 1
62734: PUSH
62735: LD_INT 4
62737: PLUS
62738: PUSH
62739: LD_VAR 0 2
62743: PUSH
62744: LD_INT 4
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: LIST
62751: PUSH
62752: LD_VAR 0 1
62756: PUSH
62757: LD_VAR 0 2
62761: PUSH
62762: LD_INT 4
62764: PLUS
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: LIST
62773: PUSH
62774: LD_VAR 0 1
62778: PUSH
62779: LD_INT 3
62781: MINUS
62782: PUSH
62783: LD_VAR 0 2
62787: PUSH
62788: LD_INT 1
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: LIST
62795: PUSH
62796: LD_VAR 0 1
62800: PUSH
62801: LD_INT 4
62803: MINUS
62804: PUSH
62805: LD_VAR 0 2
62809: PUSH
62810: LD_INT 4
62812: MINUS
62813: PUSH
62814: LD_INT 2
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: LIST
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: ST_TO_ADDR
// end ; 3 :
62829: GO 63251
62831: LD_INT 3
62833: DOUBLE
62834: EQUAL
62835: IFTRUE 62839
62837: GO 62972
62839: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62840: LD_ADDR_VAR 0 5
62844: PUSH
62845: LD_VAR 0 1
62849: PUSH
62850: LD_INT 3
62852: PLUS
62853: PUSH
62854: LD_VAR 0 2
62858: PUSH
62859: LD_INT 4
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: LIST
62866: PUSH
62867: LD_VAR 0 1
62871: PUSH
62872: LD_INT 4
62874: PLUS
62875: PUSH
62876: LD_VAR 0 2
62880: PUSH
62881: LD_INT 4
62883: PLUS
62884: PUSH
62885: LD_INT 5
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: LIST
62892: PUSH
62893: LD_VAR 0 1
62897: PUSH
62898: LD_INT 4
62900: MINUS
62901: PUSH
62902: LD_VAR 0 2
62906: PUSH
62907: LD_INT 1
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: LIST
62914: PUSH
62915: LD_VAR 0 1
62919: PUSH
62920: LD_VAR 0 2
62924: PUSH
62925: LD_INT 4
62927: MINUS
62928: PUSH
62929: LD_INT 3
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: LIST
62936: PUSH
62937: LD_VAR 0 1
62941: PUSH
62942: LD_INT 3
62944: MINUS
62945: PUSH
62946: LD_VAR 0 2
62950: PUSH
62951: LD_INT 3
62953: MINUS
62954: PUSH
62955: LD_INT 2
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: LIST
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: ST_TO_ADDR
// end ; 4 :
62970: GO 63251
62972: LD_INT 4
62974: DOUBLE
62975: EQUAL
62976: IFTRUE 62980
62978: GO 63113
62980: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62981: LD_ADDR_VAR 0 5
62985: PUSH
62986: LD_VAR 0 1
62990: PUSH
62991: LD_VAR 0 2
62995: PUSH
62996: LD_INT 4
62998: PLUS
62999: PUSH
63000: LD_INT 0
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: LIST
63007: PUSH
63008: LD_VAR 0 1
63012: PUSH
63013: LD_INT 3
63015: PLUS
63016: PUSH
63017: LD_VAR 0 2
63021: PUSH
63022: LD_INT 3
63024: PLUS
63025: PUSH
63026: LD_INT 5
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: LIST
63033: PUSH
63034: LD_VAR 0 1
63038: PUSH
63039: LD_INT 4
63041: PLUS
63042: PUSH
63043: LD_VAR 0 2
63047: PUSH
63048: LD_INT 4
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: LIST
63055: PUSH
63056: LD_VAR 0 1
63060: PUSH
63061: LD_VAR 0 2
63065: PUSH
63066: LD_INT 3
63068: MINUS
63069: PUSH
63070: LD_INT 3
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: LIST
63077: PUSH
63078: LD_VAR 0 1
63082: PUSH
63083: LD_INT 4
63085: MINUS
63086: PUSH
63087: LD_VAR 0 2
63091: PUSH
63092: LD_INT 4
63094: MINUS
63095: PUSH
63096: LD_INT 2
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: LIST
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: ST_TO_ADDR
// end ; 5 :
63111: GO 63251
63113: LD_INT 5
63115: DOUBLE
63116: EQUAL
63117: IFTRUE 63121
63119: GO 63250
63121: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63122: LD_ADDR_VAR 0 5
63126: PUSH
63127: LD_VAR 0 1
63131: PUSH
63132: LD_INT 4
63134: MINUS
63135: PUSH
63136: LD_VAR 0 2
63140: PUSH
63141: LD_INT 1
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: LIST
63148: PUSH
63149: LD_VAR 0 1
63153: PUSH
63154: LD_VAR 0 2
63158: PUSH
63159: LD_INT 4
63161: MINUS
63162: PUSH
63163: LD_INT 3
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: LIST
63170: PUSH
63171: LD_VAR 0 1
63175: PUSH
63176: LD_INT 4
63178: PLUS
63179: PUSH
63180: LD_VAR 0 2
63184: PUSH
63185: LD_INT 4
63187: PLUS
63188: PUSH
63189: LD_INT 5
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: LIST
63196: PUSH
63197: LD_VAR 0 1
63201: PUSH
63202: LD_INT 3
63204: PLUS
63205: PUSH
63206: LD_VAR 0 2
63210: PUSH
63211: LD_INT 4
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: LIST
63218: PUSH
63219: LD_VAR 0 1
63223: PUSH
63224: LD_VAR 0 2
63228: PUSH
63229: LD_INT 3
63231: PLUS
63232: PUSH
63233: LD_INT 0
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: LIST
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: ST_TO_ADDR
// end ; end ;
63248: GO 63251
63250: POP
// result := list ;
63251: LD_ADDR_VAR 0 4
63255: PUSH
63256: LD_VAR 0 5
63260: ST_TO_ADDR
// end ;
63261: LD_VAR 0 4
63265: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63266: LD_INT 0
63268: PPUSH
63269: PPUSH
63270: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63271: LD_VAR 0 1
63275: NOT
63276: PUSH
63277: LD_VAR 0 2
63281: PUSH
63282: LD_INT 1
63284: PUSH
63285: LD_INT 2
63287: PUSH
63288: LD_INT 3
63290: PUSH
63291: LD_INT 4
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: IN
63300: NOT
63301: OR
63302: IFFALSE 63306
// exit ;
63304: GO 63398
// tmp := [ ] ;
63306: LD_ADDR_VAR 0 5
63310: PUSH
63311: EMPTY
63312: ST_TO_ADDR
// for i in units do
63313: LD_ADDR_VAR 0 4
63317: PUSH
63318: LD_VAR 0 1
63322: PUSH
63323: FOR_IN
63324: IFFALSE 63367
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63326: LD_ADDR_VAR 0 5
63330: PUSH
63331: LD_VAR 0 5
63335: PPUSH
63336: LD_VAR 0 5
63340: PUSH
63341: LD_INT 1
63343: PLUS
63344: PPUSH
63345: LD_VAR 0 4
63349: PPUSH
63350: LD_VAR 0 2
63354: PPUSH
63355: CALL_OW 259
63359: PPUSH
63360: CALL_OW 2
63364: ST_TO_ADDR
63365: GO 63323
63367: POP
63368: POP
// if not tmp then
63369: LD_VAR 0 5
63373: NOT
63374: IFFALSE 63378
// exit ;
63376: GO 63398
// result := SortListByListDesc ( units , tmp ) ;
63378: LD_ADDR_VAR 0 3
63382: PUSH
63383: LD_VAR 0 1
63387: PPUSH
63388: LD_VAR 0 5
63392: PPUSH
63393: CALL_OW 77
63397: ST_TO_ADDR
// end ;
63398: LD_VAR 0 3
63402: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63403: LD_INT 0
63405: PPUSH
63406: PPUSH
63407: PPUSH
// x := GetX ( building ) ;
63408: LD_ADDR_VAR 0 4
63412: PUSH
63413: LD_VAR 0 2
63417: PPUSH
63418: CALL_OW 250
63422: ST_TO_ADDR
// y := GetY ( building ) ;
63423: LD_ADDR_VAR 0 5
63427: PUSH
63428: LD_VAR 0 2
63432: PPUSH
63433: CALL_OW 251
63437: ST_TO_ADDR
// if GetTaskList ( unit ) then
63438: LD_VAR 0 1
63442: PPUSH
63443: CALL_OW 437
63447: IFFALSE 63542
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63449: LD_STRING e
63451: PUSH
63452: LD_VAR 0 1
63456: PPUSH
63457: CALL_OW 437
63461: PUSH
63462: LD_INT 1
63464: ARRAY
63465: PUSH
63466: LD_INT 1
63468: ARRAY
63469: EQUAL
63470: PUSH
63471: LD_VAR 0 4
63475: PUSH
63476: LD_VAR 0 1
63480: PPUSH
63481: CALL_OW 437
63485: PUSH
63486: LD_INT 1
63488: ARRAY
63489: PUSH
63490: LD_INT 2
63492: ARRAY
63493: EQUAL
63494: AND
63495: PUSH
63496: LD_VAR 0 5
63500: PUSH
63501: LD_VAR 0 1
63505: PPUSH
63506: CALL_OW 437
63510: PUSH
63511: LD_INT 1
63513: ARRAY
63514: PUSH
63515: LD_INT 3
63517: ARRAY
63518: EQUAL
63519: AND
63520: IFFALSE 63532
// result := true else
63522: LD_ADDR_VAR 0 3
63526: PUSH
63527: LD_INT 1
63529: ST_TO_ADDR
63530: GO 63540
// result := false ;
63532: LD_ADDR_VAR 0 3
63536: PUSH
63537: LD_INT 0
63539: ST_TO_ADDR
// end else
63540: GO 63550
// result := false ;
63542: LD_ADDR_VAR 0 3
63546: PUSH
63547: LD_INT 0
63549: ST_TO_ADDR
// end ;
63550: LD_VAR 0 3
63554: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63555: LD_INT 0
63557: PPUSH
63558: PPUSH
63559: PPUSH
63560: PPUSH
// if not unit or not area then
63561: LD_VAR 0 1
63565: NOT
63566: PUSH
63567: LD_VAR 0 2
63571: NOT
63572: OR
63573: IFFALSE 63577
// exit ;
63575: GO 63741
// tmp := AreaToList ( area , i ) ;
63577: LD_ADDR_VAR 0 6
63581: PUSH
63582: LD_VAR 0 2
63586: PPUSH
63587: LD_VAR 0 5
63591: PPUSH
63592: CALL_OW 517
63596: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63597: LD_ADDR_VAR 0 5
63601: PUSH
63602: DOUBLE
63603: LD_INT 1
63605: DEC
63606: ST_TO_ADDR
63607: LD_VAR 0 6
63611: PUSH
63612: LD_INT 1
63614: ARRAY
63615: PUSH
63616: FOR_TO
63617: IFFALSE 63739
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63619: LD_ADDR_VAR 0 7
63623: PUSH
63624: LD_VAR 0 6
63628: PUSH
63629: LD_INT 1
63631: ARRAY
63632: PUSH
63633: LD_VAR 0 5
63637: ARRAY
63638: PUSH
63639: LD_VAR 0 6
63643: PUSH
63644: LD_INT 2
63646: ARRAY
63647: PUSH
63648: LD_VAR 0 5
63652: ARRAY
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63658: LD_VAR 0 7
63662: PUSH
63663: LD_INT 1
63665: ARRAY
63666: PPUSH
63667: LD_VAR 0 7
63671: PUSH
63672: LD_INT 2
63674: ARRAY
63675: PPUSH
63676: CALL_OW 428
63680: PUSH
63681: LD_INT 0
63683: EQUAL
63684: IFFALSE 63737
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63686: LD_VAR 0 1
63690: PPUSH
63691: LD_VAR 0 7
63695: PUSH
63696: LD_INT 1
63698: ARRAY
63699: PPUSH
63700: LD_VAR 0 7
63704: PUSH
63705: LD_INT 2
63707: ARRAY
63708: PPUSH
63709: LD_VAR 0 3
63713: PPUSH
63714: CALL_OW 48
// result := IsPlaced ( unit ) ;
63718: LD_ADDR_VAR 0 4
63722: PUSH
63723: LD_VAR 0 1
63727: PPUSH
63728: CALL_OW 305
63732: ST_TO_ADDR
// exit ;
63733: POP
63734: POP
63735: GO 63741
// end ; end ;
63737: GO 63616
63739: POP
63740: POP
// end ;
63741: LD_VAR 0 4
63745: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63746: LD_INT 0
63748: PPUSH
63749: PPUSH
63750: PPUSH
// if not side or side > 8 then
63751: LD_VAR 0 1
63755: NOT
63756: PUSH
63757: LD_VAR 0 1
63761: PUSH
63762: LD_INT 8
63764: GREATER
63765: OR
63766: IFFALSE 63770
// exit ;
63768: GO 63957
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63770: LD_ADDR_VAR 0 4
63774: PUSH
63775: LD_INT 22
63777: PUSH
63778: LD_VAR 0 1
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 21
63789: PUSH
63790: LD_INT 3
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PPUSH
63801: CALL_OW 69
63805: ST_TO_ADDR
// if not tmp then
63806: LD_VAR 0 4
63810: NOT
63811: IFFALSE 63815
// exit ;
63813: GO 63957
// enable_addtolog := true ;
63815: LD_ADDR_OWVAR 81
63819: PUSH
63820: LD_INT 1
63822: ST_TO_ADDR
// AddToLog ( [ ) ;
63823: LD_STRING [
63825: PPUSH
63826: CALL_OW 561
// for i in tmp do
63830: LD_ADDR_VAR 0 3
63834: PUSH
63835: LD_VAR 0 4
63839: PUSH
63840: FOR_IN
63841: IFFALSE 63948
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63843: LD_STRING [
63845: PUSH
63846: LD_VAR 0 3
63850: PPUSH
63851: CALL_OW 266
63855: STR
63856: PUSH
63857: LD_STRING , 
63859: STR
63860: PUSH
63861: LD_VAR 0 3
63865: PPUSH
63866: CALL_OW 250
63870: STR
63871: PUSH
63872: LD_STRING , 
63874: STR
63875: PUSH
63876: LD_VAR 0 3
63880: PPUSH
63881: CALL_OW 251
63885: STR
63886: PUSH
63887: LD_STRING , 
63889: STR
63890: PUSH
63891: LD_VAR 0 3
63895: PPUSH
63896: CALL_OW 254
63900: STR
63901: PUSH
63902: LD_STRING , 
63904: STR
63905: PUSH
63906: LD_VAR 0 3
63910: PPUSH
63911: LD_INT 1
63913: PPUSH
63914: CALL_OW 268
63918: STR
63919: PUSH
63920: LD_STRING , 
63922: STR
63923: PUSH
63924: LD_VAR 0 3
63928: PPUSH
63929: LD_INT 2
63931: PPUSH
63932: CALL_OW 268
63936: STR
63937: PUSH
63938: LD_STRING ],
63940: STR
63941: PPUSH
63942: CALL_OW 561
// end ;
63946: GO 63840
63948: POP
63949: POP
// AddToLog ( ]; ) ;
63950: LD_STRING ];
63952: PPUSH
63953: CALL_OW 561
// end ;
63957: LD_VAR 0 2
63961: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63962: LD_INT 0
63964: PPUSH
63965: PPUSH
63966: PPUSH
63967: PPUSH
63968: PPUSH
// if not area or not rate or not max then
63969: LD_VAR 0 1
63973: NOT
63974: PUSH
63975: LD_VAR 0 2
63979: NOT
63980: OR
63981: PUSH
63982: LD_VAR 0 4
63986: NOT
63987: OR
63988: IFFALSE 63992
// exit ;
63990: GO 64184
// while 1 do
63992: LD_INT 1
63994: IFFALSE 64184
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63996: LD_ADDR_VAR 0 9
64000: PUSH
64001: LD_VAR 0 1
64005: PPUSH
64006: LD_INT 1
64008: PPUSH
64009: CALL_OW 287
64013: PUSH
64014: LD_INT 10
64016: MUL
64017: ST_TO_ADDR
// r := rate / 10 ;
64018: LD_ADDR_VAR 0 7
64022: PUSH
64023: LD_VAR 0 2
64027: PUSH
64028: LD_INT 10
64030: DIVREAL
64031: ST_TO_ADDR
// time := 1 1$00 ;
64032: LD_ADDR_VAR 0 8
64036: PUSH
64037: LD_INT 2100
64039: ST_TO_ADDR
// if amount < min then
64040: LD_VAR 0 9
64044: PUSH
64045: LD_VAR 0 3
64049: LESS
64050: IFFALSE 64068
// r := r * 2 else
64052: LD_ADDR_VAR 0 7
64056: PUSH
64057: LD_VAR 0 7
64061: PUSH
64062: LD_INT 2
64064: MUL
64065: ST_TO_ADDR
64066: GO 64094
// if amount > max then
64068: LD_VAR 0 9
64072: PUSH
64073: LD_VAR 0 4
64077: GREATER
64078: IFFALSE 64094
// r := r / 2 ;
64080: LD_ADDR_VAR 0 7
64084: PUSH
64085: LD_VAR 0 7
64089: PUSH
64090: LD_INT 2
64092: DIVREAL
64093: ST_TO_ADDR
// time := time / r ;
64094: LD_ADDR_VAR 0 8
64098: PUSH
64099: LD_VAR 0 8
64103: PUSH
64104: LD_VAR 0 7
64108: DIVREAL
64109: ST_TO_ADDR
// if time < 0 then
64110: LD_VAR 0 8
64114: PUSH
64115: LD_INT 0
64117: LESS
64118: IFFALSE 64135
// time := time * - 1 ;
64120: LD_ADDR_VAR 0 8
64124: PUSH
64125: LD_VAR 0 8
64129: PUSH
64130: LD_INT 1
64132: NEG
64133: MUL
64134: ST_TO_ADDR
// wait ( time ) ;
64135: LD_VAR 0 8
64139: PPUSH
64140: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64144: LD_INT 35
64146: PPUSH
64147: LD_INT 875
64149: PPUSH
64150: CALL_OW 12
64154: PPUSH
64155: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64159: LD_INT 1
64161: PPUSH
64162: LD_INT 5
64164: PPUSH
64165: CALL_OW 12
64169: PPUSH
64170: LD_VAR 0 1
64174: PPUSH
64175: LD_INT 1
64177: PPUSH
64178: CALL_OW 55
// end ;
64182: GO 63992
// end ;
64184: LD_VAR 0 5
64188: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64189: LD_INT 0
64191: PPUSH
64192: PPUSH
64193: PPUSH
64194: PPUSH
64195: PPUSH
64196: PPUSH
64197: PPUSH
64198: PPUSH
// if not turrets or not factories then
64199: LD_VAR 0 1
64203: NOT
64204: PUSH
64205: LD_VAR 0 2
64209: NOT
64210: OR
64211: IFFALSE 64215
// exit ;
64213: GO 64522
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64215: LD_ADDR_VAR 0 10
64219: PUSH
64220: LD_INT 5
64222: PUSH
64223: LD_INT 6
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 2
64232: PUSH
64233: LD_INT 4
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 3
64242: PUSH
64243: LD_INT 5
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 24
64257: PUSH
64258: LD_INT 25
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 23
64267: PUSH
64268: LD_INT 27
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 42
64281: PUSH
64282: LD_INT 43
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 44
64291: PUSH
64292: LD_INT 46
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 45
64301: PUSH
64302: LD_INT 47
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: LIST
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: LIST
64318: ST_TO_ADDR
// result := [ ] ;
64319: LD_ADDR_VAR 0 3
64323: PUSH
64324: EMPTY
64325: ST_TO_ADDR
// for i in turrets do
64326: LD_ADDR_VAR 0 4
64330: PUSH
64331: LD_VAR 0 1
64335: PUSH
64336: FOR_IN
64337: IFFALSE 64520
// begin nat := GetNation ( i ) ;
64339: LD_ADDR_VAR 0 7
64343: PUSH
64344: LD_VAR 0 4
64348: PPUSH
64349: CALL_OW 248
64353: ST_TO_ADDR
// weapon := 0 ;
64354: LD_ADDR_VAR 0 8
64358: PUSH
64359: LD_INT 0
64361: ST_TO_ADDR
// if not nat then
64362: LD_VAR 0 7
64366: NOT
64367: IFFALSE 64371
// continue ;
64369: GO 64336
// for j in list [ nat ] do
64371: LD_ADDR_VAR 0 5
64375: PUSH
64376: LD_VAR 0 10
64380: PUSH
64381: LD_VAR 0 7
64385: ARRAY
64386: PUSH
64387: FOR_IN
64388: IFFALSE 64429
// if GetBWeapon ( i ) = j [ 1 ] then
64390: LD_VAR 0 4
64394: PPUSH
64395: CALL_OW 269
64399: PUSH
64400: LD_VAR 0 5
64404: PUSH
64405: LD_INT 1
64407: ARRAY
64408: EQUAL
64409: IFFALSE 64427
// begin weapon := j [ 2 ] ;
64411: LD_ADDR_VAR 0 8
64415: PUSH
64416: LD_VAR 0 5
64420: PUSH
64421: LD_INT 2
64423: ARRAY
64424: ST_TO_ADDR
// break ;
64425: GO 64429
// end ;
64427: GO 64387
64429: POP
64430: POP
// if not weapon then
64431: LD_VAR 0 8
64435: NOT
64436: IFFALSE 64440
// continue ;
64438: GO 64336
// for k in factories do
64440: LD_ADDR_VAR 0 6
64444: PUSH
64445: LD_VAR 0 2
64449: PUSH
64450: FOR_IN
64451: IFFALSE 64516
// begin weapons := AvailableWeaponList ( k ) ;
64453: LD_ADDR_VAR 0 9
64457: PUSH
64458: LD_VAR 0 6
64462: PPUSH
64463: CALL_OW 478
64467: ST_TO_ADDR
// if not weapons then
64468: LD_VAR 0 9
64472: NOT
64473: IFFALSE 64477
// continue ;
64475: GO 64450
// if weapon in weapons then
64477: LD_VAR 0 8
64481: PUSH
64482: LD_VAR 0 9
64486: IN
64487: IFFALSE 64514
// begin result := [ i , weapon ] ;
64489: LD_ADDR_VAR 0 3
64493: PUSH
64494: LD_VAR 0 4
64498: PUSH
64499: LD_VAR 0 8
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: ST_TO_ADDR
// exit ;
64508: POP
64509: POP
64510: POP
64511: POP
64512: GO 64522
// end ; end ;
64514: GO 64450
64516: POP
64517: POP
// end ;
64518: GO 64336
64520: POP
64521: POP
// end ;
64522: LD_VAR 0 3
64526: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64527: LD_INT 0
64529: PPUSH
// if not side or side > 8 then
64530: LD_VAR 0 3
64534: NOT
64535: PUSH
64536: LD_VAR 0 3
64540: PUSH
64541: LD_INT 8
64543: GREATER
64544: OR
64545: IFFALSE 64549
// exit ;
64547: GO 64608
// if not range then
64549: LD_VAR 0 4
64553: NOT
64554: IFFALSE 64565
// range := - 12 ;
64556: LD_ADDR_VAR 0 4
64560: PUSH
64561: LD_INT 12
64563: NEG
64564: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64565: LD_VAR 0 1
64569: PPUSH
64570: LD_VAR 0 2
64574: PPUSH
64575: LD_VAR 0 3
64579: PPUSH
64580: LD_VAR 0 4
64584: PPUSH
64585: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64589: LD_VAR 0 1
64593: PPUSH
64594: LD_VAR 0 2
64598: PPUSH
64599: LD_VAR 0 3
64603: PPUSH
64604: CALL_OW 331
// end ;
64608: LD_VAR 0 5
64612: RET
// export function Video ( mode ) ; begin
64613: LD_INT 0
64615: PPUSH
// ingame_video = mode ;
64616: LD_ADDR_OWVAR 52
64620: PUSH
64621: LD_VAR 0 1
64625: ST_TO_ADDR
// interface_hidden = mode ;
64626: LD_ADDR_OWVAR 54
64630: PUSH
64631: LD_VAR 0 1
64635: ST_TO_ADDR
// end ;
64636: LD_VAR 0 2
64640: RET
// export function Join ( array , element ) ; begin
64641: LD_INT 0
64643: PPUSH
// result := array ^ element ;
64644: LD_ADDR_VAR 0 3
64648: PUSH
64649: LD_VAR 0 1
64653: PUSH
64654: LD_VAR 0 2
64658: ADD
64659: ST_TO_ADDR
// end ;
64660: LD_VAR 0 3
64664: RET
// export function JoinUnion ( array , element ) ; begin
64665: LD_INT 0
64667: PPUSH
// result := array union element ;
64668: LD_ADDR_VAR 0 3
64672: PUSH
64673: LD_VAR 0 1
64677: PUSH
64678: LD_VAR 0 2
64682: UNION
64683: ST_TO_ADDR
// end ;
64684: LD_VAR 0 3
64688: RET
// export function GetBehemoths ( side ) ; begin
64689: LD_INT 0
64691: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64692: LD_ADDR_VAR 0 2
64696: PUSH
64697: LD_INT 22
64699: PUSH
64700: LD_VAR 0 1
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 31
64711: PUSH
64712: LD_INT 25
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PPUSH
64723: CALL_OW 69
64727: ST_TO_ADDR
// end ;
64728: LD_VAR 0 2
64732: RET
// export function Shuffle ( array ) ; var i , index ; begin
64733: LD_INT 0
64735: PPUSH
64736: PPUSH
64737: PPUSH
// result := [ ] ;
64738: LD_ADDR_VAR 0 2
64742: PUSH
64743: EMPTY
64744: ST_TO_ADDR
// if not array then
64745: LD_VAR 0 1
64749: NOT
64750: IFFALSE 64754
// exit ;
64752: GO 64853
// Randomize ;
64754: CALL_OW 10
// for i = array downto 1 do
64758: LD_ADDR_VAR 0 3
64762: PUSH
64763: DOUBLE
64764: LD_VAR 0 1
64768: INC
64769: ST_TO_ADDR
64770: LD_INT 1
64772: PUSH
64773: FOR_DOWNTO
64774: IFFALSE 64851
// begin index := rand ( 1 , array ) ;
64776: LD_ADDR_VAR 0 4
64780: PUSH
64781: LD_INT 1
64783: PPUSH
64784: LD_VAR 0 1
64788: PPUSH
64789: CALL_OW 12
64793: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64794: LD_ADDR_VAR 0 2
64798: PUSH
64799: LD_VAR 0 2
64803: PPUSH
64804: LD_VAR 0 2
64808: PUSH
64809: LD_INT 1
64811: PLUS
64812: PPUSH
64813: LD_VAR 0 1
64817: PUSH
64818: LD_VAR 0 4
64822: ARRAY
64823: PPUSH
64824: CALL_OW 2
64828: ST_TO_ADDR
// array := Delete ( array , index ) ;
64829: LD_ADDR_VAR 0 1
64833: PUSH
64834: LD_VAR 0 1
64838: PPUSH
64839: LD_VAR 0 4
64843: PPUSH
64844: CALL_OW 3
64848: ST_TO_ADDR
// end ;
64849: GO 64773
64851: POP
64852: POP
// end ;
64853: LD_VAR 0 2
64857: RET
// export function GetBaseMaterials ( base ) ; begin
64858: LD_INT 0
64860: PPUSH
// result := [ 0 , 0 , 0 ] ;
64861: LD_ADDR_VAR 0 2
64865: PUSH
64866: LD_INT 0
64868: PUSH
64869: LD_INT 0
64871: PUSH
64872: LD_INT 0
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: LIST
64879: ST_TO_ADDR
// if not base then
64880: LD_VAR 0 1
64884: NOT
64885: IFFALSE 64889
// exit ;
64887: GO 64938
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64889: LD_ADDR_VAR 0 2
64893: PUSH
64894: LD_VAR 0 1
64898: PPUSH
64899: LD_INT 1
64901: PPUSH
64902: CALL_OW 275
64906: PUSH
64907: LD_VAR 0 1
64911: PPUSH
64912: LD_INT 2
64914: PPUSH
64915: CALL_OW 275
64919: PUSH
64920: LD_VAR 0 1
64924: PPUSH
64925: LD_INT 3
64927: PPUSH
64928: CALL_OW 275
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: LIST
64937: ST_TO_ADDR
// end ;
64938: LD_VAR 0 2
64942: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64943: LD_INT 0
64945: PPUSH
64946: PPUSH
// result := array ;
64947: LD_ADDR_VAR 0 3
64951: PUSH
64952: LD_VAR 0 1
64956: ST_TO_ADDR
// if size > 0 then
64957: LD_VAR 0 2
64961: PUSH
64962: LD_INT 0
64964: GREATER
64965: IFFALSE 65011
// for i := array downto size do
64967: LD_ADDR_VAR 0 4
64971: PUSH
64972: DOUBLE
64973: LD_VAR 0 1
64977: INC
64978: ST_TO_ADDR
64979: LD_VAR 0 2
64983: PUSH
64984: FOR_DOWNTO
64985: IFFALSE 65009
// result := Delete ( result , result ) ;
64987: LD_ADDR_VAR 0 3
64991: PUSH
64992: LD_VAR 0 3
64996: PPUSH
64997: LD_VAR 0 3
65001: PPUSH
65002: CALL_OW 3
65006: ST_TO_ADDR
65007: GO 64984
65009: POP
65010: POP
// end ;
65011: LD_VAR 0 3
65015: RET
// export function ComExit ( unit ) ; var tmp ; begin
65016: LD_INT 0
65018: PPUSH
65019: PPUSH
// if not IsInUnit ( unit ) then
65020: LD_VAR 0 1
65024: PPUSH
65025: CALL_OW 310
65029: NOT
65030: IFFALSE 65034
// exit ;
65032: GO 65094
// tmp := IsInUnit ( unit ) ;
65034: LD_ADDR_VAR 0 3
65038: PUSH
65039: LD_VAR 0 1
65043: PPUSH
65044: CALL_OW 310
65048: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65049: LD_VAR 0 3
65053: PPUSH
65054: CALL_OW 247
65058: PUSH
65059: LD_INT 2
65061: EQUAL
65062: IFFALSE 65075
// ComExitVehicle ( unit ) else
65064: LD_VAR 0 1
65068: PPUSH
65069: CALL_OW 121
65073: GO 65084
// ComExitBuilding ( unit ) ;
65075: LD_VAR 0 1
65079: PPUSH
65080: CALL_OW 122
// result := tmp ;
65084: LD_ADDR_VAR 0 2
65088: PUSH
65089: LD_VAR 0 3
65093: ST_TO_ADDR
// end ;
65094: LD_VAR 0 2
65098: RET
// export function ResetHc ; begin
65099: LD_INT 0
65101: PPUSH
// InitHc ;
65102: CALL_OW 19
// hc_importance := 0 ;
65106: LD_ADDR_OWVAR 32
65110: PUSH
65111: LD_INT 0
65113: ST_TO_ADDR
// end ;
65114: LD_VAR 0 1
65118: RET
