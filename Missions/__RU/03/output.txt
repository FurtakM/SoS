// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export meetBelkovBrother ; export cratesResources , oilResources ; export vehiclesPreviousMission ; export kurinOpinion , platonovOpinion ; export vehiclesToSave ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export canDestroyBeriaBase ; export enableOmicronAI ; export kirovCanCaptureVehicles ; export endCutscene ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 324 0 0
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_MeetBelkovBrother_6
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// cratesResources = LoadVariable ( 02_BeriaResourceCrates_7 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 02_BeriaResourceCrates_7
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// oilResources = LoadVariable ( 02_BeriaResourceOil_8 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_BeriaResourceOil_8
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// vehiclesPreviousMission = LoadVariable ( 02_Vehicles_1 , 0 ) ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_STRING 02_Vehicles_1
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  88: LD_ADDR_EXP 6
  92: PUSH
  93: LD_STRING 02_PlatonovOpinion_9
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// kurinOpinion = - 1 ;
 104: LD_ADDR_EXP 5
 108: PUSH
 109: LD_INT 1
 111: NEG
 112: ST_TO_ADDR
// vehiclesToSave = [ ] ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: EMPTY
 119: ST_TO_ADDR
// scholtzeSpawned = false ;
 120: LD_ADDR_EXP 9
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// scholtzeSaved = false ;
 128: LD_ADDR_EXP 10
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// americanTroopsArriveOmicronCounter = 0 ;
 136: LD_ADDR_EXP 15
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// spawnCrates = true ;
 144: LD_ADDR_EXP 8
 148: PUSH
 149: LD_INT 1
 151: ST_TO_ADDR
// dialog_track = false ;
 152: LD_ADDR_EXP 13
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// dialog_workshop = false ;
 160: LD_ADDR_EXP 11
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// dialog_stop = false ;
 168: LD_ADDR_EXP 14
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// counterEnable = false ;
 176: LD_ADDR_EXP 90
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// extraTime = 7 7$00 ;
 184: LD_ADDR_EXP 17
 188: PUSH
 189: LD_INT 14700
 191: ST_TO_ADDR
// kurinGiveMoreTime = false ;
 192: LD_ADDR_EXP 16
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
 200: LD_ADDR_EXP 18
 204: PUSH
 205: LD_INT 4200
 207: ST_TO_ADDR
// produceOnlyForYou = false ;
 208: LD_ADDR_EXP 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// produceMoreVehicles = false ;
 216: LD_ADDR_EXP 19
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// kurinCheckVehicles = false ;
 224: LD_ADDR_EXP 21
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// omicronSurrender = false ;
 232: LD_ADDR_EXP 26
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// canExitBattlefield = true ;
 240: LD_ADDR_EXP 27
 244: PUSH
 245: LD_INT 1
 247: ST_TO_ADDR
// immortalSurvivors = false ;
 248: LD_ADDR_EXP 28
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// canDestroyBeriaBase = false ;
 256: LD_ADDR_EXP 29
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// endCutscene = false ;
 264: LD_ADDR_EXP 32
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// kirovCanCaptureVehicles = [ ] ;
 272: LD_ADDR_EXP 31
 276: PUSH
 277: EMPTY
 278: ST_TO_ADDR
// kirovFactory = 0 ;
 279: LD_ADDR_EXP 24
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// kirovCompleteFactory = false ;
 287: LD_ADDR_EXP 25
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// enableOmicronAI = true ;
 295: LD_ADDR_EXP 30
 299: PUSH
 300: LD_INT 1
 302: ST_TO_ADDR
// PrepareRussians ;
 303: CALL 1020 0 0
// PrepareAmericans ;
 307: CALL 5509 0 0
// Nef_PrepareNature ;
 311: CALL 31502 0 0
// MissionIntro ;
 315: CALL 21873 0 0
// end ; end_of_file
 319: LD_VAR 0 1
 323: RET
// export function InitMapConfig ; begin
 324: LD_INT 0
 326: PPUSH
// BaseMapConfig ;
 327: CALL 340 0 0
// MissionMapConfig ;
 331: CALL 442 0 0
// end ;
 335: LD_VAR 0 1
 339: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 340: LD_INT 0
 342: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 3 ] ;
 343: LD_ADDR_EXP 33
 347: PUSH
 348: LD_INT 8
 350: PUSH
 351: LD_INT 12
 353: PUSH
 354: LD_INT 6
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: LD_INT 3
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: LIST
 367: LIST
 368: LIST
 369: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 370: LD_ADDR_EXP 34
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 2
 380: PUSH
 381: LD_INT 2
 383: PUSH
 384: LD_INT 2
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 393: LD_ADDR_EXP 35
 397: PUSH
 398: LD_INT 5
 400: NEG
 401: PPUSH
 402: LD_INT 5
 404: PPUSH
 405: CALL_OW 12
 409: PUSH
 410: EMPTY
 411: LIST
 412: ST_TO_ADDR
// debugMode = 0 ;
 413: LD_ADDR_EXP 38
 417: PUSH
 418: LD_INT 0
 420: ST_TO_ADDR
// missionPrefix = 03_ ;
 421: LD_ADDR_EXP 36
 425: PUSH
 426: LD_STRING 03_
 428: ST_TO_ADDR
// previousMissionPrefix = 02_ ;
 429: LD_ADDR_EXP 37
 433: PUSH
 434: LD_STRING 02_
 436: ST_TO_ADDR
// end ;
 437: LD_VAR 0 1
 441: RET
// export baseUnitsToChoose , scholtzeSpawnPositions ; export timeToPrepareAttack ; export bonusResourcesCrates , bonusResourcesOil ; export enemySkillLevel ; export americanWeapons , russianWeapons ; export maxAmericanTroopsIgnore ; export animalsSafeTime ; export omicronBlockerPoints ; function MissionMapConfig ; begin
 442: LD_INT 0
 444: PPUSH
// baseUnitsToChoose = [ 7 , 6 , 6 ] [ Difficulty ] ;
 445: LD_ADDR_EXP 39
 449: PUSH
 450: LD_INT 7
 452: PUSH
 453: LD_INT 6
 455: PUSH
 456: LD_INT 6
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: LD_OWVAR 67
 468: ARRAY
 469: ST_TO_ADDR
// timeToPrepareAttack = [ 40 40$0 , 35 35$0 , 30 30$0 ] [ Difficulty ] ;
 470: LD_ADDR_EXP 41
 474: PUSH
 475: LD_INT 84000
 477: PUSH
 478: LD_INT 73500
 480: PUSH
 481: LD_INT 63000
 483: PUSH
 484: EMPTY
 485: LIST
 486: LIST
 487: LIST
 488: PUSH
 489: LD_OWVAR 67
 493: ARRAY
 494: ST_TO_ADDR
// bonusResourcesCrates = [ 150 , 100 , 50 ] [ Difficulty ] ;
 495: LD_ADDR_EXP 42
 499: PUSH
 500: LD_INT 150
 502: PUSH
 503: LD_INT 100
 505: PUSH
 506: LD_INT 50
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: LIST
 513: PUSH
 514: LD_OWVAR 67
 518: ARRAY
 519: ST_TO_ADDR
// bonusResourcesOil = [ 100 , 50 , 0 ] [ Difficulty ] ;
 520: LD_ADDR_EXP 43
 524: PUSH
 525: LD_INT 100
 527: PUSH
 528: LD_INT 50
 530: PUSH
 531: LD_INT 0
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: LIST
 538: PUSH
 539: LD_OWVAR 67
 543: ARRAY
 544: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 545: LD_ADDR_EXP 44
 549: PUSH
 550: LD_INT 1
 552: PUSH
 553: LD_INT 2
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: LD_OWVAR 67
 568: ARRAY
 569: ST_TO_ADDR
// maxAmericanTroopsIgnore = [ 8 , 6 , 5 ] [ Difficulty ] ;
 570: LD_ADDR_EXP 47
 574: PUSH
 575: LD_INT 8
 577: PUSH
 578: LD_INT 6
 580: PUSH
 581: LD_INT 5
 583: PUSH
 584: EMPTY
 585: LIST
 586: LIST
 587: LIST
 588: PUSH
 589: LD_OWVAR 67
 593: ARRAY
 594: ST_TO_ADDR
// animalsSafeTime = [ 8 8$30 , 8 8$00 , 7 7$30 ] [ Difficulty ] ;
 595: LD_ADDR_EXP 48
 599: PUSH
 600: LD_INT 17850
 602: PUSH
 603: LD_INT 16800
 605: PUSH
 606: LD_INT 15750
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: LIST
 613: PUSH
 614: LD_OWVAR 67
 618: ARRAY
 619: ST_TO_ADDR
// omicronBlockerPoints = [ [ 47 , 14 ] , [ 57 , 39 ] , [ 61 , 60 ] , [ 44 , 76 ] , [ 44 , 4 ] , [ 55 , 29 ] ] ;
 620: LD_ADDR_EXP 49
 624: PUSH
 625: LD_INT 47
 627: PUSH
 628: LD_INT 14
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: PUSH
 635: LD_INT 57
 637: PUSH
 638: LD_INT 39
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: PUSH
 645: LD_INT 61
 647: PUSH
 648: LD_INT 60
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: PUSH
 655: LD_INT 44
 657: PUSH
 658: LD_INT 76
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: PUSH
 665: LD_INT 44
 667: PUSH
 668: LD_INT 4
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 55
 677: PUSH
 678: LD_INT 29
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: ST_TO_ADDR
// end ;
 693: LD_VAR 0 1
 697: RET
// every 0 0$1 trigger debugMode do var i ;
 698: LD_EXP 38
 702: IFFALSE 1017
 704: GO 706
 706: DISABLE
 707: LD_INT 0
 709: PPUSH
// begin enable ;
 710: ENABLE
// FogOff ( your_side ) ;
 711: LD_OWVAR 2
 715: PPUSH
 716: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 720: LD_ADDR_VAR 0 1
 724: PUSH
 725: LD_INT 22
 727: PUSH
 728: LD_OWVAR 2
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: LD_INT 2
 739: PUSH
 740: LD_INT 21
 742: PUSH
 743: LD_INT 1
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: PUSH
 750: LD_INT 21
 752: PUSH
 753: LD_INT 2
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: EMPTY
 761: LIST
 762: LIST
 763: LIST
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: PPUSH
 769: CALL_OW 69
 773: PUSH
 774: FOR_IN
 775: IFFALSE 791
// SetLives ( i , 1000 ) ;
 777: LD_VAR 0 1
 781: PPUSH
 782: LD_INT 1000
 784: PPUSH
 785: CALL_OW 234
 789: GO 774
 791: POP
 792: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 793: LD_ADDR_VAR 0 1
 797: PUSH
 798: LD_INT 22
 800: PUSH
 801: LD_OWVAR 2
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: PUSH
 810: LD_INT 21
 812: PUSH
 813: LD_INT 1
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PPUSH
 824: CALL_OW 69
 828: PUSH
 829: FOR_IN
 830: IFFALSE 894
// begin SetSkill ( i , skill_combat , 10 ) ;
 832: LD_VAR 0 1
 836: PPUSH
 837: LD_INT 1
 839: PPUSH
 840: LD_INT 10
 842: PPUSH
 843: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 847: LD_VAR 0 1
 851: PPUSH
 852: LD_INT 2
 854: PPUSH
 855: LD_INT 10
 857: PPUSH
 858: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 862: LD_VAR 0 1
 866: PPUSH
 867: LD_INT 3
 869: PPUSH
 870: LD_INT 10
 872: PPUSH
 873: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 877: LD_VAR 0 1
 881: PPUSH
 882: LD_INT 4
 884: PPUSH
 885: LD_INT 10
 887: PPUSH
 888: CALL_OW 237
// end ;
 892: GO 829
 894: POP
 895: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 896: LD_ADDR_VAR 0 1
 900: PUSH
 901: LD_INT 22
 903: PUSH
 904: LD_OWVAR 2
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 2
 915: PUSH
 916: LD_INT 30
 918: PUSH
 919: LD_INT 0
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: PUSH
 926: LD_INT 30
 928: PUSH
 929: LD_INT 1
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: LIST
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: PPUSH
 945: CALL_OW 69
 949: PUSH
 950: FOR_IN
 951: IFFALSE 1015
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 953: LD_VAR 0 1
 957: PPUSH
 958: CALL_OW 274
 962: PPUSH
 963: LD_INT 1
 965: PPUSH
 966: LD_INT 9999
 968: PPUSH
 969: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 973: LD_VAR 0 1
 977: PPUSH
 978: CALL_OW 274
 982: PPUSH
 983: LD_INT 2
 985: PPUSH
 986: LD_INT 9999
 988: PPUSH
 989: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 993: LD_VAR 0 1
 997: PPUSH
 998: CALL_OW 274
1002: PPUSH
1003: LD_INT 3
1005: PPUSH
1006: LD_INT 9999
1008: PPUSH
1009: CALL_OW 277
// end ;
1013: GO 950
1015: POP
1016: POP
// end ; end_of_file
1017: PPOPN 1
1019: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 ; export Scholtze ; export other_survivors ; export playerVehicles ; export otherBeriaUnits , beriaBase , beriaDepot ; export Kurin , Popov , BelkovDialog ; export ruScout ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot ; export ru2_bar1 , ru2_bar2 ; export kirovEng ; export kirovBunkersToMountWeapon , kirovBunkersToOccupy ; export kirovTransportCargo ; export kirovAttackCargo , kirovAttackVehicles ; export kirovBunkerCounter ; export secondBaseTeam ; export survivorsArabianAttack ; export survivorsToSpawn ; export neededUnitsSpawn ; export Grishko ; export function PrepareRussians ; begin
1020: LD_INT 0
1022: PPUSH
// neededUnitsSpawn = [ 0 , 0 , 0 , 0 ] ;
1023: LD_ADDR_EXP 82
1027: PUSH
1028: LD_INT 0
1030: PUSH
1031: LD_INT 0
1033: PUSH
1034: LD_INT 0
1036: PUSH
1037: LD_INT 0
1039: PUSH
1040: EMPTY
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: ST_TO_ADDR
// kirovAttackCargo = [ ] ;
1046: LD_ADDR_EXP 76
1050: PUSH
1051: EMPTY
1052: ST_TO_ADDR
// PrepareKirovBase ;
1053: CALL 2109 0 0
// PrepareHeroes ;
1057: CALL 1090 0 0
// PrepareKirovPersonel ;
1061: CALL 2874 0 0
// PrepareBeriaBase ;
1065: CALL 1511 0 0
// PrepareSecondBaseTeam ;
1069: CALL 4037 0 0
// PrepareGrishko ;
1073: CALL 3202 0 0
// PrepareOtherBuildings ;
1077: CALL 3471 0 0
// PrepareVehicles ;
1081: CALL 3275 0 0
// end ;
1085: LD_VAR 0 1
1089: RET
// function PrepareHeroes ; begin
1090: LD_INT 0
1092: PPUSH
// uc_side = 3 ;
1093: LD_ADDR_OWVAR 20
1097: PUSH
1098: LD_INT 3
1100: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true ) ;
1101: LD_ADDR_EXP 50
1105: PUSH
1106: LD_STRING Burlak
1108: PPUSH
1109: LD_INT 1
1111: PPUSH
1112: CALL 6971 0 2
1116: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true ) ;
1117: LD_ADDR_EXP 51
1121: PUSH
1122: LD_STRING Gnyevko
1124: PPUSH
1125: LD_INT 1
1127: PPUSH
1128: CALL 6971 0 2
1132: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true ) ;
1133: LD_ADDR_EXP 53
1137: PUSH
1138: LD_STRING Kovalyuk
1140: PPUSH
1141: LD_INT 1
1143: PPUSH
1144: CALL 6971 0 2
1148: ST_TO_ADDR
// Kirilenkova = PrepareUnitExt ( Kirilenkova , true ) ;
1149: LD_ADDR_EXP 52
1153: PUSH
1154: LD_STRING Kirilenkova
1156: PPUSH
1157: LD_INT 1
1159: PPUSH
1160: CALL 6971 0 2
1164: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
1165: LD_EXP 50
1169: PUSH
1170: LD_EXP 51
1174: PUSH
1175: LD_EXP 53
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: PPUSH
1185: LD_INT 3
1187: PPUSH
1188: CALL_OW 336
// SetClass ( Kirilenkova , 4 ) ;
1192: LD_EXP 52
1196: PPUSH
1197: LD_INT 4
1199: PPUSH
1200: CALL_OW 336
// uc_side = 6 ;
1204: LD_ADDR_OWVAR 20
1208: PUSH
1209: LD_INT 6
1211: ST_TO_ADDR
// if not meetBelkovBrother and TestCharacters ( 02_Belkov ) then
1212: LD_EXP 1
1216: NOT
1217: PUSH
1218: LD_STRING 02_Belkov
1220: PPUSH
1221: CALL_OW 28
1225: AND
1226: IFFALSE 1327
// begin Belkov := PrepareUnitExt ( Belkov , true ) ;
1228: LD_ADDR_EXP 54
1232: PUSH
1233: LD_STRING Belkov
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: CALL 6971 0 2
1243: ST_TO_ADDR
// if TestCharacters ( 02_Belkov2 ) then
1244: LD_STRING 02_Belkov2
1246: PPUSH
1247: CALL_OW 28
1251: IFFALSE 1290
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1253: LD_ADDR_EXP 55
1257: PUSH
1258: LD_STRING Belkov2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL 6971 0 2
1268: ST_TO_ADDR
// PlaceUnitXYR ( Belkov2 , 159 , 107 , 5 , false ) ;
1269: LD_EXP 55
1273: PPUSH
1274: LD_INT 159
1276: PPUSH
1277: LD_INT 107
1279: PPUSH
1280: LD_INT 5
1282: PPUSH
1283: LD_INT 0
1285: PPUSH
1286: CALL_OW 50
// end ; BelkovDialog = Belkov ;
1290: LD_ADDR_EXP 64
1294: PUSH
1295: LD_EXP 54
1299: ST_TO_ADDR
// PlaceUnitXY ( Belkov , 165 , 110 , false ) ;
1300: LD_EXP 54
1304: PPUSH
1305: LD_INT 165
1307: PPUSH
1308: LD_INT 110
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 48
// ComHold ( Belkov ) ;
1318: LD_EXP 54
1322: PPUSH
1323: CALL_OW 140
// end ; if meetBelkovBrother and TestCharacters ( 02_Belkov2 ) then
1327: LD_EXP 1
1331: PUSH
1332: LD_STRING 02_Belkov2
1334: PPUSH
1335: CALL_OW 28
1339: AND
1340: IFFALSE 1395
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1342: LD_ADDR_EXP 55
1346: PUSH
1347: LD_STRING Belkov2
1349: PPUSH
1350: LD_INT 1
1352: PPUSH
1353: CALL 6971 0 2
1357: ST_TO_ADDR
// BelkovDialog = Belkov2 ;
1358: LD_ADDR_EXP 64
1362: PUSH
1363: LD_EXP 55
1367: ST_TO_ADDR
// PlaceUnitXY ( Belkov2 , 165 , 110 , false ) ;
1368: LD_EXP 55
1372: PPUSH
1373: LD_INT 165
1375: PPUSH
1376: LD_INT 110
1378: PPUSH
1379: LD_INT 0
1381: PPUSH
1382: CALL_OW 48
// ComHold ( Belkov2 ) ;
1386: LD_EXP 55
1390: PPUSH
1391: CALL_OW 140
// end ; SetClass ( [ Belkov , Belkov2 ] , 1 ) ;
1395: LD_EXP 54
1399: PUSH
1400: LD_EXP 55
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PPUSH
1409: LD_INT 1
1411: PPUSH
1412: CALL_OW 336
// PlaceUnitXY ( Burlak , 164 , 108 , false ) ;
1416: LD_EXP 50
1420: PPUSH
1421: LD_INT 164
1423: PPUSH
1424: LD_INT 108
1426: PPUSH
1427: LD_INT 0
1429: PPUSH
1430: CALL_OW 48
// ComHold ( Burlak ) ;
1434: LD_EXP 50
1438: PPUSH
1439: CALL_OW 140
// PlaceUnitXYR ( Gnyevko , 159 , 107 , 5 , false ) ;
1443: LD_EXP 51
1447: PPUSH
1448: LD_INT 159
1450: PPUSH
1451: LD_INT 107
1453: PPUSH
1454: LD_INT 5
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 50
// PlaceUnitXYR ( Kovalyuk , 159 , 107 , 5 , false ) ;
1464: LD_EXP 53
1468: PPUSH
1469: LD_INT 159
1471: PPUSH
1472: LD_INT 107
1474: PPUSH
1475: LD_INT 5
1477: PPUSH
1478: LD_INT 0
1480: PPUSH
1481: CALL_OW 50
// PlaceUnitXYR ( Kirilenkova , 159 , 107 , 5 , false ) ;
1485: LD_EXP 52
1489: PPUSH
1490: LD_INT 159
1492: PPUSH
1493: LD_INT 107
1495: PPUSH
1496: LD_INT 5
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 50
// end ;
1506: LD_VAR 0 1
1510: RET
// function PrepareBeriaBase ; var i , bonusResources ; begin
1511: LD_INT 0
1513: PPUSH
1514: PPUSH
1515: PPUSH
// beriaBase = LoadVariable ( 02_BeriaBase_2 , [ ] ) ;
1516: LD_ADDR_EXP 60
1520: PUSH
1521: LD_STRING 02_BeriaBase_2
1523: PPUSH
1524: EMPTY
1525: PPUSH
1526: CALL_OW 30
1530: ST_TO_ADDR
// otherBeriaUnits = CreateCharacterSet ( 02_other_beria ) ;
1531: LD_ADDR_EXP 59
1535: PUSH
1536: LD_STRING 02_other_beria
1538: PPUSH
1539: CALL_OW 31
1543: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 02_other_survivors ) ;
1544: LD_ADDR_EXP 57
1548: PUSH
1549: LD_STRING 02_other_survivors
1551: PPUSH
1552: CALL_OW 31
1556: ST_TO_ADDR
// uc_side = 3 ;
1557: LD_ADDR_OWVAR 20
1561: PUSH
1562: LD_INT 3
1564: ST_TO_ADDR
// uc_nation = 3 ;
1565: LD_ADDR_OWVAR 21
1569: PUSH
1570: LD_INT 3
1572: ST_TO_ADDR
// for i := 1 to beriaBase do
1573: LD_ADDR_VAR 0 2
1577: PUSH
1578: DOUBLE
1579: LD_INT 1
1581: DEC
1582: ST_TO_ADDR
1583: LD_EXP 60
1587: PUSH
1588: FOR_TO
1589: IFFALSE 1842
// begin bc_type = beriaBase [ i ] [ 1 ] ;
1591: LD_ADDR_OWVAR 42
1595: PUSH
1596: LD_EXP 60
1600: PUSH
1601: LD_VAR 0 2
1605: ARRAY
1606: PUSH
1607: LD_INT 1
1609: ARRAY
1610: ST_TO_ADDR
// bc_level = beriaBase [ i ] [ 5 ] ;
1611: LD_ADDR_OWVAR 43
1615: PUSH
1616: LD_EXP 60
1620: PUSH
1621: LD_VAR 0 2
1625: ARRAY
1626: PUSH
1627: LD_INT 5
1629: ARRAY
1630: ST_TO_ADDR
// if bc_type = b_lab then
1631: LD_OWVAR 42
1635: PUSH
1636: LD_INT 6
1638: EQUAL
1639: IFFALSE 1657
// begin bc_kind1 = b_lab_basic ;
1641: LD_ADDR_OWVAR 44
1645: PUSH
1646: LD_INT 9
1648: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
1649: LD_ADDR_OWVAR 45
1653: PUSH
1654: LD_INT 9
1656: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
1657: LD_OWVAR 42
1661: PUSH
1662: LD_INT 7
1664: EQUAL
1665: PUSH
1666: LD_OWVAR 42
1670: PUSH
1671: LD_INT 8
1673: EQUAL
1674: OR
1675: IFFALSE 1791
// begin if beriaBase [ i ] [ 7 ] then
1677: LD_EXP 60
1681: PUSH
1682: LD_VAR 0 2
1686: ARRAY
1687: PUSH
1688: LD_INT 7
1690: ARRAY
1691: IFFALSE 1713
// bc_kind1 = beriaBase [ i ] [ 7 ] ;
1693: LD_ADDR_OWVAR 44
1697: PUSH
1698: LD_EXP 60
1702: PUSH
1703: LD_VAR 0 2
1707: ARRAY
1708: PUSH
1709: LD_INT 7
1711: ARRAY
1712: ST_TO_ADDR
// if beriaBase [ i ] [ 8 ] then
1713: LD_EXP 60
1717: PUSH
1718: LD_VAR 0 2
1722: ARRAY
1723: PUSH
1724: LD_INT 8
1726: ARRAY
1727: IFFALSE 1749
// bc_kind2 = beriaBase [ i ] [ 8 ] ;
1729: LD_ADDR_OWVAR 45
1733: PUSH
1734: LD_EXP 60
1738: PUSH
1739: LD_VAR 0 2
1743: ARRAY
1744: PUSH
1745: LD_INT 8
1747: ARRAY
1748: ST_TO_ADDR
// if not beriaBase [ i ] [ 7 ] and not beriaBase [ i ] [ 8 ] then
1749: LD_EXP 60
1753: PUSH
1754: LD_VAR 0 2
1758: ARRAY
1759: PUSH
1760: LD_INT 7
1762: ARRAY
1763: NOT
1764: PUSH
1765: LD_EXP 60
1769: PUSH
1770: LD_VAR 0 2
1774: ARRAY
1775: PUSH
1776: LD_INT 8
1778: ARRAY
1779: NOT
1780: AND
1781: IFFALSE 1791
// bc_type := b_lab ;
1783: LD_ADDR_OWVAR 42
1787: PUSH
1788: LD_INT 6
1790: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 2 ] , beriaBase [ i ] [ 3 ] , beriaBase [ i ] [ 4 ] ) ;
1791: LD_EXP 60
1795: PUSH
1796: LD_VAR 0 2
1800: ARRAY
1801: PUSH
1802: LD_INT 2
1804: ARRAY
1805: PPUSH
1806: LD_EXP 60
1810: PUSH
1811: LD_VAR 0 2
1815: ARRAY
1816: PUSH
1817: LD_INT 3
1819: ARRAY
1820: PPUSH
1821: LD_EXP 60
1825: PUSH
1826: LD_VAR 0 2
1830: ARRAY
1831: PUSH
1832: LD_INT 4
1834: ARRAY
1835: PPUSH
1836: CALL_OW 47
// end ;
1840: GO 1588
1842: POP
1843: POP
// beriaDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1844: LD_ADDR_EXP 61
1848: PUSH
1849: LD_INT 22
1851: PUSH
1852: LD_INT 3
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PUSH
1859: LD_INT 30
1861: PUSH
1862: LD_INT 0
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: PPUSH
1873: CALL_OW 69
1877: PUSH
1878: LD_INT 1
1880: ARRAY
1881: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1882: LD_EXP 61
1886: PPUSH
1887: LD_STRING beria
1889: PPUSH
1890: CALL_OW 500
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , cratesResources ) ;
1894: LD_EXP 61
1898: PPUSH
1899: CALL_OW 274
1903: PPUSH
1904: LD_INT 1
1906: PPUSH
1907: LD_EXP 2
1911: PPUSH
1912: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , oilResources ) ;
1916: LD_EXP 61
1920: PPUSH
1921: CALL_OW 274
1925: PPUSH
1926: LD_INT 2
1928: PPUSH
1929: LD_EXP 3
1933: PPUSH
1934: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesCrates ) ;
1938: LD_EXP 61
1942: PPUSH
1943: CALL_OW 274
1947: PPUSH
1948: LD_INT 1
1950: PPUSH
1951: LD_EXP 61
1955: PPUSH
1956: CALL_OW 274
1960: PPUSH
1961: LD_INT 2
1963: PPUSH
1964: CALL_OW 275
1968: PUSH
1969: LD_EXP 42
1973: PLUS
1974: PPUSH
1975: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesOil ) ;
1979: LD_EXP 61
1983: PPUSH
1984: CALL_OW 274
1988: PPUSH
1989: LD_INT 2
1991: PPUSH
1992: LD_EXP 61
1996: PPUSH
1997: CALL_OW 274
2001: PPUSH
2002: LD_INT 2
2004: PPUSH
2005: CALL_OW 275
2009: PUSH
2010: LD_EXP 43
2014: PLUS
2015: PPUSH
2016: CALL_OW 277
// uc_side = 6 ;
2020: LD_ADDR_OWVAR 20
2024: PUSH
2025: LD_INT 6
2027: ST_TO_ADDR
// for i in otherBeriaUnits do
2028: LD_ADDR_VAR 0 2
2032: PUSH
2033: LD_EXP 59
2037: PUSH
2038: FOR_IN
2039: IFFALSE 2064
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
2041: LD_VAR 0 2
2045: PPUSH
2046: LD_INT 159
2048: PPUSH
2049: LD_INT 107
2051: PPUSH
2052: LD_INT 10
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 50
2062: GO 2038
2064: POP
2065: POP
// for i in other_survivors do
2066: LD_ADDR_VAR 0 2
2070: PUSH
2071: LD_EXP 57
2075: PUSH
2076: FOR_IN
2077: IFFALSE 2102
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
2079: LD_VAR 0 2
2083: PPUSH
2084: LD_INT 159
2086: PPUSH
2087: LD_INT 107
2089: PPUSH
2090: LD_INT 10
2092: PPUSH
2093: LD_INT 0
2095: PPUSH
2096: CALL_OW 50
2100: GO 2076
2102: POP
2103: POP
// end ;
2104: LD_VAR 0 1
2108: RET
// function PrepareKirovBase ; var i , tmp , building ; begin
2109: LD_INT 0
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
// kirovBase = LoadVariable ( 02_KirovBase_3 , [ ] ) ;
2115: LD_ADDR_EXP 67
2119: PUSH
2120: LD_STRING 02_KirovBase_3
2122: PPUSH
2123: EMPTY
2124: PPUSH
2125: CALL_OW 30
2129: ST_TO_ADDR
// otherKirovUnits = CreateCharacterSet ( 02_other_kirov ) ;
2130: LD_ADDR_EXP 66
2134: PUSH
2135: LD_STRING 02_other_kirov
2137: PPUSH
2138: CALL_OW 31
2142: ST_TO_ADDR
// uc_side = 6 ;
2143: LD_ADDR_OWVAR 20
2147: PUSH
2148: LD_INT 6
2150: ST_TO_ADDR
// uc_nation = 3 ;
2151: LD_ADDR_OWVAR 21
2155: PUSH
2156: LD_INT 3
2158: ST_TO_ADDR
// Kurin = PrepareUnitExt ( Kurin , false ) ;
2159: LD_ADDR_EXP 62
2163: PUSH
2164: LD_STRING Kurin
2166: PPUSH
2167: LD_INT 0
2169: PPUSH
2170: CALL 6971 0 2
2174: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 166 , 109 , false ) ;
2175: LD_EXP 62
2179: PPUSH
2180: LD_INT 166
2182: PPUSH
2183: LD_INT 109
2185: PPUSH
2186: LD_INT 0
2188: PPUSH
2189: CALL_OW 48
// ComHold ( Kurin ) ;
2193: LD_EXP 62
2197: PPUSH
2198: CALL_OW 140
// for i := 1 to kirovBase do
2202: LD_ADDR_VAR 0 2
2206: PUSH
2207: DOUBLE
2208: LD_INT 1
2210: DEC
2211: ST_TO_ADDR
2212: LD_EXP 67
2216: PUSH
2217: FOR_TO
2218: IFFALSE 2656
// begin bc_type = kirovBase [ i ] [ 1 ] ;
2220: LD_ADDR_OWVAR 42
2224: PUSH
2225: LD_EXP 67
2229: PUSH
2230: LD_VAR 0 2
2234: ARRAY
2235: PUSH
2236: LD_INT 1
2238: ARRAY
2239: ST_TO_ADDR
// bc_level = kirovBase [ i ] [ 5 ] ;
2240: LD_ADDR_OWVAR 43
2244: PUSH
2245: LD_EXP 67
2249: PUSH
2250: LD_VAR 0 2
2254: ARRAY
2255: PUSH
2256: LD_INT 5
2258: ARRAY
2259: ST_TO_ADDR
// if bc_type = b_depot then
2260: LD_OWVAR 42
2264: PUSH
2265: LD_INT 0
2267: EQUAL
2268: IFFALSE 2278
// bc_type = b_warehouse ;
2270: LD_ADDR_OWVAR 42
2274: PUSH
2275: LD_INT 1
2277: ST_TO_ADDR
// if bc_type = b_armoury then
2278: LD_OWVAR 42
2282: PUSH
2283: LD_INT 4
2285: EQUAL
2286: IFFALSE 2296
// bc_type = b_barracks ;
2288: LD_ADDR_OWVAR 42
2292: PUSH
2293: LD_INT 5
2295: ST_TO_ADDR
// if bc_type = b_lab then
2296: LD_OWVAR 42
2300: PUSH
2301: LD_INT 6
2303: EQUAL
2304: IFFALSE 2322
// begin bc_kind1 = b_lab_weapon ;
2306: LD_ADDR_OWVAR 44
2310: PUSH
2311: LD_INT 10
2313: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2314: LD_ADDR_OWVAR 45
2318: PUSH
2319: LD_INT 9
2321: ST_TO_ADDR
// end ; if bc_type = b_workshop then
2322: LD_OWVAR 42
2326: PUSH
2327: LD_INT 2
2329: EQUAL
2330: IFFALSE 2340
// bc_type = b_factory ;
2332: LD_ADDR_OWVAR 42
2336: PUSH
2337: LD_INT 3
2339: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2340: LD_OWVAR 42
2344: PUSH
2345: LD_INT 7
2347: EQUAL
2348: PUSH
2349: LD_OWVAR 42
2353: PUSH
2354: LD_INT 8
2356: EQUAL
2357: OR
2358: IFFALSE 2474
// begin if kirovBase [ i ] [ 7 ] then
2360: LD_EXP 67
2364: PUSH
2365: LD_VAR 0 2
2369: ARRAY
2370: PUSH
2371: LD_INT 7
2373: ARRAY
2374: IFFALSE 2396
// bc_kind1 = kirovBase [ i ] [ 7 ] ;
2376: LD_ADDR_OWVAR 44
2380: PUSH
2381: LD_EXP 67
2385: PUSH
2386: LD_VAR 0 2
2390: ARRAY
2391: PUSH
2392: LD_INT 7
2394: ARRAY
2395: ST_TO_ADDR
// if kirovBase [ i ] [ 8 ] then
2396: LD_EXP 67
2400: PUSH
2401: LD_VAR 0 2
2405: ARRAY
2406: PUSH
2407: LD_INT 8
2409: ARRAY
2410: IFFALSE 2432
// bc_kind2 = kirovBase [ i ] [ 8 ] ;
2412: LD_ADDR_OWVAR 45
2416: PUSH
2417: LD_EXP 67
2421: PUSH
2422: LD_VAR 0 2
2426: ARRAY
2427: PUSH
2428: LD_INT 8
2430: ARRAY
2431: ST_TO_ADDR
// if not kirovBase [ i ] [ 7 ] and not kirovBase [ i ] [ 8 ] then
2432: LD_EXP 67
2436: PUSH
2437: LD_VAR 0 2
2441: ARRAY
2442: PUSH
2443: LD_INT 7
2445: ARRAY
2446: NOT
2447: PUSH
2448: LD_EXP 67
2452: PUSH
2453: LD_VAR 0 2
2457: ARRAY
2458: PUSH
2459: LD_INT 8
2461: ARRAY
2462: NOT
2463: AND
2464: IFFALSE 2474
// bc_type := b_lab ;
2466: LD_ADDR_OWVAR 42
2470: PUSH
2471: LD_INT 6
2473: ST_TO_ADDR
// end ; if bc_type = b_breastwork then
2474: LD_OWVAR 42
2478: PUSH
2479: LD_INT 31
2481: EQUAL
2482: IFFALSE 2506
// begin bc_type = b_bunker ;
2484: LD_ADDR_OWVAR 42
2488: PUSH
2489: LD_INT 32
2491: ST_TO_ADDR
// kirovBunkerCounter = kirovBunkerCounter + 1 ;
2492: LD_ADDR_EXP 78
2496: PUSH
2497: LD_EXP 78
2501: PUSH
2502: LD_INT 1
2504: PLUS
2505: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 2 ] , kirovBase [ i ] [ 3 ] , kirovBase [ i ] [ 4 ] ) ;
2506: LD_ADDR_VAR 0 4
2510: PUSH
2511: LD_EXP 67
2515: PUSH
2516: LD_VAR 0 2
2520: ARRAY
2521: PUSH
2522: LD_INT 2
2524: ARRAY
2525: PPUSH
2526: LD_EXP 67
2530: PUSH
2531: LD_VAR 0 2
2535: ARRAY
2536: PUSH
2537: LD_INT 3
2539: ARRAY
2540: PPUSH
2541: LD_EXP 67
2545: PUSH
2546: LD_VAR 0 2
2550: ARRAY
2551: PUSH
2552: LD_INT 4
2554: ARRAY
2555: PPUSH
2556: CALL_OW 47
2560: ST_TO_ADDR
// if tmp < 4 and bc_type = b_bunker then
2561: LD_VAR 0 3
2565: PUSH
2566: LD_INT 4
2568: LESS
2569: PUSH
2570: LD_OWVAR 42
2574: PUSH
2575: LD_INT 32
2577: EQUAL
2578: AND
2579: IFFALSE 2628
// begin PlaceWeaponTurret ( building , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
2581: LD_VAR 0 4
2585: PPUSH
2586: LD_INT 42
2588: PUSH
2589: LD_INT 43
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: PUSH
2596: LD_INT 1
2598: PPUSH
2599: LD_INT 2
2601: PPUSH
2602: CALL_OW 12
2606: ARRAY
2607: PPUSH
2608: CALL_OW 431
// tmp = tmp + 1 ;
2612: LD_ADDR_VAR 0 3
2616: PUSH
2617: LD_VAR 0 3
2621: PUSH
2622: LD_INT 1
2624: PLUS
2625: ST_TO_ADDR
// end else
2626: GO 2654
// if bc_type = b_bunker then
2628: LD_OWVAR 42
2632: PUSH
2633: LD_INT 32
2635: EQUAL
2636: IFFALSE 2654
// kirovBunkersToMountWeapon = kirovBunkersToMountWeapon ^ building ;
2638: LD_ADDR_EXP 73
2642: PUSH
2643: LD_EXP 73
2647: PUSH
2648: LD_VAR 0 4
2652: ADD
2653: ST_TO_ADDR
// end ;
2654: GO 2217
2656: POP
2657: POP
// kirovDepot = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
2658: LD_ADDR_EXP 68
2662: PUSH
2663: LD_INT 22
2665: PUSH
2666: LD_INT 6
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: PUSH
2673: LD_INT 30
2675: PUSH
2676: LD_INT 1
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PPUSH
2687: CALL_OW 69
2691: PUSH
2692: LD_INT 1
2694: ARRAY
2695: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
2696: LD_EXP 68
2700: PPUSH
2701: LD_STRING kirov
2703: PPUSH
2704: CALL_OW 500
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 5000 ) ;
2708: LD_EXP 68
2712: PPUSH
2713: CALL_OW 274
2717: PPUSH
2718: LD_INT 1
2720: PPUSH
2721: LD_INT 5000
2723: PPUSH
2724: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 2000 ) ;
2728: LD_EXP 68
2732: PPUSH
2733: CALL_OW 274
2737: PPUSH
2738: LD_INT 2
2740: PPUSH
2741: LD_INT 2000
2743: PPUSH
2744: CALL_OW 277
// ru2_bar1 = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) , 145 , 102 ) ;
2748: LD_ADDR_EXP 70
2752: PUSH
2753: LD_INT 22
2755: PUSH
2756: LD_INT 6
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: LD_INT 21
2765: PUSH
2766: LD_INT 3
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: PUSH
2773: LD_INT 30
2775: PUSH
2776: LD_INT 5
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: LIST
2787: PPUSH
2788: CALL_OW 69
2792: PPUSH
2793: LD_INT 145
2795: PPUSH
2796: LD_INT 102
2798: PPUSH
2799: CALL_OW 73
2803: ST_TO_ADDR
// ru2_bar2 = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) diff ru2_bar1 ;
2804: LD_ADDR_EXP 71
2808: PUSH
2809: LD_INT 22
2811: PUSH
2812: LD_INT 6
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: PUSH
2819: LD_INT 21
2821: PUSH
2822: LD_INT 3
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: LD_INT 30
2831: PUSH
2832: LD_INT 5
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: EMPTY
2840: LIST
2841: LIST
2842: LIST
2843: PPUSH
2844: CALL_OW 69
2848: PUSH
2849: LD_EXP 70
2853: DIFF
2854: ST_TO_ADDR
// ru2_bar2 = ru2_bar2 [ 1 ] ;
2855: LD_ADDR_EXP 71
2859: PUSH
2860: LD_EXP 71
2864: PUSH
2865: LD_INT 1
2867: ARRAY
2868: ST_TO_ADDR
// end ;
2869: LD_VAR 0 1
2873: RET
// export function PrepareKirovPersonel ; var i ; begin
2874: LD_INT 0
2876: PPUSH
2877: PPUSH
// PrepareEngineer ( false , 7 ) ;
2878: LD_INT 0
2880: PPUSH
2881: LD_INT 7
2883: PPUSH
2884: CALL_OW 382
// kirovEng = CreateHuman ;
2888: LD_ADDR_EXP 72
2892: PUSH
2893: CALL_OW 44
2897: ST_TO_ADDR
// PlaceUnitXYR ( kirovEng , 159 , 107 , 10 , false ) ;
2898: LD_EXP 72
2902: PPUSH
2903: LD_INT 159
2905: PPUSH
2906: LD_INT 107
2908: PPUSH
2909: LD_INT 10
2911: PPUSH
2912: LD_INT 0
2914: PPUSH
2915: CALL_OW 50
// Popov = PrepareUnitExt ( Popov , false ) ;
2919: LD_ADDR_EXP 63
2923: PUSH
2924: LD_STRING Popov
2926: PPUSH
2927: LD_INT 0
2929: PPUSH
2930: CALL 6971 0 2
2934: ST_TO_ADDR
// PlaceUnitArea ( Popov , PopovSpawnArea , false ) ;
2935: LD_EXP 63
2939: PPUSH
2940: LD_INT 4
2942: PPUSH
2943: LD_INT 0
2945: PPUSH
2946: CALL_OW 49
// ComTurnXY ( Popov , 98 , 36 ) ;
2950: LD_EXP 63
2954: PPUSH
2955: LD_INT 98
2957: PPUSH
2958: LD_INT 36
2960: PPUSH
2961: CALL_OW 118
// hc_name :=  ;
2965: LD_ADDR_OWVAR 26
2969: PUSH
2970: LD_STRING 
2972: ST_TO_ADDR
// hc_gallery :=  ;
2973: LD_ADDR_OWVAR 33
2977: PUSH
2978: LD_STRING 
2980: ST_TO_ADDR
// PrepareSoldier ( false , 2 ) ;
2981: LD_INT 0
2983: PPUSH
2984: LD_INT 2
2986: PPUSH
2987: CALL_OW 381
// ruScout = CreateHuman ;
2991: LD_ADDR_EXP 65
2995: PUSH
2996: CALL_OW 44
3000: ST_TO_ADDR
// PlaceUnitArea ( ruScout , RuScoutSpawnArea , false ) ;
3001: LD_EXP 65
3005: PPUSH
3006: LD_INT 3
3008: PPUSH
3009: LD_INT 0
3011: PPUSH
3012: CALL_OW 49
// ComCrawl ( ruScout ) ;
3016: LD_EXP 65
3020: PPUSH
3021: CALL_OW 137
// AddComTurnXY ( ruScout , 98 , 36 ) ;
3025: LD_EXP 65
3029: PPUSH
3030: LD_INT 98
3032: PPUSH
3033: LD_INT 36
3035: PPUSH
3036: CALL_OW 178
// uc_side = 6 ;
3040: LD_ADDR_OWVAR 20
3044: PUSH
3045: LD_INT 6
3047: ST_TO_ADDR
// for i in otherKirovUnits do
3048: LD_ADDR_VAR 0 2
3052: PUSH
3053: LD_EXP 66
3057: PUSH
3058: FOR_IN
3059: IFFALSE 3195
// begin SetSide ( i , 6 ) ;
3061: LD_VAR 0 2
3065: PPUSH
3066: LD_INT 6
3068: PPUSH
3069: CALL_OW 235
// if GetClass ( i ) = class_soldier and kirovBunkerCounter > 0 then
3073: LD_VAR 0 2
3077: PPUSH
3078: CALL_OW 257
3082: PUSH
3083: LD_INT 1
3085: EQUAL
3086: PUSH
3087: LD_EXP 78
3091: PUSH
3092: LD_INT 0
3094: GREATER
3095: AND
3096: IFFALSE 3172
// begin PlaceHumanInBunker ( i , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ kirovBunkerCounter ] ) ;
3098: LD_VAR 0 2
3102: PPUSH
3103: LD_INT 18
3105: PPUSH
3106: LD_INT 22
3108: PUSH
3109: LD_INT 6
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 21
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 30
3128: PUSH
3129: LD_INT 32
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: LIST
3140: PPUSH
3141: CALL_OW 70
3145: PUSH
3146: LD_EXP 78
3150: ARRAY
3151: PPUSH
3152: CALL 8515 0 2
// kirovBunkerCounter = kirovBunkerCounter - 1 ;
3156: LD_ADDR_EXP 78
3160: PUSH
3161: LD_EXP 78
3165: PUSH
3166: LD_INT 1
3168: MINUS
3169: ST_TO_ADDR
// end else
3170: GO 3193
// begin PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
3172: LD_VAR 0 2
3176: PPUSH
3177: LD_INT 159
3179: PPUSH
3180: LD_INT 107
3182: PPUSH
3183: LD_INT 10
3185: PPUSH
3186: LD_INT 0
3188: PPUSH
3189: CALL_OW 50
// end ; end ;
3193: GO 3058
3195: POP
3196: POP
// end ;
3197: LD_VAR 0 1
3201: RET
// export function PrepareGrishko ; var i , un , turret ; begin
3202: LD_INT 0
3204: PPUSH
3205: PPUSH
3206: PPUSH
3207: PPUSH
// uc_side = 6 ;
3208: LD_ADDR_OWVAR 20
3212: PUSH
3213: LD_INT 6
3215: ST_TO_ADDR
// uc_nation = 3 ;
3216: LD_ADDR_OWVAR 21
3220: PUSH
3221: LD_INT 3
3223: ST_TO_ADDR
// Grishko = PrepareUnitExt ( Grishko , false ) ;
3224: LD_ADDR_EXP 83
3228: PUSH
3229: LD_STRING Grishko
3231: PPUSH
3232: LD_INT 0
3234: PPUSH
3235: CALL 6971 0 2
3239: ST_TO_ADDR
// PlaceUnitXYR ( Grishko , 218 , 108 , 3 , false ) ;
3240: LD_EXP 83
3244: PPUSH
3245: LD_INT 218
3247: PPUSH
3248: LD_INT 108
3250: PPUSH
3251: LD_INT 3
3253: PPUSH
3254: LD_INT 0
3256: PPUSH
3257: CALL_OW 50
// ComHold ( Grishko ) ;
3261: LD_EXP 83
3265: PPUSH
3266: CALL_OW 140
// end ;
3270: LD_VAR 0 1
3274: RET
// export function PrepareVehicles ; var i , vehicle ; begin
3275: LD_INT 0
3277: PPUSH
3278: PPUSH
3279: PPUSH
// uc_side = 3 ;
3280: LD_ADDR_OWVAR 20
3284: PUSH
3285: LD_INT 3
3287: ST_TO_ADDR
// uc_nation = 3 ;
3288: LD_ADDR_OWVAR 21
3292: PUSH
3293: LD_INT 3
3295: ST_TO_ADDR
// for i := 1 to vehiclesPreviousMission do
3296: LD_ADDR_VAR 0 2
3300: PUSH
3301: DOUBLE
3302: LD_INT 1
3304: DEC
3305: ST_TO_ADDR
3306: LD_EXP 4
3310: PUSH
3311: FOR_TO
3312: IFFALSE 3464
// begin PrepareVehicle ( vehiclesPreviousMission [ i ] [ 1 ] , vehiclesPreviousMission [ i ] [ 2 ] , vehiclesPreviousMission [ i ] [ 3 ] , vehiclesPreviousMission [ i ] [ 4 ] , vehiclesPreviousMission [ i ] [ 5 ] ) ;
3314: LD_EXP 4
3318: PUSH
3319: LD_VAR 0 2
3323: ARRAY
3324: PUSH
3325: LD_INT 1
3327: ARRAY
3328: PPUSH
3329: LD_EXP 4
3333: PUSH
3334: LD_VAR 0 2
3338: ARRAY
3339: PUSH
3340: LD_INT 2
3342: ARRAY
3343: PPUSH
3344: LD_EXP 4
3348: PUSH
3349: LD_VAR 0 2
3353: ARRAY
3354: PUSH
3355: LD_INT 3
3357: ARRAY
3358: PPUSH
3359: LD_EXP 4
3363: PUSH
3364: LD_VAR 0 2
3368: ARRAY
3369: PUSH
3370: LD_INT 4
3372: ARRAY
3373: PPUSH
3374: LD_EXP 4
3378: PUSH
3379: LD_VAR 0 2
3383: ARRAY
3384: PUSH
3385: LD_INT 5
3387: ARRAY
3388: PPUSH
3389: CALL 37153 0 5
// vehicle = CreateVehicle ;
3393: LD_ADDR_VAR 0 3
3397: PUSH
3398: CALL_OW 45
3402: ST_TO_ADDR
// SetDir ( vehicle , rand ( 0 , 5 ) ) ;
3403: LD_VAR 0 3
3407: PPUSH
3408: LD_INT 0
3410: PPUSH
3411: LD_INT 5
3413: PPUSH
3414: CALL_OW 12
3418: PPUSH
3419: CALL_OW 233
// PlaceUnitArea ( vehicle , BeriaParkingArea , false ) ;
3423: LD_VAR 0 3
3427: PPUSH
3428: LD_INT 33
3430: PPUSH
3431: LD_INT 0
3433: PPUSH
3434: CALL_OW 49
// SetLives ( vehicle , vehiclesPreviousMission [ i ] [ 6 ] ) ;
3438: LD_VAR 0 3
3442: PPUSH
3443: LD_EXP 4
3447: PUSH
3448: LD_VAR 0 2
3452: ARRAY
3453: PUSH
3454: LD_INT 6
3456: ARRAY
3457: PPUSH
3458: CALL_OW 234
// end ;
3462: GO 3311
3464: POP
3465: POP
// end ;
3466: LD_VAR 0 1
3470: RET
// export function PrepareOtherBuildings ; var i , otherBuildings , building ; begin
3471: LD_INT 0
3473: PPUSH
3474: PPUSH
3475: PPUSH
3476: PPUSH
// otherBuildings = LoadVariable ( 02_OtherBuildings_4 , [ ] ) ;
3477: LD_ADDR_VAR 0 3
3481: PUSH
3482: LD_STRING 02_OtherBuildings_4
3484: PPUSH
3485: EMPTY
3486: PPUSH
3487: CALL_OW 30
3491: ST_TO_ADDR
// uc_side = 3 ;
3492: LD_ADDR_OWVAR 20
3496: PUSH
3497: LD_INT 3
3499: ST_TO_ADDR
// for i := 1 to otherBuildings do
3500: LD_ADDR_VAR 0 2
3504: PUSH
3505: DOUBLE
3506: LD_INT 1
3508: DEC
3509: ST_TO_ADDR
3510: LD_VAR 0 3
3514: PUSH
3515: FOR_TO
3516: IFFALSE 3777
// begin uc_nation = otherBuildings [ i ] [ 6 ] ;
3518: LD_ADDR_OWVAR 21
3522: PUSH
3523: LD_VAR 0 3
3527: PUSH
3528: LD_VAR 0 2
3532: ARRAY
3533: PUSH
3534: LD_INT 6
3536: ARRAY
3537: ST_TO_ADDR
// bc_type = otherBuildings [ i ] [ 1 ] ;
3538: LD_ADDR_OWVAR 42
3542: PUSH
3543: LD_VAR 0 3
3547: PUSH
3548: LD_VAR 0 2
3552: ARRAY
3553: PUSH
3554: LD_INT 1
3556: ARRAY
3557: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3558: LD_ADDR_OWVAR 43
3562: PUSH
3563: LD_VAR 0 3
3567: PUSH
3568: LD_VAR 0 2
3572: ARRAY
3573: PUSH
3574: LD_INT 5
3576: ARRAY
3577: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3578: LD_ADDR_VAR 0 4
3582: PUSH
3583: LD_VAR 0 3
3587: PUSH
3588: LD_VAR 0 2
3592: ARRAY
3593: PUSH
3594: LD_INT 2
3596: ARRAY
3597: PPUSH
3598: LD_VAR 0 3
3602: PUSH
3603: LD_VAR 0 2
3607: ARRAY
3608: PUSH
3609: LD_INT 3
3611: ARRAY
3612: PPUSH
3613: LD_VAR 0 3
3617: PUSH
3618: LD_VAR 0 2
3622: ARRAY
3623: PUSH
3624: LD_INT 4
3626: ARRAY
3627: PPUSH
3628: CALL_OW 47
3632: ST_TO_ADDR
// SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3633: LD_VAR 0 4
3637: PPUSH
3638: LD_VAR 0 3
3642: PUSH
3643: LD_VAR 0 2
3647: ARRAY
3648: PUSH
3649: LD_INT 7
3651: ARRAY
3652: PPUSH
3653: CALL_OW 234
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
3657: LD_VAR 0 4
3661: PPUSH
3662: CALL_OW 266
3666: PUSH
3667: LD_INT 0
3669: PUSH
3670: LD_INT 1
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: IN
3677: IFFALSE 3775
// begin SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 8 ] ) ;
3679: LD_VAR 0 4
3683: PPUSH
3684: CALL_OW 274
3688: PPUSH
3689: LD_INT 1
3691: PPUSH
3692: LD_VAR 0 3
3696: PUSH
3697: LD_VAR 0 2
3701: ARRAY
3702: PUSH
3703: LD_INT 8
3705: ARRAY
3706: PPUSH
3707: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 9 ] ) ;
3711: LD_VAR 0 4
3715: PPUSH
3716: CALL_OW 274
3720: PPUSH
3721: LD_INT 1
3723: PPUSH
3724: LD_VAR 0 3
3728: PUSH
3729: LD_VAR 0 2
3733: ARRAY
3734: PUSH
3735: LD_INT 9
3737: ARRAY
3738: PPUSH
3739: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 10 ] ) ;
3743: LD_VAR 0 4
3747: PPUSH
3748: CALL_OW 274
3752: PPUSH
3753: LD_INT 1
3755: PPUSH
3756: LD_VAR 0 3
3760: PUSH
3761: LD_VAR 0 2
3765: ARRAY
3766: PUSH
3767: LD_INT 10
3769: ARRAY
3770: PPUSH
3771: CALL_OW 277
// end ; end ;
3775: GO 3515
3777: POP
3778: POP
// otherBuildings = LoadVariable ( 02_AmericanBuildings_5 , [ ] ) ;
3779: LD_ADDR_VAR 0 3
3783: PUSH
3784: LD_STRING 02_AmericanBuildings_5
3786: PPUSH
3787: EMPTY
3788: PPUSH
3789: CALL_OW 30
3793: ST_TO_ADDR
// uc_side = 1 ;
3794: LD_ADDR_OWVAR 20
3798: PUSH
3799: LD_INT 1
3801: ST_TO_ADDR
// uc_nation = 1 ;
3802: LD_ADDR_OWVAR 21
3806: PUSH
3807: LD_INT 1
3809: ST_TO_ADDR
// for i := 1 to otherBuildings do
3810: LD_ADDR_VAR 0 2
3814: PUSH
3815: DOUBLE
3816: LD_INT 1
3818: DEC
3819: ST_TO_ADDR
3820: LD_VAR 0 3
3824: PUSH
3825: FOR_TO
3826: IFFALSE 4030
// begin bc_type = otherBuildings [ i ] [ 1 ] ;
3828: LD_ADDR_OWVAR 42
3832: PUSH
3833: LD_VAR 0 3
3837: PUSH
3838: LD_VAR 0 2
3842: ARRAY
3843: PUSH
3844: LD_INT 1
3846: ARRAY
3847: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3848: LD_ADDR_OWVAR 43
3852: PUSH
3853: LD_VAR 0 3
3857: PUSH
3858: LD_VAR 0 2
3862: ARRAY
3863: PUSH
3864: LD_INT 5
3866: ARRAY
3867: ST_TO_ADDR
// if bc_type = b_breastwork then
3868: LD_OWVAR 42
3872: PUSH
3873: LD_INT 31
3875: EQUAL
3876: IFFALSE 3949
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3878: LD_ADDR_VAR 0 4
3882: PUSH
3883: LD_VAR 0 3
3887: PUSH
3888: LD_VAR 0 2
3892: ARRAY
3893: PUSH
3894: LD_INT 2
3896: ARRAY
3897: PPUSH
3898: LD_VAR 0 3
3902: PUSH
3903: LD_VAR 0 2
3907: ARRAY
3908: PUSH
3909: LD_INT 3
3911: ARRAY
3912: PPUSH
3913: LD_VAR 0 3
3917: PUSH
3918: LD_VAR 0 2
3922: ARRAY
3923: PUSH
3924: LD_INT 4
3926: ARRAY
3927: PPUSH
3928: CALL_OW 47
3932: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , building ) ;
3933: LD_EXP 44
3937: PPUSH
3938: LD_VAR 0 4
3942: PPUSH
3943: CALL 8605 0 2
// end else
3947: GO 4004
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3949: LD_ADDR_VAR 0 4
3953: PUSH
3954: LD_VAR 0 3
3958: PUSH
3959: LD_VAR 0 2
3963: ARRAY
3964: PUSH
3965: LD_INT 2
3967: ARRAY
3968: PPUSH
3969: LD_VAR 0 3
3973: PUSH
3974: LD_VAR 0 2
3978: ARRAY
3979: PUSH
3980: LD_INT 3
3982: ARRAY
3983: PPUSH
3984: LD_VAR 0 3
3988: PUSH
3989: LD_VAR 0 2
3993: ARRAY
3994: PUSH
3995: LD_INT 4
3997: ARRAY
3998: PPUSH
3999: CALL_OW 47
4003: ST_TO_ADDR
// end ; SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
4004: LD_VAR 0 4
4008: PPUSH
4009: LD_VAR 0 3
4013: PUSH
4014: LD_VAR 0 2
4018: ARRAY
4019: PUSH
4020: LD_INT 7
4022: ARRAY
4023: PPUSH
4024: CALL_OW 234
// end ;
4028: GO 3825
4030: POP
4031: POP
// end ;
4032: LD_VAR 0 1
4036: RET
// export function PrepareSecondBaseTeam ; var i ; begin
4037: LD_INT 0
4039: PPUSH
4040: PPUSH
// secondBaseTeam = [ ] ;
4041: LD_ADDR_EXP 79
4045: PUSH
4046: EMPTY
4047: ST_TO_ADDR
// SetResourceVisibility ( 226 , 109 , 6 ) ;
4048: LD_INT 226
4050: PPUSH
4051: LD_INT 109
4053: PPUSH
4054: LD_INT 6
4056: PPUSH
4057: CALL_OW 441
// uc_side = 6 ;
4061: LD_ADDR_OWVAR 20
4065: PUSH
4066: LD_INT 6
4068: ST_TO_ADDR
// uc_nation = 3 ;
4069: LD_ADDR_OWVAR 21
4073: PUSH
4074: LD_INT 3
4076: ST_TO_ADDR
// hc_name =  ;
4077: LD_ADDR_OWVAR 26
4081: PUSH
4082: LD_STRING 
4084: ST_TO_ADDR
// hc_gallery =  ;
4085: LD_ADDR_OWVAR 33
4089: PUSH
4090: LD_STRING 
4092: ST_TO_ADDR
// for i := 1 to 3 do
4093: LD_ADDR_VAR 0 2
4097: PUSH
4098: DOUBLE
4099: LD_INT 1
4101: DEC
4102: ST_TO_ADDR
4103: LD_INT 3
4105: PUSH
4106: FOR_TO
4107: IFFALSE 4160
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4109: LD_INT 0
4111: PPUSH
4112: LD_EXP 44
4116: PPUSH
4117: CALL_OW 381
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4121: LD_ADDR_EXP 79
4125: PUSH
4126: LD_EXP 79
4130: PUSH
4131: CALL_OW 44
4135: ADD
4136: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ i ] , KirovSupportSpawnArea , false ) ;
4137: LD_EXP 79
4141: PUSH
4142: LD_VAR 0 2
4146: ARRAY
4147: PPUSH
4148: LD_INT 19
4150: PPUSH
4151: LD_INT 0
4153: PPUSH
4154: CALL_OW 49
// end ;
4158: GO 4106
4160: POP
4161: POP
// PrepareEngineer ( false , enemySkillLevel ) ;
4162: LD_INT 0
4164: PPUSH
4165: LD_EXP 44
4169: PPUSH
4170: CALL_OW 382
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4174: LD_ADDR_EXP 79
4178: PUSH
4179: LD_EXP 79
4183: PUSH
4184: CALL_OW 44
4188: ADD
4189: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 4 ] , KirovSupportSpawnArea , false ) ;
4190: LD_EXP 79
4194: PUSH
4195: LD_INT 4
4197: ARRAY
4198: PPUSH
4199: LD_INT 19
4201: PPUSH
4202: LD_INT 0
4204: PPUSH
4205: CALL_OW 49
// PrepareScientist ( false , enemySkillLevel ) ;
4209: LD_INT 0
4211: PPUSH
4212: LD_EXP 44
4216: PPUSH
4217: CALL_OW 384
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4221: LD_ADDR_EXP 79
4225: PUSH
4226: LD_EXP 79
4230: PUSH
4231: CALL_OW 44
4235: ADD
4236: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 5 ] , KirovSupportSpawnArea , false ) ;
4237: LD_EXP 79
4241: PUSH
4242: LD_INT 5
4244: ARRAY
4245: PPUSH
4246: LD_INT 19
4248: PPUSH
4249: LD_INT 0
4251: PPUSH
4252: CALL_OW 49
// ComMoveXY ( secondBaseTeam , 214 , 105 ) ;
4256: LD_EXP 79
4260: PPUSH
4261: LD_INT 214
4263: PPUSH
4264: LD_INT 105
4266: PPUSH
4267: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 222 , 115 , 0 ) ;
4271: LD_EXP 79
4275: PPUSH
4276: LD_INT 25
4278: PUSH
4279: LD_INT 2
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: PPUSH
4286: CALL_OW 72
4290: PPUSH
4291: LD_INT 0
4293: PPUSH
4294: LD_INT 222
4296: PPUSH
4297: LD_INT 115
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL_OW 205
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 224 , 107 ) ;
4307: LD_EXP 79
4311: PPUSH
4312: LD_INT 25
4314: PUSH
4315: LD_INT 2
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PPUSH
4322: CALL_OW 72
4326: PPUSH
4327: LD_INT 224
4329: PPUSH
4330: LD_INT 107
4332: PPUSH
4333: CALL_OW 177
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 228 , 110 ) ;
4337: LD_EXP 79
4341: PPUSH
4342: LD_INT 25
4344: PUSH
4345: LD_INT 2
4347: PUSH
4348: EMPTY
4349: LIST
4350: LIST
4351: PPUSH
4352: CALL_OW 72
4356: PPUSH
4357: LD_INT 228
4359: PPUSH
4360: LD_INT 110
4362: PPUSH
4363: CALL_OW 177
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_oil_mine , 226 , 109 , 3 ) ;
4367: LD_EXP 79
4371: PPUSH
4372: LD_INT 25
4374: PUSH
4375: LD_INT 2
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: PPUSH
4382: CALL_OW 72
4386: PPUSH
4387: LD_INT 29
4389: PPUSH
4390: LD_INT 226
4392: PPUSH
4393: LD_INT 109
4395: PPUSH
4396: LD_INT 3
4398: PPUSH
4399: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_armoury , 216 , 114 , 0 ) ;
4403: LD_EXP 79
4407: PPUSH
4408: LD_INT 25
4410: PUSH
4411: LD_INT 2
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PPUSH
4418: CALL_OW 72
4422: PPUSH
4423: LD_INT 4
4425: PPUSH
4426: LD_INT 216
4428: PPUSH
4429: LD_INT 114
4431: PPUSH
4432: LD_INT 0
4434: PPUSH
4435: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 215 , 103 , 3 ) ;
4439: LD_EXP 79
4443: PPUSH
4444: LD_INT 25
4446: PUSH
4447: LD_INT 2
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: PPUSH
4454: CALL_OW 72
4458: PPUSH
4459: LD_INT 31
4461: PPUSH
4462: LD_INT 215
4464: PPUSH
4465: LD_INT 103
4467: PPUSH
4468: LD_INT 3
4470: PPUSH
4471: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 227 , 116 , 5 ) ;
4475: LD_EXP 79
4479: PPUSH
4480: LD_INT 25
4482: PUSH
4483: LD_INT 2
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: PPUSH
4490: CALL_OW 72
4494: PPUSH
4495: LD_INT 31
4497: PPUSH
4498: LD_INT 227
4500: PPUSH
4501: LD_INT 116
4503: PPUSH
4504: LD_INT 5
4506: PPUSH
4507: CALL_OW 205
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 208 , 106 ) ;
4511: LD_EXP 79
4515: PPUSH
4516: LD_INT 25
4518: PUSH
4519: LD_INT 2
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: PPUSH
4526: CALL_OW 72
4530: PPUSH
4531: LD_INT 208
4533: PPUSH
4534: LD_INT 106
4536: PPUSH
4537: CALL_OW 171
// AddComTurnXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 209 , 105 ) ;
4541: LD_EXP 79
4545: PPUSH
4546: LD_INT 25
4548: PUSH
4549: LD_INT 2
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PPUSH
4556: CALL_OW 72
4560: PPUSH
4561: LD_INT 209
4563: PPUSH
4564: LD_INT 105
4566: PPUSH
4567: CALL_OW 178
// AddComMoveXY ( secondBaseTeam [ 5 ] , 209 , 105 ) ;
4571: LD_EXP 79
4575: PUSH
4576: LD_INT 5
4578: ARRAY
4579: PPUSH
4580: LD_INT 209
4582: PPUSH
4583: LD_INT 105
4585: PPUSH
4586: CALL_OW 171
// AddComTurnXY ( secondBaseTeam [ 5 ] , 208 , 106 ) ;
4590: LD_EXP 79
4594: PUSH
4595: LD_INT 5
4597: ARRAY
4598: PPUSH
4599: LD_INT 208
4601: PPUSH
4602: LD_INT 106
4604: PPUSH
4605: CALL_OW 178
// end ;
4609: LD_VAR 0 1
4613: RET
// export function SpawnKirovSupport ; var i , un ; begin
4614: LD_INT 0
4616: PPUSH
4617: PPUSH
4618: PPUSH
// uc_side = 6 ;
4619: LD_ADDR_OWVAR 20
4623: PUSH
4624: LD_INT 6
4626: ST_TO_ADDR
// uc_nation = 3 ;
4627: LD_ADDR_OWVAR 21
4631: PUSH
4632: LD_INT 3
4634: ST_TO_ADDR
// hc_name =  ;
4635: LD_ADDR_OWVAR 26
4639: PUSH
4640: LD_STRING 
4642: ST_TO_ADDR
// hc_gallery :=  ;
4643: LD_ADDR_OWVAR 33
4647: PUSH
4648: LD_STRING 
4650: ST_TO_ADDR
// for i := 1 to survivorsToSpawn do
4651: LD_ADDR_VAR 0 2
4655: PUSH
4656: DOUBLE
4657: LD_INT 1
4659: DEC
4660: ST_TO_ADDR
4661: LD_EXP 81
4665: PUSH
4666: FOR_TO
4667: IFFALSE 4755
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 2 ) ) ;
4669: LD_INT 0
4671: PPUSH
4672: LD_INT 1
4674: PPUSH
4675: LD_INT 4
4677: PPUSH
4678: CALL_OW 12
4682: PPUSH
4683: LD_INT 1
4685: PPUSH
4686: LD_INT 2
4688: PPUSH
4689: CALL_OW 12
4693: PPUSH
4694: CALL_OW 380
// un = CreateHuman ;
4698: LD_ADDR_VAR 0 3
4702: PUSH
4703: CALL_OW 44
4707: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ un ;
4708: LD_ADDR_EXP 80
4712: PUSH
4713: LD_EXP 80
4717: PUSH
4718: LD_VAR 0 3
4722: ADD
4723: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4724: LD_VAR 0 3
4728: PPUSH
4729: LD_INT 19
4731: PPUSH
4732: LD_INT 0
4734: PPUSH
4735: CALL_OW 49
// ComEnterUnit ( un , kirovDepot ) ;
4739: LD_VAR 0 3
4743: PPUSH
4744: LD_EXP 68
4748: PPUSH
4749: CALL_OW 120
// end ;
4753: GO 4666
4755: POP
4756: POP
// for i := 1 to neededUnitsSpawn [ 1 ] + 4 do
4757: LD_ADDR_VAR 0 2
4761: PUSH
4762: DOUBLE
4763: LD_INT 1
4765: DEC
4766: ST_TO_ADDR
4767: LD_EXP 82
4771: PUSH
4772: LD_INT 1
4774: ARRAY
4775: PUSH
4776: LD_INT 4
4778: PLUS
4779: PUSH
4780: FOR_TO
4781: IFFALSE 4879
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
4783: LD_INT 0
4785: PPUSH
4786: LD_INT 1
4788: PPUSH
4789: LD_INT 1
4791: PPUSH
4792: LD_INT 3
4794: PPUSH
4795: CALL_OW 12
4799: PPUSH
4800: CALL_OW 380
// un = CreateHuman ;
4804: LD_ADDR_VAR 0 3
4808: PUSH
4809: CALL_OW 44
4813: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4814: LD_VAR 0 3
4818: PPUSH
4819: LD_INT 19
4821: PPUSH
4822: LD_INT 0
4824: PPUSH
4825: CALL_OW 49
// if i > kirovBunkersToOccupy then
4829: LD_VAR 0 2
4833: PUSH
4834: LD_EXP 74
4838: GREATER
4839: IFFALSE 4857
// ComEnterUnit ( un , ru2_bar2 ) else
4841: LD_VAR 0 3
4845: PPUSH
4846: LD_EXP 71
4850: PPUSH
4851: CALL_OW 120
4855: GO 4877
// ComEnterUnit ( un , kirovBunkersToOccupy [ i ] ) ;
4857: LD_VAR 0 3
4861: PPUSH
4862: LD_EXP 74
4866: PUSH
4867: LD_VAR 0 2
4871: ARRAY
4872: PPUSH
4873: CALL_OW 120
// end ;
4877: GO 4780
4879: POP
4880: POP
// for i := 1 to neededUnitsSpawn [ 3 ] do
4881: LD_ADDR_VAR 0 2
4885: PUSH
4886: DOUBLE
4887: LD_INT 1
4889: DEC
4890: ST_TO_ADDR
4891: LD_EXP 82
4895: PUSH
4896: LD_INT 3
4898: ARRAY
4899: PUSH
4900: FOR_TO
4901: IFFALSE 5004
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
4903: LD_INT 0
4905: PPUSH
4906: LD_INT 3
4908: PPUSH
4909: LD_INT 1
4911: PPUSH
4912: LD_INT 3
4914: PPUSH
4915: CALL_OW 12
4919: PPUSH
4920: CALL_OW 380
// un = CreateHuman ;
4924: LD_ADDR_VAR 0 3
4928: PUSH
4929: CALL_OW 44
4933: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4934: LD_VAR 0 3
4938: PPUSH
4939: LD_INT 19
4941: PPUSH
4942: LD_INT 0
4944: PPUSH
4945: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
4949: LD_VAR 0 3
4953: PPUSH
4954: LD_INT 22
4956: PUSH
4957: LD_INT 6
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: LD_INT 21
4966: PUSH
4967: LD_INT 3
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: LD_INT 30
4976: PUSH
4977: LD_INT 3
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: PPUSH
4989: CALL_OW 69
4993: PUSH
4994: LD_INT 1
4996: ARRAY
4997: PPUSH
4998: CALL_OW 120
// end ;
5002: GO 4900
5004: POP
5005: POP
// for i := 1 to neededUnitsSpawn [ 4 ] + 2 do
5006: LD_ADDR_VAR 0 2
5010: PUSH
5011: DOUBLE
5012: LD_INT 1
5014: DEC
5015: ST_TO_ADDR
5016: LD_EXP 82
5020: PUSH
5021: LD_INT 4
5023: ARRAY
5024: PUSH
5025: LD_INT 2
5027: PLUS
5028: PUSH
5029: FOR_TO
5030: IFFALSE 5136
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
5032: LD_INT 0
5034: PPUSH
5035: LD_INT 4
5037: PPUSH
5038: LD_INT 1
5040: PPUSH
5041: LD_INT 3
5043: PPUSH
5044: CALL_OW 12
5048: PPUSH
5049: CALL_OW 380
// un = CreateHuman ;
5053: LD_ADDR_VAR 0 3
5057: PUSH
5058: CALL_OW 44
5062: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
5063: LD_VAR 0 3
5067: PPUSH
5068: LD_INT 19
5070: PPUSH
5071: LD_INT 0
5073: PPUSH
5074: CALL_OW 49
// ComEnterUnit ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ) ;
5078: LD_VAR 0 3
5082: PPUSH
5083: LD_INT 18
5085: PPUSH
5086: LD_INT 22
5088: PUSH
5089: LD_INT 6
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 21
5098: PUSH
5099: LD_INT 3
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: PUSH
5106: LD_INT 30
5108: PUSH
5109: LD_INT 6
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: LIST
5120: PPUSH
5121: CALL_OW 70
5125: PUSH
5126: LD_INT 1
5128: ARRAY
5129: PPUSH
5130: CALL_OW 120
// end ;
5134: GO 5029
5136: POP
5137: POP
// end ;
5138: LD_VAR 0 1
5142: RET
// export function SetSurvivorsArabianAttack ; var limit , unit ; begin
5143: LD_INT 0
5145: PPUSH
5146: PPUSH
5147: PPUSH
// survivorsArabianAttack = [ ] ;
5148: LD_ADDR_EXP 80
5152: PUSH
5153: EMPTY
5154: ST_TO_ADDR
// limit = 9 ;
5155: LD_ADDR_VAR 0 2
5159: PUSH
5160: LD_INT 9
5162: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ Popov ;
5163: LD_ADDR_EXP 80
5167: PUSH
5168: LD_EXP 80
5172: PUSH
5173: LD_EXP 63
5177: ADD
5178: ST_TO_ADDR
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 6 then
5179: LD_EXP 54
5183: PPUSH
5184: CALL_OW 302
5188: PUSH
5189: LD_EXP 54
5193: PPUSH
5194: CALL_OW 255
5198: PUSH
5199: LD_INT 6
5201: EQUAL
5202: AND
5203: IFFALSE 5235
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov ;
5205: LD_ADDR_EXP 80
5209: PUSH
5210: LD_EXP 80
5214: PUSH
5215: LD_EXP 54
5219: ADD
5220: ST_TO_ADDR
// limit = limit - 1 ;
5221: LD_ADDR_VAR 0 2
5225: PUSH
5226: LD_VAR 0 2
5230: PUSH
5231: LD_INT 1
5233: MINUS
5234: ST_TO_ADDR
// end ; if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 6 then
5235: LD_EXP 55
5239: PPUSH
5240: CALL_OW 302
5244: PUSH
5245: LD_EXP 55
5249: PPUSH
5250: CALL_OW 255
5254: PUSH
5255: LD_INT 6
5257: EQUAL
5258: AND
5259: IFFALSE 5291
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov2 ;
5261: LD_ADDR_EXP 80
5265: PUSH
5266: LD_EXP 80
5270: PUSH
5271: LD_EXP 55
5275: ADD
5276: ST_TO_ADDR
// limit = limit - 1 ;
5277: LD_ADDR_VAR 0 2
5281: PUSH
5282: LD_VAR 0 2
5286: PUSH
5287: LD_INT 1
5289: MINUS
5290: ST_TO_ADDR
// end ; for unit in other_survivors do
5291: LD_ADDR_VAR 0 3
5295: PUSH
5296: LD_EXP 57
5300: PUSH
5301: FOR_IN
5302: IFFALSE 5362
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5304: LD_VAR 0 3
5308: PPUSH
5309: CALL_OW 302
5313: PUSH
5314: LD_VAR 0 3
5318: PPUSH
5319: CALL_OW 255
5323: PUSH
5324: LD_INT 6
5326: EQUAL
5327: AND
5328: IFFALSE 5360
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5330: LD_ADDR_EXP 80
5334: PUSH
5335: LD_EXP 80
5339: PUSH
5340: LD_VAR 0 3
5344: ADD
5345: ST_TO_ADDR
// limit = limit - 1 ;
5346: LD_ADDR_VAR 0 2
5350: PUSH
5351: LD_VAR 0 2
5355: PUSH
5356: LD_INT 1
5358: MINUS
5359: ST_TO_ADDR
// end ; end ;
5360: GO 5301
5362: POP
5363: POP
// for unit in otherBeriaUnits do
5364: LD_ADDR_VAR 0 3
5368: PUSH
5369: LD_EXP 59
5373: PUSH
5374: FOR_IN
5375: IFFALSE 5435
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5377: LD_VAR 0 3
5381: PPUSH
5382: CALL_OW 302
5386: PUSH
5387: LD_VAR 0 3
5391: PPUSH
5392: CALL_OW 255
5396: PUSH
5397: LD_INT 6
5399: EQUAL
5400: AND
5401: IFFALSE 5433
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5403: LD_ADDR_EXP 80
5407: PUSH
5408: LD_EXP 80
5412: PUSH
5413: LD_VAR 0 3
5417: ADD
5418: ST_TO_ADDR
// limit = limit - 1 ;
5419: LD_ADDR_VAR 0 2
5423: PUSH
5424: LD_VAR 0 2
5428: PUSH
5429: LD_INT 1
5431: MINUS
5432: ST_TO_ADDR
// end ; end ;
5433: GO 5374
5435: POP
5436: POP
// if limit > 0 then
5437: LD_VAR 0 2
5441: PUSH
5442: LD_INT 0
5444: GREATER
5445: IFFALSE 5457
// survivorsToSpawn = limit ;
5447: LD_ADDR_EXP 81
5451: PUSH
5452: LD_VAR 0 2
5456: ST_TO_ADDR
// end ;
5457: LD_VAR 0 1
5461: RET
// export function PrepareScholtze ; begin
5462: LD_INT 0
5464: PPUSH
// uc_side = 8 ;
5465: LD_ADDR_OWVAR 20
5469: PUSH
5470: LD_INT 8
5472: ST_TO_ADDR
// Scholtze = PrepareUnitExt ( Scholtze , false ) ;
5473: LD_ADDR_EXP 56
5477: PUSH
5478: LD_STRING Scholtze
5480: PPUSH
5481: LD_INT 0
5483: PPUSH
5484: CALL 6971 0 2
5488: ST_TO_ADDR
// PlaceUnitArea ( Scholtze , ScholtzeSpawnArea , true ) ;
5489: LD_EXP 56
5493: PPUSH
5494: LD_INT 30
5496: PPUSH
5497: LD_INT 1
5499: PPUSH
5500: CALL_OW 49
// end ; end_of_file
5504: LD_VAR 0 1
5508: RET
// export amIntroUnits ; export amSupportTroops ; export amPatrol ; export amBase ; export function PrepareAmericans ; begin
5509: LD_INT 0
5511: PPUSH
// amSupportTroops = [ ] ;
5512: LD_ADDR_EXP 85
5516: PUSH
5517: EMPTY
5518: ST_TO_ADDR
// PrepareOmicronBase ;
5519: CALL 5528 0 0
// end ;
5523: LD_VAR 0 1
5527: RET
// function PrepareOmicronBase ; var base ; begin
5528: LD_INT 0
5530: PPUSH
5531: PPUSH
// amBase := PrepareBase ( omikron , OmicronBaseArea , omikron , [ 1 , 2 , 2 ] [ Difficulty ] , [ 3000 , 3000 , 0 ] , [ 7 , 3 , 4 , 2 ] ) ;
5532: LD_ADDR_EXP 87
5536: PUSH
5537: LD_INT 64
5539: PPUSH
5540: LD_INT 13
5542: PPUSH
5543: LD_STRING omikron
5545: PPUSH
5546: LD_INT 1
5548: PUSH
5549: LD_INT 2
5551: PUSH
5552: LD_INT 2
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: LIST
5559: PUSH
5560: LD_OWVAR 67
5564: ARRAY
5565: PPUSH
5566: LD_INT 3000
5568: PUSH
5569: LD_INT 3000
5571: PUSH
5572: LD_INT 0
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: LIST
5579: PPUSH
5580: LD_INT 7
5582: PUSH
5583: LD_INT 3
5585: PUSH
5586: LD_INT 4
5588: PUSH
5589: LD_INT 2
5591: PUSH
5592: EMPTY
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: PPUSH
5598: CALL 40594 0 6
5602: ST_TO_ADDR
// case Difficulty of 2 :
5603: LD_OWVAR 67
5607: PUSH
5608: LD_INT 2
5610: DOUBLE
5611: EQUAL
5612: IFTRUE 5616
5614: GO 5632
5616: POP
// begin SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5617: LD_INT 51
5619: PPUSH
5620: LD_INT 1
5622: PPUSH
5623: LD_INT 1
5625: PPUSH
5626: CALL_OW 322
// end ; 3 :
5630: GO 5670
5632: LD_INT 3
5634: DOUBLE
5635: EQUAL
5636: IFTRUE 5640
5638: GO 5669
5640: POP
// begin SetTech ( tech_Tech2 , 1 , state_enabled ) ;
5641: LD_INT 49
5643: PPUSH
5644: LD_INT 1
5646: PPUSH
5647: LD_INT 1
5649: PPUSH
5650: CALL_OW 322
// SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5654: LD_INT 51
5656: PPUSH
5657: LD_INT 1
5659: PPUSH
5660: LD_INT 1
5662: PPUSH
5663: CALL_OW 322
// end ; end ;
5667: GO 5670
5669: POP
// end ;
5670: LD_VAR 0 1
5674: RET
// export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
5675: LD_INT 0
5677: PPUSH
5678: PPUSH
5679: PPUSH
5680: PPUSH
// amIntroUnits = [ ] ;
5681: LD_ADDR_EXP 84
5685: PUSH
5686: EMPTY
5687: ST_TO_ADDR
// uc_side = 1 ;
5688: LD_ADDR_OWVAR 20
5692: PUSH
5693: LD_INT 1
5695: ST_TO_ADDR
// uc_nation = nation_american ;
5696: LD_ADDR_OWVAR 21
5700: PUSH
5701: LD_INT 1
5703: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
5704: LD_ADDR_OWVAR 37
5708: PUSH
5709: LD_INT 3
5711: ST_TO_ADDR
// vc_control = control_manual ;
5712: LD_ADDR_OWVAR 38
5716: PUSH
5717: LD_INT 1
5719: ST_TO_ADDR
// vc_engine = engine_combustion ;
5720: LD_ADDR_OWVAR 39
5724: PUSH
5725: LD_INT 1
5727: ST_TO_ADDR
// vc_weapon = us_light_gun ;
5728: LD_ADDR_OWVAR 40
5732: PUSH
5733: LD_INT 3
5735: ST_TO_ADDR
// vc_fuel_battery = 100 ;
5736: LD_ADDR_OWVAR 41
5740: PUSH
5741: LD_INT 100
5743: ST_TO_ADDR
// veh = CreateVehicle ;
5744: LD_ADDR_VAR 0 3
5748: PUSH
5749: CALL_OW 45
5753: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5754: LD_VAR 0 3
5758: PPUSH
5759: LD_INT 4
5761: PPUSH
5762: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
5766: LD_ADDR_EXP 84
5770: PUSH
5771: LD_EXP 84
5775: PUSH
5776: LD_VAR 0 3
5780: ADD
5781: ST_TO_ADDR
// PlaceUnitArea ( veh , CutsceneAmSupportSpawnArea , false ) ;
5782: LD_VAR 0 3
5786: PPUSH
5787: LD_INT 5
5789: PPUSH
5790: LD_INT 0
5792: PPUSH
5793: CALL_OW 49
// for i := 1 to 3 do
5797: LD_ADDR_VAR 0 2
5801: PUSH
5802: DOUBLE
5803: LD_INT 1
5805: DEC
5806: ST_TO_ADDR
5807: LD_INT 3
5809: PUSH
5810: FOR_TO
5811: IFFALSE 5932
// begin hc_name :=  ;
5813: LD_ADDR_OWVAR 26
5817: PUSH
5818: LD_STRING 
5820: ST_TO_ADDR
// hc_gallery :=  ;
5821: LD_ADDR_OWVAR 33
5825: PUSH
5826: LD_STRING 
5828: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel ) ;
5829: LD_INT 0
5831: PPUSH
5832: LD_EXP 44
5836: PPUSH
5837: CALL_OW 381
// human = CreateHuman ;
5841: LD_ADDR_VAR 0 4
5845: PUSH
5846: CALL_OW 44
5850: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
5851: LD_ADDR_EXP 84
5855: PUSH
5856: LD_EXP 84
5860: PUSH
5861: LD_VAR 0 4
5865: ADD
5866: ST_TO_ADDR
// if i < 3 then
5867: LD_VAR 0 2
5871: PUSH
5872: LD_INT 3
5874: LESS
5875: IFFALSE 5894
// PlaceUnitArea ( human , CutsceneAmSupportSpawnArea , false ) else
5877: LD_VAR 0 4
5881: PPUSH
5882: LD_INT 5
5884: PPUSH
5885: LD_INT 0
5887: PPUSH
5888: CALL_OW 49
5892: GO 5930
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5894: LD_INT 0
5896: PPUSH
5897: LD_EXP 44
5901: PPUSH
5902: CALL_OW 383
// human = CreateHuman ;
5906: LD_ADDR_VAR 0 4
5910: PUSH
5911: CALL_OW 44
5915: ST_TO_ADDR
// PlaceHumanInUnit ( human , veh ) ;
5916: LD_VAR 0 4
5920: PPUSH
5921: LD_VAR 0 3
5925: PPUSH
5926: CALL_OW 52
// end ; end ;
5930: GO 5810
5932: POP
5933: POP
// end ;
5934: LD_VAR 0 1
5938: RET
// export function PrepareAmericanSupportTroops ( soldiersAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road ; begin
5939: LD_INT 0
5941: PPUSH
5942: PPUSH
5943: PPUSH
5944: PPUSH
5945: PPUSH
// uc_side := 1 ;
5946: LD_ADDR_OWVAR 20
5950: PUSH
5951: LD_INT 1
5953: ST_TO_ADDR
// uc_nation := 1 ;
5954: LD_ADDR_OWVAR 21
5958: PUSH
5959: LD_INT 1
5961: ST_TO_ADDR
// hc_name :=  ;
5962: LD_ADDR_OWVAR 26
5966: PUSH
5967: LD_STRING 
5969: ST_TO_ADDR
// hc_gallery :=  ;
5970: LD_ADDR_OWVAR 33
5974: PUSH
5975: LD_STRING 
5977: ST_TO_ADDR
// for i := 1 to soldiersAmount do
5978: LD_ADDR_VAR 0 6
5982: PUSH
5983: DOUBLE
5984: LD_INT 1
5986: DEC
5987: ST_TO_ADDR
5988: LD_VAR 0 1
5992: PUSH
5993: FOR_TO
5994: IFFALSE 6053
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5996: LD_INT 0
5998: PPUSH
5999: LD_EXP 44
6003: PPUSH
6004: CALL_OW 381
// un = CreateHuman ;
6008: LD_ADDR_VAR 0 7
6012: PUSH
6013: CALL_OW 44
6017: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6018: LD_ADDR_EXP 85
6022: PUSH
6023: LD_EXP 85
6027: PUSH
6028: LD_VAR 0 7
6032: ADD
6033: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6034: LD_VAR 0 7
6038: PPUSH
6039: LD_VAR 0 4
6043: PPUSH
6044: LD_INT 0
6046: PPUSH
6047: CALL_OW 49
// end ;
6051: GO 5993
6053: POP
6054: POP
// for i := 1 to scientistsAmount do
6055: LD_ADDR_VAR 0 6
6059: PUSH
6060: DOUBLE
6061: LD_INT 1
6063: DEC
6064: ST_TO_ADDR
6065: LD_VAR 0 2
6069: PUSH
6070: FOR_TO
6071: IFFALSE 6130
// begin PrepareScientist ( false , enemySkillLevel ) ;
6073: LD_INT 0
6075: PPUSH
6076: LD_EXP 44
6080: PPUSH
6081: CALL_OW 384
// un = CreateHuman ;
6085: LD_ADDR_VAR 0 7
6089: PUSH
6090: CALL_OW 44
6094: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6095: LD_ADDR_EXP 85
6099: PUSH
6100: LD_EXP 85
6104: PUSH
6105: LD_VAR 0 7
6109: ADD
6110: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6111: LD_VAR 0 7
6115: PPUSH
6116: LD_VAR 0 4
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// end ;
6128: GO 6070
6130: POP
6131: POP
// for i := 1 to vehiclesAmount do
6132: LD_ADDR_VAR 0 6
6136: PUSH
6137: DOUBLE
6138: LD_INT 1
6140: DEC
6141: ST_TO_ADDR
6142: LD_VAR 0 3
6146: PUSH
6147: FOR_TO
6148: IFFALSE 6314
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
6150: LD_ADDR_OWVAR 40
6154: PUSH
6155: LD_INT 2
6157: PUSH
6158: LD_INT 4
6160: PUSH
6161: LD_INT 3
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 1
6171: PPUSH
6172: LD_INT 3
6174: PPUSH
6175: CALL_OW 12
6179: ARRAY
6180: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
6181: LD_ADDR_OWVAR 37
6185: PUSH
6186: LD_INT 3
6188: ST_TO_ADDR
// vc_control = control_manual ;
6189: LD_ADDR_OWVAR 38
6193: PUSH
6194: LD_INT 1
6196: ST_TO_ADDR
// vc_engine = engine_combustion ;
6197: LD_ADDR_OWVAR 39
6201: PUSH
6202: LD_INT 1
6204: ST_TO_ADDR
// veh = CreateVehicle ;
6205: LD_ADDR_VAR 0 8
6209: PUSH
6210: CALL_OW 45
6214: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ veh ;
6215: LD_ADDR_EXP 85
6219: PUSH
6220: LD_EXP 85
6224: PUSH
6225: LD_VAR 0 8
6229: ADD
6230: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6231: LD_VAR 0 8
6235: PPUSH
6236: LD_VAR 0 4
6240: PPUSH
6241: LD_INT 0
6243: PPUSH
6244: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
6248: LD_INT 0
6250: PPUSH
6251: LD_EXP 44
6255: PPUSH
6256: CALL_OW 383
// un = CreateHuman ;
6260: LD_ADDR_VAR 0 7
6264: PUSH
6265: CALL_OW 44
6269: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6270: LD_ADDR_EXP 85
6274: PUSH
6275: LD_EXP 85
6279: PUSH
6280: LD_VAR 0 7
6284: ADD
6285: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6286: LD_VAR 0 7
6290: PPUSH
6291: LD_VAR 0 8
6295: PPUSH
6296: CALL_OW 52
// SetFuel ( veh , 100 ) ;
6300: LD_VAR 0 8
6304: PPUSH
6305: LD_INT 100
6307: PPUSH
6308: CALL_OW 240
// end ;
6312: GO 6147
6314: POP
6315: POP
// case area of NorthAmericanSpawnArea :
6316: LD_VAR 0 4
6320: PUSH
6321: LD_INT 7
6323: DOUBLE
6324: EQUAL
6325: IFTRUE 6329
6327: GO 6340
6329: POP
// road = NorthRoadArea ; SouthAmericanSpawnArea1 :
6330: LD_ADDR_VAR 0 9
6334: PUSH
6335: LD_INT 10
6337: ST_TO_ADDR
6338: GO 6379
6340: LD_INT 9
6342: DOUBLE
6343: EQUAL
6344: IFTRUE 6348
6346: GO 6359
6348: POP
// road = SouthRoadArea1 ; SouthAmericanSpawnArea2 :
6349: LD_ADDR_VAR 0 9
6353: PUSH
6354: LD_INT 11
6356: ST_TO_ADDR
6357: GO 6379
6359: LD_INT 8
6361: DOUBLE
6362: EQUAL
6363: IFTRUE 6367
6365: GO 6378
6367: POP
// road = SouthRoadArea2 ; end ;
6368: LD_ADDR_VAR 0 9
6372: PUSH
6373: LD_INT 12
6375: ST_TO_ADDR
6376: GO 6379
6378: POP
// MoveToBase ( amSupportTroops , road ) ;
6379: LD_EXP 85
6383: PPUSH
6384: LD_VAR 0 9
6388: PPUSH
6389: CALL 18979 0 2
// end ;
6393: LD_VAR 0 5
6397: RET
// export function PrepareAmericanPatrol ; var un ; begin
6398: LD_INT 0
6400: PPUSH
6401: PPUSH
// amPatrol = [ ] ;
6402: LD_ADDR_EXP 86
6406: PUSH
6407: EMPTY
6408: ST_TO_ADDR
// uc_side = 1 ;
6409: LD_ADDR_OWVAR 20
6413: PUSH
6414: LD_INT 1
6416: ST_TO_ADDR
// uc_nation = 1 ;
6417: LD_ADDR_OWVAR 21
6421: PUSH
6422: LD_INT 1
6424: ST_TO_ADDR
// un = PrepareUnitExt ( Campell , false ) ;
6425: LD_ADDR_VAR 0 2
6429: PUSH
6430: LD_STRING Campell
6432: PPUSH
6433: LD_INT 0
6435: PPUSH
6436: CALL 6971 0 2
6440: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6441: LD_ADDR_EXP 86
6445: PUSH
6446: LD_EXP 86
6450: PUSH
6451: LD_VAR 0 2
6455: ADD
6456: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6457: LD_VAR 0 2
6461: PPUSH
6462: LD_INT 14
6464: PPUSH
6465: LD_INT 0
6467: PPUSH
6468: CALL_OW 49
// SetClass ( un , 1 ) ;
6472: LD_VAR 0 2
6476: PPUSH
6477: LD_INT 1
6479: PPUSH
6480: CALL_OW 336
// PrepareSoldier ( sex_male , enemySkillLevel ) ;
6484: LD_INT 1
6486: PPUSH
6487: LD_EXP 44
6491: PPUSH
6492: CALL_OW 381
// un = CreateHuman ;
6496: LD_ADDR_VAR 0 2
6500: PUSH
6501: CALL_OW 44
6505: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6506: LD_ADDR_EXP 86
6510: PUSH
6511: LD_EXP 86
6515: PUSH
6516: LD_VAR 0 2
6520: ADD
6521: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6522: LD_VAR 0 2
6526: PPUSH
6527: LD_INT 14
6529: PPUSH
6530: LD_INT 0
6532: PPUSH
6533: CALL_OW 49
// ComAttackUnit ( amPatrol , Scholtze ) ;
6537: LD_EXP 86
6541: PPUSH
6542: LD_EXP 56
6546: PPUSH
6547: CALL_OW 115
// end ; end_of_file
6551: LD_VAR 0 1
6555: RET
// export northGroup , southGroup ; export function PrepareArabian ; var i , un , veh ; begin
6556: LD_INT 0
6558: PPUSH
6559: PPUSH
6560: PPUSH
6561: PPUSH
// northGroup = [ ] ;
6562: LD_ADDR_EXP 88
6566: PUSH
6567: EMPTY
6568: ST_TO_ADDR
// southGroup = [ ] ;
6569: LD_ADDR_EXP 89
6573: PUSH
6574: EMPTY
6575: ST_TO_ADDR
// uc_side = 2 ;
6576: LD_ADDR_OWVAR 20
6580: PUSH
6581: LD_INT 2
6583: ST_TO_ADDR
// uc_nation = 2 ;
6584: LD_ADDR_OWVAR 21
6588: PUSH
6589: LD_INT 2
6591: ST_TO_ADDR
// hc_name :=  ;
6592: LD_ADDR_OWVAR 26
6596: PUSH
6597: LD_STRING 
6599: ST_TO_ADDR
// hc_gallery :=  ;
6600: LD_ADDR_OWVAR 33
6604: PUSH
6605: LD_STRING 
6607: ST_TO_ADDR
// for i := 1 to 5 do
6608: LD_ADDR_VAR 0 2
6612: PUSH
6613: DOUBLE
6614: LD_INT 1
6616: DEC
6617: ST_TO_ADDR
6618: LD_INT 5
6620: PUSH
6621: FOR_TO
6622: IFFALSE 6736
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
6624: LD_INT 13
6626: PPUSH
6627: LD_INT 1
6629: PPUSH
6630: LD_INT 1
6632: PPUSH
6633: LD_INT 26
6635: PPUSH
6636: LD_INT 100
6638: PPUSH
6639: CALL 37153 0 5
// veh = CreateVehicle ;
6643: LD_ADDR_VAR 0 4
6647: PUSH
6648: CALL_OW 45
6652: ST_TO_ADDR
// southGroup = southGroup ^ veh ;
6653: LD_ADDR_EXP 89
6657: PUSH
6658: LD_EXP 89
6662: PUSH
6663: LD_VAR 0 4
6667: ADD
6668: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea2 , false ) ;
6669: LD_VAR 0 4
6673: PPUSH
6674: LD_INT 23
6676: PPUSH
6677: LD_INT 0
6679: PPUSH
6680: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6684: LD_INT 0
6686: PPUSH
6687: LD_INT 8
6689: PPUSH
6690: CALL_OW 383
// un = CreateHuman ;
6694: LD_ADDR_VAR 0 3
6698: PUSH
6699: CALL_OW 44
6703: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6704: LD_ADDR_EXP 89
6708: PUSH
6709: LD_EXP 89
6713: PUSH
6714: LD_VAR 0 3
6718: ADD
6719: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6720: LD_VAR 0 3
6724: PPUSH
6725: LD_VAR 0 4
6729: PPUSH
6730: CALL_OW 52
// end ;
6734: GO 6621
6736: POP
6737: POP
// for i := 1 to 5 do
6738: LD_ADDR_VAR 0 2
6742: PUSH
6743: DOUBLE
6744: LD_INT 1
6746: DEC
6747: ST_TO_ADDR
6748: LD_INT 5
6750: PUSH
6751: FOR_TO
6752: IFFALSE 6807
// begin PrepareSoldier ( false , 8 ) ;
6754: LD_INT 0
6756: PPUSH
6757: LD_INT 8
6759: PPUSH
6760: CALL_OW 381
// un = CreateHuman ;
6764: LD_ADDR_VAR 0 3
6768: PUSH
6769: CALL_OW 44
6773: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6774: LD_ADDR_EXP 89
6778: PUSH
6779: LD_EXP 89
6783: PUSH
6784: LD_VAR 0 3
6788: ADD
6789: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6790: LD_VAR 0 3
6794: PPUSH
6795: LD_INT 23
6797: PPUSH
6798: LD_INT 0
6800: PPUSH
6801: CALL_OW 49
// end ;
6805: GO 6751
6807: POP
6808: POP
// for i := 1 to 10 do
6809: LD_ADDR_VAR 0 2
6813: PUSH
6814: DOUBLE
6815: LD_INT 1
6817: DEC
6818: ST_TO_ADDR
6819: LD_INT 10
6821: PUSH
6822: FOR_TO
6823: IFFALSE 6964
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower ] [ Rand ( 1 , 4 ) ] , 100 ) ;
6825: LD_INT 13
6827: PPUSH
6828: LD_INT 1
6830: PPUSH
6831: LD_INT 1
6833: PPUSH
6834: LD_INT 25
6836: PUSH
6837: LD_INT 27
6839: PUSH
6840: LD_INT 23
6842: PUSH
6843: LD_INT 26
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: PUSH
6852: LD_INT 1
6854: PPUSH
6855: LD_INT 4
6857: PPUSH
6858: CALL_OW 12
6862: ARRAY
6863: PPUSH
6864: LD_INT 100
6866: PPUSH
6867: CALL 37153 0 5
// veh = CreateVehicle ;
6871: LD_ADDR_VAR 0 4
6875: PUSH
6876: CALL_OW 45
6880: ST_TO_ADDR
// northGroup = northGroup ^ veh ;
6881: LD_ADDR_EXP 88
6885: PUSH
6886: LD_EXP 88
6890: PUSH
6891: LD_VAR 0 4
6895: ADD
6896: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
6897: LD_VAR 0 4
6901: PPUSH
6902: LD_INT 22
6904: PPUSH
6905: LD_INT 0
6907: PPUSH
6908: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6912: LD_INT 0
6914: PPUSH
6915: LD_INT 8
6917: PPUSH
6918: CALL_OW 383
// un = CreateHuman ;
6922: LD_ADDR_VAR 0 3
6926: PUSH
6927: CALL_OW 44
6931: ST_TO_ADDR
// northGroup = northGroup ^ un ;
6932: LD_ADDR_EXP 88
6936: PUSH
6937: LD_EXP 88
6941: PUSH
6942: LD_VAR 0 3
6946: ADD
6947: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6948: LD_VAR 0 3
6952: PPUSH
6953: LD_VAR 0 4
6957: PPUSH
6958: CALL_OW 52
// end ;
6962: GO 6822
6964: POP
6965: POP
// end ; end_of_file
6966: LD_VAR 0 1
6970: RET
// export function PrepareUnitExt ( ident , exist_mode ) ; var unit ; begin
6971: LD_INT 0
6973: PPUSH
6974: PPUSH
// if exist_mode then
6975: LD_VAR 0 2
6979: IFFALSE 7004
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
6981: LD_ADDR_VAR 0 4
6985: PUSH
6986: LD_EXP 37
6990: PUSH
6991: LD_VAR 0 1
6995: STR
6996: PPUSH
6997: CALL_OW 34
7001: ST_TO_ADDR
7002: GO 7019
// unit := NewCharacter ( ident ) ;
7004: LD_ADDR_VAR 0 4
7008: PUSH
7009: LD_VAR 0 1
7013: PPUSH
7014: CALL_OW 25
7018: ST_TO_ADDR
// result := unit ;
7019: LD_ADDR_VAR 0 3
7023: PUSH
7024: LD_VAR 0 4
7028: ST_TO_ADDR
// end ;
7029: LD_VAR 0 3
7033: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
7034: LD_INT 0
7036: PPUSH
7037: PPUSH
7038: PPUSH
7039: PPUSH
// units = characters ;
7040: LD_ADDR_VAR 0 9
7044: PUSH
7045: LD_VAR 0 1
7049: ST_TO_ADDR
// units := units diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
7050: LD_ADDR_VAR 0 9
7054: PUSH
7055: LD_VAR 0 9
7059: PUSH
7060: LD_EXP 50
7064: PUSH
7065: LD_EXP 51
7069: PUSH
7070: LD_EXP 52
7074: PUSH
7075: LD_EXP 53
7079: PUSH
7080: LD_EXP 54
7084: PUSH
7085: LD_EXP 55
7089: PUSH
7090: LD_EXP 56
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: DIFF
7104: ST_TO_ADDR
// if not units and not canTalkHero then
7105: LD_VAR 0 9
7109: NOT
7110: PUSH
7111: LD_VAR 0 5
7115: NOT
7116: AND
7117: IFFALSE 7121
// exit ;
7119: GO 7294
// if not units then
7121: LD_VAR 0 9
7125: NOT
7126: IFFALSE 7147
// units = characters diff [ Burlak ] ;
7128: LD_ADDR_VAR 0 9
7132: PUSH
7133: LD_VAR 0 1
7137: PUSH
7138: LD_EXP 50
7142: PUSH
7143: EMPTY
7144: LIST
7145: DIFF
7146: ST_TO_ADDR
// if not units and canTalkHero then
7147: LD_VAR 0 9
7151: NOT
7152: PUSH
7153: LD_VAR 0 5
7157: AND
7158: IFFALSE 7162
// exit ;
7160: GO 7294
// speaker := units [ rand ( 1 , units ) ] ;
7162: LD_ADDR_VAR 0 8
7166: PUSH
7167: LD_VAR 0 9
7171: PUSH
7172: LD_INT 1
7174: PPUSH
7175: LD_VAR 0 9
7179: PPUSH
7180: CALL_OW 12
7184: ARRAY
7185: ST_TO_ADDR
// if radio then
7186: LD_VAR 0 4
7190: IFFALSE 7239
// begin if GetSex ( speaker ) = sex_male then
7192: LD_VAR 0 8
7196: PPUSH
7197: CALL_OW 258
7201: PUSH
7202: LD_INT 1
7204: EQUAL
7205: IFFALSE 7223
// SayRadio ( speaker , dialogMID ) else
7207: LD_VAR 0 8
7211: PPUSH
7212: LD_VAR 0 2
7216: PPUSH
7217: CALL_OW 94
7221: GO 7237
// SayRadio ( speaker , dialogFID ) ;
7223: LD_VAR 0 8
7227: PPUSH
7228: LD_VAR 0 3
7232: PPUSH
7233: CALL_OW 94
// end else
7237: GO 7284
// begin if GetSex ( speaker ) = sex_male then
7239: LD_VAR 0 8
7243: PPUSH
7244: CALL_OW 258
7248: PUSH
7249: LD_INT 1
7251: EQUAL
7252: IFFALSE 7270
// Say ( speaker , dialogMID ) else
7254: LD_VAR 0 8
7258: PPUSH
7259: LD_VAR 0 2
7263: PPUSH
7264: CALL_OW 88
7268: GO 7284
// Say ( speaker , dialogFID ) ;
7270: LD_VAR 0 8
7274: PPUSH
7275: LD_VAR 0 3
7279: PPUSH
7280: CALL_OW 88
// end ; result := speaker ;
7284: LD_ADDR_VAR 0 6
7288: PUSH
7289: LD_VAR 0 8
7293: ST_TO_ADDR
// end ;
7294: LD_VAR 0 6
7298: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
7299: LD_INT 0
7301: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
7302: LD_VAR 0 1
7306: PPUSH
7307: CALL_OW 255
7311: PUSH
7312: LD_VAR 0 3
7316: EQUAL
7317: PUSH
7318: LD_VAR 0 1
7322: PPUSH
7323: CALL_OW 302
7327: AND
7328: IFFALSE 7350
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
7330: LD_VAR 0 1
7334: PPUSH
7335: LD_EXP 36
7339: PUSH
7340: LD_VAR 0 2
7344: STR
7345: PPUSH
7346: CALL_OW 38
// end ;
7350: LD_VAR 0 4
7354: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
7355: LD_INT 0
7357: PPUSH
7358: PPUSH
7359: PPUSH
// resultCharactersToSave = [ ] ;
7360: LD_ADDR_VAR 0 6
7364: PUSH
7365: EMPTY
7366: ST_TO_ADDR
// for unit in characters do
7367: LD_ADDR_VAR 0 5
7371: PUSH
7372: LD_VAR 0 1
7376: PUSH
7377: FOR_IN
7378: IFFALSE 7426
// if GetSide ( unit ) = side and IsOK ( unit ) then
7380: LD_VAR 0 5
7384: PPUSH
7385: CALL_OW 255
7389: PUSH
7390: LD_VAR 0 3
7394: EQUAL
7395: PUSH
7396: LD_VAR 0 5
7400: PPUSH
7401: CALL_OW 302
7405: AND
7406: IFFALSE 7424
// resultCharactersToSave = resultCharactersToSave ^ unit ;
7408: LD_ADDR_VAR 0 6
7412: PUSH
7413: LD_VAR 0 6
7417: PUSH
7418: LD_VAR 0 5
7422: ADD
7423: ST_TO_ADDR
7424: GO 7377
7426: POP
7427: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
7428: LD_VAR 0 6
7432: PPUSH
7433: LD_EXP 36
7437: PUSH
7438: LD_VAR 0 2
7442: STR
7443: PPUSH
7444: CALL_OW 38
// end ;
7448: LD_VAR 0 4
7452: RET
// export function SelectCharacters ( maxUnitToChoose ) ; var i , charsToChoose , selectedPeople ; begin
7453: LD_INT 0
7455: PPUSH
7456: PPUSH
7457: PPUSH
7458: PPUSH
// charsToChoose = otherKirovUnits ;
7459: LD_ADDR_VAR 0 4
7463: PUSH
7464: LD_EXP 66
7468: ST_TO_ADDR
// charsToChoose = charsToChoose ^ otherBeriaUnits ;
7469: LD_ADDR_VAR 0 4
7473: PUSH
7474: LD_VAR 0 4
7478: PUSH
7479: LD_EXP 59
7483: ADD
7484: ST_TO_ADDR
// charsToChoose = charsToChoose ^ other_survivors ;
7485: LD_ADDR_VAR 0 4
7489: PUSH
7490: LD_VAR 0 4
7494: PUSH
7495: LD_EXP 57
7499: ADD
7500: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov ;
7501: LD_ADDR_VAR 0 4
7505: PUSH
7506: LD_VAR 0 4
7510: PUSH
7511: LD_EXP 54
7515: ADD
7516: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov2 ;
7517: LD_ADDR_VAR 0 4
7521: PUSH
7522: LD_VAR 0 4
7526: PUSH
7527: LD_EXP 55
7531: ADD
7532: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , maxUnitToChoose , maxUnitToChoose , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Kurin ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
7533: LD_ADDR_VAR 0 5
7537: PUSH
7538: LD_STRING text
7540: PPUSH
7541: LD_VAR 0 1
7545: PPUSH
7546: LD_VAR 0 1
7550: PPUSH
7551: LD_INT -5
7553: PUSH
7554: LD_EXP 50
7558: PUSH
7559: LD_EXP 51
7563: PUSH
7564: LD_EXP 53
7568: PUSH
7569: LD_EXP 52
7573: PUSH
7574: LD_INT -6
7576: PUSH
7577: LD_INT -2
7579: PUSH
7580: LD_INT -3
7582: PUSH
7583: LD_INT -5
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: PUSH
7597: LD_VAR 0 4
7601: ADD
7602: PUSH
7603: LD_INT -6
7605: PUSH
7606: LD_INT -4
7608: PUSH
7609: LD_EXP 62
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: LIST
7618: ADD
7619: PPUSH
7620: LD_INT 1
7622: PUSH
7623: LD_INT 3
7625: PUSH
7626: LD_INT 2
7628: PUSH
7629: LD_INT 1
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 4
7638: PUSH
7639: LD_INT 1
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: PPUSH
7652: CALL_OW 42
7656: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
7657: LD_VAR 0 4
7661: PPUSH
7662: LD_INT 6
7664: PPUSH
7665: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
7669: LD_VAR 0 5
7673: PPUSH
7674: LD_INT 3
7676: PPUSH
7677: CALL_OW 235
// SetSurvivorsArabianAttack ;
7681: CALL 5143 0 0
// MoveKurinUnitsToBuildings ;
7685: CALL 9223 0 0
// end ;
7689: LD_VAR 0 2
7693: RET
// export function FindNotFullBuildingInArea ( area , side , buildingType ) ; var building ; begin
7694: LD_INT 0
7696: PPUSH
7697: PPUSH
// for building in FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , buildingType ] ] ) do
7698: LD_ADDR_VAR 0 5
7702: PUSH
7703: LD_VAR 0 1
7707: PPUSH
7708: LD_INT 22
7710: PUSH
7711: LD_VAR 0 2
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PUSH
7720: LD_INT 21
7722: PUSH
7723: LD_INT 3
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: PUSH
7730: LD_INT 30
7732: PUSH
7733: LD_VAR 0 3
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: LIST
7746: PPUSH
7747: CALL_OW 70
7751: PUSH
7752: FOR_IN
7753: IFFALSE 7786
// begin if UnitsInside ( building ) < 6 then
7755: LD_VAR 0 5
7759: PPUSH
7760: CALL_OW 313
7764: PUSH
7765: LD_INT 6
7767: LESS
7768: IFFALSE 7784
// begin result = building ;
7770: LD_ADDR_VAR 0 4
7774: PUSH
7775: LD_VAR 0 5
7779: ST_TO_ADDR
// exit ;
7780: POP
7781: POP
7782: GO 7796
// end ; end ;
7784: GO 7752
7786: POP
7787: POP
// result = 0 ;
7788: LD_ADDR_VAR 0 4
7792: PUSH
7793: LD_INT 0
7795: ST_TO_ADDR
// end ;
7796: LD_VAR 0 4
7800: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
7801: LD_INT 0
7803: PPUSH
7804: PPUSH
7805: PPUSH
7806: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
7807: LD_ADDR_VAR 0 6
7811: PUSH
7812: LD_INT 34
7814: PUSH
7815: LD_INT 71
7817: PUSH
7818: LD_INT 70
7820: PUSH
7821: LD_INT 69
7823: PUSH
7824: LD_INT 39
7826: PUSH
7827: LD_INT 31
7829: PUSH
7830: LD_INT 14
7832: PUSH
7833: LD_INT 10
7835: PUSH
7836: LD_INT 40
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: ST_TO_ADDR
// resultWeapons = [ ] ;
7850: LD_ADDR_VAR 0 5
7854: PUSH
7855: EMPTY
7856: ST_TO_ADDR
// for i := 1 to weaponTechs do
7857: LD_ADDR_VAR 0 4
7861: PUSH
7862: DOUBLE
7863: LD_INT 1
7865: DEC
7866: ST_TO_ADDR
7867: LD_VAR 0 6
7871: PUSH
7872: FOR_TO
7873: IFFALSE 8060
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
7875: LD_VAR 0 6
7879: PUSH
7880: LD_VAR 0 4
7884: ARRAY
7885: PPUSH
7886: LD_VAR 0 2
7890: PPUSH
7891: CALL_OW 482
7895: PUSH
7896: LD_VAR 0 6
7900: PUSH
7901: LD_VAR 0 4
7905: ARRAY
7906: PPUSH
7907: LD_VAR 0 1
7911: PPUSH
7912: CALL_OW 321
7916: PUSH
7917: LD_INT 2
7919: EQUAL
7920: AND
7921: IFFALSE 8058
// case nation of nation_american :
7923: LD_VAR 0 2
7927: PUSH
7928: LD_INT 1
7930: DOUBLE
7931: EQUAL
7932: IFTRUE 7936
7934: GO 7971
7936: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
7937: LD_ADDR_VAR 0 5
7941: PUSH
7942: LD_VAR 0 5
7946: PUSH
7947: LD_VAR 0 6
7951: PUSH
7952: LD_VAR 0 4
7956: ARRAY
7957: PPUSH
7958: LD_VAR 0 2
7962: PPUSH
7963: CALL 8077 0 2
7967: ADD
7968: ST_TO_ADDR
7969: GO 8058
7971: LD_INT 2
7973: DOUBLE
7974: EQUAL
7975: IFTRUE 7979
7977: GO 8014
7979: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
7980: LD_ADDR_VAR 0 5
7984: PUSH
7985: LD_VAR 0 5
7989: PUSH
7990: LD_VAR 0 6
7994: PUSH
7995: LD_VAR 0 4
7999: ARRAY
8000: PPUSH
8001: LD_VAR 0 2
8005: PPUSH
8006: CALL 8077 0 2
8010: ADD
8011: ST_TO_ADDR
8012: GO 8058
8014: LD_INT 3
8016: DOUBLE
8017: EQUAL
8018: IFTRUE 8022
8020: GO 8057
8022: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
8023: LD_ADDR_VAR 0 5
8027: PUSH
8028: LD_VAR 0 5
8032: PUSH
8033: LD_VAR 0 6
8037: PUSH
8038: LD_VAR 0 4
8042: ARRAY
8043: PPUSH
8044: LD_VAR 0 2
8048: PPUSH
8049: CALL 8077 0 2
8053: ADD
8054: ST_TO_ADDR
8055: GO 8058
8057: POP
// end ;
8058: GO 7872
8060: POP
8061: POP
// result = resultWeapons ;
8062: LD_ADDR_VAR 0 3
8066: PUSH
8067: LD_VAR 0 5
8071: ST_TO_ADDR
// end ;
8072: LD_VAR 0 3
8076: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
8077: LD_INT 0
8079: PPUSH
// case tech of tech_AdvMet :
8080: LD_VAR 0 1
8084: PUSH
8085: LD_INT 34
8087: DOUBLE
8088: EQUAL
8089: IFTRUE 8093
8091: GO 8121
8093: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
8094: LD_ADDR_VAR 0 3
8098: PUSH
8099: LD_INT 6
8101: PUSH
8102: LD_STRING 
8104: PUSH
8105: LD_INT 46
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: LIST
8112: PUSH
8113: LD_VAR 0 2
8117: ARRAY
8118: ST_TO_ADDR
8119: GO 8410
8121: LD_INT 71
8123: DOUBLE
8124: EQUAL
8125: IFTRUE 8129
8127: GO 8157
8129: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
8130: LD_ADDR_VAR 0 3
8134: PUSH
8135: LD_STRING 
8137: PUSH
8138: LD_STRING 
8140: PUSH
8141: LD_INT 47
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: LIST
8148: PUSH
8149: LD_VAR 0 2
8153: ARRAY
8154: ST_TO_ADDR
8155: GO 8410
8157: LD_INT 70
8159: DOUBLE
8160: EQUAL
8161: IFTRUE 8165
8163: GO 8193
8165: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
8166: LD_ADDR_VAR 0 3
8170: PUSH
8171: LD_STRING 
8173: PUSH
8174: LD_INT 26
8176: PUSH
8177: LD_STRING 
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: LIST
8184: PUSH
8185: LD_VAR 0 2
8189: ARRAY
8190: ST_TO_ADDR
8191: GO 8410
8193: LD_INT 69
8195: DOUBLE
8196: EQUAL
8197: IFTRUE 8201
8199: GO 8229
8201: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
8202: LD_ADDR_VAR 0 3
8206: PUSH
8207: LD_INT 4
8209: PUSH
8210: LD_INT 25
8212: PUSH
8213: LD_INT 43
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: LIST
8220: PUSH
8221: LD_VAR 0 2
8225: ARRAY
8226: ST_TO_ADDR
8227: GO 8410
8229: LD_INT 39
8231: DOUBLE
8232: EQUAL
8233: IFTRUE 8237
8235: GO 8265
8237: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
8238: LD_ADDR_VAR 0 3
8242: PUSH
8243: LD_INT 5
8245: PUSH
8246: LD_INT 27
8248: PUSH
8249: LD_INT 44
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: LIST
8256: PUSH
8257: LD_VAR 0 2
8261: ARRAY
8262: ST_TO_ADDR
8263: GO 8410
8265: LD_INT 31
8267: DOUBLE
8268: EQUAL
8269: IFTRUE 8273
8271: GO 8301
8273: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
8274: LD_ADDR_VAR 0 3
8278: PUSH
8279: LD_STRING 
8281: PUSH
8282: LD_STRING 
8284: PUSH
8285: LD_INT 49
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: LIST
8292: PUSH
8293: LD_VAR 0 2
8297: ARRAY
8298: ST_TO_ADDR
8299: GO 8410
8301: LD_INT 14
8303: DOUBLE
8304: EQUAL
8305: IFTRUE 8309
8307: GO 8337
8309: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
8310: LD_ADDR_VAR 0 3
8314: PUSH
8315: LD_INT 10
8317: PUSH
8318: LD_STRING 
8320: PUSH
8321: LD_STRING 
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: LIST
8328: PUSH
8329: LD_VAR 0 2
8333: ARRAY
8334: ST_TO_ADDR
8335: GO 8410
8337: LD_INT 10
8339: DOUBLE
8340: EQUAL
8341: IFTRUE 8345
8343: GO 8373
8345: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
8346: LD_ADDR_VAR 0 3
8350: PUSH
8351: LD_INT 9
8353: PUSH
8354: LD_STRING 
8356: PUSH
8357: LD_STRING 
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: LIST
8364: PUSH
8365: LD_VAR 0 2
8369: ARRAY
8370: ST_TO_ADDR
8371: GO 8410
8373: LD_INT 40
8375: DOUBLE
8376: EQUAL
8377: IFTRUE 8381
8379: GO 8409
8381: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
8382: LD_ADDR_VAR 0 3
8386: PUSH
8387: LD_INT 7
8389: PUSH
8390: LD_INT 28
8392: PUSH
8393: LD_INT 45
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: LIST
8400: PUSH
8401: LD_VAR 0 2
8405: ARRAY
8406: ST_TO_ADDR
8407: GO 8410
8409: POP
// end ;
8410: LD_VAR 0 3
8414: RET
// export function ComRefuelFromCargo ( units , cargo ) ; var veh ; begin
8415: LD_INT 0
8417: PPUSH
8418: PPUSH
// for veh in units do
8419: LD_ADDR_VAR 0 4
8423: PUSH
8424: LD_VAR 0 1
8428: PUSH
8429: FOR_IN
8430: IFFALSE 8508
// begin if GetType ( veh ) = unit_vehicle and GetFuel ( veh ) < 100 then
8432: LD_VAR 0 4
8436: PPUSH
8437: CALL_OW 247
8441: PUSH
8442: LD_INT 2
8444: EQUAL
8445: PUSH
8446: LD_VAR 0 4
8450: PPUSH
8451: CALL_OW 261
8455: PUSH
8456: LD_INT 100
8458: LESS
8459: AND
8460: IFFALSE 8506
// SetTaskList ( veh , [ [ X , 0 , 0 , cargo , 0 , 0 , 0 ] ] ) ;
8462: LD_VAR 0 4
8466: PPUSH
8467: LD_STRING X
8469: PUSH
8470: LD_INT 0
8472: PUSH
8473: LD_INT 0
8475: PUSH
8476: LD_VAR 0 2
8480: PUSH
8481: LD_INT 0
8483: PUSH
8484: LD_INT 0
8486: PUSH
8487: LD_INT 0
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: PUSH
8499: EMPTY
8500: LIST
8501: PPUSH
8502: CALL_OW 446
// end ;
8506: GO 8429
8508: POP
8509: POP
// end ;
8510: LD_VAR 0 3
8514: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
8515: LD_INT 0
8517: PPUSH
8518: PPUSH
// dir := GetDir ( bunker ) - 3 ;
8519: LD_ADDR_VAR 0 4
8523: PUSH
8524: LD_VAR 0 2
8528: PPUSH
8529: CALL_OW 254
8533: PUSH
8534: LD_INT 3
8536: MINUS
8537: ST_TO_ADDR
// if dir < 0 then
8538: LD_VAR 0 4
8542: PUSH
8543: LD_INT 0
8545: LESS
8546: IFFALSE 8562
// dir := 6 + dir ;
8548: LD_ADDR_VAR 0 4
8552: PUSH
8553: LD_INT 6
8555: PUSH
8556: LD_VAR 0 4
8560: PLUS
8561: ST_TO_ADDR
// SetDir ( un , dir ) ;
8562: LD_VAR 0 1
8566: PPUSH
8567: LD_VAR 0 4
8571: PPUSH
8572: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
8576: LD_VAR 0 1
8580: PPUSH
8581: LD_VAR 0 2
8585: PPUSH
8586: CALL_OW 52
// result = un ;
8590: LD_ADDR_VAR 0 3
8594: PUSH
8595: LD_VAR 0 1
8599: ST_TO_ADDR
// end ;
8600: LD_VAR 0 3
8604: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8605: LD_INT 0
8607: PPUSH
8608: PPUSH
8609: PPUSH
// uc_side := GetSide ( b ) ;
8610: LD_ADDR_OWVAR 20
8614: PUSH
8615: LD_VAR 0 2
8619: PPUSH
8620: CALL_OW 255
8624: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8625: LD_ADDR_OWVAR 21
8629: PUSH
8630: LD_VAR 0 2
8634: PPUSH
8635: CALL_OW 248
8639: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8640: LD_INT 0
8642: PPUSH
8643: LD_INT 1
8645: PPUSH
8646: LD_VAR 0 1
8650: PPUSH
8651: CALL_OW 380
// un = CreateHuman ;
8655: LD_ADDR_VAR 0 4
8659: PUSH
8660: CALL_OW 44
8664: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8665: LD_ADDR_VAR 0 5
8669: PUSH
8670: LD_VAR 0 2
8674: PPUSH
8675: CALL_OW 254
8679: PUSH
8680: LD_INT 3
8682: MINUS
8683: ST_TO_ADDR
// if dir < 0 then
8684: LD_VAR 0 5
8688: PUSH
8689: LD_INT 0
8691: LESS
8692: IFFALSE 8708
// dir := 6 + dir ;
8694: LD_ADDR_VAR 0 5
8698: PUSH
8699: LD_INT 6
8701: PUSH
8702: LD_VAR 0 5
8706: PLUS
8707: ST_TO_ADDR
// SetDir ( un , dir ) ;
8708: LD_VAR 0 4
8712: PPUSH
8713: LD_VAR 0 5
8717: PPUSH
8718: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8722: LD_VAR 0 4
8726: PPUSH
8727: LD_VAR 0 2
8731: PPUSH
8732: CALL_OW 52
// result = un ;
8736: LD_ADDR_VAR 0 3
8740: PUSH
8741: LD_VAR 0 4
8745: ST_TO_ADDR
// end ;
8746: LD_VAR 0 3
8750: RET
// export function AddComUpgradeBreastwork ( units , buildings , upgradeBType ) ; var building , x , y , dir ; begin
8751: LD_INT 0
8753: PPUSH
8754: PPUSH
8755: PPUSH
8756: PPUSH
8757: PPUSH
// for building in buildings do
8758: LD_ADDR_VAR 0 5
8762: PUSH
8763: LD_VAR 0 2
8767: PUSH
8768: FOR_IN
8769: IFFALSE 8861
// begin x = GetX ( building ) ;
8771: LD_ADDR_VAR 0 6
8775: PUSH
8776: LD_VAR 0 5
8780: PPUSH
8781: CALL_OW 250
8785: ST_TO_ADDR
// y = GetY ( building ) ;
8786: LD_ADDR_VAR 0 7
8790: PUSH
8791: LD_VAR 0 5
8795: PPUSH
8796: CALL_OW 251
8800: ST_TO_ADDR
// dir = GetDir ( building ) ;
8801: LD_ADDR_VAR 0 8
8805: PUSH
8806: LD_VAR 0 5
8810: PPUSH
8811: CALL_OW 254
8815: ST_TO_ADDR
// AddComDismantle ( units , building ) ;
8816: LD_VAR 0 1
8820: PPUSH
8821: LD_VAR 0 5
8825: PPUSH
8826: CALL_OW 227
// AddComBuild ( units , upgradeBType , x , y , dir ) ;
8830: LD_VAR 0 1
8834: PPUSH
8835: LD_VAR 0 3
8839: PPUSH
8840: LD_VAR 0 6
8844: PPUSH
8845: LD_VAR 0 7
8849: PPUSH
8850: LD_VAR 0 8
8854: PPUSH
8855: CALL_OW 205
// end ;
8859: GO 8768
8861: POP
8862: POP
// end ;
8863: LD_VAR 0 4
8867: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list , am_tech_list ; begin
8868: LD_INT 0
8870: PPUSH
8871: PPUSH
8872: PPUSH
8873: PPUSH
8874: PPUSH
8875: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8876: LD_ADDR_VAR 0 8
8880: PUSH
8881: LD_INT 48
8883: PUSH
8884: LD_INT 49
8886: PUSH
8887: LD_INT 50
8889: PUSH
8890: LD_INT 20
8892: PUSH
8893: LD_INT 1
8895: PUSH
8896: LD_INT 51
8898: PUSH
8899: LD_INT 52
8901: PUSH
8902: LD_INT 69
8904: PUSH
8905: LD_INT 39
8907: PUSH
8908: LD_INT 34
8910: PUSH
8911: LD_INT 40
8913: PUSH
8914: LD_INT 53
8916: PUSH
8917: LD_INT 71
8919: PUSH
8920: LD_INT 57
8922: PUSH
8923: LD_INT 58
8925: PUSH
8926: LD_INT 44
8928: PUSH
8929: LD_INT 32
8931: PUSH
8932: LD_INT 27
8934: PUSH
8935: LD_INT 23
8937: PUSH
8938: LD_INT 33
8940: PUSH
8941: LD_INT 59
8943: PUSH
8944: LD_INT 54
8946: PUSH
8947: LD_INT 55
8949: PUSH
8950: LD_INT 56
8952: PUSH
8953: LD_INT 63
8955: PUSH
8956: LD_INT 64
8958: PUSH
8959: LD_INT 65
8961: PUSH
8962: LD_INT 30
8964: PUSH
8965: LD_INT 31
8967: PUSH
8968: LD_INT 21
8970: PUSH
8971: LD_INT 22
8973: PUSH
8974: LD_INT 25
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: ST_TO_ADDR
// am_tech_list = GetTechNation ( 1 , 1 , state_enabled ) ;
9011: LD_ADDR_VAR 0 9
9015: PUSH
9016: LD_INT 1
9018: PPUSH
9019: LD_INT 1
9021: PPUSH
9022: LD_INT 1
9024: PPUSH
9025: CALL 32392 0 3
9029: ST_TO_ADDR
// for i = 1 to ru_tech_list do
9030: LD_ADDR_VAR 0 5
9034: PUSH
9035: DOUBLE
9036: LD_INT 1
9038: DEC
9039: ST_TO_ADDR
9040: LD_VAR 0 8
9044: PUSH
9045: FOR_TO
9046: IFFALSE 9122
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
9048: LD_VAR 0 8
9052: PUSH
9053: LD_VAR 0 5
9057: ARRAY
9058: PPUSH
9059: LD_VAR 0 1
9063: PPUSH
9064: CALL_OW 321
9068: PUSH
9069: LD_INT 1
9071: EQUAL
9072: PUSH
9073: LD_VAR 0 8
9077: PUSH
9078: LD_VAR 0 5
9082: ARRAY
9083: PPUSH
9084: LD_VAR 0 3
9088: PPUSH
9089: CALL_OW 482
9093: PUSH
9094: LD_INT 1
9096: EQUAL
9097: AND
9098: IFFALSE 9120
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
9100: LD_VAR 0 2
9104: PPUSH
9105: LD_VAR 0 8
9109: PUSH
9110: LD_VAR 0 5
9114: ARRAY
9115: PPUSH
9116: CALL_OW 184
9120: GO 9045
9122: POP
9123: POP
// for i = 1 to am_tech_list do
9124: LD_ADDR_VAR 0 5
9128: PUSH
9129: DOUBLE
9130: LD_INT 1
9132: DEC
9133: ST_TO_ADDR
9134: LD_VAR 0 9
9138: PUSH
9139: FOR_TO
9140: IFFALSE 9216
// if GetTech ( am_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( am_tech_list [ i ] , nation ) = true then
9142: LD_VAR 0 9
9146: PUSH
9147: LD_VAR 0 5
9151: ARRAY
9152: PPUSH
9153: LD_VAR 0 1
9157: PPUSH
9158: CALL_OW 321
9162: PUSH
9163: LD_INT 1
9165: EQUAL
9166: PUSH
9167: LD_VAR 0 9
9171: PUSH
9172: LD_VAR 0 5
9176: ARRAY
9177: PPUSH
9178: LD_VAR 0 3
9182: PPUSH
9183: CALL_OW 482
9187: PUSH
9188: LD_INT 1
9190: EQUAL
9191: AND
9192: IFFALSE 9214
// AddComResearch ( lab , am_tech_list [ i ] ) ;
9194: LD_VAR 0 2
9198: PPUSH
9199: LD_VAR 0 9
9203: PUSH
9204: LD_VAR 0 5
9208: ARRAY
9209: PPUSH
9210: CALL_OW 184
9214: GO 9139
9216: POP
9217: POP
// end ;
9218: LD_VAR 0 4
9222: RET
// export function MoveKurinUnitsToBuildings ; var i , lab , fac , bunker , tmp , pom , canTakeUnits , diffUnits ; begin
9223: LD_INT 0
9225: PPUSH
9226: PPUSH
9227: PPUSH
9228: PPUSH
9229: PPUSH
9230: PPUSH
9231: PPUSH
9232: PPUSH
9233: PPUSH
// lab = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
9234: LD_ADDR_VAR 0 3
9238: PUSH
9239: LD_INT 22
9241: PUSH
9242: LD_INT 6
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: PUSH
9249: LD_INT 21
9251: PUSH
9252: LD_INT 3
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: PUSH
9259: LD_INT 30
9261: PUSH
9262: LD_INT 6
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: LIST
9273: PPUSH
9274: CALL_OW 69
9278: PUSH
9279: LD_INT 1
9281: ARRAY
9282: ST_TO_ADDR
// fac = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9283: LD_ADDR_VAR 0 4
9287: PUSH
9288: LD_INT 22
9290: PUSH
9291: LD_INT 6
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: PUSH
9298: LD_INT 21
9300: PUSH
9301: LD_INT 3
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: PUSH
9308: LD_INT 30
9310: PUSH
9311: LD_INT 3
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: LIST
9322: PPUSH
9323: CALL_OW 69
9327: PUSH
9328: LD_INT 1
9330: ARRAY
9331: ST_TO_ADDR
// diffUnits = diffUnits ^ Kurin ;
9332: LD_ADDR_VAR 0 9
9336: PUSH
9337: LD_VAR 0 9
9341: PUSH
9342: LD_EXP 62
9346: ADD
9347: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
9348: LD_ADDR_VAR 0 9
9352: PUSH
9353: LD_VAR 0 9
9357: PUSH
9358: LD_EXP 80
9362: ADD
9363: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
9364: LD_ADDR_VAR 0 9
9368: PUSH
9369: LD_VAR 0 9
9373: PUSH
9374: LD_EXP 72
9378: ADD
9379: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9380: LD_ADDR_VAR 0 8
9384: PUSH
9385: LD_INT 18
9387: PPUSH
9388: LD_INT 22
9390: PUSH
9391: LD_INT 6
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: PUSH
9398: LD_INT 21
9400: PUSH
9401: LD_INT 1
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: LD_INT 3
9410: PUSH
9411: LD_INT 60
9413: PUSH
9414: EMPTY
9415: LIST
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: LIST
9425: PPUSH
9426: CALL_OW 70
9430: PUSH
9431: LD_VAR 0 9
9435: DIFF
9436: ST_TO_ADDR
// if not canTakeUnits then
9437: LD_VAR 0 8
9441: NOT
9442: IFFALSE 9475
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 4 , neededUnitsSpawn [ 3 ] + 2 ) ;
9444: LD_ADDR_EXP 82
9448: PUSH
9449: LD_EXP 82
9453: PPUSH
9454: LD_INT 4
9456: PPUSH
9457: LD_EXP 82
9461: PUSH
9462: LD_INT 3
9464: ARRAY
9465: PUSH
9466: LD_INT 2
9468: PLUS
9469: PPUSH
9470: CALL_OW 1
9474: ST_TO_ADDR
// if canTakeUnits > 2 then
9475: LD_VAR 0 8
9479: PUSH
9480: LD_INT 2
9482: GREATER
9483: IFFALSE 9553
// begin for i := 1 to rand ( 1 , 2 ) do
9485: LD_ADDR_VAR 0 2
9489: PUSH
9490: DOUBLE
9491: LD_INT 1
9493: DEC
9494: ST_TO_ADDR
9495: LD_INT 1
9497: PPUSH
9498: LD_INT 2
9500: PPUSH
9501: CALL_OW 12
9505: PUSH
9506: FOR_TO
9507: IFFALSE 9549
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9509: LD_VAR 0 8
9513: PUSH
9514: LD_VAR 0 2
9518: ARRAY
9519: PPUSH
9520: LD_VAR 0 3
9524: PPUSH
9525: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9529: LD_VAR 0 8
9533: PUSH
9534: LD_VAR 0 2
9538: ARRAY
9539: PPUSH
9540: LD_INT 4
9542: PPUSH
9543: CALL_OW 183
// end ;
9547: GO 9506
9549: POP
9550: POP
// end else
9551: GO 9621
// begin for i := 1 to rand ( 1 , canTakeUnits ) do
9553: LD_ADDR_VAR 0 2
9557: PUSH
9558: DOUBLE
9559: LD_INT 1
9561: DEC
9562: ST_TO_ADDR
9563: LD_INT 1
9565: PPUSH
9566: LD_VAR 0 8
9570: PPUSH
9571: CALL_OW 12
9575: PUSH
9576: FOR_TO
9577: IFFALSE 9619
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9579: LD_VAR 0 8
9583: PUSH
9584: LD_VAR 0 2
9588: ARRAY
9589: PPUSH
9590: LD_VAR 0 3
9594: PPUSH
9595: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9599: LD_VAR 0 8
9603: PUSH
9604: LD_VAR 0 2
9608: ARRAY
9609: PPUSH
9610: LD_INT 4
9612: PPUSH
9613: CALL_OW 183
// end ;
9617: GO 9576
9619: POP
9620: POP
// end ; wait ( 0 0$01 ) ;
9621: LD_INT 35
9623: PPUSH
9624: CALL_OW 67
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9628: LD_ADDR_VAR 0 8
9632: PUSH
9633: LD_INT 18
9635: PPUSH
9636: LD_INT 22
9638: PUSH
9639: LD_INT 6
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: PUSH
9646: LD_INT 21
9648: PUSH
9649: LD_INT 1
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 3
9658: PUSH
9659: LD_INT 60
9661: PUSH
9662: EMPTY
9663: LIST
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: LIST
9673: PPUSH
9674: CALL_OW 70
9678: PUSH
9679: LD_VAR 0 9
9683: DIFF
9684: ST_TO_ADDR
// pom = 6 ;
9685: LD_ADDR_VAR 0 7
9689: PUSH
9690: LD_INT 6
9692: ST_TO_ADDR
// if canTakeUnits then
9693: LD_VAR 0 8
9697: IFFALSE 9814
// for i = 1 to canTakeUnits do
9699: LD_ADDR_VAR 0 2
9703: PUSH
9704: DOUBLE
9705: LD_INT 1
9707: DEC
9708: ST_TO_ADDR
9709: LD_VAR 0 8
9713: PUSH
9714: FOR_TO
9715: IFFALSE 9812
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
9717: LD_VAR 0 8
9721: PUSH
9722: LD_VAR 0 2
9726: ARRAY
9727: PPUSH
9728: CALL_OW 257
9732: PUSH
9733: LD_INT 3
9735: NONEQUAL
9736: IFFALSE 9776
// begin ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9738: LD_VAR 0 8
9742: PUSH
9743: LD_VAR 0 2
9747: ARRAY
9748: PPUSH
9749: LD_VAR 0 4
9753: PPUSH
9754: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_mechanic ) ;
9758: LD_VAR 0 8
9762: PUSH
9763: LD_VAR 0 2
9767: ARRAY
9768: PPUSH
9769: LD_INT 3
9771: PPUSH
9772: CALL_OW 183
// end ; ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9776: LD_VAR 0 8
9780: PUSH
9781: LD_VAR 0 2
9785: ARRAY
9786: PPUSH
9787: LD_VAR 0 4
9791: PPUSH
9792: CALL_OW 120
// pom = pom - 1 ;
9796: LD_ADDR_VAR 0 7
9800: PUSH
9801: LD_VAR 0 7
9805: PUSH
9806: LD_INT 1
9808: MINUS
9809: ST_TO_ADDR
// end ;
9810: GO 9714
9812: POP
9813: POP
// if pom > 0 then
9814: LD_VAR 0 7
9818: PUSH
9819: LD_INT 0
9821: GREATER
9822: IFFALSE 9847
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
9824: LD_ADDR_EXP 82
9828: PUSH
9829: LD_EXP 82
9833: PPUSH
9834: LD_INT 3
9836: PPUSH
9837: LD_VAR 0 7
9841: PPUSH
9842: CALL_OW 1
9846: ST_TO_ADDR
// wait ( 0 0$01 ) ;
9847: LD_INT 35
9849: PPUSH
9850: CALL_OW 67
// for bunker in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_occupied ] ] ] ) do
9854: LD_ADDR_VAR 0 5
9858: PUSH
9859: LD_INT 22
9861: PUSH
9862: LD_INT 6
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PUSH
9869: LD_INT 21
9871: PUSH
9872: LD_INT 3
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PUSH
9879: LD_INT 30
9881: PUSH
9882: LD_INT 32
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PUSH
9889: LD_INT 3
9891: PUSH
9892: LD_INT 59
9894: PUSH
9895: EMPTY
9896: LIST
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: PPUSH
9908: CALL_OW 69
9912: PUSH
9913: FOR_IN
9914: IFFALSE 10160
// begin canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9916: LD_ADDR_VAR 0 8
9920: PUSH
9921: LD_INT 18
9923: PPUSH
9924: LD_INT 22
9926: PUSH
9927: LD_INT 6
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: LD_INT 21
9936: PUSH
9937: LD_INT 1
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: LD_INT 3
9946: PUSH
9947: LD_INT 60
9949: PUSH
9950: EMPTY
9951: LIST
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: LIST
9961: PPUSH
9962: CALL_OW 70
9966: PUSH
9967: LD_VAR 0 9
9971: DIFF
9972: ST_TO_ADDR
// if canTakeUnits then
9973: LD_VAR 0 8
9977: IFFALSE 10111
// begin if GetClass ( canTakeUnits [ 1 ] ) <> 1 then
9979: LD_VAR 0 8
9983: PUSH
9984: LD_INT 1
9986: ARRAY
9987: PPUSH
9988: CALL_OW 257
9992: PUSH
9993: LD_INT 1
9995: NONEQUAL
9996: IFFALSE 10091
// begin ComEnterUnit ( canTakeUnits [ 1 ] , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
9998: LD_VAR 0 8
10002: PUSH
10003: LD_INT 1
10005: ARRAY
10006: PPUSH
10007: LD_INT 22
10009: PUSH
10010: LD_INT 6
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: PUSH
10017: LD_INT 21
10019: PUSH
10020: LD_INT 3
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: PUSH
10027: LD_INT 30
10029: PUSH
10030: LD_INT 5
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: LIST
10041: PPUSH
10042: CALL_OW 69
10046: PUSH
10047: LD_INT 1
10049: ARRAY
10050: PPUSH
10051: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ 1 ] , 1 ) ;
10055: LD_VAR 0 8
10059: PUSH
10060: LD_INT 1
10062: ARRAY
10063: PPUSH
10064: LD_INT 1
10066: PPUSH
10067: CALL_OW 183
// AddComExitBuilding ( canTakeUnits [ 1 ] ) ;
10071: LD_VAR 0 8
10075: PUSH
10076: LD_INT 1
10078: ARRAY
10079: PPUSH
10080: CALL_OW 182
// wait ( 0 0$1 ) ;
10084: LD_INT 35
10086: PPUSH
10087: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ 1 ] , bunker ) ;
10091: LD_VAR 0 8
10095: PUSH
10096: LD_INT 1
10098: ARRAY
10099: PPUSH
10100: LD_VAR 0 5
10104: PPUSH
10105: CALL_OW 120
// end else
10109: GO 10158
// begin kirovBunkersToOccupy = kirovBunkersToOccupy ^ bunker ;
10111: LD_ADDR_EXP 74
10115: PUSH
10116: LD_EXP 74
10120: PUSH
10121: LD_VAR 0 5
10125: ADD
10126: ST_TO_ADDR
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 1 , neededUnitsSpawn [ 1 ] + 1 ) ;
10127: LD_ADDR_EXP 82
10131: PUSH
10132: LD_EXP 82
10136: PPUSH
10137: LD_INT 1
10139: PPUSH
10140: LD_EXP 82
10144: PUSH
10145: LD_INT 1
10147: ARRAY
10148: PUSH
10149: LD_INT 1
10151: PLUS
10152: PPUSH
10153: CALL_OW 1
10157: ST_TO_ADDR
// end ; end ;
10158: GO 9913
10160: POP
10161: POP
// end ;
10162: LD_VAR 0 1
10166: RET
// export function IsEnemyNear ( unit , enemySide ) ; var nearUnit ; begin
10167: LD_INT 0
10169: PPUSH
10170: PPUSH
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , enemySide ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ;
10171: LD_ADDR_VAR 0 4
10175: PUSH
10176: LD_INT 22
10178: PUSH
10179: LD_VAR 0 2
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PUSH
10188: LD_INT 50
10190: PUSH
10191: EMPTY
10192: LIST
10193: PUSH
10194: LD_INT 2
10196: PUSH
10197: LD_INT 21
10199: PUSH
10200: LD_INT 1
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PUSH
10207: LD_INT 21
10209: PUSH
10210: LD_INT 2
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: LIST
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: PPUSH
10227: CALL_OW 69
10231: PPUSH
10232: LD_VAR 0 1
10236: PPUSH
10237: CALL_OW 74
10241: ST_TO_ADDR
// if GetDistUnits ( nearUnit , unit ) < 13 then
10242: LD_VAR 0 4
10246: PPUSH
10247: LD_VAR 0 1
10251: PPUSH
10252: CALL_OW 296
10256: PUSH
10257: LD_INT 13
10259: LESS
10260: IFFALSE 10272
// begin result = true ;
10262: LD_ADDR_VAR 0 3
10266: PUSH
10267: LD_INT 1
10269: ST_TO_ADDR
// exit ;
10270: GO 10280
// end ; result = false ;
10272: LD_ADDR_VAR 0 3
10276: PUSH
10277: LD_INT 0
10279: ST_TO_ADDR
// end ;
10280: LD_VAR 0 3
10284: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
10285: LD_INT 0
10287: PPUSH
10288: PPUSH
10289: PPUSH
10290: PPUSH
10291: PPUSH
10292: PPUSH
10293: PPUSH
10294: PPUSH
10295: PPUSH
10296: PPUSH
10297: PPUSH
10298: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
10299: LD_VAR 0 1
10303: PPUSH
10304: CALL_OW 302
10308: NOT
10309: PUSH
10310: LD_VAR 0 4
10314: PUSH
10315: LD_INT 1
10317: EQUAL
10318: OR
10319: PUSH
10320: LD_VAR 0 2
10324: PPUSH
10325: LD_VAR 0 3
10329: PPUSH
10330: CALL_OW 488
10334: NOT
10335: OR
10336: PUSH
10337: LD_VAR 0 1
10341: PPUSH
10342: LD_VAR 0 2
10346: PPUSH
10347: LD_VAR 0 3
10351: PPUSH
10352: CALL_OW 297
10356: PUSH
10357: LD_VAR 0 4
10361: GREATEREQUAL
10362: OR
10363: PUSH
10364: LD_VAR 0 5
10368: PUSH
10369: LD_INT 1
10371: PUSH
10372: LD_INT 0
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: IN
10379: NOT
10380: OR
10381: IFFALSE 10385
// exit ;
10383: GO 11942
// attempts = 0 ;
10385: LD_ADDR_VAR 0 17
10389: PUSH
10390: LD_INT 0
10392: ST_TO_ADDR
// repeat list_nearest = [ ] ;
10393: LD_ADDR_VAR 0 7
10397: PUSH
10398: EMPTY
10399: ST_TO_ADDR
// list_coords = [ ] ;
10400: LD_ADDR_VAR 0 8
10404: PUSH
10405: EMPTY
10406: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
10407: LD_ADDR_VAR 0 9
10411: PUSH
10412: LD_VAR 0 2
10416: PPUSH
10417: LD_VAR 0 3
10421: PPUSH
10422: LD_VAR 0 1
10426: PPUSH
10427: CALL_OW 250
10431: PPUSH
10432: LD_VAR 0 1
10436: PPUSH
10437: CALL_OW 251
10441: PPUSH
10442: CALL 11947 0 4
10446: ST_TO_ADDR
// if attempts = 0 then
10447: LD_VAR 0 17
10451: PUSH
10452: LD_INT 0
10454: EQUAL
10455: IFFALSE 10563
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
10457: LD_ADDR_VAR 0 10
10461: PUSH
10462: LD_VAR 0 9
10466: PUSH
10467: LD_VAR 0 9
10471: PUSH
10472: LD_INT 1
10474: PLUS
10475: PUSH
10476: LD_VAR 0 9
10480: PUSH
10481: LD_INT 1
10483: MINUS
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: LIST
10489: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
10490: LD_VAR 0 10
10494: PUSH
10495: LD_INT 2
10497: ARRAY
10498: PUSH
10499: LD_INT 6
10501: EQUAL
10502: IFFALSE 10525
// dir_list = Replace ( dir_list , 2 , 0 ) ;
10504: LD_ADDR_VAR 0 10
10508: PUSH
10509: LD_VAR 0 10
10513: PPUSH
10514: LD_INT 2
10516: PPUSH
10517: LD_INT 0
10519: PPUSH
10520: CALL_OW 1
10524: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
10525: LD_VAR 0 10
10529: PUSH
10530: LD_INT 3
10532: ARRAY
10533: PUSH
10534: LD_INT 1
10536: NEG
10537: EQUAL
10538: IFFALSE 10561
// dir_list = Replace ( dir_list , 3 , 5 ) ;
10540: LD_ADDR_VAR 0 10
10544: PUSH
10545: LD_VAR 0 10
10549: PPUSH
10550: LD_INT 3
10552: PPUSH
10553: LD_INT 5
10555: PPUSH
10556: CALL_OW 1
10560: ST_TO_ADDR
// end else
10561: GO 10600
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
10563: LD_ADDR_VAR 0 10
10567: PUSH
10568: LD_INT 0
10570: PUSH
10571: LD_INT 1
10573: PUSH
10574: LD_INT 2
10576: PUSH
10577: LD_INT 3
10579: PUSH
10580: LD_INT 4
10582: PUSH
10583: LD_INT 5
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: PUSH
10594: LD_VAR 0 9
10598: DIFF
10599: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
10600: LD_ADDR_VAR 0 14
10604: PUSH
10605: DOUBLE
10606: LD_INT 1
10608: DEC
10609: ST_TO_ADDR
10610: LD_VAR 0 10
10614: PUSH
10615: LD_INT 0
10617: PLUS
10618: PUSH
10619: FOR_TO
10620: IFFALSE 10942
// case dir_list [ c ] of 0 :
10622: LD_VAR 0 10
10626: PUSH
10627: LD_VAR 0 14
10631: ARRAY
10632: PUSH
10633: LD_INT 0
10635: DOUBLE
10636: EQUAL
10637: IFTRUE 10641
10639: GO 10682
10641: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
10642: LD_ADDR_VAR 0 8
10646: PUSH
10647: LD_VAR 0 8
10651: PPUSH
10652: LD_INT 1
10654: PPUSH
10655: LD_VAR 0 2
10659: PUSH
10660: LD_VAR 0 3
10664: PUSH
10665: LD_VAR 0 4
10669: MINUS
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: PPUSH
10675: CALL_OW 2
10679: ST_TO_ADDR
10680: GO 10940
10682: LD_INT 1
10684: DOUBLE
10685: EQUAL
10686: IFTRUE 10690
10688: GO 10731
10690: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
10691: LD_ADDR_VAR 0 8
10695: PUSH
10696: LD_VAR 0 8
10700: PPUSH
10701: LD_INT 1
10703: PPUSH
10704: LD_VAR 0 2
10708: PUSH
10709: LD_VAR 0 4
10713: PLUS
10714: PUSH
10715: LD_VAR 0 3
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PPUSH
10724: CALL_OW 2
10728: ST_TO_ADDR
10729: GO 10940
10731: LD_INT 2
10733: DOUBLE
10734: EQUAL
10735: IFTRUE 10739
10737: GO 10786
10739: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
10740: LD_ADDR_VAR 0 8
10744: PUSH
10745: LD_VAR 0 8
10749: PPUSH
10750: LD_INT 1
10752: PPUSH
10753: LD_VAR 0 2
10757: PUSH
10758: LD_VAR 0 4
10762: PLUS
10763: PUSH
10764: LD_VAR 0 3
10768: PUSH
10769: LD_VAR 0 4
10773: PLUS
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PPUSH
10779: CALL_OW 2
10783: ST_TO_ADDR
10784: GO 10940
10786: LD_INT 3
10788: DOUBLE
10789: EQUAL
10790: IFTRUE 10794
10792: GO 10835
10794: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
10795: LD_ADDR_VAR 0 8
10799: PUSH
10800: LD_VAR 0 8
10804: PPUSH
10805: LD_INT 1
10807: PPUSH
10808: LD_VAR 0 2
10812: PUSH
10813: LD_VAR 0 3
10817: PUSH
10818: LD_VAR 0 4
10822: PLUS
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: PPUSH
10828: CALL_OW 2
10832: ST_TO_ADDR
10833: GO 10940
10835: LD_INT 4
10837: DOUBLE
10838: EQUAL
10839: IFTRUE 10843
10841: GO 10884
10843: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
10844: LD_ADDR_VAR 0 8
10848: PUSH
10849: LD_VAR 0 8
10853: PPUSH
10854: LD_INT 1
10856: PPUSH
10857: LD_VAR 0 2
10861: PUSH
10862: LD_VAR 0 4
10866: MINUS
10867: PUSH
10868: LD_VAR 0 3
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: PPUSH
10877: CALL_OW 2
10881: ST_TO_ADDR
10882: GO 10940
10884: LD_INT 5
10886: DOUBLE
10887: EQUAL
10888: IFTRUE 10892
10890: GO 10939
10892: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
10893: LD_ADDR_VAR 0 8
10897: PUSH
10898: LD_VAR 0 8
10902: PPUSH
10903: LD_INT 1
10905: PPUSH
10906: LD_VAR 0 2
10910: PUSH
10911: LD_VAR 0 4
10915: MINUS
10916: PUSH
10917: LD_VAR 0 3
10921: PUSH
10922: LD_VAR 0 4
10926: MINUS
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PPUSH
10932: CALL_OW 2
10936: ST_TO_ADDR
10937: GO 10940
10939: POP
10940: GO 10619
10942: POP
10943: POP
// if dist < 30 then
10944: LD_VAR 0 4
10948: PUSH
10949: LD_INT 30
10951: LESS
10952: IFFALSE 10964
// c = 1 else
10954: LD_ADDR_VAR 0 14
10958: PUSH
10959: LD_INT 1
10961: ST_TO_ADDR
10962: GO 10972
// c = 2 ;
10964: LD_ADDR_VAR 0 14
10968: PUSH
10969: LD_INT 2
10971: ST_TO_ADDR
// b = 1 ;
10972: LD_ADDR_VAR 0 11
10976: PUSH
10977: LD_INT 1
10979: ST_TO_ADDR
// while b <= ( dist - 1 ) do
10980: LD_VAR 0 11
10984: PUSH
10985: LD_VAR 0 4
10989: PUSH
10990: LD_INT 1
10992: MINUS
10993: LESSEQUAL
10994: IFFALSE 11422
// begin if 0 in dir_list and 1 in dir_list then
10996: LD_INT 0
10998: PUSH
10999: LD_VAR 0 10
11003: IN
11004: PUSH
11005: LD_INT 1
11007: PUSH
11008: LD_VAR 0 10
11012: IN
11013: AND
11014: IFFALSE 11066
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
11016: LD_ADDR_VAR 0 8
11020: PUSH
11021: LD_VAR 0 8
11025: PPUSH
11026: LD_INT 1
11028: PPUSH
11029: LD_VAR 0 2
11033: PUSH
11034: LD_VAR 0 11
11038: PLUS
11039: PUSH
11040: LD_VAR 0 3
11044: PUSH
11045: LD_VAR 0 4
11049: MINUS
11050: PUSH
11051: LD_VAR 0 11
11055: PLUS
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PPUSH
11061: CALL_OW 2
11065: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
11066: LD_INT 1
11068: PUSH
11069: LD_VAR 0 10
11073: IN
11074: PUSH
11075: LD_INT 2
11077: PUSH
11078: LD_VAR 0 10
11082: IN
11083: AND
11084: IFFALSE 11130
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
11086: LD_ADDR_VAR 0 8
11090: PUSH
11091: LD_VAR 0 8
11095: PPUSH
11096: LD_INT 1
11098: PPUSH
11099: LD_VAR 0 2
11103: PUSH
11104: LD_VAR 0 4
11108: PLUS
11109: PUSH
11110: LD_VAR 0 3
11114: PUSH
11115: LD_VAR 0 11
11119: PLUS
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: PPUSH
11125: CALL_OW 2
11129: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
11130: LD_INT 2
11132: PUSH
11133: LD_VAR 0 10
11137: IN
11138: PUSH
11139: LD_INT 3
11141: PUSH
11142: LD_VAR 0 10
11146: IN
11147: AND
11148: IFFALSE 11200
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
11150: LD_ADDR_VAR 0 8
11154: PUSH
11155: LD_VAR 0 8
11159: PPUSH
11160: LD_INT 1
11162: PPUSH
11163: LD_VAR 0 2
11167: PUSH
11168: LD_VAR 0 4
11172: PLUS
11173: PUSH
11174: LD_VAR 0 11
11178: MINUS
11179: PUSH
11180: LD_VAR 0 3
11184: PUSH
11185: LD_VAR 0 4
11189: PLUS
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PPUSH
11195: CALL_OW 2
11199: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
11200: LD_INT 3
11202: PUSH
11203: LD_VAR 0 10
11207: IN
11208: PUSH
11209: LD_INT 4
11211: PUSH
11212: LD_VAR 0 10
11216: IN
11217: AND
11218: IFFALSE 11270
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
11220: LD_ADDR_VAR 0 8
11224: PUSH
11225: LD_VAR 0 8
11229: PPUSH
11230: LD_INT 1
11232: PPUSH
11233: LD_VAR 0 2
11237: PUSH
11238: LD_VAR 0 11
11242: MINUS
11243: PUSH
11244: LD_VAR 0 3
11248: PUSH
11249: LD_VAR 0 4
11253: PLUS
11254: PUSH
11255: LD_VAR 0 11
11259: MINUS
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PPUSH
11265: CALL_OW 2
11269: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
11270: LD_INT 4
11272: PUSH
11273: LD_VAR 0 10
11277: IN
11278: PUSH
11279: LD_INT 5
11281: PUSH
11282: LD_VAR 0 10
11286: IN
11287: AND
11288: IFFALSE 11334
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
11290: LD_ADDR_VAR 0 8
11294: PUSH
11295: LD_VAR 0 8
11299: PPUSH
11300: LD_INT 1
11302: PPUSH
11303: LD_VAR 0 2
11307: PUSH
11308: LD_VAR 0 4
11312: MINUS
11313: PUSH
11314: LD_VAR 0 3
11318: PUSH
11319: LD_VAR 0 11
11323: MINUS
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PPUSH
11329: CALL_OW 2
11333: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
11334: LD_INT 5
11336: PUSH
11337: LD_VAR 0 10
11341: IN
11342: PUSH
11343: LD_INT 0
11345: PUSH
11346: LD_VAR 0 10
11350: IN
11351: AND
11352: IFFALSE 11404
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
11354: LD_ADDR_VAR 0 8
11358: PUSH
11359: LD_VAR 0 8
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: LD_VAR 0 2
11371: PUSH
11372: LD_VAR 0 4
11376: MINUS
11377: PUSH
11378: LD_VAR 0 11
11382: PLUS
11383: PUSH
11384: LD_VAR 0 3
11388: PUSH
11389: LD_VAR 0 4
11393: MINUS
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PPUSH
11399: CALL_OW 2
11403: ST_TO_ADDR
// b = b + c end ;
11404: LD_ADDR_VAR 0 11
11408: PUSH
11409: LD_VAR 0 11
11413: PUSH
11414: LD_VAR 0 14
11418: PLUS
11419: ST_TO_ADDR
11420: GO 10980
// if list_coords = 0 then
11422: LD_VAR 0 8
11426: PUSH
11427: LD_INT 0
11429: EQUAL
11430: IFFALSE 11434
// exit ;
11432: GO 11942
// repeat min_dist = 5000 ;
11434: LD_ADDR_VAR 0 12
11438: PUSH
11439: LD_INT 5000
11441: ST_TO_ADDR
// for b in list_coords do
11442: LD_ADDR_VAR 0 11
11446: PUSH
11447: LD_VAR 0 8
11451: PUSH
11452: FOR_IN
11453: IFFALSE 11512
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
11455: LD_ADDR_VAR 0 13
11459: PUSH
11460: LD_VAR 0 1
11464: PPUSH
11465: LD_VAR 0 11
11469: PUSH
11470: LD_INT 1
11472: ARRAY
11473: PPUSH
11474: LD_VAR 0 11
11478: PUSH
11479: LD_INT 2
11481: ARRAY
11482: PPUSH
11483: CALL_OW 297
11487: ST_TO_ADDR
// if temp_dist < min_dist then
11488: LD_VAR 0 13
11492: PUSH
11493: LD_VAR 0 12
11497: LESS
11498: IFFALSE 11510
// min_dist = temp_dist ;
11500: LD_ADDR_VAR 0 12
11504: PUSH
11505: LD_VAR 0 13
11509: ST_TO_ADDR
// end ;
11510: GO 11452
11512: POP
11513: POP
// c = 0 ;
11514: LD_ADDR_VAR 0 14
11518: PUSH
11519: LD_INT 0
11521: ST_TO_ADDR
// repeat c = c + 1 ;
11522: LD_ADDR_VAR 0 14
11526: PUSH
11527: LD_VAR 0 14
11531: PUSH
11532: LD_INT 1
11534: PLUS
11535: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
11536: LD_VAR 0 1
11540: PPUSH
11541: LD_VAR 0 8
11545: PUSH
11546: LD_VAR 0 14
11550: ARRAY
11551: PUSH
11552: LD_INT 1
11554: ARRAY
11555: PPUSH
11556: LD_VAR 0 8
11560: PUSH
11561: LD_VAR 0 14
11565: ARRAY
11566: PUSH
11567: LD_INT 2
11569: ARRAY
11570: PPUSH
11571: CALL_OW 297
11575: PUSH
11576: LD_VAR 0 12
11580: EQUAL
11581: IFFALSE 11646
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
11583: LD_ADDR_VAR 0 7
11587: PUSH
11588: LD_VAR 0 7
11592: PPUSH
11593: LD_INT 1
11595: PPUSH
11596: LD_VAR 0 8
11600: PUSH
11601: LD_VAR 0 14
11605: ARRAY
11606: PPUSH
11607: CALL_OW 2
11611: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
11612: LD_ADDR_VAR 0 8
11616: PUSH
11617: LD_VAR 0 8
11621: PPUSH
11622: LD_VAR 0 14
11626: PPUSH
11627: CALL_OW 3
11631: ST_TO_ADDR
// c = c - 1 ;
11632: LD_ADDR_VAR 0 14
11636: PUSH
11637: LD_VAR 0 14
11641: PUSH
11642: LD_INT 1
11644: MINUS
11645: ST_TO_ADDR
// end ; until c = list_coords ;
11646: LD_VAR 0 14
11650: PUSH
11651: LD_VAR 0 8
11655: EQUAL
11656: IFFALSE 11522
// c = 0 ;
11658: LD_ADDR_VAR 0 14
11662: PUSH
11663: LD_INT 0
11665: ST_TO_ADDR
// if list_nearest > 0 then
11666: LD_VAR 0 7
11670: PUSH
11671: LD_INT 0
11673: GREATER
11674: IFFALSE 11816
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
11676: LD_ADDR_VAR 0 15
11680: PUSH
11681: LD_INT 1
11683: PPUSH
11684: LD_VAR 0 7
11688: PPUSH
11689: CALL_OW 12
11693: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
11694: LD_ADDR_VAR 0 16
11698: PUSH
11699: LD_VAR 0 7
11703: PUSH
11704: LD_VAR 0 15
11708: ARRAY
11709: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
11710: LD_VAR 0 16
11714: PUSH
11715: LD_INT 1
11717: ARRAY
11718: PPUSH
11719: LD_VAR 0 16
11723: PUSH
11724: LD_INT 2
11726: ARRAY
11727: PPUSH
11728: CALL_OW 488
11732: PUSH
11733: LD_INT 0
11735: GREATER
11736: PUSH
11737: LD_VAR 0 16
11741: PUSH
11742: LD_INT 1
11744: ARRAY
11745: PPUSH
11746: LD_VAR 0 16
11750: PUSH
11751: LD_INT 2
11753: ARRAY
11754: PPUSH
11755: CALL_OW 428
11759: PUSH
11760: LD_INT 0
11762: EQUAL
11763: AND
11764: IFFALSE 11776
// c = 1 else
11766: LD_ADDR_VAR 0 14
11770: PUSH
11771: LD_INT 1
11773: ST_TO_ADDR
11774: GO 11796
// list_nearest = Delete ( list_nearest , rand_num ) ;
11776: LD_ADDR_VAR 0 7
11780: PUSH
11781: LD_VAR 0 7
11785: PPUSH
11786: LD_VAR 0 15
11790: PPUSH
11791: CALL_OW 3
11795: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
11796: LD_VAR 0 14
11800: PUSH
11801: LD_INT 1
11803: EQUAL
11804: PUSH
11805: LD_VAR 0 7
11809: PUSH
11810: LD_INT 0
11812: EQUAL
11813: OR
11814: IFFALSE 11676
// end ; until c = 1 or list_coords = 0 ;
11816: LD_VAR 0 14
11820: PUSH
11821: LD_INT 1
11823: EQUAL
11824: PUSH
11825: LD_VAR 0 8
11829: PUSH
11830: LD_INT 0
11832: EQUAL
11833: OR
11834: IFFALSE 11434
// attempts = attempts + 1 ;
11836: LD_ADDR_VAR 0 17
11840: PUSH
11841: LD_VAR 0 17
11845: PUSH
11846: LD_INT 1
11848: PLUS
11849: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
11850: LD_VAR 0 14
11854: PUSH
11855: LD_INT 1
11857: EQUAL
11858: PUSH
11859: LD_VAR 0 17
11863: PUSH
11864: LD_INT 1
11866: GREATER
11867: OR
11868: IFFALSE 10393
// if c = 1 then
11870: LD_VAR 0 14
11874: PUSH
11875: LD_INT 1
11877: EQUAL
11878: IFFALSE 11942
// if add then
11880: LD_VAR 0 5
11884: IFFALSE 11915
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
11886: LD_VAR 0 1
11890: PPUSH
11891: LD_VAR 0 16
11895: PUSH
11896: LD_INT 1
11898: ARRAY
11899: PPUSH
11900: LD_VAR 0 16
11904: PUSH
11905: LD_INT 2
11907: ARRAY
11908: PPUSH
11909: CALL_OW 171
11913: GO 11942
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
11915: LD_VAR 0 1
11919: PPUSH
11920: LD_VAR 0 16
11924: PUSH
11925: LD_INT 1
11927: ARRAY
11928: PPUSH
11929: LD_VAR 0 16
11933: PUSH
11934: LD_INT 2
11936: ARRAY
11937: PPUSH
11938: CALL_OW 111
// end ;
11942: LD_VAR 0 6
11946: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
11947: LD_INT 0
11949: PPUSH
11950: PPUSH
11951: PPUSH
11952: PPUSH
11953: PPUSH
11954: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
11955: LD_VAR 0 1
11959: PPUSH
11960: LD_VAR 0 2
11964: PPUSH
11965: CALL_OW 488
11969: NOT
11970: PUSH
11971: LD_VAR 0 3
11975: PPUSH
11976: LD_VAR 0 4
11980: PPUSH
11981: CALL_OW 488
11985: NOT
11986: OR
11987: IFFALSE 12000
// begin result = - 1 ;
11989: LD_ADDR_VAR 0 5
11993: PUSH
11994: LD_INT 1
11996: NEG
11997: ST_TO_ADDR
// exit ;
11998: GO 12160
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
12000: LD_ADDR_VAR 0 6
12004: PUSH
12005: LD_VAR 0 1
12009: PPUSH
12010: LD_VAR 0 2
12014: PPUSH
12015: LD_VAR 0 3
12019: PPUSH
12020: LD_VAR 0 4
12024: PPUSH
12025: CALL_OW 298
12029: ST_TO_ADDR
// dist_2 = 99999 ;
12030: LD_ADDR_VAR 0 7
12034: PUSH
12035: LD_INT 99999
12037: ST_TO_ADDR
// for b = 0 to 5 do
12038: LD_ADDR_VAR 0 8
12042: PUSH
12043: DOUBLE
12044: LD_INT 0
12046: DEC
12047: ST_TO_ADDR
12048: LD_INT 5
12050: PUSH
12051: FOR_TO
12052: IFFALSE 12148
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
12054: LD_ADDR_VAR 0 9
12058: PUSH
12059: LD_VAR 0 1
12063: PPUSH
12064: LD_VAR 0 8
12068: PPUSH
12069: LD_VAR 0 6
12073: PPUSH
12074: CALL_OW 272
12078: PPUSH
12079: LD_VAR 0 2
12083: PPUSH
12084: LD_VAR 0 8
12088: PPUSH
12089: LD_VAR 0 6
12093: PPUSH
12094: CALL_OW 273
12098: PPUSH
12099: LD_VAR 0 3
12103: PPUSH
12104: LD_VAR 0 4
12108: PPUSH
12109: CALL_OW 298
12113: ST_TO_ADDR
// if temp_dist < dist_2 then
12114: LD_VAR 0 9
12118: PUSH
12119: LD_VAR 0 7
12123: LESS
12124: IFFALSE 12146
// begin dist_2 = temp_dist ;
12126: LD_ADDR_VAR 0 7
12130: PUSH
12131: LD_VAR 0 9
12135: ST_TO_ADDR
// dir = b ;
12136: LD_ADDR_VAR 0 10
12140: PUSH
12141: LD_VAR 0 8
12145: ST_TO_ADDR
// end ; end ;
12146: GO 12051
12148: POP
12149: POP
// result = dir ;
12150: LD_ADDR_VAR 0 5
12154: PUSH
12155: LD_VAR 0 10
12159: ST_TO_ADDR
// end ; end_of_file
12160: LD_VAR 0 5
12164: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
12165: LD_INT 0
12167: PPUSH
12168: PPUSH
12169: PPUSH
12170: PPUSH
12171: PPUSH
12172: PPUSH
12173: PPUSH
12174: PPUSH
12175: PPUSH
12176: PPUSH
12177: PPUSH
12178: PPUSH
12179: PPUSH
12180: PPUSH
12181: PPUSH
12182: PPUSH
12183: PPUSH
12184: PPUSH
12185: PPUSH
12186: PPUSH
12187: PPUSH
12188: PPUSH
12189: PPUSH
12190: PPUSH
12191: PPUSH
12192: PPUSH
12193: PPUSH
12194: PPUSH
// personel = [ ] ;
12195: LD_ADDR_VAR 0 18
12199: PUSH
12200: EMPTY
12201: ST_TO_ADDR
// vehicles = [ ] ;
12202: LD_ADDR_VAR 0 24
12206: PUSH
12207: EMPTY
12208: ST_TO_ADDR
// for unit in basePersonel do
12209: LD_ADDR_VAR 0 17
12213: PUSH
12214: LD_VAR 0 3
12218: PUSH
12219: FOR_IN
12220: IFFALSE 12268
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
12222: LD_ADDR_VAR 0 18
12226: PUSH
12227: LD_VAR 0 18
12231: PUSH
12232: LD_VAR 0 17
12236: PUSH
12237: LD_VAR 0 17
12241: PPUSH
12242: CALL_OW 310
12246: PUSH
12247: LD_VAR 0 17
12251: PPUSH
12252: CALL_OW 302
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: LIST
12261: PUSH
12262: EMPTY
12263: LIST
12264: ADD
12265: ST_TO_ADDR
12266: GO 12219
12268: POP
12269: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) do
12270: LD_ADDR_VAR 0 23
12274: PUSH
12275: LD_VAR 0 4
12279: PPUSH
12280: LD_INT 22
12282: PUSH
12283: LD_VAR 0 1
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 21
12294: PUSH
12295: LD_INT 2
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: PUSH
12302: LD_INT 50
12304: PUSH
12305: EMPTY
12306: LIST
12307: PUSH
12308: LD_INT 3
12310: PUSH
12311: LD_INT 2
12313: PUSH
12314: LD_INT 34
12316: PUSH
12317: LD_INT 12
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 34
12326: PUSH
12327: LD_INT 51
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 34
12336: PUSH
12337: LD_INT 32
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: PPUSH
12360: CALL_OW 70
12364: PUSH
12365: FOR_IN
12366: IFFALSE 12414
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
12368: LD_ADDR_VAR 0 24
12372: PUSH
12373: LD_VAR 0 24
12377: PUSH
12378: LD_VAR 0 23
12382: PUSH
12383: LD_VAR 0 23
12387: PPUSH
12388: CALL_OW 310
12392: PUSH
12393: LD_VAR 0 23
12397: PPUSH
12398: CALL_OW 302
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: LIST
12407: PUSH
12408: EMPTY
12409: LIST
12410: ADD
12411: ST_TO_ADDR
12412: GO 12365
12414: POP
12415: POP
// repeat soldiers = [ ] ;
12416: LD_ADDR_VAR 0 19
12420: PUSH
12421: EMPTY
12422: ST_TO_ADDR
// engineers = [ ] ;
12423: LD_ADDR_VAR 0 20
12427: PUSH
12428: EMPTY
12429: ST_TO_ADDR
// mechanics = [ ] ;
12430: LD_ADDR_VAR 0 21
12434: PUSH
12435: EMPTY
12436: ST_TO_ADDR
// scientists = [ ] ;
12437: LD_ADDR_VAR 0 22
12441: PUSH
12442: EMPTY
12443: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12444: LD_ADDR_VAR 0 29
12448: PUSH
12449: LD_VAR 0 4
12453: PPUSH
12454: LD_INT 22
12456: PUSH
12457: LD_VAR 0 1
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 21
12468: PUSH
12469: LD_INT 3
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: LD_INT 50
12478: PUSH
12479: EMPTY
12480: LIST
12481: PUSH
12482: LD_INT 2
12484: PUSH
12485: LD_INT 30
12487: PUSH
12488: LD_INT 0
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PUSH
12495: LD_INT 30
12497: PUSH
12498: LD_INT 1
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: LIST
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: PPUSH
12516: CALL_OW 70
12520: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
12521: LD_ADDR_VAR 0 30
12525: PUSH
12526: LD_VAR 0 4
12530: PPUSH
12531: LD_INT 22
12533: PUSH
12534: LD_VAR 0 1
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PUSH
12543: LD_INT 21
12545: PUSH
12546: LD_INT 3
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: LD_INT 50
12555: PUSH
12556: EMPTY
12557: LIST
12558: PUSH
12559: LD_INT 2
12561: PUSH
12562: LD_INT 30
12564: PUSH
12565: LD_INT 2
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: LD_INT 30
12574: PUSH
12575: LD_INT 3
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: LIST
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: PPUSH
12593: CALL_OW 70
12597: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
12598: LD_ADDR_VAR 0 31
12602: PUSH
12603: LD_VAR 0 4
12607: PPUSH
12608: LD_INT 22
12610: PUSH
12611: LD_VAR 0 1
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 21
12622: PUSH
12623: LD_INT 3
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: LD_INT 50
12632: PUSH
12633: EMPTY
12634: LIST
12635: PUSH
12636: LD_INT 2
12638: PUSH
12639: LD_INT 30
12641: PUSH
12642: LD_INT 6
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: LD_INT 30
12651: PUSH
12652: LD_INT 7
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: PUSH
12659: LD_INT 30
12661: PUSH
12662: LD_INT 8
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: PPUSH
12681: CALL_OW 70
12685: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
12686: LD_ADDR_VAR 0 32
12690: PUSH
12691: LD_VAR 0 4
12695: PPUSH
12696: LD_INT 22
12698: PUSH
12699: LD_VAR 0 1
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PUSH
12708: LD_INT 21
12710: PUSH
12711: LD_INT 3
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 50
12720: PUSH
12721: EMPTY
12722: LIST
12723: PUSH
12724: LD_INT 2
12726: PUSH
12727: LD_INT 30
12729: PUSH
12730: LD_INT 31
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PUSH
12737: LD_INT 30
12739: PUSH
12740: LD_INT 32
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: LIST
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: PPUSH
12758: CALL_OW 70
12762: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
12763: LD_ADDR_VAR 0 33
12767: PUSH
12768: LD_VAR 0 4
12772: PPUSH
12773: LD_INT 22
12775: PUSH
12776: LD_VAR 0 1
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: LD_INT 21
12787: PUSH
12788: LD_INT 3
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PUSH
12795: LD_INT 50
12797: PUSH
12798: EMPTY
12799: LIST
12800: PUSH
12801: LD_INT 2
12803: PUSH
12804: LD_INT 30
12806: PUSH
12807: LD_INT 4
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PUSH
12814: LD_INT 30
12816: PUSH
12817: LD_INT 5
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: LIST
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: PPUSH
12835: CALL_OW 70
12839: ST_TO_ADDR
// for i := 1 to personel do
12840: LD_ADDR_VAR 0 13
12844: PUSH
12845: DOUBLE
12846: LD_INT 1
12848: DEC
12849: ST_TO_ADDR
12850: LD_VAR 0 18
12854: PUSH
12855: FOR_TO
12856: IFFALSE 13062
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
12858: LD_VAR 0 18
12862: PUSH
12863: LD_VAR 0 13
12867: ARRAY
12868: PUSH
12869: LD_INT 1
12871: ARRAY
12872: PPUSH
12873: CALL_OW 256
12877: PUSH
12878: LD_INT 1000
12880: EQUAL
12881: IFFALSE 12923
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
12883: LD_ADDR_VAR 0 18
12887: PUSH
12888: LD_VAR 0 18
12892: PPUSH
12893: LD_VAR 0 13
12897: PUSH
12898: LD_VAR 0 18
12902: PUSH
12903: LD_VAR 0 13
12907: ARRAY
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PPUSH
12913: LD_INT 1
12915: PPUSH
12916: CALL 37275 0 3
12920: ST_TO_ADDR
// end else
12921: GO 13010
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
12923: LD_VAR 0 18
12927: PUSH
12928: LD_VAR 0 13
12932: ARRAY
12933: PUSH
12934: LD_INT 1
12936: ARRAY
12937: PPUSH
12938: CALL_OW 256
12942: PUSH
12943: LD_INT 950
12945: LESSEQUAL
12946: IFFALSE 13010
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 0 ) ;
12948: LD_ADDR_VAR 0 18
12952: PUSH
12953: LD_VAR 0 18
12957: PPUSH
12958: LD_VAR 0 13
12962: PUSH
12963: LD_VAR 0 18
12967: PUSH
12968: LD_VAR 0 13
12972: ARRAY
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: PPUSH
12978: LD_INT 0
12980: PPUSH
12981: CALL 37275 0 3
12985: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
12986: LD_VAR 0 18
12990: PUSH
12991: LD_VAR 0 13
12995: ARRAY
12996: PUSH
12997: LD_INT 1
12999: ARRAY
13000: PPUSH
13001: LD_VAR 0 5
13005: PPUSH
13006: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
13010: LD_VAR 0 18
13014: PUSH
13015: LD_VAR 0 13
13019: ARRAY
13020: PUSH
13021: LD_INT 1
13023: ARRAY
13024: PPUSH
13025: CALL_OW 256
13029: PUSH
13030: LD_INT 250
13032: LESS
13033: IFFALSE 13060
// personel = personel diff [ personel [ i ] ] ;
13035: LD_ADDR_VAR 0 18
13039: PUSH
13040: LD_VAR 0 18
13044: PUSH
13045: LD_VAR 0 18
13049: PUSH
13050: LD_VAR 0 13
13054: ARRAY
13055: PUSH
13056: EMPTY
13057: LIST
13058: DIFF
13059: ST_TO_ADDR
// end ;
13060: GO 12855
13062: POP
13063: POP
// for i := 1 to vehicles do
13064: LD_ADDR_VAR 0 13
13068: PUSH
13069: DOUBLE
13070: LD_INT 1
13072: DEC
13073: ST_TO_ADDR
13074: LD_VAR 0 24
13078: PUSH
13079: FOR_TO
13080: IFFALSE 13466
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
13082: LD_VAR 0 24
13086: PUSH
13087: LD_VAR 0 13
13091: ARRAY
13092: PUSH
13093: LD_INT 1
13095: ARRAY
13096: PPUSH
13097: CALL_OW 261
13101: PUSH
13102: LD_INT 50
13104: LESS
13105: IFFALSE 13129
// SetFuel ( vehicles [ i ] [ 1 ] , 100 ) ;
13107: LD_VAR 0 24
13111: PUSH
13112: LD_VAR 0 13
13116: ARRAY
13117: PUSH
13118: LD_INT 1
13120: ARRAY
13121: PPUSH
13122: LD_INT 100
13124: PPUSH
13125: CALL_OW 240
// if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
13129: LD_VAR 0 24
13133: PUSH
13134: LD_VAR 0 13
13138: ARRAY
13139: PUSH
13140: LD_INT 1
13142: ARRAY
13143: PPUSH
13144: CALL_OW 256
13148: PUSH
13149: LD_INT 1000
13151: EQUAL
13152: IFFALSE 13327
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
13154: LD_VAR 0 24
13158: PUSH
13159: LD_VAR 0 13
13163: ARRAY
13164: PUSH
13165: LD_INT 1
13167: ARRAY
13168: PPUSH
13169: CALL_OW 263
13173: PUSH
13174: LD_INT 1
13176: EQUAL
13177: IFFALSE 13235
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
13179: LD_VAR 0 24
13183: PUSH
13184: LD_VAR 0 13
13188: ARRAY
13189: PUSH
13190: LD_INT 2
13192: ARRAY
13193: PPUSH
13194: CALL_OW 310
13198: NOT
13199: IFFALSE 13235
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
13201: LD_VAR 0 24
13205: PUSH
13206: LD_VAR 0 13
13210: ARRAY
13211: PUSH
13212: LD_INT 2
13214: ARRAY
13215: PPUSH
13216: LD_VAR 0 24
13220: PUSH
13221: LD_VAR 0 13
13225: ARRAY
13226: PUSH
13227: LD_INT 1
13229: ARRAY
13230: PPUSH
13231: CALL_OW 120
// if vehicles < vehiclesToAttackAmount then
13235: LD_VAR 0 24
13239: PUSH
13240: LD_VAR 0 10
13244: LESS
13245: IFFALSE 13287
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) else
13247: LD_ADDR_VAR 0 24
13251: PUSH
13252: LD_VAR 0 24
13256: PPUSH
13257: LD_VAR 0 13
13261: PUSH
13262: LD_VAR 0 24
13266: PUSH
13267: LD_VAR 0 13
13271: ARRAY
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PPUSH
13277: LD_INT 1
13279: PPUSH
13280: CALL 37275 0 3
13284: ST_TO_ADDR
13285: GO 13325
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
13287: LD_ADDR_VAR 0 24
13291: PUSH
13292: LD_VAR 0 24
13296: PPUSH
13297: LD_VAR 0 13
13301: PUSH
13302: LD_VAR 0 24
13306: PUSH
13307: LD_VAR 0 13
13311: ARRAY
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PPUSH
13317: LD_INT 2
13319: PPUSH
13320: CALL 37275 0 3
13324: ST_TO_ADDR
// end else
13325: GO 13414
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
13327: LD_VAR 0 24
13331: PUSH
13332: LD_VAR 0 13
13336: ARRAY
13337: PUSH
13338: LD_INT 1
13340: ARRAY
13341: PPUSH
13342: CALL_OW 256
13346: PUSH
13347: LD_INT 650
13349: LESSEQUAL
13350: IFFALSE 13414
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
13352: LD_ADDR_VAR 0 24
13356: PUSH
13357: LD_VAR 0 24
13361: PPUSH
13362: LD_VAR 0 13
13366: PUSH
13367: LD_VAR 0 24
13371: PUSH
13372: LD_VAR 0 13
13376: ARRAY
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: PPUSH
13382: LD_INT 0
13384: PPUSH
13385: CALL 37275 0 3
13389: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
13390: LD_VAR 0 24
13394: PUSH
13395: LD_VAR 0 13
13399: ARRAY
13400: PUSH
13401: LD_INT 1
13403: ARRAY
13404: PPUSH
13405: LD_VAR 0 6
13409: PPUSH
13410: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
13414: LD_VAR 0 24
13418: PUSH
13419: LD_VAR 0 13
13423: ARRAY
13424: PUSH
13425: LD_INT 1
13427: ARRAY
13428: PPUSH
13429: CALL_OW 256
13433: PUSH
13434: LD_INT 250
13436: LESS
13437: IFFALSE 13464
// vehicles = vehicles diff [ vehicles [ i ] ] ;
13439: LD_ADDR_VAR 0 24
13443: PUSH
13444: LD_VAR 0 24
13448: PUSH
13449: LD_VAR 0 24
13453: PUSH
13454: LD_VAR 0 13
13458: ARRAY
13459: PUSH
13460: EMPTY
13461: LIST
13462: DIFF
13463: ST_TO_ADDR
// end ;
13464: GO 13079
13466: POP
13467: POP
// for i := 1 to personel do
13468: LD_ADDR_VAR 0 13
13472: PUSH
13473: DOUBLE
13474: LD_INT 1
13476: DEC
13477: ST_TO_ADDR
13478: LD_VAR 0 18
13482: PUSH
13483: FOR_TO
13484: IFFALSE 13525
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
13486: LD_ADDR_VAR 0 19
13490: PUSH
13491: LD_VAR 0 19
13495: PUSH
13496: LD_VAR 0 18
13500: PUSH
13501: LD_VAR 0 13
13505: ARRAY
13506: PPUSH
13507: LD_INT 25
13509: PUSH
13510: LD_INT 1
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PPUSH
13517: CALL_OW 72
13521: ADD
13522: ST_TO_ADDR
13523: GO 13483
13525: POP
13526: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
13527: LD_VAR 0 19
13531: PUSH
13532: LD_VAR 0 32
13536: PPUSH
13537: LD_INT 3
13539: PUSH
13540: LD_INT 59
13542: PUSH
13543: EMPTY
13544: LIST
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PPUSH
13550: CALL_OW 72
13554: AND
13555: IFFALSE 13843
// begin for i := 1 to personel do
13557: LD_ADDR_VAR 0 13
13561: PUSH
13562: DOUBLE
13563: LD_INT 1
13565: DEC
13566: ST_TO_ADDR
13567: LD_VAR 0 18
13571: PUSH
13572: FOR_TO
13573: IFFALSE 13839
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
13575: LD_VAR 0 18
13579: PUSH
13580: LD_VAR 0 13
13584: ARRAY
13585: PUSH
13586: LD_INT 1
13588: ARRAY
13589: PPUSH
13590: CALL_OW 257
13594: PUSH
13595: LD_INT 1
13597: EQUAL
13598: PUSH
13599: LD_VAR 0 18
13603: PUSH
13604: LD_VAR 0 13
13608: ARRAY
13609: PUSH
13610: LD_INT 3
13612: ARRAY
13613: PUSH
13614: LD_INT 1
13616: EQUAL
13617: AND
13618: IFFALSE 13837
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13620: LD_VAR 0 18
13624: PUSH
13625: LD_VAR 0 13
13629: ARRAY
13630: PUSH
13631: LD_INT 1
13633: ARRAY
13634: PPUSH
13635: CALL_OW 437
13639: IFFALSE 13740
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
13641: LD_VAR 0 18
13645: PUSH
13646: LD_VAR 0 13
13650: ARRAY
13651: PUSH
13652: LD_INT 1
13654: ARRAY
13655: PPUSH
13656: CALL_OW 437
13660: PUSH
13661: LD_INT 1
13663: ARRAY
13664: PUSH
13665: LD_INT 1
13667: ARRAY
13668: PUSH
13669: LD_STRING e
13671: EQUAL
13672: PUSH
13673: LD_VAR 0 18
13677: PUSH
13678: LD_VAR 0 13
13682: ARRAY
13683: PUSH
13684: LD_INT 1
13686: ARRAY
13687: PPUSH
13688: CALL_OW 437
13692: PUSH
13693: LD_INT 1
13695: ARRAY
13696: PUSH
13697: LD_INT 4
13699: ARRAY
13700: PPUSH
13701: CALL_OW 266
13705: PUSH
13706: LD_INT 4
13708: PUSH
13709: LD_INT 5
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: IN
13716: AND
13717: IFFALSE 13740
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13719: LD_VAR 0 18
13723: PUSH
13724: LD_VAR 0 13
13728: ARRAY
13729: PUSH
13730: LD_INT 1
13732: ARRAY
13733: PPUSH
13734: EMPTY
13735: PPUSH
13736: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
13740: LD_ADDR_VAR 0 36
13744: PUSH
13745: LD_VAR 0 32
13749: PPUSH
13750: LD_INT 3
13752: PUSH
13753: LD_INT 59
13755: PUSH
13756: EMPTY
13757: LIST
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PPUSH
13763: CALL_OW 72
13767: PUSH
13768: FOR_IN
13769: IFFALSE 13835
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
13771: LD_VAR 0 18
13775: PUSH
13776: LD_VAR 0 13
13780: ARRAY
13781: PUSH
13782: LD_INT 1
13784: ARRAY
13785: PPUSH
13786: CALL_OW 310
13790: PPUSH
13791: CALL_OW 266
13795: PUSH
13796: LD_INT 31
13798: PUSH
13799: LD_INT 32
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: IN
13806: NOT
13807: IFFALSE 13833
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
13809: LD_VAR 0 18
13813: PUSH
13814: LD_VAR 0 13
13818: ARRAY
13819: PUSH
13820: LD_INT 1
13822: ARRAY
13823: PPUSH
13824: LD_VAR 0 36
13828: PPUSH
13829: CALL_OW 120
13833: GO 13768
13835: POP
13836: POP
// end ; end ;
13837: GO 13572
13839: POP
13840: POP
// end else
13841: GO 14058
// if soldiers and barracks then
13843: LD_VAR 0 19
13847: PUSH
13848: LD_VAR 0 33
13852: AND
13853: IFFALSE 14058
// for i := 1 to personel do
13855: LD_ADDR_VAR 0 13
13859: PUSH
13860: DOUBLE
13861: LD_INT 1
13863: DEC
13864: ST_TO_ADDR
13865: LD_VAR 0 18
13869: PUSH
13870: FOR_TO
13871: IFFALSE 14056
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
13873: LD_VAR 0 18
13877: PUSH
13878: LD_VAR 0 13
13882: ARRAY
13883: PUSH
13884: LD_INT 1
13886: ARRAY
13887: PPUSH
13888: CALL_OW 257
13892: PUSH
13893: LD_INT 1
13895: EQUAL
13896: PUSH
13897: LD_VAR 0 18
13901: PUSH
13902: LD_VAR 0 13
13906: ARRAY
13907: PUSH
13908: LD_INT 3
13910: ARRAY
13911: PUSH
13912: LD_INT 1
13914: EQUAL
13915: AND
13916: PUSH
13917: LD_VAR 0 18
13921: PUSH
13922: LD_VAR 0 13
13926: ARRAY
13927: PUSH
13928: LD_INT 1
13930: ARRAY
13931: PPUSH
13932: LD_INT 56
13934: PUSH
13935: EMPTY
13936: LIST
13937: PPUSH
13938: CALL_OW 72
13942: AND
13943: IFFALSE 14054
// begin if not personel [ i ] [ 2 ] then
13945: LD_VAR 0 18
13949: PUSH
13950: LD_VAR 0 13
13954: ARRAY
13955: PUSH
13956: LD_INT 2
13958: ARRAY
13959: NOT
13960: IFFALSE 14020
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
13962: LD_ADDR_VAR 0 18
13966: PUSH
13967: LD_VAR 0 18
13971: PPUSH
13972: LD_VAR 0 13
13976: PUSH
13977: LD_VAR 0 18
13981: PUSH
13982: LD_VAR 0 13
13986: ARRAY
13987: PUSH
13988: LD_INT 1
13990: MINUS
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PPUSH
13996: LD_VAR 0 33
14000: PUSH
14001: LD_INT 1
14003: PPUSH
14004: LD_VAR 0 33
14008: PPUSH
14009: CALL_OW 12
14013: ARRAY
14014: PPUSH
14015: CALL 37275 0 3
14019: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14020: LD_VAR 0 18
14024: PUSH
14025: LD_VAR 0 13
14029: ARRAY
14030: PUSH
14031: LD_INT 1
14033: ARRAY
14034: PPUSH
14035: LD_VAR 0 18
14039: PUSH
14040: LD_VAR 0 13
14044: ARRAY
14045: PUSH
14046: LD_INT 2
14048: ARRAY
14049: PPUSH
14050: CALL_OW 120
// end ;
14054: GO 13870
14056: POP
14057: POP
// for i := 1 to personel do
14058: LD_ADDR_VAR 0 13
14062: PUSH
14063: DOUBLE
14064: LD_INT 1
14066: DEC
14067: ST_TO_ADDR
14068: LD_VAR 0 18
14072: PUSH
14073: FOR_TO
14074: IFFALSE 14115
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
14076: LD_ADDR_VAR 0 20
14080: PUSH
14081: LD_VAR 0 20
14085: PUSH
14086: LD_VAR 0 18
14090: PUSH
14091: LD_VAR 0 13
14095: ARRAY
14096: PPUSH
14097: LD_INT 25
14099: PUSH
14100: LD_INT 2
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PPUSH
14107: CALL_OW 72
14111: ADD
14112: ST_TO_ADDR
14113: GO 14073
14115: POP
14116: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14117: LD_VAR 0 20
14121: PUSH
14122: LD_VAR 0 4
14126: PPUSH
14127: LD_INT 22
14129: PUSH
14130: LD_VAR 0 1
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 21
14141: PUSH
14142: LD_INT 3
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PUSH
14149: LD_INT 3
14151: PUSH
14152: LD_INT 24
14154: PUSH
14155: LD_INT 1000
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: LIST
14170: PPUSH
14171: CALL_OW 70
14175: AND
14176: IFFALSE 14452
// begin for i := 1 to personel do
14178: LD_ADDR_VAR 0 13
14182: PUSH
14183: DOUBLE
14184: LD_INT 1
14186: DEC
14187: ST_TO_ADDR
14188: LD_VAR 0 18
14192: PUSH
14193: FOR_TO
14194: IFFALSE 14448
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
14196: LD_VAR 0 18
14200: PUSH
14201: LD_VAR 0 13
14205: ARRAY
14206: PUSH
14207: LD_INT 1
14209: ARRAY
14210: PPUSH
14211: CALL_OW 257
14215: PUSH
14216: LD_INT 2
14218: EQUAL
14219: PUSH
14220: LD_VAR 0 18
14224: PUSH
14225: LD_VAR 0 13
14229: ARRAY
14230: PUSH
14231: LD_INT 3
14233: ARRAY
14234: PUSH
14235: LD_INT 1
14237: EQUAL
14238: AND
14239: IFFALSE 14446
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14241: LD_VAR 0 18
14245: PUSH
14246: LD_VAR 0 13
14250: ARRAY
14251: PUSH
14252: LD_INT 1
14254: ARRAY
14255: PPUSH
14256: CALL_OW 437
14260: IFFALSE 14316
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14262: LD_VAR 0 18
14266: PUSH
14267: LD_VAR 0 13
14271: ARRAY
14272: PUSH
14273: LD_INT 1
14275: ARRAY
14276: PPUSH
14277: CALL_OW 437
14281: PUSH
14282: LD_INT 1
14284: ARRAY
14285: PUSH
14286: LD_INT 1
14288: ARRAY
14289: PUSH
14290: LD_STRING e
14292: EQUAL
14293: IFFALSE 14316
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14295: LD_VAR 0 18
14299: PUSH
14300: LD_VAR 0 13
14304: ARRAY
14305: PUSH
14306: LD_INT 1
14308: ARRAY
14309: PPUSH
14310: EMPTY
14311: PPUSH
14312: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14316: LD_VAR 0 18
14320: PUSH
14321: LD_VAR 0 13
14325: ARRAY
14326: PUSH
14327: LD_INT 1
14329: ARRAY
14330: PPUSH
14331: CALL_OW 310
14335: IFFALSE 14356
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14337: LD_VAR 0 18
14341: PUSH
14342: LD_VAR 0 13
14346: ARRAY
14347: PUSH
14348: LD_INT 1
14350: ARRAY
14351: PPUSH
14352: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14356: LD_ADDR_VAR 0 34
14360: PUSH
14361: LD_VAR 0 4
14365: PPUSH
14366: LD_INT 22
14368: PUSH
14369: LD_VAR 0 1
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PUSH
14378: LD_INT 21
14380: PUSH
14381: LD_INT 3
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PUSH
14388: LD_INT 3
14390: PUSH
14391: LD_INT 24
14393: PUSH
14394: LD_INT 1000
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: LIST
14409: PPUSH
14410: CALL_OW 70
14414: PUSH
14415: FOR_IN
14416: IFFALSE 14444
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
14418: LD_VAR 0 18
14422: PUSH
14423: LD_VAR 0 13
14427: ARRAY
14428: PUSH
14429: LD_INT 1
14431: ARRAY
14432: PPUSH
14433: LD_VAR 0 34
14437: PPUSH
14438: CALL_OW 190
14442: GO 14415
14444: POP
14445: POP
// end ;
14446: GO 14193
14448: POP
14449: POP
// end else
14450: GO 14714
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
14452: LD_VAR 0 20
14456: PUSH
14457: LD_VAR 0 20
14461: PPUSH
14462: LD_INT 56
14464: PUSH
14465: EMPTY
14466: LIST
14467: PPUSH
14468: CALL_OW 72
14472: AND
14473: PUSH
14474: LD_VAR 0 29
14478: AND
14479: IFFALSE 14714
// for i := 1 to personel do
14481: LD_ADDR_VAR 0 13
14485: PUSH
14486: DOUBLE
14487: LD_INT 1
14489: DEC
14490: ST_TO_ADDR
14491: LD_VAR 0 18
14495: PUSH
14496: FOR_TO
14497: IFFALSE 14712
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
14499: LD_VAR 0 18
14503: PUSH
14504: LD_VAR 0 13
14508: ARRAY
14509: PUSH
14510: LD_INT 1
14512: ARRAY
14513: PPUSH
14514: CALL_OW 257
14518: PUSH
14519: LD_INT 2
14521: EQUAL
14522: PUSH
14523: LD_VAR 0 18
14527: PUSH
14528: LD_VAR 0 13
14532: ARRAY
14533: PUSH
14534: LD_INT 3
14536: ARRAY
14537: PUSH
14538: LD_INT 1
14540: EQUAL
14541: AND
14542: IFFALSE 14710
// begin if not personel [ i ] [ 2 ] then
14544: LD_VAR 0 18
14548: PUSH
14549: LD_VAR 0 13
14553: ARRAY
14554: PUSH
14555: LD_INT 2
14557: ARRAY
14558: NOT
14559: IFFALSE 14676
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
14561: LD_ADDR_VAR 0 18
14565: PUSH
14566: LD_VAR 0 18
14570: PPUSH
14571: LD_VAR 0 13
14575: PUSH
14576: LD_VAR 0 18
14580: PUSH
14581: LD_VAR 0 13
14585: ARRAY
14586: PUSH
14587: LD_INT 1
14589: MINUS
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PPUSH
14595: LD_VAR 0 4
14599: PPUSH
14600: LD_INT 22
14602: PUSH
14603: LD_VAR 0 1
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PUSH
14612: LD_INT 21
14614: PUSH
14615: LD_INT 3
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: PUSH
14622: LD_INT 50
14624: PUSH
14625: EMPTY
14626: LIST
14627: PUSH
14628: LD_INT 2
14630: PUSH
14631: LD_INT 30
14633: PUSH
14634: LD_INT 0
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: LD_INT 30
14643: PUSH
14644: LD_INT 1
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: LIST
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: PPUSH
14662: CALL_OW 70
14666: PUSH
14667: LD_INT 1
14669: ARRAY
14670: PPUSH
14671: CALL 37275 0 3
14675: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14676: LD_VAR 0 18
14680: PUSH
14681: LD_VAR 0 13
14685: ARRAY
14686: PUSH
14687: LD_INT 1
14689: ARRAY
14690: PPUSH
14691: LD_VAR 0 18
14695: PUSH
14696: LD_VAR 0 13
14700: ARRAY
14701: PUSH
14702: LD_INT 2
14704: ARRAY
14705: PPUSH
14706: CALL_OW 120
// end ; end ;
14710: GO 14496
14712: POP
14713: POP
// for i := 1 to personel do
14714: LD_ADDR_VAR 0 13
14718: PUSH
14719: DOUBLE
14720: LD_INT 1
14722: DEC
14723: ST_TO_ADDR
14724: LD_VAR 0 18
14728: PUSH
14729: FOR_TO
14730: IFFALSE 14771
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
14732: LD_ADDR_VAR 0 21
14736: PUSH
14737: LD_VAR 0 21
14741: PUSH
14742: LD_VAR 0 18
14746: PUSH
14747: LD_VAR 0 13
14751: ARRAY
14752: PPUSH
14753: LD_INT 25
14755: PUSH
14756: LD_INT 3
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PPUSH
14763: CALL_OW 72
14767: ADD
14768: ST_TO_ADDR
14769: GO 14729
14771: POP
14772: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14773: LD_VAR 0 21
14777: PUSH
14778: LD_VAR 0 4
14782: PPUSH
14783: LD_INT 22
14785: PUSH
14786: LD_VAR 0 1
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: LD_INT 21
14797: PUSH
14798: LD_INT 2
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: PUSH
14805: LD_INT 3
14807: PUSH
14808: LD_INT 24
14810: PUSH
14811: LD_INT 1000
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: LIST
14826: PPUSH
14827: CALL_OW 70
14831: AND
14832: IFFALSE 15436
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14834: LD_ADDR_VAR 0 35
14838: PUSH
14839: LD_VAR 0 4
14843: PPUSH
14844: LD_INT 22
14846: PUSH
14847: LD_VAR 0 1
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 21
14858: PUSH
14859: LD_INT 2
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: LD_INT 3
14868: PUSH
14869: LD_INT 24
14871: PUSH
14872: LD_INT 1000
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: LIST
14887: PPUSH
14888: CALL_OW 70
14892: PUSH
14893: FOR_IN
14894: IFFALSE 15432
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
14896: LD_VAR 0 35
14900: PPUSH
14901: LD_VAR 0 6
14905: PPUSH
14906: CALL_OW 299
14910: PUSH
14911: LD_INT 5
14913: LESS
14914: IFFALSE 15209
// begin for i := 1 to vehicles do
14916: LD_ADDR_VAR 0 13
14920: PUSH
14921: DOUBLE
14922: LD_INT 1
14924: DEC
14925: ST_TO_ADDR
14926: LD_VAR 0 24
14930: PUSH
14931: FOR_TO
14932: IFFALSE 15001
// begin if vehicles [ i ] [ 1 ] = damageUnit then
14934: LD_VAR 0 24
14938: PUSH
14939: LD_VAR 0 13
14943: ARRAY
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PUSH
14949: LD_VAR 0 35
14953: EQUAL
14954: IFFALSE 14975
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
14956: LD_VAR 0 24
14960: PUSH
14961: LD_VAR 0 13
14965: ARRAY
14966: PUSH
14967: LD_INT 2
14969: ARRAY
14970: PPUSH
14971: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
14975: LD_VAR 0 24
14979: PUSH
14980: LD_VAR 0 13
14984: ARRAY
14985: PUSH
14986: LD_INT 2
14988: ARRAY
14989: PPUSH
14990: LD_VAR 0 35
14994: PPUSH
14995: CALL_OW 189
// end ;
14999: GO 14931
15001: POP
15002: POP
// for i := 1 to personel do
15003: LD_ADDR_VAR 0 13
15007: PUSH
15008: DOUBLE
15009: LD_INT 1
15011: DEC
15012: ST_TO_ADDR
15013: LD_VAR 0 18
15017: PUSH
15018: FOR_TO
15019: IFFALSE 15207
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15021: LD_VAR 0 18
15025: PUSH
15026: LD_VAR 0 13
15030: ARRAY
15031: PUSH
15032: LD_INT 1
15034: ARRAY
15035: PPUSH
15036: CALL_OW 257
15040: PUSH
15041: LD_INT 3
15043: EQUAL
15044: PUSH
15045: LD_VAR 0 18
15049: PUSH
15050: LD_VAR 0 13
15054: ARRAY
15055: PUSH
15056: LD_INT 3
15058: ARRAY
15059: PUSH
15060: LD_INT 1
15062: EQUAL
15063: AND
15064: IFFALSE 15205
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15066: LD_VAR 0 18
15070: PUSH
15071: LD_VAR 0 13
15075: ARRAY
15076: PUSH
15077: LD_INT 1
15079: ARRAY
15080: PPUSH
15081: CALL_OW 437
15085: IFFALSE 15141
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15087: LD_VAR 0 18
15091: PUSH
15092: LD_VAR 0 13
15096: ARRAY
15097: PUSH
15098: LD_INT 1
15100: ARRAY
15101: PPUSH
15102: CALL_OW 437
15106: PUSH
15107: LD_INT 1
15109: ARRAY
15110: PUSH
15111: LD_INT 1
15113: ARRAY
15114: PUSH
15115: LD_STRING e
15117: EQUAL
15118: IFFALSE 15141
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15120: LD_VAR 0 18
15124: PUSH
15125: LD_VAR 0 13
15129: ARRAY
15130: PUSH
15131: LD_INT 1
15133: ARRAY
15134: PPUSH
15135: EMPTY
15136: PPUSH
15137: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15141: LD_VAR 0 18
15145: PUSH
15146: LD_VAR 0 13
15150: ARRAY
15151: PUSH
15152: LD_INT 1
15154: ARRAY
15155: PPUSH
15156: CALL_OW 310
15160: IFFALSE 15181
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15162: LD_VAR 0 18
15166: PUSH
15167: LD_VAR 0 13
15171: ARRAY
15172: PUSH
15173: LD_INT 1
15175: ARRAY
15176: PPUSH
15177: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
15181: LD_VAR 0 18
15185: PUSH
15186: LD_VAR 0 13
15190: ARRAY
15191: PUSH
15192: LD_INT 1
15194: ARRAY
15195: PPUSH
15196: LD_VAR 0 35
15200: PPUSH
15201: CALL_OW 189
// end ;
15205: GO 15018
15207: POP
15208: POP
// end ; if GetLives ( damageUnit ) < 250 then
15209: LD_VAR 0 35
15213: PPUSH
15214: CALL_OW 256
15218: PUSH
15219: LD_INT 250
15221: LESS
15222: IFFALSE 15430
// for i := 1 to personel do
15224: LD_ADDR_VAR 0 13
15228: PUSH
15229: DOUBLE
15230: LD_INT 1
15232: DEC
15233: ST_TO_ADDR
15234: LD_VAR 0 18
15238: PUSH
15239: FOR_TO
15240: IFFALSE 15428
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15242: LD_VAR 0 18
15246: PUSH
15247: LD_VAR 0 13
15251: ARRAY
15252: PUSH
15253: LD_INT 1
15255: ARRAY
15256: PPUSH
15257: CALL_OW 257
15261: PUSH
15262: LD_INT 3
15264: EQUAL
15265: PUSH
15266: LD_VAR 0 18
15270: PUSH
15271: LD_VAR 0 13
15275: ARRAY
15276: PUSH
15277: LD_INT 3
15279: ARRAY
15280: PUSH
15281: LD_INT 1
15283: EQUAL
15284: AND
15285: IFFALSE 15426
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15287: LD_VAR 0 18
15291: PUSH
15292: LD_VAR 0 13
15296: ARRAY
15297: PUSH
15298: LD_INT 1
15300: ARRAY
15301: PPUSH
15302: CALL_OW 437
15306: IFFALSE 15362
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15308: LD_VAR 0 18
15312: PUSH
15313: LD_VAR 0 13
15317: ARRAY
15318: PUSH
15319: LD_INT 1
15321: ARRAY
15322: PPUSH
15323: CALL_OW 437
15327: PUSH
15328: LD_INT 1
15330: ARRAY
15331: PUSH
15332: LD_INT 1
15334: ARRAY
15335: PUSH
15336: LD_STRING e
15338: EQUAL
15339: IFFALSE 15362
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15341: LD_VAR 0 18
15345: PUSH
15346: LD_VAR 0 13
15350: ARRAY
15351: PUSH
15352: LD_INT 1
15354: ARRAY
15355: PPUSH
15356: EMPTY
15357: PPUSH
15358: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15362: LD_VAR 0 18
15366: PUSH
15367: LD_VAR 0 13
15371: ARRAY
15372: PUSH
15373: LD_INT 1
15375: ARRAY
15376: PPUSH
15377: CALL_OW 310
15381: IFFALSE 15402
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15383: LD_VAR 0 18
15387: PUSH
15388: LD_VAR 0 13
15392: ARRAY
15393: PUSH
15394: LD_INT 1
15396: ARRAY
15397: PPUSH
15398: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
15402: LD_VAR 0 18
15406: PUSH
15407: LD_VAR 0 13
15411: ARRAY
15412: PUSH
15413: LD_INT 1
15415: ARRAY
15416: PPUSH
15417: LD_VAR 0 35
15421: PPUSH
15422: CALL_OW 189
// end ;
15426: GO 15239
15428: POP
15429: POP
// end ;
15430: GO 14893
15432: POP
15433: POP
// end else
15434: GO 15641
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
15436: LD_VAR 0 21
15440: PUSH
15441: LD_VAR 0 21
15445: PPUSH
15446: LD_INT 56
15448: PUSH
15449: EMPTY
15450: LIST
15451: PPUSH
15452: CALL_OW 72
15456: AND
15457: PUSH
15458: LD_VAR 0 30
15462: AND
15463: IFFALSE 15641
// for i := 1 to personel do
15465: LD_ADDR_VAR 0 13
15469: PUSH
15470: DOUBLE
15471: LD_INT 1
15473: DEC
15474: ST_TO_ADDR
15475: LD_VAR 0 18
15479: PUSH
15480: FOR_TO
15481: IFFALSE 15639
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15483: LD_VAR 0 18
15487: PUSH
15488: LD_VAR 0 13
15492: ARRAY
15493: PUSH
15494: LD_INT 1
15496: ARRAY
15497: PPUSH
15498: CALL_OW 257
15502: PUSH
15503: LD_INT 3
15505: EQUAL
15506: PUSH
15507: LD_VAR 0 18
15511: PUSH
15512: LD_VAR 0 13
15516: ARRAY
15517: PUSH
15518: LD_INT 3
15520: ARRAY
15521: PUSH
15522: LD_INT 1
15524: EQUAL
15525: AND
15526: IFFALSE 15637
// begin if not personel [ i ] [ 2 ] then
15528: LD_VAR 0 18
15532: PUSH
15533: LD_VAR 0 13
15537: ARRAY
15538: PUSH
15539: LD_INT 2
15541: ARRAY
15542: NOT
15543: IFFALSE 15603
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
15545: LD_ADDR_VAR 0 18
15549: PUSH
15550: LD_VAR 0 18
15554: PPUSH
15555: LD_VAR 0 13
15559: PUSH
15560: LD_VAR 0 18
15564: PUSH
15565: LD_VAR 0 13
15569: ARRAY
15570: PUSH
15571: LD_INT 1
15573: MINUS
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PPUSH
15579: LD_VAR 0 30
15583: PUSH
15584: LD_INT 1
15586: PPUSH
15587: LD_VAR 0 30
15591: PPUSH
15592: CALL_OW 12
15596: ARRAY
15597: PPUSH
15598: CALL 37275 0 3
15602: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15603: LD_VAR 0 18
15607: PUSH
15608: LD_VAR 0 13
15612: ARRAY
15613: PUSH
15614: LD_INT 1
15616: ARRAY
15617: PPUSH
15618: LD_VAR 0 18
15622: PUSH
15623: LD_VAR 0 13
15627: ARRAY
15628: PUSH
15629: LD_INT 2
15631: ARRAY
15632: PPUSH
15633: CALL_OW 120
// end ;
15637: GO 15480
15639: POP
15640: POP
// for i := 1 to personel do
15641: LD_ADDR_VAR 0 13
15645: PUSH
15646: DOUBLE
15647: LD_INT 1
15649: DEC
15650: ST_TO_ADDR
15651: LD_VAR 0 18
15655: PUSH
15656: FOR_TO
15657: IFFALSE 15698
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
15659: LD_ADDR_VAR 0 22
15663: PUSH
15664: LD_VAR 0 22
15668: PUSH
15669: LD_VAR 0 18
15673: PUSH
15674: LD_VAR 0 13
15678: ARRAY
15679: PPUSH
15680: LD_INT 25
15682: PUSH
15683: LD_INT 4
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PPUSH
15690: CALL_OW 72
15694: ADD
15695: ST_TO_ADDR
15696: GO 15656
15698: POP
15699: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
15700: LD_VAR 0 22
15704: PUSH
15705: LD_VAR 0 4
15709: PPUSH
15710: LD_INT 22
15712: PUSH
15713: LD_VAR 0 1
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 21
15724: PUSH
15725: LD_INT 1
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: LD_INT 3
15734: PUSH
15735: LD_INT 24
15737: PUSH
15738: LD_INT 1000
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: LIST
15753: PPUSH
15754: CALL_OW 70
15758: AND
15759: IFFALSE 16276
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
15761: LD_ADDR_VAR 0 35
15765: PUSH
15766: LD_VAR 0 4
15770: PPUSH
15771: LD_INT 22
15773: PUSH
15774: LD_VAR 0 1
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 21
15785: PUSH
15786: LD_INT 1
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PUSH
15793: LD_INT 3
15795: PUSH
15796: LD_INT 24
15798: PUSH
15799: LD_INT 1000
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: LIST
15814: PPUSH
15815: CALL_OW 70
15819: PUSH
15820: FOR_IN
15821: IFFALSE 16272
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
15823: LD_VAR 0 35
15827: PPUSH
15828: LD_VAR 0 5
15832: PPUSH
15833: CALL_OW 299
15837: PUSH
15838: LD_INT 5
15840: LESS
15841: IFFALSE 16049
// for i := 1 to personel do
15843: LD_ADDR_VAR 0 13
15847: PUSH
15848: DOUBLE
15849: LD_INT 1
15851: DEC
15852: ST_TO_ADDR
15853: LD_VAR 0 18
15857: PUSH
15858: FOR_TO
15859: IFFALSE 16047
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15861: LD_VAR 0 18
15865: PUSH
15866: LD_VAR 0 13
15870: ARRAY
15871: PUSH
15872: LD_INT 1
15874: ARRAY
15875: PPUSH
15876: CALL_OW 257
15880: PUSH
15881: LD_INT 4
15883: EQUAL
15884: PUSH
15885: LD_VAR 0 18
15889: PUSH
15890: LD_VAR 0 13
15894: ARRAY
15895: PUSH
15896: LD_INT 3
15898: ARRAY
15899: PUSH
15900: LD_INT 1
15902: EQUAL
15903: AND
15904: IFFALSE 16045
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15906: LD_VAR 0 18
15910: PUSH
15911: LD_VAR 0 13
15915: ARRAY
15916: PUSH
15917: LD_INT 1
15919: ARRAY
15920: PPUSH
15921: CALL_OW 437
15925: IFFALSE 15981
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15927: LD_VAR 0 18
15931: PUSH
15932: LD_VAR 0 13
15936: ARRAY
15937: PUSH
15938: LD_INT 1
15940: ARRAY
15941: PPUSH
15942: CALL_OW 437
15946: PUSH
15947: LD_INT 1
15949: ARRAY
15950: PUSH
15951: LD_INT 1
15953: ARRAY
15954: PUSH
15955: LD_STRING e
15957: EQUAL
15958: IFFALSE 15981
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15960: LD_VAR 0 18
15964: PUSH
15965: LD_VAR 0 13
15969: ARRAY
15970: PUSH
15971: LD_INT 1
15973: ARRAY
15974: PPUSH
15975: EMPTY
15976: PPUSH
15977: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15981: LD_VAR 0 18
15985: PUSH
15986: LD_VAR 0 13
15990: ARRAY
15991: PUSH
15992: LD_INT 1
15994: ARRAY
15995: PPUSH
15996: CALL_OW 310
16000: IFFALSE 16021
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
16002: LD_VAR 0 18
16006: PUSH
16007: LD_VAR 0 13
16011: ARRAY
16012: PUSH
16013: LD_INT 1
16015: ARRAY
16016: PPUSH
16017: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
16021: LD_VAR 0 18
16025: PUSH
16026: LD_VAR 0 13
16030: ARRAY
16031: PUSH
16032: LD_INT 1
16034: ARRAY
16035: PPUSH
16036: LD_VAR 0 35
16040: PPUSH
16041: CALL_OW 188
// end ;
16045: GO 15858
16047: POP
16048: POP
// if GetLives ( damageUnit ) < 250 then
16049: LD_VAR 0 35
16053: PPUSH
16054: CALL_OW 256
16058: PUSH
16059: LD_INT 250
16061: LESS
16062: IFFALSE 16270
// for i := 1 to personel do
16064: LD_ADDR_VAR 0 13
16068: PUSH
16069: DOUBLE
16070: LD_INT 1
16072: DEC
16073: ST_TO_ADDR
16074: LD_VAR 0 18
16078: PUSH
16079: FOR_TO
16080: IFFALSE 16268
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
16082: LD_VAR 0 18
16086: PUSH
16087: LD_VAR 0 13
16091: ARRAY
16092: PUSH
16093: LD_INT 1
16095: ARRAY
16096: PPUSH
16097: CALL_OW 257
16101: PUSH
16102: LD_INT 4
16104: EQUAL
16105: PUSH
16106: LD_VAR 0 18
16110: PUSH
16111: LD_VAR 0 13
16115: ARRAY
16116: PUSH
16117: LD_INT 3
16119: ARRAY
16120: PUSH
16121: LD_INT 1
16123: EQUAL
16124: AND
16125: IFFALSE 16266
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
16127: LD_VAR 0 18
16131: PUSH
16132: LD_VAR 0 13
16136: ARRAY
16137: PUSH
16138: LD_INT 1
16140: ARRAY
16141: PPUSH
16142: CALL_OW 437
16146: IFFALSE 16202
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
16148: LD_VAR 0 18
16152: PUSH
16153: LD_VAR 0 13
16157: ARRAY
16158: PUSH
16159: LD_INT 1
16161: ARRAY
16162: PPUSH
16163: CALL_OW 437
16167: PUSH
16168: LD_INT 1
16170: ARRAY
16171: PUSH
16172: LD_INT 1
16174: ARRAY
16175: PUSH
16176: LD_STRING e
16178: EQUAL
16179: IFFALSE 16202
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
16181: LD_VAR 0 18
16185: PUSH
16186: LD_VAR 0 13
16190: ARRAY
16191: PUSH
16192: LD_INT 1
16194: ARRAY
16195: PPUSH
16196: EMPTY
16197: PPUSH
16198: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
16202: LD_VAR 0 18
16206: PUSH
16207: LD_VAR 0 13
16211: ARRAY
16212: PUSH
16213: LD_INT 1
16215: ARRAY
16216: PPUSH
16217: CALL_OW 310
16221: IFFALSE 16242
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
16223: LD_VAR 0 18
16227: PUSH
16228: LD_VAR 0 13
16232: ARRAY
16233: PUSH
16234: LD_INT 1
16236: ARRAY
16237: PPUSH
16238: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
16242: LD_VAR 0 18
16246: PUSH
16247: LD_VAR 0 13
16251: ARRAY
16252: PUSH
16253: LD_INT 1
16255: ARRAY
16256: PPUSH
16257: LD_VAR 0 35
16261: PPUSH
16262: CALL_OW 188
// end ;
16266: GO 16079
16268: POP
16269: POP
// end ;
16270: GO 15820
16272: POP
16273: POP
// end else
16274: GO 16481
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
16276: LD_VAR 0 22
16280: PUSH
16281: LD_VAR 0 22
16285: PPUSH
16286: LD_INT 56
16288: PUSH
16289: EMPTY
16290: LIST
16291: PPUSH
16292: CALL_OW 72
16296: AND
16297: PUSH
16298: LD_VAR 0 31
16302: AND
16303: IFFALSE 16481
// for i := 1 to personel do
16305: LD_ADDR_VAR 0 13
16309: PUSH
16310: DOUBLE
16311: LD_INT 1
16313: DEC
16314: ST_TO_ADDR
16315: LD_VAR 0 18
16319: PUSH
16320: FOR_TO
16321: IFFALSE 16479
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
16323: LD_VAR 0 18
16327: PUSH
16328: LD_VAR 0 13
16332: ARRAY
16333: PUSH
16334: LD_INT 1
16336: ARRAY
16337: PPUSH
16338: CALL_OW 257
16342: PUSH
16343: LD_INT 4
16345: EQUAL
16346: PUSH
16347: LD_VAR 0 18
16351: PUSH
16352: LD_VAR 0 13
16356: ARRAY
16357: PUSH
16358: LD_INT 3
16360: ARRAY
16361: PUSH
16362: LD_INT 1
16364: EQUAL
16365: AND
16366: IFFALSE 16477
// begin if not personel [ i ] [ 2 ] then
16368: LD_VAR 0 18
16372: PUSH
16373: LD_VAR 0 13
16377: ARRAY
16378: PUSH
16379: LD_INT 2
16381: ARRAY
16382: NOT
16383: IFFALSE 16443
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
16385: LD_ADDR_VAR 0 18
16389: PUSH
16390: LD_VAR 0 18
16394: PPUSH
16395: LD_VAR 0 13
16399: PUSH
16400: LD_VAR 0 18
16404: PUSH
16405: LD_VAR 0 13
16409: ARRAY
16410: PUSH
16411: LD_INT 1
16413: MINUS
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PPUSH
16419: LD_VAR 0 31
16423: PUSH
16424: LD_INT 1
16426: PPUSH
16427: LD_VAR 0 31
16431: PPUSH
16432: CALL_OW 12
16436: ARRAY
16437: PPUSH
16438: CALL 37275 0 3
16442: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
16443: LD_VAR 0 18
16447: PUSH
16448: LD_VAR 0 13
16452: ARRAY
16453: PUSH
16454: LD_INT 1
16456: ARRAY
16457: PPUSH
16458: LD_VAR 0 18
16462: PUSH
16463: LD_VAR 0 13
16467: ARRAY
16468: PUSH
16469: LD_INT 2
16471: ARRAY
16472: PPUSH
16473: CALL_OW 120
// end ;
16477: GO 16320
16479: POP
16480: POP
// wait ( 0 0$01 ) ;
16481: LD_INT 35
16483: PPUSH
16484: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
16488: LD_VAR 0 24
16492: PUSH
16493: LD_VAR 0 8
16497: LESS
16498: PUSH
16499: LD_VAR 0 30
16503: AND
16504: IFFALSE 16754
// begin tmp = vehiclesAmount - vehicles ;
16506: LD_ADDR_VAR 0 15
16510: PUSH
16511: LD_VAR 0 8
16515: PUSH
16516: LD_VAR 0 24
16520: MINUS
16521: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
16522: LD_ADDR_VAR 0 27
16526: PUSH
16527: LD_VAR 0 1
16531: PPUSH
16532: LD_VAR 0 2
16536: PPUSH
16537: CALL 7801 0 2
16541: ST_TO_ADDR
// for i := 1 to tmp do
16542: LD_ADDR_VAR 0 13
16546: PUSH
16547: DOUBLE
16548: LD_INT 1
16550: DEC
16551: ST_TO_ADDR
16552: LD_VAR 0 15
16556: PUSH
16557: FOR_TO
16558: IFFALSE 16750
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
16560: LD_ADDR_VAR 0 15
16564: PUSH
16565: LD_VAR 0 27
16569: PUSH
16570: LD_INT 1
16572: PPUSH
16573: LD_VAR 0 27
16577: PPUSH
16578: CALL_OW 12
16582: ARRAY
16583: ST_TO_ADDR
// if tmp then
16584: LD_VAR 0 15
16588: IFFALSE 16748
// begin if tmp in [ 34 , 14 , 71 ] then
16590: LD_VAR 0 15
16594: PUSH
16595: LD_INT 34
16597: PUSH
16598: LD_INT 14
16600: PUSH
16601: LD_INT 71
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: LIST
16608: IN
16609: IFFALSE 16647
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
16611: LD_ADDR_VAR 0 28
16615: PUSH
16616: LD_INT 4
16618: PUSH
16619: EMPTY
16620: LIST
16621: PUSH
16622: LD_INT 14
16624: PUSH
16625: EMPTY
16626: LIST
16627: PUSH
16628: LD_INT 24
16630: PUSH
16631: EMPTY
16632: LIST
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: LIST
16638: PUSH
16639: LD_VAR 0 2
16643: ARRAY
16644: ST_TO_ADDR
16645: GO 16705
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
16647: LD_ADDR_VAR 0 28
16651: PUSH
16652: LD_INT 2
16654: PUSH
16655: LD_INT 3
16657: PUSH
16658: LD_INT 4
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 13
16668: PUSH
16669: LD_INT 14
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 21
16678: PUSH
16679: LD_INT 23
16681: PUSH
16682: LD_INT 24
16684: PUSH
16685: LD_INT 22
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: LIST
16698: PUSH
16699: LD_VAR 0 2
16703: ARRAY
16704: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
16705: LD_VAR 0 30
16709: PUSH
16710: LD_INT 1
16712: ARRAY
16713: PPUSH
16714: LD_VAR 0 28
16718: PUSH
16719: LD_INT 1
16721: PPUSH
16722: LD_VAR 0 28
16726: PPUSH
16727: CALL_OW 12
16731: ARRAY
16732: PPUSH
16733: LD_INT 1
16735: PPUSH
16736: LD_INT 1
16738: PPUSH
16739: LD_VAR 0 15
16743: PPUSH
16744: CALL_OW 185
// end ; end ;
16748: GO 16557
16750: POP
16751: POP
// end else
16752: GO 16767
// ComCancel ( factory [ 1 ] ) ;
16754: LD_VAR 0 30
16758: PUSH
16759: LD_INT 1
16761: ARRAY
16762: PPUSH
16763: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) do
16767: LD_ADDR_VAR 0 23
16771: PUSH
16772: LD_VAR 0 4
16776: PPUSH
16777: LD_INT 22
16779: PUSH
16780: LD_VAR 0 1
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: PUSH
16789: LD_INT 21
16791: PUSH
16792: LD_INT 2
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PPUSH
16803: CALL_OW 70
16807: PUSH
16808: FOR_IN
16809: IFFALSE 16979
// begin vehicleInList = false ;
16811: LD_ADDR_VAR 0 25
16815: PUSH
16816: LD_INT 0
16818: ST_TO_ADDR
// for i := 1 to vehicles do
16819: LD_ADDR_VAR 0 13
16823: PUSH
16824: DOUBLE
16825: LD_INT 1
16827: DEC
16828: ST_TO_ADDR
16829: LD_VAR 0 24
16833: PUSH
16834: FOR_TO
16835: IFFALSE 16865
// begin if vehicle in vehicles [ i ] then
16837: LD_VAR 0 23
16841: PUSH
16842: LD_VAR 0 24
16846: PUSH
16847: LD_VAR 0 13
16851: ARRAY
16852: IN
16853: IFFALSE 16863
// vehicleInList = true ;
16855: LD_ADDR_VAR 0 25
16859: PUSH
16860: LD_INT 1
16862: ST_TO_ADDR
// end ;
16863: GO 16834
16865: POP
16866: POP
// if not vehicleInList then
16867: LD_VAR 0 25
16871: NOT
16872: IFFALSE 16977
// if vehicles < vehiclesToAttackAmount then
16874: LD_VAR 0 24
16878: PUSH
16879: LD_VAR 0 10
16883: LESS
16884: IFFALSE 16936
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , IsOK ( vehicle ) ] ] else
16886: LD_ADDR_VAR 0 24
16890: PUSH
16891: LD_VAR 0 24
16895: PUSH
16896: LD_VAR 0 23
16900: PUSH
16901: LD_VAR 0 23
16905: PPUSH
16906: CALL_OW 313
16910: PUSH
16911: LD_INT 1
16913: ARRAY
16914: PUSH
16915: LD_VAR 0 23
16919: PPUSH
16920: CALL_OW 302
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: LIST
16929: PUSH
16930: EMPTY
16931: LIST
16932: ADD
16933: ST_TO_ADDR
16934: GO 16977
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
16936: LD_ADDR_VAR 0 24
16940: PUSH
16941: LD_VAR 0 24
16945: PUSH
16946: LD_VAR 0 23
16950: PUSH
16951: LD_VAR 0 23
16955: PPUSH
16956: CALL_OW 313
16960: PUSH
16961: LD_INT 1
16963: ARRAY
16964: PUSH
16965: LD_INT 2
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: LIST
16972: PUSH
16973: EMPTY
16974: LIST
16975: ADD
16976: ST_TO_ADDR
// end ;
16977: GO 16808
16979: POP
16980: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
16981: LD_ADDR_VAR 0 37
16985: PUSH
16986: LD_VAR 0 7
16990: PPUSH
16991: LD_INT 81
16993: PUSH
16994: LD_VAR 0 1
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PPUSH
17003: CALL_OW 70
17007: PUSH
17008: FOR_IN
17009: IFFALSE 17188
// begin defenceUnits = [ ] ;
17011: LD_ADDR_VAR 0 26
17015: PUSH
17016: EMPTY
17017: ST_TO_ADDR
// for i := 1 to personel do
17018: LD_ADDR_VAR 0 13
17022: PUSH
17023: DOUBLE
17024: LD_INT 1
17026: DEC
17027: ST_TO_ADDR
17028: LD_VAR 0 18
17032: PUSH
17033: FOR_TO
17034: IFFALSE 17084
// if personel [ i ] [ 3 ] = 2 then
17036: LD_VAR 0 18
17040: PUSH
17041: LD_VAR 0 13
17045: ARRAY
17046: PUSH
17047: LD_INT 3
17049: ARRAY
17050: PUSH
17051: LD_INT 2
17053: EQUAL
17054: IFFALSE 17082
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
17056: LD_ADDR_VAR 0 26
17060: PUSH
17061: LD_VAR 0 26
17065: PUSH
17066: LD_VAR 0 18
17070: PUSH
17071: LD_VAR 0 13
17075: ARRAY
17076: PUSH
17077: LD_INT 1
17079: ARRAY
17080: ADD
17081: ST_TO_ADDR
17082: GO 17033
17084: POP
17085: POP
// for i := 1 to vehicles do
17086: LD_ADDR_VAR 0 13
17090: PUSH
17091: DOUBLE
17092: LD_INT 1
17094: DEC
17095: ST_TO_ADDR
17096: LD_VAR 0 24
17100: PUSH
17101: FOR_TO
17102: IFFALSE 17152
// if vehicles [ i ] [ 3 ] = 2 then
17104: LD_VAR 0 24
17108: PUSH
17109: LD_VAR 0 13
17113: ARRAY
17114: PUSH
17115: LD_INT 3
17117: ARRAY
17118: PUSH
17119: LD_INT 2
17121: EQUAL
17122: IFFALSE 17150
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
17124: LD_ADDR_VAR 0 26
17128: PUSH
17129: LD_VAR 0 26
17133: PUSH
17134: LD_VAR 0 24
17138: PUSH
17139: LD_VAR 0 13
17143: ARRAY
17144: PUSH
17145: LD_INT 1
17147: ARRAY
17148: ADD
17149: ST_TO_ADDR
17150: GO 17101
17152: POP
17153: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
17154: LD_VAR 0 26
17158: PPUSH
17159: LD_INT 3
17161: PUSH
17162: LD_INT 60
17164: PUSH
17165: EMPTY
17166: LIST
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PPUSH
17172: CALL_OW 72
17176: PPUSH
17177: LD_VAR 0 37
17181: PPUSH
17182: CALL_OW 175
// end ;
17186: GO 17008
17188: POP
17189: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17190: LD_ADDR_VAR 0 38
17194: PUSH
17195: LD_INT 22
17197: PUSH
17198: LD_VAR 0 1
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 2
17209: PUSH
17210: LD_INT 30
17212: PUSH
17213: LD_INT 31
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: LD_INT 30
17222: PUSH
17223: LD_INT 32
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 30
17232: PUSH
17233: LD_INT 33
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 30
17242: PUSH
17243: LD_INT 4
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 30
17252: PUSH
17253: LD_INT 5
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PPUSH
17272: CALL_OW 69
17276: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
17277: LD_ADDR_VAR 0 39
17281: PUSH
17282: LD_INT 81
17284: PUSH
17285: LD_VAR 0 1
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 21
17296: PUSH
17297: LD_INT 3
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 58
17306: PUSH
17307: EMPTY
17308: LIST
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: LIST
17314: PPUSH
17315: CALL_OW 69
17319: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
17320: LD_VAR 0 38
17324: PUSH
17325: LD_VAR 0 39
17329: AND
17330: IFFALSE 17400
// for i in attackBuildings do
17332: LD_ADDR_VAR 0 13
17336: PUSH
17337: LD_VAR 0 38
17341: PUSH
17342: FOR_IN
17343: IFFALSE 17398
// for j in enemyBuildings do
17345: LD_ADDR_VAR 0 14
17349: PUSH
17350: LD_VAR 0 39
17354: PUSH
17355: FOR_IN
17356: IFFALSE 17394
// if GetDistUnits ( i , j ) < 12 then
17358: LD_VAR 0 13
17362: PPUSH
17363: LD_VAR 0 14
17367: PPUSH
17368: CALL_OW 296
17372: PUSH
17373: LD_INT 12
17375: LESS
17376: IFFALSE 17392
// ComAttackUnit ( i , j ) ;
17378: LD_VAR 0 13
17382: PPUSH
17383: LD_VAR 0 14
17387: PPUSH
17388: CALL_OW 115
17392: GO 17355
17394: POP
17395: POP
17396: GO 17342
17398: POP
17399: POP
// until not personel or not enableOmicronAI ;
17400: LD_VAR 0 18
17404: NOT
17405: PUSH
17406: LD_EXP 30
17410: NOT
17411: OR
17412: IFFALSE 12416
// end ;
17414: LD_VAR 0 12
17418: RET
// export function MountWeaponTurrent ; var turret , weapons ; begin
17419: LD_INT 0
17421: PPUSH
17422: PPUSH
17423: PPUSH
// weapons = [ ru_gun ] ;
17424: LD_ADDR_VAR 0 3
17428: PUSH
17429: LD_INT 44
17431: PUSH
17432: EMPTY
17433: LIST
17434: ST_TO_ADDR
// for turret in kirovBunkersToMountWeapon do
17435: LD_ADDR_VAR 0 2
17439: PUSH
17440: LD_EXP 73
17444: PUSH
17445: FOR_IN
17446: IFFALSE 17478
// AddComPlaceWeapon ( turret , weapons [ rand ( 1 , weapons ) ] ) ;
17448: LD_VAR 0 2
17452: PPUSH
17453: LD_VAR 0 3
17457: PUSH
17458: LD_INT 1
17460: PPUSH
17461: LD_VAR 0 3
17465: PPUSH
17466: CALL_OW 12
17470: ARRAY
17471: PPUSH
17472: CALL_OW 208
17476: GO 17445
17478: POP
17479: POP
// end ;
17480: LD_VAR 0 1
17484: RET
// export function KirovProduceVehicles ( factory ) ; begin
17485: LD_INT 0
17487: PPUSH
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17488: LD_VAR 0 1
17492: PPUSH
17493: LD_INT 21
17495: PPUSH
17496: LD_INT 1
17498: PPUSH
17499: LD_INT 1
17501: PPUSH
17502: LD_INT 51
17504: PPUSH
17505: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17509: LD_VAR 0 1
17513: PPUSH
17514: LD_INT 21
17516: PPUSH
17517: LD_INT 1
17519: PPUSH
17520: LD_INT 1
17522: PPUSH
17523: LD_INT 51
17525: PPUSH
17526: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17530: LD_VAR 0 1
17534: PPUSH
17535: LD_INT 21
17537: PPUSH
17538: LD_INT 1
17540: PPUSH
17541: LD_INT 1
17543: PPUSH
17544: LD_INT 51
17546: PPUSH
17547: CALL_OW 185
// case Difficulty of 1 :
17551: LD_OWVAR 67
17555: PUSH
17556: LD_INT 1
17558: DOUBLE
17559: EQUAL
17560: IFTRUE 17564
17562: GO 17687
17564: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17565: LD_VAR 0 1
17569: PPUSH
17570: LD_INT 21
17572: PUSH
17573: LD_INT 23
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 1
17582: PPUSH
17583: LD_INT 2
17585: PPUSH
17586: CALL_OW 12
17590: ARRAY
17591: PPUSH
17592: LD_INT 1
17594: PPUSH
17595: LD_INT 1
17597: PPUSH
17598: LD_INT 43
17600: PPUSH
17601: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17605: LD_VAR 0 1
17609: PPUSH
17610: LD_INT 21
17612: PUSH
17613: LD_INT 23
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: LD_INT 1
17622: PPUSH
17623: LD_INT 2
17625: PPUSH
17626: CALL_OW 12
17630: ARRAY
17631: PPUSH
17632: LD_INT 1
17634: PPUSH
17635: LD_INT 1
17637: PPUSH
17638: LD_INT 43
17640: PPUSH
17641: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17645: LD_VAR 0 1
17649: PPUSH
17650: LD_INT 21
17652: PUSH
17653: LD_INT 23
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: PUSH
17660: LD_INT 1
17662: PPUSH
17663: LD_INT 2
17665: PPUSH
17666: CALL_OW 12
17670: ARRAY
17671: PPUSH
17672: LD_INT 1
17674: PPUSH
17675: LD_INT 1
17677: PPUSH
17678: LD_INT 44
17680: PPUSH
17681: CALL_OW 185
// end ; 2 :
17685: GO 17950
17687: LD_INT 2
17689: DOUBLE
17690: EQUAL
17691: IFTRUE 17695
17693: GO 17818
17695: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17696: LD_VAR 0 1
17700: PPUSH
17701: LD_INT 21
17703: PUSH
17704: LD_INT 23
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 1
17713: PPUSH
17714: LD_INT 2
17716: PPUSH
17717: CALL_OW 12
17721: ARRAY
17722: PPUSH
17723: LD_INT 1
17725: PPUSH
17726: LD_INT 1
17728: PPUSH
17729: LD_INT 42
17731: PPUSH
17732: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17736: LD_VAR 0 1
17740: PPUSH
17741: LD_INT 21
17743: PUSH
17744: LD_INT 23
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 1
17753: PPUSH
17754: LD_INT 2
17756: PPUSH
17757: CALL_OW 12
17761: ARRAY
17762: PPUSH
17763: LD_INT 1
17765: PPUSH
17766: LD_INT 1
17768: PPUSH
17769: LD_INT 43
17771: PPUSH
17772: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17776: LD_VAR 0 1
17780: PPUSH
17781: LD_INT 21
17783: PUSH
17784: LD_INT 23
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 1
17793: PPUSH
17794: LD_INT 2
17796: PPUSH
17797: CALL_OW 12
17801: ARRAY
17802: PPUSH
17803: LD_INT 1
17805: PPUSH
17806: LD_INT 1
17808: PPUSH
17809: LD_INT 44
17811: PPUSH
17812: CALL_OW 185
// end ; 3 :
17816: GO 17950
17818: LD_INT 3
17820: DOUBLE
17821: EQUAL
17822: IFTRUE 17826
17824: GO 17949
17826: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17827: LD_VAR 0 1
17831: PPUSH
17832: LD_INT 21
17834: PUSH
17835: LD_INT 23
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 1
17844: PPUSH
17845: LD_INT 2
17847: PPUSH
17848: CALL_OW 12
17852: ARRAY
17853: PPUSH
17854: LD_INT 1
17856: PPUSH
17857: LD_INT 1
17859: PPUSH
17860: LD_INT 42
17862: PPUSH
17863: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17867: LD_VAR 0 1
17871: PPUSH
17872: LD_INT 21
17874: PUSH
17875: LD_INT 23
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: LD_INT 1
17884: PPUSH
17885: LD_INT 2
17887: PPUSH
17888: CALL_OW 12
17892: ARRAY
17893: PPUSH
17894: LD_INT 1
17896: PPUSH
17897: LD_INT 1
17899: PPUSH
17900: LD_INT 42
17902: PPUSH
17903: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17907: LD_VAR 0 1
17911: PPUSH
17912: LD_INT 21
17914: PUSH
17915: LD_INT 23
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 1
17924: PPUSH
17925: LD_INT 2
17927: PPUSH
17928: CALL_OW 12
17932: ARRAY
17933: PPUSH
17934: LD_INT 1
17936: PPUSH
17937: LD_INT 1
17939: PPUSH
17940: LD_INT 44
17942: PPUSH
17943: CALL_OW 185
// end ; end ;
17947: GO 17950
17949: POP
// end ;
17950: LD_VAR 0 2
17954: RET
// export function KirovAttackOmicron ; var i , vehicles , vehicle , goodVehs , cargo , cargoRefuel ; begin
17955: LD_INT 0
17957: PPUSH
17958: PPUSH
17959: PPUSH
17960: PPUSH
17961: PPUSH
17962: PPUSH
17963: PPUSH
// vehicles = [ ] ;
17964: LD_ADDR_VAR 0 3
17968: PUSH
17969: EMPTY
17970: ST_TO_ADDR
// cargoRefuel = [ ] ;
17971: LD_ADDR_VAR 0 7
17975: PUSH
17976: EMPTY
17977: ST_TO_ADDR
// for vehicle in kirovAttackVehicles do
17978: LD_ADDR_VAR 0 4
17982: PUSH
17983: LD_EXP 77
17987: PUSH
17988: FOR_IN
17989: IFFALSE 18038
// vehicles = Insert ( vehicles , 1 , [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 1 ] ) ;
17991: LD_ADDR_VAR 0 3
17995: PUSH
17996: LD_VAR 0 3
18000: PPUSH
18001: LD_INT 1
18003: PPUSH
18004: LD_VAR 0 4
18008: PUSH
18009: LD_VAR 0 4
18013: PPUSH
18014: CALL_OW 313
18018: PUSH
18019: LD_INT 1
18021: ARRAY
18022: PUSH
18023: LD_INT 1
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: LIST
18030: PPUSH
18031: CALL_OW 2
18035: ST_TO_ADDR
18036: GO 17988
18038: POP
18039: POP
// repeat for i := 1 to vehicles do
18040: LD_ADDR_VAR 0 2
18044: PUSH
18045: DOUBLE
18046: LD_INT 1
18048: DEC
18049: ST_TO_ADDR
18050: LD_VAR 0 3
18054: PUSH
18055: FOR_TO
18056: IFFALSE 18094
// if vehicles [ i ] [ 3 ] = 1 then
18058: LD_VAR 0 3
18062: PUSH
18063: LD_VAR 0 2
18067: ARRAY
18068: PUSH
18069: LD_INT 3
18071: ARRAY
18072: PUSH
18073: LD_INT 1
18075: EQUAL
18076: IFFALSE 18092
// goodVehs = goodVehs + 1 ;
18078: LD_ADDR_VAR 0 5
18082: PUSH
18083: LD_VAR 0 5
18087: PUSH
18088: LD_INT 1
18090: PLUS
18091: ST_TO_ADDR
18092: GO 18055
18094: POP
18095: POP
// if goodVehs = vehicles then
18096: LD_VAR 0 5
18100: PUSH
18101: LD_VAR 0 3
18105: EQUAL
18106: IFFALSE 18329
// for i := 1 to vehicles do
18108: LD_ADDR_VAR 0 2
18112: PUSH
18113: DOUBLE
18114: LD_INT 1
18116: DEC
18117: ST_TO_ADDR
18118: LD_VAR 0 3
18122: PUSH
18123: FOR_TO
18124: IFFALSE 18327
// begin if not HasTask ( vehicles [ i ] [ 1 ] ) then
18126: LD_VAR 0 3
18130: PUSH
18131: LD_VAR 0 2
18135: ARRAY
18136: PUSH
18137: LD_INT 1
18139: ARRAY
18140: PPUSH
18141: CALL_OW 314
18145: NOT
18146: IFFALSE 18325
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
18148: LD_VAR 0 3
18152: PUSH
18153: LD_VAR 0 2
18157: ARRAY
18158: PUSH
18159: LD_INT 1
18161: ARRAY
18162: PPUSH
18163: CALL_OW 261
18167: PUSH
18168: LD_INT 50
18170: LESS
18171: IFFALSE 18300
// begin for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] , [ f_ok ] ] ) do
18173: LD_ADDR_VAR 0 6
18177: PUSH
18178: LD_INT 22
18180: PUSH
18181: LD_INT 6
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 21
18190: PUSH
18191: LD_INT 2
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 34
18200: PUSH
18201: LD_INT 51
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 50
18210: PUSH
18211: EMPTY
18212: LIST
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: PPUSH
18220: CALL_OW 69
18224: PUSH
18225: FOR_IN
18226: IFFALSE 18264
// if GetCargo ( cargo , mat_oil ) > 0 then
18228: LD_VAR 0 6
18232: PPUSH
18233: LD_INT 2
18235: PPUSH
18236: CALL_OW 289
18240: PUSH
18241: LD_INT 0
18243: GREATER
18244: IFFALSE 18262
// cargoRefuel = cargoRefuel ^ cargo ;
18246: LD_ADDR_VAR 0 7
18250: PUSH
18251: LD_VAR 0 7
18255: PUSH
18256: LD_VAR 0 6
18260: ADD
18261: ST_TO_ADDR
18262: GO 18225
18264: POP
18265: POP
// if cargo then
18266: LD_VAR 0 6
18270: IFFALSE 18300
// ComRefuelFromCargo ( vehicles [ i ] [ 1 ] , cargo [ 1 ] ) ;
18272: LD_VAR 0 3
18276: PUSH
18277: LD_VAR 0 2
18281: ARRAY
18282: PUSH
18283: LD_INT 1
18285: ARRAY
18286: PPUSH
18287: LD_VAR 0 6
18291: PUSH
18292: LD_INT 1
18294: ARRAY
18295: PPUSH
18296: CALL 8415 0 2
// end ; AddComAgressiveMove ( vehicles [ i ] [ 1 ] , 26 , 35 ) ;
18300: LD_VAR 0 3
18304: PUSH
18305: LD_VAR 0 2
18309: ARRAY
18310: PUSH
18311: LD_INT 1
18313: ARRAY
18314: PPUSH
18315: LD_INT 26
18317: PPUSH
18318: LD_INT 35
18320: PPUSH
18321: CALL_OW 174
// end ; end ;
18325: GO 18123
18327: POP
18328: POP
// if IsEnemyNear ( vehicles [ i ] [ 1 ] , 1 ) and not IsInUnit ( vehicles [ i ] [ 2 ] ) then
18329: LD_VAR 0 3
18333: PUSH
18334: LD_VAR 0 2
18338: ARRAY
18339: PUSH
18340: LD_INT 1
18342: ARRAY
18343: PPUSH
18344: LD_INT 1
18346: PPUSH
18347: CALL 10167 0 2
18351: PUSH
18352: LD_VAR 0 3
18356: PUSH
18357: LD_VAR 0 2
18361: ARRAY
18362: PUSH
18363: LD_INT 2
18365: ARRAY
18366: PPUSH
18367: CALL_OW 310
18371: NOT
18372: AND
18373: IFFALSE 18409
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18375: LD_VAR 0 3
18379: PUSH
18380: LD_VAR 0 2
18384: ARRAY
18385: PUSH
18386: LD_INT 2
18388: ARRAY
18389: PPUSH
18390: LD_VAR 0 3
18394: PUSH
18395: LD_VAR 0 2
18399: ARRAY
18400: PUSH
18401: LD_INT 1
18403: ARRAY
18404: PPUSH
18405: CALL_OW 120
// goodVehs = 0 ;
18409: LD_ADDR_VAR 0 5
18413: PUSH
18414: LD_INT 0
18416: ST_TO_ADDR
// for i := 1 to vehicles do
18417: LD_ADDR_VAR 0 2
18421: PUSH
18422: DOUBLE
18423: LD_INT 1
18425: DEC
18426: ST_TO_ADDR
18427: LD_VAR 0 3
18431: PUSH
18432: FOR_TO
18433: IFFALSE 18959
// begin if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and not GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
18435: LD_VAR 0 3
18439: PUSH
18440: LD_VAR 0 2
18444: ARRAY
18445: PUSH
18446: LD_INT 1
18448: ARRAY
18449: PPUSH
18450: CALL_OW 256
18454: PUSH
18455: LD_INT 500
18457: LESS
18458: PUSH
18459: LD_VAR 0 3
18463: PUSH
18464: LD_VAR 0 2
18468: ARRAY
18469: PUSH
18470: LD_INT 1
18472: ARRAY
18473: PPUSH
18474: LD_INT 78
18476: PPUSH
18477: LD_INT 39
18479: PPUSH
18480: CALL_OW 297
18484: PUSH
18485: LD_INT 9
18487: LESS
18488: NOT
18489: AND
18490: IFFALSE 18555
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
18492: LD_ADDR_VAR 0 3
18496: PUSH
18497: LD_VAR 0 3
18501: PPUSH
18502: LD_VAR 0 2
18506: PUSH
18507: LD_VAR 0 3
18511: PUSH
18512: LD_VAR 0 2
18516: ARRAY
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PPUSH
18522: LD_INT 2
18524: PPUSH
18525: CALL 37275 0 3
18529: ST_TO_ADDR
// ComMoveXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) ;
18530: LD_VAR 0 3
18534: PUSH
18535: LD_VAR 0 2
18539: ARRAY
18540: PUSH
18541: LD_INT 1
18543: ARRAY
18544: PPUSH
18545: LD_INT 78
18547: PPUSH
18548: LD_INT 39
18550: PPUSH
18551: CALL_OW 111
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 and not IsEnemyNear ( vehicles [ i ] [ 1 ] , 1 ) then
18555: LD_VAR 0 3
18559: PUSH
18560: LD_VAR 0 2
18564: ARRAY
18565: PUSH
18566: LD_INT 1
18568: ARRAY
18569: PPUSH
18570: CALL_OW 256
18574: PUSH
18575: LD_INT 500
18577: LESS
18578: PUSH
18579: LD_VAR 0 3
18583: PUSH
18584: LD_VAR 0 2
18588: ARRAY
18589: PUSH
18590: LD_INT 1
18592: ARRAY
18593: PPUSH
18594: LD_INT 78
18596: PPUSH
18597: LD_INT 39
18599: PPUSH
18600: CALL_OW 297
18604: PUSH
18605: LD_INT 9
18607: LESS
18608: AND
18609: PUSH
18610: LD_VAR 0 3
18614: PUSH
18615: LD_VAR 0 2
18619: ARRAY
18620: PUSH
18621: LD_INT 1
18623: ARRAY
18624: PPUSH
18625: LD_INT 1
18627: PPUSH
18628: CALL 10167 0 2
18632: NOT
18633: AND
18634: IFFALSE 18689
// begin AddComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
18636: LD_VAR 0 3
18640: PUSH
18641: LD_VAR 0 2
18645: ARRAY
18646: PUSH
18647: LD_INT 2
18649: ARRAY
18650: PPUSH
18651: CALL_OW 181
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18655: LD_VAR 0 3
18659: PUSH
18660: LD_VAR 0 2
18664: ARRAY
18665: PUSH
18666: LD_INT 2
18668: ARRAY
18669: PPUSH
18670: LD_VAR 0 3
18674: PUSH
18675: LD_VAR 0 2
18679: ARRAY
18680: PUSH
18681: LD_INT 1
18683: ARRAY
18684: PPUSH
18685: CALL_OW 189
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 and vehicles [ i ] [ 3 ] = 2 then
18689: LD_VAR 0 3
18693: PUSH
18694: LD_VAR 0 2
18698: ARRAY
18699: PUSH
18700: LD_INT 1
18702: ARRAY
18703: PPUSH
18704: CALL_OW 256
18708: PUSH
18709: LD_INT 1000
18711: EQUAL
18712: PUSH
18713: LD_VAR 0 3
18717: PUSH
18718: LD_VAR 0 2
18722: ARRAY
18723: PUSH
18724: LD_INT 3
18726: ARRAY
18727: PUSH
18728: LD_INT 2
18730: EQUAL
18731: AND
18732: IFFALSE 18806
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) ;
18734: LD_ADDR_VAR 0 3
18738: PUSH
18739: LD_VAR 0 3
18743: PPUSH
18744: LD_VAR 0 2
18748: PUSH
18749: LD_VAR 0 3
18753: PUSH
18754: LD_VAR 0 2
18758: ARRAY
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PPUSH
18764: LD_INT 1
18766: PPUSH
18767: CALL 37275 0 3
18771: ST_TO_ADDR
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18772: LD_VAR 0 3
18776: PUSH
18777: LD_VAR 0 2
18781: ARRAY
18782: PUSH
18783: LD_INT 2
18785: ARRAY
18786: PPUSH
18787: LD_VAR 0 3
18791: PUSH
18792: LD_VAR 0 2
18796: ARRAY
18797: PUSH
18798: LD_INT 1
18800: ARRAY
18801: PPUSH
18802: CALL_OW 120
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
18806: LD_VAR 0 3
18810: PUSH
18811: LD_VAR 0 2
18815: ARRAY
18816: PUSH
18817: LD_INT 1
18819: ARRAY
18820: PPUSH
18821: CALL_OW 256
18825: PUSH
18826: LD_INT 250
18828: LESS
18829: IFFALSE 18856
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18831: LD_ADDR_VAR 0 3
18835: PUSH
18836: LD_VAR 0 3
18840: PUSH
18841: LD_VAR 0 3
18845: PUSH
18846: LD_VAR 0 2
18850: ARRAY
18851: PUSH
18852: EMPTY
18853: LIST
18854: DIFF
18855: ST_TO_ADDR
// if GetLives ( vehicles [ i ] [ 2 ] ) < 250 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 then
18856: LD_VAR 0 3
18860: PUSH
18861: LD_VAR 0 2
18865: ARRAY
18866: PUSH
18867: LD_INT 2
18869: ARRAY
18870: PPUSH
18871: CALL_OW 256
18875: PUSH
18876: LD_INT 250
18878: LESS
18879: PUSH
18880: LD_VAR 0 3
18884: PUSH
18885: LD_VAR 0 2
18889: ARRAY
18890: PUSH
18891: LD_INT 1
18893: ARRAY
18894: PPUSH
18895: CALL_OW 256
18899: PUSH
18900: LD_INT 250
18902: GREATER
18903: AND
18904: IFFALSE 18957
// begin kirovCanCaptureVehicles = kirovCanCaptureVehicles ^ vehicles [ i ] [ 1 ] ;
18906: LD_ADDR_EXP 31
18910: PUSH
18911: LD_EXP 31
18915: PUSH
18916: LD_VAR 0 3
18920: PUSH
18921: LD_VAR 0 2
18925: ARRAY
18926: PUSH
18927: LD_INT 1
18929: ARRAY
18930: ADD
18931: ST_TO_ADDR
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18932: LD_ADDR_VAR 0 3
18936: PUSH
18937: LD_VAR 0 3
18941: PUSH
18942: LD_VAR 0 3
18946: PUSH
18947: LD_VAR 0 2
18951: ARRAY
18952: PUSH
18953: EMPTY
18954: LIST
18955: DIFF
18956: ST_TO_ADDR
// end ; end ;
18957: GO 18432
18959: POP
18960: POP
// wait ( 0 0$1 ) ;
18961: LD_INT 35
18963: PPUSH
18964: CALL_OW 67
// until omicronSurrender ;
18968: LD_EXP 26
18972: IFFALSE 18040
// end ;
18974: LD_VAR 0 1
18978: RET
// export function MoveToBase ( units , roadArea ) ; var i , unit , playerUnits , playerUnit , enemyUnitsOnRoad , cratesOnRoad , nearUnit , nearCrates , attackUnits , medics , damageUnits , inBase , newBase ; begin
18979: LD_INT 0
18981: PPUSH
18982: PPUSH
18983: PPUSH
18984: PPUSH
18985: PPUSH
18986: PPUSH
18987: PPUSH
18988: PPUSH
18989: PPUSH
18990: PPUSH
18991: PPUSH
18992: PPUSH
18993: PPUSH
18994: PPUSH
// inBase = false ;
18995: LD_ADDR_VAR 0 15
18999: PUSH
19000: LD_INT 0
19002: ST_TO_ADDR
// repeat enemyUnitsOnRoad = FilterUnitsInArea ( roadArea , [ [ f_side , 3 ] ] ) ;
19003: LD_ADDR_VAR 0 8
19007: PUSH
19008: LD_VAR 0 2
19012: PPUSH
19013: LD_INT 22
19015: PUSH
19016: LD_INT 3
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: EMPTY
19024: LIST
19025: PPUSH
19026: CALL_OW 70
19030: ST_TO_ADDR
// cratesOnRoad = GetListOfCratesInArea ( roadArea ) ;
19031: LD_ADDR_VAR 0 9
19035: PUSH
19036: LD_VAR 0 2
19040: PPUSH
19041: CALL_OW 435
19045: ST_TO_ADDR
// attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_mechanic ] , [ f_type , unit_vehicle ] ] ] ) ;
19046: LD_ADDR_VAR 0 12
19050: PUSH
19051: LD_VAR 0 1
19055: PPUSH
19056: LD_INT 50
19058: PUSH
19059: EMPTY
19060: LIST
19061: PUSH
19062: LD_INT 2
19064: PUSH
19065: LD_INT 25
19067: PUSH
19068: LD_INT 1
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 25
19077: PUSH
19078: LD_INT 3
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 21
19087: PUSH
19088: LD_INT 2
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PPUSH
19105: CALL_OW 72
19109: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
19110: LD_ADDR_VAR 0 13
19114: PUSH
19115: LD_VAR 0 1
19119: PPUSH
19120: LD_INT 50
19122: PUSH
19123: EMPTY
19124: LIST
19125: PUSH
19126: LD_INT 25
19128: PUSH
19129: LD_INT 4
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PPUSH
19140: CALL_OW 72
19144: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ f_not , [ f_lives , 1000 ] ] ) ;
19145: LD_ADDR_VAR 0 14
19149: PUSH
19150: LD_VAR 0 1
19154: PPUSH
19155: LD_INT 3
19157: PUSH
19158: LD_INT 24
19160: PUSH
19161: LD_INT 1000
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PPUSH
19172: CALL_OW 72
19176: ST_TO_ADDR
// playerUnits = FilterAllUnits ( [ [ f_side , 3 ] ] ) ;
19177: LD_ADDR_VAR 0 6
19181: PUSH
19182: LD_INT 22
19184: PUSH
19185: LD_INT 3
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: EMPTY
19193: LIST
19194: PPUSH
19195: CALL_OW 69
19199: ST_TO_ADDR
// for unit in UnitFilter ( units , [ [ f_ok ] ] ) do
19200: LD_ADDR_VAR 0 5
19204: PUSH
19205: LD_VAR 0 1
19209: PPUSH
19210: LD_INT 50
19212: PUSH
19213: EMPTY
19214: LIST
19215: PUSH
19216: EMPTY
19217: LIST
19218: PPUSH
19219: CALL_OW 72
19223: PUSH
19224: FOR_IN
19225: IFFALSE 19972
// begin if attackUnits and medics then
19227: LD_VAR 0 12
19231: PUSH
19232: LD_VAR 0 13
19236: AND
19237: IFFALSE 19304
// begin if damageUnits then
19239: LD_VAR 0 14
19243: IFFALSE 19265
// ComHeal ( medics , damageUnits [ 1 ] ) else
19245: LD_VAR 0 13
19249: PPUSH
19250: LD_VAR 0 14
19254: PUSH
19255: LD_INT 1
19257: ARRAY
19258: PPUSH
19259: CALL_OW 128
19263: GO 19302
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
19265: LD_VAR 0 13
19269: PPUSH
19270: LD_VAR 0 12
19274: PUSH
19275: LD_INT 1
19277: ARRAY
19278: PPUSH
19279: CALL_OW 250
19283: PPUSH
19284: LD_VAR 0 12
19288: PUSH
19289: LD_INT 1
19291: ARRAY
19292: PPUSH
19293: CALL_OW 251
19297: PPUSH
19298: CALL_OW 111
// end else
19302: GO 19333
// begin if not attackUnits and medics then
19304: LD_VAR 0 12
19308: NOT
19309: PUSH
19310: LD_VAR 0 13
19314: AND
19315: IFFALSE 19333
// attackUnits = attackUnits ^ medics ;
19317: LD_ADDR_VAR 0 12
19321: PUSH
19322: LD_VAR 0 12
19326: PUSH
19327: LD_VAR 0 13
19331: ADD
19332: ST_TO_ADDR
// end ; for i := 1 to cratesOnRoad / 2 do
19333: LD_ADDR_VAR 0 4
19337: PUSH
19338: DOUBLE
19339: LD_INT 1
19341: DEC
19342: ST_TO_ADDR
19343: LD_VAR 0 9
19347: PUSH
19348: LD_INT 2
19350: DIVREAL
19351: PUSH
19352: FOR_TO
19353: IFFALSE 19392
// AddComAttackPlace ( attackUnits , cratesOnRoad [ i ] , cratesOnRoad [ i + 1 ] ) ;
19355: LD_VAR 0 12
19359: PPUSH
19360: LD_VAR 0 9
19364: PUSH
19365: LD_VAR 0 4
19369: ARRAY
19370: PPUSH
19371: LD_VAR 0 9
19375: PUSH
19376: LD_VAR 0 4
19380: PUSH
19381: LD_INT 1
19383: PLUS
19384: ARRAY
19385: PPUSH
19386: CALL_OW 176
19390: GO 19352
19392: POP
19393: POP
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , 27 , 34 ) ;
19394: LD_VAR 0 12
19398: PPUSH
19399: LD_INT 21
19401: PUSH
19402: LD_INT 1
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 3
19411: PUSH
19412: LD_INT 60
19414: PUSH
19415: EMPTY
19416: LIST
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PPUSH
19426: CALL_OW 72
19430: PPUSH
19431: LD_INT 27
19433: PPUSH
19434: LD_INT 34
19436: PPUSH
19437: CALL_OW 111
// wait ( 0 0$01 ) ;
19441: LD_INT 35
19443: PPUSH
19444: CALL_OW 67
// if enemyUnitsOnRoad and UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) then
19448: LD_VAR 0 8
19452: PUSH
19453: LD_VAR 0 12
19457: PPUSH
19458: LD_INT 21
19460: PUSH
19461: LD_INT 1
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 3
19470: PUSH
19471: LD_INT 60
19473: PUSH
19474: EMPTY
19475: LIST
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PPUSH
19485: CALL_OW 72
19489: AND
19490: IFFALSE 19673
// begin for playerUnit in playerUnits do
19492: LD_ADDR_VAR 0 7
19496: PUSH
19497: LD_VAR 0 6
19501: PUSH
19502: FOR_IN
19503: IFFALSE 19669
// begin if Attacks ( playerUnit ) then
19505: LD_VAR 0 7
19509: PPUSH
19510: CALL_OW 320
19514: IFFALSE 19601
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
19516: LD_VAR 0 7
19520: PPUSH
19521: CALL_OW 320
19525: PUSH
19526: LD_VAR 0 1
19530: IN
19531: PUSH
19532: LD_VAR 0 7
19536: PPUSH
19537: LD_VAR 0 5
19541: PPUSH
19542: CALL_OW 296
19546: PUSH
19547: LD_INT 13
19549: LESS
19550: AND
19551: IFFALSE 19599
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , playerUnit ) end else
19553: LD_VAR 0 12
19557: PPUSH
19558: LD_INT 21
19560: PUSH
19561: LD_INT 1
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 3
19570: PUSH
19571: LD_INT 60
19573: PUSH
19574: EMPTY
19575: LIST
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PPUSH
19585: CALL_OW 72
19589: PPUSH
19590: LD_VAR 0 7
19594: PPUSH
19595: CALL_OW 115
19599: GO 19667
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , unit ) ;
19601: LD_ADDR_VAR 0 10
19605: PUSH
19606: LD_VAR 0 8
19610: PPUSH
19611: LD_VAR 0 5
19615: PPUSH
19616: CALL_OW 74
19620: ST_TO_ADDR
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , nearUnit ) ;
19621: LD_VAR 0 12
19625: PPUSH
19626: LD_INT 21
19628: PUSH
19629: LD_INT 1
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 3
19638: PUSH
19639: LD_INT 60
19641: PUSH
19642: EMPTY
19643: LIST
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PPUSH
19653: CALL_OW 72
19657: PPUSH
19658: LD_VAR 0 10
19662: PPUSH
19663: CALL_OW 115
// end ; end ;
19667: GO 19502
19669: POP
19670: POP
// end else
19671: GO 19720
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , 27 , 34 ) ;
19673: LD_VAR 0 12
19677: PPUSH
19678: LD_INT 21
19680: PUSH
19681: LD_INT 1
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 3
19690: PUSH
19691: LD_INT 60
19693: PUSH
19694: EMPTY
19695: LIST
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PPUSH
19705: CALL_OW 72
19709: PPUSH
19710: LD_INT 27
19712: PPUSH
19713: LD_INT 34
19715: PPUSH
19716: CALL_OW 111
// if enemyUnitsOnRoad then
19720: LD_VAR 0 8
19724: IFFALSE 19908
// begin for playerUnit in playerUnits do
19726: LD_ADDR_VAR 0 7
19730: PUSH
19731: LD_VAR 0 6
19735: PUSH
19736: FOR_IN
19737: IFFALSE 19904
// begin if Attacks ( playerUnit ) then
19739: LD_VAR 0 7
19743: PPUSH
19744: CALL_OW 320
19748: IFFALSE 19821
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
19750: LD_VAR 0 7
19754: PPUSH
19755: CALL_OW 320
19759: PUSH
19760: LD_VAR 0 1
19764: IN
19765: PUSH
19766: LD_VAR 0 7
19770: PPUSH
19771: LD_VAR 0 5
19775: PPUSH
19776: CALL_OW 296
19780: PUSH
19781: LD_INT 13
19783: LESS
19784: AND
19785: IFFALSE 19819
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , playerUnit ) end else
19787: LD_VAR 0 12
19791: PPUSH
19792: LD_INT 21
19794: PUSH
19795: LD_INT 2
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: EMPTY
19803: LIST
19804: PPUSH
19805: CALL_OW 72
19809: PPUSH
19810: LD_VAR 0 7
19814: PPUSH
19815: CALL_OW 115
19819: GO 19902
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) ;
19821: LD_ADDR_VAR 0 10
19825: PUSH
19826: LD_VAR 0 8
19830: PPUSH
19831: LD_VAR 0 12
19835: PPUSH
19836: LD_INT 21
19838: PUSH
19839: LD_INT 2
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 50
19848: PUSH
19849: EMPTY
19850: LIST
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PPUSH
19856: CALL_OW 72
19860: PUSH
19861: LD_INT 1
19863: ARRAY
19864: PPUSH
19865: CALL_OW 74
19869: ST_TO_ADDR
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , nearUnit ) ;
19870: LD_VAR 0 12
19874: PPUSH
19875: LD_INT 21
19877: PUSH
19878: LD_INT 2
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: EMPTY
19886: LIST
19887: PPUSH
19888: CALL_OW 72
19892: PPUSH
19893: LD_VAR 0 10
19897: PPUSH
19898: CALL_OW 115
// end ; end ;
19902: GO 19736
19904: POP
19905: POP
// end else
19906: GO 19941
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , 27 , 34 ) ;
19908: LD_VAR 0 12
19912: PPUSH
19913: LD_INT 21
19915: PUSH
19916: LD_INT 2
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: EMPTY
19924: LIST
19925: PPUSH
19926: CALL_OW 72
19930: PPUSH
19931: LD_INT 27
19933: PPUSH
19934: LD_INT 34
19936: PPUSH
19937: CALL_OW 111
// if GetDistUnitXY ( unit , 27 , 34 ) < 5 then
19941: LD_VAR 0 5
19945: PPUSH
19946: LD_INT 27
19948: PPUSH
19949: LD_INT 34
19951: PPUSH
19952: CALL_OW 297
19956: PUSH
19957: LD_INT 5
19959: LESS
19960: IFFALSE 19970
// inBase = true ;
19962: LD_ADDR_VAR 0 15
19966: PUSH
19967: LD_INT 1
19969: ST_TO_ADDR
// end ;
19970: GO 19224
19972: POP
19973: POP
// wait ( 0 0$1 ) ;
19974: LD_INT 35
19976: PPUSH
19977: CALL_OW 67
// until UnitFilter ( units , [ f_ok ] ) = 0 or inBase ;
19981: LD_VAR 0 1
19985: PPUSH
19986: LD_INT 50
19988: PUSH
19989: EMPTY
19990: LIST
19991: PPUSH
19992: CALL_OW 72
19996: PUSH
19997: LD_INT 0
19999: EQUAL
20000: PUSH
20001: LD_VAR 0 15
20005: OR
20006: IFFALSE 19003
// ComMoveXY ( UnitFilter ( units , [ [ f_type , unit_human ] , [ f_ok ] ] ) , 27 , 34 ) ;
20008: LD_VAR 0 1
20012: PPUSH
20013: LD_INT 21
20015: PUSH
20016: LD_INT 1
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 50
20025: PUSH
20026: EMPTY
20027: LIST
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PPUSH
20033: CALL_OW 72
20037: PPUSH
20038: LD_INT 27
20040: PPUSH
20041: LD_INT 34
20043: PPUSH
20044: CALL_OW 111
// for i := 1 to units do
20048: LD_ADDR_VAR 0 4
20052: PUSH
20053: DOUBLE
20054: LD_INT 1
20056: DEC
20057: ST_TO_ADDR
20058: LD_VAR 0 1
20062: PUSH
20063: FOR_TO
20064: IFFALSE 20099
// if IsOk ( units [ i ] ) then
20066: LD_VAR 0 1
20070: PUSH
20071: LD_VAR 0 4
20075: ARRAY
20076: PPUSH
20077: CALL_OW 302
20081: IFFALSE 20097
// americanTroopsArriveOmicronCounter = americanTroopsArriveOmicronCounter + 1 ;
20083: LD_ADDR_EXP 15
20087: PUSH
20088: LD_EXP 15
20092: PUSH
20093: LD_INT 1
20095: PLUS
20096: ST_TO_ADDR
20097: GO 20063
20099: POP
20100: POP
// amSupportTroops = amSupportTroops diff units ;
20101: LD_ADDR_EXP 85
20105: PUSH
20106: LD_EXP 85
20110: PUSH
20111: LD_VAR 0 1
20115: DIFF
20116: ST_TO_ADDR
// newBase = amBase ;
20117: LD_ADDR_VAR 0 16
20121: PUSH
20122: LD_EXP 87
20126: ST_TO_ADDR
// newBase = newBase ^ UnitFilter ( units , [ f_ok ] ) ;
20127: LD_ADDR_VAR 0 16
20131: PUSH
20132: LD_VAR 0 16
20136: PUSH
20137: LD_VAR 0 1
20141: PPUSH
20142: LD_INT 50
20144: PUSH
20145: EMPTY
20146: LIST
20147: PPUSH
20148: CALL_OW 72
20152: ADD
20153: ST_TO_ADDR
// amBase = newBase ;
20154: LD_ADDR_EXP 87
20158: PUSH
20159: LD_VAR 0 16
20163: ST_TO_ADDR
// end ; end_of_file
20164: LD_VAR 0 3
20168: RET
// export function Lose_Burlak ; begin
20169: LD_INT 0
20171: PPUSH
// YouLost ( Burlak ) ;
20172: LD_STRING Burlak
20174: PPUSH
20175: CALL_OW 104
// end ;
20179: LD_VAR 0 1
20183: RET
// export function Lose_Omicron ; begin
20184: LD_INT 0
20186: PPUSH
// YouLost ( Omicron ) ;
20187: LD_STRING Omicron
20189: PPUSH
20190: CALL_OW 104
// end ;
20194: LD_VAR 0 1
20198: RET
// export function Lose_Vehicles ; begin
20199: LD_INT 0
20201: PPUSH
// YouLost ( Vehicles ) ;
20202: LD_STRING Vehicles
20204: PPUSH
20205: CALL_OW 104
// end ;
20209: LD_VAR 0 1
20213: RET
// export function Lose_SelfAttack ; begin
20214: LD_INT 0
20216: PPUSH
// YouLost ( SelfAttack ) ;
20217: LD_STRING SelfAttack
20219: PPUSH
20220: CALL_OW 104
// end ;
20224: LD_VAR 0 1
20228: RET
// export function Lose_Delay ; begin
20229: LD_INT 0
20231: PPUSH
// YouLost ( Delay ) ;
20232: LD_STRING Delay
20234: PPUSH
20235: CALL_OW 104
// end ; end_of_file
20239: LD_VAR 0 1
20243: RET
// export function FinishMission ; begin
20244: LD_INT 0
20246: PPUSH
// SetRewards ;
20247: CALL 20268 0 0
// SavePlayerCharacters ;
20251: CALL 20482 0 0
// SaveGlobalVariables ;
20255: CALL 20811 0 0
// YouWin ;
20259: CALL_OW 103
// end ;
20263: LD_VAR 0 1
20267: RET
// function SetRewards ; var unitsToReward ; begin
20268: LD_INT 0
20270: PPUSH
20271: PPUSH
// if produceMoreVehicles then
20272: LD_EXP 19
20276: IFFALSE 20290
// AddMedal ( Surplus , 1 ) else
20278: LD_STRING Surplus
20280: PPUSH
20281: LD_INT 1
20283: PPUSH
20284: CALL_OW 101
20288: GO 20320
// if produceOnlyForYou then
20290: LD_EXP 20
20294: IFFALSE 20309
// AddMedal ( Surplus , - 1 ) else
20296: LD_STRING Surplus
20298: PPUSH
20299: LD_INT 1
20301: NEG
20302: PPUSH
20303: CALL_OW 101
20307: GO 20320
// AddMedal ( Surplus , - 2 ) ;
20309: LD_STRING Surplus
20311: PPUSH
20312: LD_INT 2
20314: NEG
20315: PPUSH
20316: CALL_OW 101
// if americanTroopsArriveOmicronCounter < maxAmericanTroopsIgnore then
20320: LD_EXP 15
20324: PUSH
20325: LD_EXP 47
20329: LESS
20330: IFFALSE 20344
// AddMedal ( PreventReinforcements , 1 ) else
20332: LD_STRING PreventReinforcements
20334: PPUSH
20335: LD_INT 1
20337: PPUSH
20338: CALL_OW 101
20342: GO 20355
// AddMedal ( PreventReinforcements , - 1 ) ;
20344: LD_STRING PreventReinforcements
20346: PPUSH
20347: LD_INT 1
20349: NEG
20350: PPUSH
20351: CALL_OW 101
// if scholtzeSaved and IsOK ( Scholtze ) then
20355: LD_EXP 10
20359: PUSH
20360: LD_EXP 56
20364: PPUSH
20365: CALL_OW 302
20369: AND
20370: IFFALSE 20384
// AddMedal ( Scholtze , 1 ) else
20372: LD_STRING Scholtze
20374: PPUSH
20375: LD_INT 1
20377: PPUSH
20378: CALL_OW 101
20382: GO 20395
// AddMedal ( Scholtze , - 1 ) ;
20384: LD_STRING Scholtze
20386: PPUSH
20387: LD_INT 1
20389: NEG
20390: PPUSH
20391: CALL_OW 101
// GiveMedals ( Main ) ;
20395: LD_STRING Main
20397: PPUSH
20398: CALL_OW 102
// unitsToReward = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
20402: LD_ADDR_VAR 0 2
20406: PUSH
20407: LD_INT 22
20409: PUSH
20410: LD_INT 3
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 21
20419: PUSH
20420: LD_INT 1
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PPUSH
20431: CALL_OW 69
20435: ST_TO_ADDR
// unitsToReward = unitsToReward ^ survivorsArabianAttack ;
20436: LD_ADDR_VAR 0 2
20440: PUSH
20441: LD_VAR 0 2
20445: PUSH
20446: LD_EXP 80
20450: ADD
20451: ST_TO_ADDR
// unitsToReward = unitsToReward diff Popov ;
20452: LD_ADDR_VAR 0 2
20456: PUSH
20457: LD_VAR 0 2
20461: PUSH
20462: LD_EXP 63
20466: DIFF
20467: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
20468: LD_VAR 0 2
20472: PPUSH
20473: CALL_OW 43
// end ;
20477: LD_VAR 0 1
20481: RET
// function SavePlayerCharacters ; var othersYour , othersKirov ; begin
20482: LD_INT 0
20484: PPUSH
20485: PPUSH
20486: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
20487: LD_EXP 50
20491: PPUSH
20492: LD_STRING Burlak
20494: PPUSH
20495: LD_INT 3
20497: PPUSH
20498: CALL 7299 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
20502: LD_EXP 51
20506: PPUSH
20507: LD_STRING Gnyevko
20509: PPUSH
20510: LD_INT 3
20512: PPUSH
20513: CALL 7299 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
20517: LD_EXP 53
20521: PPUSH
20522: LD_STRING Kovalyuk
20524: PPUSH
20525: LD_INT 3
20527: PPUSH
20528: CALL 7299 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
20532: LD_EXP 52
20536: PPUSH
20537: LD_STRING Kirilenkova
20539: PPUSH
20540: LD_INT 3
20542: PPUSH
20543: CALL 7299 0 3
// ExtSaveCharacter ( Scholtze , Scholtze , 3 ) ;
20547: LD_EXP 56
20551: PPUSH
20552: LD_STRING Scholtze
20554: PPUSH
20555: LD_INT 3
20557: PPUSH
20558: CALL 7299 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
20562: LD_EXP 54
20566: PPUSH
20567: LD_STRING Belkov
20569: PPUSH
20570: LD_INT 3
20572: PPUSH
20573: CALL 7299 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
20577: LD_EXP 55
20581: PPUSH
20582: LD_STRING Belkov2
20584: PPUSH
20585: LD_INT 3
20587: PPUSH
20588: CALL 7299 0 3
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
20592: LD_EXP 54
20596: PPUSH
20597: LD_STRING Belkov
20599: PPUSH
20600: LD_INT 6
20602: PPUSH
20603: CALL 7299 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
20607: LD_EXP 55
20611: PPUSH
20612: LD_STRING Belkov2
20614: PPUSH
20615: LD_INT 6
20617: PPUSH
20618: CALL 7299 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova , Scholtze ] ;
20622: LD_ADDR_VAR 0 2
20626: PUSH
20627: LD_INT 22
20629: PUSH
20630: LD_INT 3
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 21
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 50
20649: PUSH
20650: EMPTY
20651: LIST
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: LIST
20657: PPUSH
20658: CALL_OW 69
20662: PUSH
20663: LD_EXP 50
20667: PUSH
20668: LD_EXP 51
20672: PUSH
20673: LD_EXP 54
20677: PUSH
20678: LD_EXP 55
20682: PUSH
20683: LD_EXP 53
20687: PUSH
20688: LD_EXP 52
20692: PUSH
20693: LD_EXP 56
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: DIFF
20707: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
20708: LD_VAR 0 2
20712: PPUSH
20713: LD_STRING other_survivors
20715: PPUSH
20716: LD_INT 3
20718: PPUSH
20719: CALL 7355 0 3
// othersKirov = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Kurin , Popov , Belkov , Belkov2 ] ;
20723: LD_ADDR_VAR 0 3
20727: PUSH
20728: LD_INT 22
20730: PUSH
20731: LD_INT 6
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 21
20740: PUSH
20741: LD_INT 1
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 50
20750: PUSH
20751: EMPTY
20752: LIST
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: LIST
20758: PPUSH
20759: CALL_OW 69
20763: PUSH
20764: LD_EXP 62
20768: PUSH
20769: LD_EXP 63
20773: PUSH
20774: LD_EXP 54
20778: PUSH
20779: LD_EXP 55
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: DIFF
20790: ST_TO_ADDR
// ExtSaveCharacters ( othersKirov , other_kirov , 6 ) ;
20791: LD_VAR 0 3
20795: PPUSH
20796: LD_STRING other_kirov
20798: PPUSH
20799: LD_INT 6
20801: PPUSH
20802: CALL 7355 0 3
// end ;
20806: LD_VAR 0 1
20810: RET
// function SaveGlobalVariables ; begin
20811: LD_INT 0
20813: PPUSH
// SaveVariable ( kurinOpinion , 03_KurinOpinion_1 ) ;
20814: LD_EXP 5
20818: PPUSH
20819: LD_STRING 03_KurinOpinion_1
20821: PPUSH
20822: CALL_OW 39
// SaveVariable ( vehiclesToSave , 03_SavedVehicles_2 ) ;
20826: LD_EXP 7
20830: PPUSH
20831: LD_STRING 03_SavedVehicles_2
20833: PPUSH
20834: CALL_OW 39
// end ; end_of_file
20838: LD_VAR 0 1
20842: RET
// export function CustomEvent ( event ) ; begin
20843: LD_INT 0
20845: PPUSH
// end ;
20846: LD_VAR 0 2
20850: RET
// on Command ( com ) do var i , j , temp , order , x , y , building ;
20851: LD_INT 0
20853: PPUSH
20854: PPUSH
20855: PPUSH
20856: PPUSH
20857: PPUSH
20858: PPUSH
20859: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
20860: LD_ADDR_VAR 0 2
20864: PUSH
20865: LD_INT 22
20867: PUSH
20868: LD_INT 3
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 21
20877: PUSH
20878: LD_INT 1
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PPUSH
20889: CALL_OW 69
20893: PUSH
20894: FOR_IN
20895: IFFALSE 21092
// if GetTaskList ( i ) > 0 then
20897: LD_VAR 0 2
20901: PPUSH
20902: CALL_OW 437
20906: PUSH
20907: LD_INT 0
20909: GREATER
20910: IFFALSE 21090
// for j = 1 to GetTaskList ( i ) do
20912: LD_ADDR_VAR 0 3
20916: PUSH
20917: DOUBLE
20918: LD_INT 1
20920: DEC
20921: ST_TO_ADDR
20922: LD_VAR 0 2
20926: PPUSH
20927: CALL_OW 437
20931: PUSH
20932: FOR_TO
20933: IFFALSE 21088
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
20935: LD_ADDR_VAR 0 4
20939: PUSH
20940: LD_VAR 0 2
20944: PPUSH
20945: CALL_OW 437
20949: PUSH
20950: LD_VAR 0 3
20954: ARRAY
20955: PUSH
20956: LD_INT 4
20958: ARRAY
20959: ST_TO_ADDR
// building = GetTaskList ( i ) [ j ] [ 5 ] ;
20960: LD_ADDR_VAR 0 8
20964: PUSH
20965: LD_VAR 0 2
20969: PPUSH
20970: CALL_OW 437
20974: PUSH
20975: LD_VAR 0 3
20979: ARRAY
20980: PUSH
20981: LD_INT 5
20983: ARRAY
20984: ST_TO_ADDR
// x = GetTaskList ( i ) [ j ] [ 2 ] ;
20985: LD_ADDR_VAR 0 6
20989: PUSH
20990: LD_VAR 0 2
20994: PPUSH
20995: CALL_OW 437
20999: PUSH
21000: LD_VAR 0 3
21004: ARRAY
21005: PUSH
21006: LD_INT 2
21008: ARRAY
21009: ST_TO_ADDR
// y = GetTaskList ( i ) [ j ] [ 3 ] ;
21010: LD_ADDR_VAR 0 7
21014: PUSH
21015: LD_VAR 0 2
21019: PPUSH
21020: CALL_OW 437
21024: PUSH
21025: LD_VAR 0 3
21029: ARRAY
21030: PUSH
21031: LD_INT 3
21033: ARRAY
21034: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
21035: LD_VAR 0 4
21039: PPUSH
21040: CALL_OW 255
21044: PUSH
21045: LD_INT 6
21047: EQUAL
21048: PUSH
21049: LD_VAR 0 2
21053: PPUSH
21054: CALL_OW 437
21058: PUSH
21059: LD_VAR 0 3
21063: ARRAY
21064: PUSH
21065: LD_INT 1
21067: ARRAY
21068: PUSH
21069: LD_STRING <
21071: EQUAL
21072: AND
21073: IFFALSE 21086
// SetTaskList ( i , [ ] ) ;
21075: LD_VAR 0 2
21079: PPUSH
21080: EMPTY
21081: PPUSH
21082: CALL_OW 446
// end ;
21086: GO 20932
21088: POP
21089: POP
21090: GO 20894
21092: POP
21093: POP
// end ;
21094: PPOPN 8
21096: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
21097: LD_VAR 0 2
21101: PUSH
21102: LD_INT 6
21104: EQUAL
21105: IFFALSE 21119
// SetSide ( building , 6 ) ;
21107: LD_VAR 0 1
21111: PPUSH
21112: LD_INT 6
21114: PPUSH
21115: CALL_OW 235
// end ;
21119: PPOPN 3
21121: END
// on BuildingComplete ( building ) do var diffUnits , canTakeUnits ;
21122: LD_INT 0
21124: PPUSH
21125: PPUSH
// begin diffUnits = [ ] ;
21126: LD_ADDR_VAR 0 2
21130: PUSH
21131: EMPTY
21132: ST_TO_ADDR
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , SecondBurlakBase ) then
21133: LD_VAR 0 1
21137: PPUSH
21138: CALL_OW 255
21142: PUSH
21143: LD_INT 3
21145: EQUAL
21146: PUSH
21147: LD_VAR 0 1
21151: PPUSH
21152: CALL_OW 266
21156: PUSH
21157: LD_INT 0
21159: EQUAL
21160: AND
21161: PUSH
21162: LD_VAR 0 1
21166: PPUSH
21167: LD_INT 21
21169: PPUSH
21170: CALL_OW 308
21174: AND
21175: IFFALSE 21189
// SetBName ( building , kagan ) ;
21177: LD_VAR 0 1
21181: PPUSH
21182: LD_STRING kagan
21184: PPUSH
21185: CALL_OW 500
// if GetSide ( building ) = 6 then
21189: LD_VAR 0 1
21193: PPUSH
21194: CALL_OW 255
21198: PUSH
21199: LD_INT 6
21201: EQUAL
21202: IFFALSE 21383
// begin if GetBType ( building ) = b_ext_noncombat then
21204: LD_VAR 0 1
21208: PPUSH
21209: CALL_OW 266
21213: PUSH
21214: LD_INT 19
21216: EQUAL
21217: IFFALSE 21223
// begin SpawnKirovSupport ;
21219: CALL 4614 0 0
// end ; if GetBType ( building ) = b_depot then
21223: LD_VAR 0 1
21227: PPUSH
21228: CALL_OW 266
21232: PUSH
21233: LD_INT 0
21235: EQUAL
21236: IFFALSE 21282
// begin kirovOilDepot = building ;
21238: LD_ADDR_EXP 69
21242: PUSH
21243: LD_VAR 0 1
21247: ST_TO_ADDR
// SetResourceType ( GetBase ( kirovOilDepot ) , mat_oil , 3000 ) ;
21248: LD_EXP 69
21252: PPUSH
21253: CALL_OW 274
21257: PPUSH
21258: LD_INT 2
21260: PPUSH
21261: LD_INT 3000
21263: PPUSH
21264: CALL_OW 277
// ComEnterUnit ( Grishko , building ) ;
21268: LD_EXP 83
21272: PPUSH
21273: LD_VAR 0 1
21277: PPUSH
21278: CALL_OW 120
// end ; if ( GetBType ( building ) = b_breastwork or GetBType ( building ) = b_armoury ) and IsInArea ( building , SecondKurinBase ) then
21282: LD_VAR 0 1
21286: PPUSH
21287: CALL_OW 266
21291: PUSH
21292: LD_INT 31
21294: EQUAL
21295: PUSH
21296: LD_VAR 0 1
21300: PPUSH
21301: CALL_OW 266
21305: PUSH
21306: LD_INT 4
21308: EQUAL
21309: OR
21310: PUSH
21311: LD_VAR 0 1
21315: PPUSH
21316: LD_INT 20
21318: PPUSH
21319: CALL_OW 308
21323: AND
21324: IFFALSE 21383
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) [ 1 ] , building ) ;
21326: LD_EXP 79
21330: PPUSH
21331: LD_INT 25
21333: PUSH
21334: LD_INT 1
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 56
21343: PUSH
21344: EMPTY
21345: LIST
21346: PUSH
21347: LD_INT 3
21349: PUSH
21350: LD_INT 60
21352: PUSH
21353: EMPTY
21354: LIST
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: LIST
21364: PPUSH
21365: CALL_OW 72
21369: PUSH
21370: LD_INT 1
21372: ARRAY
21373: PPUSH
21374: LD_VAR 0 1
21378: PPUSH
21379: CALL_OW 120
// end ; end ;
21383: PPOPN 3
21385: END
// on UpgradeComplete ( building ) do var i , tmp ;
21386: LD_INT 0
21388: PPUSH
21389: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_factory and not dialog_workshop then
21390: LD_VAR 0 1
21394: PPUSH
21395: CALL_OW 255
21399: PUSH
21400: LD_INT 3
21402: EQUAL
21403: PUSH
21404: LD_VAR 0 1
21408: PPUSH
21409: CALL_OW 266
21413: PUSH
21414: LD_INT 3
21416: EQUAL
21417: AND
21418: PUSH
21419: LD_EXP 11
21423: NOT
21424: AND
21425: IFFALSE 21436
// Dial_UpgradeWorkshop ( building ) ;
21427: LD_VAR 0 1
21431: PPUSH
21432: CALL 24576 0 1
// end ;
21436: PPOPN 3
21438: END
// on UnitDestroyed ( un ) do begin if un = Burlak then
21439: LD_VAR 0 1
21443: PUSH
21444: LD_EXP 50
21448: EQUAL
21449: IFFALSE 21455
// Lose_Burlak ;
21451: CALL 20169 0 0
// if un = beriaDepot and not canDestroyBeriaBase then
21455: LD_VAR 0 1
21459: PUSH
21460: LD_EXP 61
21464: EQUAL
21465: PUSH
21466: LD_EXP 29
21470: NOT
21471: AND
21472: IFFALSE 21478
// Lose_Omicron ;
21474: CALL 20184 0 0
// end ;
21478: PPOPN 1
21480: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
21481: LD_VAR 0 1
21485: PUSH
21486: LD_INT 3
21488: EQUAL
21489: PUSH
21490: LD_VAR 0 2
21494: PUSH
21495: LD_INT 6
21497: EQUAL
21498: AND
21499: IFFALSE 21505
// Lose_SelfAttack ;
21501: CALL 20214 0 0
// end ;
21505: PPOPN 2
21507: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 6 then
21508: LD_VAR 0 1
21512: PPUSH
21513: CALL_OW 255
21517: PUSH
21518: LD_INT 6
21520: EQUAL
21521: IFFALSE 21686
// begin if GetWeapon ( vehicle ) = ru_cargo_bay and not kirovTransportCargo then
21523: LD_VAR 0 1
21527: PPUSH
21528: CALL_OW 264
21532: PUSH
21533: LD_INT 51
21535: EQUAL
21536: PUSH
21537: LD_EXP 75
21541: NOT
21542: AND
21543: IFFALSE 21557
// kirovTransportCargo = vehicle else
21545: LD_ADDR_EXP 75
21549: PUSH
21550: LD_VAR 0 1
21554: ST_TO_ADDR
21555: GO 21629
// begin if GetWeapon ( vehicle ) = ru_cargo_bay then
21557: LD_VAR 0 1
21561: PPUSH
21562: CALL_OW 264
21566: PUSH
21567: LD_INT 51
21569: EQUAL
21570: IFFALSE 21629
// begin ComTransport ( vehicle , kirovOilDepot , mat_oil ) ;
21572: LD_VAR 0 1
21576: PPUSH
21577: LD_EXP 69
21581: PPUSH
21582: LD_INT 2
21584: PPUSH
21585: CALL_OW 151
// AddComMoveXY ( vehicle , 137 , 99 ) ;
21589: LD_VAR 0 1
21593: PPUSH
21594: LD_INT 137
21596: PPUSH
21597: LD_INT 99
21599: PPUSH
21600: CALL_OW 171
// AddComHold ( vehicle ) ;
21604: LD_VAR 0 1
21608: PPUSH
21609: CALL_OW 200
// kirovAttackCargo = kirovAttackCargo ^ vehicle ;
21613: LD_ADDR_EXP 76
21617: PUSH
21618: LD_EXP 76
21622: PUSH
21623: LD_VAR 0 1
21627: ADD
21628: ST_TO_ADDR
// end ; end ; if GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
21629: LD_VAR 0 1
21633: PPUSH
21634: CALL_OW 264
21638: PUSH
21639: LD_INT 42
21641: PUSH
21642: LD_INT 43
21644: PUSH
21645: LD_INT 44
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: LIST
21652: IN
21653: IFFALSE 21686
// begin kirovAttackVehicles = kirovAttackVehicles ^ vehicle ;
21655: LD_ADDR_EXP 77
21659: PUSH
21660: LD_EXP 77
21664: PUSH
21665: LD_VAR 0 1
21669: ADD
21670: ST_TO_ADDR
// ComMoveXY ( vehicle , 137 , 99 ) ;
21671: LD_VAR 0 1
21675: PPUSH
21676: LD_INT 137
21678: PPUSH
21679: LD_INT 99
21681: PPUSH
21682: CALL_OW 111
// end ; end ; end ;
21686: PPOPN 2
21688: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin if side = 6 and not old in kirovCanCaptureVehicles then
21689: LD_VAR 0 3
21693: PUSH
21694: LD_INT 6
21696: EQUAL
21697: PUSH
21698: LD_VAR 0 2
21702: PUSH
21703: LD_EXP 31
21707: IN
21708: NOT
21709: AND
21710: IFFALSE 21733
// begin ComExitVehicle ( capturing_unit ) ;
21712: LD_VAR 0 4
21716: PPUSH
21717: CALL_OW 121
// SetSide ( new , 6 ) ;
21721: LD_VAR 0 1
21725: PPUSH
21726: LD_INT 6
21728: PPUSH
21729: CALL_OW 235
// end ; end ;
21733: PPOPN 4
21735: END
// on EnterVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 and meetNearOmicronBase then
21736: LD_VAR 0 1
21740: PPUSH
21741: CALL_OW 255
21745: PUSH
21746: LD_INT 6
21748: EQUAL
21749: PUSH
21750: LD_EXP 22
21754: AND
21755: IFFALSE 21783
// begin wait ( 0 0$2 ) ;
21757: LD_INT 70
21759: PPUSH
21760: CALL_OW 67
// AddComAgressiveMove ( vehicle , 78 , 39 ) ;
21764: LD_VAR 0 1
21768: PPUSH
21769: LD_INT 78
21771: PPUSH
21772: LD_INT 39
21774: PPUSH
21775: CALL_OW 174
// KirovAttackOmicron ;
21779: CALL 17955 0 0
// end ; end ;
21783: PPOPN 2
21785: END
// on ResearchComplete ( research , building ) do begin if GetSide ( building ) = 6 and research = tech_gun then
21786: LD_VAR 0 2
21790: PPUSH
21791: CALL_OW 255
21795: PUSH
21796: LD_INT 6
21798: EQUAL
21799: PUSH
21800: LD_VAR 0 1
21804: PUSH
21805: LD_INT 39
21807: EQUAL
21808: AND
21809: IFFALSE 21870
// begin MountWeaponTurrent ;
21811: CALL 17419 0 0
// wait ( 3 3$30 ) ;
21815: LD_INT 7350
21817: PPUSH
21818: CALL_OW 67
// KirovProduceVehicles ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
21822: LD_INT 22
21824: PUSH
21825: LD_INT 6
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 21
21834: PUSH
21835: LD_INT 3
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 30
21844: PUSH
21845: LD_INT 3
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: LIST
21856: PPUSH
21857: CALL_OW 69
21861: PUSH
21862: LD_INT 1
21864: ARRAY
21865: PPUSH
21866: CALL 17485 0 1
// end ; end ; end_of_file
21870: PPOPN 2
21872: END
// export function MissionIntro ; var i , unit , freeSlots , tmp , timer ; begin
21873: LD_INT 0
21875: PPUSH
21876: PPUSH
21877: PPUSH
21878: PPUSH
21879: PPUSH
21880: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
21881: LD_EXP 50
21885: PUSH
21886: LD_EXP 62
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PPUSH
21895: CALL_OW 87
// ComTurnUnit ( [ Burlak , BelkovDialog ] , Kurin ) ;
21899: LD_EXP 50
21903: PUSH
21904: LD_EXP 64
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PPUSH
21913: LD_EXP 62
21917: PPUSH
21918: CALL_OW 119
// ComTurnUnit ( Kurin , Burlak ) ;
21922: LD_EXP 62
21926: PPUSH
21927: LD_EXP 50
21931: PPUSH
21932: CALL_OW 119
// RevealFogArea ( 3 , RevealMapPartArea ) ;
21936: LD_INT 3
21938: PPUSH
21939: LD_INT 24
21941: PPUSH
21942: CALL_OW 332
// if not IsPlaced ( Belkov ) and not IsPlaced ( Belkov2 ) then
21946: LD_EXP 54
21950: PPUSH
21951: CALL_OW 305
21955: NOT
21956: PUSH
21957: LD_EXP 55
21961: PPUSH
21962: CALL_OW 305
21966: NOT
21967: AND
21968: IFFALSE 22056
// begin Say ( Kurin , D1a-Kur-1 ) ;
21970: LD_EXP 62
21974: PPUSH
21975: LD_STRING D1a-Kur-1
21977: PPUSH
21978: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
21982: LD_EXP 50
21986: PPUSH
21987: LD_STRING D1a-Bur-1
21989: PPUSH
21990: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
21994: LD_EXP 62
21998: PPUSH
21999: LD_STRING D1a-Kur-2
22001: PPUSH
22002: CALL_OW 88
// if platonovOpinion <= 1 then
22006: LD_EXP 6
22010: PUSH
22011: LD_INT 1
22013: LESSEQUAL
22014: IFFALSE 22030
// Say ( Kurin , D1a-Kur-2a ) else
22016: LD_EXP 62
22020: PPUSH
22021: LD_STRING D1a-Kur-2a
22023: PPUSH
22024: CALL_OW 88
22028: GO 22042
// Say ( Kurin , D1a-Kur-2b ) ;
22030: LD_EXP 62
22034: PPUSH
22035: LD_STRING D1a-Kur-2b
22037: PPUSH
22038: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
22042: LD_EXP 50
22046: PPUSH
22047: LD_STRING D1a-Bur-2
22049: PPUSH
22050: CALL_OW 88
// end else
22054: GO 22092
// begin Say ( Kurin , D1b-Kur-1 ) ;
22056: LD_EXP 62
22060: PPUSH
22061: LD_STRING D1b-Kur-1
22063: PPUSH
22064: CALL_OW 88
// Say ( BelkovDialog , D1b-Bel-1 ) ;
22068: LD_EXP 64
22072: PPUSH
22073: LD_STRING D1b-Bel-1
22075: PPUSH
22076: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
22080: LD_EXP 62
22084: PPUSH
22085: LD_STRING D1b-Kur-2
22087: PPUSH
22088: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
22092: LD_EXP 62
22096: PPUSH
22097: LD_STRING D2-Kur-1
22099: PPUSH
22100: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
22104: LD_EXP 50
22108: PPUSH
22109: LD_STRING D2-Bur-1
22111: PPUSH
22112: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
22116: LD_EXP 62
22120: PPUSH
22121: LD_STRING D2-Kur-2
22123: PPUSH
22124: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
22128: LD_EXP 50
22132: PPUSH
22133: LD_STRING D2-Bur-2
22135: PPUSH
22136: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
22140: LD_EXP 62
22144: PPUSH
22145: LD_STRING D2-Kur-3
22147: PPUSH
22148: CALL_OW 88
// SetAttitude ( 1 , 6 , att_friend , true ) ;
22152: LD_INT 1
22154: PPUSH
22155: LD_INT 6
22157: PPUSH
22158: LD_INT 1
22160: PPUSH
22161: LD_INT 1
22163: PPUSH
22164: CALL_OW 80
// PrepareAmericansMissionIntro ;
22168: CALL 5675 0 0
// ComMoveXY ( amIntroUnits , 28 , 35 ) ;
22172: LD_EXP 84
22176: PPUSH
22177: LD_INT 28
22179: PPUSH
22180: LD_INT 35
22182: PPUSH
22183: CALL_OW 111
// CenterOnXY ( 93 , 36 ) ;
22187: LD_INT 93
22189: PPUSH
22190: LD_INT 36
22192: PPUSH
22193: CALL_OW 84
// PlaceSeeing ( 93 , 36 , 3 , - 9 ) ;
22197: LD_INT 93
22199: PPUSH
22200: LD_INT 36
22202: PPUSH
22203: LD_INT 3
22205: PPUSH
22206: LD_INT 9
22208: NEG
22209: PPUSH
22210: CALL_OW 330
// wait ( 0 0$6 ) ;
22214: LD_INT 210
22216: PPUSH
22217: CALL_OW 67
// CenterOnUnits ( Popov ) ;
22221: LD_EXP 63
22225: PPUSH
22226: CALL_OW 85
// wait ( 0 0$1 ) ;
22230: LD_INT 35
22232: PPUSH
22233: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
22237: LD_EXP 63
22241: PPUSH
22242: LD_STRING D2-Pop-3
22244: PPUSH
22245: CALL_OW 94
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
22249: LD_EXP 50
22253: PUSH
22254: LD_EXP 62
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PPUSH
22263: CALL_OW 87
// wait ( 0 0$1 ) ;
22267: LD_INT 35
22269: PPUSH
22270: CALL_OW 67
// Say ( Kurin , D2-Kur-4 ) ;
22274: LD_EXP 62
22278: PPUSH
22279: LD_STRING D2-Kur-4
22281: PPUSH
22282: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
22286: LD_EXP 50
22290: PPUSH
22291: LD_STRING D2-Bur-4
22293: PPUSH
22294: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
22298: LD_EXP 62
22302: PPUSH
22303: LD_STRING D2-Kur-5
22305: PPUSH
22306: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
22310: LD_EXP 50
22314: PPUSH
22315: LD_STRING D2-Bur-5
22317: PPUSH
22318: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
22322: LD_EXP 62
22326: PPUSH
22327: LD_STRING D2-Kur-6
22329: PPUSH
22330: CALL_OW 88
// if IsPlaced ( Gnyevko ) then
22334: LD_EXP 51
22338: PPUSH
22339: CALL_OW 305
22343: IFFALSE 22359
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22345: LD_ADDR_EXP 39
22349: PUSH
22350: LD_EXP 39
22354: PUSH
22355: LD_INT 1
22357: MINUS
22358: ST_TO_ADDR
// if IsPlaced ( Kovalyuk ) then
22359: LD_EXP 53
22363: PPUSH
22364: CALL_OW 305
22368: IFFALSE 22384
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22370: LD_ADDR_EXP 39
22374: PUSH
22375: LD_EXP 39
22379: PUSH
22380: LD_INT 1
22382: MINUS
22383: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) then
22384: LD_EXP 52
22388: PPUSH
22389: CALL_OW 305
22393: IFFALSE 22409
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22395: LD_ADDR_EXP 39
22399: PUSH
22400: LD_EXP 39
22404: PUSH
22405: LD_INT 1
22407: MINUS
22408: ST_TO_ADDR
// SelectCharacters ( baseUnitsToChoose ) ;
22409: LD_EXP 39
22413: PPUSH
22414: CALL 7453 0 1
// RemoveSeeing ( 93 , 36 , 3 ) ;
22418: LD_INT 93
22420: PPUSH
22421: LD_INT 36
22423: PPUSH
22424: LD_INT 3
22426: PPUSH
22427: CALL_OW 331
// RevealFogArea ( 3 , RevealMapPartArea ) ;
22431: LD_INT 3
22433: PPUSH
22434: LD_INT 24
22436: PPUSH
22437: CALL_OW 332
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
22441: LD_INT 22
22443: PUSH
22444: LD_INT 3
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 21
22453: PUSH
22454: LD_INT 1
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PPUSH
22465: CALL_OW 69
22469: PPUSH
22470: CALL_OW 122
// wait ( 0 0$1 ) ;
22474: LD_INT 35
22476: PPUSH
22477: CALL_OW 67
// AddComMoveUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , beriaDepot ) ;
22481: LD_INT 22
22483: PUSH
22484: LD_INT 3
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 21
22493: PUSH
22494: LD_INT 1
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PPUSH
22505: CALL_OW 69
22509: PPUSH
22510: LD_EXP 61
22514: PPUSH
22515: CALL_OW 172
// timer := 0 ;
22519: LD_ADDR_VAR 0 6
22523: PUSH
22524: LD_INT 0
22526: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22527: LD_INT 35
22529: PPUSH
22530: CALL_OW 67
// timer := timer + 1 ;
22534: LD_ADDR_VAR 0 6
22538: PUSH
22539: LD_VAR 0 6
22543: PUSH
22544: LD_INT 1
22546: PLUS
22547: ST_TO_ADDR
// CenterNowOnUnits ( Burlak ) ;
22548: LD_EXP 50
22552: PPUSH
22553: CALL_OW 87
// ComMoveUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , beriaDepot ) ;
22557: LD_INT 22
22559: PUSH
22560: LD_INT 3
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 21
22569: PUSH
22570: LD_INT 1
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PPUSH
22581: CALL_OW 69
22585: PPUSH
22586: LD_EXP 61
22590: PPUSH
22591: CALL_OW 112
// until GetDistUnits ( Burlak , beriaDepot ) < 6 or not HasTask ( Burlak ) or timer > 10 ;
22595: LD_EXP 50
22599: PPUSH
22600: LD_EXP 61
22604: PPUSH
22605: CALL_OW 296
22609: PUSH
22610: LD_INT 6
22612: LESS
22613: PUSH
22614: LD_EXP 50
22618: PPUSH
22619: CALL_OW 314
22623: NOT
22624: OR
22625: PUSH
22626: LD_VAR 0 6
22630: PUSH
22631: LD_INT 10
22633: GREATER
22634: OR
22635: IFFALSE 22527
// InGameOff ;
22637: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
22641: LD_STRING M1
22643: PPUSH
22644: CALL_OW 337
// SaveForQuickRestart ;
22648: CALL_OW 22
// counterEnable = true ;
22652: LD_ADDR_EXP 90
22656: PUSH
22657: LD_INT 1
22659: ST_TO_ADDR
// counterIndex = 1 ;
22660: LD_ADDR_EXP 91
22664: PUSH
22665: LD_INT 1
22667: ST_TO_ADDR
// RevealFogArea ( 3 , RevealMapPartArea ) ;
22668: LD_INT 3
22670: PPUSH
22671: LD_INT 24
22673: PPUSH
22674: CALL_OW 332
// ResAllTechs ( 6 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] , 3 ) ;
22678: LD_INT 6
22680: PPUSH
22681: LD_INT 22
22683: PUSH
22684: LD_INT 6
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 21
22693: PUSH
22694: LD_INT 3
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 30
22703: PUSH
22704: LD_INT 6
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: LIST
22715: PPUSH
22716: CALL_OW 69
22720: PUSH
22721: LD_INT 1
22723: ARRAY
22724: PPUSH
22725: LD_INT 3
22727: PPUSH
22728: CALL 8868 0 3
// ResAllTechs ( 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_lab_half ] ] ) [ 1 ] , 1 ) ;
22732: LD_INT 1
22734: PPUSH
22735: LD_INT 22
22737: PUSH
22738: LD_INT 1
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 21
22747: PUSH
22748: LD_INT 3
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: LD_INT 30
22757: PUSH
22758: LD_INT 7
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: LIST
22769: PPUSH
22770: CALL_OW 69
22774: PUSH
22775: LD_INT 1
22777: ARRAY
22778: PPUSH
22779: LD_INT 1
22781: PPUSH
22782: CALL 8868 0 3
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_gun , 159 , 116 , 0 ) ;
22786: LD_INT 18
22788: PPUSH
22789: LD_INT 22
22791: PUSH
22792: LD_INT 6
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 21
22801: PUSH
22802: LD_INT 1
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: LD_INT 25
22811: PUSH
22812: LD_INT 2
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: LIST
22823: PPUSH
22824: CALL_OW 70
22828: PPUSH
22829: LD_INT 17
22831: PPUSH
22832: LD_INT 159
22834: PPUSH
22835: LD_INT 116
22837: PPUSH
22838: LD_INT 0
22840: PPUSH
22841: CALL_OW 205
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_noncombat , 161 , 115 , 5 ) ;
22845: LD_INT 18
22847: PPUSH
22848: LD_INT 22
22850: PUSH
22851: LD_INT 6
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 21
22860: PUSH
22861: LD_INT 1
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 25
22870: PUSH
22871: LD_INT 2
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: LIST
22882: PPUSH
22883: CALL_OW 70
22887: PPUSH
22888: LD_INT 19
22890: PPUSH
22891: LD_INT 161
22893: PPUSH
22894: LD_INT 115
22896: PPUSH
22897: LD_INT 5
22899: PPUSH
22900: CALL_OW 205
// AddComEnterUnit ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , kirovDepot ) ;
22904: LD_INT 18
22906: PPUSH
22907: LD_INT 22
22909: PUSH
22910: LD_INT 6
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 21
22919: PUSH
22920: LD_INT 1
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 25
22929: PUSH
22930: LD_INT 2
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: LIST
22941: PPUSH
22942: CALL_OW 70
22946: PPUSH
22947: LD_EXP 68
22951: PPUSH
22952: CALL_OW 180
// ComFree ( survivorsArabianAttack ) ;
22956: LD_EXP 80
22960: PPUSH
22961: CALL_OW 139
// tmp = survivorsArabianAttack diff Popov ;
22965: LD_ADDR_VAR 0 5
22969: PUSH
22970: LD_EXP 80
22974: PUSH
22975: LD_EXP 63
22979: DIFF
22980: ST_TO_ADDR
// freeSlots = 6 - UnitsInside ( ru2_bar1 ) ;
22981: LD_ADDR_VAR 0 4
22985: PUSH
22986: LD_INT 6
22988: PUSH
22989: LD_EXP 70
22993: PPUSH
22994: CALL_OW 313
22998: MINUS
22999: ST_TO_ADDR
// AddComEnterUnit ( survivorsArabianAttack diff Popov , ru2_bar1 ) ;
23000: LD_EXP 80
23004: PUSH
23005: LD_EXP 63
23009: DIFF
23010: PPUSH
23011: LD_EXP 70
23015: PPUSH
23016: CALL_OW 180
// for i = 1 to tmp do
23020: LD_ADDR_VAR 0 2
23024: PUSH
23025: DOUBLE
23026: LD_INT 1
23028: DEC
23029: ST_TO_ADDR
23030: LD_VAR 0 5
23034: PUSH
23035: FOR_TO
23036: IFFALSE 23088
// begin if freeSlots > 0 then
23038: LD_VAR 0 4
23042: PUSH
23043: LD_INT 0
23045: GREATER
23046: IFFALSE 23084
// begin ComEnterUnit ( tmp [ i ] , ru2_bar1 ) ;
23048: LD_VAR 0 5
23052: PUSH
23053: LD_VAR 0 2
23057: ARRAY
23058: PPUSH
23059: LD_EXP 70
23063: PPUSH
23064: CALL_OW 120
// freeSlots = freeSlots - 1 ;
23068: LD_ADDR_VAR 0 4
23072: PUSH
23073: LD_VAR 0 4
23077: PUSH
23078: LD_INT 1
23080: MINUS
23081: ST_TO_ADDR
// end else
23082: GO 23086
// break ;
23084: GO 23088
// end ;
23086: GO 23035
23088: POP
23089: POP
// wait ( 0 0$1 ) ;
23090: LD_INT 35
23092: PPUSH
23093: CALL_OW 67
// ComEnterUnit ( UnitFilter ( tmp , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) , kirovDepot ) ;
23097: LD_VAR 0 5
23101: PPUSH
23102: LD_INT 56
23104: PUSH
23105: EMPTY
23106: LIST
23107: PUSH
23108: LD_INT 3
23110: PUSH
23111: LD_INT 60
23113: PUSH
23114: EMPTY
23115: LIST
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PPUSH
23125: CALL_OW 72
23129: PPUSH
23130: LD_EXP 68
23134: PPUSH
23135: CALL_OW 120
// ComWalk ( ruScout ) ;
23139: LD_EXP 65
23143: PPUSH
23144: CALL_OW 138
// wait ( 0 0$1 ) ;
23148: LD_INT 35
23150: PPUSH
23151: CALL_OW 67
// AddComMoveXY ( [ ruScout , Popov ] , 99 , 37 ) ;
23155: LD_EXP 65
23159: PUSH
23160: LD_EXP 63
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PPUSH
23169: LD_INT 99
23171: PPUSH
23172: LD_INT 37
23174: PPUSH
23175: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 88 , 60 ) ;
23179: LD_EXP 65
23183: PUSH
23184: LD_EXP 63
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PPUSH
23193: LD_INT 88
23195: PPUSH
23196: LD_INT 60
23198: PPUSH
23199: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 129 , 99 ) ;
23203: LD_EXP 65
23207: PUSH
23208: LD_EXP 63
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PPUSH
23217: LD_INT 129
23219: PPUSH
23220: LD_INT 99
23222: PPUSH
23223: CALL_OW 171
// AddComEnterUnit ( [ Popov , ruScout ] , kirovDepot ) ;
23227: LD_EXP 63
23231: PUSH
23232: LD_EXP 65
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PPUSH
23241: LD_EXP 68
23245: PPUSH
23246: CALL_OW 180
// end ;
23250: LD_VAR 0 1
23254: RET
// every 0 0$1 trigger kirovCompleteFactory do var i , tmp , pom , diffUnits , canTakeUnits ;
23255: LD_EXP 25
23259: IFFALSE 23531
23261: GO 23263
23263: DISABLE
23264: LD_INT 0
23266: PPUSH
23267: PPUSH
23268: PPUSH
23269: PPUSH
23270: PPUSH
// begin diffUnits = diffUnits ^ Kurin ;
23271: LD_ADDR_VAR 0 4
23275: PUSH
23276: LD_VAR 0 4
23280: PUSH
23281: LD_EXP 62
23285: ADD
23286: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
23287: LD_ADDR_VAR 0 4
23291: PUSH
23292: LD_VAR 0 4
23296: PUSH
23297: LD_EXP 80
23301: ADD
23302: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
23303: LD_ADDR_VAR 0 4
23307: PUSH
23308: LD_VAR 0 4
23312: PUSH
23313: LD_EXP 72
23317: ADD
23318: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff diffUnits ;
23319: LD_ADDR_VAR 0 5
23323: PUSH
23324: LD_INT 18
23326: PPUSH
23327: LD_INT 22
23329: PUSH
23330: LD_INT 6
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 21
23339: PUSH
23340: LD_INT 1
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PPUSH
23351: CALL_OW 70
23355: PUSH
23356: LD_VAR 0 4
23360: DIFF
23361: ST_TO_ADDR
// pom = 6 ;
23362: LD_ADDR_VAR 0 3
23366: PUSH
23367: LD_INT 6
23369: ST_TO_ADDR
// if canTakeUnits then
23370: LD_VAR 0 5
23374: IFFALSE 23498
// for i = 1 to canTakeUnits do
23376: LD_ADDR_VAR 0 1
23380: PUSH
23381: DOUBLE
23382: LD_INT 1
23384: DEC
23385: ST_TO_ADDR
23386: LD_VAR 0 5
23390: PUSH
23391: FOR_TO
23392: IFFALSE 23496
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
23394: LD_VAR 0 5
23398: PUSH
23399: LD_VAR 0 1
23403: ARRAY
23404: PPUSH
23405: CALL_OW 257
23409: PUSH
23410: LD_INT 3
23412: NONEQUAL
23413: IFFALSE 23460
// begin ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
23415: LD_VAR 0 5
23419: PUSH
23420: LD_VAR 0 1
23424: ARRAY
23425: PPUSH
23426: LD_EXP 24
23430: PPUSH
23431: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , 1 ) ;
23435: LD_VAR 0 5
23439: PUSH
23440: LD_VAR 0 1
23444: ARRAY
23445: PPUSH
23446: LD_INT 1
23448: PPUSH
23449: CALL_OW 183
// wait ( 0 0$1 ) ;
23453: LD_INT 35
23455: PPUSH
23456: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
23460: LD_VAR 0 5
23464: PUSH
23465: LD_VAR 0 1
23469: ARRAY
23470: PPUSH
23471: LD_EXP 24
23475: PPUSH
23476: CALL_OW 120
// pom = pom - 1 ;
23480: LD_ADDR_VAR 0 3
23484: PUSH
23485: LD_VAR 0 3
23489: PUSH
23490: LD_INT 1
23492: MINUS
23493: ST_TO_ADDR
// end ;
23494: GO 23391
23496: POP
23497: POP
// if pom > 0 then
23498: LD_VAR 0 3
23502: PUSH
23503: LD_INT 0
23505: GREATER
23506: IFFALSE 23531
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
23508: LD_ADDR_EXP 82
23512: PUSH
23513: LD_EXP 82
23517: PPUSH
23518: LD_INT 3
23520: PPUSH
23521: LD_VAR 0 3
23525: PPUSH
23526: CALL_OW 1
23530: ST_TO_ADDR
// end ;
23531: PPOPN 5
23533: END
// every 0 0$1 trigger kirovTransportCargo and not endCutscene do
23534: LD_EXP 75
23538: PUSH
23539: LD_EXP 32
23543: NOT
23544: AND
23545: IFFALSE 23594
23547: GO 23549
23549: DISABLE
// begin enable ;
23550: ENABLE
// AddComTransport ( kirovTransportCargo , kirovOilDepot , mat_oil ) ;
23551: LD_EXP 75
23555: PPUSH
23556: LD_EXP 69
23560: PPUSH
23561: LD_INT 2
23563: PPUSH
23564: CALL_OW 211
// AddComGive ( kirovTransportCargo , kirovDepot ) ;
23568: LD_EXP 75
23572: PPUSH
23573: LD_EXP 68
23577: PPUSH
23578: CALL_OW 221
// SetFuel ( kirovTransportCargo , 100 ) ;
23582: LD_EXP 75
23586: PPUSH
23587: LD_INT 100
23589: PPUSH
23590: CALL_OW 240
// end ;
23594: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
23595: LD_INT 78
23597: PPUSH
23598: LD_INT 112
23600: PPUSH
23601: LD_INT 3
23603: PPUSH
23604: CALL_OW 440
23608: IFFALSE 23662
23610: GO 23612
23612: DISABLE
// begin CenterOnXY ( 78 , 112 ) ;
23613: LD_INT 78
23615: PPUSH
23616: LD_INT 112
23618: PPUSH
23619: CALL_OW 84
// DialogueOn ;
23623: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
23627: LD_EXP 50
23631: PPUSH
23632: LD_STRING D2a-Bur-1
23634: PPUSH
23635: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
23639: LD_EXP 62
23643: PPUSH
23644: LD_STRING D2a-Kur-1
23646: PPUSH
23647: CALL_OW 94
// DialogueOff ;
23651: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
23655: LD_STRING M2
23657: PPUSH
23658: CALL_OW 337
// end ;
23662: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
23663: LD_EXP 13
23667: NOT
23668: IFFALSE 23876
23670: GO 23672
23672: DISABLE
23673: LD_INT 0
23675: PPUSH
// begin enable ;
23676: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
23677: LD_ADDR_VAR 0 1
23681: PUSH
23682: LD_INT 22
23684: PUSH
23685: LD_INT 3
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 21
23694: PUSH
23695: LD_INT 2
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 23
23704: PUSH
23705: LD_INT 3
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 2
23714: PUSH
23715: LD_INT 31
23717: PUSH
23718: LD_INT 21
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 31
23727: PUSH
23728: LD_INT 23
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: LIST
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: PPUSH
23746: CALL_OW 69
23750: PUSH
23751: FOR_IN
23752: IFFALSE 23874
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
23754: LD_VAR 0 1
23758: PPUSH
23759: LD_INT 48
23761: PPUSH
23762: LD_INT 81
23764: PPUSH
23765: CALL_OW 297
23769: PUSH
23770: LD_INT 7
23772: LESS
23773: IFFALSE 23872
// begin dialog_track = true ;
23775: LD_ADDR_EXP 13
23779: PUSH
23780: LD_INT 1
23782: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
23783: LD_INT 48
23785: PPUSH
23786: LD_INT 81
23788: PPUSH
23789: CALL_OW 86
// DialogueOn ;
23793: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
23797: LD_EXP 50
23801: PPUSH
23802: LD_STRING D5a-Bur-1
23804: PPUSH
23805: CALL_OW 88
// DialogueOff ;
23809: CALL_OW 7
// if GetTech ( 82 , 3 ) = state_disabled then
23813: LD_INT 82
23815: PPUSH
23816: LD_INT 3
23818: PPUSH
23819: CALL_OW 321
23823: PUSH
23824: LD_INT 0
23826: EQUAL
23827: IFFALSE 23842
// SetTech ( 82 , 3 , state_enabled ) ;
23829: LD_INT 82
23831: PPUSH
23832: LD_INT 3
23834: PPUSH
23835: LD_INT 1
23837: PPUSH
23838: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
23842: LD_INT 84
23844: PPUSH
23845: LD_INT 3
23847: PPUSH
23848: LD_INT 1
23850: PPUSH
23851: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
23855: LD_INT 16
23857: PPUSH
23858: LD_INT 3
23860: PPUSH
23861: LD_INT 1
23863: PPUSH
23864: CALL_OW 324
// exit ;
23868: POP
23869: POP
23870: GO 23876
// end ;
23872: GO 23751
23874: POP
23875: POP
// end ;
23876: PPOPN 1
23878: END
// every 5 5$30 do
23879: GO 23881
23881: DISABLE
// begin PrepareScholtze ;
23882: CALL 5462 0 0
// wait ( 0 0$2 ) ;
23886: LD_INT 70
23888: PPUSH
23889: CALL_OW 67
// DialogueOn ;
23893: CALL_OW 6
// SayRadio ( Scholtze , D4-Sch-1 ) ;
23897: LD_EXP 56
23901: PPUSH
23902: LD_STRING D4-Sch-1
23904: PPUSH
23905: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
23909: LD_EXP 50
23913: PPUSH
23914: LD_STRING D4-Bur-1
23916: PPUSH
23917: CALL_OW 88
// DialogueOff ;
23921: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23925: LD_STRING M4
23927: PPUSH
23928: CALL_OW 337
// ComHold ( Scholtze ) ;
23932: LD_EXP 56
23936: PPUSH
23937: CALL_OW 140
// scholtzeSpawned = true ;
23941: LD_ADDR_EXP 9
23945: PUSH
23946: LD_INT 1
23948: ST_TO_ADDR
// end ;
23949: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and scholtzeSpawned and not scholtzeSaved do
23950: LD_INT 3
23952: PPUSH
23953: LD_EXP 56
23957: PPUSH
23958: CALL_OW 292
23962: PUSH
23963: LD_EXP 9
23967: AND
23968: PUSH
23969: LD_EXP 10
23973: NOT
23974: AND
23975: IFFALSE 24156
23977: GO 23979
23979: DISABLE
// begin scholtzeSaved = true ;
23980: LD_ADDR_EXP 10
23984: PUSH
23985: LD_INT 1
23987: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
23988: LD_EXP 56
23992: PPUSH
23993: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
23997: LD_EXP 56
24001: PPUSH
24002: LD_INT 3
24004: PPUSH
24005: CALL_OW 235
// DialogueOn ;
24009: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
24013: LD_EXP 56
24017: PPUSH
24018: LD_STRING D4a-Sch-1
24020: PPUSH
24021: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
24025: LD_EXP 50
24029: PPUSH
24030: LD_STRING D4a-Bur-1
24032: PPUSH
24033: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
24037: LD_EXP 56
24041: PPUSH
24042: LD_STRING D4a-Sch-2
24044: PPUSH
24045: CALL_OW 88
// DialogueOff ;
24049: CALL_OW 7
// ComMoveXY ( amPatrol , 28 , 36 ) ;
24053: LD_EXP 86
24057: PPUSH
24058: LD_INT 28
24060: PPUSH
24061: LD_INT 36
24063: PPUSH
24064: CALL_OW 111
// ChangeMissionObjectives ( MScholtzeOut ) ;
24068: LD_STRING MScholtzeOut
24070: PPUSH
24071: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
24075: LD_INT 49
24077: PPUSH
24078: LD_INT 3
24080: PPUSH
24081: LD_INT 1
24083: PPUSH
24084: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
24088: LD_INT 51
24090: PPUSH
24091: LD_INT 3
24093: PPUSH
24094: LD_INT 1
24096: PPUSH
24097: CALL_OW 322
// if GetTech ( 82 , 3 ) = state_disabled then
24101: LD_INT 82
24103: PPUSH
24104: LD_INT 3
24106: PPUSH
24107: CALL_OW 321
24111: PUSH
24112: LD_INT 0
24114: EQUAL
24115: IFFALSE 24130
// SetTech ( 82 , 3 , state_enabled ) ;
24117: LD_INT 82
24119: PPUSH
24120: LD_INT 3
24122: PPUSH
24123: LD_INT 1
24125: PPUSH
24126: CALL_OW 322
// SetTech ( 83 , 3 , state_enabled ) ;
24130: LD_INT 83
24132: PPUSH
24133: LD_INT 3
24135: PPUSH
24136: LD_INT 1
24138: PPUSH
24139: CALL_OW 322
// SetRestrict ( b_ext_noncombat , 3 , state_enabled ) ;
24143: LD_INT 19
24145: PPUSH
24146: LD_INT 3
24148: PPUSH
24149: LD_INT 1
24151: PPUSH
24152: CALL_OW 324
// end ;
24156: END
// every 2 2$30 trigger IsPlaced ( Scholtze ) and not scholtzeSaved do
24157: LD_EXP 56
24161: PPUSH
24162: CALL_OW 305
24166: PUSH
24167: LD_EXP 10
24171: NOT
24172: AND
24173: IFFALSE 24182
24175: GO 24177
24177: DISABLE
// PrepareAmericanPatrol ;
24178: CALL 6398 0 0
24182: END
// every 0 0$1 trigger IsPlaced ( Scholtze ) and GetSide ( Scholtze ) = 8 and animalsSafeTime > 0 0$01 do var ape , tiger ;
24183: LD_EXP 56
24187: PPUSH
24188: CALL_OW 305
24192: PUSH
24193: LD_EXP 56
24197: PPUSH
24198: CALL_OW 255
24202: PUSH
24203: LD_INT 8
24205: EQUAL
24206: AND
24207: PUSH
24208: LD_EXP 48
24212: PUSH
24213: LD_INT 35
24215: GREATER
24216: AND
24217: IFFALSE 24393
24219: GO 24221
24221: DISABLE
24222: LD_INT 0
24224: PPUSH
24225: PPUSH
// begin enable ;
24226: ENABLE
// animalsSafeTime = animalsSafeTime - 0 0$01 ;
24227: LD_ADDR_EXP 48
24231: PUSH
24232: LD_EXP 48
24236: PUSH
24237: LD_INT 35
24239: MINUS
24240: ST_TO_ADDR
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
24241: LD_ADDR_VAR 0 1
24245: PUSH
24246: LD_INT 22
24248: PUSH
24249: LD_INT 0
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 25
24258: PUSH
24259: LD_INT 12
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PPUSH
24270: CALL_OW 69
24274: PUSH
24275: FOR_IN
24276: IFFALSE 24315
// GetAwayFromXY ( ape , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
24278: LD_VAR 0 1
24282: PPUSH
24283: LD_EXP 56
24287: PPUSH
24288: CALL_OW 250
24292: PPUSH
24293: LD_EXP 56
24297: PPUSH
24298: CALL_OW 251
24302: PPUSH
24303: LD_INT 12
24305: PPUSH
24306: LD_INT 0
24308: PPUSH
24309: CALL 10285 0 5
24313: GO 24275
24315: POP
24316: POP
// for tiger in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_tiger ] ] ) do
24317: LD_ADDR_VAR 0 2
24321: PUSH
24322: LD_INT 22
24324: PUSH
24325: LD_INT 0
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 25
24334: PUSH
24335: LD_INT 14
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PPUSH
24346: CALL_OW 69
24350: PUSH
24351: FOR_IN
24352: IFFALSE 24391
// GetAwayFromXY ( tiger , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
24354: LD_VAR 0 2
24358: PPUSH
24359: LD_EXP 56
24363: PPUSH
24364: CALL_OW 250
24368: PPUSH
24369: LD_EXP 56
24373: PPUSH
24374: CALL_OW 251
24378: PPUSH
24379: LD_INT 12
24381: PPUSH
24382: LD_INT 0
24384: PPUSH
24385: CALL 10285 0 5
24389: GO 24351
24391: POP
24392: POP
// end ;
24393: PPOPN 2
24395: END
// every 0 0$1 trigger See ( 1 , Scholtze ) and amPatrol and not scholtzeSaved do
24396: LD_INT 1
24398: PPUSH
24399: LD_EXP 56
24403: PPUSH
24404: CALL_OW 292
24408: PUSH
24409: LD_EXP 86
24413: AND
24414: PUSH
24415: LD_EXP 10
24419: NOT
24420: AND
24421: IFFALSE 24575
24423: GO 24425
24425: DISABLE
// begin enable ;
24426: ENABLE
// if not IsPlaced ( Scholtze ) then
24427: LD_EXP 56
24431: PPUSH
24432: CALL_OW 305
24436: NOT
24437: IFFALSE 24441
// exit ;
24439: GO 24575
// if Attacks ( amPatrol [ 1 ] ) = Scholtze or Attacks ( amPatrol [ 2 ] ) = Scholtze then
24441: LD_EXP 86
24445: PUSH
24446: LD_INT 1
24448: ARRAY
24449: PPUSH
24450: CALL_OW 320
24454: PUSH
24455: LD_EXP 56
24459: EQUAL
24460: PUSH
24461: LD_EXP 86
24465: PUSH
24466: LD_INT 2
24468: ARRAY
24469: PPUSH
24470: CALL_OW 320
24474: PUSH
24475: LD_EXP 56
24479: EQUAL
24480: OR
24481: IFFALSE 24575
// begin DialogueOn ;
24483: CALL_OW 6
// Say ( Scholtze , D4b-Sch-1 ) ;
24487: LD_EXP 56
24491: PPUSH
24492: LD_STRING D4b-Sch-1
24494: PPUSH
24495: CALL_OW 88
// Say ( amPatrol [ 2 ] , D4b-Sol1-1 ) ;
24499: LD_EXP 86
24503: PUSH
24504: LD_INT 2
24506: ARRAY
24507: PPUSH
24508: LD_STRING D4b-Sol1-1
24510: PPUSH
24511: CALL_OW 88
// Say ( amPatrol [ 1 ] , D4b-Sol2-1 ) ;
24515: LD_EXP 86
24519: PUSH
24520: LD_INT 1
24522: ARRAY
24523: PPUSH
24524: LD_STRING D4b-Sol2-1
24526: PPUSH
24527: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
24531: LD_EXP 56
24535: PPUSH
24536: LD_STRING D4b-Sch-2
24538: PPUSH
24539: CALL_OW 88
// Say ( Burlak , D4b-Bur-2 ) ;
24543: LD_EXP 50
24547: PPUSH
24548: LD_STRING D4b-Bur-2
24550: PPUSH
24551: CALL_OW 88
// DialogueOff ;
24555: CALL_OW 7
// Killunit ( Scholtze ) ;
24559: LD_EXP 56
24563: PPUSH
24564: CALL_OW 66
// ChangeMissionObjectives ( MScholtzeDel ) ;
24568: LD_STRING MScholtzeDel
24570: PPUSH
24571: CALL_OW 337
// end ; end ;
24575: END
// export function Dial_UpgradeWorkshop ( building ) ; var maleSci , maleOthers ; begin
24576: LD_INT 0
24578: PPUSH
24579: PPUSH
24580: PPUSH
// dialog_workshop = true ;
24581: LD_ADDR_EXP 11
24585: PUSH
24586: LD_INT 1
24588: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
24589: LD_INT 22
24591: PUSH
24592: LD_INT 3
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 30
24601: PUSH
24602: LD_INT 26
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PPUSH
24613: CALL_OW 69
24617: NOT
24618: IFFALSE 25007
// begin CenterNowOnUnits ( building ) ;
24620: LD_VAR 0 1
24624: PPUSH
24625: CALL_OW 87
// DialogueOn ;
24629: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
24633: LD_EXP 50
24637: PPUSH
24638: LD_STRING D3aa-Bur-1
24640: PPUSH
24641: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
24645: LD_EXP 56
24649: PPUSH
24650: CALL_OW 302
24654: PUSH
24655: LD_EXP 56
24659: PPUSH
24660: CALL_OW 255
24664: PUSH
24665: LD_INT 3
24667: EQUAL
24668: AND
24669: IFFALSE 24685
// Say ( Scholtze , D3aa-Sch-1 ) else
24671: LD_EXP 56
24675: PPUSH
24676: LD_STRING D3aa-Sch-1
24678: PPUSH
24679: CALL_OW 88
24683: GO 24991
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24685: LD_ADDR_VAR 0 3
24689: PUSH
24690: LD_INT 22
24692: PUSH
24693: LD_INT 3
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 21
24702: PUSH
24703: LD_INT 1
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 25
24712: PUSH
24713: LD_INT 4
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 26
24722: PUSH
24723: LD_INT 1
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 50
24732: PUSH
24733: EMPTY
24734: LIST
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: PPUSH
24743: CALL_OW 69
24747: PUSH
24748: LD_EXP 50
24752: PUSH
24753: LD_EXP 51
24757: PUSH
24758: LD_EXP 53
24762: PUSH
24763: LD_EXP 54
24767: PUSH
24768: LD_EXP 55
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: DIFF
24780: ST_TO_ADDR
// if maleSci then
24781: LD_VAR 0 3
24785: IFFALSE 24805
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
24787: LD_VAR 0 3
24791: PUSH
24792: LD_INT 1
24794: ARRAY
24795: PPUSH
24796: LD_STRING D3aa-Sci1-1
24798: PPUSH
24799: CALL_OW 88
24803: GO 24991
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24805: LD_ADDR_VAR 0 4
24809: PUSH
24810: LD_INT 22
24812: PUSH
24813: LD_INT 3
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 21
24822: PUSH
24823: LD_INT 1
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 26
24832: PUSH
24833: LD_INT 1
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 50
24842: PUSH
24843: EMPTY
24844: LIST
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: PPUSH
24852: CALL_OW 69
24856: PUSH
24857: LD_EXP 50
24861: PUSH
24862: LD_EXP 51
24866: PUSH
24867: LD_EXP 53
24871: PUSH
24872: LD_EXP 54
24876: PUSH
24877: LD_EXP 55
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: DIFF
24889: ST_TO_ADDR
// if maleOthers then
24890: LD_VAR 0 4
24894: IFFALSE 24914
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) else
24896: LD_VAR 0 4
24900: PUSH
24901: LD_INT 1
24903: ARRAY
24904: PPUSH
24905: LD_STRING D3aa-Sci1-1
24907: PPUSH
24908: CALL_OW 88
24912: GO 24991
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
24914: LD_ADDR_VAR 0 4
24918: PUSH
24919: LD_INT 22
24921: PUSH
24922: LD_INT 3
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 21
24931: PUSH
24932: LD_INT 1
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 26
24941: PUSH
24942: LD_INT 1
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 50
24951: PUSH
24952: EMPTY
24953: LIST
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: PPUSH
24961: CALL_OW 69
24965: PUSH
24966: LD_EXP 50
24970: PUSH
24971: EMPTY
24972: LIST
24973: DIFF
24974: ST_TO_ADDR
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) ;
24975: LD_VAR 0 4
24979: PUSH
24980: LD_INT 1
24982: ARRAY
24983: PPUSH
24984: LD_STRING D3aa-Sci1-1
24986: PPUSH
24987: CALL_OW 88
// end ; end ; end ; Say ( Burlak , D3aa-Bur-2 ) ;
24991: LD_EXP 50
24995: PPUSH
24996: LD_STRING D3aa-Bur-2
24998: PPUSH
24999: CALL_OW 88
// DialogueOff ;
25003: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
25007: LD_STRING M3
25009: PPUSH
25010: CALL_OW 337
// end ;
25014: LD_VAR 0 2
25018: RET
// every 0 0$1 trigger not dialog_amSupportTroops do var amUnit , randomMale ;
25019: LD_EXP 12
25023: NOT
25024: IFFALSE 25362
25026: GO 25028
25028: DISABLE
25029: LD_INT 0
25031: PPUSH
25032: PPUSH
// begin enable ;
25033: ENABLE
// for amUnit in amSupportTroops do
25034: LD_ADDR_VAR 0 1
25038: PUSH
25039: LD_EXP 85
25043: PUSH
25044: FOR_IN
25045: IFFALSE 25360
// begin if See ( 3 , amUnit ) then
25047: LD_INT 3
25049: PPUSH
25050: LD_VAR 0 1
25054: PPUSH
25055: CALL_OW 292
25059: IFFALSE 25358
// begin dialog_amSupportTroops = true ;
25061: LD_ADDR_EXP 12
25065: PUSH
25066: LD_INT 1
25068: ST_TO_ADDR
// CenterNowOnUnits ( amUnit ) ;
25069: LD_VAR 0 1
25073: PPUSH
25074: CALL_OW 87
// DialogueOn ;
25078: CALL_OW 6
// randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
25082: LD_ADDR_VAR 0 2
25086: PUSH
25087: LD_INT 22
25089: PUSH
25090: LD_INT 3
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 21
25099: PUSH
25100: LD_INT 1
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 26
25109: PUSH
25110: LD_INT 1
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 50
25119: PUSH
25120: EMPTY
25121: LIST
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: PPUSH
25129: CALL_OW 69
25133: PUSH
25134: LD_EXP 50
25138: PUSH
25139: LD_EXP 51
25143: PUSH
25144: LD_EXP 53
25148: PUSH
25149: LD_EXP 54
25153: PUSH
25154: LD_EXP 55
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: DIFF
25166: ST_TO_ADDR
// if randomMale then
25167: LD_VAR 0 2
25171: IFFALSE 25238
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) , D3b-RSol1-1 ,  , false , true ) else
25173: LD_INT 22
25175: PUSH
25176: LD_INT 3
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: LD_INT 21
25185: PUSH
25186: LD_INT 1
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 26
25195: PUSH
25196: LD_INT 1
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 50
25205: PUSH
25206: EMPTY
25207: LIST
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: PPUSH
25215: CALL_OW 69
25219: PPUSH
25220: LD_STRING D3b-RSol1-1
25222: PPUSH
25223: LD_STRING 
25225: PPUSH
25226: LD_INT 0
25228: PPUSH
25229: LD_INT 1
25231: PPUSH
25232: CALL 7034 0 5
25236: GO 25315
// begin randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
25238: LD_ADDR_VAR 0 2
25242: PUSH
25243: LD_INT 22
25245: PUSH
25246: LD_INT 3
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 21
25255: PUSH
25256: LD_INT 1
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 26
25265: PUSH
25266: LD_INT 1
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 50
25275: PUSH
25276: EMPTY
25277: LIST
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: PPUSH
25285: CALL_OW 69
25289: PUSH
25290: LD_EXP 50
25294: PUSH
25295: EMPTY
25296: LIST
25297: DIFF
25298: ST_TO_ADDR
// Say ( randomMale [ 1 ] , D3b-RSol1-1 ) ;
25299: LD_VAR 0 2
25303: PUSH
25304: LD_INT 1
25306: ARRAY
25307: PPUSH
25308: LD_STRING D3b-RSol1-1
25310: PPUSH
25311: CALL_OW 88
// end ; if IsOK ( Gnyevko ) then
25315: LD_EXP 51
25319: PPUSH
25320: CALL_OW 302
25324: IFFALSE 25338
// Say ( Gnyevko , D3b-Gny-1 ) ;
25326: LD_EXP 51
25330: PPUSH
25331: LD_STRING D3b-Gny-1
25333: PPUSH
25334: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
25338: LD_EXP 50
25342: PPUSH
25343: LD_STRING D3b-Bur-1
25345: PPUSH
25346: CALL_OW 88
// DialogueOff ;
25350: CALL_OW 7
// exit ;
25354: POP
25355: POP
25356: GO 25362
// end ; end ;
25358: GO 25044
25360: POP
25361: POP
// end ;
25362: PPOPN 2
25364: END
// every 2 2$0 trigger dialog_amSupportTroops do
25365: LD_EXP 12
25369: IFFALSE 25453
25371: GO 25373
25373: DISABLE
// begin if IsOK ( Kovalyuk ) then
25374: LD_EXP 53
25378: PPUSH
25379: CALL_OW 302
25383: IFFALSE 25397
// Say ( Kovalyuk , D3b-Kov-1 ) ;
25385: LD_EXP 53
25389: PPUSH
25390: LD_STRING D3b-Kov-1
25392: PPUSH
25393: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D3b-RSol1-2 ,  , false , false ) ;
25397: LD_INT 22
25399: PUSH
25400: LD_INT 3
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 21
25409: PUSH
25410: LD_INT 1
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 26
25419: PUSH
25420: LD_INT 1
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: LIST
25431: PPUSH
25432: CALL_OW 69
25436: PPUSH
25437: LD_STRING D3b-RSol1-2
25439: PPUSH
25440: LD_STRING 
25442: PPUSH
25443: LD_INT 0
25445: PPUSH
25446: LD_INT 0
25448: PPUSH
25449: CALL 7034 0 5
// end ;
25453: END
// every 1 trigger not endCutscene do
25454: LD_EXP 32
25458: NOT
25459: IFFALSE 25477
25461: GO 25463
25463: DISABLE
// begin enable ;
25464: ENABLE
// SetLives ( Kurin , 1000 ) ;
25465: LD_EXP 62
25469: PPUSH
25470: LD_INT 1000
25472: PPUSH
25473: CALL_OW 234
// end ;
25477: END
// every 0 0$1 trigger timeToPrepareAttack < 0 0$01 do
25478: LD_EXP 41
25482: PUSH
25483: LD_INT 35
25485: LESS
25486: IFFALSE 25714
25488: GO 25490
25490: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
25491: LD_EXP 62
25495: PPUSH
25496: CALL_OW 87
// InGameOn ;
25500: CALL_OW 8
// DialogueOn ;
25504: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
25508: LD_EXP 62
25512: PPUSH
25513: LD_STRING D5-Kur-1
25515: PPUSH
25516: CALL_OW 94
// case Query ( QVehicles ) of 1 :
25520: LD_STRING QVehicles
25522: PPUSH
25523: CALL_OW 97
25527: PUSH
25528: LD_INT 1
25530: DOUBLE
25531: EQUAL
25532: IFTRUE 25536
25534: GO 25579
25536: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
25537: LD_EXP 50
25541: PPUSH
25542: LD_STRING D6a-Bur-1
25544: PPUSH
25545: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
25549: LD_EXP 62
25553: PPUSH
25554: LD_STRING D6a-Kur-1
25556: PPUSH
25557: CALL_OW 94
// meetNearOmicronBase = true ;
25561: LD_ADDR_EXP 22
25565: PUSH
25566: LD_INT 1
25568: ST_TO_ADDR
// kurinCheckVehicles = true ;
25569: LD_ADDR_EXP 21
25573: PUSH
25574: LD_INT 1
25576: ST_TO_ADDR
// end ; 2 :
25577: GO 25706
25579: LD_INT 2
25581: DOUBLE
25582: EQUAL
25583: IFTRUE 25587
25585: GO 25634
25587: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
25588: LD_EXP 50
25592: PPUSH
25593: LD_STRING D6b-Bur-1
25595: PPUSH
25596: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
25600: LD_EXP 62
25604: PPUSH
25605: LD_STRING D6b-Kur-1
25607: PPUSH
25608: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
25612: LD_EXP 50
25616: PPUSH
25617: LD_STRING D6b-Bur-2
25619: PPUSH
25620: CALL_OW 88
// meetNearOmicronBase = true ;
25624: LD_ADDR_EXP 22
25628: PUSH
25629: LD_INT 1
25631: ST_TO_ADDR
// end ; 3 :
25632: GO 25706
25634: LD_INT 3
25636: DOUBLE
25637: EQUAL
25638: IFTRUE 25642
25640: GO 25705
25642: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
25643: LD_EXP 50
25647: PPUSH
25648: LD_STRING D6c-Bur-1
25650: PPUSH
25651: CALL_OW 88
// Say ( Kurin , D6c-Kur-1 ) ;
25655: LD_EXP 62
25659: PPUSH
25660: LD_STRING D6c-Kur-1
25662: PPUSH
25663: CALL_OW 88
// Say ( Burlak , D6c-Bur-2 ) ;
25667: LD_EXP 50
25671: PPUSH
25672: LD_STRING D6c-Bur-2
25674: PPUSH
25675: CALL_OW 88
// kurinGiveMoreTime = true ;
25679: LD_ADDR_EXP 16
25683: PUSH
25684: LD_INT 1
25686: ST_TO_ADDR
// kurinOpinion = 0 ;
25687: LD_ADDR_EXP 5
25691: PUSH
25692: LD_INT 0
25694: ST_TO_ADDR
// counterIndex = 4 ;
25695: LD_ADDR_EXP 91
25699: PUSH
25700: LD_INT 4
25702: ST_TO_ADDR
// end ; end ;
25703: GO 25706
25705: POP
// InGameOff ;
25706: CALL_OW 9
// DialogueOff ;
25710: CALL_OW 7
// end ;
25714: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
25715: LD_EXP 17
25719: PUSH
25720: LD_INT 35
25722: LESS
25723: PUSH
25724: LD_EXP 16
25728: AND
25729: IFFALSE 25762
25731: GO 25733
25733: DISABLE
// begin DialogueOn ;
25734: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
25738: LD_EXP 62
25742: PPUSH
25743: LD_STRING D6c-Kur-2
25745: PPUSH
25746: CALL_OW 94
// DialogueOff ;
25750: CALL_OW 7
// meetNearOmicronBase = true ;
25754: LD_ADDR_EXP 22
25758: PUSH
25759: LD_INT 1
25761: ST_TO_ADDR
// end ;
25762: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs ;
25763: LD_EXP 22
25767: IFFALSE 26422
25769: GO 25771
25771: DISABLE
25772: LD_INT 0
25774: PPUSH
25775: PPUSH
25776: PPUSH
25777: PPUSH
25778: PPUSH
// begin mechs = [ ] ;
25779: LD_ADDR_VAR 0 3
25783: PUSH
25784: EMPTY
25785: ST_TO_ADDR
// vehs = [ ] ;
25786: LD_ADDR_VAR 0 4
25790: PUSH
25791: EMPTY
25792: ST_TO_ADDR
// haveVehs = 0 ;
25793: LD_ADDR_VAR 0 5
25797: PUSH
25798: LD_INT 0
25800: ST_TO_ADDR
// uc_side = 6 ;
25801: LD_ADDR_OWVAR 20
25805: PUSH
25806: LD_INT 6
25808: ST_TO_ADDR
// uc_nation = 3 ;
25809: LD_ADDR_OWVAR 21
25813: PUSH
25814: LD_INT 3
25816: ST_TO_ADDR
// for i := 1 to 2 do
25817: LD_ADDR_VAR 0 1
25821: PUSH
25822: DOUBLE
25823: LD_INT 1
25825: DEC
25826: ST_TO_ADDR
25827: LD_INT 2
25829: PUSH
25830: FOR_TO
25831: IFFALSE 25930
// begin PrepareMechanic ( false , 2 ) ;
25833: LD_INT 0
25835: PPUSH
25836: LD_INT 2
25838: PPUSH
25839: CALL_OW 383
// mech = CreateHuman ;
25843: LD_ADDR_VAR 0 2
25847: PUSH
25848: CALL_OW 44
25852: ST_TO_ADDR
// mechs = mechs ^ mech ;
25853: LD_ADDR_VAR 0 3
25857: PUSH
25858: LD_VAR 0 3
25862: PUSH
25863: LD_VAR 0 2
25867: ADD
25868: ST_TO_ADDR
// PlaceHumanInUnit ( mech , kirovDepot ) ;
25869: LD_VAR 0 2
25873: PPUSH
25874: LD_EXP 68
25878: PPUSH
25879: CALL_OW 52
// ComExitBuilding ( mech ) ;
25883: LD_VAR 0 2
25887: PPUSH
25888: CALL_OW 122
// wait ( 0 0$1 ) ;
25892: LD_INT 35
25894: PPUSH
25895: CALL_OW 67
// AddComMoveXY ( mech , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
25899: LD_VAR 0 2
25903: PPUSH
25904: LD_EXP 61
25908: PPUSH
25909: CALL_OW 250
25913: PPUSH
25914: LD_EXP 61
25918: PPUSH
25919: CALL_OW 251
25923: PPUSH
25924: CALL_OW 171
// end ;
25928: GO 25830
25930: POP
25931: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] ] ) = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) then
25932: LD_INT 22
25934: PUSH
25935: LD_INT 3
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 21
25944: PUSH
25945: LD_INT 2
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 23
25954: PUSH
25955: LD_INT 3
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: LIST
25966: PPUSH
25967: CALL_OW 69
25971: PUSH
25972: LD_INT 22
25974: PUSH
25975: LD_INT 3
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 21
25984: PUSH
25985: LD_INT 1
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PPUSH
25996: CALL_OW 69
26000: EQUAL
26001: IFFALSE 26011
// produceOnlyForYou = true ;
26003: LD_ADDR_EXP 20
26007: PUSH
26008: LD_INT 1
26010: ST_TO_ADDR
// wait ( 0 0$20 ) ;
26011: LD_INT 700
26013: PPUSH
26014: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + 2 then
26018: LD_INT 22
26020: PUSH
26021: LD_INT 3
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 21
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 23
26040: PUSH
26041: LD_INT 3
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 3
26050: PUSH
26051: LD_INT 34
26053: PUSH
26054: LD_INT 51
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: PPUSH
26071: CALL_OW 69
26075: PUSH
26076: LD_INT 22
26078: PUSH
26079: LD_INT 3
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 21
26088: PUSH
26089: LD_INT 1
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PPUSH
26100: CALL_OW 69
26104: PUSH
26105: LD_INT 2
26107: PLUS
26108: GREATEREQUAL
26109: IFFALSE 26392
// begin vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 1 ] ;
26111: LD_ADDR_VAR 0 4
26115: PUSH
26116: LD_VAR 0 4
26120: PUSH
26121: LD_INT 22
26123: PUSH
26124: LD_INT 3
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 21
26133: PUSH
26134: LD_INT 2
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 23
26143: PUSH
26144: LD_INT 3
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 3
26153: PUSH
26154: LD_INT 34
26156: PUSH
26157: LD_INT 51
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 3
26170: PUSH
26171: LD_INT 59
26173: PUSH
26174: EMPTY
26175: LIST
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: PPUSH
26188: CALL_OW 69
26192: PUSH
26193: LD_INT 1
26195: ARRAY
26196: ADD
26197: ST_TO_ADDR
// vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 2 ] ;
26198: LD_ADDR_VAR 0 4
26202: PUSH
26203: LD_VAR 0 4
26207: PUSH
26208: LD_INT 22
26210: PUSH
26211: LD_INT 3
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 21
26220: PUSH
26221: LD_INT 2
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 23
26230: PUSH
26231: LD_INT 3
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 3
26240: PUSH
26241: LD_INT 34
26243: PUSH
26244: LD_INT 51
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 3
26257: PUSH
26258: LD_INT 59
26260: PUSH
26261: EMPTY
26262: LIST
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: PPUSH
26275: CALL_OW 69
26279: PUSH
26280: LD_INT 2
26282: ARRAY
26283: ADD
26284: ST_TO_ADDR
// kirovAttackVehicles = kirovAttackVehicles ^ vehs ;
26285: LD_ADDR_EXP 77
26289: PUSH
26290: LD_EXP 77
26294: PUSH
26295: LD_VAR 0 4
26299: ADD
26300: ST_TO_ADDR
// SetSide ( vehs , 6 ) ;
26301: LD_VAR 0 4
26305: PPUSH
26306: LD_INT 6
26308: PPUSH
26309: CALL_OW 235
// produceMoreVehicles = true ;
26313: LD_ADDR_EXP 19
26317: PUSH
26318: LD_INT 1
26320: ST_TO_ADDR
// ComEnterUnit ( mechs [ 1 ] , vehs [ 1 ] ) ;
26321: LD_VAR 0 3
26325: PUSH
26326: LD_INT 1
26328: ARRAY
26329: PPUSH
26330: LD_VAR 0 4
26334: PUSH
26335: LD_INT 1
26337: ARRAY
26338: PPUSH
26339: CALL_OW 120
// ComEnterUnit ( mechs [ 2 ] , vehs [ 2 ] ) ;
26343: LD_VAR 0 3
26347: PUSH
26348: LD_INT 2
26350: ARRAY
26351: PPUSH
26352: LD_VAR 0 4
26356: PUSH
26357: LD_INT 2
26359: ARRAY
26360: PPUSH
26361: CALL_OW 120
// if kurinCheckVehicles and not kurinOpinion = 0 then
26365: LD_EXP 21
26369: PUSH
26370: LD_EXP 5
26374: PUSH
26375: LD_INT 0
26377: EQUAL
26378: NOT
26379: AND
26380: IFFALSE 26390
// kurinOpinion = 1 ;
26382: LD_ADDR_EXP 5
26386: PUSH
26387: LD_INT 1
26389: ST_TO_ADDR
// end else
26390: GO 26422
// begin if kurinCheckVehicles then
26392: LD_EXP 21
26396: IFFALSE 26422
// begin DialogueOn ;
26398: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
26402: LD_EXP 62
26406: PPUSH
26407: LD_STRING D6d-Kur-1
26409: PPUSH
26410: CALL_OW 94
// DialogueOff ;
26414: CALL_OW 7
// Lose_Vehicles ;
26418: CALL 20199 0 0
// end ; end ; end ;
26422: PPOPN 5
26424: END
// every 0 0$1 trigger meetNearOmicronBase do
26425: LD_EXP 22
26429: IFFALSE 26649
26431: GO 26433
26433: DISABLE
// begin spawnCrates = false ;
26434: LD_ADDR_EXP 8
26438: PUSH
26439: LD_INT 0
26441: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
26442: LD_INT 6
26444: PPUSH
26445: LD_INT 1
26447: PPUSH
26448: LD_INT 2
26450: PPUSH
26451: LD_INT 1
26453: PPUSH
26454: CALL_OW 80
// SetRestrict ( b_depot , 3 , false ) ;
26458: LD_INT 0
26460: PPUSH
26461: LD_INT 3
26463: PPUSH
26464: LD_INT 0
26466: PPUSH
26467: CALL_OW 324
// ChangeMissionObjectives ( M3a ) ;
26471: LD_STRING M3a
26473: PPUSH
26474: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
26478: LD_STRING M5
26480: PPUSH
26481: CALL_OW 337
// SetAreaMapShow ( MeetArea , 1 ) ;
26485: LD_INT 15
26487: PPUSH
26488: LD_INT 1
26490: PPUSH
26491: CALL_OW 424
// ComMoveXY ( kirovAttackVehicles , 75 , 38 ) ;
26495: LD_EXP 77
26499: PPUSH
26500: LD_INT 75
26502: PPUSH
26503: LD_INT 38
26505: PPUSH
26506: CALL_OW 111
// ComMoveXY ( kirovAttackCargo , 75 , 38 ) ;
26510: LD_EXP 76
26514: PPUSH
26515: LD_INT 75
26517: PPUSH
26518: LD_INT 38
26520: PPUSH
26521: CALL_OW 111
// counterIndex = 2 ;
26525: LD_ADDR_EXP 91
26529: PUSH
26530: LD_INT 2
26532: ST_TO_ADDR
// if not kurinOpinion = 0 then
26533: LD_EXP 5
26537: PUSH
26538: LD_INT 0
26540: EQUAL
26541: NOT
26542: IFFALSE 26552
// kurinOpinion = 1 ;
26544: LD_ADDR_EXP 5
26548: PUSH
26549: LD_INT 1
26551: ST_TO_ADDR
// InitAIManager ( 1 , 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , OmicronBaseArea , OmicronHealArea , OmicronParkingArea , OmicronDefenceArea , [ 2 , 3 , 4 ] [ Difficulty ] , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , false ) ;
26552: LD_INT 1
26554: PPUSH
26555: LD_INT 1
26557: PPUSH
26558: LD_INT 22
26560: PUSH
26561: LD_INT 1
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: LD_INT 21
26570: PUSH
26571: LD_INT 1
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PPUSH
26582: CALL_OW 69
26586: PPUSH
26587: LD_INT 13
26589: PPUSH
26590: LD_INT 28
26592: PPUSH
26593: LD_INT 17
26595: PPUSH
26596: LD_INT 29
26598: PPUSH
26599: LD_INT 2
26601: PUSH
26602: LD_INT 3
26604: PUSH
26605: LD_INT 4
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: LIST
26612: PUSH
26613: LD_OWVAR 67
26617: ARRAY
26618: PPUSH
26619: LD_INT 2
26621: PUSH
26622: LD_INT 3
26624: PUSH
26625: LD_INT 4
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: LIST
26632: PUSH
26633: LD_OWVAR 67
26637: ARRAY
26638: PPUSH
26639: LD_INT 0
26641: PPUSH
26642: LD_INT 0
26644: PPUSH
26645: CALL 12165 0 11
// end ;
26649: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 2 do
26650: LD_EXP 18
26654: PUSH
26655: LD_INT 35
26657: LESS
26658: PUSH
26659: LD_EXP 91
26663: PUSH
26664: LD_INT 2
26666: EQUAL
26667: AND
26668: IFFALSE 26717
26670: GO 26672
26672: DISABLE
// begin DialogueOn ;
26673: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
26677: LD_EXP 62
26681: PPUSH
26682: LD_STRING D7a-Kur-1
26684: PPUSH
26685: CALL_OW 94
// DialogueOff ;
26689: CALL_OW 7
// counterIndex = 3 ;
26693: LD_ADDR_EXP 91
26697: PUSH
26698: LD_INT 3
26700: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
26701: LD_ADDR_EXP 18
26705: PUSH
26706: LD_INT 4200
26708: ST_TO_ADDR
// kurinOpinion = 0 ;
26709: LD_ADDR_EXP 5
26713: PUSH
26714: LD_INT 0
26716: ST_TO_ADDR
// end ;
26717: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 3 do
26718: LD_EXP 18
26722: PUSH
26723: LD_INT 35
26725: LESS
26726: PUSH
26727: LD_EXP 91
26731: PUSH
26732: LD_INT 3
26734: EQUAL
26735: AND
26736: IFFALSE 26745
26738: GO 26740
26740: DISABLE
// Lose_Delay ;
26741: CALL 20229 0 0
26745: END
// every 0 0$1 trigger meetNearOmicronBase and FilterUnitsExceptArea ( MeetArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
26746: LD_EXP 22
26750: PUSH
26751: LD_INT 15
26753: PPUSH
26754: LD_INT 22
26756: PUSH
26757: LD_INT 3
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 21
26766: PUSH
26767: LD_INT 1
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PPUSH
26778: CALL_OW 71
26782: PUSH
26783: LD_INT 0
26785: EQUAL
26786: AND
26787: IFFALSE 26875
26789: GO 26791
26791: DISABLE
// begin counterEnable = false ;
26792: LD_ADDR_EXP 90
26796: PUSH
26797: LD_INT 0
26799: ST_TO_ADDR
// Display_strings = [ ] ;
26800: LD_ADDR_OWVAR 47
26804: PUSH
26805: EMPTY
26806: ST_TO_ADDR
// SetAreaMapShow ( MeetArea , 0 ) ;
26807: LD_INT 15
26809: PPUSH
26810: LD_INT 0
26812: PPUSH
26813: CALL_OW 424
// canExitBattlefield = false ;
26817: LD_ADDR_EXP 27
26821: PUSH
26822: LD_INT 0
26824: ST_TO_ADDR
// DialogueOn ;
26825: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
26829: LD_EXP 50
26833: PPUSH
26834: LD_STRING D7-Bur-1
26836: PPUSH
26837: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
26841: LD_EXP 62
26845: PPUSH
26846: LD_STRING D7-Kur-1
26848: PPUSH
26849: CALL_OW 94
// DialogueOff ;
26853: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
26857: LD_STRING M5a
26859: PPUSH
26860: CALL_OW 337
// Query ( QRefuel ) ;
26864: LD_STRING QRefuel
26866: PPUSH
26867: CALL_OW 97
// KirovAttackOmicron ;
26871: CALL 17955 0 0
// end ;
26875: END
// every 1 trigger not canExitBattlefield do var unit ;
26876: LD_EXP 27
26880: NOT
26881: IFFALSE 27050
26883: GO 26885
26885: DISABLE
26886: LD_INT 0
26888: PPUSH
// begin enable ;
26889: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
26890: LD_ADDR_VAR 0 1
26894: PUSH
26895: LD_INT 22
26897: PUSH
26898: LD_INT 3
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 2
26907: PUSH
26908: LD_INT 21
26910: PUSH
26911: LD_INT 1
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 21
26920: PUSH
26921: LD_INT 2
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: LIST
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PPUSH
26937: CALL_OW 69
26941: PUSH
26942: FOR_IN
26943: IFFALSE 27048
// if not IsInArea ( unit , OmicronBattlefieldArea ) and ( UnitFilter ( unit , [ f_type , unit_human ] ) or UnitsInside ( unit ) ) then
26945: LD_VAR 0 1
26949: PPUSH
26950: LD_INT 26
26952: PPUSH
26953: CALL_OW 308
26957: NOT
26958: PUSH
26959: LD_VAR 0 1
26963: PPUSH
26964: LD_INT 21
26966: PUSH
26967: LD_INT 1
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PPUSH
26974: CALL_OW 72
26978: PUSH
26979: LD_VAR 0 1
26983: PPUSH
26984: CALL_OW 313
26988: OR
26989: AND
26990: IFFALSE 27046
// begin ComMoveToArea ( unit , OmicronBattlefieldArea ) ;
26992: LD_VAR 0 1
26996: PPUSH
26997: LD_INT 26
26999: PPUSH
27000: CALL_OW 113
// if not dialog_stop then
27004: LD_EXP 14
27008: NOT
27009: IFFALSE 27046
// begin dialog_stop = true ;
27011: LD_ADDR_EXP 14
27015: PUSH
27016: LD_INT 1
27018: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
27019: LD_EXP 62
27023: PPUSH
27024: LD_STRING D12-Kur-1
27026: PPUSH
27027: CALL_OW 88
// wait ( 0 0$5 ) ;
27031: LD_INT 175
27033: PPUSH
27034: CALL_OW 67
// dialog_stop = false ;
27038: LD_ADDR_EXP 14
27042: PUSH
27043: LD_INT 0
27045: ST_TO_ADDR
// end ; end ;
27046: GO 26942
27048: POP
27049: POP
// end ;
27050: PPOPN 1
27052: END
// every 1 do var unit ;
27053: GO 27055
27055: DISABLE
27056: LD_INT 0
27058: PPUSH
// begin enable ;
27059: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
27060: LD_ADDR_VAR 0 1
27064: PUSH
27065: LD_INT 22
27067: PUSH
27068: LD_INT 3
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 2
27077: PUSH
27078: LD_INT 21
27080: PUSH
27081: LD_INT 1
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 21
27090: PUSH
27091: LD_INT 2
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: LIST
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PPUSH
27107: CALL_OW 69
27111: PUSH
27112: FOR_IN
27113: IFFALSE 27188
// if IsInArea ( unit , SecondKurinBase ) then
27115: LD_VAR 0 1
27119: PPUSH
27120: LD_INT 20
27122: PPUSH
27123: CALL_OW 308
27127: IFFALSE 27186
// begin ComMoveXY ( unit , 200 , 114 ) ;
27129: LD_VAR 0 1
27133: PPUSH
27134: LD_INT 200
27136: PPUSH
27137: LD_INT 114
27139: PPUSH
27140: CALL_OW 111
// if not dialog_stop then
27144: LD_EXP 14
27148: NOT
27149: IFFALSE 27186
// begin dialog_stop = true ;
27151: LD_ADDR_EXP 14
27155: PUSH
27156: LD_INT 1
27158: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
27159: LD_EXP 62
27163: PPUSH
27164: LD_STRING D12-Kur-1
27166: PPUSH
27167: CALL_OW 88
// wait ( 0 0$5 ) ;
27171: LD_INT 175
27173: PPUSH
27174: CALL_OW 67
// dialog_stop = false ;
27178: LD_ADDR_EXP 14
27182: PUSH
27183: LD_INT 0
27185: ST_TO_ADDR
// end ; end ;
27186: GO 27112
27188: POP
27189: POP
// end ;
27190: PPOPN 1
27192: END
// every 1 trigger not meetNearOmicronBase and IsOK ( Sikorski ) do var i , unit , randDialog , currentDist , tmpDist , nearUnit , index ;
27193: LD_EXP 22
27197: NOT
27198: PUSH
27199: LD_INT 290
27201: PPUSH
27202: CALL_OW 302
27206: AND
27207: IFFALSE 27717
27209: GO 27211
27211: DISABLE
27212: LD_INT 0
27214: PPUSH
27215: PPUSH
27216: PPUSH
27217: PPUSH
27218: PPUSH
27219: PPUSH
27220: PPUSH
// begin enable ;
27221: ENABLE
// for unit in FilterUnitsInArea ( OmicronBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
27222: LD_ADDR_VAR 0 2
27226: PUSH
27227: LD_INT 13
27229: PPUSH
27230: LD_INT 22
27232: PUSH
27233: LD_INT 1
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 2
27242: PUSH
27243: LD_INT 21
27245: PUSH
27246: LD_INT 1
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 21
27255: PUSH
27256: LD_INT 2
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 21
27265: PUSH
27266: LD_INT 3
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PPUSH
27283: CALL_OW 70
27287: PUSH
27288: FOR_IN
27289: IFFALSE 27715
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
27291: LD_VAR 0 2
27295: PPUSH
27296: LD_INT 22
27298: PUSH
27299: LD_INT 3
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 2
27308: PUSH
27309: LD_INT 21
27311: PUSH
27312: LD_INT 1
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 21
27321: PUSH
27322: LD_INT 2
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: LIST
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PPUSH
27338: CALL_OW 69
27342: PPUSH
27343: LD_VAR 0 2
27347: PPUSH
27348: CALL_OW 74
27352: PPUSH
27353: CALL_OW 296
27357: PUSH
27358: LD_INT 17
27360: LESS
27361: IFFALSE 27713
// begin nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ;
27363: LD_ADDR_VAR 0 6
27367: PUSH
27368: LD_INT 22
27370: PUSH
27371: LD_INT 3
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 50
27380: PUSH
27381: EMPTY
27382: LIST
27383: PUSH
27384: LD_INT 2
27386: PUSH
27387: LD_INT 21
27389: PUSH
27390: LD_INT 1
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 21
27399: PUSH
27400: LD_INT 2
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: LIST
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: LIST
27416: PPUSH
27417: CALL_OW 69
27421: PPUSH
27422: LD_VAR 0 2
27426: PPUSH
27427: CALL_OW 74
27431: ST_TO_ADDR
// currentDist = GetDistUnitXY ( nearUnit , omicronBlockerPoints [ 1 ] [ 1 ] , omicronBlockerPoints [ 1 ] [ 2 ] ) ;
27432: LD_ADDR_VAR 0 4
27436: PUSH
27437: LD_VAR 0 6
27441: PPUSH
27442: LD_EXP 49
27446: PUSH
27447: LD_INT 1
27449: ARRAY
27450: PUSH
27451: LD_INT 1
27453: ARRAY
27454: PPUSH
27455: LD_EXP 49
27459: PUSH
27460: LD_INT 1
27462: ARRAY
27463: PUSH
27464: LD_INT 2
27466: ARRAY
27467: PPUSH
27468: CALL_OW 297
27472: ST_TO_ADDR
// index = 1 ;
27473: LD_ADDR_VAR 0 7
27477: PUSH
27478: LD_INT 1
27480: ST_TO_ADDR
// for i = 2 to omicronBlockerPoints do
27481: LD_ADDR_VAR 0 1
27485: PUSH
27486: DOUBLE
27487: LD_INT 2
27489: DEC
27490: ST_TO_ADDR
27491: LD_EXP 49
27495: PUSH
27496: FOR_TO
27497: IFFALSE 27578
// begin tmpDist = GetDistUnitXY ( nearUnit , omicronBlockerPoints [ i ] [ 1 ] , omicronBlockerPoints [ i ] [ 2 ] ) ;
27499: LD_ADDR_VAR 0 5
27503: PUSH
27504: LD_VAR 0 6
27508: PPUSH
27509: LD_EXP 49
27513: PUSH
27514: LD_VAR 0 1
27518: ARRAY
27519: PUSH
27520: LD_INT 1
27522: ARRAY
27523: PPUSH
27524: LD_EXP 49
27528: PUSH
27529: LD_VAR 0 1
27533: ARRAY
27534: PUSH
27535: LD_INT 2
27537: ARRAY
27538: PPUSH
27539: CALL_OW 297
27543: ST_TO_ADDR
// if tmpDist < currentDist then
27544: LD_VAR 0 5
27548: PUSH
27549: LD_VAR 0 4
27553: LESS
27554: IFFALSE 27576
// begin index = i ;
27556: LD_ADDR_VAR 0 7
27560: PUSH
27561: LD_VAR 0 1
27565: ST_TO_ADDR
// currentDist = tmpDist ;
27566: LD_ADDR_VAR 0 4
27570: PUSH
27571: LD_VAR 0 5
27575: ST_TO_ADDR
// end ; end ;
27576: GO 27496
27578: POP
27579: POP
// ComMoveXY ( nearUnit , omicronBlockerPoints [ index ] [ 1 ] , omicronBlockerPoints [ index ] [ 2 ] ) ;
27580: LD_VAR 0 6
27584: PPUSH
27585: LD_EXP 49
27589: PUSH
27590: LD_VAR 0 7
27594: ARRAY
27595: PUSH
27596: LD_INT 1
27598: ARRAY
27599: PPUSH
27600: LD_EXP 49
27604: PUSH
27605: LD_VAR 0 7
27609: ARRAY
27610: PUSH
27611: LD_INT 2
27613: ARRAY
27614: PPUSH
27615: CALL_OW 111
// randDialog = rand ( 1 , 2 ) ;
27619: LD_ADDR_VAR 0 3
27623: PUSH
27624: LD_INT 1
27626: PPUSH
27627: LD_INT 2
27629: PPUSH
27630: CALL_OW 12
27634: ST_TO_ADDR
// if not dialog_stop then
27635: LD_EXP 14
27639: NOT
27640: IFFALSE 27713
// begin dialog_stop = true ;
27642: LD_ADDR_EXP 14
27646: PUSH
27647: LD_INT 1
27649: ST_TO_ADDR
// if randDialog = 1 or not IsOK ( Gnyevko ) then
27650: LD_VAR 0 3
27654: PUSH
27655: LD_INT 1
27657: EQUAL
27658: PUSH
27659: LD_EXP 51
27663: PPUSH
27664: CALL_OW 302
27668: NOT
27669: OR
27670: IFFALSE 27686
// SayRadio ( Kurin , D11-Kur-1 ) else
27672: LD_EXP 62
27676: PPUSH
27677: LD_STRING D11-Kur-1
27679: PPUSH
27680: CALL_OW 94
27684: GO 27698
// Say ( Gnyevko , D11-Gny-1 ) ;
27686: LD_EXP 51
27690: PPUSH
27691: LD_STRING D11-Gny-1
27693: PPUSH
27694: CALL_OW 88
// wait ( 0 0$5 ) ;
27698: LD_INT 175
27700: PPUSH
27701: CALL_OW 67
// dialog_stop = false ;
27705: LD_ADDR_EXP 14
27709: PUSH
27710: LD_INT 0
27712: ST_TO_ADDR
// end ; end ;
27713: GO 27288
27715: POP
27716: POP
// end ;
27717: PPOPN 7
27719: END
// every 0 0$1 trigger IsDead ( Sikorski ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 5 do var i , tmpUs , tmpRu , building , beriaBuildings , nearBuilding , turrets , nearTurrets , emptyVehicles ;
27720: LD_INT 290
27722: PPUSH
27723: CALL_OW 301
27727: PUSH
27728: LD_INT 22
27730: PUSH
27731: LD_INT 1
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 21
27740: PUSH
27741: LD_INT 1
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PPUSH
27752: CALL_OW 69
27756: PUSH
27757: LD_INT 5
27759: LESS
27760: AND
27761: IFFALSE 31058
27763: GO 27765
27765: DISABLE
27766: LD_INT 0
27768: PPUSH
27769: PPUSH
27770: PPUSH
27771: PPUSH
27772: PPUSH
27773: PPUSH
27774: PPUSH
27775: PPUSH
27776: PPUSH
// begin omicronSurrender = true ;
27777: LD_ADDR_EXP 26
27781: PUSH
27782: LD_INT 1
27784: ST_TO_ADDR
// canExitBattlefield = true ;
27785: LD_ADDR_EXP 27
27789: PUSH
27790: LD_INT 1
27792: ST_TO_ADDR
// enableOmicronAI = false ;
27793: LD_ADDR_EXP 30
27797: PUSH
27798: LD_INT 0
27800: ST_TO_ADDR
// endCutscene = true ;
27801: LD_ADDR_EXP 32
27805: PUSH
27806: LD_INT 1
27808: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , false ) ;
27809: LD_INT 1
27811: PPUSH
27812: LD_INT 3
27814: PPUSH
27815: LD_INT 1
27817: PPUSH
27818: LD_INT 0
27820: PPUSH
27821: CALL_OW 80
// SetAttitude ( 2 , 3 , att_friend , true ) ;
27825: LD_INT 2
27827: PPUSH
27828: LD_INT 3
27830: PPUSH
27831: LD_INT 1
27833: PPUSH
27834: LD_INT 1
27836: PPUSH
27837: CALL_OW 80
// if not IsOk ( beriaBase ) or not beriaBase then
27841: LD_EXP 60
27845: PPUSH
27846: CALL_OW 302
27850: NOT
27851: PUSH
27852: LD_EXP 60
27856: NOT
27857: OR
27858: IFFALSE 27926
// beriaBase = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ b_warehouse ] ] ] ) [ 1 ] ;
27860: LD_ADDR_EXP 60
27864: PUSH
27865: LD_INT 25
27867: PPUSH
27868: LD_INT 22
27870: PUSH
27871: LD_INT 3
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 21
27880: PUSH
27881: LD_INT 3
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 2
27890: PUSH
27891: LD_INT 30
27893: PUSH
27894: LD_INT 0
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 1
27903: PUSH
27904: EMPTY
27905: LIST
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: LIST
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: LIST
27916: PPUSH
27917: CALL_OW 70
27921: PUSH
27922: LD_INT 1
27924: ARRAY
27925: ST_TO_ADDR
// CenterNowOnUnits ( Burlak ) ;
27926: LD_EXP 50
27930: PPUSH
27931: CALL_OW 87
// uc_side = 1 ;
27935: LD_ADDR_OWVAR 20
27939: PUSH
27940: LD_INT 1
27942: ST_TO_ADDR
// uc_nation = 1 ;
27943: LD_ADDR_OWVAR 21
27947: PUSH
27948: LD_INT 1
27950: ST_TO_ADDR
// hc_name :=  ;
27951: LD_ADDR_OWVAR 26
27955: PUSH
27956: LD_STRING 
27958: ST_TO_ADDR
// hc_gallery =  ;
27959: LD_ADDR_OWVAR 33
27963: PUSH
27964: LD_STRING 
27966: ST_TO_ADDR
// PrepareSoldier ( sex_male , 1 ) ;
27967: LD_INT 1
27969: PPUSH
27970: LD_INT 1
27972: PPUSH
27973: CALL_OW 381
// tmpUs = CreateHuman ;
27977: LD_ADDR_VAR 0 2
27981: PUSH
27982: CALL_OW 44
27986: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ f_side , 3 ] ) ) ;
27987: LD_INT 22
27989: PUSH
27990: LD_INT 3
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PPUSH
27997: CALL_OW 69
28001: PPUSH
28002: CALL_OW 141
// InGameOn ;
28006: CALL_OW 8
// DialogueOn ;
28010: CALL_OW 6
// CenterOnXY ( 26 , 33 ) ;
28014: LD_INT 26
28016: PPUSH
28017: LD_INT 33
28019: PPUSH
28020: CALL_OW 84
// SayRadio ( tmpUs , D8-Sol1-1 ) ;
28024: LD_VAR 0 2
28028: PPUSH
28029: LD_STRING D8-Sol1-1
28031: PPUSH
28032: CALL_OW 94
// if IsOk ( Kovalyuk ) then
28036: LD_EXP 53
28040: PPUSH
28041: CALL_OW 302
28045: IFFALSE 28059
// Say ( Kovalyuk , D8-Kov-1 ) ;
28047: LD_EXP 53
28051: PPUSH
28052: LD_STRING D8-Kov-1
28054: PPUSH
28055: CALL_OW 88
// tmpRu = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false , false ) ;
28059: LD_ADDR_VAR 0 3
28063: PUSH
28064: LD_INT 22
28066: PUSH
28067: LD_INT 3
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 21
28076: PUSH
28077: LD_INT 1
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 26
28086: PUSH
28087: LD_INT 1
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: LIST
28098: PPUSH
28099: CALL_OW 69
28103: PPUSH
28104: LD_STRING D8-RSol1-1
28106: PPUSH
28107: LD_STRING 
28109: PPUSH
28110: LD_INT 0
28112: PPUSH
28113: LD_INT 0
28115: PPUSH
28116: CALL 7034 0 5
28120: ST_TO_ADDR
// if IsOk ( Gnyevko ) then
28121: LD_EXP 51
28125: PPUSH
28126: CALL_OW 302
28130: IFFALSE 28144
// Say ( Gnyevko , D8-Gny-1 ) ;
28132: LD_EXP 51
28136: PPUSH
28137: LD_STRING D8-Gny-1
28139: PPUSH
28140: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff tmpRu , D8-RSol2-1 ,  , false , false ) ;
28144: LD_INT 22
28146: PUSH
28147: LD_INT 3
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 21
28156: PUSH
28157: LD_INT 1
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 26
28166: PUSH
28167: LD_INT 1
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: LIST
28178: PPUSH
28179: CALL_OW 69
28183: PUSH
28184: LD_VAR 0 3
28188: DIFF
28189: PPUSH
28190: LD_STRING D8-RSol2-1
28192: PPUSH
28193: LD_STRING 
28195: PPUSH
28196: LD_INT 0
28198: PPUSH
28199: LD_INT 0
28201: PPUSH
28202: CALL 7034 0 5
// DialogueOff ;
28206: CALL_OW 7
// PrepareArabian ;
28210: CALL 6556 0 0
// CenterNowOnXY ( 234 , 122 ) ;
28214: LD_INT 234
28216: PPUSH
28217: LD_INT 122
28219: PPUSH
28220: CALL_OW 86
// ComAgressiveMove ( northGroup , 221 , 110 ) ;
28224: LD_EXP 88
28228: PPUSH
28229: LD_INT 221
28231: PPUSH
28232: LD_INT 110
28234: PPUSH
28235: CALL_OW 114
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
28239: LD_EXP 89
28243: PPUSH
28244: LD_INT 21
28246: PUSH
28247: LD_INT 1
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PPUSH
28254: CALL_OW 72
28258: PPUSH
28259: LD_INT 221
28261: PPUSH
28262: LD_INT 110
28264: PPUSH
28265: CALL_OW 114
// wait ( 0 0$7 ) ;
28269: LD_INT 245
28271: PPUSH
28272: CALL_OW 67
// AddComAgressiveMove ( southGroup , 221 , 110 ) ;
28276: LD_EXP 89
28280: PPUSH
28281: LD_INT 221
28283: PPUSH
28284: LD_INT 110
28286: PPUSH
28287: CALL_OW 174
// wait ( 0 0$8 ) ;
28291: LD_INT 280
28293: PPUSH
28294: CALL_OW 67
// music_nat = nation_arabian ;
28298: LD_ADDR_OWVAR 71
28302: PUSH
28303: LD_INT 2
28305: ST_TO_ADDR
// music_class = music_combat ;
28306: LD_ADDR_OWVAR 72
28310: PUSH
28311: LD_INT 1
28313: ST_TO_ADDR
// game_speed = 4 ;
28314: LD_ADDR_OWVAR 65
28318: PUSH
28319: LD_INT 4
28321: ST_TO_ADDR
// DialogueOn ;
28322: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-1 ) ;
28326: LD_EXP 83
28330: PPUSH
28331: LD_STRING D9-Gri-1
28333: PPUSH
28334: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
28338: LD_EXP 62
28342: PPUSH
28343: LD_STRING D9-Kur-1
28345: PPUSH
28346: CALL_OW 94
// DialogueOff ;
28350: CALL_OW 7
// CenterOnXY ( 221 , 109 ) ;
28354: LD_INT 221
28356: PPUSH
28357: LD_INT 109
28359: PPUSH
28360: CALL_OW 84
// ComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 158 , 105 ) ;
28364: LD_EXP 79
28368: PPUSH
28369: LD_INT 25
28371: PUSH
28372: LD_INT 2
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PPUSH
28379: CALL_OW 72
28383: PPUSH
28384: LD_INT 158
28386: PPUSH
28387: LD_INT 105
28389: PPUSH
28390: CALL_OW 111
// ComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , 158 , 105 ) ;
28394: LD_EXP 79
28398: PPUSH
28399: LD_INT 25
28401: PUSH
28402: LD_INT 4
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PPUSH
28409: CALL_OW 72
28413: PPUSH
28414: LD_INT 158
28416: PPUSH
28417: LD_INT 105
28419: PPUSH
28420: CALL_OW 111
// ComMoveXY ( kirovTransportCargo , 158 , 105 ) ;
28424: LD_EXP 75
28428: PPUSH
28429: LD_INT 158
28431: PPUSH
28432: LD_INT 105
28434: PPUSH
28435: CALL_OW 111
// if not beriaDepot then
28439: LD_EXP 61
28443: NOT
28444: IFFALSE 28514
// begin AddComMoveToArea ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , EndMissionMeetArea ) ;
28446: LD_EXP 79
28450: PPUSH
28451: LD_INT 25
28453: PUSH
28454: LD_INT 2
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PPUSH
28461: CALL_OW 72
28465: PPUSH
28466: LD_INT 32
28468: PPUSH
28469: CALL_OW 173
// AddComMoveToArea ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , EndMissionMeetArea ) ;
28473: LD_EXP 79
28477: PPUSH
28478: LD_INT 25
28480: PUSH
28481: LD_INT 4
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PPUSH
28488: CALL_OW 72
28492: PPUSH
28493: LD_INT 32
28495: PPUSH
28496: CALL_OW 173
// AddComMoveToArea ( kirovTransportCargo , EndMissionMeetArea ) ;
28500: LD_EXP 75
28504: PPUSH
28505: LD_INT 32
28507: PPUSH
28508: CALL_OW 173
// end else
28512: GO 28631
// begin AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28514: LD_EXP 79
28518: PPUSH
28519: LD_INT 25
28521: PUSH
28522: LD_INT 2
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PPUSH
28529: CALL_OW 72
28533: PPUSH
28534: LD_EXP 61
28538: PPUSH
28539: CALL_OW 250
28543: PPUSH
28544: LD_EXP 61
28548: PPUSH
28549: CALL_OW 251
28553: PPUSH
28554: CALL_OW 171
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28558: LD_EXP 79
28562: PPUSH
28563: LD_INT 25
28565: PUSH
28566: LD_INT 4
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PPUSH
28573: CALL_OW 72
28577: PPUSH
28578: LD_EXP 61
28582: PPUSH
28583: CALL_OW 250
28587: PPUSH
28588: LD_EXP 61
28592: PPUSH
28593: CALL_OW 251
28597: PPUSH
28598: CALL_OW 171
// AddComMoveXY ( kirovTransportCargo , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28602: LD_EXP 75
28606: PPUSH
28607: LD_EXP 61
28611: PPUSH
28612: CALL_OW 250
28616: PPUSH
28617: LD_EXP 61
28621: PPUSH
28622: CALL_OW 251
28626: PPUSH
28627: CALL_OW 171
// end ; wait ( 0 0$2.5 ) ;
28631: LD_INT 88
28633: PPUSH
28634: CALL_OW 67
// DialogueOn ;
28638: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-2 ) ;
28642: LD_EXP 83
28646: PPUSH
28647: LD_STRING D9-Gri-2
28649: PPUSH
28650: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
28654: LD_EXP 62
28658: PPUSH
28659: LD_STRING D9-Kur-2
28661: PPUSH
28662: CALL_OW 94
// DialogueOff ;
28666: CALL_OW 7
// repeat wait ( 1 ) ;
28670: LD_INT 1
28672: PPUSH
28673: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
28677: LD_EXP 83
28681: PPUSH
28682: CALL_OW 256
28686: PUSH
28687: LD_INT 1000
28689: LESS
28690: IFFALSE 28670
// DialogueOn ;
28692: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-3 ) ;
28696: LD_EXP 83
28700: PPUSH
28701: LD_STRING D9-Gri-3
28703: PPUSH
28704: CALL_OW 94
// DialogueOff ;
28708: CALL_OW 7
// KillUnit ( Grishko ) ;
28712: LD_EXP 83
28716: PPUSH
28717: CALL_OW 66
// wait ( 0 0$12 ) ;
28721: LD_INT 420
28723: PPUSH
28724: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
28728: LD_EXP 62
28732: PPUSH
28733: CALL_OW 87
// SayRadio ( Kurin , D9-Kur-3 ) ;
28737: LD_EXP 62
28741: PPUSH
28742: LD_STRING D9-Kur-3
28744: PPUSH
28745: CALL_OW 94
// CenterNowOnXY ( 176 , 110 ) ;
28749: LD_INT 176
28751: PPUSH
28752: LD_INT 110
28754: PPUSH
28755: CALL_OW 86
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
28759: LD_EXP 89
28763: PPUSH
28764: LD_INT 21
28766: PUSH
28767: LD_INT 1
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PPUSH
28774: CALL_OW 72
28778: PPUSH
28779: LD_INT 221
28781: PPUSH
28782: LD_INT 110
28784: PPUSH
28785: CALL_OW 114
// ComAgressiveMove ( northGroup , 161 , 109 ) ;
28789: LD_EXP 88
28793: PPUSH
28794: LD_INT 161
28796: PPUSH
28797: LD_INT 109
28799: PPUSH
28800: CALL_OW 114
// wait ( 0 0$7 ) ;
28804: LD_INT 245
28806: PPUSH
28807: CALL_OW 67
// ComAgressiveMove ( southGroup , 161 , 109 ) ;
28811: LD_EXP 89
28815: PPUSH
28816: LD_INT 161
28818: PPUSH
28819: LD_INT 109
28821: PPUSH
28822: CALL_OW 114
// wait ( 0 0$11 ) ;
28826: LD_INT 385
28828: PPUSH
28829: CALL_OW 67
// ComEnterUnit ( Kurin , kirovDepot ) ;
28833: LD_EXP 62
28837: PPUSH
28838: LD_EXP 68
28842: PPUSH
28843: CALL_OW 120
// DialogueOn ;
28847: CALL_OW 6
// SayRadio ( Kurin , D9a-Kur-1 ) ;
28851: LD_EXP 62
28855: PPUSH
28856: LD_STRING D9a-Kur-1
28858: PPUSH
28859: CALL_OW 94
// Say ( Burlak , D9a-Bur-1 ) ;
28863: LD_EXP 50
28867: PPUSH
28868: LD_STRING D9a-Bur-1
28870: PPUSH
28871: CALL_OW 88
// SayRadio ( Kurin , D9a-Kur-2 ) ;
28875: LD_EXP 62
28879: PPUSH
28880: LD_STRING D9a-Kur-2
28882: PPUSH
28883: CALL_OW 94
// DialogueOff ;
28887: CALL_OW 7
// ComExitBuilding ( survivorsArabianAttack ) ;
28891: LD_EXP 80
28895: PPUSH
28896: CALL_OW 122
// wait ( 0 0$1 ) ;
28900: LD_INT 35
28902: PPUSH
28903: CALL_OW 67
// if not beriaBase then
28907: LD_EXP 60
28911: NOT
28912: IFFALSE 28928
// ComMoveToArea ( survivorsArabianAttack , EndMissionMeetArea ) else
28914: LD_EXP 80
28918: PPUSH
28919: LD_INT 32
28921: PPUSH
28922: CALL_OW 113
28926: GO 28957
// ComMoveXY ( survivorsArabianAttack , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28928: LD_EXP 80
28932: PPUSH
28933: LD_EXP 61
28937: PPUSH
28938: CALL_OW 250
28942: PPUSH
28943: LD_EXP 61
28947: PPUSH
28948: CALL_OW 251
28952: PPUSH
28953: CALL_OW 111
// immortalSurvivors = true ;
28957: LD_ADDR_EXP 28
28961: PUSH
28962: LD_INT 1
28964: ST_TO_ADDR
// for tmpUS in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
28965: LD_ADDR_VAR 0 2
28969: PUSH
28970: LD_INT 22
28972: PUSH
28973: LD_INT 1
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 21
28982: PUSH
28983: LD_INT 1
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 50
28992: PUSH
28993: EMPTY
28994: LIST
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: LIST
29000: PPUSH
29001: CALL_OW 69
29005: PUSH
29006: FOR_IN
29007: IFFALSE 29020
// RemoveUnit ( tmpUS ) ;
29009: LD_VAR 0 2
29013: PPUSH
29014: CALL_OW 64
29018: GO 29006
29020: POP
29021: POP
// repeat wait ( 0 0$1 ) ;
29022: LD_INT 35
29024: PPUSH
29025: CALL_OW 67
// until IsDead ( Kurin ) ;
29029: LD_EXP 62
29033: PPUSH
29034: CALL_OW 301
29038: IFFALSE 29022
// wait ( 0 0$1 ) ;
29040: LD_INT 35
29042: PPUSH
29043: CALL_OW 67
// nearTurrets = [ ] ;
29047: LD_ADDR_VAR 0 8
29051: PUSH
29052: EMPTY
29053: ST_TO_ADDR
// turrets = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) ;
29054: LD_ADDR_VAR 0 7
29058: PUSH
29059: LD_INT 22
29061: PUSH
29062: LD_INT 6
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 30
29071: PUSH
29072: LD_INT 32
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 50
29081: PUSH
29082: EMPTY
29083: LIST
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: LIST
29089: PPUSH
29090: CALL_OW 69
29094: ST_TO_ADDR
// for i = 1 to 2 do
29095: LD_ADDR_VAR 0 1
29099: PUSH
29100: DOUBLE
29101: LD_INT 1
29103: DEC
29104: ST_TO_ADDR
29105: LD_INT 2
29107: PUSH
29108: FOR_TO
29109: IFFALSE 29240
// begin nearTurrets = nearTurrets ^ NearestUnitToXY ( turrets , 129 , 99 ) ;
29111: LD_ADDR_VAR 0 8
29115: PUSH
29116: LD_VAR 0 8
29120: PUSH
29121: LD_VAR 0 7
29125: PPUSH
29126: LD_INT 129
29128: PPUSH
29129: LD_INT 99
29131: PPUSH
29132: CALL_OW 73
29136: ADD
29137: ST_TO_ADDR
// turrets = turrets diff nearTurrets ;
29138: LD_ADDR_VAR 0 7
29142: PUSH
29143: LD_VAR 0 7
29147: PUSH
29148: LD_VAR 0 8
29152: DIFF
29153: ST_TO_ADDR
// tmpRu = UnitsInside ( nearTurrets [ i ] ) [ 1 ] ;
29154: LD_ADDR_VAR 0 3
29158: PUSH
29159: LD_VAR 0 8
29163: PUSH
29164: LD_VAR 0 1
29168: ARRAY
29169: PPUSH
29170: CALL_OW 313
29174: PUSH
29175: LD_INT 1
29177: ARRAY
29178: ST_TO_ADDR
// ComExitBuilding ( tmpRu ) ;
29179: LD_VAR 0 3
29183: PPUSH
29184: CALL_OW 122
// if not beriaDepot then
29188: LD_EXP 61
29192: NOT
29193: IFFALSE 29209
// AddComMoveToArea ( tmpRu , EndMissionMeetArea ) else
29195: LD_VAR 0 3
29199: PPUSH
29200: LD_INT 32
29202: PPUSH
29203: CALL_OW 173
29207: GO 29238
// AddComMoveXY ( tmpRu , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29209: LD_VAR 0 3
29213: PPUSH
29214: LD_EXP 61
29218: PPUSH
29219: CALL_OW 250
29223: PPUSH
29224: LD_EXP 61
29228: PPUSH
29229: CALL_OW 251
29233: PPUSH
29234: CALL_OW 171
// end ;
29238: GO 29108
29240: POP
29241: POP
// tmpRu = UnitsInside ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) [ 1 ] ) ;
29242: LD_ADDR_VAR 0 3
29246: PUSH
29247: LD_INT 22
29249: PUSH
29250: LD_INT 6
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 21
29259: PUSH
29260: LD_INT 3
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 2
29269: PUSH
29270: LD_INT 30
29272: PUSH
29273: LD_INT 6
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 30
29282: PUSH
29283: LD_INT 7
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: LIST
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: LIST
29299: PPUSH
29300: CALL_OW 69
29304: PUSH
29305: LD_INT 1
29307: ARRAY
29308: PPUSH
29309: CALL_OW 313
29313: ST_TO_ADDR
// ComExitBuilding ( tmpRu ) ;
29314: LD_VAR 0 3
29318: PPUSH
29319: CALL_OW 122
// if not beriaDepot then
29323: LD_EXP 61
29327: NOT
29328: IFFALSE 29344
// AddComMoveToArea ( tmpRu , EndMissionMeetArea ) else
29330: LD_VAR 0 3
29334: PPUSH
29335: LD_INT 32
29337: PPUSH
29338: CALL_OW 173
29342: GO 29373
// AddComMoveXY ( tmpRu , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29344: LD_VAR 0 3
29348: PPUSH
29349: LD_EXP 61
29353: PPUSH
29354: CALL_OW 250
29358: PPUSH
29359: LD_EXP 61
29363: PPUSH
29364: CALL_OW 251
29368: PPUSH
29369: CALL_OW 171
// wait ( 0 0$14 ) ;
29373: LD_INT 490
29375: PPUSH
29376: CALL_OW 67
// ComExitVehicle ( FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
29380: LD_INT 26
29382: PPUSH
29383: LD_INT 22
29385: PUSH
29386: LD_INT 6
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 21
29395: PUSH
29396: LD_INT 1
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PPUSH
29407: CALL_OW 70
29411: PPUSH
29412: CALL_OW 121
// for i in FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) do
29416: LD_ADDR_VAR 0 1
29420: PUSH
29421: LD_INT 26
29423: PPUSH
29424: LD_INT 22
29426: PUSH
29427: LD_INT 6
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 21
29436: PUSH
29437: LD_INT 2
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PPUSH
29448: CALL_OW 70
29452: PUSH
29453: FOR_IN
29454: IFFALSE 29565
// begin if GetLives ( i ) < 15 then
29456: LD_VAR 0 1
29460: PPUSH
29461: CALL_OW 256
29465: PUSH
29466: LD_INT 15
29468: LESS
29469: IFFALSE 29534
// begin tmpRu = UnitsInside ( i ) ;
29471: LD_ADDR_VAR 0 3
29475: PUSH
29476: LD_VAR 0 1
29480: PPUSH
29481: CALL_OW 313
29485: ST_TO_ADDR
// ComExitVehicle ( tmpRu [ 1 ] ) ;
29486: LD_VAR 0 3
29490: PUSH
29491: LD_INT 1
29493: ARRAY
29494: PPUSH
29495: CALL_OW 121
// AddComMoveXY ( tmpRu [ 1 ] , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29499: LD_VAR 0 3
29503: PUSH
29504: LD_INT 1
29506: ARRAY
29507: PPUSH
29508: LD_EXP 61
29512: PPUSH
29513: CALL_OW 250
29517: PPUSH
29518: LD_EXP 61
29522: PPUSH
29523: CALL_OW 251
29527: PPUSH
29528: CALL_OW 171
// end else
29532: GO 29563
// AddComMoveXY ( i , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29534: LD_VAR 0 1
29538: PPUSH
29539: LD_EXP 61
29543: PPUSH
29544: CALL_OW 250
29548: PPUSH
29549: LD_EXP 61
29553: PPUSH
29554: CALL_OW 251
29558: PPUSH
29559: CALL_OW 171
// end ;
29563: GO 29453
29565: POP
29566: POP
// wait ( 0 0$1 ) ;
29567: LD_INT 35
29569: PPUSH
29570: CALL_OW 67
// AddComMoveXY ( FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29574: LD_INT 26
29576: PPUSH
29577: LD_INT 22
29579: PUSH
29580: LD_INT 6
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 21
29589: PUSH
29590: LD_INT 1
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PPUSH
29601: CALL_OW 70
29605: PPUSH
29606: LD_EXP 61
29610: PPUSH
29611: CALL_OW 250
29615: PPUSH
29616: LD_EXP 61
29620: PPUSH
29621: CALL_OW 251
29625: PPUSH
29626: CALL_OW 171
// ComExitVehicle ( UnitsInside ( kirovTransportCargo ) [ 1 ] ) ;
29630: LD_EXP 75
29634: PPUSH
29635: CALL_OW 313
29639: PUSH
29640: LD_INT 1
29642: ARRAY
29643: PPUSH
29644: CALL_OW 121
// for i in FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
29648: LD_ADDR_VAR 0 1
29652: PUSH
29653: LD_INT 26
29655: PPUSH
29656: LD_INT 22
29658: PUSH
29659: LD_INT 3
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 21
29668: PUSH
29669: LD_INT 2
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PPUSH
29680: CALL_OW 70
29684: PUSH
29685: FOR_IN
29686: IFFALSE 29843
// begin if GetLives ( i ) < 15 then
29688: LD_VAR 0 1
29692: PPUSH
29693: CALL_OW 256
29697: PUSH
29698: LD_INT 15
29700: LESS
29701: IFFALSE 29791
// begin tmpRu = UnitsInside ( i ) ;
29703: LD_ADDR_VAR 0 3
29707: PUSH
29708: LD_VAR 0 1
29712: PPUSH
29713: CALL_OW 313
29717: ST_TO_ADDR
// ComExitVehicle ( tmpRu [ 1 ] ) ;
29718: LD_VAR 0 3
29722: PUSH
29723: LD_INT 1
29725: ARRAY
29726: PPUSH
29727: CALL_OW 121
// if not beriaDepot then
29731: LD_EXP 61
29735: NOT
29736: IFFALSE 29756
// AddComMoveToArea ( tmpRu [ 1 ] , EndMissionMeetArea ) else
29738: LD_VAR 0 3
29742: PUSH
29743: LD_INT 1
29745: ARRAY
29746: PPUSH
29747: LD_INT 32
29749: PPUSH
29750: CALL_OW 173
29754: GO 29789
// AddComMoveXY ( tmpRu [ 1 ] , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29756: LD_VAR 0 3
29760: PUSH
29761: LD_INT 1
29763: ARRAY
29764: PPUSH
29765: LD_EXP 61
29769: PPUSH
29770: CALL_OW 250
29774: PPUSH
29775: LD_EXP 61
29779: PPUSH
29780: CALL_OW 251
29784: PPUSH
29785: CALL_OW 171
// end else
29789: GO 29841
// if not beriaDepot then
29791: LD_EXP 61
29795: NOT
29796: IFFALSE 29812
// AddComMoveToArea ( i , EndMissionMeetArea ) else
29798: LD_VAR 0 1
29802: PPUSH
29803: LD_INT 32
29805: PPUSH
29806: CALL_OW 173
29810: GO 29841
// AddComMoveXY ( i , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29812: LD_VAR 0 1
29816: PPUSH
29817: LD_EXP 61
29821: PPUSH
29822: CALL_OW 250
29826: PPUSH
29827: LD_EXP 61
29831: PPUSH
29832: CALL_OW 251
29836: PPUSH
29837: CALL_OW 171
// end ;
29841: GO 29685
29843: POP
29844: POP
// wait ( 0 0$1 ) ;
29845: LD_INT 35
29847: PPUSH
29848: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
29852: LD_INT 22
29854: PUSH
29855: LD_INT 3
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 21
29864: PUSH
29865: LD_INT 1
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PPUSH
29876: CALL_OW 69
29880: PPUSH
29881: LD_EXP 63
29885: PPUSH
29886: CALL_OW 250
29890: PPUSH
29891: LD_EXP 63
29895: PPUSH
29896: CALL_OW 251
29900: PPUSH
29901: CALL_OW 111
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
29905: LD_INT 22
29907: PUSH
29908: LD_INT 3
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 21
29917: PUSH
29918: LD_INT 1
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PPUSH
29929: CALL_OW 69
29933: PPUSH
29934: LD_EXP 63
29938: PPUSH
29939: CALL_OW 250
29943: PPUSH
29944: LD_EXP 63
29948: PPUSH
29949: CALL_OW 251
29953: PPUSH
29954: CALL_OW 111
// ComMoveXY ( IsInUnit ( Burlak ) , GetX ( Popov ) , GetY ( Popov ) ) ;
29958: LD_EXP 50
29962: PPUSH
29963: CALL_OW 310
29967: PPUSH
29968: LD_EXP 63
29972: PPUSH
29973: CALL_OW 250
29977: PPUSH
29978: LD_EXP 63
29982: PPUSH
29983: CALL_OW 251
29987: PPUSH
29988: CALL_OW 111
// if IsInUnit ( Burlak ) then
29992: LD_EXP 50
29996: PPUSH
29997: CALL_OW 310
30001: IFFALSE 30019
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) else
30003: LD_EXP 50
30007: PPUSH
30008: CALL_OW 310
30012: PPUSH
30013: CALL_OW 87
30017: GO 30028
// CenterNowOnUnits ( Burlak ) ;
30019: LD_EXP 50
30023: PPUSH
30024: CALL_OW 87
// wait ( 0 0$1 ) ;
30028: LD_INT 35
30030: PPUSH
30031: CALL_OW 67
// until GetDistUnits ( Burlak , Popov ) < 8 or ( IsInUnit ( Burlak ) < 8 and IsInUnit ( Burlak ) ) ;
30035: LD_EXP 50
30039: PPUSH
30040: LD_EXP 63
30044: PPUSH
30045: CALL_OW 296
30049: PUSH
30050: LD_INT 8
30052: LESS
30053: PUSH
30054: LD_EXP 50
30058: PPUSH
30059: CALL_OW 310
30063: PUSH
30064: LD_INT 8
30066: LESS
30067: PUSH
30068: LD_EXP 50
30072: PPUSH
30073: CALL_OW 310
30077: AND
30078: OR
30079: IFFALSE 29905
// if IsInUnit ( Burlak ) then
30081: LD_EXP 50
30085: PPUSH
30086: CALL_OW 310
30090: IFFALSE 30108
// begin ComExitVehicle ( Burlak ) ;
30092: LD_EXP 50
30096: PPUSH
30097: CALL_OW 121
// wait ( 0 0$1 ) ;
30101: LD_INT 35
30103: PPUSH
30104: CALL_OW 67
// end ; CenterNowOnUnits ( [ Burlak , Popov ] ) ;
30108: LD_EXP 50
30112: PUSH
30113: LD_EXP 63
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PPUSH
30122: CALL_OW 87
// ComTurnUnit ( Burlak , Popov ) ;
30126: LD_EXP 50
30130: PPUSH
30131: LD_EXP 63
30135: PPUSH
30136: CALL_OW 119
// ComTurnUnit ( Popov , Burlak ) ;
30140: LD_EXP 63
30144: PPUSH
30145: LD_EXP 50
30149: PPUSH
30150: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
30154: LD_EXP 50
30158: PPUSH
30159: LD_STRING D10a-Bur-1
30161: PPUSH
30162: CALL_OW 88
// Say ( Popov , D10a-Pop-1 ) ;
30166: LD_EXP 63
30170: PPUSH
30171: LD_STRING D10a-Pop-1
30173: PPUSH
30174: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
30178: LD_EXP 50
30182: PPUSH
30183: LD_STRING D10a-Bur-2
30185: PPUSH
30186: CALL_OW 88
// Say ( Popov , D10a-Pop-2 ) ;
30190: LD_EXP 63
30194: PPUSH
30195: LD_STRING D10a-Pop-2
30197: PPUSH
30198: CALL_OW 88
// Say ( Burlak , D10a-Bur-3 ) ;
30202: LD_EXP 50
30206: PPUSH
30207: LD_STRING D10a-Bur-3
30209: PPUSH
30210: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
30214: LD_EXP 63
30218: PPUSH
30219: LD_STRING D10a-Pop-3
30221: PPUSH
30222: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
30226: LD_EXP 50
30230: PPUSH
30231: LD_STRING D10a-Bur-4
30233: PPUSH
30234: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
30238: LD_EXP 63
30242: PPUSH
30243: LD_STRING D10a-Pop-4
30245: PPUSH
30246: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
30250: LD_EXP 50
30254: PPUSH
30255: LD_STRING D10a-Bur-5
30257: PPUSH
30258: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
30262: LD_EXP 63
30266: PPUSH
30267: LD_STRING D10a-Pop-5
30269: PPUSH
30270: CALL_OW 88
// survivorsArabianAttack = [ ] ;
30274: LD_ADDR_EXP 80
30278: PUSH
30279: EMPTY
30280: ST_TO_ADDR
// survivorsArabianAttack = FilterAllUnits ( [ [ f_side , 6 ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
30281: LD_ADDR_EXP 80
30285: PUSH
30286: LD_INT 22
30288: PUSH
30289: LD_INT 6
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 50
30298: PUSH
30299: EMPTY
30300: LIST
30301: PUSH
30302: LD_INT 21
30304: PUSH
30305: LD_INT 1
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: LIST
30316: PPUSH
30317: CALL_OW 69
30321: ST_TO_ADDR
// emptyVehicles = [ ] ;
30322: LD_ADDR_VAR 0 9
30326: PUSH
30327: EMPTY
30328: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) do
30329: LD_ADDR_VAR 0 1
30333: PUSH
30334: LD_INT 22
30336: PUSH
30337: LD_INT 3
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 21
30346: PUSH
30347: LD_INT 2
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 50
30356: PUSH
30357: EMPTY
30358: LIST
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: LIST
30364: PPUSH
30365: CALL_OW 69
30369: PUSH
30370: FOR_IN
30371: IFFALSE 30406
// if GetFuel ( i ) >= 50 then
30373: LD_VAR 0 1
30377: PPUSH
30378: CALL_OW 261
30382: PUSH
30383: LD_INT 50
30385: GREATEREQUAL
30386: IFFALSE 30404
// emptyVehicles = emptyVehicles ^ i ;
30388: LD_ADDR_VAR 0 9
30392: PUSH
30393: LD_VAR 0 9
30397: PUSH
30398: LD_VAR 0 1
30402: ADD
30403: ST_TO_ADDR
30404: GO 30370
30406: POP
30407: POP
// if emptyVehicles then
30408: LD_VAR 0 9
30412: IFFALSE 30605
// for i = 1 to emptyVehicles do
30414: LD_ADDR_VAR 0 1
30418: PUSH
30419: DOUBLE
30420: LD_INT 1
30422: DEC
30423: ST_TO_ADDR
30424: LD_VAR 0 9
30428: PUSH
30429: FOR_TO
30430: IFFALSE 30603
// begin AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) [ i ] , emptyVehicles [ i ] ) ;
30432: LD_INT 22
30434: PUSH
30435: LD_INT 3
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 21
30444: PUSH
30445: LD_INT 1
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 3
30454: PUSH
30455: LD_INT 60
30457: PUSH
30458: EMPTY
30459: LIST
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: LIST
30469: PPUSH
30470: CALL_OW 69
30474: PUSH
30475: LD_VAR 0 1
30479: ARRAY
30480: PPUSH
30481: LD_VAR 0 9
30485: PUSH
30486: LD_VAR 0 1
30490: ARRAY
30491: PPUSH
30492: CALL_OW 180
// if GetFuel ( emptyVehicles [ i ] ) >= 65 then
30496: LD_VAR 0 9
30500: PUSH
30501: LD_VAR 0 1
30505: ARRAY
30506: PPUSH
30507: CALL_OW 261
30511: PUSH
30512: LD_INT 65
30514: GREATEREQUAL
30515: IFFALSE 30601
// vehiclesToSave = vehiclesToSave ^ [ [ GetChassis ( emptyVehicles [ i ] ) , GetEngine ( emptyVehicles [ i ] ) , GetControl ( emptyVehicles [ i ] ) , GetWeapon ( emptyVehicles [ i ] ) ] ] ;
30517: LD_ADDR_EXP 7
30521: PUSH
30522: LD_EXP 7
30526: PUSH
30527: LD_VAR 0 9
30531: PUSH
30532: LD_VAR 0 1
30536: ARRAY
30537: PPUSH
30538: CALL_OW 265
30542: PUSH
30543: LD_VAR 0 9
30547: PUSH
30548: LD_VAR 0 1
30552: ARRAY
30553: PPUSH
30554: CALL_OW 262
30558: PUSH
30559: LD_VAR 0 9
30563: PUSH
30564: LD_VAR 0 1
30568: ARRAY
30569: PPUSH
30570: CALL_OW 263
30574: PUSH
30575: LD_VAR 0 9
30579: PUSH
30580: LD_VAR 0 1
30584: ARRAY
30585: PPUSH
30586: CALL_OW 264
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: PUSH
30597: EMPTY
30598: LIST
30599: ADD
30600: ST_TO_ADDR
// end ;
30601: GO 30429
30603: POP
30604: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) do
30605: LD_ADDR_VAR 0 1
30609: PUSH
30610: LD_INT 22
30612: PUSH
30613: LD_INT 6
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 21
30622: PUSH
30623: LD_INT 2
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 50
30632: PUSH
30633: EMPTY
30634: LIST
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: LIST
30640: PPUSH
30641: CALL_OW 69
30645: PUSH
30646: FOR_IN
30647: IFFALSE 30726
// if GetFuel ( i ) >= 65 then
30649: LD_VAR 0 1
30653: PPUSH
30654: CALL_OW 261
30658: PUSH
30659: LD_INT 65
30661: GREATEREQUAL
30662: IFFALSE 30724
// vehiclesToSave = vehiclesToSave ^ [ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
30664: LD_ADDR_EXP 7
30668: PUSH
30669: LD_EXP 7
30673: PUSH
30674: LD_VAR 0 1
30678: PPUSH
30679: CALL_OW 265
30683: PUSH
30684: LD_VAR 0 1
30688: PPUSH
30689: CALL_OW 262
30693: PUSH
30694: LD_VAR 0 1
30698: PPUSH
30699: CALL_OW 263
30703: PUSH
30704: LD_VAR 0 1
30708: PPUSH
30709: CALL_OW 264
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: PUSH
30720: EMPTY
30721: LIST
30722: ADD
30723: ST_TO_ADDR
30724: GO 30646
30726: POP
30727: POP
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , 83 , 157 ) ;
30728: LD_INT 22
30730: PUSH
30731: LD_INT 3
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 2
30740: PUSH
30741: LD_INT 21
30743: PUSH
30744: LD_INT 1
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 21
30753: PUSH
30754: LD_INT 2
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: LIST
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PPUSH
30770: CALL_OW 69
30774: PPUSH
30775: LD_INT 83
30777: PPUSH
30778: LD_INT 157
30780: PPUSH
30781: CALL_OW 171
// AddComMoveXY ( survivorsArabianAttack , 83 , 157 ) ;
30785: LD_EXP 80
30789: PPUSH
30790: LD_INT 83
30792: PPUSH
30793: LD_INT 157
30795: PPUSH
30796: CALL_OW 171
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) , 83 , 157 ) ;
30800: LD_INT 22
30802: PUSH
30803: LD_INT 6
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 21
30812: PUSH
30813: LD_INT 2
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PPUSH
30824: CALL_OW 69
30828: PPUSH
30829: LD_INT 83
30831: PPUSH
30832: LD_INT 157
30834: PPUSH
30835: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
30839: LD_EXP 50
30843: PPUSH
30844: CALL_OW 87
// wait ( 0 0$1 ) ;
30848: LD_INT 35
30850: PPUSH
30851: CALL_OW 67
// until GetDistUnits ( Burlak , beriaDepot ) > 23 ;
30855: LD_EXP 50
30859: PPUSH
30860: LD_EXP 61
30864: PPUSH
30865: CALL_OW 296
30869: PUSH
30870: LD_INT 23
30872: GREATER
30873: IFFALSE 30800
// PlaceSeeing ( 113 , 96 , 3 , - 12 ) ;
30875: LD_INT 113
30877: PPUSH
30878: LD_INT 96
30880: PPUSH
30881: LD_INT 3
30883: PPUSH
30884: LD_INT 12
30886: NEG
30887: PPUSH
30888: CALL_OW 330
// CenterNowOnXY ( 113 , 96 ) ;
30892: LD_INT 113
30894: PPUSH
30895: LD_INT 96
30897: PPUSH
30898: CALL_OW 86
// canDestroyBeriaBase = true ;
30902: LD_ADDR_EXP 29
30906: PUSH
30907: LD_INT 1
30909: ST_TO_ADDR
// beriaBuildings = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
30910: LD_ADDR_VAR 0 5
30914: PUSH
30915: LD_INT 25
30917: PPUSH
30918: LD_INT 22
30920: PUSH
30921: LD_INT 3
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 21
30930: PUSH
30931: LD_INT 3
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PPUSH
30942: CALL_OW 70
30946: ST_TO_ADDR
// for i = 1 to beriaBuildings do
30947: LD_ADDR_VAR 0 1
30951: PUSH
30952: DOUBLE
30953: LD_INT 1
30955: DEC
30956: ST_TO_ADDR
30957: LD_VAR 0 5
30961: PUSH
30962: FOR_TO
30963: IFFALSE 31045
// begin nearBuilding = NearestUnitToUnit ( beriaBuildings , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
30965: LD_ADDR_VAR 0 6
30969: PUSH
30970: LD_VAR 0 5
30974: PPUSH
30975: LD_INT 22
30977: PUSH
30978: LD_INT 2
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PPUSH
30985: CALL_OW 69
30989: PUSH
30990: LD_INT 1
30992: ARRAY
30993: PPUSH
30994: CALL_OW 74
30998: ST_TO_ADDR
// beriaBuildings = beriaBuildings diff nearBuilding ;
30999: LD_ADDR_VAR 0 5
31003: PUSH
31004: LD_VAR 0 5
31008: PUSH
31009: LD_VAR 0 6
31013: DIFF
31014: ST_TO_ADDR
// AddComAttackUnit ( northGroup , nearBuilding ) ;
31015: LD_EXP 88
31019: PPUSH
31020: LD_VAR 0 6
31024: PPUSH
31025: CALL_OW 175
// AddComAttackUnit ( southGroup , nearBuilding ) ;
31029: LD_EXP 89
31033: PPUSH
31034: LD_VAR 0 6
31038: PPUSH
31039: CALL_OW 175
// end ;
31043: GO 30962
31045: POP
31046: POP
// wait ( 0 0$35 ) ;
31047: LD_INT 1225
31049: PPUSH
31050: CALL_OW 67
// FinishMission ;
31054: CALL 20244 0 0
// end ;
31058: PPOPN 9
31060: END
// every 1 trigger immortalSurvivors do var unit ;
31061: LD_EXP 28
31065: IFFALSE 31103
31067: GO 31069
31069: DISABLE
31070: LD_INT 0
31072: PPUSH
// begin enable ;
31073: ENABLE
// for unit in survivorsArabianAttack do
31074: LD_ADDR_VAR 0 1
31078: PUSH
31079: LD_EXP 80
31083: PUSH
31084: FOR_IN
31085: IFFALSE 31101
// SetLives ( unit , 1000 ) ;
31087: LD_VAR 0 1
31091: PPUSH
31092: LD_INT 1000
31094: PPUSH
31095: CALL_OW 234
31099: GO 31084
31101: POP
31102: POP
// end ; end_of_file
31103: PPOPN 1
31105: END
// every 0 0$30 do
31106: GO 31108
31108: DISABLE
// CreateCratesXYR ( rand ( 3 , 5 ) , 76 , 111 , 5 , true ) ;
31109: LD_INT 3
31111: PPUSH
31112: LD_INT 5
31114: PPUSH
31115: CALL_OW 12
31119: PPUSH
31120: LD_INT 76
31122: PPUSH
31123: LD_INT 111
31125: PPUSH
31126: LD_INT 5
31128: PPUSH
31129: LD_INT 1
31131: PPUSH
31132: CALL_OW 56
31136: END
// every 0 0$10 trigger spawnCrates do var spawnDelay ;
31137: LD_EXP 8
31141: IFFALSE 31213
31143: GO 31145
31145: DISABLE
31146: LD_INT 0
31148: PPUSH
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
31149: LD_INT 50
31151: PPUSH
31152: LD_INT 4200
31154: PPUSH
31155: CALL_OW 12
31159: PPUSH
31160: CALL_OW 67
// wait ( spawnDelay * 0 0$5 ) ;
31164: LD_VAR 0 1
31168: PUSH
31169: LD_INT 175
31171: MUL
31172: PPUSH
31173: CALL_OW 67
// spawnDelay = spawnDelay + 1 ;
31177: LD_ADDR_VAR 0 1
31181: PUSH
31182: LD_VAR 0 1
31186: PUSH
31187: LD_INT 1
31189: PLUS
31190: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
31191: LD_INT 3
31193: PPUSH
31194: LD_INT 5
31196: PPUSH
31197: CALL_OW 12
31201: PPUSH
31202: LD_INT 6
31204: PPUSH
31205: LD_INT 1
31207: PPUSH
31208: CALL_OW 55
// enable ;
31212: ENABLE
// end ; end_of_file
31213: PPOPN 1
31215: END
// export counterEnable , counterIndex ; every 0 0$1 trigger counterEnable do
31216: LD_EXP 90
31220: IFFALSE 31383
31222: GO 31224
31224: DISABLE
// begin enable ;
31225: ENABLE
// case counterIndex of 1 :
31226: LD_EXP 91
31230: PUSH
31231: LD_INT 1
31233: DOUBLE
31234: EQUAL
31235: IFTRUE 31239
31237: GO 31256
31239: POP
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ; 2 :
31240: LD_ADDR_EXP 41
31244: PUSH
31245: LD_EXP 41
31249: PUSH
31250: LD_INT 35
31252: MINUS
31253: ST_TO_ADDR
31254: GO 31383
31256: LD_INT 2
31258: DOUBLE
31259: EQUAL
31260: IFTRUE 31264
31262: GO 31298
31264: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
31265: LD_ADDR_OWVAR 47
31269: PUSH
31270: LD_STRING #Ru03-1
31272: PUSH
31273: LD_EXP 18
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
31282: LD_ADDR_EXP 18
31286: PUSH
31287: LD_EXP 18
31291: PUSH
31292: LD_INT 35
31294: MINUS
31295: ST_TO_ADDR
// end ; 3 :
31296: GO 31383
31298: LD_INT 3
31300: DOUBLE
31301: EQUAL
31302: IFTRUE 31306
31304: GO 31340
31306: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
31307: LD_ADDR_OWVAR 47
31311: PUSH
31312: LD_STRING #Ru03-2
31314: PUSH
31315: LD_EXP 18
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
31324: LD_ADDR_EXP 18
31328: PUSH
31329: LD_EXP 18
31333: PUSH
31334: LD_INT 35
31336: MINUS
31337: ST_TO_ADDR
// end ; 4 :
31338: GO 31383
31340: LD_INT 4
31342: DOUBLE
31343: EQUAL
31344: IFTRUE 31348
31346: GO 31382
31348: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
31349: LD_ADDR_OWVAR 47
31353: PUSH
31354: LD_STRING #Ru03-3
31356: PUSH
31357: LD_EXP 17
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
31366: LD_ADDR_EXP 17
31370: PUSH
31371: LD_EXP 17
31375: PUSH
31376: LD_INT 35
31378: MINUS
31379: ST_TO_ADDR
// end ; end ;
31380: GO 31383
31382: POP
// end ; end_of_file
31383: END
// every 7 7$0 do
31384: GO 31386
31386: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 0 , NorthAmericanSpawnArea ) ;
31387: LD_INT 3
31389: PPUSH
31390: LD_INT 1
31392: PPUSH
31393: LD_INT 0
31395: PPUSH
31396: LD_INT 7
31398: PPUSH
31399: CALL 5939 0 4
31403: END
// every 12 12$0 do
31404: GO 31406
31406: DISABLE
// PrepareAmericanSupportTroops ( 2 , 2 , 1 , [ SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
31407: LD_INT 2
31409: PPUSH
31410: LD_INT 2
31412: PPUSH
31413: LD_INT 1
31415: PPUSH
31416: LD_INT 9
31418: PUSH
31419: LD_INT 8
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 1
31428: PPUSH
31429: LD_INT 2
31431: PPUSH
31432: CALL_OW 12
31436: ARRAY
31437: PPUSH
31438: CALL 5939 0 4
31442: END
// every 20 20$0 do
31443: GO 31445
31445: DISABLE
// PrepareAmericanSupportTroops ( 4 , 2 , 0 , NorthAmericanSpawnArea ) ;
31446: LD_INT 4
31448: PPUSH
31449: LD_INT 2
31451: PPUSH
31452: LD_INT 0
31454: PPUSH
31455: LD_INT 7
31457: PPUSH
31458: CALL 5939 0 4
31462: END
// every 23 23$0 do
31463: GO 31465
31465: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 2 , [ SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ; end_of_file
31466: LD_INT 3
31468: PPUSH
31469: LD_INT 1
31471: PPUSH
31472: LD_INT 2
31474: PPUSH
31475: LD_INT 9
31477: PUSH
31478: LD_INT 8
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 1
31487: PPUSH
31488: LD_INT 2
31490: PPUSH
31491: CALL_OW 12
31495: ARRAY
31496: PPUSH
31497: CALL 5939 0 4
31501: END
// export function Nef_PrepareNature ; var i , un ; begin
31502: LD_INT 0
31504: PPUSH
31505: PPUSH
31506: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
31507: LD_ADDR_VAR 0 2
31511: PUSH
31512: DOUBLE
31513: LD_INT 1
31515: DEC
31516: ST_TO_ADDR
31517: LD_EXP 33
31521: PUSH
31522: LD_INT 1
31524: ARRAY
31525: PUSH
31526: FOR_TO
31527: IFFALSE 31637
// begin uc_side = 0 ;
31529: LD_ADDR_OWVAR 20
31533: PUSH
31534: LD_INT 0
31536: ST_TO_ADDR
// uc_nation = nation_nature ;
31537: LD_ADDR_OWVAR 21
31541: PUSH
31542: LD_INT 0
31544: ST_TO_ADDR
// hc_class = class_apeman ;
31545: LD_ADDR_OWVAR 28
31549: PUSH
31550: LD_INT 12
31552: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
31553: LD_ADDR_OWVAR 31
31557: PUSH
31558: LD_EXP 34
31562: PUSH
31563: LD_INT 1
31565: ARRAY
31566: PUSH
31567: LD_EXP 34
31571: PUSH
31572: LD_INT 2
31574: ARRAY
31575: PUSH
31576: LD_EXP 34
31580: PUSH
31581: LD_INT 3
31583: ARRAY
31584: PUSH
31585: LD_EXP 34
31589: PUSH
31590: LD_INT 4
31592: ARRAY
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
31600: LD_ADDR_OWVAR 35
31604: PUSH
31605: LD_EXP 35
31609: ST_TO_ADDR
// un = CreateHuman ;
31610: LD_ADDR_VAR 0 3
31614: PUSH
31615: CALL_OW 44
31619: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
31620: LD_VAR 0 3
31624: PPUSH
31625: LD_INT 27
31627: PPUSH
31628: LD_INT 0
31630: PPUSH
31631: CALL_OW 49
// end ;
31635: GO 31526
31637: POP
31638: POP
// for i := 1 to animalsAmount [ 2 ] do
31639: LD_ADDR_VAR 0 2
31643: PUSH
31644: DOUBLE
31645: LD_INT 1
31647: DEC
31648: ST_TO_ADDR
31649: LD_EXP 33
31653: PUSH
31654: LD_INT 2
31656: ARRAY
31657: PUSH
31658: FOR_TO
31659: IFFALSE 31769
// begin uc_side = 0 ;
31661: LD_ADDR_OWVAR 20
31665: PUSH
31666: LD_INT 0
31668: ST_TO_ADDR
// uc_nation = nation_nature ;
31669: LD_ADDR_OWVAR 21
31673: PUSH
31674: LD_INT 0
31676: ST_TO_ADDR
// hc_class = class_phororhacos ;
31677: LD_ADDR_OWVAR 28
31681: PUSH
31682: LD_INT 18
31684: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
31685: LD_ADDR_OWVAR 31
31689: PUSH
31690: LD_EXP 34
31694: PUSH
31695: LD_INT 1
31697: ARRAY
31698: PUSH
31699: LD_EXP 34
31703: PUSH
31704: LD_INT 2
31706: ARRAY
31707: PUSH
31708: LD_EXP 34
31712: PUSH
31713: LD_INT 3
31715: ARRAY
31716: PUSH
31717: LD_EXP 34
31721: PUSH
31722: LD_INT 4
31724: ARRAY
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
31732: LD_ADDR_OWVAR 35
31736: PUSH
31737: LD_EXP 35
31741: ST_TO_ADDR
// un = CreateHuman ;
31742: LD_ADDR_VAR 0 3
31746: PUSH
31747: CALL_OW 44
31751: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
31752: LD_VAR 0 3
31756: PPUSH
31757: LD_INT 27
31759: PPUSH
31760: LD_INT 0
31762: PPUSH
31763: CALL_OW 49
// end ;
31767: GO 31658
31769: POP
31770: POP
// for i := 1 to animalsAmount [ 3 ] do
31771: LD_ADDR_VAR 0 2
31775: PUSH
31776: DOUBLE
31777: LD_INT 1
31779: DEC
31780: ST_TO_ADDR
31781: LD_EXP 33
31785: PUSH
31786: LD_INT 3
31788: ARRAY
31789: PUSH
31790: FOR_TO
31791: IFFALSE 31901
// begin uc_side = 0 ;
31793: LD_ADDR_OWVAR 20
31797: PUSH
31798: LD_INT 0
31800: ST_TO_ADDR
// uc_nation = nation_nature ;
31801: LD_ADDR_OWVAR 21
31805: PUSH
31806: LD_INT 0
31808: ST_TO_ADDR
// hc_class = class_tiger ;
31809: LD_ADDR_OWVAR 28
31813: PUSH
31814: LD_INT 14
31816: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
31817: LD_ADDR_OWVAR 31
31821: PUSH
31822: LD_EXP 34
31826: PUSH
31827: LD_INT 1
31829: ARRAY
31830: PUSH
31831: LD_EXP 34
31835: PUSH
31836: LD_INT 2
31838: ARRAY
31839: PUSH
31840: LD_EXP 34
31844: PUSH
31845: LD_INT 3
31847: ARRAY
31848: PUSH
31849: LD_EXP 34
31853: PUSH
31854: LD_INT 4
31856: ARRAY
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
31864: LD_ADDR_OWVAR 35
31868: PUSH
31869: LD_EXP 35
31873: ST_TO_ADDR
// un = CreateHuman ;
31874: LD_ADDR_VAR 0 3
31878: PUSH
31879: CALL_OW 44
31883: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
31884: LD_VAR 0 3
31888: PPUSH
31889: LD_INT 27
31891: PPUSH
31892: LD_INT 0
31894: PPUSH
31895: CALL_OW 49
// end ;
31899: GO 31790
31901: POP
31902: POP
// for i := 1 to animalsAmount [ 4 ] do
31903: LD_ADDR_VAR 0 2
31907: PUSH
31908: DOUBLE
31909: LD_INT 1
31911: DEC
31912: ST_TO_ADDR
31913: LD_EXP 33
31917: PUSH
31918: LD_INT 4
31920: ARRAY
31921: PUSH
31922: FOR_TO
31923: IFFALSE 32033
// begin uc_side = 0 ;
31925: LD_ADDR_OWVAR 20
31929: PUSH
31930: LD_INT 0
31932: ST_TO_ADDR
// uc_nation = nation_nature ;
31933: LD_ADDR_OWVAR 21
31937: PUSH
31938: LD_INT 0
31940: ST_TO_ADDR
// hc_class = 21 ;
31941: LD_ADDR_OWVAR 28
31945: PUSH
31946: LD_INT 21
31948: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
31949: LD_ADDR_OWVAR 31
31953: PUSH
31954: LD_EXP 34
31958: PUSH
31959: LD_INT 1
31961: ARRAY
31962: PUSH
31963: LD_EXP 34
31967: PUSH
31968: LD_INT 2
31970: ARRAY
31971: PUSH
31972: LD_EXP 34
31976: PUSH
31977: LD_INT 3
31979: ARRAY
31980: PUSH
31981: LD_EXP 34
31985: PUSH
31986: LD_INT 4
31988: ARRAY
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
31996: LD_ADDR_OWVAR 35
32000: PUSH
32001: LD_EXP 35
32005: ST_TO_ADDR
// un = CreateHuman ;
32006: LD_ADDR_VAR 0 3
32010: PUSH
32011: CALL_OW 44
32015: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
32016: LD_VAR 0 3
32020: PPUSH
32021: LD_INT 27
32023: PPUSH
32024: LD_INT 0
32026: PPUSH
32027: CALL_OW 49
// end ;
32031: GO 31922
32033: POP
32034: POP
// for i := 1 to animalsAmount [ 5 ] do
32035: LD_ADDR_VAR 0 2
32039: PUSH
32040: DOUBLE
32041: LD_INT 1
32043: DEC
32044: ST_TO_ADDR
32045: LD_EXP 33
32049: PUSH
32050: LD_INT 5
32052: ARRAY
32053: PUSH
32054: FOR_TO
32055: IFFALSE 32116
// begin uc_side = 0 ;
32057: LD_ADDR_OWVAR 20
32061: PUSH
32062: LD_INT 0
32064: ST_TO_ADDR
// uc_nation = nation_nature ;
32065: LD_ADDR_OWVAR 21
32069: PUSH
32070: LD_INT 0
32072: ST_TO_ADDR
// vc_chassis := 31 ;
32073: LD_ADDR_OWVAR 37
32077: PUSH
32078: LD_INT 31
32080: ST_TO_ADDR
// vc_control := control_rider ;
32081: LD_ADDR_OWVAR 38
32085: PUSH
32086: LD_INT 4
32088: ST_TO_ADDR
// un := CreateVehicle ;
32089: LD_ADDR_VAR 0 3
32093: PUSH
32094: CALL_OW 45
32098: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
32099: LD_VAR 0 3
32103: PPUSH
32104: LD_INT 27
32106: PPUSH
32107: LD_INT 0
32109: PPUSH
32110: CALL_OW 49
// end ;
32114: GO 32054
32116: POP
32117: POP
// end ; end_of_file
32118: LD_VAR 0 1
32122: RET
// every 1 trigger scholtzeSaved do
32123: LD_EXP 10
32127: IFFALSE 32139
32129: GO 32131
32131: DISABLE
// SetAchievement ( ACH_PROFESSOR ) ;
32132: LD_STRING ACH_PROFESSOR
32134: PPUSH
32135: CALL_OW 543
32139: END
// every 1 trigger IsDead ( Sikorski ) do
32140: LD_INT 290
32142: PPUSH
32143: CALL_OW 301
32147: IFFALSE 32159
32149: GO 32151
32151: DISABLE
// SetAchievement ( ACH_SIKORSKI ) ;
32152: LD_STRING ACH_SIKORSKI
32154: PPUSH
32155: CALL_OW 543
32159: END
// every 1 trigger not americanTroopsArriveOmicronCounter and not canExitBattlefield do
32160: LD_EXP 15
32164: NOT
32165: PUSH
32166: LD_EXP 27
32170: NOT
32171: AND
32172: IFFALSE 32184
32174: GO 32176
32176: DISABLE
// SetAchievement ( ACH_REINFORCE ) ; end_of_file
32177: LD_STRING ACH_REINFORCE
32179: PPUSH
32180: CALL_OW 543
32184: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
32185: LD_INT 0
32187: PPUSH
// ar_miner := 81 ;
32188: LD_ADDR_EXP 99
32192: PUSH
32193: LD_INT 81
32195: ST_TO_ADDR
// ar_crane := 88 ;
32196: LD_ADDR_EXP 98
32200: PUSH
32201: LD_INT 88
32203: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
32204: LD_ADDR_EXP 93
32208: PUSH
32209: LD_INT 89
32211: ST_TO_ADDR
// us_hack := 99 ;
32212: LD_ADDR_EXP 94
32216: PUSH
32217: LD_INT 99
32219: ST_TO_ADDR
// us_artillery := 97 ;
32220: LD_ADDR_EXP 95
32224: PUSH
32225: LD_INT 97
32227: ST_TO_ADDR
// ar_bio_bomb := 91 ;
32228: LD_ADDR_EXP 96
32232: PUSH
32233: LD_INT 91
32235: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
32236: LD_ADDR_EXP 97
32240: PUSH
32241: LD_INT 92
32243: ST_TO_ADDR
// ru_radar := 98 ;
32244: LD_ADDR_EXP 92
32248: PUSH
32249: LD_INT 98
32251: ST_TO_ADDR
// tech_Artillery := 80 ;
32252: LD_ADDR_EXP 100
32256: PUSH
32257: LD_INT 80
32259: ST_TO_ADDR
// tech_RadMat := 81 ;
32260: LD_ADDR_EXP 101
32264: PUSH
32265: LD_INT 81
32267: ST_TO_ADDR
// tech_BasicTools := 82 ;
32268: LD_ADDR_EXP 102
32272: PUSH
32273: LD_INT 82
32275: ST_TO_ADDR
// tech_Cargo := 83 ;
32276: LD_ADDR_EXP 103
32280: PUSH
32281: LD_INT 83
32283: ST_TO_ADDR
// tech_Track := 84 ;
32284: LD_ADDR_EXP 104
32288: PUSH
32289: LD_INT 84
32291: ST_TO_ADDR
// tech_Crane := 85 ;
32292: LD_ADDR_EXP 105
32296: PUSH
32297: LD_INT 85
32299: ST_TO_ADDR
// tech_Bulldozer := 86 ;
32300: LD_ADDR_EXP 106
32304: PUSH
32305: LD_INT 86
32307: ST_TO_ADDR
// tech_Hovercraft := 87 ;
32308: LD_ADDR_EXP 107
32312: PUSH
32313: LD_INT 87
32315: ST_TO_ADDR
// end ;
32316: LD_VAR 0 1
32320: RET
// every 1 do
32321: GO 32323
32323: DISABLE
// InitGlobalVariables ; end_of_file
32324: CALL 32185 0 0
32328: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32329: LD_INT 0
32331: PPUSH
32332: PPUSH
// if exist_mode then
32333: LD_VAR 0 2
32337: IFFALSE 32362
// unit := CreateCharacter ( prefix & ident ) else
32339: LD_ADDR_VAR 0 5
32343: PUSH
32344: LD_VAR 0 3
32348: PUSH
32349: LD_VAR 0 1
32353: STR
32354: PPUSH
32355: CALL_OW 34
32359: ST_TO_ADDR
32360: GO 32377
// unit := NewCharacter ( ident ) ;
32362: LD_ADDR_VAR 0 5
32366: PUSH
32367: LD_VAR 0 1
32371: PPUSH
32372: CALL_OW 25
32376: ST_TO_ADDR
// result := unit ;
32377: LD_ADDR_VAR 0 4
32381: PUSH
32382: LD_VAR 0 5
32386: ST_TO_ADDR
// end ;
32387: LD_VAR 0 4
32391: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32392: LD_INT 0
32394: PPUSH
32395: PPUSH
// if not side or not nation then
32396: LD_VAR 0 1
32400: NOT
32401: PUSH
32402: LD_VAR 0 2
32406: NOT
32407: OR
32408: IFFALSE 32412
// exit ;
32410: GO 33176
// case nation of nation_american :
32412: LD_VAR 0 2
32416: PUSH
32417: LD_INT 1
32419: DOUBLE
32420: EQUAL
32421: IFTRUE 32425
32423: GO 32639
32425: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32426: LD_ADDR_VAR 0 4
32430: PUSH
32431: LD_INT 35
32433: PUSH
32434: LD_INT 45
32436: PUSH
32437: LD_INT 46
32439: PUSH
32440: LD_INT 47
32442: PUSH
32443: LD_INT 82
32445: PUSH
32446: LD_INT 83
32448: PUSH
32449: LD_INT 84
32451: PUSH
32452: LD_INT 85
32454: PUSH
32455: LD_INT 86
32457: PUSH
32458: LD_INT 1
32460: PUSH
32461: LD_INT 2
32463: PUSH
32464: LD_INT 6
32466: PUSH
32467: LD_INT 15
32469: PUSH
32470: LD_INT 16
32472: PUSH
32473: LD_INT 7
32475: PUSH
32476: LD_INT 12
32478: PUSH
32479: LD_INT 13
32481: PUSH
32482: LD_INT 10
32484: PUSH
32485: LD_INT 14
32487: PUSH
32488: LD_INT 20
32490: PUSH
32491: LD_INT 21
32493: PUSH
32494: LD_INT 22
32496: PUSH
32497: LD_INT 25
32499: PUSH
32500: LD_INT 32
32502: PUSH
32503: LD_INT 27
32505: PUSH
32506: LD_INT 36
32508: PUSH
32509: LD_INT 69
32511: PUSH
32512: LD_INT 39
32514: PUSH
32515: LD_INT 34
32517: PUSH
32518: LD_INT 40
32520: PUSH
32521: LD_INT 48
32523: PUSH
32524: LD_INT 49
32526: PUSH
32527: LD_INT 50
32529: PUSH
32530: LD_INT 51
32532: PUSH
32533: LD_INT 52
32535: PUSH
32536: LD_INT 53
32538: PUSH
32539: LD_INT 54
32541: PUSH
32542: LD_INT 55
32544: PUSH
32545: LD_INT 56
32547: PUSH
32548: LD_INT 57
32550: PUSH
32551: LD_INT 58
32553: PUSH
32554: LD_INT 59
32556: PUSH
32557: LD_INT 60
32559: PUSH
32560: LD_INT 61
32562: PUSH
32563: LD_INT 62
32565: PUSH
32566: LD_INT 80
32568: PUSH
32569: LD_INT 82
32571: PUSH
32572: LD_INT 83
32574: PUSH
32575: LD_INT 84
32577: PUSH
32578: LD_INT 85
32580: PUSH
32581: LD_INT 86
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: ST_TO_ADDR
32637: GO 33100
32639: LD_INT 2
32641: DOUBLE
32642: EQUAL
32643: IFTRUE 32647
32645: GO 32869
32647: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
32648: LD_ADDR_VAR 0 4
32652: PUSH
32653: LD_INT 35
32655: PUSH
32656: LD_INT 45
32658: PUSH
32659: LD_INT 46
32661: PUSH
32662: LD_INT 47
32664: PUSH
32665: LD_INT 82
32667: PUSH
32668: LD_INT 83
32670: PUSH
32671: LD_INT 84
32673: PUSH
32674: LD_INT 85
32676: PUSH
32677: LD_INT 87
32679: PUSH
32680: LD_INT 70
32682: PUSH
32683: LD_INT 1
32685: PUSH
32686: LD_INT 11
32688: PUSH
32689: LD_INT 3
32691: PUSH
32692: LD_INT 4
32694: PUSH
32695: LD_INT 5
32697: PUSH
32698: LD_INT 6
32700: PUSH
32701: LD_INT 15
32703: PUSH
32704: LD_INT 18
32706: PUSH
32707: LD_INT 7
32709: PUSH
32710: LD_INT 17
32712: PUSH
32713: LD_INT 8
32715: PUSH
32716: LD_INT 20
32718: PUSH
32719: LD_INT 21
32721: PUSH
32722: LD_INT 22
32724: PUSH
32725: LD_INT 72
32727: PUSH
32728: LD_INT 26
32730: PUSH
32731: LD_INT 69
32733: PUSH
32734: LD_INT 39
32736: PUSH
32737: LD_INT 40
32739: PUSH
32740: LD_INT 41
32742: PUSH
32743: LD_INT 42
32745: PUSH
32746: LD_INT 43
32748: PUSH
32749: LD_INT 48
32751: PUSH
32752: LD_INT 49
32754: PUSH
32755: LD_INT 50
32757: PUSH
32758: LD_INT 51
32760: PUSH
32761: LD_INT 52
32763: PUSH
32764: LD_INT 53
32766: PUSH
32767: LD_INT 54
32769: PUSH
32770: LD_INT 55
32772: PUSH
32773: LD_INT 56
32775: PUSH
32776: LD_INT 60
32778: PUSH
32779: LD_INT 61
32781: PUSH
32782: LD_INT 62
32784: PUSH
32785: LD_INT 66
32787: PUSH
32788: LD_INT 67
32790: PUSH
32791: LD_INT 68
32793: PUSH
32794: LD_INT 81
32796: PUSH
32797: LD_INT 82
32799: PUSH
32800: LD_INT 83
32802: PUSH
32803: LD_INT 84
32805: PUSH
32806: LD_INT 85
32808: PUSH
32809: LD_INT 87
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: ST_TO_ADDR
32867: GO 33100
32869: LD_INT 3
32871: DOUBLE
32872: EQUAL
32873: IFTRUE 32877
32875: GO 33099
32877: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32878: LD_ADDR_VAR 0 4
32882: PUSH
32883: LD_INT 46
32885: PUSH
32886: LD_INT 47
32888: PUSH
32889: LD_INT 1
32891: PUSH
32892: LD_INT 2
32894: PUSH
32895: LD_INT 82
32897: PUSH
32898: LD_INT 83
32900: PUSH
32901: LD_INT 84
32903: PUSH
32904: LD_INT 85
32906: PUSH
32907: LD_INT 86
32909: PUSH
32910: LD_INT 11
32912: PUSH
32913: LD_INT 9
32915: PUSH
32916: LD_INT 20
32918: PUSH
32919: LD_INT 19
32921: PUSH
32922: LD_INT 21
32924: PUSH
32925: LD_INT 24
32927: PUSH
32928: LD_INT 22
32930: PUSH
32931: LD_INT 25
32933: PUSH
32934: LD_INT 28
32936: PUSH
32937: LD_INT 29
32939: PUSH
32940: LD_INT 30
32942: PUSH
32943: LD_INT 31
32945: PUSH
32946: LD_INT 37
32948: PUSH
32949: LD_INT 38
32951: PUSH
32952: LD_INT 32
32954: PUSH
32955: LD_INT 27
32957: PUSH
32958: LD_INT 33
32960: PUSH
32961: LD_INT 69
32963: PUSH
32964: LD_INT 39
32966: PUSH
32967: LD_INT 34
32969: PUSH
32970: LD_INT 40
32972: PUSH
32973: LD_INT 71
32975: PUSH
32976: LD_INT 23
32978: PUSH
32979: LD_INT 44
32981: PUSH
32982: LD_INT 48
32984: PUSH
32985: LD_INT 49
32987: PUSH
32988: LD_INT 50
32990: PUSH
32991: LD_INT 51
32993: PUSH
32994: LD_INT 52
32996: PUSH
32997: LD_INT 53
32999: PUSH
33000: LD_INT 54
33002: PUSH
33003: LD_INT 55
33005: PUSH
33006: LD_INT 56
33008: PUSH
33009: LD_INT 57
33011: PUSH
33012: LD_INT 58
33014: PUSH
33015: LD_INT 59
33017: PUSH
33018: LD_INT 63
33020: PUSH
33021: LD_INT 64
33023: PUSH
33024: LD_INT 65
33026: PUSH
33027: LD_INT 82
33029: PUSH
33030: LD_INT 83
33032: PUSH
33033: LD_INT 84
33035: PUSH
33036: LD_INT 85
33038: PUSH
33039: LD_INT 86
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: ST_TO_ADDR
33097: GO 33100
33099: POP
// if state > - 1 and state < 3 then
33100: LD_VAR 0 3
33104: PUSH
33105: LD_INT 1
33107: NEG
33108: GREATER
33109: PUSH
33110: LD_VAR 0 3
33114: PUSH
33115: LD_INT 3
33117: LESS
33118: AND
33119: IFFALSE 33176
// for i in result do
33121: LD_ADDR_VAR 0 5
33125: PUSH
33126: LD_VAR 0 4
33130: PUSH
33131: FOR_IN
33132: IFFALSE 33174
// if GetTech ( i , side ) <> state then
33134: LD_VAR 0 5
33138: PPUSH
33139: LD_VAR 0 1
33143: PPUSH
33144: CALL_OW 321
33148: PUSH
33149: LD_VAR 0 3
33153: NONEQUAL
33154: IFFALSE 33172
// result := result diff i ;
33156: LD_ADDR_VAR 0 4
33160: PUSH
33161: LD_VAR 0 4
33165: PUSH
33166: LD_VAR 0 5
33170: DIFF
33171: ST_TO_ADDR
33172: GO 33131
33174: POP
33175: POP
// end ;
33176: LD_VAR 0 4
33180: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33181: LD_INT 0
33183: PPUSH
33184: PPUSH
33185: PPUSH
// result := true ;
33186: LD_ADDR_VAR 0 3
33190: PUSH
33191: LD_INT 1
33193: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33194: LD_ADDR_VAR 0 5
33198: PUSH
33199: LD_VAR 0 2
33203: PPUSH
33204: CALL_OW 480
33208: ST_TO_ADDR
// if not tmp then
33209: LD_VAR 0 5
33213: NOT
33214: IFFALSE 33218
// exit ;
33216: GO 33267
// for i in tmp do
33218: LD_ADDR_VAR 0 4
33222: PUSH
33223: LD_VAR 0 5
33227: PUSH
33228: FOR_IN
33229: IFFALSE 33265
// if GetTech ( i , side ) <> state_researched then
33231: LD_VAR 0 4
33235: PPUSH
33236: LD_VAR 0 1
33240: PPUSH
33241: CALL_OW 321
33245: PUSH
33246: LD_INT 2
33248: NONEQUAL
33249: IFFALSE 33263
// begin result := false ;
33251: LD_ADDR_VAR 0 3
33255: PUSH
33256: LD_INT 0
33258: ST_TO_ADDR
// exit ;
33259: POP
33260: POP
33261: GO 33267
// end ;
33263: GO 33228
33265: POP
33266: POP
// end ;
33267: LD_VAR 0 3
33271: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33272: LD_INT 0
33274: PPUSH
33275: PPUSH
33276: PPUSH
33277: PPUSH
33278: PPUSH
33279: PPUSH
33280: PPUSH
33281: PPUSH
33282: PPUSH
33283: PPUSH
33284: PPUSH
33285: PPUSH
33286: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33287: LD_VAR 0 1
33291: NOT
33292: PUSH
33293: LD_VAR 0 1
33297: PPUSH
33298: CALL_OW 257
33302: PUSH
33303: LD_INT 9
33305: NONEQUAL
33306: OR
33307: IFFALSE 33311
// exit ;
33309: GO 33884
// side := GetSide ( unit ) ;
33311: LD_ADDR_VAR 0 9
33315: PUSH
33316: LD_VAR 0 1
33320: PPUSH
33321: CALL_OW 255
33325: ST_TO_ADDR
// tech_space := tech_spacanom ;
33326: LD_ADDR_VAR 0 12
33330: PUSH
33331: LD_INT 29
33333: ST_TO_ADDR
// tech_time := tech_taurad ;
33334: LD_ADDR_VAR 0 13
33338: PUSH
33339: LD_INT 28
33341: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33342: LD_ADDR_VAR 0 11
33346: PUSH
33347: LD_VAR 0 1
33351: PPUSH
33352: CALL_OW 310
33356: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33357: LD_VAR 0 11
33361: PPUSH
33362: CALL_OW 247
33366: PUSH
33367: LD_INT 2
33369: EQUAL
33370: IFFALSE 33374
// exit ;
33372: GO 33884
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33374: LD_ADDR_VAR 0 8
33378: PUSH
33379: LD_INT 81
33381: PUSH
33382: LD_VAR 0 9
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 3
33393: PUSH
33394: LD_INT 21
33396: PUSH
33397: LD_INT 3
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PPUSH
33412: CALL_OW 69
33416: ST_TO_ADDR
// if not tmp then
33417: LD_VAR 0 8
33421: NOT
33422: IFFALSE 33426
// exit ;
33424: GO 33884
// if in_unit then
33426: LD_VAR 0 11
33430: IFFALSE 33454
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33432: LD_ADDR_VAR 0 10
33436: PUSH
33437: LD_VAR 0 8
33441: PPUSH
33442: LD_VAR 0 11
33446: PPUSH
33447: CALL_OW 74
33451: ST_TO_ADDR
33452: GO 33474
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33454: LD_ADDR_VAR 0 10
33458: PUSH
33459: LD_VAR 0 8
33463: PPUSH
33464: LD_VAR 0 1
33468: PPUSH
33469: CALL_OW 74
33473: ST_TO_ADDR
// if not enemy then
33474: LD_VAR 0 10
33478: NOT
33479: IFFALSE 33483
// exit ;
33481: GO 33884
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33483: LD_VAR 0 11
33487: PUSH
33488: LD_VAR 0 11
33492: PPUSH
33493: LD_VAR 0 10
33497: PPUSH
33498: CALL_OW 296
33502: PUSH
33503: LD_INT 13
33505: GREATER
33506: AND
33507: PUSH
33508: LD_VAR 0 1
33512: PPUSH
33513: LD_VAR 0 10
33517: PPUSH
33518: CALL_OW 296
33522: PUSH
33523: LD_INT 12
33525: GREATER
33526: OR
33527: IFFALSE 33531
// exit ;
33529: GO 33884
// missile := [ 1 ] ;
33531: LD_ADDR_VAR 0 14
33535: PUSH
33536: LD_INT 1
33538: PUSH
33539: EMPTY
33540: LIST
33541: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33542: LD_VAR 0 9
33546: PPUSH
33547: LD_VAR 0 12
33551: PPUSH
33552: CALL_OW 325
33556: IFFALSE 33585
// missile := Insert ( missile , missile + 1 , 2 ) ;
33558: LD_ADDR_VAR 0 14
33562: PUSH
33563: LD_VAR 0 14
33567: PPUSH
33568: LD_VAR 0 14
33572: PUSH
33573: LD_INT 1
33575: PLUS
33576: PPUSH
33577: LD_INT 2
33579: PPUSH
33580: CALL_OW 2
33584: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33585: LD_VAR 0 9
33589: PPUSH
33590: LD_VAR 0 13
33594: PPUSH
33595: CALL_OW 325
33599: PUSH
33600: LD_VAR 0 10
33604: PPUSH
33605: CALL_OW 255
33609: PPUSH
33610: LD_VAR 0 13
33614: PPUSH
33615: CALL_OW 325
33619: NOT
33620: AND
33621: IFFALSE 33650
// missile := Insert ( missile , missile + 1 , 3 ) ;
33623: LD_ADDR_VAR 0 14
33627: PUSH
33628: LD_VAR 0 14
33632: PPUSH
33633: LD_VAR 0 14
33637: PUSH
33638: LD_INT 1
33640: PLUS
33641: PPUSH
33642: LD_INT 3
33644: PPUSH
33645: CALL_OW 2
33649: ST_TO_ADDR
// if missile < 2 then
33650: LD_VAR 0 14
33654: PUSH
33655: LD_INT 2
33657: LESS
33658: IFFALSE 33662
// exit ;
33660: GO 33884
// x := GetX ( enemy ) ;
33662: LD_ADDR_VAR 0 4
33666: PUSH
33667: LD_VAR 0 10
33671: PPUSH
33672: CALL_OW 250
33676: ST_TO_ADDR
// y := GetY ( enemy ) ;
33677: LD_ADDR_VAR 0 5
33681: PUSH
33682: LD_VAR 0 10
33686: PPUSH
33687: CALL_OW 251
33691: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33692: LD_ADDR_VAR 0 6
33696: PUSH
33697: LD_VAR 0 4
33701: PUSH
33702: LD_INT 1
33704: NEG
33705: PPUSH
33706: LD_INT 1
33708: PPUSH
33709: CALL_OW 12
33713: PLUS
33714: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33715: LD_ADDR_VAR 0 7
33719: PUSH
33720: LD_VAR 0 5
33724: PUSH
33725: LD_INT 1
33727: NEG
33728: PPUSH
33729: LD_INT 1
33731: PPUSH
33732: CALL_OW 12
33736: PLUS
33737: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33738: LD_VAR 0 6
33742: PPUSH
33743: LD_VAR 0 7
33747: PPUSH
33748: CALL_OW 488
33752: NOT
33753: IFFALSE 33775
// begin _x := x ;
33755: LD_ADDR_VAR 0 6
33759: PUSH
33760: LD_VAR 0 4
33764: ST_TO_ADDR
// _y := y ;
33765: LD_ADDR_VAR 0 7
33769: PUSH
33770: LD_VAR 0 5
33774: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33775: LD_ADDR_VAR 0 3
33779: PUSH
33780: LD_INT 1
33782: PPUSH
33783: LD_VAR 0 14
33787: PPUSH
33788: CALL_OW 12
33792: ST_TO_ADDR
// case i of 1 :
33793: LD_VAR 0 3
33797: PUSH
33798: LD_INT 1
33800: DOUBLE
33801: EQUAL
33802: IFTRUE 33806
33804: GO 33823
33806: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33807: LD_VAR 0 1
33811: PPUSH
33812: LD_VAR 0 10
33816: PPUSH
33817: CALL_OW 115
33821: GO 33884
33823: LD_INT 2
33825: DOUBLE
33826: EQUAL
33827: IFTRUE 33831
33829: GO 33853
33831: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33832: LD_VAR 0 1
33836: PPUSH
33837: LD_VAR 0 6
33841: PPUSH
33842: LD_VAR 0 7
33846: PPUSH
33847: CALL_OW 153
33851: GO 33884
33853: LD_INT 3
33855: DOUBLE
33856: EQUAL
33857: IFTRUE 33861
33859: GO 33883
33861: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33862: LD_VAR 0 1
33866: PPUSH
33867: LD_VAR 0 6
33871: PPUSH
33872: LD_VAR 0 7
33876: PPUSH
33877: CALL_OW 154
33881: GO 33884
33883: POP
// end ;
33884: LD_VAR 0 2
33888: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33889: LD_INT 0
33891: PPUSH
33892: PPUSH
33893: PPUSH
33894: PPUSH
33895: PPUSH
33896: PPUSH
// if not unit or not building then
33897: LD_VAR 0 1
33901: NOT
33902: PUSH
33903: LD_VAR 0 2
33907: NOT
33908: OR
33909: IFFALSE 33913
// exit ;
33911: GO 34071
// x := GetX ( building ) ;
33913: LD_ADDR_VAR 0 5
33917: PUSH
33918: LD_VAR 0 2
33922: PPUSH
33923: CALL_OW 250
33927: ST_TO_ADDR
// y := GetY ( building ) ;
33928: LD_ADDR_VAR 0 6
33932: PUSH
33933: LD_VAR 0 2
33937: PPUSH
33938: CALL_OW 251
33942: ST_TO_ADDR
// for i = 0 to 5 do
33943: LD_ADDR_VAR 0 4
33947: PUSH
33948: DOUBLE
33949: LD_INT 0
33951: DEC
33952: ST_TO_ADDR
33953: LD_INT 5
33955: PUSH
33956: FOR_TO
33957: IFFALSE 34069
// begin _x := ShiftX ( x , i , 3 ) ;
33959: LD_ADDR_VAR 0 7
33963: PUSH
33964: LD_VAR 0 5
33968: PPUSH
33969: LD_VAR 0 4
33973: PPUSH
33974: LD_INT 3
33976: PPUSH
33977: CALL_OW 272
33981: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33982: LD_ADDR_VAR 0 8
33986: PUSH
33987: LD_VAR 0 6
33991: PPUSH
33992: LD_VAR 0 4
33996: PPUSH
33997: LD_INT 3
33999: PPUSH
34000: CALL_OW 273
34004: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34005: LD_VAR 0 7
34009: PPUSH
34010: LD_VAR 0 8
34014: PPUSH
34015: CALL_OW 488
34019: NOT
34020: IFFALSE 34024
// continue ;
34022: GO 33956
// if HexInfo ( _x , _y ) = 0 then
34024: LD_VAR 0 7
34028: PPUSH
34029: LD_VAR 0 8
34033: PPUSH
34034: CALL_OW 428
34038: PUSH
34039: LD_INT 0
34041: EQUAL
34042: IFFALSE 34067
// begin ComMoveXY ( unit , _x , _y ) ;
34044: LD_VAR 0 1
34048: PPUSH
34049: LD_VAR 0 7
34053: PPUSH
34054: LD_VAR 0 8
34058: PPUSH
34059: CALL_OW 111
// exit ;
34063: POP
34064: POP
34065: GO 34071
// end ; end ;
34067: GO 33956
34069: POP
34070: POP
// end ;
34071: LD_VAR 0 3
34075: RET
// export function ScanBase ( side , base_area ) ; begin
34076: LD_INT 0
34078: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34079: LD_ADDR_VAR 0 3
34083: PUSH
34084: LD_VAR 0 2
34088: PPUSH
34089: LD_INT 81
34091: PUSH
34092: LD_VAR 0 1
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PPUSH
34101: CALL_OW 70
34105: ST_TO_ADDR
// end ;
34106: LD_VAR 0 3
34110: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34111: LD_INT 0
34113: PPUSH
34114: PPUSH
34115: PPUSH
34116: PPUSH
// result := false ;
34117: LD_ADDR_VAR 0 2
34121: PUSH
34122: LD_INT 0
34124: ST_TO_ADDR
// side := GetSide ( unit ) ;
34125: LD_ADDR_VAR 0 3
34129: PUSH
34130: LD_VAR 0 1
34134: PPUSH
34135: CALL_OW 255
34139: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34140: LD_ADDR_VAR 0 4
34144: PUSH
34145: LD_VAR 0 1
34149: PPUSH
34150: CALL_OW 248
34154: ST_TO_ADDR
// case nat of 1 :
34155: LD_VAR 0 4
34159: PUSH
34160: LD_INT 1
34162: DOUBLE
34163: EQUAL
34164: IFTRUE 34168
34166: GO 34179
34168: POP
// tech := tech_lassight ; 2 :
34169: LD_ADDR_VAR 0 5
34173: PUSH
34174: LD_INT 12
34176: ST_TO_ADDR
34177: GO 34218
34179: LD_INT 2
34181: DOUBLE
34182: EQUAL
34183: IFTRUE 34187
34185: GO 34198
34187: POP
// tech := tech_mortar ; 3 :
34188: LD_ADDR_VAR 0 5
34192: PUSH
34193: LD_INT 41
34195: ST_TO_ADDR
34196: GO 34218
34198: LD_INT 3
34200: DOUBLE
34201: EQUAL
34202: IFTRUE 34206
34204: GO 34217
34206: POP
// tech := tech_bazooka ; end ;
34207: LD_ADDR_VAR 0 5
34211: PUSH
34212: LD_INT 44
34214: ST_TO_ADDR
34215: GO 34218
34217: POP
// if Researched ( side , tech ) then
34218: LD_VAR 0 3
34222: PPUSH
34223: LD_VAR 0 5
34227: PPUSH
34228: CALL_OW 325
34232: IFFALSE 34259
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34234: LD_ADDR_VAR 0 2
34238: PUSH
34239: LD_INT 5
34241: PUSH
34242: LD_INT 8
34244: PUSH
34245: LD_INT 9
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: LIST
34252: PUSH
34253: LD_VAR 0 4
34257: ARRAY
34258: ST_TO_ADDR
// end ;
34259: LD_VAR 0 2
34263: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34264: LD_INT 0
34266: PPUSH
34267: PPUSH
34268: PPUSH
// if not mines then
34269: LD_VAR 0 2
34273: NOT
34274: IFFALSE 34278
// exit ;
34276: GO 34422
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34278: LD_ADDR_VAR 0 5
34282: PUSH
34283: LD_INT 81
34285: PUSH
34286: LD_VAR 0 1
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 3
34297: PUSH
34298: LD_INT 21
34300: PUSH
34301: LD_INT 3
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PPUSH
34316: CALL_OW 69
34320: ST_TO_ADDR
// for i in mines do
34321: LD_ADDR_VAR 0 4
34325: PUSH
34326: LD_VAR 0 2
34330: PUSH
34331: FOR_IN
34332: IFFALSE 34420
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34334: LD_VAR 0 4
34338: PUSH
34339: LD_INT 1
34341: ARRAY
34342: PPUSH
34343: LD_VAR 0 4
34347: PUSH
34348: LD_INT 2
34350: ARRAY
34351: PPUSH
34352: CALL_OW 458
34356: NOT
34357: IFFALSE 34361
// continue ;
34359: GO 34331
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34361: LD_VAR 0 4
34365: PUSH
34366: LD_INT 1
34368: ARRAY
34369: PPUSH
34370: LD_VAR 0 4
34374: PUSH
34375: LD_INT 2
34377: ARRAY
34378: PPUSH
34379: CALL_OW 428
34383: PUSH
34384: LD_VAR 0 5
34388: IN
34389: IFFALSE 34418
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34391: LD_VAR 0 4
34395: PUSH
34396: LD_INT 1
34398: ARRAY
34399: PPUSH
34400: LD_VAR 0 4
34404: PUSH
34405: LD_INT 2
34407: ARRAY
34408: PPUSH
34409: LD_VAR 0 1
34413: PPUSH
34414: CALL_OW 456
// end ;
34418: GO 34331
34420: POP
34421: POP
// end ;
34422: LD_VAR 0 3
34426: RET
// export function Count ( array ) ; var i ; begin
34427: LD_INT 0
34429: PPUSH
34430: PPUSH
// result := 0 ;
34431: LD_ADDR_VAR 0 2
34435: PUSH
34436: LD_INT 0
34438: ST_TO_ADDR
// for i in array do
34439: LD_ADDR_VAR 0 3
34443: PUSH
34444: LD_VAR 0 1
34448: PUSH
34449: FOR_IN
34450: IFFALSE 34474
// if i then
34452: LD_VAR 0 3
34456: IFFALSE 34472
// result := result + 1 ;
34458: LD_ADDR_VAR 0 2
34462: PUSH
34463: LD_VAR 0 2
34467: PUSH
34468: LD_INT 1
34470: PLUS
34471: ST_TO_ADDR
34472: GO 34449
34474: POP
34475: POP
// end ;
34476: LD_VAR 0 2
34480: RET
// export function IsEmpty ( building ) ; begin
34481: LD_INT 0
34483: PPUSH
// if not building then
34484: LD_VAR 0 1
34488: NOT
34489: IFFALSE 34493
// exit ;
34491: GO 34536
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34493: LD_ADDR_VAR 0 2
34497: PUSH
34498: LD_VAR 0 1
34502: PUSH
34503: LD_INT 22
34505: PUSH
34506: LD_VAR 0 1
34510: PPUSH
34511: CALL_OW 255
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 58
34522: PUSH
34523: EMPTY
34524: LIST
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PPUSH
34530: CALL_OW 69
34534: IN
34535: ST_TO_ADDR
// end ;
34536: LD_VAR 0 2
34540: RET
// export function IsNotFull ( building ) ; begin
34541: LD_INT 0
34543: PPUSH
// if not building then
34544: LD_VAR 0 1
34548: NOT
34549: IFFALSE 34553
// exit ;
34551: GO 34572
// result := UnitsInside ( building ) < 6 ;
34553: LD_ADDR_VAR 0 2
34557: PUSH
34558: LD_VAR 0 1
34562: PPUSH
34563: CALL_OW 313
34567: PUSH
34568: LD_INT 6
34570: LESS
34571: ST_TO_ADDR
// end ;
34572: LD_VAR 0 2
34576: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34577: LD_INT 0
34579: PPUSH
34580: PPUSH
34581: PPUSH
34582: PPUSH
// tmp := [ ] ;
34583: LD_ADDR_VAR 0 3
34587: PUSH
34588: EMPTY
34589: ST_TO_ADDR
// list := [ ] ;
34590: LD_ADDR_VAR 0 5
34594: PUSH
34595: EMPTY
34596: ST_TO_ADDR
// for i = 16 to 25 do
34597: LD_ADDR_VAR 0 4
34601: PUSH
34602: DOUBLE
34603: LD_INT 16
34605: DEC
34606: ST_TO_ADDR
34607: LD_INT 25
34609: PUSH
34610: FOR_TO
34611: IFFALSE 34684
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34613: LD_ADDR_VAR 0 3
34617: PUSH
34618: LD_VAR 0 3
34622: PUSH
34623: LD_INT 22
34625: PUSH
34626: LD_VAR 0 1
34630: PPUSH
34631: CALL_OW 255
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 91
34642: PUSH
34643: LD_VAR 0 1
34647: PUSH
34648: LD_INT 6
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 30
34658: PUSH
34659: LD_VAR 0 4
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: LIST
34672: PUSH
34673: EMPTY
34674: LIST
34675: PPUSH
34676: CALL_OW 69
34680: ADD
34681: ST_TO_ADDR
34682: GO 34610
34684: POP
34685: POP
// for i = 1 to tmp do
34686: LD_ADDR_VAR 0 4
34690: PUSH
34691: DOUBLE
34692: LD_INT 1
34694: DEC
34695: ST_TO_ADDR
34696: LD_VAR 0 3
34700: PUSH
34701: FOR_TO
34702: IFFALSE 34790
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34704: LD_ADDR_VAR 0 5
34708: PUSH
34709: LD_VAR 0 5
34713: PUSH
34714: LD_VAR 0 3
34718: PUSH
34719: LD_VAR 0 4
34723: ARRAY
34724: PPUSH
34725: CALL_OW 266
34729: PUSH
34730: LD_VAR 0 3
34734: PUSH
34735: LD_VAR 0 4
34739: ARRAY
34740: PPUSH
34741: CALL_OW 250
34745: PUSH
34746: LD_VAR 0 3
34750: PUSH
34751: LD_VAR 0 4
34755: ARRAY
34756: PPUSH
34757: CALL_OW 251
34761: PUSH
34762: LD_VAR 0 3
34766: PUSH
34767: LD_VAR 0 4
34771: ARRAY
34772: PPUSH
34773: CALL_OW 254
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: PUSH
34784: EMPTY
34785: LIST
34786: ADD
34787: ST_TO_ADDR
34788: GO 34701
34790: POP
34791: POP
// result := list ;
34792: LD_ADDR_VAR 0 2
34796: PUSH
34797: LD_VAR 0 5
34801: ST_TO_ADDR
// end ;
34802: LD_VAR 0 2
34806: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34807: LD_INT 0
34809: PPUSH
34810: PPUSH
34811: PPUSH
34812: PPUSH
34813: PPUSH
34814: PPUSH
34815: PPUSH
// if not factory then
34816: LD_VAR 0 1
34820: NOT
34821: IFFALSE 34825
// exit ;
34823: GO 35418
// if control = control_apeman then
34825: LD_VAR 0 4
34829: PUSH
34830: LD_INT 5
34832: EQUAL
34833: IFFALSE 34942
// begin tmp := UnitsInside ( factory ) ;
34835: LD_ADDR_VAR 0 8
34839: PUSH
34840: LD_VAR 0 1
34844: PPUSH
34845: CALL_OW 313
34849: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34850: LD_VAR 0 8
34854: PPUSH
34855: LD_INT 25
34857: PUSH
34858: LD_INT 12
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PPUSH
34865: CALL_OW 72
34869: NOT
34870: IFFALSE 34880
// control := control_manual ;
34872: LD_ADDR_VAR 0 4
34876: PUSH
34877: LD_INT 1
34879: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34880: LD_ADDR_VAR 0 8
34884: PUSH
34885: LD_VAR 0 1
34889: PPUSH
34890: CALL 34577 0 1
34894: ST_TO_ADDR
// if tmp then
34895: LD_VAR 0 8
34899: IFFALSE 34942
// begin for i in tmp do
34901: LD_ADDR_VAR 0 7
34905: PUSH
34906: LD_VAR 0 8
34910: PUSH
34911: FOR_IN
34912: IFFALSE 34940
// if i [ 1 ] = b_ext_radio then
34914: LD_VAR 0 7
34918: PUSH
34919: LD_INT 1
34921: ARRAY
34922: PUSH
34923: LD_INT 22
34925: EQUAL
34926: IFFALSE 34938
// begin control := control_remote ;
34928: LD_ADDR_VAR 0 4
34932: PUSH
34933: LD_INT 2
34935: ST_TO_ADDR
// break ;
34936: GO 34940
// end ;
34938: GO 34911
34940: POP
34941: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34942: LD_VAR 0 1
34946: PPUSH
34947: LD_VAR 0 2
34951: PPUSH
34952: LD_VAR 0 3
34956: PPUSH
34957: LD_VAR 0 4
34961: PPUSH
34962: LD_VAR 0 5
34966: PPUSH
34967: CALL_OW 448
34971: IFFALSE 35006
// begin result := [ chassis , engine , control , weapon ] ;
34973: LD_ADDR_VAR 0 6
34977: PUSH
34978: LD_VAR 0 2
34982: PUSH
34983: LD_VAR 0 3
34987: PUSH
34988: LD_VAR 0 4
34992: PUSH
34993: LD_VAR 0 5
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: ST_TO_ADDR
// exit ;
35004: GO 35418
// end ; _chassis := AvailableChassisList ( factory ) ;
35006: LD_ADDR_VAR 0 9
35010: PUSH
35011: LD_VAR 0 1
35015: PPUSH
35016: CALL_OW 475
35020: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35021: LD_ADDR_VAR 0 11
35025: PUSH
35026: LD_VAR 0 1
35030: PPUSH
35031: CALL_OW 476
35035: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35036: LD_ADDR_VAR 0 12
35040: PUSH
35041: LD_VAR 0 1
35045: PPUSH
35046: CALL_OW 477
35050: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35051: LD_ADDR_VAR 0 10
35055: PUSH
35056: LD_VAR 0 1
35060: PPUSH
35061: CALL_OW 478
35065: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35066: LD_VAR 0 9
35070: NOT
35071: PUSH
35072: LD_VAR 0 11
35076: NOT
35077: OR
35078: PUSH
35079: LD_VAR 0 12
35083: NOT
35084: OR
35085: PUSH
35086: LD_VAR 0 10
35090: NOT
35091: OR
35092: IFFALSE 35127
// begin result := [ chassis , engine , control , weapon ] ;
35094: LD_ADDR_VAR 0 6
35098: PUSH
35099: LD_VAR 0 2
35103: PUSH
35104: LD_VAR 0 3
35108: PUSH
35109: LD_VAR 0 4
35113: PUSH
35114: LD_VAR 0 5
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: ST_TO_ADDR
// exit ;
35125: GO 35418
// end ; if not chassis in _chassis then
35127: LD_VAR 0 2
35131: PUSH
35132: LD_VAR 0 9
35136: IN
35137: NOT
35138: IFFALSE 35164
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35140: LD_ADDR_VAR 0 2
35144: PUSH
35145: LD_VAR 0 9
35149: PUSH
35150: LD_INT 1
35152: PPUSH
35153: LD_VAR 0 9
35157: PPUSH
35158: CALL_OW 12
35162: ARRAY
35163: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35164: LD_VAR 0 2
35168: PPUSH
35169: LD_VAR 0 3
35173: PPUSH
35174: CALL 35423 0 2
35178: NOT
35179: IFFALSE 35238
// repeat engine := _engine [ 1 ] ;
35181: LD_ADDR_VAR 0 3
35185: PUSH
35186: LD_VAR 0 11
35190: PUSH
35191: LD_INT 1
35193: ARRAY
35194: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35195: LD_ADDR_VAR 0 11
35199: PUSH
35200: LD_VAR 0 11
35204: PPUSH
35205: LD_INT 1
35207: PPUSH
35208: CALL_OW 3
35212: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35213: LD_VAR 0 2
35217: PPUSH
35218: LD_VAR 0 3
35222: PPUSH
35223: CALL 35423 0 2
35227: PUSH
35228: LD_VAR 0 11
35232: PUSH
35233: EMPTY
35234: EQUAL
35235: OR
35236: IFFALSE 35181
// if not control in _control then
35238: LD_VAR 0 4
35242: PUSH
35243: LD_VAR 0 12
35247: IN
35248: NOT
35249: IFFALSE 35275
// control := _control [ rand ( 1 , _control ) ] ;
35251: LD_ADDR_VAR 0 4
35255: PUSH
35256: LD_VAR 0 12
35260: PUSH
35261: LD_INT 1
35263: PPUSH
35264: LD_VAR 0 12
35268: PPUSH
35269: CALL_OW 12
35273: ARRAY
35274: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35275: LD_VAR 0 2
35279: PPUSH
35280: LD_VAR 0 5
35284: PPUSH
35285: CALL 35643 0 2
35289: NOT
35290: IFFALSE 35349
// repeat weapon := _weapon [ 1 ] ;
35292: LD_ADDR_VAR 0 5
35296: PUSH
35297: LD_VAR 0 10
35301: PUSH
35302: LD_INT 1
35304: ARRAY
35305: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35306: LD_ADDR_VAR 0 10
35310: PUSH
35311: LD_VAR 0 10
35315: PPUSH
35316: LD_INT 1
35318: PPUSH
35319: CALL_OW 3
35323: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35324: LD_VAR 0 2
35328: PPUSH
35329: LD_VAR 0 5
35333: PPUSH
35334: CALL 35643 0 2
35338: PUSH
35339: LD_VAR 0 10
35343: PUSH
35344: EMPTY
35345: EQUAL
35346: OR
35347: IFFALSE 35292
// result := [ ] ;
35349: LD_ADDR_VAR 0 6
35353: PUSH
35354: EMPTY
35355: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35356: LD_VAR 0 1
35360: PPUSH
35361: LD_VAR 0 2
35365: PPUSH
35366: LD_VAR 0 3
35370: PPUSH
35371: LD_VAR 0 4
35375: PPUSH
35376: LD_VAR 0 5
35380: PPUSH
35381: CALL_OW 448
35385: IFFALSE 35418
// result := [ chassis , engine , control , weapon ] ;
35387: LD_ADDR_VAR 0 6
35391: PUSH
35392: LD_VAR 0 2
35396: PUSH
35397: LD_VAR 0 3
35401: PUSH
35402: LD_VAR 0 4
35406: PUSH
35407: LD_VAR 0 5
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: ST_TO_ADDR
// end ;
35418: LD_VAR 0 6
35422: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35423: LD_INT 0
35425: PPUSH
// if not chassis or not engine then
35426: LD_VAR 0 1
35430: NOT
35431: PUSH
35432: LD_VAR 0 2
35436: NOT
35437: OR
35438: IFFALSE 35442
// exit ;
35440: GO 35638
// case engine of engine_solar :
35442: LD_VAR 0 2
35446: PUSH
35447: LD_INT 2
35449: DOUBLE
35450: EQUAL
35451: IFTRUE 35455
35453: GO 35493
35455: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35456: LD_ADDR_VAR 0 3
35460: PUSH
35461: LD_INT 11
35463: PUSH
35464: LD_INT 12
35466: PUSH
35467: LD_INT 13
35469: PUSH
35470: LD_INT 14
35472: PUSH
35473: LD_INT 1
35475: PUSH
35476: LD_INT 2
35478: PUSH
35479: LD_INT 3
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: ST_TO_ADDR
35491: GO 35622
35493: LD_INT 1
35495: DOUBLE
35496: EQUAL
35497: IFTRUE 35501
35499: GO 35563
35501: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35502: LD_ADDR_VAR 0 3
35506: PUSH
35507: LD_INT 11
35509: PUSH
35510: LD_INT 12
35512: PUSH
35513: LD_INT 13
35515: PUSH
35516: LD_INT 14
35518: PUSH
35519: LD_INT 1
35521: PUSH
35522: LD_INT 2
35524: PUSH
35525: LD_INT 3
35527: PUSH
35528: LD_INT 4
35530: PUSH
35531: LD_INT 5
35533: PUSH
35534: LD_INT 21
35536: PUSH
35537: LD_INT 23
35539: PUSH
35540: LD_INT 22
35542: PUSH
35543: LD_INT 24
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: ST_TO_ADDR
35561: GO 35622
35563: LD_INT 3
35565: DOUBLE
35566: EQUAL
35567: IFTRUE 35571
35569: GO 35621
35571: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35572: LD_ADDR_VAR 0 3
35576: PUSH
35577: LD_INT 13
35579: PUSH
35580: LD_INT 14
35582: PUSH
35583: LD_INT 2
35585: PUSH
35586: LD_INT 3
35588: PUSH
35589: LD_INT 4
35591: PUSH
35592: LD_INT 5
35594: PUSH
35595: LD_INT 21
35597: PUSH
35598: LD_INT 22
35600: PUSH
35601: LD_INT 23
35603: PUSH
35604: LD_INT 24
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: ST_TO_ADDR
35619: GO 35622
35621: POP
// result := ( chassis in result ) ;
35622: LD_ADDR_VAR 0 3
35626: PUSH
35627: LD_VAR 0 1
35631: PUSH
35632: LD_VAR 0 3
35636: IN
35637: ST_TO_ADDR
// end ;
35638: LD_VAR 0 3
35642: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35643: LD_INT 0
35645: PPUSH
// if not chassis or not weapon then
35646: LD_VAR 0 1
35650: NOT
35651: PUSH
35652: LD_VAR 0 2
35656: NOT
35657: OR
35658: IFFALSE 35662
// exit ;
35660: GO 36688
// case weapon of us_machine_gun :
35662: LD_VAR 0 2
35666: PUSH
35667: LD_INT 2
35669: DOUBLE
35670: EQUAL
35671: IFTRUE 35675
35673: GO 35705
35675: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35676: LD_ADDR_VAR 0 3
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: LD_INT 2
35686: PUSH
35687: LD_INT 3
35689: PUSH
35690: LD_INT 4
35692: PUSH
35693: LD_INT 5
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: ST_TO_ADDR
35703: GO 36672
35705: LD_INT 3
35707: DOUBLE
35708: EQUAL
35709: IFTRUE 35713
35711: GO 35743
35713: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35714: LD_ADDR_VAR 0 3
35718: PUSH
35719: LD_INT 1
35721: PUSH
35722: LD_INT 2
35724: PUSH
35725: LD_INT 3
35727: PUSH
35728: LD_INT 4
35730: PUSH
35731: LD_INT 5
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: ST_TO_ADDR
35741: GO 36672
35743: LD_INT 11
35745: DOUBLE
35746: EQUAL
35747: IFTRUE 35751
35749: GO 35781
35751: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35752: LD_ADDR_VAR 0 3
35756: PUSH
35757: LD_INT 1
35759: PUSH
35760: LD_INT 2
35762: PUSH
35763: LD_INT 3
35765: PUSH
35766: LD_INT 4
35768: PUSH
35769: LD_INT 5
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: ST_TO_ADDR
35779: GO 36672
35781: LD_INT 4
35783: DOUBLE
35784: EQUAL
35785: IFTRUE 35789
35787: GO 35815
35789: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35790: LD_ADDR_VAR 0 3
35794: PUSH
35795: LD_INT 2
35797: PUSH
35798: LD_INT 3
35800: PUSH
35801: LD_INT 4
35803: PUSH
35804: LD_INT 5
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: ST_TO_ADDR
35813: GO 36672
35815: LD_INT 5
35817: DOUBLE
35818: EQUAL
35819: IFTRUE 35823
35821: GO 35849
35823: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35824: LD_ADDR_VAR 0 3
35828: PUSH
35829: LD_INT 2
35831: PUSH
35832: LD_INT 3
35834: PUSH
35835: LD_INT 4
35837: PUSH
35838: LD_INT 5
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: ST_TO_ADDR
35847: GO 36672
35849: LD_INT 9
35851: DOUBLE
35852: EQUAL
35853: IFTRUE 35857
35855: GO 35883
35857: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35858: LD_ADDR_VAR 0 3
35862: PUSH
35863: LD_INT 2
35865: PUSH
35866: LD_INT 3
35868: PUSH
35869: LD_INT 4
35871: PUSH
35872: LD_INT 5
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: ST_TO_ADDR
35881: GO 36672
35883: LD_INT 7
35885: DOUBLE
35886: EQUAL
35887: IFTRUE 35891
35889: GO 35917
35891: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35892: LD_ADDR_VAR 0 3
35896: PUSH
35897: LD_INT 2
35899: PUSH
35900: LD_INT 3
35902: PUSH
35903: LD_INT 4
35905: PUSH
35906: LD_INT 5
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: ST_TO_ADDR
35915: GO 36672
35917: LD_INT 12
35919: DOUBLE
35920: EQUAL
35921: IFTRUE 35925
35923: GO 35951
35925: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35926: LD_ADDR_VAR 0 3
35930: PUSH
35931: LD_INT 2
35933: PUSH
35934: LD_INT 3
35936: PUSH
35937: LD_INT 4
35939: PUSH
35940: LD_INT 5
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: ST_TO_ADDR
35949: GO 36672
35951: LD_INT 13
35953: DOUBLE
35954: EQUAL
35955: IFTRUE 35959
35957: GO 35985
35959: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35960: LD_ADDR_VAR 0 3
35964: PUSH
35965: LD_INT 2
35967: PUSH
35968: LD_INT 3
35970: PUSH
35971: LD_INT 4
35973: PUSH
35974: LD_INT 5
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: ST_TO_ADDR
35983: GO 36672
35985: LD_INT 14
35987: DOUBLE
35988: EQUAL
35989: IFTRUE 35993
35991: GO 36011
35993: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35994: LD_ADDR_VAR 0 3
35998: PUSH
35999: LD_INT 4
36001: PUSH
36002: LD_INT 5
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: ST_TO_ADDR
36009: GO 36672
36011: LD_INT 6
36013: DOUBLE
36014: EQUAL
36015: IFTRUE 36019
36017: GO 36037
36019: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36020: LD_ADDR_VAR 0 3
36024: PUSH
36025: LD_INT 4
36027: PUSH
36028: LD_INT 5
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: ST_TO_ADDR
36035: GO 36672
36037: LD_INT 10
36039: DOUBLE
36040: EQUAL
36041: IFTRUE 36045
36043: GO 36063
36045: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36046: LD_ADDR_VAR 0 3
36050: PUSH
36051: LD_INT 4
36053: PUSH
36054: LD_INT 5
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: ST_TO_ADDR
36061: GO 36672
36063: LD_INT 22
36065: DOUBLE
36066: EQUAL
36067: IFTRUE 36071
36069: GO 36097
36071: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36072: LD_ADDR_VAR 0 3
36076: PUSH
36077: LD_INT 11
36079: PUSH
36080: LD_INT 12
36082: PUSH
36083: LD_INT 13
36085: PUSH
36086: LD_INT 14
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: ST_TO_ADDR
36095: GO 36672
36097: LD_INT 23
36099: DOUBLE
36100: EQUAL
36101: IFTRUE 36105
36103: GO 36131
36105: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36106: LD_ADDR_VAR 0 3
36110: PUSH
36111: LD_INT 11
36113: PUSH
36114: LD_INT 12
36116: PUSH
36117: LD_INT 13
36119: PUSH
36120: LD_INT 14
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: ST_TO_ADDR
36129: GO 36672
36131: LD_INT 24
36133: DOUBLE
36134: EQUAL
36135: IFTRUE 36139
36137: GO 36165
36139: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36140: LD_ADDR_VAR 0 3
36144: PUSH
36145: LD_INT 11
36147: PUSH
36148: LD_INT 12
36150: PUSH
36151: LD_INT 13
36153: PUSH
36154: LD_INT 14
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: ST_TO_ADDR
36163: GO 36672
36165: LD_INT 30
36167: DOUBLE
36168: EQUAL
36169: IFTRUE 36173
36171: GO 36199
36173: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36174: LD_ADDR_VAR 0 3
36178: PUSH
36179: LD_INT 11
36181: PUSH
36182: LD_INT 12
36184: PUSH
36185: LD_INT 13
36187: PUSH
36188: LD_INT 14
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: ST_TO_ADDR
36197: GO 36672
36199: LD_INT 25
36201: DOUBLE
36202: EQUAL
36203: IFTRUE 36207
36205: GO 36225
36207: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36208: LD_ADDR_VAR 0 3
36212: PUSH
36213: LD_INT 13
36215: PUSH
36216: LD_INT 14
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: ST_TO_ADDR
36223: GO 36672
36225: LD_INT 27
36227: DOUBLE
36228: EQUAL
36229: IFTRUE 36233
36231: GO 36251
36233: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36234: LD_ADDR_VAR 0 3
36238: PUSH
36239: LD_INT 13
36241: PUSH
36242: LD_INT 14
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: ST_TO_ADDR
36249: GO 36672
36251: LD_INT 28
36253: DOUBLE
36254: EQUAL
36255: IFTRUE 36259
36257: GO 36277
36259: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36260: LD_ADDR_VAR 0 3
36264: PUSH
36265: LD_INT 13
36267: PUSH
36268: LD_INT 14
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: ST_TO_ADDR
36275: GO 36672
36277: LD_INT 29
36279: DOUBLE
36280: EQUAL
36281: IFTRUE 36285
36283: GO 36303
36285: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36286: LD_ADDR_VAR 0 3
36290: PUSH
36291: LD_INT 13
36293: PUSH
36294: LD_INT 14
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: ST_TO_ADDR
36301: GO 36672
36303: LD_INT 31
36305: DOUBLE
36306: EQUAL
36307: IFTRUE 36311
36309: GO 36329
36311: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36312: LD_ADDR_VAR 0 3
36316: PUSH
36317: LD_INT 13
36319: PUSH
36320: LD_INT 14
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: ST_TO_ADDR
36327: GO 36672
36329: LD_INT 26
36331: DOUBLE
36332: EQUAL
36333: IFTRUE 36337
36335: GO 36355
36337: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36338: LD_ADDR_VAR 0 3
36342: PUSH
36343: LD_INT 13
36345: PUSH
36346: LD_INT 14
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: ST_TO_ADDR
36353: GO 36672
36355: LD_INT 42
36357: DOUBLE
36358: EQUAL
36359: IFTRUE 36363
36361: GO 36389
36363: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36364: LD_ADDR_VAR 0 3
36368: PUSH
36369: LD_INT 21
36371: PUSH
36372: LD_INT 22
36374: PUSH
36375: LD_INT 23
36377: PUSH
36378: LD_INT 24
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: ST_TO_ADDR
36387: GO 36672
36389: LD_INT 43
36391: DOUBLE
36392: EQUAL
36393: IFTRUE 36397
36395: GO 36423
36397: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36398: LD_ADDR_VAR 0 3
36402: PUSH
36403: LD_INT 21
36405: PUSH
36406: LD_INT 22
36408: PUSH
36409: LD_INT 23
36411: PUSH
36412: LD_INT 24
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: ST_TO_ADDR
36421: GO 36672
36423: LD_INT 44
36425: DOUBLE
36426: EQUAL
36427: IFTRUE 36431
36429: GO 36457
36431: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36432: LD_ADDR_VAR 0 3
36436: PUSH
36437: LD_INT 21
36439: PUSH
36440: LD_INT 22
36442: PUSH
36443: LD_INT 23
36445: PUSH
36446: LD_INT 24
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: ST_TO_ADDR
36455: GO 36672
36457: LD_INT 45
36459: DOUBLE
36460: EQUAL
36461: IFTRUE 36465
36463: GO 36491
36465: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36466: LD_ADDR_VAR 0 3
36470: PUSH
36471: LD_INT 21
36473: PUSH
36474: LD_INT 22
36476: PUSH
36477: LD_INT 23
36479: PUSH
36480: LD_INT 24
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: ST_TO_ADDR
36489: GO 36672
36491: LD_INT 49
36493: DOUBLE
36494: EQUAL
36495: IFTRUE 36499
36497: GO 36525
36499: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36500: LD_ADDR_VAR 0 3
36504: PUSH
36505: LD_INT 21
36507: PUSH
36508: LD_INT 22
36510: PUSH
36511: LD_INT 23
36513: PUSH
36514: LD_INT 24
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: ST_TO_ADDR
36523: GO 36672
36525: LD_INT 51
36527: DOUBLE
36528: EQUAL
36529: IFTRUE 36533
36531: GO 36559
36533: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36534: LD_ADDR_VAR 0 3
36538: PUSH
36539: LD_INT 21
36541: PUSH
36542: LD_INT 22
36544: PUSH
36545: LD_INT 23
36547: PUSH
36548: LD_INT 24
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: ST_TO_ADDR
36557: GO 36672
36559: LD_INT 52
36561: DOUBLE
36562: EQUAL
36563: IFTRUE 36567
36565: GO 36593
36567: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36568: LD_ADDR_VAR 0 3
36572: PUSH
36573: LD_INT 21
36575: PUSH
36576: LD_INT 22
36578: PUSH
36579: LD_INT 23
36581: PUSH
36582: LD_INT 24
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: ST_TO_ADDR
36591: GO 36672
36593: LD_INT 53
36595: DOUBLE
36596: EQUAL
36597: IFTRUE 36601
36599: GO 36619
36601: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36602: LD_ADDR_VAR 0 3
36606: PUSH
36607: LD_INT 23
36609: PUSH
36610: LD_INT 24
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: ST_TO_ADDR
36617: GO 36672
36619: LD_INT 46
36621: DOUBLE
36622: EQUAL
36623: IFTRUE 36627
36625: GO 36645
36627: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36628: LD_ADDR_VAR 0 3
36632: PUSH
36633: LD_INT 23
36635: PUSH
36636: LD_INT 24
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: ST_TO_ADDR
36643: GO 36672
36645: LD_INT 47
36647: DOUBLE
36648: EQUAL
36649: IFTRUE 36653
36651: GO 36671
36653: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36654: LD_ADDR_VAR 0 3
36658: PUSH
36659: LD_INT 23
36661: PUSH
36662: LD_INT 24
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: ST_TO_ADDR
36669: GO 36672
36671: POP
// result := ( chassis in result ) ;
36672: LD_ADDR_VAR 0 3
36676: PUSH
36677: LD_VAR 0 1
36681: PUSH
36682: LD_VAR 0 3
36686: IN
36687: ST_TO_ADDR
// end ;
36688: LD_VAR 0 3
36692: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36693: LD_INT 0
36695: PPUSH
36696: PPUSH
36697: PPUSH
36698: PPUSH
36699: PPUSH
36700: PPUSH
36701: PPUSH
// result := array ;
36702: LD_ADDR_VAR 0 5
36706: PUSH
36707: LD_VAR 0 1
36711: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36712: LD_VAR 0 1
36716: NOT
36717: PUSH
36718: LD_VAR 0 2
36722: NOT
36723: OR
36724: PUSH
36725: LD_VAR 0 3
36729: NOT
36730: OR
36731: PUSH
36732: LD_VAR 0 2
36736: PUSH
36737: LD_VAR 0 1
36741: GREATER
36742: OR
36743: PUSH
36744: LD_VAR 0 3
36748: PUSH
36749: LD_VAR 0 1
36753: GREATER
36754: OR
36755: IFFALSE 36759
// exit ;
36757: GO 37055
// if direction then
36759: LD_VAR 0 4
36763: IFFALSE 36827
// begin d := 1 ;
36765: LD_ADDR_VAR 0 9
36769: PUSH
36770: LD_INT 1
36772: ST_TO_ADDR
// if i_from > i_to then
36773: LD_VAR 0 2
36777: PUSH
36778: LD_VAR 0 3
36782: GREATER
36783: IFFALSE 36809
// length := ( array - i_from ) + i_to else
36785: LD_ADDR_VAR 0 11
36789: PUSH
36790: LD_VAR 0 1
36794: PUSH
36795: LD_VAR 0 2
36799: MINUS
36800: PUSH
36801: LD_VAR 0 3
36805: PLUS
36806: ST_TO_ADDR
36807: GO 36825
// length := i_to - i_from ;
36809: LD_ADDR_VAR 0 11
36813: PUSH
36814: LD_VAR 0 3
36818: PUSH
36819: LD_VAR 0 2
36823: MINUS
36824: ST_TO_ADDR
// end else
36825: GO 36888
// begin d := - 1 ;
36827: LD_ADDR_VAR 0 9
36831: PUSH
36832: LD_INT 1
36834: NEG
36835: ST_TO_ADDR
// if i_from > i_to then
36836: LD_VAR 0 2
36840: PUSH
36841: LD_VAR 0 3
36845: GREATER
36846: IFFALSE 36866
// length := i_from - i_to else
36848: LD_ADDR_VAR 0 11
36852: PUSH
36853: LD_VAR 0 2
36857: PUSH
36858: LD_VAR 0 3
36862: MINUS
36863: ST_TO_ADDR
36864: GO 36888
// length := ( array - i_to ) + i_from ;
36866: LD_ADDR_VAR 0 11
36870: PUSH
36871: LD_VAR 0 1
36875: PUSH
36876: LD_VAR 0 3
36880: MINUS
36881: PUSH
36882: LD_VAR 0 2
36886: PLUS
36887: ST_TO_ADDR
// end ; if not length then
36888: LD_VAR 0 11
36892: NOT
36893: IFFALSE 36897
// exit ;
36895: GO 37055
// tmp := array ;
36897: LD_ADDR_VAR 0 10
36901: PUSH
36902: LD_VAR 0 1
36906: ST_TO_ADDR
// for i = 1 to length do
36907: LD_ADDR_VAR 0 6
36911: PUSH
36912: DOUBLE
36913: LD_INT 1
36915: DEC
36916: ST_TO_ADDR
36917: LD_VAR 0 11
36921: PUSH
36922: FOR_TO
36923: IFFALSE 37043
// begin for j = 1 to array do
36925: LD_ADDR_VAR 0 7
36929: PUSH
36930: DOUBLE
36931: LD_INT 1
36933: DEC
36934: ST_TO_ADDR
36935: LD_VAR 0 1
36939: PUSH
36940: FOR_TO
36941: IFFALSE 37029
// begin k := j + d ;
36943: LD_ADDR_VAR 0 8
36947: PUSH
36948: LD_VAR 0 7
36952: PUSH
36953: LD_VAR 0 9
36957: PLUS
36958: ST_TO_ADDR
// if k > array then
36959: LD_VAR 0 8
36963: PUSH
36964: LD_VAR 0 1
36968: GREATER
36969: IFFALSE 36979
// k := 1 ;
36971: LD_ADDR_VAR 0 8
36975: PUSH
36976: LD_INT 1
36978: ST_TO_ADDR
// if not k then
36979: LD_VAR 0 8
36983: NOT
36984: IFFALSE 36996
// k := array ;
36986: LD_ADDR_VAR 0 8
36990: PUSH
36991: LD_VAR 0 1
36995: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36996: LD_ADDR_VAR 0 10
37000: PUSH
37001: LD_VAR 0 10
37005: PPUSH
37006: LD_VAR 0 8
37010: PPUSH
37011: LD_VAR 0 1
37015: PUSH
37016: LD_VAR 0 7
37020: ARRAY
37021: PPUSH
37022: CALL_OW 1
37026: ST_TO_ADDR
// end ;
37027: GO 36940
37029: POP
37030: POP
// array := tmp ;
37031: LD_ADDR_VAR 0 1
37035: PUSH
37036: LD_VAR 0 10
37040: ST_TO_ADDR
// end ;
37041: GO 36922
37043: POP
37044: POP
// result := array ;
37045: LD_ADDR_VAR 0 5
37049: PUSH
37050: LD_VAR 0 1
37054: ST_TO_ADDR
// end ;
37055: LD_VAR 0 5
37059: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37060: LD_INT 0
37062: PPUSH
37063: PPUSH
// result := 0 ;
37064: LD_ADDR_VAR 0 3
37068: PUSH
37069: LD_INT 0
37071: ST_TO_ADDR
// if not array or not value in array then
37072: LD_VAR 0 1
37076: NOT
37077: PUSH
37078: LD_VAR 0 2
37082: PUSH
37083: LD_VAR 0 1
37087: IN
37088: NOT
37089: OR
37090: IFFALSE 37094
// exit ;
37092: GO 37148
// for i = 1 to array do
37094: LD_ADDR_VAR 0 4
37098: PUSH
37099: DOUBLE
37100: LD_INT 1
37102: DEC
37103: ST_TO_ADDR
37104: LD_VAR 0 1
37108: PUSH
37109: FOR_TO
37110: IFFALSE 37146
// if value = array [ i ] then
37112: LD_VAR 0 2
37116: PUSH
37117: LD_VAR 0 1
37121: PUSH
37122: LD_VAR 0 4
37126: ARRAY
37127: EQUAL
37128: IFFALSE 37144
// begin result := i ;
37130: LD_ADDR_VAR 0 3
37134: PUSH
37135: LD_VAR 0 4
37139: ST_TO_ADDR
// exit ;
37140: POP
37141: POP
37142: GO 37148
// end ;
37144: GO 37109
37146: POP
37147: POP
// end ;
37148: LD_VAR 0 3
37152: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37153: LD_INT 0
37155: PPUSH
// vc_chassis := chassis ;
37156: LD_ADDR_OWVAR 37
37160: PUSH
37161: LD_VAR 0 1
37165: ST_TO_ADDR
// vc_engine := engine ;
37166: LD_ADDR_OWVAR 39
37170: PUSH
37171: LD_VAR 0 2
37175: ST_TO_ADDR
// vc_control := control ;
37176: LD_ADDR_OWVAR 38
37180: PUSH
37181: LD_VAR 0 3
37185: ST_TO_ADDR
// vc_weapon := weapon ;
37186: LD_ADDR_OWVAR 40
37190: PUSH
37191: LD_VAR 0 4
37195: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37196: LD_ADDR_OWVAR 41
37200: PUSH
37201: LD_VAR 0 5
37205: ST_TO_ADDR
// end ;
37206: LD_VAR 0 6
37210: RET
// export function WantPlant ( unit ) ; var task ; begin
37211: LD_INT 0
37213: PPUSH
37214: PPUSH
// result := false ;
37215: LD_ADDR_VAR 0 2
37219: PUSH
37220: LD_INT 0
37222: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37223: LD_ADDR_VAR 0 3
37227: PUSH
37228: LD_VAR 0 1
37232: PPUSH
37233: CALL_OW 437
37237: ST_TO_ADDR
// if task then
37238: LD_VAR 0 3
37242: IFFALSE 37270
// if task [ 1 ] [ 1 ] = p then
37244: LD_VAR 0 3
37248: PUSH
37249: LD_INT 1
37251: ARRAY
37252: PUSH
37253: LD_INT 1
37255: ARRAY
37256: PUSH
37257: LD_STRING p
37259: EQUAL
37260: IFFALSE 37270
// result := true ;
37262: LD_ADDR_VAR 0 2
37266: PUSH
37267: LD_INT 1
37269: ST_TO_ADDR
// end ;
37270: LD_VAR 0 2
37274: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37275: LD_INT 0
37277: PPUSH
37278: PPUSH
37279: PPUSH
37280: PPUSH
// if pos < 1 then
37281: LD_VAR 0 2
37285: PUSH
37286: LD_INT 1
37288: LESS
37289: IFFALSE 37293
// exit ;
37291: GO 37596
// if pos = 1 then
37293: LD_VAR 0 2
37297: PUSH
37298: LD_INT 1
37300: EQUAL
37301: IFFALSE 37334
// result := Replace ( arr , pos [ 1 ] , value ) else
37303: LD_ADDR_VAR 0 4
37307: PUSH
37308: LD_VAR 0 1
37312: PPUSH
37313: LD_VAR 0 2
37317: PUSH
37318: LD_INT 1
37320: ARRAY
37321: PPUSH
37322: LD_VAR 0 3
37326: PPUSH
37327: CALL_OW 1
37331: ST_TO_ADDR
37332: GO 37596
// begin tmp := arr ;
37334: LD_ADDR_VAR 0 6
37338: PUSH
37339: LD_VAR 0 1
37343: ST_TO_ADDR
// s_arr := [ tmp ] ;
37344: LD_ADDR_VAR 0 7
37348: PUSH
37349: LD_VAR 0 6
37353: PUSH
37354: EMPTY
37355: LIST
37356: ST_TO_ADDR
// for i = 1 to pos - 1 do
37357: LD_ADDR_VAR 0 5
37361: PUSH
37362: DOUBLE
37363: LD_INT 1
37365: DEC
37366: ST_TO_ADDR
37367: LD_VAR 0 2
37371: PUSH
37372: LD_INT 1
37374: MINUS
37375: PUSH
37376: FOR_TO
37377: IFFALSE 37422
// begin tmp := tmp [ pos [ i ] ] ;
37379: LD_ADDR_VAR 0 6
37383: PUSH
37384: LD_VAR 0 6
37388: PUSH
37389: LD_VAR 0 2
37393: PUSH
37394: LD_VAR 0 5
37398: ARRAY
37399: ARRAY
37400: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37401: LD_ADDR_VAR 0 7
37405: PUSH
37406: LD_VAR 0 7
37410: PUSH
37411: LD_VAR 0 6
37415: PUSH
37416: EMPTY
37417: LIST
37418: ADD
37419: ST_TO_ADDR
// end ;
37420: GO 37376
37422: POP
37423: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37424: LD_ADDR_VAR 0 6
37428: PUSH
37429: LD_VAR 0 6
37433: PPUSH
37434: LD_VAR 0 2
37438: PUSH
37439: LD_VAR 0 2
37443: ARRAY
37444: PPUSH
37445: LD_VAR 0 3
37449: PPUSH
37450: CALL_OW 1
37454: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37455: LD_ADDR_VAR 0 7
37459: PUSH
37460: LD_VAR 0 7
37464: PPUSH
37465: LD_VAR 0 7
37469: PPUSH
37470: LD_VAR 0 6
37474: PPUSH
37475: CALL_OW 1
37479: ST_TO_ADDR
// for i = s_arr downto 2 do
37480: LD_ADDR_VAR 0 5
37484: PUSH
37485: DOUBLE
37486: LD_VAR 0 7
37490: INC
37491: ST_TO_ADDR
37492: LD_INT 2
37494: PUSH
37495: FOR_DOWNTO
37496: IFFALSE 37580
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37498: LD_ADDR_VAR 0 6
37502: PUSH
37503: LD_VAR 0 7
37507: PUSH
37508: LD_VAR 0 5
37512: PUSH
37513: LD_INT 1
37515: MINUS
37516: ARRAY
37517: PPUSH
37518: LD_VAR 0 2
37522: PUSH
37523: LD_VAR 0 5
37527: PUSH
37528: LD_INT 1
37530: MINUS
37531: ARRAY
37532: PPUSH
37533: LD_VAR 0 7
37537: PUSH
37538: LD_VAR 0 5
37542: ARRAY
37543: PPUSH
37544: CALL_OW 1
37548: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37549: LD_ADDR_VAR 0 7
37553: PUSH
37554: LD_VAR 0 7
37558: PPUSH
37559: LD_VAR 0 5
37563: PUSH
37564: LD_INT 1
37566: MINUS
37567: PPUSH
37568: LD_VAR 0 6
37572: PPUSH
37573: CALL_OW 1
37577: ST_TO_ADDR
// end ;
37578: GO 37495
37580: POP
37581: POP
// result := s_arr [ 1 ] ;
37582: LD_ADDR_VAR 0 4
37586: PUSH
37587: LD_VAR 0 7
37591: PUSH
37592: LD_INT 1
37594: ARRAY
37595: ST_TO_ADDR
// end ; end ;
37596: LD_VAR 0 4
37600: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37601: LD_INT 0
37603: PPUSH
37604: PPUSH
// if not list then
37605: LD_VAR 0 1
37609: NOT
37610: IFFALSE 37614
// exit ;
37612: GO 37705
// i := list [ pos1 ] ;
37614: LD_ADDR_VAR 0 5
37618: PUSH
37619: LD_VAR 0 1
37623: PUSH
37624: LD_VAR 0 2
37628: ARRAY
37629: ST_TO_ADDR
// if not i then
37630: LD_VAR 0 5
37634: NOT
37635: IFFALSE 37639
// exit ;
37637: GO 37705
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37639: LD_ADDR_VAR 0 1
37643: PUSH
37644: LD_VAR 0 1
37648: PPUSH
37649: LD_VAR 0 2
37653: PPUSH
37654: LD_VAR 0 1
37658: PUSH
37659: LD_VAR 0 3
37663: ARRAY
37664: PPUSH
37665: CALL_OW 1
37669: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37670: LD_ADDR_VAR 0 1
37674: PUSH
37675: LD_VAR 0 1
37679: PPUSH
37680: LD_VAR 0 3
37684: PPUSH
37685: LD_VAR 0 5
37689: PPUSH
37690: CALL_OW 1
37694: ST_TO_ADDR
// result := list ;
37695: LD_ADDR_VAR 0 4
37699: PUSH
37700: LD_VAR 0 1
37704: ST_TO_ADDR
// end ;
37705: LD_VAR 0 4
37709: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37710: LD_INT 0
37712: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37713: LD_ADDR_VAR 0 5
37717: PUSH
37718: LD_VAR 0 1
37722: PPUSH
37723: CALL_OW 250
37727: PPUSH
37728: LD_VAR 0 1
37732: PPUSH
37733: CALL_OW 251
37737: PPUSH
37738: LD_VAR 0 2
37742: PPUSH
37743: LD_VAR 0 3
37747: PPUSH
37748: LD_VAR 0 4
37752: PPUSH
37753: CALL 37763 0 5
37757: ST_TO_ADDR
// end ;
37758: LD_VAR 0 5
37762: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37763: LD_INT 0
37765: PPUSH
37766: PPUSH
37767: PPUSH
37768: PPUSH
// if not list then
37769: LD_VAR 0 3
37773: NOT
37774: IFFALSE 37778
// exit ;
37776: GO 38166
// result := [ ] ;
37778: LD_ADDR_VAR 0 6
37782: PUSH
37783: EMPTY
37784: ST_TO_ADDR
// for i in list do
37785: LD_ADDR_VAR 0 7
37789: PUSH
37790: LD_VAR 0 3
37794: PUSH
37795: FOR_IN
37796: IFFALSE 37998
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37798: LD_ADDR_VAR 0 9
37802: PUSH
37803: LD_VAR 0 7
37807: PPUSH
37808: LD_VAR 0 1
37812: PPUSH
37813: LD_VAR 0 2
37817: PPUSH
37818: CALL_OW 297
37822: ST_TO_ADDR
// if not result then
37823: LD_VAR 0 6
37827: NOT
37828: IFFALSE 37854
// result := [ [ i , tmp ] ] else
37830: LD_ADDR_VAR 0 6
37834: PUSH
37835: LD_VAR 0 7
37839: PUSH
37840: LD_VAR 0 9
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: EMPTY
37850: LIST
37851: ST_TO_ADDR
37852: GO 37996
// begin if result [ result ] [ 2 ] < tmp then
37854: LD_VAR 0 6
37858: PUSH
37859: LD_VAR 0 6
37863: ARRAY
37864: PUSH
37865: LD_INT 2
37867: ARRAY
37868: PUSH
37869: LD_VAR 0 9
37873: LESS
37874: IFFALSE 37916
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37876: LD_ADDR_VAR 0 6
37880: PUSH
37881: LD_VAR 0 6
37885: PPUSH
37886: LD_VAR 0 6
37890: PUSH
37891: LD_INT 1
37893: PLUS
37894: PPUSH
37895: LD_VAR 0 7
37899: PUSH
37900: LD_VAR 0 9
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PPUSH
37909: CALL_OW 2
37913: ST_TO_ADDR
37914: GO 37996
// for j = 1 to result do
37916: LD_ADDR_VAR 0 8
37920: PUSH
37921: DOUBLE
37922: LD_INT 1
37924: DEC
37925: ST_TO_ADDR
37926: LD_VAR 0 6
37930: PUSH
37931: FOR_TO
37932: IFFALSE 37994
// begin if tmp < result [ j ] [ 2 ] then
37934: LD_VAR 0 9
37938: PUSH
37939: LD_VAR 0 6
37943: PUSH
37944: LD_VAR 0 8
37948: ARRAY
37949: PUSH
37950: LD_INT 2
37952: ARRAY
37953: LESS
37954: IFFALSE 37992
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37956: LD_ADDR_VAR 0 6
37960: PUSH
37961: LD_VAR 0 6
37965: PPUSH
37966: LD_VAR 0 8
37970: PPUSH
37971: LD_VAR 0 7
37975: PUSH
37976: LD_VAR 0 9
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PPUSH
37985: CALL_OW 2
37989: ST_TO_ADDR
// break ;
37990: GO 37994
// end ; end ;
37992: GO 37931
37994: POP
37995: POP
// end ; end ;
37996: GO 37795
37998: POP
37999: POP
// if result and not asc then
38000: LD_VAR 0 6
38004: PUSH
38005: LD_VAR 0 4
38009: NOT
38010: AND
38011: IFFALSE 38086
// begin tmp := result ;
38013: LD_ADDR_VAR 0 9
38017: PUSH
38018: LD_VAR 0 6
38022: ST_TO_ADDR
// for i = tmp downto 1 do
38023: LD_ADDR_VAR 0 7
38027: PUSH
38028: DOUBLE
38029: LD_VAR 0 9
38033: INC
38034: ST_TO_ADDR
38035: LD_INT 1
38037: PUSH
38038: FOR_DOWNTO
38039: IFFALSE 38084
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38041: LD_ADDR_VAR 0 6
38045: PUSH
38046: LD_VAR 0 6
38050: PPUSH
38051: LD_VAR 0 9
38055: PUSH
38056: LD_VAR 0 7
38060: MINUS
38061: PUSH
38062: LD_INT 1
38064: PLUS
38065: PPUSH
38066: LD_VAR 0 9
38070: PUSH
38071: LD_VAR 0 7
38075: ARRAY
38076: PPUSH
38077: CALL_OW 1
38081: ST_TO_ADDR
38082: GO 38038
38084: POP
38085: POP
// end ; tmp := [ ] ;
38086: LD_ADDR_VAR 0 9
38090: PUSH
38091: EMPTY
38092: ST_TO_ADDR
// if mode then
38093: LD_VAR 0 5
38097: IFFALSE 38166
// begin for i = 1 to result do
38099: LD_ADDR_VAR 0 7
38103: PUSH
38104: DOUBLE
38105: LD_INT 1
38107: DEC
38108: ST_TO_ADDR
38109: LD_VAR 0 6
38113: PUSH
38114: FOR_TO
38115: IFFALSE 38154
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38117: LD_ADDR_VAR 0 9
38121: PUSH
38122: LD_VAR 0 9
38126: PPUSH
38127: LD_VAR 0 7
38131: PPUSH
38132: LD_VAR 0 6
38136: PUSH
38137: LD_VAR 0 7
38141: ARRAY
38142: PUSH
38143: LD_INT 1
38145: ARRAY
38146: PPUSH
38147: CALL_OW 1
38151: ST_TO_ADDR
38152: GO 38114
38154: POP
38155: POP
// result := tmp ;
38156: LD_ADDR_VAR 0 6
38160: PUSH
38161: LD_VAR 0 9
38165: ST_TO_ADDR
// end ; end ;
38166: LD_VAR 0 6
38170: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38171: LD_INT 0
38173: PPUSH
38174: PPUSH
38175: PPUSH
38176: PPUSH
38177: PPUSH
38178: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38179: LD_ADDR_VAR 0 5
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: LD_INT 0
38192: PUSH
38193: EMPTY
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: ST_TO_ADDR
// if not x or not y then
38201: LD_VAR 0 2
38205: NOT
38206: PUSH
38207: LD_VAR 0 3
38211: NOT
38212: OR
38213: IFFALSE 38217
// exit ;
38215: GO 39863
// if not range then
38217: LD_VAR 0 4
38221: NOT
38222: IFFALSE 38232
// range := 10 ;
38224: LD_ADDR_VAR 0 4
38228: PUSH
38229: LD_INT 10
38231: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38232: LD_ADDR_VAR 0 8
38236: PUSH
38237: LD_INT 81
38239: PUSH
38240: LD_VAR 0 1
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 92
38251: PUSH
38252: LD_VAR 0 2
38256: PUSH
38257: LD_VAR 0 3
38261: PUSH
38262: LD_VAR 0 4
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 3
38275: PUSH
38276: LD_INT 21
38278: PUSH
38279: LD_INT 3
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: LIST
38294: PPUSH
38295: CALL_OW 69
38299: ST_TO_ADDR
// if not tmp then
38300: LD_VAR 0 8
38304: NOT
38305: IFFALSE 38309
// exit ;
38307: GO 39863
// for i in tmp do
38309: LD_ADDR_VAR 0 6
38313: PUSH
38314: LD_VAR 0 8
38318: PUSH
38319: FOR_IN
38320: IFFALSE 39838
// begin points := [ 0 , 0 , 0 ] ;
38322: LD_ADDR_VAR 0 9
38326: PUSH
38327: LD_INT 0
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: LD_INT 0
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: LIST
38340: ST_TO_ADDR
// bpoints := 1 ;
38341: LD_ADDR_VAR 0 10
38345: PUSH
38346: LD_INT 1
38348: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38349: LD_VAR 0 6
38353: PPUSH
38354: CALL_OW 247
38358: PUSH
38359: LD_INT 1
38361: DOUBLE
38362: EQUAL
38363: IFTRUE 38367
38365: GO 38945
38367: POP
// begin if GetClass ( i ) = 1 then
38368: LD_VAR 0 6
38372: PPUSH
38373: CALL_OW 257
38377: PUSH
38378: LD_INT 1
38380: EQUAL
38381: IFFALSE 38402
// points := [ 10 , 5 , 3 ] ;
38383: LD_ADDR_VAR 0 9
38387: PUSH
38388: LD_INT 10
38390: PUSH
38391: LD_INT 5
38393: PUSH
38394: LD_INT 3
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: LIST
38401: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38402: LD_VAR 0 6
38406: PPUSH
38407: CALL_OW 257
38411: PUSH
38412: LD_INT 2
38414: PUSH
38415: LD_INT 3
38417: PUSH
38418: LD_INT 4
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: LIST
38425: IN
38426: IFFALSE 38447
// points := [ 3 , 2 , 1 ] ;
38428: LD_ADDR_VAR 0 9
38432: PUSH
38433: LD_INT 3
38435: PUSH
38436: LD_INT 2
38438: PUSH
38439: LD_INT 1
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: LIST
38446: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38447: LD_VAR 0 6
38451: PPUSH
38452: CALL_OW 257
38456: PUSH
38457: LD_INT 5
38459: EQUAL
38460: IFFALSE 38481
// points := [ 130 , 5 , 2 ] ;
38462: LD_ADDR_VAR 0 9
38466: PUSH
38467: LD_INT 130
38469: PUSH
38470: LD_INT 5
38472: PUSH
38473: LD_INT 2
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: LIST
38480: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38481: LD_VAR 0 6
38485: PPUSH
38486: CALL_OW 257
38490: PUSH
38491: LD_INT 8
38493: EQUAL
38494: IFFALSE 38515
// points := [ 35 , 35 , 30 ] ;
38496: LD_ADDR_VAR 0 9
38500: PUSH
38501: LD_INT 35
38503: PUSH
38504: LD_INT 35
38506: PUSH
38507: LD_INT 30
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: LIST
38514: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38515: LD_VAR 0 6
38519: PPUSH
38520: CALL_OW 257
38524: PUSH
38525: LD_INT 9
38527: EQUAL
38528: IFFALSE 38549
// points := [ 20 , 55 , 40 ] ;
38530: LD_ADDR_VAR 0 9
38534: PUSH
38535: LD_INT 20
38537: PUSH
38538: LD_INT 55
38540: PUSH
38541: LD_INT 40
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: LIST
38548: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38549: LD_VAR 0 6
38553: PPUSH
38554: CALL_OW 257
38558: PUSH
38559: LD_INT 12
38561: PUSH
38562: LD_INT 16
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: IN
38569: IFFALSE 38590
// points := [ 5 , 3 , 2 ] ;
38571: LD_ADDR_VAR 0 9
38575: PUSH
38576: LD_INT 5
38578: PUSH
38579: LD_INT 3
38581: PUSH
38582: LD_INT 2
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: LIST
38589: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38590: LD_VAR 0 6
38594: PPUSH
38595: CALL_OW 257
38599: PUSH
38600: LD_INT 17
38602: EQUAL
38603: IFFALSE 38624
// points := [ 100 , 50 , 75 ] ;
38605: LD_ADDR_VAR 0 9
38609: PUSH
38610: LD_INT 100
38612: PUSH
38613: LD_INT 50
38615: PUSH
38616: LD_INT 75
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: LIST
38623: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38624: LD_VAR 0 6
38628: PPUSH
38629: CALL_OW 257
38633: PUSH
38634: LD_INT 15
38636: EQUAL
38637: IFFALSE 38658
// points := [ 10 , 5 , 3 ] ;
38639: LD_ADDR_VAR 0 9
38643: PUSH
38644: LD_INT 10
38646: PUSH
38647: LD_INT 5
38649: PUSH
38650: LD_INT 3
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: LIST
38657: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38658: LD_VAR 0 6
38662: PPUSH
38663: CALL_OW 257
38667: PUSH
38668: LD_INT 14
38670: EQUAL
38671: IFFALSE 38692
// points := [ 10 , 0 , 0 ] ;
38673: LD_ADDR_VAR 0 9
38677: PUSH
38678: LD_INT 10
38680: PUSH
38681: LD_INT 0
38683: PUSH
38684: LD_INT 0
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: LIST
38691: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38692: LD_VAR 0 6
38696: PPUSH
38697: CALL_OW 257
38701: PUSH
38702: LD_INT 11
38704: EQUAL
38705: IFFALSE 38726
// points := [ 30 , 10 , 5 ] ;
38707: LD_ADDR_VAR 0 9
38711: PUSH
38712: LD_INT 30
38714: PUSH
38715: LD_INT 10
38717: PUSH
38718: LD_INT 5
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: LIST
38725: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38726: LD_VAR 0 1
38730: PPUSH
38731: LD_INT 5
38733: PPUSH
38734: CALL_OW 321
38738: PUSH
38739: LD_INT 2
38741: EQUAL
38742: IFFALSE 38759
// bpoints := bpoints * 1.8 ;
38744: LD_ADDR_VAR 0 10
38748: PUSH
38749: LD_VAR 0 10
38753: PUSH
38754: LD_REAL  1.80000000000000E+0000
38757: MUL
38758: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38759: LD_VAR 0 6
38763: PPUSH
38764: CALL_OW 257
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: LD_INT 2
38774: PUSH
38775: LD_INT 3
38777: PUSH
38778: LD_INT 4
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: IN
38787: PUSH
38788: LD_VAR 0 1
38792: PPUSH
38793: LD_INT 51
38795: PPUSH
38796: CALL_OW 321
38800: PUSH
38801: LD_INT 2
38803: EQUAL
38804: AND
38805: IFFALSE 38822
// bpoints := bpoints * 1.2 ;
38807: LD_ADDR_VAR 0 10
38811: PUSH
38812: LD_VAR 0 10
38816: PUSH
38817: LD_REAL  1.20000000000000E+0000
38820: MUL
38821: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38822: LD_VAR 0 6
38826: PPUSH
38827: CALL_OW 257
38831: PUSH
38832: LD_INT 5
38834: PUSH
38835: LD_INT 7
38837: PUSH
38838: LD_INT 9
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: LIST
38845: IN
38846: PUSH
38847: LD_VAR 0 1
38851: PPUSH
38852: LD_INT 52
38854: PPUSH
38855: CALL_OW 321
38859: PUSH
38860: LD_INT 2
38862: EQUAL
38863: AND
38864: IFFALSE 38881
// bpoints := bpoints * 1.5 ;
38866: LD_ADDR_VAR 0 10
38870: PUSH
38871: LD_VAR 0 10
38875: PUSH
38876: LD_REAL  1.50000000000000E+0000
38879: MUL
38880: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38881: LD_VAR 0 1
38885: PPUSH
38886: LD_INT 66
38888: PPUSH
38889: CALL_OW 321
38893: PUSH
38894: LD_INT 2
38896: EQUAL
38897: IFFALSE 38914
// bpoints := bpoints * 1.1 ;
38899: LD_ADDR_VAR 0 10
38903: PUSH
38904: LD_VAR 0 10
38908: PUSH
38909: LD_REAL  1.10000000000000E+0000
38912: MUL
38913: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38914: LD_ADDR_VAR 0 10
38918: PUSH
38919: LD_VAR 0 10
38923: PUSH
38924: LD_VAR 0 6
38928: PPUSH
38929: LD_INT 1
38931: PPUSH
38932: CALL_OW 259
38936: PUSH
38937: LD_REAL  1.15000000000000E+0000
38940: MUL
38941: MUL
38942: ST_TO_ADDR
// end ; unit_vehicle :
38943: GO 39767
38945: LD_INT 2
38947: DOUBLE
38948: EQUAL
38949: IFTRUE 38953
38951: GO 39755
38953: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38954: LD_VAR 0 6
38958: PPUSH
38959: CALL_OW 264
38963: PUSH
38964: LD_INT 2
38966: PUSH
38967: LD_INT 42
38969: PUSH
38970: LD_INT 24
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: LIST
38977: IN
38978: IFFALSE 38999
// points := [ 25 , 5 , 3 ] ;
38980: LD_ADDR_VAR 0 9
38984: PUSH
38985: LD_INT 25
38987: PUSH
38988: LD_INT 5
38990: PUSH
38991: LD_INT 3
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: LIST
38998: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38999: LD_VAR 0 6
39003: PPUSH
39004: CALL_OW 264
39008: PUSH
39009: LD_INT 4
39011: PUSH
39012: LD_INT 43
39014: PUSH
39015: LD_INT 25
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: LIST
39022: IN
39023: IFFALSE 39044
// points := [ 40 , 15 , 5 ] ;
39025: LD_ADDR_VAR 0 9
39029: PUSH
39030: LD_INT 40
39032: PUSH
39033: LD_INT 15
39035: PUSH
39036: LD_INT 5
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: LIST
39043: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39044: LD_VAR 0 6
39048: PPUSH
39049: CALL_OW 264
39053: PUSH
39054: LD_INT 3
39056: PUSH
39057: LD_INT 23
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: IN
39064: IFFALSE 39085
// points := [ 7 , 25 , 8 ] ;
39066: LD_ADDR_VAR 0 9
39070: PUSH
39071: LD_INT 7
39073: PUSH
39074: LD_INT 25
39076: PUSH
39077: LD_INT 8
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: LIST
39084: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39085: LD_VAR 0 6
39089: PPUSH
39090: CALL_OW 264
39094: PUSH
39095: LD_INT 5
39097: PUSH
39098: LD_INT 27
39100: PUSH
39101: LD_INT 44
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: LIST
39108: IN
39109: IFFALSE 39130
// points := [ 14 , 50 , 16 ] ;
39111: LD_ADDR_VAR 0 9
39115: PUSH
39116: LD_INT 14
39118: PUSH
39119: LD_INT 50
39121: PUSH
39122: LD_INT 16
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: LIST
39129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39130: LD_VAR 0 6
39134: PPUSH
39135: CALL_OW 264
39139: PUSH
39140: LD_INT 6
39142: PUSH
39143: LD_INT 46
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: IN
39150: IFFALSE 39171
// points := [ 32 , 120 , 70 ] ;
39152: LD_ADDR_VAR 0 9
39156: PUSH
39157: LD_INT 32
39159: PUSH
39160: LD_INT 120
39162: PUSH
39163: LD_INT 70
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: LIST
39170: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
39171: LD_VAR 0 6
39175: PPUSH
39176: CALL_OW 264
39180: PUSH
39181: LD_INT 7
39183: PUSH
39184: LD_INT 28
39186: PUSH
39187: LD_INT 45
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: LIST
39194: IN
39195: IFFALSE 39216
// points := [ 35 , 20 , 45 ] ;
39197: LD_ADDR_VAR 0 9
39201: PUSH
39202: LD_INT 35
39204: PUSH
39205: LD_INT 20
39207: PUSH
39208: LD_INT 45
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: LIST
39215: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39216: LD_VAR 0 6
39220: PPUSH
39221: CALL_OW 264
39225: PUSH
39226: LD_INT 47
39228: PUSH
39229: EMPTY
39230: LIST
39231: IN
39232: IFFALSE 39253
// points := [ 67 , 45 , 75 ] ;
39234: LD_ADDR_VAR 0 9
39238: PUSH
39239: LD_INT 67
39241: PUSH
39242: LD_INT 45
39244: PUSH
39245: LD_INT 75
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: LIST
39252: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39253: LD_VAR 0 6
39257: PPUSH
39258: CALL_OW 264
39262: PUSH
39263: LD_INT 26
39265: PUSH
39266: EMPTY
39267: LIST
39268: IN
39269: IFFALSE 39290
// points := [ 120 , 30 , 80 ] ;
39271: LD_ADDR_VAR 0 9
39275: PUSH
39276: LD_INT 120
39278: PUSH
39279: LD_INT 30
39281: PUSH
39282: LD_INT 80
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: LIST
39289: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39290: LD_VAR 0 6
39294: PPUSH
39295: CALL_OW 264
39299: PUSH
39300: LD_INT 22
39302: PUSH
39303: EMPTY
39304: LIST
39305: IN
39306: IFFALSE 39327
// points := [ 40 , 1 , 1 ] ;
39308: LD_ADDR_VAR 0 9
39312: PUSH
39313: LD_INT 40
39315: PUSH
39316: LD_INT 1
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: LIST
39326: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39327: LD_VAR 0 6
39331: PPUSH
39332: CALL_OW 264
39336: PUSH
39337: LD_INT 29
39339: PUSH
39340: EMPTY
39341: LIST
39342: IN
39343: IFFALSE 39364
// points := [ 70 , 200 , 400 ] ;
39345: LD_ADDR_VAR 0 9
39349: PUSH
39350: LD_INT 70
39352: PUSH
39353: LD_INT 200
39355: PUSH
39356: LD_INT 400
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: LIST
39363: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39364: LD_VAR 0 6
39368: PPUSH
39369: CALL_OW 264
39373: PUSH
39374: LD_INT 14
39376: PUSH
39377: LD_INT 53
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: IN
39384: IFFALSE 39405
// points := [ 40 , 10 , 20 ] ;
39386: LD_ADDR_VAR 0 9
39390: PUSH
39391: LD_INT 40
39393: PUSH
39394: LD_INT 10
39396: PUSH
39397: LD_INT 20
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: LIST
39404: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39405: LD_VAR 0 6
39409: PPUSH
39410: CALL_OW 264
39414: PUSH
39415: LD_INT 9
39417: PUSH
39418: EMPTY
39419: LIST
39420: IN
39421: IFFALSE 39442
// points := [ 5 , 70 , 20 ] ;
39423: LD_ADDR_VAR 0 9
39427: PUSH
39428: LD_INT 5
39430: PUSH
39431: LD_INT 70
39433: PUSH
39434: LD_INT 20
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: LIST
39441: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39442: LD_VAR 0 6
39446: PPUSH
39447: CALL_OW 264
39451: PUSH
39452: LD_INT 10
39454: PUSH
39455: EMPTY
39456: LIST
39457: IN
39458: IFFALSE 39479
// points := [ 35 , 110 , 70 ] ;
39460: LD_ADDR_VAR 0 9
39464: PUSH
39465: LD_INT 35
39467: PUSH
39468: LD_INT 110
39470: PUSH
39471: LD_INT 70
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: LIST
39478: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39479: LD_VAR 0 6
39483: PPUSH
39484: CALL_OW 265
39488: PUSH
39489: LD_INT 25
39491: EQUAL
39492: IFFALSE 39513
// points := [ 80 , 65 , 100 ] ;
39494: LD_ADDR_VAR 0 9
39498: PUSH
39499: LD_INT 80
39501: PUSH
39502: LD_INT 65
39504: PUSH
39505: LD_INT 100
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: LIST
39512: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39513: LD_VAR 0 6
39517: PPUSH
39518: CALL_OW 263
39522: PUSH
39523: LD_INT 1
39525: EQUAL
39526: IFFALSE 39561
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39528: LD_ADDR_VAR 0 10
39532: PUSH
39533: LD_VAR 0 10
39537: PUSH
39538: LD_VAR 0 6
39542: PPUSH
39543: CALL_OW 311
39547: PPUSH
39548: LD_INT 3
39550: PPUSH
39551: CALL_OW 259
39555: PUSH
39556: LD_INT 4
39558: MUL
39559: MUL
39560: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39561: LD_VAR 0 6
39565: PPUSH
39566: CALL_OW 263
39570: PUSH
39571: LD_INT 2
39573: EQUAL
39574: IFFALSE 39625
// begin j := IsControledBy ( i ) ;
39576: LD_ADDR_VAR 0 7
39580: PUSH
39581: LD_VAR 0 6
39585: PPUSH
39586: CALL_OW 312
39590: ST_TO_ADDR
// if j then
39591: LD_VAR 0 7
39595: IFFALSE 39625
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39597: LD_ADDR_VAR 0 10
39601: PUSH
39602: LD_VAR 0 10
39606: PUSH
39607: LD_VAR 0 7
39611: PPUSH
39612: LD_INT 3
39614: PPUSH
39615: CALL_OW 259
39619: PUSH
39620: LD_INT 3
39622: MUL
39623: MUL
39624: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39625: LD_VAR 0 6
39629: PPUSH
39630: CALL_OW 264
39634: PUSH
39635: LD_INT 5
39637: PUSH
39638: LD_INT 6
39640: PUSH
39641: LD_INT 46
39643: PUSH
39644: LD_INT 44
39646: PUSH
39647: LD_INT 47
39649: PUSH
39650: LD_INT 45
39652: PUSH
39653: LD_INT 28
39655: PUSH
39656: LD_INT 7
39658: PUSH
39659: LD_INT 27
39661: PUSH
39662: LD_INT 29
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: IN
39677: PUSH
39678: LD_VAR 0 1
39682: PPUSH
39683: LD_INT 52
39685: PPUSH
39686: CALL_OW 321
39690: PUSH
39691: LD_INT 2
39693: EQUAL
39694: AND
39695: IFFALSE 39712
// bpoints := bpoints * 1.2 ;
39697: LD_ADDR_VAR 0 10
39701: PUSH
39702: LD_VAR 0 10
39706: PUSH
39707: LD_REAL  1.20000000000000E+0000
39710: MUL
39711: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39712: LD_VAR 0 6
39716: PPUSH
39717: CALL_OW 264
39721: PUSH
39722: LD_INT 6
39724: PUSH
39725: LD_INT 46
39727: PUSH
39728: LD_INT 47
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: LIST
39735: IN
39736: IFFALSE 39753
// bpoints := bpoints * 1.2 ;
39738: LD_ADDR_VAR 0 10
39742: PUSH
39743: LD_VAR 0 10
39747: PUSH
39748: LD_REAL  1.20000000000000E+0000
39751: MUL
39752: ST_TO_ADDR
// end ; unit_building :
39753: GO 39767
39755: LD_INT 3
39757: DOUBLE
39758: EQUAL
39759: IFTRUE 39763
39761: GO 39766
39763: POP
// ; end ;
39764: GO 39767
39766: POP
// for j = 1 to 3 do
39767: LD_ADDR_VAR 0 7
39771: PUSH
39772: DOUBLE
39773: LD_INT 1
39775: DEC
39776: ST_TO_ADDR
39777: LD_INT 3
39779: PUSH
39780: FOR_TO
39781: IFFALSE 39834
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39783: LD_ADDR_VAR 0 5
39787: PUSH
39788: LD_VAR 0 5
39792: PPUSH
39793: LD_VAR 0 7
39797: PPUSH
39798: LD_VAR 0 5
39802: PUSH
39803: LD_VAR 0 7
39807: ARRAY
39808: PUSH
39809: LD_VAR 0 9
39813: PUSH
39814: LD_VAR 0 7
39818: ARRAY
39819: PUSH
39820: LD_VAR 0 10
39824: MUL
39825: PLUS
39826: PPUSH
39827: CALL_OW 1
39831: ST_TO_ADDR
39832: GO 39780
39834: POP
39835: POP
// end ;
39836: GO 38319
39838: POP
39839: POP
// result := Replace ( result , 4 , tmp ) ;
39840: LD_ADDR_VAR 0 5
39844: PUSH
39845: LD_VAR 0 5
39849: PPUSH
39850: LD_INT 4
39852: PPUSH
39853: LD_VAR 0 8
39857: PPUSH
39858: CALL_OW 1
39862: ST_TO_ADDR
// end ;
39863: LD_VAR 0 5
39867: RET
// export function DangerAtRange ( unit , range ) ; begin
39868: LD_INT 0
39870: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39871: LD_ADDR_VAR 0 3
39875: PUSH
39876: LD_VAR 0 1
39880: PPUSH
39881: CALL_OW 255
39885: PPUSH
39886: LD_VAR 0 1
39890: PPUSH
39891: CALL_OW 250
39895: PPUSH
39896: LD_VAR 0 1
39900: PPUSH
39901: CALL_OW 251
39905: PPUSH
39906: LD_VAR 0 2
39910: PPUSH
39911: CALL 38171 0 4
39915: ST_TO_ADDR
// end ;
39916: LD_VAR 0 3
39920: RET
// export function DangerInArea ( side , area ) ; begin
39921: LD_INT 0
39923: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39924: LD_ADDR_VAR 0 3
39928: PUSH
39929: LD_VAR 0 2
39933: PPUSH
39934: LD_INT 81
39936: PUSH
39937: LD_VAR 0 1
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PPUSH
39946: CALL_OW 70
39950: ST_TO_ADDR
// end ;
39951: LD_VAR 0 3
39955: RET
// export function IsExtension ( b ) ; begin
39956: LD_INT 0
39958: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39959: LD_ADDR_VAR 0 2
39963: PUSH
39964: LD_VAR 0 1
39968: PUSH
39969: LD_INT 23
39971: PUSH
39972: LD_INT 20
39974: PUSH
39975: LD_INT 22
39977: PUSH
39978: LD_INT 17
39980: PUSH
39981: LD_INT 24
39983: PUSH
39984: LD_INT 21
39986: PUSH
39987: LD_INT 19
39989: PUSH
39990: LD_INT 16
39992: PUSH
39993: LD_INT 25
39995: PUSH
39996: LD_INT 18
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: IN
40011: ST_TO_ADDR
// end ;
40012: LD_VAR 0 2
40016: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40017: LD_INT 0
40019: PPUSH
40020: PPUSH
40021: PPUSH
// result := [ ] ;
40022: LD_ADDR_VAR 0 4
40026: PUSH
40027: EMPTY
40028: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40029: LD_ADDR_VAR 0 5
40033: PUSH
40034: LD_VAR 0 2
40038: PPUSH
40039: LD_INT 21
40041: PUSH
40042: LD_INT 3
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PPUSH
40049: CALL_OW 70
40053: ST_TO_ADDR
// if not tmp then
40054: LD_VAR 0 5
40058: NOT
40059: IFFALSE 40063
// exit ;
40061: GO 40127
// if checkLink then
40063: LD_VAR 0 3
40067: IFFALSE 40117
// begin for i in tmp do
40069: LD_ADDR_VAR 0 6
40073: PUSH
40074: LD_VAR 0 5
40078: PUSH
40079: FOR_IN
40080: IFFALSE 40115
// if GetBase ( i ) <> base then
40082: LD_VAR 0 6
40086: PPUSH
40087: CALL_OW 274
40091: PUSH
40092: LD_VAR 0 1
40096: NONEQUAL
40097: IFFALSE 40113
// ComLinkToBase ( base , i ) ;
40099: LD_VAR 0 1
40103: PPUSH
40104: LD_VAR 0 6
40108: PPUSH
40109: CALL_OW 169
40113: GO 40079
40115: POP
40116: POP
// end ; result := tmp ;
40117: LD_ADDR_VAR 0 4
40121: PUSH
40122: LD_VAR 0 5
40126: ST_TO_ADDR
// end ;
40127: LD_VAR 0 4
40131: RET
// export function ComComplete ( units , b ) ; var i ; begin
40132: LD_INT 0
40134: PPUSH
40135: PPUSH
// if not units then
40136: LD_VAR 0 1
40140: NOT
40141: IFFALSE 40145
// exit ;
40143: GO 40235
// for i in units do
40145: LD_ADDR_VAR 0 4
40149: PUSH
40150: LD_VAR 0 1
40154: PUSH
40155: FOR_IN
40156: IFFALSE 40233
// if BuildingStatus ( b ) = bs_build then
40158: LD_VAR 0 2
40162: PPUSH
40163: CALL_OW 461
40167: PUSH
40168: LD_INT 1
40170: EQUAL
40171: IFFALSE 40231
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40173: LD_VAR 0 4
40177: PPUSH
40178: LD_STRING h
40180: PUSH
40181: LD_VAR 0 2
40185: PPUSH
40186: CALL_OW 250
40190: PUSH
40191: LD_VAR 0 2
40195: PPUSH
40196: CALL_OW 251
40200: PUSH
40201: LD_VAR 0 2
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: LD_INT 0
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: PUSH
40224: EMPTY
40225: LIST
40226: PPUSH
40227: CALL_OW 446
40231: GO 40155
40233: POP
40234: POP
// end ;
40235: LD_VAR 0 3
40239: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40240: LD_INT 0
40242: PPUSH
40243: PPUSH
40244: PPUSH
40245: PPUSH
40246: PPUSH
40247: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
40248: LD_VAR 0 1
40252: NOT
40253: PUSH
40254: LD_VAR 0 1
40258: PPUSH
40259: CALL_OW 263
40263: PUSH
40264: LD_INT 2
40266: EQUAL
40267: NOT
40268: OR
40269: IFFALSE 40273
// exit ;
40271: GO 40589
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40273: LD_ADDR_VAR 0 6
40277: PUSH
40278: LD_INT 22
40280: PUSH
40281: LD_VAR 0 1
40285: PPUSH
40286: CALL_OW 255
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 2
40297: PUSH
40298: LD_INT 30
40300: PUSH
40301: LD_INT 36
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 34
40310: PUSH
40311: LD_INT 31
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: LIST
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PPUSH
40327: CALL_OW 69
40331: ST_TO_ADDR
// if not tmp then
40332: LD_VAR 0 6
40336: NOT
40337: IFFALSE 40341
// exit ;
40339: GO 40589
// result := [ ] ;
40341: LD_ADDR_VAR 0 2
40345: PUSH
40346: EMPTY
40347: ST_TO_ADDR
// for i in tmp do
40348: LD_ADDR_VAR 0 3
40352: PUSH
40353: LD_VAR 0 6
40357: PUSH
40358: FOR_IN
40359: IFFALSE 40430
// begin t := UnitsInside ( i ) ;
40361: LD_ADDR_VAR 0 4
40365: PUSH
40366: LD_VAR 0 3
40370: PPUSH
40371: CALL_OW 313
40375: ST_TO_ADDR
// if t then
40376: LD_VAR 0 4
40380: IFFALSE 40428
// for j in t do
40382: LD_ADDR_VAR 0 7
40386: PUSH
40387: LD_VAR 0 4
40391: PUSH
40392: FOR_IN
40393: IFFALSE 40426
// result := Insert ( result , result + 1 , j ) ;
40395: LD_ADDR_VAR 0 2
40399: PUSH
40400: LD_VAR 0 2
40404: PPUSH
40405: LD_VAR 0 2
40409: PUSH
40410: LD_INT 1
40412: PLUS
40413: PPUSH
40414: LD_VAR 0 7
40418: PPUSH
40419: CALL_OW 2
40423: ST_TO_ADDR
40424: GO 40392
40426: POP
40427: POP
// end ;
40428: GO 40358
40430: POP
40431: POP
// if not result then
40432: LD_VAR 0 2
40436: NOT
40437: IFFALSE 40441
// exit ;
40439: GO 40589
// mech := result [ 1 ] ;
40441: LD_ADDR_VAR 0 5
40445: PUSH
40446: LD_VAR 0 2
40450: PUSH
40451: LD_INT 1
40453: ARRAY
40454: ST_TO_ADDR
// if result > 1 then
40455: LD_VAR 0 2
40459: PUSH
40460: LD_INT 1
40462: GREATER
40463: IFFALSE 40575
// for i = 2 to result do
40465: LD_ADDR_VAR 0 3
40469: PUSH
40470: DOUBLE
40471: LD_INT 2
40473: DEC
40474: ST_TO_ADDR
40475: LD_VAR 0 2
40479: PUSH
40480: FOR_TO
40481: IFFALSE 40573
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40483: LD_ADDR_VAR 0 4
40487: PUSH
40488: LD_VAR 0 2
40492: PUSH
40493: LD_VAR 0 3
40497: ARRAY
40498: PPUSH
40499: LD_INT 3
40501: PPUSH
40502: CALL_OW 259
40506: PUSH
40507: LD_VAR 0 2
40511: PUSH
40512: LD_VAR 0 3
40516: ARRAY
40517: PPUSH
40518: CALL_OW 432
40522: MINUS
40523: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40524: LD_VAR 0 4
40528: PUSH
40529: LD_VAR 0 5
40533: PPUSH
40534: LD_INT 3
40536: PPUSH
40537: CALL_OW 259
40541: PUSH
40542: LD_VAR 0 5
40546: PPUSH
40547: CALL_OW 432
40551: MINUS
40552: GREATEREQUAL
40553: IFFALSE 40571
// mech := result [ i ] ;
40555: LD_ADDR_VAR 0 5
40559: PUSH
40560: LD_VAR 0 2
40564: PUSH
40565: LD_VAR 0 3
40569: ARRAY
40570: ST_TO_ADDR
// end ;
40571: GO 40480
40573: POP
40574: POP
// ComLinkTo ( vehicle , mech ) ;
40575: LD_VAR 0 1
40579: PPUSH
40580: LD_VAR 0 5
40584: PPUSH
40585: CALL_OW 135
// end ;
40589: LD_VAR 0 2
40593: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40594: LD_INT 0
40596: PPUSH
40597: PPUSH
40598: PPUSH
40599: PPUSH
40600: PPUSH
40601: PPUSH
40602: PPUSH
40603: PPUSH
40604: PPUSH
40605: PPUSH
40606: PPUSH
40607: PPUSH
40608: PPUSH
// result := [ ] ;
40609: LD_ADDR_VAR 0 7
40613: PUSH
40614: EMPTY
40615: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40616: LD_VAR 0 1
40620: PPUSH
40621: CALL_OW 266
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: LD_INT 1
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: IN
40636: NOT
40637: IFFALSE 40641
// exit ;
40639: GO 42275
// if name then
40641: LD_VAR 0 3
40645: IFFALSE 40661
// SetBName ( base_dep , name ) ;
40647: LD_VAR 0 1
40651: PPUSH
40652: LD_VAR 0 3
40656: PPUSH
40657: CALL_OW 500
// base := GetBase ( base_dep ) ;
40661: LD_ADDR_VAR 0 15
40665: PUSH
40666: LD_VAR 0 1
40670: PPUSH
40671: CALL_OW 274
40675: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40676: LD_ADDR_VAR 0 16
40680: PUSH
40681: LD_VAR 0 1
40685: PPUSH
40686: CALL_OW 255
40690: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40691: LD_ADDR_VAR 0 17
40695: PUSH
40696: LD_VAR 0 1
40700: PPUSH
40701: CALL_OW 248
40705: ST_TO_ADDR
// if sources then
40706: LD_VAR 0 5
40710: IFFALSE 40757
// for i = 1 to 3 do
40712: LD_ADDR_VAR 0 8
40716: PUSH
40717: DOUBLE
40718: LD_INT 1
40720: DEC
40721: ST_TO_ADDR
40722: LD_INT 3
40724: PUSH
40725: FOR_TO
40726: IFFALSE 40755
// AddResourceType ( base , i , sources [ i ] ) ;
40728: LD_VAR 0 15
40732: PPUSH
40733: LD_VAR 0 8
40737: PPUSH
40738: LD_VAR 0 5
40742: PUSH
40743: LD_VAR 0 8
40747: ARRAY
40748: PPUSH
40749: CALL_OW 276
40753: GO 40725
40755: POP
40756: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40757: LD_ADDR_VAR 0 18
40761: PUSH
40762: LD_VAR 0 15
40766: PPUSH
40767: LD_VAR 0 2
40771: PPUSH
40772: LD_INT 1
40774: PPUSH
40775: CALL 40017 0 3
40779: ST_TO_ADDR
// InitHc ;
40780: CALL_OW 19
// InitUc ;
40784: CALL_OW 18
// uc_side := side ;
40788: LD_ADDR_OWVAR 20
40792: PUSH
40793: LD_VAR 0 16
40797: ST_TO_ADDR
// uc_nation := nation ;
40798: LD_ADDR_OWVAR 21
40802: PUSH
40803: LD_VAR 0 17
40807: ST_TO_ADDR
// if buildings then
40808: LD_VAR 0 18
40812: IFFALSE 42134
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40814: LD_ADDR_VAR 0 19
40818: PUSH
40819: LD_VAR 0 18
40823: PPUSH
40824: LD_INT 2
40826: PUSH
40827: LD_INT 30
40829: PUSH
40830: LD_INT 29
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 30
40839: PUSH
40840: LD_INT 30
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: LIST
40851: PPUSH
40852: CALL_OW 72
40856: ST_TO_ADDR
// if tmp then
40857: LD_VAR 0 19
40861: IFFALSE 40909
// for i in tmp do
40863: LD_ADDR_VAR 0 8
40867: PUSH
40868: LD_VAR 0 19
40872: PUSH
40873: FOR_IN
40874: IFFALSE 40907
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40876: LD_VAR 0 8
40880: PPUSH
40881: CALL_OW 250
40885: PPUSH
40886: LD_VAR 0 8
40890: PPUSH
40891: CALL_OW 251
40895: PPUSH
40896: LD_VAR 0 16
40900: PPUSH
40901: CALL_OW 441
40905: GO 40873
40907: POP
40908: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40909: LD_VAR 0 18
40913: PPUSH
40914: LD_INT 2
40916: PUSH
40917: LD_INT 30
40919: PUSH
40920: LD_INT 32
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 30
40929: PUSH
40930: LD_INT 33
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: LIST
40941: PPUSH
40942: CALL_OW 72
40946: IFFALSE 41034
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40948: LD_ADDR_VAR 0 8
40952: PUSH
40953: LD_VAR 0 18
40957: PPUSH
40958: LD_INT 2
40960: PUSH
40961: LD_INT 30
40963: PUSH
40964: LD_INT 32
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 30
40973: PUSH
40974: LD_INT 33
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: LIST
40985: PPUSH
40986: CALL_OW 72
40990: PUSH
40991: FOR_IN
40992: IFFALSE 41032
// begin if not GetBWeapon ( i ) then
40994: LD_VAR 0 8
40998: PPUSH
40999: CALL_OW 269
41003: NOT
41004: IFFALSE 41030
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41006: LD_VAR 0 8
41010: PPUSH
41011: LD_VAR 0 8
41015: PPUSH
41016: LD_VAR 0 2
41020: PPUSH
41021: CALL 42280 0 2
41025: PPUSH
41026: CALL_OW 431
// end ;
41030: GO 40991
41032: POP
41033: POP
// end ; for i = 1 to personel do
41034: LD_ADDR_VAR 0 8
41038: PUSH
41039: DOUBLE
41040: LD_INT 1
41042: DEC
41043: ST_TO_ADDR
41044: LD_VAR 0 6
41048: PUSH
41049: FOR_TO
41050: IFFALSE 42114
// begin if i > 4 then
41052: LD_VAR 0 8
41056: PUSH
41057: LD_INT 4
41059: GREATER
41060: IFFALSE 41064
// break ;
41062: GO 42114
// case i of 1 :
41064: LD_VAR 0 8
41068: PUSH
41069: LD_INT 1
41071: DOUBLE
41072: EQUAL
41073: IFTRUE 41077
41075: GO 41157
41077: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41078: LD_ADDR_VAR 0 12
41082: PUSH
41083: LD_VAR 0 18
41087: PPUSH
41088: LD_INT 22
41090: PUSH
41091: LD_VAR 0 16
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 58
41102: PUSH
41103: EMPTY
41104: LIST
41105: PUSH
41106: LD_INT 2
41108: PUSH
41109: LD_INT 30
41111: PUSH
41112: LD_INT 32
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 30
41121: PUSH
41122: LD_INT 4
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 30
41131: PUSH
41132: LD_INT 5
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: LIST
41149: PPUSH
41150: CALL_OW 72
41154: ST_TO_ADDR
41155: GO 41379
41157: LD_INT 2
41159: DOUBLE
41160: EQUAL
41161: IFTRUE 41165
41163: GO 41227
41165: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41166: LD_ADDR_VAR 0 12
41170: PUSH
41171: LD_VAR 0 18
41175: PPUSH
41176: LD_INT 22
41178: PUSH
41179: LD_VAR 0 16
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 2
41190: PUSH
41191: LD_INT 30
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 30
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: LIST
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PPUSH
41220: CALL_OW 72
41224: ST_TO_ADDR
41225: GO 41379
41227: LD_INT 3
41229: DOUBLE
41230: EQUAL
41231: IFTRUE 41235
41233: GO 41297
41235: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41236: LD_ADDR_VAR 0 12
41240: PUSH
41241: LD_VAR 0 18
41245: PPUSH
41246: LD_INT 22
41248: PUSH
41249: LD_VAR 0 16
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 2
41260: PUSH
41261: LD_INT 30
41263: PUSH
41264: LD_INT 2
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 30
41273: PUSH
41274: LD_INT 3
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: LIST
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PPUSH
41290: CALL_OW 72
41294: ST_TO_ADDR
41295: GO 41379
41297: LD_INT 4
41299: DOUBLE
41300: EQUAL
41301: IFTRUE 41305
41303: GO 41378
41305: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41306: LD_ADDR_VAR 0 12
41310: PUSH
41311: LD_VAR 0 18
41315: PPUSH
41316: LD_INT 22
41318: PUSH
41319: LD_VAR 0 16
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 2
41330: PUSH
41331: LD_INT 30
41333: PUSH
41334: LD_INT 6
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 30
41343: PUSH
41344: LD_INT 7
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 30
41353: PUSH
41354: LD_INT 8
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PPUSH
41371: CALL_OW 72
41375: ST_TO_ADDR
41376: GO 41379
41378: POP
// if i = 1 then
41379: LD_VAR 0 8
41383: PUSH
41384: LD_INT 1
41386: EQUAL
41387: IFFALSE 41498
// begin tmp := [ ] ;
41389: LD_ADDR_VAR 0 19
41393: PUSH
41394: EMPTY
41395: ST_TO_ADDR
// for j in f do
41396: LD_ADDR_VAR 0 9
41400: PUSH
41401: LD_VAR 0 12
41405: PUSH
41406: FOR_IN
41407: IFFALSE 41480
// if GetBType ( j ) = b_bunker then
41409: LD_VAR 0 9
41413: PPUSH
41414: CALL_OW 266
41418: PUSH
41419: LD_INT 32
41421: EQUAL
41422: IFFALSE 41449
// tmp := Insert ( tmp , 1 , j ) else
41424: LD_ADDR_VAR 0 19
41428: PUSH
41429: LD_VAR 0 19
41433: PPUSH
41434: LD_INT 1
41436: PPUSH
41437: LD_VAR 0 9
41441: PPUSH
41442: CALL_OW 2
41446: ST_TO_ADDR
41447: GO 41478
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41449: LD_ADDR_VAR 0 19
41453: PUSH
41454: LD_VAR 0 19
41458: PPUSH
41459: LD_VAR 0 19
41463: PUSH
41464: LD_INT 1
41466: PLUS
41467: PPUSH
41468: LD_VAR 0 9
41472: PPUSH
41473: CALL_OW 2
41477: ST_TO_ADDR
41478: GO 41406
41480: POP
41481: POP
// if tmp then
41482: LD_VAR 0 19
41486: IFFALSE 41498
// f := tmp ;
41488: LD_ADDR_VAR 0 12
41492: PUSH
41493: LD_VAR 0 19
41497: ST_TO_ADDR
// end ; x := personel [ i ] ;
41498: LD_ADDR_VAR 0 13
41502: PUSH
41503: LD_VAR 0 6
41507: PUSH
41508: LD_VAR 0 8
41512: ARRAY
41513: ST_TO_ADDR
// if x = - 1 then
41514: LD_VAR 0 13
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: EQUAL
41523: IFFALSE 41732
// begin for j in f do
41525: LD_ADDR_VAR 0 9
41529: PUSH
41530: LD_VAR 0 12
41534: PUSH
41535: FOR_IN
41536: IFFALSE 41728
// repeat InitHc ;
41538: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41542: LD_VAR 0 9
41546: PPUSH
41547: CALL_OW 266
41551: PUSH
41552: LD_INT 5
41554: EQUAL
41555: IFFALSE 41625
// begin if UnitsInside ( j ) < 3 then
41557: LD_VAR 0 9
41561: PPUSH
41562: CALL_OW 313
41566: PUSH
41567: LD_INT 3
41569: LESS
41570: IFFALSE 41606
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41572: LD_INT 0
41574: PPUSH
41575: LD_INT 5
41577: PUSH
41578: LD_INT 8
41580: PUSH
41581: LD_INT 9
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: LIST
41588: PUSH
41589: LD_VAR 0 17
41593: ARRAY
41594: PPUSH
41595: LD_VAR 0 4
41599: PPUSH
41600: CALL_OW 380
41604: GO 41623
// PrepareHuman ( false , i , skill ) ;
41606: LD_INT 0
41608: PPUSH
41609: LD_VAR 0 8
41613: PPUSH
41614: LD_VAR 0 4
41618: PPUSH
41619: CALL_OW 380
// end else
41623: GO 41642
// PrepareHuman ( false , i , skill ) ;
41625: LD_INT 0
41627: PPUSH
41628: LD_VAR 0 8
41632: PPUSH
41633: LD_VAR 0 4
41637: PPUSH
41638: CALL_OW 380
// un := CreateHuman ;
41642: LD_ADDR_VAR 0 14
41646: PUSH
41647: CALL_OW 44
41651: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41652: LD_ADDR_VAR 0 7
41656: PUSH
41657: LD_VAR 0 7
41661: PPUSH
41662: LD_INT 1
41664: PPUSH
41665: LD_VAR 0 14
41669: PPUSH
41670: CALL_OW 2
41674: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41675: LD_VAR 0 14
41679: PPUSH
41680: LD_VAR 0 9
41684: PPUSH
41685: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41689: LD_VAR 0 9
41693: PPUSH
41694: CALL_OW 313
41698: PUSH
41699: LD_INT 6
41701: EQUAL
41702: PUSH
41703: LD_VAR 0 9
41707: PPUSH
41708: CALL_OW 266
41712: PUSH
41713: LD_INT 32
41715: PUSH
41716: LD_INT 31
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: IN
41723: OR
41724: IFFALSE 41538
41726: GO 41535
41728: POP
41729: POP
// end else
41730: GO 42112
// for j = 1 to x do
41732: LD_ADDR_VAR 0 9
41736: PUSH
41737: DOUBLE
41738: LD_INT 1
41740: DEC
41741: ST_TO_ADDR
41742: LD_VAR 0 13
41746: PUSH
41747: FOR_TO
41748: IFFALSE 42110
// begin InitHc ;
41750: CALL_OW 19
// if not f then
41754: LD_VAR 0 12
41758: NOT
41759: IFFALSE 41848
// begin PrepareHuman ( false , i , skill ) ;
41761: LD_INT 0
41763: PPUSH
41764: LD_VAR 0 8
41768: PPUSH
41769: LD_VAR 0 4
41773: PPUSH
41774: CALL_OW 380
// un := CreateHuman ;
41778: LD_ADDR_VAR 0 14
41782: PUSH
41783: CALL_OW 44
41787: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41788: LD_ADDR_VAR 0 7
41792: PUSH
41793: LD_VAR 0 7
41797: PPUSH
41798: LD_INT 1
41800: PPUSH
41801: LD_VAR 0 14
41805: PPUSH
41806: CALL_OW 2
41810: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41811: LD_VAR 0 14
41815: PPUSH
41816: LD_VAR 0 1
41820: PPUSH
41821: CALL_OW 250
41825: PPUSH
41826: LD_VAR 0 1
41830: PPUSH
41831: CALL_OW 251
41835: PPUSH
41836: LD_INT 10
41838: PPUSH
41839: LD_INT 0
41841: PPUSH
41842: CALL_OW 50
// continue ;
41846: GO 41747
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41848: LD_VAR 0 12
41852: PUSH
41853: LD_INT 1
41855: ARRAY
41856: PPUSH
41857: CALL_OW 313
41861: PUSH
41862: LD_VAR 0 12
41866: PUSH
41867: LD_INT 1
41869: ARRAY
41870: PPUSH
41871: CALL_OW 266
41875: PUSH
41876: LD_INT 32
41878: PUSH
41879: LD_INT 31
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: IN
41886: AND
41887: PUSH
41888: LD_VAR 0 12
41892: PUSH
41893: LD_INT 1
41895: ARRAY
41896: PPUSH
41897: CALL_OW 313
41901: PUSH
41902: LD_INT 6
41904: EQUAL
41905: OR
41906: IFFALSE 41926
// f := Delete ( f , 1 ) ;
41908: LD_ADDR_VAR 0 12
41912: PUSH
41913: LD_VAR 0 12
41917: PPUSH
41918: LD_INT 1
41920: PPUSH
41921: CALL_OW 3
41925: ST_TO_ADDR
// if not f then
41926: LD_VAR 0 12
41930: NOT
41931: IFFALSE 41949
// begin x := x + 2 ;
41933: LD_ADDR_VAR 0 13
41937: PUSH
41938: LD_VAR 0 13
41942: PUSH
41943: LD_INT 2
41945: PLUS
41946: ST_TO_ADDR
// continue ;
41947: GO 41747
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41949: LD_VAR 0 12
41953: PUSH
41954: LD_INT 1
41956: ARRAY
41957: PPUSH
41958: CALL_OW 266
41962: PUSH
41963: LD_INT 5
41965: EQUAL
41966: IFFALSE 42040
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41968: LD_VAR 0 12
41972: PUSH
41973: LD_INT 1
41975: ARRAY
41976: PPUSH
41977: CALL_OW 313
41981: PUSH
41982: LD_INT 3
41984: LESS
41985: IFFALSE 42021
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41987: LD_INT 0
41989: PPUSH
41990: LD_INT 5
41992: PUSH
41993: LD_INT 8
41995: PUSH
41996: LD_INT 9
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: LIST
42003: PUSH
42004: LD_VAR 0 17
42008: ARRAY
42009: PPUSH
42010: LD_VAR 0 4
42014: PPUSH
42015: CALL_OW 380
42019: GO 42038
// PrepareHuman ( false , i , skill ) ;
42021: LD_INT 0
42023: PPUSH
42024: LD_VAR 0 8
42028: PPUSH
42029: LD_VAR 0 4
42033: PPUSH
42034: CALL_OW 380
// end else
42038: GO 42057
// PrepareHuman ( false , i , skill ) ;
42040: LD_INT 0
42042: PPUSH
42043: LD_VAR 0 8
42047: PPUSH
42048: LD_VAR 0 4
42052: PPUSH
42053: CALL_OW 380
// un := CreateHuman ;
42057: LD_ADDR_VAR 0 14
42061: PUSH
42062: CALL_OW 44
42066: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42067: LD_ADDR_VAR 0 7
42071: PUSH
42072: LD_VAR 0 7
42076: PPUSH
42077: LD_INT 1
42079: PPUSH
42080: LD_VAR 0 14
42084: PPUSH
42085: CALL_OW 2
42089: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42090: LD_VAR 0 14
42094: PPUSH
42095: LD_VAR 0 12
42099: PUSH
42100: LD_INT 1
42102: ARRAY
42103: PPUSH
42104: CALL_OW 52
// end ;
42108: GO 41747
42110: POP
42111: POP
// end ;
42112: GO 41049
42114: POP
42115: POP
// result := result ^ buildings ;
42116: LD_ADDR_VAR 0 7
42120: PUSH
42121: LD_VAR 0 7
42125: PUSH
42126: LD_VAR 0 18
42130: ADD
42131: ST_TO_ADDR
// end else
42132: GO 42275
// begin for i = 1 to personel do
42134: LD_ADDR_VAR 0 8
42138: PUSH
42139: DOUBLE
42140: LD_INT 1
42142: DEC
42143: ST_TO_ADDR
42144: LD_VAR 0 6
42148: PUSH
42149: FOR_TO
42150: IFFALSE 42273
// begin if i > 4 then
42152: LD_VAR 0 8
42156: PUSH
42157: LD_INT 4
42159: GREATER
42160: IFFALSE 42164
// break ;
42162: GO 42273
// x := personel [ i ] ;
42164: LD_ADDR_VAR 0 13
42168: PUSH
42169: LD_VAR 0 6
42173: PUSH
42174: LD_VAR 0 8
42178: ARRAY
42179: ST_TO_ADDR
// if x = - 1 then
42180: LD_VAR 0 13
42184: PUSH
42185: LD_INT 1
42187: NEG
42188: EQUAL
42189: IFFALSE 42193
// continue ;
42191: GO 42149
// PrepareHuman ( false , i , skill ) ;
42193: LD_INT 0
42195: PPUSH
42196: LD_VAR 0 8
42200: PPUSH
42201: LD_VAR 0 4
42205: PPUSH
42206: CALL_OW 380
// un := CreateHuman ;
42210: LD_ADDR_VAR 0 14
42214: PUSH
42215: CALL_OW 44
42219: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42220: LD_VAR 0 14
42224: PPUSH
42225: LD_VAR 0 1
42229: PPUSH
42230: CALL_OW 250
42234: PPUSH
42235: LD_VAR 0 1
42239: PPUSH
42240: CALL_OW 251
42244: PPUSH
42245: LD_INT 10
42247: PPUSH
42248: LD_INT 0
42250: PPUSH
42251: CALL_OW 50
// result := result ^ un ;
42255: LD_ADDR_VAR 0 7
42259: PUSH
42260: LD_VAR 0 7
42264: PUSH
42265: LD_VAR 0 14
42269: ADD
42270: ST_TO_ADDR
// end ;
42271: GO 42149
42273: POP
42274: POP
// end ; end ;
42275: LD_VAR 0 7
42279: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42280: LD_INT 0
42282: PPUSH
42283: PPUSH
42284: PPUSH
42285: PPUSH
42286: PPUSH
42287: PPUSH
42288: PPUSH
42289: PPUSH
42290: PPUSH
42291: PPUSH
42292: PPUSH
42293: PPUSH
42294: PPUSH
42295: PPUSH
42296: PPUSH
42297: PPUSH
// result := false ;
42298: LD_ADDR_VAR 0 3
42302: PUSH
42303: LD_INT 0
42305: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42306: LD_VAR 0 1
42310: NOT
42311: PUSH
42312: LD_VAR 0 1
42316: PPUSH
42317: CALL_OW 266
42321: PUSH
42322: LD_INT 32
42324: PUSH
42325: LD_INT 33
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: IN
42332: NOT
42333: OR
42334: IFFALSE 42338
// exit ;
42336: GO 43477
// nat := GetNation ( tower ) ;
42338: LD_ADDR_VAR 0 12
42342: PUSH
42343: LD_VAR 0 1
42347: PPUSH
42348: CALL_OW 248
42352: ST_TO_ADDR
// side := GetSide ( tower ) ;
42353: LD_ADDR_VAR 0 16
42357: PUSH
42358: LD_VAR 0 1
42362: PPUSH
42363: CALL_OW 255
42367: ST_TO_ADDR
// x := GetX ( tower ) ;
42368: LD_ADDR_VAR 0 10
42372: PUSH
42373: LD_VAR 0 1
42377: PPUSH
42378: CALL_OW 250
42382: ST_TO_ADDR
// y := GetY ( tower ) ;
42383: LD_ADDR_VAR 0 11
42387: PUSH
42388: LD_VAR 0 1
42392: PPUSH
42393: CALL_OW 251
42397: ST_TO_ADDR
// if not x or not y then
42398: LD_VAR 0 10
42402: NOT
42403: PUSH
42404: LD_VAR 0 11
42408: NOT
42409: OR
42410: IFFALSE 42414
// exit ;
42412: GO 43477
// weapon := 0 ;
42414: LD_ADDR_VAR 0 18
42418: PUSH
42419: LD_INT 0
42421: ST_TO_ADDR
// fac_list := [ ] ;
42422: LD_ADDR_VAR 0 17
42426: PUSH
42427: EMPTY
42428: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42429: LD_ADDR_VAR 0 6
42433: PUSH
42434: LD_VAR 0 1
42438: PPUSH
42439: CALL_OW 274
42443: PPUSH
42444: LD_VAR 0 2
42448: PPUSH
42449: LD_INT 0
42451: PPUSH
42452: CALL 40017 0 3
42456: PPUSH
42457: LD_INT 30
42459: PUSH
42460: LD_INT 3
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PPUSH
42467: CALL_OW 72
42471: ST_TO_ADDR
// if not factories then
42472: LD_VAR 0 6
42476: NOT
42477: IFFALSE 42481
// exit ;
42479: GO 43477
// for i in factories do
42481: LD_ADDR_VAR 0 8
42485: PUSH
42486: LD_VAR 0 6
42490: PUSH
42491: FOR_IN
42492: IFFALSE 42517
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42494: LD_ADDR_VAR 0 17
42498: PUSH
42499: LD_VAR 0 17
42503: PUSH
42504: LD_VAR 0 8
42508: PPUSH
42509: CALL_OW 478
42513: UNION
42514: ST_TO_ADDR
42515: GO 42491
42517: POP
42518: POP
// if not fac_list then
42519: LD_VAR 0 17
42523: NOT
42524: IFFALSE 42528
// exit ;
42526: GO 43477
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42528: LD_ADDR_VAR 0 5
42532: PUSH
42533: LD_INT 4
42535: PUSH
42536: LD_INT 5
42538: PUSH
42539: LD_INT 9
42541: PUSH
42542: LD_INT 10
42544: PUSH
42545: LD_INT 6
42547: PUSH
42548: LD_INT 7
42550: PUSH
42551: LD_INT 11
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 27
42565: PUSH
42566: LD_INT 28
42568: PUSH
42569: LD_INT 26
42571: PUSH
42572: LD_INT 30
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 43
42583: PUSH
42584: LD_INT 44
42586: PUSH
42587: LD_INT 46
42589: PUSH
42590: LD_INT 45
42592: PUSH
42593: LD_INT 47
42595: PUSH
42596: LD_INT 49
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: LIST
42611: PUSH
42612: LD_VAR 0 12
42616: ARRAY
42617: ST_TO_ADDR
// for i in list do
42618: LD_ADDR_VAR 0 8
42622: PUSH
42623: LD_VAR 0 5
42627: PUSH
42628: FOR_IN
42629: IFFALSE 42662
// if not i in fac_list then
42631: LD_VAR 0 8
42635: PUSH
42636: LD_VAR 0 17
42640: IN
42641: NOT
42642: IFFALSE 42660
// list := list diff i ;
42644: LD_ADDR_VAR 0 5
42648: PUSH
42649: LD_VAR 0 5
42653: PUSH
42654: LD_VAR 0 8
42658: DIFF
42659: ST_TO_ADDR
42660: GO 42628
42662: POP
42663: POP
// if not list then
42664: LD_VAR 0 5
42668: NOT
42669: IFFALSE 42673
// exit ;
42671: GO 43477
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42673: LD_VAR 0 12
42677: PUSH
42678: LD_INT 3
42680: EQUAL
42681: PUSH
42682: LD_INT 49
42684: PUSH
42685: LD_VAR 0 5
42689: IN
42690: AND
42691: PUSH
42692: LD_INT 31
42694: PPUSH
42695: LD_VAR 0 16
42699: PPUSH
42700: CALL_OW 321
42704: PUSH
42705: LD_INT 2
42707: EQUAL
42708: AND
42709: IFFALSE 42769
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42711: LD_INT 22
42713: PUSH
42714: LD_VAR 0 16
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 35
42725: PUSH
42726: LD_INT 49
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 91
42735: PUSH
42736: LD_VAR 0 1
42740: PUSH
42741: LD_INT 10
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: LIST
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: LIST
42753: PPUSH
42754: CALL_OW 69
42758: NOT
42759: IFFALSE 42769
// weapon := ru_time_lapser ;
42761: LD_ADDR_VAR 0 18
42765: PUSH
42766: LD_INT 49
42768: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42769: LD_VAR 0 12
42773: PUSH
42774: LD_INT 1
42776: PUSH
42777: LD_INT 2
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: IN
42784: PUSH
42785: LD_INT 11
42787: PUSH
42788: LD_VAR 0 5
42792: IN
42793: PUSH
42794: LD_INT 30
42796: PUSH
42797: LD_VAR 0 5
42801: IN
42802: OR
42803: AND
42804: PUSH
42805: LD_INT 6
42807: PPUSH
42808: LD_VAR 0 16
42812: PPUSH
42813: CALL_OW 321
42817: PUSH
42818: LD_INT 2
42820: EQUAL
42821: AND
42822: IFFALSE 42987
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42824: LD_INT 22
42826: PUSH
42827: LD_VAR 0 16
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 2
42838: PUSH
42839: LD_INT 35
42841: PUSH
42842: LD_INT 11
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 35
42851: PUSH
42852: LD_INT 30
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 91
42866: PUSH
42867: LD_VAR 0 1
42871: PUSH
42872: LD_INT 18
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: LIST
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: LIST
42884: PPUSH
42885: CALL_OW 69
42889: NOT
42890: PUSH
42891: LD_INT 22
42893: PUSH
42894: LD_VAR 0 16
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 2
42905: PUSH
42906: LD_INT 30
42908: PUSH
42909: LD_INT 32
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 30
42918: PUSH
42919: LD_INT 33
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 91
42933: PUSH
42934: LD_VAR 0 1
42938: PUSH
42939: LD_INT 12
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: LIST
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: LIST
42951: PUSH
42952: EMPTY
42953: LIST
42954: PPUSH
42955: CALL_OW 69
42959: PUSH
42960: LD_INT 2
42962: GREATER
42963: AND
42964: IFFALSE 42987
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42966: LD_ADDR_VAR 0 18
42970: PUSH
42971: LD_INT 11
42973: PUSH
42974: LD_INT 30
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_VAR 0 12
42985: ARRAY
42986: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42987: LD_VAR 0 18
42991: NOT
42992: PUSH
42993: LD_INT 40
42995: PPUSH
42996: LD_VAR 0 16
43000: PPUSH
43001: CALL_OW 321
43005: PUSH
43006: LD_INT 2
43008: EQUAL
43009: AND
43010: PUSH
43011: LD_INT 7
43013: PUSH
43014: LD_VAR 0 5
43018: IN
43019: PUSH
43020: LD_INT 28
43022: PUSH
43023: LD_VAR 0 5
43027: IN
43028: OR
43029: PUSH
43030: LD_INT 45
43032: PUSH
43033: LD_VAR 0 5
43037: IN
43038: OR
43039: AND
43040: IFFALSE 43294
// begin hex := GetHexInfo ( x , y ) ;
43042: LD_ADDR_VAR 0 4
43046: PUSH
43047: LD_VAR 0 10
43051: PPUSH
43052: LD_VAR 0 11
43056: PPUSH
43057: CALL_OW 546
43061: ST_TO_ADDR
// if hex [ 1 ] then
43062: LD_VAR 0 4
43066: PUSH
43067: LD_INT 1
43069: ARRAY
43070: IFFALSE 43074
// exit ;
43072: GO 43477
// height := hex [ 2 ] ;
43074: LD_ADDR_VAR 0 15
43078: PUSH
43079: LD_VAR 0 4
43083: PUSH
43084: LD_INT 2
43086: ARRAY
43087: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43088: LD_ADDR_VAR 0 14
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: LD_INT 2
43098: PUSH
43099: LD_INT 3
43101: PUSH
43102: LD_INT 5
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: ST_TO_ADDR
// for i in tmp do
43111: LD_ADDR_VAR 0 8
43115: PUSH
43116: LD_VAR 0 14
43120: PUSH
43121: FOR_IN
43122: IFFALSE 43292
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43124: LD_ADDR_VAR 0 9
43128: PUSH
43129: LD_VAR 0 10
43133: PPUSH
43134: LD_VAR 0 8
43138: PPUSH
43139: LD_INT 5
43141: PPUSH
43142: CALL_OW 272
43146: PUSH
43147: LD_VAR 0 11
43151: PPUSH
43152: LD_VAR 0 8
43156: PPUSH
43157: LD_INT 5
43159: PPUSH
43160: CALL_OW 273
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43169: LD_VAR 0 9
43173: PUSH
43174: LD_INT 1
43176: ARRAY
43177: PPUSH
43178: LD_VAR 0 9
43182: PUSH
43183: LD_INT 2
43185: ARRAY
43186: PPUSH
43187: CALL_OW 488
43191: IFFALSE 43290
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43193: LD_ADDR_VAR 0 4
43197: PUSH
43198: LD_VAR 0 9
43202: PUSH
43203: LD_INT 1
43205: ARRAY
43206: PPUSH
43207: LD_VAR 0 9
43211: PUSH
43212: LD_INT 2
43214: ARRAY
43215: PPUSH
43216: CALL_OW 546
43220: ST_TO_ADDR
// if hex [ 1 ] then
43221: LD_VAR 0 4
43225: PUSH
43226: LD_INT 1
43228: ARRAY
43229: IFFALSE 43233
// continue ;
43231: GO 43121
// h := hex [ 2 ] ;
43233: LD_ADDR_VAR 0 13
43237: PUSH
43238: LD_VAR 0 4
43242: PUSH
43243: LD_INT 2
43245: ARRAY
43246: ST_TO_ADDR
// if h + 7 < height then
43247: LD_VAR 0 13
43251: PUSH
43252: LD_INT 7
43254: PLUS
43255: PUSH
43256: LD_VAR 0 15
43260: LESS
43261: IFFALSE 43290
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43263: LD_ADDR_VAR 0 18
43267: PUSH
43268: LD_INT 7
43270: PUSH
43271: LD_INT 28
43273: PUSH
43274: LD_INT 45
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: LIST
43281: PUSH
43282: LD_VAR 0 12
43286: ARRAY
43287: ST_TO_ADDR
// break ;
43288: GO 43292
// end ; end ; end ;
43290: GO 43121
43292: POP
43293: POP
// end ; if not weapon then
43294: LD_VAR 0 18
43298: NOT
43299: IFFALSE 43359
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43301: LD_ADDR_VAR 0 5
43305: PUSH
43306: LD_VAR 0 5
43310: PUSH
43311: LD_INT 11
43313: PUSH
43314: LD_INT 30
43316: PUSH
43317: LD_INT 49
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: LIST
43324: DIFF
43325: ST_TO_ADDR
// if not list then
43326: LD_VAR 0 5
43330: NOT
43331: IFFALSE 43335
// exit ;
43333: GO 43477
// weapon := list [ rand ( 1 , list ) ] ;
43335: LD_ADDR_VAR 0 18
43339: PUSH
43340: LD_VAR 0 5
43344: PUSH
43345: LD_INT 1
43347: PPUSH
43348: LD_VAR 0 5
43352: PPUSH
43353: CALL_OW 12
43357: ARRAY
43358: ST_TO_ADDR
// end ; if weapon then
43359: LD_VAR 0 18
43363: IFFALSE 43477
// begin tmp := CostOfWeapon ( weapon ) ;
43365: LD_ADDR_VAR 0 14
43369: PUSH
43370: LD_VAR 0 18
43374: PPUSH
43375: CALL_OW 451
43379: ST_TO_ADDR
// j := GetBase ( tower ) ;
43380: LD_ADDR_VAR 0 9
43384: PUSH
43385: LD_VAR 0 1
43389: PPUSH
43390: CALL_OW 274
43394: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43395: LD_VAR 0 9
43399: PPUSH
43400: LD_INT 1
43402: PPUSH
43403: CALL_OW 275
43407: PUSH
43408: LD_VAR 0 14
43412: PUSH
43413: LD_INT 1
43415: ARRAY
43416: GREATEREQUAL
43417: PUSH
43418: LD_VAR 0 9
43422: PPUSH
43423: LD_INT 2
43425: PPUSH
43426: CALL_OW 275
43430: PUSH
43431: LD_VAR 0 14
43435: PUSH
43436: LD_INT 2
43438: ARRAY
43439: GREATEREQUAL
43440: AND
43441: PUSH
43442: LD_VAR 0 9
43446: PPUSH
43447: LD_INT 3
43449: PPUSH
43450: CALL_OW 275
43454: PUSH
43455: LD_VAR 0 14
43459: PUSH
43460: LD_INT 3
43462: ARRAY
43463: GREATEREQUAL
43464: AND
43465: IFFALSE 43477
// result := weapon ;
43467: LD_ADDR_VAR 0 3
43471: PUSH
43472: LD_VAR 0 18
43476: ST_TO_ADDR
// end ; end ;
43477: LD_VAR 0 3
43481: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43482: LD_INT 0
43484: PPUSH
43485: PPUSH
// result := true ;
43486: LD_ADDR_VAR 0 3
43490: PUSH
43491: LD_INT 1
43493: ST_TO_ADDR
// if array1 = array2 then
43494: LD_VAR 0 1
43498: PUSH
43499: LD_VAR 0 2
43503: EQUAL
43504: IFFALSE 43564
// begin for i = 1 to array1 do
43506: LD_ADDR_VAR 0 4
43510: PUSH
43511: DOUBLE
43512: LD_INT 1
43514: DEC
43515: ST_TO_ADDR
43516: LD_VAR 0 1
43520: PUSH
43521: FOR_TO
43522: IFFALSE 43560
// if array1 [ i ] <> array2 [ i ] then
43524: LD_VAR 0 1
43528: PUSH
43529: LD_VAR 0 4
43533: ARRAY
43534: PUSH
43535: LD_VAR 0 2
43539: PUSH
43540: LD_VAR 0 4
43544: ARRAY
43545: NONEQUAL
43546: IFFALSE 43558
// begin result := false ;
43548: LD_ADDR_VAR 0 3
43552: PUSH
43553: LD_INT 0
43555: ST_TO_ADDR
// break ;
43556: GO 43560
// end ;
43558: GO 43521
43560: POP
43561: POP
// end else
43562: GO 43572
// result := false ;
43564: LD_ADDR_VAR 0 3
43568: PUSH
43569: LD_INT 0
43571: ST_TO_ADDR
// end ;
43572: LD_VAR 0 3
43576: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43577: LD_INT 0
43579: PPUSH
43580: PPUSH
// if not array1 or not array2 then
43581: LD_VAR 0 1
43585: NOT
43586: PUSH
43587: LD_VAR 0 2
43591: NOT
43592: OR
43593: IFFALSE 43597
// exit ;
43595: GO 43661
// result := true ;
43597: LD_ADDR_VAR 0 3
43601: PUSH
43602: LD_INT 1
43604: ST_TO_ADDR
// for i = 1 to array1 do
43605: LD_ADDR_VAR 0 4
43609: PUSH
43610: DOUBLE
43611: LD_INT 1
43613: DEC
43614: ST_TO_ADDR
43615: LD_VAR 0 1
43619: PUSH
43620: FOR_TO
43621: IFFALSE 43659
// if array1 [ i ] <> array2 [ i ] then
43623: LD_VAR 0 1
43627: PUSH
43628: LD_VAR 0 4
43632: ARRAY
43633: PUSH
43634: LD_VAR 0 2
43638: PUSH
43639: LD_VAR 0 4
43643: ARRAY
43644: NONEQUAL
43645: IFFALSE 43657
// begin result := false ;
43647: LD_ADDR_VAR 0 3
43651: PUSH
43652: LD_INT 0
43654: ST_TO_ADDR
// break ;
43655: GO 43659
// end ;
43657: GO 43620
43659: POP
43660: POP
// end ;
43661: LD_VAR 0 3
43665: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43666: LD_INT 0
43668: PPUSH
43669: PPUSH
43670: PPUSH
// pom := GetBase ( fac ) ;
43671: LD_ADDR_VAR 0 5
43675: PUSH
43676: LD_VAR 0 1
43680: PPUSH
43681: CALL_OW 274
43685: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43686: LD_ADDR_VAR 0 4
43690: PUSH
43691: LD_VAR 0 2
43695: PUSH
43696: LD_INT 1
43698: ARRAY
43699: PPUSH
43700: LD_VAR 0 2
43704: PUSH
43705: LD_INT 2
43707: ARRAY
43708: PPUSH
43709: LD_VAR 0 2
43713: PUSH
43714: LD_INT 3
43716: ARRAY
43717: PPUSH
43718: LD_VAR 0 2
43722: PUSH
43723: LD_INT 4
43725: ARRAY
43726: PPUSH
43727: CALL_OW 449
43731: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43732: LD_ADDR_VAR 0 3
43736: PUSH
43737: LD_VAR 0 5
43741: PPUSH
43742: LD_INT 1
43744: PPUSH
43745: CALL_OW 275
43749: PUSH
43750: LD_VAR 0 4
43754: PUSH
43755: LD_INT 1
43757: ARRAY
43758: GREATEREQUAL
43759: PUSH
43760: LD_VAR 0 5
43764: PPUSH
43765: LD_INT 2
43767: PPUSH
43768: CALL_OW 275
43772: PUSH
43773: LD_VAR 0 4
43777: PUSH
43778: LD_INT 2
43780: ARRAY
43781: GREATEREQUAL
43782: AND
43783: PUSH
43784: LD_VAR 0 5
43788: PPUSH
43789: LD_INT 3
43791: PPUSH
43792: CALL_OW 275
43796: PUSH
43797: LD_VAR 0 4
43801: PUSH
43802: LD_INT 3
43804: ARRAY
43805: GREATEREQUAL
43806: AND
43807: ST_TO_ADDR
// end ;
43808: LD_VAR 0 3
43812: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43813: LD_INT 0
43815: PPUSH
43816: PPUSH
43817: PPUSH
43818: PPUSH
// pom := GetBase ( building ) ;
43819: LD_ADDR_VAR 0 3
43823: PUSH
43824: LD_VAR 0 1
43828: PPUSH
43829: CALL_OW 274
43833: ST_TO_ADDR
// if not pom then
43834: LD_VAR 0 3
43838: NOT
43839: IFFALSE 43843
// exit ;
43841: GO 44013
// btype := GetBType ( building ) ;
43843: LD_ADDR_VAR 0 5
43847: PUSH
43848: LD_VAR 0 1
43852: PPUSH
43853: CALL_OW 266
43857: ST_TO_ADDR
// if btype = b_armoury then
43858: LD_VAR 0 5
43862: PUSH
43863: LD_INT 4
43865: EQUAL
43866: IFFALSE 43876
// btype := b_barracks ;
43868: LD_ADDR_VAR 0 5
43872: PUSH
43873: LD_INT 5
43875: ST_TO_ADDR
// if btype = b_depot then
43876: LD_VAR 0 5
43880: PUSH
43881: LD_INT 0
43883: EQUAL
43884: IFFALSE 43894
// btype := b_warehouse ;
43886: LD_ADDR_VAR 0 5
43890: PUSH
43891: LD_INT 1
43893: ST_TO_ADDR
// if btype = b_workshop then
43894: LD_VAR 0 5
43898: PUSH
43899: LD_INT 2
43901: EQUAL
43902: IFFALSE 43912
// btype := b_factory ;
43904: LD_ADDR_VAR 0 5
43908: PUSH
43909: LD_INT 3
43911: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43912: LD_ADDR_VAR 0 4
43916: PUSH
43917: LD_VAR 0 5
43921: PPUSH
43922: LD_VAR 0 1
43926: PPUSH
43927: CALL_OW 248
43931: PPUSH
43932: CALL_OW 450
43936: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43937: LD_ADDR_VAR 0 2
43941: PUSH
43942: LD_VAR 0 3
43946: PPUSH
43947: LD_INT 1
43949: PPUSH
43950: CALL_OW 275
43954: PUSH
43955: LD_VAR 0 4
43959: PUSH
43960: LD_INT 1
43962: ARRAY
43963: GREATEREQUAL
43964: PUSH
43965: LD_VAR 0 3
43969: PPUSH
43970: LD_INT 2
43972: PPUSH
43973: CALL_OW 275
43977: PUSH
43978: LD_VAR 0 4
43982: PUSH
43983: LD_INT 2
43985: ARRAY
43986: GREATEREQUAL
43987: AND
43988: PUSH
43989: LD_VAR 0 3
43993: PPUSH
43994: LD_INT 3
43996: PPUSH
43997: CALL_OW 275
44001: PUSH
44002: LD_VAR 0 4
44006: PUSH
44007: LD_INT 3
44009: ARRAY
44010: GREATEREQUAL
44011: AND
44012: ST_TO_ADDR
// end ;
44013: LD_VAR 0 2
44017: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44018: LD_INT 0
44020: PPUSH
44021: PPUSH
44022: PPUSH
// pom := GetBase ( building ) ;
44023: LD_ADDR_VAR 0 4
44027: PUSH
44028: LD_VAR 0 1
44032: PPUSH
44033: CALL_OW 274
44037: ST_TO_ADDR
// if not pom then
44038: LD_VAR 0 4
44042: NOT
44043: IFFALSE 44047
// exit ;
44045: GO 44148
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44047: LD_ADDR_VAR 0 5
44051: PUSH
44052: LD_VAR 0 2
44056: PPUSH
44057: LD_VAR 0 1
44061: PPUSH
44062: CALL_OW 248
44066: PPUSH
44067: CALL_OW 450
44071: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44072: LD_ADDR_VAR 0 3
44076: PUSH
44077: LD_VAR 0 4
44081: PPUSH
44082: LD_INT 1
44084: PPUSH
44085: CALL_OW 275
44089: PUSH
44090: LD_VAR 0 5
44094: PUSH
44095: LD_INT 1
44097: ARRAY
44098: GREATEREQUAL
44099: PUSH
44100: LD_VAR 0 4
44104: PPUSH
44105: LD_INT 2
44107: PPUSH
44108: CALL_OW 275
44112: PUSH
44113: LD_VAR 0 5
44117: PUSH
44118: LD_INT 2
44120: ARRAY
44121: GREATEREQUAL
44122: AND
44123: PUSH
44124: LD_VAR 0 4
44128: PPUSH
44129: LD_INT 3
44131: PPUSH
44132: CALL_OW 275
44136: PUSH
44137: LD_VAR 0 5
44141: PUSH
44142: LD_INT 3
44144: ARRAY
44145: GREATEREQUAL
44146: AND
44147: ST_TO_ADDR
// end ;
44148: LD_VAR 0 3
44152: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44153: LD_INT 0
44155: PPUSH
44156: PPUSH
44157: PPUSH
44158: PPUSH
44159: PPUSH
44160: PPUSH
44161: PPUSH
44162: PPUSH
44163: PPUSH
44164: PPUSH
44165: PPUSH
// result := false ;
44166: LD_ADDR_VAR 0 8
44170: PUSH
44171: LD_INT 0
44173: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44174: LD_VAR 0 5
44178: NOT
44179: PUSH
44180: LD_VAR 0 1
44184: NOT
44185: OR
44186: PUSH
44187: LD_VAR 0 2
44191: NOT
44192: OR
44193: PUSH
44194: LD_VAR 0 3
44198: NOT
44199: OR
44200: IFFALSE 44204
// exit ;
44202: GO 45018
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44204: LD_ADDR_VAR 0 14
44208: PUSH
44209: LD_VAR 0 1
44213: PPUSH
44214: LD_VAR 0 2
44218: PPUSH
44219: LD_VAR 0 3
44223: PPUSH
44224: LD_VAR 0 4
44228: PPUSH
44229: LD_VAR 0 5
44233: PUSH
44234: LD_INT 1
44236: ARRAY
44237: PPUSH
44238: CALL_OW 248
44242: PPUSH
44243: LD_INT 0
44245: PPUSH
44246: CALL 45855 0 6
44250: ST_TO_ADDR
// if not hexes then
44251: LD_VAR 0 14
44255: NOT
44256: IFFALSE 44260
// exit ;
44258: GO 45018
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44260: LD_ADDR_VAR 0 17
44264: PUSH
44265: LD_VAR 0 5
44269: PPUSH
44270: LD_INT 22
44272: PUSH
44273: LD_VAR 0 13
44277: PPUSH
44278: CALL_OW 255
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 2
44289: PUSH
44290: LD_INT 30
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 30
44302: PUSH
44303: LD_INT 1
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: LIST
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PPUSH
44319: CALL_OW 72
44323: ST_TO_ADDR
// for i = 1 to hexes do
44324: LD_ADDR_VAR 0 9
44328: PUSH
44329: DOUBLE
44330: LD_INT 1
44332: DEC
44333: ST_TO_ADDR
44334: LD_VAR 0 14
44338: PUSH
44339: FOR_TO
44340: IFFALSE 45016
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44342: LD_ADDR_VAR 0 13
44346: PUSH
44347: LD_VAR 0 14
44351: PUSH
44352: LD_VAR 0 9
44356: ARRAY
44357: PUSH
44358: LD_INT 1
44360: ARRAY
44361: PPUSH
44362: LD_VAR 0 14
44366: PUSH
44367: LD_VAR 0 9
44371: ARRAY
44372: PUSH
44373: LD_INT 2
44375: ARRAY
44376: PPUSH
44377: CALL_OW 428
44381: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44382: LD_VAR 0 14
44386: PUSH
44387: LD_VAR 0 9
44391: ARRAY
44392: PUSH
44393: LD_INT 1
44395: ARRAY
44396: PPUSH
44397: LD_VAR 0 14
44401: PUSH
44402: LD_VAR 0 9
44406: ARRAY
44407: PUSH
44408: LD_INT 2
44410: ARRAY
44411: PPUSH
44412: CALL_OW 351
44416: PUSH
44417: LD_VAR 0 14
44421: PUSH
44422: LD_VAR 0 9
44426: ARRAY
44427: PUSH
44428: LD_INT 1
44430: ARRAY
44431: PPUSH
44432: LD_VAR 0 14
44436: PUSH
44437: LD_VAR 0 9
44441: ARRAY
44442: PUSH
44443: LD_INT 2
44445: ARRAY
44446: PPUSH
44447: CALL_OW 488
44451: NOT
44452: OR
44453: PUSH
44454: LD_VAR 0 13
44458: PPUSH
44459: CALL_OW 247
44463: PUSH
44464: LD_INT 3
44466: EQUAL
44467: OR
44468: IFFALSE 44474
// exit ;
44470: POP
44471: POP
44472: GO 45018
// if not tmp then
44474: LD_VAR 0 13
44478: NOT
44479: IFFALSE 44483
// continue ;
44481: GO 44339
// result := true ;
44483: LD_ADDR_VAR 0 8
44487: PUSH
44488: LD_INT 1
44490: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44491: LD_VAR 0 6
44495: PUSH
44496: LD_VAR 0 13
44500: PPUSH
44501: CALL_OW 247
44505: PUSH
44506: LD_INT 2
44508: EQUAL
44509: AND
44510: PUSH
44511: LD_VAR 0 13
44515: PPUSH
44516: CALL_OW 263
44520: PUSH
44521: LD_INT 1
44523: EQUAL
44524: AND
44525: IFFALSE 44689
// begin if IsDrivenBy ( tmp ) then
44527: LD_VAR 0 13
44531: PPUSH
44532: CALL_OW 311
44536: IFFALSE 44540
// continue ;
44538: GO 44339
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44540: LD_VAR 0 6
44544: PPUSH
44545: LD_INT 3
44547: PUSH
44548: LD_INT 60
44550: PUSH
44551: EMPTY
44552: LIST
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 3
44560: PUSH
44561: LD_INT 55
44563: PUSH
44564: EMPTY
44565: LIST
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PPUSH
44575: CALL_OW 72
44579: IFFALSE 44687
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44581: LD_ADDR_VAR 0 18
44585: PUSH
44586: LD_VAR 0 6
44590: PPUSH
44591: LD_INT 3
44593: PUSH
44594: LD_INT 60
44596: PUSH
44597: EMPTY
44598: LIST
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 3
44606: PUSH
44607: LD_INT 55
44609: PUSH
44610: EMPTY
44611: LIST
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PPUSH
44621: CALL_OW 72
44625: PUSH
44626: LD_INT 1
44628: ARRAY
44629: ST_TO_ADDR
// if IsInUnit ( driver ) then
44630: LD_VAR 0 18
44634: PPUSH
44635: CALL_OW 310
44639: IFFALSE 44650
// ComExit ( driver ) ;
44641: LD_VAR 0 18
44645: PPUSH
44646: CALL 69039 0 1
// AddComEnterUnit ( driver , tmp ) ;
44650: LD_VAR 0 18
44654: PPUSH
44655: LD_VAR 0 13
44659: PPUSH
44660: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44664: LD_VAR 0 18
44668: PPUSH
44669: LD_VAR 0 7
44673: PPUSH
44674: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44678: LD_VAR 0 18
44682: PPUSH
44683: CALL_OW 181
// end ; continue ;
44687: GO 44339
// end ; if not cleaners or not tmp in cleaners then
44689: LD_VAR 0 6
44693: NOT
44694: PUSH
44695: LD_VAR 0 13
44699: PUSH
44700: LD_VAR 0 6
44704: IN
44705: NOT
44706: OR
44707: IFFALSE 45014
// begin if dep then
44709: LD_VAR 0 17
44713: IFFALSE 44849
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44715: LD_ADDR_VAR 0 16
44719: PUSH
44720: LD_VAR 0 17
44724: PUSH
44725: LD_INT 1
44727: ARRAY
44728: PPUSH
44729: CALL_OW 250
44733: PPUSH
44734: LD_VAR 0 17
44738: PUSH
44739: LD_INT 1
44741: ARRAY
44742: PPUSH
44743: CALL_OW 254
44747: PPUSH
44748: LD_INT 5
44750: PPUSH
44751: CALL_OW 272
44755: PUSH
44756: LD_VAR 0 17
44760: PUSH
44761: LD_INT 1
44763: ARRAY
44764: PPUSH
44765: CALL_OW 251
44769: PPUSH
44770: LD_VAR 0 17
44774: PUSH
44775: LD_INT 1
44777: ARRAY
44778: PPUSH
44779: CALL_OW 254
44783: PPUSH
44784: LD_INT 5
44786: PPUSH
44787: CALL_OW 273
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44796: LD_VAR 0 16
44800: PUSH
44801: LD_INT 1
44803: ARRAY
44804: PPUSH
44805: LD_VAR 0 16
44809: PUSH
44810: LD_INT 2
44812: ARRAY
44813: PPUSH
44814: CALL_OW 488
44818: IFFALSE 44849
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44820: LD_VAR 0 13
44824: PPUSH
44825: LD_VAR 0 16
44829: PUSH
44830: LD_INT 1
44832: ARRAY
44833: PPUSH
44834: LD_VAR 0 16
44838: PUSH
44839: LD_INT 2
44841: ARRAY
44842: PPUSH
44843: CALL_OW 111
// continue ;
44847: GO 44339
// end ; end ; r := GetDir ( tmp ) ;
44849: LD_ADDR_VAR 0 15
44853: PUSH
44854: LD_VAR 0 13
44858: PPUSH
44859: CALL_OW 254
44863: ST_TO_ADDR
// if r = 5 then
44864: LD_VAR 0 15
44868: PUSH
44869: LD_INT 5
44871: EQUAL
44872: IFFALSE 44882
// r := 0 ;
44874: LD_ADDR_VAR 0 15
44878: PUSH
44879: LD_INT 0
44881: ST_TO_ADDR
// for j = r to 5 do
44882: LD_ADDR_VAR 0 10
44886: PUSH
44887: DOUBLE
44888: LD_VAR 0 15
44892: DEC
44893: ST_TO_ADDR
44894: LD_INT 5
44896: PUSH
44897: FOR_TO
44898: IFFALSE 45012
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44900: LD_ADDR_VAR 0 11
44904: PUSH
44905: LD_VAR 0 13
44909: PPUSH
44910: CALL_OW 250
44914: PPUSH
44915: LD_VAR 0 10
44919: PPUSH
44920: LD_INT 2
44922: PPUSH
44923: CALL_OW 272
44927: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44928: LD_ADDR_VAR 0 12
44932: PUSH
44933: LD_VAR 0 13
44937: PPUSH
44938: CALL_OW 251
44942: PPUSH
44943: LD_VAR 0 10
44947: PPUSH
44948: LD_INT 2
44950: PPUSH
44951: CALL_OW 273
44955: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44956: LD_VAR 0 11
44960: PPUSH
44961: LD_VAR 0 12
44965: PPUSH
44966: CALL_OW 488
44970: PUSH
44971: LD_VAR 0 11
44975: PPUSH
44976: LD_VAR 0 12
44980: PPUSH
44981: CALL_OW 428
44985: NOT
44986: AND
44987: IFFALSE 45010
// begin ComMoveXY ( tmp , _x , _y ) ;
44989: LD_VAR 0 13
44993: PPUSH
44994: LD_VAR 0 11
44998: PPUSH
44999: LD_VAR 0 12
45003: PPUSH
45004: CALL_OW 111
// break ;
45008: GO 45012
// end ; end ;
45010: GO 44897
45012: POP
45013: POP
// end ; end ;
45014: GO 44339
45016: POP
45017: POP
// end ;
45018: LD_VAR 0 8
45022: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
45023: LD_INT 0
45025: PPUSH
45026: PPUSH
45027: PPUSH
45028: PPUSH
45029: PPUSH
45030: PPUSH
45031: PPUSH
45032: PPUSH
45033: PPUSH
45034: PPUSH
// result := false ;
45035: LD_ADDR_VAR 0 6
45039: PUSH
45040: LD_INT 0
45042: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45043: LD_VAR 0 1
45047: NOT
45048: PUSH
45049: LD_VAR 0 1
45053: PPUSH
45054: CALL_OW 266
45058: PUSH
45059: LD_INT 0
45061: PUSH
45062: LD_INT 1
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: IN
45069: NOT
45070: OR
45071: PUSH
45072: LD_VAR 0 2
45076: NOT
45077: OR
45078: PUSH
45079: LD_VAR 0 5
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: LD_INT 2
45092: PUSH
45093: LD_INT 3
45095: PUSH
45096: LD_INT 4
45098: PUSH
45099: LD_INT 5
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: IN
45110: NOT
45111: OR
45112: PUSH
45113: LD_VAR 0 3
45117: PPUSH
45118: LD_VAR 0 4
45122: PPUSH
45123: CALL_OW 488
45127: NOT
45128: OR
45129: IFFALSE 45133
// exit ;
45131: GO 45850
// pom := GetBase ( depot ) ;
45133: LD_ADDR_VAR 0 10
45137: PUSH
45138: LD_VAR 0 1
45142: PPUSH
45143: CALL_OW 274
45147: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45148: LD_ADDR_VAR 0 11
45152: PUSH
45153: LD_VAR 0 2
45157: PPUSH
45158: LD_VAR 0 1
45162: PPUSH
45163: CALL_OW 248
45167: PPUSH
45168: CALL_OW 450
45172: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45173: LD_VAR 0 10
45177: PPUSH
45178: LD_INT 1
45180: PPUSH
45181: CALL_OW 275
45185: PUSH
45186: LD_VAR 0 11
45190: PUSH
45191: LD_INT 1
45193: ARRAY
45194: GREATEREQUAL
45195: PUSH
45196: LD_VAR 0 10
45200: PPUSH
45201: LD_INT 2
45203: PPUSH
45204: CALL_OW 275
45208: PUSH
45209: LD_VAR 0 11
45213: PUSH
45214: LD_INT 2
45216: ARRAY
45217: GREATEREQUAL
45218: AND
45219: PUSH
45220: LD_VAR 0 10
45224: PPUSH
45225: LD_INT 3
45227: PPUSH
45228: CALL_OW 275
45232: PUSH
45233: LD_VAR 0 11
45237: PUSH
45238: LD_INT 3
45240: ARRAY
45241: GREATEREQUAL
45242: AND
45243: NOT
45244: IFFALSE 45248
// exit ;
45246: GO 45850
// if GetBType ( depot ) = b_depot then
45248: LD_VAR 0 1
45252: PPUSH
45253: CALL_OW 266
45257: PUSH
45258: LD_INT 0
45260: EQUAL
45261: IFFALSE 45273
// dist := 28 else
45263: LD_ADDR_VAR 0 14
45267: PUSH
45268: LD_INT 28
45270: ST_TO_ADDR
45271: GO 45281
// dist := 36 ;
45273: LD_ADDR_VAR 0 14
45277: PUSH
45278: LD_INT 36
45280: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45281: LD_VAR 0 1
45285: PPUSH
45286: LD_VAR 0 3
45290: PPUSH
45291: LD_VAR 0 4
45295: PPUSH
45296: CALL_OW 297
45300: PUSH
45301: LD_VAR 0 14
45305: GREATER
45306: IFFALSE 45310
// exit ;
45308: GO 45850
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45310: LD_ADDR_VAR 0 12
45314: PUSH
45315: LD_VAR 0 2
45319: PPUSH
45320: LD_VAR 0 3
45324: PPUSH
45325: LD_VAR 0 4
45329: PPUSH
45330: LD_VAR 0 5
45334: PPUSH
45335: LD_VAR 0 1
45339: PPUSH
45340: CALL_OW 248
45344: PPUSH
45345: LD_INT 0
45347: PPUSH
45348: CALL 45855 0 6
45352: ST_TO_ADDR
// if not hexes then
45353: LD_VAR 0 12
45357: NOT
45358: IFFALSE 45362
// exit ;
45360: GO 45850
// hex := GetHexInfo ( x , y ) ;
45362: LD_ADDR_VAR 0 15
45366: PUSH
45367: LD_VAR 0 3
45371: PPUSH
45372: LD_VAR 0 4
45376: PPUSH
45377: CALL_OW 546
45381: ST_TO_ADDR
// if hex [ 1 ] then
45382: LD_VAR 0 15
45386: PUSH
45387: LD_INT 1
45389: ARRAY
45390: IFFALSE 45394
// exit ;
45392: GO 45850
// height := hex [ 2 ] ;
45394: LD_ADDR_VAR 0 13
45398: PUSH
45399: LD_VAR 0 15
45403: PUSH
45404: LD_INT 2
45406: ARRAY
45407: ST_TO_ADDR
// for i = 1 to hexes do
45408: LD_ADDR_VAR 0 7
45412: PUSH
45413: DOUBLE
45414: LD_INT 1
45416: DEC
45417: ST_TO_ADDR
45418: LD_VAR 0 12
45422: PUSH
45423: FOR_TO
45424: IFFALSE 45754
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45426: LD_VAR 0 12
45430: PUSH
45431: LD_VAR 0 7
45435: ARRAY
45436: PUSH
45437: LD_INT 1
45439: ARRAY
45440: PPUSH
45441: LD_VAR 0 12
45445: PUSH
45446: LD_VAR 0 7
45450: ARRAY
45451: PUSH
45452: LD_INT 2
45454: ARRAY
45455: PPUSH
45456: CALL_OW 488
45460: NOT
45461: PUSH
45462: LD_VAR 0 12
45466: PUSH
45467: LD_VAR 0 7
45471: ARRAY
45472: PUSH
45473: LD_INT 1
45475: ARRAY
45476: PPUSH
45477: LD_VAR 0 12
45481: PUSH
45482: LD_VAR 0 7
45486: ARRAY
45487: PUSH
45488: LD_INT 2
45490: ARRAY
45491: PPUSH
45492: CALL_OW 428
45496: PUSH
45497: LD_INT 0
45499: GREATER
45500: OR
45501: PUSH
45502: LD_VAR 0 12
45506: PUSH
45507: LD_VAR 0 7
45511: ARRAY
45512: PUSH
45513: LD_INT 1
45515: ARRAY
45516: PPUSH
45517: LD_VAR 0 12
45521: PUSH
45522: LD_VAR 0 7
45526: ARRAY
45527: PUSH
45528: LD_INT 2
45530: ARRAY
45531: PPUSH
45532: CALL_OW 351
45536: OR
45537: IFFALSE 45543
// exit ;
45539: POP
45540: POP
45541: GO 45850
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45543: LD_ADDR_VAR 0 8
45547: PUSH
45548: LD_VAR 0 12
45552: PUSH
45553: LD_VAR 0 7
45557: ARRAY
45558: PUSH
45559: LD_INT 1
45561: ARRAY
45562: PPUSH
45563: LD_VAR 0 12
45567: PUSH
45568: LD_VAR 0 7
45572: ARRAY
45573: PUSH
45574: LD_INT 2
45576: ARRAY
45577: PPUSH
45578: CALL_OW 546
45582: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45583: LD_VAR 0 8
45587: PUSH
45588: LD_INT 1
45590: ARRAY
45591: PUSH
45592: LD_VAR 0 8
45596: PUSH
45597: LD_INT 2
45599: ARRAY
45600: PUSH
45601: LD_VAR 0 13
45605: PUSH
45606: LD_INT 2
45608: PLUS
45609: GREATER
45610: OR
45611: PUSH
45612: LD_VAR 0 8
45616: PUSH
45617: LD_INT 2
45619: ARRAY
45620: PUSH
45621: LD_VAR 0 13
45625: PUSH
45626: LD_INT 2
45628: MINUS
45629: LESS
45630: OR
45631: PUSH
45632: LD_VAR 0 8
45636: PUSH
45637: LD_INT 3
45639: ARRAY
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: LD_INT 8
45646: PUSH
45647: LD_INT 9
45649: PUSH
45650: LD_INT 10
45652: PUSH
45653: LD_INT 11
45655: PUSH
45656: LD_INT 12
45658: PUSH
45659: LD_INT 13
45661: PUSH
45662: LD_INT 16
45664: PUSH
45665: LD_INT 17
45667: PUSH
45668: LD_INT 18
45670: PUSH
45671: LD_INT 19
45673: PUSH
45674: LD_INT 20
45676: PUSH
45677: LD_INT 21
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: IN
45695: NOT
45696: OR
45697: PUSH
45698: LD_VAR 0 8
45702: PUSH
45703: LD_INT 5
45705: ARRAY
45706: NOT
45707: OR
45708: PUSH
45709: LD_VAR 0 8
45713: PUSH
45714: LD_INT 6
45716: ARRAY
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: LD_INT 2
45723: PUSH
45724: LD_INT 7
45726: PUSH
45727: LD_INT 9
45729: PUSH
45730: LD_INT 10
45732: PUSH
45733: LD_INT 11
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: IN
45744: NOT
45745: OR
45746: IFFALSE 45752
// exit ;
45748: POP
45749: POP
45750: GO 45850
// end ;
45752: GO 45423
45754: POP
45755: POP
// side := GetSide ( depot ) ;
45756: LD_ADDR_VAR 0 9
45760: PUSH
45761: LD_VAR 0 1
45765: PPUSH
45766: CALL_OW 255
45770: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45771: LD_VAR 0 9
45775: PPUSH
45776: LD_VAR 0 3
45780: PPUSH
45781: LD_VAR 0 4
45785: PPUSH
45786: LD_INT 20
45788: PPUSH
45789: CALL 38171 0 4
45793: PUSH
45794: LD_INT 4
45796: ARRAY
45797: IFFALSE 45801
// exit ;
45799: GO 45850
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45801: LD_VAR 0 2
45805: PUSH
45806: LD_INT 29
45808: PUSH
45809: LD_INT 30
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: IN
45816: PUSH
45817: LD_VAR 0 3
45821: PPUSH
45822: LD_VAR 0 4
45826: PPUSH
45827: LD_VAR 0 9
45831: PPUSH
45832: CALL_OW 440
45836: NOT
45837: AND
45838: IFFALSE 45842
// exit ;
45840: GO 45850
// result := true ;
45842: LD_ADDR_VAR 0 6
45846: PUSH
45847: LD_INT 1
45849: ST_TO_ADDR
// end ;
45850: LD_VAR 0 6
45854: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45855: LD_INT 0
45857: PPUSH
45858: PPUSH
45859: PPUSH
45860: PPUSH
45861: PPUSH
45862: PPUSH
45863: PPUSH
45864: PPUSH
45865: PPUSH
45866: PPUSH
45867: PPUSH
45868: PPUSH
45869: PPUSH
45870: PPUSH
45871: PPUSH
45872: PPUSH
45873: PPUSH
45874: PPUSH
45875: PPUSH
45876: PPUSH
45877: PPUSH
45878: PPUSH
45879: PPUSH
45880: PPUSH
45881: PPUSH
45882: PPUSH
45883: PPUSH
45884: PPUSH
45885: PPUSH
45886: PPUSH
45887: PPUSH
45888: PPUSH
45889: PPUSH
45890: PPUSH
45891: PPUSH
45892: PPUSH
45893: PPUSH
45894: PPUSH
45895: PPUSH
45896: PPUSH
45897: PPUSH
45898: PPUSH
45899: PPUSH
45900: PPUSH
45901: PPUSH
45902: PPUSH
45903: PPUSH
45904: PPUSH
45905: PPUSH
45906: PPUSH
45907: PPUSH
45908: PPUSH
45909: PPUSH
45910: PPUSH
45911: PPUSH
45912: PPUSH
45913: PPUSH
45914: PPUSH
// result = [ ] ;
45915: LD_ADDR_VAR 0 7
45919: PUSH
45920: EMPTY
45921: ST_TO_ADDR
// temp_list = [ ] ;
45922: LD_ADDR_VAR 0 9
45926: PUSH
45927: EMPTY
45928: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45929: LD_VAR 0 4
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: LD_INT 2
45942: PUSH
45943: LD_INT 3
45945: PUSH
45946: LD_INT 4
45948: PUSH
45949: LD_INT 5
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: IN
45960: NOT
45961: PUSH
45962: LD_VAR 0 1
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: IN
45977: PUSH
45978: LD_VAR 0 5
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: LD_INT 2
45988: PUSH
45989: LD_INT 3
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: LIST
45996: IN
45997: NOT
45998: AND
45999: OR
46000: IFFALSE 46004
// exit ;
46002: GO 64395
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46004: LD_VAR 0 1
46008: PUSH
46009: LD_INT 6
46011: PUSH
46012: LD_INT 7
46014: PUSH
46015: LD_INT 8
46017: PUSH
46018: LD_INT 13
46020: PUSH
46021: LD_INT 12
46023: PUSH
46024: LD_INT 15
46026: PUSH
46027: LD_INT 11
46029: PUSH
46030: LD_INT 14
46032: PUSH
46033: LD_INT 10
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: IN
46047: IFFALSE 46057
// btype = b_lab ;
46049: LD_ADDR_VAR 0 1
46053: PUSH
46054: LD_INT 6
46056: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46057: LD_VAR 0 6
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: LD_INT 2
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: LIST
46075: IN
46076: NOT
46077: PUSH
46078: LD_VAR 0 1
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: LD_INT 2
46091: PUSH
46092: LD_INT 3
46094: PUSH
46095: LD_INT 6
46097: PUSH
46098: LD_INT 36
46100: PUSH
46101: LD_INT 4
46103: PUSH
46104: LD_INT 5
46106: PUSH
46107: LD_INT 31
46109: PUSH
46110: LD_INT 32
46112: PUSH
46113: LD_INT 33
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: IN
46129: NOT
46130: PUSH
46131: LD_VAR 0 6
46135: PUSH
46136: LD_INT 1
46138: EQUAL
46139: AND
46140: OR
46141: PUSH
46142: LD_VAR 0 1
46146: PUSH
46147: LD_INT 2
46149: PUSH
46150: LD_INT 3
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: IN
46157: NOT
46158: PUSH
46159: LD_VAR 0 6
46163: PUSH
46164: LD_INT 2
46166: EQUAL
46167: AND
46168: OR
46169: IFFALSE 46179
// mode = 0 ;
46171: LD_ADDR_VAR 0 6
46175: PUSH
46176: LD_INT 0
46178: ST_TO_ADDR
// case mode of 0 :
46179: LD_VAR 0 6
46183: PUSH
46184: LD_INT 0
46186: DOUBLE
46187: EQUAL
46188: IFTRUE 46192
46190: GO 57645
46192: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46193: LD_ADDR_VAR 0 11
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: LD_INT 1
46213: NEG
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: LD_INT 2
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: LD_INT 2
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: LD_INT 2
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: LD_INT 2
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: NEG
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: LD_INT 3
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: LD_INT 3
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: LD_INT 2
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46386: LD_ADDR_VAR 0 12
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 2
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 2
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 1
46498: NEG
46499: PUSH
46500: LD_INT 1
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 2
46509: NEG
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 2
46520: NEG
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 2
46532: NEG
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 3
46543: NEG
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 3
46554: NEG
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46582: LD_ADDR_VAR 0 13
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: LD_INT 1
46602: NEG
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: LD_INT 2
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 2
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 2
46705: NEG
46706: PUSH
46707: LD_INT 1
46709: NEG
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 2
46717: NEG
46718: PUSH
46719: LD_INT 2
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 2
46729: NEG
46730: PUSH
46731: LD_INT 3
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 3
46741: NEG
46742: PUSH
46743: LD_INT 2
46745: NEG
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 3
46753: NEG
46754: PUSH
46755: LD_INT 3
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46781: LD_ADDR_VAR 0 14
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: LD_INT 2
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: LD_INT 2
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 1
46885: PUSH
46886: LD_INT 1
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 1
46896: PUSH
46897: LD_INT 2
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: LD_INT 2
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: NEG
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: NEG
46928: PUSH
46929: LD_INT 3
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: LD_INT 3
46942: NEG
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 1
46950: PUSH
46951: LD_INT 2
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46977: LD_ADDR_VAR 0 15
46981: PUSH
46982: LD_INT 0
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: LD_INT 1
46997: NEG
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: LD_INT 1
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 2
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 2
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 1
47089: NEG
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 2
47100: NEG
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 2
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 3
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 3
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47170: LD_ADDR_VAR 0 16
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: NEG
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: LD_INT 2
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 2
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: LD_INT 2
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: PUSH
47284: LD_INT 2
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 2
47293: NEG
47294: PUSH
47295: LD_INT 1
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: LD_INT 2
47309: NEG
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 3
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 3
47327: PUSH
47328: LD_INT 3
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 2
47337: PUSH
47338: LD_INT 3
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47363: LD_ADDR_VAR 0 17
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 1
47444: NEG
47445: PUSH
47446: LD_INT 2
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: LD_INT 2
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 2
47478: PUSH
47479: LD_INT 0
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 2
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 2
47498: PUSH
47499: LD_INT 2
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: LD_INT 2
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: LD_INT 2
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 2
47539: NEG
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 2
47550: NEG
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: NEG
47563: PUSH
47564: LD_INT 2
47566: NEG
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47593: LD_ADDR_VAR 0 18
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: LD_INT 1
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: LD_INT 1
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: LD_INT 2
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: LD_INT 2
47689: NEG
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 2
47708: PUSH
47709: LD_INT 0
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 2
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 2
47728: PUSH
47729: LD_INT 2
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: LD_INT 2
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: LD_INT 2
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 2
47769: NEG
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 2
47780: NEG
47781: PUSH
47782: LD_INT 1
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 2
47792: NEG
47793: PUSH
47794: LD_INT 2
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47823: LD_ADDR_VAR 0 19
47827: PUSH
47828: LD_INT 0
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: PUSH
47862: LD_INT 1
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 1
47881: NEG
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: NEG
47893: PUSH
47894: LD_INT 1
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 1
47904: NEG
47905: PUSH
47906: LD_INT 2
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: LD_INT 2
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 2
47938: PUSH
47939: LD_INT 0
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 2
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 2
47958: PUSH
47959: LD_INT 2
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: LD_INT 2
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: LD_INT 2
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: NEG
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 2
48010: NEG
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 2
48022: NEG
48023: PUSH
48024: LD_INT 2
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48053: LD_ADDR_VAR 0 20
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: LD_INT 1
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: LD_INT 2
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: LD_INT 2
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: LD_INT 0
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 2
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 2
48188: PUSH
48189: LD_INT 2
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: LD_INT 2
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 2
48229: NEG
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 2
48240: NEG
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 2
48252: NEG
48253: PUSH
48254: LD_INT 2
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48283: LD_ADDR_VAR 0 21
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: LD_INT 1
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: LD_INT 1
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: NEG
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: LD_INT 2
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: LD_INT 2
48379: NEG
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: LD_INT 1
48390: NEG
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 2
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 2
48408: PUSH
48409: LD_INT 1
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 2
48418: PUSH
48419: LD_INT 2
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: LD_INT 2
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: LD_INT 2
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: LD_INT 1
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 2
48459: NEG
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 2
48470: NEG
48471: PUSH
48472: LD_INT 1
48474: NEG
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 2
48482: NEG
48483: PUSH
48484: LD_INT 2
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48513: LD_ADDR_VAR 0 22
48517: PUSH
48518: LD_INT 0
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 1
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 1
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 0
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: LD_INT 2
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: LD_INT 2
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: LD_INT 1
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 2
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 2
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 2
48648: PUSH
48649: LD_INT 2
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: LD_INT 2
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: LD_INT 1
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 2
48689: NEG
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: LD_INT 1
48704: NEG
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 2
48712: NEG
48713: PUSH
48714: LD_INT 2
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48743: LD_ADDR_VAR 0 23
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: LD_INT 0
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: PUSH
48782: LD_INT 1
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: NEG
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: LD_INT 2
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: LD_INT 2
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 2
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 2
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 2
48878: PUSH
48879: LD_INT 2
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 2
48919: NEG
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 2
48930: NEG
48931: PUSH
48932: LD_INT 1
48934: NEG
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 2
48942: NEG
48943: PUSH
48944: LD_INT 2
48946: NEG
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 2
48954: NEG
48955: PUSH
48956: LD_INT 3
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: PUSH
48968: LD_INT 3
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: PUSH
48979: LD_INT 2
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 2
48989: PUSH
48990: LD_INT 1
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49023: LD_ADDR_VAR 0 24
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: LD_INT 2
49108: NEG
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: LD_INT 2
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 2
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 2
49158: PUSH
49159: LD_INT 2
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: LD_INT 2
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 2
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 2
49199: NEG
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: NEG
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 2
49222: NEG
49223: PUSH
49224: LD_INT 2
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: LD_INT 2
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 2
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 3
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 3
49266: PUSH
49267: LD_INT 2
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49299: LD_ADDR_VAR 0 25
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: NEG
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: LD_INT 2
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: LD_INT 2
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 2
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 2
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 2
49434: PUSH
49435: LD_INT 2
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: LD_INT 2
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: LD_INT 1
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 2
49475: NEG
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 2
49486: NEG
49487: PUSH
49488: LD_INT 1
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 2
49498: NEG
49499: PUSH
49500: LD_INT 2
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 3
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 3
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: LD_INT 3
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 1
49540: PUSH
49541: LD_INT 3
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49573: LD_ADDR_VAR 0 26
49577: PUSH
49578: LD_INT 0
49580: PUSH
49581: LD_INT 0
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: LD_INT 1
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: LD_INT 1
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: NEG
49632: PUSH
49633: LD_INT 0
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: LD_INT 2
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 0
49666: PUSH
49667: LD_INT 2
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: LD_INT 1
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 2
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 2
49698: PUSH
49699: LD_INT 1
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 2
49708: PUSH
49709: LD_INT 2
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: LD_INT 2
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: LD_INT 2
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: NEG
49739: PUSH
49740: LD_INT 1
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 2
49749: NEG
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 2
49760: NEG
49761: PUSH
49762: LD_INT 1
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 2
49772: NEG
49773: PUSH
49774: LD_INT 2
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 2
49784: PUSH
49785: LD_INT 3
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: LD_INT 3
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: LD_INT 2
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 2
49815: NEG
49816: PUSH
49817: LD_INT 1
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49849: LD_ADDR_VAR 0 27
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: LD_INT 1
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 1
49907: NEG
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: LD_INT 1
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: NEG
49931: PUSH
49932: LD_INT 2
49934: NEG
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: LD_INT 2
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 2
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 2
49984: PUSH
49985: LD_INT 2
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: LD_INT 2
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: LD_INT 2
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 2
50025: NEG
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 2
50036: NEG
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: NEG
50049: PUSH
50050: LD_INT 2
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: LD_INT 2
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 3
50082: NEG
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 3
50094: NEG
50095: PUSH
50096: LD_INT 2
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50129: LD_ADDR_VAR 0 28
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: LD_INT 1
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 1
50198: NEG
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: LD_INT 2
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: LD_INT 2
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: LD_INT 1
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 2
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 2
50254: PUSH
50255: LD_INT 1
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 2
50264: PUSH
50265: LD_INT 2
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: LD_INT 2
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: LD_INT 2
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 2
50305: NEG
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 2
50316: NEG
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 2
50328: NEG
50329: PUSH
50330: LD_INT 2
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: LD_INT 3
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: LD_INT 3
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 3
50364: NEG
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 3
50376: NEG
50377: PUSH
50378: LD_INT 2
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50411: LD_ADDR_VAR 0 29
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: NEG
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: LD_INT 2
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: LD_INT 2
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 2
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 2
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: LD_INT 2
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: LD_INT 2
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 1
50566: NEG
50567: PUSH
50568: LD_INT 1
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 2
50577: NEG
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 2
50589: NEG
50590: PUSH
50591: LD_INT 2
50593: NEG
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 2
50601: NEG
50602: PUSH
50603: LD_INT 3
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 2
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 3
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: LD_INT 3
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 3
50655: NEG
50656: PUSH
50657: LD_INT 2
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50690: LD_ADDR_VAR 0 30
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: LD_INT 2
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 2
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 2
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: LD_INT 2
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: LD_INT 2
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 2
50856: NEG
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 2
50867: NEG
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: LD_INT 3
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 3
50902: PUSH
50903: LD_INT 2
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 2
50912: PUSH
50913: LD_INT 3
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 2
50922: NEG
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 3
50933: NEG
50934: PUSH
50935: LD_INT 1
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50968: LD_ADDR_VAR 0 31
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: LD_INT 1
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: LD_INT 2
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 2
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 2
51082: PUSH
51083: LD_INT 1
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 2
51092: PUSH
51093: LD_INT 2
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 1
51102: PUSH
51103: LD_INT 2
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: LD_INT 2
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 2
51133: NEG
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 2
51145: NEG
51146: PUSH
51147: LD_INT 2
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 2
51157: NEG
51158: PUSH
51159: LD_INT 3
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 2
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 3
51180: PUSH
51181: LD_INT 1
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: LD_INT 3
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: LD_INT 2
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 3
51211: NEG
51212: PUSH
51213: LD_INT 2
51215: NEG
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51246: LD_ADDR_VAR 0 32
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: LD_INT 2
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: LD_INT 2
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 2
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 2
51371: PUSH
51372: LD_INT 2
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: LD_INT 2
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 2
51412: NEG
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 2
51423: NEG
51424: PUSH
51425: LD_INT 1
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: LD_INT 3
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: LD_INT 2
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 3
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 2
51468: PUSH
51469: LD_INT 3
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 2
51478: NEG
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 3
51489: NEG
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51524: LD_ADDR_VAR 0 33
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: LD_INT 1
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 1
51582: NEG
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: LD_INT 2
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 2
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 2
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: LD_INT 2
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: LD_INT 2
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: LD_INT 1
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 2
51679: NEG
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: LD_INT 1
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 2
51702: NEG
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: LD_INT 3
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 2
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 3
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: LD_INT 3
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: NEG
51758: PUSH
51759: LD_INT 2
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 3
51768: NEG
51769: PUSH
51770: LD_INT 2
51772: NEG
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51803: LD_ADDR_VAR 0 34
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: LD_INT 2
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: LD_INT 2
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 2
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: LD_INT 2
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 2
51959: NEG
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: NEG
51983: PUSH
51984: LD_INT 2
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: LD_INT 3
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: LD_INT 2
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 3
52017: PUSH
52018: LD_INT 2
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 2
52027: PUSH
52028: LD_INT 3
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 2
52037: NEG
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 3
52048: NEG
52049: PUSH
52050: LD_INT 1
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52083: LD_ADDR_VAR 0 35
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 1
52141: NEG
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 2
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 2
52174: NEG
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52195: LD_ADDR_VAR 0 36
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 1
52264: NEG
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 1
52276: NEG
52277: PUSH
52278: LD_INT 2
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: LD_INT 2
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52307: LD_ADDR_VAR 0 37
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 0
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: NEG
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52419: LD_ADDR_VAR 0 38
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: LD_INT 1
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: LD_INT 1
52492: NEG
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 2
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 2
52510: NEG
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52531: LD_ADDR_VAR 0 39
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: LD_INT 1
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: LD_INT 0
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: LD_INT 1
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: LD_INT 2
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 1
52624: PUSH
52625: LD_INT 2
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52643: LD_ADDR_VAR 0 40
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: LD_INT 1
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: LD_INT 1
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52755: LD_ADDR_VAR 0 41
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: LD_INT 1
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 1
52824: NEG
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: LD_INT 2
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 2
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 2
52879: PUSH
52880: LD_INT 2
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 1
52889: PUSH
52890: LD_INT 2
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 2
52910: NEG
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 2
52921: NEG
52922: PUSH
52923: LD_INT 1
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 2
52933: NEG
52934: PUSH
52935: LD_INT 2
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 2
52945: NEG
52946: PUSH
52947: LD_INT 3
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 3
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 3
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 3
52988: PUSH
52989: LD_INT 2
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 3
52998: PUSH
52999: LD_INT 3
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 2
53008: PUSH
53009: LD_INT 3
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 2
53018: NEG
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 3
53029: NEG
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 3
53040: NEG
53041: PUSH
53042: LD_INT 1
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 3
53052: NEG
53053: PUSH
53054: LD_INT 2
53056: NEG
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 3
53064: NEG
53065: PUSH
53066: LD_INT 3
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53105: LD_ADDR_VAR 0 42
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: LD_INT 1
53125: NEG
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: LD_INT 0
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: NEG
53187: PUSH
53188: LD_INT 2
53190: NEG
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: LD_INT 2
53201: NEG
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: LD_INT 1
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 2
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 2
53230: PUSH
53231: LD_INT 2
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: PUSH
53241: LD_INT 2
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: LD_INT 2
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 1
53260: NEG
53261: PUSH
53262: LD_INT 1
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 2
53271: NEG
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 2
53283: NEG
53284: PUSH
53285: LD_INT 2
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 2
53295: NEG
53296: PUSH
53297: LD_INT 3
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: LD_INT 3
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: LD_INT 3
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: LD_INT 2
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 3
53341: PUSH
53342: LD_INT 2
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 3
53351: PUSH
53352: LD_INT 3
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 2
53361: PUSH
53362: LD_INT 3
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: LD_INT 3
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: LD_INT 3
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: LD_INT 2
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 3
53402: NEG
53403: PUSH
53404: LD_INT 2
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 3
53414: NEG
53415: PUSH
53416: LD_INT 3
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53455: LD_ADDR_VAR 0 43
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: LD_INT 1
53475: NEG
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: NEG
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: NEG
53537: PUSH
53538: LD_INT 2
53540: NEG
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: LD_INT 2
53551: NEG
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 2
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 2
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: LD_INT 2
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: LD_INT 2
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 2
53621: NEG
53622: PUSH
53623: LD_INT 0
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 2
53632: NEG
53633: PUSH
53634: LD_INT 1
53636: NEG
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: LD_INT 3
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: LD_INT 3
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: LD_INT 2
53670: NEG
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 2
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 3
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 3
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: LD_INT 3
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: LD_INT 3
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 1
53729: NEG
53730: PUSH
53731: LD_INT 2
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 2
53740: NEG
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 3
53751: NEG
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 3
53762: NEG
53763: PUSH
53764: LD_INT 1
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53803: LD_ADDR_VAR 0 44
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 1
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: LD_INT 1
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: LD_INT 2
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 2
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 2
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 2
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: PUSH
53938: LD_INT 2
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 2
53958: NEG
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 2
53969: NEG
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 2
53981: NEG
53982: PUSH
53983: LD_INT 2
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 2
53993: NEG
53994: PUSH
53995: LD_INT 3
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 2
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 3
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 3
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 3
54036: PUSH
54037: LD_INT 2
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 3
54046: PUSH
54047: LD_INT 3
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 2
54056: PUSH
54057: LD_INT 3
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 2
54066: NEG
54067: PUSH
54068: LD_INT 1
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 3
54077: NEG
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 3
54088: NEG
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 3
54100: NEG
54101: PUSH
54102: LD_INT 2
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 3
54112: NEG
54113: PUSH
54114: LD_INT 3
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54153: LD_ADDR_VAR 0 45
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: LD_INT 2
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 2
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 2
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 2
54278: PUSH
54279: LD_INT 2
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: LD_INT 2
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: LD_INT 2
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 2
54319: NEG
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 2
54331: NEG
54332: PUSH
54333: LD_INT 2
54335: NEG
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 2
54343: NEG
54344: PUSH
54345: LD_INT 3
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 1
54355: NEG
54356: PUSH
54357: LD_INT 3
54359: NEG
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: LD_INT 3
54370: NEG
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: LD_INT 2
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 3
54389: PUSH
54390: LD_INT 2
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 3
54399: PUSH
54400: LD_INT 3
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 2
54409: PUSH
54410: LD_INT 3
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: LD_INT 3
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: LD_INT 3
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: LD_INT 2
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 3
54450: NEG
54451: PUSH
54452: LD_INT 2
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 3
54462: NEG
54463: PUSH
54464: LD_INT 3
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54503: LD_ADDR_VAR 0 46
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: LD_INT 1
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: LD_INT 2
54588: NEG
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: LD_INT 2
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 2
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 2
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: LD_INT 2
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 2
54669: NEG
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 2
54680: NEG
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: LD_INT 3
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 3
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: LD_INT 2
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 2
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 3
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 3
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: LD_INT 3
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: LD_INT 3
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: NEG
54778: PUSH
54779: LD_INT 2
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 2
54788: NEG
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 3
54799: NEG
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 3
54810: NEG
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54851: LD_ADDR_VAR 0 47
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: NEG
54933: PUSH
54934: LD_INT 2
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: LD_INT 2
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 2
54966: NEG
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 2
54978: NEG
54979: PUSH
54980: LD_INT 2
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55002: LD_ADDR_VAR 0 48
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 1
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: NEG
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 1
55083: NEG
55084: PUSH
55085: LD_INT 2
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: LD_INT 2
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: LD_INT 1
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 2
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 2
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55149: LD_ADDR_VAR 0 49
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: NEG
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: PUSH
55231: LD_INT 1
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 2
55241: PUSH
55242: LD_INT 0
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 2
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 2
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: LD_INT 2
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55293: LD_ADDR_VAR 0 50
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 1
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 2
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55437: LD_ADDR_VAR 0 51
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: PUSH
55476: LD_INT 1
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: LD_INT 1
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: LD_INT 1
55510: NEG
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: LD_INT 2
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: LD_INT 2
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 2
55549: NEG
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 2
55560: NEG
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55584: LD_ADDR_VAR 0 52
55588: PUSH
55589: LD_INT 0
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: LD_INT 1
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: LD_INT 2
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 2
55699: NEG
55700: PUSH
55701: LD_INT 1
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 2
55711: NEG
55712: PUSH
55713: LD_INT 2
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55735: LD_ADDR_VAR 0 53
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: LD_INT 1
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: LD_INT 2
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 0
55828: PUSH
55829: LD_INT 2
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 2
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 2
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: LD_INT 2
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: LD_INT 2
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: LD_INT 2
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 2
55911: NEG
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 2
55922: NEG
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 2
55934: NEG
55935: PUSH
55936: LD_INT 2
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55965: LD_ADDR_VAR 0 54
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: LD_INT 0
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 1
56034: NEG
56035: PUSH
56036: LD_INT 1
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: LD_INT 2
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 0
56058: PUSH
56059: LD_INT 2
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 2
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 2
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 2
56100: PUSH
56101: LD_INT 2
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: LD_INT 2
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: LD_INT 2
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 2
56141: NEG
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 2
56152: NEG
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 2
56164: NEG
56165: PUSH
56166: LD_INT 2
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56195: LD_ADDR_VAR 0 55
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: LD_INT 1
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 1
56253: NEG
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: LD_INT 1
56268: NEG
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: LD_INT 2
56280: NEG
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: LD_INT 2
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 1
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 2
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 2
56320: PUSH
56321: LD_INT 1
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 2
56330: PUSH
56331: LD_INT 2
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 1
56340: PUSH
56341: LD_INT 2
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 0
56350: PUSH
56351: LD_INT 2
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 2
56371: NEG
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 2
56382: NEG
56383: PUSH
56384: LD_INT 1
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 2
56394: NEG
56395: PUSH
56396: LD_INT 2
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56425: LD_ADDR_VAR 0 56
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: LD_INT 1
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: NEG
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 1
56494: NEG
56495: PUSH
56496: LD_INT 1
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: LD_INT 2
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: LD_INT 2
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 2
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 2
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 2
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: LD_INT 2
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: LD_INT 2
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: NEG
56591: PUSH
56592: LD_INT 1
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 2
56601: NEG
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 2
56612: NEG
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 2
56624: NEG
56625: PUSH
56626: LD_INT 2
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56655: LD_ADDR_VAR 0 57
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: LD_INT 0
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 0
56672: PUSH
56673: LD_INT 1
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: LD_INT 1
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 1
56724: NEG
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: LD_INT 2
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: LD_INT 2
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 1
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 2
56770: PUSH
56771: LD_INT 0
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 2
56780: PUSH
56781: LD_INT 1
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: LD_INT 2
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: LD_INT 2
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: LD_INT 2
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 1
56820: NEG
56821: PUSH
56822: LD_INT 1
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 2
56831: NEG
56832: PUSH
56833: LD_INT 0
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 2
56842: NEG
56843: PUSH
56844: LD_INT 1
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 2
56854: NEG
56855: PUSH
56856: LD_INT 2
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56885: LD_ADDR_VAR 0 58
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 0
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 1
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 0
56933: PUSH
56934: LD_INT 1
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 1
56943: NEG
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 1
56954: NEG
56955: PUSH
56956: LD_INT 1
56958: NEG
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: LD_INT 2
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: LD_INT 2
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 1
56989: PUSH
56990: LD_INT 1
56992: NEG
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 2
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 2
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 2
57020: PUSH
57021: LD_INT 2
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: LD_INT 2
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: LD_INT 2
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: LD_INT 1
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 2
57061: NEG
57062: PUSH
57063: LD_INT 0
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 2
57072: NEG
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 2
57084: NEG
57085: PUSH
57086: LD_INT 2
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57115: LD_ADDR_VAR 0 59
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 0
57132: PUSH
57133: LD_INT 1
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: LD_INT 1
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 0
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 1
57173: NEG
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 1
57184: NEG
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57203: LD_ADDR_VAR 0 60
57207: PUSH
57208: LD_INT 0
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: LD_INT 1
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: NEG
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57291: LD_ADDR_VAR 0 61
57295: PUSH
57296: LD_INT 0
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 1
57360: NEG
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57379: LD_ADDR_VAR 0 62
57383: PUSH
57384: LD_INT 0
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: LD_INT 1
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 1
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 0
57427: PUSH
57428: LD_INT 1
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 1
57437: NEG
57438: PUSH
57439: LD_INT 0
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 1
57448: NEG
57449: PUSH
57450: LD_INT 1
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57467: LD_ADDR_VAR 0 63
57471: PUSH
57472: LD_INT 0
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: PUSH
57506: LD_INT 1
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: LD_INT 1
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57555: LD_ADDR_VAR 0 64
57559: PUSH
57560: LD_INT 0
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 1
57583: PUSH
57584: LD_INT 0
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 1
57593: PUSH
57594: LD_INT 1
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: LD_INT 1
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 1
57624: NEG
57625: PUSH
57626: LD_INT 1
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: ST_TO_ADDR
// end ; 1 :
57643: GO 63540
57645: LD_INT 1
57647: DOUBLE
57648: EQUAL
57649: IFTRUE 57653
57651: GO 60276
57653: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57654: LD_ADDR_VAR 0 11
57658: PUSH
57659: LD_INT 1
57661: NEG
57662: PUSH
57663: LD_INT 3
57665: NEG
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: LD_INT 3
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 1
57684: PUSH
57685: LD_INT 2
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: LIST
57697: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57698: LD_ADDR_VAR 0 12
57702: PUSH
57703: LD_INT 2
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 3
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 3
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: LIST
57738: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57739: LD_ADDR_VAR 0 13
57743: PUSH
57744: LD_INT 3
57746: PUSH
57747: LD_INT 2
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 3
57756: PUSH
57757: LD_INT 3
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 2
57766: PUSH
57767: LD_INT 3
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: LIST
57778: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57779: LD_ADDR_VAR 0 14
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: LD_INT 3
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: LD_INT 3
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 1
57806: NEG
57807: PUSH
57808: LD_INT 2
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: LIST
57819: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57820: LD_ADDR_VAR 0 15
57824: PUSH
57825: LD_INT 2
57827: NEG
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 3
57838: NEG
57839: PUSH
57840: LD_INT 0
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 3
57849: NEG
57850: PUSH
57851: LD_INT 1
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: LIST
57863: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57864: LD_ADDR_VAR 0 16
57868: PUSH
57869: LD_INT 2
57871: NEG
57872: PUSH
57873: LD_INT 3
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 3
57883: NEG
57884: PUSH
57885: LD_INT 2
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 3
57895: NEG
57896: PUSH
57897: LD_INT 3
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: LIST
57909: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57910: LD_ADDR_VAR 0 17
57914: PUSH
57915: LD_INT 1
57917: NEG
57918: PUSH
57919: LD_INT 3
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: LD_INT 3
57932: NEG
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 1
57940: PUSH
57941: LD_INT 2
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: LIST
57953: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57954: LD_ADDR_VAR 0 18
57958: PUSH
57959: LD_INT 2
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 3
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 3
57982: PUSH
57983: LD_INT 1
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: LIST
57994: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57995: LD_ADDR_VAR 0 19
57999: PUSH
58000: LD_INT 3
58002: PUSH
58003: LD_INT 2
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 3
58012: PUSH
58013: LD_INT 3
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 2
58022: PUSH
58023: LD_INT 3
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: LIST
58034: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58035: LD_ADDR_VAR 0 20
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: LD_INT 3
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: LD_INT 3
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: LD_INT 2
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: LIST
58075: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58076: LD_ADDR_VAR 0 21
58080: PUSH
58081: LD_INT 2
58083: NEG
58084: PUSH
58085: LD_INT 1
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 3
58094: NEG
58095: PUSH
58096: LD_INT 0
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 3
58105: NEG
58106: PUSH
58107: LD_INT 1
58109: NEG
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: LIST
58119: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58120: LD_ADDR_VAR 0 22
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: LD_INT 3
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 3
58139: NEG
58140: PUSH
58141: LD_INT 2
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 3
58151: NEG
58152: PUSH
58153: LD_INT 3
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: LIST
58165: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58166: LD_ADDR_VAR 0 23
58170: PUSH
58171: LD_INT 0
58173: PUSH
58174: LD_INT 3
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 1
58184: NEG
58185: PUSH
58186: LD_INT 4
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 1
58196: PUSH
58197: LD_INT 3
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: LIST
58209: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58210: LD_ADDR_VAR 0 24
58214: PUSH
58215: LD_INT 3
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 3
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 4
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: LIST
58250: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58251: LD_ADDR_VAR 0 25
58255: PUSH
58256: LD_INT 3
58258: PUSH
58259: LD_INT 3
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 4
58268: PUSH
58269: LD_INT 3
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 3
58278: PUSH
58279: LD_INT 4
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: LIST
58290: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58291: LD_ADDR_VAR 0 26
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: LD_INT 3
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 1
58308: PUSH
58309: LD_INT 4
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 1
58318: NEG
58319: PUSH
58320: LD_INT 3
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: LIST
58331: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58332: LD_ADDR_VAR 0 27
58336: PUSH
58337: LD_INT 3
58339: NEG
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 3
58350: NEG
58351: PUSH
58352: LD_INT 1
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 4
58361: NEG
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: LIST
58375: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58376: LD_ADDR_VAR 0 28
58380: PUSH
58381: LD_INT 3
58383: NEG
58384: PUSH
58385: LD_INT 3
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 3
58395: NEG
58396: PUSH
58397: LD_INT 4
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 4
58407: NEG
58408: PUSH
58409: LD_INT 3
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: LIST
58421: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58422: LD_ADDR_VAR 0 29
58426: PUSH
58427: LD_INT 1
58429: NEG
58430: PUSH
58431: LD_INT 3
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: LD_INT 3
58444: NEG
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 1
58452: PUSH
58453: LD_INT 2
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 1
58463: NEG
58464: PUSH
58465: LD_INT 4
58467: NEG
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: LD_INT 4
58478: NEG
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: LD_INT 3
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 1
58497: NEG
58498: PUSH
58499: LD_INT 5
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: LD_INT 5
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 1
58520: PUSH
58521: LD_INT 4
58523: NEG
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 1
58531: NEG
58532: PUSH
58533: LD_INT 6
58535: NEG
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: LD_INT 6
58546: NEG
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 1
58554: PUSH
58555: LD_INT 5
58557: NEG
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58577: LD_ADDR_VAR 0 30
58581: PUSH
58582: LD_INT 2
58584: PUSH
58585: LD_INT 1
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 3
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 3
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 3
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 4
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 4
58636: PUSH
58637: LD_INT 1
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 4
58646: PUSH
58647: LD_INT 1
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 5
58657: PUSH
58658: LD_INT 0
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 5
58667: PUSH
58668: LD_INT 1
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 5
58677: PUSH
58678: LD_INT 1
58680: NEG
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 6
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 6
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58720: LD_ADDR_VAR 0 31
58724: PUSH
58725: LD_INT 3
58727: PUSH
58728: LD_INT 2
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 3
58737: PUSH
58738: LD_INT 3
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 2
58747: PUSH
58748: LD_INT 3
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 4
58757: PUSH
58758: LD_INT 3
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 4
58767: PUSH
58768: LD_INT 4
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 3
58777: PUSH
58778: LD_INT 4
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 5
58787: PUSH
58788: LD_INT 4
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 5
58797: PUSH
58798: LD_INT 5
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 4
58807: PUSH
58808: LD_INT 5
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 6
58817: PUSH
58818: LD_INT 5
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 6
58827: PUSH
58828: LD_INT 6
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 5
58837: PUSH
58838: LD_INT 6
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58859: LD_ADDR_VAR 0 32
58863: PUSH
58864: LD_INT 1
58866: PUSH
58867: LD_INT 3
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 0
58876: PUSH
58877: LD_INT 3
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 1
58886: NEG
58887: PUSH
58888: LD_INT 2
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 1
58897: PUSH
58898: LD_INT 4
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: LD_INT 4
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 1
58917: NEG
58918: PUSH
58919: LD_INT 3
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 1
58928: PUSH
58929: LD_INT 5
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: LD_INT 5
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 1
58948: NEG
58949: PUSH
58950: LD_INT 4
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: LD_INT 6
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: LD_INT 6
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 1
58979: NEG
58980: PUSH
58981: LD_INT 5
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59002: LD_ADDR_VAR 0 33
59006: PUSH
59007: LD_INT 2
59009: NEG
59010: PUSH
59011: LD_INT 1
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 3
59020: NEG
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 3
59031: NEG
59032: PUSH
59033: LD_INT 1
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 3
59043: NEG
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 4
59054: NEG
59055: PUSH
59056: LD_INT 0
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 4
59065: NEG
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 4
59077: NEG
59078: PUSH
59079: LD_INT 1
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 5
59088: NEG
59089: PUSH
59090: LD_INT 0
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 5
59099: NEG
59100: PUSH
59101: LD_INT 1
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 5
59111: NEG
59112: PUSH
59113: LD_INT 1
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 6
59122: NEG
59123: PUSH
59124: LD_INT 0
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 6
59133: NEG
59134: PUSH
59135: LD_INT 1
59137: NEG
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59157: LD_ADDR_VAR 0 34
59161: PUSH
59162: LD_INT 2
59164: NEG
59165: PUSH
59166: LD_INT 3
59168: NEG
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 3
59176: NEG
59177: PUSH
59178: LD_INT 2
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 3
59188: NEG
59189: PUSH
59190: LD_INT 3
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 3
59200: NEG
59201: PUSH
59202: LD_INT 4
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 4
59212: NEG
59213: PUSH
59214: LD_INT 3
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 4
59224: NEG
59225: PUSH
59226: LD_INT 4
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 4
59236: NEG
59237: PUSH
59238: LD_INT 5
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 5
59248: NEG
59249: PUSH
59250: LD_INT 4
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 5
59260: NEG
59261: PUSH
59262: LD_INT 5
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 5
59272: NEG
59273: PUSH
59274: LD_INT 6
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 6
59284: NEG
59285: PUSH
59286: LD_INT 5
59288: NEG
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 6
59296: NEG
59297: PUSH
59298: LD_INT 6
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59320: LD_ADDR_VAR 0 41
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: LD_INT 2
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 1
59338: NEG
59339: PUSH
59340: LD_INT 3
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 1
59350: PUSH
59351: LD_INT 2
59353: NEG
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: LIST
59363: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59364: LD_ADDR_VAR 0 42
59368: PUSH
59369: LD_INT 2
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 2
59381: PUSH
59382: LD_INT 1
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 3
59392: PUSH
59393: LD_INT 1
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: LIST
59404: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59405: LD_ADDR_VAR 0 43
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: LD_INT 2
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 3
59422: PUSH
59423: LD_INT 2
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 2
59432: PUSH
59433: LD_INT 3
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: LIST
59444: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59445: LD_ADDR_VAR 0 44
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: LD_INT 2
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 1
59462: PUSH
59463: LD_INT 3
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: LD_INT 2
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: LIST
59485: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59486: LD_ADDR_VAR 0 45
59490: PUSH
59491: LD_INT 2
59493: NEG
59494: PUSH
59495: LD_INT 0
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 2
59504: NEG
59505: PUSH
59506: LD_INT 1
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 3
59515: NEG
59516: PUSH
59517: LD_INT 1
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: LIST
59529: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59530: LD_ADDR_VAR 0 46
59534: PUSH
59535: LD_INT 2
59537: NEG
59538: PUSH
59539: LD_INT 2
59541: NEG
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 2
59549: NEG
59550: PUSH
59551: LD_INT 3
59553: NEG
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 3
59561: NEG
59562: PUSH
59563: LD_INT 2
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: LIST
59575: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59576: LD_ADDR_VAR 0 47
59580: PUSH
59581: LD_INT 2
59583: NEG
59584: PUSH
59585: LD_INT 3
59587: NEG
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 1
59595: NEG
59596: PUSH
59597: LD_INT 3
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59609: LD_ADDR_VAR 0 48
59613: PUSH
59614: LD_INT 1
59616: PUSH
59617: LD_INT 2
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 2
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59640: LD_ADDR_VAR 0 49
59644: PUSH
59645: LD_INT 3
59647: PUSH
59648: LD_INT 1
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 3
59657: PUSH
59658: LD_INT 2
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59669: LD_ADDR_VAR 0 50
59673: PUSH
59674: LD_INT 2
59676: PUSH
59677: LD_INT 3
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: LD_INT 3
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59698: LD_ADDR_VAR 0 51
59702: PUSH
59703: LD_INT 1
59705: NEG
59706: PUSH
59707: LD_INT 2
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 2
59716: NEG
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59729: LD_ADDR_VAR 0 52
59733: PUSH
59734: LD_INT 3
59736: NEG
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 3
59748: NEG
59749: PUSH
59750: LD_INT 2
59752: NEG
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59762: LD_ADDR_VAR 0 53
59766: PUSH
59767: LD_INT 1
59769: NEG
59770: PUSH
59771: LD_INT 3
59773: NEG
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: LD_INT 3
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: PUSH
59793: LD_INT 2
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: LIST
59805: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59806: LD_ADDR_VAR 0 54
59810: PUSH
59811: LD_INT 2
59813: PUSH
59814: LD_INT 1
59816: NEG
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 3
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 3
59834: PUSH
59835: LD_INT 1
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: LIST
59846: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59847: LD_ADDR_VAR 0 55
59851: PUSH
59852: LD_INT 3
59854: PUSH
59855: LD_INT 2
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 3
59864: PUSH
59865: LD_INT 3
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 2
59874: PUSH
59875: LD_INT 3
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: LIST
59886: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59887: LD_ADDR_VAR 0 56
59891: PUSH
59892: LD_INT 1
59894: PUSH
59895: LD_INT 3
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: LD_INT 3
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: LD_INT 2
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: LIST
59927: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59928: LD_ADDR_VAR 0 57
59932: PUSH
59933: LD_INT 2
59935: NEG
59936: PUSH
59937: LD_INT 1
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 3
59946: NEG
59947: PUSH
59948: LD_INT 0
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 3
59957: NEG
59958: PUSH
59959: LD_INT 1
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: LIST
59971: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59972: LD_ADDR_VAR 0 58
59976: PUSH
59977: LD_INT 2
59979: NEG
59980: PUSH
59981: LD_INT 3
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 3
59991: NEG
59992: PUSH
59993: LD_INT 2
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 3
60003: NEG
60004: PUSH
60005: LD_INT 3
60007: NEG
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: LIST
60017: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60018: LD_ADDR_VAR 0 59
60022: PUSH
60023: LD_INT 1
60025: NEG
60026: PUSH
60027: LD_INT 2
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 0
60037: PUSH
60038: LD_INT 2
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: LIST
60061: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60062: LD_ADDR_VAR 0 60
60066: PUSH
60067: LD_INT 1
60069: PUSH
60070: LD_INT 1
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 2
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 2
60090: PUSH
60091: LD_INT 1
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: LIST
60102: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60103: LD_ADDR_VAR 0 61
60107: PUSH
60108: LD_INT 2
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 2
60120: PUSH
60121: LD_INT 2
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 1
60130: PUSH
60131: LD_INT 2
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: LIST
60142: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60143: LD_ADDR_VAR 0 62
60147: PUSH
60148: LD_INT 1
60150: PUSH
60151: LD_INT 2
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: LD_INT 2
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: LD_INT 1
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: LIST
60183: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60184: LD_ADDR_VAR 0 63
60188: PUSH
60189: LD_INT 1
60191: NEG
60192: PUSH
60193: LD_INT 1
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 2
60202: NEG
60203: PUSH
60204: LD_INT 0
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 2
60213: NEG
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: LIST
60227: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60228: LD_ADDR_VAR 0 64
60232: PUSH
60233: LD_INT 1
60235: NEG
60236: PUSH
60237: LD_INT 2
60239: NEG
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 2
60247: NEG
60248: PUSH
60249: LD_INT 1
60251: NEG
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 2
60259: NEG
60260: PUSH
60261: LD_INT 2
60263: NEG
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: LIST
60273: ST_TO_ADDR
// end ; 2 :
60274: GO 63540
60276: LD_INT 2
60278: DOUBLE
60279: EQUAL
60280: IFTRUE 60284
60282: GO 63539
60284: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60285: LD_ADDR_VAR 0 29
60289: PUSH
60290: LD_INT 4
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 4
60302: PUSH
60303: LD_INT 1
60305: NEG
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 5
60313: PUSH
60314: LD_INT 0
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 5
60323: PUSH
60324: LD_INT 1
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 4
60333: PUSH
60334: LD_INT 1
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 3
60343: PUSH
60344: LD_INT 0
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 3
60353: PUSH
60354: LD_INT 1
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 3
60364: PUSH
60365: LD_INT 2
60367: NEG
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 5
60375: PUSH
60376: LD_INT 2
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 3
60385: PUSH
60386: LD_INT 3
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 3
60395: PUSH
60396: LD_INT 2
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 4
60405: PUSH
60406: LD_INT 3
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 4
60415: PUSH
60416: LD_INT 4
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 3
60425: PUSH
60426: LD_INT 4
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 2
60435: PUSH
60436: LD_INT 3
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 2
60445: PUSH
60446: LD_INT 2
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 4
60455: PUSH
60456: LD_INT 2
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 2
60465: PUSH
60466: LD_INT 4
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 0
60475: PUSH
60476: LD_INT 4
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: LD_INT 3
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: LD_INT 4
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: LD_INT 5
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: LD_INT 5
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 1
60525: NEG
60526: PUSH
60527: LD_INT 4
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 1
60536: NEG
60537: PUSH
60538: LD_INT 3
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 2
60547: PUSH
60548: LD_INT 5
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 2
60557: NEG
60558: PUSH
60559: LD_INT 3
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 3
60568: NEG
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 3
60579: NEG
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 2
60591: NEG
60592: PUSH
60593: LD_INT 0
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 2
60602: NEG
60603: PUSH
60604: LD_INT 1
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 3
60613: NEG
60614: PUSH
60615: LD_INT 1
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 4
60624: NEG
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 4
60635: NEG
60636: PUSH
60637: LD_INT 1
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 4
60647: NEG
60648: PUSH
60649: LD_INT 2
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 2
60659: NEG
60660: PUSH
60661: LD_INT 2
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 4
60670: NEG
60671: PUSH
60672: LD_INT 4
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 4
60682: NEG
60683: PUSH
60684: LD_INT 5
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 3
60694: NEG
60695: PUSH
60696: LD_INT 4
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 3
60706: NEG
60707: PUSH
60708: LD_INT 3
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 4
60718: NEG
60719: PUSH
60720: LD_INT 3
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 5
60730: NEG
60731: PUSH
60732: LD_INT 4
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 5
60742: NEG
60743: PUSH
60744: LD_INT 5
60746: NEG
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 3
60754: NEG
60755: PUSH
60756: LD_INT 5
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 5
60766: NEG
60767: PUSH
60768: LD_INT 3
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60823: LD_ADDR_VAR 0 30
60827: PUSH
60828: LD_INT 4
60830: PUSH
60831: LD_INT 4
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 4
60840: PUSH
60841: LD_INT 3
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 5
60850: PUSH
60851: LD_INT 4
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 5
60860: PUSH
60861: LD_INT 5
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 4
60870: PUSH
60871: LD_INT 5
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 3
60880: PUSH
60881: LD_INT 4
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 3
60890: PUSH
60891: LD_INT 3
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 5
60900: PUSH
60901: LD_INT 3
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 3
60910: PUSH
60911: LD_INT 5
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 0
60920: PUSH
60921: LD_INT 3
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: LD_INT 2
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 1
60940: PUSH
60941: LD_INT 3
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 1
60950: PUSH
60951: LD_INT 4
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 0
60960: PUSH
60961: LD_INT 4
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 1
60970: NEG
60971: PUSH
60972: LD_INT 3
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 1
60981: NEG
60982: PUSH
60983: LD_INT 2
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 2
60992: PUSH
60993: LD_INT 4
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 2
61002: NEG
61003: PUSH
61004: LD_INT 2
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 4
61013: NEG
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 4
61024: NEG
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 3
61036: NEG
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 3
61047: NEG
61048: PUSH
61049: LD_INT 1
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 4
61058: NEG
61059: PUSH
61060: LD_INT 1
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 5
61069: NEG
61070: PUSH
61071: LD_INT 0
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 5
61080: NEG
61081: PUSH
61082: LD_INT 1
61084: NEG
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 5
61092: NEG
61093: PUSH
61094: LD_INT 2
61096: NEG
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 3
61104: NEG
61105: PUSH
61106: LD_INT 2
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 3
61115: NEG
61116: PUSH
61117: LD_INT 3
61119: NEG
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 3
61127: NEG
61128: PUSH
61129: LD_INT 4
61131: NEG
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 2
61139: NEG
61140: PUSH
61141: LD_INT 3
61143: NEG
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 2
61151: NEG
61152: PUSH
61153: LD_INT 2
61155: NEG
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 3
61163: NEG
61164: PUSH
61165: LD_INT 2
61167: NEG
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 4
61175: NEG
61176: PUSH
61177: LD_INT 3
61179: NEG
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 4
61187: NEG
61188: PUSH
61189: LD_INT 4
61191: NEG
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 2
61199: NEG
61200: PUSH
61201: LD_INT 4
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 4
61211: NEG
61212: PUSH
61213: LD_INT 2
61215: NEG
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 0
61223: PUSH
61224: LD_INT 4
61226: NEG
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: LD_INT 5
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 1
61245: PUSH
61246: LD_INT 4
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 1
61256: PUSH
61257: LD_INT 3
61259: NEG
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 0
61267: PUSH
61268: LD_INT 3
61270: NEG
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 1
61278: NEG
61279: PUSH
61280: LD_INT 4
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 1
61290: NEG
61291: PUSH
61292: LD_INT 5
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 2
61302: PUSH
61303: LD_INT 3
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 2
61313: NEG
61314: PUSH
61315: LD_INT 5
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61370: LD_ADDR_VAR 0 31
61374: PUSH
61375: LD_INT 0
61377: PUSH
61378: LD_INT 4
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: LD_INT 3
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 1
61397: PUSH
61398: LD_INT 4
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 1
61407: PUSH
61408: LD_INT 5
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: LD_INT 5
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 1
61427: NEG
61428: PUSH
61429: LD_INT 4
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 1
61438: NEG
61439: PUSH
61440: LD_INT 3
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 2
61449: PUSH
61450: LD_INT 5
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 2
61459: NEG
61460: PUSH
61461: LD_INT 3
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 3
61470: NEG
61471: PUSH
61472: LD_INT 0
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 3
61481: NEG
61482: PUSH
61483: LD_INT 1
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 2
61493: NEG
61494: PUSH
61495: LD_INT 0
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 2
61504: NEG
61505: PUSH
61506: LD_INT 1
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 3
61515: NEG
61516: PUSH
61517: LD_INT 1
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 4
61526: NEG
61527: PUSH
61528: LD_INT 0
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 4
61537: NEG
61538: PUSH
61539: LD_INT 1
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 4
61549: NEG
61550: PUSH
61551: LD_INT 2
61553: NEG
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 2
61561: NEG
61562: PUSH
61563: LD_INT 2
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 4
61572: NEG
61573: PUSH
61574: LD_INT 4
61576: NEG
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 4
61584: NEG
61585: PUSH
61586: LD_INT 5
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 3
61596: NEG
61597: PUSH
61598: LD_INT 4
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 3
61608: NEG
61609: PUSH
61610: LD_INT 3
61612: NEG
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 4
61620: NEG
61621: PUSH
61622: LD_INT 3
61624: NEG
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 5
61632: NEG
61633: PUSH
61634: LD_INT 4
61636: NEG
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 5
61644: NEG
61645: PUSH
61646: LD_INT 5
61648: NEG
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 3
61656: NEG
61657: PUSH
61658: LD_INT 5
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 5
61668: NEG
61669: PUSH
61670: LD_INT 3
61672: NEG
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 0
61680: PUSH
61681: LD_INT 3
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: LD_INT 4
61694: NEG
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: LD_INT 3
61705: NEG
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 1
61713: PUSH
61714: LD_INT 2
61716: NEG
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 0
61724: PUSH
61725: LD_INT 2
61727: NEG
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: LD_INT 3
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 1
61747: NEG
61748: PUSH
61749: LD_INT 4
61751: NEG
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 2
61759: PUSH
61760: LD_INT 2
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 2
61770: NEG
61771: PUSH
61772: LD_INT 4
61774: NEG
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 4
61782: PUSH
61783: LD_INT 0
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 4
61792: PUSH
61793: LD_INT 1
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 5
61803: PUSH
61804: LD_INT 0
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 5
61813: PUSH
61814: LD_INT 1
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 4
61823: PUSH
61824: LD_INT 1
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 3
61833: PUSH
61834: LD_INT 0
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 3
61843: PUSH
61844: LD_INT 1
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 3
61854: PUSH
61855: LD_INT 2
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 5
61865: PUSH
61866: LD_INT 2
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61920: LD_ADDR_VAR 0 32
61924: PUSH
61925: LD_INT 4
61927: NEG
61928: PUSH
61929: LD_INT 0
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 4
61938: NEG
61939: PUSH
61940: LD_INT 1
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 3
61950: NEG
61951: PUSH
61952: LD_INT 0
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 3
61961: NEG
61962: PUSH
61963: LD_INT 1
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 4
61972: NEG
61973: PUSH
61974: LD_INT 1
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 5
61983: NEG
61984: PUSH
61985: LD_INT 0
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 5
61994: NEG
61995: PUSH
61996: LD_INT 1
61998: NEG
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 5
62006: NEG
62007: PUSH
62008: LD_INT 2
62010: NEG
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 3
62018: NEG
62019: PUSH
62020: LD_INT 2
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 3
62029: NEG
62030: PUSH
62031: LD_INT 3
62033: NEG
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 3
62041: NEG
62042: PUSH
62043: LD_INT 4
62045: NEG
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 2
62053: NEG
62054: PUSH
62055: LD_INT 3
62057: NEG
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 2
62065: NEG
62066: PUSH
62067: LD_INT 2
62069: NEG
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 3
62077: NEG
62078: PUSH
62079: LD_INT 2
62081: NEG
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 4
62089: NEG
62090: PUSH
62091: LD_INT 3
62093: NEG
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 4
62101: NEG
62102: PUSH
62103: LD_INT 4
62105: NEG
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 2
62113: NEG
62114: PUSH
62115: LD_INT 4
62117: NEG
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 4
62125: NEG
62126: PUSH
62127: LD_INT 2
62129: NEG
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: LD_INT 4
62140: NEG
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 0
62148: PUSH
62149: LD_INT 5
62151: NEG
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 1
62159: PUSH
62160: LD_INT 4
62162: NEG
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: LD_INT 3
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: LD_INT 3
62184: NEG
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 1
62192: NEG
62193: PUSH
62194: LD_INT 4
62196: NEG
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 1
62204: NEG
62205: PUSH
62206: LD_INT 5
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 2
62216: PUSH
62217: LD_INT 3
62219: NEG
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 2
62227: NEG
62228: PUSH
62229: LD_INT 5
62231: NEG
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 3
62239: PUSH
62240: LD_INT 0
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 3
62249: PUSH
62250: LD_INT 1
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 4
62260: PUSH
62261: LD_INT 0
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 4
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 3
62280: PUSH
62281: LD_INT 1
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 2
62290: PUSH
62291: LD_INT 0
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 2
62300: PUSH
62301: LD_INT 1
62303: NEG
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 2
62311: PUSH
62312: LD_INT 2
62314: NEG
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 4
62322: PUSH
62323: LD_INT 2
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 4
62332: PUSH
62333: LD_INT 4
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 4
62342: PUSH
62343: LD_INT 3
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 5
62352: PUSH
62353: LD_INT 4
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 5
62362: PUSH
62363: LD_INT 5
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 4
62372: PUSH
62373: LD_INT 5
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 3
62382: PUSH
62383: LD_INT 4
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 3
62392: PUSH
62393: LD_INT 3
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 5
62402: PUSH
62403: LD_INT 3
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 3
62412: PUSH
62413: LD_INT 5
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62467: LD_ADDR_VAR 0 33
62471: PUSH
62472: LD_INT 4
62474: NEG
62475: PUSH
62476: LD_INT 4
62478: NEG
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 4
62486: NEG
62487: PUSH
62488: LD_INT 5
62490: NEG
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 3
62498: NEG
62499: PUSH
62500: LD_INT 4
62502: NEG
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 3
62510: NEG
62511: PUSH
62512: LD_INT 3
62514: NEG
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 4
62522: NEG
62523: PUSH
62524: LD_INT 3
62526: NEG
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 5
62534: NEG
62535: PUSH
62536: LD_INT 4
62538: NEG
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 5
62546: NEG
62547: PUSH
62548: LD_INT 5
62550: NEG
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 3
62558: NEG
62559: PUSH
62560: LD_INT 5
62562: NEG
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 5
62570: NEG
62571: PUSH
62572: LD_INT 3
62574: NEG
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 0
62582: PUSH
62583: LD_INT 3
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: LD_INT 4
62596: NEG
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 1
62604: PUSH
62605: LD_INT 3
62607: NEG
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 1
62615: PUSH
62616: LD_INT 2
62618: NEG
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: LD_INT 2
62629: NEG
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 1
62637: NEG
62638: PUSH
62639: LD_INT 3
62641: NEG
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 1
62649: NEG
62650: PUSH
62651: LD_INT 4
62653: NEG
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 2
62661: PUSH
62662: LD_INT 2
62664: NEG
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 2
62672: NEG
62673: PUSH
62674: LD_INT 4
62676: NEG
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 4
62684: PUSH
62685: LD_INT 0
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 4
62694: PUSH
62695: LD_INT 1
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 5
62705: PUSH
62706: LD_INT 0
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 5
62715: PUSH
62716: LD_INT 1
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 4
62725: PUSH
62726: LD_INT 1
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 3
62735: PUSH
62736: LD_INT 0
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 3
62745: PUSH
62746: LD_INT 1
62748: NEG
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 3
62756: PUSH
62757: LD_INT 2
62759: NEG
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 5
62767: PUSH
62768: LD_INT 2
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 3
62777: PUSH
62778: LD_INT 3
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 3
62787: PUSH
62788: LD_INT 2
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 4
62797: PUSH
62798: LD_INT 3
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 4
62807: PUSH
62808: LD_INT 4
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 3
62817: PUSH
62818: LD_INT 4
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 2
62827: PUSH
62828: LD_INT 3
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 2
62837: PUSH
62838: LD_INT 2
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 4
62847: PUSH
62848: LD_INT 2
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 2
62857: PUSH
62858: LD_INT 4
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 0
62867: PUSH
62868: LD_INT 4
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 0
62877: PUSH
62878: LD_INT 3
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 1
62887: PUSH
62888: LD_INT 4
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 1
62897: PUSH
62898: LD_INT 5
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 0
62907: PUSH
62908: LD_INT 5
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 1
62917: NEG
62918: PUSH
62919: LD_INT 4
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 1
62928: NEG
62929: PUSH
62930: LD_INT 3
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 2
62939: PUSH
62940: LD_INT 5
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 2
62949: NEG
62950: PUSH
62951: LD_INT 3
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63005: LD_ADDR_VAR 0 34
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: LD_INT 4
63015: NEG
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 0
63023: PUSH
63024: LD_INT 5
63026: NEG
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 1
63034: PUSH
63035: LD_INT 4
63037: NEG
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 1
63045: PUSH
63046: LD_INT 3
63048: NEG
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 0
63056: PUSH
63057: LD_INT 3
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 1
63067: NEG
63068: PUSH
63069: LD_INT 4
63071: NEG
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 1
63079: NEG
63080: PUSH
63081: LD_INT 5
63083: NEG
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 2
63091: PUSH
63092: LD_INT 3
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 2
63102: NEG
63103: PUSH
63104: LD_INT 5
63106: NEG
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 3
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 3
63124: PUSH
63125: LD_INT 1
63127: NEG
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 4
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 4
63145: PUSH
63146: LD_INT 1
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 3
63155: PUSH
63156: LD_INT 1
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 2
63165: PUSH
63166: LD_INT 0
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 2
63175: PUSH
63176: LD_INT 1
63178: NEG
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 2
63186: PUSH
63187: LD_INT 2
63189: NEG
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 4
63197: PUSH
63198: LD_INT 2
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 4
63207: PUSH
63208: LD_INT 4
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 4
63217: PUSH
63218: LD_INT 3
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 5
63227: PUSH
63228: LD_INT 4
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 5
63237: PUSH
63238: LD_INT 5
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 4
63247: PUSH
63248: LD_INT 5
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 3
63257: PUSH
63258: LD_INT 4
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 3
63267: PUSH
63268: LD_INT 3
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 5
63277: PUSH
63278: LD_INT 3
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 3
63287: PUSH
63288: LD_INT 5
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 0
63297: PUSH
63298: LD_INT 3
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 0
63307: PUSH
63308: LD_INT 2
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 1
63317: PUSH
63318: LD_INT 3
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 1
63327: PUSH
63328: LD_INT 4
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 0
63337: PUSH
63338: LD_INT 4
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 1
63347: NEG
63348: PUSH
63349: LD_INT 3
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: LD_INT 2
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 2
63369: PUSH
63370: LD_INT 4
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 2
63379: NEG
63380: PUSH
63381: LD_INT 2
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 4
63390: NEG
63391: PUSH
63392: LD_INT 0
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 4
63401: NEG
63402: PUSH
63403: LD_INT 1
63405: NEG
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 3
63413: NEG
63414: PUSH
63415: LD_INT 0
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 3
63424: NEG
63425: PUSH
63426: LD_INT 1
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 4
63435: NEG
63436: PUSH
63437: LD_INT 1
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 5
63446: NEG
63447: PUSH
63448: LD_INT 0
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 5
63457: NEG
63458: PUSH
63459: LD_INT 1
63461: NEG
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 5
63469: NEG
63470: PUSH
63471: LD_INT 2
63473: NEG
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 3
63481: NEG
63482: PUSH
63483: LD_INT 2
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: ST_TO_ADDR
// end ; end ;
63537: GO 63540
63539: POP
// case btype of b_depot , b_warehouse :
63540: LD_VAR 0 1
63544: PUSH
63545: LD_INT 0
63547: DOUBLE
63548: EQUAL
63549: IFTRUE 63559
63551: LD_INT 1
63553: DOUBLE
63554: EQUAL
63555: IFTRUE 63559
63557: GO 63760
63559: POP
// case nation of nation_american :
63560: LD_VAR 0 5
63564: PUSH
63565: LD_INT 1
63567: DOUBLE
63568: EQUAL
63569: IFTRUE 63573
63571: GO 63629
63573: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63574: LD_ADDR_VAR 0 9
63578: PUSH
63579: LD_VAR 0 11
63583: PUSH
63584: LD_VAR 0 12
63588: PUSH
63589: LD_VAR 0 13
63593: PUSH
63594: LD_VAR 0 14
63598: PUSH
63599: LD_VAR 0 15
63603: PUSH
63604: LD_VAR 0 16
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: PUSH
63617: LD_VAR 0 4
63621: PUSH
63622: LD_INT 1
63624: PLUS
63625: ARRAY
63626: ST_TO_ADDR
63627: GO 63758
63629: LD_INT 2
63631: DOUBLE
63632: EQUAL
63633: IFTRUE 63637
63635: GO 63693
63637: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63638: LD_ADDR_VAR 0 9
63642: PUSH
63643: LD_VAR 0 17
63647: PUSH
63648: LD_VAR 0 18
63652: PUSH
63653: LD_VAR 0 19
63657: PUSH
63658: LD_VAR 0 20
63662: PUSH
63663: LD_VAR 0 21
63667: PUSH
63668: LD_VAR 0 22
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: PUSH
63681: LD_VAR 0 4
63685: PUSH
63686: LD_INT 1
63688: PLUS
63689: ARRAY
63690: ST_TO_ADDR
63691: GO 63758
63693: LD_INT 3
63695: DOUBLE
63696: EQUAL
63697: IFTRUE 63701
63699: GO 63757
63701: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63702: LD_ADDR_VAR 0 9
63706: PUSH
63707: LD_VAR 0 23
63711: PUSH
63712: LD_VAR 0 24
63716: PUSH
63717: LD_VAR 0 25
63721: PUSH
63722: LD_VAR 0 26
63726: PUSH
63727: LD_VAR 0 27
63731: PUSH
63732: LD_VAR 0 28
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: PUSH
63745: LD_VAR 0 4
63749: PUSH
63750: LD_INT 1
63752: PLUS
63753: ARRAY
63754: ST_TO_ADDR
63755: GO 63758
63757: POP
63758: GO 64313
63760: LD_INT 2
63762: DOUBLE
63763: EQUAL
63764: IFTRUE 63774
63766: LD_INT 3
63768: DOUBLE
63769: EQUAL
63770: IFTRUE 63774
63772: GO 63830
63774: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63775: LD_ADDR_VAR 0 9
63779: PUSH
63780: LD_VAR 0 29
63784: PUSH
63785: LD_VAR 0 30
63789: PUSH
63790: LD_VAR 0 31
63794: PUSH
63795: LD_VAR 0 32
63799: PUSH
63800: LD_VAR 0 33
63804: PUSH
63805: LD_VAR 0 34
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: PUSH
63818: LD_VAR 0 4
63822: PUSH
63823: LD_INT 1
63825: PLUS
63826: ARRAY
63827: ST_TO_ADDR
63828: GO 64313
63830: LD_INT 16
63832: DOUBLE
63833: EQUAL
63834: IFTRUE 63892
63836: LD_INT 17
63838: DOUBLE
63839: EQUAL
63840: IFTRUE 63892
63842: LD_INT 18
63844: DOUBLE
63845: EQUAL
63846: IFTRUE 63892
63848: LD_INT 19
63850: DOUBLE
63851: EQUAL
63852: IFTRUE 63892
63854: LD_INT 22
63856: DOUBLE
63857: EQUAL
63858: IFTRUE 63892
63860: LD_INT 20
63862: DOUBLE
63863: EQUAL
63864: IFTRUE 63892
63866: LD_INT 21
63868: DOUBLE
63869: EQUAL
63870: IFTRUE 63892
63872: LD_INT 23
63874: DOUBLE
63875: EQUAL
63876: IFTRUE 63892
63878: LD_INT 24
63880: DOUBLE
63881: EQUAL
63882: IFTRUE 63892
63884: LD_INT 25
63886: DOUBLE
63887: EQUAL
63888: IFTRUE 63892
63890: GO 63948
63892: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63893: LD_ADDR_VAR 0 9
63897: PUSH
63898: LD_VAR 0 35
63902: PUSH
63903: LD_VAR 0 36
63907: PUSH
63908: LD_VAR 0 37
63912: PUSH
63913: LD_VAR 0 38
63917: PUSH
63918: LD_VAR 0 39
63922: PUSH
63923: LD_VAR 0 40
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: PUSH
63936: LD_VAR 0 4
63940: PUSH
63941: LD_INT 1
63943: PLUS
63944: ARRAY
63945: ST_TO_ADDR
63946: GO 64313
63948: LD_INT 6
63950: DOUBLE
63951: EQUAL
63952: IFTRUE 64004
63954: LD_INT 7
63956: DOUBLE
63957: EQUAL
63958: IFTRUE 64004
63960: LD_INT 8
63962: DOUBLE
63963: EQUAL
63964: IFTRUE 64004
63966: LD_INT 13
63968: DOUBLE
63969: EQUAL
63970: IFTRUE 64004
63972: LD_INT 12
63974: DOUBLE
63975: EQUAL
63976: IFTRUE 64004
63978: LD_INT 15
63980: DOUBLE
63981: EQUAL
63982: IFTRUE 64004
63984: LD_INT 11
63986: DOUBLE
63987: EQUAL
63988: IFTRUE 64004
63990: LD_INT 14
63992: DOUBLE
63993: EQUAL
63994: IFTRUE 64004
63996: LD_INT 10
63998: DOUBLE
63999: EQUAL
64000: IFTRUE 64004
64002: GO 64060
64004: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64005: LD_ADDR_VAR 0 9
64009: PUSH
64010: LD_VAR 0 41
64014: PUSH
64015: LD_VAR 0 42
64019: PUSH
64020: LD_VAR 0 43
64024: PUSH
64025: LD_VAR 0 44
64029: PUSH
64030: LD_VAR 0 45
64034: PUSH
64035: LD_VAR 0 46
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: PUSH
64048: LD_VAR 0 4
64052: PUSH
64053: LD_INT 1
64055: PLUS
64056: ARRAY
64057: ST_TO_ADDR
64058: GO 64313
64060: LD_INT 36
64062: DOUBLE
64063: EQUAL
64064: IFTRUE 64068
64066: GO 64124
64068: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64069: LD_ADDR_VAR 0 9
64073: PUSH
64074: LD_VAR 0 47
64078: PUSH
64079: LD_VAR 0 48
64083: PUSH
64084: LD_VAR 0 49
64088: PUSH
64089: LD_VAR 0 50
64093: PUSH
64094: LD_VAR 0 51
64098: PUSH
64099: LD_VAR 0 52
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: PUSH
64112: LD_VAR 0 4
64116: PUSH
64117: LD_INT 1
64119: PLUS
64120: ARRAY
64121: ST_TO_ADDR
64122: GO 64313
64124: LD_INT 4
64126: DOUBLE
64127: EQUAL
64128: IFTRUE 64150
64130: LD_INT 5
64132: DOUBLE
64133: EQUAL
64134: IFTRUE 64150
64136: LD_INT 34
64138: DOUBLE
64139: EQUAL
64140: IFTRUE 64150
64142: LD_INT 37
64144: DOUBLE
64145: EQUAL
64146: IFTRUE 64150
64148: GO 64206
64150: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64151: LD_ADDR_VAR 0 9
64155: PUSH
64156: LD_VAR 0 53
64160: PUSH
64161: LD_VAR 0 54
64165: PUSH
64166: LD_VAR 0 55
64170: PUSH
64171: LD_VAR 0 56
64175: PUSH
64176: LD_VAR 0 57
64180: PUSH
64181: LD_VAR 0 58
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: PUSH
64194: LD_VAR 0 4
64198: PUSH
64199: LD_INT 1
64201: PLUS
64202: ARRAY
64203: ST_TO_ADDR
64204: GO 64313
64206: LD_INT 31
64208: DOUBLE
64209: EQUAL
64210: IFTRUE 64256
64212: LD_INT 32
64214: DOUBLE
64215: EQUAL
64216: IFTRUE 64256
64218: LD_INT 33
64220: DOUBLE
64221: EQUAL
64222: IFTRUE 64256
64224: LD_INT 27
64226: DOUBLE
64227: EQUAL
64228: IFTRUE 64256
64230: LD_INT 26
64232: DOUBLE
64233: EQUAL
64234: IFTRUE 64256
64236: LD_INT 28
64238: DOUBLE
64239: EQUAL
64240: IFTRUE 64256
64242: LD_INT 29
64244: DOUBLE
64245: EQUAL
64246: IFTRUE 64256
64248: LD_INT 30
64250: DOUBLE
64251: EQUAL
64252: IFTRUE 64256
64254: GO 64312
64256: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64257: LD_ADDR_VAR 0 9
64261: PUSH
64262: LD_VAR 0 59
64266: PUSH
64267: LD_VAR 0 60
64271: PUSH
64272: LD_VAR 0 61
64276: PUSH
64277: LD_VAR 0 62
64281: PUSH
64282: LD_VAR 0 63
64286: PUSH
64287: LD_VAR 0 64
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: PUSH
64300: LD_VAR 0 4
64304: PUSH
64305: LD_INT 1
64307: PLUS
64308: ARRAY
64309: ST_TO_ADDR
64310: GO 64313
64312: POP
// temp_list2 = [ ] ;
64313: LD_ADDR_VAR 0 10
64317: PUSH
64318: EMPTY
64319: ST_TO_ADDR
// for i in temp_list do
64320: LD_ADDR_VAR 0 8
64324: PUSH
64325: LD_VAR 0 9
64329: PUSH
64330: FOR_IN
64331: IFFALSE 64383
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64333: LD_ADDR_VAR 0 10
64337: PUSH
64338: LD_VAR 0 10
64342: PUSH
64343: LD_VAR 0 8
64347: PUSH
64348: LD_INT 1
64350: ARRAY
64351: PUSH
64352: LD_VAR 0 2
64356: PLUS
64357: PUSH
64358: LD_VAR 0 8
64362: PUSH
64363: LD_INT 2
64365: ARRAY
64366: PUSH
64367: LD_VAR 0 3
64371: PLUS
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: EMPTY
64378: LIST
64379: ADD
64380: ST_TO_ADDR
64381: GO 64330
64383: POP
64384: POP
// result = temp_list2 ;
64385: LD_ADDR_VAR 0 7
64389: PUSH
64390: LD_VAR 0 10
64394: ST_TO_ADDR
// end ;
64395: LD_VAR 0 7
64399: RET
// export function EnemyInRange ( unit , dist ) ; begin
64400: LD_INT 0
64402: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64403: LD_ADDR_VAR 0 3
64407: PUSH
64408: LD_VAR 0 1
64412: PPUSH
64413: CALL_OW 255
64417: PPUSH
64418: LD_VAR 0 1
64422: PPUSH
64423: CALL_OW 250
64427: PPUSH
64428: LD_VAR 0 1
64432: PPUSH
64433: CALL_OW 251
64437: PPUSH
64438: LD_VAR 0 2
64442: PPUSH
64443: CALL 38171 0 4
64447: PUSH
64448: LD_INT 4
64450: ARRAY
64451: ST_TO_ADDR
// end ;
64452: LD_VAR 0 3
64456: RET
// export function PlayerSeeMe ( unit ) ; begin
64457: LD_INT 0
64459: PPUSH
// result := See ( your_side , unit ) ;
64460: LD_ADDR_VAR 0 2
64464: PUSH
64465: LD_OWVAR 2
64469: PPUSH
64470: LD_VAR 0 1
64474: PPUSH
64475: CALL_OW 292
64479: ST_TO_ADDR
// end ;
64480: LD_VAR 0 2
64484: RET
// export function ReverseDir ( unit ) ; begin
64485: LD_INT 0
64487: PPUSH
// if not unit then
64488: LD_VAR 0 1
64492: NOT
64493: IFFALSE 64497
// exit ;
64495: GO 64520
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64497: LD_ADDR_VAR 0 2
64501: PUSH
64502: LD_VAR 0 1
64506: PPUSH
64507: CALL_OW 254
64511: PUSH
64512: LD_INT 3
64514: PLUS
64515: PUSH
64516: LD_INT 6
64518: MOD
64519: ST_TO_ADDR
// end ;
64520: LD_VAR 0 2
64524: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
64525: LD_INT 0
64527: PPUSH
64528: PPUSH
64529: PPUSH
64530: PPUSH
64531: PPUSH
// if not hexes then
64532: LD_VAR 0 2
64536: NOT
64537: IFFALSE 64541
// exit ;
64539: GO 64689
// dist := 9999 ;
64541: LD_ADDR_VAR 0 5
64545: PUSH
64546: LD_INT 9999
64548: ST_TO_ADDR
// for i = 1 to hexes do
64549: LD_ADDR_VAR 0 4
64553: PUSH
64554: DOUBLE
64555: LD_INT 1
64557: DEC
64558: ST_TO_ADDR
64559: LD_VAR 0 2
64563: PUSH
64564: FOR_TO
64565: IFFALSE 64677
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
64567: LD_VAR 0 1
64571: PPUSH
64572: LD_VAR 0 2
64576: PUSH
64577: LD_VAR 0 4
64581: ARRAY
64582: PUSH
64583: LD_INT 1
64585: ARRAY
64586: PPUSH
64587: LD_VAR 0 2
64591: PUSH
64592: LD_VAR 0 4
64596: ARRAY
64597: PUSH
64598: LD_INT 2
64600: ARRAY
64601: PPUSH
64602: CALL_OW 297
64606: PUSH
64607: LD_VAR 0 5
64611: LESS
64612: IFFALSE 64675
// begin hex := hexes [ i ] ;
64614: LD_ADDR_VAR 0 7
64618: PUSH
64619: LD_VAR 0 2
64623: PUSH
64624: LD_VAR 0 4
64628: ARRAY
64629: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64630: LD_ADDR_VAR 0 5
64634: PUSH
64635: LD_VAR 0 1
64639: PPUSH
64640: LD_VAR 0 2
64644: PUSH
64645: LD_VAR 0 4
64649: ARRAY
64650: PUSH
64651: LD_INT 1
64653: ARRAY
64654: PPUSH
64655: LD_VAR 0 2
64659: PUSH
64660: LD_VAR 0 4
64664: ARRAY
64665: PUSH
64666: LD_INT 2
64668: ARRAY
64669: PPUSH
64670: CALL_OW 297
64674: ST_TO_ADDR
// end ; end ;
64675: GO 64564
64677: POP
64678: POP
// result := hex ;
64679: LD_ADDR_VAR 0 3
64683: PUSH
64684: LD_VAR 0 7
64688: ST_TO_ADDR
// end ;
64689: LD_VAR 0 3
64693: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64694: LD_INT 0
64696: PPUSH
64697: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64698: LD_VAR 0 1
64702: NOT
64703: PUSH
64704: LD_VAR 0 1
64708: PUSH
64709: LD_INT 21
64711: PUSH
64712: LD_INT 2
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 23
64721: PUSH
64722: LD_INT 2
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PPUSH
64733: CALL_OW 69
64737: IN
64738: NOT
64739: OR
64740: IFFALSE 64744
// exit ;
64742: GO 64791
// for i = 1 to 3 do
64744: LD_ADDR_VAR 0 3
64748: PUSH
64749: DOUBLE
64750: LD_INT 1
64752: DEC
64753: ST_TO_ADDR
64754: LD_INT 3
64756: PUSH
64757: FOR_TO
64758: IFFALSE 64789
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64760: LD_VAR 0 1
64764: PPUSH
64765: CALL_OW 250
64769: PPUSH
64770: LD_VAR 0 1
64774: PPUSH
64775: CALL_OW 251
64779: PPUSH
64780: LD_INT 1
64782: PPUSH
64783: CALL_OW 453
64787: GO 64757
64789: POP
64790: POP
// end ;
64791: LD_VAR 0 2
64795: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64796: LD_INT 0
64798: PPUSH
64799: PPUSH
64800: PPUSH
64801: PPUSH
64802: PPUSH
64803: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64804: LD_VAR 0 1
64808: NOT
64809: PUSH
64810: LD_VAR 0 2
64814: NOT
64815: OR
64816: PUSH
64817: LD_VAR 0 1
64821: PPUSH
64822: CALL_OW 314
64826: OR
64827: IFFALSE 64831
// exit ;
64829: GO 65272
// x := GetX ( enemy_unit ) ;
64831: LD_ADDR_VAR 0 7
64835: PUSH
64836: LD_VAR 0 2
64840: PPUSH
64841: CALL_OW 250
64845: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64846: LD_ADDR_VAR 0 8
64850: PUSH
64851: LD_VAR 0 2
64855: PPUSH
64856: CALL_OW 251
64860: ST_TO_ADDR
// if not x or not y then
64861: LD_VAR 0 7
64865: NOT
64866: PUSH
64867: LD_VAR 0 8
64871: NOT
64872: OR
64873: IFFALSE 64877
// exit ;
64875: GO 65272
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64877: LD_ADDR_VAR 0 6
64881: PUSH
64882: LD_VAR 0 7
64886: PPUSH
64887: LD_INT 0
64889: PPUSH
64890: LD_INT 4
64892: PPUSH
64893: CALL_OW 272
64897: PUSH
64898: LD_VAR 0 8
64902: PPUSH
64903: LD_INT 0
64905: PPUSH
64906: LD_INT 4
64908: PPUSH
64909: CALL_OW 273
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_VAR 0 7
64922: PPUSH
64923: LD_INT 1
64925: PPUSH
64926: LD_INT 4
64928: PPUSH
64929: CALL_OW 272
64933: PUSH
64934: LD_VAR 0 8
64938: PPUSH
64939: LD_INT 1
64941: PPUSH
64942: LD_INT 4
64944: PPUSH
64945: CALL_OW 273
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_VAR 0 7
64958: PPUSH
64959: LD_INT 2
64961: PPUSH
64962: LD_INT 4
64964: PPUSH
64965: CALL_OW 272
64969: PUSH
64970: LD_VAR 0 8
64974: PPUSH
64975: LD_INT 2
64977: PPUSH
64978: LD_INT 4
64980: PPUSH
64981: CALL_OW 273
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_VAR 0 7
64994: PPUSH
64995: LD_INT 3
64997: PPUSH
64998: LD_INT 4
65000: PPUSH
65001: CALL_OW 272
65005: PUSH
65006: LD_VAR 0 8
65010: PPUSH
65011: LD_INT 3
65013: PPUSH
65014: LD_INT 4
65016: PPUSH
65017: CALL_OW 273
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_VAR 0 7
65030: PPUSH
65031: LD_INT 4
65033: PPUSH
65034: LD_INT 4
65036: PPUSH
65037: CALL_OW 272
65041: PUSH
65042: LD_VAR 0 8
65046: PPUSH
65047: LD_INT 4
65049: PPUSH
65050: LD_INT 4
65052: PPUSH
65053: CALL_OW 273
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_VAR 0 7
65066: PPUSH
65067: LD_INT 5
65069: PPUSH
65070: LD_INT 4
65072: PPUSH
65073: CALL_OW 272
65077: PUSH
65078: LD_VAR 0 8
65082: PPUSH
65083: LD_INT 5
65085: PPUSH
65086: LD_INT 4
65088: PPUSH
65089: CALL_OW 273
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: ST_TO_ADDR
// for i = tmp downto 1 do
65106: LD_ADDR_VAR 0 4
65110: PUSH
65111: DOUBLE
65112: LD_VAR 0 6
65116: INC
65117: ST_TO_ADDR
65118: LD_INT 1
65120: PUSH
65121: FOR_DOWNTO
65122: IFFALSE 65223
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65124: LD_VAR 0 6
65128: PUSH
65129: LD_VAR 0 4
65133: ARRAY
65134: PUSH
65135: LD_INT 1
65137: ARRAY
65138: PPUSH
65139: LD_VAR 0 6
65143: PUSH
65144: LD_VAR 0 4
65148: ARRAY
65149: PUSH
65150: LD_INT 2
65152: ARRAY
65153: PPUSH
65154: CALL_OW 488
65158: NOT
65159: PUSH
65160: LD_VAR 0 6
65164: PUSH
65165: LD_VAR 0 4
65169: ARRAY
65170: PUSH
65171: LD_INT 1
65173: ARRAY
65174: PPUSH
65175: LD_VAR 0 6
65179: PUSH
65180: LD_VAR 0 4
65184: ARRAY
65185: PUSH
65186: LD_INT 2
65188: ARRAY
65189: PPUSH
65190: CALL_OW 428
65194: PUSH
65195: LD_INT 0
65197: NONEQUAL
65198: OR
65199: IFFALSE 65221
// tmp := Delete ( tmp , i ) ;
65201: LD_ADDR_VAR 0 6
65205: PUSH
65206: LD_VAR 0 6
65210: PPUSH
65211: LD_VAR 0 4
65215: PPUSH
65216: CALL_OW 3
65220: ST_TO_ADDR
65221: GO 65121
65223: POP
65224: POP
// j := GetClosestHex ( unit , tmp ) ;
65225: LD_ADDR_VAR 0 5
65229: PUSH
65230: LD_VAR 0 1
65234: PPUSH
65235: LD_VAR 0 6
65239: PPUSH
65240: CALL 64525 0 2
65244: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65245: LD_VAR 0 1
65249: PPUSH
65250: LD_VAR 0 5
65254: PUSH
65255: LD_INT 1
65257: ARRAY
65258: PPUSH
65259: LD_VAR 0 5
65263: PUSH
65264: LD_INT 2
65266: ARRAY
65267: PPUSH
65268: CALL_OW 111
// end ;
65272: LD_VAR 0 3
65276: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65277: LD_INT 0
65279: PPUSH
65280: PPUSH
65281: PPUSH
// uc_side = 0 ;
65282: LD_ADDR_OWVAR 20
65286: PUSH
65287: LD_INT 0
65289: ST_TO_ADDR
// uc_nation = 0 ;
65290: LD_ADDR_OWVAR 21
65294: PUSH
65295: LD_INT 0
65297: ST_TO_ADDR
// InitHc_All ( ) ;
65298: CALL_OW 584
// InitVc ;
65302: CALL_OW 20
// if mastodonts then
65306: LD_VAR 0 6
65310: IFFALSE 65377
// for i = 1 to mastodonts do
65312: LD_ADDR_VAR 0 11
65316: PUSH
65317: DOUBLE
65318: LD_INT 1
65320: DEC
65321: ST_TO_ADDR
65322: LD_VAR 0 6
65326: PUSH
65327: FOR_TO
65328: IFFALSE 65375
// begin vc_chassis := 31 ;
65330: LD_ADDR_OWVAR 37
65334: PUSH
65335: LD_INT 31
65337: ST_TO_ADDR
// vc_control := control_rider ;
65338: LD_ADDR_OWVAR 38
65342: PUSH
65343: LD_INT 4
65345: ST_TO_ADDR
// animal := CreateVehicle ;
65346: LD_ADDR_VAR 0 12
65350: PUSH
65351: CALL_OW 45
65355: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65356: LD_VAR 0 12
65360: PPUSH
65361: LD_VAR 0 8
65365: PPUSH
65366: LD_INT 0
65368: PPUSH
65369: CALL 67565 0 3
// end ;
65373: GO 65327
65375: POP
65376: POP
// if horses then
65377: LD_VAR 0 5
65381: IFFALSE 65448
// for i = 1 to horses do
65383: LD_ADDR_VAR 0 11
65387: PUSH
65388: DOUBLE
65389: LD_INT 1
65391: DEC
65392: ST_TO_ADDR
65393: LD_VAR 0 5
65397: PUSH
65398: FOR_TO
65399: IFFALSE 65446
// begin hc_class := 21 ;
65401: LD_ADDR_OWVAR 28
65405: PUSH
65406: LD_INT 21
65408: ST_TO_ADDR
// hc_gallery :=  ;
65409: LD_ADDR_OWVAR 33
65413: PUSH
65414: LD_STRING 
65416: ST_TO_ADDR
// animal := CreateHuman ;
65417: LD_ADDR_VAR 0 12
65421: PUSH
65422: CALL_OW 44
65426: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65427: LD_VAR 0 12
65431: PPUSH
65432: LD_VAR 0 8
65436: PPUSH
65437: LD_INT 0
65439: PPUSH
65440: CALL 67565 0 3
// end ;
65444: GO 65398
65446: POP
65447: POP
// if birds then
65448: LD_VAR 0 1
65452: IFFALSE 65519
// for i = 1 to birds do
65454: LD_ADDR_VAR 0 11
65458: PUSH
65459: DOUBLE
65460: LD_INT 1
65462: DEC
65463: ST_TO_ADDR
65464: LD_VAR 0 1
65468: PUSH
65469: FOR_TO
65470: IFFALSE 65517
// begin hc_class = 18 ;
65472: LD_ADDR_OWVAR 28
65476: PUSH
65477: LD_INT 18
65479: ST_TO_ADDR
// hc_gallery =  ;
65480: LD_ADDR_OWVAR 33
65484: PUSH
65485: LD_STRING 
65487: ST_TO_ADDR
// animal := CreateHuman ;
65488: LD_ADDR_VAR 0 12
65492: PUSH
65493: CALL_OW 44
65497: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65498: LD_VAR 0 12
65502: PPUSH
65503: LD_VAR 0 8
65507: PPUSH
65508: LD_INT 0
65510: PPUSH
65511: CALL 67565 0 3
// end ;
65515: GO 65469
65517: POP
65518: POP
// if tigers then
65519: LD_VAR 0 2
65523: IFFALSE 65607
// for i = 1 to tigers do
65525: LD_ADDR_VAR 0 11
65529: PUSH
65530: DOUBLE
65531: LD_INT 1
65533: DEC
65534: ST_TO_ADDR
65535: LD_VAR 0 2
65539: PUSH
65540: FOR_TO
65541: IFFALSE 65605
// begin hc_class = class_tiger ;
65543: LD_ADDR_OWVAR 28
65547: PUSH
65548: LD_INT 14
65550: ST_TO_ADDR
// hc_gallery =  ;
65551: LD_ADDR_OWVAR 33
65555: PUSH
65556: LD_STRING 
65558: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65559: LD_ADDR_OWVAR 35
65563: PUSH
65564: LD_INT 7
65566: NEG
65567: PPUSH
65568: LD_INT 7
65570: PPUSH
65571: CALL_OW 12
65575: ST_TO_ADDR
// animal := CreateHuman ;
65576: LD_ADDR_VAR 0 12
65580: PUSH
65581: CALL_OW 44
65585: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65586: LD_VAR 0 12
65590: PPUSH
65591: LD_VAR 0 8
65595: PPUSH
65596: LD_INT 0
65598: PPUSH
65599: CALL 67565 0 3
// end ;
65603: GO 65540
65605: POP
65606: POP
// if apemans then
65607: LD_VAR 0 3
65611: IFFALSE 65734
// for i = 1 to apemans do
65613: LD_ADDR_VAR 0 11
65617: PUSH
65618: DOUBLE
65619: LD_INT 1
65621: DEC
65622: ST_TO_ADDR
65623: LD_VAR 0 3
65627: PUSH
65628: FOR_TO
65629: IFFALSE 65732
// begin hc_class = class_apeman ;
65631: LD_ADDR_OWVAR 28
65635: PUSH
65636: LD_INT 12
65638: ST_TO_ADDR
// hc_gallery =  ;
65639: LD_ADDR_OWVAR 33
65643: PUSH
65644: LD_STRING 
65646: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
65647: LD_ADDR_OWVAR 35
65651: PUSH
65652: LD_INT 5
65654: NEG
65655: PPUSH
65656: LD_INT 5
65658: PPUSH
65659: CALL_OW 12
65663: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65664: LD_ADDR_OWVAR 31
65668: PUSH
65669: LD_INT 1
65671: PPUSH
65672: LD_INT 3
65674: PPUSH
65675: CALL_OW 12
65679: PUSH
65680: LD_INT 1
65682: PPUSH
65683: LD_INT 3
65685: PPUSH
65686: CALL_OW 12
65690: PUSH
65691: LD_INT 0
65693: PUSH
65694: LD_INT 0
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: ST_TO_ADDR
// animal := CreateHuman ;
65703: LD_ADDR_VAR 0 12
65707: PUSH
65708: CALL_OW 44
65712: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65713: LD_VAR 0 12
65717: PPUSH
65718: LD_VAR 0 8
65722: PPUSH
65723: LD_INT 0
65725: PPUSH
65726: CALL 67565 0 3
// end ;
65730: GO 65628
65732: POP
65733: POP
// if enchidnas then
65734: LD_VAR 0 4
65738: IFFALSE 65805
// for i = 1 to enchidnas do
65740: LD_ADDR_VAR 0 11
65744: PUSH
65745: DOUBLE
65746: LD_INT 1
65748: DEC
65749: ST_TO_ADDR
65750: LD_VAR 0 4
65754: PUSH
65755: FOR_TO
65756: IFFALSE 65803
// begin hc_class = 13 ;
65758: LD_ADDR_OWVAR 28
65762: PUSH
65763: LD_INT 13
65765: ST_TO_ADDR
// hc_gallery =  ;
65766: LD_ADDR_OWVAR 33
65770: PUSH
65771: LD_STRING 
65773: ST_TO_ADDR
// animal := CreateHuman ;
65774: LD_ADDR_VAR 0 12
65778: PUSH
65779: CALL_OW 44
65783: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65784: LD_VAR 0 12
65788: PPUSH
65789: LD_VAR 0 8
65793: PPUSH
65794: LD_INT 0
65796: PPUSH
65797: CALL 67565 0 3
// end ;
65801: GO 65755
65803: POP
65804: POP
// if fishes then
65805: LD_VAR 0 7
65809: IFFALSE 65876
// for i = 1 to fishes do
65811: LD_ADDR_VAR 0 11
65815: PUSH
65816: DOUBLE
65817: LD_INT 1
65819: DEC
65820: ST_TO_ADDR
65821: LD_VAR 0 7
65825: PUSH
65826: FOR_TO
65827: IFFALSE 65874
// begin hc_class = 20 ;
65829: LD_ADDR_OWVAR 28
65833: PUSH
65834: LD_INT 20
65836: ST_TO_ADDR
// hc_gallery =  ;
65837: LD_ADDR_OWVAR 33
65841: PUSH
65842: LD_STRING 
65844: ST_TO_ADDR
// animal := CreateHuman ;
65845: LD_ADDR_VAR 0 12
65849: PUSH
65850: CALL_OW 44
65854: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65855: LD_VAR 0 12
65859: PPUSH
65860: LD_VAR 0 9
65864: PPUSH
65865: LD_INT 0
65867: PPUSH
65868: CALL 67565 0 3
// end ;
65872: GO 65826
65874: POP
65875: POP
// end ;
65876: LD_VAR 0 10
65880: RET
// export function WantHeal ( sci , unit ) ; begin
65881: LD_INT 0
65883: PPUSH
// if GetTaskList ( sci ) > 0 then
65884: LD_VAR 0 1
65888: PPUSH
65889: CALL_OW 437
65893: PUSH
65894: LD_INT 0
65896: GREATER
65897: IFFALSE 65967
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65899: LD_VAR 0 1
65903: PPUSH
65904: CALL_OW 437
65908: PUSH
65909: LD_INT 1
65911: ARRAY
65912: PUSH
65913: LD_INT 1
65915: ARRAY
65916: PUSH
65917: LD_STRING l
65919: EQUAL
65920: PUSH
65921: LD_VAR 0 1
65925: PPUSH
65926: CALL_OW 437
65930: PUSH
65931: LD_INT 1
65933: ARRAY
65934: PUSH
65935: LD_INT 4
65937: ARRAY
65938: PUSH
65939: LD_VAR 0 2
65943: EQUAL
65944: AND
65945: IFFALSE 65957
// result := true else
65947: LD_ADDR_VAR 0 3
65951: PUSH
65952: LD_INT 1
65954: ST_TO_ADDR
65955: GO 65965
// result := false ;
65957: LD_ADDR_VAR 0 3
65961: PUSH
65962: LD_INT 0
65964: ST_TO_ADDR
// end else
65965: GO 65975
// result := false ;
65967: LD_ADDR_VAR 0 3
65971: PUSH
65972: LD_INT 0
65974: ST_TO_ADDR
// end ;
65975: LD_VAR 0 3
65979: RET
// export function HealTarget ( sci ) ; begin
65980: LD_INT 0
65982: PPUSH
// if not sci then
65983: LD_VAR 0 1
65987: NOT
65988: IFFALSE 65992
// exit ;
65990: GO 66057
// result := 0 ;
65992: LD_ADDR_VAR 0 2
65996: PUSH
65997: LD_INT 0
65999: ST_TO_ADDR
// if GetTaskList ( sci ) then
66000: LD_VAR 0 1
66004: PPUSH
66005: CALL_OW 437
66009: IFFALSE 66057
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66011: LD_VAR 0 1
66015: PPUSH
66016: CALL_OW 437
66020: PUSH
66021: LD_INT 1
66023: ARRAY
66024: PUSH
66025: LD_INT 1
66027: ARRAY
66028: PUSH
66029: LD_STRING l
66031: EQUAL
66032: IFFALSE 66057
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66034: LD_ADDR_VAR 0 2
66038: PUSH
66039: LD_VAR 0 1
66043: PPUSH
66044: CALL_OW 437
66048: PUSH
66049: LD_INT 1
66051: ARRAY
66052: PUSH
66053: LD_INT 4
66055: ARRAY
66056: ST_TO_ADDR
// end ;
66057: LD_VAR 0 2
66061: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66062: LD_INT 0
66064: PPUSH
66065: PPUSH
66066: PPUSH
66067: PPUSH
// if not base_units then
66068: LD_VAR 0 1
66072: NOT
66073: IFFALSE 66077
// exit ;
66075: GO 66164
// result := false ;
66077: LD_ADDR_VAR 0 2
66081: PUSH
66082: LD_INT 0
66084: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66085: LD_ADDR_VAR 0 5
66089: PUSH
66090: LD_VAR 0 1
66094: PPUSH
66095: LD_INT 21
66097: PUSH
66098: LD_INT 3
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PPUSH
66105: CALL_OW 72
66109: ST_TO_ADDR
// if not tmp then
66110: LD_VAR 0 5
66114: NOT
66115: IFFALSE 66119
// exit ;
66117: GO 66164
// for i in tmp do
66119: LD_ADDR_VAR 0 3
66123: PUSH
66124: LD_VAR 0 5
66128: PUSH
66129: FOR_IN
66130: IFFALSE 66162
// begin result := EnemyInRange ( i , 22 ) ;
66132: LD_ADDR_VAR 0 2
66136: PUSH
66137: LD_VAR 0 3
66141: PPUSH
66142: LD_INT 22
66144: PPUSH
66145: CALL 64400 0 2
66149: ST_TO_ADDR
// if result then
66150: LD_VAR 0 2
66154: IFFALSE 66160
// exit ;
66156: POP
66157: POP
66158: GO 66164
// end ;
66160: GO 66129
66162: POP
66163: POP
// end ;
66164: LD_VAR 0 2
66168: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
66169: LD_INT 0
66171: PPUSH
66172: PPUSH
// if not units then
66173: LD_VAR 0 1
66177: NOT
66178: IFFALSE 66182
// exit ;
66180: GO 66252
// result := [ ] ;
66182: LD_ADDR_VAR 0 3
66186: PUSH
66187: EMPTY
66188: ST_TO_ADDR
// for i in units do
66189: LD_ADDR_VAR 0 4
66193: PUSH
66194: LD_VAR 0 1
66198: PUSH
66199: FOR_IN
66200: IFFALSE 66250
// if GetTag ( i ) = tag then
66202: LD_VAR 0 4
66206: PPUSH
66207: CALL_OW 110
66211: PUSH
66212: LD_VAR 0 2
66216: EQUAL
66217: IFFALSE 66248
// result := Insert ( result , result + 1 , i ) ;
66219: LD_ADDR_VAR 0 3
66223: PUSH
66224: LD_VAR 0 3
66228: PPUSH
66229: LD_VAR 0 3
66233: PUSH
66234: LD_INT 1
66236: PLUS
66237: PPUSH
66238: LD_VAR 0 4
66242: PPUSH
66243: CALL_OW 2
66247: ST_TO_ADDR
66248: GO 66199
66250: POP
66251: POP
// end ;
66252: LD_VAR 0 3
66256: RET
// export function IsDriver ( un ) ; begin
66257: LD_INT 0
66259: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66260: LD_ADDR_VAR 0 2
66264: PUSH
66265: LD_VAR 0 1
66269: PUSH
66270: LD_INT 55
66272: PUSH
66273: EMPTY
66274: LIST
66275: PPUSH
66276: CALL_OW 69
66280: IN
66281: ST_TO_ADDR
// end ;
66282: LD_VAR 0 2
66286: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66287: LD_INT 0
66289: PPUSH
66290: PPUSH
// list := [ ] ;
66291: LD_ADDR_VAR 0 5
66295: PUSH
66296: EMPTY
66297: ST_TO_ADDR
// case d of 0 :
66298: LD_VAR 0 3
66302: PUSH
66303: LD_INT 0
66305: DOUBLE
66306: EQUAL
66307: IFTRUE 66311
66309: GO 66444
66311: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66312: LD_ADDR_VAR 0 5
66316: PUSH
66317: LD_VAR 0 1
66321: PUSH
66322: LD_INT 4
66324: MINUS
66325: PUSH
66326: LD_VAR 0 2
66330: PUSH
66331: LD_INT 4
66333: MINUS
66334: PUSH
66335: LD_INT 2
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: LIST
66342: PUSH
66343: LD_VAR 0 1
66347: PUSH
66348: LD_INT 3
66350: MINUS
66351: PUSH
66352: LD_VAR 0 2
66356: PUSH
66357: LD_INT 1
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: LIST
66364: PUSH
66365: LD_VAR 0 1
66369: PUSH
66370: LD_INT 4
66372: PLUS
66373: PUSH
66374: LD_VAR 0 2
66378: PUSH
66379: LD_INT 4
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: LIST
66386: PUSH
66387: LD_VAR 0 1
66391: PUSH
66392: LD_INT 3
66394: PLUS
66395: PUSH
66396: LD_VAR 0 2
66400: PUSH
66401: LD_INT 3
66403: PLUS
66404: PUSH
66405: LD_INT 5
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: LIST
66412: PUSH
66413: LD_VAR 0 1
66417: PUSH
66418: LD_VAR 0 2
66422: PUSH
66423: LD_INT 4
66425: PLUS
66426: PUSH
66427: LD_INT 0
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: LIST
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: ST_TO_ADDR
// end ; 1 :
66442: GO 67142
66444: LD_INT 1
66446: DOUBLE
66447: EQUAL
66448: IFTRUE 66452
66450: GO 66585
66452: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66453: LD_ADDR_VAR 0 5
66457: PUSH
66458: LD_VAR 0 1
66462: PUSH
66463: LD_VAR 0 2
66467: PUSH
66468: LD_INT 4
66470: MINUS
66471: PUSH
66472: LD_INT 3
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: LIST
66479: PUSH
66480: LD_VAR 0 1
66484: PUSH
66485: LD_INT 3
66487: MINUS
66488: PUSH
66489: LD_VAR 0 2
66493: PUSH
66494: LD_INT 3
66496: MINUS
66497: PUSH
66498: LD_INT 2
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: LIST
66505: PUSH
66506: LD_VAR 0 1
66510: PUSH
66511: LD_INT 4
66513: MINUS
66514: PUSH
66515: LD_VAR 0 2
66519: PUSH
66520: LD_INT 1
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: LIST
66527: PUSH
66528: LD_VAR 0 1
66532: PUSH
66533: LD_VAR 0 2
66537: PUSH
66538: LD_INT 3
66540: PLUS
66541: PUSH
66542: LD_INT 0
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: LIST
66549: PUSH
66550: LD_VAR 0 1
66554: PUSH
66555: LD_INT 4
66557: PLUS
66558: PUSH
66559: LD_VAR 0 2
66563: PUSH
66564: LD_INT 4
66566: PLUS
66567: PUSH
66568: LD_INT 5
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: LIST
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: LIST
66582: ST_TO_ADDR
// end ; 2 :
66583: GO 67142
66585: LD_INT 2
66587: DOUBLE
66588: EQUAL
66589: IFTRUE 66593
66591: GO 66722
66593: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66594: LD_ADDR_VAR 0 5
66598: PUSH
66599: LD_VAR 0 1
66603: PUSH
66604: LD_VAR 0 2
66608: PUSH
66609: LD_INT 3
66611: MINUS
66612: PUSH
66613: LD_INT 3
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: LIST
66620: PUSH
66621: LD_VAR 0 1
66625: PUSH
66626: LD_INT 4
66628: PLUS
66629: PUSH
66630: LD_VAR 0 2
66634: PUSH
66635: LD_INT 4
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: LIST
66642: PUSH
66643: LD_VAR 0 1
66647: PUSH
66648: LD_VAR 0 2
66652: PUSH
66653: LD_INT 4
66655: PLUS
66656: PUSH
66657: LD_INT 0
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: LIST
66664: PUSH
66665: LD_VAR 0 1
66669: PUSH
66670: LD_INT 3
66672: MINUS
66673: PUSH
66674: LD_VAR 0 2
66678: PUSH
66679: LD_INT 1
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: LIST
66686: PUSH
66687: LD_VAR 0 1
66691: PUSH
66692: LD_INT 4
66694: MINUS
66695: PUSH
66696: LD_VAR 0 2
66700: PUSH
66701: LD_INT 4
66703: MINUS
66704: PUSH
66705: LD_INT 2
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: LIST
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: ST_TO_ADDR
// end ; 3 :
66720: GO 67142
66722: LD_INT 3
66724: DOUBLE
66725: EQUAL
66726: IFTRUE 66730
66728: GO 66863
66730: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66731: LD_ADDR_VAR 0 5
66735: PUSH
66736: LD_VAR 0 1
66740: PUSH
66741: LD_INT 3
66743: PLUS
66744: PUSH
66745: LD_VAR 0 2
66749: PUSH
66750: LD_INT 4
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: LIST
66757: PUSH
66758: LD_VAR 0 1
66762: PUSH
66763: LD_INT 4
66765: PLUS
66766: PUSH
66767: LD_VAR 0 2
66771: PUSH
66772: LD_INT 4
66774: PLUS
66775: PUSH
66776: LD_INT 5
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: LIST
66783: PUSH
66784: LD_VAR 0 1
66788: PUSH
66789: LD_INT 4
66791: MINUS
66792: PUSH
66793: LD_VAR 0 2
66797: PUSH
66798: LD_INT 1
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: LIST
66805: PUSH
66806: LD_VAR 0 1
66810: PUSH
66811: LD_VAR 0 2
66815: PUSH
66816: LD_INT 4
66818: MINUS
66819: PUSH
66820: LD_INT 3
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: LIST
66827: PUSH
66828: LD_VAR 0 1
66832: PUSH
66833: LD_INT 3
66835: MINUS
66836: PUSH
66837: LD_VAR 0 2
66841: PUSH
66842: LD_INT 3
66844: MINUS
66845: PUSH
66846: LD_INT 2
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: LIST
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: ST_TO_ADDR
// end ; 4 :
66861: GO 67142
66863: LD_INT 4
66865: DOUBLE
66866: EQUAL
66867: IFTRUE 66871
66869: GO 67004
66871: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66872: LD_ADDR_VAR 0 5
66876: PUSH
66877: LD_VAR 0 1
66881: PUSH
66882: LD_VAR 0 2
66886: PUSH
66887: LD_INT 4
66889: PLUS
66890: PUSH
66891: LD_INT 0
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: LIST
66898: PUSH
66899: LD_VAR 0 1
66903: PUSH
66904: LD_INT 3
66906: PLUS
66907: PUSH
66908: LD_VAR 0 2
66912: PUSH
66913: LD_INT 3
66915: PLUS
66916: PUSH
66917: LD_INT 5
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: LIST
66924: PUSH
66925: LD_VAR 0 1
66929: PUSH
66930: LD_INT 4
66932: PLUS
66933: PUSH
66934: LD_VAR 0 2
66938: PUSH
66939: LD_INT 4
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: LIST
66946: PUSH
66947: LD_VAR 0 1
66951: PUSH
66952: LD_VAR 0 2
66956: PUSH
66957: LD_INT 3
66959: MINUS
66960: PUSH
66961: LD_INT 3
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: LIST
66968: PUSH
66969: LD_VAR 0 1
66973: PUSH
66974: LD_INT 4
66976: MINUS
66977: PUSH
66978: LD_VAR 0 2
66982: PUSH
66983: LD_INT 4
66985: MINUS
66986: PUSH
66987: LD_INT 2
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: LIST
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: ST_TO_ADDR
// end ; 5 :
67002: GO 67142
67004: LD_INT 5
67006: DOUBLE
67007: EQUAL
67008: IFTRUE 67012
67010: GO 67141
67012: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67013: LD_ADDR_VAR 0 5
67017: PUSH
67018: LD_VAR 0 1
67022: PUSH
67023: LD_INT 4
67025: MINUS
67026: PUSH
67027: LD_VAR 0 2
67031: PUSH
67032: LD_INT 1
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: LIST
67039: PUSH
67040: LD_VAR 0 1
67044: PUSH
67045: LD_VAR 0 2
67049: PUSH
67050: LD_INT 4
67052: MINUS
67053: PUSH
67054: LD_INT 3
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: LIST
67061: PUSH
67062: LD_VAR 0 1
67066: PUSH
67067: LD_INT 4
67069: PLUS
67070: PUSH
67071: LD_VAR 0 2
67075: PUSH
67076: LD_INT 4
67078: PLUS
67079: PUSH
67080: LD_INT 5
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: LIST
67087: PUSH
67088: LD_VAR 0 1
67092: PUSH
67093: LD_INT 3
67095: PLUS
67096: PUSH
67097: LD_VAR 0 2
67101: PUSH
67102: LD_INT 4
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: LIST
67109: PUSH
67110: LD_VAR 0 1
67114: PUSH
67115: LD_VAR 0 2
67119: PUSH
67120: LD_INT 3
67122: PLUS
67123: PUSH
67124: LD_INT 0
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: LIST
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: ST_TO_ADDR
// end ; end ;
67139: GO 67142
67141: POP
// result := list ;
67142: LD_ADDR_VAR 0 4
67146: PUSH
67147: LD_VAR 0 5
67151: ST_TO_ADDR
// end ;
67152: LD_VAR 0 4
67156: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67157: LD_INT 0
67159: PPUSH
67160: PPUSH
67161: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67162: LD_VAR 0 1
67166: NOT
67167: PUSH
67168: LD_VAR 0 2
67172: PUSH
67173: LD_INT 1
67175: PUSH
67176: LD_INT 2
67178: PUSH
67179: LD_INT 3
67181: PUSH
67182: LD_INT 4
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: IN
67191: NOT
67192: OR
67193: IFFALSE 67197
// exit ;
67195: GO 67289
// tmp := [ ] ;
67197: LD_ADDR_VAR 0 5
67201: PUSH
67202: EMPTY
67203: ST_TO_ADDR
// for i in units do
67204: LD_ADDR_VAR 0 4
67208: PUSH
67209: LD_VAR 0 1
67213: PUSH
67214: FOR_IN
67215: IFFALSE 67258
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67217: LD_ADDR_VAR 0 5
67221: PUSH
67222: LD_VAR 0 5
67226: PPUSH
67227: LD_VAR 0 5
67231: PUSH
67232: LD_INT 1
67234: PLUS
67235: PPUSH
67236: LD_VAR 0 4
67240: PPUSH
67241: LD_VAR 0 2
67245: PPUSH
67246: CALL_OW 259
67250: PPUSH
67251: CALL_OW 2
67255: ST_TO_ADDR
67256: GO 67214
67258: POP
67259: POP
// if not tmp then
67260: LD_VAR 0 5
67264: NOT
67265: IFFALSE 67269
// exit ;
67267: GO 67289
// result := SortListByListDesc ( units , tmp ) ;
67269: LD_ADDR_VAR 0 3
67273: PUSH
67274: LD_VAR 0 1
67278: PPUSH
67279: LD_VAR 0 5
67283: PPUSH
67284: CALL_OW 77
67288: ST_TO_ADDR
// end ;
67289: LD_VAR 0 3
67293: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67294: LD_INT 0
67296: PPUSH
67297: PPUSH
67298: PPUSH
// result := false ;
67299: LD_ADDR_VAR 0 3
67303: PUSH
67304: LD_INT 0
67306: ST_TO_ADDR
// x := GetX ( building ) ;
67307: LD_ADDR_VAR 0 4
67311: PUSH
67312: LD_VAR 0 2
67316: PPUSH
67317: CALL_OW 250
67321: ST_TO_ADDR
// y := GetY ( building ) ;
67322: LD_ADDR_VAR 0 5
67326: PUSH
67327: LD_VAR 0 2
67331: PPUSH
67332: CALL_OW 251
67336: ST_TO_ADDR
// if not building or not x or not y then
67337: LD_VAR 0 2
67341: NOT
67342: PUSH
67343: LD_VAR 0 4
67347: NOT
67348: OR
67349: PUSH
67350: LD_VAR 0 5
67354: NOT
67355: OR
67356: IFFALSE 67360
// exit ;
67358: GO 67452
// if GetTaskList ( unit ) then
67360: LD_VAR 0 1
67364: PPUSH
67365: CALL_OW 437
67369: IFFALSE 67452
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67371: LD_STRING e
67373: PUSH
67374: LD_VAR 0 1
67378: PPUSH
67379: CALL_OW 437
67383: PUSH
67384: LD_INT 1
67386: ARRAY
67387: PUSH
67388: LD_INT 1
67390: ARRAY
67391: EQUAL
67392: PUSH
67393: LD_VAR 0 4
67397: PUSH
67398: LD_VAR 0 1
67402: PPUSH
67403: CALL_OW 437
67407: PUSH
67408: LD_INT 1
67410: ARRAY
67411: PUSH
67412: LD_INT 2
67414: ARRAY
67415: EQUAL
67416: AND
67417: PUSH
67418: LD_VAR 0 5
67422: PUSH
67423: LD_VAR 0 1
67427: PPUSH
67428: CALL_OW 437
67432: PUSH
67433: LD_INT 1
67435: ARRAY
67436: PUSH
67437: LD_INT 3
67439: ARRAY
67440: EQUAL
67441: AND
67442: IFFALSE 67452
// result := true end ;
67444: LD_ADDR_VAR 0 3
67448: PUSH
67449: LD_INT 1
67451: ST_TO_ADDR
// end ;
67452: LD_VAR 0 3
67456: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67457: LD_INT 0
67459: PPUSH
// result := false ;
67460: LD_ADDR_VAR 0 4
67464: PUSH
67465: LD_INT 0
67467: ST_TO_ADDR
// if GetTaskList ( unit ) then
67468: LD_VAR 0 1
67472: PPUSH
67473: CALL_OW 437
67477: IFFALSE 67560
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67479: LD_STRING M
67481: PUSH
67482: LD_VAR 0 1
67486: PPUSH
67487: CALL_OW 437
67491: PUSH
67492: LD_INT 1
67494: ARRAY
67495: PUSH
67496: LD_INT 1
67498: ARRAY
67499: EQUAL
67500: PUSH
67501: LD_VAR 0 2
67505: PUSH
67506: LD_VAR 0 1
67510: PPUSH
67511: CALL_OW 437
67515: PUSH
67516: LD_INT 1
67518: ARRAY
67519: PUSH
67520: LD_INT 2
67522: ARRAY
67523: EQUAL
67524: AND
67525: PUSH
67526: LD_VAR 0 3
67530: PUSH
67531: LD_VAR 0 1
67535: PPUSH
67536: CALL_OW 437
67540: PUSH
67541: LD_INT 1
67543: ARRAY
67544: PUSH
67545: LD_INT 3
67547: ARRAY
67548: EQUAL
67549: AND
67550: IFFALSE 67560
// result := true ;
67552: LD_ADDR_VAR 0 4
67556: PUSH
67557: LD_INT 1
67559: ST_TO_ADDR
// end ; end ;
67560: LD_VAR 0 4
67564: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67565: LD_INT 0
67567: PPUSH
67568: PPUSH
67569: PPUSH
67570: PPUSH
// if not unit or not area then
67571: LD_VAR 0 1
67575: NOT
67576: PUSH
67577: LD_VAR 0 2
67581: NOT
67582: OR
67583: IFFALSE 67587
// exit ;
67585: GO 67751
// tmp := AreaToList ( area , i ) ;
67587: LD_ADDR_VAR 0 6
67591: PUSH
67592: LD_VAR 0 2
67596: PPUSH
67597: LD_VAR 0 5
67601: PPUSH
67602: CALL_OW 517
67606: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67607: LD_ADDR_VAR 0 5
67611: PUSH
67612: DOUBLE
67613: LD_INT 1
67615: DEC
67616: ST_TO_ADDR
67617: LD_VAR 0 6
67621: PUSH
67622: LD_INT 1
67624: ARRAY
67625: PUSH
67626: FOR_TO
67627: IFFALSE 67749
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67629: LD_ADDR_VAR 0 7
67633: PUSH
67634: LD_VAR 0 6
67638: PUSH
67639: LD_INT 1
67641: ARRAY
67642: PUSH
67643: LD_VAR 0 5
67647: ARRAY
67648: PUSH
67649: LD_VAR 0 6
67653: PUSH
67654: LD_INT 2
67656: ARRAY
67657: PUSH
67658: LD_VAR 0 5
67662: ARRAY
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67668: LD_VAR 0 7
67672: PUSH
67673: LD_INT 1
67675: ARRAY
67676: PPUSH
67677: LD_VAR 0 7
67681: PUSH
67682: LD_INT 2
67684: ARRAY
67685: PPUSH
67686: CALL_OW 428
67690: PUSH
67691: LD_INT 0
67693: EQUAL
67694: IFFALSE 67747
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67696: LD_VAR 0 1
67700: PPUSH
67701: LD_VAR 0 7
67705: PUSH
67706: LD_INT 1
67708: ARRAY
67709: PPUSH
67710: LD_VAR 0 7
67714: PUSH
67715: LD_INT 2
67717: ARRAY
67718: PPUSH
67719: LD_VAR 0 3
67723: PPUSH
67724: CALL_OW 48
// result := IsPlaced ( unit ) ;
67728: LD_ADDR_VAR 0 4
67732: PUSH
67733: LD_VAR 0 1
67737: PPUSH
67738: CALL_OW 305
67742: ST_TO_ADDR
// exit ;
67743: POP
67744: POP
67745: GO 67751
// end ; end ;
67747: GO 67626
67749: POP
67750: POP
// end ;
67751: LD_VAR 0 4
67755: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67756: LD_INT 0
67758: PPUSH
67759: PPUSH
67760: PPUSH
// if not side or side > 8 then
67761: LD_VAR 0 1
67765: NOT
67766: PUSH
67767: LD_VAR 0 1
67771: PUSH
67772: LD_INT 8
67774: GREATER
67775: OR
67776: IFFALSE 67780
// exit ;
67778: GO 67967
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67780: LD_ADDR_VAR 0 4
67784: PUSH
67785: LD_INT 22
67787: PUSH
67788: LD_VAR 0 1
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 21
67799: PUSH
67800: LD_INT 3
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PPUSH
67811: CALL_OW 69
67815: ST_TO_ADDR
// if not tmp then
67816: LD_VAR 0 4
67820: NOT
67821: IFFALSE 67825
// exit ;
67823: GO 67967
// enable_addtolog := true ;
67825: LD_ADDR_OWVAR 81
67829: PUSH
67830: LD_INT 1
67832: ST_TO_ADDR
// AddToLog ( [ ) ;
67833: LD_STRING [
67835: PPUSH
67836: CALL_OW 561
// for i in tmp do
67840: LD_ADDR_VAR 0 3
67844: PUSH
67845: LD_VAR 0 4
67849: PUSH
67850: FOR_IN
67851: IFFALSE 67958
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67853: LD_STRING [
67855: PUSH
67856: LD_VAR 0 3
67860: PPUSH
67861: CALL_OW 266
67865: STR
67866: PUSH
67867: LD_STRING , 
67869: STR
67870: PUSH
67871: LD_VAR 0 3
67875: PPUSH
67876: CALL_OW 250
67880: STR
67881: PUSH
67882: LD_STRING , 
67884: STR
67885: PUSH
67886: LD_VAR 0 3
67890: PPUSH
67891: CALL_OW 251
67895: STR
67896: PUSH
67897: LD_STRING , 
67899: STR
67900: PUSH
67901: LD_VAR 0 3
67905: PPUSH
67906: CALL_OW 254
67910: STR
67911: PUSH
67912: LD_STRING , 
67914: STR
67915: PUSH
67916: LD_VAR 0 3
67920: PPUSH
67921: LD_INT 1
67923: PPUSH
67924: CALL_OW 268
67928: STR
67929: PUSH
67930: LD_STRING , 
67932: STR
67933: PUSH
67934: LD_VAR 0 3
67938: PPUSH
67939: LD_INT 2
67941: PPUSH
67942: CALL_OW 268
67946: STR
67947: PUSH
67948: LD_STRING ],
67950: STR
67951: PPUSH
67952: CALL_OW 561
// end ;
67956: GO 67850
67958: POP
67959: POP
// AddToLog ( ]; ) ;
67960: LD_STRING ];
67962: PPUSH
67963: CALL_OW 561
// end ;
67967: LD_VAR 0 2
67971: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67972: LD_INT 0
67974: PPUSH
67975: PPUSH
67976: PPUSH
67977: PPUSH
67978: PPUSH
// if not area or not rate or not max then
67979: LD_VAR 0 1
67983: NOT
67984: PUSH
67985: LD_VAR 0 2
67989: NOT
67990: OR
67991: PUSH
67992: LD_VAR 0 4
67996: NOT
67997: OR
67998: IFFALSE 68002
// exit ;
68000: GO 68194
// while 1 do
68002: LD_INT 1
68004: IFFALSE 68194
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68006: LD_ADDR_VAR 0 9
68010: PUSH
68011: LD_VAR 0 1
68015: PPUSH
68016: LD_INT 1
68018: PPUSH
68019: CALL_OW 287
68023: PUSH
68024: LD_INT 10
68026: MUL
68027: ST_TO_ADDR
// r := rate / 10 ;
68028: LD_ADDR_VAR 0 7
68032: PUSH
68033: LD_VAR 0 2
68037: PUSH
68038: LD_INT 10
68040: DIVREAL
68041: ST_TO_ADDR
// time := 1 1$00 ;
68042: LD_ADDR_VAR 0 8
68046: PUSH
68047: LD_INT 2100
68049: ST_TO_ADDR
// if amount < min then
68050: LD_VAR 0 9
68054: PUSH
68055: LD_VAR 0 3
68059: LESS
68060: IFFALSE 68078
// r := r * 2 else
68062: LD_ADDR_VAR 0 7
68066: PUSH
68067: LD_VAR 0 7
68071: PUSH
68072: LD_INT 2
68074: MUL
68075: ST_TO_ADDR
68076: GO 68104
// if amount > max then
68078: LD_VAR 0 9
68082: PUSH
68083: LD_VAR 0 4
68087: GREATER
68088: IFFALSE 68104
// r := r / 2 ;
68090: LD_ADDR_VAR 0 7
68094: PUSH
68095: LD_VAR 0 7
68099: PUSH
68100: LD_INT 2
68102: DIVREAL
68103: ST_TO_ADDR
// time := time / r ;
68104: LD_ADDR_VAR 0 8
68108: PUSH
68109: LD_VAR 0 8
68113: PUSH
68114: LD_VAR 0 7
68118: DIVREAL
68119: ST_TO_ADDR
// if time < 0 then
68120: LD_VAR 0 8
68124: PUSH
68125: LD_INT 0
68127: LESS
68128: IFFALSE 68145
// time := time * - 1 ;
68130: LD_ADDR_VAR 0 8
68134: PUSH
68135: LD_VAR 0 8
68139: PUSH
68140: LD_INT 1
68142: NEG
68143: MUL
68144: ST_TO_ADDR
// wait ( time ) ;
68145: LD_VAR 0 8
68149: PPUSH
68150: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
68154: LD_INT 35
68156: PPUSH
68157: LD_INT 875
68159: PPUSH
68160: CALL_OW 12
68164: PPUSH
68165: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68169: LD_INT 1
68171: PPUSH
68172: LD_INT 5
68174: PPUSH
68175: CALL_OW 12
68179: PPUSH
68180: LD_VAR 0 1
68184: PPUSH
68185: LD_INT 1
68187: PPUSH
68188: CALL_OW 55
// end ;
68192: GO 68002
// end ;
68194: LD_VAR 0 5
68198: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68199: LD_INT 0
68201: PPUSH
68202: PPUSH
68203: PPUSH
68204: PPUSH
68205: PPUSH
68206: PPUSH
68207: PPUSH
68208: PPUSH
// if not turrets or not factories then
68209: LD_VAR 0 1
68213: NOT
68214: PUSH
68215: LD_VAR 0 2
68219: NOT
68220: OR
68221: IFFALSE 68225
// exit ;
68223: GO 68532
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68225: LD_ADDR_VAR 0 10
68229: PUSH
68230: LD_INT 5
68232: PUSH
68233: LD_INT 6
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 2
68242: PUSH
68243: LD_INT 4
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 3
68252: PUSH
68253: LD_INT 5
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 24
68267: PUSH
68268: LD_INT 25
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 23
68277: PUSH
68278: LD_INT 27
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_INT 42
68291: PUSH
68292: LD_INT 43
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: LD_INT 44
68301: PUSH
68302: LD_INT 46
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 45
68311: PUSH
68312: LD_INT 47
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: LIST
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: LIST
68328: ST_TO_ADDR
// result := [ ] ;
68329: LD_ADDR_VAR 0 3
68333: PUSH
68334: EMPTY
68335: ST_TO_ADDR
// for i in turrets do
68336: LD_ADDR_VAR 0 4
68340: PUSH
68341: LD_VAR 0 1
68345: PUSH
68346: FOR_IN
68347: IFFALSE 68530
// begin nat := GetNation ( i ) ;
68349: LD_ADDR_VAR 0 7
68353: PUSH
68354: LD_VAR 0 4
68358: PPUSH
68359: CALL_OW 248
68363: ST_TO_ADDR
// weapon := 0 ;
68364: LD_ADDR_VAR 0 8
68368: PUSH
68369: LD_INT 0
68371: ST_TO_ADDR
// if not nat then
68372: LD_VAR 0 7
68376: NOT
68377: IFFALSE 68381
// continue ;
68379: GO 68346
// for j in list [ nat ] do
68381: LD_ADDR_VAR 0 5
68385: PUSH
68386: LD_VAR 0 10
68390: PUSH
68391: LD_VAR 0 7
68395: ARRAY
68396: PUSH
68397: FOR_IN
68398: IFFALSE 68439
// if GetBWeapon ( i ) = j [ 1 ] then
68400: LD_VAR 0 4
68404: PPUSH
68405: CALL_OW 269
68409: PUSH
68410: LD_VAR 0 5
68414: PUSH
68415: LD_INT 1
68417: ARRAY
68418: EQUAL
68419: IFFALSE 68437
// begin weapon := j [ 2 ] ;
68421: LD_ADDR_VAR 0 8
68425: PUSH
68426: LD_VAR 0 5
68430: PUSH
68431: LD_INT 2
68433: ARRAY
68434: ST_TO_ADDR
// break ;
68435: GO 68439
// end ;
68437: GO 68397
68439: POP
68440: POP
// if not weapon then
68441: LD_VAR 0 8
68445: NOT
68446: IFFALSE 68450
// continue ;
68448: GO 68346
// for k in factories do
68450: LD_ADDR_VAR 0 6
68454: PUSH
68455: LD_VAR 0 2
68459: PUSH
68460: FOR_IN
68461: IFFALSE 68526
// begin weapons := AvailableWeaponList ( k ) ;
68463: LD_ADDR_VAR 0 9
68467: PUSH
68468: LD_VAR 0 6
68472: PPUSH
68473: CALL_OW 478
68477: ST_TO_ADDR
// if not weapons then
68478: LD_VAR 0 9
68482: NOT
68483: IFFALSE 68487
// continue ;
68485: GO 68460
// if weapon in weapons then
68487: LD_VAR 0 8
68491: PUSH
68492: LD_VAR 0 9
68496: IN
68497: IFFALSE 68524
// begin result := [ i , weapon ] ;
68499: LD_ADDR_VAR 0 3
68503: PUSH
68504: LD_VAR 0 4
68508: PUSH
68509: LD_VAR 0 8
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: ST_TO_ADDR
// exit ;
68518: POP
68519: POP
68520: POP
68521: POP
68522: GO 68532
// end ; end ;
68524: GO 68460
68526: POP
68527: POP
// end ;
68528: GO 68346
68530: POP
68531: POP
// end ;
68532: LD_VAR 0 3
68536: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68537: LD_INT 0
68539: PPUSH
// if not side or side > 8 then
68540: LD_VAR 0 3
68544: NOT
68545: PUSH
68546: LD_VAR 0 3
68550: PUSH
68551: LD_INT 8
68553: GREATER
68554: OR
68555: IFFALSE 68559
// exit ;
68557: GO 68618
// if not range then
68559: LD_VAR 0 4
68563: NOT
68564: IFFALSE 68575
// range := - 12 ;
68566: LD_ADDR_VAR 0 4
68570: PUSH
68571: LD_INT 12
68573: NEG
68574: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68575: LD_VAR 0 1
68579: PPUSH
68580: LD_VAR 0 2
68584: PPUSH
68585: LD_VAR 0 3
68589: PPUSH
68590: LD_VAR 0 4
68594: PPUSH
68595: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68599: LD_VAR 0 1
68603: PPUSH
68604: LD_VAR 0 2
68608: PPUSH
68609: LD_VAR 0 3
68613: PPUSH
68614: CALL_OW 331
// end ;
68618: LD_VAR 0 5
68622: RET
// export function Video ( mode ) ; begin
68623: LD_INT 0
68625: PPUSH
// ingame_video = mode ;
68626: LD_ADDR_OWVAR 52
68630: PUSH
68631: LD_VAR 0 1
68635: ST_TO_ADDR
// interface_hidden = mode ;
68636: LD_ADDR_OWVAR 54
68640: PUSH
68641: LD_VAR 0 1
68645: ST_TO_ADDR
// end ;
68646: LD_VAR 0 2
68650: RET
// export function Join ( array , element ) ; begin
68651: LD_INT 0
68653: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68654: LD_ADDR_VAR 0 3
68658: PUSH
68659: LD_VAR 0 1
68663: PPUSH
68664: LD_VAR 0 1
68668: PUSH
68669: LD_INT 1
68671: PLUS
68672: PPUSH
68673: LD_VAR 0 2
68677: PPUSH
68678: CALL_OW 1
68682: ST_TO_ADDR
// end ;
68683: LD_VAR 0 3
68687: RET
// export function JoinUnion ( array , element ) ; begin
68688: LD_INT 0
68690: PPUSH
// result := array union element ;
68691: LD_ADDR_VAR 0 3
68695: PUSH
68696: LD_VAR 0 1
68700: PUSH
68701: LD_VAR 0 2
68705: UNION
68706: ST_TO_ADDR
// end ;
68707: LD_VAR 0 3
68711: RET
// export function GetBehemoths ( side ) ; begin
68712: LD_INT 0
68714: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
68715: LD_ADDR_VAR 0 2
68719: PUSH
68720: LD_INT 22
68722: PUSH
68723: LD_VAR 0 1
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 31
68734: PUSH
68735: LD_INT 25
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PPUSH
68746: CALL_OW 69
68750: ST_TO_ADDR
// end ;
68751: LD_VAR 0 2
68755: RET
// export function Shuffle ( array ) ; var i , index ; begin
68756: LD_INT 0
68758: PPUSH
68759: PPUSH
68760: PPUSH
// result := [ ] ;
68761: LD_ADDR_VAR 0 2
68765: PUSH
68766: EMPTY
68767: ST_TO_ADDR
// if not array then
68768: LD_VAR 0 1
68772: NOT
68773: IFFALSE 68777
// exit ;
68775: GO 68876
// Randomize ;
68777: CALL_OW 10
// for i = array downto 1 do
68781: LD_ADDR_VAR 0 3
68785: PUSH
68786: DOUBLE
68787: LD_VAR 0 1
68791: INC
68792: ST_TO_ADDR
68793: LD_INT 1
68795: PUSH
68796: FOR_DOWNTO
68797: IFFALSE 68874
// begin index := rand ( 1 , array ) ;
68799: LD_ADDR_VAR 0 4
68803: PUSH
68804: LD_INT 1
68806: PPUSH
68807: LD_VAR 0 1
68811: PPUSH
68812: CALL_OW 12
68816: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68817: LD_ADDR_VAR 0 2
68821: PUSH
68822: LD_VAR 0 2
68826: PPUSH
68827: LD_VAR 0 2
68831: PUSH
68832: LD_INT 1
68834: PLUS
68835: PPUSH
68836: LD_VAR 0 1
68840: PUSH
68841: LD_VAR 0 4
68845: ARRAY
68846: PPUSH
68847: CALL_OW 2
68851: ST_TO_ADDR
// array := Delete ( array , index ) ;
68852: LD_ADDR_VAR 0 1
68856: PUSH
68857: LD_VAR 0 1
68861: PPUSH
68862: LD_VAR 0 4
68866: PPUSH
68867: CALL_OW 3
68871: ST_TO_ADDR
// end ;
68872: GO 68796
68874: POP
68875: POP
// end ;
68876: LD_VAR 0 2
68880: RET
// export function GetBaseMaterials ( base ) ; begin
68881: LD_INT 0
68883: PPUSH
// result := [ 0 , 0 , 0 ] ;
68884: LD_ADDR_VAR 0 2
68888: PUSH
68889: LD_INT 0
68891: PUSH
68892: LD_INT 0
68894: PUSH
68895: LD_INT 0
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: LIST
68902: ST_TO_ADDR
// if not base then
68903: LD_VAR 0 1
68907: NOT
68908: IFFALSE 68912
// exit ;
68910: GO 68961
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68912: LD_ADDR_VAR 0 2
68916: PUSH
68917: LD_VAR 0 1
68921: PPUSH
68922: LD_INT 1
68924: PPUSH
68925: CALL_OW 275
68929: PUSH
68930: LD_VAR 0 1
68934: PPUSH
68935: LD_INT 2
68937: PPUSH
68938: CALL_OW 275
68942: PUSH
68943: LD_VAR 0 1
68947: PPUSH
68948: LD_INT 3
68950: PPUSH
68951: CALL_OW 275
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: LIST
68960: ST_TO_ADDR
// end ;
68961: LD_VAR 0 2
68965: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68966: LD_INT 0
68968: PPUSH
68969: PPUSH
// result := array ;
68970: LD_ADDR_VAR 0 3
68974: PUSH
68975: LD_VAR 0 1
68979: ST_TO_ADDR
// if size > 0 then
68980: LD_VAR 0 2
68984: PUSH
68985: LD_INT 0
68987: GREATER
68988: IFFALSE 69034
// for i := array downto size do
68990: LD_ADDR_VAR 0 4
68994: PUSH
68995: DOUBLE
68996: LD_VAR 0 1
69000: INC
69001: ST_TO_ADDR
69002: LD_VAR 0 2
69006: PUSH
69007: FOR_DOWNTO
69008: IFFALSE 69032
// result := Delete ( result , result ) ;
69010: LD_ADDR_VAR 0 3
69014: PUSH
69015: LD_VAR 0 3
69019: PPUSH
69020: LD_VAR 0 3
69024: PPUSH
69025: CALL_OW 3
69029: ST_TO_ADDR
69030: GO 69007
69032: POP
69033: POP
// end ;
69034: LD_VAR 0 3
69038: RET
// export function ComExit ( unit ) ; var tmp ; begin
69039: LD_INT 0
69041: PPUSH
69042: PPUSH
// if not IsInUnit ( unit ) then
69043: LD_VAR 0 1
69047: PPUSH
69048: CALL_OW 310
69052: NOT
69053: IFFALSE 69057
// exit ;
69055: GO 69117
// tmp := IsInUnit ( unit ) ;
69057: LD_ADDR_VAR 0 3
69061: PUSH
69062: LD_VAR 0 1
69066: PPUSH
69067: CALL_OW 310
69071: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69072: LD_VAR 0 3
69076: PPUSH
69077: CALL_OW 247
69081: PUSH
69082: LD_INT 2
69084: EQUAL
69085: IFFALSE 69098
// ComExitVehicle ( unit ) else
69087: LD_VAR 0 1
69091: PPUSH
69092: CALL_OW 121
69096: GO 69107
// ComExitBuilding ( unit ) ;
69098: LD_VAR 0 1
69102: PPUSH
69103: CALL_OW 122
// result := tmp ;
69107: LD_ADDR_VAR 0 2
69111: PUSH
69112: LD_VAR 0 3
69116: ST_TO_ADDR
// end ;
69117: LD_VAR 0 2
69121: RET
// export function ComExitAll ( units ) ; var i ; begin
69122: LD_INT 0
69124: PPUSH
69125: PPUSH
// if not units then
69126: LD_VAR 0 1
69130: NOT
69131: IFFALSE 69135
// exit ;
69133: GO 69161
// for i in units do
69135: LD_ADDR_VAR 0 3
69139: PUSH
69140: LD_VAR 0 1
69144: PUSH
69145: FOR_IN
69146: IFFALSE 69159
// ComExit ( i ) ;
69148: LD_VAR 0 3
69152: PPUSH
69153: CALL 69039 0 1
69157: GO 69145
69159: POP
69160: POP
// end ;
69161: LD_VAR 0 2
69165: RET
// export function ResetHc ; begin
69166: LD_INT 0
69168: PPUSH
// InitHc ;
69169: CALL_OW 19
// hc_importance := 0 ;
69173: LD_ADDR_OWVAR 32
69177: PUSH
69178: LD_INT 0
69180: ST_TO_ADDR
// end ;
69181: LD_VAR 0 1
69185: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69186: LD_INT 0
69188: PPUSH
69189: PPUSH
69190: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69191: LD_ADDR_VAR 0 6
69195: PUSH
69196: LD_VAR 0 1
69200: PUSH
69201: LD_VAR 0 3
69205: PLUS
69206: PUSH
69207: LD_INT 2
69209: DIV
69210: ST_TO_ADDR
// if _x < 0 then
69211: LD_VAR 0 6
69215: PUSH
69216: LD_INT 0
69218: LESS
69219: IFFALSE 69236
// _x := _x * - 1 ;
69221: LD_ADDR_VAR 0 6
69225: PUSH
69226: LD_VAR 0 6
69230: PUSH
69231: LD_INT 1
69233: NEG
69234: MUL
69235: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69236: LD_ADDR_VAR 0 7
69240: PUSH
69241: LD_VAR 0 2
69245: PUSH
69246: LD_VAR 0 4
69250: PLUS
69251: PUSH
69252: LD_INT 2
69254: DIV
69255: ST_TO_ADDR
// if _y < 0 then
69256: LD_VAR 0 7
69260: PUSH
69261: LD_INT 0
69263: LESS
69264: IFFALSE 69281
// _y := _y * - 1 ;
69266: LD_ADDR_VAR 0 7
69270: PUSH
69271: LD_VAR 0 7
69275: PUSH
69276: LD_INT 1
69278: NEG
69279: MUL
69280: ST_TO_ADDR
// result := [ _x , _y ] ;
69281: LD_ADDR_VAR 0 5
69285: PUSH
69286: LD_VAR 0 6
69290: PUSH
69291: LD_VAR 0 7
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: ST_TO_ADDR
// end ;
69300: LD_VAR 0 5
69304: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69305: LD_INT 0
69307: PPUSH
69308: PPUSH
69309: PPUSH
69310: PPUSH
// task := GetTaskList ( unit ) ;
69311: LD_ADDR_VAR 0 7
69315: PUSH
69316: LD_VAR 0 1
69320: PPUSH
69321: CALL_OW 437
69325: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69326: LD_VAR 0 7
69330: NOT
69331: PUSH
69332: LD_VAR 0 1
69336: PPUSH
69337: LD_VAR 0 2
69341: PPUSH
69342: CALL_OW 308
69346: NOT
69347: AND
69348: IFFALSE 69352
// exit ;
69350: GO 69470
// if IsInArea ( unit , area ) then
69352: LD_VAR 0 1
69356: PPUSH
69357: LD_VAR 0 2
69361: PPUSH
69362: CALL_OW 308
69366: IFFALSE 69384
// begin ComMoveToArea ( unit , goAway ) ;
69368: LD_VAR 0 1
69372: PPUSH
69373: LD_VAR 0 3
69377: PPUSH
69378: CALL_OW 113
// exit ;
69382: GO 69470
// end ; if task [ 1 ] [ 1 ] <> M then
69384: LD_VAR 0 7
69388: PUSH
69389: LD_INT 1
69391: ARRAY
69392: PUSH
69393: LD_INT 1
69395: ARRAY
69396: PUSH
69397: LD_STRING M
69399: NONEQUAL
69400: IFFALSE 69404
// exit ;
69402: GO 69470
// x := task [ 1 ] [ 2 ] ;
69404: LD_ADDR_VAR 0 5
69408: PUSH
69409: LD_VAR 0 7
69413: PUSH
69414: LD_INT 1
69416: ARRAY
69417: PUSH
69418: LD_INT 2
69420: ARRAY
69421: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69422: LD_ADDR_VAR 0 6
69426: PUSH
69427: LD_VAR 0 7
69431: PUSH
69432: LD_INT 1
69434: ARRAY
69435: PUSH
69436: LD_INT 3
69438: ARRAY
69439: ST_TO_ADDR
// if InArea ( x , y , area ) then
69440: LD_VAR 0 5
69444: PPUSH
69445: LD_VAR 0 6
69449: PPUSH
69450: LD_VAR 0 2
69454: PPUSH
69455: CALL_OW 309
69459: IFFALSE 69470
// ComStop ( unit ) ;
69461: LD_VAR 0 1
69465: PPUSH
69466: CALL_OW 141
// end ;
69470: LD_VAR 0 4
69474: RET
// export function Abs ( value ) ; begin
69475: LD_INT 0
69477: PPUSH
// result := value ;
69478: LD_ADDR_VAR 0 2
69482: PUSH
69483: LD_VAR 0 1
69487: ST_TO_ADDR
// if value < 0 then
69488: LD_VAR 0 1
69492: PUSH
69493: LD_INT 0
69495: LESS
69496: IFFALSE 69513
// result := value * - 1 ;
69498: LD_ADDR_VAR 0 2
69502: PUSH
69503: LD_VAR 0 1
69507: PUSH
69508: LD_INT 1
69510: NEG
69511: MUL
69512: ST_TO_ADDR
// end ;
69513: LD_VAR 0 2
69517: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69518: LD_INT 0
69520: PPUSH
69521: PPUSH
69522: PPUSH
69523: PPUSH
69524: PPUSH
69525: PPUSH
69526: PPUSH
69527: PPUSH
// if not unit or not building then
69528: LD_VAR 0 1
69532: NOT
69533: PUSH
69534: LD_VAR 0 2
69538: NOT
69539: OR
69540: IFFALSE 69544
// exit ;
69542: GO 69770
// x := GetX ( building ) ;
69544: LD_ADDR_VAR 0 4
69548: PUSH
69549: LD_VAR 0 2
69553: PPUSH
69554: CALL_OW 250
69558: ST_TO_ADDR
// y := GetY ( building ) ;
69559: LD_ADDR_VAR 0 6
69563: PUSH
69564: LD_VAR 0 2
69568: PPUSH
69569: CALL_OW 251
69573: ST_TO_ADDR
// d := GetDir ( building ) ;
69574: LD_ADDR_VAR 0 8
69578: PUSH
69579: LD_VAR 0 2
69583: PPUSH
69584: CALL_OW 254
69588: ST_TO_ADDR
// r := 4 ;
69589: LD_ADDR_VAR 0 9
69593: PUSH
69594: LD_INT 4
69596: ST_TO_ADDR
// for i := 1 to 5 do
69597: LD_ADDR_VAR 0 10
69601: PUSH
69602: DOUBLE
69603: LD_INT 1
69605: DEC
69606: ST_TO_ADDR
69607: LD_INT 5
69609: PUSH
69610: FOR_TO
69611: IFFALSE 69768
// begin _x := ShiftX ( x , d , r + i ) ;
69613: LD_ADDR_VAR 0 5
69617: PUSH
69618: LD_VAR 0 4
69622: PPUSH
69623: LD_VAR 0 8
69627: PPUSH
69628: LD_VAR 0 9
69632: PUSH
69633: LD_VAR 0 10
69637: PLUS
69638: PPUSH
69639: CALL_OW 272
69643: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69644: LD_ADDR_VAR 0 7
69648: PUSH
69649: LD_VAR 0 6
69653: PPUSH
69654: LD_VAR 0 8
69658: PPUSH
69659: LD_VAR 0 9
69663: PUSH
69664: LD_VAR 0 10
69668: PLUS
69669: PPUSH
69670: CALL_OW 273
69674: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69675: LD_VAR 0 5
69679: PPUSH
69680: LD_VAR 0 7
69684: PPUSH
69685: CALL_OW 488
69689: PUSH
69690: LD_VAR 0 5
69694: PPUSH
69695: LD_VAR 0 7
69699: PPUSH
69700: CALL_OW 428
69704: PPUSH
69705: CALL_OW 247
69709: PUSH
69710: LD_INT 3
69712: PUSH
69713: LD_INT 2
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: IN
69720: NOT
69721: AND
69722: IFFALSE 69766
// begin ComMoveXY ( unit , _x , _y ) ;
69724: LD_VAR 0 1
69728: PPUSH
69729: LD_VAR 0 5
69733: PPUSH
69734: LD_VAR 0 7
69738: PPUSH
69739: CALL_OW 111
// result := [ _x , _y ] ;
69743: LD_ADDR_VAR 0 3
69747: PUSH
69748: LD_VAR 0 5
69752: PUSH
69753: LD_VAR 0 7
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: ST_TO_ADDR
// exit ;
69762: POP
69763: POP
69764: GO 69770
// end ; end ;
69766: GO 69610
69768: POP
69769: POP
// end ;
69770: LD_VAR 0 3
69774: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69775: LD_INT 0
69777: PPUSH
69778: PPUSH
69779: PPUSH
// result := 0 ;
69780: LD_ADDR_VAR 0 3
69784: PUSH
69785: LD_INT 0
69787: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69788: LD_VAR 0 1
69792: PUSH
69793: LD_INT 0
69795: LESS
69796: PUSH
69797: LD_VAR 0 1
69801: PUSH
69802: LD_INT 8
69804: GREATER
69805: OR
69806: PUSH
69807: LD_VAR 0 2
69811: PUSH
69812: LD_INT 0
69814: LESS
69815: OR
69816: PUSH
69817: LD_VAR 0 2
69821: PUSH
69822: LD_INT 8
69824: GREATER
69825: OR
69826: IFFALSE 69830
// exit ;
69828: GO 69905
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69830: LD_ADDR_VAR 0 4
69834: PUSH
69835: LD_INT 22
69837: PUSH
69838: LD_VAR 0 2
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PPUSH
69847: CALL_OW 69
69851: PUSH
69852: FOR_IN
69853: IFFALSE 69903
// begin un := UnitShoot ( i ) ;
69855: LD_ADDR_VAR 0 5
69859: PUSH
69860: LD_VAR 0 4
69864: PPUSH
69865: CALL_OW 504
69869: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69870: LD_VAR 0 5
69874: PPUSH
69875: CALL_OW 255
69879: PUSH
69880: LD_VAR 0 1
69884: EQUAL
69885: IFFALSE 69901
// begin result := un ;
69887: LD_ADDR_VAR 0 3
69891: PUSH
69892: LD_VAR 0 5
69896: ST_TO_ADDR
// exit ;
69897: POP
69898: POP
69899: GO 69905
// end ; end ;
69901: GO 69852
69903: POP
69904: POP
// end ;
69905: LD_VAR 0 3
69909: RET
// export function GetCargoBay ( units ) ; begin
69910: LD_INT 0
69912: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69913: LD_ADDR_VAR 0 2
69917: PUSH
69918: LD_VAR 0 1
69922: PPUSH
69923: LD_INT 2
69925: PUSH
69926: LD_INT 34
69928: PUSH
69929: LD_INT 12
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: LD_INT 34
69938: PUSH
69939: LD_INT 51
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: LD_INT 34
69948: PUSH
69949: LD_INT 32
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: PUSH
69956: LD_INT 34
69958: PUSH
69959: LD_EXP 93
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: LIST
69974: PPUSH
69975: CALL_OW 72
69979: ST_TO_ADDR
// end ; end_of_file
69980: LD_VAR 0 2
69984: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
69985: LD_VAR 0 2
69989: PUSH
69990: LD_INT 100
69992: EQUAL
69993: IFFALSE 70942
// begin if not StreamModeActive then
69995: LD_EXP 108
69999: NOT
70000: IFFALSE 70010
// StreamModeActive := true ;
70002: LD_ADDR_EXP 108
70006: PUSH
70007: LD_INT 1
70009: ST_TO_ADDR
// if p3 = 0 then
70010: LD_VAR 0 3
70014: PUSH
70015: LD_INT 0
70017: EQUAL
70018: IFFALSE 70024
// InitStreamMode ;
70020: CALL 71100 0 0
// if p3 = 1 then
70024: LD_VAR 0 3
70028: PUSH
70029: LD_INT 1
70031: EQUAL
70032: IFFALSE 70042
// sRocket := true ;
70034: LD_ADDR_EXP 113
70038: PUSH
70039: LD_INT 1
70041: ST_TO_ADDR
// if p3 = 2 then
70042: LD_VAR 0 3
70046: PUSH
70047: LD_INT 2
70049: EQUAL
70050: IFFALSE 70060
// sSpeed := true ;
70052: LD_ADDR_EXP 112
70056: PUSH
70057: LD_INT 1
70059: ST_TO_ADDR
// if p3 = 3 then
70060: LD_VAR 0 3
70064: PUSH
70065: LD_INT 3
70067: EQUAL
70068: IFFALSE 70078
// sEngine := true ;
70070: LD_ADDR_EXP 114
70074: PUSH
70075: LD_INT 1
70077: ST_TO_ADDR
// if p3 = 4 then
70078: LD_VAR 0 3
70082: PUSH
70083: LD_INT 4
70085: EQUAL
70086: IFFALSE 70096
// sSpec := true ;
70088: LD_ADDR_EXP 111
70092: PUSH
70093: LD_INT 1
70095: ST_TO_ADDR
// if p3 = 5 then
70096: LD_VAR 0 3
70100: PUSH
70101: LD_INT 5
70103: EQUAL
70104: IFFALSE 70114
// sLevel := true ;
70106: LD_ADDR_EXP 115
70110: PUSH
70111: LD_INT 1
70113: ST_TO_ADDR
// if p3 = 6 then
70114: LD_VAR 0 3
70118: PUSH
70119: LD_INT 6
70121: EQUAL
70122: IFFALSE 70132
// sArmoury := true ;
70124: LD_ADDR_EXP 116
70128: PUSH
70129: LD_INT 1
70131: ST_TO_ADDR
// if p3 = 7 then
70132: LD_VAR 0 3
70136: PUSH
70137: LD_INT 7
70139: EQUAL
70140: IFFALSE 70150
// sRadar := true ;
70142: LD_ADDR_EXP 117
70146: PUSH
70147: LD_INT 1
70149: ST_TO_ADDR
// if p3 = 8 then
70150: LD_VAR 0 3
70154: PUSH
70155: LD_INT 8
70157: EQUAL
70158: IFFALSE 70168
// sBunker := true ;
70160: LD_ADDR_EXP 118
70164: PUSH
70165: LD_INT 1
70167: ST_TO_ADDR
// if p3 = 9 then
70168: LD_VAR 0 3
70172: PUSH
70173: LD_INT 9
70175: EQUAL
70176: IFFALSE 70186
// sHack := true ;
70178: LD_ADDR_EXP 119
70182: PUSH
70183: LD_INT 1
70185: ST_TO_ADDR
// if p3 = 10 then
70186: LD_VAR 0 3
70190: PUSH
70191: LD_INT 10
70193: EQUAL
70194: IFFALSE 70204
// sFire := true ;
70196: LD_ADDR_EXP 120
70200: PUSH
70201: LD_INT 1
70203: ST_TO_ADDR
// if p3 = 11 then
70204: LD_VAR 0 3
70208: PUSH
70209: LD_INT 11
70211: EQUAL
70212: IFFALSE 70222
// sRefresh := true ;
70214: LD_ADDR_EXP 121
70218: PUSH
70219: LD_INT 1
70221: ST_TO_ADDR
// if p3 = 12 then
70222: LD_VAR 0 3
70226: PUSH
70227: LD_INT 12
70229: EQUAL
70230: IFFALSE 70240
// sExp := true ;
70232: LD_ADDR_EXP 122
70236: PUSH
70237: LD_INT 1
70239: ST_TO_ADDR
// if p3 = 13 then
70240: LD_VAR 0 3
70244: PUSH
70245: LD_INT 13
70247: EQUAL
70248: IFFALSE 70258
// sDepot := true ;
70250: LD_ADDR_EXP 123
70254: PUSH
70255: LD_INT 1
70257: ST_TO_ADDR
// if p3 = 14 then
70258: LD_VAR 0 3
70262: PUSH
70263: LD_INT 14
70265: EQUAL
70266: IFFALSE 70276
// sFlag := true ;
70268: LD_ADDR_EXP 124
70272: PUSH
70273: LD_INT 1
70275: ST_TO_ADDR
// if p3 = 15 then
70276: LD_VAR 0 3
70280: PUSH
70281: LD_INT 15
70283: EQUAL
70284: IFFALSE 70294
// sKamikadze := true ;
70286: LD_ADDR_EXP 132
70290: PUSH
70291: LD_INT 1
70293: ST_TO_ADDR
// if p3 = 16 then
70294: LD_VAR 0 3
70298: PUSH
70299: LD_INT 16
70301: EQUAL
70302: IFFALSE 70312
// sTroll := true ;
70304: LD_ADDR_EXP 133
70308: PUSH
70309: LD_INT 1
70311: ST_TO_ADDR
// if p3 = 17 then
70312: LD_VAR 0 3
70316: PUSH
70317: LD_INT 17
70319: EQUAL
70320: IFFALSE 70330
// sSlow := true ;
70322: LD_ADDR_EXP 134
70326: PUSH
70327: LD_INT 1
70329: ST_TO_ADDR
// if p3 = 18 then
70330: LD_VAR 0 3
70334: PUSH
70335: LD_INT 18
70337: EQUAL
70338: IFFALSE 70348
// sLack := true ;
70340: LD_ADDR_EXP 135
70344: PUSH
70345: LD_INT 1
70347: ST_TO_ADDR
// if p3 = 19 then
70348: LD_VAR 0 3
70352: PUSH
70353: LD_INT 19
70355: EQUAL
70356: IFFALSE 70366
// sTank := true ;
70358: LD_ADDR_EXP 137
70362: PUSH
70363: LD_INT 1
70365: ST_TO_ADDR
// if p3 = 20 then
70366: LD_VAR 0 3
70370: PUSH
70371: LD_INT 20
70373: EQUAL
70374: IFFALSE 70384
// sRemote := true ;
70376: LD_ADDR_EXP 138
70380: PUSH
70381: LD_INT 1
70383: ST_TO_ADDR
// if p3 = 21 then
70384: LD_VAR 0 3
70388: PUSH
70389: LD_INT 21
70391: EQUAL
70392: IFFALSE 70402
// sPowell := true ;
70394: LD_ADDR_EXP 139
70398: PUSH
70399: LD_INT 1
70401: ST_TO_ADDR
// if p3 = 22 then
70402: LD_VAR 0 3
70406: PUSH
70407: LD_INT 22
70409: EQUAL
70410: IFFALSE 70420
// sTeleport := true ;
70412: LD_ADDR_EXP 142
70416: PUSH
70417: LD_INT 1
70419: ST_TO_ADDR
// if p3 = 23 then
70420: LD_VAR 0 3
70424: PUSH
70425: LD_INT 23
70427: EQUAL
70428: IFFALSE 70438
// sOilTower := true ;
70430: LD_ADDR_EXP 144
70434: PUSH
70435: LD_INT 1
70437: ST_TO_ADDR
// if p3 = 24 then
70438: LD_VAR 0 3
70442: PUSH
70443: LD_INT 24
70445: EQUAL
70446: IFFALSE 70456
// sShovel := true ;
70448: LD_ADDR_EXP 145
70452: PUSH
70453: LD_INT 1
70455: ST_TO_ADDR
// if p3 = 25 then
70456: LD_VAR 0 3
70460: PUSH
70461: LD_INT 25
70463: EQUAL
70464: IFFALSE 70474
// sSheik := true ;
70466: LD_ADDR_EXP 146
70470: PUSH
70471: LD_INT 1
70473: ST_TO_ADDR
// if p3 = 26 then
70474: LD_VAR 0 3
70478: PUSH
70479: LD_INT 26
70481: EQUAL
70482: IFFALSE 70492
// sEarthquake := true ;
70484: LD_ADDR_EXP 148
70488: PUSH
70489: LD_INT 1
70491: ST_TO_ADDR
// if p3 = 27 then
70492: LD_VAR 0 3
70496: PUSH
70497: LD_INT 27
70499: EQUAL
70500: IFFALSE 70510
// sAI := true ;
70502: LD_ADDR_EXP 149
70506: PUSH
70507: LD_INT 1
70509: ST_TO_ADDR
// if p3 = 28 then
70510: LD_VAR 0 3
70514: PUSH
70515: LD_INT 28
70517: EQUAL
70518: IFFALSE 70528
// sCargo := true ;
70520: LD_ADDR_EXP 152
70524: PUSH
70525: LD_INT 1
70527: ST_TO_ADDR
// if p3 = 29 then
70528: LD_VAR 0 3
70532: PUSH
70533: LD_INT 29
70535: EQUAL
70536: IFFALSE 70546
// sDLaser := true ;
70538: LD_ADDR_EXP 153
70542: PUSH
70543: LD_INT 1
70545: ST_TO_ADDR
// if p3 = 30 then
70546: LD_VAR 0 3
70550: PUSH
70551: LD_INT 30
70553: EQUAL
70554: IFFALSE 70564
// sExchange := true ;
70556: LD_ADDR_EXP 154
70560: PUSH
70561: LD_INT 1
70563: ST_TO_ADDR
// if p3 = 31 then
70564: LD_VAR 0 3
70568: PUSH
70569: LD_INT 31
70571: EQUAL
70572: IFFALSE 70582
// sFac := true ;
70574: LD_ADDR_EXP 155
70578: PUSH
70579: LD_INT 1
70581: ST_TO_ADDR
// if p3 = 32 then
70582: LD_VAR 0 3
70586: PUSH
70587: LD_INT 32
70589: EQUAL
70590: IFFALSE 70600
// sPower := true ;
70592: LD_ADDR_EXP 156
70596: PUSH
70597: LD_INT 1
70599: ST_TO_ADDR
// if p3 = 33 then
70600: LD_VAR 0 3
70604: PUSH
70605: LD_INT 33
70607: EQUAL
70608: IFFALSE 70618
// sRandom := true ;
70610: LD_ADDR_EXP 157
70614: PUSH
70615: LD_INT 1
70617: ST_TO_ADDR
// if p3 = 34 then
70618: LD_VAR 0 3
70622: PUSH
70623: LD_INT 34
70625: EQUAL
70626: IFFALSE 70636
// sShield := true ;
70628: LD_ADDR_EXP 158
70632: PUSH
70633: LD_INT 1
70635: ST_TO_ADDR
// if p3 = 35 then
70636: LD_VAR 0 3
70640: PUSH
70641: LD_INT 35
70643: EQUAL
70644: IFFALSE 70654
// sTime := true ;
70646: LD_ADDR_EXP 159
70650: PUSH
70651: LD_INT 1
70653: ST_TO_ADDR
// if p3 = 36 then
70654: LD_VAR 0 3
70658: PUSH
70659: LD_INT 36
70661: EQUAL
70662: IFFALSE 70672
// sTools := true ;
70664: LD_ADDR_EXP 160
70668: PUSH
70669: LD_INT 1
70671: ST_TO_ADDR
// if p3 = 101 then
70672: LD_VAR 0 3
70676: PUSH
70677: LD_INT 101
70679: EQUAL
70680: IFFALSE 70690
// sSold := true ;
70682: LD_ADDR_EXP 125
70686: PUSH
70687: LD_INT 1
70689: ST_TO_ADDR
// if p3 = 102 then
70690: LD_VAR 0 3
70694: PUSH
70695: LD_INT 102
70697: EQUAL
70698: IFFALSE 70708
// sDiff := true ;
70700: LD_ADDR_EXP 126
70704: PUSH
70705: LD_INT 1
70707: ST_TO_ADDR
// if p3 = 103 then
70708: LD_VAR 0 3
70712: PUSH
70713: LD_INT 103
70715: EQUAL
70716: IFFALSE 70726
// sFog := true ;
70718: LD_ADDR_EXP 129
70722: PUSH
70723: LD_INT 1
70725: ST_TO_ADDR
// if p3 = 104 then
70726: LD_VAR 0 3
70730: PUSH
70731: LD_INT 104
70733: EQUAL
70734: IFFALSE 70744
// sReset := true ;
70736: LD_ADDR_EXP 130
70740: PUSH
70741: LD_INT 1
70743: ST_TO_ADDR
// if p3 = 105 then
70744: LD_VAR 0 3
70748: PUSH
70749: LD_INT 105
70751: EQUAL
70752: IFFALSE 70762
// sSun := true ;
70754: LD_ADDR_EXP 131
70758: PUSH
70759: LD_INT 1
70761: ST_TO_ADDR
// if p3 = 106 then
70762: LD_VAR 0 3
70766: PUSH
70767: LD_INT 106
70769: EQUAL
70770: IFFALSE 70780
// sTiger := true ;
70772: LD_ADDR_EXP 127
70776: PUSH
70777: LD_INT 1
70779: ST_TO_ADDR
// if p3 = 107 then
70780: LD_VAR 0 3
70784: PUSH
70785: LD_INT 107
70787: EQUAL
70788: IFFALSE 70798
// sBomb := true ;
70790: LD_ADDR_EXP 128
70794: PUSH
70795: LD_INT 1
70797: ST_TO_ADDR
// if p3 = 108 then
70798: LD_VAR 0 3
70802: PUSH
70803: LD_INT 108
70805: EQUAL
70806: IFFALSE 70816
// sWound := true ;
70808: LD_ADDR_EXP 136
70812: PUSH
70813: LD_INT 1
70815: ST_TO_ADDR
// if p3 = 109 then
70816: LD_VAR 0 3
70820: PUSH
70821: LD_INT 109
70823: EQUAL
70824: IFFALSE 70834
// sBetray := true ;
70826: LD_ADDR_EXP 140
70830: PUSH
70831: LD_INT 1
70833: ST_TO_ADDR
// if p3 = 110 then
70834: LD_VAR 0 3
70838: PUSH
70839: LD_INT 110
70841: EQUAL
70842: IFFALSE 70852
// sContamin := true ;
70844: LD_ADDR_EXP 141
70848: PUSH
70849: LD_INT 1
70851: ST_TO_ADDR
// if p3 = 111 then
70852: LD_VAR 0 3
70856: PUSH
70857: LD_INT 111
70859: EQUAL
70860: IFFALSE 70870
// sOil := true ;
70862: LD_ADDR_EXP 143
70866: PUSH
70867: LD_INT 1
70869: ST_TO_ADDR
// if p3 = 112 then
70870: LD_VAR 0 3
70874: PUSH
70875: LD_INT 112
70877: EQUAL
70878: IFFALSE 70888
// sStu := true ;
70880: LD_ADDR_EXP 147
70884: PUSH
70885: LD_INT 1
70887: ST_TO_ADDR
// if p3 = 113 then
70888: LD_VAR 0 3
70892: PUSH
70893: LD_INT 113
70895: EQUAL
70896: IFFALSE 70906
// sBazooka := true ;
70898: LD_ADDR_EXP 150
70902: PUSH
70903: LD_INT 1
70905: ST_TO_ADDR
// if p3 = 114 then
70906: LD_VAR 0 3
70910: PUSH
70911: LD_INT 114
70913: EQUAL
70914: IFFALSE 70924
// sMortar := true ;
70916: LD_ADDR_EXP 151
70920: PUSH
70921: LD_INT 1
70923: ST_TO_ADDR
// if p3 = 115 then
70924: LD_VAR 0 3
70928: PUSH
70929: LD_INT 115
70931: EQUAL
70932: IFFALSE 70942
// sRanger := true ;
70934: LD_ADDR_EXP 161
70938: PUSH
70939: LD_INT 1
70941: ST_TO_ADDR
// end ; if p2 = 101 then
70942: LD_VAR 0 2
70946: PUSH
70947: LD_INT 101
70949: EQUAL
70950: IFFALSE 71078
// begin case p3 of 1 :
70952: LD_VAR 0 3
70956: PUSH
70957: LD_INT 1
70959: DOUBLE
70960: EQUAL
70961: IFTRUE 70965
70963: GO 70972
70965: POP
// hHackUnlimitedResources ; 2 :
70966: CALL 82113 0 0
70970: GO 71078
70972: LD_INT 2
70974: DOUBLE
70975: EQUAL
70976: IFTRUE 70980
70978: GO 70987
70980: POP
// hHackSetLevel10 ; 3 :
70981: CALL 82246 0 0
70985: GO 71078
70987: LD_INT 3
70989: DOUBLE
70990: EQUAL
70991: IFTRUE 70995
70993: GO 71002
70995: POP
// hHackSetLevel10YourUnits ; 4 :
70996: CALL 82331 0 0
71000: GO 71078
71002: LD_INT 4
71004: DOUBLE
71005: EQUAL
71006: IFTRUE 71010
71008: GO 71017
71010: POP
// hHackInvincible ; 5 :
71011: CALL 82779 0 0
71015: GO 71078
71017: LD_INT 5
71019: DOUBLE
71020: EQUAL
71021: IFTRUE 71025
71023: GO 71032
71025: POP
// hHackInvisible ; 6 :
71026: CALL 82890 0 0
71030: GO 71078
71032: LD_INT 6
71034: DOUBLE
71035: EQUAL
71036: IFTRUE 71040
71038: GO 71047
71040: POP
// hHackChangeYourSide ; 7 :
71041: CALL 82947 0 0
71045: GO 71078
71047: LD_INT 7
71049: DOUBLE
71050: EQUAL
71051: IFTRUE 71055
71053: GO 71062
71055: POP
// hHackChangeUnitSide ; 8 :
71056: CALL 82989 0 0
71060: GO 71078
71062: LD_INT 8
71064: DOUBLE
71065: EQUAL
71066: IFTRUE 71070
71068: GO 71077
71070: POP
// hHackFog ; end ;
71071: CALL 83090 0 0
71075: GO 71078
71077: POP
// end ; end ;
71078: PPOPN 6
71080: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
71081: GO 71083
71083: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
71084: LD_STRING initStreamRollete();
71086: PPUSH
71087: CALL_OW 559
// InitStreamMode ;
71091: CALL 71100 0 0
// DefineStreamItems ( ) ;
71095: CALL 71540 0 0
// end ;
71099: END
// function InitStreamMode ; begin
71100: LD_INT 0
71102: PPUSH
// streamModeActive := false ;
71103: LD_ADDR_EXP 108
71107: PUSH
71108: LD_INT 0
71110: ST_TO_ADDR
// normalCounter := 36 ;
71111: LD_ADDR_EXP 109
71115: PUSH
71116: LD_INT 36
71118: ST_TO_ADDR
// hardcoreCounter := 16 ;
71119: LD_ADDR_EXP 110
71123: PUSH
71124: LD_INT 16
71126: ST_TO_ADDR
// sRocket := false ;
71127: LD_ADDR_EXP 113
71131: PUSH
71132: LD_INT 0
71134: ST_TO_ADDR
// sSpeed := false ;
71135: LD_ADDR_EXP 112
71139: PUSH
71140: LD_INT 0
71142: ST_TO_ADDR
// sEngine := false ;
71143: LD_ADDR_EXP 114
71147: PUSH
71148: LD_INT 0
71150: ST_TO_ADDR
// sSpec := false ;
71151: LD_ADDR_EXP 111
71155: PUSH
71156: LD_INT 0
71158: ST_TO_ADDR
// sLevel := false ;
71159: LD_ADDR_EXP 115
71163: PUSH
71164: LD_INT 0
71166: ST_TO_ADDR
// sArmoury := false ;
71167: LD_ADDR_EXP 116
71171: PUSH
71172: LD_INT 0
71174: ST_TO_ADDR
// sRadar := false ;
71175: LD_ADDR_EXP 117
71179: PUSH
71180: LD_INT 0
71182: ST_TO_ADDR
// sBunker := false ;
71183: LD_ADDR_EXP 118
71187: PUSH
71188: LD_INT 0
71190: ST_TO_ADDR
// sHack := false ;
71191: LD_ADDR_EXP 119
71195: PUSH
71196: LD_INT 0
71198: ST_TO_ADDR
// sFire := false ;
71199: LD_ADDR_EXP 120
71203: PUSH
71204: LD_INT 0
71206: ST_TO_ADDR
// sRefresh := false ;
71207: LD_ADDR_EXP 121
71211: PUSH
71212: LD_INT 0
71214: ST_TO_ADDR
// sExp := false ;
71215: LD_ADDR_EXP 122
71219: PUSH
71220: LD_INT 0
71222: ST_TO_ADDR
// sDepot := false ;
71223: LD_ADDR_EXP 123
71227: PUSH
71228: LD_INT 0
71230: ST_TO_ADDR
// sFlag := false ;
71231: LD_ADDR_EXP 124
71235: PUSH
71236: LD_INT 0
71238: ST_TO_ADDR
// sKamikadze := false ;
71239: LD_ADDR_EXP 132
71243: PUSH
71244: LD_INT 0
71246: ST_TO_ADDR
// sTroll := false ;
71247: LD_ADDR_EXP 133
71251: PUSH
71252: LD_INT 0
71254: ST_TO_ADDR
// sSlow := false ;
71255: LD_ADDR_EXP 134
71259: PUSH
71260: LD_INT 0
71262: ST_TO_ADDR
// sLack := false ;
71263: LD_ADDR_EXP 135
71267: PUSH
71268: LD_INT 0
71270: ST_TO_ADDR
// sTank := false ;
71271: LD_ADDR_EXP 137
71275: PUSH
71276: LD_INT 0
71278: ST_TO_ADDR
// sRemote := false ;
71279: LD_ADDR_EXP 138
71283: PUSH
71284: LD_INT 0
71286: ST_TO_ADDR
// sPowell := false ;
71287: LD_ADDR_EXP 139
71291: PUSH
71292: LD_INT 0
71294: ST_TO_ADDR
// sTeleport := false ;
71295: LD_ADDR_EXP 142
71299: PUSH
71300: LD_INT 0
71302: ST_TO_ADDR
// sOilTower := false ;
71303: LD_ADDR_EXP 144
71307: PUSH
71308: LD_INT 0
71310: ST_TO_ADDR
// sShovel := false ;
71311: LD_ADDR_EXP 145
71315: PUSH
71316: LD_INT 0
71318: ST_TO_ADDR
// sSheik := false ;
71319: LD_ADDR_EXP 146
71323: PUSH
71324: LD_INT 0
71326: ST_TO_ADDR
// sEarthquake := false ;
71327: LD_ADDR_EXP 148
71331: PUSH
71332: LD_INT 0
71334: ST_TO_ADDR
// sAI := false ;
71335: LD_ADDR_EXP 149
71339: PUSH
71340: LD_INT 0
71342: ST_TO_ADDR
// sCargo := false ;
71343: LD_ADDR_EXP 152
71347: PUSH
71348: LD_INT 0
71350: ST_TO_ADDR
// sDLaser := false ;
71351: LD_ADDR_EXP 153
71355: PUSH
71356: LD_INT 0
71358: ST_TO_ADDR
// sExchange := false ;
71359: LD_ADDR_EXP 154
71363: PUSH
71364: LD_INT 0
71366: ST_TO_ADDR
// sFac := false ;
71367: LD_ADDR_EXP 155
71371: PUSH
71372: LD_INT 0
71374: ST_TO_ADDR
// sPower := false ;
71375: LD_ADDR_EXP 156
71379: PUSH
71380: LD_INT 0
71382: ST_TO_ADDR
// sRandom := false ;
71383: LD_ADDR_EXP 157
71387: PUSH
71388: LD_INT 0
71390: ST_TO_ADDR
// sShield := false ;
71391: LD_ADDR_EXP 158
71395: PUSH
71396: LD_INT 0
71398: ST_TO_ADDR
// sTime := false ;
71399: LD_ADDR_EXP 159
71403: PUSH
71404: LD_INT 0
71406: ST_TO_ADDR
// sTools := false ;
71407: LD_ADDR_EXP 160
71411: PUSH
71412: LD_INT 0
71414: ST_TO_ADDR
// sSold := false ;
71415: LD_ADDR_EXP 125
71419: PUSH
71420: LD_INT 0
71422: ST_TO_ADDR
// sDiff := false ;
71423: LD_ADDR_EXP 126
71427: PUSH
71428: LD_INT 0
71430: ST_TO_ADDR
// sFog := false ;
71431: LD_ADDR_EXP 129
71435: PUSH
71436: LD_INT 0
71438: ST_TO_ADDR
// sReset := false ;
71439: LD_ADDR_EXP 130
71443: PUSH
71444: LD_INT 0
71446: ST_TO_ADDR
// sSun := false ;
71447: LD_ADDR_EXP 131
71451: PUSH
71452: LD_INT 0
71454: ST_TO_ADDR
// sTiger := false ;
71455: LD_ADDR_EXP 127
71459: PUSH
71460: LD_INT 0
71462: ST_TO_ADDR
// sBomb := false ;
71463: LD_ADDR_EXP 128
71467: PUSH
71468: LD_INT 0
71470: ST_TO_ADDR
// sWound := false ;
71471: LD_ADDR_EXP 136
71475: PUSH
71476: LD_INT 0
71478: ST_TO_ADDR
// sBetray := false ;
71479: LD_ADDR_EXP 140
71483: PUSH
71484: LD_INT 0
71486: ST_TO_ADDR
// sContamin := false ;
71487: LD_ADDR_EXP 141
71491: PUSH
71492: LD_INT 0
71494: ST_TO_ADDR
// sOil := false ;
71495: LD_ADDR_EXP 143
71499: PUSH
71500: LD_INT 0
71502: ST_TO_ADDR
// sStu := false ;
71503: LD_ADDR_EXP 147
71507: PUSH
71508: LD_INT 0
71510: ST_TO_ADDR
// sBazooka := false ;
71511: LD_ADDR_EXP 150
71515: PUSH
71516: LD_INT 0
71518: ST_TO_ADDR
// sMortar := false ;
71519: LD_ADDR_EXP 151
71523: PUSH
71524: LD_INT 0
71526: ST_TO_ADDR
// sRanger := false ;
71527: LD_ADDR_EXP 161
71531: PUSH
71532: LD_INT 0
71534: ST_TO_ADDR
// end ;
71535: LD_VAR 0 1
71539: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
71540: LD_INT 0
71542: PPUSH
71543: PPUSH
71544: PPUSH
71545: PPUSH
71546: PPUSH
// result := [ ] ;
71547: LD_ADDR_VAR 0 1
71551: PUSH
71552: EMPTY
71553: ST_TO_ADDR
// if campaign_id = 1 then
71554: LD_OWVAR 69
71558: PUSH
71559: LD_INT 1
71561: EQUAL
71562: IFFALSE 74500
// begin case mission_number of 1 :
71564: LD_OWVAR 70
71568: PUSH
71569: LD_INT 1
71571: DOUBLE
71572: EQUAL
71573: IFTRUE 71577
71575: GO 71641
71577: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
71578: LD_ADDR_VAR 0 1
71582: PUSH
71583: LD_INT 2
71585: PUSH
71586: LD_INT 4
71588: PUSH
71589: LD_INT 11
71591: PUSH
71592: LD_INT 12
71594: PUSH
71595: LD_INT 15
71597: PUSH
71598: LD_INT 16
71600: PUSH
71601: LD_INT 22
71603: PUSH
71604: LD_INT 23
71606: PUSH
71607: LD_INT 26
71609: PUSH
71610: EMPTY
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: LIST
71619: LIST
71620: PUSH
71621: LD_INT 101
71623: PUSH
71624: LD_INT 102
71626: PUSH
71627: LD_INT 106
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: LIST
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: ST_TO_ADDR
71639: GO 74498
71641: LD_INT 2
71643: DOUBLE
71644: EQUAL
71645: IFTRUE 71649
71647: GO 71721
71649: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
71650: LD_ADDR_VAR 0 1
71654: PUSH
71655: LD_INT 2
71657: PUSH
71658: LD_INT 4
71660: PUSH
71661: LD_INT 11
71663: PUSH
71664: LD_INT 12
71666: PUSH
71667: LD_INT 15
71669: PUSH
71670: LD_INT 16
71672: PUSH
71673: LD_INT 22
71675: PUSH
71676: LD_INT 23
71678: PUSH
71679: LD_INT 26
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: LIST
71686: LIST
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: LIST
71692: PUSH
71693: LD_INT 101
71695: PUSH
71696: LD_INT 102
71698: PUSH
71699: LD_INT 105
71701: PUSH
71702: LD_INT 106
71704: PUSH
71705: LD_INT 108
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: ST_TO_ADDR
71719: GO 74498
71721: LD_INT 3
71723: DOUBLE
71724: EQUAL
71725: IFTRUE 71729
71727: GO 71805
71729: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
71730: LD_ADDR_VAR 0 1
71734: PUSH
71735: LD_INT 2
71737: PUSH
71738: LD_INT 4
71740: PUSH
71741: LD_INT 5
71743: PUSH
71744: LD_INT 11
71746: PUSH
71747: LD_INT 12
71749: PUSH
71750: LD_INT 15
71752: PUSH
71753: LD_INT 16
71755: PUSH
71756: LD_INT 22
71758: PUSH
71759: LD_INT 26
71761: PUSH
71762: LD_INT 36
71764: PUSH
71765: EMPTY
71766: LIST
71767: LIST
71768: LIST
71769: LIST
71770: LIST
71771: LIST
71772: LIST
71773: LIST
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 101
71779: PUSH
71780: LD_INT 102
71782: PUSH
71783: LD_INT 105
71785: PUSH
71786: LD_INT 106
71788: PUSH
71789: LD_INT 108
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: LIST
71796: LIST
71797: LIST
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: ST_TO_ADDR
71803: GO 74498
71805: LD_INT 4
71807: DOUBLE
71808: EQUAL
71809: IFTRUE 71813
71811: GO 71897
71813: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
71814: LD_ADDR_VAR 0 1
71818: PUSH
71819: LD_INT 2
71821: PUSH
71822: LD_INT 4
71824: PUSH
71825: LD_INT 5
71827: PUSH
71828: LD_INT 8
71830: PUSH
71831: LD_INT 11
71833: PUSH
71834: LD_INT 12
71836: PUSH
71837: LD_INT 15
71839: PUSH
71840: LD_INT 16
71842: PUSH
71843: LD_INT 22
71845: PUSH
71846: LD_INT 23
71848: PUSH
71849: LD_INT 26
71851: PUSH
71852: LD_INT 36
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: LIST
71859: LIST
71860: LIST
71861: LIST
71862: LIST
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: PUSH
71869: LD_INT 101
71871: PUSH
71872: LD_INT 102
71874: PUSH
71875: LD_INT 105
71877: PUSH
71878: LD_INT 106
71880: PUSH
71881: LD_INT 108
71883: PUSH
71884: EMPTY
71885: LIST
71886: LIST
71887: LIST
71888: LIST
71889: LIST
71890: PUSH
71891: EMPTY
71892: LIST
71893: LIST
71894: ST_TO_ADDR
71895: GO 74498
71897: LD_INT 5
71899: DOUBLE
71900: EQUAL
71901: IFTRUE 71905
71903: GO 72005
71905: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
71906: LD_ADDR_VAR 0 1
71910: PUSH
71911: LD_INT 2
71913: PUSH
71914: LD_INT 4
71916: PUSH
71917: LD_INT 5
71919: PUSH
71920: LD_INT 6
71922: PUSH
71923: LD_INT 8
71925: PUSH
71926: LD_INT 11
71928: PUSH
71929: LD_INT 12
71931: PUSH
71932: LD_INT 15
71934: PUSH
71935: LD_INT 16
71937: PUSH
71938: LD_INT 22
71940: PUSH
71941: LD_INT 23
71943: PUSH
71944: LD_INT 25
71946: PUSH
71947: LD_INT 26
71949: PUSH
71950: LD_INT 36
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: LIST
71968: PUSH
71969: LD_INT 101
71971: PUSH
71972: LD_INT 102
71974: PUSH
71975: LD_INT 105
71977: PUSH
71978: LD_INT 106
71980: PUSH
71981: LD_INT 108
71983: PUSH
71984: LD_INT 109
71986: PUSH
71987: LD_INT 112
71989: PUSH
71990: EMPTY
71991: LIST
71992: LIST
71993: LIST
71994: LIST
71995: LIST
71996: LIST
71997: LIST
71998: PUSH
71999: EMPTY
72000: LIST
72001: LIST
72002: ST_TO_ADDR
72003: GO 74498
72005: LD_INT 6
72007: DOUBLE
72008: EQUAL
72009: IFTRUE 72013
72011: GO 72133
72013: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
72014: LD_ADDR_VAR 0 1
72018: PUSH
72019: LD_INT 2
72021: PUSH
72022: LD_INT 4
72024: PUSH
72025: LD_INT 5
72027: PUSH
72028: LD_INT 6
72030: PUSH
72031: LD_INT 8
72033: PUSH
72034: LD_INT 11
72036: PUSH
72037: LD_INT 12
72039: PUSH
72040: LD_INT 15
72042: PUSH
72043: LD_INT 16
72045: PUSH
72046: LD_INT 20
72048: PUSH
72049: LD_INT 21
72051: PUSH
72052: LD_INT 22
72054: PUSH
72055: LD_INT 23
72057: PUSH
72058: LD_INT 25
72060: PUSH
72061: LD_INT 26
72063: PUSH
72064: LD_INT 30
72066: PUSH
72067: LD_INT 31
72069: PUSH
72070: LD_INT 32
72072: PUSH
72073: LD_INT 36
72075: PUSH
72076: EMPTY
72077: LIST
72078: LIST
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: LIST
72089: LIST
72090: LIST
72091: LIST
72092: LIST
72093: LIST
72094: LIST
72095: LIST
72096: PUSH
72097: LD_INT 101
72099: PUSH
72100: LD_INT 102
72102: PUSH
72103: LD_INT 105
72105: PUSH
72106: LD_INT 106
72108: PUSH
72109: LD_INT 108
72111: PUSH
72112: LD_INT 109
72114: PUSH
72115: LD_INT 112
72117: PUSH
72118: EMPTY
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: ST_TO_ADDR
72131: GO 74498
72133: LD_INT 7
72135: DOUBLE
72136: EQUAL
72137: IFTRUE 72141
72139: GO 72241
72141: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
72142: LD_ADDR_VAR 0 1
72146: PUSH
72147: LD_INT 2
72149: PUSH
72150: LD_INT 4
72152: PUSH
72153: LD_INT 5
72155: PUSH
72156: LD_INT 7
72158: PUSH
72159: LD_INT 11
72161: PUSH
72162: LD_INT 12
72164: PUSH
72165: LD_INT 15
72167: PUSH
72168: LD_INT 16
72170: PUSH
72171: LD_INT 20
72173: PUSH
72174: LD_INT 21
72176: PUSH
72177: LD_INT 22
72179: PUSH
72180: LD_INT 23
72182: PUSH
72183: LD_INT 25
72185: PUSH
72186: LD_INT 26
72188: PUSH
72189: EMPTY
72190: LIST
72191: LIST
72192: LIST
72193: LIST
72194: LIST
72195: LIST
72196: LIST
72197: LIST
72198: LIST
72199: LIST
72200: LIST
72201: LIST
72202: LIST
72203: LIST
72204: PUSH
72205: LD_INT 101
72207: PUSH
72208: LD_INT 102
72210: PUSH
72211: LD_INT 103
72213: PUSH
72214: LD_INT 105
72216: PUSH
72217: LD_INT 106
72219: PUSH
72220: LD_INT 108
72222: PUSH
72223: LD_INT 112
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: LIST
72230: LIST
72231: LIST
72232: LIST
72233: LIST
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: ST_TO_ADDR
72239: GO 74498
72241: LD_INT 8
72243: DOUBLE
72244: EQUAL
72245: IFTRUE 72249
72247: GO 72377
72249: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
72250: LD_ADDR_VAR 0 1
72254: PUSH
72255: LD_INT 2
72257: PUSH
72258: LD_INT 4
72260: PUSH
72261: LD_INT 5
72263: PUSH
72264: LD_INT 6
72266: PUSH
72267: LD_INT 7
72269: PUSH
72270: LD_INT 8
72272: PUSH
72273: LD_INT 11
72275: PUSH
72276: LD_INT 12
72278: PUSH
72279: LD_INT 15
72281: PUSH
72282: LD_INT 16
72284: PUSH
72285: LD_INT 20
72287: PUSH
72288: LD_INT 21
72290: PUSH
72291: LD_INT 22
72293: PUSH
72294: LD_INT 23
72296: PUSH
72297: LD_INT 25
72299: PUSH
72300: LD_INT 26
72302: PUSH
72303: LD_INT 30
72305: PUSH
72306: LD_INT 31
72308: PUSH
72309: LD_INT 32
72311: PUSH
72312: LD_INT 36
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: LIST
72319: LIST
72320: LIST
72321: LIST
72322: LIST
72323: LIST
72324: LIST
72325: LIST
72326: LIST
72327: LIST
72328: LIST
72329: LIST
72330: LIST
72331: LIST
72332: LIST
72333: LIST
72334: LIST
72335: LIST
72336: PUSH
72337: LD_INT 101
72339: PUSH
72340: LD_INT 102
72342: PUSH
72343: LD_INT 103
72345: PUSH
72346: LD_INT 105
72348: PUSH
72349: LD_INT 106
72351: PUSH
72352: LD_INT 108
72354: PUSH
72355: LD_INT 109
72357: PUSH
72358: LD_INT 112
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: LIST
72365: LIST
72366: LIST
72367: LIST
72368: LIST
72369: LIST
72370: PUSH
72371: EMPTY
72372: LIST
72373: LIST
72374: ST_TO_ADDR
72375: GO 74498
72377: LD_INT 9
72379: DOUBLE
72380: EQUAL
72381: IFTRUE 72385
72383: GO 72521
72385: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
72386: LD_ADDR_VAR 0 1
72390: PUSH
72391: LD_INT 2
72393: PUSH
72394: LD_INT 4
72396: PUSH
72397: LD_INT 5
72399: PUSH
72400: LD_INT 6
72402: PUSH
72403: LD_INT 7
72405: PUSH
72406: LD_INT 8
72408: PUSH
72409: LD_INT 11
72411: PUSH
72412: LD_INT 12
72414: PUSH
72415: LD_INT 15
72417: PUSH
72418: LD_INT 16
72420: PUSH
72421: LD_INT 20
72423: PUSH
72424: LD_INT 21
72426: PUSH
72427: LD_INT 22
72429: PUSH
72430: LD_INT 23
72432: PUSH
72433: LD_INT 25
72435: PUSH
72436: LD_INT 26
72438: PUSH
72439: LD_INT 28
72441: PUSH
72442: LD_INT 30
72444: PUSH
72445: LD_INT 31
72447: PUSH
72448: LD_INT 32
72450: PUSH
72451: LD_INT 36
72453: PUSH
72454: EMPTY
72455: LIST
72456: LIST
72457: LIST
72458: LIST
72459: LIST
72460: LIST
72461: LIST
72462: LIST
72463: LIST
72464: LIST
72465: LIST
72466: LIST
72467: LIST
72468: LIST
72469: LIST
72470: LIST
72471: LIST
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: PUSH
72477: LD_INT 101
72479: PUSH
72480: LD_INT 102
72482: PUSH
72483: LD_INT 103
72485: PUSH
72486: LD_INT 105
72488: PUSH
72489: LD_INT 106
72491: PUSH
72492: LD_INT 108
72494: PUSH
72495: LD_INT 109
72497: PUSH
72498: LD_INT 112
72500: PUSH
72501: LD_INT 114
72503: PUSH
72504: EMPTY
72505: LIST
72506: LIST
72507: LIST
72508: LIST
72509: LIST
72510: LIST
72511: LIST
72512: LIST
72513: LIST
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: ST_TO_ADDR
72519: GO 74498
72521: LD_INT 10
72523: DOUBLE
72524: EQUAL
72525: IFTRUE 72529
72527: GO 72713
72529: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
72530: LD_ADDR_VAR 0 1
72534: PUSH
72535: LD_INT 2
72537: PUSH
72538: LD_INT 4
72540: PUSH
72541: LD_INT 5
72543: PUSH
72544: LD_INT 6
72546: PUSH
72547: LD_INT 7
72549: PUSH
72550: LD_INT 8
72552: PUSH
72553: LD_INT 9
72555: PUSH
72556: LD_INT 10
72558: PUSH
72559: LD_INT 11
72561: PUSH
72562: LD_INT 12
72564: PUSH
72565: LD_INT 13
72567: PUSH
72568: LD_INT 14
72570: PUSH
72571: LD_INT 15
72573: PUSH
72574: LD_INT 16
72576: PUSH
72577: LD_INT 17
72579: PUSH
72580: LD_INT 18
72582: PUSH
72583: LD_INT 19
72585: PUSH
72586: LD_INT 20
72588: PUSH
72589: LD_INT 21
72591: PUSH
72592: LD_INT 22
72594: PUSH
72595: LD_INT 23
72597: PUSH
72598: LD_INT 24
72600: PUSH
72601: LD_INT 25
72603: PUSH
72604: LD_INT 26
72606: PUSH
72607: LD_INT 28
72609: PUSH
72610: LD_INT 30
72612: PUSH
72613: LD_INT 31
72615: PUSH
72616: LD_INT 32
72618: PUSH
72619: LD_INT 36
72621: PUSH
72622: EMPTY
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: LIST
72630: LIST
72631: LIST
72632: LIST
72633: LIST
72634: LIST
72635: LIST
72636: LIST
72637: LIST
72638: LIST
72639: LIST
72640: LIST
72641: LIST
72642: LIST
72643: LIST
72644: LIST
72645: LIST
72646: LIST
72647: LIST
72648: LIST
72649: LIST
72650: LIST
72651: LIST
72652: PUSH
72653: LD_INT 101
72655: PUSH
72656: LD_INT 102
72658: PUSH
72659: LD_INT 103
72661: PUSH
72662: LD_INT 104
72664: PUSH
72665: LD_INT 105
72667: PUSH
72668: LD_INT 106
72670: PUSH
72671: LD_INT 107
72673: PUSH
72674: LD_INT 108
72676: PUSH
72677: LD_INT 109
72679: PUSH
72680: LD_INT 110
72682: PUSH
72683: LD_INT 111
72685: PUSH
72686: LD_INT 112
72688: PUSH
72689: LD_INT 114
72691: PUSH
72692: EMPTY
72693: LIST
72694: LIST
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: LIST
72701: LIST
72702: LIST
72703: LIST
72704: LIST
72705: LIST
72706: PUSH
72707: EMPTY
72708: LIST
72709: LIST
72710: ST_TO_ADDR
72711: GO 74498
72713: LD_INT 11
72715: DOUBLE
72716: EQUAL
72717: IFTRUE 72721
72719: GO 72913
72721: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
72722: LD_ADDR_VAR 0 1
72726: PUSH
72727: LD_INT 2
72729: PUSH
72730: LD_INT 3
72732: PUSH
72733: LD_INT 4
72735: PUSH
72736: LD_INT 5
72738: PUSH
72739: LD_INT 6
72741: PUSH
72742: LD_INT 7
72744: PUSH
72745: LD_INT 8
72747: PUSH
72748: LD_INT 9
72750: PUSH
72751: LD_INT 10
72753: PUSH
72754: LD_INT 11
72756: PUSH
72757: LD_INT 12
72759: PUSH
72760: LD_INT 13
72762: PUSH
72763: LD_INT 14
72765: PUSH
72766: LD_INT 15
72768: PUSH
72769: LD_INT 16
72771: PUSH
72772: LD_INT 17
72774: PUSH
72775: LD_INT 18
72777: PUSH
72778: LD_INT 19
72780: PUSH
72781: LD_INT 20
72783: PUSH
72784: LD_INT 21
72786: PUSH
72787: LD_INT 22
72789: PUSH
72790: LD_INT 23
72792: PUSH
72793: LD_INT 24
72795: PUSH
72796: LD_INT 25
72798: PUSH
72799: LD_INT 26
72801: PUSH
72802: LD_INT 28
72804: PUSH
72805: LD_INT 30
72807: PUSH
72808: LD_INT 31
72810: PUSH
72811: LD_INT 32
72813: PUSH
72814: LD_INT 34
72816: PUSH
72817: LD_INT 36
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: LIST
72824: LIST
72825: LIST
72826: LIST
72827: LIST
72828: LIST
72829: LIST
72830: LIST
72831: LIST
72832: LIST
72833: LIST
72834: LIST
72835: LIST
72836: LIST
72837: LIST
72838: LIST
72839: LIST
72840: LIST
72841: LIST
72842: LIST
72843: LIST
72844: LIST
72845: LIST
72846: LIST
72847: LIST
72848: LIST
72849: LIST
72850: LIST
72851: LIST
72852: PUSH
72853: LD_INT 101
72855: PUSH
72856: LD_INT 102
72858: PUSH
72859: LD_INT 103
72861: PUSH
72862: LD_INT 104
72864: PUSH
72865: LD_INT 105
72867: PUSH
72868: LD_INT 106
72870: PUSH
72871: LD_INT 107
72873: PUSH
72874: LD_INT 108
72876: PUSH
72877: LD_INT 109
72879: PUSH
72880: LD_INT 110
72882: PUSH
72883: LD_INT 111
72885: PUSH
72886: LD_INT 112
72888: PUSH
72889: LD_INT 114
72891: PUSH
72892: EMPTY
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: LIST
72898: LIST
72899: LIST
72900: LIST
72901: LIST
72902: LIST
72903: LIST
72904: LIST
72905: LIST
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: ST_TO_ADDR
72911: GO 74498
72913: LD_INT 12
72915: DOUBLE
72916: EQUAL
72917: IFTRUE 72921
72919: GO 73129
72921: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
72922: LD_ADDR_VAR 0 1
72926: PUSH
72927: LD_INT 1
72929: PUSH
72930: LD_INT 2
72932: PUSH
72933: LD_INT 3
72935: PUSH
72936: LD_INT 4
72938: PUSH
72939: LD_INT 5
72941: PUSH
72942: LD_INT 6
72944: PUSH
72945: LD_INT 7
72947: PUSH
72948: LD_INT 8
72950: PUSH
72951: LD_INT 9
72953: PUSH
72954: LD_INT 10
72956: PUSH
72957: LD_INT 11
72959: PUSH
72960: LD_INT 12
72962: PUSH
72963: LD_INT 13
72965: PUSH
72966: LD_INT 14
72968: PUSH
72969: LD_INT 15
72971: PUSH
72972: LD_INT 16
72974: PUSH
72975: LD_INT 17
72977: PUSH
72978: LD_INT 18
72980: PUSH
72981: LD_INT 19
72983: PUSH
72984: LD_INT 20
72986: PUSH
72987: LD_INT 21
72989: PUSH
72990: LD_INT 22
72992: PUSH
72993: LD_INT 23
72995: PUSH
72996: LD_INT 24
72998: PUSH
72999: LD_INT 25
73001: PUSH
73002: LD_INT 26
73004: PUSH
73005: LD_INT 27
73007: PUSH
73008: LD_INT 28
73010: PUSH
73011: LD_INT 30
73013: PUSH
73014: LD_INT 31
73016: PUSH
73017: LD_INT 32
73019: PUSH
73020: LD_INT 33
73022: PUSH
73023: LD_INT 34
73025: PUSH
73026: LD_INT 36
73028: PUSH
73029: EMPTY
73030: LIST
73031: LIST
73032: LIST
73033: LIST
73034: LIST
73035: LIST
73036: LIST
73037: LIST
73038: LIST
73039: LIST
73040: LIST
73041: LIST
73042: LIST
73043: LIST
73044: LIST
73045: LIST
73046: LIST
73047: LIST
73048: LIST
73049: LIST
73050: LIST
73051: LIST
73052: LIST
73053: LIST
73054: LIST
73055: LIST
73056: LIST
73057: LIST
73058: LIST
73059: LIST
73060: LIST
73061: LIST
73062: LIST
73063: LIST
73064: PUSH
73065: LD_INT 101
73067: PUSH
73068: LD_INT 102
73070: PUSH
73071: LD_INT 103
73073: PUSH
73074: LD_INT 104
73076: PUSH
73077: LD_INT 105
73079: PUSH
73080: LD_INT 106
73082: PUSH
73083: LD_INT 107
73085: PUSH
73086: LD_INT 108
73088: PUSH
73089: LD_INT 109
73091: PUSH
73092: LD_INT 110
73094: PUSH
73095: LD_INT 111
73097: PUSH
73098: LD_INT 112
73100: PUSH
73101: LD_INT 113
73103: PUSH
73104: LD_INT 114
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: LIST
73111: LIST
73112: LIST
73113: LIST
73114: LIST
73115: LIST
73116: LIST
73117: LIST
73118: LIST
73119: LIST
73120: LIST
73121: LIST
73122: PUSH
73123: EMPTY
73124: LIST
73125: LIST
73126: ST_TO_ADDR
73127: GO 74498
73129: LD_INT 13
73131: DOUBLE
73132: EQUAL
73133: IFTRUE 73137
73135: GO 73333
73137: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
73138: LD_ADDR_VAR 0 1
73142: PUSH
73143: LD_INT 1
73145: PUSH
73146: LD_INT 2
73148: PUSH
73149: LD_INT 3
73151: PUSH
73152: LD_INT 4
73154: PUSH
73155: LD_INT 5
73157: PUSH
73158: LD_INT 8
73160: PUSH
73161: LD_INT 9
73163: PUSH
73164: LD_INT 10
73166: PUSH
73167: LD_INT 11
73169: PUSH
73170: LD_INT 12
73172: PUSH
73173: LD_INT 14
73175: PUSH
73176: LD_INT 15
73178: PUSH
73179: LD_INT 16
73181: PUSH
73182: LD_INT 17
73184: PUSH
73185: LD_INT 18
73187: PUSH
73188: LD_INT 19
73190: PUSH
73191: LD_INT 20
73193: PUSH
73194: LD_INT 21
73196: PUSH
73197: LD_INT 22
73199: PUSH
73200: LD_INT 23
73202: PUSH
73203: LD_INT 24
73205: PUSH
73206: LD_INT 25
73208: PUSH
73209: LD_INT 26
73211: PUSH
73212: LD_INT 27
73214: PUSH
73215: LD_INT 28
73217: PUSH
73218: LD_INT 30
73220: PUSH
73221: LD_INT 31
73223: PUSH
73224: LD_INT 32
73226: PUSH
73227: LD_INT 33
73229: PUSH
73230: LD_INT 34
73232: PUSH
73233: LD_INT 36
73235: PUSH
73236: EMPTY
73237: LIST
73238: LIST
73239: LIST
73240: LIST
73241: LIST
73242: LIST
73243: LIST
73244: LIST
73245: LIST
73246: LIST
73247: LIST
73248: LIST
73249: LIST
73250: LIST
73251: LIST
73252: LIST
73253: LIST
73254: LIST
73255: LIST
73256: LIST
73257: LIST
73258: LIST
73259: LIST
73260: LIST
73261: LIST
73262: LIST
73263: LIST
73264: LIST
73265: LIST
73266: LIST
73267: LIST
73268: PUSH
73269: LD_INT 101
73271: PUSH
73272: LD_INT 102
73274: PUSH
73275: LD_INT 103
73277: PUSH
73278: LD_INT 104
73280: PUSH
73281: LD_INT 105
73283: PUSH
73284: LD_INT 106
73286: PUSH
73287: LD_INT 107
73289: PUSH
73290: LD_INT 108
73292: PUSH
73293: LD_INT 109
73295: PUSH
73296: LD_INT 110
73298: PUSH
73299: LD_INT 111
73301: PUSH
73302: LD_INT 112
73304: PUSH
73305: LD_INT 113
73307: PUSH
73308: LD_INT 114
73310: PUSH
73311: EMPTY
73312: LIST
73313: LIST
73314: LIST
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: PUSH
73327: EMPTY
73328: LIST
73329: LIST
73330: ST_TO_ADDR
73331: GO 74498
73333: LD_INT 14
73335: DOUBLE
73336: EQUAL
73337: IFTRUE 73341
73339: GO 73553
73341: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
73342: LD_ADDR_VAR 0 1
73346: PUSH
73347: LD_INT 1
73349: PUSH
73350: LD_INT 2
73352: PUSH
73353: LD_INT 3
73355: PUSH
73356: LD_INT 4
73358: PUSH
73359: LD_INT 5
73361: PUSH
73362: LD_INT 6
73364: PUSH
73365: LD_INT 7
73367: PUSH
73368: LD_INT 8
73370: PUSH
73371: LD_INT 9
73373: PUSH
73374: LD_INT 10
73376: PUSH
73377: LD_INT 11
73379: PUSH
73380: LD_INT 12
73382: PUSH
73383: LD_INT 13
73385: PUSH
73386: LD_INT 14
73388: PUSH
73389: LD_INT 15
73391: PUSH
73392: LD_INT 16
73394: PUSH
73395: LD_INT 17
73397: PUSH
73398: LD_INT 18
73400: PUSH
73401: LD_INT 19
73403: PUSH
73404: LD_INT 20
73406: PUSH
73407: LD_INT 21
73409: PUSH
73410: LD_INT 22
73412: PUSH
73413: LD_INT 23
73415: PUSH
73416: LD_INT 24
73418: PUSH
73419: LD_INT 25
73421: PUSH
73422: LD_INT 26
73424: PUSH
73425: LD_INT 27
73427: PUSH
73428: LD_INT 28
73430: PUSH
73431: LD_INT 29
73433: PUSH
73434: LD_INT 30
73436: PUSH
73437: LD_INT 31
73439: PUSH
73440: LD_INT 32
73442: PUSH
73443: LD_INT 33
73445: PUSH
73446: LD_INT 34
73448: PUSH
73449: LD_INT 36
73451: PUSH
73452: EMPTY
73453: LIST
73454: LIST
73455: LIST
73456: LIST
73457: LIST
73458: LIST
73459: LIST
73460: LIST
73461: LIST
73462: LIST
73463: LIST
73464: LIST
73465: LIST
73466: LIST
73467: LIST
73468: LIST
73469: LIST
73470: LIST
73471: LIST
73472: LIST
73473: LIST
73474: LIST
73475: LIST
73476: LIST
73477: LIST
73478: LIST
73479: LIST
73480: LIST
73481: LIST
73482: LIST
73483: LIST
73484: LIST
73485: LIST
73486: LIST
73487: LIST
73488: PUSH
73489: LD_INT 101
73491: PUSH
73492: LD_INT 102
73494: PUSH
73495: LD_INT 103
73497: PUSH
73498: LD_INT 104
73500: PUSH
73501: LD_INT 105
73503: PUSH
73504: LD_INT 106
73506: PUSH
73507: LD_INT 107
73509: PUSH
73510: LD_INT 108
73512: PUSH
73513: LD_INT 109
73515: PUSH
73516: LD_INT 110
73518: PUSH
73519: LD_INT 111
73521: PUSH
73522: LD_INT 112
73524: PUSH
73525: LD_INT 113
73527: PUSH
73528: LD_INT 114
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: LIST
73535: LIST
73536: LIST
73537: LIST
73538: LIST
73539: LIST
73540: LIST
73541: LIST
73542: LIST
73543: LIST
73544: LIST
73545: LIST
73546: PUSH
73547: EMPTY
73548: LIST
73549: LIST
73550: ST_TO_ADDR
73551: GO 74498
73553: LD_INT 15
73555: DOUBLE
73556: EQUAL
73557: IFTRUE 73561
73559: GO 73773
73561: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
73562: LD_ADDR_VAR 0 1
73566: PUSH
73567: LD_INT 1
73569: PUSH
73570: LD_INT 2
73572: PUSH
73573: LD_INT 3
73575: PUSH
73576: LD_INT 4
73578: PUSH
73579: LD_INT 5
73581: PUSH
73582: LD_INT 6
73584: PUSH
73585: LD_INT 7
73587: PUSH
73588: LD_INT 8
73590: PUSH
73591: LD_INT 9
73593: PUSH
73594: LD_INT 10
73596: PUSH
73597: LD_INT 11
73599: PUSH
73600: LD_INT 12
73602: PUSH
73603: LD_INT 13
73605: PUSH
73606: LD_INT 14
73608: PUSH
73609: LD_INT 15
73611: PUSH
73612: LD_INT 16
73614: PUSH
73615: LD_INT 17
73617: PUSH
73618: LD_INT 18
73620: PUSH
73621: LD_INT 19
73623: PUSH
73624: LD_INT 20
73626: PUSH
73627: LD_INT 21
73629: PUSH
73630: LD_INT 22
73632: PUSH
73633: LD_INT 23
73635: PUSH
73636: LD_INT 24
73638: PUSH
73639: LD_INT 25
73641: PUSH
73642: LD_INT 26
73644: PUSH
73645: LD_INT 27
73647: PUSH
73648: LD_INT 28
73650: PUSH
73651: LD_INT 29
73653: PUSH
73654: LD_INT 30
73656: PUSH
73657: LD_INT 31
73659: PUSH
73660: LD_INT 32
73662: PUSH
73663: LD_INT 33
73665: PUSH
73666: LD_INT 34
73668: PUSH
73669: LD_INT 36
73671: PUSH
73672: EMPTY
73673: LIST
73674: LIST
73675: LIST
73676: LIST
73677: LIST
73678: LIST
73679: LIST
73680: LIST
73681: LIST
73682: LIST
73683: LIST
73684: LIST
73685: LIST
73686: LIST
73687: LIST
73688: LIST
73689: LIST
73690: LIST
73691: LIST
73692: LIST
73693: LIST
73694: LIST
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: LIST
73701: LIST
73702: LIST
73703: LIST
73704: LIST
73705: LIST
73706: LIST
73707: LIST
73708: PUSH
73709: LD_INT 101
73711: PUSH
73712: LD_INT 102
73714: PUSH
73715: LD_INT 103
73717: PUSH
73718: LD_INT 104
73720: PUSH
73721: LD_INT 105
73723: PUSH
73724: LD_INT 106
73726: PUSH
73727: LD_INT 107
73729: PUSH
73730: LD_INT 108
73732: PUSH
73733: LD_INT 109
73735: PUSH
73736: LD_INT 110
73738: PUSH
73739: LD_INT 111
73741: PUSH
73742: LD_INT 112
73744: PUSH
73745: LD_INT 113
73747: PUSH
73748: LD_INT 114
73750: PUSH
73751: EMPTY
73752: LIST
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: LIST
73759: LIST
73760: LIST
73761: LIST
73762: LIST
73763: LIST
73764: LIST
73765: LIST
73766: PUSH
73767: EMPTY
73768: LIST
73769: LIST
73770: ST_TO_ADDR
73771: GO 74498
73773: LD_INT 16
73775: DOUBLE
73776: EQUAL
73777: IFTRUE 73781
73779: GO 73905
73781: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
73782: LD_ADDR_VAR 0 1
73786: PUSH
73787: LD_INT 2
73789: PUSH
73790: LD_INT 4
73792: PUSH
73793: LD_INT 5
73795: PUSH
73796: LD_INT 7
73798: PUSH
73799: LD_INT 11
73801: PUSH
73802: LD_INT 12
73804: PUSH
73805: LD_INT 15
73807: PUSH
73808: LD_INT 16
73810: PUSH
73811: LD_INT 20
73813: PUSH
73814: LD_INT 21
73816: PUSH
73817: LD_INT 22
73819: PUSH
73820: LD_INT 23
73822: PUSH
73823: LD_INT 25
73825: PUSH
73826: LD_INT 26
73828: PUSH
73829: LD_INT 30
73831: PUSH
73832: LD_INT 31
73834: PUSH
73835: LD_INT 32
73837: PUSH
73838: LD_INT 33
73840: PUSH
73841: LD_INT 34
73843: PUSH
73844: EMPTY
73845: LIST
73846: LIST
73847: LIST
73848: LIST
73849: LIST
73850: LIST
73851: LIST
73852: LIST
73853: LIST
73854: LIST
73855: LIST
73856: LIST
73857: LIST
73858: LIST
73859: LIST
73860: LIST
73861: LIST
73862: LIST
73863: LIST
73864: PUSH
73865: LD_INT 101
73867: PUSH
73868: LD_INT 102
73870: PUSH
73871: LD_INT 103
73873: PUSH
73874: LD_INT 106
73876: PUSH
73877: LD_INT 108
73879: PUSH
73880: LD_INT 112
73882: PUSH
73883: LD_INT 113
73885: PUSH
73886: LD_INT 114
73888: PUSH
73889: EMPTY
73890: LIST
73891: LIST
73892: LIST
73893: LIST
73894: LIST
73895: LIST
73896: LIST
73897: LIST
73898: PUSH
73899: EMPTY
73900: LIST
73901: LIST
73902: ST_TO_ADDR
73903: GO 74498
73905: LD_INT 17
73907: DOUBLE
73908: EQUAL
73909: IFTRUE 73913
73911: GO 74125
73913: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
73914: LD_ADDR_VAR 0 1
73918: PUSH
73919: LD_INT 1
73921: PUSH
73922: LD_INT 2
73924: PUSH
73925: LD_INT 3
73927: PUSH
73928: LD_INT 4
73930: PUSH
73931: LD_INT 5
73933: PUSH
73934: LD_INT 6
73936: PUSH
73937: LD_INT 7
73939: PUSH
73940: LD_INT 8
73942: PUSH
73943: LD_INT 9
73945: PUSH
73946: LD_INT 10
73948: PUSH
73949: LD_INT 11
73951: PUSH
73952: LD_INT 12
73954: PUSH
73955: LD_INT 13
73957: PUSH
73958: LD_INT 14
73960: PUSH
73961: LD_INT 15
73963: PUSH
73964: LD_INT 16
73966: PUSH
73967: LD_INT 17
73969: PUSH
73970: LD_INT 18
73972: PUSH
73973: LD_INT 19
73975: PUSH
73976: LD_INT 20
73978: PUSH
73979: LD_INT 21
73981: PUSH
73982: LD_INT 22
73984: PUSH
73985: LD_INT 23
73987: PUSH
73988: LD_INT 24
73990: PUSH
73991: LD_INT 25
73993: PUSH
73994: LD_INT 26
73996: PUSH
73997: LD_INT 27
73999: PUSH
74000: LD_INT 28
74002: PUSH
74003: LD_INT 29
74005: PUSH
74006: LD_INT 30
74008: PUSH
74009: LD_INT 31
74011: PUSH
74012: LD_INT 32
74014: PUSH
74015: LD_INT 33
74017: PUSH
74018: LD_INT 34
74020: PUSH
74021: LD_INT 36
74023: PUSH
74024: EMPTY
74025: LIST
74026: LIST
74027: LIST
74028: LIST
74029: LIST
74030: LIST
74031: LIST
74032: LIST
74033: LIST
74034: LIST
74035: LIST
74036: LIST
74037: LIST
74038: LIST
74039: LIST
74040: LIST
74041: LIST
74042: LIST
74043: LIST
74044: LIST
74045: LIST
74046: LIST
74047: LIST
74048: LIST
74049: LIST
74050: LIST
74051: LIST
74052: LIST
74053: LIST
74054: LIST
74055: LIST
74056: LIST
74057: LIST
74058: LIST
74059: LIST
74060: PUSH
74061: LD_INT 101
74063: PUSH
74064: LD_INT 102
74066: PUSH
74067: LD_INT 103
74069: PUSH
74070: LD_INT 104
74072: PUSH
74073: LD_INT 105
74075: PUSH
74076: LD_INT 106
74078: PUSH
74079: LD_INT 107
74081: PUSH
74082: LD_INT 108
74084: PUSH
74085: LD_INT 109
74087: PUSH
74088: LD_INT 110
74090: PUSH
74091: LD_INT 111
74093: PUSH
74094: LD_INT 112
74096: PUSH
74097: LD_INT 113
74099: PUSH
74100: LD_INT 114
74102: PUSH
74103: EMPTY
74104: LIST
74105: LIST
74106: LIST
74107: LIST
74108: LIST
74109: LIST
74110: LIST
74111: LIST
74112: LIST
74113: LIST
74114: LIST
74115: LIST
74116: LIST
74117: LIST
74118: PUSH
74119: EMPTY
74120: LIST
74121: LIST
74122: ST_TO_ADDR
74123: GO 74498
74125: LD_INT 18
74127: DOUBLE
74128: EQUAL
74129: IFTRUE 74133
74131: GO 74269
74133: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
74134: LD_ADDR_VAR 0 1
74138: PUSH
74139: LD_INT 2
74141: PUSH
74142: LD_INT 4
74144: PUSH
74145: LD_INT 5
74147: PUSH
74148: LD_INT 7
74150: PUSH
74151: LD_INT 11
74153: PUSH
74154: LD_INT 12
74156: PUSH
74157: LD_INT 15
74159: PUSH
74160: LD_INT 16
74162: PUSH
74163: LD_INT 20
74165: PUSH
74166: LD_INT 21
74168: PUSH
74169: LD_INT 22
74171: PUSH
74172: LD_INT 23
74174: PUSH
74175: LD_INT 25
74177: PUSH
74178: LD_INT 26
74180: PUSH
74181: LD_INT 30
74183: PUSH
74184: LD_INT 31
74186: PUSH
74187: LD_INT 32
74189: PUSH
74190: LD_INT 33
74192: PUSH
74193: LD_INT 34
74195: PUSH
74196: LD_INT 35
74198: PUSH
74199: LD_INT 36
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: LIST
74206: LIST
74207: LIST
74208: LIST
74209: LIST
74210: LIST
74211: LIST
74212: LIST
74213: LIST
74214: LIST
74215: LIST
74216: LIST
74217: LIST
74218: LIST
74219: LIST
74220: LIST
74221: LIST
74222: LIST
74223: LIST
74224: PUSH
74225: LD_INT 101
74227: PUSH
74228: LD_INT 102
74230: PUSH
74231: LD_INT 103
74233: PUSH
74234: LD_INT 106
74236: PUSH
74237: LD_INT 108
74239: PUSH
74240: LD_INT 112
74242: PUSH
74243: LD_INT 113
74245: PUSH
74246: LD_INT 114
74248: PUSH
74249: LD_INT 115
74251: PUSH
74252: EMPTY
74253: LIST
74254: LIST
74255: LIST
74256: LIST
74257: LIST
74258: LIST
74259: LIST
74260: LIST
74261: LIST
74262: PUSH
74263: EMPTY
74264: LIST
74265: LIST
74266: ST_TO_ADDR
74267: GO 74498
74269: LD_INT 19
74271: DOUBLE
74272: EQUAL
74273: IFTRUE 74277
74275: GO 74497
74277: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
74278: LD_ADDR_VAR 0 1
74282: PUSH
74283: LD_INT 1
74285: PUSH
74286: LD_INT 2
74288: PUSH
74289: LD_INT 3
74291: PUSH
74292: LD_INT 4
74294: PUSH
74295: LD_INT 5
74297: PUSH
74298: LD_INT 6
74300: PUSH
74301: LD_INT 7
74303: PUSH
74304: LD_INT 8
74306: PUSH
74307: LD_INT 9
74309: PUSH
74310: LD_INT 10
74312: PUSH
74313: LD_INT 11
74315: PUSH
74316: LD_INT 12
74318: PUSH
74319: LD_INT 13
74321: PUSH
74322: LD_INT 14
74324: PUSH
74325: LD_INT 15
74327: PUSH
74328: LD_INT 16
74330: PUSH
74331: LD_INT 17
74333: PUSH
74334: LD_INT 18
74336: PUSH
74337: LD_INT 19
74339: PUSH
74340: LD_INT 20
74342: PUSH
74343: LD_INT 21
74345: PUSH
74346: LD_INT 22
74348: PUSH
74349: LD_INT 23
74351: PUSH
74352: LD_INT 24
74354: PUSH
74355: LD_INT 25
74357: PUSH
74358: LD_INT 26
74360: PUSH
74361: LD_INT 27
74363: PUSH
74364: LD_INT 28
74366: PUSH
74367: LD_INT 29
74369: PUSH
74370: LD_INT 30
74372: PUSH
74373: LD_INT 31
74375: PUSH
74376: LD_INT 32
74378: PUSH
74379: LD_INT 33
74381: PUSH
74382: LD_INT 34
74384: PUSH
74385: LD_INT 35
74387: PUSH
74388: LD_INT 36
74390: PUSH
74391: EMPTY
74392: LIST
74393: LIST
74394: LIST
74395: LIST
74396: LIST
74397: LIST
74398: LIST
74399: LIST
74400: LIST
74401: LIST
74402: LIST
74403: LIST
74404: LIST
74405: LIST
74406: LIST
74407: LIST
74408: LIST
74409: LIST
74410: LIST
74411: LIST
74412: LIST
74413: LIST
74414: LIST
74415: LIST
74416: LIST
74417: LIST
74418: LIST
74419: LIST
74420: LIST
74421: LIST
74422: LIST
74423: LIST
74424: LIST
74425: LIST
74426: LIST
74427: LIST
74428: PUSH
74429: LD_INT 101
74431: PUSH
74432: LD_INT 102
74434: PUSH
74435: LD_INT 103
74437: PUSH
74438: LD_INT 104
74440: PUSH
74441: LD_INT 105
74443: PUSH
74444: LD_INT 106
74446: PUSH
74447: LD_INT 107
74449: PUSH
74450: LD_INT 108
74452: PUSH
74453: LD_INT 109
74455: PUSH
74456: LD_INT 110
74458: PUSH
74459: LD_INT 111
74461: PUSH
74462: LD_INT 112
74464: PUSH
74465: LD_INT 113
74467: PUSH
74468: LD_INT 114
74470: PUSH
74471: LD_INT 115
74473: PUSH
74474: EMPTY
74475: LIST
74476: LIST
74477: LIST
74478: LIST
74479: LIST
74480: LIST
74481: LIST
74482: LIST
74483: LIST
74484: LIST
74485: LIST
74486: LIST
74487: LIST
74488: LIST
74489: LIST
74490: PUSH
74491: EMPTY
74492: LIST
74493: LIST
74494: ST_TO_ADDR
74495: GO 74498
74497: POP
// end else
74498: GO 74717
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
74500: LD_ADDR_VAR 0 1
74504: PUSH
74505: LD_INT 1
74507: PUSH
74508: LD_INT 2
74510: PUSH
74511: LD_INT 3
74513: PUSH
74514: LD_INT 4
74516: PUSH
74517: LD_INT 5
74519: PUSH
74520: LD_INT 6
74522: PUSH
74523: LD_INT 7
74525: PUSH
74526: LD_INT 8
74528: PUSH
74529: LD_INT 9
74531: PUSH
74532: LD_INT 10
74534: PUSH
74535: LD_INT 11
74537: PUSH
74538: LD_INT 12
74540: PUSH
74541: LD_INT 13
74543: PUSH
74544: LD_INT 14
74546: PUSH
74547: LD_INT 15
74549: PUSH
74550: LD_INT 16
74552: PUSH
74553: LD_INT 17
74555: PUSH
74556: LD_INT 18
74558: PUSH
74559: LD_INT 19
74561: PUSH
74562: LD_INT 20
74564: PUSH
74565: LD_INT 21
74567: PUSH
74568: LD_INT 22
74570: PUSH
74571: LD_INT 23
74573: PUSH
74574: LD_INT 24
74576: PUSH
74577: LD_INT 25
74579: PUSH
74580: LD_INT 26
74582: PUSH
74583: LD_INT 27
74585: PUSH
74586: LD_INT 28
74588: PUSH
74589: LD_INT 29
74591: PUSH
74592: LD_INT 30
74594: PUSH
74595: LD_INT 31
74597: PUSH
74598: LD_INT 32
74600: PUSH
74601: LD_INT 33
74603: PUSH
74604: LD_INT 34
74606: PUSH
74607: LD_INT 35
74609: PUSH
74610: LD_INT 36
74612: PUSH
74613: EMPTY
74614: LIST
74615: LIST
74616: LIST
74617: LIST
74618: LIST
74619: LIST
74620: LIST
74621: LIST
74622: LIST
74623: LIST
74624: LIST
74625: LIST
74626: LIST
74627: LIST
74628: LIST
74629: LIST
74630: LIST
74631: LIST
74632: LIST
74633: LIST
74634: LIST
74635: LIST
74636: LIST
74637: LIST
74638: LIST
74639: LIST
74640: LIST
74641: LIST
74642: LIST
74643: LIST
74644: LIST
74645: LIST
74646: LIST
74647: LIST
74648: LIST
74649: LIST
74650: PUSH
74651: LD_INT 101
74653: PUSH
74654: LD_INT 102
74656: PUSH
74657: LD_INT 103
74659: PUSH
74660: LD_INT 104
74662: PUSH
74663: LD_INT 105
74665: PUSH
74666: LD_INT 106
74668: PUSH
74669: LD_INT 107
74671: PUSH
74672: LD_INT 108
74674: PUSH
74675: LD_INT 109
74677: PUSH
74678: LD_INT 110
74680: PUSH
74681: LD_INT 111
74683: PUSH
74684: LD_INT 112
74686: PUSH
74687: LD_INT 113
74689: PUSH
74690: LD_INT 114
74692: PUSH
74693: LD_INT 115
74695: PUSH
74696: EMPTY
74697: LIST
74698: LIST
74699: LIST
74700: LIST
74701: LIST
74702: LIST
74703: LIST
74704: LIST
74705: LIST
74706: LIST
74707: LIST
74708: LIST
74709: LIST
74710: LIST
74711: LIST
74712: PUSH
74713: EMPTY
74714: LIST
74715: LIST
74716: ST_TO_ADDR
// if result then
74717: LD_VAR 0 1
74721: IFFALSE 75010
// begin normal :=  ;
74723: LD_ADDR_VAR 0 3
74727: PUSH
74728: LD_STRING 
74730: ST_TO_ADDR
// hardcore :=  ;
74731: LD_ADDR_VAR 0 4
74735: PUSH
74736: LD_STRING 
74738: ST_TO_ADDR
// for i = 1 to normalCounter do
74739: LD_ADDR_VAR 0 5
74743: PUSH
74744: DOUBLE
74745: LD_INT 1
74747: DEC
74748: ST_TO_ADDR
74749: LD_EXP 109
74753: PUSH
74754: FOR_TO
74755: IFFALSE 74856
// begin tmp := 0 ;
74757: LD_ADDR_VAR 0 2
74761: PUSH
74762: LD_STRING 0
74764: ST_TO_ADDR
// if result [ 1 ] then
74765: LD_VAR 0 1
74769: PUSH
74770: LD_INT 1
74772: ARRAY
74773: IFFALSE 74838
// if result [ 1 ] [ 1 ] = i then
74775: LD_VAR 0 1
74779: PUSH
74780: LD_INT 1
74782: ARRAY
74783: PUSH
74784: LD_INT 1
74786: ARRAY
74787: PUSH
74788: LD_VAR 0 5
74792: EQUAL
74793: IFFALSE 74838
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
74795: LD_ADDR_VAR 0 1
74799: PUSH
74800: LD_VAR 0 1
74804: PPUSH
74805: LD_INT 1
74807: PPUSH
74808: LD_VAR 0 1
74812: PUSH
74813: LD_INT 1
74815: ARRAY
74816: PPUSH
74817: LD_INT 1
74819: PPUSH
74820: CALL_OW 3
74824: PPUSH
74825: CALL_OW 1
74829: ST_TO_ADDR
// tmp := 1 ;
74830: LD_ADDR_VAR 0 2
74834: PUSH
74835: LD_STRING 1
74837: ST_TO_ADDR
// end ; normal := normal & tmp ;
74838: LD_ADDR_VAR 0 3
74842: PUSH
74843: LD_VAR 0 3
74847: PUSH
74848: LD_VAR 0 2
74852: STR
74853: ST_TO_ADDR
// end ;
74854: GO 74754
74856: POP
74857: POP
// for i = 1 to hardcoreCounter do
74858: LD_ADDR_VAR 0 5
74862: PUSH
74863: DOUBLE
74864: LD_INT 1
74866: DEC
74867: ST_TO_ADDR
74868: LD_EXP 110
74872: PUSH
74873: FOR_TO
74874: IFFALSE 74979
// begin tmp := 0 ;
74876: LD_ADDR_VAR 0 2
74880: PUSH
74881: LD_STRING 0
74883: ST_TO_ADDR
// if result [ 2 ] then
74884: LD_VAR 0 1
74888: PUSH
74889: LD_INT 2
74891: ARRAY
74892: IFFALSE 74961
// if result [ 2 ] [ 1 ] = 100 + i then
74894: LD_VAR 0 1
74898: PUSH
74899: LD_INT 2
74901: ARRAY
74902: PUSH
74903: LD_INT 1
74905: ARRAY
74906: PUSH
74907: LD_INT 100
74909: PUSH
74910: LD_VAR 0 5
74914: PLUS
74915: EQUAL
74916: IFFALSE 74961
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
74918: LD_ADDR_VAR 0 1
74922: PUSH
74923: LD_VAR 0 1
74927: PPUSH
74928: LD_INT 2
74930: PPUSH
74931: LD_VAR 0 1
74935: PUSH
74936: LD_INT 2
74938: ARRAY
74939: PPUSH
74940: LD_INT 1
74942: PPUSH
74943: CALL_OW 3
74947: PPUSH
74948: CALL_OW 1
74952: ST_TO_ADDR
// tmp := 1 ;
74953: LD_ADDR_VAR 0 2
74957: PUSH
74958: LD_STRING 1
74960: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
74961: LD_ADDR_VAR 0 4
74965: PUSH
74966: LD_VAR 0 4
74970: PUSH
74971: LD_VAR 0 2
74975: STR
74976: ST_TO_ADDR
// end ;
74977: GO 74873
74979: POP
74980: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
74981: LD_STRING getStreamItemsFromMission("
74983: PUSH
74984: LD_VAR 0 3
74988: STR
74989: PUSH
74990: LD_STRING ","
74992: STR
74993: PUSH
74994: LD_VAR 0 4
74998: STR
74999: PUSH
75000: LD_STRING ")
75002: STR
75003: PPUSH
75004: CALL_OW 559
// end else
75008: GO 75017
// ToLua ( getStreamItemsFromMission("","") ) ;
75010: LD_STRING getStreamItemsFromMission("","")
75012: PPUSH
75013: CALL_OW 559
// end ;
75017: LD_VAR 0 1
75021: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
75022: LD_EXP 108
75026: PUSH
75027: LD_EXP 113
75031: AND
75032: IFFALSE 75156
75034: GO 75036
75036: DISABLE
75037: LD_INT 0
75039: PPUSH
75040: PPUSH
// begin enable ;
75041: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
75042: LD_ADDR_VAR 0 2
75046: PUSH
75047: LD_INT 22
75049: PUSH
75050: LD_OWVAR 2
75054: PUSH
75055: EMPTY
75056: LIST
75057: LIST
75058: PUSH
75059: LD_INT 2
75061: PUSH
75062: LD_INT 34
75064: PUSH
75065: LD_INT 7
75067: PUSH
75068: EMPTY
75069: LIST
75070: LIST
75071: PUSH
75072: LD_INT 34
75074: PUSH
75075: LD_INT 45
75077: PUSH
75078: EMPTY
75079: LIST
75080: LIST
75081: PUSH
75082: LD_INT 34
75084: PUSH
75085: LD_INT 28
75087: PUSH
75088: EMPTY
75089: LIST
75090: LIST
75091: PUSH
75092: LD_INT 34
75094: PUSH
75095: LD_INT 47
75097: PUSH
75098: EMPTY
75099: LIST
75100: LIST
75101: PUSH
75102: EMPTY
75103: LIST
75104: LIST
75105: LIST
75106: LIST
75107: LIST
75108: PUSH
75109: EMPTY
75110: LIST
75111: LIST
75112: PPUSH
75113: CALL_OW 69
75117: ST_TO_ADDR
// if not tmp then
75118: LD_VAR 0 2
75122: NOT
75123: IFFALSE 75127
// exit ;
75125: GO 75156
// for i in tmp do
75127: LD_ADDR_VAR 0 1
75131: PUSH
75132: LD_VAR 0 2
75136: PUSH
75137: FOR_IN
75138: IFFALSE 75154
// begin SetLives ( i , 0 ) ;
75140: LD_VAR 0 1
75144: PPUSH
75145: LD_INT 0
75147: PPUSH
75148: CALL_OW 234
// end ;
75152: GO 75137
75154: POP
75155: POP
// end ;
75156: PPOPN 2
75158: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
75159: LD_EXP 108
75163: PUSH
75164: LD_EXP 114
75168: AND
75169: IFFALSE 75253
75171: GO 75173
75173: DISABLE
75174: LD_INT 0
75176: PPUSH
75177: PPUSH
// begin enable ;
75178: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
75179: LD_ADDR_VAR 0 2
75183: PUSH
75184: LD_INT 22
75186: PUSH
75187: LD_OWVAR 2
75191: PUSH
75192: EMPTY
75193: LIST
75194: LIST
75195: PUSH
75196: LD_INT 32
75198: PUSH
75199: LD_INT 3
75201: PUSH
75202: EMPTY
75203: LIST
75204: LIST
75205: PUSH
75206: EMPTY
75207: LIST
75208: LIST
75209: PPUSH
75210: CALL_OW 69
75214: ST_TO_ADDR
// if not tmp then
75215: LD_VAR 0 2
75219: NOT
75220: IFFALSE 75224
// exit ;
75222: GO 75253
// for i in tmp do
75224: LD_ADDR_VAR 0 1
75228: PUSH
75229: LD_VAR 0 2
75233: PUSH
75234: FOR_IN
75235: IFFALSE 75251
// begin SetLives ( i , 0 ) ;
75237: LD_VAR 0 1
75241: PPUSH
75242: LD_INT 0
75244: PPUSH
75245: CALL_OW 234
// end ;
75249: GO 75234
75251: POP
75252: POP
// end ;
75253: PPOPN 2
75255: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
75256: LD_EXP 108
75260: PUSH
75261: LD_EXP 111
75265: AND
75266: IFFALSE 75359
75268: GO 75270
75270: DISABLE
75271: LD_INT 0
75273: PPUSH
// begin enable ;
75274: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
75275: LD_ADDR_VAR 0 1
75279: PUSH
75280: LD_INT 22
75282: PUSH
75283: LD_OWVAR 2
75287: PUSH
75288: EMPTY
75289: LIST
75290: LIST
75291: PUSH
75292: LD_INT 2
75294: PUSH
75295: LD_INT 25
75297: PUSH
75298: LD_INT 5
75300: PUSH
75301: EMPTY
75302: LIST
75303: LIST
75304: PUSH
75305: LD_INT 25
75307: PUSH
75308: LD_INT 9
75310: PUSH
75311: EMPTY
75312: LIST
75313: LIST
75314: PUSH
75315: LD_INT 25
75317: PUSH
75318: LD_INT 8
75320: PUSH
75321: EMPTY
75322: LIST
75323: LIST
75324: PUSH
75325: EMPTY
75326: LIST
75327: LIST
75328: LIST
75329: LIST
75330: PUSH
75331: EMPTY
75332: LIST
75333: LIST
75334: PPUSH
75335: CALL_OW 69
75339: PUSH
75340: FOR_IN
75341: IFFALSE 75357
// begin SetClass ( i , 1 ) ;
75343: LD_VAR 0 1
75347: PPUSH
75348: LD_INT 1
75350: PPUSH
75351: CALL_OW 336
// end ;
75355: GO 75340
75357: POP
75358: POP
// end ;
75359: PPOPN 1
75361: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
75362: LD_EXP 108
75366: PUSH
75367: LD_EXP 112
75371: AND
75372: PUSH
75373: LD_OWVAR 65
75377: PUSH
75378: LD_INT 7
75380: LESS
75381: AND
75382: IFFALSE 75396
75384: GO 75386
75386: DISABLE
// begin enable ;
75387: ENABLE
// game_speed := 7 ;
75388: LD_ADDR_OWVAR 65
75392: PUSH
75393: LD_INT 7
75395: ST_TO_ADDR
// end ;
75396: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
75397: LD_EXP 108
75401: PUSH
75402: LD_EXP 115
75406: AND
75407: IFFALSE 75609
75409: GO 75411
75411: DISABLE
75412: LD_INT 0
75414: PPUSH
75415: PPUSH
75416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
75417: LD_ADDR_VAR 0 3
75421: PUSH
75422: LD_INT 81
75424: PUSH
75425: LD_OWVAR 2
75429: PUSH
75430: EMPTY
75431: LIST
75432: LIST
75433: PUSH
75434: LD_INT 21
75436: PUSH
75437: LD_INT 1
75439: PUSH
75440: EMPTY
75441: LIST
75442: LIST
75443: PUSH
75444: EMPTY
75445: LIST
75446: LIST
75447: PPUSH
75448: CALL_OW 69
75452: ST_TO_ADDR
// if not tmp then
75453: LD_VAR 0 3
75457: NOT
75458: IFFALSE 75462
// exit ;
75460: GO 75609
// if tmp > 5 then
75462: LD_VAR 0 3
75466: PUSH
75467: LD_INT 5
75469: GREATER
75470: IFFALSE 75482
// k := 5 else
75472: LD_ADDR_VAR 0 2
75476: PUSH
75477: LD_INT 5
75479: ST_TO_ADDR
75480: GO 75492
// k := tmp ;
75482: LD_ADDR_VAR 0 2
75486: PUSH
75487: LD_VAR 0 3
75491: ST_TO_ADDR
// for i := 1 to k do
75492: LD_ADDR_VAR 0 1
75496: PUSH
75497: DOUBLE
75498: LD_INT 1
75500: DEC
75501: ST_TO_ADDR
75502: LD_VAR 0 2
75506: PUSH
75507: FOR_TO
75508: IFFALSE 75607
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
75510: LD_VAR 0 3
75514: PUSH
75515: LD_VAR 0 1
75519: ARRAY
75520: PPUSH
75521: LD_VAR 0 1
75525: PUSH
75526: LD_INT 4
75528: MOD
75529: PUSH
75530: LD_INT 1
75532: PLUS
75533: PPUSH
75534: CALL_OW 259
75538: PUSH
75539: LD_INT 10
75541: LESS
75542: IFFALSE 75605
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
75544: LD_VAR 0 3
75548: PUSH
75549: LD_VAR 0 1
75553: ARRAY
75554: PPUSH
75555: LD_VAR 0 1
75559: PUSH
75560: LD_INT 4
75562: MOD
75563: PUSH
75564: LD_INT 1
75566: PLUS
75567: PPUSH
75568: LD_VAR 0 3
75572: PUSH
75573: LD_VAR 0 1
75577: ARRAY
75578: PPUSH
75579: LD_VAR 0 1
75583: PUSH
75584: LD_INT 4
75586: MOD
75587: PUSH
75588: LD_INT 1
75590: PLUS
75591: PPUSH
75592: CALL_OW 259
75596: PUSH
75597: LD_INT 1
75599: PLUS
75600: PPUSH
75601: CALL_OW 237
75605: GO 75507
75607: POP
75608: POP
// end ;
75609: PPOPN 3
75611: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
75612: LD_EXP 108
75616: PUSH
75617: LD_EXP 116
75621: AND
75622: IFFALSE 75642
75624: GO 75626
75626: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
75627: LD_INT 4
75629: PPUSH
75630: LD_OWVAR 2
75634: PPUSH
75635: LD_INT 0
75637: PPUSH
75638: CALL_OW 324
75642: END
// every 0 0$1 trigger StreamModeActive and sShovel do
75643: LD_EXP 108
75647: PUSH
75648: LD_EXP 145
75652: AND
75653: IFFALSE 75673
75655: GO 75657
75657: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
75658: LD_INT 19
75660: PPUSH
75661: LD_OWVAR 2
75665: PPUSH
75666: LD_INT 0
75668: PPUSH
75669: CALL_OW 324
75673: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
75674: LD_EXP 108
75678: PUSH
75679: LD_EXP 117
75683: AND
75684: IFFALSE 75786
75686: GO 75688
75688: DISABLE
75689: LD_INT 0
75691: PPUSH
75692: PPUSH
// begin enable ;
75693: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
75694: LD_ADDR_VAR 0 2
75698: PUSH
75699: LD_INT 22
75701: PUSH
75702: LD_OWVAR 2
75706: PUSH
75707: EMPTY
75708: LIST
75709: LIST
75710: PUSH
75711: LD_INT 2
75713: PUSH
75714: LD_INT 34
75716: PUSH
75717: LD_INT 11
75719: PUSH
75720: EMPTY
75721: LIST
75722: LIST
75723: PUSH
75724: LD_INT 34
75726: PUSH
75727: LD_INT 30
75729: PUSH
75730: EMPTY
75731: LIST
75732: LIST
75733: PUSH
75734: EMPTY
75735: LIST
75736: LIST
75737: LIST
75738: PUSH
75739: EMPTY
75740: LIST
75741: LIST
75742: PPUSH
75743: CALL_OW 69
75747: ST_TO_ADDR
// if not tmp then
75748: LD_VAR 0 2
75752: NOT
75753: IFFALSE 75757
// exit ;
75755: GO 75786
// for i in tmp do
75757: LD_ADDR_VAR 0 1
75761: PUSH
75762: LD_VAR 0 2
75766: PUSH
75767: FOR_IN
75768: IFFALSE 75784
// begin SetLives ( i , 0 ) ;
75770: LD_VAR 0 1
75774: PPUSH
75775: LD_INT 0
75777: PPUSH
75778: CALL_OW 234
// end ;
75782: GO 75767
75784: POP
75785: POP
// end ;
75786: PPOPN 2
75788: END
// every 0 0$1 trigger StreamModeActive and sBunker do
75789: LD_EXP 108
75793: PUSH
75794: LD_EXP 118
75798: AND
75799: IFFALSE 75819
75801: GO 75803
75803: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
75804: LD_INT 32
75806: PPUSH
75807: LD_OWVAR 2
75811: PPUSH
75812: LD_INT 0
75814: PPUSH
75815: CALL_OW 324
75819: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
75820: LD_EXP 108
75824: PUSH
75825: LD_EXP 119
75829: AND
75830: IFFALSE 76011
75832: GO 75834
75834: DISABLE
75835: LD_INT 0
75837: PPUSH
75838: PPUSH
75839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
75840: LD_ADDR_VAR 0 2
75844: PUSH
75845: LD_INT 22
75847: PUSH
75848: LD_OWVAR 2
75852: PUSH
75853: EMPTY
75854: LIST
75855: LIST
75856: PUSH
75857: LD_INT 33
75859: PUSH
75860: LD_INT 3
75862: PUSH
75863: EMPTY
75864: LIST
75865: LIST
75866: PUSH
75867: EMPTY
75868: LIST
75869: LIST
75870: PPUSH
75871: CALL_OW 69
75875: ST_TO_ADDR
// if not tmp then
75876: LD_VAR 0 2
75880: NOT
75881: IFFALSE 75885
// exit ;
75883: GO 76011
// side := 0 ;
75885: LD_ADDR_VAR 0 3
75889: PUSH
75890: LD_INT 0
75892: ST_TO_ADDR
// for i := 1 to 8 do
75893: LD_ADDR_VAR 0 1
75897: PUSH
75898: DOUBLE
75899: LD_INT 1
75901: DEC
75902: ST_TO_ADDR
75903: LD_INT 8
75905: PUSH
75906: FOR_TO
75907: IFFALSE 75955
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
75909: LD_OWVAR 2
75913: PUSH
75914: LD_VAR 0 1
75918: NONEQUAL
75919: PUSH
75920: LD_OWVAR 2
75924: PPUSH
75925: LD_VAR 0 1
75929: PPUSH
75930: CALL_OW 81
75934: PUSH
75935: LD_INT 2
75937: EQUAL
75938: AND
75939: IFFALSE 75953
// begin side := i ;
75941: LD_ADDR_VAR 0 3
75945: PUSH
75946: LD_VAR 0 1
75950: ST_TO_ADDR
// break ;
75951: GO 75955
// end ;
75953: GO 75906
75955: POP
75956: POP
// if not side then
75957: LD_VAR 0 3
75961: NOT
75962: IFFALSE 75966
// exit ;
75964: GO 76011
// for i := 1 to tmp do
75966: LD_ADDR_VAR 0 1
75970: PUSH
75971: DOUBLE
75972: LD_INT 1
75974: DEC
75975: ST_TO_ADDR
75976: LD_VAR 0 2
75980: PUSH
75981: FOR_TO
75982: IFFALSE 76009
// if Prob ( 60 ) then
75984: LD_INT 60
75986: PPUSH
75987: CALL_OW 13
75991: IFFALSE 76007
// SetSide ( i , side ) ;
75993: LD_VAR 0 1
75997: PPUSH
75998: LD_VAR 0 3
76002: PPUSH
76003: CALL_OW 235
76007: GO 75981
76009: POP
76010: POP
// end ;
76011: PPOPN 3
76013: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
76014: LD_EXP 108
76018: PUSH
76019: LD_EXP 121
76023: AND
76024: IFFALSE 76143
76026: GO 76028
76028: DISABLE
76029: LD_INT 0
76031: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
76032: LD_ADDR_VAR 0 1
76036: PUSH
76037: LD_INT 22
76039: PUSH
76040: LD_OWVAR 2
76044: PUSH
76045: EMPTY
76046: LIST
76047: LIST
76048: PUSH
76049: LD_INT 21
76051: PUSH
76052: LD_INT 1
76054: PUSH
76055: EMPTY
76056: LIST
76057: LIST
76058: PUSH
76059: LD_INT 3
76061: PUSH
76062: LD_INT 23
76064: PUSH
76065: LD_INT 0
76067: PUSH
76068: EMPTY
76069: LIST
76070: LIST
76071: PUSH
76072: EMPTY
76073: LIST
76074: LIST
76075: PUSH
76076: EMPTY
76077: LIST
76078: LIST
76079: LIST
76080: PPUSH
76081: CALL_OW 69
76085: PUSH
76086: FOR_IN
76087: IFFALSE 76141
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
76089: LD_VAR 0 1
76093: PPUSH
76094: CALL_OW 257
76098: PUSH
76099: LD_INT 1
76101: PUSH
76102: LD_INT 2
76104: PUSH
76105: LD_INT 3
76107: PUSH
76108: LD_INT 4
76110: PUSH
76111: EMPTY
76112: LIST
76113: LIST
76114: LIST
76115: LIST
76116: IN
76117: IFFALSE 76139
// SetClass ( un , rand ( 1 , 4 ) ) ;
76119: LD_VAR 0 1
76123: PPUSH
76124: LD_INT 1
76126: PPUSH
76127: LD_INT 4
76129: PPUSH
76130: CALL_OW 12
76134: PPUSH
76135: CALL_OW 336
76139: GO 76086
76141: POP
76142: POP
// end ;
76143: PPOPN 1
76145: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
76146: LD_EXP 108
76150: PUSH
76151: LD_EXP 120
76155: AND
76156: IFFALSE 76235
76158: GO 76160
76160: DISABLE
76161: LD_INT 0
76163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
76164: LD_ADDR_VAR 0 1
76168: PUSH
76169: LD_INT 22
76171: PUSH
76172: LD_OWVAR 2
76176: PUSH
76177: EMPTY
76178: LIST
76179: LIST
76180: PUSH
76181: LD_INT 21
76183: PUSH
76184: LD_INT 3
76186: PUSH
76187: EMPTY
76188: LIST
76189: LIST
76190: PUSH
76191: EMPTY
76192: LIST
76193: LIST
76194: PPUSH
76195: CALL_OW 69
76199: ST_TO_ADDR
// if not tmp then
76200: LD_VAR 0 1
76204: NOT
76205: IFFALSE 76209
// exit ;
76207: GO 76235
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
76209: LD_VAR 0 1
76213: PUSH
76214: LD_INT 1
76216: PPUSH
76217: LD_VAR 0 1
76221: PPUSH
76222: CALL_OW 12
76226: ARRAY
76227: PPUSH
76228: LD_INT 100
76230: PPUSH
76231: CALL_OW 234
// end ;
76235: PPOPN 1
76237: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
76238: LD_EXP 108
76242: PUSH
76243: LD_EXP 122
76247: AND
76248: IFFALSE 76346
76250: GO 76252
76252: DISABLE
76253: LD_INT 0
76255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
76256: LD_ADDR_VAR 0 1
76260: PUSH
76261: LD_INT 22
76263: PUSH
76264: LD_OWVAR 2
76268: PUSH
76269: EMPTY
76270: LIST
76271: LIST
76272: PUSH
76273: LD_INT 21
76275: PUSH
76276: LD_INT 1
76278: PUSH
76279: EMPTY
76280: LIST
76281: LIST
76282: PUSH
76283: EMPTY
76284: LIST
76285: LIST
76286: PPUSH
76287: CALL_OW 69
76291: ST_TO_ADDR
// if not tmp then
76292: LD_VAR 0 1
76296: NOT
76297: IFFALSE 76301
// exit ;
76299: GO 76346
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
76301: LD_VAR 0 1
76305: PUSH
76306: LD_INT 1
76308: PPUSH
76309: LD_VAR 0 1
76313: PPUSH
76314: CALL_OW 12
76318: ARRAY
76319: PPUSH
76320: LD_INT 1
76322: PPUSH
76323: LD_INT 4
76325: PPUSH
76326: CALL_OW 12
76330: PPUSH
76331: LD_INT 3000
76333: PPUSH
76334: LD_INT 9000
76336: PPUSH
76337: CALL_OW 12
76341: PPUSH
76342: CALL_OW 492
// end ;
76346: PPOPN 1
76348: END
// every 0 0$1 trigger StreamModeActive and sDepot do
76349: LD_EXP 108
76353: PUSH
76354: LD_EXP 123
76358: AND
76359: IFFALSE 76379
76361: GO 76363
76363: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
76364: LD_INT 1
76366: PPUSH
76367: LD_OWVAR 2
76371: PPUSH
76372: LD_INT 0
76374: PPUSH
76375: CALL_OW 324
76379: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
76380: LD_EXP 108
76384: PUSH
76385: LD_EXP 124
76389: AND
76390: IFFALSE 76473
76392: GO 76394
76394: DISABLE
76395: LD_INT 0
76397: PPUSH
76398: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
76399: LD_ADDR_VAR 0 2
76403: PUSH
76404: LD_INT 22
76406: PUSH
76407: LD_OWVAR 2
76411: PUSH
76412: EMPTY
76413: LIST
76414: LIST
76415: PUSH
76416: LD_INT 21
76418: PUSH
76419: LD_INT 3
76421: PUSH
76422: EMPTY
76423: LIST
76424: LIST
76425: PUSH
76426: EMPTY
76427: LIST
76428: LIST
76429: PPUSH
76430: CALL_OW 69
76434: ST_TO_ADDR
// if not tmp then
76435: LD_VAR 0 2
76439: NOT
76440: IFFALSE 76444
// exit ;
76442: GO 76473
// for i in tmp do
76444: LD_ADDR_VAR 0 1
76448: PUSH
76449: LD_VAR 0 2
76453: PUSH
76454: FOR_IN
76455: IFFALSE 76471
// SetBLevel ( i , 10 ) ;
76457: LD_VAR 0 1
76461: PPUSH
76462: LD_INT 10
76464: PPUSH
76465: CALL_OW 241
76469: GO 76454
76471: POP
76472: POP
// end ;
76473: PPOPN 2
76475: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
76476: LD_EXP 108
76480: PUSH
76481: LD_EXP 125
76485: AND
76486: IFFALSE 76597
76488: GO 76490
76490: DISABLE
76491: LD_INT 0
76493: PPUSH
76494: PPUSH
76495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76496: LD_ADDR_VAR 0 3
76500: PUSH
76501: LD_INT 22
76503: PUSH
76504: LD_OWVAR 2
76508: PUSH
76509: EMPTY
76510: LIST
76511: LIST
76512: PUSH
76513: LD_INT 25
76515: PUSH
76516: LD_INT 1
76518: PUSH
76519: EMPTY
76520: LIST
76521: LIST
76522: PUSH
76523: EMPTY
76524: LIST
76525: LIST
76526: PPUSH
76527: CALL_OW 69
76531: ST_TO_ADDR
// if not tmp then
76532: LD_VAR 0 3
76536: NOT
76537: IFFALSE 76541
// exit ;
76539: GO 76597
// un := tmp [ rand ( 1 , tmp ) ] ;
76541: LD_ADDR_VAR 0 2
76545: PUSH
76546: LD_VAR 0 3
76550: PUSH
76551: LD_INT 1
76553: PPUSH
76554: LD_VAR 0 3
76558: PPUSH
76559: CALL_OW 12
76563: ARRAY
76564: ST_TO_ADDR
// if Crawls ( un ) then
76565: LD_VAR 0 2
76569: PPUSH
76570: CALL_OW 318
76574: IFFALSE 76585
// ComWalk ( un ) ;
76576: LD_VAR 0 2
76580: PPUSH
76581: CALL_OW 138
// SetClass ( un , class_sniper ) ;
76585: LD_VAR 0 2
76589: PPUSH
76590: LD_INT 5
76592: PPUSH
76593: CALL_OW 336
// end ;
76597: PPOPN 3
76599: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
76600: LD_EXP 108
76604: PUSH
76605: LD_EXP 126
76609: AND
76610: PUSH
76611: LD_OWVAR 67
76615: PUSH
76616: LD_INT 3
76618: LESS
76619: AND
76620: IFFALSE 76639
76622: GO 76624
76624: DISABLE
// Difficulty := Difficulty + 1 ;
76625: LD_ADDR_OWVAR 67
76629: PUSH
76630: LD_OWVAR 67
76634: PUSH
76635: LD_INT 1
76637: PLUS
76638: ST_TO_ADDR
76639: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
76640: LD_EXP 108
76644: PUSH
76645: LD_EXP 127
76649: AND
76650: IFFALSE 76753
76652: GO 76654
76654: DISABLE
76655: LD_INT 0
76657: PPUSH
// begin for i := 1 to 5 do
76658: LD_ADDR_VAR 0 1
76662: PUSH
76663: DOUBLE
76664: LD_INT 1
76666: DEC
76667: ST_TO_ADDR
76668: LD_INT 5
76670: PUSH
76671: FOR_TO
76672: IFFALSE 76751
// begin uc_nation := nation_nature ;
76674: LD_ADDR_OWVAR 21
76678: PUSH
76679: LD_INT 0
76681: ST_TO_ADDR
// uc_side := 0 ;
76682: LD_ADDR_OWVAR 20
76686: PUSH
76687: LD_INT 0
76689: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76690: LD_ADDR_OWVAR 29
76694: PUSH
76695: LD_INT 12
76697: PUSH
76698: LD_INT 12
76700: PUSH
76701: EMPTY
76702: LIST
76703: LIST
76704: ST_TO_ADDR
// hc_agressivity := 20 ;
76705: LD_ADDR_OWVAR 35
76709: PUSH
76710: LD_INT 20
76712: ST_TO_ADDR
// hc_class := class_tiger ;
76713: LD_ADDR_OWVAR 28
76717: PUSH
76718: LD_INT 14
76720: ST_TO_ADDR
// hc_gallery :=  ;
76721: LD_ADDR_OWVAR 33
76725: PUSH
76726: LD_STRING 
76728: ST_TO_ADDR
// hc_name :=  ;
76729: LD_ADDR_OWVAR 26
76733: PUSH
76734: LD_STRING 
76736: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
76737: CALL_OW 44
76741: PPUSH
76742: LD_INT 0
76744: PPUSH
76745: CALL_OW 51
// end ;
76749: GO 76671
76751: POP
76752: POP
// end ;
76753: PPOPN 1
76755: END
// every 0 0$1 trigger StreamModeActive and sBomb do
76756: LD_EXP 108
76760: PUSH
76761: LD_EXP 128
76765: AND
76766: IFFALSE 76775
76768: GO 76770
76770: DISABLE
// StreamSibBomb ;
76771: CALL 76776 0 0
76775: END
// export function StreamSibBomb ; var i , x , y ; begin
76776: LD_INT 0
76778: PPUSH
76779: PPUSH
76780: PPUSH
76781: PPUSH
// result := false ;
76782: LD_ADDR_VAR 0 1
76786: PUSH
76787: LD_INT 0
76789: ST_TO_ADDR
// for i := 1 to 16 do
76790: LD_ADDR_VAR 0 2
76794: PUSH
76795: DOUBLE
76796: LD_INT 1
76798: DEC
76799: ST_TO_ADDR
76800: LD_INT 16
76802: PUSH
76803: FOR_TO
76804: IFFALSE 77003
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
76806: LD_ADDR_VAR 0 3
76810: PUSH
76811: LD_INT 10
76813: PUSH
76814: LD_INT 20
76816: PUSH
76817: LD_INT 30
76819: PUSH
76820: LD_INT 40
76822: PUSH
76823: LD_INT 50
76825: PUSH
76826: LD_INT 60
76828: PUSH
76829: LD_INT 70
76831: PUSH
76832: LD_INT 80
76834: PUSH
76835: LD_INT 90
76837: PUSH
76838: LD_INT 100
76840: PUSH
76841: LD_INT 110
76843: PUSH
76844: LD_INT 120
76846: PUSH
76847: LD_INT 130
76849: PUSH
76850: LD_INT 140
76852: PUSH
76853: LD_INT 150
76855: PUSH
76856: EMPTY
76857: LIST
76858: LIST
76859: LIST
76860: LIST
76861: LIST
76862: LIST
76863: LIST
76864: LIST
76865: LIST
76866: LIST
76867: LIST
76868: LIST
76869: LIST
76870: LIST
76871: LIST
76872: PUSH
76873: LD_INT 1
76875: PPUSH
76876: LD_INT 15
76878: PPUSH
76879: CALL_OW 12
76883: ARRAY
76884: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
76885: LD_ADDR_VAR 0 4
76889: PUSH
76890: LD_INT 10
76892: PUSH
76893: LD_INT 20
76895: PUSH
76896: LD_INT 30
76898: PUSH
76899: LD_INT 40
76901: PUSH
76902: LD_INT 50
76904: PUSH
76905: LD_INT 60
76907: PUSH
76908: LD_INT 70
76910: PUSH
76911: LD_INT 80
76913: PUSH
76914: LD_INT 90
76916: PUSH
76917: LD_INT 100
76919: PUSH
76920: LD_INT 110
76922: PUSH
76923: LD_INT 120
76925: PUSH
76926: LD_INT 130
76928: PUSH
76929: LD_INT 140
76931: PUSH
76932: LD_INT 150
76934: PUSH
76935: EMPTY
76936: LIST
76937: LIST
76938: LIST
76939: LIST
76940: LIST
76941: LIST
76942: LIST
76943: LIST
76944: LIST
76945: LIST
76946: LIST
76947: LIST
76948: LIST
76949: LIST
76950: LIST
76951: PUSH
76952: LD_INT 1
76954: PPUSH
76955: LD_INT 15
76957: PPUSH
76958: CALL_OW 12
76962: ARRAY
76963: ST_TO_ADDR
// if ValidHex ( x , y ) then
76964: LD_VAR 0 3
76968: PPUSH
76969: LD_VAR 0 4
76973: PPUSH
76974: CALL_OW 488
76978: IFFALSE 77001
// begin result := [ x , y ] ;
76980: LD_ADDR_VAR 0 1
76984: PUSH
76985: LD_VAR 0 3
76989: PUSH
76990: LD_VAR 0 4
76994: PUSH
76995: EMPTY
76996: LIST
76997: LIST
76998: ST_TO_ADDR
// break ;
76999: GO 77003
// end ; end ;
77001: GO 76803
77003: POP
77004: POP
// if result then
77005: LD_VAR 0 1
77009: IFFALSE 77069
// begin ToLua ( playSibBomb() ) ;
77011: LD_STRING playSibBomb()
77013: PPUSH
77014: CALL_OW 559
// wait ( 0 0$14 ) ;
77018: LD_INT 490
77020: PPUSH
77021: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
77025: LD_VAR 0 1
77029: PUSH
77030: LD_INT 1
77032: ARRAY
77033: PPUSH
77034: LD_VAR 0 1
77038: PUSH
77039: LD_INT 2
77041: ARRAY
77042: PPUSH
77043: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
77047: LD_VAR 0 1
77051: PUSH
77052: LD_INT 1
77054: ARRAY
77055: PPUSH
77056: LD_VAR 0 1
77060: PUSH
77061: LD_INT 2
77063: ARRAY
77064: PPUSH
77065: CALL_OW 429
// end ; end ;
77069: LD_VAR 0 1
77073: RET
// every 0 0$1 trigger StreamModeActive and sReset do
77074: LD_EXP 108
77078: PUSH
77079: LD_EXP 130
77083: AND
77084: IFFALSE 77096
77086: GO 77088
77088: DISABLE
// YouLost (  ) ;
77089: LD_STRING 
77091: PPUSH
77092: CALL_OW 104
77096: END
// every 0 0$1 trigger StreamModeActive and sFog do
77097: LD_EXP 108
77101: PUSH
77102: LD_EXP 129
77106: AND
77107: IFFALSE 77121
77109: GO 77111
77111: DISABLE
// FogOff ( your_side ) ;
77112: LD_OWVAR 2
77116: PPUSH
77117: CALL_OW 344
77121: END
// every 0 0$1 trigger StreamModeActive and sSun do
77122: LD_EXP 108
77126: PUSH
77127: LD_EXP 131
77131: AND
77132: IFFALSE 77160
77134: GO 77136
77136: DISABLE
// begin solar_recharge_percent := 0 ;
77137: LD_ADDR_OWVAR 79
77141: PUSH
77142: LD_INT 0
77144: ST_TO_ADDR
// wait ( 5 5$00 ) ;
77145: LD_INT 10500
77147: PPUSH
77148: CALL_OW 67
// solar_recharge_percent := 100 ;
77152: LD_ADDR_OWVAR 79
77156: PUSH
77157: LD_INT 100
77159: ST_TO_ADDR
// end ;
77160: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
77161: LD_EXP 108
77165: PUSH
77166: LD_EXP 132
77170: AND
77171: IFFALSE 77410
77173: GO 77175
77175: DISABLE
77176: LD_INT 0
77178: PPUSH
77179: PPUSH
77180: PPUSH
// begin tmp := [ ] ;
77181: LD_ADDR_VAR 0 3
77185: PUSH
77186: EMPTY
77187: ST_TO_ADDR
// for i := 1 to 6 do
77188: LD_ADDR_VAR 0 1
77192: PUSH
77193: DOUBLE
77194: LD_INT 1
77196: DEC
77197: ST_TO_ADDR
77198: LD_INT 6
77200: PUSH
77201: FOR_TO
77202: IFFALSE 77307
// begin uc_nation := nation_nature ;
77204: LD_ADDR_OWVAR 21
77208: PUSH
77209: LD_INT 0
77211: ST_TO_ADDR
// uc_side := 0 ;
77212: LD_ADDR_OWVAR 20
77216: PUSH
77217: LD_INT 0
77219: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
77220: LD_ADDR_OWVAR 29
77224: PUSH
77225: LD_INT 12
77227: PUSH
77228: LD_INT 12
77230: PUSH
77231: EMPTY
77232: LIST
77233: LIST
77234: ST_TO_ADDR
// hc_agressivity := 20 ;
77235: LD_ADDR_OWVAR 35
77239: PUSH
77240: LD_INT 20
77242: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
77243: LD_ADDR_OWVAR 28
77247: PUSH
77248: LD_INT 17
77250: ST_TO_ADDR
// hc_gallery :=  ;
77251: LD_ADDR_OWVAR 33
77255: PUSH
77256: LD_STRING 
77258: ST_TO_ADDR
// hc_name :=  ;
77259: LD_ADDR_OWVAR 26
77263: PUSH
77264: LD_STRING 
77266: ST_TO_ADDR
// un := CreateHuman ;
77267: LD_ADDR_VAR 0 2
77271: PUSH
77272: CALL_OW 44
77276: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
77277: LD_VAR 0 2
77281: PPUSH
77282: LD_INT 1
77284: PPUSH
77285: CALL_OW 51
// tmp := tmp ^ un ;
77289: LD_ADDR_VAR 0 3
77293: PUSH
77294: LD_VAR 0 3
77298: PUSH
77299: LD_VAR 0 2
77303: ADD
77304: ST_TO_ADDR
// end ;
77305: GO 77201
77307: POP
77308: POP
// repeat wait ( 0 0$1 ) ;
77309: LD_INT 35
77311: PPUSH
77312: CALL_OW 67
// for un in tmp do
77316: LD_ADDR_VAR 0 2
77320: PUSH
77321: LD_VAR 0 3
77325: PUSH
77326: FOR_IN
77327: IFFALSE 77401
// begin if IsDead ( un ) then
77329: LD_VAR 0 2
77333: PPUSH
77334: CALL_OW 301
77338: IFFALSE 77358
// begin tmp := tmp diff un ;
77340: LD_ADDR_VAR 0 3
77344: PUSH
77345: LD_VAR 0 3
77349: PUSH
77350: LD_VAR 0 2
77354: DIFF
77355: ST_TO_ADDR
// continue ;
77356: GO 77326
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
77358: LD_VAR 0 2
77362: PPUSH
77363: LD_INT 3
77365: PUSH
77366: LD_INT 22
77368: PUSH
77369: LD_INT 0
77371: PUSH
77372: EMPTY
77373: LIST
77374: LIST
77375: PUSH
77376: EMPTY
77377: LIST
77378: LIST
77379: PPUSH
77380: CALL_OW 69
77384: PPUSH
77385: LD_VAR 0 2
77389: PPUSH
77390: CALL_OW 74
77394: PPUSH
77395: CALL_OW 115
// end ;
77399: GO 77326
77401: POP
77402: POP
// until not tmp ;
77403: LD_VAR 0 3
77407: NOT
77408: IFFALSE 77309
// end ;
77410: PPOPN 3
77412: END
// every 0 0$1 trigger StreamModeActive and sTroll do
77413: LD_EXP 108
77417: PUSH
77418: LD_EXP 133
77422: AND
77423: IFFALSE 77477
77425: GO 77427
77427: DISABLE
// begin ToLua ( displayTroll(); ) ;
77428: LD_STRING displayTroll();
77430: PPUSH
77431: CALL_OW 559
// wait ( 3 3$00 ) ;
77435: LD_INT 6300
77437: PPUSH
77438: CALL_OW 67
// ToLua ( hideTroll(); ) ;
77442: LD_STRING hideTroll();
77444: PPUSH
77445: CALL_OW 559
// wait ( 1 1$00 ) ;
77449: LD_INT 2100
77451: PPUSH
77452: CALL_OW 67
// ToLua ( displayTroll(); ) ;
77456: LD_STRING displayTroll();
77458: PPUSH
77459: CALL_OW 559
// wait ( 1 1$00 ) ;
77463: LD_INT 2100
77465: PPUSH
77466: CALL_OW 67
// ToLua ( hideTroll(); ) ;
77470: LD_STRING hideTroll();
77472: PPUSH
77473: CALL_OW 559
// end ;
77477: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
77478: LD_EXP 108
77482: PUSH
77483: LD_EXP 134
77487: AND
77488: IFFALSE 77551
77490: GO 77492
77492: DISABLE
77493: LD_INT 0
77495: PPUSH
// begin p := 0 ;
77496: LD_ADDR_VAR 0 1
77500: PUSH
77501: LD_INT 0
77503: ST_TO_ADDR
// repeat game_speed := 1 ;
77504: LD_ADDR_OWVAR 65
77508: PUSH
77509: LD_INT 1
77511: ST_TO_ADDR
// wait ( 0 0$1 ) ;
77512: LD_INT 35
77514: PPUSH
77515: CALL_OW 67
// p := p + 1 ;
77519: LD_ADDR_VAR 0 1
77523: PUSH
77524: LD_VAR 0 1
77528: PUSH
77529: LD_INT 1
77531: PLUS
77532: ST_TO_ADDR
// until p >= 60 ;
77533: LD_VAR 0 1
77537: PUSH
77538: LD_INT 60
77540: GREATEREQUAL
77541: IFFALSE 77504
// game_speed := 4 ;
77543: LD_ADDR_OWVAR 65
77547: PUSH
77548: LD_INT 4
77550: ST_TO_ADDR
// end ;
77551: PPOPN 1
77553: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
77554: LD_EXP 108
77558: PUSH
77559: LD_EXP 135
77563: AND
77564: IFFALSE 77710
77566: GO 77568
77568: DISABLE
77569: LD_INT 0
77571: PPUSH
77572: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
77573: LD_ADDR_VAR 0 1
77577: PUSH
77578: LD_INT 22
77580: PUSH
77581: LD_OWVAR 2
77585: PUSH
77586: EMPTY
77587: LIST
77588: LIST
77589: PUSH
77590: LD_INT 2
77592: PUSH
77593: LD_INT 30
77595: PUSH
77596: LD_INT 0
77598: PUSH
77599: EMPTY
77600: LIST
77601: LIST
77602: PUSH
77603: LD_INT 30
77605: PUSH
77606: LD_INT 1
77608: PUSH
77609: EMPTY
77610: LIST
77611: LIST
77612: PUSH
77613: EMPTY
77614: LIST
77615: LIST
77616: LIST
77617: PUSH
77618: EMPTY
77619: LIST
77620: LIST
77621: PPUSH
77622: CALL_OW 69
77626: ST_TO_ADDR
// if not depot then
77627: LD_VAR 0 1
77631: NOT
77632: IFFALSE 77636
// exit ;
77634: GO 77710
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
77636: LD_ADDR_VAR 0 2
77640: PUSH
77641: LD_VAR 0 1
77645: PUSH
77646: LD_INT 1
77648: PPUSH
77649: LD_VAR 0 1
77653: PPUSH
77654: CALL_OW 12
77658: ARRAY
77659: PPUSH
77660: CALL_OW 274
77664: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
77665: LD_VAR 0 2
77669: PPUSH
77670: LD_INT 1
77672: PPUSH
77673: LD_INT 0
77675: PPUSH
77676: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
77680: LD_VAR 0 2
77684: PPUSH
77685: LD_INT 2
77687: PPUSH
77688: LD_INT 0
77690: PPUSH
77691: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
77695: LD_VAR 0 2
77699: PPUSH
77700: LD_INT 3
77702: PPUSH
77703: LD_INT 0
77705: PPUSH
77706: CALL_OW 277
// end ;
77710: PPOPN 2
77712: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
77713: LD_EXP 108
77717: PUSH
77718: LD_EXP 136
77722: AND
77723: IFFALSE 77820
77725: GO 77727
77727: DISABLE
77728: LD_INT 0
77730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
77731: LD_ADDR_VAR 0 1
77735: PUSH
77736: LD_INT 22
77738: PUSH
77739: LD_OWVAR 2
77743: PUSH
77744: EMPTY
77745: LIST
77746: LIST
77747: PUSH
77748: LD_INT 21
77750: PUSH
77751: LD_INT 1
77753: PUSH
77754: EMPTY
77755: LIST
77756: LIST
77757: PUSH
77758: LD_INT 3
77760: PUSH
77761: LD_INT 23
77763: PUSH
77764: LD_INT 0
77766: PUSH
77767: EMPTY
77768: LIST
77769: LIST
77770: PUSH
77771: EMPTY
77772: LIST
77773: LIST
77774: PUSH
77775: EMPTY
77776: LIST
77777: LIST
77778: LIST
77779: PPUSH
77780: CALL_OW 69
77784: ST_TO_ADDR
// if not tmp then
77785: LD_VAR 0 1
77789: NOT
77790: IFFALSE 77794
// exit ;
77792: GO 77820
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
77794: LD_VAR 0 1
77798: PUSH
77799: LD_INT 1
77801: PPUSH
77802: LD_VAR 0 1
77806: PPUSH
77807: CALL_OW 12
77811: ARRAY
77812: PPUSH
77813: LD_INT 200
77815: PPUSH
77816: CALL_OW 234
// end ;
77820: PPOPN 1
77822: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
77823: LD_EXP 108
77827: PUSH
77828: LD_EXP 137
77832: AND
77833: IFFALSE 77912
77835: GO 77837
77837: DISABLE
77838: LD_INT 0
77840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
77841: LD_ADDR_VAR 0 1
77845: PUSH
77846: LD_INT 22
77848: PUSH
77849: LD_OWVAR 2
77853: PUSH
77854: EMPTY
77855: LIST
77856: LIST
77857: PUSH
77858: LD_INT 21
77860: PUSH
77861: LD_INT 2
77863: PUSH
77864: EMPTY
77865: LIST
77866: LIST
77867: PUSH
77868: EMPTY
77869: LIST
77870: LIST
77871: PPUSH
77872: CALL_OW 69
77876: ST_TO_ADDR
// if not tmp then
77877: LD_VAR 0 1
77881: NOT
77882: IFFALSE 77886
// exit ;
77884: GO 77912
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
77886: LD_VAR 0 1
77890: PUSH
77891: LD_INT 1
77893: PPUSH
77894: LD_VAR 0 1
77898: PPUSH
77899: CALL_OW 12
77903: ARRAY
77904: PPUSH
77905: LD_INT 60
77907: PPUSH
77908: CALL_OW 234
// end ;
77912: PPOPN 1
77914: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
77915: LD_EXP 108
77919: PUSH
77920: LD_EXP 138
77924: AND
77925: IFFALSE 78024
77927: GO 77929
77929: DISABLE
77930: LD_INT 0
77932: PPUSH
77933: PPUSH
// begin enable ;
77934: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
77935: LD_ADDR_VAR 0 1
77939: PUSH
77940: LD_INT 22
77942: PUSH
77943: LD_OWVAR 2
77947: PUSH
77948: EMPTY
77949: LIST
77950: LIST
77951: PUSH
77952: LD_INT 61
77954: PUSH
77955: EMPTY
77956: LIST
77957: PUSH
77958: LD_INT 33
77960: PUSH
77961: LD_INT 2
77963: PUSH
77964: EMPTY
77965: LIST
77966: LIST
77967: PUSH
77968: EMPTY
77969: LIST
77970: LIST
77971: LIST
77972: PPUSH
77973: CALL_OW 69
77977: ST_TO_ADDR
// if not tmp then
77978: LD_VAR 0 1
77982: NOT
77983: IFFALSE 77987
// exit ;
77985: GO 78024
// for i in tmp do
77987: LD_ADDR_VAR 0 2
77991: PUSH
77992: LD_VAR 0 1
77996: PUSH
77997: FOR_IN
77998: IFFALSE 78022
// if IsControledBy ( i ) then
78000: LD_VAR 0 2
78004: PPUSH
78005: CALL_OW 312
78009: IFFALSE 78020
// ComUnlink ( i ) ;
78011: LD_VAR 0 2
78015: PPUSH
78016: CALL_OW 136
78020: GO 77997
78022: POP
78023: POP
// end ;
78024: PPOPN 2
78026: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
78027: LD_EXP 108
78031: PUSH
78032: LD_EXP 139
78036: AND
78037: IFFALSE 78177
78039: GO 78041
78041: DISABLE
78042: LD_INT 0
78044: PPUSH
78045: PPUSH
// begin ToLua ( displayPowell(); ) ;
78046: LD_STRING displayPowell();
78048: PPUSH
78049: CALL_OW 559
// uc_side := 0 ;
78053: LD_ADDR_OWVAR 20
78057: PUSH
78058: LD_INT 0
78060: ST_TO_ADDR
// uc_nation := 2 ;
78061: LD_ADDR_OWVAR 21
78065: PUSH
78066: LD_INT 2
78068: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
78069: LD_ADDR_OWVAR 37
78073: PUSH
78074: LD_INT 14
78076: ST_TO_ADDR
// vc_engine := engine_siberite ;
78077: LD_ADDR_OWVAR 39
78081: PUSH
78082: LD_INT 3
78084: ST_TO_ADDR
// vc_control := control_apeman ;
78085: LD_ADDR_OWVAR 38
78089: PUSH
78090: LD_INT 5
78092: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
78093: LD_ADDR_OWVAR 40
78097: PUSH
78098: LD_INT 29
78100: ST_TO_ADDR
// un := CreateVehicle ;
78101: LD_ADDR_VAR 0 2
78105: PUSH
78106: CALL_OW 45
78110: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
78111: LD_VAR 0 2
78115: PPUSH
78116: LD_INT 1
78118: PPUSH
78119: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
78123: LD_INT 35
78125: PPUSH
78126: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
78130: LD_VAR 0 2
78134: PPUSH
78135: LD_INT 22
78137: PUSH
78138: LD_OWVAR 2
78142: PUSH
78143: EMPTY
78144: LIST
78145: LIST
78146: PPUSH
78147: CALL_OW 69
78151: PPUSH
78152: LD_VAR 0 2
78156: PPUSH
78157: CALL_OW 74
78161: PPUSH
78162: CALL_OW 115
// until IsDead ( un ) ;
78166: LD_VAR 0 2
78170: PPUSH
78171: CALL_OW 301
78175: IFFALSE 78123
// end ;
78177: PPOPN 2
78179: END
// every 0 0$1 trigger StreamModeActive and sStu do
78180: LD_EXP 108
78184: PUSH
78185: LD_EXP 147
78189: AND
78190: IFFALSE 78206
78192: GO 78194
78194: DISABLE
// begin ToLua ( displayStucuk(); ) ;
78195: LD_STRING displayStucuk();
78197: PPUSH
78198: CALL_OW 559
// ResetFog ;
78202: CALL_OW 335
// end ;
78206: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
78207: LD_EXP 108
78211: PUSH
78212: LD_EXP 140
78216: AND
78217: IFFALSE 78358
78219: GO 78221
78221: DISABLE
78222: LD_INT 0
78224: PPUSH
78225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
78226: LD_ADDR_VAR 0 2
78230: PUSH
78231: LD_INT 22
78233: PUSH
78234: LD_OWVAR 2
78238: PUSH
78239: EMPTY
78240: LIST
78241: LIST
78242: PUSH
78243: LD_INT 21
78245: PUSH
78246: LD_INT 1
78248: PUSH
78249: EMPTY
78250: LIST
78251: LIST
78252: PUSH
78253: EMPTY
78254: LIST
78255: LIST
78256: PPUSH
78257: CALL_OW 69
78261: ST_TO_ADDR
// if not tmp then
78262: LD_VAR 0 2
78266: NOT
78267: IFFALSE 78271
// exit ;
78269: GO 78358
// un := tmp [ rand ( 1 , tmp ) ] ;
78271: LD_ADDR_VAR 0 1
78275: PUSH
78276: LD_VAR 0 2
78280: PUSH
78281: LD_INT 1
78283: PPUSH
78284: LD_VAR 0 2
78288: PPUSH
78289: CALL_OW 12
78293: ARRAY
78294: ST_TO_ADDR
// SetSide ( un , 0 ) ;
78295: LD_VAR 0 1
78299: PPUSH
78300: LD_INT 0
78302: PPUSH
78303: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
78307: LD_VAR 0 1
78311: PPUSH
78312: LD_OWVAR 3
78316: PUSH
78317: LD_VAR 0 1
78321: DIFF
78322: PPUSH
78323: LD_VAR 0 1
78327: PPUSH
78328: CALL_OW 74
78332: PPUSH
78333: CALL_OW 115
// wait ( 0 0$20 ) ;
78337: LD_INT 700
78339: PPUSH
78340: CALL_OW 67
// SetSide ( un , your_side ) ;
78344: LD_VAR 0 1
78348: PPUSH
78349: LD_OWVAR 2
78353: PPUSH
78354: CALL_OW 235
// end ;
78358: PPOPN 2
78360: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
78361: LD_EXP 108
78365: PUSH
78366: LD_EXP 141
78370: AND
78371: IFFALSE 78477
78373: GO 78375
78375: DISABLE
78376: LD_INT 0
78378: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
78379: LD_ADDR_VAR 0 1
78383: PUSH
78384: LD_INT 22
78386: PUSH
78387: LD_OWVAR 2
78391: PUSH
78392: EMPTY
78393: LIST
78394: LIST
78395: PUSH
78396: LD_INT 2
78398: PUSH
78399: LD_INT 30
78401: PUSH
78402: LD_INT 0
78404: PUSH
78405: EMPTY
78406: LIST
78407: LIST
78408: PUSH
78409: LD_INT 30
78411: PUSH
78412: LD_INT 1
78414: PUSH
78415: EMPTY
78416: LIST
78417: LIST
78418: PUSH
78419: EMPTY
78420: LIST
78421: LIST
78422: LIST
78423: PUSH
78424: EMPTY
78425: LIST
78426: LIST
78427: PPUSH
78428: CALL_OW 69
78432: ST_TO_ADDR
// if not depot then
78433: LD_VAR 0 1
78437: NOT
78438: IFFALSE 78442
// exit ;
78440: GO 78477
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
78442: LD_VAR 0 1
78446: PUSH
78447: LD_INT 1
78449: ARRAY
78450: PPUSH
78451: CALL_OW 250
78455: PPUSH
78456: LD_VAR 0 1
78460: PUSH
78461: LD_INT 1
78463: ARRAY
78464: PPUSH
78465: CALL_OW 251
78469: PPUSH
78470: LD_INT 70
78472: PPUSH
78473: CALL_OW 495
// end ;
78477: PPOPN 1
78479: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
78480: LD_EXP 108
78484: PUSH
78485: LD_EXP 142
78489: AND
78490: IFFALSE 78701
78492: GO 78494
78494: DISABLE
78495: LD_INT 0
78497: PPUSH
78498: PPUSH
78499: PPUSH
78500: PPUSH
78501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
78502: LD_ADDR_VAR 0 5
78506: PUSH
78507: LD_INT 22
78509: PUSH
78510: LD_OWVAR 2
78514: PUSH
78515: EMPTY
78516: LIST
78517: LIST
78518: PUSH
78519: LD_INT 21
78521: PUSH
78522: LD_INT 1
78524: PUSH
78525: EMPTY
78526: LIST
78527: LIST
78528: PUSH
78529: EMPTY
78530: LIST
78531: LIST
78532: PPUSH
78533: CALL_OW 69
78537: ST_TO_ADDR
// if not tmp then
78538: LD_VAR 0 5
78542: NOT
78543: IFFALSE 78547
// exit ;
78545: GO 78701
// for i in tmp do
78547: LD_ADDR_VAR 0 1
78551: PUSH
78552: LD_VAR 0 5
78556: PUSH
78557: FOR_IN
78558: IFFALSE 78699
// begin d := rand ( 0 , 5 ) ;
78560: LD_ADDR_VAR 0 4
78564: PUSH
78565: LD_INT 0
78567: PPUSH
78568: LD_INT 5
78570: PPUSH
78571: CALL_OW 12
78575: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
78576: LD_ADDR_VAR 0 2
78580: PUSH
78581: LD_VAR 0 1
78585: PPUSH
78586: CALL_OW 250
78590: PPUSH
78591: LD_VAR 0 4
78595: PPUSH
78596: LD_INT 3
78598: PPUSH
78599: LD_INT 12
78601: PPUSH
78602: CALL_OW 12
78606: PPUSH
78607: CALL_OW 272
78611: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
78612: LD_ADDR_VAR 0 3
78616: PUSH
78617: LD_VAR 0 1
78621: PPUSH
78622: CALL_OW 251
78626: PPUSH
78627: LD_VAR 0 4
78631: PPUSH
78632: LD_INT 3
78634: PPUSH
78635: LD_INT 12
78637: PPUSH
78638: CALL_OW 12
78642: PPUSH
78643: CALL_OW 273
78647: ST_TO_ADDR
// if ValidHex ( x , y ) then
78648: LD_VAR 0 2
78652: PPUSH
78653: LD_VAR 0 3
78657: PPUSH
78658: CALL_OW 488
78662: IFFALSE 78697
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
78664: LD_VAR 0 1
78668: PPUSH
78669: LD_VAR 0 2
78673: PPUSH
78674: LD_VAR 0 3
78678: PPUSH
78679: LD_INT 3
78681: PPUSH
78682: LD_INT 6
78684: PPUSH
78685: CALL_OW 12
78689: PPUSH
78690: LD_INT 1
78692: PPUSH
78693: CALL_OW 483
// end ;
78697: GO 78557
78699: POP
78700: POP
// end ;
78701: PPOPN 5
78703: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
78704: LD_EXP 108
78708: PUSH
78709: LD_EXP 143
78713: AND
78714: IFFALSE 78808
78716: GO 78718
78718: DISABLE
78719: LD_INT 0
78721: PPUSH
78722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
78723: LD_ADDR_VAR 0 2
78727: PUSH
78728: LD_INT 22
78730: PUSH
78731: LD_OWVAR 2
78735: PUSH
78736: EMPTY
78737: LIST
78738: LIST
78739: PUSH
78740: LD_INT 32
78742: PUSH
78743: LD_INT 1
78745: PUSH
78746: EMPTY
78747: LIST
78748: LIST
78749: PUSH
78750: LD_INT 21
78752: PUSH
78753: LD_INT 2
78755: PUSH
78756: EMPTY
78757: LIST
78758: LIST
78759: PUSH
78760: EMPTY
78761: LIST
78762: LIST
78763: LIST
78764: PPUSH
78765: CALL_OW 69
78769: ST_TO_ADDR
// if not tmp then
78770: LD_VAR 0 2
78774: NOT
78775: IFFALSE 78779
// exit ;
78777: GO 78808
// for i in tmp do
78779: LD_ADDR_VAR 0 1
78783: PUSH
78784: LD_VAR 0 2
78788: PUSH
78789: FOR_IN
78790: IFFALSE 78806
// SetFuel ( i , 0 ) ;
78792: LD_VAR 0 1
78796: PPUSH
78797: LD_INT 0
78799: PPUSH
78800: CALL_OW 240
78804: GO 78789
78806: POP
78807: POP
// end ;
78808: PPOPN 2
78810: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
78811: LD_EXP 108
78815: PUSH
78816: LD_EXP 144
78820: AND
78821: IFFALSE 78887
78823: GO 78825
78825: DISABLE
78826: LD_INT 0
78828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
78829: LD_ADDR_VAR 0 1
78833: PUSH
78834: LD_INT 22
78836: PUSH
78837: LD_OWVAR 2
78841: PUSH
78842: EMPTY
78843: LIST
78844: LIST
78845: PUSH
78846: LD_INT 30
78848: PUSH
78849: LD_INT 29
78851: PUSH
78852: EMPTY
78853: LIST
78854: LIST
78855: PUSH
78856: EMPTY
78857: LIST
78858: LIST
78859: PPUSH
78860: CALL_OW 69
78864: ST_TO_ADDR
// if not tmp then
78865: LD_VAR 0 1
78869: NOT
78870: IFFALSE 78874
// exit ;
78872: GO 78887
// DestroyUnit ( tmp [ 1 ] ) ;
78874: LD_VAR 0 1
78878: PUSH
78879: LD_INT 1
78881: ARRAY
78882: PPUSH
78883: CALL_OW 65
// end ;
78887: PPOPN 1
78889: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
78890: LD_EXP 108
78894: PUSH
78895: LD_EXP 146
78899: AND
78900: IFFALSE 79029
78902: GO 78904
78904: DISABLE
78905: LD_INT 0
78907: PPUSH
// begin uc_side := 0 ;
78908: LD_ADDR_OWVAR 20
78912: PUSH
78913: LD_INT 0
78915: ST_TO_ADDR
// uc_nation := nation_arabian ;
78916: LD_ADDR_OWVAR 21
78920: PUSH
78921: LD_INT 2
78923: ST_TO_ADDR
// hc_gallery :=  ;
78924: LD_ADDR_OWVAR 33
78928: PUSH
78929: LD_STRING 
78931: ST_TO_ADDR
// hc_name :=  ;
78932: LD_ADDR_OWVAR 26
78936: PUSH
78937: LD_STRING 
78939: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
78940: LD_INT 1
78942: PPUSH
78943: LD_INT 11
78945: PPUSH
78946: LD_INT 10
78948: PPUSH
78949: CALL_OW 380
// un := CreateHuman ;
78953: LD_ADDR_VAR 0 1
78957: PUSH
78958: CALL_OW 44
78962: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
78963: LD_VAR 0 1
78967: PPUSH
78968: LD_INT 1
78970: PPUSH
78971: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
78975: LD_INT 35
78977: PPUSH
78978: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
78982: LD_VAR 0 1
78986: PPUSH
78987: LD_INT 22
78989: PUSH
78990: LD_OWVAR 2
78994: PUSH
78995: EMPTY
78996: LIST
78997: LIST
78998: PPUSH
78999: CALL_OW 69
79003: PPUSH
79004: LD_VAR 0 1
79008: PPUSH
79009: CALL_OW 74
79013: PPUSH
79014: CALL_OW 115
// until IsDead ( un ) ;
79018: LD_VAR 0 1
79022: PPUSH
79023: CALL_OW 301
79027: IFFALSE 78975
// end ;
79029: PPOPN 1
79031: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
79032: LD_EXP 108
79036: PUSH
79037: LD_EXP 148
79041: AND
79042: IFFALSE 79054
79044: GO 79046
79046: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
79047: LD_STRING earthquake(getX(game), 0, 32)
79049: PPUSH
79050: CALL_OW 559
79054: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
79055: LD_EXP 108
79059: PUSH
79060: LD_EXP 149
79064: AND
79065: IFFALSE 79156
79067: GO 79069
79069: DISABLE
79070: LD_INT 0
79072: PPUSH
// begin enable ;
79073: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
79074: LD_ADDR_VAR 0 1
79078: PUSH
79079: LD_INT 22
79081: PUSH
79082: LD_OWVAR 2
79086: PUSH
79087: EMPTY
79088: LIST
79089: LIST
79090: PUSH
79091: LD_INT 21
79093: PUSH
79094: LD_INT 2
79096: PUSH
79097: EMPTY
79098: LIST
79099: LIST
79100: PUSH
79101: LD_INT 33
79103: PUSH
79104: LD_INT 3
79106: PUSH
79107: EMPTY
79108: LIST
79109: LIST
79110: PUSH
79111: EMPTY
79112: LIST
79113: LIST
79114: LIST
79115: PPUSH
79116: CALL_OW 69
79120: ST_TO_ADDR
// if not tmp then
79121: LD_VAR 0 1
79125: NOT
79126: IFFALSE 79130
// exit ;
79128: GO 79156
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
79130: LD_VAR 0 1
79134: PUSH
79135: LD_INT 1
79137: PPUSH
79138: LD_VAR 0 1
79142: PPUSH
79143: CALL_OW 12
79147: ARRAY
79148: PPUSH
79149: LD_INT 1
79151: PPUSH
79152: CALL_OW 234
// end ;
79156: PPOPN 1
79158: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
79159: LD_EXP 108
79163: PUSH
79164: LD_EXP 150
79168: AND
79169: IFFALSE 79310
79171: GO 79173
79173: DISABLE
79174: LD_INT 0
79176: PPUSH
79177: PPUSH
79178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79179: LD_ADDR_VAR 0 3
79183: PUSH
79184: LD_INT 22
79186: PUSH
79187: LD_OWVAR 2
79191: PUSH
79192: EMPTY
79193: LIST
79194: LIST
79195: PUSH
79196: LD_INT 25
79198: PUSH
79199: LD_INT 1
79201: PUSH
79202: EMPTY
79203: LIST
79204: LIST
79205: PUSH
79206: EMPTY
79207: LIST
79208: LIST
79209: PPUSH
79210: CALL_OW 69
79214: ST_TO_ADDR
// if not tmp then
79215: LD_VAR 0 3
79219: NOT
79220: IFFALSE 79224
// exit ;
79222: GO 79310
// un := tmp [ rand ( 1 , tmp ) ] ;
79224: LD_ADDR_VAR 0 2
79228: PUSH
79229: LD_VAR 0 3
79233: PUSH
79234: LD_INT 1
79236: PPUSH
79237: LD_VAR 0 3
79241: PPUSH
79242: CALL_OW 12
79246: ARRAY
79247: ST_TO_ADDR
// if Crawls ( un ) then
79248: LD_VAR 0 2
79252: PPUSH
79253: CALL_OW 318
79257: IFFALSE 79268
// ComWalk ( un ) ;
79259: LD_VAR 0 2
79263: PPUSH
79264: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
79268: LD_VAR 0 2
79272: PPUSH
79273: LD_INT 9
79275: PPUSH
79276: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
79280: LD_INT 28
79282: PPUSH
79283: LD_OWVAR 2
79287: PPUSH
79288: LD_INT 2
79290: PPUSH
79291: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
79295: LD_INT 29
79297: PPUSH
79298: LD_OWVAR 2
79302: PPUSH
79303: LD_INT 2
79305: PPUSH
79306: CALL_OW 322
// end ;
79310: PPOPN 3
79312: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
79313: LD_EXP 108
79317: PUSH
79318: LD_EXP 151
79322: AND
79323: IFFALSE 79434
79325: GO 79327
79327: DISABLE
79328: LD_INT 0
79330: PPUSH
79331: PPUSH
79332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79333: LD_ADDR_VAR 0 3
79337: PUSH
79338: LD_INT 22
79340: PUSH
79341: LD_OWVAR 2
79345: PUSH
79346: EMPTY
79347: LIST
79348: LIST
79349: PUSH
79350: LD_INT 25
79352: PUSH
79353: LD_INT 1
79355: PUSH
79356: EMPTY
79357: LIST
79358: LIST
79359: PUSH
79360: EMPTY
79361: LIST
79362: LIST
79363: PPUSH
79364: CALL_OW 69
79368: ST_TO_ADDR
// if not tmp then
79369: LD_VAR 0 3
79373: NOT
79374: IFFALSE 79378
// exit ;
79376: GO 79434
// un := tmp [ rand ( 1 , tmp ) ] ;
79378: LD_ADDR_VAR 0 2
79382: PUSH
79383: LD_VAR 0 3
79387: PUSH
79388: LD_INT 1
79390: PPUSH
79391: LD_VAR 0 3
79395: PPUSH
79396: CALL_OW 12
79400: ARRAY
79401: ST_TO_ADDR
// if Crawls ( un ) then
79402: LD_VAR 0 2
79406: PPUSH
79407: CALL_OW 318
79411: IFFALSE 79422
// ComWalk ( un ) ;
79413: LD_VAR 0 2
79417: PPUSH
79418: CALL_OW 138
// SetClass ( un , class_mortar ) ;
79422: LD_VAR 0 2
79426: PPUSH
79427: LD_INT 8
79429: PPUSH
79430: CALL_OW 336
// end ;
79434: PPOPN 3
79436: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
79437: LD_EXP 108
79441: PUSH
79442: LD_EXP 152
79446: AND
79447: IFFALSE 79591
79449: GO 79451
79451: DISABLE
79452: LD_INT 0
79454: PPUSH
79455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
79456: LD_ADDR_VAR 0 2
79460: PUSH
79461: LD_INT 22
79463: PUSH
79464: LD_OWVAR 2
79468: PUSH
79469: EMPTY
79470: LIST
79471: LIST
79472: PUSH
79473: LD_INT 21
79475: PUSH
79476: LD_INT 2
79478: PUSH
79479: EMPTY
79480: LIST
79481: LIST
79482: PUSH
79483: LD_INT 2
79485: PUSH
79486: LD_INT 34
79488: PUSH
79489: LD_INT 12
79491: PUSH
79492: EMPTY
79493: LIST
79494: LIST
79495: PUSH
79496: LD_INT 34
79498: PUSH
79499: LD_INT 51
79501: PUSH
79502: EMPTY
79503: LIST
79504: LIST
79505: PUSH
79506: LD_INT 34
79508: PUSH
79509: LD_INT 32
79511: PUSH
79512: EMPTY
79513: LIST
79514: LIST
79515: PUSH
79516: EMPTY
79517: LIST
79518: LIST
79519: LIST
79520: LIST
79521: PUSH
79522: EMPTY
79523: LIST
79524: LIST
79525: LIST
79526: PPUSH
79527: CALL_OW 69
79531: ST_TO_ADDR
// if not tmp then
79532: LD_VAR 0 2
79536: NOT
79537: IFFALSE 79541
// exit ;
79539: GO 79591
// for i in tmp do
79541: LD_ADDR_VAR 0 1
79545: PUSH
79546: LD_VAR 0 2
79550: PUSH
79551: FOR_IN
79552: IFFALSE 79589
// if GetCargo ( i , mat_artifact ) = 0 then
79554: LD_VAR 0 1
79558: PPUSH
79559: LD_INT 4
79561: PPUSH
79562: CALL_OW 289
79566: PUSH
79567: LD_INT 0
79569: EQUAL
79570: IFFALSE 79587
// SetCargo ( i , mat_siberit , 100 ) ;
79572: LD_VAR 0 1
79576: PPUSH
79577: LD_INT 3
79579: PPUSH
79580: LD_INT 100
79582: PPUSH
79583: CALL_OW 290
79587: GO 79551
79589: POP
79590: POP
// end ;
79591: PPOPN 2
79593: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
79594: LD_EXP 108
79598: PUSH
79599: LD_EXP 153
79603: AND
79604: IFFALSE 79787
79606: GO 79608
79608: DISABLE
79609: LD_INT 0
79611: PPUSH
79612: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
79613: LD_ADDR_VAR 0 2
79617: PUSH
79618: LD_INT 22
79620: PUSH
79621: LD_OWVAR 2
79625: PUSH
79626: EMPTY
79627: LIST
79628: LIST
79629: PPUSH
79630: CALL_OW 69
79634: ST_TO_ADDR
// if not tmp then
79635: LD_VAR 0 2
79639: NOT
79640: IFFALSE 79644
// exit ;
79642: GO 79787
// for i := 1 to 2 do
79644: LD_ADDR_VAR 0 1
79648: PUSH
79649: DOUBLE
79650: LD_INT 1
79652: DEC
79653: ST_TO_ADDR
79654: LD_INT 2
79656: PUSH
79657: FOR_TO
79658: IFFALSE 79785
// begin uc_side := your_side ;
79660: LD_ADDR_OWVAR 20
79664: PUSH
79665: LD_OWVAR 2
79669: ST_TO_ADDR
// uc_nation := nation_american ;
79670: LD_ADDR_OWVAR 21
79674: PUSH
79675: LD_INT 1
79677: ST_TO_ADDR
// vc_chassis := us_morphling ;
79678: LD_ADDR_OWVAR 37
79682: PUSH
79683: LD_INT 5
79685: ST_TO_ADDR
// vc_engine := engine_siberite ;
79686: LD_ADDR_OWVAR 39
79690: PUSH
79691: LD_INT 3
79693: ST_TO_ADDR
// vc_control := control_computer ;
79694: LD_ADDR_OWVAR 38
79698: PUSH
79699: LD_INT 3
79701: ST_TO_ADDR
// vc_weapon := us_double_laser ;
79702: LD_ADDR_OWVAR 40
79706: PUSH
79707: LD_INT 10
79709: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
79710: LD_VAR 0 2
79714: PUSH
79715: LD_INT 1
79717: ARRAY
79718: PPUSH
79719: CALL_OW 310
79723: NOT
79724: IFFALSE 79771
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
79726: CALL_OW 45
79730: PPUSH
79731: LD_VAR 0 2
79735: PUSH
79736: LD_INT 1
79738: ARRAY
79739: PPUSH
79740: CALL_OW 250
79744: PPUSH
79745: LD_VAR 0 2
79749: PUSH
79750: LD_INT 1
79752: ARRAY
79753: PPUSH
79754: CALL_OW 251
79758: PPUSH
79759: LD_INT 12
79761: PPUSH
79762: LD_INT 1
79764: PPUSH
79765: CALL_OW 50
79769: GO 79783
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
79771: CALL_OW 45
79775: PPUSH
79776: LD_INT 1
79778: PPUSH
79779: CALL_OW 51
// end ;
79783: GO 79657
79785: POP
79786: POP
// end ;
79787: PPOPN 2
79789: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
79790: LD_EXP 108
79794: PUSH
79795: LD_EXP 154
79799: AND
79800: IFFALSE 80022
79802: GO 79804
79804: DISABLE
79805: LD_INT 0
79807: PPUSH
79808: PPUSH
79809: PPUSH
79810: PPUSH
79811: PPUSH
79812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79813: LD_ADDR_VAR 0 6
79817: PUSH
79818: LD_INT 22
79820: PUSH
79821: LD_OWVAR 2
79825: PUSH
79826: EMPTY
79827: LIST
79828: LIST
79829: PUSH
79830: LD_INT 21
79832: PUSH
79833: LD_INT 1
79835: PUSH
79836: EMPTY
79837: LIST
79838: LIST
79839: PUSH
79840: LD_INT 3
79842: PUSH
79843: LD_INT 23
79845: PUSH
79846: LD_INT 0
79848: PUSH
79849: EMPTY
79850: LIST
79851: LIST
79852: PUSH
79853: EMPTY
79854: LIST
79855: LIST
79856: PUSH
79857: EMPTY
79858: LIST
79859: LIST
79860: LIST
79861: PPUSH
79862: CALL_OW 69
79866: ST_TO_ADDR
// if not tmp then
79867: LD_VAR 0 6
79871: NOT
79872: IFFALSE 79876
// exit ;
79874: GO 80022
// s1 := rand ( 1 , 4 ) ;
79876: LD_ADDR_VAR 0 2
79880: PUSH
79881: LD_INT 1
79883: PPUSH
79884: LD_INT 4
79886: PPUSH
79887: CALL_OW 12
79891: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
79892: LD_ADDR_VAR 0 4
79896: PUSH
79897: LD_VAR 0 6
79901: PUSH
79902: LD_INT 1
79904: ARRAY
79905: PPUSH
79906: LD_VAR 0 2
79910: PPUSH
79911: CALL_OW 259
79915: ST_TO_ADDR
// if s1 = 1 then
79916: LD_VAR 0 2
79920: PUSH
79921: LD_INT 1
79923: EQUAL
79924: IFFALSE 79944
// s2 := rand ( 2 , 4 ) else
79926: LD_ADDR_VAR 0 3
79930: PUSH
79931: LD_INT 2
79933: PPUSH
79934: LD_INT 4
79936: PPUSH
79937: CALL_OW 12
79941: ST_TO_ADDR
79942: GO 79952
// s2 := 1 ;
79944: LD_ADDR_VAR 0 3
79948: PUSH
79949: LD_INT 1
79951: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
79952: LD_ADDR_VAR 0 5
79956: PUSH
79957: LD_VAR 0 6
79961: PUSH
79962: LD_INT 1
79964: ARRAY
79965: PPUSH
79966: LD_VAR 0 3
79970: PPUSH
79971: CALL_OW 259
79975: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
79976: LD_VAR 0 6
79980: PUSH
79981: LD_INT 1
79983: ARRAY
79984: PPUSH
79985: LD_VAR 0 2
79989: PPUSH
79990: LD_VAR 0 5
79994: PPUSH
79995: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
79999: LD_VAR 0 6
80003: PUSH
80004: LD_INT 1
80006: ARRAY
80007: PPUSH
80008: LD_VAR 0 3
80012: PPUSH
80013: LD_VAR 0 4
80017: PPUSH
80018: CALL_OW 237
// end ;
80022: PPOPN 6
80024: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
80025: LD_EXP 108
80029: PUSH
80030: LD_EXP 155
80034: AND
80035: IFFALSE 80114
80037: GO 80039
80039: DISABLE
80040: LD_INT 0
80042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
80043: LD_ADDR_VAR 0 1
80047: PUSH
80048: LD_INT 22
80050: PUSH
80051: LD_OWVAR 2
80055: PUSH
80056: EMPTY
80057: LIST
80058: LIST
80059: PUSH
80060: LD_INT 30
80062: PUSH
80063: LD_INT 3
80065: PUSH
80066: EMPTY
80067: LIST
80068: LIST
80069: PUSH
80070: EMPTY
80071: LIST
80072: LIST
80073: PPUSH
80074: CALL_OW 69
80078: ST_TO_ADDR
// if not tmp then
80079: LD_VAR 0 1
80083: NOT
80084: IFFALSE 80088
// exit ;
80086: GO 80114
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
80088: LD_VAR 0 1
80092: PUSH
80093: LD_INT 1
80095: PPUSH
80096: LD_VAR 0 1
80100: PPUSH
80101: CALL_OW 12
80105: ARRAY
80106: PPUSH
80107: LD_INT 1
80109: PPUSH
80110: CALL_OW 234
// end ;
80114: PPOPN 1
80116: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
80117: LD_EXP 108
80121: PUSH
80122: LD_EXP 156
80126: AND
80127: IFFALSE 80239
80129: GO 80131
80131: DISABLE
80132: LD_INT 0
80134: PPUSH
80135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
80136: LD_ADDR_VAR 0 2
80140: PUSH
80141: LD_INT 22
80143: PUSH
80144: LD_OWVAR 2
80148: PUSH
80149: EMPTY
80150: LIST
80151: LIST
80152: PUSH
80153: LD_INT 2
80155: PUSH
80156: LD_INT 30
80158: PUSH
80159: LD_INT 27
80161: PUSH
80162: EMPTY
80163: LIST
80164: LIST
80165: PUSH
80166: LD_INT 30
80168: PUSH
80169: LD_INT 26
80171: PUSH
80172: EMPTY
80173: LIST
80174: LIST
80175: PUSH
80176: LD_INT 30
80178: PUSH
80179: LD_INT 28
80181: PUSH
80182: EMPTY
80183: LIST
80184: LIST
80185: PUSH
80186: EMPTY
80187: LIST
80188: LIST
80189: LIST
80190: LIST
80191: PUSH
80192: EMPTY
80193: LIST
80194: LIST
80195: PPUSH
80196: CALL_OW 69
80200: ST_TO_ADDR
// if not tmp then
80201: LD_VAR 0 2
80205: NOT
80206: IFFALSE 80210
// exit ;
80208: GO 80239
// for i in tmp do
80210: LD_ADDR_VAR 0 1
80214: PUSH
80215: LD_VAR 0 2
80219: PUSH
80220: FOR_IN
80221: IFFALSE 80237
// SetLives ( i , 1 ) ;
80223: LD_VAR 0 1
80227: PPUSH
80228: LD_INT 1
80230: PPUSH
80231: CALL_OW 234
80235: GO 80220
80237: POP
80238: POP
// end ;
80239: PPOPN 2
80241: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
80242: LD_EXP 108
80246: PUSH
80247: LD_EXP 157
80251: AND
80252: IFFALSE 80526
80254: GO 80256
80256: DISABLE
80257: LD_INT 0
80259: PPUSH
80260: PPUSH
80261: PPUSH
// begin i := rand ( 1 , 7 ) ;
80262: LD_ADDR_VAR 0 1
80266: PUSH
80267: LD_INT 1
80269: PPUSH
80270: LD_INT 7
80272: PPUSH
80273: CALL_OW 12
80277: ST_TO_ADDR
// case i of 1 :
80278: LD_VAR 0 1
80282: PUSH
80283: LD_INT 1
80285: DOUBLE
80286: EQUAL
80287: IFTRUE 80291
80289: GO 80301
80291: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
80292: LD_STRING earthquake(getX(game), 0, 32)
80294: PPUSH
80295: CALL_OW 559
80299: GO 80526
80301: LD_INT 2
80303: DOUBLE
80304: EQUAL
80305: IFTRUE 80309
80307: GO 80323
80309: POP
// begin ToLua ( displayStucuk(); ) ;
80310: LD_STRING displayStucuk();
80312: PPUSH
80313: CALL_OW 559
// ResetFog ;
80317: CALL_OW 335
// end ; 3 :
80321: GO 80526
80323: LD_INT 3
80325: DOUBLE
80326: EQUAL
80327: IFTRUE 80331
80329: GO 80435
80331: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
80332: LD_ADDR_VAR 0 2
80336: PUSH
80337: LD_INT 22
80339: PUSH
80340: LD_OWVAR 2
80344: PUSH
80345: EMPTY
80346: LIST
80347: LIST
80348: PUSH
80349: LD_INT 25
80351: PUSH
80352: LD_INT 1
80354: PUSH
80355: EMPTY
80356: LIST
80357: LIST
80358: PUSH
80359: EMPTY
80360: LIST
80361: LIST
80362: PPUSH
80363: CALL_OW 69
80367: ST_TO_ADDR
// if not tmp then
80368: LD_VAR 0 2
80372: NOT
80373: IFFALSE 80377
// exit ;
80375: GO 80526
// un := tmp [ rand ( 1 , tmp ) ] ;
80377: LD_ADDR_VAR 0 3
80381: PUSH
80382: LD_VAR 0 2
80386: PUSH
80387: LD_INT 1
80389: PPUSH
80390: LD_VAR 0 2
80394: PPUSH
80395: CALL_OW 12
80399: ARRAY
80400: ST_TO_ADDR
// if Crawls ( un ) then
80401: LD_VAR 0 3
80405: PPUSH
80406: CALL_OW 318
80410: IFFALSE 80421
// ComWalk ( un ) ;
80412: LD_VAR 0 3
80416: PPUSH
80417: CALL_OW 138
// SetClass ( un , class_mortar ) ;
80421: LD_VAR 0 3
80425: PPUSH
80426: LD_INT 8
80428: PPUSH
80429: CALL_OW 336
// end ; 4 :
80433: GO 80526
80435: LD_INT 4
80437: DOUBLE
80438: EQUAL
80439: IFTRUE 80443
80441: GO 80504
80443: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
80444: LD_ADDR_VAR 0 2
80448: PUSH
80449: LD_INT 22
80451: PUSH
80452: LD_OWVAR 2
80456: PUSH
80457: EMPTY
80458: LIST
80459: LIST
80460: PUSH
80461: LD_INT 30
80463: PUSH
80464: LD_INT 29
80466: PUSH
80467: EMPTY
80468: LIST
80469: LIST
80470: PUSH
80471: EMPTY
80472: LIST
80473: LIST
80474: PPUSH
80475: CALL_OW 69
80479: ST_TO_ADDR
// if not tmp then
80480: LD_VAR 0 2
80484: NOT
80485: IFFALSE 80489
// exit ;
80487: GO 80526
// DestroyUnit ( tmp [ 1 ] ) ;
80489: LD_VAR 0 2
80493: PUSH
80494: LD_INT 1
80496: ARRAY
80497: PPUSH
80498: CALL_OW 65
// end ; 5 .. 7 :
80502: GO 80526
80504: LD_INT 5
80506: DOUBLE
80507: GREATEREQUAL
80508: IFFALSE 80516
80510: LD_INT 7
80512: DOUBLE
80513: LESSEQUAL
80514: IFTRUE 80518
80516: GO 80525
80518: POP
// StreamSibBomb ; end ;
80519: CALL 76776 0 0
80523: GO 80526
80525: POP
// end ;
80526: PPOPN 3
80528: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
80529: LD_EXP 108
80533: PUSH
80534: LD_EXP 158
80538: AND
80539: IFFALSE 80695
80541: GO 80543
80543: DISABLE
80544: LD_INT 0
80546: PPUSH
80547: PPUSH
80548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
80549: LD_ADDR_VAR 0 2
80553: PUSH
80554: LD_INT 81
80556: PUSH
80557: LD_OWVAR 2
80561: PUSH
80562: EMPTY
80563: LIST
80564: LIST
80565: PUSH
80566: LD_INT 2
80568: PUSH
80569: LD_INT 21
80571: PUSH
80572: LD_INT 1
80574: PUSH
80575: EMPTY
80576: LIST
80577: LIST
80578: PUSH
80579: LD_INT 21
80581: PUSH
80582: LD_INT 2
80584: PUSH
80585: EMPTY
80586: LIST
80587: LIST
80588: PUSH
80589: EMPTY
80590: LIST
80591: LIST
80592: LIST
80593: PUSH
80594: EMPTY
80595: LIST
80596: LIST
80597: PPUSH
80598: CALL_OW 69
80602: ST_TO_ADDR
// if not tmp then
80603: LD_VAR 0 2
80607: NOT
80608: IFFALSE 80612
// exit ;
80610: GO 80695
// p := 0 ;
80612: LD_ADDR_VAR 0 3
80616: PUSH
80617: LD_INT 0
80619: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
80620: LD_INT 35
80622: PPUSH
80623: CALL_OW 67
// p := p + 1 ;
80627: LD_ADDR_VAR 0 3
80631: PUSH
80632: LD_VAR 0 3
80636: PUSH
80637: LD_INT 1
80639: PLUS
80640: ST_TO_ADDR
// for i in tmp do
80641: LD_ADDR_VAR 0 1
80645: PUSH
80646: LD_VAR 0 2
80650: PUSH
80651: FOR_IN
80652: IFFALSE 80683
// if GetLives ( i ) < 1000 then
80654: LD_VAR 0 1
80658: PPUSH
80659: CALL_OW 256
80663: PUSH
80664: LD_INT 1000
80666: LESS
80667: IFFALSE 80681
// SetLives ( i , 1000 ) ;
80669: LD_VAR 0 1
80673: PPUSH
80674: LD_INT 1000
80676: PPUSH
80677: CALL_OW 234
80681: GO 80651
80683: POP
80684: POP
// until p > 20 ;
80685: LD_VAR 0 3
80689: PUSH
80690: LD_INT 20
80692: GREATER
80693: IFFALSE 80620
// end ;
80695: PPOPN 3
80697: END
// every 0 0$1 trigger StreamModeActive and sTime do
80698: LD_EXP 108
80702: PUSH
80703: LD_EXP 159
80707: AND
80708: IFFALSE 80743
80710: GO 80712
80712: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
80713: LD_INT 28
80715: PPUSH
80716: LD_OWVAR 2
80720: PPUSH
80721: LD_INT 2
80723: PPUSH
80724: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
80728: LD_INT 30
80730: PPUSH
80731: LD_OWVAR 2
80735: PPUSH
80736: LD_INT 2
80738: PPUSH
80739: CALL_OW 322
// end ;
80743: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
80744: LD_EXP 108
80748: PUSH
80749: LD_EXP 160
80753: AND
80754: IFFALSE 80875
80756: GO 80758
80758: DISABLE
80759: LD_INT 0
80761: PPUSH
80762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
80763: LD_ADDR_VAR 0 2
80767: PUSH
80768: LD_INT 22
80770: PUSH
80771: LD_OWVAR 2
80775: PUSH
80776: EMPTY
80777: LIST
80778: LIST
80779: PUSH
80780: LD_INT 21
80782: PUSH
80783: LD_INT 1
80785: PUSH
80786: EMPTY
80787: LIST
80788: LIST
80789: PUSH
80790: LD_INT 3
80792: PUSH
80793: LD_INT 23
80795: PUSH
80796: LD_INT 0
80798: PUSH
80799: EMPTY
80800: LIST
80801: LIST
80802: PUSH
80803: EMPTY
80804: LIST
80805: LIST
80806: PUSH
80807: EMPTY
80808: LIST
80809: LIST
80810: LIST
80811: PPUSH
80812: CALL_OW 69
80816: ST_TO_ADDR
// if not tmp then
80817: LD_VAR 0 2
80821: NOT
80822: IFFALSE 80826
// exit ;
80824: GO 80875
// for i in tmp do
80826: LD_ADDR_VAR 0 1
80830: PUSH
80831: LD_VAR 0 2
80835: PUSH
80836: FOR_IN
80837: IFFALSE 80873
// begin if Crawls ( i ) then
80839: LD_VAR 0 1
80843: PPUSH
80844: CALL_OW 318
80848: IFFALSE 80859
// ComWalk ( i ) ;
80850: LD_VAR 0 1
80854: PPUSH
80855: CALL_OW 138
// SetClass ( i , 2 ) ;
80859: LD_VAR 0 1
80863: PPUSH
80864: LD_INT 2
80866: PPUSH
80867: CALL_OW 336
// end ;
80871: GO 80836
80873: POP
80874: POP
// end ;
80875: PPOPN 2
80877: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
80878: LD_EXP 108
80882: PUSH
80883: LD_EXP 161
80887: AND
80888: IFFALSE 81169
80890: GO 80892
80892: DISABLE
80893: LD_INT 0
80895: PPUSH
80896: PPUSH
80897: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
80898: LD_OWVAR 2
80902: PPUSH
80903: LD_INT 9
80905: PPUSH
80906: LD_INT 1
80908: PPUSH
80909: LD_INT 1
80911: PPUSH
80912: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
80916: LD_INT 9
80918: PPUSH
80919: LD_OWVAR 2
80923: PPUSH
80924: CALL_OW 343
// uc_side := 9 ;
80928: LD_ADDR_OWVAR 20
80932: PUSH
80933: LD_INT 9
80935: ST_TO_ADDR
// uc_nation := 2 ;
80936: LD_ADDR_OWVAR 21
80940: PUSH
80941: LD_INT 2
80943: ST_TO_ADDR
// hc_name := Dark Warrior ;
80944: LD_ADDR_OWVAR 26
80948: PUSH
80949: LD_STRING Dark Warrior
80951: ST_TO_ADDR
// hc_gallery :=  ;
80952: LD_ADDR_OWVAR 33
80956: PUSH
80957: LD_STRING 
80959: ST_TO_ADDR
// hc_noskilllimit := true ;
80960: LD_ADDR_OWVAR 76
80964: PUSH
80965: LD_INT 1
80967: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
80968: LD_ADDR_OWVAR 31
80972: PUSH
80973: LD_INT 30
80975: PUSH
80976: LD_INT 30
80978: PUSH
80979: LD_INT 30
80981: PUSH
80982: LD_INT 30
80984: PUSH
80985: EMPTY
80986: LIST
80987: LIST
80988: LIST
80989: LIST
80990: ST_TO_ADDR
// un := CreateHuman ;
80991: LD_ADDR_VAR 0 3
80995: PUSH
80996: CALL_OW 44
81000: ST_TO_ADDR
// hc_noskilllimit := false ;
81001: LD_ADDR_OWVAR 76
81005: PUSH
81006: LD_INT 0
81008: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
81009: LD_VAR 0 3
81013: PPUSH
81014: LD_INT 1
81016: PPUSH
81017: CALL_OW 51
// p := 0 ;
81021: LD_ADDR_VAR 0 2
81025: PUSH
81026: LD_INT 0
81028: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
81029: LD_INT 35
81031: PPUSH
81032: CALL_OW 67
// p := p + 1 ;
81036: LD_ADDR_VAR 0 2
81040: PUSH
81041: LD_VAR 0 2
81045: PUSH
81046: LD_INT 1
81048: PLUS
81049: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
81050: LD_VAR 0 3
81054: PPUSH
81055: CALL_OW 256
81059: PUSH
81060: LD_INT 1000
81062: LESS
81063: IFFALSE 81077
// SetLives ( un , 1000 ) ;
81065: LD_VAR 0 3
81069: PPUSH
81070: LD_INT 1000
81072: PPUSH
81073: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
81077: LD_VAR 0 3
81081: PPUSH
81082: LD_INT 81
81084: PUSH
81085: LD_OWVAR 2
81089: PUSH
81090: EMPTY
81091: LIST
81092: LIST
81093: PUSH
81094: LD_INT 91
81096: PUSH
81097: LD_VAR 0 3
81101: PUSH
81102: LD_INT 30
81104: PUSH
81105: EMPTY
81106: LIST
81107: LIST
81108: LIST
81109: PUSH
81110: EMPTY
81111: LIST
81112: LIST
81113: PPUSH
81114: CALL_OW 69
81118: PPUSH
81119: LD_VAR 0 3
81123: PPUSH
81124: CALL_OW 74
81128: PPUSH
81129: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
81133: LD_VAR 0 2
81137: PUSH
81138: LD_INT 60
81140: GREATER
81141: PUSH
81142: LD_VAR 0 3
81146: PPUSH
81147: CALL_OW 301
81151: OR
81152: IFFALSE 81029
// if un then
81154: LD_VAR 0 3
81158: IFFALSE 81169
// RemoveUnit ( un ) ;
81160: LD_VAR 0 3
81164: PPUSH
81165: CALL_OW 64
// end ;
81169: PPOPN 3
81171: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
81172: LD_INT 0
81174: PPUSH
// case cmd of 301 :
81175: LD_VAR 0 1
81179: PUSH
81180: LD_INT 301
81182: DOUBLE
81183: EQUAL
81184: IFTRUE 81188
81186: GO 81220
81188: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
81189: LD_VAR 0 6
81193: PPUSH
81194: LD_VAR 0 7
81198: PPUSH
81199: LD_VAR 0 8
81203: PPUSH
81204: LD_VAR 0 4
81208: PPUSH
81209: LD_VAR 0 5
81213: PPUSH
81214: CALL 82421 0 5
81218: GO 81341
81220: LD_INT 302
81222: DOUBLE
81223: EQUAL
81224: IFTRUE 81228
81226: GO 81265
81228: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
81229: LD_VAR 0 6
81233: PPUSH
81234: LD_VAR 0 7
81238: PPUSH
81239: LD_VAR 0 8
81243: PPUSH
81244: LD_VAR 0 9
81248: PPUSH
81249: LD_VAR 0 4
81253: PPUSH
81254: LD_VAR 0 5
81258: PPUSH
81259: CALL 82512 0 6
81263: GO 81341
81265: LD_INT 303
81267: DOUBLE
81268: EQUAL
81269: IFTRUE 81273
81271: GO 81310
81273: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
81274: LD_VAR 0 6
81278: PPUSH
81279: LD_VAR 0 7
81283: PPUSH
81284: LD_VAR 0 8
81288: PPUSH
81289: LD_VAR 0 9
81293: PPUSH
81294: LD_VAR 0 4
81298: PPUSH
81299: LD_VAR 0 5
81303: PPUSH
81304: CALL 81346 0 6
81308: GO 81341
81310: LD_INT 304
81312: DOUBLE
81313: EQUAL
81314: IFTRUE 81318
81316: GO 81340
81318: POP
// hHackTeleport ( unit , x , y ) ; end ;
81319: LD_VAR 0 2
81323: PPUSH
81324: LD_VAR 0 4
81328: PPUSH
81329: LD_VAR 0 5
81333: PPUSH
81334: CALL 83105 0 3
81338: GO 81341
81340: POP
// end ;
81341: LD_VAR 0 12
81345: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
81346: LD_INT 0
81348: PPUSH
81349: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
81350: LD_VAR 0 1
81354: PUSH
81355: LD_INT 1
81357: LESS
81358: PUSH
81359: LD_VAR 0 1
81363: PUSH
81364: LD_INT 3
81366: GREATER
81367: OR
81368: PUSH
81369: LD_VAR 0 5
81373: PPUSH
81374: LD_VAR 0 6
81378: PPUSH
81379: CALL_OW 428
81383: OR
81384: IFFALSE 81388
// exit ;
81386: GO 82108
// uc_side := your_side ;
81388: LD_ADDR_OWVAR 20
81392: PUSH
81393: LD_OWVAR 2
81397: ST_TO_ADDR
// uc_nation := nation ;
81398: LD_ADDR_OWVAR 21
81402: PUSH
81403: LD_VAR 0 1
81407: ST_TO_ADDR
// bc_level = 1 ;
81408: LD_ADDR_OWVAR 43
81412: PUSH
81413: LD_INT 1
81415: ST_TO_ADDR
// case btype of 1 :
81416: LD_VAR 0 2
81420: PUSH
81421: LD_INT 1
81423: DOUBLE
81424: EQUAL
81425: IFTRUE 81429
81427: GO 81440
81429: POP
// bc_type := b_depot ; 2 :
81430: LD_ADDR_OWVAR 42
81434: PUSH
81435: LD_INT 0
81437: ST_TO_ADDR
81438: GO 82052
81440: LD_INT 2
81442: DOUBLE
81443: EQUAL
81444: IFTRUE 81448
81446: GO 81459
81448: POP
// bc_type := b_warehouse ; 3 :
81449: LD_ADDR_OWVAR 42
81453: PUSH
81454: LD_INT 1
81456: ST_TO_ADDR
81457: GO 82052
81459: LD_INT 3
81461: DOUBLE
81462: EQUAL
81463: IFTRUE 81467
81465: GO 81478
81467: POP
// bc_type := b_lab ; 4 .. 9 :
81468: LD_ADDR_OWVAR 42
81472: PUSH
81473: LD_INT 6
81475: ST_TO_ADDR
81476: GO 82052
81478: LD_INT 4
81480: DOUBLE
81481: GREATEREQUAL
81482: IFFALSE 81490
81484: LD_INT 9
81486: DOUBLE
81487: LESSEQUAL
81488: IFTRUE 81492
81490: GO 81544
81492: POP
// begin bc_type := b_lab_half ;
81493: LD_ADDR_OWVAR 42
81497: PUSH
81498: LD_INT 7
81500: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
81501: LD_ADDR_OWVAR 44
81505: PUSH
81506: LD_INT 10
81508: PUSH
81509: LD_INT 11
81511: PUSH
81512: LD_INT 12
81514: PUSH
81515: LD_INT 15
81517: PUSH
81518: LD_INT 14
81520: PUSH
81521: LD_INT 13
81523: PUSH
81524: EMPTY
81525: LIST
81526: LIST
81527: LIST
81528: LIST
81529: LIST
81530: LIST
81531: PUSH
81532: LD_VAR 0 2
81536: PUSH
81537: LD_INT 3
81539: MINUS
81540: ARRAY
81541: ST_TO_ADDR
// end ; 10 .. 13 :
81542: GO 82052
81544: LD_INT 10
81546: DOUBLE
81547: GREATEREQUAL
81548: IFFALSE 81556
81550: LD_INT 13
81552: DOUBLE
81553: LESSEQUAL
81554: IFTRUE 81558
81556: GO 81635
81558: POP
// begin bc_type := b_lab_full ;
81559: LD_ADDR_OWVAR 42
81563: PUSH
81564: LD_INT 8
81566: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
81567: LD_ADDR_OWVAR 44
81571: PUSH
81572: LD_INT 10
81574: PUSH
81575: LD_INT 12
81577: PUSH
81578: LD_INT 14
81580: PUSH
81581: LD_INT 13
81583: PUSH
81584: EMPTY
81585: LIST
81586: LIST
81587: LIST
81588: LIST
81589: PUSH
81590: LD_VAR 0 2
81594: PUSH
81595: LD_INT 9
81597: MINUS
81598: ARRAY
81599: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
81600: LD_ADDR_OWVAR 45
81604: PUSH
81605: LD_INT 11
81607: PUSH
81608: LD_INT 15
81610: PUSH
81611: LD_INT 12
81613: PUSH
81614: LD_INT 15
81616: PUSH
81617: EMPTY
81618: LIST
81619: LIST
81620: LIST
81621: LIST
81622: PUSH
81623: LD_VAR 0 2
81627: PUSH
81628: LD_INT 9
81630: MINUS
81631: ARRAY
81632: ST_TO_ADDR
// end ; 14 :
81633: GO 82052
81635: LD_INT 14
81637: DOUBLE
81638: EQUAL
81639: IFTRUE 81643
81641: GO 81654
81643: POP
// bc_type := b_workshop ; 15 :
81644: LD_ADDR_OWVAR 42
81648: PUSH
81649: LD_INT 2
81651: ST_TO_ADDR
81652: GO 82052
81654: LD_INT 15
81656: DOUBLE
81657: EQUAL
81658: IFTRUE 81662
81660: GO 81673
81662: POP
// bc_type := b_factory ; 16 :
81663: LD_ADDR_OWVAR 42
81667: PUSH
81668: LD_INT 3
81670: ST_TO_ADDR
81671: GO 82052
81673: LD_INT 16
81675: DOUBLE
81676: EQUAL
81677: IFTRUE 81681
81679: GO 81692
81681: POP
// bc_type := b_ext_gun ; 17 :
81682: LD_ADDR_OWVAR 42
81686: PUSH
81687: LD_INT 17
81689: ST_TO_ADDR
81690: GO 82052
81692: LD_INT 17
81694: DOUBLE
81695: EQUAL
81696: IFTRUE 81700
81698: GO 81728
81700: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
81701: LD_ADDR_OWVAR 42
81705: PUSH
81706: LD_INT 19
81708: PUSH
81709: LD_INT 23
81711: PUSH
81712: LD_INT 19
81714: PUSH
81715: EMPTY
81716: LIST
81717: LIST
81718: LIST
81719: PUSH
81720: LD_VAR 0 1
81724: ARRAY
81725: ST_TO_ADDR
81726: GO 82052
81728: LD_INT 18
81730: DOUBLE
81731: EQUAL
81732: IFTRUE 81736
81734: GO 81747
81736: POP
// bc_type := b_ext_radar ; 19 :
81737: LD_ADDR_OWVAR 42
81741: PUSH
81742: LD_INT 20
81744: ST_TO_ADDR
81745: GO 82052
81747: LD_INT 19
81749: DOUBLE
81750: EQUAL
81751: IFTRUE 81755
81753: GO 81766
81755: POP
// bc_type := b_ext_radio ; 20 :
81756: LD_ADDR_OWVAR 42
81760: PUSH
81761: LD_INT 22
81763: ST_TO_ADDR
81764: GO 82052
81766: LD_INT 20
81768: DOUBLE
81769: EQUAL
81770: IFTRUE 81774
81772: GO 81785
81774: POP
// bc_type := b_ext_siberium ; 21 :
81775: LD_ADDR_OWVAR 42
81779: PUSH
81780: LD_INT 21
81782: ST_TO_ADDR
81783: GO 82052
81785: LD_INT 21
81787: DOUBLE
81788: EQUAL
81789: IFTRUE 81793
81791: GO 81804
81793: POP
// bc_type := b_ext_computer ; 22 :
81794: LD_ADDR_OWVAR 42
81798: PUSH
81799: LD_INT 24
81801: ST_TO_ADDR
81802: GO 82052
81804: LD_INT 22
81806: DOUBLE
81807: EQUAL
81808: IFTRUE 81812
81810: GO 81823
81812: POP
// bc_type := b_ext_track ; 23 :
81813: LD_ADDR_OWVAR 42
81817: PUSH
81818: LD_INT 16
81820: ST_TO_ADDR
81821: GO 82052
81823: LD_INT 23
81825: DOUBLE
81826: EQUAL
81827: IFTRUE 81831
81829: GO 81842
81831: POP
// bc_type := b_ext_laser ; 24 :
81832: LD_ADDR_OWVAR 42
81836: PUSH
81837: LD_INT 25
81839: ST_TO_ADDR
81840: GO 82052
81842: LD_INT 24
81844: DOUBLE
81845: EQUAL
81846: IFTRUE 81850
81848: GO 81861
81850: POP
// bc_type := b_control_tower ; 25 :
81851: LD_ADDR_OWVAR 42
81855: PUSH
81856: LD_INT 36
81858: ST_TO_ADDR
81859: GO 82052
81861: LD_INT 25
81863: DOUBLE
81864: EQUAL
81865: IFTRUE 81869
81867: GO 81880
81869: POP
// bc_type := b_breastwork ; 26 :
81870: LD_ADDR_OWVAR 42
81874: PUSH
81875: LD_INT 31
81877: ST_TO_ADDR
81878: GO 82052
81880: LD_INT 26
81882: DOUBLE
81883: EQUAL
81884: IFTRUE 81888
81886: GO 81899
81888: POP
// bc_type := b_bunker ; 27 :
81889: LD_ADDR_OWVAR 42
81893: PUSH
81894: LD_INT 32
81896: ST_TO_ADDR
81897: GO 82052
81899: LD_INT 27
81901: DOUBLE
81902: EQUAL
81903: IFTRUE 81907
81905: GO 81918
81907: POP
// bc_type := b_turret ; 28 :
81908: LD_ADDR_OWVAR 42
81912: PUSH
81913: LD_INT 33
81915: ST_TO_ADDR
81916: GO 82052
81918: LD_INT 28
81920: DOUBLE
81921: EQUAL
81922: IFTRUE 81926
81924: GO 81937
81926: POP
// bc_type := b_armoury ; 29 :
81927: LD_ADDR_OWVAR 42
81931: PUSH
81932: LD_INT 4
81934: ST_TO_ADDR
81935: GO 82052
81937: LD_INT 29
81939: DOUBLE
81940: EQUAL
81941: IFTRUE 81945
81943: GO 81956
81945: POP
// bc_type := b_barracks ; 30 :
81946: LD_ADDR_OWVAR 42
81950: PUSH
81951: LD_INT 5
81953: ST_TO_ADDR
81954: GO 82052
81956: LD_INT 30
81958: DOUBLE
81959: EQUAL
81960: IFTRUE 81964
81962: GO 81975
81964: POP
// bc_type := b_solar_power ; 31 :
81965: LD_ADDR_OWVAR 42
81969: PUSH
81970: LD_INT 27
81972: ST_TO_ADDR
81973: GO 82052
81975: LD_INT 31
81977: DOUBLE
81978: EQUAL
81979: IFTRUE 81983
81981: GO 81994
81983: POP
// bc_type := b_oil_power ; 32 :
81984: LD_ADDR_OWVAR 42
81988: PUSH
81989: LD_INT 26
81991: ST_TO_ADDR
81992: GO 82052
81994: LD_INT 32
81996: DOUBLE
81997: EQUAL
81998: IFTRUE 82002
82000: GO 82013
82002: POP
// bc_type := b_siberite_power ; 33 :
82003: LD_ADDR_OWVAR 42
82007: PUSH
82008: LD_INT 28
82010: ST_TO_ADDR
82011: GO 82052
82013: LD_INT 33
82015: DOUBLE
82016: EQUAL
82017: IFTRUE 82021
82019: GO 82032
82021: POP
// bc_type := b_oil_mine ; 34 :
82022: LD_ADDR_OWVAR 42
82026: PUSH
82027: LD_INT 29
82029: ST_TO_ADDR
82030: GO 82052
82032: LD_INT 34
82034: DOUBLE
82035: EQUAL
82036: IFTRUE 82040
82038: GO 82051
82040: POP
// bc_type := b_siberite_mine ; end ;
82041: LD_ADDR_OWVAR 42
82045: PUSH
82046: LD_INT 30
82048: ST_TO_ADDR
82049: GO 82052
82051: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
82052: LD_ADDR_VAR 0 8
82056: PUSH
82057: LD_VAR 0 5
82061: PPUSH
82062: LD_VAR 0 6
82066: PPUSH
82067: LD_VAR 0 3
82071: PPUSH
82072: CALL_OW 47
82076: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
82077: LD_OWVAR 42
82081: PUSH
82082: LD_INT 32
82084: PUSH
82085: LD_INT 33
82087: PUSH
82088: EMPTY
82089: LIST
82090: LIST
82091: IN
82092: IFFALSE 82108
// PlaceWeaponTurret ( b , weapon ) ;
82094: LD_VAR 0 8
82098: PPUSH
82099: LD_VAR 0 4
82103: PPUSH
82104: CALL_OW 431
// end ;
82108: LD_VAR 0 7
82112: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
82113: LD_INT 0
82115: PPUSH
82116: PPUSH
82117: PPUSH
82118: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
82119: LD_ADDR_VAR 0 4
82123: PUSH
82124: LD_INT 22
82126: PUSH
82127: LD_OWVAR 2
82131: PUSH
82132: EMPTY
82133: LIST
82134: LIST
82135: PUSH
82136: LD_INT 2
82138: PUSH
82139: LD_INT 30
82141: PUSH
82142: LD_INT 0
82144: PUSH
82145: EMPTY
82146: LIST
82147: LIST
82148: PUSH
82149: LD_INT 30
82151: PUSH
82152: LD_INT 1
82154: PUSH
82155: EMPTY
82156: LIST
82157: LIST
82158: PUSH
82159: EMPTY
82160: LIST
82161: LIST
82162: LIST
82163: PUSH
82164: EMPTY
82165: LIST
82166: LIST
82167: PPUSH
82168: CALL_OW 69
82172: ST_TO_ADDR
// if not tmp then
82173: LD_VAR 0 4
82177: NOT
82178: IFFALSE 82182
// exit ;
82180: GO 82241
// for i in tmp do
82182: LD_ADDR_VAR 0 2
82186: PUSH
82187: LD_VAR 0 4
82191: PUSH
82192: FOR_IN
82193: IFFALSE 82239
// for j = 1 to 3 do
82195: LD_ADDR_VAR 0 3
82199: PUSH
82200: DOUBLE
82201: LD_INT 1
82203: DEC
82204: ST_TO_ADDR
82205: LD_INT 3
82207: PUSH
82208: FOR_TO
82209: IFFALSE 82235
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
82211: LD_VAR 0 2
82215: PPUSH
82216: CALL_OW 274
82220: PPUSH
82221: LD_VAR 0 3
82225: PPUSH
82226: LD_INT 99999
82228: PPUSH
82229: CALL_OW 277
82233: GO 82208
82235: POP
82236: POP
82237: GO 82192
82239: POP
82240: POP
// end ;
82241: LD_VAR 0 1
82245: RET
// export function hHackSetLevel10 ; var i , j ; begin
82246: LD_INT 0
82248: PPUSH
82249: PPUSH
82250: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
82251: LD_ADDR_VAR 0 2
82255: PUSH
82256: LD_INT 21
82258: PUSH
82259: LD_INT 1
82261: PUSH
82262: EMPTY
82263: LIST
82264: LIST
82265: PPUSH
82266: CALL_OW 69
82270: PUSH
82271: FOR_IN
82272: IFFALSE 82324
// if IsSelected ( i ) then
82274: LD_VAR 0 2
82278: PPUSH
82279: CALL_OW 306
82283: IFFALSE 82322
// begin for j := 1 to 4 do
82285: LD_ADDR_VAR 0 3
82289: PUSH
82290: DOUBLE
82291: LD_INT 1
82293: DEC
82294: ST_TO_ADDR
82295: LD_INT 4
82297: PUSH
82298: FOR_TO
82299: IFFALSE 82320
// SetSkill ( i , j , 10 ) ;
82301: LD_VAR 0 2
82305: PPUSH
82306: LD_VAR 0 3
82310: PPUSH
82311: LD_INT 10
82313: PPUSH
82314: CALL_OW 237
82318: GO 82298
82320: POP
82321: POP
// end ;
82322: GO 82271
82324: POP
82325: POP
// end ;
82326: LD_VAR 0 1
82330: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
82331: LD_INT 0
82333: PPUSH
82334: PPUSH
82335: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
82336: LD_ADDR_VAR 0 2
82340: PUSH
82341: LD_INT 22
82343: PUSH
82344: LD_OWVAR 2
82348: PUSH
82349: EMPTY
82350: LIST
82351: LIST
82352: PUSH
82353: LD_INT 21
82355: PUSH
82356: LD_INT 1
82358: PUSH
82359: EMPTY
82360: LIST
82361: LIST
82362: PUSH
82363: EMPTY
82364: LIST
82365: LIST
82366: PPUSH
82367: CALL_OW 69
82371: PUSH
82372: FOR_IN
82373: IFFALSE 82414
// begin for j := 1 to 4 do
82375: LD_ADDR_VAR 0 3
82379: PUSH
82380: DOUBLE
82381: LD_INT 1
82383: DEC
82384: ST_TO_ADDR
82385: LD_INT 4
82387: PUSH
82388: FOR_TO
82389: IFFALSE 82410
// SetSkill ( i , j , 10 ) ;
82391: LD_VAR 0 2
82395: PPUSH
82396: LD_VAR 0 3
82400: PPUSH
82401: LD_INT 10
82403: PPUSH
82404: CALL_OW 237
82408: GO 82388
82410: POP
82411: POP
// end ;
82412: GO 82372
82414: POP
82415: POP
// end ;
82416: LD_VAR 0 1
82420: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
82421: LD_INT 0
82423: PPUSH
// uc_side := your_side ;
82424: LD_ADDR_OWVAR 20
82428: PUSH
82429: LD_OWVAR 2
82433: ST_TO_ADDR
// uc_nation := nation ;
82434: LD_ADDR_OWVAR 21
82438: PUSH
82439: LD_VAR 0 1
82443: ST_TO_ADDR
// InitHc ;
82444: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
82448: LD_INT 0
82450: PPUSH
82451: LD_VAR 0 2
82455: PPUSH
82456: LD_VAR 0 3
82460: PPUSH
82461: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
82465: LD_VAR 0 4
82469: PPUSH
82470: LD_VAR 0 5
82474: PPUSH
82475: CALL_OW 428
82479: PUSH
82480: LD_INT 0
82482: EQUAL
82483: IFFALSE 82507
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
82485: CALL_OW 44
82489: PPUSH
82490: LD_VAR 0 4
82494: PPUSH
82495: LD_VAR 0 5
82499: PPUSH
82500: LD_INT 1
82502: PPUSH
82503: CALL_OW 48
// end ;
82507: LD_VAR 0 6
82511: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
82512: LD_INT 0
82514: PPUSH
82515: PPUSH
// uc_side := your_side ;
82516: LD_ADDR_OWVAR 20
82520: PUSH
82521: LD_OWVAR 2
82525: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
82526: LD_VAR 0 1
82530: PUSH
82531: LD_INT 1
82533: PUSH
82534: LD_INT 2
82536: PUSH
82537: LD_INT 3
82539: PUSH
82540: LD_INT 4
82542: PUSH
82543: LD_INT 5
82545: PUSH
82546: EMPTY
82547: LIST
82548: LIST
82549: LIST
82550: LIST
82551: LIST
82552: IN
82553: IFFALSE 82565
// uc_nation := nation_american else
82555: LD_ADDR_OWVAR 21
82559: PUSH
82560: LD_INT 1
82562: ST_TO_ADDR
82563: GO 82608
// if chassis in [ 11 , 12 , 13 , 14 ] then
82565: LD_VAR 0 1
82569: PUSH
82570: LD_INT 11
82572: PUSH
82573: LD_INT 12
82575: PUSH
82576: LD_INT 13
82578: PUSH
82579: LD_INT 14
82581: PUSH
82582: EMPTY
82583: LIST
82584: LIST
82585: LIST
82586: LIST
82587: IN
82588: IFFALSE 82600
// uc_nation := nation_arabian else
82590: LD_ADDR_OWVAR 21
82594: PUSH
82595: LD_INT 2
82597: ST_TO_ADDR
82598: GO 82608
// uc_nation := nation_russian ;
82600: LD_ADDR_OWVAR 21
82604: PUSH
82605: LD_INT 3
82607: ST_TO_ADDR
// vc_chassis := chassis ;
82608: LD_ADDR_OWVAR 37
82612: PUSH
82613: LD_VAR 0 1
82617: ST_TO_ADDR
// vc_engine := engine ;
82618: LD_ADDR_OWVAR 39
82622: PUSH
82623: LD_VAR 0 2
82627: ST_TO_ADDR
// vc_control := control ;
82628: LD_ADDR_OWVAR 38
82632: PUSH
82633: LD_VAR 0 3
82637: ST_TO_ADDR
// vc_weapon := weapon ;
82638: LD_ADDR_OWVAR 40
82642: PUSH
82643: LD_VAR 0 4
82647: ST_TO_ADDR
// un := CreateVehicle ;
82648: LD_ADDR_VAR 0 8
82652: PUSH
82653: CALL_OW 45
82657: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
82658: LD_VAR 0 8
82662: PPUSH
82663: LD_INT 0
82665: PPUSH
82666: LD_INT 5
82668: PPUSH
82669: CALL_OW 12
82673: PPUSH
82674: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
82678: LD_VAR 0 8
82682: PPUSH
82683: LD_VAR 0 5
82687: PPUSH
82688: LD_VAR 0 6
82692: PPUSH
82693: LD_INT 1
82695: PPUSH
82696: CALL_OW 48
// end ;
82700: LD_VAR 0 7
82704: RET
// export hInvincible ; every 1 do
82705: GO 82707
82707: DISABLE
// hInvincible := [ ] ;
82708: LD_ADDR_EXP 162
82712: PUSH
82713: EMPTY
82714: ST_TO_ADDR
82715: END
// every 10 do var i ;
82716: GO 82718
82718: DISABLE
82719: LD_INT 0
82721: PPUSH
// begin enable ;
82722: ENABLE
// if not hInvincible then
82723: LD_EXP 162
82727: NOT
82728: IFFALSE 82732
// exit ;
82730: GO 82776
// for i in hInvincible do
82732: LD_ADDR_VAR 0 1
82736: PUSH
82737: LD_EXP 162
82741: PUSH
82742: FOR_IN
82743: IFFALSE 82774
// if GetLives ( i ) < 1000 then
82745: LD_VAR 0 1
82749: PPUSH
82750: CALL_OW 256
82754: PUSH
82755: LD_INT 1000
82757: LESS
82758: IFFALSE 82772
// SetLives ( i , 1000 ) ;
82760: LD_VAR 0 1
82764: PPUSH
82765: LD_INT 1000
82767: PPUSH
82768: CALL_OW 234
82772: GO 82742
82774: POP
82775: POP
// end ;
82776: PPOPN 1
82778: END
// export function hHackInvincible ; var i ; begin
82779: LD_INT 0
82781: PPUSH
82782: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
82783: LD_ADDR_VAR 0 2
82787: PUSH
82788: LD_INT 2
82790: PUSH
82791: LD_INT 21
82793: PUSH
82794: LD_INT 1
82796: PUSH
82797: EMPTY
82798: LIST
82799: LIST
82800: PUSH
82801: LD_INT 21
82803: PUSH
82804: LD_INT 2
82806: PUSH
82807: EMPTY
82808: LIST
82809: LIST
82810: PUSH
82811: EMPTY
82812: LIST
82813: LIST
82814: LIST
82815: PPUSH
82816: CALL_OW 69
82820: PUSH
82821: FOR_IN
82822: IFFALSE 82883
// if IsSelected ( i ) then
82824: LD_VAR 0 2
82828: PPUSH
82829: CALL_OW 306
82833: IFFALSE 82881
// begin if i in hInvincible then
82835: LD_VAR 0 2
82839: PUSH
82840: LD_EXP 162
82844: IN
82845: IFFALSE 82865
// hInvincible := hInvincible diff i else
82847: LD_ADDR_EXP 162
82851: PUSH
82852: LD_EXP 162
82856: PUSH
82857: LD_VAR 0 2
82861: DIFF
82862: ST_TO_ADDR
82863: GO 82881
// hInvincible := hInvincible union i ;
82865: LD_ADDR_EXP 162
82869: PUSH
82870: LD_EXP 162
82874: PUSH
82875: LD_VAR 0 2
82879: UNION
82880: ST_TO_ADDR
// end ;
82881: GO 82821
82883: POP
82884: POP
// end ;
82885: LD_VAR 0 1
82889: RET
// export function hHackInvisible ; var i , j ; begin
82890: LD_INT 0
82892: PPUSH
82893: PPUSH
82894: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
82895: LD_ADDR_VAR 0 2
82899: PUSH
82900: LD_INT 21
82902: PUSH
82903: LD_INT 1
82905: PUSH
82906: EMPTY
82907: LIST
82908: LIST
82909: PPUSH
82910: CALL_OW 69
82914: PUSH
82915: FOR_IN
82916: IFFALSE 82940
// if IsSelected ( i ) then
82918: LD_VAR 0 2
82922: PPUSH
82923: CALL_OW 306
82927: IFFALSE 82938
// ComForceInvisible ( i ) ;
82929: LD_VAR 0 2
82933: PPUSH
82934: CALL_OW 496
82938: GO 82915
82940: POP
82941: POP
// end ;
82942: LD_VAR 0 1
82946: RET
// export function hHackChangeYourSide ; begin
82947: LD_INT 0
82949: PPUSH
// if your_side = 8 then
82950: LD_OWVAR 2
82954: PUSH
82955: LD_INT 8
82957: EQUAL
82958: IFFALSE 82970
// your_side := 0 else
82960: LD_ADDR_OWVAR 2
82964: PUSH
82965: LD_INT 0
82967: ST_TO_ADDR
82968: GO 82984
// your_side := your_side + 1 ;
82970: LD_ADDR_OWVAR 2
82974: PUSH
82975: LD_OWVAR 2
82979: PUSH
82980: LD_INT 1
82982: PLUS
82983: ST_TO_ADDR
// end ;
82984: LD_VAR 0 1
82988: RET
// export function hHackChangeUnitSide ; var i , j ; begin
82989: LD_INT 0
82991: PPUSH
82992: PPUSH
82993: PPUSH
// for i in all_units do
82994: LD_ADDR_VAR 0 2
82998: PUSH
82999: LD_OWVAR 3
83003: PUSH
83004: FOR_IN
83005: IFFALSE 83083
// if IsSelected ( i ) then
83007: LD_VAR 0 2
83011: PPUSH
83012: CALL_OW 306
83016: IFFALSE 83081
// begin j := GetSide ( i ) ;
83018: LD_ADDR_VAR 0 3
83022: PUSH
83023: LD_VAR 0 2
83027: PPUSH
83028: CALL_OW 255
83032: ST_TO_ADDR
// if j = 8 then
83033: LD_VAR 0 3
83037: PUSH
83038: LD_INT 8
83040: EQUAL
83041: IFFALSE 83053
// j := 0 else
83043: LD_ADDR_VAR 0 3
83047: PUSH
83048: LD_INT 0
83050: ST_TO_ADDR
83051: GO 83067
// j := j + 1 ;
83053: LD_ADDR_VAR 0 3
83057: PUSH
83058: LD_VAR 0 3
83062: PUSH
83063: LD_INT 1
83065: PLUS
83066: ST_TO_ADDR
// SetSide ( i , j ) ;
83067: LD_VAR 0 2
83071: PPUSH
83072: LD_VAR 0 3
83076: PPUSH
83077: CALL_OW 235
// end ;
83081: GO 83004
83083: POP
83084: POP
// end ;
83085: LD_VAR 0 1
83089: RET
// export function hHackFog ; begin
83090: LD_INT 0
83092: PPUSH
// FogOff ( true ) ;
83093: LD_INT 1
83095: PPUSH
83096: CALL_OW 344
// end ;
83100: LD_VAR 0 1
83104: RET
// export function hHackTeleport ( unit , x , y ) ; begin
83105: LD_INT 0
83107: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
83108: LD_VAR 0 1
83112: PPUSH
83113: LD_VAR 0 2
83117: PPUSH
83118: LD_VAR 0 3
83122: PPUSH
83123: LD_INT 1
83125: PPUSH
83126: LD_INT 1
83128: PPUSH
83129: CALL_OW 483
// CenterOnXY ( x , y ) ;
83133: LD_VAR 0 2
83137: PPUSH
83138: LD_VAR 0 3
83142: PPUSH
83143: CALL_OW 84
// end ; end_of_file
83147: LD_VAR 0 4
83151: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
83152: LD_INT 0
83154: PPUSH
83155: PPUSH
83156: PPUSH
83157: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
83158: LD_VAR 0 1
83162: PPUSH
83163: CALL_OW 264
83167: PUSH
83168: LD_EXP 96
83172: EQUAL
83173: IFFALSE 83245
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
83175: LD_INT 68
83177: PPUSH
83178: LD_VAR 0 1
83182: PPUSH
83183: CALL_OW 255
83187: PPUSH
83188: CALL_OW 321
83192: PUSH
83193: LD_INT 2
83195: EQUAL
83196: IFFALSE 83208
// eff := 70 else
83198: LD_ADDR_VAR 0 4
83202: PUSH
83203: LD_INT 70
83205: ST_TO_ADDR
83206: GO 83216
// eff := 30 ;
83208: LD_ADDR_VAR 0 4
83212: PUSH
83213: LD_INT 30
83215: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
83216: LD_VAR 0 1
83220: PPUSH
83221: CALL_OW 250
83225: PPUSH
83226: LD_VAR 0 1
83230: PPUSH
83231: CALL_OW 251
83235: PPUSH
83236: LD_VAR 0 4
83240: PPUSH
83241: CALL_OW 495
// end ; end ;
83245: LD_VAR 0 2
83249: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
83250: LD_INT 0
83252: PPUSH
// end ;
83253: LD_VAR 0 4
83257: RET
// export function SOS_Command ( cmd ) ; begin
83258: LD_INT 0
83260: PPUSH
// end ;
83261: LD_VAR 0 2
83265: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
83266: LD_INT 0
83268: PPUSH
// if cmd = 121 then
83269: LD_VAR 0 1
83273: PUSH
83274: LD_INT 121
83276: EQUAL
83277: IFFALSE 83279
// end ;
83279: LD_VAR 0 6
83283: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
83284: LD_INT 0
83286: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
83287: LD_VAR 0 1
83291: PUSH
83292: LD_INT 250
83294: EQUAL
83295: PUSH
83296: LD_VAR 0 2
83300: PPUSH
83301: CALL_OW 264
83305: PUSH
83306: LD_EXP 99
83310: EQUAL
83311: AND
83312: IFFALSE 83333
// MinerPlaceMine ( unit , x , y ) ;
83314: LD_VAR 0 2
83318: PPUSH
83319: LD_VAR 0 4
83323: PPUSH
83324: LD_VAR 0 5
83328: PPUSH
83329: CALL 85682 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
83333: LD_VAR 0 1
83337: PUSH
83338: LD_INT 251
83340: EQUAL
83341: PUSH
83342: LD_VAR 0 2
83346: PPUSH
83347: CALL_OW 264
83351: PUSH
83352: LD_EXP 99
83356: EQUAL
83357: AND
83358: IFFALSE 83379
// MinerDetonateMine ( unit , x , y ) ;
83360: LD_VAR 0 2
83364: PPUSH
83365: LD_VAR 0 4
83369: PPUSH
83370: LD_VAR 0 5
83374: PPUSH
83375: CALL 85959 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
83379: LD_VAR 0 1
83383: PUSH
83384: LD_INT 252
83386: EQUAL
83387: PUSH
83388: LD_VAR 0 2
83392: PPUSH
83393: CALL_OW 264
83397: PUSH
83398: LD_EXP 99
83402: EQUAL
83403: AND
83404: IFFALSE 83425
// MinerCreateMinefield ( unit , x , y ) ;
83406: LD_VAR 0 2
83410: PPUSH
83411: LD_VAR 0 4
83415: PPUSH
83416: LD_VAR 0 5
83420: PPUSH
83421: CALL 86376 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
83425: LD_VAR 0 1
83429: PUSH
83430: LD_INT 253
83432: EQUAL
83433: PUSH
83434: LD_VAR 0 2
83438: PPUSH
83439: CALL_OW 257
83443: PUSH
83444: LD_INT 5
83446: EQUAL
83447: AND
83448: IFFALSE 83469
// ComBinocular ( unit , x , y ) ;
83450: LD_VAR 0 2
83454: PPUSH
83455: LD_VAR 0 4
83459: PPUSH
83460: LD_VAR 0 5
83464: PPUSH
83465: CALL 86747 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
83469: LD_VAR 0 1
83473: PUSH
83474: LD_INT 254
83476: EQUAL
83477: PUSH
83478: LD_VAR 0 2
83482: PPUSH
83483: CALL_OW 264
83487: PUSH
83488: LD_EXP 94
83492: EQUAL
83493: AND
83494: PUSH
83495: LD_VAR 0 3
83499: PPUSH
83500: CALL_OW 263
83504: PUSH
83505: LD_INT 3
83507: EQUAL
83508: AND
83509: IFFALSE 83525
// HackDestroyVehicle ( unit , selectedUnit ) ;
83511: LD_VAR 0 2
83515: PPUSH
83516: LD_VAR 0 3
83520: PPUSH
83521: CALL 85042 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
83525: LD_VAR 0 1
83529: PUSH
83530: LD_INT 255
83532: EQUAL
83533: PUSH
83534: LD_VAR 0 2
83538: PPUSH
83539: CALL_OW 264
83543: PUSH
83544: LD_INT 14
83546: PUSH
83547: LD_INT 53
83549: PUSH
83550: EMPTY
83551: LIST
83552: LIST
83553: IN
83554: AND
83555: PUSH
83556: LD_VAR 0 4
83560: PPUSH
83561: LD_VAR 0 5
83565: PPUSH
83566: CALL_OW 488
83570: AND
83571: IFFALSE 83595
// CutTreeXYR ( unit , x , y , 12 ) ;
83573: LD_VAR 0 2
83577: PPUSH
83578: LD_VAR 0 4
83582: PPUSH
83583: LD_VAR 0 5
83587: PPUSH
83588: LD_INT 12
83590: PPUSH
83591: CALL 83608 0 4
// end ;
83595: LD_VAR 0 6
83599: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
83600: LD_INT 0
83602: PPUSH
// end ;
83603: LD_VAR 0 4
83607: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
83608: LD_INT 0
83610: PPUSH
83611: PPUSH
83612: PPUSH
83613: PPUSH
83614: PPUSH
83615: PPUSH
83616: PPUSH
83617: PPUSH
83618: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
83619: LD_VAR 0 1
83623: NOT
83624: PUSH
83625: LD_VAR 0 2
83629: PPUSH
83630: LD_VAR 0 3
83634: PPUSH
83635: CALL_OW 488
83639: NOT
83640: OR
83641: PUSH
83642: LD_VAR 0 4
83646: NOT
83647: OR
83648: IFFALSE 83652
// exit ;
83650: GO 83992
// list := [ ] ;
83652: LD_ADDR_VAR 0 13
83656: PUSH
83657: EMPTY
83658: ST_TO_ADDR
// if x - r < 0 then
83659: LD_VAR 0 2
83663: PUSH
83664: LD_VAR 0 4
83668: MINUS
83669: PUSH
83670: LD_INT 0
83672: LESS
83673: IFFALSE 83685
// min_x := 0 else
83675: LD_ADDR_VAR 0 7
83679: PUSH
83680: LD_INT 0
83682: ST_TO_ADDR
83683: GO 83701
// min_x := x - r ;
83685: LD_ADDR_VAR 0 7
83689: PUSH
83690: LD_VAR 0 2
83694: PUSH
83695: LD_VAR 0 4
83699: MINUS
83700: ST_TO_ADDR
// if y - r < 0 then
83701: LD_VAR 0 3
83705: PUSH
83706: LD_VAR 0 4
83710: MINUS
83711: PUSH
83712: LD_INT 0
83714: LESS
83715: IFFALSE 83727
// min_y := 0 else
83717: LD_ADDR_VAR 0 8
83721: PUSH
83722: LD_INT 0
83724: ST_TO_ADDR
83725: GO 83743
// min_y := y - r ;
83727: LD_ADDR_VAR 0 8
83731: PUSH
83732: LD_VAR 0 3
83736: PUSH
83737: LD_VAR 0 4
83741: MINUS
83742: ST_TO_ADDR
// max_x := x + r ;
83743: LD_ADDR_VAR 0 9
83747: PUSH
83748: LD_VAR 0 2
83752: PUSH
83753: LD_VAR 0 4
83757: PLUS
83758: ST_TO_ADDR
// max_y := y + r ;
83759: LD_ADDR_VAR 0 10
83763: PUSH
83764: LD_VAR 0 3
83768: PUSH
83769: LD_VAR 0 4
83773: PLUS
83774: ST_TO_ADDR
// for _x = min_x to max_x do
83775: LD_ADDR_VAR 0 11
83779: PUSH
83780: DOUBLE
83781: LD_VAR 0 7
83785: DEC
83786: ST_TO_ADDR
83787: LD_VAR 0 9
83791: PUSH
83792: FOR_TO
83793: IFFALSE 83910
// for _y = min_y to max_y do
83795: LD_ADDR_VAR 0 12
83799: PUSH
83800: DOUBLE
83801: LD_VAR 0 8
83805: DEC
83806: ST_TO_ADDR
83807: LD_VAR 0 10
83811: PUSH
83812: FOR_TO
83813: IFFALSE 83906
// begin if not ValidHex ( _x , _y ) then
83815: LD_VAR 0 11
83819: PPUSH
83820: LD_VAR 0 12
83824: PPUSH
83825: CALL_OW 488
83829: NOT
83830: IFFALSE 83834
// continue ;
83832: GO 83812
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
83834: LD_VAR 0 11
83838: PPUSH
83839: LD_VAR 0 12
83843: PPUSH
83844: CALL_OW 351
83848: PUSH
83849: LD_VAR 0 11
83853: PPUSH
83854: LD_VAR 0 12
83858: PPUSH
83859: CALL_OW 554
83863: AND
83864: IFFALSE 83904
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
83866: LD_ADDR_VAR 0 13
83870: PUSH
83871: LD_VAR 0 13
83875: PPUSH
83876: LD_VAR 0 13
83880: PUSH
83881: LD_INT 1
83883: PLUS
83884: PPUSH
83885: LD_VAR 0 11
83889: PUSH
83890: LD_VAR 0 12
83894: PUSH
83895: EMPTY
83896: LIST
83897: LIST
83898: PPUSH
83899: CALL_OW 2
83903: ST_TO_ADDR
// end ;
83904: GO 83812
83906: POP
83907: POP
83908: GO 83792
83910: POP
83911: POP
// if not list then
83912: LD_VAR 0 13
83916: NOT
83917: IFFALSE 83921
// exit ;
83919: GO 83992
// for i in list do
83921: LD_ADDR_VAR 0 6
83925: PUSH
83926: LD_VAR 0 13
83930: PUSH
83931: FOR_IN
83932: IFFALSE 83990
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
83934: LD_VAR 0 1
83938: PPUSH
83939: LD_STRING M
83941: PUSH
83942: LD_VAR 0 6
83946: PUSH
83947: LD_INT 1
83949: ARRAY
83950: PUSH
83951: LD_VAR 0 6
83955: PUSH
83956: LD_INT 2
83958: ARRAY
83959: PUSH
83960: LD_INT 0
83962: PUSH
83963: LD_INT 0
83965: PUSH
83966: LD_INT 0
83968: PUSH
83969: LD_INT 0
83971: PUSH
83972: EMPTY
83973: LIST
83974: LIST
83975: LIST
83976: LIST
83977: LIST
83978: LIST
83979: LIST
83980: PUSH
83981: EMPTY
83982: LIST
83983: PPUSH
83984: CALL_OW 447
83988: GO 83931
83990: POP
83991: POP
// end ;
83992: LD_VAR 0 5
83996: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
83997: LD_EXP 165
84001: NOT
84002: IFFALSE 84052
84004: GO 84006
84006: DISABLE
// begin initHack := true ;
84007: LD_ADDR_EXP 165
84011: PUSH
84012: LD_INT 1
84014: ST_TO_ADDR
// hackTanks := [ ] ;
84015: LD_ADDR_EXP 166
84019: PUSH
84020: EMPTY
84021: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
84022: LD_ADDR_EXP 167
84026: PUSH
84027: EMPTY
84028: ST_TO_ADDR
// hackLimit := 3 ;
84029: LD_ADDR_EXP 168
84033: PUSH
84034: LD_INT 3
84036: ST_TO_ADDR
// hackDist := 12 ;
84037: LD_ADDR_EXP 169
84041: PUSH
84042: LD_INT 12
84044: ST_TO_ADDR
// hackCounter := [ ] ;
84045: LD_ADDR_EXP 170
84049: PUSH
84050: EMPTY
84051: ST_TO_ADDR
// end ;
84052: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
84053: LD_EXP 165
84057: PUSH
84058: LD_INT 34
84060: PUSH
84061: LD_EXP 94
84065: PUSH
84066: EMPTY
84067: LIST
84068: LIST
84069: PPUSH
84070: CALL_OW 69
84074: AND
84075: IFFALSE 84330
84077: GO 84079
84079: DISABLE
84080: LD_INT 0
84082: PPUSH
84083: PPUSH
// begin enable ;
84084: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
84085: LD_ADDR_VAR 0 1
84089: PUSH
84090: LD_INT 34
84092: PUSH
84093: LD_EXP 94
84097: PUSH
84098: EMPTY
84099: LIST
84100: LIST
84101: PPUSH
84102: CALL_OW 69
84106: PUSH
84107: FOR_IN
84108: IFFALSE 84328
// begin if not i in hackTanks then
84110: LD_VAR 0 1
84114: PUSH
84115: LD_EXP 166
84119: IN
84120: NOT
84121: IFFALSE 84204
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
84123: LD_ADDR_EXP 166
84127: PUSH
84128: LD_EXP 166
84132: PPUSH
84133: LD_EXP 166
84137: PUSH
84138: LD_INT 1
84140: PLUS
84141: PPUSH
84142: LD_VAR 0 1
84146: PPUSH
84147: CALL_OW 1
84151: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
84152: LD_ADDR_EXP 167
84156: PUSH
84157: LD_EXP 167
84161: PPUSH
84162: LD_EXP 167
84166: PUSH
84167: LD_INT 1
84169: PLUS
84170: PPUSH
84171: EMPTY
84172: PPUSH
84173: CALL_OW 1
84177: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
84178: LD_ADDR_EXP 170
84182: PUSH
84183: LD_EXP 170
84187: PPUSH
84188: LD_EXP 170
84192: PUSH
84193: LD_INT 1
84195: PLUS
84196: PPUSH
84197: EMPTY
84198: PPUSH
84199: CALL_OW 1
84203: ST_TO_ADDR
// end ; if not IsOk ( i ) then
84204: LD_VAR 0 1
84208: PPUSH
84209: CALL_OW 302
84213: NOT
84214: IFFALSE 84227
// begin HackUnlinkAll ( i ) ;
84216: LD_VAR 0 1
84220: PPUSH
84221: CALL 84333 0 1
// continue ;
84225: GO 84107
// end ; HackCheckCapturedStatus ( i ) ;
84227: LD_VAR 0 1
84231: PPUSH
84232: CALL 84776 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
84236: LD_ADDR_VAR 0 2
84240: PUSH
84241: LD_INT 81
84243: PUSH
84244: LD_VAR 0 1
84248: PPUSH
84249: CALL_OW 255
84253: PUSH
84254: EMPTY
84255: LIST
84256: LIST
84257: PUSH
84258: LD_INT 33
84260: PUSH
84261: LD_INT 3
84263: PUSH
84264: EMPTY
84265: LIST
84266: LIST
84267: PUSH
84268: LD_INT 91
84270: PUSH
84271: LD_VAR 0 1
84275: PUSH
84276: LD_EXP 169
84280: PUSH
84281: EMPTY
84282: LIST
84283: LIST
84284: LIST
84285: PUSH
84286: LD_INT 50
84288: PUSH
84289: EMPTY
84290: LIST
84291: PUSH
84292: EMPTY
84293: LIST
84294: LIST
84295: LIST
84296: LIST
84297: PPUSH
84298: CALL_OW 69
84302: ST_TO_ADDR
// if not tmp then
84303: LD_VAR 0 2
84307: NOT
84308: IFFALSE 84312
// continue ;
84310: GO 84107
// HackLink ( i , tmp ) ;
84312: LD_VAR 0 1
84316: PPUSH
84317: LD_VAR 0 2
84321: PPUSH
84322: CALL 84469 0 2
// end ;
84326: GO 84107
84328: POP
84329: POP
// end ;
84330: PPOPN 2
84332: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
84333: LD_INT 0
84335: PPUSH
84336: PPUSH
84337: PPUSH
// if not hack in hackTanks then
84338: LD_VAR 0 1
84342: PUSH
84343: LD_EXP 166
84347: IN
84348: NOT
84349: IFFALSE 84353
// exit ;
84351: GO 84464
// index := GetElementIndex ( hackTanks , hack ) ;
84353: LD_ADDR_VAR 0 4
84357: PUSH
84358: LD_EXP 166
84362: PPUSH
84363: LD_VAR 0 1
84367: PPUSH
84368: CALL 37060 0 2
84372: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
84373: LD_EXP 167
84377: PUSH
84378: LD_VAR 0 4
84382: ARRAY
84383: IFFALSE 84464
// begin for i in hackTanksCaptured [ index ] do
84385: LD_ADDR_VAR 0 3
84389: PUSH
84390: LD_EXP 167
84394: PUSH
84395: LD_VAR 0 4
84399: ARRAY
84400: PUSH
84401: FOR_IN
84402: IFFALSE 84428
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
84404: LD_VAR 0 3
84408: PUSH
84409: LD_INT 1
84411: ARRAY
84412: PPUSH
84413: LD_VAR 0 3
84417: PUSH
84418: LD_INT 2
84420: ARRAY
84421: PPUSH
84422: CALL_OW 235
84426: GO 84401
84428: POP
84429: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
84430: LD_ADDR_EXP 167
84434: PUSH
84435: LD_EXP 167
84439: PPUSH
84440: LD_VAR 0 4
84444: PPUSH
84445: EMPTY
84446: PPUSH
84447: CALL_OW 1
84451: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
84452: LD_VAR 0 1
84456: PPUSH
84457: LD_INT 0
84459: PPUSH
84460: CALL_OW 505
// end ; end ;
84464: LD_VAR 0 2
84468: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
84469: LD_INT 0
84471: PPUSH
84472: PPUSH
84473: PPUSH
// if not hack in hackTanks or not vehicles then
84474: LD_VAR 0 1
84478: PUSH
84479: LD_EXP 166
84483: IN
84484: NOT
84485: PUSH
84486: LD_VAR 0 2
84490: NOT
84491: OR
84492: IFFALSE 84496
// exit ;
84494: GO 84771
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
84496: LD_ADDR_VAR 0 2
84500: PUSH
84501: LD_VAR 0 1
84505: PPUSH
84506: LD_VAR 0 2
84510: PPUSH
84511: LD_INT 1
84513: PPUSH
84514: LD_INT 1
84516: PPUSH
84517: CALL 37710 0 4
84521: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
84522: LD_ADDR_VAR 0 5
84526: PUSH
84527: LD_EXP 166
84531: PPUSH
84532: LD_VAR 0 1
84536: PPUSH
84537: CALL 37060 0 2
84541: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
84542: LD_EXP 167
84546: PUSH
84547: LD_VAR 0 5
84551: ARRAY
84552: PUSH
84553: LD_EXP 168
84557: LESS
84558: IFFALSE 84747
// begin for i := 1 to vehicles do
84560: LD_ADDR_VAR 0 4
84564: PUSH
84565: DOUBLE
84566: LD_INT 1
84568: DEC
84569: ST_TO_ADDR
84570: LD_VAR 0 2
84574: PUSH
84575: FOR_TO
84576: IFFALSE 84745
// begin if hackTanksCaptured [ index ] = hackLimit then
84578: LD_EXP 167
84582: PUSH
84583: LD_VAR 0 5
84587: ARRAY
84588: PUSH
84589: LD_EXP 168
84593: EQUAL
84594: IFFALSE 84598
// break ;
84596: GO 84745
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
84598: LD_ADDR_EXP 170
84602: PUSH
84603: LD_EXP 170
84607: PPUSH
84608: LD_VAR 0 5
84612: PPUSH
84613: LD_EXP 170
84617: PUSH
84618: LD_VAR 0 5
84622: ARRAY
84623: PUSH
84624: LD_INT 1
84626: PLUS
84627: PPUSH
84628: CALL_OW 1
84632: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
84633: LD_ADDR_EXP 167
84637: PUSH
84638: LD_EXP 167
84642: PPUSH
84643: LD_VAR 0 5
84647: PUSH
84648: LD_EXP 167
84652: PUSH
84653: LD_VAR 0 5
84657: ARRAY
84658: PUSH
84659: LD_INT 1
84661: PLUS
84662: PUSH
84663: EMPTY
84664: LIST
84665: LIST
84666: PPUSH
84667: LD_VAR 0 2
84671: PUSH
84672: LD_VAR 0 4
84676: ARRAY
84677: PUSH
84678: LD_VAR 0 2
84682: PUSH
84683: LD_VAR 0 4
84687: ARRAY
84688: PPUSH
84689: CALL_OW 255
84693: PUSH
84694: EMPTY
84695: LIST
84696: LIST
84697: PPUSH
84698: CALL 37275 0 3
84702: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
84703: LD_VAR 0 2
84707: PUSH
84708: LD_VAR 0 4
84712: ARRAY
84713: PPUSH
84714: LD_VAR 0 1
84718: PPUSH
84719: CALL_OW 255
84723: PPUSH
84724: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
84728: LD_VAR 0 2
84732: PUSH
84733: LD_VAR 0 4
84737: ARRAY
84738: PPUSH
84739: CALL_OW 141
// end ;
84743: GO 84575
84745: POP
84746: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
84747: LD_VAR 0 1
84751: PPUSH
84752: LD_EXP 167
84756: PUSH
84757: LD_VAR 0 5
84761: ARRAY
84762: PUSH
84763: LD_INT 0
84765: PLUS
84766: PPUSH
84767: CALL_OW 505
// end ;
84771: LD_VAR 0 3
84775: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
84776: LD_INT 0
84778: PPUSH
84779: PPUSH
84780: PPUSH
84781: PPUSH
// if not hack in hackTanks then
84782: LD_VAR 0 1
84786: PUSH
84787: LD_EXP 166
84791: IN
84792: NOT
84793: IFFALSE 84797
// exit ;
84795: GO 85037
// index := GetElementIndex ( hackTanks , hack ) ;
84797: LD_ADDR_VAR 0 4
84801: PUSH
84802: LD_EXP 166
84806: PPUSH
84807: LD_VAR 0 1
84811: PPUSH
84812: CALL 37060 0 2
84816: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
84817: LD_ADDR_VAR 0 3
84821: PUSH
84822: DOUBLE
84823: LD_EXP 167
84827: PUSH
84828: LD_VAR 0 4
84832: ARRAY
84833: INC
84834: ST_TO_ADDR
84835: LD_INT 1
84837: PUSH
84838: FOR_DOWNTO
84839: IFFALSE 85011
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
84841: LD_ADDR_VAR 0 5
84845: PUSH
84846: LD_EXP 167
84850: PUSH
84851: LD_VAR 0 4
84855: ARRAY
84856: PUSH
84857: LD_VAR 0 3
84861: ARRAY
84862: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
84863: LD_VAR 0 5
84867: PUSH
84868: LD_INT 1
84870: ARRAY
84871: PPUSH
84872: CALL_OW 302
84876: NOT
84877: PUSH
84878: LD_VAR 0 5
84882: PUSH
84883: LD_INT 1
84885: ARRAY
84886: PPUSH
84887: CALL_OW 255
84891: PUSH
84892: LD_VAR 0 1
84896: PPUSH
84897: CALL_OW 255
84901: NONEQUAL
84902: OR
84903: IFFALSE 85009
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
84905: LD_VAR 0 5
84909: PUSH
84910: LD_INT 1
84912: ARRAY
84913: PPUSH
84914: CALL_OW 305
84918: PUSH
84919: LD_VAR 0 5
84923: PUSH
84924: LD_INT 1
84926: ARRAY
84927: PPUSH
84928: CALL_OW 255
84932: PUSH
84933: LD_VAR 0 1
84937: PPUSH
84938: CALL_OW 255
84942: EQUAL
84943: AND
84944: IFFALSE 84968
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
84946: LD_VAR 0 5
84950: PUSH
84951: LD_INT 1
84953: ARRAY
84954: PPUSH
84955: LD_VAR 0 5
84959: PUSH
84960: LD_INT 2
84962: ARRAY
84963: PPUSH
84964: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
84968: LD_ADDR_EXP 167
84972: PUSH
84973: LD_EXP 167
84977: PPUSH
84978: LD_VAR 0 4
84982: PPUSH
84983: LD_EXP 167
84987: PUSH
84988: LD_VAR 0 4
84992: ARRAY
84993: PPUSH
84994: LD_VAR 0 3
84998: PPUSH
84999: CALL_OW 3
85003: PPUSH
85004: CALL_OW 1
85008: ST_TO_ADDR
// end ; end ;
85009: GO 84838
85011: POP
85012: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
85013: LD_VAR 0 1
85017: PPUSH
85018: LD_EXP 167
85022: PUSH
85023: LD_VAR 0 4
85027: ARRAY
85028: PUSH
85029: LD_INT 0
85031: PLUS
85032: PPUSH
85033: CALL_OW 505
// end ;
85037: LD_VAR 0 2
85041: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
85042: LD_INT 0
85044: PPUSH
85045: PPUSH
85046: PPUSH
85047: PPUSH
// if not hack in hackTanks then
85048: LD_VAR 0 1
85052: PUSH
85053: LD_EXP 166
85057: IN
85058: NOT
85059: IFFALSE 85063
// exit ;
85061: GO 85148
// index := GetElementIndex ( hackTanks , hack ) ;
85063: LD_ADDR_VAR 0 5
85067: PUSH
85068: LD_EXP 166
85072: PPUSH
85073: LD_VAR 0 1
85077: PPUSH
85078: CALL 37060 0 2
85082: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
85083: LD_ADDR_VAR 0 4
85087: PUSH
85088: DOUBLE
85089: LD_INT 1
85091: DEC
85092: ST_TO_ADDR
85093: LD_EXP 167
85097: PUSH
85098: LD_VAR 0 5
85102: ARRAY
85103: PUSH
85104: FOR_TO
85105: IFFALSE 85146
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
85107: LD_EXP 167
85111: PUSH
85112: LD_VAR 0 5
85116: ARRAY
85117: PUSH
85118: LD_VAR 0 4
85122: ARRAY
85123: PUSH
85124: LD_INT 1
85126: ARRAY
85127: PUSH
85128: LD_VAR 0 2
85132: EQUAL
85133: IFFALSE 85144
// KillUnit ( vehicle ) ;
85135: LD_VAR 0 2
85139: PPUSH
85140: CALL_OW 66
85144: GO 85104
85146: POP
85147: POP
// end ;
85148: LD_VAR 0 3
85152: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
85153: LD_EXP 171
85157: NOT
85158: IFFALSE 85193
85160: GO 85162
85162: DISABLE
// begin initMiner := true ;
85163: LD_ADDR_EXP 171
85167: PUSH
85168: LD_INT 1
85170: ST_TO_ADDR
// minersList := [ ] ;
85171: LD_ADDR_EXP 172
85175: PUSH
85176: EMPTY
85177: ST_TO_ADDR
// minerMinesList := [ ] ;
85178: LD_ADDR_EXP 173
85182: PUSH
85183: EMPTY
85184: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
85185: LD_ADDR_EXP 174
85189: PUSH
85190: LD_INT 5
85192: ST_TO_ADDR
// end ;
85193: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
85194: LD_EXP 171
85198: PUSH
85199: LD_INT 34
85201: PUSH
85202: LD_EXP 99
85206: PUSH
85207: EMPTY
85208: LIST
85209: LIST
85210: PPUSH
85211: CALL_OW 69
85215: AND
85216: IFFALSE 85679
85218: GO 85220
85220: DISABLE
85221: LD_INT 0
85223: PPUSH
85224: PPUSH
85225: PPUSH
85226: PPUSH
// begin enable ;
85227: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
85228: LD_ADDR_VAR 0 1
85232: PUSH
85233: LD_INT 34
85235: PUSH
85236: LD_EXP 99
85240: PUSH
85241: EMPTY
85242: LIST
85243: LIST
85244: PPUSH
85245: CALL_OW 69
85249: PUSH
85250: FOR_IN
85251: IFFALSE 85323
// begin if not i in minersList then
85253: LD_VAR 0 1
85257: PUSH
85258: LD_EXP 172
85262: IN
85263: NOT
85264: IFFALSE 85321
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
85266: LD_ADDR_EXP 172
85270: PUSH
85271: LD_EXP 172
85275: PPUSH
85276: LD_EXP 172
85280: PUSH
85281: LD_INT 1
85283: PLUS
85284: PPUSH
85285: LD_VAR 0 1
85289: PPUSH
85290: CALL_OW 1
85294: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
85295: LD_ADDR_EXP 173
85299: PUSH
85300: LD_EXP 173
85304: PPUSH
85305: LD_EXP 173
85309: PUSH
85310: LD_INT 1
85312: PLUS
85313: PPUSH
85314: EMPTY
85315: PPUSH
85316: CALL_OW 1
85320: ST_TO_ADDR
// end end ;
85321: GO 85250
85323: POP
85324: POP
// for i := minerMinesList downto 1 do
85325: LD_ADDR_VAR 0 1
85329: PUSH
85330: DOUBLE
85331: LD_EXP 173
85335: INC
85336: ST_TO_ADDR
85337: LD_INT 1
85339: PUSH
85340: FOR_DOWNTO
85341: IFFALSE 85677
// begin if IsLive ( minersList [ i ] ) then
85343: LD_EXP 172
85347: PUSH
85348: LD_VAR 0 1
85352: ARRAY
85353: PPUSH
85354: CALL_OW 300
85358: IFFALSE 85386
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
85360: LD_EXP 172
85364: PUSH
85365: LD_VAR 0 1
85369: ARRAY
85370: PPUSH
85371: LD_EXP 173
85375: PUSH
85376: LD_VAR 0 1
85380: ARRAY
85381: PPUSH
85382: CALL_OW 505
// if not minerMinesList [ i ] then
85386: LD_EXP 173
85390: PUSH
85391: LD_VAR 0 1
85395: ARRAY
85396: NOT
85397: IFFALSE 85401
// continue ;
85399: GO 85340
// for j := minerMinesList [ i ] downto 1 do
85401: LD_ADDR_VAR 0 2
85405: PUSH
85406: DOUBLE
85407: LD_EXP 173
85411: PUSH
85412: LD_VAR 0 1
85416: ARRAY
85417: INC
85418: ST_TO_ADDR
85419: LD_INT 1
85421: PUSH
85422: FOR_DOWNTO
85423: IFFALSE 85673
// begin side := GetSide ( minersList [ i ] ) ;
85425: LD_ADDR_VAR 0 3
85429: PUSH
85430: LD_EXP 172
85434: PUSH
85435: LD_VAR 0 1
85439: ARRAY
85440: PPUSH
85441: CALL_OW 255
85445: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
85446: LD_ADDR_VAR 0 4
85450: PUSH
85451: LD_EXP 173
85455: PUSH
85456: LD_VAR 0 1
85460: ARRAY
85461: PUSH
85462: LD_VAR 0 2
85466: ARRAY
85467: PUSH
85468: LD_INT 1
85470: ARRAY
85471: PPUSH
85472: LD_EXP 173
85476: PUSH
85477: LD_VAR 0 1
85481: ARRAY
85482: PUSH
85483: LD_VAR 0 2
85487: ARRAY
85488: PUSH
85489: LD_INT 2
85491: ARRAY
85492: PPUSH
85493: CALL_OW 428
85497: ST_TO_ADDR
// if not tmp then
85498: LD_VAR 0 4
85502: NOT
85503: IFFALSE 85507
// continue ;
85505: GO 85422
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
85507: LD_VAR 0 4
85511: PUSH
85512: LD_INT 81
85514: PUSH
85515: LD_VAR 0 3
85519: PUSH
85520: EMPTY
85521: LIST
85522: LIST
85523: PPUSH
85524: CALL_OW 69
85528: IN
85529: PUSH
85530: LD_EXP 173
85534: PUSH
85535: LD_VAR 0 1
85539: ARRAY
85540: PUSH
85541: LD_VAR 0 2
85545: ARRAY
85546: PUSH
85547: LD_INT 1
85549: ARRAY
85550: PPUSH
85551: LD_EXP 173
85555: PUSH
85556: LD_VAR 0 1
85560: ARRAY
85561: PUSH
85562: LD_VAR 0 2
85566: ARRAY
85567: PUSH
85568: LD_INT 2
85570: ARRAY
85571: PPUSH
85572: CALL_OW 458
85576: AND
85577: IFFALSE 85671
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
85579: LD_EXP 173
85583: PUSH
85584: LD_VAR 0 1
85588: ARRAY
85589: PUSH
85590: LD_VAR 0 2
85594: ARRAY
85595: PUSH
85596: LD_INT 1
85598: ARRAY
85599: PPUSH
85600: LD_EXP 173
85604: PUSH
85605: LD_VAR 0 1
85609: ARRAY
85610: PUSH
85611: LD_VAR 0 2
85615: ARRAY
85616: PUSH
85617: LD_INT 2
85619: ARRAY
85620: PPUSH
85621: LD_VAR 0 3
85625: PPUSH
85626: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
85630: LD_ADDR_EXP 173
85634: PUSH
85635: LD_EXP 173
85639: PPUSH
85640: LD_VAR 0 1
85644: PPUSH
85645: LD_EXP 173
85649: PUSH
85650: LD_VAR 0 1
85654: ARRAY
85655: PPUSH
85656: LD_VAR 0 2
85660: PPUSH
85661: CALL_OW 3
85665: PPUSH
85666: CALL_OW 1
85670: ST_TO_ADDR
// end ; end ;
85671: GO 85422
85673: POP
85674: POP
// end ;
85675: GO 85340
85677: POP
85678: POP
// end ;
85679: PPOPN 4
85681: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
85682: LD_INT 0
85684: PPUSH
85685: PPUSH
// result := false ;
85686: LD_ADDR_VAR 0 4
85690: PUSH
85691: LD_INT 0
85693: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
85694: LD_VAR 0 1
85698: PPUSH
85699: CALL_OW 264
85703: PUSH
85704: LD_EXP 99
85708: EQUAL
85709: NOT
85710: IFFALSE 85714
// exit ;
85712: GO 85954
// index := GetElementIndex ( minersList , unit ) ;
85714: LD_ADDR_VAR 0 5
85718: PUSH
85719: LD_EXP 172
85723: PPUSH
85724: LD_VAR 0 1
85728: PPUSH
85729: CALL 37060 0 2
85733: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
85734: LD_EXP 173
85738: PUSH
85739: LD_VAR 0 5
85743: ARRAY
85744: PUSH
85745: LD_EXP 174
85749: GREATEREQUAL
85750: IFFALSE 85754
// exit ;
85752: GO 85954
// ComMoveXY ( unit , x , y ) ;
85754: LD_VAR 0 1
85758: PPUSH
85759: LD_VAR 0 2
85763: PPUSH
85764: LD_VAR 0 3
85768: PPUSH
85769: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
85773: LD_INT 35
85775: PPUSH
85776: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
85780: LD_VAR 0 1
85784: PPUSH
85785: LD_VAR 0 2
85789: PPUSH
85790: LD_VAR 0 3
85794: PPUSH
85795: CALL 67457 0 3
85799: NOT
85800: PUSH
85801: LD_VAR 0 1
85805: PPUSH
85806: CALL_OW 314
85810: AND
85811: IFFALSE 85815
// exit ;
85813: GO 85954
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
85815: LD_VAR 0 2
85819: PPUSH
85820: LD_VAR 0 3
85824: PPUSH
85825: CALL_OW 428
85829: PUSH
85830: LD_VAR 0 1
85834: EQUAL
85835: PUSH
85836: LD_VAR 0 1
85840: PPUSH
85841: CALL_OW 314
85845: NOT
85846: AND
85847: IFFALSE 85773
// PlaySoundXY ( x , y , PlantMine ) ;
85849: LD_VAR 0 2
85853: PPUSH
85854: LD_VAR 0 3
85858: PPUSH
85859: LD_STRING PlantMine
85861: PPUSH
85862: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
85866: LD_VAR 0 2
85870: PPUSH
85871: LD_VAR 0 3
85875: PPUSH
85876: LD_VAR 0 1
85880: PPUSH
85881: CALL_OW 255
85885: PPUSH
85886: LD_INT 0
85888: PPUSH
85889: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
85893: LD_ADDR_EXP 173
85897: PUSH
85898: LD_EXP 173
85902: PPUSH
85903: LD_VAR 0 5
85907: PUSH
85908: LD_EXP 173
85912: PUSH
85913: LD_VAR 0 5
85917: ARRAY
85918: PUSH
85919: LD_INT 1
85921: PLUS
85922: PUSH
85923: EMPTY
85924: LIST
85925: LIST
85926: PPUSH
85927: LD_VAR 0 2
85931: PUSH
85932: LD_VAR 0 3
85936: PUSH
85937: EMPTY
85938: LIST
85939: LIST
85940: PPUSH
85941: CALL 37275 0 3
85945: ST_TO_ADDR
// result := true ;
85946: LD_ADDR_VAR 0 4
85950: PUSH
85951: LD_INT 1
85953: ST_TO_ADDR
// end ;
85954: LD_VAR 0 4
85958: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
85959: LD_INT 0
85961: PPUSH
85962: PPUSH
85963: PPUSH
// if not unit in minersList then
85964: LD_VAR 0 1
85968: PUSH
85969: LD_EXP 172
85973: IN
85974: NOT
85975: IFFALSE 85979
// exit ;
85977: GO 86371
// index := GetElementIndex ( minersList , unit ) ;
85979: LD_ADDR_VAR 0 6
85983: PUSH
85984: LD_EXP 172
85988: PPUSH
85989: LD_VAR 0 1
85993: PPUSH
85994: CALL 37060 0 2
85998: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
85999: LD_ADDR_VAR 0 5
86003: PUSH
86004: DOUBLE
86005: LD_EXP 173
86009: PUSH
86010: LD_VAR 0 6
86014: ARRAY
86015: INC
86016: ST_TO_ADDR
86017: LD_INT 1
86019: PUSH
86020: FOR_DOWNTO
86021: IFFALSE 86182
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
86023: LD_EXP 173
86027: PUSH
86028: LD_VAR 0 6
86032: ARRAY
86033: PUSH
86034: LD_VAR 0 5
86038: ARRAY
86039: PUSH
86040: LD_INT 1
86042: ARRAY
86043: PUSH
86044: LD_VAR 0 2
86048: EQUAL
86049: PUSH
86050: LD_EXP 173
86054: PUSH
86055: LD_VAR 0 6
86059: ARRAY
86060: PUSH
86061: LD_VAR 0 5
86065: ARRAY
86066: PUSH
86067: LD_INT 2
86069: ARRAY
86070: PUSH
86071: LD_VAR 0 3
86075: EQUAL
86076: AND
86077: IFFALSE 86180
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
86079: LD_EXP 173
86083: PUSH
86084: LD_VAR 0 6
86088: ARRAY
86089: PUSH
86090: LD_VAR 0 5
86094: ARRAY
86095: PUSH
86096: LD_INT 1
86098: ARRAY
86099: PPUSH
86100: LD_EXP 173
86104: PUSH
86105: LD_VAR 0 6
86109: ARRAY
86110: PUSH
86111: LD_VAR 0 5
86115: ARRAY
86116: PUSH
86117: LD_INT 2
86119: ARRAY
86120: PPUSH
86121: LD_VAR 0 1
86125: PPUSH
86126: CALL_OW 255
86130: PPUSH
86131: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
86135: LD_ADDR_EXP 173
86139: PUSH
86140: LD_EXP 173
86144: PPUSH
86145: LD_VAR 0 6
86149: PPUSH
86150: LD_EXP 173
86154: PUSH
86155: LD_VAR 0 6
86159: ARRAY
86160: PPUSH
86161: LD_VAR 0 5
86165: PPUSH
86166: CALL_OW 3
86170: PPUSH
86171: CALL_OW 1
86175: ST_TO_ADDR
// exit ;
86176: POP
86177: POP
86178: GO 86371
// end ; end ;
86180: GO 86020
86182: POP
86183: POP
// for i := minerMinesList [ index ] downto 1 do
86184: LD_ADDR_VAR 0 5
86188: PUSH
86189: DOUBLE
86190: LD_EXP 173
86194: PUSH
86195: LD_VAR 0 6
86199: ARRAY
86200: INC
86201: ST_TO_ADDR
86202: LD_INT 1
86204: PUSH
86205: FOR_DOWNTO
86206: IFFALSE 86369
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
86208: LD_EXP 173
86212: PUSH
86213: LD_VAR 0 6
86217: ARRAY
86218: PUSH
86219: LD_VAR 0 5
86223: ARRAY
86224: PUSH
86225: LD_INT 1
86227: ARRAY
86228: PPUSH
86229: LD_EXP 173
86233: PUSH
86234: LD_VAR 0 6
86238: ARRAY
86239: PUSH
86240: LD_VAR 0 5
86244: ARRAY
86245: PUSH
86246: LD_INT 2
86248: ARRAY
86249: PPUSH
86250: LD_VAR 0 2
86254: PPUSH
86255: LD_VAR 0 3
86259: PPUSH
86260: CALL_OW 298
86264: PUSH
86265: LD_INT 6
86267: LESS
86268: IFFALSE 86367
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
86270: LD_EXP 173
86274: PUSH
86275: LD_VAR 0 6
86279: ARRAY
86280: PUSH
86281: LD_VAR 0 5
86285: ARRAY
86286: PUSH
86287: LD_INT 1
86289: ARRAY
86290: PPUSH
86291: LD_EXP 173
86295: PUSH
86296: LD_VAR 0 6
86300: ARRAY
86301: PUSH
86302: LD_VAR 0 5
86306: ARRAY
86307: PUSH
86308: LD_INT 2
86310: ARRAY
86311: PPUSH
86312: LD_VAR 0 1
86316: PPUSH
86317: CALL_OW 255
86321: PPUSH
86322: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
86326: LD_ADDR_EXP 173
86330: PUSH
86331: LD_EXP 173
86335: PPUSH
86336: LD_VAR 0 6
86340: PPUSH
86341: LD_EXP 173
86345: PUSH
86346: LD_VAR 0 6
86350: ARRAY
86351: PPUSH
86352: LD_VAR 0 5
86356: PPUSH
86357: CALL_OW 3
86361: PPUSH
86362: CALL_OW 1
86366: ST_TO_ADDR
// end ; end ;
86367: GO 86205
86369: POP
86370: POP
// end ;
86371: LD_VAR 0 4
86375: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
86376: LD_INT 0
86378: PPUSH
86379: PPUSH
86380: PPUSH
86381: PPUSH
86382: PPUSH
86383: PPUSH
86384: PPUSH
86385: PPUSH
86386: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
86387: LD_VAR 0 1
86391: PPUSH
86392: CALL_OW 264
86396: PUSH
86397: LD_EXP 99
86401: EQUAL
86402: NOT
86403: PUSH
86404: LD_VAR 0 1
86408: PUSH
86409: LD_EXP 172
86413: IN
86414: NOT
86415: OR
86416: IFFALSE 86420
// exit ;
86418: GO 86742
// index := GetElementIndex ( minersList , unit ) ;
86420: LD_ADDR_VAR 0 6
86424: PUSH
86425: LD_EXP 172
86429: PPUSH
86430: LD_VAR 0 1
86434: PPUSH
86435: CALL 37060 0 2
86439: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
86440: LD_ADDR_VAR 0 8
86444: PUSH
86445: LD_EXP 174
86449: PUSH
86450: LD_EXP 173
86454: PUSH
86455: LD_VAR 0 6
86459: ARRAY
86460: MINUS
86461: ST_TO_ADDR
// if not minesFreeAmount then
86462: LD_VAR 0 8
86466: NOT
86467: IFFALSE 86471
// exit ;
86469: GO 86742
// tmp := [ ] ;
86471: LD_ADDR_VAR 0 7
86475: PUSH
86476: EMPTY
86477: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
86478: LD_ADDR_VAR 0 5
86482: PUSH
86483: DOUBLE
86484: LD_INT 1
86486: DEC
86487: ST_TO_ADDR
86488: LD_VAR 0 8
86492: PUSH
86493: FOR_TO
86494: IFFALSE 86689
// begin _d := rand ( 0 , 5 ) ;
86496: LD_ADDR_VAR 0 11
86500: PUSH
86501: LD_INT 0
86503: PPUSH
86504: LD_INT 5
86506: PPUSH
86507: CALL_OW 12
86511: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
86512: LD_ADDR_VAR 0 12
86516: PUSH
86517: LD_INT 2
86519: PPUSH
86520: LD_INT 6
86522: PPUSH
86523: CALL_OW 12
86527: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
86528: LD_ADDR_VAR 0 9
86532: PUSH
86533: LD_VAR 0 2
86537: PPUSH
86538: LD_VAR 0 11
86542: PPUSH
86543: LD_VAR 0 12
86547: PPUSH
86548: CALL_OW 272
86552: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
86553: LD_ADDR_VAR 0 10
86557: PUSH
86558: LD_VAR 0 3
86562: PPUSH
86563: LD_VAR 0 11
86567: PPUSH
86568: LD_VAR 0 12
86572: PPUSH
86573: CALL_OW 273
86577: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
86578: LD_VAR 0 9
86582: PPUSH
86583: LD_VAR 0 10
86587: PPUSH
86588: CALL_OW 488
86592: PUSH
86593: LD_VAR 0 9
86597: PUSH
86598: LD_VAR 0 10
86602: PUSH
86603: EMPTY
86604: LIST
86605: LIST
86606: PUSH
86607: LD_VAR 0 7
86611: IN
86612: NOT
86613: AND
86614: PUSH
86615: LD_VAR 0 9
86619: PPUSH
86620: LD_VAR 0 10
86624: PPUSH
86625: CALL_OW 458
86629: NOT
86630: AND
86631: IFFALSE 86673
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
86633: LD_ADDR_VAR 0 7
86637: PUSH
86638: LD_VAR 0 7
86642: PPUSH
86643: LD_VAR 0 7
86647: PUSH
86648: LD_INT 1
86650: PLUS
86651: PPUSH
86652: LD_VAR 0 9
86656: PUSH
86657: LD_VAR 0 10
86661: PUSH
86662: EMPTY
86663: LIST
86664: LIST
86665: PPUSH
86666: CALL_OW 1
86670: ST_TO_ADDR
86671: GO 86687
// i := i - 1 ;
86673: LD_ADDR_VAR 0 5
86677: PUSH
86678: LD_VAR 0 5
86682: PUSH
86683: LD_INT 1
86685: MINUS
86686: ST_TO_ADDR
// end ;
86687: GO 86493
86689: POP
86690: POP
// for i in tmp do
86691: LD_ADDR_VAR 0 5
86695: PUSH
86696: LD_VAR 0 7
86700: PUSH
86701: FOR_IN
86702: IFFALSE 86740
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
86704: LD_VAR 0 1
86708: PPUSH
86709: LD_VAR 0 5
86713: PUSH
86714: LD_INT 1
86716: ARRAY
86717: PPUSH
86718: LD_VAR 0 5
86722: PUSH
86723: LD_INT 2
86725: ARRAY
86726: PPUSH
86727: CALL 85682 0 3
86731: NOT
86732: IFFALSE 86738
// exit ;
86734: POP
86735: POP
86736: GO 86742
86738: GO 86701
86740: POP
86741: POP
// end ;
86742: LD_VAR 0 4
86746: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
86747: LD_INT 0
86749: PPUSH
86750: PPUSH
86751: PPUSH
86752: PPUSH
86753: PPUSH
86754: PPUSH
86755: PPUSH
// if not GetClass ( unit ) = class_sniper then
86756: LD_VAR 0 1
86760: PPUSH
86761: CALL_OW 257
86765: PUSH
86766: LD_INT 5
86768: EQUAL
86769: NOT
86770: IFFALSE 86774
// exit ;
86772: GO 87162
// dist := 8 ;
86774: LD_ADDR_VAR 0 5
86778: PUSH
86779: LD_INT 8
86781: ST_TO_ADDR
// viewRange := 12 ;
86782: LD_ADDR_VAR 0 7
86786: PUSH
86787: LD_INT 12
86789: ST_TO_ADDR
// side := GetSide ( unit ) ;
86790: LD_ADDR_VAR 0 6
86794: PUSH
86795: LD_VAR 0 1
86799: PPUSH
86800: CALL_OW 255
86804: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
86805: LD_INT 61
86807: PPUSH
86808: LD_VAR 0 6
86812: PPUSH
86813: CALL_OW 321
86817: PUSH
86818: LD_INT 2
86820: EQUAL
86821: IFFALSE 86831
// viewRange := 16 ;
86823: LD_ADDR_VAR 0 7
86827: PUSH
86828: LD_INT 16
86830: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
86831: LD_VAR 0 1
86835: PPUSH
86836: LD_VAR 0 2
86840: PPUSH
86841: LD_VAR 0 3
86845: PPUSH
86846: CALL_OW 297
86850: PUSH
86851: LD_VAR 0 5
86855: GREATER
86856: IFFALSE 86935
// begin ComMoveXY ( unit , x , y ) ;
86858: LD_VAR 0 1
86862: PPUSH
86863: LD_VAR 0 2
86867: PPUSH
86868: LD_VAR 0 3
86872: PPUSH
86873: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
86877: LD_INT 35
86879: PPUSH
86880: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
86884: LD_VAR 0 1
86888: PPUSH
86889: LD_VAR 0 2
86893: PPUSH
86894: LD_VAR 0 3
86898: PPUSH
86899: CALL 67457 0 3
86903: NOT
86904: IFFALSE 86908
// exit ;
86906: GO 87162
// until GetDistUnitXY ( unit , x , y ) < dist ;
86908: LD_VAR 0 1
86912: PPUSH
86913: LD_VAR 0 2
86917: PPUSH
86918: LD_VAR 0 3
86922: PPUSH
86923: CALL_OW 297
86927: PUSH
86928: LD_VAR 0 5
86932: LESS
86933: IFFALSE 86877
// end ; ComTurnXY ( unit , x , y ) ;
86935: LD_VAR 0 1
86939: PPUSH
86940: LD_VAR 0 2
86944: PPUSH
86945: LD_VAR 0 3
86949: PPUSH
86950: CALL_OW 118
// wait ( 5 ) ;
86954: LD_INT 5
86956: PPUSH
86957: CALL_OW 67
// _d := GetDir ( unit ) ;
86961: LD_ADDR_VAR 0 10
86965: PUSH
86966: LD_VAR 0 1
86970: PPUSH
86971: CALL_OW 254
86975: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
86976: LD_ADDR_VAR 0 8
86980: PUSH
86981: LD_VAR 0 1
86985: PPUSH
86986: CALL_OW 250
86990: PPUSH
86991: LD_VAR 0 10
86995: PPUSH
86996: LD_VAR 0 5
87000: PPUSH
87001: CALL_OW 272
87005: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
87006: LD_ADDR_VAR 0 9
87010: PUSH
87011: LD_VAR 0 1
87015: PPUSH
87016: CALL_OW 251
87020: PPUSH
87021: LD_VAR 0 10
87025: PPUSH
87026: LD_VAR 0 5
87030: PPUSH
87031: CALL_OW 273
87035: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
87036: LD_VAR 0 8
87040: PPUSH
87041: LD_VAR 0 9
87045: PPUSH
87046: CALL_OW 488
87050: NOT
87051: IFFALSE 87055
// exit ;
87053: GO 87162
// ComAnimCustom ( unit , 1 ) ;
87055: LD_VAR 0 1
87059: PPUSH
87060: LD_INT 1
87062: PPUSH
87063: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
87067: LD_VAR 0 8
87071: PPUSH
87072: LD_VAR 0 9
87076: PPUSH
87077: LD_VAR 0 6
87081: PPUSH
87082: LD_VAR 0 7
87086: PPUSH
87087: CALL_OW 330
// repeat wait ( 1 ) ;
87091: LD_INT 1
87093: PPUSH
87094: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
87098: LD_VAR 0 1
87102: PPUSH
87103: CALL_OW 316
87107: PUSH
87108: LD_VAR 0 1
87112: PPUSH
87113: CALL_OW 314
87117: OR
87118: PUSH
87119: LD_VAR 0 1
87123: PPUSH
87124: CALL_OW 302
87128: NOT
87129: OR
87130: PUSH
87131: LD_VAR 0 1
87135: PPUSH
87136: CALL_OW 301
87140: OR
87141: IFFALSE 87091
// RemoveSeeing ( _x , _y , side ) ;
87143: LD_VAR 0 8
87147: PPUSH
87148: LD_VAR 0 9
87152: PPUSH
87153: LD_VAR 0 6
87157: PPUSH
87158: CALL_OW 331
// end ; end_of_file
87162: LD_VAR 0 4
87166: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
87167: LD_VAR 0 1
87171: PUSH
87172: LD_INT 200
87174: DOUBLE
87175: GREATEREQUAL
87176: IFFALSE 87184
87178: LD_INT 299
87180: DOUBLE
87181: LESSEQUAL
87182: IFTRUE 87186
87184: GO 87218
87186: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
87187: LD_VAR 0 1
87191: PPUSH
87192: LD_VAR 0 2
87196: PPUSH
87197: LD_VAR 0 3
87201: PPUSH
87202: LD_VAR 0 4
87206: PPUSH
87207: LD_VAR 0 5
87211: PPUSH
87212: CALL 83284 0 5
87216: GO 87295
87218: LD_INT 300
87220: DOUBLE
87221: GREATEREQUAL
87222: IFFALSE 87230
87224: LD_INT 399
87226: DOUBLE
87227: LESSEQUAL
87228: IFTRUE 87232
87230: GO 87294
87232: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
87233: LD_VAR 0 1
87237: PPUSH
87238: LD_VAR 0 2
87242: PPUSH
87243: LD_VAR 0 3
87247: PPUSH
87248: LD_VAR 0 4
87252: PPUSH
87253: LD_VAR 0 5
87257: PPUSH
87258: LD_VAR 0 6
87262: PPUSH
87263: LD_VAR 0 7
87267: PPUSH
87268: LD_VAR 0 8
87272: PPUSH
87273: LD_VAR 0 9
87277: PPUSH
87278: LD_VAR 0 10
87282: PPUSH
87283: LD_VAR 0 11
87287: PPUSH
87288: CALL 81172 0 11
87292: GO 87295
87294: POP
// end ;
87295: PPOPN 11
87297: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
87298: LD_VAR 0 1
87302: PPUSH
87303: LD_VAR 0 2
87307: PPUSH
87308: LD_VAR 0 3
87312: PPUSH
87313: LD_VAR 0 4
87317: PPUSH
87318: LD_VAR 0 5
87322: PPUSH
87323: CALL 83266 0 5
// end ;
87327: PPOPN 5
87329: END
