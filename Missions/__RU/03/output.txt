// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 69 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 5 , 4 , 5 , 4 , 2 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 5
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 4
  26: PPUSH
  27: LD_INT 2
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 46261 0 9
// if debug then
  43: LD_EXP 3
  47: IFFALSE 56
// FogOff ( 3 ) ;
  49: LD_INT 3
  51: PPUSH
  52: CALL_OW 344
// PrepareOmikron ;
  56: CALL 2890 0 0
// PrepareRussians ;
  60: CALL 233 0 0
// MissionIntro ;
  64: CALL 6654 0 0
// end ;
  68: END
// export comArrayTmp ; export comArray ; export debug , prevMissionPrefix , currentMissionPrefix ; export meetBelkovBrother , cratesResources , oilResources , vehiclesPreviousMission , kurinOpinion , platonovOpinion , vehiclesToSave ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinVehNeeded ; export canDestroyBeriaBase ; export enableOmicronAI ; export kirovCanCaptureVehicles ; export endCutscene ; export VehNeeded ; export OmiRunB ; export kaganek ; export enemySkillLevel ; export KirovCurrentAttacker ; function Init ; begin
  69: LD_INT 0
  71: PPUSH
// debug := true ;
  72: LD_ADDR_EXP 3
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// prevMissionPrefix := 02_ ;
  80: LD_ADDR_EXP 4
  84: PUSH
  85: LD_STRING 02_
  87: ST_TO_ADDR
// currentMissionPrefix := 03_ ;
  88: LD_ADDR_EXP 5
  92: PUSH
  93: LD_STRING 03_
  95: ST_TO_ADDR
// counterIndex := 1 ;
  96: LD_ADDR_EXP 86
 100: PUSH
 101: LD_INT 1
 103: ST_TO_ADDR
// KirovCurrentAttacker := 1 ;
 104: LD_ADDR_EXP 43
 108: PUSH
 109: LD_INT 1
 111: ST_TO_ADDR
// KurinVehNeeded := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
 112: LD_ADDR_EXP 34
 116: PUSH
 117: LD_INT 1
 119: PUSH
 120: LD_INT 2
 122: PUSH
 123: LD_INT 3
 125: PUSH
 126: LD_INT 4
 128: PUSH
 129: EMPTY
 130: LIST
 131: LIST
 132: LIST
 133: LIST
 134: PUSH
 135: LD_OWVAR 67
 139: ARRAY
 140: ST_TO_ADDR
// timeToPrepareAttack := [ 20 20$0 , 17 17$0 , 15 15$0 , 12 12$30 ] [ Difficulty ] ;
 141: LD_ADDR_EXP 89
 145: PUSH
 146: LD_INT 42000
 148: PUSH
 149: LD_INT 35700
 151: PUSH
 152: LD_INT 31500
 154: PUSH
 155: LD_INT 26250
 157: PUSH
 158: EMPTY
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: PUSH
 164: LD_OWVAR 67
 168: ARRAY
 169: ST_TO_ADDR
// timeToArabAttack := [ 80 80$00 , 70 70$00 , 60 60$00 , 50 50$00 ] [ Difficulty ] ;
 170: LD_ADDR_EXP 90
 174: PUSH
 175: LD_INT 168000
 177: PUSH
 178: LD_INT 147000
 180: PUSH
 181: LD_INT 126000
 183: PUSH
 184: LD_INT 105000
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: PUSH
 193: LD_OWVAR 67
 197: ARRAY
 198: ST_TO_ADDR
// enemySkillLevel = [ 2 , 3 , 4 , 5 ] [ Difficulty ] ;
 199: LD_ADDR_EXP 42
 203: PUSH
 204: LD_INT 2
 206: PUSH
 207: LD_INT 3
 209: PUSH
 210: LD_INT 4
 212: PUSH
 213: LD_INT 5
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: LD_OWVAR 67
 226: ARRAY
 227: ST_TO_ADDR
// end ; end_of_file
 228: LD_VAR 0 1
 232: RET
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Benko , Kuklajs ; export otherBeriaUnits , beriaBase , beriaDepot , beriaVehs ; export Kurin , Popov ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot , kirovLab , kirovBarracks , kirovWorkshop ; export Grishko , Gaydar , Bukov , Scholtze , Scholtze2 ; export burlakTeam , kirovEngs ; export function PrepareRussians ; var un ; begin
 233: LD_INT 0
 235: PPUSH
 236: PPUSH
// PrepareHeroes ;
 237: CALL 254 0 0
// PrepareBeriaBase ;
 241: CALL 957 0 0
// PrepareKirovBase ;
 245: CALL 1398 0 0
// end ;
 249: LD_VAR 0 1
 253: RET
// function PrepareHeroes ; var un ; begin
 254: LD_INT 0
 256: PPUSH
 257: PPUSH
// uc_side := 6 ;
 258: LD_ADDR_OWVAR 20
 262: PUSH
 263: LD_INT 6
 265: ST_TO_ADDR
// otherBeriaUnits := CreateCharacterSet ( 02_burlakTeam ) ;
 266: LD_ADDR_EXP 52
 270: PUSH
 271: LD_STRING 02_burlakTeam
 273: PPUSH
 274: CALL_OW 31
 278: ST_TO_ADDR
// uc_side := 3 ;
 279: LD_ADDR_OWVAR 20
 283: PUSH
 284: LD_INT 3
 286: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
 287: LD_ADDR_EXP 44
 291: PUSH
 292: LD_STRING Burlak
 294: PPUSH
 295: LD_EXP 3
 299: NOT
 300: PPUSH
 301: LD_EXP 4
 305: PPUSH
 306: CALL 12790 0 3
 310: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
 311: LD_ADDR_EXP 45
 315: PUSH
 316: LD_STRING Gnyevko
 318: PPUSH
 319: LD_EXP 3
 323: NOT
 324: PPUSH
 325: LD_EXP 4
 329: PPUSH
 330: CALL 12790 0 3
 334: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , ( not debug ) , prevMissionPrefix ) ;
 335: LD_ADDR_EXP 47
 339: PUSH
 340: LD_STRING Kovalyuk
 342: PPUSH
 343: LD_EXP 3
 347: NOT
 348: PPUSH
 349: LD_EXP 4
 353: PPUSH
 354: CALL 12790 0 3
 358: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
 359: LD_ADDR_EXP 46
 363: PUSH
 364: LD_STRING Kirilenkova
 366: PPUSH
 367: LD_EXP 3
 371: NOT
 372: PPUSH
 373: LD_EXP 4
 377: PPUSH
 378: CALL 12790 0 3
 382: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
 383: LD_ADDR_EXP 48
 387: PUSH
 388: LD_STRING Belkov
 390: PPUSH
 391: LD_EXP 3
 395: NOT
 396: PPUSH
 397: LD_EXP 4
 401: PPUSH
 402: CALL 12790 0 3
 406: ST_TO_ADDR
// Benko := PrepareUnit ( Benko , ( not debug ) , prevMissionPrefix ) ;
 407: LD_ADDR_EXP 50
 411: PUSH
 412: LD_STRING Benko
 414: PPUSH
 415: LD_EXP 3
 419: NOT
 420: PPUSH
 421: LD_EXP 4
 425: PPUSH
 426: CALL 12790 0 3
 430: ST_TO_ADDR
// Kuklajs := PrepareUnit ( Kuklajs , ( not debug ) , prevMissionPrefix ) ;
 431: LD_ADDR_EXP 51
 435: PUSH
 436: LD_STRING Kuklajs
 438: PPUSH
 439: LD_EXP 3
 443: NOT
 444: PPUSH
 445: LD_EXP 4
 449: PPUSH
 450: CALL 12790 0 3
 454: ST_TO_ADDR
// uc_side := 6 ;
 455: LD_ADDR_OWVAR 20
 459: PUSH
 460: LD_INT 6
 462: ST_TO_ADDR
// Kurin := NewCharacter ( Kurin ) ;
 463: LD_ADDR_EXP 56
 467: PUSH
 468: LD_STRING Kurin
 470: PPUSH
 471: CALL_OW 25
 475: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
 476: LD_ADDR_EXP 57
 480: PUSH
 481: LD_STRING Popov
 483: PPUSH
 484: CALL_OW 25
 488: ST_TO_ADDR
// Grishko := NewCharacter ( Grishko ) ;
 489: LD_ADDR_EXP 65
 493: PUSH
 494: LD_STRING Grishko
 496: PPUSH
 497: CALL_OW 25
 501: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
 502: LD_ADDR_EXP 66
 506: PUSH
 507: LD_STRING Gaydar
 509: PPUSH
 510: CALL_OW 25
 514: ST_TO_ADDR
// Bukov := NewCharacter ( Bukov ) ;
 515: LD_ADDR_EXP 67
 519: PUSH
 520: LD_STRING Bukov
 522: PPUSH
 523: CALL_OW 25
 527: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
 528: LD_EXP 44
 532: PUSH
 533: LD_EXP 45
 537: PUSH
 538: LD_EXP 47
 542: PUSH
 543: EMPTY
 544: LIST
 545: LIST
 546: LIST
 547: PPUSH
 548: LD_INT 3
 550: PPUSH
 551: CALL_OW 336
// SetClass ( Kirilenkova , 4 ) ;
 555: LD_EXP 46
 559: PPUSH
 560: LD_INT 4
 562: PPUSH
 563: CALL_OW 336
// PlaceUnitXY ( Kurin , 153 , 103 , false ) ;
 567: LD_EXP 56
 571: PPUSH
 572: LD_INT 153
 574: PPUSH
 575: LD_INT 103
 577: PPUSH
 578: LD_INT 0
 580: PPUSH
 581: CALL_OW 48
// AddComHold ( Kurin ) ;
 585: LD_EXP 56
 589: PPUSH
 590: CALL_OW 200
// AddComTurnXY ( Kurin , 155 , 106 ) ;
 594: LD_EXP 56
 598: PPUSH
 599: LD_INT 155
 601: PPUSH
 602: LD_INT 106
 604: PPUSH
 605: CALL_OW 178
// PlaceUnitXY ( Popov , 131 , 49 , false ) ;
 609: LD_EXP 57
 613: PPUSH
 614: LD_INT 131
 616: PPUSH
 617: LD_INT 49
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL_OW 48
// AddComHold ( Popov ) ;
 627: LD_EXP 57
 631: PPUSH
 632: CALL_OW 200
// AddComTurnXY ( Popov , 131 , 31 ) ;
 636: LD_EXP 57
 640: PPUSH
 641: LD_INT 131
 643: PPUSH
 644: LD_INT 31
 646: PPUSH
 647: CALL_OW 178
// PlaceUnitXY ( Gaydar , 91 , 15 , false ) ;
 651: LD_EXP 66
 655: PPUSH
 656: LD_INT 91
 658: PPUSH
 659: LD_INT 15
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: CALL_OW 48
// AddComHold ( Gaydar ) ;
 669: LD_EXP 66
 673: PPUSH
 674: CALL_OW 200
// AddComTurnXY ( Gaydar , 131 , 31 ) ;
 678: LD_EXP 66
 682: PPUSH
 683: LD_INT 131
 685: PPUSH
 686: LD_INT 31
 688: PPUSH
 689: CALL_OW 178
// PlaceUnitXY ( Bukov , 86 , 17 , false ) ;
 693: LD_EXP 67
 697: PPUSH
 698: LD_INT 86
 700: PPUSH
 701: LD_INT 17
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: CALL_OW 48
// AddComHold ( Bukov ) ;
 711: LD_EXP 67
 715: PPUSH
 716: CALL_OW 200
// AddComTurnXY ( Bukov , 94 , 32 ) ;
 720: LD_EXP 67
 724: PPUSH
 725: LD_INT 94
 727: PPUSH
 728: LD_INT 32
 730: PPUSH
 731: CALL_OW 178
// PlaceUnitXY ( Belkov , 155 , 106 , false ) ;
 735: LD_EXP 48
 739: PPUSH
 740: LD_INT 155
 742: PPUSH
 743: LD_INT 106
 745: PPUSH
 746: LD_INT 0
 748: PPUSH
 749: CALL_OW 48
// AddComHold ( Belkov ) ;
 753: LD_EXP 48
 757: PPUSH
 758: CALL_OW 200
// AddComTurnUnit ( Belkov , Kurin ) ;
 762: LD_EXP 48
 766: PPUSH
 767: LD_EXP 56
 771: PPUSH
 772: CALL_OW 179
// PlaceUnitXY ( Burlak , 154 , 106 , false ) ;
 776: LD_EXP 44
 780: PPUSH
 781: LD_INT 154
 783: PPUSH
 784: LD_INT 106
 786: PPUSH
 787: LD_INT 0
 789: PPUSH
 790: CALL_OW 48
// AddComHold ( Burlak ) ;
 794: LD_EXP 44
 798: PPUSH
 799: CALL_OW 200
// AddComTurnUnit ( Burlak , Kurin ) ;
 803: LD_EXP 44
 807: PPUSH
 808: LD_EXP 56
 812: PPUSH
 813: CALL_OW 179
// burlakTeam := [ Gnyevko , Kovalyuk , Kirilenkova ] ;
 817: LD_ADDR_EXP 70
 821: PUSH
 822: LD_EXP 45
 826: PUSH
 827: LD_EXP 47
 831: PUSH
 832: LD_EXP 46
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: LIST
 841: ST_TO_ADDR
// for un in otherBeriaUnits do
 842: LD_ADDR_VAR 0 2
 846: PUSH
 847: LD_EXP 52
 851: PUSH
 852: FOR_IN
 853: IFFALSE 895
// begin PlaceUnitArea ( un , kirovSpawn , false ) ;
 855: LD_VAR 0 2
 859: PPUSH
 860: LD_INT 4
 862: PPUSH
 863: LD_INT 0
 865: PPUSH
 866: CALL_OW 49
// AddComHold ( un ) ;
 870: LD_VAR 0 2
 874: PPUSH
 875: CALL_OW 200
// AddComTurnUnit ( un , Kurin ) ;
 879: LD_VAR 0 2
 883: PPUSH
 884: LD_EXP 56
 888: PPUSH
 889: CALL_OW 179
// end ;
 893: GO 852
 895: POP
 896: POP
// for un in BurlakTeam do
 897: LD_ADDR_VAR 0 2
 901: PUSH
 902: LD_EXP 70
 906: PUSH
 907: FOR_IN
 908: IFFALSE 950
// begin PlaceUnitArea ( un , kirovSpawn , false ) ;
 910: LD_VAR 0 2
 914: PPUSH
 915: LD_INT 4
 917: PPUSH
 918: LD_INT 0
 920: PPUSH
 921: CALL_OW 49
// AddComHold ( un ) ;
 925: LD_VAR 0 2
 929: PPUSH
 930: CALL_OW 200
// AddComTurnUnit ( un , Kurin ) ;
 934: LD_VAR 0 2
 938: PPUSH
 939: LD_EXP 56
 943: PPUSH
 944: CALL_OW 179
// end ;
 948: GO 907
 950: POP
 951: POP
// end ;
 952: LD_VAR 0 1
 956: RET
// export function PrepareBeriaBase ; var i , veh , bonusResources , beriaDepot ; begin
 957: LD_INT 0
 959: PPUSH
 960: PPUSH
 961: PPUSH
 962: PPUSH
 963: PPUSH
// beriaBase := LoadVariable ( 02_Beria , [ ] ) ;
 964: LD_ADDR_EXP 53
 968: PUSH
 969: LD_STRING 02_Beria
 971: PPUSH
 972: EMPTY
 973: PPUSH
 974: CALL_OW 30
 978: ST_TO_ADDR
// beriaVehs := LoadVariable ( 02_VehiclesCount , [ ] ) ;
 979: LD_ADDR_EXP 55
 983: PUSH
 984: LD_STRING 02_VehiclesCount
 986: PPUSH
 987: EMPTY
 988: PPUSH
 989: CALL_OW 30
 993: ST_TO_ADDR
// uc_side := 3 ;
 994: LD_ADDR_OWVAR 20
 998: PUSH
 999: LD_INT 3
1001: ST_TO_ADDR
// uc_nation := 3 ;
1002: LD_ADDR_OWVAR 21
1006: PUSH
1007: LD_INT 3
1009: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
1010: LD_ADDR_OWVAR 37
1014: PUSH
1015: LD_INT 21
1017: ST_TO_ADDR
// vc_control = control_manual ;
1018: LD_ADDR_OWVAR 38
1022: PUSH
1023: LD_INT 1
1025: ST_TO_ADDR
// vc_engine = engine_combustion ;
1026: LD_ADDR_OWVAR 39
1030: PUSH
1031: LD_INT 1
1033: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
1034: LD_ADDR_OWVAR 40
1038: PUSH
1039: LD_INT 42
1041: ST_TO_ADDR
// for i := 1 to beriaBase do
1042: LD_ADDR_VAR 0 2
1046: PUSH
1047: DOUBLE
1048: LD_INT 1
1050: DEC
1051: ST_TO_ADDR
1052: LD_EXP 53
1056: PUSH
1057: FOR_TO
1058: IFFALSE 1219
// begin bc_type := beriaBase [ i ] [ 1 ] ;
1060: LD_ADDR_OWVAR 42
1064: PUSH
1065: LD_EXP 53
1069: PUSH
1070: LD_VAR 0 2
1074: ARRAY
1075: PUSH
1076: LD_INT 1
1078: ARRAY
1079: ST_TO_ADDR
// bc_level := beriaBase [ i ] [ 2 ] ;
1080: LD_ADDR_OWVAR 43
1084: PUSH
1085: LD_EXP 53
1089: PUSH
1090: LD_VAR 0 2
1094: ARRAY
1095: PUSH
1096: LD_INT 2
1098: ARRAY
1099: ST_TO_ADDR
// if bc_type = b_lab then
1100: LD_OWVAR 42
1104: PUSH
1105: LD_INT 6
1107: EQUAL
1108: IFFALSE 1126
// begin bc_kind1 := b_lab_basic ;
1110: LD_ADDR_OWVAR 44
1114: PUSH
1115: LD_INT 9
1117: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
1118: LD_ADDR_OWVAR 45
1122: PUSH
1123: LD_INT 9
1125: ST_TO_ADDR
// end ; if beriaBase [ i ] [ 4 ] < 70 then
1126: LD_EXP 53
1130: PUSH
1131: LD_VAR 0 2
1135: ARRAY
1136: PUSH
1137: LD_INT 4
1139: ARRAY
1140: PUSH
1141: LD_INT 70
1143: LESS
1144: IFFALSE 1156
// uc_nation := 1 else
1146: LD_ADDR_OWVAR 21
1150: PUSH
1151: LD_INT 1
1153: ST_TO_ADDR
1154: GO 1164
// uc_nation := 3 ;
1156: LD_ADDR_OWVAR 21
1160: PUSH
1161: LD_INT 3
1163: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 3 ] + 46 , beriaBase [ i ] [ 4 ] , beriaBase [ i ] [ 5 ] ) ;
1164: LD_EXP 53
1168: PUSH
1169: LD_VAR 0 2
1173: ARRAY
1174: PUSH
1175: LD_INT 3
1177: ARRAY
1178: PUSH
1179: LD_INT 46
1181: PLUS
1182: PPUSH
1183: LD_EXP 53
1187: PUSH
1188: LD_VAR 0 2
1192: ARRAY
1193: PUSH
1194: LD_INT 4
1196: ARRAY
1197: PPUSH
1198: LD_EXP 53
1202: PUSH
1203: LD_VAR 0 2
1207: ARRAY
1208: PUSH
1209: LD_INT 5
1211: ARRAY
1212: PPUSH
1213: CALL_OW 47
// end ;
1217: GO 1057
1219: POP
1220: POP
// for i := 1 to beriaVehs do
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: DOUBLE
1227: LD_INT 1
1229: DEC
1230: ST_TO_ADDR
1231: LD_EXP 55
1235: PUSH
1236: FOR_TO
1237: IFFALSE 1301
// begin vc_fuel_battery = [ 20 , 35 , 50 , 80 ] [ Rand ( 1 , 4 ) ] ;
1239: LD_ADDR_OWVAR 41
1243: PUSH
1244: LD_INT 20
1246: PUSH
1247: LD_INT 35
1249: PUSH
1250: LD_INT 50
1252: PUSH
1253: LD_INT 80
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: PUSH
1262: LD_INT 1
1264: PPUSH
1265: LD_INT 4
1267: PPUSH
1268: CALL_OW 12
1272: ARRAY
1273: ST_TO_ADDR
// veh = CreateVehicle ;
1274: LD_ADDR_VAR 0 3
1278: PUSH
1279: CALL_OW 45
1283: ST_TO_ADDR
// PlaceUnitArea ( veh , beriaBaseArea , false ) ;
1284: LD_VAR 0 3
1288: PPUSH
1289: LD_INT 11
1291: PPUSH
1292: LD_INT 0
1294: PPUSH
1295: CALL_OW 49
// end ;
1299: GO 1236
1301: POP
1302: POP
// beriaDepot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1303: LD_ADDR_VAR 0 5
1307: PUSH
1308: LD_INT 22
1310: PUSH
1311: LD_INT 3
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: PUSH
1318: LD_INT 30
1320: PUSH
1321: LD_INT 0
1323: PUSH
1324: EMPTY
1325: LIST
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PPUSH
1332: CALL_OW 69
1336: PUSH
1337: LD_INT 1
1339: ARRAY
1340: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1341: LD_VAR 0 5
1345: PPUSH
1346: LD_STRING beria
1348: PPUSH
1349: CALL_OW 500
// SetResourceType ( GetBase ( beriaDepot ) , 1 , 100 ) ;
1353: LD_VAR 0 5
1357: PPUSH
1358: CALL_OW 274
1362: PPUSH
1363: LD_INT 1
1365: PPUSH
1366: LD_INT 100
1368: PPUSH
1369: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , 2 , 20 ) ;
1373: LD_VAR 0 5
1377: PPUSH
1378: CALL_OW 274
1382: PPUSH
1383: LD_INT 2
1385: PPUSH
1386: LD_INT 20
1388: PPUSH
1389: CALL_OW 277
// end ;
1393: LD_VAR 0 1
1397: RET
// export function PrepareKirovBase ; var i , un , tmp , buildings , x , b , bonusResources ; begin
1398: LD_INT 0
1400: PPUSH
1401: PPUSH
1402: PPUSH
1403: PPUSH
1404: PPUSH
1405: PPUSH
1406: PPUSH
1407: PPUSH
// kirovBase := LoadVariable ( 02_Kirov , [ ] ) ;
1408: LD_ADDR_EXP 59
1412: PUSH
1413: LD_STRING 02_Kirov
1415: PPUSH
1416: EMPTY
1417: PPUSH
1418: CALL_OW 30
1422: ST_TO_ADDR
// uc_side := 6 ;
1423: LD_ADDR_OWVAR 20
1427: PUSH
1428: LD_INT 6
1430: ST_TO_ADDR
// uc_nation := 3 ;
1431: LD_ADDR_OWVAR 21
1435: PUSH
1436: LD_INT 3
1438: ST_TO_ADDR
// otherKirovUnits := CreateCharacterSet ( 02_kirovTeam ) ;
1439: LD_ADDR_EXP 58
1443: PUSH
1444: LD_STRING 02_kirovTeam
1446: PPUSH
1447: CALL_OW 31
1451: ST_TO_ADDR
// for i := 1 to kirovBase do
1452: LD_ADDR_VAR 0 2
1456: PUSH
1457: DOUBLE
1458: LD_INT 1
1460: DEC
1461: ST_TO_ADDR
1462: LD_EXP 59
1466: PUSH
1467: FOR_TO
1468: IFFALSE 1617
// begin bc_type := kirovBase [ i ] [ 1 ] ;
1470: LD_ADDR_OWVAR 42
1474: PUSH
1475: LD_EXP 59
1479: PUSH
1480: LD_VAR 0 2
1484: ARRAY
1485: PUSH
1486: LD_INT 1
1488: ARRAY
1489: ST_TO_ADDR
// bc_level := kirovBase [ i ] [ 2 ] ;
1490: LD_ADDR_OWVAR 43
1494: PUSH
1495: LD_EXP 59
1499: PUSH
1500: LD_VAR 0 2
1504: ARRAY
1505: PUSH
1506: LD_INT 2
1508: ARRAY
1509: ST_TO_ADDR
// x := kirovBase [ i ] [ 3 ] + 46 ;
1510: LD_ADDR_VAR 0 6
1514: PUSH
1515: LD_EXP 59
1519: PUSH
1520: LD_VAR 0 2
1524: ARRAY
1525: PUSH
1526: LD_INT 3
1528: ARRAY
1529: PUSH
1530: LD_INT 46
1532: PLUS
1533: ST_TO_ADDR
// if x < 140 then
1534: LD_VAR 0 6
1538: PUSH
1539: LD_INT 140
1541: LESS
1542: IFFALSE 1554
// uc_side := 3 else
1544: LD_ADDR_OWVAR 20
1548: PUSH
1549: LD_INT 3
1551: ST_TO_ADDR
1552: GO 1562
// uc_side := 6 ;
1554: LD_ADDR_OWVAR 20
1558: PUSH
1559: LD_INT 6
1561: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 3 ] + 46 , kirovBase [ i ] [ 4 ] , kirovBase [ i ] [ 5 ] ) ;
1562: LD_EXP 59
1566: PUSH
1567: LD_VAR 0 2
1571: ARRAY
1572: PUSH
1573: LD_INT 3
1575: ARRAY
1576: PUSH
1577: LD_INT 46
1579: PLUS
1580: PPUSH
1581: LD_EXP 59
1585: PUSH
1586: LD_VAR 0 2
1590: ARRAY
1591: PUSH
1592: LD_INT 4
1594: ARRAY
1595: PPUSH
1596: LD_EXP 59
1600: PUSH
1601: LD_VAR 0 2
1605: ARRAY
1606: PUSH
1607: LD_INT 5
1609: ARRAY
1610: PPUSH
1611: CALL_OW 47
// end ;
1615: GO 1467
1617: POP
1618: POP
// kirovDepot := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1619: LD_ADDR_EXP 60
1623: PUSH
1624: LD_INT 22
1626: PUSH
1627: LD_INT 6
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: PUSH
1634: LD_INT 30
1636: PUSH
1637: LD_INT 0
1639: PUSH
1640: EMPTY
1641: LIST
1642: LIST
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: PPUSH
1648: CALL_OW 69
1652: PUSH
1653: LD_INT 1
1655: ARRAY
1656: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
1657: LD_EXP 60
1661: PPUSH
1662: LD_STRING kirov
1664: PPUSH
1665: CALL_OW 500
// for i := 1 to 2 do
1669: LD_ADDR_VAR 0 2
1673: PUSH
1674: DOUBLE
1675: LD_INT 1
1677: DEC
1678: ST_TO_ADDR
1679: LD_INT 2
1681: PUSH
1682: FOR_TO
1683: IFFALSE 1709
// SetResourceType ( GetBase ( kirovDepot ) , i , 500 ) ;
1685: LD_EXP 60
1689: PPUSH
1690: CALL_OW 274
1694: PPUSH
1695: LD_VAR 0 2
1699: PPUSH
1700: LD_INT 500
1702: PPUSH
1703: CALL_OW 277
1707: GO 1682
1709: POP
1710: POP
// tmp := otherKirovUnits ;
1711: LD_ADDR_VAR 0 4
1715: PUSH
1716: LD_EXP 58
1720: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_breastwork ] ] ] ) ;
1721: LD_ADDR_VAR 0 5
1725: PUSH
1726: LD_INT 22
1728: PUSH
1729: LD_INT 6
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: LD_INT 21
1738: PUSH
1739: LD_INT 3
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: PUSH
1746: LD_INT 3
1748: PUSH
1749: LD_INT 30
1751: PUSH
1752: LD_INT 31
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: LIST
1767: PPUSH
1768: CALL_OW 69
1772: ST_TO_ADDR
// repeat b := buildings [ 1 ] ;
1773: LD_ADDR_VAR 0 7
1777: PUSH
1778: LD_VAR 0 5
1782: PUSH
1783: LD_INT 1
1785: ARRAY
1786: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 1 ] , b ) ;
1787: LD_VAR 0 4
1791: PUSH
1792: LD_INT 1
1794: ARRAY
1795: PPUSH
1796: LD_VAR 0 7
1800: PPUSH
1801: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
1805: LD_ADDR_VAR 0 4
1809: PUSH
1810: LD_VAR 0 4
1814: PPUSH
1815: LD_INT 1
1817: PPUSH
1818: CALL_OW 3
1822: ST_TO_ADDR
// if UnitsInside ( b ) = 3 then
1823: LD_VAR 0 7
1827: PPUSH
1828: CALL_OW 313
1832: PUSH
1833: LD_INT 3
1835: EQUAL
1836: IFFALSE 1856
// buildings := Delete ( buildings , 1 ) ;
1838: LD_ADDR_VAR 0 5
1842: PUSH
1843: LD_VAR 0 5
1847: PPUSH
1848: LD_INT 1
1850: PPUSH
1851: CALL_OW 3
1855: ST_TO_ADDR
// until not buildings or not tmp ;
1856: LD_VAR 0 5
1860: NOT
1861: PUSH
1862: LD_VAR 0 4
1866: NOT
1867: OR
1868: IFFALSE 1773
// if tmp then
1870: LD_VAR 0 4
1874: IFFALSE 1914
// begin for i in tmp do
1876: LD_ADDR_VAR 0 2
1880: PUSH
1881: LD_VAR 0 4
1885: PUSH
1886: FOR_IN
1887: IFFALSE 1912
// PlaceUnitXYR ( i , 164 , 109 , 4 , false ) ;
1889: LD_VAR 0 2
1893: PPUSH
1894: LD_INT 164
1896: PPUSH
1897: LD_INT 109
1899: PPUSH
1900: LD_INT 4
1902: PPUSH
1903: LD_INT 0
1905: PPUSH
1906: CALL_OW 50
1910: GO 1886
1912: POP
1913: POP
// end ; end ;
1914: LD_VAR 0 1
1918: RET
// export function UpgradeKirovBase ; var i , un , kirovBuildingArray ; begin
1919: LD_INT 0
1921: PPUSH
1922: PPUSH
1923: PPUSH
1924: PPUSH
// kirovBuildingArray := [ [ b_bunker , 146 , 106 , 1 ] , [ b_bunker , 175 , 123 , 5 ] , [ b_bunker , 170 , 101 , 3 ] , [ b_bunker , 172 , 104 , 4 ] , [ b_bunker , 179 , 118 , 4 ] , [ b_oil_power , 159 , 96 , 3 ] ] ;
1925: LD_ADDR_VAR 0 4
1929: PUSH
1930: LD_INT 32
1932: PUSH
1933: LD_INT 146
1935: PUSH
1936: LD_INT 106
1938: PUSH
1939: LD_INT 1
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: LIST
1946: LIST
1947: PUSH
1948: LD_INT 32
1950: PUSH
1951: LD_INT 175
1953: PUSH
1954: LD_INT 123
1956: PUSH
1957: LD_INT 5
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: PUSH
1966: LD_INT 32
1968: PUSH
1969: LD_INT 170
1971: PUSH
1972: LD_INT 101
1974: PUSH
1975: LD_INT 3
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_INT 32
1986: PUSH
1987: LD_INT 172
1989: PUSH
1990: LD_INT 104
1992: PUSH
1993: LD_INT 4
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: PUSH
2002: LD_INT 32
2004: PUSH
2005: LD_INT 179
2007: PUSH
2008: LD_INT 118
2010: PUSH
2011: LD_INT 4
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 26
2022: PUSH
2023: LD_INT 159
2025: PUSH
2026: LD_INT 96
2028: PUSH
2029: LD_INT 3
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: ST_TO_ADDR
// kirovEngs := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
2046: LD_ADDR_EXP 71
2050: PUSH
2051: LD_INT 22
2053: PUSH
2054: LD_INT 6
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: PUSH
2061: LD_INT 21
2063: PUSH
2064: LD_INT 1
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: PUSH
2071: LD_INT 25
2073: PUSH
2074: LD_INT 2
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: LIST
2085: PPUSH
2086: CALL_OW 69
2090: ST_TO_ADDR
// kirovLab := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
2091: LD_ADDR_EXP 62
2095: PUSH
2096: LD_INT 22
2098: PUSH
2099: LD_INT 6
2101: PUSH
2102: EMPTY
2103: LIST
2104: LIST
2105: PUSH
2106: LD_INT 21
2108: PUSH
2109: LD_INT 3
2111: PUSH
2112: EMPTY
2113: LIST
2114: LIST
2115: PUSH
2116: LD_INT 30
2118: PUSH
2119: LD_INT 6
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PUSH
2126: EMPTY
2127: LIST
2128: LIST
2129: LIST
2130: PPUSH
2131: CALL_OW 69
2135: PUSH
2136: LD_INT 1
2138: ARRAY
2139: ST_TO_ADDR
// kirovBarracks := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_armoury ] ] ) ;
2140: LD_ADDR_EXP 63
2144: PUSH
2145: LD_INT 22
2147: PUSH
2148: LD_INT 6
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: PUSH
2155: LD_INT 21
2157: PUSH
2158: LD_INT 3
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: PUSH
2165: LD_INT 30
2167: PUSH
2168: LD_INT 4
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: LIST
2179: PPUSH
2180: CALL_OW 69
2184: ST_TO_ADDR
// kirovWorkshop := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_workshop ] ] ) [ 1 ] ;
2185: LD_ADDR_EXP 64
2189: PUSH
2190: LD_INT 22
2192: PUSH
2193: LD_INT 6
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: PUSH
2200: LD_INT 21
2202: PUSH
2203: LD_INT 3
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: PUSH
2210: LD_INT 30
2212: PUSH
2213: LD_INT 2
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PUSH
2220: EMPTY
2221: LIST
2222: LIST
2223: LIST
2224: PPUSH
2225: CALL_OW 69
2229: PUSH
2230: LD_INT 1
2232: ARRAY
2233: ST_TO_ADDR
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] ] ) ;
2234: LD_ADDR_VAR 0 3
2238: PUSH
2239: LD_INT 22
2241: PUSH
2242: LD_INT 6
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: PUSH
2249: LD_INT 21
2251: PUSH
2252: LD_INT 1
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 25
2261: PUSH
2262: LD_INT 3
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: LIST
2273: PPUSH
2274: CALL_OW 69
2278: ST_TO_ADDR
// ComExitBuilding ( un ) ;
2279: LD_VAR 0 3
2283: PPUSH
2284: CALL_OW 122
// AddComEnterUnit ( un , kirovWorkshop ) ;
2288: LD_VAR 0 3
2292: PPUSH
2293: LD_EXP 64
2297: PPUSH
2298: CALL_OW 180
// wait ( 0 0$1 ) ;
2302: LD_INT 35
2304: PPUSH
2305: CALL_OW 67
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] ] ) ;
2309: LD_ADDR_VAR 0 3
2313: PUSH
2314: LD_INT 22
2316: PUSH
2317: LD_INT 6
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: PUSH
2324: LD_INT 21
2326: PUSH
2327: LD_INT 1
2329: PUSH
2330: EMPTY
2331: LIST
2332: LIST
2333: PUSH
2334: LD_INT 25
2336: PUSH
2337: LD_INT 4
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: PUSH
2344: EMPTY
2345: LIST
2346: LIST
2347: LIST
2348: PPUSH
2349: CALL_OW 69
2353: ST_TO_ADDR
// AddComEnterUnit ( un , kirovLab ) ;
2354: LD_VAR 0 3
2358: PPUSH
2359: LD_EXP 62
2363: PPUSH
2364: CALL_OW 180
// for i in kirovBuildingArray do
2368: LD_ADDR_VAR 0 2
2372: PUSH
2373: LD_VAR 0 4
2377: PUSH
2378: FOR_IN
2379: IFFALSE 2428
// AddComBuild ( kirovEngs , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2381: LD_EXP 71
2385: PPUSH
2386: LD_VAR 0 2
2390: PUSH
2391: LD_INT 1
2393: ARRAY
2394: PPUSH
2395: LD_VAR 0 2
2399: PUSH
2400: LD_INT 2
2402: ARRAY
2403: PPUSH
2404: LD_VAR 0 2
2408: PUSH
2409: LD_INT 3
2411: ARRAY
2412: PPUSH
2413: LD_VAR 0 2
2417: PUSH
2418: LD_INT 4
2420: ARRAY
2421: PPUSH
2422: CALL_OW 205
2426: GO 2378
2428: POP
2429: POP
// comArray := [ kirovLab , kirovBarracks [ 1 ] , kirovBarracks [ 2 ] , kirovDepot , kirovWorkshop ] ;
2430: LD_ADDR_EXP 2
2434: PUSH
2435: LD_EXP 62
2439: PUSH
2440: LD_EXP 63
2444: PUSH
2445: LD_INT 1
2447: ARRAY
2448: PUSH
2449: LD_EXP 63
2453: PUSH
2454: LD_INT 2
2456: ARRAY
2457: PUSH
2458: LD_EXP 60
2462: PUSH
2463: LD_EXP 64
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: LIST
2472: LIST
2473: LIST
2474: ST_TO_ADDR
// end ;
2475: LD_VAR 0 1
2479: RET
// export function PrepareScholtze ; begin
2480: LD_INT 0
2482: PPUSH
// uc_side := 5 ;
2483: LD_ADDR_OWVAR 20
2487: PUSH
2488: LD_INT 5
2490: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
2491: LD_ADDR_EXP 68
2495: PUSH
2496: LD_STRING Scholtze
2498: PPUSH
2499: CALL_OW 25
2503: ST_TO_ADDR
// Scholtze2 := NewCharacter ( Scholtze ) ;
2504: LD_ADDR_EXP 69
2508: PUSH
2509: LD_STRING Scholtze
2511: PPUSH
2512: CALL_OW 25
2516: ST_TO_ADDR
// PlaceUnitArea ( Scholtze , ScholtzeSpawnArea , true ) ;
2517: LD_EXP 68
2521: PPUSH
2522: LD_INT 12
2524: PPUSH
2525: LD_INT 1
2527: PPUSH
2528: CALL_OW 49
// end ;
2532: LD_VAR 0 1
2536: RET
// export function KirovAttackOmicron ; begin
2537: LD_INT 0
2539: PPUSH
// if KirovCurrentAttacker = Length ( kirovAttackVehicles ) then
2540: LD_EXP 43
2544: PUSH
2545: LD_EXP 91
2549: PPUSH
2550: CALL 53296 0 1
2554: EQUAL
2555: IFFALSE 2565
// KirovCurrentAttacker = 1 ;
2557: LD_ADDR_EXP 43
2561: PUSH
2562: LD_INT 1
2564: ST_TO_ADDR
// AgressiveMove ( kirovAttackVehicles [ KirovCurrentAttacker ] , [ [ 34 , 38 ] ] ) ;
2565: LD_EXP 91
2569: PUSH
2570: LD_EXP 43
2574: ARRAY
2575: PPUSH
2576: LD_INT 34
2578: PUSH
2579: LD_INT 38
2581: PUSH
2582: EMPTY
2583: LIST
2584: LIST
2585: PUSH
2586: EMPTY
2587: LIST
2588: PPUSH
2589: CALL 52175 0 2
// end ; end_of_file
2593: LD_VAR 0 1
2597: RET
// export omicronSquad , Omikron , omikronDepot ; export amIntroUnits ; export amConvoyGroups ; export amLabs , amBarracks , amFactory , amVehs ; export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
2598: LD_INT 0
2600: PPUSH
2601: PPUSH
2602: PPUSH
2603: PPUSH
// amIntroUnits = [ ] ;
2604: LD_ADDR_EXP 75
2608: PUSH
2609: EMPTY
2610: ST_TO_ADDR
// uc_side = 1 ;
2611: LD_ADDR_OWVAR 20
2615: PUSH
2616: LD_INT 1
2618: ST_TO_ADDR
// uc_nation = nation_american ;
2619: LD_ADDR_OWVAR 21
2623: PUSH
2624: LD_INT 1
2626: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
2627: LD_ADDR_OWVAR 37
2631: PUSH
2632: LD_INT 3
2634: ST_TO_ADDR
// vc_control = control_manual ;
2635: LD_ADDR_OWVAR 38
2639: PUSH
2640: LD_INT 1
2642: ST_TO_ADDR
// vc_engine = engine_combustion ;
2643: LD_ADDR_OWVAR 39
2647: PUSH
2648: LD_INT 1
2650: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2651: LD_ADDR_OWVAR 40
2655: PUSH
2656: LD_INT 3
2658: ST_TO_ADDR
// vc_fuel_battery = 100 ;
2659: LD_ADDR_OWVAR 41
2663: PUSH
2664: LD_INT 100
2666: ST_TO_ADDR
// veh = CreateVehicle ;
2667: LD_ADDR_VAR 0 3
2671: PUSH
2672: CALL_OW 45
2676: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2677: LD_VAR 0 3
2681: PPUSH
2682: LD_INT 4
2684: PPUSH
2685: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
2689: LD_ADDR_EXP 75
2693: PUSH
2694: LD_EXP 75
2698: PUSH
2699: LD_VAR 0 3
2703: ADD
2704: ST_TO_ADDR
// PlaceUnitArea ( veh , AmTroopsSpawnIntro , false ) ;
2705: LD_VAR 0 3
2709: PPUSH
2710: LD_INT 7
2712: PPUSH
2713: LD_INT 0
2715: PPUSH
2716: CALL_OW 49
// for i := 1 to 3 do
2720: LD_ADDR_VAR 0 2
2724: PUSH
2725: DOUBLE
2726: LD_INT 1
2728: DEC
2729: ST_TO_ADDR
2730: LD_INT 3
2732: PUSH
2733: FOR_TO
2734: IFFALSE 2855
// begin hc_name :=  ;
2736: LD_ADDR_OWVAR 26
2740: PUSH
2741: LD_STRING 
2743: ST_TO_ADDR
// hc_gallery :=  ;
2744: LD_ADDR_OWVAR 33
2748: PUSH
2749: LD_STRING 
2751: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel ) ;
2752: LD_INT 0
2754: PPUSH
2755: LD_EXP 42
2759: PPUSH
2760: CALL_OW 381
// human = CreateHuman ;
2764: LD_ADDR_VAR 0 4
2768: PUSH
2769: CALL_OW 44
2773: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
2774: LD_ADDR_EXP 75
2778: PUSH
2779: LD_EXP 75
2783: PUSH
2784: LD_VAR 0 4
2788: ADD
2789: ST_TO_ADDR
// if i < 3 then
2790: LD_VAR 0 2
2794: PUSH
2795: LD_INT 3
2797: LESS
2798: IFFALSE 2817
// PlaceUnitArea ( human , AmTroopsSpawnIntro , false ) else
2800: LD_VAR 0 4
2804: PPUSH
2805: LD_INT 7
2807: PPUSH
2808: LD_INT 0
2810: PPUSH
2811: CALL_OW 49
2815: GO 2853
// begin PrepareMechanic ( false , enemySkillLevel ) ;
2817: LD_INT 0
2819: PPUSH
2820: LD_EXP 42
2824: PPUSH
2825: CALL_OW 383
// human = CreateHuman ;
2829: LD_ADDR_VAR 0 4
2833: PUSH
2834: CALL_OW 44
2838: ST_TO_ADDR
// PlaceHumanInUnit ( human , veh ) ;
2839: LD_VAR 0 4
2843: PPUSH
2844: LD_VAR 0 3
2848: PPUSH
2849: CALL_OW 52
// end ; end ;
2853: GO 2733
2855: POP
2856: POP
// HiddenCamera ( 120 , 36 , 3 ) ;
2857: LD_INT 120
2859: PPUSH
2860: LD_INT 36
2862: PPUSH
2863: LD_INT 3
2865: PPUSH
2866: CALL_OW 244
// ComMoveXY ( amIntroUnits , 26 , 34 ) ;
2870: LD_EXP 75
2874: PPUSH
2875: LD_INT 26
2877: PPUSH
2878: LD_INT 34
2880: PPUSH
2881: CALL_OW 111
// end ;
2885: LD_VAR 0 1
2889: RET
// export function PrepareOmikron ; var i , un , tmp , veh , omiBuildingArray ; begin
2890: LD_INT 0
2892: PPUSH
2893: PPUSH
2894: PPUSH
2895: PPUSH
2896: PPUSH
2897: PPUSH
// amConvoyGroups := [ [ [ 1 , 2 , 3 , 5 ] [ Difficulty ] , [ 0 , 0 , 1 , 1 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] ] , [ [ 1 , 2 , 3 , 4 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 6 , 7 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 1 , 3 ] [ Difficulty ] ] ] ;
2898: LD_ADDR_EXP 76
2902: PUSH
2903: LD_INT 1
2905: PUSH
2906: LD_INT 2
2908: PUSH
2909: LD_INT 3
2911: PUSH
2912: LD_INT 5
2914: PUSH
2915: EMPTY
2916: LIST
2917: LIST
2918: LIST
2919: LIST
2920: PUSH
2921: LD_OWVAR 67
2925: ARRAY
2926: PUSH
2927: LD_INT 0
2929: PUSH
2930: LD_INT 0
2932: PUSH
2933: LD_INT 1
2935: PUSH
2936: LD_INT 1
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: LIST
2943: LIST
2944: PUSH
2945: LD_OWVAR 67
2949: ARRAY
2950: PUSH
2951: LD_INT 1
2953: PUSH
2954: LD_INT 1
2956: PUSH
2957: LD_INT 2
2959: PUSH
2960: LD_INT 2
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: PUSH
2969: LD_OWVAR 67
2973: ARRAY
2974: PUSH
2975: LD_INT 1
2977: PUSH
2978: LD_INT 1
2980: PUSH
2981: LD_INT 1
2983: PUSH
2984: LD_INT 2
2986: PUSH
2987: EMPTY
2988: LIST
2989: LIST
2990: LIST
2991: LIST
2992: PUSH
2993: LD_OWVAR 67
2997: ARRAY
2998: PUSH
2999: LD_INT 0
3001: PUSH
3002: LD_INT 1
3004: PUSH
3005: LD_INT 1
3007: PUSH
3008: LD_INT 2
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: LIST
3015: LIST
3016: PUSH
3017: LD_OWVAR 67
3021: ARRAY
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: LIST
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 3
3032: PUSH
3033: LD_INT 4
3035: PUSH
3036: LD_INT 5
3038: PUSH
3039: LD_INT 6
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: LIST
3046: LIST
3047: PUSH
3048: LD_OWVAR 67
3052: ARRAY
3053: PUSH
3054: LD_INT 0
3056: PUSH
3057: LD_INT 1
3059: PUSH
3060: LD_INT 1
3062: PUSH
3063: LD_INT 2
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: PUSH
3072: LD_OWVAR 67
3076: ARRAY
3077: PUSH
3078: LD_INT 1
3080: PUSH
3081: LD_INT 1
3083: PUSH
3084: LD_INT 2
3086: PUSH
3087: LD_INT 3
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: LIST
3094: LIST
3095: PUSH
3096: LD_OWVAR 67
3100: ARRAY
3101: PUSH
3102: LD_INT 1
3104: PUSH
3105: LD_INT 1
3107: PUSH
3108: LD_INT 2
3110: PUSH
3111: LD_INT 3
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: LIST
3118: LIST
3119: PUSH
3120: LD_OWVAR 67
3124: ARRAY
3125: PUSH
3126: LD_INT 1
3128: PUSH
3129: LD_INT 1
3131: PUSH
3132: LD_INT 2
3134: PUSH
3135: LD_INT 3
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: PUSH
3144: LD_OWVAR 67
3148: ARRAY
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: LIST
3154: LIST
3155: LIST
3156: PUSH
3157: LD_INT 1
3159: PUSH
3160: LD_INT 2
3162: PUSH
3163: LD_INT 3
3165: PUSH
3166: LD_INT 4
3168: PUSH
3169: EMPTY
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: PUSH
3175: LD_OWVAR 67
3179: ARRAY
3180: PUSH
3181: LD_INT 1
3183: PUSH
3184: LD_INT 1
3186: PUSH
3187: LD_INT 1
3189: PUSH
3190: LD_INT 2
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: PUSH
3199: LD_OWVAR 67
3203: ARRAY
3204: PUSH
3205: LD_INT 1
3207: PUSH
3208: LD_INT 1
3210: PUSH
3211: LD_INT 2
3213: PUSH
3214: LD_INT 2
3216: PUSH
3217: EMPTY
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: PUSH
3223: LD_OWVAR 67
3227: ARRAY
3228: PUSH
3229: LD_INT 1
3231: PUSH
3232: LD_INT 1
3234: PUSH
3235: LD_INT 1
3237: PUSH
3238: LD_INT 2
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: PUSH
3247: LD_OWVAR 67
3251: ARRAY
3252: PUSH
3253: LD_INT 1
3255: PUSH
3256: LD_INT 1
3258: PUSH
3259: LD_INT 1
3261: PUSH
3262: LD_INT 2
3264: PUSH
3265: EMPTY
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: PUSH
3271: LD_OWVAR 67
3275: ARRAY
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: PUSH
3284: LD_INT 3
3286: PUSH
3287: LD_INT 4
3289: PUSH
3290: LD_INT 6
3292: PUSH
3293: LD_INT 7
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: PUSH
3302: LD_OWVAR 67
3306: ARRAY
3307: PUSH
3308: LD_INT 1
3310: PUSH
3311: LD_INT 1
3313: PUSH
3314: LD_INT 1
3316: PUSH
3317: LD_INT 2
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: PUSH
3326: LD_OWVAR 67
3330: ARRAY
3331: PUSH
3332: LD_INT 1
3334: PUSH
3335: LD_INT 1
3337: PUSH
3338: LD_INT 2
3340: PUSH
3341: LD_INT 3
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: LIST
3348: LIST
3349: PUSH
3350: LD_OWVAR 67
3354: ARRAY
3355: PUSH
3356: LD_INT 1
3358: PUSH
3359: LD_INT 1
3361: PUSH
3362: LD_INT 2
3364: PUSH
3365: LD_INT 3
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: PUSH
3374: LD_OWVAR 67
3378: ARRAY
3379: PUSH
3380: LD_INT 1
3382: PUSH
3383: LD_INT 1
3385: PUSH
3386: LD_INT 1
3388: PUSH
3389: LD_INT 3
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: PUSH
3398: LD_OWVAR 67
3402: ARRAY
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: PUSH
3411: EMPTY
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: ST_TO_ADDR
// omiBuildingArray := [ [ b_warehouse , 20 , 33 , 2 ] , [ b_oil_mine , 38 , 30 , 5 ] , [ b_barracks , 34 , 25 , 4 ] , [ b_barracks , 35 , 45 , 4 ] , [ b_lab , 27 , 27 , 3 ] , [ b_lab , 15 , 23 , 1 ] , [ b_breastwork , 25 , 8 , 5 ] , [ b_bunker , 37 , 35 , 4 ] , [ b_bunker , 42 , 45 , 4 ] , [ b_bunker , 29 , 17 , 4 ] , [ b_bunker , 30 , 53 , 0 ] , [ b_bunker , 42 , 56 , 4 ] , [ b_bunker , 30 , 20 , 4 ] , [ b_solar_power , 7 , 8 , 1 ] , [ b_solar_power , 10 , 8 , 1 ] , [ b_solar_power , 13 , 8 , 1 ] , [ b_oil_power , 23 , 42 , 4 ] , [ b_factory , 13 , 14 , 1 ] , [ b_ext_noncombat , 10 , 11 , 2 ] , [ b_ext_gun , 9 , 14 , 1 ] , [ b_ext_track , 13 , 17 , 0 ] ] ;
3417: LD_ADDR_VAR 0 6
3421: PUSH
3422: LD_INT 1
3424: PUSH
3425: LD_INT 20
3427: PUSH
3428: LD_INT 33
3430: PUSH
3431: LD_INT 2
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: LD_INT 29
3442: PUSH
3443: LD_INT 38
3445: PUSH
3446: LD_INT 30
3448: PUSH
3449: LD_INT 5
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: PUSH
3458: LD_INT 5
3460: PUSH
3461: LD_INT 34
3463: PUSH
3464: LD_INT 25
3466: PUSH
3467: LD_INT 4
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: PUSH
3476: LD_INT 5
3478: PUSH
3479: LD_INT 35
3481: PUSH
3482: LD_INT 45
3484: PUSH
3485: LD_INT 4
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: LIST
3492: LIST
3493: PUSH
3494: LD_INT 6
3496: PUSH
3497: LD_INT 27
3499: PUSH
3500: LD_INT 27
3502: PUSH
3503: LD_INT 3
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: PUSH
3512: LD_INT 6
3514: PUSH
3515: LD_INT 15
3517: PUSH
3518: LD_INT 23
3520: PUSH
3521: LD_INT 1
3523: PUSH
3524: EMPTY
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: PUSH
3530: LD_INT 31
3532: PUSH
3533: LD_INT 25
3535: PUSH
3536: LD_INT 8
3538: PUSH
3539: LD_INT 5
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: PUSH
3548: LD_INT 32
3550: PUSH
3551: LD_INT 37
3553: PUSH
3554: LD_INT 35
3556: PUSH
3557: LD_INT 4
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: PUSH
3566: LD_INT 32
3568: PUSH
3569: LD_INT 42
3571: PUSH
3572: LD_INT 45
3574: PUSH
3575: LD_INT 4
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: PUSH
3584: LD_INT 32
3586: PUSH
3587: LD_INT 29
3589: PUSH
3590: LD_INT 17
3592: PUSH
3593: LD_INT 4
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: PUSH
3602: LD_INT 32
3604: PUSH
3605: LD_INT 30
3607: PUSH
3608: LD_INT 53
3610: PUSH
3611: LD_INT 0
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: PUSH
3620: LD_INT 32
3622: PUSH
3623: LD_INT 42
3625: PUSH
3626: LD_INT 56
3628: PUSH
3629: LD_INT 4
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: PUSH
3638: LD_INT 32
3640: PUSH
3641: LD_INT 30
3643: PUSH
3644: LD_INT 20
3646: PUSH
3647: LD_INT 4
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: PUSH
3656: LD_INT 27
3658: PUSH
3659: LD_INT 7
3661: PUSH
3662: LD_INT 8
3664: PUSH
3665: LD_INT 1
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: PUSH
3674: LD_INT 27
3676: PUSH
3677: LD_INT 10
3679: PUSH
3680: LD_INT 8
3682: PUSH
3683: LD_INT 1
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: PUSH
3692: LD_INT 27
3694: PUSH
3695: LD_INT 13
3697: PUSH
3698: LD_INT 8
3700: PUSH
3701: LD_INT 1
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: PUSH
3710: LD_INT 26
3712: PUSH
3713: LD_INT 23
3715: PUSH
3716: LD_INT 42
3718: PUSH
3719: LD_INT 4
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: LIST
3726: LIST
3727: PUSH
3728: LD_INT 3
3730: PUSH
3731: LD_INT 13
3733: PUSH
3734: LD_INT 14
3736: PUSH
3737: LD_INT 1
3739: PUSH
3740: EMPTY
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: PUSH
3746: LD_INT 19
3748: PUSH
3749: LD_INT 10
3751: PUSH
3752: LD_INT 11
3754: PUSH
3755: LD_INT 2
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: PUSH
3764: LD_INT 17
3766: PUSH
3767: LD_INT 9
3769: PUSH
3770: LD_INT 14
3772: PUSH
3773: LD_INT 1
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: PUSH
3782: LD_INT 16
3784: PUSH
3785: LD_INT 13
3787: PUSH
3788: LD_INT 17
3790: PUSH
3791: LD_INT 0
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: ST_TO_ADDR
// for i in omiBuildingArray do
3823: LD_ADDR_VAR 0 2
3827: PUSH
3828: LD_VAR 0 6
3832: PUSH
3833: FOR_IN
3834: IFFALSE 3890
// PrepareBuilding ( 1 , 1 , 5 , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
3836: LD_INT 1
3838: PPUSH
3839: LD_INT 1
3841: PPUSH
3842: LD_INT 5
3844: PPUSH
3845: LD_VAR 0 2
3849: PUSH
3850: LD_INT 1
3852: ARRAY
3853: PPUSH
3854: LD_VAR 0 2
3858: PUSH
3859: LD_INT 2
3861: ARRAY
3862: PPUSH
3863: LD_VAR 0 2
3867: PUSH
3868: LD_INT 3
3870: ARRAY
3871: PPUSH
3872: LD_VAR 0 2
3876: PUSH
3877: LD_INT 4
3879: ARRAY
3880: PPUSH
3881: LD_INT 0
3883: PPUSH
3884: CALL 53318 0 8
3888: GO 3833
3890: POP
3891: POP
// omikronDepot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3892: LD_ADDR_EXP 74
3896: PUSH
3897: LD_INT 22
3899: PUSH
3900: LD_INT 1
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: PUSH
3907: LD_INT 30
3909: PUSH
3910: LD_INT 1
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: PUSH
3917: EMPTY
3918: LIST
3919: LIST
3920: PPUSH
3921: CALL_OW 69
3925: PUSH
3926: LD_INT 1
3928: ARRAY
3929: ST_TO_ADDR
// SetBName ( omikronDepot , omikron ) ;
3930: LD_EXP 74
3934: PPUSH
3935: LD_STRING omikron
3937: PPUSH
3938: CALL_OW 500
// amBarracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
3942: LD_ADDR_EXP 78
3946: PUSH
3947: LD_INT 22
3949: PUSH
3950: LD_INT 1
3952: PUSH
3953: EMPTY
3954: LIST
3955: LIST
3956: PUSH
3957: LD_INT 30
3959: PUSH
3960: LD_INT 5
3962: PUSH
3963: EMPTY
3964: LIST
3965: LIST
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: PPUSH
3971: CALL_OW 69
3975: ST_TO_ADDR
// amLabs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab ] ] ) ;
3976: LD_ADDR_EXP 77
3980: PUSH
3981: LD_INT 22
3983: PUSH
3984: LD_INT 1
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PUSH
3991: LD_INT 30
3993: PUSH
3994: LD_INT 6
3996: PUSH
3997: EMPTY
3998: LIST
3999: LIST
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PPUSH
4005: CALL_OW 69
4009: ST_TO_ADDR
// amFactory := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4010: LD_ADDR_EXP 79
4014: PUSH
4015: LD_INT 22
4017: PUSH
4018: LD_INT 1
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PUSH
4025: LD_INT 30
4027: PUSH
4028: LD_INT 3
4030: PUSH
4031: EMPTY
4032: LIST
4033: LIST
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PPUSH
4039: CALL_OW 69
4043: PUSH
4044: LD_INT 1
4046: ARRAY
4047: ST_TO_ADDR
// for i := 1 to 2 do
4048: LD_ADDR_VAR 0 2
4052: PUSH
4053: DOUBLE
4054: LD_INT 1
4056: DEC
4057: ST_TO_ADDR
4058: LD_INT 2
4060: PUSH
4061: FOR_TO
4062: IFFALSE 4088
// SetResourceType ( GetBase ( omikronDepot ) , i , 500 ) ;
4064: LD_EXP 74
4068: PPUSH
4069: CALL_OW 274
4073: PPUSH
4074: LD_VAR 0 2
4078: PPUSH
4079: LD_INT 500
4081: PPUSH
4082: CALL_OW 277
4086: GO 4061
4088: POP
4089: POP
// uc_side := 1 ;
4090: LD_ADDR_OWVAR 20
4094: PUSH
4095: LD_INT 1
4097: ST_TO_ADDR
// uc_nation := 1 ;
4098: LD_ADDR_OWVAR 21
4102: PUSH
4103: LD_INT 1
4105: ST_TO_ADDR
// omicronSquad := [ ] ;
4106: LD_ADDR_EXP 72
4110: PUSH
4111: EMPTY
4112: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
4113: LD_ADDR_VAR 0 2
4117: PUSH
4118: LD_INT 22
4120: PUSH
4121: LD_INT 1
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: PUSH
4128: LD_INT 2
4130: PUSH
4131: LD_INT 30
4133: PUSH
4134: LD_INT 32
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: PUSH
4141: LD_INT 30
4143: PUSH
4144: LD_INT 31
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: LIST
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: PPUSH
4160: CALL_OW 69
4164: PUSH
4165: FOR_IN
4166: IFFALSE 4285
// begin PrepareHuman ( sex_male , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4168: LD_INT 1
4170: PPUSH
4171: LD_INT 1
4173: PPUSH
4174: LD_INT 3
4176: PUSH
4177: LD_INT 4
4179: PUSH
4180: LD_INT 5
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: PUSH
4188: LD_OWVAR 67
4192: ARRAY
4193: PPUSH
4194: CALL_OW 380
// un := CreateHuman ;
4198: LD_ADDR_VAR 0 3
4202: PUSH
4203: CALL_OW 44
4207: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
4208: LD_ADDR_EXP 72
4212: PUSH
4213: LD_EXP 72
4217: PUSH
4218: LD_VAR 0 3
4222: UNION
4223: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
4224: LD_VAR 0 3
4228: PPUSH
4229: LD_VAR 0 2
4233: PPUSH
4234: CALL_OW 254
4238: PUSH
4239: LD_INT 3
4241: MINUS
4242: PPUSH
4243: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
4247: LD_VAR 0 3
4251: PPUSH
4252: LD_VAR 0 2
4256: PPUSH
4257: CALL_OW 52
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , areaOmicron ) ) ;
4261: LD_VAR 0 2
4265: PPUSH
4266: LD_VAR 0 2
4270: PPUSH
4271: LD_INT 8
4273: PPUSH
4274: CALL 22894 0 2
4278: PPUSH
4279: CALL_OW 431
// end ;
4283: GO 4165
4285: POP
4286: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4287: LD_ADDR_VAR 0 2
4291: PUSH
4292: DOUBLE
4293: LD_INT 1
4295: DEC
4296: ST_TO_ADDR
4297: LD_INT 3
4299: PUSH
4300: LD_INT 4
4302: PUSH
4303: LD_INT 5
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: LIST
4310: PUSH
4311: LD_OWVAR 67
4315: ARRAY
4316: PUSH
4317: FOR_TO
4318: IFFALSE 4375
// begin PrepareHuman ( false , 2 , 2 ) ;
4320: LD_INT 0
4322: PPUSH
4323: LD_INT 2
4325: PPUSH
4326: LD_INT 2
4328: PPUSH
4329: CALL_OW 380
// un := CreateHuman ;
4333: LD_ADDR_VAR 0 3
4337: PUSH
4338: CALL_OW 44
4342: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
4343: LD_ADDR_EXP 72
4347: PUSH
4348: LD_EXP 72
4352: PUSH
4353: LD_VAR 0 3
4357: UNION
4358: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikronDepot ) ;
4359: LD_VAR 0 3
4363: PPUSH
4364: LD_EXP 74
4368: PPUSH
4369: CALL_OW 52
// end ;
4373: GO 4317
4375: POP
4376: POP
// for i := 1 to 2 do
4377: LD_ADDR_VAR 0 2
4381: PUSH
4382: DOUBLE
4383: LD_INT 1
4385: DEC
4386: ST_TO_ADDR
4387: LD_INT 2
4389: PUSH
4390: FOR_TO
4391: IFFALSE 4557
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ i ] , engine_solar , control_manual , [ us_light_gun , us_gatling_gun ] [ i ] , 100 ) ;
4393: LD_INT 2
4395: PUSH
4396: LD_INT 3
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: LD_VAR 0 2
4407: ARRAY
4408: PPUSH
4409: LD_INT 2
4411: PPUSH
4412: LD_INT 1
4414: PPUSH
4415: LD_INT 3
4417: PUSH
4418: LD_INT 4
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: LD_VAR 0 2
4429: ARRAY
4430: PPUSH
4431: LD_INT 100
4433: PPUSH
4434: CALL 17654 0 5
// veh := CreateVehicle ;
4438: LD_ADDR_VAR 0 5
4442: PUSH
4443: CALL_OW 45
4447: ST_TO_ADDR
// PlaceUnitXYR ( veh , 28 , 37 , 6 , false ) ;
4448: LD_VAR 0 5
4452: PPUSH
4453: LD_INT 28
4455: PPUSH
4456: LD_INT 37
4458: PPUSH
4459: LD_INT 6
4461: PPUSH
4462: LD_INT 0
4464: PPUSH
4465: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
4469: LD_INT 0
4471: PPUSH
4472: LD_INT 3
4474: PPUSH
4475: LD_INT 2
4477: PPUSH
4478: CALL_OW 380
// un := CreateHuman ;
4482: LD_ADDR_VAR 0 3
4486: PUSH
4487: CALL_OW 44
4491: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
4492: LD_ADDR_EXP 72
4496: PUSH
4497: LD_EXP 72
4501: PUSH
4502: LD_VAR 0 3
4506: UNION
4507: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4508: LD_VAR 0 3
4512: PPUSH
4513: LD_VAR 0 5
4517: PPUSH
4518: CALL_OW 52
// ComMoveXY ( un , GetX ( un ) + 3 , GetY ( un ) ) ;
4522: LD_VAR 0 3
4526: PPUSH
4527: LD_VAR 0 3
4531: PPUSH
4532: CALL_OW 250
4536: PUSH
4537: LD_INT 3
4539: PLUS
4540: PPUSH
4541: LD_VAR 0 3
4545: PPUSH
4546: CALL_OW 251
4550: PPUSH
4551: CALL_OW 111
// end ;
4555: GO 4390
4557: POP
4558: POP
// end ;
4559: LD_VAR 0 1
4563: RET
// export amConvoyTroops ; export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , vehs ; begin
4564: LD_INT 0
4566: PPUSH
4567: PPUSH
4568: PPUSH
4569: PPUSH
4570: PPUSH
4571: PPUSH
4572: PPUSH
4573: PPUSH
4574: PPUSH
4575: PPUSH
// uc_side := 1 ;
4576: LD_ADDR_OWVAR 20
4580: PUSH
4581: LD_INT 1
4583: ST_TO_ADDR
// uc_nation := 1 ;
4584: LD_ADDR_OWVAR 21
4588: PUSH
4589: LD_INT 1
4591: ST_TO_ADDR
// hc_name :=  ;
4592: LD_ADDR_OWVAR 26
4596: PUSH
4597: LD_STRING 
4599: ST_TO_ADDR
// hc_gallery :=  ;
4600: LD_ADDR_OWVAR 33
4604: PUSH
4605: LD_STRING 
4607: ST_TO_ADDR
// for i := 1 to soldiersAmount do
4608: LD_ADDR_VAR 0 8
4612: PUSH
4613: DOUBLE
4614: LD_INT 1
4616: DEC
4617: ST_TO_ADDR
4618: LD_VAR 0 1
4622: PUSH
4623: FOR_TO
4624: IFFALSE 4699
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4626: LD_INT 0
4628: PPUSH
4629: LD_EXP 42
4633: PPUSH
4634: CALL_OW 381
// un = CreateHuman ;
4638: LD_ADDR_VAR 0 9
4642: PUSH
4643: CALL_OW 44
4647: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4648: LD_ADDR_EXP 81
4652: PUSH
4653: LD_EXP 81
4657: PUSH
4658: LD_VAR 0 9
4662: ADD
4663: ST_TO_ADDR
// sols := sols ^ un ;
4664: LD_ADDR_VAR 0 12
4668: PUSH
4669: LD_VAR 0 12
4673: PUSH
4674: LD_VAR 0 9
4678: ADD
4679: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4680: LD_VAR 0 9
4684: PPUSH
4685: LD_VAR 0 6
4689: PPUSH
4690: LD_INT 0
4692: PPUSH
4693: CALL_OW 49
// end ;
4697: GO 4623
4699: POP
4700: POP
// for i := 1 to engsAmount do
4701: LD_ADDR_VAR 0 8
4705: PUSH
4706: DOUBLE
4707: LD_INT 1
4709: DEC
4710: ST_TO_ADDR
4711: LD_VAR 0 2
4715: PUSH
4716: FOR_TO
4717: IFFALSE 4792
// begin PrepareEngineer ( false , enemySkillLevel ) ;
4719: LD_INT 0
4721: PPUSH
4722: LD_EXP 42
4726: PPUSH
4727: CALL_OW 382
// un = CreateHuman ;
4731: LD_ADDR_VAR 0 9
4735: PUSH
4736: CALL_OW 44
4740: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4741: LD_ADDR_EXP 81
4745: PUSH
4746: LD_EXP 81
4750: PUSH
4751: LD_VAR 0 9
4755: ADD
4756: ST_TO_ADDR
// engs := engs ^ un ;
4757: LD_ADDR_VAR 0 13
4761: PUSH
4762: LD_VAR 0 13
4766: PUSH
4767: LD_VAR 0 9
4771: ADD
4772: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4773: LD_VAR 0 9
4777: PPUSH
4778: LD_VAR 0 6
4782: PPUSH
4783: LD_INT 0
4785: PPUSH
4786: CALL_OW 49
// end ;
4790: GO 4716
4792: POP
4793: POP
// for i := 1 to mechsAmount do
4794: LD_ADDR_VAR 0 8
4798: PUSH
4799: DOUBLE
4800: LD_INT 1
4802: DEC
4803: ST_TO_ADDR
4804: LD_VAR 0 3
4808: PUSH
4809: FOR_TO
4810: IFFALSE 4885
// begin PrepareMechanic ( false , enemySkillLevel ) ;
4812: LD_INT 0
4814: PPUSH
4815: LD_EXP 42
4819: PPUSH
4820: CALL_OW 383
// un = CreateHuman ;
4824: LD_ADDR_VAR 0 9
4828: PUSH
4829: CALL_OW 44
4833: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4834: LD_ADDR_EXP 81
4838: PUSH
4839: LD_EXP 81
4843: PUSH
4844: LD_VAR 0 9
4848: ADD
4849: ST_TO_ADDR
// mechs := mechs ^ un ;
4850: LD_ADDR_VAR 0 14
4854: PUSH
4855: LD_VAR 0 14
4859: PUSH
4860: LD_VAR 0 9
4864: ADD
4865: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4866: LD_VAR 0 9
4870: PPUSH
4871: LD_VAR 0 6
4875: PPUSH
4876: LD_INT 0
4878: PPUSH
4879: CALL_OW 49
// end ;
4883: GO 4809
4885: POP
4886: POP
// for i := 1 to scientistsAmount do
4887: LD_ADDR_VAR 0 8
4891: PUSH
4892: DOUBLE
4893: LD_INT 1
4895: DEC
4896: ST_TO_ADDR
4897: LD_VAR 0 4
4901: PUSH
4902: FOR_TO
4903: IFFALSE 4978
// begin PrepareScientist ( false , enemySkillLevel ) ;
4905: LD_INT 0
4907: PPUSH
4908: LD_EXP 42
4912: PPUSH
4913: CALL_OW 384
// un = CreateHuman ;
4917: LD_ADDR_VAR 0 9
4921: PUSH
4922: CALL_OW 44
4926: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4927: LD_ADDR_EXP 81
4931: PUSH
4932: LD_EXP 81
4936: PUSH
4937: LD_VAR 0 9
4941: ADD
4942: ST_TO_ADDR
// scis := scis ^ un ;
4943: LD_ADDR_VAR 0 15
4947: PUSH
4948: LD_VAR 0 15
4952: PUSH
4953: LD_VAR 0 9
4957: ADD
4958: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4959: LD_VAR 0 9
4963: PPUSH
4964: LD_VAR 0 6
4968: PPUSH
4969: LD_INT 0
4971: PPUSH
4972: CALL_OW 49
// end ;
4976: GO 4902
4978: POP
4979: POP
// for i := 1 to vehiclesAmount do
4980: LD_ADDR_VAR 0 8
4984: PUSH
4985: DOUBLE
4986: LD_INT 1
4988: DEC
4989: ST_TO_ADDR
4990: LD_VAR 0 5
4994: PUSH
4995: FOR_TO
4996: IFFALSE 5178
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
4998: LD_ADDR_OWVAR 40
5002: PUSH
5003: LD_INT 2
5005: PUSH
5006: LD_INT 4
5008: PUSH
5009: LD_INT 3
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: LIST
5016: PUSH
5017: LD_INT 1
5019: PPUSH
5020: LD_INT 3
5022: PPUSH
5023: CALL_OW 12
5027: ARRAY
5028: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
5029: LD_ADDR_OWVAR 37
5033: PUSH
5034: LD_INT 3
5036: ST_TO_ADDR
// vc_control = control_manual ;
5037: LD_ADDR_OWVAR 38
5041: PUSH
5042: LD_INT 1
5044: ST_TO_ADDR
// vc_engine = engine_combustion ;
5045: LD_ADDR_OWVAR 39
5049: PUSH
5050: LD_INT 1
5052: ST_TO_ADDR
// veh = CreateVehicle ;
5053: LD_ADDR_VAR 0 10
5057: PUSH
5058: CALL_OW 45
5062: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
5063: LD_ADDR_EXP 81
5067: PUSH
5068: LD_EXP 81
5072: PUSH
5073: LD_VAR 0 10
5077: ADD
5078: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
5079: LD_VAR 0 10
5083: PPUSH
5084: LD_VAR 0 6
5088: PPUSH
5089: LD_INT 0
5091: PPUSH
5092: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
5096: LD_INT 0
5098: PPUSH
5099: LD_EXP 42
5103: PPUSH
5104: CALL_OW 383
// un = CreateHuman ;
5108: LD_ADDR_VAR 0 9
5112: PUSH
5113: CALL_OW 44
5117: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
5118: LD_ADDR_EXP 81
5122: PUSH
5123: LD_EXP 81
5127: PUSH
5128: LD_VAR 0 9
5132: ADD
5133: ST_TO_ADDR
// amVehs := amVehs ^ veh ;
5134: LD_ADDR_EXP 80
5138: PUSH
5139: LD_EXP 80
5143: PUSH
5144: LD_VAR 0 10
5148: ADD
5149: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5150: LD_VAR 0 9
5154: PPUSH
5155: LD_VAR 0 10
5159: PPUSH
5160: CALL_OW 52
// SetFuel ( veh , 100 ) ;
5164: LD_VAR 0 10
5168: PPUSH
5169: LD_INT 100
5171: PPUSH
5172: CALL_OW 240
// end ;
5176: GO 4995
5178: POP
5179: POP
// ComAgressiveMove ( amConvoyTroops , 25 , 31 ) ;
5180: LD_EXP 81
5184: PPUSH
5185: LD_INT 25
5187: PPUSH
5188: LD_INT 31
5190: PPUSH
5191: CALL_OW 114
// AgressiveMove ( amVehs , [ [ 95 , 44 ] ] ) ;
5195: LD_EXP 80
5199: PPUSH
5200: LD_INT 95
5202: PUSH
5203: LD_INT 44
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: PUSH
5210: EMPTY
5211: LIST
5212: PPUSH
5213: CALL 52175 0 2
// AddComEnterUnit ( sols , [ amBarracks [ 1 ] , amBarracks [ 2 ] ] [ Rand ( 1 , 2 ) ] ) ;
5217: LD_VAR 0 12
5221: PPUSH
5222: LD_EXP 78
5226: PUSH
5227: LD_INT 1
5229: ARRAY
5230: PUSH
5231: LD_EXP 78
5235: PUSH
5236: LD_INT 2
5238: ARRAY
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: PUSH
5244: LD_INT 1
5246: PPUSH
5247: LD_INT 2
5249: PPUSH
5250: CALL_OW 12
5254: ARRAY
5255: PPUSH
5256: CALL_OW 180
// AddComEnterUnit ( engs , omikronDepot ) ;
5260: LD_VAR 0 13
5264: PPUSH
5265: LD_EXP 74
5269: PPUSH
5270: CALL_OW 180
// AddComEnterUnit ( mechs , amFactory ) ;
5274: LD_VAR 0 14
5278: PPUSH
5279: LD_EXP 79
5283: PPUSH
5284: CALL_OW 180
// AddComEnterUnit ( scis , [ amLabs [ 1 ] , amLabs [ 2 ] ] [ Rand ( 1 , 2 ) ] ) ;
5288: LD_VAR 0 15
5292: PPUSH
5293: LD_EXP 77
5297: PUSH
5298: LD_INT 1
5300: ARRAY
5301: PUSH
5302: LD_EXP 77
5306: PUSH
5307: LD_INT 2
5309: ARRAY
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: PUSH
5315: LD_INT 1
5317: PPUSH
5318: LD_INT 2
5320: PPUSH
5321: CALL_OW 12
5325: ARRAY
5326: PPUSH
5327: CALL_OW 180
// amConvoyTroops :=  ;
5331: LD_ADDR_EXP 81
5335: PUSH
5336: LD_STRING 
5338: ST_TO_ADDR
// sols :=  ;
5339: LD_ADDR_VAR 0 12
5343: PUSH
5344: LD_STRING 
5346: ST_TO_ADDR
// engs :=  ;
5347: LD_ADDR_VAR 0 13
5351: PUSH
5352: LD_STRING 
5354: ST_TO_ADDR
// mechs :=  ;
5355: LD_ADDR_VAR 0 14
5359: PUSH
5360: LD_STRING 
5362: ST_TO_ADDR
// scis :=  ;
5363: LD_ADDR_VAR 0 15
5367: PUSH
5368: LD_STRING 
5370: ST_TO_ADDR
// end ;
5371: LD_VAR 0 7
5375: RET
// export function PrepareAttackOnRus ( ) ; var i ; begin
5376: LD_INT 0
5378: PPUSH
5379: PPUSH
// for i := 1 to amVehs do
5380: LD_ADDR_VAR 0 2
5384: PUSH
5385: DOUBLE
5386: LD_INT 1
5388: DEC
5389: ST_TO_ADDR
5390: LD_EXP 80
5394: PUSH
5395: FOR_TO
5396: IFFALSE 5439
// begin if GetType ( i ) = unit_vehicle then
5398: LD_VAR 0 2
5402: PPUSH
5403: CALL_OW 247
5407: PUSH
5408: LD_INT 2
5410: EQUAL
5411: IFFALSE 5425
// SetFuel ( i , 100 ) ;
5413: LD_VAR 0 2
5417: PPUSH
5418: LD_INT 100
5420: PPUSH
5421: CALL_OW 240
// SetLives ( i , 1000 ) ;
5425: LD_VAR 0 2
5429: PPUSH
5430: LD_INT 1000
5432: PPUSH
5433: CALL_OW 234
// end ;
5437: GO 5395
5439: POP
5440: POP
// for i := 1 to amIntroUnits do
5441: LD_ADDR_VAR 0 2
5445: PUSH
5446: DOUBLE
5447: LD_INT 1
5449: DEC
5450: ST_TO_ADDR
5451: LD_EXP 75
5455: PUSH
5456: FOR_TO
5457: IFFALSE 5500
// begin if GetType ( i ) = unit_vehicle then
5459: LD_VAR 0 2
5463: PPUSH
5464: CALL_OW 247
5468: PUSH
5469: LD_INT 2
5471: EQUAL
5472: IFFALSE 5486
// SetFuel ( i , 100 ) ;
5474: LD_VAR 0 2
5478: PPUSH
5479: LD_INT 100
5481: PPUSH
5482: CALL_OW 240
// SetLives ( i , 1000 ) ;
5486: LD_VAR 0 2
5490: PPUSH
5491: LD_INT 1000
5493: PPUSH
5494: CALL_OW 234
// end ;
5498: GO 5456
5500: POP
5501: POP
// AgressiveMove ( amIntroUnits , [ [ 65 , 91 ] , [ 116 , 97 ] ] ) ;
5502: LD_EXP 75
5506: PPUSH
5507: LD_INT 65
5509: PUSH
5510: LD_INT 91
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: PUSH
5517: LD_INT 116
5519: PUSH
5520: LD_INT 97
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PPUSH
5531: CALL 52175 0 2
// AgressiveMove ( amVehs , [ [ 65 , 91 ] , [ 109 , 97 ] ] ) ;
5535: LD_EXP 80
5539: PPUSH
5540: LD_INT 65
5542: PUSH
5543: LD_INT 91
5545: PUSH
5546: EMPTY
5547: LIST
5548: LIST
5549: PUSH
5550: LD_INT 109
5552: PUSH
5553: LD_INT 97
5555: PUSH
5556: EMPTY
5557: LIST
5558: LIST
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: PPUSH
5564: CALL 52175 0 2
// end ; end_of_file end_of_file
5568: LD_VAR 0 1
5572: RET
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( fac ) = 3 then
5573: LD_VAR 0 2
5577: PPUSH
5578: CALL_OW 255
5582: PUSH
5583: LD_INT 3
5585: EQUAL
5586: IFFALSE 5596
// counterEnable := true ;
5588: LD_ADDR_EXP 85
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// end ;
5596: PPOPN 2
5598: END
// on BuildingComplete ( building ) do var un , i , bunkers , sols , labT1 , kaganReady ;
5599: LD_INT 0
5601: PPUSH
5602: PPUSH
5603: PPUSH
5604: PPUSH
5605: PPUSH
5606: PPUSH
// begin if GetSide ( building ) = 6 and ( GetBType ( building ) = b_bunker or GetBType ( building ) = b_armoury ) then
5607: LD_VAR 0 1
5611: PPUSH
5612: CALL_OW 255
5616: PUSH
5617: LD_INT 6
5619: EQUAL
5620: PUSH
5621: LD_VAR 0 1
5625: PPUSH
5626: CALL_OW 266
5630: PUSH
5631: LD_INT 32
5633: EQUAL
5634: PUSH
5635: LD_VAR 0 1
5639: PPUSH
5640: CALL_OW 266
5644: PUSH
5645: LD_INT 4
5647: EQUAL
5648: OR
5649: AND
5650: IFFALSE 5798
// begin sols := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_inside ] ] ) ;
5652: LD_ADDR_VAR 0 5
5656: PUSH
5657: LD_INT 22
5659: PUSH
5660: LD_INT 6
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PUSH
5667: LD_INT 21
5669: PUSH
5670: LD_INT 1
5672: PUSH
5673: EMPTY
5674: LIST
5675: LIST
5676: PUSH
5677: LD_INT 25
5679: PUSH
5680: LD_INT 1
5682: PUSH
5683: EMPTY
5684: LIST
5685: LIST
5686: PUSH
5687: LD_INT 54
5689: PUSH
5690: EMPTY
5691: LIST
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: PPUSH
5699: CALL_OW 69
5703: ST_TO_ADDR
// for un in sols do
5704: LD_ADDR_VAR 0 2
5708: PUSH
5709: LD_VAR 0 5
5713: PUSH
5714: FOR_IN
5715: IFFALSE 5766
// begin if GetBType ( IsInUnit ( un ) ) = b_bunker then
5717: LD_VAR 0 2
5721: PPUSH
5722: CALL_OW 310
5726: PPUSH
5727: CALL_OW 266
5731: PUSH
5732: LD_INT 32
5734: EQUAL
5735: IFFALSE 5739
// continue ;
5737: GO 5714
// ComExit ( un ) ;
5739: LD_VAR 0 2
5743: PPUSH
5744: CALL 49967 0 1
// AddComEnterUnit ( un , building ) ;
5748: LD_VAR 0 2
5752: PPUSH
5753: LD_VAR 0 1
5757: PPUSH
5758: CALL_OW 180
// break ;
5762: GO 5766
// end ;
5764: GO 5714
5766: POP
5767: POP
// if labT1 = false then
5768: LD_VAR 0 6
5772: PUSH
5773: LD_INT 0
5775: EQUAL
5776: IFFALSE 5798
// begin labT1 = true ;
5778: LD_ADDR_VAR 0 6
5782: PUSH
5783: LD_INT 1
5785: ST_TO_ADDR
// AddComUpgradeLab ( kirovLab , b_lab_weapon ) ;
5786: LD_EXP 62
5790: PPUSH
5791: LD_INT 10
5793: PPUSH
5794: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and kaganReady = false then
5798: LD_VAR 0 1
5802: PPUSH
5803: CALL_OW 255
5807: PUSH
5808: LD_INT 3
5810: EQUAL
5811: PUSH
5812: LD_VAR 0 1
5816: PPUSH
5817: CALL_OW 266
5821: PUSH
5822: LD_INT 0
5824: EQUAL
5825: AND
5826: PUSH
5827: LD_VAR 0 7
5831: PUSH
5832: LD_INT 0
5834: EQUAL
5835: AND
5836: IFFALSE 5858
// begin SetBName ( building , kagan ) ;
5838: LD_VAR 0 1
5842: PPUSH
5843: LD_STRING kagan
5845: PPUSH
5846: CALL_OW 500
// kaganReady = true ;
5850: LD_ADDR_VAR 0 7
5854: PUSH
5855: LD_INT 1
5857: ST_TO_ADDR
// end ; end ;
5858: PPOPN 7
5860: END
// on UnitDestroyed ( un ) do begin if un = Burlak then
5861: LD_VAR 0 1
5865: PUSH
5866: LD_EXP 44
5870: EQUAL
5871: IFFALSE 5880
// YouLost ( Burlak ) ;
5873: LD_STRING Burlak
5875: PPUSH
5876: CALL_OW 104
// if un = beriaDepot then
5880: LD_VAR 0 1
5884: PUSH
5885: LD_EXP 54
5889: EQUAL
5890: IFFALSE 5899
// YouLost ( Omicron ) ;
5892: LD_STRING Omicron
5894: PPUSH
5895: CALL_OW 104
// end ;
5899: PPOPN 1
5901: END
// on UpgradeComplete ( building ) do var i , un , weapon , maleSci , maleOthers ;
5902: LD_INT 0
5904: PPUSH
5905: PPUSH
5906: PPUSH
5907: PPUSH
5908: PPUSH
// begin if GetSide ( building ) = 3 then
5909: LD_VAR 0 1
5913: PPUSH
5914: CALL_OW 255
5918: PUSH
5919: LD_INT 3
5921: EQUAL
5922: IFFALSE 6359
// begin dialog_workshop = true ;
5924: LD_ADDR_EXP 16
5928: PUSH
5929: LD_INT 1
5931: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
5932: LD_INT 22
5934: PUSH
5935: LD_INT 3
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: LD_INT 30
5944: PUSH
5945: LD_INT 26
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PPUSH
5956: CALL_OW 69
5960: NOT
5961: IFFALSE 6350
// begin CenterNowOnUnits ( building ) ;
5963: LD_VAR 0 1
5967: PPUSH
5968: CALL_OW 87
// DialogueOn ;
5972: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
5976: LD_EXP 44
5980: PPUSH
5981: LD_STRING D3aa-Bur-1
5983: PPUSH
5984: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
5988: LD_EXP 68
5992: PPUSH
5993: CALL_OW 302
5997: PUSH
5998: LD_EXP 68
6002: PPUSH
6003: CALL_OW 255
6007: PUSH
6008: LD_INT 3
6010: EQUAL
6011: AND
6012: IFFALSE 6028
// Say ( Scholtze , D3aa-Sch-1 ) else
6014: LD_EXP 68
6018: PPUSH
6019: LD_STRING D3aa-Sch-1
6021: PPUSH
6022: CALL_OW 88
6026: GO 6334
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
6028: LD_ADDR_VAR 0 5
6032: PUSH
6033: LD_INT 22
6035: PUSH
6036: LD_INT 3
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: PUSH
6043: LD_INT 21
6045: PUSH
6046: LD_INT 1
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: PUSH
6053: LD_INT 25
6055: PUSH
6056: LD_INT 4
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: PUSH
6063: LD_INT 26
6065: PUSH
6066: LD_INT 1
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: PUSH
6073: LD_INT 50
6075: PUSH
6076: EMPTY
6077: LIST
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: PPUSH
6086: CALL_OW 69
6090: PUSH
6091: LD_EXP 44
6095: PUSH
6096: LD_EXP 45
6100: PUSH
6101: LD_EXP 47
6105: PUSH
6106: LD_EXP 48
6110: PUSH
6111: LD_EXP 49
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: DIFF
6123: ST_TO_ADDR
// if maleSci then
6124: LD_VAR 0 5
6128: IFFALSE 6148
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
6130: LD_VAR 0 5
6134: PUSH
6135: LD_INT 1
6137: ARRAY
6138: PPUSH
6139: LD_STRING D3aa-Sci1-1
6141: PPUSH
6142: CALL_OW 88
6146: GO 6334
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
6148: LD_ADDR_VAR 0 6
6152: PUSH
6153: LD_INT 22
6155: PUSH
6156: LD_INT 3
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 21
6165: PUSH
6166: LD_INT 1
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: PUSH
6173: LD_INT 26
6175: PUSH
6176: LD_INT 1
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PUSH
6183: LD_INT 50
6185: PUSH
6186: EMPTY
6187: LIST
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: PPUSH
6195: CALL_OW 69
6199: PUSH
6200: LD_EXP 44
6204: PUSH
6205: LD_EXP 45
6209: PUSH
6210: LD_EXP 47
6214: PUSH
6215: LD_EXP 48
6219: PUSH
6220: LD_EXP 49
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: DIFF
6232: ST_TO_ADDR
// if maleOthers then
6233: LD_VAR 0 6
6237: IFFALSE 6257
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) else
6239: LD_VAR 0 6
6243: PUSH
6244: LD_INT 1
6246: ARRAY
6247: PPUSH
6248: LD_STRING D3aa-Sci1-1
6250: PPUSH
6251: CALL_OW 88
6255: GO 6334
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
6257: LD_ADDR_VAR 0 6
6261: PUSH
6262: LD_INT 22
6264: PUSH
6265: LD_INT 3
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: PUSH
6272: LD_INT 21
6274: PUSH
6275: LD_INT 1
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: PUSH
6282: LD_INT 26
6284: PUSH
6285: LD_INT 1
6287: PUSH
6288: EMPTY
6289: LIST
6290: LIST
6291: PUSH
6292: LD_INT 50
6294: PUSH
6295: EMPTY
6296: LIST
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: PPUSH
6304: CALL_OW 69
6308: PUSH
6309: LD_EXP 44
6313: PUSH
6314: EMPTY
6315: LIST
6316: DIFF
6317: ST_TO_ADDR
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) ;
6318: LD_VAR 0 6
6322: PUSH
6323: LD_INT 1
6325: ARRAY
6326: PPUSH
6327: LD_STRING D3aa-Sci1-1
6329: PPUSH
6330: CALL_OW 88
// end ; end ; end ; Say ( Burlak , D3aa-Bur-2 ) ;
6334: LD_EXP 44
6338: PPUSH
6339: LD_STRING D3aa-Bur-2
6341: PPUSH
6342: CALL_OW 88
// DialogueOff ;
6346: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
6350: LD_STRING M3
6352: PPUSH
6353: CALL_OW 337
// exit ;
6357: GO 6615
// end ; if GetSide ( building ) = 6 and Length ( comArray ) > 0 then
6359: LD_VAR 0 1
6363: PPUSH
6364: CALL_OW 255
6368: PUSH
6369: LD_INT 6
6371: EQUAL
6372: PUSH
6373: LD_EXP 2
6377: PPUSH
6378: CALL 53296 0 1
6382: PUSH
6383: LD_INT 0
6385: GREATER
6386: AND
6387: IFFALSE 6477
// begin if comArray [ 1 ] = kirovLab then
6389: LD_EXP 2
6393: PUSH
6394: LD_INT 1
6396: ARRAY
6397: PUSH
6398: LD_EXP 62
6402: EQUAL
6403: IFFALSE 6423
// AddComUpgradeLab ( comArray [ 1 ] , b_lab_weapon ) else
6405: LD_EXP 2
6409: PUSH
6410: LD_INT 1
6412: ARRAY
6413: PPUSH
6414: LD_INT 10
6416: PPUSH
6417: CALL_OW 207
6421: GO 6436
// AddComUpgrade ( comArray [ 1 ] ) ;
6423: LD_EXP 2
6427: PUSH
6428: LD_INT 1
6430: ARRAY
6431: PPUSH
6432: CALL_OW 206
// comArray := comArray diff comArray [ 1 ] ;
6436: LD_ADDR_EXP 2
6440: PUSH
6441: LD_EXP 2
6445: PUSH
6446: LD_EXP 2
6450: PUSH
6451: LD_INT 1
6453: ARRAY
6454: DIFF
6455: ST_TO_ADDR
// wait ( 0 0$1 ) ;
6456: LD_INT 35
6458: PPUSH
6459: CALL_OW 67
// AddComComplete ( kirovEngs , building ) ;
6463: LD_EXP 71
6467: PPUSH
6468: LD_VAR 0 1
6472: PPUSH
6473: CALL 20747 0 2
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_factory or GetBType ( building ) = b_workshop then
6477: LD_VAR 0 1
6481: PPUSH
6482: CALL_OW 255
6486: PUSH
6487: LD_INT 6
6489: EQUAL
6490: PUSH
6491: LD_VAR 0 1
6495: PPUSH
6496: CALL_OW 266
6500: PUSH
6501: LD_INT 3
6503: EQUAL
6504: AND
6505: PUSH
6506: LD_VAR 0 1
6510: PPUSH
6511: CALL_OW 266
6515: PUSH
6516: LD_INT 2
6518: EQUAL
6519: OR
6520: IFFALSE 6615
// begin un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) ;
6522: LD_ADDR_VAR 0 3
6526: PUSH
6527: LD_INT 22
6529: PUSH
6530: LD_INT 6
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: PUSH
6537: LD_INT 21
6539: PUSH
6540: LD_INT 3
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: PUSH
6547: LD_INT 30
6549: PUSH
6550: LD_INT 32
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: LIST
6561: PPUSH
6562: CALL_OW 69
6566: ST_TO_ADDR
// for i in un do
6567: LD_ADDR_VAR 0 2
6571: PUSH
6572: LD_VAR 0 3
6576: PUSH
6577: FOR_IN
6578: IFFALSE 6613
// AddComPlaceWeapon ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ Rand ( 1 , 2 ) ] ) ;
6580: LD_VAR 0 2
6584: PPUSH
6585: LD_INT 42
6587: PUSH
6588: LD_INT 43
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: PUSH
6595: LD_INT 1
6597: PPUSH
6598: LD_INT 2
6600: PPUSH
6601: CALL_OW 12
6605: ARRAY
6606: PPUSH
6607: CALL_OW 208
6611: GO 6577
6613: POP
6614: POP
// end ; end ;
6615: PPOPN 6
6617: END
// on BuildingStarted ( building , hum ) do var un , i ;
6618: LD_INT 0
6620: PPUSH
6621: PPUSH
// begin if GetSide ( building ) = 6 then
6622: LD_VAR 0 1
6626: PPUSH
6627: CALL_OW 255
6631: PUSH
6632: LD_INT 6
6634: EQUAL
6635: IFFALSE 6651
// AddComComplete ( kirovEngs , building ) ;
6637: LD_EXP 71
6641: PPUSH
6642: LD_VAR 0 1
6646: PPUSH
6647: CALL 20747 0 2
// end ; end_of_file
6651: PPOPN 4
6653: END
// export currentTeam , kirovBaseUnits , bukovMsg ; export counterEnable , counterIndex , ticks , convoyTime , timeToPrepareAttack , timeToArabAttack ; export kirovAttackVehicles ; export function MissionIntro ; var i , un , selectedPeople ; begin
6654: LD_INT 0
6656: PPUSH
6657: PPUSH
6658: PPUSH
6659: PPUSH
// InGameOn ;
6660: CALL_OW 8
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
6664: LD_EXP 44
6668: PUSH
6669: LD_EXP 56
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PPUSH
6678: CALL_OW 87
// convoyTime := [ 10 10$00 , 15 15$00 , 20 20$00 , 25 25$00 ] ;
6682: LD_ADDR_EXP 88
6686: PUSH
6687: LD_INT 21000
6689: PUSH
6690: LD_INT 31500
6692: PUSH
6693: LD_INT 42000
6695: PUSH
6696: LD_INT 52500
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: ST_TO_ADDR
// bukovMsg := [ D3a-RSol1-1 , D3b-RSol1-1 ] ;
6705: LD_ADDR_EXP 84
6709: PUSH
6710: LD_STRING D3a-RSol1-1
6712: PUSH
6713: LD_STRING D3b-RSol1-1
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: ST_TO_ADDR
// if not Belkov then
6720: LD_EXP 48
6724: NOT
6725: IFFALSE 6801
// begin Say ( Kurin , D1a-Kur-1 ) ;
6727: LD_EXP 56
6731: PPUSH
6732: LD_STRING D1a-Kur-1
6734: PPUSH
6735: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
6739: LD_EXP 44
6743: PPUSH
6744: LD_STRING D1a-Bur-1
6746: PPUSH
6747: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
6751: LD_EXP 56
6755: PPUSH
6756: LD_STRING D1a-Kur-2
6758: PPUSH
6759: CALL_OW 88
// Say ( Kurin , D1a-Kur-2a ) ;
6763: LD_EXP 56
6767: PPUSH
6768: LD_STRING D1a-Kur-2a
6770: PPUSH
6771: CALL_OW 88
// Say ( Kurin , D1a-Kur-2b ) ;
6775: LD_EXP 56
6779: PPUSH
6780: LD_STRING D1a-Kur-2b
6782: PPUSH
6783: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
6787: LD_EXP 44
6791: PPUSH
6792: LD_STRING D1a-Bur-2
6794: PPUSH
6795: CALL_OW 88
// end else
6799: GO 6837
// begin Say ( Kurin , D1b-Kur-1 ) ;
6801: LD_EXP 56
6805: PPUSH
6806: LD_STRING D1b-Kur-1
6808: PPUSH
6809: CALL_OW 88
// Say ( Belkov , D1b-Bel-1 ) ;
6813: LD_EXP 48
6817: PPUSH
6818: LD_STRING D1b-Bel-1
6820: PPUSH
6821: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
6825: LD_EXP 56
6829: PPUSH
6830: LD_STRING D1b-Kur-2
6832: PPUSH
6833: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
6837: LD_EXP 56
6841: PPUSH
6842: LD_STRING D2-Kur-1
6844: PPUSH
6845: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
6849: LD_EXP 44
6853: PPUSH
6854: LD_STRING D2-Bur-1
6856: PPUSH
6857: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
6861: LD_EXP 56
6865: PPUSH
6866: LD_STRING D2-Kur-2
6868: PPUSH
6869: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
6873: LD_EXP 44
6877: PPUSH
6878: LD_STRING D2-Bur-2
6880: PPUSH
6881: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
6885: LD_EXP 56
6889: PPUSH
6890: LD_STRING D2-Kur-3
6892: PPUSH
6893: CALL_OW 88
// PrepareAmericansMissionIntro ;
6897: CALL 2598 0 0
// SetAttitude ( 1 , 6 , att_friend , true ) ;
6901: LD_INT 1
6903: PPUSH
6904: LD_INT 6
6906: PPUSH
6907: LD_INT 1
6909: PPUSH
6910: LD_INT 1
6912: PPUSH
6913: CALL_OW 80
// RevealFogArea ( 3 , RevealMapPartArea ) ;
6917: LD_INT 3
6919: PPUSH
6920: LD_INT 5
6922: PPUSH
6923: CALL_OW 332
// CenterNowOnUnits ( [ Popov , Gaydar ] ) ;
6927: LD_EXP 57
6931: PUSH
6932: LD_EXP 66
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PPUSH
6941: CALL_OW 87
// wait ( 0 0$3 ) ;
6945: LD_INT 105
6947: PPUSH
6948: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
6952: LD_EXP 57
6956: PPUSH
6957: LD_STRING D2-Pop-3
6959: PPUSH
6960: CALL_OW 94
// wait ( 0 0$0.3 ) ;
6964: LD_INT 10
6966: PPUSH
6967: CALL_OW 67
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
6971: LD_EXP 44
6975: PUSH
6976: LD_EXP 56
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: PPUSH
6985: CALL_OW 87
// Say ( Kurin , D2-Kur-4 ) ;
6989: LD_EXP 56
6993: PPUSH
6994: LD_STRING D2-Kur-4
6996: PPUSH
6997: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
7001: LD_EXP 44
7005: PPUSH
7006: LD_STRING D2-Bur-4
7008: PPUSH
7009: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
7013: LD_EXP 56
7017: PPUSH
7018: LD_STRING D2-Kur-5
7020: PPUSH
7021: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
7025: LD_EXP 44
7029: PPUSH
7030: LD_STRING D2-Bur-5
7032: PPUSH
7033: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
7037: LD_EXP 56
7041: PPUSH
7042: LD_STRING D2-Kur-6
7044: PPUSH
7045: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
7049: LD_EXP 44
7053: PPUSH
7054: LD_STRING D2-Bur-4
7056: PPUSH
7057: CALL_OW 88
// kirovBaseUnits = otherKirovUnits ;
7061: LD_ADDR_EXP 83
7065: PUSH
7066: LD_EXP 58
7070: ST_TO_ADDR
// kirovBaseUnits = kirovBaseUnits ^ otherBeriaUnits ;
7071: LD_ADDR_EXP 83
7075: PUSH
7076: LD_EXP 83
7080: PUSH
7081: LD_EXP 52
7085: ADD
7086: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 6 , 6 , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , Belkov , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ kirovBaseUnits ^ [ sel_dont_change_class , sel_not_changeable , Kurin , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
7087: LD_ADDR_VAR 0 4
7091: PUSH
7092: LD_STRING text
7094: PPUSH
7095: LD_INT 6
7097: PPUSH
7098: LD_INT 6
7100: PPUSH
7101: LD_INT -5
7103: PUSH
7104: LD_EXP 44
7108: PUSH
7109: LD_EXP 45
7113: PUSH
7114: LD_EXP 47
7118: PUSH
7119: LD_EXP 46
7123: PUSH
7124: LD_EXP 48
7128: PUSH
7129: LD_INT -6
7131: PUSH
7132: LD_INT -2
7134: PUSH
7135: LD_INT -3
7137: PUSH
7138: LD_INT -5
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: PUSH
7153: LD_EXP 83
7157: ADD
7158: PUSH
7159: LD_INT -6
7161: PUSH
7162: LD_INT -4
7164: PUSH
7165: LD_EXP 56
7169: PUSH
7170: LD_EXP 57
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: ADD
7181: PPUSH
7182: LD_INT 1
7184: PUSH
7185: LD_INT 3
7187: PUSH
7188: LD_INT 2
7190: PUSH
7191: LD_INT 1
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 4
7200: PUSH
7201: LD_INT 1
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 42
7218: ST_TO_ADDR
// SetSide ( kirovBaseUnits , 6 ) ;
7219: LD_EXP 83
7223: PPUSH
7224: LD_INT 6
7226: PPUSH
7227: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
7231: LD_VAR 0 4
7235: PPUSH
7236: LD_INT 3
7238: PPUSH
7239: CALL_OW 235
// AddComMoveXY ( Popov , 135 , 67 ) ;
7243: LD_EXP 57
7247: PPUSH
7248: LD_INT 135
7250: PPUSH
7251: LD_INT 67
7253: PPUSH
7254: CALL_OW 171
// AddComMoveXY ( Gaydar , 209 , 164 ) ;
7258: LD_EXP 66
7262: PPUSH
7263: LD_INT 209
7265: PPUSH
7266: LD_INT 164
7268: PPUSH
7269: CALL_OW 171
// kirovBarracks := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) ;
7273: LD_ADDR_EXP 63
7277: PUSH
7278: LD_INT 22
7280: PUSH
7281: LD_INT 6
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PUSH
7288: LD_INT 30
7290: PUSH
7291: LD_INT 4
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: PPUSH
7302: CALL_OW 69
7306: ST_TO_ADDR
// kirovBaseUnits := kirovBaseUnits diff selectedPeople ;
7307: LD_ADDR_EXP 83
7311: PUSH
7312: LD_EXP 83
7316: PUSH
7317: LD_VAR 0 4
7321: DIFF
7322: ST_TO_ADDR
// SetClass ( kirovBaseUnits [ 1 ] , 2 ) ;
7323: LD_EXP 83
7327: PUSH
7328: LD_INT 1
7330: ARRAY
7331: PPUSH
7332: LD_INT 2
7334: PPUSH
7335: CALL_OW 336
// for i := 2 to 3 do
7339: LD_ADDR_VAR 0 2
7343: PUSH
7344: DOUBLE
7345: LD_INT 2
7347: DEC
7348: ST_TO_ADDR
7349: LD_INT 3
7351: PUSH
7352: FOR_TO
7353: IFFALSE 7375
// SetClass ( kirovBaseUnits [ i ] , 3 ) ;
7355: LD_EXP 83
7359: PUSH
7360: LD_VAR 0 2
7364: ARRAY
7365: PPUSH
7366: LD_INT 3
7368: PPUSH
7369: CALL_OW 336
7373: GO 7352
7375: POP
7376: POP
// for un in selectedPeople do
7377: LD_ADDR_VAR 0 3
7381: PUSH
7382: LD_VAR 0 4
7386: PUSH
7387: FOR_IN
7388: IFFALSE 7401
// ComExitBuilding ( un ) ;
7390: LD_VAR 0 3
7394: PPUSH
7395: CALL_OW 122
7399: GO 7387
7401: POP
7402: POP
// currentTeam := selectedPeople union [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] ;
7403: LD_ADDR_EXP 82
7407: PUSH
7408: LD_VAR 0 4
7412: PUSH
7413: LD_EXP 44
7417: PUSH
7418: LD_EXP 45
7422: PUSH
7423: LD_EXP 47
7427: PUSH
7428: LD_EXP 48
7432: PUSH
7433: LD_EXP 46
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: UNION
7445: ST_TO_ADDR
// AddComMoveXY ( currentTeam , 113 , 97 ) ;
7446: LD_EXP 82
7450: PPUSH
7451: LD_INT 113
7453: PPUSH
7454: LD_INT 97
7456: PPUSH
7457: CALL_OW 171
// for un in kirovBaseUnits do
7461: LD_ADDR_VAR 0 3
7465: PUSH
7466: LD_EXP 83
7470: PUSH
7471: FOR_IN
7472: IFFALSE 7509
// begin if IsInUnit ( un ) = 0 then
7474: LD_VAR 0 3
7478: PPUSH
7479: CALL_OW 310
7483: PUSH
7484: LD_INT 0
7486: EQUAL
7487: IFFALSE 7507
// ComEnterUnit ( un , kirovBarracks [ 1 ] ) ;
7489: LD_VAR 0 3
7493: PPUSH
7494: LD_EXP 63
7498: PUSH
7499: LD_INT 1
7501: ARRAY
7502: PPUSH
7503: CALL_OW 120
// end ;
7507: GO 7471
7509: POP
7510: POP
// ChangeMissionObjectives ( M1 ) ;
7511: LD_STRING M1
7513: PPUSH
7514: CALL_OW 337
// Query ( QReadyInfo ) ;
7518: LD_STRING QReadyInfo
7520: PPUSH
7521: CALL_OW 97
// SaveForQuickRestart ;
7525: CALL_OW 22
// wait ( 0 0$8 ) ;
7529: LD_INT 280
7531: PPUSH
7532: CALL_OW 67
// InGameOff ;
7536: CALL_OW 9
// spawnCrates := true ;
7540: LD_ADDR_EXP 13
7544: PUSH
7545: LD_INT 1
7547: ST_TO_ADDR
// for un in kirovBaseUnits do
7548: LD_ADDR_VAR 0 3
7552: PUSH
7553: LD_EXP 83
7557: PUSH
7558: FOR_IN
7559: IFFALSE 7612
// begin if IsInUnit ( un ) = 0 and not GetClass ( un ) = 2 then
7561: LD_VAR 0 3
7565: PPUSH
7566: CALL_OW 310
7570: PUSH
7571: LD_INT 0
7573: EQUAL
7574: PUSH
7575: LD_VAR 0 3
7579: PPUSH
7580: CALL_OW 257
7584: PUSH
7585: LD_INT 2
7587: EQUAL
7588: NOT
7589: AND
7590: IFFALSE 7610
// ComEnterUnit ( un , kirovBarracks [ 2 ] ) ;
7592: LD_VAR 0 3
7596: PPUSH
7597: LD_EXP 63
7601: PUSH
7602: LD_INT 2
7604: ARRAY
7605: PPUSH
7606: CALL_OW 120
// end ;
7610: GO 7558
7612: POP
7613: POP
// UpgradeKirovBase ;
7614: CALL 1919 0 0
// end ;
7618: LD_VAR 0 1
7622: RET
// every 0 0$1 do
7623: GO 7625
7625: DISABLE
// begin timeToArabAttack = timeToArabAttack - 0 0$01 ;
7626: LD_ADDR_EXP 90
7630: PUSH
7631: LD_EXP 90
7635: PUSH
7636: LD_INT 35
7638: MINUS
7639: ST_TO_ADDR
// end ;
7640: END
// every 0 0$1 trigger counterEnable do var veh , hum , i ;
7641: LD_EXP 85
7645: IFFALSE 8302
7647: GO 7649
7649: DISABLE
7650: LD_INT 0
7652: PPUSH
7653: PPUSH
7654: PPUSH
// begin enable ;
7655: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) ;
7656: LD_ADDR_VAR 0 1
7660: PUSH
7661: LD_INT 22
7663: PUSH
7664: LD_INT 3
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PUSH
7671: LD_INT 21
7673: PUSH
7674: LD_INT 2
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: LD_INT 3
7683: PUSH
7684: LD_INT 34
7686: PUSH
7687: LD_INT 51
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: PPUSH
7703: CALL_OW 69
7707: ST_TO_ADDR
// hum = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + kurinVehNeeded ;
7708: LD_ADDR_VAR 0 2
7712: PUSH
7713: LD_INT 22
7715: PUSH
7716: LD_INT 3
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: PUSH
7723: LD_INT 21
7725: PUSH
7726: LD_INT 1
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PPUSH
7737: CALL_OW 69
7741: PUSH
7742: LD_EXP 34
7746: PLUS
7747: ST_TO_ADDR
// ticks = ticks + 0 0$01 ;
7748: LD_ADDR_EXP 87
7752: PUSH
7753: LD_EXP 87
7757: PUSH
7758: LD_INT 35
7760: PLUS
7761: ST_TO_ADDR
// VehNeeded = hum - veh ;
7762: LD_ADDR_EXP 39
7766: PUSH
7767: LD_VAR 0 2
7771: PUSH
7772: LD_VAR 0 1
7776: MINUS
7777: ST_TO_ADDR
// if VehNeeded < 0 then
7778: LD_EXP 39
7782: PUSH
7783: LD_INT 0
7785: LESS
7786: IFFALSE 7798
// enoughVehsForKirov = true else
7788: LD_ADDR_EXP 92
7792: PUSH
7793: LD_INT 1
7795: ST_TO_ADDR
7796: GO 7806
// enoughVehsForKirov = false ;
7798: LD_ADDR_EXP 92
7802: PUSH
7803: LD_INT 0
7805: ST_TO_ADDR
// case counterIndex of 1 :
7806: LD_EXP 86
7810: PUSH
7811: LD_INT 1
7813: DOUBLE
7814: EQUAL
7815: IFTRUE 7819
7817: GO 7902
7819: POP
// begin if VehNeeded <= 0 then
7820: LD_EXP 39
7824: PUSH
7825: LD_INT 0
7827: LESSEQUAL
7828: IFFALSE 7856
// display_strings = [ #Ru03-5a ] ^ [ #Ru03-4 , timeToPrepareAttack ] else
7830: LD_ADDR_OWVAR 47
7834: PUSH
7835: LD_STRING #Ru03-5a
7837: PUSH
7838: EMPTY
7839: LIST
7840: PUSH
7841: LD_STRING #Ru03-4
7843: PUSH
7844: LD_EXP 89
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: ADD
7853: ST_TO_ADDR
7854: GO 7886
// display_strings = [ #Ru03-5 , VehNeeded ] ^ [ #Ru03-4 , timeToPrepareAttack ] ;
7856: LD_ADDR_OWVAR 47
7860: PUSH
7861: LD_STRING #Ru03-5
7863: PUSH
7864: LD_EXP 39
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: PUSH
7873: LD_STRING #Ru03-4
7875: PUSH
7876: LD_EXP 89
7880: PUSH
7881: EMPTY
7882: LIST
7883: LIST
7884: ADD
7885: ST_TO_ADDR
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ;
7886: LD_ADDR_EXP 89
7890: PUSH
7891: LD_EXP 89
7895: PUSH
7896: LD_INT 35
7898: MINUS
7899: ST_TO_ADDR
// end ; 2 :
7900: GO 8029
7902: LD_INT 2
7904: DOUBLE
7905: EQUAL
7906: IFTRUE 7910
7908: GO 7944
7910: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
7911: LD_ADDR_OWVAR 47
7915: PUSH
7916: LD_STRING #Ru03-1
7918: PUSH
7919: LD_EXP 23
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
7928: LD_ADDR_EXP 23
7932: PUSH
7933: LD_EXP 23
7937: PUSH
7938: LD_INT 35
7940: MINUS
7941: ST_TO_ADDR
// end ; 3 :
7942: GO 8029
7944: LD_INT 3
7946: DOUBLE
7947: EQUAL
7948: IFTRUE 7952
7950: GO 7986
7952: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
7953: LD_ADDR_OWVAR 47
7957: PUSH
7958: LD_STRING #Ru03-2
7960: PUSH
7961: LD_EXP 23
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
7970: LD_ADDR_EXP 23
7974: PUSH
7975: LD_EXP 23
7979: PUSH
7980: LD_INT 35
7982: MINUS
7983: ST_TO_ADDR
// end ; 4 :
7984: GO 8029
7986: LD_INT 4
7988: DOUBLE
7989: EQUAL
7990: IFTRUE 7994
7992: GO 8028
7994: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
7995: LD_ADDR_OWVAR 47
7999: PUSH
8000: LD_STRING #Ru03-3
8002: PUSH
8003: LD_EXP 22
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
8012: LD_ADDR_EXP 22
8016: PUSH
8017: LD_EXP 22
8021: PUSH
8022: LD_INT 35
8024: MINUS
8025: ST_TO_ADDR
// end ; end ;
8026: GO 8029
8028: POP
// if tick = convoyTime [ 1 ] then
8029: LD_OWVAR 1
8033: PUSH
8034: LD_EXP 88
8038: PUSH
8039: LD_INT 1
8041: ARRAY
8042: EQUAL
8043: IFFALSE 8302
// begin SayRadio ( Bukov , bukovMsg [ 1 ] ) ;
8045: LD_EXP 67
8049: PPUSH
8050: LD_EXP 84
8054: PUSH
8055: LD_INT 1
8057: ARRAY
8058: PPUSH
8059: CALL_OW 94
// if bukovMsg [ 1 ] = D3a-RSol1-1 then
8063: LD_EXP 84
8067: PUSH
8068: LD_INT 1
8070: ARRAY
8071: PUSH
8072: LD_STRING D3a-RSol1-1
8074: EQUAL
8075: IFFALSE 8179
// begin SayRadio ( Burlak , D3a-Bur-1 ) ;
8077: LD_EXP 44
8081: PPUSH
8082: LD_STRING D3a-Bur-1
8084: PPUSH
8085: CALL_OW 94
// if IsOk ( Gnyevko ) then
8089: LD_EXP 45
8093: PPUSH
8094: CALL_OW 302
8098: IFFALSE 8112
// Say ( Gnyevko , D3b-Gny-1 ) ;
8100: LD_EXP 45
8104: PPUSH
8105: LD_STRING D3b-Gny-1
8107: PPUSH
8108: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
8112: LD_EXP 44
8116: PPUSH
8117: LD_STRING D3b-Bur-1
8119: PPUSH
8120: CALL_OW 88
// if IsOK ( Kovalyuk ) then
8124: LD_EXP 47
8128: PPUSH
8129: CALL_OW 302
8133: IFFALSE 8147
// Say ( Kovalyuk , D3b-Kov-1 ) ;
8135: LD_EXP 47
8139: PPUSH
8140: LD_STRING D3b-Kov-1
8142: PPUSH
8143: CALL_OW 88
// SayRadio ( Bukov , D3b-Rsol1-2 ) ;
8147: LD_EXP 67
8151: PPUSH
8152: LD_STRING D3b-Rsol1-2
8154: PPUSH
8155: CALL_OW 94
// bukovMsg := bukovMsg diff bukovMsg [ 1 ] ;
8159: LD_ADDR_EXP 84
8163: PUSH
8164: LD_EXP 84
8168: PUSH
8169: LD_EXP 84
8173: PUSH
8174: LD_INT 1
8176: ARRAY
8177: DIFF
8178: ST_TO_ADDR
// end ; PrepareAmericanConvoy ( amConvoyGroups [ 1 ] [ 1 ] , amConvoyGroups [ 1 ] [ 2 ] , amConvoyGroups [ 1 ] [ 3 ] , amConvoyGroups [ 1 ] [ 4 ] , amConvoyGroups [ 1 ] [ 5 ] , AmTroopsSpawn ) ;
8179: LD_EXP 76
8183: PUSH
8184: LD_INT 1
8186: ARRAY
8187: PUSH
8188: LD_INT 1
8190: ARRAY
8191: PPUSH
8192: LD_EXP 76
8196: PUSH
8197: LD_INT 1
8199: ARRAY
8200: PUSH
8201: LD_INT 2
8203: ARRAY
8204: PPUSH
8205: LD_EXP 76
8209: PUSH
8210: LD_INT 1
8212: ARRAY
8213: PUSH
8214: LD_INT 3
8216: ARRAY
8217: PPUSH
8218: LD_EXP 76
8222: PUSH
8223: LD_INT 1
8225: ARRAY
8226: PUSH
8227: LD_INT 4
8229: ARRAY
8230: PPUSH
8231: LD_EXP 76
8235: PUSH
8236: LD_INT 1
8238: ARRAY
8239: PUSH
8240: LD_INT 5
8242: ARRAY
8243: PPUSH
8244: LD_INT 6
8246: PPUSH
8247: CALL 4564 0 6
// PrepareAttackOnRus ( ) ;
8251: CALL 5376 0 0
// wait ( 0 0$1 ) ;
8255: LD_INT 35
8257: PPUSH
8258: CALL_OW 67
// amConvoyGroups := amConvoyGroups diff amConvoyGroups [ 1 ] ;
8262: LD_ADDR_EXP 76
8266: PUSH
8267: LD_EXP 76
8271: PUSH
8272: LD_EXP 76
8276: PUSH
8277: LD_INT 1
8279: ARRAY
8280: DIFF
8281: ST_TO_ADDR
// convoyTime := convoyTime diff convoyTime [ 1 ] ;
8282: LD_ADDR_EXP 88
8286: PUSH
8287: LD_EXP 88
8291: PUSH
8292: LD_EXP 88
8296: PUSH
8297: LD_INT 1
8299: ARRAY
8300: DIFF
8301: ST_TO_ADDR
// end ; end ;
8302: PPOPN 3
8304: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
8305: LD_INT 78
8307: PPUSH
8308: LD_INT 112
8310: PPUSH
8311: LD_INT 3
8313: PPUSH
8314: CALL_OW 440
8318: IFFALSE 8372
8320: GO 8322
8322: DISABLE
// begin CenterOnXY ( 78 , 112 ) ;
8323: LD_INT 78
8325: PPUSH
8326: LD_INT 112
8328: PPUSH
8329: CALL_OW 84
// DialogueOn ;
8333: CALL_OW 6
// SayRadio ( Burlak , D2a-Bur-1 ) ;
8337: LD_EXP 44
8341: PPUSH
8342: LD_STRING D2a-Bur-1
8344: PPUSH
8345: CALL_OW 94
// SayRadio ( Kurin , D2a-Kur-1 ) ;
8349: LD_EXP 56
8353: PPUSH
8354: LD_STRING D2a-Kur-1
8356: PPUSH
8357: CALL_OW 94
// DialogueOff ;
8361: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8365: LD_STRING M2
8367: PPUSH
8368: CALL_OW 337
// end ;
8372: END
// every 0 0$1 trigger UnitFilter ( amVehs , [ f_not , [ f_lives , 700 ] ] ) or UnitFilter ( amIntroUnits , [ f_not , [ f_lives , 700 ] ] ) do var i ;
8373: LD_EXP 80
8377: PPUSH
8378: LD_INT 3
8380: PUSH
8381: LD_INT 24
8383: PUSH
8384: LD_INT 700
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: PPUSH
8395: CALL_OW 72
8399: PUSH
8400: LD_EXP 75
8404: PPUSH
8405: LD_INT 3
8407: PUSH
8408: LD_INT 24
8410: PUSH
8411: LD_INT 700
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PPUSH
8422: CALL_OW 72
8426: OR
8427: IFFALSE 8674
8429: GO 8431
8431: DISABLE
8432: LD_INT 0
8434: PPUSH
// begin enable ;
8435: ENABLE
// for i := 1 to amVehs do
8436: LD_ADDR_VAR 0 1
8440: PUSH
8441: DOUBLE
8442: LD_INT 1
8444: DEC
8445: ST_TO_ADDR
8446: LD_EXP 80
8450: PUSH
8451: FOR_TO
8452: IFFALSE 8495
// begin if GetLives ( amVehs [ i ] ) <= 700 then
8454: LD_EXP 80
8458: PUSH
8459: LD_VAR 0 1
8463: ARRAY
8464: PPUSH
8465: CALL_OW 256
8469: PUSH
8470: LD_INT 700
8472: LESSEQUAL
8473: IFFALSE 8493
// ComMoveToArea ( amVehs [ i ] , amRetreatArea ) ;
8475: LD_EXP 80
8479: PUSH
8480: LD_VAR 0 1
8484: ARRAY
8485: PPUSH
8486: LD_INT 10
8488: PPUSH
8489: CALL_OW 113
// end ;
8493: GO 8451
8495: POP
8496: POP
// for i := 1 to amIntroUnits and GetLives ( i ) <= 700 do
8497: LD_ADDR_VAR 0 1
8501: PUSH
8502: DOUBLE
8503: LD_INT 1
8505: DEC
8506: ST_TO_ADDR
8507: LD_EXP 75
8511: PUSH
8512: LD_VAR 0 1
8516: PPUSH
8517: CALL_OW 256
8521: PUSH
8522: LD_INT 700
8524: LESSEQUAL
8525: AND
8526: PUSH
8527: FOR_TO
8528: IFFALSE 8571
// begin if GetLives ( amIntroUnits [ i ] ) <= 700 then
8530: LD_EXP 75
8534: PUSH
8535: LD_VAR 0 1
8539: ARRAY
8540: PPUSH
8541: CALL_OW 256
8545: PUSH
8546: LD_INT 700
8548: LESSEQUAL
8549: IFFALSE 8569
// ComMoveToArea ( amIntroUnits [ i ] , amRetreatArea ) ;
8551: LD_EXP 75
8555: PUSH
8556: LD_VAR 0 1
8560: ARRAY
8561: PPUSH
8562: LD_INT 10
8564: PPUSH
8565: CALL_OW 113
// end ;
8569: GO 8527
8571: POP
8572: POP
// for i in amIntroUnits do
8573: LD_ADDR_VAR 0 1
8577: PUSH
8578: LD_EXP 75
8582: PUSH
8583: FOR_IN
8584: IFFALSE 8629
// begin if IsInArea ( i , amRetreatArea ) and GetLives ( i ) <= 700 then
8586: LD_VAR 0 1
8590: PPUSH
8591: LD_INT 10
8593: PPUSH
8594: CALL_OW 308
8598: PUSH
8599: LD_VAR 0 1
8603: PPUSH
8604: CALL_OW 256
8608: PUSH
8609: LD_INT 700
8611: LESSEQUAL
8612: AND
8613: IFFALSE 8627
// SetLives ( i , 1000 ) ;
8615: LD_VAR 0 1
8619: PPUSH
8620: LD_INT 1000
8622: PPUSH
8623: CALL_OW 234
// end ;
8627: GO 8583
8629: POP
8630: POP
// for i in amVehs do
8631: LD_ADDR_VAR 0 1
8635: PUSH
8636: LD_EXP 80
8640: PUSH
8641: FOR_IN
8642: IFFALSE 8672
// begin if IsInArea ( i , amRetreatArea ) then
8644: LD_VAR 0 1
8648: PPUSH
8649: LD_INT 10
8651: PPUSH
8652: CALL_OW 308
8656: IFFALSE 8670
// SetLives ( i , 1000 ) ;
8658: LD_VAR 0 1
8662: PPUSH
8663: LD_INT 1000
8665: PPUSH
8666: CALL_OW 234
// end ;
8670: GO 8641
8672: POP
8673: POP
// end ;
8674: PPOPN 1
8676: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
8677: LD_EXP 18
8681: NOT
8682: IFFALSE 8890
8684: GO 8686
8686: DISABLE
8687: LD_INT 0
8689: PPUSH
// begin enable ;
8690: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
8691: LD_ADDR_VAR 0 1
8695: PUSH
8696: LD_INT 22
8698: PUSH
8699: LD_INT 3
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PUSH
8706: LD_INT 21
8708: PUSH
8709: LD_INT 2
8711: PUSH
8712: EMPTY
8713: LIST
8714: LIST
8715: PUSH
8716: LD_INT 23
8718: PUSH
8719: LD_INT 3
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: PUSH
8726: LD_INT 2
8728: PUSH
8729: LD_INT 31
8731: PUSH
8732: LD_INT 21
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: PUSH
8739: LD_INT 31
8741: PUSH
8742: LD_INT 23
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: LIST
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: PPUSH
8760: CALL_OW 69
8764: PUSH
8765: FOR_IN
8766: IFFALSE 8888
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
8768: LD_VAR 0 1
8772: PPUSH
8773: LD_INT 48
8775: PPUSH
8776: LD_INT 81
8778: PPUSH
8779: CALL_OW 297
8783: PUSH
8784: LD_INT 7
8786: LESS
8787: IFFALSE 8886
// begin dialog_track = true ;
8789: LD_ADDR_EXP 18
8793: PUSH
8794: LD_INT 1
8796: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
8797: LD_INT 48
8799: PPUSH
8800: LD_INT 81
8802: PPUSH
8803: CALL_OW 86
// DialogueOn ;
8807: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8811: LD_EXP 44
8815: PPUSH
8816: LD_STRING D5a-Bur-1
8818: PPUSH
8819: CALL_OW 88
// DialogueOff ;
8823: CALL_OW 7
// if GetTech ( 82 , 3 ) = state_disabled then
8827: LD_INT 82
8829: PPUSH
8830: LD_INT 3
8832: PPUSH
8833: CALL_OW 321
8837: PUSH
8838: LD_INT 0
8840: EQUAL
8841: IFFALSE 8856
// SetTech ( 82 , 3 , state_enabled ) ;
8843: LD_INT 82
8845: PPUSH
8846: LD_INT 3
8848: PPUSH
8849: LD_INT 1
8851: PPUSH
8852: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
8856: LD_INT 84
8858: PPUSH
8859: LD_INT 3
8861: PPUSH
8862: LD_INT 1
8864: PPUSH
8865: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
8869: LD_INT 16
8871: PPUSH
8872: LD_INT 3
8874: PPUSH
8875: LD_INT 1
8877: PPUSH
8878: CALL_OW 324
// exit ;
8882: POP
8883: POP
8884: GO 8890
// end ;
8886: GO 8765
8888: POP
8889: POP
// end ;
8890: PPOPN 1
8892: END
// every 5 5$30 do
8893: GO 8895
8895: DISABLE
// begin PrepareScholtze ;
8896: CALL 2480 0 0
// wait ( 0 0$2 ) ;
8900: LD_INT 70
8902: PPUSH
8903: CALL_OW 67
// DialogueOn ;
8907: CALL_OW 6
// SayNoFaceRadio ( Scholtze2 , D4-Sch-1 ) ;
8911: LD_EXP 69
8915: PPUSH
8916: LD_STRING D4-Sch-1
8918: PPUSH
8919: CALL 53424 0 2
// SayRadio ( Burlak , D4-Bur-1 ) ;
8923: LD_EXP 44
8927: PPUSH
8928: LD_STRING D4-Bur-1
8930: PPUSH
8931: CALL_OW 94
// DialogueOff ;
8935: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
8939: LD_STRING M4
8941: PPUSH
8942: CALL_OW 337
// ComHold ( Scholtze ) ;
8946: LD_EXP 68
8950: PPUSH
8951: CALL_OW 140
// scholtzeSpawned = true ;
8955: LD_ADDR_EXP 14
8959: PUSH
8960: LD_INT 1
8962: ST_TO_ADDR
// end ;
8963: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and scholtzeSpawned and not scholtzeSaved do
8964: LD_INT 3
8966: PPUSH
8967: LD_EXP 68
8971: PPUSH
8972: CALL_OW 292
8976: PUSH
8977: LD_EXP 14
8981: AND
8982: PUSH
8983: LD_EXP 15
8987: NOT
8988: AND
8989: IFFALSE 9155
8991: GO 8993
8993: DISABLE
// begin scholtzeSaved = true ;
8994: LD_ADDR_EXP 15
8998: PUSH
8999: LD_INT 1
9001: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
9002: LD_EXP 68
9006: PPUSH
9007: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
9011: LD_EXP 68
9015: PPUSH
9016: LD_INT 3
9018: PPUSH
9019: CALL_OW 235
// DialogueOn ;
9023: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
9027: LD_EXP 68
9031: PPUSH
9032: LD_STRING D4a-Sch-1
9034: PPUSH
9035: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
9039: LD_EXP 44
9043: PPUSH
9044: LD_STRING D4a-Bur-1
9046: PPUSH
9047: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
9051: LD_EXP 68
9055: PPUSH
9056: LD_STRING D4a-Sch-2
9058: PPUSH
9059: CALL_OW 88
// DialogueOff ;
9063: CALL_OW 7
// ChangeMissionObjectives ( MScholtzeOut ) ;
9067: LD_STRING MScholtzeOut
9069: PPUSH
9070: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
9074: LD_INT 49
9076: PPUSH
9077: LD_INT 3
9079: PPUSH
9080: LD_INT 1
9082: PPUSH
9083: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
9087: LD_INT 51
9089: PPUSH
9090: LD_INT 3
9092: PPUSH
9093: LD_INT 1
9095: PPUSH
9096: CALL_OW 322
// if GetTech ( 82 , 3 ) = state_disabled then
9100: LD_INT 82
9102: PPUSH
9103: LD_INT 3
9105: PPUSH
9106: CALL_OW 321
9110: PUSH
9111: LD_INT 0
9113: EQUAL
9114: IFFALSE 9129
// SetTech ( 82 , 3 , state_enabled ) ;
9116: LD_INT 82
9118: PPUSH
9119: LD_INT 3
9121: PPUSH
9122: LD_INT 1
9124: PPUSH
9125: CALL_OW 322
// SetTech ( 83 , 3 , state_enabled ) ;
9129: LD_INT 83
9131: PPUSH
9132: LD_INT 3
9134: PPUSH
9135: LD_INT 1
9137: PPUSH
9138: CALL_OW 322
// SetRestrict ( b_ext_noncombat , 3 , state_enabled ) ;
9142: LD_INT 19
9144: PPUSH
9145: LD_INT 3
9147: PPUSH
9148: LD_INT 1
9150: PPUSH
9151: CALL_OW 324
// end ;
9155: END
// every 5 5$0 trigger scholtzeSpawned and not scholtzeSaved do
9156: LD_EXP 14
9160: PUSH
9161: LD_EXP 15
9165: NOT
9166: AND
9167: IFFALSE 9252
9169: GO 9171
9171: DISABLE
// begin DialogueOn ;
9172: CALL_OW 6
// SayNoFaceRadio ( Scholtze , D4b-Sch-1 ) ;
9176: LD_EXP 68
9180: PPUSH
9181: LD_STRING D4b-Sch-1
9183: PPUSH
9184: CALL 53424 0 2
// SayRadioNoFace ( Scholtze2 , D4b-Sol1-1 ) ;
9188: LD_EXP 69
9192: PPUSH
9193: LD_STRING D4b-Sol1-1
9195: PPUSH
9196: CALL_OW 586
// SayRadioNoFace ( Scholtze2 , D4b-Sol2-1 ) ;
9200: LD_EXP 69
9204: PPUSH
9205: LD_STRING D4b-Sol2-1
9207: PPUSH
9208: CALL_OW 586
// SayNoFaceRadio ( Scholtze , D4b-Sch-2 ) ;
9212: LD_EXP 68
9216: PPUSH
9217: LD_STRING D4b-Sch-2
9219: PPUSH
9220: CALL 53424 0 2
// Say ( Burlak , D4b-Bur-2 ) ;
9224: LD_EXP 44
9228: PPUSH
9229: LD_STRING D4b-Bur-2
9231: PPUSH
9232: CALL_OW 88
// DialogueOff ;
9236: CALL_OW 7
// SetLives ( Scholtze , 0 ) ;
9240: LD_EXP 68
9244: PPUSH
9245: LD_INT 0
9247: PPUSH
9248: CALL_OW 234
// end ;
9252: END
// every 0 0$30 trigger spawnCrates do
9253: LD_EXP 13
9257: IFFALSE 9284
9259: GO 9261
9261: DISABLE
// begin enable ;
9262: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesSpawn , true ) ;
9263: LD_INT 3
9265: PPUSH
9266: LD_INT 5
9268: PPUSH
9269: CALL_OW 12
9273: PPUSH
9274: LD_INT 15
9276: PPUSH
9277: LD_INT 1
9279: PPUSH
9280: CALL_OW 55
// end ;
9284: END
// every 1 trigger not meetNearOmicronBase do var i , unit , randDialog , currentDist , tmpDist , nearUnit , index ;
9285: LD_EXP 27
9289: NOT
9290: IFFALSE 9585
9292: GO 9294
9294: DISABLE
9295: LD_INT 0
9297: PPUSH
9298: PPUSH
9299: PPUSH
9300: PPUSH
9301: PPUSH
9302: PPUSH
9303: PPUSH
// begin enable ;
9304: ENABLE
// for unit in FilterUnitsInArea ( areaOmicron , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
9305: LD_ADDR_VAR 0 2
9309: PUSH
9310: LD_INT 8
9312: PPUSH
9313: LD_INT 22
9315: PUSH
9316: LD_INT 1
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PUSH
9323: LD_INT 2
9325: PUSH
9326: LD_INT 21
9328: PUSH
9329: LD_INT 1
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PUSH
9336: LD_INT 21
9338: PUSH
9339: LD_INT 2
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: PUSH
9346: LD_INT 21
9348: PUSH
9349: LD_INT 3
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: PPUSH
9366: CALL_OW 70
9370: PUSH
9371: FOR_IN
9372: IFFALSE 9583
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
9374: LD_VAR 0 2
9378: PPUSH
9379: LD_INT 22
9381: PUSH
9382: LD_INT 3
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 2
9391: PUSH
9392: LD_INT 21
9394: PUSH
9395: LD_INT 1
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PUSH
9402: LD_INT 21
9404: PUSH
9405: LD_INT 2
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: LIST
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PPUSH
9421: CALL_OW 69
9425: PPUSH
9426: LD_VAR 0 2
9430: PPUSH
9431: CALL_OW 74
9435: PPUSH
9436: CALL_OW 296
9440: PUSH
9441: LD_INT 17
9443: LESS
9444: IFFALSE 9581
// begin ComMoveXY ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) , 114 , 98 ) ;
9446: LD_INT 22
9448: PUSH
9449: LD_INT 3
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: LD_INT 2
9458: PUSH
9459: LD_INT 21
9461: PUSH
9462: LD_INT 1
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 21
9471: PUSH
9472: LD_INT 2
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: LIST
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: PPUSH
9488: CALL_OW 69
9492: PPUSH
9493: LD_VAR 0 2
9497: PPUSH
9498: CALL_OW 74
9502: PPUSH
9503: LD_INT 114
9505: PPUSH
9506: LD_INT 98
9508: PPUSH
9509: CALL_OW 111
// if not dialog_stop then
9513: LD_EXP 19
9517: NOT
9518: IFFALSE 9581
// begin dialog_stop = true ;
9520: LD_ADDR_EXP 19
9524: PUSH
9525: LD_INT 1
9527: ST_TO_ADDR
// if not IsOK ( Gnyevko ) then
9528: LD_EXP 45
9532: PPUSH
9533: CALL_OW 302
9537: NOT
9538: IFFALSE 9554
// SayRadio ( Kurin , D11-Kur-1 ) else
9540: LD_EXP 56
9544: PPUSH
9545: LD_STRING D11-Kur-1
9547: PPUSH
9548: CALL_OW 94
9552: GO 9566
// Say ( Gnyevko , D11-Gny-1 ) ;
9554: LD_EXP 45
9558: PPUSH
9559: LD_STRING D11-Gny-1
9561: PPUSH
9562: CALL_OW 88
// wait ( 0 0$5 ) ;
9566: LD_INT 175
9568: PPUSH
9569: CALL_OW 67
// dialog_stop = false ;
9573: LD_ADDR_EXP 19
9577: PUSH
9578: LD_INT 0
9580: ST_TO_ADDR
// end ; end ;
9581: GO 9371
9583: POP
9584: POP
// end ;
9585: PPOPN 7
9587: END
// every 1 trigger SeeArea ( 3 , areaKirov ) >= 6 and counterEnable do var unit ;
9588: LD_INT 3
9590: PPUSH
9591: LD_INT 13
9593: PPUSH
9594: CALL_OW 294
9598: PUSH
9599: LD_INT 6
9601: GREATEREQUAL
9602: PUSH
9603: LD_EXP 85
9607: AND
9608: IFFALSE 9779
9610: GO 9612
9612: DISABLE
9613: LD_INT 0
9615: PPUSH
// begin enable ;
9616: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
9617: LD_ADDR_VAR 0 1
9621: PUSH
9622: LD_INT 22
9624: PUSH
9625: LD_INT 3
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: PUSH
9632: LD_INT 2
9634: PUSH
9635: LD_INT 21
9637: PUSH
9638: LD_INT 1
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 21
9647: PUSH
9648: LD_INT 2
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: LIST
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PPUSH
9664: CALL_OW 69
9668: PUSH
9669: FOR_IN
9670: IFFALSE 9777
// if IsInArea ( unit , areaKirov ) and ( UnitFilter ( unit , [ f_type , unit_human ] ) or UnitsInside ( unit ) ) then
9672: LD_VAR 0 1
9676: PPUSH
9677: LD_INT 13
9679: PPUSH
9680: CALL_OW 308
9684: PUSH
9685: LD_VAR 0 1
9689: PPUSH
9690: LD_INT 21
9692: PUSH
9693: LD_INT 1
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: PPUSH
9700: CALL_OW 72
9704: PUSH
9705: LD_VAR 0 1
9709: PPUSH
9710: CALL_OW 313
9714: OR
9715: AND
9716: IFFALSE 9775
// begin ComMoveXY ( unit , 120 , 98 ) ;
9718: LD_VAR 0 1
9722: PPUSH
9723: LD_INT 120
9725: PPUSH
9726: LD_INT 98
9728: PPUSH
9729: CALL_OW 111
// if not dialog_stop then
9733: LD_EXP 19
9737: NOT
9738: IFFALSE 9775
// begin dialog_stop = true ;
9740: LD_ADDR_EXP 19
9744: PUSH
9745: LD_INT 1
9747: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
9748: LD_EXP 56
9752: PPUSH
9753: LD_STRING D12-Kur-1
9755: PPUSH
9756: CALL_OW 88
// wait ( 0 0$5 ) ;
9760: LD_INT 175
9762: PPUSH
9763: CALL_OW 67
// dialog_stop = false ;
9767: LD_ADDR_EXP 19
9771: PUSH
9772: LD_INT 0
9774: ST_TO_ADDR
// end ; end ;
9775: GO 9669
9777: POP
9778: POP
// end ;
9779: PPOPN 1
9781: END
// every 0 0$1 trigger IsSelected ( Kurin ) do
9782: LD_EXP 56
9786: PPUSH
9787: CALL_OW 306
9791: IFFALSE 9999
9793: GO 9795
9795: DISABLE
// begin if true then
9796: LD_INT 1
9798: IFFALSE 9998
// begin case Query ( QReadyToAttack ) of 1 :
9800: LD_STRING QReadyToAttack
9802: PPUSH
9803: CALL_OW 97
9807: PUSH
9808: LD_INT 1
9810: DOUBLE
9811: EQUAL
9812: IFTRUE 9816
9814: GO 9886
9816: POP
// begin DeselectUnits ( Kurin ) ;
9817: LD_EXP 56
9821: PPUSH
9822: CALL_OW 491
// SelectUnits ( Burlak ) ;
9826: LD_EXP 44
9830: PPUSH
9831: CALL_OW 490
// Say ( Burlak , D6a-Bur-1 ) ;
9835: LD_EXP 44
9839: PPUSH
9840: LD_STRING D6a-Bur-1
9842: PPUSH
9843: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
9847: LD_EXP 56
9851: PPUSH
9852: LD_STRING D6a-Kur-1
9854: PPUSH
9855: CALL_OW 94
// meetNearOmicronBase = true ;
9859: LD_ADDR_EXP 27
9863: PUSH
9864: LD_INT 1
9866: ST_TO_ADDR
// kurinCheckVehicles = true ;
9867: LD_ADDR_EXP 26
9871: PUSH
9872: LD_INT 1
9874: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
9875: LD_ADDR_EXP 23
9879: PUSH
9880: LD_INT 4200
9882: ST_TO_ADDR
// disable ;
9883: DISABLE
// end ; 2 :
9884: GO 9998
9886: LD_INT 2
9888: DOUBLE
9889: EQUAL
9890: IFTRUE 9894
9892: GO 9968
9894: POP
// begin DeselectUnits ( Kurin ) ;
9895: LD_EXP 56
9899: PPUSH
9900: CALL_OW 491
// SelectUnits ( Burlak ) ;
9904: LD_EXP 44
9908: PPUSH
9909: CALL_OW 490
// Say ( Burlak , D6b-Bur-1 ) ;
9913: LD_EXP 44
9917: PPUSH
9918: LD_STRING D6b-Bur-1
9920: PPUSH
9921: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
9925: LD_EXP 56
9929: PPUSH
9930: LD_STRING D6b-Kur-1
9932: PPUSH
9933: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
9937: LD_EXP 44
9941: PPUSH
9942: LD_STRING D6b-Bur-2
9944: PPUSH
9945: CALL_OW 88
// timeToArrive = 2 2$00 ;
9949: LD_ADDR_EXP 23
9953: PUSH
9954: LD_INT 4200
9956: ST_TO_ADDR
// meetNearOmicronBase = true ;
9957: LD_ADDR_EXP 27
9961: PUSH
9962: LD_INT 1
9964: ST_TO_ADDR
// disable ;
9965: DISABLE
// end ; 3 :
9966: GO 9998
9968: LD_INT 3
9970: DOUBLE
9971: EQUAL
9972: IFTRUE 9976
9974: GO 9997
9976: POP
// begin DeselectUnits ( Kurin ) ;
9977: LD_EXP 56
9981: PPUSH
9982: CALL_OW 491
// SelectUnits ( Burlak ) ;
9986: LD_EXP 44
9990: PPUSH
9991: CALL_OW 490
// end ; end ;
9995: GO 9998
9997: POP
// end ; enable ;
9998: ENABLE
// end ;
9999: END
// export enoughVehsForKirov ; every 0 0$1 trigger timeToPrepareAttack < 0 0$01 do
10000: LD_EXP 89
10004: PUSH
10005: LD_INT 35
10007: LESS
10008: IFFALSE 10244
10010: GO 10012
10012: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
10013: LD_EXP 56
10017: PPUSH
10018: CALL_OW 87
// InGameOn ;
10022: CALL_OW 8
// DialogueOn ;
10026: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
10030: LD_EXP 56
10034: PPUSH
10035: LD_STRING D5-Kur-1
10037: PPUSH
10038: CALL_OW 94
// case Query ( QVehicles ) of 1 :
10042: LD_STRING QVehicles
10044: PPUSH
10045: CALL_OW 97
10049: PUSH
10050: LD_INT 1
10052: DOUBLE
10053: EQUAL
10054: IFTRUE 10058
10056: GO 10109
10058: POP
// begin SayRadio ( Burlak , D6a-Bur-1 ) ;
10059: LD_EXP 44
10063: PPUSH
10064: LD_STRING D6a-Bur-1
10066: PPUSH
10067: CALL_OW 94
// SayRadio ( Kurin , D6a-Kur-1 ) ;
10071: LD_EXP 56
10075: PPUSH
10076: LD_STRING D6a-Kur-1
10078: PPUSH
10079: CALL_OW 94
// meetNearOmicronBase = true ;
10083: LD_ADDR_EXP 27
10087: PUSH
10088: LD_INT 1
10090: ST_TO_ADDR
// kurinCheckVehicles = true ;
10091: LD_ADDR_EXP 26
10095: PUSH
10096: LD_INT 1
10098: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
10099: LD_ADDR_EXP 23
10103: PUSH
10104: LD_INT 4200
10106: ST_TO_ADDR
// end ; 2 :
10107: GO 10236
10109: LD_INT 2
10111: DOUBLE
10112: EQUAL
10113: IFTRUE 10117
10115: GO 10164
10117: POP
// begin SayRadio ( Burlak , D6b-Bur-1 ) ;
10118: LD_EXP 44
10122: PPUSH
10123: LD_STRING D6b-Bur-1
10125: PPUSH
10126: CALL_OW 94
// SayRadio ( Kurin , D6b-Kur-1 ) ;
10130: LD_EXP 56
10134: PPUSH
10135: LD_STRING D6b-Kur-1
10137: PPUSH
10138: CALL_OW 94
// SayRadio ( Burlak , D6b-Bur-2 ) ;
10142: LD_EXP 44
10146: PPUSH
10147: LD_STRING D6b-Bur-2
10149: PPUSH
10150: CALL_OW 94
// meetNearOmicronBase = true ;
10154: LD_ADDR_EXP 27
10158: PUSH
10159: LD_INT 1
10161: ST_TO_ADDR
// end ; 3 :
10162: GO 10236
10164: LD_INT 3
10166: DOUBLE
10167: EQUAL
10168: IFTRUE 10172
10170: GO 10235
10172: POP
// begin SayRadio ( Burlak , D6c-Bur-1 ) ;
10173: LD_EXP 44
10177: PPUSH
10178: LD_STRING D6c-Bur-1
10180: PPUSH
10181: CALL_OW 94
// SayRadio ( Kurin , D6c-Kur-1 ) ;
10185: LD_EXP 56
10189: PPUSH
10190: LD_STRING D6c-Kur-1
10192: PPUSH
10193: CALL_OW 94
// SayRadio ( Burlak , D6c-Bur-2 ) ;
10197: LD_EXP 44
10201: PPUSH
10202: LD_STRING D6c-Bur-2
10204: PPUSH
10205: CALL_OW 94
// kurinGiveMoreTime = true ;
10209: LD_ADDR_EXP 21
10213: PUSH
10214: LD_INT 1
10216: ST_TO_ADDR
// kurinOpinion = 0 ;
10217: LD_ADDR_EXP 10
10221: PUSH
10222: LD_INT 0
10224: ST_TO_ADDR
// counterIndex = 4 ;
10225: LD_ADDR_EXP 86
10229: PUSH
10230: LD_INT 4
10232: ST_TO_ADDR
// end ; end ;
10233: GO 10236
10235: POP
// InGameOff ;
10236: CALL_OW 9
// DialogueOff ;
10240: CALL_OW 7
// end ;
10244: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
10245: LD_EXP 22
10249: PUSH
10250: LD_INT 35
10252: LESS
10253: PUSH
10254: LD_EXP 21
10258: AND
10259: IFFALSE 10300
10261: GO 10263
10263: DISABLE
// begin DialogueOn ;
10264: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
10268: LD_EXP 56
10272: PPUSH
10273: LD_STRING D6c-Kur-2
10275: PPUSH
10276: CALL_OW 94
// DialogueOff ;
10280: CALL_OW 7
// timeToArrive = 2 2$00 ;
10284: LD_ADDR_EXP 23
10288: PUSH
10289: LD_INT 4200
10291: ST_TO_ADDR
// meetNearOmicronBase = true ;
10292: LD_ADDR_EXP 27
10296: PUSH
10297: LD_INT 1
10299: ST_TO_ADDR
// end ;
10300: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs , beriaUnits , freeVehs ;
10301: LD_EXP 27
10305: IFFALSE 10804
10307: GO 10309
10309: DISABLE
10310: LD_INT 0
10312: PPUSH
10313: PPUSH
10314: PPUSH
10315: PPUSH
10316: PPUSH
10317: PPUSH
10318: PPUSH
// begin mechs = [ ] ;
10319: LD_ADDR_VAR 0 3
10323: PUSH
10324: EMPTY
10325: ST_TO_ADDR
// vehs = [ ] ;
10326: LD_ADDR_VAR 0 4
10330: PUSH
10331: EMPTY
10332: ST_TO_ADDR
// freeVehs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) - FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
10333: LD_ADDR_VAR 0 7
10337: PUSH
10338: LD_INT 22
10340: PUSH
10341: LD_INT 3
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: LD_INT 21
10350: PUSH
10351: LD_INT 2
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: LD_INT 23
10360: PUSH
10361: LD_INT 3
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: LD_INT 3
10370: PUSH
10371: LD_INT 34
10373: PUSH
10374: LD_INT 51
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: PPUSH
10391: CALL_OW 69
10395: PUSH
10396: LD_INT 22
10398: PUSH
10399: LD_INT 3
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PUSH
10406: LD_INT 21
10408: PUSH
10409: LD_INT 1
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PPUSH
10420: CALL_OW 69
10424: MINUS
10425: ST_TO_ADDR
// haveVehs = 0 ;
10426: LD_ADDR_VAR 0 5
10430: PUSH
10431: LD_INT 0
10433: ST_TO_ADDR
// uc_side = 6 ;
10434: LD_ADDR_OWVAR 20
10438: PUSH
10439: LD_INT 6
10441: ST_TO_ADDR
// uc_nation = 3 ;
10442: LD_ADDR_OWVAR 21
10446: PUSH
10447: LD_INT 3
10449: ST_TO_ADDR
// for i := 1 to freeVehs do
10450: LD_ADDR_VAR 0 1
10454: PUSH
10455: DOUBLE
10456: LD_INT 1
10458: DEC
10459: ST_TO_ADDR
10460: LD_VAR 0 7
10464: PUSH
10465: FOR_TO
10466: IFFALSE 10537
// begin PrepareMechanic ( false , 2 ) ;
10468: LD_INT 0
10470: PPUSH
10471: LD_INT 2
10473: PPUSH
10474: CALL_OW 383
// mech = CreateHuman ;
10478: LD_ADDR_VAR 0 2
10482: PUSH
10483: CALL_OW 44
10487: ST_TO_ADDR
// mechs = mechs ^ mech ;
10488: LD_ADDR_VAR 0 3
10492: PUSH
10493: LD_VAR 0 3
10497: PUSH
10498: LD_VAR 0 2
10502: ADD
10503: ST_TO_ADDR
// PlaceUnitArea ( mech , kirovSpawn , false ) ;
10504: LD_VAR 0 2
10508: PPUSH
10509: LD_INT 4
10511: PPUSH
10512: LD_INT 0
10514: PPUSH
10515: CALL_OW 49
// ComExitBuilding ( mech ) ;
10519: LD_VAR 0 2
10523: PPUSH
10524: CALL_OW 122
// wait ( 0 0$1 ) ;
10528: LD_INT 35
10530: PPUSH
10531: CALL_OW 67
// end ;
10535: GO 10465
10537: POP
10538: POP
// if enoughVehsForKirov and freeVehs > 0 then
10539: LD_EXP 92
10543: PUSH
10544: LD_VAR 0 7
10548: PUSH
10549: LD_INT 0
10551: GREATER
10552: AND
10553: IFFALSE 10771
// begin vehs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) ;
10555: LD_ADDR_VAR 0 4
10559: PUSH
10560: LD_INT 22
10562: PUSH
10563: LD_INT 3
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: PUSH
10570: LD_INT 21
10572: PUSH
10573: LD_INT 2
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: PUSH
10580: LD_INT 23
10582: PUSH
10583: LD_INT 3
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PUSH
10590: LD_INT 3
10592: PUSH
10593: LD_INT 34
10595: PUSH
10596: LD_INT 51
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: PUSH
10607: LD_INT 3
10609: PUSH
10610: LD_INT 59
10612: PUSH
10613: EMPTY
10614: LIST
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: PPUSH
10627: CALL_OW 69
10631: ST_TO_ADDR
// for i := 1 to freeVehs do
10632: LD_ADDR_VAR 0 1
10636: PUSH
10637: DOUBLE
10638: LD_INT 1
10640: DEC
10641: ST_TO_ADDR
10642: LD_VAR 0 7
10646: PUSH
10647: FOR_TO
10648: IFFALSE 10674
// kirovAttackVehicles = kirovAttackVehicles ^ vehs [ i ] ;
10650: LD_ADDR_EXP 91
10654: PUSH
10655: LD_EXP 91
10659: PUSH
10660: LD_VAR 0 4
10664: PUSH
10665: LD_VAR 0 1
10669: ARRAY
10670: ADD
10671: ST_TO_ADDR
10672: GO 10647
10674: POP
10675: POP
// SetSide ( kirovAttackVehicles , 6 ) ;
10676: LD_EXP 91
10680: PPUSH
10681: LD_INT 6
10683: PPUSH
10684: CALL_OW 235
// produceMoreVehicles = true ;
10688: LD_ADDR_EXP 24
10692: PUSH
10693: LD_INT 1
10695: ST_TO_ADDR
// for i := 1 to freeVehs do
10696: LD_ADDR_VAR 0 1
10700: PUSH
10701: DOUBLE
10702: LD_INT 1
10704: DEC
10705: ST_TO_ADDR
10706: LD_VAR 0 7
10710: PUSH
10711: FOR_TO
10712: IFFALSE 10742
// AddComEnterUnit ( mechs [ i ] , kirovAttackVehicles [ i ] ) ;
10714: LD_VAR 0 3
10718: PUSH
10719: LD_VAR 0 1
10723: ARRAY
10724: PPUSH
10725: LD_EXP 91
10729: PUSH
10730: LD_VAR 0 1
10734: ARRAY
10735: PPUSH
10736: CALL_OW 180
10740: GO 10711
10742: POP
10743: POP
// if kurinCheckVehicles and not kurinOpinion = 0 then
10744: LD_EXP 26
10748: PUSH
10749: LD_EXP 10
10753: PUSH
10754: LD_INT 0
10756: EQUAL
10757: NOT
10758: AND
10759: IFFALSE 10769
// kurinOpinion = 1 ;
10761: LD_ADDR_EXP 10
10765: PUSH
10766: LD_INT 1
10768: ST_TO_ADDR
// end else
10769: GO 10804
// begin if kurinCheckVehicles then
10771: LD_EXP 26
10775: IFFALSE 10804
// begin DialogueOn ;
10777: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
10781: LD_EXP 56
10785: PPUSH
10786: LD_STRING D6d-Kur-1
10788: PPUSH
10789: CALL_OW 94
// DialogueOff ;
10793: CALL_OW 7
// YouLost ( Vehicles ) ;
10797: LD_STRING Vehicles
10799: PPUSH
10800: CALL_OW 104
// end ; end ; end ;
10804: PPOPN 7
10806: END
// every 0 0$1 trigger meetNearOmicronBase do var i ;
10807: LD_EXP 27
10811: IFFALSE 10950
10813: GO 10815
10815: DISABLE
10816: LD_INT 0
10818: PPUSH
// begin spawnCrates = false ;
10819: LD_ADDR_EXP 13
10823: PUSH
10824: LD_INT 0
10826: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
10827: LD_INT 6
10829: PPUSH
10830: LD_INT 1
10832: PPUSH
10833: LD_INT 2
10835: PPUSH
10836: LD_INT 1
10838: PPUSH
10839: CALL_OW 80
// SetRestrict ( b_depot , 3 , false ) ;
10843: LD_INT 0
10845: PPUSH
10846: LD_INT 3
10848: PPUSH
10849: LD_INT 0
10851: PPUSH
10852: CALL_OW 324
// ChangeMissionObjectives ( M3a ) ;
10856: LD_STRING M3a
10858: PPUSH
10859: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
10863: LD_STRING M5
10865: PPUSH
10866: CALL_OW 337
// SetAreaMapShow ( MeetArea , 1 ) ;
10870: LD_INT 14
10872: PPUSH
10873: LD_INT 1
10875: PPUSH
10876: CALL_OW 424
// for i := 1 to kirovAttackVehicles do
10880: LD_ADDR_VAR 0 1
10884: PUSH
10885: DOUBLE
10886: LD_INT 1
10888: DEC
10889: ST_TO_ADDR
10890: LD_EXP 91
10894: PUSH
10895: FOR_TO
10896: IFFALSE 10921
// ComMoveXY ( kirovAttackVehicles [ i ] , 75 , 38 ) ;
10898: LD_EXP 91
10902: PUSH
10903: LD_VAR 0 1
10907: ARRAY
10908: PPUSH
10909: LD_INT 75
10911: PPUSH
10912: LD_INT 38
10914: PPUSH
10915: CALL_OW 111
10919: GO 10895
10921: POP
10922: POP
// counterIndex = 2 ;
10923: LD_ADDR_EXP 86
10927: PUSH
10928: LD_INT 2
10930: ST_TO_ADDR
// if not kurinOpinion = 0 then
10931: LD_EXP 10
10935: PUSH
10936: LD_INT 0
10938: EQUAL
10939: NOT
10940: IFFALSE 10950
// kurinOpinion = 1 ;
10942: LD_ADDR_EXP 10
10946: PUSH
10947: LD_INT 1
10949: ST_TO_ADDR
// end ;
10950: PPOPN 1
10952: END
// every 0 0$1 trigger ( timeToArrive <= 0 and counterIndex = 2 ) do
10953: LD_EXP 23
10957: PUSH
10958: LD_INT 0
10960: LESSEQUAL
10961: PUSH
10962: LD_EXP 86
10966: PUSH
10967: LD_INT 2
10969: EQUAL
10970: AND
10971: IFFALSE 11020
10973: GO 10975
10975: DISABLE
// begin DialogueOn ;
10976: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
10980: LD_EXP 56
10984: PPUSH
10985: LD_STRING D7a-Kur-1
10987: PPUSH
10988: CALL_OW 94
// DialogueOff ;
10992: CALL_OW 7
// counterIndex = 3 ;
10996: LD_ADDR_EXP 86
11000: PUSH
11001: LD_INT 3
11003: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
11004: LD_ADDR_EXP 23
11008: PUSH
11009: LD_INT 4200
11011: ST_TO_ADDR
// kurinOpinion = 0 ;
11012: LD_ADDR_EXP 10
11016: PUSH
11017: LD_INT 0
11019: ST_TO_ADDR
// end ;
11020: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 3 do
11021: LD_EXP 23
11025: PUSH
11026: LD_INT 35
11028: LESS
11029: PUSH
11030: LD_EXP 86
11034: PUSH
11035: LD_INT 3
11037: EQUAL
11038: AND
11039: IFFALSE 11051
11041: GO 11043
11043: DISABLE
// YouLost ( Delay ) ;
11044: LD_STRING Delay
11046: PPUSH
11047: CALL_OW 104
11051: END
// export startTheAttack ; every 0 0$1 trigger meetNearOmicronBase and FilterUnitsExceptArea ( MeetArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
11052: LD_EXP 27
11056: PUSH
11057: LD_INT 14
11059: PPUSH
11060: LD_INT 22
11062: PUSH
11063: LD_INT 3
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: LD_INT 21
11072: PUSH
11073: LD_INT 1
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PPUSH
11084: CALL_OW 71
11088: PUSH
11089: LD_INT 0
11091: EQUAL
11092: AND
11093: IFFALSE 11182
11095: GO 11097
11097: DISABLE
// begin counterEnable = false ;
11098: LD_ADDR_EXP 85
11102: PUSH
11103: LD_INT 0
11105: ST_TO_ADDR
// startTheAttack = true ;
11106: LD_ADDR_EXP 93
11110: PUSH
11111: LD_INT 1
11113: ST_TO_ADDR
// Display_strings = [ ] ;
11114: LD_ADDR_OWVAR 47
11118: PUSH
11119: EMPTY
11120: ST_TO_ADDR
// SetAreaMapShow ( MeetArea , 0 ) ;
11121: LD_INT 14
11123: PPUSH
11124: LD_INT 0
11126: PPUSH
11127: CALL_OW 424
// canExitBattlefield = false ;
11131: LD_ADDR_EXP 32
11135: PUSH
11136: LD_INT 0
11138: ST_TO_ADDR
// DialogueOn ;
11139: CALL_OW 6
// SayRadio ( Burlak , D7-Bur-1 ) ;
11143: LD_EXP 44
11147: PPUSH
11148: LD_STRING D7-Bur-1
11150: PPUSH
11151: CALL_OW 94
// SayRadio ( Kurin , D7-Kur-1 ) ;
11155: LD_EXP 56
11159: PPUSH
11160: LD_STRING D7-Kur-1
11162: PPUSH
11163: CALL_OW 94
// DialogueOff ;
11167: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
11171: LD_STRING M5a
11173: PPUSH
11174: CALL_OW 337
// KirovAttackOmicron ;
11178: CALL 2537 0 0
// end ;
11182: END
// every 0 0$1 trigger ( UnitFilter ( kirovAttackVehicles [ KirovCurrentAttacker ] , [ f_not , [ f_lives , 700 ] ] ) and startTheAttack ) or not IsBusy ( kirovAttackVehicles [ KirovCurrentAttacker ] ) do var i ;
11183: LD_EXP 91
11187: PUSH
11188: LD_EXP 43
11192: ARRAY
11193: PPUSH
11194: LD_INT 3
11196: PUSH
11197: LD_INT 24
11199: PUSH
11200: LD_INT 700
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: PPUSH
11211: CALL_OW 72
11215: PUSH
11216: LD_EXP 93
11220: AND
11221: PUSH
11222: LD_EXP 91
11226: PUSH
11227: LD_EXP 43
11231: ARRAY
11232: PPUSH
11233: CALL_OW 315
11237: NOT
11238: OR
11239: IFFALSE 11343
11241: GO 11243
11243: DISABLE
11244: LD_INT 0
11246: PPUSH
// begin enable ;
11247: ENABLE
// if GetLives ( kirovAttackVehicles [ KirovCurrentAttacker ] ) <= 700 then
11248: LD_EXP 91
11252: PUSH
11253: LD_EXP 43
11257: ARRAY
11258: PPUSH
11259: CALL_OW 256
11263: PUSH
11264: LD_INT 700
11266: LESSEQUAL
11267: IFFALSE 11343
// begin ComMoveToArea ( kirovAttackVehicles [ KirovCurrentAttacker ] , MeetAreaRetreat ) ;
11269: LD_EXP 91
11273: PUSH
11274: LD_EXP 43
11278: ARRAY
11279: PPUSH
11280: LD_INT 16
11282: PPUSH
11283: CALL_OW 113
// AddComRepairVehicleAndReturn ( IsDrivenBy ( kirovAttackVehicles [ KirovCurrentAttacker ] ) ) ;
11287: LD_EXP 91
11291: PUSH
11292: LD_EXP 43
11296: ARRAY
11297: PPUSH
11298: CALL_OW 311
11302: PPUSH
11303: CALL 51391 0 1
// SetFuel ( kirovAttackVehicles [ KirovCurrentAttacker ] , 100 ) ;
11307: LD_EXP 91
11311: PUSH
11312: LD_EXP 43
11316: ARRAY
11317: PPUSH
11318: LD_INT 100
11320: PPUSH
11321: CALL_OW 240
// KirovCurrentAttacker = KirovCurrentAttacker + 1 ;
11325: LD_ADDR_EXP 43
11329: PUSH
11330: LD_EXP 43
11334: PUSH
11335: LD_INT 1
11337: PLUS
11338: ST_TO_ADDR
// KirovAttackOmicron ;
11339: CALL 2537 0 0
// end ; end ;
11343: PPOPN 1
11345: END
// export omicronNotDestroyed ; every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 5 or timeToArabAttack = ticks do var i , tmpUs , tmpRu , building , beriaBuildings , nearBuilding , turrets , nearTurrets , emptyVehicles ;
11346: LD_INT 22
11348: PUSH
11349: LD_INT 1
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: PUSH
11356: LD_INT 21
11358: PUSH
11359: LD_INT 1
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: PPUSH
11370: CALL_OW 69
11374: PUSH
11375: LD_INT 5
11377: LESS
11378: PUSH
11379: LD_EXP 90
11383: PUSH
11384: LD_EXP 87
11388: EQUAL
11389: OR
11390: IFFALSE 12133
11392: GO 11394
11394: DISABLE
11395: LD_INT 0
11397: PPUSH
11398: PPUSH
11399: PPUSH
11400: PPUSH
11401: PPUSH
11402: PPUSH
11403: PPUSH
11404: PPUSH
11405: PPUSH
// begin omicronSurrender = true ;
11406: LD_ADDR_EXP 31
11410: PUSH
11411: LD_INT 1
11413: ST_TO_ADDR
// canExitBattlefield = true ;
11414: LD_ADDR_EXP 32
11418: PUSH
11419: LD_INT 1
11421: ST_TO_ADDR
// endCutscene = true ;
11422: LD_ADDR_EXP 38
11426: PUSH
11427: LD_INT 1
11429: ST_TO_ADDR
// if timeToArabAttack = 0 and not IsDead ( omikronDepot ) then
11430: LD_EXP 90
11434: PUSH
11435: LD_INT 0
11437: EQUAL
11438: PUSH
11439: LD_EXP 74
11443: PPUSH
11444: CALL_OW 301
11448: NOT
11449: AND
11450: IFFALSE 11462
// omicronNotDestroyed = true else
11452: LD_ADDR_EXP 94
11456: PUSH
11457: LD_INT 1
11459: ST_TO_ADDR
11460: GO 11470
// omicronNotDestroyed = false ;
11462: LD_ADDR_EXP 94
11466: PUSH
11467: LD_INT 0
11469: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , false ) ;
11470: LD_INT 1
11472: PPUSH
11473: LD_INT 3
11475: PPUSH
11476: LD_INT 1
11478: PPUSH
11479: LD_INT 0
11481: PPUSH
11482: CALL_OW 80
// SetAttitude ( 2 , 3 , att_friend , true ) ;
11486: LD_INT 2
11488: PPUSH
11489: LD_INT 3
11491: PPUSH
11492: LD_INT 1
11494: PPUSH
11495: LD_INT 1
11497: PPUSH
11498: CALL_OW 80
// CenterNowOnUnits ( Burlak ) ;
11502: LD_EXP 44
11506: PPUSH
11507: CALL_OW 87
// SayRadioNoFace ( Scholtze2 , D8-Sol1-1 ) ;
11511: LD_EXP 69
11515: PPUSH
11516: LD_STRING D8-Sol1-1
11518: PPUSH
11519: CALL_OW 586
// if IsOk ( Kovalyuk ) then
11523: LD_EXP 47
11527: PPUSH
11528: CALL_OW 302
11532: IFFALSE 11546
// Say ( Kovalyuk , D8-Kov-1 ) ;
11534: LD_EXP 47
11538: PPUSH
11539: LD_STRING D8-Kov-1
11541: PPUSH
11542: CALL_OW 88
// SayRadio ( Bukov , D8-RSol1-1 ) ;
11546: LD_EXP 67
11550: PPUSH
11551: LD_STRING D8-RSol1-1
11553: PPUSH
11554: CALL_OW 94
// if IsOk ( Gnyevko ) then
11558: LD_EXP 45
11562: PPUSH
11563: CALL_OW 302
11567: IFFALSE 11581
// Say ( Gnyevko , D8-Gny-1 ) ;
11569: LD_EXP 45
11573: PPUSH
11574: LD_STRING D8-Gny-1
11576: PPUSH
11577: CALL_OW 88
// tmpRu = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov ] ;
11581: LD_ADDR_VAR 0 3
11585: PUSH
11586: LD_INT 22
11588: PUSH
11589: LD_INT 3
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: PUSH
11596: LD_INT 21
11598: PUSH
11599: LD_INT 1
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: PUSH
11606: LD_INT 26
11608: PUSH
11609: LD_INT 1
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: LIST
11620: PPUSH
11621: CALL_OW 69
11625: PUSH
11626: LD_EXP 44
11630: PUSH
11631: LD_EXP 45
11635: PUSH
11636: LD_EXP 47
11640: PUSH
11641: LD_EXP 48
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: DIFF
11652: ST_TO_ADDR
// Say ( tmpRu [ 1 ] , D8-RSol2-1 ) ;
11653: LD_VAR 0 3
11657: PUSH
11658: LD_INT 1
11660: ARRAY
11661: PPUSH
11662: LD_STRING D8-RSol2-1
11664: PPUSH
11665: CALL_OW 88
// DialogueOff ;
11669: CALL_OW 7
// music_nat = nation_arabian ;
11673: LD_ADDR_OWVAR 71
11677: PUSH
11678: LD_INT 2
11680: ST_TO_ADDR
// music_class = music_combat ;
11681: LD_ADDR_OWVAR 72
11685: PUSH
11686: LD_INT 1
11688: ST_TO_ADDR
// game_speed = 4 ;
11689: LD_ADDR_OWVAR 65
11693: PUSH
11694: LD_INT 4
11696: ST_TO_ADDR
// DialogueOn ;
11697: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-1 ) ;
11701: LD_EXP 65
11705: PPUSH
11706: LD_STRING D9-Gri-1
11708: PPUSH
11709: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
11713: LD_EXP 56
11717: PPUSH
11718: LD_STRING D9-Kur-1
11720: PPUSH
11721: CALL_OW 94
// DialogueOff ;
11725: CALL_OW 7
// CenterOnXY ( 162 , 107 ) ;
11729: LD_INT 162
11731: PPUSH
11732: LD_INT 107
11734: PPUSH
11735: CALL_OW 84
// wait ( 2 2$0 ) ;
11739: LD_INT 4200
11741: PPUSH
11742: CALL_OW 67
// DialogueOn ;
11746: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-2 ) ;
11750: LD_EXP 65
11754: PPUSH
11755: LD_STRING D9-Gri-2
11757: PPUSH
11758: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
11762: LD_EXP 56
11766: PPUSH
11767: LD_STRING D9-Kur-2
11769: PPUSH
11770: CALL_OW 94
// wait ( 1 1$0 ) ;
11774: LD_INT 2100
11776: PPUSH
11777: CALL_OW 67
// SayRadio ( Grishko , D9-Gri-3 ) ;
11781: LD_EXP 65
11785: PPUSH
11786: LD_STRING D9-Gri-3
11788: PPUSH
11789: CALL_OW 94
// DialogueOff ;
11793: CALL_OW 7
// CenterNowOnUnits ( Kurin ) ;
11797: LD_EXP 56
11801: PPUSH
11802: CALL_OW 87
// SayRadio ( Kurin , D9-Kur-3 ) ;
11806: LD_EXP 56
11810: PPUSH
11811: LD_STRING D9-Kur-3
11813: PPUSH
11814: CALL_OW 94
// DialogueOn ;
11818: CALL_OW 6
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11822: LD_EXP 56
11826: PPUSH
11827: LD_STRING D9a-Kur-1
11829: PPUSH
11830: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11834: LD_EXP 44
11838: PPUSH
11839: LD_STRING D9a-Bur-1
11841: PPUSH
11842: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11846: LD_EXP 56
11850: PPUSH
11851: LD_STRING D9a-Kur-2
11853: PPUSH
11854: CALL_OW 94
// DialogueOff ;
11858: CALL_OW 7
// wait ( 0 0$1 ) ;
11862: LD_INT 35
11864: PPUSH
11865: CALL_OW 67
// ComMoveUnit ( Popov , Burlak ) ;
11869: LD_EXP 57
11873: PPUSH
11874: LD_EXP 44
11878: PPUSH
11879: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
11883: LD_INT 35
11885: PPUSH
11886: CALL_OW 67
// until GetDistUnits ( Burlak , Popov ) < 8 or ( IsInUnit ( Burlak ) < 8 and IsInUnit ( Burlak ) ) ;
11890: LD_EXP 44
11894: PPUSH
11895: LD_EXP 57
11899: PPUSH
11900: CALL_OW 296
11904: PUSH
11905: LD_INT 8
11907: LESS
11908: PUSH
11909: LD_EXP 44
11913: PPUSH
11914: CALL_OW 310
11918: PUSH
11919: LD_INT 8
11921: LESS
11922: PUSH
11923: LD_EXP 44
11927: PPUSH
11928: CALL_OW 310
11932: AND
11933: OR
11934: IFFALSE 11883
// if IsInUnit ( Burlak ) then
11936: LD_EXP 44
11940: PPUSH
11941: CALL_OW 310
11945: IFFALSE 11963
// begin ComExitVehicle ( Burlak ) ;
11947: LD_EXP 44
11951: PPUSH
11952: CALL_OW 121
// wait ( 0 0$1 ) ;
11956: LD_INT 35
11958: PPUSH
11959: CALL_OW 67
// end ; CenterNowOnUnits ( [ Burlak , Popov ] ) ;
11963: LD_EXP 44
11967: PUSH
11968: LD_EXP 57
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PPUSH
11977: CALL_OW 87
// ComTurnUnit ( Burlak , Popov ) ;
11981: LD_EXP 44
11985: PPUSH
11986: LD_EXP 57
11990: PPUSH
11991: CALL_OW 119
// ComTurnUnit ( Popov , Burlak ) ;
11995: LD_EXP 57
11999: PPUSH
12000: LD_EXP 44
12004: PPUSH
12005: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
12009: LD_EXP 44
12013: PPUSH
12014: LD_STRING D10a-Bur-1
12016: PPUSH
12017: CALL_OW 88
// Say ( Popov , D10a-Pop-1 ) ;
12021: LD_EXP 57
12025: PPUSH
12026: LD_STRING D10a-Pop-1
12028: PPUSH
12029: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
12033: LD_EXP 44
12037: PPUSH
12038: LD_STRING D10a-Bur-2
12040: PPUSH
12041: CALL_OW 88
// Say ( Popov , D10a-Pop-2 ) ;
12045: LD_EXP 57
12049: PPUSH
12050: LD_STRING D10a-Pop-2
12052: PPUSH
12053: CALL_OW 88
// Say ( Burlak , D10a-Bur-3 ) ;
12057: LD_EXP 44
12061: PPUSH
12062: LD_STRING D10a-Bur-3
12064: PPUSH
12065: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
12069: LD_EXP 57
12073: PPUSH
12074: LD_STRING D10a-Pop-3
12076: PPUSH
12077: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
12081: LD_EXP 44
12085: PPUSH
12086: LD_STRING D10a-Bur-4
12088: PPUSH
12089: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
12093: LD_EXP 57
12097: PPUSH
12098: LD_STRING D10a-Pop-4
12100: PPUSH
12101: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
12105: LD_EXP 44
12109: PPUSH
12110: LD_STRING D10a-Bur-5
12112: PPUSH
12113: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
12117: LD_EXP 57
12121: PPUSH
12122: LD_STRING D10a-Pop-5
12124: PPUSH
12125: CALL_OW 88
// EndMission ;
12129: CALL 12136 0 0
// end ;
12133: PPOPN 9
12135: END
// export function EndMission ; begin
12136: LD_INT 0
12138: PPUSH
// if enoughVehsForKirov then
12139: LD_EXP 92
12143: IFFALSE 12157
// AddMedal ( Surplus , 1 ) else
12145: LD_STRING Surplus
12147: PPUSH
12148: LD_INT 1
12150: PPUSH
12151: CALL_OW 101
12155: GO 12187
// if produceOnlyForYou then
12157: LD_EXP 25
12161: IFFALSE 12176
// AddMedal ( Surplus , - 1 ) else
12163: LD_STRING Surplus
12165: PPUSH
12166: LD_INT 1
12168: NEG
12169: PPUSH
12170: CALL_OW 101
12174: GO 12187
// AddMedal ( Surplus , - 2 ) ;
12176: LD_STRING Surplus
12178: PPUSH
12179: LD_INT 2
12181: NEG
12182: PPUSH
12183: CALL_OW 101
// if scholtzeSaved and IsOK ( Scholtze ) then
12187: LD_EXP 15
12191: PUSH
12192: LD_EXP 68
12196: PPUSH
12197: CALL_OW 302
12201: AND
12202: IFFALSE 12216
// AddMedal ( Scholtze , 1 ) else
12204: LD_STRING Scholtze
12206: PPUSH
12207: LD_INT 1
12209: PPUSH
12210: CALL_OW 101
12214: GO 12227
// AddMedal ( Scholtze , - 1 ) ;
12216: LD_STRING Scholtze
12218: PPUSH
12219: LD_INT 1
12221: NEG
12222: PPUSH
12223: CALL_OW 101
// if omicronNotDestroyed = false then
12227: LD_EXP 94
12231: PUSH
12232: LD_INT 0
12234: EQUAL
12235: IFFALSE 12249
// AddMedal ( OmiRun , 1 ) else
12237: LD_STRING OmiRun
12239: PPUSH
12240: LD_INT 1
12242: PPUSH
12243: CALL_OW 101
12247: GO 12260
// AddMedal ( OmiRun , - 1 ) ;
12249: LD_STRING OmiRun
12251: PPUSH
12252: LD_INT 1
12254: NEG
12255: PPUSH
12256: CALL_OW 101
// GiveMedals ( Main ) ;
12260: LD_STRING Main
12262: PPUSH
12263: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
12267: LD_INT 22
12269: PUSH
12270: LD_INT 3
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: LD_INT 23
12279: PUSH
12280: LD_INT 3
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PUSH
12287: LD_INT 21
12289: PUSH
12290: LD_INT 1
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: LIST
12301: PPUSH
12302: CALL_OW 69
12306: PPUSH
12307: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
12311: LD_EXP 44
12315: PPUSH
12316: LD_EXP 5
12320: PUSH
12321: LD_STRING Burlak
12323: STR
12324: PPUSH
12325: CALL_OW 38
// if IsLive ( Gnyevko ) then
12329: LD_EXP 45
12333: PPUSH
12334: CALL_OW 300
12338: IFFALSE 12358
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
12340: LD_EXP 45
12344: PPUSH
12345: LD_EXP 5
12349: PUSH
12350: LD_STRING Gnyevko
12352: STR
12353: PPUSH
12354: CALL_OW 38
// if IsLive ( Kovalyuk ) then
12358: LD_EXP 47
12362: PPUSH
12363: CALL_OW 300
12367: IFFALSE 12387
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
12369: LD_EXP 47
12373: PPUSH
12374: LD_EXP 5
12378: PUSH
12379: LD_STRING Kovalyuk
12381: STR
12382: PPUSH
12383: CALL_OW 38
// if IsLive ( Belkov ) then
12387: LD_EXP 48
12391: PPUSH
12392: CALL_OW 300
12396: IFFALSE 12416
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
12398: LD_EXP 48
12402: PPUSH
12403: LD_EXP 5
12407: PUSH
12408: LD_STRING Belkov
12410: STR
12411: PPUSH
12412: CALL_OW 38
// if IsLive ( Kirilenkova ) then
12416: LD_EXP 46
12420: PPUSH
12421: CALL_OW 300
12425: IFFALSE 12445
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
12427: LD_EXP 46
12431: PPUSH
12432: LD_EXP 5
12436: PUSH
12437: LD_STRING Kirilenkova
12439: STR
12440: PPUSH
12441: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] , currentMissionPrefix & burlakTeam ) ;
12445: LD_INT 22
12447: PUSH
12448: LD_INT 3
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: PUSH
12455: LD_INT 23
12457: PUSH
12458: LD_INT 3
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PUSH
12465: LD_INT 21
12467: PUSH
12468: LD_INT 1
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: LIST
12479: PPUSH
12480: CALL_OW 69
12484: PUSH
12485: LD_EXP 44
12489: PUSH
12490: LD_EXP 45
12494: PUSH
12495: LD_EXP 47
12499: PUSH
12500: LD_EXP 48
12504: PUSH
12505: LD_EXP 46
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: DIFF
12517: PPUSH
12518: LD_EXP 5
12522: PUSH
12523: LD_STRING burlakTeam
12525: STR
12526: PPUSH
12527: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff ( [ Kurin ] ) , currentMissionPrefix & kirovTeam ) ;
12531: LD_INT 22
12533: PUSH
12534: LD_INT 6
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 23
12543: PUSH
12544: LD_INT 3
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: LD_INT 21
12553: PUSH
12554: LD_INT 1
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: LIST
12565: PPUSH
12566: CALL_OW 69
12570: PUSH
12571: LD_EXP 56
12575: PUSH
12576: EMPTY
12577: LIST
12578: DIFF
12579: PPUSH
12580: LD_EXP 5
12584: PUSH
12585: LD_STRING kirovTeam
12587: STR
12588: PPUSH
12589: CALL_OW 38
// SaveVariable ( kurinOpinion , 03_KurinOpinion ) ;
12593: LD_EXP 10
12597: PPUSH
12598: LD_STRING 03_KurinOpinion
12600: PPUSH
12601: CALL_OW 39
// YouWin ;
12605: CALL_OW 103
// end ; end_of_file
12609: LD_VAR 0 1
12613: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12614: LD_INT 0
12616: PPUSH
// ar_miner := 81 ;
12617: LD_ADDR_EXP 102
12621: PUSH
12622: LD_INT 81
12624: ST_TO_ADDR
// ar_crane := 88 ;
12625: LD_ADDR_EXP 101
12629: PUSH
12630: LD_INT 88
12632: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12633: LD_ADDR_EXP 96
12637: PUSH
12638: LD_INT 89
12640: ST_TO_ADDR
// us_hack := 99 ;
12641: LD_ADDR_EXP 97
12645: PUSH
12646: LD_INT 99
12648: ST_TO_ADDR
// us_artillery := 97 ;
12649: LD_ADDR_EXP 98
12653: PUSH
12654: LD_INT 97
12656: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12657: LD_ADDR_EXP 99
12661: PUSH
12662: LD_INT 91
12664: ST_TO_ADDR
// ar_mortar := 92 ;
12665: LD_ADDR_EXP 100
12669: PUSH
12670: LD_INT 92
12672: ST_TO_ADDR
// ru_flamethrower := 93 ;
12673: LD_ADDR_EXP 103
12677: PUSH
12678: LD_INT 93
12680: ST_TO_ADDR
// ru_radar := 98 ;
12681: LD_ADDR_EXP 95
12685: PUSH
12686: LD_INT 98
12688: ST_TO_ADDR
// tech_Artillery := 80 ;
12689: LD_ADDR_EXP 104
12693: PUSH
12694: LD_INT 80
12696: ST_TO_ADDR
// tech_RadMat := 81 ;
12697: LD_ADDR_EXP 105
12701: PUSH
12702: LD_INT 81
12704: ST_TO_ADDR
// tech_BasicTools := 82 ;
12705: LD_ADDR_EXP 106
12709: PUSH
12710: LD_INT 82
12712: ST_TO_ADDR
// tech_Cargo := 83 ;
12713: LD_ADDR_EXP 107
12717: PUSH
12718: LD_INT 83
12720: ST_TO_ADDR
// tech_Track := 84 ;
12721: LD_ADDR_EXP 108
12725: PUSH
12726: LD_INT 84
12728: ST_TO_ADDR
// tech_Crane := 85 ;
12729: LD_ADDR_EXP 109
12733: PUSH
12734: LD_INT 85
12736: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12737: LD_ADDR_EXP 110
12741: PUSH
12742: LD_INT 86
12744: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12745: LD_ADDR_EXP 111
12749: PUSH
12750: LD_INT 87
12752: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
12753: LD_ADDR_EXP 112
12757: PUSH
12758: LD_INT 88
12760: ST_TO_ADDR
// class_mastodont := 31 ;
12761: LD_ADDR_EXP 113
12765: PUSH
12766: LD_INT 31
12768: ST_TO_ADDR
// class_horse := 21 ;
12769: LD_ADDR_EXP 114
12773: PUSH
12774: LD_INT 21
12776: ST_TO_ADDR
// end ;
12777: LD_VAR 0 1
12781: RET
// every 1 do
12782: GO 12784
12784: DISABLE
// InitGlobalVariables ; end_of_file
12785: CALL 12614 0 0
12789: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
12790: LD_INT 0
12792: PPUSH
12793: PPUSH
// if exist_mode then
12794: LD_VAR 0 2
12798: IFFALSE 12823
// unit := CreateCharacter ( prefix & ident ) else
12800: LD_ADDR_VAR 0 5
12804: PUSH
12805: LD_VAR 0 3
12809: PUSH
12810: LD_VAR 0 1
12814: STR
12815: PPUSH
12816: CALL_OW 34
12820: ST_TO_ADDR
12821: GO 12838
// unit := NewCharacter ( ident ) ;
12823: LD_ADDR_VAR 0 5
12827: PUSH
12828: LD_VAR 0 1
12832: PPUSH
12833: CALL_OW 25
12837: ST_TO_ADDR
// result := unit ;
12838: LD_ADDR_VAR 0 4
12842: PUSH
12843: LD_VAR 0 5
12847: ST_TO_ADDR
// end ;
12848: LD_VAR 0 4
12852: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
12853: LD_INT 0
12855: PPUSH
12856: PPUSH
// if not side or not nation then
12857: LD_VAR 0 1
12861: NOT
12862: PUSH
12863: LD_VAR 0 2
12867: NOT
12868: OR
12869: IFFALSE 12873
// exit ;
12871: GO 13641
// case nation of nation_american :
12873: LD_VAR 0 2
12877: PUSH
12878: LD_INT 1
12880: DOUBLE
12881: EQUAL
12882: IFTRUE 12886
12884: GO 13100
12886: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
12887: LD_ADDR_VAR 0 4
12891: PUSH
12892: LD_INT 35
12894: PUSH
12895: LD_INT 45
12897: PUSH
12898: LD_INT 46
12900: PUSH
12901: LD_INT 47
12903: PUSH
12904: LD_INT 82
12906: PUSH
12907: LD_INT 83
12909: PUSH
12910: LD_INT 84
12912: PUSH
12913: LD_INT 85
12915: PUSH
12916: LD_INT 86
12918: PUSH
12919: LD_INT 1
12921: PUSH
12922: LD_INT 2
12924: PUSH
12925: LD_INT 6
12927: PUSH
12928: LD_INT 15
12930: PUSH
12931: LD_INT 16
12933: PUSH
12934: LD_INT 7
12936: PUSH
12937: LD_INT 12
12939: PUSH
12940: LD_INT 13
12942: PUSH
12943: LD_INT 10
12945: PUSH
12946: LD_INT 14
12948: PUSH
12949: LD_INT 20
12951: PUSH
12952: LD_INT 21
12954: PUSH
12955: LD_INT 22
12957: PUSH
12958: LD_INT 25
12960: PUSH
12961: LD_INT 32
12963: PUSH
12964: LD_INT 27
12966: PUSH
12967: LD_INT 36
12969: PUSH
12970: LD_INT 69
12972: PUSH
12973: LD_INT 39
12975: PUSH
12976: LD_INT 34
12978: PUSH
12979: LD_INT 40
12981: PUSH
12982: LD_INT 48
12984: PUSH
12985: LD_INT 49
12987: PUSH
12988: LD_INT 50
12990: PUSH
12991: LD_INT 51
12993: PUSH
12994: LD_INT 52
12996: PUSH
12997: LD_INT 53
12999: PUSH
13000: LD_INT 54
13002: PUSH
13003: LD_INT 55
13005: PUSH
13006: LD_INT 56
13008: PUSH
13009: LD_INT 57
13011: PUSH
13012: LD_INT 58
13014: PUSH
13015: LD_INT 59
13017: PUSH
13018: LD_INT 60
13020: PUSH
13021: LD_INT 61
13023: PUSH
13024: LD_INT 62
13026: PUSH
13027: LD_INT 80
13029: PUSH
13030: LD_INT 82
13032: PUSH
13033: LD_INT 83
13035: PUSH
13036: LD_INT 84
13038: PUSH
13039: LD_INT 85
13041: PUSH
13042: LD_INT 86
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: ST_TO_ADDR
13098: GO 13565
13100: LD_INT 2
13102: DOUBLE
13103: EQUAL
13104: IFTRUE 13108
13106: GO 13334
13108: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
13109: LD_ADDR_VAR 0 4
13113: PUSH
13114: LD_INT 35
13116: PUSH
13117: LD_INT 45
13119: PUSH
13120: LD_INT 46
13122: PUSH
13123: LD_INT 47
13125: PUSH
13126: LD_INT 82
13128: PUSH
13129: LD_INT 83
13131: PUSH
13132: LD_INT 84
13134: PUSH
13135: LD_INT 85
13137: PUSH
13138: LD_INT 87
13140: PUSH
13141: LD_INT 70
13143: PUSH
13144: LD_INT 1
13146: PUSH
13147: LD_INT 11
13149: PUSH
13150: LD_INT 3
13152: PUSH
13153: LD_INT 4
13155: PUSH
13156: LD_INT 5
13158: PUSH
13159: LD_INT 6
13161: PUSH
13162: LD_INT 15
13164: PUSH
13165: LD_INT 18
13167: PUSH
13168: LD_INT 7
13170: PUSH
13171: LD_INT 17
13173: PUSH
13174: LD_INT 8
13176: PUSH
13177: LD_INT 20
13179: PUSH
13180: LD_INT 21
13182: PUSH
13183: LD_INT 22
13185: PUSH
13186: LD_INT 72
13188: PUSH
13189: LD_INT 26
13191: PUSH
13192: LD_INT 69
13194: PUSH
13195: LD_INT 39
13197: PUSH
13198: LD_INT 40
13200: PUSH
13201: LD_INT 41
13203: PUSH
13204: LD_INT 42
13206: PUSH
13207: LD_INT 43
13209: PUSH
13210: LD_INT 48
13212: PUSH
13213: LD_INT 49
13215: PUSH
13216: LD_INT 50
13218: PUSH
13219: LD_INT 51
13221: PUSH
13222: LD_INT 52
13224: PUSH
13225: LD_INT 53
13227: PUSH
13228: LD_INT 54
13230: PUSH
13231: LD_INT 55
13233: PUSH
13234: LD_INT 56
13236: PUSH
13237: LD_INT 60
13239: PUSH
13240: LD_INT 61
13242: PUSH
13243: LD_INT 62
13245: PUSH
13246: LD_INT 66
13248: PUSH
13249: LD_INT 67
13251: PUSH
13252: LD_INT 68
13254: PUSH
13255: LD_INT 81
13257: PUSH
13258: LD_INT 82
13260: PUSH
13261: LD_INT 83
13263: PUSH
13264: LD_INT 84
13266: PUSH
13267: LD_INT 85
13269: PUSH
13270: LD_INT 87
13272: PUSH
13273: LD_INT 88
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: ST_TO_ADDR
13332: GO 13565
13334: LD_INT 3
13336: DOUBLE
13337: EQUAL
13338: IFTRUE 13342
13340: GO 13564
13342: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
13343: LD_ADDR_VAR 0 4
13347: PUSH
13348: LD_INT 46
13350: PUSH
13351: LD_INT 47
13353: PUSH
13354: LD_INT 1
13356: PUSH
13357: LD_INT 2
13359: PUSH
13360: LD_INT 82
13362: PUSH
13363: LD_INT 83
13365: PUSH
13366: LD_INT 84
13368: PUSH
13369: LD_INT 85
13371: PUSH
13372: LD_INT 86
13374: PUSH
13375: LD_INT 11
13377: PUSH
13378: LD_INT 9
13380: PUSH
13381: LD_INT 20
13383: PUSH
13384: LD_INT 19
13386: PUSH
13387: LD_INT 21
13389: PUSH
13390: LD_INT 24
13392: PUSH
13393: LD_INT 22
13395: PUSH
13396: LD_INT 25
13398: PUSH
13399: LD_INT 28
13401: PUSH
13402: LD_INT 29
13404: PUSH
13405: LD_INT 30
13407: PUSH
13408: LD_INT 31
13410: PUSH
13411: LD_INT 37
13413: PUSH
13414: LD_INT 38
13416: PUSH
13417: LD_INT 32
13419: PUSH
13420: LD_INT 27
13422: PUSH
13423: LD_INT 33
13425: PUSH
13426: LD_INT 69
13428: PUSH
13429: LD_INT 39
13431: PUSH
13432: LD_INT 34
13434: PUSH
13435: LD_INT 40
13437: PUSH
13438: LD_INT 71
13440: PUSH
13441: LD_INT 23
13443: PUSH
13444: LD_INT 44
13446: PUSH
13447: LD_INT 48
13449: PUSH
13450: LD_INT 49
13452: PUSH
13453: LD_INT 50
13455: PUSH
13456: LD_INT 51
13458: PUSH
13459: LD_INT 52
13461: PUSH
13462: LD_INT 53
13464: PUSH
13465: LD_INT 54
13467: PUSH
13468: LD_INT 55
13470: PUSH
13471: LD_INT 56
13473: PUSH
13474: LD_INT 57
13476: PUSH
13477: LD_INT 58
13479: PUSH
13480: LD_INT 59
13482: PUSH
13483: LD_INT 63
13485: PUSH
13486: LD_INT 64
13488: PUSH
13489: LD_INT 65
13491: PUSH
13492: LD_INT 82
13494: PUSH
13495: LD_INT 83
13497: PUSH
13498: LD_INT 84
13500: PUSH
13501: LD_INT 85
13503: PUSH
13504: LD_INT 86
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: ST_TO_ADDR
13562: GO 13565
13564: POP
// if state > - 1 and state < 3 then
13565: LD_VAR 0 3
13569: PUSH
13570: LD_INT 1
13572: NEG
13573: GREATER
13574: PUSH
13575: LD_VAR 0 3
13579: PUSH
13580: LD_INT 3
13582: LESS
13583: AND
13584: IFFALSE 13641
// for i in result do
13586: LD_ADDR_VAR 0 5
13590: PUSH
13591: LD_VAR 0 4
13595: PUSH
13596: FOR_IN
13597: IFFALSE 13639
// if GetTech ( i , side ) <> state then
13599: LD_VAR 0 5
13603: PPUSH
13604: LD_VAR 0 1
13608: PPUSH
13609: CALL_OW 321
13613: PUSH
13614: LD_VAR 0 3
13618: NONEQUAL
13619: IFFALSE 13637
// result := result diff i ;
13621: LD_ADDR_VAR 0 4
13625: PUSH
13626: LD_VAR 0 4
13630: PUSH
13631: LD_VAR 0 5
13635: DIFF
13636: ST_TO_ADDR
13637: GO 13596
13639: POP
13640: POP
// end ;
13641: LD_VAR 0 4
13645: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
13646: LD_INT 0
13648: PPUSH
13649: PPUSH
13650: PPUSH
// result := true ;
13651: LD_ADDR_VAR 0 3
13655: PUSH
13656: LD_INT 1
13658: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
13659: LD_ADDR_VAR 0 5
13663: PUSH
13664: LD_VAR 0 2
13668: PPUSH
13669: CALL_OW 480
13673: ST_TO_ADDR
// if not tmp then
13674: LD_VAR 0 5
13678: NOT
13679: IFFALSE 13683
// exit ;
13681: GO 13732
// for i in tmp do
13683: LD_ADDR_VAR 0 4
13687: PUSH
13688: LD_VAR 0 5
13692: PUSH
13693: FOR_IN
13694: IFFALSE 13730
// if GetTech ( i , side ) <> state_researched then
13696: LD_VAR 0 4
13700: PPUSH
13701: LD_VAR 0 1
13705: PPUSH
13706: CALL_OW 321
13710: PUSH
13711: LD_INT 2
13713: NONEQUAL
13714: IFFALSE 13728
// begin result := false ;
13716: LD_ADDR_VAR 0 3
13720: PUSH
13721: LD_INT 0
13723: ST_TO_ADDR
// exit ;
13724: POP
13725: POP
13726: GO 13732
// end ;
13728: GO 13693
13730: POP
13731: POP
// end ;
13732: LD_VAR 0 3
13736: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
13737: LD_INT 0
13739: PPUSH
13740: PPUSH
13741: PPUSH
13742: PPUSH
13743: PPUSH
13744: PPUSH
13745: PPUSH
13746: PPUSH
13747: PPUSH
13748: PPUSH
13749: PPUSH
13750: PPUSH
13751: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
13752: LD_VAR 0 1
13756: NOT
13757: PUSH
13758: LD_VAR 0 1
13762: PPUSH
13763: CALL_OW 257
13767: PUSH
13768: LD_INT 9
13770: NONEQUAL
13771: OR
13772: IFFALSE 13776
// exit ;
13774: GO 14349
// side := GetSide ( unit ) ;
13776: LD_ADDR_VAR 0 9
13780: PUSH
13781: LD_VAR 0 1
13785: PPUSH
13786: CALL_OW 255
13790: ST_TO_ADDR
// tech_space := tech_spacanom ;
13791: LD_ADDR_VAR 0 12
13795: PUSH
13796: LD_INT 29
13798: ST_TO_ADDR
// tech_time := tech_taurad ;
13799: LD_ADDR_VAR 0 13
13803: PUSH
13804: LD_INT 28
13806: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
13807: LD_ADDR_VAR 0 11
13811: PUSH
13812: LD_VAR 0 1
13816: PPUSH
13817: CALL_OW 310
13821: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
13822: LD_VAR 0 11
13826: PPUSH
13827: CALL_OW 247
13831: PUSH
13832: LD_INT 2
13834: EQUAL
13835: IFFALSE 13839
// exit ;
13837: GO 14349
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13839: LD_ADDR_VAR 0 8
13843: PUSH
13844: LD_INT 81
13846: PUSH
13847: LD_VAR 0 9
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PUSH
13856: LD_INT 3
13858: PUSH
13859: LD_INT 21
13861: PUSH
13862: LD_INT 3
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: PPUSH
13877: CALL_OW 69
13881: ST_TO_ADDR
// if not tmp then
13882: LD_VAR 0 8
13886: NOT
13887: IFFALSE 13891
// exit ;
13889: GO 14349
// if in_unit then
13891: LD_VAR 0 11
13895: IFFALSE 13919
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
13897: LD_ADDR_VAR 0 10
13901: PUSH
13902: LD_VAR 0 8
13906: PPUSH
13907: LD_VAR 0 11
13911: PPUSH
13912: CALL_OW 74
13916: ST_TO_ADDR
13917: GO 13939
// enemy := NearestUnitToUnit ( tmp , unit ) ;
13919: LD_ADDR_VAR 0 10
13923: PUSH
13924: LD_VAR 0 8
13928: PPUSH
13929: LD_VAR 0 1
13933: PPUSH
13934: CALL_OW 74
13938: ST_TO_ADDR
// if not enemy then
13939: LD_VAR 0 10
13943: NOT
13944: IFFALSE 13948
// exit ;
13946: GO 14349
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
13948: LD_VAR 0 11
13952: PUSH
13953: LD_VAR 0 11
13957: PPUSH
13958: LD_VAR 0 10
13962: PPUSH
13963: CALL_OW 296
13967: PUSH
13968: LD_INT 13
13970: GREATER
13971: AND
13972: PUSH
13973: LD_VAR 0 1
13977: PPUSH
13978: LD_VAR 0 10
13982: PPUSH
13983: CALL_OW 296
13987: PUSH
13988: LD_INT 12
13990: GREATER
13991: OR
13992: IFFALSE 13996
// exit ;
13994: GO 14349
// missile := [ 1 ] ;
13996: LD_ADDR_VAR 0 14
14000: PUSH
14001: LD_INT 1
14003: PUSH
14004: EMPTY
14005: LIST
14006: ST_TO_ADDR
// if Researched ( side , tech_space ) then
14007: LD_VAR 0 9
14011: PPUSH
14012: LD_VAR 0 12
14016: PPUSH
14017: CALL_OW 325
14021: IFFALSE 14050
// missile := Replace ( missile , missile + 1 , 2 ) ;
14023: LD_ADDR_VAR 0 14
14027: PUSH
14028: LD_VAR 0 14
14032: PPUSH
14033: LD_VAR 0 14
14037: PUSH
14038: LD_INT 1
14040: PLUS
14041: PPUSH
14042: LD_INT 2
14044: PPUSH
14045: CALL_OW 1
14049: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
14050: LD_VAR 0 9
14054: PPUSH
14055: LD_VAR 0 13
14059: PPUSH
14060: CALL_OW 325
14064: PUSH
14065: LD_VAR 0 10
14069: PPUSH
14070: CALL_OW 255
14074: PPUSH
14075: LD_VAR 0 13
14079: PPUSH
14080: CALL_OW 325
14084: NOT
14085: AND
14086: IFFALSE 14115
// missile := Replace ( missile , missile + 1 , 3 ) ;
14088: LD_ADDR_VAR 0 14
14092: PUSH
14093: LD_VAR 0 14
14097: PPUSH
14098: LD_VAR 0 14
14102: PUSH
14103: LD_INT 1
14105: PLUS
14106: PPUSH
14107: LD_INT 3
14109: PPUSH
14110: CALL_OW 1
14114: ST_TO_ADDR
// if missile < 2 then
14115: LD_VAR 0 14
14119: PUSH
14120: LD_INT 2
14122: LESS
14123: IFFALSE 14127
// exit ;
14125: GO 14349
// x := GetX ( enemy ) ;
14127: LD_ADDR_VAR 0 4
14131: PUSH
14132: LD_VAR 0 10
14136: PPUSH
14137: CALL_OW 250
14141: ST_TO_ADDR
// y := GetY ( enemy ) ;
14142: LD_ADDR_VAR 0 5
14146: PUSH
14147: LD_VAR 0 10
14151: PPUSH
14152: CALL_OW 251
14156: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
14157: LD_ADDR_VAR 0 6
14161: PUSH
14162: LD_VAR 0 4
14166: PUSH
14167: LD_INT 1
14169: NEG
14170: PPUSH
14171: LD_INT 1
14173: PPUSH
14174: CALL_OW 12
14178: PLUS
14179: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
14180: LD_ADDR_VAR 0 7
14184: PUSH
14185: LD_VAR 0 5
14189: PUSH
14190: LD_INT 1
14192: NEG
14193: PPUSH
14194: LD_INT 1
14196: PPUSH
14197: CALL_OW 12
14201: PLUS
14202: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14203: LD_VAR 0 6
14207: PPUSH
14208: LD_VAR 0 7
14212: PPUSH
14213: CALL_OW 488
14217: NOT
14218: IFFALSE 14240
// begin _x := x ;
14220: LD_ADDR_VAR 0 6
14224: PUSH
14225: LD_VAR 0 4
14229: ST_TO_ADDR
// _y := y ;
14230: LD_ADDR_VAR 0 7
14234: PUSH
14235: LD_VAR 0 5
14239: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
14240: LD_ADDR_VAR 0 3
14244: PUSH
14245: LD_INT 1
14247: PPUSH
14248: LD_VAR 0 14
14252: PPUSH
14253: CALL_OW 12
14257: ST_TO_ADDR
// case i of 1 :
14258: LD_VAR 0 3
14262: PUSH
14263: LD_INT 1
14265: DOUBLE
14266: EQUAL
14267: IFTRUE 14271
14269: GO 14288
14271: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
14272: LD_VAR 0 1
14276: PPUSH
14277: LD_VAR 0 10
14281: PPUSH
14282: CALL_OW 115
14286: GO 14349
14288: LD_INT 2
14290: DOUBLE
14291: EQUAL
14292: IFTRUE 14296
14294: GO 14318
14296: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
14297: LD_VAR 0 1
14301: PPUSH
14302: LD_VAR 0 6
14306: PPUSH
14307: LD_VAR 0 7
14311: PPUSH
14312: CALL_OW 153
14316: GO 14349
14318: LD_INT 3
14320: DOUBLE
14321: EQUAL
14322: IFTRUE 14326
14324: GO 14348
14326: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
14327: LD_VAR 0 1
14331: PPUSH
14332: LD_VAR 0 6
14336: PPUSH
14337: LD_VAR 0 7
14341: PPUSH
14342: CALL_OW 154
14346: GO 14349
14348: POP
// end ;
14349: LD_VAR 0 2
14353: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
14354: LD_INT 0
14356: PPUSH
14357: PPUSH
14358: PPUSH
14359: PPUSH
14360: PPUSH
14361: PPUSH
// if not unit or not building then
14362: LD_VAR 0 1
14366: NOT
14367: PUSH
14368: LD_VAR 0 2
14372: NOT
14373: OR
14374: IFFALSE 14378
// exit ;
14376: GO 14536
// x := GetX ( building ) ;
14378: LD_ADDR_VAR 0 5
14382: PUSH
14383: LD_VAR 0 2
14387: PPUSH
14388: CALL_OW 250
14392: ST_TO_ADDR
// y := GetY ( building ) ;
14393: LD_ADDR_VAR 0 6
14397: PUSH
14398: LD_VAR 0 2
14402: PPUSH
14403: CALL_OW 251
14407: ST_TO_ADDR
// for i = 0 to 5 do
14408: LD_ADDR_VAR 0 4
14412: PUSH
14413: DOUBLE
14414: LD_INT 0
14416: DEC
14417: ST_TO_ADDR
14418: LD_INT 5
14420: PUSH
14421: FOR_TO
14422: IFFALSE 14534
// begin _x := ShiftX ( x , i , 3 ) ;
14424: LD_ADDR_VAR 0 7
14428: PUSH
14429: LD_VAR 0 5
14433: PPUSH
14434: LD_VAR 0 4
14438: PPUSH
14439: LD_INT 3
14441: PPUSH
14442: CALL_OW 272
14446: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
14447: LD_ADDR_VAR 0 8
14451: PUSH
14452: LD_VAR 0 6
14456: PPUSH
14457: LD_VAR 0 4
14461: PPUSH
14462: LD_INT 3
14464: PPUSH
14465: CALL_OW 273
14469: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14470: LD_VAR 0 7
14474: PPUSH
14475: LD_VAR 0 8
14479: PPUSH
14480: CALL_OW 488
14484: NOT
14485: IFFALSE 14489
// continue ;
14487: GO 14421
// if HexInfo ( _x , _y ) = 0 then
14489: LD_VAR 0 7
14493: PPUSH
14494: LD_VAR 0 8
14498: PPUSH
14499: CALL_OW 428
14503: PUSH
14504: LD_INT 0
14506: EQUAL
14507: IFFALSE 14532
// begin ComMoveXY ( unit , _x , _y ) ;
14509: LD_VAR 0 1
14513: PPUSH
14514: LD_VAR 0 7
14518: PPUSH
14519: LD_VAR 0 8
14523: PPUSH
14524: CALL_OW 111
// exit ;
14528: POP
14529: POP
14530: GO 14536
// end ; end ;
14532: GO 14421
14534: POP
14535: POP
// end ;
14536: LD_VAR 0 3
14540: RET
// export function ScanBase ( side , base_area ) ; begin
14541: LD_INT 0
14543: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
14544: LD_ADDR_VAR 0 3
14548: PUSH
14549: LD_VAR 0 2
14553: PPUSH
14554: LD_INT 81
14556: PUSH
14557: LD_VAR 0 1
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PPUSH
14566: CALL_OW 70
14570: ST_TO_ADDR
// end ;
14571: LD_VAR 0 3
14575: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
14576: LD_INT 0
14578: PPUSH
14579: PPUSH
14580: PPUSH
14581: PPUSH
// result := false ;
14582: LD_ADDR_VAR 0 2
14586: PUSH
14587: LD_INT 0
14589: ST_TO_ADDR
// side := GetSide ( unit ) ;
14590: LD_ADDR_VAR 0 3
14594: PUSH
14595: LD_VAR 0 1
14599: PPUSH
14600: CALL_OW 255
14604: ST_TO_ADDR
// nat := GetNation ( unit ) ;
14605: LD_ADDR_VAR 0 4
14609: PUSH
14610: LD_VAR 0 1
14614: PPUSH
14615: CALL_OW 248
14619: ST_TO_ADDR
// case nat of 1 :
14620: LD_VAR 0 4
14624: PUSH
14625: LD_INT 1
14627: DOUBLE
14628: EQUAL
14629: IFTRUE 14633
14631: GO 14644
14633: POP
// tech := tech_lassight ; 2 :
14634: LD_ADDR_VAR 0 5
14638: PUSH
14639: LD_INT 12
14641: ST_TO_ADDR
14642: GO 14683
14644: LD_INT 2
14646: DOUBLE
14647: EQUAL
14648: IFTRUE 14652
14650: GO 14663
14652: POP
// tech := tech_mortar ; 3 :
14653: LD_ADDR_VAR 0 5
14657: PUSH
14658: LD_INT 41
14660: ST_TO_ADDR
14661: GO 14683
14663: LD_INT 3
14665: DOUBLE
14666: EQUAL
14667: IFTRUE 14671
14669: GO 14682
14671: POP
// tech := tech_bazooka ; end ;
14672: LD_ADDR_VAR 0 5
14676: PUSH
14677: LD_INT 44
14679: ST_TO_ADDR
14680: GO 14683
14682: POP
// if Researched ( side , tech ) then
14683: LD_VAR 0 3
14687: PPUSH
14688: LD_VAR 0 5
14692: PPUSH
14693: CALL_OW 325
14697: IFFALSE 14724
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
14699: LD_ADDR_VAR 0 2
14703: PUSH
14704: LD_INT 5
14706: PUSH
14707: LD_INT 8
14709: PUSH
14710: LD_INT 9
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: LIST
14717: PUSH
14718: LD_VAR 0 4
14722: ARRAY
14723: ST_TO_ADDR
// end ;
14724: LD_VAR 0 2
14728: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
14729: LD_INT 0
14731: PPUSH
14732: PPUSH
14733: PPUSH
// if not mines then
14734: LD_VAR 0 2
14738: NOT
14739: IFFALSE 14743
// exit ;
14741: GO 14887
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14743: LD_ADDR_VAR 0 5
14747: PUSH
14748: LD_INT 81
14750: PUSH
14751: LD_VAR 0 1
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PUSH
14760: LD_INT 3
14762: PUSH
14763: LD_INT 21
14765: PUSH
14766: LD_INT 3
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: PPUSH
14781: CALL_OW 69
14785: ST_TO_ADDR
// for i in mines do
14786: LD_ADDR_VAR 0 4
14790: PUSH
14791: LD_VAR 0 2
14795: PUSH
14796: FOR_IN
14797: IFFALSE 14885
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
14799: LD_VAR 0 4
14803: PUSH
14804: LD_INT 1
14806: ARRAY
14807: PPUSH
14808: LD_VAR 0 4
14812: PUSH
14813: LD_INT 2
14815: ARRAY
14816: PPUSH
14817: CALL_OW 458
14821: NOT
14822: IFFALSE 14826
// continue ;
14824: GO 14796
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
14826: LD_VAR 0 4
14830: PUSH
14831: LD_INT 1
14833: ARRAY
14834: PPUSH
14835: LD_VAR 0 4
14839: PUSH
14840: LD_INT 2
14842: ARRAY
14843: PPUSH
14844: CALL_OW 428
14848: PUSH
14849: LD_VAR 0 5
14853: IN
14854: IFFALSE 14883
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
14856: LD_VAR 0 4
14860: PUSH
14861: LD_INT 1
14863: ARRAY
14864: PPUSH
14865: LD_VAR 0 4
14869: PUSH
14870: LD_INT 2
14872: ARRAY
14873: PPUSH
14874: LD_VAR 0 1
14878: PPUSH
14879: CALL_OW 456
// end ;
14883: GO 14796
14885: POP
14886: POP
// end ;
14887: LD_VAR 0 3
14891: RET
// export function Count ( array ) ; var i ; begin
14892: LD_INT 0
14894: PPUSH
14895: PPUSH
// result := 0 ;
14896: LD_ADDR_VAR 0 2
14900: PUSH
14901: LD_INT 0
14903: ST_TO_ADDR
// for i in array do
14904: LD_ADDR_VAR 0 3
14908: PUSH
14909: LD_VAR 0 1
14913: PUSH
14914: FOR_IN
14915: IFFALSE 14939
// if i then
14917: LD_VAR 0 3
14921: IFFALSE 14937
// result := result + 1 ;
14923: LD_ADDR_VAR 0 2
14927: PUSH
14928: LD_VAR 0 2
14932: PUSH
14933: LD_INT 1
14935: PLUS
14936: ST_TO_ADDR
14937: GO 14914
14939: POP
14940: POP
// end ;
14941: LD_VAR 0 2
14945: RET
// export function IsEmpty ( building ) ; begin
14946: LD_INT 0
14948: PPUSH
// if not building then
14949: LD_VAR 0 1
14953: NOT
14954: IFFALSE 14958
// exit ;
14956: GO 15001
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
14958: LD_ADDR_VAR 0 2
14962: PUSH
14963: LD_VAR 0 1
14967: PUSH
14968: LD_INT 22
14970: PUSH
14971: LD_VAR 0 1
14975: PPUSH
14976: CALL_OW 255
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PUSH
14985: LD_INT 58
14987: PUSH
14988: EMPTY
14989: LIST
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PPUSH
14995: CALL_OW 69
14999: IN
15000: ST_TO_ADDR
// end ;
15001: LD_VAR 0 2
15005: RET
// export function IsNotFull ( building ) ; begin
15006: LD_INT 0
15008: PPUSH
// if not building then
15009: LD_VAR 0 1
15013: NOT
15014: IFFALSE 15018
// exit ;
15016: GO 15037
// result := UnitsInside ( building ) < 6 ;
15018: LD_ADDR_VAR 0 2
15022: PUSH
15023: LD_VAR 0 1
15027: PPUSH
15028: CALL_OW 313
15032: PUSH
15033: LD_INT 6
15035: LESS
15036: ST_TO_ADDR
// end ;
15037: LD_VAR 0 2
15041: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15042: LD_INT 0
15044: PPUSH
15045: PPUSH
15046: PPUSH
15047: PPUSH
// tmp := [ ] ;
15048: LD_ADDR_VAR 0 3
15052: PUSH
15053: EMPTY
15054: ST_TO_ADDR
// list := [ ] ;
15055: LD_ADDR_VAR 0 5
15059: PUSH
15060: EMPTY
15061: ST_TO_ADDR
// for i = 16 to 25 do
15062: LD_ADDR_VAR 0 4
15066: PUSH
15067: DOUBLE
15068: LD_INT 16
15070: DEC
15071: ST_TO_ADDR
15072: LD_INT 25
15074: PUSH
15075: FOR_TO
15076: IFFALSE 15149
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15078: LD_ADDR_VAR 0 3
15082: PUSH
15083: LD_VAR 0 3
15087: PUSH
15088: LD_INT 22
15090: PUSH
15091: LD_VAR 0 1
15095: PPUSH
15096: CALL_OW 255
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: PUSH
15105: LD_INT 91
15107: PUSH
15108: LD_VAR 0 1
15112: PUSH
15113: LD_INT 6
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: LIST
15120: PUSH
15121: LD_INT 30
15123: PUSH
15124: LD_VAR 0 4
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: LIST
15137: PUSH
15138: EMPTY
15139: LIST
15140: PPUSH
15141: CALL_OW 69
15145: ADD
15146: ST_TO_ADDR
15147: GO 15075
15149: POP
15150: POP
// for i = 1 to tmp do
15151: LD_ADDR_VAR 0 4
15155: PUSH
15156: DOUBLE
15157: LD_INT 1
15159: DEC
15160: ST_TO_ADDR
15161: LD_VAR 0 3
15165: PUSH
15166: FOR_TO
15167: IFFALSE 15255
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
15169: LD_ADDR_VAR 0 5
15173: PUSH
15174: LD_VAR 0 5
15178: PUSH
15179: LD_VAR 0 3
15183: PUSH
15184: LD_VAR 0 4
15188: ARRAY
15189: PPUSH
15190: CALL_OW 266
15194: PUSH
15195: LD_VAR 0 3
15199: PUSH
15200: LD_VAR 0 4
15204: ARRAY
15205: PPUSH
15206: CALL_OW 250
15210: PUSH
15211: LD_VAR 0 3
15215: PUSH
15216: LD_VAR 0 4
15220: ARRAY
15221: PPUSH
15222: CALL_OW 251
15226: PUSH
15227: LD_VAR 0 3
15231: PUSH
15232: LD_VAR 0 4
15236: ARRAY
15237: PPUSH
15238: CALL_OW 254
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: PUSH
15249: EMPTY
15250: LIST
15251: ADD
15252: ST_TO_ADDR
15253: GO 15166
15255: POP
15256: POP
// result := list ;
15257: LD_ADDR_VAR 0 2
15261: PUSH
15262: LD_VAR 0 5
15266: ST_TO_ADDR
// end ;
15267: LD_VAR 0 2
15271: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
15272: LD_INT 0
15274: PPUSH
15275: PPUSH
15276: PPUSH
15277: PPUSH
15278: PPUSH
15279: PPUSH
15280: PPUSH
// if not factory then
15281: LD_VAR 0 1
15285: NOT
15286: IFFALSE 15290
// exit ;
15288: GO 15883
// if control = control_apeman then
15290: LD_VAR 0 4
15294: PUSH
15295: LD_INT 5
15297: EQUAL
15298: IFFALSE 15407
// begin tmp := UnitsInside ( factory ) ;
15300: LD_ADDR_VAR 0 8
15304: PUSH
15305: LD_VAR 0 1
15309: PPUSH
15310: CALL_OW 313
15314: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15315: LD_VAR 0 8
15319: PPUSH
15320: LD_INT 25
15322: PUSH
15323: LD_INT 12
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: PPUSH
15330: CALL_OW 72
15334: NOT
15335: IFFALSE 15345
// control := control_manual ;
15337: LD_ADDR_VAR 0 4
15341: PUSH
15342: LD_INT 1
15344: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
15345: LD_ADDR_VAR 0 8
15349: PUSH
15350: LD_VAR 0 1
15354: PPUSH
15355: CALL 15042 0 1
15359: ST_TO_ADDR
// if tmp then
15360: LD_VAR 0 8
15364: IFFALSE 15407
// begin for i in tmp do
15366: LD_ADDR_VAR 0 7
15370: PUSH
15371: LD_VAR 0 8
15375: PUSH
15376: FOR_IN
15377: IFFALSE 15405
// if i [ 1 ] = b_ext_radio then
15379: LD_VAR 0 7
15383: PUSH
15384: LD_INT 1
15386: ARRAY
15387: PUSH
15388: LD_INT 22
15390: EQUAL
15391: IFFALSE 15403
// begin control := control_remote ;
15393: LD_ADDR_VAR 0 4
15397: PUSH
15398: LD_INT 2
15400: ST_TO_ADDR
// break ;
15401: GO 15405
// end ;
15403: GO 15376
15405: POP
15406: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15407: LD_VAR 0 1
15411: PPUSH
15412: LD_VAR 0 2
15416: PPUSH
15417: LD_VAR 0 3
15421: PPUSH
15422: LD_VAR 0 4
15426: PPUSH
15427: LD_VAR 0 5
15431: PPUSH
15432: CALL_OW 448
15436: IFFALSE 15471
// begin result := [ chassis , engine , control , weapon ] ;
15438: LD_ADDR_VAR 0 6
15442: PUSH
15443: LD_VAR 0 2
15447: PUSH
15448: LD_VAR 0 3
15452: PUSH
15453: LD_VAR 0 4
15457: PUSH
15458: LD_VAR 0 5
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: ST_TO_ADDR
// exit ;
15469: GO 15883
// end ; _chassis := AvailableChassisList ( factory ) ;
15471: LD_ADDR_VAR 0 9
15475: PUSH
15476: LD_VAR 0 1
15480: PPUSH
15481: CALL_OW 475
15485: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
15486: LD_ADDR_VAR 0 11
15490: PUSH
15491: LD_VAR 0 1
15495: PPUSH
15496: CALL_OW 476
15500: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
15501: LD_ADDR_VAR 0 12
15505: PUSH
15506: LD_VAR 0 1
15510: PPUSH
15511: CALL_OW 477
15515: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
15516: LD_ADDR_VAR 0 10
15520: PUSH
15521: LD_VAR 0 1
15525: PPUSH
15526: CALL_OW 478
15530: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
15531: LD_VAR 0 9
15535: NOT
15536: PUSH
15537: LD_VAR 0 11
15541: NOT
15542: OR
15543: PUSH
15544: LD_VAR 0 12
15548: NOT
15549: OR
15550: PUSH
15551: LD_VAR 0 10
15555: NOT
15556: OR
15557: IFFALSE 15592
// begin result := [ chassis , engine , control , weapon ] ;
15559: LD_ADDR_VAR 0 6
15563: PUSH
15564: LD_VAR 0 2
15568: PUSH
15569: LD_VAR 0 3
15573: PUSH
15574: LD_VAR 0 4
15578: PUSH
15579: LD_VAR 0 5
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: ST_TO_ADDR
// exit ;
15590: GO 15883
// end ; if not chassis in _chassis then
15592: LD_VAR 0 2
15596: PUSH
15597: LD_VAR 0 9
15601: IN
15602: NOT
15603: IFFALSE 15629
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
15605: LD_ADDR_VAR 0 2
15609: PUSH
15610: LD_VAR 0 9
15614: PUSH
15615: LD_INT 1
15617: PPUSH
15618: LD_VAR 0 9
15622: PPUSH
15623: CALL_OW 12
15627: ARRAY
15628: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
15629: LD_VAR 0 2
15633: PPUSH
15634: LD_VAR 0 3
15638: PPUSH
15639: CALL 15888 0 2
15643: NOT
15644: IFFALSE 15703
// repeat engine := _engine [ 1 ] ;
15646: LD_ADDR_VAR 0 3
15650: PUSH
15651: LD_VAR 0 11
15655: PUSH
15656: LD_INT 1
15658: ARRAY
15659: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
15660: LD_ADDR_VAR 0 11
15664: PUSH
15665: LD_VAR 0 11
15669: PPUSH
15670: LD_INT 1
15672: PPUSH
15673: CALL_OW 3
15677: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
15678: LD_VAR 0 2
15682: PPUSH
15683: LD_VAR 0 3
15687: PPUSH
15688: CALL 15888 0 2
15692: PUSH
15693: LD_VAR 0 11
15697: PUSH
15698: EMPTY
15699: EQUAL
15700: OR
15701: IFFALSE 15646
// if not control in _control then
15703: LD_VAR 0 4
15707: PUSH
15708: LD_VAR 0 12
15712: IN
15713: NOT
15714: IFFALSE 15740
// control := _control [ rand ( 1 , _control ) ] ;
15716: LD_ADDR_VAR 0 4
15720: PUSH
15721: LD_VAR 0 12
15725: PUSH
15726: LD_INT 1
15728: PPUSH
15729: LD_VAR 0 12
15733: PPUSH
15734: CALL_OW 12
15738: ARRAY
15739: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
15740: LD_VAR 0 2
15744: PPUSH
15745: LD_VAR 0 5
15749: PPUSH
15750: CALL 16108 0 2
15754: NOT
15755: IFFALSE 15814
// repeat weapon := _weapon [ 1 ] ;
15757: LD_ADDR_VAR 0 5
15761: PUSH
15762: LD_VAR 0 10
15766: PUSH
15767: LD_INT 1
15769: ARRAY
15770: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
15771: LD_ADDR_VAR 0 10
15775: PUSH
15776: LD_VAR 0 10
15780: PPUSH
15781: LD_INT 1
15783: PPUSH
15784: CALL_OW 3
15788: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
15789: LD_VAR 0 2
15793: PPUSH
15794: LD_VAR 0 5
15798: PPUSH
15799: CALL 16108 0 2
15803: PUSH
15804: LD_VAR 0 10
15808: PUSH
15809: EMPTY
15810: EQUAL
15811: OR
15812: IFFALSE 15757
// result := [ ] ;
15814: LD_ADDR_VAR 0 6
15818: PUSH
15819: EMPTY
15820: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15821: LD_VAR 0 1
15825: PPUSH
15826: LD_VAR 0 2
15830: PPUSH
15831: LD_VAR 0 3
15835: PPUSH
15836: LD_VAR 0 4
15840: PPUSH
15841: LD_VAR 0 5
15845: PPUSH
15846: CALL_OW 448
15850: IFFALSE 15883
// result := [ chassis , engine , control , weapon ] ;
15852: LD_ADDR_VAR 0 6
15856: PUSH
15857: LD_VAR 0 2
15861: PUSH
15862: LD_VAR 0 3
15866: PUSH
15867: LD_VAR 0 4
15871: PUSH
15872: LD_VAR 0 5
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: ST_TO_ADDR
// end ;
15883: LD_VAR 0 6
15887: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
15888: LD_INT 0
15890: PPUSH
// if not chassis or not engine then
15891: LD_VAR 0 1
15895: NOT
15896: PUSH
15897: LD_VAR 0 2
15901: NOT
15902: OR
15903: IFFALSE 15907
// exit ;
15905: GO 16103
// case engine of engine_solar :
15907: LD_VAR 0 2
15911: PUSH
15912: LD_INT 2
15914: DOUBLE
15915: EQUAL
15916: IFTRUE 15920
15918: GO 15958
15920: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
15921: LD_ADDR_VAR 0 3
15925: PUSH
15926: LD_INT 11
15928: PUSH
15929: LD_INT 12
15931: PUSH
15932: LD_INT 13
15934: PUSH
15935: LD_INT 14
15937: PUSH
15938: LD_INT 1
15940: PUSH
15941: LD_INT 2
15943: PUSH
15944: LD_INT 3
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: ST_TO_ADDR
15956: GO 16087
15958: LD_INT 1
15960: DOUBLE
15961: EQUAL
15962: IFTRUE 15966
15964: GO 16028
15966: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
15967: LD_ADDR_VAR 0 3
15971: PUSH
15972: LD_INT 11
15974: PUSH
15975: LD_INT 12
15977: PUSH
15978: LD_INT 13
15980: PUSH
15981: LD_INT 14
15983: PUSH
15984: LD_INT 1
15986: PUSH
15987: LD_INT 2
15989: PUSH
15990: LD_INT 3
15992: PUSH
15993: LD_INT 4
15995: PUSH
15996: LD_INT 5
15998: PUSH
15999: LD_INT 21
16001: PUSH
16002: LD_INT 23
16004: PUSH
16005: LD_INT 22
16007: PUSH
16008: LD_INT 24
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: ST_TO_ADDR
16026: GO 16087
16028: LD_INT 3
16030: DOUBLE
16031: EQUAL
16032: IFTRUE 16036
16034: GO 16086
16036: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16037: LD_ADDR_VAR 0 3
16041: PUSH
16042: LD_INT 13
16044: PUSH
16045: LD_INT 14
16047: PUSH
16048: LD_INT 2
16050: PUSH
16051: LD_INT 3
16053: PUSH
16054: LD_INT 4
16056: PUSH
16057: LD_INT 5
16059: PUSH
16060: LD_INT 21
16062: PUSH
16063: LD_INT 22
16065: PUSH
16066: LD_INT 23
16068: PUSH
16069: LD_INT 24
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: ST_TO_ADDR
16084: GO 16087
16086: POP
// result := ( chassis in result ) ;
16087: LD_ADDR_VAR 0 3
16091: PUSH
16092: LD_VAR 0 1
16096: PUSH
16097: LD_VAR 0 3
16101: IN
16102: ST_TO_ADDR
// end ;
16103: LD_VAR 0 3
16107: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16108: LD_INT 0
16110: PPUSH
// if not chassis or not weapon then
16111: LD_VAR 0 1
16115: NOT
16116: PUSH
16117: LD_VAR 0 2
16121: NOT
16122: OR
16123: IFFALSE 16127
// exit ;
16125: GO 17189
// case weapon of us_machine_gun :
16127: LD_VAR 0 2
16131: PUSH
16132: LD_INT 2
16134: DOUBLE
16135: EQUAL
16136: IFTRUE 16140
16138: GO 16170
16140: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16141: LD_ADDR_VAR 0 3
16145: PUSH
16146: LD_INT 1
16148: PUSH
16149: LD_INT 2
16151: PUSH
16152: LD_INT 3
16154: PUSH
16155: LD_INT 4
16157: PUSH
16158: LD_INT 5
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: ST_TO_ADDR
16168: GO 17173
16170: LD_INT 3
16172: DOUBLE
16173: EQUAL
16174: IFTRUE 16178
16176: GO 16208
16178: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
16179: LD_ADDR_VAR 0 3
16183: PUSH
16184: LD_INT 1
16186: PUSH
16187: LD_INT 2
16189: PUSH
16190: LD_INT 3
16192: PUSH
16193: LD_INT 4
16195: PUSH
16196: LD_INT 5
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: ST_TO_ADDR
16206: GO 17173
16208: LD_INT 11
16210: DOUBLE
16211: EQUAL
16212: IFTRUE 16216
16214: GO 16246
16216: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
16217: LD_ADDR_VAR 0 3
16221: PUSH
16222: LD_INT 1
16224: PUSH
16225: LD_INT 2
16227: PUSH
16228: LD_INT 3
16230: PUSH
16231: LD_INT 4
16233: PUSH
16234: LD_INT 5
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: ST_TO_ADDR
16244: GO 17173
16246: LD_INT 4
16248: DOUBLE
16249: EQUAL
16250: IFTRUE 16254
16252: GO 16280
16254: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
16255: LD_ADDR_VAR 0 3
16259: PUSH
16260: LD_INT 2
16262: PUSH
16263: LD_INT 3
16265: PUSH
16266: LD_INT 4
16268: PUSH
16269: LD_INT 5
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: ST_TO_ADDR
16278: GO 17173
16280: LD_INT 5
16282: DOUBLE
16283: EQUAL
16284: IFTRUE 16288
16286: GO 16314
16288: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
16289: LD_ADDR_VAR 0 3
16293: PUSH
16294: LD_INT 2
16296: PUSH
16297: LD_INT 3
16299: PUSH
16300: LD_INT 4
16302: PUSH
16303: LD_INT 5
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: ST_TO_ADDR
16312: GO 17173
16314: LD_INT 9
16316: DOUBLE
16317: EQUAL
16318: IFTRUE 16322
16320: GO 16348
16322: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
16323: LD_ADDR_VAR 0 3
16327: PUSH
16328: LD_INT 2
16330: PUSH
16331: LD_INT 3
16333: PUSH
16334: LD_INT 4
16336: PUSH
16337: LD_INT 5
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: ST_TO_ADDR
16346: GO 17173
16348: LD_INT 7
16350: DOUBLE
16351: EQUAL
16352: IFTRUE 16356
16354: GO 16382
16356: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
16357: LD_ADDR_VAR 0 3
16361: PUSH
16362: LD_INT 2
16364: PUSH
16365: LD_INT 3
16367: PUSH
16368: LD_INT 4
16370: PUSH
16371: LD_INT 5
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: ST_TO_ADDR
16380: GO 17173
16382: LD_INT 12
16384: DOUBLE
16385: EQUAL
16386: IFTRUE 16390
16388: GO 16416
16390: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
16391: LD_ADDR_VAR 0 3
16395: PUSH
16396: LD_INT 2
16398: PUSH
16399: LD_INT 3
16401: PUSH
16402: LD_INT 4
16404: PUSH
16405: LD_INT 5
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: ST_TO_ADDR
16414: GO 17173
16416: LD_INT 13
16418: DOUBLE
16419: EQUAL
16420: IFTRUE 16424
16422: GO 16450
16424: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
16425: LD_ADDR_VAR 0 3
16429: PUSH
16430: LD_INT 2
16432: PUSH
16433: LD_INT 3
16435: PUSH
16436: LD_INT 4
16438: PUSH
16439: LD_INT 5
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: ST_TO_ADDR
16448: GO 17173
16450: LD_INT 14
16452: DOUBLE
16453: EQUAL
16454: IFTRUE 16458
16456: GO 16476
16458: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
16459: LD_ADDR_VAR 0 3
16463: PUSH
16464: LD_INT 4
16466: PUSH
16467: LD_INT 5
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: ST_TO_ADDR
16474: GO 17173
16476: LD_INT 6
16478: DOUBLE
16479: EQUAL
16480: IFTRUE 16484
16482: GO 16502
16484: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
16485: LD_ADDR_VAR 0 3
16489: PUSH
16490: LD_INT 4
16492: PUSH
16493: LD_INT 5
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: ST_TO_ADDR
16500: GO 17173
16502: LD_INT 10
16504: DOUBLE
16505: EQUAL
16506: IFTRUE 16510
16508: GO 16528
16510: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
16511: LD_ADDR_VAR 0 3
16515: PUSH
16516: LD_INT 4
16518: PUSH
16519: LD_INT 5
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: ST_TO_ADDR
16526: GO 17173
16528: LD_INT 22
16530: DOUBLE
16531: EQUAL
16532: IFTRUE 16536
16534: GO 16562
16536: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
16537: LD_ADDR_VAR 0 3
16541: PUSH
16542: LD_INT 11
16544: PUSH
16545: LD_INT 12
16547: PUSH
16548: LD_INT 13
16550: PUSH
16551: LD_INT 14
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: ST_TO_ADDR
16560: GO 17173
16562: LD_INT 23
16564: DOUBLE
16565: EQUAL
16566: IFTRUE 16570
16568: GO 16596
16570: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
16571: LD_ADDR_VAR 0 3
16575: PUSH
16576: LD_INT 11
16578: PUSH
16579: LD_INT 12
16581: PUSH
16582: LD_INT 13
16584: PUSH
16585: LD_INT 14
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: ST_TO_ADDR
16594: GO 17173
16596: LD_INT 24
16598: DOUBLE
16599: EQUAL
16600: IFTRUE 16604
16602: GO 16630
16604: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
16605: LD_ADDR_VAR 0 3
16609: PUSH
16610: LD_INT 11
16612: PUSH
16613: LD_INT 12
16615: PUSH
16616: LD_INT 13
16618: PUSH
16619: LD_INT 14
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: ST_TO_ADDR
16628: GO 17173
16630: LD_INT 30
16632: DOUBLE
16633: EQUAL
16634: IFTRUE 16638
16636: GO 16664
16638: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
16639: LD_ADDR_VAR 0 3
16643: PUSH
16644: LD_INT 11
16646: PUSH
16647: LD_INT 12
16649: PUSH
16650: LD_INT 13
16652: PUSH
16653: LD_INT 14
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: ST_TO_ADDR
16662: GO 17173
16664: LD_INT 25
16666: DOUBLE
16667: EQUAL
16668: IFTRUE 16672
16670: GO 16690
16672: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
16673: LD_ADDR_VAR 0 3
16677: PUSH
16678: LD_INT 13
16680: PUSH
16681: LD_INT 14
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: ST_TO_ADDR
16688: GO 17173
16690: LD_INT 27
16692: DOUBLE
16693: EQUAL
16694: IFTRUE 16698
16696: GO 16716
16698: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
16699: LD_ADDR_VAR 0 3
16703: PUSH
16704: LD_INT 13
16706: PUSH
16707: LD_INT 14
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: ST_TO_ADDR
16714: GO 17173
16716: LD_EXP 100
16720: DOUBLE
16721: EQUAL
16722: IFTRUE 16726
16724: GO 16752
16726: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
16727: LD_ADDR_VAR 0 3
16731: PUSH
16732: LD_INT 11
16734: PUSH
16735: LD_INT 12
16737: PUSH
16738: LD_INT 13
16740: PUSH
16741: LD_INT 14
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: ST_TO_ADDR
16750: GO 17173
16752: LD_INT 28
16754: DOUBLE
16755: EQUAL
16756: IFTRUE 16760
16758: GO 16778
16760: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
16761: LD_ADDR_VAR 0 3
16765: PUSH
16766: LD_INT 13
16768: PUSH
16769: LD_INT 14
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: ST_TO_ADDR
16776: GO 17173
16778: LD_INT 29
16780: DOUBLE
16781: EQUAL
16782: IFTRUE 16786
16784: GO 16804
16786: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
16787: LD_ADDR_VAR 0 3
16791: PUSH
16792: LD_INT 13
16794: PUSH
16795: LD_INT 14
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: ST_TO_ADDR
16802: GO 17173
16804: LD_INT 31
16806: DOUBLE
16807: EQUAL
16808: IFTRUE 16812
16810: GO 16830
16812: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
16813: LD_ADDR_VAR 0 3
16817: PUSH
16818: LD_INT 13
16820: PUSH
16821: LD_INT 14
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: ST_TO_ADDR
16828: GO 17173
16830: LD_INT 26
16832: DOUBLE
16833: EQUAL
16834: IFTRUE 16838
16836: GO 16856
16838: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
16839: LD_ADDR_VAR 0 3
16843: PUSH
16844: LD_INT 13
16846: PUSH
16847: LD_INT 14
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: ST_TO_ADDR
16854: GO 17173
16856: LD_INT 42
16858: DOUBLE
16859: EQUAL
16860: IFTRUE 16864
16862: GO 16890
16864: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
16865: LD_ADDR_VAR 0 3
16869: PUSH
16870: LD_INT 21
16872: PUSH
16873: LD_INT 22
16875: PUSH
16876: LD_INT 23
16878: PUSH
16879: LD_INT 24
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: ST_TO_ADDR
16888: GO 17173
16890: LD_INT 43
16892: DOUBLE
16893: EQUAL
16894: IFTRUE 16898
16896: GO 16924
16898: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
16899: LD_ADDR_VAR 0 3
16903: PUSH
16904: LD_INT 21
16906: PUSH
16907: LD_INT 22
16909: PUSH
16910: LD_INT 23
16912: PUSH
16913: LD_INT 24
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: ST_TO_ADDR
16922: GO 17173
16924: LD_INT 44
16926: DOUBLE
16927: EQUAL
16928: IFTRUE 16932
16930: GO 16958
16932: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
16933: LD_ADDR_VAR 0 3
16937: PUSH
16938: LD_INT 21
16940: PUSH
16941: LD_INT 22
16943: PUSH
16944: LD_INT 23
16946: PUSH
16947: LD_INT 24
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: ST_TO_ADDR
16956: GO 17173
16958: LD_INT 45
16960: DOUBLE
16961: EQUAL
16962: IFTRUE 16966
16964: GO 16992
16966: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
16967: LD_ADDR_VAR 0 3
16971: PUSH
16972: LD_INT 21
16974: PUSH
16975: LD_INT 22
16977: PUSH
16978: LD_INT 23
16980: PUSH
16981: LD_INT 24
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: ST_TO_ADDR
16990: GO 17173
16992: LD_INT 49
16994: DOUBLE
16995: EQUAL
16996: IFTRUE 17000
16998: GO 17026
17000: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17001: LD_ADDR_VAR 0 3
17005: PUSH
17006: LD_INT 21
17008: PUSH
17009: LD_INT 22
17011: PUSH
17012: LD_INT 23
17014: PUSH
17015: LD_INT 24
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: ST_TO_ADDR
17024: GO 17173
17026: LD_INT 51
17028: DOUBLE
17029: EQUAL
17030: IFTRUE 17034
17032: GO 17060
17034: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17035: LD_ADDR_VAR 0 3
17039: PUSH
17040: LD_INT 21
17042: PUSH
17043: LD_INT 22
17045: PUSH
17046: LD_INT 23
17048: PUSH
17049: LD_INT 24
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: ST_TO_ADDR
17058: GO 17173
17060: LD_INT 52
17062: DOUBLE
17063: EQUAL
17064: IFTRUE 17068
17066: GO 17094
17068: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17069: LD_ADDR_VAR 0 3
17073: PUSH
17074: LD_INT 21
17076: PUSH
17077: LD_INT 22
17079: PUSH
17080: LD_INT 23
17082: PUSH
17083: LD_INT 24
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: ST_TO_ADDR
17092: GO 17173
17094: LD_INT 53
17096: DOUBLE
17097: EQUAL
17098: IFTRUE 17102
17100: GO 17120
17102: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17103: LD_ADDR_VAR 0 3
17107: PUSH
17108: LD_INT 23
17110: PUSH
17111: LD_INT 24
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: ST_TO_ADDR
17118: GO 17173
17120: LD_INT 46
17122: DOUBLE
17123: EQUAL
17124: IFTRUE 17128
17126: GO 17146
17128: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17129: LD_ADDR_VAR 0 3
17133: PUSH
17134: LD_INT 23
17136: PUSH
17137: LD_INT 24
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: ST_TO_ADDR
17144: GO 17173
17146: LD_INT 47
17148: DOUBLE
17149: EQUAL
17150: IFTRUE 17154
17152: GO 17172
17154: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17155: LD_ADDR_VAR 0 3
17159: PUSH
17160: LD_INT 23
17162: PUSH
17163: LD_INT 24
17165: PUSH
17166: EMPTY
17167: LIST
17168: LIST
17169: ST_TO_ADDR
17170: GO 17173
17172: POP
// result := ( chassis in result ) ;
17173: LD_ADDR_VAR 0 3
17177: PUSH
17178: LD_VAR 0 1
17182: PUSH
17183: LD_VAR 0 3
17187: IN
17188: ST_TO_ADDR
// end ;
17189: LD_VAR 0 3
17193: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
17194: LD_INT 0
17196: PPUSH
17197: PPUSH
17198: PPUSH
17199: PPUSH
17200: PPUSH
17201: PPUSH
17202: PPUSH
// result := array ;
17203: LD_ADDR_VAR 0 5
17207: PUSH
17208: LD_VAR 0 1
17212: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
17213: LD_VAR 0 1
17217: NOT
17218: PUSH
17219: LD_VAR 0 2
17223: NOT
17224: OR
17225: PUSH
17226: LD_VAR 0 3
17230: NOT
17231: OR
17232: PUSH
17233: LD_VAR 0 2
17237: PUSH
17238: LD_VAR 0 1
17242: GREATER
17243: OR
17244: PUSH
17245: LD_VAR 0 3
17249: PUSH
17250: LD_VAR 0 1
17254: GREATER
17255: OR
17256: IFFALSE 17260
// exit ;
17258: GO 17556
// if direction then
17260: LD_VAR 0 4
17264: IFFALSE 17328
// begin d := 1 ;
17266: LD_ADDR_VAR 0 9
17270: PUSH
17271: LD_INT 1
17273: ST_TO_ADDR
// if i_from > i_to then
17274: LD_VAR 0 2
17278: PUSH
17279: LD_VAR 0 3
17283: GREATER
17284: IFFALSE 17310
// length := ( array - i_from ) + i_to else
17286: LD_ADDR_VAR 0 11
17290: PUSH
17291: LD_VAR 0 1
17295: PUSH
17296: LD_VAR 0 2
17300: MINUS
17301: PUSH
17302: LD_VAR 0 3
17306: PLUS
17307: ST_TO_ADDR
17308: GO 17326
// length := i_to - i_from ;
17310: LD_ADDR_VAR 0 11
17314: PUSH
17315: LD_VAR 0 3
17319: PUSH
17320: LD_VAR 0 2
17324: MINUS
17325: ST_TO_ADDR
// end else
17326: GO 17389
// begin d := - 1 ;
17328: LD_ADDR_VAR 0 9
17332: PUSH
17333: LD_INT 1
17335: NEG
17336: ST_TO_ADDR
// if i_from > i_to then
17337: LD_VAR 0 2
17341: PUSH
17342: LD_VAR 0 3
17346: GREATER
17347: IFFALSE 17367
// length := i_from - i_to else
17349: LD_ADDR_VAR 0 11
17353: PUSH
17354: LD_VAR 0 2
17358: PUSH
17359: LD_VAR 0 3
17363: MINUS
17364: ST_TO_ADDR
17365: GO 17389
// length := ( array - i_to ) + i_from ;
17367: LD_ADDR_VAR 0 11
17371: PUSH
17372: LD_VAR 0 1
17376: PUSH
17377: LD_VAR 0 3
17381: MINUS
17382: PUSH
17383: LD_VAR 0 2
17387: PLUS
17388: ST_TO_ADDR
// end ; if not length then
17389: LD_VAR 0 11
17393: NOT
17394: IFFALSE 17398
// exit ;
17396: GO 17556
// tmp := array ;
17398: LD_ADDR_VAR 0 10
17402: PUSH
17403: LD_VAR 0 1
17407: ST_TO_ADDR
// for i = 1 to length do
17408: LD_ADDR_VAR 0 6
17412: PUSH
17413: DOUBLE
17414: LD_INT 1
17416: DEC
17417: ST_TO_ADDR
17418: LD_VAR 0 11
17422: PUSH
17423: FOR_TO
17424: IFFALSE 17544
// begin for j = 1 to array do
17426: LD_ADDR_VAR 0 7
17430: PUSH
17431: DOUBLE
17432: LD_INT 1
17434: DEC
17435: ST_TO_ADDR
17436: LD_VAR 0 1
17440: PUSH
17441: FOR_TO
17442: IFFALSE 17530
// begin k := j + d ;
17444: LD_ADDR_VAR 0 8
17448: PUSH
17449: LD_VAR 0 7
17453: PUSH
17454: LD_VAR 0 9
17458: PLUS
17459: ST_TO_ADDR
// if k > array then
17460: LD_VAR 0 8
17464: PUSH
17465: LD_VAR 0 1
17469: GREATER
17470: IFFALSE 17480
// k := 1 ;
17472: LD_ADDR_VAR 0 8
17476: PUSH
17477: LD_INT 1
17479: ST_TO_ADDR
// if not k then
17480: LD_VAR 0 8
17484: NOT
17485: IFFALSE 17497
// k := array ;
17487: LD_ADDR_VAR 0 8
17491: PUSH
17492: LD_VAR 0 1
17496: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
17497: LD_ADDR_VAR 0 10
17501: PUSH
17502: LD_VAR 0 10
17506: PPUSH
17507: LD_VAR 0 8
17511: PPUSH
17512: LD_VAR 0 1
17516: PUSH
17517: LD_VAR 0 7
17521: ARRAY
17522: PPUSH
17523: CALL_OW 1
17527: ST_TO_ADDR
// end ;
17528: GO 17441
17530: POP
17531: POP
// array := tmp ;
17532: LD_ADDR_VAR 0 1
17536: PUSH
17537: LD_VAR 0 10
17541: ST_TO_ADDR
// end ;
17542: GO 17423
17544: POP
17545: POP
// result := array ;
17546: LD_ADDR_VAR 0 5
17550: PUSH
17551: LD_VAR 0 1
17555: ST_TO_ADDR
// end ;
17556: LD_VAR 0 5
17560: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
17561: LD_INT 0
17563: PPUSH
17564: PPUSH
// result := 0 ;
17565: LD_ADDR_VAR 0 3
17569: PUSH
17570: LD_INT 0
17572: ST_TO_ADDR
// if not array or not value in array then
17573: LD_VAR 0 1
17577: NOT
17578: PUSH
17579: LD_VAR 0 2
17583: PUSH
17584: LD_VAR 0 1
17588: IN
17589: NOT
17590: OR
17591: IFFALSE 17595
// exit ;
17593: GO 17649
// for i = 1 to array do
17595: LD_ADDR_VAR 0 4
17599: PUSH
17600: DOUBLE
17601: LD_INT 1
17603: DEC
17604: ST_TO_ADDR
17605: LD_VAR 0 1
17609: PUSH
17610: FOR_TO
17611: IFFALSE 17647
// if value = array [ i ] then
17613: LD_VAR 0 2
17617: PUSH
17618: LD_VAR 0 1
17622: PUSH
17623: LD_VAR 0 4
17627: ARRAY
17628: EQUAL
17629: IFFALSE 17645
// begin result := i ;
17631: LD_ADDR_VAR 0 3
17635: PUSH
17636: LD_VAR 0 4
17640: ST_TO_ADDR
// exit ;
17641: POP
17642: POP
17643: GO 17649
// end ;
17645: GO 17610
17647: POP
17648: POP
// end ;
17649: LD_VAR 0 3
17653: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
17654: LD_INT 0
17656: PPUSH
// vc_chassis := chassis ;
17657: LD_ADDR_OWVAR 37
17661: PUSH
17662: LD_VAR 0 1
17666: ST_TO_ADDR
// vc_engine := engine ;
17667: LD_ADDR_OWVAR 39
17671: PUSH
17672: LD_VAR 0 2
17676: ST_TO_ADDR
// vc_control := control ;
17677: LD_ADDR_OWVAR 38
17681: PUSH
17682: LD_VAR 0 3
17686: ST_TO_ADDR
// vc_weapon := weapon ;
17687: LD_ADDR_OWVAR 40
17691: PUSH
17692: LD_VAR 0 4
17696: ST_TO_ADDR
// vc_fuel_battery := fuel ;
17697: LD_ADDR_OWVAR 41
17701: PUSH
17702: LD_VAR 0 5
17706: ST_TO_ADDR
// end ;
17707: LD_VAR 0 6
17711: RET
// export function WantPlant ( unit ) ; var task ; begin
17712: LD_INT 0
17714: PPUSH
17715: PPUSH
// result := false ;
17716: LD_ADDR_VAR 0 2
17720: PUSH
17721: LD_INT 0
17723: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
17724: LD_ADDR_VAR 0 3
17728: PUSH
17729: LD_VAR 0 1
17733: PPUSH
17734: CALL_OW 437
17738: ST_TO_ADDR
// if task then
17739: LD_VAR 0 3
17743: IFFALSE 17771
// if task [ 1 ] [ 1 ] = p then
17745: LD_VAR 0 3
17749: PUSH
17750: LD_INT 1
17752: ARRAY
17753: PUSH
17754: LD_INT 1
17756: ARRAY
17757: PUSH
17758: LD_STRING p
17760: EQUAL
17761: IFFALSE 17771
// result := true ;
17763: LD_ADDR_VAR 0 2
17767: PUSH
17768: LD_INT 1
17770: ST_TO_ADDR
// end ;
17771: LD_VAR 0 2
17775: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
17776: LD_INT 0
17778: PPUSH
17779: PPUSH
17780: PPUSH
17781: PPUSH
// if pos < 1 then
17782: LD_VAR 0 2
17786: PUSH
17787: LD_INT 1
17789: LESS
17790: IFFALSE 17794
// exit ;
17792: GO 18097
// if pos = 1 then
17794: LD_VAR 0 2
17798: PUSH
17799: LD_INT 1
17801: EQUAL
17802: IFFALSE 17835
// result := Replace ( arr , pos [ 1 ] , value ) else
17804: LD_ADDR_VAR 0 4
17808: PUSH
17809: LD_VAR 0 1
17813: PPUSH
17814: LD_VAR 0 2
17818: PUSH
17819: LD_INT 1
17821: ARRAY
17822: PPUSH
17823: LD_VAR 0 3
17827: PPUSH
17828: CALL_OW 1
17832: ST_TO_ADDR
17833: GO 18097
// begin tmp := arr ;
17835: LD_ADDR_VAR 0 6
17839: PUSH
17840: LD_VAR 0 1
17844: ST_TO_ADDR
// s_arr := [ tmp ] ;
17845: LD_ADDR_VAR 0 7
17849: PUSH
17850: LD_VAR 0 6
17854: PUSH
17855: EMPTY
17856: LIST
17857: ST_TO_ADDR
// for i = 1 to pos - 1 do
17858: LD_ADDR_VAR 0 5
17862: PUSH
17863: DOUBLE
17864: LD_INT 1
17866: DEC
17867: ST_TO_ADDR
17868: LD_VAR 0 2
17872: PUSH
17873: LD_INT 1
17875: MINUS
17876: PUSH
17877: FOR_TO
17878: IFFALSE 17923
// begin tmp := tmp [ pos [ i ] ] ;
17880: LD_ADDR_VAR 0 6
17884: PUSH
17885: LD_VAR 0 6
17889: PUSH
17890: LD_VAR 0 2
17894: PUSH
17895: LD_VAR 0 5
17899: ARRAY
17900: ARRAY
17901: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
17902: LD_ADDR_VAR 0 7
17906: PUSH
17907: LD_VAR 0 7
17911: PUSH
17912: LD_VAR 0 6
17916: PUSH
17917: EMPTY
17918: LIST
17919: ADD
17920: ST_TO_ADDR
// end ;
17921: GO 17877
17923: POP
17924: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
17925: LD_ADDR_VAR 0 6
17929: PUSH
17930: LD_VAR 0 6
17934: PPUSH
17935: LD_VAR 0 2
17939: PUSH
17940: LD_VAR 0 2
17944: ARRAY
17945: PPUSH
17946: LD_VAR 0 3
17950: PPUSH
17951: CALL_OW 1
17955: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
17956: LD_ADDR_VAR 0 7
17960: PUSH
17961: LD_VAR 0 7
17965: PPUSH
17966: LD_VAR 0 7
17970: PPUSH
17971: LD_VAR 0 6
17975: PPUSH
17976: CALL_OW 1
17980: ST_TO_ADDR
// for i = s_arr downto 2 do
17981: LD_ADDR_VAR 0 5
17985: PUSH
17986: DOUBLE
17987: LD_VAR 0 7
17991: INC
17992: ST_TO_ADDR
17993: LD_INT 2
17995: PUSH
17996: FOR_DOWNTO
17997: IFFALSE 18081
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
17999: LD_ADDR_VAR 0 6
18003: PUSH
18004: LD_VAR 0 7
18008: PUSH
18009: LD_VAR 0 5
18013: PUSH
18014: LD_INT 1
18016: MINUS
18017: ARRAY
18018: PPUSH
18019: LD_VAR 0 2
18023: PUSH
18024: LD_VAR 0 5
18028: PUSH
18029: LD_INT 1
18031: MINUS
18032: ARRAY
18033: PPUSH
18034: LD_VAR 0 7
18038: PUSH
18039: LD_VAR 0 5
18043: ARRAY
18044: PPUSH
18045: CALL_OW 1
18049: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18050: LD_ADDR_VAR 0 7
18054: PUSH
18055: LD_VAR 0 7
18059: PPUSH
18060: LD_VAR 0 5
18064: PUSH
18065: LD_INT 1
18067: MINUS
18068: PPUSH
18069: LD_VAR 0 6
18073: PPUSH
18074: CALL_OW 1
18078: ST_TO_ADDR
// end ;
18079: GO 17996
18081: POP
18082: POP
// result := s_arr [ 1 ] ;
18083: LD_ADDR_VAR 0 4
18087: PUSH
18088: LD_VAR 0 7
18092: PUSH
18093: LD_INT 1
18095: ARRAY
18096: ST_TO_ADDR
// end ; end ;
18097: LD_VAR 0 4
18101: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18102: LD_INT 0
18104: PPUSH
18105: PPUSH
// if not list then
18106: LD_VAR 0 1
18110: NOT
18111: IFFALSE 18115
// exit ;
18113: GO 18206
// i := list [ pos1 ] ;
18115: LD_ADDR_VAR 0 5
18119: PUSH
18120: LD_VAR 0 1
18124: PUSH
18125: LD_VAR 0 2
18129: ARRAY
18130: ST_TO_ADDR
// if not i then
18131: LD_VAR 0 5
18135: NOT
18136: IFFALSE 18140
// exit ;
18138: GO 18206
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18140: LD_ADDR_VAR 0 1
18144: PUSH
18145: LD_VAR 0 1
18149: PPUSH
18150: LD_VAR 0 2
18154: PPUSH
18155: LD_VAR 0 1
18159: PUSH
18160: LD_VAR 0 3
18164: ARRAY
18165: PPUSH
18166: CALL_OW 1
18170: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
18171: LD_ADDR_VAR 0 1
18175: PUSH
18176: LD_VAR 0 1
18180: PPUSH
18181: LD_VAR 0 3
18185: PPUSH
18186: LD_VAR 0 5
18190: PPUSH
18191: CALL_OW 1
18195: ST_TO_ADDR
// result := list ;
18196: LD_ADDR_VAR 0 4
18200: PUSH
18201: LD_VAR 0 1
18205: ST_TO_ADDR
// end ;
18206: LD_VAR 0 4
18210: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
18211: LD_INT 0
18213: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
18214: LD_ADDR_VAR 0 5
18218: PUSH
18219: LD_VAR 0 1
18223: PPUSH
18224: CALL_OW 250
18228: PPUSH
18229: LD_VAR 0 1
18233: PPUSH
18234: CALL_OW 251
18238: PPUSH
18239: LD_VAR 0 2
18243: PPUSH
18244: LD_VAR 0 3
18248: PPUSH
18249: LD_VAR 0 4
18253: PPUSH
18254: CALL 18264 0 5
18258: ST_TO_ADDR
// end ;
18259: LD_VAR 0 5
18263: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
18264: LD_INT 0
18266: PPUSH
18267: PPUSH
18268: PPUSH
18269: PPUSH
// if not list then
18270: LD_VAR 0 3
18274: NOT
18275: IFFALSE 18279
// exit ;
18277: GO 18667
// result := [ ] ;
18279: LD_ADDR_VAR 0 6
18283: PUSH
18284: EMPTY
18285: ST_TO_ADDR
// for i in list do
18286: LD_ADDR_VAR 0 7
18290: PUSH
18291: LD_VAR 0 3
18295: PUSH
18296: FOR_IN
18297: IFFALSE 18499
// begin tmp := GetDistUnitXY ( i , x , y ) ;
18299: LD_ADDR_VAR 0 9
18303: PUSH
18304: LD_VAR 0 7
18308: PPUSH
18309: LD_VAR 0 1
18313: PPUSH
18314: LD_VAR 0 2
18318: PPUSH
18319: CALL_OW 297
18323: ST_TO_ADDR
// if not result then
18324: LD_VAR 0 6
18328: NOT
18329: IFFALSE 18355
// result := [ [ i , tmp ] ] else
18331: LD_ADDR_VAR 0 6
18335: PUSH
18336: LD_VAR 0 7
18340: PUSH
18341: LD_VAR 0 9
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: EMPTY
18351: LIST
18352: ST_TO_ADDR
18353: GO 18497
// begin if result [ result ] [ 2 ] < tmp then
18355: LD_VAR 0 6
18359: PUSH
18360: LD_VAR 0 6
18364: ARRAY
18365: PUSH
18366: LD_INT 2
18368: ARRAY
18369: PUSH
18370: LD_VAR 0 9
18374: LESS
18375: IFFALSE 18417
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
18377: LD_ADDR_VAR 0 6
18381: PUSH
18382: LD_VAR 0 6
18386: PPUSH
18387: LD_VAR 0 6
18391: PUSH
18392: LD_INT 1
18394: PLUS
18395: PPUSH
18396: LD_VAR 0 7
18400: PUSH
18401: LD_VAR 0 9
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PPUSH
18410: CALL_OW 2
18414: ST_TO_ADDR
18415: GO 18497
// for j = 1 to result do
18417: LD_ADDR_VAR 0 8
18421: PUSH
18422: DOUBLE
18423: LD_INT 1
18425: DEC
18426: ST_TO_ADDR
18427: LD_VAR 0 6
18431: PUSH
18432: FOR_TO
18433: IFFALSE 18495
// begin if tmp < result [ j ] [ 2 ] then
18435: LD_VAR 0 9
18439: PUSH
18440: LD_VAR 0 6
18444: PUSH
18445: LD_VAR 0 8
18449: ARRAY
18450: PUSH
18451: LD_INT 2
18453: ARRAY
18454: LESS
18455: IFFALSE 18493
// begin result := Insert ( result , j , [ i , tmp ] ) ;
18457: LD_ADDR_VAR 0 6
18461: PUSH
18462: LD_VAR 0 6
18466: PPUSH
18467: LD_VAR 0 8
18471: PPUSH
18472: LD_VAR 0 7
18476: PUSH
18477: LD_VAR 0 9
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PPUSH
18486: CALL_OW 2
18490: ST_TO_ADDR
// break ;
18491: GO 18495
// end ; end ;
18493: GO 18432
18495: POP
18496: POP
// end ; end ;
18497: GO 18296
18499: POP
18500: POP
// if result and not asc then
18501: LD_VAR 0 6
18505: PUSH
18506: LD_VAR 0 4
18510: NOT
18511: AND
18512: IFFALSE 18587
// begin tmp := result ;
18514: LD_ADDR_VAR 0 9
18518: PUSH
18519: LD_VAR 0 6
18523: ST_TO_ADDR
// for i = tmp downto 1 do
18524: LD_ADDR_VAR 0 7
18528: PUSH
18529: DOUBLE
18530: LD_VAR 0 9
18534: INC
18535: ST_TO_ADDR
18536: LD_INT 1
18538: PUSH
18539: FOR_DOWNTO
18540: IFFALSE 18585
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
18542: LD_ADDR_VAR 0 6
18546: PUSH
18547: LD_VAR 0 6
18551: PPUSH
18552: LD_VAR 0 9
18556: PUSH
18557: LD_VAR 0 7
18561: MINUS
18562: PUSH
18563: LD_INT 1
18565: PLUS
18566: PPUSH
18567: LD_VAR 0 9
18571: PUSH
18572: LD_VAR 0 7
18576: ARRAY
18577: PPUSH
18578: CALL_OW 1
18582: ST_TO_ADDR
18583: GO 18539
18585: POP
18586: POP
// end ; tmp := [ ] ;
18587: LD_ADDR_VAR 0 9
18591: PUSH
18592: EMPTY
18593: ST_TO_ADDR
// if mode then
18594: LD_VAR 0 5
18598: IFFALSE 18667
// begin for i = 1 to result do
18600: LD_ADDR_VAR 0 7
18604: PUSH
18605: DOUBLE
18606: LD_INT 1
18608: DEC
18609: ST_TO_ADDR
18610: LD_VAR 0 6
18614: PUSH
18615: FOR_TO
18616: IFFALSE 18655
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
18618: LD_ADDR_VAR 0 9
18622: PUSH
18623: LD_VAR 0 9
18627: PPUSH
18628: LD_VAR 0 7
18632: PPUSH
18633: LD_VAR 0 6
18637: PUSH
18638: LD_VAR 0 7
18642: ARRAY
18643: PUSH
18644: LD_INT 1
18646: ARRAY
18647: PPUSH
18648: CALL_OW 1
18652: ST_TO_ADDR
18653: GO 18615
18655: POP
18656: POP
// result := tmp ;
18657: LD_ADDR_VAR 0 6
18661: PUSH
18662: LD_VAR 0 9
18666: ST_TO_ADDR
// end ; end ;
18667: LD_VAR 0 6
18671: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
18672: LD_INT 0
18674: PPUSH
18675: PPUSH
18676: PPUSH
18677: PPUSH
18678: PPUSH
18679: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
18680: LD_ADDR_VAR 0 5
18684: PUSH
18685: LD_INT 0
18687: PUSH
18688: LD_INT 0
18690: PUSH
18691: LD_INT 0
18693: PUSH
18694: EMPTY
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: ST_TO_ADDR
// if not x or not y then
18702: LD_VAR 0 2
18706: NOT
18707: PUSH
18708: LD_VAR 0 3
18712: NOT
18713: OR
18714: IFFALSE 18718
// exit ;
18716: GO 20370
// if not range then
18718: LD_VAR 0 4
18722: NOT
18723: IFFALSE 18733
// range := 10 ;
18725: LD_ADDR_VAR 0 4
18729: PUSH
18730: LD_INT 10
18732: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18733: LD_ADDR_VAR 0 8
18737: PUSH
18738: LD_INT 81
18740: PUSH
18741: LD_VAR 0 1
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 92
18752: PUSH
18753: LD_VAR 0 2
18757: PUSH
18758: LD_VAR 0 3
18762: PUSH
18763: LD_VAR 0 4
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 3
18776: PUSH
18777: LD_INT 21
18779: PUSH
18780: LD_INT 3
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: LIST
18795: PPUSH
18796: CALL_OW 69
18800: ST_TO_ADDR
// if not tmp then
18801: LD_VAR 0 8
18805: NOT
18806: IFFALSE 18810
// exit ;
18808: GO 20370
// for i in tmp do
18810: LD_ADDR_VAR 0 6
18814: PUSH
18815: LD_VAR 0 8
18819: PUSH
18820: FOR_IN
18821: IFFALSE 20345
// begin points := [ 0 , 0 , 0 ] ;
18823: LD_ADDR_VAR 0 9
18827: PUSH
18828: LD_INT 0
18830: PUSH
18831: LD_INT 0
18833: PUSH
18834: LD_INT 0
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: LIST
18841: ST_TO_ADDR
// bpoints := 1 ;
18842: LD_ADDR_VAR 0 10
18846: PUSH
18847: LD_INT 1
18849: ST_TO_ADDR
// case GetType ( i ) of unit_human :
18850: LD_VAR 0 6
18854: PPUSH
18855: CALL_OW 247
18859: PUSH
18860: LD_INT 1
18862: DOUBLE
18863: EQUAL
18864: IFTRUE 18868
18866: GO 19446
18868: POP
// begin if GetClass ( i ) = 1 then
18869: LD_VAR 0 6
18873: PPUSH
18874: CALL_OW 257
18878: PUSH
18879: LD_INT 1
18881: EQUAL
18882: IFFALSE 18903
// points := [ 10 , 5 , 3 ] ;
18884: LD_ADDR_VAR 0 9
18888: PUSH
18889: LD_INT 10
18891: PUSH
18892: LD_INT 5
18894: PUSH
18895: LD_INT 3
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: LIST
18902: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
18903: LD_VAR 0 6
18907: PPUSH
18908: CALL_OW 257
18912: PUSH
18913: LD_INT 2
18915: PUSH
18916: LD_INT 3
18918: PUSH
18919: LD_INT 4
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: LIST
18926: IN
18927: IFFALSE 18948
// points := [ 3 , 2 , 1 ] ;
18929: LD_ADDR_VAR 0 9
18933: PUSH
18934: LD_INT 3
18936: PUSH
18937: LD_INT 2
18939: PUSH
18940: LD_INT 1
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: LIST
18947: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18948: LD_VAR 0 6
18952: PPUSH
18953: CALL_OW 257
18957: PUSH
18958: LD_INT 5
18960: EQUAL
18961: IFFALSE 18982
// points := [ 130 , 5 , 2 ] ;
18963: LD_ADDR_VAR 0 9
18967: PUSH
18968: LD_INT 130
18970: PUSH
18971: LD_INT 5
18973: PUSH
18974: LD_INT 2
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: LIST
18981: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18982: LD_VAR 0 6
18986: PPUSH
18987: CALL_OW 257
18991: PUSH
18992: LD_INT 8
18994: EQUAL
18995: IFFALSE 19016
// points := [ 35 , 35 , 30 ] ;
18997: LD_ADDR_VAR 0 9
19001: PUSH
19002: LD_INT 35
19004: PUSH
19005: LD_INT 35
19007: PUSH
19008: LD_INT 30
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: LIST
19015: ST_TO_ADDR
// if GetClass ( i ) = 9 then
19016: LD_VAR 0 6
19020: PPUSH
19021: CALL_OW 257
19025: PUSH
19026: LD_INT 9
19028: EQUAL
19029: IFFALSE 19050
// points := [ 20 , 55 , 40 ] ;
19031: LD_ADDR_VAR 0 9
19035: PUSH
19036: LD_INT 20
19038: PUSH
19039: LD_INT 55
19041: PUSH
19042: LD_INT 40
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: LIST
19049: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19050: LD_VAR 0 6
19054: PPUSH
19055: CALL_OW 257
19059: PUSH
19060: LD_INT 12
19062: PUSH
19063: LD_INT 16
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: IN
19070: IFFALSE 19091
// points := [ 5 , 3 , 2 ] ;
19072: LD_ADDR_VAR 0 9
19076: PUSH
19077: LD_INT 5
19079: PUSH
19080: LD_INT 3
19082: PUSH
19083: LD_INT 2
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: LIST
19090: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19091: LD_VAR 0 6
19095: PPUSH
19096: CALL_OW 257
19100: PUSH
19101: LD_INT 17
19103: EQUAL
19104: IFFALSE 19125
// points := [ 100 , 50 , 75 ] ;
19106: LD_ADDR_VAR 0 9
19110: PUSH
19111: LD_INT 100
19113: PUSH
19114: LD_INT 50
19116: PUSH
19117: LD_INT 75
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: LIST
19124: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19125: LD_VAR 0 6
19129: PPUSH
19130: CALL_OW 257
19134: PUSH
19135: LD_INT 15
19137: EQUAL
19138: IFFALSE 19159
// points := [ 10 , 5 , 3 ] ;
19140: LD_ADDR_VAR 0 9
19144: PUSH
19145: LD_INT 10
19147: PUSH
19148: LD_INT 5
19150: PUSH
19151: LD_INT 3
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: LIST
19158: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19159: LD_VAR 0 6
19163: PPUSH
19164: CALL_OW 257
19168: PUSH
19169: LD_INT 14
19171: EQUAL
19172: IFFALSE 19193
// points := [ 10 , 0 , 0 ] ;
19174: LD_ADDR_VAR 0 9
19178: PUSH
19179: LD_INT 10
19181: PUSH
19182: LD_INT 0
19184: PUSH
19185: LD_INT 0
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: LIST
19192: ST_TO_ADDR
// if GetClass ( i ) = 11 then
19193: LD_VAR 0 6
19197: PPUSH
19198: CALL_OW 257
19202: PUSH
19203: LD_INT 11
19205: EQUAL
19206: IFFALSE 19227
// points := [ 30 , 10 , 5 ] ;
19208: LD_ADDR_VAR 0 9
19212: PUSH
19213: LD_INT 30
19215: PUSH
19216: LD_INT 10
19218: PUSH
19219: LD_INT 5
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: LIST
19226: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
19227: LD_VAR 0 1
19231: PPUSH
19232: LD_INT 5
19234: PPUSH
19235: CALL_OW 321
19239: PUSH
19240: LD_INT 2
19242: EQUAL
19243: IFFALSE 19260
// bpoints := bpoints * 1.8 ;
19245: LD_ADDR_VAR 0 10
19249: PUSH
19250: LD_VAR 0 10
19254: PUSH
19255: LD_REAL  1.80000000000000E+0000
19258: MUL
19259: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
19260: LD_VAR 0 6
19264: PPUSH
19265: CALL_OW 257
19269: PUSH
19270: LD_INT 1
19272: PUSH
19273: LD_INT 2
19275: PUSH
19276: LD_INT 3
19278: PUSH
19279: LD_INT 4
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: IN
19288: PUSH
19289: LD_VAR 0 1
19293: PPUSH
19294: LD_INT 51
19296: PPUSH
19297: CALL_OW 321
19301: PUSH
19302: LD_INT 2
19304: EQUAL
19305: AND
19306: IFFALSE 19323
// bpoints := bpoints * 1.2 ;
19308: LD_ADDR_VAR 0 10
19312: PUSH
19313: LD_VAR 0 10
19317: PUSH
19318: LD_REAL  1.20000000000000E+0000
19321: MUL
19322: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
19323: LD_VAR 0 6
19327: PPUSH
19328: CALL_OW 257
19332: PUSH
19333: LD_INT 5
19335: PUSH
19336: LD_INT 7
19338: PUSH
19339: LD_INT 9
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: LIST
19346: IN
19347: PUSH
19348: LD_VAR 0 1
19352: PPUSH
19353: LD_INT 52
19355: PPUSH
19356: CALL_OW 321
19360: PUSH
19361: LD_INT 2
19363: EQUAL
19364: AND
19365: IFFALSE 19382
// bpoints := bpoints * 1.5 ;
19367: LD_ADDR_VAR 0 10
19371: PUSH
19372: LD_VAR 0 10
19376: PUSH
19377: LD_REAL  1.50000000000000E+0000
19380: MUL
19381: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
19382: LD_VAR 0 1
19386: PPUSH
19387: LD_INT 66
19389: PPUSH
19390: CALL_OW 321
19394: PUSH
19395: LD_INT 2
19397: EQUAL
19398: IFFALSE 19415
// bpoints := bpoints * 1.1 ;
19400: LD_ADDR_VAR 0 10
19404: PUSH
19405: LD_VAR 0 10
19409: PUSH
19410: LD_REAL  1.10000000000000E+0000
19413: MUL
19414: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
19415: LD_ADDR_VAR 0 10
19419: PUSH
19420: LD_VAR 0 10
19424: PUSH
19425: LD_VAR 0 6
19429: PPUSH
19430: LD_INT 1
19432: PPUSH
19433: CALL_OW 259
19437: PUSH
19438: LD_REAL  1.15000000000000E+0000
19441: MUL
19442: MUL
19443: ST_TO_ADDR
// end ; unit_vehicle :
19444: GO 20274
19446: LD_INT 2
19448: DOUBLE
19449: EQUAL
19450: IFTRUE 19454
19452: GO 20262
19454: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
19455: LD_VAR 0 6
19459: PPUSH
19460: CALL_OW 264
19464: PUSH
19465: LD_INT 2
19467: PUSH
19468: LD_INT 42
19470: PUSH
19471: LD_INT 24
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: LIST
19478: IN
19479: IFFALSE 19500
// points := [ 25 , 5 , 3 ] ;
19481: LD_ADDR_VAR 0 9
19485: PUSH
19486: LD_INT 25
19488: PUSH
19489: LD_INT 5
19491: PUSH
19492: LD_INT 3
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: LIST
19499: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
19500: LD_VAR 0 6
19504: PPUSH
19505: CALL_OW 264
19509: PUSH
19510: LD_INT 4
19512: PUSH
19513: LD_INT 43
19515: PUSH
19516: LD_INT 25
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: LIST
19523: IN
19524: IFFALSE 19545
// points := [ 40 , 15 , 5 ] ;
19526: LD_ADDR_VAR 0 9
19530: PUSH
19531: LD_INT 40
19533: PUSH
19534: LD_INT 15
19536: PUSH
19537: LD_INT 5
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: LIST
19544: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
19545: LD_VAR 0 6
19549: PPUSH
19550: CALL_OW 264
19554: PUSH
19555: LD_INT 3
19557: PUSH
19558: LD_INT 23
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: IN
19565: IFFALSE 19586
// points := [ 7 , 25 , 8 ] ;
19567: LD_ADDR_VAR 0 9
19571: PUSH
19572: LD_INT 7
19574: PUSH
19575: LD_INT 25
19577: PUSH
19578: LD_INT 8
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: LIST
19585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
19586: LD_VAR 0 6
19590: PPUSH
19591: CALL_OW 264
19595: PUSH
19596: LD_INT 5
19598: PUSH
19599: LD_INT 27
19601: PUSH
19602: LD_INT 44
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: LIST
19609: IN
19610: IFFALSE 19631
// points := [ 14 , 50 , 16 ] ;
19612: LD_ADDR_VAR 0 9
19616: PUSH
19617: LD_INT 14
19619: PUSH
19620: LD_INT 50
19622: PUSH
19623: LD_INT 16
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: LIST
19630: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
19631: LD_VAR 0 6
19635: PPUSH
19636: CALL_OW 264
19640: PUSH
19641: LD_INT 6
19643: PUSH
19644: LD_INT 46
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: IN
19651: IFFALSE 19672
// points := [ 32 , 120 , 70 ] ;
19653: LD_ADDR_VAR 0 9
19657: PUSH
19658: LD_INT 32
19660: PUSH
19661: LD_INT 120
19663: PUSH
19664: LD_INT 70
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: LIST
19671: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
19672: LD_VAR 0 6
19676: PPUSH
19677: CALL_OW 264
19681: PUSH
19682: LD_INT 7
19684: PUSH
19685: LD_INT 28
19687: PUSH
19688: LD_INT 45
19690: PUSH
19691: LD_EXP 100
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: IN
19702: IFFALSE 19723
// points := [ 35 , 20 , 45 ] ;
19704: LD_ADDR_VAR 0 9
19708: PUSH
19709: LD_INT 35
19711: PUSH
19712: LD_INT 20
19714: PUSH
19715: LD_INT 45
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: LIST
19722: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
19723: LD_VAR 0 6
19727: PPUSH
19728: CALL_OW 264
19732: PUSH
19733: LD_INT 47
19735: PUSH
19736: EMPTY
19737: LIST
19738: IN
19739: IFFALSE 19760
// points := [ 67 , 45 , 75 ] ;
19741: LD_ADDR_VAR 0 9
19745: PUSH
19746: LD_INT 67
19748: PUSH
19749: LD_INT 45
19751: PUSH
19752: LD_INT 75
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: LIST
19759: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
19760: LD_VAR 0 6
19764: PPUSH
19765: CALL_OW 264
19769: PUSH
19770: LD_INT 26
19772: PUSH
19773: EMPTY
19774: LIST
19775: IN
19776: IFFALSE 19797
// points := [ 120 , 30 , 80 ] ;
19778: LD_ADDR_VAR 0 9
19782: PUSH
19783: LD_INT 120
19785: PUSH
19786: LD_INT 30
19788: PUSH
19789: LD_INT 80
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: LIST
19796: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
19797: LD_VAR 0 6
19801: PPUSH
19802: CALL_OW 264
19806: PUSH
19807: LD_INT 22
19809: PUSH
19810: EMPTY
19811: LIST
19812: IN
19813: IFFALSE 19834
// points := [ 40 , 1 , 1 ] ;
19815: LD_ADDR_VAR 0 9
19819: PUSH
19820: LD_INT 40
19822: PUSH
19823: LD_INT 1
19825: PUSH
19826: LD_INT 1
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: LIST
19833: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
19834: LD_VAR 0 6
19838: PPUSH
19839: CALL_OW 264
19843: PUSH
19844: LD_INT 29
19846: PUSH
19847: EMPTY
19848: LIST
19849: IN
19850: IFFALSE 19871
// points := [ 70 , 200 , 400 ] ;
19852: LD_ADDR_VAR 0 9
19856: PUSH
19857: LD_INT 70
19859: PUSH
19860: LD_INT 200
19862: PUSH
19863: LD_INT 400
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: LIST
19870: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
19871: LD_VAR 0 6
19875: PPUSH
19876: CALL_OW 264
19880: PUSH
19881: LD_INT 14
19883: PUSH
19884: LD_INT 53
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: IN
19891: IFFALSE 19912
// points := [ 40 , 10 , 20 ] ;
19893: LD_ADDR_VAR 0 9
19897: PUSH
19898: LD_INT 40
19900: PUSH
19901: LD_INT 10
19903: PUSH
19904: LD_INT 20
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: LIST
19911: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
19912: LD_VAR 0 6
19916: PPUSH
19917: CALL_OW 264
19921: PUSH
19922: LD_INT 9
19924: PUSH
19925: EMPTY
19926: LIST
19927: IN
19928: IFFALSE 19949
// points := [ 5 , 70 , 20 ] ;
19930: LD_ADDR_VAR 0 9
19934: PUSH
19935: LD_INT 5
19937: PUSH
19938: LD_INT 70
19940: PUSH
19941: LD_INT 20
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: LIST
19948: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19949: LD_VAR 0 6
19953: PPUSH
19954: CALL_OW 264
19958: PUSH
19959: LD_INT 10
19961: PUSH
19962: EMPTY
19963: LIST
19964: IN
19965: IFFALSE 19986
// points := [ 35 , 110 , 70 ] ;
19967: LD_ADDR_VAR 0 9
19971: PUSH
19972: LD_INT 35
19974: PUSH
19975: LD_INT 110
19977: PUSH
19978: LD_INT 70
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: LIST
19985: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19986: LD_VAR 0 6
19990: PPUSH
19991: CALL_OW 265
19995: PUSH
19996: LD_INT 25
19998: EQUAL
19999: IFFALSE 20020
// points := [ 80 , 65 , 100 ] ;
20001: LD_ADDR_VAR 0 9
20005: PUSH
20006: LD_INT 80
20008: PUSH
20009: LD_INT 65
20011: PUSH
20012: LD_INT 100
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: LIST
20019: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
20020: LD_VAR 0 6
20024: PPUSH
20025: CALL_OW 263
20029: PUSH
20030: LD_INT 1
20032: EQUAL
20033: IFFALSE 20068
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20035: LD_ADDR_VAR 0 10
20039: PUSH
20040: LD_VAR 0 10
20044: PUSH
20045: LD_VAR 0 6
20049: PPUSH
20050: CALL_OW 311
20054: PPUSH
20055: LD_INT 3
20057: PPUSH
20058: CALL_OW 259
20062: PUSH
20063: LD_INT 4
20065: MUL
20066: MUL
20067: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20068: LD_VAR 0 6
20072: PPUSH
20073: CALL_OW 263
20077: PUSH
20078: LD_INT 2
20080: EQUAL
20081: IFFALSE 20132
// begin j := IsControledBy ( i ) ;
20083: LD_ADDR_VAR 0 7
20087: PUSH
20088: LD_VAR 0 6
20092: PPUSH
20093: CALL_OW 312
20097: ST_TO_ADDR
// if j then
20098: LD_VAR 0 7
20102: IFFALSE 20132
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20104: LD_ADDR_VAR 0 10
20108: PUSH
20109: LD_VAR 0 10
20113: PUSH
20114: LD_VAR 0 7
20118: PPUSH
20119: LD_INT 3
20121: PPUSH
20122: CALL_OW 259
20126: PUSH
20127: LD_INT 3
20129: MUL
20130: MUL
20131: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20132: LD_VAR 0 6
20136: PPUSH
20137: CALL_OW 264
20141: PUSH
20142: LD_INT 5
20144: PUSH
20145: LD_INT 6
20147: PUSH
20148: LD_INT 46
20150: PUSH
20151: LD_INT 44
20153: PUSH
20154: LD_INT 47
20156: PUSH
20157: LD_INT 45
20159: PUSH
20160: LD_INT 28
20162: PUSH
20163: LD_INT 7
20165: PUSH
20166: LD_INT 27
20168: PUSH
20169: LD_INT 29
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: IN
20184: PUSH
20185: LD_VAR 0 1
20189: PPUSH
20190: LD_INT 52
20192: PPUSH
20193: CALL_OW 321
20197: PUSH
20198: LD_INT 2
20200: EQUAL
20201: AND
20202: IFFALSE 20219
// bpoints := bpoints * 1.2 ;
20204: LD_ADDR_VAR 0 10
20208: PUSH
20209: LD_VAR 0 10
20213: PUSH
20214: LD_REAL  1.20000000000000E+0000
20217: MUL
20218: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
20219: LD_VAR 0 6
20223: PPUSH
20224: CALL_OW 264
20228: PUSH
20229: LD_INT 6
20231: PUSH
20232: LD_INT 46
20234: PUSH
20235: LD_INT 47
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: LIST
20242: IN
20243: IFFALSE 20260
// bpoints := bpoints * 1.2 ;
20245: LD_ADDR_VAR 0 10
20249: PUSH
20250: LD_VAR 0 10
20254: PUSH
20255: LD_REAL  1.20000000000000E+0000
20258: MUL
20259: ST_TO_ADDR
// end ; unit_building :
20260: GO 20274
20262: LD_INT 3
20264: DOUBLE
20265: EQUAL
20266: IFTRUE 20270
20268: GO 20273
20270: POP
// ; end ;
20271: GO 20274
20273: POP
// for j = 1 to 3 do
20274: LD_ADDR_VAR 0 7
20278: PUSH
20279: DOUBLE
20280: LD_INT 1
20282: DEC
20283: ST_TO_ADDR
20284: LD_INT 3
20286: PUSH
20287: FOR_TO
20288: IFFALSE 20341
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
20290: LD_ADDR_VAR 0 5
20294: PUSH
20295: LD_VAR 0 5
20299: PPUSH
20300: LD_VAR 0 7
20304: PPUSH
20305: LD_VAR 0 5
20309: PUSH
20310: LD_VAR 0 7
20314: ARRAY
20315: PUSH
20316: LD_VAR 0 9
20320: PUSH
20321: LD_VAR 0 7
20325: ARRAY
20326: PUSH
20327: LD_VAR 0 10
20331: MUL
20332: PLUS
20333: PPUSH
20334: CALL_OW 1
20338: ST_TO_ADDR
20339: GO 20287
20341: POP
20342: POP
// end ;
20343: GO 18820
20345: POP
20346: POP
// result := Replace ( result , 4 , tmp ) ;
20347: LD_ADDR_VAR 0 5
20351: PUSH
20352: LD_VAR 0 5
20356: PPUSH
20357: LD_INT 4
20359: PPUSH
20360: LD_VAR 0 8
20364: PPUSH
20365: CALL_OW 1
20369: ST_TO_ADDR
// end ;
20370: LD_VAR 0 5
20374: RET
// export function DangerAtRange ( unit , range ) ; begin
20375: LD_INT 0
20377: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
20378: LD_ADDR_VAR 0 3
20382: PUSH
20383: LD_VAR 0 1
20387: PPUSH
20388: CALL_OW 255
20392: PPUSH
20393: LD_VAR 0 1
20397: PPUSH
20398: CALL_OW 250
20402: PPUSH
20403: LD_VAR 0 1
20407: PPUSH
20408: CALL_OW 251
20412: PPUSH
20413: LD_VAR 0 2
20417: PPUSH
20418: CALL 18672 0 4
20422: ST_TO_ADDR
// end ;
20423: LD_VAR 0 3
20427: RET
// export function DangerInArea ( side , area ) ; begin
20428: LD_INT 0
20430: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
20431: LD_ADDR_VAR 0 3
20435: PUSH
20436: LD_VAR 0 2
20440: PPUSH
20441: LD_INT 81
20443: PUSH
20444: LD_VAR 0 1
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PPUSH
20453: CALL_OW 70
20457: ST_TO_ADDR
// end ;
20458: LD_VAR 0 3
20462: RET
// export function IsExtension ( b ) ; begin
20463: LD_INT 0
20465: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
20466: LD_ADDR_VAR 0 2
20470: PUSH
20471: LD_VAR 0 1
20475: PUSH
20476: LD_INT 23
20478: PUSH
20479: LD_INT 20
20481: PUSH
20482: LD_INT 22
20484: PUSH
20485: LD_INT 17
20487: PUSH
20488: LD_INT 24
20490: PUSH
20491: LD_INT 21
20493: PUSH
20494: LD_INT 19
20496: PUSH
20497: LD_INT 16
20499: PUSH
20500: LD_INT 25
20502: PUSH
20503: LD_INT 18
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: IN
20518: ST_TO_ADDR
// end ;
20519: LD_VAR 0 2
20523: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
20524: LD_INT 0
20526: PPUSH
20527: PPUSH
20528: PPUSH
// result := [ ] ;
20529: LD_ADDR_VAR 0 4
20533: PUSH
20534: EMPTY
20535: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
20536: LD_ADDR_VAR 0 5
20540: PUSH
20541: LD_VAR 0 2
20545: PPUSH
20546: LD_INT 21
20548: PUSH
20549: LD_INT 3
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PPUSH
20556: CALL_OW 70
20560: ST_TO_ADDR
// if not tmp then
20561: LD_VAR 0 5
20565: NOT
20566: IFFALSE 20570
// exit ;
20568: GO 20634
// if checkLink then
20570: LD_VAR 0 3
20574: IFFALSE 20624
// begin for i in tmp do
20576: LD_ADDR_VAR 0 6
20580: PUSH
20581: LD_VAR 0 5
20585: PUSH
20586: FOR_IN
20587: IFFALSE 20622
// if GetBase ( i ) <> base then
20589: LD_VAR 0 6
20593: PPUSH
20594: CALL_OW 274
20598: PUSH
20599: LD_VAR 0 1
20603: NONEQUAL
20604: IFFALSE 20620
// ComLinkToBase ( base , i ) ;
20606: LD_VAR 0 1
20610: PPUSH
20611: LD_VAR 0 6
20615: PPUSH
20616: CALL_OW 169
20620: GO 20586
20622: POP
20623: POP
// end ; result := tmp ;
20624: LD_ADDR_VAR 0 4
20628: PUSH
20629: LD_VAR 0 5
20633: ST_TO_ADDR
// end ;
20634: LD_VAR 0 4
20638: RET
// export function ComComplete ( units , b ) ; var i ; begin
20639: LD_INT 0
20641: PPUSH
20642: PPUSH
// if not units then
20643: LD_VAR 0 1
20647: NOT
20648: IFFALSE 20652
// exit ;
20650: GO 20742
// for i in units do
20652: LD_ADDR_VAR 0 4
20656: PUSH
20657: LD_VAR 0 1
20661: PUSH
20662: FOR_IN
20663: IFFALSE 20740
// if BuildingStatus ( b ) = bs_build then
20665: LD_VAR 0 2
20669: PPUSH
20670: CALL_OW 461
20674: PUSH
20675: LD_INT 1
20677: EQUAL
20678: IFFALSE 20738
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
20680: LD_VAR 0 4
20684: PPUSH
20685: LD_STRING h
20687: PUSH
20688: LD_VAR 0 2
20692: PPUSH
20693: CALL_OW 250
20697: PUSH
20698: LD_VAR 0 2
20702: PPUSH
20703: CALL_OW 251
20707: PUSH
20708: LD_VAR 0 2
20712: PUSH
20713: LD_INT 0
20715: PUSH
20716: LD_INT 0
20718: PUSH
20719: LD_INT 0
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: PUSH
20731: EMPTY
20732: LIST
20733: PPUSH
20734: CALL_OW 446
20738: GO 20662
20740: POP
20741: POP
// end ;
20742: LD_VAR 0 3
20746: RET
// export function AddComComplete ( units , b ) ; var i ; begin
20747: LD_INT 0
20749: PPUSH
20750: PPUSH
// if not units then
20751: LD_VAR 0 1
20755: NOT
20756: IFFALSE 20760
// exit ;
20758: GO 20850
// for i in units do
20760: LD_ADDR_VAR 0 4
20764: PUSH
20765: LD_VAR 0 1
20769: PUSH
20770: FOR_IN
20771: IFFALSE 20848
// if BuildingStatus ( b ) = bs_build then
20773: LD_VAR 0 2
20777: PPUSH
20778: CALL_OW 461
20782: PUSH
20783: LD_INT 1
20785: EQUAL
20786: IFFALSE 20846
// AddTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
20788: LD_VAR 0 4
20792: PPUSH
20793: LD_STRING h
20795: PUSH
20796: LD_VAR 0 2
20800: PPUSH
20801: CALL_OW 250
20805: PUSH
20806: LD_VAR 0 2
20810: PPUSH
20811: CALL_OW 251
20815: PUSH
20816: LD_VAR 0 2
20820: PUSH
20821: LD_INT 0
20823: PUSH
20824: LD_INT 0
20826: PUSH
20827: LD_INT 0
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: PUSH
20839: EMPTY
20840: LIST
20841: PPUSH
20842: CALL_OW 447
20846: GO 20770
20848: POP
20849: POP
// end ;
20850: LD_VAR 0 3
20854: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
20855: LD_INT 0
20857: PPUSH
20858: PPUSH
20859: PPUSH
20860: PPUSH
20861: PPUSH
20862: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
20863: LD_VAR 0 1
20867: NOT
20868: PUSH
20869: LD_VAR 0 1
20873: PPUSH
20874: CALL_OW 263
20878: PUSH
20879: LD_INT 2
20881: NONEQUAL
20882: OR
20883: IFFALSE 20887
// exit ;
20885: GO 21203
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
20887: LD_ADDR_VAR 0 6
20891: PUSH
20892: LD_INT 22
20894: PUSH
20895: LD_VAR 0 1
20899: PPUSH
20900: CALL_OW 255
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 2
20911: PUSH
20912: LD_INT 30
20914: PUSH
20915: LD_INT 36
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PUSH
20922: LD_INT 34
20924: PUSH
20925: LD_INT 31
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: LIST
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PPUSH
20941: CALL_OW 69
20945: ST_TO_ADDR
// if not tmp then
20946: LD_VAR 0 6
20950: NOT
20951: IFFALSE 20955
// exit ;
20953: GO 21203
// result := [ ] ;
20955: LD_ADDR_VAR 0 2
20959: PUSH
20960: EMPTY
20961: ST_TO_ADDR
// for i in tmp do
20962: LD_ADDR_VAR 0 3
20966: PUSH
20967: LD_VAR 0 6
20971: PUSH
20972: FOR_IN
20973: IFFALSE 21044
// begin t := UnitsInside ( i ) ;
20975: LD_ADDR_VAR 0 4
20979: PUSH
20980: LD_VAR 0 3
20984: PPUSH
20985: CALL_OW 313
20989: ST_TO_ADDR
// if t then
20990: LD_VAR 0 4
20994: IFFALSE 21042
// for j in t do
20996: LD_ADDR_VAR 0 7
21000: PUSH
21001: LD_VAR 0 4
21005: PUSH
21006: FOR_IN
21007: IFFALSE 21040
// result := Replace ( result , result + 1 , j ) ;
21009: LD_ADDR_VAR 0 2
21013: PUSH
21014: LD_VAR 0 2
21018: PPUSH
21019: LD_VAR 0 2
21023: PUSH
21024: LD_INT 1
21026: PLUS
21027: PPUSH
21028: LD_VAR 0 7
21032: PPUSH
21033: CALL_OW 1
21037: ST_TO_ADDR
21038: GO 21006
21040: POP
21041: POP
// end ;
21042: GO 20972
21044: POP
21045: POP
// if not result then
21046: LD_VAR 0 2
21050: NOT
21051: IFFALSE 21055
// exit ;
21053: GO 21203
// mech := result [ 1 ] ;
21055: LD_ADDR_VAR 0 5
21059: PUSH
21060: LD_VAR 0 2
21064: PUSH
21065: LD_INT 1
21067: ARRAY
21068: ST_TO_ADDR
// if result > 1 then
21069: LD_VAR 0 2
21073: PUSH
21074: LD_INT 1
21076: GREATER
21077: IFFALSE 21189
// begin for i = 2 to result do
21079: LD_ADDR_VAR 0 3
21083: PUSH
21084: DOUBLE
21085: LD_INT 2
21087: DEC
21088: ST_TO_ADDR
21089: LD_VAR 0 2
21093: PUSH
21094: FOR_TO
21095: IFFALSE 21187
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
21097: LD_ADDR_VAR 0 4
21101: PUSH
21102: LD_VAR 0 2
21106: PUSH
21107: LD_VAR 0 3
21111: ARRAY
21112: PPUSH
21113: LD_INT 3
21115: PPUSH
21116: CALL_OW 259
21120: PUSH
21121: LD_VAR 0 2
21125: PUSH
21126: LD_VAR 0 3
21130: ARRAY
21131: PPUSH
21132: CALL_OW 432
21136: MINUS
21137: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
21138: LD_VAR 0 4
21142: PUSH
21143: LD_VAR 0 5
21147: PPUSH
21148: LD_INT 3
21150: PPUSH
21151: CALL_OW 259
21155: PUSH
21156: LD_VAR 0 5
21160: PPUSH
21161: CALL_OW 432
21165: MINUS
21166: GREATEREQUAL
21167: IFFALSE 21185
// mech := result [ i ] ;
21169: LD_ADDR_VAR 0 5
21173: PUSH
21174: LD_VAR 0 2
21178: PUSH
21179: LD_VAR 0 3
21183: ARRAY
21184: ST_TO_ADDR
// end ;
21185: GO 21094
21187: POP
21188: POP
// end ; ComLinkTo ( vehicle , mech ) ;
21189: LD_VAR 0 1
21193: PPUSH
21194: LD_VAR 0 5
21198: PPUSH
21199: CALL_OW 135
// end ;
21203: LD_VAR 0 2
21207: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
21208: LD_INT 0
21210: PPUSH
21211: PPUSH
21212: PPUSH
21213: PPUSH
21214: PPUSH
21215: PPUSH
21216: PPUSH
21217: PPUSH
21218: PPUSH
21219: PPUSH
21220: PPUSH
21221: PPUSH
21222: PPUSH
// result := [ ] ;
21223: LD_ADDR_VAR 0 7
21227: PUSH
21228: EMPTY
21229: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21230: LD_VAR 0 1
21234: PPUSH
21235: CALL_OW 266
21239: PUSH
21240: LD_INT 0
21242: PUSH
21243: LD_INT 1
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: IN
21250: NOT
21251: IFFALSE 21255
// exit ;
21253: GO 22889
// if name then
21255: LD_VAR 0 3
21259: IFFALSE 21275
// SetBName ( base_dep , name ) ;
21261: LD_VAR 0 1
21265: PPUSH
21266: LD_VAR 0 3
21270: PPUSH
21271: CALL_OW 500
// base := GetBase ( base_dep ) ;
21275: LD_ADDR_VAR 0 15
21279: PUSH
21280: LD_VAR 0 1
21284: PPUSH
21285: CALL_OW 274
21289: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21290: LD_ADDR_VAR 0 16
21294: PUSH
21295: LD_VAR 0 1
21299: PPUSH
21300: CALL_OW 255
21304: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21305: LD_ADDR_VAR 0 17
21309: PUSH
21310: LD_VAR 0 1
21314: PPUSH
21315: CALL_OW 248
21319: ST_TO_ADDR
// if sources then
21320: LD_VAR 0 5
21324: IFFALSE 21371
// for i = 1 to 3 do
21326: LD_ADDR_VAR 0 8
21330: PUSH
21331: DOUBLE
21332: LD_INT 1
21334: DEC
21335: ST_TO_ADDR
21336: LD_INT 3
21338: PUSH
21339: FOR_TO
21340: IFFALSE 21369
// AddResourceType ( base , i , sources [ i ] ) ;
21342: LD_VAR 0 15
21346: PPUSH
21347: LD_VAR 0 8
21351: PPUSH
21352: LD_VAR 0 5
21356: PUSH
21357: LD_VAR 0 8
21361: ARRAY
21362: PPUSH
21363: CALL_OW 276
21367: GO 21339
21369: POP
21370: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
21371: LD_ADDR_VAR 0 18
21375: PUSH
21376: LD_VAR 0 15
21380: PPUSH
21381: LD_VAR 0 2
21385: PPUSH
21386: LD_INT 1
21388: PPUSH
21389: CALL 20524 0 3
21393: ST_TO_ADDR
// InitHc ;
21394: CALL_OW 19
// InitUc ;
21398: CALL_OW 18
// uc_side := side ;
21402: LD_ADDR_OWVAR 20
21406: PUSH
21407: LD_VAR 0 16
21411: ST_TO_ADDR
// uc_nation := nation ;
21412: LD_ADDR_OWVAR 21
21416: PUSH
21417: LD_VAR 0 17
21421: ST_TO_ADDR
// if buildings then
21422: LD_VAR 0 18
21426: IFFALSE 22748
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
21428: LD_ADDR_VAR 0 19
21432: PUSH
21433: LD_VAR 0 18
21437: PPUSH
21438: LD_INT 2
21440: PUSH
21441: LD_INT 30
21443: PUSH
21444: LD_INT 29
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 30
21453: PUSH
21454: LD_INT 30
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: LIST
21465: PPUSH
21466: CALL_OW 72
21470: ST_TO_ADDR
// if tmp then
21471: LD_VAR 0 19
21475: IFFALSE 21523
// for i in tmp do
21477: LD_ADDR_VAR 0 8
21481: PUSH
21482: LD_VAR 0 19
21486: PUSH
21487: FOR_IN
21488: IFFALSE 21521
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
21490: LD_VAR 0 8
21494: PPUSH
21495: CALL_OW 250
21499: PPUSH
21500: LD_VAR 0 8
21504: PPUSH
21505: CALL_OW 251
21509: PPUSH
21510: LD_VAR 0 16
21514: PPUSH
21515: CALL_OW 441
21519: GO 21487
21521: POP
21522: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
21523: LD_VAR 0 18
21527: PPUSH
21528: LD_INT 2
21530: PUSH
21531: LD_INT 30
21533: PUSH
21534: LD_INT 32
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 30
21543: PUSH
21544: LD_INT 33
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: LIST
21555: PPUSH
21556: CALL_OW 72
21560: IFFALSE 21648
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
21562: LD_ADDR_VAR 0 8
21566: PUSH
21567: LD_VAR 0 18
21571: PPUSH
21572: LD_INT 2
21574: PUSH
21575: LD_INT 30
21577: PUSH
21578: LD_INT 32
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 30
21587: PUSH
21588: LD_INT 33
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: LIST
21599: PPUSH
21600: CALL_OW 72
21604: PUSH
21605: FOR_IN
21606: IFFALSE 21646
// begin if not GetBWeapon ( i ) then
21608: LD_VAR 0 8
21612: PPUSH
21613: CALL_OW 269
21617: NOT
21618: IFFALSE 21644
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
21620: LD_VAR 0 8
21624: PPUSH
21625: LD_VAR 0 8
21629: PPUSH
21630: LD_VAR 0 2
21634: PPUSH
21635: CALL 22894 0 2
21639: PPUSH
21640: CALL_OW 431
// end ;
21644: GO 21605
21646: POP
21647: POP
// end ; for i = 1 to personel do
21648: LD_ADDR_VAR 0 8
21652: PUSH
21653: DOUBLE
21654: LD_INT 1
21656: DEC
21657: ST_TO_ADDR
21658: LD_VAR 0 6
21662: PUSH
21663: FOR_TO
21664: IFFALSE 22728
// begin if i > 4 then
21666: LD_VAR 0 8
21670: PUSH
21671: LD_INT 4
21673: GREATER
21674: IFFALSE 21678
// break ;
21676: GO 22728
// case i of 1 :
21678: LD_VAR 0 8
21682: PUSH
21683: LD_INT 1
21685: DOUBLE
21686: EQUAL
21687: IFTRUE 21691
21689: GO 21771
21691: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
21692: LD_ADDR_VAR 0 12
21696: PUSH
21697: LD_VAR 0 18
21701: PPUSH
21702: LD_INT 22
21704: PUSH
21705: LD_VAR 0 16
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 58
21716: PUSH
21717: EMPTY
21718: LIST
21719: PUSH
21720: LD_INT 2
21722: PUSH
21723: LD_INT 30
21725: PUSH
21726: LD_INT 32
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 30
21735: PUSH
21736: LD_INT 4
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 30
21745: PUSH
21746: LD_INT 5
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: LIST
21763: PPUSH
21764: CALL_OW 72
21768: ST_TO_ADDR
21769: GO 21993
21771: LD_INT 2
21773: DOUBLE
21774: EQUAL
21775: IFTRUE 21779
21777: GO 21841
21779: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
21780: LD_ADDR_VAR 0 12
21784: PUSH
21785: LD_VAR 0 18
21789: PPUSH
21790: LD_INT 22
21792: PUSH
21793: LD_VAR 0 16
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 2
21804: PUSH
21805: LD_INT 30
21807: PUSH
21808: LD_INT 0
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 30
21817: PUSH
21818: LD_INT 1
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: LIST
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PPUSH
21834: CALL_OW 72
21838: ST_TO_ADDR
21839: GO 21993
21841: LD_INT 3
21843: DOUBLE
21844: EQUAL
21845: IFTRUE 21849
21847: GO 21911
21849: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
21850: LD_ADDR_VAR 0 12
21854: PUSH
21855: LD_VAR 0 18
21859: PPUSH
21860: LD_INT 22
21862: PUSH
21863: LD_VAR 0 16
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 2
21874: PUSH
21875: LD_INT 30
21877: PUSH
21878: LD_INT 2
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 30
21887: PUSH
21888: LD_INT 3
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: LIST
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PPUSH
21904: CALL_OW 72
21908: ST_TO_ADDR
21909: GO 21993
21911: LD_INT 4
21913: DOUBLE
21914: EQUAL
21915: IFTRUE 21919
21917: GO 21992
21919: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
21920: LD_ADDR_VAR 0 12
21924: PUSH
21925: LD_VAR 0 18
21929: PPUSH
21930: LD_INT 22
21932: PUSH
21933: LD_VAR 0 16
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 2
21944: PUSH
21945: LD_INT 30
21947: PUSH
21948: LD_INT 6
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 30
21957: PUSH
21958: LD_INT 7
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 30
21967: PUSH
21968: LD_INT 8
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PPUSH
21985: CALL_OW 72
21989: ST_TO_ADDR
21990: GO 21993
21992: POP
// if i = 1 then
21993: LD_VAR 0 8
21997: PUSH
21998: LD_INT 1
22000: EQUAL
22001: IFFALSE 22112
// begin tmp := [ ] ;
22003: LD_ADDR_VAR 0 19
22007: PUSH
22008: EMPTY
22009: ST_TO_ADDR
// for j in f do
22010: LD_ADDR_VAR 0 9
22014: PUSH
22015: LD_VAR 0 12
22019: PUSH
22020: FOR_IN
22021: IFFALSE 22094
// if GetBType ( j ) = b_bunker then
22023: LD_VAR 0 9
22027: PPUSH
22028: CALL_OW 266
22032: PUSH
22033: LD_INT 32
22035: EQUAL
22036: IFFALSE 22063
// tmp := Insert ( tmp , 1 , j ) else
22038: LD_ADDR_VAR 0 19
22042: PUSH
22043: LD_VAR 0 19
22047: PPUSH
22048: LD_INT 1
22050: PPUSH
22051: LD_VAR 0 9
22055: PPUSH
22056: CALL_OW 2
22060: ST_TO_ADDR
22061: GO 22092
// tmp := Insert ( tmp , tmp + 1 , j ) ;
22063: LD_ADDR_VAR 0 19
22067: PUSH
22068: LD_VAR 0 19
22072: PPUSH
22073: LD_VAR 0 19
22077: PUSH
22078: LD_INT 1
22080: PLUS
22081: PPUSH
22082: LD_VAR 0 9
22086: PPUSH
22087: CALL_OW 2
22091: ST_TO_ADDR
22092: GO 22020
22094: POP
22095: POP
// if tmp then
22096: LD_VAR 0 19
22100: IFFALSE 22112
// f := tmp ;
22102: LD_ADDR_VAR 0 12
22106: PUSH
22107: LD_VAR 0 19
22111: ST_TO_ADDR
// end ; x := personel [ i ] ;
22112: LD_ADDR_VAR 0 13
22116: PUSH
22117: LD_VAR 0 6
22121: PUSH
22122: LD_VAR 0 8
22126: ARRAY
22127: ST_TO_ADDR
// if x = - 1 then
22128: LD_VAR 0 13
22132: PUSH
22133: LD_INT 1
22135: NEG
22136: EQUAL
22137: IFFALSE 22346
// begin for j in f do
22139: LD_ADDR_VAR 0 9
22143: PUSH
22144: LD_VAR 0 12
22148: PUSH
22149: FOR_IN
22150: IFFALSE 22342
// repeat InitHc ;
22152: CALL_OW 19
// if GetBType ( j ) = b_barracks then
22156: LD_VAR 0 9
22160: PPUSH
22161: CALL_OW 266
22165: PUSH
22166: LD_INT 5
22168: EQUAL
22169: IFFALSE 22239
// begin if UnitsInside ( j ) < 3 then
22171: LD_VAR 0 9
22175: PPUSH
22176: CALL_OW 313
22180: PUSH
22181: LD_INT 3
22183: LESS
22184: IFFALSE 22220
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22186: LD_INT 0
22188: PPUSH
22189: LD_INT 5
22191: PUSH
22192: LD_INT 8
22194: PUSH
22195: LD_INT 9
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: LIST
22202: PUSH
22203: LD_VAR 0 17
22207: ARRAY
22208: PPUSH
22209: LD_VAR 0 4
22213: PPUSH
22214: CALL_OW 380
22218: GO 22237
// PrepareHuman ( false , i , skill ) ;
22220: LD_INT 0
22222: PPUSH
22223: LD_VAR 0 8
22227: PPUSH
22228: LD_VAR 0 4
22232: PPUSH
22233: CALL_OW 380
// end else
22237: GO 22256
// PrepareHuman ( false , i , skill ) ;
22239: LD_INT 0
22241: PPUSH
22242: LD_VAR 0 8
22246: PPUSH
22247: LD_VAR 0 4
22251: PPUSH
22252: CALL_OW 380
// un := CreateHuman ;
22256: LD_ADDR_VAR 0 14
22260: PUSH
22261: CALL_OW 44
22265: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22266: LD_ADDR_VAR 0 7
22270: PUSH
22271: LD_VAR 0 7
22275: PPUSH
22276: LD_INT 1
22278: PPUSH
22279: LD_VAR 0 14
22283: PPUSH
22284: CALL_OW 2
22288: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22289: LD_VAR 0 14
22293: PPUSH
22294: LD_VAR 0 9
22298: PPUSH
22299: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22303: LD_VAR 0 9
22307: PPUSH
22308: CALL_OW 313
22312: PUSH
22313: LD_INT 6
22315: EQUAL
22316: PUSH
22317: LD_VAR 0 9
22321: PPUSH
22322: CALL_OW 266
22326: PUSH
22327: LD_INT 32
22329: PUSH
22330: LD_INT 31
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: IN
22337: OR
22338: IFFALSE 22152
22340: GO 22149
22342: POP
22343: POP
// end else
22344: GO 22726
// for j = 1 to x do
22346: LD_ADDR_VAR 0 9
22350: PUSH
22351: DOUBLE
22352: LD_INT 1
22354: DEC
22355: ST_TO_ADDR
22356: LD_VAR 0 13
22360: PUSH
22361: FOR_TO
22362: IFFALSE 22724
// begin InitHc ;
22364: CALL_OW 19
// if not f then
22368: LD_VAR 0 12
22372: NOT
22373: IFFALSE 22462
// begin PrepareHuman ( false , i , skill ) ;
22375: LD_INT 0
22377: PPUSH
22378: LD_VAR 0 8
22382: PPUSH
22383: LD_VAR 0 4
22387: PPUSH
22388: CALL_OW 380
// un := CreateHuman ;
22392: LD_ADDR_VAR 0 14
22396: PUSH
22397: CALL_OW 44
22401: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22402: LD_ADDR_VAR 0 7
22406: PUSH
22407: LD_VAR 0 7
22411: PPUSH
22412: LD_INT 1
22414: PPUSH
22415: LD_VAR 0 14
22419: PPUSH
22420: CALL_OW 2
22424: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22425: LD_VAR 0 14
22429: PPUSH
22430: LD_VAR 0 1
22434: PPUSH
22435: CALL_OW 250
22439: PPUSH
22440: LD_VAR 0 1
22444: PPUSH
22445: CALL_OW 251
22449: PPUSH
22450: LD_INT 10
22452: PPUSH
22453: LD_INT 0
22455: PPUSH
22456: CALL_OW 50
// continue ;
22460: GO 22361
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
22462: LD_VAR 0 12
22466: PUSH
22467: LD_INT 1
22469: ARRAY
22470: PPUSH
22471: CALL_OW 313
22475: PUSH
22476: LD_VAR 0 12
22480: PUSH
22481: LD_INT 1
22483: ARRAY
22484: PPUSH
22485: CALL_OW 266
22489: PUSH
22490: LD_INT 32
22492: PUSH
22493: LD_INT 31
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: IN
22500: AND
22501: PUSH
22502: LD_VAR 0 12
22506: PUSH
22507: LD_INT 1
22509: ARRAY
22510: PPUSH
22511: CALL_OW 313
22515: PUSH
22516: LD_INT 6
22518: EQUAL
22519: OR
22520: IFFALSE 22540
// f := Delete ( f , 1 ) ;
22522: LD_ADDR_VAR 0 12
22526: PUSH
22527: LD_VAR 0 12
22531: PPUSH
22532: LD_INT 1
22534: PPUSH
22535: CALL_OW 3
22539: ST_TO_ADDR
// if not f then
22540: LD_VAR 0 12
22544: NOT
22545: IFFALSE 22563
// begin x := x + 2 ;
22547: LD_ADDR_VAR 0 13
22551: PUSH
22552: LD_VAR 0 13
22556: PUSH
22557: LD_INT 2
22559: PLUS
22560: ST_TO_ADDR
// continue ;
22561: GO 22361
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
22563: LD_VAR 0 12
22567: PUSH
22568: LD_INT 1
22570: ARRAY
22571: PPUSH
22572: CALL_OW 266
22576: PUSH
22577: LD_INT 5
22579: EQUAL
22580: IFFALSE 22654
// begin if UnitsInside ( f [ 1 ] ) < 3 then
22582: LD_VAR 0 12
22586: PUSH
22587: LD_INT 1
22589: ARRAY
22590: PPUSH
22591: CALL_OW 313
22595: PUSH
22596: LD_INT 3
22598: LESS
22599: IFFALSE 22635
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22601: LD_INT 0
22603: PPUSH
22604: LD_INT 5
22606: PUSH
22607: LD_INT 8
22609: PUSH
22610: LD_INT 9
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: LIST
22617: PUSH
22618: LD_VAR 0 17
22622: ARRAY
22623: PPUSH
22624: LD_VAR 0 4
22628: PPUSH
22629: CALL_OW 380
22633: GO 22652
// PrepareHuman ( false , i , skill ) ;
22635: LD_INT 0
22637: PPUSH
22638: LD_VAR 0 8
22642: PPUSH
22643: LD_VAR 0 4
22647: PPUSH
22648: CALL_OW 380
// end else
22652: GO 22671
// PrepareHuman ( false , i , skill ) ;
22654: LD_INT 0
22656: PPUSH
22657: LD_VAR 0 8
22661: PPUSH
22662: LD_VAR 0 4
22666: PPUSH
22667: CALL_OW 380
// un := CreateHuman ;
22671: LD_ADDR_VAR 0 14
22675: PUSH
22676: CALL_OW 44
22680: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22681: LD_ADDR_VAR 0 7
22685: PUSH
22686: LD_VAR 0 7
22690: PPUSH
22691: LD_INT 1
22693: PPUSH
22694: LD_VAR 0 14
22698: PPUSH
22699: CALL_OW 2
22703: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
22704: LD_VAR 0 14
22708: PPUSH
22709: LD_VAR 0 12
22713: PUSH
22714: LD_INT 1
22716: ARRAY
22717: PPUSH
22718: CALL_OW 52
// end ;
22722: GO 22361
22724: POP
22725: POP
// end ;
22726: GO 21663
22728: POP
22729: POP
// result := result ^ buildings ;
22730: LD_ADDR_VAR 0 7
22734: PUSH
22735: LD_VAR 0 7
22739: PUSH
22740: LD_VAR 0 18
22744: ADD
22745: ST_TO_ADDR
// end else
22746: GO 22889
// begin for i = 1 to personel do
22748: LD_ADDR_VAR 0 8
22752: PUSH
22753: DOUBLE
22754: LD_INT 1
22756: DEC
22757: ST_TO_ADDR
22758: LD_VAR 0 6
22762: PUSH
22763: FOR_TO
22764: IFFALSE 22887
// begin if i > 4 then
22766: LD_VAR 0 8
22770: PUSH
22771: LD_INT 4
22773: GREATER
22774: IFFALSE 22778
// break ;
22776: GO 22887
// x := personel [ i ] ;
22778: LD_ADDR_VAR 0 13
22782: PUSH
22783: LD_VAR 0 6
22787: PUSH
22788: LD_VAR 0 8
22792: ARRAY
22793: ST_TO_ADDR
// if x = - 1 then
22794: LD_VAR 0 13
22798: PUSH
22799: LD_INT 1
22801: NEG
22802: EQUAL
22803: IFFALSE 22807
// continue ;
22805: GO 22763
// PrepareHuman ( false , i , skill ) ;
22807: LD_INT 0
22809: PPUSH
22810: LD_VAR 0 8
22814: PPUSH
22815: LD_VAR 0 4
22819: PPUSH
22820: CALL_OW 380
// un := CreateHuman ;
22824: LD_ADDR_VAR 0 14
22828: PUSH
22829: CALL_OW 44
22833: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22834: LD_VAR 0 14
22838: PPUSH
22839: LD_VAR 0 1
22843: PPUSH
22844: CALL_OW 250
22848: PPUSH
22849: LD_VAR 0 1
22853: PPUSH
22854: CALL_OW 251
22858: PPUSH
22859: LD_INT 10
22861: PPUSH
22862: LD_INT 0
22864: PPUSH
22865: CALL_OW 50
// result := result ^ un ;
22869: LD_ADDR_VAR 0 7
22873: PUSH
22874: LD_VAR 0 7
22878: PUSH
22879: LD_VAR 0 14
22883: ADD
22884: ST_TO_ADDR
// end ;
22885: GO 22763
22887: POP
22888: POP
// end ; end ;
22889: LD_VAR 0 7
22893: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
22894: LD_INT 0
22896: PPUSH
22897: PPUSH
22898: PPUSH
22899: PPUSH
22900: PPUSH
22901: PPUSH
22902: PPUSH
22903: PPUSH
22904: PPUSH
22905: PPUSH
22906: PPUSH
22907: PPUSH
22908: PPUSH
22909: PPUSH
22910: PPUSH
22911: PPUSH
// result := false ;
22912: LD_ADDR_VAR 0 3
22916: PUSH
22917: LD_INT 0
22919: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
22920: LD_VAR 0 1
22924: NOT
22925: PUSH
22926: LD_VAR 0 1
22930: PPUSH
22931: CALL_OW 266
22935: PUSH
22936: LD_INT 32
22938: PUSH
22939: LD_INT 33
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: IN
22946: NOT
22947: OR
22948: IFFALSE 22952
// exit ;
22950: GO 24061
// nat := GetNation ( tower ) ;
22952: LD_ADDR_VAR 0 12
22956: PUSH
22957: LD_VAR 0 1
22961: PPUSH
22962: CALL_OW 248
22966: ST_TO_ADDR
// side := GetSide ( tower ) ;
22967: LD_ADDR_VAR 0 16
22971: PUSH
22972: LD_VAR 0 1
22976: PPUSH
22977: CALL_OW 255
22981: ST_TO_ADDR
// x := GetX ( tower ) ;
22982: LD_ADDR_VAR 0 10
22986: PUSH
22987: LD_VAR 0 1
22991: PPUSH
22992: CALL_OW 250
22996: ST_TO_ADDR
// y := GetY ( tower ) ;
22997: LD_ADDR_VAR 0 11
23001: PUSH
23002: LD_VAR 0 1
23006: PPUSH
23007: CALL_OW 251
23011: ST_TO_ADDR
// if not x or not y then
23012: LD_VAR 0 10
23016: NOT
23017: PUSH
23018: LD_VAR 0 11
23022: NOT
23023: OR
23024: IFFALSE 23028
// exit ;
23026: GO 24061
// weapon := 0 ;
23028: LD_ADDR_VAR 0 18
23032: PUSH
23033: LD_INT 0
23035: ST_TO_ADDR
// fac_list := [ ] ;
23036: LD_ADDR_VAR 0 17
23040: PUSH
23041: EMPTY
23042: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
23043: LD_ADDR_VAR 0 6
23047: PUSH
23048: LD_VAR 0 1
23052: PPUSH
23053: CALL_OW 274
23057: PPUSH
23058: LD_VAR 0 2
23062: PPUSH
23063: LD_INT 0
23065: PPUSH
23066: CALL 20524 0 3
23070: PPUSH
23071: LD_INT 30
23073: PUSH
23074: LD_INT 3
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PPUSH
23081: CALL_OW 72
23085: ST_TO_ADDR
// if not factories then
23086: LD_VAR 0 6
23090: NOT
23091: IFFALSE 23095
// exit ;
23093: GO 24061
// for i in factories do
23095: LD_ADDR_VAR 0 8
23099: PUSH
23100: LD_VAR 0 6
23104: PUSH
23105: FOR_IN
23106: IFFALSE 23131
// fac_list := fac_list union AvailableWeaponList ( i ) ;
23108: LD_ADDR_VAR 0 17
23112: PUSH
23113: LD_VAR 0 17
23117: PUSH
23118: LD_VAR 0 8
23122: PPUSH
23123: CALL_OW 478
23127: UNION
23128: ST_TO_ADDR
23129: GO 23105
23131: POP
23132: POP
// if not fac_list then
23133: LD_VAR 0 17
23137: NOT
23138: IFFALSE 23142
// exit ;
23140: GO 24061
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
23142: LD_ADDR_VAR 0 5
23146: PUSH
23147: LD_INT 4
23149: PUSH
23150: LD_INT 5
23152: PUSH
23153: LD_INT 9
23155: PUSH
23156: LD_INT 10
23158: PUSH
23159: LD_INT 6
23161: PUSH
23162: LD_INT 7
23164: PUSH
23165: LD_INT 11
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 27
23179: PUSH
23180: LD_INT 28
23182: PUSH
23183: LD_INT 26
23185: PUSH
23186: LD_INT 30
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 43
23197: PUSH
23198: LD_INT 44
23200: PUSH
23201: LD_INT 46
23203: PUSH
23204: LD_INT 45
23206: PUSH
23207: LD_INT 47
23209: PUSH
23210: LD_INT 49
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: LIST
23225: PUSH
23226: LD_VAR 0 12
23230: ARRAY
23231: ST_TO_ADDR
// list := list isect fac_list ;
23232: LD_ADDR_VAR 0 5
23236: PUSH
23237: LD_VAR 0 5
23241: PUSH
23242: LD_VAR 0 17
23246: ISECT
23247: ST_TO_ADDR
// if not list then
23248: LD_VAR 0 5
23252: NOT
23253: IFFALSE 23257
// exit ;
23255: GO 24061
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23257: LD_VAR 0 12
23261: PUSH
23262: LD_INT 3
23264: EQUAL
23265: PUSH
23266: LD_INT 49
23268: PUSH
23269: LD_VAR 0 5
23273: IN
23274: AND
23275: PUSH
23276: LD_INT 31
23278: PPUSH
23279: LD_VAR 0 16
23283: PPUSH
23284: CALL_OW 321
23288: PUSH
23289: LD_INT 2
23291: EQUAL
23292: AND
23293: IFFALSE 23353
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23295: LD_INT 22
23297: PUSH
23298: LD_VAR 0 16
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 35
23309: PUSH
23310: LD_INT 49
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 91
23319: PUSH
23320: LD_VAR 0 1
23324: PUSH
23325: LD_INT 10
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: LIST
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: LIST
23337: PPUSH
23338: CALL_OW 69
23342: NOT
23343: IFFALSE 23353
// weapon := ru_time_lapser ;
23345: LD_ADDR_VAR 0 18
23349: PUSH
23350: LD_INT 49
23352: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23353: LD_VAR 0 12
23357: PUSH
23358: LD_INT 1
23360: PUSH
23361: LD_INT 2
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: IN
23368: PUSH
23369: LD_INT 11
23371: PUSH
23372: LD_VAR 0 5
23376: IN
23377: PUSH
23378: LD_INT 30
23380: PUSH
23381: LD_VAR 0 5
23385: IN
23386: OR
23387: AND
23388: PUSH
23389: LD_INT 6
23391: PPUSH
23392: LD_VAR 0 16
23396: PPUSH
23397: CALL_OW 321
23401: PUSH
23402: LD_INT 2
23404: EQUAL
23405: AND
23406: IFFALSE 23571
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23408: LD_INT 22
23410: PUSH
23411: LD_VAR 0 16
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 2
23422: PUSH
23423: LD_INT 35
23425: PUSH
23426: LD_INT 11
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: LD_INT 35
23435: PUSH
23436: LD_INT 30
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: LIST
23447: PUSH
23448: LD_INT 91
23450: PUSH
23451: LD_VAR 0 1
23455: PUSH
23456: LD_INT 18
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: LIST
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: LIST
23468: PPUSH
23469: CALL_OW 69
23473: NOT
23474: PUSH
23475: LD_INT 22
23477: PUSH
23478: LD_VAR 0 16
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 2
23489: PUSH
23490: LD_INT 30
23492: PUSH
23493: LD_INT 32
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: LD_INT 30
23502: PUSH
23503: LD_INT 33
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 91
23517: PUSH
23518: LD_VAR 0 1
23522: PUSH
23523: LD_INT 12
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: LIST
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: LIST
23535: PUSH
23536: EMPTY
23537: LIST
23538: PPUSH
23539: CALL_OW 69
23543: PUSH
23544: LD_INT 2
23546: GREATER
23547: AND
23548: IFFALSE 23571
// weapon := [ us_radar , ar_radar ] [ nat ] ;
23550: LD_ADDR_VAR 0 18
23554: PUSH
23555: LD_INT 11
23557: PUSH
23558: LD_INT 30
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_VAR 0 12
23569: ARRAY
23570: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
23571: LD_VAR 0 18
23575: NOT
23576: PUSH
23577: LD_INT 40
23579: PPUSH
23580: LD_VAR 0 16
23584: PPUSH
23585: CALL_OW 321
23589: PUSH
23590: LD_INT 2
23592: EQUAL
23593: AND
23594: PUSH
23595: LD_INT 7
23597: PUSH
23598: LD_VAR 0 5
23602: IN
23603: PUSH
23604: LD_INT 28
23606: PUSH
23607: LD_VAR 0 5
23611: IN
23612: OR
23613: PUSH
23614: LD_INT 45
23616: PUSH
23617: LD_VAR 0 5
23621: IN
23622: OR
23623: AND
23624: IFFALSE 23878
// begin hex := GetHexInfo ( x , y ) ;
23626: LD_ADDR_VAR 0 4
23630: PUSH
23631: LD_VAR 0 10
23635: PPUSH
23636: LD_VAR 0 11
23640: PPUSH
23641: CALL_OW 546
23645: ST_TO_ADDR
// if hex [ 1 ] then
23646: LD_VAR 0 4
23650: PUSH
23651: LD_INT 1
23653: ARRAY
23654: IFFALSE 23658
// exit ;
23656: GO 24061
// height := hex [ 2 ] ;
23658: LD_ADDR_VAR 0 15
23662: PUSH
23663: LD_VAR 0 4
23667: PUSH
23668: LD_INT 2
23670: ARRAY
23671: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
23672: LD_ADDR_VAR 0 14
23676: PUSH
23677: LD_INT 0
23679: PUSH
23680: LD_INT 2
23682: PUSH
23683: LD_INT 3
23685: PUSH
23686: LD_INT 5
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: ST_TO_ADDR
// for i in tmp do
23695: LD_ADDR_VAR 0 8
23699: PUSH
23700: LD_VAR 0 14
23704: PUSH
23705: FOR_IN
23706: IFFALSE 23876
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
23708: LD_ADDR_VAR 0 9
23712: PUSH
23713: LD_VAR 0 10
23717: PPUSH
23718: LD_VAR 0 8
23722: PPUSH
23723: LD_INT 5
23725: PPUSH
23726: CALL_OW 272
23730: PUSH
23731: LD_VAR 0 11
23735: PPUSH
23736: LD_VAR 0 8
23740: PPUSH
23741: LD_INT 5
23743: PPUSH
23744: CALL_OW 273
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
23753: LD_VAR 0 9
23757: PUSH
23758: LD_INT 1
23760: ARRAY
23761: PPUSH
23762: LD_VAR 0 9
23766: PUSH
23767: LD_INT 2
23769: ARRAY
23770: PPUSH
23771: CALL_OW 488
23775: IFFALSE 23874
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
23777: LD_ADDR_VAR 0 4
23781: PUSH
23782: LD_VAR 0 9
23786: PUSH
23787: LD_INT 1
23789: ARRAY
23790: PPUSH
23791: LD_VAR 0 9
23795: PUSH
23796: LD_INT 2
23798: ARRAY
23799: PPUSH
23800: CALL_OW 546
23804: ST_TO_ADDR
// if hex [ 1 ] then
23805: LD_VAR 0 4
23809: PUSH
23810: LD_INT 1
23812: ARRAY
23813: IFFALSE 23817
// continue ;
23815: GO 23705
// h := hex [ 2 ] ;
23817: LD_ADDR_VAR 0 13
23821: PUSH
23822: LD_VAR 0 4
23826: PUSH
23827: LD_INT 2
23829: ARRAY
23830: ST_TO_ADDR
// if h + 7 < height then
23831: LD_VAR 0 13
23835: PUSH
23836: LD_INT 7
23838: PLUS
23839: PUSH
23840: LD_VAR 0 15
23844: LESS
23845: IFFALSE 23874
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
23847: LD_ADDR_VAR 0 18
23851: PUSH
23852: LD_INT 7
23854: PUSH
23855: LD_INT 28
23857: PUSH
23858: LD_INT 45
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: LIST
23865: PUSH
23866: LD_VAR 0 12
23870: ARRAY
23871: ST_TO_ADDR
// break ;
23872: GO 23876
// end ; end ; end ;
23874: GO 23705
23876: POP
23877: POP
// end ; if not weapon then
23878: LD_VAR 0 18
23882: NOT
23883: IFFALSE 23943
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
23885: LD_ADDR_VAR 0 5
23889: PUSH
23890: LD_VAR 0 5
23894: PUSH
23895: LD_INT 11
23897: PUSH
23898: LD_INT 30
23900: PUSH
23901: LD_INT 49
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: LIST
23908: DIFF
23909: ST_TO_ADDR
// if not list then
23910: LD_VAR 0 5
23914: NOT
23915: IFFALSE 23919
// exit ;
23917: GO 24061
// weapon := list [ rand ( 1 , list ) ] ;
23919: LD_ADDR_VAR 0 18
23923: PUSH
23924: LD_VAR 0 5
23928: PUSH
23929: LD_INT 1
23931: PPUSH
23932: LD_VAR 0 5
23936: PPUSH
23937: CALL_OW 12
23941: ARRAY
23942: ST_TO_ADDR
// end ; if weapon then
23943: LD_VAR 0 18
23947: IFFALSE 24061
// begin tmp := CostOfWeapon ( weapon ) ;
23949: LD_ADDR_VAR 0 14
23953: PUSH
23954: LD_VAR 0 18
23958: PPUSH
23959: CALL_OW 451
23963: ST_TO_ADDR
// j := GetBase ( tower ) ;
23964: LD_ADDR_VAR 0 9
23968: PUSH
23969: LD_VAR 0 1
23973: PPUSH
23974: CALL_OW 274
23978: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
23979: LD_VAR 0 9
23983: PPUSH
23984: LD_INT 1
23986: PPUSH
23987: CALL_OW 275
23991: PUSH
23992: LD_VAR 0 14
23996: PUSH
23997: LD_INT 1
23999: ARRAY
24000: GREATEREQUAL
24001: PUSH
24002: LD_VAR 0 9
24006: PPUSH
24007: LD_INT 2
24009: PPUSH
24010: CALL_OW 275
24014: PUSH
24015: LD_VAR 0 14
24019: PUSH
24020: LD_INT 2
24022: ARRAY
24023: GREATEREQUAL
24024: AND
24025: PUSH
24026: LD_VAR 0 9
24030: PPUSH
24031: LD_INT 3
24033: PPUSH
24034: CALL_OW 275
24038: PUSH
24039: LD_VAR 0 14
24043: PUSH
24044: LD_INT 3
24046: ARRAY
24047: GREATEREQUAL
24048: AND
24049: IFFALSE 24061
// result := weapon ;
24051: LD_ADDR_VAR 0 3
24055: PUSH
24056: LD_VAR 0 18
24060: ST_TO_ADDR
// end ; end ;
24061: LD_VAR 0 3
24065: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
24066: LD_INT 0
24068: PPUSH
24069: PPUSH
// result := true ;
24070: LD_ADDR_VAR 0 3
24074: PUSH
24075: LD_INT 1
24077: ST_TO_ADDR
// if array1 = array2 then
24078: LD_VAR 0 1
24082: PUSH
24083: LD_VAR 0 2
24087: EQUAL
24088: IFFALSE 24148
// begin for i = 1 to array1 do
24090: LD_ADDR_VAR 0 4
24094: PUSH
24095: DOUBLE
24096: LD_INT 1
24098: DEC
24099: ST_TO_ADDR
24100: LD_VAR 0 1
24104: PUSH
24105: FOR_TO
24106: IFFALSE 24144
// if array1 [ i ] <> array2 [ i ] then
24108: LD_VAR 0 1
24112: PUSH
24113: LD_VAR 0 4
24117: ARRAY
24118: PUSH
24119: LD_VAR 0 2
24123: PUSH
24124: LD_VAR 0 4
24128: ARRAY
24129: NONEQUAL
24130: IFFALSE 24142
// begin result := false ;
24132: LD_ADDR_VAR 0 3
24136: PUSH
24137: LD_INT 0
24139: ST_TO_ADDR
// break ;
24140: GO 24144
// end ;
24142: GO 24105
24144: POP
24145: POP
// end else
24146: GO 24156
// result := false ;
24148: LD_ADDR_VAR 0 3
24152: PUSH
24153: LD_INT 0
24155: ST_TO_ADDR
// end ;
24156: LD_VAR 0 3
24160: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
24161: LD_INT 0
24163: PPUSH
24164: PPUSH
// if not array1 or not array2 then
24165: LD_VAR 0 1
24169: NOT
24170: PUSH
24171: LD_VAR 0 2
24175: NOT
24176: OR
24177: IFFALSE 24181
// exit ;
24179: GO 24245
// result := true ;
24181: LD_ADDR_VAR 0 3
24185: PUSH
24186: LD_INT 1
24188: ST_TO_ADDR
// for i = 1 to array1 do
24189: LD_ADDR_VAR 0 4
24193: PUSH
24194: DOUBLE
24195: LD_INT 1
24197: DEC
24198: ST_TO_ADDR
24199: LD_VAR 0 1
24203: PUSH
24204: FOR_TO
24205: IFFALSE 24243
// if array1 [ i ] <> array2 [ i ] then
24207: LD_VAR 0 1
24211: PUSH
24212: LD_VAR 0 4
24216: ARRAY
24217: PUSH
24218: LD_VAR 0 2
24222: PUSH
24223: LD_VAR 0 4
24227: ARRAY
24228: NONEQUAL
24229: IFFALSE 24241
// begin result := false ;
24231: LD_ADDR_VAR 0 3
24235: PUSH
24236: LD_INT 0
24238: ST_TO_ADDR
// break ;
24239: GO 24243
// end ;
24241: GO 24204
24243: POP
24244: POP
// end ;
24245: LD_VAR 0 3
24249: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24250: LD_INT 0
24252: PPUSH
24253: PPUSH
24254: PPUSH
// pom := GetBase ( fac ) ;
24255: LD_ADDR_VAR 0 5
24259: PUSH
24260: LD_VAR 0 1
24264: PPUSH
24265: CALL_OW 274
24269: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24270: LD_ADDR_VAR 0 4
24274: PUSH
24275: LD_VAR 0 2
24279: PUSH
24280: LD_INT 1
24282: ARRAY
24283: PPUSH
24284: LD_VAR 0 2
24288: PUSH
24289: LD_INT 2
24291: ARRAY
24292: PPUSH
24293: LD_VAR 0 2
24297: PUSH
24298: LD_INT 3
24300: ARRAY
24301: PPUSH
24302: LD_VAR 0 2
24306: PUSH
24307: LD_INT 4
24309: ARRAY
24310: PPUSH
24311: CALL_OW 449
24315: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24316: LD_ADDR_VAR 0 3
24320: PUSH
24321: LD_VAR 0 5
24325: PPUSH
24326: LD_INT 1
24328: PPUSH
24329: CALL_OW 275
24333: PUSH
24334: LD_VAR 0 4
24338: PUSH
24339: LD_INT 1
24341: ARRAY
24342: GREATEREQUAL
24343: PUSH
24344: LD_VAR 0 5
24348: PPUSH
24349: LD_INT 2
24351: PPUSH
24352: CALL_OW 275
24356: PUSH
24357: LD_VAR 0 4
24361: PUSH
24362: LD_INT 2
24364: ARRAY
24365: GREATEREQUAL
24366: AND
24367: PUSH
24368: LD_VAR 0 5
24372: PPUSH
24373: LD_INT 3
24375: PPUSH
24376: CALL_OW 275
24380: PUSH
24381: LD_VAR 0 4
24385: PUSH
24386: LD_INT 3
24388: ARRAY
24389: GREATEREQUAL
24390: AND
24391: ST_TO_ADDR
// end ;
24392: LD_VAR 0 3
24396: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24397: LD_INT 0
24399: PPUSH
24400: PPUSH
24401: PPUSH
24402: PPUSH
// pom := GetBase ( building ) ;
24403: LD_ADDR_VAR 0 3
24407: PUSH
24408: LD_VAR 0 1
24412: PPUSH
24413: CALL_OW 274
24417: ST_TO_ADDR
// if not pom then
24418: LD_VAR 0 3
24422: NOT
24423: IFFALSE 24427
// exit ;
24425: GO 24597
// btype := GetBType ( building ) ;
24427: LD_ADDR_VAR 0 5
24431: PUSH
24432: LD_VAR 0 1
24436: PPUSH
24437: CALL_OW 266
24441: ST_TO_ADDR
// if btype = b_armoury then
24442: LD_VAR 0 5
24446: PUSH
24447: LD_INT 4
24449: EQUAL
24450: IFFALSE 24460
// btype := b_barracks ;
24452: LD_ADDR_VAR 0 5
24456: PUSH
24457: LD_INT 5
24459: ST_TO_ADDR
// if btype = b_depot then
24460: LD_VAR 0 5
24464: PUSH
24465: LD_INT 0
24467: EQUAL
24468: IFFALSE 24478
// btype := b_warehouse ;
24470: LD_ADDR_VAR 0 5
24474: PUSH
24475: LD_INT 1
24477: ST_TO_ADDR
// if btype = b_workshop then
24478: LD_VAR 0 5
24482: PUSH
24483: LD_INT 2
24485: EQUAL
24486: IFFALSE 24496
// btype := b_factory ;
24488: LD_ADDR_VAR 0 5
24492: PUSH
24493: LD_INT 3
24495: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24496: LD_ADDR_VAR 0 4
24500: PUSH
24501: LD_VAR 0 5
24505: PPUSH
24506: LD_VAR 0 1
24510: PPUSH
24511: CALL_OW 248
24515: PPUSH
24516: CALL_OW 450
24520: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24521: LD_ADDR_VAR 0 2
24525: PUSH
24526: LD_VAR 0 3
24530: PPUSH
24531: LD_INT 1
24533: PPUSH
24534: CALL_OW 275
24538: PUSH
24539: LD_VAR 0 4
24543: PUSH
24544: LD_INT 1
24546: ARRAY
24547: GREATEREQUAL
24548: PUSH
24549: LD_VAR 0 3
24553: PPUSH
24554: LD_INT 2
24556: PPUSH
24557: CALL_OW 275
24561: PUSH
24562: LD_VAR 0 4
24566: PUSH
24567: LD_INT 2
24569: ARRAY
24570: GREATEREQUAL
24571: AND
24572: PUSH
24573: LD_VAR 0 3
24577: PPUSH
24578: LD_INT 3
24580: PPUSH
24581: CALL_OW 275
24585: PUSH
24586: LD_VAR 0 4
24590: PUSH
24591: LD_INT 3
24593: ARRAY
24594: GREATEREQUAL
24595: AND
24596: ST_TO_ADDR
// end ;
24597: LD_VAR 0 2
24601: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
24602: LD_INT 0
24604: PPUSH
24605: PPUSH
24606: PPUSH
// pom := GetBase ( building ) ;
24607: LD_ADDR_VAR 0 4
24611: PUSH
24612: LD_VAR 0 1
24616: PPUSH
24617: CALL_OW 274
24621: ST_TO_ADDR
// if not pom then
24622: LD_VAR 0 4
24626: NOT
24627: IFFALSE 24631
// exit ;
24629: GO 24732
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24631: LD_ADDR_VAR 0 5
24635: PUSH
24636: LD_VAR 0 2
24640: PPUSH
24641: LD_VAR 0 1
24645: PPUSH
24646: CALL_OW 248
24650: PPUSH
24651: CALL_OW 450
24655: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24656: LD_ADDR_VAR 0 3
24660: PUSH
24661: LD_VAR 0 4
24665: PPUSH
24666: LD_INT 1
24668: PPUSH
24669: CALL_OW 275
24673: PUSH
24674: LD_VAR 0 5
24678: PUSH
24679: LD_INT 1
24681: ARRAY
24682: GREATEREQUAL
24683: PUSH
24684: LD_VAR 0 4
24688: PPUSH
24689: LD_INT 2
24691: PPUSH
24692: CALL_OW 275
24696: PUSH
24697: LD_VAR 0 5
24701: PUSH
24702: LD_INT 2
24704: ARRAY
24705: GREATEREQUAL
24706: AND
24707: PUSH
24708: LD_VAR 0 4
24712: PPUSH
24713: LD_INT 3
24715: PPUSH
24716: CALL_OW 275
24720: PUSH
24721: LD_VAR 0 5
24725: PUSH
24726: LD_INT 3
24728: ARRAY
24729: GREATEREQUAL
24730: AND
24731: ST_TO_ADDR
// end ;
24732: LD_VAR 0 3
24736: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
24737: LD_INT 0
24739: PPUSH
24740: PPUSH
24741: PPUSH
24742: PPUSH
24743: PPUSH
24744: PPUSH
24745: PPUSH
24746: PPUSH
24747: PPUSH
24748: PPUSH
24749: PPUSH
// result := false ;
24750: LD_ADDR_VAR 0 8
24754: PUSH
24755: LD_INT 0
24757: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
24758: LD_VAR 0 5
24762: NOT
24763: PUSH
24764: LD_VAR 0 1
24768: NOT
24769: OR
24770: PUSH
24771: LD_VAR 0 2
24775: NOT
24776: OR
24777: PUSH
24778: LD_VAR 0 3
24782: NOT
24783: OR
24784: IFFALSE 24788
// exit ;
24786: GO 25602
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
24788: LD_ADDR_VAR 0 14
24792: PUSH
24793: LD_VAR 0 1
24797: PPUSH
24798: LD_VAR 0 2
24802: PPUSH
24803: LD_VAR 0 3
24807: PPUSH
24808: LD_VAR 0 4
24812: PPUSH
24813: LD_VAR 0 5
24817: PUSH
24818: LD_INT 1
24820: ARRAY
24821: PPUSH
24822: CALL_OW 248
24826: PPUSH
24827: LD_INT 0
24829: PPUSH
24830: CALL 26839 0 6
24834: ST_TO_ADDR
// if not hexes then
24835: LD_VAR 0 14
24839: NOT
24840: IFFALSE 24844
// exit ;
24842: GO 25602
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24844: LD_ADDR_VAR 0 17
24848: PUSH
24849: LD_VAR 0 5
24853: PPUSH
24854: LD_INT 22
24856: PUSH
24857: LD_VAR 0 13
24861: PPUSH
24862: CALL_OW 255
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 2
24873: PUSH
24874: LD_INT 30
24876: PUSH
24877: LD_INT 0
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 30
24886: PUSH
24887: LD_INT 1
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: LIST
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PPUSH
24903: CALL_OW 72
24907: ST_TO_ADDR
// for i = 1 to hexes do
24908: LD_ADDR_VAR 0 9
24912: PUSH
24913: DOUBLE
24914: LD_INT 1
24916: DEC
24917: ST_TO_ADDR
24918: LD_VAR 0 14
24922: PUSH
24923: FOR_TO
24924: IFFALSE 25600
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24926: LD_ADDR_VAR 0 13
24930: PUSH
24931: LD_VAR 0 14
24935: PUSH
24936: LD_VAR 0 9
24940: ARRAY
24941: PUSH
24942: LD_INT 1
24944: ARRAY
24945: PPUSH
24946: LD_VAR 0 14
24950: PUSH
24951: LD_VAR 0 9
24955: ARRAY
24956: PUSH
24957: LD_INT 2
24959: ARRAY
24960: PPUSH
24961: CALL_OW 428
24965: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
24966: LD_VAR 0 14
24970: PUSH
24971: LD_VAR 0 9
24975: ARRAY
24976: PUSH
24977: LD_INT 1
24979: ARRAY
24980: PPUSH
24981: LD_VAR 0 14
24985: PUSH
24986: LD_VAR 0 9
24990: ARRAY
24991: PUSH
24992: LD_INT 2
24994: ARRAY
24995: PPUSH
24996: CALL_OW 351
25000: PUSH
25001: LD_VAR 0 14
25005: PUSH
25006: LD_VAR 0 9
25010: ARRAY
25011: PUSH
25012: LD_INT 1
25014: ARRAY
25015: PPUSH
25016: LD_VAR 0 14
25020: PUSH
25021: LD_VAR 0 9
25025: ARRAY
25026: PUSH
25027: LD_INT 2
25029: ARRAY
25030: PPUSH
25031: CALL_OW 488
25035: NOT
25036: OR
25037: PUSH
25038: LD_VAR 0 13
25042: PPUSH
25043: CALL_OW 247
25047: PUSH
25048: LD_INT 3
25050: EQUAL
25051: OR
25052: IFFALSE 25058
// exit ;
25054: POP
25055: POP
25056: GO 25602
// if not tmp then
25058: LD_VAR 0 13
25062: NOT
25063: IFFALSE 25067
// continue ;
25065: GO 24923
// result := true ;
25067: LD_ADDR_VAR 0 8
25071: PUSH
25072: LD_INT 1
25074: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
25075: LD_VAR 0 6
25079: PUSH
25080: LD_VAR 0 13
25084: PPUSH
25085: CALL_OW 247
25089: PUSH
25090: LD_INT 2
25092: EQUAL
25093: AND
25094: PUSH
25095: LD_VAR 0 13
25099: PPUSH
25100: CALL_OW 263
25104: PUSH
25105: LD_INT 1
25107: EQUAL
25108: AND
25109: IFFALSE 25273
// begin if IsDrivenBy ( tmp ) then
25111: LD_VAR 0 13
25115: PPUSH
25116: CALL_OW 311
25120: IFFALSE 25124
// continue ;
25122: GO 24923
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
25124: LD_VAR 0 6
25128: PPUSH
25129: LD_INT 3
25131: PUSH
25132: LD_INT 60
25134: PUSH
25135: EMPTY
25136: LIST
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 3
25144: PUSH
25145: LD_INT 55
25147: PUSH
25148: EMPTY
25149: LIST
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PPUSH
25159: CALL_OW 72
25163: IFFALSE 25271
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
25165: LD_ADDR_VAR 0 18
25169: PUSH
25170: LD_VAR 0 6
25174: PPUSH
25175: LD_INT 3
25177: PUSH
25178: LD_INT 60
25180: PUSH
25181: EMPTY
25182: LIST
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 3
25190: PUSH
25191: LD_INT 55
25193: PUSH
25194: EMPTY
25195: LIST
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PPUSH
25205: CALL_OW 72
25209: PUSH
25210: LD_INT 1
25212: ARRAY
25213: ST_TO_ADDR
// if IsInUnit ( driver ) then
25214: LD_VAR 0 18
25218: PPUSH
25219: CALL_OW 310
25223: IFFALSE 25234
// ComExit ( driver ) ;
25225: LD_VAR 0 18
25229: PPUSH
25230: CALL 49967 0 1
// AddComEnterUnit ( driver , tmp ) ;
25234: LD_VAR 0 18
25238: PPUSH
25239: LD_VAR 0 13
25243: PPUSH
25244: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
25248: LD_VAR 0 18
25252: PPUSH
25253: LD_VAR 0 7
25257: PPUSH
25258: CALL_OW 173
// AddComExitVehicle ( driver ) ;
25262: LD_VAR 0 18
25266: PPUSH
25267: CALL_OW 181
// end ; continue ;
25271: GO 24923
// end ; if not cleaners or not tmp in cleaners then
25273: LD_VAR 0 6
25277: NOT
25278: PUSH
25279: LD_VAR 0 13
25283: PUSH
25284: LD_VAR 0 6
25288: IN
25289: NOT
25290: OR
25291: IFFALSE 25598
// begin if dep then
25293: LD_VAR 0 17
25297: IFFALSE 25433
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
25299: LD_ADDR_VAR 0 16
25303: PUSH
25304: LD_VAR 0 17
25308: PUSH
25309: LD_INT 1
25311: ARRAY
25312: PPUSH
25313: CALL_OW 250
25317: PPUSH
25318: LD_VAR 0 17
25322: PUSH
25323: LD_INT 1
25325: ARRAY
25326: PPUSH
25327: CALL_OW 254
25331: PPUSH
25332: LD_INT 5
25334: PPUSH
25335: CALL_OW 272
25339: PUSH
25340: LD_VAR 0 17
25344: PUSH
25345: LD_INT 1
25347: ARRAY
25348: PPUSH
25349: CALL_OW 251
25353: PPUSH
25354: LD_VAR 0 17
25358: PUSH
25359: LD_INT 1
25361: ARRAY
25362: PPUSH
25363: CALL_OW 254
25367: PPUSH
25368: LD_INT 5
25370: PPUSH
25371: CALL_OW 273
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
25380: LD_VAR 0 16
25384: PUSH
25385: LD_INT 1
25387: ARRAY
25388: PPUSH
25389: LD_VAR 0 16
25393: PUSH
25394: LD_INT 2
25396: ARRAY
25397: PPUSH
25398: CALL_OW 488
25402: IFFALSE 25433
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
25404: LD_VAR 0 13
25408: PPUSH
25409: LD_VAR 0 16
25413: PUSH
25414: LD_INT 1
25416: ARRAY
25417: PPUSH
25418: LD_VAR 0 16
25422: PUSH
25423: LD_INT 2
25425: ARRAY
25426: PPUSH
25427: CALL_OW 111
// continue ;
25431: GO 24923
// end ; end ; r := GetDir ( tmp ) ;
25433: LD_ADDR_VAR 0 15
25437: PUSH
25438: LD_VAR 0 13
25442: PPUSH
25443: CALL_OW 254
25447: ST_TO_ADDR
// if r = 5 then
25448: LD_VAR 0 15
25452: PUSH
25453: LD_INT 5
25455: EQUAL
25456: IFFALSE 25466
// r := 0 ;
25458: LD_ADDR_VAR 0 15
25462: PUSH
25463: LD_INT 0
25465: ST_TO_ADDR
// for j = r to 5 do
25466: LD_ADDR_VAR 0 10
25470: PUSH
25471: DOUBLE
25472: LD_VAR 0 15
25476: DEC
25477: ST_TO_ADDR
25478: LD_INT 5
25480: PUSH
25481: FOR_TO
25482: IFFALSE 25596
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
25484: LD_ADDR_VAR 0 11
25488: PUSH
25489: LD_VAR 0 13
25493: PPUSH
25494: CALL_OW 250
25498: PPUSH
25499: LD_VAR 0 10
25503: PPUSH
25504: LD_INT 2
25506: PPUSH
25507: CALL_OW 272
25511: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
25512: LD_ADDR_VAR 0 12
25516: PUSH
25517: LD_VAR 0 13
25521: PPUSH
25522: CALL_OW 251
25526: PPUSH
25527: LD_VAR 0 10
25531: PPUSH
25532: LD_INT 2
25534: PPUSH
25535: CALL_OW 273
25539: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
25540: LD_VAR 0 11
25544: PPUSH
25545: LD_VAR 0 12
25549: PPUSH
25550: CALL_OW 488
25554: PUSH
25555: LD_VAR 0 11
25559: PPUSH
25560: LD_VAR 0 12
25564: PPUSH
25565: CALL_OW 428
25569: NOT
25570: AND
25571: IFFALSE 25594
// begin ComMoveXY ( tmp , _x , _y ) ;
25573: LD_VAR 0 13
25577: PPUSH
25578: LD_VAR 0 11
25582: PPUSH
25583: LD_VAR 0 12
25587: PPUSH
25588: CALL_OW 111
// break ;
25592: GO 25596
// end ; end ;
25594: GO 25481
25596: POP
25597: POP
// end ; end ;
25598: GO 24923
25600: POP
25601: POP
// end ;
25602: LD_VAR 0 8
25606: RET
// export function BuildingTechInvented ( side , btype ) ; begin
25607: LD_INT 0
25609: PPUSH
// result := true ;
25610: LD_ADDR_VAR 0 3
25614: PUSH
25615: LD_INT 1
25617: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
25618: LD_VAR 0 2
25622: PUSH
25623: LD_INT 24
25625: DOUBLE
25626: EQUAL
25627: IFTRUE 25637
25629: LD_INT 33
25631: DOUBLE
25632: EQUAL
25633: IFTRUE 25637
25635: GO 25662
25637: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
25638: LD_ADDR_VAR 0 3
25642: PUSH
25643: LD_INT 32
25645: PPUSH
25646: LD_VAR 0 1
25650: PPUSH
25651: CALL_OW 321
25655: PUSH
25656: LD_INT 2
25658: EQUAL
25659: ST_TO_ADDR
25660: GO 25982
25662: LD_INT 20
25664: DOUBLE
25665: EQUAL
25666: IFTRUE 25670
25668: GO 25695
25670: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
25671: LD_ADDR_VAR 0 3
25675: PUSH
25676: LD_INT 6
25678: PPUSH
25679: LD_VAR 0 1
25683: PPUSH
25684: CALL_OW 321
25688: PUSH
25689: LD_INT 2
25691: EQUAL
25692: ST_TO_ADDR
25693: GO 25982
25695: LD_INT 22
25697: DOUBLE
25698: EQUAL
25699: IFTRUE 25709
25701: LD_INT 36
25703: DOUBLE
25704: EQUAL
25705: IFTRUE 25709
25707: GO 25734
25709: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
25710: LD_ADDR_VAR 0 3
25714: PUSH
25715: LD_INT 15
25717: PPUSH
25718: LD_VAR 0 1
25722: PPUSH
25723: CALL_OW 321
25727: PUSH
25728: LD_INT 2
25730: EQUAL
25731: ST_TO_ADDR
25732: GO 25982
25734: LD_INT 30
25736: DOUBLE
25737: EQUAL
25738: IFTRUE 25742
25740: GO 25767
25742: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
25743: LD_ADDR_VAR 0 3
25747: PUSH
25748: LD_INT 20
25750: PPUSH
25751: LD_VAR 0 1
25755: PPUSH
25756: CALL_OW 321
25760: PUSH
25761: LD_INT 2
25763: EQUAL
25764: ST_TO_ADDR
25765: GO 25982
25767: LD_INT 28
25769: DOUBLE
25770: EQUAL
25771: IFTRUE 25781
25773: LD_INT 21
25775: DOUBLE
25776: EQUAL
25777: IFTRUE 25781
25779: GO 25806
25781: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
25782: LD_ADDR_VAR 0 3
25786: PUSH
25787: LD_INT 21
25789: PPUSH
25790: LD_VAR 0 1
25794: PPUSH
25795: CALL_OW 321
25799: PUSH
25800: LD_INT 2
25802: EQUAL
25803: ST_TO_ADDR
25804: GO 25982
25806: LD_INT 16
25808: DOUBLE
25809: EQUAL
25810: IFTRUE 25814
25812: GO 25841
25814: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
25815: LD_ADDR_VAR 0 3
25819: PUSH
25820: LD_EXP 108
25824: PPUSH
25825: LD_VAR 0 1
25829: PPUSH
25830: CALL_OW 321
25834: PUSH
25835: LD_INT 2
25837: EQUAL
25838: ST_TO_ADDR
25839: GO 25982
25841: LD_INT 19
25843: DOUBLE
25844: EQUAL
25845: IFTRUE 25855
25847: LD_INT 23
25849: DOUBLE
25850: EQUAL
25851: IFTRUE 25855
25853: GO 25882
25855: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
25856: LD_ADDR_VAR 0 3
25860: PUSH
25861: LD_EXP 107
25865: PPUSH
25866: LD_VAR 0 1
25870: PPUSH
25871: CALL_OW 321
25875: PUSH
25876: LD_INT 2
25878: EQUAL
25879: ST_TO_ADDR
25880: GO 25982
25882: LD_INT 17
25884: DOUBLE
25885: EQUAL
25886: IFTRUE 25890
25888: GO 25915
25890: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
25891: LD_ADDR_VAR 0 3
25895: PUSH
25896: LD_INT 39
25898: PPUSH
25899: LD_VAR 0 1
25903: PPUSH
25904: CALL_OW 321
25908: PUSH
25909: LD_INT 2
25911: EQUAL
25912: ST_TO_ADDR
25913: GO 25982
25915: LD_INT 18
25917: DOUBLE
25918: EQUAL
25919: IFTRUE 25923
25921: GO 25948
25923: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
25924: LD_ADDR_VAR 0 3
25928: PUSH
25929: LD_INT 40
25931: PPUSH
25932: LD_VAR 0 1
25936: PPUSH
25937: CALL_OW 321
25941: PUSH
25942: LD_INT 2
25944: EQUAL
25945: ST_TO_ADDR
25946: GO 25982
25948: LD_INT 27
25950: DOUBLE
25951: EQUAL
25952: IFTRUE 25956
25954: GO 25981
25956: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
25957: LD_ADDR_VAR 0 3
25961: PUSH
25962: LD_INT 35
25964: PPUSH
25965: LD_VAR 0 1
25969: PPUSH
25970: CALL_OW 321
25974: PUSH
25975: LD_INT 2
25977: EQUAL
25978: ST_TO_ADDR
25979: GO 25982
25981: POP
// end ;
25982: LD_VAR 0 3
25986: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
25987: LD_INT 0
25989: PPUSH
25990: PPUSH
25991: PPUSH
25992: PPUSH
25993: PPUSH
25994: PPUSH
25995: PPUSH
25996: PPUSH
25997: PPUSH
25998: PPUSH
25999: PPUSH
// result := false ;
26000: LD_ADDR_VAR 0 6
26004: PUSH
26005: LD_INT 0
26007: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
26008: LD_VAR 0 1
26012: NOT
26013: PUSH
26014: LD_VAR 0 1
26018: PPUSH
26019: CALL_OW 266
26023: PUSH
26024: LD_INT 0
26026: PUSH
26027: LD_INT 1
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: IN
26034: NOT
26035: OR
26036: PUSH
26037: LD_VAR 0 2
26041: NOT
26042: OR
26043: PUSH
26044: LD_VAR 0 5
26048: PUSH
26049: LD_INT 0
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: LD_INT 2
26057: PUSH
26058: LD_INT 3
26060: PUSH
26061: LD_INT 4
26063: PUSH
26064: LD_INT 5
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: IN
26075: NOT
26076: OR
26077: PUSH
26078: LD_VAR 0 3
26082: PPUSH
26083: LD_VAR 0 4
26087: PPUSH
26088: CALL_OW 488
26092: NOT
26093: OR
26094: IFFALSE 26098
// exit ;
26096: GO 26834
// side := GetSide ( depot ) ;
26098: LD_ADDR_VAR 0 9
26102: PUSH
26103: LD_VAR 0 1
26107: PPUSH
26108: CALL_OW 255
26112: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
26113: LD_VAR 0 9
26117: PPUSH
26118: LD_VAR 0 2
26122: PPUSH
26123: CALL 25607 0 2
26127: NOT
26128: IFFALSE 26132
// exit ;
26130: GO 26834
// pom := GetBase ( depot ) ;
26132: LD_ADDR_VAR 0 10
26136: PUSH
26137: LD_VAR 0 1
26141: PPUSH
26142: CALL_OW 274
26146: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
26147: LD_ADDR_VAR 0 11
26151: PUSH
26152: LD_VAR 0 2
26156: PPUSH
26157: LD_VAR 0 1
26161: PPUSH
26162: CALL_OW 248
26166: PPUSH
26167: CALL_OW 450
26171: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
26172: LD_VAR 0 10
26176: PPUSH
26177: LD_INT 1
26179: PPUSH
26180: CALL_OW 275
26184: PUSH
26185: LD_VAR 0 11
26189: PUSH
26190: LD_INT 1
26192: ARRAY
26193: GREATEREQUAL
26194: PUSH
26195: LD_VAR 0 10
26199: PPUSH
26200: LD_INT 2
26202: PPUSH
26203: CALL_OW 275
26207: PUSH
26208: LD_VAR 0 11
26212: PUSH
26213: LD_INT 2
26215: ARRAY
26216: GREATEREQUAL
26217: AND
26218: PUSH
26219: LD_VAR 0 10
26223: PPUSH
26224: LD_INT 3
26226: PPUSH
26227: CALL_OW 275
26231: PUSH
26232: LD_VAR 0 11
26236: PUSH
26237: LD_INT 3
26239: ARRAY
26240: GREATEREQUAL
26241: AND
26242: NOT
26243: IFFALSE 26247
// exit ;
26245: GO 26834
// if GetBType ( depot ) = b_depot then
26247: LD_VAR 0 1
26251: PPUSH
26252: CALL_OW 266
26256: PUSH
26257: LD_INT 0
26259: EQUAL
26260: IFFALSE 26272
// dist := 28 else
26262: LD_ADDR_VAR 0 14
26266: PUSH
26267: LD_INT 28
26269: ST_TO_ADDR
26270: GO 26280
// dist := 36 ;
26272: LD_ADDR_VAR 0 14
26276: PUSH
26277: LD_INT 36
26279: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
26280: LD_VAR 0 1
26284: PPUSH
26285: LD_VAR 0 3
26289: PPUSH
26290: LD_VAR 0 4
26294: PPUSH
26295: CALL_OW 297
26299: PUSH
26300: LD_VAR 0 14
26304: GREATER
26305: IFFALSE 26309
// exit ;
26307: GO 26834
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
26309: LD_ADDR_VAR 0 12
26313: PUSH
26314: LD_VAR 0 2
26318: PPUSH
26319: LD_VAR 0 3
26323: PPUSH
26324: LD_VAR 0 4
26328: PPUSH
26329: LD_VAR 0 5
26333: PPUSH
26334: LD_VAR 0 1
26338: PPUSH
26339: CALL_OW 248
26343: PPUSH
26344: LD_INT 0
26346: PPUSH
26347: CALL 26839 0 6
26351: ST_TO_ADDR
// if not hexes then
26352: LD_VAR 0 12
26356: NOT
26357: IFFALSE 26361
// exit ;
26359: GO 26834
// hex := GetHexInfo ( x , y ) ;
26361: LD_ADDR_VAR 0 15
26365: PUSH
26366: LD_VAR 0 3
26370: PPUSH
26371: LD_VAR 0 4
26375: PPUSH
26376: CALL_OW 546
26380: ST_TO_ADDR
// if hex [ 1 ] then
26381: LD_VAR 0 15
26385: PUSH
26386: LD_INT 1
26388: ARRAY
26389: IFFALSE 26393
// exit ;
26391: GO 26834
// height := hex [ 2 ] ;
26393: LD_ADDR_VAR 0 13
26397: PUSH
26398: LD_VAR 0 15
26402: PUSH
26403: LD_INT 2
26405: ARRAY
26406: ST_TO_ADDR
// for i = 1 to hexes do
26407: LD_ADDR_VAR 0 7
26411: PUSH
26412: DOUBLE
26413: LD_INT 1
26415: DEC
26416: ST_TO_ADDR
26417: LD_VAR 0 12
26421: PUSH
26422: FOR_TO
26423: IFFALSE 26753
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
26425: LD_VAR 0 12
26429: PUSH
26430: LD_VAR 0 7
26434: ARRAY
26435: PUSH
26436: LD_INT 1
26438: ARRAY
26439: PPUSH
26440: LD_VAR 0 12
26444: PUSH
26445: LD_VAR 0 7
26449: ARRAY
26450: PUSH
26451: LD_INT 2
26453: ARRAY
26454: PPUSH
26455: CALL_OW 488
26459: NOT
26460: PUSH
26461: LD_VAR 0 12
26465: PUSH
26466: LD_VAR 0 7
26470: ARRAY
26471: PUSH
26472: LD_INT 1
26474: ARRAY
26475: PPUSH
26476: LD_VAR 0 12
26480: PUSH
26481: LD_VAR 0 7
26485: ARRAY
26486: PUSH
26487: LD_INT 2
26489: ARRAY
26490: PPUSH
26491: CALL_OW 428
26495: PUSH
26496: LD_INT 0
26498: GREATER
26499: OR
26500: PUSH
26501: LD_VAR 0 12
26505: PUSH
26506: LD_VAR 0 7
26510: ARRAY
26511: PUSH
26512: LD_INT 1
26514: ARRAY
26515: PPUSH
26516: LD_VAR 0 12
26520: PUSH
26521: LD_VAR 0 7
26525: ARRAY
26526: PUSH
26527: LD_INT 2
26529: ARRAY
26530: PPUSH
26531: CALL_OW 351
26535: OR
26536: IFFALSE 26542
// exit ;
26538: POP
26539: POP
26540: GO 26834
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26542: LD_ADDR_VAR 0 8
26546: PUSH
26547: LD_VAR 0 12
26551: PUSH
26552: LD_VAR 0 7
26556: ARRAY
26557: PUSH
26558: LD_INT 1
26560: ARRAY
26561: PPUSH
26562: LD_VAR 0 12
26566: PUSH
26567: LD_VAR 0 7
26571: ARRAY
26572: PUSH
26573: LD_INT 2
26575: ARRAY
26576: PPUSH
26577: CALL_OW 546
26581: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
26582: LD_VAR 0 8
26586: PUSH
26587: LD_INT 1
26589: ARRAY
26590: PUSH
26591: LD_VAR 0 8
26595: PUSH
26596: LD_INT 2
26598: ARRAY
26599: PUSH
26600: LD_VAR 0 13
26604: PUSH
26605: LD_INT 2
26607: PLUS
26608: GREATER
26609: OR
26610: PUSH
26611: LD_VAR 0 8
26615: PUSH
26616: LD_INT 2
26618: ARRAY
26619: PUSH
26620: LD_VAR 0 13
26624: PUSH
26625: LD_INT 2
26627: MINUS
26628: LESS
26629: OR
26630: PUSH
26631: LD_VAR 0 8
26635: PUSH
26636: LD_INT 3
26638: ARRAY
26639: PUSH
26640: LD_INT 0
26642: PUSH
26643: LD_INT 8
26645: PUSH
26646: LD_INT 9
26648: PUSH
26649: LD_INT 10
26651: PUSH
26652: LD_INT 11
26654: PUSH
26655: LD_INT 12
26657: PUSH
26658: LD_INT 13
26660: PUSH
26661: LD_INT 16
26663: PUSH
26664: LD_INT 17
26666: PUSH
26667: LD_INT 18
26669: PUSH
26670: LD_INT 19
26672: PUSH
26673: LD_INT 20
26675: PUSH
26676: LD_INT 21
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: IN
26694: NOT
26695: OR
26696: PUSH
26697: LD_VAR 0 8
26701: PUSH
26702: LD_INT 5
26704: ARRAY
26705: NOT
26706: OR
26707: PUSH
26708: LD_VAR 0 8
26712: PUSH
26713: LD_INT 6
26715: ARRAY
26716: PUSH
26717: LD_INT 1
26719: PUSH
26720: LD_INT 2
26722: PUSH
26723: LD_INT 7
26725: PUSH
26726: LD_INT 9
26728: PUSH
26729: LD_INT 10
26731: PUSH
26732: LD_INT 11
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: IN
26743: NOT
26744: OR
26745: IFFALSE 26751
// exit ;
26747: POP
26748: POP
26749: GO 26834
// end ;
26751: GO 26422
26753: POP
26754: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
26755: LD_VAR 0 9
26759: PPUSH
26760: LD_VAR 0 3
26764: PPUSH
26765: LD_VAR 0 4
26769: PPUSH
26770: LD_INT 20
26772: PPUSH
26773: CALL 18672 0 4
26777: PUSH
26778: LD_INT 4
26780: ARRAY
26781: IFFALSE 26785
// exit ;
26783: GO 26834
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
26785: LD_VAR 0 2
26789: PUSH
26790: LD_INT 29
26792: PUSH
26793: LD_INT 30
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: IN
26800: PUSH
26801: LD_VAR 0 3
26805: PPUSH
26806: LD_VAR 0 4
26810: PPUSH
26811: LD_VAR 0 9
26815: PPUSH
26816: CALL_OW 440
26820: NOT
26821: AND
26822: IFFALSE 26826
// exit ;
26824: GO 26834
// result := true ;
26826: LD_ADDR_VAR 0 6
26830: PUSH
26831: LD_INT 1
26833: ST_TO_ADDR
// end ;
26834: LD_VAR 0 6
26838: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
26839: LD_INT 0
26841: PPUSH
26842: PPUSH
26843: PPUSH
26844: PPUSH
26845: PPUSH
26846: PPUSH
26847: PPUSH
26848: PPUSH
26849: PPUSH
26850: PPUSH
26851: PPUSH
26852: PPUSH
26853: PPUSH
26854: PPUSH
26855: PPUSH
26856: PPUSH
26857: PPUSH
26858: PPUSH
26859: PPUSH
26860: PPUSH
26861: PPUSH
26862: PPUSH
26863: PPUSH
26864: PPUSH
26865: PPUSH
26866: PPUSH
26867: PPUSH
26868: PPUSH
26869: PPUSH
26870: PPUSH
26871: PPUSH
26872: PPUSH
26873: PPUSH
26874: PPUSH
26875: PPUSH
26876: PPUSH
26877: PPUSH
26878: PPUSH
26879: PPUSH
26880: PPUSH
26881: PPUSH
26882: PPUSH
26883: PPUSH
26884: PPUSH
26885: PPUSH
26886: PPUSH
26887: PPUSH
26888: PPUSH
26889: PPUSH
26890: PPUSH
26891: PPUSH
26892: PPUSH
26893: PPUSH
26894: PPUSH
26895: PPUSH
26896: PPUSH
26897: PPUSH
26898: PPUSH
// result = [ ] ;
26899: LD_ADDR_VAR 0 7
26903: PUSH
26904: EMPTY
26905: ST_TO_ADDR
// temp_list = [ ] ;
26906: LD_ADDR_VAR 0 9
26910: PUSH
26911: EMPTY
26912: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26913: LD_VAR 0 4
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: LD_INT 1
26923: PUSH
26924: LD_INT 2
26926: PUSH
26927: LD_INT 3
26929: PUSH
26930: LD_INT 4
26932: PUSH
26933: LD_INT 5
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: IN
26944: NOT
26945: PUSH
26946: LD_VAR 0 1
26950: PUSH
26951: LD_INT 0
26953: PUSH
26954: LD_INT 1
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: IN
26961: PUSH
26962: LD_VAR 0 5
26966: PUSH
26967: LD_INT 1
26969: PUSH
26970: LD_INT 2
26972: PUSH
26973: LD_INT 3
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: LIST
26980: IN
26981: NOT
26982: AND
26983: OR
26984: IFFALSE 26988
// exit ;
26986: GO 45379
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26988: LD_VAR 0 1
26992: PUSH
26993: LD_INT 6
26995: PUSH
26996: LD_INT 7
26998: PUSH
26999: LD_INT 8
27001: PUSH
27002: LD_INT 13
27004: PUSH
27005: LD_INT 12
27007: PUSH
27008: LD_INT 15
27010: PUSH
27011: LD_INT 11
27013: PUSH
27014: LD_INT 14
27016: PUSH
27017: LD_INT 10
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: IN
27031: IFFALSE 27041
// btype = b_lab ;
27033: LD_ADDR_VAR 0 1
27037: PUSH
27038: LD_INT 6
27040: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
27041: LD_VAR 0 6
27045: PUSH
27046: LD_INT 0
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: LD_INT 2
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: LIST
27059: IN
27060: NOT
27061: PUSH
27062: LD_VAR 0 1
27066: PUSH
27067: LD_INT 0
27069: PUSH
27070: LD_INT 1
27072: PUSH
27073: LD_INT 2
27075: PUSH
27076: LD_INT 3
27078: PUSH
27079: LD_INT 6
27081: PUSH
27082: LD_INT 36
27084: PUSH
27085: LD_INT 4
27087: PUSH
27088: LD_INT 5
27090: PUSH
27091: LD_INT 31
27093: PUSH
27094: LD_INT 32
27096: PUSH
27097: LD_INT 33
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: IN
27113: NOT
27114: PUSH
27115: LD_VAR 0 6
27119: PUSH
27120: LD_INT 1
27122: EQUAL
27123: AND
27124: OR
27125: PUSH
27126: LD_VAR 0 1
27130: PUSH
27131: LD_INT 2
27133: PUSH
27134: LD_INT 3
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: IN
27141: NOT
27142: PUSH
27143: LD_VAR 0 6
27147: PUSH
27148: LD_INT 2
27150: EQUAL
27151: AND
27152: OR
27153: IFFALSE 27163
// mode = 0 ;
27155: LD_ADDR_VAR 0 6
27159: PUSH
27160: LD_INT 0
27162: ST_TO_ADDR
// case mode of 0 :
27163: LD_VAR 0 6
27167: PUSH
27168: LD_INT 0
27170: DOUBLE
27171: EQUAL
27172: IFTRUE 27176
27174: GO 38629
27176: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27177: LD_ADDR_VAR 0 11
27181: PUSH
27182: LD_INT 0
27184: PUSH
27185: LD_INT 0
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 0
27194: PUSH
27195: LD_INT 1
27197: NEG
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 1
27205: PUSH
27206: LD_INT 0
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 1
27215: PUSH
27216: LD_INT 1
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 0
27225: PUSH
27226: LD_INT 1
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 1
27235: NEG
27236: PUSH
27237: LD_INT 0
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 1
27246: NEG
27247: PUSH
27248: LD_INT 1
27250: NEG
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 1
27258: NEG
27259: PUSH
27260: LD_INT 2
27262: NEG
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 0
27270: PUSH
27271: LD_INT 2
27273: NEG
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 1
27281: PUSH
27282: LD_INT 1
27284: NEG
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 1
27292: PUSH
27293: LD_INT 2
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 0
27302: PUSH
27303: LD_INT 2
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 1
27312: NEG
27313: PUSH
27314: LD_INT 1
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 1
27323: PUSH
27324: LD_INT 3
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 0
27333: PUSH
27334: LD_INT 3
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 1
27343: NEG
27344: PUSH
27345: LD_INT 2
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27370: LD_ADDR_VAR 0 12
27374: PUSH
27375: LD_INT 0
27377: PUSH
27378: LD_INT 0
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 0
27387: PUSH
27388: LD_INT 1
27390: NEG
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 1
27398: PUSH
27399: LD_INT 0
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 1
27408: PUSH
27409: LD_INT 1
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 0
27418: PUSH
27419: LD_INT 1
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 1
27428: NEG
27429: PUSH
27430: LD_INT 0
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 1
27439: NEG
27440: PUSH
27441: LD_INT 1
27443: NEG
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 1
27451: PUSH
27452: LD_INT 1
27454: NEG
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 2
27462: PUSH
27463: LD_INT 0
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: LD_INT 2
27472: PUSH
27473: LD_INT 1
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 1
27482: NEG
27483: PUSH
27484: LD_INT 1
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: LD_INT 2
27493: NEG
27494: PUSH
27495: LD_INT 0
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 2
27504: NEG
27505: PUSH
27506: LD_INT 1
27508: NEG
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 2
27516: NEG
27517: PUSH
27518: LD_INT 1
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 3
27527: NEG
27528: PUSH
27529: LD_INT 0
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 3
27538: NEG
27539: PUSH
27540: LD_INT 1
27542: NEG
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27566: LD_ADDR_VAR 0 13
27570: PUSH
27571: LD_INT 0
27573: PUSH
27574: LD_INT 0
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 0
27583: PUSH
27584: LD_INT 1
27586: NEG
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 1
27594: PUSH
27595: LD_INT 0
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 1
27604: PUSH
27605: LD_INT 1
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 0
27614: PUSH
27615: LD_INT 1
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 1
27624: NEG
27625: PUSH
27626: LD_INT 0
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 1
27635: NEG
27636: PUSH
27637: LD_INT 1
27639: NEG
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 1
27647: NEG
27648: PUSH
27649: LD_INT 2
27651: NEG
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 2
27659: PUSH
27660: LD_INT 1
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 2
27669: PUSH
27670: LD_INT 2
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 1
27679: PUSH
27680: LD_INT 2
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 2
27689: NEG
27690: PUSH
27691: LD_INT 1
27693: NEG
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 2
27701: NEG
27702: PUSH
27703: LD_INT 2
27705: NEG
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 2
27713: NEG
27714: PUSH
27715: LD_INT 3
27717: NEG
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 3
27725: NEG
27726: PUSH
27727: LD_INT 2
27729: NEG
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 3
27737: NEG
27738: PUSH
27739: LD_INT 3
27741: NEG
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27765: LD_ADDR_VAR 0 14
27769: PUSH
27770: LD_INT 0
27772: PUSH
27773: LD_INT 0
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 0
27782: PUSH
27783: LD_INT 1
27785: NEG
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 1
27793: PUSH
27794: LD_INT 0
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 1
27803: PUSH
27804: LD_INT 1
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 0
27813: PUSH
27814: LD_INT 1
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 1
27823: NEG
27824: PUSH
27825: LD_INT 0
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 1
27834: NEG
27835: PUSH
27836: LD_INT 1
27838: NEG
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: NEG
27847: PUSH
27848: LD_INT 2
27850: NEG
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 0
27858: PUSH
27859: LD_INT 2
27861: NEG
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 1
27869: PUSH
27870: LD_INT 1
27872: NEG
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 1
27880: PUSH
27881: LD_INT 2
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 0
27890: PUSH
27891: LD_INT 2
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 1
27900: NEG
27901: PUSH
27902: LD_INT 1
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 1
27911: NEG
27912: PUSH
27913: LD_INT 3
27915: NEG
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 0
27923: PUSH
27924: LD_INT 3
27926: NEG
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 1
27934: PUSH
27935: LD_INT 2
27937: NEG
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27961: LD_ADDR_VAR 0 15
27965: PUSH
27966: LD_INT 0
27968: PUSH
27969: LD_INT 0
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 0
27978: PUSH
27979: LD_INT 1
27981: NEG
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 1
27989: PUSH
27990: LD_INT 0
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 1
27999: PUSH
28000: LD_INT 1
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 0
28009: PUSH
28010: LD_INT 1
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 1
28019: NEG
28020: PUSH
28021: LD_INT 0
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 1
28030: NEG
28031: PUSH
28032: LD_INT 1
28034: NEG
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 1
28042: PUSH
28043: LD_INT 1
28045: NEG
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 2
28053: PUSH
28054: LD_INT 0
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 2
28063: PUSH
28064: LD_INT 1
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 1
28073: NEG
28074: PUSH
28075: LD_INT 1
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 2
28084: NEG
28085: PUSH
28086: LD_INT 0
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 2
28095: NEG
28096: PUSH
28097: LD_INT 1
28099: NEG
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: LD_INT 2
28107: PUSH
28108: LD_INT 1
28110: NEG
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 3
28118: PUSH
28119: LD_INT 0
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 3
28128: PUSH
28129: LD_INT 1
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28154: LD_ADDR_VAR 0 16
28158: PUSH
28159: LD_INT 0
28161: PUSH
28162: LD_INT 0
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 0
28171: PUSH
28172: LD_INT 1
28174: NEG
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 1
28182: PUSH
28183: LD_INT 0
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: LD_INT 1
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 0
28202: PUSH
28203: LD_INT 1
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 1
28212: NEG
28213: PUSH
28214: LD_INT 0
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 1
28223: NEG
28224: PUSH
28225: LD_INT 1
28227: NEG
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 1
28235: NEG
28236: PUSH
28237: LD_INT 2
28239: NEG
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 2
28247: PUSH
28248: LD_INT 1
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 2
28257: PUSH
28258: LD_INT 2
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 1
28267: PUSH
28268: LD_INT 2
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 2
28277: NEG
28278: PUSH
28279: LD_INT 1
28281: NEG
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 2
28289: NEG
28290: PUSH
28291: LD_INT 2
28293: NEG
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 3
28301: PUSH
28302: LD_INT 2
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 3
28311: PUSH
28312: LD_INT 3
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 2
28321: PUSH
28322: LD_INT 3
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28347: LD_ADDR_VAR 0 17
28351: PUSH
28352: LD_INT 0
28354: PUSH
28355: LD_INT 0
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 0
28364: PUSH
28365: LD_INT 1
28367: NEG
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 1
28375: PUSH
28376: LD_INT 0
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 1
28385: PUSH
28386: LD_INT 1
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: LD_INT 1
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 1
28405: NEG
28406: PUSH
28407: LD_INT 0
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 1
28416: NEG
28417: PUSH
28418: LD_INT 1
28420: NEG
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 1
28428: NEG
28429: PUSH
28430: LD_INT 2
28432: NEG
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 0
28440: PUSH
28441: LD_INT 2
28443: NEG
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 1
28451: PUSH
28452: LD_INT 1
28454: NEG
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 2
28462: PUSH
28463: LD_INT 0
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 2
28472: PUSH
28473: LD_INT 1
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 2
28482: PUSH
28483: LD_INT 2
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 1
28492: PUSH
28493: LD_INT 2
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 0
28502: PUSH
28503: LD_INT 2
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 1
28512: NEG
28513: PUSH
28514: LD_INT 1
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 2
28523: NEG
28524: PUSH
28525: LD_INT 0
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 2
28534: NEG
28535: PUSH
28536: LD_INT 1
28538: NEG
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 2
28546: NEG
28547: PUSH
28548: LD_INT 2
28550: NEG
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28577: LD_ADDR_VAR 0 18
28581: PUSH
28582: LD_INT 0
28584: PUSH
28585: LD_INT 0
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 0
28594: PUSH
28595: LD_INT 1
28597: NEG
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 1
28605: PUSH
28606: LD_INT 0
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 1
28615: PUSH
28616: LD_INT 1
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 0
28625: PUSH
28626: LD_INT 1
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 1
28635: NEG
28636: PUSH
28637: LD_INT 0
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 1
28646: NEG
28647: PUSH
28648: LD_INT 1
28650: NEG
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 1
28658: NEG
28659: PUSH
28660: LD_INT 2
28662: NEG
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 0
28670: PUSH
28671: LD_INT 2
28673: NEG
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 1
28681: PUSH
28682: LD_INT 1
28684: NEG
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 2
28692: PUSH
28693: LD_INT 0
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 2
28702: PUSH
28703: LD_INT 1
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 2
28712: PUSH
28713: LD_INT 2
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 1
28722: PUSH
28723: LD_INT 2
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: LD_INT 0
28732: PUSH
28733: LD_INT 2
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 1
28742: NEG
28743: PUSH
28744: LD_INT 1
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 2
28753: NEG
28754: PUSH
28755: LD_INT 0
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 2
28764: NEG
28765: PUSH
28766: LD_INT 1
28768: NEG
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 2
28776: NEG
28777: PUSH
28778: LD_INT 2
28780: NEG
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28807: LD_ADDR_VAR 0 19
28811: PUSH
28812: LD_INT 0
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 0
28824: PUSH
28825: LD_INT 1
28827: NEG
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 1
28835: PUSH
28836: LD_INT 0
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 1
28845: PUSH
28846: LD_INT 1
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 0
28855: PUSH
28856: LD_INT 1
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 1
28865: NEG
28866: PUSH
28867: LD_INT 0
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 1
28876: NEG
28877: PUSH
28878: LD_INT 1
28880: NEG
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 1
28888: NEG
28889: PUSH
28890: LD_INT 2
28892: NEG
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 0
28900: PUSH
28901: LD_INT 2
28903: NEG
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 1
28911: PUSH
28912: LD_INT 1
28914: NEG
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 2
28922: PUSH
28923: LD_INT 0
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 2
28932: PUSH
28933: LD_INT 1
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 2
28942: PUSH
28943: LD_INT 2
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 1
28952: PUSH
28953: LD_INT 2
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: LD_INT 2
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 1
28972: NEG
28973: PUSH
28974: LD_INT 1
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 2
28983: NEG
28984: PUSH
28985: LD_INT 0
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 2
28994: NEG
28995: PUSH
28996: LD_INT 1
28998: NEG
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 2
29006: NEG
29007: PUSH
29008: LD_INT 2
29010: NEG
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29037: LD_ADDR_VAR 0 20
29041: PUSH
29042: LD_INT 0
29044: PUSH
29045: LD_INT 0
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 0
29054: PUSH
29055: LD_INT 1
29057: NEG
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 1
29065: PUSH
29066: LD_INT 0
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: LD_INT 1
29075: PUSH
29076: LD_INT 1
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 0
29085: PUSH
29086: LD_INT 1
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 1
29095: NEG
29096: PUSH
29097: LD_INT 0
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 1
29106: NEG
29107: PUSH
29108: LD_INT 1
29110: NEG
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 1
29118: NEG
29119: PUSH
29120: LD_INT 2
29122: NEG
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 0
29130: PUSH
29131: LD_INT 2
29133: NEG
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 1
29141: PUSH
29142: LD_INT 1
29144: NEG
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 2
29152: PUSH
29153: LD_INT 0
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 2
29162: PUSH
29163: LD_INT 1
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 2
29172: PUSH
29173: LD_INT 2
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 1
29182: PUSH
29183: LD_INT 2
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 0
29192: PUSH
29193: LD_INT 2
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 1
29202: NEG
29203: PUSH
29204: LD_INT 1
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 2
29213: NEG
29214: PUSH
29215: LD_INT 0
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 2
29224: NEG
29225: PUSH
29226: LD_INT 1
29228: NEG
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 2
29236: NEG
29237: PUSH
29238: LD_INT 2
29240: NEG
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29267: LD_ADDR_VAR 0 21
29271: PUSH
29272: LD_INT 0
29274: PUSH
29275: LD_INT 0
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 0
29284: PUSH
29285: LD_INT 1
29287: NEG
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 1
29295: PUSH
29296: LD_INT 0
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: LD_INT 1
29305: PUSH
29306: LD_INT 1
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 0
29315: PUSH
29316: LD_INT 1
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 1
29325: NEG
29326: PUSH
29327: LD_INT 0
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 1
29336: NEG
29337: PUSH
29338: LD_INT 1
29340: NEG
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 1
29348: NEG
29349: PUSH
29350: LD_INT 2
29352: NEG
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 0
29360: PUSH
29361: LD_INT 2
29363: NEG
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 1
29371: PUSH
29372: LD_INT 1
29374: NEG
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 2
29382: PUSH
29383: LD_INT 0
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 2
29392: PUSH
29393: LD_INT 1
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 2
29402: PUSH
29403: LD_INT 2
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 1
29412: PUSH
29413: LD_INT 2
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 0
29422: PUSH
29423: LD_INT 2
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 1
29432: NEG
29433: PUSH
29434: LD_INT 1
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 2
29443: NEG
29444: PUSH
29445: LD_INT 0
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 2
29454: NEG
29455: PUSH
29456: LD_INT 1
29458: NEG
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: LD_INT 2
29466: NEG
29467: PUSH
29468: LD_INT 2
29470: NEG
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29497: LD_ADDR_VAR 0 22
29501: PUSH
29502: LD_INT 0
29504: PUSH
29505: LD_INT 0
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 0
29514: PUSH
29515: LD_INT 1
29517: NEG
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 1
29525: PUSH
29526: LD_INT 0
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 1
29535: PUSH
29536: LD_INT 1
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: LD_INT 0
29545: PUSH
29546: LD_INT 1
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 1
29555: NEG
29556: PUSH
29557: LD_INT 0
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 1
29566: NEG
29567: PUSH
29568: LD_INT 1
29570: NEG
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 1
29578: NEG
29579: PUSH
29580: LD_INT 2
29582: NEG
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 0
29590: PUSH
29591: LD_INT 2
29593: NEG
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 1
29601: PUSH
29602: LD_INT 1
29604: NEG
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 2
29612: PUSH
29613: LD_INT 0
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 2
29622: PUSH
29623: LD_INT 1
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 2
29632: PUSH
29633: LD_INT 2
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 1
29642: PUSH
29643: LD_INT 2
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 0
29652: PUSH
29653: LD_INT 2
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 1
29662: NEG
29663: PUSH
29664: LD_INT 1
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 2
29673: NEG
29674: PUSH
29675: LD_INT 0
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 2
29684: NEG
29685: PUSH
29686: LD_INT 1
29688: NEG
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 2
29696: NEG
29697: PUSH
29698: LD_INT 2
29700: NEG
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29727: LD_ADDR_VAR 0 23
29731: PUSH
29732: LD_INT 0
29734: PUSH
29735: LD_INT 0
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 0
29744: PUSH
29745: LD_INT 1
29747: NEG
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 1
29755: PUSH
29756: LD_INT 0
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 1
29765: PUSH
29766: LD_INT 1
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 0
29775: PUSH
29776: LD_INT 1
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 1
29785: NEG
29786: PUSH
29787: LD_INT 0
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 1
29796: NEG
29797: PUSH
29798: LD_INT 1
29800: NEG
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 1
29808: NEG
29809: PUSH
29810: LD_INT 2
29812: NEG
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 0
29820: PUSH
29821: LD_INT 2
29823: NEG
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: PUSH
29832: LD_INT 1
29834: NEG
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 2
29842: PUSH
29843: LD_INT 0
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 2
29852: PUSH
29853: LD_INT 1
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 2
29862: PUSH
29863: LD_INT 2
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 1
29872: PUSH
29873: LD_INT 2
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 0
29882: PUSH
29883: LD_INT 2
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 1
29892: NEG
29893: PUSH
29894: LD_INT 1
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 2
29903: NEG
29904: PUSH
29905: LD_INT 0
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 2
29914: NEG
29915: PUSH
29916: LD_INT 1
29918: NEG
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 2
29926: NEG
29927: PUSH
29928: LD_INT 2
29930: NEG
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 2
29938: NEG
29939: PUSH
29940: LD_INT 3
29942: NEG
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 1
29950: NEG
29951: PUSH
29952: LD_INT 3
29954: NEG
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 1
29962: PUSH
29963: LD_INT 2
29965: NEG
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 2
29973: PUSH
29974: LD_INT 1
29976: NEG
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
30007: LD_ADDR_VAR 0 24
30011: PUSH
30012: LD_INT 0
30014: PUSH
30015: LD_INT 0
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 0
30024: PUSH
30025: LD_INT 1
30027: NEG
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 1
30035: PUSH
30036: LD_INT 0
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 1
30045: PUSH
30046: LD_INT 1
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 0
30055: PUSH
30056: LD_INT 1
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 1
30065: NEG
30066: PUSH
30067: LD_INT 0
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 1
30076: NEG
30077: PUSH
30078: LD_INT 1
30080: NEG
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 1
30088: NEG
30089: PUSH
30090: LD_INT 2
30092: NEG
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 0
30100: PUSH
30101: LD_INT 2
30103: NEG
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: LD_INT 1
30111: PUSH
30112: LD_INT 1
30114: NEG
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 2
30122: PUSH
30123: LD_INT 0
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 2
30132: PUSH
30133: LD_INT 1
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 2
30142: PUSH
30143: LD_INT 2
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 1
30152: PUSH
30153: LD_INT 2
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 0
30162: PUSH
30163: LD_INT 2
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 1
30172: NEG
30173: PUSH
30174: LD_INT 1
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 2
30183: NEG
30184: PUSH
30185: LD_INT 0
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 2
30194: NEG
30195: PUSH
30196: LD_INT 1
30198: NEG
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 2
30206: NEG
30207: PUSH
30208: LD_INT 2
30210: NEG
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 1
30218: PUSH
30219: LD_INT 2
30221: NEG
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 2
30229: PUSH
30230: LD_INT 1
30232: NEG
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 3
30240: PUSH
30241: LD_INT 1
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 3
30250: PUSH
30251: LD_INT 2
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
30283: LD_ADDR_VAR 0 25
30287: PUSH
30288: LD_INT 0
30290: PUSH
30291: LD_INT 0
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 0
30300: PUSH
30301: LD_INT 1
30303: NEG
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 1
30311: PUSH
30312: LD_INT 0
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 1
30321: PUSH
30322: LD_INT 1
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 0
30331: PUSH
30332: LD_INT 1
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 1
30341: NEG
30342: PUSH
30343: LD_INT 0
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 1
30352: NEG
30353: PUSH
30354: LD_INT 1
30356: NEG
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 1
30364: NEG
30365: PUSH
30366: LD_INT 2
30368: NEG
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 0
30376: PUSH
30377: LD_INT 2
30379: NEG
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 1
30387: PUSH
30388: LD_INT 1
30390: NEG
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 2
30398: PUSH
30399: LD_INT 0
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 2
30408: PUSH
30409: LD_INT 1
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 2
30418: PUSH
30419: LD_INT 2
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 1
30428: PUSH
30429: LD_INT 2
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 0
30438: PUSH
30439: LD_INT 2
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 1
30448: NEG
30449: PUSH
30450: LD_INT 1
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 2
30459: NEG
30460: PUSH
30461: LD_INT 0
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 2
30470: NEG
30471: PUSH
30472: LD_INT 1
30474: NEG
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 2
30482: NEG
30483: PUSH
30484: LD_INT 2
30486: NEG
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 3
30494: PUSH
30495: LD_INT 1
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 3
30504: PUSH
30505: LD_INT 2
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 2
30514: PUSH
30515: LD_INT 3
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 1
30524: PUSH
30525: LD_INT 3
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30557: LD_ADDR_VAR 0 26
30561: PUSH
30562: LD_INT 0
30564: PUSH
30565: LD_INT 0
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 0
30574: PUSH
30575: LD_INT 1
30577: NEG
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 1
30585: PUSH
30586: LD_INT 0
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 1
30595: PUSH
30596: LD_INT 1
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 0
30605: PUSH
30606: LD_INT 1
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 1
30615: NEG
30616: PUSH
30617: LD_INT 0
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 1
30626: NEG
30627: PUSH
30628: LD_INT 1
30630: NEG
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 1
30638: NEG
30639: PUSH
30640: LD_INT 2
30642: NEG
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 0
30650: PUSH
30651: LD_INT 2
30653: NEG
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 1
30661: PUSH
30662: LD_INT 1
30664: NEG
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 2
30672: PUSH
30673: LD_INT 0
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 2
30682: PUSH
30683: LD_INT 1
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 2
30692: PUSH
30693: LD_INT 2
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 1
30702: PUSH
30703: LD_INT 2
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 0
30712: PUSH
30713: LD_INT 2
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 1
30722: NEG
30723: PUSH
30724: LD_INT 1
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 2
30733: NEG
30734: PUSH
30735: LD_INT 0
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 2
30744: NEG
30745: PUSH
30746: LD_INT 1
30748: NEG
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 2
30756: NEG
30757: PUSH
30758: LD_INT 2
30760: NEG
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 2
30768: PUSH
30769: LD_INT 3
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 1
30778: PUSH
30779: LD_INT 3
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 1
30788: NEG
30789: PUSH
30790: LD_INT 2
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 2
30799: NEG
30800: PUSH
30801: LD_INT 1
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30833: LD_ADDR_VAR 0 27
30837: PUSH
30838: LD_INT 0
30840: PUSH
30841: LD_INT 0
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 0
30850: PUSH
30851: LD_INT 1
30853: NEG
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 1
30861: PUSH
30862: LD_INT 0
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 1
30871: PUSH
30872: LD_INT 1
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 0
30881: PUSH
30882: LD_INT 1
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 1
30891: NEG
30892: PUSH
30893: LD_INT 0
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 1
30902: NEG
30903: PUSH
30904: LD_INT 1
30906: NEG
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 1
30914: NEG
30915: PUSH
30916: LD_INT 2
30918: NEG
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 0
30926: PUSH
30927: LD_INT 2
30929: NEG
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 1
30937: PUSH
30938: LD_INT 1
30940: NEG
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 2
30948: PUSH
30949: LD_INT 0
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 2
30958: PUSH
30959: LD_INT 1
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 2
30968: PUSH
30969: LD_INT 2
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 1
30978: PUSH
30979: LD_INT 2
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 0
30988: PUSH
30989: LD_INT 2
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 1
30998: NEG
30999: PUSH
31000: LD_INT 1
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 2
31009: NEG
31010: PUSH
31011: LD_INT 0
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 2
31020: NEG
31021: PUSH
31022: LD_INT 1
31024: NEG
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 2
31032: NEG
31033: PUSH
31034: LD_INT 2
31036: NEG
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 1
31044: NEG
31045: PUSH
31046: LD_INT 2
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 2
31055: NEG
31056: PUSH
31057: LD_INT 1
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 3
31066: NEG
31067: PUSH
31068: LD_INT 1
31070: NEG
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 3
31078: NEG
31079: PUSH
31080: LD_INT 2
31082: NEG
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31113: LD_ADDR_VAR 0 28
31117: PUSH
31118: LD_INT 0
31120: PUSH
31121: LD_INT 0
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 0
31130: PUSH
31131: LD_INT 1
31133: NEG
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 1
31141: PUSH
31142: LD_INT 0
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 1
31151: PUSH
31152: LD_INT 1
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 0
31161: PUSH
31162: LD_INT 1
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 1
31171: NEG
31172: PUSH
31173: LD_INT 0
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 1
31182: NEG
31183: PUSH
31184: LD_INT 1
31186: NEG
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 1
31194: NEG
31195: PUSH
31196: LD_INT 2
31198: NEG
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 0
31206: PUSH
31207: LD_INT 2
31209: NEG
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 1
31217: PUSH
31218: LD_INT 1
31220: NEG
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 2
31228: PUSH
31229: LD_INT 0
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 2
31238: PUSH
31239: LD_INT 1
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 2
31248: PUSH
31249: LD_INT 2
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 1
31258: PUSH
31259: LD_INT 2
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 0
31268: PUSH
31269: LD_INT 2
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 1
31278: NEG
31279: PUSH
31280: LD_INT 1
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 2
31289: NEG
31290: PUSH
31291: LD_INT 0
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 2
31300: NEG
31301: PUSH
31302: LD_INT 1
31304: NEG
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 2
31312: NEG
31313: PUSH
31314: LD_INT 2
31316: NEG
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 2
31324: NEG
31325: PUSH
31326: LD_INT 3
31328: NEG
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 1
31336: NEG
31337: PUSH
31338: LD_INT 3
31340: NEG
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 3
31348: NEG
31349: PUSH
31350: LD_INT 1
31352: NEG
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 3
31360: NEG
31361: PUSH
31362: LD_INT 2
31364: NEG
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31395: LD_ADDR_VAR 0 29
31399: PUSH
31400: LD_INT 0
31402: PUSH
31403: LD_INT 0
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 0
31412: PUSH
31413: LD_INT 1
31415: NEG
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 1
31423: PUSH
31424: LD_INT 0
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 1
31433: PUSH
31434: LD_INT 1
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 0
31443: PUSH
31444: LD_INT 1
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 1
31453: NEG
31454: PUSH
31455: LD_INT 0
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 1
31464: NEG
31465: PUSH
31466: LD_INT 1
31468: NEG
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 1
31476: NEG
31477: PUSH
31478: LD_INT 2
31480: NEG
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 0
31488: PUSH
31489: LD_INT 2
31491: NEG
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 1
31499: PUSH
31500: LD_INT 1
31502: NEG
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 2
31510: PUSH
31511: LD_INT 0
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 2
31520: PUSH
31521: LD_INT 1
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 1
31530: PUSH
31531: LD_INT 2
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 0
31540: PUSH
31541: LD_INT 2
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 1
31550: NEG
31551: PUSH
31552: LD_INT 1
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 2
31561: NEG
31562: PUSH
31563: LD_INT 1
31565: NEG
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 2
31573: NEG
31574: PUSH
31575: LD_INT 2
31577: NEG
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 2
31585: NEG
31586: PUSH
31587: LD_INT 3
31589: NEG
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 2
31597: PUSH
31598: LD_INT 1
31600: NEG
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 3
31608: PUSH
31609: LD_INT 1
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 1
31618: PUSH
31619: LD_INT 3
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 1
31628: NEG
31629: PUSH
31630: LD_INT 2
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 3
31639: NEG
31640: PUSH
31641: LD_INT 2
31643: NEG
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31674: LD_ADDR_VAR 0 30
31678: PUSH
31679: LD_INT 0
31681: PUSH
31682: LD_INT 0
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 0
31691: PUSH
31692: LD_INT 1
31694: NEG
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: LD_INT 0
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 1
31712: PUSH
31713: LD_INT 1
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 0
31722: PUSH
31723: LD_INT 1
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 1
31732: NEG
31733: PUSH
31734: LD_INT 0
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 1
31743: NEG
31744: PUSH
31745: LD_INT 1
31747: NEG
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 1
31755: NEG
31756: PUSH
31757: LD_INT 2
31759: NEG
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 0
31767: PUSH
31768: LD_INT 2
31770: NEG
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 1
31778: PUSH
31779: LD_INT 1
31781: NEG
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 2
31789: PUSH
31790: LD_INT 0
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 2
31799: PUSH
31800: LD_INT 1
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 2
31809: PUSH
31810: LD_INT 2
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 1
31819: PUSH
31820: LD_INT 2
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 1
31829: NEG
31830: PUSH
31831: LD_INT 1
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 2
31840: NEG
31841: PUSH
31842: LD_INT 0
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 2
31851: NEG
31852: PUSH
31853: LD_INT 1
31855: NEG
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 1
31863: NEG
31864: PUSH
31865: LD_INT 3
31867: NEG
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 1
31875: PUSH
31876: LD_INT 2
31878: NEG
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 3
31886: PUSH
31887: LD_INT 2
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 2
31896: PUSH
31897: LD_INT 3
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 2
31906: NEG
31907: PUSH
31908: LD_INT 1
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 3
31917: NEG
31918: PUSH
31919: LD_INT 1
31921: NEG
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31952: LD_ADDR_VAR 0 31
31956: PUSH
31957: LD_INT 0
31959: PUSH
31960: LD_INT 0
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 0
31969: PUSH
31970: LD_INT 1
31972: NEG
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 1
31980: PUSH
31981: LD_INT 0
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 1
31990: PUSH
31991: LD_INT 1
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 0
32000: PUSH
32001: LD_INT 1
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 1
32010: NEG
32011: PUSH
32012: LD_INT 0
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 1
32021: NEG
32022: PUSH
32023: LD_INT 1
32025: NEG
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 1
32033: NEG
32034: PUSH
32035: LD_INT 2
32037: NEG
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: LD_INT 1
32048: NEG
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 2
32056: PUSH
32057: LD_INT 0
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 2
32066: PUSH
32067: LD_INT 1
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 2
32076: PUSH
32077: LD_INT 2
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 1
32086: PUSH
32087: LD_INT 2
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 0
32096: PUSH
32097: LD_INT 2
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 1
32106: NEG
32107: PUSH
32108: LD_INT 1
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 2
32117: NEG
32118: PUSH
32119: LD_INT 1
32121: NEG
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 2
32129: NEG
32130: PUSH
32131: LD_INT 2
32133: NEG
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 2
32141: NEG
32142: PUSH
32143: LD_INT 3
32145: NEG
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 2
32153: PUSH
32154: LD_INT 1
32156: NEG
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 3
32164: PUSH
32165: LD_INT 1
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: LD_INT 1
32174: PUSH
32175: LD_INT 3
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 1
32184: NEG
32185: PUSH
32186: LD_INT 2
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 3
32195: NEG
32196: PUSH
32197: LD_INT 2
32199: NEG
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32230: LD_ADDR_VAR 0 32
32234: PUSH
32235: LD_INT 0
32237: PUSH
32238: LD_INT 0
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 0
32247: PUSH
32248: LD_INT 1
32250: NEG
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 1
32258: PUSH
32259: LD_INT 0
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 1
32268: PUSH
32269: LD_INT 1
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 0
32278: PUSH
32279: LD_INT 1
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 1
32288: NEG
32289: PUSH
32290: LD_INT 0
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 1
32299: NEG
32300: PUSH
32301: LD_INT 1
32303: NEG
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 1
32311: NEG
32312: PUSH
32313: LD_INT 2
32315: NEG
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 0
32323: PUSH
32324: LD_INT 2
32326: NEG
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 1
32334: PUSH
32335: LD_INT 1
32337: NEG
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 2
32345: PUSH
32346: LD_INT 1
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 2
32355: PUSH
32356: LD_INT 2
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 1
32365: PUSH
32366: LD_INT 2
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 0
32375: PUSH
32376: LD_INT 2
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 1
32385: NEG
32386: PUSH
32387: LD_INT 1
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 2
32396: NEG
32397: PUSH
32398: LD_INT 0
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 2
32407: NEG
32408: PUSH
32409: LD_INT 1
32411: NEG
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 1
32419: NEG
32420: PUSH
32421: LD_INT 3
32423: NEG
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 1
32431: PUSH
32432: LD_INT 2
32434: NEG
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 3
32442: PUSH
32443: LD_INT 2
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 2
32452: PUSH
32453: LD_INT 3
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 2
32462: NEG
32463: PUSH
32464: LD_INT 1
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 3
32473: NEG
32474: PUSH
32475: LD_INT 1
32477: NEG
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32508: LD_ADDR_VAR 0 33
32512: PUSH
32513: LD_INT 0
32515: PUSH
32516: LD_INT 0
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 0
32525: PUSH
32526: LD_INT 1
32528: NEG
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 1
32536: PUSH
32537: LD_INT 0
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 1
32546: PUSH
32547: LD_INT 1
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 0
32556: PUSH
32557: LD_INT 1
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 1
32566: NEG
32567: PUSH
32568: LD_INT 0
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 1
32577: NEG
32578: PUSH
32579: LD_INT 1
32581: NEG
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 1
32589: NEG
32590: PUSH
32591: LD_INT 2
32593: NEG
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 1
32601: PUSH
32602: LD_INT 1
32604: NEG
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 2
32612: PUSH
32613: LD_INT 0
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 2
32622: PUSH
32623: LD_INT 1
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 1
32632: PUSH
32633: LD_INT 2
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 0
32642: PUSH
32643: LD_INT 2
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 1
32652: NEG
32653: PUSH
32654: LD_INT 1
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 2
32663: NEG
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 2
32674: NEG
32675: PUSH
32676: LD_INT 1
32678: NEG
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 2
32686: NEG
32687: PUSH
32688: LD_INT 2
32690: NEG
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 2
32698: NEG
32699: PUSH
32700: LD_INT 3
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 2
32710: PUSH
32711: LD_INT 1
32713: NEG
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 3
32721: PUSH
32722: LD_INT 1
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: LD_INT 3
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 1
32741: NEG
32742: PUSH
32743: LD_INT 2
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 3
32752: NEG
32753: PUSH
32754: LD_INT 2
32756: NEG
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32787: LD_ADDR_VAR 0 34
32791: PUSH
32792: LD_INT 0
32794: PUSH
32795: LD_INT 0
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 0
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 1
32815: PUSH
32816: LD_INT 0
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 1
32825: PUSH
32826: LD_INT 1
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 0
32835: PUSH
32836: LD_INT 1
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 1
32845: NEG
32846: PUSH
32847: LD_INT 0
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 1
32856: NEG
32857: PUSH
32858: LD_INT 1
32860: NEG
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 1
32868: NEG
32869: PUSH
32870: LD_INT 2
32872: NEG
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 0
32880: PUSH
32881: LD_INT 2
32883: NEG
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 1
32891: PUSH
32892: LD_INT 1
32894: NEG
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 2
32902: PUSH
32903: LD_INT 1
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 2
32912: PUSH
32913: LD_INT 2
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 1
32922: PUSH
32923: LD_INT 2
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 1
32932: NEG
32933: PUSH
32934: LD_INT 1
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 2
32943: NEG
32944: PUSH
32945: LD_INT 0
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 2
32954: NEG
32955: PUSH
32956: LD_INT 1
32958: NEG
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 2
32966: NEG
32967: PUSH
32968: LD_INT 2
32970: NEG
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 1
32978: NEG
32979: PUSH
32980: LD_INT 3
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 1
32990: PUSH
32991: LD_INT 2
32993: NEG
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 3
33001: PUSH
33002: LD_INT 2
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 2
33011: PUSH
33012: LD_INT 3
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 2
33021: NEG
33022: PUSH
33023: LD_INT 1
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 3
33032: NEG
33033: PUSH
33034: LD_INT 1
33036: NEG
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33067: LD_ADDR_VAR 0 35
33071: PUSH
33072: LD_INT 0
33074: PUSH
33075: LD_INT 0
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 0
33084: PUSH
33085: LD_INT 1
33087: NEG
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 1
33095: PUSH
33096: LD_INT 0
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 1
33105: PUSH
33106: LD_INT 1
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: LD_INT 1
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 1
33125: NEG
33126: PUSH
33127: LD_INT 0
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 1
33136: NEG
33137: PUSH
33138: LD_INT 1
33140: NEG
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 2
33148: PUSH
33149: LD_INT 1
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 2
33158: NEG
33159: PUSH
33160: LD_INT 1
33162: NEG
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33179: LD_ADDR_VAR 0 36
33183: PUSH
33184: LD_INT 0
33186: PUSH
33187: LD_INT 0
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 0
33196: PUSH
33197: LD_INT 1
33199: NEG
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 1
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 1
33217: PUSH
33218: LD_INT 1
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 0
33227: PUSH
33228: LD_INT 1
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 1
33237: NEG
33238: PUSH
33239: LD_INT 0
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 1
33248: NEG
33249: PUSH
33250: LD_INT 1
33252: NEG
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 1
33260: NEG
33261: PUSH
33262: LD_INT 2
33264: NEG
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: LD_INT 2
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33291: LD_ADDR_VAR 0 37
33295: PUSH
33296: LD_INT 0
33298: PUSH
33299: LD_INT 0
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 0
33308: PUSH
33309: LD_INT 1
33311: NEG
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 1
33319: PUSH
33320: LD_INT 0
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 1
33329: PUSH
33330: LD_INT 1
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 0
33339: PUSH
33340: LD_INT 1
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 1
33349: NEG
33350: PUSH
33351: LD_INT 0
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 1
33360: NEG
33361: PUSH
33362: LD_INT 1
33364: NEG
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 1
33372: PUSH
33373: LD_INT 1
33375: NEG
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 1
33383: NEG
33384: PUSH
33385: LD_INT 1
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33403: LD_ADDR_VAR 0 38
33407: PUSH
33408: LD_INT 0
33410: PUSH
33411: LD_INT 0
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 0
33420: PUSH
33421: LD_INT 1
33423: NEG
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 1
33431: PUSH
33432: LD_INT 0
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 1
33441: PUSH
33442: LD_INT 1
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: LD_INT 1
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 1
33461: NEG
33462: PUSH
33463: LD_INT 0
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 1
33472: NEG
33473: PUSH
33474: LD_INT 1
33476: NEG
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 2
33484: PUSH
33485: LD_INT 1
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 2
33494: NEG
33495: PUSH
33496: LD_INT 1
33498: NEG
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33515: LD_ADDR_VAR 0 39
33519: PUSH
33520: LD_INT 0
33522: PUSH
33523: LD_INT 0
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: LD_INT 1
33535: NEG
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 1
33543: PUSH
33544: LD_INT 0
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 1
33553: PUSH
33554: LD_INT 1
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 0
33563: PUSH
33564: LD_INT 1
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 1
33573: NEG
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 1
33584: NEG
33585: PUSH
33586: LD_INT 1
33588: NEG
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 1
33596: NEG
33597: PUSH
33598: LD_INT 2
33600: NEG
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 1
33608: PUSH
33609: LD_INT 2
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33627: LD_ADDR_VAR 0 40
33631: PUSH
33632: LD_INT 0
33634: PUSH
33635: LD_INT 0
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 0
33644: PUSH
33645: LD_INT 1
33647: NEG
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 1
33655: PUSH
33656: LD_INT 0
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 1
33665: PUSH
33666: LD_INT 1
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 0
33675: PUSH
33676: LD_INT 1
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 1
33685: NEG
33686: PUSH
33687: LD_INT 0
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 1
33696: NEG
33697: PUSH
33698: LD_INT 1
33700: NEG
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 1
33708: PUSH
33709: LD_INT 1
33711: NEG
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 1
33719: NEG
33720: PUSH
33721: LD_INT 1
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33739: LD_ADDR_VAR 0 41
33743: PUSH
33744: LD_INT 0
33746: PUSH
33747: LD_INT 0
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 0
33756: PUSH
33757: LD_INT 1
33759: NEG
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 1
33767: PUSH
33768: LD_INT 0
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 1
33777: PUSH
33778: LD_INT 1
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 0
33787: PUSH
33788: LD_INT 1
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 1
33797: NEG
33798: PUSH
33799: LD_INT 0
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 1
33808: NEG
33809: PUSH
33810: LD_INT 1
33812: NEG
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 1
33820: NEG
33821: PUSH
33822: LD_INT 2
33824: NEG
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 1
33832: PUSH
33833: LD_INT 1
33835: NEG
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 2
33843: PUSH
33844: LD_INT 0
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 2
33853: PUSH
33854: LD_INT 1
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 2
33863: PUSH
33864: LD_INT 2
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 1
33873: PUSH
33874: LD_INT 2
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 1
33883: NEG
33884: PUSH
33885: LD_INT 1
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 2
33894: NEG
33895: PUSH
33896: LD_INT 0
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 2
33905: NEG
33906: PUSH
33907: LD_INT 1
33909: NEG
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 2
33917: NEG
33918: PUSH
33919: LD_INT 2
33921: NEG
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 2
33929: NEG
33930: PUSH
33931: LD_INT 3
33933: NEG
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 2
33941: PUSH
33942: LD_INT 1
33944: NEG
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 3
33952: PUSH
33953: LD_INT 0
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 3
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 3
33972: PUSH
33973: LD_INT 2
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 3
33982: PUSH
33983: LD_INT 3
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 2
33992: PUSH
33993: LD_INT 3
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 2
34002: NEG
34003: PUSH
34004: LD_INT 1
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 3
34013: NEG
34014: PUSH
34015: LD_INT 0
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 3
34024: NEG
34025: PUSH
34026: LD_INT 1
34028: NEG
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 3
34036: NEG
34037: PUSH
34038: LD_INT 2
34040: NEG
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 3
34048: NEG
34049: PUSH
34050: LD_INT 3
34052: NEG
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34089: LD_ADDR_VAR 0 42
34093: PUSH
34094: LD_INT 0
34096: PUSH
34097: LD_INT 0
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 0
34106: PUSH
34107: LD_INT 1
34109: NEG
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 1
34117: PUSH
34118: LD_INT 0
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 1
34127: PUSH
34128: LD_INT 1
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 0
34137: PUSH
34138: LD_INT 1
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 1
34147: NEG
34148: PUSH
34149: LD_INT 0
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 1
34158: NEG
34159: PUSH
34160: LD_INT 1
34162: NEG
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 1
34170: NEG
34171: PUSH
34172: LD_INT 2
34174: NEG
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 0
34182: PUSH
34183: LD_INT 2
34185: NEG
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 1
34193: PUSH
34194: LD_INT 1
34196: NEG
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 2
34204: PUSH
34205: LD_INT 1
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 2
34214: PUSH
34215: LD_INT 2
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 1
34224: PUSH
34225: LD_INT 2
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 0
34234: PUSH
34235: LD_INT 2
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 1
34244: NEG
34245: PUSH
34246: LD_INT 1
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 2
34255: NEG
34256: PUSH
34257: LD_INT 1
34259: NEG
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 2
34267: NEG
34268: PUSH
34269: LD_INT 2
34271: NEG
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 2
34279: NEG
34280: PUSH
34281: LD_INT 3
34283: NEG
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 1
34291: NEG
34292: PUSH
34293: LD_INT 3
34295: NEG
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 0
34303: PUSH
34304: LD_INT 3
34306: NEG
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 1
34314: PUSH
34315: LD_INT 2
34317: NEG
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 3
34325: PUSH
34326: LD_INT 2
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 3
34335: PUSH
34336: LD_INT 3
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 2
34345: PUSH
34346: LD_INT 3
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 1
34355: PUSH
34356: LD_INT 3
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 0
34365: PUSH
34366: LD_INT 3
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 1
34375: NEG
34376: PUSH
34377: LD_INT 2
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 3
34386: NEG
34387: PUSH
34388: LD_INT 2
34390: NEG
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 3
34398: NEG
34399: PUSH
34400: LD_INT 3
34402: NEG
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34439: LD_ADDR_VAR 0 43
34443: PUSH
34444: LD_INT 0
34446: PUSH
34447: LD_INT 0
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 0
34456: PUSH
34457: LD_INT 1
34459: NEG
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 1
34467: PUSH
34468: LD_INT 0
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 1
34477: PUSH
34478: LD_INT 1
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 0
34487: PUSH
34488: LD_INT 1
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 1
34497: NEG
34498: PUSH
34499: LD_INT 0
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 1
34508: NEG
34509: PUSH
34510: LD_INT 1
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 1
34520: NEG
34521: PUSH
34522: LD_INT 2
34524: NEG
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 0
34532: PUSH
34533: LD_INT 2
34535: NEG
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 1
34543: PUSH
34544: LD_INT 1
34546: NEG
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 2
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 2
34564: PUSH
34565: LD_INT 1
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 1
34574: PUSH
34575: LD_INT 2
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 0
34584: PUSH
34585: LD_INT 2
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 1
34594: NEG
34595: PUSH
34596: LD_INT 1
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 2
34605: NEG
34606: PUSH
34607: LD_INT 0
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 2
34616: NEG
34617: PUSH
34618: LD_INT 1
34620: NEG
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 1
34628: NEG
34629: PUSH
34630: LD_INT 3
34632: NEG
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 0
34640: PUSH
34641: LD_INT 3
34643: NEG
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 1
34651: PUSH
34652: LD_INT 2
34654: NEG
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 2
34662: PUSH
34663: LD_INT 1
34665: NEG
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 3
34673: PUSH
34674: LD_INT 0
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 3
34683: PUSH
34684: LD_INT 1
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 1
34693: PUSH
34694: LD_INT 3
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 0
34703: PUSH
34704: LD_INT 3
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 1
34713: NEG
34714: PUSH
34715: LD_INT 2
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 2
34724: NEG
34725: PUSH
34726: LD_INT 1
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 3
34735: NEG
34736: PUSH
34737: LD_INT 0
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 3
34746: NEG
34747: PUSH
34748: LD_INT 1
34750: NEG
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34787: LD_ADDR_VAR 0 44
34791: PUSH
34792: LD_INT 0
34794: PUSH
34795: LD_INT 0
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 0
34804: PUSH
34805: LD_INT 1
34807: NEG
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 1
34815: PUSH
34816: LD_INT 0
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 1
34825: PUSH
34826: LD_INT 1
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 0
34835: PUSH
34836: LD_INT 1
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 1
34845: NEG
34846: PUSH
34847: LD_INT 0
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 1
34856: NEG
34857: PUSH
34858: LD_INT 1
34860: NEG
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 1
34868: NEG
34869: PUSH
34870: LD_INT 2
34872: NEG
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 1
34880: PUSH
34881: LD_INT 1
34883: NEG
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 2
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 2
34901: PUSH
34902: LD_INT 1
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 2
34911: PUSH
34912: LD_INT 2
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 1
34921: PUSH
34922: LD_INT 2
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 1
34931: NEG
34932: PUSH
34933: LD_INT 1
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 2
34942: NEG
34943: PUSH
34944: LD_INT 0
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 2
34953: NEG
34954: PUSH
34955: LD_INT 1
34957: NEG
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 2
34965: NEG
34966: PUSH
34967: LD_INT 2
34969: NEG
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 2
34977: NEG
34978: PUSH
34979: LD_INT 3
34981: NEG
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 2
34989: PUSH
34990: LD_INT 1
34992: NEG
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 3
35000: PUSH
35001: LD_INT 0
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 3
35010: PUSH
35011: LD_INT 1
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 3
35020: PUSH
35021: LD_INT 2
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 3
35030: PUSH
35031: LD_INT 3
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 2
35040: PUSH
35041: LD_INT 3
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 2
35050: NEG
35051: PUSH
35052: LD_INT 1
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 3
35061: NEG
35062: PUSH
35063: LD_INT 0
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 3
35072: NEG
35073: PUSH
35074: LD_INT 1
35076: NEG
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 3
35084: NEG
35085: PUSH
35086: LD_INT 2
35088: NEG
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 3
35096: NEG
35097: PUSH
35098: LD_INT 3
35100: NEG
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35137: LD_ADDR_VAR 0 45
35141: PUSH
35142: LD_INT 0
35144: PUSH
35145: LD_INT 0
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 0
35154: PUSH
35155: LD_INT 1
35157: NEG
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 1
35165: PUSH
35166: LD_INT 0
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 1
35175: PUSH
35176: LD_INT 1
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 0
35185: PUSH
35186: LD_INT 1
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 1
35195: NEG
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 1
35206: NEG
35207: PUSH
35208: LD_INT 1
35210: NEG
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 1
35218: NEG
35219: PUSH
35220: LD_INT 2
35222: NEG
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: LD_INT 2
35233: NEG
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 1
35241: PUSH
35242: LD_INT 1
35244: NEG
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 2
35252: PUSH
35253: LD_INT 1
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 2
35262: PUSH
35263: LD_INT 2
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 1
35272: PUSH
35273: LD_INT 2
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 0
35282: PUSH
35283: LD_INT 2
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 1
35292: NEG
35293: PUSH
35294: LD_INT 1
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 2
35303: NEG
35304: PUSH
35305: LD_INT 1
35307: NEG
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 2
35315: NEG
35316: PUSH
35317: LD_INT 2
35319: NEG
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 2
35327: NEG
35328: PUSH
35329: LD_INT 3
35331: NEG
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 1
35339: NEG
35340: PUSH
35341: LD_INT 3
35343: NEG
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 0
35351: PUSH
35352: LD_INT 3
35354: NEG
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 1
35362: PUSH
35363: LD_INT 2
35365: NEG
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 3
35373: PUSH
35374: LD_INT 2
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 3
35383: PUSH
35384: LD_INT 3
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 2
35393: PUSH
35394: LD_INT 3
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 1
35403: PUSH
35404: LD_INT 3
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 0
35413: PUSH
35414: LD_INT 3
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 1
35423: NEG
35424: PUSH
35425: LD_INT 2
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 3
35434: NEG
35435: PUSH
35436: LD_INT 2
35438: NEG
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 3
35446: NEG
35447: PUSH
35448: LD_INT 3
35450: NEG
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35487: LD_ADDR_VAR 0 46
35491: PUSH
35492: LD_INT 0
35494: PUSH
35495: LD_INT 0
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 0
35504: PUSH
35505: LD_INT 1
35507: NEG
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 1
35515: PUSH
35516: LD_INT 0
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 1
35525: PUSH
35526: LD_INT 1
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 0
35535: PUSH
35536: LD_INT 1
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 1
35545: NEG
35546: PUSH
35547: LD_INT 0
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 1
35556: NEG
35557: PUSH
35558: LD_INT 1
35560: NEG
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 1
35568: NEG
35569: PUSH
35570: LD_INT 2
35572: NEG
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 0
35580: PUSH
35581: LD_INT 2
35583: NEG
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 1
35591: PUSH
35592: LD_INT 1
35594: NEG
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 2
35602: PUSH
35603: LD_INT 0
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 2
35612: PUSH
35613: LD_INT 1
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 1
35622: PUSH
35623: LD_INT 2
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 0
35632: PUSH
35633: LD_INT 2
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 1
35642: NEG
35643: PUSH
35644: LD_INT 1
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 2
35653: NEG
35654: PUSH
35655: LD_INT 0
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 2
35664: NEG
35665: PUSH
35666: LD_INT 1
35668: NEG
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 1
35676: NEG
35677: PUSH
35678: LD_INT 3
35680: NEG
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 0
35688: PUSH
35689: LD_INT 3
35691: NEG
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 1
35699: PUSH
35700: LD_INT 2
35702: NEG
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 2
35710: PUSH
35711: LD_INT 1
35713: NEG
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 3
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 3
35731: PUSH
35732: LD_INT 1
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 1
35741: PUSH
35742: LD_INT 3
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 0
35751: PUSH
35752: LD_INT 3
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 1
35761: NEG
35762: PUSH
35763: LD_INT 2
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 2
35772: NEG
35773: PUSH
35774: LD_INT 1
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 3
35783: NEG
35784: PUSH
35785: LD_INT 0
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 3
35794: NEG
35795: PUSH
35796: LD_INT 1
35798: NEG
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35835: LD_ADDR_VAR 0 47
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: LD_INT 0
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 0
35852: PUSH
35853: LD_INT 1
35855: NEG
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 1
35863: PUSH
35864: LD_INT 0
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 1
35873: PUSH
35874: LD_INT 1
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 0
35883: PUSH
35884: LD_INT 1
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 1
35893: NEG
35894: PUSH
35895: LD_INT 0
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 1
35904: NEG
35905: PUSH
35906: LD_INT 1
35908: NEG
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 1
35916: NEG
35917: PUSH
35918: LD_INT 2
35920: NEG
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 0
35928: PUSH
35929: LD_INT 2
35931: NEG
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 1
35939: PUSH
35940: LD_INT 1
35942: NEG
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 2
35950: NEG
35951: PUSH
35952: LD_INT 1
35954: NEG
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 2
35962: NEG
35963: PUSH
35964: LD_INT 2
35966: NEG
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35986: LD_ADDR_VAR 0 48
35990: PUSH
35991: LD_INT 0
35993: PUSH
35994: LD_INT 0
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 0
36003: PUSH
36004: LD_INT 1
36006: NEG
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 1
36014: PUSH
36015: LD_INT 0
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 1
36024: PUSH
36025: LD_INT 1
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 0
36034: PUSH
36035: LD_INT 1
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 1
36044: NEG
36045: PUSH
36046: LD_INT 0
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 1
36055: NEG
36056: PUSH
36057: LD_INT 1
36059: NEG
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 1
36067: NEG
36068: PUSH
36069: LD_INT 2
36071: NEG
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 0
36079: PUSH
36080: LD_INT 2
36082: NEG
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 1
36090: PUSH
36091: LD_INT 1
36093: NEG
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 2
36101: PUSH
36102: LD_INT 0
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 2
36111: PUSH
36112: LD_INT 1
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36133: LD_ADDR_VAR 0 49
36137: PUSH
36138: LD_INT 0
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 0
36150: PUSH
36151: LD_INT 1
36153: NEG
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 1
36161: PUSH
36162: LD_INT 0
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 1
36171: PUSH
36172: LD_INT 1
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 0
36181: PUSH
36182: LD_INT 1
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 1
36191: NEG
36192: PUSH
36193: LD_INT 0
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: LD_INT 1
36202: NEG
36203: PUSH
36204: LD_INT 1
36206: NEG
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 1
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 2
36225: PUSH
36226: LD_INT 0
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 2
36235: PUSH
36236: LD_INT 1
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 2
36245: PUSH
36246: LD_INT 2
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 1
36255: PUSH
36256: LD_INT 2
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36277: LD_ADDR_VAR 0 50
36281: PUSH
36282: LD_INT 0
36284: PUSH
36285: LD_INT 0
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: LD_INT 1
36297: NEG
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 1
36305: PUSH
36306: LD_INT 0
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 1
36315: PUSH
36316: LD_INT 1
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 0
36325: PUSH
36326: LD_INT 1
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 1
36335: NEG
36336: PUSH
36337: LD_INT 0
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 1
36346: NEG
36347: PUSH
36348: LD_INT 1
36350: NEG
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 2
36358: PUSH
36359: LD_INT 1
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 2
36368: PUSH
36369: LD_INT 2
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: LD_INT 2
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 0
36388: PUSH
36389: LD_INT 2
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 1
36398: NEG
36399: PUSH
36400: LD_INT 1
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36421: LD_ADDR_VAR 0 51
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: LD_INT 0
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 0
36438: PUSH
36439: LD_INT 1
36441: NEG
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 1
36449: PUSH
36450: LD_INT 0
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 1
36459: PUSH
36460: LD_INT 1
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 0
36469: PUSH
36470: LD_INT 1
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 1
36479: NEG
36480: PUSH
36481: LD_INT 0
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 1
36490: NEG
36491: PUSH
36492: LD_INT 1
36494: NEG
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 1
36502: PUSH
36503: LD_INT 2
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 0
36512: PUSH
36513: LD_INT 2
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 1
36522: NEG
36523: PUSH
36524: LD_INT 1
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 2
36533: NEG
36534: PUSH
36535: LD_INT 0
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 2
36544: NEG
36545: PUSH
36546: LD_INT 1
36548: NEG
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36568: LD_ADDR_VAR 0 52
36572: PUSH
36573: LD_INT 0
36575: PUSH
36576: LD_INT 0
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 0
36585: PUSH
36586: LD_INT 1
36588: NEG
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 1
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 1
36606: PUSH
36607: LD_INT 1
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 0
36616: PUSH
36617: LD_INT 1
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 1
36626: NEG
36627: PUSH
36628: LD_INT 0
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 1
36637: NEG
36638: PUSH
36639: LD_INT 1
36641: NEG
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 1
36649: NEG
36650: PUSH
36651: LD_INT 2
36653: NEG
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 1
36661: NEG
36662: PUSH
36663: LD_INT 1
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 2
36672: NEG
36673: PUSH
36674: LD_INT 0
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 2
36683: NEG
36684: PUSH
36685: LD_INT 1
36687: NEG
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 2
36695: NEG
36696: PUSH
36697: LD_INT 2
36699: NEG
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36719: LD_ADDR_VAR 0 53
36723: PUSH
36724: LD_INT 0
36726: PUSH
36727: LD_INT 0
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 0
36736: PUSH
36737: LD_INT 1
36739: NEG
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 1
36747: PUSH
36748: LD_INT 0
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 1
36757: PUSH
36758: LD_INT 1
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: LD_INT 1
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 1
36777: NEG
36778: PUSH
36779: LD_INT 0
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: PUSH
36790: LD_INT 1
36792: NEG
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 1
36800: NEG
36801: PUSH
36802: LD_INT 2
36804: NEG
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: LD_INT 2
36815: NEG
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 1
36823: PUSH
36824: LD_INT 1
36826: NEG
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 2
36834: PUSH
36835: LD_INT 0
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 2
36844: PUSH
36845: LD_INT 1
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 2
36854: PUSH
36855: LD_INT 2
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 1
36864: PUSH
36865: LD_INT 2
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: LD_INT 2
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 1
36884: NEG
36885: PUSH
36886: LD_INT 1
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 2
36895: NEG
36896: PUSH
36897: LD_INT 0
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 2
36906: NEG
36907: PUSH
36908: LD_INT 1
36910: NEG
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 2
36918: NEG
36919: PUSH
36920: LD_INT 2
36922: NEG
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36949: LD_ADDR_VAR 0 54
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: LD_INT 0
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 0
36966: PUSH
36967: LD_INT 1
36969: NEG
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 1
36977: PUSH
36978: LD_INT 0
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 1
36987: PUSH
36988: LD_INT 1
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 0
36997: PUSH
36998: LD_INT 1
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 1
37007: NEG
37008: PUSH
37009: LD_INT 0
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 1
37018: NEG
37019: PUSH
37020: LD_INT 1
37022: NEG
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 1
37030: NEG
37031: PUSH
37032: LD_INT 2
37034: NEG
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 0
37042: PUSH
37043: LD_INT 2
37045: NEG
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 1
37053: PUSH
37054: LD_INT 1
37056: NEG
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 2
37064: PUSH
37065: LD_INT 0
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 2
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 2
37084: PUSH
37085: LD_INT 2
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 1
37094: PUSH
37095: LD_INT 2
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 0
37104: PUSH
37105: LD_INT 2
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 1
37114: NEG
37115: PUSH
37116: LD_INT 1
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 2
37125: NEG
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 2
37136: NEG
37137: PUSH
37138: LD_INT 1
37140: NEG
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 2
37148: NEG
37149: PUSH
37150: LD_INT 2
37152: NEG
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37179: LD_ADDR_VAR 0 55
37183: PUSH
37184: LD_INT 0
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 0
37196: PUSH
37197: LD_INT 1
37199: NEG
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 1
37207: PUSH
37208: LD_INT 0
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 1
37217: PUSH
37218: LD_INT 1
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 0
37227: PUSH
37228: LD_INT 1
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 1
37237: NEG
37238: PUSH
37239: LD_INT 0
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 1
37248: NEG
37249: PUSH
37250: LD_INT 1
37252: NEG
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 1
37260: NEG
37261: PUSH
37262: LD_INT 2
37264: NEG
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 0
37272: PUSH
37273: LD_INT 2
37275: NEG
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 1
37283: PUSH
37284: LD_INT 1
37286: NEG
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 2
37294: PUSH
37295: LD_INT 0
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 2
37304: PUSH
37305: LD_INT 1
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 2
37314: PUSH
37315: LD_INT 2
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 1
37324: PUSH
37325: LD_INT 2
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 0
37334: PUSH
37335: LD_INT 2
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 1
37344: NEG
37345: PUSH
37346: LD_INT 1
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 2
37355: NEG
37356: PUSH
37357: LD_INT 0
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 2
37366: NEG
37367: PUSH
37368: LD_INT 1
37370: NEG
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 2
37378: NEG
37379: PUSH
37380: LD_INT 2
37382: NEG
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37409: LD_ADDR_VAR 0 56
37413: PUSH
37414: LD_INT 0
37416: PUSH
37417: LD_INT 0
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 0
37426: PUSH
37427: LD_INT 1
37429: NEG
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 1
37437: PUSH
37438: LD_INT 0
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 1
37447: PUSH
37448: LD_INT 1
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 0
37457: PUSH
37458: LD_INT 1
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 1
37467: NEG
37468: PUSH
37469: LD_INT 0
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 1
37478: NEG
37479: PUSH
37480: LD_INT 1
37482: NEG
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 1
37490: NEG
37491: PUSH
37492: LD_INT 2
37494: NEG
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 0
37502: PUSH
37503: LD_INT 2
37505: NEG
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 1
37513: PUSH
37514: LD_INT 1
37516: NEG
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 2
37524: PUSH
37525: LD_INT 0
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 2
37534: PUSH
37535: LD_INT 1
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 2
37544: PUSH
37545: LD_INT 2
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 1
37554: PUSH
37555: LD_INT 2
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 0
37564: PUSH
37565: LD_INT 2
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 1
37574: NEG
37575: PUSH
37576: LD_INT 1
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 2
37585: NEG
37586: PUSH
37587: LD_INT 0
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 2
37596: NEG
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 2
37608: NEG
37609: PUSH
37610: LD_INT 2
37612: NEG
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37639: LD_ADDR_VAR 0 57
37643: PUSH
37644: LD_INT 0
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 0
37656: PUSH
37657: LD_INT 1
37659: NEG
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 1
37667: PUSH
37668: LD_INT 0
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: LD_INT 1
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 0
37687: PUSH
37688: LD_INT 1
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 1
37697: NEG
37698: PUSH
37699: LD_INT 0
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: LD_INT 1
37712: NEG
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 1
37720: NEG
37721: PUSH
37722: LD_INT 2
37724: NEG
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 0
37732: PUSH
37733: LD_INT 2
37735: NEG
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 1
37743: PUSH
37744: LD_INT 1
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 2
37754: PUSH
37755: LD_INT 0
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 2
37764: PUSH
37765: LD_INT 1
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 2
37774: PUSH
37775: LD_INT 2
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 1
37784: PUSH
37785: LD_INT 2
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: LD_INT 2
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 1
37804: NEG
37805: PUSH
37806: LD_INT 1
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 2
37815: NEG
37816: PUSH
37817: LD_INT 0
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 2
37826: NEG
37827: PUSH
37828: LD_INT 1
37830: NEG
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 2
37838: NEG
37839: PUSH
37840: LD_INT 2
37842: NEG
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37869: LD_ADDR_VAR 0 58
37873: PUSH
37874: LD_INT 0
37876: PUSH
37877: LD_INT 0
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 0
37886: PUSH
37887: LD_INT 1
37889: NEG
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 1
37897: PUSH
37898: LD_INT 0
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 1
37907: PUSH
37908: LD_INT 1
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 0
37917: PUSH
37918: LD_INT 1
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 1
37927: NEG
37928: PUSH
37929: LD_INT 0
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 1
37938: NEG
37939: PUSH
37940: LD_INT 1
37942: NEG
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 1
37950: NEG
37951: PUSH
37952: LD_INT 2
37954: NEG
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 0
37962: PUSH
37963: LD_INT 2
37965: NEG
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 1
37973: PUSH
37974: LD_INT 1
37976: NEG
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 2
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 2
37994: PUSH
37995: LD_INT 1
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 2
38004: PUSH
38005: LD_INT 2
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 1
38014: PUSH
38015: LD_INT 2
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: LD_INT 2
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 1
38034: NEG
38035: PUSH
38036: LD_INT 1
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 2
38045: NEG
38046: PUSH
38047: LD_INT 0
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 2
38056: NEG
38057: PUSH
38058: LD_INT 1
38060: NEG
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 2
38068: NEG
38069: PUSH
38070: LD_INT 2
38072: NEG
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38099: LD_ADDR_VAR 0 59
38103: PUSH
38104: LD_INT 0
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 0
38116: PUSH
38117: LD_INT 1
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 1
38127: PUSH
38128: LD_INT 0
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 1
38137: PUSH
38138: LD_INT 1
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 0
38147: PUSH
38148: LD_INT 1
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 1
38157: NEG
38158: PUSH
38159: LD_INT 0
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 1
38168: NEG
38169: PUSH
38170: LD_INT 1
38172: NEG
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38187: LD_ADDR_VAR 0 60
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: LD_INT 0
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 0
38204: PUSH
38205: LD_INT 1
38207: NEG
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 1
38215: PUSH
38216: LD_INT 0
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 1
38225: PUSH
38226: LD_INT 1
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 0
38235: PUSH
38236: LD_INT 1
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 1
38245: NEG
38246: PUSH
38247: LD_INT 0
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 1
38256: NEG
38257: PUSH
38258: LD_INT 1
38260: NEG
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38275: LD_ADDR_VAR 0 61
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: LD_INT 0
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 0
38292: PUSH
38293: LD_INT 1
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: LD_INT 0
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 1
38313: PUSH
38314: LD_INT 1
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 1
38333: NEG
38334: PUSH
38335: LD_INT 0
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: LD_INT 1
38348: NEG
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38363: LD_ADDR_VAR 0 62
38367: PUSH
38368: LD_INT 0
38370: PUSH
38371: LD_INT 0
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 0
38380: PUSH
38381: LD_INT 1
38383: NEG
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 1
38391: PUSH
38392: LD_INT 0
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 1
38401: PUSH
38402: LD_INT 1
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 0
38411: PUSH
38412: LD_INT 1
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 1
38421: NEG
38422: PUSH
38423: LD_INT 0
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 1
38432: NEG
38433: PUSH
38434: LD_INT 1
38436: NEG
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38451: LD_ADDR_VAR 0 63
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 0
38468: PUSH
38469: LD_INT 1
38471: NEG
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 1
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: LD_INT 1
38524: NEG
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38539: LD_ADDR_VAR 0 64
38543: PUSH
38544: LD_INT 0
38546: PUSH
38547: LD_INT 0
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 0
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 1
38567: PUSH
38568: LD_INT 0
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 1
38577: PUSH
38578: LD_INT 1
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 0
38587: PUSH
38588: LD_INT 1
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 1
38597: NEG
38598: PUSH
38599: LD_INT 0
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 1
38608: NEG
38609: PUSH
38610: LD_INT 1
38612: NEG
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: ST_TO_ADDR
// end ; 1 :
38627: GO 44524
38629: LD_INT 1
38631: DOUBLE
38632: EQUAL
38633: IFTRUE 38637
38635: GO 41260
38637: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38638: LD_ADDR_VAR 0 11
38642: PUSH
38643: LD_INT 1
38645: NEG
38646: PUSH
38647: LD_INT 3
38649: NEG
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 0
38657: PUSH
38658: LD_INT 3
38660: NEG
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 1
38668: PUSH
38669: LD_INT 2
38671: NEG
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: LIST
38681: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38682: LD_ADDR_VAR 0 12
38686: PUSH
38687: LD_INT 2
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 3
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 3
38710: PUSH
38711: LD_INT 1
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: LIST
38722: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38723: LD_ADDR_VAR 0 13
38727: PUSH
38728: LD_INT 3
38730: PUSH
38731: LD_INT 2
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 3
38740: PUSH
38741: LD_INT 3
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 2
38750: PUSH
38751: LD_INT 3
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: LIST
38762: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38763: LD_ADDR_VAR 0 14
38767: PUSH
38768: LD_INT 1
38770: PUSH
38771: LD_INT 3
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 0
38780: PUSH
38781: LD_INT 3
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 1
38790: NEG
38791: PUSH
38792: LD_INT 2
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: LIST
38803: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38804: LD_ADDR_VAR 0 15
38808: PUSH
38809: LD_INT 2
38811: NEG
38812: PUSH
38813: LD_INT 1
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 3
38822: NEG
38823: PUSH
38824: LD_INT 0
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 3
38833: NEG
38834: PUSH
38835: LD_INT 1
38837: NEG
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: LIST
38847: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38848: LD_ADDR_VAR 0 16
38852: PUSH
38853: LD_INT 2
38855: NEG
38856: PUSH
38857: LD_INT 3
38859: NEG
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 3
38867: NEG
38868: PUSH
38869: LD_INT 2
38871: NEG
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 3
38879: NEG
38880: PUSH
38881: LD_INT 3
38883: NEG
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: LIST
38893: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38894: LD_ADDR_VAR 0 17
38898: PUSH
38899: LD_INT 1
38901: NEG
38902: PUSH
38903: LD_INT 3
38905: NEG
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 0
38913: PUSH
38914: LD_INT 3
38916: NEG
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 1
38924: PUSH
38925: LD_INT 2
38927: NEG
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: LIST
38937: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38938: LD_ADDR_VAR 0 18
38942: PUSH
38943: LD_INT 2
38945: PUSH
38946: LD_INT 1
38948: NEG
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 3
38956: PUSH
38957: LD_INT 0
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 3
38966: PUSH
38967: LD_INT 1
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: LIST
38978: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38979: LD_ADDR_VAR 0 19
38983: PUSH
38984: LD_INT 3
38986: PUSH
38987: LD_INT 2
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 3
38996: PUSH
38997: LD_INT 3
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 2
39006: PUSH
39007: LD_INT 3
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: LIST
39018: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39019: LD_ADDR_VAR 0 20
39023: PUSH
39024: LD_INT 1
39026: PUSH
39027: LD_INT 3
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: LD_INT 3
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 1
39046: NEG
39047: PUSH
39048: LD_INT 2
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: LIST
39059: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39060: LD_ADDR_VAR 0 21
39064: PUSH
39065: LD_INT 2
39067: NEG
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 3
39078: NEG
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 3
39089: NEG
39090: PUSH
39091: LD_INT 1
39093: NEG
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: LIST
39103: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39104: LD_ADDR_VAR 0 22
39108: PUSH
39109: LD_INT 2
39111: NEG
39112: PUSH
39113: LD_INT 3
39115: NEG
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 3
39123: NEG
39124: PUSH
39125: LD_INT 2
39127: NEG
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 3
39135: NEG
39136: PUSH
39137: LD_INT 3
39139: NEG
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: LIST
39149: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
39150: LD_ADDR_VAR 0 23
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: LD_INT 3
39160: NEG
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 1
39168: NEG
39169: PUSH
39170: LD_INT 4
39172: NEG
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 1
39180: PUSH
39181: LD_INT 3
39183: NEG
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: LIST
39193: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
39194: LD_ADDR_VAR 0 24
39198: PUSH
39199: LD_INT 3
39201: PUSH
39202: LD_INT 0
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 3
39211: PUSH
39212: LD_INT 1
39214: NEG
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 4
39222: PUSH
39223: LD_INT 1
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: LIST
39234: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
39235: LD_ADDR_VAR 0 25
39239: PUSH
39240: LD_INT 3
39242: PUSH
39243: LD_INT 3
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 4
39252: PUSH
39253: LD_INT 3
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 3
39262: PUSH
39263: LD_INT 4
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: LIST
39274: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
39275: LD_ADDR_VAR 0 26
39279: PUSH
39280: LD_INT 0
39282: PUSH
39283: LD_INT 3
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 1
39292: PUSH
39293: LD_INT 4
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 1
39302: NEG
39303: PUSH
39304: LD_INT 3
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: LIST
39315: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
39316: LD_ADDR_VAR 0 27
39320: PUSH
39321: LD_INT 3
39323: NEG
39324: PUSH
39325: LD_INT 0
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 3
39334: NEG
39335: PUSH
39336: LD_INT 1
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 4
39345: NEG
39346: PUSH
39347: LD_INT 1
39349: NEG
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: LIST
39359: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
39360: LD_ADDR_VAR 0 28
39364: PUSH
39365: LD_INT 3
39367: NEG
39368: PUSH
39369: LD_INT 3
39371: NEG
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 3
39379: NEG
39380: PUSH
39381: LD_INT 4
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 4
39391: NEG
39392: PUSH
39393: LD_INT 3
39395: NEG
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: LIST
39405: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
39406: LD_ADDR_VAR 0 29
39410: PUSH
39411: LD_INT 1
39413: NEG
39414: PUSH
39415: LD_INT 3
39417: NEG
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 0
39425: PUSH
39426: LD_INT 3
39428: NEG
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 1
39436: PUSH
39437: LD_INT 2
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 1
39447: NEG
39448: PUSH
39449: LD_INT 4
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: LD_INT 4
39462: NEG
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 1
39470: PUSH
39471: LD_INT 3
39473: NEG
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 1
39481: NEG
39482: PUSH
39483: LD_INT 5
39485: NEG
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: LD_INT 5
39496: NEG
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: LD_INT 4
39507: NEG
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 1
39515: NEG
39516: PUSH
39517: LD_INT 6
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 0
39527: PUSH
39528: LD_INT 6
39530: NEG
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 1
39538: PUSH
39539: LD_INT 5
39541: NEG
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
39561: LD_ADDR_VAR 0 30
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: LD_INT 1
39571: NEG
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 3
39579: PUSH
39580: LD_INT 0
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 3
39589: PUSH
39590: LD_INT 1
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 3
39599: PUSH
39600: LD_INT 1
39602: NEG
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 4
39610: PUSH
39611: LD_INT 0
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 4
39620: PUSH
39621: LD_INT 1
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 4
39630: PUSH
39631: LD_INT 1
39633: NEG
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 5
39641: PUSH
39642: LD_INT 0
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 5
39651: PUSH
39652: LD_INT 1
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 5
39661: PUSH
39662: LD_INT 1
39664: NEG
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 6
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 6
39682: PUSH
39683: LD_INT 1
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
39704: LD_ADDR_VAR 0 31
39708: PUSH
39709: LD_INT 3
39711: PUSH
39712: LD_INT 2
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 3
39721: PUSH
39722: LD_INT 3
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 2
39731: PUSH
39732: LD_INT 3
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 4
39741: PUSH
39742: LD_INT 3
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 4
39751: PUSH
39752: LD_INT 4
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 3
39761: PUSH
39762: LD_INT 4
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 5
39771: PUSH
39772: LD_INT 4
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 5
39781: PUSH
39782: LD_INT 5
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 4
39791: PUSH
39792: LD_INT 5
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 6
39801: PUSH
39802: LD_INT 5
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 6
39811: PUSH
39812: LD_INT 6
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 5
39821: PUSH
39822: LD_INT 6
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
39843: LD_ADDR_VAR 0 32
39847: PUSH
39848: LD_INT 1
39850: PUSH
39851: LD_INT 3
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 0
39860: PUSH
39861: LD_INT 3
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 1
39870: NEG
39871: PUSH
39872: LD_INT 2
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 1
39881: PUSH
39882: LD_INT 4
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 0
39891: PUSH
39892: LD_INT 4
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 1
39901: NEG
39902: PUSH
39903: LD_INT 3
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: LD_INT 5
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: LD_INT 5
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 1
39932: NEG
39933: PUSH
39934: LD_INT 4
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 1
39943: PUSH
39944: LD_INT 6
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: LD_INT 6
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: LD_INT 5
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39986: LD_ADDR_VAR 0 33
39990: PUSH
39991: LD_INT 2
39993: NEG
39994: PUSH
39995: LD_INT 1
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 3
40004: NEG
40005: PUSH
40006: LD_INT 0
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 3
40015: NEG
40016: PUSH
40017: LD_INT 1
40019: NEG
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 3
40027: NEG
40028: PUSH
40029: LD_INT 1
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 4
40038: NEG
40039: PUSH
40040: LD_INT 0
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 4
40049: NEG
40050: PUSH
40051: LD_INT 1
40053: NEG
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 4
40061: NEG
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 5
40072: NEG
40073: PUSH
40074: LD_INT 0
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 5
40083: NEG
40084: PUSH
40085: LD_INT 1
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 5
40095: NEG
40096: PUSH
40097: LD_INT 1
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 6
40106: NEG
40107: PUSH
40108: LD_INT 0
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 6
40117: NEG
40118: PUSH
40119: LD_INT 1
40121: NEG
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
40141: LD_ADDR_VAR 0 34
40145: PUSH
40146: LD_INT 2
40148: NEG
40149: PUSH
40150: LD_INT 3
40152: NEG
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 3
40160: NEG
40161: PUSH
40162: LD_INT 2
40164: NEG
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 3
40172: NEG
40173: PUSH
40174: LD_INT 3
40176: NEG
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 3
40184: NEG
40185: PUSH
40186: LD_INT 4
40188: NEG
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 4
40196: NEG
40197: PUSH
40198: LD_INT 3
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 4
40208: NEG
40209: PUSH
40210: LD_INT 4
40212: NEG
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 4
40220: NEG
40221: PUSH
40222: LD_INT 5
40224: NEG
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 5
40232: NEG
40233: PUSH
40234: LD_INT 4
40236: NEG
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 5
40244: NEG
40245: PUSH
40246: LD_INT 5
40248: NEG
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 5
40256: NEG
40257: PUSH
40258: LD_INT 6
40260: NEG
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 6
40268: NEG
40269: PUSH
40270: LD_INT 5
40272: NEG
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 6
40280: NEG
40281: PUSH
40282: LD_INT 6
40284: NEG
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
40304: LD_ADDR_VAR 0 41
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: LD_INT 2
40314: NEG
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: LD_INT 3
40326: NEG
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 1
40334: PUSH
40335: LD_INT 2
40337: NEG
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: LIST
40347: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
40348: LD_ADDR_VAR 0 42
40352: PUSH
40353: LD_INT 2
40355: PUSH
40356: LD_INT 0
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 2
40365: PUSH
40366: LD_INT 1
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 3
40376: PUSH
40377: LD_INT 1
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: LIST
40388: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
40389: LD_ADDR_VAR 0 43
40393: PUSH
40394: LD_INT 2
40396: PUSH
40397: LD_INT 2
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 3
40406: PUSH
40407: LD_INT 2
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 2
40416: PUSH
40417: LD_INT 3
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: LIST
40428: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
40429: LD_ADDR_VAR 0 44
40433: PUSH
40434: LD_INT 0
40436: PUSH
40437: LD_INT 2
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 1
40446: PUSH
40447: LD_INT 3
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: LD_INT 2
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: LIST
40469: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40470: LD_ADDR_VAR 0 45
40474: PUSH
40475: LD_INT 2
40477: NEG
40478: PUSH
40479: LD_INT 0
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 2
40488: NEG
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 3
40499: NEG
40500: PUSH
40501: LD_INT 1
40503: NEG
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: LIST
40513: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
40514: LD_ADDR_VAR 0 46
40518: PUSH
40519: LD_INT 2
40521: NEG
40522: PUSH
40523: LD_INT 2
40525: NEG
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 2
40533: NEG
40534: PUSH
40535: LD_INT 3
40537: NEG
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 3
40545: NEG
40546: PUSH
40547: LD_INT 2
40549: NEG
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: LIST
40559: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
40560: LD_ADDR_VAR 0 47
40564: PUSH
40565: LD_INT 2
40567: NEG
40568: PUSH
40569: LD_INT 3
40571: NEG
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 1
40579: NEG
40580: PUSH
40581: LD_INT 3
40583: NEG
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40593: LD_ADDR_VAR 0 48
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: LD_INT 2
40603: NEG
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 2
40611: PUSH
40612: LD_INT 1
40614: NEG
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
40624: LD_ADDR_VAR 0 49
40628: PUSH
40629: LD_INT 3
40631: PUSH
40632: LD_INT 1
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 3
40641: PUSH
40642: LD_INT 2
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
40653: LD_ADDR_VAR 0 50
40657: PUSH
40658: LD_INT 2
40660: PUSH
40661: LD_INT 3
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: PUSH
40671: LD_INT 3
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40682: LD_ADDR_VAR 0 51
40686: PUSH
40687: LD_INT 1
40689: NEG
40690: PUSH
40691: LD_INT 2
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 2
40700: NEG
40701: PUSH
40702: LD_INT 1
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40713: LD_ADDR_VAR 0 52
40717: PUSH
40718: LD_INT 3
40720: NEG
40721: PUSH
40722: LD_INT 1
40724: NEG
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 3
40732: NEG
40733: PUSH
40734: LD_INT 2
40736: NEG
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40746: LD_ADDR_VAR 0 53
40750: PUSH
40751: LD_INT 1
40753: NEG
40754: PUSH
40755: LD_INT 3
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: LD_INT 3
40768: NEG
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: LD_INT 2
40779: NEG
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: LIST
40789: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40790: LD_ADDR_VAR 0 54
40794: PUSH
40795: LD_INT 2
40797: PUSH
40798: LD_INT 1
40800: NEG
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 3
40808: PUSH
40809: LD_INT 0
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 3
40818: PUSH
40819: LD_INT 1
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: LIST
40830: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40831: LD_ADDR_VAR 0 55
40835: PUSH
40836: LD_INT 3
40838: PUSH
40839: LD_INT 2
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 3
40848: PUSH
40849: LD_INT 3
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 2
40858: PUSH
40859: LD_INT 3
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: LIST
40870: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40871: LD_ADDR_VAR 0 56
40875: PUSH
40876: LD_INT 1
40878: PUSH
40879: LD_INT 3
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: LD_INT 3
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 1
40898: NEG
40899: PUSH
40900: LD_INT 2
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: LIST
40911: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40912: LD_ADDR_VAR 0 57
40916: PUSH
40917: LD_INT 2
40919: NEG
40920: PUSH
40921: LD_INT 1
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 3
40930: NEG
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 3
40941: NEG
40942: PUSH
40943: LD_INT 1
40945: NEG
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: LIST
40955: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40956: LD_ADDR_VAR 0 58
40960: PUSH
40961: LD_INT 2
40963: NEG
40964: PUSH
40965: LD_INT 3
40967: NEG
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 3
40975: NEG
40976: PUSH
40977: LD_INT 2
40979: NEG
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 3
40987: NEG
40988: PUSH
40989: LD_INT 3
40991: NEG
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: LIST
41001: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
41002: LD_ADDR_VAR 0 59
41006: PUSH
41007: LD_INT 1
41009: NEG
41010: PUSH
41011: LD_INT 2
41013: NEG
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: LD_INT 2
41024: NEG
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 1
41032: PUSH
41033: LD_INT 1
41035: NEG
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: LIST
41045: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41046: LD_ADDR_VAR 0 60
41050: PUSH
41051: LD_INT 1
41053: PUSH
41054: LD_INT 1
41056: NEG
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 2
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 2
41074: PUSH
41075: LD_INT 1
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: LIST
41086: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41087: LD_ADDR_VAR 0 61
41091: PUSH
41092: LD_INT 2
41094: PUSH
41095: LD_INT 1
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 2
41104: PUSH
41105: LD_INT 2
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: LD_INT 2
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: LIST
41126: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41127: LD_ADDR_VAR 0 62
41131: PUSH
41132: LD_INT 1
41134: PUSH
41135: LD_INT 2
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: LD_INT 2
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: LIST
41167: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41168: LD_ADDR_VAR 0 63
41172: PUSH
41173: LD_INT 1
41175: NEG
41176: PUSH
41177: LD_INT 1
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 2
41186: NEG
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 2
41197: NEG
41198: PUSH
41199: LD_INT 1
41201: NEG
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: LIST
41211: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41212: LD_ADDR_VAR 0 64
41216: PUSH
41217: LD_INT 1
41219: NEG
41220: PUSH
41221: LD_INT 2
41223: NEG
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 2
41231: NEG
41232: PUSH
41233: LD_INT 1
41235: NEG
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 2
41243: NEG
41244: PUSH
41245: LD_INT 2
41247: NEG
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: LIST
41257: ST_TO_ADDR
// end ; 2 :
41258: GO 44524
41260: LD_INT 2
41262: DOUBLE
41263: EQUAL
41264: IFTRUE 41268
41266: GO 44523
41268: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
41269: LD_ADDR_VAR 0 29
41273: PUSH
41274: LD_INT 4
41276: PUSH
41277: LD_INT 0
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 4
41286: PUSH
41287: LD_INT 1
41289: NEG
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 5
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 5
41307: PUSH
41308: LD_INT 1
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 4
41317: PUSH
41318: LD_INT 1
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 3
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 3
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 3
41348: PUSH
41349: LD_INT 2
41351: NEG
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 5
41359: PUSH
41360: LD_INT 2
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 3
41369: PUSH
41370: LD_INT 3
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 3
41379: PUSH
41380: LD_INT 2
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 4
41389: PUSH
41390: LD_INT 3
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 4
41399: PUSH
41400: LD_INT 4
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 3
41409: PUSH
41410: LD_INT 4
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: LD_INT 3
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 2
41429: PUSH
41430: LD_INT 2
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 4
41439: PUSH
41440: LD_INT 2
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 2
41449: PUSH
41450: LD_INT 4
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: LD_INT 4
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: LD_INT 3
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: LD_INT 4
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: LD_INT 5
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 0
41499: PUSH
41500: LD_INT 5
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 1
41509: NEG
41510: PUSH
41511: LD_INT 4
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: LD_INT 3
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 2
41531: PUSH
41532: LD_INT 5
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 2
41541: NEG
41542: PUSH
41543: LD_INT 3
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 3
41552: NEG
41553: PUSH
41554: LD_INT 0
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 3
41563: NEG
41564: PUSH
41565: LD_INT 1
41567: NEG
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 2
41575: NEG
41576: PUSH
41577: LD_INT 0
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 2
41586: NEG
41587: PUSH
41588: LD_INT 1
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 3
41597: NEG
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 4
41608: NEG
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 4
41619: NEG
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 4
41631: NEG
41632: PUSH
41633: LD_INT 2
41635: NEG
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 2
41643: NEG
41644: PUSH
41645: LD_INT 2
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 4
41654: NEG
41655: PUSH
41656: LD_INT 4
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 4
41666: NEG
41667: PUSH
41668: LD_INT 5
41670: NEG
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 3
41678: NEG
41679: PUSH
41680: LD_INT 4
41682: NEG
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 3
41690: NEG
41691: PUSH
41692: LD_INT 3
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 4
41702: NEG
41703: PUSH
41704: LD_INT 3
41706: NEG
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 5
41714: NEG
41715: PUSH
41716: LD_INT 4
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 5
41726: NEG
41727: PUSH
41728: LD_INT 5
41730: NEG
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 3
41738: NEG
41739: PUSH
41740: LD_INT 5
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 5
41750: NEG
41751: PUSH
41752: LD_INT 3
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
41807: LD_ADDR_VAR 0 30
41811: PUSH
41812: LD_INT 4
41814: PUSH
41815: LD_INT 4
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 4
41824: PUSH
41825: LD_INT 3
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 5
41834: PUSH
41835: LD_INT 4
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 5
41844: PUSH
41845: LD_INT 5
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 4
41854: PUSH
41855: LD_INT 5
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 3
41864: PUSH
41865: LD_INT 4
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 3
41874: PUSH
41875: LD_INT 3
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 5
41884: PUSH
41885: LD_INT 3
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 3
41894: PUSH
41895: LD_INT 5
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: LD_INT 3
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: LD_INT 2
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 1
41924: PUSH
41925: LD_INT 3
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 1
41934: PUSH
41935: LD_INT 4
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 0
41944: PUSH
41945: LD_INT 4
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: NEG
41955: PUSH
41956: LD_INT 3
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 1
41965: NEG
41966: PUSH
41967: LD_INT 2
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 2
41976: PUSH
41977: LD_INT 4
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 2
41986: NEG
41987: PUSH
41988: LD_INT 2
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 4
41997: NEG
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 4
42008: NEG
42009: PUSH
42010: LD_INT 1
42012: NEG
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 3
42020: NEG
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 3
42031: NEG
42032: PUSH
42033: LD_INT 1
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 4
42042: NEG
42043: PUSH
42044: LD_INT 1
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 5
42053: NEG
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 5
42064: NEG
42065: PUSH
42066: LD_INT 1
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 5
42076: NEG
42077: PUSH
42078: LD_INT 2
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 3
42088: NEG
42089: PUSH
42090: LD_INT 2
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 3
42099: NEG
42100: PUSH
42101: LD_INT 3
42103: NEG
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 3
42111: NEG
42112: PUSH
42113: LD_INT 4
42115: NEG
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 2
42123: NEG
42124: PUSH
42125: LD_INT 3
42127: NEG
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 2
42135: NEG
42136: PUSH
42137: LD_INT 2
42139: NEG
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 3
42147: NEG
42148: PUSH
42149: LD_INT 2
42151: NEG
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 4
42159: NEG
42160: PUSH
42161: LD_INT 3
42163: NEG
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 4
42171: NEG
42172: PUSH
42173: LD_INT 4
42175: NEG
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 2
42183: NEG
42184: PUSH
42185: LD_INT 4
42187: NEG
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 4
42195: NEG
42196: PUSH
42197: LD_INT 2
42199: NEG
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 0
42207: PUSH
42208: LD_INT 4
42210: NEG
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: LD_INT 5
42221: NEG
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: LD_INT 4
42232: NEG
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 1
42240: PUSH
42241: LD_INT 3
42243: NEG
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 0
42251: PUSH
42252: LD_INT 3
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: LD_INT 4
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: LD_INT 5
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 2
42286: PUSH
42287: LD_INT 3
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 2
42297: NEG
42298: PUSH
42299: LD_INT 5
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
42354: LD_ADDR_VAR 0 31
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: LD_INT 4
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: LD_INT 3
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 1
42381: PUSH
42382: LD_INT 4
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 1
42391: PUSH
42392: LD_INT 5
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 0
42401: PUSH
42402: LD_INT 5
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 1
42411: NEG
42412: PUSH
42413: LD_INT 4
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 1
42422: NEG
42423: PUSH
42424: LD_INT 3
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 2
42433: PUSH
42434: LD_INT 5
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 2
42443: NEG
42444: PUSH
42445: LD_INT 3
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 3
42454: NEG
42455: PUSH
42456: LD_INT 0
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 3
42465: NEG
42466: PUSH
42467: LD_INT 1
42469: NEG
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 2
42477: NEG
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 2
42488: NEG
42489: PUSH
42490: LD_INT 1
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 3
42499: NEG
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 4
42510: NEG
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 4
42521: NEG
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 4
42533: NEG
42534: PUSH
42535: LD_INT 2
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 2
42545: NEG
42546: PUSH
42547: LD_INT 2
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 4
42556: NEG
42557: PUSH
42558: LD_INT 4
42560: NEG
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 4
42568: NEG
42569: PUSH
42570: LD_INT 5
42572: NEG
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 3
42580: NEG
42581: PUSH
42582: LD_INT 4
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 3
42592: NEG
42593: PUSH
42594: LD_INT 3
42596: NEG
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 4
42604: NEG
42605: PUSH
42606: LD_INT 3
42608: NEG
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 5
42616: NEG
42617: PUSH
42618: LD_INT 4
42620: NEG
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 5
42628: NEG
42629: PUSH
42630: LD_INT 5
42632: NEG
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 3
42640: NEG
42641: PUSH
42642: LD_INT 5
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 5
42652: NEG
42653: PUSH
42654: LD_INT 3
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: LD_INT 3
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: LD_INT 4
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: LD_INT 3
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: LD_INT 2
42700: NEG
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: LD_INT 2
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 1
42719: NEG
42720: PUSH
42721: LD_INT 3
42723: NEG
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 1
42731: NEG
42732: PUSH
42733: LD_INT 4
42735: NEG
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 2
42743: PUSH
42744: LD_INT 2
42746: NEG
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: LD_INT 4
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 4
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 4
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 5
42787: PUSH
42788: LD_INT 0
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 5
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 4
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 3
42817: PUSH
42818: LD_INT 0
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 3
42827: PUSH
42828: LD_INT 1
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 3
42838: PUSH
42839: LD_INT 2
42841: NEG
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 5
42849: PUSH
42850: LD_INT 2
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42904: LD_ADDR_VAR 0 32
42908: PUSH
42909: LD_INT 4
42911: NEG
42912: PUSH
42913: LD_INT 0
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 4
42922: NEG
42923: PUSH
42924: LD_INT 1
42926: NEG
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 3
42934: NEG
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 3
42945: NEG
42946: PUSH
42947: LD_INT 1
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 4
42956: NEG
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 5
42967: NEG
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 5
42978: NEG
42979: PUSH
42980: LD_INT 1
42982: NEG
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 5
42990: NEG
42991: PUSH
42992: LD_INT 2
42994: NEG
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 3
43002: NEG
43003: PUSH
43004: LD_INT 2
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 3
43013: NEG
43014: PUSH
43015: LD_INT 3
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 3
43025: NEG
43026: PUSH
43027: LD_INT 4
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 2
43037: NEG
43038: PUSH
43039: LD_INT 3
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 2
43049: NEG
43050: PUSH
43051: LD_INT 2
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 3
43061: NEG
43062: PUSH
43063: LD_INT 2
43065: NEG
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 4
43073: NEG
43074: PUSH
43075: LD_INT 3
43077: NEG
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 4
43085: NEG
43086: PUSH
43087: LD_INT 4
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 2
43097: NEG
43098: PUSH
43099: LD_INT 4
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 4
43109: NEG
43110: PUSH
43111: LD_INT 2
43113: NEG
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 0
43121: PUSH
43122: LD_INT 4
43124: NEG
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: LD_INT 5
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: LD_INT 4
43146: NEG
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 1
43154: PUSH
43155: LD_INT 3
43157: NEG
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: LD_INT 3
43168: NEG
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: LD_INT 4
43180: NEG
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 1
43188: NEG
43189: PUSH
43190: LD_INT 5
43192: NEG
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 2
43200: PUSH
43201: LD_INT 3
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 2
43211: NEG
43212: PUSH
43213: LD_INT 5
43215: NEG
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 3
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 3
43233: PUSH
43234: LD_INT 1
43236: NEG
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 4
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 4
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 3
43264: PUSH
43265: LD_INT 1
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 2
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 2
43284: PUSH
43285: LD_INT 1
43287: NEG
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 2
43295: PUSH
43296: LD_INT 2
43298: NEG
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 4
43306: PUSH
43307: LD_INT 2
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 4
43316: PUSH
43317: LD_INT 4
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 4
43326: PUSH
43327: LD_INT 3
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 5
43336: PUSH
43337: LD_INT 4
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 5
43346: PUSH
43347: LD_INT 5
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 4
43356: PUSH
43357: LD_INT 5
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 3
43366: PUSH
43367: LD_INT 4
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 3
43376: PUSH
43377: LD_INT 3
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 5
43386: PUSH
43387: LD_INT 3
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 3
43396: PUSH
43397: LD_INT 5
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
43451: LD_ADDR_VAR 0 33
43455: PUSH
43456: LD_INT 4
43458: NEG
43459: PUSH
43460: LD_INT 4
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 4
43470: NEG
43471: PUSH
43472: LD_INT 5
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 3
43482: NEG
43483: PUSH
43484: LD_INT 4
43486: NEG
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 3
43494: NEG
43495: PUSH
43496: LD_INT 3
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 4
43506: NEG
43507: PUSH
43508: LD_INT 3
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 5
43518: NEG
43519: PUSH
43520: LD_INT 4
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 5
43530: NEG
43531: PUSH
43532: LD_INT 5
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 3
43542: NEG
43543: PUSH
43544: LD_INT 5
43546: NEG
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 5
43554: NEG
43555: PUSH
43556: LD_INT 3
43558: NEG
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: LD_INT 3
43569: NEG
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: LD_INT 4
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: LD_INT 3
43591: NEG
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: LD_INT 2
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 0
43610: PUSH
43611: LD_INT 2
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 1
43621: NEG
43622: PUSH
43623: LD_INT 3
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PUSH
43635: LD_INT 4
43637: NEG
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 2
43645: PUSH
43646: LD_INT 2
43648: NEG
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 2
43656: NEG
43657: PUSH
43658: LD_INT 4
43660: NEG
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 4
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 4
43678: PUSH
43679: LD_INT 1
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 5
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 5
43699: PUSH
43700: LD_INT 1
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 4
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 3
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 3
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 3
43740: PUSH
43741: LD_INT 2
43743: NEG
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 5
43751: PUSH
43752: LD_INT 2
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 3
43761: PUSH
43762: LD_INT 3
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 3
43771: PUSH
43772: LD_INT 2
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 4
43781: PUSH
43782: LD_INT 3
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 4
43791: PUSH
43792: LD_INT 4
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 3
43801: PUSH
43802: LD_INT 4
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 2
43811: PUSH
43812: LD_INT 3
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 2
43821: PUSH
43822: LD_INT 2
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 4
43831: PUSH
43832: LD_INT 2
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 2
43841: PUSH
43842: LD_INT 4
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: LD_INT 4
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 0
43861: PUSH
43862: LD_INT 3
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: LD_INT 4
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: LD_INT 5
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: LD_INT 5
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: LD_INT 4
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: LD_INT 3
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 2
43923: PUSH
43924: LD_INT 5
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 2
43933: NEG
43934: PUSH
43935: LD_INT 3
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43989: LD_ADDR_VAR 0 34
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: LD_INT 4
43999: NEG
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: LD_INT 5
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: LD_INT 4
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: PUSH
44030: LD_INT 3
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 0
44040: PUSH
44041: LD_INT 3
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 1
44051: NEG
44052: PUSH
44053: LD_INT 4
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 1
44063: NEG
44064: PUSH
44065: LD_INT 5
44067: NEG
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 2
44075: PUSH
44076: LD_INT 3
44078: NEG
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 2
44086: NEG
44087: PUSH
44088: LD_INT 5
44090: NEG
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 3
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 3
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 4
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 4
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 3
44139: PUSH
44140: LD_INT 1
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 2
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 2
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 2
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 4
44181: PUSH
44182: LD_INT 2
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 4
44191: PUSH
44192: LD_INT 4
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 4
44201: PUSH
44202: LD_INT 3
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 5
44211: PUSH
44212: LD_INT 4
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 5
44221: PUSH
44222: LD_INT 5
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 4
44231: PUSH
44232: LD_INT 5
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 3
44241: PUSH
44242: LD_INT 4
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 3
44251: PUSH
44252: LD_INT 3
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 5
44261: PUSH
44262: LD_INT 3
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 3
44271: PUSH
44272: LD_INT 5
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: LD_INT 3
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: LD_INT 2
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 1
44301: PUSH
44302: LD_INT 3
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: PUSH
44312: LD_INT 4
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 0
44321: PUSH
44322: LD_INT 4
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 1
44331: NEG
44332: PUSH
44333: LD_INT 3
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: LD_INT 2
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 2
44353: PUSH
44354: LD_INT 4
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 2
44363: NEG
44364: PUSH
44365: LD_INT 2
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 4
44374: NEG
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 4
44385: NEG
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 3
44397: NEG
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 3
44408: NEG
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 4
44419: NEG
44420: PUSH
44421: LD_INT 1
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 5
44430: NEG
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 5
44441: NEG
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 5
44453: NEG
44454: PUSH
44455: LD_INT 2
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 3
44465: NEG
44466: PUSH
44467: LD_INT 2
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: ST_TO_ADDR
// end ; end ;
44521: GO 44524
44523: POP
// case btype of b_depot , b_warehouse :
44524: LD_VAR 0 1
44528: PUSH
44529: LD_INT 0
44531: DOUBLE
44532: EQUAL
44533: IFTRUE 44543
44535: LD_INT 1
44537: DOUBLE
44538: EQUAL
44539: IFTRUE 44543
44541: GO 44744
44543: POP
// case nation of nation_american :
44544: LD_VAR 0 5
44548: PUSH
44549: LD_INT 1
44551: DOUBLE
44552: EQUAL
44553: IFTRUE 44557
44555: GO 44613
44557: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
44558: LD_ADDR_VAR 0 9
44562: PUSH
44563: LD_VAR 0 11
44567: PUSH
44568: LD_VAR 0 12
44572: PUSH
44573: LD_VAR 0 13
44577: PUSH
44578: LD_VAR 0 14
44582: PUSH
44583: LD_VAR 0 15
44587: PUSH
44588: LD_VAR 0 16
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: PUSH
44601: LD_VAR 0 4
44605: PUSH
44606: LD_INT 1
44608: PLUS
44609: ARRAY
44610: ST_TO_ADDR
44611: GO 44742
44613: LD_INT 2
44615: DOUBLE
44616: EQUAL
44617: IFTRUE 44621
44619: GO 44677
44621: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
44622: LD_ADDR_VAR 0 9
44626: PUSH
44627: LD_VAR 0 17
44631: PUSH
44632: LD_VAR 0 18
44636: PUSH
44637: LD_VAR 0 19
44641: PUSH
44642: LD_VAR 0 20
44646: PUSH
44647: LD_VAR 0 21
44651: PUSH
44652: LD_VAR 0 22
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: PUSH
44665: LD_VAR 0 4
44669: PUSH
44670: LD_INT 1
44672: PLUS
44673: ARRAY
44674: ST_TO_ADDR
44675: GO 44742
44677: LD_INT 3
44679: DOUBLE
44680: EQUAL
44681: IFTRUE 44685
44683: GO 44741
44685: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
44686: LD_ADDR_VAR 0 9
44690: PUSH
44691: LD_VAR 0 23
44695: PUSH
44696: LD_VAR 0 24
44700: PUSH
44701: LD_VAR 0 25
44705: PUSH
44706: LD_VAR 0 26
44710: PUSH
44711: LD_VAR 0 27
44715: PUSH
44716: LD_VAR 0 28
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: PUSH
44729: LD_VAR 0 4
44733: PUSH
44734: LD_INT 1
44736: PLUS
44737: ARRAY
44738: ST_TO_ADDR
44739: GO 44742
44741: POP
44742: GO 45297
44744: LD_INT 2
44746: DOUBLE
44747: EQUAL
44748: IFTRUE 44758
44750: LD_INT 3
44752: DOUBLE
44753: EQUAL
44754: IFTRUE 44758
44756: GO 44814
44758: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
44759: LD_ADDR_VAR 0 9
44763: PUSH
44764: LD_VAR 0 29
44768: PUSH
44769: LD_VAR 0 30
44773: PUSH
44774: LD_VAR 0 31
44778: PUSH
44779: LD_VAR 0 32
44783: PUSH
44784: LD_VAR 0 33
44788: PUSH
44789: LD_VAR 0 34
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: PUSH
44802: LD_VAR 0 4
44806: PUSH
44807: LD_INT 1
44809: PLUS
44810: ARRAY
44811: ST_TO_ADDR
44812: GO 45297
44814: LD_INT 16
44816: DOUBLE
44817: EQUAL
44818: IFTRUE 44876
44820: LD_INT 17
44822: DOUBLE
44823: EQUAL
44824: IFTRUE 44876
44826: LD_INT 18
44828: DOUBLE
44829: EQUAL
44830: IFTRUE 44876
44832: LD_INT 19
44834: DOUBLE
44835: EQUAL
44836: IFTRUE 44876
44838: LD_INT 22
44840: DOUBLE
44841: EQUAL
44842: IFTRUE 44876
44844: LD_INT 20
44846: DOUBLE
44847: EQUAL
44848: IFTRUE 44876
44850: LD_INT 21
44852: DOUBLE
44853: EQUAL
44854: IFTRUE 44876
44856: LD_INT 23
44858: DOUBLE
44859: EQUAL
44860: IFTRUE 44876
44862: LD_INT 24
44864: DOUBLE
44865: EQUAL
44866: IFTRUE 44876
44868: LD_INT 25
44870: DOUBLE
44871: EQUAL
44872: IFTRUE 44876
44874: GO 44932
44876: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44877: LD_ADDR_VAR 0 9
44881: PUSH
44882: LD_VAR 0 35
44886: PUSH
44887: LD_VAR 0 36
44891: PUSH
44892: LD_VAR 0 37
44896: PUSH
44897: LD_VAR 0 38
44901: PUSH
44902: LD_VAR 0 39
44906: PUSH
44907: LD_VAR 0 40
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: PUSH
44920: LD_VAR 0 4
44924: PUSH
44925: LD_INT 1
44927: PLUS
44928: ARRAY
44929: ST_TO_ADDR
44930: GO 45297
44932: LD_INT 6
44934: DOUBLE
44935: EQUAL
44936: IFTRUE 44988
44938: LD_INT 7
44940: DOUBLE
44941: EQUAL
44942: IFTRUE 44988
44944: LD_INT 8
44946: DOUBLE
44947: EQUAL
44948: IFTRUE 44988
44950: LD_INT 13
44952: DOUBLE
44953: EQUAL
44954: IFTRUE 44988
44956: LD_INT 12
44958: DOUBLE
44959: EQUAL
44960: IFTRUE 44988
44962: LD_INT 15
44964: DOUBLE
44965: EQUAL
44966: IFTRUE 44988
44968: LD_INT 11
44970: DOUBLE
44971: EQUAL
44972: IFTRUE 44988
44974: LD_INT 14
44976: DOUBLE
44977: EQUAL
44978: IFTRUE 44988
44980: LD_INT 10
44982: DOUBLE
44983: EQUAL
44984: IFTRUE 44988
44986: GO 45044
44988: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
44989: LD_ADDR_VAR 0 9
44993: PUSH
44994: LD_VAR 0 41
44998: PUSH
44999: LD_VAR 0 42
45003: PUSH
45004: LD_VAR 0 43
45008: PUSH
45009: LD_VAR 0 44
45013: PUSH
45014: LD_VAR 0 45
45018: PUSH
45019: LD_VAR 0 46
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: PUSH
45032: LD_VAR 0 4
45036: PUSH
45037: LD_INT 1
45039: PLUS
45040: ARRAY
45041: ST_TO_ADDR
45042: GO 45297
45044: LD_INT 36
45046: DOUBLE
45047: EQUAL
45048: IFTRUE 45052
45050: GO 45108
45052: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
45053: LD_ADDR_VAR 0 9
45057: PUSH
45058: LD_VAR 0 47
45062: PUSH
45063: LD_VAR 0 48
45067: PUSH
45068: LD_VAR 0 49
45072: PUSH
45073: LD_VAR 0 50
45077: PUSH
45078: LD_VAR 0 51
45082: PUSH
45083: LD_VAR 0 52
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: PUSH
45096: LD_VAR 0 4
45100: PUSH
45101: LD_INT 1
45103: PLUS
45104: ARRAY
45105: ST_TO_ADDR
45106: GO 45297
45108: LD_INT 4
45110: DOUBLE
45111: EQUAL
45112: IFTRUE 45134
45114: LD_INT 5
45116: DOUBLE
45117: EQUAL
45118: IFTRUE 45134
45120: LD_INT 34
45122: DOUBLE
45123: EQUAL
45124: IFTRUE 45134
45126: LD_INT 37
45128: DOUBLE
45129: EQUAL
45130: IFTRUE 45134
45132: GO 45190
45134: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
45135: LD_ADDR_VAR 0 9
45139: PUSH
45140: LD_VAR 0 53
45144: PUSH
45145: LD_VAR 0 54
45149: PUSH
45150: LD_VAR 0 55
45154: PUSH
45155: LD_VAR 0 56
45159: PUSH
45160: LD_VAR 0 57
45164: PUSH
45165: LD_VAR 0 58
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: PUSH
45178: LD_VAR 0 4
45182: PUSH
45183: LD_INT 1
45185: PLUS
45186: ARRAY
45187: ST_TO_ADDR
45188: GO 45297
45190: LD_INT 31
45192: DOUBLE
45193: EQUAL
45194: IFTRUE 45240
45196: LD_INT 32
45198: DOUBLE
45199: EQUAL
45200: IFTRUE 45240
45202: LD_INT 33
45204: DOUBLE
45205: EQUAL
45206: IFTRUE 45240
45208: LD_INT 27
45210: DOUBLE
45211: EQUAL
45212: IFTRUE 45240
45214: LD_INT 26
45216: DOUBLE
45217: EQUAL
45218: IFTRUE 45240
45220: LD_INT 28
45222: DOUBLE
45223: EQUAL
45224: IFTRUE 45240
45226: LD_INT 29
45228: DOUBLE
45229: EQUAL
45230: IFTRUE 45240
45232: LD_INT 30
45234: DOUBLE
45235: EQUAL
45236: IFTRUE 45240
45238: GO 45296
45240: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
45241: LD_ADDR_VAR 0 9
45245: PUSH
45246: LD_VAR 0 59
45250: PUSH
45251: LD_VAR 0 60
45255: PUSH
45256: LD_VAR 0 61
45260: PUSH
45261: LD_VAR 0 62
45265: PUSH
45266: LD_VAR 0 63
45270: PUSH
45271: LD_VAR 0 64
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: PUSH
45284: LD_VAR 0 4
45288: PUSH
45289: LD_INT 1
45291: PLUS
45292: ARRAY
45293: ST_TO_ADDR
45294: GO 45297
45296: POP
// temp_list2 = [ ] ;
45297: LD_ADDR_VAR 0 10
45301: PUSH
45302: EMPTY
45303: ST_TO_ADDR
// for i in temp_list do
45304: LD_ADDR_VAR 0 8
45308: PUSH
45309: LD_VAR 0 9
45313: PUSH
45314: FOR_IN
45315: IFFALSE 45367
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
45317: LD_ADDR_VAR 0 10
45321: PUSH
45322: LD_VAR 0 10
45326: PUSH
45327: LD_VAR 0 8
45331: PUSH
45332: LD_INT 1
45334: ARRAY
45335: PUSH
45336: LD_VAR 0 2
45340: PLUS
45341: PUSH
45342: LD_VAR 0 8
45346: PUSH
45347: LD_INT 2
45349: ARRAY
45350: PUSH
45351: LD_VAR 0 3
45355: PLUS
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: EMPTY
45362: LIST
45363: ADD
45364: ST_TO_ADDR
45365: GO 45314
45367: POP
45368: POP
// result = temp_list2 ;
45369: LD_ADDR_VAR 0 7
45373: PUSH
45374: LD_VAR 0 10
45378: ST_TO_ADDR
// end ;
45379: LD_VAR 0 7
45383: RET
// export function EnemyInRange ( unit , dist ) ; begin
45384: LD_INT 0
45386: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
45387: LD_ADDR_VAR 0 3
45391: PUSH
45392: LD_VAR 0 1
45396: PPUSH
45397: CALL_OW 255
45401: PPUSH
45402: LD_VAR 0 1
45406: PPUSH
45407: CALL_OW 250
45411: PPUSH
45412: LD_VAR 0 1
45416: PPUSH
45417: CALL_OW 251
45421: PPUSH
45422: LD_VAR 0 2
45426: PPUSH
45427: CALL 18672 0 4
45431: PUSH
45432: LD_INT 4
45434: ARRAY
45435: ST_TO_ADDR
// end ;
45436: LD_VAR 0 3
45440: RET
// export function PlayerSeeMe ( unit ) ; begin
45441: LD_INT 0
45443: PPUSH
// result := See ( your_side , unit ) ;
45444: LD_ADDR_VAR 0 2
45448: PUSH
45449: LD_OWVAR 2
45453: PPUSH
45454: LD_VAR 0 1
45458: PPUSH
45459: CALL_OW 292
45463: ST_TO_ADDR
// end ;
45464: LD_VAR 0 2
45468: RET
// export function ReverseDir ( unit ) ; begin
45469: LD_INT 0
45471: PPUSH
// if not unit then
45472: LD_VAR 0 1
45476: NOT
45477: IFFALSE 45481
// exit ;
45479: GO 45504
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
45481: LD_ADDR_VAR 0 2
45485: PUSH
45486: LD_VAR 0 1
45490: PPUSH
45491: CALL_OW 254
45495: PUSH
45496: LD_INT 3
45498: PLUS
45499: PUSH
45500: LD_INT 6
45502: MOD
45503: ST_TO_ADDR
// end ;
45504: LD_VAR 0 2
45508: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
45509: LD_INT 0
45511: PPUSH
45512: PPUSH
45513: PPUSH
45514: PPUSH
45515: PPUSH
// if not hexes then
45516: LD_VAR 0 2
45520: NOT
45521: IFFALSE 45525
// exit ;
45523: GO 45673
// dist := 9999 ;
45525: LD_ADDR_VAR 0 5
45529: PUSH
45530: LD_INT 9999
45532: ST_TO_ADDR
// for i = 1 to hexes do
45533: LD_ADDR_VAR 0 4
45537: PUSH
45538: DOUBLE
45539: LD_INT 1
45541: DEC
45542: ST_TO_ADDR
45543: LD_VAR 0 2
45547: PUSH
45548: FOR_TO
45549: IFFALSE 45661
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
45551: LD_VAR 0 1
45555: PPUSH
45556: LD_VAR 0 2
45560: PUSH
45561: LD_VAR 0 4
45565: ARRAY
45566: PUSH
45567: LD_INT 1
45569: ARRAY
45570: PPUSH
45571: LD_VAR 0 2
45575: PUSH
45576: LD_VAR 0 4
45580: ARRAY
45581: PUSH
45582: LD_INT 2
45584: ARRAY
45585: PPUSH
45586: CALL_OW 297
45590: PUSH
45591: LD_VAR 0 5
45595: LESS
45596: IFFALSE 45659
// begin hex := hexes [ i ] ;
45598: LD_ADDR_VAR 0 7
45602: PUSH
45603: LD_VAR 0 2
45607: PUSH
45608: LD_VAR 0 4
45612: ARRAY
45613: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45614: LD_ADDR_VAR 0 5
45618: PUSH
45619: LD_VAR 0 1
45623: PPUSH
45624: LD_VAR 0 2
45628: PUSH
45629: LD_VAR 0 4
45633: ARRAY
45634: PUSH
45635: LD_INT 1
45637: ARRAY
45638: PPUSH
45639: LD_VAR 0 2
45643: PUSH
45644: LD_VAR 0 4
45648: ARRAY
45649: PUSH
45650: LD_INT 2
45652: ARRAY
45653: PPUSH
45654: CALL_OW 297
45658: ST_TO_ADDR
// end ; end ;
45659: GO 45548
45661: POP
45662: POP
// result := hex ;
45663: LD_ADDR_VAR 0 3
45667: PUSH
45668: LD_VAR 0 7
45672: ST_TO_ADDR
// end ;
45673: LD_VAR 0 3
45677: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
45678: LD_INT 0
45680: PPUSH
45681: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
45682: LD_VAR 0 1
45686: NOT
45687: PUSH
45688: LD_VAR 0 1
45692: PUSH
45693: LD_INT 21
45695: PUSH
45696: LD_INT 2
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 23
45705: PUSH
45706: LD_INT 2
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PPUSH
45717: CALL_OW 69
45721: IN
45722: NOT
45723: OR
45724: IFFALSE 45728
// exit ;
45726: GO 45775
// for i = 1 to 3 do
45728: LD_ADDR_VAR 0 3
45732: PUSH
45733: DOUBLE
45734: LD_INT 1
45736: DEC
45737: ST_TO_ADDR
45738: LD_INT 3
45740: PUSH
45741: FOR_TO
45742: IFFALSE 45773
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
45744: LD_VAR 0 1
45748: PPUSH
45749: CALL_OW 250
45753: PPUSH
45754: LD_VAR 0 1
45758: PPUSH
45759: CALL_OW 251
45763: PPUSH
45764: LD_INT 1
45766: PPUSH
45767: CALL_OW 453
45771: GO 45741
45773: POP
45774: POP
// end ;
45775: LD_VAR 0 2
45779: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
45780: LD_INT 0
45782: PPUSH
45783: PPUSH
45784: PPUSH
45785: PPUSH
45786: PPUSH
45787: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
45788: LD_VAR 0 1
45792: NOT
45793: PUSH
45794: LD_VAR 0 2
45798: NOT
45799: OR
45800: PUSH
45801: LD_VAR 0 1
45805: PPUSH
45806: CALL_OW 314
45810: OR
45811: IFFALSE 45815
// exit ;
45813: GO 46256
// x := GetX ( enemy_unit ) ;
45815: LD_ADDR_VAR 0 7
45819: PUSH
45820: LD_VAR 0 2
45824: PPUSH
45825: CALL_OW 250
45829: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45830: LD_ADDR_VAR 0 8
45834: PUSH
45835: LD_VAR 0 2
45839: PPUSH
45840: CALL_OW 251
45844: ST_TO_ADDR
// if not x or not y then
45845: LD_VAR 0 7
45849: NOT
45850: PUSH
45851: LD_VAR 0 8
45855: NOT
45856: OR
45857: IFFALSE 45861
// exit ;
45859: GO 46256
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45861: LD_ADDR_VAR 0 6
45865: PUSH
45866: LD_VAR 0 7
45870: PPUSH
45871: LD_INT 0
45873: PPUSH
45874: LD_INT 4
45876: PPUSH
45877: CALL_OW 272
45881: PUSH
45882: LD_VAR 0 8
45886: PPUSH
45887: LD_INT 0
45889: PPUSH
45890: LD_INT 4
45892: PPUSH
45893: CALL_OW 273
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_VAR 0 7
45906: PPUSH
45907: LD_INT 1
45909: PPUSH
45910: LD_INT 4
45912: PPUSH
45913: CALL_OW 272
45917: PUSH
45918: LD_VAR 0 8
45922: PPUSH
45923: LD_INT 1
45925: PPUSH
45926: LD_INT 4
45928: PPUSH
45929: CALL_OW 273
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_VAR 0 7
45942: PPUSH
45943: LD_INT 2
45945: PPUSH
45946: LD_INT 4
45948: PPUSH
45949: CALL_OW 272
45953: PUSH
45954: LD_VAR 0 8
45958: PPUSH
45959: LD_INT 2
45961: PPUSH
45962: LD_INT 4
45964: PPUSH
45965: CALL_OW 273
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_VAR 0 7
45978: PPUSH
45979: LD_INT 3
45981: PPUSH
45982: LD_INT 4
45984: PPUSH
45985: CALL_OW 272
45989: PUSH
45990: LD_VAR 0 8
45994: PPUSH
45995: LD_INT 3
45997: PPUSH
45998: LD_INT 4
46000: PPUSH
46001: CALL_OW 273
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_VAR 0 7
46014: PPUSH
46015: LD_INT 4
46017: PPUSH
46018: LD_INT 4
46020: PPUSH
46021: CALL_OW 272
46025: PUSH
46026: LD_VAR 0 8
46030: PPUSH
46031: LD_INT 4
46033: PPUSH
46034: LD_INT 4
46036: PPUSH
46037: CALL_OW 273
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_VAR 0 7
46050: PPUSH
46051: LD_INT 5
46053: PPUSH
46054: LD_INT 4
46056: PPUSH
46057: CALL_OW 272
46061: PUSH
46062: LD_VAR 0 8
46066: PPUSH
46067: LD_INT 5
46069: PPUSH
46070: LD_INT 4
46072: PPUSH
46073: CALL_OW 273
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: ST_TO_ADDR
// for i = tmp downto 1 do
46090: LD_ADDR_VAR 0 4
46094: PUSH
46095: DOUBLE
46096: LD_VAR 0 6
46100: INC
46101: ST_TO_ADDR
46102: LD_INT 1
46104: PUSH
46105: FOR_DOWNTO
46106: IFFALSE 46207
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
46108: LD_VAR 0 6
46112: PUSH
46113: LD_VAR 0 4
46117: ARRAY
46118: PUSH
46119: LD_INT 1
46121: ARRAY
46122: PPUSH
46123: LD_VAR 0 6
46127: PUSH
46128: LD_VAR 0 4
46132: ARRAY
46133: PUSH
46134: LD_INT 2
46136: ARRAY
46137: PPUSH
46138: CALL_OW 488
46142: NOT
46143: PUSH
46144: LD_VAR 0 6
46148: PUSH
46149: LD_VAR 0 4
46153: ARRAY
46154: PUSH
46155: LD_INT 1
46157: ARRAY
46158: PPUSH
46159: LD_VAR 0 6
46163: PUSH
46164: LD_VAR 0 4
46168: ARRAY
46169: PUSH
46170: LD_INT 2
46172: ARRAY
46173: PPUSH
46174: CALL_OW 428
46178: PUSH
46179: LD_INT 0
46181: NONEQUAL
46182: OR
46183: IFFALSE 46205
// tmp := Delete ( tmp , i ) ;
46185: LD_ADDR_VAR 0 6
46189: PUSH
46190: LD_VAR 0 6
46194: PPUSH
46195: LD_VAR 0 4
46199: PPUSH
46200: CALL_OW 3
46204: ST_TO_ADDR
46205: GO 46105
46207: POP
46208: POP
// j := GetClosestHex ( unit , tmp ) ;
46209: LD_ADDR_VAR 0 5
46213: PUSH
46214: LD_VAR 0 1
46218: PPUSH
46219: LD_VAR 0 6
46223: PPUSH
46224: CALL 45509 0 2
46228: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
46229: LD_VAR 0 1
46233: PPUSH
46234: LD_VAR 0 5
46238: PUSH
46239: LD_INT 1
46241: ARRAY
46242: PPUSH
46243: LD_VAR 0 5
46247: PUSH
46248: LD_INT 2
46250: ARRAY
46251: PPUSH
46252: CALL_OW 111
// end ;
46256: LD_VAR 0 3
46260: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46261: LD_INT 0
46263: PPUSH
46264: PPUSH
46265: PPUSH
// uc_side = 0 ;
46266: LD_ADDR_OWVAR 20
46270: PUSH
46271: LD_INT 0
46273: ST_TO_ADDR
// uc_nation = 0 ;
46274: LD_ADDR_OWVAR 21
46278: PUSH
46279: LD_INT 0
46281: ST_TO_ADDR
// InitHc_All ( ) ;
46282: CALL_OW 584
// InitVc ;
46286: CALL_OW 20
// if mastodonts then
46290: LD_VAR 0 6
46294: IFFALSE 46361
// for i = 1 to mastodonts do
46296: LD_ADDR_VAR 0 11
46300: PUSH
46301: DOUBLE
46302: LD_INT 1
46304: DEC
46305: ST_TO_ADDR
46306: LD_VAR 0 6
46310: PUSH
46311: FOR_TO
46312: IFFALSE 46359
// begin vc_chassis := 31 ;
46314: LD_ADDR_OWVAR 37
46318: PUSH
46319: LD_INT 31
46321: ST_TO_ADDR
// vc_control := control_rider ;
46322: LD_ADDR_OWVAR 38
46326: PUSH
46327: LD_INT 4
46329: ST_TO_ADDR
// animal := CreateVehicle ;
46330: LD_ADDR_VAR 0 12
46334: PUSH
46335: CALL_OW 45
46339: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46340: LD_VAR 0 12
46344: PPUSH
46345: LD_VAR 0 8
46349: PPUSH
46350: LD_INT 0
46352: PPUSH
46353: CALL 48496 0 3
// end ;
46357: GO 46311
46359: POP
46360: POP
// if horses then
46361: LD_VAR 0 5
46365: IFFALSE 46432
// for i = 1 to horses do
46367: LD_ADDR_VAR 0 11
46371: PUSH
46372: DOUBLE
46373: LD_INT 1
46375: DEC
46376: ST_TO_ADDR
46377: LD_VAR 0 5
46381: PUSH
46382: FOR_TO
46383: IFFALSE 46430
// begin hc_class := 21 ;
46385: LD_ADDR_OWVAR 28
46389: PUSH
46390: LD_INT 21
46392: ST_TO_ADDR
// hc_gallery :=  ;
46393: LD_ADDR_OWVAR 33
46397: PUSH
46398: LD_STRING 
46400: ST_TO_ADDR
// animal := CreateHuman ;
46401: LD_ADDR_VAR 0 12
46405: PUSH
46406: CALL_OW 44
46410: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46411: LD_VAR 0 12
46415: PPUSH
46416: LD_VAR 0 8
46420: PPUSH
46421: LD_INT 0
46423: PPUSH
46424: CALL 48496 0 3
// end ;
46428: GO 46382
46430: POP
46431: POP
// if birds then
46432: LD_VAR 0 1
46436: IFFALSE 46503
// for i = 1 to birds do
46438: LD_ADDR_VAR 0 11
46442: PUSH
46443: DOUBLE
46444: LD_INT 1
46446: DEC
46447: ST_TO_ADDR
46448: LD_VAR 0 1
46452: PUSH
46453: FOR_TO
46454: IFFALSE 46501
// begin hc_class = 18 ;
46456: LD_ADDR_OWVAR 28
46460: PUSH
46461: LD_INT 18
46463: ST_TO_ADDR
// hc_gallery =  ;
46464: LD_ADDR_OWVAR 33
46468: PUSH
46469: LD_STRING 
46471: ST_TO_ADDR
// animal := CreateHuman ;
46472: LD_ADDR_VAR 0 12
46476: PUSH
46477: CALL_OW 44
46481: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46482: LD_VAR 0 12
46486: PPUSH
46487: LD_VAR 0 8
46491: PPUSH
46492: LD_INT 0
46494: PPUSH
46495: CALL 48496 0 3
// end ;
46499: GO 46453
46501: POP
46502: POP
// if tigers then
46503: LD_VAR 0 2
46507: IFFALSE 46591
// for i = 1 to tigers do
46509: LD_ADDR_VAR 0 11
46513: PUSH
46514: DOUBLE
46515: LD_INT 1
46517: DEC
46518: ST_TO_ADDR
46519: LD_VAR 0 2
46523: PUSH
46524: FOR_TO
46525: IFFALSE 46589
// begin hc_class = class_tiger ;
46527: LD_ADDR_OWVAR 28
46531: PUSH
46532: LD_INT 14
46534: ST_TO_ADDR
// hc_gallery =  ;
46535: LD_ADDR_OWVAR 33
46539: PUSH
46540: LD_STRING 
46542: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46543: LD_ADDR_OWVAR 35
46547: PUSH
46548: LD_INT 7
46550: NEG
46551: PPUSH
46552: LD_INT 7
46554: PPUSH
46555: CALL_OW 12
46559: ST_TO_ADDR
// animal := CreateHuman ;
46560: LD_ADDR_VAR 0 12
46564: PUSH
46565: CALL_OW 44
46569: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46570: LD_VAR 0 12
46574: PPUSH
46575: LD_VAR 0 8
46579: PPUSH
46580: LD_INT 0
46582: PPUSH
46583: CALL 48496 0 3
// end ;
46587: GO 46524
46589: POP
46590: POP
// if apemans then
46591: LD_VAR 0 3
46595: IFFALSE 46718
// for i = 1 to apemans do
46597: LD_ADDR_VAR 0 11
46601: PUSH
46602: DOUBLE
46603: LD_INT 1
46605: DEC
46606: ST_TO_ADDR
46607: LD_VAR 0 3
46611: PUSH
46612: FOR_TO
46613: IFFALSE 46716
// begin hc_class = class_apeman ;
46615: LD_ADDR_OWVAR 28
46619: PUSH
46620: LD_INT 12
46622: ST_TO_ADDR
// hc_gallery =  ;
46623: LD_ADDR_OWVAR 33
46627: PUSH
46628: LD_STRING 
46630: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
46631: LD_ADDR_OWVAR 35
46635: PUSH
46636: LD_INT 2
46638: NEG
46639: PPUSH
46640: LD_INT 2
46642: PPUSH
46643: CALL_OW 12
46647: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46648: LD_ADDR_OWVAR 31
46652: PUSH
46653: LD_INT 1
46655: PPUSH
46656: LD_INT 3
46658: PPUSH
46659: CALL_OW 12
46663: PUSH
46664: LD_INT 1
46666: PPUSH
46667: LD_INT 3
46669: PPUSH
46670: CALL_OW 12
46674: PUSH
46675: LD_INT 0
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: ST_TO_ADDR
// animal := CreateHuman ;
46687: LD_ADDR_VAR 0 12
46691: PUSH
46692: CALL_OW 44
46696: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46697: LD_VAR 0 12
46701: PPUSH
46702: LD_VAR 0 8
46706: PPUSH
46707: LD_INT 0
46709: PPUSH
46710: CALL 48496 0 3
// end ;
46714: GO 46612
46716: POP
46717: POP
// if enchidnas then
46718: LD_VAR 0 4
46722: IFFALSE 46789
// for i = 1 to enchidnas do
46724: LD_ADDR_VAR 0 11
46728: PUSH
46729: DOUBLE
46730: LD_INT 1
46732: DEC
46733: ST_TO_ADDR
46734: LD_VAR 0 4
46738: PUSH
46739: FOR_TO
46740: IFFALSE 46787
// begin hc_class = 13 ;
46742: LD_ADDR_OWVAR 28
46746: PUSH
46747: LD_INT 13
46749: ST_TO_ADDR
// hc_gallery =  ;
46750: LD_ADDR_OWVAR 33
46754: PUSH
46755: LD_STRING 
46757: ST_TO_ADDR
// animal := CreateHuman ;
46758: LD_ADDR_VAR 0 12
46762: PUSH
46763: CALL_OW 44
46767: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46768: LD_VAR 0 12
46772: PPUSH
46773: LD_VAR 0 8
46777: PPUSH
46778: LD_INT 0
46780: PPUSH
46781: CALL 48496 0 3
// end ;
46785: GO 46739
46787: POP
46788: POP
// if fishes then
46789: LD_VAR 0 7
46793: IFFALSE 46860
// for i = 1 to fishes do
46795: LD_ADDR_VAR 0 11
46799: PUSH
46800: DOUBLE
46801: LD_INT 1
46803: DEC
46804: ST_TO_ADDR
46805: LD_VAR 0 7
46809: PUSH
46810: FOR_TO
46811: IFFALSE 46858
// begin hc_class = 20 ;
46813: LD_ADDR_OWVAR 28
46817: PUSH
46818: LD_INT 20
46820: ST_TO_ADDR
// hc_gallery =  ;
46821: LD_ADDR_OWVAR 33
46825: PUSH
46826: LD_STRING 
46828: ST_TO_ADDR
// animal := CreateHuman ;
46829: LD_ADDR_VAR 0 12
46833: PUSH
46834: CALL_OW 44
46838: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46839: LD_VAR 0 12
46843: PPUSH
46844: LD_VAR 0 9
46848: PPUSH
46849: LD_INT 0
46851: PPUSH
46852: CALL 48496 0 3
// end ;
46856: GO 46810
46858: POP
46859: POP
// end ;
46860: LD_VAR 0 10
46864: RET
// export function WantHeal ( sci , unit ) ; begin
46865: LD_INT 0
46867: PPUSH
// if GetTaskList ( sci ) > 0 then
46868: LD_VAR 0 1
46872: PPUSH
46873: CALL_OW 437
46877: PUSH
46878: LD_INT 0
46880: GREATER
46881: IFFALSE 46951
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46883: LD_VAR 0 1
46887: PPUSH
46888: CALL_OW 437
46892: PUSH
46893: LD_INT 1
46895: ARRAY
46896: PUSH
46897: LD_INT 1
46899: ARRAY
46900: PUSH
46901: LD_STRING l
46903: EQUAL
46904: PUSH
46905: LD_VAR 0 1
46909: PPUSH
46910: CALL_OW 437
46914: PUSH
46915: LD_INT 1
46917: ARRAY
46918: PUSH
46919: LD_INT 4
46921: ARRAY
46922: PUSH
46923: LD_VAR 0 2
46927: EQUAL
46928: AND
46929: IFFALSE 46941
// result := true else
46931: LD_ADDR_VAR 0 3
46935: PUSH
46936: LD_INT 1
46938: ST_TO_ADDR
46939: GO 46949
// result := false ;
46941: LD_ADDR_VAR 0 3
46945: PUSH
46946: LD_INT 0
46948: ST_TO_ADDR
// end else
46949: GO 46959
// result := false ;
46951: LD_ADDR_VAR 0 3
46955: PUSH
46956: LD_INT 0
46958: ST_TO_ADDR
// end ;
46959: LD_VAR 0 3
46963: RET
// export function HealTarget ( sci ) ; begin
46964: LD_INT 0
46966: PPUSH
// if not sci then
46967: LD_VAR 0 1
46971: NOT
46972: IFFALSE 46976
// exit ;
46974: GO 47041
// result := 0 ;
46976: LD_ADDR_VAR 0 2
46980: PUSH
46981: LD_INT 0
46983: ST_TO_ADDR
// if GetTaskList ( sci ) then
46984: LD_VAR 0 1
46988: PPUSH
46989: CALL_OW 437
46993: IFFALSE 47041
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46995: LD_VAR 0 1
46999: PPUSH
47000: CALL_OW 437
47004: PUSH
47005: LD_INT 1
47007: ARRAY
47008: PUSH
47009: LD_INT 1
47011: ARRAY
47012: PUSH
47013: LD_STRING l
47015: EQUAL
47016: IFFALSE 47041
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
47018: LD_ADDR_VAR 0 2
47022: PUSH
47023: LD_VAR 0 1
47027: PPUSH
47028: CALL_OW 437
47032: PUSH
47033: LD_INT 1
47035: ARRAY
47036: PUSH
47037: LD_INT 4
47039: ARRAY
47040: ST_TO_ADDR
// end ;
47041: LD_VAR 0 2
47045: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
47046: LD_INT 0
47048: PPUSH
47049: PPUSH
47050: PPUSH
47051: PPUSH
// if not base_units then
47052: LD_VAR 0 1
47056: NOT
47057: IFFALSE 47061
// exit ;
47059: GO 47148
// result := false ;
47061: LD_ADDR_VAR 0 2
47065: PUSH
47066: LD_INT 0
47068: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
47069: LD_ADDR_VAR 0 5
47073: PUSH
47074: LD_VAR 0 1
47078: PPUSH
47079: LD_INT 21
47081: PUSH
47082: LD_INT 3
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PPUSH
47089: CALL_OW 72
47093: ST_TO_ADDR
// if not tmp then
47094: LD_VAR 0 5
47098: NOT
47099: IFFALSE 47103
// exit ;
47101: GO 47148
// for i in tmp do
47103: LD_ADDR_VAR 0 3
47107: PUSH
47108: LD_VAR 0 5
47112: PUSH
47113: FOR_IN
47114: IFFALSE 47146
// begin result := EnemyInRange ( i , 22 ) ;
47116: LD_ADDR_VAR 0 2
47120: PUSH
47121: LD_VAR 0 3
47125: PPUSH
47126: LD_INT 22
47128: PPUSH
47129: CALL 45384 0 2
47133: ST_TO_ADDR
// if result then
47134: LD_VAR 0 2
47138: IFFALSE 47144
// exit ;
47140: POP
47141: POP
47142: GO 47148
// end ;
47144: GO 47113
47146: POP
47147: POP
// end ;
47148: LD_VAR 0 2
47152: RET
// export function FilterByTag ( units , tag ) ; begin
47153: LD_INT 0
47155: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
47156: LD_ADDR_VAR 0 3
47160: PUSH
47161: LD_VAR 0 1
47165: PPUSH
47166: LD_INT 120
47168: PUSH
47169: LD_VAR 0 2
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PPUSH
47178: CALL_OW 72
47182: ST_TO_ADDR
// end ;
47183: LD_VAR 0 3
47187: RET
// export function IsDriver ( un ) ; begin
47188: LD_INT 0
47190: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47191: LD_ADDR_VAR 0 2
47195: PUSH
47196: LD_VAR 0 1
47200: PUSH
47201: LD_INT 55
47203: PUSH
47204: EMPTY
47205: LIST
47206: PPUSH
47207: CALL_OW 69
47211: IN
47212: ST_TO_ADDR
// end ;
47213: LD_VAR 0 2
47217: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47218: LD_INT 0
47220: PPUSH
47221: PPUSH
// list := [ ] ;
47222: LD_ADDR_VAR 0 5
47226: PUSH
47227: EMPTY
47228: ST_TO_ADDR
// case d of 0 :
47229: LD_VAR 0 3
47233: PUSH
47234: LD_INT 0
47236: DOUBLE
47237: EQUAL
47238: IFTRUE 47242
47240: GO 47375
47242: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47243: LD_ADDR_VAR 0 5
47247: PUSH
47248: LD_VAR 0 1
47252: PUSH
47253: LD_INT 4
47255: MINUS
47256: PUSH
47257: LD_VAR 0 2
47261: PUSH
47262: LD_INT 4
47264: MINUS
47265: PUSH
47266: LD_INT 2
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: LIST
47273: PUSH
47274: LD_VAR 0 1
47278: PUSH
47279: LD_INT 3
47281: MINUS
47282: PUSH
47283: LD_VAR 0 2
47287: PUSH
47288: LD_INT 1
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: LIST
47295: PUSH
47296: LD_VAR 0 1
47300: PUSH
47301: LD_INT 4
47303: PLUS
47304: PUSH
47305: LD_VAR 0 2
47309: PUSH
47310: LD_INT 4
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: LIST
47317: PUSH
47318: LD_VAR 0 1
47322: PUSH
47323: LD_INT 3
47325: PLUS
47326: PUSH
47327: LD_VAR 0 2
47331: PUSH
47332: LD_INT 3
47334: PLUS
47335: PUSH
47336: LD_INT 5
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: LIST
47343: PUSH
47344: LD_VAR 0 1
47348: PUSH
47349: LD_VAR 0 2
47353: PUSH
47354: LD_INT 4
47356: PLUS
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: LIST
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: ST_TO_ADDR
// end ; 1 :
47373: GO 48073
47375: LD_INT 1
47377: DOUBLE
47378: EQUAL
47379: IFTRUE 47383
47381: GO 47516
47383: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47384: LD_ADDR_VAR 0 5
47388: PUSH
47389: LD_VAR 0 1
47393: PUSH
47394: LD_VAR 0 2
47398: PUSH
47399: LD_INT 4
47401: MINUS
47402: PUSH
47403: LD_INT 3
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: LIST
47410: PUSH
47411: LD_VAR 0 1
47415: PUSH
47416: LD_INT 3
47418: MINUS
47419: PUSH
47420: LD_VAR 0 2
47424: PUSH
47425: LD_INT 3
47427: MINUS
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: LIST
47436: PUSH
47437: LD_VAR 0 1
47441: PUSH
47442: LD_INT 4
47444: MINUS
47445: PUSH
47446: LD_VAR 0 2
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: LIST
47458: PUSH
47459: LD_VAR 0 1
47463: PUSH
47464: LD_VAR 0 2
47468: PUSH
47469: LD_INT 3
47471: PLUS
47472: PUSH
47473: LD_INT 0
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: LIST
47480: PUSH
47481: LD_VAR 0 1
47485: PUSH
47486: LD_INT 4
47488: PLUS
47489: PUSH
47490: LD_VAR 0 2
47494: PUSH
47495: LD_INT 4
47497: PLUS
47498: PUSH
47499: LD_INT 5
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: LIST
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: ST_TO_ADDR
// end ; 2 :
47514: GO 48073
47516: LD_INT 2
47518: DOUBLE
47519: EQUAL
47520: IFTRUE 47524
47522: GO 47653
47524: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
47525: LD_ADDR_VAR 0 5
47529: PUSH
47530: LD_VAR 0 1
47534: PUSH
47535: LD_VAR 0 2
47539: PUSH
47540: LD_INT 3
47542: MINUS
47543: PUSH
47544: LD_INT 3
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: LIST
47551: PUSH
47552: LD_VAR 0 1
47556: PUSH
47557: LD_INT 4
47559: PLUS
47560: PUSH
47561: LD_VAR 0 2
47565: PUSH
47566: LD_INT 4
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: LIST
47573: PUSH
47574: LD_VAR 0 1
47578: PUSH
47579: LD_VAR 0 2
47583: PUSH
47584: LD_INT 4
47586: PLUS
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: LIST
47595: PUSH
47596: LD_VAR 0 1
47600: PUSH
47601: LD_INT 3
47603: MINUS
47604: PUSH
47605: LD_VAR 0 2
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: LIST
47617: PUSH
47618: LD_VAR 0 1
47622: PUSH
47623: LD_INT 4
47625: MINUS
47626: PUSH
47627: LD_VAR 0 2
47631: PUSH
47632: LD_INT 4
47634: MINUS
47635: PUSH
47636: LD_INT 2
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: LIST
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: ST_TO_ADDR
// end ; 3 :
47651: GO 48073
47653: LD_INT 3
47655: DOUBLE
47656: EQUAL
47657: IFTRUE 47661
47659: GO 47794
47661: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
47662: LD_ADDR_VAR 0 5
47666: PUSH
47667: LD_VAR 0 1
47671: PUSH
47672: LD_INT 3
47674: PLUS
47675: PUSH
47676: LD_VAR 0 2
47680: PUSH
47681: LD_INT 4
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: LIST
47688: PUSH
47689: LD_VAR 0 1
47693: PUSH
47694: LD_INT 4
47696: PLUS
47697: PUSH
47698: LD_VAR 0 2
47702: PUSH
47703: LD_INT 4
47705: PLUS
47706: PUSH
47707: LD_INT 5
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: LIST
47714: PUSH
47715: LD_VAR 0 1
47719: PUSH
47720: LD_INT 4
47722: MINUS
47723: PUSH
47724: LD_VAR 0 2
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: LIST
47736: PUSH
47737: LD_VAR 0 1
47741: PUSH
47742: LD_VAR 0 2
47746: PUSH
47747: LD_INT 4
47749: MINUS
47750: PUSH
47751: LD_INT 3
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: LIST
47758: PUSH
47759: LD_VAR 0 1
47763: PUSH
47764: LD_INT 3
47766: MINUS
47767: PUSH
47768: LD_VAR 0 2
47772: PUSH
47773: LD_INT 3
47775: MINUS
47776: PUSH
47777: LD_INT 2
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: LIST
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: ST_TO_ADDR
// end ; 4 :
47792: GO 48073
47794: LD_INT 4
47796: DOUBLE
47797: EQUAL
47798: IFTRUE 47802
47800: GO 47935
47802: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47803: LD_ADDR_VAR 0 5
47807: PUSH
47808: LD_VAR 0 1
47812: PUSH
47813: LD_VAR 0 2
47817: PUSH
47818: LD_INT 4
47820: PLUS
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: LIST
47829: PUSH
47830: LD_VAR 0 1
47834: PUSH
47835: LD_INT 3
47837: PLUS
47838: PUSH
47839: LD_VAR 0 2
47843: PUSH
47844: LD_INT 3
47846: PLUS
47847: PUSH
47848: LD_INT 5
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: LIST
47855: PUSH
47856: LD_VAR 0 1
47860: PUSH
47861: LD_INT 4
47863: PLUS
47864: PUSH
47865: LD_VAR 0 2
47869: PUSH
47870: LD_INT 4
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: LIST
47877: PUSH
47878: LD_VAR 0 1
47882: PUSH
47883: LD_VAR 0 2
47887: PUSH
47888: LD_INT 3
47890: MINUS
47891: PUSH
47892: LD_INT 3
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: LIST
47899: PUSH
47900: LD_VAR 0 1
47904: PUSH
47905: LD_INT 4
47907: MINUS
47908: PUSH
47909: LD_VAR 0 2
47913: PUSH
47914: LD_INT 4
47916: MINUS
47917: PUSH
47918: LD_INT 2
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: LIST
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: ST_TO_ADDR
// end ; 5 :
47933: GO 48073
47935: LD_INT 5
47937: DOUBLE
47938: EQUAL
47939: IFTRUE 47943
47941: GO 48072
47943: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47944: LD_ADDR_VAR 0 5
47948: PUSH
47949: LD_VAR 0 1
47953: PUSH
47954: LD_INT 4
47956: MINUS
47957: PUSH
47958: LD_VAR 0 2
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: LIST
47970: PUSH
47971: LD_VAR 0 1
47975: PUSH
47976: LD_VAR 0 2
47980: PUSH
47981: LD_INT 4
47983: MINUS
47984: PUSH
47985: LD_INT 3
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: LIST
47992: PUSH
47993: LD_VAR 0 1
47997: PUSH
47998: LD_INT 4
48000: PLUS
48001: PUSH
48002: LD_VAR 0 2
48006: PUSH
48007: LD_INT 4
48009: PLUS
48010: PUSH
48011: LD_INT 5
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: LIST
48018: PUSH
48019: LD_VAR 0 1
48023: PUSH
48024: LD_INT 3
48026: PLUS
48027: PUSH
48028: LD_VAR 0 2
48032: PUSH
48033: LD_INT 4
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: LIST
48040: PUSH
48041: LD_VAR 0 1
48045: PUSH
48046: LD_VAR 0 2
48050: PUSH
48051: LD_INT 3
48053: PLUS
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: LIST
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: ST_TO_ADDR
// end ; end ;
48070: GO 48073
48072: POP
// result := list ;
48073: LD_ADDR_VAR 0 4
48077: PUSH
48078: LD_VAR 0 5
48082: ST_TO_ADDR
// end ;
48083: LD_VAR 0 4
48087: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
48088: LD_INT 0
48090: PPUSH
48091: PPUSH
48092: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
48093: LD_VAR 0 1
48097: NOT
48098: PUSH
48099: LD_VAR 0 2
48103: PUSH
48104: LD_INT 1
48106: PUSH
48107: LD_INT 2
48109: PUSH
48110: LD_INT 3
48112: PUSH
48113: LD_INT 4
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: IN
48122: NOT
48123: OR
48124: IFFALSE 48128
// exit ;
48126: GO 48220
// tmp := [ ] ;
48128: LD_ADDR_VAR 0 5
48132: PUSH
48133: EMPTY
48134: ST_TO_ADDR
// for i in units do
48135: LD_ADDR_VAR 0 4
48139: PUSH
48140: LD_VAR 0 1
48144: PUSH
48145: FOR_IN
48146: IFFALSE 48189
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
48148: LD_ADDR_VAR 0 5
48152: PUSH
48153: LD_VAR 0 5
48157: PPUSH
48158: LD_VAR 0 5
48162: PUSH
48163: LD_INT 1
48165: PLUS
48166: PPUSH
48167: LD_VAR 0 4
48171: PPUSH
48172: LD_VAR 0 2
48176: PPUSH
48177: CALL_OW 259
48181: PPUSH
48182: CALL_OW 2
48186: ST_TO_ADDR
48187: GO 48145
48189: POP
48190: POP
// if not tmp then
48191: LD_VAR 0 5
48195: NOT
48196: IFFALSE 48200
// exit ;
48198: GO 48220
// result := SortListByListDesc ( units , tmp ) ;
48200: LD_ADDR_VAR 0 3
48204: PUSH
48205: LD_VAR 0 1
48209: PPUSH
48210: LD_VAR 0 5
48214: PPUSH
48215: CALL_OW 77
48219: ST_TO_ADDR
// end ;
48220: LD_VAR 0 3
48224: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48225: LD_INT 0
48227: PPUSH
48228: PPUSH
48229: PPUSH
// result := false ;
48230: LD_ADDR_VAR 0 3
48234: PUSH
48235: LD_INT 0
48237: ST_TO_ADDR
// x := GetX ( building ) ;
48238: LD_ADDR_VAR 0 4
48242: PUSH
48243: LD_VAR 0 2
48247: PPUSH
48248: CALL_OW 250
48252: ST_TO_ADDR
// y := GetY ( building ) ;
48253: LD_ADDR_VAR 0 5
48257: PUSH
48258: LD_VAR 0 2
48262: PPUSH
48263: CALL_OW 251
48267: ST_TO_ADDR
// if not building or not x or not y then
48268: LD_VAR 0 2
48272: NOT
48273: PUSH
48274: LD_VAR 0 4
48278: NOT
48279: OR
48280: PUSH
48281: LD_VAR 0 5
48285: NOT
48286: OR
48287: IFFALSE 48291
// exit ;
48289: GO 48383
// if GetTaskList ( unit ) then
48291: LD_VAR 0 1
48295: PPUSH
48296: CALL_OW 437
48300: IFFALSE 48383
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48302: LD_STRING e
48304: PUSH
48305: LD_VAR 0 1
48309: PPUSH
48310: CALL_OW 437
48314: PUSH
48315: LD_INT 1
48317: ARRAY
48318: PUSH
48319: LD_INT 1
48321: ARRAY
48322: EQUAL
48323: PUSH
48324: LD_VAR 0 4
48328: PUSH
48329: LD_VAR 0 1
48333: PPUSH
48334: CALL_OW 437
48338: PUSH
48339: LD_INT 1
48341: ARRAY
48342: PUSH
48343: LD_INT 2
48345: ARRAY
48346: EQUAL
48347: AND
48348: PUSH
48349: LD_VAR 0 5
48353: PUSH
48354: LD_VAR 0 1
48358: PPUSH
48359: CALL_OW 437
48363: PUSH
48364: LD_INT 1
48366: ARRAY
48367: PUSH
48368: LD_INT 3
48370: ARRAY
48371: EQUAL
48372: AND
48373: IFFALSE 48383
// result := true end ;
48375: LD_ADDR_VAR 0 3
48379: PUSH
48380: LD_INT 1
48382: ST_TO_ADDR
// end ;
48383: LD_VAR 0 3
48387: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
48388: LD_INT 0
48390: PPUSH
// result := false ;
48391: LD_ADDR_VAR 0 4
48395: PUSH
48396: LD_INT 0
48398: ST_TO_ADDR
// if GetTaskList ( unit ) then
48399: LD_VAR 0 1
48403: PPUSH
48404: CALL_OW 437
48408: IFFALSE 48491
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48410: LD_STRING M
48412: PUSH
48413: LD_VAR 0 1
48417: PPUSH
48418: CALL_OW 437
48422: PUSH
48423: LD_INT 1
48425: ARRAY
48426: PUSH
48427: LD_INT 1
48429: ARRAY
48430: EQUAL
48431: PUSH
48432: LD_VAR 0 2
48436: PUSH
48437: LD_VAR 0 1
48441: PPUSH
48442: CALL_OW 437
48446: PUSH
48447: LD_INT 1
48449: ARRAY
48450: PUSH
48451: LD_INT 2
48453: ARRAY
48454: EQUAL
48455: AND
48456: PUSH
48457: LD_VAR 0 3
48461: PUSH
48462: LD_VAR 0 1
48466: PPUSH
48467: CALL_OW 437
48471: PUSH
48472: LD_INT 1
48474: ARRAY
48475: PUSH
48476: LD_INT 3
48478: ARRAY
48479: EQUAL
48480: AND
48481: IFFALSE 48491
// result := true ;
48483: LD_ADDR_VAR 0 4
48487: PUSH
48488: LD_INT 1
48490: ST_TO_ADDR
// end ; end ;
48491: LD_VAR 0 4
48495: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48496: LD_INT 0
48498: PPUSH
48499: PPUSH
48500: PPUSH
48501: PPUSH
// if not unit or not area then
48502: LD_VAR 0 1
48506: NOT
48507: PUSH
48508: LD_VAR 0 2
48512: NOT
48513: OR
48514: IFFALSE 48518
// exit ;
48516: GO 48682
// tmp := AreaToList ( area , i ) ;
48518: LD_ADDR_VAR 0 6
48522: PUSH
48523: LD_VAR 0 2
48527: PPUSH
48528: LD_VAR 0 5
48532: PPUSH
48533: CALL_OW 517
48537: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
48538: LD_ADDR_VAR 0 5
48542: PUSH
48543: DOUBLE
48544: LD_INT 1
48546: DEC
48547: ST_TO_ADDR
48548: LD_VAR 0 6
48552: PUSH
48553: LD_INT 1
48555: ARRAY
48556: PUSH
48557: FOR_TO
48558: IFFALSE 48680
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
48560: LD_ADDR_VAR 0 7
48564: PUSH
48565: LD_VAR 0 6
48569: PUSH
48570: LD_INT 1
48572: ARRAY
48573: PUSH
48574: LD_VAR 0 5
48578: ARRAY
48579: PUSH
48580: LD_VAR 0 6
48584: PUSH
48585: LD_INT 2
48587: ARRAY
48588: PUSH
48589: LD_VAR 0 5
48593: ARRAY
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
48599: LD_VAR 0 7
48603: PUSH
48604: LD_INT 1
48606: ARRAY
48607: PPUSH
48608: LD_VAR 0 7
48612: PUSH
48613: LD_INT 2
48615: ARRAY
48616: PPUSH
48617: CALL_OW 428
48621: PUSH
48622: LD_INT 0
48624: EQUAL
48625: IFFALSE 48678
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
48627: LD_VAR 0 1
48631: PPUSH
48632: LD_VAR 0 7
48636: PUSH
48637: LD_INT 1
48639: ARRAY
48640: PPUSH
48641: LD_VAR 0 7
48645: PUSH
48646: LD_INT 2
48648: ARRAY
48649: PPUSH
48650: LD_VAR 0 3
48654: PPUSH
48655: CALL_OW 48
// result := IsPlaced ( unit ) ;
48659: LD_ADDR_VAR 0 4
48663: PUSH
48664: LD_VAR 0 1
48668: PPUSH
48669: CALL_OW 305
48673: ST_TO_ADDR
// exit ;
48674: POP
48675: POP
48676: GO 48682
// end ; end ;
48678: GO 48557
48680: POP
48681: POP
// end ;
48682: LD_VAR 0 4
48686: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
48687: LD_INT 0
48689: PPUSH
48690: PPUSH
48691: PPUSH
// if not side or side > 8 then
48692: LD_VAR 0 1
48696: NOT
48697: PUSH
48698: LD_VAR 0 1
48702: PUSH
48703: LD_INT 8
48705: GREATER
48706: OR
48707: IFFALSE 48711
// exit ;
48709: GO 48898
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
48711: LD_ADDR_VAR 0 4
48715: PUSH
48716: LD_INT 22
48718: PUSH
48719: LD_VAR 0 1
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 21
48730: PUSH
48731: LD_INT 3
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PPUSH
48742: CALL_OW 69
48746: ST_TO_ADDR
// if not tmp then
48747: LD_VAR 0 4
48751: NOT
48752: IFFALSE 48756
// exit ;
48754: GO 48898
// enable_addtolog := true ;
48756: LD_ADDR_OWVAR 81
48760: PUSH
48761: LD_INT 1
48763: ST_TO_ADDR
// AddToLog ( [ ) ;
48764: LD_STRING [
48766: PPUSH
48767: CALL_OW 561
// for i in tmp do
48771: LD_ADDR_VAR 0 3
48775: PUSH
48776: LD_VAR 0 4
48780: PUSH
48781: FOR_IN
48782: IFFALSE 48889
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48784: LD_STRING [
48786: PUSH
48787: LD_VAR 0 3
48791: PPUSH
48792: CALL_OW 266
48796: STR
48797: PUSH
48798: LD_STRING , 
48800: STR
48801: PUSH
48802: LD_VAR 0 3
48806: PPUSH
48807: CALL_OW 250
48811: STR
48812: PUSH
48813: LD_STRING , 
48815: STR
48816: PUSH
48817: LD_VAR 0 3
48821: PPUSH
48822: CALL_OW 251
48826: STR
48827: PUSH
48828: LD_STRING , 
48830: STR
48831: PUSH
48832: LD_VAR 0 3
48836: PPUSH
48837: CALL_OW 254
48841: STR
48842: PUSH
48843: LD_STRING , 
48845: STR
48846: PUSH
48847: LD_VAR 0 3
48851: PPUSH
48852: LD_INT 1
48854: PPUSH
48855: CALL_OW 268
48859: STR
48860: PUSH
48861: LD_STRING , 
48863: STR
48864: PUSH
48865: LD_VAR 0 3
48869: PPUSH
48870: LD_INT 2
48872: PPUSH
48873: CALL_OW 268
48877: STR
48878: PUSH
48879: LD_STRING ],
48881: STR
48882: PPUSH
48883: CALL_OW 561
// end ;
48887: GO 48781
48889: POP
48890: POP
// AddToLog ( ]; ) ;
48891: LD_STRING ];
48893: PPUSH
48894: CALL_OW 561
// end ;
48898: LD_VAR 0 2
48902: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48903: LD_INT 0
48905: PPUSH
48906: PPUSH
48907: PPUSH
48908: PPUSH
48909: PPUSH
// if not area or not rate or not max then
48910: LD_VAR 0 1
48914: NOT
48915: PUSH
48916: LD_VAR 0 2
48920: NOT
48921: OR
48922: PUSH
48923: LD_VAR 0 4
48927: NOT
48928: OR
48929: IFFALSE 48933
// exit ;
48931: GO 49122
// while 1 do
48933: LD_INT 1
48935: IFFALSE 49122
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48937: LD_ADDR_VAR 0 9
48941: PUSH
48942: LD_VAR 0 1
48946: PPUSH
48947: LD_INT 1
48949: PPUSH
48950: CALL_OW 287
48954: PUSH
48955: LD_INT 10
48957: MUL
48958: ST_TO_ADDR
// r := rate / 10 ;
48959: LD_ADDR_VAR 0 7
48963: PUSH
48964: LD_VAR 0 2
48968: PUSH
48969: LD_INT 10
48971: DIVREAL
48972: ST_TO_ADDR
// time := 1 1$00 ;
48973: LD_ADDR_VAR 0 8
48977: PUSH
48978: LD_INT 2100
48980: ST_TO_ADDR
// if amount < min then
48981: LD_VAR 0 9
48985: PUSH
48986: LD_VAR 0 3
48990: LESS
48991: IFFALSE 49009
// r := r * 2 else
48993: LD_ADDR_VAR 0 7
48997: PUSH
48998: LD_VAR 0 7
49002: PUSH
49003: LD_INT 2
49005: MUL
49006: ST_TO_ADDR
49007: GO 49035
// if amount > max then
49009: LD_VAR 0 9
49013: PUSH
49014: LD_VAR 0 4
49018: GREATER
49019: IFFALSE 49035
// r := r / 2 ;
49021: LD_ADDR_VAR 0 7
49025: PUSH
49026: LD_VAR 0 7
49030: PUSH
49031: LD_INT 2
49033: DIVREAL
49034: ST_TO_ADDR
// time := time / r ;
49035: LD_ADDR_VAR 0 8
49039: PUSH
49040: LD_VAR 0 8
49044: PUSH
49045: LD_VAR 0 7
49049: DIVREAL
49050: ST_TO_ADDR
// if time < 0 then
49051: LD_VAR 0 8
49055: PUSH
49056: LD_INT 0
49058: LESS
49059: IFFALSE 49076
// time := time * - 1 ;
49061: LD_ADDR_VAR 0 8
49065: PUSH
49066: LD_VAR 0 8
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: MUL
49075: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
49076: LD_VAR 0 8
49080: PUSH
49081: LD_INT 35
49083: PPUSH
49084: LD_INT 875
49086: PPUSH
49087: CALL_OW 12
49091: PLUS
49092: PPUSH
49093: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
49097: LD_INT 1
49099: PPUSH
49100: LD_INT 5
49102: PPUSH
49103: CALL_OW 12
49107: PPUSH
49108: LD_VAR 0 1
49112: PPUSH
49113: LD_INT 1
49115: PPUSH
49116: CALL_OW 55
// end ;
49120: GO 48933
// end ;
49122: LD_VAR 0 5
49126: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
49127: LD_INT 0
49129: PPUSH
49130: PPUSH
49131: PPUSH
49132: PPUSH
49133: PPUSH
49134: PPUSH
49135: PPUSH
49136: PPUSH
// if not turrets or not factories then
49137: LD_VAR 0 1
49141: NOT
49142: PUSH
49143: LD_VAR 0 2
49147: NOT
49148: OR
49149: IFFALSE 49153
// exit ;
49151: GO 49460
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
49153: LD_ADDR_VAR 0 10
49157: PUSH
49158: LD_INT 5
49160: PUSH
49161: LD_INT 6
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 2
49170: PUSH
49171: LD_INT 4
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 3
49180: PUSH
49181: LD_INT 5
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 24
49195: PUSH
49196: LD_INT 25
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 23
49205: PUSH
49206: LD_INT 27
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 42
49219: PUSH
49220: LD_INT 43
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 44
49229: PUSH
49230: LD_INT 46
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 45
49239: PUSH
49240: LD_INT 47
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: LIST
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: LIST
49256: ST_TO_ADDR
// result := [ ] ;
49257: LD_ADDR_VAR 0 3
49261: PUSH
49262: EMPTY
49263: ST_TO_ADDR
// for i in turrets do
49264: LD_ADDR_VAR 0 4
49268: PUSH
49269: LD_VAR 0 1
49273: PUSH
49274: FOR_IN
49275: IFFALSE 49458
// begin nat := GetNation ( i ) ;
49277: LD_ADDR_VAR 0 7
49281: PUSH
49282: LD_VAR 0 4
49286: PPUSH
49287: CALL_OW 248
49291: ST_TO_ADDR
// weapon := 0 ;
49292: LD_ADDR_VAR 0 8
49296: PUSH
49297: LD_INT 0
49299: ST_TO_ADDR
// if not nat then
49300: LD_VAR 0 7
49304: NOT
49305: IFFALSE 49309
// continue ;
49307: GO 49274
// for j in list [ nat ] do
49309: LD_ADDR_VAR 0 5
49313: PUSH
49314: LD_VAR 0 10
49318: PUSH
49319: LD_VAR 0 7
49323: ARRAY
49324: PUSH
49325: FOR_IN
49326: IFFALSE 49367
// if GetBWeapon ( i ) = j [ 1 ] then
49328: LD_VAR 0 4
49332: PPUSH
49333: CALL_OW 269
49337: PUSH
49338: LD_VAR 0 5
49342: PUSH
49343: LD_INT 1
49345: ARRAY
49346: EQUAL
49347: IFFALSE 49365
// begin weapon := j [ 2 ] ;
49349: LD_ADDR_VAR 0 8
49353: PUSH
49354: LD_VAR 0 5
49358: PUSH
49359: LD_INT 2
49361: ARRAY
49362: ST_TO_ADDR
// break ;
49363: GO 49367
// end ;
49365: GO 49325
49367: POP
49368: POP
// if not weapon then
49369: LD_VAR 0 8
49373: NOT
49374: IFFALSE 49378
// continue ;
49376: GO 49274
// for k in factories do
49378: LD_ADDR_VAR 0 6
49382: PUSH
49383: LD_VAR 0 2
49387: PUSH
49388: FOR_IN
49389: IFFALSE 49454
// begin weapons := AvailableWeaponList ( k ) ;
49391: LD_ADDR_VAR 0 9
49395: PUSH
49396: LD_VAR 0 6
49400: PPUSH
49401: CALL_OW 478
49405: ST_TO_ADDR
// if not weapons then
49406: LD_VAR 0 9
49410: NOT
49411: IFFALSE 49415
// continue ;
49413: GO 49388
// if weapon in weapons then
49415: LD_VAR 0 8
49419: PUSH
49420: LD_VAR 0 9
49424: IN
49425: IFFALSE 49452
// begin result := [ i , weapon ] ;
49427: LD_ADDR_VAR 0 3
49431: PUSH
49432: LD_VAR 0 4
49436: PUSH
49437: LD_VAR 0 8
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: ST_TO_ADDR
// exit ;
49446: POP
49447: POP
49448: POP
49449: POP
49450: GO 49460
// end ; end ;
49452: GO 49388
49454: POP
49455: POP
// end ;
49456: GO 49274
49458: POP
49459: POP
// end ;
49460: LD_VAR 0 3
49464: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49465: LD_INT 0
49467: PPUSH
// if not side or side > 8 then
49468: LD_VAR 0 3
49472: NOT
49473: PUSH
49474: LD_VAR 0 3
49478: PUSH
49479: LD_INT 8
49481: GREATER
49482: OR
49483: IFFALSE 49487
// exit ;
49485: GO 49546
// if not range then
49487: LD_VAR 0 4
49491: NOT
49492: IFFALSE 49503
// range := - 12 ;
49494: LD_ADDR_VAR 0 4
49498: PUSH
49499: LD_INT 12
49501: NEG
49502: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49503: LD_VAR 0 1
49507: PPUSH
49508: LD_VAR 0 2
49512: PPUSH
49513: LD_VAR 0 3
49517: PPUSH
49518: LD_VAR 0 4
49522: PPUSH
49523: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
49527: LD_VAR 0 1
49531: PPUSH
49532: LD_VAR 0 2
49536: PPUSH
49537: LD_VAR 0 3
49541: PPUSH
49542: CALL_OW 331
// end ;
49546: LD_VAR 0 5
49550: RET
// export function Video ( mode ) ; begin
49551: LD_INT 0
49553: PPUSH
// ingame_video = mode ;
49554: LD_ADDR_OWVAR 52
49558: PUSH
49559: LD_VAR 0 1
49563: ST_TO_ADDR
// interface_hidden = mode ;
49564: LD_ADDR_OWVAR 54
49568: PUSH
49569: LD_VAR 0 1
49573: ST_TO_ADDR
// end ;
49574: LD_VAR 0 2
49578: RET
// export function Join ( array , element ) ; begin
49579: LD_INT 0
49581: PPUSH
// result := Replace ( array , array + 1 , element ) ;
49582: LD_ADDR_VAR 0 3
49586: PUSH
49587: LD_VAR 0 1
49591: PPUSH
49592: LD_VAR 0 1
49596: PUSH
49597: LD_INT 1
49599: PLUS
49600: PPUSH
49601: LD_VAR 0 2
49605: PPUSH
49606: CALL_OW 1
49610: ST_TO_ADDR
// end ;
49611: LD_VAR 0 3
49615: RET
// export function JoinUnion ( array , element ) ; begin
49616: LD_INT 0
49618: PPUSH
// result := array union element ;
49619: LD_ADDR_VAR 0 3
49623: PUSH
49624: LD_VAR 0 1
49628: PUSH
49629: LD_VAR 0 2
49633: UNION
49634: ST_TO_ADDR
// end ;
49635: LD_VAR 0 3
49639: RET
// export function GetBehemoths ( side ) ; begin
49640: LD_INT 0
49642: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
49643: LD_ADDR_VAR 0 2
49647: PUSH
49648: LD_INT 22
49650: PUSH
49651: LD_VAR 0 1
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 31
49662: PUSH
49663: LD_INT 25
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PPUSH
49674: CALL_OW 69
49678: ST_TO_ADDR
// end ;
49679: LD_VAR 0 2
49683: RET
// export function Shuffle ( array ) ; var i , index ; begin
49684: LD_INT 0
49686: PPUSH
49687: PPUSH
49688: PPUSH
// result := [ ] ;
49689: LD_ADDR_VAR 0 2
49693: PUSH
49694: EMPTY
49695: ST_TO_ADDR
// if not array then
49696: LD_VAR 0 1
49700: NOT
49701: IFFALSE 49705
// exit ;
49703: GO 49804
// Randomize ;
49705: CALL_OW 10
// for i = array downto 1 do
49709: LD_ADDR_VAR 0 3
49713: PUSH
49714: DOUBLE
49715: LD_VAR 0 1
49719: INC
49720: ST_TO_ADDR
49721: LD_INT 1
49723: PUSH
49724: FOR_DOWNTO
49725: IFFALSE 49802
// begin index := rand ( 1 , array ) ;
49727: LD_ADDR_VAR 0 4
49731: PUSH
49732: LD_INT 1
49734: PPUSH
49735: LD_VAR 0 1
49739: PPUSH
49740: CALL_OW 12
49744: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49745: LD_ADDR_VAR 0 2
49749: PUSH
49750: LD_VAR 0 2
49754: PPUSH
49755: LD_VAR 0 2
49759: PUSH
49760: LD_INT 1
49762: PLUS
49763: PPUSH
49764: LD_VAR 0 1
49768: PUSH
49769: LD_VAR 0 4
49773: ARRAY
49774: PPUSH
49775: CALL_OW 2
49779: ST_TO_ADDR
// array := Delete ( array , index ) ;
49780: LD_ADDR_VAR 0 1
49784: PUSH
49785: LD_VAR 0 1
49789: PPUSH
49790: LD_VAR 0 4
49794: PPUSH
49795: CALL_OW 3
49799: ST_TO_ADDR
// end ;
49800: GO 49724
49802: POP
49803: POP
// end ;
49804: LD_VAR 0 2
49808: RET
// export function GetBaseMaterials ( base ) ; begin
49809: LD_INT 0
49811: PPUSH
// result := [ 0 , 0 , 0 ] ;
49812: LD_ADDR_VAR 0 2
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: LIST
49830: ST_TO_ADDR
// if not base then
49831: LD_VAR 0 1
49835: NOT
49836: IFFALSE 49840
// exit ;
49838: GO 49889
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49840: LD_ADDR_VAR 0 2
49844: PUSH
49845: LD_VAR 0 1
49849: PPUSH
49850: LD_INT 1
49852: PPUSH
49853: CALL_OW 275
49857: PUSH
49858: LD_VAR 0 1
49862: PPUSH
49863: LD_INT 2
49865: PPUSH
49866: CALL_OW 275
49870: PUSH
49871: LD_VAR 0 1
49875: PPUSH
49876: LD_INT 3
49878: PPUSH
49879: CALL_OW 275
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: LIST
49888: ST_TO_ADDR
// end ;
49889: LD_VAR 0 2
49893: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49894: LD_INT 0
49896: PPUSH
49897: PPUSH
// result := array ;
49898: LD_ADDR_VAR 0 3
49902: PUSH
49903: LD_VAR 0 1
49907: ST_TO_ADDR
// if size > 0 then
49908: LD_VAR 0 2
49912: PUSH
49913: LD_INT 0
49915: GREATER
49916: IFFALSE 49962
// for i := array downto size do
49918: LD_ADDR_VAR 0 4
49922: PUSH
49923: DOUBLE
49924: LD_VAR 0 1
49928: INC
49929: ST_TO_ADDR
49930: LD_VAR 0 2
49934: PUSH
49935: FOR_DOWNTO
49936: IFFALSE 49960
// result := Delete ( result , result ) ;
49938: LD_ADDR_VAR 0 3
49942: PUSH
49943: LD_VAR 0 3
49947: PPUSH
49948: LD_VAR 0 3
49952: PPUSH
49953: CALL_OW 3
49957: ST_TO_ADDR
49958: GO 49935
49960: POP
49961: POP
// end ;
49962: LD_VAR 0 3
49966: RET
// export function ComExit ( unit ) ; var tmp ; begin
49967: LD_INT 0
49969: PPUSH
49970: PPUSH
// if not IsInUnit ( unit ) then
49971: LD_VAR 0 1
49975: PPUSH
49976: CALL_OW 310
49980: NOT
49981: IFFALSE 49985
// exit ;
49983: GO 50045
// tmp := IsInUnit ( unit ) ;
49985: LD_ADDR_VAR 0 3
49989: PUSH
49990: LD_VAR 0 1
49994: PPUSH
49995: CALL_OW 310
49999: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
50000: LD_VAR 0 3
50004: PPUSH
50005: CALL_OW 247
50009: PUSH
50010: LD_INT 2
50012: EQUAL
50013: IFFALSE 50026
// ComExitVehicle ( unit ) else
50015: LD_VAR 0 1
50019: PPUSH
50020: CALL_OW 121
50024: GO 50035
// ComExitBuilding ( unit ) ;
50026: LD_VAR 0 1
50030: PPUSH
50031: CALL_OW 122
// result := tmp ;
50035: LD_ADDR_VAR 0 2
50039: PUSH
50040: LD_VAR 0 3
50044: ST_TO_ADDR
// end ;
50045: LD_VAR 0 2
50049: RET
// export function ComExitAll ( units ) ; var i ; begin
50050: LD_INT 0
50052: PPUSH
50053: PPUSH
// if not units then
50054: LD_VAR 0 1
50058: NOT
50059: IFFALSE 50063
// exit ;
50061: GO 50089
// for i in units do
50063: LD_ADDR_VAR 0 3
50067: PUSH
50068: LD_VAR 0 1
50072: PUSH
50073: FOR_IN
50074: IFFALSE 50087
// ComExit ( i ) ;
50076: LD_VAR 0 3
50080: PPUSH
50081: CALL 49967 0 1
50085: GO 50073
50087: POP
50088: POP
// end ;
50089: LD_VAR 0 2
50093: RET
// export function ResetHc ; begin
50094: LD_INT 0
50096: PPUSH
// InitHc ;
50097: CALL_OW 19
// hc_importance := 0 ;
50101: LD_ADDR_OWVAR 32
50105: PUSH
50106: LD_INT 0
50108: ST_TO_ADDR
// end ;
50109: LD_VAR 0 1
50113: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
50114: LD_INT 0
50116: PPUSH
50117: PPUSH
50118: PPUSH
// _x := ( x1 + x2 ) div 2 ;
50119: LD_ADDR_VAR 0 6
50123: PUSH
50124: LD_VAR 0 1
50128: PUSH
50129: LD_VAR 0 3
50133: PLUS
50134: PUSH
50135: LD_INT 2
50137: DIV
50138: ST_TO_ADDR
// if _x < 0 then
50139: LD_VAR 0 6
50143: PUSH
50144: LD_INT 0
50146: LESS
50147: IFFALSE 50164
// _x := _x * - 1 ;
50149: LD_ADDR_VAR 0 6
50153: PUSH
50154: LD_VAR 0 6
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: MUL
50163: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
50164: LD_ADDR_VAR 0 7
50168: PUSH
50169: LD_VAR 0 2
50173: PUSH
50174: LD_VAR 0 4
50178: PLUS
50179: PUSH
50180: LD_INT 2
50182: DIV
50183: ST_TO_ADDR
// if _y < 0 then
50184: LD_VAR 0 7
50188: PUSH
50189: LD_INT 0
50191: LESS
50192: IFFALSE 50209
// _y := _y * - 1 ;
50194: LD_ADDR_VAR 0 7
50198: PUSH
50199: LD_VAR 0 7
50203: PUSH
50204: LD_INT 1
50206: NEG
50207: MUL
50208: ST_TO_ADDR
// result := [ _x , _y ] ;
50209: LD_ADDR_VAR 0 5
50213: PUSH
50214: LD_VAR 0 6
50218: PUSH
50219: LD_VAR 0 7
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: ST_TO_ADDR
// end ;
50228: LD_VAR 0 5
50232: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
50233: LD_INT 0
50235: PPUSH
50236: PPUSH
50237: PPUSH
50238: PPUSH
// task := GetTaskList ( unit ) ;
50239: LD_ADDR_VAR 0 7
50243: PUSH
50244: LD_VAR 0 1
50248: PPUSH
50249: CALL_OW 437
50253: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
50254: LD_VAR 0 7
50258: NOT
50259: PUSH
50260: LD_VAR 0 1
50264: PPUSH
50265: LD_VAR 0 2
50269: PPUSH
50270: CALL_OW 308
50274: NOT
50275: AND
50276: IFFALSE 50280
// exit ;
50278: GO 50398
// if IsInArea ( unit , area ) then
50280: LD_VAR 0 1
50284: PPUSH
50285: LD_VAR 0 2
50289: PPUSH
50290: CALL_OW 308
50294: IFFALSE 50312
// begin ComMoveToArea ( unit , goAway ) ;
50296: LD_VAR 0 1
50300: PPUSH
50301: LD_VAR 0 3
50305: PPUSH
50306: CALL_OW 113
// exit ;
50310: GO 50398
// end ; if task [ 1 ] [ 1 ] <> M then
50312: LD_VAR 0 7
50316: PUSH
50317: LD_INT 1
50319: ARRAY
50320: PUSH
50321: LD_INT 1
50323: ARRAY
50324: PUSH
50325: LD_STRING M
50327: NONEQUAL
50328: IFFALSE 50332
// exit ;
50330: GO 50398
// x := task [ 1 ] [ 2 ] ;
50332: LD_ADDR_VAR 0 5
50336: PUSH
50337: LD_VAR 0 7
50341: PUSH
50342: LD_INT 1
50344: ARRAY
50345: PUSH
50346: LD_INT 2
50348: ARRAY
50349: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
50350: LD_ADDR_VAR 0 6
50354: PUSH
50355: LD_VAR 0 7
50359: PUSH
50360: LD_INT 1
50362: ARRAY
50363: PUSH
50364: LD_INT 3
50366: ARRAY
50367: ST_TO_ADDR
// if InArea ( x , y , area ) then
50368: LD_VAR 0 5
50372: PPUSH
50373: LD_VAR 0 6
50377: PPUSH
50378: LD_VAR 0 2
50382: PPUSH
50383: CALL_OW 309
50387: IFFALSE 50398
// ComStop ( unit ) ;
50389: LD_VAR 0 1
50393: PPUSH
50394: CALL_OW 141
// end ;
50398: LD_VAR 0 4
50402: RET
// export function Abs ( value ) ; begin
50403: LD_INT 0
50405: PPUSH
// result := value ;
50406: LD_ADDR_VAR 0 2
50410: PUSH
50411: LD_VAR 0 1
50415: ST_TO_ADDR
// if value < 0 then
50416: LD_VAR 0 1
50420: PUSH
50421: LD_INT 0
50423: LESS
50424: IFFALSE 50441
// result := value * - 1 ;
50426: LD_ADDR_VAR 0 2
50430: PUSH
50431: LD_VAR 0 1
50435: PUSH
50436: LD_INT 1
50438: NEG
50439: MUL
50440: ST_TO_ADDR
// end ;
50441: LD_VAR 0 2
50445: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
50446: LD_INT 0
50448: PPUSH
50449: PPUSH
50450: PPUSH
50451: PPUSH
50452: PPUSH
50453: PPUSH
50454: PPUSH
50455: PPUSH
// if not unit or not building then
50456: LD_VAR 0 1
50460: NOT
50461: PUSH
50462: LD_VAR 0 2
50466: NOT
50467: OR
50468: IFFALSE 50472
// exit ;
50470: GO 50698
// x := GetX ( building ) ;
50472: LD_ADDR_VAR 0 4
50476: PUSH
50477: LD_VAR 0 2
50481: PPUSH
50482: CALL_OW 250
50486: ST_TO_ADDR
// y := GetY ( building ) ;
50487: LD_ADDR_VAR 0 6
50491: PUSH
50492: LD_VAR 0 2
50496: PPUSH
50497: CALL_OW 251
50501: ST_TO_ADDR
// d := GetDir ( building ) ;
50502: LD_ADDR_VAR 0 8
50506: PUSH
50507: LD_VAR 0 2
50511: PPUSH
50512: CALL_OW 254
50516: ST_TO_ADDR
// r := 4 ;
50517: LD_ADDR_VAR 0 9
50521: PUSH
50522: LD_INT 4
50524: ST_TO_ADDR
// for i := 1 to 5 do
50525: LD_ADDR_VAR 0 10
50529: PUSH
50530: DOUBLE
50531: LD_INT 1
50533: DEC
50534: ST_TO_ADDR
50535: LD_INT 5
50537: PUSH
50538: FOR_TO
50539: IFFALSE 50696
// begin _x := ShiftX ( x , d , r + i ) ;
50541: LD_ADDR_VAR 0 5
50545: PUSH
50546: LD_VAR 0 4
50550: PPUSH
50551: LD_VAR 0 8
50555: PPUSH
50556: LD_VAR 0 9
50560: PUSH
50561: LD_VAR 0 10
50565: PLUS
50566: PPUSH
50567: CALL_OW 272
50571: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
50572: LD_ADDR_VAR 0 7
50576: PUSH
50577: LD_VAR 0 6
50581: PPUSH
50582: LD_VAR 0 8
50586: PPUSH
50587: LD_VAR 0 9
50591: PUSH
50592: LD_VAR 0 10
50596: PLUS
50597: PPUSH
50598: CALL_OW 273
50602: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
50603: LD_VAR 0 5
50607: PPUSH
50608: LD_VAR 0 7
50612: PPUSH
50613: CALL_OW 488
50617: PUSH
50618: LD_VAR 0 5
50622: PPUSH
50623: LD_VAR 0 7
50627: PPUSH
50628: CALL_OW 428
50632: PPUSH
50633: CALL_OW 247
50637: PUSH
50638: LD_INT 3
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: IN
50648: NOT
50649: AND
50650: IFFALSE 50694
// begin ComMoveXY ( unit , _x , _y ) ;
50652: LD_VAR 0 1
50656: PPUSH
50657: LD_VAR 0 5
50661: PPUSH
50662: LD_VAR 0 7
50666: PPUSH
50667: CALL_OW 111
// result := [ _x , _y ] ;
50671: LD_ADDR_VAR 0 3
50675: PUSH
50676: LD_VAR 0 5
50680: PUSH
50681: LD_VAR 0 7
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: ST_TO_ADDR
// exit ;
50690: POP
50691: POP
50692: GO 50698
// end ; end ;
50694: GO 50538
50696: POP
50697: POP
// end ;
50698: LD_VAR 0 3
50702: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
50703: LD_INT 0
50705: PPUSH
50706: PPUSH
50707: PPUSH
// result := 0 ;
50708: LD_ADDR_VAR 0 3
50712: PUSH
50713: LD_INT 0
50715: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
50716: LD_VAR 0 1
50720: PUSH
50721: LD_INT 0
50723: LESS
50724: PUSH
50725: LD_VAR 0 1
50729: PUSH
50730: LD_INT 8
50732: GREATER
50733: OR
50734: PUSH
50735: LD_VAR 0 2
50739: PUSH
50740: LD_INT 0
50742: LESS
50743: OR
50744: PUSH
50745: LD_VAR 0 2
50749: PUSH
50750: LD_INT 8
50752: GREATER
50753: OR
50754: IFFALSE 50758
// exit ;
50756: GO 50833
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
50758: LD_ADDR_VAR 0 4
50762: PUSH
50763: LD_INT 22
50765: PUSH
50766: LD_VAR 0 2
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PPUSH
50775: CALL_OW 69
50779: PUSH
50780: FOR_IN
50781: IFFALSE 50831
// begin un := UnitShoot ( i ) ;
50783: LD_ADDR_VAR 0 5
50787: PUSH
50788: LD_VAR 0 4
50792: PPUSH
50793: CALL_OW 504
50797: ST_TO_ADDR
// if GetSide ( un ) = side1 then
50798: LD_VAR 0 5
50802: PPUSH
50803: CALL_OW 255
50807: PUSH
50808: LD_VAR 0 1
50812: EQUAL
50813: IFFALSE 50829
// begin result := un ;
50815: LD_ADDR_VAR 0 3
50819: PUSH
50820: LD_VAR 0 5
50824: ST_TO_ADDR
// exit ;
50825: POP
50826: POP
50827: GO 50833
// end ; end ;
50829: GO 50780
50831: POP
50832: POP
// end ;
50833: LD_VAR 0 3
50837: RET
// export function GetCargoBay ( units ) ; begin
50838: LD_INT 0
50840: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
50841: LD_ADDR_VAR 0 2
50845: PUSH
50846: LD_VAR 0 1
50850: PPUSH
50851: LD_INT 2
50853: PUSH
50854: LD_INT 34
50856: PUSH
50857: LD_INT 12
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 34
50866: PUSH
50867: LD_INT 51
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 34
50876: PUSH
50877: LD_INT 32
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 34
50886: PUSH
50887: LD_EXP 96
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: PPUSH
50903: CALL_OW 72
50907: ST_TO_ADDR
// end ;
50908: LD_VAR 0 2
50912: RET
// export function Negate ( value ) ; begin
50913: LD_INT 0
50915: PPUSH
// result := not value ;
50916: LD_ADDR_VAR 0 2
50920: PUSH
50921: LD_VAR 0 1
50925: NOT
50926: ST_TO_ADDR
// end ;
50927: LD_VAR 0 2
50931: RET
// export function Inc ( value ) ; begin
50932: LD_INT 0
50934: PPUSH
// result := value + 1 ;
50935: LD_ADDR_VAR 0 2
50939: PUSH
50940: LD_VAR 0 1
50944: PUSH
50945: LD_INT 1
50947: PLUS
50948: ST_TO_ADDR
// end ;
50949: LD_VAR 0 2
50953: RET
// export function Dec ( value ) ; begin
50954: LD_INT 0
50956: PPUSH
// result := value - 1 ;
50957: LD_ADDR_VAR 0 2
50961: PUSH
50962: LD_VAR 0 1
50966: PUSH
50967: LD_INT 1
50969: MINUS
50970: ST_TO_ADDR
// end ;
50971: LD_VAR 0 2
50975: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
50976: LD_INT 0
50978: PPUSH
50979: PPUSH
50980: PPUSH
50981: PPUSH
50982: PPUSH
50983: PPUSH
50984: PPUSH
50985: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
50986: LD_VAR 0 1
50990: PPUSH
50991: LD_VAR 0 2
50995: PPUSH
50996: CALL_OW 488
51000: NOT
51001: PUSH
51002: LD_VAR 0 3
51006: PPUSH
51007: LD_VAR 0 4
51011: PPUSH
51012: CALL_OW 488
51016: NOT
51017: OR
51018: IFFALSE 51031
// begin result := - 1 ;
51020: LD_ADDR_VAR 0 5
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: ST_TO_ADDR
// exit ;
51029: GO 51266
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
51031: LD_ADDR_VAR 0 12
51035: PUSH
51036: LD_VAR 0 1
51040: PPUSH
51041: LD_VAR 0 2
51045: PPUSH
51046: LD_VAR 0 3
51050: PPUSH
51051: LD_VAR 0 4
51055: PPUSH
51056: CALL 50114 0 4
51060: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
51061: LD_ADDR_VAR 0 11
51065: PUSH
51066: LD_VAR 0 1
51070: PPUSH
51071: LD_VAR 0 2
51075: PPUSH
51076: LD_VAR 0 12
51080: PUSH
51081: LD_INT 1
51083: ARRAY
51084: PPUSH
51085: LD_VAR 0 12
51089: PUSH
51090: LD_INT 2
51092: ARRAY
51093: PPUSH
51094: CALL_OW 298
51098: ST_TO_ADDR
// distance := 9999 ;
51099: LD_ADDR_VAR 0 10
51103: PUSH
51104: LD_INT 9999
51106: ST_TO_ADDR
// for i := 0 to 5 do
51107: LD_ADDR_VAR 0 6
51111: PUSH
51112: DOUBLE
51113: LD_INT 0
51115: DEC
51116: ST_TO_ADDR
51117: LD_INT 5
51119: PUSH
51120: FOR_TO
51121: IFFALSE 51264
// begin _x := ShiftX ( x1 , i , centerDist ) ;
51123: LD_ADDR_VAR 0 7
51127: PUSH
51128: LD_VAR 0 1
51132: PPUSH
51133: LD_VAR 0 6
51137: PPUSH
51138: LD_VAR 0 11
51142: PPUSH
51143: CALL_OW 272
51147: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
51148: LD_ADDR_VAR 0 8
51152: PUSH
51153: LD_VAR 0 2
51157: PPUSH
51158: LD_VAR 0 6
51162: PPUSH
51163: LD_VAR 0 11
51167: PPUSH
51168: CALL_OW 273
51172: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51173: LD_VAR 0 7
51177: PPUSH
51178: LD_VAR 0 8
51182: PPUSH
51183: CALL_OW 488
51187: NOT
51188: IFFALSE 51192
// continue ;
51190: GO 51120
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
51192: LD_ADDR_VAR 0 9
51196: PUSH
51197: LD_VAR 0 12
51201: PUSH
51202: LD_INT 1
51204: ARRAY
51205: PPUSH
51206: LD_VAR 0 12
51210: PUSH
51211: LD_INT 2
51213: ARRAY
51214: PPUSH
51215: LD_VAR 0 7
51219: PPUSH
51220: LD_VAR 0 8
51224: PPUSH
51225: CALL_OW 298
51229: ST_TO_ADDR
// if tmp < distance then
51230: LD_VAR 0 9
51234: PUSH
51235: LD_VAR 0 10
51239: LESS
51240: IFFALSE 51262
// begin result := i ;
51242: LD_ADDR_VAR 0 5
51246: PUSH
51247: LD_VAR 0 6
51251: ST_TO_ADDR
// distance := tmp ;
51252: LD_ADDR_VAR 0 10
51256: PUSH
51257: LD_VAR 0 9
51261: ST_TO_ADDR
// end ; end ;
51262: GO 51120
51264: POP
51265: POP
// end ;
51266: LD_VAR 0 5
51270: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51271: LD_INT 0
51273: PPUSH
51274: PPUSH
// if not driver or not IsInUnit ( driver ) then
51275: LD_VAR 0 1
51279: NOT
51280: PUSH
51281: LD_VAR 0 1
51285: PPUSH
51286: CALL_OW 310
51290: NOT
51291: OR
51292: IFFALSE 51296
// exit ;
51294: GO 51386
// vehicle := IsInUnit ( driver ) ;
51296: LD_ADDR_VAR 0 3
51300: PUSH
51301: LD_VAR 0 1
51305: PPUSH
51306: CALL_OW 310
51310: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51311: LD_VAR 0 1
51315: PPUSH
51316: LD_STRING \
51318: PUSH
51319: LD_INT 0
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: PUSH
51346: LD_STRING E
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: LD_VAR 0 3
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PPUSH
51382: CALL_OW 446
// end ;
51386: LD_VAR 0 2
51390: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51391: LD_INT 0
51393: PPUSH
51394: PPUSH
// if not driver or not IsInUnit ( driver ) then
51395: LD_VAR 0 1
51399: NOT
51400: PUSH
51401: LD_VAR 0 1
51405: PPUSH
51406: CALL_OW 310
51410: NOT
51411: OR
51412: IFFALSE 51416
// exit ;
51414: GO 51506
// vehicle := IsInUnit ( driver ) ;
51416: LD_ADDR_VAR 0 3
51420: PUSH
51421: LD_VAR 0 1
51425: PPUSH
51426: CALL_OW 310
51430: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51431: LD_VAR 0 1
51435: PPUSH
51436: LD_STRING \
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: PUSH
51466: LD_STRING E
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: LD_VAR 0 3
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PPUSH
51502: CALL_OW 447
// end ;
51506: LD_VAR 0 2
51510: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
51511: LD_INT 0
51513: PPUSH
51514: PPUSH
51515: PPUSH
// tmp := [ ] ;
51516: LD_ADDR_VAR 0 5
51520: PUSH
51521: EMPTY
51522: ST_TO_ADDR
// for i in units do
51523: LD_ADDR_VAR 0 4
51527: PUSH
51528: LD_VAR 0 1
51532: PUSH
51533: FOR_IN
51534: IFFALSE 51572
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
51536: LD_ADDR_VAR 0 5
51540: PUSH
51541: LD_VAR 0 5
51545: PPUSH
51546: LD_VAR 0 5
51550: PUSH
51551: LD_INT 1
51553: PLUS
51554: PPUSH
51555: LD_VAR 0 4
51559: PPUSH
51560: CALL_OW 256
51564: PPUSH
51565: CALL_OW 2
51569: ST_TO_ADDR
51570: GO 51533
51572: POP
51573: POP
// if not tmp then
51574: LD_VAR 0 5
51578: NOT
51579: IFFALSE 51583
// exit ;
51581: GO 51631
// if asc then
51583: LD_VAR 0 2
51587: IFFALSE 51611
// result := SortListByListAsc ( units , tmp ) else
51589: LD_ADDR_VAR 0 3
51593: PUSH
51594: LD_VAR 0 1
51598: PPUSH
51599: LD_VAR 0 5
51603: PPUSH
51604: CALL_OW 76
51608: ST_TO_ADDR
51609: GO 51631
// result := SortListByListDesc ( units , tmp ) ;
51611: LD_ADDR_VAR 0 3
51615: PUSH
51616: LD_VAR 0 1
51620: PPUSH
51621: LD_VAR 0 5
51625: PPUSH
51626: CALL_OW 77
51630: ST_TO_ADDR
// end ;
51631: LD_VAR 0 3
51635: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
51636: LD_INT 0
51638: PPUSH
51639: PPUSH
// task := GetTaskList ( mech ) ;
51640: LD_ADDR_VAR 0 4
51644: PUSH
51645: LD_VAR 0 1
51649: PPUSH
51650: CALL_OW 437
51654: ST_TO_ADDR
// if not task then
51655: LD_VAR 0 4
51659: NOT
51660: IFFALSE 51664
// exit ;
51662: GO 51706
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
51664: LD_ADDR_VAR 0 3
51668: PUSH
51669: LD_VAR 0 4
51673: PUSH
51674: LD_INT 1
51676: ARRAY
51677: PUSH
51678: LD_INT 1
51680: ARRAY
51681: PUSH
51682: LD_STRING r
51684: EQUAL
51685: PUSH
51686: LD_VAR 0 4
51690: PUSH
51691: LD_INT 1
51693: ARRAY
51694: PUSH
51695: LD_INT 4
51697: ARRAY
51698: PUSH
51699: LD_VAR 0 2
51703: EQUAL
51704: AND
51705: ST_TO_ADDR
// end ;
51706: LD_VAR 0 3
51710: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
51711: LD_INT 0
51713: PPUSH
// SetDir ( unit , d ) ;
51714: LD_VAR 0 1
51718: PPUSH
51719: LD_VAR 0 4
51723: PPUSH
51724: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
51728: LD_VAR 0 1
51732: PPUSH
51733: LD_VAR 0 2
51737: PPUSH
51738: LD_VAR 0 3
51742: PPUSH
51743: LD_VAR 0 5
51747: PPUSH
51748: CALL_OW 48
// end ;
51752: LD_VAR 0 6
51756: RET
// export function ToNaturalNumber ( number ) ; begin
51757: LD_INT 0
51759: PPUSH
// result := number div 1 ;
51760: LD_ADDR_VAR 0 2
51764: PUSH
51765: LD_VAR 0 1
51769: PUSH
51770: LD_INT 1
51772: DIV
51773: ST_TO_ADDR
// if number < 0 then
51774: LD_VAR 0 1
51778: PUSH
51779: LD_INT 0
51781: LESS
51782: IFFALSE 51792
// result := 0 ;
51784: LD_ADDR_VAR 0 2
51788: PUSH
51789: LD_INT 0
51791: ST_TO_ADDR
// end ;
51792: LD_VAR 0 2
51796: RET
// export function SortByClass ( units , class ) ; var un ; begin
51797: LD_INT 0
51799: PPUSH
51800: PPUSH
// if not units or not class then
51801: LD_VAR 0 1
51805: NOT
51806: PUSH
51807: LD_VAR 0 2
51811: NOT
51812: OR
51813: IFFALSE 51817
// exit ;
51815: GO 51912
// result := [ ] ;
51817: LD_ADDR_VAR 0 3
51821: PUSH
51822: EMPTY
51823: ST_TO_ADDR
// for un in units do
51824: LD_ADDR_VAR 0 4
51828: PUSH
51829: LD_VAR 0 1
51833: PUSH
51834: FOR_IN
51835: IFFALSE 51910
// if GetClass ( un ) = class then
51837: LD_VAR 0 4
51841: PPUSH
51842: CALL_OW 257
51846: PUSH
51847: LD_VAR 0 2
51851: EQUAL
51852: IFFALSE 51879
// result := Insert ( result , 1 , un ) else
51854: LD_ADDR_VAR 0 3
51858: PUSH
51859: LD_VAR 0 3
51863: PPUSH
51864: LD_INT 1
51866: PPUSH
51867: LD_VAR 0 4
51871: PPUSH
51872: CALL_OW 2
51876: ST_TO_ADDR
51877: GO 51908
// result := Replace ( result , result + 1 , un ) ;
51879: LD_ADDR_VAR 0 3
51883: PUSH
51884: LD_VAR 0 3
51888: PPUSH
51889: LD_VAR 0 3
51893: PUSH
51894: LD_INT 1
51896: PLUS
51897: PPUSH
51898: LD_VAR 0 4
51902: PPUSH
51903: CALL_OW 1
51907: ST_TO_ADDR
51908: GO 51834
51910: POP
51911: POP
// end ;
51912: LD_VAR 0 3
51916: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
51917: LD_INT 0
51919: PPUSH
51920: PPUSH
51921: PPUSH
51922: PPUSH
51923: PPUSH
51924: PPUSH
51925: PPUSH
// result := [ ] ;
51926: LD_ADDR_VAR 0 4
51930: PUSH
51931: EMPTY
51932: ST_TO_ADDR
// if x - r < 0 then
51933: LD_VAR 0 1
51937: PUSH
51938: LD_VAR 0 3
51942: MINUS
51943: PUSH
51944: LD_INT 0
51946: LESS
51947: IFFALSE 51959
// min_x := 0 else
51949: LD_ADDR_VAR 0 8
51953: PUSH
51954: LD_INT 0
51956: ST_TO_ADDR
51957: GO 51975
// min_x := x - r ;
51959: LD_ADDR_VAR 0 8
51963: PUSH
51964: LD_VAR 0 1
51968: PUSH
51969: LD_VAR 0 3
51973: MINUS
51974: ST_TO_ADDR
// if y - r < 0 then
51975: LD_VAR 0 2
51979: PUSH
51980: LD_VAR 0 3
51984: MINUS
51985: PUSH
51986: LD_INT 0
51988: LESS
51989: IFFALSE 52001
// min_y := 0 else
51991: LD_ADDR_VAR 0 7
51995: PUSH
51996: LD_INT 0
51998: ST_TO_ADDR
51999: GO 52017
// min_y := y - r ;
52001: LD_ADDR_VAR 0 7
52005: PUSH
52006: LD_VAR 0 2
52010: PUSH
52011: LD_VAR 0 3
52015: MINUS
52016: ST_TO_ADDR
// max_x := x + r ;
52017: LD_ADDR_VAR 0 9
52021: PUSH
52022: LD_VAR 0 1
52026: PUSH
52027: LD_VAR 0 3
52031: PLUS
52032: ST_TO_ADDR
// max_y := y + r ;
52033: LD_ADDR_VAR 0 10
52037: PUSH
52038: LD_VAR 0 2
52042: PUSH
52043: LD_VAR 0 3
52047: PLUS
52048: ST_TO_ADDR
// for _x = min_x to max_x do
52049: LD_ADDR_VAR 0 5
52053: PUSH
52054: DOUBLE
52055: LD_VAR 0 8
52059: DEC
52060: ST_TO_ADDR
52061: LD_VAR 0 9
52065: PUSH
52066: FOR_TO
52067: IFFALSE 52168
// for _y = min_y to max_y do
52069: LD_ADDR_VAR 0 6
52073: PUSH
52074: DOUBLE
52075: LD_VAR 0 7
52079: DEC
52080: ST_TO_ADDR
52081: LD_VAR 0 10
52085: PUSH
52086: FOR_TO
52087: IFFALSE 52164
// begin if not ValidHex ( _x , _y ) then
52089: LD_VAR 0 5
52093: PPUSH
52094: LD_VAR 0 6
52098: PPUSH
52099: CALL_OW 488
52103: NOT
52104: IFFALSE 52108
// continue ;
52106: GO 52086
// if GetResourceTypeXY ( _x , _y ) then
52108: LD_VAR 0 5
52112: PPUSH
52113: LD_VAR 0 6
52117: PPUSH
52118: CALL_OW 283
52122: IFFALSE 52162
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
52124: LD_ADDR_VAR 0 4
52128: PUSH
52129: LD_VAR 0 4
52133: PPUSH
52134: LD_VAR 0 4
52138: PUSH
52139: LD_INT 1
52141: PLUS
52142: PPUSH
52143: LD_VAR 0 5
52147: PUSH
52148: LD_VAR 0 6
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PPUSH
52157: CALL_OW 1
52161: ST_TO_ADDR
// end ;
52162: GO 52086
52164: POP
52165: POP
52166: GO 52066
52168: POP
52169: POP
// end ;
52170: LD_VAR 0 4
52174: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
52175: LD_INT 0
52177: PPUSH
52178: PPUSH
52179: PPUSH
52180: PPUSH
52181: PPUSH
52182: PPUSH
52183: PPUSH
52184: PPUSH
// if not units then
52185: LD_VAR 0 1
52189: NOT
52190: IFFALSE 52194
// exit ;
52192: GO 52705
// result := UnitFilter ( units , [ f_ok ] ) ;
52194: LD_ADDR_VAR 0 3
52198: PUSH
52199: LD_VAR 0 1
52203: PPUSH
52204: LD_INT 50
52206: PUSH
52207: EMPTY
52208: LIST
52209: PPUSH
52210: CALL_OW 72
52214: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
52215: LD_ADDR_VAR 0 8
52219: PUSH
52220: LD_VAR 0 1
52224: PUSH
52225: LD_INT 1
52227: ARRAY
52228: PPUSH
52229: CALL_OW 255
52233: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
52234: LD_ADDR_VAR 0 10
52238: PUSH
52239: LD_INT 29
52241: PUSH
52242: LD_EXP 99
52246: PUSH
52247: LD_INT 49
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: LIST
52254: ST_TO_ADDR
// if not result then
52255: LD_VAR 0 3
52259: NOT
52260: IFFALSE 52264
// exit ;
52262: GO 52705
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
52264: LD_ADDR_VAR 0 5
52268: PUSH
52269: LD_INT 81
52271: PUSH
52272: LD_VAR 0 8
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PPUSH
52281: CALL_OW 69
52285: ST_TO_ADDR
// for i in result do
52286: LD_ADDR_VAR 0 4
52290: PUSH
52291: LD_VAR 0 3
52295: PUSH
52296: FOR_IN
52297: IFFALSE 52703
// begin tag := GetTag ( i ) + 1 ;
52299: LD_ADDR_VAR 0 9
52303: PUSH
52304: LD_VAR 0 4
52308: PPUSH
52309: CALL_OW 110
52313: PUSH
52314: LD_INT 1
52316: PLUS
52317: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
52318: LD_ADDR_VAR 0 7
52322: PUSH
52323: LD_VAR 0 4
52327: PPUSH
52328: CALL_OW 250
52332: PPUSH
52333: LD_VAR 0 4
52337: PPUSH
52338: CALL_OW 251
52342: PPUSH
52343: LD_INT 6
52345: PPUSH
52346: CALL 51917 0 3
52350: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
52351: LD_VAR 0 7
52355: PUSH
52356: LD_VAR 0 4
52360: PPUSH
52361: CALL_OW 264
52365: PUSH
52366: LD_VAR 0 10
52370: IN
52371: NOT
52372: AND
52373: IFFALSE 52412
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
52375: LD_VAR 0 4
52379: PPUSH
52380: LD_VAR 0 7
52384: PUSH
52385: LD_INT 1
52387: ARRAY
52388: PUSH
52389: LD_INT 1
52391: ARRAY
52392: PPUSH
52393: LD_VAR 0 7
52397: PUSH
52398: LD_INT 1
52400: ARRAY
52401: PUSH
52402: LD_INT 2
52404: ARRAY
52405: PPUSH
52406: CALL_OW 116
52410: GO 52701
// if path > tag then
52412: LD_VAR 0 2
52416: PUSH
52417: LD_VAR 0 9
52421: GREATER
52422: IFFALSE 52630
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
52424: LD_ADDR_VAR 0 6
52428: PUSH
52429: LD_VAR 0 5
52433: PPUSH
52434: LD_INT 91
52436: PUSH
52437: LD_VAR 0 4
52441: PUSH
52442: LD_INT 12
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: LIST
52449: PPUSH
52450: CALL_OW 72
52454: ST_TO_ADDR
// if nearEnemy then
52455: LD_VAR 0 6
52459: IFFALSE 52528
// begin if GetWeapon ( i ) = ru_time_lapser then
52461: LD_VAR 0 4
52465: PPUSH
52466: CALL_OW 264
52470: PUSH
52471: LD_INT 49
52473: EQUAL
52474: IFFALSE 52502
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
52476: LD_VAR 0 4
52480: PPUSH
52481: LD_VAR 0 6
52485: PPUSH
52486: LD_VAR 0 4
52490: PPUSH
52491: CALL_OW 74
52495: PPUSH
52496: CALL_OW 112
52500: GO 52526
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
52502: LD_VAR 0 4
52506: PPUSH
52507: LD_VAR 0 6
52511: PPUSH
52512: LD_VAR 0 4
52516: PPUSH
52517: CALL_OW 74
52521: PPUSH
52522: CALL_OW 115
// end else
52526: GO 52628
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52528: LD_VAR 0 4
52532: PPUSH
52533: LD_VAR 0 2
52537: PUSH
52538: LD_VAR 0 9
52542: ARRAY
52543: PUSH
52544: LD_INT 1
52546: ARRAY
52547: PPUSH
52548: LD_VAR 0 2
52552: PUSH
52553: LD_VAR 0 9
52557: ARRAY
52558: PUSH
52559: LD_INT 2
52561: ARRAY
52562: PPUSH
52563: CALL_OW 297
52567: PUSH
52568: LD_INT 6
52570: GREATER
52571: IFFALSE 52614
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
52573: LD_VAR 0 4
52577: PPUSH
52578: LD_VAR 0 2
52582: PUSH
52583: LD_VAR 0 9
52587: ARRAY
52588: PUSH
52589: LD_INT 1
52591: ARRAY
52592: PPUSH
52593: LD_VAR 0 2
52597: PUSH
52598: LD_VAR 0 9
52602: ARRAY
52603: PUSH
52604: LD_INT 2
52606: ARRAY
52607: PPUSH
52608: CALL_OW 114
52612: GO 52628
// SetTag ( i , tag ) ;
52614: LD_VAR 0 4
52618: PPUSH
52619: LD_VAR 0 9
52623: PPUSH
52624: CALL_OW 109
// end else
52628: GO 52701
// if enemy then
52630: LD_VAR 0 5
52634: IFFALSE 52701
// begin if GetWeapon ( i ) = ru_time_lapser then
52636: LD_VAR 0 4
52640: PPUSH
52641: CALL_OW 264
52645: PUSH
52646: LD_INT 49
52648: EQUAL
52649: IFFALSE 52677
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
52651: LD_VAR 0 4
52655: PPUSH
52656: LD_VAR 0 5
52660: PPUSH
52661: LD_VAR 0 4
52665: PPUSH
52666: CALL_OW 74
52670: PPUSH
52671: CALL_OW 112
52675: GO 52701
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
52677: LD_VAR 0 4
52681: PPUSH
52682: LD_VAR 0 5
52686: PPUSH
52687: LD_VAR 0 4
52691: PPUSH
52692: CALL_OW 74
52696: PPUSH
52697: CALL_OW 115
// end ; end ;
52701: GO 52296
52703: POP
52704: POP
// end ;
52705: LD_VAR 0 3
52709: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
52710: LD_INT 0
52712: PPUSH
52713: PPUSH
52714: PPUSH
// if not unit or IsInUnit ( unit ) then
52715: LD_VAR 0 1
52719: NOT
52720: PUSH
52721: LD_VAR 0 1
52725: PPUSH
52726: CALL_OW 310
52730: OR
52731: IFFALSE 52735
// exit ;
52733: GO 52826
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
52735: LD_ADDR_VAR 0 4
52739: PUSH
52740: LD_VAR 0 1
52744: PPUSH
52745: CALL_OW 250
52749: PPUSH
52750: LD_VAR 0 2
52754: PPUSH
52755: LD_INT 1
52757: PPUSH
52758: CALL_OW 272
52762: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
52763: LD_ADDR_VAR 0 5
52767: PUSH
52768: LD_VAR 0 1
52772: PPUSH
52773: CALL_OW 251
52777: PPUSH
52778: LD_VAR 0 2
52782: PPUSH
52783: LD_INT 1
52785: PPUSH
52786: CALL_OW 273
52790: ST_TO_ADDR
// if ValidHex ( x , y ) then
52791: LD_VAR 0 4
52795: PPUSH
52796: LD_VAR 0 5
52800: PPUSH
52801: CALL_OW 488
52805: IFFALSE 52826
// ComTurnXY ( unit , x , y ) ;
52807: LD_VAR 0 1
52811: PPUSH
52812: LD_VAR 0 4
52816: PPUSH
52817: LD_VAR 0 5
52821: PPUSH
52822: CALL_OW 118
// end ;
52826: LD_VAR 0 3
52830: RET
// export function SeeUnits ( side , units ) ; var i ; begin
52831: LD_INT 0
52833: PPUSH
52834: PPUSH
// result := false ;
52835: LD_ADDR_VAR 0 3
52839: PUSH
52840: LD_INT 0
52842: ST_TO_ADDR
// if not units then
52843: LD_VAR 0 2
52847: NOT
52848: IFFALSE 52852
// exit ;
52850: GO 52897
// for i in units do
52852: LD_ADDR_VAR 0 4
52856: PUSH
52857: LD_VAR 0 2
52861: PUSH
52862: FOR_IN
52863: IFFALSE 52895
// if See ( side , i ) then
52865: LD_VAR 0 1
52869: PPUSH
52870: LD_VAR 0 4
52874: PPUSH
52875: CALL_OW 292
52879: IFFALSE 52893
// begin result := true ;
52881: LD_ADDR_VAR 0 3
52885: PUSH
52886: LD_INT 1
52888: ST_TO_ADDR
// exit ;
52889: POP
52890: POP
52891: GO 52897
// end ;
52893: GO 52862
52895: POP
52896: POP
// end ;
52897: LD_VAR 0 3
52901: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
52902: LD_INT 0
52904: PPUSH
52905: PPUSH
52906: PPUSH
52907: PPUSH
// if not unit or not points then
52908: LD_VAR 0 1
52912: NOT
52913: PUSH
52914: LD_VAR 0 2
52918: NOT
52919: OR
52920: IFFALSE 52924
// exit ;
52922: GO 53014
// dist := 99999 ;
52924: LD_ADDR_VAR 0 5
52928: PUSH
52929: LD_INT 99999
52931: ST_TO_ADDR
// for i in points do
52932: LD_ADDR_VAR 0 4
52936: PUSH
52937: LD_VAR 0 2
52941: PUSH
52942: FOR_IN
52943: IFFALSE 53012
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
52945: LD_ADDR_VAR 0 6
52949: PUSH
52950: LD_VAR 0 1
52954: PPUSH
52955: LD_VAR 0 4
52959: PUSH
52960: LD_INT 1
52962: ARRAY
52963: PPUSH
52964: LD_VAR 0 4
52968: PUSH
52969: LD_INT 2
52971: ARRAY
52972: PPUSH
52973: CALL_OW 297
52977: ST_TO_ADDR
// if tmpDist < dist then
52978: LD_VAR 0 6
52982: PUSH
52983: LD_VAR 0 5
52987: LESS
52988: IFFALSE 53010
// begin result := i ;
52990: LD_ADDR_VAR 0 3
52994: PUSH
52995: LD_VAR 0 4
52999: ST_TO_ADDR
// dist := tmpDist ;
53000: LD_ADDR_VAR 0 5
53004: PUSH
53005: LD_VAR 0 6
53009: ST_TO_ADDR
// end ; end ;
53010: GO 52942
53012: POP
53013: POP
// end ;
53014: LD_VAR 0 3
53018: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
53019: LD_INT 0
53021: PPUSH
// uc_side := side ;
53022: LD_ADDR_OWVAR 20
53026: PUSH
53027: LD_VAR 0 1
53031: ST_TO_ADDR
// uc_nation := 3 ;
53032: LD_ADDR_OWVAR 21
53036: PUSH
53037: LD_INT 3
53039: ST_TO_ADDR
// vc_chassis := 25 ;
53040: LD_ADDR_OWVAR 37
53044: PUSH
53045: LD_INT 25
53047: ST_TO_ADDR
// vc_engine := engine_siberite ;
53048: LD_ADDR_OWVAR 39
53052: PUSH
53053: LD_INT 3
53055: ST_TO_ADDR
// vc_control := control_computer ;
53056: LD_ADDR_OWVAR 38
53060: PUSH
53061: LD_INT 3
53063: ST_TO_ADDR
// vc_weapon := 59 ;
53064: LD_ADDR_OWVAR 40
53068: PUSH
53069: LD_INT 59
53071: ST_TO_ADDR
// result := CreateVehicle ;
53072: LD_ADDR_VAR 0 5
53076: PUSH
53077: CALL_OW 45
53081: ST_TO_ADDR
// SetDir ( result , d ) ;
53082: LD_VAR 0 5
53086: PPUSH
53087: LD_VAR 0 4
53091: PPUSH
53092: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
53096: LD_VAR 0 5
53100: PPUSH
53101: LD_VAR 0 2
53105: PPUSH
53106: LD_VAR 0 3
53110: PPUSH
53111: LD_INT 0
53113: PPUSH
53114: CALL_OW 48
// end ;
53118: LD_VAR 0 5
53122: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
53123: LD_INT 0
53125: PPUSH
53126: PPUSH
53127: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
53128: LD_ADDR_VAR 0 2
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
53151: LD_VAR 0 1
53155: NOT
53156: PUSH
53157: LD_VAR 0 1
53161: PPUSH
53162: CALL_OW 264
53166: PUSH
53167: LD_INT 12
53169: PUSH
53170: LD_INT 51
53172: PUSH
53173: LD_INT 32
53175: PUSH
53176: LD_EXP 96
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: IN
53187: NOT
53188: OR
53189: IFFALSE 53193
// exit ;
53191: GO 53291
// for i := 1 to 3 do
53193: LD_ADDR_VAR 0 3
53197: PUSH
53198: DOUBLE
53199: LD_INT 1
53201: DEC
53202: ST_TO_ADDR
53203: LD_INT 3
53205: PUSH
53206: FOR_TO
53207: IFFALSE 53289
// begin tmp := GetCargo ( cargo , i ) ;
53209: LD_ADDR_VAR 0 4
53213: PUSH
53214: LD_VAR 0 1
53218: PPUSH
53219: LD_VAR 0 3
53223: PPUSH
53224: CALL_OW 289
53228: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
53229: LD_ADDR_VAR 0 2
53233: PUSH
53234: LD_VAR 0 2
53238: PPUSH
53239: LD_VAR 0 3
53243: PPUSH
53244: LD_VAR 0 4
53248: PPUSH
53249: CALL_OW 1
53253: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
53254: LD_ADDR_VAR 0 2
53258: PUSH
53259: LD_VAR 0 2
53263: PPUSH
53264: LD_INT 4
53266: PPUSH
53267: LD_VAR 0 2
53271: PUSH
53272: LD_INT 4
53274: ARRAY
53275: PUSH
53276: LD_VAR 0 4
53280: PLUS
53281: PPUSH
53282: CALL_OW 1
53286: ST_TO_ADDR
// end ;
53287: GO 53206
53289: POP
53290: POP
// end ;
53291: LD_VAR 0 2
53295: RET
// export function Length ( array ) ; begin
53296: LD_INT 0
53298: PPUSH
// result := array + 0 ;
53299: LD_ADDR_VAR 0 2
53303: PUSH
53304: LD_VAR 0 1
53308: PUSH
53309: LD_INT 0
53311: PLUS
53312: ST_TO_ADDR
// end ;
53313: LD_VAR 0 2
53317: RET
// export function PrepareBuilding ( side , nation , level , typ , x , y , dir , isInBuildingStage ) ; begin
53318: LD_INT 0
53320: PPUSH
// uc_side := side ;
53321: LD_ADDR_OWVAR 20
53325: PUSH
53326: LD_VAR 0 1
53330: ST_TO_ADDR
// uc_nation := nation ;
53331: LD_ADDR_OWVAR 21
53335: PUSH
53336: LD_VAR 0 2
53340: ST_TO_ADDR
// bc_level := level ;
53341: LD_ADDR_OWVAR 43
53345: PUSH
53346: LD_VAR 0 3
53350: ST_TO_ADDR
// bc_type := typ ;
53351: LD_ADDR_OWVAR 42
53355: PUSH
53356: LD_VAR 0 4
53360: ST_TO_ADDR
// bc_kind1 := - 1 ;
53361: LD_ADDR_OWVAR 44
53365: PUSH
53366: LD_INT 1
53368: NEG
53369: ST_TO_ADDR
// bc_kind2 := - 1 ;
53370: LD_ADDR_OWVAR 45
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: ST_TO_ADDR
// result := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
53379: LD_ADDR_VAR 0 9
53383: PUSH
53384: LD_VAR 0 5
53388: PPUSH
53389: LD_VAR 0 6
53393: PPUSH
53394: LD_VAR 0 7
53398: PPUSH
53399: CALL_OW 47
53403: ST_TO_ADDR
// if isInBuildingStage then
53404: LD_VAR 0 8
53408: IFFALSE 53419
// SetBuildingStage ( result ) ;
53410: LD_VAR 0 9
53414: PPUSH
53415: CALL_OW 593
// end ;
53419: LD_VAR 0 9
53423: RET
// export function SayNoFaceRadio ( un , ident ) ; begin
53424: LD_INT 0
53426: PPUSH
// SayEx ( un , ident , false , true , true , false ) ;
53427: LD_VAR 0 1
53431: PPUSH
53432: LD_VAR 0 2
53436: PPUSH
53437: LD_INT 0
53439: PPUSH
53440: LD_INT 1
53442: PPUSH
53443: LD_INT 1
53445: PPUSH
53446: LD_INT 0
53448: PPUSH
53449: CALL_OW 587
// end ; end_of_file
53453: LD_VAR 0 3
53457: RET
// every 0 0$1 do
53458: GO 53460
53460: DISABLE
// begin enable ;
53461: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
53462: LD_STRING updateTimer(
53464: PUSH
53465: LD_OWVAR 1
53469: STR
53470: PUSH
53471: LD_STRING );
53473: STR
53474: PPUSH
53475: CALL_OW 559
// end ;
53479: END
// export function SOS_MapStart ( ) ; begin
53480: LD_INT 0
53482: PPUSH
// if streamModeActive then
53483: LD_EXP 115
53487: IFFALSE 53496
// DefineStreamItems ( true ) ;
53489: LD_INT 1
53491: PPUSH
53492: CALL 55146 0 1
// UpdateFactoryWaypoints ( ) ;
53496: CALL 68730 0 0
// end ;
53500: LD_VAR 0 1
53504: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
53505: LD_INT 0
53507: PPUSH
// if p2 = 100 then
53508: LD_VAR 0 2
53512: PUSH
53513: LD_INT 100
53515: EQUAL
53516: IFFALSE 54519
// begin if not StreamModeActive then
53518: LD_EXP 115
53522: NOT
53523: IFFALSE 53533
// StreamModeActive := true ;
53525: LD_ADDR_EXP 115
53529: PUSH
53530: LD_INT 1
53532: ST_TO_ADDR
// if p3 = 0 then
53533: LD_VAR 0 3
53537: PUSH
53538: LD_INT 0
53540: EQUAL
53541: IFFALSE 53547
// InitStreamMode ;
53543: CALL 54682 0 0
// if p3 = 1 then
53547: LD_VAR 0 3
53551: PUSH
53552: LD_INT 1
53554: EQUAL
53555: IFFALSE 53565
// sRocket := true ;
53557: LD_ADDR_EXP 120
53561: PUSH
53562: LD_INT 1
53564: ST_TO_ADDR
// if p3 = 2 then
53565: LD_VAR 0 3
53569: PUSH
53570: LD_INT 2
53572: EQUAL
53573: IFFALSE 53583
// sSpeed := true ;
53575: LD_ADDR_EXP 119
53579: PUSH
53580: LD_INT 1
53582: ST_TO_ADDR
// if p3 = 3 then
53583: LD_VAR 0 3
53587: PUSH
53588: LD_INT 3
53590: EQUAL
53591: IFFALSE 53601
// sEngine := true ;
53593: LD_ADDR_EXP 121
53597: PUSH
53598: LD_INT 1
53600: ST_TO_ADDR
// if p3 = 4 then
53601: LD_VAR 0 3
53605: PUSH
53606: LD_INT 4
53608: EQUAL
53609: IFFALSE 53619
// sSpec := true ;
53611: LD_ADDR_EXP 118
53615: PUSH
53616: LD_INT 1
53618: ST_TO_ADDR
// if p3 = 5 then
53619: LD_VAR 0 3
53623: PUSH
53624: LD_INT 5
53626: EQUAL
53627: IFFALSE 53637
// sLevel := true ;
53629: LD_ADDR_EXP 122
53633: PUSH
53634: LD_INT 1
53636: ST_TO_ADDR
// if p3 = 6 then
53637: LD_VAR 0 3
53641: PUSH
53642: LD_INT 6
53644: EQUAL
53645: IFFALSE 53655
// sArmoury := true ;
53647: LD_ADDR_EXP 123
53651: PUSH
53652: LD_INT 1
53654: ST_TO_ADDR
// if p3 = 7 then
53655: LD_VAR 0 3
53659: PUSH
53660: LD_INT 7
53662: EQUAL
53663: IFFALSE 53673
// sRadar := true ;
53665: LD_ADDR_EXP 124
53669: PUSH
53670: LD_INT 1
53672: ST_TO_ADDR
// if p3 = 8 then
53673: LD_VAR 0 3
53677: PUSH
53678: LD_INT 8
53680: EQUAL
53681: IFFALSE 53691
// sBunker := true ;
53683: LD_ADDR_EXP 125
53687: PUSH
53688: LD_INT 1
53690: ST_TO_ADDR
// if p3 = 9 then
53691: LD_VAR 0 3
53695: PUSH
53696: LD_INT 9
53698: EQUAL
53699: IFFALSE 53709
// sHack := true ;
53701: LD_ADDR_EXP 126
53705: PUSH
53706: LD_INT 1
53708: ST_TO_ADDR
// if p3 = 10 then
53709: LD_VAR 0 3
53713: PUSH
53714: LD_INT 10
53716: EQUAL
53717: IFFALSE 53727
// sFire := true ;
53719: LD_ADDR_EXP 127
53723: PUSH
53724: LD_INT 1
53726: ST_TO_ADDR
// if p3 = 11 then
53727: LD_VAR 0 3
53731: PUSH
53732: LD_INT 11
53734: EQUAL
53735: IFFALSE 53745
// sRefresh := true ;
53737: LD_ADDR_EXP 128
53741: PUSH
53742: LD_INT 1
53744: ST_TO_ADDR
// if p3 = 12 then
53745: LD_VAR 0 3
53749: PUSH
53750: LD_INT 12
53752: EQUAL
53753: IFFALSE 53763
// sExp := true ;
53755: LD_ADDR_EXP 129
53759: PUSH
53760: LD_INT 1
53762: ST_TO_ADDR
// if p3 = 13 then
53763: LD_VAR 0 3
53767: PUSH
53768: LD_INT 13
53770: EQUAL
53771: IFFALSE 53781
// sDepot := true ;
53773: LD_ADDR_EXP 130
53777: PUSH
53778: LD_INT 1
53780: ST_TO_ADDR
// if p3 = 14 then
53781: LD_VAR 0 3
53785: PUSH
53786: LD_INT 14
53788: EQUAL
53789: IFFALSE 53799
// sFlag := true ;
53791: LD_ADDR_EXP 131
53795: PUSH
53796: LD_INT 1
53798: ST_TO_ADDR
// if p3 = 15 then
53799: LD_VAR 0 3
53803: PUSH
53804: LD_INT 15
53806: EQUAL
53807: IFFALSE 53817
// sKamikadze := true ;
53809: LD_ADDR_EXP 139
53813: PUSH
53814: LD_INT 1
53816: ST_TO_ADDR
// if p3 = 16 then
53817: LD_VAR 0 3
53821: PUSH
53822: LD_INT 16
53824: EQUAL
53825: IFFALSE 53835
// sTroll := true ;
53827: LD_ADDR_EXP 140
53831: PUSH
53832: LD_INT 1
53834: ST_TO_ADDR
// if p3 = 17 then
53835: LD_VAR 0 3
53839: PUSH
53840: LD_INT 17
53842: EQUAL
53843: IFFALSE 53853
// sSlow := true ;
53845: LD_ADDR_EXP 141
53849: PUSH
53850: LD_INT 1
53852: ST_TO_ADDR
// if p3 = 18 then
53853: LD_VAR 0 3
53857: PUSH
53858: LD_INT 18
53860: EQUAL
53861: IFFALSE 53871
// sLack := true ;
53863: LD_ADDR_EXP 142
53867: PUSH
53868: LD_INT 1
53870: ST_TO_ADDR
// if p3 = 19 then
53871: LD_VAR 0 3
53875: PUSH
53876: LD_INT 19
53878: EQUAL
53879: IFFALSE 53889
// sTank := true ;
53881: LD_ADDR_EXP 144
53885: PUSH
53886: LD_INT 1
53888: ST_TO_ADDR
// if p3 = 20 then
53889: LD_VAR 0 3
53893: PUSH
53894: LD_INT 20
53896: EQUAL
53897: IFFALSE 53907
// sRemote := true ;
53899: LD_ADDR_EXP 145
53903: PUSH
53904: LD_INT 1
53906: ST_TO_ADDR
// if p3 = 21 then
53907: LD_VAR 0 3
53911: PUSH
53912: LD_INT 21
53914: EQUAL
53915: IFFALSE 53925
// sPowell := true ;
53917: LD_ADDR_EXP 146
53921: PUSH
53922: LD_INT 1
53924: ST_TO_ADDR
// if p3 = 22 then
53925: LD_VAR 0 3
53929: PUSH
53930: LD_INT 22
53932: EQUAL
53933: IFFALSE 53943
// sTeleport := true ;
53935: LD_ADDR_EXP 149
53939: PUSH
53940: LD_INT 1
53942: ST_TO_ADDR
// if p3 = 23 then
53943: LD_VAR 0 3
53947: PUSH
53948: LD_INT 23
53950: EQUAL
53951: IFFALSE 53961
// sOilTower := true ;
53953: LD_ADDR_EXP 151
53957: PUSH
53958: LD_INT 1
53960: ST_TO_ADDR
// if p3 = 24 then
53961: LD_VAR 0 3
53965: PUSH
53966: LD_INT 24
53968: EQUAL
53969: IFFALSE 53979
// sShovel := true ;
53971: LD_ADDR_EXP 152
53975: PUSH
53976: LD_INT 1
53978: ST_TO_ADDR
// if p3 = 25 then
53979: LD_VAR 0 3
53983: PUSH
53984: LD_INT 25
53986: EQUAL
53987: IFFALSE 53997
// sSheik := true ;
53989: LD_ADDR_EXP 153
53993: PUSH
53994: LD_INT 1
53996: ST_TO_ADDR
// if p3 = 26 then
53997: LD_VAR 0 3
54001: PUSH
54002: LD_INT 26
54004: EQUAL
54005: IFFALSE 54015
// sEarthquake := true ;
54007: LD_ADDR_EXP 155
54011: PUSH
54012: LD_INT 1
54014: ST_TO_ADDR
// if p3 = 27 then
54015: LD_VAR 0 3
54019: PUSH
54020: LD_INT 27
54022: EQUAL
54023: IFFALSE 54033
// sAI := true ;
54025: LD_ADDR_EXP 156
54029: PUSH
54030: LD_INT 1
54032: ST_TO_ADDR
// if p3 = 28 then
54033: LD_VAR 0 3
54037: PUSH
54038: LD_INT 28
54040: EQUAL
54041: IFFALSE 54051
// sCargo := true ;
54043: LD_ADDR_EXP 159
54047: PUSH
54048: LD_INT 1
54050: ST_TO_ADDR
// if p3 = 29 then
54051: LD_VAR 0 3
54055: PUSH
54056: LD_INT 29
54058: EQUAL
54059: IFFALSE 54069
// sDLaser := true ;
54061: LD_ADDR_EXP 160
54065: PUSH
54066: LD_INT 1
54068: ST_TO_ADDR
// if p3 = 30 then
54069: LD_VAR 0 3
54073: PUSH
54074: LD_INT 30
54076: EQUAL
54077: IFFALSE 54087
// sExchange := true ;
54079: LD_ADDR_EXP 161
54083: PUSH
54084: LD_INT 1
54086: ST_TO_ADDR
// if p3 = 31 then
54087: LD_VAR 0 3
54091: PUSH
54092: LD_INT 31
54094: EQUAL
54095: IFFALSE 54105
// sFac := true ;
54097: LD_ADDR_EXP 162
54101: PUSH
54102: LD_INT 1
54104: ST_TO_ADDR
// if p3 = 32 then
54105: LD_VAR 0 3
54109: PUSH
54110: LD_INT 32
54112: EQUAL
54113: IFFALSE 54123
// sPower := true ;
54115: LD_ADDR_EXP 163
54119: PUSH
54120: LD_INT 1
54122: ST_TO_ADDR
// if p3 = 33 then
54123: LD_VAR 0 3
54127: PUSH
54128: LD_INT 33
54130: EQUAL
54131: IFFALSE 54141
// sRandom := true ;
54133: LD_ADDR_EXP 164
54137: PUSH
54138: LD_INT 1
54140: ST_TO_ADDR
// if p3 = 34 then
54141: LD_VAR 0 3
54145: PUSH
54146: LD_INT 34
54148: EQUAL
54149: IFFALSE 54159
// sShield := true ;
54151: LD_ADDR_EXP 165
54155: PUSH
54156: LD_INT 1
54158: ST_TO_ADDR
// if p3 = 35 then
54159: LD_VAR 0 3
54163: PUSH
54164: LD_INT 35
54166: EQUAL
54167: IFFALSE 54177
// sTime := true ;
54169: LD_ADDR_EXP 166
54173: PUSH
54174: LD_INT 1
54176: ST_TO_ADDR
// if p3 = 36 then
54177: LD_VAR 0 3
54181: PUSH
54182: LD_INT 36
54184: EQUAL
54185: IFFALSE 54195
// sTools := true ;
54187: LD_ADDR_EXP 167
54191: PUSH
54192: LD_INT 1
54194: ST_TO_ADDR
// if p3 = 101 then
54195: LD_VAR 0 3
54199: PUSH
54200: LD_INT 101
54202: EQUAL
54203: IFFALSE 54213
// sSold := true ;
54205: LD_ADDR_EXP 132
54209: PUSH
54210: LD_INT 1
54212: ST_TO_ADDR
// if p3 = 102 then
54213: LD_VAR 0 3
54217: PUSH
54218: LD_INT 102
54220: EQUAL
54221: IFFALSE 54231
// sDiff := true ;
54223: LD_ADDR_EXP 133
54227: PUSH
54228: LD_INT 1
54230: ST_TO_ADDR
// if p3 = 103 then
54231: LD_VAR 0 3
54235: PUSH
54236: LD_INT 103
54238: EQUAL
54239: IFFALSE 54249
// sFog := true ;
54241: LD_ADDR_EXP 136
54245: PUSH
54246: LD_INT 1
54248: ST_TO_ADDR
// if p3 = 104 then
54249: LD_VAR 0 3
54253: PUSH
54254: LD_INT 104
54256: EQUAL
54257: IFFALSE 54267
// sReset := true ;
54259: LD_ADDR_EXP 137
54263: PUSH
54264: LD_INT 1
54266: ST_TO_ADDR
// if p3 = 105 then
54267: LD_VAR 0 3
54271: PUSH
54272: LD_INT 105
54274: EQUAL
54275: IFFALSE 54285
// sSun := true ;
54277: LD_ADDR_EXP 138
54281: PUSH
54282: LD_INT 1
54284: ST_TO_ADDR
// if p3 = 106 then
54285: LD_VAR 0 3
54289: PUSH
54290: LD_INT 106
54292: EQUAL
54293: IFFALSE 54303
// sTiger := true ;
54295: LD_ADDR_EXP 134
54299: PUSH
54300: LD_INT 1
54302: ST_TO_ADDR
// if p3 = 107 then
54303: LD_VAR 0 3
54307: PUSH
54308: LD_INT 107
54310: EQUAL
54311: IFFALSE 54321
// sBomb := true ;
54313: LD_ADDR_EXP 135
54317: PUSH
54318: LD_INT 1
54320: ST_TO_ADDR
// if p3 = 108 then
54321: LD_VAR 0 3
54325: PUSH
54326: LD_INT 108
54328: EQUAL
54329: IFFALSE 54339
// sWound := true ;
54331: LD_ADDR_EXP 143
54335: PUSH
54336: LD_INT 1
54338: ST_TO_ADDR
// if p3 = 109 then
54339: LD_VAR 0 3
54343: PUSH
54344: LD_INT 109
54346: EQUAL
54347: IFFALSE 54357
// sBetray := true ;
54349: LD_ADDR_EXP 147
54353: PUSH
54354: LD_INT 1
54356: ST_TO_ADDR
// if p3 = 110 then
54357: LD_VAR 0 3
54361: PUSH
54362: LD_INT 110
54364: EQUAL
54365: IFFALSE 54375
// sContamin := true ;
54367: LD_ADDR_EXP 148
54371: PUSH
54372: LD_INT 1
54374: ST_TO_ADDR
// if p3 = 111 then
54375: LD_VAR 0 3
54379: PUSH
54380: LD_INT 111
54382: EQUAL
54383: IFFALSE 54393
// sOil := true ;
54385: LD_ADDR_EXP 150
54389: PUSH
54390: LD_INT 1
54392: ST_TO_ADDR
// if p3 = 112 then
54393: LD_VAR 0 3
54397: PUSH
54398: LD_INT 112
54400: EQUAL
54401: IFFALSE 54411
// sStu := true ;
54403: LD_ADDR_EXP 154
54407: PUSH
54408: LD_INT 1
54410: ST_TO_ADDR
// if p3 = 113 then
54411: LD_VAR 0 3
54415: PUSH
54416: LD_INT 113
54418: EQUAL
54419: IFFALSE 54429
// sBazooka := true ;
54421: LD_ADDR_EXP 157
54425: PUSH
54426: LD_INT 1
54428: ST_TO_ADDR
// if p3 = 114 then
54429: LD_VAR 0 3
54433: PUSH
54434: LD_INT 114
54436: EQUAL
54437: IFFALSE 54447
// sMortar := true ;
54439: LD_ADDR_EXP 158
54443: PUSH
54444: LD_INT 1
54446: ST_TO_ADDR
// if p3 = 115 then
54447: LD_VAR 0 3
54451: PUSH
54452: LD_INT 115
54454: EQUAL
54455: IFFALSE 54465
// sRanger := true ;
54457: LD_ADDR_EXP 168
54461: PUSH
54462: LD_INT 1
54464: ST_TO_ADDR
// if p3 = 116 then
54465: LD_VAR 0 3
54469: PUSH
54470: LD_INT 116
54472: EQUAL
54473: IFFALSE 54483
// sComputer := true ;
54475: LD_ADDR_EXP 169
54479: PUSH
54480: LD_INT 1
54482: ST_TO_ADDR
// if p3 = 117 then
54483: LD_VAR 0 3
54487: PUSH
54488: LD_INT 117
54490: EQUAL
54491: IFFALSE 54501
// s30 := true ;
54493: LD_ADDR_EXP 170
54497: PUSH
54498: LD_INT 1
54500: ST_TO_ADDR
// if p3 = 118 then
54501: LD_VAR 0 3
54505: PUSH
54506: LD_INT 118
54508: EQUAL
54509: IFFALSE 54519
// s60 := true ;
54511: LD_ADDR_EXP 171
54515: PUSH
54516: LD_INT 1
54518: ST_TO_ADDR
// end ; if p2 = 101 then
54519: LD_VAR 0 2
54523: PUSH
54524: LD_INT 101
54526: EQUAL
54527: IFFALSE 54655
// begin case p3 of 1 :
54529: LD_VAR 0 3
54533: PUSH
54534: LD_INT 1
54536: DOUBLE
54537: EQUAL
54538: IFTRUE 54542
54540: GO 54549
54542: POP
// hHackUnlimitedResources ; 2 :
54543: CALL 66753 0 0
54547: GO 54655
54549: LD_INT 2
54551: DOUBLE
54552: EQUAL
54553: IFTRUE 54557
54555: GO 54564
54557: POP
// hHackSetLevel10 ; 3 :
54558: CALL 66886 0 0
54562: GO 54655
54564: LD_INT 3
54566: DOUBLE
54567: EQUAL
54568: IFTRUE 54572
54570: GO 54579
54572: POP
// hHackSetLevel10YourUnits ; 4 :
54573: CALL 66971 0 0
54577: GO 54655
54579: LD_INT 4
54581: DOUBLE
54582: EQUAL
54583: IFTRUE 54587
54585: GO 54594
54587: POP
// hHackInvincible ; 5 :
54588: CALL 67419 0 0
54592: GO 54655
54594: LD_INT 5
54596: DOUBLE
54597: EQUAL
54598: IFTRUE 54602
54600: GO 54609
54602: POP
// hHackInvisible ; 6 :
54603: CALL 67530 0 0
54607: GO 54655
54609: LD_INT 6
54611: DOUBLE
54612: EQUAL
54613: IFTRUE 54617
54615: GO 54624
54617: POP
// hHackChangeYourSide ; 7 :
54618: CALL 67587 0 0
54622: GO 54655
54624: LD_INT 7
54626: DOUBLE
54627: EQUAL
54628: IFTRUE 54632
54630: GO 54639
54632: POP
// hHackChangeUnitSide ; 8 :
54633: CALL 67629 0 0
54637: GO 54655
54639: LD_INT 8
54641: DOUBLE
54642: EQUAL
54643: IFTRUE 54647
54645: GO 54654
54647: POP
// hHackFog ; end ;
54648: CALL 67730 0 0
54652: GO 54655
54654: POP
// end ; end ;
54655: LD_VAR 0 7
54659: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
54660: GO 54662
54662: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
54663: LD_STRING initStreamRollete();
54665: PPUSH
54666: CALL_OW 559
// InitStreamMode ;
54670: CALL 54682 0 0
// DefineStreamItems ( false ) ;
54674: LD_INT 0
54676: PPUSH
54677: CALL 55146 0 1
// end ;
54681: END
// function InitStreamMode ; begin
54682: LD_INT 0
54684: PPUSH
// streamModeActive := false ;
54685: LD_ADDR_EXP 115
54689: PUSH
54690: LD_INT 0
54692: ST_TO_ADDR
// normalCounter := 36 ;
54693: LD_ADDR_EXP 116
54697: PUSH
54698: LD_INT 36
54700: ST_TO_ADDR
// hardcoreCounter := 18 ;
54701: LD_ADDR_EXP 117
54705: PUSH
54706: LD_INT 18
54708: ST_TO_ADDR
// sRocket := false ;
54709: LD_ADDR_EXP 120
54713: PUSH
54714: LD_INT 0
54716: ST_TO_ADDR
// sSpeed := false ;
54717: LD_ADDR_EXP 119
54721: PUSH
54722: LD_INT 0
54724: ST_TO_ADDR
// sEngine := false ;
54725: LD_ADDR_EXP 121
54729: PUSH
54730: LD_INT 0
54732: ST_TO_ADDR
// sSpec := false ;
54733: LD_ADDR_EXP 118
54737: PUSH
54738: LD_INT 0
54740: ST_TO_ADDR
// sLevel := false ;
54741: LD_ADDR_EXP 122
54745: PUSH
54746: LD_INT 0
54748: ST_TO_ADDR
// sArmoury := false ;
54749: LD_ADDR_EXP 123
54753: PUSH
54754: LD_INT 0
54756: ST_TO_ADDR
// sRadar := false ;
54757: LD_ADDR_EXP 124
54761: PUSH
54762: LD_INT 0
54764: ST_TO_ADDR
// sBunker := false ;
54765: LD_ADDR_EXP 125
54769: PUSH
54770: LD_INT 0
54772: ST_TO_ADDR
// sHack := false ;
54773: LD_ADDR_EXP 126
54777: PUSH
54778: LD_INT 0
54780: ST_TO_ADDR
// sFire := false ;
54781: LD_ADDR_EXP 127
54785: PUSH
54786: LD_INT 0
54788: ST_TO_ADDR
// sRefresh := false ;
54789: LD_ADDR_EXP 128
54793: PUSH
54794: LD_INT 0
54796: ST_TO_ADDR
// sExp := false ;
54797: LD_ADDR_EXP 129
54801: PUSH
54802: LD_INT 0
54804: ST_TO_ADDR
// sDepot := false ;
54805: LD_ADDR_EXP 130
54809: PUSH
54810: LD_INT 0
54812: ST_TO_ADDR
// sFlag := false ;
54813: LD_ADDR_EXP 131
54817: PUSH
54818: LD_INT 0
54820: ST_TO_ADDR
// sKamikadze := false ;
54821: LD_ADDR_EXP 139
54825: PUSH
54826: LD_INT 0
54828: ST_TO_ADDR
// sTroll := false ;
54829: LD_ADDR_EXP 140
54833: PUSH
54834: LD_INT 0
54836: ST_TO_ADDR
// sSlow := false ;
54837: LD_ADDR_EXP 141
54841: PUSH
54842: LD_INT 0
54844: ST_TO_ADDR
// sLack := false ;
54845: LD_ADDR_EXP 142
54849: PUSH
54850: LD_INT 0
54852: ST_TO_ADDR
// sTank := false ;
54853: LD_ADDR_EXP 144
54857: PUSH
54858: LD_INT 0
54860: ST_TO_ADDR
// sRemote := false ;
54861: LD_ADDR_EXP 145
54865: PUSH
54866: LD_INT 0
54868: ST_TO_ADDR
// sPowell := false ;
54869: LD_ADDR_EXP 146
54873: PUSH
54874: LD_INT 0
54876: ST_TO_ADDR
// sTeleport := false ;
54877: LD_ADDR_EXP 149
54881: PUSH
54882: LD_INT 0
54884: ST_TO_ADDR
// sOilTower := false ;
54885: LD_ADDR_EXP 151
54889: PUSH
54890: LD_INT 0
54892: ST_TO_ADDR
// sShovel := false ;
54893: LD_ADDR_EXP 152
54897: PUSH
54898: LD_INT 0
54900: ST_TO_ADDR
// sSheik := false ;
54901: LD_ADDR_EXP 153
54905: PUSH
54906: LD_INT 0
54908: ST_TO_ADDR
// sEarthquake := false ;
54909: LD_ADDR_EXP 155
54913: PUSH
54914: LD_INT 0
54916: ST_TO_ADDR
// sAI := false ;
54917: LD_ADDR_EXP 156
54921: PUSH
54922: LD_INT 0
54924: ST_TO_ADDR
// sCargo := false ;
54925: LD_ADDR_EXP 159
54929: PUSH
54930: LD_INT 0
54932: ST_TO_ADDR
// sDLaser := false ;
54933: LD_ADDR_EXP 160
54937: PUSH
54938: LD_INT 0
54940: ST_TO_ADDR
// sExchange := false ;
54941: LD_ADDR_EXP 161
54945: PUSH
54946: LD_INT 0
54948: ST_TO_ADDR
// sFac := false ;
54949: LD_ADDR_EXP 162
54953: PUSH
54954: LD_INT 0
54956: ST_TO_ADDR
// sPower := false ;
54957: LD_ADDR_EXP 163
54961: PUSH
54962: LD_INT 0
54964: ST_TO_ADDR
// sRandom := false ;
54965: LD_ADDR_EXP 164
54969: PUSH
54970: LD_INT 0
54972: ST_TO_ADDR
// sShield := false ;
54973: LD_ADDR_EXP 165
54977: PUSH
54978: LD_INT 0
54980: ST_TO_ADDR
// sTime := false ;
54981: LD_ADDR_EXP 166
54985: PUSH
54986: LD_INT 0
54988: ST_TO_ADDR
// sTools := false ;
54989: LD_ADDR_EXP 167
54993: PUSH
54994: LD_INT 0
54996: ST_TO_ADDR
// sSold := false ;
54997: LD_ADDR_EXP 132
55001: PUSH
55002: LD_INT 0
55004: ST_TO_ADDR
// sDiff := false ;
55005: LD_ADDR_EXP 133
55009: PUSH
55010: LD_INT 0
55012: ST_TO_ADDR
// sFog := false ;
55013: LD_ADDR_EXP 136
55017: PUSH
55018: LD_INT 0
55020: ST_TO_ADDR
// sReset := false ;
55021: LD_ADDR_EXP 137
55025: PUSH
55026: LD_INT 0
55028: ST_TO_ADDR
// sSun := false ;
55029: LD_ADDR_EXP 138
55033: PUSH
55034: LD_INT 0
55036: ST_TO_ADDR
// sTiger := false ;
55037: LD_ADDR_EXP 134
55041: PUSH
55042: LD_INT 0
55044: ST_TO_ADDR
// sBomb := false ;
55045: LD_ADDR_EXP 135
55049: PUSH
55050: LD_INT 0
55052: ST_TO_ADDR
// sWound := false ;
55053: LD_ADDR_EXP 143
55057: PUSH
55058: LD_INT 0
55060: ST_TO_ADDR
// sBetray := false ;
55061: LD_ADDR_EXP 147
55065: PUSH
55066: LD_INT 0
55068: ST_TO_ADDR
// sContamin := false ;
55069: LD_ADDR_EXP 148
55073: PUSH
55074: LD_INT 0
55076: ST_TO_ADDR
// sOil := false ;
55077: LD_ADDR_EXP 150
55081: PUSH
55082: LD_INT 0
55084: ST_TO_ADDR
// sStu := false ;
55085: LD_ADDR_EXP 154
55089: PUSH
55090: LD_INT 0
55092: ST_TO_ADDR
// sBazooka := false ;
55093: LD_ADDR_EXP 157
55097: PUSH
55098: LD_INT 0
55100: ST_TO_ADDR
// sMortar := false ;
55101: LD_ADDR_EXP 158
55105: PUSH
55106: LD_INT 0
55108: ST_TO_ADDR
// sRanger := false ;
55109: LD_ADDR_EXP 168
55113: PUSH
55114: LD_INT 0
55116: ST_TO_ADDR
// sComputer := false ;
55117: LD_ADDR_EXP 169
55121: PUSH
55122: LD_INT 0
55124: ST_TO_ADDR
// s30 := false ;
55125: LD_ADDR_EXP 170
55129: PUSH
55130: LD_INT 0
55132: ST_TO_ADDR
// s60 := false ;
55133: LD_ADDR_EXP 171
55137: PUSH
55138: LD_INT 0
55140: ST_TO_ADDR
// end ;
55141: LD_VAR 0 1
55145: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
55146: LD_INT 0
55148: PPUSH
55149: PPUSH
55150: PPUSH
55151: PPUSH
55152: PPUSH
55153: PPUSH
55154: PPUSH
// result := [ ] ;
55155: LD_ADDR_VAR 0 2
55159: PUSH
55160: EMPTY
55161: ST_TO_ADDR
// if campaign_id = 1 then
55162: LD_OWVAR 69
55166: PUSH
55167: LD_INT 1
55169: EQUAL
55170: IFFALSE 58336
// begin case mission_number of 1 :
55172: LD_OWVAR 70
55176: PUSH
55177: LD_INT 1
55179: DOUBLE
55180: EQUAL
55181: IFTRUE 55185
55183: GO 55261
55185: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
55186: LD_ADDR_VAR 0 2
55190: PUSH
55191: LD_INT 2
55193: PUSH
55194: LD_INT 4
55196: PUSH
55197: LD_INT 11
55199: PUSH
55200: LD_INT 12
55202: PUSH
55203: LD_INT 15
55205: PUSH
55206: LD_INT 16
55208: PUSH
55209: LD_INT 22
55211: PUSH
55212: LD_INT 23
55214: PUSH
55215: LD_INT 26
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 101
55231: PUSH
55232: LD_INT 102
55234: PUSH
55235: LD_INT 106
55237: PUSH
55238: LD_INT 116
55240: PUSH
55241: LD_INT 117
55243: PUSH
55244: LD_INT 118
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: ST_TO_ADDR
55259: GO 58334
55261: LD_INT 2
55263: DOUBLE
55264: EQUAL
55265: IFTRUE 55269
55267: GO 55353
55269: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
55270: LD_ADDR_VAR 0 2
55274: PUSH
55275: LD_INT 2
55277: PUSH
55278: LD_INT 4
55280: PUSH
55281: LD_INT 11
55283: PUSH
55284: LD_INT 12
55286: PUSH
55287: LD_INT 15
55289: PUSH
55290: LD_INT 16
55292: PUSH
55293: LD_INT 22
55295: PUSH
55296: LD_INT 23
55298: PUSH
55299: LD_INT 26
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 101
55315: PUSH
55316: LD_INT 102
55318: PUSH
55319: LD_INT 105
55321: PUSH
55322: LD_INT 106
55324: PUSH
55325: LD_INT 108
55327: PUSH
55328: LD_INT 116
55330: PUSH
55331: LD_INT 117
55333: PUSH
55334: LD_INT 118
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: ST_TO_ADDR
55351: GO 58334
55353: LD_INT 3
55355: DOUBLE
55356: EQUAL
55357: IFTRUE 55361
55359: GO 55449
55361: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
55362: LD_ADDR_VAR 0 2
55366: PUSH
55367: LD_INT 2
55369: PUSH
55370: LD_INT 4
55372: PUSH
55373: LD_INT 5
55375: PUSH
55376: LD_INT 11
55378: PUSH
55379: LD_INT 12
55381: PUSH
55382: LD_INT 15
55384: PUSH
55385: LD_INT 16
55387: PUSH
55388: LD_INT 22
55390: PUSH
55391: LD_INT 26
55393: PUSH
55394: LD_INT 36
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 101
55411: PUSH
55412: LD_INT 102
55414: PUSH
55415: LD_INT 105
55417: PUSH
55418: LD_INT 106
55420: PUSH
55421: LD_INT 108
55423: PUSH
55424: LD_INT 116
55426: PUSH
55427: LD_INT 117
55429: PUSH
55430: LD_INT 118
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: ST_TO_ADDR
55447: GO 58334
55449: LD_INT 4
55451: DOUBLE
55452: EQUAL
55453: IFTRUE 55457
55455: GO 55553
55457: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
55458: LD_ADDR_VAR 0 2
55462: PUSH
55463: LD_INT 2
55465: PUSH
55466: LD_INT 4
55468: PUSH
55469: LD_INT 5
55471: PUSH
55472: LD_INT 8
55474: PUSH
55475: LD_INT 11
55477: PUSH
55478: LD_INT 12
55480: PUSH
55481: LD_INT 15
55483: PUSH
55484: LD_INT 16
55486: PUSH
55487: LD_INT 22
55489: PUSH
55490: LD_INT 23
55492: PUSH
55493: LD_INT 26
55495: PUSH
55496: LD_INT 36
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 101
55515: PUSH
55516: LD_INT 102
55518: PUSH
55519: LD_INT 105
55521: PUSH
55522: LD_INT 106
55524: PUSH
55525: LD_INT 108
55527: PUSH
55528: LD_INT 116
55530: PUSH
55531: LD_INT 117
55533: PUSH
55534: LD_INT 118
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: ST_TO_ADDR
55551: GO 58334
55553: LD_INT 5
55555: DOUBLE
55556: EQUAL
55557: IFTRUE 55561
55559: GO 55673
55561: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
55562: LD_ADDR_VAR 0 2
55566: PUSH
55567: LD_INT 2
55569: PUSH
55570: LD_INT 4
55572: PUSH
55573: LD_INT 5
55575: PUSH
55576: LD_INT 6
55578: PUSH
55579: LD_INT 8
55581: PUSH
55582: LD_INT 11
55584: PUSH
55585: LD_INT 12
55587: PUSH
55588: LD_INT 15
55590: PUSH
55591: LD_INT 16
55593: PUSH
55594: LD_INT 22
55596: PUSH
55597: LD_INT 23
55599: PUSH
55600: LD_INT 25
55602: PUSH
55603: LD_INT 26
55605: PUSH
55606: LD_INT 36
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 101
55627: PUSH
55628: LD_INT 102
55630: PUSH
55631: LD_INT 105
55633: PUSH
55634: LD_INT 106
55636: PUSH
55637: LD_INT 108
55639: PUSH
55640: LD_INT 109
55642: PUSH
55643: LD_INT 112
55645: PUSH
55646: LD_INT 116
55648: PUSH
55649: LD_INT 117
55651: PUSH
55652: LD_INT 118
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: ST_TO_ADDR
55671: GO 58334
55673: LD_INT 6
55675: DOUBLE
55676: EQUAL
55677: IFTRUE 55681
55679: GO 55813
55681: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
55682: LD_ADDR_VAR 0 2
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: LD_INT 4
55692: PUSH
55693: LD_INT 5
55695: PUSH
55696: LD_INT 6
55698: PUSH
55699: LD_INT 8
55701: PUSH
55702: LD_INT 11
55704: PUSH
55705: LD_INT 12
55707: PUSH
55708: LD_INT 15
55710: PUSH
55711: LD_INT 16
55713: PUSH
55714: LD_INT 20
55716: PUSH
55717: LD_INT 21
55719: PUSH
55720: LD_INT 22
55722: PUSH
55723: LD_INT 23
55725: PUSH
55726: LD_INT 25
55728: PUSH
55729: LD_INT 26
55731: PUSH
55732: LD_INT 30
55734: PUSH
55735: LD_INT 31
55737: PUSH
55738: LD_INT 32
55740: PUSH
55741: LD_INT 36
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 101
55767: PUSH
55768: LD_INT 102
55770: PUSH
55771: LD_INT 105
55773: PUSH
55774: LD_INT 106
55776: PUSH
55777: LD_INT 108
55779: PUSH
55780: LD_INT 109
55782: PUSH
55783: LD_INT 112
55785: PUSH
55786: LD_INT 116
55788: PUSH
55789: LD_INT 117
55791: PUSH
55792: LD_INT 118
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: ST_TO_ADDR
55811: GO 58334
55813: LD_INT 7
55815: DOUBLE
55816: EQUAL
55817: IFTRUE 55821
55819: GO 55933
55821: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
55822: LD_ADDR_VAR 0 2
55826: PUSH
55827: LD_INT 2
55829: PUSH
55830: LD_INT 4
55832: PUSH
55833: LD_INT 5
55835: PUSH
55836: LD_INT 7
55838: PUSH
55839: LD_INT 11
55841: PUSH
55842: LD_INT 12
55844: PUSH
55845: LD_INT 15
55847: PUSH
55848: LD_INT 16
55850: PUSH
55851: LD_INT 20
55853: PUSH
55854: LD_INT 21
55856: PUSH
55857: LD_INT 22
55859: PUSH
55860: LD_INT 23
55862: PUSH
55863: LD_INT 25
55865: PUSH
55866: LD_INT 26
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 101
55887: PUSH
55888: LD_INT 102
55890: PUSH
55891: LD_INT 103
55893: PUSH
55894: LD_INT 105
55896: PUSH
55897: LD_INT 106
55899: PUSH
55900: LD_INT 108
55902: PUSH
55903: LD_INT 112
55905: PUSH
55906: LD_INT 116
55908: PUSH
55909: LD_INT 117
55911: PUSH
55912: LD_INT 118
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: ST_TO_ADDR
55931: GO 58334
55933: LD_INT 8
55935: DOUBLE
55936: EQUAL
55937: IFTRUE 55941
55939: GO 56081
55941: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
55942: LD_ADDR_VAR 0 2
55946: PUSH
55947: LD_INT 2
55949: PUSH
55950: LD_INT 4
55952: PUSH
55953: LD_INT 5
55955: PUSH
55956: LD_INT 6
55958: PUSH
55959: LD_INT 7
55961: PUSH
55962: LD_INT 8
55964: PUSH
55965: LD_INT 11
55967: PUSH
55968: LD_INT 12
55970: PUSH
55971: LD_INT 15
55973: PUSH
55974: LD_INT 16
55976: PUSH
55977: LD_INT 20
55979: PUSH
55980: LD_INT 21
55982: PUSH
55983: LD_INT 22
55985: PUSH
55986: LD_INT 23
55988: PUSH
55989: LD_INT 25
55991: PUSH
55992: LD_INT 26
55994: PUSH
55995: LD_INT 30
55997: PUSH
55998: LD_INT 31
56000: PUSH
56001: LD_INT 32
56003: PUSH
56004: LD_INT 36
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 101
56031: PUSH
56032: LD_INT 102
56034: PUSH
56035: LD_INT 103
56037: PUSH
56038: LD_INT 105
56040: PUSH
56041: LD_INT 106
56043: PUSH
56044: LD_INT 108
56046: PUSH
56047: LD_INT 109
56049: PUSH
56050: LD_INT 112
56052: PUSH
56053: LD_INT 116
56055: PUSH
56056: LD_INT 117
56058: PUSH
56059: LD_INT 118
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: ST_TO_ADDR
56079: GO 58334
56081: LD_INT 9
56083: DOUBLE
56084: EQUAL
56085: IFTRUE 56089
56087: GO 56237
56089: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
56090: LD_ADDR_VAR 0 2
56094: PUSH
56095: LD_INT 2
56097: PUSH
56098: LD_INT 4
56100: PUSH
56101: LD_INT 5
56103: PUSH
56104: LD_INT 6
56106: PUSH
56107: LD_INT 7
56109: PUSH
56110: LD_INT 8
56112: PUSH
56113: LD_INT 11
56115: PUSH
56116: LD_INT 12
56118: PUSH
56119: LD_INT 15
56121: PUSH
56122: LD_INT 16
56124: PUSH
56125: LD_INT 20
56127: PUSH
56128: LD_INT 21
56130: PUSH
56131: LD_INT 22
56133: PUSH
56134: LD_INT 23
56136: PUSH
56137: LD_INT 25
56139: PUSH
56140: LD_INT 26
56142: PUSH
56143: LD_INT 28
56145: PUSH
56146: LD_INT 30
56148: PUSH
56149: LD_INT 31
56151: PUSH
56152: LD_INT 32
56154: PUSH
56155: LD_INT 36
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 101
56183: PUSH
56184: LD_INT 102
56186: PUSH
56187: LD_INT 103
56189: PUSH
56190: LD_INT 105
56192: PUSH
56193: LD_INT 106
56195: PUSH
56196: LD_INT 108
56198: PUSH
56199: LD_INT 109
56201: PUSH
56202: LD_INT 112
56204: PUSH
56205: LD_INT 114
56207: PUSH
56208: LD_INT 116
56210: PUSH
56211: LD_INT 117
56213: PUSH
56214: LD_INT 118
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: ST_TO_ADDR
56235: GO 58334
56237: LD_INT 10
56239: DOUBLE
56240: EQUAL
56241: IFTRUE 56245
56243: GO 56441
56245: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
56246: LD_ADDR_VAR 0 2
56250: PUSH
56251: LD_INT 2
56253: PUSH
56254: LD_INT 4
56256: PUSH
56257: LD_INT 5
56259: PUSH
56260: LD_INT 6
56262: PUSH
56263: LD_INT 7
56265: PUSH
56266: LD_INT 8
56268: PUSH
56269: LD_INT 9
56271: PUSH
56272: LD_INT 10
56274: PUSH
56275: LD_INT 11
56277: PUSH
56278: LD_INT 12
56280: PUSH
56281: LD_INT 13
56283: PUSH
56284: LD_INT 14
56286: PUSH
56287: LD_INT 15
56289: PUSH
56290: LD_INT 16
56292: PUSH
56293: LD_INT 17
56295: PUSH
56296: LD_INT 18
56298: PUSH
56299: LD_INT 19
56301: PUSH
56302: LD_INT 20
56304: PUSH
56305: LD_INT 21
56307: PUSH
56308: LD_INT 22
56310: PUSH
56311: LD_INT 23
56313: PUSH
56314: LD_INT 24
56316: PUSH
56317: LD_INT 25
56319: PUSH
56320: LD_INT 26
56322: PUSH
56323: LD_INT 28
56325: PUSH
56326: LD_INT 30
56328: PUSH
56329: LD_INT 31
56331: PUSH
56332: LD_INT 32
56334: PUSH
56335: LD_INT 36
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 101
56371: PUSH
56372: LD_INT 102
56374: PUSH
56375: LD_INT 103
56377: PUSH
56378: LD_INT 104
56380: PUSH
56381: LD_INT 105
56383: PUSH
56384: LD_INT 106
56386: PUSH
56387: LD_INT 107
56389: PUSH
56390: LD_INT 108
56392: PUSH
56393: LD_INT 109
56395: PUSH
56396: LD_INT 110
56398: PUSH
56399: LD_INT 111
56401: PUSH
56402: LD_INT 112
56404: PUSH
56405: LD_INT 114
56407: PUSH
56408: LD_INT 116
56410: PUSH
56411: LD_INT 117
56413: PUSH
56414: LD_INT 118
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: ST_TO_ADDR
56439: GO 58334
56441: LD_INT 11
56443: DOUBLE
56444: EQUAL
56445: IFTRUE 56449
56447: GO 56653
56449: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
56450: LD_ADDR_VAR 0 2
56454: PUSH
56455: LD_INT 2
56457: PUSH
56458: LD_INT 3
56460: PUSH
56461: LD_INT 4
56463: PUSH
56464: LD_INT 5
56466: PUSH
56467: LD_INT 6
56469: PUSH
56470: LD_INT 7
56472: PUSH
56473: LD_INT 8
56475: PUSH
56476: LD_INT 9
56478: PUSH
56479: LD_INT 10
56481: PUSH
56482: LD_INT 11
56484: PUSH
56485: LD_INT 12
56487: PUSH
56488: LD_INT 13
56490: PUSH
56491: LD_INT 14
56493: PUSH
56494: LD_INT 15
56496: PUSH
56497: LD_INT 16
56499: PUSH
56500: LD_INT 17
56502: PUSH
56503: LD_INT 18
56505: PUSH
56506: LD_INT 19
56508: PUSH
56509: LD_INT 20
56511: PUSH
56512: LD_INT 21
56514: PUSH
56515: LD_INT 22
56517: PUSH
56518: LD_INT 23
56520: PUSH
56521: LD_INT 24
56523: PUSH
56524: LD_INT 25
56526: PUSH
56527: LD_INT 26
56529: PUSH
56530: LD_INT 28
56532: PUSH
56533: LD_INT 30
56535: PUSH
56536: LD_INT 31
56538: PUSH
56539: LD_INT 32
56541: PUSH
56542: LD_INT 34
56544: PUSH
56545: LD_INT 36
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 101
56583: PUSH
56584: LD_INT 102
56586: PUSH
56587: LD_INT 103
56589: PUSH
56590: LD_INT 104
56592: PUSH
56593: LD_INT 105
56595: PUSH
56596: LD_INT 106
56598: PUSH
56599: LD_INT 107
56601: PUSH
56602: LD_INT 108
56604: PUSH
56605: LD_INT 109
56607: PUSH
56608: LD_INT 110
56610: PUSH
56611: LD_INT 111
56613: PUSH
56614: LD_INT 112
56616: PUSH
56617: LD_INT 114
56619: PUSH
56620: LD_INT 116
56622: PUSH
56623: LD_INT 117
56625: PUSH
56626: LD_INT 118
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: ST_TO_ADDR
56651: GO 58334
56653: LD_INT 12
56655: DOUBLE
56656: EQUAL
56657: IFTRUE 56661
56659: GO 56881
56661: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
56662: LD_ADDR_VAR 0 2
56666: PUSH
56667: LD_INT 1
56669: PUSH
56670: LD_INT 2
56672: PUSH
56673: LD_INT 3
56675: PUSH
56676: LD_INT 4
56678: PUSH
56679: LD_INT 5
56681: PUSH
56682: LD_INT 6
56684: PUSH
56685: LD_INT 7
56687: PUSH
56688: LD_INT 8
56690: PUSH
56691: LD_INT 9
56693: PUSH
56694: LD_INT 10
56696: PUSH
56697: LD_INT 11
56699: PUSH
56700: LD_INT 12
56702: PUSH
56703: LD_INT 13
56705: PUSH
56706: LD_INT 14
56708: PUSH
56709: LD_INT 15
56711: PUSH
56712: LD_INT 16
56714: PUSH
56715: LD_INT 17
56717: PUSH
56718: LD_INT 18
56720: PUSH
56721: LD_INT 19
56723: PUSH
56724: LD_INT 20
56726: PUSH
56727: LD_INT 21
56729: PUSH
56730: LD_INT 22
56732: PUSH
56733: LD_INT 23
56735: PUSH
56736: LD_INT 24
56738: PUSH
56739: LD_INT 25
56741: PUSH
56742: LD_INT 26
56744: PUSH
56745: LD_INT 27
56747: PUSH
56748: LD_INT 28
56750: PUSH
56751: LD_INT 30
56753: PUSH
56754: LD_INT 31
56756: PUSH
56757: LD_INT 32
56759: PUSH
56760: LD_INT 33
56762: PUSH
56763: LD_INT 34
56765: PUSH
56766: LD_INT 36
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 101
56807: PUSH
56808: LD_INT 102
56810: PUSH
56811: LD_INT 103
56813: PUSH
56814: LD_INT 104
56816: PUSH
56817: LD_INT 105
56819: PUSH
56820: LD_INT 106
56822: PUSH
56823: LD_INT 107
56825: PUSH
56826: LD_INT 108
56828: PUSH
56829: LD_INT 109
56831: PUSH
56832: LD_INT 110
56834: PUSH
56835: LD_INT 111
56837: PUSH
56838: LD_INT 112
56840: PUSH
56841: LD_INT 113
56843: PUSH
56844: LD_INT 114
56846: PUSH
56847: LD_INT 116
56849: PUSH
56850: LD_INT 117
56852: PUSH
56853: LD_INT 118
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: ST_TO_ADDR
56879: GO 58334
56881: LD_INT 13
56883: DOUBLE
56884: EQUAL
56885: IFTRUE 56889
56887: GO 57097
56889: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
56890: LD_ADDR_VAR 0 2
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: LD_INT 2
56900: PUSH
56901: LD_INT 3
56903: PUSH
56904: LD_INT 4
56906: PUSH
56907: LD_INT 5
56909: PUSH
56910: LD_INT 8
56912: PUSH
56913: LD_INT 9
56915: PUSH
56916: LD_INT 10
56918: PUSH
56919: LD_INT 11
56921: PUSH
56922: LD_INT 12
56924: PUSH
56925: LD_INT 14
56927: PUSH
56928: LD_INT 15
56930: PUSH
56931: LD_INT 16
56933: PUSH
56934: LD_INT 17
56936: PUSH
56937: LD_INT 18
56939: PUSH
56940: LD_INT 19
56942: PUSH
56943: LD_INT 20
56945: PUSH
56946: LD_INT 21
56948: PUSH
56949: LD_INT 22
56951: PUSH
56952: LD_INT 23
56954: PUSH
56955: LD_INT 24
56957: PUSH
56958: LD_INT 25
56960: PUSH
56961: LD_INT 26
56963: PUSH
56964: LD_INT 27
56966: PUSH
56967: LD_INT 28
56969: PUSH
56970: LD_INT 30
56972: PUSH
56973: LD_INT 31
56975: PUSH
56976: LD_INT 32
56978: PUSH
56979: LD_INT 33
56981: PUSH
56982: LD_INT 34
56984: PUSH
56985: LD_INT 36
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 101
57023: PUSH
57024: LD_INT 102
57026: PUSH
57027: LD_INT 103
57029: PUSH
57030: LD_INT 104
57032: PUSH
57033: LD_INT 105
57035: PUSH
57036: LD_INT 106
57038: PUSH
57039: LD_INT 107
57041: PUSH
57042: LD_INT 108
57044: PUSH
57045: LD_INT 109
57047: PUSH
57048: LD_INT 110
57050: PUSH
57051: LD_INT 111
57053: PUSH
57054: LD_INT 112
57056: PUSH
57057: LD_INT 113
57059: PUSH
57060: LD_INT 114
57062: PUSH
57063: LD_INT 116
57065: PUSH
57066: LD_INT 117
57068: PUSH
57069: LD_INT 118
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: ST_TO_ADDR
57095: GO 58334
57097: LD_INT 14
57099: DOUBLE
57100: EQUAL
57101: IFTRUE 57105
57103: GO 57329
57105: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
57106: LD_ADDR_VAR 0 2
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: LD_INT 2
57116: PUSH
57117: LD_INT 3
57119: PUSH
57120: LD_INT 4
57122: PUSH
57123: LD_INT 5
57125: PUSH
57126: LD_INT 6
57128: PUSH
57129: LD_INT 7
57131: PUSH
57132: LD_INT 8
57134: PUSH
57135: LD_INT 9
57137: PUSH
57138: LD_INT 10
57140: PUSH
57141: LD_INT 11
57143: PUSH
57144: LD_INT 12
57146: PUSH
57147: LD_INT 13
57149: PUSH
57150: LD_INT 14
57152: PUSH
57153: LD_INT 15
57155: PUSH
57156: LD_INT 16
57158: PUSH
57159: LD_INT 17
57161: PUSH
57162: LD_INT 18
57164: PUSH
57165: LD_INT 19
57167: PUSH
57168: LD_INT 20
57170: PUSH
57171: LD_INT 21
57173: PUSH
57174: LD_INT 22
57176: PUSH
57177: LD_INT 23
57179: PUSH
57180: LD_INT 24
57182: PUSH
57183: LD_INT 25
57185: PUSH
57186: LD_INT 26
57188: PUSH
57189: LD_INT 27
57191: PUSH
57192: LD_INT 28
57194: PUSH
57195: LD_INT 29
57197: PUSH
57198: LD_INT 30
57200: PUSH
57201: LD_INT 31
57203: PUSH
57204: LD_INT 32
57206: PUSH
57207: LD_INT 33
57209: PUSH
57210: LD_INT 34
57212: PUSH
57213: LD_INT 36
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 101
57255: PUSH
57256: LD_INT 102
57258: PUSH
57259: LD_INT 103
57261: PUSH
57262: LD_INT 104
57264: PUSH
57265: LD_INT 105
57267: PUSH
57268: LD_INT 106
57270: PUSH
57271: LD_INT 107
57273: PUSH
57274: LD_INT 108
57276: PUSH
57277: LD_INT 109
57279: PUSH
57280: LD_INT 110
57282: PUSH
57283: LD_INT 111
57285: PUSH
57286: LD_INT 112
57288: PUSH
57289: LD_INT 113
57291: PUSH
57292: LD_INT 114
57294: PUSH
57295: LD_INT 116
57297: PUSH
57298: LD_INT 117
57300: PUSH
57301: LD_INT 118
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: ST_TO_ADDR
57327: GO 58334
57329: LD_INT 15
57331: DOUBLE
57332: EQUAL
57333: IFTRUE 57337
57335: GO 57561
57337: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
57338: LD_ADDR_VAR 0 2
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: LD_INT 2
57348: PUSH
57349: LD_INT 3
57351: PUSH
57352: LD_INT 4
57354: PUSH
57355: LD_INT 5
57357: PUSH
57358: LD_INT 6
57360: PUSH
57361: LD_INT 7
57363: PUSH
57364: LD_INT 8
57366: PUSH
57367: LD_INT 9
57369: PUSH
57370: LD_INT 10
57372: PUSH
57373: LD_INT 11
57375: PUSH
57376: LD_INT 12
57378: PUSH
57379: LD_INT 13
57381: PUSH
57382: LD_INT 14
57384: PUSH
57385: LD_INT 15
57387: PUSH
57388: LD_INT 16
57390: PUSH
57391: LD_INT 17
57393: PUSH
57394: LD_INT 18
57396: PUSH
57397: LD_INT 19
57399: PUSH
57400: LD_INT 20
57402: PUSH
57403: LD_INT 21
57405: PUSH
57406: LD_INT 22
57408: PUSH
57409: LD_INT 23
57411: PUSH
57412: LD_INT 24
57414: PUSH
57415: LD_INT 25
57417: PUSH
57418: LD_INT 26
57420: PUSH
57421: LD_INT 27
57423: PUSH
57424: LD_INT 28
57426: PUSH
57427: LD_INT 29
57429: PUSH
57430: LD_INT 30
57432: PUSH
57433: LD_INT 31
57435: PUSH
57436: LD_INT 32
57438: PUSH
57439: LD_INT 33
57441: PUSH
57442: LD_INT 34
57444: PUSH
57445: LD_INT 36
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 101
57487: PUSH
57488: LD_INT 102
57490: PUSH
57491: LD_INT 103
57493: PUSH
57494: LD_INT 104
57496: PUSH
57497: LD_INT 105
57499: PUSH
57500: LD_INT 106
57502: PUSH
57503: LD_INT 107
57505: PUSH
57506: LD_INT 108
57508: PUSH
57509: LD_INT 109
57511: PUSH
57512: LD_INT 110
57514: PUSH
57515: LD_INT 111
57517: PUSH
57518: LD_INT 112
57520: PUSH
57521: LD_INT 113
57523: PUSH
57524: LD_INT 114
57526: PUSH
57527: LD_INT 116
57529: PUSH
57530: LD_INT 117
57532: PUSH
57533: LD_INT 118
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: ST_TO_ADDR
57559: GO 58334
57561: LD_INT 16
57563: DOUBLE
57564: EQUAL
57565: IFTRUE 57569
57567: GO 57705
57569: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
57570: LD_ADDR_VAR 0 2
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: LD_INT 4
57580: PUSH
57581: LD_INT 5
57583: PUSH
57584: LD_INT 7
57586: PUSH
57587: LD_INT 11
57589: PUSH
57590: LD_INT 12
57592: PUSH
57593: LD_INT 15
57595: PUSH
57596: LD_INT 16
57598: PUSH
57599: LD_INT 20
57601: PUSH
57602: LD_INT 21
57604: PUSH
57605: LD_INT 22
57607: PUSH
57608: LD_INT 23
57610: PUSH
57611: LD_INT 25
57613: PUSH
57614: LD_INT 26
57616: PUSH
57617: LD_INT 30
57619: PUSH
57620: LD_INT 31
57622: PUSH
57623: LD_INT 32
57625: PUSH
57626: LD_INT 33
57628: PUSH
57629: LD_INT 34
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 101
57655: PUSH
57656: LD_INT 102
57658: PUSH
57659: LD_INT 103
57661: PUSH
57662: LD_INT 106
57664: PUSH
57665: LD_INT 108
57667: PUSH
57668: LD_INT 112
57670: PUSH
57671: LD_INT 113
57673: PUSH
57674: LD_INT 114
57676: PUSH
57677: LD_INT 116
57679: PUSH
57680: LD_INT 117
57682: PUSH
57683: LD_INT 118
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: ST_TO_ADDR
57703: GO 58334
57705: LD_INT 17
57707: DOUBLE
57708: EQUAL
57709: IFTRUE 57713
57711: GO 57937
57713: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
57714: LD_ADDR_VAR 0 2
57718: PUSH
57719: LD_INT 1
57721: PUSH
57722: LD_INT 2
57724: PUSH
57725: LD_INT 3
57727: PUSH
57728: LD_INT 4
57730: PUSH
57731: LD_INT 5
57733: PUSH
57734: LD_INT 6
57736: PUSH
57737: LD_INT 7
57739: PUSH
57740: LD_INT 8
57742: PUSH
57743: LD_INT 9
57745: PUSH
57746: LD_INT 10
57748: PUSH
57749: LD_INT 11
57751: PUSH
57752: LD_INT 12
57754: PUSH
57755: LD_INT 13
57757: PUSH
57758: LD_INT 14
57760: PUSH
57761: LD_INT 15
57763: PUSH
57764: LD_INT 16
57766: PUSH
57767: LD_INT 17
57769: PUSH
57770: LD_INT 18
57772: PUSH
57773: LD_INT 19
57775: PUSH
57776: LD_INT 20
57778: PUSH
57779: LD_INT 21
57781: PUSH
57782: LD_INT 22
57784: PUSH
57785: LD_INT 23
57787: PUSH
57788: LD_INT 24
57790: PUSH
57791: LD_INT 25
57793: PUSH
57794: LD_INT 26
57796: PUSH
57797: LD_INT 27
57799: PUSH
57800: LD_INT 28
57802: PUSH
57803: LD_INT 29
57805: PUSH
57806: LD_INT 30
57808: PUSH
57809: LD_INT 31
57811: PUSH
57812: LD_INT 32
57814: PUSH
57815: LD_INT 33
57817: PUSH
57818: LD_INT 34
57820: PUSH
57821: LD_INT 36
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 101
57863: PUSH
57864: LD_INT 102
57866: PUSH
57867: LD_INT 103
57869: PUSH
57870: LD_INT 104
57872: PUSH
57873: LD_INT 105
57875: PUSH
57876: LD_INT 106
57878: PUSH
57879: LD_INT 107
57881: PUSH
57882: LD_INT 108
57884: PUSH
57885: LD_INT 109
57887: PUSH
57888: LD_INT 110
57890: PUSH
57891: LD_INT 111
57893: PUSH
57894: LD_INT 112
57896: PUSH
57897: LD_INT 113
57899: PUSH
57900: LD_INT 114
57902: PUSH
57903: LD_INT 116
57905: PUSH
57906: LD_INT 117
57908: PUSH
57909: LD_INT 118
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: ST_TO_ADDR
57935: GO 58334
57937: LD_INT 18
57939: DOUBLE
57940: EQUAL
57941: IFTRUE 57945
57943: GO 58093
57945: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
57946: LD_ADDR_VAR 0 2
57950: PUSH
57951: LD_INT 2
57953: PUSH
57954: LD_INT 4
57956: PUSH
57957: LD_INT 5
57959: PUSH
57960: LD_INT 7
57962: PUSH
57963: LD_INT 11
57965: PUSH
57966: LD_INT 12
57968: PUSH
57969: LD_INT 15
57971: PUSH
57972: LD_INT 16
57974: PUSH
57975: LD_INT 20
57977: PUSH
57978: LD_INT 21
57980: PUSH
57981: LD_INT 22
57983: PUSH
57984: LD_INT 23
57986: PUSH
57987: LD_INT 25
57989: PUSH
57990: LD_INT 26
57992: PUSH
57993: LD_INT 30
57995: PUSH
57996: LD_INT 31
57998: PUSH
57999: LD_INT 32
58001: PUSH
58002: LD_INT 33
58004: PUSH
58005: LD_INT 34
58007: PUSH
58008: LD_INT 35
58010: PUSH
58011: LD_INT 36
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 101
58039: PUSH
58040: LD_INT 102
58042: PUSH
58043: LD_INT 103
58045: PUSH
58046: LD_INT 106
58048: PUSH
58049: LD_INT 108
58051: PUSH
58052: LD_INT 112
58054: PUSH
58055: LD_INT 113
58057: PUSH
58058: LD_INT 114
58060: PUSH
58061: LD_INT 115
58063: PUSH
58064: LD_INT 116
58066: PUSH
58067: LD_INT 117
58069: PUSH
58070: LD_INT 118
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: ST_TO_ADDR
58091: GO 58334
58093: LD_INT 19
58095: DOUBLE
58096: EQUAL
58097: IFTRUE 58101
58099: GO 58333
58101: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
58102: LD_ADDR_VAR 0 2
58106: PUSH
58107: LD_INT 1
58109: PUSH
58110: LD_INT 2
58112: PUSH
58113: LD_INT 3
58115: PUSH
58116: LD_INT 4
58118: PUSH
58119: LD_INT 5
58121: PUSH
58122: LD_INT 6
58124: PUSH
58125: LD_INT 7
58127: PUSH
58128: LD_INT 8
58130: PUSH
58131: LD_INT 9
58133: PUSH
58134: LD_INT 10
58136: PUSH
58137: LD_INT 11
58139: PUSH
58140: LD_INT 12
58142: PUSH
58143: LD_INT 13
58145: PUSH
58146: LD_INT 14
58148: PUSH
58149: LD_INT 15
58151: PUSH
58152: LD_INT 16
58154: PUSH
58155: LD_INT 17
58157: PUSH
58158: LD_INT 18
58160: PUSH
58161: LD_INT 19
58163: PUSH
58164: LD_INT 20
58166: PUSH
58167: LD_INT 21
58169: PUSH
58170: LD_INT 22
58172: PUSH
58173: LD_INT 23
58175: PUSH
58176: LD_INT 24
58178: PUSH
58179: LD_INT 25
58181: PUSH
58182: LD_INT 26
58184: PUSH
58185: LD_INT 27
58187: PUSH
58188: LD_INT 28
58190: PUSH
58191: LD_INT 29
58193: PUSH
58194: LD_INT 30
58196: PUSH
58197: LD_INT 31
58199: PUSH
58200: LD_INT 32
58202: PUSH
58203: LD_INT 33
58205: PUSH
58206: LD_INT 34
58208: PUSH
58209: LD_INT 35
58211: PUSH
58212: LD_INT 36
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 101
58255: PUSH
58256: LD_INT 102
58258: PUSH
58259: LD_INT 103
58261: PUSH
58262: LD_INT 104
58264: PUSH
58265: LD_INT 105
58267: PUSH
58268: LD_INT 106
58270: PUSH
58271: LD_INT 107
58273: PUSH
58274: LD_INT 108
58276: PUSH
58277: LD_INT 109
58279: PUSH
58280: LD_INT 110
58282: PUSH
58283: LD_INT 111
58285: PUSH
58286: LD_INT 112
58288: PUSH
58289: LD_INT 113
58291: PUSH
58292: LD_INT 114
58294: PUSH
58295: LD_INT 115
58297: PUSH
58298: LD_INT 116
58300: PUSH
58301: LD_INT 117
58303: PUSH
58304: LD_INT 118
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: ST_TO_ADDR
58331: GO 58334
58333: POP
// end else
58334: GO 58565
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
58336: LD_ADDR_VAR 0 2
58340: PUSH
58341: LD_INT 1
58343: PUSH
58344: LD_INT 2
58346: PUSH
58347: LD_INT 3
58349: PUSH
58350: LD_INT 4
58352: PUSH
58353: LD_INT 5
58355: PUSH
58356: LD_INT 6
58358: PUSH
58359: LD_INT 7
58361: PUSH
58362: LD_INT 8
58364: PUSH
58365: LD_INT 9
58367: PUSH
58368: LD_INT 10
58370: PUSH
58371: LD_INT 11
58373: PUSH
58374: LD_INT 12
58376: PUSH
58377: LD_INT 13
58379: PUSH
58380: LD_INT 14
58382: PUSH
58383: LD_INT 15
58385: PUSH
58386: LD_INT 16
58388: PUSH
58389: LD_INT 17
58391: PUSH
58392: LD_INT 18
58394: PUSH
58395: LD_INT 19
58397: PUSH
58398: LD_INT 20
58400: PUSH
58401: LD_INT 21
58403: PUSH
58404: LD_INT 22
58406: PUSH
58407: LD_INT 23
58409: PUSH
58410: LD_INT 24
58412: PUSH
58413: LD_INT 25
58415: PUSH
58416: LD_INT 26
58418: PUSH
58419: LD_INT 27
58421: PUSH
58422: LD_INT 28
58424: PUSH
58425: LD_INT 29
58427: PUSH
58428: LD_INT 30
58430: PUSH
58431: LD_INT 31
58433: PUSH
58434: LD_INT 32
58436: PUSH
58437: LD_INT 33
58439: PUSH
58440: LD_INT 34
58442: PUSH
58443: LD_INT 35
58445: PUSH
58446: LD_INT 36
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 101
58489: PUSH
58490: LD_INT 102
58492: PUSH
58493: LD_INT 103
58495: PUSH
58496: LD_INT 104
58498: PUSH
58499: LD_INT 105
58501: PUSH
58502: LD_INT 106
58504: PUSH
58505: LD_INT 107
58507: PUSH
58508: LD_INT 108
58510: PUSH
58511: LD_INT 109
58513: PUSH
58514: LD_INT 110
58516: PUSH
58517: LD_INT 111
58519: PUSH
58520: LD_INT 112
58522: PUSH
58523: LD_INT 113
58525: PUSH
58526: LD_INT 114
58528: PUSH
58529: LD_INT 115
58531: PUSH
58532: LD_INT 116
58534: PUSH
58535: LD_INT 117
58537: PUSH
58538: LD_INT 118
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: ST_TO_ADDR
// if result then
58565: LD_VAR 0 2
58569: IFFALSE 59355
// begin normal :=  ;
58571: LD_ADDR_VAR 0 5
58575: PUSH
58576: LD_STRING 
58578: ST_TO_ADDR
// hardcore :=  ;
58579: LD_ADDR_VAR 0 6
58583: PUSH
58584: LD_STRING 
58586: ST_TO_ADDR
// active :=  ;
58587: LD_ADDR_VAR 0 7
58591: PUSH
58592: LD_STRING 
58594: ST_TO_ADDR
// for i = 1 to normalCounter do
58595: LD_ADDR_VAR 0 8
58599: PUSH
58600: DOUBLE
58601: LD_INT 1
58603: DEC
58604: ST_TO_ADDR
58605: LD_EXP 116
58609: PUSH
58610: FOR_TO
58611: IFFALSE 58712
// begin tmp := 0 ;
58613: LD_ADDR_VAR 0 3
58617: PUSH
58618: LD_STRING 0
58620: ST_TO_ADDR
// if result [ 1 ] then
58621: LD_VAR 0 2
58625: PUSH
58626: LD_INT 1
58628: ARRAY
58629: IFFALSE 58694
// if result [ 1 ] [ 1 ] = i then
58631: LD_VAR 0 2
58635: PUSH
58636: LD_INT 1
58638: ARRAY
58639: PUSH
58640: LD_INT 1
58642: ARRAY
58643: PUSH
58644: LD_VAR 0 8
58648: EQUAL
58649: IFFALSE 58694
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
58651: LD_ADDR_VAR 0 2
58655: PUSH
58656: LD_VAR 0 2
58660: PPUSH
58661: LD_INT 1
58663: PPUSH
58664: LD_VAR 0 2
58668: PUSH
58669: LD_INT 1
58671: ARRAY
58672: PPUSH
58673: LD_INT 1
58675: PPUSH
58676: CALL_OW 3
58680: PPUSH
58681: CALL_OW 1
58685: ST_TO_ADDR
// tmp := 1 ;
58686: LD_ADDR_VAR 0 3
58690: PUSH
58691: LD_STRING 1
58693: ST_TO_ADDR
// end ; normal := normal & tmp ;
58694: LD_ADDR_VAR 0 5
58698: PUSH
58699: LD_VAR 0 5
58703: PUSH
58704: LD_VAR 0 3
58708: STR
58709: ST_TO_ADDR
// end ;
58710: GO 58610
58712: POP
58713: POP
// for i = 1 to hardcoreCounter do
58714: LD_ADDR_VAR 0 8
58718: PUSH
58719: DOUBLE
58720: LD_INT 1
58722: DEC
58723: ST_TO_ADDR
58724: LD_EXP 117
58728: PUSH
58729: FOR_TO
58730: IFFALSE 58835
// begin tmp := 0 ;
58732: LD_ADDR_VAR 0 3
58736: PUSH
58737: LD_STRING 0
58739: ST_TO_ADDR
// if result [ 2 ] then
58740: LD_VAR 0 2
58744: PUSH
58745: LD_INT 2
58747: ARRAY
58748: IFFALSE 58817
// if result [ 2 ] [ 1 ] = 100 + i then
58750: LD_VAR 0 2
58754: PUSH
58755: LD_INT 2
58757: ARRAY
58758: PUSH
58759: LD_INT 1
58761: ARRAY
58762: PUSH
58763: LD_INT 100
58765: PUSH
58766: LD_VAR 0 8
58770: PLUS
58771: EQUAL
58772: IFFALSE 58817
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
58774: LD_ADDR_VAR 0 2
58778: PUSH
58779: LD_VAR 0 2
58783: PPUSH
58784: LD_INT 2
58786: PPUSH
58787: LD_VAR 0 2
58791: PUSH
58792: LD_INT 2
58794: ARRAY
58795: PPUSH
58796: LD_INT 1
58798: PPUSH
58799: CALL_OW 3
58803: PPUSH
58804: CALL_OW 1
58808: ST_TO_ADDR
// tmp := 1 ;
58809: LD_ADDR_VAR 0 3
58813: PUSH
58814: LD_STRING 1
58816: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
58817: LD_ADDR_VAR 0 6
58821: PUSH
58822: LD_VAR 0 6
58826: PUSH
58827: LD_VAR 0 3
58831: STR
58832: ST_TO_ADDR
// end ;
58833: GO 58729
58835: POP
58836: POP
// if isGameLoad then
58837: LD_VAR 0 1
58841: IFFALSE 59316
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
58843: LD_ADDR_VAR 0 4
58847: PUSH
58848: LD_EXP 120
58852: PUSH
58853: LD_EXP 119
58857: PUSH
58858: LD_EXP 121
58862: PUSH
58863: LD_EXP 118
58867: PUSH
58868: LD_EXP 122
58872: PUSH
58873: LD_EXP 123
58877: PUSH
58878: LD_EXP 124
58882: PUSH
58883: LD_EXP 125
58887: PUSH
58888: LD_EXP 126
58892: PUSH
58893: LD_EXP 127
58897: PUSH
58898: LD_EXP 128
58902: PUSH
58903: LD_EXP 129
58907: PUSH
58908: LD_EXP 130
58912: PUSH
58913: LD_EXP 131
58917: PUSH
58918: LD_EXP 139
58922: PUSH
58923: LD_EXP 140
58927: PUSH
58928: LD_EXP 141
58932: PUSH
58933: LD_EXP 142
58937: PUSH
58938: LD_EXP 144
58942: PUSH
58943: LD_EXP 145
58947: PUSH
58948: LD_EXP 146
58952: PUSH
58953: LD_EXP 149
58957: PUSH
58958: LD_EXP 151
58962: PUSH
58963: LD_EXP 152
58967: PUSH
58968: LD_EXP 153
58972: PUSH
58973: LD_EXP 155
58977: PUSH
58978: LD_EXP 156
58982: PUSH
58983: LD_EXP 159
58987: PUSH
58988: LD_EXP 160
58992: PUSH
58993: LD_EXP 161
58997: PUSH
58998: LD_EXP 162
59002: PUSH
59003: LD_EXP 163
59007: PUSH
59008: LD_EXP 164
59012: PUSH
59013: LD_EXP 165
59017: PUSH
59018: LD_EXP 166
59022: PUSH
59023: LD_EXP 167
59027: PUSH
59028: LD_EXP 132
59032: PUSH
59033: LD_EXP 133
59037: PUSH
59038: LD_EXP 136
59042: PUSH
59043: LD_EXP 137
59047: PUSH
59048: LD_EXP 138
59052: PUSH
59053: LD_EXP 134
59057: PUSH
59058: LD_EXP 135
59062: PUSH
59063: LD_EXP 143
59067: PUSH
59068: LD_EXP 147
59072: PUSH
59073: LD_EXP 148
59077: PUSH
59078: LD_EXP 150
59082: PUSH
59083: LD_EXP 154
59087: PUSH
59088: LD_EXP 157
59092: PUSH
59093: LD_EXP 158
59097: PUSH
59098: LD_EXP 168
59102: PUSH
59103: LD_EXP 169
59107: PUSH
59108: LD_EXP 170
59112: PUSH
59113: LD_EXP 171
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: ST_TO_ADDR
// tmp :=  ;
59174: LD_ADDR_VAR 0 3
59178: PUSH
59179: LD_STRING 
59181: ST_TO_ADDR
// for i = 1 to normalCounter do
59182: LD_ADDR_VAR 0 8
59186: PUSH
59187: DOUBLE
59188: LD_INT 1
59190: DEC
59191: ST_TO_ADDR
59192: LD_EXP 116
59196: PUSH
59197: FOR_TO
59198: IFFALSE 59234
// begin if flags [ i ] then
59200: LD_VAR 0 4
59204: PUSH
59205: LD_VAR 0 8
59209: ARRAY
59210: IFFALSE 59232
// tmp := tmp & i & ; ;
59212: LD_ADDR_VAR 0 3
59216: PUSH
59217: LD_VAR 0 3
59221: PUSH
59222: LD_VAR 0 8
59226: STR
59227: PUSH
59228: LD_STRING ;
59230: STR
59231: ST_TO_ADDR
// end ;
59232: GO 59197
59234: POP
59235: POP
// for i = 1 to hardcoreCounter do
59236: LD_ADDR_VAR 0 8
59240: PUSH
59241: DOUBLE
59242: LD_INT 1
59244: DEC
59245: ST_TO_ADDR
59246: LD_EXP 117
59250: PUSH
59251: FOR_TO
59252: IFFALSE 59298
// begin if flags [ normalCounter + i ] then
59254: LD_VAR 0 4
59258: PUSH
59259: LD_EXP 116
59263: PUSH
59264: LD_VAR 0 8
59268: PLUS
59269: ARRAY
59270: IFFALSE 59296
// tmp := tmp & ( 100 + i ) & ; ;
59272: LD_ADDR_VAR 0 3
59276: PUSH
59277: LD_VAR 0 3
59281: PUSH
59282: LD_INT 100
59284: PUSH
59285: LD_VAR 0 8
59289: PLUS
59290: STR
59291: PUSH
59292: LD_STRING ;
59294: STR
59295: ST_TO_ADDR
// end ;
59296: GO 59251
59298: POP
59299: POP
// if tmp then
59300: LD_VAR 0 3
59304: IFFALSE 59316
// active := tmp ;
59306: LD_ADDR_VAR 0 7
59310: PUSH
59311: LD_VAR 0 3
59315: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
59316: LD_STRING getStreamItemsFromMission("
59318: PUSH
59319: LD_VAR 0 5
59323: STR
59324: PUSH
59325: LD_STRING ","
59327: STR
59328: PUSH
59329: LD_VAR 0 6
59333: STR
59334: PUSH
59335: LD_STRING ","
59337: STR
59338: PUSH
59339: LD_VAR 0 7
59343: STR
59344: PUSH
59345: LD_STRING ")
59347: STR
59348: PPUSH
59349: CALL_OW 559
// end else
59353: GO 59362
// ToLua ( getStreamItemsFromMission("","","") ) ;
59355: LD_STRING getStreamItemsFromMission("","","")
59357: PPUSH
59358: CALL_OW 559
// end ;
59362: LD_VAR 0 2
59366: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
59367: LD_EXP 115
59371: PUSH
59372: LD_EXP 120
59376: AND
59377: IFFALSE 59501
59379: GO 59381
59381: DISABLE
59382: LD_INT 0
59384: PPUSH
59385: PPUSH
// begin enable ;
59386: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
59387: LD_ADDR_VAR 0 2
59391: PUSH
59392: LD_INT 22
59394: PUSH
59395: LD_OWVAR 2
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 2
59406: PUSH
59407: LD_INT 34
59409: PUSH
59410: LD_INT 7
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 34
59419: PUSH
59420: LD_INT 45
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 34
59429: PUSH
59430: LD_INT 28
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 34
59439: PUSH
59440: LD_INT 47
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PPUSH
59458: CALL_OW 69
59462: ST_TO_ADDR
// if not tmp then
59463: LD_VAR 0 2
59467: NOT
59468: IFFALSE 59472
// exit ;
59470: GO 59501
// for i in tmp do
59472: LD_ADDR_VAR 0 1
59476: PUSH
59477: LD_VAR 0 2
59481: PUSH
59482: FOR_IN
59483: IFFALSE 59499
// begin SetLives ( i , 0 ) ;
59485: LD_VAR 0 1
59489: PPUSH
59490: LD_INT 0
59492: PPUSH
59493: CALL_OW 234
// end ;
59497: GO 59482
59499: POP
59500: POP
// end ;
59501: PPOPN 2
59503: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
59504: LD_EXP 115
59508: PUSH
59509: LD_EXP 121
59513: AND
59514: IFFALSE 59598
59516: GO 59518
59518: DISABLE
59519: LD_INT 0
59521: PPUSH
59522: PPUSH
// begin enable ;
59523: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
59524: LD_ADDR_VAR 0 2
59528: PUSH
59529: LD_INT 22
59531: PUSH
59532: LD_OWVAR 2
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 32
59543: PUSH
59544: LD_INT 3
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PPUSH
59555: CALL_OW 69
59559: ST_TO_ADDR
// if not tmp then
59560: LD_VAR 0 2
59564: NOT
59565: IFFALSE 59569
// exit ;
59567: GO 59598
// for i in tmp do
59569: LD_ADDR_VAR 0 1
59573: PUSH
59574: LD_VAR 0 2
59578: PUSH
59579: FOR_IN
59580: IFFALSE 59596
// begin SetLives ( i , 0 ) ;
59582: LD_VAR 0 1
59586: PPUSH
59587: LD_INT 0
59589: PPUSH
59590: CALL_OW 234
// end ;
59594: GO 59579
59596: POP
59597: POP
// end ;
59598: PPOPN 2
59600: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
59601: LD_EXP 115
59605: PUSH
59606: LD_EXP 118
59610: AND
59611: IFFALSE 59704
59613: GO 59615
59615: DISABLE
59616: LD_INT 0
59618: PPUSH
// begin enable ;
59619: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
59620: LD_ADDR_VAR 0 1
59624: PUSH
59625: LD_INT 22
59627: PUSH
59628: LD_OWVAR 2
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 2
59639: PUSH
59640: LD_INT 25
59642: PUSH
59643: LD_INT 5
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 25
59652: PUSH
59653: LD_INT 9
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 25
59662: PUSH
59663: LD_INT 8
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PPUSH
59680: CALL_OW 69
59684: PUSH
59685: FOR_IN
59686: IFFALSE 59702
// begin SetClass ( i , 1 ) ;
59688: LD_VAR 0 1
59692: PPUSH
59693: LD_INT 1
59695: PPUSH
59696: CALL_OW 336
// end ;
59700: GO 59685
59702: POP
59703: POP
// end ;
59704: PPOPN 1
59706: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
59707: LD_EXP 115
59711: PUSH
59712: LD_EXP 119
59716: AND
59717: PUSH
59718: LD_OWVAR 65
59722: PUSH
59723: LD_INT 7
59725: LESS
59726: AND
59727: IFFALSE 59741
59729: GO 59731
59731: DISABLE
// begin enable ;
59732: ENABLE
// game_speed := 7 ;
59733: LD_ADDR_OWVAR 65
59737: PUSH
59738: LD_INT 7
59740: ST_TO_ADDR
// end ;
59741: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
59742: LD_EXP 115
59746: PUSH
59747: LD_EXP 122
59751: AND
59752: IFFALSE 59954
59754: GO 59756
59756: DISABLE
59757: LD_INT 0
59759: PPUSH
59760: PPUSH
59761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
59762: LD_ADDR_VAR 0 3
59766: PUSH
59767: LD_INT 81
59769: PUSH
59770: LD_OWVAR 2
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 21
59781: PUSH
59782: LD_INT 1
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PPUSH
59793: CALL_OW 69
59797: ST_TO_ADDR
// if not tmp then
59798: LD_VAR 0 3
59802: NOT
59803: IFFALSE 59807
// exit ;
59805: GO 59954
// if tmp > 5 then
59807: LD_VAR 0 3
59811: PUSH
59812: LD_INT 5
59814: GREATER
59815: IFFALSE 59827
// k := 5 else
59817: LD_ADDR_VAR 0 2
59821: PUSH
59822: LD_INT 5
59824: ST_TO_ADDR
59825: GO 59837
// k := tmp ;
59827: LD_ADDR_VAR 0 2
59831: PUSH
59832: LD_VAR 0 3
59836: ST_TO_ADDR
// for i := 1 to k do
59837: LD_ADDR_VAR 0 1
59841: PUSH
59842: DOUBLE
59843: LD_INT 1
59845: DEC
59846: ST_TO_ADDR
59847: LD_VAR 0 2
59851: PUSH
59852: FOR_TO
59853: IFFALSE 59952
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
59855: LD_VAR 0 3
59859: PUSH
59860: LD_VAR 0 1
59864: ARRAY
59865: PPUSH
59866: LD_VAR 0 1
59870: PUSH
59871: LD_INT 4
59873: MOD
59874: PUSH
59875: LD_INT 1
59877: PLUS
59878: PPUSH
59879: CALL_OW 259
59883: PUSH
59884: LD_INT 10
59886: LESS
59887: IFFALSE 59950
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
59889: LD_VAR 0 3
59893: PUSH
59894: LD_VAR 0 1
59898: ARRAY
59899: PPUSH
59900: LD_VAR 0 1
59904: PUSH
59905: LD_INT 4
59907: MOD
59908: PUSH
59909: LD_INT 1
59911: PLUS
59912: PPUSH
59913: LD_VAR 0 3
59917: PUSH
59918: LD_VAR 0 1
59922: ARRAY
59923: PPUSH
59924: LD_VAR 0 1
59928: PUSH
59929: LD_INT 4
59931: MOD
59932: PUSH
59933: LD_INT 1
59935: PLUS
59936: PPUSH
59937: CALL_OW 259
59941: PUSH
59942: LD_INT 1
59944: PLUS
59945: PPUSH
59946: CALL_OW 237
59950: GO 59852
59952: POP
59953: POP
// end ;
59954: PPOPN 3
59956: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
59957: LD_EXP 115
59961: PUSH
59962: LD_EXP 123
59966: AND
59967: IFFALSE 59987
59969: GO 59971
59971: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
59972: LD_INT 4
59974: PPUSH
59975: LD_OWVAR 2
59979: PPUSH
59980: LD_INT 0
59982: PPUSH
59983: CALL_OW 324
59987: END
// every 0 0$1 trigger StreamModeActive and sShovel do
59988: LD_EXP 115
59992: PUSH
59993: LD_EXP 152
59997: AND
59998: IFFALSE 60018
60000: GO 60002
60002: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
60003: LD_INT 19
60005: PPUSH
60006: LD_OWVAR 2
60010: PPUSH
60011: LD_INT 0
60013: PPUSH
60014: CALL_OW 324
60018: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
60019: LD_EXP 115
60023: PUSH
60024: LD_EXP 124
60028: AND
60029: IFFALSE 60131
60031: GO 60033
60033: DISABLE
60034: LD_INT 0
60036: PPUSH
60037: PPUSH
// begin enable ;
60038: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
60039: LD_ADDR_VAR 0 2
60043: PUSH
60044: LD_INT 22
60046: PUSH
60047: LD_OWVAR 2
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 2
60058: PUSH
60059: LD_INT 34
60061: PUSH
60062: LD_INT 11
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 34
60071: PUSH
60072: LD_INT 30
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: LIST
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PPUSH
60088: CALL_OW 69
60092: ST_TO_ADDR
// if not tmp then
60093: LD_VAR 0 2
60097: NOT
60098: IFFALSE 60102
// exit ;
60100: GO 60131
// for i in tmp do
60102: LD_ADDR_VAR 0 1
60106: PUSH
60107: LD_VAR 0 2
60111: PUSH
60112: FOR_IN
60113: IFFALSE 60129
// begin SetLives ( i , 0 ) ;
60115: LD_VAR 0 1
60119: PPUSH
60120: LD_INT 0
60122: PPUSH
60123: CALL_OW 234
// end ;
60127: GO 60112
60129: POP
60130: POP
// end ;
60131: PPOPN 2
60133: END
// every 0 0$1 trigger StreamModeActive and sBunker do
60134: LD_EXP 115
60138: PUSH
60139: LD_EXP 125
60143: AND
60144: IFFALSE 60164
60146: GO 60148
60148: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
60149: LD_INT 32
60151: PPUSH
60152: LD_OWVAR 2
60156: PPUSH
60157: LD_INT 0
60159: PPUSH
60160: CALL_OW 324
60164: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
60165: LD_EXP 115
60169: PUSH
60170: LD_EXP 126
60174: AND
60175: IFFALSE 60356
60177: GO 60179
60179: DISABLE
60180: LD_INT 0
60182: PPUSH
60183: PPUSH
60184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
60185: LD_ADDR_VAR 0 2
60189: PUSH
60190: LD_INT 22
60192: PUSH
60193: LD_OWVAR 2
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 33
60204: PUSH
60205: LD_INT 3
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PPUSH
60216: CALL_OW 69
60220: ST_TO_ADDR
// if not tmp then
60221: LD_VAR 0 2
60225: NOT
60226: IFFALSE 60230
// exit ;
60228: GO 60356
// side := 0 ;
60230: LD_ADDR_VAR 0 3
60234: PUSH
60235: LD_INT 0
60237: ST_TO_ADDR
// for i := 1 to 8 do
60238: LD_ADDR_VAR 0 1
60242: PUSH
60243: DOUBLE
60244: LD_INT 1
60246: DEC
60247: ST_TO_ADDR
60248: LD_INT 8
60250: PUSH
60251: FOR_TO
60252: IFFALSE 60300
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
60254: LD_OWVAR 2
60258: PUSH
60259: LD_VAR 0 1
60263: NONEQUAL
60264: PUSH
60265: LD_OWVAR 2
60269: PPUSH
60270: LD_VAR 0 1
60274: PPUSH
60275: CALL_OW 81
60279: PUSH
60280: LD_INT 2
60282: EQUAL
60283: AND
60284: IFFALSE 60298
// begin side := i ;
60286: LD_ADDR_VAR 0 3
60290: PUSH
60291: LD_VAR 0 1
60295: ST_TO_ADDR
// break ;
60296: GO 60300
// end ;
60298: GO 60251
60300: POP
60301: POP
// if not side then
60302: LD_VAR 0 3
60306: NOT
60307: IFFALSE 60311
// exit ;
60309: GO 60356
// for i := 1 to tmp do
60311: LD_ADDR_VAR 0 1
60315: PUSH
60316: DOUBLE
60317: LD_INT 1
60319: DEC
60320: ST_TO_ADDR
60321: LD_VAR 0 2
60325: PUSH
60326: FOR_TO
60327: IFFALSE 60354
// if Prob ( 60 ) then
60329: LD_INT 60
60331: PPUSH
60332: CALL_OW 13
60336: IFFALSE 60352
// SetSide ( i , side ) ;
60338: LD_VAR 0 1
60342: PPUSH
60343: LD_VAR 0 3
60347: PPUSH
60348: CALL_OW 235
60352: GO 60326
60354: POP
60355: POP
// end ;
60356: PPOPN 3
60358: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
60359: LD_EXP 115
60363: PUSH
60364: LD_EXP 128
60368: AND
60369: IFFALSE 60488
60371: GO 60373
60373: DISABLE
60374: LD_INT 0
60376: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
60377: LD_ADDR_VAR 0 1
60381: PUSH
60382: LD_INT 22
60384: PUSH
60385: LD_OWVAR 2
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 21
60396: PUSH
60397: LD_INT 1
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 3
60406: PUSH
60407: LD_INT 23
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: LIST
60425: PPUSH
60426: CALL_OW 69
60430: PUSH
60431: FOR_IN
60432: IFFALSE 60486
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
60434: LD_VAR 0 1
60438: PPUSH
60439: CALL_OW 257
60443: PUSH
60444: LD_INT 1
60446: PUSH
60447: LD_INT 2
60449: PUSH
60450: LD_INT 3
60452: PUSH
60453: LD_INT 4
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: IN
60462: IFFALSE 60484
// SetClass ( un , rand ( 1 , 4 ) ) ;
60464: LD_VAR 0 1
60468: PPUSH
60469: LD_INT 1
60471: PPUSH
60472: LD_INT 4
60474: PPUSH
60475: CALL_OW 12
60479: PPUSH
60480: CALL_OW 336
60484: GO 60431
60486: POP
60487: POP
// end ;
60488: PPOPN 1
60490: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
60491: LD_EXP 115
60495: PUSH
60496: LD_EXP 127
60500: AND
60501: IFFALSE 60580
60503: GO 60505
60505: DISABLE
60506: LD_INT 0
60508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60509: LD_ADDR_VAR 0 1
60513: PUSH
60514: LD_INT 22
60516: PUSH
60517: LD_OWVAR 2
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 21
60528: PUSH
60529: LD_INT 3
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PPUSH
60540: CALL_OW 69
60544: ST_TO_ADDR
// if not tmp then
60545: LD_VAR 0 1
60549: NOT
60550: IFFALSE 60554
// exit ;
60552: GO 60580
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
60554: LD_VAR 0 1
60558: PUSH
60559: LD_INT 1
60561: PPUSH
60562: LD_VAR 0 1
60566: PPUSH
60567: CALL_OW 12
60571: ARRAY
60572: PPUSH
60573: LD_INT 100
60575: PPUSH
60576: CALL_OW 234
// end ;
60580: PPOPN 1
60582: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
60583: LD_EXP 115
60587: PUSH
60588: LD_EXP 129
60592: AND
60593: IFFALSE 60691
60595: GO 60597
60597: DISABLE
60598: LD_INT 0
60600: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60601: LD_ADDR_VAR 0 1
60605: PUSH
60606: LD_INT 22
60608: PUSH
60609: LD_OWVAR 2
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 21
60620: PUSH
60621: LD_INT 1
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PPUSH
60632: CALL_OW 69
60636: ST_TO_ADDR
// if not tmp then
60637: LD_VAR 0 1
60641: NOT
60642: IFFALSE 60646
// exit ;
60644: GO 60691
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
60646: LD_VAR 0 1
60650: PUSH
60651: LD_INT 1
60653: PPUSH
60654: LD_VAR 0 1
60658: PPUSH
60659: CALL_OW 12
60663: ARRAY
60664: PPUSH
60665: LD_INT 1
60667: PPUSH
60668: LD_INT 4
60670: PPUSH
60671: CALL_OW 12
60675: PPUSH
60676: LD_INT 3000
60678: PPUSH
60679: LD_INT 9000
60681: PPUSH
60682: CALL_OW 12
60686: PPUSH
60687: CALL_OW 492
// end ;
60691: PPOPN 1
60693: END
// every 0 0$1 trigger StreamModeActive and sDepot do
60694: LD_EXP 115
60698: PUSH
60699: LD_EXP 130
60703: AND
60704: IFFALSE 60724
60706: GO 60708
60708: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
60709: LD_INT 1
60711: PPUSH
60712: LD_OWVAR 2
60716: PPUSH
60717: LD_INT 0
60719: PPUSH
60720: CALL_OW 324
60724: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
60725: LD_EXP 115
60729: PUSH
60730: LD_EXP 131
60734: AND
60735: IFFALSE 60818
60737: GO 60739
60739: DISABLE
60740: LD_INT 0
60742: PPUSH
60743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60744: LD_ADDR_VAR 0 2
60748: PUSH
60749: LD_INT 22
60751: PUSH
60752: LD_OWVAR 2
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 21
60763: PUSH
60764: LD_INT 3
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PPUSH
60775: CALL_OW 69
60779: ST_TO_ADDR
// if not tmp then
60780: LD_VAR 0 2
60784: NOT
60785: IFFALSE 60789
// exit ;
60787: GO 60818
// for i in tmp do
60789: LD_ADDR_VAR 0 1
60793: PUSH
60794: LD_VAR 0 2
60798: PUSH
60799: FOR_IN
60800: IFFALSE 60816
// SetBLevel ( i , 10 ) ;
60802: LD_VAR 0 1
60806: PPUSH
60807: LD_INT 10
60809: PPUSH
60810: CALL_OW 241
60814: GO 60799
60816: POP
60817: POP
// end ;
60818: PPOPN 2
60820: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
60821: LD_EXP 115
60825: PUSH
60826: LD_EXP 132
60830: AND
60831: IFFALSE 60942
60833: GO 60835
60835: DISABLE
60836: LD_INT 0
60838: PPUSH
60839: PPUSH
60840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60841: LD_ADDR_VAR 0 3
60845: PUSH
60846: LD_INT 22
60848: PUSH
60849: LD_OWVAR 2
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 25
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PPUSH
60872: CALL_OW 69
60876: ST_TO_ADDR
// if not tmp then
60877: LD_VAR 0 3
60881: NOT
60882: IFFALSE 60886
// exit ;
60884: GO 60942
// un := tmp [ rand ( 1 , tmp ) ] ;
60886: LD_ADDR_VAR 0 2
60890: PUSH
60891: LD_VAR 0 3
60895: PUSH
60896: LD_INT 1
60898: PPUSH
60899: LD_VAR 0 3
60903: PPUSH
60904: CALL_OW 12
60908: ARRAY
60909: ST_TO_ADDR
// if Crawls ( un ) then
60910: LD_VAR 0 2
60914: PPUSH
60915: CALL_OW 318
60919: IFFALSE 60930
// ComWalk ( un ) ;
60921: LD_VAR 0 2
60925: PPUSH
60926: CALL_OW 138
// SetClass ( un , class_sniper ) ;
60930: LD_VAR 0 2
60934: PPUSH
60935: LD_INT 5
60937: PPUSH
60938: CALL_OW 336
// end ;
60942: PPOPN 3
60944: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
60945: LD_EXP 115
60949: PUSH
60950: LD_EXP 133
60954: AND
60955: PUSH
60956: LD_OWVAR 67
60960: PUSH
60961: LD_INT 4
60963: LESS
60964: AND
60965: IFFALSE 60984
60967: GO 60969
60969: DISABLE
// begin Difficulty := Difficulty + 1 ;
60970: LD_ADDR_OWVAR 67
60974: PUSH
60975: LD_OWVAR 67
60979: PUSH
60980: LD_INT 1
60982: PLUS
60983: ST_TO_ADDR
// end ;
60984: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
60985: LD_EXP 115
60989: PUSH
60990: LD_EXP 134
60994: AND
60995: IFFALSE 61098
60997: GO 60999
60999: DISABLE
61000: LD_INT 0
61002: PPUSH
// begin for i := 1 to 5 do
61003: LD_ADDR_VAR 0 1
61007: PUSH
61008: DOUBLE
61009: LD_INT 1
61011: DEC
61012: ST_TO_ADDR
61013: LD_INT 5
61015: PUSH
61016: FOR_TO
61017: IFFALSE 61096
// begin uc_nation := nation_nature ;
61019: LD_ADDR_OWVAR 21
61023: PUSH
61024: LD_INT 0
61026: ST_TO_ADDR
// uc_side := 0 ;
61027: LD_ADDR_OWVAR 20
61031: PUSH
61032: LD_INT 0
61034: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61035: LD_ADDR_OWVAR 29
61039: PUSH
61040: LD_INT 12
61042: PUSH
61043: LD_INT 12
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: ST_TO_ADDR
// hc_agressivity := 20 ;
61050: LD_ADDR_OWVAR 35
61054: PUSH
61055: LD_INT 20
61057: ST_TO_ADDR
// hc_class := class_tiger ;
61058: LD_ADDR_OWVAR 28
61062: PUSH
61063: LD_INT 14
61065: ST_TO_ADDR
// hc_gallery :=  ;
61066: LD_ADDR_OWVAR 33
61070: PUSH
61071: LD_STRING 
61073: ST_TO_ADDR
// hc_name :=  ;
61074: LD_ADDR_OWVAR 26
61078: PUSH
61079: LD_STRING 
61081: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
61082: CALL_OW 44
61086: PPUSH
61087: LD_INT 0
61089: PPUSH
61090: CALL_OW 51
// end ;
61094: GO 61016
61096: POP
61097: POP
// end ;
61098: PPOPN 1
61100: END
// every 0 0$1 trigger StreamModeActive and sBomb do
61101: LD_EXP 115
61105: PUSH
61106: LD_EXP 135
61110: AND
61111: IFFALSE 61120
61113: GO 61115
61115: DISABLE
// StreamSibBomb ;
61116: CALL 61121 0 0
61120: END
// export function StreamSibBomb ; var i , x , y ; begin
61121: LD_INT 0
61123: PPUSH
61124: PPUSH
61125: PPUSH
61126: PPUSH
// result := false ;
61127: LD_ADDR_VAR 0 1
61131: PUSH
61132: LD_INT 0
61134: ST_TO_ADDR
// for i := 1 to 16 do
61135: LD_ADDR_VAR 0 2
61139: PUSH
61140: DOUBLE
61141: LD_INT 1
61143: DEC
61144: ST_TO_ADDR
61145: LD_INT 16
61147: PUSH
61148: FOR_TO
61149: IFFALSE 61348
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61151: LD_ADDR_VAR 0 3
61155: PUSH
61156: LD_INT 10
61158: PUSH
61159: LD_INT 20
61161: PUSH
61162: LD_INT 30
61164: PUSH
61165: LD_INT 40
61167: PUSH
61168: LD_INT 50
61170: PUSH
61171: LD_INT 60
61173: PUSH
61174: LD_INT 70
61176: PUSH
61177: LD_INT 80
61179: PUSH
61180: LD_INT 90
61182: PUSH
61183: LD_INT 100
61185: PUSH
61186: LD_INT 110
61188: PUSH
61189: LD_INT 120
61191: PUSH
61192: LD_INT 130
61194: PUSH
61195: LD_INT 140
61197: PUSH
61198: LD_INT 150
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 1
61220: PPUSH
61221: LD_INT 15
61223: PPUSH
61224: CALL_OW 12
61228: ARRAY
61229: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61230: LD_ADDR_VAR 0 4
61234: PUSH
61235: LD_INT 10
61237: PUSH
61238: LD_INT 20
61240: PUSH
61241: LD_INT 30
61243: PUSH
61244: LD_INT 40
61246: PUSH
61247: LD_INT 50
61249: PUSH
61250: LD_INT 60
61252: PUSH
61253: LD_INT 70
61255: PUSH
61256: LD_INT 80
61258: PUSH
61259: LD_INT 90
61261: PUSH
61262: LD_INT 100
61264: PUSH
61265: LD_INT 110
61267: PUSH
61268: LD_INT 120
61270: PUSH
61271: LD_INT 130
61273: PUSH
61274: LD_INT 140
61276: PUSH
61277: LD_INT 150
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 1
61299: PPUSH
61300: LD_INT 15
61302: PPUSH
61303: CALL_OW 12
61307: ARRAY
61308: ST_TO_ADDR
// if ValidHex ( x , y ) then
61309: LD_VAR 0 3
61313: PPUSH
61314: LD_VAR 0 4
61318: PPUSH
61319: CALL_OW 488
61323: IFFALSE 61346
// begin result := [ x , y ] ;
61325: LD_ADDR_VAR 0 1
61329: PUSH
61330: LD_VAR 0 3
61334: PUSH
61335: LD_VAR 0 4
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: ST_TO_ADDR
// break ;
61344: GO 61348
// end ; end ;
61346: GO 61148
61348: POP
61349: POP
// if result then
61350: LD_VAR 0 1
61354: IFFALSE 61414
// begin ToLua ( playSibBomb() ) ;
61356: LD_STRING playSibBomb()
61358: PPUSH
61359: CALL_OW 559
// wait ( 0 0$14 ) ;
61363: LD_INT 490
61365: PPUSH
61366: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
61370: LD_VAR 0 1
61374: PUSH
61375: LD_INT 1
61377: ARRAY
61378: PPUSH
61379: LD_VAR 0 1
61383: PUSH
61384: LD_INT 2
61386: ARRAY
61387: PPUSH
61388: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
61392: LD_VAR 0 1
61396: PUSH
61397: LD_INT 1
61399: ARRAY
61400: PPUSH
61401: LD_VAR 0 1
61405: PUSH
61406: LD_INT 2
61408: ARRAY
61409: PPUSH
61410: CALL_OW 429
// end ; end ;
61414: LD_VAR 0 1
61418: RET
// every 0 0$1 trigger StreamModeActive and sReset do
61419: LD_EXP 115
61423: PUSH
61424: LD_EXP 137
61428: AND
61429: IFFALSE 61441
61431: GO 61433
61433: DISABLE
// YouLost (  ) ;
61434: LD_STRING 
61436: PPUSH
61437: CALL_OW 104
61441: END
// every 0 0$1 trigger StreamModeActive and sFog do
61442: LD_EXP 115
61446: PUSH
61447: LD_EXP 136
61451: AND
61452: IFFALSE 61466
61454: GO 61456
61456: DISABLE
// FogOff ( your_side ) ;
61457: LD_OWVAR 2
61461: PPUSH
61462: CALL_OW 344
61466: END
// every 0 0$1 trigger StreamModeActive and sSun do
61467: LD_EXP 115
61471: PUSH
61472: LD_EXP 138
61476: AND
61477: IFFALSE 61505
61479: GO 61481
61481: DISABLE
// begin solar_recharge_percent := 0 ;
61482: LD_ADDR_OWVAR 79
61486: PUSH
61487: LD_INT 0
61489: ST_TO_ADDR
// wait ( 5 5$00 ) ;
61490: LD_INT 10500
61492: PPUSH
61493: CALL_OW 67
// solar_recharge_percent := 100 ;
61497: LD_ADDR_OWVAR 79
61501: PUSH
61502: LD_INT 100
61504: ST_TO_ADDR
// end ;
61505: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
61506: LD_EXP 115
61510: PUSH
61511: LD_EXP 139
61515: AND
61516: IFFALSE 61755
61518: GO 61520
61520: DISABLE
61521: LD_INT 0
61523: PPUSH
61524: PPUSH
61525: PPUSH
// begin tmp := [ ] ;
61526: LD_ADDR_VAR 0 3
61530: PUSH
61531: EMPTY
61532: ST_TO_ADDR
// for i := 1 to 6 do
61533: LD_ADDR_VAR 0 1
61537: PUSH
61538: DOUBLE
61539: LD_INT 1
61541: DEC
61542: ST_TO_ADDR
61543: LD_INT 6
61545: PUSH
61546: FOR_TO
61547: IFFALSE 61652
// begin uc_nation := nation_nature ;
61549: LD_ADDR_OWVAR 21
61553: PUSH
61554: LD_INT 0
61556: ST_TO_ADDR
// uc_side := 0 ;
61557: LD_ADDR_OWVAR 20
61561: PUSH
61562: LD_INT 0
61564: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61565: LD_ADDR_OWVAR 29
61569: PUSH
61570: LD_INT 12
61572: PUSH
61573: LD_INT 12
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: ST_TO_ADDR
// hc_agressivity := 20 ;
61580: LD_ADDR_OWVAR 35
61584: PUSH
61585: LD_INT 20
61587: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
61588: LD_ADDR_OWVAR 28
61592: PUSH
61593: LD_INT 17
61595: ST_TO_ADDR
// hc_gallery :=  ;
61596: LD_ADDR_OWVAR 33
61600: PUSH
61601: LD_STRING 
61603: ST_TO_ADDR
// hc_name :=  ;
61604: LD_ADDR_OWVAR 26
61608: PUSH
61609: LD_STRING 
61611: ST_TO_ADDR
// un := CreateHuman ;
61612: LD_ADDR_VAR 0 2
61616: PUSH
61617: CALL_OW 44
61621: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
61622: LD_VAR 0 2
61626: PPUSH
61627: LD_INT 1
61629: PPUSH
61630: CALL_OW 51
// tmp := tmp ^ un ;
61634: LD_ADDR_VAR 0 3
61638: PUSH
61639: LD_VAR 0 3
61643: PUSH
61644: LD_VAR 0 2
61648: ADD
61649: ST_TO_ADDR
// end ;
61650: GO 61546
61652: POP
61653: POP
// repeat wait ( 0 0$1 ) ;
61654: LD_INT 35
61656: PPUSH
61657: CALL_OW 67
// for un in tmp do
61661: LD_ADDR_VAR 0 2
61665: PUSH
61666: LD_VAR 0 3
61670: PUSH
61671: FOR_IN
61672: IFFALSE 61746
// begin if IsDead ( un ) then
61674: LD_VAR 0 2
61678: PPUSH
61679: CALL_OW 301
61683: IFFALSE 61703
// begin tmp := tmp diff un ;
61685: LD_ADDR_VAR 0 3
61689: PUSH
61690: LD_VAR 0 3
61694: PUSH
61695: LD_VAR 0 2
61699: DIFF
61700: ST_TO_ADDR
// continue ;
61701: GO 61671
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
61703: LD_VAR 0 2
61707: PPUSH
61708: LD_INT 3
61710: PUSH
61711: LD_INT 22
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PPUSH
61725: CALL_OW 69
61729: PPUSH
61730: LD_VAR 0 2
61734: PPUSH
61735: CALL_OW 74
61739: PPUSH
61740: CALL_OW 115
// end ;
61744: GO 61671
61746: POP
61747: POP
// until not tmp ;
61748: LD_VAR 0 3
61752: NOT
61753: IFFALSE 61654
// end ;
61755: PPOPN 3
61757: END
// every 0 0$1 trigger StreamModeActive and sTroll do
61758: LD_EXP 115
61762: PUSH
61763: LD_EXP 140
61767: AND
61768: IFFALSE 61822
61770: GO 61772
61772: DISABLE
// begin ToLua ( displayTroll(); ) ;
61773: LD_STRING displayTroll();
61775: PPUSH
61776: CALL_OW 559
// wait ( 3 3$00 ) ;
61780: LD_INT 6300
61782: PPUSH
61783: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61787: LD_STRING hideTroll();
61789: PPUSH
61790: CALL_OW 559
// wait ( 1 1$00 ) ;
61794: LD_INT 2100
61796: PPUSH
61797: CALL_OW 67
// ToLua ( displayTroll(); ) ;
61801: LD_STRING displayTroll();
61803: PPUSH
61804: CALL_OW 559
// wait ( 1 1$00 ) ;
61808: LD_INT 2100
61810: PPUSH
61811: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61815: LD_STRING hideTroll();
61817: PPUSH
61818: CALL_OW 559
// end ;
61822: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
61823: LD_EXP 115
61827: PUSH
61828: LD_EXP 141
61832: AND
61833: IFFALSE 61896
61835: GO 61837
61837: DISABLE
61838: LD_INT 0
61840: PPUSH
// begin p := 0 ;
61841: LD_ADDR_VAR 0 1
61845: PUSH
61846: LD_INT 0
61848: ST_TO_ADDR
// repeat game_speed := 1 ;
61849: LD_ADDR_OWVAR 65
61853: PUSH
61854: LD_INT 1
61856: ST_TO_ADDR
// wait ( 0 0$1 ) ;
61857: LD_INT 35
61859: PPUSH
61860: CALL_OW 67
// p := p + 1 ;
61864: LD_ADDR_VAR 0 1
61868: PUSH
61869: LD_VAR 0 1
61873: PUSH
61874: LD_INT 1
61876: PLUS
61877: ST_TO_ADDR
// until p >= 60 ;
61878: LD_VAR 0 1
61882: PUSH
61883: LD_INT 60
61885: GREATEREQUAL
61886: IFFALSE 61849
// game_speed := 4 ;
61888: LD_ADDR_OWVAR 65
61892: PUSH
61893: LD_INT 4
61895: ST_TO_ADDR
// end ;
61896: PPOPN 1
61898: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
61899: LD_EXP 115
61903: PUSH
61904: LD_EXP 142
61908: AND
61909: IFFALSE 62055
61911: GO 61913
61913: DISABLE
61914: LD_INT 0
61916: PPUSH
61917: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61918: LD_ADDR_VAR 0 1
61922: PUSH
61923: LD_INT 22
61925: PUSH
61926: LD_OWVAR 2
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 2
61937: PUSH
61938: LD_INT 30
61940: PUSH
61941: LD_INT 0
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 30
61950: PUSH
61951: LD_INT 1
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: LIST
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PPUSH
61967: CALL_OW 69
61971: ST_TO_ADDR
// if not depot then
61972: LD_VAR 0 1
61976: NOT
61977: IFFALSE 61981
// exit ;
61979: GO 62055
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
61981: LD_ADDR_VAR 0 2
61985: PUSH
61986: LD_VAR 0 1
61990: PUSH
61991: LD_INT 1
61993: PPUSH
61994: LD_VAR 0 1
61998: PPUSH
61999: CALL_OW 12
62003: ARRAY
62004: PPUSH
62005: CALL_OW 274
62009: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
62010: LD_VAR 0 2
62014: PPUSH
62015: LD_INT 1
62017: PPUSH
62018: LD_INT 0
62020: PPUSH
62021: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
62025: LD_VAR 0 2
62029: PPUSH
62030: LD_INT 2
62032: PPUSH
62033: LD_INT 0
62035: PPUSH
62036: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
62040: LD_VAR 0 2
62044: PPUSH
62045: LD_INT 3
62047: PPUSH
62048: LD_INT 0
62050: PPUSH
62051: CALL_OW 277
// end ;
62055: PPOPN 2
62057: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
62058: LD_EXP 115
62062: PUSH
62063: LD_EXP 143
62067: AND
62068: IFFALSE 62165
62070: GO 62072
62072: DISABLE
62073: LD_INT 0
62075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62076: LD_ADDR_VAR 0 1
62080: PUSH
62081: LD_INT 22
62083: PUSH
62084: LD_OWVAR 2
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 21
62095: PUSH
62096: LD_INT 1
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 3
62105: PUSH
62106: LD_INT 23
62108: PUSH
62109: LD_INT 0
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: LIST
62124: PPUSH
62125: CALL_OW 69
62129: ST_TO_ADDR
// if not tmp then
62130: LD_VAR 0 1
62134: NOT
62135: IFFALSE 62139
// exit ;
62137: GO 62165
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
62139: LD_VAR 0 1
62143: PUSH
62144: LD_INT 1
62146: PPUSH
62147: LD_VAR 0 1
62151: PPUSH
62152: CALL_OW 12
62156: ARRAY
62157: PPUSH
62158: LD_INT 200
62160: PPUSH
62161: CALL_OW 234
// end ;
62165: PPOPN 1
62167: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
62168: LD_EXP 115
62172: PUSH
62173: LD_EXP 144
62177: AND
62178: IFFALSE 62257
62180: GO 62182
62182: DISABLE
62183: LD_INT 0
62185: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
62186: LD_ADDR_VAR 0 1
62190: PUSH
62191: LD_INT 22
62193: PUSH
62194: LD_OWVAR 2
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 21
62205: PUSH
62206: LD_INT 2
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PPUSH
62217: CALL_OW 69
62221: ST_TO_ADDR
// if not tmp then
62222: LD_VAR 0 1
62226: NOT
62227: IFFALSE 62231
// exit ;
62229: GO 62257
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
62231: LD_VAR 0 1
62235: PUSH
62236: LD_INT 1
62238: PPUSH
62239: LD_VAR 0 1
62243: PPUSH
62244: CALL_OW 12
62248: ARRAY
62249: PPUSH
62250: LD_INT 60
62252: PPUSH
62253: CALL_OW 234
// end ;
62257: PPOPN 1
62259: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
62260: LD_EXP 115
62264: PUSH
62265: LD_EXP 145
62269: AND
62270: IFFALSE 62369
62272: GO 62274
62274: DISABLE
62275: LD_INT 0
62277: PPUSH
62278: PPUSH
// begin enable ;
62279: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
62280: LD_ADDR_VAR 0 1
62284: PUSH
62285: LD_INT 22
62287: PUSH
62288: LD_OWVAR 2
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 61
62299: PUSH
62300: EMPTY
62301: LIST
62302: PUSH
62303: LD_INT 33
62305: PUSH
62306: LD_INT 2
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: LIST
62317: PPUSH
62318: CALL_OW 69
62322: ST_TO_ADDR
// if not tmp then
62323: LD_VAR 0 1
62327: NOT
62328: IFFALSE 62332
// exit ;
62330: GO 62369
// for i in tmp do
62332: LD_ADDR_VAR 0 2
62336: PUSH
62337: LD_VAR 0 1
62341: PUSH
62342: FOR_IN
62343: IFFALSE 62367
// if IsControledBy ( i ) then
62345: LD_VAR 0 2
62349: PPUSH
62350: CALL_OW 312
62354: IFFALSE 62365
// ComUnlink ( i ) ;
62356: LD_VAR 0 2
62360: PPUSH
62361: CALL_OW 136
62365: GO 62342
62367: POP
62368: POP
// end ;
62369: PPOPN 2
62371: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
62372: LD_EXP 115
62376: PUSH
62377: LD_EXP 146
62381: AND
62382: IFFALSE 62522
62384: GO 62386
62386: DISABLE
62387: LD_INT 0
62389: PPUSH
62390: PPUSH
// begin ToLua ( displayPowell(); ) ;
62391: LD_STRING displayPowell();
62393: PPUSH
62394: CALL_OW 559
// uc_side := 0 ;
62398: LD_ADDR_OWVAR 20
62402: PUSH
62403: LD_INT 0
62405: ST_TO_ADDR
// uc_nation := 2 ;
62406: LD_ADDR_OWVAR 21
62410: PUSH
62411: LD_INT 2
62413: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
62414: LD_ADDR_OWVAR 37
62418: PUSH
62419: LD_INT 14
62421: ST_TO_ADDR
// vc_engine := engine_siberite ;
62422: LD_ADDR_OWVAR 39
62426: PUSH
62427: LD_INT 3
62429: ST_TO_ADDR
// vc_control := control_apeman ;
62430: LD_ADDR_OWVAR 38
62434: PUSH
62435: LD_INT 5
62437: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
62438: LD_ADDR_OWVAR 40
62442: PUSH
62443: LD_INT 29
62445: ST_TO_ADDR
// un := CreateVehicle ;
62446: LD_ADDR_VAR 0 2
62450: PUSH
62451: CALL_OW 45
62455: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62456: LD_VAR 0 2
62460: PPUSH
62461: LD_INT 1
62463: PPUSH
62464: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
62468: LD_INT 35
62470: PPUSH
62471: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
62475: LD_VAR 0 2
62479: PPUSH
62480: LD_INT 22
62482: PUSH
62483: LD_OWVAR 2
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PPUSH
62492: CALL_OW 69
62496: PPUSH
62497: LD_VAR 0 2
62501: PPUSH
62502: CALL_OW 74
62506: PPUSH
62507: CALL_OW 115
// until IsDead ( un ) ;
62511: LD_VAR 0 2
62515: PPUSH
62516: CALL_OW 301
62520: IFFALSE 62468
// end ;
62522: PPOPN 2
62524: END
// every 0 0$1 trigger StreamModeActive and sStu do
62525: LD_EXP 115
62529: PUSH
62530: LD_EXP 154
62534: AND
62535: IFFALSE 62551
62537: GO 62539
62539: DISABLE
// begin ToLua ( displayStucuk(); ) ;
62540: LD_STRING displayStucuk();
62542: PPUSH
62543: CALL_OW 559
// ResetFog ;
62547: CALL_OW 335
// end ;
62551: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
62552: LD_EXP 115
62556: PUSH
62557: LD_EXP 147
62561: AND
62562: IFFALSE 62703
62564: GO 62566
62566: DISABLE
62567: LD_INT 0
62569: PPUSH
62570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62571: LD_ADDR_VAR 0 2
62575: PUSH
62576: LD_INT 22
62578: PUSH
62579: LD_OWVAR 2
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 21
62590: PUSH
62591: LD_INT 1
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PPUSH
62602: CALL_OW 69
62606: ST_TO_ADDR
// if not tmp then
62607: LD_VAR 0 2
62611: NOT
62612: IFFALSE 62616
// exit ;
62614: GO 62703
// un := tmp [ rand ( 1 , tmp ) ] ;
62616: LD_ADDR_VAR 0 1
62620: PUSH
62621: LD_VAR 0 2
62625: PUSH
62626: LD_INT 1
62628: PPUSH
62629: LD_VAR 0 2
62633: PPUSH
62634: CALL_OW 12
62638: ARRAY
62639: ST_TO_ADDR
// SetSide ( un , 0 ) ;
62640: LD_VAR 0 1
62644: PPUSH
62645: LD_INT 0
62647: PPUSH
62648: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
62652: LD_VAR 0 1
62656: PPUSH
62657: LD_OWVAR 3
62661: PUSH
62662: LD_VAR 0 1
62666: DIFF
62667: PPUSH
62668: LD_VAR 0 1
62672: PPUSH
62673: CALL_OW 74
62677: PPUSH
62678: CALL_OW 115
// wait ( 0 0$20 ) ;
62682: LD_INT 700
62684: PPUSH
62685: CALL_OW 67
// SetSide ( un , your_side ) ;
62689: LD_VAR 0 1
62693: PPUSH
62694: LD_OWVAR 2
62698: PPUSH
62699: CALL_OW 235
// end ;
62703: PPOPN 2
62705: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
62706: LD_EXP 115
62710: PUSH
62711: LD_EXP 148
62715: AND
62716: IFFALSE 62822
62718: GO 62720
62720: DISABLE
62721: LD_INT 0
62723: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62724: LD_ADDR_VAR 0 1
62728: PUSH
62729: LD_INT 22
62731: PUSH
62732: LD_OWVAR 2
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 2
62743: PUSH
62744: LD_INT 30
62746: PUSH
62747: LD_INT 0
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 30
62756: PUSH
62757: LD_INT 1
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: LIST
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PPUSH
62773: CALL_OW 69
62777: ST_TO_ADDR
// if not depot then
62778: LD_VAR 0 1
62782: NOT
62783: IFFALSE 62787
// exit ;
62785: GO 62822
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
62787: LD_VAR 0 1
62791: PUSH
62792: LD_INT 1
62794: ARRAY
62795: PPUSH
62796: CALL_OW 250
62800: PPUSH
62801: LD_VAR 0 1
62805: PUSH
62806: LD_INT 1
62808: ARRAY
62809: PPUSH
62810: CALL_OW 251
62814: PPUSH
62815: LD_INT 70
62817: PPUSH
62818: CALL_OW 495
// end ;
62822: PPOPN 1
62824: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
62825: LD_EXP 115
62829: PUSH
62830: LD_EXP 149
62834: AND
62835: IFFALSE 63046
62837: GO 62839
62839: DISABLE
62840: LD_INT 0
62842: PPUSH
62843: PPUSH
62844: PPUSH
62845: PPUSH
62846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62847: LD_ADDR_VAR 0 5
62851: PUSH
62852: LD_INT 22
62854: PUSH
62855: LD_OWVAR 2
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 21
62866: PUSH
62867: LD_INT 1
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PPUSH
62878: CALL_OW 69
62882: ST_TO_ADDR
// if not tmp then
62883: LD_VAR 0 5
62887: NOT
62888: IFFALSE 62892
// exit ;
62890: GO 63046
// for i in tmp do
62892: LD_ADDR_VAR 0 1
62896: PUSH
62897: LD_VAR 0 5
62901: PUSH
62902: FOR_IN
62903: IFFALSE 63044
// begin d := rand ( 0 , 5 ) ;
62905: LD_ADDR_VAR 0 4
62909: PUSH
62910: LD_INT 0
62912: PPUSH
62913: LD_INT 5
62915: PPUSH
62916: CALL_OW 12
62920: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
62921: LD_ADDR_VAR 0 2
62925: PUSH
62926: LD_VAR 0 1
62930: PPUSH
62931: CALL_OW 250
62935: PPUSH
62936: LD_VAR 0 4
62940: PPUSH
62941: LD_INT 3
62943: PPUSH
62944: LD_INT 12
62946: PPUSH
62947: CALL_OW 12
62951: PPUSH
62952: CALL_OW 272
62956: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
62957: LD_ADDR_VAR 0 3
62961: PUSH
62962: LD_VAR 0 1
62966: PPUSH
62967: CALL_OW 251
62971: PPUSH
62972: LD_VAR 0 4
62976: PPUSH
62977: LD_INT 3
62979: PPUSH
62980: LD_INT 12
62982: PPUSH
62983: CALL_OW 12
62987: PPUSH
62988: CALL_OW 273
62992: ST_TO_ADDR
// if ValidHex ( x , y ) then
62993: LD_VAR 0 2
62997: PPUSH
62998: LD_VAR 0 3
63002: PPUSH
63003: CALL_OW 488
63007: IFFALSE 63042
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
63009: LD_VAR 0 1
63013: PPUSH
63014: LD_VAR 0 2
63018: PPUSH
63019: LD_VAR 0 3
63023: PPUSH
63024: LD_INT 3
63026: PPUSH
63027: LD_INT 6
63029: PPUSH
63030: CALL_OW 12
63034: PPUSH
63035: LD_INT 1
63037: PPUSH
63038: CALL_OW 483
// end ;
63042: GO 62902
63044: POP
63045: POP
// end ;
63046: PPOPN 5
63048: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
63049: LD_EXP 115
63053: PUSH
63054: LD_EXP 150
63058: AND
63059: IFFALSE 63153
63061: GO 63063
63063: DISABLE
63064: LD_INT 0
63066: PPUSH
63067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
63068: LD_ADDR_VAR 0 2
63072: PUSH
63073: LD_INT 22
63075: PUSH
63076: LD_OWVAR 2
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 32
63087: PUSH
63088: LD_INT 1
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 21
63097: PUSH
63098: LD_INT 2
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: LIST
63109: PPUSH
63110: CALL_OW 69
63114: ST_TO_ADDR
// if not tmp then
63115: LD_VAR 0 2
63119: NOT
63120: IFFALSE 63124
// exit ;
63122: GO 63153
// for i in tmp do
63124: LD_ADDR_VAR 0 1
63128: PUSH
63129: LD_VAR 0 2
63133: PUSH
63134: FOR_IN
63135: IFFALSE 63151
// SetFuel ( i , 0 ) ;
63137: LD_VAR 0 1
63141: PPUSH
63142: LD_INT 0
63144: PPUSH
63145: CALL_OW 240
63149: GO 63134
63151: POP
63152: POP
// end ;
63153: PPOPN 2
63155: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
63156: LD_EXP 115
63160: PUSH
63161: LD_EXP 151
63165: AND
63166: IFFALSE 63232
63168: GO 63170
63170: DISABLE
63171: LD_INT 0
63173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
63174: LD_ADDR_VAR 0 1
63178: PUSH
63179: LD_INT 22
63181: PUSH
63182: LD_OWVAR 2
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 30
63193: PUSH
63194: LD_INT 29
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PPUSH
63205: CALL_OW 69
63209: ST_TO_ADDR
// if not tmp then
63210: LD_VAR 0 1
63214: NOT
63215: IFFALSE 63219
// exit ;
63217: GO 63232
// DestroyUnit ( tmp [ 1 ] ) ;
63219: LD_VAR 0 1
63223: PUSH
63224: LD_INT 1
63226: ARRAY
63227: PPUSH
63228: CALL_OW 65
// end ;
63232: PPOPN 1
63234: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
63235: LD_EXP 115
63239: PUSH
63240: LD_EXP 153
63244: AND
63245: IFFALSE 63374
63247: GO 63249
63249: DISABLE
63250: LD_INT 0
63252: PPUSH
// begin uc_side := 0 ;
63253: LD_ADDR_OWVAR 20
63257: PUSH
63258: LD_INT 0
63260: ST_TO_ADDR
// uc_nation := nation_arabian ;
63261: LD_ADDR_OWVAR 21
63265: PUSH
63266: LD_INT 2
63268: ST_TO_ADDR
// hc_gallery :=  ;
63269: LD_ADDR_OWVAR 33
63273: PUSH
63274: LD_STRING 
63276: ST_TO_ADDR
// hc_name :=  ;
63277: LD_ADDR_OWVAR 26
63281: PUSH
63282: LD_STRING 
63284: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
63285: LD_INT 1
63287: PPUSH
63288: LD_INT 11
63290: PPUSH
63291: LD_INT 10
63293: PPUSH
63294: CALL_OW 380
// un := CreateHuman ;
63298: LD_ADDR_VAR 0 1
63302: PUSH
63303: CALL_OW 44
63307: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63308: LD_VAR 0 1
63312: PPUSH
63313: LD_INT 1
63315: PPUSH
63316: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
63320: LD_INT 35
63322: PPUSH
63323: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
63327: LD_VAR 0 1
63331: PPUSH
63332: LD_INT 22
63334: PUSH
63335: LD_OWVAR 2
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PPUSH
63344: CALL_OW 69
63348: PPUSH
63349: LD_VAR 0 1
63353: PPUSH
63354: CALL_OW 74
63358: PPUSH
63359: CALL_OW 115
// until IsDead ( un ) ;
63363: LD_VAR 0 1
63367: PPUSH
63368: CALL_OW 301
63372: IFFALSE 63320
// end ;
63374: PPOPN 1
63376: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
63377: LD_EXP 115
63381: PUSH
63382: LD_EXP 155
63386: AND
63387: IFFALSE 63399
63389: GO 63391
63391: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
63392: LD_STRING earthquake(getX(game), 0, 32)
63394: PPUSH
63395: CALL_OW 559
63399: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
63400: LD_EXP 115
63404: PUSH
63405: LD_EXP 156
63409: AND
63410: IFFALSE 63501
63412: GO 63414
63414: DISABLE
63415: LD_INT 0
63417: PPUSH
// begin enable ;
63418: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
63419: LD_ADDR_VAR 0 1
63423: PUSH
63424: LD_INT 22
63426: PUSH
63427: LD_OWVAR 2
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 21
63438: PUSH
63439: LD_INT 2
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 33
63448: PUSH
63449: LD_INT 3
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: LIST
63460: PPUSH
63461: CALL_OW 69
63465: ST_TO_ADDR
// if not tmp then
63466: LD_VAR 0 1
63470: NOT
63471: IFFALSE 63475
// exit ;
63473: GO 63501
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
63475: LD_VAR 0 1
63479: PUSH
63480: LD_INT 1
63482: PPUSH
63483: LD_VAR 0 1
63487: PPUSH
63488: CALL_OW 12
63492: ARRAY
63493: PPUSH
63494: LD_INT 1
63496: PPUSH
63497: CALL_OW 234
// end ;
63501: PPOPN 1
63503: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
63504: LD_EXP 115
63508: PUSH
63509: LD_EXP 157
63513: AND
63514: IFFALSE 63655
63516: GO 63518
63518: DISABLE
63519: LD_INT 0
63521: PPUSH
63522: PPUSH
63523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63524: LD_ADDR_VAR 0 3
63528: PUSH
63529: LD_INT 22
63531: PUSH
63532: LD_OWVAR 2
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 25
63543: PUSH
63544: LD_INT 1
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PPUSH
63555: CALL_OW 69
63559: ST_TO_ADDR
// if not tmp then
63560: LD_VAR 0 3
63564: NOT
63565: IFFALSE 63569
// exit ;
63567: GO 63655
// un := tmp [ rand ( 1 , tmp ) ] ;
63569: LD_ADDR_VAR 0 2
63573: PUSH
63574: LD_VAR 0 3
63578: PUSH
63579: LD_INT 1
63581: PPUSH
63582: LD_VAR 0 3
63586: PPUSH
63587: CALL_OW 12
63591: ARRAY
63592: ST_TO_ADDR
// if Crawls ( un ) then
63593: LD_VAR 0 2
63597: PPUSH
63598: CALL_OW 318
63602: IFFALSE 63613
// ComWalk ( un ) ;
63604: LD_VAR 0 2
63608: PPUSH
63609: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
63613: LD_VAR 0 2
63617: PPUSH
63618: LD_INT 9
63620: PPUSH
63621: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
63625: LD_INT 28
63627: PPUSH
63628: LD_OWVAR 2
63632: PPUSH
63633: LD_INT 2
63635: PPUSH
63636: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
63640: LD_INT 29
63642: PPUSH
63643: LD_OWVAR 2
63647: PPUSH
63648: LD_INT 2
63650: PPUSH
63651: CALL_OW 322
// end ;
63655: PPOPN 3
63657: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
63658: LD_EXP 115
63662: PUSH
63663: LD_EXP 158
63667: AND
63668: IFFALSE 63779
63670: GO 63672
63672: DISABLE
63673: LD_INT 0
63675: PPUSH
63676: PPUSH
63677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63678: LD_ADDR_VAR 0 3
63682: PUSH
63683: LD_INT 22
63685: PUSH
63686: LD_OWVAR 2
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 25
63697: PUSH
63698: LD_INT 1
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PPUSH
63709: CALL_OW 69
63713: ST_TO_ADDR
// if not tmp then
63714: LD_VAR 0 3
63718: NOT
63719: IFFALSE 63723
// exit ;
63721: GO 63779
// un := tmp [ rand ( 1 , tmp ) ] ;
63723: LD_ADDR_VAR 0 2
63727: PUSH
63728: LD_VAR 0 3
63732: PUSH
63733: LD_INT 1
63735: PPUSH
63736: LD_VAR 0 3
63740: PPUSH
63741: CALL_OW 12
63745: ARRAY
63746: ST_TO_ADDR
// if Crawls ( un ) then
63747: LD_VAR 0 2
63751: PPUSH
63752: CALL_OW 318
63756: IFFALSE 63767
// ComWalk ( un ) ;
63758: LD_VAR 0 2
63762: PPUSH
63763: CALL_OW 138
// SetClass ( un , class_mortar ) ;
63767: LD_VAR 0 2
63771: PPUSH
63772: LD_INT 8
63774: PPUSH
63775: CALL_OW 336
// end ;
63779: PPOPN 3
63781: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
63782: LD_EXP 115
63786: PUSH
63787: LD_EXP 159
63791: AND
63792: IFFALSE 63936
63794: GO 63796
63796: DISABLE
63797: LD_INT 0
63799: PPUSH
63800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
63801: LD_ADDR_VAR 0 2
63805: PUSH
63806: LD_INT 22
63808: PUSH
63809: LD_OWVAR 2
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 21
63820: PUSH
63821: LD_INT 2
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 2
63830: PUSH
63831: LD_INT 34
63833: PUSH
63834: LD_INT 12
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 34
63843: PUSH
63844: LD_INT 51
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 34
63853: PUSH
63854: LD_INT 32
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: LIST
63871: PPUSH
63872: CALL_OW 69
63876: ST_TO_ADDR
// if not tmp then
63877: LD_VAR 0 2
63881: NOT
63882: IFFALSE 63886
// exit ;
63884: GO 63936
// for i in tmp do
63886: LD_ADDR_VAR 0 1
63890: PUSH
63891: LD_VAR 0 2
63895: PUSH
63896: FOR_IN
63897: IFFALSE 63934
// if GetCargo ( i , mat_artifact ) = 0 then
63899: LD_VAR 0 1
63903: PPUSH
63904: LD_INT 4
63906: PPUSH
63907: CALL_OW 289
63911: PUSH
63912: LD_INT 0
63914: EQUAL
63915: IFFALSE 63932
// SetCargo ( i , mat_siberit , 100 ) ;
63917: LD_VAR 0 1
63921: PPUSH
63922: LD_INT 3
63924: PPUSH
63925: LD_INT 100
63927: PPUSH
63928: CALL_OW 290
63932: GO 63896
63934: POP
63935: POP
// end ;
63936: PPOPN 2
63938: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
63939: LD_EXP 115
63943: PUSH
63944: LD_EXP 160
63948: AND
63949: IFFALSE 64132
63951: GO 63953
63953: DISABLE
63954: LD_INT 0
63956: PPUSH
63957: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63958: LD_ADDR_VAR 0 2
63962: PUSH
63963: LD_INT 22
63965: PUSH
63966: LD_OWVAR 2
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PPUSH
63975: CALL_OW 69
63979: ST_TO_ADDR
// if not tmp then
63980: LD_VAR 0 2
63984: NOT
63985: IFFALSE 63989
// exit ;
63987: GO 64132
// for i := 1 to 2 do
63989: LD_ADDR_VAR 0 1
63993: PUSH
63994: DOUBLE
63995: LD_INT 1
63997: DEC
63998: ST_TO_ADDR
63999: LD_INT 2
64001: PUSH
64002: FOR_TO
64003: IFFALSE 64130
// begin uc_side := your_side ;
64005: LD_ADDR_OWVAR 20
64009: PUSH
64010: LD_OWVAR 2
64014: ST_TO_ADDR
// uc_nation := nation_american ;
64015: LD_ADDR_OWVAR 21
64019: PUSH
64020: LD_INT 1
64022: ST_TO_ADDR
// vc_chassis := us_morphling ;
64023: LD_ADDR_OWVAR 37
64027: PUSH
64028: LD_INT 5
64030: ST_TO_ADDR
// vc_engine := engine_siberite ;
64031: LD_ADDR_OWVAR 39
64035: PUSH
64036: LD_INT 3
64038: ST_TO_ADDR
// vc_control := control_computer ;
64039: LD_ADDR_OWVAR 38
64043: PUSH
64044: LD_INT 3
64046: ST_TO_ADDR
// vc_weapon := us_double_laser ;
64047: LD_ADDR_OWVAR 40
64051: PUSH
64052: LD_INT 10
64054: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
64055: LD_VAR 0 2
64059: PUSH
64060: LD_INT 1
64062: ARRAY
64063: PPUSH
64064: CALL_OW 310
64068: NOT
64069: IFFALSE 64116
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
64071: CALL_OW 45
64075: PPUSH
64076: LD_VAR 0 2
64080: PUSH
64081: LD_INT 1
64083: ARRAY
64084: PPUSH
64085: CALL_OW 250
64089: PPUSH
64090: LD_VAR 0 2
64094: PUSH
64095: LD_INT 1
64097: ARRAY
64098: PPUSH
64099: CALL_OW 251
64103: PPUSH
64104: LD_INT 12
64106: PPUSH
64107: LD_INT 1
64109: PPUSH
64110: CALL_OW 50
64114: GO 64128
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
64116: CALL_OW 45
64120: PPUSH
64121: LD_INT 1
64123: PPUSH
64124: CALL_OW 51
// end ;
64128: GO 64002
64130: POP
64131: POP
// end ;
64132: PPOPN 2
64134: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
64135: LD_EXP 115
64139: PUSH
64140: LD_EXP 161
64144: AND
64145: IFFALSE 64367
64147: GO 64149
64149: DISABLE
64150: LD_INT 0
64152: PPUSH
64153: PPUSH
64154: PPUSH
64155: PPUSH
64156: PPUSH
64157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64158: LD_ADDR_VAR 0 6
64162: PUSH
64163: LD_INT 22
64165: PUSH
64166: LD_OWVAR 2
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 21
64177: PUSH
64178: LD_INT 1
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 3
64187: PUSH
64188: LD_INT 23
64190: PUSH
64191: LD_INT 0
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: LIST
64206: PPUSH
64207: CALL_OW 69
64211: ST_TO_ADDR
// if not tmp then
64212: LD_VAR 0 6
64216: NOT
64217: IFFALSE 64221
// exit ;
64219: GO 64367
// s1 := rand ( 1 , 4 ) ;
64221: LD_ADDR_VAR 0 2
64225: PUSH
64226: LD_INT 1
64228: PPUSH
64229: LD_INT 4
64231: PPUSH
64232: CALL_OW 12
64236: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
64237: LD_ADDR_VAR 0 4
64241: PUSH
64242: LD_VAR 0 6
64246: PUSH
64247: LD_INT 1
64249: ARRAY
64250: PPUSH
64251: LD_VAR 0 2
64255: PPUSH
64256: CALL_OW 259
64260: ST_TO_ADDR
// if s1 = 1 then
64261: LD_VAR 0 2
64265: PUSH
64266: LD_INT 1
64268: EQUAL
64269: IFFALSE 64289
// s2 := rand ( 2 , 4 ) else
64271: LD_ADDR_VAR 0 3
64275: PUSH
64276: LD_INT 2
64278: PPUSH
64279: LD_INT 4
64281: PPUSH
64282: CALL_OW 12
64286: ST_TO_ADDR
64287: GO 64297
// s2 := 1 ;
64289: LD_ADDR_VAR 0 3
64293: PUSH
64294: LD_INT 1
64296: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
64297: LD_ADDR_VAR 0 5
64301: PUSH
64302: LD_VAR 0 6
64306: PUSH
64307: LD_INT 1
64309: ARRAY
64310: PPUSH
64311: LD_VAR 0 3
64315: PPUSH
64316: CALL_OW 259
64320: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
64321: LD_VAR 0 6
64325: PUSH
64326: LD_INT 1
64328: ARRAY
64329: PPUSH
64330: LD_VAR 0 2
64334: PPUSH
64335: LD_VAR 0 5
64339: PPUSH
64340: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
64344: LD_VAR 0 6
64348: PUSH
64349: LD_INT 1
64351: ARRAY
64352: PPUSH
64353: LD_VAR 0 3
64357: PPUSH
64358: LD_VAR 0 4
64362: PPUSH
64363: CALL_OW 237
// end ;
64367: PPOPN 6
64369: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
64370: LD_EXP 115
64374: PUSH
64375: LD_EXP 162
64379: AND
64380: IFFALSE 64459
64382: GO 64384
64384: DISABLE
64385: LD_INT 0
64387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
64388: LD_ADDR_VAR 0 1
64392: PUSH
64393: LD_INT 22
64395: PUSH
64396: LD_OWVAR 2
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 30
64407: PUSH
64408: LD_INT 3
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PPUSH
64419: CALL_OW 69
64423: ST_TO_ADDR
// if not tmp then
64424: LD_VAR 0 1
64428: NOT
64429: IFFALSE 64433
// exit ;
64431: GO 64459
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
64433: LD_VAR 0 1
64437: PUSH
64438: LD_INT 1
64440: PPUSH
64441: LD_VAR 0 1
64445: PPUSH
64446: CALL_OW 12
64450: ARRAY
64451: PPUSH
64452: LD_INT 1
64454: PPUSH
64455: CALL_OW 234
// end ;
64459: PPOPN 1
64461: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
64462: LD_EXP 115
64466: PUSH
64467: LD_EXP 163
64471: AND
64472: IFFALSE 64584
64474: GO 64476
64476: DISABLE
64477: LD_INT 0
64479: PPUSH
64480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
64481: LD_ADDR_VAR 0 2
64485: PUSH
64486: LD_INT 22
64488: PUSH
64489: LD_OWVAR 2
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 2
64500: PUSH
64501: LD_INT 30
64503: PUSH
64504: LD_INT 27
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 30
64513: PUSH
64514: LD_INT 26
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 30
64523: PUSH
64524: LD_INT 28
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PPUSH
64541: CALL_OW 69
64545: ST_TO_ADDR
// if not tmp then
64546: LD_VAR 0 2
64550: NOT
64551: IFFALSE 64555
// exit ;
64553: GO 64584
// for i in tmp do
64555: LD_ADDR_VAR 0 1
64559: PUSH
64560: LD_VAR 0 2
64564: PUSH
64565: FOR_IN
64566: IFFALSE 64582
// SetLives ( i , 1 ) ;
64568: LD_VAR 0 1
64572: PPUSH
64573: LD_INT 1
64575: PPUSH
64576: CALL_OW 234
64580: GO 64565
64582: POP
64583: POP
// end ;
64584: PPOPN 2
64586: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
64587: LD_EXP 115
64591: PUSH
64592: LD_EXP 164
64596: AND
64597: IFFALSE 64884
64599: GO 64601
64601: DISABLE
64602: LD_INT 0
64604: PPUSH
64605: PPUSH
64606: PPUSH
// begin i := rand ( 1 , 7 ) ;
64607: LD_ADDR_VAR 0 1
64611: PUSH
64612: LD_INT 1
64614: PPUSH
64615: LD_INT 7
64617: PPUSH
64618: CALL_OW 12
64622: ST_TO_ADDR
// case i of 1 :
64623: LD_VAR 0 1
64627: PUSH
64628: LD_INT 1
64630: DOUBLE
64631: EQUAL
64632: IFTRUE 64636
64634: GO 64646
64636: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
64637: LD_STRING earthquake(getX(game), 0, 32)
64639: PPUSH
64640: CALL_OW 559
64644: GO 64884
64646: LD_INT 2
64648: DOUBLE
64649: EQUAL
64650: IFTRUE 64654
64652: GO 64668
64654: POP
// begin ToLua ( displayStucuk(); ) ;
64655: LD_STRING displayStucuk();
64657: PPUSH
64658: CALL_OW 559
// ResetFog ;
64662: CALL_OW 335
// end ; 3 :
64666: GO 64884
64668: LD_INT 3
64670: DOUBLE
64671: EQUAL
64672: IFTRUE 64676
64674: GO 64780
64676: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64677: LD_ADDR_VAR 0 2
64681: PUSH
64682: LD_INT 22
64684: PUSH
64685: LD_OWVAR 2
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 25
64696: PUSH
64697: LD_INT 1
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PPUSH
64708: CALL_OW 69
64712: ST_TO_ADDR
// if not tmp then
64713: LD_VAR 0 2
64717: NOT
64718: IFFALSE 64722
// exit ;
64720: GO 64884
// un := tmp [ rand ( 1 , tmp ) ] ;
64722: LD_ADDR_VAR 0 3
64726: PUSH
64727: LD_VAR 0 2
64731: PUSH
64732: LD_INT 1
64734: PPUSH
64735: LD_VAR 0 2
64739: PPUSH
64740: CALL_OW 12
64744: ARRAY
64745: ST_TO_ADDR
// if Crawls ( un ) then
64746: LD_VAR 0 3
64750: PPUSH
64751: CALL_OW 318
64755: IFFALSE 64766
// ComWalk ( un ) ;
64757: LD_VAR 0 3
64761: PPUSH
64762: CALL_OW 138
// SetClass ( un , class_mortar ) ;
64766: LD_VAR 0 3
64770: PPUSH
64771: LD_INT 8
64773: PPUSH
64774: CALL_OW 336
// end ; 4 :
64778: GO 64884
64780: LD_INT 4
64782: DOUBLE
64783: EQUAL
64784: IFTRUE 64788
64786: GO 64862
64788: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
64789: LD_ADDR_VAR 0 2
64793: PUSH
64794: LD_INT 22
64796: PUSH
64797: LD_OWVAR 2
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 30
64808: PUSH
64809: LD_INT 29
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PPUSH
64820: CALL_OW 69
64824: ST_TO_ADDR
// if not tmp then
64825: LD_VAR 0 2
64829: NOT
64830: IFFALSE 64834
// exit ;
64832: GO 64884
// CenterNowOnUnits ( tmp [ 1 ] ) ;
64834: LD_VAR 0 2
64838: PUSH
64839: LD_INT 1
64841: ARRAY
64842: PPUSH
64843: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
64847: LD_VAR 0 2
64851: PUSH
64852: LD_INT 1
64854: ARRAY
64855: PPUSH
64856: CALL_OW 65
// end ; 5 .. 7 :
64860: GO 64884
64862: LD_INT 5
64864: DOUBLE
64865: GREATEREQUAL
64866: IFFALSE 64874
64868: LD_INT 7
64870: DOUBLE
64871: LESSEQUAL
64872: IFTRUE 64876
64874: GO 64883
64876: POP
// StreamSibBomb ; end ;
64877: CALL 61121 0 0
64881: GO 64884
64883: POP
// end ;
64884: PPOPN 3
64886: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
64887: LD_EXP 115
64891: PUSH
64892: LD_EXP 165
64896: AND
64897: IFFALSE 65053
64899: GO 64901
64901: DISABLE
64902: LD_INT 0
64904: PPUSH
64905: PPUSH
64906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
64907: LD_ADDR_VAR 0 2
64911: PUSH
64912: LD_INT 81
64914: PUSH
64915: LD_OWVAR 2
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 2
64926: PUSH
64927: LD_INT 21
64929: PUSH
64930: LD_INT 1
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 21
64939: PUSH
64940: LD_INT 2
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: LIST
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PPUSH
64956: CALL_OW 69
64960: ST_TO_ADDR
// if not tmp then
64961: LD_VAR 0 2
64965: NOT
64966: IFFALSE 64970
// exit ;
64968: GO 65053
// p := 0 ;
64970: LD_ADDR_VAR 0 3
64974: PUSH
64975: LD_INT 0
64977: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
64978: LD_INT 35
64980: PPUSH
64981: CALL_OW 67
// p := p + 1 ;
64985: LD_ADDR_VAR 0 3
64989: PUSH
64990: LD_VAR 0 3
64994: PUSH
64995: LD_INT 1
64997: PLUS
64998: ST_TO_ADDR
// for i in tmp do
64999: LD_ADDR_VAR 0 1
65003: PUSH
65004: LD_VAR 0 2
65008: PUSH
65009: FOR_IN
65010: IFFALSE 65041
// if GetLives ( i ) < 1000 then
65012: LD_VAR 0 1
65016: PPUSH
65017: CALL_OW 256
65021: PUSH
65022: LD_INT 1000
65024: LESS
65025: IFFALSE 65039
// SetLives ( i , 1000 ) ;
65027: LD_VAR 0 1
65031: PPUSH
65032: LD_INT 1000
65034: PPUSH
65035: CALL_OW 234
65039: GO 65009
65041: POP
65042: POP
// until p > 20 ;
65043: LD_VAR 0 3
65047: PUSH
65048: LD_INT 20
65050: GREATER
65051: IFFALSE 64978
// end ;
65053: PPOPN 3
65055: END
// every 0 0$1 trigger StreamModeActive and sTime do
65056: LD_EXP 115
65060: PUSH
65061: LD_EXP 166
65065: AND
65066: IFFALSE 65101
65068: GO 65070
65070: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
65071: LD_INT 28
65073: PPUSH
65074: LD_OWVAR 2
65078: PPUSH
65079: LD_INT 2
65081: PPUSH
65082: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
65086: LD_INT 30
65088: PPUSH
65089: LD_OWVAR 2
65093: PPUSH
65094: LD_INT 2
65096: PPUSH
65097: CALL_OW 322
// end ;
65101: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
65102: LD_EXP 115
65106: PUSH
65107: LD_EXP 167
65111: AND
65112: IFFALSE 65233
65114: GO 65116
65116: DISABLE
65117: LD_INT 0
65119: PPUSH
65120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
65121: LD_ADDR_VAR 0 2
65125: PUSH
65126: LD_INT 22
65128: PUSH
65129: LD_OWVAR 2
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 21
65140: PUSH
65141: LD_INT 1
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 3
65150: PUSH
65151: LD_INT 23
65153: PUSH
65154: LD_INT 0
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: LIST
65169: PPUSH
65170: CALL_OW 69
65174: ST_TO_ADDR
// if not tmp then
65175: LD_VAR 0 2
65179: NOT
65180: IFFALSE 65184
// exit ;
65182: GO 65233
// for i in tmp do
65184: LD_ADDR_VAR 0 1
65188: PUSH
65189: LD_VAR 0 2
65193: PUSH
65194: FOR_IN
65195: IFFALSE 65231
// begin if Crawls ( i ) then
65197: LD_VAR 0 1
65201: PPUSH
65202: CALL_OW 318
65206: IFFALSE 65217
// ComWalk ( i ) ;
65208: LD_VAR 0 1
65212: PPUSH
65213: CALL_OW 138
// SetClass ( i , 2 ) ;
65217: LD_VAR 0 1
65221: PPUSH
65222: LD_INT 2
65224: PPUSH
65225: CALL_OW 336
// end ;
65229: GO 65194
65231: POP
65232: POP
// end ;
65233: PPOPN 2
65235: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
65236: LD_EXP 115
65240: PUSH
65241: LD_EXP 168
65245: AND
65246: IFFALSE 65534
65248: GO 65250
65250: DISABLE
65251: LD_INT 0
65253: PPUSH
65254: PPUSH
65255: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
65256: LD_OWVAR 2
65260: PPUSH
65261: LD_INT 9
65263: PPUSH
65264: LD_INT 1
65266: PPUSH
65267: LD_INT 1
65269: PPUSH
65270: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
65274: LD_INT 9
65276: PPUSH
65277: LD_OWVAR 2
65281: PPUSH
65282: CALL_OW 343
// uc_side := 9 ;
65286: LD_ADDR_OWVAR 20
65290: PUSH
65291: LD_INT 9
65293: ST_TO_ADDR
// uc_nation := 2 ;
65294: LD_ADDR_OWVAR 21
65298: PUSH
65299: LD_INT 2
65301: ST_TO_ADDR
// hc_name := Dark Warrior ;
65302: LD_ADDR_OWVAR 26
65306: PUSH
65307: LD_STRING Dark Warrior
65309: ST_TO_ADDR
// hc_gallery :=  ;
65310: LD_ADDR_OWVAR 33
65314: PUSH
65315: LD_STRING 
65317: ST_TO_ADDR
// hc_noskilllimit := true ;
65318: LD_ADDR_OWVAR 76
65322: PUSH
65323: LD_INT 1
65325: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
65326: LD_ADDR_OWVAR 31
65330: PUSH
65331: LD_INT 30
65333: PUSH
65334: LD_INT 30
65336: PUSH
65337: LD_INT 30
65339: PUSH
65340: LD_INT 30
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: ST_TO_ADDR
// un := CreateHuman ;
65349: LD_ADDR_VAR 0 3
65353: PUSH
65354: CALL_OW 44
65358: ST_TO_ADDR
// hc_noskilllimit := false ;
65359: LD_ADDR_OWVAR 76
65363: PUSH
65364: LD_INT 0
65366: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
65367: LD_VAR 0 3
65371: PPUSH
65372: LD_INT 1
65374: PPUSH
65375: CALL_OW 51
// ToLua ( playRanger() ) ;
65379: LD_STRING playRanger()
65381: PPUSH
65382: CALL_OW 559
// p := 0 ;
65386: LD_ADDR_VAR 0 2
65390: PUSH
65391: LD_INT 0
65393: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
65394: LD_INT 35
65396: PPUSH
65397: CALL_OW 67
// p := p + 1 ;
65401: LD_ADDR_VAR 0 2
65405: PUSH
65406: LD_VAR 0 2
65410: PUSH
65411: LD_INT 1
65413: PLUS
65414: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
65415: LD_VAR 0 3
65419: PPUSH
65420: CALL_OW 256
65424: PUSH
65425: LD_INT 1000
65427: LESS
65428: IFFALSE 65442
// SetLives ( un , 1000 ) ;
65430: LD_VAR 0 3
65434: PPUSH
65435: LD_INT 1000
65437: PPUSH
65438: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
65442: LD_VAR 0 3
65446: PPUSH
65447: LD_INT 81
65449: PUSH
65450: LD_OWVAR 2
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: LD_INT 91
65461: PUSH
65462: LD_VAR 0 3
65466: PUSH
65467: LD_INT 30
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: LIST
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PPUSH
65479: CALL_OW 69
65483: PPUSH
65484: LD_VAR 0 3
65488: PPUSH
65489: CALL_OW 74
65493: PPUSH
65494: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
65498: LD_VAR 0 2
65502: PUSH
65503: LD_INT 80
65505: GREATER
65506: PUSH
65507: LD_VAR 0 3
65511: PPUSH
65512: CALL_OW 301
65516: OR
65517: IFFALSE 65394
// if un then
65519: LD_VAR 0 3
65523: IFFALSE 65534
// RemoveUnit ( un ) ;
65525: LD_VAR 0 3
65529: PPUSH
65530: CALL_OW 64
// end ;
65534: PPOPN 3
65536: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
65537: LD_EXP 169
65541: IFFALSE 65657
65543: GO 65545
65545: DISABLE
65546: LD_INT 0
65548: PPUSH
65549: PPUSH
65550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
65551: LD_ADDR_VAR 0 2
65555: PUSH
65556: LD_INT 81
65558: PUSH
65559: LD_OWVAR 2
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 21
65570: PUSH
65571: LD_INT 1
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PPUSH
65582: CALL_OW 69
65586: ST_TO_ADDR
// ToLua ( playComputer() ) ;
65587: LD_STRING playComputer()
65589: PPUSH
65590: CALL_OW 559
// if not tmp then
65594: LD_VAR 0 2
65598: NOT
65599: IFFALSE 65603
// exit ;
65601: GO 65657
// for i in tmp do
65603: LD_ADDR_VAR 0 1
65607: PUSH
65608: LD_VAR 0 2
65612: PUSH
65613: FOR_IN
65614: IFFALSE 65655
// for j := 1 to 4 do
65616: LD_ADDR_VAR 0 3
65620: PUSH
65621: DOUBLE
65622: LD_INT 1
65624: DEC
65625: ST_TO_ADDR
65626: LD_INT 4
65628: PUSH
65629: FOR_TO
65630: IFFALSE 65651
// SetSkill ( i , j , 10 ) ;
65632: LD_VAR 0 1
65636: PPUSH
65637: LD_VAR 0 3
65641: PPUSH
65642: LD_INT 10
65644: PPUSH
65645: CALL_OW 237
65649: GO 65629
65651: POP
65652: POP
65653: GO 65613
65655: POP
65656: POP
// end ;
65657: PPOPN 3
65659: END
// every 0 0$1 trigger s30 do var i , tmp ;
65660: LD_EXP 170
65664: IFFALSE 65733
65666: GO 65668
65668: DISABLE
65669: LD_INT 0
65671: PPUSH
65672: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65673: LD_ADDR_VAR 0 2
65677: PUSH
65678: LD_INT 22
65680: PUSH
65681: LD_OWVAR 2
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PPUSH
65690: CALL_OW 69
65694: ST_TO_ADDR
// if not tmp then
65695: LD_VAR 0 2
65699: NOT
65700: IFFALSE 65704
// exit ;
65702: GO 65733
// for i in tmp do
65704: LD_ADDR_VAR 0 1
65708: PUSH
65709: LD_VAR 0 2
65713: PUSH
65714: FOR_IN
65715: IFFALSE 65731
// SetLives ( i , 300 ) ;
65717: LD_VAR 0 1
65721: PPUSH
65722: LD_INT 300
65724: PPUSH
65725: CALL_OW 234
65729: GO 65714
65731: POP
65732: POP
// end ;
65733: PPOPN 2
65735: END
// every 0 0$1 trigger s60 do var i , tmp ;
65736: LD_EXP 171
65740: IFFALSE 65809
65742: GO 65744
65744: DISABLE
65745: LD_INT 0
65747: PPUSH
65748: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65749: LD_ADDR_VAR 0 2
65753: PUSH
65754: LD_INT 22
65756: PUSH
65757: LD_OWVAR 2
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PPUSH
65766: CALL_OW 69
65770: ST_TO_ADDR
// if not tmp then
65771: LD_VAR 0 2
65775: NOT
65776: IFFALSE 65780
// exit ;
65778: GO 65809
// for i in tmp do
65780: LD_ADDR_VAR 0 1
65784: PUSH
65785: LD_VAR 0 2
65789: PUSH
65790: FOR_IN
65791: IFFALSE 65807
// SetLives ( i , 600 ) ;
65793: LD_VAR 0 1
65797: PPUSH
65798: LD_INT 600
65800: PPUSH
65801: CALL_OW 234
65805: GO 65790
65807: POP
65808: POP
// end ;
65809: PPOPN 2
65811: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
65812: LD_INT 0
65814: PPUSH
// case cmd of 301 :
65815: LD_VAR 0 1
65819: PUSH
65820: LD_INT 301
65822: DOUBLE
65823: EQUAL
65824: IFTRUE 65828
65826: GO 65860
65828: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
65829: LD_VAR 0 6
65833: PPUSH
65834: LD_VAR 0 7
65838: PPUSH
65839: LD_VAR 0 8
65843: PPUSH
65844: LD_VAR 0 4
65848: PPUSH
65849: LD_VAR 0 5
65853: PPUSH
65854: CALL 67061 0 5
65858: GO 65981
65860: LD_INT 302
65862: DOUBLE
65863: EQUAL
65864: IFTRUE 65868
65866: GO 65905
65868: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
65869: LD_VAR 0 6
65873: PPUSH
65874: LD_VAR 0 7
65878: PPUSH
65879: LD_VAR 0 8
65883: PPUSH
65884: LD_VAR 0 9
65888: PPUSH
65889: LD_VAR 0 4
65893: PPUSH
65894: LD_VAR 0 5
65898: PPUSH
65899: CALL 67152 0 6
65903: GO 65981
65905: LD_INT 303
65907: DOUBLE
65908: EQUAL
65909: IFTRUE 65913
65911: GO 65950
65913: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
65914: LD_VAR 0 6
65918: PPUSH
65919: LD_VAR 0 7
65923: PPUSH
65924: LD_VAR 0 8
65928: PPUSH
65929: LD_VAR 0 9
65933: PPUSH
65934: LD_VAR 0 4
65938: PPUSH
65939: LD_VAR 0 5
65943: PPUSH
65944: CALL 65986 0 6
65948: GO 65981
65950: LD_INT 304
65952: DOUBLE
65953: EQUAL
65954: IFTRUE 65958
65956: GO 65980
65958: POP
// hHackTeleport ( unit , x , y ) ; end ;
65959: LD_VAR 0 2
65963: PPUSH
65964: LD_VAR 0 4
65968: PPUSH
65969: LD_VAR 0 5
65973: PPUSH
65974: CALL 67745 0 3
65978: GO 65981
65980: POP
// end ;
65981: LD_VAR 0 12
65985: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
65986: LD_INT 0
65988: PPUSH
65989: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
65990: LD_VAR 0 1
65994: PUSH
65995: LD_INT 1
65997: LESS
65998: PUSH
65999: LD_VAR 0 1
66003: PUSH
66004: LD_INT 3
66006: GREATER
66007: OR
66008: PUSH
66009: LD_VAR 0 5
66013: PPUSH
66014: LD_VAR 0 6
66018: PPUSH
66019: CALL_OW 428
66023: OR
66024: IFFALSE 66028
// exit ;
66026: GO 66748
// uc_side := your_side ;
66028: LD_ADDR_OWVAR 20
66032: PUSH
66033: LD_OWVAR 2
66037: ST_TO_ADDR
// uc_nation := nation ;
66038: LD_ADDR_OWVAR 21
66042: PUSH
66043: LD_VAR 0 1
66047: ST_TO_ADDR
// bc_level = 1 ;
66048: LD_ADDR_OWVAR 43
66052: PUSH
66053: LD_INT 1
66055: ST_TO_ADDR
// case btype of 1 :
66056: LD_VAR 0 2
66060: PUSH
66061: LD_INT 1
66063: DOUBLE
66064: EQUAL
66065: IFTRUE 66069
66067: GO 66080
66069: POP
// bc_type := b_depot ; 2 :
66070: LD_ADDR_OWVAR 42
66074: PUSH
66075: LD_INT 0
66077: ST_TO_ADDR
66078: GO 66692
66080: LD_INT 2
66082: DOUBLE
66083: EQUAL
66084: IFTRUE 66088
66086: GO 66099
66088: POP
// bc_type := b_warehouse ; 3 :
66089: LD_ADDR_OWVAR 42
66093: PUSH
66094: LD_INT 1
66096: ST_TO_ADDR
66097: GO 66692
66099: LD_INT 3
66101: DOUBLE
66102: EQUAL
66103: IFTRUE 66107
66105: GO 66118
66107: POP
// bc_type := b_lab ; 4 .. 9 :
66108: LD_ADDR_OWVAR 42
66112: PUSH
66113: LD_INT 6
66115: ST_TO_ADDR
66116: GO 66692
66118: LD_INT 4
66120: DOUBLE
66121: GREATEREQUAL
66122: IFFALSE 66130
66124: LD_INT 9
66126: DOUBLE
66127: LESSEQUAL
66128: IFTRUE 66132
66130: GO 66184
66132: POP
// begin bc_type := b_lab_half ;
66133: LD_ADDR_OWVAR 42
66137: PUSH
66138: LD_INT 7
66140: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
66141: LD_ADDR_OWVAR 44
66145: PUSH
66146: LD_INT 10
66148: PUSH
66149: LD_INT 11
66151: PUSH
66152: LD_INT 12
66154: PUSH
66155: LD_INT 15
66157: PUSH
66158: LD_INT 14
66160: PUSH
66161: LD_INT 13
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: PUSH
66172: LD_VAR 0 2
66176: PUSH
66177: LD_INT 3
66179: MINUS
66180: ARRAY
66181: ST_TO_ADDR
// end ; 10 .. 13 :
66182: GO 66692
66184: LD_INT 10
66186: DOUBLE
66187: GREATEREQUAL
66188: IFFALSE 66196
66190: LD_INT 13
66192: DOUBLE
66193: LESSEQUAL
66194: IFTRUE 66198
66196: GO 66275
66198: POP
// begin bc_type := b_lab_full ;
66199: LD_ADDR_OWVAR 42
66203: PUSH
66204: LD_INT 8
66206: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
66207: LD_ADDR_OWVAR 44
66211: PUSH
66212: LD_INT 10
66214: PUSH
66215: LD_INT 12
66217: PUSH
66218: LD_INT 14
66220: PUSH
66221: LD_INT 13
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: PUSH
66230: LD_VAR 0 2
66234: PUSH
66235: LD_INT 9
66237: MINUS
66238: ARRAY
66239: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
66240: LD_ADDR_OWVAR 45
66244: PUSH
66245: LD_INT 11
66247: PUSH
66248: LD_INT 15
66250: PUSH
66251: LD_INT 12
66253: PUSH
66254: LD_INT 15
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: PUSH
66263: LD_VAR 0 2
66267: PUSH
66268: LD_INT 9
66270: MINUS
66271: ARRAY
66272: ST_TO_ADDR
// end ; 14 :
66273: GO 66692
66275: LD_INT 14
66277: DOUBLE
66278: EQUAL
66279: IFTRUE 66283
66281: GO 66294
66283: POP
// bc_type := b_workshop ; 15 :
66284: LD_ADDR_OWVAR 42
66288: PUSH
66289: LD_INT 2
66291: ST_TO_ADDR
66292: GO 66692
66294: LD_INT 15
66296: DOUBLE
66297: EQUAL
66298: IFTRUE 66302
66300: GO 66313
66302: POP
// bc_type := b_factory ; 16 :
66303: LD_ADDR_OWVAR 42
66307: PUSH
66308: LD_INT 3
66310: ST_TO_ADDR
66311: GO 66692
66313: LD_INT 16
66315: DOUBLE
66316: EQUAL
66317: IFTRUE 66321
66319: GO 66332
66321: POP
// bc_type := b_ext_gun ; 17 :
66322: LD_ADDR_OWVAR 42
66326: PUSH
66327: LD_INT 17
66329: ST_TO_ADDR
66330: GO 66692
66332: LD_INT 17
66334: DOUBLE
66335: EQUAL
66336: IFTRUE 66340
66338: GO 66368
66340: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
66341: LD_ADDR_OWVAR 42
66345: PUSH
66346: LD_INT 19
66348: PUSH
66349: LD_INT 23
66351: PUSH
66352: LD_INT 19
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: LIST
66359: PUSH
66360: LD_VAR 0 1
66364: ARRAY
66365: ST_TO_ADDR
66366: GO 66692
66368: LD_INT 18
66370: DOUBLE
66371: EQUAL
66372: IFTRUE 66376
66374: GO 66387
66376: POP
// bc_type := b_ext_radar ; 19 :
66377: LD_ADDR_OWVAR 42
66381: PUSH
66382: LD_INT 20
66384: ST_TO_ADDR
66385: GO 66692
66387: LD_INT 19
66389: DOUBLE
66390: EQUAL
66391: IFTRUE 66395
66393: GO 66406
66395: POP
// bc_type := b_ext_radio ; 20 :
66396: LD_ADDR_OWVAR 42
66400: PUSH
66401: LD_INT 22
66403: ST_TO_ADDR
66404: GO 66692
66406: LD_INT 20
66408: DOUBLE
66409: EQUAL
66410: IFTRUE 66414
66412: GO 66425
66414: POP
// bc_type := b_ext_siberium ; 21 :
66415: LD_ADDR_OWVAR 42
66419: PUSH
66420: LD_INT 21
66422: ST_TO_ADDR
66423: GO 66692
66425: LD_INT 21
66427: DOUBLE
66428: EQUAL
66429: IFTRUE 66433
66431: GO 66444
66433: POP
// bc_type := b_ext_computer ; 22 :
66434: LD_ADDR_OWVAR 42
66438: PUSH
66439: LD_INT 24
66441: ST_TO_ADDR
66442: GO 66692
66444: LD_INT 22
66446: DOUBLE
66447: EQUAL
66448: IFTRUE 66452
66450: GO 66463
66452: POP
// bc_type := b_ext_track ; 23 :
66453: LD_ADDR_OWVAR 42
66457: PUSH
66458: LD_INT 16
66460: ST_TO_ADDR
66461: GO 66692
66463: LD_INT 23
66465: DOUBLE
66466: EQUAL
66467: IFTRUE 66471
66469: GO 66482
66471: POP
// bc_type := b_ext_laser ; 24 :
66472: LD_ADDR_OWVAR 42
66476: PUSH
66477: LD_INT 25
66479: ST_TO_ADDR
66480: GO 66692
66482: LD_INT 24
66484: DOUBLE
66485: EQUAL
66486: IFTRUE 66490
66488: GO 66501
66490: POP
// bc_type := b_control_tower ; 25 :
66491: LD_ADDR_OWVAR 42
66495: PUSH
66496: LD_INT 36
66498: ST_TO_ADDR
66499: GO 66692
66501: LD_INT 25
66503: DOUBLE
66504: EQUAL
66505: IFTRUE 66509
66507: GO 66520
66509: POP
// bc_type := b_breastwork ; 26 :
66510: LD_ADDR_OWVAR 42
66514: PUSH
66515: LD_INT 31
66517: ST_TO_ADDR
66518: GO 66692
66520: LD_INT 26
66522: DOUBLE
66523: EQUAL
66524: IFTRUE 66528
66526: GO 66539
66528: POP
// bc_type := b_bunker ; 27 :
66529: LD_ADDR_OWVAR 42
66533: PUSH
66534: LD_INT 32
66536: ST_TO_ADDR
66537: GO 66692
66539: LD_INT 27
66541: DOUBLE
66542: EQUAL
66543: IFTRUE 66547
66545: GO 66558
66547: POP
// bc_type := b_turret ; 28 :
66548: LD_ADDR_OWVAR 42
66552: PUSH
66553: LD_INT 33
66555: ST_TO_ADDR
66556: GO 66692
66558: LD_INT 28
66560: DOUBLE
66561: EQUAL
66562: IFTRUE 66566
66564: GO 66577
66566: POP
// bc_type := b_armoury ; 29 :
66567: LD_ADDR_OWVAR 42
66571: PUSH
66572: LD_INT 4
66574: ST_TO_ADDR
66575: GO 66692
66577: LD_INT 29
66579: DOUBLE
66580: EQUAL
66581: IFTRUE 66585
66583: GO 66596
66585: POP
// bc_type := b_barracks ; 30 :
66586: LD_ADDR_OWVAR 42
66590: PUSH
66591: LD_INT 5
66593: ST_TO_ADDR
66594: GO 66692
66596: LD_INT 30
66598: DOUBLE
66599: EQUAL
66600: IFTRUE 66604
66602: GO 66615
66604: POP
// bc_type := b_solar_power ; 31 :
66605: LD_ADDR_OWVAR 42
66609: PUSH
66610: LD_INT 27
66612: ST_TO_ADDR
66613: GO 66692
66615: LD_INT 31
66617: DOUBLE
66618: EQUAL
66619: IFTRUE 66623
66621: GO 66634
66623: POP
// bc_type := b_oil_power ; 32 :
66624: LD_ADDR_OWVAR 42
66628: PUSH
66629: LD_INT 26
66631: ST_TO_ADDR
66632: GO 66692
66634: LD_INT 32
66636: DOUBLE
66637: EQUAL
66638: IFTRUE 66642
66640: GO 66653
66642: POP
// bc_type := b_siberite_power ; 33 :
66643: LD_ADDR_OWVAR 42
66647: PUSH
66648: LD_INT 28
66650: ST_TO_ADDR
66651: GO 66692
66653: LD_INT 33
66655: DOUBLE
66656: EQUAL
66657: IFTRUE 66661
66659: GO 66672
66661: POP
// bc_type := b_oil_mine ; 34 :
66662: LD_ADDR_OWVAR 42
66666: PUSH
66667: LD_INT 29
66669: ST_TO_ADDR
66670: GO 66692
66672: LD_INT 34
66674: DOUBLE
66675: EQUAL
66676: IFTRUE 66680
66678: GO 66691
66680: POP
// bc_type := b_siberite_mine ; end ;
66681: LD_ADDR_OWVAR 42
66685: PUSH
66686: LD_INT 30
66688: ST_TO_ADDR
66689: GO 66692
66691: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
66692: LD_ADDR_VAR 0 8
66696: PUSH
66697: LD_VAR 0 5
66701: PPUSH
66702: LD_VAR 0 6
66706: PPUSH
66707: LD_VAR 0 3
66711: PPUSH
66712: CALL_OW 47
66716: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
66717: LD_OWVAR 42
66721: PUSH
66722: LD_INT 32
66724: PUSH
66725: LD_INT 33
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: IN
66732: IFFALSE 66748
// PlaceWeaponTurret ( b , weapon ) ;
66734: LD_VAR 0 8
66738: PPUSH
66739: LD_VAR 0 4
66743: PPUSH
66744: CALL_OW 431
// end ;
66748: LD_VAR 0 7
66752: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
66753: LD_INT 0
66755: PPUSH
66756: PPUSH
66757: PPUSH
66758: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66759: LD_ADDR_VAR 0 4
66763: PUSH
66764: LD_INT 22
66766: PUSH
66767: LD_OWVAR 2
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 2
66778: PUSH
66779: LD_INT 30
66781: PUSH
66782: LD_INT 0
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 30
66791: PUSH
66792: LD_INT 1
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: LIST
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PPUSH
66808: CALL_OW 69
66812: ST_TO_ADDR
// if not tmp then
66813: LD_VAR 0 4
66817: NOT
66818: IFFALSE 66822
// exit ;
66820: GO 66881
// for i in tmp do
66822: LD_ADDR_VAR 0 2
66826: PUSH
66827: LD_VAR 0 4
66831: PUSH
66832: FOR_IN
66833: IFFALSE 66879
// for j = 1 to 3 do
66835: LD_ADDR_VAR 0 3
66839: PUSH
66840: DOUBLE
66841: LD_INT 1
66843: DEC
66844: ST_TO_ADDR
66845: LD_INT 3
66847: PUSH
66848: FOR_TO
66849: IFFALSE 66875
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
66851: LD_VAR 0 2
66855: PPUSH
66856: CALL_OW 274
66860: PPUSH
66861: LD_VAR 0 3
66865: PPUSH
66866: LD_INT 99999
66868: PPUSH
66869: CALL_OW 277
66873: GO 66848
66875: POP
66876: POP
66877: GO 66832
66879: POP
66880: POP
// end ;
66881: LD_VAR 0 1
66885: RET
// export function hHackSetLevel10 ; var i , j ; begin
66886: LD_INT 0
66888: PPUSH
66889: PPUSH
66890: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
66891: LD_ADDR_VAR 0 2
66895: PUSH
66896: LD_INT 21
66898: PUSH
66899: LD_INT 1
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PPUSH
66906: CALL_OW 69
66910: PUSH
66911: FOR_IN
66912: IFFALSE 66964
// if IsSelected ( i ) then
66914: LD_VAR 0 2
66918: PPUSH
66919: CALL_OW 306
66923: IFFALSE 66962
// begin for j := 1 to 4 do
66925: LD_ADDR_VAR 0 3
66929: PUSH
66930: DOUBLE
66931: LD_INT 1
66933: DEC
66934: ST_TO_ADDR
66935: LD_INT 4
66937: PUSH
66938: FOR_TO
66939: IFFALSE 66960
// SetSkill ( i , j , 10 ) ;
66941: LD_VAR 0 2
66945: PPUSH
66946: LD_VAR 0 3
66950: PPUSH
66951: LD_INT 10
66953: PPUSH
66954: CALL_OW 237
66958: GO 66938
66960: POP
66961: POP
// end ;
66962: GO 66911
66964: POP
66965: POP
// end ;
66966: LD_VAR 0 1
66970: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
66971: LD_INT 0
66973: PPUSH
66974: PPUSH
66975: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
66976: LD_ADDR_VAR 0 2
66980: PUSH
66981: LD_INT 22
66983: PUSH
66984: LD_OWVAR 2
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 21
66995: PUSH
66996: LD_INT 1
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PPUSH
67007: CALL_OW 69
67011: PUSH
67012: FOR_IN
67013: IFFALSE 67054
// begin for j := 1 to 4 do
67015: LD_ADDR_VAR 0 3
67019: PUSH
67020: DOUBLE
67021: LD_INT 1
67023: DEC
67024: ST_TO_ADDR
67025: LD_INT 4
67027: PUSH
67028: FOR_TO
67029: IFFALSE 67050
// SetSkill ( i , j , 10 ) ;
67031: LD_VAR 0 2
67035: PPUSH
67036: LD_VAR 0 3
67040: PPUSH
67041: LD_INT 10
67043: PPUSH
67044: CALL_OW 237
67048: GO 67028
67050: POP
67051: POP
// end ;
67052: GO 67012
67054: POP
67055: POP
// end ;
67056: LD_VAR 0 1
67060: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
67061: LD_INT 0
67063: PPUSH
// uc_side := your_side ;
67064: LD_ADDR_OWVAR 20
67068: PUSH
67069: LD_OWVAR 2
67073: ST_TO_ADDR
// uc_nation := nation ;
67074: LD_ADDR_OWVAR 21
67078: PUSH
67079: LD_VAR 0 1
67083: ST_TO_ADDR
// InitHc ;
67084: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
67088: LD_INT 0
67090: PPUSH
67091: LD_VAR 0 2
67095: PPUSH
67096: LD_VAR 0 3
67100: PPUSH
67101: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
67105: LD_VAR 0 4
67109: PPUSH
67110: LD_VAR 0 5
67114: PPUSH
67115: CALL_OW 428
67119: PUSH
67120: LD_INT 0
67122: EQUAL
67123: IFFALSE 67147
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
67125: CALL_OW 44
67129: PPUSH
67130: LD_VAR 0 4
67134: PPUSH
67135: LD_VAR 0 5
67139: PPUSH
67140: LD_INT 1
67142: PPUSH
67143: CALL_OW 48
// end ;
67147: LD_VAR 0 6
67151: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
67152: LD_INT 0
67154: PPUSH
67155: PPUSH
// uc_side := your_side ;
67156: LD_ADDR_OWVAR 20
67160: PUSH
67161: LD_OWVAR 2
67165: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
67166: LD_VAR 0 1
67170: PUSH
67171: LD_INT 1
67173: PUSH
67174: LD_INT 2
67176: PUSH
67177: LD_INT 3
67179: PUSH
67180: LD_INT 4
67182: PUSH
67183: LD_INT 5
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: IN
67193: IFFALSE 67205
// uc_nation := nation_american else
67195: LD_ADDR_OWVAR 21
67199: PUSH
67200: LD_INT 1
67202: ST_TO_ADDR
67203: GO 67248
// if chassis in [ 11 , 12 , 13 , 14 ] then
67205: LD_VAR 0 1
67209: PUSH
67210: LD_INT 11
67212: PUSH
67213: LD_INT 12
67215: PUSH
67216: LD_INT 13
67218: PUSH
67219: LD_INT 14
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: IN
67228: IFFALSE 67240
// uc_nation := nation_arabian else
67230: LD_ADDR_OWVAR 21
67234: PUSH
67235: LD_INT 2
67237: ST_TO_ADDR
67238: GO 67248
// uc_nation := nation_russian ;
67240: LD_ADDR_OWVAR 21
67244: PUSH
67245: LD_INT 3
67247: ST_TO_ADDR
// vc_chassis := chassis ;
67248: LD_ADDR_OWVAR 37
67252: PUSH
67253: LD_VAR 0 1
67257: ST_TO_ADDR
// vc_engine := engine ;
67258: LD_ADDR_OWVAR 39
67262: PUSH
67263: LD_VAR 0 2
67267: ST_TO_ADDR
// vc_control := control ;
67268: LD_ADDR_OWVAR 38
67272: PUSH
67273: LD_VAR 0 3
67277: ST_TO_ADDR
// vc_weapon := weapon ;
67278: LD_ADDR_OWVAR 40
67282: PUSH
67283: LD_VAR 0 4
67287: ST_TO_ADDR
// un := CreateVehicle ;
67288: LD_ADDR_VAR 0 8
67292: PUSH
67293: CALL_OW 45
67297: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
67298: LD_VAR 0 8
67302: PPUSH
67303: LD_INT 0
67305: PPUSH
67306: LD_INT 5
67308: PPUSH
67309: CALL_OW 12
67313: PPUSH
67314: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
67318: LD_VAR 0 8
67322: PPUSH
67323: LD_VAR 0 5
67327: PPUSH
67328: LD_VAR 0 6
67332: PPUSH
67333: LD_INT 1
67335: PPUSH
67336: CALL_OW 48
// end ;
67340: LD_VAR 0 7
67344: RET
// export hInvincible ; every 1 do
67345: GO 67347
67347: DISABLE
// hInvincible := [ ] ;
67348: LD_ADDR_EXP 172
67352: PUSH
67353: EMPTY
67354: ST_TO_ADDR
67355: END
// every 10 do var i ;
67356: GO 67358
67358: DISABLE
67359: LD_INT 0
67361: PPUSH
// begin enable ;
67362: ENABLE
// if not hInvincible then
67363: LD_EXP 172
67367: NOT
67368: IFFALSE 67372
// exit ;
67370: GO 67416
// for i in hInvincible do
67372: LD_ADDR_VAR 0 1
67376: PUSH
67377: LD_EXP 172
67381: PUSH
67382: FOR_IN
67383: IFFALSE 67414
// if GetLives ( i ) < 1000 then
67385: LD_VAR 0 1
67389: PPUSH
67390: CALL_OW 256
67394: PUSH
67395: LD_INT 1000
67397: LESS
67398: IFFALSE 67412
// SetLives ( i , 1000 ) ;
67400: LD_VAR 0 1
67404: PPUSH
67405: LD_INT 1000
67407: PPUSH
67408: CALL_OW 234
67412: GO 67382
67414: POP
67415: POP
// end ;
67416: PPOPN 1
67418: END
// export function hHackInvincible ; var i ; begin
67419: LD_INT 0
67421: PPUSH
67422: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
67423: LD_ADDR_VAR 0 2
67427: PUSH
67428: LD_INT 2
67430: PUSH
67431: LD_INT 21
67433: PUSH
67434: LD_INT 1
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 21
67443: PUSH
67444: LD_INT 2
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: LIST
67455: PPUSH
67456: CALL_OW 69
67460: PUSH
67461: FOR_IN
67462: IFFALSE 67523
// if IsSelected ( i ) then
67464: LD_VAR 0 2
67468: PPUSH
67469: CALL_OW 306
67473: IFFALSE 67521
// begin if i in hInvincible then
67475: LD_VAR 0 2
67479: PUSH
67480: LD_EXP 172
67484: IN
67485: IFFALSE 67505
// hInvincible := hInvincible diff i else
67487: LD_ADDR_EXP 172
67491: PUSH
67492: LD_EXP 172
67496: PUSH
67497: LD_VAR 0 2
67501: DIFF
67502: ST_TO_ADDR
67503: GO 67521
// hInvincible := hInvincible union i ;
67505: LD_ADDR_EXP 172
67509: PUSH
67510: LD_EXP 172
67514: PUSH
67515: LD_VAR 0 2
67519: UNION
67520: ST_TO_ADDR
// end ;
67521: GO 67461
67523: POP
67524: POP
// end ;
67525: LD_VAR 0 1
67529: RET
// export function hHackInvisible ; var i , j ; begin
67530: LD_INT 0
67532: PPUSH
67533: PPUSH
67534: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
67535: LD_ADDR_VAR 0 2
67539: PUSH
67540: LD_INT 21
67542: PUSH
67543: LD_INT 1
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PPUSH
67550: CALL_OW 69
67554: PUSH
67555: FOR_IN
67556: IFFALSE 67580
// if IsSelected ( i ) then
67558: LD_VAR 0 2
67562: PPUSH
67563: CALL_OW 306
67567: IFFALSE 67578
// ComForceInvisible ( i ) ;
67569: LD_VAR 0 2
67573: PPUSH
67574: CALL_OW 496
67578: GO 67555
67580: POP
67581: POP
// end ;
67582: LD_VAR 0 1
67586: RET
// export function hHackChangeYourSide ; begin
67587: LD_INT 0
67589: PPUSH
// if your_side = 8 then
67590: LD_OWVAR 2
67594: PUSH
67595: LD_INT 8
67597: EQUAL
67598: IFFALSE 67610
// your_side := 0 else
67600: LD_ADDR_OWVAR 2
67604: PUSH
67605: LD_INT 0
67607: ST_TO_ADDR
67608: GO 67624
// your_side := your_side + 1 ;
67610: LD_ADDR_OWVAR 2
67614: PUSH
67615: LD_OWVAR 2
67619: PUSH
67620: LD_INT 1
67622: PLUS
67623: ST_TO_ADDR
// end ;
67624: LD_VAR 0 1
67628: RET
// export function hHackChangeUnitSide ; var i , j ; begin
67629: LD_INT 0
67631: PPUSH
67632: PPUSH
67633: PPUSH
// for i in all_units do
67634: LD_ADDR_VAR 0 2
67638: PUSH
67639: LD_OWVAR 3
67643: PUSH
67644: FOR_IN
67645: IFFALSE 67723
// if IsSelected ( i ) then
67647: LD_VAR 0 2
67651: PPUSH
67652: CALL_OW 306
67656: IFFALSE 67721
// begin j := GetSide ( i ) ;
67658: LD_ADDR_VAR 0 3
67662: PUSH
67663: LD_VAR 0 2
67667: PPUSH
67668: CALL_OW 255
67672: ST_TO_ADDR
// if j = 8 then
67673: LD_VAR 0 3
67677: PUSH
67678: LD_INT 8
67680: EQUAL
67681: IFFALSE 67693
// j := 0 else
67683: LD_ADDR_VAR 0 3
67687: PUSH
67688: LD_INT 0
67690: ST_TO_ADDR
67691: GO 67707
// j := j + 1 ;
67693: LD_ADDR_VAR 0 3
67697: PUSH
67698: LD_VAR 0 3
67702: PUSH
67703: LD_INT 1
67705: PLUS
67706: ST_TO_ADDR
// SetSide ( i , j ) ;
67707: LD_VAR 0 2
67711: PPUSH
67712: LD_VAR 0 3
67716: PPUSH
67717: CALL_OW 235
// end ;
67721: GO 67644
67723: POP
67724: POP
// end ;
67725: LD_VAR 0 1
67729: RET
// export function hHackFog ; begin
67730: LD_INT 0
67732: PPUSH
// FogOff ( true ) ;
67733: LD_INT 1
67735: PPUSH
67736: CALL_OW 344
// end ;
67740: LD_VAR 0 1
67744: RET
// export function hHackTeleport ( unit , x , y ) ; begin
67745: LD_INT 0
67747: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
67748: LD_VAR 0 1
67752: PPUSH
67753: LD_VAR 0 2
67757: PPUSH
67758: LD_VAR 0 3
67762: PPUSH
67763: LD_INT 1
67765: PPUSH
67766: LD_INT 1
67768: PPUSH
67769: CALL_OW 483
// CenterOnXY ( x , y ) ;
67773: LD_VAR 0 2
67777: PPUSH
67778: LD_VAR 0 3
67782: PPUSH
67783: CALL_OW 84
// end ; end_of_file
67787: LD_VAR 0 4
67791: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
67792: LD_INT 0
67794: PPUSH
67795: PPUSH
67796: PPUSH
67797: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
67798: LD_VAR 0 1
67802: PPUSH
67803: CALL_OW 264
67807: PUSH
67808: LD_EXP 99
67812: EQUAL
67813: IFFALSE 67885
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
67815: LD_INT 68
67817: PPUSH
67818: LD_VAR 0 1
67822: PPUSH
67823: CALL_OW 255
67827: PPUSH
67828: CALL_OW 321
67832: PUSH
67833: LD_INT 2
67835: EQUAL
67836: IFFALSE 67848
// eff := 70 else
67838: LD_ADDR_VAR 0 4
67842: PUSH
67843: LD_INT 70
67845: ST_TO_ADDR
67846: GO 67856
// eff := 30 ;
67848: LD_ADDR_VAR 0 4
67852: PUSH
67853: LD_INT 30
67855: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
67856: LD_VAR 0 1
67860: PPUSH
67861: CALL_OW 250
67865: PPUSH
67866: LD_VAR 0 1
67870: PPUSH
67871: CALL_OW 251
67875: PPUSH
67876: LD_VAR 0 4
67880: PPUSH
67881: CALL_OW 495
// end ; end ;
67885: LD_VAR 0 2
67889: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
67890: LD_INT 0
67892: PPUSH
// end ;
67893: LD_VAR 0 4
67897: RET
// export function SOS_Command ( cmd ) ; begin
67898: LD_INT 0
67900: PPUSH
// end ;
67901: LD_VAR 0 2
67905: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
67906: LD_INT 0
67908: PPUSH
// end ;
67909: LD_VAR 0 6
67913: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
67914: LD_INT 0
67916: PPUSH
67917: PPUSH
// if not vehicle or not factory then
67918: LD_VAR 0 1
67922: NOT
67923: PUSH
67924: LD_VAR 0 2
67928: NOT
67929: OR
67930: IFFALSE 67934
// exit ;
67932: GO 68165
// if factoryWaypoints >= factory then
67934: LD_EXP 173
67938: PUSH
67939: LD_VAR 0 2
67943: GREATEREQUAL
67944: IFFALSE 68165
// if factoryWaypoints [ factory ] then
67946: LD_EXP 173
67950: PUSH
67951: LD_VAR 0 2
67955: ARRAY
67956: IFFALSE 68165
// begin if GetControl ( vehicle ) = control_manual then
67958: LD_VAR 0 1
67962: PPUSH
67963: CALL_OW 263
67967: PUSH
67968: LD_INT 1
67970: EQUAL
67971: IFFALSE 68052
// begin driver := IsDrivenBy ( vehicle ) ;
67973: LD_ADDR_VAR 0 4
67977: PUSH
67978: LD_VAR 0 1
67982: PPUSH
67983: CALL_OW 311
67987: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
67988: LD_VAR 0 4
67992: PPUSH
67993: LD_EXP 173
67997: PUSH
67998: LD_VAR 0 2
68002: ARRAY
68003: PUSH
68004: LD_INT 3
68006: ARRAY
68007: PPUSH
68008: LD_EXP 173
68012: PUSH
68013: LD_VAR 0 2
68017: ARRAY
68018: PUSH
68019: LD_INT 4
68021: ARRAY
68022: PPUSH
68023: CALL_OW 171
// AddComExitVehicle ( driver ) ;
68027: LD_VAR 0 4
68031: PPUSH
68032: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
68036: LD_VAR 0 4
68040: PPUSH
68041: LD_VAR 0 2
68045: PPUSH
68046: CALL_OW 180
// end else
68050: GO 68165
// if GetControl ( vehicle ) = control_remote then
68052: LD_VAR 0 1
68056: PPUSH
68057: CALL_OW 263
68061: PUSH
68062: LD_INT 2
68064: EQUAL
68065: IFFALSE 68126
// begin wait ( 0 0$2 ) ;
68067: LD_INT 70
68069: PPUSH
68070: CALL_OW 67
// if Connect ( vehicle ) then
68074: LD_VAR 0 1
68078: PPUSH
68079: CALL 20855 0 1
68083: IFFALSE 68124
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
68085: LD_VAR 0 1
68089: PPUSH
68090: LD_EXP 173
68094: PUSH
68095: LD_VAR 0 2
68099: ARRAY
68100: PUSH
68101: LD_INT 3
68103: ARRAY
68104: PPUSH
68105: LD_EXP 173
68109: PUSH
68110: LD_VAR 0 2
68114: ARRAY
68115: PUSH
68116: LD_INT 4
68118: ARRAY
68119: PPUSH
68120: CALL_OW 171
// end else
68124: GO 68165
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
68126: LD_VAR 0 1
68130: PPUSH
68131: LD_EXP 173
68135: PUSH
68136: LD_VAR 0 2
68140: ARRAY
68141: PUSH
68142: LD_INT 3
68144: ARRAY
68145: PPUSH
68146: LD_EXP 173
68150: PUSH
68151: LD_VAR 0 2
68155: ARRAY
68156: PUSH
68157: LD_INT 4
68159: ARRAY
68160: PPUSH
68161: CALL_OW 171
// end ; end ;
68165: LD_VAR 0 3
68169: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
68170: LD_INT 0
68172: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
68173: LD_VAR 0 1
68177: PUSH
68178: LD_INT 250
68180: EQUAL
68181: PUSH
68182: LD_VAR 0 2
68186: PPUSH
68187: CALL_OW 264
68191: PUSH
68192: LD_EXP 102
68196: EQUAL
68197: AND
68198: IFFALSE 68219
// MinerPlaceMine ( unit , x , y ) ;
68200: LD_VAR 0 2
68204: PPUSH
68205: LD_VAR 0 4
68209: PPUSH
68210: LD_VAR 0 5
68214: PPUSH
68215: CALL 70947 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
68219: LD_VAR 0 1
68223: PUSH
68224: LD_INT 251
68226: EQUAL
68227: PUSH
68228: LD_VAR 0 2
68232: PPUSH
68233: CALL_OW 264
68237: PUSH
68238: LD_EXP 102
68242: EQUAL
68243: AND
68244: IFFALSE 68265
// MinerDetonateMine ( unit , x , y ) ;
68246: LD_VAR 0 2
68250: PPUSH
68251: LD_VAR 0 4
68255: PPUSH
68256: LD_VAR 0 5
68260: PPUSH
68261: CALL 71224 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
68265: LD_VAR 0 1
68269: PUSH
68270: LD_INT 252
68272: EQUAL
68273: PUSH
68274: LD_VAR 0 2
68278: PPUSH
68279: CALL_OW 264
68283: PUSH
68284: LD_EXP 102
68288: EQUAL
68289: AND
68290: IFFALSE 68311
// MinerCreateMinefield ( unit , x , y ) ;
68292: LD_VAR 0 2
68296: PPUSH
68297: LD_VAR 0 4
68301: PPUSH
68302: LD_VAR 0 5
68306: PPUSH
68307: CALL 71641 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
68311: LD_VAR 0 1
68315: PUSH
68316: LD_INT 253
68318: EQUAL
68319: PUSH
68320: LD_VAR 0 2
68324: PPUSH
68325: CALL_OW 257
68329: PUSH
68330: LD_INT 5
68332: EQUAL
68333: AND
68334: IFFALSE 68355
// ComBinocular ( unit , x , y ) ;
68336: LD_VAR 0 2
68340: PPUSH
68341: LD_VAR 0 4
68345: PPUSH
68346: LD_VAR 0 5
68350: PPUSH
68351: CALL 72012 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
68355: LD_VAR 0 1
68359: PUSH
68360: LD_INT 254
68362: EQUAL
68363: PUSH
68364: LD_VAR 0 2
68368: PPUSH
68369: CALL_OW 264
68373: PUSH
68374: LD_EXP 97
68378: EQUAL
68379: AND
68380: PUSH
68381: LD_VAR 0 3
68385: PPUSH
68386: CALL_OW 263
68390: PUSH
68391: LD_INT 3
68393: EQUAL
68394: AND
68395: IFFALSE 68411
// HackDestroyVehicle ( unit , selectedUnit ) ;
68397: LD_VAR 0 2
68401: PPUSH
68402: LD_VAR 0 3
68406: PPUSH
68407: CALL 70307 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
68411: LD_VAR 0 1
68415: PUSH
68416: LD_INT 255
68418: EQUAL
68419: PUSH
68420: LD_VAR 0 2
68424: PPUSH
68425: CALL_OW 264
68429: PUSH
68430: LD_INT 14
68432: PUSH
68433: LD_INT 53
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: IN
68440: AND
68441: PUSH
68442: LD_VAR 0 4
68446: PPUSH
68447: LD_VAR 0 5
68451: PPUSH
68452: CALL_OW 488
68456: AND
68457: IFFALSE 68481
// CutTreeXYR ( unit , x , y , 12 ) ;
68459: LD_VAR 0 2
68463: PPUSH
68464: LD_VAR 0 4
68468: PPUSH
68469: LD_VAR 0 5
68473: PPUSH
68474: LD_INT 12
68476: PPUSH
68477: CALL 68873 0 4
// if cmd = 256 then
68481: LD_VAR 0 1
68485: PUSH
68486: LD_INT 256
68488: EQUAL
68489: IFFALSE 68510
// SetFactoryWaypoint ( unit , x , y ) ;
68491: LD_VAR 0 2
68495: PPUSH
68496: LD_VAR 0 4
68500: PPUSH
68501: LD_VAR 0 5
68505: PPUSH
68506: CALL 68515 0 3
// end ;
68510: LD_VAR 0 6
68514: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
68515: LD_INT 0
68517: PPUSH
68518: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
68519: LD_VAR 0 1
68523: NOT
68524: PUSH
68525: LD_VAR 0 2
68529: PPUSH
68530: LD_VAR 0 3
68534: PPUSH
68535: CALL_OW 488
68539: NOT
68540: OR
68541: PUSH
68542: LD_VAR 0 1
68546: PPUSH
68547: CALL_OW 266
68551: PUSH
68552: LD_INT 3
68554: NONEQUAL
68555: PUSH
68556: LD_VAR 0 1
68560: PPUSH
68561: CALL_OW 247
68565: PUSH
68566: LD_INT 1
68568: EQUAL
68569: NOT
68570: AND
68571: OR
68572: IFFALSE 68576
// exit ;
68574: GO 68725
// if GetType ( factory ) = unit_human then
68576: LD_VAR 0 1
68580: PPUSH
68581: CALL_OW 247
68585: PUSH
68586: LD_INT 1
68588: EQUAL
68589: IFFALSE 68606
// factory := IsInUnit ( factory ) ;
68591: LD_ADDR_VAR 0 1
68595: PUSH
68596: LD_VAR 0 1
68600: PPUSH
68601: CALL_OW 310
68605: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
68606: LD_VAR 0 1
68610: PPUSH
68611: CALL_OW 266
68615: PUSH
68616: LD_INT 3
68618: NONEQUAL
68619: IFFALSE 68623
// exit ;
68621: GO 68725
// if HexInfo ( x , y ) = factory then
68623: LD_VAR 0 2
68627: PPUSH
68628: LD_VAR 0 3
68632: PPUSH
68633: CALL_OW 428
68637: PUSH
68638: LD_VAR 0 1
68642: EQUAL
68643: IFFALSE 68670
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
68645: LD_ADDR_EXP 173
68649: PUSH
68650: LD_EXP 173
68654: PPUSH
68655: LD_VAR 0 1
68659: PPUSH
68660: LD_INT 0
68662: PPUSH
68663: CALL_OW 1
68667: ST_TO_ADDR
68668: GO 68721
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
68670: LD_ADDR_EXP 173
68674: PUSH
68675: LD_EXP 173
68679: PPUSH
68680: LD_VAR 0 1
68684: PPUSH
68685: LD_VAR 0 1
68689: PPUSH
68690: CALL_OW 255
68694: PUSH
68695: LD_VAR 0 1
68699: PUSH
68700: LD_VAR 0 2
68704: PUSH
68705: LD_VAR 0 3
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: PPUSH
68716: CALL_OW 1
68720: ST_TO_ADDR
// UpdateFactoryWaypoints ;
68721: CALL 68730 0 0
// end ;
68725: LD_VAR 0 4
68729: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
68730: LD_INT 0
68732: PPUSH
68733: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
68734: LD_STRING resetFactoryWaypoint();
68736: PPUSH
68737: CALL_OW 559
// if factoryWaypoints then
68741: LD_EXP 173
68745: IFFALSE 68868
// begin for i := 1 to factoryWaypoints do
68747: LD_ADDR_VAR 0 2
68751: PUSH
68752: DOUBLE
68753: LD_INT 1
68755: DEC
68756: ST_TO_ADDR
68757: LD_EXP 173
68761: PUSH
68762: FOR_TO
68763: IFFALSE 68866
// if factoryWaypoints [ i ] then
68765: LD_EXP 173
68769: PUSH
68770: LD_VAR 0 2
68774: ARRAY
68775: IFFALSE 68864
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
68777: LD_STRING setFactoryWaypointXY(
68779: PUSH
68780: LD_EXP 173
68784: PUSH
68785: LD_VAR 0 2
68789: ARRAY
68790: PUSH
68791: LD_INT 1
68793: ARRAY
68794: STR
68795: PUSH
68796: LD_STRING ,
68798: STR
68799: PUSH
68800: LD_EXP 173
68804: PUSH
68805: LD_VAR 0 2
68809: ARRAY
68810: PUSH
68811: LD_INT 2
68813: ARRAY
68814: STR
68815: PUSH
68816: LD_STRING ,
68818: STR
68819: PUSH
68820: LD_EXP 173
68824: PUSH
68825: LD_VAR 0 2
68829: ARRAY
68830: PUSH
68831: LD_INT 3
68833: ARRAY
68834: STR
68835: PUSH
68836: LD_STRING ,
68838: STR
68839: PUSH
68840: LD_EXP 173
68844: PUSH
68845: LD_VAR 0 2
68849: ARRAY
68850: PUSH
68851: LD_INT 4
68853: ARRAY
68854: STR
68855: PUSH
68856: LD_STRING )
68858: STR
68859: PPUSH
68860: CALL_OW 559
68864: GO 68762
68866: POP
68867: POP
// end ; end ;
68868: LD_VAR 0 1
68872: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
68873: LD_INT 0
68875: PPUSH
68876: PPUSH
68877: PPUSH
68878: PPUSH
68879: PPUSH
68880: PPUSH
68881: PPUSH
68882: PPUSH
68883: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
68884: LD_VAR 0 1
68888: NOT
68889: PUSH
68890: LD_VAR 0 2
68894: PPUSH
68895: LD_VAR 0 3
68899: PPUSH
68900: CALL_OW 488
68904: NOT
68905: OR
68906: PUSH
68907: LD_VAR 0 4
68911: NOT
68912: OR
68913: IFFALSE 68917
// exit ;
68915: GO 69257
// list := [ ] ;
68917: LD_ADDR_VAR 0 13
68921: PUSH
68922: EMPTY
68923: ST_TO_ADDR
// if x - r < 0 then
68924: LD_VAR 0 2
68928: PUSH
68929: LD_VAR 0 4
68933: MINUS
68934: PUSH
68935: LD_INT 0
68937: LESS
68938: IFFALSE 68950
// min_x := 0 else
68940: LD_ADDR_VAR 0 7
68944: PUSH
68945: LD_INT 0
68947: ST_TO_ADDR
68948: GO 68966
// min_x := x - r ;
68950: LD_ADDR_VAR 0 7
68954: PUSH
68955: LD_VAR 0 2
68959: PUSH
68960: LD_VAR 0 4
68964: MINUS
68965: ST_TO_ADDR
// if y - r < 0 then
68966: LD_VAR 0 3
68970: PUSH
68971: LD_VAR 0 4
68975: MINUS
68976: PUSH
68977: LD_INT 0
68979: LESS
68980: IFFALSE 68992
// min_y := 0 else
68982: LD_ADDR_VAR 0 8
68986: PUSH
68987: LD_INT 0
68989: ST_TO_ADDR
68990: GO 69008
// min_y := y - r ;
68992: LD_ADDR_VAR 0 8
68996: PUSH
68997: LD_VAR 0 3
69001: PUSH
69002: LD_VAR 0 4
69006: MINUS
69007: ST_TO_ADDR
// max_x := x + r ;
69008: LD_ADDR_VAR 0 9
69012: PUSH
69013: LD_VAR 0 2
69017: PUSH
69018: LD_VAR 0 4
69022: PLUS
69023: ST_TO_ADDR
// max_y := y + r ;
69024: LD_ADDR_VAR 0 10
69028: PUSH
69029: LD_VAR 0 3
69033: PUSH
69034: LD_VAR 0 4
69038: PLUS
69039: ST_TO_ADDR
// for _x = min_x to max_x do
69040: LD_ADDR_VAR 0 11
69044: PUSH
69045: DOUBLE
69046: LD_VAR 0 7
69050: DEC
69051: ST_TO_ADDR
69052: LD_VAR 0 9
69056: PUSH
69057: FOR_TO
69058: IFFALSE 69175
// for _y = min_y to max_y do
69060: LD_ADDR_VAR 0 12
69064: PUSH
69065: DOUBLE
69066: LD_VAR 0 8
69070: DEC
69071: ST_TO_ADDR
69072: LD_VAR 0 10
69076: PUSH
69077: FOR_TO
69078: IFFALSE 69171
// begin if not ValidHex ( _x , _y ) then
69080: LD_VAR 0 11
69084: PPUSH
69085: LD_VAR 0 12
69089: PPUSH
69090: CALL_OW 488
69094: NOT
69095: IFFALSE 69099
// continue ;
69097: GO 69077
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
69099: LD_VAR 0 11
69103: PPUSH
69104: LD_VAR 0 12
69108: PPUSH
69109: CALL_OW 351
69113: PUSH
69114: LD_VAR 0 11
69118: PPUSH
69119: LD_VAR 0 12
69123: PPUSH
69124: CALL_OW 554
69128: AND
69129: IFFALSE 69169
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
69131: LD_ADDR_VAR 0 13
69135: PUSH
69136: LD_VAR 0 13
69140: PPUSH
69141: LD_VAR 0 13
69145: PUSH
69146: LD_INT 1
69148: PLUS
69149: PPUSH
69150: LD_VAR 0 11
69154: PUSH
69155: LD_VAR 0 12
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PPUSH
69164: CALL_OW 2
69168: ST_TO_ADDR
// end ;
69169: GO 69077
69171: POP
69172: POP
69173: GO 69057
69175: POP
69176: POP
// if not list then
69177: LD_VAR 0 13
69181: NOT
69182: IFFALSE 69186
// exit ;
69184: GO 69257
// for i in list do
69186: LD_ADDR_VAR 0 6
69190: PUSH
69191: LD_VAR 0 13
69195: PUSH
69196: FOR_IN
69197: IFFALSE 69255
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
69199: LD_VAR 0 1
69203: PPUSH
69204: LD_STRING M
69206: PUSH
69207: LD_VAR 0 6
69211: PUSH
69212: LD_INT 1
69214: ARRAY
69215: PUSH
69216: LD_VAR 0 6
69220: PUSH
69221: LD_INT 2
69223: ARRAY
69224: PUSH
69225: LD_INT 0
69227: PUSH
69228: LD_INT 0
69230: PUSH
69231: LD_INT 0
69233: PUSH
69234: LD_INT 0
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: PUSH
69246: EMPTY
69247: LIST
69248: PPUSH
69249: CALL_OW 447
69253: GO 69196
69255: POP
69256: POP
// end ;
69257: LD_VAR 0 5
69261: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
69262: LD_EXP 174
69266: NOT
69267: IFFALSE 69317
69269: GO 69271
69271: DISABLE
// begin initHack := true ;
69272: LD_ADDR_EXP 174
69276: PUSH
69277: LD_INT 1
69279: ST_TO_ADDR
// hackTanks := [ ] ;
69280: LD_ADDR_EXP 175
69284: PUSH
69285: EMPTY
69286: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
69287: LD_ADDR_EXP 176
69291: PUSH
69292: EMPTY
69293: ST_TO_ADDR
// hackLimit := 3 ;
69294: LD_ADDR_EXP 177
69298: PUSH
69299: LD_INT 3
69301: ST_TO_ADDR
// hackDist := 12 ;
69302: LD_ADDR_EXP 178
69306: PUSH
69307: LD_INT 12
69309: ST_TO_ADDR
// hackCounter := [ ] ;
69310: LD_ADDR_EXP 179
69314: PUSH
69315: EMPTY
69316: ST_TO_ADDR
// end ;
69317: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
69318: LD_EXP 174
69322: PUSH
69323: LD_INT 34
69325: PUSH
69326: LD_EXP 97
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PPUSH
69335: CALL_OW 69
69339: AND
69340: IFFALSE 69595
69342: GO 69344
69344: DISABLE
69345: LD_INT 0
69347: PPUSH
69348: PPUSH
// begin enable ;
69349: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
69350: LD_ADDR_VAR 0 1
69354: PUSH
69355: LD_INT 34
69357: PUSH
69358: LD_EXP 97
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PPUSH
69367: CALL_OW 69
69371: PUSH
69372: FOR_IN
69373: IFFALSE 69593
// begin if not i in hackTanks then
69375: LD_VAR 0 1
69379: PUSH
69380: LD_EXP 175
69384: IN
69385: NOT
69386: IFFALSE 69469
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
69388: LD_ADDR_EXP 175
69392: PUSH
69393: LD_EXP 175
69397: PPUSH
69398: LD_EXP 175
69402: PUSH
69403: LD_INT 1
69405: PLUS
69406: PPUSH
69407: LD_VAR 0 1
69411: PPUSH
69412: CALL_OW 1
69416: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
69417: LD_ADDR_EXP 176
69421: PUSH
69422: LD_EXP 176
69426: PPUSH
69427: LD_EXP 176
69431: PUSH
69432: LD_INT 1
69434: PLUS
69435: PPUSH
69436: EMPTY
69437: PPUSH
69438: CALL_OW 1
69442: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
69443: LD_ADDR_EXP 179
69447: PUSH
69448: LD_EXP 179
69452: PPUSH
69453: LD_EXP 179
69457: PUSH
69458: LD_INT 1
69460: PLUS
69461: PPUSH
69462: EMPTY
69463: PPUSH
69464: CALL_OW 1
69468: ST_TO_ADDR
// end ; if not IsOk ( i ) then
69469: LD_VAR 0 1
69473: PPUSH
69474: CALL_OW 302
69478: NOT
69479: IFFALSE 69492
// begin HackUnlinkAll ( i ) ;
69481: LD_VAR 0 1
69485: PPUSH
69486: CALL 69598 0 1
// continue ;
69490: GO 69372
// end ; HackCheckCapturedStatus ( i ) ;
69492: LD_VAR 0 1
69496: PPUSH
69497: CALL 70041 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
69501: LD_ADDR_VAR 0 2
69505: PUSH
69506: LD_INT 81
69508: PUSH
69509: LD_VAR 0 1
69513: PPUSH
69514: CALL_OW 255
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 33
69525: PUSH
69526: LD_INT 3
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 91
69535: PUSH
69536: LD_VAR 0 1
69540: PUSH
69541: LD_EXP 178
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: LIST
69550: PUSH
69551: LD_INT 50
69553: PUSH
69554: EMPTY
69555: LIST
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: PPUSH
69563: CALL_OW 69
69567: ST_TO_ADDR
// if not tmp then
69568: LD_VAR 0 2
69572: NOT
69573: IFFALSE 69577
// continue ;
69575: GO 69372
// HackLink ( i , tmp ) ;
69577: LD_VAR 0 1
69581: PPUSH
69582: LD_VAR 0 2
69586: PPUSH
69587: CALL 69734 0 2
// end ;
69591: GO 69372
69593: POP
69594: POP
// end ;
69595: PPOPN 2
69597: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
69598: LD_INT 0
69600: PPUSH
69601: PPUSH
69602: PPUSH
// if not hack in hackTanks then
69603: LD_VAR 0 1
69607: PUSH
69608: LD_EXP 175
69612: IN
69613: NOT
69614: IFFALSE 69618
// exit ;
69616: GO 69729
// index := GetElementIndex ( hackTanks , hack ) ;
69618: LD_ADDR_VAR 0 4
69622: PUSH
69623: LD_EXP 175
69627: PPUSH
69628: LD_VAR 0 1
69632: PPUSH
69633: CALL 17561 0 2
69637: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
69638: LD_EXP 176
69642: PUSH
69643: LD_VAR 0 4
69647: ARRAY
69648: IFFALSE 69729
// begin for i in hackTanksCaptured [ index ] do
69650: LD_ADDR_VAR 0 3
69654: PUSH
69655: LD_EXP 176
69659: PUSH
69660: LD_VAR 0 4
69664: ARRAY
69665: PUSH
69666: FOR_IN
69667: IFFALSE 69693
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
69669: LD_VAR 0 3
69673: PUSH
69674: LD_INT 1
69676: ARRAY
69677: PPUSH
69678: LD_VAR 0 3
69682: PUSH
69683: LD_INT 2
69685: ARRAY
69686: PPUSH
69687: CALL_OW 235
69691: GO 69666
69693: POP
69694: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
69695: LD_ADDR_EXP 176
69699: PUSH
69700: LD_EXP 176
69704: PPUSH
69705: LD_VAR 0 4
69709: PPUSH
69710: EMPTY
69711: PPUSH
69712: CALL_OW 1
69716: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
69717: LD_VAR 0 1
69721: PPUSH
69722: LD_INT 0
69724: PPUSH
69725: CALL_OW 505
// end ; end ;
69729: LD_VAR 0 2
69733: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
69734: LD_INT 0
69736: PPUSH
69737: PPUSH
69738: PPUSH
// if not hack in hackTanks or not vehicles then
69739: LD_VAR 0 1
69743: PUSH
69744: LD_EXP 175
69748: IN
69749: NOT
69750: PUSH
69751: LD_VAR 0 2
69755: NOT
69756: OR
69757: IFFALSE 69761
// exit ;
69759: GO 70036
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
69761: LD_ADDR_VAR 0 2
69765: PUSH
69766: LD_VAR 0 1
69770: PPUSH
69771: LD_VAR 0 2
69775: PPUSH
69776: LD_INT 1
69778: PPUSH
69779: LD_INT 1
69781: PPUSH
69782: CALL 18211 0 4
69786: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
69787: LD_ADDR_VAR 0 5
69791: PUSH
69792: LD_EXP 175
69796: PPUSH
69797: LD_VAR 0 1
69801: PPUSH
69802: CALL 17561 0 2
69806: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
69807: LD_EXP 176
69811: PUSH
69812: LD_VAR 0 5
69816: ARRAY
69817: PUSH
69818: LD_EXP 177
69822: LESS
69823: IFFALSE 70012
// begin for i := 1 to vehicles do
69825: LD_ADDR_VAR 0 4
69829: PUSH
69830: DOUBLE
69831: LD_INT 1
69833: DEC
69834: ST_TO_ADDR
69835: LD_VAR 0 2
69839: PUSH
69840: FOR_TO
69841: IFFALSE 70010
// begin if hackTanksCaptured [ index ] = hackLimit then
69843: LD_EXP 176
69847: PUSH
69848: LD_VAR 0 5
69852: ARRAY
69853: PUSH
69854: LD_EXP 177
69858: EQUAL
69859: IFFALSE 69863
// break ;
69861: GO 70010
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
69863: LD_ADDR_EXP 179
69867: PUSH
69868: LD_EXP 179
69872: PPUSH
69873: LD_VAR 0 5
69877: PPUSH
69878: LD_EXP 179
69882: PUSH
69883: LD_VAR 0 5
69887: ARRAY
69888: PUSH
69889: LD_INT 1
69891: PLUS
69892: PPUSH
69893: CALL_OW 1
69897: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
69898: LD_ADDR_EXP 176
69902: PUSH
69903: LD_EXP 176
69907: PPUSH
69908: LD_VAR 0 5
69912: PUSH
69913: LD_EXP 176
69917: PUSH
69918: LD_VAR 0 5
69922: ARRAY
69923: PUSH
69924: LD_INT 1
69926: PLUS
69927: PUSH
69928: EMPTY
69929: LIST
69930: LIST
69931: PPUSH
69932: LD_VAR 0 2
69936: PUSH
69937: LD_VAR 0 4
69941: ARRAY
69942: PUSH
69943: LD_VAR 0 2
69947: PUSH
69948: LD_VAR 0 4
69952: ARRAY
69953: PPUSH
69954: CALL_OW 255
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PPUSH
69963: CALL 17776 0 3
69967: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
69968: LD_VAR 0 2
69972: PUSH
69973: LD_VAR 0 4
69977: ARRAY
69978: PPUSH
69979: LD_VAR 0 1
69983: PPUSH
69984: CALL_OW 255
69988: PPUSH
69989: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
69993: LD_VAR 0 2
69997: PUSH
69998: LD_VAR 0 4
70002: ARRAY
70003: PPUSH
70004: CALL_OW 141
// end ;
70008: GO 69840
70010: POP
70011: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
70012: LD_VAR 0 1
70016: PPUSH
70017: LD_EXP 176
70021: PUSH
70022: LD_VAR 0 5
70026: ARRAY
70027: PUSH
70028: LD_INT 0
70030: PLUS
70031: PPUSH
70032: CALL_OW 505
// end ;
70036: LD_VAR 0 3
70040: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
70041: LD_INT 0
70043: PPUSH
70044: PPUSH
70045: PPUSH
70046: PPUSH
// if not hack in hackTanks then
70047: LD_VAR 0 1
70051: PUSH
70052: LD_EXP 175
70056: IN
70057: NOT
70058: IFFALSE 70062
// exit ;
70060: GO 70302
// index := GetElementIndex ( hackTanks , hack ) ;
70062: LD_ADDR_VAR 0 4
70066: PUSH
70067: LD_EXP 175
70071: PPUSH
70072: LD_VAR 0 1
70076: PPUSH
70077: CALL 17561 0 2
70081: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
70082: LD_ADDR_VAR 0 3
70086: PUSH
70087: DOUBLE
70088: LD_EXP 176
70092: PUSH
70093: LD_VAR 0 4
70097: ARRAY
70098: INC
70099: ST_TO_ADDR
70100: LD_INT 1
70102: PUSH
70103: FOR_DOWNTO
70104: IFFALSE 70276
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
70106: LD_ADDR_VAR 0 5
70110: PUSH
70111: LD_EXP 176
70115: PUSH
70116: LD_VAR 0 4
70120: ARRAY
70121: PUSH
70122: LD_VAR 0 3
70126: ARRAY
70127: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
70128: LD_VAR 0 5
70132: PUSH
70133: LD_INT 1
70135: ARRAY
70136: PPUSH
70137: CALL_OW 302
70141: NOT
70142: PUSH
70143: LD_VAR 0 5
70147: PUSH
70148: LD_INT 1
70150: ARRAY
70151: PPUSH
70152: CALL_OW 255
70156: PUSH
70157: LD_VAR 0 1
70161: PPUSH
70162: CALL_OW 255
70166: NONEQUAL
70167: OR
70168: IFFALSE 70274
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
70170: LD_VAR 0 5
70174: PUSH
70175: LD_INT 1
70177: ARRAY
70178: PPUSH
70179: CALL_OW 305
70183: PUSH
70184: LD_VAR 0 5
70188: PUSH
70189: LD_INT 1
70191: ARRAY
70192: PPUSH
70193: CALL_OW 255
70197: PUSH
70198: LD_VAR 0 1
70202: PPUSH
70203: CALL_OW 255
70207: EQUAL
70208: AND
70209: IFFALSE 70233
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
70211: LD_VAR 0 5
70215: PUSH
70216: LD_INT 1
70218: ARRAY
70219: PPUSH
70220: LD_VAR 0 5
70224: PUSH
70225: LD_INT 2
70227: ARRAY
70228: PPUSH
70229: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
70233: LD_ADDR_EXP 176
70237: PUSH
70238: LD_EXP 176
70242: PPUSH
70243: LD_VAR 0 4
70247: PPUSH
70248: LD_EXP 176
70252: PUSH
70253: LD_VAR 0 4
70257: ARRAY
70258: PPUSH
70259: LD_VAR 0 3
70263: PPUSH
70264: CALL_OW 3
70268: PPUSH
70269: CALL_OW 1
70273: ST_TO_ADDR
// end ; end ;
70274: GO 70103
70276: POP
70277: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
70278: LD_VAR 0 1
70282: PPUSH
70283: LD_EXP 176
70287: PUSH
70288: LD_VAR 0 4
70292: ARRAY
70293: PUSH
70294: LD_INT 0
70296: PLUS
70297: PPUSH
70298: CALL_OW 505
// end ;
70302: LD_VAR 0 2
70306: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
70307: LD_INT 0
70309: PPUSH
70310: PPUSH
70311: PPUSH
70312: PPUSH
// if not hack in hackTanks then
70313: LD_VAR 0 1
70317: PUSH
70318: LD_EXP 175
70322: IN
70323: NOT
70324: IFFALSE 70328
// exit ;
70326: GO 70413
// index := GetElementIndex ( hackTanks , hack ) ;
70328: LD_ADDR_VAR 0 5
70332: PUSH
70333: LD_EXP 175
70337: PPUSH
70338: LD_VAR 0 1
70342: PPUSH
70343: CALL 17561 0 2
70347: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
70348: LD_ADDR_VAR 0 4
70352: PUSH
70353: DOUBLE
70354: LD_INT 1
70356: DEC
70357: ST_TO_ADDR
70358: LD_EXP 176
70362: PUSH
70363: LD_VAR 0 5
70367: ARRAY
70368: PUSH
70369: FOR_TO
70370: IFFALSE 70411
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
70372: LD_EXP 176
70376: PUSH
70377: LD_VAR 0 5
70381: ARRAY
70382: PUSH
70383: LD_VAR 0 4
70387: ARRAY
70388: PUSH
70389: LD_INT 1
70391: ARRAY
70392: PUSH
70393: LD_VAR 0 2
70397: EQUAL
70398: IFFALSE 70409
// KillUnit ( vehicle ) ;
70400: LD_VAR 0 2
70404: PPUSH
70405: CALL_OW 66
70409: GO 70369
70411: POP
70412: POP
// end ;
70413: LD_VAR 0 3
70417: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
70418: LD_EXP 180
70422: NOT
70423: IFFALSE 70458
70425: GO 70427
70427: DISABLE
// begin initMiner := true ;
70428: LD_ADDR_EXP 180
70432: PUSH
70433: LD_INT 1
70435: ST_TO_ADDR
// minersList := [ ] ;
70436: LD_ADDR_EXP 181
70440: PUSH
70441: EMPTY
70442: ST_TO_ADDR
// minerMinesList := [ ] ;
70443: LD_ADDR_EXP 182
70447: PUSH
70448: EMPTY
70449: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
70450: LD_ADDR_EXP 183
70454: PUSH
70455: LD_INT 5
70457: ST_TO_ADDR
// end ;
70458: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
70459: LD_EXP 180
70463: PUSH
70464: LD_INT 34
70466: PUSH
70467: LD_EXP 102
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: PPUSH
70476: CALL_OW 69
70480: AND
70481: IFFALSE 70944
70483: GO 70485
70485: DISABLE
70486: LD_INT 0
70488: PPUSH
70489: PPUSH
70490: PPUSH
70491: PPUSH
// begin enable ;
70492: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
70493: LD_ADDR_VAR 0 1
70497: PUSH
70498: LD_INT 34
70500: PUSH
70501: LD_EXP 102
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PPUSH
70510: CALL_OW 69
70514: PUSH
70515: FOR_IN
70516: IFFALSE 70588
// begin if not i in minersList then
70518: LD_VAR 0 1
70522: PUSH
70523: LD_EXP 181
70527: IN
70528: NOT
70529: IFFALSE 70586
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
70531: LD_ADDR_EXP 181
70535: PUSH
70536: LD_EXP 181
70540: PPUSH
70541: LD_EXP 181
70545: PUSH
70546: LD_INT 1
70548: PLUS
70549: PPUSH
70550: LD_VAR 0 1
70554: PPUSH
70555: CALL_OW 1
70559: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
70560: LD_ADDR_EXP 182
70564: PUSH
70565: LD_EXP 182
70569: PPUSH
70570: LD_EXP 182
70574: PUSH
70575: LD_INT 1
70577: PLUS
70578: PPUSH
70579: EMPTY
70580: PPUSH
70581: CALL_OW 1
70585: ST_TO_ADDR
// end end ;
70586: GO 70515
70588: POP
70589: POP
// for i := minerMinesList downto 1 do
70590: LD_ADDR_VAR 0 1
70594: PUSH
70595: DOUBLE
70596: LD_EXP 182
70600: INC
70601: ST_TO_ADDR
70602: LD_INT 1
70604: PUSH
70605: FOR_DOWNTO
70606: IFFALSE 70942
// begin if IsLive ( minersList [ i ] ) then
70608: LD_EXP 181
70612: PUSH
70613: LD_VAR 0 1
70617: ARRAY
70618: PPUSH
70619: CALL_OW 300
70623: IFFALSE 70651
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
70625: LD_EXP 181
70629: PUSH
70630: LD_VAR 0 1
70634: ARRAY
70635: PPUSH
70636: LD_EXP 182
70640: PUSH
70641: LD_VAR 0 1
70645: ARRAY
70646: PPUSH
70647: CALL_OW 505
// if not minerMinesList [ i ] then
70651: LD_EXP 182
70655: PUSH
70656: LD_VAR 0 1
70660: ARRAY
70661: NOT
70662: IFFALSE 70666
// continue ;
70664: GO 70605
// for j := minerMinesList [ i ] downto 1 do
70666: LD_ADDR_VAR 0 2
70670: PUSH
70671: DOUBLE
70672: LD_EXP 182
70676: PUSH
70677: LD_VAR 0 1
70681: ARRAY
70682: INC
70683: ST_TO_ADDR
70684: LD_INT 1
70686: PUSH
70687: FOR_DOWNTO
70688: IFFALSE 70938
// begin side := GetSide ( minersList [ i ] ) ;
70690: LD_ADDR_VAR 0 3
70694: PUSH
70695: LD_EXP 181
70699: PUSH
70700: LD_VAR 0 1
70704: ARRAY
70705: PPUSH
70706: CALL_OW 255
70710: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
70711: LD_ADDR_VAR 0 4
70715: PUSH
70716: LD_EXP 182
70720: PUSH
70721: LD_VAR 0 1
70725: ARRAY
70726: PUSH
70727: LD_VAR 0 2
70731: ARRAY
70732: PUSH
70733: LD_INT 1
70735: ARRAY
70736: PPUSH
70737: LD_EXP 182
70741: PUSH
70742: LD_VAR 0 1
70746: ARRAY
70747: PUSH
70748: LD_VAR 0 2
70752: ARRAY
70753: PUSH
70754: LD_INT 2
70756: ARRAY
70757: PPUSH
70758: CALL_OW 428
70762: ST_TO_ADDR
// if not tmp then
70763: LD_VAR 0 4
70767: NOT
70768: IFFALSE 70772
// continue ;
70770: GO 70687
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
70772: LD_VAR 0 4
70776: PUSH
70777: LD_INT 81
70779: PUSH
70780: LD_VAR 0 3
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PPUSH
70789: CALL_OW 69
70793: IN
70794: PUSH
70795: LD_EXP 182
70799: PUSH
70800: LD_VAR 0 1
70804: ARRAY
70805: PUSH
70806: LD_VAR 0 2
70810: ARRAY
70811: PUSH
70812: LD_INT 1
70814: ARRAY
70815: PPUSH
70816: LD_EXP 182
70820: PUSH
70821: LD_VAR 0 1
70825: ARRAY
70826: PUSH
70827: LD_VAR 0 2
70831: ARRAY
70832: PUSH
70833: LD_INT 2
70835: ARRAY
70836: PPUSH
70837: CALL_OW 458
70841: AND
70842: IFFALSE 70936
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
70844: LD_EXP 182
70848: PUSH
70849: LD_VAR 0 1
70853: ARRAY
70854: PUSH
70855: LD_VAR 0 2
70859: ARRAY
70860: PUSH
70861: LD_INT 1
70863: ARRAY
70864: PPUSH
70865: LD_EXP 182
70869: PUSH
70870: LD_VAR 0 1
70874: ARRAY
70875: PUSH
70876: LD_VAR 0 2
70880: ARRAY
70881: PUSH
70882: LD_INT 2
70884: ARRAY
70885: PPUSH
70886: LD_VAR 0 3
70890: PPUSH
70891: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
70895: LD_ADDR_EXP 182
70899: PUSH
70900: LD_EXP 182
70904: PPUSH
70905: LD_VAR 0 1
70909: PPUSH
70910: LD_EXP 182
70914: PUSH
70915: LD_VAR 0 1
70919: ARRAY
70920: PPUSH
70921: LD_VAR 0 2
70925: PPUSH
70926: CALL_OW 3
70930: PPUSH
70931: CALL_OW 1
70935: ST_TO_ADDR
// end ; end ;
70936: GO 70687
70938: POP
70939: POP
// end ;
70940: GO 70605
70942: POP
70943: POP
// end ;
70944: PPOPN 4
70946: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
70947: LD_INT 0
70949: PPUSH
70950: PPUSH
// result := false ;
70951: LD_ADDR_VAR 0 4
70955: PUSH
70956: LD_INT 0
70958: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
70959: LD_VAR 0 1
70963: PPUSH
70964: CALL_OW 264
70968: PUSH
70969: LD_EXP 102
70973: EQUAL
70974: NOT
70975: IFFALSE 70979
// exit ;
70977: GO 71219
// index := GetElementIndex ( minersList , unit ) ;
70979: LD_ADDR_VAR 0 5
70983: PUSH
70984: LD_EXP 181
70988: PPUSH
70989: LD_VAR 0 1
70993: PPUSH
70994: CALL 17561 0 2
70998: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
70999: LD_EXP 182
71003: PUSH
71004: LD_VAR 0 5
71008: ARRAY
71009: PUSH
71010: LD_EXP 183
71014: GREATEREQUAL
71015: IFFALSE 71019
// exit ;
71017: GO 71219
// ComMoveXY ( unit , x , y ) ;
71019: LD_VAR 0 1
71023: PPUSH
71024: LD_VAR 0 2
71028: PPUSH
71029: LD_VAR 0 3
71033: PPUSH
71034: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
71038: LD_INT 35
71040: PPUSH
71041: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
71045: LD_VAR 0 1
71049: PPUSH
71050: LD_VAR 0 2
71054: PPUSH
71055: LD_VAR 0 3
71059: PPUSH
71060: CALL 48388 0 3
71064: NOT
71065: PUSH
71066: LD_VAR 0 1
71070: PPUSH
71071: CALL_OW 314
71075: AND
71076: IFFALSE 71080
// exit ;
71078: GO 71219
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
71080: LD_VAR 0 2
71084: PPUSH
71085: LD_VAR 0 3
71089: PPUSH
71090: CALL_OW 428
71094: PUSH
71095: LD_VAR 0 1
71099: EQUAL
71100: PUSH
71101: LD_VAR 0 1
71105: PPUSH
71106: CALL_OW 314
71110: NOT
71111: AND
71112: IFFALSE 71038
// PlaySoundXY ( x , y , PlantMine ) ;
71114: LD_VAR 0 2
71118: PPUSH
71119: LD_VAR 0 3
71123: PPUSH
71124: LD_STRING PlantMine
71126: PPUSH
71127: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
71131: LD_VAR 0 2
71135: PPUSH
71136: LD_VAR 0 3
71140: PPUSH
71141: LD_VAR 0 1
71145: PPUSH
71146: CALL_OW 255
71150: PPUSH
71151: LD_INT 0
71153: PPUSH
71154: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
71158: LD_ADDR_EXP 182
71162: PUSH
71163: LD_EXP 182
71167: PPUSH
71168: LD_VAR 0 5
71172: PUSH
71173: LD_EXP 182
71177: PUSH
71178: LD_VAR 0 5
71182: ARRAY
71183: PUSH
71184: LD_INT 1
71186: PLUS
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: PPUSH
71192: LD_VAR 0 2
71196: PUSH
71197: LD_VAR 0 3
71201: PUSH
71202: EMPTY
71203: LIST
71204: LIST
71205: PPUSH
71206: CALL 17776 0 3
71210: ST_TO_ADDR
// result := true ;
71211: LD_ADDR_VAR 0 4
71215: PUSH
71216: LD_INT 1
71218: ST_TO_ADDR
// end ;
71219: LD_VAR 0 4
71223: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
71224: LD_INT 0
71226: PPUSH
71227: PPUSH
71228: PPUSH
// if not unit in minersList then
71229: LD_VAR 0 1
71233: PUSH
71234: LD_EXP 181
71238: IN
71239: NOT
71240: IFFALSE 71244
// exit ;
71242: GO 71636
// index := GetElementIndex ( minersList , unit ) ;
71244: LD_ADDR_VAR 0 6
71248: PUSH
71249: LD_EXP 181
71253: PPUSH
71254: LD_VAR 0 1
71258: PPUSH
71259: CALL 17561 0 2
71263: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
71264: LD_ADDR_VAR 0 5
71268: PUSH
71269: DOUBLE
71270: LD_EXP 182
71274: PUSH
71275: LD_VAR 0 6
71279: ARRAY
71280: INC
71281: ST_TO_ADDR
71282: LD_INT 1
71284: PUSH
71285: FOR_DOWNTO
71286: IFFALSE 71447
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
71288: LD_EXP 182
71292: PUSH
71293: LD_VAR 0 6
71297: ARRAY
71298: PUSH
71299: LD_VAR 0 5
71303: ARRAY
71304: PUSH
71305: LD_INT 1
71307: ARRAY
71308: PUSH
71309: LD_VAR 0 2
71313: EQUAL
71314: PUSH
71315: LD_EXP 182
71319: PUSH
71320: LD_VAR 0 6
71324: ARRAY
71325: PUSH
71326: LD_VAR 0 5
71330: ARRAY
71331: PUSH
71332: LD_INT 2
71334: ARRAY
71335: PUSH
71336: LD_VAR 0 3
71340: EQUAL
71341: AND
71342: IFFALSE 71445
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71344: LD_EXP 182
71348: PUSH
71349: LD_VAR 0 6
71353: ARRAY
71354: PUSH
71355: LD_VAR 0 5
71359: ARRAY
71360: PUSH
71361: LD_INT 1
71363: ARRAY
71364: PPUSH
71365: LD_EXP 182
71369: PUSH
71370: LD_VAR 0 6
71374: ARRAY
71375: PUSH
71376: LD_VAR 0 5
71380: ARRAY
71381: PUSH
71382: LD_INT 2
71384: ARRAY
71385: PPUSH
71386: LD_VAR 0 1
71390: PPUSH
71391: CALL_OW 255
71395: PPUSH
71396: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
71400: LD_ADDR_EXP 182
71404: PUSH
71405: LD_EXP 182
71409: PPUSH
71410: LD_VAR 0 6
71414: PPUSH
71415: LD_EXP 182
71419: PUSH
71420: LD_VAR 0 6
71424: ARRAY
71425: PPUSH
71426: LD_VAR 0 5
71430: PPUSH
71431: CALL_OW 3
71435: PPUSH
71436: CALL_OW 1
71440: ST_TO_ADDR
// exit ;
71441: POP
71442: POP
71443: GO 71636
// end ; end ;
71445: GO 71285
71447: POP
71448: POP
// for i := minerMinesList [ index ] downto 1 do
71449: LD_ADDR_VAR 0 5
71453: PUSH
71454: DOUBLE
71455: LD_EXP 182
71459: PUSH
71460: LD_VAR 0 6
71464: ARRAY
71465: INC
71466: ST_TO_ADDR
71467: LD_INT 1
71469: PUSH
71470: FOR_DOWNTO
71471: IFFALSE 71634
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
71473: LD_EXP 182
71477: PUSH
71478: LD_VAR 0 6
71482: ARRAY
71483: PUSH
71484: LD_VAR 0 5
71488: ARRAY
71489: PUSH
71490: LD_INT 1
71492: ARRAY
71493: PPUSH
71494: LD_EXP 182
71498: PUSH
71499: LD_VAR 0 6
71503: ARRAY
71504: PUSH
71505: LD_VAR 0 5
71509: ARRAY
71510: PUSH
71511: LD_INT 2
71513: ARRAY
71514: PPUSH
71515: LD_VAR 0 2
71519: PPUSH
71520: LD_VAR 0 3
71524: PPUSH
71525: CALL_OW 298
71529: PUSH
71530: LD_INT 6
71532: LESS
71533: IFFALSE 71632
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71535: LD_EXP 182
71539: PUSH
71540: LD_VAR 0 6
71544: ARRAY
71545: PUSH
71546: LD_VAR 0 5
71550: ARRAY
71551: PUSH
71552: LD_INT 1
71554: ARRAY
71555: PPUSH
71556: LD_EXP 182
71560: PUSH
71561: LD_VAR 0 6
71565: ARRAY
71566: PUSH
71567: LD_VAR 0 5
71571: ARRAY
71572: PUSH
71573: LD_INT 2
71575: ARRAY
71576: PPUSH
71577: LD_VAR 0 1
71581: PPUSH
71582: CALL_OW 255
71586: PPUSH
71587: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
71591: LD_ADDR_EXP 182
71595: PUSH
71596: LD_EXP 182
71600: PPUSH
71601: LD_VAR 0 6
71605: PPUSH
71606: LD_EXP 182
71610: PUSH
71611: LD_VAR 0 6
71615: ARRAY
71616: PPUSH
71617: LD_VAR 0 5
71621: PPUSH
71622: CALL_OW 3
71626: PPUSH
71627: CALL_OW 1
71631: ST_TO_ADDR
// end ; end ;
71632: GO 71470
71634: POP
71635: POP
// end ;
71636: LD_VAR 0 4
71640: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
71641: LD_INT 0
71643: PPUSH
71644: PPUSH
71645: PPUSH
71646: PPUSH
71647: PPUSH
71648: PPUSH
71649: PPUSH
71650: PPUSH
71651: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
71652: LD_VAR 0 1
71656: PPUSH
71657: CALL_OW 264
71661: PUSH
71662: LD_EXP 102
71666: EQUAL
71667: NOT
71668: PUSH
71669: LD_VAR 0 1
71673: PUSH
71674: LD_EXP 181
71678: IN
71679: NOT
71680: OR
71681: IFFALSE 71685
// exit ;
71683: GO 72007
// index := GetElementIndex ( minersList , unit ) ;
71685: LD_ADDR_VAR 0 6
71689: PUSH
71690: LD_EXP 181
71694: PPUSH
71695: LD_VAR 0 1
71699: PPUSH
71700: CALL 17561 0 2
71704: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
71705: LD_ADDR_VAR 0 8
71709: PUSH
71710: LD_EXP 183
71714: PUSH
71715: LD_EXP 182
71719: PUSH
71720: LD_VAR 0 6
71724: ARRAY
71725: MINUS
71726: ST_TO_ADDR
// if not minesFreeAmount then
71727: LD_VAR 0 8
71731: NOT
71732: IFFALSE 71736
// exit ;
71734: GO 72007
// tmp := [ ] ;
71736: LD_ADDR_VAR 0 7
71740: PUSH
71741: EMPTY
71742: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
71743: LD_ADDR_VAR 0 5
71747: PUSH
71748: DOUBLE
71749: LD_INT 1
71751: DEC
71752: ST_TO_ADDR
71753: LD_VAR 0 8
71757: PUSH
71758: FOR_TO
71759: IFFALSE 71954
// begin _d := rand ( 0 , 5 ) ;
71761: LD_ADDR_VAR 0 11
71765: PUSH
71766: LD_INT 0
71768: PPUSH
71769: LD_INT 5
71771: PPUSH
71772: CALL_OW 12
71776: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
71777: LD_ADDR_VAR 0 12
71781: PUSH
71782: LD_INT 2
71784: PPUSH
71785: LD_INT 6
71787: PPUSH
71788: CALL_OW 12
71792: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
71793: LD_ADDR_VAR 0 9
71797: PUSH
71798: LD_VAR 0 2
71802: PPUSH
71803: LD_VAR 0 11
71807: PPUSH
71808: LD_VAR 0 12
71812: PPUSH
71813: CALL_OW 272
71817: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
71818: LD_ADDR_VAR 0 10
71822: PUSH
71823: LD_VAR 0 3
71827: PPUSH
71828: LD_VAR 0 11
71832: PPUSH
71833: LD_VAR 0 12
71837: PPUSH
71838: CALL_OW 273
71842: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
71843: LD_VAR 0 9
71847: PPUSH
71848: LD_VAR 0 10
71852: PPUSH
71853: CALL_OW 488
71857: PUSH
71858: LD_VAR 0 9
71862: PUSH
71863: LD_VAR 0 10
71867: PUSH
71868: EMPTY
71869: LIST
71870: LIST
71871: PUSH
71872: LD_VAR 0 7
71876: IN
71877: NOT
71878: AND
71879: PUSH
71880: LD_VAR 0 9
71884: PPUSH
71885: LD_VAR 0 10
71889: PPUSH
71890: CALL_OW 458
71894: NOT
71895: AND
71896: IFFALSE 71938
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
71898: LD_ADDR_VAR 0 7
71902: PUSH
71903: LD_VAR 0 7
71907: PPUSH
71908: LD_VAR 0 7
71912: PUSH
71913: LD_INT 1
71915: PLUS
71916: PPUSH
71917: LD_VAR 0 9
71921: PUSH
71922: LD_VAR 0 10
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: PPUSH
71931: CALL_OW 1
71935: ST_TO_ADDR
71936: GO 71952
// i := i - 1 ;
71938: LD_ADDR_VAR 0 5
71942: PUSH
71943: LD_VAR 0 5
71947: PUSH
71948: LD_INT 1
71950: MINUS
71951: ST_TO_ADDR
// end ;
71952: GO 71758
71954: POP
71955: POP
// for i in tmp do
71956: LD_ADDR_VAR 0 5
71960: PUSH
71961: LD_VAR 0 7
71965: PUSH
71966: FOR_IN
71967: IFFALSE 72005
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
71969: LD_VAR 0 1
71973: PPUSH
71974: LD_VAR 0 5
71978: PUSH
71979: LD_INT 1
71981: ARRAY
71982: PPUSH
71983: LD_VAR 0 5
71987: PUSH
71988: LD_INT 2
71990: ARRAY
71991: PPUSH
71992: CALL 70947 0 3
71996: NOT
71997: IFFALSE 72003
// exit ;
71999: POP
72000: POP
72001: GO 72007
72003: GO 71966
72005: POP
72006: POP
// end ;
72007: LD_VAR 0 4
72011: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
72012: LD_INT 0
72014: PPUSH
72015: PPUSH
72016: PPUSH
72017: PPUSH
72018: PPUSH
72019: PPUSH
72020: PPUSH
// if not GetClass ( unit ) = class_sniper then
72021: LD_VAR 0 1
72025: PPUSH
72026: CALL_OW 257
72030: PUSH
72031: LD_INT 5
72033: EQUAL
72034: NOT
72035: IFFALSE 72039
// exit ;
72037: GO 72427
// dist := 8 ;
72039: LD_ADDR_VAR 0 5
72043: PUSH
72044: LD_INT 8
72046: ST_TO_ADDR
// viewRange := 12 ;
72047: LD_ADDR_VAR 0 7
72051: PUSH
72052: LD_INT 12
72054: ST_TO_ADDR
// side := GetSide ( unit ) ;
72055: LD_ADDR_VAR 0 6
72059: PUSH
72060: LD_VAR 0 1
72064: PPUSH
72065: CALL_OW 255
72069: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
72070: LD_INT 61
72072: PPUSH
72073: LD_VAR 0 6
72077: PPUSH
72078: CALL_OW 321
72082: PUSH
72083: LD_INT 2
72085: EQUAL
72086: IFFALSE 72096
// viewRange := 16 ;
72088: LD_ADDR_VAR 0 7
72092: PUSH
72093: LD_INT 16
72095: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
72096: LD_VAR 0 1
72100: PPUSH
72101: LD_VAR 0 2
72105: PPUSH
72106: LD_VAR 0 3
72110: PPUSH
72111: CALL_OW 297
72115: PUSH
72116: LD_VAR 0 5
72120: GREATER
72121: IFFALSE 72200
// begin ComMoveXY ( unit , x , y ) ;
72123: LD_VAR 0 1
72127: PPUSH
72128: LD_VAR 0 2
72132: PPUSH
72133: LD_VAR 0 3
72137: PPUSH
72138: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
72142: LD_INT 35
72144: PPUSH
72145: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
72149: LD_VAR 0 1
72153: PPUSH
72154: LD_VAR 0 2
72158: PPUSH
72159: LD_VAR 0 3
72163: PPUSH
72164: CALL 48388 0 3
72168: NOT
72169: IFFALSE 72173
// exit ;
72171: GO 72427
// until GetDistUnitXY ( unit , x , y ) < dist ;
72173: LD_VAR 0 1
72177: PPUSH
72178: LD_VAR 0 2
72182: PPUSH
72183: LD_VAR 0 3
72187: PPUSH
72188: CALL_OW 297
72192: PUSH
72193: LD_VAR 0 5
72197: LESS
72198: IFFALSE 72142
// end ; ComTurnXY ( unit , x , y ) ;
72200: LD_VAR 0 1
72204: PPUSH
72205: LD_VAR 0 2
72209: PPUSH
72210: LD_VAR 0 3
72214: PPUSH
72215: CALL_OW 118
// wait ( 5 ) ;
72219: LD_INT 5
72221: PPUSH
72222: CALL_OW 67
// _d := GetDir ( unit ) ;
72226: LD_ADDR_VAR 0 10
72230: PUSH
72231: LD_VAR 0 1
72235: PPUSH
72236: CALL_OW 254
72240: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
72241: LD_ADDR_VAR 0 8
72245: PUSH
72246: LD_VAR 0 1
72250: PPUSH
72251: CALL_OW 250
72255: PPUSH
72256: LD_VAR 0 10
72260: PPUSH
72261: LD_VAR 0 5
72265: PPUSH
72266: CALL_OW 272
72270: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
72271: LD_ADDR_VAR 0 9
72275: PUSH
72276: LD_VAR 0 1
72280: PPUSH
72281: CALL_OW 251
72285: PPUSH
72286: LD_VAR 0 10
72290: PPUSH
72291: LD_VAR 0 5
72295: PPUSH
72296: CALL_OW 273
72300: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72301: LD_VAR 0 8
72305: PPUSH
72306: LD_VAR 0 9
72310: PPUSH
72311: CALL_OW 488
72315: NOT
72316: IFFALSE 72320
// exit ;
72318: GO 72427
// ComAnimCustom ( unit , 1 ) ;
72320: LD_VAR 0 1
72324: PPUSH
72325: LD_INT 1
72327: PPUSH
72328: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
72332: LD_VAR 0 8
72336: PPUSH
72337: LD_VAR 0 9
72341: PPUSH
72342: LD_VAR 0 6
72346: PPUSH
72347: LD_VAR 0 7
72351: PPUSH
72352: CALL_OW 330
// repeat wait ( 1 ) ;
72356: LD_INT 1
72358: PPUSH
72359: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
72363: LD_VAR 0 1
72367: PPUSH
72368: CALL_OW 316
72372: PUSH
72373: LD_VAR 0 1
72377: PPUSH
72378: CALL_OW 314
72382: OR
72383: PUSH
72384: LD_VAR 0 1
72388: PPUSH
72389: CALL_OW 302
72393: NOT
72394: OR
72395: PUSH
72396: LD_VAR 0 1
72400: PPUSH
72401: CALL_OW 301
72405: OR
72406: IFFALSE 72356
// RemoveSeeing ( _x , _y , side ) ;
72408: LD_VAR 0 8
72412: PPUSH
72413: LD_VAR 0 9
72417: PPUSH
72418: LD_VAR 0 6
72422: PPUSH
72423: CALL_OW 331
// end ; end_of_file
72427: LD_VAR 0 4
72431: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72432: LD_VAR 0 1
72436: PUSH
72437: LD_INT 200
72439: DOUBLE
72440: GREATEREQUAL
72441: IFFALSE 72449
72443: LD_INT 299
72445: DOUBLE
72446: LESSEQUAL
72447: IFTRUE 72451
72449: GO 72483
72451: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72452: LD_VAR 0 1
72456: PPUSH
72457: LD_VAR 0 2
72461: PPUSH
72462: LD_VAR 0 3
72466: PPUSH
72467: LD_VAR 0 4
72471: PPUSH
72472: LD_VAR 0 5
72476: PPUSH
72477: CALL 68170 0 5
72481: GO 72560
72483: LD_INT 300
72485: DOUBLE
72486: GREATEREQUAL
72487: IFFALSE 72495
72489: LD_INT 399
72491: DOUBLE
72492: LESSEQUAL
72493: IFTRUE 72497
72495: GO 72559
72497: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72498: LD_VAR 0 1
72502: PPUSH
72503: LD_VAR 0 2
72507: PPUSH
72508: LD_VAR 0 3
72512: PPUSH
72513: LD_VAR 0 4
72517: PPUSH
72518: LD_VAR 0 5
72522: PPUSH
72523: LD_VAR 0 6
72527: PPUSH
72528: LD_VAR 0 7
72532: PPUSH
72533: LD_VAR 0 8
72537: PPUSH
72538: LD_VAR 0 9
72542: PPUSH
72543: LD_VAR 0 10
72547: PPUSH
72548: LD_VAR 0 11
72552: PPUSH
72553: CALL 65812 0 11
72557: GO 72560
72559: POP
// end ;
72560: PPOPN 11
72562: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72563: LD_VAR 0 1
72567: PPUSH
72568: LD_VAR 0 2
72572: PPUSH
72573: LD_VAR 0 3
72577: PPUSH
72578: LD_VAR 0 4
72582: PPUSH
72583: LD_VAR 0 5
72587: PPUSH
72588: CALL 67906 0 5
// end ;
72592: PPOPN 5
72594: END
