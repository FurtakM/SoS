// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export meetBelkovBrother ; export cratesResources , oilResources ; export vehiclesPreviousMission ; export spawnCrates ; export scholtzeSpawnNearAmericans , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinOpinion , platonovOpinion ; export canDestroyBeriaBase ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 294 0 0
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_MeetBelkovBrother_6
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// cratesResources = LoadVariable ( 02_BeriaResourceCrates_7 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 02_BeriaResourceCrates_7
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// oilResources = LoadVariable ( 02_BeriaResourceOil_8 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_BeriaResourceOil_8
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// vehiclesPreviousMission = LoadVariable ( 02_Vehicles_1 , 0 ) ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_STRING 02_Vehicles_1
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  88: LD_ADDR_EXP 27
  92: PUSH
  93: LD_STRING 02_PlatonovOpinion_9
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// kurinOpinion = - 1 ;
 104: LD_ADDR_EXP 26
 108: PUSH
 109: LD_INT 1
 111: NEG
 112: ST_TO_ADDR
// scholtzeSpawnNearAmericans = false ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// scholtzeSaved = false ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// americanTroopsArriveOmicronCounter = 0 ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// spawnCrates = true ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 1
 144: ST_TO_ADDR
// dialog_track = false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// dialog_workshop = false ;
 153: LD_ADDR_EXP 8
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// dialog_stop = false ;
 161: LD_ADDR_EXP 11
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// counterEnable = false ;
 169: LD_ADDR_EXP 85
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// extraTime = 7 7$00 ;
 177: LD_ADDR_EXP 14
 181: PUSH
 182: LD_INT 14700
 184: ST_TO_ADDR
// kurinGiveMoreTime = false ;
 185: LD_ADDR_EXP 13
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 4200
 200: ST_TO_ADDR
// produceOnlyForYou = false ;
 201: LD_ADDR_EXP 17
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// produceMoreVehicles = false ;
 209: LD_ADDR_EXP 16
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// kurinCheckVehicles = false ;
 217: LD_ADDR_EXP 18
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omicronSurrender = false ;
 225: LD_ADDR_EXP 23
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// canExitBattlefield = true ;
 233: LD_ADDR_EXP 24
 237: PUSH
 238: LD_INT 1
 240: ST_TO_ADDR
// immortalSurvivors = false ;
 241: LD_ADDR_EXP 25
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// canDestroyBeriaBase = false ;
 249: LD_ADDR_EXP 28
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// kirovFactory = 0 ;
 257: LD_ADDR_EXP 21
 261: PUSH
 262: LD_INT 0
 264: ST_TO_ADDR
// kirovCompleteFactory = false ;
 265: LD_ADDR_EXP 22
 269: PUSH
 270: LD_INT 0
 272: ST_TO_ADDR
// PrepareRussians ;
 273: CALL 999 0 0
// PrepareAmericans ;
 277: CALL 5762 0 0
// Nef_PrepareNature ;
 281: CALL 22125 0 0
// MissionIntro ;
 285: CALL 15289 0 0
// end ; end_of_file
 289: LD_VAR 0 1
 293: RET
// export function InitMapConfig ; begin
 294: LD_INT 0
 296: PPUSH
// BaseMapConfig ;
 297: CALL 310 0 0
// MissionMapConfig ;
 301: CALL 408 0 0
// end ;
 305: LD_VAR 0 1
 309: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 310: LD_INT 0
 312: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 ] ;
 313: LD_ADDR_EXP 29
 317: PUSH
 318: LD_INT 8
 320: PUSH
 321: LD_INT 12
 323: PUSH
 324: LD_INT 6
 326: PUSH
 327: LD_INT 6
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: LIST
 334: LIST
 335: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 336: LD_ADDR_EXP 30
 340: PUSH
 341: LD_INT 2
 343: PUSH
 344: LD_INT 2
 346: PUSH
 347: LD_INT 2
 349: PUSH
 350: LD_INT 2
 352: PUSH
 353: EMPTY
 354: LIST
 355: LIST
 356: LIST
 357: LIST
 358: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 359: LD_ADDR_EXP 31
 363: PUSH
 364: LD_INT 5
 366: NEG
 367: PPUSH
 368: LD_INT 5
 370: PPUSH
 371: CALL_OW 12
 375: PUSH
 376: EMPTY
 377: LIST
 378: ST_TO_ADDR
// debugMode = 0 ;
 379: LD_ADDR_EXP 34
 383: PUSH
 384: LD_INT 0
 386: ST_TO_ADDR
// missionPrefix = 03_ ;
 387: LD_ADDR_EXP 32
 391: PUSH
 392: LD_STRING 03_
 394: ST_TO_ADDR
// previousMissionPrefix = 02_ ;
 395: LD_ADDR_EXP 33
 399: PUSH
 400: LD_STRING 02_
 402: ST_TO_ADDR
// end ;
 403: LD_VAR 0 1
 407: RET
// export baseUnitsToChoose , scholtzeSpawnPositions ; export timeToPrepareAttack ; export bonusResourcesCrates , bonusResourcesOil ; export enemySkillLevel ; export americanWeapons , russianWeapons ; export maxAmericanTroopsIgnore ; export animalsSafeTime ; function MissionMapConfig ; begin
 408: LD_INT 0
 410: PPUSH
// baseUnitsToChoose = [ 7 , 6 , 6 ] [ Difficulty ] ;
 411: LD_ADDR_EXP 35
 415: PUSH
 416: LD_INT 7
 418: PUSH
 419: LD_INT 6
 421: PUSH
 422: LD_INT 6
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: PUSH
 430: LD_OWVAR 67
 434: ARRAY
 435: ST_TO_ADDR
// scholtzeSpawnPositions = [ [ 150 , 144 ] , [ 51 , 7 , 89 , 19 , 118 , 9 ] , [ 150 , 144 , 51 , 7 , 89 , 19 , 118 , 9 ] ] [ Difficulty ] ;
 436: LD_ADDR_EXP 36
 440: PUSH
 441: LD_INT 150
 443: PUSH
 444: LD_INT 144
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: PUSH
 451: LD_INT 51
 453: PUSH
 454: LD_INT 7
 456: PUSH
 457: LD_INT 89
 459: PUSH
 460: LD_INT 19
 462: PUSH
 463: LD_INT 118
 465: PUSH
 466: LD_INT 9
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_INT 150
 479: PUSH
 480: LD_INT 144
 482: PUSH
 483: LD_INT 51
 485: PUSH
 486: LD_INT 7
 488: PUSH
 489: LD_INT 89
 491: PUSH
 492: LD_INT 19
 494: PUSH
 495: LD_INT 118
 497: PUSH
 498: LD_INT 9
 500: PUSH
 501: EMPTY
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: PUSH
 516: LD_OWVAR 67
 520: ARRAY
 521: ST_TO_ADDR
// timeToPrepareAttack = [ 40 40$0 , 35 35$0 , 30 30$0 ] [ Difficulty ] ;
 522: LD_ADDR_EXP 37
 526: PUSH
 527: LD_INT 84000
 529: PUSH
 530: LD_INT 73500
 532: PUSH
 533: LD_INT 63000
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: LIST
 540: PUSH
 541: LD_OWVAR 67
 545: ARRAY
 546: ST_TO_ADDR
// bonusResourcesCrates = [ 150 , 100 , 50 ] [ Difficulty ] ;
 547: LD_ADDR_EXP 38
 551: PUSH
 552: LD_INT 150
 554: PUSH
 555: LD_INT 100
 557: PUSH
 558: LD_INT 50
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: LIST
 565: PUSH
 566: LD_OWVAR 67
 570: ARRAY
 571: ST_TO_ADDR
// bonusResourcesOil = [ 100 , 50 , 0 ] [ Difficulty ] ;
 572: LD_ADDR_EXP 39
 576: PUSH
 577: LD_INT 100
 579: PUSH
 580: LD_INT 50
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: LIST
 590: PUSH
 591: LD_OWVAR 67
 595: ARRAY
 596: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 597: LD_ADDR_EXP 40
 601: PUSH
 602: LD_INT 1
 604: PUSH
 605: LD_INT 2
 607: PUSH
 608: LD_INT 2
 610: PUSH
 611: EMPTY
 612: LIST
 613: LIST
 614: LIST
 615: PUSH
 616: LD_OWVAR 67
 620: ARRAY
 621: ST_TO_ADDR
// maxAmericanTroopsIgnore = [ 8 , 6 , 5 ] [ Difficulty ] ;
 622: LD_ADDR_EXP 43
 626: PUSH
 627: LD_INT 8
 629: PUSH
 630: LD_INT 6
 632: PUSH
 633: LD_INT 5
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: LIST
 640: PUSH
 641: LD_OWVAR 67
 645: ARRAY
 646: ST_TO_ADDR
// animalsSafeTime = [ 8 8$30 , 8 8$00 , 7 7$30 ] [ Difficulty ] ;
 647: LD_ADDR_EXP 44
 651: PUSH
 652: LD_INT 17850
 654: PUSH
 655: LD_INT 16800
 657: PUSH
 658: LD_INT 15750
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: LIST
 665: PUSH
 666: LD_OWVAR 67
 670: ARRAY
 671: ST_TO_ADDR
// end ;
 672: LD_VAR 0 1
 676: RET
// every 0 0$1 trigger debugMode do var i ;
 677: LD_EXP 34
 681: IFFALSE 996
 683: GO 685
 685: DISABLE
 686: LD_INT 0
 688: PPUSH
// begin enable ;
 689: ENABLE
// FogOff ( your_side ) ;
 690: LD_OWVAR 2
 694: PPUSH
 695: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 699: LD_ADDR_VAR 0 1
 703: PUSH
 704: LD_INT 22
 706: PUSH
 707: LD_OWVAR 2
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: PUSH
 716: LD_INT 2
 718: PUSH
 719: LD_INT 21
 721: PUSH
 722: LD_INT 1
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: PUSH
 729: LD_INT 21
 731: PUSH
 732: LD_INT 2
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: LIST
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PPUSH
 748: CALL_OW 69
 752: PUSH
 753: FOR_IN
 754: IFFALSE 770
// SetLives ( i , 1000 ) ;
 756: LD_VAR 0 1
 760: PPUSH
 761: LD_INT 1000
 763: PPUSH
 764: CALL_OW 234
 768: GO 753
 770: POP
 771: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 772: LD_ADDR_VAR 0 1
 776: PUSH
 777: LD_INT 22
 779: PUSH
 780: LD_OWVAR 2
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 21
 791: PUSH
 792: LD_INT 1
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PPUSH
 803: CALL_OW 69
 807: PUSH
 808: FOR_IN
 809: IFFALSE 873
// begin SetSkill ( i , skill_combat , 10 ) ;
 811: LD_VAR 0 1
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: LD_INT 10
 821: PPUSH
 822: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 826: LD_VAR 0 1
 830: PPUSH
 831: LD_INT 2
 833: PPUSH
 834: LD_INT 10
 836: PPUSH
 837: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 841: LD_VAR 0 1
 845: PPUSH
 846: LD_INT 3
 848: PPUSH
 849: LD_INT 10
 851: PPUSH
 852: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 856: LD_VAR 0 1
 860: PPUSH
 861: LD_INT 4
 863: PPUSH
 864: LD_INT 10
 866: PPUSH
 867: CALL_OW 237
// end ;
 871: GO 808
 873: POP
 874: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 875: LD_ADDR_VAR 0 1
 879: PUSH
 880: LD_INT 22
 882: PUSH
 883: LD_OWVAR 2
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: PUSH
 892: LD_INT 2
 894: PUSH
 895: LD_INT 30
 897: PUSH
 898: LD_INT 0
 900: PUSH
 901: EMPTY
 902: LIST
 903: LIST
 904: PUSH
 905: LD_INT 30
 907: PUSH
 908: LD_INT 1
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: LIST
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PPUSH
 924: CALL_OW 69
 928: PUSH
 929: FOR_IN
 930: IFFALSE 994
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 932: LD_VAR 0 1
 936: PPUSH
 937: CALL_OW 274
 941: PPUSH
 942: LD_INT 1
 944: PPUSH
 945: LD_INT 9999
 947: PPUSH
 948: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 952: LD_VAR 0 1
 956: PPUSH
 957: CALL_OW 274
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 9999
 967: PPUSH
 968: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 972: LD_VAR 0 1
 976: PPUSH
 977: CALL_OW 274
 981: PPUSH
 982: LD_INT 3
 984: PPUSH
 985: LD_INT 9999
 987: PPUSH
 988: CALL_OW 277
// end ;
 992: GO 929
 994: POP
 995: POP
// end ; end_of_file
 996: PPOPN 1
 998: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 ; export Scholtze , fakeScholtze ; export other_survivors ; export playerVehicles ; export otherBeriaUnits , beriaBase , beriaDepot ; export Kurin , Popov , BelkovDialog ; export ruScout ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot ; export ru2_bar1 , ru2_bar2 ; export kirovEng ; export kirovBunkersToMountWeapon , kirovBunkersToOccupy ; export kirovTransportCargo ; export kirovAttackCargo , kirovAttackVehicles ; export secondBaseTeam ; export survivorsArabianAttack ; export survivorsToSpawn ; export neededUnitsSpawn ; export Grishko ; export function PrepareRussians ; begin
 999: LD_INT 0
1001: PPUSH
// neededUnitsSpawn = [ 0 , 0 , 0 , 0 ] ;
1002: LD_ADDR_EXP 77
1006: PUSH
1007: LD_INT 0
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: LD_INT 0
1015: PUSH
1016: LD_INT 0
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: ST_TO_ADDR
// kirovAttackCargo = [ ] ;
1025: LD_ADDR_EXP 72
1029: PUSH
1030: EMPTY
1031: ST_TO_ADDR
// PrepareKirovBase ;
1032: CALL 2012 0 0
// PrepareHeroes ;
1036: CALL 1065 0 0
// PrepareBeriaBase ;
1040: CALL 1414 0 0
// PrepareSecondBaseTeam ;
1044: CALL 3932 0 0
// PrepareGrishko ;
1048: CALL 3097 0 0
// PrepareOtherBuildings ;
1052: CALL 3366 0 0
// PrepareVehicles ;
1056: CALL 3170 0 0
// end ;
1060: LD_VAR 0 1
1064: RET
// function PrepareHeroes ; begin
1065: LD_INT 0
1067: PPUSH
// uc_side = 3 ;
1068: LD_ADDR_OWVAR 20
1072: PUSH
1073: LD_INT 3
1075: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true ) ;
1076: LD_ADDR_EXP 45
1080: PUSH
1081: LD_STRING Burlak
1083: PPUSH
1084: LD_INT 1
1086: PPUSH
1087: CALL 7250 0 2
1091: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true ) ;
1092: LD_ADDR_EXP 46
1096: PUSH
1097: LD_STRING Gnyevko
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL 7250 0 2
1107: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true ) ;
1108: LD_ADDR_EXP 48
1112: PUSH
1113: LD_STRING Kovalyuk
1115: PPUSH
1116: LD_INT 1
1118: PPUSH
1119: CALL 7250 0 2
1123: ST_TO_ADDR
// Kirilenkova = CreateCharacter ( 01_Kirilenkova ) ;
1124: LD_ADDR_EXP 47
1128: PUSH
1129: LD_STRING 01_Kirilenkova
1131: PPUSH
1132: CALL_OW 34
1136: ST_TO_ADDR
// uc_side = 6 ;
1137: LD_ADDR_OWVAR 20
1141: PUSH
1142: LD_INT 6
1144: ST_TO_ADDR
// if not meetBelkovBrother and TestCharacters ( 02_Belkov ) then
1145: LD_EXP 1
1149: NOT
1150: PUSH
1151: LD_STRING 02_Belkov
1153: PPUSH
1154: CALL_OW 28
1158: AND
1159: IFFALSE 1251
// begin Belkov := PrepareUnitExt ( Belkov , true ) ;
1161: LD_ADDR_EXP 49
1165: PUSH
1166: LD_STRING Belkov
1168: PPUSH
1169: LD_INT 1
1171: PPUSH
1172: CALL 7250 0 2
1176: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , false ) ;
1177: LD_ADDR_EXP 50
1181: PUSH
1182: LD_STRING Belkov2
1184: PPUSH
1185: LD_INT 0
1187: PPUSH
1188: CALL 7250 0 2
1192: ST_TO_ADDR
// BelkovDialog = Belkov ;
1193: LD_ADDR_EXP 60
1197: PUSH
1198: LD_EXP 49
1202: ST_TO_ADDR
// PlaceUnitXY ( Belkov , 165 , 110 , false ) ;
1203: LD_EXP 49
1207: PPUSH
1208: LD_INT 165
1210: PPUSH
1211: LD_INT 110
1213: PPUSH
1214: LD_INT 0
1216: PPUSH
1217: CALL_OW 48
// PlaceUnitXYR ( Belkov2 , 159 , 107 , 5 , false ) ;
1221: LD_EXP 50
1225: PPUSH
1226: LD_INT 159
1228: PPUSH
1229: LD_INT 107
1231: PPUSH
1232: LD_INT 5
1234: PPUSH
1235: LD_INT 0
1237: PPUSH
1238: CALL_OW 50
// ComHold ( Belkov ) ;
1242: LD_EXP 49
1246: PPUSH
1247: CALL_OW 140
// end ; if meetBelkovBrother and TestCharacters ( 02_Belkov2 ) then
1251: LD_EXP 1
1255: PUSH
1256: LD_STRING 02_Belkov2
1258: PPUSH
1259: CALL_OW 28
1263: AND
1264: IFFALSE 1319
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1266: LD_ADDR_EXP 50
1270: PUSH
1271: LD_STRING Belkov2
1273: PPUSH
1274: LD_INT 1
1276: PPUSH
1277: CALL 7250 0 2
1281: ST_TO_ADDR
// BelkovDialog = Belkov2 ;
1282: LD_ADDR_EXP 60
1286: PUSH
1287: LD_EXP 50
1291: ST_TO_ADDR
// PlaceUnitXY ( Belkov2 , 165 , 110 , false ) ;
1292: LD_EXP 50
1296: PPUSH
1297: LD_INT 165
1299: PPUSH
1300: LD_INT 110
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: CALL_OW 48
// ComHold ( Belkov2 ) ;
1310: LD_EXP 50
1314: PPUSH
1315: CALL_OW 140
// end ; PlaceUnitXY ( Burlak , 164 , 108 , false ) ;
1319: LD_EXP 45
1323: PPUSH
1324: LD_INT 164
1326: PPUSH
1327: LD_INT 108
1329: PPUSH
1330: LD_INT 0
1332: PPUSH
1333: CALL_OW 48
// ComHold ( Burlak ) ;
1337: LD_EXP 45
1341: PPUSH
1342: CALL_OW 140
// PlaceUnitXYR ( Gnyevko , 159 , 107 , 5 , false ) ;
1346: LD_EXP 46
1350: PPUSH
1351: LD_INT 159
1353: PPUSH
1354: LD_INT 107
1356: PPUSH
1357: LD_INT 5
1359: PPUSH
1360: LD_INT 0
1362: PPUSH
1363: CALL_OW 50
// PlaceUnitXYR ( Kovalyuk , 159 , 107 , 5 , false ) ;
1367: LD_EXP 48
1371: PPUSH
1372: LD_INT 159
1374: PPUSH
1375: LD_INT 107
1377: PPUSH
1378: LD_INT 5
1380: PPUSH
1381: LD_INT 0
1383: PPUSH
1384: CALL_OW 50
// PlaceUnitXYR ( Kirilenkova , 159 , 107 , 5 , false ) ;
1388: LD_EXP 47
1392: PPUSH
1393: LD_INT 159
1395: PPUSH
1396: LD_INT 107
1398: PPUSH
1399: LD_INT 5
1401: PPUSH
1402: LD_INT 0
1404: PPUSH
1405: CALL_OW 50
// end ;
1409: LD_VAR 0 1
1413: RET
// function PrepareBeriaBase ; var i , bonusResources ; begin
1414: LD_INT 0
1416: PPUSH
1417: PPUSH
1418: PPUSH
// beriaBase = LoadVariable ( 02_BeriaBase_2 , [ ] ) ;
1419: LD_ADDR_EXP 56
1423: PUSH
1424: LD_STRING 02_BeriaBase_2
1426: PPUSH
1427: EMPTY
1428: PPUSH
1429: CALL_OW 30
1433: ST_TO_ADDR
// otherBeriaUnits = CreateCharacterSet ( 02_other_beria ) ;
1434: LD_ADDR_EXP 55
1438: PUSH
1439: LD_STRING 02_other_beria
1441: PPUSH
1442: CALL_OW 31
1446: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 02_other_survivors ) ;
1447: LD_ADDR_EXP 53
1451: PUSH
1452: LD_STRING 02_other_survivors
1454: PPUSH
1455: CALL_OW 31
1459: ST_TO_ADDR
// uc_side = 3 ;
1460: LD_ADDR_OWVAR 20
1464: PUSH
1465: LD_INT 3
1467: ST_TO_ADDR
// uc_nation = 3 ;
1468: LD_ADDR_OWVAR 21
1472: PUSH
1473: LD_INT 3
1475: ST_TO_ADDR
// for i := 1 to beriaBase do
1476: LD_ADDR_VAR 0 2
1480: PUSH
1481: DOUBLE
1482: LD_INT 1
1484: DEC
1485: ST_TO_ADDR
1486: LD_EXP 56
1490: PUSH
1491: FOR_TO
1492: IFFALSE 1745
// begin bc_type = beriaBase [ i ] [ 1 ] ;
1494: LD_ADDR_OWVAR 42
1498: PUSH
1499: LD_EXP 56
1503: PUSH
1504: LD_VAR 0 2
1508: ARRAY
1509: PUSH
1510: LD_INT 1
1512: ARRAY
1513: ST_TO_ADDR
// bc_level = beriaBase [ i ] [ 5 ] ;
1514: LD_ADDR_OWVAR 43
1518: PUSH
1519: LD_EXP 56
1523: PUSH
1524: LD_VAR 0 2
1528: ARRAY
1529: PUSH
1530: LD_INT 5
1532: ARRAY
1533: ST_TO_ADDR
// if bc_type = b_lab then
1534: LD_OWVAR 42
1538: PUSH
1539: LD_INT 6
1541: EQUAL
1542: IFFALSE 1560
// begin bc_kind1 = b_lab_basic ;
1544: LD_ADDR_OWVAR 44
1548: PUSH
1549: LD_INT 9
1551: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
1552: LD_ADDR_OWVAR 45
1556: PUSH
1557: LD_INT 9
1559: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
1560: LD_OWVAR 42
1564: PUSH
1565: LD_INT 7
1567: EQUAL
1568: PUSH
1569: LD_OWVAR 42
1573: PUSH
1574: LD_INT 8
1576: EQUAL
1577: OR
1578: IFFALSE 1694
// begin if beriaBase [ i ] [ 7 ] then
1580: LD_EXP 56
1584: PUSH
1585: LD_VAR 0 2
1589: ARRAY
1590: PUSH
1591: LD_INT 7
1593: ARRAY
1594: IFFALSE 1616
// bc_kind1 = beriaBase [ i ] [ 7 ] ;
1596: LD_ADDR_OWVAR 44
1600: PUSH
1601: LD_EXP 56
1605: PUSH
1606: LD_VAR 0 2
1610: ARRAY
1611: PUSH
1612: LD_INT 7
1614: ARRAY
1615: ST_TO_ADDR
// if beriaBase [ i ] [ 8 ] then
1616: LD_EXP 56
1620: PUSH
1621: LD_VAR 0 2
1625: ARRAY
1626: PUSH
1627: LD_INT 8
1629: ARRAY
1630: IFFALSE 1652
// bc_kind2 = beriaBase [ i ] [ 8 ] ;
1632: LD_ADDR_OWVAR 45
1636: PUSH
1637: LD_EXP 56
1641: PUSH
1642: LD_VAR 0 2
1646: ARRAY
1647: PUSH
1648: LD_INT 8
1650: ARRAY
1651: ST_TO_ADDR
// if not beriaBase [ i ] [ 7 ] and not beriaBase [ i ] [ 8 ] then
1652: LD_EXP 56
1656: PUSH
1657: LD_VAR 0 2
1661: ARRAY
1662: PUSH
1663: LD_INT 7
1665: ARRAY
1666: NOT
1667: PUSH
1668: LD_EXP 56
1672: PUSH
1673: LD_VAR 0 2
1677: ARRAY
1678: PUSH
1679: LD_INT 8
1681: ARRAY
1682: NOT
1683: AND
1684: IFFALSE 1694
// bc_type := b_lab ;
1686: LD_ADDR_OWVAR 42
1690: PUSH
1691: LD_INT 6
1693: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 2 ] , beriaBase [ i ] [ 3 ] , beriaBase [ i ] [ 4 ] ) ;
1694: LD_EXP 56
1698: PUSH
1699: LD_VAR 0 2
1703: ARRAY
1704: PUSH
1705: LD_INT 2
1707: ARRAY
1708: PPUSH
1709: LD_EXP 56
1713: PUSH
1714: LD_VAR 0 2
1718: ARRAY
1719: PUSH
1720: LD_INT 3
1722: ARRAY
1723: PPUSH
1724: LD_EXP 56
1728: PUSH
1729: LD_VAR 0 2
1733: ARRAY
1734: PUSH
1735: LD_INT 4
1737: ARRAY
1738: PPUSH
1739: CALL_OW 47
// end ;
1743: GO 1491
1745: POP
1746: POP
// beriaDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1747: LD_ADDR_EXP 57
1751: PUSH
1752: LD_INT 22
1754: PUSH
1755: LD_INT 3
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PUSH
1762: LD_INT 30
1764: PUSH
1765: LD_INT 0
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PPUSH
1776: CALL_OW 69
1780: PUSH
1781: LD_INT 1
1783: ARRAY
1784: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1785: LD_EXP 57
1789: PPUSH
1790: LD_STRING beria
1792: PPUSH
1793: CALL_OW 500
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , cratesResources ) ;
1797: LD_EXP 57
1801: PPUSH
1802: CALL_OW 274
1806: PPUSH
1807: LD_INT 1
1809: PPUSH
1810: LD_EXP 2
1814: PPUSH
1815: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , oilResources ) ;
1819: LD_EXP 57
1823: PPUSH
1824: CALL_OW 274
1828: PPUSH
1829: LD_INT 2
1831: PPUSH
1832: LD_EXP 3
1836: PPUSH
1837: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesCrates ) ;
1841: LD_EXP 57
1845: PPUSH
1846: CALL_OW 274
1850: PPUSH
1851: LD_INT 1
1853: PPUSH
1854: LD_EXP 57
1858: PPUSH
1859: CALL_OW 274
1863: PPUSH
1864: LD_INT 2
1866: PPUSH
1867: CALL_OW 275
1871: PUSH
1872: LD_EXP 38
1876: PLUS
1877: PPUSH
1878: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesOil ) ;
1882: LD_EXP 57
1886: PPUSH
1887: CALL_OW 274
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: LD_EXP 57
1899: PPUSH
1900: CALL_OW 274
1904: PPUSH
1905: LD_INT 2
1907: PPUSH
1908: CALL_OW 275
1912: PUSH
1913: LD_EXP 39
1917: PLUS
1918: PPUSH
1919: CALL_OW 277
// uc_side = 6 ;
1923: LD_ADDR_OWVAR 20
1927: PUSH
1928: LD_INT 6
1930: ST_TO_ADDR
// for i in otherBeriaUnits do
1931: LD_ADDR_VAR 0 2
1935: PUSH
1936: LD_EXP 55
1940: PUSH
1941: FOR_IN
1942: IFFALSE 1967
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
1944: LD_VAR 0 2
1948: PPUSH
1949: LD_INT 159
1951: PPUSH
1952: LD_INT 107
1954: PPUSH
1955: LD_INT 10
1957: PPUSH
1958: LD_INT 0
1960: PPUSH
1961: CALL_OW 50
1965: GO 1941
1967: POP
1968: POP
// for i in other_survivors do
1969: LD_ADDR_VAR 0 2
1973: PUSH
1974: LD_EXP 53
1978: PUSH
1979: FOR_IN
1980: IFFALSE 2005
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
1982: LD_VAR 0 2
1986: PPUSH
1987: LD_INT 159
1989: PPUSH
1990: LD_INT 107
1992: PPUSH
1993: LD_INT 10
1995: PPUSH
1996: LD_INT 0
1998: PPUSH
1999: CALL_OW 50
2003: GO 1979
2005: POP
2006: POP
// end ;
2007: LD_VAR 0 1
2011: RET
// function PrepareKirovBase ; var i , tmp , building , bunkerCounter ; begin
2012: LD_INT 0
2014: PPUSH
2015: PPUSH
2016: PPUSH
2017: PPUSH
2018: PPUSH
// kirovBase = LoadVariable ( 02_KirovBase_3 , [ ] ) ;
2019: LD_ADDR_EXP 63
2023: PUSH
2024: LD_STRING 02_KirovBase_3
2026: PPUSH
2027: EMPTY
2028: PPUSH
2029: CALL_OW 30
2033: ST_TO_ADDR
// otherKirovUnits = CreateCharacterSet ( 02_other_kirov ) ;
2034: LD_ADDR_EXP 62
2038: PUSH
2039: LD_STRING 02_other_kirov
2041: PPUSH
2042: CALL_OW 31
2046: ST_TO_ADDR
// uc_side = 6 ;
2047: LD_ADDR_OWVAR 20
2051: PUSH
2052: LD_INT 6
2054: ST_TO_ADDR
// uc_nation = 3 ;
2055: LD_ADDR_OWVAR 21
2059: PUSH
2060: LD_INT 3
2062: ST_TO_ADDR
// for i := 1 to kirovBase do
2063: LD_ADDR_VAR 0 2
2067: PUSH
2068: DOUBLE
2069: LD_INT 1
2071: DEC
2072: ST_TO_ADDR
2073: LD_EXP 63
2077: PUSH
2078: FOR_TO
2079: IFFALSE 2517
// begin bc_type = kirovBase [ i ] [ 1 ] ;
2081: LD_ADDR_OWVAR 42
2085: PUSH
2086: LD_EXP 63
2090: PUSH
2091: LD_VAR 0 2
2095: ARRAY
2096: PUSH
2097: LD_INT 1
2099: ARRAY
2100: ST_TO_ADDR
// bc_level = kirovBase [ i ] [ 5 ] ;
2101: LD_ADDR_OWVAR 43
2105: PUSH
2106: LD_EXP 63
2110: PUSH
2111: LD_VAR 0 2
2115: ARRAY
2116: PUSH
2117: LD_INT 5
2119: ARRAY
2120: ST_TO_ADDR
// if bc_type = b_depot then
2121: LD_OWVAR 42
2125: PUSH
2126: LD_INT 0
2128: EQUAL
2129: IFFALSE 2139
// bc_type = b_warehouse ;
2131: LD_ADDR_OWVAR 42
2135: PUSH
2136: LD_INT 1
2138: ST_TO_ADDR
// if bc_type = b_armoury then
2139: LD_OWVAR 42
2143: PUSH
2144: LD_INT 4
2146: EQUAL
2147: IFFALSE 2157
// bc_type = b_barracks ;
2149: LD_ADDR_OWVAR 42
2153: PUSH
2154: LD_INT 5
2156: ST_TO_ADDR
// if bc_type = b_lab then
2157: LD_OWVAR 42
2161: PUSH
2162: LD_INT 6
2164: EQUAL
2165: IFFALSE 2183
// begin bc_kind1 = b_lab_weapon ;
2167: LD_ADDR_OWVAR 44
2171: PUSH
2172: LD_INT 10
2174: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2175: LD_ADDR_OWVAR 45
2179: PUSH
2180: LD_INT 9
2182: ST_TO_ADDR
// end ; if bc_type = b_workshop then
2183: LD_OWVAR 42
2187: PUSH
2188: LD_INT 2
2190: EQUAL
2191: IFFALSE 2201
// bc_type = b_factory ;
2193: LD_ADDR_OWVAR 42
2197: PUSH
2198: LD_INT 3
2200: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2201: LD_OWVAR 42
2205: PUSH
2206: LD_INT 7
2208: EQUAL
2209: PUSH
2210: LD_OWVAR 42
2214: PUSH
2215: LD_INT 8
2217: EQUAL
2218: OR
2219: IFFALSE 2335
// begin if kirovBase [ i ] [ 7 ] then
2221: LD_EXP 63
2225: PUSH
2226: LD_VAR 0 2
2230: ARRAY
2231: PUSH
2232: LD_INT 7
2234: ARRAY
2235: IFFALSE 2257
// bc_kind1 = kirovBase [ i ] [ 7 ] ;
2237: LD_ADDR_OWVAR 44
2241: PUSH
2242: LD_EXP 63
2246: PUSH
2247: LD_VAR 0 2
2251: ARRAY
2252: PUSH
2253: LD_INT 7
2255: ARRAY
2256: ST_TO_ADDR
// if kirovBase [ i ] [ 8 ] then
2257: LD_EXP 63
2261: PUSH
2262: LD_VAR 0 2
2266: ARRAY
2267: PUSH
2268: LD_INT 8
2270: ARRAY
2271: IFFALSE 2293
// bc_kind2 = kirovBase [ i ] [ 8 ] ;
2273: LD_ADDR_OWVAR 45
2277: PUSH
2278: LD_EXP 63
2282: PUSH
2283: LD_VAR 0 2
2287: ARRAY
2288: PUSH
2289: LD_INT 8
2291: ARRAY
2292: ST_TO_ADDR
// if not kirovBase [ i ] [ 7 ] and not kirovBase [ i ] [ 8 ] then
2293: LD_EXP 63
2297: PUSH
2298: LD_VAR 0 2
2302: ARRAY
2303: PUSH
2304: LD_INT 7
2306: ARRAY
2307: NOT
2308: PUSH
2309: LD_EXP 63
2313: PUSH
2314: LD_VAR 0 2
2318: ARRAY
2319: PUSH
2320: LD_INT 8
2322: ARRAY
2323: NOT
2324: AND
2325: IFFALSE 2335
// bc_type := b_lab ;
2327: LD_ADDR_OWVAR 42
2331: PUSH
2332: LD_INT 6
2334: ST_TO_ADDR
// end ; if bc_type = b_breastwork then
2335: LD_OWVAR 42
2339: PUSH
2340: LD_INT 31
2342: EQUAL
2343: IFFALSE 2367
// begin bc_type = b_bunker ;
2345: LD_ADDR_OWVAR 42
2349: PUSH
2350: LD_INT 32
2352: ST_TO_ADDR
// bunkerCounter = bunkerCounter + 1 ;
2353: LD_ADDR_VAR 0 5
2357: PUSH
2358: LD_VAR 0 5
2362: PUSH
2363: LD_INT 1
2365: PLUS
2366: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 2 ] , kirovBase [ i ] [ 3 ] , kirovBase [ i ] [ 4 ] ) ;
2367: LD_ADDR_VAR 0 4
2371: PUSH
2372: LD_EXP 63
2376: PUSH
2377: LD_VAR 0 2
2381: ARRAY
2382: PUSH
2383: LD_INT 2
2385: ARRAY
2386: PPUSH
2387: LD_EXP 63
2391: PUSH
2392: LD_VAR 0 2
2396: ARRAY
2397: PUSH
2398: LD_INT 3
2400: ARRAY
2401: PPUSH
2402: LD_EXP 63
2406: PUSH
2407: LD_VAR 0 2
2411: ARRAY
2412: PUSH
2413: LD_INT 4
2415: ARRAY
2416: PPUSH
2417: CALL_OW 47
2421: ST_TO_ADDR
// if tmp < 4 and bc_type = b_bunker then
2422: LD_VAR 0 3
2426: PUSH
2427: LD_INT 4
2429: LESS
2430: PUSH
2431: LD_OWVAR 42
2435: PUSH
2436: LD_INT 32
2438: EQUAL
2439: AND
2440: IFFALSE 2489
// begin PlaceWeaponTurret ( building , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
2442: LD_VAR 0 4
2446: PPUSH
2447: LD_INT 42
2449: PUSH
2450: LD_INT 43
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: PUSH
2457: LD_INT 1
2459: PPUSH
2460: LD_INT 2
2462: PPUSH
2463: CALL_OW 12
2467: ARRAY
2468: PPUSH
2469: CALL_OW 431
// tmp = tmp + 1 ;
2473: LD_ADDR_VAR 0 3
2477: PUSH
2478: LD_VAR 0 3
2482: PUSH
2483: LD_INT 1
2485: PLUS
2486: ST_TO_ADDR
// end else
2487: GO 2515
// if bc_type = b_bunker then
2489: LD_OWVAR 42
2493: PUSH
2494: LD_INT 32
2496: EQUAL
2497: IFFALSE 2515
// kirovBunkersToMountWeapon = kirovBunkersToMountWeapon ^ building ;
2499: LD_ADDR_EXP 69
2503: PUSH
2504: LD_EXP 69
2508: PUSH
2509: LD_VAR 0 4
2513: ADD
2514: ST_TO_ADDR
// end ;
2515: GO 2078
2517: POP
2518: POP
// kirovDepot = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
2519: LD_ADDR_EXP 64
2523: PUSH
2524: LD_INT 22
2526: PUSH
2527: LD_INT 6
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: PUSH
2534: LD_INT 30
2536: PUSH
2537: LD_INT 1
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: PPUSH
2548: CALL_OW 69
2552: PUSH
2553: LD_INT 1
2555: ARRAY
2556: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
2557: LD_EXP 64
2561: PPUSH
2562: LD_STRING kirov
2564: PPUSH
2565: CALL_OW 500
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 5000 ) ;
2569: LD_EXP 64
2573: PPUSH
2574: CALL_OW 274
2578: PPUSH
2579: LD_INT 1
2581: PPUSH
2582: LD_INT 5000
2584: PPUSH
2585: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 2000 ) ;
2589: LD_EXP 64
2593: PPUSH
2594: CALL_OW 274
2598: PPUSH
2599: LD_INT 2
2601: PPUSH
2602: LD_INT 2000
2604: PPUSH
2605: CALL_OW 277
// ru2_bar1 = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) , 145 , 102 ) ;
2609: LD_ADDR_EXP 66
2613: PUSH
2614: LD_INT 22
2616: PUSH
2617: LD_INT 6
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PUSH
2624: LD_INT 21
2626: PUSH
2627: LD_INT 3
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PUSH
2634: LD_INT 30
2636: PUSH
2637: LD_INT 5
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: LIST
2648: PPUSH
2649: CALL_OW 69
2653: PPUSH
2654: LD_INT 145
2656: PPUSH
2657: LD_INT 102
2659: PPUSH
2660: CALL_OW 73
2664: ST_TO_ADDR
// ru2_bar2 = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) diff ru2_bar1 ;
2665: LD_ADDR_EXP 67
2669: PUSH
2670: LD_INT 22
2672: PUSH
2673: LD_INT 6
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: PUSH
2680: LD_INT 21
2682: PUSH
2683: LD_INT 3
2685: PUSH
2686: EMPTY
2687: LIST
2688: LIST
2689: PUSH
2690: LD_INT 30
2692: PUSH
2693: LD_INT 5
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: PUSH
2700: EMPTY
2701: LIST
2702: LIST
2703: LIST
2704: PPUSH
2705: CALL_OW 69
2709: PUSH
2710: LD_EXP 66
2714: DIFF
2715: ST_TO_ADDR
// ru2_bar2 = ru2_bar2 [ 1 ] ;
2716: LD_ADDR_EXP 67
2720: PUSH
2721: LD_EXP 67
2725: PUSH
2726: LD_INT 1
2728: ARRAY
2729: ST_TO_ADDR
// Kurin = PrepareUnitExt ( Kurin , false ) ;
2730: LD_ADDR_EXP 58
2734: PUSH
2735: LD_STRING Kurin
2737: PPUSH
2738: LD_INT 0
2740: PPUSH
2741: CALL 7250 0 2
2745: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 166 , 109 , false ) ;
2746: LD_EXP 58
2750: PPUSH
2751: LD_INT 166
2753: PPUSH
2754: LD_INT 109
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL_OW 48
// ComHold ( Kurin ) ;
2764: LD_EXP 58
2768: PPUSH
2769: CALL_OW 140
// PrepareEngineer ( false , 7 ) ;
2773: LD_INT 0
2775: PPUSH
2776: LD_INT 7
2778: PPUSH
2779: CALL_OW 382
// kirovEng = CreateHuman ;
2783: LD_ADDR_EXP 68
2787: PUSH
2788: CALL_OW 44
2792: ST_TO_ADDR
// PlaceUnitXYR ( kirovEng , 159 , 107 , 10 , false ) ;
2793: LD_EXP 68
2797: PPUSH
2798: LD_INT 159
2800: PPUSH
2801: LD_INT 107
2803: PPUSH
2804: LD_INT 10
2806: PPUSH
2807: LD_INT 0
2809: PPUSH
2810: CALL_OW 50
// Popov = PrepareUnitExt ( Popov , false ) ;
2814: LD_ADDR_EXP 59
2818: PUSH
2819: LD_STRING Popov
2821: PPUSH
2822: LD_INT 0
2824: PPUSH
2825: CALL 7250 0 2
2829: ST_TO_ADDR
// PlaceUnitArea ( Popov , PopovSpawnArea , false ) ;
2830: LD_EXP 59
2834: PPUSH
2835: LD_INT 4
2837: PPUSH
2838: LD_INT 0
2840: PPUSH
2841: CALL_OW 49
// ComTurnXY ( Popov , 98 , 36 ) ;
2845: LD_EXP 59
2849: PPUSH
2850: LD_INT 98
2852: PPUSH
2853: LD_INT 36
2855: PPUSH
2856: CALL_OW 118
// hc_name :=  ;
2860: LD_ADDR_OWVAR 26
2864: PUSH
2865: LD_STRING 
2867: ST_TO_ADDR
// hc_gallery :=  ;
2868: LD_ADDR_OWVAR 33
2872: PUSH
2873: LD_STRING 
2875: ST_TO_ADDR
// PrepareSoldier ( false , 2 ) ;
2876: LD_INT 0
2878: PPUSH
2879: LD_INT 2
2881: PPUSH
2882: CALL_OW 381
// ruScout = CreateHuman ;
2886: LD_ADDR_EXP 61
2890: PUSH
2891: CALL_OW 44
2895: ST_TO_ADDR
// PlaceUnitArea ( ruScout , RuScoutSpawnArea , false ) ;
2896: LD_EXP 61
2900: PPUSH
2901: LD_INT 3
2903: PPUSH
2904: LD_INT 0
2906: PPUSH
2907: CALL_OW 49
// ComCrawl ( ruScout ) ;
2911: LD_EXP 61
2915: PPUSH
2916: CALL_OW 137
// AddComTurnXY ( ruScout , 98 , 36 ) ;
2920: LD_EXP 61
2924: PPUSH
2925: LD_INT 98
2927: PPUSH
2928: LD_INT 36
2930: PPUSH
2931: CALL_OW 178
// uc_side = 6 ;
2935: LD_ADDR_OWVAR 20
2939: PUSH
2940: LD_INT 6
2942: ST_TO_ADDR
// for i in otherKirovUnits do
2943: LD_ADDR_VAR 0 2
2947: PUSH
2948: LD_EXP 62
2952: PUSH
2953: FOR_IN
2954: IFFALSE 3090
// begin SetSide ( i , 6 ) ;
2956: LD_VAR 0 2
2960: PPUSH
2961: LD_INT 6
2963: PPUSH
2964: CALL_OW 235
// if GetClass ( i ) = class_soldier and bunkerCounter > 0 then
2968: LD_VAR 0 2
2972: PPUSH
2973: CALL_OW 257
2977: PUSH
2978: LD_INT 1
2980: EQUAL
2981: PUSH
2982: LD_VAR 0 5
2986: PUSH
2987: LD_INT 0
2989: GREATER
2990: AND
2991: IFFALSE 3067
// begin PlaceHumanInBunker ( i , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ bunkerCounter ] ) ;
2993: LD_VAR 0 2
2997: PPUSH
2998: LD_INT 19
3000: PPUSH
3001: LD_INT 22
3003: PUSH
3004: LD_INT 6
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: PUSH
3011: LD_INT 21
3013: PUSH
3014: LD_INT 3
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: LD_INT 30
3023: PUSH
3024: LD_INT 32
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: LIST
3035: PPUSH
3036: CALL_OW 70
3040: PUSH
3041: LD_VAR 0 5
3045: ARRAY
3046: PPUSH
3047: CALL 8012 0 2
// bunkerCounter = bunkerCounter - 1 ;
3051: LD_ADDR_VAR 0 5
3055: PUSH
3056: LD_VAR 0 5
3060: PUSH
3061: LD_INT 1
3063: MINUS
3064: ST_TO_ADDR
// end else
3065: GO 3088
// begin PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
3067: LD_VAR 0 2
3071: PPUSH
3072: LD_INT 159
3074: PPUSH
3075: LD_INT 107
3077: PPUSH
3078: LD_INT 10
3080: PPUSH
3081: LD_INT 0
3083: PPUSH
3084: CALL_OW 50
// end ; end ;
3088: GO 2953
3090: POP
3091: POP
// end ;
3092: LD_VAR 0 1
3096: RET
// export function PrepareGrishko ; var i , un , turret ; begin
3097: LD_INT 0
3099: PPUSH
3100: PPUSH
3101: PPUSH
3102: PPUSH
// uc_side = 6 ;
3103: LD_ADDR_OWVAR 20
3107: PUSH
3108: LD_INT 6
3110: ST_TO_ADDR
// uc_nation = 3 ;
3111: LD_ADDR_OWVAR 21
3115: PUSH
3116: LD_INT 3
3118: ST_TO_ADDR
// Grishko = PrepareUnitExt ( Grishko , false ) ;
3119: LD_ADDR_EXP 78
3123: PUSH
3124: LD_STRING Grishko
3126: PPUSH
3127: LD_INT 0
3129: PPUSH
3130: CALL 7250 0 2
3134: ST_TO_ADDR
// PlaceUnitXYR ( Grishko , 218 , 108 , 3 , false ) ;
3135: LD_EXP 78
3139: PPUSH
3140: LD_INT 218
3142: PPUSH
3143: LD_INT 108
3145: PPUSH
3146: LD_INT 3
3148: PPUSH
3149: LD_INT 0
3151: PPUSH
3152: CALL_OW 50
// ComHold ( Grishko ) ;
3156: LD_EXP 78
3160: PPUSH
3161: CALL_OW 140
// end ;
3165: LD_VAR 0 1
3169: RET
// export function PrepareVehicles ; var i , vehicle ; begin
3170: LD_INT 0
3172: PPUSH
3173: PPUSH
3174: PPUSH
// uc_side = 3 ;
3175: LD_ADDR_OWVAR 20
3179: PUSH
3180: LD_INT 3
3182: ST_TO_ADDR
// uc_nation = 3 ;
3183: LD_ADDR_OWVAR 21
3187: PUSH
3188: LD_INT 3
3190: ST_TO_ADDR
// for i := 1 to vehiclesPreviousMission do
3191: LD_ADDR_VAR 0 2
3195: PUSH
3196: DOUBLE
3197: LD_INT 1
3199: DEC
3200: ST_TO_ADDR
3201: LD_EXP 4
3205: PUSH
3206: FOR_TO
3207: IFFALSE 3359
// begin PrepareVehicle ( vehiclesPreviousMission [ i ] [ 1 ] , vehiclesPreviousMission [ i ] [ 2 ] , vehiclesPreviousMission [ i ] [ 3 ] , vehiclesPreviousMission [ i ] [ 4 ] , vehiclesPreviousMission [ i ] [ 5 ] ) ;
3209: LD_EXP 4
3213: PUSH
3214: LD_VAR 0 2
3218: ARRAY
3219: PUSH
3220: LD_INT 1
3222: ARRAY
3223: PPUSH
3224: LD_EXP 4
3228: PUSH
3229: LD_VAR 0 2
3233: ARRAY
3234: PUSH
3235: LD_INT 2
3237: ARRAY
3238: PPUSH
3239: LD_EXP 4
3243: PUSH
3244: LD_VAR 0 2
3248: ARRAY
3249: PUSH
3250: LD_INT 3
3252: ARRAY
3253: PPUSH
3254: LD_EXP 4
3258: PUSH
3259: LD_VAR 0 2
3263: ARRAY
3264: PUSH
3265: LD_INT 4
3267: ARRAY
3268: PPUSH
3269: LD_EXP 4
3273: PUSH
3274: LD_VAR 0 2
3278: ARRAY
3279: PUSH
3280: LD_INT 5
3282: ARRAY
3283: PPUSH
3284: CALL 52777 0 5
// vehicle = CreateVehicle ;
3288: LD_ADDR_VAR 0 3
3292: PUSH
3293: CALL_OW 45
3297: ST_TO_ADDR
// PlaceUnitXYR ( vehicle , GetX ( beriaDepot ) , GetY ( beriaDepot ) , 13 , false ) ;
3298: LD_VAR 0 3
3302: PPUSH
3303: LD_EXP 57
3307: PPUSH
3308: CALL_OW 250
3312: PPUSH
3313: LD_EXP 57
3317: PPUSH
3318: CALL_OW 251
3322: PPUSH
3323: LD_INT 13
3325: PPUSH
3326: LD_INT 0
3328: PPUSH
3329: CALL_OW 50
// SetLives ( vehicle , vehiclesPreviousMission [ i ] [ 6 ] ) ;
3333: LD_VAR 0 3
3337: PPUSH
3338: LD_EXP 4
3342: PUSH
3343: LD_VAR 0 2
3347: ARRAY
3348: PUSH
3349: LD_INT 6
3351: ARRAY
3352: PPUSH
3353: CALL_OW 234
// end ;
3357: GO 3206
3359: POP
3360: POP
// end ;
3361: LD_VAR 0 1
3365: RET
// export function PrepareOtherBuildings ; var i , otherBuildings , building ; begin
3366: LD_INT 0
3368: PPUSH
3369: PPUSH
3370: PPUSH
3371: PPUSH
// otherBuildings = LoadVariable ( 02_OtherBuildings_4 , [ ] ) ;
3372: LD_ADDR_VAR 0 3
3376: PUSH
3377: LD_STRING 02_OtherBuildings_4
3379: PPUSH
3380: EMPTY
3381: PPUSH
3382: CALL_OW 30
3386: ST_TO_ADDR
// uc_side = 3 ;
3387: LD_ADDR_OWVAR 20
3391: PUSH
3392: LD_INT 3
3394: ST_TO_ADDR
// for i := 1 to otherBuildings do
3395: LD_ADDR_VAR 0 2
3399: PUSH
3400: DOUBLE
3401: LD_INT 1
3403: DEC
3404: ST_TO_ADDR
3405: LD_VAR 0 3
3409: PUSH
3410: FOR_TO
3411: IFFALSE 3672
// begin uc_nation = otherBuildings [ i ] [ 6 ] ;
3413: LD_ADDR_OWVAR 21
3417: PUSH
3418: LD_VAR 0 3
3422: PUSH
3423: LD_VAR 0 2
3427: ARRAY
3428: PUSH
3429: LD_INT 6
3431: ARRAY
3432: ST_TO_ADDR
// bc_type = otherBuildings [ i ] [ 1 ] ;
3433: LD_ADDR_OWVAR 42
3437: PUSH
3438: LD_VAR 0 3
3442: PUSH
3443: LD_VAR 0 2
3447: ARRAY
3448: PUSH
3449: LD_INT 1
3451: ARRAY
3452: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3453: LD_ADDR_OWVAR 43
3457: PUSH
3458: LD_VAR 0 3
3462: PUSH
3463: LD_VAR 0 2
3467: ARRAY
3468: PUSH
3469: LD_INT 5
3471: ARRAY
3472: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3473: LD_ADDR_VAR 0 4
3477: PUSH
3478: LD_VAR 0 3
3482: PUSH
3483: LD_VAR 0 2
3487: ARRAY
3488: PUSH
3489: LD_INT 2
3491: ARRAY
3492: PPUSH
3493: LD_VAR 0 3
3497: PUSH
3498: LD_VAR 0 2
3502: ARRAY
3503: PUSH
3504: LD_INT 3
3506: ARRAY
3507: PPUSH
3508: LD_VAR 0 3
3512: PUSH
3513: LD_VAR 0 2
3517: ARRAY
3518: PUSH
3519: LD_INT 4
3521: ARRAY
3522: PPUSH
3523: CALL_OW 47
3527: ST_TO_ADDR
// SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3528: LD_VAR 0 4
3532: PPUSH
3533: LD_VAR 0 3
3537: PUSH
3538: LD_VAR 0 2
3542: ARRAY
3543: PUSH
3544: LD_INT 7
3546: ARRAY
3547: PPUSH
3548: CALL_OW 234
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
3552: LD_VAR 0 4
3556: PPUSH
3557: CALL_OW 266
3561: PUSH
3562: LD_INT 0
3564: PUSH
3565: LD_INT 1
3567: PUSH
3568: EMPTY
3569: LIST
3570: LIST
3571: IN
3572: IFFALSE 3670
// begin SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 8 ] ) ;
3574: LD_VAR 0 4
3578: PPUSH
3579: CALL_OW 274
3583: PPUSH
3584: LD_INT 1
3586: PPUSH
3587: LD_VAR 0 3
3591: PUSH
3592: LD_VAR 0 2
3596: ARRAY
3597: PUSH
3598: LD_INT 8
3600: ARRAY
3601: PPUSH
3602: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 9 ] ) ;
3606: LD_VAR 0 4
3610: PPUSH
3611: CALL_OW 274
3615: PPUSH
3616: LD_INT 1
3618: PPUSH
3619: LD_VAR 0 3
3623: PUSH
3624: LD_VAR 0 2
3628: ARRAY
3629: PUSH
3630: LD_INT 9
3632: ARRAY
3633: PPUSH
3634: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 10 ] ) ;
3638: LD_VAR 0 4
3642: PPUSH
3643: CALL_OW 274
3647: PPUSH
3648: LD_INT 1
3650: PPUSH
3651: LD_VAR 0 3
3655: PUSH
3656: LD_VAR 0 2
3660: ARRAY
3661: PUSH
3662: LD_INT 10
3664: ARRAY
3665: PPUSH
3666: CALL_OW 277
// end ; end ;
3670: GO 3410
3672: POP
3673: POP
// otherBuildings = LoadVariable ( 02_AmericanBuildings_5 , [ ] ) ;
3674: LD_ADDR_VAR 0 3
3678: PUSH
3679: LD_STRING 02_AmericanBuildings_5
3681: PPUSH
3682: EMPTY
3683: PPUSH
3684: CALL_OW 30
3688: ST_TO_ADDR
// uc_side = 1 ;
3689: LD_ADDR_OWVAR 20
3693: PUSH
3694: LD_INT 1
3696: ST_TO_ADDR
// uc_nation = 1 ;
3697: LD_ADDR_OWVAR 21
3701: PUSH
3702: LD_INT 1
3704: ST_TO_ADDR
// for i := 1 to otherBuildings do
3705: LD_ADDR_VAR 0 2
3709: PUSH
3710: DOUBLE
3711: LD_INT 1
3713: DEC
3714: ST_TO_ADDR
3715: LD_VAR 0 3
3719: PUSH
3720: FOR_TO
3721: IFFALSE 3925
// begin bc_type = otherBuildings [ i ] [ 1 ] ;
3723: LD_ADDR_OWVAR 42
3727: PUSH
3728: LD_VAR 0 3
3732: PUSH
3733: LD_VAR 0 2
3737: ARRAY
3738: PUSH
3739: LD_INT 1
3741: ARRAY
3742: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3743: LD_ADDR_OWVAR 43
3747: PUSH
3748: LD_VAR 0 3
3752: PUSH
3753: LD_VAR 0 2
3757: ARRAY
3758: PUSH
3759: LD_INT 5
3761: ARRAY
3762: ST_TO_ADDR
// if bc_type = b_breastwork then
3763: LD_OWVAR 42
3767: PUSH
3768: LD_INT 31
3770: EQUAL
3771: IFFALSE 3844
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3773: LD_ADDR_VAR 0 4
3777: PUSH
3778: LD_VAR 0 3
3782: PUSH
3783: LD_VAR 0 2
3787: ARRAY
3788: PUSH
3789: LD_INT 2
3791: ARRAY
3792: PPUSH
3793: LD_VAR 0 3
3797: PUSH
3798: LD_VAR 0 2
3802: ARRAY
3803: PUSH
3804: LD_INT 3
3806: ARRAY
3807: PPUSH
3808: LD_VAR 0 3
3812: PUSH
3813: LD_VAR 0 2
3817: ARRAY
3818: PUSH
3819: LD_INT 4
3821: ARRAY
3822: PPUSH
3823: CALL_OW 47
3827: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , building ) ;
3828: LD_EXP 40
3832: PPUSH
3833: LD_VAR 0 4
3837: PPUSH
3838: CALL 8102 0 2
// end else
3842: GO 3899
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3844: LD_ADDR_VAR 0 4
3848: PUSH
3849: LD_VAR 0 3
3853: PUSH
3854: LD_VAR 0 2
3858: ARRAY
3859: PUSH
3860: LD_INT 2
3862: ARRAY
3863: PPUSH
3864: LD_VAR 0 3
3868: PUSH
3869: LD_VAR 0 2
3873: ARRAY
3874: PUSH
3875: LD_INT 3
3877: ARRAY
3878: PPUSH
3879: LD_VAR 0 3
3883: PUSH
3884: LD_VAR 0 2
3888: ARRAY
3889: PUSH
3890: LD_INT 4
3892: ARRAY
3893: PPUSH
3894: CALL_OW 47
3898: ST_TO_ADDR
// end ; SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3899: LD_VAR 0 4
3903: PPUSH
3904: LD_VAR 0 3
3908: PUSH
3909: LD_VAR 0 2
3913: ARRAY
3914: PUSH
3915: LD_INT 7
3917: ARRAY
3918: PPUSH
3919: CALL_OW 234
// end ;
3923: GO 3720
3925: POP
3926: POP
// end ;
3927: LD_VAR 0 1
3931: RET
// export function PrepareSecondBaseTeam ; var i ; begin
3932: LD_INT 0
3934: PPUSH
3935: PPUSH
// secondBaseTeam = [ ] ;
3936: LD_ADDR_EXP 74
3940: PUSH
3941: EMPTY
3942: ST_TO_ADDR
// SetResourceVisibility ( 226 , 109 , 6 ) ;
3943: LD_INT 226
3945: PPUSH
3946: LD_INT 109
3948: PPUSH
3949: LD_INT 6
3951: PPUSH
3952: CALL_OW 441
// uc_side = 6 ;
3956: LD_ADDR_OWVAR 20
3960: PUSH
3961: LD_INT 6
3963: ST_TO_ADDR
// uc_nation = 3 ;
3964: LD_ADDR_OWVAR 21
3968: PUSH
3969: LD_INT 3
3971: ST_TO_ADDR
// hc_name =  ;
3972: LD_ADDR_OWVAR 26
3976: PUSH
3977: LD_STRING 
3979: ST_TO_ADDR
// hc_gallery =  ;
3980: LD_ADDR_OWVAR 33
3984: PUSH
3985: LD_STRING 
3987: ST_TO_ADDR
// for i := 1 to 3 do
3988: LD_ADDR_VAR 0 2
3992: PUSH
3993: DOUBLE
3994: LD_INT 1
3996: DEC
3997: ST_TO_ADDR
3998: LD_INT 3
4000: PUSH
4001: FOR_TO
4002: IFFALSE 4055
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4004: LD_INT 0
4006: PPUSH
4007: LD_EXP 40
4011: PPUSH
4012: CALL_OW 381
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4016: LD_ADDR_EXP 74
4020: PUSH
4021: LD_EXP 74
4025: PUSH
4026: CALL_OW 44
4030: ADD
4031: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ i ] , KirovSupportSpawnArea , false ) ;
4032: LD_EXP 74
4036: PUSH
4037: LD_VAR 0 2
4041: ARRAY
4042: PPUSH
4043: LD_INT 20
4045: PPUSH
4046: LD_INT 0
4048: PPUSH
4049: CALL_OW 49
// end ;
4053: GO 4001
4055: POP
4056: POP
// PrepareEngineer ( false , enemySkillLevel ) ;
4057: LD_INT 0
4059: PPUSH
4060: LD_EXP 40
4064: PPUSH
4065: CALL_OW 382
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4069: LD_ADDR_EXP 74
4073: PUSH
4074: LD_EXP 74
4078: PUSH
4079: CALL_OW 44
4083: ADD
4084: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 4 ] , KirovSupportSpawnArea , false ) ;
4085: LD_EXP 74
4089: PUSH
4090: LD_INT 4
4092: ARRAY
4093: PPUSH
4094: LD_INT 20
4096: PPUSH
4097: LD_INT 0
4099: PPUSH
4100: CALL_OW 49
// PrepareScientist ( false , enemySkillLevel ) ;
4104: LD_INT 0
4106: PPUSH
4107: LD_EXP 40
4111: PPUSH
4112: CALL_OW 384
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4116: LD_ADDR_EXP 74
4120: PUSH
4121: LD_EXP 74
4125: PUSH
4126: CALL_OW 44
4130: ADD
4131: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 5 ] , KirovSupportSpawnArea , false ) ;
4132: LD_EXP 74
4136: PUSH
4137: LD_INT 5
4139: ARRAY
4140: PPUSH
4141: LD_INT 20
4143: PPUSH
4144: LD_INT 0
4146: PPUSH
4147: CALL_OW 49
// ComMoveXY ( secondBaseTeam , 214 , 105 ) ;
4151: LD_EXP 74
4155: PPUSH
4156: LD_INT 214
4158: PPUSH
4159: LD_INT 105
4161: PPUSH
4162: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 222 , 115 , 0 ) ;
4166: LD_EXP 74
4170: PPUSH
4171: LD_INT 25
4173: PUSH
4174: LD_INT 2
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: PPUSH
4181: CALL_OW 72
4185: PPUSH
4186: LD_INT 0
4188: PPUSH
4189: LD_INT 222
4191: PPUSH
4192: LD_INT 115
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 205
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 224 , 107 ) ;
4202: LD_EXP 74
4206: PPUSH
4207: LD_INT 25
4209: PUSH
4210: LD_INT 2
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PPUSH
4217: CALL_OW 72
4221: PPUSH
4222: LD_INT 224
4224: PPUSH
4225: LD_INT 107
4227: PPUSH
4228: CALL_OW 177
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 228 , 110 ) ;
4232: LD_EXP 74
4236: PPUSH
4237: LD_INT 25
4239: PUSH
4240: LD_INT 2
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: PPUSH
4247: CALL_OW 72
4251: PPUSH
4252: LD_INT 228
4254: PPUSH
4255: LD_INT 110
4257: PPUSH
4258: CALL_OW 177
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_armoury , 216 , 114 , 0 ) ;
4262: LD_EXP 74
4266: PPUSH
4267: LD_INT 25
4269: PUSH
4270: LD_INT 2
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: PPUSH
4277: CALL_OW 72
4281: PPUSH
4282: LD_INT 4
4284: PPUSH
4285: LD_INT 216
4287: PPUSH
4288: LD_INT 114
4290: PPUSH
4291: LD_INT 0
4293: PPUSH
4294: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 215 , 103 , 3 ) ;
4298: LD_EXP 74
4302: PPUSH
4303: LD_INT 25
4305: PUSH
4306: LD_INT 2
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PPUSH
4313: CALL_OW 72
4317: PPUSH
4318: LD_INT 31
4320: PPUSH
4321: LD_INT 215
4323: PPUSH
4324: LD_INT 103
4326: PPUSH
4327: LD_INT 3
4329: PPUSH
4330: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 227 , 116 , 5 ) ;
4334: LD_EXP 74
4338: PPUSH
4339: LD_INT 25
4341: PUSH
4342: LD_INT 2
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: PPUSH
4349: CALL_OW 72
4353: PPUSH
4354: LD_INT 31
4356: PPUSH
4357: LD_INT 227
4359: PPUSH
4360: LD_INT 116
4362: PPUSH
4363: LD_INT 5
4365: PPUSH
4366: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_oil_mine , 226 , 109 , 3 ) ;
4370: LD_EXP 74
4374: PPUSH
4375: LD_INT 25
4377: PUSH
4378: LD_INT 2
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: PPUSH
4385: CALL_OW 72
4389: PPUSH
4390: LD_INT 29
4392: PPUSH
4393: LD_INT 226
4395: PPUSH
4396: LD_INT 109
4398: PPUSH
4399: LD_INT 3
4401: PPUSH
4402: CALL_OW 205
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 208 , 106 ) ;
4406: LD_EXP 74
4410: PPUSH
4411: LD_INT 25
4413: PUSH
4414: LD_INT 2
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: PPUSH
4421: CALL_OW 72
4425: PPUSH
4426: LD_INT 208
4428: PPUSH
4429: LD_INT 106
4431: PPUSH
4432: CALL_OW 171
// AddComTurnXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 209 , 105 ) ;
4436: LD_EXP 74
4440: PPUSH
4441: LD_INT 25
4443: PUSH
4444: LD_INT 2
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PPUSH
4451: CALL_OW 72
4455: PPUSH
4456: LD_INT 209
4458: PPUSH
4459: LD_INT 105
4461: PPUSH
4462: CALL_OW 178
// AddComMoveXY ( secondBaseTeam [ 5 ] , 209 , 105 ) ;
4466: LD_EXP 74
4470: PUSH
4471: LD_INT 5
4473: ARRAY
4474: PPUSH
4475: LD_INT 209
4477: PPUSH
4478: LD_INT 105
4480: PPUSH
4481: CALL_OW 171
// AddComTurnXY ( secondBaseTeam [ 5 ] , 208 , 106 ) ;
4485: LD_EXP 74
4489: PUSH
4490: LD_INT 5
4492: ARRAY
4493: PPUSH
4494: LD_INT 208
4496: PPUSH
4497: LD_INT 106
4499: PPUSH
4500: CALL_OW 178
// end ;
4504: LD_VAR 0 1
4508: RET
// export function SpawnKirovSupport ; var i , un ; begin
4509: LD_INT 0
4511: PPUSH
4512: PPUSH
4513: PPUSH
// uc_side = 6 ;
4514: LD_ADDR_OWVAR 20
4518: PUSH
4519: LD_INT 6
4521: ST_TO_ADDR
// uc_nation = 3 ;
4522: LD_ADDR_OWVAR 21
4526: PUSH
4527: LD_INT 3
4529: ST_TO_ADDR
// hc_name =  ;
4530: LD_ADDR_OWVAR 26
4534: PUSH
4535: LD_STRING 
4537: ST_TO_ADDR
// hc_gallery :=  ;
4538: LD_ADDR_OWVAR 33
4542: PUSH
4543: LD_STRING 
4545: ST_TO_ADDR
// for i := 1 to survivorsToSpawn do
4546: LD_ADDR_VAR 0 2
4550: PUSH
4551: DOUBLE
4552: LD_INT 1
4554: DEC
4555: ST_TO_ADDR
4556: LD_EXP 76
4560: PUSH
4561: FOR_TO
4562: IFFALSE 4650
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 2 ) ) ;
4564: LD_INT 0
4566: PPUSH
4567: LD_INT 1
4569: PPUSH
4570: LD_INT 4
4572: PPUSH
4573: CALL_OW 12
4577: PPUSH
4578: LD_INT 1
4580: PPUSH
4581: LD_INT 2
4583: PPUSH
4584: CALL_OW 12
4588: PPUSH
4589: CALL_OW 380
// un = CreateHuman ;
4593: LD_ADDR_VAR 0 3
4597: PUSH
4598: CALL_OW 44
4602: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ un ;
4603: LD_ADDR_EXP 75
4607: PUSH
4608: LD_EXP 75
4612: PUSH
4613: LD_VAR 0 3
4617: ADD
4618: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4619: LD_VAR 0 3
4623: PPUSH
4624: LD_INT 20
4626: PPUSH
4627: LD_INT 0
4629: PPUSH
4630: CALL_OW 49
// ComEnterUnit ( un , ru2_bar1 ) ;
4634: LD_VAR 0 3
4638: PPUSH
4639: LD_EXP 66
4643: PPUSH
4644: CALL_OW 120
// end ;
4648: GO 4561
4650: POP
4651: POP
// for i := 1 to neededUnitsSpawn [ 1 ] + 4 do
4652: LD_ADDR_VAR 0 2
4656: PUSH
4657: DOUBLE
4658: LD_INT 1
4660: DEC
4661: ST_TO_ADDR
4662: LD_EXP 77
4666: PUSH
4667: LD_INT 1
4669: ARRAY
4670: PUSH
4671: LD_INT 4
4673: PLUS
4674: PUSH
4675: FOR_TO
4676: IFFALSE 4774
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
4678: LD_INT 0
4680: PPUSH
4681: LD_INT 1
4683: PPUSH
4684: LD_INT 1
4686: PPUSH
4687: LD_INT 3
4689: PPUSH
4690: CALL_OW 12
4694: PPUSH
4695: CALL_OW 380
// un = CreateHuman ;
4699: LD_ADDR_VAR 0 3
4703: PUSH
4704: CALL_OW 44
4708: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4709: LD_VAR 0 3
4713: PPUSH
4714: LD_INT 20
4716: PPUSH
4717: LD_INT 0
4719: PPUSH
4720: CALL_OW 49
// if i > kirovBunkersToOccupy then
4724: LD_VAR 0 2
4728: PUSH
4729: LD_EXP 70
4733: GREATER
4734: IFFALSE 4752
// ComEnterUnit ( un , ru2_bar2 ) else
4736: LD_VAR 0 3
4740: PPUSH
4741: LD_EXP 67
4745: PPUSH
4746: CALL_OW 120
4750: GO 4772
// ComEnterUnit ( un , kirovBunkersToOccupy [ i ] ) ;
4752: LD_VAR 0 3
4756: PPUSH
4757: LD_EXP 70
4761: PUSH
4762: LD_VAR 0 2
4766: ARRAY
4767: PPUSH
4768: CALL_OW 120
// end ;
4772: GO 4675
4774: POP
4775: POP
// for i := 1 to neededUnitsSpawn [ 3 ] do
4776: LD_ADDR_VAR 0 2
4780: PUSH
4781: DOUBLE
4782: LD_INT 1
4784: DEC
4785: ST_TO_ADDR
4786: LD_EXP 77
4790: PUSH
4791: LD_INT 3
4793: ARRAY
4794: PUSH
4795: FOR_TO
4796: IFFALSE 4899
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
4798: LD_INT 0
4800: PPUSH
4801: LD_INT 3
4803: PPUSH
4804: LD_INT 1
4806: PPUSH
4807: LD_INT 3
4809: PPUSH
4810: CALL_OW 12
4814: PPUSH
4815: CALL_OW 380
// un = CreateHuman ;
4819: LD_ADDR_VAR 0 3
4823: PUSH
4824: CALL_OW 44
4828: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4829: LD_VAR 0 3
4833: PPUSH
4834: LD_INT 20
4836: PPUSH
4837: LD_INT 0
4839: PPUSH
4840: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
4844: LD_VAR 0 3
4848: PPUSH
4849: LD_INT 22
4851: PUSH
4852: LD_INT 6
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 21
4861: PUSH
4862: LD_INT 3
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: LD_INT 30
4871: PUSH
4872: LD_INT 3
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: PUSH
4879: EMPTY
4880: LIST
4881: LIST
4882: LIST
4883: PPUSH
4884: CALL_OW 69
4888: PUSH
4889: LD_INT 1
4891: ARRAY
4892: PPUSH
4893: CALL_OW 120
// end ;
4897: GO 4795
4899: POP
4900: POP
// for i := 1 to neededUnitsSpawn [ 4 ] do
4901: LD_ADDR_VAR 0 2
4905: PUSH
4906: DOUBLE
4907: LD_INT 1
4909: DEC
4910: ST_TO_ADDR
4911: LD_EXP 77
4915: PUSH
4916: LD_INT 4
4918: ARRAY
4919: PUSH
4920: FOR_TO
4921: IFFALSE 5027
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
4923: LD_INT 0
4925: PPUSH
4926: LD_INT 4
4928: PPUSH
4929: LD_INT 1
4931: PPUSH
4932: LD_INT 3
4934: PPUSH
4935: CALL_OW 12
4939: PPUSH
4940: CALL_OW 380
// un = CreateHuman ;
4944: LD_ADDR_VAR 0 3
4948: PUSH
4949: CALL_OW 44
4953: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4954: LD_VAR 0 3
4958: PPUSH
4959: LD_INT 20
4961: PPUSH
4962: LD_INT 0
4964: PPUSH
4965: CALL_OW 49
// ComEnterUnit ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ) ;
4969: LD_VAR 0 3
4973: PPUSH
4974: LD_INT 19
4976: PPUSH
4977: LD_INT 22
4979: PUSH
4980: LD_INT 6
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PUSH
4987: LD_INT 21
4989: PUSH
4990: LD_INT 3
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: PUSH
4997: LD_INT 30
4999: PUSH
5000: LD_INT 6
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: LIST
5011: PPUSH
5012: CALL_OW 70
5016: PUSH
5017: LD_INT 1
5019: ARRAY
5020: PPUSH
5021: CALL_OW 120
// end ;
5025: GO 4920
5027: POP
5028: POP
// end ;
5029: LD_VAR 0 1
5033: RET
// export function SetSurvivorsArabianAttack ; var limit , unit ; begin
5034: LD_INT 0
5036: PPUSH
5037: PPUSH
5038: PPUSH
// survivorsArabianAttack = [ ] ;
5039: LD_ADDR_EXP 75
5043: PUSH
5044: EMPTY
5045: ST_TO_ADDR
// limit = 9 ;
5046: LD_ADDR_VAR 0 2
5050: PUSH
5051: LD_INT 9
5053: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ Popov ;
5054: LD_ADDR_EXP 75
5058: PUSH
5059: LD_EXP 75
5063: PUSH
5064: LD_EXP 59
5068: ADD
5069: ST_TO_ADDR
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 6 then
5070: LD_EXP 49
5074: PPUSH
5075: CALL_OW 302
5079: PUSH
5080: LD_EXP 49
5084: PPUSH
5085: CALL_OW 255
5089: PUSH
5090: LD_INT 6
5092: EQUAL
5093: AND
5094: IFFALSE 5126
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov ;
5096: LD_ADDR_EXP 75
5100: PUSH
5101: LD_EXP 75
5105: PUSH
5106: LD_EXP 49
5110: ADD
5111: ST_TO_ADDR
// limit = limit - 1 ;
5112: LD_ADDR_VAR 0 2
5116: PUSH
5117: LD_VAR 0 2
5121: PUSH
5122: LD_INT 1
5124: MINUS
5125: ST_TO_ADDR
// end ; if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 6 then
5126: LD_EXP 50
5130: PPUSH
5131: CALL_OW 302
5135: PUSH
5136: LD_EXP 50
5140: PPUSH
5141: CALL_OW 255
5145: PUSH
5146: LD_INT 6
5148: EQUAL
5149: AND
5150: IFFALSE 5182
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov2 ;
5152: LD_ADDR_EXP 75
5156: PUSH
5157: LD_EXP 75
5161: PUSH
5162: LD_EXP 50
5166: ADD
5167: ST_TO_ADDR
// limit = limit - 1 ;
5168: LD_ADDR_VAR 0 2
5172: PUSH
5173: LD_VAR 0 2
5177: PUSH
5178: LD_INT 1
5180: MINUS
5181: ST_TO_ADDR
// end ; for unit in other_survivors do
5182: LD_ADDR_VAR 0 3
5186: PUSH
5187: LD_EXP 53
5191: PUSH
5192: FOR_IN
5193: IFFALSE 5253
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5195: LD_VAR 0 3
5199: PPUSH
5200: CALL_OW 302
5204: PUSH
5205: LD_VAR 0 3
5209: PPUSH
5210: CALL_OW 255
5214: PUSH
5215: LD_INT 6
5217: EQUAL
5218: AND
5219: IFFALSE 5251
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5221: LD_ADDR_EXP 75
5225: PUSH
5226: LD_EXP 75
5230: PUSH
5231: LD_VAR 0 3
5235: ADD
5236: ST_TO_ADDR
// limit = limit - 1 ;
5237: LD_ADDR_VAR 0 2
5241: PUSH
5242: LD_VAR 0 2
5246: PUSH
5247: LD_INT 1
5249: MINUS
5250: ST_TO_ADDR
// end ; end ;
5251: GO 5192
5253: POP
5254: POP
// for unit in otherBeriaUnits do
5255: LD_ADDR_VAR 0 3
5259: PUSH
5260: LD_EXP 55
5264: PUSH
5265: FOR_IN
5266: IFFALSE 5326
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5268: LD_VAR 0 3
5272: PPUSH
5273: CALL_OW 302
5277: PUSH
5278: LD_VAR 0 3
5282: PPUSH
5283: CALL_OW 255
5287: PUSH
5288: LD_INT 6
5290: EQUAL
5291: AND
5292: IFFALSE 5324
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5294: LD_ADDR_EXP 75
5298: PUSH
5299: LD_EXP 75
5303: PUSH
5304: LD_VAR 0 3
5308: ADD
5309: ST_TO_ADDR
// limit = limit - 1 ;
5310: LD_ADDR_VAR 0 2
5314: PUSH
5315: LD_VAR 0 2
5319: PUSH
5320: LD_INT 1
5322: MINUS
5323: ST_TO_ADDR
// end ; end ;
5324: GO 5265
5326: POP
5327: POP
// if limit > 0 then
5328: LD_VAR 0 2
5332: PUSH
5333: LD_INT 0
5335: GREATER
5336: IFFALSE 5348
// survivorsToSpawn = limit ;
5338: LD_ADDR_EXP 76
5342: PUSH
5343: LD_VAR 0 2
5347: ST_TO_ADDR
// end ;
5348: LD_VAR 0 1
5352: RET
// export function PrepareScholtze ; var rndPos , x , y ; begin
5353: LD_INT 0
5355: PPUSH
5356: PPUSH
5357: PPUSH
5358: PPUSH
// uc_side = 8 ;
5359: LD_ADDR_OWVAR 20
5363: PUSH
5364: LD_INT 8
5366: ST_TO_ADDR
// Scholtze = PrepareUnitExt ( Scholtze , false ) ;
5367: LD_ADDR_EXP 51
5371: PUSH
5372: LD_STRING Scholtze
5374: PPUSH
5375: LD_INT 0
5377: PPUSH
5378: CALL 7250 0 2
5382: ST_TO_ADDR
// fakeScholtze = PrepareUnitExt ( Scholtze , false ) ;
5383: LD_ADDR_EXP 52
5387: PUSH
5388: LD_STRING Scholtze
5390: PPUSH
5391: LD_INT 0
5393: PPUSH
5394: CALL 7250 0 2
5398: ST_TO_ADDR
// case Difficulty of 1 :
5399: LD_OWVAR 67
5403: PUSH
5404: LD_INT 1
5406: DOUBLE
5407: EQUAL
5408: IFTRUE 5412
5410: GO 5448
5412: POP
// PlaceUnitXYR ( Scholtze , scholtzeSpawnPositions [ 1 ] , scholtzeSpawnPositions [ 2 ] , 3 , true ) ; 2 :
5413: LD_EXP 51
5417: PPUSH
5418: LD_EXP 36
5422: PUSH
5423: LD_INT 1
5425: ARRAY
5426: PPUSH
5427: LD_EXP 36
5431: PUSH
5432: LD_INT 2
5434: ARRAY
5435: PPUSH
5436: LD_INT 3
5438: PPUSH
5439: LD_INT 1
5441: PPUSH
5442: CALL_OW 50
5446: GO 5757
5448: LD_INT 2
5450: DOUBLE
5451: EQUAL
5452: IFTRUE 5456
5454: GO 5604
5456: POP
// begin scholtzeSpawnNearAmericans = true ;
5457: LD_ADDR_EXP 6
5461: PUSH
5462: LD_INT 1
5464: ST_TO_ADDR
// rndPos = rand ( 1 , scholtzeSpawnPositions / 2 ) ;
5465: LD_ADDR_VAR 0 2
5469: PUSH
5470: LD_INT 1
5472: PPUSH
5473: LD_EXP 36
5477: PUSH
5478: LD_INT 2
5480: DIVREAL
5481: PPUSH
5482: CALL_OW 12
5486: ST_TO_ADDR
// x = scholtzeSpawnPositions [ rndPos [ 1 ] ] ;
5487: LD_ADDR_VAR 0 3
5491: PUSH
5492: LD_EXP 36
5496: PUSH
5497: LD_VAR 0 2
5501: PUSH
5502: LD_INT 1
5504: ARRAY
5505: ARRAY
5506: ST_TO_ADDR
// y = scholtzeSpawnPositions [ rndPos [ 2 ] ] ;
5507: LD_ADDR_VAR 0 4
5511: PUSH
5512: LD_EXP 36
5516: PUSH
5517: LD_VAR 0 2
5521: PUSH
5522: LD_INT 2
5524: ARRAY
5525: ARRAY
5526: ST_TO_ADDR
// if rndPos > 1 then
5527: LD_VAR 0 2
5531: PUSH
5532: LD_INT 1
5534: GREATER
5535: IFFALSE 5577
// begin x = scholtzeSpawnPositions [ rndPos + 1 ] ;
5537: LD_ADDR_VAR 0 3
5541: PUSH
5542: LD_EXP 36
5546: PUSH
5547: LD_VAR 0 2
5551: PUSH
5552: LD_INT 1
5554: PLUS
5555: ARRAY
5556: ST_TO_ADDR
// y = scholtzeSpawnPositions [ rndPos + 2 ] ;
5557: LD_ADDR_VAR 0 4
5561: PUSH
5562: LD_EXP 36
5566: PUSH
5567: LD_VAR 0 2
5571: PUSH
5572: LD_INT 2
5574: PLUS
5575: ARRAY
5576: ST_TO_ADDR
// end ; PlaceUnitXYR ( Scholtze , x , y , 3 , true ) ;
5577: LD_EXP 51
5581: PPUSH
5582: LD_VAR 0 3
5586: PPUSH
5587: LD_VAR 0 4
5591: PPUSH
5592: LD_INT 3
5594: PPUSH
5595: LD_INT 1
5597: PPUSH
5598: CALL_OW 50
// end ; 3 :
5602: GO 5757
5604: LD_INT 3
5606: DOUBLE
5607: EQUAL
5608: IFTRUE 5612
5610: GO 5756
5612: POP
// begin rndPos = rand ( 1 , scholtzeSpawnPositions / 2 ) ;
5613: LD_ADDR_VAR 0 2
5617: PUSH
5618: LD_INT 1
5620: PPUSH
5621: LD_EXP 36
5625: PUSH
5626: LD_INT 2
5628: DIVREAL
5629: PPUSH
5630: CALL_OW 12
5634: ST_TO_ADDR
// x = scholtzeSpawnPositions [ rndPos ] ;
5635: LD_ADDR_VAR 0 3
5639: PUSH
5640: LD_EXP 36
5644: PUSH
5645: LD_VAR 0 2
5649: ARRAY
5650: ST_TO_ADDR
// y = scholtzeSpawnPositions [ rndPos + 1 ] ;
5651: LD_ADDR_VAR 0 4
5655: PUSH
5656: LD_EXP 36
5660: PUSH
5661: LD_VAR 0 2
5665: PUSH
5666: LD_INT 1
5668: PLUS
5669: ARRAY
5670: ST_TO_ADDR
// if rndPos > 1 then
5671: LD_VAR 0 2
5675: PUSH
5676: LD_INT 1
5678: GREATER
5679: IFFALSE 5729
// begin scholtzeSpawnNearAmericans = true ;
5681: LD_ADDR_EXP 6
5685: PUSH
5686: LD_INT 1
5688: ST_TO_ADDR
// x = scholtzeSpawnPositions [ rndPos + 1 ] ;
5689: LD_ADDR_VAR 0 3
5693: PUSH
5694: LD_EXP 36
5698: PUSH
5699: LD_VAR 0 2
5703: PUSH
5704: LD_INT 1
5706: PLUS
5707: ARRAY
5708: ST_TO_ADDR
// y = scholtzeSpawnPositions [ rndPos + 2 ] ;
5709: LD_ADDR_VAR 0 4
5713: PUSH
5714: LD_EXP 36
5718: PUSH
5719: LD_VAR 0 2
5723: PUSH
5724: LD_INT 2
5726: PLUS
5727: ARRAY
5728: ST_TO_ADDR
// end ; PlaceUnitXYR ( Scholtze , x , y , 3 , true ) ;
5729: LD_EXP 51
5733: PPUSH
5734: LD_VAR 0 3
5738: PPUSH
5739: LD_VAR 0 4
5743: PPUSH
5744: LD_INT 3
5746: PPUSH
5747: LD_INT 1
5749: PPUSH
5750: CALL_OW 50
// end ; end ;
5754: GO 5757
5756: POP
// end ; end_of_file
5757: LD_VAR 0 1
5761: RET
// export amIntroUnits ; export amSupportTroops ; export amPatrol ; export amBase ; export function PrepareAmericans ; begin
5762: LD_INT 0
5764: PPUSH
// amSupportTroops = [ ] ;
5765: LD_ADDR_EXP 80
5769: PUSH
5770: EMPTY
5771: ST_TO_ADDR
// PrepareOmicronBase ;
5772: CALL 5781 0 0
// end ;
5776: LD_VAR 0 1
5780: RET
// function PrepareOmicronBase ; var base ; begin
5781: LD_INT 0
5783: PPUSH
5784: PPUSH
// amBase := PrepareBase ( omikron , OmicronBaseArea , omikron , [ 1 , 2 , 2 ] [ Difficulty ] , [ 3000 , 3000 , 0 ] , [ 7 , 3 , 4 , 2 ] ) ;
5785: LD_ADDR_EXP 82
5789: PUSH
5790: LD_INT 64
5792: PPUSH
5793: LD_INT 13
5795: PPUSH
5796: LD_STRING omikron
5798: PPUSH
5799: LD_INT 1
5801: PUSH
5802: LD_INT 2
5804: PUSH
5805: LD_INT 2
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: LIST
5812: PUSH
5813: LD_OWVAR 67
5817: ARRAY
5818: PPUSH
5819: LD_INT 3000
5821: PUSH
5822: LD_INT 3000
5824: PUSH
5825: LD_INT 0
5827: PUSH
5828: EMPTY
5829: LIST
5830: LIST
5831: LIST
5832: PPUSH
5833: LD_INT 7
5835: PUSH
5836: LD_INT 3
5838: PUSH
5839: LD_INT 4
5841: PUSH
5842: LD_INT 2
5844: PUSH
5845: EMPTY
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: PPUSH
5851: CALL 56186 0 6
5855: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 1 , amBase ) ;
5856: LD_ADDR_EXP 89
5860: PUSH
5861: LD_EXP 89
5865: PPUSH
5866: LD_INT 1
5868: PPUSH
5869: LD_EXP 82
5873: PPUSH
5874: CALL_OW 1
5878: ST_TO_ADDR
// case Difficulty of 2 :
5879: LD_OWVAR 67
5883: PUSH
5884: LD_INT 2
5886: DOUBLE
5887: EQUAL
5888: IFTRUE 5892
5890: GO 5908
5892: POP
// begin SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5893: LD_INT 51
5895: PPUSH
5896: LD_INT 1
5898: PPUSH
5899: LD_INT 1
5901: PPUSH
5902: CALL_OW 322
// end ; 3 :
5906: GO 5946
5908: LD_INT 3
5910: DOUBLE
5911: EQUAL
5912: IFTRUE 5916
5914: GO 5945
5916: POP
// begin SetTech ( tech_Tech2 , 1 , state_enabled ) ;
5917: LD_INT 49
5919: PPUSH
5920: LD_INT 1
5922: PPUSH
5923: LD_INT 1
5925: PPUSH
5926: CALL_OW 322
// SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5930: LD_INT 51
5932: PPUSH
5933: LD_INT 1
5935: PPUSH
5936: LD_INT 1
5938: PPUSH
5939: CALL_OW 322
// end ; end ;
5943: GO 5946
5945: POP
// end ;
5946: LD_VAR 0 1
5950: RET
// export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
5951: LD_INT 0
5953: PPUSH
5954: PPUSH
5955: PPUSH
5956: PPUSH
// amIntroUnits = [ ] ;
5957: LD_ADDR_EXP 79
5961: PUSH
5962: EMPTY
5963: ST_TO_ADDR
// uc_side = 1 ;
5964: LD_ADDR_OWVAR 20
5968: PUSH
5969: LD_INT 1
5971: ST_TO_ADDR
// uc_nation = nation_american ;
5972: LD_ADDR_OWVAR 21
5976: PUSH
5977: LD_INT 1
5979: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
5980: LD_ADDR_OWVAR 37
5984: PUSH
5985: LD_INT 3
5987: ST_TO_ADDR
// vc_control = control_manual ;
5988: LD_ADDR_OWVAR 38
5992: PUSH
5993: LD_INT 1
5995: ST_TO_ADDR
// vc_engine = engine_combustion ;
5996: LD_ADDR_OWVAR 39
6000: PUSH
6001: LD_INT 1
6003: ST_TO_ADDR
// vc_weapon = us_double_gun ;
6004: LD_ADDR_OWVAR 40
6008: PUSH
6009: LD_INT 5
6011: ST_TO_ADDR
// veh = CreateVehicle ;
6012: LD_ADDR_VAR 0 3
6016: PUSH
6017: CALL_OW 45
6021: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6022: LD_VAR 0 3
6026: PPUSH
6027: LD_INT 4
6029: PPUSH
6030: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
6034: LD_ADDR_EXP 79
6038: PUSH
6039: LD_EXP 79
6043: PUSH
6044: LD_VAR 0 3
6048: ADD
6049: ST_TO_ADDR
// PlaceUnitArea ( veh , CutsceneAmSupportSpawnArea , false ) ;
6050: LD_VAR 0 3
6054: PPUSH
6055: LD_INT 5
6057: PPUSH
6058: LD_INT 0
6060: PPUSH
6061: CALL_OW 49
// for i := 1 to 5 do
6065: LD_ADDR_VAR 0 2
6069: PUSH
6070: DOUBLE
6071: LD_INT 1
6073: DEC
6074: ST_TO_ADDR
6075: LD_INT 5
6077: PUSH
6078: FOR_TO
6079: IFFALSE 6176
// begin hc_name :=  ;
6081: LD_ADDR_OWVAR 26
6085: PUSH
6086: LD_STRING 
6088: ST_TO_ADDR
// hc_gallery :=  ;
6089: LD_ADDR_OWVAR 33
6093: PUSH
6094: LD_STRING 
6096: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
6097: LD_INT 0
6099: PPUSH
6100: LD_INT 1
6102: PPUSH
6103: CALL_OW 381
// human = CreateHuman ;
6107: LD_ADDR_VAR 0 4
6111: PUSH
6112: CALL_OW 44
6116: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
6117: LD_ADDR_EXP 79
6121: PUSH
6122: LD_EXP 79
6126: PUSH
6127: LD_VAR 0 4
6131: ADD
6132: ST_TO_ADDR
// if i < 5 then
6133: LD_VAR 0 2
6137: PUSH
6138: LD_INT 5
6140: LESS
6141: IFFALSE 6160
// PlaceUnitArea ( human , CutsceneAmSupportSpawnArea , false ) else
6143: LD_VAR 0 4
6147: PPUSH
6148: LD_INT 5
6150: PPUSH
6151: LD_INT 0
6153: PPUSH
6154: CALL_OW 49
6158: GO 6174
// begin PlaceHumanInUnit ( human , veh ) ;
6160: LD_VAR 0 4
6164: PPUSH
6165: LD_VAR 0 3
6169: PPUSH
6170: CALL_OW 52
// end ; end ;
6174: GO 6078
6176: POP
6177: POP
// end ;
6178: LD_VAR 0 1
6182: RET
// export function PrepareAmericanSupportTroops ( soldiersAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road ; begin
6183: LD_INT 0
6185: PPUSH
6186: PPUSH
6187: PPUSH
6188: PPUSH
6189: PPUSH
// uc_side := 1 ;
6190: LD_ADDR_OWVAR 20
6194: PUSH
6195: LD_INT 1
6197: ST_TO_ADDR
// uc_nation := 1 ;
6198: LD_ADDR_OWVAR 21
6202: PUSH
6203: LD_INT 1
6205: ST_TO_ADDR
// hc_name :=  ;
6206: LD_ADDR_OWVAR 26
6210: PUSH
6211: LD_STRING 
6213: ST_TO_ADDR
// hc_gallery :=  ;
6214: LD_ADDR_OWVAR 33
6218: PUSH
6219: LD_STRING 
6221: ST_TO_ADDR
// for i := 1 to soldiersAmount do
6222: LD_ADDR_VAR 0 6
6226: PUSH
6227: DOUBLE
6228: LD_INT 1
6230: DEC
6231: ST_TO_ADDR
6232: LD_VAR 0 1
6236: PUSH
6237: FOR_TO
6238: IFFALSE 6297
// begin PrepareSoldier ( false , enemySkillLevel ) ;
6240: LD_INT 0
6242: PPUSH
6243: LD_EXP 40
6247: PPUSH
6248: CALL_OW 381
// un = CreateHuman ;
6252: LD_ADDR_VAR 0 7
6256: PUSH
6257: CALL_OW 44
6261: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6262: LD_ADDR_EXP 80
6266: PUSH
6267: LD_EXP 80
6271: PUSH
6272: LD_VAR 0 7
6276: ADD
6277: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6278: LD_VAR 0 7
6282: PPUSH
6283: LD_VAR 0 4
6287: PPUSH
6288: LD_INT 0
6290: PPUSH
6291: CALL_OW 49
// end ;
6295: GO 6237
6297: POP
6298: POP
// for i := 1 to scientistsAmount do
6299: LD_ADDR_VAR 0 6
6303: PUSH
6304: DOUBLE
6305: LD_INT 1
6307: DEC
6308: ST_TO_ADDR
6309: LD_VAR 0 2
6313: PUSH
6314: FOR_TO
6315: IFFALSE 6374
// begin PrepareScientist ( false , enemySkillLevel ) ;
6317: LD_INT 0
6319: PPUSH
6320: LD_EXP 40
6324: PPUSH
6325: CALL_OW 384
// un = CreateHuman ;
6329: LD_ADDR_VAR 0 7
6333: PUSH
6334: CALL_OW 44
6338: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6339: LD_ADDR_EXP 80
6343: PUSH
6344: LD_EXP 80
6348: PUSH
6349: LD_VAR 0 7
6353: ADD
6354: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6355: LD_VAR 0 7
6359: PPUSH
6360: LD_VAR 0 4
6364: PPUSH
6365: LD_INT 0
6367: PPUSH
6368: CALL_OW 49
// end ;
6372: GO 6314
6374: POP
6375: POP
// for i := 1 to vehiclesAmount do
6376: LD_ADDR_VAR 0 6
6380: PUSH
6381: DOUBLE
6382: LD_INT 1
6384: DEC
6385: ST_TO_ADDR
6386: LD_VAR 0 3
6390: PUSH
6391: FOR_TO
6392: IFFALSE 6546
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
6394: LD_ADDR_OWVAR 40
6398: PUSH
6399: LD_INT 2
6401: PUSH
6402: LD_INT 4
6404: PUSH
6405: LD_INT 3
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: LIST
6412: PUSH
6413: LD_INT 1
6415: PPUSH
6416: LD_INT 3
6418: PPUSH
6419: CALL_OW 12
6423: ARRAY
6424: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
6425: LD_ADDR_OWVAR 37
6429: PUSH
6430: LD_INT 3
6432: ST_TO_ADDR
// vc_control = control_manual ;
6433: LD_ADDR_OWVAR 38
6437: PUSH
6438: LD_INT 1
6440: ST_TO_ADDR
// vc_engine = engine_combustion ;
6441: LD_ADDR_OWVAR 39
6445: PUSH
6446: LD_INT 1
6448: ST_TO_ADDR
// veh = CreateVehicle ;
6449: LD_ADDR_VAR 0 8
6453: PUSH
6454: CALL_OW 45
6458: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ veh ;
6459: LD_ADDR_EXP 80
6463: PUSH
6464: LD_EXP 80
6468: PUSH
6469: LD_VAR 0 8
6473: ADD
6474: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6475: LD_VAR 0 8
6479: PPUSH
6480: LD_VAR 0 4
6484: PPUSH
6485: LD_INT 0
6487: PPUSH
6488: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
6492: LD_INT 0
6494: PPUSH
6495: LD_EXP 40
6499: PPUSH
6500: CALL_OW 383
// un = CreateHuman ;
6504: LD_ADDR_VAR 0 7
6508: PUSH
6509: CALL_OW 44
6513: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6514: LD_ADDR_EXP 80
6518: PUSH
6519: LD_EXP 80
6523: PUSH
6524: LD_VAR 0 7
6528: ADD
6529: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6530: LD_VAR 0 7
6534: PPUSH
6535: LD_VAR 0 8
6539: PPUSH
6540: CALL_OW 52
// end ;
6544: GO 6391
6546: POP
6547: POP
// case area of NorthAmericanSpawnArea :
6548: LD_VAR 0 4
6552: PUSH
6553: LD_INT 7
6555: DOUBLE
6556: EQUAL
6557: IFTRUE 6561
6559: GO 6572
6561: POP
// road = NorthRoadArea ; SouthAmericanSpawnArea1 :
6562: LD_ADDR_VAR 0 9
6566: PUSH
6567: LD_INT 10
6569: ST_TO_ADDR
6570: GO 6611
6572: LD_INT 9
6574: DOUBLE
6575: EQUAL
6576: IFTRUE 6580
6578: GO 6591
6580: POP
// road = SouthRoadArea1 ; SouthAmericanSpawnArea2 :
6581: LD_ADDR_VAR 0 9
6585: PUSH
6586: LD_INT 11
6588: ST_TO_ADDR
6589: GO 6611
6591: LD_INT 8
6593: DOUBLE
6594: EQUAL
6595: IFTRUE 6599
6597: GO 6610
6599: POP
// road = SouthRoadArea2 ; end ;
6600: LD_ADDR_VAR 0 9
6604: PUSH
6605: LD_INT 12
6607: ST_TO_ADDR
6608: GO 6611
6610: POP
// MoveToBase ( amSupportTroops , road ) ;
6611: LD_EXP 80
6615: PPUSH
6616: LD_VAR 0 9
6620: PPUSH
6621: CALL 12868 0 2
// end ;
6625: LD_VAR 0 5
6629: RET
// export function PrepareAmericanPatrol ; var un ; begin
6630: LD_INT 0
6632: PPUSH
6633: PPUSH
// amPatrol = [ ] ;
6634: LD_ADDR_EXP 81
6638: PUSH
6639: EMPTY
6640: ST_TO_ADDR
// uc_side = 1 ;
6641: LD_ADDR_OWVAR 20
6645: PUSH
6646: LD_INT 1
6648: ST_TO_ADDR
// uc_nation = 1 ;
6649: LD_ADDR_OWVAR 21
6653: PUSH
6654: LD_INT 1
6656: ST_TO_ADDR
// un = PrepareUnitExt ( Campell , false ) ;
6657: LD_ADDR_VAR 0 2
6661: PUSH
6662: LD_STRING Campell
6664: PPUSH
6665: LD_INT 0
6667: PPUSH
6668: CALL 7250 0 2
6672: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6673: LD_ADDR_EXP 81
6677: PUSH
6678: LD_EXP 81
6682: PUSH
6683: LD_VAR 0 2
6687: ADD
6688: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6689: LD_VAR 0 2
6693: PPUSH
6694: LD_INT 14
6696: PPUSH
6697: LD_INT 0
6699: PPUSH
6700: CALL_OW 49
// SetClass ( un , 1 ) ;
6704: LD_VAR 0 2
6708: PPUSH
6709: LD_INT 1
6711: PPUSH
6712: CALL_OW 336
// PrepareSoldier ( sex_male , enemySkillLevel ) ;
6716: LD_INT 1
6718: PPUSH
6719: LD_EXP 40
6723: PPUSH
6724: CALL_OW 381
// un = CreateHuman ;
6728: LD_ADDR_VAR 0 2
6732: PUSH
6733: CALL_OW 44
6737: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6738: LD_ADDR_EXP 81
6742: PUSH
6743: LD_EXP 81
6747: PUSH
6748: LD_VAR 0 2
6752: ADD
6753: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6754: LD_VAR 0 2
6758: PPUSH
6759: LD_INT 14
6761: PPUSH
6762: LD_INT 0
6764: PPUSH
6765: CALL_OW 49
// ComAttackUnit ( amPatrol , Scholtze ) ;
6769: LD_EXP 81
6773: PPUSH
6774: LD_EXP 51
6778: PPUSH
6779: CALL_OW 115
// end ; end_of_file
6783: LD_VAR 0 1
6787: RET
// export northGroup , southGroup ; export function PrepareArabian ; var i , un , veh ; begin
6788: LD_INT 0
6790: PPUSH
6791: PPUSH
6792: PPUSH
6793: PPUSH
// northGroup = [ ] ;
6794: LD_ADDR_EXP 83
6798: PUSH
6799: EMPTY
6800: ST_TO_ADDR
// southGroup = [ ] ;
6801: LD_ADDR_EXP 84
6805: PUSH
6806: EMPTY
6807: ST_TO_ADDR
// uc_side = 2 ;
6808: LD_ADDR_OWVAR 20
6812: PUSH
6813: LD_INT 2
6815: ST_TO_ADDR
// uc_nation = 2 ;
6816: LD_ADDR_OWVAR 21
6820: PUSH
6821: LD_INT 2
6823: ST_TO_ADDR
// hc_name :=  ;
6824: LD_ADDR_OWVAR 26
6828: PUSH
6829: LD_STRING 
6831: ST_TO_ADDR
// hc_gallery :=  ;
6832: LD_ADDR_OWVAR 33
6836: PUSH
6837: LD_STRING 
6839: ST_TO_ADDR
// for i := 1 to 10 do
6840: LD_ADDR_VAR 0 2
6844: PUSH
6845: DOUBLE
6846: LD_INT 1
6848: DEC
6849: ST_TO_ADDR
6850: LD_INT 10
6852: PUSH
6853: FOR_TO
6854: IFFALSE 6968
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
6856: LD_INT 13
6858: PPUSH
6859: LD_INT 1
6861: PPUSH
6862: LD_INT 1
6864: PPUSH
6865: LD_INT 26
6867: PPUSH
6868: LD_INT 100
6870: PPUSH
6871: CALL 52777 0 5
// veh = CreateVehicle ;
6875: LD_ADDR_VAR 0 4
6879: PUSH
6880: CALL_OW 45
6884: ST_TO_ADDR
// southGroup = southGroup ^ veh ;
6885: LD_ADDR_EXP 84
6889: PUSH
6890: LD_EXP 84
6894: PUSH
6895: LD_VAR 0 4
6899: ADD
6900: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea2 , false ) ;
6901: LD_VAR 0 4
6905: PPUSH
6906: LD_INT 24
6908: PPUSH
6909: LD_INT 0
6911: PPUSH
6912: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6916: LD_INT 0
6918: PPUSH
6919: LD_INT 8
6921: PPUSH
6922: CALL_OW 383
// un = CreateHuman ;
6926: LD_ADDR_VAR 0 3
6930: PUSH
6931: CALL_OW 44
6935: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6936: LD_ADDR_EXP 84
6940: PUSH
6941: LD_EXP 84
6945: PUSH
6946: LD_VAR 0 3
6950: ADD
6951: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6952: LD_VAR 0 3
6956: PPUSH
6957: LD_VAR 0 4
6961: PPUSH
6962: CALL_OW 52
// end ;
6966: GO 6853
6968: POP
6969: POP
// for i := 1 to 20 do
6970: LD_ADDR_VAR 0 2
6974: PUSH
6975: DOUBLE
6976: LD_INT 1
6978: DEC
6979: ST_TO_ADDR
6980: LD_INT 20
6982: PUSH
6983: FOR_TO
6984: IFFALSE 7039
// begin PrepareSoldier ( false , 8 ) ;
6986: LD_INT 0
6988: PPUSH
6989: LD_INT 8
6991: PPUSH
6992: CALL_OW 381
// un = CreateHuman ;
6996: LD_ADDR_VAR 0 3
7000: PUSH
7001: CALL_OW 44
7005: ST_TO_ADDR
// southGroup = southGroup ^ un ;
7006: LD_ADDR_EXP 84
7010: PUSH
7011: LD_EXP 84
7015: PUSH
7016: LD_VAR 0 3
7020: ADD
7021: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
7022: LD_VAR 0 3
7026: PPUSH
7027: LD_INT 24
7029: PPUSH
7030: LD_INT 0
7032: PPUSH
7033: CALL_OW 49
// end ;
7037: GO 6983
7039: POP
7040: POP
// for i := 1 to 20 do
7041: LD_ADDR_VAR 0 2
7045: PUSH
7046: DOUBLE
7047: LD_INT 1
7049: DEC
7050: ST_TO_ADDR
7051: LD_INT 20
7053: PUSH
7054: FOR_TO
7055: IFFALSE 7113
// begin PrepareHuman ( false , class_mortar , 8 ) ;
7057: LD_INT 0
7059: PPUSH
7060: LD_INT 8
7062: PPUSH
7063: LD_INT 8
7065: PPUSH
7066: CALL_OW 380
// un = CreateHuman ;
7070: LD_ADDR_VAR 0 3
7074: PUSH
7075: CALL_OW 44
7079: ST_TO_ADDR
// southGroup = southGroup ^ un ;
7080: LD_ADDR_EXP 84
7084: PUSH
7085: LD_EXP 84
7089: PUSH
7090: LD_VAR 0 3
7094: ADD
7095: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
7096: LD_VAR 0 3
7100: PPUSH
7101: LD_INT 24
7103: PPUSH
7104: LD_INT 0
7106: PPUSH
7107: CALL_OW 49
// end ;
7111: GO 7054
7113: POP
7114: POP
// for i := 1 to 10 do
7115: LD_ADDR_VAR 0 2
7119: PUSH
7120: DOUBLE
7121: LD_INT 1
7123: DEC
7124: ST_TO_ADDR
7125: LD_INT 10
7127: PUSH
7128: FOR_TO
7129: IFFALSE 7243
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
7131: LD_INT 13
7133: PPUSH
7134: LD_INT 1
7136: PPUSH
7137: LD_INT 1
7139: PPUSH
7140: LD_INT 26
7142: PPUSH
7143: LD_INT 100
7145: PPUSH
7146: CALL 52777 0 5
// veh = CreateVehicle ;
7150: LD_ADDR_VAR 0 4
7154: PUSH
7155: CALL_OW 45
7159: ST_TO_ADDR
// northGroup = northGroup ^ veh ;
7160: LD_ADDR_EXP 83
7164: PUSH
7165: LD_EXP 83
7169: PUSH
7170: LD_VAR 0 4
7174: ADD
7175: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
7176: LD_VAR 0 4
7180: PPUSH
7181: LD_INT 23
7183: PPUSH
7184: LD_INT 0
7186: PPUSH
7187: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
7191: LD_INT 0
7193: PPUSH
7194: LD_INT 8
7196: PPUSH
7197: CALL_OW 383
// un = CreateHuman ;
7201: LD_ADDR_VAR 0 3
7205: PUSH
7206: CALL_OW 44
7210: ST_TO_ADDR
// northGroup = northGroup ^ un ;
7211: LD_ADDR_EXP 83
7215: PUSH
7216: LD_EXP 83
7220: PUSH
7221: LD_VAR 0 3
7225: ADD
7226: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7227: LD_VAR 0 3
7231: PPUSH
7232: LD_VAR 0 4
7236: PPUSH
7237: CALL_OW 52
// end ;
7241: GO 7128
7243: POP
7244: POP
// end ; end_of_file
7245: LD_VAR 0 1
7249: RET
// export function PrepareUnitExt ( ident , exist_mode ) ; var unit ; begin
7250: LD_INT 0
7252: PPUSH
7253: PPUSH
// if exist_mode then
7254: LD_VAR 0 2
7258: IFFALSE 7283
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
7260: LD_ADDR_VAR 0 4
7264: PUSH
7265: LD_EXP 33
7269: PUSH
7270: LD_VAR 0 1
7274: STR
7275: PPUSH
7276: CALL_OW 34
7280: ST_TO_ADDR
7281: GO 7298
// unit := NewCharacter ( ident ) ;
7283: LD_ADDR_VAR 0 4
7287: PUSH
7288: LD_VAR 0 1
7292: PPUSH
7293: CALL_OW 25
7297: ST_TO_ADDR
// result := unit ;
7298: LD_ADDR_VAR 0 3
7302: PUSH
7303: LD_VAR 0 4
7307: ST_TO_ADDR
// end ;
7308: LD_VAR 0 3
7312: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
7313: LD_INT 0
7315: PPUSH
7316: PPUSH
7317: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze ] ;
7318: LD_ADDR_VAR 0 1
7322: PUSH
7323: LD_VAR 0 1
7327: PUSH
7328: LD_EXP 45
7332: PUSH
7333: LD_EXP 46
7337: PUSH
7338: LD_EXP 49
7342: PUSH
7343: LD_EXP 50
7347: PUSH
7348: LD_EXP 47
7352: PUSH
7353: LD_EXP 48
7357: PUSH
7358: LD_EXP 51
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: DIFF
7372: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7373: LD_ADDR_VAR 0 7
7377: PUSH
7378: LD_VAR 0 1
7382: PUSH
7383: LD_INT 1
7385: PPUSH
7386: LD_VAR 0 1
7390: PPUSH
7391: CALL_OW 12
7395: ARRAY
7396: ST_TO_ADDR
// if radio then
7397: LD_VAR 0 4
7401: IFFALSE 7450
// begin if GetSex ( speaker ) = sex_male then
7403: LD_VAR 0 7
7407: PPUSH
7408: CALL_OW 258
7412: PUSH
7413: LD_INT 1
7415: EQUAL
7416: IFFALSE 7434
// SayRadio ( speaker , dialogMID ) else
7418: LD_VAR 0 7
7422: PPUSH
7423: LD_VAR 0 2
7427: PPUSH
7428: CALL_OW 94
7432: GO 7448
// SayRadio ( speaker , dialogFID ) ;
7434: LD_VAR 0 7
7438: PPUSH
7439: LD_VAR 0 3
7443: PPUSH
7444: CALL_OW 94
// end else
7448: GO 7495
// begin if GetSex ( speaker ) = sex_male then
7450: LD_VAR 0 7
7454: PPUSH
7455: CALL_OW 258
7459: PUSH
7460: LD_INT 1
7462: EQUAL
7463: IFFALSE 7481
// Say ( speaker , dialogMID ) else
7465: LD_VAR 0 7
7469: PPUSH
7470: LD_VAR 0 2
7474: PPUSH
7475: CALL_OW 88
7479: GO 7495
// Say ( speaker , dialogFID ) ;
7481: LD_VAR 0 7
7485: PPUSH
7486: LD_VAR 0 3
7490: PPUSH
7491: CALL_OW 88
// end ; result := speaker ;
7495: LD_ADDR_VAR 0 5
7499: PUSH
7500: LD_VAR 0 7
7504: ST_TO_ADDR
// end ;
7505: LD_VAR 0 5
7509: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
7510: LD_INT 0
7512: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
7513: LD_VAR 0 1
7517: PPUSH
7518: CALL_OW 255
7522: PUSH
7523: LD_VAR 0 3
7527: EQUAL
7528: PUSH
7529: LD_VAR 0 1
7533: PPUSH
7534: CALL_OW 302
7538: AND
7539: IFFALSE 7561
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
7541: LD_VAR 0 1
7545: PPUSH
7546: LD_EXP 32
7550: PUSH
7551: LD_VAR 0 2
7555: STR
7556: PPUSH
7557: CALL_OW 38
// end ;
7561: LD_VAR 0 4
7565: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
7566: LD_INT 0
7568: PPUSH
7569: PPUSH
7570: PPUSH
// resultCharactersToSave = [ ] ;
7571: LD_ADDR_VAR 0 6
7575: PUSH
7576: EMPTY
7577: ST_TO_ADDR
// for unit in characters do
7578: LD_ADDR_VAR 0 5
7582: PUSH
7583: LD_VAR 0 1
7587: PUSH
7588: FOR_IN
7589: IFFALSE 7637
// if GetSide ( unit ) = side and IsOK ( unit ) then
7591: LD_VAR 0 5
7595: PPUSH
7596: CALL_OW 255
7600: PUSH
7601: LD_VAR 0 3
7605: EQUAL
7606: PUSH
7607: LD_VAR 0 5
7611: PPUSH
7612: CALL_OW 302
7616: AND
7617: IFFALSE 7635
// resultCharactersToSave = resultCharactersToSave ^ unit ;
7619: LD_ADDR_VAR 0 6
7623: PUSH
7624: LD_VAR 0 6
7628: PUSH
7629: LD_VAR 0 5
7633: ADD
7634: ST_TO_ADDR
7635: GO 7588
7637: POP
7638: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
7639: LD_VAR 0 6
7643: PPUSH
7644: LD_EXP 32
7648: PUSH
7649: LD_VAR 0 2
7653: STR
7654: PPUSH
7655: CALL_OW 38
// end ;
7659: LD_VAR 0 4
7663: RET
// export function SelectCharacters ( maxUnitToChoose ) ; var i , charsToChoose , selectedPeople ; begin
7664: LD_INT 0
7666: PPUSH
7667: PPUSH
7668: PPUSH
7669: PPUSH
// charsToChoose = otherKirovUnits ;
7670: LD_ADDR_VAR 0 4
7674: PUSH
7675: LD_EXP 62
7679: ST_TO_ADDR
// charsToChoose = charsToChoose ^ otherBeriaUnits ;
7680: LD_ADDR_VAR 0 4
7684: PUSH
7685: LD_VAR 0 4
7689: PUSH
7690: LD_EXP 55
7694: ADD
7695: ST_TO_ADDR
// charsToChoose = charsToChoose ^ other_survivors ;
7696: LD_ADDR_VAR 0 4
7700: PUSH
7701: LD_VAR 0 4
7705: PUSH
7706: LD_EXP 53
7710: ADD
7711: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov ;
7712: LD_ADDR_VAR 0 4
7716: PUSH
7717: LD_VAR 0 4
7721: PUSH
7722: LD_EXP 49
7726: ADD
7727: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov2 ;
7728: LD_ADDR_VAR 0 4
7732: PUSH
7733: LD_VAR 0 4
7737: PUSH
7738: LD_EXP 50
7742: ADD
7743: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , maxUnitToChoose , maxUnitToChoose , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Kurin ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
7744: LD_ADDR_VAR 0 5
7748: PUSH
7749: LD_STRING text
7751: PPUSH
7752: LD_VAR 0 1
7756: PPUSH
7757: LD_VAR 0 1
7761: PPUSH
7762: LD_INT -5
7764: PUSH
7765: LD_EXP 45
7769: PUSH
7770: LD_EXP 46
7774: PUSH
7775: LD_EXP 48
7779: PUSH
7780: LD_EXP 47
7784: PUSH
7785: LD_INT -6
7787: PUSH
7788: LD_INT -2
7790: PUSH
7791: LD_INT -3
7793: PUSH
7794: LD_INT -5
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: PUSH
7808: LD_VAR 0 4
7812: ADD
7813: PUSH
7814: LD_INT -6
7816: PUSH
7817: LD_INT -4
7819: PUSH
7820: LD_EXP 58
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: LIST
7829: ADD
7830: PPUSH
7831: LD_INT 1
7833: PUSH
7834: LD_INT 3
7836: PUSH
7837: LD_INT 2
7839: PUSH
7840: LD_INT 1
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: PUSH
7847: LD_INT 4
7849: PUSH
7850: LD_INT 1
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: PPUSH
7863: CALL_OW 42
7867: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
7868: LD_VAR 0 4
7872: PPUSH
7873: LD_INT 6
7875: PPUSH
7876: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
7880: LD_VAR 0 5
7884: PPUSH
7885: LD_INT 3
7887: PPUSH
7888: CALL_OW 235
// SetSurvivorsArabianAttack ;
7892: CALL 5034 0 0
// MoveKurinUnitsToBuildings ;
7896: CALL 8606 0 0
// end ;
7900: LD_VAR 0 2
7904: RET
// export function FindNotFullBuildingInArea ( area , side , buildingType ) ; var building ; begin
7905: LD_INT 0
7907: PPUSH
7908: PPUSH
// for building in FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , buildingType ] ] ) do
7909: LD_ADDR_VAR 0 5
7913: PUSH
7914: LD_VAR 0 1
7918: PPUSH
7919: LD_INT 22
7921: PUSH
7922: LD_VAR 0 2
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: PUSH
7931: LD_INT 21
7933: PUSH
7934: LD_INT 3
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: PUSH
7941: LD_INT 30
7943: PUSH
7944: LD_VAR 0 3
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: LIST
7957: PPUSH
7958: CALL_OW 70
7962: PUSH
7963: FOR_IN
7964: IFFALSE 7997
// begin if UnitsInside ( building ) < 6 then
7966: LD_VAR 0 5
7970: PPUSH
7971: CALL_OW 313
7975: PUSH
7976: LD_INT 6
7978: LESS
7979: IFFALSE 7995
// begin result = building ;
7981: LD_ADDR_VAR 0 4
7985: PUSH
7986: LD_VAR 0 5
7990: ST_TO_ADDR
// exit ;
7991: POP
7992: POP
7993: GO 8007
// end ; end ;
7995: GO 7963
7997: POP
7998: POP
// result = 0 ;
7999: LD_ADDR_VAR 0 4
8003: PUSH
8004: LD_INT 0
8006: ST_TO_ADDR
// end ;
8007: LD_VAR 0 4
8011: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
8012: LD_INT 0
8014: PPUSH
8015: PPUSH
// dir := GetDir ( bunker ) - 3 ;
8016: LD_ADDR_VAR 0 4
8020: PUSH
8021: LD_VAR 0 2
8025: PPUSH
8026: CALL_OW 254
8030: PUSH
8031: LD_INT 3
8033: MINUS
8034: ST_TO_ADDR
// if dir < 0 then
8035: LD_VAR 0 4
8039: PUSH
8040: LD_INT 0
8042: LESS
8043: IFFALSE 8059
// dir := 6 + dir ;
8045: LD_ADDR_VAR 0 4
8049: PUSH
8050: LD_INT 6
8052: PUSH
8053: LD_VAR 0 4
8057: PLUS
8058: ST_TO_ADDR
// SetDir ( un , dir ) ;
8059: LD_VAR 0 1
8063: PPUSH
8064: LD_VAR 0 4
8068: PPUSH
8069: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
8073: LD_VAR 0 1
8077: PPUSH
8078: LD_VAR 0 2
8082: PPUSH
8083: CALL_OW 52
// result = un ;
8087: LD_ADDR_VAR 0 3
8091: PUSH
8092: LD_VAR 0 1
8096: ST_TO_ADDR
// end ;
8097: LD_VAR 0 3
8101: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8102: LD_INT 0
8104: PPUSH
8105: PPUSH
8106: PPUSH
// uc_side := GetSide ( b ) ;
8107: LD_ADDR_OWVAR 20
8111: PUSH
8112: LD_VAR 0 2
8116: PPUSH
8117: CALL_OW 255
8121: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8122: LD_ADDR_OWVAR 21
8126: PUSH
8127: LD_VAR 0 2
8131: PPUSH
8132: CALL_OW 248
8136: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8137: LD_INT 0
8139: PPUSH
8140: LD_INT 1
8142: PPUSH
8143: LD_VAR 0 1
8147: PPUSH
8148: CALL_OW 380
// un = CreateHuman ;
8152: LD_ADDR_VAR 0 4
8156: PUSH
8157: CALL_OW 44
8161: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8162: LD_ADDR_VAR 0 5
8166: PUSH
8167: LD_VAR 0 2
8171: PPUSH
8172: CALL_OW 254
8176: PUSH
8177: LD_INT 3
8179: MINUS
8180: ST_TO_ADDR
// if dir < 0 then
8181: LD_VAR 0 5
8185: PUSH
8186: LD_INT 0
8188: LESS
8189: IFFALSE 8205
// dir := 6 + dir ;
8191: LD_ADDR_VAR 0 5
8195: PUSH
8196: LD_INT 6
8198: PUSH
8199: LD_VAR 0 5
8203: PLUS
8204: ST_TO_ADDR
// SetDir ( un , dir ) ;
8205: LD_VAR 0 4
8209: PPUSH
8210: LD_VAR 0 5
8214: PPUSH
8215: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8219: LD_VAR 0 4
8223: PPUSH
8224: LD_VAR 0 2
8228: PPUSH
8229: CALL_OW 52
// result = un ;
8233: LD_ADDR_VAR 0 3
8237: PUSH
8238: LD_VAR 0 4
8242: ST_TO_ADDR
// end ;
8243: LD_VAR 0 3
8247: RET
// export function AddComUpgradeBreastwork ( units , buildings , upgradeBType ) ; var building , x , y , dir ; begin
8248: LD_INT 0
8250: PPUSH
8251: PPUSH
8252: PPUSH
8253: PPUSH
8254: PPUSH
// for building in buildings do
8255: LD_ADDR_VAR 0 5
8259: PUSH
8260: LD_VAR 0 2
8264: PUSH
8265: FOR_IN
8266: IFFALSE 8358
// begin x = GetX ( building ) ;
8268: LD_ADDR_VAR 0 6
8272: PUSH
8273: LD_VAR 0 5
8277: PPUSH
8278: CALL_OW 250
8282: ST_TO_ADDR
// y = GetY ( building ) ;
8283: LD_ADDR_VAR 0 7
8287: PUSH
8288: LD_VAR 0 5
8292: PPUSH
8293: CALL_OW 251
8297: ST_TO_ADDR
// dir = GetDir ( building ) ;
8298: LD_ADDR_VAR 0 8
8302: PUSH
8303: LD_VAR 0 5
8307: PPUSH
8308: CALL_OW 254
8312: ST_TO_ADDR
// AddComDismantle ( units , building ) ;
8313: LD_VAR 0 1
8317: PPUSH
8318: LD_VAR 0 5
8322: PPUSH
8323: CALL_OW 227
// AddComBuild ( units , upgradeBType , x , y , dir ) ;
8327: LD_VAR 0 1
8331: PPUSH
8332: LD_VAR 0 3
8336: PPUSH
8337: LD_VAR 0 6
8341: PPUSH
8342: LD_VAR 0 7
8346: PPUSH
8347: LD_VAR 0 8
8351: PPUSH
8352: CALL_OW 205
// end ;
8356: GO 8265
8358: POP
8359: POP
// end ;
8360: LD_VAR 0 4
8364: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8365: LD_INT 0
8367: PPUSH
8368: PPUSH
8369: PPUSH
8370: PPUSH
8371: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8372: LD_ADDR_VAR 0 8
8376: PUSH
8377: LD_INT 48
8379: PUSH
8380: LD_INT 49
8382: PUSH
8383: LD_INT 50
8385: PUSH
8386: LD_INT 20
8388: PUSH
8389: LD_INT 1
8391: PUSH
8392: LD_INT 51
8394: PUSH
8395: LD_INT 52
8397: PUSH
8398: LD_INT 69
8400: PUSH
8401: LD_INT 39
8403: PUSH
8404: LD_INT 34
8406: PUSH
8407: LD_INT 40
8409: PUSH
8410: LD_INT 53
8412: PUSH
8413: LD_INT 71
8415: PUSH
8416: LD_INT 57
8418: PUSH
8419: LD_INT 58
8421: PUSH
8422: LD_INT 44
8424: PUSH
8425: LD_INT 32
8427: PUSH
8428: LD_INT 27
8430: PUSH
8431: LD_INT 23
8433: PUSH
8434: LD_INT 33
8436: PUSH
8437: LD_INT 59
8439: PUSH
8440: LD_INT 54
8442: PUSH
8443: LD_INT 55
8445: PUSH
8446: LD_INT 56
8448: PUSH
8449: LD_INT 63
8451: PUSH
8452: LD_INT 64
8454: PUSH
8455: LD_INT 65
8457: PUSH
8458: LD_INT 30
8460: PUSH
8461: LD_INT 31
8463: PUSH
8464: LD_INT 21
8466: PUSH
8467: LD_INT 22
8469: PUSH
8470: LD_INT 25
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8507: LD_ADDR_VAR 0 5
8511: PUSH
8512: DOUBLE
8513: LD_INT 1
8515: DEC
8516: ST_TO_ADDR
8517: LD_VAR 0 8
8521: PUSH
8522: FOR_TO
8523: IFFALSE 8599
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8525: LD_VAR 0 8
8529: PUSH
8530: LD_VAR 0 5
8534: ARRAY
8535: PPUSH
8536: LD_VAR 0 1
8540: PPUSH
8541: CALL_OW 321
8545: PUSH
8546: LD_INT 1
8548: EQUAL
8549: PUSH
8550: LD_VAR 0 8
8554: PUSH
8555: LD_VAR 0 5
8559: ARRAY
8560: PPUSH
8561: LD_VAR 0 3
8565: PPUSH
8566: CALL_OW 482
8570: PUSH
8571: LD_INT 1
8573: EQUAL
8574: AND
8575: IFFALSE 8597
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8577: LD_VAR 0 2
8581: PPUSH
8582: LD_VAR 0 8
8586: PUSH
8587: LD_VAR 0 5
8591: ARRAY
8592: PPUSH
8593: CALL_OW 184
8597: GO 8522
8599: POP
8600: POP
// end ;
8601: LD_VAR 0 4
8605: RET
// export function MoveKurinUnitsToBuildings ; var i , lab , fac , bunker , tmp , pom , canTakeUnits , diffUnits ; begin
8606: LD_INT 0
8608: PPUSH
8609: PPUSH
8610: PPUSH
8611: PPUSH
8612: PPUSH
8613: PPUSH
8614: PPUSH
8615: PPUSH
8616: PPUSH
// lab = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
8617: LD_ADDR_VAR 0 3
8621: PUSH
8622: LD_INT 22
8624: PUSH
8625: LD_INT 6
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PUSH
8632: LD_INT 21
8634: PUSH
8635: LD_INT 3
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PUSH
8642: LD_INT 30
8644: PUSH
8645: LD_INT 6
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: LIST
8656: PPUSH
8657: CALL_OW 69
8661: PUSH
8662: LD_INT 1
8664: ARRAY
8665: ST_TO_ADDR
// fac = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8666: LD_ADDR_VAR 0 4
8670: PUSH
8671: LD_INT 22
8673: PUSH
8674: LD_INT 6
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: PUSH
8681: LD_INT 21
8683: PUSH
8684: LD_INT 3
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PUSH
8691: LD_INT 30
8693: PUSH
8694: LD_INT 3
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: LIST
8705: PPUSH
8706: CALL_OW 69
8710: PUSH
8711: LD_INT 1
8713: ARRAY
8714: ST_TO_ADDR
// diffUnits = diffUnits ^ Kurin ;
8715: LD_ADDR_VAR 0 9
8719: PUSH
8720: LD_VAR 0 9
8724: PUSH
8725: LD_EXP 58
8729: ADD
8730: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
8731: LD_ADDR_VAR 0 9
8735: PUSH
8736: LD_VAR 0 9
8740: PUSH
8741: LD_EXP 75
8745: ADD
8746: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
8747: LD_ADDR_VAR 0 9
8751: PUSH
8752: LD_VAR 0 9
8756: PUSH
8757: LD_EXP 68
8761: ADD
8762: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
8763: LD_ADDR_VAR 0 8
8767: PUSH
8768: LD_INT 19
8770: PPUSH
8771: LD_INT 22
8773: PUSH
8774: LD_INT 6
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PUSH
8781: LD_INT 21
8783: PUSH
8784: LD_INT 1
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: PUSH
8791: LD_INT 3
8793: PUSH
8794: LD_INT 60
8796: PUSH
8797: EMPTY
8798: LIST
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: LIST
8808: PPUSH
8809: CALL_OW 70
8813: PUSH
8814: LD_VAR 0 9
8818: DIFF
8819: ST_TO_ADDR
// if not canTakeUnits then
8820: LD_VAR 0 8
8824: NOT
8825: IFFALSE 8858
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 4 , neededUnitsSpawn [ 3 ] + 2 ) ;
8827: LD_ADDR_EXP 77
8831: PUSH
8832: LD_EXP 77
8836: PPUSH
8837: LD_INT 4
8839: PPUSH
8840: LD_EXP 77
8844: PUSH
8845: LD_INT 3
8847: ARRAY
8848: PUSH
8849: LD_INT 2
8851: PLUS
8852: PPUSH
8853: CALL_OW 1
8857: ST_TO_ADDR
// if canTakeUnits > 2 then
8858: LD_VAR 0 8
8862: PUSH
8863: LD_INT 2
8865: GREATER
8866: IFFALSE 8936
// begin for i := 1 to rand ( 1 , 2 ) do
8868: LD_ADDR_VAR 0 2
8872: PUSH
8873: DOUBLE
8874: LD_INT 1
8876: DEC
8877: ST_TO_ADDR
8878: LD_INT 1
8880: PPUSH
8881: LD_INT 2
8883: PPUSH
8884: CALL_OW 12
8888: PUSH
8889: FOR_TO
8890: IFFALSE 8932
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
8892: LD_VAR 0 8
8896: PUSH
8897: LD_VAR 0 2
8901: ARRAY
8902: PPUSH
8903: LD_VAR 0 3
8907: PPUSH
8908: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
8912: LD_VAR 0 8
8916: PUSH
8917: LD_VAR 0 2
8921: ARRAY
8922: PPUSH
8923: LD_INT 4
8925: PPUSH
8926: CALL_OW 183
// end ;
8930: GO 8889
8932: POP
8933: POP
// end else
8934: GO 9004
// begin for i := 1 to rand ( 1 , canTakeUnits ) do
8936: LD_ADDR_VAR 0 2
8940: PUSH
8941: DOUBLE
8942: LD_INT 1
8944: DEC
8945: ST_TO_ADDR
8946: LD_INT 1
8948: PPUSH
8949: LD_VAR 0 8
8953: PPUSH
8954: CALL_OW 12
8958: PUSH
8959: FOR_TO
8960: IFFALSE 9002
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
8962: LD_VAR 0 8
8966: PUSH
8967: LD_VAR 0 2
8971: ARRAY
8972: PPUSH
8973: LD_VAR 0 3
8977: PPUSH
8978: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
8982: LD_VAR 0 8
8986: PUSH
8987: LD_VAR 0 2
8991: ARRAY
8992: PPUSH
8993: LD_INT 4
8995: PPUSH
8996: CALL_OW 183
// end ;
9000: GO 8959
9002: POP
9003: POP
// end ; wait ( 0 0$01 ) ;
9004: LD_INT 35
9006: PPUSH
9007: CALL_OW 67
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9011: LD_ADDR_VAR 0 8
9015: PUSH
9016: LD_INT 19
9018: PPUSH
9019: LD_INT 22
9021: PUSH
9022: LD_INT 6
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PUSH
9029: LD_INT 21
9031: PUSH
9032: LD_INT 1
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 3
9041: PUSH
9042: LD_INT 60
9044: PUSH
9045: EMPTY
9046: LIST
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: LIST
9056: PPUSH
9057: CALL_OW 70
9061: PUSH
9062: LD_VAR 0 9
9066: DIFF
9067: ST_TO_ADDR
// pom = 6 ;
9068: LD_ADDR_VAR 0 7
9072: PUSH
9073: LD_INT 6
9075: ST_TO_ADDR
// if canTakeUnits then
9076: LD_VAR 0 8
9080: IFFALSE 9197
// for i = 1 to canTakeUnits do
9082: LD_ADDR_VAR 0 2
9086: PUSH
9087: DOUBLE
9088: LD_INT 1
9090: DEC
9091: ST_TO_ADDR
9092: LD_VAR 0 8
9096: PUSH
9097: FOR_TO
9098: IFFALSE 9195
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
9100: LD_VAR 0 8
9104: PUSH
9105: LD_VAR 0 2
9109: ARRAY
9110: PPUSH
9111: CALL_OW 257
9115: PUSH
9116: LD_INT 3
9118: NONEQUAL
9119: IFFALSE 9159
// begin ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9121: LD_VAR 0 8
9125: PUSH
9126: LD_VAR 0 2
9130: ARRAY
9131: PPUSH
9132: LD_VAR 0 4
9136: PPUSH
9137: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_mechanic ) ;
9141: LD_VAR 0 8
9145: PUSH
9146: LD_VAR 0 2
9150: ARRAY
9151: PPUSH
9152: LD_INT 3
9154: PPUSH
9155: CALL_OW 183
// end ; ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9159: LD_VAR 0 8
9163: PUSH
9164: LD_VAR 0 2
9168: ARRAY
9169: PPUSH
9170: LD_VAR 0 4
9174: PPUSH
9175: CALL_OW 120
// pom = pom - 1 ;
9179: LD_ADDR_VAR 0 7
9183: PUSH
9184: LD_VAR 0 7
9188: PUSH
9189: LD_INT 1
9191: MINUS
9192: ST_TO_ADDR
// end ;
9193: GO 9097
9195: POP
9196: POP
// if pom > 0 then
9197: LD_VAR 0 7
9201: PUSH
9202: LD_INT 0
9204: GREATER
9205: IFFALSE 9230
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
9207: LD_ADDR_EXP 77
9211: PUSH
9212: LD_EXP 77
9216: PPUSH
9217: LD_INT 3
9219: PPUSH
9220: LD_VAR 0 7
9224: PPUSH
9225: CALL_OW 1
9229: ST_TO_ADDR
// wait ( 0 0$01 ) ;
9230: LD_INT 35
9232: PPUSH
9233: CALL_OW 67
// for bunker in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_occupied ] ] ] ) do
9237: LD_ADDR_VAR 0 5
9241: PUSH
9242: LD_INT 22
9244: PUSH
9245: LD_INT 6
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: LD_INT 21
9254: PUSH
9255: LD_INT 3
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PUSH
9262: LD_INT 30
9264: PUSH
9265: LD_INT 32
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PUSH
9272: LD_INT 3
9274: PUSH
9275: LD_INT 59
9277: PUSH
9278: EMPTY
9279: LIST
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: PPUSH
9291: CALL_OW 69
9295: PUSH
9296: FOR_IN
9297: IFFALSE 9543
// begin canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9299: LD_ADDR_VAR 0 8
9303: PUSH
9304: LD_INT 19
9306: PPUSH
9307: LD_INT 22
9309: PUSH
9310: LD_INT 6
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: PUSH
9317: LD_INT 21
9319: PUSH
9320: LD_INT 1
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: PUSH
9327: LD_INT 3
9329: PUSH
9330: LD_INT 60
9332: PUSH
9333: EMPTY
9334: LIST
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: LIST
9344: PPUSH
9345: CALL_OW 70
9349: PUSH
9350: LD_VAR 0 9
9354: DIFF
9355: ST_TO_ADDR
// if canTakeUnits then
9356: LD_VAR 0 8
9360: IFFALSE 9494
// begin if GetClass ( canTakeUnits [ 1 ] ) <> 1 then
9362: LD_VAR 0 8
9366: PUSH
9367: LD_INT 1
9369: ARRAY
9370: PPUSH
9371: CALL_OW 257
9375: PUSH
9376: LD_INT 1
9378: NONEQUAL
9379: IFFALSE 9474
// begin ComEnterUnit ( canTakeUnits [ 1 ] , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
9381: LD_VAR 0 8
9385: PUSH
9386: LD_INT 1
9388: ARRAY
9389: PPUSH
9390: LD_INT 22
9392: PUSH
9393: LD_INT 6
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PUSH
9400: LD_INT 21
9402: PUSH
9403: LD_INT 3
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: PUSH
9410: LD_INT 30
9412: PUSH
9413: LD_INT 5
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: LIST
9424: PPUSH
9425: CALL_OW 69
9429: PUSH
9430: LD_INT 1
9432: ARRAY
9433: PPUSH
9434: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ 1 ] , 1 ) ;
9438: LD_VAR 0 8
9442: PUSH
9443: LD_INT 1
9445: ARRAY
9446: PPUSH
9447: LD_INT 1
9449: PPUSH
9450: CALL_OW 183
// AddComExitBuilding ( canTakeUnits [ 1 ] ) ;
9454: LD_VAR 0 8
9458: PUSH
9459: LD_INT 1
9461: ARRAY
9462: PPUSH
9463: CALL_OW 182
// wait ( 0 0$1 ) ;
9467: LD_INT 35
9469: PPUSH
9470: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ 1 ] , bunker ) ;
9474: LD_VAR 0 8
9478: PUSH
9479: LD_INT 1
9481: ARRAY
9482: PPUSH
9483: LD_VAR 0 5
9487: PPUSH
9488: CALL_OW 120
// end else
9492: GO 9541
// begin kirovBunkersToOccupy = kirovBunkersToOccupy ^ bunker ;
9494: LD_ADDR_EXP 70
9498: PUSH
9499: LD_EXP 70
9503: PUSH
9504: LD_VAR 0 5
9508: ADD
9509: ST_TO_ADDR
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 1 , neededUnitsSpawn [ 1 ] + 1 ) ;
9510: LD_ADDR_EXP 77
9514: PUSH
9515: LD_EXP 77
9519: PPUSH
9520: LD_INT 1
9522: PPUSH
9523: LD_EXP 77
9527: PUSH
9528: LD_INT 1
9530: ARRAY
9531: PUSH
9532: LD_INT 1
9534: PLUS
9535: PPUSH
9536: CALL_OW 1
9540: ST_TO_ADDR
// end ; end ;
9541: GO 9296
9543: POP
9544: POP
// end ;
9545: LD_VAR 0 1
9549: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
9550: LD_INT 0
9552: PPUSH
9553: PPUSH
9554: PPUSH
9555: PPUSH
9556: PPUSH
9557: PPUSH
9558: PPUSH
9559: PPUSH
9560: PPUSH
9561: PPUSH
9562: PPUSH
9563: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
9564: LD_VAR 0 1
9568: PPUSH
9569: CALL_OW 302
9573: NOT
9574: PUSH
9575: LD_VAR 0 4
9579: PUSH
9580: LD_INT 1
9582: EQUAL
9583: OR
9584: PUSH
9585: LD_VAR 0 2
9589: PPUSH
9590: LD_VAR 0 3
9594: PPUSH
9595: CALL_OW 488
9599: NOT
9600: OR
9601: PUSH
9602: LD_VAR 0 1
9606: PPUSH
9607: LD_VAR 0 2
9611: PPUSH
9612: LD_VAR 0 3
9616: PPUSH
9617: CALL_OW 297
9621: PUSH
9622: LD_VAR 0 4
9626: GREATEREQUAL
9627: OR
9628: PUSH
9629: LD_VAR 0 5
9633: PUSH
9634: LD_INT 1
9636: PUSH
9637: LD_INT 0
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: IN
9644: NOT
9645: OR
9646: IFFALSE 9650
// exit ;
9648: GO 11207
// attempts = 0 ;
9650: LD_ADDR_VAR 0 17
9654: PUSH
9655: LD_INT 0
9657: ST_TO_ADDR
// repeat list_nearest = [ ] ;
9658: LD_ADDR_VAR 0 7
9662: PUSH
9663: EMPTY
9664: ST_TO_ADDR
// list_coords = [ ] ;
9665: LD_ADDR_VAR 0 8
9669: PUSH
9670: EMPTY
9671: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
9672: LD_ADDR_VAR 0 9
9676: PUSH
9677: LD_VAR 0 2
9681: PPUSH
9682: LD_VAR 0 3
9686: PPUSH
9687: LD_VAR 0 1
9691: PPUSH
9692: CALL_OW 250
9696: PPUSH
9697: LD_VAR 0 1
9701: PPUSH
9702: CALL_OW 251
9706: PPUSH
9707: CALL 11212 0 4
9711: ST_TO_ADDR
// if attempts = 0 then
9712: LD_VAR 0 17
9716: PUSH
9717: LD_INT 0
9719: EQUAL
9720: IFFALSE 9828
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
9722: LD_ADDR_VAR 0 10
9726: PUSH
9727: LD_VAR 0 9
9731: PUSH
9732: LD_VAR 0 9
9736: PUSH
9737: LD_INT 1
9739: PLUS
9740: PUSH
9741: LD_VAR 0 9
9745: PUSH
9746: LD_INT 1
9748: MINUS
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: LIST
9754: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
9755: LD_VAR 0 10
9759: PUSH
9760: LD_INT 2
9762: ARRAY
9763: PUSH
9764: LD_INT 6
9766: EQUAL
9767: IFFALSE 9790
// dir_list = Replace ( dir_list , 2 , 0 ) ;
9769: LD_ADDR_VAR 0 10
9773: PUSH
9774: LD_VAR 0 10
9778: PPUSH
9779: LD_INT 2
9781: PPUSH
9782: LD_INT 0
9784: PPUSH
9785: CALL_OW 1
9789: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
9790: LD_VAR 0 10
9794: PUSH
9795: LD_INT 3
9797: ARRAY
9798: PUSH
9799: LD_INT 1
9801: NEG
9802: EQUAL
9803: IFFALSE 9826
// dir_list = Replace ( dir_list , 3 , 5 ) ;
9805: LD_ADDR_VAR 0 10
9809: PUSH
9810: LD_VAR 0 10
9814: PPUSH
9815: LD_INT 3
9817: PPUSH
9818: LD_INT 5
9820: PPUSH
9821: CALL_OW 1
9825: ST_TO_ADDR
// end else
9826: GO 9865
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
9828: LD_ADDR_VAR 0 10
9832: PUSH
9833: LD_INT 0
9835: PUSH
9836: LD_INT 1
9838: PUSH
9839: LD_INT 2
9841: PUSH
9842: LD_INT 3
9844: PUSH
9845: LD_INT 4
9847: PUSH
9848: LD_INT 5
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: PUSH
9859: LD_VAR 0 9
9863: DIFF
9864: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
9865: LD_ADDR_VAR 0 14
9869: PUSH
9870: DOUBLE
9871: LD_INT 1
9873: DEC
9874: ST_TO_ADDR
9875: LD_VAR 0 10
9879: PUSH
9880: LD_INT 0
9882: PLUS
9883: PUSH
9884: FOR_TO
9885: IFFALSE 10207
// case dir_list [ c ] of 0 :
9887: LD_VAR 0 10
9891: PUSH
9892: LD_VAR 0 14
9896: ARRAY
9897: PUSH
9898: LD_INT 0
9900: DOUBLE
9901: EQUAL
9902: IFTRUE 9906
9904: GO 9947
9906: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
9907: LD_ADDR_VAR 0 8
9911: PUSH
9912: LD_VAR 0 8
9916: PPUSH
9917: LD_INT 1
9919: PPUSH
9920: LD_VAR 0 2
9924: PUSH
9925: LD_VAR 0 3
9929: PUSH
9930: LD_VAR 0 4
9934: MINUS
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: PPUSH
9940: CALL_OW 2
9944: ST_TO_ADDR
9945: GO 10205
9947: LD_INT 1
9949: DOUBLE
9950: EQUAL
9951: IFTRUE 9955
9953: GO 9996
9955: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
9956: LD_ADDR_VAR 0 8
9960: PUSH
9961: LD_VAR 0 8
9965: PPUSH
9966: LD_INT 1
9968: PPUSH
9969: LD_VAR 0 2
9973: PUSH
9974: LD_VAR 0 4
9978: PLUS
9979: PUSH
9980: LD_VAR 0 3
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PPUSH
9989: CALL_OW 2
9993: ST_TO_ADDR
9994: GO 10205
9996: LD_INT 2
9998: DOUBLE
9999: EQUAL
10000: IFTRUE 10004
10002: GO 10051
10004: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
10005: LD_ADDR_VAR 0 8
10009: PUSH
10010: LD_VAR 0 8
10014: PPUSH
10015: LD_INT 1
10017: PPUSH
10018: LD_VAR 0 2
10022: PUSH
10023: LD_VAR 0 4
10027: PLUS
10028: PUSH
10029: LD_VAR 0 3
10033: PUSH
10034: LD_VAR 0 4
10038: PLUS
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PPUSH
10044: CALL_OW 2
10048: ST_TO_ADDR
10049: GO 10205
10051: LD_INT 3
10053: DOUBLE
10054: EQUAL
10055: IFTRUE 10059
10057: GO 10100
10059: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
10060: LD_ADDR_VAR 0 8
10064: PUSH
10065: LD_VAR 0 8
10069: PPUSH
10070: LD_INT 1
10072: PPUSH
10073: LD_VAR 0 2
10077: PUSH
10078: LD_VAR 0 3
10082: PUSH
10083: LD_VAR 0 4
10087: PLUS
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: PPUSH
10093: CALL_OW 2
10097: ST_TO_ADDR
10098: GO 10205
10100: LD_INT 4
10102: DOUBLE
10103: EQUAL
10104: IFTRUE 10108
10106: GO 10149
10108: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
10109: LD_ADDR_VAR 0 8
10113: PUSH
10114: LD_VAR 0 8
10118: PPUSH
10119: LD_INT 1
10121: PPUSH
10122: LD_VAR 0 2
10126: PUSH
10127: LD_VAR 0 4
10131: MINUS
10132: PUSH
10133: LD_VAR 0 3
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PPUSH
10142: CALL_OW 2
10146: ST_TO_ADDR
10147: GO 10205
10149: LD_INT 5
10151: DOUBLE
10152: EQUAL
10153: IFTRUE 10157
10155: GO 10204
10157: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
10158: LD_ADDR_VAR 0 8
10162: PUSH
10163: LD_VAR 0 8
10167: PPUSH
10168: LD_INT 1
10170: PPUSH
10171: LD_VAR 0 2
10175: PUSH
10176: LD_VAR 0 4
10180: MINUS
10181: PUSH
10182: LD_VAR 0 3
10186: PUSH
10187: LD_VAR 0 4
10191: MINUS
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PPUSH
10197: CALL_OW 2
10201: ST_TO_ADDR
10202: GO 10205
10204: POP
10205: GO 9884
10207: POP
10208: POP
// if dist < 30 then
10209: LD_VAR 0 4
10213: PUSH
10214: LD_INT 30
10216: LESS
10217: IFFALSE 10229
// c = 1 else
10219: LD_ADDR_VAR 0 14
10223: PUSH
10224: LD_INT 1
10226: ST_TO_ADDR
10227: GO 10237
// c = 2 ;
10229: LD_ADDR_VAR 0 14
10233: PUSH
10234: LD_INT 2
10236: ST_TO_ADDR
// b = 1 ;
10237: LD_ADDR_VAR 0 11
10241: PUSH
10242: LD_INT 1
10244: ST_TO_ADDR
// while b <= ( dist - 1 ) do
10245: LD_VAR 0 11
10249: PUSH
10250: LD_VAR 0 4
10254: PUSH
10255: LD_INT 1
10257: MINUS
10258: LESSEQUAL
10259: IFFALSE 10687
// begin if 0 in dir_list and 1 in dir_list then
10261: LD_INT 0
10263: PUSH
10264: LD_VAR 0 10
10268: IN
10269: PUSH
10270: LD_INT 1
10272: PUSH
10273: LD_VAR 0 10
10277: IN
10278: AND
10279: IFFALSE 10331
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
10281: LD_ADDR_VAR 0 8
10285: PUSH
10286: LD_VAR 0 8
10290: PPUSH
10291: LD_INT 1
10293: PPUSH
10294: LD_VAR 0 2
10298: PUSH
10299: LD_VAR 0 11
10303: PLUS
10304: PUSH
10305: LD_VAR 0 3
10309: PUSH
10310: LD_VAR 0 4
10314: MINUS
10315: PUSH
10316: LD_VAR 0 11
10320: PLUS
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PPUSH
10326: CALL_OW 2
10330: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
10331: LD_INT 1
10333: PUSH
10334: LD_VAR 0 10
10338: IN
10339: PUSH
10340: LD_INT 2
10342: PUSH
10343: LD_VAR 0 10
10347: IN
10348: AND
10349: IFFALSE 10395
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
10351: LD_ADDR_VAR 0 8
10355: PUSH
10356: LD_VAR 0 8
10360: PPUSH
10361: LD_INT 1
10363: PPUSH
10364: LD_VAR 0 2
10368: PUSH
10369: LD_VAR 0 4
10373: PLUS
10374: PUSH
10375: LD_VAR 0 3
10379: PUSH
10380: LD_VAR 0 11
10384: PLUS
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PPUSH
10390: CALL_OW 2
10394: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
10395: LD_INT 2
10397: PUSH
10398: LD_VAR 0 10
10402: IN
10403: PUSH
10404: LD_INT 3
10406: PUSH
10407: LD_VAR 0 10
10411: IN
10412: AND
10413: IFFALSE 10465
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
10415: LD_ADDR_VAR 0 8
10419: PUSH
10420: LD_VAR 0 8
10424: PPUSH
10425: LD_INT 1
10427: PPUSH
10428: LD_VAR 0 2
10432: PUSH
10433: LD_VAR 0 4
10437: PLUS
10438: PUSH
10439: LD_VAR 0 11
10443: MINUS
10444: PUSH
10445: LD_VAR 0 3
10449: PUSH
10450: LD_VAR 0 4
10454: PLUS
10455: PUSH
10456: EMPTY
10457: LIST
10458: LIST
10459: PPUSH
10460: CALL_OW 2
10464: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
10465: LD_INT 3
10467: PUSH
10468: LD_VAR 0 10
10472: IN
10473: PUSH
10474: LD_INT 4
10476: PUSH
10477: LD_VAR 0 10
10481: IN
10482: AND
10483: IFFALSE 10535
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
10485: LD_ADDR_VAR 0 8
10489: PUSH
10490: LD_VAR 0 8
10494: PPUSH
10495: LD_INT 1
10497: PPUSH
10498: LD_VAR 0 2
10502: PUSH
10503: LD_VAR 0 11
10507: MINUS
10508: PUSH
10509: LD_VAR 0 3
10513: PUSH
10514: LD_VAR 0 4
10518: PLUS
10519: PUSH
10520: LD_VAR 0 11
10524: MINUS
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PPUSH
10530: CALL_OW 2
10534: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
10535: LD_INT 4
10537: PUSH
10538: LD_VAR 0 10
10542: IN
10543: PUSH
10544: LD_INT 5
10546: PUSH
10547: LD_VAR 0 10
10551: IN
10552: AND
10553: IFFALSE 10599
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
10555: LD_ADDR_VAR 0 8
10559: PUSH
10560: LD_VAR 0 8
10564: PPUSH
10565: LD_INT 1
10567: PPUSH
10568: LD_VAR 0 2
10572: PUSH
10573: LD_VAR 0 4
10577: MINUS
10578: PUSH
10579: LD_VAR 0 3
10583: PUSH
10584: LD_VAR 0 11
10588: MINUS
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PPUSH
10594: CALL_OW 2
10598: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
10599: LD_INT 5
10601: PUSH
10602: LD_VAR 0 10
10606: IN
10607: PUSH
10608: LD_INT 0
10610: PUSH
10611: LD_VAR 0 10
10615: IN
10616: AND
10617: IFFALSE 10669
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
10619: LD_ADDR_VAR 0 8
10623: PUSH
10624: LD_VAR 0 8
10628: PPUSH
10629: LD_INT 1
10631: PPUSH
10632: LD_VAR 0 2
10636: PUSH
10637: LD_VAR 0 4
10641: MINUS
10642: PUSH
10643: LD_VAR 0 11
10647: PLUS
10648: PUSH
10649: LD_VAR 0 3
10653: PUSH
10654: LD_VAR 0 4
10658: MINUS
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PPUSH
10664: CALL_OW 2
10668: ST_TO_ADDR
// b = b + c end ;
10669: LD_ADDR_VAR 0 11
10673: PUSH
10674: LD_VAR 0 11
10678: PUSH
10679: LD_VAR 0 14
10683: PLUS
10684: ST_TO_ADDR
10685: GO 10245
// if list_coords = 0 then
10687: LD_VAR 0 8
10691: PUSH
10692: LD_INT 0
10694: EQUAL
10695: IFFALSE 10699
// exit ;
10697: GO 11207
// repeat min_dist = 5000 ;
10699: LD_ADDR_VAR 0 12
10703: PUSH
10704: LD_INT 5000
10706: ST_TO_ADDR
// for b in list_coords do
10707: LD_ADDR_VAR 0 11
10711: PUSH
10712: LD_VAR 0 8
10716: PUSH
10717: FOR_IN
10718: IFFALSE 10777
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
10720: LD_ADDR_VAR 0 13
10724: PUSH
10725: LD_VAR 0 1
10729: PPUSH
10730: LD_VAR 0 11
10734: PUSH
10735: LD_INT 1
10737: ARRAY
10738: PPUSH
10739: LD_VAR 0 11
10743: PUSH
10744: LD_INT 2
10746: ARRAY
10747: PPUSH
10748: CALL_OW 297
10752: ST_TO_ADDR
// if temp_dist < min_dist then
10753: LD_VAR 0 13
10757: PUSH
10758: LD_VAR 0 12
10762: LESS
10763: IFFALSE 10775
// min_dist = temp_dist ;
10765: LD_ADDR_VAR 0 12
10769: PUSH
10770: LD_VAR 0 13
10774: ST_TO_ADDR
// end ;
10775: GO 10717
10777: POP
10778: POP
// c = 0 ;
10779: LD_ADDR_VAR 0 14
10783: PUSH
10784: LD_INT 0
10786: ST_TO_ADDR
// repeat c = c + 1 ;
10787: LD_ADDR_VAR 0 14
10791: PUSH
10792: LD_VAR 0 14
10796: PUSH
10797: LD_INT 1
10799: PLUS
10800: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
10801: LD_VAR 0 1
10805: PPUSH
10806: LD_VAR 0 8
10810: PUSH
10811: LD_VAR 0 14
10815: ARRAY
10816: PUSH
10817: LD_INT 1
10819: ARRAY
10820: PPUSH
10821: LD_VAR 0 8
10825: PUSH
10826: LD_VAR 0 14
10830: ARRAY
10831: PUSH
10832: LD_INT 2
10834: ARRAY
10835: PPUSH
10836: CALL_OW 297
10840: PUSH
10841: LD_VAR 0 12
10845: EQUAL
10846: IFFALSE 10911
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
10848: LD_ADDR_VAR 0 7
10852: PUSH
10853: LD_VAR 0 7
10857: PPUSH
10858: LD_INT 1
10860: PPUSH
10861: LD_VAR 0 8
10865: PUSH
10866: LD_VAR 0 14
10870: ARRAY
10871: PPUSH
10872: CALL_OW 2
10876: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
10877: LD_ADDR_VAR 0 8
10881: PUSH
10882: LD_VAR 0 8
10886: PPUSH
10887: LD_VAR 0 14
10891: PPUSH
10892: CALL_OW 3
10896: ST_TO_ADDR
// c = c - 1 ;
10897: LD_ADDR_VAR 0 14
10901: PUSH
10902: LD_VAR 0 14
10906: PUSH
10907: LD_INT 1
10909: MINUS
10910: ST_TO_ADDR
// end ; until c = list_coords ;
10911: LD_VAR 0 14
10915: PUSH
10916: LD_VAR 0 8
10920: EQUAL
10921: IFFALSE 10787
// c = 0 ;
10923: LD_ADDR_VAR 0 14
10927: PUSH
10928: LD_INT 0
10930: ST_TO_ADDR
// if list_nearest > 0 then
10931: LD_VAR 0 7
10935: PUSH
10936: LD_INT 0
10938: GREATER
10939: IFFALSE 11081
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
10941: LD_ADDR_VAR 0 15
10945: PUSH
10946: LD_INT 1
10948: PPUSH
10949: LD_VAR 0 7
10953: PPUSH
10954: CALL_OW 12
10958: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
10959: LD_ADDR_VAR 0 16
10963: PUSH
10964: LD_VAR 0 7
10968: PUSH
10969: LD_VAR 0 15
10973: ARRAY
10974: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
10975: LD_VAR 0 16
10979: PUSH
10980: LD_INT 1
10982: ARRAY
10983: PPUSH
10984: LD_VAR 0 16
10988: PUSH
10989: LD_INT 2
10991: ARRAY
10992: PPUSH
10993: CALL_OW 488
10997: PUSH
10998: LD_INT 0
11000: GREATER
11001: PUSH
11002: LD_VAR 0 16
11006: PUSH
11007: LD_INT 1
11009: ARRAY
11010: PPUSH
11011: LD_VAR 0 16
11015: PUSH
11016: LD_INT 2
11018: ARRAY
11019: PPUSH
11020: CALL_OW 428
11024: PUSH
11025: LD_INT 0
11027: EQUAL
11028: AND
11029: IFFALSE 11041
// c = 1 else
11031: LD_ADDR_VAR 0 14
11035: PUSH
11036: LD_INT 1
11038: ST_TO_ADDR
11039: GO 11061
// list_nearest = Delete ( list_nearest , rand_num ) ;
11041: LD_ADDR_VAR 0 7
11045: PUSH
11046: LD_VAR 0 7
11050: PPUSH
11051: LD_VAR 0 15
11055: PPUSH
11056: CALL_OW 3
11060: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
11061: LD_VAR 0 14
11065: PUSH
11066: LD_INT 1
11068: EQUAL
11069: PUSH
11070: LD_VAR 0 7
11074: PUSH
11075: LD_INT 0
11077: EQUAL
11078: OR
11079: IFFALSE 10941
// end ; until c = 1 or list_coords = 0 ;
11081: LD_VAR 0 14
11085: PUSH
11086: LD_INT 1
11088: EQUAL
11089: PUSH
11090: LD_VAR 0 8
11094: PUSH
11095: LD_INT 0
11097: EQUAL
11098: OR
11099: IFFALSE 10699
// attempts = attempts + 1 ;
11101: LD_ADDR_VAR 0 17
11105: PUSH
11106: LD_VAR 0 17
11110: PUSH
11111: LD_INT 1
11113: PLUS
11114: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
11115: LD_VAR 0 14
11119: PUSH
11120: LD_INT 1
11122: EQUAL
11123: PUSH
11124: LD_VAR 0 17
11128: PUSH
11129: LD_INT 1
11131: GREATER
11132: OR
11133: IFFALSE 9658
// if c = 1 then
11135: LD_VAR 0 14
11139: PUSH
11140: LD_INT 1
11142: EQUAL
11143: IFFALSE 11207
// if add then
11145: LD_VAR 0 5
11149: IFFALSE 11180
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
11151: LD_VAR 0 1
11155: PPUSH
11156: LD_VAR 0 16
11160: PUSH
11161: LD_INT 1
11163: ARRAY
11164: PPUSH
11165: LD_VAR 0 16
11169: PUSH
11170: LD_INT 2
11172: ARRAY
11173: PPUSH
11174: CALL_OW 171
11178: GO 11207
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
11180: LD_VAR 0 1
11184: PPUSH
11185: LD_VAR 0 16
11189: PUSH
11190: LD_INT 1
11192: ARRAY
11193: PPUSH
11194: LD_VAR 0 16
11198: PUSH
11199: LD_INT 2
11201: ARRAY
11202: PPUSH
11203: CALL_OW 111
// end ;
11207: LD_VAR 0 6
11211: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
11212: LD_INT 0
11214: PPUSH
11215: PPUSH
11216: PPUSH
11217: PPUSH
11218: PPUSH
11219: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
11220: LD_VAR 0 1
11224: PPUSH
11225: LD_VAR 0 2
11229: PPUSH
11230: CALL_OW 488
11234: NOT
11235: PUSH
11236: LD_VAR 0 3
11240: PPUSH
11241: LD_VAR 0 4
11245: PPUSH
11246: CALL_OW 488
11250: NOT
11251: OR
11252: IFFALSE 11265
// begin result = - 1 ;
11254: LD_ADDR_VAR 0 5
11258: PUSH
11259: LD_INT 1
11261: NEG
11262: ST_TO_ADDR
// exit ;
11263: GO 11425
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
11265: LD_ADDR_VAR 0 6
11269: PUSH
11270: LD_VAR 0 1
11274: PPUSH
11275: LD_VAR 0 2
11279: PPUSH
11280: LD_VAR 0 3
11284: PPUSH
11285: LD_VAR 0 4
11289: PPUSH
11290: CALL_OW 298
11294: ST_TO_ADDR
// dist_2 = 99999 ;
11295: LD_ADDR_VAR 0 7
11299: PUSH
11300: LD_INT 99999
11302: ST_TO_ADDR
// for b = 0 to 5 do
11303: LD_ADDR_VAR 0 8
11307: PUSH
11308: DOUBLE
11309: LD_INT 0
11311: DEC
11312: ST_TO_ADDR
11313: LD_INT 5
11315: PUSH
11316: FOR_TO
11317: IFFALSE 11413
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
11319: LD_ADDR_VAR 0 9
11323: PUSH
11324: LD_VAR 0 1
11328: PPUSH
11329: LD_VAR 0 8
11333: PPUSH
11334: LD_VAR 0 6
11338: PPUSH
11339: CALL_OW 272
11343: PPUSH
11344: LD_VAR 0 2
11348: PPUSH
11349: LD_VAR 0 8
11353: PPUSH
11354: LD_VAR 0 6
11358: PPUSH
11359: CALL_OW 273
11363: PPUSH
11364: LD_VAR 0 3
11368: PPUSH
11369: LD_VAR 0 4
11373: PPUSH
11374: CALL_OW 298
11378: ST_TO_ADDR
// if temp_dist < dist_2 then
11379: LD_VAR 0 9
11383: PUSH
11384: LD_VAR 0 7
11388: LESS
11389: IFFALSE 11411
// begin dist_2 = temp_dist ;
11391: LD_ADDR_VAR 0 7
11395: PUSH
11396: LD_VAR 0 9
11400: ST_TO_ADDR
// dir = b ;
11401: LD_ADDR_VAR 0 10
11405: PUSH
11406: LD_VAR 0 8
11410: ST_TO_ADDR
// end ; end ;
11411: GO 11316
11413: POP
11414: POP
// result = dir ;
11415: LD_ADDR_VAR 0 5
11419: PUSH
11420: LD_VAR 0 10
11424: ST_TO_ADDR
// end ; end_of_file
11425: LD_VAR 0 5
11429: RET
// every 0 0$1 do
11430: GO 11432
11432: DISABLE
// MC_Start ;
11433: CALL 24775 0 0
11437: END
// export function CustomInitMacro ; begin
11438: LD_INT 0
11440: PPUSH
// MC_SetParkingArea ( 1 , OmicronParkingArea ) ;
11441: LD_INT 1
11443: PPUSH
11444: LD_INT 17
11446: PPUSH
11447: CALL 47559 0 2
// case Difficulty of 1 :
11451: LD_OWVAR 67
11455: PUSH
11456: LD_INT 1
11458: DOUBLE
11459: EQUAL
11460: IFTRUE 11464
11462: GO 11533
11464: POP
// MC_SetProduceList ( 1 , [ [ us_medium_tracked , engine_combustion , control_manual , us_machine_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] ] ) ; 2 :
11465: LD_INT 1
11467: PPUSH
11468: LD_INT 3
11470: PUSH
11471: LD_INT 1
11473: PUSH
11474: LD_INT 1
11476: PUSH
11477: LD_INT 2
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: PUSH
11486: LD_INT 3
11488: PUSH
11489: LD_INT 1
11491: PUSH
11492: LD_INT 1
11494: PUSH
11495: LD_INT 4
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: PUSH
11504: LD_INT 3
11506: PUSH
11507: LD_INT 1
11509: PUSH
11510: LD_INT 1
11512: PUSH
11513: LD_INT 4
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: LIST
11526: PPUSH
11527: CALL 46294 0 2
11531: GO 11688
11533: LD_INT 2
11535: DOUBLE
11536: EQUAL
11537: IFTRUE 11541
11539: GO 11610
11541: POP
// MC_SetProduceList ( 1 , [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] ] ) ; 3 :
11542: LD_INT 1
11544: PPUSH
11545: LD_INT 3
11547: PUSH
11548: LD_INT 1
11550: PUSH
11551: LD_INT 1
11553: PUSH
11554: LD_INT 4
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: PUSH
11563: LD_INT 3
11565: PUSH
11566: LD_INT 1
11568: PUSH
11569: LD_INT 1
11571: PUSH
11572: LD_INT 4
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 3
11583: PUSH
11584: LD_INT 1
11586: PUSH
11587: LD_INT 1
11589: PUSH
11590: LD_INT 4
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: LIST
11603: PPUSH
11604: CALL 46294 0 2
11608: GO 11688
11610: LD_INT 3
11612: DOUBLE
11613: EQUAL
11614: IFTRUE 11618
11616: GO 11687
11618: POP
// MC_SetProduceList ( 1 , [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] ] ) ; end ;
11619: LD_INT 1
11621: PPUSH
11622: LD_INT 3
11624: PUSH
11625: LD_INT 1
11627: PUSH
11628: LD_INT 1
11630: PUSH
11631: LD_INT 4
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 3
11642: PUSH
11643: LD_INT 1
11645: PUSH
11646: LD_INT 1
11648: PUSH
11649: LD_INT 4
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: PUSH
11658: LD_INT 3
11660: PUSH
11661: LD_INT 1
11663: PUSH
11664: LD_INT 1
11666: PUSH
11667: LD_INT 4
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: LIST
11680: PPUSH
11681: CALL 46294 0 2
11685: GO 11688
11687: POP
// end ;
11688: LD_VAR 0 1
11692: RET
// export function MountWeaponTurrent ; var turret , weapons ; begin
11693: LD_INT 0
11695: PPUSH
11696: PPUSH
11697: PPUSH
// weapons = [ ru_gatling_gun , ru_gun ] ;
11698: LD_ADDR_VAR 0 3
11702: PUSH
11703: LD_INT 43
11705: PUSH
11706: LD_INT 44
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: ST_TO_ADDR
// for turret in kirovBunkersToMountWeapon do
11713: LD_ADDR_VAR 0 2
11717: PUSH
11718: LD_EXP 69
11722: PUSH
11723: FOR_IN
11724: IFFALSE 11756
// AddComPlaceWeapon ( turret , weapons [ rand ( 1 , weapons ) ] ) ;
11726: LD_VAR 0 2
11730: PPUSH
11731: LD_VAR 0 3
11735: PUSH
11736: LD_INT 1
11738: PPUSH
11739: LD_VAR 0 3
11743: PPUSH
11744: CALL_OW 12
11748: ARRAY
11749: PPUSH
11750: CALL_OW 208
11754: GO 11723
11756: POP
11757: POP
// end ;
11758: LD_VAR 0 1
11762: RET
// export function KirovProduceVehicles ( factory ) ; begin
11763: LD_INT 0
11765: PPUSH
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
11766: LD_VAR 0 1
11770: PPUSH
11771: LD_INT 21
11773: PPUSH
11774: LD_INT 1
11776: PPUSH
11777: LD_INT 1
11779: PPUSH
11780: LD_INT 51
11782: PPUSH
11783: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
11787: LD_VAR 0 1
11791: PPUSH
11792: LD_INT 21
11794: PPUSH
11795: LD_INT 1
11797: PPUSH
11798: LD_INT 1
11800: PPUSH
11801: LD_INT 51
11803: PPUSH
11804: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
11808: LD_VAR 0 1
11812: PPUSH
11813: LD_INT 21
11815: PPUSH
11816: LD_INT 1
11818: PPUSH
11819: LD_INT 1
11821: PPUSH
11822: LD_INT 51
11824: PPUSH
11825: CALL_OW 185
// case Difficulty of 1 :
11829: LD_OWVAR 67
11833: PUSH
11834: LD_INT 1
11836: DOUBLE
11837: EQUAL
11838: IFTRUE 11842
11840: GO 11965
11842: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
11843: LD_VAR 0 1
11847: PPUSH
11848: LD_INT 21
11850: PUSH
11851: LD_INT 23
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PUSH
11858: LD_INT 1
11860: PPUSH
11861: LD_INT 2
11863: PPUSH
11864: CALL_OW 12
11868: ARRAY
11869: PPUSH
11870: LD_INT 1
11872: PPUSH
11873: LD_INT 1
11875: PPUSH
11876: LD_INT 43
11878: PPUSH
11879: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
11883: LD_VAR 0 1
11887: PPUSH
11888: LD_INT 21
11890: PUSH
11891: LD_INT 23
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PUSH
11898: LD_INT 1
11900: PPUSH
11901: LD_INT 2
11903: PPUSH
11904: CALL_OW 12
11908: ARRAY
11909: PPUSH
11910: LD_INT 1
11912: PPUSH
11913: LD_INT 1
11915: PPUSH
11916: LD_INT 43
11918: PPUSH
11919: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
11923: LD_VAR 0 1
11927: PPUSH
11928: LD_INT 21
11930: PUSH
11931: LD_INT 23
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: LD_INT 1
11940: PPUSH
11941: LD_INT 2
11943: PPUSH
11944: CALL_OW 12
11948: ARRAY
11949: PPUSH
11950: LD_INT 1
11952: PPUSH
11953: LD_INT 1
11955: PPUSH
11956: LD_INT 44
11958: PPUSH
11959: CALL_OW 185
// end ; 2 :
11963: GO 12228
11965: LD_INT 2
11967: DOUBLE
11968: EQUAL
11969: IFTRUE 11973
11971: GO 12096
11973: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
11974: LD_VAR 0 1
11978: PPUSH
11979: LD_INT 21
11981: PUSH
11982: LD_INT 23
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 1
11991: PPUSH
11992: LD_INT 2
11994: PPUSH
11995: CALL_OW 12
11999: ARRAY
12000: PPUSH
12001: LD_INT 1
12003: PPUSH
12004: LD_INT 1
12006: PPUSH
12007: LD_INT 42
12009: PPUSH
12010: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
12014: LD_VAR 0 1
12018: PPUSH
12019: LD_INT 21
12021: PUSH
12022: LD_INT 23
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: LD_INT 1
12031: PPUSH
12032: LD_INT 2
12034: PPUSH
12035: CALL_OW 12
12039: ARRAY
12040: PPUSH
12041: LD_INT 1
12043: PPUSH
12044: LD_INT 1
12046: PPUSH
12047: LD_INT 43
12049: PPUSH
12050: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
12054: LD_VAR 0 1
12058: PPUSH
12059: LD_INT 21
12061: PUSH
12062: LD_INT 23
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: PUSH
12069: LD_INT 1
12071: PPUSH
12072: LD_INT 2
12074: PPUSH
12075: CALL_OW 12
12079: ARRAY
12080: PPUSH
12081: LD_INT 1
12083: PPUSH
12084: LD_INT 1
12086: PPUSH
12087: LD_INT 43
12089: PPUSH
12090: CALL_OW 185
// end ; 3 :
12094: GO 12228
12096: LD_INT 3
12098: DOUBLE
12099: EQUAL
12100: IFTRUE 12104
12102: GO 12227
12104: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
12105: LD_VAR 0 1
12109: PPUSH
12110: LD_INT 21
12112: PUSH
12113: LD_INT 23
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: LD_INT 1
12122: PPUSH
12123: LD_INT 2
12125: PPUSH
12126: CALL_OW 12
12130: ARRAY
12131: PPUSH
12132: LD_INT 1
12134: PPUSH
12135: LD_INT 1
12137: PPUSH
12138: LD_INT 42
12140: PPUSH
12141: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
12145: LD_VAR 0 1
12149: PPUSH
12150: LD_INT 21
12152: PUSH
12153: LD_INT 23
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: LD_INT 1
12162: PPUSH
12163: LD_INT 2
12165: PPUSH
12166: CALL_OW 12
12170: ARRAY
12171: PPUSH
12172: LD_INT 1
12174: PPUSH
12175: LD_INT 1
12177: PPUSH
12178: LD_INT 42
12180: PPUSH
12181: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
12185: LD_VAR 0 1
12189: PPUSH
12190: LD_INT 21
12192: PUSH
12193: LD_INT 23
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: LD_INT 1
12202: PPUSH
12203: LD_INT 2
12205: PPUSH
12206: CALL_OW 12
12210: ARRAY
12211: PPUSH
12212: LD_INT 1
12214: PPUSH
12215: LD_INT 1
12217: PPUSH
12218: LD_INT 43
12220: PPUSH
12221: CALL_OW 185
// end ; end ;
12225: GO 12228
12227: POP
// end ;
12228: LD_VAR 0 2
12232: RET
// export function KirovAttackOmicron ; var i , vehicles , vehicle , goodVehs ; begin
12233: LD_INT 0
12235: PPUSH
12236: PPUSH
12237: PPUSH
12238: PPUSH
12239: PPUSH
// vehicles = [ ] ;
12240: LD_ADDR_VAR 0 3
12244: PUSH
12245: EMPTY
12246: ST_TO_ADDR
// for vehicle in kirovAttackVehicles do
12247: LD_ADDR_VAR 0 4
12251: PUSH
12252: LD_EXP 73
12256: PUSH
12257: FOR_IN
12258: IFFALSE 12307
// vehicles = Insert ( vehicles , 1 , [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 1 ] ) ;
12260: LD_ADDR_VAR 0 3
12264: PUSH
12265: LD_VAR 0 3
12269: PPUSH
12270: LD_INT 1
12272: PPUSH
12273: LD_VAR 0 4
12277: PUSH
12278: LD_VAR 0 4
12282: PPUSH
12283: CALL_OW 313
12287: PUSH
12288: LD_INT 1
12290: ARRAY
12291: PUSH
12292: LD_INT 1
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: PPUSH
12300: CALL_OW 2
12304: ST_TO_ADDR
12305: GO 12257
12307: POP
12308: POP
// repeat for i := 1 to vehicles do
12309: LD_ADDR_VAR 0 2
12313: PUSH
12314: DOUBLE
12315: LD_INT 1
12317: DEC
12318: ST_TO_ADDR
12319: LD_VAR 0 3
12323: PUSH
12324: FOR_TO
12325: IFFALSE 12363
// if vehicles [ i ] [ 3 ] = 1 then
12327: LD_VAR 0 3
12331: PUSH
12332: LD_VAR 0 2
12336: ARRAY
12337: PUSH
12338: LD_INT 3
12340: ARRAY
12341: PUSH
12342: LD_INT 1
12344: EQUAL
12345: IFFALSE 12361
// goodVehs = goodVehs + 1 ;
12347: LD_ADDR_VAR 0 5
12351: PUSH
12352: LD_VAR 0 5
12356: PUSH
12357: LD_INT 1
12359: PLUS
12360: ST_TO_ADDR
12361: GO 12324
12363: POP
12364: POP
// if goodVehs = vehicles then
12365: LD_VAR 0 5
12369: PUSH
12370: LD_VAR 0 3
12374: EQUAL
12375: IFFALSE 12424
// for i := 1 to vehicles do
12377: LD_ADDR_VAR 0 2
12381: PUSH
12382: DOUBLE
12383: LD_INT 1
12385: DEC
12386: ST_TO_ADDR
12387: LD_VAR 0 3
12391: PUSH
12392: FOR_TO
12393: IFFALSE 12422
// ComAgressiveMove ( vehicles [ i ] [ 1 ] , 26 , 35 ) ;
12395: LD_VAR 0 3
12399: PUSH
12400: LD_VAR 0 2
12404: ARRAY
12405: PUSH
12406: LD_INT 1
12408: ARRAY
12409: PPUSH
12410: LD_INT 26
12412: PPUSH
12413: LD_INT 35
12415: PPUSH
12416: CALL_OW 114
12420: GO 12392
12422: POP
12423: POP
// goodVehs = 0 ;
12424: LD_ADDR_VAR 0 5
12428: PUSH
12429: LD_INT 0
12431: ST_TO_ADDR
// for i := 1 to vehicles do
12432: LD_ADDR_VAR 0 2
12436: PUSH
12437: DOUBLE
12438: LD_INT 1
12440: DEC
12441: ST_TO_ADDR
12442: LD_VAR 0 3
12446: PUSH
12447: FOR_TO
12448: IFFALSE 12848
// begin if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and not GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
12450: LD_VAR 0 3
12454: PUSH
12455: LD_VAR 0 2
12459: ARRAY
12460: PUSH
12461: LD_INT 1
12463: ARRAY
12464: PPUSH
12465: CALL_OW 256
12469: PUSH
12470: LD_INT 500
12472: LESS
12473: PUSH
12474: LD_VAR 0 3
12478: PUSH
12479: LD_VAR 0 2
12483: ARRAY
12484: PUSH
12485: LD_INT 1
12487: ARRAY
12488: PPUSH
12489: LD_INT 78
12491: PPUSH
12492: LD_INT 39
12494: PPUSH
12495: CALL_OW 297
12499: PUSH
12500: LD_INT 9
12502: LESS
12503: NOT
12504: AND
12505: IFFALSE 12570
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
12507: LD_ADDR_VAR 0 3
12511: PUSH
12512: LD_VAR 0 3
12516: PPUSH
12517: LD_VAR 0 2
12521: PUSH
12522: LD_VAR 0 3
12526: PUSH
12527: LD_VAR 0 2
12531: ARRAY
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PPUSH
12537: LD_INT 2
12539: PPUSH
12540: CALL 52899 0 3
12544: ST_TO_ADDR
// ComMoveXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) ;
12545: LD_VAR 0 3
12549: PUSH
12550: LD_VAR 0 2
12554: ARRAY
12555: PUSH
12556: LD_INT 1
12558: ARRAY
12559: PPUSH
12560: LD_INT 78
12562: PPUSH
12563: LD_INT 39
12565: PPUSH
12566: CALL_OW 111
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
12570: LD_VAR 0 3
12574: PUSH
12575: LD_VAR 0 2
12579: ARRAY
12580: PUSH
12581: LD_INT 1
12583: ARRAY
12584: PPUSH
12585: CALL_OW 256
12589: PUSH
12590: LD_INT 500
12592: LESS
12593: PUSH
12594: LD_VAR 0 3
12598: PUSH
12599: LD_VAR 0 2
12603: ARRAY
12604: PUSH
12605: LD_INT 1
12607: ARRAY
12608: PPUSH
12609: LD_INT 78
12611: PPUSH
12612: LD_INT 39
12614: PPUSH
12615: CALL_OW 297
12619: PUSH
12620: LD_INT 9
12622: LESS
12623: AND
12624: IFFALSE 12679
// begin AddComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
12626: LD_VAR 0 3
12630: PUSH
12631: LD_VAR 0 2
12635: ARRAY
12636: PUSH
12637: LD_INT 2
12639: ARRAY
12640: PPUSH
12641: CALL_OW 181
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
12645: LD_VAR 0 3
12649: PUSH
12650: LD_VAR 0 2
12654: ARRAY
12655: PUSH
12656: LD_INT 2
12658: ARRAY
12659: PPUSH
12660: LD_VAR 0 3
12664: PUSH
12665: LD_VAR 0 2
12669: ARRAY
12670: PUSH
12671: LD_INT 1
12673: ARRAY
12674: PPUSH
12675: CALL_OW 189
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 and vehicles [ i ] [ 3 ] = 2 then
12679: LD_VAR 0 3
12683: PUSH
12684: LD_VAR 0 2
12688: ARRAY
12689: PUSH
12690: LD_INT 1
12692: ARRAY
12693: PPUSH
12694: CALL_OW 256
12698: PUSH
12699: LD_INT 1000
12701: EQUAL
12702: PUSH
12703: LD_VAR 0 3
12707: PUSH
12708: LD_VAR 0 2
12712: ARRAY
12713: PUSH
12714: LD_INT 3
12716: ARRAY
12717: PUSH
12718: LD_INT 2
12720: EQUAL
12721: AND
12722: IFFALSE 12796
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) ;
12724: LD_ADDR_VAR 0 3
12728: PUSH
12729: LD_VAR 0 3
12733: PPUSH
12734: LD_VAR 0 2
12738: PUSH
12739: LD_VAR 0 3
12743: PUSH
12744: LD_VAR 0 2
12748: ARRAY
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PPUSH
12754: LD_INT 1
12756: PPUSH
12757: CALL 52899 0 3
12761: ST_TO_ADDR
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
12762: LD_VAR 0 3
12766: PUSH
12767: LD_VAR 0 2
12771: ARRAY
12772: PUSH
12773: LD_INT 2
12775: ARRAY
12776: PPUSH
12777: LD_VAR 0 3
12781: PUSH
12782: LD_VAR 0 2
12786: ARRAY
12787: PUSH
12788: LD_INT 1
12790: ARRAY
12791: PPUSH
12792: CALL_OW 120
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
12796: LD_VAR 0 3
12800: PUSH
12801: LD_VAR 0 2
12805: ARRAY
12806: PUSH
12807: LD_INT 1
12809: ARRAY
12810: PPUSH
12811: CALL_OW 256
12815: PUSH
12816: LD_INT 250
12818: LESS
12819: IFFALSE 12846
// vehicles = vehicles diff [ vehicles [ i ] ] ;
12821: LD_ADDR_VAR 0 3
12825: PUSH
12826: LD_VAR 0 3
12830: PUSH
12831: LD_VAR 0 3
12835: PUSH
12836: LD_VAR 0 2
12840: ARRAY
12841: PUSH
12842: EMPTY
12843: LIST
12844: DIFF
12845: ST_TO_ADDR
// end ;
12846: GO 12447
12848: POP
12849: POP
// wait ( 0 0$1 ) ;
12850: LD_INT 35
12852: PPUSH
12853: CALL_OW 67
// until omicronSurrender ;
12857: LD_EXP 23
12861: IFFALSE 12309
// end ;
12863: LD_VAR 0 1
12867: RET
// export function MoveToBase ( units , roadArea ) ; var i , unit , playerUnits , playerUnit , enemyUnitsOnRoad , cratesOnRoad , nearUnit , nearCrates , attackUnits , medics , damageUnits , inBase , newBase ; begin
12868: LD_INT 0
12870: PPUSH
12871: PPUSH
12872: PPUSH
12873: PPUSH
12874: PPUSH
12875: PPUSH
12876: PPUSH
12877: PPUSH
12878: PPUSH
12879: PPUSH
12880: PPUSH
12881: PPUSH
12882: PPUSH
12883: PPUSH
// inBase = false ;
12884: LD_ADDR_VAR 0 15
12888: PUSH
12889: LD_INT 0
12891: ST_TO_ADDR
// repeat enemyUnitsOnRoad = FilterUnitsInArea ( roadArea , [ [ f_side , 3 ] ] ) ;
12892: LD_ADDR_VAR 0 8
12896: PUSH
12897: LD_VAR 0 2
12901: PPUSH
12902: LD_INT 22
12904: PUSH
12905: LD_INT 3
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: EMPTY
12913: LIST
12914: PPUSH
12915: CALL_OW 70
12919: ST_TO_ADDR
// cratesOnRoad = GetListOfCratesInArea ( roadArea ) ;
12920: LD_ADDR_VAR 0 9
12924: PUSH
12925: LD_VAR 0 2
12929: PPUSH
12930: CALL_OW 435
12934: ST_TO_ADDR
// attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_mechanic ] , [ f_type , unit_vehicle ] ] ] ) ;
12935: LD_ADDR_VAR 0 12
12939: PUSH
12940: LD_VAR 0 1
12944: PPUSH
12945: LD_INT 50
12947: PUSH
12948: EMPTY
12949: LIST
12950: PUSH
12951: LD_INT 2
12953: PUSH
12954: LD_INT 25
12956: PUSH
12957: LD_INT 1
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PUSH
12964: LD_INT 25
12966: PUSH
12967: LD_INT 3
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: PUSH
12974: LD_INT 21
12976: PUSH
12977: LD_INT 2
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: PPUSH
12994: CALL_OW 72
12998: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
12999: LD_ADDR_VAR 0 13
13003: PUSH
13004: LD_VAR 0 1
13008: PPUSH
13009: LD_INT 50
13011: PUSH
13012: EMPTY
13013: LIST
13014: PUSH
13015: LD_INT 25
13017: PUSH
13018: LD_INT 4
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PPUSH
13029: CALL_OW 72
13033: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ f_not , [ f_lives , 1000 ] ] ) ;
13034: LD_ADDR_VAR 0 14
13038: PUSH
13039: LD_VAR 0 1
13043: PPUSH
13044: LD_INT 3
13046: PUSH
13047: LD_INT 24
13049: PUSH
13050: LD_INT 1000
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PPUSH
13061: CALL_OW 72
13065: ST_TO_ADDR
// playerUnits = FilterAllUnits ( [ [ f_side , 3 ] ] ) ;
13066: LD_ADDR_VAR 0 6
13070: PUSH
13071: LD_INT 22
13073: PUSH
13074: LD_INT 3
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: PUSH
13081: EMPTY
13082: LIST
13083: PPUSH
13084: CALL_OW 69
13088: ST_TO_ADDR
// for unit in UnitFilter ( units , [ [ f_ok ] ] ) do
13089: LD_ADDR_VAR 0 5
13093: PUSH
13094: LD_VAR 0 1
13098: PPUSH
13099: LD_INT 50
13101: PUSH
13102: EMPTY
13103: LIST
13104: PUSH
13105: EMPTY
13106: LIST
13107: PPUSH
13108: CALL_OW 72
13112: PUSH
13113: FOR_IN
13114: IFFALSE 13452
// begin if attackUnits and medics then
13116: LD_VAR 0 12
13120: PUSH
13121: LD_VAR 0 13
13125: AND
13126: IFFALSE 13193
// begin if damageUnits then
13128: LD_VAR 0 14
13132: IFFALSE 13154
// ComHeal ( medics , damageUnits [ 1 ] ) else
13134: LD_VAR 0 13
13138: PPUSH
13139: LD_VAR 0 14
13143: PUSH
13144: LD_INT 1
13146: ARRAY
13147: PPUSH
13148: CALL_OW 128
13152: GO 13191
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
13154: LD_VAR 0 13
13158: PPUSH
13159: LD_VAR 0 12
13163: PUSH
13164: LD_INT 1
13166: ARRAY
13167: PPUSH
13168: CALL_OW 250
13172: PPUSH
13173: LD_VAR 0 12
13177: PUSH
13178: LD_INT 1
13180: ARRAY
13181: PPUSH
13182: CALL_OW 251
13186: PPUSH
13187: CALL_OW 111
// end else
13191: GO 13222
// begin if not attackUnits and medics then
13193: LD_VAR 0 12
13197: NOT
13198: PUSH
13199: LD_VAR 0 13
13203: AND
13204: IFFALSE 13222
// attackUnits = attackUnits ^ medics ;
13206: LD_ADDR_VAR 0 12
13210: PUSH
13211: LD_VAR 0 12
13215: PUSH
13216: LD_VAR 0 13
13220: ADD
13221: ST_TO_ADDR
// end ; for i := 1 to cratesOnRoad / 2 do
13222: LD_ADDR_VAR 0 4
13226: PUSH
13227: DOUBLE
13228: LD_INT 1
13230: DEC
13231: ST_TO_ADDR
13232: LD_VAR 0 9
13236: PUSH
13237: LD_INT 2
13239: DIVREAL
13240: PUSH
13241: FOR_TO
13242: IFFALSE 13281
// AddComAttackPlace ( attackUnits , cratesOnRoad [ i ] , cratesOnRoad [ i + 1 ] ) ;
13244: LD_VAR 0 12
13248: PPUSH
13249: LD_VAR 0 9
13253: PUSH
13254: LD_VAR 0 4
13258: ARRAY
13259: PPUSH
13260: LD_VAR 0 9
13264: PUSH
13265: LD_VAR 0 4
13269: PUSH
13270: LD_INT 1
13272: PLUS
13273: ARRAY
13274: PPUSH
13275: CALL_OW 176
13279: GO 13241
13281: POP
13282: POP
// if enemyUnitsOnRoad then
13283: LD_VAR 0 8
13287: IFFALSE 13406
// begin for playerUnit in playerUnits do
13289: LD_ADDR_VAR 0 7
13293: PUSH
13294: LD_VAR 0 6
13298: PUSH
13299: FOR_IN
13300: IFFALSE 13402
// begin if Attacks ( playerUnit ) then
13302: LD_VAR 0 7
13306: PPUSH
13307: CALL_OW 320
13311: IFFALSE 13366
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
13313: LD_VAR 0 7
13317: PPUSH
13318: CALL_OW 320
13322: PUSH
13323: LD_VAR 0 1
13327: IN
13328: PUSH
13329: LD_VAR 0 7
13333: PPUSH
13334: LD_VAR 0 5
13338: PPUSH
13339: CALL_OW 296
13343: PUSH
13344: LD_INT 13
13346: LESS
13347: AND
13348: IFFALSE 13364
// ComAttackUnit ( attackUnits , playerUnit ) end else
13350: LD_VAR 0 12
13354: PPUSH
13355: LD_VAR 0 7
13359: PPUSH
13360: CALL_OW 115
13364: GO 13400
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , unit ) ;
13366: LD_ADDR_VAR 0 10
13370: PUSH
13371: LD_VAR 0 8
13375: PPUSH
13376: LD_VAR 0 5
13380: PPUSH
13381: CALL_OW 74
13385: ST_TO_ADDR
// ComAttackUnit ( attackUnits , nearUnit ) ;
13386: LD_VAR 0 12
13390: PPUSH
13391: LD_VAR 0 10
13395: PPUSH
13396: CALL_OW 115
// end ; end ;
13400: GO 13299
13402: POP
13403: POP
// end else
13404: GO 13421
// begin ComMoveXY ( unit , 27 , 34 ) ;
13406: LD_VAR 0 5
13410: PPUSH
13411: LD_INT 27
13413: PPUSH
13414: LD_INT 34
13416: PPUSH
13417: CALL_OW 111
// end ; if GetDistUnitXY ( unit , 27 , 34 ) < 5 then
13421: LD_VAR 0 5
13425: PPUSH
13426: LD_INT 27
13428: PPUSH
13429: LD_INT 34
13431: PPUSH
13432: CALL_OW 297
13436: PUSH
13437: LD_INT 5
13439: LESS
13440: IFFALSE 13450
// inBase = true ;
13442: LD_ADDR_VAR 0 15
13446: PUSH
13447: LD_INT 1
13449: ST_TO_ADDR
// end ;
13450: GO 13113
13452: POP
13453: POP
// wait ( 0 0$1 ) ;
13454: LD_INT 35
13456: PPUSH
13457: CALL_OW 67
// until UnitFilter ( units , [ f_ok ] ) = 0 or inBase ;
13461: LD_VAR 0 1
13465: PPUSH
13466: LD_INT 50
13468: PUSH
13469: EMPTY
13470: LIST
13471: PPUSH
13472: CALL_OW 72
13476: PUSH
13477: LD_INT 0
13479: EQUAL
13480: PUSH
13481: LD_VAR 0 15
13485: OR
13486: IFFALSE 12892
// ComMoveXY ( units , 27 , 34 ) ;
13488: LD_VAR 0 1
13492: PPUSH
13493: LD_INT 27
13495: PPUSH
13496: LD_INT 34
13498: PPUSH
13499: CALL_OW 111
// for i := 1 to units do
13503: LD_ADDR_VAR 0 4
13507: PUSH
13508: DOUBLE
13509: LD_INT 1
13511: DEC
13512: ST_TO_ADDR
13513: LD_VAR 0 1
13517: PUSH
13518: FOR_TO
13519: IFFALSE 13554
// if IsOk ( units [ i ] ) then
13521: LD_VAR 0 1
13525: PUSH
13526: LD_VAR 0 4
13530: ARRAY
13531: PPUSH
13532: CALL_OW 302
13536: IFFALSE 13552
// americanTroopsArriveOmicronCounter = americanTroopsArriveOmicronCounter + 1 ;
13538: LD_ADDR_EXP 12
13542: PUSH
13543: LD_EXP 12
13547: PUSH
13548: LD_INT 1
13550: PLUS
13551: ST_TO_ADDR
13552: GO 13518
13554: POP
13555: POP
// amSupportTroops = amSupportTroops diff units ;
13556: LD_ADDR_EXP 80
13560: PUSH
13561: LD_EXP 80
13565: PUSH
13566: LD_VAR 0 1
13570: DIFF
13571: ST_TO_ADDR
// newBase = amBase ;
13572: LD_ADDR_VAR 0 16
13576: PUSH
13577: LD_EXP 82
13581: ST_TO_ADDR
// newBase = newBase ^ UnitFilter ( units , [ f_ok ] ) ;
13582: LD_ADDR_VAR 0 16
13586: PUSH
13587: LD_VAR 0 16
13591: PUSH
13592: LD_VAR 0 1
13596: PPUSH
13597: LD_INT 50
13599: PUSH
13600: EMPTY
13601: LIST
13602: PPUSH
13603: CALL_OW 72
13607: ADD
13608: ST_TO_ADDR
// amBase = newBase ;
13609: LD_ADDR_EXP 82
13613: PUSH
13614: LD_VAR 0 16
13618: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 1 , newBase ) ;
13619: LD_ADDR_EXP 89
13623: PUSH
13624: LD_EXP 89
13628: PPUSH
13629: LD_INT 1
13631: PPUSH
13632: LD_VAR 0 16
13636: PPUSH
13637: CALL_OW 1
13641: ST_TO_ADDR
// end ; end_of_file
13642: LD_VAR 0 3
13646: RET
// export function Lose_Burlak ; begin
13647: LD_INT 0
13649: PPUSH
// YouLost ( Burlak ) ;
13650: LD_STRING Burlak
13652: PPUSH
13653: CALL_OW 104
// end ;
13657: LD_VAR 0 1
13661: RET
// export function Lose_Omicron ; begin
13662: LD_INT 0
13664: PPUSH
// YouLost ( Omicron ) ;
13665: LD_STRING Omicron
13667: PPUSH
13668: CALL_OW 104
// end ;
13672: LD_VAR 0 1
13676: RET
// export function Lose_Vehicles ; begin
13677: LD_INT 0
13679: PPUSH
// YouLost ( Vehicles ) ;
13680: LD_STRING Vehicles
13682: PPUSH
13683: CALL_OW 104
// end ;
13687: LD_VAR 0 1
13691: RET
// export function Lose_SelfAttack ; begin
13692: LD_INT 0
13694: PPUSH
// YouLost ( SelfAttack ) ;
13695: LD_STRING SelfAttack
13697: PPUSH
13698: CALL_OW 104
// end ;
13702: LD_VAR 0 1
13706: RET
// export function Lose_Delay ; begin
13707: LD_INT 0
13709: PPUSH
// YouLost ( Delay ) ;
13710: LD_STRING Delay
13712: PPUSH
13713: CALL_OW 104
// end ; end_of_file
13717: LD_VAR 0 1
13721: RET
// export function FinishMission ; begin
13722: LD_INT 0
13724: PPUSH
// SetRewards ;
13725: CALL 13746 0 0
// SavePlayerCharacters ;
13729: CALL 13960 0 0
// SaveGlobalVariables ;
13733: CALL 14233 0 0
// YouWin ;
13737: CALL_OW 103
// end ;
13741: LD_VAR 0 1
13745: RET
// function SetRewards ; var unitsToReward ; begin
13746: LD_INT 0
13748: PPUSH
13749: PPUSH
// if produceMoreVehicles then
13750: LD_EXP 16
13754: IFFALSE 13768
// AddMedal ( Surplus , 1 ) else
13756: LD_STRING Surplus
13758: PPUSH
13759: LD_INT 1
13761: PPUSH
13762: CALL_OW 101
13766: GO 13798
// if produceOnlyForYou then
13768: LD_EXP 17
13772: IFFALSE 13787
// AddMedal ( Surplus , - 1 ) else
13774: LD_STRING Surplus
13776: PPUSH
13777: LD_INT 1
13779: NEG
13780: PPUSH
13781: CALL_OW 101
13785: GO 13798
// AddMedal ( Surplus , - 2 ) ;
13787: LD_STRING Surplus
13789: PPUSH
13790: LD_INT 2
13792: NEG
13793: PPUSH
13794: CALL_OW 101
// if americanTroopsArriveOmicronCounter < maxAmericanTroopsIgnore then
13798: LD_EXP 12
13802: PUSH
13803: LD_EXP 43
13807: LESS
13808: IFFALSE 13822
// AddMedal ( PreventReinforcements , 1 ) else
13810: LD_STRING PreventReinforcements
13812: PPUSH
13813: LD_INT 1
13815: PPUSH
13816: CALL_OW 101
13820: GO 13833
// AddMedal ( PreventReinforcements , - 1 ) ;
13822: LD_STRING PreventReinforcements
13824: PPUSH
13825: LD_INT 1
13827: NEG
13828: PPUSH
13829: CALL_OW 101
// if scholtzeSaved and IsOK ( Scholtze ) then
13833: LD_EXP 7
13837: PUSH
13838: LD_EXP 51
13842: PPUSH
13843: CALL_OW 302
13847: AND
13848: IFFALSE 13862
// AddMedal ( Scholtze , 1 ) else
13850: LD_STRING Scholtze
13852: PPUSH
13853: LD_INT 1
13855: PPUSH
13856: CALL_OW 101
13860: GO 13873
// AddMedal ( Scholtze , - 1 ) ;
13862: LD_STRING Scholtze
13864: PPUSH
13865: LD_INT 1
13867: NEG
13868: PPUSH
13869: CALL_OW 101
// GiveMedals ( Main ) ;
13873: LD_STRING Main
13875: PPUSH
13876: CALL_OW 102
// unitsToReward = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
13880: LD_ADDR_VAR 0 2
13884: PUSH
13885: LD_INT 22
13887: PUSH
13888: LD_INT 3
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: LD_INT 21
13897: PUSH
13898: LD_INT 1
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PPUSH
13909: CALL_OW 69
13913: ST_TO_ADDR
// unitsToReward = unitsToReward ^ survivorsArabianAttack ;
13914: LD_ADDR_VAR 0 2
13918: PUSH
13919: LD_VAR 0 2
13923: PUSH
13924: LD_EXP 75
13928: ADD
13929: ST_TO_ADDR
// unitsToReward = unitsToReward diff Popov ;
13930: LD_ADDR_VAR 0 2
13934: PUSH
13935: LD_VAR 0 2
13939: PUSH
13940: LD_EXP 59
13944: DIFF
13945: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
13946: LD_VAR 0 2
13950: PPUSH
13951: CALL_OW 43
// end ;
13955: LD_VAR 0 1
13959: RET
// function SavePlayerCharacters ; var othersYour , othersKirov ; begin
13960: LD_INT 0
13962: PPUSH
13963: PPUSH
13964: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
13965: LD_EXP 45
13969: PPUSH
13970: LD_STRING Burlak
13972: PPUSH
13973: LD_INT 3
13975: PPUSH
13976: CALL 7510 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
13980: LD_EXP 46
13984: PPUSH
13985: LD_STRING Gnyevko
13987: PPUSH
13988: LD_INT 3
13990: PPUSH
13991: CALL 7510 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
13995: LD_EXP 48
13999: PPUSH
14000: LD_STRING Kovalyuk
14002: PPUSH
14003: LD_INT 3
14005: PPUSH
14006: CALL 7510 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
14010: LD_EXP 47
14014: PPUSH
14015: LD_STRING Kirilenkova
14017: PPUSH
14018: LD_INT 3
14020: PPUSH
14021: CALL 7510 0 3
// ExtSaveCharacter ( Scholtze , Scholtze , 3 ) ;
14025: LD_EXP 51
14029: PPUSH
14030: LD_STRING Scholtze
14032: PPUSH
14033: LD_INT 3
14035: PPUSH
14036: CALL 7510 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
14040: LD_EXP 49
14044: PPUSH
14045: LD_STRING Belkov
14047: PPUSH
14048: LD_INT 3
14050: PPUSH
14051: CALL 7510 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
14055: LD_EXP 50
14059: PPUSH
14060: LD_STRING Belkov2
14062: PPUSH
14063: LD_INT 3
14065: PPUSH
14066: CALL 7510 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova , Scholtze ] ;
14070: LD_ADDR_VAR 0 2
14074: PUSH
14075: LD_INT 22
14077: PUSH
14078: LD_INT 3
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: PUSH
14085: LD_INT 21
14087: PUSH
14088: LD_INT 1
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PPUSH
14099: CALL_OW 69
14103: PUSH
14104: LD_EXP 45
14108: PUSH
14109: LD_EXP 46
14113: PUSH
14114: LD_EXP 49
14118: PUSH
14119: LD_EXP 50
14123: PUSH
14124: LD_EXP 48
14128: PUSH
14129: LD_EXP 47
14133: PUSH
14134: LD_EXP 51
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: DIFF
14148: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
14149: LD_VAR 0 2
14153: PPUSH
14154: LD_STRING other_survivors
14156: PPUSH
14157: LD_INT 3
14159: PPUSH
14160: CALL 7566 0 3
// othersKirov = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff [ Kurin , Popov ] ;
14164: LD_ADDR_VAR 0 3
14168: PUSH
14169: LD_INT 22
14171: PUSH
14172: LD_INT 6
14174: PUSH
14175: EMPTY
14176: LIST
14177: LIST
14178: PUSH
14179: LD_INT 21
14181: PUSH
14182: LD_INT 1
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: PPUSH
14193: CALL_OW 69
14197: PUSH
14198: LD_EXP 58
14202: PUSH
14203: LD_EXP 59
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: DIFF
14212: ST_TO_ADDR
// ExtSaveCharacters ( othersKirov , other_kirov , 6 ) ;
14213: LD_VAR 0 3
14217: PPUSH
14218: LD_STRING other_kirov
14220: PPUSH
14221: LD_INT 6
14223: PPUSH
14224: CALL 7566 0 3
// end ;
14228: LD_VAR 0 1
14232: RET
// function SaveGlobalVariables ; begin
14233: LD_INT 0
14235: PPUSH
// SaveVariable ( kurinOpinion , 03_KurinOpinion_1 ) ;
14236: LD_EXP 26
14240: PPUSH
14241: LD_STRING 03_KurinOpinion_1
14243: PPUSH
14244: CALL_OW 39
// end ; end_of_file
14248: LD_VAR 0 1
14252: RET
// export function CustomEvent ( event ) ; begin
14253: LD_INT 0
14255: PPUSH
// end ;
14256: LD_VAR 0 2
14260: RET
// on Command ( com ) do var i , j , temp , order , x , y , building ;
14261: LD_INT 0
14263: PPUSH
14264: PPUSH
14265: PPUSH
14266: PPUSH
14267: PPUSH
14268: PPUSH
14269: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
14270: LD_ADDR_VAR 0 2
14274: PUSH
14275: LD_INT 22
14277: PUSH
14278: LD_INT 3
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: PUSH
14285: LD_INT 21
14287: PUSH
14288: LD_INT 1
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PPUSH
14299: CALL_OW 69
14303: PUSH
14304: FOR_IN
14305: IFFALSE 14502
// if GetTaskList ( i ) > 0 then
14307: LD_VAR 0 2
14311: PPUSH
14312: CALL_OW 437
14316: PUSH
14317: LD_INT 0
14319: GREATER
14320: IFFALSE 14500
// for j = 1 to GetTaskList ( i ) do
14322: LD_ADDR_VAR 0 3
14326: PUSH
14327: DOUBLE
14328: LD_INT 1
14330: DEC
14331: ST_TO_ADDR
14332: LD_VAR 0 2
14336: PPUSH
14337: CALL_OW 437
14341: PUSH
14342: FOR_TO
14343: IFFALSE 14498
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
14345: LD_ADDR_VAR 0 4
14349: PUSH
14350: LD_VAR 0 2
14354: PPUSH
14355: CALL_OW 437
14359: PUSH
14360: LD_VAR 0 3
14364: ARRAY
14365: PUSH
14366: LD_INT 4
14368: ARRAY
14369: ST_TO_ADDR
// building = GetTaskList ( i ) [ j ] [ 5 ] ;
14370: LD_ADDR_VAR 0 8
14374: PUSH
14375: LD_VAR 0 2
14379: PPUSH
14380: CALL_OW 437
14384: PUSH
14385: LD_VAR 0 3
14389: ARRAY
14390: PUSH
14391: LD_INT 5
14393: ARRAY
14394: ST_TO_ADDR
// x = GetTaskList ( i ) [ j ] [ 2 ] ;
14395: LD_ADDR_VAR 0 6
14399: PUSH
14400: LD_VAR 0 2
14404: PPUSH
14405: CALL_OW 437
14409: PUSH
14410: LD_VAR 0 3
14414: ARRAY
14415: PUSH
14416: LD_INT 2
14418: ARRAY
14419: ST_TO_ADDR
// y = GetTaskList ( i ) [ j ] [ 3 ] ;
14420: LD_ADDR_VAR 0 7
14424: PUSH
14425: LD_VAR 0 2
14429: PPUSH
14430: CALL_OW 437
14434: PUSH
14435: LD_VAR 0 3
14439: ARRAY
14440: PUSH
14441: LD_INT 3
14443: ARRAY
14444: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
14445: LD_VAR 0 4
14449: PPUSH
14450: CALL_OW 255
14454: PUSH
14455: LD_INT 6
14457: EQUAL
14458: PUSH
14459: LD_VAR 0 2
14463: PPUSH
14464: CALL_OW 437
14468: PUSH
14469: LD_VAR 0 3
14473: ARRAY
14474: PUSH
14475: LD_INT 1
14477: ARRAY
14478: PUSH
14479: LD_STRING <
14481: EQUAL
14482: AND
14483: IFFALSE 14496
// SetTaskList ( i , [ ] ) ;
14485: LD_VAR 0 2
14489: PPUSH
14490: EMPTY
14491: PPUSH
14492: CALL_OW 446
// end ;
14496: GO 14342
14498: POP
14499: POP
14500: GO 14304
14502: POP
14503: POP
// end ;
14504: PPOPN 8
14506: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
14507: LD_VAR 0 2
14511: PUSH
14512: LD_INT 6
14514: EQUAL
14515: IFFALSE 14529
// SetSide ( building , 6 ) ;
14517: LD_VAR 0 1
14521: PPUSH
14522: LD_INT 6
14524: PPUSH
14525: CALL_OW 235
// end ;
14529: PPOPN 3
14531: END
// on BuildingComplete ( building ) do var diffUnits , canTakeUnits ;
14532: LD_INT 0
14534: PPUSH
14535: PPUSH
// begin diffUnits = [ ] ;
14536: LD_ADDR_VAR 0 2
14540: PUSH
14541: EMPTY
14542: ST_TO_ADDR
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , SecondBurlakBase ) then
14543: LD_VAR 0 1
14547: PPUSH
14548: CALL_OW 255
14552: PUSH
14553: LD_INT 3
14555: EQUAL
14556: PUSH
14557: LD_VAR 0 1
14561: PPUSH
14562: CALL_OW 266
14566: PUSH
14567: LD_INT 0
14569: EQUAL
14570: AND
14571: PUSH
14572: LD_VAR 0 1
14576: PPUSH
14577: LD_INT 22
14579: PPUSH
14580: CALL_OW 308
14584: AND
14585: IFFALSE 14599
// SetBName ( building , kagan ) ;
14587: LD_VAR 0 1
14591: PPUSH
14592: LD_STRING kagan
14594: PPUSH
14595: CALL_OW 500
// if GetSide ( building ) = 6 then
14599: LD_VAR 0 1
14603: PPUSH
14604: CALL_OW 255
14608: PUSH
14609: LD_INT 6
14611: EQUAL
14612: IFFALSE 14852
// begin if GetBType ( building ) = b_ext_noncombat then
14614: LD_VAR 0 1
14618: PPUSH
14619: CALL_OW 266
14623: PUSH
14624: LD_INT 19
14626: EQUAL
14627: IFFALSE 14692
// begin SpawnKirovSupport ;
14629: CALL 4509 0 0
// MountWeaponTurrent ;
14633: CALL 11693 0 0
// wait ( 3 3$30 ) ;
14637: LD_INT 7350
14639: PPUSH
14640: CALL_OW 67
// KirovProduceVehicles ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
14644: LD_INT 22
14646: PUSH
14647: LD_INT 6
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 21
14656: PUSH
14657: LD_INT 3
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PUSH
14664: LD_INT 30
14666: PUSH
14667: LD_INT 3
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: LIST
14678: PPUSH
14679: CALL_OW 69
14683: PUSH
14684: LD_INT 1
14686: ARRAY
14687: PPUSH
14688: CALL 11763 0 1
// end ; if GetBType ( building ) = b_depot then
14692: LD_VAR 0 1
14696: PPUSH
14697: CALL_OW 266
14701: PUSH
14702: LD_INT 0
14704: EQUAL
14705: IFFALSE 14751
// begin kirovOilDepot = building ;
14707: LD_ADDR_EXP 65
14711: PUSH
14712: LD_VAR 0 1
14716: ST_TO_ADDR
// SetResourceType ( GetBase ( kirovOilDepot ) , mat_oil , 3000 ) ;
14717: LD_EXP 65
14721: PPUSH
14722: CALL_OW 274
14726: PPUSH
14727: LD_INT 2
14729: PPUSH
14730: LD_INT 3000
14732: PPUSH
14733: CALL_OW 277
// ComEnterUnit ( Grishko , building ) ;
14737: LD_EXP 78
14741: PPUSH
14742: LD_VAR 0 1
14746: PPUSH
14747: CALL_OW 120
// end ; if ( GetBType ( building ) = b_breastwork or GetBType ( building ) = b_armoury ) and IsInArea ( building , SecondKurinBase ) then
14751: LD_VAR 0 1
14755: PPUSH
14756: CALL_OW 266
14760: PUSH
14761: LD_INT 31
14763: EQUAL
14764: PUSH
14765: LD_VAR 0 1
14769: PPUSH
14770: CALL_OW 266
14774: PUSH
14775: LD_INT 4
14777: EQUAL
14778: OR
14779: PUSH
14780: LD_VAR 0 1
14784: PPUSH
14785: LD_INT 21
14787: PPUSH
14788: CALL_OW 308
14792: AND
14793: IFFALSE 14852
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) [ 1 ] , building ) ;
14795: LD_EXP 74
14799: PPUSH
14800: LD_INT 25
14802: PUSH
14803: LD_INT 1
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: LD_INT 56
14812: PUSH
14813: EMPTY
14814: LIST
14815: PUSH
14816: LD_INT 3
14818: PUSH
14819: LD_INT 60
14821: PUSH
14822: EMPTY
14823: LIST
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: LIST
14833: PPUSH
14834: CALL_OW 72
14838: PUSH
14839: LD_INT 1
14841: ARRAY
14842: PPUSH
14843: LD_VAR 0 1
14847: PPUSH
14848: CALL_OW 120
// end ; end ;
14852: PPOPN 3
14854: END
// on UpgradeComplete ( building ) do var i , tmp ;
14855: LD_INT 0
14857: PPUSH
14858: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_factory and not dialog_workshop then
14859: LD_VAR 0 1
14863: PPUSH
14864: CALL_OW 255
14868: PUSH
14869: LD_INT 3
14871: EQUAL
14872: PUSH
14873: LD_VAR 0 1
14877: PPUSH
14878: CALL_OW 266
14882: PUSH
14883: LD_INT 3
14885: EQUAL
14886: AND
14887: PUSH
14888: LD_EXP 8
14892: NOT
14893: AND
14894: IFFALSE 14905
// Dial_UpgradeWorkshop ( building ) ;
14896: LD_VAR 0 1
14900: PPUSH
14901: CALL 17659 0 1
// end ;
14905: PPOPN 3
14907: END
// on UnitDestroyed ( un ) do begin MCE_UnitDestroyed ( un ) ;
14908: LD_VAR 0 1
14912: PPUSH
14913: CALL 86082 0 1
// if un = Burlak then
14917: LD_VAR 0 1
14921: PUSH
14922: LD_EXP 45
14926: EQUAL
14927: IFFALSE 14933
// Lose_Burlak ;
14929: CALL 13647 0 0
// if un = beriaDepot and not canDestroyBeriaBase then
14933: LD_VAR 0 1
14937: PUSH
14938: LD_EXP 57
14942: EQUAL
14943: PUSH
14944: LD_EXP 28
14948: NOT
14949: AND
14950: IFFALSE 14956
// Lose_Omicron ;
14952: CALL 13662 0 0
// end ;
14956: PPOPN 1
14958: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
14959: LD_VAR 0 1
14963: PUSH
14964: LD_INT 3
14966: EQUAL
14967: PUSH
14968: LD_VAR 0 2
14972: PUSH
14973: LD_INT 6
14975: EQUAL
14976: AND
14977: IFFALSE 14983
// Lose_SelfAttack ;
14979: CALL 13692 0 0
// end ;
14983: PPOPN 2
14985: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
14986: LD_VAR 0 1
14990: PPUSH
14991: LD_VAR 0 2
14995: PPUSH
14996: CALL 84994 0 2
// if GetSide ( vehicle ) = 6 then
15000: LD_VAR 0 1
15004: PPUSH
15005: CALL_OW 255
15009: PUSH
15010: LD_INT 6
15012: EQUAL
15013: IFFALSE 15178
// begin if GetWeapon ( vehicle ) = ru_cargo_bay and not kirovTransportCargo then
15015: LD_VAR 0 1
15019: PPUSH
15020: CALL_OW 264
15024: PUSH
15025: LD_INT 51
15027: EQUAL
15028: PUSH
15029: LD_EXP 71
15033: NOT
15034: AND
15035: IFFALSE 15049
// kirovTransportCargo = vehicle else
15037: LD_ADDR_EXP 71
15041: PUSH
15042: LD_VAR 0 1
15046: ST_TO_ADDR
15047: GO 15121
// begin if GetWeapon ( vehicle ) = ru_cargo_bay then
15049: LD_VAR 0 1
15053: PPUSH
15054: CALL_OW 264
15058: PUSH
15059: LD_INT 51
15061: EQUAL
15062: IFFALSE 15121
// begin ComTransport ( vehicle , kirovOilDepot , mat_oil ) ;
15064: LD_VAR 0 1
15068: PPUSH
15069: LD_EXP 65
15073: PPUSH
15074: LD_INT 2
15076: PPUSH
15077: CALL_OW 151
// AddComMoveXY ( vehicle , 137 , 99 ) ;
15081: LD_VAR 0 1
15085: PPUSH
15086: LD_INT 137
15088: PPUSH
15089: LD_INT 99
15091: PPUSH
15092: CALL_OW 171
// AddComHold ( vehicle ) ;
15096: LD_VAR 0 1
15100: PPUSH
15101: CALL_OW 200
// kirovAttackCargo = kirovAttackCargo ^ vehicle ;
15105: LD_ADDR_EXP 72
15109: PUSH
15110: LD_EXP 72
15114: PUSH
15115: LD_VAR 0 1
15119: ADD
15120: ST_TO_ADDR
// end ; end ; if GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
15121: LD_VAR 0 1
15125: PPUSH
15126: CALL_OW 264
15130: PUSH
15131: LD_INT 42
15133: PUSH
15134: LD_INT 43
15136: PUSH
15137: LD_INT 44
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: LIST
15144: IN
15145: IFFALSE 15178
// begin kirovAttackVehicles = kirovAttackVehicles ^ vehicle ;
15147: LD_ADDR_EXP 73
15151: PUSH
15152: LD_EXP 73
15156: PUSH
15157: LD_VAR 0 1
15161: ADD
15162: ST_TO_ADDR
// ComMoveXY ( vehicle , 137 , 99 ) ;
15163: LD_VAR 0 1
15167: PPUSH
15168: LD_INT 137
15170: PPUSH
15171: LD_INT 99
15173: PPUSH
15174: CALL_OW 111
// end ; end ; end ;
15178: PPOPN 2
15180: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
15181: LD_VAR 0 1
15185: PPUSH
15186: LD_VAR 0 2
15190: PPUSH
15191: LD_VAR 0 3
15195: PPUSH
15196: LD_VAR 0 4
15200: PPUSH
15201: CALL 84832 0 4
// if side = 6 then
15205: LD_VAR 0 3
15209: PUSH
15210: LD_INT 6
15212: EQUAL
15213: IFFALSE 15236
// begin ComExitVehicle ( capturing_unit ) ;
15215: LD_VAR 0 4
15219: PPUSH
15220: CALL_OW 121
// SetSide ( new , 6 ) ;
15224: LD_VAR 0 1
15228: PPUSH
15229: LD_INT 6
15231: PPUSH
15232: CALL_OW 235
// end ; end ;
15236: PPOPN 4
15238: END
// on EnterVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 and meetNearOmicronBase then
15239: LD_VAR 0 1
15243: PPUSH
15244: CALL_OW 255
15248: PUSH
15249: LD_INT 6
15251: EQUAL
15252: PUSH
15253: LD_EXP 19
15257: AND
15258: IFFALSE 15286
// begin wait ( 0 0$2 ) ;
15260: LD_INT 70
15262: PPUSH
15263: CALL_OW 67
// AddComAgressiveMove ( vehicle , 78 , 39 ) ;
15267: LD_VAR 0 1
15271: PPUSH
15272: LD_INT 78
15274: PPUSH
15275: LD_INT 39
15277: PPUSH
15278: CALL_OW 174
// KirovAttackOmicron ;
15282: CALL 12233 0 0
// end ; end ; end_of_file
15286: PPOPN 2
15288: END
// export function MissionIntro ; var unit ; begin
15289: LD_INT 0
15291: PPUSH
15292: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
15293: LD_EXP 45
15297: PUSH
15298: LD_EXP 58
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PPUSH
15307: CALL_OW 87
// ComTurnUnit ( [ Burlak , BelkovDialog ] , Kurin ) ;
15311: LD_EXP 45
15315: PUSH
15316: LD_EXP 60
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PPUSH
15325: LD_EXP 58
15329: PPUSH
15330: CALL_OW 119
// ComTurnUnit ( Kurin , Burlak ) ;
15334: LD_EXP 58
15338: PPUSH
15339: LD_EXP 45
15343: PPUSH
15344: CALL_OW 119
// RevealFogArea ( 3 , RevealMapPartArea ) ;
15348: LD_INT 3
15350: PPUSH
15351: LD_INT 25
15353: PPUSH
15354: CALL_OW 332
// if not IsPlaced ( Belkov ) and not IsPlaced ( Belkov2 ) then
15358: LD_EXP 49
15362: PPUSH
15363: CALL_OW 305
15367: NOT
15368: PUSH
15369: LD_EXP 50
15373: PPUSH
15374: CALL_OW 305
15378: NOT
15379: AND
15380: IFFALSE 15468
// begin Say ( Kurin , D1a-Kur-1 ) ;
15382: LD_EXP 58
15386: PPUSH
15387: LD_STRING D1a-Kur-1
15389: PPUSH
15390: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
15394: LD_EXP 45
15398: PPUSH
15399: LD_STRING D1a-Bur-1
15401: PPUSH
15402: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
15406: LD_EXP 58
15410: PPUSH
15411: LD_STRING D1a-Kur-2
15413: PPUSH
15414: CALL_OW 88
// if platonovOpinion <= 1 then
15418: LD_EXP 27
15422: PUSH
15423: LD_INT 1
15425: LESSEQUAL
15426: IFFALSE 15442
// Say ( Kurin , D1a-Kur-2a ) else
15428: LD_EXP 58
15432: PPUSH
15433: LD_STRING D1a-Kur-2a
15435: PPUSH
15436: CALL_OW 88
15440: GO 15454
// Say ( Kurin , D1a-Kur-2b ) ;
15442: LD_EXP 58
15446: PPUSH
15447: LD_STRING D1a-Kur-2b
15449: PPUSH
15450: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
15454: LD_EXP 45
15458: PPUSH
15459: LD_STRING D1a-Bur-2
15461: PPUSH
15462: CALL_OW 88
// end else
15466: GO 15504
// begin Say ( Kurin , D1b-Kur-1 ) ;
15468: LD_EXP 58
15472: PPUSH
15473: LD_STRING D1b-Kur-1
15475: PPUSH
15476: CALL_OW 88
// Say ( BelkovDialog , D1b-Bel-1 ) ;
15480: LD_EXP 60
15484: PPUSH
15485: LD_STRING D1b-Bel-1
15487: PPUSH
15488: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
15492: LD_EXP 58
15496: PPUSH
15497: LD_STRING D1b-Kur-2
15499: PPUSH
15500: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
15504: LD_EXP 58
15508: PPUSH
15509: LD_STRING D2-Kur-1
15511: PPUSH
15512: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
15516: LD_EXP 45
15520: PPUSH
15521: LD_STRING D2-Bur-1
15523: PPUSH
15524: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
15528: LD_EXP 58
15532: PPUSH
15533: LD_STRING D2-Kur-2
15535: PPUSH
15536: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
15540: LD_EXP 45
15544: PPUSH
15545: LD_STRING D2-Bur-2
15547: PPUSH
15548: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
15552: LD_EXP 58
15556: PPUSH
15557: LD_STRING D2-Kur-3
15559: PPUSH
15560: CALL_OW 88
// SetAttitude ( 1 , 6 , att_friend , true ) ;
15564: LD_INT 1
15566: PPUSH
15567: LD_INT 6
15569: PPUSH
15570: LD_INT 1
15572: PPUSH
15573: LD_INT 1
15575: PPUSH
15576: CALL_OW 80
// PrepareAmericansMissionIntro ;
15580: CALL 5951 0 0
// ComMoveXY ( amIntroUnits , 28 , 35 ) ;
15584: LD_EXP 79
15588: PPUSH
15589: LD_INT 28
15591: PPUSH
15592: LD_INT 35
15594: PPUSH
15595: CALL_OW 111
// CenterOnXY ( 93 , 36 ) ;
15599: LD_INT 93
15601: PPUSH
15602: LD_INT 36
15604: PPUSH
15605: CALL_OW 84
// PlaceSeeing ( 93 , 36 , 3 , - 9 ) ;
15609: LD_INT 93
15611: PPUSH
15612: LD_INT 36
15614: PPUSH
15615: LD_INT 3
15617: PPUSH
15618: LD_INT 9
15620: NEG
15621: PPUSH
15622: CALL_OW 330
// wait ( 0 0$6 ) ;
15626: LD_INT 210
15628: PPUSH
15629: CALL_OW 67
// CenterOnUnits ( Popov ) ;
15633: LD_EXP 59
15637: PPUSH
15638: CALL_OW 85
// wait ( 0 0$1 ) ;
15642: LD_INT 35
15644: PPUSH
15645: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
15649: LD_EXP 59
15653: PPUSH
15654: LD_STRING D2-Pop-3
15656: PPUSH
15657: CALL_OW 94
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
15661: LD_EXP 45
15665: PUSH
15666: LD_EXP 58
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PPUSH
15675: CALL_OW 87
// wait ( 0 0$1 ) ;
15679: LD_INT 35
15681: PPUSH
15682: CALL_OW 67
// for unit in amIntroUnits do
15686: LD_ADDR_VAR 0 2
15690: PUSH
15691: LD_EXP 79
15695: PUSH
15696: FOR_IN
15697: IFFALSE 15710
// RemoveUnit ( unit ) ;
15699: LD_VAR 0 2
15703: PPUSH
15704: CALL_OW 64
15708: GO 15696
15710: POP
15711: POP
// Say ( Kurin , D2-Kur-4 ) ;
15712: LD_EXP 58
15716: PPUSH
15717: LD_STRING D2-Kur-4
15719: PPUSH
15720: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
15724: LD_EXP 45
15728: PPUSH
15729: LD_STRING D2-Bur-4
15731: PPUSH
15732: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
15736: LD_EXP 58
15740: PPUSH
15741: LD_STRING D2-Kur-5
15743: PPUSH
15744: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
15748: LD_EXP 45
15752: PPUSH
15753: LD_STRING D2-Bur-5
15755: PPUSH
15756: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
15760: LD_EXP 58
15764: PPUSH
15765: LD_STRING D2-Kur-6
15767: PPUSH
15768: CALL_OW 88
// if IsPlaced ( Gnyevko ) then
15772: LD_EXP 46
15776: PPUSH
15777: CALL_OW 305
15781: IFFALSE 15797
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
15783: LD_ADDR_EXP 35
15787: PUSH
15788: LD_EXP 35
15792: PUSH
15793: LD_INT 1
15795: MINUS
15796: ST_TO_ADDR
// if IsPlaced ( Kovalyuk ) then
15797: LD_EXP 48
15801: PPUSH
15802: CALL_OW 305
15806: IFFALSE 15822
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
15808: LD_ADDR_EXP 35
15812: PUSH
15813: LD_EXP 35
15817: PUSH
15818: LD_INT 1
15820: MINUS
15821: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) then
15822: LD_EXP 47
15826: PPUSH
15827: CALL_OW 305
15831: IFFALSE 15847
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
15833: LD_ADDR_EXP 35
15837: PUSH
15838: LD_EXP 35
15842: PUSH
15843: LD_INT 1
15845: MINUS
15846: ST_TO_ADDR
// SelectCharacters ( baseUnitsToChoose ) ;
15847: LD_EXP 35
15851: PPUSH
15852: CALL 7664 0 1
// RemoveSeeing ( 93 , 36 , 3 ) ;
15856: LD_INT 93
15858: PPUSH
15859: LD_INT 36
15861: PPUSH
15862: LD_INT 3
15864: PPUSH
15865: CALL_OW 331
// Resetfog ;
15869: CALL_OW 335
// RevealFogArea ( 3 , RevealMapPartArea ) ;
15873: LD_INT 3
15875: PPUSH
15876: LD_INT 25
15878: PPUSH
15879: CALL_OW 332
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
15883: LD_INT 22
15885: PUSH
15886: LD_INT 3
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PUSH
15893: LD_INT 21
15895: PUSH
15896: LD_INT 1
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PPUSH
15907: CALL_OW 69
15911: PPUSH
15912: CALL_OW 122
// wait ( 0 0$1 ) ;
15916: LD_INT 35
15918: PPUSH
15919: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
15923: LD_INT 22
15925: PUSH
15926: LD_INT 3
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: LD_INT 21
15935: PUSH
15936: LD_INT 1
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: PPUSH
15947: CALL_OW 69
15951: PPUSH
15952: LD_EXP 57
15956: PPUSH
15957: CALL_OW 250
15961: PPUSH
15962: LD_EXP 57
15966: PPUSH
15967: CALL_OW 251
15971: PPUSH
15972: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
15976: LD_INT 35
15978: PPUSH
15979: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
15983: LD_EXP 45
15987: PPUSH
15988: CALL_OW 87
// until GetDistUnits ( Burlak , beriaDepot ) < 6 ;
15992: LD_EXP 45
15996: PPUSH
15997: LD_EXP 57
16001: PPUSH
16002: CALL_OW 296
16006: PUSH
16007: LD_INT 6
16009: LESS
16010: IFFALSE 15976
// InGameOff ;
16012: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
16016: LD_STRING M1
16018: PPUSH
16019: CALL_OW 337
// SaveForQuickRestart ;
16023: CALL_OW 22
// counterEnable = true ;
16027: LD_ADDR_EXP 85
16031: PUSH
16032: LD_INT 1
16034: ST_TO_ADDR
// counterIndex = 1 ;
16035: LD_ADDR_EXP 86
16039: PUSH
16040: LD_INT 1
16042: ST_TO_ADDR
// RevealFogArea ( 3 , RevealMapPartArea ) ;
16043: LD_INT 3
16045: PPUSH
16046: LD_INT 25
16048: PPUSH
16049: CALL_OW 332
// ResAllTechs ( 6 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] , 3 ) ;
16053: LD_INT 6
16055: PPUSH
16056: LD_INT 22
16058: PUSH
16059: LD_INT 6
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PUSH
16066: LD_INT 21
16068: PUSH
16069: LD_INT 3
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: LD_INT 30
16078: PUSH
16079: LD_INT 6
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: LIST
16090: PPUSH
16091: CALL_OW 69
16095: PUSH
16096: LD_INT 1
16098: ARRAY
16099: PPUSH
16100: LD_INT 3
16102: PPUSH
16103: CALL 8365 0 3
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_gun , 159 , 116 , 0 ) ;
16107: LD_INT 19
16109: PPUSH
16110: LD_INT 22
16112: PUSH
16113: LD_INT 6
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PUSH
16120: LD_INT 21
16122: PUSH
16123: LD_INT 1
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: LD_INT 25
16132: PUSH
16133: LD_INT 2
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: LIST
16144: PPUSH
16145: CALL_OW 70
16149: PPUSH
16150: LD_INT 17
16152: PPUSH
16153: LD_INT 159
16155: PPUSH
16156: LD_INT 116
16158: PPUSH
16159: LD_INT 0
16161: PPUSH
16162: CALL_OW 205
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_noncombat , 161 , 115 , 5 ) ;
16166: LD_INT 19
16168: PPUSH
16169: LD_INT 22
16171: PUSH
16172: LD_INT 6
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 21
16181: PUSH
16182: LD_INT 1
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: LD_INT 25
16191: PUSH
16192: LD_INT 2
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: LIST
16203: PPUSH
16204: CALL_OW 70
16208: PPUSH
16209: LD_INT 19
16211: PPUSH
16212: LD_INT 161
16214: PPUSH
16215: LD_INT 115
16217: PPUSH
16218: LD_INT 5
16220: PPUSH
16221: CALL_OW 205
// AddComEnterUnit ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , kirovDepot ) ;
16225: LD_INT 19
16227: PPUSH
16228: LD_INT 22
16230: PUSH
16231: LD_INT 6
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: PUSH
16238: LD_INT 21
16240: PUSH
16241: LD_INT 1
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: LD_INT 25
16250: PUSH
16251: LD_INT 2
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: LIST
16262: PPUSH
16263: CALL_OW 70
16267: PPUSH
16268: LD_EXP 64
16272: PPUSH
16273: CALL_OW 180
// ComEnterUnit ( survivorsArabianAttack diff Popov , ru2_bar1 ) ;
16277: LD_EXP 75
16281: PUSH
16282: LD_EXP 59
16286: DIFF
16287: PPUSH
16288: LD_EXP 66
16292: PPUSH
16293: CALL_OW 120
// ComFree ( [ Belkov , Belkov2 ] ) ;
16297: LD_EXP 49
16301: PUSH
16302: LD_EXP 50
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PPUSH
16311: CALL_OW 139
// ComWalk ( ruScout ) ;
16315: LD_EXP 61
16319: PPUSH
16320: CALL_OW 138
// wait ( 0 0$1 ) ;
16324: LD_INT 35
16326: PPUSH
16327: CALL_OW 67
// AddComMoveXY ( [ ruScout , Popov ] , 99 , 37 ) ;
16331: LD_EXP 61
16335: PUSH
16336: LD_EXP 59
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PPUSH
16345: LD_INT 99
16347: PPUSH
16348: LD_INT 37
16350: PPUSH
16351: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 88 , 60 ) ;
16355: LD_EXP 61
16359: PUSH
16360: LD_EXP 59
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PPUSH
16369: LD_INT 88
16371: PPUSH
16372: LD_INT 60
16374: PPUSH
16375: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 129 , 99 ) ;
16379: LD_EXP 61
16383: PUSH
16384: LD_EXP 59
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: PPUSH
16393: LD_INT 129
16395: PPUSH
16396: LD_INT 99
16398: PPUSH
16399: CALL_OW 171
// AddComEnterUnit ( [ Popov , ruScout ] , kirovDepot ) ;
16403: LD_EXP 59
16407: PUSH
16408: LD_EXP 61
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: PPUSH
16417: LD_EXP 64
16421: PPUSH
16422: CALL_OW 180
// end ;
16426: LD_VAR 0 1
16430: RET
// every 0 0$1 trigger kirovCompleteFactory do var i , tmp , pom , diffUnits , canTakeUnits ;
16431: LD_EXP 22
16435: IFFALSE 16707
16437: GO 16439
16439: DISABLE
16440: LD_INT 0
16442: PPUSH
16443: PPUSH
16444: PPUSH
16445: PPUSH
16446: PPUSH
// begin diffUnits = diffUnits ^ Kurin ;
16447: LD_ADDR_VAR 0 4
16451: PUSH
16452: LD_VAR 0 4
16456: PUSH
16457: LD_EXP 58
16461: ADD
16462: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
16463: LD_ADDR_VAR 0 4
16467: PUSH
16468: LD_VAR 0 4
16472: PUSH
16473: LD_EXP 75
16477: ADD
16478: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
16479: LD_ADDR_VAR 0 4
16483: PUSH
16484: LD_VAR 0 4
16488: PUSH
16489: LD_EXP 68
16493: ADD
16494: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff diffUnits ;
16495: LD_ADDR_VAR 0 5
16499: PUSH
16500: LD_INT 19
16502: PPUSH
16503: LD_INT 22
16505: PUSH
16506: LD_INT 6
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PUSH
16513: LD_INT 21
16515: PUSH
16516: LD_INT 1
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PPUSH
16527: CALL_OW 70
16531: PUSH
16532: LD_VAR 0 4
16536: DIFF
16537: ST_TO_ADDR
// pom = 6 ;
16538: LD_ADDR_VAR 0 3
16542: PUSH
16543: LD_INT 6
16545: ST_TO_ADDR
// if canTakeUnits then
16546: LD_VAR 0 5
16550: IFFALSE 16674
// for i = 1 to canTakeUnits do
16552: LD_ADDR_VAR 0 1
16556: PUSH
16557: DOUBLE
16558: LD_INT 1
16560: DEC
16561: ST_TO_ADDR
16562: LD_VAR 0 5
16566: PUSH
16567: FOR_TO
16568: IFFALSE 16672
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
16570: LD_VAR 0 5
16574: PUSH
16575: LD_VAR 0 1
16579: ARRAY
16580: PPUSH
16581: CALL_OW 257
16585: PUSH
16586: LD_INT 3
16588: NONEQUAL
16589: IFFALSE 16636
// begin ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
16591: LD_VAR 0 5
16595: PUSH
16596: LD_VAR 0 1
16600: ARRAY
16601: PPUSH
16602: LD_EXP 21
16606: PPUSH
16607: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , 1 ) ;
16611: LD_VAR 0 5
16615: PUSH
16616: LD_VAR 0 1
16620: ARRAY
16621: PPUSH
16622: LD_INT 1
16624: PPUSH
16625: CALL_OW 183
// wait ( 0 0$1 ) ;
16629: LD_INT 35
16631: PPUSH
16632: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
16636: LD_VAR 0 5
16640: PUSH
16641: LD_VAR 0 1
16645: ARRAY
16646: PPUSH
16647: LD_EXP 21
16651: PPUSH
16652: CALL_OW 120
// pom = pom - 1 ;
16656: LD_ADDR_VAR 0 3
16660: PUSH
16661: LD_VAR 0 3
16665: PUSH
16666: LD_INT 1
16668: MINUS
16669: ST_TO_ADDR
// end ;
16670: GO 16567
16672: POP
16673: POP
// if pom > 0 then
16674: LD_VAR 0 3
16678: PUSH
16679: LD_INT 0
16681: GREATER
16682: IFFALSE 16707
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
16684: LD_ADDR_EXP 77
16688: PUSH
16689: LD_EXP 77
16693: PPUSH
16694: LD_INT 3
16696: PPUSH
16697: LD_VAR 0 3
16701: PPUSH
16702: CALL_OW 1
16706: ST_TO_ADDR
// end ;
16707: PPOPN 5
16709: END
// every 0 0$1 trigger kirovTransportCargo do
16710: LD_EXP 71
16714: IFFALSE 16763
16716: GO 16718
16718: DISABLE
// begin enable ;
16719: ENABLE
// AddComTransport ( kirovTransportCargo , kirovOilDepot , mat_oil ) ;
16720: LD_EXP 71
16724: PPUSH
16725: LD_EXP 65
16729: PPUSH
16730: LD_INT 2
16732: PPUSH
16733: CALL_OW 211
// AddComGive ( kirovTransportCargo , kirovDepot ) ;
16737: LD_EXP 71
16741: PPUSH
16742: LD_EXP 64
16746: PPUSH
16747: CALL_OW 221
// SetFuel ( kirovTransportCargo , 100 ) ;
16751: LD_EXP 71
16755: PPUSH
16756: LD_INT 100
16758: PPUSH
16759: CALL_OW 240
// end ;
16763: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
16764: LD_INT 78
16766: PPUSH
16767: LD_INT 112
16769: PPUSH
16770: LD_INT 3
16772: PPUSH
16773: CALL_OW 440
16777: IFFALSE 16831
16779: GO 16781
16781: DISABLE
// begin CenterOnXY ( 78 , 112 ) ;
16782: LD_INT 78
16784: PPUSH
16785: LD_INT 112
16787: PPUSH
16788: CALL_OW 84
// DialogueOn ;
16792: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
16796: LD_EXP 45
16800: PPUSH
16801: LD_STRING D2a-Bur-1
16803: PPUSH
16804: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
16808: LD_EXP 58
16812: PPUSH
16813: LD_STRING D2a-Kur-1
16815: PPUSH
16816: CALL_OW 94
// DialogueOff ;
16820: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
16824: LD_STRING M2
16826: PPUSH
16827: CALL_OW 337
// end ;
16831: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
16832: LD_EXP 10
16836: NOT
16837: IFFALSE 17029
16839: GO 16841
16841: DISABLE
16842: LD_INT 0
16844: PPUSH
// begin enable ;
16845: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
16846: LD_ADDR_VAR 0 1
16850: PUSH
16851: LD_INT 22
16853: PUSH
16854: LD_INT 3
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PUSH
16861: LD_INT 21
16863: PUSH
16864: LD_INT 2
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: LD_INT 23
16873: PUSH
16874: LD_INT 3
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 2
16883: PUSH
16884: LD_INT 31
16886: PUSH
16887: LD_INT 21
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: LD_INT 31
16896: PUSH
16897: LD_INT 23
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: LIST
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: PPUSH
16915: CALL_OW 69
16919: PUSH
16920: FOR_IN
16921: IFFALSE 17027
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
16923: LD_VAR 0 1
16927: PPUSH
16928: LD_INT 48
16930: PPUSH
16931: LD_INT 81
16933: PPUSH
16934: CALL_OW 297
16938: PUSH
16939: LD_INT 7
16941: LESS
16942: IFFALSE 17025
// begin dialog_track = true ;
16944: LD_ADDR_EXP 10
16948: PUSH
16949: LD_INT 1
16951: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
16952: LD_INT 48
16954: PPUSH
16955: LD_INT 81
16957: PPUSH
16958: CALL_OW 86
// DialogueOn ;
16962: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
16966: LD_EXP 45
16970: PPUSH
16971: LD_STRING D5a-Bur-1
16973: PPUSH
16974: CALL_OW 88
// DialogueOff ;
16978: CALL_OW 7
// SetTech ( 82 , 3 , state_enabled ) ;
16982: LD_INT 82
16984: PPUSH
16985: LD_INT 3
16987: PPUSH
16988: LD_INT 1
16990: PPUSH
16991: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
16995: LD_INT 84
16997: PPUSH
16998: LD_INT 3
17000: PPUSH
17001: LD_INT 1
17003: PPUSH
17004: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
17008: LD_INT 16
17010: PPUSH
17011: LD_INT 3
17013: PPUSH
17014: LD_INT 1
17016: PPUSH
17017: CALL_OW 324
// exit ;
17021: POP
17022: POP
17023: GO 17029
// end ;
17025: GO 16920
17027: POP
17028: POP
// end ;
17029: PPOPN 1
17031: END
// every 5 5$30 do
17032: GO 17034
17034: DISABLE
// begin PrepareScholtze ;
17035: CALL 5353 0 0
// DialogueOn ;
17039: CALL_OW 6
// SayRadio ( fakeScholtze , D4-Sch-1 ) ;
17043: LD_EXP 52
17047: PPUSH
17048: LD_STRING D4-Sch-1
17050: PPUSH
17051: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
17055: LD_EXP 45
17059: PPUSH
17060: LD_STRING D4-Bur-1
17062: PPUSH
17063: CALL_OW 88
// DialogueOff ;
17067: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
17071: LD_STRING M4
17073: PPUSH
17074: CALL_OW 337
// ComHold ( Scholtze ) ;
17078: LD_EXP 51
17082: PPUSH
17083: CALL_OW 140
// end ;
17087: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and not scholtzeSaved do
17088: LD_INT 3
17090: PPUSH
17091: LD_EXP 51
17095: PPUSH
17096: CALL_OW 292
17100: PUSH
17101: LD_EXP 7
17105: NOT
17106: AND
17107: IFFALSE 17233
17109: GO 17111
17111: DISABLE
// begin scholtzeSaved = true ;
17112: LD_ADDR_EXP 7
17116: PUSH
17117: LD_INT 1
17119: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
17120: LD_EXP 51
17124: PPUSH
17125: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
17129: LD_EXP 51
17133: PPUSH
17134: LD_INT 3
17136: PPUSH
17137: CALL_OW 235
// DialogueOn ;
17141: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
17145: LD_EXP 51
17149: PPUSH
17150: LD_STRING D4a-Sch-1
17152: PPUSH
17153: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
17157: LD_EXP 45
17161: PPUSH
17162: LD_STRING D4a-Bur-1
17164: PPUSH
17165: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
17169: LD_EXP 51
17173: PPUSH
17174: LD_STRING D4a-Sch-2
17176: PPUSH
17177: CALL_OW 88
// DialogueOff ;
17181: CALL_OW 7
// ComMoveXY ( amPatrol , 28 , 36 ) ;
17185: LD_EXP 81
17189: PPUSH
17190: LD_INT 28
17192: PPUSH
17193: LD_INT 36
17195: PPUSH
17196: CALL_OW 111
// ChangeMissionObjectives ( MScholtzeOut ) ;
17200: LD_STRING MScholtzeOut
17202: PPUSH
17203: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
17207: LD_INT 49
17209: PPUSH
17210: LD_INT 3
17212: PPUSH
17213: LD_INT 1
17215: PPUSH
17216: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
17220: LD_INT 51
17222: PPUSH
17223: LD_INT 3
17225: PPUSH
17226: LD_INT 1
17228: PPUSH
17229: CALL_OW 322
// end ;
17233: END
// every 8 8$30 trigger IsPlaced ( Scholtze ) and scholtzeSpawnNearAmericans and not scholtzeSaved do
17234: LD_EXP 51
17238: PPUSH
17239: CALL_OW 305
17243: PUSH
17244: LD_EXP 6
17248: AND
17249: PUSH
17250: LD_EXP 7
17254: NOT
17255: AND
17256: IFFALSE 17265
17258: GO 17260
17260: DISABLE
// PrepareAmericanPatrol ;
17261: CALL 6630 0 0
17265: END
// every 0 0$1 trigger IsPlaced ( Scholtze ) and GetSide ( Scholtze ) = 6 and animalsSafeTime > 0 0$01 do var ape , tiger ;
17266: LD_EXP 51
17270: PPUSH
17271: CALL_OW 305
17275: PUSH
17276: LD_EXP 51
17280: PPUSH
17281: CALL_OW 255
17285: PUSH
17286: LD_INT 6
17288: EQUAL
17289: AND
17290: PUSH
17291: LD_EXP 44
17295: PUSH
17296: LD_INT 35
17298: GREATER
17299: AND
17300: IFFALSE 17476
17302: GO 17304
17304: DISABLE
17305: LD_INT 0
17307: PPUSH
17308: PPUSH
// begin enable ;
17309: ENABLE
// animalsSafeTime = animalsSafeTime - 0 0$01 ;
17310: LD_ADDR_EXP 44
17314: PUSH
17315: LD_EXP 44
17319: PUSH
17320: LD_INT 35
17322: MINUS
17323: ST_TO_ADDR
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
17324: LD_ADDR_VAR 0 1
17328: PUSH
17329: LD_INT 22
17331: PUSH
17332: LD_INT 0
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: PUSH
17339: LD_INT 25
17341: PUSH
17342: LD_INT 12
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PPUSH
17353: CALL_OW 69
17357: PUSH
17358: FOR_IN
17359: IFFALSE 17398
// GetAwayFromXY ( ape , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
17361: LD_VAR 0 1
17365: PPUSH
17366: LD_EXP 51
17370: PPUSH
17371: CALL_OW 250
17375: PPUSH
17376: LD_EXP 51
17380: PPUSH
17381: CALL_OW 251
17385: PPUSH
17386: LD_INT 12
17388: PPUSH
17389: LD_INT 0
17391: PPUSH
17392: CALL 9550 0 5
17396: GO 17358
17398: POP
17399: POP
// for tiger in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_tiger ] ] ) do
17400: LD_ADDR_VAR 0 2
17404: PUSH
17405: LD_INT 22
17407: PUSH
17408: LD_INT 0
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 25
17417: PUSH
17418: LD_INT 14
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PPUSH
17429: CALL_OW 69
17433: PUSH
17434: FOR_IN
17435: IFFALSE 17474
// GetAwayFromXY ( tiger , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
17437: LD_VAR 0 2
17441: PPUSH
17442: LD_EXP 51
17446: PPUSH
17447: CALL_OW 250
17451: PPUSH
17452: LD_EXP 51
17456: PPUSH
17457: CALL_OW 251
17461: PPUSH
17462: LD_INT 12
17464: PPUSH
17465: LD_INT 0
17467: PPUSH
17468: CALL 9550 0 5
17472: GO 17434
17474: POP
17475: POP
// end ;
17476: PPOPN 2
17478: END
// every 0 0$1 trigger See ( 1 , Scholtze ) and amPatrol and not scholtzeSaved do
17479: LD_INT 1
17481: PPUSH
17482: LD_EXP 51
17486: PPUSH
17487: CALL_OW 292
17491: PUSH
17492: LD_EXP 81
17496: AND
17497: PUSH
17498: LD_EXP 7
17502: NOT
17503: AND
17504: IFFALSE 17658
17506: GO 17508
17508: DISABLE
// begin enable ;
17509: ENABLE
// if not IsPlaced ( Scholtze ) then
17510: LD_EXP 51
17514: PPUSH
17515: CALL_OW 305
17519: NOT
17520: IFFALSE 17524
// exit ;
17522: GO 17658
// if Attack ( amPatrol [ 1 ] ) = Scholtze or Attack ( amPatrol [ 2 ] ) = Scholtze then
17524: LD_EXP 81
17528: PUSH
17529: LD_INT 1
17531: ARRAY
17532: PPUSH
17533: CALL 89034 0 1
17537: PUSH
17538: LD_EXP 51
17542: EQUAL
17543: PUSH
17544: LD_EXP 81
17548: PUSH
17549: LD_INT 2
17551: ARRAY
17552: PPUSH
17553: CALL 89034 0 1
17557: PUSH
17558: LD_EXP 51
17562: EQUAL
17563: OR
17564: IFFALSE 17658
// begin DialogueOn ;
17566: CALL_OW 6
// Say ( Scholtze , D4b-Sch-1 ) ;
17570: LD_EXP 51
17574: PPUSH
17575: LD_STRING D4b-Sch-1
17577: PPUSH
17578: CALL_OW 88
// Say ( amPatrol [ 2 ] , D4b-Sol1-1 ) ;
17582: LD_EXP 81
17586: PUSH
17587: LD_INT 2
17589: ARRAY
17590: PPUSH
17591: LD_STRING D4b-Sol1-1
17593: PPUSH
17594: CALL_OW 88
// Say ( amPatrol [ 1 ] , D4b-Sol2-1 ) ;
17598: LD_EXP 81
17602: PUSH
17603: LD_INT 1
17605: ARRAY
17606: PPUSH
17607: LD_STRING D4b-Sol2-1
17609: PPUSH
17610: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
17614: LD_EXP 51
17618: PPUSH
17619: LD_STRING D4b-Sch-2
17621: PPUSH
17622: CALL_OW 88
// Say ( Burlak , D4b-Bur-2 ) ;
17626: LD_EXP 45
17630: PPUSH
17631: LD_STRING D4b-Bur-2
17633: PPUSH
17634: CALL_OW 88
// DialogueOff ;
17638: CALL_OW 7
// Killunit ( Scholtze ) ;
17642: LD_EXP 51
17646: PPUSH
17647: CALL_OW 66
// ChangeMissionObjectives ( MScholtzeDel ) ;
17651: LD_STRING MScholtzeDel
17653: PPUSH
17654: CALL_OW 337
// end ; end ;
17658: END
// export function Dial_UpgradeWorkshop ( building ) ; var maleSci , maleOthers ; begin
17659: LD_INT 0
17661: PPUSH
17662: PPUSH
17663: PPUSH
// dialog_workshop = true ;
17664: LD_ADDR_EXP 8
17668: PUSH
17669: LD_INT 1
17671: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
17672: LD_INT 22
17674: PUSH
17675: LD_INT 3
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 30
17684: PUSH
17685: LD_INT 26
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PPUSH
17696: CALL_OW 69
17700: NOT
17701: IFFALSE 18011
// begin CenterNowOnUnits ( building ) ;
17703: LD_VAR 0 1
17707: PPUSH
17708: CALL_OW 87
// DialogueOn ;
17712: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
17716: LD_EXP 45
17720: PPUSH
17721: LD_STRING D3aa-Bur-1
17723: PPUSH
17724: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
17728: LD_EXP 51
17732: PPUSH
17733: CALL_OW 302
17737: PUSH
17738: LD_EXP 51
17742: PPUSH
17743: CALL_OW 255
17747: PUSH
17748: LD_INT 3
17750: EQUAL
17751: AND
17752: IFFALSE 17768
// Say ( Scholtze , D3aa-Sch-1 ) else
17754: LD_EXP 51
17758: PPUSH
17759: LD_STRING D3aa-Sch-1
17761: PPUSH
17762: CALL_OW 88
17766: GO 17995
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
17768: LD_ADDR_VAR 0 3
17772: PUSH
17773: LD_INT 22
17775: PUSH
17776: LD_INT 3
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PUSH
17783: LD_INT 21
17785: PUSH
17786: LD_INT 1
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PUSH
17793: LD_INT 25
17795: PUSH
17796: LD_INT 4
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: LD_INT 26
17805: PUSH
17806: LD_INT 1
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PUSH
17813: LD_INT 50
17815: PUSH
17816: EMPTY
17817: LIST
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: PPUSH
17826: CALL_OW 69
17830: PUSH
17831: LD_EXP 45
17835: PUSH
17836: LD_EXP 46
17840: PUSH
17841: LD_EXP 48
17845: PUSH
17846: LD_EXP 49
17850: PUSH
17851: LD_EXP 50
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: DIFF
17863: ST_TO_ADDR
// if maleSci then
17864: LD_VAR 0 3
17868: IFFALSE 17888
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
17870: LD_VAR 0 3
17874: PUSH
17875: LD_INT 1
17877: ARRAY
17878: PPUSH
17879: LD_STRING D3aa-Sci1-1
17881: PPUSH
17882: CALL_OW 88
17886: GO 17995
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
17888: LD_ADDR_VAR 0 4
17892: PUSH
17893: LD_INT 22
17895: PUSH
17896: LD_INT 3
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PUSH
17903: LD_INT 21
17905: PUSH
17906: LD_INT 1
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PUSH
17913: LD_INT 26
17915: PUSH
17916: LD_INT 1
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: LD_INT 50
17925: PUSH
17926: EMPTY
17927: LIST
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: PPUSH
17935: CALL_OW 69
17939: PUSH
17940: LD_EXP 45
17944: PUSH
17945: LD_EXP 46
17949: PUSH
17950: LD_EXP 48
17954: PUSH
17955: LD_EXP 49
17959: PUSH
17960: LD_EXP 50
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: DIFF
17972: ST_TO_ADDR
// if maleOthers then
17973: LD_VAR 0 4
17977: IFFALSE 17995
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) end ;
17979: LD_VAR 0 4
17983: PUSH
17984: LD_INT 1
17986: ARRAY
17987: PPUSH
17988: LD_STRING D3aa-Sci1-1
17990: PPUSH
17991: CALL_OW 88
// end ; Say ( Burlak , D3aa-Bur-2 ) ;
17995: LD_EXP 45
17999: PPUSH
18000: LD_STRING D3aa-Bur-2
18002: PPUSH
18003: CALL_OW 88
// DialogueOff ;
18007: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
18011: LD_STRING M3
18013: PPUSH
18014: CALL_OW 337
// end ;
18018: LD_VAR 0 2
18022: RET
// every 0 0$1 trigger not dialog_amSupportTroops do var amUnit ;
18023: LD_EXP 9
18027: NOT
18028: IFFALSE 18185
18030: GO 18032
18032: DISABLE
18033: LD_INT 0
18035: PPUSH
// begin enable ;
18036: ENABLE
// for amUnit in amSupportTroops do
18037: LD_ADDR_VAR 0 1
18041: PUSH
18042: LD_EXP 80
18046: PUSH
18047: FOR_IN
18048: IFFALSE 18183
// begin if See ( 3 , amUnit ) then
18050: LD_INT 3
18052: PPUSH
18053: LD_VAR 0 1
18057: PPUSH
18058: CALL_OW 292
18062: IFFALSE 18181
// begin dialog_amSupportTroops = true ;
18064: LD_ADDR_EXP 9
18068: PUSH
18069: LD_INT 1
18071: ST_TO_ADDR
// CenterNowOnUnits ( amUnit ) ;
18072: LD_VAR 0 1
18076: PPUSH
18077: CALL_OW 87
// DialogueOn ;
18081: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D3b-RSol1-1 ,  , false ) ;
18085: LD_INT 22
18087: PUSH
18088: LD_INT 3
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 21
18097: PUSH
18098: LD_INT 1
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 26
18107: PUSH
18108: LD_INT 1
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: LIST
18119: PPUSH
18120: CALL_OW 69
18124: PPUSH
18125: LD_STRING D3b-RSol1-1
18127: PPUSH
18128: LD_STRING 
18130: PPUSH
18131: LD_INT 0
18133: PPUSH
18134: CALL 7313 0 4
// if IsOK ( Gnyevko ) then
18138: LD_EXP 46
18142: PPUSH
18143: CALL_OW 302
18147: IFFALSE 18161
// Say ( Gnyevko , D3b-Gny-1 ) ;
18149: LD_EXP 46
18153: PPUSH
18154: LD_STRING D3b-Gny-1
18156: PPUSH
18157: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
18161: LD_EXP 45
18165: PPUSH
18166: LD_STRING D3b-Bur-1
18168: PPUSH
18169: CALL_OW 88
// DialogueOff ;
18173: CALL_OW 7
// exit ;
18177: POP
18178: POP
18179: GO 18185
// end ; end ;
18181: GO 18047
18183: POP
18184: POP
// end ;
18185: PPOPN 1
18187: END
// every 2 2$0 trigger dialog_amSupportTroops do
18188: LD_EXP 9
18192: IFFALSE 18273
18194: GO 18196
18196: DISABLE
// begin if IsOK ( Kovalyuk ) then
18197: LD_EXP 48
18201: PPUSH
18202: CALL_OW 302
18206: IFFALSE 18220
// Say ( Kovalyuk , D3b-Kov-1 ) ;
18208: LD_EXP 48
18212: PPUSH
18213: LD_STRING D3b-Kov-1
18215: PPUSH
18216: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D3b-RSol1-2 ,  , false ) ;
18220: LD_INT 22
18222: PUSH
18223: LD_INT 3
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: LD_INT 21
18232: PUSH
18233: LD_INT 1
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 26
18242: PUSH
18243: LD_INT 1
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: LIST
18254: PPUSH
18255: CALL_OW 69
18259: PPUSH
18260: LD_STRING D3b-RSol1-2
18262: PPUSH
18263: LD_STRING 
18265: PPUSH
18266: LD_INT 0
18268: PPUSH
18269: CALL 7313 0 4
// end ;
18273: END
// every 0 0$1 trigger timeToPrepareAttack < 0 0$01 do
18274: LD_EXP 37
18278: PUSH
18279: LD_INT 35
18281: LESS
18282: IFFALSE 18510
18284: GO 18286
18286: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
18287: LD_EXP 58
18291: PPUSH
18292: CALL_OW 87
// InGameOn ;
18296: CALL_OW 8
// DialogueOn ;
18300: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
18304: LD_EXP 58
18308: PPUSH
18309: LD_STRING D5-Kur-1
18311: PPUSH
18312: CALL_OW 94
// case Query ( QVehicles ) of 1 :
18316: LD_STRING QVehicles
18318: PPUSH
18319: CALL_OW 97
18323: PUSH
18324: LD_INT 1
18326: DOUBLE
18327: EQUAL
18328: IFTRUE 18332
18330: GO 18375
18332: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
18333: LD_EXP 45
18337: PPUSH
18338: LD_STRING D6a-Bur-1
18340: PPUSH
18341: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
18345: LD_EXP 58
18349: PPUSH
18350: LD_STRING D6a-Kur-1
18352: PPUSH
18353: CALL_OW 94
// meetNearOmicronBase = true ;
18357: LD_ADDR_EXP 19
18361: PUSH
18362: LD_INT 1
18364: ST_TO_ADDR
// kurinCheckVehicles = true ;
18365: LD_ADDR_EXP 18
18369: PUSH
18370: LD_INT 1
18372: ST_TO_ADDR
// end ; 2 :
18373: GO 18502
18375: LD_INT 2
18377: DOUBLE
18378: EQUAL
18379: IFTRUE 18383
18381: GO 18430
18383: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
18384: LD_EXP 45
18388: PPUSH
18389: LD_STRING D6b-Bur-1
18391: PPUSH
18392: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
18396: LD_EXP 58
18400: PPUSH
18401: LD_STRING D6b-Kur-1
18403: PPUSH
18404: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
18408: LD_EXP 45
18412: PPUSH
18413: LD_STRING D6b-Bur-2
18415: PPUSH
18416: CALL_OW 88
// meetNearOmicronBase = true ;
18420: LD_ADDR_EXP 19
18424: PUSH
18425: LD_INT 1
18427: ST_TO_ADDR
// end ; 3 :
18428: GO 18502
18430: LD_INT 3
18432: DOUBLE
18433: EQUAL
18434: IFTRUE 18438
18436: GO 18501
18438: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
18439: LD_EXP 45
18443: PPUSH
18444: LD_STRING D6c-Bur-1
18446: PPUSH
18447: CALL_OW 88
// Say ( Kurin , D6c-Kur-1 ) ;
18451: LD_EXP 58
18455: PPUSH
18456: LD_STRING D6c-Kur-1
18458: PPUSH
18459: CALL_OW 88
// Say ( Burlak , D6c-Bur-2 ) ;
18463: LD_EXP 45
18467: PPUSH
18468: LD_STRING D6c-Bur-2
18470: PPUSH
18471: CALL_OW 88
// kurinGiveMoreTime = true ;
18475: LD_ADDR_EXP 13
18479: PUSH
18480: LD_INT 1
18482: ST_TO_ADDR
// kurinOpinion = 0 ;
18483: LD_ADDR_EXP 26
18487: PUSH
18488: LD_INT 0
18490: ST_TO_ADDR
// counterIndex = 4 ;
18491: LD_ADDR_EXP 86
18495: PUSH
18496: LD_INT 4
18498: ST_TO_ADDR
// end ; end ;
18499: GO 18502
18501: POP
// InGameOff ;
18502: CALL_OW 9
// DialogueOff ;
18506: CALL_OW 7
// end ;
18510: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
18511: LD_EXP 14
18515: PUSH
18516: LD_INT 35
18518: LESS
18519: PUSH
18520: LD_EXP 13
18524: AND
18525: IFFALSE 18568
18527: GO 18529
18529: DISABLE
// begin DialogueOn ;
18530: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
18534: LD_EXP 58
18538: PPUSH
18539: LD_STRING D6c-Kur-2
18541: PPUSH
18542: CALL_OW 94
// DialogueOff ;
18546: CALL_OW 7
// meetNearOmicronBase = true ;
18550: LD_ADDR_EXP 19
18554: PUSH
18555: LD_INT 1
18557: ST_TO_ADDR
// ComEnterUnit ( Sikorski , omikron ) ;
18558: LD_INT 290
18560: PPUSH
18561: LD_INT 64
18563: PPUSH
18564: CALL_OW 120
// end ;
18568: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs ;
18569: LD_EXP 19
18573: IFFALSE 19174
18575: GO 18577
18577: DISABLE
18578: LD_INT 0
18580: PPUSH
18581: PPUSH
18582: PPUSH
18583: PPUSH
18584: PPUSH
// begin mechs = [ ] ;
18585: LD_ADDR_VAR 0 3
18589: PUSH
18590: EMPTY
18591: ST_TO_ADDR
// vehs = [ ] ;
18592: LD_ADDR_VAR 0 4
18596: PUSH
18597: EMPTY
18598: ST_TO_ADDR
// haveVehs = 0 ;
18599: LD_ADDR_VAR 0 5
18603: PUSH
18604: LD_INT 0
18606: ST_TO_ADDR
// uc_side = 6 ;
18607: LD_ADDR_OWVAR 20
18611: PUSH
18612: LD_INT 6
18614: ST_TO_ADDR
// uc_nation = 3 ;
18615: LD_ADDR_OWVAR 21
18619: PUSH
18620: LD_INT 3
18622: ST_TO_ADDR
// for i := 1 to 2 do
18623: LD_ADDR_VAR 0 1
18627: PUSH
18628: DOUBLE
18629: LD_INT 1
18631: DEC
18632: ST_TO_ADDR
18633: LD_INT 2
18635: PUSH
18636: FOR_TO
18637: IFFALSE 18736
// begin PrepareMechanic ( false , 2 ) ;
18639: LD_INT 0
18641: PPUSH
18642: LD_INT 2
18644: PPUSH
18645: CALL_OW 383
// mech = CreateHuman ;
18649: LD_ADDR_VAR 0 2
18653: PUSH
18654: CALL_OW 44
18658: ST_TO_ADDR
// mechs = mechs ^ mech ;
18659: LD_ADDR_VAR 0 3
18663: PUSH
18664: LD_VAR 0 3
18668: PUSH
18669: LD_VAR 0 2
18673: ADD
18674: ST_TO_ADDR
// PlaceHumanInUnit ( mech , kirovDepot ) ;
18675: LD_VAR 0 2
18679: PPUSH
18680: LD_EXP 64
18684: PPUSH
18685: CALL_OW 52
// ComExitBuilding ( mech ) ;
18689: LD_VAR 0 2
18693: PPUSH
18694: CALL_OW 122
// wait ( 0 0$1 ) ;
18698: LD_INT 35
18700: PPUSH
18701: CALL_OW 67
// AddComMoveXY ( mech , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
18705: LD_VAR 0 2
18709: PPUSH
18710: LD_EXP 57
18714: PPUSH
18715: CALL_OW 250
18719: PPUSH
18720: LD_EXP 57
18724: PPUSH
18725: CALL_OW 251
18729: PPUSH
18730: CALL_OW 171
// end ;
18734: GO 18636
18736: POP
18737: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] ] ) = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) then
18738: LD_INT 22
18740: PUSH
18741: LD_INT 3
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 21
18750: PUSH
18751: LD_INT 2
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 23
18760: PUSH
18761: LD_INT 3
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: LIST
18772: PPUSH
18773: CALL_OW 69
18777: PUSH
18778: LD_INT 22
18780: PUSH
18781: LD_INT 3
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 21
18790: PUSH
18791: LD_INT 1
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: PPUSH
18802: CALL_OW 69
18806: EQUAL
18807: IFFALSE 18817
// produceOnlyForYou = true ;
18809: LD_ADDR_EXP 17
18813: PUSH
18814: LD_INT 1
18816: ST_TO_ADDR
// wait ( 0 0$20 ) ;
18817: LD_INT 700
18819: PPUSH
18820: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + 2 then
18824: LD_INT 22
18826: PUSH
18827: LD_INT 3
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 21
18836: PUSH
18837: LD_INT 2
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 23
18846: PUSH
18847: LD_INT 3
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: LIST
18858: PPUSH
18859: CALL_OW 69
18863: PUSH
18864: LD_INT 22
18866: PUSH
18867: LD_INT 3
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 21
18876: PUSH
18877: LD_INT 1
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PPUSH
18888: CALL_OW 69
18892: PUSH
18893: LD_INT 2
18895: PLUS
18896: GREATEREQUAL
18897: IFFALSE 19144
// begin vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_occupied ] ] ] ) [ 1 ] ;
18899: LD_ADDR_VAR 0 4
18903: PUSH
18904: LD_VAR 0 4
18908: PUSH
18909: LD_INT 22
18911: PUSH
18912: LD_INT 3
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 21
18921: PUSH
18922: LD_INT 2
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 23
18931: PUSH
18932: LD_INT 3
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 3
18941: PUSH
18942: LD_INT 59
18944: PUSH
18945: EMPTY
18946: LIST
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: PPUSH
18958: CALL_OW 69
18962: PUSH
18963: LD_INT 1
18965: ARRAY
18966: ADD
18967: ST_TO_ADDR
// vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_occupied ] ] ] ) [ 2 ] ;
18968: LD_ADDR_VAR 0 4
18972: PUSH
18973: LD_VAR 0 4
18977: PUSH
18978: LD_INT 22
18980: PUSH
18981: LD_INT 3
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 21
18990: PUSH
18991: LD_INT 2
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: LD_INT 23
19000: PUSH
19001: LD_INT 3
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 3
19010: PUSH
19011: LD_INT 59
19013: PUSH
19014: EMPTY
19015: LIST
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: PPUSH
19027: CALL_OW 69
19031: PUSH
19032: LD_INT 2
19034: ARRAY
19035: ADD
19036: ST_TO_ADDR
// kirovAttackVehicles = kirovAttackVehicles ^ vehs ;
19037: LD_ADDR_EXP 73
19041: PUSH
19042: LD_EXP 73
19046: PUSH
19047: LD_VAR 0 4
19051: ADD
19052: ST_TO_ADDR
// SetSide ( vehs , 6 ) ;
19053: LD_VAR 0 4
19057: PPUSH
19058: LD_INT 6
19060: PPUSH
19061: CALL_OW 235
// produceMoreVehicles = true ;
19065: LD_ADDR_EXP 16
19069: PUSH
19070: LD_INT 1
19072: ST_TO_ADDR
// ComEnterUnit ( mechs [ 1 ] , vehs [ 1 ] ) ;
19073: LD_VAR 0 3
19077: PUSH
19078: LD_INT 1
19080: ARRAY
19081: PPUSH
19082: LD_VAR 0 4
19086: PUSH
19087: LD_INT 1
19089: ARRAY
19090: PPUSH
19091: CALL_OW 120
// ComEnterUnit ( mechs [ 2 ] , vehs [ 2 ] ) ;
19095: LD_VAR 0 3
19099: PUSH
19100: LD_INT 2
19102: ARRAY
19103: PPUSH
19104: LD_VAR 0 4
19108: PUSH
19109: LD_INT 2
19111: ARRAY
19112: PPUSH
19113: CALL_OW 120
// if kurinCheckVehicles and not kurinOpinion = 0 then
19117: LD_EXP 18
19121: PUSH
19122: LD_EXP 26
19126: PUSH
19127: LD_INT 0
19129: EQUAL
19130: NOT
19131: AND
19132: IFFALSE 19142
// kurinOpinion = 1 ;
19134: LD_ADDR_EXP 26
19138: PUSH
19139: LD_INT 1
19141: ST_TO_ADDR
// end else
19142: GO 19174
// begin if kurinCheckVehicles then
19144: LD_EXP 18
19148: IFFALSE 19174
// begin DialogueOn ;
19150: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
19154: LD_EXP 58
19158: PPUSH
19159: LD_STRING D6d-Kur-1
19161: PPUSH
19162: CALL_OW 94
// DialogueOff ;
19166: CALL_OW 7
// Lose_Vehicles ;
19170: CALL 13677 0 0
// end ; end ; end ;
19174: PPOPN 5
19176: END
// every 0 0$1 trigger meetNearOmicronBase do
19177: LD_EXP 19
19181: IFFALSE 19314
19183: GO 19185
19185: DISABLE
// begin spawnCrates = false ;
19186: LD_ADDR_EXP 5
19190: PUSH
19191: LD_INT 0
19193: ST_TO_ADDR
// MC_SetScanArea ( 1 , OmicronScanArea ) ;
19194: LD_INT 1
19196: PPUSH
19197: LD_INT 18
19199: PPUSH
19200: CALL 47615 0 2
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
19204: LD_INT 6
19206: PPUSH
19207: LD_INT 1
19209: PPUSH
19210: LD_INT 2
19212: PPUSH
19213: LD_INT 1
19215: PPUSH
19216: CALL_OW 80
// SetRestrict ( b_depot , 3 , false ) ;
19220: LD_INT 0
19222: PPUSH
19223: LD_INT 3
19225: PPUSH
19226: LD_INT 0
19228: PPUSH
19229: CALL_OW 324
// ChangeMissionObjectives ( M3a ) ;
19233: LD_STRING M3a
19235: PPUSH
19236: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
19240: LD_STRING M5
19242: PPUSH
19243: CALL_OW 337
// SetAreaMapShow ( MeetArea , 1 ) ;
19247: LD_INT 15
19249: PPUSH
19250: LD_INT 1
19252: PPUSH
19253: CALL_OW 424
// ComMoveXY ( kirovAttackVehicles , 75 , 38 ) ;
19257: LD_EXP 73
19261: PPUSH
19262: LD_INT 75
19264: PPUSH
19265: LD_INT 38
19267: PPUSH
19268: CALL_OW 111
// ComMoveXY ( kirovAttackCargo , 75 , 38 ) ;
19272: LD_EXP 72
19276: PPUSH
19277: LD_INT 75
19279: PPUSH
19280: LD_INT 38
19282: PPUSH
19283: CALL_OW 111
// counterIndex = 2 ;
19287: LD_ADDR_EXP 86
19291: PUSH
19292: LD_INT 2
19294: ST_TO_ADDR
// if not kurinOpinion = 0 then
19295: LD_EXP 26
19299: PUSH
19300: LD_INT 0
19302: EQUAL
19303: NOT
19304: IFFALSE 19314
// kurinOpinion = 1 ;
19306: LD_ADDR_EXP 26
19310: PUSH
19311: LD_INT 1
19313: ST_TO_ADDR
// end ;
19314: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 2 do
19315: LD_EXP 15
19319: PUSH
19320: LD_INT 35
19322: LESS
19323: PUSH
19324: LD_EXP 86
19328: PUSH
19329: LD_INT 2
19331: EQUAL
19332: AND
19333: IFFALSE 19382
19335: GO 19337
19337: DISABLE
// begin DialogueOn ;
19338: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
19342: LD_EXP 58
19346: PPUSH
19347: LD_STRING D7a-Kur-1
19349: PPUSH
19350: CALL_OW 94
// DialogueOff ;
19354: CALL_OW 7
// counterIndex = 3 ;
19358: LD_ADDR_EXP 86
19362: PUSH
19363: LD_INT 3
19365: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
19366: LD_ADDR_EXP 15
19370: PUSH
19371: LD_INT 4200
19373: ST_TO_ADDR
// kurinOpinion = 0 ;
19374: LD_ADDR_EXP 26
19378: PUSH
19379: LD_INT 0
19381: ST_TO_ADDR
// end ;
19382: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 3 do
19383: LD_EXP 15
19387: PUSH
19388: LD_INT 35
19390: LESS
19391: PUSH
19392: LD_EXP 86
19396: PUSH
19397: LD_INT 3
19399: EQUAL
19400: AND
19401: IFFALSE 19410
19403: GO 19405
19405: DISABLE
// Lose_Delay ;
19406: CALL 13707 0 0
19410: END
// every 0 0$1 trigger meetNearOmicronBase and FilterUnitsExceptArea ( MeetArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
19411: LD_EXP 19
19415: PUSH
19416: LD_INT 15
19418: PPUSH
19419: LD_INT 22
19421: PUSH
19422: LD_INT 3
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 21
19431: PUSH
19432: LD_INT 1
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PPUSH
19443: CALL_OW 71
19447: PUSH
19448: LD_INT 0
19450: EQUAL
19451: AND
19452: IFFALSE 19540
19454: GO 19456
19456: DISABLE
// begin counterEnable = false ;
19457: LD_ADDR_EXP 85
19461: PUSH
19462: LD_INT 0
19464: ST_TO_ADDR
// Display_strings = [ ] ;
19465: LD_ADDR_OWVAR 47
19469: PUSH
19470: EMPTY
19471: ST_TO_ADDR
// SetAreaMapShow ( MeetArea , 0 ) ;
19472: LD_INT 15
19474: PPUSH
19475: LD_INT 0
19477: PPUSH
19478: CALL_OW 424
// canExitBattlefield = false ;
19482: LD_ADDR_EXP 24
19486: PUSH
19487: LD_INT 0
19489: ST_TO_ADDR
// DialogueOn ;
19490: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
19494: LD_EXP 45
19498: PPUSH
19499: LD_STRING D7-Bur-1
19501: PPUSH
19502: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
19506: LD_EXP 58
19510: PPUSH
19511: LD_STRING D7-Kur-1
19513: PPUSH
19514: CALL_OW 94
// DialogueOff ;
19518: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
19522: LD_STRING M5a
19524: PPUSH
19525: CALL_OW 337
// Query ( QRefuel ) ;
19529: LD_STRING QRefuel
19531: PPUSH
19532: CALL_OW 97
// KirovAttackOmicron ;
19536: CALL 12233 0 0
// end ;
19540: END
// every 0 0$1 trigger not canExitBattlefield do var unit ;
19541: LD_EXP 24
19545: NOT
19546: IFFALSE 19714
19548: GO 19550
19550: DISABLE
19551: LD_INT 0
19553: PPUSH
// begin enable ;
19554: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
19555: LD_ADDR_VAR 0 1
19559: PUSH
19560: LD_INT 22
19562: PUSH
19563: LD_INT 3
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 2
19572: PUSH
19573: LD_INT 21
19575: PUSH
19576: LD_INT 1
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 21
19585: PUSH
19586: LD_INT 2
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: LIST
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PPUSH
19602: CALL_OW 69
19606: PUSH
19607: FOR_IN
19608: IFFALSE 19712
// if not IsInArea ( unit , OmicronBattlefieldArea ) and UnitFilter ( unit , [ [ f_occupied ] , [ f_type , unit_vehicle ] ] ) then
19610: LD_VAR 0 1
19614: PPUSH
19615: LD_INT 27
19617: PPUSH
19618: CALL_OW 308
19622: NOT
19623: PUSH
19624: LD_VAR 0 1
19628: PPUSH
19629: LD_INT 59
19631: PUSH
19632: EMPTY
19633: LIST
19634: PUSH
19635: LD_INT 21
19637: PUSH
19638: LD_INT 2
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PPUSH
19649: CALL_OW 72
19653: AND
19654: IFFALSE 19710
// begin ComMoveToArea ( unit , OmicronBattlefieldArea ) ;
19656: LD_VAR 0 1
19660: PPUSH
19661: LD_INT 27
19663: PPUSH
19664: CALL_OW 113
// if not dialog_stop then
19668: LD_EXP 11
19672: NOT
19673: IFFALSE 19710
// begin dialog_stop = true ;
19675: LD_ADDR_EXP 11
19679: PUSH
19680: LD_INT 1
19682: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
19683: LD_EXP 58
19687: PPUSH
19688: LD_STRING D12-Kur-1
19690: PPUSH
19691: CALL_OW 88
// wait ( 0 0$5 ) ;
19695: LD_INT 175
19697: PPUSH
19698: CALL_OW 67
// dialog_stop = false ;
19702: LD_ADDR_EXP 11
19706: PUSH
19707: LD_INT 0
19709: ST_TO_ADDR
// end ; end ;
19710: GO 19607
19712: POP
19713: POP
// end ;
19714: PPOPN 1
19716: END
// every 0 0$1 do var unit ;
19717: GO 19719
19719: DISABLE
19720: LD_INT 0
19722: PPUSH
// begin enable ;
19723: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
19724: LD_ADDR_VAR 0 1
19728: PUSH
19729: LD_INT 22
19731: PUSH
19732: LD_INT 3
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 2
19741: PUSH
19742: LD_INT 21
19744: PUSH
19745: LD_INT 1
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 21
19754: PUSH
19755: LD_INT 2
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: LIST
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PPUSH
19771: CALL_OW 69
19775: PUSH
19776: FOR_IN
19777: IFFALSE 19852
// if IsInArea ( unit , SecondKurinBase ) then
19779: LD_VAR 0 1
19783: PPUSH
19784: LD_INT 21
19786: PPUSH
19787: CALL_OW 308
19791: IFFALSE 19850
// begin ComMoveXY ( unit , 200 , 114 ) ;
19793: LD_VAR 0 1
19797: PPUSH
19798: LD_INT 200
19800: PPUSH
19801: LD_INT 114
19803: PPUSH
19804: CALL_OW 111
// if not dialog_stop then
19808: LD_EXP 11
19812: NOT
19813: IFFALSE 19850
// begin dialog_stop = true ;
19815: LD_ADDR_EXP 11
19819: PUSH
19820: LD_INT 1
19822: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
19823: LD_EXP 58
19827: PPUSH
19828: LD_STRING D12-Kur-1
19830: PPUSH
19831: CALL_OW 88
// wait ( 0 0$5 ) ;
19835: LD_INT 175
19837: PPUSH
19838: CALL_OW 67
// dialog_stop = false ;
19842: LD_ADDR_EXP 11
19846: PUSH
19847: LD_INT 0
19849: ST_TO_ADDR
// end ; end ;
19850: GO 19776
19852: POP
19853: POP
// end ;
19854: PPOPN 1
19856: END
// every 0 0$1 trigger not meetNearOmicronBase and IsOK ( Sikorski ) do var unit , randDialog ;
19857: LD_EXP 19
19861: NOT
19862: PUSH
19863: LD_INT 290
19865: PPUSH
19866: CALL_OW 302
19870: AND
19871: IFFALSE 20187
19873: GO 19875
19875: DISABLE
19876: LD_INT 0
19878: PPUSH
19879: PPUSH
// begin enable ;
19880: ENABLE
// for unit in FilterUnitsInArea ( OmicronBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
19881: LD_ADDR_VAR 0 1
19885: PUSH
19886: LD_INT 13
19888: PPUSH
19889: LD_INT 22
19891: PUSH
19892: LD_INT 1
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 2
19901: PUSH
19902: LD_INT 21
19904: PUSH
19905: LD_INT 1
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 21
19914: PUSH
19915: LD_INT 2
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 21
19924: PUSH
19925: LD_INT 3
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PPUSH
19942: CALL_OW 70
19946: PUSH
19947: FOR_IN
19948: IFFALSE 20185
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
19950: LD_VAR 0 1
19954: PPUSH
19955: LD_INT 22
19957: PUSH
19958: LD_INT 3
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 2
19967: PUSH
19968: LD_INT 21
19970: PUSH
19971: LD_INT 1
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 21
19980: PUSH
19981: LD_INT 2
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: LIST
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PPUSH
19997: CALL_OW 69
20001: PPUSH
20002: LD_VAR 0 1
20006: PPUSH
20007: CALL_OW 74
20011: PPUSH
20012: CALL_OW 296
20016: PUSH
20017: LD_INT 17
20019: LESS
20020: IFFALSE 20183
// begin ComMoveXY ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) , 69 , 85 ) ;
20022: LD_INT 22
20024: PUSH
20025: LD_INT 3
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 2
20034: PUSH
20035: LD_INT 21
20037: PUSH
20038: LD_INT 1
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 21
20047: PUSH
20048: LD_INT 2
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: LIST
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PPUSH
20064: CALL_OW 69
20068: PPUSH
20069: LD_VAR 0 1
20073: PPUSH
20074: CALL_OW 74
20078: PPUSH
20079: LD_INT 69
20081: PPUSH
20082: LD_INT 85
20084: PPUSH
20085: CALL_OW 111
// randDialog = rand ( 1 , 2 ) ;
20089: LD_ADDR_VAR 0 2
20093: PUSH
20094: LD_INT 1
20096: PPUSH
20097: LD_INT 2
20099: PPUSH
20100: CALL_OW 12
20104: ST_TO_ADDR
// if not dialog_stop then
20105: LD_EXP 11
20109: NOT
20110: IFFALSE 20183
// begin dialog_stop = true ;
20112: LD_ADDR_EXP 11
20116: PUSH
20117: LD_INT 1
20119: ST_TO_ADDR
// if randDialog = 1 or not IsOK ( Gnyevko ) then
20120: LD_VAR 0 2
20124: PUSH
20125: LD_INT 1
20127: EQUAL
20128: PUSH
20129: LD_EXP 46
20133: PPUSH
20134: CALL_OW 302
20138: NOT
20139: OR
20140: IFFALSE 20156
// SayRadio ( Kurin , D11-Kur-1 ) else
20142: LD_EXP 58
20146: PPUSH
20147: LD_STRING D11-Kur-1
20149: PPUSH
20150: CALL_OW 94
20154: GO 20168
// Say ( Gnyevko , D11-Gny-1 ) ;
20156: LD_EXP 46
20160: PPUSH
20161: LD_STRING D11-Gny-1
20163: PPUSH
20164: CALL_OW 88
// wait ( 0 0$5 ) ;
20168: LD_INT 175
20170: PPUSH
20171: CALL_OW 67
// dialog_stop = false ;
20175: LD_ADDR_EXP 11
20179: PUSH
20180: LD_INT 0
20182: ST_TO_ADDR
// end ; end ;
20183: GO 19947
20185: POP
20186: POP
// end ;
20187: PPOPN 2
20189: END
// every 0 0$1 trigger IsDead ( Sikorski ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 5 do var tmpUs , tmpRu , building ;
20190: LD_INT 290
20192: PPUSH
20193: CALL_OW 301
20197: PUSH
20198: LD_INT 22
20200: PUSH
20201: LD_INT 1
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 21
20210: PUSH
20211: LD_INT 1
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PPUSH
20222: CALL_OW 69
20226: PUSH
20227: LD_INT 5
20229: LESS
20230: AND
20231: IFFALSE 21627
20233: GO 20235
20235: DISABLE
20236: LD_INT 0
20238: PPUSH
20239: PPUSH
20240: PPUSH
// begin omicronSurrender = true ;
20241: LD_ADDR_EXP 23
20245: PUSH
20246: LD_INT 1
20248: ST_TO_ADDR
// canExitBattlefield = true ;
20249: LD_ADDR_EXP 24
20253: PUSH
20254: LD_INT 1
20256: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , false ) ;
20257: LD_INT 1
20259: PPUSH
20260: LD_INT 3
20262: PPUSH
20263: LD_INT 1
20265: PPUSH
20266: LD_INT 0
20268: PPUSH
20269: CALL_OW 80
// SetAttitude ( 2 , 3 , att_friend , true ) ;
20273: LD_INT 2
20275: PPUSH
20276: LD_INT 3
20278: PPUSH
20279: LD_INT 1
20281: PPUSH
20282: LD_INT 1
20284: PPUSH
20285: CALL_OW 80
// CenterNowOnUnits ( Burlak ) ;
20289: LD_EXP 45
20293: PPUSH
20294: CALL_OW 87
// uc_side = 1 ;
20298: LD_ADDR_OWVAR 20
20302: PUSH
20303: LD_INT 1
20305: ST_TO_ADDR
// uc_nation = 1 ;
20306: LD_ADDR_OWVAR 21
20310: PUSH
20311: LD_INT 1
20313: ST_TO_ADDR
// hc_name :=  ;
20314: LD_ADDR_OWVAR 26
20318: PUSH
20319: LD_STRING 
20321: ST_TO_ADDR
// hc_gallery =  ;
20322: LD_ADDR_OWVAR 33
20326: PUSH
20327: LD_STRING 
20329: ST_TO_ADDR
// PrepareSoldier ( sex_male , 1 ) ;
20330: LD_INT 1
20332: PPUSH
20333: LD_INT 1
20335: PPUSH
20336: CALL_OW 381
// tmpUs = CreateHuman ;
20340: LD_ADDR_VAR 0 1
20344: PUSH
20345: CALL_OW 44
20349: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ f_side , 3 ] ) ) ;
20350: LD_INT 22
20352: PUSH
20353: LD_INT 3
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PPUSH
20360: CALL_OW 69
20364: PPUSH
20365: CALL_OW 141
// InGameOn ;
20369: CALL_OW 8
// DialogueOn ;
20373: CALL_OW 6
// CenterOnXY ( 26 , 33 ) ;
20377: LD_INT 26
20379: PPUSH
20380: LD_INT 33
20382: PPUSH
20383: CALL_OW 84
// SayRadio ( tmpUs , D8-Sol1-1 ) ;
20387: LD_VAR 0 1
20391: PPUSH
20392: LD_STRING D8-Sol1-1
20394: PPUSH
20395: CALL_OW 94
// if IsOk ( Kovalyuk ) then
20399: LD_EXP 48
20403: PPUSH
20404: CALL_OW 302
20408: IFFALSE 20422
// Say ( Kovalyuk , D8-Kov-1 ) ;
20410: LD_EXP 48
20414: PPUSH
20415: LD_STRING D8-Kov-1
20417: PPUSH
20418: CALL_OW 88
// tmpRu = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
20422: LD_ADDR_VAR 0 2
20426: PUSH
20427: LD_INT 22
20429: PUSH
20430: LD_INT 3
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: LD_INT 21
20439: PUSH
20440: LD_INT 1
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 26
20449: PUSH
20450: LD_INT 1
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: LIST
20461: PPUSH
20462: CALL_OW 69
20466: PPUSH
20467: LD_STRING D8-RSol1-1
20469: PPUSH
20470: LD_STRING 
20472: PPUSH
20473: LD_INT 0
20475: PPUSH
20476: CALL 7313 0 4
20480: ST_TO_ADDR
// if IsOk ( Gnyevko ) then
20481: LD_EXP 46
20485: PPUSH
20486: CALL_OW 302
20490: IFFALSE 20504
// Say ( Gnyevko , D8-Gny-1 ) ;
20492: LD_EXP 46
20496: PPUSH
20497: LD_STRING D8-Gny-1
20499: PPUSH
20500: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff tmpRu , D8-RSol2-1 ,  , false ) ;
20504: LD_INT 22
20506: PUSH
20507: LD_INT 3
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 21
20516: PUSH
20517: LD_INT 1
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: PUSH
20524: LD_INT 26
20526: PUSH
20527: LD_INT 1
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: LIST
20538: PPUSH
20539: CALL_OW 69
20543: PUSH
20544: LD_VAR 0 2
20548: DIFF
20549: PPUSH
20550: LD_STRING D8-RSol2-1
20552: PPUSH
20553: LD_STRING 
20555: PPUSH
20556: LD_INT 0
20558: PPUSH
20559: CALL 7313 0 4
// DialogueOff ;
20563: CALL_OW 7
// PrepareArabian ;
20567: CALL 6788 0 0
// CenterNowOnXY ( 234 , 122 ) ;
20571: LD_INT 234
20573: PPUSH
20574: LD_INT 122
20576: PPUSH
20577: CALL_OW 86
// ComAgressiveMove ( northGroup , 221 , 110 ) ;
20581: LD_EXP 83
20585: PPUSH
20586: LD_INT 221
20588: PPUSH
20589: LD_INT 110
20591: PPUSH
20592: CALL_OW 114
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
20596: LD_EXP 84
20600: PPUSH
20601: LD_INT 21
20603: PUSH
20604: LD_INT 1
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PPUSH
20611: CALL_OW 72
20615: PPUSH
20616: LD_INT 221
20618: PPUSH
20619: LD_INT 110
20621: PPUSH
20622: CALL_OW 114
// wait ( 0 0$7 ) ;
20626: LD_INT 245
20628: PPUSH
20629: CALL_OW 67
// AddComAgressiveMove ( southGroup , 221 , 110 ) ;
20633: LD_EXP 84
20637: PPUSH
20638: LD_INT 221
20640: PPUSH
20641: LD_INT 110
20643: PPUSH
20644: CALL_OW 174
// wait ( 0 0$8 ) ;
20648: LD_INT 280
20650: PPUSH
20651: CALL_OW 67
// music_nat = nation_arabian ;
20655: LD_ADDR_OWVAR 71
20659: PUSH
20660: LD_INT 2
20662: ST_TO_ADDR
// music_class = music_combat ;
20663: LD_ADDR_OWVAR 72
20667: PUSH
20668: LD_INT 1
20670: ST_TO_ADDR
// game_speed = 4 ;
20671: LD_ADDR_OWVAR 65
20675: PUSH
20676: LD_INT 4
20678: ST_TO_ADDR
// DialogueOn ;
20679: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-1 ) ;
20683: LD_EXP 78
20687: PPUSH
20688: LD_STRING D9-Gri-1
20690: PPUSH
20691: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
20695: LD_EXP 58
20699: PPUSH
20700: LD_STRING D9-Kur-1
20702: PPUSH
20703: CALL_OW 94
// DialogueOff ;
20707: CALL_OW 7
// wait ( 0 0$2.5 ) ;
20711: LD_INT 88
20713: PPUSH
20714: CALL_OW 67
// DialogueOn ;
20718: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-2 ) ;
20722: LD_EXP 78
20726: PPUSH
20727: LD_STRING D9-Gri-2
20729: PPUSH
20730: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
20734: LD_EXP 58
20738: PPUSH
20739: LD_STRING D9-Kur-2
20741: PPUSH
20742: CALL_OW 94
// DialogueOff ;
20746: CALL_OW 7
// repeat wait ( 1 ) ;
20750: LD_INT 1
20752: PPUSH
20753: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
20757: LD_EXP 78
20761: PPUSH
20762: CALL_OW 256
20766: PUSH
20767: LD_INT 1000
20769: LESS
20770: IFFALSE 20750
// DialogueOn ;
20772: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-3 ) ;
20776: LD_EXP 78
20780: PPUSH
20781: LD_STRING D9-Gri-3
20783: PPUSH
20784: CALL_OW 94
// DialogueOff ;
20788: CALL_OW 7
// KillUnit ( Grishko ) ;
20792: LD_EXP 78
20796: PPUSH
20797: CALL_OW 66
// wait ( 0 0$12 ) ;
20801: LD_INT 420
20803: PPUSH
20804: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
20808: LD_EXP 58
20812: PPUSH
20813: CALL_OW 87
// SayRadio ( Kurin , D9-Kur-3 ) ;
20817: LD_EXP 58
20821: PPUSH
20822: LD_STRING D9-Kur-3
20824: PPUSH
20825: CALL_OW 94
// CenterNowOnXY ( 176 , 110 ) ;
20829: LD_INT 176
20831: PPUSH
20832: LD_INT 110
20834: PPUSH
20835: CALL_OW 86
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
20839: LD_EXP 84
20843: PPUSH
20844: LD_INT 21
20846: PUSH
20847: LD_INT 1
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PPUSH
20854: CALL_OW 72
20858: PPUSH
20859: LD_INT 221
20861: PPUSH
20862: LD_INT 110
20864: PPUSH
20865: CALL_OW 114
// ComAgressiveMove ( northGroup , 161 , 109 ) ;
20869: LD_EXP 83
20873: PPUSH
20874: LD_INT 161
20876: PPUSH
20877: LD_INT 109
20879: PPUSH
20880: CALL_OW 114
// wait ( 0 0$7 ) ;
20884: LD_INT 245
20886: PPUSH
20887: CALL_OW 67
// ComAgressiveMove ( southGroup , 161 , 109 ) ;
20891: LD_EXP 84
20895: PPUSH
20896: LD_INT 161
20898: PPUSH
20899: LD_INT 109
20901: PPUSH
20902: CALL_OW 114
// wait ( 0 0$11 ) ;
20906: LD_INT 385
20908: PPUSH
20909: CALL_OW 67
// ComEnterUnit ( Kurin , kirovDepot ) ;
20913: LD_EXP 58
20917: PPUSH
20918: LD_EXP 64
20922: PPUSH
20923: CALL_OW 120
// DialogueOn ;
20927: CALL_OW 6
// SayRadio ( Kurin , D9a-Kur-1 ) ;
20931: LD_EXP 58
20935: PPUSH
20936: LD_STRING D9a-Kur-1
20938: PPUSH
20939: CALL_OW 94
// Say ( Burlak , D9a-Bur-1 ) ;
20943: LD_EXP 45
20947: PPUSH
20948: LD_STRING D9a-Bur-1
20950: PPUSH
20951: CALL_OW 88
// SayRadio ( Kurin , D9a-Kur-2 ) ;
20955: LD_EXP 58
20959: PPUSH
20960: LD_STRING D9a-Kur-2
20962: PPUSH
20963: CALL_OW 94
// DialogueOff ;
20967: CALL_OW 7
// ComExitBuilding ( survivorsArabianAttack ) ;
20971: LD_EXP 75
20975: PPUSH
20976: CALL_OW 122
// wait ( 0 0$1 ) ;
20980: LD_INT 35
20982: PPUSH
20983: CALL_OW 67
// ComMoveXY ( survivorsArabianAttack , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
20987: LD_EXP 75
20991: PPUSH
20992: LD_EXP 57
20996: PPUSH
20997: CALL_OW 250
21001: PPUSH
21002: LD_EXP 57
21006: PPUSH
21007: CALL_OW 251
21011: PPUSH
21012: CALL_OW 111
// immortalSurvivors = true ;
21016: LD_ADDR_EXP 25
21020: PUSH
21021: LD_INT 1
21023: ST_TO_ADDR
// for tmpUS in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
21024: LD_ADDR_VAR 0 1
21028: PUSH
21029: LD_INT 22
21031: PUSH
21032: LD_INT 1
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: LD_INT 21
21041: PUSH
21042: LD_INT 1
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 50
21051: PUSH
21052: EMPTY
21053: LIST
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: LIST
21059: PPUSH
21060: CALL_OW 69
21064: PUSH
21065: FOR_IN
21066: IFFALSE 21079
// RemoveUnit ( tmpUS ) ;
21068: LD_VAR 0 1
21072: PPUSH
21073: CALL_OW 64
21077: GO 21065
21079: POP
21080: POP
// wait ( 0 0$33 ) ;
21081: LD_INT 1155
21083: PPUSH
21084: CALL_OW 67
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
21088: LD_INT 22
21090: PUSH
21091: LD_INT 3
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 21
21100: PUSH
21101: LD_INT 1
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PPUSH
21112: CALL_OW 69
21116: PPUSH
21117: CALL_OW 121
// wait ( 0 0$1 ) ;
21121: LD_INT 35
21123: PPUSH
21124: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
21128: LD_INT 22
21130: PUSH
21131: LD_INT 3
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 21
21140: PUSH
21141: LD_INT 1
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PPUSH
21152: CALL_OW 69
21156: PPUSH
21157: LD_EXP 59
21161: PPUSH
21162: CALL_OW 250
21166: PPUSH
21167: LD_EXP 59
21171: PPUSH
21172: CALL_OW 251
21176: PPUSH
21177: CALL_OW 111
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
21181: LD_INT 22
21183: PUSH
21184: LD_INT 3
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: LD_INT 21
21193: PUSH
21194: LD_INT 1
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PPUSH
21205: CALL_OW 69
21209: PPUSH
21210: LD_EXP 59
21214: PPUSH
21215: CALL_OW 250
21219: PPUSH
21220: LD_EXP 59
21224: PPUSH
21225: CALL_OW 251
21229: PPUSH
21230: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
21234: LD_EXP 45
21238: PPUSH
21239: CALL_OW 87
// wait ( 0 0$1 ) ;
21243: LD_INT 35
21245: PPUSH
21246: CALL_OW 67
// until GetDistUnits ( Burlak , Popov ) < 6 ;
21250: LD_EXP 45
21254: PPUSH
21255: LD_EXP 59
21259: PPUSH
21260: CALL_OW 296
21264: PUSH
21265: LD_INT 6
21267: LESS
21268: IFFALSE 21181
// CenterNowOnUnits ( [ Burlak , Popov ] ) ;
21270: LD_EXP 45
21274: PUSH
21275: LD_EXP 59
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PPUSH
21284: CALL_OW 87
// ComTurnUnit ( Burlak , Popov ) ;
21288: LD_EXP 45
21292: PPUSH
21293: LD_EXP 59
21297: PPUSH
21298: CALL_OW 119
// ComTurnUnit ( Popov , Burlak ) ;
21302: LD_EXP 59
21306: PPUSH
21307: LD_EXP 45
21311: PPUSH
21312: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
21316: LD_EXP 45
21320: PPUSH
21321: LD_STRING D10a-Bur-1
21323: PPUSH
21324: CALL_OW 88
// Say ( Popov , D10a-Pop-1 ) ;
21328: LD_EXP 59
21332: PPUSH
21333: LD_STRING D10a-Pop-1
21335: PPUSH
21336: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
21340: LD_EXP 45
21344: PPUSH
21345: LD_STRING D10a-Bur-2
21347: PPUSH
21348: CALL_OW 88
// Say ( Popov , D10a-Pop-2 ) ;
21352: LD_EXP 59
21356: PPUSH
21357: LD_STRING D10a-Pop-2
21359: PPUSH
21360: CALL_OW 88
// Say ( Burlak , D10a-Bur-3 ) ;
21364: LD_EXP 45
21368: PPUSH
21369: LD_STRING D10a-Bur-3
21371: PPUSH
21372: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
21376: LD_EXP 59
21380: PPUSH
21381: LD_STRING D10a-Pop-3
21383: PPUSH
21384: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
21388: LD_EXP 45
21392: PPUSH
21393: LD_STRING D10a-Bur-4
21395: PPUSH
21396: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
21400: LD_EXP 59
21404: PPUSH
21405: LD_STRING D10a-Pop-4
21407: PPUSH
21408: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
21412: LD_EXP 45
21416: PPUSH
21417: LD_STRING D10a-Bur-5
21419: PPUSH
21420: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
21424: LD_EXP 59
21428: PPUSH
21429: LD_STRING D10a-Pop-5
21431: PPUSH
21432: CALL_OW 88
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 83 , 157 ) ;
21436: LD_INT 22
21438: PUSH
21439: LD_INT 3
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 21
21448: PUSH
21449: LD_INT 1
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PPUSH
21460: CALL_OW 69
21464: PPUSH
21465: LD_INT 83
21467: PPUSH
21468: LD_INT 157
21470: PPUSH
21471: CALL_OW 111
// ComMoveXY ( survivorsArabianAttack , 83 , 157 ) ;
21475: LD_EXP 75
21479: PPUSH
21480: LD_INT 83
21482: PPUSH
21483: LD_INT 157
21485: PPUSH
21486: CALL_OW 111
// repeat CenterNowOnUnits ( Burlak ) ;
21490: LD_EXP 45
21494: PPUSH
21495: CALL_OW 87
// wait ( 0 0$1 ) ;
21499: LD_INT 35
21501: PPUSH
21502: CALL_OW 67
// until GetDistUnits ( Burlak , beriaDepot ) > 19 ;
21506: LD_EXP 45
21510: PPUSH
21511: LD_EXP 57
21515: PPUSH
21516: CALL_OW 296
21520: PUSH
21521: LD_INT 19
21523: GREATER
21524: IFFALSE 21490
// CenterNowOnXY ( 113 , 96 ) ;
21526: LD_INT 113
21528: PPUSH
21529: LD_INT 96
21531: PPUSH
21532: CALL_OW 86
// canDestroyBeriaBase = true ;
21536: LD_ADDR_EXP 28
21540: PUSH
21541: LD_INT 1
21543: ST_TO_ADDR
// for building in FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
21544: LD_ADDR_VAR 0 3
21548: PUSH
21549: LD_INT 26
21551: PPUSH
21552: LD_INT 22
21554: PUSH
21555: LD_INT 3
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 21
21564: PUSH
21565: LD_INT 3
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PPUSH
21576: CALL_OW 70
21580: PUSH
21581: FOR_IN
21582: IFFALSE 21614
// begin AddComAttackUnit ( northGroup , building ) ;
21584: LD_EXP 83
21588: PPUSH
21589: LD_VAR 0 3
21593: PPUSH
21594: CALL_OW 175
// AddComAttackUnit ( southGroup , building ) ;
21598: LD_EXP 84
21602: PPUSH
21603: LD_VAR 0 3
21607: PPUSH
21608: CALL_OW 175
// end ;
21612: GO 21581
21614: POP
21615: POP
// wait ( 0 0$35 ) ;
21616: LD_INT 1225
21618: PPUSH
21619: CALL_OW 67
// FinishMission ;
21623: CALL 13722 0 0
// end ;
21627: PPOPN 3
21629: END
// every 1 trigger immortalSurvivors do var unit ;
21630: LD_EXP 25
21634: IFFALSE 21672
21636: GO 21638
21638: DISABLE
21639: LD_INT 0
21641: PPUSH
// begin enable ;
21642: ENABLE
// for unit in survivorsArabianAttack do
21643: LD_ADDR_VAR 0 1
21647: PUSH
21648: LD_EXP 75
21652: PUSH
21653: FOR_IN
21654: IFFALSE 21670
// SetLives ( unit , 1000 ) ;
21656: LD_VAR 0 1
21660: PPUSH
21661: LD_INT 1000
21663: PPUSH
21664: CALL_OW 234
21668: GO 21653
21670: POP
21671: POP
// end ; end_of_file
21672: PPOPN 1
21674: END
// every 0 0$30 do
21675: GO 21677
21677: DISABLE
// CreateCratesXYR ( rand ( 3 , 5 ) , 76 , 111 , 5 , true ) ;
21678: LD_INT 3
21680: PPUSH
21681: LD_INT 5
21683: PPUSH
21684: CALL_OW 12
21688: PPUSH
21689: LD_INT 76
21691: PPUSH
21692: LD_INT 111
21694: PPUSH
21695: LD_INT 5
21697: PPUSH
21698: LD_INT 1
21700: PPUSH
21701: CALL_OW 56
21705: END
// every 0 0$10 trigger spawnCrates do var spawnDelay ;
21706: LD_EXP 5
21710: IFFALSE 21782
21712: GO 21714
21714: DISABLE
21715: LD_INT 0
21717: PPUSH
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
21718: LD_INT 50
21720: PPUSH
21721: LD_INT 4200
21723: PPUSH
21724: CALL_OW 12
21728: PPUSH
21729: CALL_OW 67
// wait ( spawnDelay * 0 0$5 ) ;
21733: LD_VAR 0 1
21737: PUSH
21738: LD_INT 175
21740: MUL
21741: PPUSH
21742: CALL_OW 67
// spawnDelay = spawnDelay + 1 ;
21746: LD_ADDR_VAR 0 1
21750: PUSH
21751: LD_VAR 0 1
21755: PUSH
21756: LD_INT 1
21758: PLUS
21759: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
21760: LD_INT 3
21762: PPUSH
21763: LD_INT 5
21765: PPUSH
21766: CALL_OW 12
21770: PPUSH
21771: LD_INT 6
21773: PPUSH
21774: LD_INT 1
21776: PPUSH
21777: CALL_OW 55
// enable ;
21781: ENABLE
// end ; end_of_file
21782: PPOPN 1
21784: END
// export counterEnable , counterIndex ; every 0 0$1 trigger counterEnable do
21785: LD_EXP 85
21789: IFFALSE 21952
21791: GO 21793
21793: DISABLE
// begin enable ;
21794: ENABLE
// case counterIndex of 1 :
21795: LD_EXP 86
21799: PUSH
21800: LD_INT 1
21802: DOUBLE
21803: EQUAL
21804: IFTRUE 21808
21806: GO 21825
21808: POP
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ; 2 :
21809: LD_ADDR_EXP 37
21813: PUSH
21814: LD_EXP 37
21818: PUSH
21819: LD_INT 35
21821: MINUS
21822: ST_TO_ADDR
21823: GO 21952
21825: LD_INT 2
21827: DOUBLE
21828: EQUAL
21829: IFTRUE 21833
21831: GO 21867
21833: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
21834: LD_ADDR_OWVAR 47
21838: PUSH
21839: LD_STRING #Ru03-1
21841: PUSH
21842: LD_EXP 15
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
21851: LD_ADDR_EXP 15
21855: PUSH
21856: LD_EXP 15
21860: PUSH
21861: LD_INT 35
21863: MINUS
21864: ST_TO_ADDR
// end ; 3 :
21865: GO 21952
21867: LD_INT 3
21869: DOUBLE
21870: EQUAL
21871: IFTRUE 21875
21873: GO 21909
21875: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
21876: LD_ADDR_OWVAR 47
21880: PUSH
21881: LD_STRING #Ru03-2
21883: PUSH
21884: LD_EXP 15
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
21893: LD_ADDR_EXP 15
21897: PUSH
21898: LD_EXP 15
21902: PUSH
21903: LD_INT 35
21905: MINUS
21906: ST_TO_ADDR
// end ; 4 :
21907: GO 21952
21909: LD_INT 4
21911: DOUBLE
21912: EQUAL
21913: IFTRUE 21917
21915: GO 21951
21917: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
21918: LD_ADDR_OWVAR 47
21922: PUSH
21923: LD_STRING #Ru03-3
21925: PUSH
21926: LD_EXP 14
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
21935: LD_ADDR_EXP 14
21939: PUSH
21940: LD_EXP 14
21944: PUSH
21945: LD_INT 35
21947: MINUS
21948: ST_TO_ADDR
// end ; end ;
21949: GO 21952
21951: POP
// end ; end_of_file
21952: END
// every 7 7$0 do
21953: GO 21955
21955: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 0 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
21956: LD_INT 3
21958: PPUSH
21959: LD_INT 1
21961: PPUSH
21962: LD_INT 0
21964: PPUSH
21965: LD_INT 7
21967: PUSH
21968: LD_INT 9
21970: PUSH
21971: LD_INT 8
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 1
21981: PPUSH
21982: LD_INT 3
21984: PPUSH
21985: CALL_OW 12
21989: ARRAY
21990: PPUSH
21991: CALL 6183 0 4
21995: END
// every 12 12$0 do
21996: GO 21998
21998: DISABLE
// PrepareAmericanSupportTroops ( 4 , 2 , 1 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
21999: LD_INT 4
22001: PPUSH
22002: LD_INT 2
22004: PPUSH
22005: LD_INT 1
22007: PPUSH
22008: LD_INT 7
22010: PUSH
22011: LD_INT 9
22013: PUSH
22014: LD_INT 8
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 1
22024: PPUSH
22025: LD_INT 3
22027: PPUSH
22028: CALL_OW 12
22032: ARRAY
22033: PPUSH
22034: CALL 6183 0 4
22038: END
// every 20 20$0 do
22039: GO 22041
22041: DISABLE
// PrepareAmericanSupportTroops ( 6 , 2 , 0 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
22042: LD_INT 6
22044: PPUSH
22045: LD_INT 2
22047: PPUSH
22048: LD_INT 0
22050: PPUSH
22051: LD_INT 7
22053: PUSH
22054: LD_INT 9
22056: PUSH
22057: LD_INT 8
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 1
22067: PPUSH
22068: LD_INT 3
22070: PPUSH
22071: CALL_OW 12
22075: ARRAY
22076: PPUSH
22077: CALL 6183 0 4
22081: END
// every 23 23$0 do
22082: GO 22084
22084: DISABLE
// PrepareAmericanSupportTroops ( 5 , 1 , 3 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ; end_of_file
22085: LD_INT 5
22087: PPUSH
22088: LD_INT 1
22090: PPUSH
22091: LD_INT 3
22093: PPUSH
22094: LD_INT 7
22096: PUSH
22097: LD_INT 9
22099: PUSH
22100: LD_INT 8
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 1
22110: PPUSH
22111: LD_INT 3
22113: PPUSH
22114: CALL_OW 12
22118: ARRAY
22119: PPUSH
22120: CALL 6183 0 4
22124: END
// export function Nef_PrepareNature ; var i , un ; begin
22125: LD_INT 0
22127: PPUSH
22128: PPUSH
22129: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
22130: LD_ADDR_VAR 0 2
22134: PUSH
22135: DOUBLE
22136: LD_INT 1
22138: DEC
22139: ST_TO_ADDR
22140: LD_EXP 29
22144: PUSH
22145: LD_INT 1
22147: ARRAY
22148: PUSH
22149: FOR_TO
22150: IFFALSE 22260
// begin uc_side = 0 ;
22152: LD_ADDR_OWVAR 20
22156: PUSH
22157: LD_INT 0
22159: ST_TO_ADDR
// uc_nation = nation_nature ;
22160: LD_ADDR_OWVAR 21
22164: PUSH
22165: LD_INT 0
22167: ST_TO_ADDR
// hc_class = class_apeman ;
22168: LD_ADDR_OWVAR 28
22172: PUSH
22173: LD_INT 12
22175: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
22176: LD_ADDR_OWVAR 31
22180: PUSH
22181: LD_EXP 30
22185: PUSH
22186: LD_INT 1
22188: ARRAY
22189: PUSH
22190: LD_EXP 30
22194: PUSH
22195: LD_INT 2
22197: ARRAY
22198: PUSH
22199: LD_EXP 30
22203: PUSH
22204: LD_INT 3
22206: ARRAY
22207: PUSH
22208: LD_EXP 30
22212: PUSH
22213: LD_INT 4
22215: ARRAY
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
22223: LD_ADDR_OWVAR 35
22227: PUSH
22228: LD_EXP 31
22232: ST_TO_ADDR
// un = CreateHuman ;
22233: LD_ADDR_VAR 0 3
22237: PUSH
22238: CALL_OW 44
22242: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
22243: LD_VAR 0 3
22247: PPUSH
22248: LD_INT 28
22250: PPUSH
22251: LD_INT 0
22253: PPUSH
22254: CALL_OW 49
// end ;
22258: GO 22149
22260: POP
22261: POP
// for i := 1 to animalsAmount [ 2 ] do
22262: LD_ADDR_VAR 0 2
22266: PUSH
22267: DOUBLE
22268: LD_INT 1
22270: DEC
22271: ST_TO_ADDR
22272: LD_EXP 29
22276: PUSH
22277: LD_INT 2
22279: ARRAY
22280: PUSH
22281: FOR_TO
22282: IFFALSE 22392
// begin uc_side = 0 ;
22284: LD_ADDR_OWVAR 20
22288: PUSH
22289: LD_INT 0
22291: ST_TO_ADDR
// uc_nation = nation_nature ;
22292: LD_ADDR_OWVAR 21
22296: PUSH
22297: LD_INT 0
22299: ST_TO_ADDR
// hc_class = class_phororhacos ;
22300: LD_ADDR_OWVAR 28
22304: PUSH
22305: LD_INT 18
22307: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
22308: LD_ADDR_OWVAR 31
22312: PUSH
22313: LD_EXP 30
22317: PUSH
22318: LD_INT 1
22320: ARRAY
22321: PUSH
22322: LD_EXP 30
22326: PUSH
22327: LD_INT 2
22329: ARRAY
22330: PUSH
22331: LD_EXP 30
22335: PUSH
22336: LD_INT 3
22338: ARRAY
22339: PUSH
22340: LD_EXP 30
22344: PUSH
22345: LD_INT 4
22347: ARRAY
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
22355: LD_ADDR_OWVAR 35
22359: PUSH
22360: LD_EXP 31
22364: ST_TO_ADDR
// un = CreateHuman ;
22365: LD_ADDR_VAR 0 3
22369: PUSH
22370: CALL_OW 44
22374: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
22375: LD_VAR 0 3
22379: PPUSH
22380: LD_INT 28
22382: PPUSH
22383: LD_INT 0
22385: PPUSH
22386: CALL_OW 49
// end ;
22390: GO 22281
22392: POP
22393: POP
// for i := 1 to animalsAmount [ 3 ] do
22394: LD_ADDR_VAR 0 2
22398: PUSH
22399: DOUBLE
22400: LD_INT 1
22402: DEC
22403: ST_TO_ADDR
22404: LD_EXP 29
22408: PUSH
22409: LD_INT 3
22411: ARRAY
22412: PUSH
22413: FOR_TO
22414: IFFALSE 22524
// begin uc_side = 0 ;
22416: LD_ADDR_OWVAR 20
22420: PUSH
22421: LD_INT 0
22423: ST_TO_ADDR
// uc_nation = nation_nature ;
22424: LD_ADDR_OWVAR 21
22428: PUSH
22429: LD_INT 0
22431: ST_TO_ADDR
// hc_class = class_tiger ;
22432: LD_ADDR_OWVAR 28
22436: PUSH
22437: LD_INT 14
22439: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
22440: LD_ADDR_OWVAR 31
22444: PUSH
22445: LD_EXP 30
22449: PUSH
22450: LD_INT 1
22452: ARRAY
22453: PUSH
22454: LD_EXP 30
22458: PUSH
22459: LD_INT 2
22461: ARRAY
22462: PUSH
22463: LD_EXP 30
22467: PUSH
22468: LD_INT 3
22470: ARRAY
22471: PUSH
22472: LD_EXP 30
22476: PUSH
22477: LD_INT 4
22479: ARRAY
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
22487: LD_ADDR_OWVAR 35
22491: PUSH
22492: LD_EXP 31
22496: ST_TO_ADDR
// un = CreateHuman ;
22497: LD_ADDR_VAR 0 3
22501: PUSH
22502: CALL_OW 44
22506: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
22507: LD_VAR 0 3
22511: PPUSH
22512: LD_INT 28
22514: PPUSH
22515: LD_INT 0
22517: PPUSH
22518: CALL_OW 49
// end ;
22522: GO 22413
22524: POP
22525: POP
// for i := 1 to animalsAmount [ 4 ] do
22526: LD_ADDR_VAR 0 2
22530: PUSH
22531: DOUBLE
22532: LD_INT 1
22534: DEC
22535: ST_TO_ADDR
22536: LD_EXP 29
22540: PUSH
22541: LD_INT 4
22543: ARRAY
22544: PUSH
22545: FOR_TO
22546: IFFALSE 22656
// begin uc_side = 0 ;
22548: LD_ADDR_OWVAR 20
22552: PUSH
22553: LD_INT 0
22555: ST_TO_ADDR
// uc_nation = nation_nature ;
22556: LD_ADDR_OWVAR 21
22560: PUSH
22561: LD_INT 0
22563: ST_TO_ADDR
// hc_class = 21 ;
22564: LD_ADDR_OWVAR 28
22568: PUSH
22569: LD_INT 21
22571: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
22572: LD_ADDR_OWVAR 31
22576: PUSH
22577: LD_EXP 30
22581: PUSH
22582: LD_INT 1
22584: ARRAY
22585: PUSH
22586: LD_EXP 30
22590: PUSH
22591: LD_INT 2
22593: ARRAY
22594: PUSH
22595: LD_EXP 30
22599: PUSH
22600: LD_INT 3
22602: ARRAY
22603: PUSH
22604: LD_EXP 30
22608: PUSH
22609: LD_INT 4
22611: ARRAY
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
22619: LD_ADDR_OWVAR 35
22623: PUSH
22624: LD_EXP 31
22628: ST_TO_ADDR
// un = CreateHuman ;
22629: LD_ADDR_VAR 0 3
22633: PUSH
22634: CALL_OW 44
22638: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
22639: LD_VAR 0 3
22643: PPUSH
22644: LD_INT 28
22646: PPUSH
22647: LD_INT 0
22649: PPUSH
22650: CALL_OW 49
// end ;
22654: GO 22545
22656: POP
22657: POP
// end ; end_of_file
22658: LD_VAR 0 1
22662: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
22663: LD_INT 0
22665: PPUSH
22666: PPUSH
// skirmish := false ;
22667: LD_ADDR_EXP 87
22671: PUSH
22672: LD_INT 0
22674: ST_TO_ADDR
// debug_mc := false ;
22675: LD_ADDR_EXP 88
22679: PUSH
22680: LD_INT 0
22682: ST_TO_ADDR
// mc_bases := [ ] ;
22683: LD_ADDR_EXP 89
22687: PUSH
22688: EMPTY
22689: ST_TO_ADDR
// mc_sides := [ ] ;
22690: LD_ADDR_EXP 115
22694: PUSH
22695: EMPTY
22696: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
22697: LD_ADDR_EXP 90
22701: PUSH
22702: EMPTY
22703: ST_TO_ADDR
// mc_building_repairs := [ ] ;
22704: LD_ADDR_EXP 91
22708: PUSH
22709: EMPTY
22710: ST_TO_ADDR
// mc_need_heal := [ ] ;
22711: LD_ADDR_EXP 92
22715: PUSH
22716: EMPTY
22717: ST_TO_ADDR
// mc_healers := [ ] ;
22718: LD_ADDR_EXP 93
22722: PUSH
22723: EMPTY
22724: ST_TO_ADDR
// mc_build_list := [ ] ;
22725: LD_ADDR_EXP 94
22729: PUSH
22730: EMPTY
22731: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
22732: LD_ADDR_EXP 121
22736: PUSH
22737: EMPTY
22738: ST_TO_ADDR
// mc_builders := [ ] ;
22739: LD_ADDR_EXP 95
22743: PUSH
22744: EMPTY
22745: ST_TO_ADDR
// mc_construct_list := [ ] ;
22746: LD_ADDR_EXP 96
22750: PUSH
22751: EMPTY
22752: ST_TO_ADDR
// mc_turret_list := [ ] ;
22753: LD_ADDR_EXP 97
22757: PUSH
22758: EMPTY
22759: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
22760: LD_ADDR_EXP 98
22764: PUSH
22765: EMPTY
22766: ST_TO_ADDR
// mc_miners := [ ] ;
22767: LD_ADDR_EXP 103
22771: PUSH
22772: EMPTY
22773: ST_TO_ADDR
// mc_mines := [ ] ;
22774: LD_ADDR_EXP 102
22778: PUSH
22779: EMPTY
22780: ST_TO_ADDR
// mc_minefields := [ ] ;
22781: LD_ADDR_EXP 104
22785: PUSH
22786: EMPTY
22787: ST_TO_ADDR
// mc_crates := [ ] ;
22788: LD_ADDR_EXP 105
22792: PUSH
22793: EMPTY
22794: ST_TO_ADDR
// mc_crates_collector := [ ] ;
22795: LD_ADDR_EXP 106
22799: PUSH
22800: EMPTY
22801: ST_TO_ADDR
// mc_crates_area := [ ] ;
22802: LD_ADDR_EXP 107
22806: PUSH
22807: EMPTY
22808: ST_TO_ADDR
// mc_vehicles := [ ] ;
22809: LD_ADDR_EXP 108
22813: PUSH
22814: EMPTY
22815: ST_TO_ADDR
// mc_attack := [ ] ;
22816: LD_ADDR_EXP 109
22820: PUSH
22821: EMPTY
22822: ST_TO_ADDR
// mc_produce := [ ] ;
22823: LD_ADDR_EXP 110
22827: PUSH
22828: EMPTY
22829: ST_TO_ADDR
// mc_defender := [ ] ;
22830: LD_ADDR_EXP 111
22834: PUSH
22835: EMPTY
22836: ST_TO_ADDR
// mc_parking := [ ] ;
22837: LD_ADDR_EXP 113
22841: PUSH
22842: EMPTY
22843: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
22844: LD_ADDR_EXP 99
22848: PUSH
22849: EMPTY
22850: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
22851: LD_ADDR_EXP 101
22855: PUSH
22856: EMPTY
22857: ST_TO_ADDR
// mc_scan := [ ] ;
22858: LD_ADDR_EXP 112
22862: PUSH
22863: EMPTY
22864: ST_TO_ADDR
// mc_scan_area := [ ] ;
22865: LD_ADDR_EXP 114
22869: PUSH
22870: EMPTY
22871: ST_TO_ADDR
// mc_tech := [ ] ;
22872: LD_ADDR_EXP 116
22876: PUSH
22877: EMPTY
22878: ST_TO_ADDR
// mc_class := [ ] ;
22879: LD_ADDR_EXP 130
22883: PUSH
22884: EMPTY
22885: ST_TO_ADDR
// mc_class_case_use := [ ] ;
22886: LD_ADDR_EXP 131
22890: PUSH
22891: EMPTY
22892: ST_TO_ADDR
// end ;
22893: LD_VAR 0 1
22897: RET
// export function MC_Kill ( base ) ; begin
22898: LD_INT 0
22900: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
22901: LD_ADDR_EXP 89
22905: PUSH
22906: LD_EXP 89
22910: PPUSH
22911: LD_VAR 0 1
22915: PPUSH
22916: EMPTY
22917: PPUSH
22918: CALL_OW 1
22922: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
22923: LD_ADDR_EXP 90
22927: PUSH
22928: LD_EXP 90
22932: PPUSH
22933: LD_VAR 0 1
22937: PPUSH
22938: EMPTY
22939: PPUSH
22940: CALL_OW 1
22944: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
22945: LD_ADDR_EXP 91
22949: PUSH
22950: LD_EXP 91
22954: PPUSH
22955: LD_VAR 0 1
22959: PPUSH
22960: EMPTY
22961: PPUSH
22962: CALL_OW 1
22966: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
22967: LD_ADDR_EXP 92
22971: PUSH
22972: LD_EXP 92
22976: PPUSH
22977: LD_VAR 0 1
22981: PPUSH
22982: EMPTY
22983: PPUSH
22984: CALL_OW 1
22988: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
22989: LD_ADDR_EXP 93
22993: PUSH
22994: LD_EXP 93
22998: PPUSH
22999: LD_VAR 0 1
23003: PPUSH
23004: EMPTY
23005: PPUSH
23006: CALL_OW 1
23010: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
23011: LD_ADDR_EXP 94
23015: PUSH
23016: LD_EXP 94
23020: PPUSH
23021: LD_VAR 0 1
23025: PPUSH
23026: EMPTY
23027: PPUSH
23028: CALL_OW 1
23032: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
23033: LD_ADDR_EXP 95
23037: PUSH
23038: LD_EXP 95
23042: PPUSH
23043: LD_VAR 0 1
23047: PPUSH
23048: EMPTY
23049: PPUSH
23050: CALL_OW 1
23054: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
23055: LD_ADDR_EXP 96
23059: PUSH
23060: LD_EXP 96
23064: PPUSH
23065: LD_VAR 0 1
23069: PPUSH
23070: EMPTY
23071: PPUSH
23072: CALL_OW 1
23076: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
23077: LD_ADDR_EXP 97
23081: PUSH
23082: LD_EXP 97
23086: PPUSH
23087: LD_VAR 0 1
23091: PPUSH
23092: EMPTY
23093: PPUSH
23094: CALL_OW 1
23098: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
23099: LD_ADDR_EXP 98
23103: PUSH
23104: LD_EXP 98
23108: PPUSH
23109: LD_VAR 0 1
23113: PPUSH
23114: EMPTY
23115: PPUSH
23116: CALL_OW 1
23120: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
23121: LD_ADDR_EXP 99
23125: PUSH
23126: LD_EXP 99
23130: PPUSH
23131: LD_VAR 0 1
23135: PPUSH
23136: EMPTY
23137: PPUSH
23138: CALL_OW 1
23142: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
23143: LD_ADDR_EXP 100
23147: PUSH
23148: LD_EXP 100
23152: PPUSH
23153: LD_VAR 0 1
23157: PPUSH
23158: LD_INT 0
23160: PPUSH
23161: CALL_OW 1
23165: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
23166: LD_ADDR_EXP 101
23170: PUSH
23171: LD_EXP 101
23175: PPUSH
23176: LD_VAR 0 1
23180: PPUSH
23181: EMPTY
23182: PPUSH
23183: CALL_OW 1
23187: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
23188: LD_ADDR_EXP 102
23192: PUSH
23193: LD_EXP 102
23197: PPUSH
23198: LD_VAR 0 1
23202: PPUSH
23203: EMPTY
23204: PPUSH
23205: CALL_OW 1
23209: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
23210: LD_ADDR_EXP 103
23214: PUSH
23215: LD_EXP 103
23219: PPUSH
23220: LD_VAR 0 1
23224: PPUSH
23225: EMPTY
23226: PPUSH
23227: CALL_OW 1
23231: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
23232: LD_ADDR_EXP 104
23236: PUSH
23237: LD_EXP 104
23241: PPUSH
23242: LD_VAR 0 1
23246: PPUSH
23247: EMPTY
23248: PPUSH
23249: CALL_OW 1
23253: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
23254: LD_ADDR_EXP 105
23258: PUSH
23259: LD_EXP 105
23263: PPUSH
23264: LD_VAR 0 1
23268: PPUSH
23269: EMPTY
23270: PPUSH
23271: CALL_OW 1
23275: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
23276: LD_ADDR_EXP 106
23280: PUSH
23281: LD_EXP 106
23285: PPUSH
23286: LD_VAR 0 1
23290: PPUSH
23291: EMPTY
23292: PPUSH
23293: CALL_OW 1
23297: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
23298: LD_ADDR_EXP 107
23302: PUSH
23303: LD_EXP 107
23307: PPUSH
23308: LD_VAR 0 1
23312: PPUSH
23313: EMPTY
23314: PPUSH
23315: CALL_OW 1
23319: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
23320: LD_ADDR_EXP 108
23324: PUSH
23325: LD_EXP 108
23329: PPUSH
23330: LD_VAR 0 1
23334: PPUSH
23335: EMPTY
23336: PPUSH
23337: CALL_OW 1
23341: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
23342: LD_ADDR_EXP 109
23346: PUSH
23347: LD_EXP 109
23351: PPUSH
23352: LD_VAR 0 1
23356: PPUSH
23357: EMPTY
23358: PPUSH
23359: CALL_OW 1
23363: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
23364: LD_ADDR_EXP 110
23368: PUSH
23369: LD_EXP 110
23373: PPUSH
23374: LD_VAR 0 1
23378: PPUSH
23379: EMPTY
23380: PPUSH
23381: CALL_OW 1
23385: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
23386: LD_ADDR_EXP 111
23390: PUSH
23391: LD_EXP 111
23395: PPUSH
23396: LD_VAR 0 1
23400: PPUSH
23401: EMPTY
23402: PPUSH
23403: CALL_OW 1
23407: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
23408: LD_ADDR_EXP 112
23412: PUSH
23413: LD_EXP 112
23417: PPUSH
23418: LD_VAR 0 1
23422: PPUSH
23423: EMPTY
23424: PPUSH
23425: CALL_OW 1
23429: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
23430: LD_ADDR_EXP 113
23434: PUSH
23435: LD_EXP 113
23439: PPUSH
23440: LD_VAR 0 1
23444: PPUSH
23445: EMPTY
23446: PPUSH
23447: CALL_OW 1
23451: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
23452: LD_ADDR_EXP 114
23456: PUSH
23457: LD_EXP 114
23461: PPUSH
23462: LD_VAR 0 1
23466: PPUSH
23467: EMPTY
23468: PPUSH
23469: CALL_OW 1
23473: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
23474: LD_ADDR_EXP 116
23478: PUSH
23479: LD_EXP 116
23483: PPUSH
23484: LD_VAR 0 1
23488: PPUSH
23489: EMPTY
23490: PPUSH
23491: CALL_OW 1
23495: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
23496: LD_ADDR_EXP 118
23500: PUSH
23501: LD_EXP 118
23505: PPUSH
23506: LD_VAR 0 1
23510: PPUSH
23511: EMPTY
23512: PPUSH
23513: CALL_OW 1
23517: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
23518: LD_ADDR_EXP 119
23522: PUSH
23523: LD_EXP 119
23527: PPUSH
23528: LD_VAR 0 1
23532: PPUSH
23533: EMPTY
23534: PPUSH
23535: CALL_OW 1
23539: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
23540: LD_ADDR_EXP 120
23544: PUSH
23545: LD_EXP 120
23549: PPUSH
23550: LD_VAR 0 1
23554: PPUSH
23555: EMPTY
23556: PPUSH
23557: CALL_OW 1
23561: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
23562: LD_ADDR_EXP 121
23566: PUSH
23567: LD_EXP 121
23571: PPUSH
23572: LD_VAR 0 1
23576: PPUSH
23577: EMPTY
23578: PPUSH
23579: CALL_OW 1
23583: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
23584: LD_ADDR_EXP 122
23588: PUSH
23589: LD_EXP 122
23593: PPUSH
23594: LD_VAR 0 1
23598: PPUSH
23599: EMPTY
23600: PPUSH
23601: CALL_OW 1
23605: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
23606: LD_ADDR_EXP 123
23610: PUSH
23611: LD_EXP 123
23615: PPUSH
23616: LD_VAR 0 1
23620: PPUSH
23621: EMPTY
23622: PPUSH
23623: CALL_OW 1
23627: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
23628: LD_ADDR_EXP 124
23632: PUSH
23633: LD_EXP 124
23637: PPUSH
23638: LD_VAR 0 1
23642: PPUSH
23643: EMPTY
23644: PPUSH
23645: CALL_OW 1
23649: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
23650: LD_ADDR_EXP 125
23654: PUSH
23655: LD_EXP 125
23659: PPUSH
23660: LD_VAR 0 1
23664: PPUSH
23665: EMPTY
23666: PPUSH
23667: CALL_OW 1
23671: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
23672: LD_ADDR_EXP 126
23676: PUSH
23677: LD_EXP 126
23681: PPUSH
23682: LD_VAR 0 1
23686: PPUSH
23687: EMPTY
23688: PPUSH
23689: CALL_OW 1
23693: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
23694: LD_ADDR_EXP 127
23698: PUSH
23699: LD_EXP 127
23703: PPUSH
23704: LD_VAR 0 1
23708: PPUSH
23709: EMPTY
23710: PPUSH
23711: CALL_OW 1
23715: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
23716: LD_ADDR_EXP 128
23720: PUSH
23721: LD_EXP 128
23725: PPUSH
23726: LD_VAR 0 1
23730: PPUSH
23731: EMPTY
23732: PPUSH
23733: CALL_OW 1
23737: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
23738: LD_ADDR_EXP 129
23742: PUSH
23743: LD_EXP 129
23747: PPUSH
23748: LD_VAR 0 1
23752: PPUSH
23753: EMPTY
23754: PPUSH
23755: CALL_OW 1
23759: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
23760: LD_ADDR_EXP 130
23764: PUSH
23765: LD_EXP 130
23769: PPUSH
23770: LD_VAR 0 1
23774: PPUSH
23775: EMPTY
23776: PPUSH
23777: CALL_OW 1
23781: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
23782: LD_ADDR_EXP 131
23786: PUSH
23787: LD_EXP 131
23791: PPUSH
23792: LD_VAR 0 1
23796: PPUSH
23797: LD_INT 0
23799: PPUSH
23800: CALL_OW 1
23804: ST_TO_ADDR
// end ;
23805: LD_VAR 0 2
23809: RET
// export function MC_Add ( side , units ) ; var base ; begin
23810: LD_INT 0
23812: PPUSH
23813: PPUSH
// base := mc_bases + 1 ;
23814: LD_ADDR_VAR 0 4
23818: PUSH
23819: LD_EXP 89
23823: PUSH
23824: LD_INT 1
23826: PLUS
23827: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
23828: LD_ADDR_EXP 115
23832: PUSH
23833: LD_EXP 115
23837: PPUSH
23838: LD_VAR 0 4
23842: PPUSH
23843: LD_VAR 0 1
23847: PPUSH
23848: CALL_OW 1
23852: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
23853: LD_ADDR_EXP 89
23857: PUSH
23858: LD_EXP 89
23862: PPUSH
23863: LD_VAR 0 4
23867: PPUSH
23868: LD_VAR 0 2
23872: PPUSH
23873: CALL_OW 1
23877: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
23878: LD_ADDR_EXP 90
23882: PUSH
23883: LD_EXP 90
23887: PPUSH
23888: LD_VAR 0 4
23892: PPUSH
23893: EMPTY
23894: PPUSH
23895: CALL_OW 1
23899: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
23900: LD_ADDR_EXP 91
23904: PUSH
23905: LD_EXP 91
23909: PPUSH
23910: LD_VAR 0 4
23914: PPUSH
23915: EMPTY
23916: PPUSH
23917: CALL_OW 1
23921: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
23922: LD_ADDR_EXP 92
23926: PUSH
23927: LD_EXP 92
23931: PPUSH
23932: LD_VAR 0 4
23936: PPUSH
23937: EMPTY
23938: PPUSH
23939: CALL_OW 1
23943: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
23944: LD_ADDR_EXP 93
23948: PUSH
23949: LD_EXP 93
23953: PPUSH
23954: LD_VAR 0 4
23958: PPUSH
23959: EMPTY
23960: PPUSH
23961: CALL_OW 1
23965: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
23966: LD_ADDR_EXP 94
23970: PUSH
23971: LD_EXP 94
23975: PPUSH
23976: LD_VAR 0 4
23980: PPUSH
23981: EMPTY
23982: PPUSH
23983: CALL_OW 1
23987: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
23988: LD_ADDR_EXP 95
23992: PUSH
23993: LD_EXP 95
23997: PPUSH
23998: LD_VAR 0 4
24002: PPUSH
24003: EMPTY
24004: PPUSH
24005: CALL_OW 1
24009: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
24010: LD_ADDR_EXP 96
24014: PUSH
24015: LD_EXP 96
24019: PPUSH
24020: LD_VAR 0 4
24024: PPUSH
24025: EMPTY
24026: PPUSH
24027: CALL_OW 1
24031: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
24032: LD_ADDR_EXP 97
24036: PUSH
24037: LD_EXP 97
24041: PPUSH
24042: LD_VAR 0 4
24046: PPUSH
24047: EMPTY
24048: PPUSH
24049: CALL_OW 1
24053: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
24054: LD_ADDR_EXP 98
24058: PUSH
24059: LD_EXP 98
24063: PPUSH
24064: LD_VAR 0 4
24068: PPUSH
24069: EMPTY
24070: PPUSH
24071: CALL_OW 1
24075: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
24076: LD_ADDR_EXP 99
24080: PUSH
24081: LD_EXP 99
24085: PPUSH
24086: LD_VAR 0 4
24090: PPUSH
24091: EMPTY
24092: PPUSH
24093: CALL_OW 1
24097: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
24098: LD_ADDR_EXP 100
24102: PUSH
24103: LD_EXP 100
24107: PPUSH
24108: LD_VAR 0 4
24112: PPUSH
24113: LD_INT 0
24115: PPUSH
24116: CALL_OW 1
24120: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
24121: LD_ADDR_EXP 101
24125: PUSH
24126: LD_EXP 101
24130: PPUSH
24131: LD_VAR 0 4
24135: PPUSH
24136: EMPTY
24137: PPUSH
24138: CALL_OW 1
24142: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
24143: LD_ADDR_EXP 102
24147: PUSH
24148: LD_EXP 102
24152: PPUSH
24153: LD_VAR 0 4
24157: PPUSH
24158: EMPTY
24159: PPUSH
24160: CALL_OW 1
24164: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
24165: LD_ADDR_EXP 103
24169: PUSH
24170: LD_EXP 103
24174: PPUSH
24175: LD_VAR 0 4
24179: PPUSH
24180: EMPTY
24181: PPUSH
24182: CALL_OW 1
24186: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
24187: LD_ADDR_EXP 104
24191: PUSH
24192: LD_EXP 104
24196: PPUSH
24197: LD_VAR 0 4
24201: PPUSH
24202: EMPTY
24203: PPUSH
24204: CALL_OW 1
24208: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
24209: LD_ADDR_EXP 105
24213: PUSH
24214: LD_EXP 105
24218: PPUSH
24219: LD_VAR 0 4
24223: PPUSH
24224: EMPTY
24225: PPUSH
24226: CALL_OW 1
24230: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
24231: LD_ADDR_EXP 106
24235: PUSH
24236: LD_EXP 106
24240: PPUSH
24241: LD_VAR 0 4
24245: PPUSH
24246: EMPTY
24247: PPUSH
24248: CALL_OW 1
24252: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
24253: LD_ADDR_EXP 107
24257: PUSH
24258: LD_EXP 107
24262: PPUSH
24263: LD_VAR 0 4
24267: PPUSH
24268: EMPTY
24269: PPUSH
24270: CALL_OW 1
24274: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
24275: LD_ADDR_EXP 108
24279: PUSH
24280: LD_EXP 108
24284: PPUSH
24285: LD_VAR 0 4
24289: PPUSH
24290: EMPTY
24291: PPUSH
24292: CALL_OW 1
24296: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
24297: LD_ADDR_EXP 109
24301: PUSH
24302: LD_EXP 109
24306: PPUSH
24307: LD_VAR 0 4
24311: PPUSH
24312: EMPTY
24313: PPUSH
24314: CALL_OW 1
24318: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
24319: LD_ADDR_EXP 110
24323: PUSH
24324: LD_EXP 110
24328: PPUSH
24329: LD_VAR 0 4
24333: PPUSH
24334: EMPTY
24335: PPUSH
24336: CALL_OW 1
24340: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
24341: LD_ADDR_EXP 111
24345: PUSH
24346: LD_EXP 111
24350: PPUSH
24351: LD_VAR 0 4
24355: PPUSH
24356: EMPTY
24357: PPUSH
24358: CALL_OW 1
24362: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
24363: LD_ADDR_EXP 112
24367: PUSH
24368: LD_EXP 112
24372: PPUSH
24373: LD_VAR 0 4
24377: PPUSH
24378: EMPTY
24379: PPUSH
24380: CALL_OW 1
24384: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
24385: LD_ADDR_EXP 113
24389: PUSH
24390: LD_EXP 113
24394: PPUSH
24395: LD_VAR 0 4
24399: PPUSH
24400: EMPTY
24401: PPUSH
24402: CALL_OW 1
24406: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
24407: LD_ADDR_EXP 114
24411: PUSH
24412: LD_EXP 114
24416: PPUSH
24417: LD_VAR 0 4
24421: PPUSH
24422: EMPTY
24423: PPUSH
24424: CALL_OW 1
24428: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
24429: LD_ADDR_EXP 116
24433: PUSH
24434: LD_EXP 116
24438: PPUSH
24439: LD_VAR 0 4
24443: PPUSH
24444: EMPTY
24445: PPUSH
24446: CALL_OW 1
24450: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
24451: LD_ADDR_EXP 118
24455: PUSH
24456: LD_EXP 118
24460: PPUSH
24461: LD_VAR 0 4
24465: PPUSH
24466: EMPTY
24467: PPUSH
24468: CALL_OW 1
24472: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
24473: LD_ADDR_EXP 119
24477: PUSH
24478: LD_EXP 119
24482: PPUSH
24483: LD_VAR 0 4
24487: PPUSH
24488: EMPTY
24489: PPUSH
24490: CALL_OW 1
24494: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
24495: LD_ADDR_EXP 120
24499: PUSH
24500: LD_EXP 120
24504: PPUSH
24505: LD_VAR 0 4
24509: PPUSH
24510: EMPTY
24511: PPUSH
24512: CALL_OW 1
24516: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
24517: LD_ADDR_EXP 121
24521: PUSH
24522: LD_EXP 121
24526: PPUSH
24527: LD_VAR 0 4
24531: PPUSH
24532: EMPTY
24533: PPUSH
24534: CALL_OW 1
24538: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
24539: LD_ADDR_EXP 122
24543: PUSH
24544: LD_EXP 122
24548: PPUSH
24549: LD_VAR 0 4
24553: PPUSH
24554: EMPTY
24555: PPUSH
24556: CALL_OW 1
24560: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
24561: LD_ADDR_EXP 123
24565: PUSH
24566: LD_EXP 123
24570: PPUSH
24571: LD_VAR 0 4
24575: PPUSH
24576: EMPTY
24577: PPUSH
24578: CALL_OW 1
24582: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
24583: LD_ADDR_EXP 124
24587: PUSH
24588: LD_EXP 124
24592: PPUSH
24593: LD_VAR 0 4
24597: PPUSH
24598: EMPTY
24599: PPUSH
24600: CALL_OW 1
24604: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
24605: LD_ADDR_EXP 125
24609: PUSH
24610: LD_EXP 125
24614: PPUSH
24615: LD_VAR 0 4
24619: PPUSH
24620: EMPTY
24621: PPUSH
24622: CALL_OW 1
24626: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
24627: LD_ADDR_EXP 126
24631: PUSH
24632: LD_EXP 126
24636: PPUSH
24637: LD_VAR 0 4
24641: PPUSH
24642: EMPTY
24643: PPUSH
24644: CALL_OW 1
24648: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
24649: LD_ADDR_EXP 127
24653: PUSH
24654: LD_EXP 127
24658: PPUSH
24659: LD_VAR 0 4
24663: PPUSH
24664: EMPTY
24665: PPUSH
24666: CALL_OW 1
24670: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
24671: LD_ADDR_EXP 128
24675: PUSH
24676: LD_EXP 128
24680: PPUSH
24681: LD_VAR 0 4
24685: PPUSH
24686: EMPTY
24687: PPUSH
24688: CALL_OW 1
24692: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
24693: LD_ADDR_EXP 129
24697: PUSH
24698: LD_EXP 129
24702: PPUSH
24703: LD_VAR 0 4
24707: PPUSH
24708: EMPTY
24709: PPUSH
24710: CALL_OW 1
24714: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
24715: LD_ADDR_EXP 130
24719: PUSH
24720: LD_EXP 130
24724: PPUSH
24725: LD_VAR 0 4
24729: PPUSH
24730: EMPTY
24731: PPUSH
24732: CALL_OW 1
24736: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
24737: LD_ADDR_EXP 131
24741: PUSH
24742: LD_EXP 131
24746: PPUSH
24747: LD_VAR 0 4
24751: PPUSH
24752: LD_INT 0
24754: PPUSH
24755: CALL_OW 1
24759: ST_TO_ADDR
// result := base ;
24760: LD_ADDR_VAR 0 3
24764: PUSH
24765: LD_VAR 0 4
24769: ST_TO_ADDR
// end ;
24770: LD_VAR 0 3
24774: RET
// export function MC_Start ( ) ; var i ; begin
24775: LD_INT 0
24777: PPUSH
24778: PPUSH
// for i = 1 to mc_bases do
24779: LD_ADDR_VAR 0 2
24783: PUSH
24784: DOUBLE
24785: LD_INT 1
24787: DEC
24788: ST_TO_ADDR
24789: LD_EXP 89
24793: PUSH
24794: FOR_TO
24795: IFFALSE 25872
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
24797: LD_ADDR_EXP 89
24801: PUSH
24802: LD_EXP 89
24806: PPUSH
24807: LD_VAR 0 2
24811: PPUSH
24812: LD_EXP 89
24816: PUSH
24817: LD_VAR 0 2
24821: ARRAY
24822: PUSH
24823: LD_INT 0
24825: DIFF
24826: PPUSH
24827: CALL_OW 1
24831: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
24832: LD_ADDR_EXP 90
24836: PUSH
24837: LD_EXP 90
24841: PPUSH
24842: LD_VAR 0 2
24846: PPUSH
24847: EMPTY
24848: PPUSH
24849: CALL_OW 1
24853: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
24854: LD_ADDR_EXP 91
24858: PUSH
24859: LD_EXP 91
24863: PPUSH
24864: LD_VAR 0 2
24868: PPUSH
24869: EMPTY
24870: PPUSH
24871: CALL_OW 1
24875: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
24876: LD_ADDR_EXP 92
24880: PUSH
24881: LD_EXP 92
24885: PPUSH
24886: LD_VAR 0 2
24890: PPUSH
24891: EMPTY
24892: PPUSH
24893: CALL_OW 1
24897: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
24898: LD_ADDR_EXP 93
24902: PUSH
24903: LD_EXP 93
24907: PPUSH
24908: LD_VAR 0 2
24912: PPUSH
24913: EMPTY
24914: PUSH
24915: EMPTY
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PPUSH
24921: CALL_OW 1
24925: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
24926: LD_ADDR_EXP 94
24930: PUSH
24931: LD_EXP 94
24935: PPUSH
24936: LD_VAR 0 2
24940: PPUSH
24941: EMPTY
24942: PPUSH
24943: CALL_OW 1
24947: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
24948: LD_ADDR_EXP 121
24952: PUSH
24953: LD_EXP 121
24957: PPUSH
24958: LD_VAR 0 2
24962: PPUSH
24963: EMPTY
24964: PPUSH
24965: CALL_OW 1
24969: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
24970: LD_ADDR_EXP 95
24974: PUSH
24975: LD_EXP 95
24979: PPUSH
24980: LD_VAR 0 2
24984: PPUSH
24985: EMPTY
24986: PPUSH
24987: CALL_OW 1
24991: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
24992: LD_ADDR_EXP 96
24996: PUSH
24997: LD_EXP 96
25001: PPUSH
25002: LD_VAR 0 2
25006: PPUSH
25007: EMPTY
25008: PPUSH
25009: CALL_OW 1
25013: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
25014: LD_ADDR_EXP 97
25018: PUSH
25019: LD_EXP 97
25023: PPUSH
25024: LD_VAR 0 2
25028: PPUSH
25029: LD_EXP 89
25033: PUSH
25034: LD_VAR 0 2
25038: ARRAY
25039: PPUSH
25040: LD_INT 2
25042: PUSH
25043: LD_INT 30
25045: PUSH
25046: LD_INT 32
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 30
25055: PUSH
25056: LD_INT 33
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: LIST
25067: PPUSH
25068: CALL_OW 72
25072: PPUSH
25073: CALL_OW 1
25077: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
25078: LD_ADDR_EXP 98
25082: PUSH
25083: LD_EXP 98
25087: PPUSH
25088: LD_VAR 0 2
25092: PPUSH
25093: LD_EXP 89
25097: PUSH
25098: LD_VAR 0 2
25102: ARRAY
25103: PPUSH
25104: LD_INT 2
25106: PUSH
25107: LD_INT 30
25109: PUSH
25110: LD_INT 32
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 30
25119: PUSH
25120: LD_INT 31
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 58
25134: PUSH
25135: EMPTY
25136: LIST
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PPUSH
25142: CALL_OW 72
25146: PPUSH
25147: CALL_OW 1
25151: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
25152: LD_ADDR_EXP 99
25156: PUSH
25157: LD_EXP 99
25161: PPUSH
25162: LD_VAR 0 2
25166: PPUSH
25167: EMPTY
25168: PPUSH
25169: CALL_OW 1
25173: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
25174: LD_ADDR_EXP 103
25178: PUSH
25179: LD_EXP 103
25183: PPUSH
25184: LD_VAR 0 2
25188: PPUSH
25189: EMPTY
25190: PPUSH
25191: CALL_OW 1
25195: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
25196: LD_ADDR_EXP 102
25200: PUSH
25201: LD_EXP 102
25205: PPUSH
25206: LD_VAR 0 2
25210: PPUSH
25211: EMPTY
25212: PPUSH
25213: CALL_OW 1
25217: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
25218: LD_ADDR_EXP 104
25222: PUSH
25223: LD_EXP 104
25227: PPUSH
25228: LD_VAR 0 2
25232: PPUSH
25233: EMPTY
25234: PPUSH
25235: CALL_OW 1
25239: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
25240: LD_ADDR_EXP 105
25244: PUSH
25245: LD_EXP 105
25249: PPUSH
25250: LD_VAR 0 2
25254: PPUSH
25255: EMPTY
25256: PPUSH
25257: CALL_OW 1
25261: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
25262: LD_ADDR_EXP 106
25266: PUSH
25267: LD_EXP 106
25271: PPUSH
25272: LD_VAR 0 2
25276: PPUSH
25277: EMPTY
25278: PPUSH
25279: CALL_OW 1
25283: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
25284: LD_ADDR_EXP 107
25288: PUSH
25289: LD_EXP 107
25293: PPUSH
25294: LD_VAR 0 2
25298: PPUSH
25299: EMPTY
25300: PPUSH
25301: CALL_OW 1
25305: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
25306: LD_ADDR_EXP 108
25310: PUSH
25311: LD_EXP 108
25315: PPUSH
25316: LD_VAR 0 2
25320: PPUSH
25321: EMPTY
25322: PPUSH
25323: CALL_OW 1
25327: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
25328: LD_ADDR_EXP 109
25332: PUSH
25333: LD_EXP 109
25337: PPUSH
25338: LD_VAR 0 2
25342: PPUSH
25343: EMPTY
25344: PPUSH
25345: CALL_OW 1
25349: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
25350: LD_ADDR_EXP 110
25354: PUSH
25355: LD_EXP 110
25359: PPUSH
25360: LD_VAR 0 2
25364: PPUSH
25365: EMPTY
25366: PPUSH
25367: CALL_OW 1
25371: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
25372: LD_ADDR_EXP 111
25376: PUSH
25377: LD_EXP 111
25381: PPUSH
25382: LD_VAR 0 2
25386: PPUSH
25387: EMPTY
25388: PPUSH
25389: CALL_OW 1
25393: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
25394: LD_ADDR_EXP 100
25398: PUSH
25399: LD_EXP 100
25403: PPUSH
25404: LD_VAR 0 2
25408: PPUSH
25409: LD_INT 0
25411: PPUSH
25412: CALL_OW 1
25416: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
25417: LD_ADDR_EXP 113
25421: PUSH
25422: LD_EXP 113
25426: PPUSH
25427: LD_VAR 0 2
25431: PPUSH
25432: LD_INT 0
25434: PPUSH
25435: CALL_OW 1
25439: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
25440: LD_ADDR_EXP 101
25444: PUSH
25445: LD_EXP 101
25449: PPUSH
25450: LD_VAR 0 2
25454: PPUSH
25455: EMPTY
25456: PPUSH
25457: CALL_OW 1
25461: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
25462: LD_ADDR_EXP 112
25466: PUSH
25467: LD_EXP 112
25471: PPUSH
25472: LD_VAR 0 2
25476: PPUSH
25477: LD_INT 0
25479: PPUSH
25480: CALL_OW 1
25484: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
25485: LD_ADDR_EXP 114
25489: PUSH
25490: LD_EXP 114
25494: PPUSH
25495: LD_VAR 0 2
25499: PPUSH
25500: EMPTY
25501: PPUSH
25502: CALL_OW 1
25506: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
25507: LD_ADDR_EXP 117
25511: PUSH
25512: LD_EXP 117
25516: PPUSH
25517: LD_VAR 0 2
25521: PPUSH
25522: LD_INT 0
25524: PPUSH
25525: CALL_OW 1
25529: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
25530: LD_ADDR_EXP 118
25534: PUSH
25535: LD_EXP 118
25539: PPUSH
25540: LD_VAR 0 2
25544: PPUSH
25545: EMPTY
25546: PPUSH
25547: CALL_OW 1
25551: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
25552: LD_ADDR_EXP 119
25556: PUSH
25557: LD_EXP 119
25561: PPUSH
25562: LD_VAR 0 2
25566: PPUSH
25567: EMPTY
25568: PPUSH
25569: CALL_OW 1
25573: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
25574: LD_ADDR_EXP 120
25578: PUSH
25579: LD_EXP 120
25583: PPUSH
25584: LD_VAR 0 2
25588: PPUSH
25589: EMPTY
25590: PPUSH
25591: CALL_OW 1
25595: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
25596: LD_ADDR_EXP 122
25600: PUSH
25601: LD_EXP 122
25605: PPUSH
25606: LD_VAR 0 2
25610: PPUSH
25611: LD_EXP 89
25615: PUSH
25616: LD_VAR 0 2
25620: ARRAY
25621: PPUSH
25622: LD_INT 2
25624: PUSH
25625: LD_INT 30
25627: PUSH
25628: LD_INT 6
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 30
25637: PUSH
25638: LD_INT 7
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 30
25647: PUSH
25648: LD_INT 8
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: PPUSH
25661: CALL_OW 72
25665: PPUSH
25666: CALL_OW 1
25670: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
25671: LD_ADDR_EXP 123
25675: PUSH
25676: LD_EXP 123
25680: PPUSH
25681: LD_VAR 0 2
25685: PPUSH
25686: EMPTY
25687: PPUSH
25688: CALL_OW 1
25692: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
25693: LD_ADDR_EXP 124
25697: PUSH
25698: LD_EXP 124
25702: PPUSH
25703: LD_VAR 0 2
25707: PPUSH
25708: EMPTY
25709: PPUSH
25710: CALL_OW 1
25714: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
25715: LD_ADDR_EXP 125
25719: PUSH
25720: LD_EXP 125
25724: PPUSH
25725: LD_VAR 0 2
25729: PPUSH
25730: EMPTY
25731: PPUSH
25732: CALL_OW 1
25736: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
25737: LD_ADDR_EXP 126
25741: PUSH
25742: LD_EXP 126
25746: PPUSH
25747: LD_VAR 0 2
25751: PPUSH
25752: EMPTY
25753: PPUSH
25754: CALL_OW 1
25758: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
25759: LD_ADDR_EXP 127
25763: PUSH
25764: LD_EXP 127
25768: PPUSH
25769: LD_VAR 0 2
25773: PPUSH
25774: EMPTY
25775: PPUSH
25776: CALL_OW 1
25780: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
25781: LD_ADDR_EXP 128
25785: PUSH
25786: LD_EXP 128
25790: PPUSH
25791: LD_VAR 0 2
25795: PPUSH
25796: EMPTY
25797: PPUSH
25798: CALL_OW 1
25802: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
25803: LD_ADDR_EXP 129
25807: PUSH
25808: LD_EXP 129
25812: PPUSH
25813: LD_VAR 0 2
25817: PPUSH
25818: EMPTY
25819: PPUSH
25820: CALL_OW 1
25824: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
25825: LD_ADDR_EXP 130
25829: PUSH
25830: LD_EXP 130
25834: PPUSH
25835: LD_VAR 0 2
25839: PPUSH
25840: EMPTY
25841: PPUSH
25842: CALL_OW 1
25846: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
25847: LD_ADDR_EXP 131
25851: PUSH
25852: LD_EXP 131
25856: PPUSH
25857: LD_VAR 0 2
25861: PPUSH
25862: LD_INT 0
25864: PPUSH
25865: CALL_OW 1
25869: ST_TO_ADDR
// end ;
25870: GO 24794
25872: POP
25873: POP
// MC_InitSides ( ) ;
25874: CALL 26160 0 0
// MC_InitResearch ( ) ;
25878: CALL 25899 0 0
// CustomInitMacro ( ) ;
25882: CALL 11438 0 0
// skirmish := true ;
25886: LD_ADDR_EXP 87
25890: PUSH
25891: LD_INT 1
25893: ST_TO_ADDR
// end ;
25894: LD_VAR 0 1
25898: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
25899: LD_INT 0
25901: PPUSH
25902: PPUSH
25903: PPUSH
25904: PPUSH
25905: PPUSH
25906: PPUSH
// if not mc_bases then
25907: LD_EXP 89
25911: NOT
25912: IFFALSE 25916
// exit ;
25914: GO 26155
// for i = 1 to 8 do
25916: LD_ADDR_VAR 0 2
25920: PUSH
25921: DOUBLE
25922: LD_INT 1
25924: DEC
25925: ST_TO_ADDR
25926: LD_INT 8
25928: PUSH
25929: FOR_TO
25930: IFFALSE 25956
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
25932: LD_ADDR_EXP 116
25936: PUSH
25937: LD_EXP 116
25941: PPUSH
25942: LD_VAR 0 2
25946: PPUSH
25947: EMPTY
25948: PPUSH
25949: CALL_OW 1
25953: ST_TO_ADDR
25954: GO 25929
25956: POP
25957: POP
// tmp := [ ] ;
25958: LD_ADDR_VAR 0 5
25962: PUSH
25963: EMPTY
25964: ST_TO_ADDR
// for i = 1 to mc_sides do
25965: LD_ADDR_VAR 0 2
25969: PUSH
25970: DOUBLE
25971: LD_INT 1
25973: DEC
25974: ST_TO_ADDR
25975: LD_EXP 115
25979: PUSH
25980: FOR_TO
25981: IFFALSE 26039
// if not mc_sides [ i ] in tmp then
25983: LD_EXP 115
25987: PUSH
25988: LD_VAR 0 2
25992: ARRAY
25993: PUSH
25994: LD_VAR 0 5
25998: IN
25999: NOT
26000: IFFALSE 26037
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
26002: LD_ADDR_VAR 0 5
26006: PUSH
26007: LD_VAR 0 5
26011: PPUSH
26012: LD_VAR 0 5
26016: PUSH
26017: LD_INT 1
26019: PLUS
26020: PPUSH
26021: LD_EXP 115
26025: PUSH
26026: LD_VAR 0 2
26030: ARRAY
26031: PPUSH
26032: CALL_OW 2
26036: ST_TO_ADDR
26037: GO 25980
26039: POP
26040: POP
// if not tmp then
26041: LD_VAR 0 5
26045: NOT
26046: IFFALSE 26050
// exit ;
26048: GO 26155
// for j in tmp do
26050: LD_ADDR_VAR 0 3
26054: PUSH
26055: LD_VAR 0 5
26059: PUSH
26060: FOR_IN
26061: IFFALSE 26153
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
26063: LD_ADDR_VAR 0 6
26067: PUSH
26068: LD_INT 22
26070: PUSH
26071: LD_VAR 0 3
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PPUSH
26080: CALL_OW 69
26084: ST_TO_ADDR
// if not un then
26085: LD_VAR 0 6
26089: NOT
26090: IFFALSE 26094
// continue ;
26092: GO 26060
// nation := GetNation ( un [ 1 ] ) ;
26094: LD_ADDR_VAR 0 4
26098: PUSH
26099: LD_VAR 0 6
26103: PUSH
26104: LD_INT 1
26106: ARRAY
26107: PPUSH
26108: CALL_OW 248
26112: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
26113: LD_ADDR_EXP 116
26117: PUSH
26118: LD_EXP 116
26122: PPUSH
26123: LD_VAR 0 3
26127: PPUSH
26128: LD_VAR 0 3
26132: PPUSH
26133: LD_VAR 0 4
26137: PPUSH
26138: LD_INT 1
26140: PPUSH
26141: CALL 48016 0 3
26145: PPUSH
26146: CALL_OW 1
26150: ST_TO_ADDR
// end ;
26151: GO 26060
26153: POP
26154: POP
// end ;
26155: LD_VAR 0 1
26159: RET
// export function MC_InitSides ( ) ; var i ; begin
26160: LD_INT 0
26162: PPUSH
26163: PPUSH
// if not mc_bases then
26164: LD_EXP 89
26168: NOT
26169: IFFALSE 26173
// exit ;
26171: GO 26247
// for i = 1 to mc_bases do
26173: LD_ADDR_VAR 0 2
26177: PUSH
26178: DOUBLE
26179: LD_INT 1
26181: DEC
26182: ST_TO_ADDR
26183: LD_EXP 89
26187: PUSH
26188: FOR_TO
26189: IFFALSE 26245
// if mc_bases [ i ] then
26191: LD_EXP 89
26195: PUSH
26196: LD_VAR 0 2
26200: ARRAY
26201: IFFALSE 26243
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
26203: LD_ADDR_EXP 115
26207: PUSH
26208: LD_EXP 115
26212: PPUSH
26213: LD_VAR 0 2
26217: PPUSH
26218: LD_EXP 89
26222: PUSH
26223: LD_VAR 0 2
26227: ARRAY
26228: PUSH
26229: LD_INT 1
26231: ARRAY
26232: PPUSH
26233: CALL_OW 255
26237: PPUSH
26238: CALL_OW 1
26242: ST_TO_ADDR
26243: GO 26188
26245: POP
26246: POP
// end ;
26247: LD_VAR 0 1
26251: RET
// every 0 0$01 trigger skirmish do
26252: LD_EXP 87
26256: IFFALSE 26410
26258: GO 26260
26260: DISABLE
// begin enable ;
26261: ENABLE
// MC_CheckBuildings ( ) ;
26262: CALL 30908 0 0
// MC_CheckPeopleLife ( ) ;
26266: CALL 31033 0 0
// RaiseSailEvent ( 100 ) ;
26270: LD_INT 100
26272: PPUSH
26273: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
26277: LD_INT 103
26279: PPUSH
26280: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
26284: LD_INT 104
26286: PPUSH
26287: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
26291: LD_INT 105
26293: PPUSH
26294: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
26298: LD_INT 106
26300: PPUSH
26301: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
26305: LD_INT 107
26307: PPUSH
26308: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
26312: LD_INT 108
26314: PPUSH
26315: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
26319: LD_INT 109
26321: PPUSH
26322: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
26326: LD_INT 110
26328: PPUSH
26329: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
26333: LD_INT 111
26335: PPUSH
26336: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
26340: LD_INT 112
26342: PPUSH
26343: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
26347: LD_INT 113
26349: PPUSH
26350: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
26354: LD_INT 120
26356: PPUSH
26357: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
26361: LD_INT 121
26363: PPUSH
26364: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
26368: LD_INT 122
26370: PPUSH
26371: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
26375: LD_INT 123
26377: PPUSH
26378: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
26382: LD_INT 124
26384: PPUSH
26385: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
26389: LD_INT 125
26391: PPUSH
26392: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
26396: LD_INT 126
26398: PPUSH
26399: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
26403: LD_INT 200
26405: PPUSH
26406: CALL_OW 427
// end ;
26410: END
// on SailEvent ( event ) do begin if event < 100 then
26411: LD_VAR 0 1
26415: PUSH
26416: LD_INT 100
26418: LESS
26419: IFFALSE 26430
// CustomEvent ( event ) ;
26421: LD_VAR 0 1
26425: PPUSH
26426: CALL 14253 0 1
// if event = 100 then
26430: LD_VAR 0 1
26434: PUSH
26435: LD_INT 100
26437: EQUAL
26438: IFFALSE 26444
// MC_ClassManager ( ) ;
26440: CALL 26836 0 0
// if event = 101 then
26444: LD_VAR 0 1
26448: PUSH
26449: LD_INT 101
26451: EQUAL
26452: IFFALSE 26458
// MC_RepairBuildings ( ) ;
26454: CALL 31618 0 0
// if event = 102 then
26458: LD_VAR 0 1
26462: PUSH
26463: LD_INT 102
26465: EQUAL
26466: IFFALSE 26472
// MC_Heal ( ) ;
26468: CALL 32477 0 0
// if event = 103 then
26472: LD_VAR 0 1
26476: PUSH
26477: LD_INT 103
26479: EQUAL
26480: IFFALSE 26486
// MC_Build ( ) ;
26482: CALL 32899 0 0
// if event = 104 then
26486: LD_VAR 0 1
26490: PUSH
26491: LD_INT 104
26493: EQUAL
26494: IFFALSE 26500
// MC_TurretWeapon ( ) ;
26496: CALL 34512 0 0
// if event = 105 then
26500: LD_VAR 0 1
26504: PUSH
26505: LD_INT 105
26507: EQUAL
26508: IFFALSE 26514
// MC_BuildUpgrade ( ) ;
26510: CALL 34063 0 0
// if event = 106 then
26514: LD_VAR 0 1
26518: PUSH
26519: LD_INT 106
26521: EQUAL
26522: IFFALSE 26528
// MC_PlantMines ( ) ;
26524: CALL 34942 0 0
// if event = 107 then
26528: LD_VAR 0 1
26532: PUSH
26533: LD_INT 107
26535: EQUAL
26536: IFFALSE 26542
// MC_CollectCrates ( ) ;
26538: CALL 35740 0 0
// if event = 108 then
26542: LD_VAR 0 1
26546: PUSH
26547: LD_INT 108
26549: EQUAL
26550: IFFALSE 26556
// MC_LinkRemoteControl ( ) ;
26552: CALL 37516 0 0
// if event = 109 then
26556: LD_VAR 0 1
26560: PUSH
26561: LD_INT 109
26563: EQUAL
26564: IFFALSE 26570
// MC_ProduceVehicle ( ) ;
26566: CALL 37697 0 0
// if event = 110 then
26570: LD_VAR 0 1
26574: PUSH
26575: LD_INT 110
26577: EQUAL
26578: IFFALSE 26584
// MC_SendAttack ( ) ;
26580: CALL 38163 0 0
// if event = 111 then
26584: LD_VAR 0 1
26588: PUSH
26589: LD_INT 111
26591: EQUAL
26592: IFFALSE 26598
// MC_Defend ( ) ;
26594: CALL 38271 0 0
// if event = 112 then
26598: LD_VAR 0 1
26602: PUSH
26603: LD_INT 112
26605: EQUAL
26606: IFFALSE 26612
// MC_Research ( ) ;
26608: CALL 38876 0 0
// if event = 113 then
26612: LD_VAR 0 1
26616: PUSH
26617: LD_INT 113
26619: EQUAL
26620: IFFALSE 26626
// MC_MinesTrigger ( ) ;
26622: CALL 39990 0 0
// if event = 120 then
26626: LD_VAR 0 1
26630: PUSH
26631: LD_INT 120
26633: EQUAL
26634: IFFALSE 26640
// MC_RepairVehicle ( ) ;
26636: CALL 40089 0 0
// if event = 121 then
26640: LD_VAR 0 1
26644: PUSH
26645: LD_INT 121
26647: EQUAL
26648: IFFALSE 26654
// MC_TameApe ( ) ;
26650: CALL 40819 0 0
// if event = 122 then
26654: LD_VAR 0 1
26658: PUSH
26659: LD_INT 122
26661: EQUAL
26662: IFFALSE 26668
// MC_ChangeApeClass ( ) ;
26664: CALL 41648 0 0
// if event = 123 then
26668: LD_VAR 0 1
26672: PUSH
26673: LD_INT 123
26675: EQUAL
26676: IFFALSE 26682
// MC_Bazooka ( ) ;
26678: CALL 42298 0 0
// if event = 124 then
26682: LD_VAR 0 1
26686: PUSH
26687: LD_INT 124
26689: EQUAL
26690: IFFALSE 26696
// MC_TeleportExit ( ) ;
26692: CALL 42496 0 0
// if event = 125 then
26696: LD_VAR 0 1
26700: PUSH
26701: LD_INT 125
26703: EQUAL
26704: IFFALSE 26710
// MC_Deposits ( ) ;
26706: CALL 43143 0 0
// if event = 126 then
26710: LD_VAR 0 1
26714: PUSH
26715: LD_INT 126
26717: EQUAL
26718: IFFALSE 26724
// MC_RemoteDriver ( ) ;
26720: CALL 43768 0 0
// if event = 200 then
26724: LD_VAR 0 1
26728: PUSH
26729: LD_INT 200
26731: EQUAL
26732: IFFALSE 26738
// MC_Idle ( ) ;
26734: CALL 45717 0 0
// end ;
26738: PPOPN 1
26740: END
// export function MC_Reset ( base , tag ) ; var i ; begin
26741: LD_INT 0
26743: PPUSH
26744: PPUSH
// if not mc_bases [ base ] or not tag then
26745: LD_EXP 89
26749: PUSH
26750: LD_VAR 0 1
26754: ARRAY
26755: NOT
26756: PUSH
26757: LD_VAR 0 2
26761: NOT
26762: OR
26763: IFFALSE 26767
// exit ;
26765: GO 26831
// for i in mc_bases [ base ] union mc_ape [ base ] do
26767: LD_ADDR_VAR 0 4
26771: PUSH
26772: LD_EXP 89
26776: PUSH
26777: LD_VAR 0 1
26781: ARRAY
26782: PUSH
26783: LD_EXP 118
26787: PUSH
26788: LD_VAR 0 1
26792: ARRAY
26793: UNION
26794: PUSH
26795: FOR_IN
26796: IFFALSE 26829
// if GetTag ( i ) = tag then
26798: LD_VAR 0 4
26802: PPUSH
26803: CALL_OW 110
26807: PUSH
26808: LD_VAR 0 2
26812: EQUAL
26813: IFFALSE 26827
// SetTag ( i , 0 ) ;
26815: LD_VAR 0 4
26819: PPUSH
26820: LD_INT 0
26822: PPUSH
26823: CALL_OW 109
26827: GO 26795
26829: POP
26830: POP
// end ;
26831: LD_VAR 0 3
26835: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
26836: LD_INT 0
26838: PPUSH
26839: PPUSH
26840: PPUSH
26841: PPUSH
26842: PPUSH
26843: PPUSH
26844: PPUSH
26845: PPUSH
// if not mc_bases then
26846: LD_EXP 89
26850: NOT
26851: IFFALSE 26855
// exit ;
26853: GO 27313
// for i = 1 to mc_bases do
26855: LD_ADDR_VAR 0 2
26859: PUSH
26860: DOUBLE
26861: LD_INT 1
26863: DEC
26864: ST_TO_ADDR
26865: LD_EXP 89
26869: PUSH
26870: FOR_TO
26871: IFFALSE 27311
// begin tmp := MC_ClassCheckReq ( i ) ;
26873: LD_ADDR_VAR 0 4
26877: PUSH
26878: LD_VAR 0 2
26882: PPUSH
26883: CALL 27318 0 1
26887: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
26888: LD_ADDR_EXP 130
26892: PUSH
26893: LD_EXP 130
26897: PPUSH
26898: LD_VAR 0 2
26902: PPUSH
26903: LD_VAR 0 4
26907: PPUSH
26908: CALL_OW 1
26912: ST_TO_ADDR
// if not tmp then
26913: LD_VAR 0 4
26917: NOT
26918: IFFALSE 26922
// continue ;
26920: GO 26870
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
26922: LD_ADDR_VAR 0 6
26926: PUSH
26927: LD_EXP 89
26931: PUSH
26932: LD_VAR 0 2
26936: ARRAY
26937: PPUSH
26938: LD_INT 2
26940: PUSH
26941: LD_INT 30
26943: PUSH
26944: LD_INT 4
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 30
26953: PUSH
26954: LD_INT 5
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: LIST
26965: PPUSH
26966: CALL_OW 72
26970: PUSH
26971: LD_EXP 89
26975: PUSH
26976: LD_VAR 0 2
26980: ARRAY
26981: PPUSH
26982: LD_INT 2
26984: PUSH
26985: LD_INT 30
26987: PUSH
26988: LD_INT 0
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 30
26997: PUSH
26998: LD_INT 1
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: LIST
27009: PPUSH
27010: CALL_OW 72
27014: PUSH
27015: LD_EXP 89
27019: PUSH
27020: LD_VAR 0 2
27024: ARRAY
27025: PPUSH
27026: LD_INT 30
27028: PUSH
27029: LD_INT 3
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PPUSH
27036: CALL_OW 72
27040: PUSH
27041: LD_EXP 89
27045: PUSH
27046: LD_VAR 0 2
27050: ARRAY
27051: PPUSH
27052: LD_INT 2
27054: PUSH
27055: LD_INT 30
27057: PUSH
27058: LD_INT 6
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 30
27067: PUSH
27068: LD_INT 7
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 30
27077: PUSH
27078: LD_INT 8
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: PPUSH
27091: CALL_OW 72
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: ST_TO_ADDR
// for j = 1 to 4 do
27102: LD_ADDR_VAR 0 3
27106: PUSH
27107: DOUBLE
27108: LD_INT 1
27110: DEC
27111: ST_TO_ADDR
27112: LD_INT 4
27114: PUSH
27115: FOR_TO
27116: IFFALSE 27307
// begin if not tmp [ j ] then
27118: LD_VAR 0 4
27122: PUSH
27123: LD_VAR 0 3
27127: ARRAY
27128: NOT
27129: IFFALSE 27133
// continue ;
27131: GO 27115
// for p in tmp [ j ] do
27133: LD_ADDR_VAR 0 5
27137: PUSH
27138: LD_VAR 0 4
27142: PUSH
27143: LD_VAR 0 3
27147: ARRAY
27148: PUSH
27149: FOR_IN
27150: IFFALSE 27303
// begin if not b [ j ] then
27152: LD_VAR 0 6
27156: PUSH
27157: LD_VAR 0 3
27161: ARRAY
27162: NOT
27163: IFFALSE 27167
// break ;
27165: GO 27303
// e := 0 ;
27167: LD_ADDR_VAR 0 7
27171: PUSH
27172: LD_INT 0
27174: ST_TO_ADDR
// for k in b [ j ] do
27175: LD_ADDR_VAR 0 8
27179: PUSH
27180: LD_VAR 0 6
27184: PUSH
27185: LD_VAR 0 3
27189: ARRAY
27190: PUSH
27191: FOR_IN
27192: IFFALSE 27219
// if IsNotFull ( k ) then
27194: LD_VAR 0 8
27198: PPUSH
27199: CALL 50165 0 1
27203: IFFALSE 27217
// begin e := k ;
27205: LD_ADDR_VAR 0 7
27209: PUSH
27210: LD_VAR 0 8
27214: ST_TO_ADDR
// break ;
27215: GO 27219
// end ;
27217: GO 27191
27219: POP
27220: POP
// if e and not UnitGoingToBuilding ( p , e ) then
27221: LD_VAR 0 7
27225: PUSH
27226: LD_VAR 0 5
27230: PPUSH
27231: LD_VAR 0 7
27235: PPUSH
27236: CALL 82585 0 2
27240: NOT
27241: AND
27242: IFFALSE 27301
// begin if IsInUnit ( p ) then
27244: LD_VAR 0 5
27248: PPUSH
27249: CALL_OW 310
27253: IFFALSE 27264
// ComExitBuilding ( p ) ;
27255: LD_VAR 0 5
27259: PPUSH
27260: CALL_OW 122
// ComEnterUnit ( p , e ) ;
27264: LD_VAR 0 5
27268: PPUSH
27269: LD_VAR 0 7
27273: PPUSH
27274: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
27278: LD_VAR 0 5
27282: PPUSH
27283: LD_VAR 0 3
27287: PPUSH
27288: CALL_OW 183
// AddComExitBuilding ( p ) ;
27292: LD_VAR 0 5
27296: PPUSH
27297: CALL_OW 182
// end ; end ;
27301: GO 27149
27303: POP
27304: POP
// end ;
27305: GO 27115
27307: POP
27308: POP
// end ;
27309: GO 26870
27311: POP
27312: POP
// end ;
27313: LD_VAR 0 1
27317: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
27318: LD_INT 0
27320: PPUSH
27321: PPUSH
27322: PPUSH
27323: PPUSH
27324: PPUSH
27325: PPUSH
27326: PPUSH
27327: PPUSH
27328: PPUSH
27329: PPUSH
27330: PPUSH
27331: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
27332: LD_VAR 0 1
27336: NOT
27337: PUSH
27338: LD_EXP 89
27342: PUSH
27343: LD_VAR 0 1
27347: ARRAY
27348: NOT
27349: OR
27350: PUSH
27351: LD_EXP 89
27355: PUSH
27356: LD_VAR 0 1
27360: ARRAY
27361: PPUSH
27362: LD_INT 2
27364: PUSH
27365: LD_INT 30
27367: PUSH
27368: LD_INT 0
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 30
27377: PUSH
27378: LD_INT 1
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: LIST
27389: PPUSH
27390: CALL_OW 72
27394: NOT
27395: OR
27396: IFFALSE 27400
// exit ;
27398: GO 30903
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
27400: LD_ADDR_VAR 0 4
27404: PUSH
27405: LD_EXP 89
27409: PUSH
27410: LD_VAR 0 1
27414: ARRAY
27415: PPUSH
27416: LD_INT 2
27418: PUSH
27419: LD_INT 25
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 25
27431: PUSH
27432: LD_INT 2
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 25
27441: PUSH
27442: LD_INT 3
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 25
27451: PUSH
27452: LD_INT 4
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 25
27461: PUSH
27462: LD_INT 5
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 25
27471: PUSH
27472: LD_INT 8
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 25
27481: PUSH
27482: LD_INT 9
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: PPUSH
27499: CALL_OW 72
27503: ST_TO_ADDR
// if not tmp then
27504: LD_VAR 0 4
27508: NOT
27509: IFFALSE 27513
// exit ;
27511: GO 30903
// for i in tmp do
27513: LD_ADDR_VAR 0 3
27517: PUSH
27518: LD_VAR 0 4
27522: PUSH
27523: FOR_IN
27524: IFFALSE 27555
// if GetTag ( i ) then
27526: LD_VAR 0 3
27530: PPUSH
27531: CALL_OW 110
27535: IFFALSE 27553
// tmp := tmp diff i ;
27537: LD_ADDR_VAR 0 4
27541: PUSH
27542: LD_VAR 0 4
27546: PUSH
27547: LD_VAR 0 3
27551: DIFF
27552: ST_TO_ADDR
27553: GO 27523
27555: POP
27556: POP
// if not tmp then
27557: LD_VAR 0 4
27561: NOT
27562: IFFALSE 27566
// exit ;
27564: GO 30903
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
27566: LD_ADDR_VAR 0 5
27570: PUSH
27571: LD_EXP 89
27575: PUSH
27576: LD_VAR 0 1
27580: ARRAY
27581: PPUSH
27582: LD_INT 2
27584: PUSH
27585: LD_INT 25
27587: PUSH
27588: LD_INT 1
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 25
27597: PUSH
27598: LD_INT 5
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 25
27607: PUSH
27608: LD_INT 8
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 25
27617: PUSH
27618: LD_INT 9
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: PPUSH
27632: CALL_OW 72
27636: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
27637: LD_ADDR_VAR 0 6
27641: PUSH
27642: LD_EXP 89
27646: PUSH
27647: LD_VAR 0 1
27651: ARRAY
27652: PPUSH
27653: LD_INT 25
27655: PUSH
27656: LD_INT 2
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PPUSH
27663: CALL_OW 72
27667: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
27668: LD_ADDR_VAR 0 7
27672: PUSH
27673: LD_EXP 89
27677: PUSH
27678: LD_VAR 0 1
27682: ARRAY
27683: PPUSH
27684: LD_INT 25
27686: PUSH
27687: LD_INT 3
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PPUSH
27694: CALL_OW 72
27698: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
27699: LD_ADDR_VAR 0 8
27703: PUSH
27704: LD_EXP 89
27708: PUSH
27709: LD_VAR 0 1
27713: ARRAY
27714: PPUSH
27715: LD_INT 25
27717: PUSH
27718: LD_INT 4
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 24
27727: PUSH
27728: LD_INT 251
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PPUSH
27739: CALL_OW 72
27743: ST_TO_ADDR
// if mc_scan [ base ] then
27744: LD_EXP 112
27748: PUSH
27749: LD_VAR 0 1
27753: ARRAY
27754: IFFALSE 28215
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
27756: LD_ADDR_EXP 131
27760: PUSH
27761: LD_EXP 131
27765: PPUSH
27766: LD_VAR 0 1
27770: PPUSH
27771: LD_INT 4
27773: PPUSH
27774: CALL_OW 1
27778: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
27779: LD_ADDR_VAR 0 12
27783: PUSH
27784: LD_EXP 89
27788: PUSH
27789: LD_VAR 0 1
27793: ARRAY
27794: PPUSH
27795: LD_INT 2
27797: PUSH
27798: LD_INT 30
27800: PUSH
27801: LD_INT 4
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 30
27810: PUSH
27811: LD_INT 5
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: LIST
27822: PPUSH
27823: CALL_OW 72
27827: ST_TO_ADDR
// if not b then
27828: LD_VAR 0 12
27832: NOT
27833: IFFALSE 27837
// exit ;
27835: GO 30903
// p := [ ] ;
27837: LD_ADDR_VAR 0 11
27841: PUSH
27842: EMPTY
27843: ST_TO_ADDR
// if sci >= 2 then
27844: LD_VAR 0 8
27848: PUSH
27849: LD_INT 2
27851: GREATEREQUAL
27852: IFFALSE 27883
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
27854: LD_ADDR_VAR 0 8
27858: PUSH
27859: LD_VAR 0 8
27863: PUSH
27864: LD_INT 1
27866: ARRAY
27867: PUSH
27868: LD_VAR 0 8
27872: PUSH
27873: LD_INT 2
27875: ARRAY
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: ST_TO_ADDR
27881: GO 27944
// if sci = 1 then
27883: LD_VAR 0 8
27887: PUSH
27888: LD_INT 1
27890: EQUAL
27891: IFFALSE 27912
// sci := [ sci [ 1 ] ] else
27893: LD_ADDR_VAR 0 8
27897: PUSH
27898: LD_VAR 0 8
27902: PUSH
27903: LD_INT 1
27905: ARRAY
27906: PUSH
27907: EMPTY
27908: LIST
27909: ST_TO_ADDR
27910: GO 27944
// if sci = 0 then
27912: LD_VAR 0 8
27916: PUSH
27917: LD_INT 0
27919: EQUAL
27920: IFFALSE 27944
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
27922: LD_ADDR_VAR 0 11
27926: PUSH
27927: LD_VAR 0 4
27931: PPUSH
27932: LD_INT 4
27934: PPUSH
27935: CALL 82448 0 2
27939: PUSH
27940: LD_INT 1
27942: ARRAY
27943: ST_TO_ADDR
// if eng > 4 then
27944: LD_VAR 0 6
27948: PUSH
27949: LD_INT 4
27951: GREATER
27952: IFFALSE 27998
// for i = eng downto 4 do
27954: LD_ADDR_VAR 0 3
27958: PUSH
27959: DOUBLE
27960: LD_VAR 0 6
27964: INC
27965: ST_TO_ADDR
27966: LD_INT 4
27968: PUSH
27969: FOR_DOWNTO
27970: IFFALSE 27996
// eng := eng diff eng [ i ] ;
27972: LD_ADDR_VAR 0 6
27976: PUSH
27977: LD_VAR 0 6
27981: PUSH
27982: LD_VAR 0 6
27986: PUSH
27987: LD_VAR 0 3
27991: ARRAY
27992: DIFF
27993: ST_TO_ADDR
27994: GO 27969
27996: POP
27997: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
27998: LD_ADDR_VAR 0 4
28002: PUSH
28003: LD_VAR 0 4
28007: PUSH
28008: LD_VAR 0 5
28012: PUSH
28013: LD_VAR 0 6
28017: UNION
28018: PUSH
28019: LD_VAR 0 7
28023: UNION
28024: PUSH
28025: LD_VAR 0 8
28029: UNION
28030: DIFF
28031: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
28032: LD_ADDR_VAR 0 13
28036: PUSH
28037: LD_EXP 89
28041: PUSH
28042: LD_VAR 0 1
28046: ARRAY
28047: PPUSH
28048: LD_INT 2
28050: PUSH
28051: LD_INT 30
28053: PUSH
28054: LD_INT 32
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 30
28063: PUSH
28064: LD_INT 31
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: LIST
28075: PPUSH
28076: CALL_OW 72
28080: PUSH
28081: LD_EXP 89
28085: PUSH
28086: LD_VAR 0 1
28090: ARRAY
28091: PPUSH
28092: LD_INT 2
28094: PUSH
28095: LD_INT 30
28097: PUSH
28098: LD_INT 4
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: LD_INT 30
28107: PUSH
28108: LD_INT 5
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: LIST
28119: PPUSH
28120: CALL_OW 72
28124: PUSH
28125: LD_INT 6
28127: MUL
28128: PLUS
28129: ST_TO_ADDR
// if bcount < tmp then
28130: LD_VAR 0 13
28134: PUSH
28135: LD_VAR 0 4
28139: LESS
28140: IFFALSE 28186
// for i = tmp downto bcount do
28142: LD_ADDR_VAR 0 3
28146: PUSH
28147: DOUBLE
28148: LD_VAR 0 4
28152: INC
28153: ST_TO_ADDR
28154: LD_VAR 0 13
28158: PUSH
28159: FOR_DOWNTO
28160: IFFALSE 28184
// tmp := Delete ( tmp , tmp ) ;
28162: LD_ADDR_VAR 0 4
28166: PUSH
28167: LD_VAR 0 4
28171: PPUSH
28172: LD_VAR 0 4
28176: PPUSH
28177: CALL_OW 3
28181: ST_TO_ADDR
28182: GO 28159
28184: POP
28185: POP
// result := [ tmp , 0 , 0 , p ] ;
28186: LD_ADDR_VAR 0 2
28190: PUSH
28191: LD_VAR 0 4
28195: PUSH
28196: LD_INT 0
28198: PUSH
28199: LD_INT 0
28201: PUSH
28202: LD_VAR 0 11
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: ST_TO_ADDR
// exit ;
28213: GO 30903
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
28215: LD_EXP 89
28219: PUSH
28220: LD_VAR 0 1
28224: ARRAY
28225: PPUSH
28226: LD_INT 2
28228: PUSH
28229: LD_INT 30
28231: PUSH
28232: LD_INT 6
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 30
28241: PUSH
28242: LD_INT 7
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 30
28251: PUSH
28252: LD_INT 8
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: PPUSH
28265: CALL_OW 72
28269: NOT
28270: PUSH
28271: LD_EXP 89
28275: PUSH
28276: LD_VAR 0 1
28280: ARRAY
28281: PPUSH
28282: LD_INT 30
28284: PUSH
28285: LD_INT 3
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PPUSH
28292: CALL_OW 72
28296: NOT
28297: AND
28298: IFFALSE 28370
// begin if eng = tmp then
28300: LD_VAR 0 6
28304: PUSH
28305: LD_VAR 0 4
28309: EQUAL
28310: IFFALSE 28314
// exit ;
28312: GO 30903
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
28314: LD_ADDR_EXP 131
28318: PUSH
28319: LD_EXP 131
28323: PPUSH
28324: LD_VAR 0 1
28328: PPUSH
28329: LD_INT 1
28331: PPUSH
28332: CALL_OW 1
28336: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
28337: LD_ADDR_VAR 0 2
28341: PUSH
28342: LD_INT 0
28344: PUSH
28345: LD_VAR 0 4
28349: PUSH
28350: LD_VAR 0 6
28354: DIFF
28355: PUSH
28356: LD_INT 0
28358: PUSH
28359: LD_INT 0
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: ST_TO_ADDR
// exit ;
28368: GO 30903
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
28370: LD_EXP 116
28374: PUSH
28375: LD_EXP 115
28379: PUSH
28380: LD_VAR 0 1
28384: ARRAY
28385: ARRAY
28386: PUSH
28387: LD_EXP 89
28391: PUSH
28392: LD_VAR 0 1
28396: ARRAY
28397: PPUSH
28398: LD_INT 2
28400: PUSH
28401: LD_INT 30
28403: PUSH
28404: LD_INT 6
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 30
28413: PUSH
28414: LD_INT 7
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 30
28423: PUSH
28424: LD_INT 8
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: PPUSH
28437: CALL_OW 72
28441: AND
28442: PUSH
28443: LD_EXP 89
28447: PUSH
28448: LD_VAR 0 1
28452: ARRAY
28453: PPUSH
28454: LD_INT 30
28456: PUSH
28457: LD_INT 3
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PPUSH
28464: CALL_OW 72
28468: NOT
28469: AND
28470: IFFALSE 28684
// begin if sci >= 6 then
28472: LD_VAR 0 8
28476: PUSH
28477: LD_INT 6
28479: GREATEREQUAL
28480: IFFALSE 28484
// exit ;
28482: GO 30903
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
28484: LD_ADDR_EXP 131
28488: PUSH
28489: LD_EXP 131
28493: PPUSH
28494: LD_VAR 0 1
28498: PPUSH
28499: LD_INT 2
28501: PPUSH
28502: CALL_OW 1
28506: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
28507: LD_ADDR_VAR 0 9
28511: PUSH
28512: LD_VAR 0 4
28516: PUSH
28517: LD_VAR 0 8
28521: DIFF
28522: PPUSH
28523: LD_INT 4
28525: PPUSH
28526: CALL 82448 0 2
28530: ST_TO_ADDR
// p := [ ] ;
28531: LD_ADDR_VAR 0 11
28535: PUSH
28536: EMPTY
28537: ST_TO_ADDR
// if sci < 6 and sort > 6 then
28538: LD_VAR 0 8
28542: PUSH
28543: LD_INT 6
28545: LESS
28546: PUSH
28547: LD_VAR 0 9
28551: PUSH
28552: LD_INT 6
28554: GREATER
28555: AND
28556: IFFALSE 28637
// begin for i = 1 to 6 - sci do
28558: LD_ADDR_VAR 0 3
28562: PUSH
28563: DOUBLE
28564: LD_INT 1
28566: DEC
28567: ST_TO_ADDR
28568: LD_INT 6
28570: PUSH
28571: LD_VAR 0 8
28575: MINUS
28576: PUSH
28577: FOR_TO
28578: IFFALSE 28633
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
28580: LD_ADDR_VAR 0 11
28584: PUSH
28585: LD_VAR 0 11
28589: PPUSH
28590: LD_VAR 0 11
28594: PUSH
28595: LD_INT 1
28597: PLUS
28598: PPUSH
28599: LD_VAR 0 9
28603: PUSH
28604: LD_INT 1
28606: ARRAY
28607: PPUSH
28608: CALL_OW 2
28612: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
28613: LD_ADDR_VAR 0 9
28617: PUSH
28618: LD_VAR 0 9
28622: PPUSH
28623: LD_INT 1
28625: PPUSH
28626: CALL_OW 3
28630: ST_TO_ADDR
// end ;
28631: GO 28577
28633: POP
28634: POP
// end else
28635: GO 28657
// if sort then
28637: LD_VAR 0 9
28641: IFFALSE 28657
// p := sort [ 1 ] ;
28643: LD_ADDR_VAR 0 11
28647: PUSH
28648: LD_VAR 0 9
28652: PUSH
28653: LD_INT 1
28655: ARRAY
28656: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
28657: LD_ADDR_VAR 0 2
28661: PUSH
28662: LD_INT 0
28664: PUSH
28665: LD_INT 0
28667: PUSH
28668: LD_INT 0
28670: PUSH
28671: LD_VAR 0 11
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: ST_TO_ADDR
// exit ;
28682: GO 30903
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
28684: LD_EXP 116
28688: PUSH
28689: LD_EXP 115
28693: PUSH
28694: LD_VAR 0 1
28698: ARRAY
28699: ARRAY
28700: PUSH
28701: LD_EXP 89
28705: PUSH
28706: LD_VAR 0 1
28710: ARRAY
28711: PPUSH
28712: LD_INT 2
28714: PUSH
28715: LD_INT 30
28717: PUSH
28718: LD_INT 6
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 30
28727: PUSH
28728: LD_INT 7
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 30
28737: PUSH
28738: LD_INT 8
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: PPUSH
28751: CALL_OW 72
28755: AND
28756: PUSH
28757: LD_EXP 89
28761: PUSH
28762: LD_VAR 0 1
28766: ARRAY
28767: PPUSH
28768: LD_INT 30
28770: PUSH
28771: LD_INT 3
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PPUSH
28778: CALL_OW 72
28782: AND
28783: IFFALSE 29517
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
28785: LD_ADDR_EXP 131
28789: PUSH
28790: LD_EXP 131
28794: PPUSH
28795: LD_VAR 0 1
28799: PPUSH
28800: LD_INT 3
28802: PPUSH
28803: CALL_OW 1
28807: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
28808: LD_ADDR_VAR 0 2
28812: PUSH
28813: LD_INT 0
28815: PUSH
28816: LD_INT 0
28818: PUSH
28819: LD_INT 0
28821: PUSH
28822: LD_INT 0
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: ST_TO_ADDR
// if not eng then
28831: LD_VAR 0 6
28835: NOT
28836: IFFALSE 28899
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
28838: LD_ADDR_VAR 0 11
28842: PUSH
28843: LD_VAR 0 4
28847: PPUSH
28848: LD_INT 2
28850: PPUSH
28851: CALL 82448 0 2
28855: PUSH
28856: LD_INT 1
28858: ARRAY
28859: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
28860: LD_ADDR_VAR 0 2
28864: PUSH
28865: LD_VAR 0 2
28869: PPUSH
28870: LD_INT 2
28872: PPUSH
28873: LD_VAR 0 11
28877: PPUSH
28878: CALL_OW 1
28882: ST_TO_ADDR
// tmp := tmp diff p ;
28883: LD_ADDR_VAR 0 4
28887: PUSH
28888: LD_VAR 0 4
28892: PUSH
28893: LD_VAR 0 11
28897: DIFF
28898: ST_TO_ADDR
// end ; if tmp and sci < 6 then
28899: LD_VAR 0 4
28903: PUSH
28904: LD_VAR 0 8
28908: PUSH
28909: LD_INT 6
28911: LESS
28912: AND
28913: IFFALSE 29101
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
28915: LD_ADDR_VAR 0 9
28919: PUSH
28920: LD_VAR 0 4
28924: PUSH
28925: LD_VAR 0 8
28929: PUSH
28930: LD_VAR 0 7
28934: UNION
28935: DIFF
28936: PPUSH
28937: LD_INT 4
28939: PPUSH
28940: CALL 82448 0 2
28944: ST_TO_ADDR
// p := [ ] ;
28945: LD_ADDR_VAR 0 11
28949: PUSH
28950: EMPTY
28951: ST_TO_ADDR
// if sort then
28952: LD_VAR 0 9
28956: IFFALSE 29072
// for i = 1 to 6 - sci do
28958: LD_ADDR_VAR 0 3
28962: PUSH
28963: DOUBLE
28964: LD_INT 1
28966: DEC
28967: ST_TO_ADDR
28968: LD_INT 6
28970: PUSH
28971: LD_VAR 0 8
28975: MINUS
28976: PUSH
28977: FOR_TO
28978: IFFALSE 29070
// begin if i = sort then
28980: LD_VAR 0 3
28984: PUSH
28985: LD_VAR 0 9
28989: EQUAL
28990: IFFALSE 28994
// break ;
28992: GO 29070
// if GetClass ( i ) = 4 then
28994: LD_VAR 0 3
28998: PPUSH
28999: CALL_OW 257
29003: PUSH
29004: LD_INT 4
29006: EQUAL
29007: IFFALSE 29011
// continue ;
29009: GO 28977
// p := Insert ( p , p + 1 , sort [ i ] ) ;
29011: LD_ADDR_VAR 0 11
29015: PUSH
29016: LD_VAR 0 11
29020: PPUSH
29021: LD_VAR 0 11
29025: PUSH
29026: LD_INT 1
29028: PLUS
29029: PPUSH
29030: LD_VAR 0 9
29034: PUSH
29035: LD_VAR 0 3
29039: ARRAY
29040: PPUSH
29041: CALL_OW 2
29045: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
29046: LD_ADDR_VAR 0 4
29050: PUSH
29051: LD_VAR 0 4
29055: PUSH
29056: LD_VAR 0 9
29060: PUSH
29061: LD_VAR 0 3
29065: ARRAY
29066: DIFF
29067: ST_TO_ADDR
// end ;
29068: GO 28977
29070: POP
29071: POP
// if p then
29072: LD_VAR 0 11
29076: IFFALSE 29101
// result := Replace ( result , 4 , p ) ;
29078: LD_ADDR_VAR 0 2
29082: PUSH
29083: LD_VAR 0 2
29087: PPUSH
29088: LD_INT 4
29090: PPUSH
29091: LD_VAR 0 11
29095: PPUSH
29096: CALL_OW 1
29100: ST_TO_ADDR
// end ; if tmp and mech < 6 then
29101: LD_VAR 0 4
29105: PUSH
29106: LD_VAR 0 7
29110: PUSH
29111: LD_INT 6
29113: LESS
29114: AND
29115: IFFALSE 29303
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
29117: LD_ADDR_VAR 0 9
29121: PUSH
29122: LD_VAR 0 4
29126: PUSH
29127: LD_VAR 0 8
29131: PUSH
29132: LD_VAR 0 7
29136: UNION
29137: DIFF
29138: PPUSH
29139: LD_INT 3
29141: PPUSH
29142: CALL 82448 0 2
29146: ST_TO_ADDR
// p := [ ] ;
29147: LD_ADDR_VAR 0 11
29151: PUSH
29152: EMPTY
29153: ST_TO_ADDR
// if sort then
29154: LD_VAR 0 9
29158: IFFALSE 29274
// for i = 1 to 6 - mech do
29160: LD_ADDR_VAR 0 3
29164: PUSH
29165: DOUBLE
29166: LD_INT 1
29168: DEC
29169: ST_TO_ADDR
29170: LD_INT 6
29172: PUSH
29173: LD_VAR 0 7
29177: MINUS
29178: PUSH
29179: FOR_TO
29180: IFFALSE 29272
// begin if i = sort then
29182: LD_VAR 0 3
29186: PUSH
29187: LD_VAR 0 9
29191: EQUAL
29192: IFFALSE 29196
// break ;
29194: GO 29272
// if GetClass ( i ) = 3 then
29196: LD_VAR 0 3
29200: PPUSH
29201: CALL_OW 257
29205: PUSH
29206: LD_INT 3
29208: EQUAL
29209: IFFALSE 29213
// continue ;
29211: GO 29179
// p := Insert ( p , p + 1 , sort [ i ] ) ;
29213: LD_ADDR_VAR 0 11
29217: PUSH
29218: LD_VAR 0 11
29222: PPUSH
29223: LD_VAR 0 11
29227: PUSH
29228: LD_INT 1
29230: PLUS
29231: PPUSH
29232: LD_VAR 0 9
29236: PUSH
29237: LD_VAR 0 3
29241: ARRAY
29242: PPUSH
29243: CALL_OW 2
29247: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
29248: LD_ADDR_VAR 0 4
29252: PUSH
29253: LD_VAR 0 4
29257: PUSH
29258: LD_VAR 0 9
29262: PUSH
29263: LD_VAR 0 3
29267: ARRAY
29268: DIFF
29269: ST_TO_ADDR
// end ;
29270: GO 29179
29272: POP
29273: POP
// if p then
29274: LD_VAR 0 11
29278: IFFALSE 29303
// result := Replace ( result , 3 , p ) ;
29280: LD_ADDR_VAR 0 2
29284: PUSH
29285: LD_VAR 0 2
29289: PPUSH
29290: LD_INT 3
29292: PPUSH
29293: LD_VAR 0 11
29297: PPUSH
29298: CALL_OW 1
29302: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
29303: LD_VAR 0 4
29307: PUSH
29308: LD_INT 6
29310: GREATER
29311: PUSH
29312: LD_VAR 0 6
29316: PUSH
29317: LD_INT 6
29319: LESS
29320: AND
29321: IFFALSE 29515
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
29323: LD_ADDR_VAR 0 9
29327: PUSH
29328: LD_VAR 0 4
29332: PUSH
29333: LD_VAR 0 8
29337: PUSH
29338: LD_VAR 0 7
29342: UNION
29343: PUSH
29344: LD_VAR 0 6
29348: UNION
29349: DIFF
29350: PPUSH
29351: LD_INT 2
29353: PPUSH
29354: CALL 82448 0 2
29358: ST_TO_ADDR
// p := [ ] ;
29359: LD_ADDR_VAR 0 11
29363: PUSH
29364: EMPTY
29365: ST_TO_ADDR
// if sort then
29366: LD_VAR 0 9
29370: IFFALSE 29486
// for i = 1 to 6 - eng do
29372: LD_ADDR_VAR 0 3
29376: PUSH
29377: DOUBLE
29378: LD_INT 1
29380: DEC
29381: ST_TO_ADDR
29382: LD_INT 6
29384: PUSH
29385: LD_VAR 0 6
29389: MINUS
29390: PUSH
29391: FOR_TO
29392: IFFALSE 29484
// begin if i = sort then
29394: LD_VAR 0 3
29398: PUSH
29399: LD_VAR 0 9
29403: EQUAL
29404: IFFALSE 29408
// break ;
29406: GO 29484
// if GetClass ( i ) = 2 then
29408: LD_VAR 0 3
29412: PPUSH
29413: CALL_OW 257
29417: PUSH
29418: LD_INT 2
29420: EQUAL
29421: IFFALSE 29425
// continue ;
29423: GO 29391
// p := Insert ( p , p + 1 , sort [ i ] ) ;
29425: LD_ADDR_VAR 0 11
29429: PUSH
29430: LD_VAR 0 11
29434: PPUSH
29435: LD_VAR 0 11
29439: PUSH
29440: LD_INT 1
29442: PLUS
29443: PPUSH
29444: LD_VAR 0 9
29448: PUSH
29449: LD_VAR 0 3
29453: ARRAY
29454: PPUSH
29455: CALL_OW 2
29459: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
29460: LD_ADDR_VAR 0 4
29464: PUSH
29465: LD_VAR 0 4
29469: PUSH
29470: LD_VAR 0 9
29474: PUSH
29475: LD_VAR 0 3
29479: ARRAY
29480: DIFF
29481: ST_TO_ADDR
// end ;
29482: GO 29391
29484: POP
29485: POP
// if p then
29486: LD_VAR 0 11
29490: IFFALSE 29515
// result := Replace ( result , 2 , p ) ;
29492: LD_ADDR_VAR 0 2
29496: PUSH
29497: LD_VAR 0 2
29501: PPUSH
29502: LD_INT 2
29504: PPUSH
29505: LD_VAR 0 11
29509: PPUSH
29510: CALL_OW 1
29514: ST_TO_ADDR
// end ; exit ;
29515: GO 30903
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
29517: LD_EXP 116
29521: PUSH
29522: LD_EXP 115
29526: PUSH
29527: LD_VAR 0 1
29531: ARRAY
29532: ARRAY
29533: NOT
29534: PUSH
29535: LD_EXP 89
29539: PUSH
29540: LD_VAR 0 1
29544: ARRAY
29545: PPUSH
29546: LD_INT 30
29548: PUSH
29549: LD_INT 3
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PPUSH
29556: CALL_OW 72
29560: AND
29561: PUSH
29562: LD_EXP 94
29566: PUSH
29567: LD_VAR 0 1
29571: ARRAY
29572: AND
29573: IFFALSE 30181
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
29575: LD_ADDR_EXP 131
29579: PUSH
29580: LD_EXP 131
29584: PPUSH
29585: LD_VAR 0 1
29589: PPUSH
29590: LD_INT 5
29592: PPUSH
29593: CALL_OW 1
29597: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
29598: LD_ADDR_VAR 0 2
29602: PUSH
29603: LD_INT 0
29605: PUSH
29606: LD_INT 0
29608: PUSH
29609: LD_INT 0
29611: PUSH
29612: LD_INT 0
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: ST_TO_ADDR
// if sci > 1 then
29621: LD_VAR 0 8
29625: PUSH
29626: LD_INT 1
29628: GREATER
29629: IFFALSE 29657
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
29631: LD_ADDR_VAR 0 4
29635: PUSH
29636: LD_VAR 0 4
29640: PUSH
29641: LD_VAR 0 8
29645: PUSH
29646: LD_VAR 0 8
29650: PUSH
29651: LD_INT 1
29653: ARRAY
29654: DIFF
29655: DIFF
29656: ST_TO_ADDR
// if tmp and not sci then
29657: LD_VAR 0 4
29661: PUSH
29662: LD_VAR 0 8
29666: NOT
29667: AND
29668: IFFALSE 29737
// begin sort := SortBySkill ( tmp , 4 ) ;
29670: LD_ADDR_VAR 0 9
29674: PUSH
29675: LD_VAR 0 4
29679: PPUSH
29680: LD_INT 4
29682: PPUSH
29683: CALL 82448 0 2
29687: ST_TO_ADDR
// if sort then
29688: LD_VAR 0 9
29692: IFFALSE 29708
// p := sort [ 1 ] ;
29694: LD_ADDR_VAR 0 11
29698: PUSH
29699: LD_VAR 0 9
29703: PUSH
29704: LD_INT 1
29706: ARRAY
29707: ST_TO_ADDR
// if p then
29708: LD_VAR 0 11
29712: IFFALSE 29737
// result := Replace ( result , 4 , p ) ;
29714: LD_ADDR_VAR 0 2
29718: PUSH
29719: LD_VAR 0 2
29723: PPUSH
29724: LD_INT 4
29726: PPUSH
29727: LD_VAR 0 11
29731: PPUSH
29732: CALL_OW 1
29736: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
29737: LD_ADDR_VAR 0 4
29741: PUSH
29742: LD_VAR 0 4
29746: PUSH
29747: LD_VAR 0 7
29751: DIFF
29752: ST_TO_ADDR
// if tmp and mech < 6 then
29753: LD_VAR 0 4
29757: PUSH
29758: LD_VAR 0 7
29762: PUSH
29763: LD_INT 6
29765: LESS
29766: AND
29767: IFFALSE 29955
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
29769: LD_ADDR_VAR 0 9
29773: PUSH
29774: LD_VAR 0 4
29778: PUSH
29779: LD_VAR 0 8
29783: PUSH
29784: LD_VAR 0 7
29788: UNION
29789: DIFF
29790: PPUSH
29791: LD_INT 3
29793: PPUSH
29794: CALL 82448 0 2
29798: ST_TO_ADDR
// p := [ ] ;
29799: LD_ADDR_VAR 0 11
29803: PUSH
29804: EMPTY
29805: ST_TO_ADDR
// if sort then
29806: LD_VAR 0 9
29810: IFFALSE 29926
// for i = 1 to 6 - mech do
29812: LD_ADDR_VAR 0 3
29816: PUSH
29817: DOUBLE
29818: LD_INT 1
29820: DEC
29821: ST_TO_ADDR
29822: LD_INT 6
29824: PUSH
29825: LD_VAR 0 7
29829: MINUS
29830: PUSH
29831: FOR_TO
29832: IFFALSE 29924
// begin if i = sort then
29834: LD_VAR 0 3
29838: PUSH
29839: LD_VAR 0 9
29843: EQUAL
29844: IFFALSE 29848
// break ;
29846: GO 29924
// if GetClass ( i ) = 3 then
29848: LD_VAR 0 3
29852: PPUSH
29853: CALL_OW 257
29857: PUSH
29858: LD_INT 3
29860: EQUAL
29861: IFFALSE 29865
// continue ;
29863: GO 29831
// p := Insert ( p , p + 1 , sort [ i ] ) ;
29865: LD_ADDR_VAR 0 11
29869: PUSH
29870: LD_VAR 0 11
29874: PPUSH
29875: LD_VAR 0 11
29879: PUSH
29880: LD_INT 1
29882: PLUS
29883: PPUSH
29884: LD_VAR 0 9
29888: PUSH
29889: LD_VAR 0 3
29893: ARRAY
29894: PPUSH
29895: CALL_OW 2
29899: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
29900: LD_ADDR_VAR 0 4
29904: PUSH
29905: LD_VAR 0 4
29909: PUSH
29910: LD_VAR 0 9
29914: PUSH
29915: LD_VAR 0 3
29919: ARRAY
29920: DIFF
29921: ST_TO_ADDR
// end ;
29922: GO 29831
29924: POP
29925: POP
// if p then
29926: LD_VAR 0 11
29930: IFFALSE 29955
// result := Replace ( result , 3 , p ) ;
29932: LD_ADDR_VAR 0 2
29936: PUSH
29937: LD_VAR 0 2
29941: PPUSH
29942: LD_INT 3
29944: PPUSH
29945: LD_VAR 0 11
29949: PPUSH
29950: CALL_OW 1
29954: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
29955: LD_ADDR_VAR 0 4
29959: PUSH
29960: LD_VAR 0 4
29964: PUSH
29965: LD_VAR 0 6
29969: DIFF
29970: ST_TO_ADDR
// if tmp and eng < 6 then
29971: LD_VAR 0 4
29975: PUSH
29976: LD_VAR 0 6
29980: PUSH
29981: LD_INT 6
29983: LESS
29984: AND
29985: IFFALSE 30179
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
29987: LD_ADDR_VAR 0 9
29991: PUSH
29992: LD_VAR 0 4
29996: PUSH
29997: LD_VAR 0 8
30001: PUSH
30002: LD_VAR 0 7
30006: UNION
30007: PUSH
30008: LD_VAR 0 6
30012: UNION
30013: DIFF
30014: PPUSH
30015: LD_INT 2
30017: PPUSH
30018: CALL 82448 0 2
30022: ST_TO_ADDR
// p := [ ] ;
30023: LD_ADDR_VAR 0 11
30027: PUSH
30028: EMPTY
30029: ST_TO_ADDR
// if sort then
30030: LD_VAR 0 9
30034: IFFALSE 30150
// for i = 1 to 6 - eng do
30036: LD_ADDR_VAR 0 3
30040: PUSH
30041: DOUBLE
30042: LD_INT 1
30044: DEC
30045: ST_TO_ADDR
30046: LD_INT 6
30048: PUSH
30049: LD_VAR 0 6
30053: MINUS
30054: PUSH
30055: FOR_TO
30056: IFFALSE 30148
// begin if i = sort then
30058: LD_VAR 0 3
30062: PUSH
30063: LD_VAR 0 9
30067: EQUAL
30068: IFFALSE 30072
// break ;
30070: GO 30148
// if GetClass ( i ) = 2 then
30072: LD_VAR 0 3
30076: PPUSH
30077: CALL_OW 257
30081: PUSH
30082: LD_INT 2
30084: EQUAL
30085: IFFALSE 30089
// continue ;
30087: GO 30055
// p := Insert ( p , p + 1 , sort [ i ] ) ;
30089: LD_ADDR_VAR 0 11
30093: PUSH
30094: LD_VAR 0 11
30098: PPUSH
30099: LD_VAR 0 11
30103: PUSH
30104: LD_INT 1
30106: PLUS
30107: PPUSH
30108: LD_VAR 0 9
30112: PUSH
30113: LD_VAR 0 3
30117: ARRAY
30118: PPUSH
30119: CALL_OW 2
30123: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
30124: LD_ADDR_VAR 0 4
30128: PUSH
30129: LD_VAR 0 4
30133: PUSH
30134: LD_VAR 0 9
30138: PUSH
30139: LD_VAR 0 3
30143: ARRAY
30144: DIFF
30145: ST_TO_ADDR
// end ;
30146: GO 30055
30148: POP
30149: POP
// if p then
30150: LD_VAR 0 11
30154: IFFALSE 30179
// result := Replace ( result , 2 , p ) ;
30156: LD_ADDR_VAR 0 2
30160: PUSH
30161: LD_VAR 0 2
30165: PPUSH
30166: LD_INT 2
30168: PPUSH
30169: LD_VAR 0 11
30173: PPUSH
30174: CALL_OW 1
30178: ST_TO_ADDR
// end ; exit ;
30179: GO 30903
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
30181: LD_EXP 116
30185: PUSH
30186: LD_EXP 115
30190: PUSH
30191: LD_VAR 0 1
30195: ARRAY
30196: ARRAY
30197: NOT
30198: PUSH
30199: LD_EXP 89
30203: PUSH
30204: LD_VAR 0 1
30208: ARRAY
30209: PPUSH
30210: LD_INT 30
30212: PUSH
30213: LD_INT 3
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PPUSH
30220: CALL_OW 72
30224: AND
30225: PUSH
30226: LD_EXP 94
30230: PUSH
30231: LD_VAR 0 1
30235: ARRAY
30236: NOT
30237: AND
30238: IFFALSE 30903
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
30240: LD_ADDR_EXP 131
30244: PUSH
30245: LD_EXP 131
30249: PPUSH
30250: LD_VAR 0 1
30254: PPUSH
30255: LD_INT 6
30257: PPUSH
30258: CALL_OW 1
30262: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
30263: LD_ADDR_VAR 0 2
30267: PUSH
30268: LD_INT 0
30270: PUSH
30271: LD_INT 0
30273: PUSH
30274: LD_INT 0
30276: PUSH
30277: LD_INT 0
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: ST_TO_ADDR
// if sci >= 1 then
30286: LD_VAR 0 8
30290: PUSH
30291: LD_INT 1
30293: GREATEREQUAL
30294: IFFALSE 30316
// tmp := tmp diff sci [ 1 ] ;
30296: LD_ADDR_VAR 0 4
30300: PUSH
30301: LD_VAR 0 4
30305: PUSH
30306: LD_VAR 0 8
30310: PUSH
30311: LD_INT 1
30313: ARRAY
30314: DIFF
30315: ST_TO_ADDR
// if tmp and not sci then
30316: LD_VAR 0 4
30320: PUSH
30321: LD_VAR 0 8
30325: NOT
30326: AND
30327: IFFALSE 30396
// begin sort := SortBySkill ( tmp , 4 ) ;
30329: LD_ADDR_VAR 0 9
30333: PUSH
30334: LD_VAR 0 4
30338: PPUSH
30339: LD_INT 4
30341: PPUSH
30342: CALL 82448 0 2
30346: ST_TO_ADDR
// if sort then
30347: LD_VAR 0 9
30351: IFFALSE 30367
// p := sort [ 1 ] ;
30353: LD_ADDR_VAR 0 11
30357: PUSH
30358: LD_VAR 0 9
30362: PUSH
30363: LD_INT 1
30365: ARRAY
30366: ST_TO_ADDR
// if p then
30367: LD_VAR 0 11
30371: IFFALSE 30396
// result := Replace ( result , 4 , p ) ;
30373: LD_ADDR_VAR 0 2
30377: PUSH
30378: LD_VAR 0 2
30382: PPUSH
30383: LD_INT 4
30385: PPUSH
30386: LD_VAR 0 11
30390: PPUSH
30391: CALL_OW 1
30395: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
30396: LD_ADDR_VAR 0 4
30400: PUSH
30401: LD_VAR 0 4
30405: PUSH
30406: LD_VAR 0 7
30410: DIFF
30411: ST_TO_ADDR
// if tmp and mech < 6 then
30412: LD_VAR 0 4
30416: PUSH
30417: LD_VAR 0 7
30421: PUSH
30422: LD_INT 6
30424: LESS
30425: AND
30426: IFFALSE 30608
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
30428: LD_ADDR_VAR 0 9
30432: PUSH
30433: LD_VAR 0 4
30437: PUSH
30438: LD_VAR 0 7
30442: DIFF
30443: PPUSH
30444: LD_INT 3
30446: PPUSH
30447: CALL 82448 0 2
30451: ST_TO_ADDR
// p := [ ] ;
30452: LD_ADDR_VAR 0 11
30456: PUSH
30457: EMPTY
30458: ST_TO_ADDR
// if sort then
30459: LD_VAR 0 9
30463: IFFALSE 30579
// for i = 1 to 6 - mech do
30465: LD_ADDR_VAR 0 3
30469: PUSH
30470: DOUBLE
30471: LD_INT 1
30473: DEC
30474: ST_TO_ADDR
30475: LD_INT 6
30477: PUSH
30478: LD_VAR 0 7
30482: MINUS
30483: PUSH
30484: FOR_TO
30485: IFFALSE 30577
// begin if i = sort then
30487: LD_VAR 0 3
30491: PUSH
30492: LD_VAR 0 9
30496: EQUAL
30497: IFFALSE 30501
// break ;
30499: GO 30577
// if GetClass ( i ) = 3 then
30501: LD_VAR 0 3
30505: PPUSH
30506: CALL_OW 257
30510: PUSH
30511: LD_INT 3
30513: EQUAL
30514: IFFALSE 30518
// continue ;
30516: GO 30484
// p := Insert ( p , p + 1 , sort [ i ] ) ;
30518: LD_ADDR_VAR 0 11
30522: PUSH
30523: LD_VAR 0 11
30527: PPUSH
30528: LD_VAR 0 11
30532: PUSH
30533: LD_INT 1
30535: PLUS
30536: PPUSH
30537: LD_VAR 0 9
30541: PUSH
30542: LD_VAR 0 3
30546: ARRAY
30547: PPUSH
30548: CALL_OW 2
30552: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
30553: LD_ADDR_VAR 0 4
30557: PUSH
30558: LD_VAR 0 4
30562: PUSH
30563: LD_VAR 0 9
30567: PUSH
30568: LD_VAR 0 3
30572: ARRAY
30573: DIFF
30574: ST_TO_ADDR
// end ;
30575: GO 30484
30577: POP
30578: POP
// if p then
30579: LD_VAR 0 11
30583: IFFALSE 30608
// result := Replace ( result , 3 , p ) ;
30585: LD_ADDR_VAR 0 2
30589: PUSH
30590: LD_VAR 0 2
30594: PPUSH
30595: LD_INT 3
30597: PPUSH
30598: LD_VAR 0 11
30602: PPUSH
30603: CALL_OW 1
30607: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
30608: LD_ADDR_VAR 0 4
30612: PUSH
30613: LD_VAR 0 4
30617: PUSH
30618: LD_VAR 0 6
30622: DIFF
30623: ST_TO_ADDR
// if tmp and eng < 4 then
30624: LD_VAR 0 4
30628: PUSH
30629: LD_VAR 0 6
30633: PUSH
30634: LD_INT 4
30636: LESS
30637: AND
30638: IFFALSE 30828
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
30640: LD_ADDR_VAR 0 9
30644: PUSH
30645: LD_VAR 0 4
30649: PUSH
30650: LD_VAR 0 7
30654: PUSH
30655: LD_VAR 0 6
30659: UNION
30660: DIFF
30661: PPUSH
30662: LD_INT 2
30664: PPUSH
30665: CALL 82448 0 2
30669: ST_TO_ADDR
// p := [ ] ;
30670: LD_ADDR_VAR 0 11
30674: PUSH
30675: EMPTY
30676: ST_TO_ADDR
// if sort then
30677: LD_VAR 0 9
30681: IFFALSE 30797
// for i = 1 to 4 - eng do
30683: LD_ADDR_VAR 0 3
30687: PUSH
30688: DOUBLE
30689: LD_INT 1
30691: DEC
30692: ST_TO_ADDR
30693: LD_INT 4
30695: PUSH
30696: LD_VAR 0 6
30700: MINUS
30701: PUSH
30702: FOR_TO
30703: IFFALSE 30795
// begin if i = sort then
30705: LD_VAR 0 3
30709: PUSH
30710: LD_VAR 0 9
30714: EQUAL
30715: IFFALSE 30719
// break ;
30717: GO 30795
// if GetClass ( i ) = 2 then
30719: LD_VAR 0 3
30723: PPUSH
30724: CALL_OW 257
30728: PUSH
30729: LD_INT 2
30731: EQUAL
30732: IFFALSE 30736
// continue ;
30734: GO 30702
// p := Insert ( p , p + 1 , sort [ i ] ) ;
30736: LD_ADDR_VAR 0 11
30740: PUSH
30741: LD_VAR 0 11
30745: PPUSH
30746: LD_VAR 0 11
30750: PUSH
30751: LD_INT 1
30753: PLUS
30754: PPUSH
30755: LD_VAR 0 9
30759: PUSH
30760: LD_VAR 0 3
30764: ARRAY
30765: PPUSH
30766: CALL_OW 2
30770: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
30771: LD_ADDR_VAR 0 4
30775: PUSH
30776: LD_VAR 0 4
30780: PUSH
30781: LD_VAR 0 9
30785: PUSH
30786: LD_VAR 0 3
30790: ARRAY
30791: DIFF
30792: ST_TO_ADDR
// end ;
30793: GO 30702
30795: POP
30796: POP
// if p then
30797: LD_VAR 0 11
30801: IFFALSE 30826
// result := Replace ( result , 2 , p ) ;
30803: LD_ADDR_VAR 0 2
30807: PUSH
30808: LD_VAR 0 2
30812: PPUSH
30813: LD_INT 2
30815: PPUSH
30816: LD_VAR 0 11
30820: PPUSH
30821: CALL_OW 1
30825: ST_TO_ADDR
// end else
30826: GO 30872
// for i = eng downto 5 do
30828: LD_ADDR_VAR 0 3
30832: PUSH
30833: DOUBLE
30834: LD_VAR 0 6
30838: INC
30839: ST_TO_ADDR
30840: LD_INT 5
30842: PUSH
30843: FOR_DOWNTO
30844: IFFALSE 30870
// tmp := tmp union eng [ i ] ;
30846: LD_ADDR_VAR 0 4
30850: PUSH
30851: LD_VAR 0 4
30855: PUSH
30856: LD_VAR 0 6
30860: PUSH
30861: LD_VAR 0 3
30865: ARRAY
30866: UNION
30867: ST_TO_ADDR
30868: GO 30843
30870: POP
30871: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
30872: LD_ADDR_VAR 0 2
30876: PUSH
30877: LD_VAR 0 2
30881: PPUSH
30882: LD_INT 1
30884: PPUSH
30885: LD_VAR 0 4
30889: PUSH
30890: LD_VAR 0 5
30894: DIFF
30895: PPUSH
30896: CALL_OW 1
30900: ST_TO_ADDR
// exit ;
30901: GO 30903
// end ; end ;
30903: LD_VAR 0 2
30907: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
30908: LD_INT 0
30910: PPUSH
30911: PPUSH
30912: PPUSH
// if not mc_bases then
30913: LD_EXP 89
30917: NOT
30918: IFFALSE 30922
// exit ;
30920: GO 31028
// for i = 1 to mc_bases do
30922: LD_ADDR_VAR 0 2
30926: PUSH
30927: DOUBLE
30928: LD_INT 1
30930: DEC
30931: ST_TO_ADDR
30932: LD_EXP 89
30936: PUSH
30937: FOR_TO
30938: IFFALSE 31019
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
30940: LD_ADDR_VAR 0 3
30944: PUSH
30945: LD_EXP 89
30949: PUSH
30950: LD_VAR 0 2
30954: ARRAY
30955: PPUSH
30956: LD_INT 21
30958: PUSH
30959: LD_INT 3
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 3
30968: PUSH
30969: LD_INT 24
30971: PUSH
30972: LD_INT 1000
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PPUSH
30987: CALL_OW 72
30991: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
30992: LD_ADDR_EXP 90
30996: PUSH
30997: LD_EXP 90
31001: PPUSH
31002: LD_VAR 0 2
31006: PPUSH
31007: LD_VAR 0 3
31011: PPUSH
31012: CALL_OW 1
31016: ST_TO_ADDR
// end ;
31017: GO 30937
31019: POP
31020: POP
// RaiseSailEvent ( 101 ) ;
31021: LD_INT 101
31023: PPUSH
31024: CALL_OW 427
// end ;
31028: LD_VAR 0 1
31032: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
31033: LD_INT 0
31035: PPUSH
31036: PPUSH
31037: PPUSH
31038: PPUSH
31039: PPUSH
31040: PPUSH
31041: PPUSH
// if not mc_bases then
31042: LD_EXP 89
31046: NOT
31047: IFFALSE 31051
// exit ;
31049: GO 31613
// for i = 1 to mc_bases do
31051: LD_ADDR_VAR 0 2
31055: PUSH
31056: DOUBLE
31057: LD_INT 1
31059: DEC
31060: ST_TO_ADDR
31061: LD_EXP 89
31065: PUSH
31066: FOR_TO
31067: IFFALSE 31604
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
31069: LD_ADDR_VAR 0 5
31073: PUSH
31074: LD_EXP 89
31078: PUSH
31079: LD_VAR 0 2
31083: ARRAY
31084: PUSH
31085: LD_EXP 118
31089: PUSH
31090: LD_VAR 0 2
31094: ARRAY
31095: UNION
31096: PPUSH
31097: LD_INT 21
31099: PUSH
31100: LD_INT 1
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 1
31109: PUSH
31110: LD_INT 3
31112: PUSH
31113: LD_INT 54
31115: PUSH
31116: EMPTY
31117: LIST
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 3
31125: PUSH
31126: LD_INT 24
31128: PUSH
31129: LD_INT 800
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: LIST
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PPUSH
31149: CALL_OW 72
31153: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
31154: LD_ADDR_VAR 0 6
31158: PUSH
31159: LD_EXP 89
31163: PUSH
31164: LD_VAR 0 2
31168: ARRAY
31169: PPUSH
31170: LD_INT 21
31172: PUSH
31173: LD_INT 1
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 1
31182: PUSH
31183: LD_INT 3
31185: PUSH
31186: LD_INT 54
31188: PUSH
31189: EMPTY
31190: LIST
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 3
31198: PUSH
31199: LD_INT 24
31201: PUSH
31202: LD_INT 250
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: LIST
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PPUSH
31222: CALL_OW 72
31226: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
31227: LD_ADDR_VAR 0 7
31231: PUSH
31232: LD_VAR 0 5
31236: PUSH
31237: LD_VAR 0 6
31241: DIFF
31242: ST_TO_ADDR
// if not need_heal_1 then
31243: LD_VAR 0 6
31247: NOT
31248: IFFALSE 31281
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
31250: LD_ADDR_EXP 92
31254: PUSH
31255: LD_EXP 92
31259: PPUSH
31260: LD_VAR 0 2
31264: PUSH
31265: LD_INT 1
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PPUSH
31272: EMPTY
31273: PPUSH
31274: CALL 52899 0 3
31278: ST_TO_ADDR
31279: GO 31351
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
31281: LD_ADDR_EXP 92
31285: PUSH
31286: LD_EXP 92
31290: PPUSH
31291: LD_VAR 0 2
31295: PUSH
31296: LD_INT 1
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PPUSH
31303: LD_EXP 92
31307: PUSH
31308: LD_VAR 0 2
31312: ARRAY
31313: PUSH
31314: LD_INT 1
31316: ARRAY
31317: PPUSH
31318: LD_INT 3
31320: PUSH
31321: LD_INT 24
31323: PUSH
31324: LD_INT 1000
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PPUSH
31335: CALL_OW 72
31339: PUSH
31340: LD_VAR 0 6
31344: UNION
31345: PPUSH
31346: CALL 52899 0 3
31350: ST_TO_ADDR
// if not need_heal_2 then
31351: LD_VAR 0 7
31355: NOT
31356: IFFALSE 31389
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
31358: LD_ADDR_EXP 92
31362: PUSH
31363: LD_EXP 92
31367: PPUSH
31368: LD_VAR 0 2
31372: PUSH
31373: LD_INT 2
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PPUSH
31380: EMPTY
31381: PPUSH
31382: CALL 52899 0 3
31386: ST_TO_ADDR
31387: GO 31421
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
31389: LD_ADDR_EXP 92
31393: PUSH
31394: LD_EXP 92
31398: PPUSH
31399: LD_VAR 0 2
31403: PUSH
31404: LD_INT 2
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PPUSH
31411: LD_VAR 0 7
31415: PPUSH
31416: CALL 52899 0 3
31420: ST_TO_ADDR
// if need_heal_2 then
31421: LD_VAR 0 7
31425: IFFALSE 31586
// for j in need_heal_2 do
31427: LD_ADDR_VAR 0 3
31431: PUSH
31432: LD_VAR 0 7
31436: PUSH
31437: FOR_IN
31438: IFFALSE 31584
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31440: LD_ADDR_VAR 0 5
31444: PUSH
31445: LD_EXP 89
31449: PUSH
31450: LD_VAR 0 2
31454: ARRAY
31455: PPUSH
31456: LD_INT 2
31458: PUSH
31459: LD_INT 30
31461: PUSH
31462: LD_INT 6
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 30
31471: PUSH
31472: LD_INT 7
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 30
31481: PUSH
31482: LD_INT 8
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 30
31491: PUSH
31492: LD_INT 0
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 30
31501: PUSH
31502: LD_INT 1
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: PPUSH
31517: CALL_OW 72
31521: ST_TO_ADDR
// if tmp then
31522: LD_VAR 0 5
31526: IFFALSE 31582
// begin k := NearestUnitToUnit ( tmp , j ) ;
31528: LD_ADDR_VAR 0 4
31532: PUSH
31533: LD_VAR 0 5
31537: PPUSH
31538: LD_VAR 0 3
31542: PPUSH
31543: CALL_OW 74
31547: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
31548: LD_VAR 0 3
31552: PPUSH
31553: LD_VAR 0 4
31557: PPUSH
31558: CALL_OW 296
31562: PUSH
31563: LD_INT 5
31565: GREATER
31566: IFFALSE 31582
// ComMoveUnit ( j , k ) ;
31568: LD_VAR 0 3
31572: PPUSH
31573: LD_VAR 0 4
31577: PPUSH
31578: CALL_OW 112
// end ; end ;
31582: GO 31437
31584: POP
31585: POP
// if not need_heal_1 and not need_heal_2 then
31586: LD_VAR 0 6
31590: NOT
31591: PUSH
31592: LD_VAR 0 7
31596: NOT
31597: AND
31598: IFFALSE 31602
// continue ;
31600: GO 31066
// end ;
31602: GO 31066
31604: POP
31605: POP
// RaiseSailEvent ( 102 ) ;
31606: LD_INT 102
31608: PPUSH
31609: CALL_OW 427
// end ;
31613: LD_VAR 0 1
31617: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
31618: LD_INT 0
31620: PPUSH
31621: PPUSH
31622: PPUSH
31623: PPUSH
31624: PPUSH
31625: PPUSH
31626: PPUSH
31627: PPUSH
// if not mc_bases then
31628: LD_EXP 89
31632: NOT
31633: IFFALSE 31637
// exit ;
31635: GO 32472
// for i = 1 to mc_bases do
31637: LD_ADDR_VAR 0 2
31641: PUSH
31642: DOUBLE
31643: LD_INT 1
31645: DEC
31646: ST_TO_ADDR
31647: LD_EXP 89
31651: PUSH
31652: FOR_TO
31653: IFFALSE 32470
// begin if not mc_building_need_repair [ i ] then
31655: LD_EXP 90
31659: PUSH
31660: LD_VAR 0 2
31664: ARRAY
31665: NOT
31666: IFFALSE 31840
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
31668: LD_ADDR_VAR 0 6
31672: PUSH
31673: LD_EXP 108
31677: PUSH
31678: LD_VAR 0 2
31682: ARRAY
31683: PPUSH
31684: LD_INT 3
31686: PUSH
31687: LD_INT 24
31689: PUSH
31690: LD_INT 1000
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 2
31703: PUSH
31704: LD_INT 34
31706: PUSH
31707: LD_INT 13
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 34
31716: PUSH
31717: LD_INT 52
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: LIST
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PPUSH
31733: CALL_OW 72
31737: ST_TO_ADDR
// if cranes then
31738: LD_VAR 0 6
31742: IFFALSE 31804
// for j in cranes do
31744: LD_ADDR_VAR 0 3
31748: PUSH
31749: LD_VAR 0 6
31753: PUSH
31754: FOR_IN
31755: IFFALSE 31802
// if not IsInArea ( j , mc_parking [ i ] ) then
31757: LD_VAR 0 3
31761: PPUSH
31762: LD_EXP 113
31766: PUSH
31767: LD_VAR 0 2
31771: ARRAY
31772: PPUSH
31773: CALL_OW 308
31777: NOT
31778: IFFALSE 31800
// ComMoveToArea ( j , mc_parking [ i ] ) ;
31780: LD_VAR 0 3
31784: PPUSH
31785: LD_EXP 113
31789: PUSH
31790: LD_VAR 0 2
31794: ARRAY
31795: PPUSH
31796: CALL_OW 113
31800: GO 31754
31802: POP
31803: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
31804: LD_ADDR_EXP 91
31808: PUSH
31809: LD_EXP 91
31813: PPUSH
31814: LD_VAR 0 2
31818: PPUSH
31819: EMPTY
31820: PPUSH
31821: CALL_OW 1
31825: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
31826: LD_VAR 0 2
31830: PPUSH
31831: LD_INT 101
31833: PPUSH
31834: CALL 26741 0 2
// continue ;
31838: GO 31652
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
31840: LD_ADDR_EXP 95
31844: PUSH
31845: LD_EXP 95
31849: PPUSH
31850: LD_VAR 0 2
31854: PPUSH
31855: EMPTY
31856: PPUSH
31857: CALL_OW 1
31861: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
31862: LD_VAR 0 2
31866: PPUSH
31867: LD_INT 103
31869: PPUSH
31870: CALL 26741 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
31874: LD_ADDR_VAR 0 5
31878: PUSH
31879: LD_EXP 89
31883: PUSH
31884: LD_VAR 0 2
31888: ARRAY
31889: PUSH
31890: LD_EXP 118
31894: PUSH
31895: LD_VAR 0 2
31899: ARRAY
31900: UNION
31901: PPUSH
31902: LD_INT 2
31904: PUSH
31905: LD_INT 25
31907: PUSH
31908: LD_INT 2
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 25
31917: PUSH
31918: LD_INT 16
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: LIST
31929: PUSH
31930: EMPTY
31931: LIST
31932: PPUSH
31933: CALL_OW 72
31937: PUSH
31938: LD_EXP 92
31942: PUSH
31943: LD_VAR 0 2
31947: ARRAY
31948: PUSH
31949: LD_INT 1
31951: ARRAY
31952: PUSH
31953: LD_EXP 92
31957: PUSH
31958: LD_VAR 0 2
31962: ARRAY
31963: PUSH
31964: LD_INT 2
31966: ARRAY
31967: UNION
31968: DIFF
31969: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
31970: LD_ADDR_VAR 0 6
31974: PUSH
31975: LD_EXP 108
31979: PUSH
31980: LD_VAR 0 2
31984: ARRAY
31985: PPUSH
31986: LD_INT 2
31988: PUSH
31989: LD_INT 34
31991: PUSH
31992: LD_INT 13
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 34
32001: PUSH
32002: LD_INT 52
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: LIST
32013: PPUSH
32014: CALL_OW 72
32018: ST_TO_ADDR
// if cranes then
32019: LD_VAR 0 6
32023: IFFALSE 32159
// begin for j in cranes do
32025: LD_ADDR_VAR 0 3
32029: PUSH
32030: LD_VAR 0 6
32034: PUSH
32035: FOR_IN
32036: IFFALSE 32157
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
32038: LD_VAR 0 3
32042: PPUSH
32043: CALL_OW 256
32047: PUSH
32048: LD_INT 500
32050: GREATEREQUAL
32051: PUSH
32052: LD_VAR 0 3
32056: PPUSH
32057: CALL_OW 314
32061: NOT
32062: AND
32063: IFFALSE 32097
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
32065: LD_VAR 0 3
32069: PPUSH
32070: LD_EXP 90
32074: PUSH
32075: LD_VAR 0 2
32079: ARRAY
32080: PPUSH
32081: LD_VAR 0 3
32085: PPUSH
32086: CALL_OW 74
32090: PPUSH
32091: CALL_OW 130
32095: GO 32155
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
32097: LD_VAR 0 3
32101: PPUSH
32102: CALL_OW 256
32106: PUSH
32107: LD_INT 500
32109: LESS
32110: PUSH
32111: LD_VAR 0 3
32115: PPUSH
32116: LD_EXP 113
32120: PUSH
32121: LD_VAR 0 2
32125: ARRAY
32126: PPUSH
32127: CALL_OW 308
32131: NOT
32132: AND
32133: IFFALSE 32155
// ComMoveToArea ( j , mc_parking [ i ] ) ;
32135: LD_VAR 0 3
32139: PPUSH
32140: LD_EXP 113
32144: PUSH
32145: LD_VAR 0 2
32149: ARRAY
32150: PPUSH
32151: CALL_OW 113
32155: GO 32035
32157: POP
32158: POP
// end ; if tmp > 3 then
32159: LD_VAR 0 5
32163: PUSH
32164: LD_INT 3
32166: GREATER
32167: IFFALSE 32187
// tmp := ShrinkArray ( tmp , 4 ) ;
32169: LD_ADDR_VAR 0 5
32173: PUSH
32174: LD_VAR 0 5
32178: PPUSH
32179: LD_INT 4
32181: PPUSH
32182: CALL 84125 0 2
32186: ST_TO_ADDR
// if not tmp then
32187: LD_VAR 0 5
32191: NOT
32192: IFFALSE 32196
// continue ;
32194: GO 31652
// for j in tmp do
32196: LD_ADDR_VAR 0 3
32200: PUSH
32201: LD_VAR 0 5
32205: PUSH
32206: FOR_IN
32207: IFFALSE 32466
// begin if IsInUnit ( j ) then
32209: LD_VAR 0 3
32213: PPUSH
32214: CALL_OW 310
32218: IFFALSE 32229
// ComExitBuilding ( j ) ;
32220: LD_VAR 0 3
32224: PPUSH
32225: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
32229: LD_VAR 0 3
32233: PUSH
32234: LD_EXP 91
32238: PUSH
32239: LD_VAR 0 2
32243: ARRAY
32244: IN
32245: NOT
32246: IFFALSE 32304
// begin SetTag ( j , 101 ) ;
32248: LD_VAR 0 3
32252: PPUSH
32253: LD_INT 101
32255: PPUSH
32256: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
32260: LD_ADDR_EXP 91
32264: PUSH
32265: LD_EXP 91
32269: PPUSH
32270: LD_VAR 0 2
32274: PUSH
32275: LD_EXP 91
32279: PUSH
32280: LD_VAR 0 2
32284: ARRAY
32285: PUSH
32286: LD_INT 1
32288: PLUS
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PPUSH
32294: LD_VAR 0 3
32298: PPUSH
32299: CALL 52899 0 3
32303: ST_TO_ADDR
// end ; wait ( 1 ) ;
32304: LD_INT 1
32306: PPUSH
32307: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
32311: LD_ADDR_VAR 0 7
32315: PUSH
32316: LD_EXP 90
32320: PUSH
32321: LD_VAR 0 2
32325: ARRAY
32326: ST_TO_ADDR
// if mc_scan [ i ] then
32327: LD_EXP 112
32331: PUSH
32332: LD_VAR 0 2
32336: ARRAY
32337: IFFALSE 32399
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
32339: LD_ADDR_VAR 0 7
32343: PUSH
32344: LD_EXP 90
32348: PUSH
32349: LD_VAR 0 2
32353: ARRAY
32354: PPUSH
32355: LD_INT 3
32357: PUSH
32358: LD_INT 30
32360: PUSH
32361: LD_INT 32
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 30
32370: PUSH
32371: LD_INT 33
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 30
32380: PUSH
32381: LD_INT 31
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: PPUSH
32394: CALL_OW 72
32398: ST_TO_ADDR
// if not to_repair_tmp then
32399: LD_VAR 0 7
32403: NOT
32404: IFFALSE 32408
// continue ;
32406: GO 32206
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
32408: LD_ADDR_VAR 0 8
32412: PUSH
32413: LD_VAR 0 7
32417: PPUSH
32418: LD_VAR 0 3
32422: PPUSH
32423: CALL_OW 74
32427: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 5 then
32428: LD_VAR 0 8
32432: PPUSH
32433: LD_INT 16
32435: PPUSH
32436: CALL 55492 0 2
32440: PUSH
32441: LD_INT 4
32443: ARRAY
32444: PUSH
32445: LD_INT 5
32447: LESS
32448: IFFALSE 32464
// ComRepairBuilding ( j , to_repair ) ;
32450: LD_VAR 0 3
32454: PPUSH
32455: LD_VAR 0 8
32459: PPUSH
32460: CALL_OW 130
// end ;
32464: GO 32206
32466: POP
32467: POP
// end ;
32468: GO 31652
32470: POP
32471: POP
// end ;
32472: LD_VAR 0 1
32476: RET
// export function MC_Heal ; var i , j , tmp ; begin
32477: LD_INT 0
32479: PPUSH
32480: PPUSH
32481: PPUSH
32482: PPUSH
// if not mc_bases then
32483: LD_EXP 89
32487: NOT
32488: IFFALSE 32492
// exit ;
32490: GO 32894
// for i = 1 to mc_bases do
32492: LD_ADDR_VAR 0 2
32496: PUSH
32497: DOUBLE
32498: LD_INT 1
32500: DEC
32501: ST_TO_ADDR
32502: LD_EXP 89
32506: PUSH
32507: FOR_TO
32508: IFFALSE 32892
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
32510: LD_EXP 92
32514: PUSH
32515: LD_VAR 0 2
32519: ARRAY
32520: PUSH
32521: LD_INT 1
32523: ARRAY
32524: NOT
32525: PUSH
32526: LD_EXP 92
32530: PUSH
32531: LD_VAR 0 2
32535: ARRAY
32536: PUSH
32537: LD_INT 2
32539: ARRAY
32540: NOT
32541: AND
32542: IFFALSE 32580
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
32544: LD_ADDR_EXP 93
32548: PUSH
32549: LD_EXP 93
32553: PPUSH
32554: LD_VAR 0 2
32558: PPUSH
32559: EMPTY
32560: PPUSH
32561: CALL_OW 1
32565: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
32566: LD_VAR 0 2
32570: PPUSH
32571: LD_INT 102
32573: PPUSH
32574: CALL 26741 0 2
// continue ;
32578: GO 32507
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
32580: LD_ADDR_VAR 0 4
32584: PUSH
32585: LD_EXP 89
32589: PUSH
32590: LD_VAR 0 2
32594: ARRAY
32595: PPUSH
32596: LD_INT 25
32598: PUSH
32599: LD_INT 4
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PPUSH
32606: CALL_OW 72
32610: ST_TO_ADDR
// if not tmp then
32611: LD_VAR 0 4
32615: NOT
32616: IFFALSE 32620
// continue ;
32618: GO 32507
// if mc_taming [ i ] then
32620: LD_EXP 120
32624: PUSH
32625: LD_VAR 0 2
32629: ARRAY
32630: IFFALSE 32654
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
32632: LD_ADDR_EXP 120
32636: PUSH
32637: LD_EXP 120
32641: PPUSH
32642: LD_VAR 0 2
32646: PPUSH
32647: EMPTY
32648: PPUSH
32649: CALL_OW 1
32653: ST_TO_ADDR
// for j in tmp do
32654: LD_ADDR_VAR 0 3
32658: PUSH
32659: LD_VAR 0 4
32663: PUSH
32664: FOR_IN
32665: IFFALSE 32888
// begin if IsInUnit ( j ) then
32667: LD_VAR 0 3
32671: PPUSH
32672: CALL_OW 310
32676: IFFALSE 32687
// ComExitBuilding ( j ) ;
32678: LD_VAR 0 3
32682: PPUSH
32683: CALL_OW 122
// if not j in mc_healers [ i ] then
32687: LD_VAR 0 3
32691: PUSH
32692: LD_EXP 93
32696: PUSH
32697: LD_VAR 0 2
32701: ARRAY
32702: IN
32703: NOT
32704: IFFALSE 32750
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
32706: LD_ADDR_EXP 93
32710: PUSH
32711: LD_EXP 93
32715: PPUSH
32716: LD_VAR 0 2
32720: PUSH
32721: LD_EXP 93
32725: PUSH
32726: LD_VAR 0 2
32730: ARRAY
32731: PUSH
32732: LD_INT 1
32734: PLUS
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PPUSH
32740: LD_VAR 0 3
32744: PPUSH
32745: CALL 52899 0 3
32749: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
32750: LD_VAR 0 3
32754: PPUSH
32755: CALL_OW 110
32759: PUSH
32760: LD_INT 102
32762: NONEQUAL
32763: IFFALSE 32777
// SetTag ( j , 102 ) ;
32765: LD_VAR 0 3
32769: PPUSH
32770: LD_INT 102
32772: PPUSH
32773: CALL_OW 109
// Wait ( 3 ) ;
32777: LD_INT 3
32779: PPUSH
32780: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
32784: LD_EXP 92
32788: PUSH
32789: LD_VAR 0 2
32793: ARRAY
32794: PUSH
32795: LD_INT 1
32797: ARRAY
32798: IFFALSE 32830
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
32800: LD_VAR 0 3
32804: PPUSH
32805: LD_EXP 92
32809: PUSH
32810: LD_VAR 0 2
32814: ARRAY
32815: PUSH
32816: LD_INT 1
32818: ARRAY
32819: PUSH
32820: LD_INT 1
32822: ARRAY
32823: PPUSH
32824: CALL_OW 128
32828: GO 32886
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
32830: LD_VAR 0 3
32834: PPUSH
32835: CALL_OW 314
32839: NOT
32840: PUSH
32841: LD_EXP 92
32845: PUSH
32846: LD_VAR 0 2
32850: ARRAY
32851: PUSH
32852: LD_INT 2
32854: ARRAY
32855: AND
32856: IFFALSE 32886
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
32858: LD_VAR 0 3
32862: PPUSH
32863: LD_EXP 92
32867: PUSH
32868: LD_VAR 0 2
32872: ARRAY
32873: PUSH
32874: LD_INT 2
32876: ARRAY
32877: PUSH
32878: LD_INT 1
32880: ARRAY
32881: PPUSH
32882: CALL_OW 128
// end ;
32886: GO 32664
32888: POP
32889: POP
// end ;
32890: GO 32507
32892: POP
32893: POP
// end ;
32894: LD_VAR 0 1
32898: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
32899: LD_INT 0
32901: PPUSH
32902: PPUSH
32903: PPUSH
32904: PPUSH
32905: PPUSH
// if not mc_bases then
32906: LD_EXP 89
32910: NOT
32911: IFFALSE 32915
// exit ;
32913: GO 34058
// for i = 1 to mc_bases do
32915: LD_ADDR_VAR 0 2
32919: PUSH
32920: DOUBLE
32921: LD_INT 1
32923: DEC
32924: ST_TO_ADDR
32925: LD_EXP 89
32929: PUSH
32930: FOR_TO
32931: IFFALSE 34056
// begin if mc_scan [ i ] then
32933: LD_EXP 112
32937: PUSH
32938: LD_VAR 0 2
32942: ARRAY
32943: IFFALSE 32947
// continue ;
32945: GO 32930
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
32947: LD_EXP 94
32951: PUSH
32952: LD_VAR 0 2
32956: ARRAY
32957: NOT
32958: PUSH
32959: LD_EXP 96
32963: PUSH
32964: LD_VAR 0 2
32968: ARRAY
32969: NOT
32970: AND
32971: PUSH
32972: LD_EXP 95
32976: PUSH
32977: LD_VAR 0 2
32981: ARRAY
32982: AND
32983: IFFALSE 33021
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
32985: LD_ADDR_EXP 95
32989: PUSH
32990: LD_EXP 95
32994: PPUSH
32995: LD_VAR 0 2
32999: PPUSH
33000: EMPTY
33001: PPUSH
33002: CALL_OW 1
33006: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
33007: LD_VAR 0 2
33011: PPUSH
33012: LD_INT 103
33014: PPUSH
33015: CALL 26741 0 2
// continue ;
33019: GO 32930
// end ; if mc_construct_list [ i ] then
33021: LD_EXP 96
33025: PUSH
33026: LD_VAR 0 2
33030: ARRAY
33031: IFFALSE 33251
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
33033: LD_ADDR_VAR 0 4
33037: PUSH
33038: LD_EXP 89
33042: PUSH
33043: LD_VAR 0 2
33047: ARRAY
33048: PPUSH
33049: LD_INT 25
33051: PUSH
33052: LD_INT 2
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PPUSH
33059: CALL_OW 72
33063: PUSH
33064: LD_EXP 91
33068: PUSH
33069: LD_VAR 0 2
33073: ARRAY
33074: DIFF
33075: ST_TO_ADDR
// if not tmp then
33076: LD_VAR 0 4
33080: NOT
33081: IFFALSE 33085
// continue ;
33083: GO 32930
// for j in tmp do
33085: LD_ADDR_VAR 0 3
33089: PUSH
33090: LD_VAR 0 4
33094: PUSH
33095: FOR_IN
33096: IFFALSE 33247
// begin if not mc_builders [ i ] then
33098: LD_EXP 95
33102: PUSH
33103: LD_VAR 0 2
33107: ARRAY
33108: NOT
33109: IFFALSE 33167
// begin SetTag ( j , 103 ) ;
33111: LD_VAR 0 3
33115: PPUSH
33116: LD_INT 103
33118: PPUSH
33119: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
33123: LD_ADDR_EXP 95
33127: PUSH
33128: LD_EXP 95
33132: PPUSH
33133: LD_VAR 0 2
33137: PUSH
33138: LD_EXP 95
33142: PUSH
33143: LD_VAR 0 2
33147: ARRAY
33148: PUSH
33149: LD_INT 1
33151: PLUS
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PPUSH
33157: LD_VAR 0 3
33161: PPUSH
33162: CALL 52899 0 3
33166: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
33167: LD_VAR 0 3
33171: PPUSH
33172: CALL_OW 310
33176: IFFALSE 33187
// ComExitBuilding ( j ) ;
33178: LD_VAR 0 3
33182: PPUSH
33183: CALL_OW 122
// wait ( 3 ) ;
33187: LD_INT 3
33189: PPUSH
33190: CALL_OW 67
// if not mc_construct_list [ i ] then
33194: LD_EXP 96
33198: PUSH
33199: LD_VAR 0 2
33203: ARRAY
33204: NOT
33205: IFFALSE 33209
// break ;
33207: GO 33247
// if not HasTask ( j ) then
33209: LD_VAR 0 3
33213: PPUSH
33214: CALL_OW 314
33218: NOT
33219: IFFALSE 33245
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
33221: LD_VAR 0 3
33225: PPUSH
33226: LD_EXP 96
33230: PUSH
33231: LD_VAR 0 2
33235: ARRAY
33236: PUSH
33237: LD_INT 1
33239: ARRAY
33240: PPUSH
33241: CALL 55750 0 2
// end ;
33245: GO 33095
33247: POP
33248: POP
// end else
33249: GO 34054
// if mc_build_list [ i ] then
33251: LD_EXP 94
33255: PUSH
33256: LD_VAR 0 2
33260: ARRAY
33261: IFFALSE 34054
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
33263: LD_ADDR_VAR 0 5
33267: PUSH
33268: LD_EXP 89
33272: PUSH
33273: LD_VAR 0 2
33277: ARRAY
33278: PPUSH
33279: LD_INT 2
33281: PUSH
33282: LD_INT 30
33284: PUSH
33285: LD_INT 0
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 30
33294: PUSH
33295: LD_INT 1
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: LIST
33306: PPUSH
33307: CALL_OW 72
33311: ST_TO_ADDR
// if depot then
33312: LD_VAR 0 5
33316: IFFALSE 33334
// depot := depot [ 1 ] else
33318: LD_ADDR_VAR 0 5
33322: PUSH
33323: LD_VAR 0 5
33327: PUSH
33328: LD_INT 1
33330: ARRAY
33331: ST_TO_ADDR
33332: GO 33342
// depot := 0 ;
33334: LD_ADDR_VAR 0 5
33338: PUSH
33339: LD_INT 0
33341: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
33342: LD_EXP 94
33346: PUSH
33347: LD_VAR 0 2
33351: ARRAY
33352: PUSH
33353: LD_INT 1
33355: ARRAY
33356: PUSH
33357: LD_INT 1
33359: ARRAY
33360: PPUSH
33361: CALL 55580 0 1
33365: PUSH
33366: LD_EXP 89
33370: PUSH
33371: LD_VAR 0 2
33375: ARRAY
33376: PPUSH
33377: LD_INT 2
33379: PUSH
33380: LD_INT 30
33382: PUSH
33383: LD_INT 2
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 30
33392: PUSH
33393: LD_INT 3
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: LIST
33404: PPUSH
33405: CALL_OW 72
33409: NOT
33410: AND
33411: IFFALSE 33516
// begin for j = 1 to mc_build_list [ i ] do
33413: LD_ADDR_VAR 0 3
33417: PUSH
33418: DOUBLE
33419: LD_INT 1
33421: DEC
33422: ST_TO_ADDR
33423: LD_EXP 94
33427: PUSH
33428: LD_VAR 0 2
33432: ARRAY
33433: PUSH
33434: FOR_TO
33435: IFFALSE 33514
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
33437: LD_EXP 94
33441: PUSH
33442: LD_VAR 0 2
33446: ARRAY
33447: PUSH
33448: LD_VAR 0 3
33452: ARRAY
33453: PUSH
33454: LD_INT 1
33456: ARRAY
33457: PUSH
33458: LD_INT 2
33460: EQUAL
33461: IFFALSE 33512
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
33463: LD_ADDR_EXP 94
33467: PUSH
33468: LD_EXP 94
33472: PPUSH
33473: LD_VAR 0 2
33477: PPUSH
33478: LD_EXP 94
33482: PUSH
33483: LD_VAR 0 2
33487: ARRAY
33488: PPUSH
33489: LD_VAR 0 3
33493: PPUSH
33494: LD_INT 1
33496: PPUSH
33497: LD_INT 0
33499: PPUSH
33500: CALL 52317 0 4
33504: PPUSH
33505: CALL_OW 1
33509: ST_TO_ADDR
// break ;
33510: GO 33514
// end ;
33512: GO 33434
33514: POP
33515: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
33516: LD_EXP 94
33520: PUSH
33521: LD_VAR 0 2
33525: ARRAY
33526: PUSH
33527: LD_INT 1
33529: ARRAY
33530: PUSH
33531: LD_INT 1
33533: ARRAY
33534: PUSH
33535: LD_INT 0
33537: EQUAL
33538: PUSH
33539: LD_VAR 0 5
33543: PUSH
33544: LD_VAR 0 5
33548: PPUSH
33549: LD_EXP 94
33553: PUSH
33554: LD_VAR 0 2
33558: ARRAY
33559: PUSH
33560: LD_INT 1
33562: ARRAY
33563: PUSH
33564: LD_INT 1
33566: ARRAY
33567: PPUSH
33568: LD_EXP 94
33572: PUSH
33573: LD_VAR 0 2
33577: ARRAY
33578: PUSH
33579: LD_INT 1
33581: ARRAY
33582: PUSH
33583: LD_INT 2
33585: ARRAY
33586: PPUSH
33587: LD_EXP 94
33591: PUSH
33592: LD_VAR 0 2
33596: ARRAY
33597: PUSH
33598: LD_INT 1
33600: ARRAY
33601: PUSH
33602: LD_INT 3
33604: ARRAY
33605: PPUSH
33606: LD_EXP 94
33610: PUSH
33611: LD_VAR 0 2
33615: ARRAY
33616: PUSH
33617: LD_INT 1
33619: ARRAY
33620: PUSH
33621: LD_INT 4
33623: ARRAY
33624: PPUSH
33625: CALL 60314 0 5
33629: AND
33630: OR
33631: IFFALSE 33912
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
33633: LD_ADDR_VAR 0 4
33637: PUSH
33638: LD_EXP 89
33642: PUSH
33643: LD_VAR 0 2
33647: ARRAY
33648: PPUSH
33649: LD_INT 25
33651: PUSH
33652: LD_INT 2
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PPUSH
33659: CALL_OW 72
33663: PUSH
33664: LD_EXP 91
33668: PUSH
33669: LD_VAR 0 2
33673: ARRAY
33674: DIFF
33675: ST_TO_ADDR
// if not tmp then
33676: LD_VAR 0 4
33680: NOT
33681: IFFALSE 33685
// continue ;
33683: GO 32930
// for j in tmp do
33685: LD_ADDR_VAR 0 3
33689: PUSH
33690: LD_VAR 0 4
33694: PUSH
33695: FOR_IN
33696: IFFALSE 33908
// begin if not mc_builders [ i ] then
33698: LD_EXP 95
33702: PUSH
33703: LD_VAR 0 2
33707: ARRAY
33708: NOT
33709: IFFALSE 33767
// begin SetTag ( j , 103 ) ;
33711: LD_VAR 0 3
33715: PPUSH
33716: LD_INT 103
33718: PPUSH
33719: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
33723: LD_ADDR_EXP 95
33727: PUSH
33728: LD_EXP 95
33732: PPUSH
33733: LD_VAR 0 2
33737: PUSH
33738: LD_EXP 95
33742: PUSH
33743: LD_VAR 0 2
33747: ARRAY
33748: PUSH
33749: LD_INT 1
33751: PLUS
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PPUSH
33757: LD_VAR 0 3
33761: PPUSH
33762: CALL 52899 0 3
33766: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
33767: LD_VAR 0 3
33771: PPUSH
33772: CALL_OW 310
33776: IFFALSE 33787
// ComExitBuilding ( j ) ;
33778: LD_VAR 0 3
33782: PPUSH
33783: CALL_OW 122
// wait ( 3 ) ;
33787: LD_INT 3
33789: PPUSH
33790: CALL_OW 67
// if not mc_build_list [ i ] then
33794: LD_EXP 94
33798: PUSH
33799: LD_VAR 0 2
33803: ARRAY
33804: NOT
33805: IFFALSE 33809
// break ;
33807: GO 33908
// if not HasTask ( j ) then
33809: LD_VAR 0 3
33813: PPUSH
33814: CALL_OW 314
33818: NOT
33819: IFFALSE 33906
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
33821: LD_VAR 0 3
33825: PPUSH
33826: LD_EXP 94
33830: PUSH
33831: LD_VAR 0 2
33835: ARRAY
33836: PUSH
33837: LD_INT 1
33839: ARRAY
33840: PUSH
33841: LD_INT 1
33843: ARRAY
33844: PPUSH
33845: LD_EXP 94
33849: PUSH
33850: LD_VAR 0 2
33854: ARRAY
33855: PUSH
33856: LD_INT 1
33858: ARRAY
33859: PUSH
33860: LD_INT 2
33862: ARRAY
33863: PPUSH
33864: LD_EXP 94
33868: PUSH
33869: LD_VAR 0 2
33873: ARRAY
33874: PUSH
33875: LD_INT 1
33877: ARRAY
33878: PUSH
33879: LD_INT 3
33881: ARRAY
33882: PPUSH
33883: LD_EXP 94
33887: PUSH
33888: LD_VAR 0 2
33892: ARRAY
33893: PUSH
33894: LD_INT 1
33896: ARRAY
33897: PUSH
33898: LD_INT 4
33900: ARRAY
33901: PPUSH
33902: CALL_OW 145
// end ;
33906: GO 33695
33908: POP
33909: POP
// end else
33910: GO 34054
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
33912: LD_EXP 89
33916: PUSH
33917: LD_VAR 0 2
33921: ARRAY
33922: PPUSH
33923: LD_EXP 94
33927: PUSH
33928: LD_VAR 0 2
33932: ARRAY
33933: PUSH
33934: LD_INT 1
33936: ARRAY
33937: PUSH
33938: LD_INT 1
33940: ARRAY
33941: PPUSH
33942: LD_EXP 94
33946: PUSH
33947: LD_VAR 0 2
33951: ARRAY
33952: PUSH
33953: LD_INT 1
33955: ARRAY
33956: PUSH
33957: LD_INT 2
33959: ARRAY
33960: PPUSH
33961: LD_EXP 94
33965: PUSH
33966: LD_VAR 0 2
33970: ARRAY
33971: PUSH
33972: LD_INT 1
33974: ARRAY
33975: PUSH
33976: LD_INT 3
33978: ARRAY
33979: PPUSH
33980: LD_EXP 94
33984: PUSH
33985: LD_VAR 0 2
33989: ARRAY
33990: PUSH
33991: LD_INT 1
33993: ARRAY
33994: PUSH
33995: LD_INT 4
33997: ARRAY
33998: PPUSH
33999: CALL 59650 0 5
34003: NOT
34004: IFFALSE 34054
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
34006: LD_ADDR_EXP 94
34010: PUSH
34011: LD_EXP 94
34015: PPUSH
34016: LD_VAR 0 2
34020: PPUSH
34021: LD_EXP 94
34025: PUSH
34026: LD_VAR 0 2
34030: ARRAY
34031: PPUSH
34032: LD_INT 1
34034: PPUSH
34035: LD_INT 1
34037: NEG
34038: PPUSH
34039: LD_INT 0
34041: PPUSH
34042: CALL 52317 0 4
34046: PPUSH
34047: CALL_OW 1
34051: ST_TO_ADDR
// continue ;
34052: GO 32930
// end ; end ; end ;
34054: GO 32930
34056: POP
34057: POP
// end ;
34058: LD_VAR 0 1
34062: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
34063: LD_INT 0
34065: PPUSH
34066: PPUSH
34067: PPUSH
34068: PPUSH
34069: PPUSH
34070: PPUSH
// if not mc_bases then
34071: LD_EXP 89
34075: NOT
34076: IFFALSE 34080
// exit ;
34078: GO 34507
// for i = 1 to mc_bases do
34080: LD_ADDR_VAR 0 2
34084: PUSH
34085: DOUBLE
34086: LD_INT 1
34088: DEC
34089: ST_TO_ADDR
34090: LD_EXP 89
34094: PUSH
34095: FOR_TO
34096: IFFALSE 34505
// begin tmp := mc_build_upgrade [ i ] ;
34098: LD_ADDR_VAR 0 4
34102: PUSH
34103: LD_EXP 121
34107: PUSH
34108: LD_VAR 0 2
34112: ARRAY
34113: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
34114: LD_ADDR_VAR 0 6
34118: PUSH
34119: LD_EXP 122
34123: PUSH
34124: LD_VAR 0 2
34128: ARRAY
34129: PPUSH
34130: LD_INT 2
34132: PUSH
34133: LD_INT 30
34135: PUSH
34136: LD_INT 6
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 30
34145: PUSH
34146: LD_INT 7
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: LIST
34157: PPUSH
34158: CALL_OW 72
34162: ST_TO_ADDR
// if not tmp and not lab then
34163: LD_VAR 0 4
34167: NOT
34168: PUSH
34169: LD_VAR 0 6
34173: NOT
34174: AND
34175: IFFALSE 34179
// continue ;
34177: GO 34095
// if tmp then
34179: LD_VAR 0 4
34183: IFFALSE 34303
// for j in tmp do
34185: LD_ADDR_VAR 0 3
34189: PUSH
34190: LD_VAR 0 4
34194: PUSH
34195: FOR_IN
34196: IFFALSE 34301
// begin if UpgradeCost ( j ) then
34198: LD_VAR 0 3
34202: PPUSH
34203: CALL 59310 0 1
34207: IFFALSE 34299
// begin ComUpgrade ( j ) ;
34209: LD_VAR 0 3
34213: PPUSH
34214: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
34218: LD_ADDR_EXP 121
34222: PUSH
34223: LD_EXP 121
34227: PPUSH
34228: LD_VAR 0 2
34232: PPUSH
34233: LD_EXP 121
34237: PUSH
34238: LD_VAR 0 2
34242: ARRAY
34243: PUSH
34244: LD_VAR 0 3
34248: DIFF
34249: PPUSH
34250: CALL_OW 1
34254: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
34255: LD_ADDR_EXP 96
34259: PUSH
34260: LD_EXP 96
34264: PPUSH
34265: LD_VAR 0 2
34269: PUSH
34270: LD_EXP 96
34274: PUSH
34275: LD_VAR 0 2
34279: ARRAY
34280: PUSH
34281: LD_INT 1
34283: PLUS
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PPUSH
34289: LD_VAR 0 3
34293: PPUSH
34294: CALL 52899 0 3
34298: ST_TO_ADDR
// end ; end ;
34299: GO 34195
34301: POP
34302: POP
// if not lab or not mc_lab_upgrade [ i ] then
34303: LD_VAR 0 6
34307: NOT
34308: PUSH
34309: LD_EXP 123
34313: PUSH
34314: LD_VAR 0 2
34318: ARRAY
34319: NOT
34320: OR
34321: IFFALSE 34325
// continue ;
34323: GO 34095
// for j in lab do
34325: LD_ADDR_VAR 0 3
34329: PUSH
34330: LD_VAR 0 6
34334: PUSH
34335: FOR_IN
34336: IFFALSE 34501
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
34338: LD_VAR 0 3
34342: PPUSH
34343: CALL_OW 266
34347: PUSH
34348: LD_INT 6
34350: PUSH
34351: LD_INT 7
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: IN
34358: PUSH
34359: LD_VAR 0 3
34363: PPUSH
34364: CALL_OW 461
34368: PUSH
34369: LD_INT 1
34371: NONEQUAL
34372: AND
34373: IFFALSE 34499
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
34375: LD_VAR 0 3
34379: PPUSH
34380: LD_EXP 123
34384: PUSH
34385: LD_VAR 0 2
34389: ARRAY
34390: PUSH
34391: LD_INT 1
34393: ARRAY
34394: PPUSH
34395: CALL 59515 0 2
34399: IFFALSE 34499
// begin ComCancel ( j ) ;
34401: LD_VAR 0 3
34405: PPUSH
34406: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
34410: LD_VAR 0 3
34414: PPUSH
34415: LD_EXP 123
34419: PUSH
34420: LD_VAR 0 2
34424: ARRAY
34425: PUSH
34426: LD_INT 1
34428: ARRAY
34429: PPUSH
34430: CALL_OW 207
// if not j in mc_construct_list [ i ] then
34434: LD_VAR 0 3
34438: PUSH
34439: LD_EXP 96
34443: PUSH
34444: LD_VAR 0 2
34448: ARRAY
34449: IN
34450: NOT
34451: IFFALSE 34497
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
34453: LD_ADDR_EXP 96
34457: PUSH
34458: LD_EXP 96
34462: PPUSH
34463: LD_VAR 0 2
34467: PUSH
34468: LD_EXP 96
34472: PUSH
34473: LD_VAR 0 2
34477: ARRAY
34478: PUSH
34479: LD_INT 1
34481: PLUS
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PPUSH
34487: LD_VAR 0 3
34491: PPUSH
34492: CALL 52899 0 3
34496: ST_TO_ADDR
// break ;
34497: GO 34501
// end ; end ; end ;
34499: GO 34335
34501: POP
34502: POP
// end ;
34503: GO 34095
34505: POP
34506: POP
// end ;
34507: LD_VAR 0 1
34511: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
34512: LD_INT 0
34514: PPUSH
34515: PPUSH
34516: PPUSH
34517: PPUSH
34518: PPUSH
34519: PPUSH
34520: PPUSH
34521: PPUSH
34522: PPUSH
// if not mc_bases then
34523: LD_EXP 89
34527: NOT
34528: IFFALSE 34532
// exit ;
34530: GO 34937
// for i = 1 to mc_bases do
34532: LD_ADDR_VAR 0 2
34536: PUSH
34537: DOUBLE
34538: LD_INT 1
34540: DEC
34541: ST_TO_ADDR
34542: LD_EXP 89
34546: PUSH
34547: FOR_TO
34548: IFFALSE 34935
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
34550: LD_EXP 97
34554: PUSH
34555: LD_VAR 0 2
34559: ARRAY
34560: NOT
34561: PUSH
34562: LD_EXP 89
34566: PUSH
34567: LD_VAR 0 2
34571: ARRAY
34572: PPUSH
34573: LD_INT 30
34575: PUSH
34576: LD_INT 3
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PPUSH
34583: CALL_OW 72
34587: NOT
34588: OR
34589: IFFALSE 34593
// continue ;
34591: GO 34547
// busy := false ;
34593: LD_ADDR_VAR 0 8
34597: PUSH
34598: LD_INT 0
34600: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
34601: LD_ADDR_VAR 0 4
34605: PUSH
34606: LD_EXP 89
34610: PUSH
34611: LD_VAR 0 2
34615: ARRAY
34616: PPUSH
34617: LD_INT 30
34619: PUSH
34620: LD_INT 3
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PPUSH
34627: CALL_OW 72
34631: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
34632: LD_ADDR_VAR 0 6
34636: PUSH
34637: LD_EXP 97
34641: PUSH
34642: LD_VAR 0 2
34646: ARRAY
34647: PPUSH
34648: LD_INT 2
34650: PUSH
34651: LD_INT 30
34653: PUSH
34654: LD_INT 32
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 30
34663: PUSH
34664: LD_INT 33
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: LIST
34675: PPUSH
34676: CALL_OW 72
34680: ST_TO_ADDR
// if not t then
34681: LD_VAR 0 6
34685: NOT
34686: IFFALSE 34690
// continue ;
34688: GO 34547
// for j in tmp do
34690: LD_ADDR_VAR 0 3
34694: PUSH
34695: LD_VAR 0 4
34699: PUSH
34700: FOR_IN
34701: IFFALSE 34731
// if not BuildingStatus ( j ) = bs_idle then
34703: LD_VAR 0 3
34707: PPUSH
34708: CALL_OW 461
34712: PUSH
34713: LD_INT 2
34715: EQUAL
34716: NOT
34717: IFFALSE 34729
// begin busy := true ;
34719: LD_ADDR_VAR 0 8
34723: PUSH
34724: LD_INT 1
34726: ST_TO_ADDR
// break ;
34727: GO 34731
// end ;
34729: GO 34700
34731: POP
34732: POP
// if busy then
34733: LD_VAR 0 8
34737: IFFALSE 34741
// continue ;
34739: GO 34547
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
34741: LD_ADDR_VAR 0 7
34745: PUSH
34746: LD_VAR 0 6
34750: PPUSH
34751: LD_INT 35
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PPUSH
34761: CALL_OW 72
34765: ST_TO_ADDR
// if tw then
34766: LD_VAR 0 7
34770: IFFALSE 34847
// begin tw := tw [ 1 ] ;
34772: LD_ADDR_VAR 0 7
34776: PUSH
34777: LD_VAR 0 7
34781: PUSH
34782: LD_INT 1
34784: ARRAY
34785: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
34786: LD_ADDR_VAR 0 9
34790: PUSH
34791: LD_VAR 0 7
34795: PPUSH
34796: LD_EXP 114
34800: PUSH
34801: LD_VAR 0 2
34805: ARRAY
34806: PPUSH
34807: CALL 57869 0 2
34811: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
34812: LD_EXP 128
34816: PUSH
34817: LD_VAR 0 2
34821: ARRAY
34822: IFFALSE 34845
// if not weapon in mc_allowed_tower_weapons [ i ] then
34824: LD_VAR 0 9
34828: PUSH
34829: LD_EXP 128
34833: PUSH
34834: LD_VAR 0 2
34838: ARRAY
34839: IN
34840: NOT
34841: IFFALSE 34845
// continue ;
34843: GO 34547
// end else
34845: GO 34910
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
34847: LD_ADDR_VAR 0 5
34851: PUSH
34852: LD_EXP 97
34856: PUSH
34857: LD_VAR 0 2
34861: ARRAY
34862: PPUSH
34863: LD_VAR 0 4
34867: PPUSH
34868: CALL 83371 0 2
34872: ST_TO_ADDR
// if not tmp2 then
34873: LD_VAR 0 5
34877: NOT
34878: IFFALSE 34882
// continue ;
34880: GO 34547
// tw := tmp2 [ 1 ] ;
34882: LD_ADDR_VAR 0 7
34886: PUSH
34887: LD_VAR 0 5
34891: PUSH
34892: LD_INT 1
34894: ARRAY
34895: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
34896: LD_ADDR_VAR 0 9
34900: PUSH
34901: LD_VAR 0 5
34905: PUSH
34906: LD_INT 2
34908: ARRAY
34909: ST_TO_ADDR
// end ; if not weapon then
34910: LD_VAR 0 9
34914: NOT
34915: IFFALSE 34919
// continue ;
34917: GO 34547
// ComPlaceWeapon ( tw , weapon ) ;
34919: LD_VAR 0 7
34923: PPUSH
34924: LD_VAR 0 9
34928: PPUSH
34929: CALL_OW 148
// end ;
34933: GO 34547
34935: POP
34936: POP
// end ;
34937: LD_VAR 0 1
34941: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
34942: LD_INT 0
34944: PPUSH
34945: PPUSH
34946: PPUSH
34947: PPUSH
34948: PPUSH
34949: PPUSH
// if not mc_bases then
34950: LD_EXP 89
34954: NOT
34955: IFFALSE 34959
// exit ;
34957: GO 35735
// for i = 1 to mc_bases do
34959: LD_ADDR_VAR 0 2
34963: PUSH
34964: DOUBLE
34965: LD_INT 1
34967: DEC
34968: ST_TO_ADDR
34969: LD_EXP 89
34973: PUSH
34974: FOR_TO
34975: IFFALSE 35733
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
34977: LD_EXP 102
34981: PUSH
34982: LD_VAR 0 2
34986: ARRAY
34987: NOT
34988: PUSH
34989: LD_EXP 102
34993: PUSH
34994: LD_VAR 0 2
34998: ARRAY
34999: PUSH
35000: LD_EXP 103
35004: PUSH
35005: LD_VAR 0 2
35009: ARRAY
35010: EQUAL
35011: OR
35012: PUSH
35013: LD_EXP 112
35017: PUSH
35018: LD_VAR 0 2
35022: ARRAY
35023: OR
35024: IFFALSE 35028
// continue ;
35026: GO 34974
// if mc_miners [ i ] then
35028: LD_EXP 103
35032: PUSH
35033: LD_VAR 0 2
35037: ARRAY
35038: IFFALSE 35420
// begin for j = mc_miners [ i ] downto 1 do
35040: LD_ADDR_VAR 0 3
35044: PUSH
35045: DOUBLE
35046: LD_EXP 103
35050: PUSH
35051: LD_VAR 0 2
35055: ARRAY
35056: INC
35057: ST_TO_ADDR
35058: LD_INT 1
35060: PUSH
35061: FOR_DOWNTO
35062: IFFALSE 35418
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
35064: LD_EXP 103
35068: PUSH
35069: LD_VAR 0 2
35073: ARRAY
35074: PUSH
35075: LD_VAR 0 3
35079: ARRAY
35080: PPUSH
35081: CALL_OW 301
35085: PUSH
35086: LD_EXP 103
35090: PUSH
35091: LD_VAR 0 2
35095: ARRAY
35096: PUSH
35097: LD_VAR 0 3
35101: ARRAY
35102: PPUSH
35103: CALL_OW 257
35107: PUSH
35108: LD_INT 1
35110: NONEQUAL
35111: OR
35112: IFFALSE 35175
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
35114: LD_ADDR_VAR 0 5
35118: PUSH
35119: LD_EXP 103
35123: PUSH
35124: LD_VAR 0 2
35128: ARRAY
35129: PUSH
35130: LD_EXP 103
35134: PUSH
35135: LD_VAR 0 2
35139: ARRAY
35140: PUSH
35141: LD_VAR 0 3
35145: ARRAY
35146: DIFF
35147: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
35148: LD_ADDR_EXP 103
35152: PUSH
35153: LD_EXP 103
35157: PPUSH
35158: LD_VAR 0 2
35162: PPUSH
35163: LD_VAR 0 5
35167: PPUSH
35168: CALL_OW 1
35172: ST_TO_ADDR
// continue ;
35173: GO 35061
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
35175: LD_EXP 103
35179: PUSH
35180: LD_VAR 0 2
35184: ARRAY
35185: PUSH
35186: LD_VAR 0 3
35190: ARRAY
35191: PPUSH
35192: CALL_OW 257
35196: PUSH
35197: LD_INT 1
35199: EQUAL
35200: PUSH
35201: LD_EXP 103
35205: PUSH
35206: LD_VAR 0 2
35210: ARRAY
35211: PUSH
35212: LD_VAR 0 3
35216: ARRAY
35217: PPUSH
35218: CALL_OW 459
35222: NOT
35223: AND
35224: PUSH
35225: LD_EXP 103
35229: PUSH
35230: LD_VAR 0 2
35234: ARRAY
35235: PUSH
35236: LD_VAR 0 3
35240: ARRAY
35241: PPUSH
35242: CALL_OW 314
35246: NOT
35247: AND
35248: IFFALSE 35416
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
35250: LD_EXP 103
35254: PUSH
35255: LD_VAR 0 2
35259: ARRAY
35260: PUSH
35261: LD_VAR 0 3
35265: ARRAY
35266: PPUSH
35267: CALL_OW 310
35271: IFFALSE 35294
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
35273: LD_EXP 103
35277: PUSH
35278: LD_VAR 0 2
35282: ARRAY
35283: PUSH
35284: LD_VAR 0 3
35288: ARRAY
35289: PPUSH
35290: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
35294: LD_EXP 103
35298: PUSH
35299: LD_VAR 0 2
35303: ARRAY
35304: PUSH
35305: LD_VAR 0 3
35309: ARRAY
35310: PPUSH
35311: CALL_OW 314
35315: NOT
35316: IFFALSE 35416
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
35318: LD_EXP 103
35322: PUSH
35323: LD_VAR 0 2
35327: ARRAY
35328: PUSH
35329: LD_VAR 0 3
35333: ARRAY
35334: PPUSH
35335: LD_EXP 102
35339: PUSH
35340: LD_VAR 0 2
35344: ARRAY
35345: PUSH
35346: LD_VAR 0 3
35350: PUSH
35351: LD_EXP 102
35355: PUSH
35356: LD_VAR 0 2
35360: ARRAY
35361: MOD
35362: PUSH
35363: LD_INT 1
35365: PLUS
35366: ARRAY
35367: PUSH
35368: LD_INT 1
35370: ARRAY
35371: PPUSH
35372: LD_EXP 102
35376: PUSH
35377: LD_VAR 0 2
35381: ARRAY
35382: PUSH
35383: LD_VAR 0 3
35387: PUSH
35388: LD_EXP 102
35392: PUSH
35393: LD_VAR 0 2
35397: ARRAY
35398: MOD
35399: PUSH
35400: LD_INT 1
35402: PLUS
35403: ARRAY
35404: PUSH
35405: LD_INT 2
35407: ARRAY
35408: PPUSH
35409: LD_INT 0
35411: PPUSH
35412: CALL_OW 193
// end ; end ;
35416: GO 35061
35418: POP
35419: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
35420: LD_ADDR_VAR 0 5
35424: PUSH
35425: LD_EXP 89
35429: PUSH
35430: LD_VAR 0 2
35434: ARRAY
35435: PPUSH
35436: LD_INT 2
35438: PUSH
35439: LD_INT 30
35441: PUSH
35442: LD_INT 4
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 30
35451: PUSH
35452: LD_INT 5
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 30
35461: PUSH
35462: LD_INT 32
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: PPUSH
35475: CALL_OW 72
35479: ST_TO_ADDR
// if not tmp then
35480: LD_VAR 0 5
35484: NOT
35485: IFFALSE 35489
// continue ;
35487: GO 34974
// list := [ ] ;
35489: LD_ADDR_VAR 0 6
35493: PUSH
35494: EMPTY
35495: ST_TO_ADDR
// for j in tmp do
35496: LD_ADDR_VAR 0 3
35500: PUSH
35501: LD_VAR 0 5
35505: PUSH
35506: FOR_IN
35507: IFFALSE 35576
// begin for k in UnitsInside ( j ) do
35509: LD_ADDR_VAR 0 4
35513: PUSH
35514: LD_VAR 0 3
35518: PPUSH
35519: CALL_OW 313
35523: PUSH
35524: FOR_IN
35525: IFFALSE 35572
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
35527: LD_VAR 0 4
35531: PPUSH
35532: CALL_OW 257
35536: PUSH
35537: LD_INT 1
35539: EQUAL
35540: PUSH
35541: LD_VAR 0 4
35545: PPUSH
35546: CALL_OW 459
35550: NOT
35551: AND
35552: IFFALSE 35570
// list := list ^ k ;
35554: LD_ADDR_VAR 0 6
35558: PUSH
35559: LD_VAR 0 6
35563: PUSH
35564: LD_VAR 0 4
35568: ADD
35569: ST_TO_ADDR
35570: GO 35524
35572: POP
35573: POP
// end ;
35574: GO 35506
35576: POP
35577: POP
// list := list diff mc_miners [ i ] ;
35578: LD_ADDR_VAR 0 6
35582: PUSH
35583: LD_VAR 0 6
35587: PUSH
35588: LD_EXP 103
35592: PUSH
35593: LD_VAR 0 2
35597: ARRAY
35598: DIFF
35599: ST_TO_ADDR
// if not list then
35600: LD_VAR 0 6
35604: NOT
35605: IFFALSE 35609
// continue ;
35607: GO 34974
// k := mc_mines [ i ] - mc_miners [ i ] ;
35609: LD_ADDR_VAR 0 4
35613: PUSH
35614: LD_EXP 102
35618: PUSH
35619: LD_VAR 0 2
35623: ARRAY
35624: PUSH
35625: LD_EXP 103
35629: PUSH
35630: LD_VAR 0 2
35634: ARRAY
35635: MINUS
35636: ST_TO_ADDR
// if k > list then
35637: LD_VAR 0 4
35641: PUSH
35642: LD_VAR 0 6
35646: GREATER
35647: IFFALSE 35659
// k := list ;
35649: LD_ADDR_VAR 0 4
35653: PUSH
35654: LD_VAR 0 6
35658: ST_TO_ADDR
// for j = 1 to k do
35659: LD_ADDR_VAR 0 3
35663: PUSH
35664: DOUBLE
35665: LD_INT 1
35667: DEC
35668: ST_TO_ADDR
35669: LD_VAR 0 4
35673: PUSH
35674: FOR_TO
35675: IFFALSE 35729
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
35677: LD_ADDR_EXP 103
35681: PUSH
35682: LD_EXP 103
35686: PPUSH
35687: LD_VAR 0 2
35691: PUSH
35692: LD_EXP 103
35696: PUSH
35697: LD_VAR 0 2
35701: ARRAY
35702: PUSH
35703: LD_INT 1
35705: PLUS
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PPUSH
35711: LD_VAR 0 6
35715: PUSH
35716: LD_VAR 0 3
35720: ARRAY
35721: PPUSH
35722: CALL 52899 0 3
35726: ST_TO_ADDR
35727: GO 35674
35729: POP
35730: POP
// end ;
35731: GO 34974
35733: POP
35734: POP
// end ;
35735: LD_VAR 0 1
35739: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
35740: LD_INT 0
35742: PPUSH
35743: PPUSH
35744: PPUSH
35745: PPUSH
35746: PPUSH
35747: PPUSH
35748: PPUSH
35749: PPUSH
35750: PPUSH
35751: PPUSH
// if not mc_bases then
35752: LD_EXP 89
35756: NOT
35757: IFFALSE 35761
// exit ;
35759: GO 37511
// for i = 1 to mc_bases do
35761: LD_ADDR_VAR 0 2
35765: PUSH
35766: DOUBLE
35767: LD_INT 1
35769: DEC
35770: ST_TO_ADDR
35771: LD_EXP 89
35775: PUSH
35776: FOR_TO
35777: IFFALSE 37509
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
35779: LD_EXP 89
35783: PUSH
35784: LD_VAR 0 2
35788: ARRAY
35789: NOT
35790: PUSH
35791: LD_EXP 96
35795: PUSH
35796: LD_VAR 0 2
35800: ARRAY
35801: OR
35802: IFFALSE 35806
// continue ;
35804: GO 35776
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
35806: LD_EXP 105
35810: PUSH
35811: LD_VAR 0 2
35815: ARRAY
35816: NOT
35817: PUSH
35818: LD_EXP 106
35822: PUSH
35823: LD_VAR 0 2
35827: ARRAY
35828: AND
35829: IFFALSE 35867
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
35831: LD_ADDR_EXP 106
35835: PUSH
35836: LD_EXP 106
35840: PPUSH
35841: LD_VAR 0 2
35845: PPUSH
35846: EMPTY
35847: PPUSH
35848: CALL_OW 1
35852: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
35853: LD_VAR 0 2
35857: PPUSH
35858: LD_INT 107
35860: PPUSH
35861: CALL 26741 0 2
// continue ;
35865: GO 35776
// end ; target := [ ] ;
35867: LD_ADDR_VAR 0 6
35871: PUSH
35872: EMPTY
35873: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
35874: LD_ADDR_VAR 0 3
35878: PUSH
35879: DOUBLE
35880: LD_EXP 105
35884: PUSH
35885: LD_VAR 0 2
35889: ARRAY
35890: INC
35891: ST_TO_ADDR
35892: LD_INT 1
35894: PUSH
35895: FOR_DOWNTO
35896: IFFALSE 36156
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
35898: LD_EXP 105
35902: PUSH
35903: LD_VAR 0 2
35907: ARRAY
35908: PUSH
35909: LD_VAR 0 3
35913: ARRAY
35914: PUSH
35915: LD_INT 2
35917: ARRAY
35918: PPUSH
35919: LD_EXP 105
35923: PUSH
35924: LD_VAR 0 2
35928: ARRAY
35929: PUSH
35930: LD_VAR 0 3
35934: ARRAY
35935: PUSH
35936: LD_INT 3
35938: ARRAY
35939: PPUSH
35940: CALL_OW 488
35944: PUSH
35945: LD_EXP 105
35949: PUSH
35950: LD_VAR 0 2
35954: ARRAY
35955: PUSH
35956: LD_VAR 0 3
35960: ARRAY
35961: PUSH
35962: LD_INT 2
35964: ARRAY
35965: PPUSH
35966: LD_EXP 105
35970: PUSH
35971: LD_VAR 0 2
35975: ARRAY
35976: PUSH
35977: LD_VAR 0 3
35981: ARRAY
35982: PUSH
35983: LD_INT 3
35985: ARRAY
35986: PPUSH
35987: CALL_OW 284
35991: PUSH
35992: LD_INT 0
35994: EQUAL
35995: AND
35996: IFFALSE 36051
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
35998: LD_ADDR_VAR 0 5
36002: PUSH
36003: LD_EXP 105
36007: PUSH
36008: LD_VAR 0 2
36012: ARRAY
36013: PPUSH
36014: LD_VAR 0 3
36018: PPUSH
36019: CALL_OW 3
36023: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
36024: LD_ADDR_EXP 105
36028: PUSH
36029: LD_EXP 105
36033: PPUSH
36034: LD_VAR 0 2
36038: PPUSH
36039: LD_VAR 0 5
36043: PPUSH
36044: CALL_OW 1
36048: ST_TO_ADDR
// continue ;
36049: GO 35895
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
36051: LD_EXP 89
36055: PUSH
36056: LD_VAR 0 2
36060: ARRAY
36061: PUSH
36062: LD_INT 1
36064: ARRAY
36065: PPUSH
36066: CALL_OW 255
36070: PPUSH
36071: LD_EXP 105
36075: PUSH
36076: LD_VAR 0 2
36080: ARRAY
36081: PUSH
36082: LD_VAR 0 3
36086: ARRAY
36087: PUSH
36088: LD_INT 2
36090: ARRAY
36091: PPUSH
36092: LD_EXP 105
36096: PUSH
36097: LD_VAR 0 2
36101: ARRAY
36102: PUSH
36103: LD_VAR 0 3
36107: ARRAY
36108: PUSH
36109: LD_INT 3
36111: ARRAY
36112: PPUSH
36113: LD_INT 30
36115: PPUSH
36116: CALL 53795 0 4
36120: PUSH
36121: LD_INT 4
36123: ARRAY
36124: PUSH
36125: LD_INT 0
36127: EQUAL
36128: IFFALSE 36154
// begin target := mc_crates [ i ] [ j ] ;
36130: LD_ADDR_VAR 0 6
36134: PUSH
36135: LD_EXP 105
36139: PUSH
36140: LD_VAR 0 2
36144: ARRAY
36145: PUSH
36146: LD_VAR 0 3
36150: ARRAY
36151: ST_TO_ADDR
// break ;
36152: GO 36156
// end ; end ;
36154: GO 35895
36156: POP
36157: POP
// if not target then
36158: LD_VAR 0 6
36162: NOT
36163: IFFALSE 36167
// continue ;
36165: GO 35776
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
36167: LD_ADDR_VAR 0 7
36171: PUSH
36172: LD_EXP 108
36176: PUSH
36177: LD_VAR 0 2
36181: ARRAY
36182: PPUSH
36183: LD_INT 2
36185: PUSH
36186: LD_INT 3
36188: PUSH
36189: LD_INT 58
36191: PUSH
36192: EMPTY
36193: LIST
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 61
36201: PUSH
36202: EMPTY
36203: LIST
36204: PUSH
36205: LD_INT 33
36207: PUSH
36208: LD_INT 5
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 33
36217: PUSH
36218: LD_INT 3
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 2
36234: PUSH
36235: LD_INT 34
36237: PUSH
36238: LD_INT 32
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 34
36247: PUSH
36248: LD_INT 51
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 34
36257: PUSH
36258: LD_INT 12
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PPUSH
36275: CALL_OW 72
36279: ST_TO_ADDR
// if not cargo then
36280: LD_VAR 0 7
36284: NOT
36285: IFFALSE 36928
// begin if mc_crates_collector [ i ] < 5 then
36287: LD_EXP 106
36291: PUSH
36292: LD_VAR 0 2
36296: ARRAY
36297: PUSH
36298: LD_INT 5
36300: LESS
36301: IFFALSE 36667
// begin if mc_ape [ i ] then
36303: LD_EXP 118
36307: PUSH
36308: LD_VAR 0 2
36312: ARRAY
36313: IFFALSE 36360
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
36315: LD_ADDR_VAR 0 5
36319: PUSH
36320: LD_EXP 118
36324: PUSH
36325: LD_VAR 0 2
36329: ARRAY
36330: PPUSH
36331: LD_INT 25
36333: PUSH
36334: LD_INT 16
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 24
36343: PUSH
36344: LD_INT 750
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PPUSH
36355: CALL_OW 72
36359: ST_TO_ADDR
// if not tmp then
36360: LD_VAR 0 5
36364: NOT
36365: IFFALSE 36412
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
36367: LD_ADDR_VAR 0 5
36371: PUSH
36372: LD_EXP 89
36376: PUSH
36377: LD_VAR 0 2
36381: ARRAY
36382: PPUSH
36383: LD_INT 25
36385: PUSH
36386: LD_INT 2
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 24
36395: PUSH
36396: LD_INT 750
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PPUSH
36407: CALL_OW 72
36411: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
36412: LD_EXP 118
36416: PUSH
36417: LD_VAR 0 2
36421: ARRAY
36422: PUSH
36423: LD_EXP 89
36427: PUSH
36428: LD_VAR 0 2
36432: ARRAY
36433: PPUSH
36434: LD_INT 25
36436: PUSH
36437: LD_INT 2
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 24
36446: PUSH
36447: LD_INT 750
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PPUSH
36458: CALL_OW 72
36462: AND
36463: PUSH
36464: LD_VAR 0 5
36468: PUSH
36469: LD_INT 5
36471: LESS
36472: AND
36473: IFFALSE 36555
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
36475: LD_ADDR_VAR 0 3
36479: PUSH
36480: LD_EXP 89
36484: PUSH
36485: LD_VAR 0 2
36489: ARRAY
36490: PPUSH
36491: LD_INT 25
36493: PUSH
36494: LD_INT 2
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 24
36503: PUSH
36504: LD_INT 750
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PPUSH
36515: CALL_OW 72
36519: PUSH
36520: FOR_IN
36521: IFFALSE 36553
// begin tmp := tmp union j ;
36523: LD_ADDR_VAR 0 5
36527: PUSH
36528: LD_VAR 0 5
36532: PUSH
36533: LD_VAR 0 3
36537: UNION
36538: ST_TO_ADDR
// if tmp >= 5 then
36539: LD_VAR 0 5
36543: PUSH
36544: LD_INT 5
36546: GREATEREQUAL
36547: IFFALSE 36551
// break ;
36549: GO 36553
// end ;
36551: GO 36520
36553: POP
36554: POP
// end ; if not tmp then
36555: LD_VAR 0 5
36559: NOT
36560: IFFALSE 36564
// continue ;
36562: GO 35776
// for j in tmp do
36564: LD_ADDR_VAR 0 3
36568: PUSH
36569: LD_VAR 0 5
36573: PUSH
36574: FOR_IN
36575: IFFALSE 36665
// if not GetTag ( j ) then
36577: LD_VAR 0 3
36581: PPUSH
36582: CALL_OW 110
36586: NOT
36587: IFFALSE 36663
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
36589: LD_ADDR_EXP 106
36593: PUSH
36594: LD_EXP 106
36598: PPUSH
36599: LD_VAR 0 2
36603: PUSH
36604: LD_EXP 106
36608: PUSH
36609: LD_VAR 0 2
36613: ARRAY
36614: PUSH
36615: LD_INT 1
36617: PLUS
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PPUSH
36623: LD_VAR 0 3
36627: PPUSH
36628: CALL 52899 0 3
36632: ST_TO_ADDR
// SetTag ( j , 107 ) ;
36633: LD_VAR 0 3
36637: PPUSH
36638: LD_INT 107
36640: PPUSH
36641: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
36645: LD_EXP 106
36649: PUSH
36650: LD_VAR 0 2
36654: ARRAY
36655: PUSH
36656: LD_INT 5
36658: GREATEREQUAL
36659: IFFALSE 36663
// break ;
36661: GO 36665
// end ;
36663: GO 36574
36665: POP
36666: POP
// end ; if mc_crates_collector [ i ] and target then
36667: LD_EXP 106
36671: PUSH
36672: LD_VAR 0 2
36676: ARRAY
36677: PUSH
36678: LD_VAR 0 6
36682: AND
36683: IFFALSE 36926
// begin if mc_crates_collector [ i ] < target [ 1 ] then
36685: LD_EXP 106
36689: PUSH
36690: LD_VAR 0 2
36694: ARRAY
36695: PUSH
36696: LD_VAR 0 6
36700: PUSH
36701: LD_INT 1
36703: ARRAY
36704: LESS
36705: IFFALSE 36725
// tmp := mc_crates_collector [ i ] else
36707: LD_ADDR_VAR 0 5
36711: PUSH
36712: LD_EXP 106
36716: PUSH
36717: LD_VAR 0 2
36721: ARRAY
36722: ST_TO_ADDR
36723: GO 36739
// tmp := target [ 1 ] ;
36725: LD_ADDR_VAR 0 5
36729: PUSH
36730: LD_VAR 0 6
36734: PUSH
36735: LD_INT 1
36737: ARRAY
36738: ST_TO_ADDR
// k := 0 ;
36739: LD_ADDR_VAR 0 4
36743: PUSH
36744: LD_INT 0
36746: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
36747: LD_ADDR_VAR 0 3
36751: PUSH
36752: LD_EXP 106
36756: PUSH
36757: LD_VAR 0 2
36761: ARRAY
36762: PUSH
36763: FOR_IN
36764: IFFALSE 36924
// begin k := k + 1 ;
36766: LD_ADDR_VAR 0 4
36770: PUSH
36771: LD_VAR 0 4
36775: PUSH
36776: LD_INT 1
36778: PLUS
36779: ST_TO_ADDR
// if k > tmp then
36780: LD_VAR 0 4
36784: PUSH
36785: LD_VAR 0 5
36789: GREATER
36790: IFFALSE 36794
// break ;
36792: GO 36924
// if not GetClass ( j ) in [ 2 , 16 ] then
36794: LD_VAR 0 3
36798: PPUSH
36799: CALL_OW 257
36803: PUSH
36804: LD_INT 2
36806: PUSH
36807: LD_INT 16
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: IN
36814: NOT
36815: IFFALSE 36868
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
36817: LD_ADDR_EXP 106
36821: PUSH
36822: LD_EXP 106
36826: PPUSH
36827: LD_VAR 0 2
36831: PPUSH
36832: LD_EXP 106
36836: PUSH
36837: LD_VAR 0 2
36841: ARRAY
36842: PUSH
36843: LD_VAR 0 3
36847: DIFF
36848: PPUSH
36849: CALL_OW 1
36853: ST_TO_ADDR
// SetTag ( j , 0 ) ;
36854: LD_VAR 0 3
36858: PPUSH
36859: LD_INT 0
36861: PPUSH
36862: CALL_OW 109
// continue ;
36866: GO 36763
// end ; if IsInUnit ( j ) then
36868: LD_VAR 0 3
36872: PPUSH
36873: CALL_OW 310
36877: IFFALSE 36888
// ComExitBuilding ( j ) ;
36879: LD_VAR 0 3
36883: PPUSH
36884: CALL_OW 122
// wait ( 3 ) ;
36888: LD_INT 3
36890: PPUSH
36891: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
36895: LD_VAR 0 3
36899: PPUSH
36900: LD_VAR 0 6
36904: PUSH
36905: LD_INT 2
36907: ARRAY
36908: PPUSH
36909: LD_VAR 0 6
36913: PUSH
36914: LD_INT 3
36916: ARRAY
36917: PPUSH
36918: CALL_OW 117
// end ;
36922: GO 36763
36924: POP
36925: POP
// end ; end else
36926: GO 37507
// begin for j in cargo do
36928: LD_ADDR_VAR 0 3
36932: PUSH
36933: LD_VAR 0 7
36937: PUSH
36938: FOR_IN
36939: IFFALSE 37505
// begin if GetTag ( j ) <> 0 then
36941: LD_VAR 0 3
36945: PPUSH
36946: CALL_OW 110
36950: PUSH
36951: LD_INT 0
36953: NONEQUAL
36954: IFFALSE 36958
// continue ;
36956: GO 36938
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
36958: LD_VAR 0 3
36962: PPUSH
36963: CALL_OW 256
36967: PUSH
36968: LD_INT 1000
36970: LESS
36971: PUSH
36972: LD_VAR 0 3
36976: PPUSH
36977: LD_EXP 113
36981: PUSH
36982: LD_VAR 0 2
36986: ARRAY
36987: PPUSH
36988: CALL_OW 308
36992: NOT
36993: AND
36994: IFFALSE 37016
// ComMoveToArea ( j , mc_parking [ i ] ) ;
36996: LD_VAR 0 3
37000: PPUSH
37001: LD_EXP 113
37005: PUSH
37006: LD_VAR 0 2
37010: ARRAY
37011: PPUSH
37012: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
37016: LD_VAR 0 3
37020: PPUSH
37021: CALL_OW 256
37025: PUSH
37026: LD_INT 1000
37028: LESS
37029: PUSH
37030: LD_VAR 0 3
37034: PPUSH
37035: LD_EXP 113
37039: PUSH
37040: LD_VAR 0 2
37044: ARRAY
37045: PPUSH
37046: CALL_OW 308
37050: AND
37051: IFFALSE 37055
// continue ;
37053: GO 36938
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
37055: LD_VAR 0 3
37059: PPUSH
37060: CALL_OW 262
37064: PUSH
37065: LD_INT 2
37067: EQUAL
37068: PUSH
37069: LD_VAR 0 3
37073: PPUSH
37074: CALL_OW 261
37078: PUSH
37079: LD_INT 15
37081: LESS
37082: AND
37083: IFFALSE 37087
// continue ;
37085: GO 36938
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
37087: LD_VAR 0 3
37091: PPUSH
37092: CALL_OW 262
37096: PUSH
37097: LD_INT 1
37099: EQUAL
37100: PUSH
37101: LD_VAR 0 3
37105: PPUSH
37106: CALL_OW 261
37110: PUSH
37111: LD_INT 10
37113: LESS
37114: AND
37115: IFFALSE 37444
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
37117: LD_ADDR_VAR 0 8
37121: PUSH
37122: LD_EXP 89
37126: PUSH
37127: LD_VAR 0 2
37131: ARRAY
37132: PPUSH
37133: LD_INT 2
37135: PUSH
37136: LD_INT 30
37138: PUSH
37139: LD_INT 0
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 30
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: LIST
37160: PPUSH
37161: CALL_OW 72
37165: ST_TO_ADDR
// if not depot then
37166: LD_VAR 0 8
37170: NOT
37171: IFFALSE 37175
// continue ;
37173: GO 36938
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
37175: LD_VAR 0 3
37179: PPUSH
37180: LD_VAR 0 8
37184: PPUSH
37185: LD_VAR 0 3
37189: PPUSH
37190: CALL_OW 74
37194: PPUSH
37195: CALL_OW 296
37199: PUSH
37200: LD_INT 6
37202: LESS
37203: IFFALSE 37219
// SetFuel ( j , 100 ) else
37205: LD_VAR 0 3
37209: PPUSH
37210: LD_INT 100
37212: PPUSH
37213: CALL_OW 240
37217: GO 37444
// if GetFuel ( j ) = 0 then
37219: LD_VAR 0 3
37223: PPUSH
37224: CALL_OW 261
37228: PUSH
37229: LD_INT 0
37231: EQUAL
37232: IFFALSE 37444
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
37234: LD_ADDR_EXP 108
37238: PUSH
37239: LD_EXP 108
37243: PPUSH
37244: LD_VAR 0 2
37248: PPUSH
37249: LD_EXP 108
37253: PUSH
37254: LD_VAR 0 2
37258: ARRAY
37259: PUSH
37260: LD_VAR 0 3
37264: DIFF
37265: PPUSH
37266: CALL_OW 1
37270: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
37271: LD_VAR 0 3
37275: PPUSH
37276: CALL_OW 263
37280: PUSH
37281: LD_INT 1
37283: EQUAL
37284: IFFALSE 37300
// ComExitVehicle ( IsInUnit ( j ) ) ;
37286: LD_VAR 0 3
37290: PPUSH
37291: CALL_OW 310
37295: PPUSH
37296: CALL_OW 121
// if GetControl ( j ) = control_remote then
37300: LD_VAR 0 3
37304: PPUSH
37305: CALL_OW 263
37309: PUSH
37310: LD_INT 2
37312: EQUAL
37313: IFFALSE 37324
// ComUnlink ( j ) ;
37315: LD_VAR 0 3
37319: PPUSH
37320: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
37324: LD_ADDR_VAR 0 9
37328: PUSH
37329: LD_VAR 0 2
37333: PPUSH
37334: LD_INT 3
37336: PPUSH
37337: CALL 46797 0 2
37341: ST_TO_ADDR
// if fac then
37342: LD_VAR 0 9
37346: IFFALSE 37442
// begin for k in fac do
37348: LD_ADDR_VAR 0 4
37352: PUSH
37353: LD_VAR 0 9
37357: PUSH
37358: FOR_IN
37359: IFFALSE 37440
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
37361: LD_ADDR_VAR 0 10
37365: PUSH
37366: LD_VAR 0 9
37370: PPUSH
37371: LD_VAR 0 3
37375: PPUSH
37376: CALL_OW 265
37380: PPUSH
37381: LD_VAR 0 3
37385: PPUSH
37386: CALL_OW 262
37390: PPUSH
37391: LD_VAR 0 3
37395: PPUSH
37396: CALL_OW 263
37400: PPUSH
37401: LD_VAR 0 3
37405: PPUSH
37406: CALL_OW 264
37410: PPUSH
37411: CALL 50431 0 5
37415: ST_TO_ADDR
// if components then
37416: LD_VAR 0 10
37420: IFFALSE 37438
// begin MC_InsertProduceList ( i , components ) ;
37422: LD_VAR 0 2
37426: PPUSH
37427: LD_VAR 0 10
37431: PPUSH
37432: CALL 46342 0 2
// break ;
37436: GO 37440
// end ; end ;
37438: GO 37358
37440: POP
37441: POP
// end ; continue ;
37442: GO 36938
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
37444: LD_VAR 0 3
37448: PPUSH
37449: LD_INT 1
37451: PPUSH
37452: CALL_OW 289
37456: PUSH
37457: LD_INT 100
37459: LESS
37460: PUSH
37461: LD_VAR 0 3
37465: PPUSH
37466: CALL_OW 314
37470: NOT
37471: AND
37472: IFFALSE 37501
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
37474: LD_VAR 0 3
37478: PPUSH
37479: LD_VAR 0 6
37483: PUSH
37484: LD_INT 2
37486: ARRAY
37487: PPUSH
37488: LD_VAR 0 6
37492: PUSH
37493: LD_INT 3
37495: ARRAY
37496: PPUSH
37497: CALL_OW 117
// break ;
37501: GO 37505
// end ;
37503: GO 36938
37505: POP
37506: POP
// end ; end ;
37507: GO 35776
37509: POP
37510: POP
// end ;
37511: LD_VAR 0 1
37515: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
37516: LD_INT 0
37518: PPUSH
37519: PPUSH
37520: PPUSH
37521: PPUSH
// if not mc_bases then
37522: LD_EXP 89
37526: NOT
37527: IFFALSE 37531
// exit ;
37529: GO 37692
// for i = 1 to mc_bases do
37531: LD_ADDR_VAR 0 2
37535: PUSH
37536: DOUBLE
37537: LD_INT 1
37539: DEC
37540: ST_TO_ADDR
37541: LD_EXP 89
37545: PUSH
37546: FOR_TO
37547: IFFALSE 37690
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
37549: LD_ADDR_VAR 0 4
37553: PUSH
37554: LD_EXP 108
37558: PUSH
37559: LD_VAR 0 2
37563: ARRAY
37564: PUSH
37565: LD_EXP 111
37569: PUSH
37570: LD_VAR 0 2
37574: ARRAY
37575: UNION
37576: PPUSH
37577: LD_INT 33
37579: PUSH
37580: LD_INT 2
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PPUSH
37587: CALL_OW 72
37591: ST_TO_ADDR
// if tmp then
37592: LD_VAR 0 4
37596: IFFALSE 37688
// for j in tmp do
37598: LD_ADDR_VAR 0 3
37602: PUSH
37603: LD_VAR 0 4
37607: PUSH
37608: FOR_IN
37609: IFFALSE 37686
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
37611: LD_VAR 0 3
37615: PPUSH
37616: CALL_OW 312
37620: NOT
37621: PUSH
37622: LD_VAR 0 3
37626: PPUSH
37627: CALL_OW 256
37631: PUSH
37632: LD_INT 250
37634: GREATEREQUAL
37635: AND
37636: IFFALSE 37649
// Connect ( j ) else
37638: LD_VAR 0 3
37642: PPUSH
37643: CALL 55832 0 1
37647: GO 37684
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
37649: LD_VAR 0 3
37653: PPUSH
37654: CALL_OW 256
37658: PUSH
37659: LD_INT 250
37661: LESS
37662: PUSH
37663: LD_VAR 0 3
37667: PPUSH
37668: CALL_OW 312
37672: AND
37673: IFFALSE 37684
// ComUnlink ( j ) ;
37675: LD_VAR 0 3
37679: PPUSH
37680: CALL_OW 136
37684: GO 37608
37686: POP
37687: POP
// end ;
37688: GO 37546
37690: POP
37691: POP
// end ;
37692: LD_VAR 0 1
37696: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
37697: LD_INT 0
37699: PPUSH
37700: PPUSH
37701: PPUSH
37702: PPUSH
37703: PPUSH
// if not mc_bases then
37704: LD_EXP 89
37708: NOT
37709: IFFALSE 37713
// exit ;
37711: GO 38158
// for i = 1 to mc_bases do
37713: LD_ADDR_VAR 0 2
37717: PUSH
37718: DOUBLE
37719: LD_INT 1
37721: DEC
37722: ST_TO_ADDR
37723: LD_EXP 89
37727: PUSH
37728: FOR_TO
37729: IFFALSE 38156
// begin if not mc_produce [ i ] then
37731: LD_EXP 110
37735: PUSH
37736: LD_VAR 0 2
37740: ARRAY
37741: NOT
37742: IFFALSE 37746
// continue ;
37744: GO 37728
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
37746: LD_ADDR_VAR 0 5
37750: PUSH
37751: LD_EXP 89
37755: PUSH
37756: LD_VAR 0 2
37760: ARRAY
37761: PPUSH
37762: LD_INT 30
37764: PUSH
37765: LD_INT 3
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PPUSH
37772: CALL_OW 72
37776: ST_TO_ADDR
// if not fac then
37777: LD_VAR 0 5
37781: NOT
37782: IFFALSE 37786
// continue ;
37784: GO 37728
// for j in fac do
37786: LD_ADDR_VAR 0 3
37790: PUSH
37791: LD_VAR 0 5
37795: PUSH
37796: FOR_IN
37797: IFFALSE 38152
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
37799: LD_VAR 0 3
37803: PPUSH
37804: CALL_OW 461
37808: PUSH
37809: LD_INT 2
37811: NONEQUAL
37812: PUSH
37813: LD_VAR 0 3
37817: PPUSH
37818: LD_INT 15
37820: PPUSH
37821: CALL 55492 0 2
37825: PUSH
37826: LD_INT 4
37828: ARRAY
37829: OR
37830: IFFALSE 37834
// continue ;
37832: GO 37796
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
37834: LD_VAR 0 3
37838: PPUSH
37839: LD_EXP 110
37843: PUSH
37844: LD_VAR 0 2
37848: ARRAY
37849: PUSH
37850: LD_INT 1
37852: ARRAY
37853: PUSH
37854: LD_INT 1
37856: ARRAY
37857: PPUSH
37858: LD_EXP 110
37862: PUSH
37863: LD_VAR 0 2
37867: ARRAY
37868: PUSH
37869: LD_INT 1
37871: ARRAY
37872: PUSH
37873: LD_INT 2
37875: ARRAY
37876: PPUSH
37877: LD_EXP 110
37881: PUSH
37882: LD_VAR 0 2
37886: ARRAY
37887: PUSH
37888: LD_INT 1
37890: ARRAY
37891: PUSH
37892: LD_INT 3
37894: ARRAY
37895: PPUSH
37896: LD_EXP 110
37900: PUSH
37901: LD_VAR 0 2
37905: ARRAY
37906: PUSH
37907: LD_INT 1
37909: ARRAY
37910: PUSH
37911: LD_INT 4
37913: ARRAY
37914: PPUSH
37915: CALL_OW 448
37919: PUSH
37920: LD_VAR 0 3
37924: PPUSH
37925: LD_EXP 110
37929: PUSH
37930: LD_VAR 0 2
37934: ARRAY
37935: PUSH
37936: LD_INT 1
37938: ARRAY
37939: PUSH
37940: LD_INT 1
37942: ARRAY
37943: PUSH
37944: LD_EXP 110
37948: PUSH
37949: LD_VAR 0 2
37953: ARRAY
37954: PUSH
37955: LD_INT 1
37957: ARRAY
37958: PUSH
37959: LD_INT 2
37961: ARRAY
37962: PUSH
37963: LD_EXP 110
37967: PUSH
37968: LD_VAR 0 2
37972: ARRAY
37973: PUSH
37974: LD_INT 1
37976: ARRAY
37977: PUSH
37978: LD_INT 3
37980: ARRAY
37981: PUSH
37982: LD_EXP 110
37986: PUSH
37987: LD_VAR 0 2
37991: ARRAY
37992: PUSH
37993: LD_INT 1
37995: ARRAY
37996: PUSH
37997: LD_INT 4
37999: ARRAY
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: PPUSH
38007: CALL 59163 0 2
38011: AND
38012: IFFALSE 38150
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
38014: LD_VAR 0 3
38018: PPUSH
38019: LD_EXP 110
38023: PUSH
38024: LD_VAR 0 2
38028: ARRAY
38029: PUSH
38030: LD_INT 1
38032: ARRAY
38033: PUSH
38034: LD_INT 1
38036: ARRAY
38037: PPUSH
38038: LD_EXP 110
38042: PUSH
38043: LD_VAR 0 2
38047: ARRAY
38048: PUSH
38049: LD_INT 1
38051: ARRAY
38052: PUSH
38053: LD_INT 2
38055: ARRAY
38056: PPUSH
38057: LD_EXP 110
38061: PUSH
38062: LD_VAR 0 2
38066: ARRAY
38067: PUSH
38068: LD_INT 1
38070: ARRAY
38071: PUSH
38072: LD_INT 3
38074: ARRAY
38075: PPUSH
38076: LD_EXP 110
38080: PUSH
38081: LD_VAR 0 2
38085: ARRAY
38086: PUSH
38087: LD_INT 1
38089: ARRAY
38090: PUSH
38091: LD_INT 4
38093: ARRAY
38094: PPUSH
38095: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
38099: LD_ADDR_VAR 0 4
38103: PUSH
38104: LD_EXP 110
38108: PUSH
38109: LD_VAR 0 2
38113: ARRAY
38114: PPUSH
38115: LD_INT 1
38117: PPUSH
38118: CALL_OW 3
38122: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
38123: LD_ADDR_EXP 110
38127: PUSH
38128: LD_EXP 110
38132: PPUSH
38133: LD_VAR 0 2
38137: PPUSH
38138: LD_VAR 0 4
38142: PPUSH
38143: CALL_OW 1
38147: ST_TO_ADDR
// break ;
38148: GO 38152
// end ; end ;
38150: GO 37796
38152: POP
38153: POP
// end ;
38154: GO 37728
38156: POP
38157: POP
// end ;
38158: LD_VAR 0 1
38162: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
38163: LD_INT 0
38165: PPUSH
38166: PPUSH
38167: PPUSH
// if not mc_bases then
38168: LD_EXP 89
38172: NOT
38173: IFFALSE 38177
// exit ;
38175: GO 38266
// for i = 1 to mc_bases do
38177: LD_ADDR_VAR 0 2
38181: PUSH
38182: DOUBLE
38183: LD_INT 1
38185: DEC
38186: ST_TO_ADDR
38187: LD_EXP 89
38191: PUSH
38192: FOR_TO
38193: IFFALSE 38264
// begin if mc_attack [ i ] then
38195: LD_EXP 109
38199: PUSH
38200: LD_VAR 0 2
38204: ARRAY
38205: IFFALSE 38262
// begin tmp := mc_attack [ i ] [ 1 ] ;
38207: LD_ADDR_VAR 0 3
38211: PUSH
38212: LD_EXP 109
38216: PUSH
38217: LD_VAR 0 2
38221: ARRAY
38222: PUSH
38223: LD_INT 1
38225: ARRAY
38226: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
38227: LD_ADDR_EXP 109
38231: PUSH
38232: LD_EXP 109
38236: PPUSH
38237: LD_VAR 0 2
38241: PPUSH
38242: EMPTY
38243: PPUSH
38244: CALL_OW 1
38248: ST_TO_ADDR
// Attack ( tmp ) ;
38249: LD_VAR 0 3
38253: PPUSH
38254: CALL 89034 0 1
// exit ;
38258: POP
38259: POP
38260: GO 38266
// end ; end ;
38262: GO 38192
38264: POP
38265: POP
// end ;
38266: LD_VAR 0 1
38270: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
38271: LD_INT 0
38273: PPUSH
38274: PPUSH
38275: PPUSH
38276: PPUSH
38277: PPUSH
38278: PPUSH
38279: PPUSH
// if not mc_bases then
38280: LD_EXP 89
38284: NOT
38285: IFFALSE 38289
// exit ;
38287: GO 38871
// for i = 1 to mc_bases do
38289: LD_ADDR_VAR 0 2
38293: PUSH
38294: DOUBLE
38295: LD_INT 1
38297: DEC
38298: ST_TO_ADDR
38299: LD_EXP 89
38303: PUSH
38304: FOR_TO
38305: IFFALSE 38869
// begin if not mc_bases [ i ] then
38307: LD_EXP 89
38311: PUSH
38312: LD_VAR 0 2
38316: ARRAY
38317: NOT
38318: IFFALSE 38322
// continue ;
38320: GO 38304
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
38322: LD_ADDR_VAR 0 7
38326: PUSH
38327: LD_EXP 89
38331: PUSH
38332: LD_VAR 0 2
38336: ARRAY
38337: PUSH
38338: LD_INT 1
38340: ARRAY
38341: PPUSH
38342: CALL 49735 0 1
38346: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
38347: LD_ADDR_EXP 112
38351: PUSH
38352: LD_EXP 112
38356: PPUSH
38357: LD_VAR 0 2
38361: PPUSH
38362: LD_EXP 89
38366: PUSH
38367: LD_VAR 0 2
38371: ARRAY
38372: PUSH
38373: LD_INT 1
38375: ARRAY
38376: PPUSH
38377: CALL_OW 255
38381: PPUSH
38382: LD_EXP 114
38386: PUSH
38387: LD_VAR 0 2
38391: ARRAY
38392: PPUSH
38393: CALL 49700 0 2
38397: PPUSH
38398: CALL_OW 1
38402: ST_TO_ADDR
// if not mc_scan [ i ] then
38403: LD_EXP 112
38407: PUSH
38408: LD_VAR 0 2
38412: ARRAY
38413: NOT
38414: IFFALSE 38569
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
38416: LD_ADDR_VAR 0 4
38420: PUSH
38421: LD_EXP 89
38425: PUSH
38426: LD_VAR 0 2
38430: ARRAY
38431: PPUSH
38432: LD_INT 2
38434: PUSH
38435: LD_INT 25
38437: PUSH
38438: LD_INT 5
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 25
38447: PUSH
38448: LD_INT 8
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 25
38457: PUSH
38458: LD_INT 9
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: PPUSH
38471: CALL_OW 72
38475: ST_TO_ADDR
// if not tmp then
38476: LD_VAR 0 4
38480: NOT
38481: IFFALSE 38485
// continue ;
38483: GO 38304
// for j in tmp do
38485: LD_ADDR_VAR 0 3
38489: PUSH
38490: LD_VAR 0 4
38494: PUSH
38495: FOR_IN
38496: IFFALSE 38567
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
38498: LD_VAR 0 3
38502: PPUSH
38503: CALL_OW 310
38507: PPUSH
38508: CALL_OW 266
38512: PUSH
38513: LD_INT 5
38515: EQUAL
38516: PUSH
38517: LD_VAR 0 3
38521: PPUSH
38522: CALL_OW 257
38526: PUSH
38527: LD_INT 1
38529: EQUAL
38530: AND
38531: PUSH
38532: LD_VAR 0 3
38536: PPUSH
38537: CALL_OW 459
38541: NOT
38542: AND
38543: PUSH
38544: LD_VAR 0 7
38548: AND
38549: IFFALSE 38565
// ComChangeProfession ( j , class ) ;
38551: LD_VAR 0 3
38555: PPUSH
38556: LD_VAR 0 7
38560: PPUSH
38561: CALL_OW 123
38565: GO 38495
38567: POP
38568: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
38569: LD_EXP 112
38573: PUSH
38574: LD_VAR 0 2
38578: ARRAY
38579: PUSH
38580: LD_EXP 111
38584: PUSH
38585: LD_VAR 0 2
38589: ARRAY
38590: NOT
38591: AND
38592: PUSH
38593: LD_EXP 89
38597: PUSH
38598: LD_VAR 0 2
38602: ARRAY
38603: PPUSH
38604: LD_INT 30
38606: PUSH
38607: LD_INT 32
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PPUSH
38614: CALL_OW 72
38618: NOT
38619: AND
38620: PUSH
38621: LD_EXP 89
38625: PUSH
38626: LD_VAR 0 2
38630: ARRAY
38631: PPUSH
38632: LD_INT 2
38634: PUSH
38635: LD_INT 30
38637: PUSH
38638: LD_INT 4
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 30
38647: PUSH
38648: LD_INT 5
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: LIST
38659: PPUSH
38660: CALL_OW 72
38664: NOT
38665: AND
38666: IFFALSE 38798
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
38668: LD_ADDR_VAR 0 4
38672: PUSH
38673: LD_EXP 89
38677: PUSH
38678: LD_VAR 0 2
38682: ARRAY
38683: PPUSH
38684: LD_INT 2
38686: PUSH
38687: LD_INT 25
38689: PUSH
38690: LD_INT 1
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 25
38699: PUSH
38700: LD_INT 5
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 25
38709: PUSH
38710: LD_INT 8
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 25
38719: PUSH
38720: LD_INT 9
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: PPUSH
38734: CALL_OW 72
38738: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
38739: LD_ADDR_VAR 0 4
38743: PUSH
38744: LD_VAR 0 4
38748: PUSH
38749: LD_VAR 0 4
38753: PPUSH
38754: LD_INT 18
38756: PPUSH
38757: CALL 81460 0 2
38761: DIFF
38762: ST_TO_ADDR
// if tmp then
38763: LD_VAR 0 4
38767: IFFALSE 38798
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
38769: LD_VAR 0 2
38773: PPUSH
38774: LD_VAR 0 4
38778: PPUSH
38779: LD_EXP 114
38783: PUSH
38784: LD_VAR 0 2
38788: ARRAY
38789: PPUSH
38790: CALL 93743 0 3
// exit ;
38794: POP
38795: POP
38796: GO 38871
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
38798: LD_EXP 112
38802: PUSH
38803: LD_VAR 0 2
38807: ARRAY
38808: PUSH
38809: LD_EXP 111
38813: PUSH
38814: LD_VAR 0 2
38818: ARRAY
38819: AND
38820: IFFALSE 38867
// begin tmp := mc_defender [ i ] ;
38822: LD_ADDR_VAR 0 4
38826: PUSH
38827: LD_EXP 111
38831: PUSH
38832: LD_VAR 0 2
38836: ARRAY
38837: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
38838: LD_VAR 0 2
38842: PPUSH
38843: LD_VAR 0 4
38847: PPUSH
38848: LD_EXP 112
38852: PUSH
38853: LD_VAR 0 2
38857: ARRAY
38858: PPUSH
38859: CALL 94304 0 3
// exit ;
38863: POP
38864: POP
38865: GO 38871
// end ; end ;
38867: GO 38304
38869: POP
38870: POP
// end ;
38871: LD_VAR 0 1
38875: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
38876: LD_INT 0
38878: PPUSH
38879: PPUSH
38880: PPUSH
38881: PPUSH
38882: PPUSH
38883: PPUSH
38884: PPUSH
38885: PPUSH
38886: PPUSH
38887: PPUSH
38888: PPUSH
// if not mc_bases then
38889: LD_EXP 89
38893: NOT
38894: IFFALSE 38898
// exit ;
38896: GO 39985
// for i = 1 to mc_bases do
38898: LD_ADDR_VAR 0 2
38902: PUSH
38903: DOUBLE
38904: LD_INT 1
38906: DEC
38907: ST_TO_ADDR
38908: LD_EXP 89
38912: PUSH
38913: FOR_TO
38914: IFFALSE 39983
// begin tmp := mc_lab [ i ] ;
38916: LD_ADDR_VAR 0 6
38920: PUSH
38921: LD_EXP 122
38925: PUSH
38926: LD_VAR 0 2
38930: ARRAY
38931: ST_TO_ADDR
// if not tmp then
38932: LD_VAR 0 6
38936: NOT
38937: IFFALSE 38941
// continue ;
38939: GO 38913
// idle_lab := 0 ;
38941: LD_ADDR_VAR 0 11
38945: PUSH
38946: LD_INT 0
38948: ST_TO_ADDR
// for j in tmp do
38949: LD_ADDR_VAR 0 3
38953: PUSH
38954: LD_VAR 0 6
38958: PUSH
38959: FOR_IN
38960: IFFALSE 39979
// begin researching := false ;
38962: LD_ADDR_VAR 0 10
38966: PUSH
38967: LD_INT 0
38969: ST_TO_ADDR
// side := GetSide ( j ) ;
38970: LD_ADDR_VAR 0 4
38974: PUSH
38975: LD_VAR 0 3
38979: PPUSH
38980: CALL_OW 255
38984: ST_TO_ADDR
// if not mc_tech [ side ] then
38985: LD_EXP 116
38989: PUSH
38990: LD_VAR 0 4
38994: ARRAY
38995: NOT
38996: IFFALSE 39000
// continue ;
38998: GO 38959
// if BuildingStatus ( j ) = bs_idle then
39000: LD_VAR 0 3
39004: PPUSH
39005: CALL_OW 461
39009: PUSH
39010: LD_INT 2
39012: EQUAL
39013: IFFALSE 39201
// begin if idle_lab and UnitsInside ( j ) < 6 then
39015: LD_VAR 0 11
39019: PUSH
39020: LD_VAR 0 3
39024: PPUSH
39025: CALL_OW 313
39029: PUSH
39030: LD_INT 6
39032: LESS
39033: AND
39034: IFFALSE 39105
// begin tmp2 := UnitsInside ( idle_lab ) ;
39036: LD_ADDR_VAR 0 9
39040: PUSH
39041: LD_VAR 0 11
39045: PPUSH
39046: CALL_OW 313
39050: ST_TO_ADDR
// if tmp2 then
39051: LD_VAR 0 9
39055: IFFALSE 39097
// for x in tmp2 do
39057: LD_ADDR_VAR 0 7
39061: PUSH
39062: LD_VAR 0 9
39066: PUSH
39067: FOR_IN
39068: IFFALSE 39095
// begin ComExitBuilding ( x ) ;
39070: LD_VAR 0 7
39074: PPUSH
39075: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
39079: LD_VAR 0 7
39083: PPUSH
39084: LD_VAR 0 3
39088: PPUSH
39089: CALL_OW 180
// end ;
39093: GO 39067
39095: POP
39096: POP
// idle_lab := 0 ;
39097: LD_ADDR_VAR 0 11
39101: PUSH
39102: LD_INT 0
39104: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
39105: LD_ADDR_VAR 0 5
39109: PUSH
39110: LD_EXP 116
39114: PUSH
39115: LD_VAR 0 4
39119: ARRAY
39120: PUSH
39121: FOR_IN
39122: IFFALSE 39182
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
39124: LD_VAR 0 3
39128: PPUSH
39129: LD_VAR 0 5
39133: PPUSH
39134: CALL_OW 430
39138: PUSH
39139: LD_VAR 0 4
39143: PPUSH
39144: LD_VAR 0 5
39148: PPUSH
39149: CALL 48805 0 2
39153: AND
39154: IFFALSE 39180
// begin researching := true ;
39156: LD_ADDR_VAR 0 10
39160: PUSH
39161: LD_INT 1
39163: ST_TO_ADDR
// ComResearch ( j , t ) ;
39164: LD_VAR 0 3
39168: PPUSH
39169: LD_VAR 0 5
39173: PPUSH
39174: CALL_OW 124
// break ;
39178: GO 39182
// end ;
39180: GO 39121
39182: POP
39183: POP
// if not researching then
39184: LD_VAR 0 10
39188: NOT
39189: IFFALSE 39201
// idle_lab := j ;
39191: LD_ADDR_VAR 0 11
39195: PUSH
39196: LD_VAR 0 3
39200: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
39201: LD_VAR 0 3
39205: PPUSH
39206: CALL_OW 461
39210: PUSH
39211: LD_INT 10
39213: EQUAL
39214: IFFALSE 39802
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
39216: LD_EXP 118
39220: PUSH
39221: LD_VAR 0 2
39225: ARRAY
39226: NOT
39227: PUSH
39228: LD_EXP 119
39232: PUSH
39233: LD_VAR 0 2
39237: ARRAY
39238: NOT
39239: AND
39240: PUSH
39241: LD_EXP 116
39245: PUSH
39246: LD_VAR 0 4
39250: ARRAY
39251: PUSH
39252: LD_INT 1
39254: GREATER
39255: AND
39256: IFFALSE 39387
// begin ComCancel ( j ) ;
39258: LD_VAR 0 3
39262: PPUSH
39263: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
39267: LD_ADDR_EXP 116
39271: PUSH
39272: LD_EXP 116
39276: PPUSH
39277: LD_VAR 0 4
39281: PPUSH
39282: LD_EXP 116
39286: PUSH
39287: LD_VAR 0 4
39291: ARRAY
39292: PPUSH
39293: LD_EXP 116
39297: PUSH
39298: LD_VAR 0 4
39302: ARRAY
39303: PUSH
39304: LD_INT 1
39306: MINUS
39307: PPUSH
39308: LD_EXP 116
39312: PUSH
39313: LD_VAR 0 4
39317: ARRAY
39318: PPUSH
39319: LD_INT 0
39321: PPUSH
39322: CALL 52317 0 4
39326: PPUSH
39327: CALL_OW 1
39331: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
39332: LD_ADDR_EXP 116
39336: PUSH
39337: LD_EXP 116
39341: PPUSH
39342: LD_VAR 0 4
39346: PPUSH
39347: LD_EXP 116
39351: PUSH
39352: LD_VAR 0 4
39356: ARRAY
39357: PPUSH
39358: LD_EXP 116
39362: PUSH
39363: LD_VAR 0 4
39367: ARRAY
39368: PPUSH
39369: LD_INT 1
39371: PPUSH
39372: LD_INT 0
39374: PPUSH
39375: CALL 52317 0 4
39379: PPUSH
39380: CALL_OW 1
39384: ST_TO_ADDR
// continue ;
39385: GO 38959
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
39387: LD_EXP 118
39391: PUSH
39392: LD_VAR 0 2
39396: ARRAY
39397: PUSH
39398: LD_EXP 119
39402: PUSH
39403: LD_VAR 0 2
39407: ARRAY
39408: NOT
39409: AND
39410: IFFALSE 39537
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
39412: LD_ADDR_EXP 119
39416: PUSH
39417: LD_EXP 119
39421: PPUSH
39422: LD_VAR 0 2
39426: PUSH
39427: LD_EXP 119
39431: PUSH
39432: LD_VAR 0 2
39436: ARRAY
39437: PUSH
39438: LD_INT 1
39440: PLUS
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PPUSH
39446: LD_EXP 118
39450: PUSH
39451: LD_VAR 0 2
39455: ARRAY
39456: PUSH
39457: LD_INT 1
39459: ARRAY
39460: PPUSH
39461: CALL 52899 0 3
39465: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
39466: LD_EXP 118
39470: PUSH
39471: LD_VAR 0 2
39475: ARRAY
39476: PUSH
39477: LD_INT 1
39479: ARRAY
39480: PPUSH
39481: LD_INT 112
39483: PPUSH
39484: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
39488: LD_ADDR_VAR 0 9
39492: PUSH
39493: LD_EXP 118
39497: PUSH
39498: LD_VAR 0 2
39502: ARRAY
39503: PPUSH
39504: LD_INT 1
39506: PPUSH
39507: CALL_OW 3
39511: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
39512: LD_ADDR_EXP 118
39516: PUSH
39517: LD_EXP 118
39521: PPUSH
39522: LD_VAR 0 2
39526: PPUSH
39527: LD_VAR 0 9
39531: PPUSH
39532: CALL_OW 1
39536: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
39537: LD_EXP 118
39541: PUSH
39542: LD_VAR 0 2
39546: ARRAY
39547: PUSH
39548: LD_EXP 119
39552: PUSH
39553: LD_VAR 0 2
39557: ARRAY
39558: AND
39559: PUSH
39560: LD_EXP 119
39564: PUSH
39565: LD_VAR 0 2
39569: ARRAY
39570: PUSH
39571: LD_INT 1
39573: ARRAY
39574: PPUSH
39575: CALL_OW 310
39579: NOT
39580: AND
39581: PUSH
39582: LD_VAR 0 3
39586: PPUSH
39587: CALL_OW 313
39591: PUSH
39592: LD_INT 6
39594: EQUAL
39595: AND
39596: IFFALSE 39652
// begin tmp2 := UnitsInside ( j ) ;
39598: LD_ADDR_VAR 0 9
39602: PUSH
39603: LD_VAR 0 3
39607: PPUSH
39608: CALL_OW 313
39612: ST_TO_ADDR
// if tmp2 = 6 then
39613: LD_VAR 0 9
39617: PUSH
39618: LD_INT 6
39620: EQUAL
39621: IFFALSE 39652
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
39623: LD_VAR 0 9
39627: PUSH
39628: LD_INT 1
39630: ARRAY
39631: PPUSH
39632: LD_INT 112
39634: PPUSH
39635: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
39639: LD_VAR 0 9
39643: PUSH
39644: LD_INT 1
39646: ARRAY
39647: PPUSH
39648: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
39652: LD_EXP 119
39656: PUSH
39657: LD_VAR 0 2
39661: ARRAY
39662: PUSH
39663: LD_EXP 119
39667: PUSH
39668: LD_VAR 0 2
39672: ARRAY
39673: PUSH
39674: LD_INT 1
39676: ARRAY
39677: PPUSH
39678: CALL_OW 314
39682: NOT
39683: AND
39684: PUSH
39685: LD_EXP 119
39689: PUSH
39690: LD_VAR 0 2
39694: ARRAY
39695: PUSH
39696: LD_INT 1
39698: ARRAY
39699: PPUSH
39700: CALL_OW 310
39704: NOT
39705: AND
39706: IFFALSE 39732
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
39708: LD_EXP 119
39712: PUSH
39713: LD_VAR 0 2
39717: ARRAY
39718: PUSH
39719: LD_INT 1
39721: ARRAY
39722: PPUSH
39723: LD_VAR 0 3
39727: PPUSH
39728: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
39732: LD_EXP 119
39736: PUSH
39737: LD_VAR 0 2
39741: ARRAY
39742: PUSH
39743: LD_INT 1
39745: ARRAY
39746: PPUSH
39747: CALL_OW 310
39751: PUSH
39752: LD_EXP 119
39756: PUSH
39757: LD_VAR 0 2
39761: ARRAY
39762: PUSH
39763: LD_INT 1
39765: ARRAY
39766: PPUSH
39767: CALL_OW 310
39771: PPUSH
39772: CALL_OW 461
39776: PUSH
39777: LD_INT 3
39779: NONEQUAL
39780: AND
39781: IFFALSE 39802
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
39783: LD_EXP 119
39787: PUSH
39788: LD_VAR 0 2
39792: ARRAY
39793: PUSH
39794: LD_INT 1
39796: ARRAY
39797: PPUSH
39798: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
39802: LD_VAR 0 3
39806: PPUSH
39807: CALL_OW 461
39811: PUSH
39812: LD_INT 6
39814: EQUAL
39815: PUSH
39816: LD_VAR 0 6
39820: PUSH
39821: LD_INT 1
39823: GREATER
39824: AND
39825: IFFALSE 39977
// begin sci := [ ] ;
39827: LD_ADDR_VAR 0 8
39831: PUSH
39832: EMPTY
39833: ST_TO_ADDR
// for x in ( tmp diff j ) do
39834: LD_ADDR_VAR 0 7
39838: PUSH
39839: LD_VAR 0 6
39843: PUSH
39844: LD_VAR 0 3
39848: DIFF
39849: PUSH
39850: FOR_IN
39851: IFFALSE 39903
// begin if sci = 6 then
39853: LD_VAR 0 8
39857: PUSH
39858: LD_INT 6
39860: EQUAL
39861: IFFALSE 39865
// break ;
39863: GO 39903
// if BuildingStatus ( x ) = bs_idle then
39865: LD_VAR 0 7
39869: PPUSH
39870: CALL_OW 461
39874: PUSH
39875: LD_INT 2
39877: EQUAL
39878: IFFALSE 39901
// sci := sci ^ UnitsInside ( x ) ;
39880: LD_ADDR_VAR 0 8
39884: PUSH
39885: LD_VAR 0 8
39889: PUSH
39890: LD_VAR 0 7
39894: PPUSH
39895: CALL_OW 313
39899: ADD
39900: ST_TO_ADDR
// end ;
39901: GO 39850
39903: POP
39904: POP
// if not sci then
39905: LD_VAR 0 8
39909: NOT
39910: IFFALSE 39914
// continue ;
39912: GO 38959
// for x in sci do
39914: LD_ADDR_VAR 0 7
39918: PUSH
39919: LD_VAR 0 8
39923: PUSH
39924: FOR_IN
39925: IFFALSE 39975
// if IsInUnit ( x ) and not HasTask ( x ) then
39927: LD_VAR 0 7
39931: PPUSH
39932: CALL_OW 310
39936: PUSH
39937: LD_VAR 0 7
39941: PPUSH
39942: CALL_OW 314
39946: NOT
39947: AND
39948: IFFALSE 39973
// begin ComExitBuilding ( x ) ;
39950: LD_VAR 0 7
39954: PPUSH
39955: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
39959: LD_VAR 0 7
39963: PPUSH
39964: LD_VAR 0 3
39968: PPUSH
39969: CALL_OW 180
// end ;
39973: GO 39924
39975: POP
39976: POP
// end ; end ;
39977: GO 38959
39979: POP
39980: POP
// end ;
39981: GO 38913
39983: POP
39984: POP
// end ;
39985: LD_VAR 0 1
39989: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
39990: LD_INT 0
39992: PPUSH
39993: PPUSH
// if not mc_bases then
39994: LD_EXP 89
39998: NOT
39999: IFFALSE 40003
// exit ;
40001: GO 40084
// for i = 1 to mc_bases do
40003: LD_ADDR_VAR 0 2
40007: PUSH
40008: DOUBLE
40009: LD_INT 1
40011: DEC
40012: ST_TO_ADDR
40013: LD_EXP 89
40017: PUSH
40018: FOR_TO
40019: IFFALSE 40082
// if mc_mines [ i ] and mc_miners [ i ] then
40021: LD_EXP 102
40025: PUSH
40026: LD_VAR 0 2
40030: ARRAY
40031: PUSH
40032: LD_EXP 103
40036: PUSH
40037: LD_VAR 0 2
40041: ARRAY
40042: AND
40043: IFFALSE 40080
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
40045: LD_EXP 103
40049: PUSH
40050: LD_VAR 0 2
40054: ARRAY
40055: PUSH
40056: LD_INT 1
40058: ARRAY
40059: PPUSH
40060: CALL_OW 255
40064: PPUSH
40065: LD_EXP 102
40069: PUSH
40070: LD_VAR 0 2
40074: ARRAY
40075: PPUSH
40076: CALL 49888 0 2
40080: GO 40018
40082: POP
40083: POP
// end ;
40084: LD_VAR 0 1
40088: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
40089: LD_INT 0
40091: PPUSH
40092: PPUSH
40093: PPUSH
40094: PPUSH
40095: PPUSH
40096: PPUSH
40097: PPUSH
40098: PPUSH
// if not mc_bases or not mc_parking then
40099: LD_EXP 89
40103: NOT
40104: PUSH
40105: LD_EXP 113
40109: NOT
40110: OR
40111: IFFALSE 40115
// exit ;
40113: GO 40814
// for i = 1 to mc_bases do
40115: LD_ADDR_VAR 0 2
40119: PUSH
40120: DOUBLE
40121: LD_INT 1
40123: DEC
40124: ST_TO_ADDR
40125: LD_EXP 89
40129: PUSH
40130: FOR_TO
40131: IFFALSE 40812
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
40133: LD_EXP 89
40137: PUSH
40138: LD_VAR 0 2
40142: ARRAY
40143: NOT
40144: PUSH
40145: LD_EXP 113
40149: PUSH
40150: LD_VAR 0 2
40154: ARRAY
40155: NOT
40156: OR
40157: IFFALSE 40161
// continue ;
40159: GO 40130
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
40161: LD_ADDR_VAR 0 5
40165: PUSH
40166: LD_EXP 89
40170: PUSH
40171: LD_VAR 0 2
40175: ARRAY
40176: PUSH
40177: LD_INT 1
40179: ARRAY
40180: PPUSH
40181: CALL_OW 255
40185: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
40186: LD_ADDR_VAR 0 6
40190: PUSH
40191: LD_EXP 89
40195: PUSH
40196: LD_VAR 0 2
40200: ARRAY
40201: PPUSH
40202: LD_INT 30
40204: PUSH
40205: LD_INT 3
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PPUSH
40212: CALL_OW 72
40216: ST_TO_ADDR
// if not fac then
40217: LD_VAR 0 6
40221: NOT
40222: IFFALSE 40273
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
40224: LD_ADDR_VAR 0 6
40228: PUSH
40229: LD_EXP 89
40233: PUSH
40234: LD_VAR 0 2
40238: ARRAY
40239: PPUSH
40240: LD_INT 2
40242: PUSH
40243: LD_INT 30
40245: PUSH
40246: LD_INT 0
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 30
40255: PUSH
40256: LD_INT 1
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: LIST
40267: PPUSH
40268: CALL_OW 72
40272: ST_TO_ADDR
// if not fac then
40273: LD_VAR 0 6
40277: NOT
40278: IFFALSE 40282
// continue ;
40280: GO 40130
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
40282: LD_ADDR_VAR 0 7
40286: PUSH
40287: LD_EXP 113
40291: PUSH
40292: LD_VAR 0 2
40296: ARRAY
40297: PPUSH
40298: LD_INT 22
40300: PUSH
40301: LD_VAR 0 5
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 21
40312: PUSH
40313: LD_INT 2
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 3
40322: PUSH
40323: LD_INT 24
40325: PUSH
40326: LD_INT 1000
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: LIST
40341: PPUSH
40342: CALL_OW 70
40346: ST_TO_ADDR
// for j in fac do
40347: LD_ADDR_VAR 0 3
40351: PUSH
40352: LD_VAR 0 6
40356: PUSH
40357: FOR_IN
40358: IFFALSE 40439
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
40360: LD_ADDR_VAR 0 7
40364: PUSH
40365: LD_VAR 0 7
40369: PUSH
40370: LD_INT 22
40372: PUSH
40373: LD_VAR 0 5
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 91
40384: PUSH
40385: LD_VAR 0 3
40389: PUSH
40390: LD_INT 15
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 21
40400: PUSH
40401: LD_INT 2
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 3
40410: PUSH
40411: LD_INT 24
40413: PUSH
40414: LD_INT 1000
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: PPUSH
40431: CALL_OW 69
40435: UNION
40436: ST_TO_ADDR
40437: GO 40357
40439: POP
40440: POP
// if not vehs then
40441: LD_VAR 0 7
40445: NOT
40446: IFFALSE 40472
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
40448: LD_ADDR_EXP 101
40452: PUSH
40453: LD_EXP 101
40457: PPUSH
40458: LD_VAR 0 2
40462: PPUSH
40463: EMPTY
40464: PPUSH
40465: CALL_OW 1
40469: ST_TO_ADDR
// continue ;
40470: GO 40130
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
40472: LD_ADDR_VAR 0 8
40476: PUSH
40477: LD_EXP 89
40481: PUSH
40482: LD_VAR 0 2
40486: ARRAY
40487: PPUSH
40488: LD_INT 30
40490: PUSH
40491: LD_INT 3
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PPUSH
40498: CALL_OW 72
40502: ST_TO_ADDR
// if tmp then
40503: LD_VAR 0 8
40507: IFFALSE 40610
// begin for j in tmp do
40509: LD_ADDR_VAR 0 3
40513: PUSH
40514: LD_VAR 0 8
40518: PUSH
40519: FOR_IN
40520: IFFALSE 40608
// for k in UnitsInside ( j ) do
40522: LD_ADDR_VAR 0 4
40526: PUSH
40527: LD_VAR 0 3
40531: PPUSH
40532: CALL_OW 313
40536: PUSH
40537: FOR_IN
40538: IFFALSE 40604
// if k then
40540: LD_VAR 0 4
40544: IFFALSE 40602
// if not k in mc_repair_vehicle [ i ] then
40546: LD_VAR 0 4
40550: PUSH
40551: LD_EXP 101
40555: PUSH
40556: LD_VAR 0 2
40560: ARRAY
40561: IN
40562: NOT
40563: IFFALSE 40602
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
40565: LD_ADDR_EXP 101
40569: PUSH
40570: LD_EXP 101
40574: PPUSH
40575: LD_VAR 0 2
40579: PPUSH
40580: LD_EXP 101
40584: PUSH
40585: LD_VAR 0 2
40589: ARRAY
40590: PUSH
40591: LD_VAR 0 4
40595: UNION
40596: PPUSH
40597: CALL_OW 1
40601: ST_TO_ADDR
40602: GO 40537
40604: POP
40605: POP
40606: GO 40519
40608: POP
40609: POP
// end ; if not mc_repair_vehicle [ i ] then
40610: LD_EXP 101
40614: PUSH
40615: LD_VAR 0 2
40619: ARRAY
40620: NOT
40621: IFFALSE 40625
// continue ;
40623: GO 40130
// for j in mc_repair_vehicle [ i ] do
40625: LD_ADDR_VAR 0 3
40629: PUSH
40630: LD_EXP 101
40634: PUSH
40635: LD_VAR 0 2
40639: ARRAY
40640: PUSH
40641: FOR_IN
40642: IFFALSE 40808
// begin if GetClass ( j ) <> 3 then
40644: LD_VAR 0 3
40648: PPUSH
40649: CALL_OW 257
40653: PUSH
40654: LD_INT 3
40656: NONEQUAL
40657: IFFALSE 40698
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
40659: LD_ADDR_EXP 101
40663: PUSH
40664: LD_EXP 101
40668: PPUSH
40669: LD_VAR 0 2
40673: PPUSH
40674: LD_EXP 101
40678: PUSH
40679: LD_VAR 0 2
40683: ARRAY
40684: PUSH
40685: LD_VAR 0 3
40689: DIFF
40690: PPUSH
40691: CALL_OW 1
40695: ST_TO_ADDR
// continue ;
40696: GO 40641
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
40698: LD_VAR 0 3
40702: PPUSH
40703: CALL_OW 311
40707: NOT
40708: PUSH
40709: LD_VAR 0 3
40713: PUSH
40714: LD_EXP 92
40718: PUSH
40719: LD_VAR 0 2
40723: ARRAY
40724: PUSH
40725: LD_INT 1
40727: ARRAY
40728: IN
40729: NOT
40730: AND
40731: PUSH
40732: LD_VAR 0 3
40736: PUSH
40737: LD_EXP 92
40741: PUSH
40742: LD_VAR 0 2
40746: ARRAY
40747: PUSH
40748: LD_INT 2
40750: ARRAY
40751: IN
40752: NOT
40753: AND
40754: IFFALSE 40806
// begin if IsInUnit ( j ) then
40756: LD_VAR 0 3
40760: PPUSH
40761: CALL_OW 310
40765: IFFALSE 40776
// ComExitBuilding ( j ) ;
40767: LD_VAR 0 3
40771: PPUSH
40772: CALL_OW 122
// if not HasTask ( j ) then
40776: LD_VAR 0 3
40780: PPUSH
40781: CALL_OW 314
40785: NOT
40786: IFFALSE 40806
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
40788: LD_VAR 0 3
40792: PPUSH
40793: LD_VAR 0 7
40797: PUSH
40798: LD_INT 1
40800: ARRAY
40801: PPUSH
40802: CALL_OW 189
// end ; end ;
40806: GO 40641
40808: POP
40809: POP
// end ;
40810: GO 40130
40812: POP
40813: POP
// end ;
40814: LD_VAR 0 1
40818: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
40819: LD_INT 0
40821: PPUSH
40822: PPUSH
40823: PPUSH
40824: PPUSH
40825: PPUSH
40826: PPUSH
40827: PPUSH
40828: PPUSH
40829: PPUSH
40830: PPUSH
40831: PPUSH
// if not mc_bases then
40832: LD_EXP 89
40836: NOT
40837: IFFALSE 40841
// exit ;
40839: GO 41643
// for i = 1 to mc_bases do
40841: LD_ADDR_VAR 0 2
40845: PUSH
40846: DOUBLE
40847: LD_INT 1
40849: DEC
40850: ST_TO_ADDR
40851: LD_EXP 89
40855: PUSH
40856: FOR_TO
40857: IFFALSE 41641
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
40859: LD_EXP 117
40863: PUSH
40864: LD_VAR 0 2
40868: ARRAY
40869: NOT
40870: PUSH
40871: LD_EXP 92
40875: PUSH
40876: LD_VAR 0 2
40880: ARRAY
40881: PUSH
40882: LD_INT 1
40884: ARRAY
40885: OR
40886: PUSH
40887: LD_EXP 92
40891: PUSH
40892: LD_VAR 0 2
40896: ARRAY
40897: PUSH
40898: LD_INT 2
40900: ARRAY
40901: OR
40902: PUSH
40903: LD_EXP 115
40907: PUSH
40908: LD_VAR 0 2
40912: ARRAY
40913: PPUSH
40914: LD_INT 1
40916: PPUSH
40917: CALL_OW 325
40921: NOT
40922: OR
40923: PUSH
40924: LD_EXP 112
40928: PUSH
40929: LD_VAR 0 2
40933: ARRAY
40934: OR
40935: IFFALSE 40939
// continue ;
40937: GO 40856
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
40939: LD_ADDR_VAR 0 8
40943: PUSH
40944: LD_EXP 89
40948: PUSH
40949: LD_VAR 0 2
40953: ARRAY
40954: PPUSH
40955: LD_INT 25
40957: PUSH
40958: LD_INT 4
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 50
40967: PUSH
40968: EMPTY
40969: LIST
40970: PUSH
40971: LD_INT 3
40973: PUSH
40974: LD_INT 60
40976: PUSH
40977: EMPTY
40978: LIST
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: LIST
40988: PPUSH
40989: CALL_OW 72
40993: PUSH
40994: LD_EXP 93
40998: PUSH
40999: LD_VAR 0 2
41003: ARRAY
41004: DIFF
41005: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
41006: LD_ADDR_VAR 0 9
41010: PUSH
41011: LD_EXP 89
41015: PUSH
41016: LD_VAR 0 2
41020: ARRAY
41021: PPUSH
41022: LD_INT 2
41024: PUSH
41025: LD_INT 30
41027: PUSH
41028: LD_INT 0
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 30
41037: PUSH
41038: LD_INT 1
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: LIST
41049: PPUSH
41050: CALL_OW 72
41054: ST_TO_ADDR
// if not tmp or not dep then
41055: LD_VAR 0 8
41059: NOT
41060: PUSH
41061: LD_VAR 0 9
41065: NOT
41066: OR
41067: IFFALSE 41071
// continue ;
41069: GO 40856
// side := GetSide ( tmp [ 1 ] ) ;
41071: LD_ADDR_VAR 0 11
41075: PUSH
41076: LD_VAR 0 8
41080: PUSH
41081: LD_INT 1
41083: ARRAY
41084: PPUSH
41085: CALL_OW 255
41089: ST_TO_ADDR
// dep := dep [ 1 ] ;
41090: LD_ADDR_VAR 0 9
41094: PUSH
41095: LD_VAR 0 9
41099: PUSH
41100: LD_INT 1
41102: ARRAY
41103: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
41104: LD_ADDR_VAR 0 7
41108: PUSH
41109: LD_EXP 117
41113: PUSH
41114: LD_VAR 0 2
41118: ARRAY
41119: PPUSH
41120: LD_INT 22
41122: PUSH
41123: LD_INT 0
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 25
41132: PUSH
41133: LD_INT 12
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PPUSH
41144: CALL_OW 70
41148: PUSH
41149: LD_INT 22
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 25
41161: PUSH
41162: LD_INT 12
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 91
41171: PUSH
41172: LD_VAR 0 9
41176: PUSH
41177: LD_INT 20
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: LIST
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: LIST
41189: PPUSH
41190: CALL_OW 69
41194: UNION
41195: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
41196: LD_ADDR_VAR 0 10
41200: PUSH
41201: LD_EXP 117
41205: PUSH
41206: LD_VAR 0 2
41210: ARRAY
41211: PPUSH
41212: LD_INT 81
41214: PUSH
41215: LD_VAR 0 11
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PPUSH
41224: CALL_OW 70
41228: ST_TO_ADDR
// if not apes or danger_at_area then
41229: LD_VAR 0 7
41233: NOT
41234: PUSH
41235: LD_VAR 0 10
41239: OR
41240: IFFALSE 41290
// begin if mc_taming [ i ] then
41242: LD_EXP 120
41246: PUSH
41247: LD_VAR 0 2
41251: ARRAY
41252: IFFALSE 41288
// begin MC_Reset ( i , 121 ) ;
41254: LD_VAR 0 2
41258: PPUSH
41259: LD_INT 121
41261: PPUSH
41262: CALL 26741 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
41266: LD_ADDR_EXP 120
41270: PUSH
41271: LD_EXP 120
41275: PPUSH
41276: LD_VAR 0 2
41280: PPUSH
41281: EMPTY
41282: PPUSH
41283: CALL_OW 1
41287: ST_TO_ADDR
// end ; continue ;
41288: GO 40856
// end ; for j in tmp do
41290: LD_ADDR_VAR 0 3
41294: PUSH
41295: LD_VAR 0 8
41299: PUSH
41300: FOR_IN
41301: IFFALSE 41637
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
41303: LD_VAR 0 3
41307: PUSH
41308: LD_EXP 120
41312: PUSH
41313: LD_VAR 0 2
41317: ARRAY
41318: IN
41319: NOT
41320: PUSH
41321: LD_EXP 120
41325: PUSH
41326: LD_VAR 0 2
41330: ARRAY
41331: PUSH
41332: LD_INT 3
41334: LESS
41335: AND
41336: IFFALSE 41394
// begin SetTag ( j , 121 ) ;
41338: LD_VAR 0 3
41342: PPUSH
41343: LD_INT 121
41345: PPUSH
41346: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
41350: LD_ADDR_EXP 120
41354: PUSH
41355: LD_EXP 120
41359: PPUSH
41360: LD_VAR 0 2
41364: PUSH
41365: LD_EXP 120
41369: PUSH
41370: LD_VAR 0 2
41374: ARRAY
41375: PUSH
41376: LD_INT 1
41378: PLUS
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PPUSH
41384: LD_VAR 0 3
41388: PPUSH
41389: CALL 52899 0 3
41393: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
41394: LD_VAR 0 3
41398: PUSH
41399: LD_EXP 120
41403: PUSH
41404: LD_VAR 0 2
41408: ARRAY
41409: IN
41410: IFFALSE 41635
// begin if GetClass ( j ) <> 4 then
41412: LD_VAR 0 3
41416: PPUSH
41417: CALL_OW 257
41421: PUSH
41422: LD_INT 4
41424: NONEQUAL
41425: IFFALSE 41478
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
41427: LD_ADDR_EXP 120
41431: PUSH
41432: LD_EXP 120
41436: PPUSH
41437: LD_VAR 0 2
41441: PPUSH
41442: LD_EXP 120
41446: PUSH
41447: LD_VAR 0 2
41451: ARRAY
41452: PUSH
41453: LD_VAR 0 3
41457: DIFF
41458: PPUSH
41459: CALL_OW 1
41463: ST_TO_ADDR
// SetTag ( j , 0 ) ;
41464: LD_VAR 0 3
41468: PPUSH
41469: LD_INT 0
41471: PPUSH
41472: CALL_OW 109
// continue ;
41476: GO 41300
// end ; if IsInUnit ( j ) then
41478: LD_VAR 0 3
41482: PPUSH
41483: CALL_OW 310
41487: IFFALSE 41498
// ComExitBuilding ( j ) ;
41489: LD_VAR 0 3
41493: PPUSH
41494: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
41498: LD_ADDR_VAR 0 6
41502: PUSH
41503: LD_VAR 0 7
41507: PPUSH
41508: LD_VAR 0 3
41512: PPUSH
41513: CALL_OW 74
41517: ST_TO_ADDR
// if not ape then
41518: LD_VAR 0 6
41522: NOT
41523: IFFALSE 41527
// break ;
41525: GO 41637
// x := GetX ( ape ) ;
41527: LD_ADDR_VAR 0 4
41531: PUSH
41532: LD_VAR 0 6
41536: PPUSH
41537: CALL_OW 250
41541: ST_TO_ADDR
// y := GetY ( ape ) ;
41542: LD_ADDR_VAR 0 5
41546: PUSH
41547: LD_VAR 0 6
41551: PPUSH
41552: CALL_OW 251
41556: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41557: LD_VAR 0 4
41561: PPUSH
41562: LD_VAR 0 5
41566: PPUSH
41567: CALL_OW 488
41571: NOT
41572: PUSH
41573: LD_VAR 0 11
41577: PPUSH
41578: LD_VAR 0 4
41582: PPUSH
41583: LD_VAR 0 5
41587: PPUSH
41588: LD_INT 20
41590: PPUSH
41591: CALL 53795 0 4
41595: PUSH
41596: LD_INT 4
41598: ARRAY
41599: OR
41600: IFFALSE 41604
// break ;
41602: GO 41637
// if not HasTask ( j ) then
41604: LD_VAR 0 3
41608: PPUSH
41609: CALL_OW 314
41613: NOT
41614: IFFALSE 41635
// ComTameXY ( j , x , y ) ;
41616: LD_VAR 0 3
41620: PPUSH
41621: LD_VAR 0 4
41625: PPUSH
41626: LD_VAR 0 5
41630: PPUSH
41631: CALL_OW 131
// end ; end ;
41635: GO 41300
41637: POP
41638: POP
// end ;
41639: GO 40856
41641: POP
41642: POP
// end ;
41643: LD_VAR 0 1
41647: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
41648: LD_INT 0
41650: PPUSH
41651: PPUSH
41652: PPUSH
41653: PPUSH
41654: PPUSH
41655: PPUSH
41656: PPUSH
41657: PPUSH
// if not mc_bases then
41658: LD_EXP 89
41662: NOT
41663: IFFALSE 41667
// exit ;
41665: GO 42293
// for i = 1 to mc_bases do
41667: LD_ADDR_VAR 0 2
41671: PUSH
41672: DOUBLE
41673: LD_INT 1
41675: DEC
41676: ST_TO_ADDR
41677: LD_EXP 89
41681: PUSH
41682: FOR_TO
41683: IFFALSE 42291
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
41685: LD_EXP 118
41689: PUSH
41690: LD_VAR 0 2
41694: ARRAY
41695: NOT
41696: PUSH
41697: LD_EXP 118
41701: PUSH
41702: LD_VAR 0 2
41706: ARRAY
41707: PPUSH
41708: LD_INT 25
41710: PUSH
41711: LD_INT 12
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PPUSH
41718: CALL_OW 72
41722: NOT
41723: OR
41724: IFFALSE 41728
// continue ;
41726: GO 41682
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
41728: LD_ADDR_VAR 0 5
41732: PUSH
41733: LD_EXP 118
41737: PUSH
41738: LD_VAR 0 2
41742: ARRAY
41743: PUSH
41744: LD_INT 1
41746: ARRAY
41747: PPUSH
41748: CALL_OW 255
41752: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
41753: LD_VAR 0 5
41757: PPUSH
41758: LD_INT 2
41760: PPUSH
41761: CALL_OW 325
41765: IFFALSE 42018
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
41767: LD_ADDR_VAR 0 4
41771: PUSH
41772: LD_EXP 118
41776: PUSH
41777: LD_VAR 0 2
41781: ARRAY
41782: PPUSH
41783: LD_INT 25
41785: PUSH
41786: LD_INT 16
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PPUSH
41793: CALL_OW 72
41797: ST_TO_ADDR
// if tmp < 6 then
41798: LD_VAR 0 4
41802: PUSH
41803: LD_INT 6
41805: LESS
41806: IFFALSE 42018
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
41808: LD_ADDR_VAR 0 6
41812: PUSH
41813: LD_EXP 89
41817: PUSH
41818: LD_VAR 0 2
41822: ARRAY
41823: PPUSH
41824: LD_INT 2
41826: PUSH
41827: LD_INT 30
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 30
41839: PUSH
41840: LD_INT 1
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: LIST
41851: PPUSH
41852: CALL_OW 72
41856: ST_TO_ADDR
// if depot then
41857: LD_VAR 0 6
41861: IFFALSE 42018
// begin selected := 0 ;
41863: LD_ADDR_VAR 0 7
41867: PUSH
41868: LD_INT 0
41870: ST_TO_ADDR
// for j in depot do
41871: LD_ADDR_VAR 0 3
41875: PUSH
41876: LD_VAR 0 6
41880: PUSH
41881: FOR_IN
41882: IFFALSE 41913
// begin if UnitsInside ( j ) < 6 then
41884: LD_VAR 0 3
41888: PPUSH
41889: CALL_OW 313
41893: PUSH
41894: LD_INT 6
41896: LESS
41897: IFFALSE 41911
// begin selected := j ;
41899: LD_ADDR_VAR 0 7
41903: PUSH
41904: LD_VAR 0 3
41908: ST_TO_ADDR
// break ;
41909: GO 41913
// end ; end ;
41911: GO 41881
41913: POP
41914: POP
// if selected then
41915: LD_VAR 0 7
41919: IFFALSE 42018
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
41921: LD_ADDR_VAR 0 3
41925: PUSH
41926: LD_EXP 118
41930: PUSH
41931: LD_VAR 0 2
41935: ARRAY
41936: PPUSH
41937: LD_INT 25
41939: PUSH
41940: LD_INT 12
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PPUSH
41947: CALL_OW 72
41951: PUSH
41952: FOR_IN
41953: IFFALSE 42016
// if not HasTask ( j ) then
41955: LD_VAR 0 3
41959: PPUSH
41960: CALL_OW 314
41964: NOT
41965: IFFALSE 42014
// begin if not IsInUnit ( j ) then
41967: LD_VAR 0 3
41971: PPUSH
41972: CALL_OW 310
41976: NOT
41977: IFFALSE 41993
// ComEnterUnit ( j , selected ) ;
41979: LD_VAR 0 3
41983: PPUSH
41984: LD_VAR 0 7
41988: PPUSH
41989: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
41993: LD_VAR 0 3
41997: PPUSH
41998: LD_INT 16
42000: PPUSH
42001: CALL_OW 183
// AddComExitBuilding ( j ) ;
42005: LD_VAR 0 3
42009: PPUSH
42010: CALL_OW 182
// end ;
42014: GO 41952
42016: POP
42017: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
42018: LD_VAR 0 5
42022: PPUSH
42023: LD_INT 11
42025: PPUSH
42026: CALL_OW 325
42030: IFFALSE 42289
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
42032: LD_ADDR_VAR 0 4
42036: PUSH
42037: LD_EXP 118
42041: PUSH
42042: LD_VAR 0 2
42046: ARRAY
42047: PPUSH
42048: LD_INT 25
42050: PUSH
42051: LD_INT 16
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PPUSH
42058: CALL_OW 72
42062: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
42063: LD_VAR 0 4
42067: PUSH
42068: LD_INT 6
42070: GREATEREQUAL
42071: PUSH
42072: LD_VAR 0 5
42076: PPUSH
42077: LD_INT 2
42079: PPUSH
42080: CALL_OW 325
42084: NOT
42085: OR
42086: IFFALSE 42289
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
42088: LD_ADDR_VAR 0 8
42092: PUSH
42093: LD_EXP 89
42097: PUSH
42098: LD_VAR 0 2
42102: ARRAY
42103: PPUSH
42104: LD_INT 2
42106: PUSH
42107: LD_INT 30
42109: PUSH
42110: LD_INT 4
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 30
42119: PUSH
42120: LD_INT 5
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: LIST
42131: PPUSH
42132: CALL_OW 72
42136: ST_TO_ADDR
// if barracks then
42137: LD_VAR 0 8
42141: IFFALSE 42289
// begin selected := 0 ;
42143: LD_ADDR_VAR 0 7
42147: PUSH
42148: LD_INT 0
42150: ST_TO_ADDR
// for j in barracks do
42151: LD_ADDR_VAR 0 3
42155: PUSH
42156: LD_VAR 0 8
42160: PUSH
42161: FOR_IN
42162: IFFALSE 42193
// begin if UnitsInside ( j ) < 6 then
42164: LD_VAR 0 3
42168: PPUSH
42169: CALL_OW 313
42173: PUSH
42174: LD_INT 6
42176: LESS
42177: IFFALSE 42191
// begin selected := j ;
42179: LD_ADDR_VAR 0 7
42183: PUSH
42184: LD_VAR 0 3
42188: ST_TO_ADDR
// break ;
42189: GO 42193
// end ; end ;
42191: GO 42161
42193: POP
42194: POP
// if selected then
42195: LD_VAR 0 7
42199: IFFALSE 42289
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
42201: LD_ADDR_VAR 0 3
42205: PUSH
42206: LD_EXP 118
42210: PUSH
42211: LD_VAR 0 2
42215: ARRAY
42216: PPUSH
42217: LD_INT 25
42219: PUSH
42220: LD_INT 12
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PPUSH
42227: CALL_OW 72
42231: PUSH
42232: FOR_IN
42233: IFFALSE 42287
// if not IsInUnit ( j ) and not HasTask ( j ) then
42235: LD_VAR 0 3
42239: PPUSH
42240: CALL_OW 310
42244: NOT
42245: PUSH
42246: LD_VAR 0 3
42250: PPUSH
42251: CALL_OW 314
42255: NOT
42256: AND
42257: IFFALSE 42285
// begin ComEnterUnit ( j , selected ) ;
42259: LD_VAR 0 3
42263: PPUSH
42264: LD_VAR 0 7
42268: PPUSH
42269: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
42273: LD_VAR 0 3
42277: PPUSH
42278: LD_INT 15
42280: PPUSH
42281: CALL_OW 183
// end ;
42285: GO 42232
42287: POP
42288: POP
// end ; end ; end ; end ; end ;
42289: GO 41682
42291: POP
42292: POP
// end ;
42293: LD_VAR 0 1
42297: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
42298: LD_INT 0
42300: PPUSH
42301: PPUSH
42302: PPUSH
42303: PPUSH
// if not mc_bases then
42304: LD_EXP 89
42308: NOT
42309: IFFALSE 42313
// exit ;
42311: GO 42491
// for i = 1 to mc_bases do
42313: LD_ADDR_VAR 0 2
42317: PUSH
42318: DOUBLE
42319: LD_INT 1
42321: DEC
42322: ST_TO_ADDR
42323: LD_EXP 89
42327: PUSH
42328: FOR_TO
42329: IFFALSE 42489
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
42331: LD_ADDR_VAR 0 4
42335: PUSH
42336: LD_EXP 89
42340: PUSH
42341: LD_VAR 0 2
42345: ARRAY
42346: PPUSH
42347: LD_INT 25
42349: PUSH
42350: LD_INT 9
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PPUSH
42357: CALL_OW 72
42361: ST_TO_ADDR
// if not tmp then
42362: LD_VAR 0 4
42366: NOT
42367: IFFALSE 42371
// continue ;
42369: GO 42328
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
42371: LD_EXP 115
42375: PUSH
42376: LD_VAR 0 2
42380: ARRAY
42381: PPUSH
42382: LD_INT 29
42384: PPUSH
42385: CALL_OW 325
42389: NOT
42390: PUSH
42391: LD_EXP 115
42395: PUSH
42396: LD_VAR 0 2
42400: ARRAY
42401: PPUSH
42402: LD_INT 28
42404: PPUSH
42405: CALL_OW 325
42409: NOT
42410: AND
42411: IFFALSE 42415
// continue ;
42413: GO 42328
// for j in tmp do
42415: LD_ADDR_VAR 0 3
42419: PUSH
42420: LD_VAR 0 4
42424: PUSH
42425: FOR_IN
42426: IFFALSE 42485
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
42428: LD_VAR 0 3
42432: PUSH
42433: LD_EXP 92
42437: PUSH
42438: LD_VAR 0 2
42442: ARRAY
42443: PUSH
42444: LD_INT 1
42446: ARRAY
42447: IN
42448: NOT
42449: PUSH
42450: LD_VAR 0 3
42454: PUSH
42455: LD_EXP 92
42459: PUSH
42460: LD_VAR 0 2
42464: ARRAY
42465: PUSH
42466: LD_INT 2
42468: ARRAY
42469: IN
42470: NOT
42471: AND
42472: IFFALSE 42483
// ComSpaceTimeShoot ( j ) ;
42474: LD_VAR 0 3
42478: PPUSH
42479: CALL 48896 0 1
42483: GO 42425
42485: POP
42486: POP
// end ;
42487: GO 42328
42489: POP
42490: POP
// end ;
42491: LD_VAR 0 1
42495: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
42496: LD_INT 0
42498: PPUSH
42499: PPUSH
42500: PPUSH
42501: PPUSH
42502: PPUSH
42503: PPUSH
42504: PPUSH
42505: PPUSH
42506: PPUSH
// if not mc_bases then
42507: LD_EXP 89
42511: NOT
42512: IFFALSE 42516
// exit ;
42514: GO 43138
// for i = 1 to mc_bases do
42516: LD_ADDR_VAR 0 2
42520: PUSH
42521: DOUBLE
42522: LD_INT 1
42524: DEC
42525: ST_TO_ADDR
42526: LD_EXP 89
42530: PUSH
42531: FOR_TO
42532: IFFALSE 43136
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
42534: LD_EXP 124
42538: PUSH
42539: LD_VAR 0 2
42543: ARRAY
42544: NOT
42545: PUSH
42546: LD_INT 38
42548: PPUSH
42549: LD_EXP 115
42553: PUSH
42554: LD_VAR 0 2
42558: ARRAY
42559: PPUSH
42560: CALL_OW 321
42564: PUSH
42565: LD_INT 2
42567: NONEQUAL
42568: OR
42569: IFFALSE 42573
// continue ;
42571: GO 42531
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
42573: LD_ADDR_VAR 0 8
42577: PUSH
42578: LD_EXP 89
42582: PUSH
42583: LD_VAR 0 2
42587: ARRAY
42588: PPUSH
42589: LD_INT 30
42591: PUSH
42592: LD_INT 34
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PPUSH
42599: CALL_OW 72
42603: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
42604: LD_ADDR_VAR 0 9
42608: PUSH
42609: LD_EXP 89
42613: PUSH
42614: LD_VAR 0 2
42618: ARRAY
42619: PPUSH
42620: LD_INT 25
42622: PUSH
42623: LD_INT 4
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PPUSH
42630: CALL_OW 72
42634: PPUSH
42635: LD_INT 0
42637: PPUSH
42638: CALL 81460 0 2
42642: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
42643: LD_VAR 0 9
42647: NOT
42648: PUSH
42649: LD_VAR 0 8
42653: NOT
42654: OR
42655: PUSH
42656: LD_EXP 89
42660: PUSH
42661: LD_VAR 0 2
42665: ARRAY
42666: PPUSH
42667: LD_INT 124
42669: PPUSH
42670: CALL 81460 0 2
42674: OR
42675: IFFALSE 42679
// continue ;
42677: GO 42531
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
42679: LD_EXP 125
42683: PUSH
42684: LD_VAR 0 2
42688: ARRAY
42689: PUSH
42690: LD_EXP 124
42694: PUSH
42695: LD_VAR 0 2
42699: ARRAY
42700: LESS
42701: PUSH
42702: LD_EXP 125
42706: PUSH
42707: LD_VAR 0 2
42711: ARRAY
42712: PUSH
42713: LD_VAR 0 8
42717: LESS
42718: AND
42719: IFFALSE 43134
// begin tmp := sci [ 1 ] ;
42721: LD_ADDR_VAR 0 7
42725: PUSH
42726: LD_VAR 0 9
42730: PUSH
42731: LD_INT 1
42733: ARRAY
42734: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
42735: LD_VAR 0 7
42739: PPUSH
42740: LD_INT 124
42742: PPUSH
42743: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
42747: LD_ADDR_VAR 0 3
42751: PUSH
42752: DOUBLE
42753: LD_EXP 124
42757: PUSH
42758: LD_VAR 0 2
42762: ARRAY
42763: INC
42764: ST_TO_ADDR
42765: LD_EXP 124
42769: PUSH
42770: LD_VAR 0 2
42774: ARRAY
42775: PUSH
42776: FOR_DOWNTO
42777: IFFALSE 43120
// begin if IsInUnit ( tmp ) then
42779: LD_VAR 0 7
42783: PPUSH
42784: CALL_OW 310
42788: IFFALSE 42799
// ComExitBuilding ( tmp ) ;
42790: LD_VAR 0 7
42794: PPUSH
42795: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
42799: LD_INT 35
42801: PPUSH
42802: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
42806: LD_VAR 0 7
42810: PPUSH
42811: CALL_OW 310
42815: NOT
42816: PUSH
42817: LD_VAR 0 7
42821: PPUSH
42822: CALL_OW 314
42826: NOT
42827: AND
42828: IFFALSE 42799
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
42830: LD_ADDR_VAR 0 6
42834: PUSH
42835: LD_VAR 0 7
42839: PPUSH
42840: CALL_OW 250
42844: PUSH
42845: LD_VAR 0 7
42849: PPUSH
42850: CALL_OW 251
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
42859: LD_INT 35
42861: PPUSH
42862: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
42866: LD_ADDR_VAR 0 4
42870: PUSH
42871: LD_EXP 124
42875: PUSH
42876: LD_VAR 0 2
42880: ARRAY
42881: PUSH
42882: LD_VAR 0 3
42886: ARRAY
42887: PUSH
42888: LD_INT 1
42890: ARRAY
42891: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
42892: LD_ADDR_VAR 0 5
42896: PUSH
42897: LD_EXP 124
42901: PUSH
42902: LD_VAR 0 2
42906: ARRAY
42907: PUSH
42908: LD_VAR 0 3
42912: ARRAY
42913: PUSH
42914: LD_INT 2
42916: ARRAY
42917: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
42918: LD_VAR 0 7
42922: PPUSH
42923: LD_INT 10
42925: PPUSH
42926: CALL 55492 0 2
42930: PUSH
42931: LD_INT 4
42933: ARRAY
42934: IFFALSE 42972
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
42936: LD_VAR 0 7
42940: PPUSH
42941: LD_VAR 0 6
42945: PUSH
42946: LD_INT 1
42948: ARRAY
42949: PPUSH
42950: LD_VAR 0 6
42954: PUSH
42955: LD_INT 2
42957: ARRAY
42958: PPUSH
42959: CALL_OW 111
// wait ( 0 0$10 ) ;
42963: LD_INT 350
42965: PPUSH
42966: CALL_OW 67
// end else
42970: GO 42998
// begin ComMoveXY ( tmp , x , y ) ;
42972: LD_VAR 0 7
42976: PPUSH
42977: LD_VAR 0 4
42981: PPUSH
42982: LD_VAR 0 5
42986: PPUSH
42987: CALL_OW 111
// wait ( 0 0$3 ) ;
42991: LD_INT 105
42993: PPUSH
42994: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
42998: LD_VAR 0 7
43002: PPUSH
43003: LD_VAR 0 4
43007: PPUSH
43008: LD_VAR 0 5
43012: PPUSH
43013: CALL_OW 307
43017: IFFALSE 42859
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
43019: LD_VAR 0 7
43023: PPUSH
43024: LD_VAR 0 4
43028: PPUSH
43029: LD_VAR 0 5
43033: PPUSH
43034: LD_VAR 0 8
43038: PUSH
43039: LD_VAR 0 3
43043: ARRAY
43044: PPUSH
43045: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
43049: LD_INT 35
43051: PPUSH
43052: CALL_OW 67
// until not HasTask ( tmp ) ;
43056: LD_VAR 0 7
43060: PPUSH
43061: CALL_OW 314
43065: NOT
43066: IFFALSE 43049
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
43068: LD_ADDR_EXP 125
43072: PUSH
43073: LD_EXP 125
43077: PPUSH
43078: LD_VAR 0 2
43082: PUSH
43083: LD_EXP 125
43087: PUSH
43088: LD_VAR 0 2
43092: ARRAY
43093: PUSH
43094: LD_INT 1
43096: PLUS
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PPUSH
43102: LD_VAR 0 8
43106: PUSH
43107: LD_VAR 0 3
43111: ARRAY
43112: PPUSH
43113: CALL 52899 0 3
43117: ST_TO_ADDR
// end ;
43118: GO 42776
43120: POP
43121: POP
// MC_Reset ( i , 124 ) ;
43122: LD_VAR 0 2
43126: PPUSH
43127: LD_INT 124
43129: PPUSH
43130: CALL 26741 0 2
// end ; end ;
43134: GO 42531
43136: POP
43137: POP
// end ;
43138: LD_VAR 0 1
43142: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
43143: LD_INT 0
43145: PPUSH
43146: PPUSH
43147: PPUSH
// if not mc_bases then
43148: LD_EXP 89
43152: NOT
43153: IFFALSE 43157
// exit ;
43155: GO 43763
// for i = 1 to mc_bases do
43157: LD_ADDR_VAR 0 2
43161: PUSH
43162: DOUBLE
43163: LD_INT 1
43165: DEC
43166: ST_TO_ADDR
43167: LD_EXP 89
43171: PUSH
43172: FOR_TO
43173: IFFALSE 43761
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
43175: LD_ADDR_VAR 0 3
43179: PUSH
43180: LD_EXP 89
43184: PUSH
43185: LD_VAR 0 2
43189: ARRAY
43190: PPUSH
43191: LD_INT 25
43193: PUSH
43194: LD_INT 4
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PPUSH
43201: CALL_OW 72
43205: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
43206: LD_VAR 0 3
43210: NOT
43211: PUSH
43212: LD_EXP 126
43216: PUSH
43217: LD_VAR 0 2
43221: ARRAY
43222: NOT
43223: OR
43224: PUSH
43225: LD_EXP 89
43229: PUSH
43230: LD_VAR 0 2
43234: ARRAY
43235: PPUSH
43236: LD_INT 2
43238: PUSH
43239: LD_INT 30
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 30
43251: PUSH
43252: LD_INT 1
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: LIST
43263: PPUSH
43264: CALL_OW 72
43268: NOT
43269: OR
43270: IFFALSE 43320
// begin if mc_deposits_finder [ i ] then
43272: LD_EXP 127
43276: PUSH
43277: LD_VAR 0 2
43281: ARRAY
43282: IFFALSE 43318
// begin MC_Reset ( i , 125 ) ;
43284: LD_VAR 0 2
43288: PPUSH
43289: LD_INT 125
43291: PPUSH
43292: CALL 26741 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
43296: LD_ADDR_EXP 127
43300: PUSH
43301: LD_EXP 127
43305: PPUSH
43306: LD_VAR 0 2
43310: PPUSH
43311: EMPTY
43312: PPUSH
43313: CALL_OW 1
43317: ST_TO_ADDR
// end ; continue ;
43318: GO 43172
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
43320: LD_EXP 126
43324: PUSH
43325: LD_VAR 0 2
43329: ARRAY
43330: PUSH
43331: LD_INT 1
43333: ARRAY
43334: PUSH
43335: LD_INT 3
43337: ARRAY
43338: PUSH
43339: LD_INT 1
43341: EQUAL
43342: PUSH
43343: LD_INT 20
43345: PPUSH
43346: LD_EXP 115
43350: PUSH
43351: LD_VAR 0 2
43355: ARRAY
43356: PPUSH
43357: CALL_OW 321
43361: PUSH
43362: LD_INT 2
43364: NONEQUAL
43365: AND
43366: IFFALSE 43416
// begin if mc_deposits_finder [ i ] then
43368: LD_EXP 127
43372: PUSH
43373: LD_VAR 0 2
43377: ARRAY
43378: IFFALSE 43414
// begin MC_Reset ( i , 125 ) ;
43380: LD_VAR 0 2
43384: PPUSH
43385: LD_INT 125
43387: PPUSH
43388: CALL 26741 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
43392: LD_ADDR_EXP 127
43396: PUSH
43397: LD_EXP 127
43401: PPUSH
43402: LD_VAR 0 2
43406: PPUSH
43407: EMPTY
43408: PPUSH
43409: CALL_OW 1
43413: ST_TO_ADDR
// end ; continue ;
43414: GO 43172
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
43416: LD_EXP 126
43420: PUSH
43421: LD_VAR 0 2
43425: ARRAY
43426: PUSH
43427: LD_INT 1
43429: ARRAY
43430: PUSH
43431: LD_INT 1
43433: ARRAY
43434: PPUSH
43435: LD_EXP 126
43439: PUSH
43440: LD_VAR 0 2
43444: ARRAY
43445: PUSH
43446: LD_INT 1
43448: ARRAY
43449: PUSH
43450: LD_INT 2
43452: ARRAY
43453: PPUSH
43454: LD_EXP 115
43458: PUSH
43459: LD_VAR 0 2
43463: ARRAY
43464: PPUSH
43465: CALL_OW 440
43469: IFFALSE 43512
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
43471: LD_ADDR_EXP 126
43475: PUSH
43476: LD_EXP 126
43480: PPUSH
43481: LD_VAR 0 2
43485: PPUSH
43486: LD_EXP 126
43490: PUSH
43491: LD_VAR 0 2
43495: ARRAY
43496: PPUSH
43497: LD_INT 1
43499: PPUSH
43500: CALL_OW 3
43504: PPUSH
43505: CALL_OW 1
43509: ST_TO_ADDR
43510: GO 43759
// begin if not mc_deposits_finder [ i ] then
43512: LD_EXP 127
43516: PUSH
43517: LD_VAR 0 2
43521: ARRAY
43522: NOT
43523: IFFALSE 43575
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
43525: LD_ADDR_EXP 127
43529: PUSH
43530: LD_EXP 127
43534: PPUSH
43535: LD_VAR 0 2
43539: PPUSH
43540: LD_VAR 0 3
43544: PUSH
43545: LD_INT 1
43547: ARRAY
43548: PUSH
43549: EMPTY
43550: LIST
43551: PPUSH
43552: CALL_OW 1
43556: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
43557: LD_VAR 0 3
43561: PUSH
43562: LD_INT 1
43564: ARRAY
43565: PPUSH
43566: LD_INT 125
43568: PPUSH
43569: CALL_OW 109
// end else
43573: GO 43759
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
43575: LD_EXP 127
43579: PUSH
43580: LD_VAR 0 2
43584: ARRAY
43585: PUSH
43586: LD_INT 1
43588: ARRAY
43589: PPUSH
43590: CALL_OW 310
43594: IFFALSE 43617
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
43596: LD_EXP 127
43600: PUSH
43601: LD_VAR 0 2
43605: ARRAY
43606: PUSH
43607: LD_INT 1
43609: ARRAY
43610: PPUSH
43611: CALL_OW 122
43615: GO 43759
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
43617: LD_EXP 127
43621: PUSH
43622: LD_VAR 0 2
43626: ARRAY
43627: PUSH
43628: LD_INT 1
43630: ARRAY
43631: PPUSH
43632: CALL_OW 314
43636: NOT
43637: PUSH
43638: LD_EXP 127
43642: PUSH
43643: LD_VAR 0 2
43647: ARRAY
43648: PUSH
43649: LD_INT 1
43651: ARRAY
43652: PPUSH
43653: LD_EXP 126
43657: PUSH
43658: LD_VAR 0 2
43662: ARRAY
43663: PUSH
43664: LD_INT 1
43666: ARRAY
43667: PUSH
43668: LD_INT 1
43670: ARRAY
43671: PPUSH
43672: LD_EXP 126
43676: PUSH
43677: LD_VAR 0 2
43681: ARRAY
43682: PUSH
43683: LD_INT 1
43685: ARRAY
43686: PUSH
43687: LD_INT 2
43689: ARRAY
43690: PPUSH
43691: CALL_OW 297
43695: PUSH
43696: LD_INT 6
43698: GREATER
43699: AND
43700: IFFALSE 43759
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
43702: LD_EXP 127
43706: PUSH
43707: LD_VAR 0 2
43711: ARRAY
43712: PUSH
43713: LD_INT 1
43715: ARRAY
43716: PPUSH
43717: LD_EXP 126
43721: PUSH
43722: LD_VAR 0 2
43726: ARRAY
43727: PUSH
43728: LD_INT 1
43730: ARRAY
43731: PUSH
43732: LD_INT 1
43734: ARRAY
43735: PPUSH
43736: LD_EXP 126
43740: PUSH
43741: LD_VAR 0 2
43745: ARRAY
43746: PUSH
43747: LD_INT 1
43749: ARRAY
43750: PUSH
43751: LD_INT 2
43753: ARRAY
43754: PPUSH
43755: CALL_OW 111
// end ; end ; end ;
43759: GO 43172
43761: POP
43762: POP
// end ;
43763: LD_VAR 0 1
43767: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
43768: LD_INT 0
43770: PPUSH
43771: PPUSH
43772: PPUSH
43773: PPUSH
43774: PPUSH
43775: PPUSH
43776: PPUSH
43777: PPUSH
43778: PPUSH
43779: PPUSH
43780: PPUSH
// if not mc_bases then
43781: LD_EXP 89
43785: NOT
43786: IFFALSE 43790
// exit ;
43788: GO 44730
// for i = 1 to mc_bases do
43790: LD_ADDR_VAR 0 2
43794: PUSH
43795: DOUBLE
43796: LD_INT 1
43798: DEC
43799: ST_TO_ADDR
43800: LD_EXP 89
43804: PUSH
43805: FOR_TO
43806: IFFALSE 44728
// begin if not mc_bases [ i ] or mc_scan [ i ] then
43808: LD_EXP 89
43812: PUSH
43813: LD_VAR 0 2
43817: ARRAY
43818: NOT
43819: PUSH
43820: LD_EXP 112
43824: PUSH
43825: LD_VAR 0 2
43829: ARRAY
43830: OR
43831: IFFALSE 43835
// continue ;
43833: GO 43805
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
43835: LD_ADDR_VAR 0 7
43839: PUSH
43840: LD_EXP 89
43844: PUSH
43845: LD_VAR 0 2
43849: ARRAY
43850: PUSH
43851: LD_INT 1
43853: ARRAY
43854: PPUSH
43855: CALL_OW 248
43859: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
43860: LD_VAR 0 7
43864: PUSH
43865: LD_INT 3
43867: EQUAL
43868: PUSH
43869: LD_EXP 108
43873: PUSH
43874: LD_VAR 0 2
43878: ARRAY
43879: PUSH
43880: LD_EXP 111
43884: PUSH
43885: LD_VAR 0 2
43889: ARRAY
43890: UNION
43891: PPUSH
43892: LD_INT 33
43894: PUSH
43895: LD_INT 2
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PPUSH
43902: CALL_OW 72
43906: NOT
43907: OR
43908: IFFALSE 43912
// continue ;
43910: GO 43805
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
43912: LD_ADDR_VAR 0 9
43916: PUSH
43917: LD_EXP 89
43921: PUSH
43922: LD_VAR 0 2
43926: ARRAY
43927: PPUSH
43928: LD_INT 30
43930: PUSH
43931: LD_INT 36
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PPUSH
43938: CALL_OW 72
43942: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
43943: LD_ADDR_VAR 0 10
43947: PUSH
43948: LD_EXP 108
43952: PUSH
43953: LD_VAR 0 2
43957: ARRAY
43958: PPUSH
43959: LD_INT 34
43961: PUSH
43962: LD_INT 31
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PPUSH
43969: CALL_OW 72
43973: ST_TO_ADDR
// if not cts and not mcts then
43974: LD_VAR 0 9
43978: NOT
43979: PUSH
43980: LD_VAR 0 10
43984: NOT
43985: AND
43986: IFFALSE 43990
// continue ;
43988: GO 43805
// x := cts ;
43990: LD_ADDR_VAR 0 11
43994: PUSH
43995: LD_VAR 0 9
43999: ST_TO_ADDR
// if not x then
44000: LD_VAR 0 11
44004: NOT
44005: IFFALSE 44017
// x := mcts ;
44007: LD_ADDR_VAR 0 11
44011: PUSH
44012: LD_VAR 0 10
44016: ST_TO_ADDR
// if not x then
44017: LD_VAR 0 11
44021: NOT
44022: IFFALSE 44026
// continue ;
44024: GO 43805
// if mc_remote_driver [ i ] then
44026: LD_EXP 129
44030: PUSH
44031: LD_VAR 0 2
44035: ARRAY
44036: IFFALSE 44423
// for j in mc_remote_driver [ i ] do
44038: LD_ADDR_VAR 0 3
44042: PUSH
44043: LD_EXP 129
44047: PUSH
44048: LD_VAR 0 2
44052: ARRAY
44053: PUSH
44054: FOR_IN
44055: IFFALSE 44421
// begin if GetClass ( j ) <> 3 then
44057: LD_VAR 0 3
44061: PPUSH
44062: CALL_OW 257
44066: PUSH
44067: LD_INT 3
44069: NONEQUAL
44070: IFFALSE 44123
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
44072: LD_ADDR_EXP 129
44076: PUSH
44077: LD_EXP 129
44081: PPUSH
44082: LD_VAR 0 2
44086: PPUSH
44087: LD_EXP 129
44091: PUSH
44092: LD_VAR 0 2
44096: ARRAY
44097: PUSH
44098: LD_VAR 0 3
44102: DIFF
44103: PPUSH
44104: CALL_OW 1
44108: ST_TO_ADDR
// SetTag ( j , 0 ) ;
44109: LD_VAR 0 3
44113: PPUSH
44114: LD_INT 0
44116: PPUSH
44117: CALL_OW 109
// continue ;
44121: GO 44054
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
44123: LD_EXP 108
44127: PUSH
44128: LD_VAR 0 2
44132: ARRAY
44133: PPUSH
44134: LD_INT 34
44136: PUSH
44137: LD_INT 31
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 58
44146: PUSH
44147: EMPTY
44148: LIST
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PPUSH
44154: CALL_OW 72
44158: PUSH
44159: LD_VAR 0 3
44163: PPUSH
44164: CALL 81548 0 1
44168: NOT
44169: AND
44170: IFFALSE 44241
// begin if IsInUnit ( j ) then
44172: LD_VAR 0 3
44176: PPUSH
44177: CALL_OW 310
44181: IFFALSE 44192
// ComExitBuilding ( j ) ;
44183: LD_VAR 0 3
44187: PPUSH
44188: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
44192: LD_VAR 0 3
44196: PPUSH
44197: LD_EXP 108
44201: PUSH
44202: LD_VAR 0 2
44206: ARRAY
44207: PPUSH
44208: LD_INT 34
44210: PUSH
44211: LD_INT 31
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 58
44220: PUSH
44221: EMPTY
44222: LIST
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PPUSH
44228: CALL_OW 72
44232: PUSH
44233: LD_INT 1
44235: ARRAY
44236: PPUSH
44237: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
44241: LD_VAR 0 3
44245: PPUSH
44246: CALL_OW 310
44250: NOT
44251: PUSH
44252: LD_VAR 0 3
44256: PPUSH
44257: CALL_OW 310
44261: PPUSH
44262: CALL_OW 266
44266: PUSH
44267: LD_INT 36
44269: NONEQUAL
44270: PUSH
44271: LD_VAR 0 3
44275: PPUSH
44276: CALL 81548 0 1
44280: NOT
44281: AND
44282: OR
44283: IFFALSE 44419
// begin if IsInUnit ( j ) then
44285: LD_VAR 0 3
44289: PPUSH
44290: CALL_OW 310
44294: IFFALSE 44305
// ComExitBuilding ( j ) ;
44296: LD_VAR 0 3
44300: PPUSH
44301: CALL_OW 122
// ct := 0 ;
44305: LD_ADDR_VAR 0 8
44309: PUSH
44310: LD_INT 0
44312: ST_TO_ADDR
// for k in x do
44313: LD_ADDR_VAR 0 4
44317: PUSH
44318: LD_VAR 0 11
44322: PUSH
44323: FOR_IN
44324: IFFALSE 44397
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
44326: LD_VAR 0 4
44330: PPUSH
44331: CALL_OW 264
44335: PUSH
44336: LD_INT 31
44338: EQUAL
44339: PUSH
44340: LD_VAR 0 4
44344: PPUSH
44345: CALL_OW 311
44349: NOT
44350: AND
44351: PUSH
44352: LD_VAR 0 4
44356: PPUSH
44357: CALL_OW 266
44361: PUSH
44362: LD_INT 36
44364: EQUAL
44365: PUSH
44366: LD_VAR 0 4
44370: PPUSH
44371: CALL_OW 313
44375: PUSH
44376: LD_INT 3
44378: LESS
44379: AND
44380: OR
44381: IFFALSE 44395
// begin ct := k ;
44383: LD_ADDR_VAR 0 8
44387: PUSH
44388: LD_VAR 0 4
44392: ST_TO_ADDR
// break ;
44393: GO 44397
// end ;
44395: GO 44323
44397: POP
44398: POP
// if ct then
44399: LD_VAR 0 8
44403: IFFALSE 44419
// ComEnterUnit ( j , ct ) ;
44405: LD_VAR 0 3
44409: PPUSH
44410: LD_VAR 0 8
44414: PPUSH
44415: CALL_OW 120
// end ; end ;
44419: GO 44054
44421: POP
44422: POP
// places := 0 ;
44423: LD_ADDR_VAR 0 5
44427: PUSH
44428: LD_INT 0
44430: ST_TO_ADDR
// for j = 1 to x do
44431: LD_ADDR_VAR 0 3
44435: PUSH
44436: DOUBLE
44437: LD_INT 1
44439: DEC
44440: ST_TO_ADDR
44441: LD_VAR 0 11
44445: PUSH
44446: FOR_TO
44447: IFFALSE 44523
// if GetWeapon ( x [ j ] ) = ar_control_tower then
44449: LD_VAR 0 11
44453: PUSH
44454: LD_VAR 0 3
44458: ARRAY
44459: PPUSH
44460: CALL_OW 264
44464: PUSH
44465: LD_INT 31
44467: EQUAL
44468: IFFALSE 44486
// places := places + 1 else
44470: LD_ADDR_VAR 0 5
44474: PUSH
44475: LD_VAR 0 5
44479: PUSH
44480: LD_INT 1
44482: PLUS
44483: ST_TO_ADDR
44484: GO 44521
// if GetBType ( x [ j ] ) = b_control_tower then
44486: LD_VAR 0 11
44490: PUSH
44491: LD_VAR 0 3
44495: ARRAY
44496: PPUSH
44497: CALL_OW 266
44501: PUSH
44502: LD_INT 36
44504: EQUAL
44505: IFFALSE 44521
// places := places + 3 ;
44507: LD_ADDR_VAR 0 5
44511: PUSH
44512: LD_VAR 0 5
44516: PUSH
44517: LD_INT 3
44519: PLUS
44520: ST_TO_ADDR
44521: GO 44446
44523: POP
44524: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
44525: LD_VAR 0 5
44529: PUSH
44530: LD_INT 0
44532: EQUAL
44533: PUSH
44534: LD_VAR 0 5
44538: PUSH
44539: LD_EXP 129
44543: PUSH
44544: LD_VAR 0 2
44548: ARRAY
44549: LESSEQUAL
44550: OR
44551: IFFALSE 44555
// continue ;
44553: GO 43805
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
44555: LD_ADDR_VAR 0 6
44559: PUSH
44560: LD_EXP 89
44564: PUSH
44565: LD_VAR 0 2
44569: ARRAY
44570: PPUSH
44571: LD_INT 25
44573: PUSH
44574: LD_INT 3
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PPUSH
44581: CALL_OW 72
44585: PUSH
44586: LD_EXP 129
44590: PUSH
44591: LD_VAR 0 2
44595: ARRAY
44596: DIFF
44597: PPUSH
44598: LD_INT 3
44600: PPUSH
44601: CALL 82448 0 2
44605: ST_TO_ADDR
// for j in tmp do
44606: LD_ADDR_VAR 0 3
44610: PUSH
44611: LD_VAR 0 6
44615: PUSH
44616: FOR_IN
44617: IFFALSE 44652
// if GetTag ( j ) > 0 then
44619: LD_VAR 0 3
44623: PPUSH
44624: CALL_OW 110
44628: PUSH
44629: LD_INT 0
44631: GREATER
44632: IFFALSE 44650
// tmp := tmp diff j ;
44634: LD_ADDR_VAR 0 6
44638: PUSH
44639: LD_VAR 0 6
44643: PUSH
44644: LD_VAR 0 3
44648: DIFF
44649: ST_TO_ADDR
44650: GO 44616
44652: POP
44653: POP
// if not tmp then
44654: LD_VAR 0 6
44658: NOT
44659: IFFALSE 44663
// continue ;
44661: GO 43805
// if places then
44663: LD_VAR 0 5
44667: IFFALSE 44726
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
44669: LD_ADDR_EXP 129
44673: PUSH
44674: LD_EXP 129
44678: PPUSH
44679: LD_VAR 0 2
44683: PPUSH
44684: LD_EXP 129
44688: PUSH
44689: LD_VAR 0 2
44693: ARRAY
44694: PUSH
44695: LD_VAR 0 6
44699: PUSH
44700: LD_INT 1
44702: ARRAY
44703: UNION
44704: PPUSH
44705: CALL_OW 1
44709: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
44710: LD_VAR 0 6
44714: PUSH
44715: LD_INT 1
44717: ARRAY
44718: PPUSH
44719: LD_INT 126
44721: PPUSH
44722: CALL_OW 109
// end ; end ;
44726: GO 43805
44728: POP
44729: POP
// end ;
44730: LD_VAR 0 1
44734: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
44735: LD_INT 0
44737: PPUSH
44738: PPUSH
44739: PPUSH
44740: PPUSH
44741: PPUSH
44742: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
44743: LD_VAR 0 1
44747: NOT
44748: PUSH
44749: LD_VAR 0 2
44753: NOT
44754: OR
44755: PUSH
44756: LD_VAR 0 3
44760: NOT
44761: OR
44762: PUSH
44763: LD_VAR 0 4
44767: PUSH
44768: LD_INT 1
44770: PUSH
44771: LD_INT 2
44773: PUSH
44774: LD_INT 3
44776: PUSH
44777: LD_INT 4
44779: PUSH
44780: LD_INT 5
44782: PUSH
44783: LD_INT 8
44785: PUSH
44786: LD_INT 9
44788: PUSH
44789: LD_INT 15
44791: PUSH
44792: LD_INT 16
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: IN
44806: NOT
44807: OR
44808: IFFALSE 44812
// exit ;
44810: GO 45712
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
44812: LD_ADDR_VAR 0 2
44816: PUSH
44817: LD_VAR 0 2
44821: PPUSH
44822: LD_INT 21
44824: PUSH
44825: LD_INT 3
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 24
44834: PUSH
44835: LD_INT 250
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PPUSH
44846: CALL_OW 72
44850: ST_TO_ADDR
// case class of 1 , 15 :
44851: LD_VAR 0 4
44855: PUSH
44856: LD_INT 1
44858: DOUBLE
44859: EQUAL
44860: IFTRUE 44870
44862: LD_INT 15
44864: DOUBLE
44865: EQUAL
44866: IFTRUE 44870
44868: GO 44955
44870: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
44871: LD_ADDR_VAR 0 8
44875: PUSH
44876: LD_VAR 0 2
44880: PPUSH
44881: LD_INT 2
44883: PUSH
44884: LD_INT 30
44886: PUSH
44887: LD_INT 32
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 30
44896: PUSH
44897: LD_INT 31
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: LIST
44908: PPUSH
44909: CALL_OW 72
44913: PUSH
44914: LD_VAR 0 2
44918: PPUSH
44919: LD_INT 2
44921: PUSH
44922: LD_INT 30
44924: PUSH
44925: LD_INT 4
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 30
44934: PUSH
44935: LD_INT 5
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: LIST
44946: PPUSH
44947: CALL_OW 72
44951: ADD
44952: ST_TO_ADDR
44953: GO 45201
44955: LD_INT 2
44957: DOUBLE
44958: EQUAL
44959: IFTRUE 44969
44961: LD_INT 16
44963: DOUBLE
44964: EQUAL
44965: IFTRUE 44969
44967: GO 45015
44969: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
44970: LD_ADDR_VAR 0 8
44974: PUSH
44975: LD_VAR 0 2
44979: PPUSH
44980: LD_INT 2
44982: PUSH
44983: LD_INT 30
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 30
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: LIST
45007: PPUSH
45008: CALL_OW 72
45012: ST_TO_ADDR
45013: GO 45201
45015: LD_INT 3
45017: DOUBLE
45018: EQUAL
45019: IFTRUE 45023
45021: GO 45069
45023: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
45024: LD_ADDR_VAR 0 8
45028: PUSH
45029: LD_VAR 0 2
45033: PPUSH
45034: LD_INT 2
45036: PUSH
45037: LD_INT 30
45039: PUSH
45040: LD_INT 2
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 30
45049: PUSH
45050: LD_INT 3
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: LIST
45061: PPUSH
45062: CALL_OW 72
45066: ST_TO_ADDR
45067: GO 45201
45069: LD_INT 4
45071: DOUBLE
45072: EQUAL
45073: IFTRUE 45077
45075: GO 45134
45077: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
45078: LD_ADDR_VAR 0 8
45082: PUSH
45083: LD_VAR 0 2
45087: PPUSH
45088: LD_INT 2
45090: PUSH
45091: LD_INT 30
45093: PUSH
45094: LD_INT 6
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 30
45103: PUSH
45104: LD_INT 7
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 30
45113: PUSH
45114: LD_INT 8
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: PPUSH
45127: CALL_OW 72
45131: ST_TO_ADDR
45132: GO 45201
45134: LD_INT 5
45136: DOUBLE
45137: EQUAL
45138: IFTRUE 45154
45140: LD_INT 8
45142: DOUBLE
45143: EQUAL
45144: IFTRUE 45154
45146: LD_INT 9
45148: DOUBLE
45149: EQUAL
45150: IFTRUE 45154
45152: GO 45200
45154: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
45155: LD_ADDR_VAR 0 8
45159: PUSH
45160: LD_VAR 0 2
45164: PPUSH
45165: LD_INT 2
45167: PUSH
45168: LD_INT 30
45170: PUSH
45171: LD_INT 4
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 30
45180: PUSH
45181: LD_INT 5
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: LIST
45192: PPUSH
45193: CALL_OW 72
45197: ST_TO_ADDR
45198: GO 45201
45200: POP
// if not tmp then
45201: LD_VAR 0 8
45205: NOT
45206: IFFALSE 45210
// exit ;
45208: GO 45712
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
45210: LD_VAR 0 4
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: LD_INT 15
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: IN
45225: PUSH
45226: LD_EXP 98
45230: PUSH
45231: LD_VAR 0 1
45235: ARRAY
45236: AND
45237: IFFALSE 45393
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
45239: LD_ADDR_VAR 0 9
45243: PUSH
45244: LD_EXP 98
45248: PUSH
45249: LD_VAR 0 1
45253: ARRAY
45254: PUSH
45255: LD_INT 1
45257: ARRAY
45258: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
45259: LD_VAR 0 9
45263: PUSH
45264: LD_EXP 99
45268: PUSH
45269: LD_VAR 0 1
45273: ARRAY
45274: IN
45275: NOT
45276: IFFALSE 45391
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
45278: LD_ADDR_EXP 99
45282: PUSH
45283: LD_EXP 99
45287: PPUSH
45288: LD_VAR 0 1
45292: PUSH
45293: LD_EXP 99
45297: PUSH
45298: LD_VAR 0 1
45302: ARRAY
45303: PUSH
45304: LD_INT 1
45306: PLUS
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PPUSH
45312: LD_VAR 0 9
45316: PPUSH
45317: CALL 52899 0 3
45321: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
45322: LD_ADDR_EXP 98
45326: PUSH
45327: LD_EXP 98
45331: PPUSH
45332: LD_VAR 0 1
45336: PPUSH
45337: LD_EXP 98
45341: PUSH
45342: LD_VAR 0 1
45346: ARRAY
45347: PUSH
45348: LD_VAR 0 9
45352: DIFF
45353: PPUSH
45354: CALL_OW 1
45358: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
45359: LD_VAR 0 3
45363: PPUSH
45364: LD_EXP 99
45368: PUSH
45369: LD_VAR 0 1
45373: ARRAY
45374: PUSH
45375: LD_EXP 99
45379: PUSH
45380: LD_VAR 0 1
45384: ARRAY
45385: ARRAY
45386: PPUSH
45387: CALL_OW 120
// end ; exit ;
45391: GO 45712
// end ; if tmp > 1 then
45393: LD_VAR 0 8
45397: PUSH
45398: LD_INT 1
45400: GREATER
45401: IFFALSE 45505
// for i = 2 to tmp do
45403: LD_ADDR_VAR 0 6
45407: PUSH
45408: DOUBLE
45409: LD_INT 2
45411: DEC
45412: ST_TO_ADDR
45413: LD_VAR 0 8
45417: PUSH
45418: FOR_TO
45419: IFFALSE 45503
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
45421: LD_VAR 0 8
45425: PUSH
45426: LD_VAR 0 6
45430: ARRAY
45431: PPUSH
45432: CALL_OW 461
45436: PUSH
45437: LD_INT 6
45439: EQUAL
45440: IFFALSE 45501
// begin x := tmp [ i ] ;
45442: LD_ADDR_VAR 0 9
45446: PUSH
45447: LD_VAR 0 8
45451: PUSH
45452: LD_VAR 0 6
45456: ARRAY
45457: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
45458: LD_ADDR_VAR 0 8
45462: PUSH
45463: LD_VAR 0 8
45467: PPUSH
45468: LD_VAR 0 6
45472: PPUSH
45473: CALL_OW 3
45477: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
45478: LD_ADDR_VAR 0 8
45482: PUSH
45483: LD_VAR 0 8
45487: PPUSH
45488: LD_INT 1
45490: PPUSH
45491: LD_VAR 0 9
45495: PPUSH
45496: CALL_OW 2
45500: ST_TO_ADDR
// end ;
45501: GO 45418
45503: POP
45504: POP
// for i in tmp do
45505: LD_ADDR_VAR 0 6
45509: PUSH
45510: LD_VAR 0 8
45514: PUSH
45515: FOR_IN
45516: IFFALSE 45585
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
45518: LD_VAR 0 6
45522: PPUSH
45523: CALL_OW 313
45527: PUSH
45528: LD_INT 6
45530: LESS
45531: PUSH
45532: LD_VAR 0 6
45536: PPUSH
45537: CALL_OW 266
45541: PUSH
45542: LD_INT 31
45544: PUSH
45545: LD_INT 32
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: IN
45552: NOT
45553: AND
45554: PUSH
45555: LD_VAR 0 6
45559: PPUSH
45560: CALL_OW 313
45564: PUSH
45565: LD_INT 0
45567: EQUAL
45568: OR
45569: IFFALSE 45583
// begin j := i ;
45571: LD_ADDR_VAR 0 7
45575: PUSH
45576: LD_VAR 0 6
45580: ST_TO_ADDR
// break ;
45581: GO 45585
// end ; end ;
45583: GO 45515
45585: POP
45586: POP
// if j then
45587: LD_VAR 0 7
45591: IFFALSE 45609
// ComEnterUnit ( unit , j ) else
45593: LD_VAR 0 3
45597: PPUSH
45598: LD_VAR 0 7
45602: PPUSH
45603: CALL_OW 120
45607: GO 45712
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
45609: LD_ADDR_VAR 0 10
45613: PUSH
45614: LD_VAR 0 2
45618: PPUSH
45619: LD_INT 2
45621: PUSH
45622: LD_INT 30
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 30
45634: PUSH
45635: LD_INT 1
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: LIST
45646: PPUSH
45647: CALL_OW 72
45651: ST_TO_ADDR
// if depot then
45652: LD_VAR 0 10
45656: IFFALSE 45712
// begin depot := NearestUnitToUnit ( depot , unit ) ;
45658: LD_ADDR_VAR 0 10
45662: PUSH
45663: LD_VAR 0 10
45667: PPUSH
45668: LD_VAR 0 3
45672: PPUSH
45673: CALL_OW 74
45677: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
45678: LD_VAR 0 3
45682: PPUSH
45683: LD_VAR 0 10
45687: PPUSH
45688: CALL_OW 296
45692: PUSH
45693: LD_INT 10
45695: GREATER
45696: IFFALSE 45712
// ComStandNearbyBuilding ( unit , depot ) ;
45698: LD_VAR 0 3
45702: PPUSH
45703: LD_VAR 0 10
45707: PPUSH
45708: CALL 49513 0 2
// end ; end ; end ;
45712: LD_VAR 0 5
45716: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
45717: LD_INT 0
45719: PPUSH
45720: PPUSH
45721: PPUSH
45722: PPUSH
// if not mc_bases then
45723: LD_EXP 89
45727: NOT
45728: IFFALSE 45732
// exit ;
45730: GO 45971
// for i = 1 to mc_bases do
45732: LD_ADDR_VAR 0 2
45736: PUSH
45737: DOUBLE
45738: LD_INT 1
45740: DEC
45741: ST_TO_ADDR
45742: LD_EXP 89
45746: PUSH
45747: FOR_TO
45748: IFFALSE 45969
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
45750: LD_ADDR_VAR 0 4
45754: PUSH
45755: LD_EXP 89
45759: PUSH
45760: LD_VAR 0 2
45764: ARRAY
45765: PPUSH
45766: LD_INT 21
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PPUSH
45776: CALL_OW 72
45780: PUSH
45781: LD_EXP 118
45785: PUSH
45786: LD_VAR 0 2
45790: ARRAY
45791: UNION
45792: ST_TO_ADDR
// if not tmp then
45793: LD_VAR 0 4
45797: NOT
45798: IFFALSE 45802
// continue ;
45800: GO 45747
// for j in tmp do
45802: LD_ADDR_VAR 0 3
45806: PUSH
45807: LD_VAR 0 4
45811: PUSH
45812: FOR_IN
45813: IFFALSE 45965
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
45815: LD_VAR 0 3
45819: PPUSH
45820: CALL_OW 110
45824: NOT
45825: PUSH
45826: LD_VAR 0 3
45830: PPUSH
45831: CALL_OW 314
45835: NOT
45836: AND
45837: PUSH
45838: LD_VAR 0 3
45842: PPUSH
45843: CALL_OW 311
45847: NOT
45848: AND
45849: PUSH
45850: LD_VAR 0 3
45854: PPUSH
45855: CALL_OW 310
45859: NOT
45860: AND
45861: PUSH
45862: LD_VAR 0 3
45866: PUSH
45867: LD_EXP 92
45871: PUSH
45872: LD_VAR 0 2
45876: ARRAY
45877: PUSH
45878: LD_INT 1
45880: ARRAY
45881: IN
45882: NOT
45883: AND
45884: PUSH
45885: LD_VAR 0 3
45889: PUSH
45890: LD_EXP 92
45894: PUSH
45895: LD_VAR 0 2
45899: ARRAY
45900: PUSH
45901: LD_INT 2
45903: ARRAY
45904: IN
45905: NOT
45906: AND
45907: PUSH
45908: LD_VAR 0 3
45912: PUSH
45913: LD_EXP 101
45917: PUSH
45918: LD_VAR 0 2
45922: ARRAY
45923: IN
45924: NOT
45925: AND
45926: IFFALSE 45963
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
45928: LD_VAR 0 2
45932: PPUSH
45933: LD_EXP 89
45937: PUSH
45938: LD_VAR 0 2
45942: ARRAY
45943: PPUSH
45944: LD_VAR 0 3
45948: PPUSH
45949: LD_VAR 0 3
45953: PPUSH
45954: CALL_OW 257
45958: PPUSH
45959: CALL 44735 0 4
// end ;
45963: GO 45812
45965: POP
45966: POP
// end ;
45967: GO 45747
45969: POP
45970: POP
// end ;
45971: LD_VAR 0 1
45975: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
45976: LD_INT 0
45978: PPUSH
45979: PPUSH
45980: PPUSH
45981: PPUSH
45982: PPUSH
45983: PPUSH
// if not mc_bases [ base ] then
45984: LD_EXP 89
45988: PUSH
45989: LD_VAR 0 1
45993: ARRAY
45994: NOT
45995: IFFALSE 45999
// exit ;
45997: GO 46181
// tmp := [ ] ;
45999: LD_ADDR_VAR 0 6
46003: PUSH
46004: EMPTY
46005: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
46006: LD_ADDR_VAR 0 7
46010: PUSH
46011: LD_VAR 0 3
46015: PPUSH
46016: LD_INT 0
46018: PPUSH
46019: CALL_OW 517
46023: ST_TO_ADDR
// if not list then
46024: LD_VAR 0 7
46028: NOT
46029: IFFALSE 46033
// exit ;
46031: GO 46181
// for i = 1 to amount do
46033: LD_ADDR_VAR 0 5
46037: PUSH
46038: DOUBLE
46039: LD_INT 1
46041: DEC
46042: ST_TO_ADDR
46043: LD_VAR 0 2
46047: PUSH
46048: FOR_TO
46049: IFFALSE 46129
// begin x := rand ( 1 , list [ 1 ] ) ;
46051: LD_ADDR_VAR 0 8
46055: PUSH
46056: LD_INT 1
46058: PPUSH
46059: LD_VAR 0 7
46063: PUSH
46064: LD_INT 1
46066: ARRAY
46067: PPUSH
46068: CALL_OW 12
46072: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
46073: LD_ADDR_VAR 0 6
46077: PUSH
46078: LD_VAR 0 6
46082: PPUSH
46083: LD_VAR 0 5
46087: PPUSH
46088: LD_VAR 0 7
46092: PUSH
46093: LD_INT 1
46095: ARRAY
46096: PUSH
46097: LD_VAR 0 8
46101: ARRAY
46102: PUSH
46103: LD_VAR 0 7
46107: PUSH
46108: LD_INT 2
46110: ARRAY
46111: PUSH
46112: LD_VAR 0 8
46116: ARRAY
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PPUSH
46122: CALL_OW 1
46126: ST_TO_ADDR
// end ;
46127: GO 46048
46129: POP
46130: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
46131: LD_ADDR_EXP 102
46135: PUSH
46136: LD_EXP 102
46140: PPUSH
46141: LD_VAR 0 1
46145: PPUSH
46146: LD_VAR 0 6
46150: PPUSH
46151: CALL_OW 1
46155: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
46156: LD_ADDR_EXP 104
46160: PUSH
46161: LD_EXP 104
46165: PPUSH
46166: LD_VAR 0 1
46170: PPUSH
46171: LD_VAR 0 3
46175: PPUSH
46176: CALL_OW 1
46180: ST_TO_ADDR
// end ;
46181: LD_VAR 0 4
46185: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
46186: LD_INT 0
46188: PPUSH
// if not mc_bases [ base ] then
46189: LD_EXP 89
46193: PUSH
46194: LD_VAR 0 1
46198: ARRAY
46199: NOT
46200: IFFALSE 46204
// exit ;
46202: GO 46229
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
46204: LD_ADDR_EXP 94
46208: PUSH
46209: LD_EXP 94
46213: PPUSH
46214: LD_VAR 0 1
46218: PPUSH
46219: LD_VAR 0 2
46223: PPUSH
46224: CALL_OW 1
46228: ST_TO_ADDR
// end ;
46229: LD_VAR 0 3
46233: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
46234: LD_INT 0
46236: PPUSH
// if not mc_bases [ base ] then
46237: LD_EXP 89
46241: PUSH
46242: LD_VAR 0 1
46246: ARRAY
46247: NOT
46248: IFFALSE 46252
// exit ;
46250: GO 46289
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
46252: LD_ADDR_EXP 94
46256: PUSH
46257: LD_EXP 94
46261: PPUSH
46262: LD_VAR 0 1
46266: PPUSH
46267: LD_EXP 94
46271: PUSH
46272: LD_VAR 0 1
46276: ARRAY
46277: PUSH
46278: LD_VAR 0 2
46282: UNION
46283: PPUSH
46284: CALL_OW 1
46288: ST_TO_ADDR
// end ;
46289: LD_VAR 0 3
46293: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
46294: LD_INT 0
46296: PPUSH
// if not mc_bases [ base ] then
46297: LD_EXP 89
46301: PUSH
46302: LD_VAR 0 1
46306: ARRAY
46307: NOT
46308: IFFALSE 46312
// exit ;
46310: GO 46337
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
46312: LD_ADDR_EXP 110
46316: PUSH
46317: LD_EXP 110
46321: PPUSH
46322: LD_VAR 0 1
46326: PPUSH
46327: LD_VAR 0 2
46331: PPUSH
46332: CALL_OW 1
46336: ST_TO_ADDR
// end ;
46337: LD_VAR 0 3
46341: RET
// export function MC_InsertProduceList ( base , components ) ; begin
46342: LD_INT 0
46344: PPUSH
// if not mc_bases [ base ] then
46345: LD_EXP 89
46349: PUSH
46350: LD_VAR 0 1
46354: ARRAY
46355: NOT
46356: IFFALSE 46360
// exit ;
46358: GO 46397
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
46360: LD_ADDR_EXP 110
46364: PUSH
46365: LD_EXP 110
46369: PPUSH
46370: LD_VAR 0 1
46374: PPUSH
46375: LD_EXP 110
46379: PUSH
46380: LD_VAR 0 1
46384: ARRAY
46385: PUSH
46386: LD_VAR 0 2
46390: ADD
46391: PPUSH
46392: CALL_OW 1
46396: ST_TO_ADDR
// end ;
46397: LD_VAR 0 3
46401: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
46402: LD_INT 0
46404: PPUSH
// if not mc_bases [ base ] then
46405: LD_EXP 89
46409: PUSH
46410: LD_VAR 0 1
46414: ARRAY
46415: NOT
46416: IFFALSE 46420
// exit ;
46418: GO 46474
// mc_defender := Replace ( mc_defender , base , deflist ) ;
46420: LD_ADDR_EXP 111
46424: PUSH
46425: LD_EXP 111
46429: PPUSH
46430: LD_VAR 0 1
46434: PPUSH
46435: LD_VAR 0 2
46439: PPUSH
46440: CALL_OW 1
46444: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
46445: LD_ADDR_EXP 100
46449: PUSH
46450: LD_EXP 100
46454: PPUSH
46455: LD_VAR 0 1
46459: PPUSH
46460: LD_VAR 0 2
46464: PUSH
46465: LD_INT 0
46467: PLUS
46468: PPUSH
46469: CALL_OW 1
46473: ST_TO_ADDR
// end ;
46474: LD_VAR 0 3
46478: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
46479: LD_INT 0
46481: PPUSH
// if not mc_bases [ base ] then
46482: LD_EXP 89
46486: PUSH
46487: LD_VAR 0 1
46491: ARRAY
46492: NOT
46493: IFFALSE 46497
// exit ;
46495: GO 46522
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
46497: LD_ADDR_EXP 100
46501: PUSH
46502: LD_EXP 100
46506: PPUSH
46507: LD_VAR 0 1
46511: PPUSH
46512: LD_VAR 0 2
46516: PPUSH
46517: CALL_OW 1
46521: ST_TO_ADDR
// end ;
46522: LD_VAR 0 3
46526: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
46527: LD_INT 0
46529: PPUSH
46530: PPUSH
46531: PPUSH
46532: PPUSH
// if not mc_bases [ base ] then
46533: LD_EXP 89
46537: PUSH
46538: LD_VAR 0 1
46542: ARRAY
46543: NOT
46544: IFFALSE 46548
// exit ;
46546: GO 46613
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
46548: LD_ADDR_EXP 109
46552: PUSH
46553: LD_EXP 109
46557: PPUSH
46558: LD_VAR 0 1
46562: PUSH
46563: LD_EXP 109
46567: PUSH
46568: LD_VAR 0 1
46572: ARRAY
46573: PUSH
46574: LD_INT 1
46576: PLUS
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PPUSH
46582: LD_VAR 0 1
46586: PUSH
46587: LD_VAR 0 2
46591: PUSH
46592: LD_VAR 0 3
46596: PUSH
46597: LD_VAR 0 4
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: PPUSH
46608: CALL 52899 0 3
46612: ST_TO_ADDR
// end ;
46613: LD_VAR 0 5
46617: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
46618: LD_INT 0
46620: PPUSH
// if not mc_bases [ base ] then
46621: LD_EXP 89
46625: PUSH
46626: LD_VAR 0 1
46630: ARRAY
46631: NOT
46632: IFFALSE 46636
// exit ;
46634: GO 46661
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
46636: LD_ADDR_EXP 126
46640: PUSH
46641: LD_EXP 126
46645: PPUSH
46646: LD_VAR 0 1
46650: PPUSH
46651: LD_VAR 0 2
46655: PPUSH
46656: CALL_OW 1
46660: ST_TO_ADDR
// end ;
46661: LD_VAR 0 3
46665: RET
// export function MC_GetMinesField ( base ) ; begin
46666: LD_INT 0
46668: PPUSH
// result := mc_mines [ base ] ;
46669: LD_ADDR_VAR 0 2
46673: PUSH
46674: LD_EXP 102
46678: PUSH
46679: LD_VAR 0 1
46683: ARRAY
46684: ST_TO_ADDR
// end ;
46685: LD_VAR 0 2
46689: RET
// export function MC_GetProduceList ( base ) ; begin
46690: LD_INT 0
46692: PPUSH
// result := mc_produce [ base ] ;
46693: LD_ADDR_VAR 0 2
46697: PUSH
46698: LD_EXP 110
46702: PUSH
46703: LD_VAR 0 1
46707: ARRAY
46708: ST_TO_ADDR
// end ;
46709: LD_VAR 0 2
46713: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
46714: LD_INT 0
46716: PPUSH
46717: PPUSH
// if not mc_bases then
46718: LD_EXP 89
46722: NOT
46723: IFFALSE 46727
// exit ;
46725: GO 46792
// if mc_bases [ base ] then
46727: LD_EXP 89
46731: PUSH
46732: LD_VAR 0 1
46736: ARRAY
46737: IFFALSE 46792
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
46739: LD_ADDR_VAR 0 3
46743: PUSH
46744: LD_EXP 89
46748: PUSH
46749: LD_VAR 0 1
46753: ARRAY
46754: PPUSH
46755: LD_INT 30
46757: PUSH
46758: LD_VAR 0 2
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PPUSH
46767: CALL_OW 72
46771: ST_TO_ADDR
// if result then
46772: LD_VAR 0 3
46776: IFFALSE 46792
// result := result [ 1 ] ;
46778: LD_ADDR_VAR 0 3
46782: PUSH
46783: LD_VAR 0 3
46787: PUSH
46788: LD_INT 1
46790: ARRAY
46791: ST_TO_ADDR
// end ; end ;
46792: LD_VAR 0 3
46796: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
46797: LD_INT 0
46799: PPUSH
46800: PPUSH
// if not mc_bases then
46801: LD_EXP 89
46805: NOT
46806: IFFALSE 46810
// exit ;
46808: GO 46855
// if mc_bases [ base ] then
46810: LD_EXP 89
46814: PUSH
46815: LD_VAR 0 1
46819: ARRAY
46820: IFFALSE 46855
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
46822: LD_ADDR_VAR 0 3
46826: PUSH
46827: LD_EXP 89
46831: PUSH
46832: LD_VAR 0 1
46836: ARRAY
46837: PPUSH
46838: LD_INT 30
46840: PUSH
46841: LD_VAR 0 2
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PPUSH
46850: CALL_OW 72
46854: ST_TO_ADDR
// end ;
46855: LD_VAR 0 3
46859: RET
// export function MC_SetTame ( base , area ) ; begin
46860: LD_INT 0
46862: PPUSH
// if not mc_bases or not base then
46863: LD_EXP 89
46867: NOT
46868: PUSH
46869: LD_VAR 0 1
46873: NOT
46874: OR
46875: IFFALSE 46879
// exit ;
46877: GO 46904
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
46879: LD_ADDR_EXP 117
46883: PUSH
46884: LD_EXP 117
46888: PPUSH
46889: LD_VAR 0 1
46893: PPUSH
46894: LD_VAR 0 2
46898: PPUSH
46899: CALL_OW 1
46903: ST_TO_ADDR
// end ;
46904: LD_VAR 0 3
46908: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
46909: LD_INT 0
46911: PPUSH
46912: PPUSH
// if not mc_bases or not base then
46913: LD_EXP 89
46917: NOT
46918: PUSH
46919: LD_VAR 0 1
46923: NOT
46924: OR
46925: IFFALSE 46929
// exit ;
46927: GO 47031
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
46929: LD_ADDR_VAR 0 4
46933: PUSH
46934: LD_EXP 89
46938: PUSH
46939: LD_VAR 0 1
46943: ARRAY
46944: PPUSH
46945: LD_INT 30
46947: PUSH
46948: LD_VAR 0 2
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PPUSH
46957: CALL_OW 72
46961: ST_TO_ADDR
// if not tmp then
46962: LD_VAR 0 4
46966: NOT
46967: IFFALSE 46971
// exit ;
46969: GO 47031
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
46971: LD_ADDR_EXP 121
46975: PUSH
46976: LD_EXP 121
46980: PPUSH
46981: LD_VAR 0 1
46985: PPUSH
46986: LD_EXP 121
46990: PUSH
46991: LD_VAR 0 1
46995: ARRAY
46996: PPUSH
46997: LD_EXP 121
47001: PUSH
47002: LD_VAR 0 1
47006: ARRAY
47007: PUSH
47008: LD_INT 1
47010: PLUS
47011: PPUSH
47012: LD_VAR 0 4
47016: PUSH
47017: LD_INT 1
47019: ARRAY
47020: PPUSH
47021: CALL_OW 2
47025: PPUSH
47026: CALL_OW 1
47030: ST_TO_ADDR
// end ;
47031: LD_VAR 0 3
47035: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
47036: LD_INT 0
47038: PPUSH
47039: PPUSH
// if not mc_bases or not base or not kinds then
47040: LD_EXP 89
47044: NOT
47045: PUSH
47046: LD_VAR 0 1
47050: NOT
47051: OR
47052: PUSH
47053: LD_VAR 0 2
47057: NOT
47058: OR
47059: IFFALSE 47063
// exit ;
47061: GO 47124
// for i in kinds do
47063: LD_ADDR_VAR 0 4
47067: PUSH
47068: LD_VAR 0 2
47072: PUSH
47073: FOR_IN
47074: IFFALSE 47122
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
47076: LD_ADDR_EXP 123
47080: PUSH
47081: LD_EXP 123
47085: PPUSH
47086: LD_VAR 0 1
47090: PUSH
47091: LD_EXP 123
47095: PUSH
47096: LD_VAR 0 1
47100: ARRAY
47101: PUSH
47102: LD_INT 1
47104: PLUS
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PPUSH
47110: LD_VAR 0 4
47114: PPUSH
47115: CALL 52899 0 3
47119: ST_TO_ADDR
47120: GO 47073
47122: POP
47123: POP
// end ;
47124: LD_VAR 0 3
47128: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
47129: LD_INT 0
47131: PPUSH
// if not mc_bases or not base or not areas then
47132: LD_EXP 89
47136: NOT
47137: PUSH
47138: LD_VAR 0 1
47142: NOT
47143: OR
47144: PUSH
47145: LD_VAR 0 2
47149: NOT
47150: OR
47151: IFFALSE 47155
// exit ;
47153: GO 47180
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
47155: LD_ADDR_EXP 107
47159: PUSH
47160: LD_EXP 107
47164: PPUSH
47165: LD_VAR 0 1
47169: PPUSH
47170: LD_VAR 0 2
47174: PPUSH
47175: CALL_OW 1
47179: ST_TO_ADDR
// end ;
47180: LD_VAR 0 3
47184: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
47185: LD_INT 0
47187: PPUSH
// if not mc_bases or not base or not teleports_exit then
47188: LD_EXP 89
47192: NOT
47193: PUSH
47194: LD_VAR 0 1
47198: NOT
47199: OR
47200: PUSH
47201: LD_VAR 0 2
47205: NOT
47206: OR
47207: IFFALSE 47211
// exit ;
47209: GO 47236
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
47211: LD_ADDR_EXP 124
47215: PUSH
47216: LD_EXP 124
47220: PPUSH
47221: LD_VAR 0 1
47225: PPUSH
47226: LD_VAR 0 2
47230: PPUSH
47231: CALL_OW 1
47235: ST_TO_ADDR
// end ;
47236: LD_VAR 0 3
47240: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
47241: LD_INT 0
47243: PPUSH
47244: PPUSH
47245: PPUSH
// if not mc_bases or not base or not ext_list then
47246: LD_EXP 89
47250: NOT
47251: PUSH
47252: LD_VAR 0 1
47256: NOT
47257: OR
47258: PUSH
47259: LD_VAR 0 5
47263: NOT
47264: OR
47265: IFFALSE 47269
// exit ;
47267: GO 47442
// tmp := GetFacExtXYD ( x , y , d ) ;
47269: LD_ADDR_VAR 0 8
47273: PUSH
47274: LD_VAR 0 2
47278: PPUSH
47279: LD_VAR 0 3
47283: PPUSH
47284: LD_VAR 0 4
47288: PPUSH
47289: CALL 81578 0 3
47293: ST_TO_ADDR
// if not tmp then
47294: LD_VAR 0 8
47298: NOT
47299: IFFALSE 47303
// exit ;
47301: GO 47442
// for i in tmp do
47303: LD_ADDR_VAR 0 7
47307: PUSH
47308: LD_VAR 0 8
47312: PUSH
47313: FOR_IN
47314: IFFALSE 47440
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
47316: LD_ADDR_EXP 94
47320: PUSH
47321: LD_EXP 94
47325: PPUSH
47326: LD_VAR 0 1
47330: PPUSH
47331: LD_EXP 94
47335: PUSH
47336: LD_VAR 0 1
47340: ARRAY
47341: PPUSH
47342: LD_EXP 94
47346: PUSH
47347: LD_VAR 0 1
47351: ARRAY
47352: PUSH
47353: LD_INT 1
47355: PLUS
47356: PPUSH
47357: LD_VAR 0 5
47361: PUSH
47362: LD_INT 1
47364: ARRAY
47365: PUSH
47366: LD_VAR 0 7
47370: PUSH
47371: LD_INT 1
47373: ARRAY
47374: PUSH
47375: LD_VAR 0 7
47379: PUSH
47380: LD_INT 2
47382: ARRAY
47383: PUSH
47384: LD_VAR 0 7
47388: PUSH
47389: LD_INT 3
47391: ARRAY
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: PPUSH
47399: CALL_OW 2
47403: PPUSH
47404: CALL_OW 1
47408: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
47409: LD_ADDR_VAR 0 5
47413: PUSH
47414: LD_VAR 0 5
47418: PPUSH
47419: LD_INT 1
47421: PPUSH
47422: CALL_OW 3
47426: ST_TO_ADDR
// if not ext_list then
47427: LD_VAR 0 5
47431: NOT
47432: IFFALSE 47438
// exit ;
47434: POP
47435: POP
47436: GO 47442
// end ;
47438: GO 47313
47440: POP
47441: POP
// end ;
47442: LD_VAR 0 6
47446: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
47447: LD_INT 0
47449: PPUSH
// if not mc_bases or not base or not weapon_list then
47450: LD_EXP 89
47454: NOT
47455: PUSH
47456: LD_VAR 0 1
47460: NOT
47461: OR
47462: PUSH
47463: LD_VAR 0 2
47467: NOT
47468: OR
47469: IFFALSE 47473
// exit ;
47471: GO 47498
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
47473: LD_ADDR_EXP 128
47477: PUSH
47478: LD_EXP 128
47482: PPUSH
47483: LD_VAR 0 1
47487: PPUSH
47488: LD_VAR 0 2
47492: PPUSH
47493: CALL_OW 1
47497: ST_TO_ADDR
// end ;
47498: LD_VAR 0 3
47502: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
47503: LD_INT 0
47505: PPUSH
// if not mc_bases or not base or not tech_list then
47506: LD_EXP 89
47510: NOT
47511: PUSH
47512: LD_VAR 0 1
47516: NOT
47517: OR
47518: PUSH
47519: LD_VAR 0 2
47523: NOT
47524: OR
47525: IFFALSE 47529
// exit ;
47527: GO 47554
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
47529: LD_ADDR_EXP 116
47533: PUSH
47534: LD_EXP 116
47538: PPUSH
47539: LD_VAR 0 1
47543: PPUSH
47544: LD_VAR 0 2
47548: PPUSH
47549: CALL_OW 1
47553: ST_TO_ADDR
// end ;
47554: LD_VAR 0 3
47558: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
47559: LD_INT 0
47561: PPUSH
// if not mc_bases or not parking_area or not base then
47562: LD_EXP 89
47566: NOT
47567: PUSH
47568: LD_VAR 0 2
47572: NOT
47573: OR
47574: PUSH
47575: LD_VAR 0 1
47579: NOT
47580: OR
47581: IFFALSE 47585
// exit ;
47583: GO 47610
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
47585: LD_ADDR_EXP 113
47589: PUSH
47590: LD_EXP 113
47594: PPUSH
47595: LD_VAR 0 1
47599: PPUSH
47600: LD_VAR 0 2
47604: PPUSH
47605: CALL_OW 1
47609: ST_TO_ADDR
// end ;
47610: LD_VAR 0 3
47614: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
47615: LD_INT 0
47617: PPUSH
// if not mc_bases or not base or not scan_area then
47618: LD_EXP 89
47622: NOT
47623: PUSH
47624: LD_VAR 0 1
47628: NOT
47629: OR
47630: PUSH
47631: LD_VAR 0 2
47635: NOT
47636: OR
47637: IFFALSE 47641
// exit ;
47639: GO 47666
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
47641: LD_ADDR_EXP 114
47645: PUSH
47646: LD_EXP 114
47650: PPUSH
47651: LD_VAR 0 1
47655: PPUSH
47656: LD_VAR 0 2
47660: PPUSH
47661: CALL_OW 1
47665: ST_TO_ADDR
// end ;
47666: LD_VAR 0 3
47670: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
47671: LD_INT 0
47673: PPUSH
47674: PPUSH
// if not mc_bases or not base then
47675: LD_EXP 89
47679: NOT
47680: PUSH
47681: LD_VAR 0 1
47685: NOT
47686: OR
47687: IFFALSE 47691
// exit ;
47689: GO 47755
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
47691: LD_ADDR_VAR 0 3
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: LD_INT 2
47701: PUSH
47702: LD_INT 3
47704: PUSH
47705: LD_INT 4
47707: PUSH
47708: LD_INT 11
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
47718: LD_ADDR_EXP 116
47722: PUSH
47723: LD_EXP 116
47727: PPUSH
47728: LD_VAR 0 1
47732: PPUSH
47733: LD_EXP 116
47737: PUSH
47738: LD_VAR 0 1
47742: ARRAY
47743: PUSH
47744: LD_VAR 0 3
47748: DIFF
47749: PPUSH
47750: CALL_OW 1
47754: ST_TO_ADDR
// end ;
47755: LD_VAR 0 2
47759: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
47760: LD_INT 0
47762: PPUSH
// result := mc_vehicles [ base ] ;
47763: LD_ADDR_VAR 0 3
47767: PUSH
47768: LD_EXP 108
47772: PUSH
47773: LD_VAR 0 1
47777: ARRAY
47778: ST_TO_ADDR
// if onlyCombat then
47779: LD_VAR 0 2
47783: IFFALSE 47948
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
47785: LD_ADDR_VAR 0 3
47789: PUSH
47790: LD_VAR 0 3
47794: PUSH
47795: LD_VAR 0 3
47799: PPUSH
47800: LD_INT 2
47802: PUSH
47803: LD_INT 34
47805: PUSH
47806: LD_INT 12
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 34
47815: PUSH
47816: LD_INT 51
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 34
47825: PUSH
47826: LD_EXP 133
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 34
47837: PUSH
47838: LD_INT 32
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 34
47847: PUSH
47848: LD_INT 13
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 34
47857: PUSH
47858: LD_INT 52
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 34
47867: PUSH
47868: LD_INT 14
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 34
47877: PUSH
47878: LD_INT 53
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 34
47887: PUSH
47888: LD_EXP 132
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 34
47899: PUSH
47900: LD_INT 31
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 34
47909: PUSH
47910: LD_INT 48
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 34
47919: PUSH
47920: LD_INT 8
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: PPUSH
47942: CALL_OW 72
47946: DIFF
47947: ST_TO_ADDR
// end ; end_of_file
47948: LD_VAR 0 3
47952: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
47953: LD_INT 0
47955: PPUSH
47956: PPUSH
// if exist_mode then
47957: LD_VAR 0 2
47961: IFFALSE 47986
// unit := CreateCharacter ( prefix & ident ) else
47963: LD_ADDR_VAR 0 5
47967: PUSH
47968: LD_VAR 0 3
47972: PUSH
47973: LD_VAR 0 1
47977: STR
47978: PPUSH
47979: CALL_OW 34
47983: ST_TO_ADDR
47984: GO 48001
// unit := NewCharacter ( ident ) ;
47986: LD_ADDR_VAR 0 5
47990: PUSH
47991: LD_VAR 0 1
47995: PPUSH
47996: CALL_OW 25
48000: ST_TO_ADDR
// result := unit ;
48001: LD_ADDR_VAR 0 4
48005: PUSH
48006: LD_VAR 0 5
48010: ST_TO_ADDR
// end ;
48011: LD_VAR 0 4
48015: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
48016: LD_INT 0
48018: PPUSH
48019: PPUSH
// if not side or not nation then
48020: LD_VAR 0 1
48024: NOT
48025: PUSH
48026: LD_VAR 0 2
48030: NOT
48031: OR
48032: IFFALSE 48036
// exit ;
48034: GO 48800
// case nation of nation_american :
48036: LD_VAR 0 2
48040: PUSH
48041: LD_INT 1
48043: DOUBLE
48044: EQUAL
48045: IFTRUE 48049
48047: GO 48263
48049: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
48050: LD_ADDR_VAR 0 4
48054: PUSH
48055: LD_INT 35
48057: PUSH
48058: LD_INT 45
48060: PUSH
48061: LD_INT 46
48063: PUSH
48064: LD_INT 47
48066: PUSH
48067: LD_INT 82
48069: PUSH
48070: LD_INT 83
48072: PUSH
48073: LD_INT 84
48075: PUSH
48076: LD_INT 85
48078: PUSH
48079: LD_INT 86
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: LD_INT 2
48087: PUSH
48088: LD_INT 6
48090: PUSH
48091: LD_INT 15
48093: PUSH
48094: LD_INT 16
48096: PUSH
48097: LD_INT 7
48099: PUSH
48100: LD_INT 12
48102: PUSH
48103: LD_INT 13
48105: PUSH
48106: LD_INT 10
48108: PUSH
48109: LD_INT 14
48111: PUSH
48112: LD_INT 20
48114: PUSH
48115: LD_INT 21
48117: PUSH
48118: LD_INT 22
48120: PUSH
48121: LD_INT 25
48123: PUSH
48124: LD_INT 32
48126: PUSH
48127: LD_INT 27
48129: PUSH
48130: LD_INT 36
48132: PUSH
48133: LD_INT 69
48135: PUSH
48136: LD_INT 39
48138: PUSH
48139: LD_INT 34
48141: PUSH
48142: LD_INT 40
48144: PUSH
48145: LD_INT 48
48147: PUSH
48148: LD_INT 49
48150: PUSH
48151: LD_INT 50
48153: PUSH
48154: LD_INT 51
48156: PUSH
48157: LD_INT 52
48159: PUSH
48160: LD_INT 53
48162: PUSH
48163: LD_INT 54
48165: PUSH
48166: LD_INT 55
48168: PUSH
48169: LD_INT 56
48171: PUSH
48172: LD_INT 57
48174: PUSH
48175: LD_INT 58
48177: PUSH
48178: LD_INT 59
48180: PUSH
48181: LD_INT 60
48183: PUSH
48184: LD_INT 61
48186: PUSH
48187: LD_INT 62
48189: PUSH
48190: LD_INT 80
48192: PUSH
48193: LD_INT 82
48195: PUSH
48196: LD_INT 83
48198: PUSH
48199: LD_INT 84
48201: PUSH
48202: LD_INT 85
48204: PUSH
48205: LD_INT 86
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: ST_TO_ADDR
48261: GO 48724
48263: LD_INT 2
48265: DOUBLE
48266: EQUAL
48267: IFTRUE 48271
48269: GO 48493
48271: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
48272: LD_ADDR_VAR 0 4
48276: PUSH
48277: LD_INT 35
48279: PUSH
48280: LD_INT 45
48282: PUSH
48283: LD_INT 46
48285: PUSH
48286: LD_INT 47
48288: PUSH
48289: LD_INT 82
48291: PUSH
48292: LD_INT 83
48294: PUSH
48295: LD_INT 84
48297: PUSH
48298: LD_INT 85
48300: PUSH
48301: LD_INT 87
48303: PUSH
48304: LD_INT 70
48306: PUSH
48307: LD_INT 1
48309: PUSH
48310: LD_INT 11
48312: PUSH
48313: LD_INT 3
48315: PUSH
48316: LD_INT 4
48318: PUSH
48319: LD_INT 5
48321: PUSH
48322: LD_INT 6
48324: PUSH
48325: LD_INT 15
48327: PUSH
48328: LD_INT 18
48330: PUSH
48331: LD_INT 7
48333: PUSH
48334: LD_INT 17
48336: PUSH
48337: LD_INT 8
48339: PUSH
48340: LD_INT 20
48342: PUSH
48343: LD_INT 21
48345: PUSH
48346: LD_INT 22
48348: PUSH
48349: LD_INT 72
48351: PUSH
48352: LD_INT 26
48354: PUSH
48355: LD_INT 69
48357: PUSH
48358: LD_INT 39
48360: PUSH
48361: LD_INT 40
48363: PUSH
48364: LD_INT 41
48366: PUSH
48367: LD_INT 42
48369: PUSH
48370: LD_INT 43
48372: PUSH
48373: LD_INT 48
48375: PUSH
48376: LD_INT 49
48378: PUSH
48379: LD_INT 50
48381: PUSH
48382: LD_INT 51
48384: PUSH
48385: LD_INT 52
48387: PUSH
48388: LD_INT 53
48390: PUSH
48391: LD_INT 54
48393: PUSH
48394: LD_INT 55
48396: PUSH
48397: LD_INT 56
48399: PUSH
48400: LD_INT 60
48402: PUSH
48403: LD_INT 61
48405: PUSH
48406: LD_INT 62
48408: PUSH
48409: LD_INT 66
48411: PUSH
48412: LD_INT 67
48414: PUSH
48415: LD_INT 68
48417: PUSH
48418: LD_INT 81
48420: PUSH
48421: LD_INT 82
48423: PUSH
48424: LD_INT 83
48426: PUSH
48427: LD_INT 84
48429: PUSH
48430: LD_INT 85
48432: PUSH
48433: LD_INT 87
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: ST_TO_ADDR
48491: GO 48724
48493: LD_INT 3
48495: DOUBLE
48496: EQUAL
48497: IFTRUE 48501
48499: GO 48723
48501: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
48502: LD_ADDR_VAR 0 4
48506: PUSH
48507: LD_INT 46
48509: PUSH
48510: LD_INT 47
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: LD_INT 2
48518: PUSH
48519: LD_INT 82
48521: PUSH
48522: LD_INT 83
48524: PUSH
48525: LD_INT 84
48527: PUSH
48528: LD_INT 85
48530: PUSH
48531: LD_INT 86
48533: PUSH
48534: LD_INT 11
48536: PUSH
48537: LD_INT 9
48539: PUSH
48540: LD_INT 20
48542: PUSH
48543: LD_INT 19
48545: PUSH
48546: LD_INT 21
48548: PUSH
48549: LD_INT 24
48551: PUSH
48552: LD_INT 22
48554: PUSH
48555: LD_INT 25
48557: PUSH
48558: LD_INT 28
48560: PUSH
48561: LD_INT 29
48563: PUSH
48564: LD_INT 30
48566: PUSH
48567: LD_INT 31
48569: PUSH
48570: LD_INT 37
48572: PUSH
48573: LD_INT 38
48575: PUSH
48576: LD_INT 32
48578: PUSH
48579: LD_INT 27
48581: PUSH
48582: LD_INT 33
48584: PUSH
48585: LD_INT 69
48587: PUSH
48588: LD_INT 39
48590: PUSH
48591: LD_INT 34
48593: PUSH
48594: LD_INT 40
48596: PUSH
48597: LD_INT 71
48599: PUSH
48600: LD_INT 23
48602: PUSH
48603: LD_INT 44
48605: PUSH
48606: LD_INT 48
48608: PUSH
48609: LD_INT 49
48611: PUSH
48612: LD_INT 50
48614: PUSH
48615: LD_INT 51
48617: PUSH
48618: LD_INT 52
48620: PUSH
48621: LD_INT 53
48623: PUSH
48624: LD_INT 54
48626: PUSH
48627: LD_INT 55
48629: PUSH
48630: LD_INT 56
48632: PUSH
48633: LD_INT 57
48635: PUSH
48636: LD_INT 58
48638: PUSH
48639: LD_INT 59
48641: PUSH
48642: LD_INT 63
48644: PUSH
48645: LD_INT 64
48647: PUSH
48648: LD_INT 65
48650: PUSH
48651: LD_INT 82
48653: PUSH
48654: LD_INT 83
48656: PUSH
48657: LD_INT 84
48659: PUSH
48660: LD_INT 85
48662: PUSH
48663: LD_INT 86
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: ST_TO_ADDR
48721: GO 48724
48723: POP
// if state > - 1 and state < 3 then
48724: LD_VAR 0 3
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: GREATER
48733: PUSH
48734: LD_VAR 0 3
48738: PUSH
48739: LD_INT 3
48741: LESS
48742: AND
48743: IFFALSE 48800
// for i in result do
48745: LD_ADDR_VAR 0 5
48749: PUSH
48750: LD_VAR 0 4
48754: PUSH
48755: FOR_IN
48756: IFFALSE 48798
// if GetTech ( i , side ) <> state then
48758: LD_VAR 0 5
48762: PPUSH
48763: LD_VAR 0 1
48767: PPUSH
48768: CALL_OW 321
48772: PUSH
48773: LD_VAR 0 3
48777: NONEQUAL
48778: IFFALSE 48796
// result := result diff i ;
48780: LD_ADDR_VAR 0 4
48784: PUSH
48785: LD_VAR 0 4
48789: PUSH
48790: LD_VAR 0 5
48794: DIFF
48795: ST_TO_ADDR
48796: GO 48755
48798: POP
48799: POP
// end ;
48800: LD_VAR 0 4
48804: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
48805: LD_INT 0
48807: PPUSH
48808: PPUSH
48809: PPUSH
// result := true ;
48810: LD_ADDR_VAR 0 3
48814: PUSH
48815: LD_INT 1
48817: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
48818: LD_ADDR_VAR 0 5
48822: PUSH
48823: LD_VAR 0 2
48827: PPUSH
48828: CALL_OW 480
48832: ST_TO_ADDR
// if not tmp then
48833: LD_VAR 0 5
48837: NOT
48838: IFFALSE 48842
// exit ;
48840: GO 48891
// for i in tmp do
48842: LD_ADDR_VAR 0 4
48846: PUSH
48847: LD_VAR 0 5
48851: PUSH
48852: FOR_IN
48853: IFFALSE 48889
// if GetTech ( i , side ) <> state_researched then
48855: LD_VAR 0 4
48859: PPUSH
48860: LD_VAR 0 1
48864: PPUSH
48865: CALL_OW 321
48869: PUSH
48870: LD_INT 2
48872: NONEQUAL
48873: IFFALSE 48887
// begin result := false ;
48875: LD_ADDR_VAR 0 3
48879: PUSH
48880: LD_INT 0
48882: ST_TO_ADDR
// exit ;
48883: POP
48884: POP
48885: GO 48891
// end ;
48887: GO 48852
48889: POP
48890: POP
// end ;
48891: LD_VAR 0 3
48895: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
48896: LD_INT 0
48898: PPUSH
48899: PPUSH
48900: PPUSH
48901: PPUSH
48902: PPUSH
48903: PPUSH
48904: PPUSH
48905: PPUSH
48906: PPUSH
48907: PPUSH
48908: PPUSH
48909: PPUSH
48910: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
48911: LD_VAR 0 1
48915: NOT
48916: PUSH
48917: LD_VAR 0 1
48921: PPUSH
48922: CALL_OW 257
48926: PUSH
48927: LD_INT 9
48929: NONEQUAL
48930: OR
48931: IFFALSE 48935
// exit ;
48933: GO 49508
// side := GetSide ( unit ) ;
48935: LD_ADDR_VAR 0 9
48939: PUSH
48940: LD_VAR 0 1
48944: PPUSH
48945: CALL_OW 255
48949: ST_TO_ADDR
// tech_space := tech_spacanom ;
48950: LD_ADDR_VAR 0 12
48954: PUSH
48955: LD_INT 29
48957: ST_TO_ADDR
// tech_time := tech_taurad ;
48958: LD_ADDR_VAR 0 13
48962: PUSH
48963: LD_INT 28
48965: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
48966: LD_ADDR_VAR 0 11
48970: PUSH
48971: LD_VAR 0 1
48975: PPUSH
48976: CALL_OW 310
48980: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
48981: LD_VAR 0 11
48985: PPUSH
48986: CALL_OW 247
48990: PUSH
48991: LD_INT 2
48993: EQUAL
48994: IFFALSE 48998
// exit ;
48996: GO 49508
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48998: LD_ADDR_VAR 0 8
49002: PUSH
49003: LD_INT 81
49005: PUSH
49006: LD_VAR 0 9
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 3
49017: PUSH
49018: LD_INT 21
49020: PUSH
49021: LD_INT 3
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PPUSH
49036: CALL_OW 69
49040: ST_TO_ADDR
// if not tmp then
49041: LD_VAR 0 8
49045: NOT
49046: IFFALSE 49050
// exit ;
49048: GO 49508
// if in_unit then
49050: LD_VAR 0 11
49054: IFFALSE 49078
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
49056: LD_ADDR_VAR 0 10
49060: PUSH
49061: LD_VAR 0 8
49065: PPUSH
49066: LD_VAR 0 11
49070: PPUSH
49071: CALL_OW 74
49075: ST_TO_ADDR
49076: GO 49098
// enemy := NearestUnitToUnit ( tmp , unit ) ;
49078: LD_ADDR_VAR 0 10
49082: PUSH
49083: LD_VAR 0 8
49087: PPUSH
49088: LD_VAR 0 1
49092: PPUSH
49093: CALL_OW 74
49097: ST_TO_ADDR
// if not enemy then
49098: LD_VAR 0 10
49102: NOT
49103: IFFALSE 49107
// exit ;
49105: GO 49508
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
49107: LD_VAR 0 11
49111: PUSH
49112: LD_VAR 0 11
49116: PPUSH
49117: LD_VAR 0 10
49121: PPUSH
49122: CALL_OW 296
49126: PUSH
49127: LD_INT 13
49129: GREATER
49130: AND
49131: PUSH
49132: LD_VAR 0 1
49136: PPUSH
49137: LD_VAR 0 10
49141: PPUSH
49142: CALL_OW 296
49146: PUSH
49147: LD_INT 12
49149: GREATER
49150: OR
49151: IFFALSE 49155
// exit ;
49153: GO 49508
// missile := [ 1 ] ;
49155: LD_ADDR_VAR 0 14
49159: PUSH
49160: LD_INT 1
49162: PUSH
49163: EMPTY
49164: LIST
49165: ST_TO_ADDR
// if Researched ( side , tech_space ) then
49166: LD_VAR 0 9
49170: PPUSH
49171: LD_VAR 0 12
49175: PPUSH
49176: CALL_OW 325
49180: IFFALSE 49209
// missile := Insert ( missile , missile + 1 , 2 ) ;
49182: LD_ADDR_VAR 0 14
49186: PUSH
49187: LD_VAR 0 14
49191: PPUSH
49192: LD_VAR 0 14
49196: PUSH
49197: LD_INT 1
49199: PLUS
49200: PPUSH
49201: LD_INT 2
49203: PPUSH
49204: CALL_OW 2
49208: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
49209: LD_VAR 0 9
49213: PPUSH
49214: LD_VAR 0 13
49218: PPUSH
49219: CALL_OW 325
49223: PUSH
49224: LD_VAR 0 10
49228: PPUSH
49229: CALL_OW 255
49233: PPUSH
49234: LD_VAR 0 13
49238: PPUSH
49239: CALL_OW 325
49243: NOT
49244: AND
49245: IFFALSE 49274
// missile := Insert ( missile , missile + 1 , 3 ) ;
49247: LD_ADDR_VAR 0 14
49251: PUSH
49252: LD_VAR 0 14
49256: PPUSH
49257: LD_VAR 0 14
49261: PUSH
49262: LD_INT 1
49264: PLUS
49265: PPUSH
49266: LD_INT 3
49268: PPUSH
49269: CALL_OW 2
49273: ST_TO_ADDR
// if missile < 2 then
49274: LD_VAR 0 14
49278: PUSH
49279: LD_INT 2
49281: LESS
49282: IFFALSE 49286
// exit ;
49284: GO 49508
// x := GetX ( enemy ) ;
49286: LD_ADDR_VAR 0 4
49290: PUSH
49291: LD_VAR 0 10
49295: PPUSH
49296: CALL_OW 250
49300: ST_TO_ADDR
// y := GetY ( enemy ) ;
49301: LD_ADDR_VAR 0 5
49305: PUSH
49306: LD_VAR 0 10
49310: PPUSH
49311: CALL_OW 251
49315: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
49316: LD_ADDR_VAR 0 6
49320: PUSH
49321: LD_VAR 0 4
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PPUSH
49330: LD_INT 1
49332: PPUSH
49333: CALL_OW 12
49337: PLUS
49338: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
49339: LD_ADDR_VAR 0 7
49343: PUSH
49344: LD_VAR 0 5
49348: PUSH
49349: LD_INT 1
49351: NEG
49352: PPUSH
49353: LD_INT 1
49355: PPUSH
49356: CALL_OW 12
49360: PLUS
49361: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49362: LD_VAR 0 6
49366: PPUSH
49367: LD_VAR 0 7
49371: PPUSH
49372: CALL_OW 488
49376: NOT
49377: IFFALSE 49399
// begin _x := x ;
49379: LD_ADDR_VAR 0 6
49383: PUSH
49384: LD_VAR 0 4
49388: ST_TO_ADDR
// _y := y ;
49389: LD_ADDR_VAR 0 7
49393: PUSH
49394: LD_VAR 0 5
49398: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
49399: LD_ADDR_VAR 0 3
49403: PUSH
49404: LD_INT 1
49406: PPUSH
49407: LD_VAR 0 14
49411: PPUSH
49412: CALL_OW 12
49416: ST_TO_ADDR
// case i of 1 :
49417: LD_VAR 0 3
49421: PUSH
49422: LD_INT 1
49424: DOUBLE
49425: EQUAL
49426: IFTRUE 49430
49428: GO 49447
49430: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
49431: LD_VAR 0 1
49435: PPUSH
49436: LD_VAR 0 10
49440: PPUSH
49441: CALL_OW 115
49445: GO 49508
49447: LD_INT 2
49449: DOUBLE
49450: EQUAL
49451: IFTRUE 49455
49453: GO 49477
49455: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
49456: LD_VAR 0 1
49460: PPUSH
49461: LD_VAR 0 6
49465: PPUSH
49466: LD_VAR 0 7
49470: PPUSH
49471: CALL_OW 153
49475: GO 49508
49477: LD_INT 3
49479: DOUBLE
49480: EQUAL
49481: IFTRUE 49485
49483: GO 49507
49485: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
49486: LD_VAR 0 1
49490: PPUSH
49491: LD_VAR 0 6
49495: PPUSH
49496: LD_VAR 0 7
49500: PPUSH
49501: CALL_OW 154
49505: GO 49508
49507: POP
// end ;
49508: LD_VAR 0 2
49512: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
49513: LD_INT 0
49515: PPUSH
49516: PPUSH
49517: PPUSH
49518: PPUSH
49519: PPUSH
49520: PPUSH
// if not unit or not building then
49521: LD_VAR 0 1
49525: NOT
49526: PUSH
49527: LD_VAR 0 2
49531: NOT
49532: OR
49533: IFFALSE 49537
// exit ;
49535: GO 49695
// x := GetX ( building ) ;
49537: LD_ADDR_VAR 0 5
49541: PUSH
49542: LD_VAR 0 2
49546: PPUSH
49547: CALL_OW 250
49551: ST_TO_ADDR
// y := GetY ( building ) ;
49552: LD_ADDR_VAR 0 6
49556: PUSH
49557: LD_VAR 0 2
49561: PPUSH
49562: CALL_OW 251
49566: ST_TO_ADDR
// for i = 0 to 5 do
49567: LD_ADDR_VAR 0 4
49571: PUSH
49572: DOUBLE
49573: LD_INT 0
49575: DEC
49576: ST_TO_ADDR
49577: LD_INT 5
49579: PUSH
49580: FOR_TO
49581: IFFALSE 49693
// begin _x := ShiftX ( x , i , 3 ) ;
49583: LD_ADDR_VAR 0 7
49587: PUSH
49588: LD_VAR 0 5
49592: PPUSH
49593: LD_VAR 0 4
49597: PPUSH
49598: LD_INT 3
49600: PPUSH
49601: CALL_OW 272
49605: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
49606: LD_ADDR_VAR 0 8
49610: PUSH
49611: LD_VAR 0 6
49615: PPUSH
49616: LD_VAR 0 4
49620: PPUSH
49621: LD_INT 3
49623: PPUSH
49624: CALL_OW 273
49628: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49629: LD_VAR 0 7
49633: PPUSH
49634: LD_VAR 0 8
49638: PPUSH
49639: CALL_OW 488
49643: NOT
49644: IFFALSE 49648
// continue ;
49646: GO 49580
// if HexInfo ( _x , _y ) = 0 then
49648: LD_VAR 0 7
49652: PPUSH
49653: LD_VAR 0 8
49657: PPUSH
49658: CALL_OW 428
49662: PUSH
49663: LD_INT 0
49665: EQUAL
49666: IFFALSE 49691
// begin ComMoveXY ( unit , _x , _y ) ;
49668: LD_VAR 0 1
49672: PPUSH
49673: LD_VAR 0 7
49677: PPUSH
49678: LD_VAR 0 8
49682: PPUSH
49683: CALL_OW 111
// exit ;
49687: POP
49688: POP
49689: GO 49695
// end ; end ;
49691: GO 49580
49693: POP
49694: POP
// end ;
49695: LD_VAR 0 3
49699: RET
// export function ScanBase ( side , base_area ) ; begin
49700: LD_INT 0
49702: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
49703: LD_ADDR_VAR 0 3
49707: PUSH
49708: LD_VAR 0 2
49712: PPUSH
49713: LD_INT 81
49715: PUSH
49716: LD_VAR 0 1
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PPUSH
49725: CALL_OW 70
49729: ST_TO_ADDR
// end ;
49730: LD_VAR 0 3
49734: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
49735: LD_INT 0
49737: PPUSH
49738: PPUSH
49739: PPUSH
49740: PPUSH
// result := false ;
49741: LD_ADDR_VAR 0 2
49745: PUSH
49746: LD_INT 0
49748: ST_TO_ADDR
// side := GetSide ( unit ) ;
49749: LD_ADDR_VAR 0 3
49753: PUSH
49754: LD_VAR 0 1
49758: PPUSH
49759: CALL_OW 255
49763: ST_TO_ADDR
// nat := GetNation ( unit ) ;
49764: LD_ADDR_VAR 0 4
49768: PUSH
49769: LD_VAR 0 1
49773: PPUSH
49774: CALL_OW 248
49778: ST_TO_ADDR
// case nat of 1 :
49779: LD_VAR 0 4
49783: PUSH
49784: LD_INT 1
49786: DOUBLE
49787: EQUAL
49788: IFTRUE 49792
49790: GO 49803
49792: POP
// tech := tech_lassight ; 2 :
49793: LD_ADDR_VAR 0 5
49797: PUSH
49798: LD_INT 12
49800: ST_TO_ADDR
49801: GO 49842
49803: LD_INT 2
49805: DOUBLE
49806: EQUAL
49807: IFTRUE 49811
49809: GO 49822
49811: POP
// tech := tech_mortar ; 3 :
49812: LD_ADDR_VAR 0 5
49816: PUSH
49817: LD_INT 41
49819: ST_TO_ADDR
49820: GO 49842
49822: LD_INT 3
49824: DOUBLE
49825: EQUAL
49826: IFTRUE 49830
49828: GO 49841
49830: POP
// tech := tech_bazooka ; end ;
49831: LD_ADDR_VAR 0 5
49835: PUSH
49836: LD_INT 44
49838: ST_TO_ADDR
49839: GO 49842
49841: POP
// if Researched ( side , tech ) then
49842: LD_VAR 0 3
49846: PPUSH
49847: LD_VAR 0 5
49851: PPUSH
49852: CALL_OW 325
49856: IFFALSE 49883
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
49858: LD_ADDR_VAR 0 2
49862: PUSH
49863: LD_INT 5
49865: PUSH
49866: LD_INT 8
49868: PUSH
49869: LD_INT 9
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: LIST
49876: PUSH
49877: LD_VAR 0 4
49881: ARRAY
49882: ST_TO_ADDR
// end ;
49883: LD_VAR 0 2
49887: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
49888: LD_INT 0
49890: PPUSH
49891: PPUSH
49892: PPUSH
// if not mines then
49893: LD_VAR 0 2
49897: NOT
49898: IFFALSE 49902
// exit ;
49900: GO 50046
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
49902: LD_ADDR_VAR 0 5
49906: PUSH
49907: LD_INT 81
49909: PUSH
49910: LD_VAR 0 1
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 3
49921: PUSH
49922: LD_INT 21
49924: PUSH
49925: LD_INT 3
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PPUSH
49940: CALL_OW 69
49944: ST_TO_ADDR
// for i in mines do
49945: LD_ADDR_VAR 0 4
49949: PUSH
49950: LD_VAR 0 2
49954: PUSH
49955: FOR_IN
49956: IFFALSE 50044
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
49958: LD_VAR 0 4
49962: PUSH
49963: LD_INT 1
49965: ARRAY
49966: PPUSH
49967: LD_VAR 0 4
49971: PUSH
49972: LD_INT 2
49974: ARRAY
49975: PPUSH
49976: CALL_OW 458
49980: NOT
49981: IFFALSE 49985
// continue ;
49983: GO 49955
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
49985: LD_VAR 0 4
49989: PUSH
49990: LD_INT 1
49992: ARRAY
49993: PPUSH
49994: LD_VAR 0 4
49998: PUSH
49999: LD_INT 2
50001: ARRAY
50002: PPUSH
50003: CALL_OW 428
50007: PUSH
50008: LD_VAR 0 5
50012: IN
50013: IFFALSE 50042
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
50015: LD_VAR 0 4
50019: PUSH
50020: LD_INT 1
50022: ARRAY
50023: PPUSH
50024: LD_VAR 0 4
50028: PUSH
50029: LD_INT 2
50031: ARRAY
50032: PPUSH
50033: LD_VAR 0 1
50037: PPUSH
50038: CALL_OW 456
// end ;
50042: GO 49955
50044: POP
50045: POP
// end ;
50046: LD_VAR 0 3
50050: RET
// export function Count ( array ) ; var i ; begin
50051: LD_INT 0
50053: PPUSH
50054: PPUSH
// result := 0 ;
50055: LD_ADDR_VAR 0 2
50059: PUSH
50060: LD_INT 0
50062: ST_TO_ADDR
// for i in array do
50063: LD_ADDR_VAR 0 3
50067: PUSH
50068: LD_VAR 0 1
50072: PUSH
50073: FOR_IN
50074: IFFALSE 50098
// if i then
50076: LD_VAR 0 3
50080: IFFALSE 50096
// result := result + 1 ;
50082: LD_ADDR_VAR 0 2
50086: PUSH
50087: LD_VAR 0 2
50091: PUSH
50092: LD_INT 1
50094: PLUS
50095: ST_TO_ADDR
50096: GO 50073
50098: POP
50099: POP
// end ;
50100: LD_VAR 0 2
50104: RET
// export function IsEmpty ( building ) ; begin
50105: LD_INT 0
50107: PPUSH
// if not building then
50108: LD_VAR 0 1
50112: NOT
50113: IFFALSE 50117
// exit ;
50115: GO 50160
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
50117: LD_ADDR_VAR 0 2
50121: PUSH
50122: LD_VAR 0 1
50126: PUSH
50127: LD_INT 22
50129: PUSH
50130: LD_VAR 0 1
50134: PPUSH
50135: CALL_OW 255
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 58
50146: PUSH
50147: EMPTY
50148: LIST
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PPUSH
50154: CALL_OW 69
50158: IN
50159: ST_TO_ADDR
// end ;
50160: LD_VAR 0 2
50164: RET
// export function IsNotFull ( building ) ; begin
50165: LD_INT 0
50167: PPUSH
// if not building then
50168: LD_VAR 0 1
50172: NOT
50173: IFFALSE 50177
// exit ;
50175: GO 50196
// result := UnitsInside ( building ) < 6 ;
50177: LD_ADDR_VAR 0 2
50181: PUSH
50182: LD_VAR 0 1
50186: PPUSH
50187: CALL_OW 313
50191: PUSH
50192: LD_INT 6
50194: LESS
50195: ST_TO_ADDR
// end ;
50196: LD_VAR 0 2
50200: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
50201: LD_INT 0
50203: PPUSH
50204: PPUSH
50205: PPUSH
50206: PPUSH
// tmp := [ ] ;
50207: LD_ADDR_VAR 0 3
50211: PUSH
50212: EMPTY
50213: ST_TO_ADDR
// list := [ ] ;
50214: LD_ADDR_VAR 0 5
50218: PUSH
50219: EMPTY
50220: ST_TO_ADDR
// for i = 16 to 25 do
50221: LD_ADDR_VAR 0 4
50225: PUSH
50226: DOUBLE
50227: LD_INT 16
50229: DEC
50230: ST_TO_ADDR
50231: LD_INT 25
50233: PUSH
50234: FOR_TO
50235: IFFALSE 50308
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
50237: LD_ADDR_VAR 0 3
50241: PUSH
50242: LD_VAR 0 3
50246: PUSH
50247: LD_INT 22
50249: PUSH
50250: LD_VAR 0 1
50254: PPUSH
50255: CALL_OW 255
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 91
50266: PUSH
50267: LD_VAR 0 1
50271: PUSH
50272: LD_INT 6
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 30
50282: PUSH
50283: LD_VAR 0 4
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: LIST
50296: PUSH
50297: EMPTY
50298: LIST
50299: PPUSH
50300: CALL_OW 69
50304: ADD
50305: ST_TO_ADDR
50306: GO 50234
50308: POP
50309: POP
// for i = 1 to tmp do
50310: LD_ADDR_VAR 0 4
50314: PUSH
50315: DOUBLE
50316: LD_INT 1
50318: DEC
50319: ST_TO_ADDR
50320: LD_VAR 0 3
50324: PUSH
50325: FOR_TO
50326: IFFALSE 50414
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
50328: LD_ADDR_VAR 0 5
50332: PUSH
50333: LD_VAR 0 5
50337: PUSH
50338: LD_VAR 0 3
50342: PUSH
50343: LD_VAR 0 4
50347: ARRAY
50348: PPUSH
50349: CALL_OW 266
50353: PUSH
50354: LD_VAR 0 3
50358: PUSH
50359: LD_VAR 0 4
50363: ARRAY
50364: PPUSH
50365: CALL_OW 250
50369: PUSH
50370: LD_VAR 0 3
50374: PUSH
50375: LD_VAR 0 4
50379: ARRAY
50380: PPUSH
50381: CALL_OW 251
50385: PUSH
50386: LD_VAR 0 3
50390: PUSH
50391: LD_VAR 0 4
50395: ARRAY
50396: PPUSH
50397: CALL_OW 254
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: PUSH
50408: EMPTY
50409: LIST
50410: ADD
50411: ST_TO_ADDR
50412: GO 50325
50414: POP
50415: POP
// result := list ;
50416: LD_ADDR_VAR 0 2
50420: PUSH
50421: LD_VAR 0 5
50425: ST_TO_ADDR
// end ;
50426: LD_VAR 0 2
50430: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
50431: LD_INT 0
50433: PPUSH
50434: PPUSH
50435: PPUSH
50436: PPUSH
50437: PPUSH
50438: PPUSH
50439: PPUSH
// if not factory then
50440: LD_VAR 0 1
50444: NOT
50445: IFFALSE 50449
// exit ;
50447: GO 51042
// if control = control_apeman then
50449: LD_VAR 0 4
50453: PUSH
50454: LD_INT 5
50456: EQUAL
50457: IFFALSE 50566
// begin tmp := UnitsInside ( factory ) ;
50459: LD_ADDR_VAR 0 8
50463: PUSH
50464: LD_VAR 0 1
50468: PPUSH
50469: CALL_OW 313
50473: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
50474: LD_VAR 0 8
50478: PPUSH
50479: LD_INT 25
50481: PUSH
50482: LD_INT 12
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PPUSH
50489: CALL_OW 72
50493: NOT
50494: IFFALSE 50504
// control := control_manual ;
50496: LD_ADDR_VAR 0 4
50500: PUSH
50501: LD_INT 1
50503: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
50504: LD_ADDR_VAR 0 8
50508: PUSH
50509: LD_VAR 0 1
50513: PPUSH
50514: CALL 50201 0 1
50518: ST_TO_ADDR
// if tmp then
50519: LD_VAR 0 8
50523: IFFALSE 50566
// begin for i in tmp do
50525: LD_ADDR_VAR 0 7
50529: PUSH
50530: LD_VAR 0 8
50534: PUSH
50535: FOR_IN
50536: IFFALSE 50564
// if i [ 1 ] = b_ext_radio then
50538: LD_VAR 0 7
50542: PUSH
50543: LD_INT 1
50545: ARRAY
50546: PUSH
50547: LD_INT 22
50549: EQUAL
50550: IFFALSE 50562
// begin control := control_remote ;
50552: LD_ADDR_VAR 0 4
50556: PUSH
50557: LD_INT 2
50559: ST_TO_ADDR
// break ;
50560: GO 50564
// end ;
50562: GO 50535
50564: POP
50565: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
50566: LD_VAR 0 1
50570: PPUSH
50571: LD_VAR 0 2
50575: PPUSH
50576: LD_VAR 0 3
50580: PPUSH
50581: LD_VAR 0 4
50585: PPUSH
50586: LD_VAR 0 5
50590: PPUSH
50591: CALL_OW 448
50595: IFFALSE 50630
// begin result := [ chassis , engine , control , weapon ] ;
50597: LD_ADDR_VAR 0 6
50601: PUSH
50602: LD_VAR 0 2
50606: PUSH
50607: LD_VAR 0 3
50611: PUSH
50612: LD_VAR 0 4
50616: PUSH
50617: LD_VAR 0 5
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: ST_TO_ADDR
// exit ;
50628: GO 51042
// end ; _chassis := AvailableChassisList ( factory ) ;
50630: LD_ADDR_VAR 0 9
50634: PUSH
50635: LD_VAR 0 1
50639: PPUSH
50640: CALL_OW 475
50644: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
50645: LD_ADDR_VAR 0 11
50649: PUSH
50650: LD_VAR 0 1
50654: PPUSH
50655: CALL_OW 476
50659: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
50660: LD_ADDR_VAR 0 12
50664: PUSH
50665: LD_VAR 0 1
50669: PPUSH
50670: CALL_OW 477
50674: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
50675: LD_ADDR_VAR 0 10
50679: PUSH
50680: LD_VAR 0 1
50684: PPUSH
50685: CALL_OW 478
50689: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
50690: LD_VAR 0 9
50694: NOT
50695: PUSH
50696: LD_VAR 0 11
50700: NOT
50701: OR
50702: PUSH
50703: LD_VAR 0 12
50707: NOT
50708: OR
50709: PUSH
50710: LD_VAR 0 10
50714: NOT
50715: OR
50716: IFFALSE 50751
// begin result := [ chassis , engine , control , weapon ] ;
50718: LD_ADDR_VAR 0 6
50722: PUSH
50723: LD_VAR 0 2
50727: PUSH
50728: LD_VAR 0 3
50732: PUSH
50733: LD_VAR 0 4
50737: PUSH
50738: LD_VAR 0 5
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: ST_TO_ADDR
// exit ;
50749: GO 51042
// end ; if not chassis in _chassis then
50751: LD_VAR 0 2
50755: PUSH
50756: LD_VAR 0 9
50760: IN
50761: NOT
50762: IFFALSE 50788
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
50764: LD_ADDR_VAR 0 2
50768: PUSH
50769: LD_VAR 0 9
50773: PUSH
50774: LD_INT 1
50776: PPUSH
50777: LD_VAR 0 9
50781: PPUSH
50782: CALL_OW 12
50786: ARRAY
50787: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
50788: LD_VAR 0 2
50792: PPUSH
50793: LD_VAR 0 3
50797: PPUSH
50798: CALL 51047 0 2
50802: NOT
50803: IFFALSE 50862
// repeat engine := _engine [ 1 ] ;
50805: LD_ADDR_VAR 0 3
50809: PUSH
50810: LD_VAR 0 11
50814: PUSH
50815: LD_INT 1
50817: ARRAY
50818: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
50819: LD_ADDR_VAR 0 11
50823: PUSH
50824: LD_VAR 0 11
50828: PPUSH
50829: LD_INT 1
50831: PPUSH
50832: CALL_OW 3
50836: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
50837: LD_VAR 0 2
50841: PPUSH
50842: LD_VAR 0 3
50846: PPUSH
50847: CALL 51047 0 2
50851: PUSH
50852: LD_VAR 0 11
50856: PUSH
50857: EMPTY
50858: EQUAL
50859: OR
50860: IFFALSE 50805
// if not control in _control then
50862: LD_VAR 0 4
50866: PUSH
50867: LD_VAR 0 12
50871: IN
50872: NOT
50873: IFFALSE 50899
// control := _control [ rand ( 1 , _control ) ] ;
50875: LD_ADDR_VAR 0 4
50879: PUSH
50880: LD_VAR 0 12
50884: PUSH
50885: LD_INT 1
50887: PPUSH
50888: LD_VAR 0 12
50892: PPUSH
50893: CALL_OW 12
50897: ARRAY
50898: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
50899: LD_VAR 0 2
50903: PPUSH
50904: LD_VAR 0 5
50908: PPUSH
50909: CALL 51267 0 2
50913: NOT
50914: IFFALSE 50973
// repeat weapon := _weapon [ 1 ] ;
50916: LD_ADDR_VAR 0 5
50920: PUSH
50921: LD_VAR 0 10
50925: PUSH
50926: LD_INT 1
50928: ARRAY
50929: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
50930: LD_ADDR_VAR 0 10
50934: PUSH
50935: LD_VAR 0 10
50939: PPUSH
50940: LD_INT 1
50942: PPUSH
50943: CALL_OW 3
50947: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
50948: LD_VAR 0 2
50952: PPUSH
50953: LD_VAR 0 5
50957: PPUSH
50958: CALL 51267 0 2
50962: PUSH
50963: LD_VAR 0 10
50967: PUSH
50968: EMPTY
50969: EQUAL
50970: OR
50971: IFFALSE 50916
// result := [ ] ;
50973: LD_ADDR_VAR 0 6
50977: PUSH
50978: EMPTY
50979: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
50980: LD_VAR 0 1
50984: PPUSH
50985: LD_VAR 0 2
50989: PPUSH
50990: LD_VAR 0 3
50994: PPUSH
50995: LD_VAR 0 4
50999: PPUSH
51000: LD_VAR 0 5
51004: PPUSH
51005: CALL_OW 448
51009: IFFALSE 51042
// result := [ chassis , engine , control , weapon ] ;
51011: LD_ADDR_VAR 0 6
51015: PUSH
51016: LD_VAR 0 2
51020: PUSH
51021: LD_VAR 0 3
51025: PUSH
51026: LD_VAR 0 4
51030: PUSH
51031: LD_VAR 0 5
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: ST_TO_ADDR
// end ;
51042: LD_VAR 0 6
51046: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
51047: LD_INT 0
51049: PPUSH
// if not chassis or not engine then
51050: LD_VAR 0 1
51054: NOT
51055: PUSH
51056: LD_VAR 0 2
51060: NOT
51061: OR
51062: IFFALSE 51066
// exit ;
51064: GO 51262
// case engine of engine_solar :
51066: LD_VAR 0 2
51070: PUSH
51071: LD_INT 2
51073: DOUBLE
51074: EQUAL
51075: IFTRUE 51079
51077: GO 51117
51079: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
51080: LD_ADDR_VAR 0 3
51084: PUSH
51085: LD_INT 11
51087: PUSH
51088: LD_INT 12
51090: PUSH
51091: LD_INT 13
51093: PUSH
51094: LD_INT 14
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: LD_INT 2
51102: PUSH
51103: LD_INT 3
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: ST_TO_ADDR
51115: GO 51246
51117: LD_INT 1
51119: DOUBLE
51120: EQUAL
51121: IFTRUE 51125
51123: GO 51187
51125: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
51126: LD_ADDR_VAR 0 3
51130: PUSH
51131: LD_INT 11
51133: PUSH
51134: LD_INT 12
51136: PUSH
51137: LD_INT 13
51139: PUSH
51140: LD_INT 14
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: LD_INT 2
51148: PUSH
51149: LD_INT 3
51151: PUSH
51152: LD_INT 4
51154: PUSH
51155: LD_INT 5
51157: PUSH
51158: LD_INT 21
51160: PUSH
51161: LD_INT 23
51163: PUSH
51164: LD_INT 22
51166: PUSH
51167: LD_INT 24
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: ST_TO_ADDR
51185: GO 51246
51187: LD_INT 3
51189: DOUBLE
51190: EQUAL
51191: IFTRUE 51195
51193: GO 51245
51195: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
51196: LD_ADDR_VAR 0 3
51200: PUSH
51201: LD_INT 13
51203: PUSH
51204: LD_INT 14
51206: PUSH
51207: LD_INT 2
51209: PUSH
51210: LD_INT 3
51212: PUSH
51213: LD_INT 4
51215: PUSH
51216: LD_INT 5
51218: PUSH
51219: LD_INT 21
51221: PUSH
51222: LD_INT 22
51224: PUSH
51225: LD_INT 23
51227: PUSH
51228: LD_INT 24
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: ST_TO_ADDR
51243: GO 51246
51245: POP
// result := ( chassis in result ) ;
51246: LD_ADDR_VAR 0 3
51250: PUSH
51251: LD_VAR 0 1
51255: PUSH
51256: LD_VAR 0 3
51260: IN
51261: ST_TO_ADDR
// end ;
51262: LD_VAR 0 3
51266: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
51267: LD_INT 0
51269: PPUSH
// if not chassis or not weapon then
51270: LD_VAR 0 1
51274: NOT
51275: PUSH
51276: LD_VAR 0 2
51280: NOT
51281: OR
51282: IFFALSE 51286
// exit ;
51284: GO 52312
// case weapon of us_machine_gun :
51286: LD_VAR 0 2
51290: PUSH
51291: LD_INT 2
51293: DOUBLE
51294: EQUAL
51295: IFTRUE 51299
51297: GO 51329
51299: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
51300: LD_ADDR_VAR 0 3
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: LD_INT 2
51310: PUSH
51311: LD_INT 3
51313: PUSH
51314: LD_INT 4
51316: PUSH
51317: LD_INT 5
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: ST_TO_ADDR
51327: GO 52296
51329: LD_INT 3
51331: DOUBLE
51332: EQUAL
51333: IFTRUE 51337
51335: GO 51367
51337: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
51338: LD_ADDR_VAR 0 3
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: LD_INT 2
51348: PUSH
51349: LD_INT 3
51351: PUSH
51352: LD_INT 4
51354: PUSH
51355: LD_INT 5
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: ST_TO_ADDR
51365: GO 52296
51367: LD_INT 11
51369: DOUBLE
51370: EQUAL
51371: IFTRUE 51375
51373: GO 51405
51375: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
51376: LD_ADDR_VAR 0 3
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: LD_INT 2
51386: PUSH
51387: LD_INT 3
51389: PUSH
51390: LD_INT 4
51392: PUSH
51393: LD_INT 5
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: ST_TO_ADDR
51403: GO 52296
51405: LD_INT 4
51407: DOUBLE
51408: EQUAL
51409: IFTRUE 51413
51411: GO 51439
51413: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
51414: LD_ADDR_VAR 0 3
51418: PUSH
51419: LD_INT 2
51421: PUSH
51422: LD_INT 3
51424: PUSH
51425: LD_INT 4
51427: PUSH
51428: LD_INT 5
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: ST_TO_ADDR
51437: GO 52296
51439: LD_INT 5
51441: DOUBLE
51442: EQUAL
51443: IFTRUE 51447
51445: GO 51473
51447: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
51448: LD_ADDR_VAR 0 3
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: LD_INT 3
51458: PUSH
51459: LD_INT 4
51461: PUSH
51462: LD_INT 5
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: ST_TO_ADDR
51471: GO 52296
51473: LD_INT 9
51475: DOUBLE
51476: EQUAL
51477: IFTRUE 51481
51479: GO 51507
51481: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
51482: LD_ADDR_VAR 0 3
51486: PUSH
51487: LD_INT 2
51489: PUSH
51490: LD_INT 3
51492: PUSH
51493: LD_INT 4
51495: PUSH
51496: LD_INT 5
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: ST_TO_ADDR
51505: GO 52296
51507: LD_INT 7
51509: DOUBLE
51510: EQUAL
51511: IFTRUE 51515
51513: GO 51541
51515: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
51516: LD_ADDR_VAR 0 3
51520: PUSH
51521: LD_INT 2
51523: PUSH
51524: LD_INT 3
51526: PUSH
51527: LD_INT 4
51529: PUSH
51530: LD_INT 5
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: ST_TO_ADDR
51539: GO 52296
51541: LD_INT 12
51543: DOUBLE
51544: EQUAL
51545: IFTRUE 51549
51547: GO 51575
51549: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
51550: LD_ADDR_VAR 0 3
51554: PUSH
51555: LD_INT 2
51557: PUSH
51558: LD_INT 3
51560: PUSH
51561: LD_INT 4
51563: PUSH
51564: LD_INT 5
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: ST_TO_ADDR
51573: GO 52296
51575: LD_INT 13
51577: DOUBLE
51578: EQUAL
51579: IFTRUE 51583
51581: GO 51609
51583: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
51584: LD_ADDR_VAR 0 3
51588: PUSH
51589: LD_INT 2
51591: PUSH
51592: LD_INT 3
51594: PUSH
51595: LD_INT 4
51597: PUSH
51598: LD_INT 5
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: ST_TO_ADDR
51607: GO 52296
51609: LD_INT 14
51611: DOUBLE
51612: EQUAL
51613: IFTRUE 51617
51615: GO 51635
51617: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
51618: LD_ADDR_VAR 0 3
51622: PUSH
51623: LD_INT 4
51625: PUSH
51626: LD_INT 5
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: ST_TO_ADDR
51633: GO 52296
51635: LD_INT 6
51637: DOUBLE
51638: EQUAL
51639: IFTRUE 51643
51641: GO 51661
51643: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
51644: LD_ADDR_VAR 0 3
51648: PUSH
51649: LD_INT 4
51651: PUSH
51652: LD_INT 5
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: ST_TO_ADDR
51659: GO 52296
51661: LD_INT 10
51663: DOUBLE
51664: EQUAL
51665: IFTRUE 51669
51667: GO 51687
51669: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
51670: LD_ADDR_VAR 0 3
51674: PUSH
51675: LD_INT 4
51677: PUSH
51678: LD_INT 5
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: ST_TO_ADDR
51685: GO 52296
51687: LD_INT 22
51689: DOUBLE
51690: EQUAL
51691: IFTRUE 51695
51693: GO 51721
51695: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
51696: LD_ADDR_VAR 0 3
51700: PUSH
51701: LD_INT 11
51703: PUSH
51704: LD_INT 12
51706: PUSH
51707: LD_INT 13
51709: PUSH
51710: LD_INT 14
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: ST_TO_ADDR
51719: GO 52296
51721: LD_INT 23
51723: DOUBLE
51724: EQUAL
51725: IFTRUE 51729
51727: GO 51755
51729: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
51730: LD_ADDR_VAR 0 3
51734: PUSH
51735: LD_INT 11
51737: PUSH
51738: LD_INT 12
51740: PUSH
51741: LD_INT 13
51743: PUSH
51744: LD_INT 14
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: ST_TO_ADDR
51753: GO 52296
51755: LD_INT 24
51757: DOUBLE
51758: EQUAL
51759: IFTRUE 51763
51761: GO 51789
51763: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
51764: LD_ADDR_VAR 0 3
51768: PUSH
51769: LD_INT 11
51771: PUSH
51772: LD_INT 12
51774: PUSH
51775: LD_INT 13
51777: PUSH
51778: LD_INT 14
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: ST_TO_ADDR
51787: GO 52296
51789: LD_INT 30
51791: DOUBLE
51792: EQUAL
51793: IFTRUE 51797
51795: GO 51823
51797: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
51798: LD_ADDR_VAR 0 3
51802: PUSH
51803: LD_INT 11
51805: PUSH
51806: LD_INT 12
51808: PUSH
51809: LD_INT 13
51811: PUSH
51812: LD_INT 14
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: ST_TO_ADDR
51821: GO 52296
51823: LD_INT 25
51825: DOUBLE
51826: EQUAL
51827: IFTRUE 51831
51829: GO 51849
51831: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
51832: LD_ADDR_VAR 0 3
51836: PUSH
51837: LD_INT 13
51839: PUSH
51840: LD_INT 14
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: ST_TO_ADDR
51847: GO 52296
51849: LD_INT 27
51851: DOUBLE
51852: EQUAL
51853: IFTRUE 51857
51855: GO 51875
51857: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
51858: LD_ADDR_VAR 0 3
51862: PUSH
51863: LD_INT 13
51865: PUSH
51866: LD_INT 14
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: ST_TO_ADDR
51873: GO 52296
51875: LD_INT 28
51877: DOUBLE
51878: EQUAL
51879: IFTRUE 51883
51881: GO 51901
51883: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
51884: LD_ADDR_VAR 0 3
51888: PUSH
51889: LD_INT 13
51891: PUSH
51892: LD_INT 14
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: ST_TO_ADDR
51899: GO 52296
51901: LD_INT 29
51903: DOUBLE
51904: EQUAL
51905: IFTRUE 51909
51907: GO 51927
51909: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
51910: LD_ADDR_VAR 0 3
51914: PUSH
51915: LD_INT 13
51917: PUSH
51918: LD_INT 14
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: ST_TO_ADDR
51925: GO 52296
51927: LD_INT 31
51929: DOUBLE
51930: EQUAL
51931: IFTRUE 51935
51933: GO 51953
51935: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
51936: LD_ADDR_VAR 0 3
51940: PUSH
51941: LD_INT 13
51943: PUSH
51944: LD_INT 14
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: ST_TO_ADDR
51951: GO 52296
51953: LD_INT 26
51955: DOUBLE
51956: EQUAL
51957: IFTRUE 51961
51959: GO 51979
51961: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
51962: LD_ADDR_VAR 0 3
51966: PUSH
51967: LD_INT 13
51969: PUSH
51970: LD_INT 14
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: ST_TO_ADDR
51977: GO 52296
51979: LD_INT 42
51981: DOUBLE
51982: EQUAL
51983: IFTRUE 51987
51985: GO 52013
51987: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
51988: LD_ADDR_VAR 0 3
51992: PUSH
51993: LD_INT 21
51995: PUSH
51996: LD_INT 22
51998: PUSH
51999: LD_INT 23
52001: PUSH
52002: LD_INT 24
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: ST_TO_ADDR
52011: GO 52296
52013: LD_INT 43
52015: DOUBLE
52016: EQUAL
52017: IFTRUE 52021
52019: GO 52047
52021: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
52022: LD_ADDR_VAR 0 3
52026: PUSH
52027: LD_INT 21
52029: PUSH
52030: LD_INT 22
52032: PUSH
52033: LD_INT 23
52035: PUSH
52036: LD_INT 24
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: ST_TO_ADDR
52045: GO 52296
52047: LD_INT 44
52049: DOUBLE
52050: EQUAL
52051: IFTRUE 52055
52053: GO 52081
52055: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
52056: LD_ADDR_VAR 0 3
52060: PUSH
52061: LD_INT 21
52063: PUSH
52064: LD_INT 22
52066: PUSH
52067: LD_INT 23
52069: PUSH
52070: LD_INT 24
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: ST_TO_ADDR
52079: GO 52296
52081: LD_INT 45
52083: DOUBLE
52084: EQUAL
52085: IFTRUE 52089
52087: GO 52115
52089: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
52090: LD_ADDR_VAR 0 3
52094: PUSH
52095: LD_INT 21
52097: PUSH
52098: LD_INT 22
52100: PUSH
52101: LD_INT 23
52103: PUSH
52104: LD_INT 24
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: ST_TO_ADDR
52113: GO 52296
52115: LD_INT 49
52117: DOUBLE
52118: EQUAL
52119: IFTRUE 52123
52121: GO 52149
52123: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
52124: LD_ADDR_VAR 0 3
52128: PUSH
52129: LD_INT 21
52131: PUSH
52132: LD_INT 22
52134: PUSH
52135: LD_INT 23
52137: PUSH
52138: LD_INT 24
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: ST_TO_ADDR
52147: GO 52296
52149: LD_INT 51
52151: DOUBLE
52152: EQUAL
52153: IFTRUE 52157
52155: GO 52183
52157: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
52158: LD_ADDR_VAR 0 3
52162: PUSH
52163: LD_INT 21
52165: PUSH
52166: LD_INT 22
52168: PUSH
52169: LD_INT 23
52171: PUSH
52172: LD_INT 24
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: ST_TO_ADDR
52181: GO 52296
52183: LD_INT 52
52185: DOUBLE
52186: EQUAL
52187: IFTRUE 52191
52189: GO 52217
52191: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
52192: LD_ADDR_VAR 0 3
52196: PUSH
52197: LD_INT 21
52199: PUSH
52200: LD_INT 22
52202: PUSH
52203: LD_INT 23
52205: PUSH
52206: LD_INT 24
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: ST_TO_ADDR
52215: GO 52296
52217: LD_INT 53
52219: DOUBLE
52220: EQUAL
52221: IFTRUE 52225
52223: GO 52243
52225: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
52226: LD_ADDR_VAR 0 3
52230: PUSH
52231: LD_INT 23
52233: PUSH
52234: LD_INT 24
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: ST_TO_ADDR
52241: GO 52296
52243: LD_INT 46
52245: DOUBLE
52246: EQUAL
52247: IFTRUE 52251
52249: GO 52269
52251: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
52252: LD_ADDR_VAR 0 3
52256: PUSH
52257: LD_INT 23
52259: PUSH
52260: LD_INT 24
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: ST_TO_ADDR
52267: GO 52296
52269: LD_INT 47
52271: DOUBLE
52272: EQUAL
52273: IFTRUE 52277
52275: GO 52295
52277: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
52278: LD_ADDR_VAR 0 3
52282: PUSH
52283: LD_INT 23
52285: PUSH
52286: LD_INT 24
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: ST_TO_ADDR
52293: GO 52296
52295: POP
// result := ( chassis in result ) ;
52296: LD_ADDR_VAR 0 3
52300: PUSH
52301: LD_VAR 0 1
52305: PUSH
52306: LD_VAR 0 3
52310: IN
52311: ST_TO_ADDR
// end ;
52312: LD_VAR 0 3
52316: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
52317: LD_INT 0
52319: PPUSH
52320: PPUSH
52321: PPUSH
52322: PPUSH
52323: PPUSH
52324: PPUSH
52325: PPUSH
// result := array ;
52326: LD_ADDR_VAR 0 5
52330: PUSH
52331: LD_VAR 0 1
52335: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
52336: LD_VAR 0 1
52340: NOT
52341: PUSH
52342: LD_VAR 0 2
52346: NOT
52347: OR
52348: PUSH
52349: LD_VAR 0 3
52353: NOT
52354: OR
52355: PUSH
52356: LD_VAR 0 2
52360: PUSH
52361: LD_VAR 0 1
52365: GREATER
52366: OR
52367: PUSH
52368: LD_VAR 0 3
52372: PUSH
52373: LD_VAR 0 1
52377: GREATER
52378: OR
52379: IFFALSE 52383
// exit ;
52381: GO 52679
// if direction then
52383: LD_VAR 0 4
52387: IFFALSE 52451
// begin d := 1 ;
52389: LD_ADDR_VAR 0 9
52393: PUSH
52394: LD_INT 1
52396: ST_TO_ADDR
// if i_from > i_to then
52397: LD_VAR 0 2
52401: PUSH
52402: LD_VAR 0 3
52406: GREATER
52407: IFFALSE 52433
// length := ( array - i_from ) + i_to else
52409: LD_ADDR_VAR 0 11
52413: PUSH
52414: LD_VAR 0 1
52418: PUSH
52419: LD_VAR 0 2
52423: MINUS
52424: PUSH
52425: LD_VAR 0 3
52429: PLUS
52430: ST_TO_ADDR
52431: GO 52449
// length := i_to - i_from ;
52433: LD_ADDR_VAR 0 11
52437: PUSH
52438: LD_VAR 0 3
52442: PUSH
52443: LD_VAR 0 2
52447: MINUS
52448: ST_TO_ADDR
// end else
52449: GO 52512
// begin d := - 1 ;
52451: LD_ADDR_VAR 0 9
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: ST_TO_ADDR
// if i_from > i_to then
52460: LD_VAR 0 2
52464: PUSH
52465: LD_VAR 0 3
52469: GREATER
52470: IFFALSE 52490
// length := i_from - i_to else
52472: LD_ADDR_VAR 0 11
52476: PUSH
52477: LD_VAR 0 2
52481: PUSH
52482: LD_VAR 0 3
52486: MINUS
52487: ST_TO_ADDR
52488: GO 52512
// length := ( array - i_to ) + i_from ;
52490: LD_ADDR_VAR 0 11
52494: PUSH
52495: LD_VAR 0 1
52499: PUSH
52500: LD_VAR 0 3
52504: MINUS
52505: PUSH
52506: LD_VAR 0 2
52510: PLUS
52511: ST_TO_ADDR
// end ; if not length then
52512: LD_VAR 0 11
52516: NOT
52517: IFFALSE 52521
// exit ;
52519: GO 52679
// tmp := array ;
52521: LD_ADDR_VAR 0 10
52525: PUSH
52526: LD_VAR 0 1
52530: ST_TO_ADDR
// for i = 1 to length do
52531: LD_ADDR_VAR 0 6
52535: PUSH
52536: DOUBLE
52537: LD_INT 1
52539: DEC
52540: ST_TO_ADDR
52541: LD_VAR 0 11
52545: PUSH
52546: FOR_TO
52547: IFFALSE 52667
// begin for j = 1 to array do
52549: LD_ADDR_VAR 0 7
52553: PUSH
52554: DOUBLE
52555: LD_INT 1
52557: DEC
52558: ST_TO_ADDR
52559: LD_VAR 0 1
52563: PUSH
52564: FOR_TO
52565: IFFALSE 52653
// begin k := j + d ;
52567: LD_ADDR_VAR 0 8
52571: PUSH
52572: LD_VAR 0 7
52576: PUSH
52577: LD_VAR 0 9
52581: PLUS
52582: ST_TO_ADDR
// if k > array then
52583: LD_VAR 0 8
52587: PUSH
52588: LD_VAR 0 1
52592: GREATER
52593: IFFALSE 52603
// k := 1 ;
52595: LD_ADDR_VAR 0 8
52599: PUSH
52600: LD_INT 1
52602: ST_TO_ADDR
// if not k then
52603: LD_VAR 0 8
52607: NOT
52608: IFFALSE 52620
// k := array ;
52610: LD_ADDR_VAR 0 8
52614: PUSH
52615: LD_VAR 0 1
52619: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
52620: LD_ADDR_VAR 0 10
52624: PUSH
52625: LD_VAR 0 10
52629: PPUSH
52630: LD_VAR 0 8
52634: PPUSH
52635: LD_VAR 0 1
52639: PUSH
52640: LD_VAR 0 7
52644: ARRAY
52645: PPUSH
52646: CALL_OW 1
52650: ST_TO_ADDR
// end ;
52651: GO 52564
52653: POP
52654: POP
// array := tmp ;
52655: LD_ADDR_VAR 0 1
52659: PUSH
52660: LD_VAR 0 10
52664: ST_TO_ADDR
// end ;
52665: GO 52546
52667: POP
52668: POP
// result := array ;
52669: LD_ADDR_VAR 0 5
52673: PUSH
52674: LD_VAR 0 1
52678: ST_TO_ADDR
// end ;
52679: LD_VAR 0 5
52683: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
52684: LD_INT 0
52686: PPUSH
52687: PPUSH
// result := 0 ;
52688: LD_ADDR_VAR 0 3
52692: PUSH
52693: LD_INT 0
52695: ST_TO_ADDR
// if not array or not value in array then
52696: LD_VAR 0 1
52700: NOT
52701: PUSH
52702: LD_VAR 0 2
52706: PUSH
52707: LD_VAR 0 1
52711: IN
52712: NOT
52713: OR
52714: IFFALSE 52718
// exit ;
52716: GO 52772
// for i = 1 to array do
52718: LD_ADDR_VAR 0 4
52722: PUSH
52723: DOUBLE
52724: LD_INT 1
52726: DEC
52727: ST_TO_ADDR
52728: LD_VAR 0 1
52732: PUSH
52733: FOR_TO
52734: IFFALSE 52770
// if value = array [ i ] then
52736: LD_VAR 0 2
52740: PUSH
52741: LD_VAR 0 1
52745: PUSH
52746: LD_VAR 0 4
52750: ARRAY
52751: EQUAL
52752: IFFALSE 52768
// begin result := i ;
52754: LD_ADDR_VAR 0 3
52758: PUSH
52759: LD_VAR 0 4
52763: ST_TO_ADDR
// exit ;
52764: POP
52765: POP
52766: GO 52772
// end ;
52768: GO 52733
52770: POP
52771: POP
// end ;
52772: LD_VAR 0 3
52776: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
52777: LD_INT 0
52779: PPUSH
// vc_chassis := chassis ;
52780: LD_ADDR_OWVAR 37
52784: PUSH
52785: LD_VAR 0 1
52789: ST_TO_ADDR
// vc_engine := engine ;
52790: LD_ADDR_OWVAR 39
52794: PUSH
52795: LD_VAR 0 2
52799: ST_TO_ADDR
// vc_control := control ;
52800: LD_ADDR_OWVAR 38
52804: PUSH
52805: LD_VAR 0 3
52809: ST_TO_ADDR
// vc_weapon := weapon ;
52810: LD_ADDR_OWVAR 40
52814: PUSH
52815: LD_VAR 0 4
52819: ST_TO_ADDR
// vc_fuel_battery := fuel ;
52820: LD_ADDR_OWVAR 41
52824: PUSH
52825: LD_VAR 0 5
52829: ST_TO_ADDR
// end ;
52830: LD_VAR 0 6
52834: RET
// export function WantPlant ( unit ) ; var task ; begin
52835: LD_INT 0
52837: PPUSH
52838: PPUSH
// result := false ;
52839: LD_ADDR_VAR 0 2
52843: PUSH
52844: LD_INT 0
52846: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
52847: LD_ADDR_VAR 0 3
52851: PUSH
52852: LD_VAR 0 1
52856: PPUSH
52857: CALL_OW 437
52861: ST_TO_ADDR
// if task then
52862: LD_VAR 0 3
52866: IFFALSE 52894
// if task [ 1 ] [ 1 ] = p then
52868: LD_VAR 0 3
52872: PUSH
52873: LD_INT 1
52875: ARRAY
52876: PUSH
52877: LD_INT 1
52879: ARRAY
52880: PUSH
52881: LD_STRING p
52883: EQUAL
52884: IFFALSE 52894
// result := true ;
52886: LD_ADDR_VAR 0 2
52890: PUSH
52891: LD_INT 1
52893: ST_TO_ADDR
// end ;
52894: LD_VAR 0 2
52898: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
52899: LD_INT 0
52901: PPUSH
52902: PPUSH
52903: PPUSH
52904: PPUSH
// if pos < 1 then
52905: LD_VAR 0 2
52909: PUSH
52910: LD_INT 1
52912: LESS
52913: IFFALSE 52917
// exit ;
52915: GO 53220
// if pos = 1 then
52917: LD_VAR 0 2
52921: PUSH
52922: LD_INT 1
52924: EQUAL
52925: IFFALSE 52958
// result := Replace ( arr , pos [ 1 ] , value ) else
52927: LD_ADDR_VAR 0 4
52931: PUSH
52932: LD_VAR 0 1
52936: PPUSH
52937: LD_VAR 0 2
52941: PUSH
52942: LD_INT 1
52944: ARRAY
52945: PPUSH
52946: LD_VAR 0 3
52950: PPUSH
52951: CALL_OW 1
52955: ST_TO_ADDR
52956: GO 53220
// begin tmp := arr ;
52958: LD_ADDR_VAR 0 6
52962: PUSH
52963: LD_VAR 0 1
52967: ST_TO_ADDR
// s_arr := [ tmp ] ;
52968: LD_ADDR_VAR 0 7
52972: PUSH
52973: LD_VAR 0 6
52977: PUSH
52978: EMPTY
52979: LIST
52980: ST_TO_ADDR
// for i = 1 to pos - 1 do
52981: LD_ADDR_VAR 0 5
52985: PUSH
52986: DOUBLE
52987: LD_INT 1
52989: DEC
52990: ST_TO_ADDR
52991: LD_VAR 0 2
52995: PUSH
52996: LD_INT 1
52998: MINUS
52999: PUSH
53000: FOR_TO
53001: IFFALSE 53046
// begin tmp := tmp [ pos [ i ] ] ;
53003: LD_ADDR_VAR 0 6
53007: PUSH
53008: LD_VAR 0 6
53012: PUSH
53013: LD_VAR 0 2
53017: PUSH
53018: LD_VAR 0 5
53022: ARRAY
53023: ARRAY
53024: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
53025: LD_ADDR_VAR 0 7
53029: PUSH
53030: LD_VAR 0 7
53034: PUSH
53035: LD_VAR 0 6
53039: PUSH
53040: EMPTY
53041: LIST
53042: ADD
53043: ST_TO_ADDR
// end ;
53044: GO 53000
53046: POP
53047: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
53048: LD_ADDR_VAR 0 6
53052: PUSH
53053: LD_VAR 0 6
53057: PPUSH
53058: LD_VAR 0 2
53062: PUSH
53063: LD_VAR 0 2
53067: ARRAY
53068: PPUSH
53069: LD_VAR 0 3
53073: PPUSH
53074: CALL_OW 1
53078: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
53079: LD_ADDR_VAR 0 7
53083: PUSH
53084: LD_VAR 0 7
53088: PPUSH
53089: LD_VAR 0 7
53093: PPUSH
53094: LD_VAR 0 6
53098: PPUSH
53099: CALL_OW 1
53103: ST_TO_ADDR
// for i = s_arr downto 2 do
53104: LD_ADDR_VAR 0 5
53108: PUSH
53109: DOUBLE
53110: LD_VAR 0 7
53114: INC
53115: ST_TO_ADDR
53116: LD_INT 2
53118: PUSH
53119: FOR_DOWNTO
53120: IFFALSE 53204
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
53122: LD_ADDR_VAR 0 6
53126: PUSH
53127: LD_VAR 0 7
53131: PUSH
53132: LD_VAR 0 5
53136: PUSH
53137: LD_INT 1
53139: MINUS
53140: ARRAY
53141: PPUSH
53142: LD_VAR 0 2
53146: PUSH
53147: LD_VAR 0 5
53151: PUSH
53152: LD_INT 1
53154: MINUS
53155: ARRAY
53156: PPUSH
53157: LD_VAR 0 7
53161: PUSH
53162: LD_VAR 0 5
53166: ARRAY
53167: PPUSH
53168: CALL_OW 1
53172: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
53173: LD_ADDR_VAR 0 7
53177: PUSH
53178: LD_VAR 0 7
53182: PPUSH
53183: LD_VAR 0 5
53187: PUSH
53188: LD_INT 1
53190: MINUS
53191: PPUSH
53192: LD_VAR 0 6
53196: PPUSH
53197: CALL_OW 1
53201: ST_TO_ADDR
// end ;
53202: GO 53119
53204: POP
53205: POP
// result := s_arr [ 1 ] ;
53206: LD_ADDR_VAR 0 4
53210: PUSH
53211: LD_VAR 0 7
53215: PUSH
53216: LD_INT 1
53218: ARRAY
53219: ST_TO_ADDR
// end ; end ;
53220: LD_VAR 0 4
53224: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
53225: LD_INT 0
53227: PPUSH
53228: PPUSH
// if not list then
53229: LD_VAR 0 1
53233: NOT
53234: IFFALSE 53238
// exit ;
53236: GO 53329
// i := list [ pos1 ] ;
53238: LD_ADDR_VAR 0 5
53242: PUSH
53243: LD_VAR 0 1
53247: PUSH
53248: LD_VAR 0 2
53252: ARRAY
53253: ST_TO_ADDR
// if not i then
53254: LD_VAR 0 5
53258: NOT
53259: IFFALSE 53263
// exit ;
53261: GO 53329
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
53263: LD_ADDR_VAR 0 1
53267: PUSH
53268: LD_VAR 0 1
53272: PPUSH
53273: LD_VAR 0 2
53277: PPUSH
53278: LD_VAR 0 1
53282: PUSH
53283: LD_VAR 0 3
53287: ARRAY
53288: PPUSH
53289: CALL_OW 1
53293: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
53294: LD_ADDR_VAR 0 1
53298: PUSH
53299: LD_VAR 0 1
53303: PPUSH
53304: LD_VAR 0 3
53308: PPUSH
53309: LD_VAR 0 5
53313: PPUSH
53314: CALL_OW 1
53318: ST_TO_ADDR
// result := list ;
53319: LD_ADDR_VAR 0 4
53323: PUSH
53324: LD_VAR 0 1
53328: ST_TO_ADDR
// end ;
53329: LD_VAR 0 4
53333: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
53334: LD_INT 0
53336: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
53337: LD_ADDR_VAR 0 5
53341: PUSH
53342: LD_VAR 0 1
53346: PPUSH
53347: CALL_OW 250
53351: PPUSH
53352: LD_VAR 0 1
53356: PPUSH
53357: CALL_OW 251
53361: PPUSH
53362: LD_VAR 0 2
53366: PPUSH
53367: LD_VAR 0 3
53371: PPUSH
53372: LD_VAR 0 4
53376: PPUSH
53377: CALL 53387 0 5
53381: ST_TO_ADDR
// end ;
53382: LD_VAR 0 5
53386: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
53387: LD_INT 0
53389: PPUSH
53390: PPUSH
53391: PPUSH
53392: PPUSH
// if not list then
53393: LD_VAR 0 3
53397: NOT
53398: IFFALSE 53402
// exit ;
53400: GO 53790
// result := [ ] ;
53402: LD_ADDR_VAR 0 6
53406: PUSH
53407: EMPTY
53408: ST_TO_ADDR
// for i in list do
53409: LD_ADDR_VAR 0 7
53413: PUSH
53414: LD_VAR 0 3
53418: PUSH
53419: FOR_IN
53420: IFFALSE 53622
// begin tmp := GetDistUnitXY ( i , x , y ) ;
53422: LD_ADDR_VAR 0 9
53426: PUSH
53427: LD_VAR 0 7
53431: PPUSH
53432: LD_VAR 0 1
53436: PPUSH
53437: LD_VAR 0 2
53441: PPUSH
53442: CALL_OW 297
53446: ST_TO_ADDR
// if not result then
53447: LD_VAR 0 6
53451: NOT
53452: IFFALSE 53478
// result := [ [ i , tmp ] ] else
53454: LD_ADDR_VAR 0 6
53458: PUSH
53459: LD_VAR 0 7
53463: PUSH
53464: LD_VAR 0 9
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: EMPTY
53474: LIST
53475: ST_TO_ADDR
53476: GO 53620
// begin if result [ result ] [ 2 ] < tmp then
53478: LD_VAR 0 6
53482: PUSH
53483: LD_VAR 0 6
53487: ARRAY
53488: PUSH
53489: LD_INT 2
53491: ARRAY
53492: PUSH
53493: LD_VAR 0 9
53497: LESS
53498: IFFALSE 53540
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
53500: LD_ADDR_VAR 0 6
53504: PUSH
53505: LD_VAR 0 6
53509: PPUSH
53510: LD_VAR 0 6
53514: PUSH
53515: LD_INT 1
53517: PLUS
53518: PPUSH
53519: LD_VAR 0 7
53523: PUSH
53524: LD_VAR 0 9
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PPUSH
53533: CALL_OW 2
53537: ST_TO_ADDR
53538: GO 53620
// for j = 1 to result do
53540: LD_ADDR_VAR 0 8
53544: PUSH
53545: DOUBLE
53546: LD_INT 1
53548: DEC
53549: ST_TO_ADDR
53550: LD_VAR 0 6
53554: PUSH
53555: FOR_TO
53556: IFFALSE 53618
// begin if tmp < result [ j ] [ 2 ] then
53558: LD_VAR 0 9
53562: PUSH
53563: LD_VAR 0 6
53567: PUSH
53568: LD_VAR 0 8
53572: ARRAY
53573: PUSH
53574: LD_INT 2
53576: ARRAY
53577: LESS
53578: IFFALSE 53616
// begin result := Insert ( result , j , [ i , tmp ] ) ;
53580: LD_ADDR_VAR 0 6
53584: PUSH
53585: LD_VAR 0 6
53589: PPUSH
53590: LD_VAR 0 8
53594: PPUSH
53595: LD_VAR 0 7
53599: PUSH
53600: LD_VAR 0 9
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PPUSH
53609: CALL_OW 2
53613: ST_TO_ADDR
// break ;
53614: GO 53618
// end ; end ;
53616: GO 53555
53618: POP
53619: POP
// end ; end ;
53620: GO 53419
53622: POP
53623: POP
// if result and not asc then
53624: LD_VAR 0 6
53628: PUSH
53629: LD_VAR 0 4
53633: NOT
53634: AND
53635: IFFALSE 53710
// begin tmp := result ;
53637: LD_ADDR_VAR 0 9
53641: PUSH
53642: LD_VAR 0 6
53646: ST_TO_ADDR
// for i = tmp downto 1 do
53647: LD_ADDR_VAR 0 7
53651: PUSH
53652: DOUBLE
53653: LD_VAR 0 9
53657: INC
53658: ST_TO_ADDR
53659: LD_INT 1
53661: PUSH
53662: FOR_DOWNTO
53663: IFFALSE 53708
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
53665: LD_ADDR_VAR 0 6
53669: PUSH
53670: LD_VAR 0 6
53674: PPUSH
53675: LD_VAR 0 9
53679: PUSH
53680: LD_VAR 0 7
53684: MINUS
53685: PUSH
53686: LD_INT 1
53688: PLUS
53689: PPUSH
53690: LD_VAR 0 9
53694: PUSH
53695: LD_VAR 0 7
53699: ARRAY
53700: PPUSH
53701: CALL_OW 1
53705: ST_TO_ADDR
53706: GO 53662
53708: POP
53709: POP
// end ; tmp := [ ] ;
53710: LD_ADDR_VAR 0 9
53714: PUSH
53715: EMPTY
53716: ST_TO_ADDR
// if mode then
53717: LD_VAR 0 5
53721: IFFALSE 53790
// begin for i = 1 to result do
53723: LD_ADDR_VAR 0 7
53727: PUSH
53728: DOUBLE
53729: LD_INT 1
53731: DEC
53732: ST_TO_ADDR
53733: LD_VAR 0 6
53737: PUSH
53738: FOR_TO
53739: IFFALSE 53778
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
53741: LD_ADDR_VAR 0 9
53745: PUSH
53746: LD_VAR 0 9
53750: PPUSH
53751: LD_VAR 0 7
53755: PPUSH
53756: LD_VAR 0 6
53760: PUSH
53761: LD_VAR 0 7
53765: ARRAY
53766: PUSH
53767: LD_INT 1
53769: ARRAY
53770: PPUSH
53771: CALL_OW 1
53775: ST_TO_ADDR
53776: GO 53738
53778: POP
53779: POP
// result := tmp ;
53780: LD_ADDR_VAR 0 6
53784: PUSH
53785: LD_VAR 0 9
53789: ST_TO_ADDR
// end ; end ;
53790: LD_VAR 0 6
53794: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
53795: LD_INT 0
53797: PPUSH
53798: PPUSH
53799: PPUSH
53800: PPUSH
53801: PPUSH
53802: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
53803: LD_ADDR_VAR 0 5
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: LD_INT 0
53816: PUSH
53817: EMPTY
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: ST_TO_ADDR
// if not x or not y then
53825: LD_VAR 0 2
53829: NOT
53830: PUSH
53831: LD_VAR 0 3
53835: NOT
53836: OR
53837: IFFALSE 53841
// exit ;
53839: GO 55487
// if not range then
53841: LD_VAR 0 4
53845: NOT
53846: IFFALSE 53856
// range := 10 ;
53848: LD_ADDR_VAR 0 4
53852: PUSH
53853: LD_INT 10
53855: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
53856: LD_ADDR_VAR 0 8
53860: PUSH
53861: LD_INT 81
53863: PUSH
53864: LD_VAR 0 1
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 92
53875: PUSH
53876: LD_VAR 0 2
53880: PUSH
53881: LD_VAR 0 3
53885: PUSH
53886: LD_VAR 0 4
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 3
53899: PUSH
53900: LD_INT 21
53902: PUSH
53903: LD_INT 3
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: LIST
53918: PPUSH
53919: CALL_OW 69
53923: ST_TO_ADDR
// if not tmp then
53924: LD_VAR 0 8
53928: NOT
53929: IFFALSE 53933
// exit ;
53931: GO 55487
// for i in tmp do
53933: LD_ADDR_VAR 0 6
53937: PUSH
53938: LD_VAR 0 8
53942: PUSH
53943: FOR_IN
53944: IFFALSE 55462
// begin points := [ 0 , 0 , 0 ] ;
53946: LD_ADDR_VAR 0 9
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: LIST
53964: ST_TO_ADDR
// bpoints := 1 ;
53965: LD_ADDR_VAR 0 10
53969: PUSH
53970: LD_INT 1
53972: ST_TO_ADDR
// case GetType ( i ) of unit_human :
53973: LD_VAR 0 6
53977: PPUSH
53978: CALL_OW 247
53982: PUSH
53983: LD_INT 1
53985: DOUBLE
53986: EQUAL
53987: IFTRUE 53991
53989: GO 54569
53991: POP
// begin if GetClass ( i ) = 1 then
53992: LD_VAR 0 6
53996: PPUSH
53997: CALL_OW 257
54001: PUSH
54002: LD_INT 1
54004: EQUAL
54005: IFFALSE 54026
// points := [ 10 , 5 , 3 ] ;
54007: LD_ADDR_VAR 0 9
54011: PUSH
54012: LD_INT 10
54014: PUSH
54015: LD_INT 5
54017: PUSH
54018: LD_INT 3
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: LIST
54025: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
54026: LD_VAR 0 6
54030: PPUSH
54031: CALL_OW 257
54035: PUSH
54036: LD_INT 2
54038: PUSH
54039: LD_INT 3
54041: PUSH
54042: LD_INT 4
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: LIST
54049: IN
54050: IFFALSE 54071
// points := [ 3 , 2 , 1 ] ;
54052: LD_ADDR_VAR 0 9
54056: PUSH
54057: LD_INT 3
54059: PUSH
54060: LD_INT 2
54062: PUSH
54063: LD_INT 1
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: LIST
54070: ST_TO_ADDR
// if GetClass ( i ) = 5 then
54071: LD_VAR 0 6
54075: PPUSH
54076: CALL_OW 257
54080: PUSH
54081: LD_INT 5
54083: EQUAL
54084: IFFALSE 54105
// points := [ 130 , 5 , 2 ] ;
54086: LD_ADDR_VAR 0 9
54090: PUSH
54091: LD_INT 130
54093: PUSH
54094: LD_INT 5
54096: PUSH
54097: LD_INT 2
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: LIST
54104: ST_TO_ADDR
// if GetClass ( i ) = 8 then
54105: LD_VAR 0 6
54109: PPUSH
54110: CALL_OW 257
54114: PUSH
54115: LD_INT 8
54117: EQUAL
54118: IFFALSE 54139
// points := [ 35 , 35 , 30 ] ;
54120: LD_ADDR_VAR 0 9
54124: PUSH
54125: LD_INT 35
54127: PUSH
54128: LD_INT 35
54130: PUSH
54131: LD_INT 30
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: LIST
54138: ST_TO_ADDR
// if GetClass ( i ) = 9 then
54139: LD_VAR 0 6
54143: PPUSH
54144: CALL_OW 257
54148: PUSH
54149: LD_INT 9
54151: EQUAL
54152: IFFALSE 54173
// points := [ 20 , 55 , 40 ] ;
54154: LD_ADDR_VAR 0 9
54158: PUSH
54159: LD_INT 20
54161: PUSH
54162: LD_INT 55
54164: PUSH
54165: LD_INT 40
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: LIST
54172: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
54173: LD_VAR 0 6
54177: PPUSH
54178: CALL_OW 257
54182: PUSH
54183: LD_INT 12
54185: PUSH
54186: LD_INT 16
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: IN
54193: IFFALSE 54214
// points := [ 5 , 3 , 2 ] ;
54195: LD_ADDR_VAR 0 9
54199: PUSH
54200: LD_INT 5
54202: PUSH
54203: LD_INT 3
54205: PUSH
54206: LD_INT 2
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: LIST
54213: ST_TO_ADDR
// if GetClass ( i ) = 17 then
54214: LD_VAR 0 6
54218: PPUSH
54219: CALL_OW 257
54223: PUSH
54224: LD_INT 17
54226: EQUAL
54227: IFFALSE 54248
// points := [ 100 , 50 , 75 ] ;
54229: LD_ADDR_VAR 0 9
54233: PUSH
54234: LD_INT 100
54236: PUSH
54237: LD_INT 50
54239: PUSH
54240: LD_INT 75
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: LIST
54247: ST_TO_ADDR
// if GetClass ( i ) = 15 then
54248: LD_VAR 0 6
54252: PPUSH
54253: CALL_OW 257
54257: PUSH
54258: LD_INT 15
54260: EQUAL
54261: IFFALSE 54282
// points := [ 10 , 5 , 3 ] ;
54263: LD_ADDR_VAR 0 9
54267: PUSH
54268: LD_INT 10
54270: PUSH
54271: LD_INT 5
54273: PUSH
54274: LD_INT 3
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: LIST
54281: ST_TO_ADDR
// if GetClass ( i ) = 14 then
54282: LD_VAR 0 6
54286: PPUSH
54287: CALL_OW 257
54291: PUSH
54292: LD_INT 14
54294: EQUAL
54295: IFFALSE 54316
// points := [ 10 , 0 , 0 ] ;
54297: LD_ADDR_VAR 0 9
54301: PUSH
54302: LD_INT 10
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: LIST
54315: ST_TO_ADDR
// if GetClass ( i ) = 11 then
54316: LD_VAR 0 6
54320: PPUSH
54321: CALL_OW 257
54325: PUSH
54326: LD_INT 11
54328: EQUAL
54329: IFFALSE 54350
// points := [ 30 , 10 , 5 ] ;
54331: LD_ADDR_VAR 0 9
54335: PUSH
54336: LD_INT 30
54338: PUSH
54339: LD_INT 10
54341: PUSH
54342: LD_INT 5
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: LIST
54349: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
54350: LD_VAR 0 1
54354: PPUSH
54355: LD_INT 5
54357: PPUSH
54358: CALL_OW 321
54362: PUSH
54363: LD_INT 2
54365: EQUAL
54366: IFFALSE 54383
// bpoints := bpoints * 1.8 ;
54368: LD_ADDR_VAR 0 10
54372: PUSH
54373: LD_VAR 0 10
54377: PUSH
54378: LD_REAL  1.80000000000000E+0000
54381: MUL
54382: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
54383: LD_VAR 0 6
54387: PPUSH
54388: CALL_OW 257
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: LD_INT 2
54398: PUSH
54399: LD_INT 3
54401: PUSH
54402: LD_INT 4
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: IN
54411: PUSH
54412: LD_VAR 0 1
54416: PPUSH
54417: LD_INT 51
54419: PPUSH
54420: CALL_OW 321
54424: PUSH
54425: LD_INT 2
54427: EQUAL
54428: AND
54429: IFFALSE 54446
// bpoints := bpoints * 1.2 ;
54431: LD_ADDR_VAR 0 10
54435: PUSH
54436: LD_VAR 0 10
54440: PUSH
54441: LD_REAL  1.20000000000000E+0000
54444: MUL
54445: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
54446: LD_VAR 0 6
54450: PPUSH
54451: CALL_OW 257
54455: PUSH
54456: LD_INT 5
54458: PUSH
54459: LD_INT 7
54461: PUSH
54462: LD_INT 9
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: LIST
54469: IN
54470: PUSH
54471: LD_VAR 0 1
54475: PPUSH
54476: LD_INT 52
54478: PPUSH
54479: CALL_OW 321
54483: PUSH
54484: LD_INT 2
54486: EQUAL
54487: AND
54488: IFFALSE 54505
// bpoints := bpoints * 1.5 ;
54490: LD_ADDR_VAR 0 10
54494: PUSH
54495: LD_VAR 0 10
54499: PUSH
54500: LD_REAL  1.50000000000000E+0000
54503: MUL
54504: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
54505: LD_VAR 0 1
54509: PPUSH
54510: LD_INT 66
54512: PPUSH
54513: CALL_OW 321
54517: PUSH
54518: LD_INT 2
54520: EQUAL
54521: IFFALSE 54538
// bpoints := bpoints * 1.1 ;
54523: LD_ADDR_VAR 0 10
54527: PUSH
54528: LD_VAR 0 10
54532: PUSH
54533: LD_REAL  1.10000000000000E+0000
54536: MUL
54537: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
54538: LD_ADDR_VAR 0 10
54542: PUSH
54543: LD_VAR 0 10
54547: PUSH
54548: LD_VAR 0 6
54552: PPUSH
54553: LD_INT 1
54555: PPUSH
54556: CALL_OW 259
54560: PUSH
54561: LD_REAL  1.15000000000000E+0000
54564: MUL
54565: MUL
54566: ST_TO_ADDR
// end ; unit_vehicle :
54567: GO 55391
54569: LD_INT 2
54571: DOUBLE
54572: EQUAL
54573: IFTRUE 54577
54575: GO 55379
54577: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
54578: LD_VAR 0 6
54582: PPUSH
54583: CALL_OW 264
54587: PUSH
54588: LD_INT 2
54590: PUSH
54591: LD_INT 42
54593: PUSH
54594: LD_INT 24
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: LIST
54601: IN
54602: IFFALSE 54623
// points := [ 25 , 5 , 3 ] ;
54604: LD_ADDR_VAR 0 9
54608: PUSH
54609: LD_INT 25
54611: PUSH
54612: LD_INT 5
54614: PUSH
54615: LD_INT 3
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: LIST
54622: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
54623: LD_VAR 0 6
54627: PPUSH
54628: CALL_OW 264
54632: PUSH
54633: LD_INT 4
54635: PUSH
54636: LD_INT 43
54638: PUSH
54639: LD_INT 25
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: LIST
54646: IN
54647: IFFALSE 54668
// points := [ 40 , 15 , 5 ] ;
54649: LD_ADDR_VAR 0 9
54653: PUSH
54654: LD_INT 40
54656: PUSH
54657: LD_INT 15
54659: PUSH
54660: LD_INT 5
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: LIST
54667: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
54668: LD_VAR 0 6
54672: PPUSH
54673: CALL_OW 264
54677: PUSH
54678: LD_INT 3
54680: PUSH
54681: LD_INT 23
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: IN
54688: IFFALSE 54709
// points := [ 7 , 25 , 8 ] ;
54690: LD_ADDR_VAR 0 9
54694: PUSH
54695: LD_INT 7
54697: PUSH
54698: LD_INT 25
54700: PUSH
54701: LD_INT 8
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: LIST
54708: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
54709: LD_VAR 0 6
54713: PPUSH
54714: CALL_OW 264
54718: PUSH
54719: LD_INT 5
54721: PUSH
54722: LD_INT 27
54724: PUSH
54725: LD_INT 44
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: LIST
54732: IN
54733: IFFALSE 54754
// points := [ 14 , 50 , 16 ] ;
54735: LD_ADDR_VAR 0 9
54739: PUSH
54740: LD_INT 14
54742: PUSH
54743: LD_INT 50
54745: PUSH
54746: LD_INT 16
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: LIST
54753: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
54754: LD_VAR 0 6
54758: PPUSH
54759: CALL_OW 264
54763: PUSH
54764: LD_INT 6
54766: PUSH
54767: LD_INT 46
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: IN
54774: IFFALSE 54795
// points := [ 32 , 120 , 70 ] ;
54776: LD_ADDR_VAR 0 9
54780: PUSH
54781: LD_INT 32
54783: PUSH
54784: LD_INT 120
54786: PUSH
54787: LD_INT 70
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: LIST
54794: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
54795: LD_VAR 0 6
54799: PPUSH
54800: CALL_OW 264
54804: PUSH
54805: LD_INT 7
54807: PUSH
54808: LD_INT 28
54810: PUSH
54811: LD_INT 45
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: LIST
54818: IN
54819: IFFALSE 54840
// points := [ 35 , 20 , 45 ] ;
54821: LD_ADDR_VAR 0 9
54825: PUSH
54826: LD_INT 35
54828: PUSH
54829: LD_INT 20
54831: PUSH
54832: LD_INT 45
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: LIST
54839: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
54840: LD_VAR 0 6
54844: PPUSH
54845: CALL_OW 264
54849: PUSH
54850: LD_INT 47
54852: PUSH
54853: EMPTY
54854: LIST
54855: IN
54856: IFFALSE 54877
// points := [ 67 , 45 , 75 ] ;
54858: LD_ADDR_VAR 0 9
54862: PUSH
54863: LD_INT 67
54865: PUSH
54866: LD_INT 45
54868: PUSH
54869: LD_INT 75
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: LIST
54876: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
54877: LD_VAR 0 6
54881: PPUSH
54882: CALL_OW 264
54886: PUSH
54887: LD_INT 26
54889: PUSH
54890: EMPTY
54891: LIST
54892: IN
54893: IFFALSE 54914
// points := [ 120 , 30 , 80 ] ;
54895: LD_ADDR_VAR 0 9
54899: PUSH
54900: LD_INT 120
54902: PUSH
54903: LD_INT 30
54905: PUSH
54906: LD_INT 80
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: LIST
54913: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
54914: LD_VAR 0 6
54918: PPUSH
54919: CALL_OW 264
54923: PUSH
54924: LD_INT 22
54926: PUSH
54927: EMPTY
54928: LIST
54929: IN
54930: IFFALSE 54951
// points := [ 40 , 1 , 1 ] ;
54932: LD_ADDR_VAR 0 9
54936: PUSH
54937: LD_INT 40
54939: PUSH
54940: LD_INT 1
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: LIST
54950: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
54951: LD_VAR 0 6
54955: PPUSH
54956: CALL_OW 264
54960: PUSH
54961: LD_INT 29
54963: PUSH
54964: EMPTY
54965: LIST
54966: IN
54967: IFFALSE 54988
// points := [ 70 , 200 , 400 ] ;
54969: LD_ADDR_VAR 0 9
54973: PUSH
54974: LD_INT 70
54976: PUSH
54977: LD_INT 200
54979: PUSH
54980: LD_INT 400
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: LIST
54987: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
54988: LD_VAR 0 6
54992: PPUSH
54993: CALL_OW 264
54997: PUSH
54998: LD_INT 14
55000: PUSH
55001: LD_INT 53
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: IN
55008: IFFALSE 55029
// points := [ 40 , 10 , 20 ] ;
55010: LD_ADDR_VAR 0 9
55014: PUSH
55015: LD_INT 40
55017: PUSH
55018: LD_INT 10
55020: PUSH
55021: LD_INT 20
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: LIST
55028: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
55029: LD_VAR 0 6
55033: PPUSH
55034: CALL_OW 264
55038: PUSH
55039: LD_INT 9
55041: PUSH
55042: EMPTY
55043: LIST
55044: IN
55045: IFFALSE 55066
// points := [ 5 , 70 , 20 ] ;
55047: LD_ADDR_VAR 0 9
55051: PUSH
55052: LD_INT 5
55054: PUSH
55055: LD_INT 70
55057: PUSH
55058: LD_INT 20
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: LIST
55065: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
55066: LD_VAR 0 6
55070: PPUSH
55071: CALL_OW 264
55075: PUSH
55076: LD_INT 10
55078: PUSH
55079: EMPTY
55080: LIST
55081: IN
55082: IFFALSE 55103
// points := [ 35 , 110 , 70 ] ;
55084: LD_ADDR_VAR 0 9
55088: PUSH
55089: LD_INT 35
55091: PUSH
55092: LD_INT 110
55094: PUSH
55095: LD_INT 70
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: LIST
55102: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
55103: LD_VAR 0 6
55107: PPUSH
55108: CALL_OW 265
55112: PUSH
55113: LD_INT 25
55115: EQUAL
55116: IFFALSE 55137
// points := [ 80 , 65 , 100 ] ;
55118: LD_ADDR_VAR 0 9
55122: PUSH
55123: LD_INT 80
55125: PUSH
55126: LD_INT 65
55128: PUSH
55129: LD_INT 100
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: LIST
55136: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
55137: LD_VAR 0 6
55141: PPUSH
55142: CALL_OW 263
55146: PUSH
55147: LD_INT 1
55149: EQUAL
55150: IFFALSE 55185
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
55152: LD_ADDR_VAR 0 10
55156: PUSH
55157: LD_VAR 0 10
55161: PUSH
55162: LD_VAR 0 6
55166: PPUSH
55167: CALL_OW 311
55171: PPUSH
55172: LD_INT 3
55174: PPUSH
55175: CALL_OW 259
55179: PUSH
55180: LD_INT 4
55182: MUL
55183: MUL
55184: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
55185: LD_VAR 0 6
55189: PPUSH
55190: CALL_OW 263
55194: PUSH
55195: LD_INT 2
55197: EQUAL
55198: IFFALSE 55249
// begin j := IsControledBy ( i ) ;
55200: LD_ADDR_VAR 0 7
55204: PUSH
55205: LD_VAR 0 6
55209: PPUSH
55210: CALL_OW 312
55214: ST_TO_ADDR
// if j then
55215: LD_VAR 0 7
55219: IFFALSE 55249
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
55221: LD_ADDR_VAR 0 10
55225: PUSH
55226: LD_VAR 0 10
55230: PUSH
55231: LD_VAR 0 7
55235: PPUSH
55236: LD_INT 3
55238: PPUSH
55239: CALL_OW 259
55243: PUSH
55244: LD_INT 3
55246: MUL
55247: MUL
55248: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
55249: LD_VAR 0 6
55253: PPUSH
55254: CALL_OW 264
55258: PUSH
55259: LD_INT 5
55261: PUSH
55262: LD_INT 6
55264: PUSH
55265: LD_INT 46
55267: PUSH
55268: LD_INT 44
55270: PUSH
55271: LD_INT 47
55273: PUSH
55274: LD_INT 45
55276: PUSH
55277: LD_INT 28
55279: PUSH
55280: LD_INT 7
55282: PUSH
55283: LD_INT 27
55285: PUSH
55286: LD_INT 29
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: IN
55301: PUSH
55302: LD_VAR 0 1
55306: PPUSH
55307: LD_INT 52
55309: PPUSH
55310: CALL_OW 321
55314: PUSH
55315: LD_INT 2
55317: EQUAL
55318: AND
55319: IFFALSE 55336
// bpoints := bpoints * 1.2 ;
55321: LD_ADDR_VAR 0 10
55325: PUSH
55326: LD_VAR 0 10
55330: PUSH
55331: LD_REAL  1.20000000000000E+0000
55334: MUL
55335: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
55336: LD_VAR 0 6
55340: PPUSH
55341: CALL_OW 264
55345: PUSH
55346: LD_INT 6
55348: PUSH
55349: LD_INT 46
55351: PUSH
55352: LD_INT 47
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: LIST
55359: IN
55360: IFFALSE 55377
// bpoints := bpoints * 1.2 ;
55362: LD_ADDR_VAR 0 10
55366: PUSH
55367: LD_VAR 0 10
55371: PUSH
55372: LD_REAL  1.20000000000000E+0000
55375: MUL
55376: ST_TO_ADDR
// end ; unit_building :
55377: GO 55391
55379: LD_INT 3
55381: DOUBLE
55382: EQUAL
55383: IFTRUE 55387
55385: GO 55390
55387: POP
// ; end ;
55388: GO 55391
55390: POP
// for j = 1 to 3 do
55391: LD_ADDR_VAR 0 7
55395: PUSH
55396: DOUBLE
55397: LD_INT 1
55399: DEC
55400: ST_TO_ADDR
55401: LD_INT 3
55403: PUSH
55404: FOR_TO
55405: IFFALSE 55458
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
55407: LD_ADDR_VAR 0 5
55411: PUSH
55412: LD_VAR 0 5
55416: PPUSH
55417: LD_VAR 0 7
55421: PPUSH
55422: LD_VAR 0 5
55426: PUSH
55427: LD_VAR 0 7
55431: ARRAY
55432: PUSH
55433: LD_VAR 0 9
55437: PUSH
55438: LD_VAR 0 7
55442: ARRAY
55443: PUSH
55444: LD_VAR 0 10
55448: MUL
55449: PLUS
55450: PPUSH
55451: CALL_OW 1
55455: ST_TO_ADDR
55456: GO 55404
55458: POP
55459: POP
// end ;
55460: GO 53943
55462: POP
55463: POP
// result := Replace ( result , 4 , tmp ) ;
55464: LD_ADDR_VAR 0 5
55468: PUSH
55469: LD_VAR 0 5
55473: PPUSH
55474: LD_INT 4
55476: PPUSH
55477: LD_VAR 0 8
55481: PPUSH
55482: CALL_OW 1
55486: ST_TO_ADDR
// end ;
55487: LD_VAR 0 5
55491: RET
// export function DangerAtRange ( unit , range ) ; begin
55492: LD_INT 0
55494: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
55495: LD_ADDR_VAR 0 3
55499: PUSH
55500: LD_VAR 0 1
55504: PPUSH
55505: CALL_OW 255
55509: PPUSH
55510: LD_VAR 0 1
55514: PPUSH
55515: CALL_OW 250
55519: PPUSH
55520: LD_VAR 0 1
55524: PPUSH
55525: CALL_OW 251
55529: PPUSH
55530: LD_VAR 0 2
55534: PPUSH
55535: CALL 53795 0 4
55539: ST_TO_ADDR
// end ;
55540: LD_VAR 0 3
55544: RET
// export function DangerInArea ( side , area ) ; begin
55545: LD_INT 0
55547: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
55548: LD_ADDR_VAR 0 3
55552: PUSH
55553: LD_VAR 0 2
55557: PPUSH
55558: LD_INT 81
55560: PUSH
55561: LD_VAR 0 1
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PPUSH
55570: CALL_OW 70
55574: ST_TO_ADDR
// end ;
55575: LD_VAR 0 3
55579: RET
// export function IsExtension ( b ) ; begin
55580: LD_INT 0
55582: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
55583: LD_ADDR_VAR 0 2
55587: PUSH
55588: LD_VAR 0 1
55592: PUSH
55593: LD_INT 23
55595: PUSH
55596: LD_INT 20
55598: PUSH
55599: LD_INT 22
55601: PUSH
55602: LD_INT 17
55604: PUSH
55605: LD_INT 24
55607: PUSH
55608: LD_INT 21
55610: PUSH
55611: LD_INT 19
55613: PUSH
55614: LD_INT 16
55616: PUSH
55617: LD_INT 25
55619: PUSH
55620: LD_INT 18
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: IN
55635: ST_TO_ADDR
// end ;
55636: LD_VAR 0 2
55640: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
55641: LD_INT 0
55643: PPUSH
55644: PPUSH
55645: PPUSH
// result := [ ] ;
55646: LD_ADDR_VAR 0 3
55650: PUSH
55651: EMPTY
55652: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
55653: LD_ADDR_VAR 0 4
55657: PUSH
55658: LD_VAR 0 2
55662: PPUSH
55663: LD_INT 21
55665: PUSH
55666: LD_INT 3
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PPUSH
55673: CALL_OW 70
55677: ST_TO_ADDR
// if not tmp then
55678: LD_VAR 0 4
55682: NOT
55683: IFFALSE 55687
// exit ;
55685: GO 55745
// for i in tmp do
55687: LD_ADDR_VAR 0 5
55691: PUSH
55692: LD_VAR 0 4
55696: PUSH
55697: FOR_IN
55698: IFFALSE 55733
// if GetBase ( i ) <> base then
55700: LD_VAR 0 5
55704: PPUSH
55705: CALL_OW 274
55709: PUSH
55710: LD_VAR 0 1
55714: NONEQUAL
55715: IFFALSE 55731
// ComLinkToBase ( base , i ) ;
55717: LD_VAR 0 1
55721: PPUSH
55722: LD_VAR 0 5
55726: PPUSH
55727: CALL_OW 169
55731: GO 55697
55733: POP
55734: POP
// result := tmp ;
55735: LD_ADDR_VAR 0 3
55739: PUSH
55740: LD_VAR 0 4
55744: ST_TO_ADDR
// end ;
55745: LD_VAR 0 3
55749: RET
// export function ComComplete ( unit , b ) ; var i ; begin
55750: LD_INT 0
55752: PPUSH
55753: PPUSH
// if BuildingStatus ( b ) = bs_build then
55754: LD_VAR 0 2
55758: PPUSH
55759: CALL_OW 461
55763: PUSH
55764: LD_INT 1
55766: EQUAL
55767: IFFALSE 55827
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
55769: LD_VAR 0 1
55773: PPUSH
55774: LD_STRING h
55776: PUSH
55777: LD_VAR 0 2
55781: PPUSH
55782: CALL_OW 250
55786: PUSH
55787: LD_VAR 0 2
55791: PPUSH
55792: CALL_OW 251
55796: PUSH
55797: LD_VAR 0 2
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: PUSH
55820: EMPTY
55821: LIST
55822: PPUSH
55823: CALL_OW 446
// end ;
55827: LD_VAR 0 3
55831: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
55832: LD_INT 0
55834: PPUSH
55835: PPUSH
55836: PPUSH
55837: PPUSH
55838: PPUSH
55839: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
55840: LD_VAR 0 1
55844: NOT
55845: PUSH
55846: LD_VAR 0 1
55850: PPUSH
55851: CALL_OW 263
55855: PUSH
55856: LD_INT 2
55858: EQUAL
55859: NOT
55860: OR
55861: IFFALSE 55865
// exit ;
55863: GO 56181
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
55865: LD_ADDR_VAR 0 6
55869: PUSH
55870: LD_INT 22
55872: PUSH
55873: LD_VAR 0 1
55877: PPUSH
55878: CALL_OW 255
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 2
55889: PUSH
55890: LD_INT 30
55892: PUSH
55893: LD_INT 36
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 34
55902: PUSH
55903: LD_INT 31
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: LIST
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PPUSH
55919: CALL_OW 69
55923: ST_TO_ADDR
// if not tmp then
55924: LD_VAR 0 6
55928: NOT
55929: IFFALSE 55933
// exit ;
55931: GO 56181
// result := [ ] ;
55933: LD_ADDR_VAR 0 2
55937: PUSH
55938: EMPTY
55939: ST_TO_ADDR
// for i in tmp do
55940: LD_ADDR_VAR 0 3
55944: PUSH
55945: LD_VAR 0 6
55949: PUSH
55950: FOR_IN
55951: IFFALSE 56022
// begin t := UnitsInside ( i ) ;
55953: LD_ADDR_VAR 0 4
55957: PUSH
55958: LD_VAR 0 3
55962: PPUSH
55963: CALL_OW 313
55967: ST_TO_ADDR
// if t then
55968: LD_VAR 0 4
55972: IFFALSE 56020
// for j in t do
55974: LD_ADDR_VAR 0 7
55978: PUSH
55979: LD_VAR 0 4
55983: PUSH
55984: FOR_IN
55985: IFFALSE 56018
// result := Insert ( result , result + 1 , j ) ;
55987: LD_ADDR_VAR 0 2
55991: PUSH
55992: LD_VAR 0 2
55996: PPUSH
55997: LD_VAR 0 2
56001: PUSH
56002: LD_INT 1
56004: PLUS
56005: PPUSH
56006: LD_VAR 0 7
56010: PPUSH
56011: CALL_OW 2
56015: ST_TO_ADDR
56016: GO 55984
56018: POP
56019: POP
// end ;
56020: GO 55950
56022: POP
56023: POP
// if not result then
56024: LD_VAR 0 2
56028: NOT
56029: IFFALSE 56033
// exit ;
56031: GO 56181
// mech := result [ 1 ] ;
56033: LD_ADDR_VAR 0 5
56037: PUSH
56038: LD_VAR 0 2
56042: PUSH
56043: LD_INT 1
56045: ARRAY
56046: ST_TO_ADDR
// if result > 1 then
56047: LD_VAR 0 2
56051: PUSH
56052: LD_INT 1
56054: GREATER
56055: IFFALSE 56167
// for i = 2 to result do
56057: LD_ADDR_VAR 0 3
56061: PUSH
56062: DOUBLE
56063: LD_INT 2
56065: DEC
56066: ST_TO_ADDR
56067: LD_VAR 0 2
56071: PUSH
56072: FOR_TO
56073: IFFALSE 56165
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
56075: LD_ADDR_VAR 0 4
56079: PUSH
56080: LD_VAR 0 2
56084: PUSH
56085: LD_VAR 0 3
56089: ARRAY
56090: PPUSH
56091: LD_INT 3
56093: PPUSH
56094: CALL_OW 259
56098: PUSH
56099: LD_VAR 0 2
56103: PUSH
56104: LD_VAR 0 3
56108: ARRAY
56109: PPUSH
56110: CALL_OW 432
56114: MINUS
56115: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
56116: LD_VAR 0 4
56120: PUSH
56121: LD_VAR 0 5
56125: PPUSH
56126: LD_INT 3
56128: PPUSH
56129: CALL_OW 259
56133: PUSH
56134: LD_VAR 0 5
56138: PPUSH
56139: CALL_OW 432
56143: MINUS
56144: GREATEREQUAL
56145: IFFALSE 56163
// mech := result [ i ] ;
56147: LD_ADDR_VAR 0 5
56151: PUSH
56152: LD_VAR 0 2
56156: PUSH
56157: LD_VAR 0 3
56161: ARRAY
56162: ST_TO_ADDR
// end ;
56163: GO 56072
56165: POP
56166: POP
// ComLinkTo ( vehicle , mech ) ;
56167: LD_VAR 0 1
56171: PPUSH
56172: LD_VAR 0 5
56176: PPUSH
56177: CALL_OW 135
// end ;
56181: LD_VAR 0 2
56185: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
56186: LD_INT 0
56188: PPUSH
56189: PPUSH
56190: PPUSH
56191: PPUSH
56192: PPUSH
56193: PPUSH
56194: PPUSH
56195: PPUSH
56196: PPUSH
56197: PPUSH
56198: PPUSH
56199: PPUSH
56200: PPUSH
// result := [ ] ;
56201: LD_ADDR_VAR 0 7
56205: PUSH
56206: EMPTY
56207: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
56208: LD_VAR 0 1
56212: PPUSH
56213: CALL_OW 266
56217: PUSH
56218: LD_INT 0
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: IN
56228: NOT
56229: IFFALSE 56233
// exit ;
56231: GO 57864
// if name then
56233: LD_VAR 0 3
56237: IFFALSE 56253
// SetBName ( base_dep , name ) ;
56239: LD_VAR 0 1
56243: PPUSH
56244: LD_VAR 0 3
56248: PPUSH
56249: CALL_OW 500
// base := GetBase ( base_dep ) ;
56253: LD_ADDR_VAR 0 15
56257: PUSH
56258: LD_VAR 0 1
56262: PPUSH
56263: CALL_OW 274
56267: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
56268: LD_ADDR_VAR 0 16
56272: PUSH
56273: LD_VAR 0 1
56277: PPUSH
56278: CALL_OW 255
56282: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
56283: LD_ADDR_VAR 0 17
56287: PUSH
56288: LD_VAR 0 1
56292: PPUSH
56293: CALL_OW 248
56297: ST_TO_ADDR
// if sources then
56298: LD_VAR 0 5
56302: IFFALSE 56349
// for i = 1 to 3 do
56304: LD_ADDR_VAR 0 8
56308: PUSH
56309: DOUBLE
56310: LD_INT 1
56312: DEC
56313: ST_TO_ADDR
56314: LD_INT 3
56316: PUSH
56317: FOR_TO
56318: IFFALSE 56347
// AddResourceType ( base , i , sources [ i ] ) ;
56320: LD_VAR 0 15
56324: PPUSH
56325: LD_VAR 0 8
56329: PPUSH
56330: LD_VAR 0 5
56334: PUSH
56335: LD_VAR 0 8
56339: ARRAY
56340: PPUSH
56341: CALL_OW 276
56345: GO 56317
56347: POP
56348: POP
// buildings := GetBaseBuildings ( base , area ) ;
56349: LD_ADDR_VAR 0 18
56353: PUSH
56354: LD_VAR 0 15
56358: PPUSH
56359: LD_VAR 0 2
56363: PPUSH
56364: CALL 55641 0 2
56368: ST_TO_ADDR
// InitHc ;
56369: CALL_OW 19
// InitUc ;
56373: CALL_OW 18
// uc_side := side ;
56377: LD_ADDR_OWVAR 20
56381: PUSH
56382: LD_VAR 0 16
56386: ST_TO_ADDR
// uc_nation := nation ;
56387: LD_ADDR_OWVAR 21
56391: PUSH
56392: LD_VAR 0 17
56396: ST_TO_ADDR
// if buildings then
56397: LD_VAR 0 18
56401: IFFALSE 57723
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
56403: LD_ADDR_VAR 0 19
56407: PUSH
56408: LD_VAR 0 18
56412: PPUSH
56413: LD_INT 2
56415: PUSH
56416: LD_INT 30
56418: PUSH
56419: LD_INT 29
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 30
56428: PUSH
56429: LD_INT 30
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: LIST
56440: PPUSH
56441: CALL_OW 72
56445: ST_TO_ADDR
// if tmp then
56446: LD_VAR 0 19
56450: IFFALSE 56498
// for i in tmp do
56452: LD_ADDR_VAR 0 8
56456: PUSH
56457: LD_VAR 0 19
56461: PUSH
56462: FOR_IN
56463: IFFALSE 56496
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
56465: LD_VAR 0 8
56469: PPUSH
56470: CALL_OW 250
56474: PPUSH
56475: LD_VAR 0 8
56479: PPUSH
56480: CALL_OW 251
56484: PPUSH
56485: LD_VAR 0 16
56489: PPUSH
56490: CALL_OW 441
56494: GO 56462
56496: POP
56497: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
56498: LD_VAR 0 18
56502: PPUSH
56503: LD_INT 2
56505: PUSH
56506: LD_INT 30
56508: PUSH
56509: LD_INT 32
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 30
56518: PUSH
56519: LD_INT 33
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: LIST
56530: PPUSH
56531: CALL_OW 72
56535: IFFALSE 56623
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
56537: LD_ADDR_VAR 0 8
56541: PUSH
56542: LD_VAR 0 18
56546: PPUSH
56547: LD_INT 2
56549: PUSH
56550: LD_INT 30
56552: PUSH
56553: LD_INT 32
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 30
56562: PUSH
56563: LD_INT 33
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: LIST
56574: PPUSH
56575: CALL_OW 72
56579: PUSH
56580: FOR_IN
56581: IFFALSE 56621
// begin if not GetBWeapon ( i ) then
56583: LD_VAR 0 8
56587: PPUSH
56588: CALL_OW 269
56592: NOT
56593: IFFALSE 56619
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
56595: LD_VAR 0 8
56599: PPUSH
56600: LD_VAR 0 8
56604: PPUSH
56605: LD_VAR 0 2
56609: PPUSH
56610: CALL 57869 0 2
56614: PPUSH
56615: CALL_OW 431
// end ;
56619: GO 56580
56621: POP
56622: POP
// end ; for i = 1 to personel do
56623: LD_ADDR_VAR 0 8
56627: PUSH
56628: DOUBLE
56629: LD_INT 1
56631: DEC
56632: ST_TO_ADDR
56633: LD_VAR 0 6
56637: PUSH
56638: FOR_TO
56639: IFFALSE 57703
// begin if i > 4 then
56641: LD_VAR 0 8
56645: PUSH
56646: LD_INT 4
56648: GREATER
56649: IFFALSE 56653
// break ;
56651: GO 57703
// case i of 1 :
56653: LD_VAR 0 8
56657: PUSH
56658: LD_INT 1
56660: DOUBLE
56661: EQUAL
56662: IFTRUE 56666
56664: GO 56746
56666: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
56667: LD_ADDR_VAR 0 12
56671: PUSH
56672: LD_VAR 0 18
56676: PPUSH
56677: LD_INT 22
56679: PUSH
56680: LD_VAR 0 16
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 58
56691: PUSH
56692: EMPTY
56693: LIST
56694: PUSH
56695: LD_INT 2
56697: PUSH
56698: LD_INT 30
56700: PUSH
56701: LD_INT 32
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 30
56710: PUSH
56711: LD_INT 4
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 30
56720: PUSH
56721: LD_INT 5
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: LIST
56738: PPUSH
56739: CALL_OW 72
56743: ST_TO_ADDR
56744: GO 56968
56746: LD_INT 2
56748: DOUBLE
56749: EQUAL
56750: IFTRUE 56754
56752: GO 56816
56754: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
56755: LD_ADDR_VAR 0 12
56759: PUSH
56760: LD_VAR 0 18
56764: PPUSH
56765: LD_INT 22
56767: PUSH
56768: LD_VAR 0 16
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 2
56779: PUSH
56780: LD_INT 30
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 30
56792: PUSH
56793: LD_INT 1
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: LIST
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PPUSH
56809: CALL_OW 72
56813: ST_TO_ADDR
56814: GO 56968
56816: LD_INT 3
56818: DOUBLE
56819: EQUAL
56820: IFTRUE 56824
56822: GO 56886
56824: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
56825: LD_ADDR_VAR 0 12
56829: PUSH
56830: LD_VAR 0 18
56834: PPUSH
56835: LD_INT 22
56837: PUSH
56838: LD_VAR 0 16
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 2
56849: PUSH
56850: LD_INT 30
56852: PUSH
56853: LD_INT 2
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 30
56862: PUSH
56863: LD_INT 3
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: LIST
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PPUSH
56879: CALL_OW 72
56883: ST_TO_ADDR
56884: GO 56968
56886: LD_INT 4
56888: DOUBLE
56889: EQUAL
56890: IFTRUE 56894
56892: GO 56967
56894: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
56895: LD_ADDR_VAR 0 12
56899: PUSH
56900: LD_VAR 0 18
56904: PPUSH
56905: LD_INT 22
56907: PUSH
56908: LD_VAR 0 16
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 2
56919: PUSH
56920: LD_INT 30
56922: PUSH
56923: LD_INT 6
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 30
56932: PUSH
56933: LD_INT 7
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 30
56942: PUSH
56943: LD_INT 8
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PPUSH
56960: CALL_OW 72
56964: ST_TO_ADDR
56965: GO 56968
56967: POP
// if i = 1 then
56968: LD_VAR 0 8
56972: PUSH
56973: LD_INT 1
56975: EQUAL
56976: IFFALSE 57087
// begin tmp := [ ] ;
56978: LD_ADDR_VAR 0 19
56982: PUSH
56983: EMPTY
56984: ST_TO_ADDR
// for j in f do
56985: LD_ADDR_VAR 0 9
56989: PUSH
56990: LD_VAR 0 12
56994: PUSH
56995: FOR_IN
56996: IFFALSE 57069
// if GetBType ( j ) = b_bunker then
56998: LD_VAR 0 9
57002: PPUSH
57003: CALL_OW 266
57007: PUSH
57008: LD_INT 32
57010: EQUAL
57011: IFFALSE 57038
// tmp := Insert ( tmp , 1 , j ) else
57013: LD_ADDR_VAR 0 19
57017: PUSH
57018: LD_VAR 0 19
57022: PPUSH
57023: LD_INT 1
57025: PPUSH
57026: LD_VAR 0 9
57030: PPUSH
57031: CALL_OW 2
57035: ST_TO_ADDR
57036: GO 57067
// tmp := Insert ( tmp , tmp + 1 , j ) ;
57038: LD_ADDR_VAR 0 19
57042: PUSH
57043: LD_VAR 0 19
57047: PPUSH
57048: LD_VAR 0 19
57052: PUSH
57053: LD_INT 1
57055: PLUS
57056: PPUSH
57057: LD_VAR 0 9
57061: PPUSH
57062: CALL_OW 2
57066: ST_TO_ADDR
57067: GO 56995
57069: POP
57070: POP
// if tmp then
57071: LD_VAR 0 19
57075: IFFALSE 57087
// f := tmp ;
57077: LD_ADDR_VAR 0 12
57081: PUSH
57082: LD_VAR 0 19
57086: ST_TO_ADDR
// end ; x := personel [ i ] ;
57087: LD_ADDR_VAR 0 13
57091: PUSH
57092: LD_VAR 0 6
57096: PUSH
57097: LD_VAR 0 8
57101: ARRAY
57102: ST_TO_ADDR
// if x = - 1 then
57103: LD_VAR 0 13
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: EQUAL
57112: IFFALSE 57321
// begin for j in f do
57114: LD_ADDR_VAR 0 9
57118: PUSH
57119: LD_VAR 0 12
57123: PUSH
57124: FOR_IN
57125: IFFALSE 57317
// repeat InitHc ;
57127: CALL_OW 19
// if GetBType ( j ) = b_barracks then
57131: LD_VAR 0 9
57135: PPUSH
57136: CALL_OW 266
57140: PUSH
57141: LD_INT 5
57143: EQUAL
57144: IFFALSE 57214
// begin if UnitsInside ( j ) < 3 then
57146: LD_VAR 0 9
57150: PPUSH
57151: CALL_OW 313
57155: PUSH
57156: LD_INT 3
57158: LESS
57159: IFFALSE 57195
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
57161: LD_INT 0
57163: PPUSH
57164: LD_INT 5
57166: PUSH
57167: LD_INT 8
57169: PUSH
57170: LD_INT 9
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: LIST
57177: PUSH
57178: LD_VAR 0 17
57182: ARRAY
57183: PPUSH
57184: LD_VAR 0 4
57188: PPUSH
57189: CALL_OW 380
57193: GO 57212
// PrepareHuman ( false , i , skill ) ;
57195: LD_INT 0
57197: PPUSH
57198: LD_VAR 0 8
57202: PPUSH
57203: LD_VAR 0 4
57207: PPUSH
57208: CALL_OW 380
// end else
57212: GO 57231
// PrepareHuman ( false , i , skill ) ;
57214: LD_INT 0
57216: PPUSH
57217: LD_VAR 0 8
57221: PPUSH
57222: LD_VAR 0 4
57226: PPUSH
57227: CALL_OW 380
// un := CreateHuman ;
57231: LD_ADDR_VAR 0 14
57235: PUSH
57236: CALL_OW 44
57240: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
57241: LD_ADDR_VAR 0 7
57245: PUSH
57246: LD_VAR 0 7
57250: PPUSH
57251: LD_INT 1
57253: PPUSH
57254: LD_VAR 0 14
57258: PPUSH
57259: CALL_OW 2
57263: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
57264: LD_VAR 0 14
57268: PPUSH
57269: LD_VAR 0 9
57273: PPUSH
57274: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
57278: LD_VAR 0 9
57282: PPUSH
57283: CALL_OW 313
57287: PUSH
57288: LD_INT 6
57290: EQUAL
57291: PUSH
57292: LD_VAR 0 9
57296: PPUSH
57297: CALL_OW 266
57301: PUSH
57302: LD_INT 32
57304: PUSH
57305: LD_INT 31
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: IN
57312: OR
57313: IFFALSE 57127
57315: GO 57124
57317: POP
57318: POP
// end else
57319: GO 57701
// for j = 1 to x do
57321: LD_ADDR_VAR 0 9
57325: PUSH
57326: DOUBLE
57327: LD_INT 1
57329: DEC
57330: ST_TO_ADDR
57331: LD_VAR 0 13
57335: PUSH
57336: FOR_TO
57337: IFFALSE 57699
// begin InitHc ;
57339: CALL_OW 19
// if not f then
57343: LD_VAR 0 12
57347: NOT
57348: IFFALSE 57437
// begin PrepareHuman ( false , i , skill ) ;
57350: LD_INT 0
57352: PPUSH
57353: LD_VAR 0 8
57357: PPUSH
57358: LD_VAR 0 4
57362: PPUSH
57363: CALL_OW 380
// un := CreateHuman ;
57367: LD_ADDR_VAR 0 14
57371: PUSH
57372: CALL_OW 44
57376: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
57377: LD_ADDR_VAR 0 7
57381: PUSH
57382: LD_VAR 0 7
57386: PPUSH
57387: LD_INT 1
57389: PPUSH
57390: LD_VAR 0 14
57394: PPUSH
57395: CALL_OW 2
57399: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
57400: LD_VAR 0 14
57404: PPUSH
57405: LD_VAR 0 1
57409: PPUSH
57410: CALL_OW 250
57414: PPUSH
57415: LD_VAR 0 1
57419: PPUSH
57420: CALL_OW 251
57424: PPUSH
57425: LD_INT 10
57427: PPUSH
57428: LD_INT 0
57430: PPUSH
57431: CALL_OW 50
// continue ;
57435: GO 57336
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
57437: LD_VAR 0 12
57441: PUSH
57442: LD_INT 1
57444: ARRAY
57445: PPUSH
57446: CALL_OW 313
57450: PUSH
57451: LD_VAR 0 12
57455: PUSH
57456: LD_INT 1
57458: ARRAY
57459: PPUSH
57460: CALL_OW 266
57464: PUSH
57465: LD_INT 32
57467: PUSH
57468: LD_INT 31
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: IN
57475: AND
57476: PUSH
57477: LD_VAR 0 12
57481: PUSH
57482: LD_INT 1
57484: ARRAY
57485: PPUSH
57486: CALL_OW 313
57490: PUSH
57491: LD_INT 6
57493: EQUAL
57494: OR
57495: IFFALSE 57515
// f := Delete ( f , 1 ) ;
57497: LD_ADDR_VAR 0 12
57501: PUSH
57502: LD_VAR 0 12
57506: PPUSH
57507: LD_INT 1
57509: PPUSH
57510: CALL_OW 3
57514: ST_TO_ADDR
// if not f then
57515: LD_VAR 0 12
57519: NOT
57520: IFFALSE 57538
// begin x := x + 2 ;
57522: LD_ADDR_VAR 0 13
57526: PUSH
57527: LD_VAR 0 13
57531: PUSH
57532: LD_INT 2
57534: PLUS
57535: ST_TO_ADDR
// continue ;
57536: GO 57336
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
57538: LD_VAR 0 12
57542: PUSH
57543: LD_INT 1
57545: ARRAY
57546: PPUSH
57547: CALL_OW 266
57551: PUSH
57552: LD_INT 5
57554: EQUAL
57555: IFFALSE 57629
// begin if UnitsInside ( f [ 1 ] ) < 3 then
57557: LD_VAR 0 12
57561: PUSH
57562: LD_INT 1
57564: ARRAY
57565: PPUSH
57566: CALL_OW 313
57570: PUSH
57571: LD_INT 3
57573: LESS
57574: IFFALSE 57610
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
57576: LD_INT 0
57578: PPUSH
57579: LD_INT 5
57581: PUSH
57582: LD_INT 8
57584: PUSH
57585: LD_INT 9
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: LIST
57592: PUSH
57593: LD_VAR 0 17
57597: ARRAY
57598: PPUSH
57599: LD_VAR 0 4
57603: PPUSH
57604: CALL_OW 380
57608: GO 57627
// PrepareHuman ( false , i , skill ) ;
57610: LD_INT 0
57612: PPUSH
57613: LD_VAR 0 8
57617: PPUSH
57618: LD_VAR 0 4
57622: PPUSH
57623: CALL_OW 380
// end else
57627: GO 57646
// PrepareHuman ( false , i , skill ) ;
57629: LD_INT 0
57631: PPUSH
57632: LD_VAR 0 8
57636: PPUSH
57637: LD_VAR 0 4
57641: PPUSH
57642: CALL_OW 380
// un := CreateHuman ;
57646: LD_ADDR_VAR 0 14
57650: PUSH
57651: CALL_OW 44
57655: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
57656: LD_ADDR_VAR 0 7
57660: PUSH
57661: LD_VAR 0 7
57665: PPUSH
57666: LD_INT 1
57668: PPUSH
57669: LD_VAR 0 14
57673: PPUSH
57674: CALL_OW 2
57678: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
57679: LD_VAR 0 14
57683: PPUSH
57684: LD_VAR 0 12
57688: PUSH
57689: LD_INT 1
57691: ARRAY
57692: PPUSH
57693: CALL_OW 52
// end ;
57697: GO 57336
57699: POP
57700: POP
// end ;
57701: GO 56638
57703: POP
57704: POP
// result := result ^ buildings ;
57705: LD_ADDR_VAR 0 7
57709: PUSH
57710: LD_VAR 0 7
57714: PUSH
57715: LD_VAR 0 18
57719: ADD
57720: ST_TO_ADDR
// end else
57721: GO 57864
// begin for i = 1 to personel do
57723: LD_ADDR_VAR 0 8
57727: PUSH
57728: DOUBLE
57729: LD_INT 1
57731: DEC
57732: ST_TO_ADDR
57733: LD_VAR 0 6
57737: PUSH
57738: FOR_TO
57739: IFFALSE 57862
// begin if i > 4 then
57741: LD_VAR 0 8
57745: PUSH
57746: LD_INT 4
57748: GREATER
57749: IFFALSE 57753
// break ;
57751: GO 57862
// x := personel [ i ] ;
57753: LD_ADDR_VAR 0 13
57757: PUSH
57758: LD_VAR 0 6
57762: PUSH
57763: LD_VAR 0 8
57767: ARRAY
57768: ST_TO_ADDR
// if x = - 1 then
57769: LD_VAR 0 13
57773: PUSH
57774: LD_INT 1
57776: NEG
57777: EQUAL
57778: IFFALSE 57782
// continue ;
57780: GO 57738
// PrepareHuman ( false , i , skill ) ;
57782: LD_INT 0
57784: PPUSH
57785: LD_VAR 0 8
57789: PPUSH
57790: LD_VAR 0 4
57794: PPUSH
57795: CALL_OW 380
// un := CreateHuman ;
57799: LD_ADDR_VAR 0 14
57803: PUSH
57804: CALL_OW 44
57808: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
57809: LD_VAR 0 14
57813: PPUSH
57814: LD_VAR 0 1
57818: PPUSH
57819: CALL_OW 250
57823: PPUSH
57824: LD_VAR 0 1
57828: PPUSH
57829: CALL_OW 251
57833: PPUSH
57834: LD_INT 10
57836: PPUSH
57837: LD_INT 0
57839: PPUSH
57840: CALL_OW 50
// result := result ^ un ;
57844: LD_ADDR_VAR 0 7
57848: PUSH
57849: LD_VAR 0 7
57853: PUSH
57854: LD_VAR 0 14
57858: ADD
57859: ST_TO_ADDR
// end ;
57860: GO 57738
57862: POP
57863: POP
// end ; end ;
57864: LD_VAR 0 7
57868: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
57869: LD_INT 0
57871: PPUSH
57872: PPUSH
57873: PPUSH
57874: PPUSH
57875: PPUSH
57876: PPUSH
57877: PPUSH
57878: PPUSH
57879: PPUSH
57880: PPUSH
57881: PPUSH
57882: PPUSH
57883: PPUSH
57884: PPUSH
57885: PPUSH
57886: PPUSH
// result := false ;
57887: LD_ADDR_VAR 0 3
57891: PUSH
57892: LD_INT 0
57894: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
57895: LD_VAR 0 1
57899: NOT
57900: PUSH
57901: LD_VAR 0 1
57905: PPUSH
57906: CALL_OW 266
57910: PUSH
57911: LD_INT 32
57913: PUSH
57914: LD_INT 33
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: IN
57921: NOT
57922: OR
57923: IFFALSE 57927
// exit ;
57925: GO 59063
// nat := GetNation ( tower ) ;
57927: LD_ADDR_VAR 0 12
57931: PUSH
57932: LD_VAR 0 1
57936: PPUSH
57937: CALL_OW 248
57941: ST_TO_ADDR
// side := GetSide ( tower ) ;
57942: LD_ADDR_VAR 0 16
57946: PUSH
57947: LD_VAR 0 1
57951: PPUSH
57952: CALL_OW 255
57956: ST_TO_ADDR
// x := GetX ( tower ) ;
57957: LD_ADDR_VAR 0 10
57961: PUSH
57962: LD_VAR 0 1
57966: PPUSH
57967: CALL_OW 250
57971: ST_TO_ADDR
// y := GetY ( tower ) ;
57972: LD_ADDR_VAR 0 11
57976: PUSH
57977: LD_VAR 0 1
57981: PPUSH
57982: CALL_OW 251
57986: ST_TO_ADDR
// if not x or not y then
57987: LD_VAR 0 10
57991: NOT
57992: PUSH
57993: LD_VAR 0 11
57997: NOT
57998: OR
57999: IFFALSE 58003
// exit ;
58001: GO 59063
// weapon := 0 ;
58003: LD_ADDR_VAR 0 18
58007: PUSH
58008: LD_INT 0
58010: ST_TO_ADDR
// fac_list := [ ] ;
58011: LD_ADDR_VAR 0 17
58015: PUSH
58016: EMPTY
58017: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
58018: LD_ADDR_VAR 0 6
58022: PUSH
58023: LD_VAR 0 1
58027: PPUSH
58028: CALL_OW 274
58032: PPUSH
58033: LD_VAR 0 2
58037: PPUSH
58038: CALL 55641 0 2
58042: PPUSH
58043: LD_INT 30
58045: PUSH
58046: LD_INT 3
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PPUSH
58053: CALL_OW 72
58057: ST_TO_ADDR
// if not factories then
58058: LD_VAR 0 6
58062: NOT
58063: IFFALSE 58067
// exit ;
58065: GO 59063
// for i in factories do
58067: LD_ADDR_VAR 0 8
58071: PUSH
58072: LD_VAR 0 6
58076: PUSH
58077: FOR_IN
58078: IFFALSE 58103
// fac_list := fac_list union AvailableWeaponList ( i ) ;
58080: LD_ADDR_VAR 0 17
58084: PUSH
58085: LD_VAR 0 17
58089: PUSH
58090: LD_VAR 0 8
58094: PPUSH
58095: CALL_OW 478
58099: UNION
58100: ST_TO_ADDR
58101: GO 58077
58103: POP
58104: POP
// if not fac_list then
58105: LD_VAR 0 17
58109: NOT
58110: IFFALSE 58114
// exit ;
58112: GO 59063
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
58114: LD_ADDR_VAR 0 5
58118: PUSH
58119: LD_INT 4
58121: PUSH
58122: LD_INT 5
58124: PUSH
58125: LD_INT 9
58127: PUSH
58128: LD_INT 10
58130: PUSH
58131: LD_INT 6
58133: PUSH
58134: LD_INT 7
58136: PUSH
58137: LD_INT 11
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 27
58151: PUSH
58152: LD_INT 28
58154: PUSH
58155: LD_INT 26
58157: PUSH
58158: LD_INT 30
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 43
58169: PUSH
58170: LD_INT 44
58172: PUSH
58173: LD_INT 46
58175: PUSH
58176: LD_INT 45
58178: PUSH
58179: LD_INT 47
58181: PUSH
58182: LD_INT 49
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: LIST
58197: PUSH
58198: LD_VAR 0 12
58202: ARRAY
58203: ST_TO_ADDR
// for i in list do
58204: LD_ADDR_VAR 0 8
58208: PUSH
58209: LD_VAR 0 5
58213: PUSH
58214: FOR_IN
58215: IFFALSE 58248
// if not i in fac_list then
58217: LD_VAR 0 8
58221: PUSH
58222: LD_VAR 0 17
58226: IN
58227: NOT
58228: IFFALSE 58246
// list := list diff i ;
58230: LD_ADDR_VAR 0 5
58234: PUSH
58235: LD_VAR 0 5
58239: PUSH
58240: LD_VAR 0 8
58244: DIFF
58245: ST_TO_ADDR
58246: GO 58214
58248: POP
58249: POP
// if not list then
58250: LD_VAR 0 5
58254: NOT
58255: IFFALSE 58259
// exit ;
58257: GO 59063
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
58259: LD_VAR 0 12
58263: PUSH
58264: LD_INT 3
58266: EQUAL
58267: PUSH
58268: LD_INT 49
58270: PUSH
58271: LD_VAR 0 5
58275: IN
58276: AND
58277: PUSH
58278: LD_INT 31
58280: PPUSH
58281: LD_VAR 0 16
58285: PPUSH
58286: CALL_OW 321
58290: PUSH
58291: LD_INT 2
58293: EQUAL
58294: AND
58295: IFFALSE 58355
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
58297: LD_INT 22
58299: PUSH
58300: LD_VAR 0 16
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 35
58311: PUSH
58312: LD_INT 49
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 91
58321: PUSH
58322: LD_VAR 0 1
58326: PUSH
58327: LD_INT 10
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: LIST
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: LIST
58339: PPUSH
58340: CALL_OW 69
58344: NOT
58345: IFFALSE 58355
// weapon := ru_time_lapser ;
58347: LD_ADDR_VAR 0 18
58351: PUSH
58352: LD_INT 49
58354: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
58355: LD_VAR 0 12
58359: PUSH
58360: LD_INT 1
58362: PUSH
58363: LD_INT 2
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: IN
58370: PUSH
58371: LD_INT 11
58373: PUSH
58374: LD_VAR 0 5
58378: IN
58379: PUSH
58380: LD_INT 30
58382: PUSH
58383: LD_VAR 0 5
58387: IN
58388: OR
58389: AND
58390: PUSH
58391: LD_INT 6
58393: PPUSH
58394: LD_VAR 0 16
58398: PPUSH
58399: CALL_OW 321
58403: PUSH
58404: LD_INT 2
58406: EQUAL
58407: AND
58408: IFFALSE 58573
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
58410: LD_INT 22
58412: PUSH
58413: LD_VAR 0 16
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 2
58424: PUSH
58425: LD_INT 35
58427: PUSH
58428: LD_INT 11
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 35
58437: PUSH
58438: LD_INT 30
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 91
58452: PUSH
58453: LD_VAR 0 1
58457: PUSH
58458: LD_INT 18
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: LIST
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: LIST
58470: PPUSH
58471: CALL_OW 69
58475: NOT
58476: PUSH
58477: LD_INT 22
58479: PUSH
58480: LD_VAR 0 16
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 2
58491: PUSH
58492: LD_INT 30
58494: PUSH
58495: LD_INT 32
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 30
58504: PUSH
58505: LD_INT 33
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 91
58519: PUSH
58520: LD_VAR 0 1
58524: PUSH
58525: LD_INT 12
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: LIST
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: LIST
58537: PUSH
58538: EMPTY
58539: LIST
58540: PPUSH
58541: CALL_OW 69
58545: PUSH
58546: LD_INT 2
58548: GREATER
58549: AND
58550: IFFALSE 58573
// weapon := [ us_radar , ar_radar ] [ nat ] ;
58552: LD_ADDR_VAR 0 18
58556: PUSH
58557: LD_INT 11
58559: PUSH
58560: LD_INT 30
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_VAR 0 12
58571: ARRAY
58572: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
58573: LD_VAR 0 18
58577: NOT
58578: PUSH
58579: LD_INT 40
58581: PPUSH
58582: LD_VAR 0 16
58586: PPUSH
58587: CALL_OW 321
58591: PUSH
58592: LD_INT 2
58594: EQUAL
58595: AND
58596: PUSH
58597: LD_INT 7
58599: PUSH
58600: LD_VAR 0 5
58604: IN
58605: PUSH
58606: LD_INT 28
58608: PUSH
58609: LD_VAR 0 5
58613: IN
58614: OR
58615: PUSH
58616: LD_INT 45
58618: PUSH
58619: LD_VAR 0 5
58623: IN
58624: OR
58625: AND
58626: IFFALSE 58880
// begin hex := GetHexInfo ( x , y ) ;
58628: LD_ADDR_VAR 0 4
58632: PUSH
58633: LD_VAR 0 10
58637: PPUSH
58638: LD_VAR 0 11
58642: PPUSH
58643: CALL_OW 546
58647: ST_TO_ADDR
// if hex [ 1 ] then
58648: LD_VAR 0 4
58652: PUSH
58653: LD_INT 1
58655: ARRAY
58656: IFFALSE 58660
// exit ;
58658: GO 59063
// height := hex [ 2 ] ;
58660: LD_ADDR_VAR 0 15
58664: PUSH
58665: LD_VAR 0 4
58669: PUSH
58670: LD_INT 2
58672: ARRAY
58673: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
58674: LD_ADDR_VAR 0 14
58678: PUSH
58679: LD_INT 0
58681: PUSH
58682: LD_INT 2
58684: PUSH
58685: LD_INT 3
58687: PUSH
58688: LD_INT 5
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: ST_TO_ADDR
// for i in tmp do
58697: LD_ADDR_VAR 0 8
58701: PUSH
58702: LD_VAR 0 14
58706: PUSH
58707: FOR_IN
58708: IFFALSE 58878
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
58710: LD_ADDR_VAR 0 9
58714: PUSH
58715: LD_VAR 0 10
58719: PPUSH
58720: LD_VAR 0 8
58724: PPUSH
58725: LD_INT 5
58727: PPUSH
58728: CALL_OW 272
58732: PUSH
58733: LD_VAR 0 11
58737: PPUSH
58738: LD_VAR 0 8
58742: PPUSH
58743: LD_INT 5
58745: PPUSH
58746: CALL_OW 273
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
58755: LD_VAR 0 9
58759: PUSH
58760: LD_INT 1
58762: ARRAY
58763: PPUSH
58764: LD_VAR 0 9
58768: PUSH
58769: LD_INT 2
58771: ARRAY
58772: PPUSH
58773: CALL_OW 488
58777: IFFALSE 58876
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
58779: LD_ADDR_VAR 0 4
58783: PUSH
58784: LD_VAR 0 9
58788: PUSH
58789: LD_INT 1
58791: ARRAY
58792: PPUSH
58793: LD_VAR 0 9
58797: PUSH
58798: LD_INT 2
58800: ARRAY
58801: PPUSH
58802: CALL_OW 546
58806: ST_TO_ADDR
// if hex [ 1 ] then
58807: LD_VAR 0 4
58811: PUSH
58812: LD_INT 1
58814: ARRAY
58815: IFFALSE 58819
// continue ;
58817: GO 58707
// h := hex [ 2 ] ;
58819: LD_ADDR_VAR 0 13
58823: PUSH
58824: LD_VAR 0 4
58828: PUSH
58829: LD_INT 2
58831: ARRAY
58832: ST_TO_ADDR
// if h + 7 < height then
58833: LD_VAR 0 13
58837: PUSH
58838: LD_INT 7
58840: PLUS
58841: PUSH
58842: LD_VAR 0 15
58846: LESS
58847: IFFALSE 58876
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
58849: LD_ADDR_VAR 0 18
58853: PUSH
58854: LD_INT 7
58856: PUSH
58857: LD_INT 28
58859: PUSH
58860: LD_INT 45
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: LIST
58867: PUSH
58868: LD_VAR 0 12
58872: ARRAY
58873: ST_TO_ADDR
// break ;
58874: GO 58878
// end ; end ; end ;
58876: GO 58707
58878: POP
58879: POP
// end ; if not weapon then
58880: LD_VAR 0 18
58884: NOT
58885: IFFALSE 58945
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
58887: LD_ADDR_VAR 0 5
58891: PUSH
58892: LD_VAR 0 5
58896: PUSH
58897: LD_INT 11
58899: PUSH
58900: LD_INT 30
58902: PUSH
58903: LD_INT 49
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: LIST
58910: DIFF
58911: ST_TO_ADDR
// if not list then
58912: LD_VAR 0 5
58916: NOT
58917: IFFALSE 58921
// exit ;
58919: GO 59063
// weapon := list [ rand ( 1 , list ) ] ;
58921: LD_ADDR_VAR 0 18
58925: PUSH
58926: LD_VAR 0 5
58930: PUSH
58931: LD_INT 1
58933: PPUSH
58934: LD_VAR 0 5
58938: PPUSH
58939: CALL_OW 12
58943: ARRAY
58944: ST_TO_ADDR
// end ; if weapon then
58945: LD_VAR 0 18
58949: IFFALSE 59063
// begin tmp := CostOfWeapon ( weapon ) ;
58951: LD_ADDR_VAR 0 14
58955: PUSH
58956: LD_VAR 0 18
58960: PPUSH
58961: CALL_OW 451
58965: ST_TO_ADDR
// j := GetBase ( tower ) ;
58966: LD_ADDR_VAR 0 9
58970: PUSH
58971: LD_VAR 0 1
58975: PPUSH
58976: CALL_OW 274
58980: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
58981: LD_VAR 0 9
58985: PPUSH
58986: LD_INT 1
58988: PPUSH
58989: CALL_OW 275
58993: PUSH
58994: LD_VAR 0 14
58998: PUSH
58999: LD_INT 1
59001: ARRAY
59002: GREATEREQUAL
59003: PUSH
59004: LD_VAR 0 9
59008: PPUSH
59009: LD_INT 2
59011: PPUSH
59012: CALL_OW 275
59016: PUSH
59017: LD_VAR 0 14
59021: PUSH
59022: LD_INT 2
59024: ARRAY
59025: GREATEREQUAL
59026: AND
59027: PUSH
59028: LD_VAR 0 9
59032: PPUSH
59033: LD_INT 3
59035: PPUSH
59036: CALL_OW 275
59040: PUSH
59041: LD_VAR 0 14
59045: PUSH
59046: LD_INT 3
59048: ARRAY
59049: GREATEREQUAL
59050: AND
59051: IFFALSE 59063
// result := weapon ;
59053: LD_ADDR_VAR 0 3
59057: PUSH
59058: LD_VAR 0 18
59062: ST_TO_ADDR
// end ; end ;
59063: LD_VAR 0 3
59067: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
59068: LD_INT 0
59070: PPUSH
59071: PPUSH
// result := true ;
59072: LD_ADDR_VAR 0 3
59076: PUSH
59077: LD_INT 1
59079: ST_TO_ADDR
// if array1 = array2 then
59080: LD_VAR 0 1
59084: PUSH
59085: LD_VAR 0 2
59089: EQUAL
59090: IFFALSE 59150
// begin for i = 1 to array1 do
59092: LD_ADDR_VAR 0 4
59096: PUSH
59097: DOUBLE
59098: LD_INT 1
59100: DEC
59101: ST_TO_ADDR
59102: LD_VAR 0 1
59106: PUSH
59107: FOR_TO
59108: IFFALSE 59146
// if array1 [ i ] <> array2 [ i ] then
59110: LD_VAR 0 1
59114: PUSH
59115: LD_VAR 0 4
59119: ARRAY
59120: PUSH
59121: LD_VAR 0 2
59125: PUSH
59126: LD_VAR 0 4
59130: ARRAY
59131: NONEQUAL
59132: IFFALSE 59144
// begin result := false ;
59134: LD_ADDR_VAR 0 3
59138: PUSH
59139: LD_INT 0
59141: ST_TO_ADDR
// break ;
59142: GO 59146
// end ;
59144: GO 59107
59146: POP
59147: POP
// end else
59148: GO 59158
// result := false ;
59150: LD_ADDR_VAR 0 3
59154: PUSH
59155: LD_INT 0
59157: ST_TO_ADDR
// end ;
59158: LD_VAR 0 3
59162: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
59163: LD_INT 0
59165: PPUSH
59166: PPUSH
59167: PPUSH
// pom := GetBase ( fac ) ;
59168: LD_ADDR_VAR 0 5
59172: PUSH
59173: LD_VAR 0 1
59177: PPUSH
59178: CALL_OW 274
59182: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
59183: LD_ADDR_VAR 0 4
59187: PUSH
59188: LD_VAR 0 2
59192: PUSH
59193: LD_INT 1
59195: ARRAY
59196: PPUSH
59197: LD_VAR 0 2
59201: PUSH
59202: LD_INT 2
59204: ARRAY
59205: PPUSH
59206: LD_VAR 0 2
59210: PUSH
59211: LD_INT 3
59213: ARRAY
59214: PPUSH
59215: LD_VAR 0 2
59219: PUSH
59220: LD_INT 4
59222: ARRAY
59223: PPUSH
59224: CALL_OW 449
59228: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
59229: LD_ADDR_VAR 0 3
59233: PUSH
59234: LD_VAR 0 5
59238: PPUSH
59239: LD_INT 1
59241: PPUSH
59242: CALL_OW 275
59246: PUSH
59247: LD_VAR 0 4
59251: PUSH
59252: LD_INT 1
59254: ARRAY
59255: GREATEREQUAL
59256: PUSH
59257: LD_VAR 0 5
59261: PPUSH
59262: LD_INT 2
59264: PPUSH
59265: CALL_OW 275
59269: PUSH
59270: LD_VAR 0 4
59274: PUSH
59275: LD_INT 2
59277: ARRAY
59278: GREATEREQUAL
59279: AND
59280: PUSH
59281: LD_VAR 0 5
59285: PPUSH
59286: LD_INT 3
59288: PPUSH
59289: CALL_OW 275
59293: PUSH
59294: LD_VAR 0 4
59298: PUSH
59299: LD_INT 3
59301: ARRAY
59302: GREATEREQUAL
59303: AND
59304: ST_TO_ADDR
// end ;
59305: LD_VAR 0 3
59309: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
59310: LD_INT 0
59312: PPUSH
59313: PPUSH
59314: PPUSH
59315: PPUSH
// pom := GetBase ( building ) ;
59316: LD_ADDR_VAR 0 3
59320: PUSH
59321: LD_VAR 0 1
59325: PPUSH
59326: CALL_OW 274
59330: ST_TO_ADDR
// if not pom then
59331: LD_VAR 0 3
59335: NOT
59336: IFFALSE 59340
// exit ;
59338: GO 59510
// btype := GetBType ( building ) ;
59340: LD_ADDR_VAR 0 5
59344: PUSH
59345: LD_VAR 0 1
59349: PPUSH
59350: CALL_OW 266
59354: ST_TO_ADDR
// if btype = b_armoury then
59355: LD_VAR 0 5
59359: PUSH
59360: LD_INT 4
59362: EQUAL
59363: IFFALSE 59373
// btype := b_barracks ;
59365: LD_ADDR_VAR 0 5
59369: PUSH
59370: LD_INT 5
59372: ST_TO_ADDR
// if btype = b_depot then
59373: LD_VAR 0 5
59377: PUSH
59378: LD_INT 0
59380: EQUAL
59381: IFFALSE 59391
// btype := b_warehouse ;
59383: LD_ADDR_VAR 0 5
59387: PUSH
59388: LD_INT 1
59390: ST_TO_ADDR
// if btype = b_workshop then
59391: LD_VAR 0 5
59395: PUSH
59396: LD_INT 2
59398: EQUAL
59399: IFFALSE 59409
// btype := b_factory ;
59401: LD_ADDR_VAR 0 5
59405: PUSH
59406: LD_INT 3
59408: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
59409: LD_ADDR_VAR 0 4
59413: PUSH
59414: LD_VAR 0 5
59418: PPUSH
59419: LD_VAR 0 1
59423: PPUSH
59424: CALL_OW 248
59428: PPUSH
59429: CALL_OW 450
59433: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
59434: LD_ADDR_VAR 0 2
59438: PUSH
59439: LD_VAR 0 3
59443: PPUSH
59444: LD_INT 1
59446: PPUSH
59447: CALL_OW 275
59451: PUSH
59452: LD_VAR 0 4
59456: PUSH
59457: LD_INT 1
59459: ARRAY
59460: GREATEREQUAL
59461: PUSH
59462: LD_VAR 0 3
59466: PPUSH
59467: LD_INT 2
59469: PPUSH
59470: CALL_OW 275
59474: PUSH
59475: LD_VAR 0 4
59479: PUSH
59480: LD_INT 2
59482: ARRAY
59483: GREATEREQUAL
59484: AND
59485: PUSH
59486: LD_VAR 0 3
59490: PPUSH
59491: LD_INT 3
59493: PPUSH
59494: CALL_OW 275
59498: PUSH
59499: LD_VAR 0 4
59503: PUSH
59504: LD_INT 3
59506: ARRAY
59507: GREATEREQUAL
59508: AND
59509: ST_TO_ADDR
// end ;
59510: LD_VAR 0 2
59514: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
59515: LD_INT 0
59517: PPUSH
59518: PPUSH
59519: PPUSH
// pom := GetBase ( building ) ;
59520: LD_ADDR_VAR 0 4
59524: PUSH
59525: LD_VAR 0 1
59529: PPUSH
59530: CALL_OW 274
59534: ST_TO_ADDR
// if not pom then
59535: LD_VAR 0 4
59539: NOT
59540: IFFALSE 59544
// exit ;
59542: GO 59645
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
59544: LD_ADDR_VAR 0 5
59548: PUSH
59549: LD_VAR 0 2
59553: PPUSH
59554: LD_VAR 0 1
59558: PPUSH
59559: CALL_OW 248
59563: PPUSH
59564: CALL_OW 450
59568: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
59569: LD_ADDR_VAR 0 3
59573: PUSH
59574: LD_VAR 0 4
59578: PPUSH
59579: LD_INT 1
59581: PPUSH
59582: CALL_OW 275
59586: PUSH
59587: LD_VAR 0 5
59591: PUSH
59592: LD_INT 1
59594: ARRAY
59595: GREATEREQUAL
59596: PUSH
59597: LD_VAR 0 4
59601: PPUSH
59602: LD_INT 2
59604: PPUSH
59605: CALL_OW 275
59609: PUSH
59610: LD_VAR 0 5
59614: PUSH
59615: LD_INT 2
59617: ARRAY
59618: GREATEREQUAL
59619: AND
59620: PUSH
59621: LD_VAR 0 4
59625: PPUSH
59626: LD_INT 3
59628: PPUSH
59629: CALL_OW 275
59633: PUSH
59634: LD_VAR 0 5
59638: PUSH
59639: LD_INT 3
59641: ARRAY
59642: GREATEREQUAL
59643: AND
59644: ST_TO_ADDR
// end ;
59645: LD_VAR 0 3
59649: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
59650: LD_INT 0
59652: PPUSH
59653: PPUSH
59654: PPUSH
59655: PPUSH
59656: PPUSH
59657: PPUSH
59658: PPUSH
59659: PPUSH
59660: PPUSH
59661: PPUSH
// result := false ;
59662: LD_ADDR_VAR 0 6
59666: PUSH
59667: LD_INT 0
59669: ST_TO_ADDR
// if not base or not btype or not x or not y then
59670: LD_VAR 0 1
59674: NOT
59675: PUSH
59676: LD_VAR 0 2
59680: NOT
59681: OR
59682: PUSH
59683: LD_VAR 0 3
59687: NOT
59688: OR
59689: PUSH
59690: LD_VAR 0 4
59694: NOT
59695: OR
59696: IFFALSE 59700
// exit ;
59698: GO 60309
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
59700: LD_ADDR_VAR 0 12
59704: PUSH
59705: LD_VAR 0 2
59709: PPUSH
59710: LD_VAR 0 3
59714: PPUSH
59715: LD_VAR 0 4
59719: PPUSH
59720: LD_VAR 0 5
59724: PPUSH
59725: LD_VAR 0 1
59729: PUSH
59730: LD_INT 1
59732: ARRAY
59733: PPUSH
59734: CALL_OW 248
59738: PPUSH
59739: LD_INT 0
59741: PPUSH
59742: CALL 61146 0 6
59746: ST_TO_ADDR
// if not hexes then
59747: LD_VAR 0 12
59751: NOT
59752: IFFALSE 59756
// exit ;
59754: GO 60309
// for i = 1 to hexes do
59756: LD_ADDR_VAR 0 7
59760: PUSH
59761: DOUBLE
59762: LD_INT 1
59764: DEC
59765: ST_TO_ADDR
59766: LD_VAR 0 12
59770: PUSH
59771: FOR_TO
59772: IFFALSE 60307
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59774: LD_ADDR_VAR 0 11
59778: PUSH
59779: LD_VAR 0 12
59783: PUSH
59784: LD_VAR 0 7
59788: ARRAY
59789: PUSH
59790: LD_INT 1
59792: ARRAY
59793: PPUSH
59794: LD_VAR 0 12
59798: PUSH
59799: LD_VAR 0 7
59803: ARRAY
59804: PUSH
59805: LD_INT 2
59807: ARRAY
59808: PPUSH
59809: CALL_OW 428
59813: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
59814: LD_VAR 0 12
59818: PUSH
59819: LD_VAR 0 7
59823: ARRAY
59824: PUSH
59825: LD_INT 1
59827: ARRAY
59828: PPUSH
59829: LD_VAR 0 12
59833: PUSH
59834: LD_VAR 0 7
59838: ARRAY
59839: PUSH
59840: LD_INT 2
59842: ARRAY
59843: PPUSH
59844: CALL_OW 351
59848: PUSH
59849: LD_VAR 0 12
59853: PUSH
59854: LD_VAR 0 7
59858: ARRAY
59859: PUSH
59860: LD_INT 1
59862: ARRAY
59863: PPUSH
59864: LD_VAR 0 12
59868: PUSH
59869: LD_VAR 0 7
59873: ARRAY
59874: PUSH
59875: LD_INT 2
59877: ARRAY
59878: PPUSH
59879: CALL_OW 488
59883: NOT
59884: OR
59885: PUSH
59886: LD_VAR 0 11
59890: PPUSH
59891: CALL_OW 247
59895: PUSH
59896: LD_INT 3
59898: EQUAL
59899: OR
59900: IFFALSE 59906
// exit ;
59902: POP
59903: POP
59904: GO 60309
// if not tmp or not tmp in base then
59906: LD_VAR 0 11
59910: NOT
59911: PUSH
59912: LD_VAR 0 11
59916: PUSH
59917: LD_VAR 0 1
59921: IN
59922: NOT
59923: OR
59924: IFFALSE 59928
// continue ;
59926: GO 59771
// result := true ;
59928: LD_ADDR_VAR 0 6
59932: PUSH
59933: LD_INT 1
59935: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59936: LD_ADDR_VAR 0 15
59940: PUSH
59941: LD_VAR 0 1
59945: PPUSH
59946: LD_INT 22
59948: PUSH
59949: LD_VAR 0 11
59953: PPUSH
59954: CALL_OW 255
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 2
59965: PUSH
59966: LD_INT 30
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 30
59978: PUSH
59979: LD_INT 1
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: LIST
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PPUSH
59995: CALL_OW 72
59999: ST_TO_ADDR
// if dep then
60000: LD_VAR 0 15
60004: IFFALSE 60140
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
60006: LD_ADDR_VAR 0 14
60010: PUSH
60011: LD_VAR 0 15
60015: PUSH
60016: LD_INT 1
60018: ARRAY
60019: PPUSH
60020: CALL_OW 250
60024: PPUSH
60025: LD_VAR 0 15
60029: PUSH
60030: LD_INT 1
60032: ARRAY
60033: PPUSH
60034: CALL_OW 254
60038: PPUSH
60039: LD_INT 5
60041: PPUSH
60042: CALL_OW 272
60046: PUSH
60047: LD_VAR 0 15
60051: PUSH
60052: LD_INT 1
60054: ARRAY
60055: PPUSH
60056: CALL_OW 251
60060: PPUSH
60061: LD_VAR 0 15
60065: PUSH
60066: LD_INT 1
60068: ARRAY
60069: PPUSH
60070: CALL_OW 254
60074: PPUSH
60075: LD_INT 5
60077: PPUSH
60078: CALL_OW 273
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
60087: LD_VAR 0 14
60091: PUSH
60092: LD_INT 1
60094: ARRAY
60095: PPUSH
60096: LD_VAR 0 14
60100: PUSH
60101: LD_INT 2
60103: ARRAY
60104: PPUSH
60105: CALL_OW 488
60109: IFFALSE 60140
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
60111: LD_VAR 0 11
60115: PPUSH
60116: LD_VAR 0 14
60120: PUSH
60121: LD_INT 1
60123: ARRAY
60124: PPUSH
60125: LD_VAR 0 14
60129: PUSH
60130: LD_INT 2
60132: ARRAY
60133: PPUSH
60134: CALL_OW 111
// continue ;
60138: GO 59771
// end ; end ; r := GetDir ( tmp ) ;
60140: LD_ADDR_VAR 0 13
60144: PUSH
60145: LD_VAR 0 11
60149: PPUSH
60150: CALL_OW 254
60154: ST_TO_ADDR
// if r = 5 then
60155: LD_VAR 0 13
60159: PUSH
60160: LD_INT 5
60162: EQUAL
60163: IFFALSE 60173
// r := 0 ;
60165: LD_ADDR_VAR 0 13
60169: PUSH
60170: LD_INT 0
60172: ST_TO_ADDR
// for j = r to 5 do
60173: LD_ADDR_VAR 0 8
60177: PUSH
60178: DOUBLE
60179: LD_VAR 0 13
60183: DEC
60184: ST_TO_ADDR
60185: LD_INT 5
60187: PUSH
60188: FOR_TO
60189: IFFALSE 60303
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
60191: LD_ADDR_VAR 0 9
60195: PUSH
60196: LD_VAR 0 11
60200: PPUSH
60201: CALL_OW 250
60205: PPUSH
60206: LD_VAR 0 8
60210: PPUSH
60211: LD_INT 2
60213: PPUSH
60214: CALL_OW 272
60218: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
60219: LD_ADDR_VAR 0 10
60223: PUSH
60224: LD_VAR 0 11
60228: PPUSH
60229: CALL_OW 251
60233: PPUSH
60234: LD_VAR 0 8
60238: PPUSH
60239: LD_INT 2
60241: PPUSH
60242: CALL_OW 273
60246: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
60247: LD_VAR 0 9
60251: PPUSH
60252: LD_VAR 0 10
60256: PPUSH
60257: CALL_OW 488
60261: PUSH
60262: LD_VAR 0 9
60266: PPUSH
60267: LD_VAR 0 10
60271: PPUSH
60272: CALL_OW 428
60276: NOT
60277: AND
60278: IFFALSE 60301
// begin ComMoveXY ( tmp , _x , _y ) ;
60280: LD_VAR 0 11
60284: PPUSH
60285: LD_VAR 0 9
60289: PPUSH
60290: LD_VAR 0 10
60294: PPUSH
60295: CALL_OW 111
// break ;
60299: GO 60303
// end ; end ;
60301: GO 60188
60303: POP
60304: POP
// end ;
60305: GO 59771
60307: POP
60308: POP
// end ;
60309: LD_VAR 0 6
60313: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
60314: LD_INT 0
60316: PPUSH
60317: PPUSH
60318: PPUSH
60319: PPUSH
60320: PPUSH
60321: PPUSH
60322: PPUSH
60323: PPUSH
60324: PPUSH
60325: PPUSH
// result := false ;
60326: LD_ADDR_VAR 0 6
60330: PUSH
60331: LD_INT 0
60333: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
60334: LD_VAR 0 1
60338: NOT
60339: PUSH
60340: LD_VAR 0 1
60344: PPUSH
60345: CALL_OW 266
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: LD_INT 1
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: IN
60360: NOT
60361: OR
60362: PUSH
60363: LD_VAR 0 2
60367: NOT
60368: OR
60369: PUSH
60370: LD_VAR 0 5
60374: PUSH
60375: LD_INT 0
60377: PUSH
60378: LD_INT 1
60380: PUSH
60381: LD_INT 2
60383: PUSH
60384: LD_INT 3
60386: PUSH
60387: LD_INT 4
60389: PUSH
60390: LD_INT 5
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: IN
60401: NOT
60402: OR
60403: PUSH
60404: LD_VAR 0 3
60408: PPUSH
60409: LD_VAR 0 4
60413: PPUSH
60414: CALL_OW 488
60418: NOT
60419: OR
60420: IFFALSE 60424
// exit ;
60422: GO 61141
// pom := GetBase ( depot ) ;
60424: LD_ADDR_VAR 0 10
60428: PUSH
60429: LD_VAR 0 1
60433: PPUSH
60434: CALL_OW 274
60438: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
60439: LD_ADDR_VAR 0 11
60443: PUSH
60444: LD_VAR 0 2
60448: PPUSH
60449: LD_VAR 0 1
60453: PPUSH
60454: CALL_OW 248
60458: PPUSH
60459: CALL_OW 450
60463: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
60464: LD_VAR 0 10
60468: PPUSH
60469: LD_INT 1
60471: PPUSH
60472: CALL_OW 275
60476: PUSH
60477: LD_VAR 0 11
60481: PUSH
60482: LD_INT 1
60484: ARRAY
60485: GREATEREQUAL
60486: PUSH
60487: LD_VAR 0 10
60491: PPUSH
60492: LD_INT 2
60494: PPUSH
60495: CALL_OW 275
60499: PUSH
60500: LD_VAR 0 11
60504: PUSH
60505: LD_INT 2
60507: ARRAY
60508: GREATEREQUAL
60509: AND
60510: PUSH
60511: LD_VAR 0 10
60515: PPUSH
60516: LD_INT 3
60518: PPUSH
60519: CALL_OW 275
60523: PUSH
60524: LD_VAR 0 11
60528: PUSH
60529: LD_INT 3
60531: ARRAY
60532: GREATEREQUAL
60533: AND
60534: NOT
60535: IFFALSE 60539
// exit ;
60537: GO 61141
// if GetBType ( depot ) = b_depot then
60539: LD_VAR 0 1
60543: PPUSH
60544: CALL_OW 266
60548: PUSH
60549: LD_INT 0
60551: EQUAL
60552: IFFALSE 60564
// dist := 28 else
60554: LD_ADDR_VAR 0 14
60558: PUSH
60559: LD_INT 28
60561: ST_TO_ADDR
60562: GO 60572
// dist := 36 ;
60564: LD_ADDR_VAR 0 14
60568: PUSH
60569: LD_INT 36
60571: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
60572: LD_VAR 0 1
60576: PPUSH
60577: LD_VAR 0 3
60581: PPUSH
60582: LD_VAR 0 4
60586: PPUSH
60587: CALL_OW 297
60591: PUSH
60592: LD_VAR 0 14
60596: GREATER
60597: IFFALSE 60601
// exit ;
60599: GO 61141
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
60601: LD_ADDR_VAR 0 12
60605: PUSH
60606: LD_VAR 0 2
60610: PPUSH
60611: LD_VAR 0 3
60615: PPUSH
60616: LD_VAR 0 4
60620: PPUSH
60621: LD_VAR 0 5
60625: PPUSH
60626: LD_VAR 0 1
60630: PPUSH
60631: CALL_OW 248
60635: PPUSH
60636: LD_INT 0
60638: PPUSH
60639: CALL 61146 0 6
60643: ST_TO_ADDR
// if not hexes then
60644: LD_VAR 0 12
60648: NOT
60649: IFFALSE 60653
// exit ;
60651: GO 61141
// hex := GetHexInfo ( x , y ) ;
60653: LD_ADDR_VAR 0 15
60657: PUSH
60658: LD_VAR 0 3
60662: PPUSH
60663: LD_VAR 0 4
60667: PPUSH
60668: CALL_OW 546
60672: ST_TO_ADDR
// if hex [ 1 ] then
60673: LD_VAR 0 15
60677: PUSH
60678: LD_INT 1
60680: ARRAY
60681: IFFALSE 60685
// exit ;
60683: GO 61141
// height := hex [ 2 ] ;
60685: LD_ADDR_VAR 0 13
60689: PUSH
60690: LD_VAR 0 15
60694: PUSH
60695: LD_INT 2
60697: ARRAY
60698: ST_TO_ADDR
// for i = 1 to hexes do
60699: LD_ADDR_VAR 0 7
60703: PUSH
60704: DOUBLE
60705: LD_INT 1
60707: DEC
60708: ST_TO_ADDR
60709: LD_VAR 0 12
60713: PUSH
60714: FOR_TO
60715: IFFALSE 61045
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
60717: LD_VAR 0 12
60721: PUSH
60722: LD_VAR 0 7
60726: ARRAY
60727: PUSH
60728: LD_INT 1
60730: ARRAY
60731: PPUSH
60732: LD_VAR 0 12
60736: PUSH
60737: LD_VAR 0 7
60741: ARRAY
60742: PUSH
60743: LD_INT 2
60745: ARRAY
60746: PPUSH
60747: CALL_OW 488
60751: NOT
60752: PUSH
60753: LD_VAR 0 12
60757: PUSH
60758: LD_VAR 0 7
60762: ARRAY
60763: PUSH
60764: LD_INT 1
60766: ARRAY
60767: PPUSH
60768: LD_VAR 0 12
60772: PUSH
60773: LD_VAR 0 7
60777: ARRAY
60778: PUSH
60779: LD_INT 2
60781: ARRAY
60782: PPUSH
60783: CALL_OW 428
60787: PUSH
60788: LD_INT 0
60790: GREATER
60791: OR
60792: PUSH
60793: LD_VAR 0 12
60797: PUSH
60798: LD_VAR 0 7
60802: ARRAY
60803: PUSH
60804: LD_INT 1
60806: ARRAY
60807: PPUSH
60808: LD_VAR 0 12
60812: PUSH
60813: LD_VAR 0 7
60817: ARRAY
60818: PUSH
60819: LD_INT 2
60821: ARRAY
60822: PPUSH
60823: CALL_OW 351
60827: OR
60828: IFFALSE 60834
// exit ;
60830: POP
60831: POP
60832: GO 61141
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60834: LD_ADDR_VAR 0 8
60838: PUSH
60839: LD_VAR 0 12
60843: PUSH
60844: LD_VAR 0 7
60848: ARRAY
60849: PUSH
60850: LD_INT 1
60852: ARRAY
60853: PPUSH
60854: LD_VAR 0 12
60858: PUSH
60859: LD_VAR 0 7
60863: ARRAY
60864: PUSH
60865: LD_INT 2
60867: ARRAY
60868: PPUSH
60869: CALL_OW 546
60873: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
60874: LD_VAR 0 8
60878: PUSH
60879: LD_INT 1
60881: ARRAY
60882: PUSH
60883: LD_VAR 0 8
60887: PUSH
60888: LD_INT 2
60890: ARRAY
60891: PUSH
60892: LD_VAR 0 13
60896: PUSH
60897: LD_INT 2
60899: PLUS
60900: GREATER
60901: OR
60902: PUSH
60903: LD_VAR 0 8
60907: PUSH
60908: LD_INT 2
60910: ARRAY
60911: PUSH
60912: LD_VAR 0 13
60916: PUSH
60917: LD_INT 2
60919: MINUS
60920: LESS
60921: OR
60922: PUSH
60923: LD_VAR 0 8
60927: PUSH
60928: LD_INT 3
60930: ARRAY
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: LD_INT 8
60937: PUSH
60938: LD_INT 9
60940: PUSH
60941: LD_INT 10
60943: PUSH
60944: LD_INT 11
60946: PUSH
60947: LD_INT 12
60949: PUSH
60950: LD_INT 13
60952: PUSH
60953: LD_INT 16
60955: PUSH
60956: LD_INT 17
60958: PUSH
60959: LD_INT 18
60961: PUSH
60962: LD_INT 19
60964: PUSH
60965: LD_INT 20
60967: PUSH
60968: LD_INT 21
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: IN
60986: NOT
60987: OR
60988: PUSH
60989: LD_VAR 0 8
60993: PUSH
60994: LD_INT 5
60996: ARRAY
60997: NOT
60998: OR
60999: PUSH
61000: LD_VAR 0 8
61004: PUSH
61005: LD_INT 6
61007: ARRAY
61008: PUSH
61009: LD_INT 1
61011: PUSH
61012: LD_INT 2
61014: PUSH
61015: LD_INT 7
61017: PUSH
61018: LD_INT 9
61020: PUSH
61021: LD_INT 10
61023: PUSH
61024: LD_INT 11
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: IN
61035: NOT
61036: OR
61037: IFFALSE 61043
// exit ;
61039: POP
61040: POP
61041: GO 61141
// end ;
61043: GO 60714
61045: POP
61046: POP
// side := GetSide ( depot ) ;
61047: LD_ADDR_VAR 0 9
61051: PUSH
61052: LD_VAR 0 1
61056: PPUSH
61057: CALL_OW 255
61061: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
61062: LD_VAR 0 9
61066: PPUSH
61067: LD_VAR 0 3
61071: PPUSH
61072: LD_VAR 0 4
61076: PPUSH
61077: LD_INT 20
61079: PPUSH
61080: CALL 53795 0 4
61084: PUSH
61085: LD_INT 4
61087: ARRAY
61088: IFFALSE 61092
// exit ;
61090: GO 61141
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
61092: LD_VAR 0 2
61096: PUSH
61097: LD_INT 29
61099: PUSH
61100: LD_INT 30
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: IN
61107: PUSH
61108: LD_VAR 0 3
61112: PPUSH
61113: LD_VAR 0 4
61117: PPUSH
61118: LD_VAR 0 9
61122: PPUSH
61123: CALL_OW 440
61127: NOT
61128: AND
61129: IFFALSE 61133
// exit ;
61131: GO 61141
// result := true ;
61133: LD_ADDR_VAR 0 6
61137: PUSH
61138: LD_INT 1
61140: ST_TO_ADDR
// end ;
61141: LD_VAR 0 6
61145: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
61146: LD_INT 0
61148: PPUSH
61149: PPUSH
61150: PPUSH
61151: PPUSH
61152: PPUSH
61153: PPUSH
61154: PPUSH
61155: PPUSH
61156: PPUSH
61157: PPUSH
61158: PPUSH
61159: PPUSH
61160: PPUSH
61161: PPUSH
61162: PPUSH
61163: PPUSH
61164: PPUSH
61165: PPUSH
61166: PPUSH
61167: PPUSH
61168: PPUSH
61169: PPUSH
61170: PPUSH
61171: PPUSH
61172: PPUSH
61173: PPUSH
61174: PPUSH
61175: PPUSH
61176: PPUSH
61177: PPUSH
61178: PPUSH
61179: PPUSH
61180: PPUSH
61181: PPUSH
61182: PPUSH
61183: PPUSH
61184: PPUSH
61185: PPUSH
61186: PPUSH
61187: PPUSH
61188: PPUSH
61189: PPUSH
61190: PPUSH
61191: PPUSH
61192: PPUSH
61193: PPUSH
61194: PPUSH
61195: PPUSH
61196: PPUSH
61197: PPUSH
61198: PPUSH
61199: PPUSH
61200: PPUSH
61201: PPUSH
61202: PPUSH
61203: PPUSH
61204: PPUSH
61205: PPUSH
// result = [ ] ;
61206: LD_ADDR_VAR 0 7
61210: PUSH
61211: EMPTY
61212: ST_TO_ADDR
// temp_list = [ ] ;
61213: LD_ADDR_VAR 0 9
61217: PUSH
61218: EMPTY
61219: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
61220: LD_VAR 0 4
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: LD_INT 1
61230: PUSH
61231: LD_INT 2
61233: PUSH
61234: LD_INT 3
61236: PUSH
61237: LD_INT 4
61239: PUSH
61240: LD_INT 5
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: IN
61251: NOT
61252: PUSH
61253: LD_VAR 0 1
61257: PUSH
61258: LD_INT 0
61260: PUSH
61261: LD_INT 1
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: IN
61268: PUSH
61269: LD_VAR 0 5
61273: PUSH
61274: LD_INT 1
61276: PUSH
61277: LD_INT 2
61279: PUSH
61280: LD_INT 3
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: LIST
61287: IN
61288: NOT
61289: AND
61290: OR
61291: IFFALSE 61295
// exit ;
61293: GO 79686
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
61295: LD_VAR 0 1
61299: PUSH
61300: LD_INT 6
61302: PUSH
61303: LD_INT 7
61305: PUSH
61306: LD_INT 8
61308: PUSH
61309: LD_INT 13
61311: PUSH
61312: LD_INT 12
61314: PUSH
61315: LD_INT 15
61317: PUSH
61318: LD_INT 11
61320: PUSH
61321: LD_INT 14
61323: PUSH
61324: LD_INT 10
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: IN
61338: IFFALSE 61348
// btype = b_lab ;
61340: LD_ADDR_VAR 0 1
61344: PUSH
61345: LD_INT 6
61347: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
61348: LD_VAR 0 6
61352: PUSH
61353: LD_INT 0
61355: PUSH
61356: LD_INT 1
61358: PUSH
61359: LD_INT 2
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: LIST
61366: IN
61367: NOT
61368: PUSH
61369: LD_VAR 0 1
61373: PUSH
61374: LD_INT 0
61376: PUSH
61377: LD_INT 1
61379: PUSH
61380: LD_INT 2
61382: PUSH
61383: LD_INT 3
61385: PUSH
61386: LD_INT 6
61388: PUSH
61389: LD_INT 36
61391: PUSH
61392: LD_INT 4
61394: PUSH
61395: LD_INT 5
61397: PUSH
61398: LD_INT 31
61400: PUSH
61401: LD_INT 32
61403: PUSH
61404: LD_INT 33
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: IN
61420: NOT
61421: PUSH
61422: LD_VAR 0 6
61426: PUSH
61427: LD_INT 1
61429: EQUAL
61430: AND
61431: OR
61432: PUSH
61433: LD_VAR 0 1
61437: PUSH
61438: LD_INT 2
61440: PUSH
61441: LD_INT 3
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: IN
61448: NOT
61449: PUSH
61450: LD_VAR 0 6
61454: PUSH
61455: LD_INT 2
61457: EQUAL
61458: AND
61459: OR
61460: IFFALSE 61470
// mode = 0 ;
61462: LD_ADDR_VAR 0 6
61466: PUSH
61467: LD_INT 0
61469: ST_TO_ADDR
// case mode of 0 :
61470: LD_VAR 0 6
61474: PUSH
61475: LD_INT 0
61477: DOUBLE
61478: EQUAL
61479: IFTRUE 61483
61481: GO 72936
61483: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61484: LD_ADDR_VAR 0 11
61488: PUSH
61489: LD_INT 0
61491: PUSH
61492: LD_INT 0
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: LD_INT 1
61504: NEG
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: LD_INT 0
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: LD_INT 1
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: LD_INT 0
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 1
61553: NEG
61554: PUSH
61555: LD_INT 1
61557: NEG
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 1
61565: NEG
61566: PUSH
61567: LD_INT 2
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 0
61577: PUSH
61578: LD_INT 2
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 1
61588: PUSH
61589: LD_INT 1
61591: NEG
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 1
61599: PUSH
61600: LD_INT 2
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 0
61609: PUSH
61610: LD_INT 2
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: NEG
61620: PUSH
61621: LD_INT 1
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 1
61630: PUSH
61631: LD_INT 3
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 0
61640: PUSH
61641: LD_INT 3
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 1
61650: NEG
61651: PUSH
61652: LD_INT 2
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61677: LD_ADDR_VAR 0 12
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 1
61715: PUSH
61716: LD_INT 1
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: LD_INT 1
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 2
61769: PUSH
61770: LD_INT 0
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 2
61779: PUSH
61780: LD_INT 1
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 1
61789: NEG
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 2
61800: NEG
61801: PUSH
61802: LD_INT 0
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 2
61811: NEG
61812: PUSH
61813: LD_INT 1
61815: NEG
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 2
61823: NEG
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 3
61834: NEG
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 3
61845: NEG
61846: PUSH
61847: LD_INT 1
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61873: LD_ADDR_VAR 0 13
61877: PUSH
61878: LD_INT 0
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 0
61890: PUSH
61891: LD_INT 1
61893: NEG
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 1
61901: PUSH
61902: LD_INT 0
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 1
61911: PUSH
61912: LD_INT 1
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 0
61921: PUSH
61922: LD_INT 1
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 1
61931: NEG
61932: PUSH
61933: LD_INT 0
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 1
61942: NEG
61943: PUSH
61944: LD_INT 1
61946: NEG
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 1
61954: NEG
61955: PUSH
61956: LD_INT 2
61958: NEG
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 2
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 2
61976: PUSH
61977: LD_INT 2
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 1
61986: PUSH
61987: LD_INT 2
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 2
61996: NEG
61997: PUSH
61998: LD_INT 1
62000: NEG
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 2
62008: NEG
62009: PUSH
62010: LD_INT 2
62012: NEG
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 2
62020: NEG
62021: PUSH
62022: LD_INT 3
62024: NEG
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 3
62032: NEG
62033: PUSH
62034: LD_INT 2
62036: NEG
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 3
62044: NEG
62045: PUSH
62046: LD_INT 3
62048: NEG
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62072: LD_ADDR_VAR 0 14
62076: PUSH
62077: LD_INT 0
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 0
62089: PUSH
62090: LD_INT 1
62092: NEG
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 1
62100: PUSH
62101: LD_INT 0
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 1
62110: PUSH
62111: LD_INT 1
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 0
62120: PUSH
62121: LD_INT 1
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 1
62130: NEG
62131: PUSH
62132: LD_INT 0
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 1
62141: NEG
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 1
62153: NEG
62154: PUSH
62155: LD_INT 2
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: LD_INT 2
62168: NEG
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 1
62176: PUSH
62177: LD_INT 1
62179: NEG
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 1
62187: PUSH
62188: LD_INT 2
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: LD_INT 2
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: LD_INT 1
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 1
62218: NEG
62219: PUSH
62220: LD_INT 3
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 0
62230: PUSH
62231: LD_INT 3
62233: NEG
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 1
62241: PUSH
62242: LD_INT 2
62244: NEG
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62268: LD_ADDR_VAR 0 15
62272: PUSH
62273: LD_INT 0
62275: PUSH
62276: LD_INT 0
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: LD_INT 1
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 1
62296: PUSH
62297: LD_INT 0
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: PUSH
62307: LD_INT 1
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 0
62316: PUSH
62317: LD_INT 1
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 1
62326: NEG
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 1
62337: NEG
62338: PUSH
62339: LD_INT 1
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: LD_INT 1
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 2
62360: PUSH
62361: LD_INT 0
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 2
62370: PUSH
62371: LD_INT 1
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 1
62380: NEG
62381: PUSH
62382: LD_INT 1
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 2
62391: NEG
62392: PUSH
62393: LD_INT 0
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 2
62402: NEG
62403: PUSH
62404: LD_INT 1
62406: NEG
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 2
62414: PUSH
62415: LD_INT 1
62417: NEG
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 3
62425: PUSH
62426: LD_INT 0
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 3
62435: PUSH
62436: LD_INT 1
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62461: LD_ADDR_VAR 0 16
62465: PUSH
62466: LD_INT 0
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 0
62478: PUSH
62479: LD_INT 1
62481: NEG
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 1
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 1
62499: PUSH
62500: LD_INT 1
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 0
62509: PUSH
62510: LD_INT 1
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 1
62519: NEG
62520: PUSH
62521: LD_INT 0
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 1
62530: NEG
62531: PUSH
62532: LD_INT 1
62534: NEG
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 1
62542: NEG
62543: PUSH
62544: LD_INT 2
62546: NEG
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 2
62554: PUSH
62555: LD_INT 1
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 2
62564: PUSH
62565: LD_INT 2
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 1
62574: PUSH
62575: LD_INT 2
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 2
62584: NEG
62585: PUSH
62586: LD_INT 1
62588: NEG
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 2
62596: NEG
62597: PUSH
62598: LD_INT 2
62600: NEG
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 3
62608: PUSH
62609: LD_INT 2
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 3
62618: PUSH
62619: LD_INT 3
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 2
62628: PUSH
62629: LD_INT 3
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62654: LD_ADDR_VAR 0 17
62658: PUSH
62659: LD_INT 0
62661: PUSH
62662: LD_INT 0
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: LD_INT 1
62674: NEG
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 1
62682: PUSH
62683: LD_INT 0
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 1
62692: PUSH
62693: LD_INT 1
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 0
62702: PUSH
62703: LD_INT 1
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 1
62712: NEG
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 1
62723: NEG
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 1
62735: NEG
62736: PUSH
62737: LD_INT 2
62739: NEG
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 0
62747: PUSH
62748: LD_INT 2
62750: NEG
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 1
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 2
62769: PUSH
62770: LD_INT 0
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 2
62779: PUSH
62780: LD_INT 1
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 2
62789: PUSH
62790: LD_INT 2
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 1
62799: PUSH
62800: LD_INT 2
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 0
62809: PUSH
62810: LD_INT 2
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 1
62819: NEG
62820: PUSH
62821: LD_INT 1
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 2
62830: NEG
62831: PUSH
62832: LD_INT 0
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 2
62841: NEG
62842: PUSH
62843: LD_INT 1
62845: NEG
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 2
62853: NEG
62854: PUSH
62855: LD_INT 2
62857: NEG
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62884: LD_ADDR_VAR 0 18
62888: PUSH
62889: LD_INT 0
62891: PUSH
62892: LD_INT 0
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: LD_INT 1
62904: NEG
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 1
62912: PUSH
62913: LD_INT 0
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 1
62922: PUSH
62923: LD_INT 1
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 0
62932: PUSH
62933: LD_INT 1
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 1
62942: NEG
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 1
62953: NEG
62954: PUSH
62955: LD_INT 1
62957: NEG
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 1
62965: NEG
62966: PUSH
62967: LD_INT 2
62969: NEG
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 0
62977: PUSH
62978: LD_INT 2
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 1
62988: PUSH
62989: LD_INT 1
62991: NEG
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 2
62999: PUSH
63000: LD_INT 0
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 2
63009: PUSH
63010: LD_INT 1
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 2
63019: PUSH
63020: LD_INT 2
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 1
63029: PUSH
63030: LD_INT 2
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 0
63039: PUSH
63040: LD_INT 2
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 1
63049: NEG
63050: PUSH
63051: LD_INT 1
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 2
63060: NEG
63061: PUSH
63062: LD_INT 0
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 2
63071: NEG
63072: PUSH
63073: LD_INT 1
63075: NEG
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 2
63083: NEG
63084: PUSH
63085: LD_INT 2
63087: NEG
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63114: LD_ADDR_VAR 0 19
63118: PUSH
63119: LD_INT 0
63121: PUSH
63122: LD_INT 0
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 0
63131: PUSH
63132: LD_INT 1
63134: NEG
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 1
63142: PUSH
63143: LD_INT 0
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 1
63152: PUSH
63153: LD_INT 1
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 0
63162: PUSH
63163: LD_INT 1
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 1
63172: NEG
63173: PUSH
63174: LD_INT 0
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 1
63183: NEG
63184: PUSH
63185: LD_INT 1
63187: NEG
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 1
63195: NEG
63196: PUSH
63197: LD_INT 2
63199: NEG
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 0
63207: PUSH
63208: LD_INT 2
63210: NEG
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 1
63218: PUSH
63219: LD_INT 1
63221: NEG
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 2
63229: PUSH
63230: LD_INT 0
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 2
63239: PUSH
63240: LD_INT 1
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 2
63249: PUSH
63250: LD_INT 2
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 1
63259: PUSH
63260: LD_INT 2
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 0
63269: PUSH
63270: LD_INT 2
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 1
63279: NEG
63280: PUSH
63281: LD_INT 1
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 2
63290: NEG
63291: PUSH
63292: LD_INT 0
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 2
63301: NEG
63302: PUSH
63303: LD_INT 1
63305: NEG
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 2
63313: NEG
63314: PUSH
63315: LD_INT 2
63317: NEG
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63344: LD_ADDR_VAR 0 20
63348: PUSH
63349: LD_INT 0
63351: PUSH
63352: LD_INT 0
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 0
63361: PUSH
63362: LD_INT 1
63364: NEG
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 1
63372: PUSH
63373: LD_INT 0
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 1
63382: PUSH
63383: LD_INT 1
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 0
63392: PUSH
63393: LD_INT 1
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 1
63402: NEG
63403: PUSH
63404: LD_INT 0
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 1
63413: NEG
63414: PUSH
63415: LD_INT 1
63417: NEG
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 1
63425: NEG
63426: PUSH
63427: LD_INT 2
63429: NEG
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 0
63437: PUSH
63438: LD_INT 2
63440: NEG
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 1
63448: PUSH
63449: LD_INT 1
63451: NEG
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 2
63459: PUSH
63460: LD_INT 0
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 2
63469: PUSH
63470: LD_INT 1
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 2
63479: PUSH
63480: LD_INT 2
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 1
63489: PUSH
63490: LD_INT 2
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: LD_INT 2
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: LD_INT 1
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 2
63520: NEG
63521: PUSH
63522: LD_INT 0
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 2
63531: NEG
63532: PUSH
63533: LD_INT 1
63535: NEG
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 2
63543: NEG
63544: PUSH
63545: LD_INT 2
63547: NEG
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63574: LD_ADDR_VAR 0 21
63578: PUSH
63579: LD_INT 0
63581: PUSH
63582: LD_INT 0
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 0
63591: PUSH
63592: LD_INT 1
63594: NEG
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 1
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 1
63612: PUSH
63613: LD_INT 1
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 0
63622: PUSH
63623: LD_INT 1
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 1
63632: NEG
63633: PUSH
63634: LD_INT 0
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 1
63643: NEG
63644: PUSH
63645: LD_INT 1
63647: NEG
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 1
63655: NEG
63656: PUSH
63657: LD_INT 2
63659: NEG
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: LD_INT 2
63670: NEG
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 1
63678: PUSH
63679: LD_INT 1
63681: NEG
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 2
63689: PUSH
63690: LD_INT 0
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 2
63699: PUSH
63700: LD_INT 1
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 2
63709: PUSH
63710: LD_INT 2
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 1
63719: PUSH
63720: LD_INT 2
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 0
63729: PUSH
63730: LD_INT 2
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 1
63739: NEG
63740: PUSH
63741: LD_INT 1
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 2
63750: NEG
63751: PUSH
63752: LD_INT 0
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 2
63761: NEG
63762: PUSH
63763: LD_INT 1
63765: NEG
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 2
63773: NEG
63774: PUSH
63775: LD_INT 2
63777: NEG
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63804: LD_ADDR_VAR 0 22
63808: PUSH
63809: LD_INT 0
63811: PUSH
63812: LD_INT 0
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 0
63821: PUSH
63822: LD_INT 1
63824: NEG
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 1
63832: PUSH
63833: LD_INT 0
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 1
63842: PUSH
63843: LD_INT 1
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 0
63852: PUSH
63853: LD_INT 1
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 1
63862: NEG
63863: PUSH
63864: LD_INT 0
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 1
63873: NEG
63874: PUSH
63875: LD_INT 1
63877: NEG
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 1
63885: NEG
63886: PUSH
63887: LD_INT 2
63889: NEG
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 0
63897: PUSH
63898: LD_INT 2
63900: NEG
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 1
63908: PUSH
63909: LD_INT 1
63911: NEG
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 2
63919: PUSH
63920: LD_INT 0
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 2
63929: PUSH
63930: LD_INT 1
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 2
63939: PUSH
63940: LD_INT 2
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 1
63949: PUSH
63950: LD_INT 2
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 0
63959: PUSH
63960: LD_INT 2
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 1
63969: NEG
63970: PUSH
63971: LD_INT 1
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 2
63980: NEG
63981: PUSH
63982: LD_INT 0
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 2
63991: NEG
63992: PUSH
63993: LD_INT 1
63995: NEG
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 2
64003: NEG
64004: PUSH
64005: LD_INT 2
64007: NEG
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64034: LD_ADDR_VAR 0 23
64038: PUSH
64039: LD_INT 0
64041: PUSH
64042: LD_INT 0
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 0
64051: PUSH
64052: LD_INT 1
64054: NEG
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 1
64062: PUSH
64063: LD_INT 0
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 1
64072: PUSH
64073: LD_INT 1
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 0
64082: PUSH
64083: LD_INT 1
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 1
64092: NEG
64093: PUSH
64094: LD_INT 0
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 1
64103: NEG
64104: PUSH
64105: LD_INT 1
64107: NEG
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 1
64115: NEG
64116: PUSH
64117: LD_INT 2
64119: NEG
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 0
64127: PUSH
64128: LD_INT 2
64130: NEG
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 1
64138: PUSH
64139: LD_INT 1
64141: NEG
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 2
64149: PUSH
64150: LD_INT 0
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 2
64159: PUSH
64160: LD_INT 1
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 2
64169: PUSH
64170: LD_INT 2
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 1
64179: PUSH
64180: LD_INT 2
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 0
64189: PUSH
64190: LD_INT 2
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 1
64199: NEG
64200: PUSH
64201: LD_INT 1
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 2
64210: NEG
64211: PUSH
64212: LD_INT 0
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 2
64221: NEG
64222: PUSH
64223: LD_INT 1
64225: NEG
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 2
64233: NEG
64234: PUSH
64235: LD_INT 2
64237: NEG
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 2
64245: NEG
64246: PUSH
64247: LD_INT 3
64249: NEG
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 1
64257: NEG
64258: PUSH
64259: LD_INT 3
64261: NEG
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 1
64269: PUSH
64270: LD_INT 2
64272: NEG
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 2
64280: PUSH
64281: LD_INT 1
64283: NEG
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
64314: LD_ADDR_VAR 0 24
64318: PUSH
64319: LD_INT 0
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 0
64331: PUSH
64332: LD_INT 1
64334: NEG
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 1
64342: PUSH
64343: LD_INT 0
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 1
64352: PUSH
64353: LD_INT 1
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 0
64362: PUSH
64363: LD_INT 1
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 1
64372: NEG
64373: PUSH
64374: LD_INT 0
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 1
64383: NEG
64384: PUSH
64385: LD_INT 1
64387: NEG
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 1
64395: NEG
64396: PUSH
64397: LD_INT 2
64399: NEG
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 0
64407: PUSH
64408: LD_INT 2
64410: NEG
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 1
64418: PUSH
64419: LD_INT 1
64421: NEG
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 2
64429: PUSH
64430: LD_INT 0
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 2
64439: PUSH
64440: LD_INT 1
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 2
64449: PUSH
64450: LD_INT 2
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 1
64459: PUSH
64460: LD_INT 2
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 0
64469: PUSH
64470: LD_INT 2
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 1
64479: NEG
64480: PUSH
64481: LD_INT 1
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 2
64490: NEG
64491: PUSH
64492: LD_INT 0
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 2
64501: NEG
64502: PUSH
64503: LD_INT 1
64505: NEG
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 2
64513: NEG
64514: PUSH
64515: LD_INT 2
64517: NEG
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 1
64525: PUSH
64526: LD_INT 2
64528: NEG
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 2
64536: PUSH
64537: LD_INT 1
64539: NEG
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 3
64547: PUSH
64548: LD_INT 1
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 3
64557: PUSH
64558: LD_INT 2
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
64590: LD_ADDR_VAR 0 25
64594: PUSH
64595: LD_INT 0
64597: PUSH
64598: LD_INT 0
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 0
64607: PUSH
64608: LD_INT 1
64610: NEG
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 1
64618: PUSH
64619: LD_INT 0
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 1
64628: PUSH
64629: LD_INT 1
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 0
64638: PUSH
64639: LD_INT 1
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 1
64648: NEG
64649: PUSH
64650: LD_INT 0
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 1
64659: NEG
64660: PUSH
64661: LD_INT 1
64663: NEG
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 1
64671: NEG
64672: PUSH
64673: LD_INT 2
64675: NEG
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 0
64683: PUSH
64684: LD_INT 2
64686: NEG
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 1
64694: PUSH
64695: LD_INT 1
64697: NEG
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 2
64705: PUSH
64706: LD_INT 0
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 2
64715: PUSH
64716: LD_INT 1
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 2
64725: PUSH
64726: LD_INT 2
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 1
64735: PUSH
64736: LD_INT 2
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 0
64745: PUSH
64746: LD_INT 2
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 1
64755: NEG
64756: PUSH
64757: LD_INT 1
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 2
64766: NEG
64767: PUSH
64768: LD_INT 0
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 2
64777: NEG
64778: PUSH
64779: LD_INT 1
64781: NEG
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 2
64789: NEG
64790: PUSH
64791: LD_INT 2
64793: NEG
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 3
64801: PUSH
64802: LD_INT 1
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 3
64811: PUSH
64812: LD_INT 2
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 2
64821: PUSH
64822: LD_INT 3
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 1
64831: PUSH
64832: LD_INT 3
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64864: LD_ADDR_VAR 0 26
64868: PUSH
64869: LD_INT 0
64871: PUSH
64872: LD_INT 0
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 0
64881: PUSH
64882: LD_INT 1
64884: NEG
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 1
64892: PUSH
64893: LD_INT 0
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 1
64902: PUSH
64903: LD_INT 1
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 0
64912: PUSH
64913: LD_INT 1
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 1
64922: NEG
64923: PUSH
64924: LD_INT 0
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 1
64933: NEG
64934: PUSH
64935: LD_INT 1
64937: NEG
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 1
64945: NEG
64946: PUSH
64947: LD_INT 2
64949: NEG
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 0
64957: PUSH
64958: LD_INT 2
64960: NEG
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 1
64968: PUSH
64969: LD_INT 1
64971: NEG
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 2
64979: PUSH
64980: LD_INT 0
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 2
64989: PUSH
64990: LD_INT 1
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 2
64999: PUSH
65000: LD_INT 2
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 1
65009: PUSH
65010: LD_INT 2
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 0
65019: PUSH
65020: LD_INT 2
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 1
65029: NEG
65030: PUSH
65031: LD_INT 1
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 2
65040: NEG
65041: PUSH
65042: LD_INT 0
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 2
65051: NEG
65052: PUSH
65053: LD_INT 1
65055: NEG
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 2
65063: NEG
65064: PUSH
65065: LD_INT 2
65067: NEG
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 2
65075: PUSH
65076: LD_INT 3
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 1
65085: PUSH
65086: LD_INT 3
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 1
65095: NEG
65096: PUSH
65097: LD_INT 2
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 2
65106: NEG
65107: PUSH
65108: LD_INT 1
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65140: LD_ADDR_VAR 0 27
65144: PUSH
65145: LD_INT 0
65147: PUSH
65148: LD_INT 0
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 0
65157: PUSH
65158: LD_INT 1
65160: NEG
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 1
65168: PUSH
65169: LD_INT 0
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 1
65178: PUSH
65179: LD_INT 1
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 0
65188: PUSH
65189: LD_INT 1
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 1
65198: NEG
65199: PUSH
65200: LD_INT 0
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 1
65209: NEG
65210: PUSH
65211: LD_INT 1
65213: NEG
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 1
65221: NEG
65222: PUSH
65223: LD_INT 2
65225: NEG
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 0
65233: PUSH
65234: LD_INT 2
65236: NEG
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 1
65244: PUSH
65245: LD_INT 1
65247: NEG
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 2
65255: PUSH
65256: LD_INT 0
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 2
65265: PUSH
65266: LD_INT 1
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 2
65275: PUSH
65276: LD_INT 2
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 1
65285: PUSH
65286: LD_INT 2
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 0
65295: PUSH
65296: LD_INT 2
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 1
65305: NEG
65306: PUSH
65307: LD_INT 1
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 2
65316: NEG
65317: PUSH
65318: LD_INT 0
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 2
65327: NEG
65328: PUSH
65329: LD_INT 1
65331: NEG
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 2
65339: NEG
65340: PUSH
65341: LD_INT 2
65343: NEG
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 1
65351: NEG
65352: PUSH
65353: LD_INT 2
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 2
65362: NEG
65363: PUSH
65364: LD_INT 1
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 3
65373: NEG
65374: PUSH
65375: LD_INT 1
65377: NEG
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 3
65385: NEG
65386: PUSH
65387: LD_INT 2
65389: NEG
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65420: LD_ADDR_VAR 0 28
65424: PUSH
65425: LD_INT 0
65427: PUSH
65428: LD_INT 0
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 0
65437: PUSH
65438: LD_INT 1
65440: NEG
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 1
65448: PUSH
65449: LD_INT 0
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 1
65458: PUSH
65459: LD_INT 1
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 0
65468: PUSH
65469: LD_INT 1
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 1
65478: NEG
65479: PUSH
65480: LD_INT 0
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 1
65489: NEG
65490: PUSH
65491: LD_INT 1
65493: NEG
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 1
65501: NEG
65502: PUSH
65503: LD_INT 2
65505: NEG
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 0
65513: PUSH
65514: LD_INT 2
65516: NEG
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 1
65524: PUSH
65525: LD_INT 1
65527: NEG
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 2
65535: PUSH
65536: LD_INT 0
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 2
65545: PUSH
65546: LD_INT 1
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 2
65555: PUSH
65556: LD_INT 2
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 1
65565: PUSH
65566: LD_INT 2
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 0
65575: PUSH
65576: LD_INT 2
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 1
65585: NEG
65586: PUSH
65587: LD_INT 1
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 2
65596: NEG
65597: PUSH
65598: LD_INT 0
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 2
65607: NEG
65608: PUSH
65609: LD_INT 1
65611: NEG
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 2
65619: NEG
65620: PUSH
65621: LD_INT 2
65623: NEG
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 2
65631: NEG
65632: PUSH
65633: LD_INT 3
65635: NEG
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 1
65643: NEG
65644: PUSH
65645: LD_INT 3
65647: NEG
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 3
65655: NEG
65656: PUSH
65657: LD_INT 1
65659: NEG
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 3
65667: NEG
65668: PUSH
65669: LD_INT 2
65671: NEG
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65702: LD_ADDR_VAR 0 29
65706: PUSH
65707: LD_INT 0
65709: PUSH
65710: LD_INT 0
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 0
65719: PUSH
65720: LD_INT 1
65722: NEG
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 1
65730: PUSH
65731: LD_INT 0
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 1
65740: PUSH
65741: LD_INT 1
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 0
65750: PUSH
65751: LD_INT 1
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 1
65760: NEG
65761: PUSH
65762: LD_INT 0
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 1
65771: NEG
65772: PUSH
65773: LD_INT 1
65775: NEG
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 1
65783: NEG
65784: PUSH
65785: LD_INT 2
65787: NEG
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 0
65795: PUSH
65796: LD_INT 2
65798: NEG
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 1
65806: PUSH
65807: LD_INT 1
65809: NEG
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 2
65817: PUSH
65818: LD_INT 0
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 2
65827: PUSH
65828: LD_INT 1
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 1
65837: PUSH
65838: LD_INT 2
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 0
65847: PUSH
65848: LD_INT 2
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 1
65857: NEG
65858: PUSH
65859: LD_INT 1
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 2
65868: NEG
65869: PUSH
65870: LD_INT 1
65872: NEG
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 2
65880: NEG
65881: PUSH
65882: LD_INT 2
65884: NEG
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 2
65892: NEG
65893: PUSH
65894: LD_INT 3
65896: NEG
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 2
65904: PUSH
65905: LD_INT 1
65907: NEG
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 3
65915: PUSH
65916: LD_INT 1
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 1
65925: PUSH
65926: LD_INT 3
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 1
65935: NEG
65936: PUSH
65937: LD_INT 2
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 3
65946: NEG
65947: PUSH
65948: LD_INT 2
65950: NEG
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65981: LD_ADDR_VAR 0 30
65985: PUSH
65986: LD_INT 0
65988: PUSH
65989: LD_INT 0
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 0
65998: PUSH
65999: LD_INT 1
66001: NEG
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 1
66009: PUSH
66010: LD_INT 0
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 1
66019: PUSH
66020: LD_INT 1
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 0
66029: PUSH
66030: LD_INT 1
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 1
66039: NEG
66040: PUSH
66041: LD_INT 0
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 1
66050: NEG
66051: PUSH
66052: LD_INT 1
66054: NEG
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 1
66062: NEG
66063: PUSH
66064: LD_INT 2
66066: NEG
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 0
66074: PUSH
66075: LD_INT 2
66077: NEG
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 1
66085: PUSH
66086: LD_INT 1
66088: NEG
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 2
66096: PUSH
66097: LD_INT 0
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 2
66106: PUSH
66107: LD_INT 1
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 2
66116: PUSH
66117: LD_INT 2
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 1
66126: PUSH
66127: LD_INT 2
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 1
66136: NEG
66137: PUSH
66138: LD_INT 1
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 2
66147: NEG
66148: PUSH
66149: LD_INT 0
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 2
66158: NEG
66159: PUSH
66160: LD_INT 1
66162: NEG
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 1
66170: NEG
66171: PUSH
66172: LD_INT 3
66174: NEG
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 1
66182: PUSH
66183: LD_INT 2
66185: NEG
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 3
66193: PUSH
66194: LD_INT 2
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 2
66203: PUSH
66204: LD_INT 3
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 2
66213: NEG
66214: PUSH
66215: LD_INT 1
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 3
66224: NEG
66225: PUSH
66226: LD_INT 1
66228: NEG
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
66259: LD_ADDR_VAR 0 31
66263: PUSH
66264: LD_INT 0
66266: PUSH
66267: LD_INT 0
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 0
66276: PUSH
66277: LD_INT 1
66279: NEG
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 1
66287: PUSH
66288: LD_INT 0
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 1
66297: PUSH
66298: LD_INT 1
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 0
66307: PUSH
66308: LD_INT 1
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 1
66317: NEG
66318: PUSH
66319: LD_INT 0
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 1
66328: NEG
66329: PUSH
66330: LD_INT 1
66332: NEG
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_INT 1
66340: NEG
66341: PUSH
66342: LD_INT 2
66344: NEG
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 1
66352: PUSH
66353: LD_INT 1
66355: NEG
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 2
66363: PUSH
66364: LD_INT 0
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PUSH
66371: LD_INT 2
66373: PUSH
66374: LD_INT 1
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: LD_INT 2
66383: PUSH
66384: LD_INT 2
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: PUSH
66391: LD_INT 1
66393: PUSH
66394: LD_INT 2
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: LD_INT 0
66403: PUSH
66404: LD_INT 2
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 1
66413: NEG
66414: PUSH
66415: LD_INT 1
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 2
66424: NEG
66425: PUSH
66426: LD_INT 1
66428: NEG
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 2
66436: NEG
66437: PUSH
66438: LD_INT 2
66440: NEG
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 2
66448: NEG
66449: PUSH
66450: LD_INT 3
66452: NEG
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 2
66460: PUSH
66461: LD_INT 1
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 3
66471: PUSH
66472: LD_INT 1
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 1
66481: PUSH
66482: LD_INT 3
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 1
66491: NEG
66492: PUSH
66493: LD_INT 2
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 3
66502: NEG
66503: PUSH
66504: LD_INT 2
66506: NEG
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66537: LD_ADDR_VAR 0 32
66541: PUSH
66542: LD_INT 0
66544: PUSH
66545: LD_INT 0
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 0
66554: PUSH
66555: LD_INT 1
66557: NEG
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 1
66565: PUSH
66566: LD_INT 0
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 1
66575: PUSH
66576: LD_INT 1
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: LD_INT 0
66585: PUSH
66586: LD_INT 1
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 1
66595: NEG
66596: PUSH
66597: LD_INT 0
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 1
66606: NEG
66607: PUSH
66608: LD_INT 1
66610: NEG
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 1
66618: NEG
66619: PUSH
66620: LD_INT 2
66622: NEG
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 0
66630: PUSH
66631: LD_INT 2
66633: NEG
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 1
66641: PUSH
66642: LD_INT 1
66644: NEG
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 2
66652: PUSH
66653: LD_INT 1
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 2
66662: PUSH
66663: LD_INT 2
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 1
66672: PUSH
66673: LD_INT 2
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 0
66682: PUSH
66683: LD_INT 2
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 1
66692: NEG
66693: PUSH
66694: LD_INT 1
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 2
66703: NEG
66704: PUSH
66705: LD_INT 0
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 2
66714: NEG
66715: PUSH
66716: LD_INT 1
66718: NEG
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 1
66726: NEG
66727: PUSH
66728: LD_INT 3
66730: NEG
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 1
66738: PUSH
66739: LD_INT 2
66741: NEG
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 3
66749: PUSH
66750: LD_INT 2
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 2
66759: PUSH
66760: LD_INT 3
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 2
66769: NEG
66770: PUSH
66771: LD_INT 1
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 3
66780: NEG
66781: PUSH
66782: LD_INT 1
66784: NEG
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
66815: LD_ADDR_VAR 0 33
66819: PUSH
66820: LD_INT 0
66822: PUSH
66823: LD_INT 0
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 0
66832: PUSH
66833: LD_INT 1
66835: NEG
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 1
66843: PUSH
66844: LD_INT 0
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 1
66853: PUSH
66854: LD_INT 1
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 0
66863: PUSH
66864: LD_INT 1
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 1
66873: NEG
66874: PUSH
66875: LD_INT 0
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 1
66884: NEG
66885: PUSH
66886: LD_INT 1
66888: NEG
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 1
66896: NEG
66897: PUSH
66898: LD_INT 2
66900: NEG
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 1
66908: PUSH
66909: LD_INT 1
66911: NEG
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 2
66919: PUSH
66920: LD_INT 0
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 2
66929: PUSH
66930: LD_INT 1
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PUSH
66937: LD_INT 1
66939: PUSH
66940: LD_INT 2
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 0
66949: PUSH
66950: LD_INT 2
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 1
66959: NEG
66960: PUSH
66961: LD_INT 1
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 2
66970: NEG
66971: PUSH
66972: LD_INT 0
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 2
66981: NEG
66982: PUSH
66983: LD_INT 1
66985: NEG
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 2
66993: NEG
66994: PUSH
66995: LD_INT 2
66997: NEG
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 2
67005: NEG
67006: PUSH
67007: LD_INT 3
67009: NEG
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: LD_INT 2
67017: PUSH
67018: LD_INT 1
67020: NEG
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 3
67028: PUSH
67029: LD_INT 1
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 1
67038: PUSH
67039: LD_INT 3
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 1
67048: NEG
67049: PUSH
67050: LD_INT 2
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: LD_INT 3
67059: NEG
67060: PUSH
67061: LD_INT 2
67063: NEG
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67094: LD_ADDR_VAR 0 34
67098: PUSH
67099: LD_INT 0
67101: PUSH
67102: LD_INT 0
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PUSH
67109: LD_INT 0
67111: PUSH
67112: LD_INT 1
67114: NEG
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 1
67122: PUSH
67123: LD_INT 0
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 1
67132: PUSH
67133: LD_INT 1
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 0
67142: PUSH
67143: LD_INT 1
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 1
67152: NEG
67153: PUSH
67154: LD_INT 0
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 1
67163: NEG
67164: PUSH
67165: LD_INT 1
67167: NEG
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 1
67175: NEG
67176: PUSH
67177: LD_INT 2
67179: NEG
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 0
67187: PUSH
67188: LD_INT 2
67190: NEG
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: PUSH
67196: LD_INT 1
67198: PUSH
67199: LD_INT 1
67201: NEG
67202: PUSH
67203: EMPTY
67204: LIST
67205: LIST
67206: PUSH
67207: LD_INT 2
67209: PUSH
67210: LD_INT 1
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 2
67219: PUSH
67220: LD_INT 2
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 1
67229: PUSH
67230: LD_INT 2
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 1
67239: NEG
67240: PUSH
67241: LD_INT 1
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 2
67250: NEG
67251: PUSH
67252: LD_INT 0
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 2
67261: NEG
67262: PUSH
67263: LD_INT 1
67265: NEG
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 2
67273: NEG
67274: PUSH
67275: LD_INT 2
67277: NEG
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 1
67285: NEG
67286: PUSH
67287: LD_INT 3
67289: NEG
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 1
67297: PUSH
67298: LD_INT 2
67300: NEG
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 3
67308: PUSH
67309: LD_INT 2
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 2
67318: PUSH
67319: LD_INT 3
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 2
67328: NEG
67329: PUSH
67330: LD_INT 1
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 3
67339: NEG
67340: PUSH
67341: LD_INT 1
67343: NEG
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: LIST
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
67374: LD_ADDR_VAR 0 35
67378: PUSH
67379: LD_INT 0
67381: PUSH
67382: LD_INT 0
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 0
67391: PUSH
67392: LD_INT 1
67394: NEG
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 1
67402: PUSH
67403: LD_INT 0
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 1
67412: PUSH
67413: LD_INT 1
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 0
67422: PUSH
67423: LD_INT 1
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 1
67432: NEG
67433: PUSH
67434: LD_INT 0
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 1
67443: NEG
67444: PUSH
67445: LD_INT 1
67447: NEG
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 2
67455: PUSH
67456: LD_INT 1
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 2
67465: NEG
67466: PUSH
67467: LD_INT 1
67469: NEG
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
67486: LD_ADDR_VAR 0 36
67490: PUSH
67491: LD_INT 0
67493: PUSH
67494: LD_INT 0
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 0
67503: PUSH
67504: LD_INT 1
67506: NEG
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: LD_INT 1
67514: PUSH
67515: LD_INT 0
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 1
67524: PUSH
67525: LD_INT 1
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 0
67534: PUSH
67535: LD_INT 1
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 1
67544: NEG
67545: PUSH
67546: LD_INT 0
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 1
67555: NEG
67556: PUSH
67557: LD_INT 1
67559: NEG
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 1
67567: NEG
67568: PUSH
67569: LD_INT 2
67571: NEG
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 1
67579: PUSH
67580: LD_INT 2
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: LIST
67591: LIST
67592: LIST
67593: LIST
67594: LIST
67595: LIST
67596: LIST
67597: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
67598: LD_ADDR_VAR 0 37
67602: PUSH
67603: LD_INT 0
67605: PUSH
67606: LD_INT 0
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 0
67615: PUSH
67616: LD_INT 1
67618: NEG
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: PUSH
67624: LD_INT 1
67626: PUSH
67627: LD_INT 0
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 1
67636: PUSH
67637: LD_INT 1
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 0
67646: PUSH
67647: LD_INT 1
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 1
67656: NEG
67657: PUSH
67658: LD_INT 0
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 1
67667: NEG
67668: PUSH
67669: LD_INT 1
67671: NEG
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 1
67679: PUSH
67680: LD_INT 1
67682: NEG
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 1
67690: NEG
67691: PUSH
67692: LD_INT 1
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
67710: LD_ADDR_VAR 0 38
67714: PUSH
67715: LD_INT 0
67717: PUSH
67718: LD_INT 0
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 0
67727: PUSH
67728: LD_INT 1
67730: NEG
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: LD_INT 1
67738: PUSH
67739: LD_INT 0
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 1
67748: PUSH
67749: LD_INT 1
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 0
67758: PUSH
67759: LD_INT 1
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 1
67768: NEG
67769: PUSH
67770: LD_INT 0
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: LD_INT 1
67779: NEG
67780: PUSH
67781: LD_INT 1
67783: NEG
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 2
67791: PUSH
67792: LD_INT 1
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 2
67801: NEG
67802: PUSH
67803: LD_INT 1
67805: NEG
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
67822: LD_ADDR_VAR 0 39
67826: PUSH
67827: LD_INT 0
67829: PUSH
67830: LD_INT 0
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 0
67839: PUSH
67840: LD_INT 1
67842: NEG
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 1
67850: PUSH
67851: LD_INT 0
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 1
67860: PUSH
67861: LD_INT 1
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 0
67870: PUSH
67871: LD_INT 1
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 1
67880: NEG
67881: PUSH
67882: LD_INT 0
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: LD_INT 1
67891: NEG
67892: PUSH
67893: LD_INT 1
67895: NEG
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 1
67903: NEG
67904: PUSH
67905: LD_INT 2
67907: NEG
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 1
67915: PUSH
67916: LD_INT 2
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: LIST
67933: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
67934: LD_ADDR_VAR 0 40
67938: PUSH
67939: LD_INT 0
67941: PUSH
67942: LD_INT 0
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 0
67951: PUSH
67952: LD_INT 1
67954: NEG
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 1
67962: PUSH
67963: LD_INT 0
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 1
67972: PUSH
67973: LD_INT 1
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 0
67982: PUSH
67983: LD_INT 1
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 1
67992: NEG
67993: PUSH
67994: LD_INT 0
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 1
68003: NEG
68004: PUSH
68005: LD_INT 1
68007: NEG
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 1
68015: PUSH
68016: LD_INT 1
68018: NEG
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 1
68026: NEG
68027: PUSH
68028: LD_INT 1
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68046: LD_ADDR_VAR 0 41
68050: PUSH
68051: LD_INT 0
68053: PUSH
68054: LD_INT 0
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 0
68063: PUSH
68064: LD_INT 1
68066: NEG
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 1
68074: PUSH
68075: LD_INT 0
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 1
68084: PUSH
68085: LD_INT 1
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 0
68094: PUSH
68095: LD_INT 1
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 1
68104: NEG
68105: PUSH
68106: LD_INT 0
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 1
68115: NEG
68116: PUSH
68117: LD_INT 1
68119: NEG
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 1
68127: NEG
68128: PUSH
68129: LD_INT 2
68131: NEG
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 1
68139: PUSH
68140: LD_INT 1
68142: NEG
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 2
68150: PUSH
68151: LD_INT 0
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 2
68160: PUSH
68161: LD_INT 1
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 2
68170: PUSH
68171: LD_INT 2
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 1
68180: PUSH
68181: LD_INT 2
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 1
68190: NEG
68191: PUSH
68192: LD_INT 1
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 2
68201: NEG
68202: PUSH
68203: LD_INT 0
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 2
68212: NEG
68213: PUSH
68214: LD_INT 1
68216: NEG
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 2
68224: NEG
68225: PUSH
68226: LD_INT 2
68228: NEG
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 2
68236: NEG
68237: PUSH
68238: LD_INT 3
68240: NEG
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 2
68248: PUSH
68249: LD_INT 1
68251: NEG
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 3
68259: PUSH
68260: LD_INT 0
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 3
68269: PUSH
68270: LD_INT 1
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: PUSH
68277: LD_INT 3
68279: PUSH
68280: LD_INT 2
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: LD_INT 3
68289: PUSH
68290: LD_INT 3
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 2
68299: PUSH
68300: LD_INT 3
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 2
68309: NEG
68310: PUSH
68311: LD_INT 1
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 3
68320: NEG
68321: PUSH
68322: LD_INT 0
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 3
68331: NEG
68332: PUSH
68333: LD_INT 1
68335: NEG
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 3
68343: NEG
68344: PUSH
68345: LD_INT 2
68347: NEG
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 3
68355: NEG
68356: PUSH
68357: LD_INT 3
68359: NEG
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68396: LD_ADDR_VAR 0 42
68400: PUSH
68401: LD_INT 0
68403: PUSH
68404: LD_INT 0
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 0
68413: PUSH
68414: LD_INT 1
68416: NEG
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 1
68424: PUSH
68425: LD_INT 0
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 1
68434: PUSH
68435: LD_INT 1
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 0
68444: PUSH
68445: LD_INT 1
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 1
68454: NEG
68455: PUSH
68456: LD_INT 0
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: PUSH
68463: LD_INT 1
68465: NEG
68466: PUSH
68467: LD_INT 1
68469: NEG
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: LD_INT 1
68477: NEG
68478: PUSH
68479: LD_INT 2
68481: NEG
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: PUSH
68487: LD_INT 0
68489: PUSH
68490: LD_INT 2
68492: NEG
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: PUSH
68498: LD_INT 1
68500: PUSH
68501: LD_INT 1
68503: NEG
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 2
68511: PUSH
68512: LD_INT 1
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: LD_INT 2
68521: PUSH
68522: LD_INT 2
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 1
68531: PUSH
68532: LD_INT 2
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 0
68541: PUSH
68542: LD_INT 2
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: PUSH
68549: LD_INT 1
68551: NEG
68552: PUSH
68553: LD_INT 1
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 2
68562: NEG
68563: PUSH
68564: LD_INT 1
68566: NEG
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 2
68574: NEG
68575: PUSH
68576: LD_INT 2
68578: NEG
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 2
68586: NEG
68587: PUSH
68588: LD_INT 3
68590: NEG
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 1
68598: NEG
68599: PUSH
68600: LD_INT 3
68602: NEG
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: LD_INT 0
68610: PUSH
68611: LD_INT 3
68613: NEG
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 1
68621: PUSH
68622: LD_INT 2
68624: NEG
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 3
68632: PUSH
68633: LD_INT 2
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 3
68642: PUSH
68643: LD_INT 3
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 2
68652: PUSH
68653: LD_INT 3
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 1
68662: PUSH
68663: LD_INT 3
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 0
68672: PUSH
68673: LD_INT 3
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 1
68682: NEG
68683: PUSH
68684: LD_INT 2
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: LD_INT 3
68693: NEG
68694: PUSH
68695: LD_INT 2
68697: NEG
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 3
68705: NEG
68706: PUSH
68707: LD_INT 3
68709: NEG
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: LIST
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68746: LD_ADDR_VAR 0 43
68750: PUSH
68751: LD_INT 0
68753: PUSH
68754: LD_INT 0
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PUSH
68761: LD_INT 0
68763: PUSH
68764: LD_INT 1
68766: NEG
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PUSH
68772: LD_INT 1
68774: PUSH
68775: LD_INT 0
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: LD_INT 1
68784: PUSH
68785: LD_INT 1
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 0
68794: PUSH
68795: LD_INT 1
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: LD_INT 1
68804: NEG
68805: PUSH
68806: LD_INT 0
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: LD_INT 1
68815: NEG
68816: PUSH
68817: LD_INT 1
68819: NEG
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: LD_INT 1
68827: NEG
68828: PUSH
68829: LD_INT 2
68831: NEG
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: LD_INT 0
68839: PUSH
68840: LD_INT 2
68842: NEG
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: PUSH
68848: LD_INT 1
68850: PUSH
68851: LD_INT 1
68853: NEG
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: PUSH
68859: LD_INT 2
68861: PUSH
68862: LD_INT 0
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: LD_INT 2
68871: PUSH
68872: LD_INT 1
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 1
68881: PUSH
68882: LD_INT 2
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 0
68891: PUSH
68892: LD_INT 2
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 1
68901: NEG
68902: PUSH
68903: LD_INT 1
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 2
68912: NEG
68913: PUSH
68914: LD_INT 0
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 2
68923: NEG
68924: PUSH
68925: LD_INT 1
68927: NEG
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 1
68935: NEG
68936: PUSH
68937: LD_INT 3
68939: NEG
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 0
68947: PUSH
68948: LD_INT 3
68950: NEG
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: LD_INT 1
68958: PUSH
68959: LD_INT 2
68961: NEG
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: LD_INT 2
68969: PUSH
68970: LD_INT 1
68972: NEG
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 3
68980: PUSH
68981: LD_INT 0
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: LD_INT 3
68990: PUSH
68991: LD_INT 1
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 1
69000: PUSH
69001: LD_INT 3
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 0
69010: PUSH
69011: LD_INT 3
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 1
69020: NEG
69021: PUSH
69022: LD_INT 2
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 2
69031: NEG
69032: PUSH
69033: LD_INT 1
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 3
69042: NEG
69043: PUSH
69044: LD_INT 0
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 3
69053: NEG
69054: PUSH
69055: LD_INT 1
69057: NEG
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69094: LD_ADDR_VAR 0 44
69098: PUSH
69099: LD_INT 0
69101: PUSH
69102: LD_INT 0
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: PUSH
69109: LD_INT 0
69111: PUSH
69112: LD_INT 1
69114: NEG
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: LD_INT 1
69122: PUSH
69123: LD_INT 0
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: PUSH
69130: LD_INT 1
69132: PUSH
69133: LD_INT 1
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: PUSH
69140: LD_INT 0
69142: PUSH
69143: LD_INT 1
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: PUSH
69150: LD_INT 1
69152: NEG
69153: PUSH
69154: LD_INT 0
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: PUSH
69161: LD_INT 1
69163: NEG
69164: PUSH
69165: LD_INT 1
69167: NEG
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 1
69175: NEG
69176: PUSH
69177: LD_INT 2
69179: NEG
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 1
69187: PUSH
69188: LD_INT 1
69190: NEG
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 2
69198: PUSH
69199: LD_INT 0
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: LD_INT 2
69208: PUSH
69209: LD_INT 1
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 2
69218: PUSH
69219: LD_INT 2
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PUSH
69226: LD_INT 1
69228: PUSH
69229: LD_INT 2
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_INT 1
69238: NEG
69239: PUSH
69240: LD_INT 1
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: LD_INT 2
69249: NEG
69250: PUSH
69251: LD_INT 0
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: PUSH
69258: LD_INT 2
69260: NEG
69261: PUSH
69262: LD_INT 1
69264: NEG
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: LD_INT 2
69272: NEG
69273: PUSH
69274: LD_INT 2
69276: NEG
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: LD_INT 2
69284: NEG
69285: PUSH
69286: LD_INT 3
69288: NEG
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: LD_INT 2
69296: PUSH
69297: LD_INT 1
69299: NEG
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: PUSH
69305: LD_INT 3
69307: PUSH
69308: LD_INT 0
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: LD_INT 3
69317: PUSH
69318: LD_INT 1
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 3
69327: PUSH
69328: LD_INT 2
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 3
69337: PUSH
69338: LD_INT 3
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 2
69347: PUSH
69348: LD_INT 3
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: PUSH
69355: LD_INT 2
69357: NEG
69358: PUSH
69359: LD_INT 1
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 3
69368: NEG
69369: PUSH
69370: LD_INT 0
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: PUSH
69377: LD_INT 3
69379: NEG
69380: PUSH
69381: LD_INT 1
69383: NEG
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: LD_INT 3
69391: NEG
69392: PUSH
69393: LD_INT 2
69395: NEG
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 3
69403: NEG
69404: PUSH
69405: LD_INT 3
69407: NEG
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: LIST
69430: LIST
69431: LIST
69432: LIST
69433: LIST
69434: LIST
69435: LIST
69436: LIST
69437: LIST
69438: LIST
69439: LIST
69440: LIST
69441: LIST
69442: LIST
69443: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69444: LD_ADDR_VAR 0 45
69448: PUSH
69449: LD_INT 0
69451: PUSH
69452: LD_INT 0
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: PUSH
69459: LD_INT 0
69461: PUSH
69462: LD_INT 1
69464: NEG
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 1
69472: PUSH
69473: LD_INT 0
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: LD_INT 1
69482: PUSH
69483: LD_INT 1
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 0
69492: PUSH
69493: LD_INT 1
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: LD_INT 1
69502: NEG
69503: PUSH
69504: LD_INT 0
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: LD_INT 1
69513: NEG
69514: PUSH
69515: LD_INT 1
69517: NEG
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 1
69525: NEG
69526: PUSH
69527: LD_INT 2
69529: NEG
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: PUSH
69535: LD_INT 0
69537: PUSH
69538: LD_INT 2
69540: NEG
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 1
69548: PUSH
69549: LD_INT 1
69551: NEG
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: PUSH
69557: LD_INT 2
69559: PUSH
69560: LD_INT 1
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 2
69569: PUSH
69570: LD_INT 2
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 1
69579: PUSH
69580: LD_INT 2
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 0
69589: PUSH
69590: LD_INT 2
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 1
69599: NEG
69600: PUSH
69601: LD_INT 1
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 2
69610: NEG
69611: PUSH
69612: LD_INT 1
69614: NEG
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 2
69622: NEG
69623: PUSH
69624: LD_INT 2
69626: NEG
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 2
69634: NEG
69635: PUSH
69636: LD_INT 3
69638: NEG
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: LD_INT 1
69646: NEG
69647: PUSH
69648: LD_INT 3
69650: NEG
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 0
69658: PUSH
69659: LD_INT 3
69661: NEG
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 1
69669: PUSH
69670: LD_INT 2
69672: NEG
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_INT 3
69680: PUSH
69681: LD_INT 2
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: LD_INT 3
69690: PUSH
69691: LD_INT 3
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 2
69700: PUSH
69701: LD_INT 3
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 1
69710: PUSH
69711: LD_INT 3
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 0
69720: PUSH
69721: LD_INT 3
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 1
69730: NEG
69731: PUSH
69732: LD_INT 2
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 3
69741: NEG
69742: PUSH
69743: LD_INT 2
69745: NEG
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: LD_INT 3
69753: NEG
69754: PUSH
69755: LD_INT 3
69757: NEG
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69794: LD_ADDR_VAR 0 46
69798: PUSH
69799: LD_INT 0
69801: PUSH
69802: LD_INT 0
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: LD_INT 0
69811: PUSH
69812: LD_INT 1
69814: NEG
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: LD_INT 1
69822: PUSH
69823: LD_INT 0
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 1
69832: PUSH
69833: LD_INT 1
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: LD_INT 0
69842: PUSH
69843: LD_INT 1
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 1
69852: NEG
69853: PUSH
69854: LD_INT 0
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_INT 1
69863: NEG
69864: PUSH
69865: LD_INT 1
69867: NEG
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 1
69875: NEG
69876: PUSH
69877: LD_INT 2
69879: NEG
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 0
69887: PUSH
69888: LD_INT 2
69890: NEG
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_INT 1
69898: PUSH
69899: LD_INT 1
69901: NEG
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 2
69909: PUSH
69910: LD_INT 0
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 2
69919: PUSH
69920: LD_INT 1
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: LD_INT 1
69929: PUSH
69930: LD_INT 2
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: PUSH
69937: LD_INT 0
69939: PUSH
69940: LD_INT 2
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 1
69949: NEG
69950: PUSH
69951: LD_INT 1
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 2
69960: NEG
69961: PUSH
69962: LD_INT 0
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 2
69971: NEG
69972: PUSH
69973: LD_INT 1
69975: NEG
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: LD_INT 1
69983: NEG
69984: PUSH
69985: LD_INT 3
69987: NEG
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: LD_INT 0
69995: PUSH
69996: LD_INT 3
69998: NEG
69999: PUSH
70000: EMPTY
70001: LIST
70002: LIST
70003: PUSH
70004: LD_INT 1
70006: PUSH
70007: LD_INT 2
70009: NEG
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: PUSH
70015: LD_INT 2
70017: PUSH
70018: LD_INT 1
70020: NEG
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: PUSH
70026: LD_INT 3
70028: PUSH
70029: LD_INT 0
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: PUSH
70036: LD_INT 3
70038: PUSH
70039: LD_INT 1
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: LD_INT 1
70048: PUSH
70049: LD_INT 3
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 0
70058: PUSH
70059: LD_INT 3
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: LD_INT 1
70068: NEG
70069: PUSH
70070: LD_INT 2
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 2
70079: NEG
70080: PUSH
70081: LD_INT 1
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 3
70090: NEG
70091: PUSH
70092: LD_INT 0
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 3
70101: NEG
70102: PUSH
70103: LD_INT 1
70105: NEG
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70142: LD_ADDR_VAR 0 47
70146: PUSH
70147: LD_INT 0
70149: PUSH
70150: LD_INT 0
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 0
70159: PUSH
70160: LD_INT 1
70162: NEG
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: PUSH
70168: LD_INT 1
70170: PUSH
70171: LD_INT 0
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: PUSH
70178: LD_INT 1
70180: PUSH
70181: LD_INT 1
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: PUSH
70188: LD_INT 0
70190: PUSH
70191: LD_INT 1
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 1
70200: NEG
70201: PUSH
70202: LD_INT 0
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 1
70211: NEG
70212: PUSH
70213: LD_INT 1
70215: NEG
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 1
70223: NEG
70224: PUSH
70225: LD_INT 2
70227: NEG
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: PUSH
70233: LD_INT 0
70235: PUSH
70236: LD_INT 2
70238: NEG
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: PUSH
70244: LD_INT 1
70246: PUSH
70247: LD_INT 1
70249: NEG
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: PUSH
70255: LD_INT 2
70257: NEG
70258: PUSH
70259: LD_INT 1
70261: NEG
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 2
70269: NEG
70270: PUSH
70271: LD_INT 2
70273: NEG
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70293: LD_ADDR_VAR 0 48
70297: PUSH
70298: LD_INT 0
70300: PUSH
70301: LD_INT 0
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 0
70310: PUSH
70311: LD_INT 1
70313: NEG
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 1
70321: PUSH
70322: LD_INT 0
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 1
70331: PUSH
70332: LD_INT 1
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 0
70341: PUSH
70342: LD_INT 1
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: PUSH
70349: LD_INT 1
70351: NEG
70352: PUSH
70353: LD_INT 0
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PUSH
70360: LD_INT 1
70362: NEG
70363: PUSH
70364: LD_INT 1
70366: NEG
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 1
70374: NEG
70375: PUSH
70376: LD_INT 2
70378: NEG
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: PUSH
70384: LD_INT 0
70386: PUSH
70387: LD_INT 2
70389: NEG
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 1
70397: PUSH
70398: LD_INT 1
70400: NEG
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: PUSH
70406: LD_INT 2
70408: PUSH
70409: LD_INT 0
70411: PUSH
70412: EMPTY
70413: LIST
70414: LIST
70415: PUSH
70416: LD_INT 2
70418: PUSH
70419: LD_INT 1
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70440: LD_ADDR_VAR 0 49
70444: PUSH
70445: LD_INT 0
70447: PUSH
70448: LD_INT 0
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: LD_INT 0
70457: PUSH
70458: LD_INT 1
70460: NEG
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: PUSH
70466: LD_INT 1
70468: PUSH
70469: LD_INT 0
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: PUSH
70476: LD_INT 1
70478: PUSH
70479: LD_INT 1
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: PUSH
70486: LD_INT 0
70488: PUSH
70489: LD_INT 1
70491: PUSH
70492: EMPTY
70493: LIST
70494: LIST
70495: PUSH
70496: LD_INT 1
70498: NEG
70499: PUSH
70500: LD_INT 0
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: PUSH
70507: LD_INT 1
70509: NEG
70510: PUSH
70511: LD_INT 1
70513: NEG
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: PUSH
70519: LD_INT 1
70521: PUSH
70522: LD_INT 1
70524: NEG
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: PUSH
70530: LD_INT 2
70532: PUSH
70533: LD_INT 0
70535: PUSH
70536: EMPTY
70537: LIST
70538: LIST
70539: PUSH
70540: LD_INT 2
70542: PUSH
70543: LD_INT 1
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 2
70552: PUSH
70553: LD_INT 2
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: PUSH
70560: LD_INT 1
70562: PUSH
70563: LD_INT 2
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70584: LD_ADDR_VAR 0 50
70588: PUSH
70589: LD_INT 0
70591: PUSH
70592: LD_INT 0
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 0
70601: PUSH
70602: LD_INT 1
70604: NEG
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 1
70612: PUSH
70613: LD_INT 0
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 1
70622: PUSH
70623: LD_INT 1
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 0
70632: PUSH
70633: LD_INT 1
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: PUSH
70640: LD_INT 1
70642: NEG
70643: PUSH
70644: LD_INT 0
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 1
70653: NEG
70654: PUSH
70655: LD_INT 1
70657: NEG
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: PUSH
70663: LD_INT 2
70665: PUSH
70666: LD_INT 1
70668: PUSH
70669: EMPTY
70670: LIST
70671: LIST
70672: PUSH
70673: LD_INT 2
70675: PUSH
70676: LD_INT 2
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: PUSH
70683: LD_INT 1
70685: PUSH
70686: LD_INT 2
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: LD_INT 0
70695: PUSH
70696: LD_INT 2
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 1
70705: NEG
70706: PUSH
70707: LD_INT 1
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: LIST
70720: LIST
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: LIST
70727: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70728: LD_ADDR_VAR 0 51
70732: PUSH
70733: LD_INT 0
70735: PUSH
70736: LD_INT 0
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: PUSH
70743: LD_INT 0
70745: PUSH
70746: LD_INT 1
70748: NEG
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: LD_INT 1
70756: PUSH
70757: LD_INT 0
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: LD_INT 1
70766: PUSH
70767: LD_INT 1
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: PUSH
70774: LD_INT 0
70776: PUSH
70777: LD_INT 1
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_INT 1
70786: NEG
70787: PUSH
70788: LD_INT 0
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: LD_INT 1
70797: NEG
70798: PUSH
70799: LD_INT 1
70801: NEG
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PUSH
70807: LD_INT 1
70809: PUSH
70810: LD_INT 2
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: PUSH
70817: LD_INT 0
70819: PUSH
70820: LD_INT 2
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 1
70829: NEG
70830: PUSH
70831: LD_INT 1
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: PUSH
70838: LD_INT 2
70840: NEG
70841: PUSH
70842: LD_INT 0
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: PUSH
70849: LD_INT 2
70851: NEG
70852: PUSH
70853: LD_INT 1
70855: NEG
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70875: LD_ADDR_VAR 0 52
70879: PUSH
70880: LD_INT 0
70882: PUSH
70883: LD_INT 0
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PUSH
70890: LD_INT 0
70892: PUSH
70893: LD_INT 1
70895: NEG
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PUSH
70901: LD_INT 1
70903: PUSH
70904: LD_INT 0
70906: PUSH
70907: EMPTY
70908: LIST
70909: LIST
70910: PUSH
70911: LD_INT 1
70913: PUSH
70914: LD_INT 1
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 0
70923: PUSH
70924: LD_INT 1
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: PUSH
70931: LD_INT 1
70933: NEG
70934: PUSH
70935: LD_INT 0
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 1
70944: NEG
70945: PUSH
70946: LD_INT 1
70948: NEG
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 1
70956: NEG
70957: PUSH
70958: LD_INT 2
70960: NEG
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 1
70968: NEG
70969: PUSH
70970: LD_INT 1
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: PUSH
70977: LD_INT 2
70979: NEG
70980: PUSH
70981: LD_INT 0
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: PUSH
70988: LD_INT 2
70990: NEG
70991: PUSH
70992: LD_INT 1
70994: NEG
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: PUSH
71000: LD_INT 2
71002: NEG
71003: PUSH
71004: LD_INT 2
71006: NEG
71007: PUSH
71008: EMPTY
71009: LIST
71010: LIST
71011: PUSH
71012: EMPTY
71013: LIST
71014: LIST
71015: LIST
71016: LIST
71017: LIST
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71026: LD_ADDR_VAR 0 53
71030: PUSH
71031: LD_INT 0
71033: PUSH
71034: LD_INT 0
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: LD_INT 0
71043: PUSH
71044: LD_INT 1
71046: NEG
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: PUSH
71052: LD_INT 1
71054: PUSH
71055: LD_INT 0
71057: PUSH
71058: EMPTY
71059: LIST
71060: LIST
71061: PUSH
71062: LD_INT 1
71064: PUSH
71065: LD_INT 1
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 0
71074: PUSH
71075: LD_INT 1
71077: PUSH
71078: EMPTY
71079: LIST
71080: LIST
71081: PUSH
71082: LD_INT 1
71084: NEG
71085: PUSH
71086: LD_INT 0
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: PUSH
71093: LD_INT 1
71095: NEG
71096: PUSH
71097: LD_INT 1
71099: NEG
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: PUSH
71105: LD_INT 1
71107: NEG
71108: PUSH
71109: LD_INT 2
71111: NEG
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: PUSH
71117: LD_INT 0
71119: PUSH
71120: LD_INT 2
71122: NEG
71123: PUSH
71124: EMPTY
71125: LIST
71126: LIST
71127: PUSH
71128: LD_INT 1
71130: PUSH
71131: LD_INT 1
71133: NEG
71134: PUSH
71135: EMPTY
71136: LIST
71137: LIST
71138: PUSH
71139: LD_INT 2
71141: PUSH
71142: LD_INT 0
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: PUSH
71149: LD_INT 2
71151: PUSH
71152: LD_INT 1
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: PUSH
71159: LD_INT 2
71161: PUSH
71162: LD_INT 2
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: PUSH
71169: LD_INT 1
71171: PUSH
71172: LD_INT 2
71174: PUSH
71175: EMPTY
71176: LIST
71177: LIST
71178: PUSH
71179: LD_INT 0
71181: PUSH
71182: LD_INT 2
71184: PUSH
71185: EMPTY
71186: LIST
71187: LIST
71188: PUSH
71189: LD_INT 1
71191: NEG
71192: PUSH
71193: LD_INT 1
71195: PUSH
71196: EMPTY
71197: LIST
71198: LIST
71199: PUSH
71200: LD_INT 2
71202: NEG
71203: PUSH
71204: LD_INT 0
71206: PUSH
71207: EMPTY
71208: LIST
71209: LIST
71210: PUSH
71211: LD_INT 2
71213: NEG
71214: PUSH
71215: LD_INT 1
71217: NEG
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PUSH
71223: LD_INT 2
71225: NEG
71226: PUSH
71227: LD_INT 2
71229: NEG
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: LIST
71239: LIST
71240: LIST
71241: LIST
71242: LIST
71243: LIST
71244: LIST
71245: LIST
71246: LIST
71247: LIST
71248: LIST
71249: LIST
71250: LIST
71251: LIST
71252: LIST
71253: LIST
71254: LIST
71255: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71256: LD_ADDR_VAR 0 54
71260: PUSH
71261: LD_INT 0
71263: PUSH
71264: LD_INT 0
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: PUSH
71271: LD_INT 0
71273: PUSH
71274: LD_INT 1
71276: NEG
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 1
71284: PUSH
71285: LD_INT 0
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: PUSH
71292: LD_INT 1
71294: PUSH
71295: LD_INT 1
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: PUSH
71302: LD_INT 0
71304: PUSH
71305: LD_INT 1
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: PUSH
71312: LD_INT 1
71314: NEG
71315: PUSH
71316: LD_INT 0
71318: PUSH
71319: EMPTY
71320: LIST
71321: LIST
71322: PUSH
71323: LD_INT 1
71325: NEG
71326: PUSH
71327: LD_INT 1
71329: NEG
71330: PUSH
71331: EMPTY
71332: LIST
71333: LIST
71334: PUSH
71335: LD_INT 1
71337: NEG
71338: PUSH
71339: LD_INT 2
71341: NEG
71342: PUSH
71343: EMPTY
71344: LIST
71345: LIST
71346: PUSH
71347: LD_INT 0
71349: PUSH
71350: LD_INT 2
71352: NEG
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: LD_INT 1
71360: PUSH
71361: LD_INT 1
71363: NEG
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: LD_INT 2
71371: PUSH
71372: LD_INT 0
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PUSH
71379: LD_INT 2
71381: PUSH
71382: LD_INT 1
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 2
71391: PUSH
71392: LD_INT 2
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 1
71401: PUSH
71402: LD_INT 2
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: LD_INT 0
71411: PUSH
71412: LD_INT 2
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: PUSH
71419: LD_INT 1
71421: NEG
71422: PUSH
71423: LD_INT 1
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: LD_INT 2
71432: NEG
71433: PUSH
71434: LD_INT 0
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PUSH
71441: LD_INT 2
71443: NEG
71444: PUSH
71445: LD_INT 1
71447: NEG
71448: PUSH
71449: EMPTY
71450: LIST
71451: LIST
71452: PUSH
71453: LD_INT 2
71455: NEG
71456: PUSH
71457: LD_INT 2
71459: NEG
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71486: LD_ADDR_VAR 0 55
71490: PUSH
71491: LD_INT 0
71493: PUSH
71494: LD_INT 0
71496: PUSH
71497: EMPTY
71498: LIST
71499: LIST
71500: PUSH
71501: LD_INT 0
71503: PUSH
71504: LD_INT 1
71506: NEG
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: PUSH
71512: LD_INT 1
71514: PUSH
71515: LD_INT 0
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: PUSH
71522: LD_INT 1
71524: PUSH
71525: LD_INT 1
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: PUSH
71532: LD_INT 0
71534: PUSH
71535: LD_INT 1
71537: PUSH
71538: EMPTY
71539: LIST
71540: LIST
71541: PUSH
71542: LD_INT 1
71544: NEG
71545: PUSH
71546: LD_INT 0
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: PUSH
71553: LD_INT 1
71555: NEG
71556: PUSH
71557: LD_INT 1
71559: NEG
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: LD_INT 1
71567: NEG
71568: PUSH
71569: LD_INT 2
71571: NEG
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PUSH
71577: LD_INT 0
71579: PUSH
71580: LD_INT 2
71582: NEG
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: PUSH
71588: LD_INT 1
71590: PUSH
71591: LD_INT 1
71593: NEG
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: PUSH
71599: LD_INT 2
71601: PUSH
71602: LD_INT 0
71604: PUSH
71605: EMPTY
71606: LIST
71607: LIST
71608: PUSH
71609: LD_INT 2
71611: PUSH
71612: LD_INT 1
71614: PUSH
71615: EMPTY
71616: LIST
71617: LIST
71618: PUSH
71619: LD_INT 2
71621: PUSH
71622: LD_INT 2
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: PUSH
71629: LD_INT 1
71631: PUSH
71632: LD_INT 2
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: LD_INT 0
71641: PUSH
71642: LD_INT 2
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: LD_INT 1
71651: NEG
71652: PUSH
71653: LD_INT 1
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: LD_INT 2
71662: NEG
71663: PUSH
71664: LD_INT 0
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: PUSH
71671: LD_INT 2
71673: NEG
71674: PUSH
71675: LD_INT 1
71677: NEG
71678: PUSH
71679: EMPTY
71680: LIST
71681: LIST
71682: PUSH
71683: LD_INT 2
71685: NEG
71686: PUSH
71687: LD_INT 2
71689: NEG
71690: PUSH
71691: EMPTY
71692: LIST
71693: LIST
71694: PUSH
71695: EMPTY
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: LIST
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71716: LD_ADDR_VAR 0 56
71720: PUSH
71721: LD_INT 0
71723: PUSH
71724: LD_INT 0
71726: PUSH
71727: EMPTY
71728: LIST
71729: LIST
71730: PUSH
71731: LD_INT 0
71733: PUSH
71734: LD_INT 1
71736: NEG
71737: PUSH
71738: EMPTY
71739: LIST
71740: LIST
71741: PUSH
71742: LD_INT 1
71744: PUSH
71745: LD_INT 0
71747: PUSH
71748: EMPTY
71749: LIST
71750: LIST
71751: PUSH
71752: LD_INT 1
71754: PUSH
71755: LD_INT 1
71757: PUSH
71758: EMPTY
71759: LIST
71760: LIST
71761: PUSH
71762: LD_INT 0
71764: PUSH
71765: LD_INT 1
71767: PUSH
71768: EMPTY
71769: LIST
71770: LIST
71771: PUSH
71772: LD_INT 1
71774: NEG
71775: PUSH
71776: LD_INT 0
71778: PUSH
71779: EMPTY
71780: LIST
71781: LIST
71782: PUSH
71783: LD_INT 1
71785: NEG
71786: PUSH
71787: LD_INT 1
71789: NEG
71790: PUSH
71791: EMPTY
71792: LIST
71793: LIST
71794: PUSH
71795: LD_INT 1
71797: NEG
71798: PUSH
71799: LD_INT 2
71801: NEG
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PUSH
71807: LD_INT 0
71809: PUSH
71810: LD_INT 2
71812: NEG
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 1
71820: PUSH
71821: LD_INT 1
71823: NEG
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: LD_INT 2
71831: PUSH
71832: LD_INT 0
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: PUSH
71839: LD_INT 2
71841: PUSH
71842: LD_INT 1
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: PUSH
71849: LD_INT 2
71851: PUSH
71852: LD_INT 2
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: PUSH
71859: LD_INT 1
71861: PUSH
71862: LD_INT 2
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: PUSH
71869: LD_INT 0
71871: PUSH
71872: LD_INT 2
71874: PUSH
71875: EMPTY
71876: LIST
71877: LIST
71878: PUSH
71879: LD_INT 1
71881: NEG
71882: PUSH
71883: LD_INT 1
71885: PUSH
71886: EMPTY
71887: LIST
71888: LIST
71889: PUSH
71890: LD_INT 2
71892: NEG
71893: PUSH
71894: LD_INT 0
71896: PUSH
71897: EMPTY
71898: LIST
71899: LIST
71900: PUSH
71901: LD_INT 2
71903: NEG
71904: PUSH
71905: LD_INT 1
71907: NEG
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: PUSH
71913: LD_INT 2
71915: NEG
71916: PUSH
71917: LD_INT 2
71919: NEG
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: PUSH
71925: EMPTY
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71946: LD_ADDR_VAR 0 57
71950: PUSH
71951: LD_INT 0
71953: PUSH
71954: LD_INT 0
71956: PUSH
71957: EMPTY
71958: LIST
71959: LIST
71960: PUSH
71961: LD_INT 0
71963: PUSH
71964: LD_INT 1
71966: NEG
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: PUSH
71972: LD_INT 1
71974: PUSH
71975: LD_INT 0
71977: PUSH
71978: EMPTY
71979: LIST
71980: LIST
71981: PUSH
71982: LD_INT 1
71984: PUSH
71985: LD_INT 1
71987: PUSH
71988: EMPTY
71989: LIST
71990: LIST
71991: PUSH
71992: LD_INT 0
71994: PUSH
71995: LD_INT 1
71997: PUSH
71998: EMPTY
71999: LIST
72000: LIST
72001: PUSH
72002: LD_INT 1
72004: NEG
72005: PUSH
72006: LD_INT 0
72008: PUSH
72009: EMPTY
72010: LIST
72011: LIST
72012: PUSH
72013: LD_INT 1
72015: NEG
72016: PUSH
72017: LD_INT 1
72019: NEG
72020: PUSH
72021: EMPTY
72022: LIST
72023: LIST
72024: PUSH
72025: LD_INT 1
72027: NEG
72028: PUSH
72029: LD_INT 2
72031: NEG
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: PUSH
72037: LD_INT 0
72039: PUSH
72040: LD_INT 2
72042: NEG
72043: PUSH
72044: EMPTY
72045: LIST
72046: LIST
72047: PUSH
72048: LD_INT 1
72050: PUSH
72051: LD_INT 1
72053: NEG
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: PUSH
72059: LD_INT 2
72061: PUSH
72062: LD_INT 0
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: PUSH
72069: LD_INT 2
72071: PUSH
72072: LD_INT 1
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: PUSH
72079: LD_INT 2
72081: PUSH
72082: LD_INT 2
72084: PUSH
72085: EMPTY
72086: LIST
72087: LIST
72088: PUSH
72089: LD_INT 1
72091: PUSH
72092: LD_INT 2
72094: PUSH
72095: EMPTY
72096: LIST
72097: LIST
72098: PUSH
72099: LD_INT 0
72101: PUSH
72102: LD_INT 2
72104: PUSH
72105: EMPTY
72106: LIST
72107: LIST
72108: PUSH
72109: LD_INT 1
72111: NEG
72112: PUSH
72113: LD_INT 1
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: PUSH
72120: LD_INT 2
72122: NEG
72123: PUSH
72124: LD_INT 0
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: PUSH
72131: LD_INT 2
72133: NEG
72134: PUSH
72135: LD_INT 1
72137: NEG
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: PUSH
72143: LD_INT 2
72145: NEG
72146: PUSH
72147: LD_INT 2
72149: NEG
72150: PUSH
72151: EMPTY
72152: LIST
72153: LIST
72154: PUSH
72155: EMPTY
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72176: LD_ADDR_VAR 0 58
72180: PUSH
72181: LD_INT 0
72183: PUSH
72184: LD_INT 0
72186: PUSH
72187: EMPTY
72188: LIST
72189: LIST
72190: PUSH
72191: LD_INT 0
72193: PUSH
72194: LD_INT 1
72196: NEG
72197: PUSH
72198: EMPTY
72199: LIST
72200: LIST
72201: PUSH
72202: LD_INT 1
72204: PUSH
72205: LD_INT 0
72207: PUSH
72208: EMPTY
72209: LIST
72210: LIST
72211: PUSH
72212: LD_INT 1
72214: PUSH
72215: LD_INT 1
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: PUSH
72222: LD_INT 0
72224: PUSH
72225: LD_INT 1
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: LD_INT 1
72234: NEG
72235: PUSH
72236: LD_INT 0
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: PUSH
72243: LD_INT 1
72245: NEG
72246: PUSH
72247: LD_INT 1
72249: NEG
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: LD_INT 1
72257: NEG
72258: PUSH
72259: LD_INT 2
72261: NEG
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 0
72269: PUSH
72270: LD_INT 2
72272: NEG
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: PUSH
72278: LD_INT 1
72280: PUSH
72281: LD_INT 1
72283: NEG
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 2
72291: PUSH
72292: LD_INT 0
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: PUSH
72299: LD_INT 2
72301: PUSH
72302: LD_INT 1
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PUSH
72309: LD_INT 2
72311: PUSH
72312: LD_INT 2
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: PUSH
72319: LD_INT 1
72321: PUSH
72322: LD_INT 2
72324: PUSH
72325: EMPTY
72326: LIST
72327: LIST
72328: PUSH
72329: LD_INT 0
72331: PUSH
72332: LD_INT 2
72334: PUSH
72335: EMPTY
72336: LIST
72337: LIST
72338: PUSH
72339: LD_INT 1
72341: NEG
72342: PUSH
72343: LD_INT 1
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: PUSH
72350: LD_INT 2
72352: NEG
72353: PUSH
72354: LD_INT 0
72356: PUSH
72357: EMPTY
72358: LIST
72359: LIST
72360: PUSH
72361: LD_INT 2
72363: NEG
72364: PUSH
72365: LD_INT 1
72367: NEG
72368: PUSH
72369: EMPTY
72370: LIST
72371: LIST
72372: PUSH
72373: LD_INT 2
72375: NEG
72376: PUSH
72377: LD_INT 2
72379: NEG
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: LIST
72389: LIST
72390: LIST
72391: LIST
72392: LIST
72393: LIST
72394: LIST
72395: LIST
72396: LIST
72397: LIST
72398: LIST
72399: LIST
72400: LIST
72401: LIST
72402: LIST
72403: LIST
72404: LIST
72405: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72406: LD_ADDR_VAR 0 59
72410: PUSH
72411: LD_INT 0
72413: PUSH
72414: LD_INT 0
72416: PUSH
72417: EMPTY
72418: LIST
72419: LIST
72420: PUSH
72421: LD_INT 0
72423: PUSH
72424: LD_INT 1
72426: NEG
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: PUSH
72432: LD_INT 1
72434: PUSH
72435: LD_INT 0
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PUSH
72442: LD_INT 1
72444: PUSH
72445: LD_INT 1
72447: PUSH
72448: EMPTY
72449: LIST
72450: LIST
72451: PUSH
72452: LD_INT 0
72454: PUSH
72455: LD_INT 1
72457: PUSH
72458: EMPTY
72459: LIST
72460: LIST
72461: PUSH
72462: LD_INT 1
72464: NEG
72465: PUSH
72466: LD_INT 0
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: PUSH
72473: LD_INT 1
72475: NEG
72476: PUSH
72477: LD_INT 1
72479: NEG
72480: PUSH
72481: EMPTY
72482: LIST
72483: LIST
72484: PUSH
72485: EMPTY
72486: LIST
72487: LIST
72488: LIST
72489: LIST
72490: LIST
72491: LIST
72492: LIST
72493: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72494: LD_ADDR_VAR 0 60
72498: PUSH
72499: LD_INT 0
72501: PUSH
72502: LD_INT 0
72504: PUSH
72505: EMPTY
72506: LIST
72507: LIST
72508: PUSH
72509: LD_INT 0
72511: PUSH
72512: LD_INT 1
72514: NEG
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: PUSH
72520: LD_INT 1
72522: PUSH
72523: LD_INT 0
72525: PUSH
72526: EMPTY
72527: LIST
72528: LIST
72529: PUSH
72530: LD_INT 1
72532: PUSH
72533: LD_INT 1
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: PUSH
72540: LD_INT 0
72542: PUSH
72543: LD_INT 1
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: PUSH
72550: LD_INT 1
72552: NEG
72553: PUSH
72554: LD_INT 0
72556: PUSH
72557: EMPTY
72558: LIST
72559: LIST
72560: PUSH
72561: LD_INT 1
72563: NEG
72564: PUSH
72565: LD_INT 1
72567: NEG
72568: PUSH
72569: EMPTY
72570: LIST
72571: LIST
72572: PUSH
72573: EMPTY
72574: LIST
72575: LIST
72576: LIST
72577: LIST
72578: LIST
72579: LIST
72580: LIST
72581: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72582: LD_ADDR_VAR 0 61
72586: PUSH
72587: LD_INT 0
72589: PUSH
72590: LD_INT 0
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: PUSH
72597: LD_INT 0
72599: PUSH
72600: LD_INT 1
72602: NEG
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: PUSH
72608: LD_INT 1
72610: PUSH
72611: LD_INT 0
72613: PUSH
72614: EMPTY
72615: LIST
72616: LIST
72617: PUSH
72618: LD_INT 1
72620: PUSH
72621: LD_INT 1
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: PUSH
72628: LD_INT 0
72630: PUSH
72631: LD_INT 1
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: PUSH
72638: LD_INT 1
72640: NEG
72641: PUSH
72642: LD_INT 0
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: PUSH
72649: LD_INT 1
72651: NEG
72652: PUSH
72653: LD_INT 1
72655: NEG
72656: PUSH
72657: EMPTY
72658: LIST
72659: LIST
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72670: LD_ADDR_VAR 0 62
72674: PUSH
72675: LD_INT 0
72677: PUSH
72678: LD_INT 0
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: PUSH
72685: LD_INT 0
72687: PUSH
72688: LD_INT 1
72690: NEG
72691: PUSH
72692: EMPTY
72693: LIST
72694: LIST
72695: PUSH
72696: LD_INT 1
72698: PUSH
72699: LD_INT 0
72701: PUSH
72702: EMPTY
72703: LIST
72704: LIST
72705: PUSH
72706: LD_INT 1
72708: PUSH
72709: LD_INT 1
72711: PUSH
72712: EMPTY
72713: LIST
72714: LIST
72715: PUSH
72716: LD_INT 0
72718: PUSH
72719: LD_INT 1
72721: PUSH
72722: EMPTY
72723: LIST
72724: LIST
72725: PUSH
72726: LD_INT 1
72728: NEG
72729: PUSH
72730: LD_INT 0
72732: PUSH
72733: EMPTY
72734: LIST
72735: LIST
72736: PUSH
72737: LD_INT 1
72739: NEG
72740: PUSH
72741: LD_INT 1
72743: NEG
72744: PUSH
72745: EMPTY
72746: LIST
72747: LIST
72748: PUSH
72749: EMPTY
72750: LIST
72751: LIST
72752: LIST
72753: LIST
72754: LIST
72755: LIST
72756: LIST
72757: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72758: LD_ADDR_VAR 0 63
72762: PUSH
72763: LD_INT 0
72765: PUSH
72766: LD_INT 0
72768: PUSH
72769: EMPTY
72770: LIST
72771: LIST
72772: PUSH
72773: LD_INT 0
72775: PUSH
72776: LD_INT 1
72778: NEG
72779: PUSH
72780: EMPTY
72781: LIST
72782: LIST
72783: PUSH
72784: LD_INT 1
72786: PUSH
72787: LD_INT 0
72789: PUSH
72790: EMPTY
72791: LIST
72792: LIST
72793: PUSH
72794: LD_INT 1
72796: PUSH
72797: LD_INT 1
72799: PUSH
72800: EMPTY
72801: LIST
72802: LIST
72803: PUSH
72804: LD_INT 0
72806: PUSH
72807: LD_INT 1
72809: PUSH
72810: EMPTY
72811: LIST
72812: LIST
72813: PUSH
72814: LD_INT 1
72816: NEG
72817: PUSH
72818: LD_INT 0
72820: PUSH
72821: EMPTY
72822: LIST
72823: LIST
72824: PUSH
72825: LD_INT 1
72827: NEG
72828: PUSH
72829: LD_INT 1
72831: NEG
72832: PUSH
72833: EMPTY
72834: LIST
72835: LIST
72836: PUSH
72837: EMPTY
72838: LIST
72839: LIST
72840: LIST
72841: LIST
72842: LIST
72843: LIST
72844: LIST
72845: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72846: LD_ADDR_VAR 0 64
72850: PUSH
72851: LD_INT 0
72853: PUSH
72854: LD_INT 0
72856: PUSH
72857: EMPTY
72858: LIST
72859: LIST
72860: PUSH
72861: LD_INT 0
72863: PUSH
72864: LD_INT 1
72866: NEG
72867: PUSH
72868: EMPTY
72869: LIST
72870: LIST
72871: PUSH
72872: LD_INT 1
72874: PUSH
72875: LD_INT 0
72877: PUSH
72878: EMPTY
72879: LIST
72880: LIST
72881: PUSH
72882: LD_INT 1
72884: PUSH
72885: LD_INT 1
72887: PUSH
72888: EMPTY
72889: LIST
72890: LIST
72891: PUSH
72892: LD_INT 0
72894: PUSH
72895: LD_INT 1
72897: PUSH
72898: EMPTY
72899: LIST
72900: LIST
72901: PUSH
72902: LD_INT 1
72904: NEG
72905: PUSH
72906: LD_INT 0
72908: PUSH
72909: EMPTY
72910: LIST
72911: LIST
72912: PUSH
72913: LD_INT 1
72915: NEG
72916: PUSH
72917: LD_INT 1
72919: NEG
72920: PUSH
72921: EMPTY
72922: LIST
72923: LIST
72924: PUSH
72925: EMPTY
72926: LIST
72927: LIST
72928: LIST
72929: LIST
72930: LIST
72931: LIST
72932: LIST
72933: ST_TO_ADDR
// end ; 1 :
72934: GO 78831
72936: LD_INT 1
72938: DOUBLE
72939: EQUAL
72940: IFTRUE 72944
72942: GO 75567
72944: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72945: LD_ADDR_VAR 0 11
72949: PUSH
72950: LD_INT 1
72952: NEG
72953: PUSH
72954: LD_INT 3
72956: NEG
72957: PUSH
72958: EMPTY
72959: LIST
72960: LIST
72961: PUSH
72962: LD_INT 0
72964: PUSH
72965: LD_INT 3
72967: NEG
72968: PUSH
72969: EMPTY
72970: LIST
72971: LIST
72972: PUSH
72973: LD_INT 1
72975: PUSH
72976: LD_INT 2
72978: NEG
72979: PUSH
72980: EMPTY
72981: LIST
72982: LIST
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: LIST
72988: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72989: LD_ADDR_VAR 0 12
72993: PUSH
72994: LD_INT 2
72996: PUSH
72997: LD_INT 1
72999: NEG
73000: PUSH
73001: EMPTY
73002: LIST
73003: LIST
73004: PUSH
73005: LD_INT 3
73007: PUSH
73008: LD_INT 0
73010: PUSH
73011: EMPTY
73012: LIST
73013: LIST
73014: PUSH
73015: LD_INT 3
73017: PUSH
73018: LD_INT 1
73020: PUSH
73021: EMPTY
73022: LIST
73023: LIST
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: LIST
73029: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
73030: LD_ADDR_VAR 0 13
73034: PUSH
73035: LD_INT 3
73037: PUSH
73038: LD_INT 2
73040: PUSH
73041: EMPTY
73042: LIST
73043: LIST
73044: PUSH
73045: LD_INT 3
73047: PUSH
73048: LD_INT 3
73050: PUSH
73051: EMPTY
73052: LIST
73053: LIST
73054: PUSH
73055: LD_INT 2
73057: PUSH
73058: LD_INT 3
73060: PUSH
73061: EMPTY
73062: LIST
73063: LIST
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: LIST
73069: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
73070: LD_ADDR_VAR 0 14
73074: PUSH
73075: LD_INT 1
73077: PUSH
73078: LD_INT 3
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: PUSH
73085: LD_INT 0
73087: PUSH
73088: LD_INT 3
73090: PUSH
73091: EMPTY
73092: LIST
73093: LIST
73094: PUSH
73095: LD_INT 1
73097: NEG
73098: PUSH
73099: LD_INT 2
73101: PUSH
73102: EMPTY
73103: LIST
73104: LIST
73105: PUSH
73106: EMPTY
73107: LIST
73108: LIST
73109: LIST
73110: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73111: LD_ADDR_VAR 0 15
73115: PUSH
73116: LD_INT 2
73118: NEG
73119: PUSH
73120: LD_INT 1
73122: PUSH
73123: EMPTY
73124: LIST
73125: LIST
73126: PUSH
73127: LD_INT 3
73129: NEG
73130: PUSH
73131: LD_INT 0
73133: PUSH
73134: EMPTY
73135: LIST
73136: LIST
73137: PUSH
73138: LD_INT 3
73140: NEG
73141: PUSH
73142: LD_INT 1
73144: NEG
73145: PUSH
73146: EMPTY
73147: LIST
73148: LIST
73149: PUSH
73150: EMPTY
73151: LIST
73152: LIST
73153: LIST
73154: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73155: LD_ADDR_VAR 0 16
73159: PUSH
73160: LD_INT 2
73162: NEG
73163: PUSH
73164: LD_INT 3
73166: NEG
73167: PUSH
73168: EMPTY
73169: LIST
73170: LIST
73171: PUSH
73172: LD_INT 3
73174: NEG
73175: PUSH
73176: LD_INT 2
73178: NEG
73179: PUSH
73180: EMPTY
73181: LIST
73182: LIST
73183: PUSH
73184: LD_INT 3
73186: NEG
73187: PUSH
73188: LD_INT 3
73190: NEG
73191: PUSH
73192: EMPTY
73193: LIST
73194: LIST
73195: PUSH
73196: EMPTY
73197: LIST
73198: LIST
73199: LIST
73200: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
73201: LD_ADDR_VAR 0 17
73205: PUSH
73206: LD_INT 1
73208: NEG
73209: PUSH
73210: LD_INT 3
73212: NEG
73213: PUSH
73214: EMPTY
73215: LIST
73216: LIST
73217: PUSH
73218: LD_INT 0
73220: PUSH
73221: LD_INT 3
73223: NEG
73224: PUSH
73225: EMPTY
73226: LIST
73227: LIST
73228: PUSH
73229: LD_INT 1
73231: PUSH
73232: LD_INT 2
73234: NEG
73235: PUSH
73236: EMPTY
73237: LIST
73238: LIST
73239: PUSH
73240: EMPTY
73241: LIST
73242: LIST
73243: LIST
73244: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
73245: LD_ADDR_VAR 0 18
73249: PUSH
73250: LD_INT 2
73252: PUSH
73253: LD_INT 1
73255: NEG
73256: PUSH
73257: EMPTY
73258: LIST
73259: LIST
73260: PUSH
73261: LD_INT 3
73263: PUSH
73264: LD_INT 0
73266: PUSH
73267: EMPTY
73268: LIST
73269: LIST
73270: PUSH
73271: LD_INT 3
73273: PUSH
73274: LD_INT 1
73276: PUSH
73277: EMPTY
73278: LIST
73279: LIST
73280: PUSH
73281: EMPTY
73282: LIST
73283: LIST
73284: LIST
73285: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
73286: LD_ADDR_VAR 0 19
73290: PUSH
73291: LD_INT 3
73293: PUSH
73294: LD_INT 2
73296: PUSH
73297: EMPTY
73298: LIST
73299: LIST
73300: PUSH
73301: LD_INT 3
73303: PUSH
73304: LD_INT 3
73306: PUSH
73307: EMPTY
73308: LIST
73309: LIST
73310: PUSH
73311: LD_INT 2
73313: PUSH
73314: LD_INT 3
73316: PUSH
73317: EMPTY
73318: LIST
73319: LIST
73320: PUSH
73321: EMPTY
73322: LIST
73323: LIST
73324: LIST
73325: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
73326: LD_ADDR_VAR 0 20
73330: PUSH
73331: LD_INT 1
73333: PUSH
73334: LD_INT 3
73336: PUSH
73337: EMPTY
73338: LIST
73339: LIST
73340: PUSH
73341: LD_INT 0
73343: PUSH
73344: LD_INT 3
73346: PUSH
73347: EMPTY
73348: LIST
73349: LIST
73350: PUSH
73351: LD_INT 1
73353: NEG
73354: PUSH
73355: LD_INT 2
73357: PUSH
73358: EMPTY
73359: LIST
73360: LIST
73361: PUSH
73362: EMPTY
73363: LIST
73364: LIST
73365: LIST
73366: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73367: LD_ADDR_VAR 0 21
73371: PUSH
73372: LD_INT 2
73374: NEG
73375: PUSH
73376: LD_INT 1
73378: PUSH
73379: EMPTY
73380: LIST
73381: LIST
73382: PUSH
73383: LD_INT 3
73385: NEG
73386: PUSH
73387: LD_INT 0
73389: PUSH
73390: EMPTY
73391: LIST
73392: LIST
73393: PUSH
73394: LD_INT 3
73396: NEG
73397: PUSH
73398: LD_INT 1
73400: NEG
73401: PUSH
73402: EMPTY
73403: LIST
73404: LIST
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: LIST
73410: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73411: LD_ADDR_VAR 0 22
73415: PUSH
73416: LD_INT 2
73418: NEG
73419: PUSH
73420: LD_INT 3
73422: NEG
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: PUSH
73428: LD_INT 3
73430: NEG
73431: PUSH
73432: LD_INT 2
73434: NEG
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: PUSH
73440: LD_INT 3
73442: NEG
73443: PUSH
73444: LD_INT 3
73446: NEG
73447: PUSH
73448: EMPTY
73449: LIST
73450: LIST
73451: PUSH
73452: EMPTY
73453: LIST
73454: LIST
73455: LIST
73456: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
73457: LD_ADDR_VAR 0 23
73461: PUSH
73462: LD_INT 0
73464: PUSH
73465: LD_INT 3
73467: NEG
73468: PUSH
73469: EMPTY
73470: LIST
73471: LIST
73472: PUSH
73473: LD_INT 1
73475: NEG
73476: PUSH
73477: LD_INT 4
73479: NEG
73480: PUSH
73481: EMPTY
73482: LIST
73483: LIST
73484: PUSH
73485: LD_INT 1
73487: PUSH
73488: LD_INT 3
73490: NEG
73491: PUSH
73492: EMPTY
73493: LIST
73494: LIST
73495: PUSH
73496: EMPTY
73497: LIST
73498: LIST
73499: LIST
73500: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
73501: LD_ADDR_VAR 0 24
73505: PUSH
73506: LD_INT 3
73508: PUSH
73509: LD_INT 0
73511: PUSH
73512: EMPTY
73513: LIST
73514: LIST
73515: PUSH
73516: LD_INT 3
73518: PUSH
73519: LD_INT 1
73521: NEG
73522: PUSH
73523: EMPTY
73524: LIST
73525: LIST
73526: PUSH
73527: LD_INT 4
73529: PUSH
73530: LD_INT 1
73532: PUSH
73533: EMPTY
73534: LIST
73535: LIST
73536: PUSH
73537: EMPTY
73538: LIST
73539: LIST
73540: LIST
73541: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
73542: LD_ADDR_VAR 0 25
73546: PUSH
73547: LD_INT 3
73549: PUSH
73550: LD_INT 3
73552: PUSH
73553: EMPTY
73554: LIST
73555: LIST
73556: PUSH
73557: LD_INT 4
73559: PUSH
73560: LD_INT 3
73562: PUSH
73563: EMPTY
73564: LIST
73565: LIST
73566: PUSH
73567: LD_INT 3
73569: PUSH
73570: LD_INT 4
73572: PUSH
73573: EMPTY
73574: LIST
73575: LIST
73576: PUSH
73577: EMPTY
73578: LIST
73579: LIST
73580: LIST
73581: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
73582: LD_ADDR_VAR 0 26
73586: PUSH
73587: LD_INT 0
73589: PUSH
73590: LD_INT 3
73592: PUSH
73593: EMPTY
73594: LIST
73595: LIST
73596: PUSH
73597: LD_INT 1
73599: PUSH
73600: LD_INT 4
73602: PUSH
73603: EMPTY
73604: LIST
73605: LIST
73606: PUSH
73607: LD_INT 1
73609: NEG
73610: PUSH
73611: LD_INT 3
73613: PUSH
73614: EMPTY
73615: LIST
73616: LIST
73617: PUSH
73618: EMPTY
73619: LIST
73620: LIST
73621: LIST
73622: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
73623: LD_ADDR_VAR 0 27
73627: PUSH
73628: LD_INT 3
73630: NEG
73631: PUSH
73632: LD_INT 0
73634: PUSH
73635: EMPTY
73636: LIST
73637: LIST
73638: PUSH
73639: LD_INT 3
73641: NEG
73642: PUSH
73643: LD_INT 1
73645: PUSH
73646: EMPTY
73647: LIST
73648: LIST
73649: PUSH
73650: LD_INT 4
73652: NEG
73653: PUSH
73654: LD_INT 1
73656: NEG
73657: PUSH
73658: EMPTY
73659: LIST
73660: LIST
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: LIST
73666: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
73667: LD_ADDR_VAR 0 28
73671: PUSH
73672: LD_INT 3
73674: NEG
73675: PUSH
73676: LD_INT 3
73678: NEG
73679: PUSH
73680: EMPTY
73681: LIST
73682: LIST
73683: PUSH
73684: LD_INT 3
73686: NEG
73687: PUSH
73688: LD_INT 4
73690: NEG
73691: PUSH
73692: EMPTY
73693: LIST
73694: LIST
73695: PUSH
73696: LD_INT 4
73698: NEG
73699: PUSH
73700: LD_INT 3
73702: NEG
73703: PUSH
73704: EMPTY
73705: LIST
73706: LIST
73707: PUSH
73708: EMPTY
73709: LIST
73710: LIST
73711: LIST
73712: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
73713: LD_ADDR_VAR 0 29
73717: PUSH
73718: LD_INT 1
73720: NEG
73721: PUSH
73722: LD_INT 3
73724: NEG
73725: PUSH
73726: EMPTY
73727: LIST
73728: LIST
73729: PUSH
73730: LD_INT 0
73732: PUSH
73733: LD_INT 3
73735: NEG
73736: PUSH
73737: EMPTY
73738: LIST
73739: LIST
73740: PUSH
73741: LD_INT 1
73743: PUSH
73744: LD_INT 2
73746: NEG
73747: PUSH
73748: EMPTY
73749: LIST
73750: LIST
73751: PUSH
73752: LD_INT 1
73754: NEG
73755: PUSH
73756: LD_INT 4
73758: NEG
73759: PUSH
73760: EMPTY
73761: LIST
73762: LIST
73763: PUSH
73764: LD_INT 0
73766: PUSH
73767: LD_INT 4
73769: NEG
73770: PUSH
73771: EMPTY
73772: LIST
73773: LIST
73774: PUSH
73775: LD_INT 1
73777: PUSH
73778: LD_INT 3
73780: NEG
73781: PUSH
73782: EMPTY
73783: LIST
73784: LIST
73785: PUSH
73786: LD_INT 1
73788: NEG
73789: PUSH
73790: LD_INT 5
73792: NEG
73793: PUSH
73794: EMPTY
73795: LIST
73796: LIST
73797: PUSH
73798: LD_INT 0
73800: PUSH
73801: LD_INT 5
73803: NEG
73804: PUSH
73805: EMPTY
73806: LIST
73807: LIST
73808: PUSH
73809: LD_INT 1
73811: PUSH
73812: LD_INT 4
73814: NEG
73815: PUSH
73816: EMPTY
73817: LIST
73818: LIST
73819: PUSH
73820: LD_INT 1
73822: NEG
73823: PUSH
73824: LD_INT 6
73826: NEG
73827: PUSH
73828: EMPTY
73829: LIST
73830: LIST
73831: PUSH
73832: LD_INT 0
73834: PUSH
73835: LD_INT 6
73837: NEG
73838: PUSH
73839: EMPTY
73840: LIST
73841: LIST
73842: PUSH
73843: LD_INT 1
73845: PUSH
73846: LD_INT 5
73848: NEG
73849: PUSH
73850: EMPTY
73851: LIST
73852: LIST
73853: PUSH
73854: EMPTY
73855: LIST
73856: LIST
73857: LIST
73858: LIST
73859: LIST
73860: LIST
73861: LIST
73862: LIST
73863: LIST
73864: LIST
73865: LIST
73866: LIST
73867: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
73868: LD_ADDR_VAR 0 30
73872: PUSH
73873: LD_INT 2
73875: PUSH
73876: LD_INT 1
73878: NEG
73879: PUSH
73880: EMPTY
73881: LIST
73882: LIST
73883: PUSH
73884: LD_INT 3
73886: PUSH
73887: LD_INT 0
73889: PUSH
73890: EMPTY
73891: LIST
73892: LIST
73893: PUSH
73894: LD_INT 3
73896: PUSH
73897: LD_INT 1
73899: PUSH
73900: EMPTY
73901: LIST
73902: LIST
73903: PUSH
73904: LD_INT 3
73906: PUSH
73907: LD_INT 1
73909: NEG
73910: PUSH
73911: EMPTY
73912: LIST
73913: LIST
73914: PUSH
73915: LD_INT 4
73917: PUSH
73918: LD_INT 0
73920: PUSH
73921: EMPTY
73922: LIST
73923: LIST
73924: PUSH
73925: LD_INT 4
73927: PUSH
73928: LD_INT 1
73930: PUSH
73931: EMPTY
73932: LIST
73933: LIST
73934: PUSH
73935: LD_INT 4
73937: PUSH
73938: LD_INT 1
73940: NEG
73941: PUSH
73942: EMPTY
73943: LIST
73944: LIST
73945: PUSH
73946: LD_INT 5
73948: PUSH
73949: LD_INT 0
73951: PUSH
73952: EMPTY
73953: LIST
73954: LIST
73955: PUSH
73956: LD_INT 5
73958: PUSH
73959: LD_INT 1
73961: PUSH
73962: EMPTY
73963: LIST
73964: LIST
73965: PUSH
73966: LD_INT 5
73968: PUSH
73969: LD_INT 1
73971: NEG
73972: PUSH
73973: EMPTY
73974: LIST
73975: LIST
73976: PUSH
73977: LD_INT 6
73979: PUSH
73980: LD_INT 0
73982: PUSH
73983: EMPTY
73984: LIST
73985: LIST
73986: PUSH
73987: LD_INT 6
73989: PUSH
73990: LD_INT 1
73992: PUSH
73993: EMPTY
73994: LIST
73995: LIST
73996: PUSH
73997: EMPTY
73998: LIST
73999: LIST
74000: LIST
74001: LIST
74002: LIST
74003: LIST
74004: LIST
74005: LIST
74006: LIST
74007: LIST
74008: LIST
74009: LIST
74010: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
74011: LD_ADDR_VAR 0 31
74015: PUSH
74016: LD_INT 3
74018: PUSH
74019: LD_INT 2
74021: PUSH
74022: EMPTY
74023: LIST
74024: LIST
74025: PUSH
74026: LD_INT 3
74028: PUSH
74029: LD_INT 3
74031: PUSH
74032: EMPTY
74033: LIST
74034: LIST
74035: PUSH
74036: LD_INT 2
74038: PUSH
74039: LD_INT 3
74041: PUSH
74042: EMPTY
74043: LIST
74044: LIST
74045: PUSH
74046: LD_INT 4
74048: PUSH
74049: LD_INT 3
74051: PUSH
74052: EMPTY
74053: LIST
74054: LIST
74055: PUSH
74056: LD_INT 4
74058: PUSH
74059: LD_INT 4
74061: PUSH
74062: EMPTY
74063: LIST
74064: LIST
74065: PUSH
74066: LD_INT 3
74068: PUSH
74069: LD_INT 4
74071: PUSH
74072: EMPTY
74073: LIST
74074: LIST
74075: PUSH
74076: LD_INT 5
74078: PUSH
74079: LD_INT 4
74081: PUSH
74082: EMPTY
74083: LIST
74084: LIST
74085: PUSH
74086: LD_INT 5
74088: PUSH
74089: LD_INT 5
74091: PUSH
74092: EMPTY
74093: LIST
74094: LIST
74095: PUSH
74096: LD_INT 4
74098: PUSH
74099: LD_INT 5
74101: PUSH
74102: EMPTY
74103: LIST
74104: LIST
74105: PUSH
74106: LD_INT 6
74108: PUSH
74109: LD_INT 5
74111: PUSH
74112: EMPTY
74113: LIST
74114: LIST
74115: PUSH
74116: LD_INT 6
74118: PUSH
74119: LD_INT 6
74121: PUSH
74122: EMPTY
74123: LIST
74124: LIST
74125: PUSH
74126: LD_INT 5
74128: PUSH
74129: LD_INT 6
74131: PUSH
74132: EMPTY
74133: LIST
74134: LIST
74135: PUSH
74136: EMPTY
74137: LIST
74138: LIST
74139: LIST
74140: LIST
74141: LIST
74142: LIST
74143: LIST
74144: LIST
74145: LIST
74146: LIST
74147: LIST
74148: LIST
74149: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
74150: LD_ADDR_VAR 0 32
74154: PUSH
74155: LD_INT 1
74157: PUSH
74158: LD_INT 3
74160: PUSH
74161: EMPTY
74162: LIST
74163: LIST
74164: PUSH
74165: LD_INT 0
74167: PUSH
74168: LD_INT 3
74170: PUSH
74171: EMPTY
74172: LIST
74173: LIST
74174: PUSH
74175: LD_INT 1
74177: NEG
74178: PUSH
74179: LD_INT 2
74181: PUSH
74182: EMPTY
74183: LIST
74184: LIST
74185: PUSH
74186: LD_INT 1
74188: PUSH
74189: LD_INT 4
74191: PUSH
74192: EMPTY
74193: LIST
74194: LIST
74195: PUSH
74196: LD_INT 0
74198: PUSH
74199: LD_INT 4
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: PUSH
74206: LD_INT 1
74208: NEG
74209: PUSH
74210: LD_INT 3
74212: PUSH
74213: EMPTY
74214: LIST
74215: LIST
74216: PUSH
74217: LD_INT 1
74219: PUSH
74220: LD_INT 5
74222: PUSH
74223: EMPTY
74224: LIST
74225: LIST
74226: PUSH
74227: LD_INT 0
74229: PUSH
74230: LD_INT 5
74232: PUSH
74233: EMPTY
74234: LIST
74235: LIST
74236: PUSH
74237: LD_INT 1
74239: NEG
74240: PUSH
74241: LD_INT 4
74243: PUSH
74244: EMPTY
74245: LIST
74246: LIST
74247: PUSH
74248: LD_INT 1
74250: PUSH
74251: LD_INT 6
74253: PUSH
74254: EMPTY
74255: LIST
74256: LIST
74257: PUSH
74258: LD_INT 0
74260: PUSH
74261: LD_INT 6
74263: PUSH
74264: EMPTY
74265: LIST
74266: LIST
74267: PUSH
74268: LD_INT 1
74270: NEG
74271: PUSH
74272: LD_INT 5
74274: PUSH
74275: EMPTY
74276: LIST
74277: LIST
74278: PUSH
74279: EMPTY
74280: LIST
74281: LIST
74282: LIST
74283: LIST
74284: LIST
74285: LIST
74286: LIST
74287: LIST
74288: LIST
74289: LIST
74290: LIST
74291: LIST
74292: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
74293: LD_ADDR_VAR 0 33
74297: PUSH
74298: LD_INT 2
74300: NEG
74301: PUSH
74302: LD_INT 1
74304: PUSH
74305: EMPTY
74306: LIST
74307: LIST
74308: PUSH
74309: LD_INT 3
74311: NEG
74312: PUSH
74313: LD_INT 0
74315: PUSH
74316: EMPTY
74317: LIST
74318: LIST
74319: PUSH
74320: LD_INT 3
74322: NEG
74323: PUSH
74324: LD_INT 1
74326: NEG
74327: PUSH
74328: EMPTY
74329: LIST
74330: LIST
74331: PUSH
74332: LD_INT 3
74334: NEG
74335: PUSH
74336: LD_INT 1
74338: PUSH
74339: EMPTY
74340: LIST
74341: LIST
74342: PUSH
74343: LD_INT 4
74345: NEG
74346: PUSH
74347: LD_INT 0
74349: PUSH
74350: EMPTY
74351: LIST
74352: LIST
74353: PUSH
74354: LD_INT 4
74356: NEG
74357: PUSH
74358: LD_INT 1
74360: NEG
74361: PUSH
74362: EMPTY
74363: LIST
74364: LIST
74365: PUSH
74366: LD_INT 4
74368: NEG
74369: PUSH
74370: LD_INT 1
74372: PUSH
74373: EMPTY
74374: LIST
74375: LIST
74376: PUSH
74377: LD_INT 5
74379: NEG
74380: PUSH
74381: LD_INT 0
74383: PUSH
74384: EMPTY
74385: LIST
74386: LIST
74387: PUSH
74388: LD_INT 5
74390: NEG
74391: PUSH
74392: LD_INT 1
74394: NEG
74395: PUSH
74396: EMPTY
74397: LIST
74398: LIST
74399: PUSH
74400: LD_INT 5
74402: NEG
74403: PUSH
74404: LD_INT 1
74406: PUSH
74407: EMPTY
74408: LIST
74409: LIST
74410: PUSH
74411: LD_INT 6
74413: NEG
74414: PUSH
74415: LD_INT 0
74417: PUSH
74418: EMPTY
74419: LIST
74420: LIST
74421: PUSH
74422: LD_INT 6
74424: NEG
74425: PUSH
74426: LD_INT 1
74428: NEG
74429: PUSH
74430: EMPTY
74431: LIST
74432: LIST
74433: PUSH
74434: EMPTY
74435: LIST
74436: LIST
74437: LIST
74438: LIST
74439: LIST
74440: LIST
74441: LIST
74442: LIST
74443: LIST
74444: LIST
74445: LIST
74446: LIST
74447: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
74448: LD_ADDR_VAR 0 34
74452: PUSH
74453: LD_INT 2
74455: NEG
74456: PUSH
74457: LD_INT 3
74459: NEG
74460: PUSH
74461: EMPTY
74462: LIST
74463: LIST
74464: PUSH
74465: LD_INT 3
74467: NEG
74468: PUSH
74469: LD_INT 2
74471: NEG
74472: PUSH
74473: EMPTY
74474: LIST
74475: LIST
74476: PUSH
74477: LD_INT 3
74479: NEG
74480: PUSH
74481: LD_INT 3
74483: NEG
74484: PUSH
74485: EMPTY
74486: LIST
74487: LIST
74488: PUSH
74489: LD_INT 3
74491: NEG
74492: PUSH
74493: LD_INT 4
74495: NEG
74496: PUSH
74497: EMPTY
74498: LIST
74499: LIST
74500: PUSH
74501: LD_INT 4
74503: NEG
74504: PUSH
74505: LD_INT 3
74507: NEG
74508: PUSH
74509: EMPTY
74510: LIST
74511: LIST
74512: PUSH
74513: LD_INT 4
74515: NEG
74516: PUSH
74517: LD_INT 4
74519: NEG
74520: PUSH
74521: EMPTY
74522: LIST
74523: LIST
74524: PUSH
74525: LD_INT 4
74527: NEG
74528: PUSH
74529: LD_INT 5
74531: NEG
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: PUSH
74537: LD_INT 5
74539: NEG
74540: PUSH
74541: LD_INT 4
74543: NEG
74544: PUSH
74545: EMPTY
74546: LIST
74547: LIST
74548: PUSH
74549: LD_INT 5
74551: NEG
74552: PUSH
74553: LD_INT 5
74555: NEG
74556: PUSH
74557: EMPTY
74558: LIST
74559: LIST
74560: PUSH
74561: LD_INT 5
74563: NEG
74564: PUSH
74565: LD_INT 6
74567: NEG
74568: PUSH
74569: EMPTY
74570: LIST
74571: LIST
74572: PUSH
74573: LD_INT 6
74575: NEG
74576: PUSH
74577: LD_INT 5
74579: NEG
74580: PUSH
74581: EMPTY
74582: LIST
74583: LIST
74584: PUSH
74585: LD_INT 6
74587: NEG
74588: PUSH
74589: LD_INT 6
74591: NEG
74592: PUSH
74593: EMPTY
74594: LIST
74595: LIST
74596: PUSH
74597: EMPTY
74598: LIST
74599: LIST
74600: LIST
74601: LIST
74602: LIST
74603: LIST
74604: LIST
74605: LIST
74606: LIST
74607: LIST
74608: LIST
74609: LIST
74610: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
74611: LD_ADDR_VAR 0 41
74615: PUSH
74616: LD_INT 0
74618: PUSH
74619: LD_INT 2
74621: NEG
74622: PUSH
74623: EMPTY
74624: LIST
74625: LIST
74626: PUSH
74627: LD_INT 1
74629: NEG
74630: PUSH
74631: LD_INT 3
74633: NEG
74634: PUSH
74635: EMPTY
74636: LIST
74637: LIST
74638: PUSH
74639: LD_INT 1
74641: PUSH
74642: LD_INT 2
74644: NEG
74645: PUSH
74646: EMPTY
74647: LIST
74648: LIST
74649: PUSH
74650: EMPTY
74651: LIST
74652: LIST
74653: LIST
74654: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
74655: LD_ADDR_VAR 0 42
74659: PUSH
74660: LD_INT 2
74662: PUSH
74663: LD_INT 0
74665: PUSH
74666: EMPTY
74667: LIST
74668: LIST
74669: PUSH
74670: LD_INT 2
74672: PUSH
74673: LD_INT 1
74675: NEG
74676: PUSH
74677: EMPTY
74678: LIST
74679: LIST
74680: PUSH
74681: LD_INT 3
74683: PUSH
74684: LD_INT 1
74686: PUSH
74687: EMPTY
74688: LIST
74689: LIST
74690: PUSH
74691: EMPTY
74692: LIST
74693: LIST
74694: LIST
74695: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
74696: LD_ADDR_VAR 0 43
74700: PUSH
74701: LD_INT 2
74703: PUSH
74704: LD_INT 2
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: PUSH
74711: LD_INT 3
74713: PUSH
74714: LD_INT 2
74716: PUSH
74717: EMPTY
74718: LIST
74719: LIST
74720: PUSH
74721: LD_INT 2
74723: PUSH
74724: LD_INT 3
74726: PUSH
74727: EMPTY
74728: LIST
74729: LIST
74730: PUSH
74731: EMPTY
74732: LIST
74733: LIST
74734: LIST
74735: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
74736: LD_ADDR_VAR 0 44
74740: PUSH
74741: LD_INT 0
74743: PUSH
74744: LD_INT 2
74746: PUSH
74747: EMPTY
74748: LIST
74749: LIST
74750: PUSH
74751: LD_INT 1
74753: PUSH
74754: LD_INT 3
74756: PUSH
74757: EMPTY
74758: LIST
74759: LIST
74760: PUSH
74761: LD_INT 1
74763: NEG
74764: PUSH
74765: LD_INT 2
74767: PUSH
74768: EMPTY
74769: LIST
74770: LIST
74771: PUSH
74772: EMPTY
74773: LIST
74774: LIST
74775: LIST
74776: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
74777: LD_ADDR_VAR 0 45
74781: PUSH
74782: LD_INT 2
74784: NEG
74785: PUSH
74786: LD_INT 0
74788: PUSH
74789: EMPTY
74790: LIST
74791: LIST
74792: PUSH
74793: LD_INT 2
74795: NEG
74796: PUSH
74797: LD_INT 1
74799: PUSH
74800: EMPTY
74801: LIST
74802: LIST
74803: PUSH
74804: LD_INT 3
74806: NEG
74807: PUSH
74808: LD_INT 1
74810: NEG
74811: PUSH
74812: EMPTY
74813: LIST
74814: LIST
74815: PUSH
74816: EMPTY
74817: LIST
74818: LIST
74819: LIST
74820: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
74821: LD_ADDR_VAR 0 46
74825: PUSH
74826: LD_INT 2
74828: NEG
74829: PUSH
74830: LD_INT 2
74832: NEG
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: PUSH
74838: LD_INT 2
74840: NEG
74841: PUSH
74842: LD_INT 3
74844: NEG
74845: PUSH
74846: EMPTY
74847: LIST
74848: LIST
74849: PUSH
74850: LD_INT 3
74852: NEG
74853: PUSH
74854: LD_INT 2
74856: NEG
74857: PUSH
74858: EMPTY
74859: LIST
74860: LIST
74861: PUSH
74862: EMPTY
74863: LIST
74864: LIST
74865: LIST
74866: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
74867: LD_ADDR_VAR 0 47
74871: PUSH
74872: LD_INT 2
74874: NEG
74875: PUSH
74876: LD_INT 3
74878: NEG
74879: PUSH
74880: EMPTY
74881: LIST
74882: LIST
74883: PUSH
74884: LD_INT 1
74886: NEG
74887: PUSH
74888: LD_INT 3
74890: NEG
74891: PUSH
74892: EMPTY
74893: LIST
74894: LIST
74895: PUSH
74896: EMPTY
74897: LIST
74898: LIST
74899: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
74900: LD_ADDR_VAR 0 48
74904: PUSH
74905: LD_INT 1
74907: PUSH
74908: LD_INT 2
74910: NEG
74911: PUSH
74912: EMPTY
74913: LIST
74914: LIST
74915: PUSH
74916: LD_INT 2
74918: PUSH
74919: LD_INT 1
74921: NEG
74922: PUSH
74923: EMPTY
74924: LIST
74925: LIST
74926: PUSH
74927: EMPTY
74928: LIST
74929: LIST
74930: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
74931: LD_ADDR_VAR 0 49
74935: PUSH
74936: LD_INT 3
74938: PUSH
74939: LD_INT 1
74941: PUSH
74942: EMPTY
74943: LIST
74944: LIST
74945: PUSH
74946: LD_INT 3
74948: PUSH
74949: LD_INT 2
74951: PUSH
74952: EMPTY
74953: LIST
74954: LIST
74955: PUSH
74956: EMPTY
74957: LIST
74958: LIST
74959: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
74960: LD_ADDR_VAR 0 50
74964: PUSH
74965: LD_INT 2
74967: PUSH
74968: LD_INT 3
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: PUSH
74975: LD_INT 1
74977: PUSH
74978: LD_INT 3
74980: PUSH
74981: EMPTY
74982: LIST
74983: LIST
74984: PUSH
74985: EMPTY
74986: LIST
74987: LIST
74988: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
74989: LD_ADDR_VAR 0 51
74993: PUSH
74994: LD_INT 1
74996: NEG
74997: PUSH
74998: LD_INT 2
75000: PUSH
75001: EMPTY
75002: LIST
75003: LIST
75004: PUSH
75005: LD_INT 2
75007: NEG
75008: PUSH
75009: LD_INT 1
75011: PUSH
75012: EMPTY
75013: LIST
75014: LIST
75015: PUSH
75016: EMPTY
75017: LIST
75018: LIST
75019: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
75020: LD_ADDR_VAR 0 52
75024: PUSH
75025: LD_INT 3
75027: NEG
75028: PUSH
75029: LD_INT 1
75031: NEG
75032: PUSH
75033: EMPTY
75034: LIST
75035: LIST
75036: PUSH
75037: LD_INT 3
75039: NEG
75040: PUSH
75041: LD_INT 2
75043: NEG
75044: PUSH
75045: EMPTY
75046: LIST
75047: LIST
75048: PUSH
75049: EMPTY
75050: LIST
75051: LIST
75052: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
75053: LD_ADDR_VAR 0 53
75057: PUSH
75058: LD_INT 1
75060: NEG
75061: PUSH
75062: LD_INT 3
75064: NEG
75065: PUSH
75066: EMPTY
75067: LIST
75068: LIST
75069: PUSH
75070: LD_INT 0
75072: PUSH
75073: LD_INT 3
75075: NEG
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: PUSH
75081: LD_INT 1
75083: PUSH
75084: LD_INT 2
75086: NEG
75087: PUSH
75088: EMPTY
75089: LIST
75090: LIST
75091: PUSH
75092: EMPTY
75093: LIST
75094: LIST
75095: LIST
75096: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
75097: LD_ADDR_VAR 0 54
75101: PUSH
75102: LD_INT 2
75104: PUSH
75105: LD_INT 1
75107: NEG
75108: PUSH
75109: EMPTY
75110: LIST
75111: LIST
75112: PUSH
75113: LD_INT 3
75115: PUSH
75116: LD_INT 0
75118: PUSH
75119: EMPTY
75120: LIST
75121: LIST
75122: PUSH
75123: LD_INT 3
75125: PUSH
75126: LD_INT 1
75128: PUSH
75129: EMPTY
75130: LIST
75131: LIST
75132: PUSH
75133: EMPTY
75134: LIST
75135: LIST
75136: LIST
75137: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
75138: LD_ADDR_VAR 0 55
75142: PUSH
75143: LD_INT 3
75145: PUSH
75146: LD_INT 2
75148: PUSH
75149: EMPTY
75150: LIST
75151: LIST
75152: PUSH
75153: LD_INT 3
75155: PUSH
75156: LD_INT 3
75158: PUSH
75159: EMPTY
75160: LIST
75161: LIST
75162: PUSH
75163: LD_INT 2
75165: PUSH
75166: LD_INT 3
75168: PUSH
75169: EMPTY
75170: LIST
75171: LIST
75172: PUSH
75173: EMPTY
75174: LIST
75175: LIST
75176: LIST
75177: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
75178: LD_ADDR_VAR 0 56
75182: PUSH
75183: LD_INT 1
75185: PUSH
75186: LD_INT 3
75188: PUSH
75189: EMPTY
75190: LIST
75191: LIST
75192: PUSH
75193: LD_INT 0
75195: PUSH
75196: LD_INT 3
75198: PUSH
75199: EMPTY
75200: LIST
75201: LIST
75202: PUSH
75203: LD_INT 1
75205: NEG
75206: PUSH
75207: LD_INT 2
75209: PUSH
75210: EMPTY
75211: LIST
75212: LIST
75213: PUSH
75214: EMPTY
75215: LIST
75216: LIST
75217: LIST
75218: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
75219: LD_ADDR_VAR 0 57
75223: PUSH
75224: LD_INT 2
75226: NEG
75227: PUSH
75228: LD_INT 1
75230: PUSH
75231: EMPTY
75232: LIST
75233: LIST
75234: PUSH
75235: LD_INT 3
75237: NEG
75238: PUSH
75239: LD_INT 0
75241: PUSH
75242: EMPTY
75243: LIST
75244: LIST
75245: PUSH
75246: LD_INT 3
75248: NEG
75249: PUSH
75250: LD_INT 1
75252: NEG
75253: PUSH
75254: EMPTY
75255: LIST
75256: LIST
75257: PUSH
75258: EMPTY
75259: LIST
75260: LIST
75261: LIST
75262: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75263: LD_ADDR_VAR 0 58
75267: PUSH
75268: LD_INT 2
75270: NEG
75271: PUSH
75272: LD_INT 3
75274: NEG
75275: PUSH
75276: EMPTY
75277: LIST
75278: LIST
75279: PUSH
75280: LD_INT 3
75282: NEG
75283: PUSH
75284: LD_INT 2
75286: NEG
75287: PUSH
75288: EMPTY
75289: LIST
75290: LIST
75291: PUSH
75292: LD_INT 3
75294: NEG
75295: PUSH
75296: LD_INT 3
75298: NEG
75299: PUSH
75300: EMPTY
75301: LIST
75302: LIST
75303: PUSH
75304: EMPTY
75305: LIST
75306: LIST
75307: LIST
75308: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
75309: LD_ADDR_VAR 0 59
75313: PUSH
75314: LD_INT 1
75316: NEG
75317: PUSH
75318: LD_INT 2
75320: NEG
75321: PUSH
75322: EMPTY
75323: LIST
75324: LIST
75325: PUSH
75326: LD_INT 0
75328: PUSH
75329: LD_INT 2
75331: NEG
75332: PUSH
75333: EMPTY
75334: LIST
75335: LIST
75336: PUSH
75337: LD_INT 1
75339: PUSH
75340: LD_INT 1
75342: NEG
75343: PUSH
75344: EMPTY
75345: LIST
75346: LIST
75347: PUSH
75348: EMPTY
75349: LIST
75350: LIST
75351: LIST
75352: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
75353: LD_ADDR_VAR 0 60
75357: PUSH
75358: LD_INT 1
75360: PUSH
75361: LD_INT 1
75363: NEG
75364: PUSH
75365: EMPTY
75366: LIST
75367: LIST
75368: PUSH
75369: LD_INT 2
75371: PUSH
75372: LD_INT 0
75374: PUSH
75375: EMPTY
75376: LIST
75377: LIST
75378: PUSH
75379: LD_INT 2
75381: PUSH
75382: LD_INT 1
75384: PUSH
75385: EMPTY
75386: LIST
75387: LIST
75388: PUSH
75389: EMPTY
75390: LIST
75391: LIST
75392: LIST
75393: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
75394: LD_ADDR_VAR 0 61
75398: PUSH
75399: LD_INT 2
75401: PUSH
75402: LD_INT 1
75404: PUSH
75405: EMPTY
75406: LIST
75407: LIST
75408: PUSH
75409: LD_INT 2
75411: PUSH
75412: LD_INT 2
75414: PUSH
75415: EMPTY
75416: LIST
75417: LIST
75418: PUSH
75419: LD_INT 1
75421: PUSH
75422: LD_INT 2
75424: PUSH
75425: EMPTY
75426: LIST
75427: LIST
75428: PUSH
75429: EMPTY
75430: LIST
75431: LIST
75432: LIST
75433: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
75434: LD_ADDR_VAR 0 62
75438: PUSH
75439: LD_INT 1
75441: PUSH
75442: LD_INT 2
75444: PUSH
75445: EMPTY
75446: LIST
75447: LIST
75448: PUSH
75449: LD_INT 0
75451: PUSH
75452: LD_INT 2
75454: PUSH
75455: EMPTY
75456: LIST
75457: LIST
75458: PUSH
75459: LD_INT 1
75461: NEG
75462: PUSH
75463: LD_INT 1
75465: PUSH
75466: EMPTY
75467: LIST
75468: LIST
75469: PUSH
75470: EMPTY
75471: LIST
75472: LIST
75473: LIST
75474: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
75475: LD_ADDR_VAR 0 63
75479: PUSH
75480: LD_INT 1
75482: NEG
75483: PUSH
75484: LD_INT 1
75486: PUSH
75487: EMPTY
75488: LIST
75489: LIST
75490: PUSH
75491: LD_INT 2
75493: NEG
75494: PUSH
75495: LD_INT 0
75497: PUSH
75498: EMPTY
75499: LIST
75500: LIST
75501: PUSH
75502: LD_INT 2
75504: NEG
75505: PUSH
75506: LD_INT 1
75508: NEG
75509: PUSH
75510: EMPTY
75511: LIST
75512: LIST
75513: PUSH
75514: EMPTY
75515: LIST
75516: LIST
75517: LIST
75518: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75519: LD_ADDR_VAR 0 64
75523: PUSH
75524: LD_INT 1
75526: NEG
75527: PUSH
75528: LD_INT 2
75530: NEG
75531: PUSH
75532: EMPTY
75533: LIST
75534: LIST
75535: PUSH
75536: LD_INT 2
75538: NEG
75539: PUSH
75540: LD_INT 1
75542: NEG
75543: PUSH
75544: EMPTY
75545: LIST
75546: LIST
75547: PUSH
75548: LD_INT 2
75550: NEG
75551: PUSH
75552: LD_INT 2
75554: NEG
75555: PUSH
75556: EMPTY
75557: LIST
75558: LIST
75559: PUSH
75560: EMPTY
75561: LIST
75562: LIST
75563: LIST
75564: ST_TO_ADDR
// end ; 2 :
75565: GO 78831
75567: LD_INT 2
75569: DOUBLE
75570: EQUAL
75571: IFTRUE 75575
75573: GO 78830
75575: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
75576: LD_ADDR_VAR 0 29
75580: PUSH
75581: LD_INT 4
75583: PUSH
75584: LD_INT 0
75586: PUSH
75587: EMPTY
75588: LIST
75589: LIST
75590: PUSH
75591: LD_INT 4
75593: PUSH
75594: LD_INT 1
75596: NEG
75597: PUSH
75598: EMPTY
75599: LIST
75600: LIST
75601: PUSH
75602: LD_INT 5
75604: PUSH
75605: LD_INT 0
75607: PUSH
75608: EMPTY
75609: LIST
75610: LIST
75611: PUSH
75612: LD_INT 5
75614: PUSH
75615: LD_INT 1
75617: PUSH
75618: EMPTY
75619: LIST
75620: LIST
75621: PUSH
75622: LD_INT 4
75624: PUSH
75625: LD_INT 1
75627: PUSH
75628: EMPTY
75629: LIST
75630: LIST
75631: PUSH
75632: LD_INT 3
75634: PUSH
75635: LD_INT 0
75637: PUSH
75638: EMPTY
75639: LIST
75640: LIST
75641: PUSH
75642: LD_INT 3
75644: PUSH
75645: LD_INT 1
75647: NEG
75648: PUSH
75649: EMPTY
75650: LIST
75651: LIST
75652: PUSH
75653: LD_INT 3
75655: PUSH
75656: LD_INT 2
75658: NEG
75659: PUSH
75660: EMPTY
75661: LIST
75662: LIST
75663: PUSH
75664: LD_INT 5
75666: PUSH
75667: LD_INT 2
75669: PUSH
75670: EMPTY
75671: LIST
75672: LIST
75673: PUSH
75674: LD_INT 3
75676: PUSH
75677: LD_INT 3
75679: PUSH
75680: EMPTY
75681: LIST
75682: LIST
75683: PUSH
75684: LD_INT 3
75686: PUSH
75687: LD_INT 2
75689: PUSH
75690: EMPTY
75691: LIST
75692: LIST
75693: PUSH
75694: LD_INT 4
75696: PUSH
75697: LD_INT 3
75699: PUSH
75700: EMPTY
75701: LIST
75702: LIST
75703: PUSH
75704: LD_INT 4
75706: PUSH
75707: LD_INT 4
75709: PUSH
75710: EMPTY
75711: LIST
75712: LIST
75713: PUSH
75714: LD_INT 3
75716: PUSH
75717: LD_INT 4
75719: PUSH
75720: EMPTY
75721: LIST
75722: LIST
75723: PUSH
75724: LD_INT 2
75726: PUSH
75727: LD_INT 3
75729: PUSH
75730: EMPTY
75731: LIST
75732: LIST
75733: PUSH
75734: LD_INT 2
75736: PUSH
75737: LD_INT 2
75739: PUSH
75740: EMPTY
75741: LIST
75742: LIST
75743: PUSH
75744: LD_INT 4
75746: PUSH
75747: LD_INT 2
75749: PUSH
75750: EMPTY
75751: LIST
75752: LIST
75753: PUSH
75754: LD_INT 2
75756: PUSH
75757: LD_INT 4
75759: PUSH
75760: EMPTY
75761: LIST
75762: LIST
75763: PUSH
75764: LD_INT 0
75766: PUSH
75767: LD_INT 4
75769: PUSH
75770: EMPTY
75771: LIST
75772: LIST
75773: PUSH
75774: LD_INT 0
75776: PUSH
75777: LD_INT 3
75779: PUSH
75780: EMPTY
75781: LIST
75782: LIST
75783: PUSH
75784: LD_INT 1
75786: PUSH
75787: LD_INT 4
75789: PUSH
75790: EMPTY
75791: LIST
75792: LIST
75793: PUSH
75794: LD_INT 1
75796: PUSH
75797: LD_INT 5
75799: PUSH
75800: EMPTY
75801: LIST
75802: LIST
75803: PUSH
75804: LD_INT 0
75806: PUSH
75807: LD_INT 5
75809: PUSH
75810: EMPTY
75811: LIST
75812: LIST
75813: PUSH
75814: LD_INT 1
75816: NEG
75817: PUSH
75818: LD_INT 4
75820: PUSH
75821: EMPTY
75822: LIST
75823: LIST
75824: PUSH
75825: LD_INT 1
75827: NEG
75828: PUSH
75829: LD_INT 3
75831: PUSH
75832: EMPTY
75833: LIST
75834: LIST
75835: PUSH
75836: LD_INT 2
75838: PUSH
75839: LD_INT 5
75841: PUSH
75842: EMPTY
75843: LIST
75844: LIST
75845: PUSH
75846: LD_INT 2
75848: NEG
75849: PUSH
75850: LD_INT 3
75852: PUSH
75853: EMPTY
75854: LIST
75855: LIST
75856: PUSH
75857: LD_INT 3
75859: NEG
75860: PUSH
75861: LD_INT 0
75863: PUSH
75864: EMPTY
75865: LIST
75866: LIST
75867: PUSH
75868: LD_INT 3
75870: NEG
75871: PUSH
75872: LD_INT 1
75874: NEG
75875: PUSH
75876: EMPTY
75877: LIST
75878: LIST
75879: PUSH
75880: LD_INT 2
75882: NEG
75883: PUSH
75884: LD_INT 0
75886: PUSH
75887: EMPTY
75888: LIST
75889: LIST
75890: PUSH
75891: LD_INT 2
75893: NEG
75894: PUSH
75895: LD_INT 1
75897: PUSH
75898: EMPTY
75899: LIST
75900: LIST
75901: PUSH
75902: LD_INT 3
75904: NEG
75905: PUSH
75906: LD_INT 1
75908: PUSH
75909: EMPTY
75910: LIST
75911: LIST
75912: PUSH
75913: LD_INT 4
75915: NEG
75916: PUSH
75917: LD_INT 0
75919: PUSH
75920: EMPTY
75921: LIST
75922: LIST
75923: PUSH
75924: LD_INT 4
75926: NEG
75927: PUSH
75928: LD_INT 1
75930: NEG
75931: PUSH
75932: EMPTY
75933: LIST
75934: LIST
75935: PUSH
75936: LD_INT 4
75938: NEG
75939: PUSH
75940: LD_INT 2
75942: NEG
75943: PUSH
75944: EMPTY
75945: LIST
75946: LIST
75947: PUSH
75948: LD_INT 2
75950: NEG
75951: PUSH
75952: LD_INT 2
75954: PUSH
75955: EMPTY
75956: LIST
75957: LIST
75958: PUSH
75959: LD_INT 4
75961: NEG
75962: PUSH
75963: LD_INT 4
75965: NEG
75966: PUSH
75967: EMPTY
75968: LIST
75969: LIST
75970: PUSH
75971: LD_INT 4
75973: NEG
75974: PUSH
75975: LD_INT 5
75977: NEG
75978: PUSH
75979: EMPTY
75980: LIST
75981: LIST
75982: PUSH
75983: LD_INT 3
75985: NEG
75986: PUSH
75987: LD_INT 4
75989: NEG
75990: PUSH
75991: EMPTY
75992: LIST
75993: LIST
75994: PUSH
75995: LD_INT 3
75997: NEG
75998: PUSH
75999: LD_INT 3
76001: NEG
76002: PUSH
76003: EMPTY
76004: LIST
76005: LIST
76006: PUSH
76007: LD_INT 4
76009: NEG
76010: PUSH
76011: LD_INT 3
76013: NEG
76014: PUSH
76015: EMPTY
76016: LIST
76017: LIST
76018: PUSH
76019: LD_INT 5
76021: NEG
76022: PUSH
76023: LD_INT 4
76025: NEG
76026: PUSH
76027: EMPTY
76028: LIST
76029: LIST
76030: PUSH
76031: LD_INT 5
76033: NEG
76034: PUSH
76035: LD_INT 5
76037: NEG
76038: PUSH
76039: EMPTY
76040: LIST
76041: LIST
76042: PUSH
76043: LD_INT 3
76045: NEG
76046: PUSH
76047: LD_INT 5
76049: NEG
76050: PUSH
76051: EMPTY
76052: LIST
76053: LIST
76054: PUSH
76055: LD_INT 5
76057: NEG
76058: PUSH
76059: LD_INT 3
76061: NEG
76062: PUSH
76063: EMPTY
76064: LIST
76065: LIST
76066: PUSH
76067: EMPTY
76068: LIST
76069: LIST
76070: LIST
76071: LIST
76072: LIST
76073: LIST
76074: LIST
76075: LIST
76076: LIST
76077: LIST
76078: LIST
76079: LIST
76080: LIST
76081: LIST
76082: LIST
76083: LIST
76084: LIST
76085: LIST
76086: LIST
76087: LIST
76088: LIST
76089: LIST
76090: LIST
76091: LIST
76092: LIST
76093: LIST
76094: LIST
76095: LIST
76096: LIST
76097: LIST
76098: LIST
76099: LIST
76100: LIST
76101: LIST
76102: LIST
76103: LIST
76104: LIST
76105: LIST
76106: LIST
76107: LIST
76108: LIST
76109: LIST
76110: LIST
76111: LIST
76112: LIST
76113: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
76114: LD_ADDR_VAR 0 30
76118: PUSH
76119: LD_INT 4
76121: PUSH
76122: LD_INT 4
76124: PUSH
76125: EMPTY
76126: LIST
76127: LIST
76128: PUSH
76129: LD_INT 4
76131: PUSH
76132: LD_INT 3
76134: PUSH
76135: EMPTY
76136: LIST
76137: LIST
76138: PUSH
76139: LD_INT 5
76141: PUSH
76142: LD_INT 4
76144: PUSH
76145: EMPTY
76146: LIST
76147: LIST
76148: PUSH
76149: LD_INT 5
76151: PUSH
76152: LD_INT 5
76154: PUSH
76155: EMPTY
76156: LIST
76157: LIST
76158: PUSH
76159: LD_INT 4
76161: PUSH
76162: LD_INT 5
76164: PUSH
76165: EMPTY
76166: LIST
76167: LIST
76168: PUSH
76169: LD_INT 3
76171: PUSH
76172: LD_INT 4
76174: PUSH
76175: EMPTY
76176: LIST
76177: LIST
76178: PUSH
76179: LD_INT 3
76181: PUSH
76182: LD_INT 3
76184: PUSH
76185: EMPTY
76186: LIST
76187: LIST
76188: PUSH
76189: LD_INT 5
76191: PUSH
76192: LD_INT 3
76194: PUSH
76195: EMPTY
76196: LIST
76197: LIST
76198: PUSH
76199: LD_INT 3
76201: PUSH
76202: LD_INT 5
76204: PUSH
76205: EMPTY
76206: LIST
76207: LIST
76208: PUSH
76209: LD_INT 0
76211: PUSH
76212: LD_INT 3
76214: PUSH
76215: EMPTY
76216: LIST
76217: LIST
76218: PUSH
76219: LD_INT 0
76221: PUSH
76222: LD_INT 2
76224: PUSH
76225: EMPTY
76226: LIST
76227: LIST
76228: PUSH
76229: LD_INT 1
76231: PUSH
76232: LD_INT 3
76234: PUSH
76235: EMPTY
76236: LIST
76237: LIST
76238: PUSH
76239: LD_INT 1
76241: PUSH
76242: LD_INT 4
76244: PUSH
76245: EMPTY
76246: LIST
76247: LIST
76248: PUSH
76249: LD_INT 0
76251: PUSH
76252: LD_INT 4
76254: PUSH
76255: EMPTY
76256: LIST
76257: LIST
76258: PUSH
76259: LD_INT 1
76261: NEG
76262: PUSH
76263: LD_INT 3
76265: PUSH
76266: EMPTY
76267: LIST
76268: LIST
76269: PUSH
76270: LD_INT 1
76272: NEG
76273: PUSH
76274: LD_INT 2
76276: PUSH
76277: EMPTY
76278: LIST
76279: LIST
76280: PUSH
76281: LD_INT 2
76283: PUSH
76284: LD_INT 4
76286: PUSH
76287: EMPTY
76288: LIST
76289: LIST
76290: PUSH
76291: LD_INT 2
76293: NEG
76294: PUSH
76295: LD_INT 2
76297: PUSH
76298: EMPTY
76299: LIST
76300: LIST
76301: PUSH
76302: LD_INT 4
76304: NEG
76305: PUSH
76306: LD_INT 0
76308: PUSH
76309: EMPTY
76310: LIST
76311: LIST
76312: PUSH
76313: LD_INT 4
76315: NEG
76316: PUSH
76317: LD_INT 1
76319: NEG
76320: PUSH
76321: EMPTY
76322: LIST
76323: LIST
76324: PUSH
76325: LD_INT 3
76327: NEG
76328: PUSH
76329: LD_INT 0
76331: PUSH
76332: EMPTY
76333: LIST
76334: LIST
76335: PUSH
76336: LD_INT 3
76338: NEG
76339: PUSH
76340: LD_INT 1
76342: PUSH
76343: EMPTY
76344: LIST
76345: LIST
76346: PUSH
76347: LD_INT 4
76349: NEG
76350: PUSH
76351: LD_INT 1
76353: PUSH
76354: EMPTY
76355: LIST
76356: LIST
76357: PUSH
76358: LD_INT 5
76360: NEG
76361: PUSH
76362: LD_INT 0
76364: PUSH
76365: EMPTY
76366: LIST
76367: LIST
76368: PUSH
76369: LD_INT 5
76371: NEG
76372: PUSH
76373: LD_INT 1
76375: NEG
76376: PUSH
76377: EMPTY
76378: LIST
76379: LIST
76380: PUSH
76381: LD_INT 5
76383: NEG
76384: PUSH
76385: LD_INT 2
76387: NEG
76388: PUSH
76389: EMPTY
76390: LIST
76391: LIST
76392: PUSH
76393: LD_INT 3
76395: NEG
76396: PUSH
76397: LD_INT 2
76399: PUSH
76400: EMPTY
76401: LIST
76402: LIST
76403: PUSH
76404: LD_INT 3
76406: NEG
76407: PUSH
76408: LD_INT 3
76410: NEG
76411: PUSH
76412: EMPTY
76413: LIST
76414: LIST
76415: PUSH
76416: LD_INT 3
76418: NEG
76419: PUSH
76420: LD_INT 4
76422: NEG
76423: PUSH
76424: EMPTY
76425: LIST
76426: LIST
76427: PUSH
76428: LD_INT 2
76430: NEG
76431: PUSH
76432: LD_INT 3
76434: NEG
76435: PUSH
76436: EMPTY
76437: LIST
76438: LIST
76439: PUSH
76440: LD_INT 2
76442: NEG
76443: PUSH
76444: LD_INT 2
76446: NEG
76447: PUSH
76448: EMPTY
76449: LIST
76450: LIST
76451: PUSH
76452: LD_INT 3
76454: NEG
76455: PUSH
76456: LD_INT 2
76458: NEG
76459: PUSH
76460: EMPTY
76461: LIST
76462: LIST
76463: PUSH
76464: LD_INT 4
76466: NEG
76467: PUSH
76468: LD_INT 3
76470: NEG
76471: PUSH
76472: EMPTY
76473: LIST
76474: LIST
76475: PUSH
76476: LD_INT 4
76478: NEG
76479: PUSH
76480: LD_INT 4
76482: NEG
76483: PUSH
76484: EMPTY
76485: LIST
76486: LIST
76487: PUSH
76488: LD_INT 2
76490: NEG
76491: PUSH
76492: LD_INT 4
76494: NEG
76495: PUSH
76496: EMPTY
76497: LIST
76498: LIST
76499: PUSH
76500: LD_INT 4
76502: NEG
76503: PUSH
76504: LD_INT 2
76506: NEG
76507: PUSH
76508: EMPTY
76509: LIST
76510: LIST
76511: PUSH
76512: LD_INT 0
76514: PUSH
76515: LD_INT 4
76517: NEG
76518: PUSH
76519: EMPTY
76520: LIST
76521: LIST
76522: PUSH
76523: LD_INT 0
76525: PUSH
76526: LD_INT 5
76528: NEG
76529: PUSH
76530: EMPTY
76531: LIST
76532: LIST
76533: PUSH
76534: LD_INT 1
76536: PUSH
76537: LD_INT 4
76539: NEG
76540: PUSH
76541: EMPTY
76542: LIST
76543: LIST
76544: PUSH
76545: LD_INT 1
76547: PUSH
76548: LD_INT 3
76550: NEG
76551: PUSH
76552: EMPTY
76553: LIST
76554: LIST
76555: PUSH
76556: LD_INT 0
76558: PUSH
76559: LD_INT 3
76561: NEG
76562: PUSH
76563: EMPTY
76564: LIST
76565: LIST
76566: PUSH
76567: LD_INT 1
76569: NEG
76570: PUSH
76571: LD_INT 4
76573: NEG
76574: PUSH
76575: EMPTY
76576: LIST
76577: LIST
76578: PUSH
76579: LD_INT 1
76581: NEG
76582: PUSH
76583: LD_INT 5
76585: NEG
76586: PUSH
76587: EMPTY
76588: LIST
76589: LIST
76590: PUSH
76591: LD_INT 2
76593: PUSH
76594: LD_INT 3
76596: NEG
76597: PUSH
76598: EMPTY
76599: LIST
76600: LIST
76601: PUSH
76602: LD_INT 2
76604: NEG
76605: PUSH
76606: LD_INT 5
76608: NEG
76609: PUSH
76610: EMPTY
76611: LIST
76612: LIST
76613: PUSH
76614: EMPTY
76615: LIST
76616: LIST
76617: LIST
76618: LIST
76619: LIST
76620: LIST
76621: LIST
76622: LIST
76623: LIST
76624: LIST
76625: LIST
76626: LIST
76627: LIST
76628: LIST
76629: LIST
76630: LIST
76631: LIST
76632: LIST
76633: LIST
76634: LIST
76635: LIST
76636: LIST
76637: LIST
76638: LIST
76639: LIST
76640: LIST
76641: LIST
76642: LIST
76643: LIST
76644: LIST
76645: LIST
76646: LIST
76647: LIST
76648: LIST
76649: LIST
76650: LIST
76651: LIST
76652: LIST
76653: LIST
76654: LIST
76655: LIST
76656: LIST
76657: LIST
76658: LIST
76659: LIST
76660: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
76661: LD_ADDR_VAR 0 31
76665: PUSH
76666: LD_INT 0
76668: PUSH
76669: LD_INT 4
76671: PUSH
76672: EMPTY
76673: LIST
76674: LIST
76675: PUSH
76676: LD_INT 0
76678: PUSH
76679: LD_INT 3
76681: PUSH
76682: EMPTY
76683: LIST
76684: LIST
76685: PUSH
76686: LD_INT 1
76688: PUSH
76689: LD_INT 4
76691: PUSH
76692: EMPTY
76693: LIST
76694: LIST
76695: PUSH
76696: LD_INT 1
76698: PUSH
76699: LD_INT 5
76701: PUSH
76702: EMPTY
76703: LIST
76704: LIST
76705: PUSH
76706: LD_INT 0
76708: PUSH
76709: LD_INT 5
76711: PUSH
76712: EMPTY
76713: LIST
76714: LIST
76715: PUSH
76716: LD_INT 1
76718: NEG
76719: PUSH
76720: LD_INT 4
76722: PUSH
76723: EMPTY
76724: LIST
76725: LIST
76726: PUSH
76727: LD_INT 1
76729: NEG
76730: PUSH
76731: LD_INT 3
76733: PUSH
76734: EMPTY
76735: LIST
76736: LIST
76737: PUSH
76738: LD_INT 2
76740: PUSH
76741: LD_INT 5
76743: PUSH
76744: EMPTY
76745: LIST
76746: LIST
76747: PUSH
76748: LD_INT 2
76750: NEG
76751: PUSH
76752: LD_INT 3
76754: PUSH
76755: EMPTY
76756: LIST
76757: LIST
76758: PUSH
76759: LD_INT 3
76761: NEG
76762: PUSH
76763: LD_INT 0
76765: PUSH
76766: EMPTY
76767: LIST
76768: LIST
76769: PUSH
76770: LD_INT 3
76772: NEG
76773: PUSH
76774: LD_INT 1
76776: NEG
76777: PUSH
76778: EMPTY
76779: LIST
76780: LIST
76781: PUSH
76782: LD_INT 2
76784: NEG
76785: PUSH
76786: LD_INT 0
76788: PUSH
76789: EMPTY
76790: LIST
76791: LIST
76792: PUSH
76793: LD_INT 2
76795: NEG
76796: PUSH
76797: LD_INT 1
76799: PUSH
76800: EMPTY
76801: LIST
76802: LIST
76803: PUSH
76804: LD_INT 3
76806: NEG
76807: PUSH
76808: LD_INT 1
76810: PUSH
76811: EMPTY
76812: LIST
76813: LIST
76814: PUSH
76815: LD_INT 4
76817: NEG
76818: PUSH
76819: LD_INT 0
76821: PUSH
76822: EMPTY
76823: LIST
76824: LIST
76825: PUSH
76826: LD_INT 4
76828: NEG
76829: PUSH
76830: LD_INT 1
76832: NEG
76833: PUSH
76834: EMPTY
76835: LIST
76836: LIST
76837: PUSH
76838: LD_INT 4
76840: NEG
76841: PUSH
76842: LD_INT 2
76844: NEG
76845: PUSH
76846: EMPTY
76847: LIST
76848: LIST
76849: PUSH
76850: LD_INT 2
76852: NEG
76853: PUSH
76854: LD_INT 2
76856: PUSH
76857: EMPTY
76858: LIST
76859: LIST
76860: PUSH
76861: LD_INT 4
76863: NEG
76864: PUSH
76865: LD_INT 4
76867: NEG
76868: PUSH
76869: EMPTY
76870: LIST
76871: LIST
76872: PUSH
76873: LD_INT 4
76875: NEG
76876: PUSH
76877: LD_INT 5
76879: NEG
76880: PUSH
76881: EMPTY
76882: LIST
76883: LIST
76884: PUSH
76885: LD_INT 3
76887: NEG
76888: PUSH
76889: LD_INT 4
76891: NEG
76892: PUSH
76893: EMPTY
76894: LIST
76895: LIST
76896: PUSH
76897: LD_INT 3
76899: NEG
76900: PUSH
76901: LD_INT 3
76903: NEG
76904: PUSH
76905: EMPTY
76906: LIST
76907: LIST
76908: PUSH
76909: LD_INT 4
76911: NEG
76912: PUSH
76913: LD_INT 3
76915: NEG
76916: PUSH
76917: EMPTY
76918: LIST
76919: LIST
76920: PUSH
76921: LD_INT 5
76923: NEG
76924: PUSH
76925: LD_INT 4
76927: NEG
76928: PUSH
76929: EMPTY
76930: LIST
76931: LIST
76932: PUSH
76933: LD_INT 5
76935: NEG
76936: PUSH
76937: LD_INT 5
76939: NEG
76940: PUSH
76941: EMPTY
76942: LIST
76943: LIST
76944: PUSH
76945: LD_INT 3
76947: NEG
76948: PUSH
76949: LD_INT 5
76951: NEG
76952: PUSH
76953: EMPTY
76954: LIST
76955: LIST
76956: PUSH
76957: LD_INT 5
76959: NEG
76960: PUSH
76961: LD_INT 3
76963: NEG
76964: PUSH
76965: EMPTY
76966: LIST
76967: LIST
76968: PUSH
76969: LD_INT 0
76971: PUSH
76972: LD_INT 3
76974: NEG
76975: PUSH
76976: EMPTY
76977: LIST
76978: LIST
76979: PUSH
76980: LD_INT 0
76982: PUSH
76983: LD_INT 4
76985: NEG
76986: PUSH
76987: EMPTY
76988: LIST
76989: LIST
76990: PUSH
76991: LD_INT 1
76993: PUSH
76994: LD_INT 3
76996: NEG
76997: PUSH
76998: EMPTY
76999: LIST
77000: LIST
77001: PUSH
77002: LD_INT 1
77004: PUSH
77005: LD_INT 2
77007: NEG
77008: PUSH
77009: EMPTY
77010: LIST
77011: LIST
77012: PUSH
77013: LD_INT 0
77015: PUSH
77016: LD_INT 2
77018: NEG
77019: PUSH
77020: EMPTY
77021: LIST
77022: LIST
77023: PUSH
77024: LD_INT 1
77026: NEG
77027: PUSH
77028: LD_INT 3
77030: NEG
77031: PUSH
77032: EMPTY
77033: LIST
77034: LIST
77035: PUSH
77036: LD_INT 1
77038: NEG
77039: PUSH
77040: LD_INT 4
77042: NEG
77043: PUSH
77044: EMPTY
77045: LIST
77046: LIST
77047: PUSH
77048: LD_INT 2
77050: PUSH
77051: LD_INT 2
77053: NEG
77054: PUSH
77055: EMPTY
77056: LIST
77057: LIST
77058: PUSH
77059: LD_INT 2
77061: NEG
77062: PUSH
77063: LD_INT 4
77065: NEG
77066: PUSH
77067: EMPTY
77068: LIST
77069: LIST
77070: PUSH
77071: LD_INT 4
77073: PUSH
77074: LD_INT 0
77076: PUSH
77077: EMPTY
77078: LIST
77079: LIST
77080: PUSH
77081: LD_INT 4
77083: PUSH
77084: LD_INT 1
77086: NEG
77087: PUSH
77088: EMPTY
77089: LIST
77090: LIST
77091: PUSH
77092: LD_INT 5
77094: PUSH
77095: LD_INT 0
77097: PUSH
77098: EMPTY
77099: LIST
77100: LIST
77101: PUSH
77102: LD_INT 5
77104: PUSH
77105: LD_INT 1
77107: PUSH
77108: EMPTY
77109: LIST
77110: LIST
77111: PUSH
77112: LD_INT 4
77114: PUSH
77115: LD_INT 1
77117: PUSH
77118: EMPTY
77119: LIST
77120: LIST
77121: PUSH
77122: LD_INT 3
77124: PUSH
77125: LD_INT 0
77127: PUSH
77128: EMPTY
77129: LIST
77130: LIST
77131: PUSH
77132: LD_INT 3
77134: PUSH
77135: LD_INT 1
77137: NEG
77138: PUSH
77139: EMPTY
77140: LIST
77141: LIST
77142: PUSH
77143: LD_INT 3
77145: PUSH
77146: LD_INT 2
77148: NEG
77149: PUSH
77150: EMPTY
77151: LIST
77152: LIST
77153: PUSH
77154: LD_INT 5
77156: PUSH
77157: LD_INT 2
77159: PUSH
77160: EMPTY
77161: LIST
77162: LIST
77163: PUSH
77164: EMPTY
77165: LIST
77166: LIST
77167: LIST
77168: LIST
77169: LIST
77170: LIST
77171: LIST
77172: LIST
77173: LIST
77174: LIST
77175: LIST
77176: LIST
77177: LIST
77178: LIST
77179: LIST
77180: LIST
77181: LIST
77182: LIST
77183: LIST
77184: LIST
77185: LIST
77186: LIST
77187: LIST
77188: LIST
77189: LIST
77190: LIST
77191: LIST
77192: LIST
77193: LIST
77194: LIST
77195: LIST
77196: LIST
77197: LIST
77198: LIST
77199: LIST
77200: LIST
77201: LIST
77202: LIST
77203: LIST
77204: LIST
77205: LIST
77206: LIST
77207: LIST
77208: LIST
77209: LIST
77210: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
77211: LD_ADDR_VAR 0 32
77215: PUSH
77216: LD_INT 4
77218: NEG
77219: PUSH
77220: LD_INT 0
77222: PUSH
77223: EMPTY
77224: LIST
77225: LIST
77226: PUSH
77227: LD_INT 4
77229: NEG
77230: PUSH
77231: LD_INT 1
77233: NEG
77234: PUSH
77235: EMPTY
77236: LIST
77237: LIST
77238: PUSH
77239: LD_INT 3
77241: NEG
77242: PUSH
77243: LD_INT 0
77245: PUSH
77246: EMPTY
77247: LIST
77248: LIST
77249: PUSH
77250: LD_INT 3
77252: NEG
77253: PUSH
77254: LD_INT 1
77256: PUSH
77257: EMPTY
77258: LIST
77259: LIST
77260: PUSH
77261: LD_INT 4
77263: NEG
77264: PUSH
77265: LD_INT 1
77267: PUSH
77268: EMPTY
77269: LIST
77270: LIST
77271: PUSH
77272: LD_INT 5
77274: NEG
77275: PUSH
77276: LD_INT 0
77278: PUSH
77279: EMPTY
77280: LIST
77281: LIST
77282: PUSH
77283: LD_INT 5
77285: NEG
77286: PUSH
77287: LD_INT 1
77289: NEG
77290: PUSH
77291: EMPTY
77292: LIST
77293: LIST
77294: PUSH
77295: LD_INT 5
77297: NEG
77298: PUSH
77299: LD_INT 2
77301: NEG
77302: PUSH
77303: EMPTY
77304: LIST
77305: LIST
77306: PUSH
77307: LD_INT 3
77309: NEG
77310: PUSH
77311: LD_INT 2
77313: PUSH
77314: EMPTY
77315: LIST
77316: LIST
77317: PUSH
77318: LD_INT 3
77320: NEG
77321: PUSH
77322: LD_INT 3
77324: NEG
77325: PUSH
77326: EMPTY
77327: LIST
77328: LIST
77329: PUSH
77330: LD_INT 3
77332: NEG
77333: PUSH
77334: LD_INT 4
77336: NEG
77337: PUSH
77338: EMPTY
77339: LIST
77340: LIST
77341: PUSH
77342: LD_INT 2
77344: NEG
77345: PUSH
77346: LD_INT 3
77348: NEG
77349: PUSH
77350: EMPTY
77351: LIST
77352: LIST
77353: PUSH
77354: LD_INT 2
77356: NEG
77357: PUSH
77358: LD_INT 2
77360: NEG
77361: PUSH
77362: EMPTY
77363: LIST
77364: LIST
77365: PUSH
77366: LD_INT 3
77368: NEG
77369: PUSH
77370: LD_INT 2
77372: NEG
77373: PUSH
77374: EMPTY
77375: LIST
77376: LIST
77377: PUSH
77378: LD_INT 4
77380: NEG
77381: PUSH
77382: LD_INT 3
77384: NEG
77385: PUSH
77386: EMPTY
77387: LIST
77388: LIST
77389: PUSH
77390: LD_INT 4
77392: NEG
77393: PUSH
77394: LD_INT 4
77396: NEG
77397: PUSH
77398: EMPTY
77399: LIST
77400: LIST
77401: PUSH
77402: LD_INT 2
77404: NEG
77405: PUSH
77406: LD_INT 4
77408: NEG
77409: PUSH
77410: EMPTY
77411: LIST
77412: LIST
77413: PUSH
77414: LD_INT 4
77416: NEG
77417: PUSH
77418: LD_INT 2
77420: NEG
77421: PUSH
77422: EMPTY
77423: LIST
77424: LIST
77425: PUSH
77426: LD_INT 0
77428: PUSH
77429: LD_INT 4
77431: NEG
77432: PUSH
77433: EMPTY
77434: LIST
77435: LIST
77436: PUSH
77437: LD_INT 0
77439: PUSH
77440: LD_INT 5
77442: NEG
77443: PUSH
77444: EMPTY
77445: LIST
77446: LIST
77447: PUSH
77448: LD_INT 1
77450: PUSH
77451: LD_INT 4
77453: NEG
77454: PUSH
77455: EMPTY
77456: LIST
77457: LIST
77458: PUSH
77459: LD_INT 1
77461: PUSH
77462: LD_INT 3
77464: NEG
77465: PUSH
77466: EMPTY
77467: LIST
77468: LIST
77469: PUSH
77470: LD_INT 0
77472: PUSH
77473: LD_INT 3
77475: NEG
77476: PUSH
77477: EMPTY
77478: LIST
77479: LIST
77480: PUSH
77481: LD_INT 1
77483: NEG
77484: PUSH
77485: LD_INT 4
77487: NEG
77488: PUSH
77489: EMPTY
77490: LIST
77491: LIST
77492: PUSH
77493: LD_INT 1
77495: NEG
77496: PUSH
77497: LD_INT 5
77499: NEG
77500: PUSH
77501: EMPTY
77502: LIST
77503: LIST
77504: PUSH
77505: LD_INT 2
77507: PUSH
77508: LD_INT 3
77510: NEG
77511: PUSH
77512: EMPTY
77513: LIST
77514: LIST
77515: PUSH
77516: LD_INT 2
77518: NEG
77519: PUSH
77520: LD_INT 5
77522: NEG
77523: PUSH
77524: EMPTY
77525: LIST
77526: LIST
77527: PUSH
77528: LD_INT 3
77530: PUSH
77531: LD_INT 0
77533: PUSH
77534: EMPTY
77535: LIST
77536: LIST
77537: PUSH
77538: LD_INT 3
77540: PUSH
77541: LD_INT 1
77543: NEG
77544: PUSH
77545: EMPTY
77546: LIST
77547: LIST
77548: PUSH
77549: LD_INT 4
77551: PUSH
77552: LD_INT 0
77554: PUSH
77555: EMPTY
77556: LIST
77557: LIST
77558: PUSH
77559: LD_INT 4
77561: PUSH
77562: LD_INT 1
77564: PUSH
77565: EMPTY
77566: LIST
77567: LIST
77568: PUSH
77569: LD_INT 3
77571: PUSH
77572: LD_INT 1
77574: PUSH
77575: EMPTY
77576: LIST
77577: LIST
77578: PUSH
77579: LD_INT 2
77581: PUSH
77582: LD_INT 0
77584: PUSH
77585: EMPTY
77586: LIST
77587: LIST
77588: PUSH
77589: LD_INT 2
77591: PUSH
77592: LD_INT 1
77594: NEG
77595: PUSH
77596: EMPTY
77597: LIST
77598: LIST
77599: PUSH
77600: LD_INT 2
77602: PUSH
77603: LD_INT 2
77605: NEG
77606: PUSH
77607: EMPTY
77608: LIST
77609: LIST
77610: PUSH
77611: LD_INT 4
77613: PUSH
77614: LD_INT 2
77616: PUSH
77617: EMPTY
77618: LIST
77619: LIST
77620: PUSH
77621: LD_INT 4
77623: PUSH
77624: LD_INT 4
77626: PUSH
77627: EMPTY
77628: LIST
77629: LIST
77630: PUSH
77631: LD_INT 4
77633: PUSH
77634: LD_INT 3
77636: PUSH
77637: EMPTY
77638: LIST
77639: LIST
77640: PUSH
77641: LD_INT 5
77643: PUSH
77644: LD_INT 4
77646: PUSH
77647: EMPTY
77648: LIST
77649: LIST
77650: PUSH
77651: LD_INT 5
77653: PUSH
77654: LD_INT 5
77656: PUSH
77657: EMPTY
77658: LIST
77659: LIST
77660: PUSH
77661: LD_INT 4
77663: PUSH
77664: LD_INT 5
77666: PUSH
77667: EMPTY
77668: LIST
77669: LIST
77670: PUSH
77671: LD_INT 3
77673: PUSH
77674: LD_INT 4
77676: PUSH
77677: EMPTY
77678: LIST
77679: LIST
77680: PUSH
77681: LD_INT 3
77683: PUSH
77684: LD_INT 3
77686: PUSH
77687: EMPTY
77688: LIST
77689: LIST
77690: PUSH
77691: LD_INT 5
77693: PUSH
77694: LD_INT 3
77696: PUSH
77697: EMPTY
77698: LIST
77699: LIST
77700: PUSH
77701: LD_INT 3
77703: PUSH
77704: LD_INT 5
77706: PUSH
77707: EMPTY
77708: LIST
77709: LIST
77710: PUSH
77711: EMPTY
77712: LIST
77713: LIST
77714: LIST
77715: LIST
77716: LIST
77717: LIST
77718: LIST
77719: LIST
77720: LIST
77721: LIST
77722: LIST
77723: LIST
77724: LIST
77725: LIST
77726: LIST
77727: LIST
77728: LIST
77729: LIST
77730: LIST
77731: LIST
77732: LIST
77733: LIST
77734: LIST
77735: LIST
77736: LIST
77737: LIST
77738: LIST
77739: LIST
77740: LIST
77741: LIST
77742: LIST
77743: LIST
77744: LIST
77745: LIST
77746: LIST
77747: LIST
77748: LIST
77749: LIST
77750: LIST
77751: LIST
77752: LIST
77753: LIST
77754: LIST
77755: LIST
77756: LIST
77757: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
77758: LD_ADDR_VAR 0 33
77762: PUSH
77763: LD_INT 4
77765: NEG
77766: PUSH
77767: LD_INT 4
77769: NEG
77770: PUSH
77771: EMPTY
77772: LIST
77773: LIST
77774: PUSH
77775: LD_INT 4
77777: NEG
77778: PUSH
77779: LD_INT 5
77781: NEG
77782: PUSH
77783: EMPTY
77784: LIST
77785: LIST
77786: PUSH
77787: LD_INT 3
77789: NEG
77790: PUSH
77791: LD_INT 4
77793: NEG
77794: PUSH
77795: EMPTY
77796: LIST
77797: LIST
77798: PUSH
77799: LD_INT 3
77801: NEG
77802: PUSH
77803: LD_INT 3
77805: NEG
77806: PUSH
77807: EMPTY
77808: LIST
77809: LIST
77810: PUSH
77811: LD_INT 4
77813: NEG
77814: PUSH
77815: LD_INT 3
77817: NEG
77818: PUSH
77819: EMPTY
77820: LIST
77821: LIST
77822: PUSH
77823: LD_INT 5
77825: NEG
77826: PUSH
77827: LD_INT 4
77829: NEG
77830: PUSH
77831: EMPTY
77832: LIST
77833: LIST
77834: PUSH
77835: LD_INT 5
77837: NEG
77838: PUSH
77839: LD_INT 5
77841: NEG
77842: PUSH
77843: EMPTY
77844: LIST
77845: LIST
77846: PUSH
77847: LD_INT 3
77849: NEG
77850: PUSH
77851: LD_INT 5
77853: NEG
77854: PUSH
77855: EMPTY
77856: LIST
77857: LIST
77858: PUSH
77859: LD_INT 5
77861: NEG
77862: PUSH
77863: LD_INT 3
77865: NEG
77866: PUSH
77867: EMPTY
77868: LIST
77869: LIST
77870: PUSH
77871: LD_INT 0
77873: PUSH
77874: LD_INT 3
77876: NEG
77877: PUSH
77878: EMPTY
77879: LIST
77880: LIST
77881: PUSH
77882: LD_INT 0
77884: PUSH
77885: LD_INT 4
77887: NEG
77888: PUSH
77889: EMPTY
77890: LIST
77891: LIST
77892: PUSH
77893: LD_INT 1
77895: PUSH
77896: LD_INT 3
77898: NEG
77899: PUSH
77900: EMPTY
77901: LIST
77902: LIST
77903: PUSH
77904: LD_INT 1
77906: PUSH
77907: LD_INT 2
77909: NEG
77910: PUSH
77911: EMPTY
77912: LIST
77913: LIST
77914: PUSH
77915: LD_INT 0
77917: PUSH
77918: LD_INT 2
77920: NEG
77921: PUSH
77922: EMPTY
77923: LIST
77924: LIST
77925: PUSH
77926: LD_INT 1
77928: NEG
77929: PUSH
77930: LD_INT 3
77932: NEG
77933: PUSH
77934: EMPTY
77935: LIST
77936: LIST
77937: PUSH
77938: LD_INT 1
77940: NEG
77941: PUSH
77942: LD_INT 4
77944: NEG
77945: PUSH
77946: EMPTY
77947: LIST
77948: LIST
77949: PUSH
77950: LD_INT 2
77952: PUSH
77953: LD_INT 2
77955: NEG
77956: PUSH
77957: EMPTY
77958: LIST
77959: LIST
77960: PUSH
77961: LD_INT 2
77963: NEG
77964: PUSH
77965: LD_INT 4
77967: NEG
77968: PUSH
77969: EMPTY
77970: LIST
77971: LIST
77972: PUSH
77973: LD_INT 4
77975: PUSH
77976: LD_INT 0
77978: PUSH
77979: EMPTY
77980: LIST
77981: LIST
77982: PUSH
77983: LD_INT 4
77985: PUSH
77986: LD_INT 1
77988: NEG
77989: PUSH
77990: EMPTY
77991: LIST
77992: LIST
77993: PUSH
77994: LD_INT 5
77996: PUSH
77997: LD_INT 0
77999: PUSH
78000: EMPTY
78001: LIST
78002: LIST
78003: PUSH
78004: LD_INT 5
78006: PUSH
78007: LD_INT 1
78009: PUSH
78010: EMPTY
78011: LIST
78012: LIST
78013: PUSH
78014: LD_INT 4
78016: PUSH
78017: LD_INT 1
78019: PUSH
78020: EMPTY
78021: LIST
78022: LIST
78023: PUSH
78024: LD_INT 3
78026: PUSH
78027: LD_INT 0
78029: PUSH
78030: EMPTY
78031: LIST
78032: LIST
78033: PUSH
78034: LD_INT 3
78036: PUSH
78037: LD_INT 1
78039: NEG
78040: PUSH
78041: EMPTY
78042: LIST
78043: LIST
78044: PUSH
78045: LD_INT 3
78047: PUSH
78048: LD_INT 2
78050: NEG
78051: PUSH
78052: EMPTY
78053: LIST
78054: LIST
78055: PUSH
78056: LD_INT 5
78058: PUSH
78059: LD_INT 2
78061: PUSH
78062: EMPTY
78063: LIST
78064: LIST
78065: PUSH
78066: LD_INT 3
78068: PUSH
78069: LD_INT 3
78071: PUSH
78072: EMPTY
78073: LIST
78074: LIST
78075: PUSH
78076: LD_INT 3
78078: PUSH
78079: LD_INT 2
78081: PUSH
78082: EMPTY
78083: LIST
78084: LIST
78085: PUSH
78086: LD_INT 4
78088: PUSH
78089: LD_INT 3
78091: PUSH
78092: EMPTY
78093: LIST
78094: LIST
78095: PUSH
78096: LD_INT 4
78098: PUSH
78099: LD_INT 4
78101: PUSH
78102: EMPTY
78103: LIST
78104: LIST
78105: PUSH
78106: LD_INT 3
78108: PUSH
78109: LD_INT 4
78111: PUSH
78112: EMPTY
78113: LIST
78114: LIST
78115: PUSH
78116: LD_INT 2
78118: PUSH
78119: LD_INT 3
78121: PUSH
78122: EMPTY
78123: LIST
78124: LIST
78125: PUSH
78126: LD_INT 2
78128: PUSH
78129: LD_INT 2
78131: PUSH
78132: EMPTY
78133: LIST
78134: LIST
78135: PUSH
78136: LD_INT 4
78138: PUSH
78139: LD_INT 2
78141: PUSH
78142: EMPTY
78143: LIST
78144: LIST
78145: PUSH
78146: LD_INT 2
78148: PUSH
78149: LD_INT 4
78151: PUSH
78152: EMPTY
78153: LIST
78154: LIST
78155: PUSH
78156: LD_INT 0
78158: PUSH
78159: LD_INT 4
78161: PUSH
78162: EMPTY
78163: LIST
78164: LIST
78165: PUSH
78166: LD_INT 0
78168: PUSH
78169: LD_INT 3
78171: PUSH
78172: EMPTY
78173: LIST
78174: LIST
78175: PUSH
78176: LD_INT 1
78178: PUSH
78179: LD_INT 4
78181: PUSH
78182: EMPTY
78183: LIST
78184: LIST
78185: PUSH
78186: LD_INT 1
78188: PUSH
78189: LD_INT 5
78191: PUSH
78192: EMPTY
78193: LIST
78194: LIST
78195: PUSH
78196: LD_INT 0
78198: PUSH
78199: LD_INT 5
78201: PUSH
78202: EMPTY
78203: LIST
78204: LIST
78205: PUSH
78206: LD_INT 1
78208: NEG
78209: PUSH
78210: LD_INT 4
78212: PUSH
78213: EMPTY
78214: LIST
78215: LIST
78216: PUSH
78217: LD_INT 1
78219: NEG
78220: PUSH
78221: LD_INT 3
78223: PUSH
78224: EMPTY
78225: LIST
78226: LIST
78227: PUSH
78228: LD_INT 2
78230: PUSH
78231: LD_INT 5
78233: PUSH
78234: EMPTY
78235: LIST
78236: LIST
78237: PUSH
78238: LD_INT 2
78240: NEG
78241: PUSH
78242: LD_INT 3
78244: PUSH
78245: EMPTY
78246: LIST
78247: LIST
78248: PUSH
78249: EMPTY
78250: LIST
78251: LIST
78252: LIST
78253: LIST
78254: LIST
78255: LIST
78256: LIST
78257: LIST
78258: LIST
78259: LIST
78260: LIST
78261: LIST
78262: LIST
78263: LIST
78264: LIST
78265: LIST
78266: LIST
78267: LIST
78268: LIST
78269: LIST
78270: LIST
78271: LIST
78272: LIST
78273: LIST
78274: LIST
78275: LIST
78276: LIST
78277: LIST
78278: LIST
78279: LIST
78280: LIST
78281: LIST
78282: LIST
78283: LIST
78284: LIST
78285: LIST
78286: LIST
78287: LIST
78288: LIST
78289: LIST
78290: LIST
78291: LIST
78292: LIST
78293: LIST
78294: LIST
78295: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
78296: LD_ADDR_VAR 0 34
78300: PUSH
78301: LD_INT 0
78303: PUSH
78304: LD_INT 4
78306: NEG
78307: PUSH
78308: EMPTY
78309: LIST
78310: LIST
78311: PUSH
78312: LD_INT 0
78314: PUSH
78315: LD_INT 5
78317: NEG
78318: PUSH
78319: EMPTY
78320: LIST
78321: LIST
78322: PUSH
78323: LD_INT 1
78325: PUSH
78326: LD_INT 4
78328: NEG
78329: PUSH
78330: EMPTY
78331: LIST
78332: LIST
78333: PUSH
78334: LD_INT 1
78336: PUSH
78337: LD_INT 3
78339: NEG
78340: PUSH
78341: EMPTY
78342: LIST
78343: LIST
78344: PUSH
78345: LD_INT 0
78347: PUSH
78348: LD_INT 3
78350: NEG
78351: PUSH
78352: EMPTY
78353: LIST
78354: LIST
78355: PUSH
78356: LD_INT 1
78358: NEG
78359: PUSH
78360: LD_INT 4
78362: NEG
78363: PUSH
78364: EMPTY
78365: LIST
78366: LIST
78367: PUSH
78368: LD_INT 1
78370: NEG
78371: PUSH
78372: LD_INT 5
78374: NEG
78375: PUSH
78376: EMPTY
78377: LIST
78378: LIST
78379: PUSH
78380: LD_INT 2
78382: PUSH
78383: LD_INT 3
78385: NEG
78386: PUSH
78387: EMPTY
78388: LIST
78389: LIST
78390: PUSH
78391: LD_INT 2
78393: NEG
78394: PUSH
78395: LD_INT 5
78397: NEG
78398: PUSH
78399: EMPTY
78400: LIST
78401: LIST
78402: PUSH
78403: LD_INT 3
78405: PUSH
78406: LD_INT 0
78408: PUSH
78409: EMPTY
78410: LIST
78411: LIST
78412: PUSH
78413: LD_INT 3
78415: PUSH
78416: LD_INT 1
78418: NEG
78419: PUSH
78420: EMPTY
78421: LIST
78422: LIST
78423: PUSH
78424: LD_INT 4
78426: PUSH
78427: LD_INT 0
78429: PUSH
78430: EMPTY
78431: LIST
78432: LIST
78433: PUSH
78434: LD_INT 4
78436: PUSH
78437: LD_INT 1
78439: PUSH
78440: EMPTY
78441: LIST
78442: LIST
78443: PUSH
78444: LD_INT 3
78446: PUSH
78447: LD_INT 1
78449: PUSH
78450: EMPTY
78451: LIST
78452: LIST
78453: PUSH
78454: LD_INT 2
78456: PUSH
78457: LD_INT 0
78459: PUSH
78460: EMPTY
78461: LIST
78462: LIST
78463: PUSH
78464: LD_INT 2
78466: PUSH
78467: LD_INT 1
78469: NEG
78470: PUSH
78471: EMPTY
78472: LIST
78473: LIST
78474: PUSH
78475: LD_INT 2
78477: PUSH
78478: LD_INT 2
78480: NEG
78481: PUSH
78482: EMPTY
78483: LIST
78484: LIST
78485: PUSH
78486: LD_INT 4
78488: PUSH
78489: LD_INT 2
78491: PUSH
78492: EMPTY
78493: LIST
78494: LIST
78495: PUSH
78496: LD_INT 4
78498: PUSH
78499: LD_INT 4
78501: PUSH
78502: EMPTY
78503: LIST
78504: LIST
78505: PUSH
78506: LD_INT 4
78508: PUSH
78509: LD_INT 3
78511: PUSH
78512: EMPTY
78513: LIST
78514: LIST
78515: PUSH
78516: LD_INT 5
78518: PUSH
78519: LD_INT 4
78521: PUSH
78522: EMPTY
78523: LIST
78524: LIST
78525: PUSH
78526: LD_INT 5
78528: PUSH
78529: LD_INT 5
78531: PUSH
78532: EMPTY
78533: LIST
78534: LIST
78535: PUSH
78536: LD_INT 4
78538: PUSH
78539: LD_INT 5
78541: PUSH
78542: EMPTY
78543: LIST
78544: LIST
78545: PUSH
78546: LD_INT 3
78548: PUSH
78549: LD_INT 4
78551: PUSH
78552: EMPTY
78553: LIST
78554: LIST
78555: PUSH
78556: LD_INT 3
78558: PUSH
78559: LD_INT 3
78561: PUSH
78562: EMPTY
78563: LIST
78564: LIST
78565: PUSH
78566: LD_INT 5
78568: PUSH
78569: LD_INT 3
78571: PUSH
78572: EMPTY
78573: LIST
78574: LIST
78575: PUSH
78576: LD_INT 3
78578: PUSH
78579: LD_INT 5
78581: PUSH
78582: EMPTY
78583: LIST
78584: LIST
78585: PUSH
78586: LD_INT 0
78588: PUSH
78589: LD_INT 3
78591: PUSH
78592: EMPTY
78593: LIST
78594: LIST
78595: PUSH
78596: LD_INT 0
78598: PUSH
78599: LD_INT 2
78601: PUSH
78602: EMPTY
78603: LIST
78604: LIST
78605: PUSH
78606: LD_INT 1
78608: PUSH
78609: LD_INT 3
78611: PUSH
78612: EMPTY
78613: LIST
78614: LIST
78615: PUSH
78616: LD_INT 1
78618: PUSH
78619: LD_INT 4
78621: PUSH
78622: EMPTY
78623: LIST
78624: LIST
78625: PUSH
78626: LD_INT 0
78628: PUSH
78629: LD_INT 4
78631: PUSH
78632: EMPTY
78633: LIST
78634: LIST
78635: PUSH
78636: LD_INT 1
78638: NEG
78639: PUSH
78640: LD_INT 3
78642: PUSH
78643: EMPTY
78644: LIST
78645: LIST
78646: PUSH
78647: LD_INT 1
78649: NEG
78650: PUSH
78651: LD_INT 2
78653: PUSH
78654: EMPTY
78655: LIST
78656: LIST
78657: PUSH
78658: LD_INT 2
78660: PUSH
78661: LD_INT 4
78663: PUSH
78664: EMPTY
78665: LIST
78666: LIST
78667: PUSH
78668: LD_INT 2
78670: NEG
78671: PUSH
78672: LD_INT 2
78674: PUSH
78675: EMPTY
78676: LIST
78677: LIST
78678: PUSH
78679: LD_INT 4
78681: NEG
78682: PUSH
78683: LD_INT 0
78685: PUSH
78686: EMPTY
78687: LIST
78688: LIST
78689: PUSH
78690: LD_INT 4
78692: NEG
78693: PUSH
78694: LD_INT 1
78696: NEG
78697: PUSH
78698: EMPTY
78699: LIST
78700: LIST
78701: PUSH
78702: LD_INT 3
78704: NEG
78705: PUSH
78706: LD_INT 0
78708: PUSH
78709: EMPTY
78710: LIST
78711: LIST
78712: PUSH
78713: LD_INT 3
78715: NEG
78716: PUSH
78717: LD_INT 1
78719: PUSH
78720: EMPTY
78721: LIST
78722: LIST
78723: PUSH
78724: LD_INT 4
78726: NEG
78727: PUSH
78728: LD_INT 1
78730: PUSH
78731: EMPTY
78732: LIST
78733: LIST
78734: PUSH
78735: LD_INT 5
78737: NEG
78738: PUSH
78739: LD_INT 0
78741: PUSH
78742: EMPTY
78743: LIST
78744: LIST
78745: PUSH
78746: LD_INT 5
78748: NEG
78749: PUSH
78750: LD_INT 1
78752: NEG
78753: PUSH
78754: EMPTY
78755: LIST
78756: LIST
78757: PUSH
78758: LD_INT 5
78760: NEG
78761: PUSH
78762: LD_INT 2
78764: NEG
78765: PUSH
78766: EMPTY
78767: LIST
78768: LIST
78769: PUSH
78770: LD_INT 3
78772: NEG
78773: PUSH
78774: LD_INT 2
78776: PUSH
78777: EMPTY
78778: LIST
78779: LIST
78780: PUSH
78781: EMPTY
78782: LIST
78783: LIST
78784: LIST
78785: LIST
78786: LIST
78787: LIST
78788: LIST
78789: LIST
78790: LIST
78791: LIST
78792: LIST
78793: LIST
78794: LIST
78795: LIST
78796: LIST
78797: LIST
78798: LIST
78799: LIST
78800: LIST
78801: LIST
78802: LIST
78803: LIST
78804: LIST
78805: LIST
78806: LIST
78807: LIST
78808: LIST
78809: LIST
78810: LIST
78811: LIST
78812: LIST
78813: LIST
78814: LIST
78815: LIST
78816: LIST
78817: LIST
78818: LIST
78819: LIST
78820: LIST
78821: LIST
78822: LIST
78823: LIST
78824: LIST
78825: LIST
78826: LIST
78827: ST_TO_ADDR
// end ; end ;
78828: GO 78831
78830: POP
// case btype of b_depot , b_warehouse :
78831: LD_VAR 0 1
78835: PUSH
78836: LD_INT 0
78838: DOUBLE
78839: EQUAL
78840: IFTRUE 78850
78842: LD_INT 1
78844: DOUBLE
78845: EQUAL
78846: IFTRUE 78850
78848: GO 79051
78850: POP
// case nation of nation_american :
78851: LD_VAR 0 5
78855: PUSH
78856: LD_INT 1
78858: DOUBLE
78859: EQUAL
78860: IFTRUE 78864
78862: GO 78920
78864: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
78865: LD_ADDR_VAR 0 9
78869: PUSH
78870: LD_VAR 0 11
78874: PUSH
78875: LD_VAR 0 12
78879: PUSH
78880: LD_VAR 0 13
78884: PUSH
78885: LD_VAR 0 14
78889: PUSH
78890: LD_VAR 0 15
78894: PUSH
78895: LD_VAR 0 16
78899: PUSH
78900: EMPTY
78901: LIST
78902: LIST
78903: LIST
78904: LIST
78905: LIST
78906: LIST
78907: PUSH
78908: LD_VAR 0 4
78912: PUSH
78913: LD_INT 1
78915: PLUS
78916: ARRAY
78917: ST_TO_ADDR
78918: GO 79049
78920: LD_INT 2
78922: DOUBLE
78923: EQUAL
78924: IFTRUE 78928
78926: GO 78984
78928: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
78929: LD_ADDR_VAR 0 9
78933: PUSH
78934: LD_VAR 0 17
78938: PUSH
78939: LD_VAR 0 18
78943: PUSH
78944: LD_VAR 0 19
78948: PUSH
78949: LD_VAR 0 20
78953: PUSH
78954: LD_VAR 0 21
78958: PUSH
78959: LD_VAR 0 22
78963: PUSH
78964: EMPTY
78965: LIST
78966: LIST
78967: LIST
78968: LIST
78969: LIST
78970: LIST
78971: PUSH
78972: LD_VAR 0 4
78976: PUSH
78977: LD_INT 1
78979: PLUS
78980: ARRAY
78981: ST_TO_ADDR
78982: GO 79049
78984: LD_INT 3
78986: DOUBLE
78987: EQUAL
78988: IFTRUE 78992
78990: GO 79048
78992: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
78993: LD_ADDR_VAR 0 9
78997: PUSH
78998: LD_VAR 0 23
79002: PUSH
79003: LD_VAR 0 24
79007: PUSH
79008: LD_VAR 0 25
79012: PUSH
79013: LD_VAR 0 26
79017: PUSH
79018: LD_VAR 0 27
79022: PUSH
79023: LD_VAR 0 28
79027: PUSH
79028: EMPTY
79029: LIST
79030: LIST
79031: LIST
79032: LIST
79033: LIST
79034: LIST
79035: PUSH
79036: LD_VAR 0 4
79040: PUSH
79041: LD_INT 1
79043: PLUS
79044: ARRAY
79045: ST_TO_ADDR
79046: GO 79049
79048: POP
79049: GO 79604
79051: LD_INT 2
79053: DOUBLE
79054: EQUAL
79055: IFTRUE 79065
79057: LD_INT 3
79059: DOUBLE
79060: EQUAL
79061: IFTRUE 79065
79063: GO 79121
79065: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
79066: LD_ADDR_VAR 0 9
79070: PUSH
79071: LD_VAR 0 29
79075: PUSH
79076: LD_VAR 0 30
79080: PUSH
79081: LD_VAR 0 31
79085: PUSH
79086: LD_VAR 0 32
79090: PUSH
79091: LD_VAR 0 33
79095: PUSH
79096: LD_VAR 0 34
79100: PUSH
79101: EMPTY
79102: LIST
79103: LIST
79104: LIST
79105: LIST
79106: LIST
79107: LIST
79108: PUSH
79109: LD_VAR 0 4
79113: PUSH
79114: LD_INT 1
79116: PLUS
79117: ARRAY
79118: ST_TO_ADDR
79119: GO 79604
79121: LD_INT 16
79123: DOUBLE
79124: EQUAL
79125: IFTRUE 79183
79127: LD_INT 17
79129: DOUBLE
79130: EQUAL
79131: IFTRUE 79183
79133: LD_INT 18
79135: DOUBLE
79136: EQUAL
79137: IFTRUE 79183
79139: LD_INT 19
79141: DOUBLE
79142: EQUAL
79143: IFTRUE 79183
79145: LD_INT 22
79147: DOUBLE
79148: EQUAL
79149: IFTRUE 79183
79151: LD_INT 20
79153: DOUBLE
79154: EQUAL
79155: IFTRUE 79183
79157: LD_INT 21
79159: DOUBLE
79160: EQUAL
79161: IFTRUE 79183
79163: LD_INT 23
79165: DOUBLE
79166: EQUAL
79167: IFTRUE 79183
79169: LD_INT 24
79171: DOUBLE
79172: EQUAL
79173: IFTRUE 79183
79175: LD_INT 25
79177: DOUBLE
79178: EQUAL
79179: IFTRUE 79183
79181: GO 79239
79183: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
79184: LD_ADDR_VAR 0 9
79188: PUSH
79189: LD_VAR 0 35
79193: PUSH
79194: LD_VAR 0 36
79198: PUSH
79199: LD_VAR 0 37
79203: PUSH
79204: LD_VAR 0 38
79208: PUSH
79209: LD_VAR 0 39
79213: PUSH
79214: LD_VAR 0 40
79218: PUSH
79219: EMPTY
79220: LIST
79221: LIST
79222: LIST
79223: LIST
79224: LIST
79225: LIST
79226: PUSH
79227: LD_VAR 0 4
79231: PUSH
79232: LD_INT 1
79234: PLUS
79235: ARRAY
79236: ST_TO_ADDR
79237: GO 79604
79239: LD_INT 6
79241: DOUBLE
79242: EQUAL
79243: IFTRUE 79295
79245: LD_INT 7
79247: DOUBLE
79248: EQUAL
79249: IFTRUE 79295
79251: LD_INT 8
79253: DOUBLE
79254: EQUAL
79255: IFTRUE 79295
79257: LD_INT 13
79259: DOUBLE
79260: EQUAL
79261: IFTRUE 79295
79263: LD_INT 12
79265: DOUBLE
79266: EQUAL
79267: IFTRUE 79295
79269: LD_INT 15
79271: DOUBLE
79272: EQUAL
79273: IFTRUE 79295
79275: LD_INT 11
79277: DOUBLE
79278: EQUAL
79279: IFTRUE 79295
79281: LD_INT 14
79283: DOUBLE
79284: EQUAL
79285: IFTRUE 79295
79287: LD_INT 10
79289: DOUBLE
79290: EQUAL
79291: IFTRUE 79295
79293: GO 79351
79295: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
79296: LD_ADDR_VAR 0 9
79300: PUSH
79301: LD_VAR 0 41
79305: PUSH
79306: LD_VAR 0 42
79310: PUSH
79311: LD_VAR 0 43
79315: PUSH
79316: LD_VAR 0 44
79320: PUSH
79321: LD_VAR 0 45
79325: PUSH
79326: LD_VAR 0 46
79330: PUSH
79331: EMPTY
79332: LIST
79333: LIST
79334: LIST
79335: LIST
79336: LIST
79337: LIST
79338: PUSH
79339: LD_VAR 0 4
79343: PUSH
79344: LD_INT 1
79346: PLUS
79347: ARRAY
79348: ST_TO_ADDR
79349: GO 79604
79351: LD_INT 36
79353: DOUBLE
79354: EQUAL
79355: IFTRUE 79359
79357: GO 79415
79359: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
79360: LD_ADDR_VAR 0 9
79364: PUSH
79365: LD_VAR 0 47
79369: PUSH
79370: LD_VAR 0 48
79374: PUSH
79375: LD_VAR 0 49
79379: PUSH
79380: LD_VAR 0 50
79384: PUSH
79385: LD_VAR 0 51
79389: PUSH
79390: LD_VAR 0 52
79394: PUSH
79395: EMPTY
79396: LIST
79397: LIST
79398: LIST
79399: LIST
79400: LIST
79401: LIST
79402: PUSH
79403: LD_VAR 0 4
79407: PUSH
79408: LD_INT 1
79410: PLUS
79411: ARRAY
79412: ST_TO_ADDR
79413: GO 79604
79415: LD_INT 4
79417: DOUBLE
79418: EQUAL
79419: IFTRUE 79441
79421: LD_INT 5
79423: DOUBLE
79424: EQUAL
79425: IFTRUE 79441
79427: LD_INT 34
79429: DOUBLE
79430: EQUAL
79431: IFTRUE 79441
79433: LD_INT 37
79435: DOUBLE
79436: EQUAL
79437: IFTRUE 79441
79439: GO 79497
79441: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
79442: LD_ADDR_VAR 0 9
79446: PUSH
79447: LD_VAR 0 53
79451: PUSH
79452: LD_VAR 0 54
79456: PUSH
79457: LD_VAR 0 55
79461: PUSH
79462: LD_VAR 0 56
79466: PUSH
79467: LD_VAR 0 57
79471: PUSH
79472: LD_VAR 0 58
79476: PUSH
79477: EMPTY
79478: LIST
79479: LIST
79480: LIST
79481: LIST
79482: LIST
79483: LIST
79484: PUSH
79485: LD_VAR 0 4
79489: PUSH
79490: LD_INT 1
79492: PLUS
79493: ARRAY
79494: ST_TO_ADDR
79495: GO 79604
79497: LD_INT 31
79499: DOUBLE
79500: EQUAL
79501: IFTRUE 79547
79503: LD_INT 32
79505: DOUBLE
79506: EQUAL
79507: IFTRUE 79547
79509: LD_INT 33
79511: DOUBLE
79512: EQUAL
79513: IFTRUE 79547
79515: LD_INT 27
79517: DOUBLE
79518: EQUAL
79519: IFTRUE 79547
79521: LD_INT 26
79523: DOUBLE
79524: EQUAL
79525: IFTRUE 79547
79527: LD_INT 28
79529: DOUBLE
79530: EQUAL
79531: IFTRUE 79547
79533: LD_INT 29
79535: DOUBLE
79536: EQUAL
79537: IFTRUE 79547
79539: LD_INT 30
79541: DOUBLE
79542: EQUAL
79543: IFTRUE 79547
79545: GO 79603
79547: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
79548: LD_ADDR_VAR 0 9
79552: PUSH
79553: LD_VAR 0 59
79557: PUSH
79558: LD_VAR 0 60
79562: PUSH
79563: LD_VAR 0 61
79567: PUSH
79568: LD_VAR 0 62
79572: PUSH
79573: LD_VAR 0 63
79577: PUSH
79578: LD_VAR 0 64
79582: PUSH
79583: EMPTY
79584: LIST
79585: LIST
79586: LIST
79587: LIST
79588: LIST
79589: LIST
79590: PUSH
79591: LD_VAR 0 4
79595: PUSH
79596: LD_INT 1
79598: PLUS
79599: ARRAY
79600: ST_TO_ADDR
79601: GO 79604
79603: POP
// temp_list2 = [ ] ;
79604: LD_ADDR_VAR 0 10
79608: PUSH
79609: EMPTY
79610: ST_TO_ADDR
// for i in temp_list do
79611: LD_ADDR_VAR 0 8
79615: PUSH
79616: LD_VAR 0 9
79620: PUSH
79621: FOR_IN
79622: IFFALSE 79674
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
79624: LD_ADDR_VAR 0 10
79628: PUSH
79629: LD_VAR 0 10
79633: PUSH
79634: LD_VAR 0 8
79638: PUSH
79639: LD_INT 1
79641: ARRAY
79642: PUSH
79643: LD_VAR 0 2
79647: PLUS
79648: PUSH
79649: LD_VAR 0 8
79653: PUSH
79654: LD_INT 2
79656: ARRAY
79657: PUSH
79658: LD_VAR 0 3
79662: PLUS
79663: PUSH
79664: EMPTY
79665: LIST
79666: LIST
79667: PUSH
79668: EMPTY
79669: LIST
79670: ADD
79671: ST_TO_ADDR
79672: GO 79621
79674: POP
79675: POP
// result = temp_list2 ;
79676: LD_ADDR_VAR 0 7
79680: PUSH
79681: LD_VAR 0 10
79685: ST_TO_ADDR
// end ;
79686: LD_VAR 0 7
79690: RET
// export function EnemyInRange ( unit , dist ) ; begin
79691: LD_INT 0
79693: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
79694: LD_ADDR_VAR 0 3
79698: PUSH
79699: LD_VAR 0 1
79703: PPUSH
79704: CALL_OW 255
79708: PPUSH
79709: LD_VAR 0 1
79713: PPUSH
79714: CALL_OW 250
79718: PPUSH
79719: LD_VAR 0 1
79723: PPUSH
79724: CALL_OW 251
79728: PPUSH
79729: LD_VAR 0 2
79733: PPUSH
79734: CALL 53795 0 4
79738: PUSH
79739: LD_INT 4
79741: ARRAY
79742: ST_TO_ADDR
// end ;
79743: LD_VAR 0 3
79747: RET
// export function PlayerSeeMe ( unit ) ; begin
79748: LD_INT 0
79750: PPUSH
// result := See ( your_side , unit ) ;
79751: LD_ADDR_VAR 0 2
79755: PUSH
79756: LD_OWVAR 2
79760: PPUSH
79761: LD_VAR 0 1
79765: PPUSH
79766: CALL_OW 292
79770: ST_TO_ADDR
// end ;
79771: LD_VAR 0 2
79775: RET
// export function ReverseDir ( unit ) ; begin
79776: LD_INT 0
79778: PPUSH
// if not unit then
79779: LD_VAR 0 1
79783: NOT
79784: IFFALSE 79788
// exit ;
79786: GO 79811
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
79788: LD_ADDR_VAR 0 2
79792: PUSH
79793: LD_VAR 0 1
79797: PPUSH
79798: CALL_OW 254
79802: PUSH
79803: LD_INT 3
79805: PLUS
79806: PUSH
79807: LD_INT 6
79809: MOD
79810: ST_TO_ADDR
// end ;
79811: LD_VAR 0 2
79815: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
79816: LD_INT 0
79818: PPUSH
79819: PPUSH
79820: PPUSH
79821: PPUSH
79822: PPUSH
// if not hexes then
79823: LD_VAR 0 2
79827: NOT
79828: IFFALSE 79832
// exit ;
79830: GO 79980
// dist := 9999 ;
79832: LD_ADDR_VAR 0 5
79836: PUSH
79837: LD_INT 9999
79839: ST_TO_ADDR
// for i = 1 to hexes do
79840: LD_ADDR_VAR 0 4
79844: PUSH
79845: DOUBLE
79846: LD_INT 1
79848: DEC
79849: ST_TO_ADDR
79850: LD_VAR 0 2
79854: PUSH
79855: FOR_TO
79856: IFFALSE 79968
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
79858: LD_VAR 0 1
79862: PPUSH
79863: LD_VAR 0 2
79867: PUSH
79868: LD_VAR 0 4
79872: ARRAY
79873: PUSH
79874: LD_INT 1
79876: ARRAY
79877: PPUSH
79878: LD_VAR 0 2
79882: PUSH
79883: LD_VAR 0 4
79887: ARRAY
79888: PUSH
79889: LD_INT 2
79891: ARRAY
79892: PPUSH
79893: CALL_OW 297
79897: PUSH
79898: LD_VAR 0 5
79902: LESS
79903: IFFALSE 79966
// begin hex := hexes [ i ] ;
79905: LD_ADDR_VAR 0 7
79909: PUSH
79910: LD_VAR 0 2
79914: PUSH
79915: LD_VAR 0 4
79919: ARRAY
79920: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
79921: LD_ADDR_VAR 0 5
79925: PUSH
79926: LD_VAR 0 1
79930: PPUSH
79931: LD_VAR 0 2
79935: PUSH
79936: LD_VAR 0 4
79940: ARRAY
79941: PUSH
79942: LD_INT 1
79944: ARRAY
79945: PPUSH
79946: LD_VAR 0 2
79950: PUSH
79951: LD_VAR 0 4
79955: ARRAY
79956: PUSH
79957: LD_INT 2
79959: ARRAY
79960: PPUSH
79961: CALL_OW 297
79965: ST_TO_ADDR
// end ; end ;
79966: GO 79855
79968: POP
79969: POP
// result := hex ;
79970: LD_ADDR_VAR 0 3
79974: PUSH
79975: LD_VAR 0 7
79979: ST_TO_ADDR
// end ;
79980: LD_VAR 0 3
79984: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
79985: LD_INT 0
79987: PPUSH
79988: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
79989: LD_VAR 0 1
79993: NOT
79994: PUSH
79995: LD_VAR 0 1
79999: PUSH
80000: LD_INT 21
80002: PUSH
80003: LD_INT 2
80005: PUSH
80006: EMPTY
80007: LIST
80008: LIST
80009: PUSH
80010: LD_INT 23
80012: PUSH
80013: LD_INT 2
80015: PUSH
80016: EMPTY
80017: LIST
80018: LIST
80019: PUSH
80020: EMPTY
80021: LIST
80022: LIST
80023: PPUSH
80024: CALL_OW 69
80028: IN
80029: NOT
80030: OR
80031: IFFALSE 80035
// exit ;
80033: GO 80082
// for i = 1 to 3 do
80035: LD_ADDR_VAR 0 3
80039: PUSH
80040: DOUBLE
80041: LD_INT 1
80043: DEC
80044: ST_TO_ADDR
80045: LD_INT 3
80047: PUSH
80048: FOR_TO
80049: IFFALSE 80080
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
80051: LD_VAR 0 1
80055: PPUSH
80056: CALL_OW 250
80060: PPUSH
80061: LD_VAR 0 1
80065: PPUSH
80066: CALL_OW 251
80070: PPUSH
80071: LD_INT 1
80073: PPUSH
80074: CALL_OW 453
80078: GO 80048
80080: POP
80081: POP
// end ;
80082: LD_VAR 0 2
80086: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
80087: LD_INT 0
80089: PPUSH
80090: PPUSH
80091: PPUSH
80092: PPUSH
80093: PPUSH
80094: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
80095: LD_VAR 0 1
80099: NOT
80100: PUSH
80101: LD_VAR 0 2
80105: NOT
80106: OR
80107: PUSH
80108: LD_VAR 0 1
80112: PPUSH
80113: CALL_OW 314
80117: OR
80118: IFFALSE 80122
// exit ;
80120: GO 80563
// x := GetX ( enemy_unit ) ;
80122: LD_ADDR_VAR 0 7
80126: PUSH
80127: LD_VAR 0 2
80131: PPUSH
80132: CALL_OW 250
80136: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
80137: LD_ADDR_VAR 0 8
80141: PUSH
80142: LD_VAR 0 2
80146: PPUSH
80147: CALL_OW 251
80151: ST_TO_ADDR
// if not x or not y then
80152: LD_VAR 0 7
80156: NOT
80157: PUSH
80158: LD_VAR 0 8
80162: NOT
80163: OR
80164: IFFALSE 80168
// exit ;
80166: GO 80563
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
80168: LD_ADDR_VAR 0 6
80172: PUSH
80173: LD_VAR 0 7
80177: PPUSH
80178: LD_INT 0
80180: PPUSH
80181: LD_INT 4
80183: PPUSH
80184: CALL_OW 272
80188: PUSH
80189: LD_VAR 0 8
80193: PPUSH
80194: LD_INT 0
80196: PPUSH
80197: LD_INT 4
80199: PPUSH
80200: CALL_OW 273
80204: PUSH
80205: EMPTY
80206: LIST
80207: LIST
80208: PUSH
80209: LD_VAR 0 7
80213: PPUSH
80214: LD_INT 1
80216: PPUSH
80217: LD_INT 4
80219: PPUSH
80220: CALL_OW 272
80224: PUSH
80225: LD_VAR 0 8
80229: PPUSH
80230: LD_INT 1
80232: PPUSH
80233: LD_INT 4
80235: PPUSH
80236: CALL_OW 273
80240: PUSH
80241: EMPTY
80242: LIST
80243: LIST
80244: PUSH
80245: LD_VAR 0 7
80249: PPUSH
80250: LD_INT 2
80252: PPUSH
80253: LD_INT 4
80255: PPUSH
80256: CALL_OW 272
80260: PUSH
80261: LD_VAR 0 8
80265: PPUSH
80266: LD_INT 2
80268: PPUSH
80269: LD_INT 4
80271: PPUSH
80272: CALL_OW 273
80276: PUSH
80277: EMPTY
80278: LIST
80279: LIST
80280: PUSH
80281: LD_VAR 0 7
80285: PPUSH
80286: LD_INT 3
80288: PPUSH
80289: LD_INT 4
80291: PPUSH
80292: CALL_OW 272
80296: PUSH
80297: LD_VAR 0 8
80301: PPUSH
80302: LD_INT 3
80304: PPUSH
80305: LD_INT 4
80307: PPUSH
80308: CALL_OW 273
80312: PUSH
80313: EMPTY
80314: LIST
80315: LIST
80316: PUSH
80317: LD_VAR 0 7
80321: PPUSH
80322: LD_INT 4
80324: PPUSH
80325: LD_INT 4
80327: PPUSH
80328: CALL_OW 272
80332: PUSH
80333: LD_VAR 0 8
80337: PPUSH
80338: LD_INT 4
80340: PPUSH
80341: LD_INT 4
80343: PPUSH
80344: CALL_OW 273
80348: PUSH
80349: EMPTY
80350: LIST
80351: LIST
80352: PUSH
80353: LD_VAR 0 7
80357: PPUSH
80358: LD_INT 5
80360: PPUSH
80361: LD_INT 4
80363: PPUSH
80364: CALL_OW 272
80368: PUSH
80369: LD_VAR 0 8
80373: PPUSH
80374: LD_INT 5
80376: PPUSH
80377: LD_INT 4
80379: PPUSH
80380: CALL_OW 273
80384: PUSH
80385: EMPTY
80386: LIST
80387: LIST
80388: PUSH
80389: EMPTY
80390: LIST
80391: LIST
80392: LIST
80393: LIST
80394: LIST
80395: LIST
80396: ST_TO_ADDR
// for i = tmp downto 1 do
80397: LD_ADDR_VAR 0 4
80401: PUSH
80402: DOUBLE
80403: LD_VAR 0 6
80407: INC
80408: ST_TO_ADDR
80409: LD_INT 1
80411: PUSH
80412: FOR_DOWNTO
80413: IFFALSE 80514
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
80415: LD_VAR 0 6
80419: PUSH
80420: LD_VAR 0 4
80424: ARRAY
80425: PUSH
80426: LD_INT 1
80428: ARRAY
80429: PPUSH
80430: LD_VAR 0 6
80434: PUSH
80435: LD_VAR 0 4
80439: ARRAY
80440: PUSH
80441: LD_INT 2
80443: ARRAY
80444: PPUSH
80445: CALL_OW 488
80449: NOT
80450: PUSH
80451: LD_VAR 0 6
80455: PUSH
80456: LD_VAR 0 4
80460: ARRAY
80461: PUSH
80462: LD_INT 1
80464: ARRAY
80465: PPUSH
80466: LD_VAR 0 6
80470: PUSH
80471: LD_VAR 0 4
80475: ARRAY
80476: PUSH
80477: LD_INT 2
80479: ARRAY
80480: PPUSH
80481: CALL_OW 428
80485: PUSH
80486: LD_INT 0
80488: NONEQUAL
80489: OR
80490: IFFALSE 80512
// tmp := Delete ( tmp , i ) ;
80492: LD_ADDR_VAR 0 6
80496: PUSH
80497: LD_VAR 0 6
80501: PPUSH
80502: LD_VAR 0 4
80506: PPUSH
80507: CALL_OW 3
80511: ST_TO_ADDR
80512: GO 80412
80514: POP
80515: POP
// j := GetClosestHex ( unit , tmp ) ;
80516: LD_ADDR_VAR 0 5
80520: PUSH
80521: LD_VAR 0 1
80525: PPUSH
80526: LD_VAR 0 6
80530: PPUSH
80531: CALL 79816 0 2
80535: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
80536: LD_VAR 0 1
80540: PPUSH
80541: LD_VAR 0 5
80545: PUSH
80546: LD_INT 1
80548: ARRAY
80549: PPUSH
80550: LD_VAR 0 5
80554: PUSH
80555: LD_INT 2
80557: ARRAY
80558: PPUSH
80559: CALL_OW 111
// end ;
80563: LD_VAR 0 3
80567: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
80568: LD_INT 0
80570: PPUSH
80571: PPUSH
80572: PPUSH
// uc_side = 0 ;
80573: LD_ADDR_OWVAR 20
80577: PUSH
80578: LD_INT 0
80580: ST_TO_ADDR
// uc_nation = 0 ;
80581: LD_ADDR_OWVAR 21
80585: PUSH
80586: LD_INT 0
80588: ST_TO_ADDR
// InitHc ;
80589: CALL_OW 19
// InitVc ;
80593: CALL_OW 20
// if mastodonts then
80597: LD_VAR 0 6
80601: IFFALSE 80668
// for i = 1 to mastodonts do
80603: LD_ADDR_VAR 0 11
80607: PUSH
80608: DOUBLE
80609: LD_INT 1
80611: DEC
80612: ST_TO_ADDR
80613: LD_VAR 0 6
80617: PUSH
80618: FOR_TO
80619: IFFALSE 80666
// begin vc_chassis := 31 ;
80621: LD_ADDR_OWVAR 37
80625: PUSH
80626: LD_INT 31
80628: ST_TO_ADDR
// vc_control := control_rider ;
80629: LD_ADDR_OWVAR 38
80633: PUSH
80634: LD_INT 4
80636: ST_TO_ADDR
// animal := CreateVehicle ;
80637: LD_ADDR_VAR 0 12
80641: PUSH
80642: CALL_OW 45
80646: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80647: LD_VAR 0 12
80651: PPUSH
80652: LD_VAR 0 8
80656: PPUSH
80657: LD_INT 0
80659: PPUSH
80660: CALL 82737 0 3
// end ;
80664: GO 80618
80666: POP
80667: POP
// if horses then
80668: LD_VAR 0 5
80672: IFFALSE 80739
// for i = 1 to horses do
80674: LD_ADDR_VAR 0 11
80678: PUSH
80679: DOUBLE
80680: LD_INT 1
80682: DEC
80683: ST_TO_ADDR
80684: LD_VAR 0 5
80688: PUSH
80689: FOR_TO
80690: IFFALSE 80737
// begin hc_class := 21 ;
80692: LD_ADDR_OWVAR 28
80696: PUSH
80697: LD_INT 21
80699: ST_TO_ADDR
// hc_gallery :=  ;
80700: LD_ADDR_OWVAR 33
80704: PUSH
80705: LD_STRING 
80707: ST_TO_ADDR
// animal := CreateHuman ;
80708: LD_ADDR_VAR 0 12
80712: PUSH
80713: CALL_OW 44
80717: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80718: LD_VAR 0 12
80722: PPUSH
80723: LD_VAR 0 8
80727: PPUSH
80728: LD_INT 0
80730: PPUSH
80731: CALL 82737 0 3
// end ;
80735: GO 80689
80737: POP
80738: POP
// if birds then
80739: LD_VAR 0 1
80743: IFFALSE 80810
// for i = 1 to birds do
80745: LD_ADDR_VAR 0 11
80749: PUSH
80750: DOUBLE
80751: LD_INT 1
80753: DEC
80754: ST_TO_ADDR
80755: LD_VAR 0 1
80759: PUSH
80760: FOR_TO
80761: IFFALSE 80808
// begin hc_class = 18 ;
80763: LD_ADDR_OWVAR 28
80767: PUSH
80768: LD_INT 18
80770: ST_TO_ADDR
// hc_gallery =  ;
80771: LD_ADDR_OWVAR 33
80775: PUSH
80776: LD_STRING 
80778: ST_TO_ADDR
// animal := CreateHuman ;
80779: LD_ADDR_VAR 0 12
80783: PUSH
80784: CALL_OW 44
80788: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80789: LD_VAR 0 12
80793: PPUSH
80794: LD_VAR 0 8
80798: PPUSH
80799: LD_INT 0
80801: PPUSH
80802: CALL 82737 0 3
// end ;
80806: GO 80760
80808: POP
80809: POP
// if tigers then
80810: LD_VAR 0 2
80814: IFFALSE 80898
// for i = 1 to tigers do
80816: LD_ADDR_VAR 0 11
80820: PUSH
80821: DOUBLE
80822: LD_INT 1
80824: DEC
80825: ST_TO_ADDR
80826: LD_VAR 0 2
80830: PUSH
80831: FOR_TO
80832: IFFALSE 80896
// begin hc_class = class_tiger ;
80834: LD_ADDR_OWVAR 28
80838: PUSH
80839: LD_INT 14
80841: ST_TO_ADDR
// hc_gallery =  ;
80842: LD_ADDR_OWVAR 33
80846: PUSH
80847: LD_STRING 
80849: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
80850: LD_ADDR_OWVAR 35
80854: PUSH
80855: LD_INT 7
80857: NEG
80858: PPUSH
80859: LD_INT 7
80861: PPUSH
80862: CALL_OW 12
80866: ST_TO_ADDR
// animal := CreateHuman ;
80867: LD_ADDR_VAR 0 12
80871: PUSH
80872: CALL_OW 44
80876: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80877: LD_VAR 0 12
80881: PPUSH
80882: LD_VAR 0 8
80886: PPUSH
80887: LD_INT 0
80889: PPUSH
80890: CALL 82737 0 3
// end ;
80894: GO 80831
80896: POP
80897: POP
// if apemans then
80898: LD_VAR 0 3
80902: IFFALSE 81025
// for i = 1 to apemans do
80904: LD_ADDR_VAR 0 11
80908: PUSH
80909: DOUBLE
80910: LD_INT 1
80912: DEC
80913: ST_TO_ADDR
80914: LD_VAR 0 3
80918: PUSH
80919: FOR_TO
80920: IFFALSE 81023
// begin hc_class = class_apeman ;
80922: LD_ADDR_OWVAR 28
80926: PUSH
80927: LD_INT 12
80929: ST_TO_ADDR
// hc_gallery =  ;
80930: LD_ADDR_OWVAR 33
80934: PUSH
80935: LD_STRING 
80937: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
80938: LD_ADDR_OWVAR 35
80942: PUSH
80943: LD_INT 5
80945: NEG
80946: PPUSH
80947: LD_INT 5
80949: PPUSH
80950: CALL_OW 12
80954: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
80955: LD_ADDR_OWVAR 31
80959: PUSH
80960: LD_INT 1
80962: PPUSH
80963: LD_INT 3
80965: PPUSH
80966: CALL_OW 12
80970: PUSH
80971: LD_INT 1
80973: PPUSH
80974: LD_INT 3
80976: PPUSH
80977: CALL_OW 12
80981: PUSH
80982: LD_INT 0
80984: PUSH
80985: LD_INT 0
80987: PUSH
80988: EMPTY
80989: LIST
80990: LIST
80991: LIST
80992: LIST
80993: ST_TO_ADDR
// animal := CreateHuman ;
80994: LD_ADDR_VAR 0 12
80998: PUSH
80999: CALL_OW 44
81003: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81004: LD_VAR 0 12
81008: PPUSH
81009: LD_VAR 0 8
81013: PPUSH
81014: LD_INT 0
81016: PPUSH
81017: CALL 82737 0 3
// end ;
81021: GO 80919
81023: POP
81024: POP
// if enchidnas then
81025: LD_VAR 0 4
81029: IFFALSE 81096
// for i = 1 to enchidnas do
81031: LD_ADDR_VAR 0 11
81035: PUSH
81036: DOUBLE
81037: LD_INT 1
81039: DEC
81040: ST_TO_ADDR
81041: LD_VAR 0 4
81045: PUSH
81046: FOR_TO
81047: IFFALSE 81094
// begin hc_class = 13 ;
81049: LD_ADDR_OWVAR 28
81053: PUSH
81054: LD_INT 13
81056: ST_TO_ADDR
// hc_gallery =  ;
81057: LD_ADDR_OWVAR 33
81061: PUSH
81062: LD_STRING 
81064: ST_TO_ADDR
// animal := CreateHuman ;
81065: LD_ADDR_VAR 0 12
81069: PUSH
81070: CALL_OW 44
81074: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81075: LD_VAR 0 12
81079: PPUSH
81080: LD_VAR 0 8
81084: PPUSH
81085: LD_INT 0
81087: PPUSH
81088: CALL 82737 0 3
// end ;
81092: GO 81046
81094: POP
81095: POP
// if fishes then
81096: LD_VAR 0 7
81100: IFFALSE 81167
// for i = 1 to fishes do
81102: LD_ADDR_VAR 0 11
81106: PUSH
81107: DOUBLE
81108: LD_INT 1
81110: DEC
81111: ST_TO_ADDR
81112: LD_VAR 0 7
81116: PUSH
81117: FOR_TO
81118: IFFALSE 81165
// begin hc_class = 20 ;
81120: LD_ADDR_OWVAR 28
81124: PUSH
81125: LD_INT 20
81127: ST_TO_ADDR
// hc_gallery =  ;
81128: LD_ADDR_OWVAR 33
81132: PUSH
81133: LD_STRING 
81135: ST_TO_ADDR
// animal := CreateHuman ;
81136: LD_ADDR_VAR 0 12
81140: PUSH
81141: CALL_OW 44
81145: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
81146: LD_VAR 0 12
81150: PPUSH
81151: LD_VAR 0 9
81155: PPUSH
81156: LD_INT 0
81158: PPUSH
81159: CALL 82737 0 3
// end ;
81163: GO 81117
81165: POP
81166: POP
// end ;
81167: LD_VAR 0 10
81171: RET
// export function WantHeal ( sci , unit ) ; begin
81172: LD_INT 0
81174: PPUSH
// if GetTaskList ( sci ) > 0 then
81175: LD_VAR 0 1
81179: PPUSH
81180: CALL_OW 437
81184: PUSH
81185: LD_INT 0
81187: GREATER
81188: IFFALSE 81258
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
81190: LD_VAR 0 1
81194: PPUSH
81195: CALL_OW 437
81199: PUSH
81200: LD_INT 1
81202: ARRAY
81203: PUSH
81204: LD_INT 1
81206: ARRAY
81207: PUSH
81208: LD_STRING l
81210: EQUAL
81211: PUSH
81212: LD_VAR 0 1
81216: PPUSH
81217: CALL_OW 437
81221: PUSH
81222: LD_INT 1
81224: ARRAY
81225: PUSH
81226: LD_INT 4
81228: ARRAY
81229: PUSH
81230: LD_VAR 0 2
81234: EQUAL
81235: AND
81236: IFFALSE 81248
// result := true else
81238: LD_ADDR_VAR 0 3
81242: PUSH
81243: LD_INT 1
81245: ST_TO_ADDR
81246: GO 81256
// result := false ;
81248: LD_ADDR_VAR 0 3
81252: PUSH
81253: LD_INT 0
81255: ST_TO_ADDR
// end else
81256: GO 81266
// result := false ;
81258: LD_ADDR_VAR 0 3
81262: PUSH
81263: LD_INT 0
81265: ST_TO_ADDR
// end ;
81266: LD_VAR 0 3
81270: RET
// export function HealTarget ( sci ) ; begin
81271: LD_INT 0
81273: PPUSH
// if not sci then
81274: LD_VAR 0 1
81278: NOT
81279: IFFALSE 81283
// exit ;
81281: GO 81348
// result := 0 ;
81283: LD_ADDR_VAR 0 2
81287: PUSH
81288: LD_INT 0
81290: ST_TO_ADDR
// if GetTaskList ( sci ) then
81291: LD_VAR 0 1
81295: PPUSH
81296: CALL_OW 437
81300: IFFALSE 81348
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
81302: LD_VAR 0 1
81306: PPUSH
81307: CALL_OW 437
81311: PUSH
81312: LD_INT 1
81314: ARRAY
81315: PUSH
81316: LD_INT 1
81318: ARRAY
81319: PUSH
81320: LD_STRING l
81322: EQUAL
81323: IFFALSE 81348
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
81325: LD_ADDR_VAR 0 2
81329: PUSH
81330: LD_VAR 0 1
81334: PPUSH
81335: CALL_OW 437
81339: PUSH
81340: LD_INT 1
81342: ARRAY
81343: PUSH
81344: LD_INT 4
81346: ARRAY
81347: ST_TO_ADDR
// end ;
81348: LD_VAR 0 2
81352: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
81353: LD_INT 0
81355: PPUSH
81356: PPUSH
81357: PPUSH
81358: PPUSH
// if not base_units then
81359: LD_VAR 0 1
81363: NOT
81364: IFFALSE 81368
// exit ;
81366: GO 81455
// result := false ;
81368: LD_ADDR_VAR 0 2
81372: PUSH
81373: LD_INT 0
81375: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
81376: LD_ADDR_VAR 0 5
81380: PUSH
81381: LD_VAR 0 1
81385: PPUSH
81386: LD_INT 21
81388: PUSH
81389: LD_INT 3
81391: PUSH
81392: EMPTY
81393: LIST
81394: LIST
81395: PPUSH
81396: CALL_OW 72
81400: ST_TO_ADDR
// if not tmp then
81401: LD_VAR 0 5
81405: NOT
81406: IFFALSE 81410
// exit ;
81408: GO 81455
// for i in tmp do
81410: LD_ADDR_VAR 0 3
81414: PUSH
81415: LD_VAR 0 5
81419: PUSH
81420: FOR_IN
81421: IFFALSE 81453
// begin result := EnemyInRange ( i , 22 ) ;
81423: LD_ADDR_VAR 0 2
81427: PUSH
81428: LD_VAR 0 3
81432: PPUSH
81433: LD_INT 22
81435: PPUSH
81436: CALL 79691 0 2
81440: ST_TO_ADDR
// if result then
81441: LD_VAR 0 2
81445: IFFALSE 81451
// exit ;
81447: POP
81448: POP
81449: GO 81455
// end ;
81451: GO 81420
81453: POP
81454: POP
// end ;
81455: LD_VAR 0 2
81459: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
81460: LD_INT 0
81462: PPUSH
81463: PPUSH
// if not units then
81464: LD_VAR 0 1
81468: NOT
81469: IFFALSE 81473
// exit ;
81471: GO 81543
// result := [ ] ;
81473: LD_ADDR_VAR 0 3
81477: PUSH
81478: EMPTY
81479: ST_TO_ADDR
// for i in units do
81480: LD_ADDR_VAR 0 4
81484: PUSH
81485: LD_VAR 0 1
81489: PUSH
81490: FOR_IN
81491: IFFALSE 81541
// if GetTag ( i ) = tag then
81493: LD_VAR 0 4
81497: PPUSH
81498: CALL_OW 110
81502: PUSH
81503: LD_VAR 0 2
81507: EQUAL
81508: IFFALSE 81539
// result := Insert ( result , result + 1 , i ) ;
81510: LD_ADDR_VAR 0 3
81514: PUSH
81515: LD_VAR 0 3
81519: PPUSH
81520: LD_VAR 0 3
81524: PUSH
81525: LD_INT 1
81527: PLUS
81528: PPUSH
81529: LD_VAR 0 4
81533: PPUSH
81534: CALL_OW 2
81538: ST_TO_ADDR
81539: GO 81490
81541: POP
81542: POP
// end ;
81543: LD_VAR 0 3
81547: RET
// export function IsDriver ( un ) ; begin
81548: LD_INT 0
81550: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
81551: LD_ADDR_VAR 0 2
81555: PUSH
81556: LD_VAR 0 1
81560: PUSH
81561: LD_INT 55
81563: PUSH
81564: EMPTY
81565: LIST
81566: PPUSH
81567: CALL_OW 69
81571: IN
81572: ST_TO_ADDR
// end ;
81573: LD_VAR 0 2
81577: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
81578: LD_INT 0
81580: PPUSH
81581: PPUSH
// list := [ ] ;
81582: LD_ADDR_VAR 0 5
81586: PUSH
81587: EMPTY
81588: ST_TO_ADDR
// case d of 0 :
81589: LD_VAR 0 3
81593: PUSH
81594: LD_INT 0
81596: DOUBLE
81597: EQUAL
81598: IFTRUE 81602
81600: GO 81735
81602: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
81603: LD_ADDR_VAR 0 5
81607: PUSH
81608: LD_VAR 0 1
81612: PUSH
81613: LD_INT 4
81615: MINUS
81616: PUSH
81617: LD_VAR 0 2
81621: PUSH
81622: LD_INT 4
81624: MINUS
81625: PUSH
81626: LD_INT 2
81628: PUSH
81629: EMPTY
81630: LIST
81631: LIST
81632: LIST
81633: PUSH
81634: LD_VAR 0 1
81638: PUSH
81639: LD_INT 3
81641: MINUS
81642: PUSH
81643: LD_VAR 0 2
81647: PUSH
81648: LD_INT 1
81650: PUSH
81651: EMPTY
81652: LIST
81653: LIST
81654: LIST
81655: PUSH
81656: LD_VAR 0 1
81660: PUSH
81661: LD_INT 4
81663: PLUS
81664: PUSH
81665: LD_VAR 0 2
81669: PUSH
81670: LD_INT 4
81672: PUSH
81673: EMPTY
81674: LIST
81675: LIST
81676: LIST
81677: PUSH
81678: LD_VAR 0 1
81682: PUSH
81683: LD_INT 3
81685: PLUS
81686: PUSH
81687: LD_VAR 0 2
81691: PUSH
81692: LD_INT 3
81694: PLUS
81695: PUSH
81696: LD_INT 5
81698: PUSH
81699: EMPTY
81700: LIST
81701: LIST
81702: LIST
81703: PUSH
81704: LD_VAR 0 1
81708: PUSH
81709: LD_VAR 0 2
81713: PUSH
81714: LD_INT 4
81716: PLUS
81717: PUSH
81718: LD_INT 0
81720: PUSH
81721: EMPTY
81722: LIST
81723: LIST
81724: LIST
81725: PUSH
81726: EMPTY
81727: LIST
81728: LIST
81729: LIST
81730: LIST
81731: LIST
81732: ST_TO_ADDR
// end ; 1 :
81733: GO 82433
81735: LD_INT 1
81737: DOUBLE
81738: EQUAL
81739: IFTRUE 81743
81741: GO 81876
81743: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
81744: LD_ADDR_VAR 0 5
81748: PUSH
81749: LD_VAR 0 1
81753: PUSH
81754: LD_VAR 0 2
81758: PUSH
81759: LD_INT 4
81761: MINUS
81762: PUSH
81763: LD_INT 3
81765: PUSH
81766: EMPTY
81767: LIST
81768: LIST
81769: LIST
81770: PUSH
81771: LD_VAR 0 1
81775: PUSH
81776: LD_INT 3
81778: MINUS
81779: PUSH
81780: LD_VAR 0 2
81784: PUSH
81785: LD_INT 3
81787: MINUS
81788: PUSH
81789: LD_INT 2
81791: PUSH
81792: EMPTY
81793: LIST
81794: LIST
81795: LIST
81796: PUSH
81797: LD_VAR 0 1
81801: PUSH
81802: LD_INT 4
81804: MINUS
81805: PUSH
81806: LD_VAR 0 2
81810: PUSH
81811: LD_INT 1
81813: PUSH
81814: EMPTY
81815: LIST
81816: LIST
81817: LIST
81818: PUSH
81819: LD_VAR 0 1
81823: PUSH
81824: LD_VAR 0 2
81828: PUSH
81829: LD_INT 3
81831: PLUS
81832: PUSH
81833: LD_INT 0
81835: PUSH
81836: EMPTY
81837: LIST
81838: LIST
81839: LIST
81840: PUSH
81841: LD_VAR 0 1
81845: PUSH
81846: LD_INT 4
81848: PLUS
81849: PUSH
81850: LD_VAR 0 2
81854: PUSH
81855: LD_INT 4
81857: PLUS
81858: PUSH
81859: LD_INT 5
81861: PUSH
81862: EMPTY
81863: LIST
81864: LIST
81865: LIST
81866: PUSH
81867: EMPTY
81868: LIST
81869: LIST
81870: LIST
81871: LIST
81872: LIST
81873: ST_TO_ADDR
// end ; 2 :
81874: GO 82433
81876: LD_INT 2
81878: DOUBLE
81879: EQUAL
81880: IFTRUE 81884
81882: GO 82013
81884: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
81885: LD_ADDR_VAR 0 5
81889: PUSH
81890: LD_VAR 0 1
81894: PUSH
81895: LD_VAR 0 2
81899: PUSH
81900: LD_INT 3
81902: MINUS
81903: PUSH
81904: LD_INT 3
81906: PUSH
81907: EMPTY
81908: LIST
81909: LIST
81910: LIST
81911: PUSH
81912: LD_VAR 0 1
81916: PUSH
81917: LD_INT 4
81919: PLUS
81920: PUSH
81921: LD_VAR 0 2
81925: PUSH
81926: LD_INT 4
81928: PUSH
81929: EMPTY
81930: LIST
81931: LIST
81932: LIST
81933: PUSH
81934: LD_VAR 0 1
81938: PUSH
81939: LD_VAR 0 2
81943: PUSH
81944: LD_INT 4
81946: PLUS
81947: PUSH
81948: LD_INT 0
81950: PUSH
81951: EMPTY
81952: LIST
81953: LIST
81954: LIST
81955: PUSH
81956: LD_VAR 0 1
81960: PUSH
81961: LD_INT 3
81963: MINUS
81964: PUSH
81965: LD_VAR 0 2
81969: PUSH
81970: LD_INT 1
81972: PUSH
81973: EMPTY
81974: LIST
81975: LIST
81976: LIST
81977: PUSH
81978: LD_VAR 0 1
81982: PUSH
81983: LD_INT 4
81985: MINUS
81986: PUSH
81987: LD_VAR 0 2
81991: PUSH
81992: LD_INT 4
81994: MINUS
81995: PUSH
81996: LD_INT 2
81998: PUSH
81999: EMPTY
82000: LIST
82001: LIST
82002: LIST
82003: PUSH
82004: EMPTY
82005: LIST
82006: LIST
82007: LIST
82008: LIST
82009: LIST
82010: ST_TO_ADDR
// end ; 3 :
82011: GO 82433
82013: LD_INT 3
82015: DOUBLE
82016: EQUAL
82017: IFTRUE 82021
82019: GO 82154
82021: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
82022: LD_ADDR_VAR 0 5
82026: PUSH
82027: LD_VAR 0 1
82031: PUSH
82032: LD_INT 3
82034: PLUS
82035: PUSH
82036: LD_VAR 0 2
82040: PUSH
82041: LD_INT 4
82043: PUSH
82044: EMPTY
82045: LIST
82046: LIST
82047: LIST
82048: PUSH
82049: LD_VAR 0 1
82053: PUSH
82054: LD_INT 4
82056: PLUS
82057: PUSH
82058: LD_VAR 0 2
82062: PUSH
82063: LD_INT 4
82065: PLUS
82066: PUSH
82067: LD_INT 5
82069: PUSH
82070: EMPTY
82071: LIST
82072: LIST
82073: LIST
82074: PUSH
82075: LD_VAR 0 1
82079: PUSH
82080: LD_INT 4
82082: MINUS
82083: PUSH
82084: LD_VAR 0 2
82088: PUSH
82089: LD_INT 1
82091: PUSH
82092: EMPTY
82093: LIST
82094: LIST
82095: LIST
82096: PUSH
82097: LD_VAR 0 1
82101: PUSH
82102: LD_VAR 0 2
82106: PUSH
82107: LD_INT 4
82109: MINUS
82110: PUSH
82111: LD_INT 3
82113: PUSH
82114: EMPTY
82115: LIST
82116: LIST
82117: LIST
82118: PUSH
82119: LD_VAR 0 1
82123: PUSH
82124: LD_INT 3
82126: MINUS
82127: PUSH
82128: LD_VAR 0 2
82132: PUSH
82133: LD_INT 3
82135: MINUS
82136: PUSH
82137: LD_INT 2
82139: PUSH
82140: EMPTY
82141: LIST
82142: LIST
82143: LIST
82144: PUSH
82145: EMPTY
82146: LIST
82147: LIST
82148: LIST
82149: LIST
82150: LIST
82151: ST_TO_ADDR
// end ; 4 :
82152: GO 82433
82154: LD_INT 4
82156: DOUBLE
82157: EQUAL
82158: IFTRUE 82162
82160: GO 82295
82162: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
82163: LD_ADDR_VAR 0 5
82167: PUSH
82168: LD_VAR 0 1
82172: PUSH
82173: LD_VAR 0 2
82177: PUSH
82178: LD_INT 4
82180: PLUS
82181: PUSH
82182: LD_INT 0
82184: PUSH
82185: EMPTY
82186: LIST
82187: LIST
82188: LIST
82189: PUSH
82190: LD_VAR 0 1
82194: PUSH
82195: LD_INT 3
82197: PLUS
82198: PUSH
82199: LD_VAR 0 2
82203: PUSH
82204: LD_INT 3
82206: PLUS
82207: PUSH
82208: LD_INT 5
82210: PUSH
82211: EMPTY
82212: LIST
82213: LIST
82214: LIST
82215: PUSH
82216: LD_VAR 0 1
82220: PUSH
82221: LD_INT 4
82223: PLUS
82224: PUSH
82225: LD_VAR 0 2
82229: PUSH
82230: LD_INT 4
82232: PUSH
82233: EMPTY
82234: LIST
82235: LIST
82236: LIST
82237: PUSH
82238: LD_VAR 0 1
82242: PUSH
82243: LD_VAR 0 2
82247: PUSH
82248: LD_INT 3
82250: MINUS
82251: PUSH
82252: LD_INT 3
82254: PUSH
82255: EMPTY
82256: LIST
82257: LIST
82258: LIST
82259: PUSH
82260: LD_VAR 0 1
82264: PUSH
82265: LD_INT 4
82267: MINUS
82268: PUSH
82269: LD_VAR 0 2
82273: PUSH
82274: LD_INT 4
82276: MINUS
82277: PUSH
82278: LD_INT 2
82280: PUSH
82281: EMPTY
82282: LIST
82283: LIST
82284: LIST
82285: PUSH
82286: EMPTY
82287: LIST
82288: LIST
82289: LIST
82290: LIST
82291: LIST
82292: ST_TO_ADDR
// end ; 5 :
82293: GO 82433
82295: LD_INT 5
82297: DOUBLE
82298: EQUAL
82299: IFTRUE 82303
82301: GO 82432
82303: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
82304: LD_ADDR_VAR 0 5
82308: PUSH
82309: LD_VAR 0 1
82313: PUSH
82314: LD_INT 4
82316: MINUS
82317: PUSH
82318: LD_VAR 0 2
82322: PUSH
82323: LD_INT 1
82325: PUSH
82326: EMPTY
82327: LIST
82328: LIST
82329: LIST
82330: PUSH
82331: LD_VAR 0 1
82335: PUSH
82336: LD_VAR 0 2
82340: PUSH
82341: LD_INT 4
82343: MINUS
82344: PUSH
82345: LD_INT 3
82347: PUSH
82348: EMPTY
82349: LIST
82350: LIST
82351: LIST
82352: PUSH
82353: LD_VAR 0 1
82357: PUSH
82358: LD_INT 4
82360: PLUS
82361: PUSH
82362: LD_VAR 0 2
82366: PUSH
82367: LD_INT 4
82369: PLUS
82370: PUSH
82371: LD_INT 5
82373: PUSH
82374: EMPTY
82375: LIST
82376: LIST
82377: LIST
82378: PUSH
82379: LD_VAR 0 1
82383: PUSH
82384: LD_INT 3
82386: PLUS
82387: PUSH
82388: LD_VAR 0 2
82392: PUSH
82393: LD_INT 4
82395: PUSH
82396: EMPTY
82397: LIST
82398: LIST
82399: LIST
82400: PUSH
82401: LD_VAR 0 1
82405: PUSH
82406: LD_VAR 0 2
82410: PUSH
82411: LD_INT 3
82413: PLUS
82414: PUSH
82415: LD_INT 0
82417: PUSH
82418: EMPTY
82419: LIST
82420: LIST
82421: LIST
82422: PUSH
82423: EMPTY
82424: LIST
82425: LIST
82426: LIST
82427: LIST
82428: LIST
82429: ST_TO_ADDR
// end ; end ;
82430: GO 82433
82432: POP
// result := list ;
82433: LD_ADDR_VAR 0 4
82437: PUSH
82438: LD_VAR 0 5
82442: ST_TO_ADDR
// end ;
82443: LD_VAR 0 4
82447: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
82448: LD_INT 0
82450: PPUSH
82451: PPUSH
82452: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
82453: LD_VAR 0 1
82457: NOT
82458: PUSH
82459: LD_VAR 0 2
82463: PUSH
82464: LD_INT 1
82466: PUSH
82467: LD_INT 2
82469: PUSH
82470: LD_INT 3
82472: PUSH
82473: LD_INT 4
82475: PUSH
82476: EMPTY
82477: LIST
82478: LIST
82479: LIST
82480: LIST
82481: IN
82482: NOT
82483: OR
82484: IFFALSE 82488
// exit ;
82486: GO 82580
// tmp := [ ] ;
82488: LD_ADDR_VAR 0 5
82492: PUSH
82493: EMPTY
82494: ST_TO_ADDR
// for i in units do
82495: LD_ADDR_VAR 0 4
82499: PUSH
82500: LD_VAR 0 1
82504: PUSH
82505: FOR_IN
82506: IFFALSE 82549
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
82508: LD_ADDR_VAR 0 5
82512: PUSH
82513: LD_VAR 0 5
82517: PPUSH
82518: LD_VAR 0 5
82522: PUSH
82523: LD_INT 1
82525: PLUS
82526: PPUSH
82527: LD_VAR 0 4
82531: PPUSH
82532: LD_VAR 0 2
82536: PPUSH
82537: CALL_OW 259
82541: PPUSH
82542: CALL_OW 2
82546: ST_TO_ADDR
82547: GO 82505
82549: POP
82550: POP
// if not tmp then
82551: LD_VAR 0 5
82555: NOT
82556: IFFALSE 82560
// exit ;
82558: GO 82580
// result := SortListByListDesc ( units , tmp ) ;
82560: LD_ADDR_VAR 0 3
82564: PUSH
82565: LD_VAR 0 1
82569: PPUSH
82570: LD_VAR 0 5
82574: PPUSH
82575: CALL_OW 77
82579: ST_TO_ADDR
// end ;
82580: LD_VAR 0 3
82584: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
82585: LD_INT 0
82587: PPUSH
82588: PPUSH
82589: PPUSH
// x := GetX ( building ) ;
82590: LD_ADDR_VAR 0 4
82594: PUSH
82595: LD_VAR 0 2
82599: PPUSH
82600: CALL_OW 250
82604: ST_TO_ADDR
// y := GetY ( building ) ;
82605: LD_ADDR_VAR 0 5
82609: PUSH
82610: LD_VAR 0 2
82614: PPUSH
82615: CALL_OW 251
82619: ST_TO_ADDR
// if GetTaskList ( unit ) then
82620: LD_VAR 0 1
82624: PPUSH
82625: CALL_OW 437
82629: IFFALSE 82724
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
82631: LD_STRING e
82633: PUSH
82634: LD_VAR 0 1
82638: PPUSH
82639: CALL_OW 437
82643: PUSH
82644: LD_INT 1
82646: ARRAY
82647: PUSH
82648: LD_INT 1
82650: ARRAY
82651: EQUAL
82652: PUSH
82653: LD_VAR 0 4
82657: PUSH
82658: LD_VAR 0 1
82662: PPUSH
82663: CALL_OW 437
82667: PUSH
82668: LD_INT 1
82670: ARRAY
82671: PUSH
82672: LD_INT 2
82674: ARRAY
82675: EQUAL
82676: AND
82677: PUSH
82678: LD_VAR 0 5
82682: PUSH
82683: LD_VAR 0 1
82687: PPUSH
82688: CALL_OW 437
82692: PUSH
82693: LD_INT 1
82695: ARRAY
82696: PUSH
82697: LD_INT 3
82699: ARRAY
82700: EQUAL
82701: AND
82702: IFFALSE 82714
// result := true else
82704: LD_ADDR_VAR 0 3
82708: PUSH
82709: LD_INT 1
82711: ST_TO_ADDR
82712: GO 82722
// result := false ;
82714: LD_ADDR_VAR 0 3
82718: PUSH
82719: LD_INT 0
82721: ST_TO_ADDR
// end else
82722: GO 82732
// result := false ;
82724: LD_ADDR_VAR 0 3
82728: PUSH
82729: LD_INT 0
82731: ST_TO_ADDR
// end ;
82732: LD_VAR 0 3
82736: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
82737: LD_INT 0
82739: PPUSH
82740: PPUSH
82741: PPUSH
82742: PPUSH
// if not unit or not area then
82743: LD_VAR 0 1
82747: NOT
82748: PUSH
82749: LD_VAR 0 2
82753: NOT
82754: OR
82755: IFFALSE 82759
// exit ;
82757: GO 82923
// tmp := AreaToList ( area , i ) ;
82759: LD_ADDR_VAR 0 6
82763: PUSH
82764: LD_VAR 0 2
82768: PPUSH
82769: LD_VAR 0 5
82773: PPUSH
82774: CALL_OW 517
82778: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
82779: LD_ADDR_VAR 0 5
82783: PUSH
82784: DOUBLE
82785: LD_INT 1
82787: DEC
82788: ST_TO_ADDR
82789: LD_VAR 0 6
82793: PUSH
82794: LD_INT 1
82796: ARRAY
82797: PUSH
82798: FOR_TO
82799: IFFALSE 82921
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
82801: LD_ADDR_VAR 0 7
82805: PUSH
82806: LD_VAR 0 6
82810: PUSH
82811: LD_INT 1
82813: ARRAY
82814: PUSH
82815: LD_VAR 0 5
82819: ARRAY
82820: PUSH
82821: LD_VAR 0 6
82825: PUSH
82826: LD_INT 2
82828: ARRAY
82829: PUSH
82830: LD_VAR 0 5
82834: ARRAY
82835: PUSH
82836: EMPTY
82837: LIST
82838: LIST
82839: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
82840: LD_VAR 0 7
82844: PUSH
82845: LD_INT 1
82847: ARRAY
82848: PPUSH
82849: LD_VAR 0 7
82853: PUSH
82854: LD_INT 2
82856: ARRAY
82857: PPUSH
82858: CALL_OW 428
82862: PUSH
82863: LD_INT 0
82865: EQUAL
82866: IFFALSE 82919
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
82868: LD_VAR 0 1
82872: PPUSH
82873: LD_VAR 0 7
82877: PUSH
82878: LD_INT 1
82880: ARRAY
82881: PPUSH
82882: LD_VAR 0 7
82886: PUSH
82887: LD_INT 2
82889: ARRAY
82890: PPUSH
82891: LD_VAR 0 3
82895: PPUSH
82896: CALL_OW 48
// result := IsPlaced ( unit ) ;
82900: LD_ADDR_VAR 0 4
82904: PUSH
82905: LD_VAR 0 1
82909: PPUSH
82910: CALL_OW 305
82914: ST_TO_ADDR
// exit ;
82915: POP
82916: POP
82917: GO 82923
// end ; end ;
82919: GO 82798
82921: POP
82922: POP
// end ;
82923: LD_VAR 0 4
82927: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
82928: LD_INT 0
82930: PPUSH
82931: PPUSH
82932: PPUSH
// if not side or side > 8 then
82933: LD_VAR 0 1
82937: NOT
82938: PUSH
82939: LD_VAR 0 1
82943: PUSH
82944: LD_INT 8
82946: GREATER
82947: OR
82948: IFFALSE 82952
// exit ;
82950: GO 83139
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
82952: LD_ADDR_VAR 0 4
82956: PUSH
82957: LD_INT 22
82959: PUSH
82960: LD_VAR 0 1
82964: PUSH
82965: EMPTY
82966: LIST
82967: LIST
82968: PUSH
82969: LD_INT 21
82971: PUSH
82972: LD_INT 3
82974: PUSH
82975: EMPTY
82976: LIST
82977: LIST
82978: PUSH
82979: EMPTY
82980: LIST
82981: LIST
82982: PPUSH
82983: CALL_OW 69
82987: ST_TO_ADDR
// if not tmp then
82988: LD_VAR 0 4
82992: NOT
82993: IFFALSE 82997
// exit ;
82995: GO 83139
// enable_addtolog := true ;
82997: LD_ADDR_OWVAR 81
83001: PUSH
83002: LD_INT 1
83004: ST_TO_ADDR
// AddToLog ( [ ) ;
83005: LD_STRING [
83007: PPUSH
83008: CALL_OW 561
// for i in tmp do
83012: LD_ADDR_VAR 0 3
83016: PUSH
83017: LD_VAR 0 4
83021: PUSH
83022: FOR_IN
83023: IFFALSE 83130
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
83025: LD_STRING [
83027: PUSH
83028: LD_VAR 0 3
83032: PPUSH
83033: CALL_OW 266
83037: STR
83038: PUSH
83039: LD_STRING , 
83041: STR
83042: PUSH
83043: LD_VAR 0 3
83047: PPUSH
83048: CALL_OW 250
83052: STR
83053: PUSH
83054: LD_STRING , 
83056: STR
83057: PUSH
83058: LD_VAR 0 3
83062: PPUSH
83063: CALL_OW 251
83067: STR
83068: PUSH
83069: LD_STRING , 
83071: STR
83072: PUSH
83073: LD_VAR 0 3
83077: PPUSH
83078: CALL_OW 254
83082: STR
83083: PUSH
83084: LD_STRING , 
83086: STR
83087: PUSH
83088: LD_VAR 0 3
83092: PPUSH
83093: LD_INT 1
83095: PPUSH
83096: CALL_OW 268
83100: STR
83101: PUSH
83102: LD_STRING , 
83104: STR
83105: PUSH
83106: LD_VAR 0 3
83110: PPUSH
83111: LD_INT 2
83113: PPUSH
83114: CALL_OW 268
83118: STR
83119: PUSH
83120: LD_STRING ],
83122: STR
83123: PPUSH
83124: CALL_OW 561
// end ;
83128: GO 83022
83130: POP
83131: POP
// AddToLog ( ]; ) ;
83132: LD_STRING ];
83134: PPUSH
83135: CALL_OW 561
// end ;
83139: LD_VAR 0 2
83143: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
83144: LD_INT 0
83146: PPUSH
83147: PPUSH
83148: PPUSH
83149: PPUSH
83150: PPUSH
// if not area or not rate or not max then
83151: LD_VAR 0 1
83155: NOT
83156: PUSH
83157: LD_VAR 0 2
83161: NOT
83162: OR
83163: PUSH
83164: LD_VAR 0 4
83168: NOT
83169: OR
83170: IFFALSE 83174
// exit ;
83172: GO 83366
// while 1 do
83174: LD_INT 1
83176: IFFALSE 83366
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
83178: LD_ADDR_VAR 0 9
83182: PUSH
83183: LD_VAR 0 1
83187: PPUSH
83188: LD_INT 1
83190: PPUSH
83191: CALL_OW 287
83195: PUSH
83196: LD_INT 10
83198: MUL
83199: ST_TO_ADDR
// r := rate / 10 ;
83200: LD_ADDR_VAR 0 7
83204: PUSH
83205: LD_VAR 0 2
83209: PUSH
83210: LD_INT 10
83212: DIVREAL
83213: ST_TO_ADDR
// time := 1 1$00 ;
83214: LD_ADDR_VAR 0 8
83218: PUSH
83219: LD_INT 2100
83221: ST_TO_ADDR
// if amount < min then
83222: LD_VAR 0 9
83226: PUSH
83227: LD_VAR 0 3
83231: LESS
83232: IFFALSE 83250
// r := r * 2 else
83234: LD_ADDR_VAR 0 7
83238: PUSH
83239: LD_VAR 0 7
83243: PUSH
83244: LD_INT 2
83246: MUL
83247: ST_TO_ADDR
83248: GO 83276
// if amount > max then
83250: LD_VAR 0 9
83254: PUSH
83255: LD_VAR 0 4
83259: GREATER
83260: IFFALSE 83276
// r := r / 2 ;
83262: LD_ADDR_VAR 0 7
83266: PUSH
83267: LD_VAR 0 7
83271: PUSH
83272: LD_INT 2
83274: DIVREAL
83275: ST_TO_ADDR
// time := time / r ;
83276: LD_ADDR_VAR 0 8
83280: PUSH
83281: LD_VAR 0 8
83285: PUSH
83286: LD_VAR 0 7
83290: DIVREAL
83291: ST_TO_ADDR
// if time < 0 then
83292: LD_VAR 0 8
83296: PUSH
83297: LD_INT 0
83299: LESS
83300: IFFALSE 83317
// time := time * - 1 ;
83302: LD_ADDR_VAR 0 8
83306: PUSH
83307: LD_VAR 0 8
83311: PUSH
83312: LD_INT 1
83314: NEG
83315: MUL
83316: ST_TO_ADDR
// wait ( time ) ;
83317: LD_VAR 0 8
83321: PPUSH
83322: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
83326: LD_INT 35
83328: PPUSH
83329: LD_INT 875
83331: PPUSH
83332: CALL_OW 12
83336: PPUSH
83337: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
83341: LD_INT 1
83343: PPUSH
83344: LD_INT 5
83346: PPUSH
83347: CALL_OW 12
83351: PPUSH
83352: LD_VAR 0 1
83356: PPUSH
83357: LD_INT 1
83359: PPUSH
83360: CALL_OW 55
// end ;
83364: GO 83174
// end ;
83366: LD_VAR 0 5
83370: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
83371: LD_INT 0
83373: PPUSH
83374: PPUSH
83375: PPUSH
83376: PPUSH
83377: PPUSH
83378: PPUSH
83379: PPUSH
83380: PPUSH
// if not turrets or not factories then
83381: LD_VAR 0 1
83385: NOT
83386: PUSH
83387: LD_VAR 0 2
83391: NOT
83392: OR
83393: IFFALSE 83397
// exit ;
83395: GO 83704
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
83397: LD_ADDR_VAR 0 10
83401: PUSH
83402: LD_INT 5
83404: PUSH
83405: LD_INT 6
83407: PUSH
83408: EMPTY
83409: LIST
83410: LIST
83411: PUSH
83412: LD_INT 2
83414: PUSH
83415: LD_INT 4
83417: PUSH
83418: EMPTY
83419: LIST
83420: LIST
83421: PUSH
83422: LD_INT 3
83424: PUSH
83425: LD_INT 5
83427: PUSH
83428: EMPTY
83429: LIST
83430: LIST
83431: PUSH
83432: EMPTY
83433: LIST
83434: LIST
83435: LIST
83436: PUSH
83437: LD_INT 24
83439: PUSH
83440: LD_INT 25
83442: PUSH
83443: EMPTY
83444: LIST
83445: LIST
83446: PUSH
83447: LD_INT 23
83449: PUSH
83450: LD_INT 27
83452: PUSH
83453: EMPTY
83454: LIST
83455: LIST
83456: PUSH
83457: EMPTY
83458: LIST
83459: LIST
83460: PUSH
83461: LD_INT 42
83463: PUSH
83464: LD_INT 43
83466: PUSH
83467: EMPTY
83468: LIST
83469: LIST
83470: PUSH
83471: LD_INT 44
83473: PUSH
83474: LD_INT 46
83476: PUSH
83477: EMPTY
83478: LIST
83479: LIST
83480: PUSH
83481: LD_INT 45
83483: PUSH
83484: LD_INT 47
83486: PUSH
83487: EMPTY
83488: LIST
83489: LIST
83490: PUSH
83491: EMPTY
83492: LIST
83493: LIST
83494: LIST
83495: PUSH
83496: EMPTY
83497: LIST
83498: LIST
83499: LIST
83500: ST_TO_ADDR
// result := [ ] ;
83501: LD_ADDR_VAR 0 3
83505: PUSH
83506: EMPTY
83507: ST_TO_ADDR
// for i in turrets do
83508: LD_ADDR_VAR 0 4
83512: PUSH
83513: LD_VAR 0 1
83517: PUSH
83518: FOR_IN
83519: IFFALSE 83702
// begin nat := GetNation ( i ) ;
83521: LD_ADDR_VAR 0 7
83525: PUSH
83526: LD_VAR 0 4
83530: PPUSH
83531: CALL_OW 248
83535: ST_TO_ADDR
// weapon := 0 ;
83536: LD_ADDR_VAR 0 8
83540: PUSH
83541: LD_INT 0
83543: ST_TO_ADDR
// if not nat then
83544: LD_VAR 0 7
83548: NOT
83549: IFFALSE 83553
// continue ;
83551: GO 83518
// for j in list [ nat ] do
83553: LD_ADDR_VAR 0 5
83557: PUSH
83558: LD_VAR 0 10
83562: PUSH
83563: LD_VAR 0 7
83567: ARRAY
83568: PUSH
83569: FOR_IN
83570: IFFALSE 83611
// if GetBWeapon ( i ) = j [ 1 ] then
83572: LD_VAR 0 4
83576: PPUSH
83577: CALL_OW 269
83581: PUSH
83582: LD_VAR 0 5
83586: PUSH
83587: LD_INT 1
83589: ARRAY
83590: EQUAL
83591: IFFALSE 83609
// begin weapon := j [ 2 ] ;
83593: LD_ADDR_VAR 0 8
83597: PUSH
83598: LD_VAR 0 5
83602: PUSH
83603: LD_INT 2
83605: ARRAY
83606: ST_TO_ADDR
// break ;
83607: GO 83611
// end ;
83609: GO 83569
83611: POP
83612: POP
// if not weapon then
83613: LD_VAR 0 8
83617: NOT
83618: IFFALSE 83622
// continue ;
83620: GO 83518
// for k in factories do
83622: LD_ADDR_VAR 0 6
83626: PUSH
83627: LD_VAR 0 2
83631: PUSH
83632: FOR_IN
83633: IFFALSE 83698
// begin weapons := AvailableWeaponList ( k ) ;
83635: LD_ADDR_VAR 0 9
83639: PUSH
83640: LD_VAR 0 6
83644: PPUSH
83645: CALL_OW 478
83649: ST_TO_ADDR
// if not weapons then
83650: LD_VAR 0 9
83654: NOT
83655: IFFALSE 83659
// continue ;
83657: GO 83632
// if weapon in weapons then
83659: LD_VAR 0 8
83663: PUSH
83664: LD_VAR 0 9
83668: IN
83669: IFFALSE 83696
// begin result := [ i , weapon ] ;
83671: LD_ADDR_VAR 0 3
83675: PUSH
83676: LD_VAR 0 4
83680: PUSH
83681: LD_VAR 0 8
83685: PUSH
83686: EMPTY
83687: LIST
83688: LIST
83689: ST_TO_ADDR
// exit ;
83690: POP
83691: POP
83692: POP
83693: POP
83694: GO 83704
// end ; end ;
83696: GO 83632
83698: POP
83699: POP
// end ;
83700: GO 83518
83702: POP
83703: POP
// end ;
83704: LD_VAR 0 3
83708: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
83709: LD_INT 0
83711: PPUSH
// if not side or side > 8 then
83712: LD_VAR 0 3
83716: NOT
83717: PUSH
83718: LD_VAR 0 3
83722: PUSH
83723: LD_INT 8
83725: GREATER
83726: OR
83727: IFFALSE 83731
// exit ;
83729: GO 83790
// if not range then
83731: LD_VAR 0 4
83735: NOT
83736: IFFALSE 83747
// range := - 12 ;
83738: LD_ADDR_VAR 0 4
83742: PUSH
83743: LD_INT 12
83745: NEG
83746: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
83747: LD_VAR 0 1
83751: PPUSH
83752: LD_VAR 0 2
83756: PPUSH
83757: LD_VAR 0 3
83761: PPUSH
83762: LD_VAR 0 4
83766: PPUSH
83767: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
83771: LD_VAR 0 1
83775: PPUSH
83776: LD_VAR 0 2
83780: PPUSH
83781: LD_VAR 0 3
83785: PPUSH
83786: CALL_OW 331
// end ;
83790: LD_VAR 0 5
83794: RET
// export function Video ( mode ) ; begin
83795: LD_INT 0
83797: PPUSH
// ingame_video = mode ;
83798: LD_ADDR_OWVAR 52
83802: PUSH
83803: LD_VAR 0 1
83807: ST_TO_ADDR
// interface_hidden = mode ;
83808: LD_ADDR_OWVAR 54
83812: PUSH
83813: LD_VAR 0 1
83817: ST_TO_ADDR
// end ;
83818: LD_VAR 0 2
83822: RET
// export function Join ( array , element ) ; begin
83823: LD_INT 0
83825: PPUSH
// result := array ^ element ;
83826: LD_ADDR_VAR 0 3
83830: PUSH
83831: LD_VAR 0 1
83835: PUSH
83836: LD_VAR 0 2
83840: ADD
83841: ST_TO_ADDR
// end ;
83842: LD_VAR 0 3
83846: RET
// export function JoinUnion ( array , element ) ; begin
83847: LD_INT 0
83849: PPUSH
// result := array union element ;
83850: LD_ADDR_VAR 0 3
83854: PUSH
83855: LD_VAR 0 1
83859: PUSH
83860: LD_VAR 0 2
83864: UNION
83865: ST_TO_ADDR
// end ;
83866: LD_VAR 0 3
83870: RET
// export function GetBehemoths ( side ) ; begin
83871: LD_INT 0
83873: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
83874: LD_ADDR_VAR 0 2
83878: PUSH
83879: LD_INT 22
83881: PUSH
83882: LD_VAR 0 1
83886: PUSH
83887: EMPTY
83888: LIST
83889: LIST
83890: PUSH
83891: LD_INT 31
83893: PUSH
83894: LD_INT 25
83896: PUSH
83897: EMPTY
83898: LIST
83899: LIST
83900: PUSH
83901: EMPTY
83902: LIST
83903: LIST
83904: PPUSH
83905: CALL_OW 69
83909: ST_TO_ADDR
// end ;
83910: LD_VAR 0 2
83914: RET
// export function Shuffle ( array ) ; var i , index ; begin
83915: LD_INT 0
83917: PPUSH
83918: PPUSH
83919: PPUSH
// result := [ ] ;
83920: LD_ADDR_VAR 0 2
83924: PUSH
83925: EMPTY
83926: ST_TO_ADDR
// if not array then
83927: LD_VAR 0 1
83931: NOT
83932: IFFALSE 83936
// exit ;
83934: GO 84035
// Randomize ;
83936: CALL_OW 10
// for i = array downto 1 do
83940: LD_ADDR_VAR 0 3
83944: PUSH
83945: DOUBLE
83946: LD_VAR 0 1
83950: INC
83951: ST_TO_ADDR
83952: LD_INT 1
83954: PUSH
83955: FOR_DOWNTO
83956: IFFALSE 84033
// begin index := rand ( 1 , array ) ;
83958: LD_ADDR_VAR 0 4
83962: PUSH
83963: LD_INT 1
83965: PPUSH
83966: LD_VAR 0 1
83970: PPUSH
83971: CALL_OW 12
83975: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
83976: LD_ADDR_VAR 0 2
83980: PUSH
83981: LD_VAR 0 2
83985: PPUSH
83986: LD_VAR 0 2
83990: PUSH
83991: LD_INT 1
83993: PLUS
83994: PPUSH
83995: LD_VAR 0 1
83999: PUSH
84000: LD_VAR 0 4
84004: ARRAY
84005: PPUSH
84006: CALL_OW 2
84010: ST_TO_ADDR
// array := Delete ( array , index ) ;
84011: LD_ADDR_VAR 0 1
84015: PUSH
84016: LD_VAR 0 1
84020: PPUSH
84021: LD_VAR 0 4
84025: PPUSH
84026: CALL_OW 3
84030: ST_TO_ADDR
// end ;
84031: GO 83955
84033: POP
84034: POP
// end ;
84035: LD_VAR 0 2
84039: RET
// export function GetBaseMaterials ( base ) ; begin
84040: LD_INT 0
84042: PPUSH
// result := [ 0 , 0 , 0 ] ;
84043: LD_ADDR_VAR 0 2
84047: PUSH
84048: LD_INT 0
84050: PUSH
84051: LD_INT 0
84053: PUSH
84054: LD_INT 0
84056: PUSH
84057: EMPTY
84058: LIST
84059: LIST
84060: LIST
84061: ST_TO_ADDR
// if not base then
84062: LD_VAR 0 1
84066: NOT
84067: IFFALSE 84071
// exit ;
84069: GO 84120
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
84071: LD_ADDR_VAR 0 2
84075: PUSH
84076: LD_VAR 0 1
84080: PPUSH
84081: LD_INT 1
84083: PPUSH
84084: CALL_OW 275
84088: PUSH
84089: LD_VAR 0 1
84093: PPUSH
84094: LD_INT 2
84096: PPUSH
84097: CALL_OW 275
84101: PUSH
84102: LD_VAR 0 1
84106: PPUSH
84107: LD_INT 3
84109: PPUSH
84110: CALL_OW 275
84114: PUSH
84115: EMPTY
84116: LIST
84117: LIST
84118: LIST
84119: ST_TO_ADDR
// end ;
84120: LD_VAR 0 2
84124: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
84125: LD_INT 0
84127: PPUSH
84128: PPUSH
// result := array ;
84129: LD_ADDR_VAR 0 3
84133: PUSH
84134: LD_VAR 0 1
84138: ST_TO_ADDR
// if size > 0 then
84139: LD_VAR 0 2
84143: PUSH
84144: LD_INT 0
84146: GREATER
84147: IFFALSE 84193
// for i := array downto size do
84149: LD_ADDR_VAR 0 4
84153: PUSH
84154: DOUBLE
84155: LD_VAR 0 1
84159: INC
84160: ST_TO_ADDR
84161: LD_VAR 0 2
84165: PUSH
84166: FOR_DOWNTO
84167: IFFALSE 84191
// result := Delete ( result , result ) ;
84169: LD_ADDR_VAR 0 3
84173: PUSH
84174: LD_VAR 0 3
84178: PPUSH
84179: LD_VAR 0 3
84183: PPUSH
84184: CALL_OW 3
84188: ST_TO_ADDR
84189: GO 84166
84191: POP
84192: POP
// end ;
84193: LD_VAR 0 3
84197: RET
// export function ComExit ( unit ) ; var tmp ; begin
84198: LD_INT 0
84200: PPUSH
84201: PPUSH
// if not IsInUnit ( unit ) then
84202: LD_VAR 0 1
84206: PPUSH
84207: CALL_OW 310
84211: NOT
84212: IFFALSE 84216
// exit ;
84214: GO 84276
// tmp := IsInUnit ( unit ) ;
84216: LD_ADDR_VAR 0 3
84220: PUSH
84221: LD_VAR 0 1
84225: PPUSH
84226: CALL_OW 310
84230: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
84231: LD_VAR 0 3
84235: PPUSH
84236: CALL_OW 247
84240: PUSH
84241: LD_INT 2
84243: EQUAL
84244: IFFALSE 84257
// ComExitVehicle ( unit ) else
84246: LD_VAR 0 1
84250: PPUSH
84251: CALL_OW 121
84255: GO 84266
// ComExitBuilding ( unit ) ;
84257: LD_VAR 0 1
84261: PPUSH
84262: CALL_OW 122
// result := tmp ;
84266: LD_ADDR_VAR 0 2
84270: PUSH
84271: LD_VAR 0 3
84275: ST_TO_ADDR
// end ;
84276: LD_VAR 0 2
84280: RET
// export function ResetHc ; begin
84281: LD_INT 0
84283: PPUSH
// InitHc ;
84284: CALL_OW 19
// hc_importance := 0 ;
84288: LD_ADDR_OWVAR 32
84292: PUSH
84293: LD_INT 0
84295: ST_TO_ADDR
// end ; end_of_file
84296: LD_VAR 0 1
84300: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
84301: LD_INT 0
84303: PPUSH
84304: PPUSH
84305: PPUSH
// if not mc_bases or not skirmish then
84306: LD_EXP 89
84310: NOT
84311: PUSH
84312: LD_EXP 87
84316: NOT
84317: OR
84318: IFFALSE 84322
// exit ;
84320: GO 84487
// for i = 1 to mc_bases do
84322: LD_ADDR_VAR 0 4
84326: PUSH
84327: DOUBLE
84328: LD_INT 1
84330: DEC
84331: ST_TO_ADDR
84332: LD_EXP 89
84336: PUSH
84337: FOR_TO
84338: IFFALSE 84485
// begin if sci in mc_bases [ i ] then
84340: LD_VAR 0 2
84344: PUSH
84345: LD_EXP 89
84349: PUSH
84350: LD_VAR 0 4
84354: ARRAY
84355: IN
84356: IFFALSE 84483
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
84358: LD_ADDR_EXP 118
84362: PUSH
84363: LD_EXP 118
84367: PPUSH
84368: LD_VAR 0 4
84372: PUSH
84373: LD_EXP 118
84377: PUSH
84378: LD_VAR 0 4
84382: ARRAY
84383: PUSH
84384: LD_INT 1
84386: PLUS
84387: PUSH
84388: EMPTY
84389: LIST
84390: LIST
84391: PPUSH
84392: LD_VAR 0 1
84396: PPUSH
84397: CALL 52899 0 3
84401: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
84402: LD_ADDR_VAR 0 5
84406: PUSH
84407: LD_EXP 89
84411: PUSH
84412: LD_VAR 0 4
84416: ARRAY
84417: PPUSH
84418: LD_INT 2
84420: PUSH
84421: LD_INT 30
84423: PUSH
84424: LD_INT 0
84426: PUSH
84427: EMPTY
84428: LIST
84429: LIST
84430: PUSH
84431: LD_INT 30
84433: PUSH
84434: LD_INT 1
84436: PUSH
84437: EMPTY
84438: LIST
84439: LIST
84440: PUSH
84441: EMPTY
84442: LIST
84443: LIST
84444: LIST
84445: PPUSH
84446: CALL_OW 72
84450: PPUSH
84451: LD_VAR 0 1
84455: PPUSH
84456: CALL_OW 74
84460: ST_TO_ADDR
// if tmp then
84461: LD_VAR 0 5
84465: IFFALSE 84481
// ComStandNearbyBuilding ( ape , tmp ) ;
84467: LD_VAR 0 1
84471: PPUSH
84472: LD_VAR 0 5
84476: PPUSH
84477: CALL 49513 0 2
// break ;
84481: GO 84485
// end ; end ;
84483: GO 84337
84485: POP
84486: POP
// end ;
84487: LD_VAR 0 3
84491: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
84492: LD_INT 0
84494: PPUSH
84495: PPUSH
84496: PPUSH
// if not mc_bases or not skirmish then
84497: LD_EXP 89
84501: NOT
84502: PUSH
84503: LD_EXP 87
84507: NOT
84508: OR
84509: IFFALSE 84513
// exit ;
84511: GO 84602
// for i = 1 to mc_bases do
84513: LD_ADDR_VAR 0 4
84517: PUSH
84518: DOUBLE
84519: LD_INT 1
84521: DEC
84522: ST_TO_ADDR
84523: LD_EXP 89
84527: PUSH
84528: FOR_TO
84529: IFFALSE 84600
// begin if building in mc_busy_turret_list [ i ] then
84531: LD_VAR 0 1
84535: PUSH
84536: LD_EXP 99
84540: PUSH
84541: LD_VAR 0 4
84545: ARRAY
84546: IN
84547: IFFALSE 84598
// begin tmp := mc_busy_turret_list [ i ] diff building ;
84549: LD_ADDR_VAR 0 5
84553: PUSH
84554: LD_EXP 99
84558: PUSH
84559: LD_VAR 0 4
84563: ARRAY
84564: PUSH
84565: LD_VAR 0 1
84569: DIFF
84570: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
84571: LD_ADDR_EXP 99
84575: PUSH
84576: LD_EXP 99
84580: PPUSH
84581: LD_VAR 0 4
84585: PPUSH
84586: LD_VAR 0 5
84590: PPUSH
84591: CALL_OW 1
84595: ST_TO_ADDR
// break ;
84596: GO 84600
// end ; end ;
84598: GO 84528
84600: POP
84601: POP
// end ;
84602: LD_VAR 0 3
84606: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
84607: LD_INT 0
84609: PPUSH
84610: PPUSH
84611: PPUSH
// if not mc_bases or not skirmish then
84612: LD_EXP 89
84616: NOT
84617: PUSH
84618: LD_EXP 87
84622: NOT
84623: OR
84624: IFFALSE 84628
// exit ;
84626: GO 84827
// for i = 1 to mc_bases do
84628: LD_ADDR_VAR 0 5
84632: PUSH
84633: DOUBLE
84634: LD_INT 1
84636: DEC
84637: ST_TO_ADDR
84638: LD_EXP 89
84642: PUSH
84643: FOR_TO
84644: IFFALSE 84825
// if building in mc_bases [ i ] then
84646: LD_VAR 0 1
84650: PUSH
84651: LD_EXP 89
84655: PUSH
84656: LD_VAR 0 5
84660: ARRAY
84661: IN
84662: IFFALSE 84823
// begin tmp := mc_bases [ i ] diff building ;
84664: LD_ADDR_VAR 0 6
84668: PUSH
84669: LD_EXP 89
84673: PUSH
84674: LD_VAR 0 5
84678: ARRAY
84679: PUSH
84680: LD_VAR 0 1
84684: DIFF
84685: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
84686: LD_ADDR_EXP 89
84690: PUSH
84691: LD_EXP 89
84695: PPUSH
84696: LD_VAR 0 5
84700: PPUSH
84701: LD_VAR 0 6
84705: PPUSH
84706: CALL_OW 1
84710: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
84711: LD_VAR 0 1
84715: PUSH
84716: LD_EXP 97
84720: PUSH
84721: LD_VAR 0 5
84725: ARRAY
84726: IN
84727: IFFALSE 84766
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
84729: LD_ADDR_EXP 97
84733: PUSH
84734: LD_EXP 97
84738: PPUSH
84739: LD_VAR 0 5
84743: PPUSH
84744: LD_EXP 97
84748: PUSH
84749: LD_VAR 0 5
84753: ARRAY
84754: PUSH
84755: LD_VAR 0 1
84759: DIFF
84760: PPUSH
84761: CALL_OW 1
84765: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
84766: LD_VAR 0 1
84770: PUSH
84771: LD_EXP 98
84775: PUSH
84776: LD_VAR 0 5
84780: ARRAY
84781: IN
84782: IFFALSE 84821
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
84784: LD_ADDR_EXP 98
84788: PUSH
84789: LD_EXP 98
84793: PPUSH
84794: LD_VAR 0 5
84798: PPUSH
84799: LD_EXP 98
84803: PUSH
84804: LD_VAR 0 5
84808: ARRAY
84809: PUSH
84810: LD_VAR 0 1
84814: DIFF
84815: PPUSH
84816: CALL_OW 1
84820: ST_TO_ADDR
// break ;
84821: GO 84825
// end ;
84823: GO 84643
84825: POP
84826: POP
// end ;
84827: LD_VAR 0 4
84831: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
84832: LD_INT 0
84834: PPUSH
84835: PPUSH
84836: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
84837: LD_EXP 89
84841: NOT
84842: PUSH
84843: LD_EXP 87
84847: NOT
84848: OR
84849: PUSH
84850: LD_VAR 0 3
84854: PUSH
84855: LD_EXP 115
84859: IN
84860: NOT
84861: OR
84862: IFFALSE 84866
// exit ;
84864: GO 84989
// for i = 1 to mc_vehicles do
84866: LD_ADDR_VAR 0 6
84870: PUSH
84871: DOUBLE
84872: LD_INT 1
84874: DEC
84875: ST_TO_ADDR
84876: LD_EXP 108
84880: PUSH
84881: FOR_TO
84882: IFFALSE 84987
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
84884: LD_VAR 0 2
84888: PUSH
84889: LD_EXP 108
84893: PUSH
84894: LD_VAR 0 6
84898: ARRAY
84899: IN
84900: PUSH
84901: LD_VAR 0 1
84905: PUSH
84906: LD_EXP 108
84910: PUSH
84911: LD_VAR 0 6
84915: ARRAY
84916: IN
84917: OR
84918: IFFALSE 84985
// begin tmp := mc_vehicles [ i ] diff old ;
84920: LD_ADDR_VAR 0 7
84924: PUSH
84925: LD_EXP 108
84929: PUSH
84930: LD_VAR 0 6
84934: ARRAY
84935: PUSH
84936: LD_VAR 0 2
84940: DIFF
84941: ST_TO_ADDR
// tmp := tmp diff new ;
84942: LD_ADDR_VAR 0 7
84946: PUSH
84947: LD_VAR 0 7
84951: PUSH
84952: LD_VAR 0 1
84956: DIFF
84957: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
84958: LD_ADDR_EXP 108
84962: PUSH
84963: LD_EXP 108
84967: PPUSH
84968: LD_VAR 0 6
84972: PPUSH
84973: LD_VAR 0 7
84977: PPUSH
84978: CALL_OW 1
84982: ST_TO_ADDR
// break ;
84983: GO 84987
// end ;
84985: GO 84881
84987: POP
84988: POP
// end ;
84989: LD_VAR 0 5
84993: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
84994: LD_INT 0
84996: PPUSH
84997: PPUSH
84998: PPUSH
84999: PPUSH
// if not mc_bases or not skirmish then
85000: LD_EXP 89
85004: NOT
85005: PUSH
85006: LD_EXP 87
85010: NOT
85011: OR
85012: IFFALSE 85016
// exit ;
85014: GO 85393
// side := GetSide ( vehicle ) ;
85016: LD_ADDR_VAR 0 5
85020: PUSH
85021: LD_VAR 0 1
85025: PPUSH
85026: CALL_OW 255
85030: ST_TO_ADDR
// for i = 1 to mc_bases do
85031: LD_ADDR_VAR 0 4
85035: PUSH
85036: DOUBLE
85037: LD_INT 1
85039: DEC
85040: ST_TO_ADDR
85041: LD_EXP 89
85045: PUSH
85046: FOR_TO
85047: IFFALSE 85391
// begin if factory in mc_bases [ i ] then
85049: LD_VAR 0 2
85053: PUSH
85054: LD_EXP 89
85058: PUSH
85059: LD_VAR 0 4
85063: ARRAY
85064: IN
85065: IFFALSE 85389
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
85067: LD_EXP 111
85071: PUSH
85072: LD_VAR 0 4
85076: ARRAY
85077: PUSH
85078: LD_EXP 100
85082: PUSH
85083: LD_VAR 0 4
85087: ARRAY
85088: LESS
85089: PUSH
85090: LD_VAR 0 1
85094: PPUSH
85095: CALL_OW 264
85099: PUSH
85100: LD_INT 31
85102: PUSH
85103: LD_INT 32
85105: PUSH
85106: LD_INT 51
85108: PUSH
85109: LD_EXP 133
85113: PUSH
85114: LD_INT 12
85116: PUSH
85117: LD_INT 30
85119: PUSH
85120: LD_EXP 132
85124: PUSH
85125: LD_INT 11
85127: PUSH
85128: LD_INT 53
85130: PUSH
85131: LD_INT 14
85133: PUSH
85134: LD_EXP 136
85138: PUSH
85139: LD_INT 29
85141: PUSH
85142: LD_EXP 134
85146: PUSH
85147: LD_INT 13
85149: PUSH
85150: LD_INT 52
85152: PUSH
85153: LD_INT 48
85155: PUSH
85156: LD_INT 8
85158: PUSH
85159: EMPTY
85160: LIST
85161: LIST
85162: LIST
85163: LIST
85164: LIST
85165: LIST
85166: LIST
85167: LIST
85168: LIST
85169: LIST
85170: LIST
85171: LIST
85172: LIST
85173: LIST
85174: LIST
85175: LIST
85176: LIST
85177: IN
85178: NOT
85179: AND
85180: IFFALSE 85228
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
85182: LD_ADDR_EXP 111
85186: PUSH
85187: LD_EXP 111
85191: PPUSH
85192: LD_VAR 0 4
85196: PUSH
85197: LD_EXP 111
85201: PUSH
85202: LD_VAR 0 4
85206: ARRAY
85207: PUSH
85208: LD_INT 1
85210: PLUS
85211: PUSH
85212: EMPTY
85213: LIST
85214: LIST
85215: PPUSH
85216: LD_VAR 0 1
85220: PPUSH
85221: CALL 52899 0 3
85225: ST_TO_ADDR
85226: GO 85272
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
85228: LD_ADDR_EXP 108
85232: PUSH
85233: LD_EXP 108
85237: PPUSH
85238: LD_VAR 0 4
85242: PUSH
85243: LD_EXP 108
85247: PUSH
85248: LD_VAR 0 4
85252: ARRAY
85253: PUSH
85254: LD_INT 1
85256: PLUS
85257: PUSH
85258: EMPTY
85259: LIST
85260: LIST
85261: PPUSH
85262: LD_VAR 0 1
85266: PPUSH
85267: CALL 52899 0 3
85271: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
85272: LD_VAR 0 1
85276: PPUSH
85277: CALL_OW 263
85281: PUSH
85282: LD_INT 2
85284: EQUAL
85285: IFFALSE 85305
// begin repeat wait ( 0 0$1 ) ;
85287: LD_INT 35
85289: PPUSH
85290: CALL_OW 67
// until IsControledBy ( vehicle ) ;
85294: LD_VAR 0 1
85298: PPUSH
85299: CALL_OW 312
85303: IFFALSE 85287
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
85305: LD_VAR 0 1
85309: PPUSH
85310: LD_EXP 113
85314: PUSH
85315: LD_VAR 0 4
85319: ARRAY
85320: PPUSH
85321: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
85325: LD_VAR 0 1
85329: PPUSH
85330: CALL_OW 263
85334: PUSH
85335: LD_INT 1
85337: NONEQUAL
85338: IFFALSE 85342
// break ;
85340: GO 85391
// repeat wait ( 0 0$1 ) ;
85342: LD_INT 35
85344: PPUSH
85345: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
85349: LD_VAR 0 1
85353: PPUSH
85354: LD_EXP 113
85358: PUSH
85359: LD_VAR 0 4
85363: ARRAY
85364: PPUSH
85365: CALL_OW 308
85369: IFFALSE 85342
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
85371: LD_VAR 0 1
85375: PPUSH
85376: CALL_OW 311
85380: PPUSH
85381: CALL_OW 121
// exit ;
85385: POP
85386: POP
85387: GO 85393
// end ; end ;
85389: GO 85046
85391: POP
85392: POP
// end ;
85393: LD_VAR 0 3
85397: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
85398: LD_INT 0
85400: PPUSH
85401: PPUSH
85402: PPUSH
85403: PPUSH
// if not mc_bases or not skirmish then
85404: LD_EXP 89
85408: NOT
85409: PUSH
85410: LD_EXP 87
85414: NOT
85415: OR
85416: IFFALSE 85420
// exit ;
85418: GO 85773
// repeat wait ( 0 0$1 ) ;
85420: LD_INT 35
85422: PPUSH
85423: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
85427: LD_VAR 0 2
85431: PPUSH
85432: LD_VAR 0 3
85436: PPUSH
85437: CALL_OW 284
85441: IFFALSE 85420
// if GetResourceTypeXY ( x , y ) = mat_artefact then
85443: LD_VAR 0 2
85447: PPUSH
85448: LD_VAR 0 3
85452: PPUSH
85453: CALL_OW 283
85457: PUSH
85458: LD_INT 4
85460: EQUAL
85461: IFFALSE 85465
// exit ;
85463: GO 85773
// for i = 1 to mc_bases do
85465: LD_ADDR_VAR 0 7
85469: PUSH
85470: DOUBLE
85471: LD_INT 1
85473: DEC
85474: ST_TO_ADDR
85475: LD_EXP 89
85479: PUSH
85480: FOR_TO
85481: IFFALSE 85771
// begin if mc_crates_area [ i ] then
85483: LD_EXP 107
85487: PUSH
85488: LD_VAR 0 7
85492: ARRAY
85493: IFFALSE 85604
// for j in mc_crates_area [ i ] do
85495: LD_ADDR_VAR 0 8
85499: PUSH
85500: LD_EXP 107
85504: PUSH
85505: LD_VAR 0 7
85509: ARRAY
85510: PUSH
85511: FOR_IN
85512: IFFALSE 85602
// if InArea ( x , y , j ) then
85514: LD_VAR 0 2
85518: PPUSH
85519: LD_VAR 0 3
85523: PPUSH
85524: LD_VAR 0 8
85528: PPUSH
85529: CALL_OW 309
85533: IFFALSE 85600
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
85535: LD_ADDR_EXP 105
85539: PUSH
85540: LD_EXP 105
85544: PPUSH
85545: LD_VAR 0 7
85549: PUSH
85550: LD_EXP 105
85554: PUSH
85555: LD_VAR 0 7
85559: ARRAY
85560: PUSH
85561: LD_INT 1
85563: PLUS
85564: PUSH
85565: EMPTY
85566: LIST
85567: LIST
85568: PPUSH
85569: LD_VAR 0 4
85573: PUSH
85574: LD_VAR 0 2
85578: PUSH
85579: LD_VAR 0 3
85583: PUSH
85584: EMPTY
85585: LIST
85586: LIST
85587: LIST
85588: PPUSH
85589: CALL 52899 0 3
85593: ST_TO_ADDR
// exit ;
85594: POP
85595: POP
85596: POP
85597: POP
85598: GO 85773
// end ;
85600: GO 85511
85602: POP
85603: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
85604: LD_ADDR_VAR 0 9
85608: PUSH
85609: LD_EXP 89
85613: PUSH
85614: LD_VAR 0 7
85618: ARRAY
85619: PPUSH
85620: LD_INT 2
85622: PUSH
85623: LD_INT 30
85625: PUSH
85626: LD_INT 0
85628: PUSH
85629: EMPTY
85630: LIST
85631: LIST
85632: PUSH
85633: LD_INT 30
85635: PUSH
85636: LD_INT 1
85638: PUSH
85639: EMPTY
85640: LIST
85641: LIST
85642: PUSH
85643: EMPTY
85644: LIST
85645: LIST
85646: LIST
85647: PPUSH
85648: CALL_OW 72
85652: ST_TO_ADDR
// if not depot then
85653: LD_VAR 0 9
85657: NOT
85658: IFFALSE 85662
// continue ;
85660: GO 85480
// for j in depot do
85662: LD_ADDR_VAR 0 8
85666: PUSH
85667: LD_VAR 0 9
85671: PUSH
85672: FOR_IN
85673: IFFALSE 85767
// if GetDistUnitXY ( j , x , y ) < 30 then
85675: LD_VAR 0 8
85679: PPUSH
85680: LD_VAR 0 2
85684: PPUSH
85685: LD_VAR 0 3
85689: PPUSH
85690: CALL_OW 297
85694: PUSH
85695: LD_INT 30
85697: LESS
85698: IFFALSE 85765
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
85700: LD_ADDR_EXP 105
85704: PUSH
85705: LD_EXP 105
85709: PPUSH
85710: LD_VAR 0 7
85714: PUSH
85715: LD_EXP 105
85719: PUSH
85720: LD_VAR 0 7
85724: ARRAY
85725: PUSH
85726: LD_INT 1
85728: PLUS
85729: PUSH
85730: EMPTY
85731: LIST
85732: LIST
85733: PPUSH
85734: LD_VAR 0 4
85738: PUSH
85739: LD_VAR 0 2
85743: PUSH
85744: LD_VAR 0 3
85748: PUSH
85749: EMPTY
85750: LIST
85751: LIST
85752: LIST
85753: PPUSH
85754: CALL 52899 0 3
85758: ST_TO_ADDR
// exit ;
85759: POP
85760: POP
85761: POP
85762: POP
85763: GO 85773
// end ;
85765: GO 85672
85767: POP
85768: POP
// end ;
85769: GO 85480
85771: POP
85772: POP
// end ;
85773: LD_VAR 0 6
85777: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
85778: LD_INT 0
85780: PPUSH
85781: PPUSH
85782: PPUSH
85783: PPUSH
// if not mc_bases or not skirmish then
85784: LD_EXP 89
85788: NOT
85789: PUSH
85790: LD_EXP 87
85794: NOT
85795: OR
85796: IFFALSE 85800
// exit ;
85798: GO 86077
// side := GetSide ( lab ) ;
85800: LD_ADDR_VAR 0 4
85804: PUSH
85805: LD_VAR 0 2
85809: PPUSH
85810: CALL_OW 255
85814: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
85815: LD_VAR 0 4
85819: PUSH
85820: LD_EXP 115
85824: IN
85825: NOT
85826: PUSH
85827: LD_EXP 116
85831: NOT
85832: OR
85833: PUSH
85834: LD_EXP 89
85838: NOT
85839: OR
85840: IFFALSE 85844
// exit ;
85842: GO 86077
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
85844: LD_ADDR_EXP 116
85848: PUSH
85849: LD_EXP 116
85853: PPUSH
85854: LD_VAR 0 4
85858: PPUSH
85859: LD_EXP 116
85863: PUSH
85864: LD_VAR 0 4
85868: ARRAY
85869: PUSH
85870: LD_VAR 0 1
85874: DIFF
85875: PPUSH
85876: CALL_OW 1
85880: ST_TO_ADDR
// for i = 1 to mc_bases do
85881: LD_ADDR_VAR 0 5
85885: PUSH
85886: DOUBLE
85887: LD_INT 1
85889: DEC
85890: ST_TO_ADDR
85891: LD_EXP 89
85895: PUSH
85896: FOR_TO
85897: IFFALSE 86075
// begin if lab in mc_bases [ i ] then
85899: LD_VAR 0 2
85903: PUSH
85904: LD_EXP 89
85908: PUSH
85909: LD_VAR 0 5
85913: ARRAY
85914: IN
85915: IFFALSE 86073
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
85917: LD_VAR 0 1
85921: PUSH
85922: LD_INT 11
85924: PUSH
85925: LD_INT 4
85927: PUSH
85928: LD_INT 3
85930: PUSH
85931: LD_INT 2
85933: PUSH
85934: EMPTY
85935: LIST
85936: LIST
85937: LIST
85938: LIST
85939: IN
85940: PUSH
85941: LD_EXP 119
85945: PUSH
85946: LD_VAR 0 5
85950: ARRAY
85951: AND
85952: IFFALSE 86073
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
85954: LD_ADDR_VAR 0 6
85958: PUSH
85959: LD_EXP 119
85963: PUSH
85964: LD_VAR 0 5
85968: ARRAY
85969: PUSH
85970: LD_INT 1
85972: ARRAY
85973: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
85974: LD_ADDR_EXP 119
85978: PUSH
85979: LD_EXP 119
85983: PPUSH
85984: LD_VAR 0 5
85988: PPUSH
85989: EMPTY
85990: PPUSH
85991: CALL_OW 1
85995: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
85996: LD_VAR 0 6
86000: PPUSH
86001: LD_INT 0
86003: PPUSH
86004: CALL_OW 109
// ComExitBuilding ( tmp ) ;
86008: LD_VAR 0 6
86012: PPUSH
86013: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
86017: LD_ADDR_EXP 118
86021: PUSH
86022: LD_EXP 118
86026: PPUSH
86027: LD_VAR 0 5
86031: PPUSH
86032: LD_EXP 118
86036: PUSH
86037: LD_VAR 0 5
86041: ARRAY
86042: PPUSH
86043: LD_INT 1
86045: PPUSH
86046: LD_VAR 0 6
86050: PPUSH
86051: CALL_OW 2
86055: PPUSH
86056: CALL_OW 1
86060: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
86061: LD_VAR 0 5
86065: PPUSH
86066: LD_INT 112
86068: PPUSH
86069: CALL 26741 0 2
// end ; end ; end ;
86073: GO 85896
86075: POP
86076: POP
// end ;
86077: LD_VAR 0 3
86081: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
86082: LD_INT 0
86084: PPUSH
86085: PPUSH
86086: PPUSH
86087: PPUSH
86088: PPUSH
86089: PPUSH
86090: PPUSH
86091: PPUSH
// if not mc_bases or not skirmish then
86092: LD_EXP 89
86096: NOT
86097: PUSH
86098: LD_EXP 87
86102: NOT
86103: OR
86104: IFFALSE 86108
// exit ;
86106: GO 87479
// for i = 1 to mc_bases do
86108: LD_ADDR_VAR 0 3
86112: PUSH
86113: DOUBLE
86114: LD_INT 1
86116: DEC
86117: ST_TO_ADDR
86118: LD_EXP 89
86122: PUSH
86123: FOR_TO
86124: IFFALSE 87477
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
86126: LD_VAR 0 1
86130: PUSH
86131: LD_EXP 89
86135: PUSH
86136: LD_VAR 0 3
86140: ARRAY
86141: IN
86142: PUSH
86143: LD_VAR 0 1
86147: PUSH
86148: LD_EXP 96
86152: PUSH
86153: LD_VAR 0 3
86157: ARRAY
86158: IN
86159: OR
86160: PUSH
86161: LD_VAR 0 1
86165: PUSH
86166: LD_EXP 111
86170: PUSH
86171: LD_VAR 0 3
86175: ARRAY
86176: IN
86177: OR
86178: PUSH
86179: LD_VAR 0 1
86183: PUSH
86184: LD_EXP 108
86188: PUSH
86189: LD_VAR 0 3
86193: ARRAY
86194: IN
86195: OR
86196: PUSH
86197: LD_VAR 0 1
86201: PUSH
86202: LD_EXP 118
86206: PUSH
86207: LD_VAR 0 3
86211: ARRAY
86212: IN
86213: OR
86214: PUSH
86215: LD_VAR 0 1
86219: PUSH
86220: LD_EXP 119
86224: PUSH
86225: LD_VAR 0 3
86229: ARRAY
86230: IN
86231: OR
86232: IFFALSE 87475
// begin if un in mc_ape [ i ] then
86234: LD_VAR 0 1
86238: PUSH
86239: LD_EXP 118
86243: PUSH
86244: LD_VAR 0 3
86248: ARRAY
86249: IN
86250: IFFALSE 86289
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
86252: LD_ADDR_EXP 118
86256: PUSH
86257: LD_EXP 118
86261: PPUSH
86262: LD_VAR 0 3
86266: PPUSH
86267: LD_EXP 118
86271: PUSH
86272: LD_VAR 0 3
86276: ARRAY
86277: PUSH
86278: LD_VAR 0 1
86282: DIFF
86283: PPUSH
86284: CALL_OW 1
86288: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
86289: LD_VAR 0 1
86293: PUSH
86294: LD_EXP 119
86298: PUSH
86299: LD_VAR 0 3
86303: ARRAY
86304: IN
86305: IFFALSE 86329
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
86307: LD_ADDR_EXP 119
86311: PUSH
86312: LD_EXP 119
86316: PPUSH
86317: LD_VAR 0 3
86321: PPUSH
86322: EMPTY
86323: PPUSH
86324: CALL_OW 1
86328: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
86329: LD_VAR 0 1
86333: PPUSH
86334: CALL_OW 247
86338: PUSH
86339: LD_INT 2
86341: EQUAL
86342: PUSH
86343: LD_VAR 0 1
86347: PPUSH
86348: CALL_OW 110
86352: PUSH
86353: LD_INT 20
86355: EQUAL
86356: PUSH
86357: LD_VAR 0 1
86361: PUSH
86362: LD_EXP 111
86366: PUSH
86367: LD_VAR 0 3
86371: ARRAY
86372: IN
86373: OR
86374: PUSH
86375: LD_VAR 0 1
86379: PPUSH
86380: CALL_OW 264
86384: PUSH
86385: LD_INT 12
86387: PUSH
86388: LD_INT 51
86390: PUSH
86391: LD_EXP 133
86395: PUSH
86396: LD_INT 32
86398: PUSH
86399: LD_INT 13
86401: PUSH
86402: LD_INT 52
86404: PUSH
86405: LD_INT 31
86407: PUSH
86408: EMPTY
86409: LIST
86410: LIST
86411: LIST
86412: LIST
86413: LIST
86414: LIST
86415: LIST
86416: IN
86417: OR
86418: AND
86419: IFFALSE 86727
// begin if un in mc_defender [ i ] then
86421: LD_VAR 0 1
86425: PUSH
86426: LD_EXP 111
86430: PUSH
86431: LD_VAR 0 3
86435: ARRAY
86436: IN
86437: IFFALSE 86476
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
86439: LD_ADDR_EXP 111
86443: PUSH
86444: LD_EXP 111
86448: PPUSH
86449: LD_VAR 0 3
86453: PPUSH
86454: LD_EXP 111
86458: PUSH
86459: LD_VAR 0 3
86463: ARRAY
86464: PUSH
86465: LD_VAR 0 1
86469: DIFF
86470: PPUSH
86471: CALL_OW 1
86475: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
86476: LD_ADDR_VAR 0 8
86480: PUSH
86481: LD_VAR 0 3
86485: PPUSH
86486: LD_INT 3
86488: PPUSH
86489: CALL 46797 0 2
86493: ST_TO_ADDR
// if fac then
86494: LD_VAR 0 8
86498: IFFALSE 86727
// begin for j in fac do
86500: LD_ADDR_VAR 0 4
86504: PUSH
86505: LD_VAR 0 8
86509: PUSH
86510: FOR_IN
86511: IFFALSE 86725
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
86513: LD_ADDR_VAR 0 9
86517: PUSH
86518: LD_VAR 0 8
86522: PPUSH
86523: LD_VAR 0 1
86527: PPUSH
86528: CALL_OW 265
86532: PPUSH
86533: LD_VAR 0 1
86537: PPUSH
86538: CALL_OW 262
86542: PPUSH
86543: LD_VAR 0 1
86547: PPUSH
86548: CALL_OW 263
86552: PPUSH
86553: LD_VAR 0 1
86557: PPUSH
86558: CALL_OW 264
86562: PPUSH
86563: CALL 50431 0 5
86567: ST_TO_ADDR
// if components then
86568: LD_VAR 0 9
86572: IFFALSE 86723
// begin if GetWeapon ( un ) = ar_control_tower then
86574: LD_VAR 0 1
86578: PPUSH
86579: CALL_OW 264
86583: PUSH
86584: LD_INT 31
86586: EQUAL
86587: IFFALSE 86704
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
86589: LD_VAR 0 1
86593: PPUSH
86594: CALL_OW 311
86598: PPUSH
86599: LD_INT 0
86601: PPUSH
86602: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
86606: LD_ADDR_EXP 129
86610: PUSH
86611: LD_EXP 129
86615: PPUSH
86616: LD_VAR 0 3
86620: PPUSH
86621: LD_EXP 129
86625: PUSH
86626: LD_VAR 0 3
86630: ARRAY
86631: PUSH
86632: LD_VAR 0 1
86636: PPUSH
86637: CALL_OW 311
86641: DIFF
86642: PPUSH
86643: CALL_OW 1
86647: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
86648: LD_ADDR_VAR 0 7
86652: PUSH
86653: LD_EXP 110
86657: PUSH
86658: LD_VAR 0 3
86662: ARRAY
86663: PPUSH
86664: LD_INT 1
86666: PPUSH
86667: LD_VAR 0 9
86671: PPUSH
86672: CALL_OW 2
86676: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
86677: LD_ADDR_EXP 110
86681: PUSH
86682: LD_EXP 110
86686: PPUSH
86687: LD_VAR 0 3
86691: PPUSH
86692: LD_VAR 0 7
86696: PPUSH
86697: CALL_OW 1
86701: ST_TO_ADDR
// end else
86702: GO 86721
// MC_InsertProduceList ( i , [ components ] ) ;
86704: LD_VAR 0 3
86708: PPUSH
86709: LD_VAR 0 9
86713: PUSH
86714: EMPTY
86715: LIST
86716: PPUSH
86717: CALL 46342 0 2
// break ;
86721: GO 86725
// end ; end ;
86723: GO 86510
86725: POP
86726: POP
// end ; end ; if GetType ( un ) = unit_building then
86727: LD_VAR 0 1
86731: PPUSH
86732: CALL_OW 247
86736: PUSH
86737: LD_INT 3
86739: EQUAL
86740: IFFALSE 87143
// begin btype := GetBType ( un ) ;
86742: LD_ADDR_VAR 0 5
86746: PUSH
86747: LD_VAR 0 1
86751: PPUSH
86752: CALL_OW 266
86756: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
86757: LD_VAR 0 5
86761: PUSH
86762: LD_INT 29
86764: PUSH
86765: LD_INT 30
86767: PUSH
86768: EMPTY
86769: LIST
86770: LIST
86771: IN
86772: IFFALSE 86845
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
86774: LD_VAR 0 1
86778: PPUSH
86779: CALL_OW 250
86783: PPUSH
86784: LD_VAR 0 1
86788: PPUSH
86789: CALL_OW 251
86793: PPUSH
86794: LD_VAR 0 1
86798: PPUSH
86799: CALL_OW 255
86803: PPUSH
86804: CALL_OW 440
86808: NOT
86809: IFFALSE 86845
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
86811: LD_VAR 0 1
86815: PPUSH
86816: CALL_OW 250
86820: PPUSH
86821: LD_VAR 0 1
86825: PPUSH
86826: CALL_OW 251
86830: PPUSH
86831: LD_VAR 0 1
86835: PPUSH
86836: CALL_OW 255
86840: PPUSH
86841: CALL_OW 441
// end ; if btype = b_warehouse then
86845: LD_VAR 0 5
86849: PUSH
86850: LD_INT 1
86852: EQUAL
86853: IFFALSE 86871
// begin btype := b_depot ;
86855: LD_ADDR_VAR 0 5
86859: PUSH
86860: LD_INT 0
86862: ST_TO_ADDR
// pos := 1 ;
86863: LD_ADDR_VAR 0 6
86867: PUSH
86868: LD_INT 1
86870: ST_TO_ADDR
// end ; if btype = b_factory then
86871: LD_VAR 0 5
86875: PUSH
86876: LD_INT 3
86878: EQUAL
86879: IFFALSE 86897
// begin btype := b_workshop ;
86881: LD_ADDR_VAR 0 5
86885: PUSH
86886: LD_INT 2
86888: ST_TO_ADDR
// pos := 1 ;
86889: LD_ADDR_VAR 0 6
86893: PUSH
86894: LD_INT 1
86896: ST_TO_ADDR
// end ; if btype = b_barracks then
86897: LD_VAR 0 5
86901: PUSH
86902: LD_INT 5
86904: EQUAL
86905: IFFALSE 86915
// btype := b_armoury ;
86907: LD_ADDR_VAR 0 5
86911: PUSH
86912: LD_INT 4
86914: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
86915: LD_VAR 0 5
86919: PUSH
86920: LD_INT 7
86922: PUSH
86923: LD_INT 8
86925: PUSH
86926: EMPTY
86927: LIST
86928: LIST
86929: IN
86930: IFFALSE 86940
// btype := b_lab ;
86932: LD_ADDR_VAR 0 5
86936: PUSH
86937: LD_INT 6
86939: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
86940: LD_ADDR_EXP 94
86944: PUSH
86945: LD_EXP 94
86949: PPUSH
86950: LD_VAR 0 3
86954: PUSH
86955: LD_EXP 94
86959: PUSH
86960: LD_VAR 0 3
86964: ARRAY
86965: PUSH
86966: LD_INT 1
86968: PLUS
86969: PUSH
86970: EMPTY
86971: LIST
86972: LIST
86973: PPUSH
86974: LD_VAR 0 5
86978: PUSH
86979: LD_VAR 0 1
86983: PPUSH
86984: CALL_OW 250
86988: PUSH
86989: LD_VAR 0 1
86993: PPUSH
86994: CALL_OW 251
86998: PUSH
86999: LD_VAR 0 1
87003: PPUSH
87004: CALL_OW 254
87008: PUSH
87009: EMPTY
87010: LIST
87011: LIST
87012: LIST
87013: LIST
87014: PPUSH
87015: CALL 52899 0 3
87019: ST_TO_ADDR
// if pos = 1 then
87020: LD_VAR 0 6
87024: PUSH
87025: LD_INT 1
87027: EQUAL
87028: IFFALSE 87143
// begin tmp := mc_build_list [ i ] ;
87030: LD_ADDR_VAR 0 7
87034: PUSH
87035: LD_EXP 94
87039: PUSH
87040: LD_VAR 0 3
87044: ARRAY
87045: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
87046: LD_VAR 0 7
87050: PPUSH
87051: LD_INT 2
87053: PUSH
87054: LD_INT 30
87056: PUSH
87057: LD_INT 0
87059: PUSH
87060: EMPTY
87061: LIST
87062: LIST
87063: PUSH
87064: LD_INT 30
87066: PUSH
87067: LD_INT 1
87069: PUSH
87070: EMPTY
87071: LIST
87072: LIST
87073: PUSH
87074: EMPTY
87075: LIST
87076: LIST
87077: LIST
87078: PPUSH
87079: CALL_OW 72
87083: IFFALSE 87093
// pos := 2 ;
87085: LD_ADDR_VAR 0 6
87089: PUSH
87090: LD_INT 2
87092: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
87093: LD_ADDR_VAR 0 7
87097: PUSH
87098: LD_VAR 0 7
87102: PPUSH
87103: LD_VAR 0 6
87107: PPUSH
87108: LD_VAR 0 7
87112: PPUSH
87113: CALL 53225 0 3
87117: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
87118: LD_ADDR_EXP 94
87122: PUSH
87123: LD_EXP 94
87127: PPUSH
87128: LD_VAR 0 3
87132: PPUSH
87133: LD_VAR 0 7
87137: PPUSH
87138: CALL_OW 1
87142: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
87143: LD_VAR 0 1
87147: PUSH
87148: LD_EXP 89
87152: PUSH
87153: LD_VAR 0 3
87157: ARRAY
87158: IN
87159: IFFALSE 87198
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
87161: LD_ADDR_EXP 89
87165: PUSH
87166: LD_EXP 89
87170: PPUSH
87171: LD_VAR 0 3
87175: PPUSH
87176: LD_EXP 89
87180: PUSH
87181: LD_VAR 0 3
87185: ARRAY
87186: PUSH
87187: LD_VAR 0 1
87191: DIFF
87192: PPUSH
87193: CALL_OW 1
87197: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
87198: LD_VAR 0 1
87202: PUSH
87203: LD_EXP 96
87207: PUSH
87208: LD_VAR 0 3
87212: ARRAY
87213: IN
87214: IFFALSE 87253
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
87216: LD_ADDR_EXP 96
87220: PUSH
87221: LD_EXP 96
87225: PPUSH
87226: LD_VAR 0 3
87230: PPUSH
87231: LD_EXP 96
87235: PUSH
87236: LD_VAR 0 3
87240: ARRAY
87241: PUSH
87242: LD_VAR 0 1
87246: DIFF
87247: PPUSH
87248: CALL_OW 1
87252: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
87253: LD_VAR 0 1
87257: PUSH
87258: LD_EXP 108
87262: PUSH
87263: LD_VAR 0 3
87267: ARRAY
87268: IN
87269: IFFALSE 87308
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
87271: LD_ADDR_EXP 108
87275: PUSH
87276: LD_EXP 108
87280: PPUSH
87281: LD_VAR 0 3
87285: PPUSH
87286: LD_EXP 108
87290: PUSH
87291: LD_VAR 0 3
87295: ARRAY
87296: PUSH
87297: LD_VAR 0 1
87301: DIFF
87302: PPUSH
87303: CALL_OW 1
87307: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
87308: LD_VAR 0 1
87312: PUSH
87313: LD_EXP 111
87317: PUSH
87318: LD_VAR 0 3
87322: ARRAY
87323: IN
87324: IFFALSE 87363
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
87326: LD_ADDR_EXP 111
87330: PUSH
87331: LD_EXP 111
87335: PPUSH
87336: LD_VAR 0 3
87340: PPUSH
87341: LD_EXP 111
87345: PUSH
87346: LD_VAR 0 3
87350: ARRAY
87351: PUSH
87352: LD_VAR 0 1
87356: DIFF
87357: PPUSH
87358: CALL_OW 1
87362: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
87363: LD_VAR 0 1
87367: PUSH
87368: LD_EXP 98
87372: PUSH
87373: LD_VAR 0 3
87377: ARRAY
87378: IN
87379: IFFALSE 87418
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
87381: LD_ADDR_EXP 98
87385: PUSH
87386: LD_EXP 98
87390: PPUSH
87391: LD_VAR 0 3
87395: PPUSH
87396: LD_EXP 98
87400: PUSH
87401: LD_VAR 0 3
87405: ARRAY
87406: PUSH
87407: LD_VAR 0 1
87411: DIFF
87412: PPUSH
87413: CALL_OW 1
87417: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
87418: LD_VAR 0 1
87422: PUSH
87423: LD_EXP 97
87427: PUSH
87428: LD_VAR 0 3
87432: ARRAY
87433: IN
87434: IFFALSE 87473
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
87436: LD_ADDR_EXP 97
87440: PUSH
87441: LD_EXP 97
87445: PPUSH
87446: LD_VAR 0 3
87450: PPUSH
87451: LD_EXP 97
87455: PUSH
87456: LD_VAR 0 3
87460: ARRAY
87461: PUSH
87462: LD_VAR 0 1
87466: DIFF
87467: PPUSH
87468: CALL_OW 1
87472: ST_TO_ADDR
// end ; break ;
87473: GO 87477
// end ;
87475: GO 86123
87477: POP
87478: POP
// end ;
87479: LD_VAR 0 2
87483: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
87484: LD_INT 0
87486: PPUSH
87487: PPUSH
87488: PPUSH
// if not mc_bases or not skirmish then
87489: LD_EXP 89
87493: NOT
87494: PUSH
87495: LD_EXP 87
87499: NOT
87500: OR
87501: IFFALSE 87505
// exit ;
87503: GO 87720
// for i = 1 to mc_bases do
87505: LD_ADDR_VAR 0 3
87509: PUSH
87510: DOUBLE
87511: LD_INT 1
87513: DEC
87514: ST_TO_ADDR
87515: LD_EXP 89
87519: PUSH
87520: FOR_TO
87521: IFFALSE 87718
// begin if building in mc_construct_list [ i ] then
87523: LD_VAR 0 1
87527: PUSH
87528: LD_EXP 96
87532: PUSH
87533: LD_VAR 0 3
87537: ARRAY
87538: IN
87539: IFFALSE 87716
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
87541: LD_ADDR_EXP 96
87545: PUSH
87546: LD_EXP 96
87550: PPUSH
87551: LD_VAR 0 3
87555: PPUSH
87556: LD_EXP 96
87560: PUSH
87561: LD_VAR 0 3
87565: ARRAY
87566: PUSH
87567: LD_VAR 0 1
87571: DIFF
87572: PPUSH
87573: CALL_OW 1
87577: ST_TO_ADDR
// if building in mc_lab [ i ] then
87578: LD_VAR 0 1
87582: PUSH
87583: LD_EXP 122
87587: PUSH
87588: LD_VAR 0 3
87592: ARRAY
87593: IN
87594: IFFALSE 87649
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
87596: LD_ADDR_EXP 123
87600: PUSH
87601: LD_EXP 123
87605: PPUSH
87606: LD_VAR 0 3
87610: PPUSH
87611: LD_EXP 123
87615: PUSH
87616: LD_VAR 0 3
87620: ARRAY
87621: PPUSH
87622: LD_INT 1
87624: PPUSH
87625: LD_EXP 123
87629: PUSH
87630: LD_VAR 0 3
87634: ARRAY
87635: PPUSH
87636: LD_INT 0
87638: PPUSH
87639: CALL 52317 0 4
87643: PPUSH
87644: CALL_OW 1
87648: ST_TO_ADDR
// if not building in mc_bases [ i ] then
87649: LD_VAR 0 1
87653: PUSH
87654: LD_EXP 89
87658: PUSH
87659: LD_VAR 0 3
87663: ARRAY
87664: IN
87665: NOT
87666: IFFALSE 87712
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
87668: LD_ADDR_EXP 89
87672: PUSH
87673: LD_EXP 89
87677: PPUSH
87678: LD_VAR 0 3
87682: PUSH
87683: LD_EXP 89
87687: PUSH
87688: LD_VAR 0 3
87692: ARRAY
87693: PUSH
87694: LD_INT 1
87696: PLUS
87697: PUSH
87698: EMPTY
87699: LIST
87700: LIST
87701: PPUSH
87702: LD_VAR 0 1
87706: PPUSH
87707: CALL 52899 0 3
87711: ST_TO_ADDR
// exit ;
87712: POP
87713: POP
87714: GO 87720
// end ; end ;
87716: GO 87520
87718: POP
87719: POP
// end ;
87720: LD_VAR 0 2
87724: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
87725: LD_INT 0
87727: PPUSH
87728: PPUSH
87729: PPUSH
87730: PPUSH
87731: PPUSH
87732: PPUSH
87733: PPUSH
// if not mc_bases or not skirmish then
87734: LD_EXP 89
87738: NOT
87739: PUSH
87740: LD_EXP 87
87744: NOT
87745: OR
87746: IFFALSE 87750
// exit ;
87748: GO 88411
// for i = 1 to mc_bases do
87750: LD_ADDR_VAR 0 3
87754: PUSH
87755: DOUBLE
87756: LD_INT 1
87758: DEC
87759: ST_TO_ADDR
87760: LD_EXP 89
87764: PUSH
87765: FOR_TO
87766: IFFALSE 88409
// begin if building in mc_construct_list [ i ] then
87768: LD_VAR 0 1
87772: PUSH
87773: LD_EXP 96
87777: PUSH
87778: LD_VAR 0 3
87782: ARRAY
87783: IN
87784: IFFALSE 88407
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
87786: LD_ADDR_EXP 96
87790: PUSH
87791: LD_EXP 96
87795: PPUSH
87796: LD_VAR 0 3
87800: PPUSH
87801: LD_EXP 96
87805: PUSH
87806: LD_VAR 0 3
87810: ARRAY
87811: PUSH
87812: LD_VAR 0 1
87816: DIFF
87817: PPUSH
87818: CALL_OW 1
87822: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
87823: LD_ADDR_EXP 89
87827: PUSH
87828: LD_EXP 89
87832: PPUSH
87833: LD_VAR 0 3
87837: PUSH
87838: LD_EXP 89
87842: PUSH
87843: LD_VAR 0 3
87847: ARRAY
87848: PUSH
87849: LD_INT 1
87851: PLUS
87852: PUSH
87853: EMPTY
87854: LIST
87855: LIST
87856: PPUSH
87857: LD_VAR 0 1
87861: PPUSH
87862: CALL 52899 0 3
87866: ST_TO_ADDR
// btype := GetBType ( building ) ;
87867: LD_ADDR_VAR 0 5
87871: PUSH
87872: LD_VAR 0 1
87876: PPUSH
87877: CALL_OW 266
87881: ST_TO_ADDR
// side := GetSide ( building ) ;
87882: LD_ADDR_VAR 0 8
87886: PUSH
87887: LD_VAR 0 1
87891: PPUSH
87892: CALL_OW 255
87896: ST_TO_ADDR
// if btype = b_lab then
87897: LD_VAR 0 5
87901: PUSH
87902: LD_INT 6
87904: EQUAL
87905: IFFALSE 87955
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
87907: LD_ADDR_EXP 122
87911: PUSH
87912: LD_EXP 122
87916: PPUSH
87917: LD_VAR 0 3
87921: PUSH
87922: LD_EXP 122
87926: PUSH
87927: LD_VAR 0 3
87931: ARRAY
87932: PUSH
87933: LD_INT 1
87935: PLUS
87936: PUSH
87937: EMPTY
87938: LIST
87939: LIST
87940: PPUSH
87941: LD_VAR 0 1
87945: PPUSH
87946: CALL 52899 0 3
87950: ST_TO_ADDR
// exit ;
87951: POP
87952: POP
87953: GO 88411
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
87955: LD_VAR 0 5
87959: PUSH
87960: LD_INT 0
87962: PUSH
87963: LD_INT 2
87965: PUSH
87966: LD_INT 4
87968: PUSH
87969: EMPTY
87970: LIST
87971: LIST
87972: LIST
87973: IN
87974: IFFALSE 88098
// begin if btype = b_armoury then
87976: LD_VAR 0 5
87980: PUSH
87981: LD_INT 4
87983: EQUAL
87984: IFFALSE 87994
// btype := b_barracks ;
87986: LD_ADDR_VAR 0 5
87990: PUSH
87991: LD_INT 5
87993: ST_TO_ADDR
// if btype = b_depot then
87994: LD_VAR 0 5
87998: PUSH
87999: LD_INT 0
88001: EQUAL
88002: IFFALSE 88012
// btype := b_warehouse ;
88004: LD_ADDR_VAR 0 5
88008: PUSH
88009: LD_INT 1
88011: ST_TO_ADDR
// if btype = b_workshop then
88012: LD_VAR 0 5
88016: PUSH
88017: LD_INT 2
88019: EQUAL
88020: IFFALSE 88030
// btype := b_factory ;
88022: LD_ADDR_VAR 0 5
88026: PUSH
88027: LD_INT 3
88029: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
88030: LD_VAR 0 5
88034: PPUSH
88035: LD_VAR 0 8
88039: PPUSH
88040: CALL_OW 323
88044: PUSH
88045: LD_INT 1
88047: EQUAL
88048: IFFALSE 88094
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
88050: LD_ADDR_EXP 121
88054: PUSH
88055: LD_EXP 121
88059: PPUSH
88060: LD_VAR 0 3
88064: PUSH
88065: LD_EXP 121
88069: PUSH
88070: LD_VAR 0 3
88074: ARRAY
88075: PUSH
88076: LD_INT 1
88078: PLUS
88079: PUSH
88080: EMPTY
88081: LIST
88082: LIST
88083: PPUSH
88084: LD_VAR 0 1
88088: PPUSH
88089: CALL 52899 0 3
88093: ST_TO_ADDR
// exit ;
88094: POP
88095: POP
88096: GO 88411
// end ; if btype in [ b_bunker , b_turret ] then
88098: LD_VAR 0 5
88102: PUSH
88103: LD_INT 32
88105: PUSH
88106: LD_INT 33
88108: PUSH
88109: EMPTY
88110: LIST
88111: LIST
88112: IN
88113: IFFALSE 88403
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
88115: LD_ADDR_EXP 97
88119: PUSH
88120: LD_EXP 97
88124: PPUSH
88125: LD_VAR 0 3
88129: PUSH
88130: LD_EXP 97
88134: PUSH
88135: LD_VAR 0 3
88139: ARRAY
88140: PUSH
88141: LD_INT 1
88143: PLUS
88144: PUSH
88145: EMPTY
88146: LIST
88147: LIST
88148: PPUSH
88149: LD_VAR 0 1
88153: PPUSH
88154: CALL 52899 0 3
88158: ST_TO_ADDR
// if btype = b_bunker then
88159: LD_VAR 0 5
88163: PUSH
88164: LD_INT 32
88166: EQUAL
88167: IFFALSE 88403
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
88169: LD_ADDR_EXP 98
88173: PUSH
88174: LD_EXP 98
88178: PPUSH
88179: LD_VAR 0 3
88183: PUSH
88184: LD_EXP 98
88188: PUSH
88189: LD_VAR 0 3
88193: ARRAY
88194: PUSH
88195: LD_INT 1
88197: PLUS
88198: PUSH
88199: EMPTY
88200: LIST
88201: LIST
88202: PPUSH
88203: LD_VAR 0 1
88207: PPUSH
88208: CALL 52899 0 3
88212: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
88213: LD_ADDR_VAR 0 6
88217: PUSH
88218: LD_EXP 89
88222: PUSH
88223: LD_VAR 0 3
88227: ARRAY
88228: PPUSH
88229: LD_INT 25
88231: PUSH
88232: LD_INT 1
88234: PUSH
88235: EMPTY
88236: LIST
88237: LIST
88238: PUSH
88239: LD_INT 3
88241: PUSH
88242: LD_INT 54
88244: PUSH
88245: EMPTY
88246: LIST
88247: PUSH
88248: EMPTY
88249: LIST
88250: LIST
88251: PUSH
88252: EMPTY
88253: LIST
88254: LIST
88255: PPUSH
88256: CALL_OW 72
88260: ST_TO_ADDR
// if tmp then
88261: LD_VAR 0 6
88265: IFFALSE 88271
// exit ;
88267: POP
88268: POP
88269: GO 88411
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
88271: LD_ADDR_VAR 0 6
88275: PUSH
88276: LD_EXP 89
88280: PUSH
88281: LD_VAR 0 3
88285: ARRAY
88286: PPUSH
88287: LD_INT 2
88289: PUSH
88290: LD_INT 30
88292: PUSH
88293: LD_INT 4
88295: PUSH
88296: EMPTY
88297: LIST
88298: LIST
88299: PUSH
88300: LD_INT 30
88302: PUSH
88303: LD_INT 5
88305: PUSH
88306: EMPTY
88307: LIST
88308: LIST
88309: PUSH
88310: EMPTY
88311: LIST
88312: LIST
88313: LIST
88314: PPUSH
88315: CALL_OW 72
88319: ST_TO_ADDR
// if not tmp then
88320: LD_VAR 0 6
88324: NOT
88325: IFFALSE 88331
// exit ;
88327: POP
88328: POP
88329: GO 88411
// for j in tmp do
88331: LD_ADDR_VAR 0 4
88335: PUSH
88336: LD_VAR 0 6
88340: PUSH
88341: FOR_IN
88342: IFFALSE 88401
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
88344: LD_ADDR_VAR 0 7
88348: PUSH
88349: LD_VAR 0 4
88353: PPUSH
88354: CALL_OW 313
88358: PPUSH
88359: LD_INT 25
88361: PUSH
88362: LD_INT 1
88364: PUSH
88365: EMPTY
88366: LIST
88367: LIST
88368: PPUSH
88369: CALL_OW 72
88373: ST_TO_ADDR
// if units then
88374: LD_VAR 0 7
88378: IFFALSE 88399
// begin ComExitBuilding ( units [ 1 ] ) ;
88380: LD_VAR 0 7
88384: PUSH
88385: LD_INT 1
88387: ARRAY
88388: PPUSH
88389: CALL_OW 122
// exit ;
88393: POP
88394: POP
88395: POP
88396: POP
88397: GO 88411
// end ; end ;
88399: GO 88341
88401: POP
88402: POP
// end ; end ; exit ;
88403: POP
88404: POP
88405: GO 88411
// end ; end ;
88407: GO 87765
88409: POP
88410: POP
// end ;
88411: LD_VAR 0 2
88415: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
88416: LD_INT 0
88418: PPUSH
88419: PPUSH
88420: PPUSH
88421: PPUSH
88422: PPUSH
88423: PPUSH
88424: PPUSH
// if not mc_bases or not skirmish then
88425: LD_EXP 89
88429: NOT
88430: PUSH
88431: LD_EXP 87
88435: NOT
88436: OR
88437: IFFALSE 88441
// exit ;
88439: GO 88672
// btype := GetBType ( building ) ;
88441: LD_ADDR_VAR 0 6
88445: PUSH
88446: LD_VAR 0 1
88450: PPUSH
88451: CALL_OW 266
88455: ST_TO_ADDR
// x := GetX ( building ) ;
88456: LD_ADDR_VAR 0 7
88460: PUSH
88461: LD_VAR 0 1
88465: PPUSH
88466: CALL_OW 250
88470: ST_TO_ADDR
// y := GetY ( building ) ;
88471: LD_ADDR_VAR 0 8
88475: PUSH
88476: LD_VAR 0 1
88480: PPUSH
88481: CALL_OW 251
88485: ST_TO_ADDR
// d := GetDir ( building ) ;
88486: LD_ADDR_VAR 0 9
88490: PUSH
88491: LD_VAR 0 1
88495: PPUSH
88496: CALL_OW 254
88500: ST_TO_ADDR
// for i = 1 to mc_bases do
88501: LD_ADDR_VAR 0 4
88505: PUSH
88506: DOUBLE
88507: LD_INT 1
88509: DEC
88510: ST_TO_ADDR
88511: LD_EXP 89
88515: PUSH
88516: FOR_TO
88517: IFFALSE 88670
// begin if not mc_build_list [ i ] then
88519: LD_EXP 94
88523: PUSH
88524: LD_VAR 0 4
88528: ARRAY
88529: NOT
88530: IFFALSE 88534
// continue ;
88532: GO 88516
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
88534: LD_VAR 0 6
88538: PUSH
88539: LD_VAR 0 7
88543: PUSH
88544: LD_VAR 0 8
88548: PUSH
88549: LD_VAR 0 9
88553: PUSH
88554: EMPTY
88555: LIST
88556: LIST
88557: LIST
88558: LIST
88559: PPUSH
88560: LD_EXP 94
88564: PUSH
88565: LD_VAR 0 4
88569: ARRAY
88570: PUSH
88571: LD_INT 1
88573: ARRAY
88574: PPUSH
88575: CALL 59068 0 2
88579: IFFALSE 88668
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
88581: LD_ADDR_EXP 94
88585: PUSH
88586: LD_EXP 94
88590: PPUSH
88591: LD_VAR 0 4
88595: PPUSH
88596: LD_EXP 94
88600: PUSH
88601: LD_VAR 0 4
88605: ARRAY
88606: PPUSH
88607: LD_INT 1
88609: PPUSH
88610: CALL_OW 3
88614: PPUSH
88615: CALL_OW 1
88619: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
88620: LD_ADDR_EXP 96
88624: PUSH
88625: LD_EXP 96
88629: PPUSH
88630: LD_VAR 0 4
88634: PUSH
88635: LD_EXP 96
88639: PUSH
88640: LD_VAR 0 4
88644: ARRAY
88645: PUSH
88646: LD_INT 1
88648: PLUS
88649: PUSH
88650: EMPTY
88651: LIST
88652: LIST
88653: PPUSH
88654: LD_VAR 0 1
88658: PPUSH
88659: CALL 52899 0 3
88663: ST_TO_ADDR
// exit ;
88664: POP
88665: POP
88666: GO 88672
// end ; end ;
88668: GO 88516
88670: POP
88671: POP
// end ;
88672: LD_VAR 0 3
88676: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
88677: LD_INT 0
88679: PPUSH
88680: PPUSH
88681: PPUSH
// if not mc_bases or not skirmish then
88682: LD_EXP 89
88686: NOT
88687: PUSH
88688: LD_EXP 87
88692: NOT
88693: OR
88694: IFFALSE 88698
// exit ;
88696: GO 88888
// for i = 1 to mc_bases do
88698: LD_ADDR_VAR 0 4
88702: PUSH
88703: DOUBLE
88704: LD_INT 1
88706: DEC
88707: ST_TO_ADDR
88708: LD_EXP 89
88712: PUSH
88713: FOR_TO
88714: IFFALSE 88801
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
88716: LD_VAR 0 1
88720: PUSH
88721: LD_EXP 97
88725: PUSH
88726: LD_VAR 0 4
88730: ARRAY
88731: IN
88732: PUSH
88733: LD_VAR 0 1
88737: PUSH
88738: LD_EXP 98
88742: PUSH
88743: LD_VAR 0 4
88747: ARRAY
88748: IN
88749: NOT
88750: AND
88751: IFFALSE 88799
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
88753: LD_ADDR_EXP 98
88757: PUSH
88758: LD_EXP 98
88762: PPUSH
88763: LD_VAR 0 4
88767: PUSH
88768: LD_EXP 98
88772: PUSH
88773: LD_VAR 0 4
88777: ARRAY
88778: PUSH
88779: LD_INT 1
88781: PLUS
88782: PUSH
88783: EMPTY
88784: LIST
88785: LIST
88786: PPUSH
88787: LD_VAR 0 1
88791: PPUSH
88792: CALL 52899 0 3
88796: ST_TO_ADDR
// break ;
88797: GO 88801
// end ; end ;
88799: GO 88713
88801: POP
88802: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
88803: LD_VAR 0 1
88807: PPUSH
88808: CALL_OW 257
88812: PUSH
88813: LD_EXP 115
88817: IN
88818: PUSH
88819: LD_VAR 0 1
88823: PPUSH
88824: CALL_OW 266
88828: PUSH
88829: LD_INT 5
88831: EQUAL
88832: AND
88833: PUSH
88834: LD_VAR 0 2
88838: PPUSH
88839: CALL_OW 110
88843: PUSH
88844: LD_INT 18
88846: NONEQUAL
88847: AND
88848: IFFALSE 88888
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
88850: LD_VAR 0 2
88854: PPUSH
88855: CALL_OW 257
88859: PUSH
88860: LD_INT 5
88862: PUSH
88863: LD_INT 8
88865: PUSH
88866: LD_INT 9
88868: PUSH
88869: EMPTY
88870: LIST
88871: LIST
88872: LIST
88873: IN
88874: IFFALSE 88888
// SetClass ( unit , 1 ) ;
88876: LD_VAR 0 2
88880: PPUSH
88881: LD_INT 1
88883: PPUSH
88884: CALL_OW 336
// end ;
88888: LD_VAR 0 3
88892: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
88893: LD_INT 0
88895: PPUSH
88896: PPUSH
// if not mc_bases or not skirmish then
88897: LD_EXP 89
88901: NOT
88902: PUSH
88903: LD_EXP 87
88907: NOT
88908: OR
88909: IFFALSE 88913
// exit ;
88911: GO 89029
// if GetLives ( abandoned_vehicle ) > 250 then
88913: LD_VAR 0 2
88917: PPUSH
88918: CALL_OW 256
88922: PUSH
88923: LD_INT 250
88925: GREATER
88926: IFFALSE 88930
// exit ;
88928: GO 89029
// for i = 1 to mc_bases do
88930: LD_ADDR_VAR 0 6
88934: PUSH
88935: DOUBLE
88936: LD_INT 1
88938: DEC
88939: ST_TO_ADDR
88940: LD_EXP 89
88944: PUSH
88945: FOR_TO
88946: IFFALSE 89027
// begin if driver in mc_bases [ i ] then
88948: LD_VAR 0 1
88952: PUSH
88953: LD_EXP 89
88957: PUSH
88958: LD_VAR 0 6
88962: ARRAY
88963: IN
88964: IFFALSE 89025
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
88966: LD_VAR 0 1
88970: PPUSH
88971: LD_EXP 89
88975: PUSH
88976: LD_VAR 0 6
88980: ARRAY
88981: PPUSH
88982: LD_INT 2
88984: PUSH
88985: LD_INT 30
88987: PUSH
88988: LD_INT 0
88990: PUSH
88991: EMPTY
88992: LIST
88993: LIST
88994: PUSH
88995: LD_INT 30
88997: PUSH
88998: LD_INT 1
89000: PUSH
89001: EMPTY
89002: LIST
89003: LIST
89004: PUSH
89005: EMPTY
89006: LIST
89007: LIST
89008: LIST
89009: PPUSH
89010: CALL_OW 72
89014: PUSH
89015: LD_INT 1
89017: ARRAY
89018: PPUSH
89019: CALL_OW 112
// break ;
89023: GO 89027
// end ; end ;
89025: GO 88945
89027: POP
89028: POP
// end ; end_of_file
89029: LD_VAR 0 5
89033: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
89034: LD_INT 0
89036: PPUSH
89037: PPUSH
89038: PPUSH
89039: PPUSH
89040: PPUSH
89041: PPUSH
89042: PPUSH
89043: PPUSH
89044: PPUSH
89045: PPUSH
89046: PPUSH
89047: PPUSH
89048: PPUSH
89049: PPUSH
89050: PPUSH
89051: PPUSH
89052: PPUSH
89053: PPUSH
89054: PPUSH
89055: PPUSH
89056: PPUSH
89057: PPUSH
89058: PPUSH
89059: PPUSH
89060: PPUSH
89061: PPUSH
89062: PPUSH
89063: PPUSH
89064: PPUSH
89065: PPUSH
89066: PPUSH
89067: PPUSH
89068: PPUSH
89069: PPUSH
// if not list then
89070: LD_VAR 0 1
89074: NOT
89075: IFFALSE 89079
// exit ;
89077: GO 93738
// base := list [ 1 ] ;
89079: LD_ADDR_VAR 0 3
89083: PUSH
89084: LD_VAR 0 1
89088: PUSH
89089: LD_INT 1
89091: ARRAY
89092: ST_TO_ADDR
// group := list [ 2 ] ;
89093: LD_ADDR_VAR 0 4
89097: PUSH
89098: LD_VAR 0 1
89102: PUSH
89103: LD_INT 2
89105: ARRAY
89106: ST_TO_ADDR
// path := list [ 3 ] ;
89107: LD_ADDR_VAR 0 5
89111: PUSH
89112: LD_VAR 0 1
89116: PUSH
89117: LD_INT 3
89119: ARRAY
89120: ST_TO_ADDR
// flags := list [ 4 ] ;
89121: LD_ADDR_VAR 0 6
89125: PUSH
89126: LD_VAR 0 1
89130: PUSH
89131: LD_INT 4
89133: ARRAY
89134: ST_TO_ADDR
// mined := [ ] ;
89135: LD_ADDR_VAR 0 27
89139: PUSH
89140: EMPTY
89141: ST_TO_ADDR
// bombed := [ ] ;
89142: LD_ADDR_VAR 0 28
89146: PUSH
89147: EMPTY
89148: ST_TO_ADDR
// healers := [ ] ;
89149: LD_ADDR_VAR 0 31
89153: PUSH
89154: EMPTY
89155: ST_TO_ADDR
// to_heal := [ ] ;
89156: LD_ADDR_VAR 0 30
89160: PUSH
89161: EMPTY
89162: ST_TO_ADDR
// repairs := [ ] ;
89163: LD_ADDR_VAR 0 33
89167: PUSH
89168: EMPTY
89169: ST_TO_ADDR
// to_repair := [ ] ;
89170: LD_ADDR_VAR 0 32
89174: PUSH
89175: EMPTY
89176: ST_TO_ADDR
// if not group or not path then
89177: LD_VAR 0 4
89181: NOT
89182: PUSH
89183: LD_VAR 0 5
89187: NOT
89188: OR
89189: IFFALSE 89193
// exit ;
89191: GO 93738
// side := GetSide ( group [ 1 ] ) ;
89193: LD_ADDR_VAR 0 35
89197: PUSH
89198: LD_VAR 0 4
89202: PUSH
89203: LD_INT 1
89205: ARRAY
89206: PPUSH
89207: CALL_OW 255
89211: ST_TO_ADDR
// if flags then
89212: LD_VAR 0 6
89216: IFFALSE 89360
// begin f_ignore_area := flags [ 1 ] ;
89218: LD_ADDR_VAR 0 17
89222: PUSH
89223: LD_VAR 0 6
89227: PUSH
89228: LD_INT 1
89230: ARRAY
89231: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
89232: LD_ADDR_VAR 0 18
89236: PUSH
89237: LD_VAR 0 6
89241: PUSH
89242: LD_INT 2
89244: ARRAY
89245: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
89246: LD_ADDR_VAR 0 19
89250: PUSH
89251: LD_VAR 0 6
89255: PUSH
89256: LD_INT 3
89258: ARRAY
89259: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
89260: LD_ADDR_VAR 0 20
89264: PUSH
89265: LD_VAR 0 6
89269: PUSH
89270: LD_INT 4
89272: ARRAY
89273: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
89274: LD_ADDR_VAR 0 21
89278: PUSH
89279: LD_VAR 0 6
89283: PUSH
89284: LD_INT 5
89286: ARRAY
89287: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
89288: LD_ADDR_VAR 0 22
89292: PUSH
89293: LD_VAR 0 6
89297: PUSH
89298: LD_INT 6
89300: ARRAY
89301: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
89302: LD_ADDR_VAR 0 23
89306: PUSH
89307: LD_VAR 0 6
89311: PUSH
89312: LD_INT 7
89314: ARRAY
89315: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
89316: LD_ADDR_VAR 0 24
89320: PUSH
89321: LD_VAR 0 6
89325: PUSH
89326: LD_INT 8
89328: ARRAY
89329: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
89330: LD_ADDR_VAR 0 25
89334: PUSH
89335: LD_VAR 0 6
89339: PUSH
89340: LD_INT 9
89342: ARRAY
89343: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
89344: LD_ADDR_VAR 0 26
89348: PUSH
89349: LD_VAR 0 6
89353: PUSH
89354: LD_INT 10
89356: ARRAY
89357: ST_TO_ADDR
// end else
89358: GO 89440
// begin f_ignore_area := false ;
89360: LD_ADDR_VAR 0 17
89364: PUSH
89365: LD_INT 0
89367: ST_TO_ADDR
// f_capture := false ;
89368: LD_ADDR_VAR 0 18
89372: PUSH
89373: LD_INT 0
89375: ST_TO_ADDR
// f_ignore_civ := false ;
89376: LD_ADDR_VAR 0 19
89380: PUSH
89381: LD_INT 0
89383: ST_TO_ADDR
// f_murder := false ;
89384: LD_ADDR_VAR 0 20
89388: PUSH
89389: LD_INT 0
89391: ST_TO_ADDR
// f_mines := false ;
89392: LD_ADDR_VAR 0 21
89396: PUSH
89397: LD_INT 0
89399: ST_TO_ADDR
// f_repair := false ;
89400: LD_ADDR_VAR 0 22
89404: PUSH
89405: LD_INT 0
89407: ST_TO_ADDR
// f_heal := false ;
89408: LD_ADDR_VAR 0 23
89412: PUSH
89413: LD_INT 0
89415: ST_TO_ADDR
// f_spacetime := false ;
89416: LD_ADDR_VAR 0 24
89420: PUSH
89421: LD_INT 0
89423: ST_TO_ADDR
// f_attack_depot := false ;
89424: LD_ADDR_VAR 0 25
89428: PUSH
89429: LD_INT 0
89431: ST_TO_ADDR
// f_crawl := false ;
89432: LD_ADDR_VAR 0 26
89436: PUSH
89437: LD_INT 0
89439: ST_TO_ADDR
// end ; if f_heal then
89440: LD_VAR 0 23
89444: IFFALSE 89471
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
89446: LD_ADDR_VAR 0 31
89450: PUSH
89451: LD_VAR 0 4
89455: PPUSH
89456: LD_INT 25
89458: PUSH
89459: LD_INT 4
89461: PUSH
89462: EMPTY
89463: LIST
89464: LIST
89465: PPUSH
89466: CALL_OW 72
89470: ST_TO_ADDR
// if f_repair then
89471: LD_VAR 0 22
89475: IFFALSE 89502
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
89477: LD_ADDR_VAR 0 33
89481: PUSH
89482: LD_VAR 0 4
89486: PPUSH
89487: LD_INT 25
89489: PUSH
89490: LD_INT 3
89492: PUSH
89493: EMPTY
89494: LIST
89495: LIST
89496: PPUSH
89497: CALL_OW 72
89501: ST_TO_ADDR
// units_path := [ ] ;
89502: LD_ADDR_VAR 0 16
89506: PUSH
89507: EMPTY
89508: ST_TO_ADDR
// for i = 1 to group do
89509: LD_ADDR_VAR 0 7
89513: PUSH
89514: DOUBLE
89515: LD_INT 1
89517: DEC
89518: ST_TO_ADDR
89519: LD_VAR 0 4
89523: PUSH
89524: FOR_TO
89525: IFFALSE 89554
// units_path := Replace ( units_path , i , path ) ;
89527: LD_ADDR_VAR 0 16
89531: PUSH
89532: LD_VAR 0 16
89536: PPUSH
89537: LD_VAR 0 7
89541: PPUSH
89542: LD_VAR 0 5
89546: PPUSH
89547: CALL_OW 1
89551: ST_TO_ADDR
89552: GO 89524
89554: POP
89555: POP
// repeat for i = group downto 1 do
89556: LD_ADDR_VAR 0 7
89560: PUSH
89561: DOUBLE
89562: LD_VAR 0 4
89566: INC
89567: ST_TO_ADDR
89568: LD_INT 1
89570: PUSH
89571: FOR_DOWNTO
89572: IFFALSE 93694
// begin wait ( 5 ) ;
89574: LD_INT 5
89576: PPUSH
89577: CALL_OW 67
// tmp := [ ] ;
89581: LD_ADDR_VAR 0 14
89585: PUSH
89586: EMPTY
89587: ST_TO_ADDR
// attacking := false ;
89588: LD_ADDR_VAR 0 29
89592: PUSH
89593: LD_INT 0
89595: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
89596: LD_VAR 0 4
89600: PUSH
89601: LD_VAR 0 7
89605: ARRAY
89606: PPUSH
89607: CALL_OW 301
89611: PUSH
89612: LD_VAR 0 4
89616: PUSH
89617: LD_VAR 0 7
89621: ARRAY
89622: NOT
89623: OR
89624: IFFALSE 89733
// begin if GetType ( group [ i ] ) = unit_human then
89626: LD_VAR 0 4
89630: PUSH
89631: LD_VAR 0 7
89635: ARRAY
89636: PPUSH
89637: CALL_OW 247
89641: PUSH
89642: LD_INT 1
89644: EQUAL
89645: IFFALSE 89691
// begin to_heal := to_heal diff group [ i ] ;
89647: LD_ADDR_VAR 0 30
89651: PUSH
89652: LD_VAR 0 30
89656: PUSH
89657: LD_VAR 0 4
89661: PUSH
89662: LD_VAR 0 7
89666: ARRAY
89667: DIFF
89668: ST_TO_ADDR
// healers := healers diff group [ i ] ;
89669: LD_ADDR_VAR 0 31
89673: PUSH
89674: LD_VAR 0 31
89678: PUSH
89679: LD_VAR 0 4
89683: PUSH
89684: LD_VAR 0 7
89688: ARRAY
89689: DIFF
89690: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
89691: LD_ADDR_VAR 0 4
89695: PUSH
89696: LD_VAR 0 4
89700: PPUSH
89701: LD_VAR 0 7
89705: PPUSH
89706: CALL_OW 3
89710: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
89711: LD_ADDR_VAR 0 16
89715: PUSH
89716: LD_VAR 0 16
89720: PPUSH
89721: LD_VAR 0 7
89725: PPUSH
89726: CALL_OW 3
89730: ST_TO_ADDR
// continue ;
89731: GO 89571
// end ; if f_repair then
89733: LD_VAR 0 22
89737: IFFALSE 90226
// begin if GetType ( group [ i ] ) = unit_vehicle then
89739: LD_VAR 0 4
89743: PUSH
89744: LD_VAR 0 7
89748: ARRAY
89749: PPUSH
89750: CALL_OW 247
89754: PUSH
89755: LD_INT 2
89757: EQUAL
89758: IFFALSE 89948
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
89760: LD_VAR 0 4
89764: PUSH
89765: LD_VAR 0 7
89769: ARRAY
89770: PPUSH
89771: CALL_OW 256
89775: PUSH
89776: LD_INT 700
89778: LESS
89779: PUSH
89780: LD_VAR 0 4
89784: PUSH
89785: LD_VAR 0 7
89789: ARRAY
89790: PUSH
89791: LD_VAR 0 32
89795: IN
89796: NOT
89797: AND
89798: IFFALSE 89822
// to_repair := to_repair union group [ i ] ;
89800: LD_ADDR_VAR 0 32
89804: PUSH
89805: LD_VAR 0 32
89809: PUSH
89810: LD_VAR 0 4
89814: PUSH
89815: LD_VAR 0 7
89819: ARRAY
89820: UNION
89821: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
89822: LD_VAR 0 4
89826: PUSH
89827: LD_VAR 0 7
89831: ARRAY
89832: PPUSH
89833: CALL_OW 256
89837: PUSH
89838: LD_INT 1000
89840: EQUAL
89841: PUSH
89842: LD_VAR 0 4
89846: PUSH
89847: LD_VAR 0 7
89851: ARRAY
89852: PUSH
89853: LD_VAR 0 32
89857: IN
89858: AND
89859: IFFALSE 89883
// to_repair := to_repair diff group [ i ] ;
89861: LD_ADDR_VAR 0 32
89865: PUSH
89866: LD_VAR 0 32
89870: PUSH
89871: LD_VAR 0 4
89875: PUSH
89876: LD_VAR 0 7
89880: ARRAY
89881: DIFF
89882: ST_TO_ADDR
// if group [ i ] in to_repair then
89883: LD_VAR 0 4
89887: PUSH
89888: LD_VAR 0 7
89892: ARRAY
89893: PUSH
89894: LD_VAR 0 32
89898: IN
89899: IFFALSE 89946
// begin if not IsInArea ( group [ i ] , f_repair ) then
89901: LD_VAR 0 4
89905: PUSH
89906: LD_VAR 0 7
89910: ARRAY
89911: PPUSH
89912: LD_VAR 0 22
89916: PPUSH
89917: CALL_OW 308
89921: NOT
89922: IFFALSE 89944
// ComMoveToArea ( group [ i ] , f_repair ) ;
89924: LD_VAR 0 4
89928: PUSH
89929: LD_VAR 0 7
89933: ARRAY
89934: PPUSH
89935: LD_VAR 0 22
89939: PPUSH
89940: CALL_OW 113
// continue ;
89944: GO 89571
// end ; end else
89946: GO 90226
// if group [ i ] in repairs then
89948: LD_VAR 0 4
89952: PUSH
89953: LD_VAR 0 7
89957: ARRAY
89958: PUSH
89959: LD_VAR 0 33
89963: IN
89964: IFFALSE 90226
// begin if IsInUnit ( group [ i ] ) then
89966: LD_VAR 0 4
89970: PUSH
89971: LD_VAR 0 7
89975: ARRAY
89976: PPUSH
89977: CALL_OW 310
89981: IFFALSE 90049
// begin z := IsInUnit ( group [ i ] ) ;
89983: LD_ADDR_VAR 0 13
89987: PUSH
89988: LD_VAR 0 4
89992: PUSH
89993: LD_VAR 0 7
89997: ARRAY
89998: PPUSH
89999: CALL_OW 310
90003: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
90004: LD_VAR 0 13
90008: PUSH
90009: LD_VAR 0 32
90013: IN
90014: PUSH
90015: LD_VAR 0 13
90019: PPUSH
90020: LD_VAR 0 22
90024: PPUSH
90025: CALL_OW 308
90029: AND
90030: IFFALSE 90047
// ComExitVehicle ( group [ i ] ) ;
90032: LD_VAR 0 4
90036: PUSH
90037: LD_VAR 0 7
90041: ARRAY
90042: PPUSH
90043: CALL_OW 121
// end else
90047: GO 90226
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
90049: LD_ADDR_VAR 0 13
90053: PUSH
90054: LD_VAR 0 4
90058: PPUSH
90059: LD_INT 95
90061: PUSH
90062: LD_VAR 0 22
90066: PUSH
90067: EMPTY
90068: LIST
90069: LIST
90070: PUSH
90071: LD_INT 58
90073: PUSH
90074: EMPTY
90075: LIST
90076: PUSH
90077: EMPTY
90078: LIST
90079: LIST
90080: PPUSH
90081: CALL_OW 72
90085: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
90086: LD_VAR 0 4
90090: PUSH
90091: LD_VAR 0 7
90095: ARRAY
90096: PPUSH
90097: CALL_OW 314
90101: NOT
90102: IFFALSE 90224
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
90104: LD_ADDR_VAR 0 10
90108: PUSH
90109: LD_VAR 0 13
90113: PPUSH
90114: LD_VAR 0 4
90118: PUSH
90119: LD_VAR 0 7
90123: ARRAY
90124: PPUSH
90125: CALL_OW 74
90129: ST_TO_ADDR
// if not x then
90130: LD_VAR 0 10
90134: NOT
90135: IFFALSE 90139
// continue ;
90137: GO 89571
// if GetLives ( x ) < 1000 then
90139: LD_VAR 0 10
90143: PPUSH
90144: CALL_OW 256
90148: PUSH
90149: LD_INT 1000
90151: LESS
90152: IFFALSE 90176
// ComRepairVehicle ( group [ i ] , x ) else
90154: LD_VAR 0 4
90158: PUSH
90159: LD_VAR 0 7
90163: ARRAY
90164: PPUSH
90165: LD_VAR 0 10
90169: PPUSH
90170: CALL_OW 129
90174: GO 90224
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
90176: LD_VAR 0 23
90180: PUSH
90181: LD_VAR 0 4
90185: PUSH
90186: LD_VAR 0 7
90190: ARRAY
90191: PPUSH
90192: CALL_OW 256
90196: PUSH
90197: LD_INT 1000
90199: LESS
90200: AND
90201: NOT
90202: IFFALSE 90224
// ComEnterUnit ( group [ i ] , x ) ;
90204: LD_VAR 0 4
90208: PUSH
90209: LD_VAR 0 7
90213: ARRAY
90214: PPUSH
90215: LD_VAR 0 10
90219: PPUSH
90220: CALL_OW 120
// end ; continue ;
90224: GO 89571
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
90226: LD_VAR 0 23
90230: PUSH
90231: LD_VAR 0 4
90235: PUSH
90236: LD_VAR 0 7
90240: ARRAY
90241: PPUSH
90242: CALL_OW 247
90246: PUSH
90247: LD_INT 1
90249: EQUAL
90250: AND
90251: IFFALSE 90729
// begin if group [ i ] in healers then
90253: LD_VAR 0 4
90257: PUSH
90258: LD_VAR 0 7
90262: ARRAY
90263: PUSH
90264: LD_VAR 0 31
90268: IN
90269: IFFALSE 90542
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
90271: LD_VAR 0 4
90275: PUSH
90276: LD_VAR 0 7
90280: ARRAY
90281: PPUSH
90282: LD_VAR 0 23
90286: PPUSH
90287: CALL_OW 308
90291: NOT
90292: PUSH
90293: LD_VAR 0 4
90297: PUSH
90298: LD_VAR 0 7
90302: ARRAY
90303: PPUSH
90304: CALL_OW 314
90308: NOT
90309: AND
90310: IFFALSE 90334
// ComMoveToArea ( group [ i ] , f_heal ) else
90312: LD_VAR 0 4
90316: PUSH
90317: LD_VAR 0 7
90321: ARRAY
90322: PPUSH
90323: LD_VAR 0 23
90327: PPUSH
90328: CALL_OW 113
90332: GO 90540
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
90334: LD_VAR 0 4
90338: PUSH
90339: LD_VAR 0 7
90343: ARRAY
90344: PPUSH
90345: CALL 81271 0 1
90349: PPUSH
90350: CALL_OW 256
90354: PUSH
90355: LD_INT 1000
90357: EQUAL
90358: IFFALSE 90377
// ComStop ( group [ i ] ) else
90360: LD_VAR 0 4
90364: PUSH
90365: LD_VAR 0 7
90369: ARRAY
90370: PPUSH
90371: CALL_OW 141
90375: GO 90540
// if not HasTask ( group [ i ] ) and to_heal then
90377: LD_VAR 0 4
90381: PUSH
90382: LD_VAR 0 7
90386: ARRAY
90387: PPUSH
90388: CALL_OW 314
90392: NOT
90393: PUSH
90394: LD_VAR 0 30
90398: AND
90399: IFFALSE 90540
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
90401: LD_ADDR_VAR 0 13
90405: PUSH
90406: LD_VAR 0 30
90410: PPUSH
90411: LD_INT 3
90413: PUSH
90414: LD_INT 54
90416: PUSH
90417: EMPTY
90418: LIST
90419: PUSH
90420: EMPTY
90421: LIST
90422: LIST
90423: PPUSH
90424: CALL_OW 72
90428: PPUSH
90429: LD_VAR 0 4
90433: PUSH
90434: LD_VAR 0 7
90438: ARRAY
90439: PPUSH
90440: CALL_OW 74
90444: ST_TO_ADDR
// if z then
90445: LD_VAR 0 13
90449: IFFALSE 90540
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
90451: LD_INT 91
90453: PUSH
90454: LD_VAR 0 13
90458: PUSH
90459: LD_INT 10
90461: PUSH
90462: EMPTY
90463: LIST
90464: LIST
90465: LIST
90466: PUSH
90467: LD_INT 81
90469: PUSH
90470: LD_VAR 0 13
90474: PPUSH
90475: CALL_OW 255
90479: PUSH
90480: EMPTY
90481: LIST
90482: LIST
90483: PUSH
90484: EMPTY
90485: LIST
90486: LIST
90487: PPUSH
90488: CALL_OW 69
90492: PUSH
90493: LD_INT 0
90495: EQUAL
90496: IFFALSE 90520
// ComHeal ( group [ i ] , z ) else
90498: LD_VAR 0 4
90502: PUSH
90503: LD_VAR 0 7
90507: ARRAY
90508: PPUSH
90509: LD_VAR 0 13
90513: PPUSH
90514: CALL_OW 128
90518: GO 90540
// ComMoveToArea ( group [ i ] , f_heal ) ;
90520: LD_VAR 0 4
90524: PUSH
90525: LD_VAR 0 7
90529: ARRAY
90530: PPUSH
90531: LD_VAR 0 23
90535: PPUSH
90536: CALL_OW 113
// end ; continue ;
90540: GO 89571
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
90542: LD_VAR 0 4
90546: PUSH
90547: LD_VAR 0 7
90551: ARRAY
90552: PPUSH
90553: CALL_OW 256
90557: PUSH
90558: LD_INT 700
90560: LESS
90561: PUSH
90562: LD_VAR 0 4
90566: PUSH
90567: LD_VAR 0 7
90571: ARRAY
90572: PUSH
90573: LD_VAR 0 30
90577: IN
90578: NOT
90579: AND
90580: IFFALSE 90604
// to_heal := to_heal union group [ i ] ;
90582: LD_ADDR_VAR 0 30
90586: PUSH
90587: LD_VAR 0 30
90591: PUSH
90592: LD_VAR 0 4
90596: PUSH
90597: LD_VAR 0 7
90601: ARRAY
90602: UNION
90603: ST_TO_ADDR
// if group [ i ] in to_heal then
90604: LD_VAR 0 4
90608: PUSH
90609: LD_VAR 0 7
90613: ARRAY
90614: PUSH
90615: LD_VAR 0 30
90619: IN
90620: IFFALSE 90729
// begin if GetLives ( group [ i ] ) = 1000 then
90622: LD_VAR 0 4
90626: PUSH
90627: LD_VAR 0 7
90631: ARRAY
90632: PPUSH
90633: CALL_OW 256
90637: PUSH
90638: LD_INT 1000
90640: EQUAL
90641: IFFALSE 90667
// to_heal := to_heal diff group [ i ] else
90643: LD_ADDR_VAR 0 30
90647: PUSH
90648: LD_VAR 0 30
90652: PUSH
90653: LD_VAR 0 4
90657: PUSH
90658: LD_VAR 0 7
90662: ARRAY
90663: DIFF
90664: ST_TO_ADDR
90665: GO 90729
// begin if not IsInArea ( group [ i ] , to_heal ) then
90667: LD_VAR 0 4
90671: PUSH
90672: LD_VAR 0 7
90676: ARRAY
90677: PPUSH
90678: LD_VAR 0 30
90682: PPUSH
90683: CALL_OW 308
90687: NOT
90688: IFFALSE 90712
// ComMoveToArea ( group [ i ] , f_heal ) else
90690: LD_VAR 0 4
90694: PUSH
90695: LD_VAR 0 7
90699: ARRAY
90700: PPUSH
90701: LD_VAR 0 23
90705: PPUSH
90706: CALL_OW 113
90710: GO 90727
// ComHold ( group [ i ] ) ;
90712: LD_VAR 0 4
90716: PUSH
90717: LD_VAR 0 7
90721: ARRAY
90722: PPUSH
90723: CALL_OW 140
// continue ;
90727: GO 89571
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
90729: LD_VAR 0 4
90733: PUSH
90734: LD_VAR 0 7
90738: ARRAY
90739: PPUSH
90740: LD_INT 10
90742: PPUSH
90743: CALL 79691 0 2
90747: NOT
90748: PUSH
90749: LD_VAR 0 16
90753: PUSH
90754: LD_VAR 0 7
90758: ARRAY
90759: PUSH
90760: EMPTY
90761: EQUAL
90762: NOT
90763: AND
90764: IFFALSE 91030
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
90766: LD_VAR 0 4
90770: PUSH
90771: LD_VAR 0 7
90775: ARRAY
90776: PPUSH
90777: CALL_OW 262
90781: PUSH
90782: LD_INT 1
90784: PUSH
90785: LD_INT 2
90787: PUSH
90788: EMPTY
90789: LIST
90790: LIST
90791: IN
90792: IFFALSE 90833
// if GetFuel ( group [ i ] ) < 10 then
90794: LD_VAR 0 4
90798: PUSH
90799: LD_VAR 0 7
90803: ARRAY
90804: PPUSH
90805: CALL_OW 261
90809: PUSH
90810: LD_INT 10
90812: LESS
90813: IFFALSE 90833
// SetFuel ( group [ i ] , 12 ) ;
90815: LD_VAR 0 4
90819: PUSH
90820: LD_VAR 0 7
90824: ARRAY
90825: PPUSH
90826: LD_INT 12
90828: PPUSH
90829: CALL_OW 240
// if units_path [ i ] then
90833: LD_VAR 0 16
90837: PUSH
90838: LD_VAR 0 7
90842: ARRAY
90843: IFFALSE 91028
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
90845: LD_VAR 0 4
90849: PUSH
90850: LD_VAR 0 7
90854: ARRAY
90855: PPUSH
90856: LD_VAR 0 16
90860: PUSH
90861: LD_VAR 0 7
90865: ARRAY
90866: PUSH
90867: LD_INT 1
90869: ARRAY
90870: PUSH
90871: LD_INT 1
90873: ARRAY
90874: PPUSH
90875: LD_VAR 0 16
90879: PUSH
90880: LD_VAR 0 7
90884: ARRAY
90885: PUSH
90886: LD_INT 1
90888: ARRAY
90889: PUSH
90890: LD_INT 2
90892: ARRAY
90893: PPUSH
90894: CALL_OW 297
90898: PUSH
90899: LD_INT 6
90901: GREATER
90902: IFFALSE 90977
// begin if not HasTask ( group [ i ] ) then
90904: LD_VAR 0 4
90908: PUSH
90909: LD_VAR 0 7
90913: ARRAY
90914: PPUSH
90915: CALL_OW 314
90919: NOT
90920: IFFALSE 90975
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
90922: LD_VAR 0 4
90926: PUSH
90927: LD_VAR 0 7
90931: ARRAY
90932: PPUSH
90933: LD_VAR 0 16
90937: PUSH
90938: LD_VAR 0 7
90942: ARRAY
90943: PUSH
90944: LD_INT 1
90946: ARRAY
90947: PUSH
90948: LD_INT 1
90950: ARRAY
90951: PPUSH
90952: LD_VAR 0 16
90956: PUSH
90957: LD_VAR 0 7
90961: ARRAY
90962: PUSH
90963: LD_INT 1
90965: ARRAY
90966: PUSH
90967: LD_INT 2
90969: ARRAY
90970: PPUSH
90971: CALL_OW 114
// end else
90975: GO 91028
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
90977: LD_ADDR_VAR 0 15
90981: PUSH
90982: LD_VAR 0 16
90986: PUSH
90987: LD_VAR 0 7
90991: ARRAY
90992: PPUSH
90993: LD_INT 1
90995: PPUSH
90996: CALL_OW 3
91000: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
91001: LD_ADDR_VAR 0 16
91005: PUSH
91006: LD_VAR 0 16
91010: PPUSH
91011: LD_VAR 0 7
91015: PPUSH
91016: LD_VAR 0 15
91020: PPUSH
91021: CALL_OW 1
91025: ST_TO_ADDR
// continue ;
91026: GO 89571
// end ; end ; end else
91028: GO 93692
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
91030: LD_ADDR_VAR 0 14
91034: PUSH
91035: LD_INT 81
91037: PUSH
91038: LD_VAR 0 4
91042: PUSH
91043: LD_VAR 0 7
91047: ARRAY
91048: PPUSH
91049: CALL_OW 255
91053: PUSH
91054: EMPTY
91055: LIST
91056: LIST
91057: PPUSH
91058: CALL_OW 69
91062: ST_TO_ADDR
// if not tmp then
91063: LD_VAR 0 14
91067: NOT
91068: IFFALSE 91072
// continue ;
91070: GO 89571
// if f_ignore_area then
91072: LD_VAR 0 17
91076: IFFALSE 91164
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
91078: LD_ADDR_VAR 0 15
91082: PUSH
91083: LD_VAR 0 14
91087: PPUSH
91088: LD_INT 3
91090: PUSH
91091: LD_INT 92
91093: PUSH
91094: LD_VAR 0 17
91098: PUSH
91099: LD_INT 1
91101: ARRAY
91102: PUSH
91103: LD_VAR 0 17
91107: PUSH
91108: LD_INT 2
91110: ARRAY
91111: PUSH
91112: LD_VAR 0 17
91116: PUSH
91117: LD_INT 3
91119: ARRAY
91120: PUSH
91121: EMPTY
91122: LIST
91123: LIST
91124: LIST
91125: LIST
91126: PUSH
91127: EMPTY
91128: LIST
91129: LIST
91130: PPUSH
91131: CALL_OW 72
91135: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
91136: LD_VAR 0 14
91140: PUSH
91141: LD_VAR 0 15
91145: DIFF
91146: IFFALSE 91164
// tmp := tmp diff tmp2 ;
91148: LD_ADDR_VAR 0 14
91152: PUSH
91153: LD_VAR 0 14
91157: PUSH
91158: LD_VAR 0 15
91162: DIFF
91163: ST_TO_ADDR
// end ; if not f_murder then
91164: LD_VAR 0 20
91168: NOT
91169: IFFALSE 91227
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
91171: LD_ADDR_VAR 0 15
91175: PUSH
91176: LD_VAR 0 14
91180: PPUSH
91181: LD_INT 3
91183: PUSH
91184: LD_INT 50
91186: PUSH
91187: EMPTY
91188: LIST
91189: PUSH
91190: EMPTY
91191: LIST
91192: LIST
91193: PPUSH
91194: CALL_OW 72
91198: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
91199: LD_VAR 0 14
91203: PUSH
91204: LD_VAR 0 15
91208: DIFF
91209: IFFALSE 91227
// tmp := tmp diff tmp2 ;
91211: LD_ADDR_VAR 0 14
91215: PUSH
91216: LD_VAR 0 14
91220: PUSH
91221: LD_VAR 0 15
91225: DIFF
91226: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
91227: LD_ADDR_VAR 0 14
91231: PUSH
91232: LD_VAR 0 4
91236: PUSH
91237: LD_VAR 0 7
91241: ARRAY
91242: PPUSH
91243: LD_VAR 0 14
91247: PPUSH
91248: LD_INT 1
91250: PPUSH
91251: LD_INT 1
91253: PPUSH
91254: CALL 53334 0 4
91258: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
91259: LD_VAR 0 4
91263: PUSH
91264: LD_VAR 0 7
91268: ARRAY
91269: PPUSH
91270: CALL_OW 257
91274: PUSH
91275: LD_INT 1
91277: EQUAL
91278: IFFALSE 91726
// begin if WantPlant ( group [ i ] ) then
91280: LD_VAR 0 4
91284: PUSH
91285: LD_VAR 0 7
91289: ARRAY
91290: PPUSH
91291: CALL 52835 0 1
91295: IFFALSE 91299
// continue ;
91297: GO 89571
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
91299: LD_VAR 0 18
91303: PUSH
91304: LD_VAR 0 4
91308: PUSH
91309: LD_VAR 0 7
91313: ARRAY
91314: PPUSH
91315: CALL_OW 310
91319: NOT
91320: AND
91321: PUSH
91322: LD_VAR 0 14
91326: PUSH
91327: LD_INT 1
91329: ARRAY
91330: PUSH
91331: LD_VAR 0 14
91335: PPUSH
91336: LD_INT 21
91338: PUSH
91339: LD_INT 2
91341: PUSH
91342: EMPTY
91343: LIST
91344: LIST
91345: PUSH
91346: LD_INT 58
91348: PUSH
91349: EMPTY
91350: LIST
91351: PUSH
91352: EMPTY
91353: LIST
91354: LIST
91355: PPUSH
91356: CALL_OW 72
91360: IN
91361: AND
91362: IFFALSE 91398
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
91364: LD_VAR 0 4
91368: PUSH
91369: LD_VAR 0 7
91373: ARRAY
91374: PPUSH
91375: LD_VAR 0 14
91379: PUSH
91380: LD_INT 1
91382: ARRAY
91383: PPUSH
91384: CALL_OW 120
// attacking := true ;
91388: LD_ADDR_VAR 0 29
91392: PUSH
91393: LD_INT 1
91395: ST_TO_ADDR
// continue ;
91396: GO 89571
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
91398: LD_VAR 0 26
91402: PUSH
91403: LD_VAR 0 4
91407: PUSH
91408: LD_VAR 0 7
91412: ARRAY
91413: PPUSH
91414: CALL_OW 257
91418: PUSH
91419: LD_INT 1
91421: EQUAL
91422: AND
91423: PUSH
91424: LD_VAR 0 4
91428: PUSH
91429: LD_VAR 0 7
91433: ARRAY
91434: PPUSH
91435: CALL_OW 256
91439: PUSH
91440: LD_INT 800
91442: LESS
91443: AND
91444: PUSH
91445: LD_VAR 0 4
91449: PUSH
91450: LD_VAR 0 7
91454: ARRAY
91455: PPUSH
91456: CALL_OW 318
91460: NOT
91461: AND
91462: IFFALSE 91479
// ComCrawl ( group [ i ] ) ;
91464: LD_VAR 0 4
91468: PUSH
91469: LD_VAR 0 7
91473: ARRAY
91474: PPUSH
91475: CALL_OW 137
// if f_mines then
91479: LD_VAR 0 21
91483: IFFALSE 91726
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
91485: LD_VAR 0 14
91489: PUSH
91490: LD_INT 1
91492: ARRAY
91493: PPUSH
91494: CALL_OW 247
91498: PUSH
91499: LD_INT 3
91501: EQUAL
91502: PUSH
91503: LD_VAR 0 14
91507: PUSH
91508: LD_INT 1
91510: ARRAY
91511: PUSH
91512: LD_VAR 0 27
91516: IN
91517: NOT
91518: AND
91519: IFFALSE 91726
// begin x := GetX ( tmp [ 1 ] ) ;
91521: LD_ADDR_VAR 0 10
91525: PUSH
91526: LD_VAR 0 14
91530: PUSH
91531: LD_INT 1
91533: ARRAY
91534: PPUSH
91535: CALL_OW 250
91539: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
91540: LD_ADDR_VAR 0 11
91544: PUSH
91545: LD_VAR 0 14
91549: PUSH
91550: LD_INT 1
91552: ARRAY
91553: PPUSH
91554: CALL_OW 251
91558: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
91559: LD_ADDR_VAR 0 12
91563: PUSH
91564: LD_VAR 0 4
91568: PUSH
91569: LD_VAR 0 7
91573: ARRAY
91574: PPUSH
91575: CALL 79776 0 1
91579: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
91580: LD_VAR 0 4
91584: PUSH
91585: LD_VAR 0 7
91589: ARRAY
91590: PPUSH
91591: LD_VAR 0 10
91595: PPUSH
91596: LD_VAR 0 11
91600: PPUSH
91601: LD_VAR 0 14
91605: PUSH
91606: LD_INT 1
91608: ARRAY
91609: PPUSH
91610: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
91614: LD_VAR 0 4
91618: PUSH
91619: LD_VAR 0 7
91623: ARRAY
91624: PPUSH
91625: LD_VAR 0 10
91629: PPUSH
91630: LD_VAR 0 12
91634: PPUSH
91635: LD_INT 7
91637: PPUSH
91638: CALL_OW 272
91642: PPUSH
91643: LD_VAR 0 11
91647: PPUSH
91648: LD_VAR 0 12
91652: PPUSH
91653: LD_INT 7
91655: PPUSH
91656: CALL_OW 273
91660: PPUSH
91661: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
91665: LD_VAR 0 4
91669: PUSH
91670: LD_VAR 0 7
91674: ARRAY
91675: PPUSH
91676: LD_INT 71
91678: PPUSH
91679: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
91683: LD_ADDR_VAR 0 27
91687: PUSH
91688: LD_VAR 0 27
91692: PPUSH
91693: LD_VAR 0 27
91697: PUSH
91698: LD_INT 1
91700: PLUS
91701: PPUSH
91702: LD_VAR 0 14
91706: PUSH
91707: LD_INT 1
91709: ARRAY
91710: PPUSH
91711: CALL_OW 1
91715: ST_TO_ADDR
// attacking := true ;
91716: LD_ADDR_VAR 0 29
91720: PUSH
91721: LD_INT 1
91723: ST_TO_ADDR
// continue ;
91724: GO 89571
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
91726: LD_VAR 0 4
91730: PUSH
91731: LD_VAR 0 7
91735: ARRAY
91736: PPUSH
91737: CALL_OW 257
91741: PUSH
91742: LD_INT 17
91744: EQUAL
91745: PUSH
91746: LD_VAR 0 4
91750: PUSH
91751: LD_VAR 0 7
91755: ARRAY
91756: PPUSH
91757: CALL_OW 110
91761: PUSH
91762: LD_INT 71
91764: EQUAL
91765: NOT
91766: AND
91767: IFFALSE 91913
// begin attacking := false ;
91769: LD_ADDR_VAR 0 29
91773: PUSH
91774: LD_INT 0
91776: ST_TO_ADDR
// k := 5 ;
91777: LD_ADDR_VAR 0 9
91781: PUSH
91782: LD_INT 5
91784: ST_TO_ADDR
// if tmp < k then
91785: LD_VAR 0 14
91789: PUSH
91790: LD_VAR 0 9
91794: LESS
91795: IFFALSE 91807
// k := tmp ;
91797: LD_ADDR_VAR 0 9
91801: PUSH
91802: LD_VAR 0 14
91806: ST_TO_ADDR
// for j = 1 to k do
91807: LD_ADDR_VAR 0 8
91811: PUSH
91812: DOUBLE
91813: LD_INT 1
91815: DEC
91816: ST_TO_ADDR
91817: LD_VAR 0 9
91821: PUSH
91822: FOR_TO
91823: IFFALSE 91911
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
91825: LD_VAR 0 14
91829: PUSH
91830: LD_VAR 0 8
91834: ARRAY
91835: PUSH
91836: LD_VAR 0 14
91840: PPUSH
91841: LD_INT 58
91843: PUSH
91844: EMPTY
91845: LIST
91846: PPUSH
91847: CALL_OW 72
91851: IN
91852: NOT
91853: IFFALSE 91909
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
91855: LD_VAR 0 4
91859: PUSH
91860: LD_VAR 0 7
91864: ARRAY
91865: PPUSH
91866: LD_VAR 0 14
91870: PUSH
91871: LD_VAR 0 8
91875: ARRAY
91876: PPUSH
91877: CALL_OW 115
// attacking := true ;
91881: LD_ADDR_VAR 0 29
91885: PUSH
91886: LD_INT 1
91888: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
91889: LD_VAR 0 4
91893: PUSH
91894: LD_VAR 0 7
91898: ARRAY
91899: PPUSH
91900: LD_INT 71
91902: PPUSH
91903: CALL_OW 109
// continue ;
91907: GO 91822
// end ; end ;
91909: GO 91822
91911: POP
91912: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
91913: LD_VAR 0 4
91917: PUSH
91918: LD_VAR 0 7
91922: ARRAY
91923: PPUSH
91924: CALL_OW 257
91928: PUSH
91929: LD_INT 8
91931: EQUAL
91932: PUSH
91933: LD_VAR 0 4
91937: PUSH
91938: LD_VAR 0 7
91942: ARRAY
91943: PPUSH
91944: CALL_OW 264
91948: PUSH
91949: LD_INT 28
91951: PUSH
91952: LD_INT 45
91954: PUSH
91955: LD_INT 7
91957: PUSH
91958: LD_INT 47
91960: PUSH
91961: EMPTY
91962: LIST
91963: LIST
91964: LIST
91965: LIST
91966: IN
91967: OR
91968: IFFALSE 92224
// begin attacking := false ;
91970: LD_ADDR_VAR 0 29
91974: PUSH
91975: LD_INT 0
91977: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
91978: LD_VAR 0 14
91982: PUSH
91983: LD_INT 1
91985: ARRAY
91986: PPUSH
91987: CALL_OW 266
91991: PUSH
91992: LD_INT 32
91994: PUSH
91995: LD_INT 31
91997: PUSH
91998: LD_INT 33
92000: PUSH
92001: LD_INT 4
92003: PUSH
92004: LD_INT 5
92006: PUSH
92007: EMPTY
92008: LIST
92009: LIST
92010: LIST
92011: LIST
92012: LIST
92013: IN
92014: IFFALSE 92200
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
92016: LD_ADDR_VAR 0 9
92020: PUSH
92021: LD_VAR 0 14
92025: PUSH
92026: LD_INT 1
92028: ARRAY
92029: PPUSH
92030: CALL_OW 266
92034: PPUSH
92035: LD_VAR 0 14
92039: PUSH
92040: LD_INT 1
92042: ARRAY
92043: PPUSH
92044: CALL_OW 250
92048: PPUSH
92049: LD_VAR 0 14
92053: PUSH
92054: LD_INT 1
92056: ARRAY
92057: PPUSH
92058: CALL_OW 251
92062: PPUSH
92063: LD_VAR 0 14
92067: PUSH
92068: LD_INT 1
92070: ARRAY
92071: PPUSH
92072: CALL_OW 254
92076: PPUSH
92077: LD_VAR 0 14
92081: PUSH
92082: LD_INT 1
92084: ARRAY
92085: PPUSH
92086: CALL_OW 248
92090: PPUSH
92091: LD_INT 0
92093: PPUSH
92094: CALL 61146 0 6
92098: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
92099: LD_ADDR_VAR 0 8
92103: PUSH
92104: LD_VAR 0 4
92108: PUSH
92109: LD_VAR 0 7
92113: ARRAY
92114: PPUSH
92115: LD_VAR 0 9
92119: PPUSH
92120: CALL 79816 0 2
92124: ST_TO_ADDR
// if j then
92125: LD_VAR 0 8
92129: IFFALSE 92198
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
92131: LD_VAR 0 8
92135: PUSH
92136: LD_INT 1
92138: ARRAY
92139: PPUSH
92140: LD_VAR 0 8
92144: PUSH
92145: LD_INT 2
92147: ARRAY
92148: PPUSH
92149: CALL_OW 488
92153: IFFALSE 92198
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
92155: LD_VAR 0 4
92159: PUSH
92160: LD_VAR 0 7
92164: ARRAY
92165: PPUSH
92166: LD_VAR 0 8
92170: PUSH
92171: LD_INT 1
92173: ARRAY
92174: PPUSH
92175: LD_VAR 0 8
92179: PUSH
92180: LD_INT 2
92182: ARRAY
92183: PPUSH
92184: CALL_OW 116
// attacking := true ;
92188: LD_ADDR_VAR 0 29
92192: PUSH
92193: LD_INT 1
92195: ST_TO_ADDR
// continue ;
92196: GO 89571
// end ; end else
92198: GO 92224
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
92200: LD_VAR 0 4
92204: PUSH
92205: LD_VAR 0 7
92209: ARRAY
92210: PPUSH
92211: LD_VAR 0 14
92215: PUSH
92216: LD_INT 1
92218: ARRAY
92219: PPUSH
92220: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
92224: LD_VAR 0 4
92228: PUSH
92229: LD_VAR 0 7
92233: ARRAY
92234: PPUSH
92235: CALL_OW 265
92239: PUSH
92240: LD_INT 11
92242: EQUAL
92243: IFFALSE 92521
// begin k := 10 ;
92245: LD_ADDR_VAR 0 9
92249: PUSH
92250: LD_INT 10
92252: ST_TO_ADDR
// x := 0 ;
92253: LD_ADDR_VAR 0 10
92257: PUSH
92258: LD_INT 0
92260: ST_TO_ADDR
// if tmp < k then
92261: LD_VAR 0 14
92265: PUSH
92266: LD_VAR 0 9
92270: LESS
92271: IFFALSE 92283
// k := tmp ;
92273: LD_ADDR_VAR 0 9
92277: PUSH
92278: LD_VAR 0 14
92282: ST_TO_ADDR
// for j = k downto 1 do
92283: LD_ADDR_VAR 0 8
92287: PUSH
92288: DOUBLE
92289: LD_VAR 0 9
92293: INC
92294: ST_TO_ADDR
92295: LD_INT 1
92297: PUSH
92298: FOR_DOWNTO
92299: IFFALSE 92374
// begin if GetType ( tmp [ j ] ) = unit_human then
92301: LD_VAR 0 14
92305: PUSH
92306: LD_VAR 0 8
92310: ARRAY
92311: PPUSH
92312: CALL_OW 247
92316: PUSH
92317: LD_INT 1
92319: EQUAL
92320: IFFALSE 92372
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
92322: LD_VAR 0 4
92326: PUSH
92327: LD_VAR 0 7
92331: ARRAY
92332: PPUSH
92333: LD_VAR 0 14
92337: PUSH
92338: LD_VAR 0 8
92342: ARRAY
92343: PPUSH
92344: CALL 80087 0 2
// x := tmp [ j ] ;
92348: LD_ADDR_VAR 0 10
92352: PUSH
92353: LD_VAR 0 14
92357: PUSH
92358: LD_VAR 0 8
92362: ARRAY
92363: ST_TO_ADDR
// attacking := true ;
92364: LD_ADDR_VAR 0 29
92368: PUSH
92369: LD_INT 1
92371: ST_TO_ADDR
// end ; end ;
92372: GO 92298
92374: POP
92375: POP
// if not x then
92376: LD_VAR 0 10
92380: NOT
92381: IFFALSE 92521
// begin attacking := true ;
92383: LD_ADDR_VAR 0 29
92387: PUSH
92388: LD_INT 1
92390: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
92391: LD_VAR 0 4
92395: PUSH
92396: LD_VAR 0 7
92400: ARRAY
92401: PPUSH
92402: CALL_OW 250
92406: PPUSH
92407: LD_VAR 0 4
92411: PUSH
92412: LD_VAR 0 7
92416: ARRAY
92417: PPUSH
92418: CALL_OW 251
92422: PPUSH
92423: CALL_OW 546
92427: PUSH
92428: LD_INT 2
92430: ARRAY
92431: PUSH
92432: LD_VAR 0 14
92436: PUSH
92437: LD_INT 1
92439: ARRAY
92440: PPUSH
92441: CALL_OW 250
92445: PPUSH
92446: LD_VAR 0 14
92450: PUSH
92451: LD_INT 1
92453: ARRAY
92454: PPUSH
92455: CALL_OW 251
92459: PPUSH
92460: CALL_OW 546
92464: PUSH
92465: LD_INT 2
92467: ARRAY
92468: EQUAL
92469: IFFALSE 92497
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
92471: LD_VAR 0 4
92475: PUSH
92476: LD_VAR 0 7
92480: ARRAY
92481: PPUSH
92482: LD_VAR 0 14
92486: PUSH
92487: LD_INT 1
92489: ARRAY
92490: PPUSH
92491: CALL 80087 0 2
92495: GO 92521
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
92497: LD_VAR 0 4
92501: PUSH
92502: LD_VAR 0 7
92506: ARRAY
92507: PPUSH
92508: LD_VAR 0 14
92512: PUSH
92513: LD_INT 1
92515: ARRAY
92516: PPUSH
92517: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
92521: LD_VAR 0 4
92525: PUSH
92526: LD_VAR 0 7
92530: ARRAY
92531: PPUSH
92532: CALL_OW 264
92536: PUSH
92537: LD_INT 29
92539: EQUAL
92540: IFFALSE 92906
// begin if WantsToAttack ( group [ i ] ) in bombed then
92542: LD_VAR 0 4
92546: PUSH
92547: LD_VAR 0 7
92551: ARRAY
92552: PPUSH
92553: CALL_OW 319
92557: PUSH
92558: LD_VAR 0 28
92562: IN
92563: IFFALSE 92567
// continue ;
92565: GO 89571
// k := 8 ;
92567: LD_ADDR_VAR 0 9
92571: PUSH
92572: LD_INT 8
92574: ST_TO_ADDR
// x := 0 ;
92575: LD_ADDR_VAR 0 10
92579: PUSH
92580: LD_INT 0
92582: ST_TO_ADDR
// if tmp < k then
92583: LD_VAR 0 14
92587: PUSH
92588: LD_VAR 0 9
92592: LESS
92593: IFFALSE 92605
// k := tmp ;
92595: LD_ADDR_VAR 0 9
92599: PUSH
92600: LD_VAR 0 14
92604: ST_TO_ADDR
// for j = 1 to k do
92605: LD_ADDR_VAR 0 8
92609: PUSH
92610: DOUBLE
92611: LD_INT 1
92613: DEC
92614: ST_TO_ADDR
92615: LD_VAR 0 9
92619: PUSH
92620: FOR_TO
92621: IFFALSE 92753
// begin if GetType ( tmp [ j ] ) = unit_building then
92623: LD_VAR 0 14
92627: PUSH
92628: LD_VAR 0 8
92632: ARRAY
92633: PPUSH
92634: CALL_OW 247
92638: PUSH
92639: LD_INT 3
92641: EQUAL
92642: IFFALSE 92751
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
92644: LD_VAR 0 14
92648: PUSH
92649: LD_VAR 0 8
92653: ARRAY
92654: PUSH
92655: LD_VAR 0 28
92659: IN
92660: NOT
92661: PUSH
92662: LD_VAR 0 14
92666: PUSH
92667: LD_VAR 0 8
92671: ARRAY
92672: PPUSH
92673: CALL_OW 313
92677: AND
92678: IFFALSE 92751
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
92680: LD_VAR 0 4
92684: PUSH
92685: LD_VAR 0 7
92689: ARRAY
92690: PPUSH
92691: LD_VAR 0 14
92695: PUSH
92696: LD_VAR 0 8
92700: ARRAY
92701: PPUSH
92702: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
92706: LD_ADDR_VAR 0 28
92710: PUSH
92711: LD_VAR 0 28
92715: PPUSH
92716: LD_VAR 0 28
92720: PUSH
92721: LD_INT 1
92723: PLUS
92724: PPUSH
92725: LD_VAR 0 14
92729: PUSH
92730: LD_VAR 0 8
92734: ARRAY
92735: PPUSH
92736: CALL_OW 1
92740: ST_TO_ADDR
// attacking := true ;
92741: LD_ADDR_VAR 0 29
92745: PUSH
92746: LD_INT 1
92748: ST_TO_ADDR
// break ;
92749: GO 92753
// end ; end ;
92751: GO 92620
92753: POP
92754: POP
// if not attacking and f_attack_depot then
92755: LD_VAR 0 29
92759: NOT
92760: PUSH
92761: LD_VAR 0 25
92765: AND
92766: IFFALSE 92861
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
92768: LD_ADDR_VAR 0 13
92772: PUSH
92773: LD_VAR 0 14
92777: PPUSH
92778: LD_INT 2
92780: PUSH
92781: LD_INT 30
92783: PUSH
92784: LD_INT 0
92786: PUSH
92787: EMPTY
92788: LIST
92789: LIST
92790: PUSH
92791: LD_INT 30
92793: PUSH
92794: LD_INT 1
92796: PUSH
92797: EMPTY
92798: LIST
92799: LIST
92800: PUSH
92801: EMPTY
92802: LIST
92803: LIST
92804: LIST
92805: PPUSH
92806: CALL_OW 72
92810: ST_TO_ADDR
// if z then
92811: LD_VAR 0 13
92815: IFFALSE 92861
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
92817: LD_VAR 0 4
92821: PUSH
92822: LD_VAR 0 7
92826: ARRAY
92827: PPUSH
92828: LD_VAR 0 13
92832: PPUSH
92833: LD_VAR 0 4
92837: PUSH
92838: LD_VAR 0 7
92842: ARRAY
92843: PPUSH
92844: CALL_OW 74
92848: PPUSH
92849: CALL_OW 115
// attacking := true ;
92853: LD_ADDR_VAR 0 29
92857: PUSH
92858: LD_INT 1
92860: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
92861: LD_VAR 0 4
92865: PUSH
92866: LD_VAR 0 7
92870: ARRAY
92871: PPUSH
92872: CALL_OW 256
92876: PUSH
92877: LD_INT 500
92879: LESS
92880: IFFALSE 92906
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
92882: LD_VAR 0 4
92886: PUSH
92887: LD_VAR 0 7
92891: ARRAY
92892: PPUSH
92893: LD_VAR 0 14
92897: PUSH
92898: LD_INT 1
92900: ARRAY
92901: PPUSH
92902: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
92906: LD_VAR 0 4
92910: PUSH
92911: LD_VAR 0 7
92915: ARRAY
92916: PPUSH
92917: CALL_OW 264
92921: PUSH
92922: LD_INT 49
92924: EQUAL
92925: IFFALSE 93046
// begin if not HasTask ( group [ i ] ) then
92927: LD_VAR 0 4
92931: PUSH
92932: LD_VAR 0 7
92936: ARRAY
92937: PPUSH
92938: CALL_OW 314
92942: NOT
92943: IFFALSE 93046
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
92945: LD_ADDR_VAR 0 9
92949: PUSH
92950: LD_INT 81
92952: PUSH
92953: LD_VAR 0 4
92957: PUSH
92958: LD_VAR 0 7
92962: ARRAY
92963: PPUSH
92964: CALL_OW 255
92968: PUSH
92969: EMPTY
92970: LIST
92971: LIST
92972: PPUSH
92973: CALL_OW 69
92977: PPUSH
92978: LD_VAR 0 4
92982: PUSH
92983: LD_VAR 0 7
92987: ARRAY
92988: PPUSH
92989: CALL_OW 74
92993: ST_TO_ADDR
// if k then
92994: LD_VAR 0 9
92998: IFFALSE 93046
// if GetDistUnits ( group [ i ] , k ) > 10 then
93000: LD_VAR 0 4
93004: PUSH
93005: LD_VAR 0 7
93009: ARRAY
93010: PPUSH
93011: LD_VAR 0 9
93015: PPUSH
93016: CALL_OW 296
93020: PUSH
93021: LD_INT 10
93023: GREATER
93024: IFFALSE 93046
// ComMoveUnit ( group [ i ] , k ) ;
93026: LD_VAR 0 4
93030: PUSH
93031: LD_VAR 0 7
93035: ARRAY
93036: PPUSH
93037: LD_VAR 0 9
93041: PPUSH
93042: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
93046: LD_VAR 0 4
93050: PUSH
93051: LD_VAR 0 7
93055: ARRAY
93056: PPUSH
93057: CALL_OW 256
93061: PUSH
93062: LD_INT 250
93064: LESS
93065: PUSH
93066: LD_VAR 0 4
93070: PUSH
93071: LD_VAR 0 7
93075: ARRAY
93076: PUSH
93077: LD_INT 21
93079: PUSH
93080: LD_INT 2
93082: PUSH
93083: EMPTY
93084: LIST
93085: LIST
93086: PUSH
93087: LD_INT 23
93089: PUSH
93090: LD_INT 2
93092: PUSH
93093: EMPTY
93094: LIST
93095: LIST
93096: PUSH
93097: EMPTY
93098: LIST
93099: LIST
93100: PPUSH
93101: CALL_OW 69
93105: IN
93106: AND
93107: IFFALSE 93232
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
93109: LD_ADDR_VAR 0 9
93113: PUSH
93114: LD_OWVAR 3
93118: PUSH
93119: LD_VAR 0 4
93123: PUSH
93124: LD_VAR 0 7
93128: ARRAY
93129: DIFF
93130: PPUSH
93131: LD_VAR 0 4
93135: PUSH
93136: LD_VAR 0 7
93140: ARRAY
93141: PPUSH
93142: CALL_OW 74
93146: ST_TO_ADDR
// if not k then
93147: LD_VAR 0 9
93151: NOT
93152: IFFALSE 93156
// continue ;
93154: GO 89571
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
93156: LD_VAR 0 9
93160: PUSH
93161: LD_INT 81
93163: PUSH
93164: LD_VAR 0 4
93168: PUSH
93169: LD_VAR 0 7
93173: ARRAY
93174: PPUSH
93175: CALL_OW 255
93179: PUSH
93180: EMPTY
93181: LIST
93182: LIST
93183: PPUSH
93184: CALL_OW 69
93188: IN
93189: PUSH
93190: LD_VAR 0 9
93194: PPUSH
93195: LD_VAR 0 4
93199: PUSH
93200: LD_VAR 0 7
93204: ARRAY
93205: PPUSH
93206: CALL_OW 296
93210: PUSH
93211: LD_INT 5
93213: LESS
93214: AND
93215: IFFALSE 93232
// ComAutodestruct ( group [ i ] ) ;
93217: LD_VAR 0 4
93221: PUSH
93222: LD_VAR 0 7
93226: ARRAY
93227: PPUSH
93228: CALL 79985 0 1
// end ; if f_attack_depot then
93232: LD_VAR 0 25
93236: IFFALSE 93348
// begin k := 6 ;
93238: LD_ADDR_VAR 0 9
93242: PUSH
93243: LD_INT 6
93245: ST_TO_ADDR
// if tmp < k then
93246: LD_VAR 0 14
93250: PUSH
93251: LD_VAR 0 9
93255: LESS
93256: IFFALSE 93268
// k := tmp ;
93258: LD_ADDR_VAR 0 9
93262: PUSH
93263: LD_VAR 0 14
93267: ST_TO_ADDR
// for j = 1 to k do
93268: LD_ADDR_VAR 0 8
93272: PUSH
93273: DOUBLE
93274: LD_INT 1
93276: DEC
93277: ST_TO_ADDR
93278: LD_VAR 0 9
93282: PUSH
93283: FOR_TO
93284: IFFALSE 93346
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
93286: LD_VAR 0 8
93290: PPUSH
93291: CALL_OW 266
93295: PUSH
93296: LD_INT 0
93298: PUSH
93299: LD_INT 1
93301: PUSH
93302: EMPTY
93303: LIST
93304: LIST
93305: IN
93306: IFFALSE 93344
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
93308: LD_VAR 0 4
93312: PUSH
93313: LD_VAR 0 7
93317: ARRAY
93318: PPUSH
93319: LD_VAR 0 14
93323: PUSH
93324: LD_VAR 0 8
93328: ARRAY
93329: PPUSH
93330: CALL_OW 115
// attacking := true ;
93334: LD_ADDR_VAR 0 29
93338: PUSH
93339: LD_INT 1
93341: ST_TO_ADDR
// break ;
93342: GO 93346
// end ;
93344: GO 93283
93346: POP
93347: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
93348: LD_VAR 0 4
93352: PUSH
93353: LD_VAR 0 7
93357: ARRAY
93358: PPUSH
93359: CALL_OW 302
93363: PUSH
93364: LD_VAR 0 29
93368: NOT
93369: AND
93370: IFFALSE 93692
// begin if GetTag ( group [ i ] ) = 71 then
93372: LD_VAR 0 4
93376: PUSH
93377: LD_VAR 0 7
93381: ARRAY
93382: PPUSH
93383: CALL_OW 110
93387: PUSH
93388: LD_INT 71
93390: EQUAL
93391: IFFALSE 93432
// begin if HasTask ( group [ i ] ) then
93393: LD_VAR 0 4
93397: PUSH
93398: LD_VAR 0 7
93402: ARRAY
93403: PPUSH
93404: CALL_OW 314
93408: IFFALSE 93414
// continue else
93410: GO 89571
93412: GO 93432
// SetTag ( group [ i ] , 0 ) ;
93414: LD_VAR 0 4
93418: PUSH
93419: LD_VAR 0 7
93423: ARRAY
93424: PPUSH
93425: LD_INT 0
93427: PPUSH
93428: CALL_OW 109
// end ; k := 8 ;
93432: LD_ADDR_VAR 0 9
93436: PUSH
93437: LD_INT 8
93439: ST_TO_ADDR
// x := 0 ;
93440: LD_ADDR_VAR 0 10
93444: PUSH
93445: LD_INT 0
93447: ST_TO_ADDR
// if tmp < k then
93448: LD_VAR 0 14
93452: PUSH
93453: LD_VAR 0 9
93457: LESS
93458: IFFALSE 93470
// k := tmp ;
93460: LD_ADDR_VAR 0 9
93464: PUSH
93465: LD_VAR 0 14
93469: ST_TO_ADDR
// for j = 1 to k do
93470: LD_ADDR_VAR 0 8
93474: PUSH
93475: DOUBLE
93476: LD_INT 1
93478: DEC
93479: ST_TO_ADDR
93480: LD_VAR 0 9
93484: PUSH
93485: FOR_TO
93486: IFFALSE 93584
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
93488: LD_VAR 0 14
93492: PUSH
93493: LD_VAR 0 8
93497: ARRAY
93498: PPUSH
93499: CALL_OW 247
93503: PUSH
93504: LD_INT 1
93506: EQUAL
93507: PUSH
93508: LD_VAR 0 14
93512: PUSH
93513: LD_VAR 0 8
93517: ARRAY
93518: PPUSH
93519: CALL_OW 256
93523: PUSH
93524: LD_INT 250
93526: LESS
93527: PUSH
93528: LD_VAR 0 20
93532: AND
93533: PUSH
93534: LD_VAR 0 20
93538: NOT
93539: PUSH
93540: LD_VAR 0 14
93544: PUSH
93545: LD_VAR 0 8
93549: ARRAY
93550: PPUSH
93551: CALL_OW 256
93555: PUSH
93556: LD_INT 250
93558: GREATEREQUAL
93559: AND
93560: OR
93561: AND
93562: IFFALSE 93582
// begin x := tmp [ j ] ;
93564: LD_ADDR_VAR 0 10
93568: PUSH
93569: LD_VAR 0 14
93573: PUSH
93574: LD_VAR 0 8
93578: ARRAY
93579: ST_TO_ADDR
// break ;
93580: GO 93584
// end ;
93582: GO 93485
93584: POP
93585: POP
// if x then
93586: LD_VAR 0 10
93590: IFFALSE 93614
// ComAttackUnit ( group [ i ] , x ) else
93592: LD_VAR 0 4
93596: PUSH
93597: LD_VAR 0 7
93601: ARRAY
93602: PPUSH
93603: LD_VAR 0 10
93607: PPUSH
93608: CALL_OW 115
93612: GO 93638
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
93614: LD_VAR 0 4
93618: PUSH
93619: LD_VAR 0 7
93623: ARRAY
93624: PPUSH
93625: LD_VAR 0 14
93629: PUSH
93630: LD_INT 1
93632: ARRAY
93633: PPUSH
93634: CALL_OW 115
// if not HasTask ( group [ i ] ) then
93638: LD_VAR 0 4
93642: PUSH
93643: LD_VAR 0 7
93647: ARRAY
93648: PPUSH
93649: CALL_OW 314
93653: NOT
93654: IFFALSE 93692
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
93656: LD_VAR 0 4
93660: PUSH
93661: LD_VAR 0 7
93665: ARRAY
93666: PPUSH
93667: LD_VAR 0 14
93671: PPUSH
93672: LD_VAR 0 4
93676: PUSH
93677: LD_VAR 0 7
93681: ARRAY
93682: PPUSH
93683: CALL_OW 74
93687: PPUSH
93688: CALL_OW 115
// end ; end ; end ;
93692: GO 89571
93694: POP
93695: POP
// wait ( 0 0$2 ) ;
93696: LD_INT 70
93698: PPUSH
93699: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
93703: LD_VAR 0 4
93707: NOT
93708: PUSH
93709: LD_VAR 0 4
93713: PUSH
93714: EMPTY
93715: EQUAL
93716: OR
93717: PUSH
93718: LD_INT 81
93720: PUSH
93721: LD_VAR 0 35
93725: PUSH
93726: EMPTY
93727: LIST
93728: LIST
93729: PPUSH
93730: CALL_OW 69
93734: NOT
93735: OR
93736: IFFALSE 89556
// end ;
93738: LD_VAR 0 2
93742: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
93743: LD_INT 0
93745: PPUSH
93746: PPUSH
93747: PPUSH
93748: PPUSH
93749: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
93750: LD_VAR 0 1
93754: NOT
93755: PUSH
93756: LD_EXP 89
93760: PUSH
93761: LD_VAR 0 1
93765: ARRAY
93766: NOT
93767: OR
93768: PUSH
93769: LD_VAR 0 2
93773: NOT
93774: OR
93775: PUSH
93776: LD_VAR 0 3
93780: NOT
93781: OR
93782: IFFALSE 93786
// exit ;
93784: GO 94299
// side := mc_sides [ base ] ;
93786: LD_ADDR_VAR 0 6
93790: PUSH
93791: LD_EXP 115
93795: PUSH
93796: LD_VAR 0 1
93800: ARRAY
93801: ST_TO_ADDR
// if not side then
93802: LD_VAR 0 6
93806: NOT
93807: IFFALSE 93811
// exit ;
93809: GO 94299
// for i in solds do
93811: LD_ADDR_VAR 0 7
93815: PUSH
93816: LD_VAR 0 2
93820: PUSH
93821: FOR_IN
93822: IFFALSE 93883
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
93824: LD_VAR 0 7
93828: PPUSH
93829: CALL_OW 310
93833: PPUSH
93834: CALL_OW 266
93838: PUSH
93839: LD_INT 32
93841: PUSH
93842: LD_INT 31
93844: PUSH
93845: EMPTY
93846: LIST
93847: LIST
93848: IN
93849: IFFALSE 93869
// solds := solds diff i else
93851: LD_ADDR_VAR 0 2
93855: PUSH
93856: LD_VAR 0 2
93860: PUSH
93861: LD_VAR 0 7
93865: DIFF
93866: ST_TO_ADDR
93867: GO 93881
// SetTag ( i , 18 ) ;
93869: LD_VAR 0 7
93873: PPUSH
93874: LD_INT 18
93876: PPUSH
93877: CALL_OW 109
93881: GO 93821
93883: POP
93884: POP
// if not solds then
93885: LD_VAR 0 2
93889: NOT
93890: IFFALSE 93894
// exit ;
93892: GO 94299
// repeat wait ( 0 0$1 ) ;
93894: LD_INT 35
93896: PPUSH
93897: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
93901: LD_ADDR_VAR 0 5
93905: PUSH
93906: LD_VAR 0 6
93910: PPUSH
93911: LD_VAR 0 3
93915: PPUSH
93916: CALL 49700 0 2
93920: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
93921: LD_EXP 89
93925: PUSH
93926: LD_VAR 0 1
93930: ARRAY
93931: NOT
93932: PUSH
93933: LD_EXP 89
93937: PUSH
93938: LD_VAR 0 1
93942: ARRAY
93943: PUSH
93944: EMPTY
93945: EQUAL
93946: OR
93947: IFFALSE 93984
// begin for i in solds do
93949: LD_ADDR_VAR 0 7
93953: PUSH
93954: LD_VAR 0 2
93958: PUSH
93959: FOR_IN
93960: IFFALSE 93973
// ComStop ( i ) ;
93962: LD_VAR 0 7
93966: PPUSH
93967: CALL_OW 141
93971: GO 93959
93973: POP
93974: POP
// solds := [ ] ;
93975: LD_ADDR_VAR 0 2
93979: PUSH
93980: EMPTY
93981: ST_TO_ADDR
// exit ;
93982: GO 94299
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
93984: LD_VAR 0 5
93988: NOT
93989: PUSH
93990: LD_VAR 0 5
93994: PUSH
93995: LD_INT 3
93997: GREATER
93998: OR
93999: PUSH
94000: LD_EXP 111
94004: PUSH
94005: LD_VAR 0 1
94009: ARRAY
94010: OR
94011: IFFALSE 94052
// begin for i in solds do
94013: LD_ADDR_VAR 0 7
94017: PUSH
94018: LD_VAR 0 2
94022: PUSH
94023: FOR_IN
94024: IFFALSE 94048
// if HasTask ( i ) then
94026: LD_VAR 0 7
94030: PPUSH
94031: CALL_OW 314
94035: IFFALSE 94046
// ComStop ( i ) ;
94037: LD_VAR 0 7
94041: PPUSH
94042: CALL_OW 141
94046: GO 94023
94048: POP
94049: POP
// break ;
94050: GO 94287
// end ; for i in solds do
94052: LD_ADDR_VAR 0 7
94056: PUSH
94057: LD_VAR 0 2
94061: PUSH
94062: FOR_IN
94063: IFFALSE 94279
// begin if IsInUnit ( i ) then
94065: LD_VAR 0 7
94069: PPUSH
94070: CALL_OW 310
94074: IFFALSE 94085
// ComExitBuilding ( i ) ;
94076: LD_VAR 0 7
94080: PPUSH
94081: CALL_OW 122
// if GetLives ( i ) > 333 then
94085: LD_VAR 0 7
94089: PPUSH
94090: CALL_OW 256
94094: PUSH
94095: LD_INT 333
94097: GREATER
94098: IFFALSE 94126
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
94100: LD_VAR 0 7
94104: PPUSH
94105: LD_VAR 0 5
94109: PPUSH
94110: LD_VAR 0 7
94114: PPUSH
94115: CALL_OW 74
94119: PPUSH
94120: CALL_OW 115
94124: GO 94277
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
94126: LD_ADDR_VAR 0 8
94130: PUSH
94131: LD_EXP 89
94135: PUSH
94136: LD_VAR 0 1
94140: ARRAY
94141: PPUSH
94142: LD_INT 2
94144: PUSH
94145: LD_INT 30
94147: PUSH
94148: LD_INT 0
94150: PUSH
94151: EMPTY
94152: LIST
94153: LIST
94154: PUSH
94155: LD_INT 30
94157: PUSH
94158: LD_INT 1
94160: PUSH
94161: EMPTY
94162: LIST
94163: LIST
94164: PUSH
94165: LD_INT 30
94167: PUSH
94168: LD_INT 6
94170: PUSH
94171: EMPTY
94172: LIST
94173: LIST
94174: PUSH
94175: EMPTY
94176: LIST
94177: LIST
94178: LIST
94179: LIST
94180: PPUSH
94181: CALL_OW 72
94185: PPUSH
94186: LD_VAR 0 7
94190: PPUSH
94191: CALL_OW 74
94195: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
94196: LD_VAR 0 7
94200: PPUSH
94201: LD_VAR 0 8
94205: PPUSH
94206: CALL_OW 250
94210: PPUSH
94211: LD_INT 3
94213: PPUSH
94214: LD_INT 5
94216: PPUSH
94217: CALL_OW 272
94221: PPUSH
94222: LD_VAR 0 8
94226: PPUSH
94227: CALL_OW 251
94231: PPUSH
94232: LD_INT 3
94234: PPUSH
94235: LD_INT 5
94237: PPUSH
94238: CALL_OW 273
94242: PPUSH
94243: CALL_OW 111
// SetTag ( i , 0 ) ;
94247: LD_VAR 0 7
94251: PPUSH
94252: LD_INT 0
94254: PPUSH
94255: CALL_OW 109
// solds := solds diff i ;
94259: LD_ADDR_VAR 0 2
94263: PUSH
94264: LD_VAR 0 2
94268: PUSH
94269: LD_VAR 0 7
94273: DIFF
94274: ST_TO_ADDR
// continue ;
94275: GO 94062
// end ; end ;
94277: GO 94062
94279: POP
94280: POP
// until solds ;
94281: LD_VAR 0 2
94285: IFFALSE 93894
// MC_Reset ( base , 18 ) ;
94287: LD_VAR 0 1
94291: PPUSH
94292: LD_INT 18
94294: PPUSH
94295: CALL 26741 0 2
// end ;
94299: LD_VAR 0 4
94303: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
94304: LD_INT 0
94306: PPUSH
94307: PPUSH
94308: PPUSH
94309: PPUSH
94310: PPUSH
94311: PPUSH
94312: PPUSH
94313: PPUSH
94314: PPUSH
94315: PPUSH
94316: PPUSH
94317: PPUSH
94318: PPUSH
94319: PPUSH
94320: PPUSH
94321: PPUSH
94322: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
94323: LD_ADDR_VAR 0 13
94327: PUSH
94328: LD_EXP 89
94332: PUSH
94333: LD_VAR 0 1
94337: ARRAY
94338: PPUSH
94339: LD_INT 25
94341: PUSH
94342: LD_INT 3
94344: PUSH
94345: EMPTY
94346: LIST
94347: LIST
94348: PPUSH
94349: CALL_OW 72
94353: ST_TO_ADDR
// if mc_remote_driver [ base ] then
94354: LD_EXP 129
94358: PUSH
94359: LD_VAR 0 1
94363: ARRAY
94364: IFFALSE 94388
// mechs := mechs diff mc_remote_driver [ base ] ;
94366: LD_ADDR_VAR 0 13
94370: PUSH
94371: LD_VAR 0 13
94375: PUSH
94376: LD_EXP 129
94380: PUSH
94381: LD_VAR 0 1
94385: ARRAY
94386: DIFF
94387: ST_TO_ADDR
// for i in mechs do
94388: LD_ADDR_VAR 0 5
94392: PUSH
94393: LD_VAR 0 13
94397: PUSH
94398: FOR_IN
94399: IFFALSE 94434
// if GetTag ( i ) > 0 then
94401: LD_VAR 0 5
94405: PPUSH
94406: CALL_OW 110
94410: PUSH
94411: LD_INT 0
94413: GREATER
94414: IFFALSE 94432
// mechs := mechs diff i ;
94416: LD_ADDR_VAR 0 13
94420: PUSH
94421: LD_VAR 0 13
94425: PUSH
94426: LD_VAR 0 5
94430: DIFF
94431: ST_TO_ADDR
94432: GO 94398
94434: POP
94435: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
94436: LD_ADDR_VAR 0 9
94440: PUSH
94441: LD_EXP 89
94445: PUSH
94446: LD_VAR 0 1
94450: ARRAY
94451: PPUSH
94452: LD_INT 2
94454: PUSH
94455: LD_INT 25
94457: PUSH
94458: LD_INT 1
94460: PUSH
94461: EMPTY
94462: LIST
94463: LIST
94464: PUSH
94465: LD_INT 25
94467: PUSH
94468: LD_INT 5
94470: PUSH
94471: EMPTY
94472: LIST
94473: LIST
94474: PUSH
94475: LD_INT 25
94477: PUSH
94478: LD_INT 8
94480: PUSH
94481: EMPTY
94482: LIST
94483: LIST
94484: PUSH
94485: LD_INT 25
94487: PUSH
94488: LD_INT 9
94490: PUSH
94491: EMPTY
94492: LIST
94493: LIST
94494: PUSH
94495: EMPTY
94496: LIST
94497: LIST
94498: LIST
94499: LIST
94500: LIST
94501: PPUSH
94502: CALL_OW 72
94506: ST_TO_ADDR
// if not defenders and not solds then
94507: LD_VAR 0 2
94511: NOT
94512: PUSH
94513: LD_VAR 0 9
94517: NOT
94518: AND
94519: IFFALSE 94523
// exit ;
94521: GO 96149
// depot_under_attack := false ;
94523: LD_ADDR_VAR 0 17
94527: PUSH
94528: LD_INT 0
94530: ST_TO_ADDR
// sold_defenders := [ ] ;
94531: LD_ADDR_VAR 0 18
94535: PUSH
94536: EMPTY
94537: ST_TO_ADDR
// if mechs then
94538: LD_VAR 0 13
94542: IFFALSE 94671
// for i in defenders do
94544: LD_ADDR_VAR 0 5
94548: PUSH
94549: LD_VAR 0 2
94553: PUSH
94554: FOR_IN
94555: IFFALSE 94669
// begin SetTag ( i , 20 ) ;
94557: LD_VAR 0 5
94561: PPUSH
94562: LD_INT 20
94564: PPUSH
94565: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
94569: LD_VAR 0 5
94573: PPUSH
94574: CALL_OW 263
94578: PUSH
94579: LD_INT 1
94581: EQUAL
94582: PUSH
94583: LD_VAR 0 5
94587: PPUSH
94588: CALL_OW 311
94592: NOT
94593: AND
94594: PUSH
94595: LD_VAR 0 13
94599: AND
94600: IFFALSE 94667
// begin un := mechs [ 1 ] ;
94602: LD_ADDR_VAR 0 11
94606: PUSH
94607: LD_VAR 0 13
94611: PUSH
94612: LD_INT 1
94614: ARRAY
94615: ST_TO_ADDR
// ComExitBuilding ( un ) ;
94616: LD_VAR 0 11
94620: PPUSH
94621: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
94625: LD_VAR 0 11
94629: PPUSH
94630: LD_VAR 0 5
94634: PPUSH
94635: CALL_OW 180
// SetTag ( un , 19 ) ;
94639: LD_VAR 0 11
94643: PPUSH
94644: LD_INT 19
94646: PPUSH
94647: CALL_OW 109
// mechs := mechs diff un ;
94651: LD_ADDR_VAR 0 13
94655: PUSH
94656: LD_VAR 0 13
94660: PUSH
94661: LD_VAR 0 11
94665: DIFF
94666: ST_TO_ADDR
// end ; end ;
94667: GO 94554
94669: POP
94670: POP
// if solds then
94671: LD_VAR 0 9
94675: IFFALSE 94734
// for i in solds do
94677: LD_ADDR_VAR 0 5
94681: PUSH
94682: LD_VAR 0 9
94686: PUSH
94687: FOR_IN
94688: IFFALSE 94732
// if not GetTag ( i ) then
94690: LD_VAR 0 5
94694: PPUSH
94695: CALL_OW 110
94699: NOT
94700: IFFALSE 94730
// begin defenders := defenders union i ;
94702: LD_ADDR_VAR 0 2
94706: PUSH
94707: LD_VAR 0 2
94711: PUSH
94712: LD_VAR 0 5
94716: UNION
94717: ST_TO_ADDR
// SetTag ( i , 18 ) ;
94718: LD_VAR 0 5
94722: PPUSH
94723: LD_INT 18
94725: PPUSH
94726: CALL_OW 109
// end ;
94730: GO 94687
94732: POP
94733: POP
// repeat wait ( 0 0$1 ) ;
94734: LD_INT 35
94736: PPUSH
94737: CALL_OW 67
// enemy := mc_scan [ base ] ;
94741: LD_ADDR_VAR 0 3
94745: PUSH
94746: LD_EXP 112
94750: PUSH
94751: LD_VAR 0 1
94755: ARRAY
94756: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
94757: LD_EXP 89
94761: PUSH
94762: LD_VAR 0 1
94766: ARRAY
94767: NOT
94768: PUSH
94769: LD_EXP 89
94773: PUSH
94774: LD_VAR 0 1
94778: ARRAY
94779: PUSH
94780: EMPTY
94781: EQUAL
94782: OR
94783: IFFALSE 94820
// begin for i in defenders do
94785: LD_ADDR_VAR 0 5
94789: PUSH
94790: LD_VAR 0 2
94794: PUSH
94795: FOR_IN
94796: IFFALSE 94809
// ComStop ( i ) ;
94798: LD_VAR 0 5
94802: PPUSH
94803: CALL_OW 141
94807: GO 94795
94809: POP
94810: POP
// defenders := [ ] ;
94811: LD_ADDR_VAR 0 2
94815: PUSH
94816: EMPTY
94817: ST_TO_ADDR
// exit ;
94818: GO 96149
// end ; for i in defenders do
94820: LD_ADDR_VAR 0 5
94824: PUSH
94825: LD_VAR 0 2
94829: PUSH
94830: FOR_IN
94831: IFFALSE 95649
// begin e := NearestUnitToUnit ( enemy , i ) ;
94833: LD_ADDR_VAR 0 14
94837: PUSH
94838: LD_VAR 0 3
94842: PPUSH
94843: LD_VAR 0 5
94847: PPUSH
94848: CALL_OW 74
94852: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
94853: LD_ADDR_VAR 0 8
94857: PUSH
94858: LD_EXP 89
94862: PUSH
94863: LD_VAR 0 1
94867: ARRAY
94868: PPUSH
94869: LD_INT 2
94871: PUSH
94872: LD_INT 30
94874: PUSH
94875: LD_INT 0
94877: PUSH
94878: EMPTY
94879: LIST
94880: LIST
94881: PUSH
94882: LD_INT 30
94884: PUSH
94885: LD_INT 1
94887: PUSH
94888: EMPTY
94889: LIST
94890: LIST
94891: PUSH
94892: EMPTY
94893: LIST
94894: LIST
94895: LIST
94896: PPUSH
94897: CALL_OW 72
94901: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
94902: LD_ADDR_VAR 0 17
94906: PUSH
94907: LD_VAR 0 8
94911: NOT
94912: PUSH
94913: LD_VAR 0 8
94917: PPUSH
94918: LD_INT 3
94920: PUSH
94921: LD_INT 24
94923: PUSH
94924: LD_INT 600
94926: PUSH
94927: EMPTY
94928: LIST
94929: LIST
94930: PUSH
94931: EMPTY
94932: LIST
94933: LIST
94934: PPUSH
94935: CALL_OW 72
94939: OR
94940: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
94941: LD_VAR 0 5
94945: PPUSH
94946: CALL_OW 247
94950: PUSH
94951: LD_INT 2
94953: DOUBLE
94954: EQUAL
94955: IFTRUE 94959
94957: GO 95355
94959: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
94960: LD_VAR 0 5
94964: PPUSH
94965: CALL_OW 256
94969: PUSH
94970: LD_INT 650
94972: GREATER
94973: PUSH
94974: LD_VAR 0 5
94978: PPUSH
94979: LD_VAR 0 14
94983: PPUSH
94984: CALL_OW 296
94988: PUSH
94989: LD_INT 40
94991: LESS
94992: PUSH
94993: LD_VAR 0 14
94997: PPUSH
94998: LD_EXP 114
95002: PUSH
95003: LD_VAR 0 1
95007: ARRAY
95008: PPUSH
95009: CALL_OW 308
95013: OR
95014: AND
95015: IFFALSE 95137
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
95017: LD_VAR 0 5
95021: PPUSH
95022: CALL_OW 262
95026: PUSH
95027: LD_INT 1
95029: EQUAL
95030: PUSH
95031: LD_VAR 0 5
95035: PPUSH
95036: CALL_OW 261
95040: PUSH
95041: LD_INT 30
95043: LESS
95044: AND
95045: PUSH
95046: LD_VAR 0 8
95050: AND
95051: IFFALSE 95121
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
95053: LD_VAR 0 5
95057: PPUSH
95058: LD_VAR 0 8
95062: PPUSH
95063: LD_VAR 0 5
95067: PPUSH
95068: CALL_OW 74
95072: PPUSH
95073: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
95077: LD_VAR 0 5
95081: PPUSH
95082: LD_VAR 0 8
95086: PPUSH
95087: LD_VAR 0 5
95091: PPUSH
95092: CALL_OW 74
95096: PPUSH
95097: CALL_OW 296
95101: PUSH
95102: LD_INT 6
95104: LESS
95105: IFFALSE 95119
// SetFuel ( i , 100 ) ;
95107: LD_VAR 0 5
95111: PPUSH
95112: LD_INT 100
95114: PPUSH
95115: CALL_OW 240
// end else
95119: GO 95135
// ComAttackUnit ( i , e ) ;
95121: LD_VAR 0 5
95125: PPUSH
95126: LD_VAR 0 14
95130: PPUSH
95131: CALL_OW 115
// end else
95135: GO 95238
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
95137: LD_VAR 0 14
95141: PPUSH
95142: LD_EXP 114
95146: PUSH
95147: LD_VAR 0 1
95151: ARRAY
95152: PPUSH
95153: CALL_OW 308
95157: NOT
95158: PUSH
95159: LD_VAR 0 5
95163: PPUSH
95164: LD_VAR 0 14
95168: PPUSH
95169: CALL_OW 296
95173: PUSH
95174: LD_INT 40
95176: GREATEREQUAL
95177: AND
95178: PUSH
95179: LD_VAR 0 5
95183: PPUSH
95184: CALL_OW 256
95188: PUSH
95189: LD_INT 650
95191: LESSEQUAL
95192: OR
95193: PUSH
95194: LD_VAR 0 5
95198: PPUSH
95199: LD_EXP 113
95203: PUSH
95204: LD_VAR 0 1
95208: ARRAY
95209: PPUSH
95210: CALL_OW 308
95214: NOT
95215: AND
95216: IFFALSE 95238
// ComMoveToArea ( i , mc_parking [ base ] ) ;
95218: LD_VAR 0 5
95222: PPUSH
95223: LD_EXP 113
95227: PUSH
95228: LD_VAR 0 1
95232: ARRAY
95233: PPUSH
95234: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
95238: LD_VAR 0 5
95242: PPUSH
95243: CALL_OW 256
95247: PUSH
95248: LD_INT 998
95250: LESS
95251: PUSH
95252: LD_VAR 0 5
95256: PPUSH
95257: CALL_OW 263
95261: PUSH
95262: LD_INT 1
95264: EQUAL
95265: AND
95266: PUSH
95267: LD_VAR 0 5
95271: PPUSH
95272: CALL_OW 311
95276: AND
95277: PUSH
95278: LD_VAR 0 5
95282: PPUSH
95283: LD_EXP 113
95287: PUSH
95288: LD_VAR 0 1
95292: ARRAY
95293: PPUSH
95294: CALL_OW 308
95298: AND
95299: IFFALSE 95353
// begin mech := IsDrivenBy ( i ) ;
95301: LD_ADDR_VAR 0 10
95305: PUSH
95306: LD_VAR 0 5
95310: PPUSH
95311: CALL_OW 311
95315: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
95316: LD_VAR 0 10
95320: PPUSH
95321: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
95325: LD_VAR 0 10
95329: PPUSH
95330: LD_VAR 0 5
95334: PPUSH
95335: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
95339: LD_VAR 0 10
95343: PPUSH
95344: LD_VAR 0 5
95348: PPUSH
95349: CALL_OW 180
// end ; end ; unit_human :
95353: GO 95620
95355: LD_INT 1
95357: DOUBLE
95358: EQUAL
95359: IFTRUE 95363
95361: GO 95619
95363: POP
// begin b := IsInUnit ( i ) ;
95364: LD_ADDR_VAR 0 19
95368: PUSH
95369: LD_VAR 0 5
95373: PPUSH
95374: CALL_OW 310
95378: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
95379: LD_ADDR_VAR 0 20
95383: PUSH
95384: LD_VAR 0 19
95388: NOT
95389: PUSH
95390: LD_VAR 0 19
95394: PPUSH
95395: CALL_OW 266
95399: PUSH
95400: LD_INT 32
95402: PUSH
95403: LD_INT 31
95405: PUSH
95406: EMPTY
95407: LIST
95408: LIST
95409: IN
95410: OR
95411: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
95412: LD_VAR 0 17
95416: PUSH
95417: LD_VAR 0 2
95421: PPUSH
95422: LD_INT 21
95424: PUSH
95425: LD_INT 2
95427: PUSH
95428: EMPTY
95429: LIST
95430: LIST
95431: PPUSH
95432: CALL_OW 72
95436: PUSH
95437: LD_INT 1
95439: LESSEQUAL
95440: OR
95441: PUSH
95442: LD_VAR 0 20
95446: AND
95447: PUSH
95448: LD_VAR 0 5
95452: PUSH
95453: LD_VAR 0 18
95457: IN
95458: NOT
95459: AND
95460: IFFALSE 95553
// begin if b then
95462: LD_VAR 0 19
95466: IFFALSE 95515
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
95468: LD_VAR 0 19
95472: PPUSH
95473: LD_VAR 0 3
95477: PPUSH
95478: LD_VAR 0 19
95482: PPUSH
95483: CALL_OW 74
95487: PPUSH
95488: CALL_OW 296
95492: PUSH
95493: LD_INT 10
95495: LESS
95496: PUSH
95497: LD_VAR 0 19
95501: PPUSH
95502: CALL_OW 461
95506: PUSH
95507: LD_INT 7
95509: NONEQUAL
95510: AND
95511: IFFALSE 95515
// continue ;
95513: GO 94830
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
95515: LD_ADDR_VAR 0 18
95519: PUSH
95520: LD_VAR 0 18
95524: PPUSH
95525: LD_VAR 0 18
95529: PUSH
95530: LD_INT 1
95532: PLUS
95533: PPUSH
95534: LD_VAR 0 5
95538: PPUSH
95539: CALL_OW 1
95543: ST_TO_ADDR
// ComExitBuilding ( i ) ;
95544: LD_VAR 0 5
95548: PPUSH
95549: CALL_OW 122
// end ; if sold_defenders then
95553: LD_VAR 0 18
95557: IFFALSE 95617
// if i in sold_defenders then
95559: LD_VAR 0 5
95563: PUSH
95564: LD_VAR 0 18
95568: IN
95569: IFFALSE 95617
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
95571: LD_VAR 0 5
95575: PPUSH
95576: CALL_OW 314
95580: NOT
95581: PUSH
95582: LD_VAR 0 5
95586: PPUSH
95587: LD_VAR 0 14
95591: PPUSH
95592: CALL_OW 296
95596: PUSH
95597: LD_INT 30
95599: LESS
95600: AND
95601: IFFALSE 95617
// ComAttackUnit ( i , e ) ;
95603: LD_VAR 0 5
95607: PPUSH
95608: LD_VAR 0 14
95612: PPUSH
95613: CALL_OW 115
// end ; end ; end ;
95617: GO 95620
95619: POP
// if IsDead ( i ) then
95620: LD_VAR 0 5
95624: PPUSH
95625: CALL_OW 301
95629: IFFALSE 95647
// defenders := defenders diff i ;
95631: LD_ADDR_VAR 0 2
95635: PUSH
95636: LD_VAR 0 2
95640: PUSH
95641: LD_VAR 0 5
95645: DIFF
95646: ST_TO_ADDR
// end ;
95647: GO 94830
95649: POP
95650: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
95651: LD_VAR 0 3
95655: NOT
95656: PUSH
95657: LD_VAR 0 2
95661: NOT
95662: OR
95663: PUSH
95664: LD_EXP 89
95668: PUSH
95669: LD_VAR 0 1
95673: ARRAY
95674: NOT
95675: OR
95676: IFFALSE 94734
// MC_Reset ( base , 18 ) ;
95678: LD_VAR 0 1
95682: PPUSH
95683: LD_INT 18
95685: PPUSH
95686: CALL 26741 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
95690: LD_ADDR_VAR 0 2
95694: PUSH
95695: LD_VAR 0 2
95699: PUSH
95700: LD_VAR 0 2
95704: PPUSH
95705: LD_INT 2
95707: PUSH
95708: LD_INT 25
95710: PUSH
95711: LD_INT 1
95713: PUSH
95714: EMPTY
95715: LIST
95716: LIST
95717: PUSH
95718: LD_INT 25
95720: PUSH
95721: LD_INT 5
95723: PUSH
95724: EMPTY
95725: LIST
95726: LIST
95727: PUSH
95728: LD_INT 25
95730: PUSH
95731: LD_INT 8
95733: PUSH
95734: EMPTY
95735: LIST
95736: LIST
95737: PUSH
95738: LD_INT 25
95740: PUSH
95741: LD_INT 9
95743: PUSH
95744: EMPTY
95745: LIST
95746: LIST
95747: PUSH
95748: EMPTY
95749: LIST
95750: LIST
95751: LIST
95752: LIST
95753: LIST
95754: PPUSH
95755: CALL_OW 72
95759: DIFF
95760: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
95761: LD_VAR 0 3
95765: NOT
95766: PUSH
95767: LD_VAR 0 2
95771: PPUSH
95772: LD_INT 21
95774: PUSH
95775: LD_INT 2
95777: PUSH
95778: EMPTY
95779: LIST
95780: LIST
95781: PPUSH
95782: CALL_OW 72
95786: AND
95787: IFFALSE 96125
// begin tmp := FilterByTag ( defenders , 19 ) ;
95789: LD_ADDR_VAR 0 12
95793: PUSH
95794: LD_VAR 0 2
95798: PPUSH
95799: LD_INT 19
95801: PPUSH
95802: CALL 81460 0 2
95806: ST_TO_ADDR
// if tmp then
95807: LD_VAR 0 12
95811: IFFALSE 95881
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
95813: LD_ADDR_VAR 0 12
95817: PUSH
95818: LD_VAR 0 12
95822: PPUSH
95823: LD_INT 25
95825: PUSH
95826: LD_INT 3
95828: PUSH
95829: EMPTY
95830: LIST
95831: LIST
95832: PPUSH
95833: CALL_OW 72
95837: ST_TO_ADDR
// if tmp then
95838: LD_VAR 0 12
95842: IFFALSE 95881
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
95844: LD_ADDR_EXP 101
95848: PUSH
95849: LD_EXP 101
95853: PPUSH
95854: LD_VAR 0 1
95858: PPUSH
95859: LD_EXP 101
95863: PUSH
95864: LD_VAR 0 1
95868: ARRAY
95869: PUSH
95870: LD_VAR 0 12
95874: UNION
95875: PPUSH
95876: CALL_OW 1
95880: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
95881: LD_VAR 0 1
95885: PPUSH
95886: LD_INT 19
95888: PPUSH
95889: CALL 26741 0 2
// repeat wait ( 0 0$1 ) ;
95893: LD_INT 35
95895: PPUSH
95896: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
95900: LD_EXP 89
95904: PUSH
95905: LD_VAR 0 1
95909: ARRAY
95910: NOT
95911: PUSH
95912: LD_EXP 89
95916: PUSH
95917: LD_VAR 0 1
95921: ARRAY
95922: PUSH
95923: EMPTY
95924: EQUAL
95925: OR
95926: IFFALSE 95963
// begin for i in defenders do
95928: LD_ADDR_VAR 0 5
95932: PUSH
95933: LD_VAR 0 2
95937: PUSH
95938: FOR_IN
95939: IFFALSE 95952
// ComStop ( i ) ;
95941: LD_VAR 0 5
95945: PPUSH
95946: CALL_OW 141
95950: GO 95938
95952: POP
95953: POP
// defenders := [ ] ;
95954: LD_ADDR_VAR 0 2
95958: PUSH
95959: EMPTY
95960: ST_TO_ADDR
// exit ;
95961: GO 96149
// end ; for i in defenders do
95963: LD_ADDR_VAR 0 5
95967: PUSH
95968: LD_VAR 0 2
95972: PUSH
95973: FOR_IN
95974: IFFALSE 96063
// begin if not IsInArea ( i , mc_parking [ base ] ) then
95976: LD_VAR 0 5
95980: PPUSH
95981: LD_EXP 113
95985: PUSH
95986: LD_VAR 0 1
95990: ARRAY
95991: PPUSH
95992: CALL_OW 308
95996: NOT
95997: IFFALSE 96021
// ComMoveToArea ( i , mc_parking [ base ] ) else
95999: LD_VAR 0 5
96003: PPUSH
96004: LD_EXP 113
96008: PUSH
96009: LD_VAR 0 1
96013: ARRAY
96014: PPUSH
96015: CALL_OW 113
96019: GO 96061
// if GetControl ( i ) = control_manual then
96021: LD_VAR 0 5
96025: PPUSH
96026: CALL_OW 263
96030: PUSH
96031: LD_INT 1
96033: EQUAL
96034: IFFALSE 96061
// if IsDrivenBy ( i ) then
96036: LD_VAR 0 5
96040: PPUSH
96041: CALL_OW 311
96045: IFFALSE 96061
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
96047: LD_VAR 0 5
96051: PPUSH
96052: CALL_OW 311
96056: PPUSH
96057: CALL_OW 121
// end ;
96061: GO 95973
96063: POP
96064: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
96065: LD_VAR 0 2
96069: PPUSH
96070: LD_INT 95
96072: PUSH
96073: LD_EXP 113
96077: PUSH
96078: LD_VAR 0 1
96082: ARRAY
96083: PUSH
96084: EMPTY
96085: LIST
96086: LIST
96087: PPUSH
96088: CALL_OW 72
96092: PUSH
96093: LD_VAR 0 2
96097: EQUAL
96098: PUSH
96099: LD_EXP 112
96103: PUSH
96104: LD_VAR 0 1
96108: ARRAY
96109: OR
96110: PUSH
96111: LD_EXP 89
96115: PUSH
96116: LD_VAR 0 1
96120: ARRAY
96121: NOT
96122: OR
96123: IFFALSE 95893
// end ; MC_Reset ( base , 19 ) ;
96125: LD_VAR 0 1
96129: PPUSH
96130: LD_INT 19
96132: PPUSH
96133: CALL 26741 0 2
// MC_Reset ( base , 20 ) ;
96137: LD_VAR 0 1
96141: PPUSH
96142: LD_INT 20
96144: PPUSH
96145: CALL 26741 0 2
// end ; end_of_file
96149: LD_VAR 0 4
96153: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
96154: GO 96156
96156: DISABLE
// begin ru_radar := 98 ;
96157: LD_ADDR_EXP 132
96161: PUSH
96162: LD_INT 98
96164: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
96165: LD_ADDR_EXP 133
96169: PUSH
96170: LD_INT 89
96172: ST_TO_ADDR
// us_hack := 99 ;
96173: LD_ADDR_EXP 134
96177: PUSH
96178: LD_INT 99
96180: ST_TO_ADDR
// us_artillery := 97 ;
96181: LD_ADDR_EXP 135
96185: PUSH
96186: LD_INT 97
96188: ST_TO_ADDR
// ar_bio_bomb := 91 ;
96189: LD_ADDR_EXP 136
96193: PUSH
96194: LD_INT 91
96196: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
96197: LD_ADDR_EXP 137
96201: PUSH
96202: LD_INT 92
96204: ST_TO_ADDR
// tech_Artillery := 80 ;
96205: LD_ADDR_EXP 138
96209: PUSH
96210: LD_INT 80
96212: ST_TO_ADDR
// tech_RadMat := 81 ;
96213: LD_ADDR_EXP 139
96217: PUSH
96218: LD_INT 81
96220: ST_TO_ADDR
// tech_BasicTools := 82 ;
96221: LD_ADDR_EXP 140
96225: PUSH
96226: LD_INT 82
96228: ST_TO_ADDR
// tech_Cargo := 83 ;
96229: LD_ADDR_EXP 141
96233: PUSH
96234: LD_INT 83
96236: ST_TO_ADDR
// tech_Track := 84 ;
96237: LD_ADDR_EXP 142
96241: PUSH
96242: LD_INT 84
96244: ST_TO_ADDR
// tech_Crane := 85 ;
96245: LD_ADDR_EXP 143
96249: PUSH
96250: LD_INT 85
96252: ST_TO_ADDR
// tech_Bulldozer := 86 ;
96253: LD_ADDR_EXP 144
96257: PUSH
96258: LD_INT 86
96260: ST_TO_ADDR
// tech_Hovercraft := 87 ;
96261: LD_ADDR_EXP 145
96265: PUSH
96266: LD_INT 87
96268: ST_TO_ADDR
// end ;
96269: END
